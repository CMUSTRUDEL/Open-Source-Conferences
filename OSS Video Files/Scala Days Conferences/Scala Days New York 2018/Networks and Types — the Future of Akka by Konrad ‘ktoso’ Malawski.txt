Title: Networks and Types — the Future of Akka by Konrad ‘ktoso’ Malawski
Publication date: 2018-09-21
Playlist: Scala Days New York 2018
Description: 
	This video was recorded at Scala Days New York 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://na.scaladays.org/schedule/networks-and-types--the-future-of-akka
Captions: 
	00:00:04,900 --> 00:00:09,549
so welcome thanks for coming my name is

00:00:07,990 --> 00:00:11,880
Connor minovsky on the ARCA team and

00:00:09,549 --> 00:00:21,279
this is a talk mostly about architect

00:00:11,880 --> 00:00:23,110
hope you're excited I am so if anyone

00:00:21,279 --> 00:00:26,290
has seen the thing on the bottom there

00:00:23,110 --> 00:00:28,270
this is a fun this is a very weird

00:00:26,290 --> 00:00:30,550
reference if anyone gets for reference

00:00:28,270 --> 00:00:33,040
find me like what is for joke in this

00:00:30,550 --> 00:00:34,600
slides and you find out I have like

00:00:33,040 --> 00:00:37,510
special cookies I brought over from

00:00:34,600 --> 00:00:38,469
Japan and you'll get cookies if anyone

00:00:37,510 --> 00:00:40,570
gets for reference

00:00:38,469 --> 00:00:46,420
anyway that's me it doesn't really

00:00:40,570 --> 00:00:50,109
matter and let's talk about NACA so like

00:00:46,420 --> 00:00:52,030
usually I'd like dive right in and this

00:00:50,109 --> 00:00:54,190
time it's gonna be a bit more like prep

00:00:52,030 --> 00:00:56,230
like why are we even talking about this

00:00:54,190 --> 00:00:58,719
and then it's gonna be again a bit

00:00:56,230 --> 00:01:01,449
unusual from my previous talks I used to

00:00:58,719 --> 00:01:03,909
talk more about very conceptual this

00:01:01,449 --> 00:01:06,550
talk will be both conceptual but also

00:01:03,909 --> 00:01:08,620
very cold heavy because everybody wants

00:01:06,550 --> 00:01:11,710
to see what does the new API feel like

00:01:08,620 --> 00:01:14,440
is it gonna be pleasant to work with why

00:01:11,710 --> 00:01:17,230
did we make such decisions in the API as

00:01:14,440 --> 00:01:21,100
we did so I hope you did have your

00:01:17,230 --> 00:01:22,690
morning coffee so I will assume people

00:01:21,100 --> 00:01:25,120
are more or less familiar with our car

00:01:22,690 --> 00:01:27,430
so we're not only about the concurrency

00:01:25,120 --> 00:01:29,110
side of things but also very much about

00:01:27,430 --> 00:01:32,530
the distributed system side of things

00:01:29,110 --> 00:01:36,610
and it dictates many of also API

00:01:32,530 --> 00:01:39,340
decisions we make and here's UI quick

00:01:36,610 --> 00:01:41,680
reminder high-performance ish

00:01:39,340 --> 00:01:44,530
we recently rewrote for messaging layer

00:01:41,680 --> 00:01:46,420
so a remoting layer we're up to 1

00:01:44,530 --> 00:01:49,480
million messengers per second now using

00:01:46,420 --> 00:01:52,060
the new transport it's archery you'll

00:01:49,480 --> 00:01:55,960
see in a second how to use it does

00:01:52,060 --> 00:01:58,660
anyone use archery remoting already not

00:01:55,960 --> 00:02:01,050
yet okay so something to try out and

00:01:58,660 --> 00:02:05,530
there so how to use that as a side note

00:02:01,050 --> 00:02:07,900
so the prep I talked about so this is

00:02:05,530 --> 00:02:10,060
from a previous talk I did but all the

00:02:07,900 --> 00:02:10,569
other content is new but bear with me

00:02:10,060 --> 00:02:14,079
for a while

00:02:10,569 --> 00:02:17,019
so akka started our 2009 and this was

00:02:14,079 --> 00:02:18,070
just the actors just the concurrency

00:02:17,019 --> 00:02:21,070
side of things

00:02:18,070 --> 00:02:24,310
so and up until now very often people

00:02:21,070 --> 00:02:26,560
think when they say ya akov they mean

00:02:24,310 --> 00:02:29,620
the actors right it's kind of the main

00:02:26,560 --> 00:02:31,660
thing but it's not just that right we

00:02:29,620 --> 00:02:32,830
had future implementations back then

00:02:31,660 --> 00:02:35,800
where everybody had future

00:02:32,830 --> 00:02:38,200
implementations and finally yeah now we

00:02:35,800 --> 00:02:41,320
have ascended scholar ones but at some

00:02:38,200 --> 00:02:42,940
points acha head hero like you know

00:02:41,320 --> 00:02:45,760
everybody had fear on Twitter had veeram

00:02:42,940 --> 00:02:48,850
still have then we added clustering

00:02:45,760 --> 00:02:50,470
right so before that though was of

00:02:48,850 --> 00:02:53,800
course a moment where remoting was

00:02:50,470 --> 00:02:55,630
developed but remoting isn't really fit

00:02:53,800 --> 00:02:57,400
for proper distributed system you need

00:02:55,630 --> 00:02:59,140
proper failure detection right so let's

00:02:57,400 --> 00:03:02,260
go to a class reddit so okay now we're

00:02:59,140 --> 00:03:04,390
properly distributed then we added HTTP

00:03:02,260 --> 00:03:06,670
because okay clustering that's great I

00:03:04,390 --> 00:03:08,920
can talk with other actors but it's not

00:03:06,670 --> 00:03:11,890
you know I want to communicate with

00:03:08,920 --> 00:03:13,840
other technologies it's I don't know a -

00:03:11,890 --> 00:03:16,600
micro service on the other end or

00:03:13,840 --> 00:03:18,970
whatever so that's why we brought in

00:03:16,600 --> 00:03:21,970
kind of the spray guys we made it our

00:03:18,970 --> 00:03:24,100
HTTP so we have that story covered we

00:03:21,970 --> 00:03:26,050
can integrate with other people so

00:03:24,100 --> 00:03:29,770
another thing that came up is okay we

00:03:26,050 --> 00:03:30,790
need to kind of have if I have an alive

00:03:29,770 --> 00:03:32,890
actor no mana

00:03:30,790 --> 00:03:34,510
you know load balance it but it has

00:03:32,890 --> 00:03:37,270
state and don't want to lose that state

00:03:34,510 --> 00:03:39,280
so we invented were invented worked on

00:03:37,270 --> 00:03:41,200
the persistence modules which really

00:03:39,280 --> 00:03:43,600
went hand in hand with clustering

00:03:41,200 --> 00:03:47,350
cluster sharding so we got this way to

00:03:43,600 --> 00:03:50,170
distribute actors kind of semi alive and

00:03:47,350 --> 00:03:52,600
restore and rehydrate them small side

00:03:50,170 --> 00:03:54,610
note was all over co dt work but is

00:03:52,600 --> 00:03:57,190
there out fare you can absolutely use it

00:03:54,610 --> 00:04:00,100
but we've Co DTS you have to always be

00:03:57,190 --> 00:04:02,110
kind of aware ok does my model fits your

00:04:00,100 --> 00:04:06,070
it is yes no is it the exact thing I

00:04:02,110 --> 00:04:07,510
want but also it's the other side of its

00:04:06,070 --> 00:04:10,240
kind of a duality of persistence

00:04:07,510 --> 00:04:13,090
persistence is consistent single writer

00:04:10,240 --> 00:04:15,910
principle and see oddities are yeah like

00:04:13,090 --> 00:04:18,310
eventually consistent and gossipy so we

00:04:15,910 --> 00:04:20,109
have both trade-offs depending what your

00:04:18,310 --> 00:04:22,570
latency needs or what your consistency

00:04:20,109 --> 00:04:25,060
needs are finally the big thing

00:04:22,570 --> 00:04:26,250
streaming obviously now also part of the

00:04:25,060 --> 00:04:28,590
JD cave

00:04:26,250 --> 00:04:30,210
directive streams interfaces we worked

00:04:28,590 --> 00:04:33,000
on that like three years ago and finally

00:04:30,210 --> 00:04:35,700
ended up in JK nine plus and of course

00:04:33,000 --> 00:04:38,730
our Co streams implements that etc as

00:04:35,700 --> 00:04:42,360
for adding HTTP to researching typed

00:04:38,730 --> 00:04:45,780
quite a while and you'll see typed has

00:04:42,360 --> 00:04:48,210
been like researched for at least three

00:04:45,780 --> 00:04:51,540
years until he goes to this point with

00:04:48,210 --> 00:04:53,580
api's were actually confident in it then

00:04:51,540 --> 00:04:57,030
there Paco announcements you maybe saw

00:04:53,580 --> 00:05:00,330
our tree veneer remoting so we record a

00:04:57,030 --> 00:05:03,210
lot of stuff right HTTP got improvements

00:05:00,330 --> 00:05:06,300
HTTP 2 streams got improvements like an

00:05:03,210 --> 00:05:08,190
entire ecosystem with our Paco remoting

00:05:06,300 --> 00:05:10,740
got an improvement with a full rewrite

00:05:08,190 --> 00:05:12,270
of artery with zero quotes changes for

00:05:10,740 --> 00:05:13,950
you you get a 10x improvement of

00:05:12,270 --> 00:05:15,840
performance by switching a flag

00:05:13,950 --> 00:05:18,390
we haven't did more the data center

00:05:15,840 --> 00:05:21,570
things but we didn't really touch the

00:05:18,390 --> 00:05:24,810
core of occur for a number of years

00:05:21,570 --> 00:05:27,630
right for actors so this talk is about

00:05:24,810 --> 00:05:30,870
the actors where it all began and how we

00:05:27,630 --> 00:05:35,310
see it moving forward and also it's

00:05:30,870 --> 00:05:38,370
about types and it became kind of a meme

00:05:35,310 --> 00:05:40,440
to me I don't joke about our car hating

00:05:38,370 --> 00:05:42,410
types so sometimes you get someone on

00:05:40,440 --> 00:05:46,500
line saying I hate stripes trust me

00:05:42,410 --> 00:05:52,169
right once in a while someone tweets

00:05:46,500 --> 00:05:53,880
something like that in practice it's not

00:05:52,169 --> 00:05:55,979
what we don't like types I mean we were

00:05:53,880 --> 00:05:58,020
all scholar developers if you believe it

00:05:55,979 --> 00:06:01,440
or not and we do like types

00:05:58,020 --> 00:06:03,240
it's just what yes factor um the core

00:06:01,440 --> 00:06:04,650
actor thing wasn't very strictly typed

00:06:03,240 --> 00:06:07,080
because yeah it was mostly inspired

00:06:04,650 --> 00:06:10,160
coming from our language it's like yeah

00:06:07,080 --> 00:06:12,810
ok I sent a eadamson round I don't care

00:06:10,160 --> 00:06:14,790
but if you look at like historical what

00:06:12,810 --> 00:06:16,950
we were really focused on in the last

00:06:14,790 --> 00:06:20,250
year's ok spray arc HTTP vets

00:06:16,950 --> 00:06:23,450
since 2013 literally than reactive

00:06:20,250 --> 00:06:26,100
streams 2014 up until this day are pakka

00:06:23,450 --> 00:06:28,650
recent thing and the archetypes being

00:06:26,100 --> 00:06:32,880
researched and kind of evolved since

00:06:28,650 --> 00:06:34,860
2014 and during that time like multiple

00:06:32,880 --> 00:06:38,580
papers being published which influenced

00:06:34,860 --> 00:06:39,669
or directions it was still or focused it

00:06:38,580 --> 00:06:41,830
just it wasn't

00:06:39,669 --> 00:06:45,610
we didn't arrive at a thing that we felt

00:06:41,830 --> 00:06:48,490
comfortable to call it a new main thing

00:06:45,610 --> 00:06:50,860
so when you look at it yeah all of this

00:06:48,490 --> 00:06:54,069
is typed right streams are typed to

00:06:50,860 --> 00:06:57,249
spray a arc HTTP folia typed most typed

00:06:54,069 --> 00:07:00,400
HTTP motor on and the entire ecosystem I

00:06:57,249 --> 00:07:03,759
would say archetype finally getting here

00:07:00,400 --> 00:07:06,129
so what do we need it yeah of course

00:07:03,759 --> 00:07:08,020
static typing helps you with compile

00:07:06,129 --> 00:07:11,710
time safety you get more checks you make

00:07:08,020 --> 00:07:13,449
less mistakes but you also do less like

00:07:11,710 --> 00:07:15,250
weird debugging of concurrent

00:07:13,449 --> 00:07:16,930
distributed system because something

00:07:15,250 --> 00:07:18,639
went slightly more right so it's more

00:07:16,930 --> 00:07:22,900
about understandability than anything

00:07:18,639 --> 00:07:25,090
else that's with papers I mentioned so

00:07:22,900 --> 00:07:27,069
Philip waterless paper and very

00:07:25,090 --> 00:07:28,659
interesting the reactive paper somewhat

00:07:27,069 --> 00:07:30,810
aleksander poker pets and Martineau

00:07:28,659 --> 00:07:35,020
discs if you're interested and was

00:07:30,810 --> 00:07:38,770
slightly influential for what we arrived

00:07:35,020 --> 00:07:43,419
at but let's go and see what we actually

00:07:38,770 --> 00:07:46,779
changed so actors visual complaints from

00:07:43,419 --> 00:07:49,689
the serial guy you can send the wrong

00:07:46,779 --> 00:07:52,089
message right and people very often

00:07:49,689 --> 00:07:53,830
claim that this is this is the first

00:07:52,089 --> 00:07:56,529
thing that comes up right or occurrence

00:07:53,830 --> 00:07:59,349
on your own message this is not the

00:07:56,529 --> 00:08:00,939
biggest problem honestly if you send the

00:07:59,349 --> 00:08:03,399
wrong message okay it pops up in

00:08:00,939 --> 00:08:05,949
unhandled messages or in the letters and

00:08:03,399 --> 00:08:09,069
you're like okay I found it it is

00:08:05,949 --> 00:08:11,740
annoying but it's not like the main

00:08:09,069 --> 00:08:14,409
problem with actors I would say the

00:08:11,740 --> 00:08:16,300
navigation aspects you inherit the akka

00:08:14,409 --> 00:08:17,409
code face from a different team and you

00:08:16,300 --> 00:08:19,360
want to understand whatever it's doing

00:08:17,409 --> 00:08:20,830
well yeah I guess the plane actually fun

00:08:19,360 --> 00:08:22,810
I don't know what that is right what

00:08:20,830 --> 00:08:25,449
what protocol is about speaking so it's

00:08:22,810 --> 00:08:27,729
more about by looking at for source code

00:08:25,449 --> 00:08:30,250
can I understand what I can do with that

00:08:27,729 --> 00:08:31,930
it's not as much about oh I sent the

00:08:30,250 --> 00:08:33,669
wrong message because that's when you're

00:08:31,930 --> 00:08:35,649
developing it you have it in your brain

00:08:33,669 --> 00:08:38,740
it's more about handing it to other

00:08:35,649 --> 00:08:41,560
people then of course the mutable state

00:08:38,740 --> 00:08:44,220
dance with sender which is mutable and

00:08:41,560 --> 00:08:47,410
futures was always a bit of an

00:08:44,220 --> 00:08:50,350
unpleasant thing to do and for our claim

00:08:47,410 --> 00:08:53,830
or actors don't compose which is kind of

00:08:50,350 --> 00:08:56,080
true right you could say that yeah you

00:08:53,830 --> 00:08:58,810
can do like this chain of actors and we

00:08:56,080 --> 00:08:59,890
send each other messages by proxying but

00:08:58,810 --> 00:09:01,870
that's not what people mean when they

00:08:59,890 --> 00:09:04,350
say that claim we mean it doesn't

00:09:01,870 --> 00:09:07,210
compose the same way as I can compose

00:09:04,350 --> 00:09:09,130
biet monads or plain functions or

00:09:07,210 --> 00:09:12,100
whatever right I can't rap I can't

00:09:09,130 --> 00:09:14,980
combine them which is absolutely valid

00:09:12,100 --> 00:09:19,210
in planes and I'm adding three more

00:09:14,980 --> 00:09:22,480
complaints which don't come up as the

00:09:19,210 --> 00:09:25,690
main rant online I would say but for us

00:09:22,480 --> 00:09:28,060
we see something we can improve now when

00:09:25,690 --> 00:09:30,100
we do this kind of bigger change so it's

00:09:28,060 --> 00:09:31,810
flow control active messaging is not

00:09:30,100 --> 00:09:34,150
flow controlled at all which is why we

00:09:31,810 --> 00:09:36,400
did kind of very active streams after

00:09:34,150 --> 00:09:38,320
streams but what about bringing back

00:09:36,400 --> 00:09:42,000
some of these concepts back to plane

00:09:38,320 --> 00:09:45,490
actors supervision is very often abused

00:09:42,000 --> 00:09:47,950
people read the first time about akka

00:09:45,490 --> 00:09:50,140
and visa-versa supervision thing so we

00:09:47,950 --> 00:09:52,570
use it for everything and we'll never

00:09:50,140 --> 00:09:54,490
use you know a try object favor Navi is

00:09:52,570 --> 00:09:56,770
a try-catch which would have been

00:09:54,490 --> 00:09:59,590
perfectly fine and even better than like

00:09:56,770 --> 00:10:01,810
resorting to the supervision mechanism

00:09:59,590 --> 00:10:04,320
which is more for things are really

00:10:01,810 --> 00:10:08,890
going bad like the thing is exploding

00:10:04,320 --> 00:10:11,140
try restarting and doctor selection

00:10:08,890 --> 00:10:14,470
being also very much abused so we'll see

00:10:11,140 --> 00:10:18,910
about all of these fee what six things

00:10:14,470 --> 00:10:21,910
how we address them and know these are

00:10:18,910 --> 00:10:24,220
things we were not perceived so actors

00:10:21,910 --> 00:10:27,580
are not intended to be completely

00:10:24,220 --> 00:10:29,350
magically pure they are intended to have

00:10:27,580 --> 00:10:32,410
mutable state in film that's what we do

00:10:29,350 --> 00:10:34,980
very encapsulate state which can be

00:10:32,410 --> 00:10:38,500
totally of our that's the purpose of it

00:10:34,980 --> 00:10:41,170
and it's also not going to be like for

00:10:38,500 --> 00:10:43,840
high performance in the sense of a

00:10:41,170 --> 00:10:46,510
kernel bypass crazy things

00:10:43,840 --> 00:10:49,420
high performance you know computing in

00:10:46,510 --> 00:10:51,610
the real sense of the word like people

00:10:49,420 --> 00:10:55,330
with super computers right it's high

00:10:51,610 --> 00:10:58,149
performance you know so if we can

00:10:55,330 --> 00:10:59,890
do a trade of it means it's gonna be so

00:10:58,149 --> 00:11:02,769
incredibly more useful and

00:10:59,890 --> 00:11:04,660
understandable versus it's the fastest

00:11:02,769 --> 00:11:07,480
thing on the planet we will make the

00:11:04,660 --> 00:11:08,830
thing that is both fast but also usable

00:11:07,480 --> 00:11:10,930
because you're in the distributed system

00:11:08,830 --> 00:11:13,380
it's hard to understand those things you

00:11:10,930 --> 00:11:15,459
know we want to make them fast and

00:11:13,380 --> 00:11:18,430
understandable it's easy to make a fast

00:11:15,459 --> 00:11:20,649
thing that you can't understand and we

00:11:18,430 --> 00:11:23,230
will not build only for the local case

00:11:20,649 --> 00:11:25,600
that's like a core principle everything

00:11:23,230 --> 00:11:30,839
we build has to abstract nicely into the

00:11:25,600 --> 00:11:34,899
distributed setting so summary of

00:11:30,839 --> 00:11:38,220
untyped we call it classic Noel starts

00:11:34,899 --> 00:11:40,630
referring it to a classic actors classic

00:11:38,220 --> 00:11:43,029
now so that's for summary of main

00:11:40,630 --> 00:11:44,800
complaints right for centuries control

00:11:43,029 --> 00:11:47,980
gate it automatically so we can't type

00:11:44,800 --> 00:11:49,990
it correctly any message to any actor

00:11:47,980 --> 00:11:51,730
but they've received partial function

00:11:49,990 --> 00:11:54,730
and I need to unit right if it's for

00:11:51,730 --> 00:11:59,320
user board complaints so what do we do

00:11:54,730 --> 00:12:01,510
in no sir mr. Branum ation a bit so

00:11:59,320 --> 00:12:03,220
Center is part of a protocol it's not a

00:12:01,510 --> 00:12:07,140
method anymore so it can be properly

00:12:03,220 --> 00:12:09,670
typed this is how you would do it and

00:12:07,140 --> 00:12:11,230
behaviors always return behaviors people

00:12:09,670 --> 00:12:13,810
always fade with confusion and ARCA

00:12:11,230 --> 00:12:15,730
classic were they kind of like finite

00:12:13,810 --> 00:12:17,470
state machine API but it's kind of his

00:12:15,730 --> 00:12:19,570
thing on the side and you'd have to this

00:12:17,470 --> 00:12:21,760
idea of a finite state machine do i do

00:12:19,570 --> 00:12:22,540
vector we've become and very confused

00:12:21,760 --> 00:12:25,420
what should I do

00:12:22,540 --> 00:12:27,670
and so now basically everything is an

00:12:25,420 --> 00:12:29,380
FSM so sometimes people ask yeah will

00:12:27,670 --> 00:12:31,959
you be porting finite state machines to

00:12:29,380 --> 00:12:34,950
occur typed actors well now because

00:12:31,959 --> 00:12:37,300
everything is now a finite state machine

00:12:34,950 --> 00:12:39,130
reminder if anyone has forgotten how an

00:12:37,300 --> 00:12:41,350
actor looks like with the red things

00:12:39,130 --> 00:12:45,730
being the not nice things we want to

00:12:41,350 --> 00:12:47,279
improve so extras and types finally so

00:12:45,730 --> 00:12:49,990
this is the long intro I talked about

00:12:47,279 --> 00:12:54,579
kind of finished and we can see some

00:12:49,990 --> 00:12:57,459
actual meat while we're at it like

00:12:54,579 --> 00:13:00,220
module naming we talked a bit about it

00:12:57,459 --> 00:13:02,769
in the team and we're going to talk

00:13:00,220 --> 00:13:04,930
about the modules is architecture typed

00:13:02,769 --> 00:13:07,350
ARCA stream typed like a cluster typed

00:13:04,930 --> 00:13:09,210
because the goal is to eventually

00:13:07,350 --> 00:13:11,820
all the typed things to be the main

00:13:09,210 --> 00:13:14,250
things right so then we can just slash

00:13:11,820 --> 00:13:17,580
off the typed suffix it's gonna be less

00:13:14,250 --> 00:13:20,220
weird than having a car type actor and

00:13:17,580 --> 00:13:22,020
archetype cluster it's I mean kind of

00:13:20,220 --> 00:13:25,910
made more sense course so if you're

00:13:22,020 --> 00:13:30,690
looking for artifacts occur thing typed

00:13:25,910 --> 00:13:33,180
and yeah is it all about xref and people

00:13:30,690 --> 00:13:35,100
would very often say yes we want for the

00:13:33,180 --> 00:13:37,230
typed actor if right that's the thing we

00:13:35,100 --> 00:13:37,830
want the reaction is usually oh this is

00:13:37,230 --> 00:13:43,080
she

00:13:37,830 --> 00:13:46,080
oh my god right but I love this comic by

00:13:43,080 --> 00:13:48,990
her we do visit for website but I will

00:13:46,080 --> 00:13:49,980
argue that next row is like oh okay

00:13:48,990 --> 00:13:53,850
changed a bit

00:13:49,980 --> 00:13:57,090
it is not the main change and it is not

00:13:53,850 --> 00:14:01,050
the most useful change the biggest

00:13:57,090 --> 00:14:03,690
change and kind of the thing that

00:14:01,050 --> 00:14:07,620
outshines all the other changes me is

00:14:03,690 --> 00:14:09,870
this behavior concept which can properly

00:14:07,620 --> 00:14:12,570
compose in the kind of functional

00:14:09,870 --> 00:14:15,300
meaning of the word which was fair like

00:14:12,570 --> 00:14:19,020
third complaint in the list but to me

00:14:15,300 --> 00:14:21,600
it's probably the most important so an

00:14:19,020 --> 00:14:23,970
actor of T solves the first complaint

00:14:21,600 --> 00:14:26,370
but yeah sends wrong message and it also

00:14:23,970 --> 00:14:28,170
source hurts to navigate code right

00:14:26,370 --> 00:14:31,440
which is to me even more important one

00:14:28,170 --> 00:14:33,840
because we you know work with a bigger

00:14:31,440 --> 00:14:35,820
codebase you know I don't know I go to a

00:14:33,840 --> 00:14:38,520
customer we show me the five million 90s

00:14:35,820 --> 00:14:40,140
codebase I don't make yeah I see what

00:14:38,520 --> 00:14:42,000
you mean with it being hard to navigate

00:14:40,140 --> 00:14:48,960
it's not that we've been living in

00:14:42,000 --> 00:14:51,360
denial we know so first actor so this is

00:14:48,960 --> 00:14:54,030
how you create an actor system now and

00:14:51,360 --> 00:14:56,070
you will notice that and it will

00:14:54,030 --> 00:14:59,040
probably wants to point at stuff

00:14:56,070 --> 00:15:01,980
let's see if I can figure it out it's

00:14:59,040 --> 00:15:04,680
for Mouse yes yes okay so when you start

00:15:01,980 --> 00:15:07,710
an actor system you already can give it

00:15:04,680 --> 00:15:09,630
a behavior so in classic the root

00:15:07,710 --> 00:15:11,340
guardian so what does all of a

00:15:09,630 --> 00:15:14,340
supervision for the other actors for the

00:15:11,340 --> 00:15:16,380
top level actors was kind of special and

00:15:14,340 --> 00:15:19,320
it was handled by akka and so in typed

00:15:16,380 --> 00:15:21,089
you kind of give the user guardian which

00:15:19,320 --> 00:15:24,149
means that physicists for place.we

00:15:21,089 --> 00:15:27,120
can start audio actress and I actually

00:15:24,149 --> 00:15:30,779
think we will simplify it so you can do

00:15:27,120 --> 00:15:32,809
a spawn on an existing actor system the

00:15:30,779 --> 00:15:36,240
reason we didn't do it as kind of our

00:15:32,809 --> 00:15:39,629
internal one thing to not have any locks

00:15:36,240 --> 00:15:41,370
in the entire code base and starting top

00:15:39,629 --> 00:15:43,350
level actresses like one of the two

00:15:41,370 --> 00:15:45,480
places in the entirety of akka which has

00:15:43,350 --> 00:15:47,759
a lock so we were like yeah we will not

00:15:45,480 --> 00:15:51,360
have a loss anymore but the usefulness

00:15:47,759 --> 00:15:53,040
outshines it so and yeah where is this

00:15:51,360 --> 00:15:54,990
actor I said yeah

00:15:53,040 --> 00:15:56,910
you give actor system and behavior and

00:15:54,990 --> 00:16:00,240
turns out where the actor system is an

00:15:56,910 --> 00:16:02,309
actor just wasn't a very useful one

00:16:00,240 --> 00:16:04,350
because we typed it to not used so yeah

00:16:02,309 --> 00:16:07,470
you can send it with not used message

00:16:04,350 --> 00:16:11,370
I'm okay but it's gonna ignore it anyway

00:16:07,470 --> 00:16:14,879
so this is to showcase but yeah you

00:16:11,370 --> 00:16:17,309
can't send it lot string you'll get a

00:16:14,879 --> 00:16:21,509
compilation error and overall ten years

00:16:17,309 --> 00:16:25,709
of research was worth it oh my these

00:16:21,509 --> 00:16:27,990
smart people Jesus cross I know it's

00:16:25,709 --> 00:16:32,429
funny like took took a bunch of years to

00:16:27,990 --> 00:16:35,550
get here right um we know but let's talk

00:16:32,429 --> 00:16:39,329
about an actual case so this is how you

00:16:35,550 --> 00:16:41,819
would normally build things so instead

00:16:39,329 --> 00:16:43,439
of extending an actor now this is the

00:16:41,819 --> 00:16:44,970
more functional style and there are

00:16:43,439 --> 00:16:46,649
Sophie other stylists were which is

00:16:44,970 --> 00:16:50,339
easier to migrate to if you have

00:16:46,649 --> 00:16:52,050
existing actors so any caps relating

00:16:50,339 --> 00:16:53,999
object you're not supposed to have state

00:16:52,050 --> 00:16:57,389
in it right because that would be shared

00:16:53,999 --> 00:17:01,019
between older actors and then you create

00:16:57,389 --> 00:17:04,470
this behavior okay and here we see this

00:17:01,019 --> 00:17:06,600
style of the same thing where you have a

00:17:04,470 --> 00:17:10,020
state and you pass it around to each

00:17:06,600 --> 00:17:13,529
next behavior we kind of adopt it as the

00:17:10,020 --> 00:17:16,559
main thing so okay um when when you

00:17:13,529 --> 00:17:19,260
create a scheduling master so context

00:17:16,559 --> 00:17:22,559
spawn scheduling master let's apply it

00:17:19,260 --> 00:17:24,510
so in this behavior with empty set okay

00:17:22,559 --> 00:17:27,089
so it doesn't have anyone registered yet

00:17:24,510 --> 00:17:29,730
and when it receives a message register

00:17:27,089 --> 00:17:33,600
of course it's typed properly here it

00:17:29,730 --> 00:17:34,299
becomes the new self contract it changes

00:17:33,600 --> 00:17:36,429
its state

00:17:34,299 --> 00:17:40,419
in a kind of pure fashion because it

00:17:36,429 --> 00:17:44,049
keeps becoming this new state another

00:17:40,419 --> 00:17:47,259
change we changed the method name so now

00:17:44,049 --> 00:17:48,730
it's spawn and spawn anonymous I don't

00:17:47,259 --> 00:17:52,749
think I'm showing a spawn a nominee

00:17:48,730 --> 00:17:54,399
anonymous explicitly here but this is an

00:17:52,749 --> 00:17:55,869
important changes the work because we

00:17:54,399 --> 00:17:57,519
keep telling people you should name your

00:17:55,869 --> 00:17:59,499
actors I don't know everybody's our I

00:17:57,519 --> 00:18:01,149
don't care and they never burn order

00:17:59,499 --> 00:18:03,340
over the name sort of like dollar a

00:18:01,149 --> 00:18:05,200
write the entire system is dollar B and

00:18:03,340 --> 00:18:07,809
dollar a and you look at the system I

00:18:05,200 --> 00:18:11,200
don't know what's doing so now this is

00:18:07,809 --> 00:18:13,840
kind of enforced the spawn will make you

00:18:11,200 --> 00:18:15,309
give it a name and if he wants to not

00:18:13,840 --> 00:18:17,940
give it a name you have to spell it out

00:18:15,309 --> 00:18:21,340
yes porn anonymous I know what I'm doing

00:18:17,940 --> 00:18:24,970
invent a name for me small small changes

00:18:21,340 --> 00:18:27,629
but I think very important so behaviour

00:18:24,970 --> 00:18:30,940
is this collection of factories for

00:18:27,629 --> 00:18:32,529
behaviors and the behavior is literally

00:18:30,940 --> 00:18:35,529
what nowadays would be the receive

00:18:32,529 --> 00:18:38,830
function in an actor right and we have a

00:18:35,529 --> 00:18:42,759
number of receive versions kind of feels

00:18:38,830 --> 00:18:45,309
familiar and the biggest change perhaps

00:18:42,759 --> 00:18:48,009
is that because you're in this pure

00:18:45,309 --> 00:18:49,960
style so if you do receive you get both

00:18:48,009 --> 00:18:53,499
the extra context which is properly

00:18:49,960 --> 00:18:56,169
typed as well that matters for things

00:18:53,499 --> 00:18:58,240
like ask and and similar things and the

00:18:56,169 --> 00:19:00,129
message but sometimes you don't care

00:18:58,240 --> 00:19:02,710
about the context right you just have a

00:19:00,129 --> 00:19:04,629
pure function which does a thing to the

00:19:02,710 --> 00:19:06,490
message forward somewhere or just

00:19:04,629 --> 00:19:09,100
changes its state so when you can say

00:19:06,490 --> 00:19:11,499
receive message so everything has like

00:19:09,100 --> 00:19:14,289
the receive methods have two versions

00:19:11,499 --> 00:19:16,509
always its receive receive message

00:19:14,289 --> 00:19:18,129
receive message posture which is closer

00:19:16,509 --> 00:19:21,970
to the current receive right partial

00:19:18,129 --> 00:19:25,330
function and I'm sorry for the beeping

00:19:21,970 --> 00:19:29,740
but it seems a constant changing other

00:19:25,330 --> 00:19:33,639
behaviors but not a full list it's

00:19:29,740 --> 00:19:35,980
pretty much full list I think and this

00:19:33,639 --> 00:19:38,169
is really core so everything is now

00:19:35,980 --> 00:19:39,340
expressed as behaviors for example how

00:19:38,169 --> 00:19:42,429
do I stop my actor

00:19:39,340 --> 00:19:44,559
well the behavior of a stuffed actor is

00:19:42,429 --> 00:19:45,520
but it's you know it's stopped right so

00:19:44,559 --> 00:19:48,070
we return

00:19:45,520 --> 00:19:49,840
the stuffed behavior versus what

00:19:48,070 --> 00:19:53,230
previously was for case you'd say yeah

00:19:49,840 --> 00:19:56,260
context stop self right so it's again

00:19:53,230 --> 00:20:02,080
the same concept for behavioral changes

00:19:56,260 --> 00:20:05,050
oh yeah other things to note coexistence

00:20:02,080 --> 00:20:06,760
so yes type actions can coexist with an

00:20:05,050 --> 00:20:10,059
untyped active system and on tapped

00:20:06,760 --> 00:20:13,300
actors in fact it is currently running

00:20:10,059 --> 00:20:16,059
on a emulation layer so when you start

00:20:13,300 --> 00:20:18,970
currently typed actors they are actually

00:20:16,059 --> 00:20:21,400
running on a untyped actor that has like

00:20:18,970 --> 00:20:22,090
an interpreter for the type things on

00:20:21,400 --> 00:20:25,510
top of it

00:20:22,090 --> 00:20:28,929
this guys like ups and downs the app is

00:20:25,510 --> 00:20:31,059
well it's a proven extra system

00:20:28,929 --> 00:20:33,850
implementation so this was not gonna be

00:20:31,059 --> 00:20:36,550
crazy memory visibility issues suddenly

00:20:33,850 --> 00:20:39,070
right so we want to migrate help you

00:20:36,550 --> 00:20:43,150
migrate from existing code to type

00:20:39,070 --> 00:20:46,450
systems and feel confident about it and

00:20:43,150 --> 00:20:49,030
yes for existed a complete new actor

00:20:46,450 --> 00:20:51,040
system implementation and we would get

00:20:49,030 --> 00:20:53,890
very nice performance improvements from

00:20:51,040 --> 00:20:55,929
it like 20 40 percent without changing

00:20:53,890 --> 00:20:59,500
anything else just some of internal

00:20:55,929 --> 00:21:01,720
spare but we thought well let's first

00:20:59,500 --> 00:21:03,550
get people over with a nice migration

00:21:01,720 --> 00:21:09,190
path and then we can introduce a new

00:21:03,550 --> 00:21:11,980
active system so behavior behaviors

00:21:09,190 --> 00:21:14,080
compose which was the biggest complaint

00:21:11,980 --> 00:21:17,710
right actors don't compose what

00:21:14,080 --> 00:21:21,940
behaviors do compose so behaviors can

00:21:17,710 --> 00:21:24,370
not only be stopped or same or receive

00:21:21,940 --> 00:21:27,370
they can also give you more capabilities

00:21:24,370 --> 00:21:30,820
it's you can think about it like a NACA

00:21:27,370 --> 00:21:32,650
HTTP you have the routes yessir so it's

00:21:30,820 --> 00:21:36,250
not as crazy as well no implicit at all

00:21:32,650 --> 00:21:39,400
here but you can wrap and get more

00:21:36,250 --> 00:21:41,530
capabilities inside the wrapped thing so

00:21:39,400 --> 00:21:43,540
for example when you have your receive

00:21:41,530 --> 00:21:45,970
message and you can't really do much you

00:21:43,540 --> 00:21:48,790
can maybe have some state etc but not

00:21:45,970 --> 00:21:50,860
more so anything I need logging I need

00:21:48,790 --> 00:21:53,980
to spawn actors always porn actors and

00:21:50,860 --> 00:21:56,020
into a context so you can either do a

00:21:53,980 --> 00:21:57,170
receive where you get for context or you

00:21:56,020 --> 00:21:59,780
can say what

00:21:57,170 --> 00:22:02,090
wrap it with the setup and setup gives

00:21:59,780 --> 00:22:04,790
you access to the context so setup is

00:22:02,090 --> 00:22:06,980
replacing the pre-start right so

00:22:04,790 --> 00:22:08,540
literally what happens here is architect

00:22:06,980 --> 00:22:11,570
is looking at four fingers how it's a

00:22:08,540 --> 00:22:14,000
setup I will run the piece of code in

00:22:11,570 --> 00:22:15,890
the setup and then I will keep

00:22:14,000 --> 00:22:17,750
interpreting whatever was returned

00:22:15,890 --> 00:22:20,000
inside so it's really always

00:22:17,750 --> 00:22:23,930
interpreting the last returned behavior

00:22:20,000 --> 00:22:26,360
so setup it's like free start but when

00:22:23,930 --> 00:22:28,100
you say ah but I needs a timers yeah

00:22:26,360 --> 00:22:30,110
what do you do in it you're like oh with

00:22:28,100 --> 00:22:32,510
timers and you get a timers objects

00:22:30,110 --> 00:22:34,790
which you can access and they compose in

00:22:32,510 --> 00:22:36,920
any way shape or form you want right in

00:22:34,790 --> 00:22:38,810
the middle of your code when you return

00:22:36,920 --> 00:22:40,670
a new thing you could say well here I

00:22:38,810 --> 00:22:42,590
need timers so you can just say yeah

00:22:40,670 --> 00:22:45,920
behaviors give me the timers so it

00:22:42,590 --> 00:22:47,480
composes nicely and like each version of

00:22:45,920 --> 00:22:49,250
the rat thing it doesn't matter which

00:22:47,480 --> 00:22:51,920
order you do it it all works

00:22:49,250 --> 00:22:54,260
so now weird cases about Aria are sort

00:22:51,920 --> 00:22:58,430
of has to be on the top it all works in

00:22:54,260 --> 00:23:00,350
either wing so how about reusing those

00:22:58,430 --> 00:23:01,990
because that was yeah okay I can wrap

00:23:00,350 --> 00:23:04,790
stuff it's not super exciting because

00:23:01,990 --> 00:23:09,230
like writing functions it's a step

00:23:04,790 --> 00:23:11,450
forward but how about reusing things so

00:23:09,230 --> 00:23:14,030
not the most exciting example on the

00:23:11,450 --> 00:23:17,120
planet but and maybe a bit small font so

00:23:14,030 --> 00:23:19,790
I try to zoom a bit so just a ping

00:23:17,120 --> 00:23:21,850
protocol just like penguin and pink -

00:23:19,790 --> 00:23:24,950
and you want to hand it off right but

00:23:21,850 --> 00:23:26,450
maybe you're handling them separately

00:23:24,950 --> 00:23:30,740
because they don't even share state or

00:23:26,450 --> 00:23:33,530
something so here the first thing is

00:23:30,740 --> 00:23:36,910
behaviors receive partial so it's a

00:23:33,530 --> 00:23:40,850
partial function so if it didn't match

00:23:36,910 --> 00:23:43,010
then it internally returns a behavior

00:23:40,850 --> 00:23:46,910
unhandled which is kind of a last line

00:23:43,010 --> 00:23:48,920
there so you can mix partial functions

00:23:46,910 --> 00:23:50,570
which here you can always or else a

00:23:48,920 --> 00:23:53,030
partial function but you can also take a

00:23:50,570 --> 00:23:54,500
total function which is the received

00:23:53,030 --> 00:23:56,300
message so that's a total function

00:23:54,500 --> 00:23:58,190
you'll get all the compiler niceties

00:23:56,300 --> 00:24:01,790
about hey you forgot to handle x and y

00:23:58,190 --> 00:24:03,650
but you could express the same as a

00:24:01,790 --> 00:24:05,680
partial function would be with a case

00:24:03,650 --> 00:24:09,130
underscore and you return a on hand

00:24:05,680 --> 00:24:10,690
it's exactly the same but you get the

00:24:09,130 --> 00:24:13,540
compiler actually help you out because

00:24:10,690 --> 00:24:18,550
it's a total function and you can arise

00:24:13,540 --> 00:24:21,670
in any way shape or form yeah

00:24:18,550 --> 00:24:23,530
as you saw the state as a parameter we

00:24:21,670 --> 00:24:26,230
talked about it you don't have variables

00:24:23,530 --> 00:24:26,920
if you don't want them some people like

00:24:26,230 --> 00:24:29,980
that a lot

00:24:26,920 --> 00:24:33,010
and yeah we have total functions so we

00:24:29,980 --> 00:24:37,330
get more compiler help so you don't miss

00:24:33,010 --> 00:24:39,460
handling some message now as you saw it

00:24:37,330 --> 00:24:41,700
yesterday is Martin's keynote this is

00:24:39,460 --> 00:24:44,620
something we would really really want

00:24:41,700 --> 00:24:47,190
but it doesn't exist in Scala to write

00:24:44,620 --> 00:24:49,990
Union types when you want to or else

00:24:47,190 --> 00:24:53,170
completely different types right I want

00:24:49,990 --> 00:24:57,550
to handle my I don't know pet protocol

00:24:53,170 --> 00:25:00,220
but also I don't know parking fees for

00:24:57,550 --> 00:25:02,800
whatever reason and I still want to do

00:25:00,220 --> 00:25:04,780
it in fact exact same actor well it

00:25:02,800 --> 00:25:07,930
would have been expressed exactly like

00:25:04,780 --> 00:25:11,410
that but not in Scala - it was being

00:25:07,930 --> 00:25:16,570
Scala free nowadays caller would be like

00:25:11,410 --> 00:25:20,010
9 it's industrial I will be opening and

00:25:16,570 --> 00:25:23,830
so on so yeah we don't have Union types

00:25:20,010 --> 00:25:27,810
but but but but but Scala free we have

00:25:23,830 --> 00:25:31,240
Union types right it's a yes excellent

00:25:27,810 --> 00:25:33,580
so we're really excited for it so it

00:25:31,240 --> 00:25:36,730
will just take a bit of time so we're

00:25:33,580 --> 00:25:38,140
definitely kind of prepped for it it

00:25:36,730 --> 00:25:41,200
would fit the model it's kind of

00:25:38,140 --> 00:25:43,870
future-ready in that sense once we get

00:25:41,200 --> 00:25:47,470
these types it just works but nowadays

00:25:43,870 --> 00:25:50,910
we don't ok sorry animation again so

00:25:47,470 --> 00:25:54,370
what can we do until scholar freelance

00:25:50,910 --> 00:25:57,520
we can do a bit of type wiggling how I

00:25:54,370 --> 00:26:01,150
call it so this is a boring version

00:25:57,520 --> 00:26:05,710
which is narrowing the type so this is a

00:26:01,150 --> 00:26:10,480
like an actor that will be a pet doctor

00:26:05,710 --> 00:26:13,480
a vet and it can handle if you're a cat

00:26:10,480 --> 00:26:14,740
dog capybara etc so when we have a

00:26:13,480 --> 00:26:17,800
behavior that can

00:26:14,740 --> 00:26:20,800
handle animals and you can narrow it

00:26:17,800 --> 00:26:23,620
down to kind of just a specific part of

00:26:20,800 --> 00:26:27,309
the protocol this is interesting one

00:26:23,620 --> 00:26:30,550
and you have a bigger protocol but only

00:26:27,309 --> 00:26:32,830
part of it is intended for like a part

00:26:30,550 --> 00:26:35,559
of the system right not everybody should

00:26:32,830 --> 00:26:40,360
be able to tell me kill yourself like

00:26:35,559 --> 00:26:42,970
maybe only a wife or someone so you can

00:26:40,360 --> 00:26:46,270
narrow down who gets the right actor F

00:26:42,970 --> 00:26:49,059
by narrowing the river the type of a

00:26:46,270 --> 00:26:50,740
message being handled this is kind of a

00:26:49,059 --> 00:26:56,830
boring case because it's um you know

00:26:50,740 --> 00:26:59,230
just works this case let me see what are

00:26:56,830 --> 00:27:02,110
we showing here yes so this is a cop-out

00:26:59,230 --> 00:27:05,380
how I call it because you see we have

00:27:02,110 --> 00:27:07,590
the behaviors receive an e ref so you're

00:27:05,380 --> 00:27:12,670
back to the actors can receive anything

00:27:07,590 --> 00:27:15,190
but it's a sneaky way to do internally a

00:27:12,670 --> 00:27:17,260
bit of nasty stuff you're handling some

00:27:15,190 --> 00:27:18,730
other messages and sending some message

00:27:17,260 --> 00:27:21,400
and someone else will send you some

00:27:18,730 --> 00:27:22,870
random message and you can handle it at

00:27:21,400 --> 00:27:24,790
least it's contained in one file but

00:27:22,870 --> 00:27:27,250
when you expose the message to the

00:27:24,790 --> 00:27:29,880
outside world you say yeah but I'm only

00:27:27,250 --> 00:27:32,140
handling animals survive outside word

00:27:29,880 --> 00:27:35,530
doesn't have to see your horrible hack

00:27:32,140 --> 00:27:37,540
that I'm you know I cut some corners so

00:27:35,530 --> 00:27:41,200
when I say cutting corners so what's the

00:27:37,540 --> 00:27:44,440
proper way to do it and certainly it

00:27:41,200 --> 00:27:46,000
will be more verbose so with types you

00:27:44,440 --> 00:27:47,980
will see that yes you get more safety

00:27:46,000 --> 00:27:49,660
but you also get more of a boost Ness so

00:27:47,980 --> 00:27:52,140
which is why we allowed for this kind of

00:27:49,660 --> 00:27:56,500
cop-out style sometimes it's just easier

00:27:52,140 --> 00:27:59,230
so the inverse of an arrow is to widen

00:27:56,500 --> 00:28:01,390
the return type so if you have behaviors

00:27:59,230 --> 00:28:04,240
receive message capybara so it can only

00:28:01,390 --> 00:28:08,110
handle capybaras it's a kappa dr but

00:28:04,240 --> 00:28:11,620
when you can say well widen the type of

00:28:08,110 --> 00:28:13,240
accepted messages to all animals so

00:28:11,620 --> 00:28:15,820
let's say we have a capybara doctor

00:28:13,240 --> 00:28:17,950
would be what we tell them well I need

00:28:15,820 --> 00:28:21,460
you to treat my dog you're the only

00:28:17,950 --> 00:28:24,900
doctor in town like save my dog so when

00:28:21,460 --> 00:28:27,810
we just act like capybaras crying

00:28:24,900 --> 00:28:30,090
the form like the dog is kind of like a

00:28:27,810 --> 00:28:31,710
capybara right so we adopt the dog to

00:28:30,090 --> 00:28:35,370
the protocol that the doctor speaks

00:28:31,710 --> 00:28:37,560
which is the capybara protocol and maybe

00:28:35,370 --> 00:28:39,720
a table will work out or maybe not in

00:28:37,560 --> 00:28:43,320
practice coffees would be used is more

00:28:39,720 --> 00:28:44,850
about you have your existing protocols I

00:28:43,320 --> 00:28:46,980
don't know it's not your codebase even

00:28:44,850 --> 00:28:49,320
but you want to remain typed so you

00:28:46,980 --> 00:28:51,960
would introduce type in your code base

00:28:49,320 --> 00:28:54,150
which is a wrapper around oh you have a

00:28:51,960 --> 00:28:57,660
text on a protocol because when you

00:28:54,150 --> 00:28:59,520
control your types and this is a partial

00:28:57,660 --> 00:29:02,400
function so anything you don't handle it

00:28:59,520 --> 00:29:05,610
becomes unhandled automatically so

00:29:02,400 --> 00:29:07,500
another way to get around talking with

00:29:05,610 --> 00:29:09,060
existing protocols especially when

00:29:07,500 --> 00:29:11,630
you're going to integrate with a untyped

00:29:09,060 --> 00:29:15,450
system you may need this sometimes

00:29:11,630 --> 00:29:19,440
another way which technically is the

00:29:15,450 --> 00:29:23,970
right way but also you'll notice a bit

00:29:19,440 --> 00:29:26,220
more typing stuff so you can have a

00:29:23,970 --> 00:29:29,220
message adapter which is kind of like

00:29:26,220 --> 00:29:31,140
what we just saw with the widen the

00:29:29,220 --> 00:29:34,440
widen is basically adopting whatever

00:29:31,140 --> 00:29:36,720
protocol to your intern or protocol so

00:29:34,440 --> 00:29:39,120
you can have the same but you can create

00:29:36,720 --> 00:29:41,790
form ad hoc inside of the actor you can

00:29:39,120 --> 00:29:43,830
say context message adapter some other

00:29:41,790 --> 00:29:46,620
protocol and you map the messages to

00:29:43,830 --> 00:29:48,840
your internal protocol so another way to

00:29:46,620 --> 00:29:51,000
handle those things another way

00:29:48,840 --> 00:29:54,330
obviously everybody knows the ask

00:29:51,000 --> 00:29:55,010
pattern now ask pattern the bottom

00:29:54,330 --> 00:29:57,720
version

00:29:55,010 --> 00:30:00,240
sadly with types it becomes a bit more

00:29:57,720 --> 00:30:02,160
of a boost right because you have the

00:30:00,240 --> 00:30:04,380
other actor you're asking right so

00:30:02,160 --> 00:30:06,600
that's the request type so you need to

00:30:04,380 --> 00:30:09,180
also because we don't have to send a

00:30:06,600 --> 00:30:11,310
reference anymore so when you send a

00:30:09,180 --> 00:30:13,550
message to the other actor it has to

00:30:11,310 --> 00:30:16,170
reply somewhere so we create a

00:30:13,550 --> 00:30:18,690
artificial kind of actor F that will

00:30:16,170 --> 00:30:22,380
demand the response right so this other

00:30:18,690 --> 00:30:24,030
guy can response to it so we provided

00:30:22,380 --> 00:30:25,770
this function that gives us actor if

00:30:24,030 --> 00:30:27,810
that you're supposed to stuff into your

00:30:25,770 --> 00:30:30,360
message or just use an envelope or

00:30:27,810 --> 00:30:33,150
something like that and on the response

00:30:30,360 --> 00:30:35,580
again if you want to just receive it as

00:30:33,150 --> 00:30:37,480
a normal message in the actor instead of

00:30:35,580 --> 00:30:38,950
doing the future dance notice

00:30:37,480 --> 00:30:41,260
not returning future in the bottom

00:30:38,950 --> 00:30:43,630
version right so this will pipe the

00:30:41,260 --> 00:30:45,370
message back which we turn nowadays

00:30:43,630 --> 00:30:47,760
people to do anyway right it's a future

00:30:45,370 --> 00:30:50,559
pipe to serve right so this is built-in

00:30:47,760 --> 00:30:53,559
but the pipe to serve has to be the

00:30:50,559 --> 00:30:56,799
prototype right it has to adhere

00:30:53,559 --> 00:30:58,840
whatever you're able to receive so sadly

00:30:56,799 --> 00:31:01,440
you need the map response right and it's

00:30:58,840 --> 00:31:05,500
a try because it could be a timeout etc

00:31:01,440 --> 00:31:09,429
and yeah so suddenly this very generic

00:31:05,500 --> 00:31:11,470
ask is a bit verbose the top one that's

00:31:09,429 --> 00:31:14,049
specialized in NTT Refs

00:31:11,470 --> 00:31:15,580
so it's basically cluster charting we

00:31:14,049 --> 00:31:17,020
have a bit more information about the

00:31:15,580 --> 00:31:19,360
types fare so we can do all of these

00:31:17,020 --> 00:31:24,000
mappings internally so you have a nicer

00:31:19,360 --> 00:31:26,679
signature but yeah various ways of

00:31:24,000 --> 00:31:28,330
figuring out how to talk to other actors

00:31:26,679 --> 00:31:30,130
and integrate with various weird

00:31:28,330 --> 00:31:32,970
protocols which are not typed haven't

00:31:30,130 --> 00:31:36,970
been thought about being typed before

00:31:32,970 --> 00:31:42,400
and a crazy experiment is where we could

00:31:36,970 --> 00:31:44,169
emulate kind of Union types by by kind

00:31:42,400 --> 00:31:47,169
of means of because we're not just

00:31:44,169 --> 00:31:49,150
function calls we have when you invoke

00:31:47,169 --> 00:31:52,210
things right you just send a message and

00:31:49,150 --> 00:31:54,190
I have an arbitrary behavior so it could

00:31:52,210 --> 00:31:57,669
actually interpret things and kind of

00:31:54,190 --> 00:31:59,679
route it to the right behavior but just

00:31:57,669 --> 00:32:02,440
crazy idea I had worth while working on

00:31:59,679 --> 00:32:06,850
the slides here not sure if it's gonna

00:32:02,440 --> 00:32:09,820
work out or not so now the other

00:32:06,850 --> 00:32:12,040
question and what about life cycle right

00:32:09,820 --> 00:32:14,440
we did see if a pre start I told you

00:32:12,040 --> 00:32:17,710
okay pre start is now set up but how do

00:32:14,440 --> 00:32:20,140
we do I don't know terminated or post

00:32:17,710 --> 00:32:21,610
stop or pre restart you know all these

00:32:20,140 --> 00:32:24,700
kinds of right cycle events which are

00:32:21,610 --> 00:32:26,620
useful in active systems and you can't

00:32:24,700 --> 00:32:28,600
just receive it in your actor because it

00:32:26,620 --> 00:32:31,120
receives the type T and the type T is

00:32:28,600 --> 00:32:34,360
your protocol it's it's not a pre

00:32:31,120 --> 00:32:38,140
starting so we introduced a separation

00:32:34,360 --> 00:32:40,650
between messages and signals and at the

00:32:38,140 --> 00:32:45,160
same time we made it more consistent but

00:32:40,650 --> 00:32:45,730
verse no pre start that you overwrite

00:32:45,160 --> 00:32:47,990
right

00:32:45,730 --> 00:32:50,660
everything was overwrite based so like

00:32:47,990 --> 00:32:51,950
for vodka was message-based and yeah

00:32:50,660 --> 00:32:53,809
these special things you need to

00:32:51,950 --> 00:32:56,780
override methods for was a bit

00:32:53,809 --> 00:32:59,570
inconsistent so now everything is via

00:32:56,780 --> 00:33:01,730
messaging but these other things for the

00:32:59,570 --> 00:33:04,790
lifecycle things the terminated messages

00:33:01,730 --> 00:33:07,190
we're called signals and the signal gets

00:33:04,790 --> 00:33:10,670
like its own receive block which is

00:33:07,190 --> 00:33:13,130
again to work around the thing because

00:33:10,670 --> 00:33:17,090
we want to allow you to handle any kind

00:33:13,130 --> 00:33:18,860
of message you define again somewhat of

00:33:17,090 --> 00:33:21,860
a workaround because we don't have Union

00:33:18,860 --> 00:33:24,370
types but I think it's a rather nice

00:33:21,860 --> 00:33:27,559
because the difference here is again a

00:33:24,370 --> 00:33:30,080
receive is a total function I want to

00:33:27,559 --> 00:33:32,030
handle all the messages that my protocol

00:33:30,080 --> 00:33:35,660
is speaking or decide that you have this

00:33:32,030 --> 00:33:37,340
one I'm not handling verses signals you

00:33:35,660 --> 00:33:39,350
only care about the signals you care

00:33:37,340 --> 00:33:41,360
about right oh yeah I'm not only using

00:33:39,350 --> 00:33:43,190
the post stop I'm not getting any

00:33:41,360 --> 00:33:44,450
terminated messages why would I have to

00:33:43,190 --> 00:33:47,300
in every actor right

00:33:44,450 --> 00:33:50,170
terminated I don't care right so this

00:33:47,300 --> 00:33:53,059
receive signal is a partial function

00:33:50,170 --> 00:33:56,200
okay let's jump ahead into other topics

00:33:53,059 --> 00:33:59,179
so that actors handle no messages

00:33:56,200 --> 00:34:03,080
this is the deprecation of active

00:33:59,179 --> 00:34:06,020
selection part so yes why are we

00:34:03,080 --> 00:34:07,910
duplicated and work duplicating removing

00:34:06,020 --> 00:34:10,399
in typed it's not going away in a

00:34:07,910 --> 00:34:14,810
classic it will still be around but it

00:34:10,399 --> 00:34:15,350
will not be ported over to typed why is

00:34:14,810 --> 00:34:17,060
it bad

00:34:15,350 --> 00:34:19,520
okay let's remind ourselves what dead

00:34:17,060 --> 00:34:22,220
letters are so if you send messages to a

00:34:19,520 --> 00:34:25,040
dead actor or to a non-existing actor

00:34:22,220 --> 00:34:27,200
these messages end up immediately in the

00:34:25,040 --> 00:34:29,210
dead letters Q right and then you can

00:34:27,200 --> 00:34:30,560
log where they are logged by default or

00:34:29,210 --> 00:34:33,500
you could do something else with them if

00:34:30,560 --> 00:34:36,679
you want this is different from

00:34:33,500 --> 00:34:39,020
unhandled like short reminder if anyone

00:34:36,679 --> 00:34:40,909
was confused about those two because we

00:34:39,020 --> 00:34:42,800
are similar because they okay you're

00:34:40,909 --> 00:34:45,560
sending messages but it only likes blue

00:34:42,800 --> 00:34:47,840
so all the green messages will end up

00:34:45,560 --> 00:34:50,629
also in the event stream but not as dead

00:34:47,840 --> 00:34:52,609
letters but as unhandled messages right

00:34:50,629 --> 00:34:55,850
small difference but it at least means

00:34:52,609 --> 00:34:58,250
okay factor exists it's just not

00:34:55,850 --> 00:35:01,040
handling the message a slight difference

00:34:58,250 --> 00:35:04,160
now the problem of actual selection is

00:35:01,040 --> 00:35:06,680
people sometimes randomly concatenate

00:35:04,160 --> 00:35:08,420
strings to make up the name of an actor

00:35:06,680 --> 00:35:11,540
because we're like oh just take the

00:35:08,420 --> 00:35:14,450
first line and add the letter and if you

00:35:11,540 --> 00:35:16,670
address and then underscore and you know

00:35:14,450 --> 00:35:19,400
people invent random ways to identify

00:35:16,670 --> 00:35:22,160
actors instead of passing xrefs around

00:35:19,400 --> 00:35:24,560
and there's two things about wrong about

00:35:22,160 --> 00:35:26,810
it one is where you could get it wrong

00:35:24,560 --> 00:35:28,760
and then you get a reference to an

00:35:26,810 --> 00:35:31,220
active it doesn't exist so immediately

00:35:28,760 --> 00:35:34,010
go to dead letters and the other problem

00:35:31,220 --> 00:35:37,040
is were not even able to express this in

00:35:34,010 --> 00:35:39,680
archetypes because okay someone is

00:35:37,040 --> 00:35:41,870
giving me a string what is the type of

00:35:39,680 --> 00:35:44,180
that accurate so people would have to

00:35:41,870 --> 00:35:46,640
cast right I would have to narrow just

00:35:44,180 --> 00:35:50,540
randomly and we don't want people to do

00:35:46,640 --> 00:35:52,420
randomly I think this 100 strings so

00:35:50,540 --> 00:35:57,470
active selection is dead

00:35:52,420 --> 00:36:00,320
along with your receptionist rapid movie

00:35:57,470 --> 00:36:01,940
but let's see how it works so the

00:36:00,320 --> 00:36:05,210
interaction patterns smallest like that

00:36:01,940 --> 00:36:08,240
so you're like a is like someone who

00:36:05,210 --> 00:36:10,930
handles T's in and the reception is it

00:36:08,240 --> 00:36:14,570
and that yet now haven't seen them or

00:36:10,930 --> 00:36:16,940
you could well not really or at the same

00:36:14,570 --> 00:36:19,160
time it would say well but if such an

00:36:16,940 --> 00:36:22,460
actor arrives I'll let you know right

00:36:19,160 --> 00:36:24,740
and because this is now not just a

00:36:22,460 --> 00:36:25,400
method it's just two actors interacting

00:36:24,740 --> 00:36:27,980
with each other

00:36:25,400 --> 00:36:30,170
your dicovered in time already right you

00:36:27,980 --> 00:36:33,110
just sent a request there if it's actor

00:36:30,170 --> 00:36:34,880
shows up let me know so whenever you get

00:36:33,110 --> 00:36:37,220
four message back you you will get a

00:36:34,880 --> 00:36:40,250
reference you can do a time out as well

00:36:37,220 --> 00:36:43,100
if you want of course and if it finds

00:36:40,250 --> 00:36:46,190
such an actor or multiple actors it

00:36:43,100 --> 00:36:48,920
return you a listing of such actors with

00:36:46,190 --> 00:36:52,820
the proper type and so the way we handle

00:36:48,920 --> 00:36:55,280
it is by the protocol expressing so here

00:36:52,820 --> 00:36:57,170
you have active system receptionist so

00:36:55,280 --> 00:36:59,600
it's a built-in thing but really just a

00:36:57,170 --> 00:37:01,670
normal reaction and it handles for

00:36:59,600 --> 00:37:04,010
receptionist commands so you can send it

00:37:01,670 --> 00:37:06,530
commands whatever commands register fine

00:37:04,010 --> 00:37:09,200
subscribe easy right

00:37:06,530 --> 00:37:11,870
so you go once like a single information

00:37:09,200 --> 00:37:14,460
now what are the actors or continuously

00:37:11,870 --> 00:37:16,980
receive messages about

00:37:14,460 --> 00:37:18,510
who is providing that interface and

00:37:16,980 --> 00:37:21,030
people are joining with us relieving

00:37:18,510 --> 00:37:23,730
worthless R etcetera and you get for

00:37:21,030 --> 00:37:28,050
listing back which is all bound together

00:37:23,730 --> 00:37:30,210
by the service key type so when you

00:37:28,050 --> 00:37:31,740
register someone comes into the class

00:37:30,210 --> 00:37:33,210
which is like yeah I'm gesturing with

00:37:31,740 --> 00:37:35,670
your receptionist I'm checking into the

00:37:33,210 --> 00:37:37,530
hotel you give a service key and then

00:37:35,670 --> 00:37:39,359
when people look it up they also use the

00:37:37,530 --> 00:37:41,700
same service key which carries four

00:37:39,359 --> 00:37:43,950
rights type which means that the listing

00:37:41,700 --> 00:37:46,440
can have the right type as well this is

00:37:43,950 --> 00:37:48,990
how we bind it all together so it's like

00:37:46,440 --> 00:37:50,490
actor selection but with proper objects

00:37:48,990 --> 00:37:53,130
instead of strings like proper

00:37:50,490 --> 00:37:55,740
identifiers and types and you get the

00:37:53,130 --> 00:37:57,450
prime right thing back and the

00:37:55,740 --> 00:37:59,670
subscription thing is interesting

00:37:57,450 --> 00:38:02,760
because let's say you have a system

00:37:59,670 --> 00:38:05,339
where you know notes come and go as they

00:38:02,760 --> 00:38:09,210
do in our Co systems and whenever a

00:38:05,339 --> 00:38:11,490
occur note joints for cluster it has one

00:38:09,210 --> 00:38:13,109
or more such actors which implement some

00:38:11,490 --> 00:38:15,780
protocol and your load balancing between

00:38:13,109 --> 00:38:20,910
them so you would get continuously

00:38:15,780 --> 00:38:23,460
updated if such things happen okay so

00:38:20,910 --> 00:38:25,260
this is the part about like how do I get

00:38:23,460 --> 00:38:28,140
to archetypes right I want to use it

00:38:25,260 --> 00:38:30,690
this stuff looks very different I'm not

00:38:28,140 --> 00:38:34,710
sure if I want to rewrite my entire code

00:38:30,690 --> 00:38:38,609
base blah blah which is true so how to

00:38:34,710 --> 00:38:41,550
get from extends actor to having types

00:38:38,609 --> 00:38:45,060
in your system so we have also another

00:38:41,550 --> 00:38:46,830
style of behavior are actually was many

00:38:45,060 --> 00:38:49,650
start some behaviors but this one is

00:38:46,830 --> 00:38:52,290
called mutable behavior and the word

00:38:49,650 --> 00:38:55,109
mutable really implies that this is

00:38:52,290 --> 00:38:57,630
intended to have like mutable state here

00:38:55,109 --> 00:38:59,910
as as fields versus the other style

00:38:57,630 --> 00:39:02,520
where you just become new behaviors all

00:38:59,910 --> 00:39:05,160
the time and this is really like a

00:39:02,520 --> 00:39:07,140
one-to-one mapping with actor right yeah

00:39:05,160 --> 00:39:09,570
I have some state you have a receive and

00:39:07,140 --> 00:39:11,880
here you have yeah I have some state and

00:39:09,570 --> 00:39:14,310
yeah it's an own message it's properly

00:39:11,880 --> 00:39:16,740
typed and you do the other thing with

00:39:14,310 --> 00:39:18,510
returning yourself all the time which

00:39:16,740 --> 00:39:21,180
could be behavior the same or you're

00:39:18,510 --> 00:39:24,540
just returning this because this is the

00:39:21,180 --> 00:39:26,520
behavior so literally this is a almost

00:39:24,540 --> 00:39:27,660
mechanical translation you change what

00:39:26,520 --> 00:39:29,700
you extend

00:39:27,660 --> 00:39:33,089
you change the method name you're typed

00:39:29,700 --> 00:39:34,260
so this is what I would recommend to use

00:39:33,089 --> 00:39:37,049
if you want to become more and more

00:39:34,260 --> 00:39:40,440
typed in your system and you can mix and

00:39:37,049 --> 00:39:42,569
match the styles they enter up even

00:39:40,440 --> 00:39:46,680
between Java Scala everything interrupts

00:39:42,569 --> 00:39:48,750
shares the same type so it's really

00:39:46,680 --> 00:39:54,420
running out of time as usual which is

00:39:48,750 --> 00:39:56,730
good so supervision supervision was for

00:39:54,420 --> 00:39:59,250
one thing always on write it always was

00:39:56,730 --> 00:40:01,650
restarting by default let's changed if

00:39:59,250 --> 00:40:04,410
you want supervision you have to apply

00:40:01,650 --> 00:40:06,329
supervision that's a change it's also

00:40:04,410 --> 00:40:08,549
changed where you apply the supervision

00:40:06,329 --> 00:40:11,250
you previously applied it in the parent

00:40:08,549 --> 00:40:13,589
actor right so when you start an actor

00:40:11,250 --> 00:40:16,920
the parent actor has the kind of blog

00:40:13,589 --> 00:40:18,299
that handles for failures but as I said

00:40:16,920 --> 00:40:20,599
it was kind of abused everybody was

00:40:18,299 --> 00:40:22,770
using it instead of try and I've earn

00:40:20,599 --> 00:40:24,299
validation for that matter and we

00:40:22,770 --> 00:40:25,920
couldn't implement back-off validation

00:40:24,299 --> 00:40:28,109
with it because it has to be synchronous

00:40:25,920 --> 00:40:30,660
it has to you get the thing and give a

00:40:28,109 --> 00:40:33,869
decision we restart immediately so we

00:40:30,660 --> 00:40:38,059
couldn't the back off so this is how you

00:40:33,869 --> 00:40:40,200
do supervision now you wrap behaviors

00:40:38,059 --> 00:40:41,819
everything in Akko typed is wrapping

00:40:40,200 --> 00:40:44,460
behavior so you just wrap a behavior

00:40:41,819 --> 00:40:46,859
with a supervision strategy there is a

00:40:44,460 --> 00:40:48,839
slight difference here because yeah you

00:40:46,859 --> 00:40:50,670
would do it in the parent because what

00:40:48,839 --> 00:40:53,160
you're about to start this actor so

00:40:50,670 --> 00:40:55,230
you're supervising it but also the

00:40:53,160 --> 00:40:57,960
person who is giving you a behavior

00:40:55,230 --> 00:41:00,599
could prepare some supervision for it

00:40:57,960 --> 00:41:02,819
they could say well yeah I know this one

00:41:00,599 --> 00:41:05,700
could throw like numerical exceptions

00:41:02,819 --> 00:41:08,220
but that's fine and the moment you get a

00:41:05,700 --> 00:41:10,710
behavior from Van who have a bid for

00:41:08,220 --> 00:41:13,319
library the supervision is built-in it's

00:41:10,710 --> 00:41:15,480
carried around with the behavior and you

00:41:13,319 --> 00:41:19,260
don't even care about it it says more

00:41:15,480 --> 00:41:21,150
composable again and you can do nesting

00:41:19,260 --> 00:41:24,779
if you want so you can supervise voice

00:41:21,150 --> 00:41:27,000
supervise that and we can do back off so

00:41:24,779 --> 00:41:30,720
we can do restart with back off

00:41:27,000 --> 00:41:32,900
and configure it a bit etc etc so what

00:41:30,720 --> 00:41:36,059
are the downsides

00:41:32,900 --> 00:41:38,329
slightly controversial I guess but the

00:41:36,059 --> 00:41:38,329
types

00:41:38,990 --> 00:41:44,690
it's it's a mix we really want film but

00:41:43,130 --> 00:41:47,540
it gets slightly more verbose and

00:41:44,690 --> 00:41:50,869
sometimes it gets like slightly really

00:41:47,540 --> 00:41:52,550
more for those so versa that's why we

00:41:50,869 --> 00:41:55,280
have all these different helpers and

00:41:52,550 --> 00:41:57,080
styles of building the behaviors you can

00:41:55,280 --> 00:42:00,560
pick the level of kind of safety and

00:41:57,080 --> 00:42:01,849
purity you you care about because by the

00:42:00,560 --> 00:42:05,660
end of the day you just want to get

00:42:01,849 --> 00:42:08,990
stuff done and not spend an entire day

00:42:05,660 --> 00:42:13,119
on figuring out stuff this is the extra

00:42:08,990 --> 00:42:16,190
section about the flow control which is

00:42:13,119 --> 00:42:18,500
kind of what's back pressure like not

00:42:16,190 --> 00:42:20,570
killing the other guy so we have a

00:42:18,500 --> 00:42:23,240
tanaka streams right we implement

00:42:20,570 --> 00:42:25,520
reactive streams blah blah blah you can

00:42:23,240 --> 00:42:27,339
watch a reactive streams or cross

00:42:25,520 --> 00:42:30,290
streams talk if you want for details but

00:42:27,339 --> 00:42:32,690
the idea is okay we even have it over

00:42:30,290 --> 00:42:36,410
the network with stream rafts this is a

00:42:32,690 --> 00:42:38,300
new thing we introduced recently and we

00:42:36,410 --> 00:42:42,250
fast forward a bit so we have time for

00:42:38,300 --> 00:42:44,839
other things so we have flow control

00:42:42,250 --> 00:42:47,890
distributed ways of sending messages

00:42:44,839 --> 00:42:50,990
around but it has to be expressed as

00:42:47,890 --> 00:42:56,630
occur streams right you can't express

00:42:50,990 --> 00:42:58,700
the same in just actual messaging this

00:42:56,630 --> 00:43:03,040
is how it works let me fast forward a

00:42:58,700 --> 00:43:06,589
bit basically our constraints basics and

00:43:03,040 --> 00:43:08,839
for idea is where we have is flow

00:43:06,589 --> 00:43:12,109
control protocol we could apply it

00:43:08,839 --> 00:43:14,720
slightly not entirely but with some

00:43:12,109 --> 00:43:16,730
helpers to vector messaging and if

00:43:14,720 --> 00:43:20,119
you're interested in that there's an

00:43:16,730 --> 00:43:21,650
experiment for requests and she over

00:43:20,119 --> 00:43:25,849
slides in a moment so you can have a

00:43:21,650 --> 00:43:29,619
look and you're closing up avenues so

00:43:25,849 --> 00:43:34,010
not typed but interesting I think anyway

00:43:29,619 --> 00:43:36,440
things we are intending to call stable

00:43:34,010 --> 00:43:39,740
very very students over artery transport

00:43:36,440 --> 00:43:41,089
we also did an artery TLS transport for

00:43:39,740 --> 00:43:43,369
people who need security on the

00:43:41,089 --> 00:43:45,980
transport layer there because r3 itself

00:43:43,369 --> 00:43:48,859
doesn't it's udp-based we didn't do

00:43:45,980 --> 00:43:51,230
and any security on the UDP layer there

00:43:48,859 --> 00:43:54,170
this will change in the future but so

00:43:51,230 --> 00:43:56,420
you have a choice I would urge you to

00:43:54,170 --> 00:44:00,109
try it out people did say that we didn't

00:43:56,420 --> 00:44:02,720
know about it it gives you a really like

00:44:00,109 --> 00:44:04,970
a 10x performance improvement by just

00:44:02,720 --> 00:44:08,060
changing this one thing right so to say

00:44:04,970 --> 00:44:11,540
a car remote artery enabled on and

00:44:08,060 --> 00:44:14,030
you're way faster we also do compression

00:44:11,540 --> 00:44:16,400
now and so if you've never seen an

00:44:14,030 --> 00:44:19,210
architectural message on the wire this

00:44:16,400 --> 00:44:23,450
is how it looks like maybe one back and

00:44:19,210 --> 00:44:27,920
if you can spot for actual payload its

00:44:23,450 --> 00:44:30,349
hello over here right and this is all

00:44:27,920 --> 00:44:32,660
metadata like who sent the message what

00:44:30,349 --> 00:44:34,609
is the type of a message would serialize

00:44:32,660 --> 00:44:36,980
it to use who is the recipient of the

00:44:34,609 --> 00:44:39,470
message etc so now we apply compression

00:44:36,980 --> 00:44:42,079
to it so we have like a lookup table we

00:44:39,470 --> 00:44:44,119
exchange identifiers for those strings

00:44:42,079 --> 00:44:47,240
so we don't have to repeatedly sent them

00:44:44,119 --> 00:44:50,270
over and over again so it matters a lot

00:44:47,240 --> 00:44:52,790
for small messages it doesn't matter

00:44:50,270 --> 00:44:54,740
really for big messages because when the

00:44:52,790 --> 00:44:57,050
payload dominates anyway but for small

00:44:54,740 --> 00:44:58,880
messages that's a nice wing I just

00:44:57,050 --> 00:45:01,810
wanted to share because we didn't really

00:44:58,880 --> 00:45:04,520
blog about it I think it's a nice thing

00:45:01,810 --> 00:45:06,770
so other things that's become most

00:45:04,520 --> 00:45:09,470
resides tracing monitoring we have like

00:45:06,770 --> 00:45:11,750
metrics for everything including our

00:45:09,470 --> 00:45:14,030
customs and tracing força streams which

00:45:11,750 --> 00:45:16,640
is kind of weird but interesting every

00:45:14,030 --> 00:45:19,910
stage you get a small trace these of it

00:45:16,640 --> 00:45:22,900
there's more ones here tracing for

00:45:19,910 --> 00:45:25,760
actors racing for futures across nodes

00:45:22,900 --> 00:45:28,040
everything and how do you enable it you

00:45:25,760 --> 00:45:31,250
say like your cinnamon actress phrase

00:45:28,040 --> 00:45:35,720
done so pretty excited about those

00:45:31,250 --> 00:45:37,670
things the multi data center thing it's

00:45:35,720 --> 00:45:40,430
worth clarifying people are sometimes

00:45:37,670 --> 00:45:42,770
confused so multi data center awareness

00:45:40,430 --> 00:45:45,770
which curves back last ribbit - gossip

00:45:42,770 --> 00:45:48,260
less across regions etc that is open

00:45:45,770 --> 00:45:50,329
source there was some confusion people

00:45:48,260 --> 00:45:52,730
fought for everything is commercial that

00:45:50,329 --> 00:45:55,490
is open source so the cluster being more

00:45:52,730 --> 00:45:57,050
friendly to more TDC things but is open

00:45:55,490 --> 00:45:59,520
source the commercial thing is about

00:45:57,050 --> 00:46:02,850
ARCA persistence with replication and

00:45:59,520 --> 00:46:04,560
conflict resolution thanks to watch and

00:46:02,850 --> 00:46:07,020
I'm out of time

00:46:04,560 --> 00:46:09,120
do you visit us on discuss a kayo if you

00:46:07,020 --> 00:46:11,340
haven't yet we replace the mailing list

00:46:09,120 --> 00:46:14,520
with it I think it's going pretty well

00:46:11,340 --> 00:46:14,910
there and talks to see if you haven't

00:46:14,520 --> 00:46:17,160
already

00:46:14,910 --> 00:46:19,920
verzino talk like two years ago

00:46:17,160 --> 00:46:22,170
this is about anti patterns and patterns

00:46:19,920 --> 00:46:24,270
what to do with Aiko and the best is yet

00:46:22,170 --> 00:46:27,930
to come is if you liked the map in the

00:46:24,270 --> 00:46:29,820
beginning it's a in depth like dive into

00:46:27,930 --> 00:46:32,700
why did we do or if his modules and how

00:46:29,820 --> 00:46:36,420
we connect mini ebook you can download

00:46:32,700 --> 00:46:38,310
for free just bit Levi reactive and many

00:46:36,420 --> 00:46:42,120
announcement we're working on a typed

00:46:38,310 --> 00:46:44,460
and streams course on Coursera or EDX so

00:46:42,120 --> 00:46:46,410
it should be interesting as well I did

00:46:44,460 --> 00:46:48,690
run out of time so thank you very much

00:46:46,410 --> 00:46:49,170
and grab me for any questions I'll be

00:46:48,690 --> 00:46:49,970
around

00:46:49,170 --> 00:46:55,880
thank you

00:46:49,970 --> 00:46:55,880

YouTube URL: https://www.youtube.com/watch?v=Qb9Cnii-34c


