Title: Serverless Scala js iOS,Android,Web Apps from One Code Base by Irfan Ahmad
Publication date: 2018-09-22
Playlist: Scala Days New York 2018
Description: 
	This video was recorded at Scala Days New York 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://na.scaladays.org/schedule/serverless-scala-js-iosandroidweb-apps-from-one-code-base
Captions: 
	00:00:05,670 --> 00:00:09,680
hi everybody thanks for joining this

00:00:08,850 --> 00:00:12,320
session and thanks to the

00:00:09,680 --> 00:00:14,269
Program Committee for

00:00:12,320 --> 00:00:16,100
talk about this what I'm gonna be

00:00:14,269 --> 00:00:18,199
talking about is something I've been

00:00:16,100 --> 00:00:19,970
playing around with with a few people

00:00:18,199 --> 00:00:23,990
from kind of all over the internet on a

00:00:19,970 --> 00:00:28,699
project on github started by Chandra

00:00:23,990 --> 00:00:32,509
Shekar Cote from India project called

00:00:28,699 --> 00:00:34,820
strees and I'll show you where to find

00:00:32,509 --> 00:00:36,640
that project and just playing around

00:00:34,820 --> 00:00:41,300
with it and trying to figure out how to

00:00:36,640 --> 00:00:46,910
take Scala j/s based code bases and get

00:00:41,300 --> 00:00:48,770
them to be multiple platform and and

00:00:46,910 --> 00:00:52,489
multiple clients from the single

00:00:48,770 --> 00:00:54,489
codebase this is the only only the

00:00:52,489 --> 00:00:58,879
second time in my life that I've given a

00:00:54,489 --> 00:00:59,930
live coding talk so hopefully just

00:00:58,879 --> 00:01:02,420
everybody keep your fingers crossed

00:00:59,930 --> 00:01:04,339
hopefully everything works out okay

00:01:02,420 --> 00:01:05,570
but we'll keep interactive I have kind

00:01:04,339 --> 00:01:06,979
of a little bit of an agenda and then

00:01:05,570 --> 00:01:07,820
the rest will go with wherever you guys

00:01:06,979 --> 00:01:10,520
want to go with this and we'll

00:01:07,820 --> 00:01:12,100
experiment okay so few key things first

00:01:10,520 --> 00:01:16,400
of all what is serverless

00:01:12,100 --> 00:01:18,049
and i don't want to necessarily go into

00:01:16,400 --> 00:01:20,119
what's college is is I think everybody

00:01:18,049 --> 00:01:22,700
here's already familiar with it and then

00:01:20,119 --> 00:01:24,619
the next concept is you know what is

00:01:22,700 --> 00:01:26,000
what do I mean by one code base and why

00:01:24,619 --> 00:01:27,439
is that important is it interesting is

00:01:26,000 --> 00:01:30,950
it not interesting and so on so let's

00:01:27,439 --> 00:01:33,680
start with serverless what we've been

00:01:30,950 --> 00:01:38,090
playing around with is a concept where

00:01:33,680 --> 00:01:42,049
as much as possible of the functionality

00:01:38,090 --> 00:01:44,840
of a rich client sits in the client the

00:01:42,049 --> 00:01:47,270
relevant functionality of course and the

00:01:44,840 --> 00:01:49,700
functionality of our server code is

00:01:47,270 --> 00:01:54,049
embedded in very very simple functions

00:01:49,700 --> 00:01:56,719
that just permute or some operate some

00:01:54,049 --> 00:01:59,689
very very simple functional code against

00:01:56,719 --> 00:02:01,939
data that's stored in a database to try

00:01:59,689 --> 00:02:05,149
to make the rest of the pipeline as

00:02:01,939 --> 00:02:08,690
functional as possible okay so the

00:02:05,149 --> 00:02:12,110
particular flavor of server less that

00:02:08,690 --> 00:02:16,040
I'm when we're talking about has adapts

00:02:12,110 --> 00:02:18,410
this database interface language called

00:02:16,040 --> 00:02:21,680
graph QL so explain what that is using

00:02:18,410 --> 00:02:24,980
this plot this is courtesy of Prisma

00:02:21,680 --> 00:02:26,100
which is a company that is developing

00:02:24,980 --> 00:02:27,780
this over

00:02:26,100 --> 00:02:30,990
source graph QL interface call call

00:02:27,780 --> 00:02:32,610
charisma so here's the the sketch of

00:02:30,990 --> 00:02:36,150
this right so you've got the client on

00:02:32,610 --> 00:02:38,820
the bottom left the client is in this

00:02:36,150 --> 00:02:42,450
case we're assuming a rich client could

00:02:38,820 --> 00:02:44,750
be an app could be a web could be a

00:02:42,450 --> 00:02:47,910
native app could be a web app could be a

00:02:44,750 --> 00:02:50,250
react native app and so on and then

00:02:47,910 --> 00:02:52,320
there is a well defined interface where

00:02:50,250 --> 00:02:54,720
the data that this app is getting is not

00:02:52,320 --> 00:02:57,510
over what we are typically used to with

00:02:54,720 --> 00:02:59,840
a restful api but rather of graph QL and

00:02:57,510 --> 00:03:03,090
I'll show you how that works in a second

00:02:59,840 --> 00:03:04,890
and then all of the server-side stuff

00:03:03,090 --> 00:03:10,080
which is everything but the client in

00:03:04,890 --> 00:03:11,760
this diagram is handled by simple

00:03:10,080 --> 00:03:13,380
functions on top of data that is stored

00:03:11,760 --> 00:03:15,810
all the way to the top right in the DB

00:03:13,380 --> 00:03:17,640
itself okay so the core technologies

00:03:15,810 --> 00:03:19,920
we're going to be experimenting with in

00:03:17,640 --> 00:03:23,220
our in our live session here is ecology

00:03:19,920 --> 00:03:25,980
s react native 3 which is the Scala

00:03:23,220 --> 00:03:28,410
bindings and facade for our react native

00:03:25,980 --> 00:03:29,670
and graph QL on the client side and then

00:03:28,410 --> 00:03:31,860
on the server side is prismo which is a

00:03:29,670 --> 00:03:35,280
wrapper on top of sangria which is

00:03:31,860 --> 00:03:37,860
written in scala and then graph qo as

00:03:35,280 --> 00:03:41,460
well ok so what's been happening is that

00:03:37,860 --> 00:03:43,380
the client is going to issue queries in

00:03:41,460 --> 00:03:46,410
graph QL right

00:03:43,380 --> 00:03:48,230
very very structured typed queries in

00:03:46,410 --> 00:03:51,360
graph QL which are going to hit this

00:03:48,230 --> 00:03:52,860
graph server graph QL server now that

00:03:51,360 --> 00:03:55,950
graphical server in my particular

00:03:52,860 --> 00:03:59,520
example happens to be implemented in in

00:03:55,950 --> 00:04:01,500
Java Script with the at least of facade

00:03:59,520 --> 00:04:06,020
written in Java Script with sangria

00:04:01,500 --> 00:04:11,160
which is a very very cool very flexible

00:04:06,020 --> 00:04:15,510
scala based graphical server now that

00:04:11,160 --> 00:04:18,239
graph QL server in turn is going to

00:04:15,510 --> 00:04:19,440
convert that query and pass it to other

00:04:18,239 --> 00:04:21,840
layers that are going to translate that

00:04:19,440 --> 00:04:23,370
into DB so the ultimately what Center

00:04:21,840 --> 00:04:27,330
the database is what you'd be used to

00:04:23,370 --> 00:04:29,040
sending from your own application and

00:04:27,330 --> 00:04:30,850
the way that I've implemented all the

00:04:29,040 --> 00:04:33,280
apps that I've written

00:04:30,850 --> 00:04:37,810
in the past right so you have a restful

00:04:33,280 --> 00:04:39,729
interface and the the the server code

00:04:37,810 --> 00:04:42,610
translates that into some kind of query

00:04:39,729 --> 00:04:45,330
- no - sequel database a key value store

00:04:42,610 --> 00:04:47,650
or a big data store of some other type

00:04:45,330 --> 00:04:48,699
okay so but in this case we're trying to

00:04:47,650 --> 00:04:50,169
do things a little bit differently and

00:04:48,699 --> 00:04:51,930
the one of the reasons for introducing

00:04:50,169 --> 00:04:55,360
this graph QR layer in the middle is

00:04:51,930 --> 00:04:58,990
that the graphical language is tight

00:04:55,360 --> 00:05:00,280
right so every field that you get every

00:04:58,990 --> 00:05:04,360
data structure that you're getting is

00:05:00,280 --> 00:05:06,250
tight now it's not scala mind you so

00:05:04,360 --> 00:05:07,570
it's an N so sometimes the types don't

00:05:06,250 --> 00:05:08,620
always match but people around the

00:05:07,570 --> 00:05:10,630
community done a really good job of

00:05:08,620 --> 00:05:12,190
coming up with translators and

00:05:10,630 --> 00:05:14,410
interfaces so that most I can be hidden

00:05:12,190 --> 00:05:18,449
the other reason for introducing graph

00:05:14,410 --> 00:05:21,759
QL in the middle is that it allows for

00:05:18,449 --> 00:05:24,039
very clean and very simple ways of

00:05:21,759 --> 00:05:26,919
accessing data only the data that you

00:05:24,039 --> 00:05:29,440
need so one classic problem I had at my

00:05:26,919 --> 00:05:32,680
previous startup is that we had this

00:05:29,440 --> 00:05:34,240
really really rich restful api and every

00:05:32,680 --> 00:05:36,250
time a UI developer or a customer would

00:05:34,240 --> 00:05:37,930
say hey i need this other thing that I

00:05:36,250 --> 00:05:40,240
know you're calculating in your database

00:05:37,930 --> 00:05:43,030
but it's not an API we would go and add

00:05:40,240 --> 00:05:44,949
something to one of our existing restful

00:05:43,030 --> 00:05:46,240
endpoints right the problem is that if

00:05:44,949 --> 00:05:48,280
you use an existing restful endpoint

00:05:46,240 --> 00:05:49,389
that endpoint just ends up getting

00:05:48,280 --> 00:05:50,650
bigger and bigger and bigger and bigger

00:05:49,389 --> 00:05:52,210
and people who didn't actually need that

00:05:50,650 --> 00:05:53,650
extra data are still getting it they

00:05:52,210 --> 00:05:55,840
don't have a choice or just subtract out

00:05:53,650 --> 00:05:57,849
and ask for just what they need on the

00:05:55,840 --> 00:05:59,590
other hand if you try to create a new

00:05:57,849 --> 00:06:01,270
endpoint for every different use case

00:05:59,590 --> 00:06:02,320
you end up with thousands of them right

00:06:01,270 --> 00:06:05,050
and that doesn't make any sense either

00:06:02,320 --> 00:06:07,840
so you know it's not it's not a

00:06:05,050 --> 00:06:09,310
reflexive or way of accessing data and

00:06:07,840 --> 00:06:12,159
just the data that you need and you end

00:06:09,310 --> 00:06:13,659
up over fetching or or under fetching

00:06:12,159 --> 00:06:15,520
and then you have to add more endpoints

00:06:13,659 --> 00:06:18,370
so that's that's the two main reasons

00:06:15,520 --> 00:06:19,840
were for me to investigate graphically

00:06:18,370 --> 00:06:25,900
well and we're standardized on that on

00:06:19,840 --> 00:06:28,500
my new company ok so now let's see if we

00:06:25,900 --> 00:06:31,419
can do some light boarding now there's a

00:06:28,500 --> 00:06:32,440
this morning I was trying to get all

00:06:31,419 --> 00:06:35,409
this to work but there was Network

00:06:32,440 --> 00:06:37,349
hiccups so I try to do this locally as

00:06:35,409 --> 00:06:40,260
well so we will try the remote way

00:06:37,349 --> 00:06:42,169
connecting to an actual cloud-based

00:06:40,260 --> 00:06:44,389
endpoint so we can do

00:06:42,169 --> 00:06:46,849
less from here to the cloud my guess is

00:06:44,389 --> 00:06:50,840
is nothing to work from will default

00:06:46,849 --> 00:06:51,949
back to doing things locally okay so

00:06:50,840 --> 00:06:53,509
we're going to keep this interactive I

00:06:51,949 --> 00:06:54,919
don't have a specify time at the end so

00:06:53,509 --> 00:06:56,840
if you have comments and questions you

00:06:54,919 --> 00:07:00,919
know please mention them and we'll take

00:06:56,840 --> 00:07:06,919
them as we as we go here okay so let's

00:07:00,919 --> 00:07:09,979
go in and so remember I told you Prisma

00:07:06,919 --> 00:07:11,599
is this nice wrapper or CLI and a server

00:07:09,979 --> 00:07:14,120
side component to make working with

00:07:11,599 --> 00:07:16,879
graph QL endpoints nice and easy so

00:07:14,120 --> 00:07:18,800
we're going to say well first of all

00:07:16,879 --> 00:07:22,550
please end it a new project will call

00:07:18,800 --> 00:07:25,039
its days and let's see if the network is

00:07:22,550 --> 00:07:27,080
cooperating well it is cooperating okay

00:07:25,039 --> 00:07:32,360
so we're gonna say okay what we want you

00:07:27,080 --> 00:07:33,979
to do is to so we could set up a local

00:07:32,360 --> 00:07:36,080
database and then that's what I do

00:07:33,979 --> 00:07:38,930
normally for development but in this

00:07:36,080 --> 00:07:41,749
case just to just to see how this works

00:07:38,930 --> 00:07:44,270
across the internet we're going to use a

00:07:41,749 --> 00:07:45,409
demo server in this case now already

00:07:44,270 --> 00:07:48,050
logged in so it's not going to ask me do

00:07:45,409 --> 00:07:50,659
that and well I'll pick the u.s. one

00:07:48,050 --> 00:07:54,199
demo cloud server that prism has

00:07:50,659 --> 00:07:56,210
provided for dev testing and and we go a

00:07:54,199 --> 00:07:59,960
name for the services Scala days name

00:07:56,210 --> 00:08:04,009
for your stages dev okay great so what

00:07:59,960 --> 00:08:06,379
just happened is that we ended up with a

00:08:04,009 --> 00:08:08,419
brand new folder with a couple of files

00:08:06,379 --> 00:08:11,029
in it so let's go ahead and look at

00:08:08,419 --> 00:08:12,909
those files so the first part that we're

00:08:11,029 --> 00:08:16,339
doing here is really setting up our

00:08:12,909 --> 00:08:19,580
graph QL interface that we're then going

00:08:16,339 --> 00:08:22,279
to write our client against okay so

00:08:19,580 --> 00:08:23,419
we're gonna do here is that so two files

00:08:22,279 --> 00:08:25,789
got greater right so first is the data

00:08:23,419 --> 00:08:27,529
mall graph QL and so this is the actual

00:08:25,789 --> 00:08:29,779
graphical language there's also at this

00:08:27,529 --> 00:08:31,069
yamo file for how to set things up we we

00:08:29,779 --> 00:08:37,449
won't really need that too much right

00:08:31,069 --> 00:08:37,449
now so we look normal okay

00:08:38,050 --> 00:08:44,500
so let's look at this file so firstly

00:08:42,760 --> 00:08:46,510
notice there's type right so it makes us

00:08:44,500 --> 00:08:49,540
all happy there is a type called user

00:08:46,510 --> 00:08:52,110
and you can refer to this type from from

00:08:49,540 --> 00:08:55,420
other types and inputs and so on

00:08:52,110 --> 00:08:57,160
you also notice that by default and ID

00:08:55,420 --> 00:09:01,560
which is globally unique was created and

00:08:57,160 --> 00:09:04,180
a name was created so this is fine but

00:09:01,560 --> 00:09:06,670
you know actually that's let's so let's

00:09:04,180 --> 00:09:08,950
let's go ahead and deploy this so

00:09:06,670 --> 00:09:11,380
chrismal deploy please have your fingers

00:09:08,950 --> 00:09:14,080
cross the internet connection here

00:09:11,380 --> 00:09:17,470
cooperates if it does okay great so what

00:09:14,080 --> 00:09:20,110
just happened is that our CLI connected

00:09:17,470 --> 00:09:23,770
to the server-side code to go ahead and

00:09:20,110 --> 00:09:25,780
create this view in this new type called

00:09:23,770 --> 00:09:26,950
user and it's fields right there's a

00:09:25,780 --> 00:09:29,230
couple of these fields that are kind of

00:09:26,950 --> 00:09:29,860
automatically created for you on your

00:09:29,230 --> 00:09:33,370
behalf

00:09:29,860 --> 00:09:35,590
just for auditing so what we did is we

00:09:33,370 --> 00:09:38,590
created an ID and named in that type

00:09:35,590 --> 00:09:40,900
user all right so let's say come in here

00:09:38,590 --> 00:09:42,370
say okay well obviously it's not enough

00:09:40,900 --> 00:09:45,810
to have a user with just a name we need

00:09:42,370 --> 00:09:48,730
an email so we're gonna create an email

00:09:45,810 --> 00:09:51,090
field here save and then we're gonna run

00:09:48,730 --> 00:09:53,620
deploy again so if everything was well

00:09:51,090 --> 00:09:55,210
there would be a database evolution in

00:09:53,620 --> 00:09:57,670
the back that has happened where this

00:09:55,210 --> 00:10:04,260
email field has been has now been

00:09:57,670 --> 00:10:07,630
created okay so let's go ahead and

00:10:04,260 --> 00:10:12,610
connect to this endpoint using your

00:10:07,630 --> 00:10:13,780
browser here okay so that we can enter

00:10:12,610 --> 00:10:16,120
and so a lot of times when you're

00:10:13,780 --> 00:10:18,100
working with graph QL you'll notice that

00:10:16,120 --> 00:10:19,480
people will be using this playground

00:10:18,100 --> 00:10:20,590
right this gets it helps you get your

00:10:19,480 --> 00:10:23,290
queries right okay you don't have to

00:10:20,590 --> 00:10:24,880
really learn sequel knowledge it's very

00:10:23,290 --> 00:10:28,840
very simple language so we're gonna say

00:10:24,880 --> 00:10:32,020
well please query all users for me and

00:10:28,840 --> 00:10:35,620
for each user please return the ID name

00:10:32,020 --> 00:10:37,960
and email okay so okay of course there's

00:10:35,620 --> 00:10:40,180
no users right now we have a database

00:10:37,960 --> 00:10:41,710
that's right live and up and running we

00:10:40,180 --> 00:10:44,380
can query it but right now there's no

00:10:41,710 --> 00:10:46,120
data actually in it now while I'm doing

00:10:44,380 --> 00:10:47,560
that I'm gonna refer several times to

00:10:46,120 --> 00:10:49,060
this tab on the right hand side for the

00:10:47,560 --> 00:10:49,670
playground which is actually the schema

00:10:49,060 --> 00:10:53,180
and

00:10:49,670 --> 00:10:56,570
is really nice because the because it's

00:10:53,180 --> 00:10:59,810
nicely typed the language it are this

00:10:56,570 --> 00:11:02,630
two Auto generates the schema and you

00:10:59,810 --> 00:11:03,890
can you know use it and figure out

00:11:02,630 --> 00:11:06,290
what's going wrong in your query

00:11:03,890 --> 00:11:08,750
etcetera very easily okay so now we have

00:11:06,290 --> 00:11:10,040
a query that is basically a vacuous or

00:11:08,750 --> 00:11:13,100
now we're going to do a mutation

00:11:10,040 --> 00:11:16,420
mutation is the keyword in graph QL to

00:11:13,100 --> 00:11:20,290
actually have an effect on the system

00:11:16,420 --> 00:11:23,330
and so when let's say we say create user

00:11:20,290 --> 00:11:25,160
and so part of the process of Prisma

00:11:23,330 --> 00:11:27,320
making life easy for us is that it

00:11:25,160 --> 00:11:29,540
created a whole bunch of functions and a

00:11:27,320 --> 00:11:31,700
whole bunch of basically end points on a

00:11:29,540 --> 00:11:33,710
restful way of thinking on our we have

00:11:31,700 --> 00:11:35,780
so one of those is create user we'll

00:11:33,710 --> 00:11:37,130
look at a few more as we go so for

00:11:35,780 --> 00:11:40,990
create user we're gonna say okay well

00:11:37,130 --> 00:11:47,900
the user that we want to create is

00:11:40,990 --> 00:11:54,710
actually has a name which is fun that's

00:11:47,900 --> 00:11:58,910
me guys and then we have an email that

00:11:54,710 --> 00:12:03,080
is going to be calm okay

00:11:58,910 --> 00:12:05,510
so now we'll see here is there's still

00:12:03,080 --> 00:12:07,430
an error here so let's see field create

00:12:05,510 --> 00:12:09,290
user of type user must have a selection

00:12:07,430 --> 00:12:12,620
of subfields okay so that's telling us a

00:12:09,290 --> 00:12:15,050
anytime you do a query or a subscription

00:12:12,620 --> 00:12:17,990
to a query or a mutation you always have

00:12:15,050 --> 00:12:19,490
to return something and that's a really

00:12:17,990 --> 00:12:21,440
good pattern anyway but you're forced to

00:12:19,490 --> 00:12:23,330
do so and the reason is that when

00:12:21,440 --> 00:12:25,190
there's a mutation when the data comes

00:12:23,330 --> 00:12:29,300
back you want to update the cache so you

00:12:25,190 --> 00:12:31,730
need a unique way of identifying the

00:12:29,300 --> 00:12:33,500
entry that needs to be updated and so

00:12:31,730 --> 00:12:35,060
you're forced to have some response so

00:12:33,500 --> 00:12:37,490
in this case you know we'll just do all

00:12:35,060 --> 00:12:41,750
of the fields just to see what happens

00:12:37,490 --> 00:12:44,810
okay so now there is now a new record in

00:12:41,750 --> 00:12:46,490
the DB we have a name and an email so

00:12:44,810 --> 00:12:51,650
let's go ahead and rerun our query and

00:12:46,490 --> 00:12:53,690
so there we go that's there oh so it

00:12:51,650 --> 00:12:56,890
looks like I ran it twice which is awful

00:12:53,690 --> 00:12:59,060
because now my database actually has two

00:12:56,890 --> 00:13:00,880
users with the same name this is not

00:12:59,060 --> 00:13:03,910
nice so first I'm gonna

00:13:00,880 --> 00:13:10,210
we're going to go ahead and delete user

00:13:03,910 --> 00:13:15,580
and we're gonna say where it's where ID

00:13:10,210 --> 00:13:16,510
is let's just do the second one okay so

00:13:15,580 --> 00:13:19,600
this is just I'm just kind of

00:13:16,510 --> 00:13:21,040
interactively going through this and of

00:13:19,600 --> 00:13:24,160
course there's still an error because

00:13:21,040 --> 00:13:25,750
well we have to return a sub selection

00:13:24,160 --> 00:13:29,500
of fields' well return ID again just to

00:13:25,750 --> 00:13:31,690
make sure that the right record got

00:13:29,500 --> 00:13:33,610
deleted okay now we've run the query

00:13:31,690 --> 00:13:35,050
again and now we're back to one okay so

00:13:33,610 --> 00:13:37,420
this is good but this user could make

00:13:35,050 --> 00:13:38,650
this mistake or the rest of our code

00:13:37,420 --> 00:13:41,470
base could make this mistake so let's

00:13:38,650 --> 00:13:44,440
fix this once and for all there is a

00:13:41,470 --> 00:13:45,910
directive here in this system where we

00:13:44,440 --> 00:13:48,040
can specify unique so we're gonna save

00:13:45,910 --> 00:13:49,930
this we're going to deploy again and

00:13:48,040 --> 00:13:53,740
hopefully if everything goes well the

00:13:49,930 --> 00:13:55,540
field email has now become unique okay

00:13:53,740 --> 00:13:57,910
so the wrappers have kind of pushed that

00:13:55,540 --> 00:13:59,380
in as a database constraint so now we

00:13:57,910 --> 00:14:02,290
come back in here we create user again

00:13:59,380 --> 00:14:03,880
and we get an error a unique constraint

00:14:02,290 --> 00:14:04,360
will be violated on the user okay so far

00:14:03,880 --> 00:14:07,780
so good

00:14:04,360 --> 00:14:12,280
so we're getting here is a sense of the

00:14:07,780 --> 00:14:13,600
the flavor of this language graph QL so

00:14:12,280 --> 00:14:14,680
let's say we now we want to build a

00:14:13,600 --> 00:14:20,260
little application we're going to create

00:14:14,680 --> 00:14:23,170
a post and well need the unique ID so

00:14:20,260 --> 00:14:26,860
let's just get that out of the way

00:14:23,170 --> 00:14:31,150
I guess that posts a blog post or

00:14:26,860 --> 00:14:33,150
something should have a title so you

00:14:31,150 --> 00:14:37,000
guys think string is okay our title

00:14:33,150 --> 00:14:38,530
should we make it required yes okay so

00:14:37,000 --> 00:14:40,690
let me grow apart okay no point of a

00:14:38,530 --> 00:14:42,280
blog post without a title but

00:14:40,690 --> 00:14:44,890
interestingly now we have an opportunity

00:14:42,280 --> 00:14:46,060
so how about we well probably should

00:14:44,890 --> 00:14:50,340
have an author right so now what are we

00:14:46,060 --> 00:14:50,340
going to use as the author's record

00:14:50,450 --> 00:14:53,690
Prisma is a vendor but it's a new

00:14:52,040 --> 00:14:55,970
completely open source project all the

00:14:53,690 --> 00:14:58,820
source code is available and that's what

00:14:55,970 --> 00:15:00,709
I'm using so usually I develop using

00:14:58,820 --> 00:15:02,089
completely open source and not hosted on

00:15:00,709 --> 00:15:03,260
my laptop but in this case I just wanted

00:15:02,089 --> 00:15:06,290
to show that you know going all the way

00:15:03,260 --> 00:15:08,120
across the way a server less would work

00:15:06,290 --> 00:15:09,050
against something running at Amazon as

00:15:08,120 --> 00:15:10,579
well but yet I have to check out a

00:15:09,050 --> 00:15:13,639
vertical project and in the back exactly

00:15:10,579 --> 00:15:17,360
using sangria which is an super super

00:15:13,639 --> 00:15:18,889
awesome graph QL server library ok

00:15:17,360 --> 00:15:22,820
author so what should the type of author

00:15:18,889 --> 00:15:25,880
be user I'm assuming just one user right

00:15:22,820 --> 00:15:27,139
and should we make that require ok so

00:15:25,880 --> 00:15:30,290
you're getting the hang of this bang

00:15:27,139 --> 00:15:31,970
here which is the field cannot be cannot

00:15:30,290 --> 00:15:33,519
be null that's what the bank means

00:15:31,970 --> 00:15:38,149
required field cannot be null

00:15:33,519 --> 00:15:44,360
ok so so what else do we need a new blog

00:15:38,149 --> 00:15:45,980
post anything content text ok text body

00:15:44,360 --> 00:15:47,000
okay now watch to the type of that B

00:15:45,980 --> 00:15:50,510
string

00:15:47,000 --> 00:15:53,060
should we make that required sure okay

00:15:50,510 --> 00:15:54,260
all right why not okay try to be

00:15:53,060 --> 00:15:56,660
interactive here okay so now we're gonna

00:15:54,260 --> 00:15:59,269
save that and we're gonna do the same

00:15:56,660 --> 00:16:00,740
dance again we're gonna deploy it which

00:15:59,269 --> 00:16:02,959
again looks at the current schema that's

00:16:00,740 --> 00:16:05,899
deployed versus the one that I've just

00:16:02,959 --> 00:16:07,550
pushed in we'll compare them and then

00:16:05,899 --> 00:16:09,860
we'll do the database evolutions to go

00:16:07,550 --> 00:16:11,300
ahead and make this work while I'm doing

00:16:09,860 --> 00:16:13,339
this really quickly I want to mention

00:16:11,300 --> 00:16:14,779
you know if you've done restful a lot

00:16:13,339 --> 00:16:16,160
one other thing you need to deal with

00:16:14,779 --> 00:16:17,600
this versioning API versioning it's a

00:16:16,160 --> 00:16:19,370
total pain I mean it's just like oh I

00:16:17,600 --> 00:16:20,690
hate this stuff you know why can't there

00:16:19,370 --> 00:16:22,160
be just a simple way of doing it and

00:16:20,690 --> 00:16:23,180
I've never come up with a really claimed

00:16:22,160 --> 00:16:25,579
way of doing it and you can read

00:16:23,180 --> 00:16:28,519
thousands of blog post or good practices

00:16:25,579 --> 00:16:31,579
right but here for example if we added

00:16:28,519 --> 00:16:34,459
another field and we said you know

00:16:31,579 --> 00:16:37,100
whatever and string if we don't make it

00:16:34,459 --> 00:16:38,480
required anyone who doesn't even know

00:16:37,100 --> 00:16:40,730
the string exists continues to work

00:16:38,480 --> 00:16:43,130
against this API really really really

00:16:40,730 --> 00:16:44,839
nice right and then eventually we want

00:16:43,130 --> 00:16:46,399
to assume maybe you want this to be

00:16:44,839 --> 00:16:48,410
required field in the future once all

00:16:46,399 --> 00:16:51,130
the users have upgraded and you can

00:16:48,410 --> 00:16:53,230
downgrade you can

00:16:51,130 --> 00:16:54,760
then go in and add new functionality and

00:16:53,230 --> 00:16:56,290
added the bang at the end later if you

00:16:54,760 --> 00:16:57,820
wanted to right but this is really

00:16:56,290 --> 00:17:01,090
really nice you don't have to have /v

00:16:57,820 --> 00:17:03,970
one and then slide your v2 in your URLs

00:17:01,090 --> 00:17:06,310
and your restful endpoint sets this is

00:17:03,970 --> 00:17:09,880
super useful okay so we did push that

00:17:06,310 --> 00:17:13,709
and all the fields did get created for

00:17:09,880 --> 00:17:17,440
this post type so let's go ahead and now

00:17:13,709 --> 00:17:19,720
come to our playground and refresh this

00:17:17,440 --> 00:17:22,589
and if all goes well we will now have a

00:17:19,720 --> 00:17:26,920
schema that actually has post related

00:17:22,589 --> 00:17:29,080
queries and types and and so on okay so

00:17:26,920 --> 00:17:31,090
now obviously we can come in here call a

00:17:29,080 --> 00:17:32,940
create post and we see that to do a

00:17:31,090 --> 00:17:36,160
create post we need to provide a

00:17:32,940 --> 00:17:39,490
structured struct this type called post

00:17:36,160 --> 00:17:42,640
create input which has a required title

00:17:39,490 --> 00:17:45,910
with the bank required text and an

00:17:42,640 --> 00:17:47,170
author and the type of author is either

00:17:45,910 --> 00:17:48,670
you're going to create a new author or

00:17:47,170 --> 00:17:49,840
connect an existing one in this case we

00:17:48,670 --> 00:17:52,660
already have one so let's assume we do a

00:17:49,840 --> 00:17:55,270
connect and when we do a connect of this

00:17:52,660 --> 00:17:57,100
new blog post to an existing user right

00:17:55,270 --> 00:17:59,200
we will provide either the ID of that

00:17:57,100 --> 00:18:01,870
user or the email of that use right okay

00:17:59,200 --> 00:18:04,090
you see I like the whole thing like you

00:18:01,870 --> 00:18:07,660
know not with a lot of code we were able

00:18:04,090 --> 00:18:09,780
to accomplish quite a bit at least in my

00:18:07,660 --> 00:18:12,730
opinion right and then type for maintain

00:18:09,780 --> 00:18:14,080
self-documenting so that's really nice

00:18:12,730 --> 00:18:17,130
okay so now we have a new type called

00:18:14,080 --> 00:18:21,100
post so let's go ahead and do a query on

00:18:17,130 --> 00:18:22,900
all of our posts so here for example you

00:18:21,100 --> 00:18:24,400
know there's other fields here so we

00:18:22,900 --> 00:18:26,920
could say hey give me the first 100 I

00:18:24,400 --> 00:18:28,870
don't want all of them but of course we

00:18:26,920 --> 00:18:30,730
don't even have a single one yet so in

00:18:28,870 --> 00:18:37,350
this case the ID what are the other

00:18:30,730 --> 00:18:37,350
fields author title

00:18:37,630 --> 00:18:42,460
texts okay well of course author is a

00:18:40,510 --> 00:18:44,140
nested field so you have to select the

00:18:42,460 --> 00:18:46,780
subfields there and so we're gonna say

00:18:44,140 --> 00:18:48,400
hey just name and email okay so that's

00:18:46,780 --> 00:18:51,070
great of course we don't have a post so

00:18:48,400 --> 00:18:52,270
all that was pointless at least for now

00:18:51,070 --> 00:18:54,250
because now we're gonna come in here

00:18:52,270 --> 00:18:55,720
we're gonna say hey please create a

00:18:54,250 --> 00:18:59,590
mutation what I want to do is I want to

00:18:55,720 --> 00:19:02,110
create a post and as you recall as we

00:18:59,590 --> 00:19:05,410
went through it the post itself is going

00:19:02,110 --> 00:19:07,620
to have some fields so the post is going

00:19:05,410 --> 00:19:11,799
to have a title

00:19:07,620 --> 00:19:15,690
anybody propose a title come on make it

00:19:11,799 --> 00:19:19,390
easy for me what is it

00:19:15,690 --> 00:19:30,179
Scala a days Wednesday brilliant thank

00:19:19,390 --> 00:19:33,610
you okay text Prisma seems pretty cool

00:19:30,179 --> 00:19:35,049
bang is inside the quotation marks there

00:19:33,610 --> 00:19:36,429
and then we say author okay this I

00:19:35,049 --> 00:19:39,940
remember when we looked at this earlier

00:19:36,429 --> 00:19:41,679
this was nested so for the author we're

00:19:39,940 --> 00:19:44,200
gonna connect to an existing author and

00:19:41,679 --> 00:19:46,510
in that case we're just gonna specify no

00:19:44,200 --> 00:19:47,950
there's there's two fields that we could

00:19:46,510 --> 00:19:49,270
specify ID and email the reason why

00:19:47,950 --> 00:19:50,860
email shows up here is because email is

00:19:49,270 --> 00:19:51,970
globally unique right that's the only

00:19:50,860 --> 00:19:53,140
reason that's showing up it otherwise it

00:19:51,970 --> 00:19:55,480
wouldn't show up here it would just be

00:19:53,140 --> 00:19:57,780
ID which I did to make my life easy here

00:19:55,480 --> 00:19:59,799
because I don't want to remember IDs

00:19:57,780 --> 00:20:01,990
although my email address is way too

00:19:59,799 --> 00:20:03,880
long I need to find a shorter domain

00:20:01,990 --> 00:20:05,500
name for my new company if there's any

00:20:03,880 --> 00:20:08,679
consultants out there for branding and

00:20:05,500 --> 00:20:09,880
naming please reach out afterwards okay

00:20:08,679 --> 00:20:11,830
no I'm serious

00:20:09,880 --> 00:20:13,780
okay so now of course they're still an

00:20:11,830 --> 00:20:16,030
error because I have not selected the

00:20:13,780 --> 00:20:18,940
sub fields that I need so what we're

00:20:16,030 --> 00:20:20,740
gonna do is we're gonna say hey Luke

00:20:18,940 --> 00:20:22,299
remember we're creating a post here so

00:20:20,740 --> 00:20:24,190
what was the title of the post so just

00:20:22,299 --> 00:20:26,590
want to confirm it worked correctly and

00:20:24,190 --> 00:20:29,169
then the author and the author's let's

00:20:26,590 --> 00:20:31,210
say email okay so now what happens is

00:20:29,169 --> 00:20:32,500
okay create post was successful here's

00:20:31,210 --> 00:20:35,409
the ID that was generated by the system

00:20:32,500 --> 00:20:37,090
has a title and of course the other

00:20:35,409 --> 00:20:39,900
fields weren't then I just pulled out

00:20:37,090 --> 00:20:39,900
these fields only

00:20:40,940 --> 00:20:44,549
you have to return something and again

00:20:42,929 --> 00:20:46,590
that has to do with the fact that on the

00:20:44,549 --> 00:20:49,019
client side you're probably doing some

00:20:46,590 --> 00:20:51,059
kind of caching and so if it's a delete

00:20:49,019 --> 00:20:52,590
you want to invalidate that after the

00:20:51,059 --> 00:20:54,029
return successful return over the

00:20:52,590 --> 00:20:55,380
deletion you won't invalidate so you

00:20:54,029 --> 00:20:58,590
need something you need to return if

00:20:55,380 --> 00:21:01,470
it's if it's just a refresh of a page

00:20:58,590 --> 00:21:03,029
you want to just populate and do it diff

00:21:01,470 --> 00:21:04,590
against the cache that's already there

00:21:03,029 --> 00:21:08,070
for you it forces you at least pretty

00:21:04,590 --> 00:21:09,210
much forces you to return something now

00:21:08,070 --> 00:21:10,289
I don't know if I actually don't know if

00:21:09,210 --> 00:21:12,389
that's part of the graph goes back or

00:21:10,289 --> 00:21:14,549
not I haven't gotten that divided we can

00:21:12,389 --> 00:21:16,169
look into it after okay so we've got a

00:21:14,549 --> 00:21:17,399
post now so now we go back to our query

00:21:16,169 --> 00:21:18,899
which did nothing before and all of a

00:21:17,399 --> 00:21:21,960
sudden now we have this structure nice

00:21:18,899 --> 00:21:24,659
query and remember right just that your

00:21:21,960 --> 00:21:26,370
user being able to just come in and say

00:21:24,659 --> 00:21:29,010
look I don't be text anymore in their

00:21:26,370 --> 00:21:31,740
code and getting less data is really

00:21:29,010 --> 00:21:35,070
really really awesome okay so now we

00:21:31,740 --> 00:21:36,330
have you know some data so now we're

00:21:35,070 --> 00:21:39,630
going to switch over to the world of

00:21:36,330 --> 00:21:41,490
Scala so what we're gonna do is open up

00:21:39,630 --> 00:21:45,269
project that I've been working on that I

00:21:41,490 --> 00:21:46,409
will publish well parts of this publish

00:21:45,269 --> 00:21:49,260
in various places already in this

00:21:46,409 --> 00:21:50,909
particular version I will post and I

00:21:49,260 --> 00:21:52,289
will post your Twitter about this as

00:21:50,909 --> 00:21:54,299
well so if anybody wants to track it

00:21:52,289 --> 00:21:55,380
they can take a look so what this

00:21:54,299 --> 00:22:00,179
project I'm calling a triple play

00:21:55,380 --> 00:22:01,740
because well I guess should be obvious

00:22:00,179 --> 00:22:04,559
right there's like three things in the

00:22:01,740 --> 00:22:06,000
you know I'm used to peanuts with two

00:22:04,559 --> 00:22:08,070
peanuts in it or peanut shells with two

00:22:06,000 --> 00:22:10,529
penis well in this case we have three so

00:22:08,070 --> 00:22:13,380
what are the three so this iOS Android

00:22:10,529 --> 00:22:14,870
and web app all in one and so what the

00:22:13,380 --> 00:22:17,309
very very simple project right and so

00:22:14,870 --> 00:22:19,889
just to take a quick look at it right so

00:22:17,309 --> 00:22:21,990
this is using react native so this is

00:22:19,889 --> 00:22:23,490
facades on top of react which is a

00:22:21,990 --> 00:22:26,309
JavaScript project so we're gonna be

00:22:23,490 --> 00:22:30,200
recording in Scala j/s with a bunch of

00:22:26,309 --> 00:22:33,510
interfaces for existing react native

00:22:30,200 --> 00:22:34,919
components systems graph QL handlers and

00:22:33,510 --> 00:22:36,480
so on right so we try to abstract all

00:22:34,919 --> 00:22:39,809
that away so we live in Scala as much as

00:22:36,480 --> 00:22:41,429
possible but there's hundreds of

00:22:39,809 --> 00:22:42,840
thousands of people writing really cool

00:22:41,429 --> 00:22:45,389
JavaScript libraries we still want to

00:22:42,840 --> 00:22:48,870
use them and just like in the JVM world

00:22:45,389 --> 00:22:50,370
Scala is able to interact with other

00:22:48,870 --> 00:22:51,660
Java projects and libraries we're trying

00:22:50,370 --> 00:22:53,250
to do as much of that as

00:22:51,660 --> 00:22:55,590
we'll hear as well by creating these

00:22:53,250 --> 00:22:58,110
interfaces and facades so this is one of

00:22:55,590 --> 00:23:00,840
places where you set up your interfaces

00:22:58,110 --> 00:23:02,940
so this is a JavaScript libraries that

00:23:00,840 --> 00:23:04,020
are being used behind the scenes this is

00:23:02,940 --> 00:23:06,720
built under project you won't have to

00:23:04,020 --> 00:23:08,640
worry about it if you want to dip your

00:23:06,720 --> 00:23:11,250
toes in it so index dot HTML so the web

00:23:08,640 --> 00:23:15,090
part of this app will load using this is

00:23:11,250 --> 00:23:17,570
this very simple HTML and this div ID is

00:23:15,090 --> 00:23:20,580
where our application will get injected

00:23:17,570 --> 00:23:22,260
similarly if you're going to load an iOS

00:23:20,580 --> 00:23:24,960
app out of this which we will try to do

00:23:22,260 --> 00:23:28,110
fingers crossed that that will actually

00:23:24,960 --> 00:23:33,230
load from this interface so all of this

00:23:28,110 --> 00:23:35,730
stuff is set up in a and get a rate

00:23:33,230 --> 00:23:37,320
template so that's very easy for you

00:23:35,730 --> 00:23:39,290
guys to get started and then the actual

00:23:37,320 --> 00:23:42,150
code base here has got a few components

00:23:39,290 --> 00:23:44,400
so relay is the interface for graph Q

00:23:42,150 --> 00:23:46,800
out we will see in a second there's the

00:23:44,400 --> 00:23:50,430
web specific interface and then there is

00:23:46,800 --> 00:23:53,220
another one somewhere here for mobile to

00:23:50,430 --> 00:23:54,540
mobile specifically components here so

00:23:53,220 --> 00:23:56,130
we'll see this more in a second so

00:23:54,540 --> 00:23:58,200
here's the entry point so in the entry

00:23:56,130 --> 00:23:59,250
point other than our imports is very

00:23:58,200 --> 00:24:00,750
simple we're saying okay we're gonna

00:23:59,250 --> 00:24:02,160
define main and this is what Scala js'

00:24:00,750 --> 00:24:03,680
will look forward to instantiate the app

00:24:02,160 --> 00:24:06,120
and inject it into the right location

00:24:03,680 --> 00:24:08,760
inside the Dom in the case of web or in

00:24:06,120 --> 00:24:11,970
the app itself right here we're just

00:24:08,760 --> 00:24:14,280
doing a three against trees the platform

00:24:11,970 --> 00:24:16,680
that we're using to hide all of the

00:24:14,280 --> 00:24:19,470
JavaScript stuff for react native okay

00:24:16,680 --> 00:24:20,490
which is how we do multi-platform apps

00:24:19,470 --> 00:24:23,100
using a single codebase

00:24:20,490 --> 00:24:24,330
so if you're a web write do this

00:24:23,100 --> 00:24:25,470
otherwise do this and pretty much

00:24:24,330 --> 00:24:28,110
everything else on the code is going to

00:24:25,470 --> 00:24:30,600
be the same but just the entry point is

00:24:28,110 --> 00:24:33,360
a little bit different alright so now

00:24:30,600 --> 00:24:34,440
let's get into it and let's go to well

00:24:33,360 --> 00:24:35,760
if we're going to be rendering this

00:24:34,440 --> 00:24:39,200
thing called web doc - let's go look at

00:24:35,760 --> 00:24:41,400
it so we registered some screens and

00:24:39,200 --> 00:24:46,620
there's an error here but I won't bother

00:24:41,400 --> 00:24:50,280
fixing it now and then so there's a web

00:24:46,620 --> 00:24:54,150
router that's set up here and then what

00:24:50,280 --> 00:24:56,460
we'll see here is some script to get us

00:24:54,150 --> 00:24:58,110
started so this is gen generate get or

00:24:56,460 --> 00:25:00,090
update schema and then we're going to

00:24:58,110 --> 00:25:07,520
run this first because this is the thing

00:25:00,090 --> 00:25:11,850
that is going to get the the graph QL

00:25:07,520 --> 00:25:13,529
spec the schema and translated into

00:25:11,850 --> 00:25:15,299
Scala so that when we writing code we

00:25:13,529 --> 00:25:16,409
don't have to actually worry about the

00:25:15,299 --> 00:25:17,850
all the translations already done were

00:25:16,409 --> 00:25:20,880
actually get a model that we can get

00:25:17,850 --> 00:25:23,400
completion on and so on okay so to do

00:25:20,880 --> 00:25:25,409
that all I need to do is to go back here

00:25:23,400 --> 00:25:27,600
and I kind of lied to you that we don't

00:25:25,409 --> 00:25:32,340
need this but we do so here's where

00:25:27,600 --> 00:25:40,110
we're going to just export this endpoint

00:25:32,340 --> 00:25:42,809
and call okay so that just went across

00:25:40,110 --> 00:25:46,380
the internet to our endpoint pulled out

00:25:42,809 --> 00:25:48,299
the graphical schema converted it using

00:25:46,380 --> 00:25:49,980
all of this as open source right that a

00:25:48,299 --> 00:25:52,409
bunch of us are maintaining converted it

00:25:49,980 --> 00:25:54,659
into Scala and so this is where it

00:25:52,409 --> 00:25:57,450
converted into so let's go to models

00:25:54,659 --> 00:26:01,260
here graph 12 models so this here is

00:25:57,450 --> 00:26:03,750
completely auto-generated bindings for

00:26:01,260 --> 00:26:07,049
scala for that for that particular graph

00:26:03,750 --> 00:26:08,370
QL schema so you'll notice this is we'll

00:26:07,049 --> 00:26:10,080
start to get familiar a little bit

00:26:08,370 --> 00:26:12,270
you remember create user we call that

00:26:10,080 --> 00:26:14,909
earlier you'll see that it's actually a

00:26:12,270 --> 00:26:16,860
native binding interface so we don't

00:26:14,909 --> 00:26:19,159
really care we're just gonna call it and

00:26:16,860 --> 00:26:22,020
the system will take care of the rest

00:26:19,159 --> 00:26:24,570
and then there's a whole bunch of other

00:26:22,020 --> 00:26:27,240
things here where for example the return

00:26:24,570 --> 00:26:29,370
of post create input it has a certain

00:26:27,240 --> 00:26:33,090
type and then that's why that's how you

00:26:29,370 --> 00:26:36,000
can parse the output and so on okay okay

00:26:33,090 --> 00:26:37,649
so suffice it to say there's a very huge

00:26:36,000 --> 00:26:39,750
file that gets created with all of the

00:26:37,649 --> 00:26:44,429
various bindings and types that is now

00:26:39,750 --> 00:26:45,690
in scala okay so well let's see we're

00:26:44,429 --> 00:26:50,270
gonna get a bunch of type errors because

00:26:45,690 --> 00:26:52,350
I'm sure that I did not retype this

00:26:50,270 --> 00:26:55,169
completely accurately the schema that we

00:26:52,350 --> 00:26:58,460
generated oh did we not get into her how

00:26:55,169 --> 00:26:58,460
is that possible okay

00:27:02,590 --> 00:27:09,470
everything so I'm gonna so Visual Studio

00:27:06,590 --> 00:27:11,650
code is when I go to your visual record

00:27:09,470 --> 00:27:14,270
visually you think that's not Scala yes

00:27:11,650 --> 00:27:18,320
whenever I'm in IntelliJ it's all

00:27:14,270 --> 00:27:21,020
colleges alright this is Carla this is

00:27:18,320 --> 00:27:22,630
called that's that's right that's right

00:27:21,020 --> 00:27:25,970
so right at the top you see import Scala

00:27:22,630 --> 00:27:29,840
jsj s and then for example you know at

00:27:25,970 --> 00:27:31,940
any point in time you know the you know

00:27:29,840 --> 00:27:32,930
the fact that the facades are taking

00:27:31,940 --> 00:27:35,600
care of a whole bunch of the messiness

00:27:32,930 --> 00:27:37,220
for you okay and then if you guys ever

00:27:35,600 --> 00:27:38,240
want to like if anybody is becomes

00:27:37,220 --> 00:27:41,300
interested at the end let's talk to

00:27:38,240 --> 00:27:42,860
contribute we you know reach out on our

00:27:41,300 --> 00:27:43,790
Gator channel we can get you guys

00:27:42,860 --> 00:27:51,110
started a bunch of cool things that

00:27:43,790 --> 00:27:53,840
we're doing that we need help on okay so

00:27:51,110 --> 00:27:56,390
AWS lambda is a way to take JavaScript

00:27:53,840 --> 00:27:58,130
functions and install them somewhere

00:27:56,390 --> 00:28:00,950
where if you hit an API endpoint that

00:27:58,130 --> 00:28:02,960
that function will run you can take any

00:28:00,950 --> 00:28:04,910
scholar J's function converted into a

00:28:02,960 --> 00:28:07,100
Jas because that's what the it

00:28:04,910 --> 00:28:10,040
transpires into and then install it into

00:28:07,100 --> 00:28:11,390
lambda so this we're not doing lambda

00:28:10,040 --> 00:28:13,250
styles forever last year we're trying to

00:28:11,390 --> 00:28:16,340
do this very data and functional

00:28:13,250 --> 00:28:19,010
oriented things where you were you know

00:28:16,340 --> 00:28:20,690
you can do the same thing that lambda

00:28:19,010 --> 00:28:22,280
does using this code base I'm just not

00:28:20,690 --> 00:28:24,650
demonstrating that today is that design

00:28:22,280 --> 00:28:25,790
a straight question okay so I'm supposed

00:28:24,650 --> 00:28:26,600
to repeat questions which I don't think

00:28:25,790 --> 00:28:28,490
I've been doing a good job of but

00:28:26,600 --> 00:28:31,880
hopefully there's enough context in the

00:28:28,490 --> 00:28:33,590
answer to for folks on the on the video

00:28:31,880 --> 00:28:35,900
to make it out but I'll try to be better

00:28:33,590 --> 00:28:39,080
at that okay so now we're gonna go and

00:28:35,900 --> 00:28:40,730
actually look at what's happening so the

00:28:39,080 --> 00:28:42,530
first thing I'm doing here is I'm

00:28:40,730 --> 00:28:45,260
drawing an app frame and in that app

00:28:42,530 --> 00:28:47,740
frame there's a view and the view is

00:28:45,260 --> 00:28:50,480
kind of like a div but it's Universal

00:28:47,740 --> 00:28:54,230
component so it couldn't renders both in

00:28:50,480 --> 00:28:57,500
web as well as in our native apps okay

00:28:54,230 --> 00:28:59,600
so this view has this navigation at the

00:28:57,500 --> 00:29:00,920
top and then whatever else comes with

00:28:59,600 --> 00:29:04,550
the nav so let's go look at the nav

00:29:00,920 --> 00:29:07,970
let's navigate there okay and so this

00:29:04,550 --> 00:29:09,770
nav here is just drawing some static

00:29:07,970 --> 00:29:11,240
menu items okay I won't go through all

00:29:09,770 --> 00:29:12,669
the details of that so that's what's

00:29:11,240 --> 00:29:14,559
getting painted on

00:29:12,669 --> 00:29:19,059
this screen here so this is a live view

00:29:14,559 --> 00:29:26,220
of actually refresh that did not run the

00:29:19,059 --> 00:29:26,220
server let's run the server start web

00:29:28,010 --> 00:29:40,399
okay so hopefully that runs sorry said

00:29:33,649 --> 00:29:42,409
again this is just wet pack launching

00:29:40,399 --> 00:29:44,480
the local server and because I'm running

00:29:42,409 --> 00:29:45,919
in dev mode it's doing that for me if I

00:29:44,480 --> 00:29:47,990
was not running in dev mode I would just

00:29:45,919 --> 00:29:50,450
run it as Python - em you know HTTP

00:29:47,990 --> 00:29:53,299
whatever just a command line it is it's

00:29:50,450 --> 00:29:54,830
gonna mount that just as you know as

00:29:53,299 --> 00:29:56,240
long as the client looks for splashed

00:29:54,830 --> 00:29:57,440
index.html it doesn't matter because

00:29:56,240 --> 00:30:01,190
that's that's the only thing we need

00:29:57,440 --> 00:30:02,899
yeah okay okay so okay so that actually

00:30:01,190 --> 00:30:07,340
reloaded so let's just make sure that

00:30:02,899 --> 00:30:10,100
this is live I know this important to

00:30:07,340 --> 00:30:12,019
prove that it might be live here and I'm

00:30:10,100 --> 00:30:17,090
not just faking it so let's go in here

00:30:12,019 --> 00:30:20,269
and say hey where do we create the text

00:30:17,090 --> 00:30:22,909
so let's just call it - and then we come

00:30:20,269 --> 00:30:26,029
back here I'm running a lot of apps so

00:30:22,909 --> 00:30:28,610
you see it's taking a few seconds and of

00:30:26,029 --> 00:30:30,139
course that's the Scala compiler mostly

00:30:28,610 --> 00:30:32,510
I was a Scala compiler just taking this

00:30:30,139 --> 00:30:34,730
time a little bit of warming up okay so

00:30:32,510 --> 00:30:36,409
you see home - so we know that this app

00:30:34,730 --> 00:30:38,419
is live and it reloaded automatically

00:30:36,409 --> 00:30:41,690
and took two or three seconds that's not

00:30:38,419 --> 00:30:44,450
terrible but hopefully you know as the

00:30:41,690 --> 00:30:46,340
compiler gets faster the Scala GS

00:30:44,450 --> 00:30:49,870
transparent will get faster and and that

00:30:46,340 --> 00:30:49,870
gets resolved

00:30:51,800 --> 00:30:55,310
what I'm saying is that once the once

00:30:53,450 --> 00:30:57,680
SBT is nice and warm it'll be a little

00:30:55,310 --> 00:30:59,360
fatter and it should be warm down so

00:30:57,680 --> 00:31:01,430
that one really fast that time so let's

00:30:59,360 --> 00:31:03,650
try that again so let's say do this as

00:31:01,430 --> 00:31:08,390
soon as I switch out it's gonna save the

00:31:03,650 --> 00:31:13,250
file and run it one two three four four

00:31:08,390 --> 00:31:14,870
and F seconds that time okay and this is

00:31:13,250 --> 00:31:16,340
a kind of old laptop so your mileage may

00:31:14,870 --> 00:31:17,900
vary and I'm also running a whole bunch

00:31:16,340 --> 00:31:19,160
of apps here so there might be a little

00:31:17,900 --> 00:31:22,580
bit of memory pressure I haven't checked

00:31:19,160 --> 00:31:23,360
the GC pressure on SBT there to see why

00:31:22,580 --> 00:31:26,420
it's taking so long

00:31:23,360 --> 00:31:28,190
okay so now we have a web server running

00:31:26,420 --> 00:31:30,200
just running web pack right the docs

00:31:28,190 --> 00:31:33,260
will explain how to do that you know

00:31:30,200 --> 00:31:35,420
it's just yarn start web and all the

00:31:33,260 --> 00:31:37,490
magic happens behind the scenes and we

00:31:35,420 --> 00:31:39,020
see that that there is this dashboard

00:31:37,490 --> 00:31:42,680
that is running it's okay so now let's

00:31:39,020 --> 00:31:44,380
go and run tab 1x okay so here's our

00:31:42,680 --> 00:31:47,750
post guys come on this is cool right

00:31:44,380 --> 00:31:52,280
okay okay so obviously that's not good

00:31:47,750 --> 00:31:54,050
enough we want to get better so let's go

00:31:52,280 --> 00:31:59,510
back to our playground let's create a

00:31:54,050 --> 00:32:05,370
new user let's say call it Martin let's

00:31:59,510 --> 00:32:07,140
say our ski he won't like that but

00:32:05,370 --> 00:32:08,970
and at least this way we'll watch the

00:32:07,140 --> 00:32:12,840
video okay so we're going to create this

00:32:08,970 --> 00:32:16,350
user and let's see if it works okay

00:32:12,840 --> 00:32:20,400
that worked and then we're going to come

00:32:16,350 --> 00:32:21,900
and create a post and this time well

00:32:20,400 --> 00:32:27,930
create post and this time we're gonna

00:32:21,900 --> 00:32:30,510
make it a derp ski yeah I'll call and

00:32:27,930 --> 00:32:33,980
then okay be creative guys what's the

00:32:30,510 --> 00:32:33,980
title for his pose his blog post

00:32:35,720 --> 00:32:40,200
you

00:32:38,160 --> 00:32:42,930
okay let's put question of hours in

00:32:40,200 --> 00:32:50,400
front of it and the text for that is it

00:32:42,930 --> 00:32:51,720
really is that okay okay alright so here

00:32:50,400 --> 00:32:53,910
we have it we have in your blog post

00:32:51,720 --> 00:32:56,700
we're gonna connect it to a dirt skis

00:32:53,910 --> 00:33:06,110
email and boom okay so now let's go back

00:32:56,700 --> 00:33:10,170
in and let us see what happened here

00:33:06,110 --> 00:33:15,540
okay so what we're gonna do is I just

00:33:10,170 --> 00:33:17,070
refresh this page and we have that

00:33:15,540 --> 00:33:18,270
listing so now the listings not very

00:33:17,070 --> 00:33:19,440
pretty obviously now this is where the

00:33:18,270 --> 00:33:23,460
user interface designer would come in

00:33:19,440 --> 00:33:25,650
and of course I'm not one but we can

00:33:23,460 --> 00:33:28,140
clean up tiny little bits of it we can

00:33:25,650 --> 00:33:32,970
for example go to post rjs oops not that

00:33:28,140 --> 00:33:37,050
one I'm go to a post list we can say

00:33:32,970 --> 00:33:43,080
okay instead of drawing this as just

00:33:37,050 --> 00:33:45,420
text back to back can you instead of

00:33:43,080 --> 00:33:50,450
that maybe you know let's just start out

00:33:45,420 --> 00:33:53,450
simple say author name is gonna go here

00:33:50,450 --> 00:33:53,450
okay

00:33:54,680 --> 00:34:00,120
yeah that's a little more advanced

00:33:56,640 --> 00:34:03,840
because I'm doing it both for web and

00:34:00,120 --> 00:34:06,810
for mobile so you can't just do a link

00:34:03,840 --> 00:34:07,890
tag you have to use a navigator and the

00:34:06,810 --> 00:34:09,810
navigator is a little bit different I

00:34:07,890 --> 00:34:12,360
mean we can do it it's not gonna fit in

00:34:09,810 --> 00:34:20,520
this short demo timeframe here so we're

00:34:12,360 --> 00:34:22,800
gonna say okay I say he wrote this title

00:34:20,520 --> 00:34:32,390
and then we're going to now of course

00:34:22,800 --> 00:34:32,390
again with a real UI designer here don't

00:34:33,300 --> 00:34:41,010
[Music]

00:34:34,550 --> 00:34:46,710
title plus a dot text okay animal and

00:34:41,010 --> 00:34:48,419
short maybe a again please pardon the

00:34:46,710 --> 00:34:49,919
lack of creativity in terms that you

00:34:48,419 --> 00:34:53,190
adds on so that should refresh quickly

00:34:49,919 --> 00:34:58,560
just to fit the post in there and so we

00:34:53,190 --> 00:35:01,140
made a mistake here so that's a oh I

00:34:58,560 --> 00:35:04,260
know what it is in our query we didn't

00:35:01,140 --> 00:35:08,880
ask for text and Here I am in a silly

00:35:04,260 --> 00:35:10,860
way trying to print out the text that

00:35:08,880 --> 00:35:12,210
doesn't work so that now that what

00:35:10,860 --> 00:35:14,820
happened there is it all the queries got

00:35:12,210 --> 00:35:17,310
that Corey got recompiled and now we're

00:35:14,820 --> 00:35:18,510
seeing the post here so now the really

00:35:17,310 --> 00:35:19,890
nice thing out of this another nice

00:35:18,510 --> 00:35:21,780
thing out of this is that suppose I say

00:35:19,890 --> 00:35:24,540
look actually we made a mistake

00:35:21,780 --> 00:35:26,940
that wasn't a Dorsky because of course

00:35:24,540 --> 00:35:28,680
why would a turkey even write a post

00:35:26,940 --> 00:35:30,990
like Scala is over that doesn't make any

00:35:28,680 --> 00:35:32,430
sense so what we're gonna do is we're

00:35:30,990 --> 00:35:33,990
gonna come in here now what you're gonna

00:35:32,430 --> 00:35:35,640
do is gonna watch this screen here guys

00:35:33,990 --> 00:35:37,500
okay don't watch what I'm typing we'll

00:35:35,640 --> 00:35:43,050
catch up on that later if this works

00:35:37,500 --> 00:35:46,730
we're gonna say update post and we're

00:35:43,050 --> 00:35:46,730
gonna say is update post

00:35:47,400 --> 00:36:03,720
excuse me let's shrink this a little bit

00:35:52,970 --> 00:36:05,880
okay so update post where PI D is and

00:36:03,720 --> 00:36:12,029
then we have our posts ID

00:36:05,880 --> 00:36:14,039
I hope yeah no that wasn't the one this

00:36:12,029 --> 00:36:19,410
one so I'm gonna say well we got to the

00:36:14,039 --> 00:36:25,369
post with that ID and let's see and the

00:36:19,410 --> 00:36:25,369
data for that is going to be author

00:36:27,349 --> 00:36:35,549
connect email and I'll take the blame

00:36:33,710 --> 00:36:37,400
even though it wasn't me it was one of

00:36:35,549 --> 00:36:39,329
you guys okay

00:36:37,400 --> 00:36:41,099
okay I'll take the blame so we're gonna

00:36:39,329 --> 00:36:45,440
connect it up so hopefully that quarry

00:36:41,099 --> 00:36:45,440
runs and then oops

00:36:46,019 --> 00:36:50,460
what I do is there any red here oh oh of

00:36:49,980 --> 00:36:53,700
course

00:36:50,460 --> 00:36:58,230
surprise I made this mistake again okay

00:36:53,700 --> 00:37:00,720
so we get an ID back and then a author

00:36:58,230 --> 00:37:05,150
back and make sure that that author is

00:37:00,720 --> 00:37:08,400
me so that ran automatically update it

00:37:05,150 --> 00:37:09,599
okay so now this is n 2 n right so how

00:37:08,400 --> 00:37:11,279
did that happen yeah this is really

00:37:09,599 --> 00:37:13,710
really really cool so on graph QL

00:37:11,279 --> 00:37:16,289
remember if you call I mentioned there's

00:37:13,710 --> 00:37:18,059
three types of things you can do with

00:37:16,289 --> 00:37:20,450
the schema you can do queries you can do

00:37:18,059 --> 00:37:22,890
mutations and you can do subscriptions

00:37:20,450 --> 00:37:24,269
so queries we've done a bunch of them

00:37:22,890 --> 00:37:26,519
for mutations we learn about to them

00:37:24,269 --> 00:37:27,749
we haven't done a subscription yet so

00:37:26,519 --> 00:37:30,450
the way that a subscription would work

00:37:27,749 --> 00:37:31,529
is that it's just as simple as

00:37:30,450 --> 00:37:35,789
anything's you come in here and say

00:37:31,529 --> 00:37:39,180
subscription and I want to do it on on a

00:37:35,789 --> 00:37:41,460
post and I want actually let's say I

00:37:39,180 --> 00:37:44,299
want to do it on all posts and I want

00:37:41,460 --> 00:37:50,119
you to return the updated fields and

00:37:44,299 --> 00:37:50,119
also say mutation type okay and then

00:37:50,420 --> 00:37:54,869
yeah so let's run that see now that's

00:37:53,009 --> 00:37:56,819
running actually and it's waiting is

00:37:54,869 --> 00:37:59,530
blocked and waiting now we come back

00:37:56,819 --> 00:38:05,080
here and we switch this post back to

00:37:59,530 --> 00:38:08,560
order ski calm and when we come here you

00:38:05,080 --> 00:38:12,160
will see that there's actually updated

00:38:08,560 --> 00:38:13,930
fields I don't know what that didn't

00:38:12,160 --> 00:38:20,940
work I should have listened to the other

00:38:13,930 --> 00:38:20,940
it feels my dupatta for a second

00:38:21,850 --> 00:38:25,990
you can also get previous values which

00:38:23,590 --> 00:38:29,560
is really awesome because again to

00:38:25,990 --> 00:38:33,190
invalidate caches and so on that can be

00:38:29,560 --> 00:38:36,430
quite useful so let's do this again

00:38:33,190 --> 00:38:38,850
we're gonna update this and let's see

00:38:36,430 --> 00:38:38,850
what happens

00:38:42,760 --> 00:38:57,880
calm okay so so yeah we got a second

00:38:50,540 --> 00:38:57,880
update to this sorry

00:38:58,370 --> 00:39:03,020
oh that doesn't matter actually the

00:39:01,520 --> 00:39:04,760
subscription is still alive which is

00:39:03,020 --> 00:39:06,170
really nice because it just ittle and it

00:39:04,760 --> 00:39:08,690
can auto refresh as well you can set up

00:39:06,170 --> 00:39:13,220
a subscriber to auto refresh as well so

00:39:08,690 --> 00:39:14,960
I think the issue was that I did always

00:39:13,220 --> 00:39:19,010
write because I changed the connection

00:39:14,960 --> 00:39:21,050
of a nested type so that's that's why

00:39:19,010 --> 00:39:23,960
the updated fields because it wasn't a

00:39:21,050 --> 00:39:25,370
field of the subscription it was a field

00:39:23,960 --> 00:39:27,890
of something else that triggered so you

00:39:25,370 --> 00:39:29,390
can go and refetch but it didn't end up

00:39:27,890 --> 00:39:31,040
getting listed so you know if we had

00:39:29,390 --> 00:39:33,050
more time it actually go and write the

00:39:31,040 --> 00:39:34,790
subscription in a way where we should be

00:39:33,050 --> 00:39:38,930
able to get the nested Valley as well

00:39:34,790 --> 00:39:42,290
okay sorry why would you use a

00:39:38,930 --> 00:39:45,170
subscription okay so instead of having a

00:39:42,290 --> 00:39:46,340
a rich application that has a tremendous

00:39:45,170 --> 00:39:48,470
amount of data that is carefully

00:39:46,340 --> 00:39:54,830
selected through the entire schema of

00:39:48,470 --> 00:39:56,570
the server refresh for updated data it

00:39:54,830 --> 00:39:58,610
just gets the data that it wants only

00:39:56,570 --> 00:39:59,870
just sips exactly the data that it wants

00:39:58,610 --> 00:40:01,250
using graphical and then writes a

00:39:59,870 --> 00:40:02,660
subscription for the fields that it

00:40:01,250 --> 00:40:04,910
wants to refresh automatically a

00:40:02,660 --> 00:40:07,070
WebSocket connection is created and then

00:40:04,910 --> 00:40:08,420
the server will ping back and say hey I

00:40:07,070 --> 00:40:10,130
have this little piece of data you don't

00:40:08,420 --> 00:40:11,330
have to reget everything just this

00:40:10,130 --> 00:40:13,730
little piece of data that has been

00:40:11,330 --> 00:40:16,060
updated and that comes back up refreshes

00:40:13,730 --> 00:40:18,860
the cache of the client and gets redrawn

00:40:16,060 --> 00:40:20,780
okay and it's again very functional very

00:40:18,860 --> 00:40:22,430
functional reactive all the way inside

00:40:20,780 --> 00:40:23,570
the client between the client on the

00:40:22,430 --> 00:40:27,800
server and inside the server as well

00:40:23,570 --> 00:40:29,690
okay okay so so that's so far so good so

00:40:27,800 --> 00:40:31,130
we talked about graph QL which is a very

00:40:29,690 --> 00:40:32,630
high level hopefully enough to motivate

00:40:31,130 --> 00:40:33,830
you guys to go and take your restful

00:40:32,630 --> 00:40:36,710
interfaces and check them out the window

00:40:33,830 --> 00:40:39,050
is it's time on graphic oil is pretty

00:40:36,710 --> 00:40:40,400
mature Facebook did the original work

00:40:39,050 --> 00:40:41,840
but now there's hundreds of committers

00:40:40,400 --> 00:40:43,760
around the world that are doing some

00:40:41,840 --> 00:40:45,260
really really awesome work for it and

00:40:43,760 --> 00:40:46,970
it's become better typed and more

00:40:45,260 --> 00:40:48,860
structured as time has gone on so I'm

00:40:46,970 --> 00:40:51,110
really excited about in them and like I

00:40:48,860 --> 00:40:53,810
said I've but our application platform

00:40:51,110 --> 00:40:55,310
in production for it the second thing we

00:40:53,810 --> 00:40:57,050
talked about a scholar GS and you've got

00:40:55,310 --> 00:40:59,480
a little tiny bit of a flavor for it

00:40:57,050 --> 00:41:01,100
so you know one of the one of the

00:40:59,480 --> 00:41:03,650
reasons I want to give this talk was to

00:41:01,100 --> 00:41:05,900
talk about how Scala GS is really really

00:41:03,650 --> 00:41:07,760
really ready and so if you're a team

00:41:05,900 --> 00:41:08,780
that is already doing a bunch of Scala

00:41:07,760 --> 00:41:10,460
but you have Java

00:41:08,780 --> 00:41:12,290
script that your developers your

00:41:10,460 --> 00:41:15,160
front-end guys we're using and you have

00:41:12,290 --> 00:41:17,540
any trouble on at that intersection

00:41:15,160 --> 00:41:19,040
definitely gives colleges a chance and

00:41:17,540 --> 00:41:20,270
you can actually just start using it for

00:41:19,040 --> 00:41:23,630
pieces of your application you don't

00:41:20,270 --> 00:41:25,880
have to wholesale adopt it right now we

00:41:23,630 --> 00:41:28,820
also use react native and this free

00:41:25,880 --> 00:41:32,090
project but we didn't get you know too

00:41:28,820 --> 00:41:34,580
deep into it and you know it would that

00:41:32,090 --> 00:41:36,260
would take a little bit longer then we

00:41:34,580 --> 00:41:38,150
have time for in this talk so now we're

00:41:36,260 --> 00:41:41,060
gonna cross your fingers again and try

00:41:38,150 --> 00:41:43,430
to get to the last piece here which is

00:41:41,060 --> 00:41:45,350
does this work on mobile because the

00:41:43,430 --> 00:41:46,670
entire kind of the purpose of this was

00:41:45,350 --> 00:41:55,880
to try to make it work

00:41:46,670 --> 00:41:59,210
on mobile sorry can you get the device

00:41:55,880 --> 00:42:01,070
ID I haven't tried I believe so yeah I

00:41:59,210 --> 00:42:02,240
believe react native itself provides a

00:42:01,070 --> 00:42:03,830
binding I don't I don't think we've

00:42:02,240 --> 00:42:05,420
written a binding for that in the

00:42:03,830 --> 00:42:09,350
scholar just layer should be easy to add

00:42:05,420 --> 00:42:12,950
but I believe it's in the react native

00:42:09,350 --> 00:42:20,240
API ok so what happened here is that my

00:42:12,950 --> 00:42:22,820
window got shrunk when I when I

00:42:20,240 --> 00:42:27,740
connected the screen here so I don't

00:42:22,820 --> 00:42:29,360
know how to read okay so something work

00:42:27,740 --> 00:42:31,730
right didn't okay so what's the error

00:42:29,360 --> 00:42:35,990
here let's see no data return for our

00:42:31,730 --> 00:42:37,460
patient post query okay so we are going

00:42:35,990 --> 00:42:40,340
to make sure that we're compiling

00:42:37,460 --> 00:42:42,880
everything so we are compiling both the

00:42:40,340 --> 00:42:45,890
web target and the dev target is great

00:42:42,880 --> 00:42:50,000
and we're going to come here and we're

00:42:45,890 --> 00:42:52,610
going to make sure that react native is

00:42:50,000 --> 00:42:57,970
started and we're going to come here to

00:42:52,610 --> 00:43:01,090
make sure that we run on iOS properly

00:42:57,970 --> 00:43:03,650
and let's see

00:43:01,090 --> 00:43:09,110
this was working as you saw the screen

00:43:03,650 --> 00:43:14,240
did show the previous values so we'll

00:43:09,110 --> 00:43:15,500
see if it works okay and if it does I'm

00:43:14,240 --> 00:43:18,200
not quite sure why because the web app

00:43:15,500 --> 00:43:21,170
is working and I tested it right before

00:43:18,200 --> 00:43:26,030
a connected the screen Oh looks like

00:43:21,170 --> 00:43:26,990
that maybe in network connection yeah

00:43:26,030 --> 00:43:30,050
that's what happens when you tap away

00:43:26,990 --> 00:43:32,600
yeah okay so while that's maybe low and

00:43:30,050 --> 00:43:34,340
going to load up or not I have five

00:43:32,600 --> 00:43:35,450
minutes so if you have any questions or

00:43:34,340 --> 00:43:36,440
comments would love to kind of

00:43:35,450 --> 00:43:37,610
interactively just take care of them

00:43:36,440 --> 00:43:39,050
maybe there's something I can show you

00:43:37,610 --> 00:43:43,550
in the code or anything like that

00:43:39,050 --> 00:43:45,740
oh my god it worked yes yes okay so

00:43:43,550 --> 00:43:48,050
normally what you do now is you would

00:43:45,740 --> 00:43:49,790
actually get the UI programmer to come

00:43:48,050 --> 00:43:52,670
in and purify it right and and we've got

00:43:49,790 --> 00:43:55,490
a bunch of examples in this free project

00:43:52,670 --> 00:43:57,620
that I will put on my screen in a second

00:43:55,490 --> 00:44:00,500
where we show you exactly how to do that

00:43:57,620 --> 00:44:02,150
we've got tons of examples of everything

00:44:00,500 --> 00:44:04,700
that you can do and pretty much

00:44:02,150 --> 00:44:07,340
everything you can do on a native iOS

00:44:04,700 --> 00:44:11,020
app everything from search from drawing

00:44:07,340 --> 00:44:14,270
buttons to geo geo location etc etc

00:44:11,020 --> 00:44:15,350
those all those things we were most of

00:44:14,270 --> 00:44:17,300
those things we've written facades for

00:44:15,350 --> 00:44:19,730
and so you can get access to them of

00:44:17,300 --> 00:44:21,680
course please hire a real UI engineer to

00:44:19,730 --> 00:44:25,670
to do a better job than I'm doing

00:44:21,680 --> 00:44:27,560
internal here so so while you guys are

00:44:25,670 --> 00:44:31,280
getting ready for the storm of questions

00:44:27,560 --> 00:44:34,550
that I'm about to receive I will go

00:44:31,280 --> 00:44:37,910
ahead and put up a few links so this is

00:44:34,550 --> 00:44:41,150
the organization for scallops SR ice 3s

00:44:37,910 --> 00:44:42,650
ecology has react interface and you know

00:44:41,150 --> 00:44:48,800
you can see like I was quoting even last

00:44:42,650 --> 00:44:52,730
night so and ER before that and so we

00:44:48,800 --> 00:44:56,720
also have a gator channel where you can

00:44:52,730 --> 00:44:59,360
hop on in and ask questions or if you

00:44:56,720 --> 00:45:01,370
want to contribute to this please we're

00:44:59,360 --> 00:45:03,800
looking for contributors and committers

00:45:01,370 --> 00:45:05,660
were very open minded about giving

00:45:03,800 --> 00:45:07,460
committer rights to folks who wanted to

00:45:05,660 --> 00:45:11,390
contribute and

00:45:07,460 --> 00:45:13,730
and so on so the so that's that the

00:45:11,390 --> 00:45:14,839
prismo project itself again there is a

00:45:13,730 --> 00:45:16,220
company behind it which I really like

00:45:14,839 --> 00:45:19,160
because I know this can be around for a

00:45:16,220 --> 00:45:22,160
while but the project itself is is open

00:45:19,160 --> 00:45:23,660
source totally open source and it's it

00:45:22,160 --> 00:45:26,299
and they're very responsive they have a

00:45:23,660 --> 00:45:28,730
slack channel it's constantly busy and

00:45:26,299 --> 00:45:31,880
there's some real cool stuff going on

00:45:28,730 --> 00:45:36,920
there and then of course there is in

00:45:31,880 --> 00:45:39,650
this demo we looked at react native and

00:45:36,920 --> 00:45:41,059
then react native is something we're

00:45:39,650 --> 00:45:43,779
trying to hide as much as possible in

00:45:41,059 --> 00:45:45,980
the free project as much as possible

00:45:43,779 --> 00:45:49,009
from the JavaScript point of view and

00:45:45,980 --> 00:45:52,670
expose kind of nice structured type safe

00:45:49,009 --> 00:45:53,930
interfaces for it in well I shouldn't

00:45:52,670 --> 00:45:55,940
say we're trying to hide it we're trying

00:45:53,930 --> 00:45:57,200
to hide the JavaScript part of it the

00:45:55,940 --> 00:45:59,240
recognizer interface actually pretty

00:45:57,200 --> 00:46:01,039
neat with keeping most of it but it's

00:45:59,240 --> 00:46:03,289
the JavaScript Ness of it that has to

00:46:01,039 --> 00:46:05,240
that gets in the way so we were hiding

00:46:03,289 --> 00:46:10,579
that as much as possible I've already

00:46:05,240 --> 00:46:13,789
told you about the graph QL you know

00:46:10,579 --> 00:46:16,400
story here graph Georg take a look at it

00:46:13,789 --> 00:46:19,130
it's got really really nice examples and

00:46:16,400 --> 00:46:22,430
and so on so those are the technologies

00:46:19,130 --> 00:46:23,989
that I used for the demo today last

00:46:22,430 --> 00:46:28,039
comments or thoughts I got a couple

00:46:23,989 --> 00:46:29,869
minutes the question is does it connect

00:46:28,039 --> 00:46:34,160
to no sequel databases so Prisma right

00:46:29,869 --> 00:46:36,890
now which is this like the point of

00:46:34,160 --> 00:46:39,109
Prisma is to just make it really easy to

00:46:36,890 --> 00:46:42,170
manage the lifecycle and evolutions of

00:46:39,109 --> 00:46:43,400
your schema against a database right so

00:46:42,170 --> 00:46:45,529
that's what it's doing it doesn't it on

00:46:43,400 --> 00:46:47,329
it's only supporting my sequel and

00:46:45,529 --> 00:46:50,660
Postgres right now but they're gonna add

00:46:47,329 --> 00:46:52,609
more but like for example in the

00:46:50,660 --> 00:46:56,119
production app that i'm working on i for

00:46:52,609 --> 00:46:58,519
part of my schema i store that in my

00:46:56,119 --> 00:47:01,160
sequel right things the usual counts you

00:46:58,519 --> 00:47:04,460
know some results etc right and then I

00:47:01,160 --> 00:47:06,769
have if you recall this layer in the

00:47:04,460 --> 00:47:08,059
middle the graph cueball server where i

00:47:06,769 --> 00:47:09,380
actually take part of the schema and

00:47:08,059 --> 00:47:11,210
then send it elsewhere and there's a

00:47:09,380 --> 00:47:12,440
bunch of other logic that's not just

00:47:11,210 --> 00:47:14,420
structured data

00:47:12,440 --> 00:47:16,309
it's like unstructured data or assert or

00:47:14,420 --> 00:47:18,440
search through something like a key

00:47:16,309 --> 00:47:18,920
value store right that is not going to

00:47:18,440 --> 00:47:21,529
fit in

00:47:18,920 --> 00:47:23,660
even the paradigm of what Prisma is

00:47:21,529 --> 00:47:25,160
doing I just I just carve that out and

00:47:23,660 --> 00:47:26,960
send it where I need to send it like so

00:47:25,160 --> 00:47:28,660
for example file uploads are going to s3

00:47:26,960 --> 00:47:31,369
but they're going through graph QL

00:47:28,660 --> 00:47:33,230
interface but the OP file upload is

00:47:31,369 --> 00:47:34,730
actually going through s3 and then

00:47:33,230 --> 00:47:36,440
triggering something else which is

00:47:34,730 --> 00:47:38,029
populating is you're doing analysis and

00:47:36,440 --> 00:47:39,950
then putting that back into my sequel

00:47:38,029 --> 00:47:42,710
and then subscriptions trigger and the

00:47:39,950 --> 00:47:44,510
user interface updates right so this is

00:47:42,710 --> 00:47:46,190
very very nice kind of round-trip for

00:47:44,510 --> 00:47:47,690
that all right thank you so much

00:47:46,190 --> 00:47:49,900
appreciate it I'm here and if you want

00:47:47,690 --> 00:47:49,900
to talk

00:47:50,310 --> 00:47:53,230

YouTube URL: https://www.youtube.com/watch?v=qz4ui42yBJ4


