Title: State of the Scala 2 Union by Adriaan Moors
Publication date: 2018-09-21
Playlist: Scala Days New York 2018
Description: 
	This video was recorded at Scala Days New York 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://na.scaladays.org/schedule/state-of-the-scala-2-union
Captions: 
	00:00:03,570 --> 00:00:10,710
so I work for for light Bend they have

00:00:07,069 --> 00:00:13,639
for the last six years almost before

00:00:10,710 --> 00:00:16,590
that I worked on Scala in academia

00:00:13,639 --> 00:00:19,800
started about in 2007 with with higher

00:00:16,590 --> 00:00:24,390
kinda types and have been paying a price

00:00:19,800 --> 00:00:26,880
for adding DOS ever since you shouldn't

00:00:24,390 --> 00:00:30,360
laugh that hard so I'm just getting just

00:00:26,880 --> 00:00:33,570
getting started so yeah I leave I lead

00:00:30,360 --> 00:00:36,600
the team I bent that does you know the

00:00:33,570 --> 00:00:38,820
the core scholar work and we're

00:00:36,600 --> 00:00:41,430
outnumbered by all you all out there

00:00:38,820 --> 00:00:43,760
doing magnificent work in an open source

00:00:41,430 --> 00:00:47,190
so thank you very much for that already

00:00:43,760 --> 00:00:50,070
the the slides are online there's a few

00:00:47,190 --> 00:00:52,829
links here and there you can find them

00:00:50,070 --> 00:00:59,270
there so you know what keeps us busy

00:00:52,829 --> 00:01:02,100
right now obviously is scallop 213 and

00:00:59,270 --> 00:01:04,710
oops sorry it's also the end of the

00:01:02,100 --> 00:01:05,250
conference for me before we get there

00:01:04,710 --> 00:01:07,530
though

00:01:05,250 --> 00:01:10,350
I just want to plug our developer survey

00:01:07,530 --> 00:01:11,970
there's over 2,000 responses in there

00:01:10,350 --> 00:01:15,840
already so we're getting on like Big

00:01:11,970 --> 00:01:19,530
Data territory at least as far as I

00:01:15,840 --> 00:01:21,299
understand that stuff please add some

00:01:19,530 --> 00:01:23,220
more please you know tweet about it

00:01:21,299 --> 00:01:25,290
encourage your friends and colleagues we

00:01:23,220 --> 00:01:26,940
really would like the broadest sample we

00:01:25,290 --> 00:01:28,320
can possibly get I know like I'm you

00:01:26,940 --> 00:01:30,479
know talking to somewhat biased people

00:01:28,320 --> 00:01:31,860
here about you know and their opinions

00:01:30,479 --> 00:01:34,740
about Scala but we really like to hear

00:01:31,860 --> 00:01:36,210
from you so there's a scholar Lang post

00:01:34,740 --> 00:01:39,020
about that with a link to the actual

00:01:36,210 --> 00:01:41,040
survey and you know highly appreciate

00:01:39,020 --> 00:01:42,570
advert any advertising you feel

00:01:41,040 --> 00:01:45,770
comfortable doing about that or you know

00:01:42,570 --> 00:01:48,299
actually taking the survey is great to

00:01:45,770 --> 00:01:50,939
the other admin thing to get out of the

00:01:48,299 --> 00:01:54,450
way is that we're changing to the Apache

00:01:50,939 --> 00:01:56,340
v2 license if you have any concerns

00:01:54,450 --> 00:01:58,560
about that let us know we can tell me

00:01:56,340 --> 00:02:00,299
right now oh yeah you can actually like

00:01:58,560 --> 00:02:02,540
you know you know if you want to just

00:02:00,299 --> 00:02:05,700
yell during a talk where it's a pretty

00:02:02,540 --> 00:02:07,380
as far as I can tell with the lights you

00:02:05,700 --> 00:02:09,720
know we're all friends here so if you

00:02:07,380 --> 00:02:11,639
have any concerns can yell em out now or

00:02:09,720 --> 00:02:13,849
later during the questions or at the

00:02:11,639 --> 00:02:16,590
panel or send us an email

00:02:13,849 --> 00:02:17,430
so perhaps you knew already that we

00:02:16,590 --> 00:02:19,290
alternate

00:02:17,430 --> 00:02:20,849
library and compiler releases that's

00:02:19,290 --> 00:02:22,980
something that we've been doing over the

00:02:20,849 --> 00:02:26,459
last couple years to you know

00:02:22,980 --> 00:02:28,260
mitigate the upgrade pain or try to at

00:02:26,459 --> 00:02:30,989
least only change one core component at

00:02:28,260 --> 00:02:32,700
a time so 213 is all about the library

00:02:30,989 --> 00:02:36,000
and specifically about the collections

00:02:32,700 --> 00:02:37,680
I'm forward it has you know the

00:02:36,000 --> 00:02:42,389
collections the new collections in there

00:02:37,680 --> 00:02:44,159
is out go try it if anything I have no

00:02:42,389 --> 00:02:46,769
problem with you going into SBT right

00:02:44,159 --> 00:02:47,939
now and work on your project I'll let

00:02:46,769 --> 00:02:49,950
you know when two interesting bits of

00:02:47,939 --> 00:02:51,450
the talk are so you can you know briefly

00:02:49,950 --> 00:02:55,319
pay attention

00:02:51,450 --> 00:02:57,870
m5 will be the last milestone we we

00:02:55,319 --> 00:02:59,099
added one because we really wanted to

00:02:57,870 --> 00:03:01,049
make sure that there's enough time to

00:02:59,099 --> 00:03:04,019
upgrade the ecosystem and not doing not

00:03:01,049 --> 00:03:06,239
do that during the RC cycle that's going

00:03:04,019 --> 00:03:10,079
really well so I think we're really

00:03:06,239 --> 00:03:11,609
tracking very well to get to m5 and then

00:03:10,079 --> 00:03:14,189
the final would be like September

00:03:11,609 --> 00:03:16,019
October time frame there's a ticket

00:03:14,189 --> 00:03:21,030
there where you can track more about

00:03:16,019 --> 00:03:24,329
this you know and and the rest of the

00:03:21,030 --> 00:03:26,040
the 213 other stuff that we're doing is

00:03:24,329 --> 00:03:28,260
in general trying to you know make the

00:03:26,040 --> 00:03:34,409
core library smaller I make the compiler

00:03:28,260 --> 00:03:36,629
faster I don't know if we keep some how

00:03:34,409 --> 00:03:38,609
people keep asking us about that there

00:03:36,629 --> 00:03:40,019
will be some Java 9 support and in the

00:03:38,609 --> 00:03:42,239
sense that you know the compiler will

00:03:40,019 --> 00:03:45,239
will run on Java 9 your code will run on

00:03:42,239 --> 00:03:47,310
Java 9 but we're kind of still playing a

00:03:45,239 --> 00:03:48,989
bit of a wait and seek with with where

00:03:47,310 --> 00:03:50,280
Java 9 is going and I'm actually very

00:03:48,989 --> 00:03:52,829
curious to hear about your thoughts

00:03:50,280 --> 00:03:54,859
about that later and as always we're

00:03:52,829 --> 00:03:58,590
very keen to improve error messages or

00:03:54,859 --> 00:04:03,479
anything around your scala experience

00:03:58,590 --> 00:04:05,099
that makes it nicer so the main goal of

00:04:03,479 --> 00:04:06,419
the collections was basically it had

00:04:05,099 --> 00:04:11,370
been long enough that we wanted to do

00:04:06,419 --> 00:04:13,579
another rewrite well just kidding sorry

00:04:11,370 --> 00:04:16,500
no it's been a long day

00:04:13,579 --> 00:04:18,509
it was mostly to deal with a lot of the

00:04:16,500 --> 00:04:19,739
common gotchas that people have been

00:04:18,509 --> 00:04:21,479
bitten by over the years with the new

00:04:19,739 --> 00:04:23,699
collection design like can build from

00:04:21,479 --> 00:04:27,150
and the surprising signature is that

00:04:23,699 --> 00:04:28,289
that you know that requires and also it

00:04:27,150 --> 00:04:29,460
turned out it was slightly over

00:04:28,289 --> 00:04:31,440
engineered

00:04:29,460 --> 00:04:34,130
internally which made implementation and

00:04:31,440 --> 00:04:36,600
maintenance pretty hard on the inside

00:04:34,130 --> 00:04:39,870
one of the key things we did in 212 to

00:04:36,600 --> 00:04:41,610
make that possible was to to improve

00:04:39,870 --> 00:04:44,430
type inference a little bit with

00:04:41,610 --> 00:04:47,550
overloaded higher order methods turns

00:04:44,430 --> 00:04:48,510
out that also helps for to get spark to

00:04:47,550 --> 00:04:50,790
upgrade to 212

00:04:48,510 --> 00:04:53,360
while there are other issues there but

00:04:50,790 --> 00:04:57,270
at least one of them is addressed

00:04:53,360 --> 00:05:00,300
already in 212 and you know like I said

00:04:57,270 --> 00:05:03,510
they're available now the ticket that

00:05:00,300 --> 00:05:07,560
Seth is you know coordinating he's

00:05:03,510 --> 00:05:10,410
sitting right there in the front row is

00:05:07,560 --> 00:05:15,350
number 710 and a community build who

00:05:10,410 --> 00:05:19,770
knows what the community build is okay

00:05:15,350 --> 00:05:22,800
that's about 100 percent as well so we

00:05:19,770 --> 00:05:26,610
basically have this this mono repo in a

00:05:22,800 --> 00:05:30,690
sense that slurps in what is it about

00:05:26,610 --> 00:05:33,450
100 something 170 open-source projects

00:05:30,690 --> 00:05:36,570
mostly libraries a few applications and

00:05:33,450 --> 00:05:38,220
rewires all their SBT builds together to

00:05:36,570 --> 00:05:40,110
pretend they're all in a mono repo and

00:05:38,220 --> 00:05:41,340
then we test the compiler on that and we

00:05:40,110 --> 00:05:43,080
make sure that we don't regress on

00:05:41,340 --> 00:05:45,120
anybody's you know compiling your code

00:05:43,080 --> 00:05:46,410
or running test suite and so on so that

00:05:45,120 --> 00:05:49,890
takes about what eight hours these days

00:05:46,410 --> 00:05:51,510
to run 13 hours okay you can tell I'm

00:05:49,890 --> 00:05:53,760
the manager and behind no or like you

00:05:51,510 --> 00:05:56,910
know the daily stuff and you know it's

00:05:53,760 --> 00:05:59,820
it's over a million lines of code and so

00:05:56,910 --> 00:06:03,180
it's a great way to two to two million

00:05:59,820 --> 00:06:08,580
while over a million I said would you

00:06:03,180 --> 00:06:10,340
want to do two talking just Mike like

00:06:08,580 --> 00:06:12,420
this guy up please

00:06:10,340 --> 00:06:13,470
anyway so the community build is

00:06:12,420 --> 00:06:15,210
something that has really boosted our

00:06:13,470 --> 00:06:17,610
confidence to make changes like you know

00:06:15,210 --> 00:06:22,230
that the the type inference stuff that I

00:06:17,610 --> 00:06:24,420
did for for higher order methods and has

00:06:22,230 --> 00:06:25,410
really rallied the community also in

00:06:24,420 --> 00:06:27,060
helping us upgrade to the new

00:06:25,410 --> 00:06:29,760
collections though you know see that

00:06:27,060 --> 00:06:31,740
you're she does on that 18 project

00:06:29,760 --> 00:06:34,410
already I don't know if you can beat

00:06:31,740 --> 00:06:37,110
that but you know you could try and

00:06:34,410 --> 00:06:38,580
we'll be very happy to see you know more

00:06:37,110 --> 00:06:39,870
people helping out with with that

00:06:38,580 --> 00:06:42,350
upgrade but like I said it's actually

00:06:39,870 --> 00:06:43,970
going pretty well so thank you very much

00:06:42,350 --> 00:06:46,670
everybody it's not just him but you know

00:06:43,970 --> 00:06:51,770
it like that's just you know hard to

00:06:46,670 --> 00:06:53,870
beat I mentioned that we're always

00:06:51,770 --> 00:06:56,000
looking to reduce the footprint of the

00:06:53,870 --> 00:06:57,650
core library I mean as a whole disk Isla

00:06:56,000 --> 00:07:00,740
ecosystem should come with battery

00:06:57,650 --> 00:07:02,210
included batteries included but whatever

00:07:00,740 --> 00:07:05,000
we want to promise full compatibility

00:07:02,210 --> 00:07:07,040
for in the standard library we're trying

00:07:05,000 --> 00:07:09,290
to make that smaller so that we can

00:07:07,040 --> 00:07:11,930
eventually get to you know binary

00:07:09,290 --> 00:07:13,550
compatible releases of Scala that means

00:07:11,930 --> 00:07:14,090
this time that we removed the parallel

00:07:13,550 --> 00:07:15,800
collections

00:07:14,090 --> 00:07:18,560
they're in a separate module they're not

00:07:15,800 --> 00:07:22,490
gone but they're no longer part of the

00:07:18,560 --> 00:07:25,490
of the of the standard library that also

00:07:22,490 --> 00:07:26,540
means funnily enough that it compiles a

00:07:25,490 --> 00:07:29,090
little bit faster because the hierarchy

00:07:26,540 --> 00:07:31,460
got a little simpler we fit in the Java

00:07:29,090 --> 00:07:34,460
9 compact 1 or actually that started

00:07:31,460 --> 00:07:35,960
with Java 8 I guess but where we fit in

00:07:34,460 --> 00:07:37,870
the compact 1 profile which really

00:07:35,960 --> 00:07:40,670
reduced the footprint of any Scala

00:07:37,870 --> 00:07:42,740
application you know that you could use

00:07:40,670 --> 00:07:46,130
like the new tools that the Java 9 comes

00:07:42,740 --> 00:07:48,410
with to to generate images of your code

00:07:46,130 --> 00:07:52,160
and so that was a drastic reduction in

00:07:48,410 --> 00:07:53,690
size there and we'd like to carve out

00:07:52,160 --> 00:07:55,760
some more modules to open up the

00:07:53,690 --> 00:07:58,460
ecosystem for stuff like better files to

00:07:55,760 --> 00:08:00,950
take over scaleo because that's not the

00:07:58,460 --> 00:08:02,420
best not the thing that we're most proud

00:08:00,950 --> 00:08:04,820
of I mean a lot of these things

00:08:02,420 --> 00:08:06,050
historically and I feel like and say it

00:08:04,820 --> 00:08:08,000
is because I wrote some of that shady

00:08:06,050 --> 00:08:09,380
code 10 years ago

00:08:08,000 --> 00:08:15,010
you know shouldn't have survived this

00:08:09,380 --> 00:08:15,010
long yet you know that's how it goes

00:08:15,040 --> 00:08:20,870
always working on a faster compiler I'm

00:08:17,960 --> 00:08:22,520
not going to go into that but really

00:08:20,870 --> 00:08:26,960
proud to see the progress that the team

00:08:22,520 --> 00:08:28,400
is making there when it comes to user

00:08:26,960 --> 00:08:31,820
friendliness that that's you know a

00:08:28,400 --> 00:08:33,289
really vague term but it is really

00:08:31,820 --> 00:08:35,870
important even though it was last in my

00:08:33,289 --> 00:08:37,880
bullet list improving tooling is a huge

00:08:35,870 --> 00:08:39,650
part of that and the Scala Center is

00:08:37,880 --> 00:08:42,770
taking a you know the delete' there and

00:08:39,650 --> 00:08:43,969
doing some great work everybody is

00:08:42,770 --> 00:08:45,080
helping with the documentation it's

00:08:43,969 --> 00:08:46,700
great to see all those pull requests

00:08:45,080 --> 00:08:51,050
come in and it's a great way to start

00:08:46,700 --> 00:08:53,270
contributing you know CSS Seth talk for

00:08:51,050 --> 00:08:55,910
for more ideas on if you like to get in

00:08:53,270 --> 00:08:59,540
more involved in creating skaaland and

00:08:55,910 --> 00:09:01,430
we look forward to seeing you there one

00:08:59,540 --> 00:09:05,600
of the example tools that that the

00:09:01,430 --> 00:09:09,770
Scylla Center you know that's about to

00:09:05,600 --> 00:09:11,690
go 1-0 um Scala fix and that's a great

00:09:09,770 --> 00:09:14,240
automated refactoring tool for your

00:09:11,690 --> 00:09:20,630
Scala code base who has tried it Scala

00:09:14,240 --> 00:09:23,150
fakes yeah okay that's a good showing so

00:09:20,630 --> 00:09:25,700
we intend to make more use of that over

00:09:23,150 --> 00:09:26,360
as time goes to to help you with Scala

00:09:25,700 --> 00:09:27,860
upgrades

00:09:26,360 --> 00:09:29,360
it would be if you're a library

00:09:27,860 --> 00:09:31,700
maintainer for example you could

00:09:29,360 --> 00:09:33,710
consider shipping Scylla fix rules to

00:09:31,700 --> 00:09:37,520
deal with API evolution that you'd like

00:09:33,710 --> 00:09:39,710
to do it doesn't just do refactorings it

00:09:37,520 --> 00:09:42,080
can also check style it can do linting

00:09:39,710 --> 00:09:43,910
so one of the things that you know the

00:09:42,080 --> 00:09:46,460
compiler does a lot of but we'd really

00:09:43,910 --> 00:09:48,080
like to see that you know get more into

00:09:46,460 --> 00:09:49,580
a separate tool that can that can evolve

00:09:48,080 --> 00:09:52,610
more quickly than than the compilers

00:09:49,580 --> 00:09:55,100
like 18 to 24 month development cycle

00:09:52,610 --> 00:09:55,520
and it's built on Scala meta which is of

00:09:55,100 --> 00:09:57,920
course

00:09:55,520 --> 00:10:05,080
Eugene borracho and and you know his

00:09:57,920 --> 00:10:07,010
team's work LSB is one of those hip

00:10:05,080 --> 00:10:10,330
abbreviations or acronyms or whatever

00:10:07,010 --> 00:10:12,800
always mix those up things of the

00:10:10,330 --> 00:10:14,660
current times it stands for a language

00:10:12,800 --> 00:10:17,780
server protocol comes from Microsoft

00:10:14,660 --> 00:10:20,000
I guess essentially and and you know

00:10:17,780 --> 00:10:22,280
vyas code is what got Martin away from

00:10:20,000 --> 00:10:25,540
eclipse which got him away from Emacs so

00:10:22,280 --> 00:10:27,680
that's a pretty interesting trajectory

00:10:25,540 --> 00:10:30,140
all this to say that were actually

00:10:27,680 --> 00:10:32,720
really excited about this and that I

00:10:30,140 --> 00:10:34,400
think this is a really nice path to to

00:10:32,720 --> 00:10:38,180
provide you with with really accurate

00:10:34,400 --> 00:10:41,090
and modern IDE tooling for Scala the

00:10:38,180 --> 00:10:42,980
dotty presentation compiler is you know

00:10:41,090 --> 00:10:44,390
has learned from a lot of the lessons

00:10:42,980 --> 00:10:47,200
that we learned in Scala too and is a

00:10:44,390 --> 00:10:49,340
lot faster already in that regard and

00:10:47,200 --> 00:10:51,320
tasty and semantics DB are some of the

00:10:49,340 --> 00:10:52,640
other things that tie into this story

00:10:51,320 --> 00:10:55,460
and we'll talk a little bit more about

00:10:52,640 --> 00:10:58,280
that later once you have one popular

00:10:55,460 --> 00:11:00,050
acronym many more follow very quickly so

00:10:58,280 --> 00:11:02,600
a built server protocol or you know the

00:11:00,050 --> 00:11:05,450
current renaissance of build tools and a

00:11:02,600 --> 00:11:07,940
scholar ecosystem which i watch with you

00:11:05,450 --> 00:11:09,769
know mixed feelings i think it's great

00:11:07,940 --> 00:11:11,149
to have alternatives SBT

00:11:09,769 --> 00:11:13,939
I think there is definitely space for

00:11:11,149 --> 00:11:15,800
that but maybe we don't need like seven

00:11:13,939 --> 00:11:17,629
new ones I guess we're not there yet but

00:11:15,800 --> 00:11:20,989
please don't insert your new bill tool

00:11:17,629 --> 00:11:25,009
in that last bit bullet collaborate with

00:11:20,989 --> 00:11:26,869
some of the existing great ones and of

00:11:25,009 --> 00:11:30,350
course there's a lot of the type level

00:11:26,869 --> 00:11:32,480
stuff that we're really happy to receive

00:11:30,350 --> 00:11:35,899
in the pleura quest queue like liberal

00:11:32,480 --> 00:11:37,790
singleton types that you know I worked

00:11:35,899 --> 00:11:38,839
on years ago and spend a lot of time

00:11:37,790 --> 00:11:40,519
trying to get ready but just couldn't

00:11:38,839 --> 00:11:43,480
get around to anymore and and so really

00:11:40,519 --> 00:11:47,059
happy that you know that got that got

00:11:43,480 --> 00:11:49,429
finished and delivered to the next

00:11:47,059 --> 00:11:52,480
release some really nice improvements at

00:11:49,429 --> 00:11:55,309
miles it's to an implicit search and

00:11:52,480 --> 00:11:58,339
also type construct or inference some

00:11:55,309 --> 00:12:01,459
very nice improvements there to get up

00:11:58,339 --> 00:12:02,809
will tell you you know where we think

00:12:01,459 --> 00:12:05,600
the highest bang for your buck is in

00:12:02,809 --> 00:12:07,790
terms of helping us and contributing or

00:12:05,600 --> 00:12:08,929
starting to contribute something that

00:12:07,790 --> 00:12:11,529
has been on my list if you've been

00:12:08,929 --> 00:12:13,339
looking at my archive of Sly of

00:12:11,529 --> 00:12:14,389
presentations is configurable error

00:12:13,339 --> 00:12:16,279
reporting we think it would be really

00:12:14,389 --> 00:12:18,470
useful to be able to say I only want

00:12:16,279 --> 00:12:20,569
deprecation warnings to be fatal

00:12:18,470 --> 00:12:22,309
we just never seem to get around to it

00:12:20,569 --> 00:12:24,499
so we've done I've done some refactoring

00:12:22,309 --> 00:12:26,540
to make that easier to do but we don't

00:12:24,499 --> 00:12:29,119
really actually have everything in place

00:12:26,540 --> 00:12:30,980
so that would be a really cool thing to

00:12:29,119 --> 00:12:34,429
work on I think like fatal warnings or

00:12:30,980 --> 00:12:35,959
suppress warnings the nicer repple is

00:12:34,429 --> 00:12:37,670
the thing that I currently would really

00:12:35,959 --> 00:12:41,199
really like to see I think there's a lot

00:12:37,670 --> 00:12:43,999
of scope to steal stuff from Emma Knight

00:12:41,199 --> 00:12:45,949
and you know Java has a wrap on now so

00:12:43,999 --> 00:12:52,339
we need to make sure we're we kick their

00:12:45,949 --> 00:12:54,980
asses oh wait is this recorded in the US

00:12:52,339 --> 00:12:56,660
can I get I hope I can't get yeah yeah

00:12:54,980 --> 00:13:01,309
no I mean yes we're one happy family and

00:12:56,660 --> 00:13:02,899
I'm not going to swear again I swear but

00:13:01,309 --> 00:13:04,549
yeah some just some random ideas of what

00:13:02,899 --> 00:13:07,120
you could do if you wanted to work on

00:13:04,549 --> 00:13:08,800
something that has a lot of impact

00:13:07,120 --> 00:13:10,749
and that you know I think has a nice

00:13:08,800 --> 00:13:13,779
cycle of seeing like results you know

00:13:10,749 --> 00:13:15,279
like UI design tends to have and you

00:13:13,779 --> 00:13:17,860
know we really keen to work with the

00:13:15,279 --> 00:13:20,350
spark people to help them embed the the

00:13:17,860 --> 00:13:25,899
repple that always tends to be a

00:13:20,350 --> 00:13:27,850
challenge for them so now that you know

00:13:25,899 --> 00:13:32,050
we're either like really worn you down

00:13:27,850 --> 00:13:33,790
already or I'm warmed up or both I want

00:13:32,050 --> 00:13:35,740
to reiterate some of the points that

00:13:33,790 --> 00:13:37,180
that Martin made and believe it or not

00:13:35,740 --> 00:13:40,480
these slides are kind of written

00:13:37,180 --> 00:13:44,290
independently some of which right before

00:13:40,480 --> 00:13:46,089
to talk and I just kind of want to

00:13:44,290 --> 00:13:48,189
emphasize this point that I think we've

00:13:46,089 --> 00:13:49,569
been we maybe we neglected a little bit

00:13:48,189 --> 00:13:51,519
over the years and that you know Scala

00:13:49,569 --> 00:13:52,660
is really about the fusion of functional

00:13:51,519 --> 00:13:55,839
programming and object-oriented

00:13:52,660 --> 00:13:57,970
programming and that that's really

00:13:55,839 --> 00:13:59,230
something that you know I think is at

00:13:57,970 --> 00:14:02,410
the heart of Scala and at the heart of

00:13:59,230 --> 00:14:04,300
our community and that kind of fusion

00:14:02,410 --> 00:14:07,449
leads to a lot of flexibility a lot of

00:14:04,300 --> 00:14:10,180
power but I think as we've come to

00:14:07,449 --> 00:14:14,259
realize it's also really challenging to

00:14:10,180 --> 00:14:16,600
to tell you how to use it well and for

00:14:14,259 --> 00:14:18,249
everyone to figure out you know what any

00:14:16,600 --> 00:14:21,160
given point in time and every like you

00:14:18,249 --> 00:14:22,959
know given team size or kind of

00:14:21,160 --> 00:14:24,399
application that you're working on you

00:14:22,959 --> 00:14:26,470
know which point in the spectrum of

00:14:24,399 --> 00:14:32,860
Scala you know you should be you should

00:14:26,470 --> 00:14:35,649
be right now and so as we've seen

00:14:32,860 --> 00:14:36,999
earlier this week we really see

00:14:35,649 --> 00:14:40,300
object-oriented programming and

00:14:36,999 --> 00:14:43,720
functional programming as you know a

00:14:40,300 --> 00:14:48,100
whole not some kind of duality or

00:14:43,720 --> 00:14:49,990
something like that and the way I think

00:14:48,100 --> 00:14:52,329
about this is that objects are basically

00:14:49,990 --> 00:14:57,009
big functions and functions are small

00:14:52,329 --> 00:14:59,259
objects and maybe my bias towards oh

00:14:57,009 --> 00:15:03,009
because I mean you still have to have

00:14:59,259 --> 00:15:04,449
you know a favorite kid goes towards

00:15:03,009 --> 00:15:06,730
objects because they subdue and

00:15:04,449 --> 00:15:09,009
technically they do in Scala function is

00:15:06,730 --> 00:15:10,600
just an object right but some of the key

00:15:09,009 --> 00:15:12,639
things that that object have is like you

00:15:10,600 --> 00:15:14,110
know mutually recursive references

00:15:12,639 --> 00:15:15,970
inside an object that a function doesn't

00:15:14,110 --> 00:15:18,670
have and I'm going to talk a little bit

00:15:15,970 --> 00:15:20,680
more about that later

00:15:18,670 --> 00:15:22,720
you know safety and

00:15:20,680 --> 00:15:25,740
being concise they don't have to be at

00:15:22,720 --> 00:15:31,470
odds that used to be and maybe still is

00:15:25,740 --> 00:15:36,640
you know a controversial statement and

00:15:31,470 --> 00:15:38,770
it it's really about finding again the

00:15:36,640 --> 00:15:40,720
right trade-off between how many types

00:15:38,770 --> 00:15:42,880
am I gonna put in there how many you

00:15:40,720 --> 00:15:44,620
know how powerful is my type system to

00:15:42,880 --> 00:15:46,450
get what I want and ultimately what do

00:15:44,620 --> 00:15:49,000
we want from our type system we want us

00:15:46,450 --> 00:15:51,430
to keep us from making mistakes are easy

00:15:49,000 --> 00:15:53,050
to prevent right that's a very least we

00:15:51,430 --> 00:15:55,450
wanted to help us understand our code

00:15:53,050 --> 00:15:57,700
maybe not us right now

00:15:55,450 --> 00:16:01,540
maybe us in the future maybe someone

00:15:57,700 --> 00:16:04,060
else now we're in the future and in

00:16:01,540 --> 00:16:05,830
order to really make you productive with

00:16:04,060 --> 00:16:08,520
that I think type inference is a crucial

00:16:05,830 --> 00:16:10,870
thing to also have in your language

00:16:08,520 --> 00:16:13,060
because some things are just details

00:16:10,870 --> 00:16:14,589
some things aren't you know improving

00:16:13,060 --> 00:16:17,470
your understanding you're just obscuring

00:16:14,589 --> 00:16:20,350
it or they're liabilities when it comes

00:16:17,470 --> 00:16:22,209
time to refactor your code and so using

00:16:20,350 --> 00:16:23,980
that trade-off tastefully but at least

00:16:22,209 --> 00:16:26,470
having access to that do that trade-off

00:16:23,980 --> 00:16:29,980
I think is really helpful and especially

00:16:26,470 --> 00:16:31,330
in a more functional style code when you

00:16:29,980 --> 00:16:33,220
have a lot of Combinator's working

00:16:31,330 --> 00:16:39,220
together it's great that these things

00:16:33,220 --> 00:16:40,660
are just inferred I think things like

00:16:39,220 --> 00:16:44,140
this that tend to get people really

00:16:40,660 --> 00:16:47,529
excited you know is your code pure

00:16:44,140 --> 00:16:50,980
there's an impure you know is it strict

00:16:47,529 --> 00:16:52,540
or lazy and it's interesting that pure

00:16:50,980 --> 00:16:54,430
and lazy are kind of the positive things

00:16:52,540 --> 00:16:56,860
here and strict and impure are the bad

00:16:54,430 --> 00:16:59,950
things it's really not about you know

00:16:56,860 --> 00:17:01,900
should you be in one on once in one camp

00:16:59,950 --> 00:17:05,260
or the other it's where are you should

00:17:01,900 --> 00:17:07,600
you be using those you know tools in

00:17:05,260 --> 00:17:09,189
your tool belt sometimes it's really

00:17:07,600 --> 00:17:11,350
important to be able to reason about a

00:17:09,189 --> 00:17:13,030
part of your code and it really should

00:17:11,350 --> 00:17:15,880
be pure sometimes it's just clearer

00:17:13,030 --> 00:17:17,470
sometimes it needs to be fast you know

00:17:15,880 --> 00:17:21,040
laziness for example it's not a panacea

00:17:17,470 --> 00:17:22,569
and purity certainly isn't either it can

00:17:21,040 --> 00:17:24,520
be really hard to understand code that

00:17:22,569 --> 00:17:27,880
you know when you step on one lazy thing

00:17:24,520 --> 00:17:30,940
that triggers some computation at a

00:17:27,880 --> 00:17:33,040
distance somewhere so these are all more

00:17:30,940 --> 00:17:35,020
or less available to you in Scala and

00:17:33,040 --> 00:17:37,950
the interesting challenge here is to

00:17:35,020 --> 00:17:39,850
figure out how and where to use them

00:17:37,950 --> 00:17:42,220
people that will tell you to use only

00:17:39,850 --> 00:17:45,760
one of them are not telling you the

00:17:42,220 --> 00:17:48,700
whole story so this is kind of you know

00:17:45,760 --> 00:17:50,590
that the really did the summary of all

00:17:48,700 --> 00:17:53,320
this is like there's a spectrum out

00:17:50,590 --> 00:17:55,060
there that we offer to you and I think

00:17:53,320 --> 00:17:56,980
over the years maybe the spectrum has

00:17:55,060 --> 00:18:00,370
gotten a little too broad and it's time

00:17:56,980 --> 00:18:02,890
to be a little bit more opinionated

00:18:00,370 --> 00:18:04,270
about this but there's always going to

00:18:02,890 --> 00:18:09,010
be a spectrum like this and that's

00:18:04,270 --> 00:18:10,870
really what Scala is about and this is

00:18:09,010 --> 00:18:12,010
kind of where I was in academia like a

00:18:10,870 --> 00:18:14,350
type checker was considered a

00:18:12,010 --> 00:18:16,170
lightweight verifier with you know

00:18:14,350 --> 00:18:19,300
really emphasis on light weight

00:18:16,170 --> 00:18:21,850
sometimes it's fine to use any sometimes

00:18:19,300 --> 00:18:23,950
it's fine to cast you have to always be

00:18:21,850 --> 00:18:26,410
thinking about in my opinion to

00:18:23,950 --> 00:18:28,270
trade-off between how expensive it is is

00:18:26,410 --> 00:18:30,700
it is this thing fails at runtime

00:18:28,270 --> 00:18:32,890
and how expensive is it to actually

00:18:30,700 --> 00:18:36,040
satisfy the verifier like how hard is it

00:18:32,890 --> 00:18:38,440
for me to maintain all this type

00:18:36,040 --> 00:18:40,780
gymnastics you know hard is it going to

00:18:38,440 --> 00:18:43,630
be for a new person on my team to get

00:18:40,780 --> 00:18:46,300
into this and and to you know to to push

00:18:43,630 --> 00:18:47,800
this code forward to get whatever needs

00:18:46,300 --> 00:18:49,900
to be done to get that done and

00:18:47,800 --> 00:18:51,250
correctness is great don't get me wrong

00:18:49,900 --> 00:18:53,740
I'm not against correctness you know I

00:18:51,250 --> 00:18:55,060
got started with Scala by working on its

00:18:53,740 --> 00:18:58,660
type system and that's still my favorite

00:18:55,060 --> 00:19:02,230
part but use it for really you know

00:18:58,660 --> 00:19:04,180
where you need it and you know Kelly did

00:19:02,230 --> 00:19:06,610
a great talk a while ago about you know

00:19:04,180 --> 00:19:07,990
why do free monnet isn't free and think

00:19:06,610 --> 00:19:10,420
about the cost of the abstractions that

00:19:07,990 --> 00:19:13,360
you're using both at runtime and a

00:19:10,420 --> 00:19:17,650
development time they do have a cost and

00:19:13,360 --> 00:19:22,780
so maybe you know maybe this can be like

00:19:17,650 --> 00:19:24,400
a new EDD abbreviation I think you know

00:19:22,780 --> 00:19:27,480
empathy driven development is something

00:19:24,400 --> 00:19:30,250
that I want to pitch as like the the

00:19:27,480 --> 00:19:31,990
there's a counterpoint to focusing too

00:19:30,250 --> 00:19:34,300
much on that math is great to see

00:19:31,990 --> 00:19:35,950
patterns math is great to help you in

00:19:34,300 --> 00:19:38,260
your understanding and reasoning about

00:19:35,950 --> 00:19:40,780
your code not saying math is bad I love

00:19:38,260 --> 00:19:43,420
math I spend a lot of time in grad

00:19:40,780 --> 00:19:45,070
school doing math but you know it won't

00:19:43,420 --> 00:19:46,230
help you come up with good names for

00:19:45,070 --> 00:19:48,480
your variables

00:19:46,230 --> 00:19:50,100
it won't help you come up with like the

00:19:48,480 --> 00:19:52,260
right structure for your decomposition

00:19:50,100 --> 00:19:53,640
for your architecture it doesn't care

00:19:52,260 --> 00:19:56,010
about that stuff that's not what math is

00:19:53,640 --> 00:19:57,960
about you need to be able to communicate

00:19:56,010 --> 00:20:00,600
the intent to yourself and to your team

00:19:57,960 --> 00:20:02,490
and you know not just in coding but in

00:20:00,600 --> 00:20:04,110
general you know it's not about what you

00:20:02,490 --> 00:20:05,550
want to say it's about what you what you

00:20:04,110 --> 00:20:08,550
hope that the other person is going to

00:20:05,550 --> 00:20:11,010
understand right and and I think that's

00:20:08,550 --> 00:20:15,360
you know very applicable both to to our

00:20:11,010 --> 00:20:16,800
coding and our community so I really

00:20:15,360 --> 00:20:18,960
don't think this is really an opposition

00:20:16,800 --> 00:20:20,550
I use maybe the wrong symbol here but I

00:20:18,960 --> 00:20:23,610
want to emphasize that you know when you

00:20:20,550 --> 00:20:25,680
think about mathematicians and you know

00:20:23,610 --> 00:20:27,090
they're naming conventions that's not

00:20:25,680 --> 00:20:29,040
something that math you know should

00:20:27,090 --> 00:20:30,120
should really teach you about what what

00:20:29,040 --> 00:20:32,070
to do with programming there's lots of

00:20:30,120 --> 00:20:35,570
other things that they can that it can

00:20:32,070 --> 00:20:37,830
tell you but that's not one of them and

00:20:35,570 --> 00:20:40,410
that's for example where things like

00:20:37,830 --> 00:20:41,880
modules that are really driven by what

00:20:40,410 --> 00:20:43,380
we need in programming what we need in

00:20:41,880 --> 00:20:45,660
design we really need mutual recursion

00:20:43,380 --> 00:20:47,370
where names matter where the name of the

00:20:45,660 --> 00:20:48,590
class and the name of all the fields in

00:20:47,370 --> 00:20:50,850
the class matter

00:20:48,590 --> 00:20:52,590
there was nothing in math that will tell

00:20:50,850 --> 00:20:54,210
you about that and if you you said

00:20:52,590 --> 00:20:56,100
everything is a function you don't get

00:20:54,210 --> 00:20:57,690
mutual recursion you don't get you know

00:20:56,100 --> 00:20:59,340
thinking about nominal types you don't

00:20:57,690 --> 00:21:01,770
get about conveying the intent

00:20:59,340 --> 00:21:03,660
neither of the class or the type or the

00:21:01,770 --> 00:21:07,370
fields of that class or that type so

00:21:03,660 --> 00:21:07,370
there's there's more to it than that

00:21:08,390 --> 00:21:12,810
that said you know we always want to be

00:21:11,070 --> 00:21:14,730
doing better with the kind of

00:21:12,810 --> 00:21:17,130
verification that the Scala type checker

00:21:14,730 --> 00:21:19,530
will let you do and as soon as we figure

00:21:17,130 --> 00:21:21,960
out how to do this pragmatically and and

00:21:19,530 --> 00:21:24,450
in a lightweight way I'll be super

00:21:21,960 --> 00:21:27,810
excited to add this to to a scholar

00:21:24,450 --> 00:21:31,980
release so like I said to sum this you

00:21:27,810 --> 00:21:33,570
know kind of rant up we will be becoming

00:21:31,980 --> 00:21:34,710
more opinionated in 3-0 and I think

00:21:33,570 --> 00:21:37,560
that's really the right thing to do for

00:21:34,710 --> 00:21:39,030
scholar right now but the essential

00:21:37,560 --> 00:21:41,900
flexibility that makes up scale that

00:21:39,030 --> 00:21:44,130
fusion that will of course never go away

00:21:41,900 --> 00:21:46,230
all right back back to the main topic

00:21:44,130 --> 00:21:47,970
what's next for us what are we gonna

00:21:46,230 --> 00:21:52,770
start working on let's say early next

00:21:47,970 --> 00:21:55,200
year once to thirteen one is out close

00:21:52,770 --> 00:21:56,460
the gap to Scala three is not a new

00:21:55,200 --> 00:21:59,100
concern for us this is something that

00:21:56,460 --> 00:22:00,059
we've been working on since 212 when the

00:21:59,100 --> 00:22:01,950
trade encoding

00:22:00,059 --> 00:22:03,599
encoding the way that fields are

00:22:01,950 --> 00:22:05,580
represented internally have all been

00:22:03,599 --> 00:22:07,049
aligned with the way that Dottie was

00:22:05,580 --> 00:22:09,450
doing it back then and you know we went

00:22:07,049 --> 00:22:12,779
back and forth between the two teams on

00:22:09,450 --> 00:22:15,799
how to really do an efficient excuse me

00:22:12,779 --> 00:22:20,969
an efficient trade encoding for example

00:22:15,799 --> 00:22:22,679
in 213 the des standard libraries were

00:22:20,969 --> 00:22:25,169
you know the standard library changes

00:22:22,679 --> 00:22:27,059
that we did in 213 sorry were also with

00:22:25,169 --> 00:22:28,979
an eye towards what we want for Scala 3

00:22:27,059 --> 00:22:30,830
and so that's a gap that's a part of the

00:22:28,979 --> 00:22:35,729
gap that we closed before we get to the

00:22:30,830 --> 00:22:36,839
2:14 3-0 jump and since if you've been

00:22:35,729 --> 00:22:38,729
paying attention this has to be a

00:22:36,839 --> 00:22:41,969
compiler release we're gonna be focusing

00:22:38,729 --> 00:22:43,919
on the compiler and 214 the big buzzword

00:22:41,969 --> 00:22:46,649
here is tasty and there's a lot of

00:22:43,919 --> 00:22:50,359
interesting things that that we can do

00:22:46,649 --> 00:22:53,190
with that and from my perspective

00:22:50,359 --> 00:22:55,049
migrating our code bases and and you

00:22:53,190 --> 00:22:56,669
know having to maintain potentially the

00:22:55,049 --> 00:22:58,859
doggy compiler and the Scala compiler in

00:22:56,669 --> 00:23:01,200
the future it's pretty scary so I want

00:22:58,859 --> 00:23:03,509
to you know have as little duplicated

00:23:01,200 --> 00:23:05,940
code between two as possible and four to

00:23:03,509 --> 00:23:07,529
14 our goal is to essentially take that

00:23:05,940 --> 00:23:08,700
zipper that is already like you know

00:23:07,529 --> 00:23:10,679
they're already joint at the way that

00:23:08,700 --> 00:23:12,599
they emit bytecode but we want to pull

00:23:10,679 --> 00:23:15,989
that all the way as close as possible to

00:23:12,599 --> 00:23:18,089
the type checker as possible and that

00:23:15,989 --> 00:23:21,619
will help also with sharing tooling and

00:23:18,089 --> 00:23:24,059
providing interact between scale 2 and 3

00:23:21,619 --> 00:23:24,509
so in case you haven't heard about it

00:23:24,059 --> 00:23:27,869
yet

00:23:24,509 --> 00:23:30,419
taystee the Y is actually kind of silent

00:23:27,869 --> 00:23:32,700
it stands for typed a STS which

00:23:30,419 --> 00:23:34,499
basically just means the Scylla program

00:23:32,700 --> 00:23:37,019
as you type it and then the type ticker

00:23:34,499 --> 00:23:39,119
runs on it and that's sterilized back to

00:23:37,019 --> 00:23:41,909
a disk Allah program that captures all

00:23:39,119 --> 00:23:44,399
that information so it's it's it's a

00:23:41,909 --> 00:23:45,989
high-level semantic representation it's

00:23:44,399 --> 00:23:47,460
not like some kind of intermediate

00:23:45,989 --> 00:23:49,289
representation that would be good to

00:23:47,460 --> 00:23:50,609
admit machine code from it's really

00:23:49,289 --> 00:23:52,769
something that tools would be based on

00:23:50,609 --> 00:23:55,109
it's like everything you need to know in

00:23:52,769 --> 00:23:57,299
a pretty sophisticated IDE I mean

00:23:55,109 --> 00:23:58,889
obviously you need more but it renders

00:23:57,299 --> 00:24:01,259
the result of type inference implicit

00:23:58,889 --> 00:24:04,289
search overload resolution all those

00:24:01,259 --> 00:24:05,999
things are captured and tasty and arrays

00:24:04,289 --> 00:24:07,679
in that sense the biggest difference

00:24:05,999 --> 00:24:10,019
between scale two and three once you

00:24:07,679 --> 00:24:11,789
once we have that typed intermediate

00:24:10,019 --> 00:24:13,090
representation the difference between

00:24:11,789 --> 00:24:15,340
the two are essentially gone

00:24:13,090 --> 00:24:18,789
that's the goal we're not there yet but

00:24:15,340 --> 00:24:21,220
tasty is you know implementation part of

00:24:18,789 --> 00:24:23,350
dotty and we're working now to

00:24:21,220 --> 00:24:26,830
generalize this and I should say Gil

00:24:23,350 --> 00:24:29,049
marques is working on that right now to

00:24:26,830 --> 00:24:30,999
bring this to - and - and to come up

00:24:29,049 --> 00:24:32,590
with like a good shared semantic

00:24:30,999 --> 00:24:38,289
representation between that we can both

00:24:32,590 --> 00:24:39,639
that we can all use often when people

00:24:38,289 --> 00:24:42,399
talk about tasty - talk about binary

00:24:39,639 --> 00:24:44,470
compatibility and I think for me there's

00:24:42,399 --> 00:24:48,309
often - conflated concerns here one is

00:24:44,470 --> 00:24:51,129
people want to evolve api's and we will

00:24:48,309 --> 00:24:52,360
always keep keep evolving api's okay we

00:24:51,129 --> 00:24:53,590
might get a little bit more careful and

00:24:52,360 --> 00:24:55,720
maybe we'll only do like backwards

00:24:53,590 --> 00:24:58,179
compatible changes right now we're like

00:24:55,720 --> 00:25:00,460
completely essentially frozen modulo

00:24:58,179 --> 00:25:02,019
deprecation that's not what tasty is

00:25:00,460 --> 00:25:04,960
about tasty is never going to help you

00:25:02,019 --> 00:25:07,059
change api's and like a semantic way

00:25:04,960 --> 00:25:08,889
tasty is about removing the distinction

00:25:07,059 --> 00:25:11,980
between source compatibility concerns

00:25:08,889 --> 00:25:13,330
and binary compatibility concerns java

00:25:11,980 --> 00:25:14,710
programmers already have the luxury of

00:25:13,330 --> 00:25:15,940
thinking of binary compatibility

00:25:14,710 --> 00:25:17,590
basically in terms of source

00:25:15,940 --> 00:25:19,720
compatibility if I change something and

00:25:17,590 --> 00:25:21,070
in source there's a direct translation

00:25:19,720 --> 00:25:23,919
to bytecode because that's how the

00:25:21,070 --> 00:25:26,080
platform was conceived because Scala C

00:25:23,919 --> 00:25:28,360
has to do so much magic to compile you

00:25:26,080 --> 00:25:30,009
know fields and traits and super

00:25:28,360 --> 00:25:31,509
accessors and you know our different way

00:25:30,009 --> 00:25:34,450
of doing visibility and all those things

00:25:31,509 --> 00:25:36,249
it's very easy to cause binary

00:25:34,450 --> 00:25:38,740
incompatibilities by making a seemingly

00:25:36,249 --> 00:25:40,899
innocuous change to your source with

00:25:38,740 --> 00:25:41,950
tasty that will be gone because we're

00:25:40,899 --> 00:25:44,799
essentially coming up with our own

00:25:41,950 --> 00:25:46,029
platform that maps directly to what we

00:25:44,799 --> 00:25:49,149
think of as like you know a semantic

00:25:46,029 --> 00:25:51,340
representation of your scala sources so

00:25:49,149 --> 00:25:53,740
that's super exciting obviously but that

00:25:51,340 --> 00:25:55,539
that's not a silver bullet - - you know

00:25:53,740 --> 00:25:58,179
finally let you just change api's at

00:25:55,539 --> 00:26:00,369
will and not have to worry about it

00:25:58,179 --> 00:26:04,659
so I thought it was important to clarify

00:26:00,369 --> 00:26:07,749
that so this is going to be a huge task

00:26:04,659 --> 00:26:10,389
in 2:14 and that will likely mean that

00:26:07,749 --> 00:26:12,279
2:14 is going to be more like a longer

00:26:10,389 --> 00:26:14,249
release cycle like 24 months or

00:26:12,279 --> 00:26:16,749
something like that

00:26:14,249 --> 00:26:18,970
the other big task that I would really

00:26:16,749 --> 00:26:22,240
like to do I mean not really what that

00:26:18,970 --> 00:26:25,240
we will do sorry I'm not talking to my

00:26:22,240 --> 00:26:28,060
manager that we will do

00:26:25,240 --> 00:26:31,150
is drop a few things and then so the de

00:26:28,060 --> 00:26:32,380
milestone here is documents all those if

00:26:31,150 --> 00:26:36,100
you if you'd like to reference them

00:26:32,380 --> 00:26:37,360
later early initializers we talk about

00:26:36,100 --> 00:26:38,830
them all that have you talked about the

00:26:37,360 --> 00:26:41,170
Morden we use them probably but this

00:26:38,830 --> 00:26:43,090
point they're gone and you know we'll

00:26:41,170 --> 00:26:44,590
have trade parameters instead which are

00:26:43,090 --> 00:26:46,510
essentially like the argument list that

00:26:44,590 --> 00:26:48,400
you can add to a class definition but

00:26:46,510 --> 00:26:50,110
not to a trait so that distinction is

00:26:48,400 --> 00:26:51,870
gone and that means you don't need early

00:26:50,110 --> 00:26:53,830
initialize your the principal anymore

00:26:51,870 --> 00:26:56,050
procedure syntax we've also talked about

00:26:53,830 --> 00:26:58,960
planning that's gone should have never

00:26:56,050 --> 00:27:01,120
added that existential type complicated

00:26:58,960 --> 00:27:05,590
existential types will be gone you can

00:27:01,120 --> 00:27:07,540
only use wildcards Valli classes will

00:27:05,590 --> 00:27:08,440
remain there so these are all things

00:27:07,540 --> 00:27:10,750
that are deprecated

00:27:08,440 --> 00:27:13,810
I think opaque types are a much better

00:27:10,750 --> 00:27:17,590
way to do it wide box macros that was

00:27:13,810 --> 00:27:19,480
never a fan and really excited about the

00:27:17,590 --> 00:27:21,550
transparent method stuff or whatever it

00:27:19,480 --> 00:27:22,750
ends up looking like but something that

00:27:21,550 --> 00:27:25,480
lets you express or type level

00:27:22,750 --> 00:27:27,790
computation not in Prolog or not with

00:27:25,480 --> 00:27:29,620
you know complicated compiler trickery

00:27:27,790 --> 00:27:33,220
and your macros but just in a very

00:27:29,620 --> 00:27:35,140
intuitive way absolutely you need some

00:27:33,220 --> 00:27:38,620
form of type level computation you need

00:27:35,140 --> 00:27:39,910
some form of deriving but there have to

00:27:38,620 --> 00:27:42,460
be better ways to do it than what we

00:27:39,910 --> 00:27:45,850
have right now and you know is that all

00:27:42,460 --> 00:27:49,090
that fails code gen you know don't hate

00:27:45,850 --> 00:27:51,940
on it it's not that bad sometimes you

00:27:49,090 --> 00:27:54,250
just have to do it that way but I think

00:27:51,940 --> 00:27:56,230
we will have most cases covered so that

00:27:54,250 --> 00:27:58,020
you don't have to do that package object

00:27:56,230 --> 00:28:00,280
inheritance why do I get rid of that

00:27:58,020 --> 00:28:02,920
well there's lots of reasons but I think

00:28:00,280 --> 00:28:04,150
my favorite one is that whenever you

00:28:02,920 --> 00:28:06,040
have a type and you're looking for

00:28:04,150 --> 00:28:08,170
implicit values of that type the whole

00:28:06,040 --> 00:28:09,790
prefix so all the sub packages in front

00:28:08,170 --> 00:28:12,130
of that type actually contribute

00:28:09,790 --> 00:28:13,630
implicit stew the implicit scope I think

00:28:12,130 --> 00:28:15,100
most people are not aware did that's

00:28:13,630 --> 00:28:16,540
that's okay that's the case and it can

00:28:15,100 --> 00:28:18,580
be really surprising when you define

00:28:16,540 --> 00:28:20,410
implicit Sande a package object or you

00:28:18,580 --> 00:28:23,530
even worse you inherit them into the

00:28:20,410 --> 00:28:26,680
package object we can't get rid of them

00:28:23,530 --> 00:28:28,660
entirely when we do we would replace

00:28:26,680 --> 00:28:29,800
them with top-level definitions but I

00:28:28,660 --> 00:28:34,900
think that might be too impatient for

00:28:29,800 --> 00:28:36,460
214 although I would really like to yeah

00:28:34,900 --> 00:28:37,210
and like I said it's kind of coupled to

00:28:36,460 --> 00:28:38,229
one of the

00:28:37,210 --> 00:28:39,759
the things that we're seeing with

00:28:38,229 --> 00:28:42,849
implicit scope there that were pretty

00:28:39,759 --> 00:28:47,979
much unintended consequences of those

00:28:42,849 --> 00:28:49,570
feature interactions so what are we what

00:28:47,979 --> 00:28:51,429
are we adding I already mentioned trade

00:28:49,570 --> 00:28:53,019
parameters that pay types and and type

00:28:51,429 --> 00:28:54,339
lambdas I think that's one of those

00:28:53,019 --> 00:28:56,529
things that we've made painful for you

00:28:54,339 --> 00:29:02,739
long enough that we should just add

00:28:56,529 --> 00:29:04,330
direct support for it for implicit these

00:29:02,739 --> 00:29:06,909
are requirements that are essentially

00:29:04,330 --> 00:29:10,029
coming from Dottie to some extent but

00:29:06,909 --> 00:29:13,839
also just from from best practices do

00:29:10,029 --> 00:29:15,969
not define implicit without a return

00:29:13,839 --> 00:29:17,379
type okay like type inference and

00:29:15,969 --> 00:29:19,960
implicit search are really closely

00:29:17,379 --> 00:29:22,239
intertwined when we need to do tap and

00:29:19,960 --> 00:29:24,190
friends while we're deciding whether

00:29:22,239 --> 00:29:25,779
your implicit definitions is a candidate

00:29:24,190 --> 00:29:27,999
for implicit search it gets really nasty

00:29:25,779 --> 00:29:30,759
and all kinds of hacks are involved that

00:29:27,999 --> 00:29:31,929
you really don't want to know about and

00:29:30,759 --> 00:29:34,089
there's a few things that are driven by

00:29:31,929 --> 00:29:36,549
by the datatype generic programming as

00:29:34,089 --> 00:29:40,839
Myles implemented and shapeless that

00:29:36,549 --> 00:29:43,479
will reduce kind of the liability of

00:29:40,839 --> 00:29:46,659
upgrading to Scala 3 where this is all

00:29:43,479 --> 00:29:48,549
kind of using pretty Scala to specific

00:29:46,659 --> 00:29:49,989
hacks that were bringing into the

00:29:48,549 --> 00:29:52,299
language so that there's a good upgrade

00:29:49,989 --> 00:29:57,190
path for these really essential things

00:29:52,299 --> 00:29:58,839
to to scholar 3 and you know this is

00:29:57,190 --> 00:30:01,359
getting like on the really maybe we

00:29:58,839 --> 00:30:02,559
would like to but probably not list I

00:30:01,359 --> 00:30:04,299
mean there will be some there's already

00:30:02,559 --> 00:30:08,219
some support for var handles and

00:30:04,299 --> 00:30:12,609
barriers because well boring reasons of

00:30:08,219 --> 00:30:14,139
Java 9 is verifier getting stricter but

00:30:12,609 --> 00:30:17,080
you know some stuff like minimal value

00:30:14,139 --> 00:30:19,509
types or value types for for value

00:30:17,080 --> 00:30:21,519
classes if we can add support or

00:30:19,509 --> 00:30:24,219
leverage what they're going to add that

00:30:21,519 --> 00:30:27,779
would be really exciting but we're kind

00:30:24,219 --> 00:30:32,320
of taking a wait-and-see approach there

00:30:27,779 --> 00:30:34,809
so I guess we're about halfway and I'm

00:30:32,320 --> 00:30:35,859
just getting almost almost done I guess

00:30:34,809 --> 00:30:39,580
you can see that progress bar here

00:30:35,859 --> 00:30:42,070
anyway so Scala 3 you already know all

00:30:39,580 --> 00:30:44,950
about it my take on it is that it's

00:30:42,070 --> 00:30:48,029
basically kind of like a 215 just you

00:30:44,950 --> 00:30:50,950
know a little bit more exciting and I

00:30:48,029 --> 00:30:53,289
hope you're a lot more excited I am

00:30:50,950 --> 00:30:55,659
but what I mean by this is that your

00:30:53,289 --> 00:30:58,299
upgrade hopefully won't be excited and

00:30:55,659 --> 00:31:00,429
exciting in a bad way or at least not

00:30:58,299 --> 00:31:03,190
more so than a regular you know - 14 -

00:31:00,429 --> 00:31:07,360
15 upgrade and that's really what our

00:31:03,190 --> 00:31:12,130
roadmap has been about since 212 and and

00:31:07,360 --> 00:31:15,820
is really accelerating with 2:14 so for

00:31:12,130 --> 00:31:17,590
me in kind of ascending descending order

00:31:15,820 --> 00:31:19,929
I think implicit function types in Scala

00:31:17,590 --> 00:31:21,100
3 are really cool union types have lots

00:31:19,929 --> 00:31:24,130
of applications and stuff that I

00:31:21,100 --> 00:31:25,600
honestly don't see much in my daily

00:31:24,130 --> 00:31:28,090
programming but I can definitely see in

00:31:25,600 --> 00:31:29,590
the talks at the conference that there's

00:31:28,090 --> 00:31:33,639
some really interesting use cases for

00:31:29,590 --> 00:31:35,380
them transparent methods and just

00:31:33,639 --> 00:31:36,820
principle metaprogramming they go

00:31:35,380 --> 00:31:39,760
hand-in-hand and I think that's really

00:31:36,820 --> 00:31:41,519
exciting transparent by the way as is

00:31:39,760 --> 00:31:43,840
what used to be called inline and dotty

00:31:41,519 --> 00:31:48,340
but I think transparent and opaque are a

00:31:43,840 --> 00:31:51,490
really nice symmetry that really convey

00:31:48,340 --> 00:31:52,960
what what they are for new macros I'm

00:31:51,490 --> 00:31:55,360
excited because it will be based on

00:31:52,960 --> 00:31:57,460
tasty and no longer on all the the

00:31:55,360 --> 00:31:58,210
nitty-gritty details of the compiler so

00:31:57,460 --> 00:31:59,830
that we don't have to worry about

00:31:58,210 --> 00:32:02,919
breaking your macros while we're working

00:31:59,830 --> 00:32:05,230
on the compiler internals you know

00:32:02,919 --> 00:32:08,830
because while you know we had to finally

00:32:05,230 --> 00:32:11,049
add that and Static firfer Java Interop

00:32:08,830 --> 00:32:12,340
reasons so thank you very much for

00:32:11,049 --> 00:32:14,380
sticking with me through the end here at

00:32:12,340 --> 00:32:15,700
the conference I hope you had a good

00:32:14,380 --> 00:32:17,500
time thank you so much to all our

00:32:15,700 --> 00:32:19,419
contributors a community for being you

00:32:17,500 --> 00:32:20,529
for being here Scala Center for all the

00:32:19,419 --> 00:32:22,000
great work they're doing and the dottie

00:32:20,529 --> 00:32:25,000
team for all the you know the productive

00:32:22,000 --> 00:32:27,159
collaboration we have with them happy to

00:32:25,000 --> 00:32:28,419
take questions now or you might want to

00:32:27,159 --> 00:32:30,580
run out and grab a drink or something

00:32:28,419 --> 00:32:32,430
and we can talk at the panel as you wish

00:32:30,580 --> 00:32:38,990
thanks again

00:32:32,430 --> 00:32:41,190
[Applause]

00:32:38,990 --> 00:32:44,010
there is a microphone setup right there

00:32:41,190 --> 00:32:45,420
if you had a question right now or grab

00:32:44,010 --> 00:32:48,720
me at some point between now and the

00:32:45,420 --> 00:32:51,420
panel there we go yeah

00:32:48,720 --> 00:32:58,110
will mutual tail recursion optimization

00:32:51,420 --> 00:33:04,460
be something in Scala pari-mutuel tail

00:32:58,110 --> 00:33:07,740
recursion in Scala 3 it's not I mean I

00:33:04,460 --> 00:33:09,870
know it's not really on the roadmap I'm

00:33:07,740 --> 00:33:12,630
kind of caught out of it under the blue

00:33:09,870 --> 00:33:13,800
of that one it's a pretty specific

00:33:12,630 --> 00:33:15,720
question I know

00:33:13,800 --> 00:33:17,400
yeah no no but it's a yeah you got me

00:33:15,720 --> 00:33:19,470
thinking I have to think a little bit

00:33:17,400 --> 00:33:21,390
about what where we are on that right

00:33:19,470 --> 00:33:24,240
now or what the challenges would be with

00:33:21,390 --> 00:33:26,040
implementing that but I I let's chat

00:33:24,240 --> 00:33:27,420
offline about that yeah but I'm not

00:33:26,040 --> 00:33:32,310
aware of any at current efforts on that

00:33:27,420 --> 00:33:34,260
yeah so from my understanding who picked

00:33:32,310 --> 00:33:38,460
up is definitely kind of not going to

00:33:34,260 --> 00:33:41,610
2:13 right well usually what we do is we

00:33:38,460 --> 00:33:43,230
we do the the implementation in the

00:33:41,610 --> 00:33:44,790
release before the one that we are going

00:33:43,230 --> 00:33:48,780
to support is officially and but then

00:33:44,790 --> 00:33:50,130
it'll be available under a flag so it's

00:33:48,780 --> 00:33:52,500
actually pretty challenging to implement

00:33:50,130 --> 00:33:54,540
in Scala to scale 3 has a nicer

00:33:52,500 --> 00:33:59,760
architecture for dealing with context

00:33:54,540 --> 00:34:01,110
sensitive like yeah but taking context

00:33:59,760 --> 00:34:03,660
into account when you're doing subtyping

00:34:01,110 --> 00:34:05,340
and we don't which is also ygit type

00:34:03,660 --> 00:34:09,870
checking for example it's not great in

00:34:05,340 --> 00:34:10,470
Scala to anyway do two for as a shorter

00:34:09,870 --> 00:34:13,110
answer

00:34:10,470 --> 00:34:20,640
I really hope it'll be available under

00:34:13,110 --> 00:34:22,650
like X source 214 in like 213 and +1 and

00:34:20,640 --> 00:34:25,110
then you know officially in 2:14 the SIP

00:34:22,650 --> 00:34:28,500
is essentially accepted pending

00:34:25,110 --> 00:34:29,730
implementation and if you'd like to help

00:34:28,500 --> 00:34:31,530
with the implementation or with

00:34:29,730 --> 00:34:33,750
providing more motivating use cases or

00:34:31,530 --> 00:34:37,320
tests or whatever it is yeah let's let's

00:34:33,750 --> 00:34:38,970
chat sure actually another interesting

00:34:37,320 --> 00:34:41,610
question and that there's some interest

00:34:38,970 --> 00:34:42,900
of introducing some you know can you

00:34:41,610 --> 00:34:44,930
talk a little closer to the mic right

00:34:42,900 --> 00:34:46,710
here there is actually some interesting

00:34:44,930 --> 00:34:49,200
bringing some

00:34:46,710 --> 00:34:53,430
functional programming type classes like

00:34:49,200 --> 00:34:55,590
modes process yeah into either standard

00:34:53,430 --> 00:34:58,160
library or module so what's your take on

00:34:55,590 --> 00:34:58,160
that huh

00:34:59,180 --> 00:35:04,050
so the question is you know how do we

00:35:01,560 --> 00:35:06,210
feel about integrating more type like do

00:35:04,050 --> 00:35:07,440
you mean like actual type classes like

00:35:06,210 --> 00:35:09,780
applicative and functor into the

00:35:07,440 --> 00:35:11,430
standard library or or end or support

00:35:09,780 --> 00:35:14,130
for tech classes like defining type

00:35:11,430 --> 00:35:16,350
classes more directly in a language well

00:35:14,130 --> 00:35:18,510
the post ii the letter is the

00:35:16,350 --> 00:35:21,900
prerequisite of the first but okay yeah

00:35:18,510 --> 00:35:26,160
yeah I mean I think I think it would be

00:35:21,900 --> 00:35:27,810
useful I think it's not clear yet you

00:35:26,160 --> 00:35:29,720
know how we should do this I don't know

00:35:27,810 --> 00:35:32,250
if you saw the pull request where Martin

00:35:29,720 --> 00:35:33,720
you know like basically parked his

00:35:32,250 --> 00:35:36,170
current thinking on that and then people

00:35:33,720 --> 00:35:38,220
got really worried or excited or both

00:35:36,170 --> 00:35:40,500
about you know basically what was a

00:35:38,220 --> 00:35:42,840
draft for one way we think we could do

00:35:40,500 --> 00:35:44,730
it so I think it's clear that there's a

00:35:42,840 --> 00:35:45,750
lot of contention around this issue in

00:35:44,730 --> 00:35:47,790
the community and we really need to

00:35:45,750 --> 00:35:50,040
figure out how we can get everybody to

00:35:47,790 --> 00:35:52,110
agree on that design and I think that's

00:35:50,040 --> 00:35:55,830
going to be challenging but obviously

00:35:52,110 --> 00:35:57,690
worth doing when it comes to bringing

00:35:55,830 --> 00:35:58,830
those core concepts into the standard

00:35:57,690 --> 00:36:04,560
library I think that actually might be

00:35:58,830 --> 00:36:06,450
harder still well maybe it'll get easier

00:36:04,560 --> 00:36:11,490
once we actually agree on how to do type

00:36:06,450 --> 00:36:14,070
classes in Scala really honestly with

00:36:11,490 --> 00:36:15,870
you we have so much to do that type

00:36:14,070 --> 00:36:18,260
classes are not like the number like in

00:36:15,870 --> 00:36:21,600
the top three of my to-do list right now

00:36:18,260 --> 00:36:23,160
but I am very curious to see what we can

00:36:21,600 --> 00:36:25,170
do and I'm very open to to discussing

00:36:23,160 --> 00:36:27,840
how you know we could do it in a way

00:36:25,170 --> 00:36:31,130
that works for both you know the type

00:36:27,840 --> 00:36:34,830
level community and and you know the

00:36:31,130 --> 00:36:38,940
this call is that community thank you

00:36:34,830 --> 00:36:40,110
thank you thanks for questions all right

00:36:38,940 --> 00:36:41,880
looks like no one is coming up with the

00:36:40,110 --> 00:36:43,830
mic well I'm sure you'll have more in

00:36:41,880 --> 00:36:44,660
time for the panel thanks again see you

00:36:43,830 --> 00:36:48,540
in a bit

00:36:44,660 --> 00:36:48,540

YouTube URL: https://www.youtube.com/watch?v=VX-zrB8RaaA


