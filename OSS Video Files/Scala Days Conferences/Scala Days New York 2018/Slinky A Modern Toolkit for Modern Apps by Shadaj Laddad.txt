Title: Slinky A Modern Toolkit for Modern Apps by Shadaj Laddad
Publication date: 2018-09-22
Playlist: Scala Days New York 2018
Description: 
	This video was recorded at Scala Days New York 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://na.scaladays.org/schedule/slinky-a-modern-toolkit-for-modern-apps
Captions: 
	00:00:04,810 --> 00:00:09,200
I'm sure dodge and today I'm gonna be

00:00:07,040 --> 00:00:13,219
talking about slinky so before we dive

00:00:09,200 --> 00:00:16,430
into the details a quick TL DR slinky is

00:00:13,219 --> 00:00:18,890
a way to use react from your scholar

00:00:16,430 --> 00:00:22,429
applications and now we can't see either

00:00:18,890 --> 00:00:24,919
okay okay sure

00:00:22,429 --> 00:00:27,890
okay so so thinking let's use reaction

00:00:24,919 --> 00:00:30,109
we're school applications but before we

00:00:27,890 --> 00:00:34,070
go into what slinky is let's talk about

00:00:30,109 --> 00:00:35,510
why slinky so the way we write web

00:00:34,070 --> 00:00:38,329
applications has fundamentally changed

00:00:35,510 --> 00:00:40,520
in the past few years so the traditional

00:00:38,329 --> 00:00:42,230
model of a web application is give your

00:00:40,520 --> 00:00:44,510
persistence layer you have your server

00:00:42,230 --> 00:00:47,149
and that server is emitting your HTML

00:00:44,510 --> 00:00:48,440
and that would probably be a skull

00:00:47,149 --> 00:00:50,030
application you might be using Play

00:00:48,440 --> 00:00:52,760
Framework for that using something like

00:00:50,030 --> 00:00:54,769
twirl to generate your HTML that all

00:00:52,760 --> 00:00:56,329
gets into your browser and there you

00:00:54,769 --> 00:00:58,280
might have a little bit of JavaScript to

00:00:56,329 --> 00:01:00,500
make the app more interactive for your

00:00:58,280 --> 00:01:03,079
users but usually the majority of your

00:01:00,500 --> 00:01:04,460
code was this back-end Scala code and

00:01:03,079 --> 00:01:07,310
then you had a little bit of front-end

00:01:04,460 --> 00:01:09,829
JavaScript but in recent years it's kind

00:01:07,310 --> 00:01:12,020
of shifted where your back-end instead

00:01:09,829 --> 00:01:14,780
of serving hTML is now just serving data

00:01:12,020 --> 00:01:17,540
and your client side is what's

00:01:14,780 --> 00:01:19,610
generating the HTML so now you'll have

00:01:17,540 --> 00:01:21,649
your JavaScript code which is generating

00:01:19,610 --> 00:01:24,049
HTML that makes it possible to offer

00:01:21,649 --> 00:01:25,579
much more rich experiences because based

00:01:24,049 --> 00:01:27,259
on how the users interacting to the page

00:01:25,579 --> 00:01:28,369
you don't have to wait for the server to

00:01:27,259 --> 00:01:32,360
come up with responses you can

00:01:28,369 --> 00:01:33,619
immediately provide feedback so how can

00:01:32,360 --> 00:01:35,750
we implement this in your web now the

00:01:33,619 --> 00:01:38,240
kind of one of the first solutions to

00:01:35,750 --> 00:01:40,670
this was jQuery so with jQuery you got a

00:01:38,240 --> 00:01:44,270
nice API you can interact with your

00:01:40,670 --> 00:01:45,979
website you can modify Dom properties

00:01:44,270 --> 00:01:47,630
you can animate nodes you can get data

00:01:45,979 --> 00:01:49,070
from your servers so this is kind of

00:01:47,630 --> 00:01:50,780
your usual flow you start by loading

00:01:49,070 --> 00:01:52,039
some data from your server you check

00:01:50,780 --> 00:01:54,560
what's being currently rendered because

00:01:52,039 --> 00:01:56,450
you need to update it to show the latest

00:01:54,560 --> 00:01:58,789
results based on your data you applied

00:01:56,450 --> 00:01:59,990
the adjustments and then simulator point

00:01:58,789 --> 00:02:01,700
you'll read some user input maybe they

00:01:59,990 --> 00:02:03,530
fill out a form and you send that data

00:02:01,700 --> 00:02:04,969
to the server and then you repeat this

00:02:03,530 --> 00:02:07,729
cycle the server sends you mute data and

00:02:04,969 --> 00:02:09,979
you start all over again but it ends up

00:02:07,729 --> 00:02:12,650
looking something more like this where

00:02:09,979 --> 00:02:14,150
as soon as you try to apply the

00:02:12,650 --> 00:02:16,190
adjustments you forget to delete some

00:02:14,150 --> 00:02:17,910
HTML nodes that were added by another

00:02:16,190 --> 00:02:20,040
part of your code so maybe some guy

00:02:17,910 --> 00:02:21,390
popped up created a pop up you forget

00:02:20,040 --> 00:02:22,410
that that guy created a pop up so now

00:02:21,390 --> 00:02:24,030
you have a pop of their but you're

00:02:22,410 --> 00:02:26,340
trying to show content on the main page

00:02:24,030 --> 00:02:28,800
so you end up with that issue and then

00:02:26,340 --> 00:02:29,340
when you read user input and send it to

00:02:28,800 --> 00:02:31,530
the server

00:02:29,340 --> 00:02:32,820
oftentimes you'll just leave the user

00:02:31,530 --> 00:02:34,320
staring at a spinner and your web app

00:02:32,820 --> 00:02:35,700
won't be interacted because you're just

00:02:34,320 --> 00:02:39,060
waiting for that response to come back

00:02:35,700 --> 00:02:40,950
before you can start the cycle again so

00:02:39,060 --> 00:02:42,750
this isn't a great way to implement than

00:02:40,950 --> 00:02:44,130
you got it worked and it was a lot

00:02:42,750 --> 00:02:45,510
better than what we had before with

00:02:44,130 --> 00:02:48,600
everything happening on the server side

00:02:45,510 --> 00:02:50,250
but it's still not great so the problem

00:02:48,600 --> 00:02:53,190
we're trying to solve here is we have

00:02:50,250 --> 00:02:55,410
two sources of input we have this data

00:02:53,190 --> 00:02:57,330
coming from the server and we have user

00:02:55,410 --> 00:02:59,430
input as the users interacting with a

00:02:57,330 --> 00:03:01,800
web page and we want to combine these

00:02:59,430 --> 00:03:05,160
two sources of information and turn them

00:03:01,800 --> 00:03:07,290
into views and so one recent solution

00:03:05,160 --> 00:03:09,210
that's been that was created for to

00:03:07,290 --> 00:03:11,160
solve this issue is react yes

00:03:09,210 --> 00:03:15,030
so just a quick show of hands how many

00:03:11,160 --> 00:03:17,340
of you guys have used react before okay

00:03:15,030 --> 00:03:20,370
cool so a good number of you guys so

00:03:17,340 --> 00:03:23,220
react is a web framework created by

00:03:20,370 --> 00:03:24,930
Facebook to simplify this process of

00:03:23,220 --> 00:03:27,900
taking data and user input and turning

00:03:24,930 --> 00:03:30,870
it into views so react is used by lots

00:03:27,900 --> 00:03:33,420
of companies it's used by Facebook for

00:03:30,870 --> 00:03:36,150
their all their apps it's used by

00:03:33,420 --> 00:03:39,240
companies like Twitter by uber by

00:03:36,150 --> 00:03:40,890
Microsoft so it's there everywhere and

00:03:39,240 --> 00:03:43,680
it really makes this process a lot

00:03:40,890 --> 00:03:45,060
simpler how it takes a structure that we

00:03:43,680 --> 00:03:47,010
just talked about this prom that we're

00:03:45,060 --> 00:03:48,540
trying to solve and that is how you

00:03:47,010 --> 00:03:51,120
write your code so your react

00:03:48,540 --> 00:03:52,830
application structurally looks like this

00:03:51,120 --> 00:03:55,020
you have a function from your data and

00:03:52,830 --> 00:03:57,030
user and put any turn into views now you

00:03:55,020 --> 00:04:00,330
don't call it data and user input and

00:03:57,030 --> 00:04:01,770
react you call it props and state so

00:04:00,330 --> 00:04:03,510
props is something you're receiving from

00:04:01,770 --> 00:04:05,160
higher levels of your application it

00:04:03,510 --> 00:04:07,110
might be something like configuration it

00:04:05,160 --> 00:04:08,700
might be something like data from your

00:04:07,110 --> 00:04:10,770
server and then you have state which is

00:04:08,700 --> 00:04:12,750
something local to individual parts of

00:04:10,770 --> 00:04:14,280
your application and that's you J your

00:04:12,750 --> 00:04:17,609
user input and you're turning it into a

00:04:14,280 --> 00:04:20,430
view so let's take a look so this is

00:04:17,609 --> 00:04:23,010
JavaScript this is how you would write

00:04:20,430 --> 00:04:24,720
your simple hello world component so you

00:04:23,010 --> 00:04:27,330
create a class it extends to react art

00:04:24,720 --> 00:04:29,970
component and then the core part of a

00:04:27,330 --> 00:04:30,449
react component which is a subset of

00:04:29,970 --> 00:04:32,370
your

00:04:30,449 --> 00:04:34,319
application is going to be this render

00:04:32,370 --> 00:04:37,740
and render is kind of defining what you

00:04:34,319 --> 00:04:40,409
put out onto the page so here we're

00:04:37,740 --> 00:04:42,629
creating a component that will take some

00:04:40,409 --> 00:04:43,979
input which is the name of the person

00:04:42,629 --> 00:04:46,740
we're saying hello to you and it's going

00:04:43,979 --> 00:04:48,479
to be outputting hello to that person on

00:04:46,740 --> 00:04:50,729
the screen so we're constructing a div

00:04:48,479 --> 00:04:54,240
here you can see in JavaScript you can

00:04:50,729 --> 00:04:56,370
use regular HTML syntax to render these

00:04:54,240 --> 00:04:58,169
nodes and then they have this templating

00:04:56,370 --> 00:04:59,999
syntax to say we're going to take this

00:04:58,169 --> 00:05:01,169
value from our prop so any attributes

00:04:59,999 --> 00:05:02,339
you pass into this component are

00:05:01,169 --> 00:05:04,229
automatically going to be filled into

00:05:02,339 --> 00:05:06,360
the props so here we're taking the name

00:05:04,229 --> 00:05:08,279
value from the props templating that in

00:05:06,360 --> 00:05:10,379
and then way if we want to render it at

00:05:08,279 --> 00:05:12,810
the bottom we can just do how a message

00:05:10,379 --> 00:05:15,409
with the name is Taylor and that name is

00:05:12,810 --> 00:05:17,909
what's going to be fed into the prompts

00:05:15,409 --> 00:05:19,289
so this is a simple application where

00:05:17,909 --> 00:05:22,020
we're just dealing with props but more

00:05:19,289 --> 00:05:23,639
often you'll also have state so this is

00:05:22,020 --> 00:05:27,270
an example of creating an application

00:05:23,639 --> 00:05:29,009
with some state so here what we're doing

00:05:27,270 --> 00:05:30,779
is creating an application where we take

00:05:29,009 --> 00:05:32,939
some user input and we just mirror it

00:05:30,779 --> 00:05:34,319
back to the user so what we want to do

00:05:32,939 --> 00:05:36,960
is you want to keep track of what the

00:05:34,319 --> 00:05:38,909
user has typed into a text box so we

00:05:36,960 --> 00:05:41,520
have this input we're saying on change

00:05:38,909 --> 00:05:43,259
we're gonna handle the input so what

00:05:41,520 --> 00:05:45,449
we're doing here is just saying okay if

00:05:43,259 --> 00:05:47,610
we receive an event that the users type

00:05:45,449 --> 00:05:49,770
something into the text box we want to

00:05:47,610 --> 00:05:52,879
update our local state of what has the

00:05:49,770 --> 00:05:55,319
user typed in and having this flow of

00:05:52,879 --> 00:05:57,089
separating gathering your state from

00:05:55,319 --> 00:05:58,740
using your state is what makes you react

00:05:57,089 --> 00:05:59,909
to a powerful so we have one part of

00:05:58,740 --> 00:06:02,339
your application that's saying up to the

00:05:59,909 --> 00:06:04,379
state and then in our render we can just

00:06:02,339 --> 00:06:06,120
use the state so if the user type

00:06:04,379 --> 00:06:07,409
something in it'll update your state and

00:06:06,120 --> 00:06:08,999
then it'll go back to this render and

00:06:07,409 --> 00:06:10,709
that's how you can keep your views up to

00:06:08,999 --> 00:06:14,209
date so in this case you would have a

00:06:10,709 --> 00:06:16,680
text box and a P tag which is just

00:06:14,209 --> 00:06:19,529
containing this user input is what the

00:06:16,680 --> 00:06:22,020
user has typed in so hopefully this

00:06:19,529 --> 00:06:25,110
gives you a quick idea of what react is

00:06:22,020 --> 00:06:27,270
like and what writing components is with

00:06:25,110 --> 00:06:29,339
react so you might be wondering okay we

00:06:27,270 --> 00:06:31,279
talked about JavaScript Web Apps what

00:06:29,339 --> 00:06:35,819
does Scala have to do with any of this

00:06:31,279 --> 00:06:37,319
so Scala GS is a tool that takes your

00:06:35,819 --> 00:06:38,519
Scala code and compile it into

00:06:37,319 --> 00:06:42,300
JavaScript and that's what's going to

00:06:38,519 --> 00:06:44,190
make Scala applicable to all this so

00:06:42,300 --> 00:06:46,470
let's say you have an object called

00:06:44,190 --> 00:06:48,720
Scala fiddle you can actually try Scala

00:06:46,470 --> 00:06:51,030
fit all online and see the results for

00:06:48,720 --> 00:06:52,650
yourself of how Scala actually ecologist

00:06:51,030 --> 00:06:54,570
turns your Scala code into JavaScript

00:06:52,650 --> 00:06:57,420
but it'll look something like this

00:06:54,570 --> 00:07:00,210
so you it'll generate a JavaScript

00:06:57,420 --> 00:07:01,830
object with some event method and the

00:07:00,210 --> 00:07:03,900
important thing here is skål just

00:07:01,830 --> 00:07:05,190
outputs regular javascript there's

00:07:03,900 --> 00:07:08,070
nothing special needed you don't need to

00:07:05,190 --> 00:07:10,020
run in a special browser it's not um you

00:07:08,070 --> 00:07:11,940
don't need any special frameworks around

00:07:10,020 --> 00:07:14,460
Scala Janice it's just pure plain

00:07:11,940 --> 00:07:17,310
JavaScript including the ability to

00:07:14,460 --> 00:07:19,440
interact with JavaScript libraries and

00:07:17,310 --> 00:07:24,060
build tools and that's what's gonna

00:07:19,440 --> 00:07:26,280
allow us to use react from Scala GS but

00:07:24,060 --> 00:07:28,350
also why not just use JavaScript I mean

00:07:26,280 --> 00:07:30,330
after all react.js was developed as a

00:07:28,350 --> 00:07:33,210
JavaScript framework not a Scala GS

00:07:30,330 --> 00:07:34,680
framework so Scala gives you a lot of

00:07:33,210 --> 00:07:37,020
capabilities first of all it gives you

00:07:34,680 --> 00:07:39,150
strong static typing I think this is

00:07:37,020 --> 00:07:41,430
something that we all love about Scala

00:07:39,150 --> 00:07:43,680
and the really great part about Scala is

00:07:41,430 --> 00:07:45,300
you can get all this without losing

00:07:43,680 --> 00:07:48,120
conciseness now that's something people

00:07:45,300 --> 00:07:49,110
often fear javascript developers if

00:07:48,120 --> 00:07:50,880
you're moving to a statically typed

00:07:49,110 --> 00:07:52,500
language it can often add a lot of

00:07:50,880 --> 00:07:54,630
verbosity where you have to specify your

00:07:52,500 --> 00:07:56,190
types everywhere but would skull and

00:07:54,630 --> 00:07:59,100
type inference and more advanced

00:07:56,190 --> 00:08:01,590
language features were able to ensure

00:07:59,100 --> 00:08:05,460
that your code is safe before you run it

00:08:01,590 --> 00:08:08,880
without making your code super huge with

00:08:05,460 --> 00:08:10,260
all these types everywhere the next

00:08:08,880 --> 00:08:12,870
important thing is code reusability

00:08:10,260 --> 00:08:14,520
between your server and clients so how

00:08:12,870 --> 00:08:17,520
many of you guys use Scala to write

00:08:14,520 --> 00:08:19,530
server-side applications okay so pretty

00:08:17,520 --> 00:08:21,390
much everybody that's what skull was

00:08:19,530 --> 00:08:24,540
primarily intended for is writing back

00:08:21,390 --> 00:08:26,610
into applications and now it's called GS

00:08:24,540 --> 00:08:28,260
you can actually bring the exact same

00:08:26,610 --> 00:08:29,430
code you run in your server into your

00:08:28,260 --> 00:08:31,380
client now this is a lot of advantages

00:08:29,430 --> 00:08:32,940
first of all if you have models that

00:08:31,380 --> 00:08:34,710
means you can share the exact same code

00:08:32,940 --> 00:08:36,930
not one issue and a lot of developers

00:08:34,710 --> 00:08:38,310
face is you make some changes to your

00:08:36,930 --> 00:08:39,660
models on your back-end now you have to

00:08:38,310 --> 00:08:41,039
notify all your clients and developers

00:08:39,660 --> 00:08:42,690
that hey this shape if my data has

00:08:41,039 --> 00:08:44,099
changed make sure to update your app to

00:08:42,690 --> 00:08:45,990
it you might run into problems if you

00:08:44,099 --> 00:08:48,420
deploy your back-end before the client

00:08:45,990 --> 00:08:50,640
said dev update it with Scala jeaious

00:08:48,420 --> 00:08:52,410
you can use the exact same code to make

00:08:50,640 --> 00:08:53,760
sure that your client is working with

00:08:52,410 --> 00:08:56,820
the exact same models that your server

00:08:53,760 --> 00:08:58,200
is emitting and in addition if you're

00:08:56,820 --> 00:09:00,120
developing things

00:08:58,200 --> 00:09:03,860
maybe some algorithms to process data

00:09:00,120 --> 00:09:06,390
and this allows you to migrate the

00:09:03,860 --> 00:09:08,010
potentially computationally intensive

00:09:06,390 --> 00:09:10,110
tasks of running the algorithm on your

00:09:08,010 --> 00:09:14,370
server to the client so then you can

00:09:10,110 --> 00:09:15,630
save computational resources next you

00:09:14,370 --> 00:09:17,279
get advanced language features now

00:09:15,630 --> 00:09:19,380
macros can be very scary

00:09:17,279 --> 00:09:22,550
but when used correctly and we'll talk a

00:09:19,380 --> 00:09:25,320
little bit more about this later today

00:09:22,550 --> 00:09:27,149
they can be extremely powerful and can

00:09:25,320 --> 00:09:31,140
eliminate a lot and a lot of boilerplate

00:09:27,149 --> 00:09:33,450
and lastly but most importantly Scala

00:09:31,140 --> 00:09:34,560
has an ecosystem of lots of professional

00:09:33,450 --> 00:09:38,760
libraries and tools

00:09:34,560 --> 00:09:41,940
so from Scala tests to things like diode

00:09:38,760 --> 00:09:43,980
and Scala rx there's a whole wide

00:09:41,940 --> 00:09:46,520
variety of scholar libraries out there

00:09:43,980 --> 00:09:48,420
for almost anything you can think of and

00:09:46,520 --> 00:09:51,000
majority of these libraries are now

00:09:48,420 --> 00:09:52,230
compatible with Scala yes so as soon as

00:09:51,000 --> 00:09:55,580
you switch to Scala so you have access

00:09:52,230 --> 00:10:01,320
to this entire range of this ecosystem

00:09:55,580 --> 00:10:04,680
so one way to use Scala G is with react

00:10:01,320 --> 00:10:07,230
is slinky and slinky is a library Estrin

00:10:04,680 --> 00:10:10,680
ated working on about one and a half

00:10:07,230 --> 00:10:13,740
years ago and now it's grown into a

00:10:10,680 --> 00:10:15,750
extremely powerful framework that goes

00:10:13,740 --> 00:10:17,250
beyond just offering an interface to

00:10:15,750 --> 00:10:19,110
react but making your whole developer

00:10:17,250 --> 00:10:22,320
experience when using react from Scala

00:10:19,110 --> 00:10:25,410
is fantastic so what does think you let

00:10:22,320 --> 00:10:27,600
you do and they're kind of four main

00:10:25,410 --> 00:10:30,000
parts to slinky and we'll go over each

00:10:27,600 --> 00:10:31,829
of these in detail first of all most

00:10:30,000 --> 00:10:33,990
importantly it lets use react from your

00:10:31,829 --> 00:10:34,500
Scala GS code so anything you can do in

00:10:33,990 --> 00:10:37,740
react

00:10:34,500 --> 00:10:40,350
you can do it slinky you can use it

00:10:37,740 --> 00:10:43,110
along with skull libraries and tools so

00:10:40,350 --> 00:10:45,779
slinky has great interrupts with

00:10:43,110 --> 00:10:49,709
existing Scala libraries and tooling

00:10:45,779 --> 00:10:51,810
like SBT and other plugins but in

00:10:49,709 --> 00:10:53,190
addition to using Scala libraries and

00:10:51,810 --> 00:10:54,480
tools you can also use javascript

00:10:53,190 --> 00:10:55,200
libraries and tools and this is really

00:10:54,480 --> 00:10:57,329
important if you're developing

00:10:55,200 --> 00:10:58,589
client-side applications because when

00:10:57,329 --> 00:11:01,709
you're working with react they're not

00:10:58,589 --> 00:11:03,600
that many libraries for react components

00:11:01,709 --> 00:11:06,329
in Scala GS but there are a lot of

00:11:03,600 --> 00:11:09,180
libraries for react written in

00:11:06,329 --> 00:11:11,580
JavaScript and so slinky allows you to

00:11:09,180 --> 00:11:13,740
use these existing modules

00:11:11,580 --> 00:11:17,580
javascript LED and bring them into your

00:11:13,740 --> 00:11:19,470
Scala GS code and lastly one of the main

00:11:17,580 --> 00:11:21,000
points the slinky is to have a developer

00:11:19,470 --> 00:11:23,010
experience that's just as great as

00:11:21,000 --> 00:11:25,620
JavaScript so if you've written apps

00:11:23,010 --> 00:11:26,670
with JavaScript for the client said

00:11:25,620 --> 00:11:28,649
you'll know it's a really fantastic

00:11:26,670 --> 00:11:30,630
experience but things like halt loading

00:11:28,649 --> 00:11:32,250
you can make a change save it and by the

00:11:30,630 --> 00:11:34,110
time you're back in your browser you'll

00:11:32,250 --> 00:11:36,149
see the results and so slinky tries to

00:11:34,110 --> 00:11:38,010
bring over a lot of the great features

00:11:36,149 --> 00:11:39,870
that you have when developing with

00:11:38,010 --> 00:11:44,550
playing JavaScript and bring them over

00:11:39,870 --> 00:11:46,410
to Scala GS so let's write some code so

00:11:44,550 --> 00:11:48,570
I'm going to do this completely from

00:11:46,410 --> 00:11:50,970
scratch so hopefully the internet will

00:11:48,570 --> 00:11:52,589
work with me so the easiest way to get

00:11:50,970 --> 00:11:54,769
started where the slinky app is to use

00:11:52,589 --> 00:11:57,360
this template so you can do SBT new

00:11:54,769 --> 00:11:59,430
create and this is giving away a later

00:11:57,360 --> 00:12:04,380
part of my presentation create react

00:11:59,430 --> 00:12:06,450
Scala app so you hit enter the Internet

00:12:04,380 --> 00:12:07,850
will hopefully work with me SBT will

00:12:06,450 --> 00:12:14,670
take a little bit of time to boot up

00:12:07,850 --> 00:12:17,640
okay so okay so the name we can do like

00:12:14,670 --> 00:12:20,459
Scala is demo HelloWorld

00:12:17,640 --> 00:12:23,040
okay so now we have is slinky app so if

00:12:20,459 --> 00:12:26,790
I open this up in IntelliJ and hopefully

00:12:23,040 --> 00:12:28,230
this will happen fast enough and I'm

00:12:26,790 --> 00:12:29,579
gonna launch a speech in the background

00:12:28,230 --> 00:12:37,230
so that we can get started with building

00:12:29,579 --> 00:12:38,190
this so okay okay let's import this okay

00:12:37,230 --> 00:12:39,930
I'm probably just going to open this in

00:12:38,190 --> 00:12:48,089
vs code in the meantime so you can start

00:12:39,930 --> 00:12:50,310
going through the code okay okay so this

00:12:48,089 --> 00:12:52,550
is kind of the base layout of our

00:12:50,310 --> 00:12:55,829
application

00:12:52,550 --> 00:12:57,449
slinky uses SBT so everything you know

00:12:55,829 --> 00:12:59,250
about building applications we have

00:12:57,449 --> 00:13:01,110
Scala with SBT you can bring over to

00:12:59,250 --> 00:13:04,709
slinky so let's take a look at our main

00:13:01,110 --> 00:13:08,940
code so we have our main launcher so

00:13:04,709 --> 00:13:10,980
here we're importing some CSS and then

00:13:08,940 --> 00:13:13,440
we're going to be rendering some content

00:13:10,980 --> 00:13:15,029
so here we're doing stuff like I'm

00:13:13,440 --> 00:13:16,320
initializing hot reloading and we're

00:13:15,029 --> 00:13:19,440
going to see this in a bit as soon as

00:13:16,320 --> 00:13:21,390
IntelliJ actually boots up and then at

00:13:19,440 --> 00:13:23,490
the bottom we're using react Dom renders

00:13:21,390 --> 00:13:24,390
so for those of you guys who have

00:13:23,490 --> 00:13:26,820
written

00:13:24,390 --> 00:13:28,740
apps with JavaScript the syntax for

00:13:26,820 --> 00:13:30,690
rendering components in slinky is very

00:13:28,740 --> 00:13:32,760
similar but instead of using HTML syntax

00:13:30,690 --> 00:13:34,830
because xml literals are going away in

00:13:32,760 --> 00:13:37,020
future versions of scala slinky instead

00:13:34,830 --> 00:13:39,960
uses this kind of apply method where you

00:13:37,020 --> 00:13:43,680
pass in all the parameters as just as if

00:13:39,960 --> 00:13:45,570
you're calling that component so let's

00:13:43,680 --> 00:13:48,690
see if IntelliJ okay cool

00:13:45,570 --> 00:13:49,920
so now we're in IntelliJ and now one of

00:13:48,690 --> 00:13:51,300
the important things with slinky is

00:13:49,920 --> 00:13:53,850
slinky actually has put compatibility

00:13:51,300 --> 00:13:55,950
with all the ideas used so if you're

00:13:53,850 --> 00:13:57,780
using IntelliJ you'll get full code

00:13:55,950 --> 00:13:59,610
completion and actually in a future

00:13:57,780 --> 00:14:01,440
release slinky is going to be supporting

00:13:59,610 --> 00:14:03,600
the new library injectors keep a Bodi of

00:14:01,440 --> 00:14:05,730
IntelliJ so you'll get even more

00:14:03,600 --> 00:14:07,770
advanced code completion with slinky

00:14:05,730 --> 00:14:11,730
projects so if we want to look at the

00:14:07,770 --> 00:14:13,890
main code so this is our apt Scala so

00:14:11,730 --> 00:14:15,330
here this is kind of the core component

00:14:13,890 --> 00:14:18,570
that we're writing so we're importing

00:14:15,330 --> 00:14:22,080
some CSS we're importing an SVG if you

00:14:18,570 --> 00:14:24,930
guys have looked at the original kind of

00:14:22,080 --> 00:14:27,750
create react app this mirrors that so in

00:14:24,930 --> 00:14:31,070
SBT if I want to launch this I can do

00:14:27,750 --> 00:14:35,580
fast obvious start web pack dev server

00:14:31,070 --> 00:14:39,720
so it will compile our code it will

00:14:35,580 --> 00:14:41,970
update our NPM dependencies so slinky

00:14:39,720 --> 00:14:44,940
works with NPM dependencies you can

00:14:41,970 --> 00:14:47,730
import everything from there it's going

00:14:44,940 --> 00:14:48,990
to install the stuff so that's going to

00:14:47,730 --> 00:14:50,100
be take a little bit of time so let's

00:14:48,990 --> 00:14:53,010
switch back to IntelliJ well that's

00:14:50,100 --> 00:14:55,080
running so here we have a component so

00:14:53,010 --> 00:14:56,310
when we're writing a component and

00:14:55,080 --> 00:14:58,590
slinky it looks very similar to what you

00:14:56,310 --> 00:15:01,890
would do in JavaScript you have your

00:14:58,590 --> 00:15:04,380
react class up here where our component

00:15:01,890 --> 00:15:06,330
is stateless so slinky can actually fill

00:15:04,380 --> 00:15:07,500
in a lot of the code for us if we tell

00:15:06,330 --> 00:15:09,150
it that it's stateless so then we don't

00:15:07,500 --> 00:15:11,580
have to define any state or initial

00:15:09,150 --> 00:15:13,590
state or anything and then we have our

00:15:11,580 --> 00:15:14,700
render so our render again looks very

00:15:13,590 --> 00:15:17,640
similar to what you were writing Jace

00:15:14,700 --> 00:15:20,880
and JavaScript except instead of using

00:15:17,640 --> 00:15:23,220
HTML style syntax you have this apply

00:15:20,880 --> 00:15:24,660
syntax so if you guys have used things

00:15:23,220 --> 00:15:26,790
like Scala tags this will be very

00:15:24,660 --> 00:15:28,260
familiar to you so here we can specify

00:15:26,790 --> 00:15:30,270
that the class name is app and that's

00:15:28,260 --> 00:15:33,600
getting tie in to our CSS and then we

00:15:30,270 --> 00:15:36,420
can put some strings out so this is kind

00:15:33,600 --> 00:15:37,770
of your hello world slinky app so it's

00:15:36,420 --> 00:15:38,130
compiled successfully so we can open

00:15:37,770 --> 00:15:40,650
this

00:15:38,130 --> 00:15:43,830
than our web browser and we can see this

00:15:40,650 --> 00:15:46,590
is our first application with slinky so

00:15:43,830 --> 00:15:48,300
now we can start editing it let's say we

00:15:46,590 --> 00:15:50,940
want to add some state to our component

00:15:48,300 --> 00:15:53,190
so what I'm gonna do here is let's just

00:15:50,940 --> 00:15:54,930
create an application that reads them

00:15:53,190 --> 00:15:57,750
input from the user displays it and

00:15:54,930 --> 00:16:00,330
maybe we can have some validation to say

00:15:57,750 --> 00:16:04,710
make the text read if the user types in

00:16:00,330 --> 00:16:06,990
any integers so let's take a component

00:16:04,710 --> 00:16:08,550
our state is going to be a string

00:16:06,990 --> 00:16:11,580
because we're gonna store that whatever

00:16:08,550 --> 00:16:13,050
the user has typed in so far now if we

00:16:11,580 --> 00:16:15,540
hover over this we'll say oh we need to

00:16:13,050 --> 00:16:18,360
implement initial state so as soon as

00:16:15,540 --> 00:16:20,190
you define an initial state type you

00:16:18,360 --> 00:16:21,270
also have to define what that starts out

00:16:20,190 --> 00:16:25,920
to be so this is going to be an empty

00:16:21,270 --> 00:16:28,530
string okay so now inside here we can

00:16:25,920 --> 00:16:30,660
get started by getting rid of this and

00:16:28,530 --> 00:16:33,360
let's replace it with an input so input

00:16:30,660 --> 00:16:38,340
is your regular text input I'm now on

00:16:33,360 --> 00:16:39,870
change so that's whenever we get the

00:16:38,340 --> 00:16:42,750
user types in any Contin we want to keep

00:16:39,870 --> 00:16:46,500
our state up-to-date so we're gonna take

00:16:42,750 --> 00:16:52,920
our event and do something with it I

00:16:46,500 --> 00:16:54,600
need to wrap this in parentheses okay so

00:16:52,920 --> 00:16:56,910
now that we have our event is it just a

00:16:54,600 --> 00:17:00,330
regular HTML event we can do that take

00:16:56,910 --> 00:17:02,640
the target we can cast it now this

00:17:00,330 --> 00:17:04,290
casting is not super great it's going to

00:17:02,640 --> 00:17:06,240
be improved in a future version of

00:17:04,290 --> 00:17:09,230
slinky as soon as the intelligent guys

00:17:06,240 --> 00:17:13,290
fix a bug with their error highlighting

00:17:09,230 --> 00:17:16,140
so so we can for now just cast it to an

00:17:13,290 --> 00:17:17,760
HTML input event and then we can take

00:17:16,140 --> 00:17:20,220
the value so this just gives us the

00:17:17,760 --> 00:17:22,230
string so this gives us the latest date

00:17:20,220 --> 00:17:27,720
and now to update our state we can just

00:17:22,230 --> 00:17:30,330
call set state with this value okay so

00:17:27,720 --> 00:17:33,060
in the meantime we can start fast FJs

00:17:30,330 --> 00:17:34,560
and watch mode so this will allow us to

00:17:33,060 --> 00:17:36,180
see halt loading in action so if you go

00:17:34,560 --> 00:17:38,790
back here you'll see that our app

00:17:36,180 --> 00:17:40,920
instantly changed so without any reloads

00:17:38,790 --> 00:17:43,320
we're up to date with our app we can

00:17:40,920 --> 00:17:45,870
even use the react dev tool so and we'll

00:17:43,320 --> 00:17:47,280
go into kind of all of this as part of

00:17:45,870 --> 00:17:50,420
that developer experience but you can

00:17:47,280 --> 00:17:52,170
see here we can cover the HAP app we can

00:17:50,420 --> 00:17:54,720
take a look

00:17:52,170 --> 00:17:56,460
so we can see our state is underscore

00:17:54,720 --> 00:17:59,190
underscore as we type in we can see that

00:17:56,460 --> 00:18:02,250
our state is getting updated with that

00:17:59,190 --> 00:18:04,710
so we're on the right track now what we

00:18:02,250 --> 00:18:07,740
want to do is we want to populate this

00:18:04,710 --> 00:18:09,420
input with the text that you that the

00:18:07,740 --> 00:18:11,220
user has typed in so far and then we

00:18:09,420 --> 00:18:14,100
also want to colorize it based on this

00:18:11,220 --> 00:18:16,890
validation scheme so what we're gonna do

00:18:14,100 --> 00:18:19,050
is on inputs just like you can do in

00:18:16,890 --> 00:18:20,880
HTML you can set a value so we're gonna

00:18:19,050 --> 00:18:22,740
keep our value up-to-date by using our

00:18:20,880 --> 00:18:26,070
state so our values gonna be our state

00:18:22,740 --> 00:18:28,170
and then we're gonna set color so colors

00:18:26,070 --> 00:18:31,440
are CSS you can say that using this

00:18:28,170 --> 00:18:34,650
style attribute so in react styles are

00:18:31,440 --> 00:18:38,190
set as a just plain JavaScript object so

00:18:34,650 --> 00:18:40,680
you can use jst Nemec literal to create

00:18:38,190 --> 00:18:45,800
a JavaScript object and then we can set

00:18:40,680 --> 00:18:49,320
the color is going to be if our state is

00:18:45,800 --> 00:18:52,500
dot for all so if every single character

00:18:49,320 --> 00:18:55,590
of this state is a letter we're gonna

00:18:52,500 --> 00:18:59,010
say it's green otherwise it's gonna be

00:18:55,590 --> 00:19:01,020
red so if all the characters or letters

00:18:59,010 --> 00:19:04,350
we're good if the user types in a number

00:19:01,020 --> 00:19:08,610
it's bad so ok compiled so now if we

00:19:04,350 --> 00:19:10,350
type in if we type in zoom in so if we

00:19:08,610 --> 00:19:11,670
type in just plain ol letters it's all

00:19:10,350 --> 00:19:14,550
green the moment we type in a number

00:19:11,670 --> 00:19:16,230
it's red and that's writing apps with

00:19:14,550 --> 00:19:18,030
slinky so that's your kind of super

00:19:16,230 --> 00:19:20,220
quick overview of how you can write apps

00:19:18,030 --> 00:19:21,600
but slinky and now you might be

00:19:20,220 --> 00:19:24,540
wondering okay that's great everything

00:19:21,600 --> 00:19:26,190
works but like how we rewrote some code

00:19:24,540 --> 00:19:28,170
how did it actually end up getting

00:19:26,190 --> 00:19:30,420
turned into this application that's

00:19:28,170 --> 00:19:31,700
keeping track refer state getting input

00:19:30,420 --> 00:19:35,550
from the user

00:19:31,700 --> 00:19:38,340
so first JSX when we looked at those

00:19:35,550 --> 00:19:39,900
examples of writing applications with

00:19:38,340 --> 00:19:43,320
JavaScript you saw that we could use

00:19:39,900 --> 00:19:44,220
this HTML syntax now this is not

00:19:43,320 --> 00:19:46,440
something that's part of regular

00:19:44,220 --> 00:19:48,720
JavaScript so the way it actually works

00:19:46,440 --> 00:19:50,280
is when you write your cody's and that's

00:19:48,720 --> 00:19:52,710
end times there's actually a compiler in

00:19:50,280 --> 00:19:55,920
between called babel and that is what's

00:19:52,710 --> 00:19:58,170
going to convert this syntax of having

00:19:55,920 --> 00:20:00,390
these HTML tags inside your code and

00:19:58,170 --> 00:20:02,190
convert it into just regular vanilla

00:20:00,390 --> 00:20:04,470
JavaScript so if you write something

00:20:02,190 --> 00:20:05,580
like this in a Java Script it gets

00:20:04,470 --> 00:20:08,309
turned into something like that

00:20:05,580 --> 00:20:09,989
and now this is a lot more familiar to

00:20:08,309 --> 00:20:12,029
us at just a regular method call and

00:20:09,989 --> 00:20:15,450
this is something that we can call into

00:20:12,029 --> 00:20:18,210
from Scala GS code so the way we call

00:20:15,450 --> 00:20:19,409
into that is we define a static thought

00:20:18,210 --> 00:20:21,539
over this so this is one of the great

00:20:19,409 --> 00:20:22,739
things about Scala GS is even if you're

00:20:21,539 --> 00:20:24,570
working with external javascript

00:20:22,739 --> 00:20:27,239
libraries you can still call into them

00:20:24,570 --> 00:20:29,220
using a static types so here we're using

00:20:27,239 --> 00:20:30,690
one of the kind of the newer features of

00:20:29,220 --> 00:20:32,519
Scala which is the ability to import

00:20:30,690 --> 00:20:34,529
from node modules so we're importing

00:20:32,519 --> 00:20:36,269
from the react module and then order to

00:20:34,529 --> 00:20:38,489
find it you can create an element you

00:20:36,269 --> 00:20:39,600
can use a string or an object when it's

00:20:38,489 --> 00:20:41,909
an object that means you're creating a

00:20:39,600 --> 00:20:44,549
component you can pass in properties and

00:20:41,909 --> 00:20:48,210
the children and it gives you a react

00:20:44,549 --> 00:20:50,039
element at the end so this works this is

00:20:48,210 --> 00:20:52,259
great we can create HTML nodes but what

00:20:50,039 --> 00:20:53,909
about components now components are much

00:20:52,259 --> 00:20:55,590
more kind of complicated you are

00:20:53,909 --> 00:20:58,320
actually creating a class that extends

00:20:55,590 --> 00:20:59,820
an external javascript type and then

00:20:58,320 --> 00:21:01,320
you're implementing methods for that

00:20:59,820 --> 00:21:03,960
type how do you generate something like

00:21:01,320 --> 00:21:05,940
this in Scala jazz now the really great

00:21:03,960 --> 00:21:07,799
thing is Scala G is defined

00:21:05,940 --> 00:21:10,019
skál just defined is a fairly recent

00:21:07,799 --> 00:21:12,809
addition to Scala GS and what this

00:21:10,019 --> 00:21:15,090
allows us to do is annotate Scala

00:21:12,809 --> 00:21:16,259
classes with this obstacle just defined

00:21:15,090 --> 00:21:17,879
and then at compile time

00:21:16,259 --> 00:21:22,259
Scala J's will actually convert this

00:21:17,879 --> 00:21:23,759
into a regular JavaScript class so we

00:21:22,259 --> 00:21:27,539
can do something like this where we

00:21:23,759 --> 00:21:31,200
define a component that is just a

00:21:27,539 --> 00:21:32,429
regular kind of Scala Scala gist native

00:21:31,200 --> 00:21:33,989
type so we're saying that we have a

00:21:32,429 --> 00:21:36,059
component this is part of the react

00:21:33,989 --> 00:21:38,369
library it takes just props as a

00:21:36,059 --> 00:21:41,249
constructor argument and so if you want

00:21:38,369 --> 00:21:43,710
to extend this but emit a JavaScript

00:21:41,249 --> 00:21:45,989
class instead of a Scala GS version of a

00:21:43,710 --> 00:21:49,139
class we can just use this

00:21:45,989 --> 00:21:51,779
ATS colleges to find annotation create

00:21:49,139 --> 00:21:55,409
this class and then extend and that gets

00:21:51,779 --> 00:21:56,759
turned into this when when you actually

00:21:55,409 --> 00:21:59,159
compile it it won't look exactly like

00:21:56,759 --> 00:22:02,639
this because this is using es6 syntax

00:21:59,159 --> 00:22:05,999
skull of outputs kind of more older ish

00:22:02,639 --> 00:22:07,649
JavaScript but you get what's equivalent

00:22:05,999 --> 00:22:09,929
to writing this in your react

00:22:07,649 --> 00:22:12,480
application so that's for salt now we

00:22:09,929 --> 00:22:14,100
can write components now another thing

00:22:12,480 --> 00:22:16,109
that when we were writing the our code

00:22:14,100 --> 00:22:18,629
you might have noticed this at react at

00:22:16,109 --> 00:22:18,880
the beginning and so the code kind of

00:22:18,629 --> 00:22:20,260
makes

00:22:18,880 --> 00:22:21,820
when you're looking at a okay I'm

00:22:20,260 --> 00:22:24,130
defining my props I'm passing in my name

00:22:21,820 --> 00:22:26,710
which was defined in my props type but

00:22:24,130 --> 00:22:28,540
there's if you kind of looked a little

00:22:26,710 --> 00:22:30,280
carefully a lot of the things that are

00:22:28,540 --> 00:22:32,200
going on in this example don't make

00:22:30,280 --> 00:22:34,510
sense there's no way this code should be

00:22:32,200 --> 00:22:35,950
compiling where is hello message to

00:22:34,510 --> 00:22:39,070
apply because we're calling hello

00:22:35,950 --> 00:22:40,330
message with parameters where is the

00:22:39,070 --> 00:22:42,430
companion object where is the apply

00:22:40,330 --> 00:22:43,870
method where is the react component

00:22:42,430 --> 00:22:45,520
class because if we're creating an

00:22:43,870 --> 00:22:46,630
instance of a react component there

00:22:45,520 --> 00:22:49,330
needs to be a react component class

00:22:46,630 --> 00:22:51,880
somewhere so kind of the answer to that

00:22:49,330 --> 00:22:53,350
is the act at react annotation is

00:22:51,880 --> 00:22:54,940
actually a macro annotation so this kind

00:22:53,350 --> 00:22:57,070
of goes back to this idea of macros

00:22:54,940 --> 00:22:58,870
being super powerful when used carefully

00:22:57,070 --> 00:23:01,090
so if you write something like this with

00:22:58,870 --> 00:23:02,290
add react class it gets transformed at

00:23:01,090 --> 00:23:04,870
compile time to something like this

00:23:02,290 --> 00:23:06,790
where you have this wrapper you define

00:23:04,870 --> 00:23:09,690
your props in there and then inside that

00:23:06,790 --> 00:23:12,760
you have your actual scala gist defined

00:23:09,690 --> 00:23:14,590
react component class and then it also

00:23:12,760 --> 00:23:18,040
generates apply methods for you to use

00:23:14,590 --> 00:23:19,690
now one important thing to note is even

00:23:18,040 --> 00:23:22,000
though this at react annotation is

00:23:19,690 --> 00:23:24,160
available it's not required and this

00:23:22,000 --> 00:23:25,960
code that it generates isn't just kind

00:23:24,160 --> 00:23:27,640
of what it means this is an actual code

00:23:25,960 --> 00:23:29,620
that you can just write instead so if

00:23:27,640 --> 00:23:31,420
you want to for your application to

00:23:29,620 --> 00:23:33,160
maybe reduce compile times or your

00:23:31,420 --> 00:23:35,140
developers are scared about using a lot

00:23:33,160 --> 00:23:38,290
of macros you can just choose to use

00:23:35,140 --> 00:23:40,120
this wrapper style and that's actually

00:23:38,290 --> 00:23:42,070
how slink you started out with is just

00:23:40,120 --> 00:23:46,660
having this style this is just pure

00:23:42,070 --> 00:23:49,330
Scala code no macros involved now so

00:23:46,660 --> 00:23:51,700
that's it for kind of the basics of how

00:23:49,330 --> 00:23:52,750
slinky works now one of the cool parts

00:23:51,700 --> 00:23:54,250
about slinky is working with the

00:23:52,750 --> 00:23:58,270
ecosystem because there are a lot of

00:23:54,250 --> 00:24:00,760
tools out there and it's really

00:23:58,270 --> 00:24:02,620
important for us as developers to not

00:24:00,760 --> 00:24:04,750
only kind of write the code for our

00:24:02,620 --> 00:24:06,010
product but also build on top of code

00:24:04,750 --> 00:24:08,760
that other people have worked so that

00:24:06,010 --> 00:24:12,220
our applications are as rich as possible

00:24:08,760 --> 00:24:14,920
so the main way that we work with

00:24:12,220 --> 00:24:16,720
external code is through external

00:24:14,920 --> 00:24:19,210
components so there are a lot of react

00:24:16,720 --> 00:24:21,370
components out there and we want to use

00:24:19,210 --> 00:24:22,930
them from our Scala GS code now it

00:24:21,370 --> 00:24:24,430
slinky that's super straightforward so

00:24:22,930 --> 00:24:28,000
for example let's say we wanted to use

00:24:24,430 --> 00:24:29,800
react router so react router is a super

00:24:28,000 --> 00:24:31,600
popular package for react that allows

00:24:29,800 --> 00:24:32,650
you to implement routing capability so

00:24:31,600 --> 00:24:34,300
basically if I

00:24:32,650 --> 00:24:35,860
on a specific path the users navigated

00:24:34,300 --> 00:24:38,110
to a path render this component and it

00:24:35,860 --> 00:24:41,590
allows you to link between things it's

00:24:38,110 --> 00:24:43,990
super powerful so we can import it so

00:24:41,590 --> 00:24:45,880
this is our regular Scala jazz importing

00:24:43,990 --> 00:24:48,340
from a node module we can say oh we have

00:24:45,880 --> 00:24:50,260
this route this is a reactor component

00:24:48,340 --> 00:24:53,260
and if we want to interface with this

00:24:50,260 --> 00:24:55,390
then it all we have to do is extend

00:24:53,260 --> 00:24:57,940
external component define a props type

00:24:55,390 --> 00:24:59,590
so the idea here is you're using a very

00:24:57,940 --> 00:25:01,480
similar API to what you use when you're

00:24:59,590 --> 00:25:02,890
writing components in Scala you again

00:25:01,480 --> 00:25:04,350
and just have to define the props type

00:25:02,890 --> 00:25:06,520
so that you have a statically typed

00:25:04,350 --> 00:25:07,960
interface and then you define what

00:25:06,520 --> 00:25:10,420
component to be actually creating an

00:25:07,960 --> 00:25:12,910
instance of so in this case we're saying

00:25:10,420 --> 00:25:14,890
it takes a path it takes the component

00:25:12,910 --> 00:25:16,780
now this is a interesting thing the

00:25:14,890 --> 00:25:19,960
component type here is actually supposed

00:25:16,780 --> 00:25:21,429
to be a reference to a react component

00:25:19,960 --> 00:25:23,860
class so not an instance of a component

00:25:21,429 --> 00:25:25,990
but a reference to it that react router

00:25:23,860 --> 00:25:28,179
can create an instance of itself and

00:25:25,990 --> 00:25:30,700
slinky actually supports this method of

00:25:28,179 --> 00:25:32,170
passing and component so it'll

00:25:30,700 --> 00:25:34,000
automatically take a reference to your

00:25:32,170 --> 00:25:36,370
kind of a slinky component wrapper and

00:25:34,000 --> 00:25:39,100
take that and convert it into a

00:25:36,370 --> 00:25:40,510
reference to the component class and you

00:25:39,100 --> 00:25:41,920
can also define things like default

00:25:40,510 --> 00:25:45,130
parameters and then those would just be

00:25:41,920 --> 00:25:47,260
passed on automatically so this is all

00:25:45,130 --> 00:25:49,480
great but we can't just pass a scholar

00:25:47,260 --> 00:25:51,520
object to a JavaScript component because

00:25:49,480 --> 00:25:52,990
Scala jazz has its own encoding for

00:25:51,520 --> 00:25:54,280
skull objects that isn't compatible with

00:25:52,990 --> 00:25:56,290
what JavaScript components are going to

00:25:54,280 --> 00:25:58,809
be expecting so in this case if we just

00:25:56,290 --> 00:25:59,920
took an instance of props and pass it

00:25:58,809 --> 00:26:01,570
into this react component you'll get

00:25:59,920 --> 00:26:06,190
lots of errors because it's nothing like

00:26:01,570 --> 00:26:07,720
what the shape it expects so if again if

00:26:06,190 --> 00:26:09,070
we took something like this it would

00:26:07,720 --> 00:26:12,730
look something like this and this is

00:26:09,070 --> 00:26:14,110
kind of optimized Scala GS code you get

00:26:12,730 --> 00:26:16,270
these properties they're optimized

00:26:14,110 --> 00:26:17,620
because skodje's is reducing your code

00:26:16,270 --> 00:26:19,059
but this isn't great for working with

00:26:17,620 --> 00:26:20,620
external components because this is

00:26:19,059 --> 00:26:23,950
nothing like what they expect they're

00:26:20,620 --> 00:26:25,420
expecting a path and a component so the

00:26:23,950 --> 00:26:27,970
solution that slinky has for this is

00:26:25,420 --> 00:26:30,160
writer so writers are a type class

00:26:27,970 --> 00:26:31,840
basically what they let you do is you

00:26:30,160 --> 00:26:33,670
can implicitly grab an instance of a

00:26:31,840 --> 00:26:35,290
writer and writers handle the process of

00:26:33,670 --> 00:26:37,600
taking scala types and converting them

00:26:35,290 --> 00:26:38,980
into java script types so now if we get

00:26:37,600 --> 00:26:41,679
this writer of props and this is

00:26:38,980 --> 00:26:44,140
automatically derived using john

00:26:41,679 --> 00:26:46,000
prettiest library magnolia so that

00:26:44,140 --> 00:26:47,620
handles generating this writer

00:26:46,000 --> 00:26:50,680
and then it you just called dot right

00:26:47,620 --> 00:26:53,140
with a scholar object and you generate

00:26:50,680 --> 00:26:57,000
this nice JavaScript object and then you

00:26:53,140 --> 00:26:59,110
can just pass that in to the component

00:26:57,000 --> 00:27:00,870
so now we've solved the problem of

00:26:59,110 --> 00:27:03,370
working with external components

00:27:00,870 --> 00:27:06,910
external components are extremely

00:27:03,370 --> 00:27:08,260
powerful because they let you there's so

00:27:06,910 --> 00:27:09,520
many great libraries out there for

00:27:08,260 --> 00:27:11,530
JavaScript they just allow you to

00:27:09,520 --> 00:27:13,780
eliminate large portions of your code so

00:27:11,530 --> 00:27:15,790
for example instead of writing your own

00:27:13,780 --> 00:27:17,650
router you can just use react router

00:27:15,790 --> 00:27:18,700
which is a fantastic library handles

00:27:17,650 --> 00:27:21,040
things like server-side rendering

00:27:18,700 --> 00:27:22,330
everything works great if you want to

00:27:21,040 --> 00:27:25,510
have a data layer let's say you're

00:27:22,330 --> 00:27:28,450
looking at using graph QL slinky works

00:27:25,510 --> 00:27:30,730
with reactor polo so you can use Apollo

00:27:28,450 --> 00:27:32,260
graph QL client and you can make graph

00:27:30,730 --> 00:27:35,590
QL queries and tie them into your react

00:27:32,260 --> 00:27:37,240
components through slinky code if you

00:27:35,590 --> 00:27:39,610
want to style your components maybe

00:27:37,240 --> 00:27:41,680
using a common set of styles that your

00:27:39,610 --> 00:27:43,000
organization has created you can just

00:27:41,680 --> 00:27:44,590
use stock components so styled

00:27:43,000 --> 00:27:47,140
components is another react library it

00:27:44,590 --> 00:27:48,940
just works with slinky if you want to

00:27:47,140 --> 00:27:50,830
render 3d objects that are being

00:27:48,940 --> 00:27:52,630
animated on your page at 60 frames per

00:27:50,830 --> 00:27:55,720
second maybe you're creating some super

00:27:52,630 --> 00:27:58,120
fancy app then you can use react three

00:27:55,720 --> 00:28:00,280
render which is a way to render 3d

00:27:58,120 --> 00:28:02,560
components from your react application

00:28:00,280 --> 00:28:04,000
and that just works at slinky so really

00:28:02,560 --> 00:28:05,440
this just allows you to tap into this

00:28:04,000 --> 00:28:07,090
whole world of libraries that people

00:28:05,440 --> 00:28:09,900
have already been developing for years

00:28:07,090 --> 00:28:14,560
for react from your skull jeaious code

00:28:09,900 --> 00:28:17,380
now build tools so build tools you have

00:28:14,560 --> 00:28:19,840
SBT but on the JavaScript side you also

00:28:17,380 --> 00:28:22,560
have web pack and thankfully on thanks

00:28:19,840 --> 00:28:26,040
to court is tool scala Jeff's bundler

00:28:22,560 --> 00:28:30,580
this is very easily solved you can

00:28:26,040 --> 00:28:32,740
define all of your settings for your web

00:28:30,580 --> 00:28:34,510
pack configuration in your build of SB t

00:28:32,740 --> 00:28:36,580
and then Scala just bundler handles the

00:28:34,510 --> 00:28:38,860
entire process of generating config for

00:28:36,580 --> 00:28:40,510
your web pack running it and you're done

00:28:38,860 --> 00:28:42,400
so I'm not going to go into too many

00:28:40,510 --> 00:28:45,970
details of this because it just works

00:28:42,400 --> 00:28:47,410
and it's fantastic now another cool

00:28:45,970 --> 00:28:49,570
thing that slinky supports is reverse

00:28:47,410 --> 00:28:51,970
Interop and this is especially important

00:28:49,570 --> 00:28:53,380
if you're introducing scala GS to an

00:28:51,970 --> 00:28:56,080
organization that already has an

00:28:53,380 --> 00:28:57,190
application using plain JavaScript so if

00:28:56,080 --> 00:28:58,420
you're already if you already have a

00:28:57,190 --> 00:28:59,299
bunch of clients that devs we're using

00:28:58,420 --> 00:29:01,249
react

00:28:59,299 --> 00:29:03,379
and JavaScript but you want to introduce

00:29:01,249 --> 00:29:05,840
colleges to them slinky supports the

00:29:03,379 --> 00:29:08,690
ability for JavaScript code to call into

00:29:05,840 --> 00:29:11,239
Scala GS components so let's take a look

00:29:08,690 --> 00:29:18,019
at it so I have this demo it's open

00:29:11,239 --> 00:29:22,610
source and so if I open this up I can

00:29:18,019 --> 00:29:27,369
open this up into BS code launch a

00:29:22,610 --> 00:29:29,659
server so wow this is really big ok so

00:29:27,369 --> 00:29:32,389
let's take a look at this code so this

00:29:29,659 --> 00:29:34,070
is what your client side dev would be

00:29:32,389 --> 00:29:35,359
writing so let's say we wrote a

00:29:34,070 --> 00:29:36,769
component app let's take a look at this

00:29:35,359 --> 00:29:40,519
College s code first actually

00:29:36,769 --> 00:29:42,440
so we have our component app this is the

00:29:40,519 --> 00:29:46,159
same hello world app that we were

00:29:42,440 --> 00:29:48,529
looking to looking at in the beginning

00:29:46,159 --> 00:29:50,809
except now we change the props to take

00:29:48,529 --> 00:29:52,519
JSX message just to show that we're

00:29:50,809 --> 00:29:54,409
actually passing in data from JavaScript

00:29:52,519 --> 00:29:56,239
into Scala GS code so here we're gonna

00:29:54,409 --> 00:29:59,210
be rendering some message based on what

00:29:56,239 --> 00:30:02,119
the GS xcode says and then all you have

00:29:59,210 --> 00:30:05,299
to do to export this to jump to be

00:30:02,119 --> 00:30:07,669
accessible in javascript code is you

00:30:05,299 --> 00:30:10,609
define this just export and you say that

00:30:07,669 --> 00:30:11,779
this app is my app so that you just have

00:30:10,609 --> 00:30:13,249
to do this for every component that you

00:30:11,779 --> 00:30:15,919
want to make available to your

00:30:13,249 --> 00:30:18,320
JavaScript developers now from the

00:30:15,919 --> 00:30:20,179
perspective of a JavaScript developer so

00:30:18,320 --> 00:30:22,700
and this is really important if you want

00:30:20,179 --> 00:30:25,909
to come incrementally adopt slinky you

00:30:22,700 --> 00:30:27,470
want the experience using slinky for

00:30:25,909 --> 00:30:29,059
JavaScript to be no different than just

00:30:27,470 --> 00:30:30,259
using regular react components you don't

00:30:29,059 --> 00:30:32,570
want to force some developers to learn

00:30:30,259 --> 00:30:34,639
anything new about oh I have to come up

00:30:32,570 --> 00:30:38,299
with a special shape of my data for

00:30:34,639 --> 00:30:40,580
skull juice and here and we just do

00:30:38,299 --> 00:30:42,499
exactly a writer code exactly the way

00:30:40,580 --> 00:30:44,509
you would do it for if you're using any

00:30:42,499 --> 00:30:46,940
regular JavaScript library you import

00:30:44,509 --> 00:30:48,859
app from Scala GS and then you can just

00:30:46,940 --> 00:30:53,419
render your app and everything just

00:30:48,859 --> 00:30:56,419
works so if I open up this I can launch

00:30:53,419 --> 00:31:02,029
my web dev server so this is using Scala

00:30:56,419 --> 00:31:05,840
just bundler so it is gonna be bundling

00:31:02,029 --> 00:31:07,730
things ok so it launched and oh I'm

00:31:05,840 --> 00:31:11,409
already running a web pack dev server so

00:31:07,730 --> 00:31:11,409
let me stop this one

00:31:12,300 --> 00:31:21,940
and let me launch this one for real this

00:31:19,450 --> 00:31:24,430
time okay cool so now if I reload my

00:31:21,940 --> 00:31:26,530
page the message passed in from gsx is

00:31:24,430 --> 00:31:29,830
hello and that's what we passed in from

00:31:26,530 --> 00:31:32,260
our JSX code right here so if you're

00:31:29,830 --> 00:31:33,400
looking at introducing Scala GS to your

00:31:32,260 --> 00:31:36,130
clients of developers this is a great

00:31:33,400 --> 00:31:40,600
way to for them to get started maybe in

00:31:36,130 --> 00:31:45,430
one component at a time all right that

00:31:40,600 --> 00:31:48,850
is reverse interim now beyond the web so

00:31:45,430 --> 00:31:51,280
when we introduced this idea of the

00:31:48,850 --> 00:31:53,080
structure of a react allocation remember

00:31:51,280 --> 00:31:55,630
that it was props and states to a view

00:31:53,080 --> 00:31:57,490
not props and states to HTML and this is

00:31:55,630 --> 00:31:59,860
something that's been this kind of

00:31:57,490 --> 00:32:01,810
concept of a view can be mean more than

00:31:59,860 --> 00:32:05,620
HTML has been used a lot recently with

00:32:01,810 --> 00:32:07,180
tools like react native and react VR so

00:32:05,620 --> 00:32:11,320
let's take a look at a couple examples

00:32:07,180 --> 00:32:13,450
so slinky can actually be used to create

00:32:11,320 --> 00:32:15,030
native applications so I'm gonna go to

00:32:13,450 --> 00:32:16,960
skull it is and we're gonna create

00:32:15,030 --> 00:32:18,850
hopefully everything will work there's

00:32:16,960 --> 00:32:20,680
gonna be a lot of steps here but we're

00:32:18,850 --> 00:32:23,530
gonna be creating a native iOS

00:32:20,680 --> 00:32:25,210
application from scratch with Scala so

00:32:23,530 --> 00:32:28,690
let's get started so we're gonna do

00:32:25,210 --> 00:32:30,970
create react native Scala app so we get

00:32:28,690 --> 00:32:33,040
started SBT will boot up and it will

00:32:30,970 --> 00:32:34,300
load load the template so we're using

00:32:33,040 --> 00:32:36,730
the react native library here which

00:32:34,300 --> 00:32:40,240
allows you to render native components

00:32:36,730 --> 00:32:44,680
in apps using react components so we can

00:32:40,240 --> 00:32:49,450
do Scala and native Scala Scala today is

00:32:44,680 --> 00:32:53,410
native app ok so we can open this up

00:32:49,450 --> 00:32:55,060
Scala is native app we can open it up so

00:32:53,410 --> 00:32:59,700
if we look at the code and I'll launch

00:32:55,060 --> 00:33:02,890
SBT in the meantime and run npm install

00:32:59,700 --> 00:33:05,320
to get our dependencies so if we look at

00:33:02,890 --> 00:33:08,830
our code this is what it looks like you

00:33:05,320 --> 00:33:11,290
have very similar code in fact when

00:33:08,830 --> 00:33:13,000
slinky gain support for react native it

00:33:11,290 --> 00:33:14,800
actually required no changes to the core

00:33:13,000 --> 00:33:16,930
libraries so that's one of the cool

00:33:14,800 --> 00:33:18,850
things with slinky is we were actually

00:33:16,930 --> 00:33:20,740
able to gain support for react native

00:33:18,850 --> 00:33:22,270
using just the external components API

00:33:20,740 --> 00:33:23,690
so this is something that you could have

00:33:22,270 --> 00:33:25,940
implemented in you

00:33:23,690 --> 00:33:27,169
user code if you wanted to use react

00:33:25,940 --> 00:33:28,970
native before slinky had official

00:33:27,169 --> 00:33:30,649
support for it so and then we're going

00:33:28,970 --> 00:33:33,529
to register a component saying oh our

00:33:30,649 --> 00:33:36,019
native app is app so our app is just a

00:33:33,529 --> 00:33:37,700
regular react component I'm here now

00:33:36,019 --> 00:33:39,259
instead of using HTML elements you use

00:33:37,700 --> 00:33:41,360
these native components so we're going

00:33:39,259 --> 00:33:42,740
to be displaying an image you style it

00:33:41,360 --> 00:33:43,850
we're going to be disciplining some text

00:33:42,740 --> 00:33:44,990
and then we're going to do a button and

00:33:43,850 --> 00:33:46,820
every time you tap the button it's going

00:33:44,990 --> 00:33:50,120
to increment a counter we're going to be

00:33:46,820 --> 00:33:54,139
using that counter to render the counter

00:33:50,120 --> 00:33:59,259
right here so okay everything installed

00:33:54,139 --> 00:34:04,159
now we can compile our code up GS and

00:33:59,259 --> 00:34:06,559
once that finishes okay so it's fast

00:34:04,159 --> 00:34:11,419
optimizing and we're done

00:34:06,559 --> 00:34:14,750
okay so now we can do npm run iOS and if

00:34:11,419 --> 00:34:17,240
all goes well we should have a native

00:34:14,750 --> 00:34:21,139
iOS app running in our simulator in a

00:34:17,240 --> 00:34:24,079
couple 30 seconds maybe because it has

00:34:21,139 --> 00:34:26,899
to build all the native code required

00:34:24,079 --> 00:34:32,329
for react native from source so might

00:34:26,899 --> 00:34:35,450
take a bit okay

00:34:32,329 --> 00:34:42,530
I think this might take a little bit of

00:34:35,450 --> 00:34:47,379
time so see our simulator is running so

00:34:42,530 --> 00:34:50,510
at least that's there let's see okay

00:34:47,379 --> 00:34:53,089
it's doing stuff I think I think well

00:34:50,510 --> 00:34:59,630
and we can stay here and just watch it

00:34:53,089 --> 00:35:01,250
scroll by for a little bit okay so doing

00:34:59,630 --> 00:35:03,800
more compilation this is only something

00:35:01,250 --> 00:35:05,980
that has to happen once whenever you're

00:35:03,800 --> 00:35:08,599
getting started with a react native app

00:35:05,980 --> 00:35:10,250
so all this native code is all things

00:35:08,599 --> 00:35:12,680
provided by Facebook

00:35:10,250 --> 00:35:15,530
it's the glue between the JavaScript

00:35:12,680 --> 00:35:16,849
code that's going to be run in kind of a

00:35:15,530 --> 00:35:18,530
separate process and then what's

00:35:16,849 --> 00:35:20,660
actually rendering the native components

00:35:18,530 --> 00:35:23,720
because here this isn't a webview

00:35:20,660 --> 00:35:26,060
this isn't using something like ionic

00:35:23,720 --> 00:35:28,670
where you're generating HTML elements

00:35:26,060 --> 00:35:31,280
that are just styled to look like native

00:35:28,670 --> 00:35:32,480
elements these are actual regular and

00:35:31,280 --> 00:35:34,430
native elements that are gonna be

00:35:32,480 --> 00:35:35,810
writing okay so we have our bundler

00:35:34,430 --> 00:35:37,490
ready so this is kind of like a web tag

00:35:35,810 --> 00:35:38,480
but it's react native because

00:35:37,490 --> 00:35:42,740
spirt decided they wanted to create

00:35:38,480 --> 00:35:44,180
their own bundler so we had that it is

00:35:42,740 --> 00:35:45,200
loading the dependency so this takes a

00:35:44,180 --> 00:35:46,430
little bit of time the first time

00:35:45,200 --> 00:35:48,560
because that's to load all if your node

00:35:46,430 --> 00:35:50,060
modules and pack them together but the

00:35:48,560 --> 00:35:53,740
bundler is incremental so it's a very

00:35:50,060 --> 00:35:53,740
fast as soon as you get that first run

00:35:53,770 --> 00:36:07,010
okay what is it doing now okay it's

00:35:56,390 --> 00:36:10,690
still compiling more stuff okay soon I

00:36:07,010 --> 00:36:10,690
think it's almost done

00:36:15,670 --> 00:36:22,930
okay okay I think we'll probably switch

00:36:20,980 --> 00:36:25,990
back to the slides for a little bit just

00:36:22,930 --> 00:36:28,089
talk more about what slinky lets you do

00:36:25,990 --> 00:36:30,520
until it's done

00:36:28,089 --> 00:36:32,589
Oh actually might be done yeah I think

00:36:30,520 --> 00:36:35,230
it's done okay yeah okay it's some

00:36:32,589 --> 00:36:37,000
sewing okay so now our app is there it's

00:36:35,230 --> 00:36:38,260
going to be loading our packages so this

00:36:37,000 --> 00:36:39,970
is something else it happens the first

00:36:38,260 --> 00:36:44,140
time or it's loading all if the modules

00:36:39,970 --> 00:36:45,910
required so and as soon as all that's

00:36:44,140 --> 00:36:48,180
done loading this is not something your

00:36:45,910 --> 00:36:51,400
users going to see every time thankfully

00:36:48,180 --> 00:36:52,809
I'm never we're done so now we have an

00:36:51,400 --> 00:36:55,270
application that we just got started

00:36:52,809 --> 00:36:58,569
with using Scala playing Scala code

00:36:55,270 --> 00:37:01,030
running in iOS it also runs in Android

00:36:58,569 --> 00:37:03,130
it also runs on Android TV Android

00:37:01,030 --> 00:37:06,309
watches anywhere you can think of it

00:37:03,130 --> 00:37:08,980
even now works on Windows as a native

00:37:06,309 --> 00:37:10,900
app and on Xboxes thanks to Microsoft to

00:37:08,980 --> 00:37:13,839
work on bringing Microsoft devices to

00:37:10,900 --> 00:37:16,930
react native so use slinky for whatever

00:37:13,839 --> 00:37:19,569
platform you can dream off it also

00:37:16,930 --> 00:37:21,640
supports VR if you're interested in

00:37:19,569 --> 00:37:23,980
seeing a demo I can show after the talk

00:37:21,640 --> 00:37:27,910
but for the sake of time I'm gonna skip

00:37:23,980 --> 00:37:29,410
over that demo so lastly getting the

00:37:27,910 --> 00:37:31,299
full developer experience now this is a

00:37:29,410 --> 00:37:34,900
kind of the last kind of cornerstone of

00:37:31,299 --> 00:37:36,400
slinky as a framework the first one is

00:37:34,900 --> 00:37:38,650
hot reloading so that's something we saw

00:37:36,400 --> 00:37:40,089
when we were doing the initial demo with

00:37:38,650 --> 00:37:41,020
working with slinky on the web hot

00:37:40,089 --> 00:37:44,079
reloading is actually something that

00:37:41,020 --> 00:37:45,730
also works with native so as soon as you

00:37:44,079 --> 00:37:48,520
change your app it'll immediately

00:37:45,730 --> 00:37:49,990
compile it will get uploaded to your

00:37:48,520 --> 00:37:51,819
application and without losing your

00:37:49,990 --> 00:37:54,640
existing application state it can update

00:37:51,819 --> 00:37:56,020
all of your UI so let's say you have an

00:37:54,640 --> 00:37:57,309
instance of your skull just code you

00:37:56,020 --> 00:37:59,950
have your state defined and let's say

00:37:57,309 --> 00:38:01,599
you make some modifications in your new

00:37:59,950 --> 00:38:03,190
instance of Scala just code your

00:38:01,599 --> 00:38:04,569
properties might actually be under

00:38:03,190 --> 00:38:06,880
different names because of the way the

00:38:04,569 --> 00:38:08,859
Scala just optimizer works your

00:38:06,880 --> 00:38:10,839
properties can be emitted under

00:38:08,859 --> 00:38:13,059
different keys than what they were in a

00:38:10,839 --> 00:38:15,609
previous instance so if we just try to

00:38:13,059 --> 00:38:17,890
directly transfer over our state between

00:38:15,609 --> 00:38:20,049
two two instances of Scala GS code this

00:38:17,890 --> 00:38:21,819
is not going to work so what ends up

00:38:20,049 --> 00:38:22,960
happening is for most colleges apps you

00:38:21,819 --> 00:38:26,230
just have to reload the page every time

00:38:22,960 --> 00:38:29,230
you update your code so slinkys answer

00:38:26,230 --> 00:38:33,010
to this is first what we can do is take

00:38:29,230 --> 00:38:35,619
our our object in our old instance of

00:38:33,010 --> 00:38:37,300
Scala JS code use the writer that we

00:38:35,619 --> 00:38:38,740
developed for external components

00:38:37,300 --> 00:38:40,480
convert it into a regular JavaScript

00:38:38,740 --> 00:38:42,220
object so we have text and count now

00:38:40,480 --> 00:38:44,680
this is a regular javascript object

00:38:42,220 --> 00:38:46,869
there's nothing tied into whatever Scala

00:38:44,680 --> 00:38:48,970
GS picked for the property names so this

00:38:46,869 --> 00:38:51,280
is safe to transfer over into the new

00:38:48,970 --> 00:38:53,109
instance of Scala just kid now the

00:38:51,280 --> 00:38:55,200
counterpart to a write writer is a

00:38:53,109 --> 00:38:58,810
reader so we can take our reader and

00:38:55,200 --> 00:39:01,270
transfer our code back into the new

00:38:58,810 --> 00:39:03,160
shape that skål just expects and this

00:39:01,270 --> 00:39:04,420
reader is going to be defined in the new

00:39:03,160 --> 00:39:05,770
instance of psychologists code that's

00:39:04,420 --> 00:39:08,590
why it knows what the properties need to

00:39:05,770 --> 00:39:10,390
be and so by doing this kind of going

00:39:08,590 --> 00:39:12,160
around with the JavaScript objects were

00:39:10,390 --> 00:39:15,730
able to preserve all this data for

00:39:12,160 --> 00:39:21,160
application and every time we update to

00:39:15,730 --> 00:39:22,990
a new version of Scala code now another

00:39:21,160 --> 00:39:27,130
thing that there is

00:39:22,990 --> 00:39:29,859
Scala J's react is the original react

00:39:27,130 --> 00:39:31,630
interface to scholars it was the first

00:39:29,859 --> 00:39:33,570
one to kind of develop this idea that

00:39:31,630 --> 00:39:36,640
hey maybe we can use react from Scala GS

00:39:33,570 --> 00:39:38,380
so if you are already using a Scala

00:39:36,640 --> 00:39:40,150
Geist react and you want to introduce

00:39:38,380 --> 00:39:42,220
linky code there's actually a really

00:39:40,150 --> 00:39:44,890
easy way to do that with this interrupt

00:39:42,220 --> 00:39:46,720
package that's provided by slinky so you

00:39:44,890 --> 00:39:48,490
can take slinky elements so for example

00:39:46,720 --> 00:39:50,560
this div is being rendered by slinky and

00:39:48,490 --> 00:39:52,900
you can just call dot - ecologist react

00:39:50,560 --> 00:39:55,180
and it'll because slinky emits regular

00:39:52,900 --> 00:39:57,550
react elements it can just be treated as

00:39:55,180 --> 00:39:59,109
kind of an external component from the

00:39:57,550 --> 00:40:01,960
perspective Scala just reacts colleges

00:39:59,109 --> 00:40:03,970
react can just take this in and you can

00:40:01,960 --> 00:40:05,710
do the reverse you can take an element

00:40:03,970 --> 00:40:10,359
rendered by scala gist react and convert

00:40:05,710 --> 00:40:12,400
back to slinky so in conclusion slinky

00:40:10,359 --> 00:40:14,140
leti is react from skodje's code with

00:40:12,400 --> 00:40:17,770
existing Scala library so we use salt

00:40:14,140 --> 00:40:20,470
using things like s SBT for this you can

00:40:17,770 --> 00:40:22,510
use any libraries with the template app

00:40:20,470 --> 00:40:24,010
if you try it out you'll see that we

00:40:22,510 --> 00:40:25,690
have unit tests written for react

00:40:24,010 --> 00:40:26,950
components with Scala tests so you can

00:40:25,690 --> 00:40:28,780
use anything that you're used to using

00:40:26,950 --> 00:40:30,580
in Scala code you can also use

00:40:28,780 --> 00:40:32,140
javascript libraries and tools and so

00:40:30,580 --> 00:40:34,119
you can use things like react native you

00:40:32,140 --> 00:40:35,800
can use things like web pack or even the

00:40:34,119 --> 00:40:37,450
metro bundler developed by Facebook and

00:40:35,800 --> 00:40:38,859
you have a developer experience that

00:40:37,450 --> 00:40:40,930
that's as great as JavaScript so you

00:40:38,859 --> 00:40:43,030
have things like hot reloading you have

00:40:40,930 --> 00:40:45,640
access to the full developer tools

00:40:43,030 --> 00:40:47,650
at anytime and so you can be as

00:40:45,640 --> 00:40:49,810
productive as you would be in JavaScript

00:40:47,650 --> 00:40:51,310
but you have all the static typing now

00:40:49,810 --> 00:40:54,490
and all the great features that scull

00:40:51,310 --> 00:40:56,290
offers so you can get started today so

00:40:54,490 --> 00:40:58,630
the docks are available at slinky dodge

00:40:56,290 --> 00:40:59,920
to dodge me if you actually take a look

00:40:58,630 --> 00:41:01,420
at this website this shows off some of

00:40:59,920 --> 00:41:04,120
the more advanced capabilities of slinky

00:41:01,420 --> 00:41:06,790
so the docks are implemented with slinky

00:41:04,120 --> 00:41:07,780
as a react application but when you load

00:41:06,790 --> 00:41:09,900
it you'll see that everything's

00:41:07,780 --> 00:41:11,860
instantly loaded because this uses

00:41:09,900 --> 00:41:13,690
pre-rendering so we actually render all

00:41:11,860 --> 00:41:16,090
four react components to a static site

00:41:13,690 --> 00:41:17,830
ahead of time and then use advanced

00:41:16,090 --> 00:41:20,560
react features like hydration to make

00:41:17,830 --> 00:41:22,780
our app interactive as soon as loads you

00:41:20,560 --> 00:41:25,450
can check out the source at github comm

00:41:22,780 --> 00:41:27,790
slash to dodge slash slinky so we're

00:41:25,450 --> 00:41:31,150
always looking for new additions to

00:41:27,790 --> 00:41:32,920
slinky things like keep more

00:41:31,150 --> 00:41:36,220
capabilities with react native or react

00:41:32,920 --> 00:41:38,320
VR or improvements to slinkys API and

00:41:36,220 --> 00:41:39,850
then we also have a chat community where

00:41:38,320 --> 00:41:42,010
we kind of answer each other's questions

00:41:39,850 --> 00:41:44,050
and discuss new features for slinky on

00:41:42,010 --> 00:41:45,490
Gitter but the easiest way to get

00:41:44,050 --> 00:41:46,900
started with slinky is with this

00:41:45,490 --> 00:41:48,420
template and it gets you started with

00:41:46,900 --> 00:41:52,060
everything you need a full build for

00:41:48,420 --> 00:41:54,190
both local dev and also different

00:41:52,060 --> 00:41:56,680
creating production bundles so you can

00:41:54,190 --> 00:41:58,450
get straight with SB team you now if you

00:41:56,680 --> 00:42:01,840
were interested in seeing how slinky

00:41:58,450 --> 00:42:03,820
works at a large scale so you can my dad

00:42:01,840 --> 00:42:05,560
is giving another talk today so the

00:42:03,820 --> 00:42:07,450
product he's been developing in his

00:42:05,560 --> 00:42:09,160
company is actually fully implemented

00:42:07,450 --> 00:42:12,910
with slinky and this is a massive

00:42:09,160 --> 00:42:17,500
application this is it has like almost

00:42:12,910 --> 00:42:20,440
like 800 kilobytes of JavaScript gzipped

00:42:17,500 --> 00:42:22,690
so it's a very large application all

00:42:20,440 --> 00:42:26,350
implemented with slinky so you can see

00:42:22,690 --> 00:42:29,010
kind of how slinky scales up to a larger

00:42:26,350 --> 00:42:33,160
application in this talk later today and

00:42:29,010 --> 00:42:36,640
I can answer any questions ok I think

00:42:33,160 --> 00:42:44,100
there's a microphone so I guess maybe

00:42:36,640 --> 00:42:48,670
like a lion head right so regarding the

00:42:44,100 --> 00:42:51,460
developer debugging experience in terms

00:42:48,670 --> 00:42:53,030
of iterating and seeing the hot reload

00:42:51,460 --> 00:42:55,640
recompile

00:42:53,030 --> 00:42:56,810
and also just setting breakpoints and

00:42:55,640 --> 00:43:01,310
stuff like that can you talk a little

00:42:56,810 --> 00:43:04,490
bit yeah so so breakpoints work I

00:43:01,310 --> 00:43:06,560
actually don't have it set up so with

00:43:04,490 --> 00:43:09,109
breakpoints okay so if we wanted to

00:43:06,560 --> 00:43:10,910
actually we can try this so if we wanted

00:43:09,109 --> 00:43:14,180
to add a breakpoint okay this might be a

00:43:10,910 --> 00:43:16,609
little harder maybe we can try something

00:43:14,180 --> 00:43:18,290
show app source so if we go to app

00:43:16,609 --> 00:43:20,180
source we can see that we have our

00:43:18,290 --> 00:43:22,520
application defined here so for example

00:43:20,180 --> 00:43:27,770
we could probably grab like oh when we

00:43:22,520 --> 00:43:28,970
call render so if I reload my page so

00:43:27,770 --> 00:43:30,530
you can see it's paused in the debugger

00:43:28,970 --> 00:43:33,740
whenever we're trying to render our app

00:43:30,530 --> 00:43:36,710
you can actually enable source Maps

00:43:33,740 --> 00:43:38,150
first ljs that lets you debug with your

00:43:36,710 --> 00:43:40,760
original scholar code if that makes it a

00:43:38,150 --> 00:43:45,040
lot easier and then also things like if

00:43:40,760 --> 00:43:48,680
you want to debug your app you because

00:43:45,040 --> 00:43:50,000
that's actually so this in this case we

00:43:48,680 --> 00:43:51,530
don't have to state but if you had state

00:43:50,000 --> 00:43:53,000
you can actually within the dev tools

00:43:51,530 --> 00:43:54,530
modify that state and sync you will

00:43:53,000 --> 00:43:56,829
immediately respond to that so if you

00:43:54,530 --> 00:44:00,200
want to try out different data as inputs

00:43:56,829 --> 00:44:01,790
in terms of the recompile time oh yeah

00:44:00,200 --> 00:44:03,740
recompile times okay so this varies a

00:44:01,790 --> 00:44:06,290
lot it really depends on the size of

00:44:03,740 --> 00:44:09,349
your application so for getting started

00:44:06,290 --> 00:44:11,089
with a smaller app I see compile times

00:44:09,349 --> 00:44:13,190
maybe like 2 or 3 seconds because of

00:44:11,089 --> 00:44:14,000
scholars incremental compiler when

00:44:13,190 --> 00:44:16,250
you're dealing with much larger

00:44:14,000 --> 00:44:19,730
applications so in my dad stock it can

00:44:16,250 --> 00:44:21,500
take a little bit longer but overall

00:44:19,730 --> 00:44:23,960
just because of that Vantage is a Scala

00:44:21,500 --> 00:44:26,180
I think it's well worth it to wait a

00:44:23,960 --> 00:44:28,369
couple seconds longer maybe take a sip

00:44:26,180 --> 00:44:30,319
of your coffee and then see y'all if

00:44:28,369 --> 00:44:34,910
your code in action without any runtime

00:44:30,319 --> 00:44:40,640
errors thank you yeah any other

00:44:34,910 --> 00:44:43,220
questions yeah we switched already yarn

00:44:40,640 --> 00:44:45,730
recently because the front end we broke

00:44:43,220 --> 00:44:45,730
it up into

00:44:47,000 --> 00:44:52,500
experience using yarn instead of ambien

00:44:49,980 --> 00:44:54,900
yeah sociologist bundler has full

00:44:52,500 --> 00:44:56,970
support for yarn so I think this setting

00:44:54,900 --> 00:44:58,920
is just used yarn clone equal true and

00:44:56,970 --> 00:45:03,030
you're done everything uses yarn so

00:44:58,920 --> 00:45:04,560
everything just works hey yeah um are

00:45:03,030 --> 00:45:05,970
you looking at building any maven

00:45:04,560 --> 00:45:08,370
plugins or anything I know a lot of big

00:45:05,970 --> 00:45:12,900
orgs it's tough to sometimes get SBT as

00:45:08,370 --> 00:45:16,260
your build tool yeah so I guess slinky

00:45:12,900 --> 00:45:18,270
works in theory with maven because

00:45:16,260 --> 00:45:21,780
slinky itself doesn't require any

00:45:18,270 --> 00:45:23,460
special kind of build plugins it uses

00:45:21,780 --> 00:45:25,350
macro paradise but that already

00:45:23,460 --> 00:45:27,240
supported by maven it just a compiler

00:45:25,350 --> 00:45:30,870
plugin if you're using the add react

00:45:27,240 --> 00:45:33,360
macro annotation but other than that

00:45:30,870 --> 00:45:35,550
things should work I guess in terms of

00:45:33,360 --> 00:45:37,980
bundling applications you might need

00:45:35,550 --> 00:45:39,420
something special it does work if you if

00:45:37,980 --> 00:45:41,040
you don't want to use Scala just bundle

00:45:39,420 --> 00:45:43,500
you can also just define a web config

00:45:41,040 --> 00:45:45,090
yourself and do everything the only

00:45:43,500 --> 00:45:47,700
thing this colleges bundler gives you is

00:45:45,090 --> 00:45:49,200
the ability to define stuff from your

00:45:47,700 --> 00:45:51,870
builder SBT and have everything

00:45:49,200 --> 00:45:59,040
automatically tied together but

00:45:51,870 --> 00:46:00,950
everything should work for me then I'm

00:45:59,040 --> 00:46:04,020
just curious about like the bundle size

00:46:00,950 --> 00:46:06,500
that results because I know we've used I

00:46:04,020 --> 00:46:09,270
guess Scala

00:46:06,500 --> 00:46:11,400
reacts ecologist they're like the other

00:46:09,270 --> 00:46:13,320
life and one of the problems was that

00:46:11,400 --> 00:46:15,900
the bundle size was huge because it had

00:46:13,320 --> 00:46:17,310
to support conversion and then like the

00:46:15,900 --> 00:46:22,200
other thing we wanted to do was code

00:46:17,310 --> 00:46:24,780
splitting yeah okay so the first one so

00:46:22,200 --> 00:46:26,100
if we go to slinky touch on me this is

00:46:24,780 --> 00:46:28,980
the doc so I guess this is kind of a

00:46:26,100 --> 00:46:32,790
size of bullish application so the

00:46:28,980 --> 00:46:35,220
bundle is let's see how do I see how big

00:46:32,790 --> 00:46:35,940
it is I think oh it cached let me just

00:46:35,220 --> 00:46:39,450
say oh my gosh

00:46:35,940 --> 00:46:40,770
so it is two point two megabytes without

00:46:39,450 --> 00:46:42,900
gzipping so that's not what your

00:46:40,770 --> 00:46:44,070
browser's gonna be loading it's 684

00:46:42,900 --> 00:46:47,370
kilobytes of what you're actually gonna

00:46:44,070 --> 00:46:49,050
be loading now this is pretty good it's

00:46:47,370 --> 00:46:51,090
actually pretty comparable to what

00:46:49,050 --> 00:46:51,780
you'll see in production and react

00:46:51,090 --> 00:46:54,360
applications

00:46:51,780 --> 00:46:56,920
the thing with Scala Jass is you usually

00:46:54,360 --> 00:46:58,780
get a pretty large initial hit for

00:46:56,920 --> 00:47:00,610
using skodje's so your application

00:46:58,780 --> 00:47:02,830
bundle would start out large but it

00:47:00,610 --> 00:47:03,610
grows pretty slowly after that because

00:47:02,830 --> 00:47:06,610
you already have to all your

00:47:03,610 --> 00:47:09,430
dependencies in now here if you like if

00:47:06,610 --> 00:47:11,740
you notice I reload the page and it's

00:47:09,430 --> 00:47:13,930
pretty instant all the content is there

00:47:11,740 --> 00:47:15,760
immediately so I'm here I'm actually

00:47:13,930 --> 00:47:17,260
using pre rendering so that's something

00:47:15,760 --> 00:47:18,700
that makes your application a lot more

00:47:17,260 --> 00:47:20,890
snappier for your user so what you can

00:47:18,700 --> 00:47:24,360
do is have the content immediately there

00:47:20,890 --> 00:47:26,200
and then make it interactive a couple

00:47:24,360 --> 00:47:30,640
seconds after that when your bundle

00:47:26,200 --> 00:47:34,240
actually loads yeah so I I think we need

00:47:30,640 --> 00:47:37,030
a wrap-up but I for quickly answering

00:47:34,240 --> 00:47:38,680
bundle splitting unfortunately Scala GS

00:47:37,030 --> 00:47:40,270
does not emit code that is super

00:47:38,680 --> 00:47:42,400
compatible with bundle splitting at the

00:47:40,270 --> 00:47:44,530
moment my dad talks about that well more

00:47:42,400 --> 00:47:46,270
hopefully Scala G is who will change in

00:47:44,530 --> 00:47:49,120
the future to produce both the bulb

00:47:46,270 --> 00:47:49,360
bundles but not right now but yeah I get

00:47:49,120 --> 00:47:50,350
it

00:47:49,360 --> 00:47:52,300
I'll be I'll be hanging out in the

00:47:50,350 --> 00:47:54,110
hallway outside so I can answer more

00:47:52,300 --> 00:47:59,079
questions but thank you

00:47:54,110 --> 00:47:59,079

YouTube URL: https://www.youtube.com/watch?v=8QK00wfQDGg


