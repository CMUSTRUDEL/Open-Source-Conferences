Title: Meet Bloop and Get More Productive with Scala by Martin Duhem and Vicente Cantero Jorge
Publication date: 2018-09-22
Playlist: Scala Days New York 2018
Description: 
	This video was recorded at Scala Days New York 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://na.scaladays.org/schedule/meet-bloop-and-get-more-productive-with-scala
Captions: 
	00:00:05,190 --> 00:00:10,750
we are here today to talk about bloop

00:00:08,100 --> 00:00:13,059
bloop is a project that we have been

00:00:10,750 --> 00:00:14,100
developing at ask a center for for the

00:00:13,059 --> 00:00:16,420
past five months

00:00:14,100 --> 00:00:18,190
there's many focus on developer

00:00:16,420 --> 00:00:21,039
ergonomics on developer productivity so

00:00:18,190 --> 00:00:22,539
this is talk here is going to be about

00:00:21,039 --> 00:00:28,330
how you can just prove to be more

00:00:22,539 --> 00:00:31,720
productive and the logo here or your

00:00:28,330 --> 00:00:33,160
well in the screen is our logo it is

00:00:31,720 --> 00:00:37,570
well killer whales are beautiful animals

00:00:33,160 --> 00:00:39,970
they are also powerful and fast just

00:00:37,570 --> 00:00:42,550
enough that they can go after sharks and

00:00:39,970 --> 00:00:44,560
just call them so that's what we wanted

00:00:42,550 --> 00:00:45,160
to achieve with bloop and we want it to

00:00:44,560 --> 00:00:47,020
be beautiful

00:00:45,160 --> 00:00:50,370
we wanted to be fast as well so that's

00:00:47,020 --> 00:00:53,860
why we used a killer whale as our logo

00:00:50,370 --> 00:00:55,600
my name is Jorge I am an in a developer

00:00:53,860 --> 00:00:58,330
sorry I work on developer productivity

00:00:55,600 --> 00:00:59,880
at the sky Center I've been working

00:00:58,330 --> 00:01:03,070
there for the past two-and-a-half years

00:00:59,880 --> 00:01:04,900
I'm mostly obsessed about developer

00:01:03,070 --> 00:01:07,509
productivity and all my work focuses

00:01:04,900 --> 00:01:09,280
around that so I am I comment a nice

00:01:07,509 --> 00:01:11,980
class incremental compiler I think I

00:01:09,280 --> 00:01:14,290
work on build tools build servers and

00:01:11,980 --> 00:01:16,840
anything that has the pillar word in it

00:01:14,290 --> 00:01:19,420
and I've also been doing some work on in

00:01:16,840 --> 00:01:23,200
Scala C Scottish compiler compiler

00:01:19,420 --> 00:01:25,510
plugins and infrastructure my name is

00:01:23,200 --> 00:01:28,810
Martin I've been a software engineer I

00:01:25,510 --> 00:01:32,310
discuss centers since March 2017 and I'm

00:01:28,810 --> 00:01:35,770
working on me on comparison build tools

00:01:32,310 --> 00:01:38,050
producing I was working on SBT or so we

00:01:35,770 --> 00:01:41,290
can Zink I've moved to Scallon ADF and

00:01:38,050 --> 00:01:44,290
I'm working on one of the thing that

00:01:41,290 --> 00:01:45,430
I've been bored with is that sometimes I

00:01:44,290 --> 00:01:47,290
feel like tools were getting in my way

00:01:45,430 --> 00:01:49,479
they try to force me to work in a way

00:01:47,290 --> 00:01:51,820
that is not this form workflow but

00:01:49,479 --> 00:01:53,500
something that I've been trying to to

00:01:51,820 --> 00:01:56,260
improve and I have been focused somehow

00:01:53,500 --> 00:01:59,170
on how to make tools that are completely

00:01:56,260 --> 00:02:01,930
agnostic of the build tool alright

00:01:59,170 --> 00:02:03,490
asteroid representation with one code

00:02:01,930 --> 00:02:06,159
that we got on our guitar channel for

00:02:03,490 --> 00:02:08,560
blue it's the report from how user of

00:02:06,159 --> 00:02:10,780
blue who is pretty happy because they

00:02:08,560 --> 00:02:13,779
have a large project that is built on

00:02:10,780 --> 00:02:15,849
its libraries built on top libraries and

00:02:13,779 --> 00:02:17,170
so on and so forth until they reach the

00:02:15,849 --> 00:02:17,930
top where they have customer plugins

00:02:17,170 --> 00:02:21,409
that they

00:02:17,930 --> 00:02:22,969
and whenever they make change on at the

00:02:21,409 --> 00:02:24,500
root of the project they have to

00:02:22,969 --> 00:02:26,239
republish old it all the different

00:02:24,500 --> 00:02:27,859
layers of libraries that they have and

00:02:26,239 --> 00:02:29,480
it takes them tens of minutes to be able

00:02:27,859 --> 00:02:30,650
to see the changes that they that they

00:02:29,480 --> 00:02:33,560
have done at the bottom of the project

00:02:30,650 --> 00:02:35,180
and they have to wait tens of minutes to

00:02:33,560 --> 00:02:37,819
see the changes that they've done at the

00:02:35,180 --> 00:02:39,889
bottom at the top so they've been using

00:02:37,819 --> 00:02:42,349
loop and developing more tooling on top

00:02:39,889 --> 00:02:44,299
of loop so they could reach seconds of

00:02:42,349 --> 00:02:48,590
turnarounds instead of debts of minutes

00:02:44,299 --> 00:02:50,810
so with that in mind we've been trying

00:02:48,590 --> 00:02:52,400
to write tools that are flexible enough

00:02:50,810 --> 00:02:54,769
so that you can adapt them to your

00:02:52,400 --> 00:02:56,480
workflow and those tools they should not

00:02:54,769 --> 00:02:58,010
try to first you to add up their vision

00:02:56,480 --> 00:03:00,019
of how you should be doing the work that

00:02:58,010 --> 00:03:04,579
you aim to do and that's what we wanted

00:03:00,019 --> 00:03:06,409
to achieve with loop so now we're going

00:03:04,579 --> 00:03:07,969
to mainly focus on how loop can make you

00:03:06,409 --> 00:03:10,189
more productive but before we dive into

00:03:07,969 --> 00:03:12,200
the details we have to explain what

00:03:10,189 --> 00:03:15,889
productivity means the way I'm going to

00:03:12,200 --> 00:03:18,430
use productive and this talk is by by

00:03:15,889 --> 00:03:20,959
just basically defining productive as

00:03:18,430 --> 00:03:24,680
caring like I am productive when I carry

00:03:20,959 --> 00:03:26,540
out tasks and that task is bound by my

00:03:24,680 --> 00:03:30,349
thinking process and not by the tools I

00:03:26,540 --> 00:03:32,629
use that means that I am allowed to you

00:03:30,349 --> 00:03:34,519
know wait for two minutes you just think

00:03:32,629 --> 00:03:36,590
about how I'm gonna solve a problem but

00:03:34,519 --> 00:03:39,530
not I shouldn't be waiting two minutes

00:03:36,590 --> 00:03:44,689
used to SBT to finish the compilation of

00:03:39,530 --> 00:03:46,489
the changes I just did right so the goal

00:03:44,689 --> 00:03:49,579
here is to minimize the amount of time

00:03:46,489 --> 00:03:50,930
it passes between the change a change in

00:03:49,579 --> 00:03:53,030
your edit or a change a change in the

00:03:50,930 --> 00:03:54,530
code and there are an execution result

00:03:53,030 --> 00:03:56,689
that the execution result can be a

00:03:54,530 --> 00:03:58,790
compilation result can be a test a test

00:03:56,689 --> 00:04:01,489
result if you are testing one or several

00:03:58,790 --> 00:04:08,329
tests right and what loop tries to do is

00:04:01,489 --> 00:04:10,879
to minimize the amount of time so this

00:04:08,329 --> 00:04:12,829
painting is called the zoo of pill tools

00:04:10,879 --> 00:04:14,209
and you're probably familiar with it

00:04:12,829 --> 00:04:15,940
because you've seen it in your neighbors

00:04:14,209 --> 00:04:19,159
or at least I do

00:04:15,940 --> 00:04:22,490
brittles are very peculiar they are

00:04:19,159 --> 00:04:26,210
based that have lots of different

00:04:22,490 --> 00:04:28,400
properties and they I they are very

00:04:26,210 --> 00:04:30,020
different from each other as well here

00:04:28,400 --> 00:04:31,490
we have the most popular vehicles in the

00:04:30,020 --> 00:04:35,420
JVM and Scala community

00:04:31,490 --> 00:04:39,320
we have pants basel SBT Gradle and maybe

00:04:35,420 --> 00:04:42,680
right and essentially built tools are so

00:04:39,320 --> 00:04:46,010
complex and they have to carry out so

00:04:42,680 --> 00:04:48,560
many tasks that users of them are

00:04:46,010 --> 00:04:50,720
usually not very happy with them so what

00:04:48,560 --> 00:04:51,980
we wanted to do with blue is to try to

00:04:50,720 --> 00:04:54,140
create something we can be proud of

00:04:51,980 --> 00:04:55,580
something that was beautiful slim that

00:04:54,140 --> 00:04:57,830
we could easily interior with anything

00:04:55,580 --> 00:05:01,310
we wanted so therefore we ended up with

00:04:57,830 --> 00:05:05,210
this so this is essentially bloop it's a

00:05:01,310 --> 00:05:07,100
mythical creature it's a faun and it's

00:05:05,210 --> 00:05:09,350
beautiful it is fast and it is actually

00:05:07,100 --> 00:05:13,070
our unofficial logo Heather doesn't know

00:05:09,350 --> 00:05:16,550
about it yet but we want you to picture

00:05:13,070 --> 00:05:19,880
blue as this phone and not as this beast

00:05:16,550 --> 00:05:21,920
right so you can think of bloop as a

00:05:19,880 --> 00:05:23,900
single zinc plus plus zinc is this

00:05:21,920 --> 00:05:25,550
callus incremental compiler so what

00:05:23,900 --> 00:05:27,530
we've done is with added several layers

00:05:25,550 --> 00:05:29,570
on top of it to provide a lot of

00:05:27,530 --> 00:05:33,530
functionality that we'll be talking

00:05:29,570 --> 00:05:35,690
about in the next two slides so when you

00:05:33,530 --> 00:05:37,910
look at the tools we use as developers

00:05:35,690 --> 00:05:40,460
especially from my point of view there

00:05:37,910 --> 00:05:44,180
are basically two kind of like there is

00:05:40,460 --> 00:05:47,000
a very white and black situation there

00:05:44,180 --> 00:05:48,860
are no scales there are no gray there is

00:05:47,000 --> 00:05:50,570
no gray in the picture and on the one

00:05:48,860 --> 00:05:52,250
side we have a Scala see the compiler

00:05:50,570 --> 00:05:54,380
right when we're going to compile code

00:05:52,250 --> 00:05:56,930
and on the other side we have pillows

00:05:54,380 --> 00:05:58,220
the product with the compiler is that it

00:05:56,930 --> 00:05:59,960
doesn't give us any kind of cold

00:05:58,220 --> 00:06:02,990
compilation it just compiles our code

00:05:59,960 --> 00:06:04,790
it's a CLI tool it doesn't give us any

00:06:02,990 --> 00:06:06,380
kind of incrementality so we want if we

00:06:04,790 --> 00:06:08,120
want to change our code and just

00:06:06,380 --> 00:06:11,240
recompile the things that will change

00:06:08,120 --> 00:06:12,890
that doesn't work and it doesn't know in

00:06:11,240 --> 00:06:13,910
which context is used and that means

00:06:12,890 --> 00:06:15,740
that there are lots of performance

00:06:13,910 --> 00:06:17,600
opportunities that are missed just

00:06:15,740 --> 00:06:20,000
because we cannot leverage the

00:06:17,600 --> 00:06:21,380
information that the belt all has on the

00:06:20,000 --> 00:06:22,880
other side on the other hand we have

00:06:21,380 --> 00:06:25,100
build tools and the build tools are the

00:06:22,880 --> 00:06:27,950
end of the world they are the interface

00:06:25,100 --> 00:06:30,830
that developers used to get their job

00:06:27,950 --> 00:06:32,570
done they are unfortunately two

00:06:30,830 --> 00:06:35,570
heavyweights as we said before and they

00:06:32,570 --> 00:06:37,940
are difficult to integrate with so

00:06:35,570 --> 00:06:40,360
what's what there is like the gap we

00:06:37,940 --> 00:06:42,980
want to fill in here has to basically

00:06:40,360 --> 00:06:44,130
try to make a compromise between these

00:06:42,980 --> 00:06:46,980
two

00:06:44,130 --> 00:06:49,920
different tools that we have and we'd

00:06:46,980 --> 00:06:52,080
use today it has to complement weight

00:06:49,920 --> 00:06:54,780
whatever bill told you are using right

00:06:52,080 --> 00:06:58,410
it has to compile the code and it has to

00:06:54,780 --> 00:07:00,330
be as well incremental and fast but it

00:06:58,410 --> 00:07:02,670
also needs to be extensible it needs to

00:07:00,330 --> 00:07:04,680
adapt to the kind of workflow you have

00:07:02,670 --> 00:07:07,710
no matter what it is because in reality

00:07:04,680 --> 00:07:09,870
developer workflows are a product of the

00:07:07,710 --> 00:07:12,140
social circumstances in your company or

00:07:09,870 --> 00:07:15,090
in your project or in your team and

00:07:12,140 --> 00:07:19,560
depend very much on the culture of it

00:07:15,090 --> 00:07:21,660
so it doesn't really make sense that the

00:07:19,560 --> 00:07:23,460
developer workflow is tied to a built or

00:07:21,660 --> 00:07:25,650
a build tool shoe like if you want to

00:07:23,460 --> 00:07:28,790
compile your code that should not have

00:07:25,650 --> 00:07:32,910
anything to do with the belt were using

00:07:28,790 --> 00:07:36,150
so what can we do here what we can do is

00:07:32,910 --> 00:07:38,220
we can create centralization we can

00:07:36,150 --> 00:07:40,800
create one server that will compile all

00:07:38,220 --> 00:07:43,200
the programs we want and we can get all

00:07:40,800 --> 00:07:46,620
the build tools around it to use this

00:07:43,200 --> 00:07:48,570
server in the background this has many

00:07:46,620 --> 00:07:50,280
many benefits the first one is that the

00:07:48,570 --> 00:07:53,130
changes to this codebase will have

00:07:50,280 --> 00:07:55,770
higher impact it will be easier to

00:07:53,130 --> 00:07:58,050
maintain easier to optimize and easier

00:07:55,770 --> 00:08:00,480
to test and this is especially important

00:07:58,050 --> 00:08:02,970
when we compiler developers and tooling

00:08:00,480 --> 00:08:04,770
developers try to improve the

00:08:02,970 --> 00:08:06,930
compilation performance of the compiler

00:08:04,770 --> 00:08:08,760
or trying to improve the developer

00:08:06,930 --> 00:08:11,490
ergonomics away so that you can

00:08:08,760 --> 00:08:14,120
instantly benefit from it by just

00:08:11,490 --> 00:08:17,340
depending on the artifact we publish and

00:08:14,120 --> 00:08:18,870
most importantly it needs to remove the

00:08:17,340 --> 00:08:21,510
fermentation that there is in Bell Tolls

00:08:18,870 --> 00:08:23,370
I don't know if you are aware but people

00:08:21,510 --> 00:08:25,740
that use a Scala in Gradle for instance

00:08:23,370 --> 00:08:27,840
are still depending on an incremental

00:08:25,740 --> 00:08:29,280
ver and Scala version of incremental

00:08:27,840 --> 00:08:32,130
compiler that was released three years

00:08:29,280 --> 00:08:36,270
ago that means that the productivity is

00:08:32,130 --> 00:08:37,680
heavily hurt by the lack of by by the

00:08:36,270 --> 00:08:39,900
fact that they cannot use the latest

00:08:37,680 --> 00:08:42,840
changes that have gone into think

00:08:39,900 --> 00:08:45,000
particularly a change well particularly

00:08:42,840 --> 00:08:46,370
seeing one that was heavily improved to

00:08:45,000 --> 00:08:49,680
provide better incremental compilation

00:08:46,370 --> 00:08:52,920
therefore Gradle Gradle users that do a

00:08:49,680 --> 00:08:54,120
Scala or have a poor developer

00:08:52,920 --> 00:08:58,020
experience and that's what we want to

00:08:54,120 --> 00:08:59,400
fix so now let's see a bit more about

00:08:58,020 --> 00:09:02,100
these compilations or run that you want

00:08:59,400 --> 00:09:03,930
to introduce this is a picture of the

00:09:02,100 --> 00:09:06,690
architecture of the tools that we have

00:09:03,930 --> 00:09:09,960
today first you have Georgie which to

00:09:06,690 --> 00:09:11,790
provide you with highlighting and show

00:09:09,960 --> 00:09:14,370
your errors in the code it has to depend

00:09:11,790 --> 00:09:15,720
on one instance of the compiler you also

00:09:14,370 --> 00:09:17,940
have real tool that you're going to use

00:09:15,720 --> 00:09:19,710
for instance when your test which also

00:09:17,940 --> 00:09:21,450
needs to British classifieds to the test

00:09:19,710 --> 00:09:23,760
so it needs an instance of the compiler

00:09:21,450 --> 00:09:25,140
funny you also have other tools that you

00:09:23,760 --> 00:09:27,180
use for instance you could be running

00:09:25,140 --> 00:09:29,130
some refactorings of you of your code

00:09:27,180 --> 00:09:31,080
and for that you also need one instance

00:09:29,130 --> 00:09:33,030
of the compiler so you have three

00:09:31,080 --> 00:09:34,320
different instances of a compiler all

00:09:33,030 --> 00:09:36,780
those tools need to integrate with the

00:09:34,320 --> 00:09:38,130
compiler and nothing is shared what

00:09:36,780 --> 00:09:40,560
we're proposing instead today with blue

00:09:38,130 --> 00:09:43,050
is that all those tools could benefit

00:09:40,560 --> 00:09:45,000
from one integration with blue and then

00:09:43,050 --> 00:09:46,890
I get the to the the task of talk of

00:09:45,000 --> 00:09:48,960
talking with the compiler to blue so

00:09:46,890 --> 00:09:51,120
they don't have to all were implement

00:09:48,960 --> 00:09:53,540
one integration within compile they just

00:09:51,120 --> 00:09:56,970
have to have one integration

00:09:53,540 --> 00:09:58,860
doing it this way has our own nice

00:09:56,970 --> 00:10:00,630
property first

00:09:58,860 --> 00:10:02,310
this means that the integration that

00:10:00,630 --> 00:10:03,870
they have to do to be able to talk to

00:10:02,310 --> 00:10:05,250
the compiler is completely compiler

00:10:03,870 --> 00:10:07,980
agnostic they don't have to care about

00:10:05,250 --> 00:10:09,450
supports muscala two or Scalla free they

00:10:07,980 --> 00:10:11,100
can just blend fit from the integration

00:10:09,450 --> 00:10:12,870
that blew past today which is able to

00:10:11,100 --> 00:10:14,089
work both with scott win scholar free

00:10:12,870 --> 00:10:16,680
which is coming soon

00:10:14,089 --> 00:10:19,230
so it removes a lot of complexity from

00:10:16,680 --> 00:10:21,930
those tools more today were not only

00:10:19,230 --> 00:10:24,120
running scala on the JVM we also have

00:10:21,930 --> 00:10:25,890
Scala chase which is close to 1 0 and

00:10:24,120 --> 00:10:28,950
sky native which is progressing very

00:10:25,890 --> 00:10:30,900
fast loop is able today to link project

00:10:28,950 --> 00:10:33,089
with Scala Jason Scott native and the

00:10:30,900 --> 00:10:34,470
tools that the other tools that would

00:10:33,089 --> 00:10:36,270
need a component that we need also

00:10:34,470 --> 00:10:38,580
integration to work with Scala Jason

00:10:36,270 --> 00:10:40,380
Scala native would Audion have to redo

00:10:38,580 --> 00:10:49,110
the work that work has been done for

00:10:40,380 --> 00:10:51,330
loop finally because bloop is able to

00:10:49,110 --> 00:10:53,430
work with all the build tools with the

00:10:51,330 --> 00:10:55,290
with several build tools we just have to

00:10:53,430 --> 00:10:57,150
write an integration for the for bloop

00:10:55,290 --> 00:10:58,980
for that built oh you don't have those

00:10:57,150 --> 00:11:00,329
tools don't have to integrate with all

00:10:58,980 --> 00:11:03,120
the different build tools to be able to

00:11:00,329 --> 00:11:04,860
extract information about the build they

00:11:03,120 --> 00:11:09,630
can just reuse bloop that has

00:11:04,860 --> 00:11:12,120
information about the bill also having

00:11:09,630 --> 00:11:14,310
this centralized architecture it enables

00:11:12,120 --> 00:11:16,500
us to get better optimization because

00:11:14,310 --> 00:11:18,329
bloop has a full knowledge about what

00:11:16,500 --> 00:11:20,370
happens in the bill graph it's able to

00:11:18,329 --> 00:11:22,290
reason more efficiently but what needs

00:11:20,370 --> 00:11:24,630
to be written directly to disk or if it

00:11:22,290 --> 00:11:27,500
can keep things in storage to avoid the

00:11:24,630 --> 00:11:30,209
cost of having to arrest of two days and

00:11:27,500 --> 00:11:30,900
it's also able to perform better cache

00:11:30,209 --> 00:11:33,570
invalidation

00:11:30,900 --> 00:11:34,740
knowing more about the bill and finally

00:11:33,570 --> 00:11:36,930
because it knows everything that is

00:11:34,740 --> 00:11:39,800
going to be run it can perform much

00:11:36,930 --> 00:11:43,770
better polarization that all tools good

00:11:39,800 --> 00:11:45,120
um moreover because bloop is going to

00:11:43,770 --> 00:11:48,329
share compilers between different

00:11:45,120 --> 00:11:53,010
clients the covers get more hot and more

00:11:48,329 --> 00:11:54,990
efficient but what is that and we all

00:11:53,010 --> 00:11:57,959
know I guess that the JVM is going to

00:11:54,990 --> 00:12:02,100
optimize your code while running it so

00:11:57,959 --> 00:12:06,570
that as the the more you run the code

00:12:02,100 --> 00:12:08,339
the faster it gets and because every

00:12:06,570 --> 00:12:10,140
tool at the moment has a different

00:12:08,339 --> 00:12:12,390
instance of the compiler and nothing is

00:12:10,140 --> 00:12:15,650
shared all the tools are going to be

00:12:12,390 --> 00:12:18,839
working to get a hot compare instance

00:12:15,650 --> 00:12:21,030
also at the mount with the tools that we

00:12:18,839 --> 00:12:23,550
have today is very easy to get rid of

00:12:21,030 --> 00:12:25,230
compiler for instance if you have your

00:12:23,550 --> 00:12:27,690
refactoring tools that gets a compiler

00:12:25,230 --> 00:12:30,209
do some stuff with it and just discard

00:12:27,690 --> 00:12:32,880
it then the work that has been done to

00:12:30,209 --> 00:12:34,950
get the compiler hot is lost we'll just

00:12:32,880 --> 00:12:36,390
be teal so for instance whenever USB to

00:12:34,950 --> 00:12:38,730
reload everything is going to be lost

00:12:36,390 --> 00:12:39,900
and enough to really get the compiler

00:12:38,730 --> 00:12:43,740
hot to get a nice composition

00:12:39,900 --> 00:12:46,170
performance another example is if you

00:12:43,740 --> 00:12:47,790
run twice as VT in for the same build

00:12:46,170 --> 00:12:49,260
you would compile the cencon but you

00:12:47,790 --> 00:12:50,640
would get two different instances the

00:12:49,260 --> 00:12:55,079
comparator nothing is going to be shared

00:12:50,640 --> 00:12:57,630
between the two we've been running some

00:12:55,079 --> 00:13:00,480
benchmarks of hot versus cold compiler

00:12:57,630 --> 00:13:03,329
and we have a link to the graph on a

00:13:00,480 --> 00:13:05,220
graph that show the the completion speed

00:13:03,329 --> 00:13:08,310
for that's the benchmarks of this

00:13:05,220 --> 00:13:09,959
colossi team enlivened and interestingly

00:13:08,310 --> 00:13:12,360
you can see that the cultivation

00:13:09,959 --> 00:13:14,400
performance can be up to 18 times slower

00:13:12,360 --> 00:13:17,230
compared to a hot compiler

00:13:14,400 --> 00:13:19,150
and also the when more information

00:13:17,230 --> 00:13:21,550
that's important is that getting the

00:13:19,150 --> 00:13:24,580
company hot it's very expensive it will

00:13:21,550 --> 00:13:26,800
take time it will take few cycles it's

00:13:24,580 --> 00:13:27,940
going to consume a lot so from and find

00:13:26,800 --> 00:13:32,800
it's going to drain the battery of your

00:13:27,940 --> 00:13:36,970
laptop all right so let's move to how to

00:13:32,800 --> 00:13:39,400
actually use bloop bloop is mainly a

00:13:36,970 --> 00:13:41,140
command-line tool so we've been trying

00:13:39,400 --> 00:13:45,160
to make sure that you get this Napier

00:13:41,140 --> 00:13:46,840
your per expense that you get so that

00:13:45,160 --> 00:13:48,880
you can use the shelf that you have most

00:13:46,840 --> 00:13:50,890
likely already configured so it's nice

00:13:48,880 --> 00:13:53,310
to use for a usual workflow and you have

00:13:50,890 --> 00:13:55,690
all the tools that you're used to and

00:13:53,310 --> 00:13:57,880
we've been working hard to get nice tab

00:13:55,690 --> 00:14:00,070
completion that is completely contextual

00:13:57,880 --> 00:14:02,350
to what your drain instance in the gig

00:14:00,070 --> 00:14:04,600
here you can see if you are trying to

00:14:02,350 --> 00:14:07,990
run the main classes of project though

00:14:04,600 --> 00:14:09,430
is going to purple suggestions of

00:14:07,990 --> 00:14:12,700
classes that are available in your

00:14:09,430 --> 00:14:13,780
project we have a configuration file

00:14:12,700 --> 00:14:15,820
bloob that we've been designing

00:14:13,780 --> 00:14:19,690
carefully so that is very easy to read

00:14:15,820 --> 00:14:22,330
easy to understand and and that can be

00:14:19,690 --> 00:14:25,030
read without the use of angle tool it's

00:14:22,330 --> 00:14:27,490
a JSON file it's easy to read first you

00:14:25,030 --> 00:14:29,320
can see the name of the project were to

00:14:27,490 --> 00:14:31,360
find the sources the difference here for

00:14:29,320 --> 00:14:33,310
project how to compile it that is the

00:14:31,360 --> 00:14:34,840
full class path were to write the

00:14:33,310 --> 00:14:38,560
classifier as collaboration and so on

00:14:34,840 --> 00:14:41,440
and as I've said we've been record full

00:14:38,560 --> 00:14:43,180
to make it transparent easy to read and

00:14:41,440 --> 00:14:45,790
understand and to have a full

00:14:43,180 --> 00:14:47,620
specification for it because the goal

00:14:45,790 --> 00:14:50,160
that configuration file is that older

00:14:47,620 --> 00:14:52,540
tools can also be built on top of it and

00:14:50,160 --> 00:14:56,470
extract information about the build from

00:14:52,540 --> 00:14:58,780
this configuration file using it you can

00:14:56,470 --> 00:15:00,430
of course interact with your build using

00:14:58,780 --> 00:15:03,580
either the command-line interface or

00:15:00,430 --> 00:15:05,530
loop inside the other scripts or you can

00:15:03,580 --> 00:15:07,210
write more tools on top of that with the

00:15:05,530 --> 00:15:10,140
full specification that you can find

00:15:07,210 --> 00:15:13,510
here we have the JSON schema

00:15:10,140 --> 00:15:15,310
okay as I said look needs configuration

00:15:13,510 --> 00:15:17,410
file to be able to understand your build

00:15:15,310 --> 00:15:19,920
and how its configured what are the

00:15:17,410 --> 00:15:22,170
dependencies between project and so on

00:15:19,920 --> 00:15:23,670
so someone needs to generate this slice

00:15:22,170 --> 00:15:25,470
they're going to be generated not by

00:15:23,670 --> 00:15:28,110
hand because of me really long and

00:15:25,470 --> 00:15:29,430
error-prone and boring also the bill

00:15:28,110 --> 00:15:31,860
tree is going to generate them

00:15:29,430 --> 00:15:33,389
we have integration for solder tools and

00:15:31,860 --> 00:15:36,180
you can just use them to charge the

00:15:33,389 --> 00:15:38,579
bloop configuration file so I see how to

00:15:36,180 --> 00:15:40,980
get really using group first in the

00:15:38,579 --> 00:15:43,889
example of SBT you would just add one

00:15:40,980 --> 00:15:46,529
SBT plugin it's just one line you depend

00:15:43,889 --> 00:15:49,440
on the plug-in and then using SBT you

00:15:46,529 --> 00:15:50,790
can loop install this task is going to

00:15:49,440 --> 00:15:54,660
generate all the different loop

00:15:50,790 --> 00:15:57,269
configuration file projects once you

00:15:54,660 --> 00:15:59,310
have them we expose for main comments

00:15:57,269 --> 00:16:00,630
for blue first we have loop compile

00:15:59,310 --> 00:16:03,510
which obvious is going to compile

00:16:00,630 --> 00:16:06,029
project and in dependency doing it in

00:16:03,510 --> 00:16:08,310
partly webcam we have a really nice

00:16:06,029 --> 00:16:10,290
integration with file watches so you can

00:16:08,310 --> 00:16:11,699
pass the watch flag and loop is going to

00:16:10,290 --> 00:16:15,360
recompile project whenever you change

00:16:11,699 --> 00:16:17,790
one of the source files we have other

00:16:15,360 --> 00:16:19,320
integrations we have several error

00:16:17,790 --> 00:16:22,139
reporters so that you can pick the one

00:16:19,320 --> 00:16:23,430
that you find the most readable and you

00:16:22,139 --> 00:16:25,470
can use help to get more information

00:16:23,430 --> 00:16:28,560
about all the options that loop confined

00:16:25,470 --> 00:16:31,050
supports the second main common is loop

00:16:28,560 --> 00:16:32,339
test this one is going to render or run

00:16:31,050 --> 00:16:34,440
the test for project and it's

00:16:32,339 --> 00:16:36,260
dependencies which can specify to run

00:16:34,440 --> 00:16:39,660
just the test for one of the projects

00:16:36,260 --> 00:16:43,140
with isolated or you can select only a

00:16:39,660 --> 00:16:44,970
few classes or packages to run for

00:16:43,140 --> 00:16:47,190
instance in the governor at the bottom

00:16:44,970 --> 00:16:49,170
of the slide is going to run the test

00:16:47,190 --> 00:16:51,029
for a project both front end and only

00:16:49,170 --> 00:16:53,820
the testifying to package build up and

00:16:51,029 --> 00:16:57,360
join and rerun the tests whenever one

00:16:53,820 --> 00:16:59,579
source is changed then we have blueprint

00:16:57,360 --> 00:17:02,760
which is going to run a main class of

00:16:59,579 --> 00:17:04,589
your project you can specify which one

00:17:02,760 --> 00:17:06,209
you want to run you will can use buy

00:17:04,589 --> 00:17:09,540
watches again to remand wherever the

00:17:06,209 --> 00:17:11,549
source files or modified and lastly one

00:17:09,540 --> 00:17:13,949
of the nice things that you get with

00:17:11,549 --> 00:17:15,900
blue being just simple CLI tool that you

00:17:13,949 --> 00:17:18,089
can use all the benefits from shell

00:17:15,900 --> 00:17:19,500
expansion that you have and for each in

00:17:18,089 --> 00:17:21,660
its size in SVG would have to write a

00:17:19,500 --> 00:17:24,839
complicated task that would take care of

00:17:21,660 --> 00:17:29,220
collecting all the files the whose name

00:17:24,839 --> 00:17:31,200
and with jpg inside an mg directory you

00:17:29,220 --> 00:17:33,850
get also the shell extension for your

00:17:31,200 --> 00:17:35,470
home directory hello you don't have

00:17:33,850 --> 00:17:37,539
during the SPT test to do that you can

00:17:35,470 --> 00:17:41,140
use your shell as you are used to just

00:17:37,539 --> 00:17:43,690
to pass that information to look the

00:17:41,140 --> 00:17:45,850
last comment that would use most likely

00:17:43,690 --> 00:17:47,710
every day is a blue console this one is

00:17:45,850 --> 00:17:49,900
the completely equivalent of as mythical

00:17:47,710 --> 00:17:51,400
so it just writes on your scale Red Bull

00:17:49,900 --> 00:17:52,780
which our project on the class pass and

00:17:51,400 --> 00:17:56,799
it's dependencies so that you can test

00:17:52,780 --> 00:17:58,690
something quickly um all the comments

00:17:56,799 --> 00:18:00,580
that we have support intervention

00:17:58,690 --> 00:18:03,280
tab-completion the sense that you get

00:18:00,580 --> 00:18:05,140
contextual information that is collected

00:18:03,280 --> 00:18:07,720
for a project and the information about

00:18:05,140 --> 00:18:09,850
it we have been very careful to have

00:18:07,720 --> 00:18:11,590
everything that is well documented with

00:18:09,850 --> 00:18:13,690
the help lag so that you get all the

00:18:11,590 --> 00:18:16,960
information you may want about one

00:18:13,690 --> 00:18:18,250
comment and find out years I've said you

00:18:16,960 --> 00:18:20,110
have access to the features of your

00:18:18,250 --> 00:18:23,919
shelf so you're in the best environment

00:18:20,110 --> 00:18:25,809
to to be working efficiently going to

00:18:23,919 --> 00:18:26,110
quickly move loop and how to get it set

00:18:25,809 --> 00:18:29,110
up

00:18:26,110 --> 00:18:33,250
I guess that's big enough so this is you

00:18:29,110 --> 00:18:34,720
test it's a small testing library so

00:18:33,250 --> 00:18:37,690
let's see how to get it configured fold

00:18:34,720 --> 00:18:42,030
up so you can simply to the plugins that

00:18:37,690 --> 00:18:45,030
has b3 and you can add an SVT play game

00:18:42,030 --> 00:18:45,030
whoops

00:18:46,500 --> 00:18:53,280
so it's additional CH gjf-- else camera

00:18:50,250 --> 00:18:58,720
ending with the clients with it loop and

00:18:53,280 --> 00:19:06,039
the version is one zero zero m11 even

00:18:58,720 --> 00:19:07,690
start SVT and using loop install is

00:19:06,039 --> 00:19:09,309
going to dry it all the source files the

00:19:07,690 --> 00:19:13,539
configuration files you can see it's

00:19:09,309 --> 00:19:17,080
very fast and I don't need SBT anymore

00:19:13,539 --> 00:19:19,360
I'm using loop you can check what are

00:19:17,080 --> 00:19:21,419
all the projects that exist and you can

00:19:19,360 --> 00:19:23,620
finally compile

00:19:21,419 --> 00:19:26,580
maybe I can clean so that it's more

00:19:23,620 --> 00:19:26,580
interesting

00:19:27,460 --> 00:19:32,540
so you can see the three projects are

00:19:29,900 --> 00:19:35,260
being compiled in PAL which is I think

00:19:32,540 --> 00:19:38,480
very nice because we have this project

00:19:35,260 --> 00:19:41,000
has three different versions for Scotch

00:19:38,480 --> 00:19:42,470
avian native and Jas so everything can

00:19:41,000 --> 00:19:50,270
be compiled entire because there are no

00:19:42,470 --> 00:19:54,020
dependencies between them okay should be

00:19:50,270 --> 00:20:12,880
done soon and once you've compiled you

00:19:54,020 --> 00:20:16,100
can also run the tests few mornings and

00:20:12,880 --> 00:20:17,990
the tests are running in club so as you

00:20:16,100 --> 00:20:21,440
can see it's very easy to setup loop

00:20:17,990 --> 00:20:22,880
just need to write one line your project

00:20:21,440 --> 00:20:24,050
tickets are in the loop and then you can

00:20:22,880 --> 00:20:29,150
use this method to try to all the

00:20:24,050 --> 00:20:30,800
configuration files I know what you're

00:20:29,150 --> 00:20:32,480
probably thinking you're probably

00:20:30,800 --> 00:20:35,420
thinking oh no a new tool I need to

00:20:32,480 --> 00:20:38,270
learn more a space of mind that you use

00:20:35,420 --> 00:20:39,890
just by learning something new learning

00:20:38,270 --> 00:20:43,190
new tools is a for setting experience

00:20:39,890 --> 00:20:46,760
and I know that myself very well even

00:20:43,190 --> 00:20:47,990
though I work in developer tools so one

00:20:46,760 --> 00:20:50,420
of the things we wanted to do with group

00:20:47,990 --> 00:20:52,820
is to avoid this problem and the way we

00:20:50,420 --> 00:20:54,650
wanted to avoid it the way we wanted to

00:20:52,820 --> 00:20:55,880
avoid it is by integrating directly with

00:20:54,650 --> 00:20:58,820
the bell tools you don't have to learn

00:20:55,880 --> 00:21:00,770
the new series which is presented the

00:20:58,820 --> 00:21:02,570
CLI is very powerful when you want to

00:21:00,770 --> 00:21:05,000
create custom extensions to your

00:21:02,570 --> 00:21:06,560
developer workflow at your company but

00:21:05,000 --> 00:21:08,450
sometimes it's not just what you want

00:21:06,560 --> 00:21:10,220
you want to get nice compilation

00:21:08,450 --> 00:21:15,260
performance by using the tools you've

00:21:10,220 --> 00:21:17,150
always used this is the reason why we

00:21:15,260 --> 00:21:19,880
created group at the first place and to

00:21:17,150 --> 00:21:22,910
be honest I think it's unfair if we ask

00:21:19,880 --> 00:21:25,850
new well we ask you people here in the

00:21:22,910 --> 00:21:27,620
in the top in the room to learn a new

00:21:25,850 --> 00:21:30,560
tool just to get better compilation

00:21:27,620 --> 00:21:33,890
performance so what we wanted to do is

00:21:30,560 --> 00:21:37,280
to give the portal the benefits of this

00:21:33,890 --> 00:21:39,440
tool to every developer no matter what

00:21:37,280 --> 00:21:40,880
Bill told they used and therefore things

00:21:39,440 --> 00:21:43,820
like just making

00:21:40,880 --> 00:21:46,100
improvements in SBT or just making this

00:21:43,820 --> 00:21:49,220
improvements or new build tools were not

00:21:46,100 --> 00:21:53,150
a solution were not put on the table in

00:21:49,220 --> 00:21:54,560
the first place so here's where I talk

00:21:53,150 --> 00:21:57,080
about the build server protocol the

00:21:54,560 --> 00:21:59,300
build story protocol is a protocol that

00:21:57,080 --> 00:22:01,070
may be familiar if you've heard of the

00:21:59,300 --> 00:22:02,900
language server protocol the lamasery

00:22:01,070 --> 00:22:05,120
protocol was created by Microsoft

00:22:02,900 --> 00:22:07,100
it was first integrate implemented in vs

00:22:05,120 --> 00:22:08,840
coil and the problem that language

00:22:07,100 --> 00:22:12,320
server protocol was solving or LSP

00:22:08,840 --> 00:22:14,270
ensured is to remove remove the

00:22:12,320 --> 00:22:16,730
duplication of integrations that were

00:22:14,270 --> 00:22:19,280
happening both in editors and language

00:22:16,730 --> 00:22:20,810
servers so he wanted to support your new

00:22:19,280 --> 00:22:22,580
programming language in an editor you

00:22:20,810 --> 00:22:25,130
will need to replicate that support

00:22:22,580 --> 00:22:26,660
across all of different editors and what

00:22:25,130 --> 00:22:28,670
the less speedy is to introduce the

00:22:26,660 --> 00:22:30,680
concept of a server in which the

00:22:28,670 --> 00:22:31,730
language server I provided the language

00:22:30,680 --> 00:22:33,320
support for whether a programming

00:22:31,730 --> 00:22:35,540
language wanted and then the concept of

00:22:33,320 --> 00:22:38,990
client in which would be the consumer of

00:22:35,540 --> 00:22:41,660
that support and this allowed the S code

00:22:38,990 --> 00:22:45,590
VI and a lot of editors that now

00:22:41,660 --> 00:22:47,690
implement this protocol to benefit to to

00:22:45,590 --> 00:22:51,260
automatically provide language support

00:22:47,690 --> 00:22:55,580
to them right so the difference here is

00:22:51,260 --> 00:22:56,990
that BSP gives us the same but for build

00:22:55,580 --> 00:22:58,930
tools it tries to formalize the

00:22:56,990 --> 00:23:02,240
communication between build tools and

00:22:58,930 --> 00:23:03,890
ideas and editors as well and the

00:23:02,240 --> 00:23:07,430
problem here is that most of the times

00:23:03,890 --> 00:23:09,620
build tools have information that is

00:23:07,430 --> 00:23:12,230
required for the simplest things like

00:23:09,620 --> 00:23:13,610
compiler Diagnostics builders are the

00:23:12,230 --> 00:23:16,220
source of truth because we define our

00:23:13,610 --> 00:23:18,860
projects there so whatever we do in the

00:23:16,220 --> 00:23:21,350
editor or whatever our language support

00:23:18,860 --> 00:23:24,110
does needs also to get this information

00:23:21,350 --> 00:23:26,090
and operate on that so in this case

00:23:24,110 --> 00:23:29,630
clients are language servers and editors

00:23:26,090 --> 00:23:31,130
and bloop is the PSP server and group

00:23:29,630 --> 00:23:33,350
has been the first server that we have

00:23:31,130 --> 00:23:36,320
implemented on the build build server

00:23:33,350 --> 00:23:40,040
protocol this initiative has been a huge

00:23:36,320 --> 00:23:42,620
collaboration between the JetBrains team

00:23:40,040 --> 00:23:44,810
Justin here and myself

00:23:42,620 --> 00:23:48,590
Anala four-pole garrison at escala

00:23:44,810 --> 00:23:50,300
Center we have just released like we

00:23:48,590 --> 00:23:52,730
have just announced it will serve

00:23:50,300 --> 00:23:54,250
protocol 2 or 3 days ago and there is

00:23:52,730 --> 00:23:56,320
now like a twit that we just

00:23:54,250 --> 00:23:59,020
today so if you want to learn more about

00:23:56,320 --> 00:24:02,500
that you can just check the truth out in

00:23:59,020 --> 00:24:04,179
the scala lung Twitter accounts so I

00:24:02,500 --> 00:24:06,580
could be talking about the desert

00:24:04,179 --> 00:24:08,200
protocol for hours so instead what I'm

00:24:06,580 --> 00:24:09,669
gonna do is I'm gonna keep this brief

00:24:08,200 --> 00:24:12,250
and I'm just gonna say how this benefits

00:24:09,669 --> 00:24:15,640
blue so the first thing is that it gives

00:24:12,250 --> 00:24:17,980
us fast project imports from IDs and

00:24:15,640 --> 00:24:19,240
editors so IDs and editors need to

00:24:17,980 --> 00:24:20,919
import your project in order to

00:24:19,240 --> 00:24:22,809
understand it we all know that when we

00:24:20,919 --> 00:24:24,429
use IntelliJ for instance we need to

00:24:22,809 --> 00:24:26,860
first import or we need to reload the

00:24:24,429 --> 00:24:28,270
bill when it changes and what we want to

00:24:26,860 --> 00:24:30,190
achieve with builder where the Builder

00:24:28,270 --> 00:24:32,200
protocol is that we wanted to make this

00:24:30,190 --> 00:24:34,950
process as automatic as possible and as

00:24:32,200 --> 00:24:38,380
fast as possible as well

00:24:34,950 --> 00:24:40,120
it is editor agnostic as crusade so you

00:24:38,380 --> 00:24:42,880
could create a copy of integration just

00:24:40,120 --> 00:24:45,400
to show for instance where the projects

00:24:42,880 --> 00:24:48,100
are defined in the project view of VI or

00:24:45,400 --> 00:24:50,740
Emacs teachers that don't usually have

00:24:48,100 --> 00:24:53,049
this kind of support and it is also

00:24:50,740 --> 00:24:54,840
built to like nastic as we said before

00:24:53,049 --> 00:24:57,250
and it provides you with better

00:24:54,840 --> 00:24:59,620
integrations with build tools that you

00:24:57,250 --> 00:25:01,390
may use over you may not like spe maven

00:24:59,620 --> 00:25:03,669
basil and whatnot

00:25:01,390 --> 00:25:08,350
but this is what this is important for

00:25:03,669 --> 00:25:10,510
is that we can use BSP to implement this

00:25:08,350 --> 00:25:11,890
kind of SBT integration like this kind

00:25:10,510 --> 00:25:13,240
of built or integration built-in

00:25:11,890 --> 00:25:15,100
built-in integration that we were

00:25:13,240 --> 00:25:16,630
talking about loop would be completing

00:25:15,100 --> 00:25:18,700
the path transparent to you you would

00:25:16,630 --> 00:25:20,289
still benefit from it it would be in the

00:25:18,700 --> 00:25:22,480
background but you wouldn't know you

00:25:20,289 --> 00:25:23,620
would not know about it right so what it

00:25:22,480 --> 00:25:25,000
will happen is that you will have still

00:25:23,620 --> 00:25:27,190
use as a bit your maven you will do

00:25:25,000 --> 00:25:28,929
compiler and in the background these

00:25:27,190 --> 00:25:31,270
build tools will connect as clients

00:25:28,929 --> 00:25:33,400
ironically to bloop as a real server

00:25:31,270 --> 00:25:35,049
protocol and bloop will compile the code

00:25:33,400 --> 00:25:40,450
and then stream back any result that

00:25:35,049 --> 00:25:42,070
comes from out of that so if you want to

00:25:40,450 --> 00:25:44,500
learn more about this you probably want

00:25:42,070 --> 00:25:47,169
to check out our the talk that Justin

00:25:44,500 --> 00:25:47,620
and I did a discuss last year 2018 two

00:25:47,169 --> 00:25:49,870
months ago

00:25:47,620 --> 00:25:52,900
it's called Builder political any ideas

00:25:49,870 --> 00:25:54,250
or just check this link about the

00:25:52,900 --> 00:25:56,620
skyline blockers that were just talking

00:25:54,250 --> 00:25:59,740
about in which we announced the first

00:25:56,620 --> 00:26:02,440
version of it here we can see a

00:25:59,740 --> 00:26:04,600
screenshot of what happens what seems to

00:26:02,440 --> 00:26:07,330
be compiled Diagnostics warnings in this

00:26:04,600 --> 00:26:08,380
case and here we see errors this is a

00:26:07,330 --> 00:26:10,179
product of the

00:26:08,380 --> 00:26:12,760
of a prototype that I have been working

00:26:10,179 --> 00:26:16,210
with I have been working on with Justin

00:26:12,760 --> 00:26:18,429
and this prototype basically allows for

00:26:16,210 --> 00:26:22,660
a better integration between IntelliJ

00:26:18,429 --> 00:26:27,250
and BSP so here for instance we have

00:26:22,660 --> 00:26:31,210
what happens to be this gift illustrates

00:26:27,250 --> 00:26:33,309
how we can achieve this fast project

00:26:31,210 --> 00:26:34,480
import we were talking about so what

00:26:33,309 --> 00:26:37,330
we've done is that we were in the akka

00:26:34,480 --> 00:26:38,970
project right and then we generate the

00:26:37,330 --> 00:26:41,440
configuration files with a blip install

00:26:38,970 --> 00:26:43,750
configuration files I array the array

00:26:41,440 --> 00:26:48,820
persisted and what we do is that we end

00:26:43,750 --> 00:26:50,650
we we open IntelliJ we wait for it

00:26:48,820 --> 00:26:53,590
because the startup is a little bit slow

00:26:50,650 --> 00:26:55,720
and then we say import project then we

00:26:53,590 --> 00:26:57,190
need to select the base directory of the

00:26:55,720 --> 00:27:01,500
project we want to import in this case

00:26:57,190 --> 00:27:03,850
akka say USB and we continue and

00:27:01,500 --> 00:27:05,620
automatically in value wise doing the

00:27:03,850 --> 00:27:07,210
right now is that it's connecting to BSP

00:27:05,620 --> 00:27:08,679
on the background it's getting all the

00:27:07,210 --> 00:27:11,470
information at once and now it's going

00:27:08,679 --> 00:27:14,919
to sync up so it's going to get all the

00:27:11,470 --> 00:27:19,270
targets and going to show all the

00:27:14,919 --> 00:27:21,580
projects on the Left sidebar so as you

00:27:19,270 --> 00:27:25,720
see now there is this is the actual sync

00:27:21,580 --> 00:27:29,679
and we see that it's done in almost 6

00:27:25,720 --> 00:27:34,090
seconds so a process that usually takes

00:27:29,679 --> 00:27:37,179
around 2-3 minutes in normal projects

00:27:34,090 --> 00:27:38,799
with using SBT and that can even take

00:27:37,179 --> 00:27:42,370
more when the first time you clone a

00:27:38,799 --> 00:27:44,559
project is now taking about 15 seconds

00:27:42,370 --> 00:27:46,419
just by using PSP in the background I

00:27:44,559 --> 00:27:47,919
think that this is a very nice

00:27:46,419 --> 00:27:50,169
improvement when it comes to develop

00:27:47,919 --> 00:27:52,990
economics because it means that whenever

00:27:50,169 --> 00:27:56,140
we would change our build and the built

00:27:52,990 --> 00:27:58,780
on the ID our other thing we can just

00:27:56,140 --> 00:28:00,490
immediately get those results in our IDE

00:27:58,780 --> 00:28:03,580
and we don't need to wait and be blocked

00:28:00,490 --> 00:28:08,590
by all this expensive process that was

00:28:03,580 --> 00:28:10,210
being done before another example is a

00:28:08,590 --> 00:28:13,450
gift that will show now how to get

00:28:10,210 --> 00:28:15,159
compiler diagnostics in the IDE so what

00:28:13,450 --> 00:28:17,650
this is doing is that we are currently

00:28:15,159 --> 00:28:20,020
just removing a letter from a term and

00:28:17,650 --> 00:28:21,789
we are compiling so immediately we get

00:28:20,020 --> 00:28:23,229
the results in two seconds and

00:28:21,789 --> 00:28:26,889
we get to compare Diagnostics that

00:28:23,229 --> 00:28:29,019
happen in bsp in the like happen via PSP

00:28:26,889 --> 00:28:30,789
in the peloton in our editor so we can

00:28:29,019 --> 00:28:33,989
just click on them and it goes directly

00:28:30,789 --> 00:28:36,340
to the place where they happened and

00:28:33,989 --> 00:28:39,309
here we have a successful compilation

00:28:36,340 --> 00:28:42,100
and here we have like a new change that

00:28:39,309 --> 00:28:44,289
will kill a compilation failure as well

00:28:42,100 --> 00:28:47,409
I think this is especially important

00:28:44,289 --> 00:28:49,090
because as you may know IntelliJ uses

00:28:47,409 --> 00:28:51,340
its own percentage compared to support a

00:28:49,090 --> 00:28:53,440
Scala and that is not always that does

00:28:51,340 --> 00:28:55,779
not always agree with the stock of Scala

00:28:53,440 --> 00:28:56,979
compiler so it has some glitches from

00:28:55,779 --> 00:28:59,229
time to time you get some rather

00:28:56,979 --> 00:29:01,389
squiggles right so what this will give

00:28:59,229 --> 00:29:03,369
you is the ability to know exactly

00:29:01,389 --> 00:29:06,340
whether the rest quickly is correct or

00:29:03,369 --> 00:29:11,739
not by just doing compile and seeing

00:29:06,340 --> 00:29:14,080
what happens I'd like to say a few words

00:29:11,739 --> 00:29:17,049
now about how fast loop is able to

00:29:14,080 --> 00:29:21,450
compare a project so I've been trying

00:29:17,049 --> 00:29:21,450
bloop on projects of different sizes

00:29:23,190 --> 00:29:28,929
okay first we tried with the small to

00:29:26,710 --> 00:29:30,789
medium project in sweet ESV team and

00:29:28,929 --> 00:29:33,009
we've been trying to compile it it's

00:29:30,789 --> 00:29:35,950
about 50,000 lines of code 20 modules

00:29:33,009 --> 00:29:38,919
page on the red sauce files and using

00:29:35,950 --> 00:29:44,799
blue power SBT you get immediately 25%

00:29:38,919 --> 00:29:45,940
in better computation speed then we

00:29:44,799 --> 00:29:49,149
tried on something that is slightly

00:29:45,940 --> 00:29:50,769
larger 180,000 lines of code it's too

00:29:49,149 --> 00:29:53,830
hard and front-end the source of the

00:29:50,769 --> 00:29:56,590
website and we also again 28 percent

00:29:53,830 --> 00:29:58,330
completion speed improvement the next

00:29:56,590 --> 00:30:01,450
thing that we tried was pakka akka which

00:29:58,330 --> 00:30:03,359
is again a lot to project this time 330

00:30:01,450 --> 00:30:06,460
thousand bytes of code three six modules

00:30:03,359 --> 00:30:10,539
1100 so sparse and we got again almost

00:30:06,460 --> 00:30:12,609
20% speed up in compilation the last

00:30:10,539 --> 00:30:14,559
project that we need tried as a battery

00:30:12,609 --> 00:30:17,099
spark which is this one a large project

00:30:14,559 --> 00:30:21,609
is four hundred thousand lines of code

00:30:17,099 --> 00:30:23,980
and we got again 28% increase

00:30:21,609 --> 00:30:26,679
decreasing compilation speed

00:30:23,980 --> 00:30:28,990
so if we plot that this is a graph where

00:30:26,679 --> 00:30:31,600
the completion speed is normalized

00:30:28,990 --> 00:30:33,070
compared to that of SVT so one is always

00:30:31,600 --> 00:30:35,649
the completion speed that is emitted

00:30:33,070 --> 00:30:37,990
needs the commission time that is PT

00:30:35,649 --> 00:30:40,659
takes for your project whereas the green

00:30:37,990 --> 00:30:43,630
bar here is hollow loop to come by it

00:30:40,659 --> 00:30:45,159
and as you can see on the graph you can

00:30:43,630 --> 00:30:46,720
be guaranteed to get almost twenty

00:30:45,159 --> 00:30:49,450
percent completion speed improvement

00:30:46,720 --> 00:30:52,330
whatever the size of project is nothing

00:30:49,450 --> 00:30:54,549
just by adding one line to build SBT

00:30:52,330 --> 00:30:56,799
being able to get 20 percent increase

00:30:54,549 --> 00:31:03,820
decrease in compilation speed is pretty

00:30:56,799 --> 00:31:05,769
nice so we've talked about look we've

00:31:03,820 --> 00:31:08,230
talked about how we can compile faster

00:31:05,769 --> 00:31:11,200
how we try to remove the placate the

00:31:08,230 --> 00:31:13,389
application how we try to make your

00:31:11,200 --> 00:31:15,190
developer workflow faster not just by

00:31:13,389 --> 00:31:18,309
compiling faster but by integrating

00:31:15,190 --> 00:31:19,809
better with your IDE and editors but

00:31:18,309 --> 00:31:21,730
it's important that we just think about

00:31:19,809 --> 00:31:25,840
what's the future what's ahead of us

00:31:21,730 --> 00:31:27,610
what we want to do then like now I'm

00:31:25,840 --> 00:31:29,980
going to talk about two use cases that

00:31:27,610 --> 00:31:31,690
I'm most excited about the first one is

00:31:29,980 --> 00:31:34,690
called remote compilation remote

00:31:31,690 --> 00:31:37,419
compilation is a process in which we

00:31:34,690 --> 00:31:38,620
compile our projects in the cloud and

00:31:37,419 --> 00:31:40,799
then we get the results back

00:31:38,620 --> 00:31:42,880
remote compilation is actually

00:31:40,799 --> 00:31:45,639
implemented by some builders like basil

00:31:42,880 --> 00:31:47,409
and pants but they require architectural

00:31:45,639 --> 00:31:49,570
changes that are only possible in this

00:31:47,409 --> 00:31:51,399
kind of build tools so it happens that

00:31:49,570 --> 00:31:52,870
if he uses the maybe none Gradle and you

00:31:51,399 --> 00:31:54,190
don't plan to change that it just

00:31:52,870 --> 00:31:56,559
because your developers don't learn that

00:31:54,190 --> 00:32:00,909
tool from the beginning you will benefit

00:31:56,559 --> 00:32:02,409
from this powerful feature and one of

00:32:00,909 --> 00:32:06,779
the good things about remote compilation

00:32:02,409 --> 00:32:09,610
is that your laptop can be active as

00:32:06,779 --> 00:32:15,360
your CI is running your tests or

00:32:09,610 --> 00:32:15,360
compiling so that always keeps you busy

00:32:15,870 --> 00:32:21,580
so as we say in order to provide this

00:32:19,840 --> 00:32:23,649
kind of functionality of course we want

00:32:21,580 --> 00:32:25,120
to have hot compilers in the background

00:32:23,649 --> 00:32:27,340
compiling our code and we wanted to

00:32:25,120 --> 00:32:29,169
compile as fast as possible but in order

00:32:27,340 --> 00:32:32,169
to do that we need to get some cloud

00:32:29,169 --> 00:32:34,570
instances alive some computers that are

00:32:32,169 --> 00:32:36,940
always alive and listening for for

00:32:34,570 --> 00:32:37,770
requests right and the most problematic

00:32:36,940 --> 00:32:40,650
thing

00:32:37,770 --> 00:32:42,720
is that in order to provide this feature

00:32:40,650 --> 00:32:44,640
to you developers we need to implement

00:32:42,720 --> 00:32:47,270
these two main changes which are

00:32:44,640 --> 00:32:49,320
architectural the first one is that

00:32:47,270 --> 00:32:50,670
compilation requests or compilation

00:32:49,320 --> 00:32:52,320
processes have to be completely

00:32:50,670 --> 00:32:55,890
independent that means that they cannot

00:32:52,320 --> 00:32:59,040
even be they cannot be even they cannot

00:32:55,890 --> 00:33:01,680
even be sharing as the same file system

00:32:59,040 --> 00:33:03,270
paths and the second thing is that the

00:33:01,680 --> 00:33:05,340
we need to be able to duplicate

00:33:03,270 --> 00:33:06,960
computation requests so given two

00:33:05,340 --> 00:33:09,120
computation requests I want to know if

00:33:06,960 --> 00:33:11,610
the second one is the same as the first

00:33:09,120 --> 00:33:17,280
one and if it's the same I just want to

00:33:11,610 --> 00:33:19,260
be streaming back the results this is a

00:33:17,280 --> 00:33:21,150
change that we want to implement in the

00:33:19,260 --> 00:33:24,330
future and I hope it will be available

00:33:21,150 --> 00:33:27,030
in a future a little loop the second

00:33:24,330 --> 00:33:29,250
thing I want to talk about is pipeline

00:33:27,030 --> 00:33:31,140
compilation if we dive into the details

00:33:29,250 --> 00:33:33,210
of what pipeline compilation is it's

00:33:31,140 --> 00:33:36,950
worth having a look at how we compile

00:33:33,210 --> 00:33:40,020
codes how we compile our projects now

00:33:36,950 --> 00:33:42,270
traditionally what we do is that we have

00:33:40,020 --> 00:33:45,390
a bill graph may be sequential may be

00:33:42,270 --> 00:33:47,670
highly parallel and this bill graph is

00:33:45,390 --> 00:33:51,210
compiled by your bill tool into our

00:33:47,670 --> 00:33:53,220
steps there is first a a an ordering of

00:33:51,210 --> 00:33:55,470
all the bill targets you want to compile

00:33:53,220 --> 00:33:58,770
that ordering is usually topological and

00:33:55,470 --> 00:34:00,660
then afterwards we compile them allowing

00:33:58,770 --> 00:34:03,660
for a dequeue of product is the degree

00:34:00,660 --> 00:34:06,180
of parallelism that the bill graph has a

00:34:03,660 --> 00:34:09,540
normal kind of will graph is the one we

00:34:06,180 --> 00:34:11,790
present here we see a as a root project

00:34:09,540 --> 00:34:14,159
and then bc depending on the a and then

00:34:11,790 --> 00:34:15,870
D depending on C so what happens here is

00:34:14,159 --> 00:34:19,260
that in order to compile B and C I need

00:34:15,870 --> 00:34:23,010
to wait for a and in order to compile D

00:34:19,260 --> 00:34:26,550
and to wait for C so pipeline

00:34:23,010 --> 00:34:28,140
compilation is a technique by which we

00:34:26,550 --> 00:34:31,590
can assert a compilation of dependent

00:34:28,140 --> 00:34:33,570
modules before the computation of a has

00:34:31,590 --> 00:34:34,950
finished and we can do that by

00:34:33,570 --> 00:34:37,140
exploiting some properties of the

00:34:34,950 --> 00:34:39,179
compiler and this case they are called

00:34:37,140 --> 00:34:42,720
the SKA signatures that are generated

00:34:39,179 --> 00:34:44,940
after type checking and we can use those

00:34:42,720 --> 00:34:47,460
and pass them around to whatever

00:34:44,940 --> 00:34:50,730
compiler instances will come that will

00:34:47,460 --> 00:34:51,419
compile B and C so what that typically

00:34:50,730 --> 00:34:53,339
means

00:34:51,419 --> 00:34:56,809
that we can assert a compilation of pnc

00:34:53,339 --> 00:34:59,940
around 30 40 % faster than before

00:34:56,809 --> 00:35:03,079
because type-checking a program usually

00:34:59,940 --> 00:35:06,720
takes on 60 70 % and the same goes for

00:35:03,079 --> 00:35:08,250
DD can assert before even before that 30

00:35:06,720 --> 00:35:12,059
40 % faster because the change

00:35:08,250 --> 00:35:15,240
aggregates so it would have start will

00:35:12,059 --> 00:35:20,400
multiply it up will multiply as the pill

00:35:15,240 --> 00:35:23,190
graph goes this idea was pitched in by

00:35:20,400 --> 00:35:25,650
Rory graves at this last year 2017 I

00:35:23,190 --> 00:35:27,869
remember hearing listening up hearing

00:35:25,650 --> 00:35:31,470
about it and being very excited about it

00:35:27,869 --> 00:35:33,089
and there wasn't any implementation so

00:35:31,470 --> 00:35:35,130
the first thing I try to do is just to

00:35:33,089 --> 00:35:37,170
implement it myself and I did a

00:35:35,130 --> 00:35:41,069
prototype in sync incremental compiler

00:35:37,170 --> 00:35:44,369
and Lucas this has high impact for any

00:35:41,069 --> 00:35:47,430
bill graph we don't yet have real-world

00:35:44,369 --> 00:35:49,309
results to assess how good it will

00:35:47,430 --> 00:35:52,589
perform in reality but the theoretical

00:35:49,309 --> 00:35:55,619
performance speed us that with said

00:35:52,589 --> 00:36:00,119
before he was very optimistic about the

00:35:55,619 --> 00:36:01,770
consequences such as change the the

00:36:00,119 --> 00:36:03,599
gains of this technique is a little bit

00:36:01,770 --> 00:36:05,910
constrained by the fact that you may

00:36:03,599 --> 00:36:07,589
have some java code in your project if

00:36:05,910 --> 00:36:10,440
you have java code an image that the

00:36:07,589 --> 00:36:13,619
java compiler needs to get the class

00:36:10,440 --> 00:36:16,049
files from either other Java projects or

00:36:13,619 --> 00:36:18,089
a Scala projects and therefore you can

00:36:16,049 --> 00:36:20,160
only paralyze certain parts of your

00:36:18,089 --> 00:36:36,960
paragraph instead of doing doing it for

00:36:20,160 --> 00:36:38,790
all of sorry thank you very much now

00:36:36,960 --> 00:36:40,349
it's time for the questions so thank you

00:36:38,790 --> 00:36:43,020
for listening and just feel free to ask

00:36:40,349 --> 00:36:45,210
us anything yeah the question was how do

00:36:43,020 --> 00:36:46,380
you get VSP support in IntelliJ now

00:36:45,210 --> 00:36:49,020
right

00:36:46,380 --> 00:36:51,000
VSP has been merged in IntelliJ in the

00:36:49,020 --> 00:36:53,910
net view of the Scala plugin so you can

00:36:51,000 --> 00:36:56,460
just depend on it and update upgrade to

00:36:53,910 --> 00:37:02,190
it from from IntelliJ you need to use

00:36:56,460 --> 00:37:03,480
IntelliJ EAP 2018 12:2 and their

00:37:02,190 --> 00:37:04,710
structures are in the block course at

00:37:03,480 --> 00:37:05,280
your strengths here you can just go to

00:37:04,710 --> 00:37:07,260
the Scala

00:37:05,280 --> 00:37:10,320
roughest engine see you see everything

00:37:07,260 --> 00:37:13,050
there yes yeah during your talk my

00:37:10,320 --> 00:37:15,780
battery went from 40 percent to 2

00:37:13,050 --> 00:37:18,060
percent you said that was a little

00:37:15,780 --> 00:37:23,850
kinder to the battery having benchmarks

00:37:18,060 --> 00:37:25,410
for that not really but let's say you

00:37:23,850 --> 00:37:26,970
could at least bring more compilation

00:37:25,410 --> 00:37:29,370
cycles that you would do with asthma tea

00:37:26,970 --> 00:37:31,110
I think we were interesting to try to

00:37:29,370 --> 00:37:32,820
find out that way we can benchmark this

00:37:31,110 --> 00:37:35,550
but it would very much depend on your

00:37:32,820 --> 00:37:39,360
workflow and the way you use SBT and if

00:37:35,550 --> 00:37:40,740
you keep SBT hot or not yourself like it

00:37:39,360 --> 00:37:43,380
very much depends on lots of things but

00:37:40,740 --> 00:37:45,540
by only having bluebies is only like a

00:37:43,380 --> 00:37:47,940
nail gun server so he only has one JVM

00:37:45,540 --> 00:37:51,480
and it has two different compilers and

00:37:47,940 --> 00:37:54,090
different class holders so that's better

00:37:51,480 --> 00:37:55,800
than just having IntelliJ have its own

00:37:54,090 --> 00:37:59,700
version of the compiler running in the

00:37:55,800 --> 00:38:03,030
background optimized budget and use your

00:37:59,700 --> 00:38:04,170
SBT shell doing the same and potentially

00:38:03,030 --> 00:38:07,260
doing the same every time you read

00:38:04,170 --> 00:38:08,730
overview exit so there should

00:38:07,260 --> 00:38:10,770
theoretically be a like a peak

00:38:08,730 --> 00:38:13,430
improvement just because of the

00:38:10,770 --> 00:38:15,780
centralization we talked about before I

00:38:13,430 --> 00:38:18,360
wondering whether this tool is able to

00:38:15,780 --> 00:38:20,130
help with depend to speed up dependency

00:38:18,360 --> 00:38:22,920
resolution when you add new dependency

00:38:20,130 --> 00:38:25,710
to the project the question is whether

00:38:22,920 --> 00:38:28,140
loop would be able to make difference

00:38:25,710 --> 00:38:29,730
reservation faster and the answer is

00:38:28,140 --> 00:38:31,980
that loop does not take care of

00:38:29,730 --> 00:38:33,780
dependency resolution by itself when you

00:38:31,980 --> 00:38:37,020
generate the blood configuration files

00:38:33,780 --> 00:38:38,610
using blueprints all SBT is going to do

00:38:37,020 --> 00:38:40,020
the dependency resolution and then your

00:38:38,610 --> 00:38:44,070
class pass is going to be exported to

00:38:40,020 --> 00:38:46,110
the global configuration file blue

00:38:44,070 --> 00:38:48,300
there's only three things well compile

00:38:46,110 --> 00:38:50,130
this and run everything else goes to

00:38:48,300 --> 00:38:52,480
another pill tool and it does only free

00:38:50,130 --> 00:38:56,409
things like a dead

00:38:52,480 --> 00:38:56,409

YouTube URL: https://www.youtube.com/watch?v=O3H0U2BjUq8


