Title: Fork It Harder Make It Better by Justin Kaeser
Publication date: 2018-09-22
Playlist: Scala Days New York 2018
Description: 
	This video was recorded at Scala Days New York 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://na.scaladays.org/schedule/fork-it-harder-make-it-better
Captions: 
	00:00:05,080 --> 00:00:09,389
so you may recognize this picture I had

00:00:08,930 --> 00:00:14,849
as of

00:00:09,389 --> 00:00:17,730
around who recognizes this yeah you like

00:00:14,849 --> 00:00:21,300
from some gallery in Madrid or from

00:00:17,730 --> 00:00:25,680
classical programmer paintings so I am I

00:00:21,300 --> 00:00:29,309
think the title is the Scala tooling

00:00:25,680 --> 00:00:34,680
ecosystem in the middle here we have

00:00:29,309 --> 00:00:36,719
build tools I'll get around to that so

00:00:34,680 --> 00:00:42,329
the purpose of this talk is it's all

00:00:36,719 --> 00:00:45,540
about tooling and yeah I want to talk

00:00:42,329 --> 00:00:48,650
about some various tools and various

00:00:45,540 --> 00:00:51,720
ecosystems inside and outside the Scala

00:00:48,650 --> 00:00:55,050
ecosystem that has the potential to

00:00:51,720 --> 00:00:56,940
improve your development experience I'll

00:00:55,050 --> 00:01:00,870
give some examples like how other

00:00:56,940 --> 00:01:05,339
languages do it better and where this

00:01:00,870 --> 00:01:06,930
could lead in Scala land the talk is

00:01:05,339 --> 00:01:08,960
structured is a kind of hegelian

00:01:06,930 --> 00:01:12,719
dialectic with thesis antithesis

00:01:08,960 --> 00:01:16,049
synthesis and as you see illustrated by

00:01:12,719 --> 00:01:22,440
Hieronymus Bosch and with lyrics by Daft

00:01:16,049 --> 00:01:26,299
Punk so the lyrics for kit make it do it

00:01:22,440 --> 00:01:30,750
makes us harder they're faster stronger

00:01:26,299 --> 00:01:33,479
right so for King I'm using this term

00:01:30,750 --> 00:01:35,909
liberally is something like creating new

00:01:33,479 --> 00:01:40,049
tools or maybe for King existing tools

00:01:35,909 --> 00:01:42,000
that make the whole process they they

00:01:40,049 --> 00:01:45,510
might make the whole process harder to

00:01:42,000 --> 00:01:48,290
learn but they would could enable better

00:01:45,510 --> 00:01:52,290
and faster ways of doing things and

00:01:48,290 --> 00:01:54,150
overall make the ecosystem stronger so

00:01:52,290 --> 00:01:58,110
I'm going to assume some basic

00:01:54,150 --> 00:02:02,670
familiarity with most common tools but

00:01:58,110 --> 00:02:05,970
give overview of various other things so

00:02:02,670 --> 00:02:09,149
let's zoom in quickly on stuff the tools

00:02:05,970 --> 00:02:12,510
helping help us with this is a very much

00:02:09,149 --> 00:02:14,670
incomplete list we have your learning

00:02:12,510 --> 00:02:15,410
experimenting editing code exploring

00:02:14,670 --> 00:02:17,770
understanding

00:02:15,410 --> 00:02:20,540
burning building dependency management

00:02:17,770 --> 00:02:24,080
publishing versioning I'll give examples

00:02:20,540 --> 00:02:26,360
of these things shortly so let's start

00:02:24,080 --> 00:02:30,500
with the first section learning and

00:02:26,360 --> 00:02:32,900
experimenting so I think this is

00:02:30,500 --> 00:02:35,540
actually very important and maybe

00:02:32,900 --> 00:02:39,020
underrated part of the whole programming

00:02:35,540 --> 00:02:42,470
experiences like even if you're not a

00:02:39,020 --> 00:02:44,570
beginner at all you will constantly come

00:02:42,470 --> 00:02:48,080
in contact with new libraries new

00:02:44,570 --> 00:02:49,850
frameworks code written by someone else

00:02:48,080 --> 00:02:52,610
on your team that you've never seen

00:02:49,850 --> 00:02:55,490
before but now you have to fix it so we

00:02:52,610 --> 00:03:00,320
have to learn and figure out how this

00:02:55,490 --> 00:03:03,260
stuff works and just reading code helps

00:03:00,320 --> 00:03:05,450
but it's not that great we want fast

00:03:03,260 --> 00:03:08,960
feedback loops to improve our

00:03:05,450 --> 00:03:11,630
productivity so the classical tool for

00:03:08,960 --> 00:03:15,220
fast feedback loops is the repo the read

00:03:11,630 --> 00:03:21,440
eval print loop Scala comes with one

00:03:15,220 --> 00:03:26,030
IntelliJ comes with one improved one is

00:03:21,440 --> 00:03:28,460
the M&I triple by Howie Lee which comes

00:03:26,030 --> 00:03:32,150
with various features such as history

00:03:28,460 --> 00:03:36,040
search syntax highlighting block input

00:03:32,150 --> 00:03:39,440
undo redo importing artifacts right from

00:03:36,040 --> 00:03:45,200
Ivy or maven and many others that I

00:03:39,440 --> 00:03:49,340
don't even know of a different approach

00:03:45,200 --> 00:03:54,320
is the worksheet where you keep a

00:03:49,340 --> 00:03:56,510
persistent file you could say around

00:03:54,320 --> 00:04:00,980
that you edit you change it a bit and

00:03:56,510 --> 00:04:04,130
you run it I here I'm using this case D

00:04:00,980 --> 00:04:06,380
worksheet to import the Giga horse

00:04:04,130 --> 00:04:07,270
library you see runs with a CPT in the

00:04:06,380 --> 00:04:10,580
background

00:04:07,270 --> 00:04:14,440
I'm just trying out an example from the

00:04:10,580 --> 00:04:18,170
Giga horse HTTP library website and

00:04:14,440 --> 00:04:21,730
editing a bit and I'm just going to use

00:04:18,170 --> 00:04:24,400
it to download the worksheet and working

00:04:21,730 --> 00:04:29,950
right at this moment let's see run it

00:04:24,400 --> 00:04:31,080
quickly yeah and you see some HTML and

00:04:29,950 --> 00:04:35,650
it starts over

00:04:31,080 --> 00:04:39,160
so this unlike the repple this is which

00:04:35,650 --> 00:04:41,020
has just line by line input and the

00:04:39,160 --> 00:04:44,350
repple keeps a persistent state the

00:04:41,020 --> 00:04:49,720
worksheet just reevaluate everything at

00:04:44,350 --> 00:04:53,140
once but this is practical for sharing

00:04:49,720 --> 00:04:55,090
code examples for instance we also have

00:04:53,140 --> 00:04:59,230
a worksheet in the Scala plugin by the

00:04:55,090 --> 00:05:03,700
way so another approach my favorite

00:04:59,230 --> 00:05:06,190
actually is the notebook way which is a

00:05:03,700 --> 00:05:09,640
bit of a cross between worksheet and

00:05:06,190 --> 00:05:12,850
ripple so you keep a persistent state

00:05:09,640 --> 00:05:17,140
around but you also have a multi-line

00:05:12,850 --> 00:05:21,280
editor where you can start back and

00:05:17,140 --> 00:05:25,620
change things after evaluating them here

00:05:21,280 --> 00:05:29,670
I'm showing the Jupiter Scala notebook

00:05:25,620 --> 00:05:34,080
which is actually based on a Python

00:05:29,670 --> 00:05:37,290
notebook and I'm just using it to

00:05:34,080 --> 00:05:40,990
experiment a bit create a histogram a

00:05:37,290 --> 00:05:44,590
common feature of notebooks is that they

00:05:40,990 --> 00:05:46,570
have some graphical output that allows

00:05:44,590 --> 00:05:48,880
you to get quick graphical feedback that

00:05:46,570 --> 00:05:52,990
makes it more popular with data

00:05:48,880 --> 00:05:54,940
scientists I think one reason we don't

00:05:52,990 --> 00:05:58,330
use this enough is that it's badly

00:05:54,940 --> 00:06:00,760
integrated with full projects so I can

00:05:58,330 --> 00:06:03,820
use it too yeah like a ripple but not

00:06:00,760 --> 00:06:06,910
within my project to try out stuff in my

00:06:03,820 --> 00:06:11,800
project we might be improving this in

00:06:06,910 --> 00:06:14,980
the future by morphing our worksheet in

00:06:11,800 --> 00:06:18,360
the IntelliJ scalloped log into more

00:06:14,980 --> 00:06:18,360
notebook style interface

00:06:18,779 --> 00:06:23,459
the work she actually came from

00:06:20,989 --> 00:06:26,309
Mathematica originally the first version

00:06:23,459 --> 00:06:28,229
that came out in like 1988 premiered the

00:06:26,309 --> 00:06:32,339
this design and I think they still have

00:06:28,229 --> 00:06:34,709
one of the best not worksheet notebook

00:06:32,339 --> 00:06:37,110
versions they use it for documentation

00:06:34,709 --> 00:06:38,459
as well as for the regular interface so

00:06:37,110 --> 00:06:42,899
here I'm just looking at the nest

00:06:38,459 --> 00:06:45,329
function messing around with it changing

00:06:42,899 --> 00:06:47,849
some parameters I found a cute example

00:06:45,329 --> 00:06:51,389
here changing an X to a new in a

00:06:47,849 --> 00:06:54,089
serpent's key triangle got inspired to

00:06:51,389 --> 00:07:00,149
just here import a picture of what snaps

00:06:54,089 --> 00:07:03,179
your Pinsky scale it down a bit and yeah

00:07:00,149 --> 00:07:06,469
220 pixels and put it in here and you

00:07:03,179 --> 00:07:10,409
got a su Pinsky triangle you're welcome

00:07:06,469 --> 00:07:14,939
so in my opinion this is like a gold

00:07:10,409 --> 00:07:17,610
standard for for documentation if we

00:07:14,939 --> 00:07:19,519
have a really interactive documentation

00:07:17,610 --> 00:07:23,789
that's not only type check but actually

00:07:19,519 --> 00:07:25,649
executable changeable on the fly it

00:07:23,789 --> 00:07:30,149
would be great if we could get somewhere

00:07:25,649 --> 00:07:32,399
in this direction and Scala so editing

00:07:30,149 --> 00:07:36,179
and understanding so editing is not just

00:07:32,399 --> 00:07:39,629
typing code unless you are already have

00:07:36,179 --> 00:07:44,489
a really good idea of what you are going

00:07:39,629 --> 00:07:46,499
to type most of us don't so you often

00:07:44,489 --> 00:07:49,199
need to understand the code in front of

00:07:46,499 --> 00:07:54,149
you as well it's another example from

00:07:49,199 --> 00:07:58,229
Mathematica and using it to input just

00:07:54,149 --> 00:08:01,349
some random math formula with a square

00:07:58,229 --> 00:08:04,169
root or some and Mathematica pretty

00:08:01,349 --> 00:08:06,360
prints it is a nice mathematical formula

00:08:04,169 --> 00:08:08,339
because that's what it does you see I

00:08:06,360 --> 00:08:12,059
can just press a button and it changes

00:08:08,339 --> 00:08:14,329
the output or I can use a function like

00:08:12,059 --> 00:08:17,309
here input form to change it back to the

00:08:14,329 --> 00:08:19,919
to a form that you can input easily or

00:08:17,309 --> 00:08:20,470
full form which changes it to a kind of

00:08:19,919 --> 00:08:23,530
list

00:08:20,470 --> 00:08:27,160
as expression style syntax or even the

00:08:23,530 --> 00:08:30,280
tree form which gives you a full tree of

00:08:27,160 --> 00:08:32,580
the same syntax so multiple ways of

00:08:30,280 --> 00:08:35,430
viewing your syntax I think that's

00:08:32,580 --> 00:08:38,080
something that we're missing in regular

00:08:35,430 --> 00:08:43,060
in in most programming languages where

00:08:38,080 --> 00:08:45,880
we explicitly write it one way to help

00:08:43,060 --> 00:08:47,560
people understand it but mostly to help

00:08:45,880 --> 00:08:50,320
ourselves understand it and others think

00:08:47,560 --> 00:08:52,990
a different way about how the same

00:08:50,320 --> 00:08:56,820
semantically same code is structured so

00:08:52,990 --> 00:08:56,820
they might have more trouble with that

00:08:57,480 --> 00:09:02,550
one thing I came across is down from the

00:09:00,220 --> 00:09:05,650
ivory tower back to bare metals the

00:09:02,550 --> 00:09:11,350
interactive disassembler so if you this

00:09:05,650 --> 00:09:13,390
assembles some machine code and then

00:09:11,350 --> 00:09:17,710
you'll just have long lists of assembly

00:09:13,390 --> 00:09:21,400
symbols and that's not so intuitive to

00:09:17,710 --> 00:09:23,830
understand how the structure so this

00:09:21,400 --> 00:09:28,680
renders a nice graph view where jumps

00:09:23,830 --> 00:09:34,120
are yeah rendered as edges between

00:09:28,680 --> 00:09:35,770
different chunks of code for Scala which

00:09:34,120 --> 00:09:41,110
is a more structured language this might

00:09:35,770 --> 00:09:44,680
be not quite as applicable but an

00:09:41,110 --> 00:09:47,589
approach I found was this code bubbles

00:09:44,680 --> 00:09:50,620
IDE it went around a few years ago it's

00:09:47,589 --> 00:09:55,450
still being developed it's based on

00:09:50,620 --> 00:09:58,900
Eclipse and where you see here you open

00:09:55,450 --> 00:10:03,810
not a file but like method for instance

00:09:58,900 --> 00:10:06,250
in a bubble and you can open a

00:10:03,810 --> 00:10:08,950
definition and it opens in another

00:10:06,250 --> 00:10:12,370
bubble side-by-side so you can see the

00:10:08,950 --> 00:10:14,890
usage and the use site right in front of

00:10:12,370 --> 00:10:16,810
you next to each other without having to

00:10:14,890 --> 00:10:20,500
mess with editor windows and splitting

00:10:16,810 --> 00:10:24,460
them and moving files around I think

00:10:20,500 --> 00:10:28,769
this is a great approach in making like

00:10:24,460 --> 00:10:30,869
files second-class citizen of

00:10:28,769 --> 00:10:34,679
organization because I think files are

00:10:30,869 --> 00:10:36,749
pretty crude mechanism for this and yeah

00:10:34,679 --> 00:10:39,749
it allows you a more semantic way of

00:10:36,749 --> 00:10:44,009
exploring your code searching your work

00:10:39,749 --> 00:10:45,869
environment this thing is an IDE

00:10:44,009 --> 00:10:48,720
unfortunately it's not very powerful it

00:10:45,869 --> 00:10:50,869
doesn't even import maven or whatever it

00:10:48,720 --> 00:10:53,819
would be great if someone worked on

00:10:50,869 --> 00:11:00,949
IntelliJ integration of this concept I

00:10:53,819 --> 00:11:00,949
think ok compiling

00:11:03,050 --> 00:11:09,060
our compiler is even tool yeah you might

00:11:07,140 --> 00:11:11,400
argue not but they are kind of the

00:11:09,060 --> 00:11:15,630
interface between you and working

00:11:11,400 --> 00:11:18,870
software so if I worked with a regular

00:11:15,630 --> 00:11:21,360
Scala compiler there is for instance

00:11:18,870 --> 00:11:24,510
there is an actual fork here the type

00:11:21,360 --> 00:11:28,050
level Scala compiler which yeah aims to

00:11:24,510 --> 00:11:31,500
bring new features to the Scala language

00:11:28,050 --> 00:11:37,250
as a sort of a testing bit especially

00:11:31,500 --> 00:11:41,160
for projects in the type level ecosystem

00:11:37,250 --> 00:11:43,350
so you want to add a new compiler

00:11:41,160 --> 00:11:47,390
feature and if it has a reasonable

00:11:43,350 --> 00:11:50,370
chance to be added to regular Scala then

00:11:47,390 --> 00:11:53,550
you will probably have it merged more

00:11:50,370 --> 00:11:58,280
quickly in type level Scala and can try

00:11:53,550 --> 00:11:58,280
it out and base your work on that

00:11:59,240 --> 00:12:08,010
different approach the reasonable Scala

00:12:03,120 --> 00:12:14,930
compiler created by Eugene bamako at

00:12:08,010 --> 00:12:19,550
Twitter he's not pictured here is oh

00:12:14,930 --> 00:12:19,550
there you are there is in real life

00:12:20,780 --> 00:12:28,240
cool so would you like to give a

00:12:25,760 --> 00:12:31,640
sentence about reasonable Scala compiler

00:12:28,240 --> 00:12:34,610
No yeah but that's the basic idea

00:12:31,640 --> 00:12:37,010
you you and we're experimental

00:12:34,610 --> 00:12:42,500
reimplementation of the scalar compiler

00:12:37,010 --> 00:12:45,470
to explore performance issues in Scala

00:12:42,500 --> 00:12:51,220
find out what kind of features have a

00:12:45,470 --> 00:12:53,960
bigger performance impact and either

00:12:51,220 --> 00:12:59,570
eventually maybe this will turn into a

00:12:53,960 --> 00:13:02,450
real Scala compiler maybe yeah okay it's

00:12:59,570 --> 00:13:04,430
an experiment yeah or maybe we their

00:13:02,450 --> 00:13:10,250
learnings will flow into the regular

00:13:04,430 --> 00:13:13,850
Scala compiler okay not the compiler but

00:13:10,250 --> 00:13:16,580
a compiler server is loop developed at

00:13:13,850 --> 00:13:18,140
the Scala Center by Jorge and Mota right

00:13:16,580 --> 00:13:21,920
over here

00:13:18,140 --> 00:13:23,900
it's a server that runs in the

00:13:21,920 --> 00:13:27,320
background and it's meant to speed up

00:13:23,900 --> 00:13:32,080
your compiling by keeping a hot instance

00:13:27,320 --> 00:13:32,080
of the sink incremental compiler running

00:13:32,380 --> 00:13:39,110
it has integrations with various build

00:13:36,050 --> 00:13:42,830
tools so you may be already able to

00:13:39,110 --> 00:13:47,270
profit of better compile times in Gradle

00:13:42,830 --> 00:13:50,740
for instance which uses a very old sink

00:13:47,270 --> 00:13:53,900
version at this point and it also

00:13:50,740 --> 00:13:56,000
integrates with IntelliJ in the latest

00:13:53,900 --> 00:13:58,600
nightly version I'll talk a bit more

00:13:56,000 --> 00:14:03,380
about that later

00:13:58,600 --> 00:14:05,860
so compiling is the integral part of

00:14:03,380 --> 00:14:09,320
building but building involves much more

00:14:05,860 --> 00:14:12,410
such as managing dependencies putting

00:14:09,320 --> 00:14:16,610
stuff together into a releasable

00:14:12,410 --> 00:14:19,270
artifact publishing whatever and I I did

00:14:16,610 --> 00:14:22,370
a little research and it turns out there

00:14:19,270 --> 00:14:23,870
developers in general don't seem to be

00:14:22,370 --> 00:14:25,970
very happy with their build tools as

00:14:23,870 --> 00:14:28,310
evidenced by the fact that there's a

00:14:25,970 --> 00:14:29,320
build tool and being an egg for just

00:14:28,310 --> 00:14:38,770
about every letter of the

00:14:29,320 --> 00:14:43,120
that yeah and I think none of these are

00:14:38,770 --> 00:14:45,550
actually Scala focused bill tools but

00:14:43,120 --> 00:14:51,040
we've got plenty of our own aches

00:14:45,550 --> 00:14:54,240
headaches with Scala tools we have the

00:14:51,040 --> 00:14:57,730
classical JVM ones whip such as and

00:14:54,240 --> 00:15:01,900
maven Gradle that will also compare

00:14:57,730 --> 00:15:10,450
Scala but we also have the Scala focused

00:15:01,900 --> 00:15:14,470
tools such as SBT CBT no fury yeah fury

00:15:10,450 --> 00:15:15,180
has one user yeah fury by John right

00:15:14,470 --> 00:15:18,000
over here

00:15:15,180 --> 00:15:20,290
maybe you soon it will have more users

00:15:18,000 --> 00:15:26,470
in two months it will have more users

00:15:20,290 --> 00:15:28,840
all right and like the mono repo focused

00:15:26,470 --> 00:15:32,020
tools that are sort of all inspired by

00:15:28,840 --> 00:15:36,750
basil and there's also pants and buck by

00:15:32,020 --> 00:15:36,750
face book get it yeah

00:15:37,230 --> 00:15:46,990
so one quick look at basil one of the

00:15:40,750 --> 00:15:51,190
main ideas is that you have reproducible

00:15:46,990 --> 00:15:54,970
and fast builds that are correct so

00:15:51,190 --> 00:15:56,950
basil aims to achieve this by defining

00:15:54,970 --> 00:16:00,130
build tests fully in terms of their

00:15:56,950 --> 00:16:02,140
inputs so you don't depend on any magic

00:16:00,130 --> 00:16:04,780
environment variables everything has to

00:16:02,140 --> 00:16:09,370
be specified as an input to a build task

00:16:04,780 --> 00:16:11,260
and this enables you to cache the

00:16:09,370 --> 00:16:13,480
outputs efficiently and keep them around

00:16:11,260 --> 00:16:17,460
you can share these caches between

00:16:13,480 --> 00:16:17,460
different machines for instance

00:16:17,790 --> 00:16:24,790
quick look at the scalloped focus tools

00:16:20,590 --> 00:16:30,160
so if you remember very old versions of

00:16:24,790 --> 00:16:33,910
SPT they tried to define a build only in

00:16:30,160 --> 00:16:37,710
terms of Scala as a Scala library kind

00:16:33,910 --> 00:16:40,060
of SB T's have moved away from that and

00:16:37,710 --> 00:16:43,870
some people weren't happy with that so

00:16:40,060 --> 00:16:47,890
they created build tools that aim to

00:16:43,870 --> 00:16:52,330
simplify the complication that aim to

00:16:47,890 --> 00:16:56,260
simplify the configuration again by

00:16:52,330 --> 00:16:58,300
using plain old Scala so CBT and mill

00:16:56,260 --> 00:17:01,630
are similar in that regard are so

00:16:58,300 --> 00:17:05,910
similar in that they keep instance of

00:17:01,630 --> 00:17:09,850
themselves around in based on nail-gun

00:17:05,910 --> 00:17:13,630
which enables quicker command feedback

00:17:09,850 --> 00:17:20,199
as opposed to starting a new JVM every

00:17:13,630 --> 00:17:21,819
time they're they differ slightly for

00:17:20,199 --> 00:17:24,550
instance in the way the configuration

00:17:21,819 --> 00:17:30,130
exactly is implemented in CBT everything

00:17:24,550 --> 00:17:33,490
is really plain Scala built graph plane

00:17:30,130 --> 00:17:37,000
Scala methods that you call so the task

00:17:33,490 --> 00:17:41,350
graph is basically just the method call

00:17:37,000 --> 00:17:44,200
graph mill uses a little more magic so

00:17:41,350 --> 00:17:49,960
that allows you like an SPT to have an

00:17:44,200 --> 00:17:52,380
inspectable task graph and it takes some

00:17:49,960 --> 00:17:54,910
inspiration from basil as well by having

00:17:52,380 --> 00:17:56,950
tasks where all the inputs are fully

00:17:54,910 --> 00:18:00,340
defined so that they can automatically

00:17:56,950 --> 00:18:04,410
be cached where CBT leaves caching to

00:18:00,340 --> 00:18:04,410
each implementation of a task

00:18:05,040 --> 00:18:12,890
okay so as open source developer

00:18:10,500 --> 00:18:16,280
occasionally you want to make a library

00:18:12,890 --> 00:18:19,020
available to everyone in the world and

00:18:16,280 --> 00:18:24,060
Scala and JVM land this has

00:18:19,020 --> 00:18:29,550
traditionally been and tedious there has

00:18:24,060 --> 00:18:32,580
been text adventures written about it so

00:18:29,550 --> 00:18:36,960
I looked at other places such as rest

00:18:32,580 --> 00:18:41,400
the cargo the rest package managers

00:18:36,960 --> 00:18:46,470
cargo so I'm just going to create create

00:18:41,400 --> 00:18:48,630
an API key here on crates IO and I'm

00:18:46,470 --> 00:18:52,770
trying to yeah

00:18:48,630 --> 00:18:56,700
I'm using cargo to create a new library

00:18:52,770 --> 00:18:59,160
empty library Oh have a quick look at it

00:18:56,700 --> 00:19:02,570
envious code what does it look like it's

00:18:59,160 --> 00:19:04,650
just a simple configuration file

00:19:02,570 --> 00:19:09,090
apparently they don't believe in Turing

00:19:04,650 --> 00:19:12,390
complete configuration so just gonna add

00:19:09,090 --> 00:19:16,170
this to get some commits and try to

00:19:12,390 --> 00:19:18,240
publish it to some updating registry

00:19:16,170 --> 00:19:22,010
stuff sending and I get an error

00:19:18,240 --> 00:19:27,320
I still didn't fully configure it for

00:19:22,010 --> 00:19:32,580
publishing so just add a description and

00:19:27,320 --> 00:19:34,610
license the WTF PL is appropriate I

00:19:32,580 --> 00:19:34,610
guess

00:19:35,190 --> 00:19:45,720
and going to try another publish well

00:19:40,020 --> 00:19:51,009
commit first write and publish does it

00:19:45,720 --> 00:19:53,259
work now yeah looks

00:19:51,009 --> 00:19:56,619
looks like it's going through I'll check

00:19:53,259 --> 00:20:00,309
the crates lay outside and it popped up

00:19:56,619 --> 00:20:03,580
right there nice so this took about two

00:20:00,309 --> 00:20:05,379
minutes of real time that I don't think

00:20:03,580 --> 00:20:11,350
I could create a ticket on so no type in

00:20:05,379 --> 00:20:15,179
that time contrasting that with Elm Elm

00:20:11,350 --> 00:20:18,369
has a similar publish experience it's

00:20:15,179 --> 00:20:20,049
based on more based on github so your

00:20:18,369 --> 00:20:23,679
project needs to be on github and like

00:20:20,049 --> 00:20:27,190
with rest i already published a project

00:20:23,679 --> 00:20:29,619
here and what i'm gonna do is i'm going

00:20:27,190 --> 00:20:33,609
to update it i'll make it better by

00:20:29,619 --> 00:20:39,669
adding a better function i'm gonna try

00:20:33,609 --> 00:20:45,129
to just look at what changes there are

00:20:39,669 --> 00:20:49,869
so Elm has this little tool there's an

00:20:45,129 --> 00:20:53,440
API diffing so it tells you if you add a

00:20:49,869 --> 00:20:58,499
method if you add a function then this

00:20:53,440 --> 00:21:03,609
will be a minor change and yeah here

00:20:58,499 --> 00:21:05,109
yeah it's pretty nice and so you can

00:21:03,609 --> 00:21:08,859
automatically bump it up to the new

00:21:05,109 --> 00:21:12,460
minor version and yeah it changes the

00:21:08,859 --> 00:21:15,279
configuration file for you and let's see

00:21:12,460 --> 00:21:19,179
if we can you know can commit of course

00:21:15,279 --> 00:21:23,980
we're gonna try to publish this what's

00:21:19,179 --> 00:21:26,919
missing I need to tag it okay add the

00:21:23,980 --> 00:21:30,730
tag but it's pretty straightforward try

00:21:26,919 --> 00:21:32,440
another publish okay success and we have

00:21:30,730 --> 00:21:37,419
a new version online version two one

00:21:32,440 --> 00:21:38,980
zero and likewise I thought okay I I

00:21:37,419 --> 00:21:41,950
don't want to make this better really

00:21:38,980 --> 00:21:44,859
I'll make it unbid they're just gonna

00:21:41,950 --> 00:21:47,830
remove this method gonna check the API

00:21:44,859 --> 00:21:49,300
div and yeah this is a major change

00:21:47,830 --> 00:21:53,770
because I remove

00:21:49,300 --> 00:21:55,390
function incompatible so I'm just going

00:21:53,770 --> 00:22:01,140
to the through the same process again

00:21:55,390 --> 00:22:08,530
bump yep automatically bump the version

00:22:01,140 --> 00:22:10,270
publish right at the gift tag push it so

00:22:08,530 --> 00:22:14,410
I think this would be really cool in

00:22:10,270 --> 00:22:16,420
Scala but we are api compatibility story

00:22:14,410 --> 00:22:17,650
it's probably a lot more complicated but

00:22:16,420 --> 00:22:21,730
we could probably cover a lot of ground

00:22:17,650 --> 00:22:22,300
just by looking at type signatures so

00:22:21,730 --> 00:22:30,880
there you go

00:22:22,300 --> 00:22:36,130
version 3 0 is like before okay except

00:22:30,880 --> 00:22:40,120
dependency management in SBT where semi

00:22:36,130 --> 00:22:42,190
stuck with IV which is tends to be kind

00:22:40,120 --> 00:22:44,460
of slow in resolving all the

00:22:42,190 --> 00:22:46,630
dependencies there's actually a drop-in

00:22:44,460 --> 00:22:52,330
replacement car ca you probably heard

00:22:46,630 --> 00:22:55,270
about it it's a little bit faster so if

00:22:52,330 --> 00:22:58,750
if you add it as a SBT plugin you can

00:22:55,270 --> 00:23:01,180
speed up your updates especially in

00:22:58,750 --> 00:23:04,810
IntelliJ which needs to do a resolve of

00:23:01,180 --> 00:23:07,120
things quite a bit it unfortunately

00:23:04,810 --> 00:23:13,180
doesn't work for every case but I think

00:23:07,120 --> 00:23:18,400
for most cases it works and I think

00:23:13,180 --> 00:23:22,750
there are efforts going on to integrate

00:23:18,400 --> 00:23:25,690
it more closely with SBT the newer build

00:23:22,750 --> 00:23:27,870
tools like mill and CBT used it by

00:23:25,690 --> 00:23:27,870
default

00:23:28,730 --> 00:23:39,790
yeah this is course yeah excuse me

00:23:35,200 --> 00:23:39,790
cursey a SPT course yeah

00:23:42,990 --> 00:23:50,000
a bit of a different approach yeah we've

00:23:46,320 --> 00:23:53,880
talked a lot about source dependencies

00:23:50,000 --> 00:23:56,700
NYX is another way of packaging stuff so

00:23:53,880 --> 00:23:58,410
it's more of yeah it's it's actually a

00:23:56,700 --> 00:24:01,950
package manager and not as such a

00:23:58,410 --> 00:24:03,960
dependency manager but it follows

00:24:01,950 --> 00:24:07,170
similar functional ideas

00:24:03,960 --> 00:24:11,220
it's like basil and whatever you fully

00:24:07,170 --> 00:24:14,850
specify your inputs you you make an

00:24:11,220 --> 00:24:18,000
isolated environment where all your

00:24:14,850 --> 00:24:19,860
environment variables are defined

00:24:18,000 --> 00:24:23,370
externally so you don't depend on magic

00:24:19,860 --> 00:24:26,880
things outside and build everything from

00:24:23,370 --> 00:24:30,210
source and again you can package here

00:24:26,880 --> 00:24:35,000
you can cache these output packages so

00:24:30,210 --> 00:24:38,610
it's not really a build tool it's more

00:24:35,000 --> 00:24:40,770
more general but also more granular

00:24:38,610 --> 00:24:43,290
because you don't have like individual

00:24:40,770 --> 00:24:47,309
targets of individual modules it's just

00:24:43,290 --> 00:24:51,120
one one source software artefact is one

00:24:47,309 --> 00:24:56,820
mixed package it's possible to transform

00:24:51,120 --> 00:25:00,090
SBT SBT projects to mix with a plugin

00:24:56,820 --> 00:25:06,270
called SP ticks I haven't tried it yet

00:25:00,090 --> 00:25:10,620
but seems cool so yeah source

00:25:06,270 --> 00:25:14,040
dependencies they may have problems but

00:25:10,620 --> 00:25:16,980
they seem to make a lot of things easier

00:25:14,040 --> 00:25:19,530
in terms of getting software out there

00:25:16,980 --> 00:25:22,020
for everyone and so wouldn't it be great

00:25:19,530 --> 00:25:24,900
if we could just resolve them from

00:25:22,020 --> 00:25:29,340
github there is a service that helps you

00:25:24,900 --> 00:25:34,110
with this jetpack you just add a jetpack

00:25:29,340 --> 00:25:37,500
resolver and depend on github repo in

00:25:34,110 --> 00:25:39,990
SPT format for instance just give it a

00:25:37,500 --> 00:25:41,700
commit hash or a tag and tip tech will

00:25:39,990 --> 00:25:45,720
actually build it for you build the

00:25:41,700 --> 00:25:47,490
artifact for you I'm not quite clear

00:25:45,720 --> 00:25:50,309
where the limitations of this are but

00:25:47,490 --> 00:25:52,410
for from regular projects it seems to

00:25:50,309 --> 00:25:56,430
work fine so

00:25:52,410 --> 00:26:00,450
that's one way of getting getting

00:25:56,430 --> 00:26:02,400
getting development builds out quickly

00:26:00,450 --> 00:26:08,070
without having to deal with Sona type or

00:26:02,400 --> 00:26:12,440
whatever okay so I give an overview of

00:26:08,070 --> 00:26:17,730
all kinds of things outside of the Scala

00:26:12,440 --> 00:26:24,120
ecosystem and inside and what stuff we

00:26:17,730 --> 00:26:26,520
could try out but what what about the

00:26:24,120 --> 00:26:30,660
tools we already have we're already

00:26:26,520 --> 00:26:34,880
putting a lot of work into so here comes

00:26:30,660 --> 00:26:40,980
the antithesis more than ever hour after

00:26:34,880 --> 00:26:43,410
hour work is never over what does this

00:26:40,980 --> 00:26:46,650
mean yes so we put a lot of work into

00:26:43,410 --> 00:26:53,130
tools existing such as SPT and the Scala

00:26:46,650 --> 00:26:55,680
compiler and IntelliJ and so on and we

00:26:53,130 --> 00:26:57,960
we've become used to these tools so in

00:26:55,680 --> 00:26:59,820
learning new paradigms learning new

00:26:57,960 --> 00:27:02,730
tools that's quite a bit of cognitive

00:26:59,820 --> 00:27:04,380
overhead so why don't we why don't we

00:27:02,730 --> 00:27:07,860
work on the existing tools to make them

00:27:04,380 --> 00:27:10,440
better incrementally and of course there

00:27:07,860 --> 00:27:14,300
is progress in that direction as well

00:27:10,440 --> 00:27:16,860
that Scala compiler is being continually

00:27:14,300 --> 00:27:20,520
developed by light been mostly and many

00:27:16,860 --> 00:27:23,010
contributors and they're trying to make

00:27:20,520 --> 00:27:25,590
stuff easier by simplifying collections

00:27:23,010 --> 00:27:30,210
by removing the can build from from the

00:27:25,590 --> 00:27:32,660
user facing API improving compiler for

00:27:30,210 --> 00:27:35,640
performance of course continually and

00:27:32,660 --> 00:27:38,720
just more general user friendliness

00:27:35,640 --> 00:27:38,720
whatever that means

00:27:40,040 --> 00:27:45,270
svt as well it's been around a while

00:27:42,630 --> 00:27:47,850
since 2009 it's also being maintained by

00:27:45,270 --> 00:27:53,010
Lightman mostly Dale over here

00:27:47,850 --> 00:27:54,990
Eugene isn't here but doesn't matter so

00:27:53,010 --> 00:27:57,810
as you may know it's used for the

00:27:54,990 --> 00:28:01,140
majority of scalability so any

00:27:57,810 --> 00:28:04,110
improvement we make on it will benefit

00:28:01,140 --> 00:28:06,750
many people directly and quickly there

00:28:04,110 --> 00:28:09,930
are also lots of plugins that depend on

00:28:06,750 --> 00:28:17,490
a bit enable very specific workflow

00:28:09,930 --> 00:28:21,290
tasks so on the near-term road roadmap

00:28:17,490 --> 00:28:25,920
we have things like cross JDK testing

00:28:21,290 --> 00:28:28,500
using the contributions by labeling

00:28:25,920 --> 00:28:30,660
issues by taking part in Scala sprees

00:28:28,500 --> 00:28:35,070
like we had on Tuesday before the

00:28:30,660 --> 00:28:38,910
conference started organizing tests and

00:28:35,070 --> 00:28:42,450
go better and of course I have to

00:28:38,910 --> 00:28:45,510
mention this IntelliJ Scala plug-in

00:28:42,450 --> 00:28:48,960
thing it's been around even longer since

00:28:45,510 --> 00:28:50,550
2006 are the first commits I saw I've

00:28:48,960 --> 00:28:52,890
been only working on it for about two

00:28:50,550 --> 00:28:57,300
years currently there's nine people on

00:28:52,890 --> 00:29:01,500
the team and we have quite a lot of

00:28:57,300 --> 00:29:08,550
things on the roadmap closer and further

00:29:01,500 --> 00:29:10,380
term such as Scala format support there

00:29:08,550 --> 00:29:13,470
are semantic highlighting fixing the

00:29:10,380 --> 00:29:17,730
error highlighting one by one and maybe

00:29:13,470 --> 00:29:23,090
in future more thoroughly who think oh

00:29:17,730 --> 00:29:25,830
I'm calling implicit radar making the

00:29:23,090 --> 00:29:31,020
first step easier with a one-click

00:29:25,830 --> 00:29:32,820
distribution and other things so short

00:29:31,020 --> 00:29:35,190
demo of this one-click installer so if

00:29:32,820 --> 00:29:38,970
you remember how you installed IntelliJ

00:29:35,190 --> 00:29:41,580
who's actually using IntelliJ yeah

00:29:38,970 --> 00:29:44,220
that's yeah that's most of you so so

00:29:41,580 --> 00:29:45,930
yeah if you remember installing it might

00:29:44,220 --> 00:29:47,279
have been a hundred click tedious

00:29:45,930 --> 00:29:49,380
process

00:29:47,279 --> 00:29:56,340
it's a little easier I just downloaded

00:29:49,380 --> 00:29:58,850
this bundle one-click open load and we

00:29:56,340 --> 00:30:03,059
have hello world

00:29:58,850 --> 00:30:05,220
just run it it comes with JDK and SBT

00:30:03,059 --> 00:30:07,820
and everything everything you need to

00:30:05,220 --> 00:30:15,960
just get started quickly with Scala and

00:30:07,820 --> 00:30:18,950
edit like three four hundred megabytes

00:30:15,960 --> 00:30:23,580
that's less than half of the usual

00:30:18,950 --> 00:30:25,110
community distribution because it takes

00:30:23,580 --> 00:30:29,539
away all of a lot of the things you

00:30:25,110 --> 00:30:29,539
don't need for a Scala like Colin

00:30:31,660 --> 00:30:36,640
so yeah I'm calling this the implicit

00:30:33,970 --> 00:30:41,230
radar paavo back there has been working

00:30:36,640 --> 00:30:43,930
on it so yeah we want to see what's up

00:30:41,230 --> 00:30:45,730
with implicit so just gonna press a

00:30:43,930 --> 00:30:49,300
button and see what value is actually

00:30:45,730 --> 00:30:52,990
being passed to as an implicit parameter

00:30:49,300 --> 00:30:58,030
or when a value implicit import is

00:30:52,990 --> 00:31:02,310
missing or when you're passing an

00:30:58,030 --> 00:31:05,350
implicit explicitly as a parameter and

00:31:02,310 --> 00:31:08,680
here also it shows you implicit

00:31:05,350 --> 00:31:11,320
conversions and the same thing for a

00:31:08,680 --> 00:31:13,060
standard library shows you what what

00:31:11,320 --> 00:31:16,890
implicit sits taking from this gap

00:31:13,060 --> 00:31:22,810
standard library to make all these

00:31:16,890 --> 00:31:30,540
collection functions work so your work

00:31:22,810 --> 00:31:33,730
is work is happening but I think the the

00:31:30,540 --> 00:31:38,020
dichotomy between we should fork things

00:31:33,730 --> 00:31:40,690
and create new things new better way of

00:31:38,020 --> 00:31:42,820
doing things and no we should we should

00:31:40,690 --> 00:31:44,220
work on the stuff we have and make it

00:31:42,820 --> 00:31:49,330
better it's a bit of a false dichotomy

00:31:44,220 --> 00:31:51,430
we can integrate or synthesize so yeah

00:31:49,330 --> 00:31:54,070
this is the final part of the dialectic

00:31:51,430 --> 00:31:56,560
the synthesis fork it harder make it

00:31:54,070 --> 00:31:59,740
better do it faster makes us stronger

00:31:56,560 --> 00:32:02,490
more than ever hour after hour work is

00:31:59,740 --> 00:32:02,490
never over

00:32:04,909 --> 00:32:11,549
and nothing yet

00:32:07,429 --> 00:32:16,889
still got a few minutes right so if we

00:32:11,549 --> 00:32:19,889
can agree on certain protocols and

00:32:16,889 --> 00:32:24,440
formats we can better integrate the old

00:32:19,889 --> 00:32:26,639
with a new we can easily integrate

00:32:24,440 --> 00:32:30,659
intellij with new built tools for

00:32:26,639 --> 00:32:33,169
instance so there has been work

00:32:30,659 --> 00:32:37,740
happening in various directions

00:32:33,169 --> 00:32:39,210
improving both all tools such as Jorge

00:32:37,740 --> 00:32:42,299
for instance from the Scala Center

00:32:39,210 --> 00:32:45,480
working with SPT to improve the

00:32:42,299 --> 00:32:49,110
experience also I've been working with

00:32:45,480 --> 00:32:51,960
Jorge a lot recently on a little thing

00:32:49,110 --> 00:32:55,350
we called a build server protocol more

00:32:51,960 --> 00:32:58,110
on that in a second and likewise I've

00:32:55,350 --> 00:33:01,259
also been working with SBT developers to

00:32:58,110 --> 00:33:06,509
make the SPT integration smoother and

00:33:01,259 --> 00:33:10,350
IntelliJ as it exists first sites that

00:33:06,509 --> 00:33:14,279
there's not only IntelliJ so you may

00:33:10,350 --> 00:33:16,139
have heard of metals and the language

00:33:14,279 --> 00:33:17,490
server protocol who knows about the

00:33:16,139 --> 00:33:21,000
language server protocol

00:33:17,490 --> 00:33:23,879
oh yeah that's plenty but not everyone

00:33:21,000 --> 00:33:26,850
so it's a kind of a tooling protocol

00:33:23,879 --> 00:33:29,909
developed by Microsoft for Visual Studio

00:33:26,850 --> 00:33:32,519
code initially but it's now supported by

00:33:29,909 --> 00:33:35,669
many more editors and many language

00:33:32,519 --> 00:33:38,250
servers those tools that compile stuff

00:33:35,669 --> 00:33:40,919
for you and give error messages for

00:33:38,250 --> 00:33:44,000
instance and communicate them to an

00:33:40,919 --> 00:33:47,309
editor so this solves the problem of

00:33:44,000 --> 00:33:50,399
every single editor needing support for

00:33:47,309 --> 00:33:52,940
every single language which in practice

00:33:50,399 --> 00:33:52,940
doesn't often happen

00:33:55,500 --> 00:34:00,480
some metals is currently more prototype

00:33:58,620 --> 00:34:07,590
implementation of such a language server

00:34:00,480 --> 00:34:11,700
for Scala likewise

00:34:07,590 --> 00:34:13,230
dottie or Scala 3 in the future comes

00:34:11,700 --> 00:34:16,980
already built in with such a language

00:34:13,230 --> 00:34:22,890
server so currently the standard editor

00:34:16,980 --> 00:34:25,670
for dotty is vs code but we're looking

00:34:22,890 --> 00:34:29,430
at how to support dotty as well

00:34:25,670 --> 00:34:32,100
hopefully more fluently with by

00:34:29,430 --> 00:34:36,240
integrating with a Scala compiler server

00:34:32,100 --> 00:34:38,370
in IntelliJ but at the moment you

00:34:36,240 --> 00:34:43,920
already get basic idea features for

00:34:38,370 --> 00:34:46,950
dotty via LSP in years code so the build

00:34:43,920 --> 00:34:48,920
server protocol I mentioned so you have

00:34:46,950 --> 00:34:52,470
heard of the language server protocol

00:34:48,920 --> 00:34:54,300
which communicates between language

00:34:52,470 --> 00:34:57,210
server and editor the build server

00:34:54,300 --> 00:35:01,770
protocol sort of extends this notion to

00:34:57,210 --> 00:35:09,780
build servers so basically build tools

00:35:01,770 --> 00:35:11,880
such as SBT currently it's only

00:35:09,780 --> 00:35:16,950
supported by a loop on the server-side

00:35:11,880 --> 00:35:18,840
and IntelliJ on the client side so in

00:35:16,950 --> 00:35:22,440
the most recent nightly you can try this

00:35:18,840 --> 00:35:30,420
out I'll give you a quick demo how it

00:35:22,440 --> 00:35:34,230
looks so I'm gonna open my IntelliJ here

00:35:30,420 --> 00:35:38,400
and import project so it's very similar

00:35:34,230 --> 00:35:47,130
to how it works with SBT it's my

00:35:38,400 --> 00:35:50,359
intelligence where is it here so only

00:35:47,130 --> 00:35:53,309
you have an additional option called BSP

00:35:50,359 --> 00:35:57,599
and just do the import here okay

00:35:53,309 --> 00:36:02,220
yes I'm importing the IntelliJ Scala

00:35:57,599 --> 00:36:04,400
plugin project itself and the the window

00:36:02,220 --> 00:36:08,250
jumped over to my other screen

00:36:04,400 --> 00:36:10,529
oops and you see it fairly quickly

00:36:08,250 --> 00:36:14,099
imported this it's a bit of a cheat

00:36:10,529 --> 00:36:17,579
because I already exported the project

00:36:14,099 --> 00:36:20,309
model to bloop beforehand but this will

00:36:17,579 --> 00:36:22,200
already enables you to work with

00:36:20,309 --> 00:36:26,069
projects together with bloop have

00:36:22,200 --> 00:36:28,349
compiler projects with bloop it also

00:36:26,069 --> 00:36:31,200
works for projects that are not SBT

00:36:28,349 --> 00:36:35,069
based but only bloop which for instance

00:36:31,200 --> 00:36:38,369
kaleidoscope we just recorded it to Mme

00:36:35,069 --> 00:36:41,910
11 kaleidoscope doesn't use SPT or any

00:36:38,369 --> 00:36:45,059
build tool besides bloop and you can

00:36:41,910 --> 00:36:48,900
actually edit it in IntelliJ with all

00:36:45,059 --> 00:36:51,259
the regular niceties you have you see I

00:36:48,900 --> 00:36:51,259
can

00:36:54,359 --> 00:37:01,859
open files no I don't know navigate

00:36:57,839 --> 00:37:05,400
somewhere everything seems to basically

00:37:01,859 --> 00:37:10,920
work I can do a compile and I will get a

00:37:05,400 --> 00:37:17,369
nice output right here it's still taking

00:37:10,920 --> 00:37:19,920
a while because it's a fresh compile but

00:37:17,369 --> 00:37:23,069
it will give you a long list of all the

00:37:19,920 --> 00:37:33,979
warnings and errors in a nice tree right

00:37:23,069 --> 00:37:33,979
here okay continuing the talk

00:37:35,070 --> 00:37:40,020
so those are just some examples of

00:37:37,500 --> 00:37:43,320
IntelliJ integrations we have anymore as

00:37:40,020 --> 00:37:45,200
you may know we just recently added

00:37:43,320 --> 00:37:47,580
support for Emma Knight scripting

00:37:45,200 --> 00:37:49,980
there's in the ultimate version you'll

00:37:47,580 --> 00:37:54,420
find set for support for place college

00:37:49,980 --> 00:37:56,310
is akka maybe soon SPARC and they

00:37:54,420 --> 00:38:00,360
experimental built to build server

00:37:56,310 --> 00:38:02,910
protocol on my Twitter you'll find a

00:38:00,360 --> 00:38:05,180
link to a document describing how to

00:38:02,910 --> 00:38:07,860
enable it because it's hidden by default

00:38:05,180 --> 00:38:13,890
because it's still experimental and has

00:38:07,860 --> 00:38:16,500
too many rough edges so concluding this

00:38:13,890 --> 00:38:21,240
is this is the point where I am supposed

00:38:16,500 --> 00:38:25,050
to inspire you to get involved in others

00:38:21,240 --> 00:38:27,360
synthesis in working together to improve

00:38:25,050 --> 00:38:29,870
the state of our tooling but you know

00:38:27,360 --> 00:38:32,630
maybe you have a job and a life and

00:38:29,870 --> 00:38:35,250
aren't getting paid for tooling but

00:38:32,630 --> 00:38:38,400
perhaps you should consider how much

00:38:35,250 --> 00:38:44,340
time you spend working around tooling

00:38:38,400 --> 00:38:47,280
and if your team or company can support

00:38:44,340 --> 00:38:50,970
this somehow making the tooling overall

00:38:47,280 --> 00:38:52,710
more more fluently and on a company

00:38:50,970 --> 00:38:55,680
level you can for instance support this

00:38:52,710 --> 00:38:59,310
by becoming a sponsor for the Scala

00:38:55,680 --> 00:39:02,100
Center which works on things that

00:38:59,310 --> 00:39:06,000
benefit the whole scala community or you

00:39:02,100 --> 00:39:13,500
can buy IntelliJ licenses and keep me

00:39:06,000 --> 00:39:15,930
paid so yeah get in touch if you didn't

00:39:13,500 --> 00:39:18,930
know that IntelliJ Scala plug-in is open

00:39:15,930 --> 00:39:21,330
source Apache License the community all

00:39:18,930 --> 00:39:24,810
of the community version and if you

00:39:21,330 --> 00:39:26,670
think you need to fix something just get

00:39:24,810 --> 00:39:30,600
in touch and we'll try to figure it out

00:39:26,670 --> 00:39:32,820
how to do that and how to help you fix

00:39:30,600 --> 00:39:36,810
something on your own if we don't get

00:39:32,820 --> 00:39:39,350
around to it so here this is the Q&A

00:39:36,810 --> 00:39:43,150
pool you can jump right in

00:39:39,350 --> 00:39:43,150
and any comments yeah

00:39:43,700 --> 00:39:47,240
yeah I'll put up my slides and they'll

00:39:45,230 --> 00:39:50,360
also be published by Scala

00:39:47,240 --> 00:39:52,640
days my life and I think yeah sure yes

00:39:50,360 --> 00:39:54,760
so the question was is there a tool for

00:39:52,640 --> 00:39:57,620
internally caching dependencies and

00:39:54,760 --> 00:40:00,380
company because it that's one of the

00:39:57,620 --> 00:40:02,240
major things that take a long time yeah

00:40:00,380 --> 00:40:09,610
there you can install a local

00:40:02,240 --> 00:40:09,610
artifactory or nexus that will cache all

00:40:09,910 --> 00:40:15,350
remote dependencies that helps a lot if

00:40:13,820 --> 00:40:17,690
you don't have a good internet

00:40:15,350 --> 00:40:20,060
connection to wherever they're hosted

00:40:17,690 --> 00:40:22,790
and you can also publish your own

00:40:20,060 --> 00:40:24,380
internal dependencies there as well some

00:40:22,790 --> 00:40:27,500
developers are more productive by using

00:40:24,380 --> 00:40:29,360
them that's perfectly possible if you

00:40:27,500 --> 00:40:32,810
miss wimpy bindings there is a plug-in

00:40:29,360 --> 00:40:36,350
for that but if you miss them as such

00:40:32,810 --> 00:40:41,710
sure then use them not every tool is for

00:40:36,350 --> 00:40:46,480
everyone any other comment you had okay

00:40:41,710 --> 00:40:46,480
yeah anyone else

00:40:47,099 --> 00:40:51,380
we're done okay then thank you I'll be

00:40:50,699 --> 00:40:55,550
around

00:40:51,380 --> 00:40:55,550

YouTube URL: https://www.youtube.com/watch?v=2Cdjb-uG8Ro


