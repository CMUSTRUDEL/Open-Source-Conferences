Title: Teaching Scala  - A Roundtable Discussion
Publication date: 2018-09-22
Playlist: Scala Days New York 2018
Description: 
	This video was recorded at Scala Days New York 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://na.scaladays.org/schedule/teaching-scala-a-roundtable-discussion
Captions: 
	00:00:03,650 --> 00:00:08,820
welcome everyone to the education panel

00:00:06,569 --> 00:00:11,520
where we will be talking about different

00:00:08,820 --> 00:00:15,780
methods for teaching and learning Scala

00:00:11,520 --> 00:00:19,320
from a panel of a steamed experts on the

00:00:15,780 --> 00:00:21,860
subject I am your humble moderator my

00:00:19,320 --> 00:00:24,930
name is Kelly and I'm going to be asking

00:00:21,860 --> 00:00:26,279
the the questions to start this panel

00:00:24,930 --> 00:00:28,529
off but what's gonna happen we'll

00:00:26,279 --> 00:00:29,880
introduce ourselves I have some

00:00:28,529 --> 00:00:31,920
pre-planned questions that we've come up

00:00:29,880 --> 00:00:33,239
with and then we are going to say some

00:00:31,920 --> 00:00:35,430
time for audience questions at the end

00:00:33,239 --> 00:00:37,229
so as we're talking about different

00:00:35,430 --> 00:00:40,140
topics if anything inspires here if you

00:00:37,229 --> 00:00:41,999
came with a question in mind please save

00:00:40,140 --> 00:00:44,399
that for the end and we will have time

00:00:41,999 --> 00:00:47,550
for questions so once again my name is

00:00:44,399 --> 00:00:49,979
Kelly my experience with Scala education

00:00:47,550 --> 00:00:51,179
comes a lot from the organization that

00:00:49,979 --> 00:00:55,530
I've been involved with which is Scala

00:00:51,179 --> 00:00:56,909
bridge where we teach Scala to women and

00:00:55,530 --> 00:00:59,039
underrepresented groups especially

00:00:56,909 --> 00:01:00,359
people that might know an existing

00:00:59,039 --> 00:01:02,129
programming language but don't know

00:01:00,359 --> 00:01:03,600
Scala yet and so that's been an

00:01:02,129 --> 00:01:06,180
interesting experience I have teaching

00:01:03,600 --> 00:01:10,040
Scala to some newcomers and I'll pass on

00:01:06,180 --> 00:01:12,600
the mic for introductions down the line

00:01:10,040 --> 00:01:14,400
my name is Heather Miller I'm the

00:01:12,600 --> 00:01:17,220
executive director of the Scala Center

00:01:14,400 --> 00:01:19,260
and I've taught Scala or not scholar

00:01:17,220 --> 00:01:22,500
classes but I've taught classes that

00:01:19,260 --> 00:01:25,080
happened to be in Scala both at EPFL and

00:01:22,500 --> 00:01:27,330
at Northeastern University in Boston and

00:01:25,080 --> 00:01:29,580
I've also run a few Scala bridges so

00:01:27,330 --> 00:01:32,990
I've taught mostly students in

00:01:29,580 --> 00:01:35,970
university or women and underrepresented

00:01:32,990 --> 00:01:40,170
groups as a part of the the Scala bridge

00:01:35,970 --> 00:01:44,730
program I'm max investi and I thought

00:01:40,170 --> 00:01:47,400
Scala before it was a thing literally we

00:01:44,730 --> 00:01:50,159
basically we were like three weeks into

00:01:47,400 --> 00:01:52,650
its got a compiler when we started

00:01:50,159 --> 00:01:54,690
courses with it and every week I tried

00:01:52,650 --> 00:01:56,550
to essentially just do the bare minimum

00:01:54,690 --> 00:01:58,770
of essentially the functionality I was

00:01:56,550 --> 00:02:00,810
teaching next week it was a crazy race

00:01:58,770 --> 00:02:02,550
it was like 24 hour days and so there

00:02:00,810 --> 00:02:04,950
was the days that was the beginning at

00:02:02,550 --> 00:02:07,340
2003 now we've come quite a long way

00:02:04,950 --> 00:02:07,340
from that

00:02:07,620 --> 00:02:12,060
I'm Marc Lewis I am a professor at

00:02:10,289 --> 00:02:14,969
Trinity University and I've been

00:02:12,060 --> 00:02:16,860
teaching intro courses we do our CS and

00:02:14,969 --> 00:02:19,950
CS 1 and CS to use

00:02:16,860 --> 00:02:22,830
Scala we've been doing that since 2010

00:02:19,950 --> 00:02:28,650
and then it bleeds into the higher level

00:02:22,830 --> 00:02:30,900
classes like web apps and big data I'm

00:02:28,650 --> 00:02:33,240
Ryan Tanner I'm a software engineer at

00:02:30,900 --> 00:02:36,570
Twitter where I also teach two courses

00:02:33,240 --> 00:02:38,850
on the Scala collections library hi I'm

00:02:36,570 --> 00:02:40,710
Nev early I work at Spotify

00:02:38,850 --> 00:02:43,980
working on data and machine and infra

00:02:40,710 --> 00:02:46,470
and we switched from Python to Scala

00:02:43,980 --> 00:02:49,230
about five years ago and use it using

00:02:46,470 --> 00:02:51,709
him mainly for data pipelines and I've

00:02:49,230 --> 00:02:55,620
bought a lot of engineers we grow from

00:02:51,709 --> 00:02:57,480
about 20 engineers 22 years ago to like

00:02:55,620 --> 00:03:00,840
more than 300 people writing scholar

00:02:57,480 --> 00:03:03,270
data pipelines on a full-time basis hi

00:03:00,840 --> 00:03:06,440
my name is Pasha gurupada I work at wire

00:03:03,270 --> 00:03:09,510
in Berlin I started to learn Scala in

00:03:06,440 --> 00:03:12,630
2013 and for some time I was a part-time

00:03:09,510 --> 00:03:15,450
scallop and Java developer and I

00:03:12,630 --> 00:03:18,209
evangelized mascara in my old company I

00:03:15,450 --> 00:03:22,170
moved to Berlin a year on a bit ago and

00:03:18,209 --> 00:03:24,060
I'm now I'm full-time excellent so that

00:03:22,170 --> 00:03:26,190
gives you a bit of background on the the

00:03:24,060 --> 00:03:28,290
people up here the first question is for

00:03:26,190 --> 00:03:31,650
Heather and Neville how do you help

00:03:28,290 --> 00:03:33,450
newcomers understand Scala isms whether

00:03:31,650 --> 00:03:37,680
those folks are new to programming or

00:03:33,450 --> 00:03:39,989
just new to Scala so the way I

00:03:37,680 --> 00:03:43,470
personally like to do it and I think I

00:03:39,989 --> 00:03:44,820
mean perhaps this comes from you know me

00:03:43,470 --> 00:03:48,510
wishing that it was done this way to me

00:03:44,820 --> 00:03:50,970
is first to provide examples to people

00:03:48,510 --> 00:03:52,350
and then to you know make sure that

00:03:50,970 --> 00:03:53,989
someone understands that example and

00:03:52,350 --> 00:03:57,989
then say oh by the way that's called

00:03:53,989 --> 00:04:00,420
this ism you just learned it but I

00:03:57,989 --> 00:04:03,690
didn't scare you with the name first so

00:04:00,420 --> 00:04:05,040
I like to do it that way and for me most

00:04:03,690 --> 00:04:07,170
of the people I work with are like data

00:04:05,040 --> 00:04:09,690
scientists data engineers who used to

00:04:07,170 --> 00:04:11,459
Python or our programming and Scala is a

00:04:09,690 --> 00:04:13,709
really big language and there's a lot of

00:04:11,459 --> 00:04:16,140
parts that's like not really required to

00:04:13,709 --> 00:04:18,750
be able to do like business or business

00:04:16,140 --> 00:04:20,519
problems and Scala is also really great

00:04:18,750 --> 00:04:22,919
for like building DSL so that's very

00:04:20,519 --> 00:04:25,590
concise very easy to understand and

00:04:22,919 --> 00:04:27,419
intuitive like spark or scouting in

00:04:25,590 --> 00:04:30,090
those cases and we just teach the core

00:04:27,419 --> 00:04:32,580
fundamental IP functional programming

00:04:30,090 --> 00:04:34,620
like you know collections combinators

00:04:32,580 --> 00:04:38,520
and how they relate to data processing

00:04:34,620 --> 00:04:42,240
and that's our approach awesome

00:04:38,520 --> 00:04:44,370
Ryan at Twitter has a very extensive

00:04:42,240 --> 00:04:45,870
internal training program for Scala that

00:04:44,370 --> 00:04:48,870
might be unique to a lot of companies

00:04:45,870 --> 00:04:50,550
can you share what works about that and

00:04:48,870 --> 00:04:53,780
how other companies could benefit from

00:04:50,550 --> 00:04:56,370
what Twitter has built sure so I think

00:04:53,780 --> 00:04:58,860
one aspect that sets of the part is that

00:04:56,370 --> 00:05:00,960
we make the cost of onboarding and

00:04:58,860 --> 00:05:02,669
training people in Scala explicit

00:05:00,960 --> 00:05:05,190
instead of implicit we don't try to hide

00:05:02,669 --> 00:05:06,990
it and what I mean by that is we have

00:05:05,190 --> 00:05:09,990
millions upon millions of lines of Scala

00:05:06,990 --> 00:05:11,880
we have a huge engineering force and we

00:05:09,990 --> 00:05:13,229
hire quite rapidly and we don't expect

00:05:11,880 --> 00:05:14,340
people to come in with Scala knowledge

00:05:13,229 --> 00:05:17,370
we have to ramp them up on that

00:05:14,340 --> 00:05:20,370
ourselves and so we have made that

00:05:17,370 --> 00:05:21,870
investment explicit we have an internal

00:05:20,370 --> 00:05:25,410
training program staffed by full-time

00:05:21,870 --> 00:05:26,970
instructors we also recruit engineers to

00:05:25,410 --> 00:05:28,770
teach their own courses so on

00:05:26,970 --> 00:05:31,710
benchmarking on futures I teach courses

00:05:28,770 --> 00:05:33,540
on the collections library we're also in

00:05:31,710 --> 00:05:35,370
my department out in Colorado we're

00:05:33,540 --> 00:05:38,370
experimenting with a new onboarding

00:05:35,370 --> 00:05:40,380
program it's 30 hours of training

00:05:38,370 --> 00:05:43,200
courses on Scala and the Twitter stack

00:05:40,380 --> 00:05:45,390
spread over a new hires first quarter so

00:05:43,200 --> 00:05:47,160
we're hoping that that gets people to

00:05:45,390 --> 00:05:48,660
what Kate Huddleston is called reliable

00:05:47,160 --> 00:05:52,050
independence faster it's an ongoing

00:05:48,660 --> 00:05:53,520
experiment excellent and is there

00:05:52,050 --> 00:05:55,979
anything that other companies could

00:05:53,520 --> 00:05:57,210
start to adapt based on what Twitter has

00:05:55,979 --> 00:05:59,300
done what do you think would be a good

00:05:57,210 --> 00:06:01,800
first step for others in industry I

00:05:59,300 --> 00:06:03,330
think the first step is getting buy-in

00:06:01,800 --> 00:06:06,060
from the rest of your engineering

00:06:03,330 --> 00:06:10,139
organization that teaching is part of

00:06:06,060 --> 00:06:11,970
their job description awesome moving

00:06:10,139 --> 00:06:13,680
over to the academic side of things this

00:06:11,970 --> 00:06:16,380
question is for Heather Martin and mark

00:06:13,680 --> 00:06:18,930
you all use Scala in an academic setting

00:06:16,380 --> 00:06:20,160
you all have been professors can you

00:06:18,930 --> 00:06:22,380
talk about what it's like to teach

00:06:20,160 --> 00:06:23,700
students with Scala especially the

00:06:22,380 --> 00:06:25,110
difference from students that might

00:06:23,700 --> 00:06:27,240
already know an existing programming

00:06:25,110 --> 00:06:28,620
language to some mark you mentioned that

00:06:27,240 --> 00:06:31,530
you're teaching the very 101 classes

00:06:28,620 --> 00:06:33,450
using Scala and how that might different

00:06:31,530 --> 00:06:35,340
from your experience teaching and other

00:06:33,450 --> 00:06:39,320
programming languages or languages that

00:06:35,340 --> 00:06:43,680
are more commonly seen in universities

00:06:39,320 --> 00:06:48,300
okay well because we start off and see

00:06:43,680 --> 00:06:50,250
one with with Scala I get to shape a lot

00:06:48,300 --> 00:06:51,630
of the conversation that way and in many

00:06:50,250 --> 00:06:54,419
ways what I like about skull and the

00:06:51,630 --> 00:06:55,889
reason why we use it is because we use

00:06:54,419 --> 00:06:57,509
it across two semesters there really

00:06:55,889 --> 00:07:01,139
aren't that many programming languages

00:06:57,509 --> 00:07:03,120
that work well for both a the CS one

00:07:01,139 --> 00:07:04,169
which scripting languages work really

00:07:03,120 --> 00:07:06,509
well for that

00:07:04,169 --> 00:07:08,370
and also work for large applications we

00:07:06,509 --> 00:07:12,630
do a more of an object oriented approach

00:07:08,370 --> 00:07:15,360
in our CS too and and because Scala has

00:07:12,630 --> 00:07:17,400
a scripting environment I can basically

00:07:15,360 --> 00:07:19,590
my CS one is almost like statically

00:07:17,400 --> 00:07:22,470
typed Python and in some ways that

00:07:19,590 --> 00:07:25,770
that's how I approach it with as much

00:07:22,470 --> 00:07:28,410
functional as I can throw in on it but

00:07:25,770 --> 00:07:30,600
it grows very naturally into our second

00:07:28,410 --> 00:07:33,270
semester class where we are breaking

00:07:30,600 --> 00:07:35,400
things up we're doing more of an

00:07:33,270 --> 00:07:36,570
object-oriented approach for for larger

00:07:35,400 --> 00:07:41,280
projects and telling them how to

00:07:36,570 --> 00:07:44,039
structure code not just build logic so

00:07:41,280 --> 00:07:46,789
at EPFL we start with scatter and second

00:07:44,039 --> 00:07:51,000
year after currently first year Java

00:07:46,789 --> 00:07:53,610
that's actually the MOOC the principles

00:07:51,000 --> 00:07:56,400
of functional programming that by now we

00:07:53,610 --> 00:07:58,919
also run as a MOOC for for the students

00:07:56,400 --> 00:08:01,020
so I interact with the students only in

00:07:58,919 --> 00:08:03,330
the so called recitation sessions when

00:08:01,020 --> 00:08:05,669
essentially they solve problems on a

00:08:03,330 --> 00:08:07,949
whiteboard so what we do is so they know

00:08:05,669 --> 00:08:09,949
Java and then essentially we sort of

00:08:07,949 --> 00:08:13,830
throw them at the deep end of the pool

00:08:09,949 --> 00:08:16,320
doing pure functional programming and if

00:08:13,830 --> 00:08:17,520
you have to follow the course principles

00:08:16,320 --> 00:08:18,120
of functional programming then it's

00:08:17,520 --> 00:08:21,300
basically

00:08:18,120 --> 00:08:24,479
Abelson sessemann that that book and so

00:08:21,300 --> 00:08:25,650
it's essentially fairly fairly academic

00:08:24,479 --> 00:08:30,630
which works well in an academic

00:08:25,650 --> 00:08:32,909
environment so we don't really start

00:08:30,630 --> 00:08:34,469
with combinators for let's say

00:08:32,909 --> 00:08:36,570
collections which i think would be the

00:08:34,469 --> 00:08:39,180
right approach the gentle approach to

00:08:36,570 --> 00:08:40,770
teach them but we essentially start with

00:08:39,180 --> 00:08:42,659
the bare minimum just functions

00:08:40,770 --> 00:08:44,880
producing functions and then sort of we

00:08:42,659 --> 00:08:46,920
build up from there I think it works

00:08:44,880 --> 00:08:49,020
well it's it is a shock for many

00:08:46,920 --> 00:08:52,740
students first to be sort of thrown in

00:08:49,020 --> 00:08:54,730
there the advantage is that they like

00:08:52,740 --> 00:08:57,040
the challenge and also they see their

00:08:54,730 --> 00:08:58,900
worth it because since you know there

00:08:57,040 --> 00:09:01,150
are a lot of jobs out there for Scala so

00:08:58,900 --> 00:09:02,890
it's not something that essentially they

00:09:01,150 --> 00:09:04,810
have to do just essentially to please

00:09:02,890 --> 00:09:09,220
their professor I know that it's useful

00:09:04,810 --> 00:09:13,150
for something so my experience has been

00:09:09,220 --> 00:09:14,680
to teach a course that comes after the

00:09:13,150 --> 00:09:16,660
principle of principles a functional

00:09:14,680 --> 00:09:18,430
programming course at EPFL which is a

00:09:16,660 --> 00:09:20,290
parallelism and distribution kind of

00:09:18,430 --> 00:09:23,410
course and you know I was teaching SPARC

00:09:20,290 --> 00:09:25,780
and at that time the students had

00:09:23,410 --> 00:09:28,060
already been using Scala for a while so

00:09:25,780 --> 00:09:30,760
it wasn't much for me to teach them new

00:09:28,060 --> 00:09:32,200
about Scala however maybe what's more

00:09:30,760 --> 00:09:34,390
interesting is the experience that I had

00:09:32,200 --> 00:09:37,450
both with Scala bridge and also at

00:09:34,390 --> 00:09:40,560
Northeastern University at Northeastern

00:09:37,450 --> 00:09:43,960
University I was teaching a group of

00:09:40,560 --> 00:09:45,580
mostly seniors so but they had learned

00:09:43,960 --> 00:09:47,890
racket which is a functional programming

00:09:45,580 --> 00:09:50,530
language first and for them it took one

00:09:47,890 --> 00:09:52,000
day one lecture and this is you know you

00:09:50,530 --> 00:09:53,200
know all these things I hear a

00:09:52,000 --> 00:09:54,580
higher-order functions yeah this is just

00:09:53,200 --> 00:09:56,260
what they look like in Scala and oh yeah

00:09:54,580 --> 00:09:59,620
there are some types but you know no big

00:09:56,260 --> 00:10:01,810
deal and it you know in this case it

00:09:59,620 --> 00:10:04,000
seems like you know the concepts

00:10:01,810 --> 00:10:05,260
transfer very easily if you can just get

00:10:04,000 --> 00:10:06,640
them to look at a different you know oh

00:10:05,260 --> 00:10:09,190
that's just the syntax it's a little

00:10:06,640 --> 00:10:10,930
different and it's really fast at least

00:10:09,190 --> 00:10:12,130
I've learned if somebody has a little

00:10:10,930 --> 00:10:13,480
bit of experience on the functional side

00:10:12,130 --> 00:10:14,680
of things but what I found really

00:10:13,480 --> 00:10:17,440
exciting about the Scala bridge

00:10:14,680 --> 00:10:21,310
experience earlier today I mentioned it

00:10:17,440 --> 00:10:25,870
in a talk this morning basically I have

00:10:21,310 --> 00:10:28,060
I have lots of different individuals at

00:10:25,870 --> 00:10:30,640
the Scala bridge and there was one

00:10:28,060 --> 00:10:33,220
occasion where I had a few teenage girls

00:10:30,640 --> 00:10:34,870
who had never programmed before and they

00:10:33,220 --> 00:10:37,240
didn't even have a laptop they just had

00:10:34,870 --> 00:10:39,240
iPads and there were a bunch of

00:10:37,240 --> 00:10:41,710
JavaScript developers and what happens

00:10:39,240 --> 00:10:43,600
was that the JavaScript developers kept

00:10:41,710 --> 00:10:46,390
on tripping and stumbling on the you

00:10:43,600 --> 00:10:48,100
know the immutability stuff and these

00:10:46,390 --> 00:10:49,390
two girls you know they kept raising

00:10:48,100 --> 00:10:51,100
their hands all these these JavaScript

00:10:49,390 --> 00:10:52,390
developers saying I can't do that I'm

00:10:51,100 --> 00:10:54,190
just trying to reassign this thing and

00:10:52,390 --> 00:10:55,630
it's not working and you know again we

00:10:54,190 --> 00:10:57,370
explained it a few times you know to

00:10:55,630 --> 00:11:00,220
help people understand one by one and

00:10:57,370 --> 00:11:02,530
then I think the girls kind of you know

00:11:00,220 --> 00:11:03,730
just that but you know they tried to

00:11:02,530 --> 00:11:07,379
answer somebody's question be like well

00:11:03,730 --> 00:11:09,359
why why is it so hard you just you know

00:11:07,379 --> 00:11:10,649
you want to transform something and you

00:11:09,359 --> 00:11:13,379
get a new thing you just use the new

00:11:10,649 --> 00:11:15,479
thing it makes total sense and they had

00:11:13,379 --> 00:11:16,859
no experience ever before so it I mean

00:11:15,479 --> 00:11:19,799
what I found which was pretty cool was

00:11:16,859 --> 00:11:21,809
that you know some of these concepts are

00:11:19,799 --> 00:11:23,279
quite straightforward to newcomers if

00:11:21,809 --> 00:11:27,599
they had never learned any other way

00:11:23,279 --> 00:11:30,299
which was a really cool takeaway awesome

00:11:27,599 --> 00:11:31,859
so this question is from Mark do you

00:11:30,299 --> 00:11:33,989
think that we should be doing more of

00:11:31,859 --> 00:11:36,839
what you're doing and the the 101 and

00:11:33,989 --> 00:11:39,779
how could if so like how could the

00:11:36,839 --> 00:11:43,319
industry influence the the use of of

00:11:39,779 --> 00:11:46,529
Scala in academia I would love to see a

00:11:43,319 --> 00:11:47,999
lot more of the CS one CS 2 taught in

00:11:46,529 --> 00:11:49,229
scull and it's not just because I've

00:11:47,999 --> 00:11:50,489
written the only textbook on that

00:11:49,229 --> 00:11:52,829
subject

00:11:50,489 --> 00:11:56,039
no I think it actually is a really good

00:11:52,829 --> 00:11:58,709
fit and I think if if you'd like to have

00:11:56,039 --> 00:12:01,169
more employees who understand Scala when

00:11:58,709 --> 00:12:03,359
they come out of college you need to

00:12:01,169 --> 00:12:05,609
tell your local colleges this ok the the

00:12:03,359 --> 00:12:08,569
reality is that many academics are at

00:12:05,609 --> 00:12:10,709
least sensitive to the fact that they

00:12:08,569 --> 00:12:13,559
they want their students to be learning

00:12:10,709 --> 00:12:15,059
valuable skills but many of them are all

00:12:13,559 --> 00:12:18,389
completely out of touch with what the

00:12:15,059 --> 00:12:20,459
valuable skills are and in that regard

00:12:18,389 --> 00:12:23,789
they would be very willing to hear from

00:12:20,459 --> 00:12:25,499
you telling them what you think would be

00:12:23,789 --> 00:12:28,739
good for for students to come out with

00:12:25,499 --> 00:12:30,119
tell them and not just Scala but I one

00:12:28,739 --> 00:12:31,379
of the big challenges that we've heard

00:12:30,119 --> 00:12:33,739
there's been quite a few talks about

00:12:31,379 --> 00:12:36,299
about training people with Scala

00:12:33,739 --> 00:12:37,649
the tripping point is the functional

00:12:36,299 --> 00:12:39,329
aspect the tripping point is the

00:12:37,649 --> 00:12:41,279
immutability because people have been

00:12:39,329 --> 00:12:43,379
trained to think in one way and then

00:12:41,279 --> 00:12:45,299
they have to be retrained to think in

00:12:43,379 --> 00:12:47,639
another and getting people to unlearn

00:12:45,299 --> 00:12:50,159
stuff is often harder than learning it

00:12:47,639 --> 00:12:52,499
in the first place you should go tell

00:12:50,159 --> 00:12:54,809
your local universities hey we use Scala

00:12:52,499 --> 00:12:56,279
we use functional programming I'd love

00:12:54,809 --> 00:12:57,539
it if some of your students came out

00:12:56,279 --> 00:12:59,639
with that knowledge I think that would

00:12:57,539 --> 00:13:01,439
have a big effect as far as growing the

00:12:59,639 --> 00:13:03,269
community and giving you better

00:13:01,439 --> 00:13:06,539
employees that you don't have to spend

00:13:03,269 --> 00:13:08,159
as much time training up excellent

00:13:06,539 --> 00:13:09,419
moving back over to the the industry

00:13:08,159 --> 00:13:11,159
side of things

00:13:09,419 --> 00:13:13,729
Machoke you did some research on how

00:13:11,159 --> 00:13:15,839
people bridge the gap in resources from

00:13:13,729 --> 00:13:17,909
complete beginners to some of the

00:13:15,839 --> 00:13:20,009
resources for experts what are your

00:13:17,909 --> 00:13:21,150
recommendations based on that that we

00:13:20,009 --> 00:13:24,390
can use to help bridge that

00:13:21,150 --> 00:13:26,670
intermediate gap yeah so in preparation

00:13:24,390 --> 00:13:29,040
for the stock we made a small survey

00:13:26,670 --> 00:13:30,720
asking questions about what motivates

00:13:29,040 --> 00:13:34,740
people to learn new programming

00:13:30,720 --> 00:13:37,560
languages and in one of the answers of

00:13:34,740 --> 00:13:40,980
the most popular one was that when

00:13:37,560 --> 00:13:44,280
people become more confident enough they

00:13:40,980 --> 00:13:46,740
start to write their own small projects

00:13:44,280 --> 00:13:49,260
as part of learning but the problem is

00:13:46,740 --> 00:13:51,270
that we have on one side a lot of

00:13:49,260 --> 00:13:53,670
materials about how to learn simple

00:13:51,270 --> 00:13:56,460
competent and then on the other side we

00:13:53,670 --> 00:13:58,320
have this very concrete answers to very

00:13:56,460 --> 00:14:00,960
concrete questions on Stack Overflow and

00:13:58,320 --> 00:14:04,860
there's like a shortage of materials in

00:14:00,960 --> 00:14:08,580
between so actually that's a question to

00:14:04,860 --> 00:14:12,270
all of you writing open-source projects

00:14:08,580 --> 00:14:14,280
but also not open-source if you reach a

00:14:12,270 --> 00:14:17,730
milestone in your project and please

00:14:14,280 --> 00:14:20,700
stop for a moment like think about what

00:14:17,730 --> 00:14:22,710
was important what you've done how

00:14:20,700 --> 00:14:25,560
you've done what you've done and write

00:14:22,710 --> 00:14:28,530
some articles about it write some at

00:14:25,560 --> 00:14:31,230
least part of documentation in simple

00:14:28,530 --> 00:14:33,660
words that someone can access it and if

00:14:31,230 --> 00:14:35,640
they decide to write something similar

00:14:33,660 --> 00:14:38,040
then they can simply follow these steps

00:14:35,640 --> 00:14:40,860
so for example what the build tools you

00:14:38,040 --> 00:14:43,530
used and why and what were the problems

00:14:40,860 --> 00:14:46,560
how you connected them together or

00:14:43,530 --> 00:14:48,630
whatever the library is and so on so

00:14:46,560 --> 00:14:52,470
apart from the fact that you help people

00:14:48,630 --> 00:14:55,620
you can also like think some important

00:14:52,470 --> 00:14:58,460
points in your code and also because

00:14:55,620 --> 00:15:01,590
most of those small projects are

00:14:58,460 --> 00:15:05,160
becoming abandoned at some point then

00:15:01,590 --> 00:15:07,770
maybe you can simply like recruit the

00:15:05,160 --> 00:15:10,020
out of them to work for you so a part of

00:15:07,770 --> 00:15:12,980
that energy that is going to be wasted

00:15:10,020 --> 00:15:14,100
will go to your products instead

00:15:12,980 --> 00:15:16,740
excellent

00:15:14,100 --> 00:15:18,930
so Martinus questions mostly for you but

00:15:16,740 --> 00:15:21,180
it really applies to everyone here how

00:15:18,930 --> 00:15:22,890
do you keep material accessible to

00:15:21,180 --> 00:15:25,800
newcomers when you're so far removed

00:15:22,890 --> 00:15:27,930
from being new to the language well that

00:15:25,800 --> 00:15:30,390
that's easy I'm reminded every year

00:15:27,930 --> 00:15:32,310
afresh with essentially the freshmen who

00:15:30,390 --> 00:15:34,600
come in and if I'm too advanced and I

00:15:32,310 --> 00:15:38,110
just see a lot of faces which don't

00:15:34,600 --> 00:15:40,329
than anything so unlike an engineer

00:15:38,110 --> 00:15:41,920
where you naturally progress with your

00:15:40,329 --> 00:15:44,800
team from essentially beginner to expert

00:15:41,920 --> 00:15:46,269
status as a teacher you fall back every

00:15:44,800 --> 00:15:47,920
year and with a new generation of

00:15:46,269 --> 00:15:50,920
students so that keeps you well grounded

00:15:47,920 --> 00:15:52,509
generally excellent so maybe Ryan or

00:15:50,920 --> 00:15:54,970
Neville that you might have a comment on

00:15:52,509 --> 00:15:57,069
this how do you how do you bridge that

00:15:54,970 --> 00:15:59,040
gap with people when you've been

00:15:57,069 --> 00:16:02,110
programming in Scala for so long

00:15:59,040 --> 00:16:04,269
sure so when I picked up the beginner

00:16:02,110 --> 00:16:06,970
Scala collections course at Twitter it

00:16:04,269 --> 00:16:09,040
was one course at the time I then split

00:16:06,970 --> 00:16:11,829
it into beginners in advanced and three

00:16:09,040 --> 00:16:13,839
slides in at Dovan two variants so I

00:16:11,829 --> 00:16:15,759
have now rewritten that my first

00:16:13,839 --> 00:16:18,040
exercise is literally check if a

00:16:15,759 --> 00:16:20,019
collection is empty because the bulk of

00:16:18,040 --> 00:16:21,970
my audience is people fresh out of

00:16:20,019 --> 00:16:25,240
college who are only used to Python or

00:16:21,970 --> 00:16:26,980
Java who have never been in a functional

00:16:25,240 --> 00:16:29,800
environment or an environment that

00:16:26,980 --> 00:16:31,990
enforces immutability and so every time

00:16:29,800 --> 00:16:34,750
I teach this course I make the exercises

00:16:31,990 --> 00:16:36,699
simpler and simpler and simpler to the

00:16:34,750 --> 00:16:38,290
point where I'm up there trying to play

00:16:36,699 --> 00:16:41,170
charades trying to explain what a flat

00:16:38,290 --> 00:16:42,839
map is and and I've been working in

00:16:41,170 --> 00:16:45,040
Scala for eight or nine years now and

00:16:42,839 --> 00:16:47,470
teaching beginners on a regular cadence

00:16:45,040 --> 00:16:49,750
has really helped me explain to myself

00:16:47,470 --> 00:16:52,860
these concepts that I know too well to

00:16:49,750 --> 00:16:55,360
explain off the top of my head

00:16:52,860 --> 00:16:56,769
excellent there's questions for anyone

00:16:55,360 --> 00:16:59,110
who wants to take it what's your

00:16:56,769 --> 00:17:01,240
approach to introducing category theory

00:16:59,110 --> 00:17:03,550
concepts like mano aids and functors

00:17:01,240 --> 00:17:05,230
when do you introduce them and what

00:17:03,550 --> 00:17:08,079
motivates you to introduce them if at

00:17:05,230 --> 00:17:09,939
all I can't talk about that so there are

00:17:08,079 --> 00:17:11,289
lot of category theory concepts like if

00:17:09,939 --> 00:17:13,059
you go to scholar conference some of the

00:17:11,289 --> 00:17:15,100
conference's you hear seems like free

00:17:13,059 --> 00:17:16,419
monads and take this final and some of

00:17:15,100 --> 00:17:18,250
the money transformers and they're a lot

00:17:16,419 --> 00:17:20,350
of them but it really depends on the

00:17:18,250 --> 00:17:22,990
domain so in mind you may like data and

00:17:20,350 --> 00:17:25,120
ml to most actually the only two

00:17:22,990 --> 00:17:26,650
concepts that we teach and it was at the

00:17:25,120 --> 00:17:29,380
end of the data engineering training is

00:17:26,650 --> 00:17:31,030
a mano ed and semi group and we go

00:17:29,380 --> 00:17:33,580
through the step by step like you start

00:17:31,030 --> 00:17:34,059
with e memories collections filter map

00:17:33,580 --> 00:17:36,730
flatmap

00:17:34,059 --> 00:17:38,770
reduce and then we explain how these you

00:17:36,730 --> 00:17:40,809
know typical Scala combinators

00:17:38,770 --> 00:17:42,850
translates to distributed system

00:17:40,809 --> 00:17:44,320
concepts like you know MapReduce and

00:17:42,850 --> 00:17:46,960
word con and

00:17:44,320 --> 00:17:50,140
and optimization like you know to the

00:17:46,960 --> 00:17:52,060
website reduce and lifting functions and

00:17:50,140 --> 00:17:54,100
stuff and after that we you know

00:17:52,060 --> 00:17:56,800
introduced the concepts of associative

00:17:54,100 --> 00:17:59,200
and commutative operation and then it

00:17:56,800 --> 00:18:01,930
just you know fits naturally into this

00:17:59,200 --> 00:18:05,290
context where a semigroup a monoids

00:18:01,930 --> 00:18:07,780
they're just ways to do to work on so it

00:18:05,290 --> 00:18:10,570
really depends on context I mean we we

00:18:07,780 --> 00:18:12,520
want to avoid feeding developers or new

00:18:10,570 --> 00:18:14,740
beginners like concepts that doesn't

00:18:12,520 --> 00:18:22,360
really apply to their their day to day

00:18:14,740 --> 00:18:25,330
job yet so we teach in the in the first

00:18:22,360 --> 00:18:28,750
seven weeks we teach that we don't teach

00:18:25,330 --> 00:18:31,330
any monads or a categorical concepts but

00:18:28,750 --> 00:18:34,750
we do teach them for for expressions and

00:18:31,330 --> 00:18:38,440
how they map into flat maps and maps and

00:18:34,750 --> 00:18:42,400
filters and then week eight not week

00:18:38,440 --> 00:18:43,900
nine or ten or so we in the first seven

00:18:42,400 --> 00:18:46,510
weeks we also show them that map

00:18:43,900 --> 00:18:48,190
essentially anything that has a map map

00:18:46,510 --> 00:18:49,990
and flatmap can be the target of a

00:18:48,190 --> 00:18:52,870
for-expression so not just collections

00:18:49,990 --> 00:18:54,400
and then we play on that a little bit we

00:18:52,870 --> 00:18:56,860
do essentially quick checks so

00:18:54,400 --> 00:19:00,220
essentially random comp calculations and

00:18:56,860 --> 00:19:03,100
then and then we do try and then we

00:19:00,220 --> 00:19:05,200
introduce monads and we essentially

00:19:03,100 --> 00:19:06,280
prove that try is not a moaner because

00:19:05,200 --> 00:19:08,260
one of the law

00:19:06,280 --> 00:19:12,130
- if the laws are broken don'tdon't hold

00:19:08,260 --> 00:19:13,840
in this and that that's about it then

00:19:12,130 --> 00:19:15,760
the next course is reactive programming

00:19:13,840 --> 00:19:17,830
yeah that was Eric Meyer okay if that

00:19:15,760 --> 00:19:21,160
one of the fathers of monads and he

00:19:17,830 --> 00:19:23,020
started off the course with the thing

00:19:21,160 --> 00:19:27,550
that well let's talk about monads a good

00:19:23,020 --> 00:19:29,530
example of a monad is try oh my god we

00:19:27,550 --> 00:19:31,150
just do just but then Eric actually

00:19:29,530 --> 00:19:32,620
specified that when he thinks about

00:19:31,150 --> 00:19:34,390
monads see things about the type

00:19:32,620 --> 00:19:37,930
structure it doesn't care so much about

00:19:34,390 --> 00:19:40,630
the laws that's about as far as it goes

00:19:37,930 --> 00:19:43,000
in our courses I think it's important to

00:19:40,630 --> 00:19:44,830
do to be inductive in teaching so go

00:19:43,000 --> 00:19:46,540
from the concrete to the abstract and

00:19:44,830 --> 00:19:48,250
that's why I think category theory is

00:19:46,540 --> 00:19:50,169
something that essentially would

00:19:48,250 --> 00:19:52,389
probably be

00:19:50,169 --> 00:19:53,799
good in its own course or definitely a

00:19:52,389 --> 00:19:58,059
something that comes much much later

00:19:53,799 --> 00:20:02,350
than their functional introduction any

00:19:58,059 --> 00:20:04,299
other thoughts on that one all right we

00:20:02,350 --> 00:20:07,059
can move on so there's quite the

00:20:04,299 --> 00:20:10,119
spectrum of Scala styles from the Java

00:20:07,059 --> 00:20:14,379
plus plus to the Ryan gave me this the

00:20:10,119 --> 00:20:16,690
Haskell fanfiction style how do you

00:20:14,379 --> 00:20:18,879
guide your students or your team to

00:20:16,690 --> 00:20:22,509
writing and a green on a specific type

00:20:18,879 --> 00:20:24,039
of Scala I'll take that first of all I

00:20:22,509 --> 00:20:25,149
can't take credit for that I saw it on

00:20:24,039 --> 00:20:28,809
Twitter I don't know who actually came

00:20:25,149 --> 00:20:31,239
up with it but in in my part of Twitter

00:20:28,809 --> 00:20:33,669
in my organization we focus very heavily

00:20:31,239 --> 00:20:36,220
on what we call synchronous code reviews

00:20:33,669 --> 00:20:37,779
which is we do not just open pull

00:20:36,220 --> 00:20:40,059
requests and send it off for someone to

00:20:37,779 --> 00:20:42,009
look at you drag someone over to your

00:20:40,059 --> 00:20:44,499
computer and sit down and go through the

00:20:42,009 --> 00:20:46,529
diff together and that is in my opinion

00:20:44,499 --> 00:20:49,330
one of the absolute best ways to

00:20:46,529 --> 00:20:51,220
indoctrinate new hires into your style

00:20:49,330 --> 00:20:53,289
either having them review the code

00:20:51,220 --> 00:20:55,480
you're working on or you going over and

00:20:53,289 --> 00:20:58,600
reviewing it with them in person face to

00:20:55,480 --> 00:21:00,429
face that ensures that you're getting

00:20:58,600 --> 00:21:02,409
into the meat of what you're actually

00:21:00,429 --> 00:21:05,169
reviewing and that's the best place that

00:21:02,409 --> 00:21:07,119
I found to explain why they might want

00:21:05,169 --> 00:21:13,869
to do something differently or why your

00:21:07,119 --> 00:21:16,450
team has agreed on a certain style all

00:21:13,869 --> 00:21:18,039
right we can open up the questions to

00:21:16,450 --> 00:21:20,440
the audience now we have a microphone

00:21:18,039 --> 00:21:22,509
right in front of Heather so if you want

00:21:20,440 --> 00:21:27,519
to line up behind that we are

00:21:22,509 --> 00:21:29,320
fortunately not passing around a mic so

00:21:27,519 --> 00:21:30,840
the question is to all of you but

00:21:29,320 --> 00:21:33,129
specifically to you Martin

00:21:30,840 --> 00:21:35,649
yesterday you said that you don't like

00:21:33,129 --> 00:21:39,730
the fact that people look at JA at skal

00:21:35,649 --> 00:21:42,070
has a better Java or worse Haskell but

00:21:39,730 --> 00:21:45,940
what I lack when I teach newcomers

00:21:42,070 --> 00:21:49,450
developers in my team is like Scala the

00:21:45,940 --> 00:21:51,460
right way because for instance if you

00:21:49,450 --> 00:21:52,690
want to combine effects which is

00:21:51,460 --> 00:21:55,840
something that happened in the real

00:21:52,690 --> 00:21:58,570
world you can use the FF now you can use

00:21:55,840 --> 00:22:00,580
Mona transformers but right now in the

00:21:58,570 --> 00:22:02,859
current version of Scala there isn't

00:22:00,580 --> 00:22:03,940
like I would say a simple way to do that

00:22:02,859 --> 00:22:05,620
so it's over

00:22:03,940 --> 00:22:08,710
getting complicated even when you were

00:22:05,620 --> 00:22:10,750
trying to show the easy stuff so like

00:22:08,710 --> 00:22:13,210
what I'm asking is either something like

00:22:10,750 --> 00:22:15,669
Scala the right way because I use

00:22:13,210 --> 00:22:17,980
sometimes tag was final when it's make

00:22:15,669 --> 00:22:20,409
sense sometimes like in lesson in a less

00:22:17,980 --> 00:22:25,029
pure way we combine things but there's

00:22:20,409 --> 00:22:26,860
no like one good way that we working on

00:22:25,029 --> 00:22:28,200
it that I'm really glad that that you

00:22:26,860 --> 00:22:32,259
raised that question

00:22:28,200 --> 00:22:35,320
so when Scala was invented it was very

00:22:32,259 --> 00:22:37,179
much also thought as an answer for

00:22:35,320 --> 00:22:39,340
essentially to bridge the gap between

00:22:37,179 --> 00:22:42,070
static and dynamic languages so it was

00:22:39,340 --> 00:22:43,600
designed to appeal to Python programmers

00:22:42,070 --> 00:22:45,970
Ruby programmers and I think it was

00:22:43,600 --> 00:22:48,730
fairly successful in that way so that

00:22:45,970 --> 00:22:52,600
way that means that we at the time we

00:22:48,730 --> 00:22:54,549
didn't really consider extry expressing

00:22:52,600 --> 00:22:56,710
a lot of properties in the types so I

00:22:54,549 --> 00:22:58,720
think initially the answer in Scala was

00:22:56,710 --> 00:23:00,970
well we don't talk about effects effects

00:22:58,720 --> 00:23:03,009
are implicit in the code essentially

00:23:00,970 --> 00:23:04,990
they're there or not they're by

00:23:03,009 --> 00:23:06,700
convention now people have essentially

00:23:04,990 --> 00:23:09,159
progressed quite a lot they found that

00:23:06,700 --> 00:23:10,570
actually they want to talk about effects

00:23:09,159 --> 00:23:12,220
and that there's a really news about

00:23:10,570 --> 00:23:15,970
effects and I think you're right the

00:23:12,220 --> 00:23:18,429
language natively doesn't really provide

00:23:15,970 --> 00:23:20,110
a lot of the right abstractions and I

00:23:18,429 --> 00:23:22,090
think right now no language really does

00:23:20,110 --> 00:23:23,710
because if you want to tell talk about

00:23:22,090 --> 00:23:25,539
effects and essentially all you have is

00:23:23,710 --> 00:23:27,759
monads and then some way to deal with

00:23:25,539 --> 00:23:30,610
them whether with transformers or free

00:23:27,759 --> 00:23:32,549
monads or things like that so the next

00:23:30,610 --> 00:23:35,679
version of scholars or SCADA 3 will have

00:23:32,549 --> 00:23:38,379
essentially a baby version of algebraic

00:23:35,679 --> 00:23:40,379
effects which are much much nicer for

00:23:38,379 --> 00:23:42,519
the composition and which essentially

00:23:40,379 --> 00:23:44,879
hopefully will solve the problems that

00:23:42,519 --> 00:23:46,870
you have I say baby versions because

00:23:44,879 --> 00:23:48,639
essentially those effects are all

00:23:46,870 --> 00:23:51,129
effects that are not essentially all

00:23:48,639 --> 00:23:54,129
effects except control effects so that

00:23:51,129 --> 00:23:56,350
means you can say I declare to do i/o to

00:23:54,129 --> 00:23:58,779
do mutation also to throw exceptions

00:23:56,350 --> 00:24:01,149
that one we don't count as a control

00:23:58,779 --> 00:24:02,950
effect and all these things can

00:24:01,149 --> 00:24:04,690
essentially be done in these baby

00:24:02,950 --> 00:24:07,539
effects and that will compose really

00:24:04,690 --> 00:24:09,940
well using implicit function types the

00:24:07,539 --> 00:24:11,950
ones that are not covered are things

00:24:09,940 --> 00:24:13,990
like future that needs a control effect

00:24:11,950 --> 00:24:15,110
but then in a lot of code bases maybe

00:24:13,990 --> 00:24:17,600
you only need one of the

00:24:15,110 --> 00:24:20,600
in the future and then you don't need to

00:24:17,600 --> 00:24:23,140
do mana transformers because as right

00:24:20,600 --> 00:24:25,399
now the situation is a single monad is

00:24:23,140 --> 00:24:26,960
fantastic we have all the support for

00:24:25,399 --> 00:24:32,630
that and once you combine more nuts

00:24:26,960 --> 00:24:33,890
things get hairy we're still open to

00:24:32,630 --> 00:24:41,659
questions from the audience if people

00:24:33,890 --> 00:24:45,940
want to join i i've taught a lot of

00:24:41,659 --> 00:24:51,470
scala professionally and in that and in

00:24:45,940 --> 00:24:54,260
in other ways i find that i run into a

00:24:51,470 --> 00:24:57,350
problem with anyone who doesn't have a

00:24:54,260 --> 00:25:02,330
haskell background when I get to hire

00:24:57,350 --> 00:25:04,820
kinda types so so after hire kind of

00:25:02,330 --> 00:25:06,409
types the other things I find are easy

00:25:04,820 --> 00:25:08,179
to teach you know you can teach a

00:25:06,409 --> 00:25:10,279
functor you can teach them Monette you

00:25:08,179 --> 00:25:12,470
can teach all these things once a

00:25:10,279 --> 00:25:14,899
student understands higher kind of type

00:25:12,470 --> 00:25:17,510
so so what have you found to be the

00:25:14,899 --> 00:25:31,159
requisite knowledge to fully understand

00:25:17,510 --> 00:25:38,690
higher tines that I think that takes

00:25:31,159 --> 00:25:41,600
some getting used to and the I think

00:25:38,690 --> 00:25:44,210
that we have definitely a lack of

00:25:41,600 --> 00:25:46,549
accessible tutorials for that there was

00:25:44,210 --> 00:25:48,889
one recently which was I think it was f

00:25:46,549 --> 00:25:50,389
brackets underscore explained or

00:25:48,889 --> 00:25:52,940
something like that that was a really

00:25:50,389 --> 00:25:56,210
good one but that's a very recent one so

00:25:52,940 --> 00:25:58,190
I think we need more sort of really into

00:25:56,210 --> 00:26:00,409
the tutorials for sort of the basics

00:25:58,190 --> 00:26:03,409
before we go to these these other

00:26:00,409 --> 00:26:06,380
concepts that's definitely true I don't

00:26:03,409 --> 00:26:08,659
really have a clear way to say well but

00:26:06,380 --> 00:26:11,059
what what we could do there how to teach

00:26:08,659 --> 00:26:14,679
it I don't really have a good answer

00:26:11,059 --> 00:26:14,679
myself except for these things

00:26:15,330 --> 00:26:21,700
any other thoughts yeah I don't actually

00:26:19,809 --> 00:26:24,070
think we ever cover that in any of our

00:26:21,700 --> 00:26:25,509
courses at Twitter even our functional

00:26:24,070 --> 00:26:28,779
programming in Scala course it's based

00:26:25,509 --> 00:26:37,119
on the on the red book I just don't I

00:26:28,779 --> 00:26:38,559
don't know what to say yeah oh I was

00:26:37,119 --> 00:26:40,809
just going to say that that's you don't

00:26:38,559 --> 00:26:44,489
teach it at EPFL either to the the

00:26:40,809 --> 00:26:46,869
undergraduates anyway so I think then

00:26:44,489 --> 00:26:48,580
actually the people on the stage I don't

00:26:46,869 --> 00:26:53,229
think have experience teaching I are

00:26:48,580 --> 00:26:56,830
kind of types of students not really no

00:26:53,229 --> 00:26:58,599
we don't we don't get that far No so I

00:26:56,830 --> 00:26:59,979
think there's a good variety of the

00:26:58,599 --> 00:27:01,450
types of things that people especially

00:26:59,979 --> 00:27:03,759
on the stage and even in the audience

00:27:01,450 --> 00:27:04,539
have deemed necessary to teach and I

00:27:03,759 --> 00:27:08,129
think that's one of the interesting

00:27:04,539 --> 00:27:10,539
things about the the language of Scala

00:27:08,129 --> 00:27:13,590
well while all of you rushed to the

00:27:10,539 --> 00:27:16,239
microphone I can ask another question

00:27:13,590 --> 00:27:18,460
are there any tutorials that you wish

00:27:16,239 --> 00:27:20,109
existed you know we kind of got on this

00:27:18,460 --> 00:27:21,999
thing there weren't a lot of tutorials

00:27:20,109 --> 00:27:23,710
for hire are kinda types what else is

00:27:21,999 --> 00:27:28,960
it's kind of missing out there what do

00:27:23,710 --> 00:27:32,289
we need more of I think an accessible

00:27:28,960 --> 00:27:34,359
not accessible but you know a type

00:27:32,289 --> 00:27:35,889
system tutorial well it doesn't have to

00:27:34,359 --> 00:27:37,149
be higher kind but I mean you know I

00:27:35,889 --> 00:27:39,879
would hope that higher kinds are in

00:27:37,149 --> 00:27:42,279
there but if I want to just understand

00:27:39,879 --> 00:27:43,929
Skylar's type system there aren't

00:27:42,279 --> 00:27:46,479
there's not like a good thing I can read

00:27:43,929 --> 00:27:47,799
I mean there are lots of different

00:27:46,479 --> 00:27:49,389
things I could read there are some

00:27:47,799 --> 00:27:50,440
examples in this book or some examples

00:27:49,389 --> 00:27:52,059
in that book and there are these blog

00:27:50,440 --> 00:27:53,820
articles but there's not one

00:27:52,059 --> 00:27:56,259
self-contained place that I can go to

00:27:53,820 --> 00:27:58,210
you know see what the things the type

00:27:56,259 --> 00:28:00,629
system are and what the examples look

00:27:58,210 --> 00:28:04,509
like and then you know why that's useful

00:28:00,629 --> 00:28:11,649
for writing programs I think that would

00:28:04,509 --> 00:28:14,879
be that's something we're missing any of

00:28:11,649 --> 00:28:14,879
their thoughts on missing tutorials

00:28:16,170 --> 00:28:22,570
when I find something missing I created

00:28:18,640 --> 00:28:26,200
so thank you and we are grateful for

00:28:22,570 --> 00:28:29,049
that yes we have another question yes so

00:28:26,200 --> 00:28:30,940
my organization's got a small group

00:28:29,049 --> 00:28:32,380
right now of pretty experts gala

00:28:30,940 --> 00:28:34,960
developers and we're looking to spin

00:28:32,380 --> 00:28:37,240
that out to a lot of our Java developers

00:28:34,960 --> 00:28:39,400
starting to you know contribute to some

00:28:37,240 --> 00:28:42,750
of these Scala systems what are what are

00:28:39,400 --> 00:28:45,220
some of the the high level kind of

00:28:42,750 --> 00:28:46,900
categories and classes you'd kind of

00:28:45,220 --> 00:28:48,309
recommend in kind of what order would

00:28:46,900 --> 00:28:50,860
you recommend we approach that into

00:28:48,309 --> 00:28:55,390
train out a ton of Java developers into

00:28:50,860 --> 00:28:57,580
more of a scallop base so we start with

00:28:55,390 --> 00:29:00,580
a course we call Scala essentials which

00:28:57,580 --> 00:29:03,700
is I want to say 12 hours long spread

00:29:00,580 --> 00:29:06,460
over a few days and it covers the syntax

00:29:03,700 --> 00:29:08,860
the basics of Scala then we move into

00:29:06,460 --> 00:29:11,500
futures and the Twitter stack so finagle

00:29:08,860 --> 00:29:13,990
and fenêtre whatever your stack is but

00:29:11,500 --> 00:29:16,210
we we start with the very basic of I

00:29:13,990 --> 00:29:18,700
think sounds similar to dr. Lewis's

00:29:16,210 --> 00:29:20,950
course use it as a scripting language

00:29:18,700 --> 00:29:21,790
open up the repple play around get them

00:29:20,950 --> 00:29:25,390
comfortable with it

00:29:21,790 --> 00:29:27,340
we move on from there towards the stack

00:29:25,390 --> 00:29:29,080
itself and that's where we can have them

00:29:27,340 --> 00:29:31,059
actually build something and deploy it

00:29:29,080 --> 00:29:32,860
off into a real production environment

00:29:31,059 --> 00:29:38,350
and they get that hands-on experience as

00:29:32,860 --> 00:29:40,770
quickly as possible what I'm interested

00:29:38,350 --> 00:29:40,770
in is

00:29:41,100 --> 00:29:48,460
teaching not Scala the other departments

00:29:46,450 --> 00:29:52,600
at the universities of Economics

00:29:48,460 --> 00:29:56,140
Department Social Sciences Aeronautics

00:29:52,600 --> 00:30:00,520
engineering how how much is being done

00:29:56,140 --> 00:30:06,040
or what is being done to bring Scala to

00:30:00,520 --> 00:30:08,380
those students okay the example that

00:30:06,040 --> 00:30:12,970
comes to my mind is our business

00:30:08,380 --> 00:30:17,160
department at Trinity they do a fair bit

00:30:12,970 --> 00:30:20,710
of data science and data analytics and I

00:30:17,160 --> 00:30:23,710
try to twist arms to to get them to move

00:30:20,710 --> 00:30:26,980
to Scala but but they're very set on on

00:30:23,710 --> 00:30:28,210
Python and and I do think so some of the

00:30:26,980 --> 00:30:31,360
reasons for that I consider to be

00:30:28,210 --> 00:30:35,380
misguided but some of the reasons are I

00:30:31,360 --> 00:30:37,090
think very very real and like one of the

00:30:35,380 --> 00:30:37,390
big ones is you want to look at your

00:30:37,090 --> 00:30:41,050
data

00:30:37,390 --> 00:30:44,260
I think the plotting is an area where

00:30:41,050 --> 00:30:46,630
right now the scala ecosystem is

00:30:44,260 --> 00:30:49,240
somewhat lacking it's it's much harder

00:30:46,630 --> 00:30:51,100
in Scala to to pull in some data and

00:30:49,240 --> 00:30:52,870
just throw it up in a quick plot to see

00:30:51,100 --> 00:30:54,820
what it looks like and so there's a

00:30:52,870 --> 00:30:57,850
certain number of tools that that we're

00:30:54,820 --> 00:31:00,730
lacking to make it harder to to branch

00:30:57,850 --> 00:31:02,380
out into people who are who are less

00:31:00,730 --> 00:31:04,059
serious about the programming and if

00:31:02,380 --> 00:31:05,200
you're talking about large scale and you

00:31:04,059 --> 00:31:07,900
want to run things that are distributed

00:31:05,200 --> 00:31:09,460
across clusters and whatnot yeah skål is

00:31:07,900 --> 00:31:11,500
there for you yeah you need a lot of

00:31:09,460 --> 00:31:14,140
threads you're going to be you know

00:31:11,500 --> 00:31:16,600
using futures and stuff do not go to

00:31:14,140 --> 00:31:18,130
Python but but if what you're doing you

00:31:16,600 --> 00:31:19,690
know as a reasonably small data set and

00:31:18,130 --> 00:31:21,309
you just want to play with it do some

00:31:19,690 --> 00:31:23,800
statistical analysis and throw up a plot

00:31:21,309 --> 00:31:25,090
right now we don't have the the

00:31:23,800 --> 00:31:30,660
libraries and that makes it a much

00:31:25,090 --> 00:31:33,880
harder sell they're just a totally

00:31:30,660 --> 00:31:37,240
unworthy but totally unrelated to that

00:31:33,880 --> 00:31:40,450
one thing I just so I recalled what when

00:31:37,240 --> 00:31:44,410
again teaching a Scala bridge I noticed

00:31:40,450 --> 00:31:46,030
that if you know we give introductions

00:31:44,410 --> 00:31:47,530
and everybody says why they want to

00:31:46,030 --> 00:31:49,480
learn Scala why where they come from

00:31:47,530 --> 00:31:50,500
what you know everybody gets to know

00:31:49,480 --> 00:31:51,430
each other at the beginning of these

00:31:50,500 --> 00:31:53,350
things

00:31:51,430 --> 00:31:55,120
and I've noticed at least half of the

00:31:53,350 --> 00:31:57,310
people that come you know they might

00:31:55,120 --> 00:31:59,890
again this is Scala bridge so it's women

00:31:57,310 --> 00:32:01,360
and other underrepresented groups they

00:31:59,890 --> 00:32:03,010
might be in business they might be in

00:32:01,360 --> 00:32:04,810
biology and they thought well you know I

00:32:03,010 --> 00:32:06,130
think programming is probably useful I

00:32:04,810 --> 00:32:07,510
mean they don't necessarily think that

00:32:06,130 --> 00:32:10,060
maybe they're going to use Scala for

00:32:07,510 --> 00:32:12,790
this but then they find out oh yeah you

00:32:10,060 --> 00:32:14,500
know I work in something related to

00:32:12,790 --> 00:32:16,060
bioinformatics and know that spark is

00:32:14,500 --> 00:32:20,290
written in Scala okay then they maybe

00:32:16,060 --> 00:32:22,300
stick with it but I found just in the

00:32:20,290 --> 00:32:23,410
context of Scala bridge by saying hey

00:32:22,300 --> 00:32:24,730
you don't have to have really any

00:32:23,410 --> 00:32:27,310
programming experience we just want to

00:32:24,730 --> 00:32:28,810
you know spend an afternoon learning

00:32:27,310 --> 00:32:31,690
learning how to program in this language

00:32:28,810 --> 00:32:33,070
called Scala people kind of come out of

00:32:31,690 --> 00:32:34,900
the woodwork because they think you know

00:32:33,070 --> 00:32:37,120
programming is something I should learn

00:32:34,900 --> 00:32:38,170
to do because maybe my job or you know

00:32:37,120 --> 00:32:41,470
whatever I'm doing that might not be

00:32:38,170 --> 00:32:45,010
hardcore back-end development right you

00:32:41,470 --> 00:32:47,680
know it might be useful and actually at

00:32:45,010 --> 00:32:49,600
Scala days in Berlin somebody came up to

00:32:47,680 --> 00:32:51,460
me and they asked well you know why

00:32:49,600 --> 00:32:53,260
don't I don't local meetup groups and

00:32:51,460 --> 00:32:54,640
things don't why don't they do like a

00:32:53,260 --> 00:32:57,160
scallop bridge but like not

00:32:54,640 --> 00:32:58,330
underrepresented groups go yeah I'm like

00:32:57,160 --> 00:33:01,030
you know first of all I don't know I

00:32:58,330 --> 00:33:05,140
can't control local meetup groups but

00:33:01,030 --> 00:33:06,820
you know one idea if if you know anybody

00:33:05,140 --> 00:33:07,720
is interested in sort of just spreading

00:33:06,820 --> 00:33:09,760
the joy of Scala

00:33:07,720 --> 00:33:11,200
you know you could do this in your local

00:33:09,760 --> 00:33:12,360
meetup group and say hey anybody who

00:33:11,200 --> 00:33:14,650
wants to come and learn how to program

00:33:12,360 --> 00:33:16,660
you know ideally somebody who comes from

00:33:14,650 --> 00:33:18,310
maybe other fields and whatnot say you

00:33:16,660 --> 00:33:20,350
know we'll do this once every few months

00:33:18,310 --> 00:33:22,510
and come and have you know have some

00:33:20,350 --> 00:33:23,650
beats and we learn and you know I bet

00:33:22,510 --> 00:33:24,910
you five bucks you're gonna get a bunch

00:33:23,650 --> 00:33:26,620
of people who come from different

00:33:24,910 --> 00:33:29,290
backgrounds and eventually you might see

00:33:26,620 --> 00:33:32,230
more like NLP libraries or you know

00:33:29,290 --> 00:33:34,960
things that are not hardcore like the

00:33:32,230 --> 00:33:37,030
the five areas that people are jumping

00:33:34,960 --> 00:33:39,610
on top of to build Scala applications in

00:33:37,030 --> 00:33:40,660
I would encourage people to do that if

00:33:39,610 --> 00:33:42,070
you're if you're interested in

00:33:40,660 --> 00:33:45,940
organizing something like this in your

00:33:42,070 --> 00:33:49,150
local group there was a Scala study

00:33:45,940 --> 00:33:51,190
group in San Francisco circa 2013 that

00:33:49,150 --> 00:33:53,890
has since disbanded but it followed that

00:33:51,190 --> 00:33:55,810
it followed that model of let's meet up

00:33:53,890 --> 00:33:57,790
you know once every couple of weeks and

00:33:55,810 --> 00:33:59,440
maybe we will follow a curriculum for a

00:33:57,790 --> 00:34:01,330
while or maybe people can just bring

00:33:59,440 --> 00:34:02,260
their questions I know this is something

00:34:01,330 --> 00:34:04,660
that a lot of

00:34:02,260 --> 00:34:06,790
meetup groups do regularly especially in

00:34:04,660 --> 00:34:08,260
San Francisco obviously that's a larger

00:34:06,790 --> 00:34:09,429
tech scene but I think there's

00:34:08,260 --> 00:34:15,730
definitely an opportunity for something

00:34:09,429 --> 00:34:18,730
like that so to over generalize a little

00:34:15,730 --> 00:34:21,850
bit I find we have sort of two types of

00:34:18,730 --> 00:34:23,830
students and one is super eager to learn

00:34:21,850 --> 00:34:25,840
new languages they'll come back the next

00:34:23,830 --> 00:34:28,510
day and tell you about this tutorial

00:34:25,840 --> 00:34:30,429
they read and then the other group is

00:34:28,510 --> 00:34:33,610
sort of hey I just want to do the

00:34:30,429 --> 00:34:36,639
minimum learn the minimum - to do my job

00:34:33,610 --> 00:34:46,780
do you have ideas for motivating or

00:34:36,639 --> 00:34:50,560
reaching that latter group whenever I

00:34:46,780 --> 00:34:53,290
have to work with that latter group it

00:34:50,560 --> 00:34:55,000
usually what I try to do very I mean I

00:34:53,290 --> 00:34:57,340
can't give you like a one-size-fits-all

00:34:55,000 --> 00:34:58,930
solution it for me it's been depending

00:34:57,340 --> 00:35:02,620
on the class right find a different way

00:34:58,930 --> 00:35:04,450
to motivate them one way I've motivated

00:35:02,620 --> 00:35:06,520
them is by trying to show them that

00:35:04,450 --> 00:35:08,560
their efforts would either be seen by

00:35:06,520 --> 00:35:10,780
other people like you have to write a

00:35:08,560 --> 00:35:12,580
blog article and put it on the internet

00:35:10,780 --> 00:35:14,620
and somebody could google it

00:35:12,580 --> 00:35:16,600
right and then they go okay maybe I

00:35:14,620 --> 00:35:18,730
should you know maybe somebody's looking

00:35:16,600 --> 00:35:19,930
for I'm a senior I'm graduating

00:35:18,730 --> 00:35:21,310
you know if there's somebody googling my

00:35:19,930 --> 00:35:22,480
name when I'm applying for jobs I should

00:35:21,310 --> 00:35:25,660
care about this and they try really hard

00:35:22,480 --> 00:35:29,620
all of a sudden and then the other thing

00:35:25,660 --> 00:35:32,860
is to kind of you know go back to the

00:35:29,620 --> 00:35:34,060
you know examples and sort of what

00:35:32,860 --> 00:35:35,920
motivates the group of students that

00:35:34,060 --> 00:35:37,780
you're working with I would say at EPFL

00:35:35,920 --> 00:35:39,640
the students are a little bit more

00:35:37,780 --> 00:35:41,170
academic and you know they're fine was

00:35:39,640 --> 00:35:43,420
kind of like cute little academic

00:35:41,170 --> 00:35:45,220
theoretical problems in the u.s. I found

00:35:43,420 --> 00:35:46,480
that students you know they want to just

00:35:45,220 --> 00:35:49,060
they want to build something that they

00:35:46,480 --> 00:35:50,590
can see and use right and so getting

00:35:49,060 --> 00:35:52,690
them as quickly - I mean I guess it

00:35:50,590 --> 00:35:55,480
depends on the group but getting them to

00:35:52,690 --> 00:35:57,160
as quickly as possible to that thing but

00:35:55,480 --> 00:35:59,050
they really wanted to actually do it the

00:35:57,160 --> 00:36:00,520
language and then they have a reason to

00:35:59,050 --> 00:36:03,040
learn these funny concepts that you're

00:36:00,520 --> 00:36:04,990
trying to teach them I found that that

00:36:03,040 --> 00:36:07,210
that helps so I have these kind of - -

00:36:04,990 --> 00:36:11,950
things that I try depending on the group

00:36:07,210 --> 00:36:13,900
that I'm in so in my classes I try to

00:36:11,950 --> 00:36:15,190
keep the students hands on keyboard as

00:36:13,900 --> 00:36:15,790
much as possible so that they are

00:36:15,190 --> 00:36:18,190
actively

00:36:15,790 --> 00:36:19,420
coding and in my advanced course I try

00:36:18,190 --> 00:36:21,040
to leave them with something they can

00:36:19,420 --> 00:36:23,770
use beyond the course not just a little

00:36:21,040 --> 00:36:25,840
throwaway application so in that course

00:36:23,770 --> 00:36:28,210
it's a jmh benchmark suite for the

00:36:25,840 --> 00:36:30,580
collections library and I try to make

00:36:28,210 --> 00:36:32,770
sure that they're seeing how they could

00:36:30,580 --> 00:36:34,360
use that in their regular work on their

00:36:32,770 --> 00:36:36,340
team and not just in this little class

00:36:34,360 --> 00:36:38,950
they're taking at the company in my

00:36:36,340 --> 00:36:40,450
opinion it's okay to just want to learn

00:36:38,950 --> 00:36:42,310
you know enough to get your job done

00:36:40,450 --> 00:36:44,260
you're okay it's like you want to write

00:36:42,310 --> 00:36:46,390
data pipelines and it happens to be in

00:36:44,260 --> 00:36:49,240
Scala but they wanted write pipelines to

00:36:46,390 --> 00:36:51,340
solve business problems and a lot of the

00:36:49,240 --> 00:36:53,530
api's libraries are designed so that in

00:36:51,340 --> 00:36:55,720
it requires minimal knowledge of Scala

00:36:53,530 --> 00:36:58,000
and you can sort of just you know tab

00:36:55,720 --> 00:36:59,740
completion your way through it which is

00:36:58,000 --> 00:37:02,620
okay for like people who just want to do

00:36:59,740 --> 00:37:04,480
the job and but we also try to motivate

00:37:02,620 --> 00:37:06,220
users like if you know if you learn a

00:37:04,480 --> 00:37:08,620
little bit about how the API is designed

00:37:06,220 --> 00:37:10,900
like you know implicit arguments or the

00:37:08,620 --> 00:37:12,550
type classes or whatever I will make

00:37:10,900 --> 00:37:14,140
your job much easier you can decide

00:37:12,550 --> 00:37:16,450
whether your error message and there's

00:37:14,140 --> 00:37:18,640
always some more advanced power user who

00:37:16,450 --> 00:37:25,810
can help you out so that's how the way

00:37:18,640 --> 00:37:27,460
we see it so now that more and more the

00:37:25,810 --> 00:37:29,430
people coming into the scala community

00:37:27,460 --> 00:37:31,900
are coming from dynamically typed

00:37:29,430 --> 00:37:33,520
environments one of the things I've

00:37:31,900 --> 00:37:35,890
occasionally seen when I'm doing

00:37:33,520 --> 00:37:37,660
training or people in Gitter and stuff

00:37:35,890 --> 00:37:39,700
like that one of the things I've seen

00:37:37,660 --> 00:37:41,410
them stumbling on is the concept of

00:37:39,700 --> 00:37:43,270
types because they've never seen a

00:37:41,410 --> 00:37:46,450
compiler before and they don't really

00:37:43,270 --> 00:37:48,850
understand it I'm curious how early do

00:37:46,450 --> 00:37:52,240
you introduce the idea of a type and how

00:37:48,850 --> 00:37:53,770
do you describe it to people before this

00:37:52,240 --> 00:37:55,570
question gets answered I do want to

00:37:53,770 --> 00:37:58,780
point out that ely gave an excellent

00:37:55,570 --> 00:38:00,520
talk earlier called teaching scala for

00:37:58,780 --> 00:38:02,290
the statically type or statically

00:38:00,520 --> 00:38:03,910
challenged so there's there's a longer

00:38:02,290 --> 00:38:07,420
form answer to this that i will point

00:38:03,910 --> 00:38:11,350
you to that will be recorded soon day

00:38:07,420 --> 00:38:14,590
number one okay and in fact this is why

00:38:11,350 --> 00:38:16,360
I like Scala for cs1 as opposed to to

00:38:14,590 --> 00:38:18,550
Python I care about types

00:38:16,360 --> 00:38:21,730
I think types are very important I love

00:38:18,550 --> 00:38:24,550
the fact that the Scala repple when you

00:38:21,730 --> 00:38:26,170
type in the number 5 and hit enter not

00:38:24,550 --> 00:38:28,900
only gives you back that it's a 5 it

00:38:26,170 --> 00:38:29,680
tells you and 5 is an INT and and I

00:38:28,900 --> 00:38:31,150
utilized

00:38:29,680 --> 00:38:33,430
my class I want my students to

00:38:31,150 --> 00:38:41,890
understand types that is right front and

00:38:33,430 --> 00:38:43,750
center from the very beginning mark this

00:38:41,890 --> 00:38:46,210
is mainly a question for you

00:38:43,750 --> 00:38:51,010
it's a follow-up to the your comment

00:38:46,210 --> 00:38:54,010
earlier that you work a lot with data

00:38:51,010 --> 00:38:57,700
scientists who work in Python and they

00:38:54,010 --> 00:38:59,590
prefer Python what do you think is kind

00:38:57,700 --> 00:39:02,170
of like the killer motivating feature

00:38:59,590 --> 00:39:04,960
for them to move to a different language

00:39:02,170 --> 00:39:07,630
like Scala if you just say it's type

00:39:04,960 --> 00:39:09,610
safe most indict safety is so that's not

00:39:07,630 --> 00:39:11,470
a killer feature for them if you say

00:39:09,610 --> 00:39:14,320
whew now we have visualization they'll

00:39:11,470 --> 00:39:18,010
say great we've had it for years

00:39:14,320 --> 00:39:19,750
in order to beat an incumbent B in order

00:39:18,010 --> 00:39:24,520
to displace an incumbent we need

00:39:19,750 --> 00:39:26,200
features that they feel is our they

00:39:24,520 --> 00:39:27,970
can't do their job properly without it

00:39:26,200 --> 00:39:33,430
so what do you think in your experience

00:39:27,970 --> 00:39:36,850
would be some of those things well I

00:39:33,430 --> 00:39:40,780
think sorry mark did I say Martin yeah

00:39:36,850 --> 00:39:42,490
no but any of you you can answer and any

00:39:40,780 --> 00:39:44,470
of you can answer but I'm gonna put

00:39:42,490 --> 00:39:47,320
someone new convention Python so so

00:39:44,470 --> 00:39:49,480
actually the the talk right before this

00:39:47,320 --> 00:39:52,180
we're talking about historically speed

00:39:49,480 --> 00:39:55,180
would have been one of the big ones but

00:39:52,180 --> 00:39:57,610
apparently it for example in in spark

00:39:55,180 --> 00:40:03,670
the arrow project is giving Python a

00:39:57,610 --> 00:40:06,490
competitive run there I as opposed to

00:40:03,670 --> 00:40:09,580
just saying that you have types and and

00:40:06,490 --> 00:40:11,260
that you have type safety the you can

00:40:09,580 --> 00:40:13,780
motivate that in a different way because

00:40:11,260 --> 00:40:16,150
what type safety gives us is early

00:40:13,780 --> 00:40:17,890
detection of errors yeah the the fact

00:40:16,150 --> 00:40:19,750
especially when you're processing large

00:40:17,890 --> 00:40:22,300
data sets if this is gonna run for a

00:40:19,750 --> 00:40:25,090
while it's really nice to know that you

00:40:22,300 --> 00:40:27,370
screwed it up you know immediately as

00:40:25,090 --> 00:40:29,010
opposed to waiting 24 hours and then

00:40:27,370 --> 00:40:32,140
finding out that you screwed it up

00:40:29,010 --> 00:40:34,540
because inevitably what it's telling you

00:40:32,140 --> 00:40:36,100
is one of your five you know screw-ups

00:40:34,540 --> 00:40:39,250
and you can spend the next week finding

00:40:36,100 --> 00:40:42,340
them if you get your feedback once a day

00:40:39,250 --> 00:40:43,390
on long runs so I think that would be

00:40:42,340 --> 00:40:45,789
one of our major

00:40:43,390 --> 00:40:48,309
motivating stories for for static typing

00:40:45,789 --> 00:40:50,710
it's it's the early information it's the

00:40:48,309 --> 00:40:52,480
the higher quality information it really

00:40:50,710 --> 00:40:55,000
helps us to solve our problems

00:40:52,480 --> 00:40:57,119
effectively and that's something the

00:40:55,000 --> 00:40:59,799
dynamic languages can't do for you I

00:40:57,119 --> 00:41:02,890
want to just add a little bit on top of

00:40:59,799 --> 00:41:05,769
that for us I mean most of the big data

00:41:02,890 --> 00:41:08,049
ecosystem is in JVM so like SCADA just

00:41:05,769 --> 00:41:10,630
makes a lot more sense we have my single

00:41:08,049 --> 00:41:12,670
dataflow Java process like hundreds of

00:41:10,630 --> 00:41:15,579
terabytes of data which is simply

00:41:12,670 --> 00:41:17,829
impossible in Python and the other thing

00:41:15,579 --> 00:41:19,240
is the composability of a lot of we use

00:41:17,829 --> 00:41:21,309
this Twitter library core algae board

00:41:19,240 --> 00:41:24,160
heavily which is basically library of

00:41:21,309 --> 00:41:27,039
semigroups and and that using type class

00:41:24,160 --> 00:41:28,839
to automatically derive behavior like

00:41:27,039 --> 00:41:31,779
you know type classes for summing

00:41:28,839 --> 00:41:34,000
various complex data structures in

00:41:31,779 --> 00:41:36,640
parallel and as long as you express your

00:41:34,000 --> 00:41:39,309
type correctly and the library will just

00:41:36,640 --> 00:41:41,319
you know perform the computation without

00:41:39,309 --> 00:41:44,140
the user ever having to write any code

00:41:41,319 --> 00:41:46,089
so that gives a lot of agility and I've

00:41:44,140 --> 00:41:49,650
been you know the the correctness

00:41:46,089 --> 00:41:52,539
guarantee to to the data pipelines

00:41:49,650 --> 00:41:54,900
thanks I think we have time for one more

00:41:52,539 --> 00:41:54,900
question

00:41:55,799 --> 00:42:02,410
hi so we've been hiring developers for

00:41:59,769 --> 00:42:04,119
the past six months eight months and we

00:42:02,410 --> 00:42:06,519
do a pre-screening on the phone so it's

00:42:04,119 --> 00:42:08,849
5-10 minutes and they always ask what

00:42:06,519 --> 00:42:13,059
technologies do you use and we use Scala

00:42:08,849 --> 00:42:15,640
play akka and they always most of them

00:42:13,059 --> 00:42:17,980
are from Java even PHP none of them are

00:42:15,640 --> 00:42:20,799
Scala and they ask why Scala and not

00:42:17,980 --> 00:42:23,799
Java you can say because it's less code

00:42:20,799 --> 00:42:26,500
it's easier but what in five minutes how

00:42:23,799 --> 00:42:29,650
are how could you answer that question

00:42:26,500 --> 00:42:32,950
to a developer that makes more more

00:42:29,650 --> 00:42:35,080
sense that just it's easier unless let's

00:42:32,950 --> 00:42:38,850
go

00:42:35,080 --> 00:42:38,850
that's probably for the application but

00:42:39,180 --> 00:42:44,050
that's a good question I don't know how

00:42:41,380 --> 00:42:46,690
our recruiters answer it my answer would

00:42:44,050 --> 00:42:48,880
be that Scala gives us abstractions that

00:42:46,690 --> 00:42:50,560
especially back when Twitter was moving

00:42:48,880 --> 00:42:52,330
off of Ruby which I wasn't there for so

00:42:50,560 --> 00:42:55,360
I can't speak to it back then but when

00:42:52,330 --> 00:42:56,830
they were moving off of Ruby Java didn't

00:42:55,360 --> 00:42:58,540
have a lot of the abstractions it's now

00:42:56,830 --> 00:43:00,730
gained partly because as martin said in

00:42:58,540 --> 00:43:03,040
his keynote scala started tripping them

00:43:00,730 --> 00:43:05,470
on the JVM Java didn't have those

00:43:03,040 --> 00:43:08,710
abstractions Scala did and Scala offered

00:43:05,470 --> 00:43:11,350
the power to express ideas in ways that

00:43:08,710 --> 00:43:14,080
made it easier to scale a service the

00:43:11,350 --> 00:43:15,790
size of Twitter even just something like

00:43:14,080 --> 00:43:18,040
algebra that Nevel just mentioned which

00:43:15,790 --> 00:43:20,470
comes out of scalding lets you very

00:43:18,040 --> 00:43:22,570
succinctly Express business problems in

00:43:20,470 --> 00:43:25,090
a way that you can then scale across

00:43:22,570 --> 00:43:28,780
thousands and thousands of machines in a

00:43:25,090 --> 00:43:35,730
way that Java is still kind of glomming

00:43:28,780 --> 00:43:38,110
on at this point so at yov of

00:43:35,730 --> 00:43:41,080
californication it's a very reactive

00:43:38,110 --> 00:43:44,440
very chaotic environment where many

00:43:41,080 --> 00:43:46,810
things happens at once and Scala gives

00:43:44,440 --> 00:43:49,150
us possibility to still keep track of

00:43:46,810 --> 00:43:53,050
all of that because of the many features

00:43:49,150 --> 00:43:56,050
in Scala are very well liked thought of

00:43:53,050 --> 00:43:59,650
the they can interact with each other so

00:43:56,050 --> 00:44:03,040
we can still have very precise code in

00:43:59,650 --> 00:44:05,920
only a like one throat of Java code

00:44:03,040 --> 00:44:07,690
well everyone can really see these

00:44:05,920 --> 00:44:12,040
abstractions and keep it in their head

00:44:07,690 --> 00:44:13,660
how graphic user interface interacts

00:44:12,040 --> 00:44:16,360
with the stored syntax with the backend

00:44:13,660 --> 00:44:18,340
and so on so we driver with the amount

00:44:16,360 --> 00:44:22,300
of the things that we would have to

00:44:18,340 --> 00:44:25,060
write I would mean that we we couldn't

00:44:22,300 --> 00:44:29,200
like have space for new things and we

00:44:25,060 --> 00:44:34,030
would waste much more time on just

00:44:29,200 --> 00:44:39,550
keeping track of what we are doing learn

00:44:34,030 --> 00:44:43,700
any final thoughts on why Scala one two

00:44:39,550 --> 00:44:46,310
seconds okay two sentences it's

00:44:43,700 --> 00:44:48,320
I think it's still a language that is

00:44:46,310 --> 00:44:50,240
much more direct that expresses things

00:44:48,320 --> 00:44:53,150
much more directly in your domain then

00:44:50,240 --> 00:44:54,890
what what Java can do so true Java has

00:44:53,150 --> 00:44:57,320
closures now this is definitely progress

00:44:54,890 --> 00:44:59,300
but I mean the fact the mere fact that

00:44:57,320 --> 00:45:02,030
there are expressions and statements and

00:44:59,300 --> 00:45:03,980
you can't do anything in expression sort

00:45:02,030 --> 00:45:06,920
of health's holds you back and you're

00:45:03,980 --> 00:45:09,380
sort of it's it's almost impossible to

00:45:06,920 --> 00:45:11,619
be truly functional in in a language

00:45:09,380 --> 00:45:14,420
like that is statement oriented and

00:45:11,619 --> 00:45:15,890
that's just one thing but I laid there

00:45:14,420 --> 00:45:17,589
many many others so I think it's just a

00:45:15,890 --> 00:45:20,119
sort of know first get to the point

00:45:17,589 --> 00:45:22,880
language that's like how how I think

00:45:20,119 --> 00:45:25,099
about SCARA and I guess the developers

00:45:22,880 --> 00:45:27,980
said once they learn it for a while they

00:45:25,099 --> 00:45:31,369
tend to like it so it's it's temporary I

00:45:27,980 --> 00:45:32,150
hope excellent thank you all for joining

00:45:31,369 --> 00:45:34,130
us tonight

00:45:32,150 --> 00:45:41,869
give her a big round of applause for our

00:45:34,130 --> 00:45:43,280
panel we will we won't stick around as

00:45:41,869 --> 00:45:46,390
much as as long as we can if you have

00:45:43,280 --> 00:45:46,390

YouTube URL: https://www.youtube.com/watch?v=7x-wAgIVUgA


