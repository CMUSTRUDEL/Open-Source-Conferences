Title: Metaprogramming 2.0 by Eugene Burmako
Publication date: 2017-01-19
Playlist: Scala Days 2016
Description: 
	This video was recorded at Scala Days Berlin 2016
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

Anstract:
The story of better metaprogramming in Scala has started in early 2013, after we released macros 1.0 and got initial feedback from early adopters. This talk will provide an illustrated guide through the history of the improvements that we did and are planning to do to metaprogramming. We will see what worked, what didn't, and what we're excited about for the future of macros in scala.meta and Dotty.
Captions: 
	00:00:03,160 --> 00:00:07,899
thanks a lot for attending this talk the

00:00:05,740 --> 00:00:11,320
room is full and frankly speaking this

00:00:07,899 --> 00:00:13,230
is very confident and very much excited

00:00:11,320 --> 00:00:16,410
to present some interesting stuff today

00:00:13,230 --> 00:00:19,449
first of all let's get something clear

00:00:16,410 --> 00:00:22,810
so you can see on the title of the talk

00:00:19,449 --> 00:00:26,199
macros are not going away and let's

00:00:22,810 --> 00:00:29,050
let's keep this as an axiom and now on

00:00:26,199 --> 00:00:32,590
to other stuff now that we've clarified

00:00:29,050 --> 00:00:35,290
the most asked question of the last few

00:00:32,590 --> 00:00:37,540
days alright so in the today's talk

00:00:35,290 --> 00:00:39,640
we'll find answers for the following

00:00:37,540 --> 00:00:41,440
four questions first of all what's

00:00:39,640 --> 00:00:43,629
kalamata and how exactly it's going to

00:00:41,440 --> 00:00:46,989
replace macros as Martin has mentioned

00:00:43,629 --> 00:00:50,949
in his keynote then what can Scala Mehta

00:00:46,989 --> 00:00:52,710
do what is it good for exactly then we

00:00:50,949 --> 00:00:55,020
will see why you should care because

00:00:52,710 --> 00:00:58,270
there's a lot of projects coming up

00:00:55,020 --> 00:00:59,829
virtually every week so it's another one

00:00:58,270 --> 00:01:01,899
so what can you do with it

00:00:59,829 --> 00:01:04,930
how can it be useful personally to you

00:01:01,899 --> 00:01:06,720
and finally we will get a little sneak

00:01:04,930 --> 00:01:09,370
peek into the future of the project and

00:01:06,720 --> 00:01:13,180
we will see what are our plans for its

00:01:09,370 --> 00:01:15,880
development ok so first of all Scala

00:01:13,180 --> 00:01:20,410
meta starts it as a dream so as you can

00:01:15,880 --> 00:01:23,590
see here's the title slide from our talk

00:01:20,410 --> 00:01:26,350
from exactly two years ago also here in

00:01:23,590 --> 00:01:28,270
Berlin Scala days where we introduced

00:01:26,350 --> 00:01:31,150
this idea and postulated that meta

00:01:28,270 --> 00:01:35,170
programming it shouldn't be hard and we

00:01:31,150 --> 00:01:37,060
know how to make it easy and we didn't

00:01:35,170 --> 00:01:40,180
limit ourselves to just words and we've

00:01:37,060 --> 00:01:42,880
started this big project and it ended up

00:01:40,180 --> 00:01:44,860
being a really active effort as you can

00:01:42,880 --> 00:01:47,730
see from the graph of contributions and

00:01:44,860 --> 00:01:50,470
you know the total number of commits and

00:01:47,730 --> 00:01:53,230
also we've been very very lucky with a

00:01:50,470 --> 00:01:55,630
lot of people who are interested in

00:01:53,230 --> 00:01:59,230
helping us out so here in the list

00:01:55,630 --> 00:02:02,560
usually I have this list of contributors

00:01:59,230 --> 00:02:04,120
you know on my slides but these days it

00:02:02,560 --> 00:02:06,490
just doesn't fit so I had to make a

00:02:04,120 --> 00:02:09,039
screenshot from our readme on github so

00:02:06,490 --> 00:02:12,670
here you can see both our colleagues

00:02:09,039 --> 00:02:15,950
from epfl and other external folks for

00:02:12,670 --> 00:02:18,739
helping us out and that's really cool

00:02:15,950 --> 00:02:19,959
amazing thank you everyone who helped us

00:02:18,739 --> 00:02:22,280
make it happen

00:02:19,959 --> 00:02:24,739
also Scala Mehta is not just you know

00:02:22,280 --> 00:02:27,620
vision and some you know busy work it's

00:02:24,739 --> 00:02:30,500
actually a product so there's there's a

00:02:27,620 --> 00:02:32,800
jar that you can actually download from

00:02:30,500 --> 00:02:35,290
maven we will see the details later and

00:02:32,800 --> 00:02:38,870
put it to use

00:02:35,290 --> 00:02:42,500
finally Scala Mehta has official support

00:02:38,870 --> 00:02:44,209
so it turns out that meta programming is

00:02:42,500 --> 00:02:48,049
really useful to Scala is the language

00:02:44,209 --> 00:02:51,319
and Scala meta ended up being a good fit

00:02:48,049 --> 00:02:54,890
for the standard of meta programming in

00:02:51,319 --> 00:02:57,799
Scala and that's actually very very good

00:02:54,890 --> 00:03:00,739
news I'm glad that our ideas they get

00:02:57,799 --> 00:03:03,380
traction was exactly House Kalamata

00:03:00,739 --> 00:03:08,329
helps out helps meta programming and

00:03:03,380 --> 00:03:10,280
macros to be clear for everyone now that

00:03:08,329 --> 00:03:14,690
we've established what Scala meta is

00:03:10,280 --> 00:03:17,599
let's see what it can be used for well

00:03:14,690 --> 00:03:19,670
actually first let's start with the

00:03:17,599 --> 00:03:23,150
status as I mentioned before two years

00:03:19,670 --> 00:03:25,880
ago we've just started the project and

00:03:23,150 --> 00:03:28,250
now more than 3k commits and a bunch of

00:03:25,880 --> 00:03:29,630
milestones later I'm really happy to

00:03:28,250 --> 00:03:34,329
announce that we're ready to release our

00:03:29,630 --> 00:03:34,329
first version and so let's

00:03:40,830 --> 00:03:48,610
actually let's make it a bit interactive

00:03:43,150 --> 00:03:50,200
wow it's really small and let's do that

00:03:48,610 --> 00:03:52,420
on the spot so I've prepared the

00:03:50,200 --> 00:03:55,390
artifacts and now I just need to push

00:03:52,420 --> 00:03:58,470
the button it's a really good idea that

00:03:55,390 --> 00:04:00,970
my colleague Dennis Chaplin came up with

00:03:58,470 --> 00:04:04,530
to do the stuff during presentations and

00:04:00,970 --> 00:04:04,530
well let's see how it works for us

00:04:11,400 --> 00:04:25,389
Internet now we just need to wait a

00:04:22,540 --> 00:04:28,020
little bit and the thing that I promised

00:04:25,389 --> 00:04:28,020
will become a reality

00:04:34,409 --> 00:04:43,569
so here's a bunch of releases that I

00:04:38,710 --> 00:04:53,009
mentioned before quite a lot and here it

00:04:43,569 --> 00:04:58,780
is alright

00:04:53,009 --> 00:05:00,520
so what's there first of all and that's

00:04:58,780 --> 00:05:04,000
the most important contribution of Scala

00:05:00,520 --> 00:05:07,719
meta we have a really platform

00:05:04,000 --> 00:05:09,250
independent STS this means that our

00:05:07,719 --> 00:05:11,710
abstract syntax trees they're not built

00:05:09,250 --> 00:05:14,909
on top of sky reflect that is compiler

00:05:11,710 --> 00:05:19,080
internals they're not built on top of

00:05:14,909 --> 00:05:21,279
for instance IntelliJ is psi trees

00:05:19,080 --> 00:05:24,009
they're really designed to interoperate

00:05:21,279 --> 00:05:26,620
well with everyone so it's a standalone

00:05:24,009 --> 00:05:29,289
standard that we hope will get one more

00:05:26,620 --> 00:05:30,689
attraction in the future secondly these

00:05:29,289 --> 00:05:34,120
trees they're designed in a way that

00:05:30,689 --> 00:05:37,210
makes sure that no syntactic details no

00:05:34,120 --> 00:05:39,490
comments or formatting gets left out so

00:05:37,210 --> 00:05:42,639
once when you use color meta you may be

00:05:39,490 --> 00:05:44,650
sure that all the minor details about

00:05:42,639 --> 00:05:46,539
their program they are there and you can

00:05:44,650 --> 00:05:48,599
inspect them nothing gets lost and

00:05:46,539 --> 00:05:51,520
finally we have introduced a new

00:05:48,599 --> 00:05:53,319
question unexpected abstraction we

00:05:51,520 --> 00:05:54,580
haven't even thought about that at the

00:05:53,319 --> 00:05:57,039
beginning of the project which is called

00:05:54,580 --> 00:05:59,500
tokens so later on we'll see how they

00:05:57,039 --> 00:06:02,860
make life easier and provide new

00:05:59,500 --> 00:06:05,199
capabilities so let's just get a really

00:06:02,860 --> 00:06:07,689
really quick tour of the functionality

00:06:05,199 --> 00:06:10,689
that's there and you'll be able to check

00:06:07,689 --> 00:06:12,699
this out very soon all right so first of

00:06:10,689 --> 00:06:14,409
all it's very easy to get started with

00:06:12,699 --> 00:06:17,500
scala meta everything that's necessary

00:06:14,409 --> 00:06:18,969
is just this blanket import import Scala

00:06:17,500 --> 00:06:23,740
method underscore and then you're ready

00:06:18,969 --> 00:06:25,900
to go so I guess some of you here you

00:06:23,740 --> 00:06:27,819
have worked with Scala tools in a sea

00:06:25,900 --> 00:06:30,939
global and you've tried to make it do

00:06:27,819 --> 00:06:34,509
stuff it's it's a bit more complicated

00:06:30,939 --> 00:06:36,849
and we don't want to perpetuate this

00:06:34,509 --> 00:06:39,339
experience so here on the second line is

00:06:36,849 --> 00:06:40,810
the example of parson so as you can see

00:06:39,339 --> 00:06:42,339
if you need to parse something for

00:06:40,810 --> 00:06:45,310
instance a string or a file just call

00:06:42,339 --> 00:06:47,980
parts and del Scala matter what exactly

00:06:45,310 --> 00:06:50,740
and as a result you get back a tree so

00:06:47,980 --> 00:06:53,410
very simple no ceremony you just get

00:06:50,740 --> 00:06:54,940
straight to implement in your logic so

00:06:53,410 --> 00:06:58,120
the interesting thing that I promised

00:06:54,940 --> 00:07:00,430
before this high fidelity parson if you

00:06:58,120 --> 00:07:03,190
try to parse you know the string with a

00:07:00,430 --> 00:07:06,580
comment you will see that it gets

00:07:03,190 --> 00:07:09,639
remembered in the result so here we here

00:07:06,580 --> 00:07:10,930
we see a comment printed out and to

00:07:09,639 --> 00:07:12,880
those who haven't worked with the meta

00:07:10,930 --> 00:07:15,250
programming in Scala we just wonder what

00:07:12,880 --> 00:07:16,930
that isn't you know drop by the stock

00:07:15,250 --> 00:07:20,500
this may not seem like an achievement

00:07:16,930 --> 00:07:22,570
but actually actually this is a pretty

00:07:20,500 --> 00:07:24,220
unique feature and this is one of the

00:07:22,570 --> 00:07:27,460
exclusive features that we provide so

00:07:24,220 --> 00:07:31,120
how does this work well it turns out

00:07:27,460 --> 00:07:33,580
that this abstraction of tokens is

00:07:31,120 --> 00:07:36,040
actually at play here and all tokens

00:07:33,580 --> 00:07:39,160
they're basically elementary parts of

00:07:36,040 --> 00:07:42,490
Scala's grammar so as you can see with

00:07:39,160 --> 00:07:45,520
the tree that we've provided here we

00:07:42,490 --> 00:07:48,160
associated all the you know all the

00:07:45,520 --> 00:07:51,160
characters essentially that constituted

00:07:48,160 --> 00:07:52,660
so we can see the the first token which

00:07:51,160 --> 00:07:56,020
is empty it's the beginning of the file

00:07:52,660 --> 00:07:57,760
then we have the identifier and finally

00:07:56,020 --> 00:07:59,620
the most important thing there are white

00:07:57,760 --> 00:08:01,479
spaces and there's the comment and

00:07:59,620 --> 00:08:04,450
finally the end of the stream token at

00:08:01,479 --> 00:08:07,330
the end and these tokens they're not

00:08:04,450 --> 00:08:10,600
just strings or characters it wouldn't

00:08:07,330 --> 00:08:12,669
be very useful if they were they're

00:08:10,600 --> 00:08:15,400
really full-fledged objects so they have

00:08:12,669 --> 00:08:17,140
positions you can inspect them to figure

00:08:15,400 --> 00:08:22,180
out whether you're looking at an ident

00:08:17,140 --> 00:08:24,760
or a keyword or comments and people have

00:08:22,180 --> 00:08:27,820
already been building really cool stuff

00:08:24,760 --> 00:08:30,700
on top of this API so a little bit later

00:08:27,820 --> 00:08:32,800
in like 15 minutes we will hear a

00:08:30,700 --> 00:08:36,190
first-hand report from the author of one

00:08:32,800 --> 00:08:39,010
of those tools also another neat feature

00:08:36,190 --> 00:08:42,130
is support for multiple dialects of

00:08:39,010 --> 00:08:44,410
Scala so Scala evolves and Scala has

00:08:42,130 --> 00:08:46,660
multiple tools that use it as a

00:08:44,410 --> 00:08:48,700
configuration language so we really

00:08:46,660 --> 00:08:50,560
ought to support everyone as I mentioned

00:08:48,700 --> 00:08:52,420
before one of the goals of Scala matt is

00:08:50,560 --> 00:08:55,630
to be interoperable to be a meta

00:08:52,420 --> 00:08:58,900
programming standard and so even though

00:08:55,630 --> 00:09:00,279
SBT builds they look like sky

00:08:58,900 --> 00:09:03,490
they're not because well they allow

00:09:00,279 --> 00:09:05,800
defining methods on the top level which

00:09:03,490 --> 00:09:08,320
is currently disallowed by the batch

00:09:05,800 --> 00:09:10,960
compiler so in order to accommodate this

00:09:08,320 --> 00:09:13,350
interesting peculiarity we introduce the

00:09:10,960 --> 00:09:17,860
concept of dialects so here we use the

00:09:13,350 --> 00:09:22,300
dialect for SBT 0 13 6 to take a look at

00:09:17,860 --> 00:09:23,740
the plugins SBT a build file that we

00:09:22,300 --> 00:09:25,870
haven't discovered meta project and then

00:09:23,740 --> 00:09:27,610
parse it so as you can see from the

00:09:25,870 --> 00:09:30,279
printout if you try to parse this as no

00:09:27,610 --> 00:09:33,460
normal Scala source its it wouldn't work

00:09:30,279 --> 00:09:35,050
but here in Scala meta we have an

00:09:33,460 --> 00:09:37,450
abstraction at the last accommodate for

00:09:35,050 --> 00:09:41,140
that and of course we not only support

00:09:37,450 --> 00:09:42,700
SBT and Scala 210 or scale 212 in

00:09:41,140 --> 00:09:45,550
addition to the current version Scala to

00:09:42,700 --> 00:09:47,700
11 we were keeping a close eye on dot C

00:09:45,550 --> 00:09:49,779
and we have a dialect that covers

00:09:47,700 --> 00:09:53,440
differences between Scala and watch it

00:09:49,779 --> 00:09:55,660
soon finally I would like to conclude

00:09:53,440 --> 00:09:58,450
this really brief tour of where the

00:09:55,660 --> 00:10:00,430
capability of Scala meta by saying that

00:09:58,450 --> 00:10:02,440
the quasi calls are also cool and we

00:10:00,430 --> 00:10:04,750
decided just to steal them from Scala

00:10:02,440 --> 00:10:10,000
reflect luckily we didn't have to steal

00:10:04,750 --> 00:10:11,920
anything because well the experience was

00:10:10,000 --> 00:10:13,870
already there and then is Shabalin the

00:10:11,920 --> 00:10:16,480
author of quasi quotes and Scala flecked

00:10:13,870 --> 00:10:19,360
helped us out but yeah this is this is

00:10:16,480 --> 00:10:22,839
some cool stuff and why not use it if

00:10:19,360 --> 00:10:26,620
it's already there and battle-tested ok

00:10:22,839 --> 00:10:29,440
now when we have a good idea of Scala

00:10:26,620 --> 00:10:32,830
med of what Scala meta can do parse

00:10:29,440 --> 00:10:34,000
files with high fidelity and then I want

00:10:32,830 --> 00:10:36,070
you to take a look at the finest

00:10:34,000 --> 00:10:38,320
syntactic details why should you care

00:10:36,070 --> 00:10:41,350
about it so what what difference does it

00:10:38,320 --> 00:10:44,020
make well as a library itself Scala meta

00:10:41,350 --> 00:10:45,940
is useful only to you know a small

00:10:44,020 --> 00:10:48,760
minority of scholar program errs to to

00:10:45,940 --> 00:10:50,860
authors but to our community it's

00:10:48,760 --> 00:10:53,290
important because with Scala meta it's

00:10:50,860 --> 00:10:55,930
possible to write better tools so

00:10:53,290 --> 00:10:58,930
previously when our metaprogramming API

00:10:55,930 --> 00:11:00,820
eyes were not that sophisticated we

00:10:58,930 --> 00:11:03,520
could no we just could not do some stuff

00:11:00,820 --> 00:11:06,730
and with Scala met a lot of new avenues

00:11:03,520 --> 00:11:11,370
become possible and now let's see a few

00:11:06,730 --> 00:11:11,370
examples well the first example and

00:11:11,380 --> 00:11:16,010
the family of tools that's most familiar

00:11:13,940 --> 00:11:17,180
to me personally is macros this is

00:11:16,010 --> 00:11:19,070
something that they promise to cover

00:11:17,180 --> 00:11:22,100
from the beginning of the presentation

00:11:19,070 --> 00:11:23,930
well and as you all know macros they

00:11:22,100 --> 00:11:26,900
they are dropped from Scala right now

00:11:23,930 --> 00:11:29,780
we've heard all that during the keynote

00:11:26,900 --> 00:11:33,010
the day before yesterday and well

00:11:29,780 --> 00:11:35,060
they're dropped for a really good reason

00:11:33,010 --> 00:11:38,720
there's a bunch of stuff I can talk

00:11:35,060 --> 00:11:41,200
about this for hours essentially but if

00:11:38,720 --> 00:11:44,540
we distill this to really key points

00:11:41,200 --> 00:11:46,940
current macros they're hard to write a

00:11:44,540 --> 00:11:50,210
lot of boilerplate on the API well it's

00:11:46,940 --> 00:11:52,580
not for the faint-hearted and finally to

00:11:50,210 --> 00:11:54,800
support it kind of likes behind so I

00:11:52,580 --> 00:11:58,100
mean I shouldn't probably use the word

00:11:54,800 --> 00:12:00,680
legs behind because macros are out there

00:11:58,100 --> 00:12:03,080
for almost five years but well that's

00:12:00,680 --> 00:12:06,410
the unfortunate reality let's just take

00:12:03,080 --> 00:12:10,010
a quick example for those who not quite

00:12:06,410 --> 00:12:12,560
sure what they have in mind well let's

00:12:10,010 --> 00:12:14,750
write a very very simple macro that

00:12:12,560 --> 00:12:17,630
replaces another feature that will be

00:12:14,750 --> 00:12:19,940
dropped in future versions of Scala so

00:12:17,630 --> 00:12:23,720
let's like write a macro that allows to

00:12:19,940 --> 00:12:26,300
transform a body of an object into

00:12:23,720 --> 00:12:29,210
essentially executable code that will be

00:12:26,300 --> 00:12:30,920
run by the JVM via the main method so

00:12:29,210 --> 00:12:32,810
this is a really trivial transformation

00:12:30,920 --> 00:12:35,180
we take whatever is inside these curly

00:12:32,810 --> 00:12:35,930
braces and put it into main so how hard

00:12:35,180 --> 00:12:38,510
could it be

00:12:35,930 --> 00:12:41,390
let's take a look well first of all we

00:12:38,510 --> 00:12:43,880
have to declare a macro notation so far

00:12:41,390 --> 00:12:46,160
but it looks more or less plausible this

00:12:43,880 --> 00:12:48,950
macro transform methods can then know

00:12:46,160 --> 00:12:51,380
and why does it take you know any well

00:12:48,950 --> 00:12:54,890
whatever let's just roll with it

00:12:51,380 --> 00:12:58,880
and then we get to writing macros well

00:12:54,890 --> 00:13:01,070
in their weird glory first we import

00:12:58,880 --> 00:13:03,740
this white box context then we import

00:13:01,070 --> 00:13:07,700
the universe we declare an illumination

00:13:03,740 --> 00:13:08,600
and finally in the last several lines we

00:13:07,700 --> 00:13:10,910
get to business

00:13:08,600 --> 00:13:12,740
so we deconstruct the object that has

00:13:10,910 --> 00:13:15,220
been passed to us so you can see this

00:13:12,740 --> 00:13:19,400
classic code cue object dollar name and

00:13:15,220 --> 00:13:21,590
then we extract the body of the of the

00:13:19,400 --> 00:13:24,020
code that was provided to us and wrap it

00:13:21,590 --> 00:13:26,360
in in the main thing

00:13:24,020 --> 00:13:28,250
so when I started writing this slide I

00:13:26,360 --> 00:13:31,130
was actually thinking that the end

00:13:28,250 --> 00:13:32,930
result would be much more scary so maybe

00:13:31,130 --> 00:13:35,839
it's not that good of an example but if

00:13:32,930 --> 00:13:37,730
we take a closer look then we will see

00:13:35,839 --> 00:13:39,560
that all the code that I marked with

00:13:37,730 --> 00:13:41,720
blue here it's actually pure boilerplate

00:13:39,560 --> 00:13:44,089
so why do we need to declare this macro

00:13:41,720 --> 00:13:46,339
transform and all those trees I mean

00:13:44,089 --> 00:13:48,170
what does this even mean how wonderful

00:13:46,339 --> 00:13:53,120
would it be if we could just you know I

00:13:48,170 --> 00:13:55,990
meet this blue code and again get to get

00:13:53,120 --> 00:13:59,180
to the point without ceremonies and

00:13:55,990 --> 00:14:01,040
another another bad point about the

00:13:59,180 --> 00:14:03,950
current implementation of macros is that

00:14:01,040 --> 00:14:06,560
they don't work with tools very well in

00:14:03,950 --> 00:14:09,800
particular if you make a typo for

00:14:06,560 --> 00:14:13,040
instance here if you call method main I

00:14:09,800 --> 00:14:15,260
don't know if you if you just miss some

00:14:13,040 --> 00:14:19,330
of the letters this typo it won't be

00:14:15,260 --> 00:14:21,770
detected by the IDE because typically

00:14:19,330 --> 00:14:24,589
IntelliJ IDE does not know anything

00:14:21,770 --> 00:14:26,630
about this macros and it needs some

00:14:24,589 --> 00:14:29,450
out-of-band support from the Scala

00:14:26,630 --> 00:14:34,010
compiler to to usefully report errors

00:14:29,450 --> 00:14:35,600
and also SBT is endangered as well if we

00:14:34,010 --> 00:14:38,450
change the implementation of the macro

00:14:35,600 --> 00:14:40,550
then usages of this macros they wouldn't

00:14:38,450 --> 00:14:42,079
be recompiled and incremental

00:14:40,550 --> 00:14:43,399
compilation is one of the cornerstones

00:14:42,079 --> 00:14:46,640
of smooth experience of Scala

00:14:43,399 --> 00:14:50,450
development so it's it's really bad that

00:14:46,640 --> 00:14:52,420
these things don't work well on the

00:14:50,450 --> 00:14:54,980
other hand if we look at the bright side

00:14:52,420 --> 00:14:57,649
macros have enabled a lot of unique

00:14:54,980 --> 00:14:59,839
idioms in the in Scala in our community

00:14:57,649 --> 00:15:01,550
and it turns out that these idioms

00:14:59,839 --> 00:15:03,620
they're so useful that a lot of

00:15:01,550 --> 00:15:05,570
libraries they just use them regardless

00:15:03,620 --> 00:15:08,240
of the problems with tools or how hard

00:15:05,570 --> 00:15:09,950
it is to write macros so you don't have

00:15:08,240 --> 00:15:12,440
to take my word for it

00:15:09,950 --> 00:15:13,940
if you could just go to the website of

00:15:12,440 --> 00:15:16,070
flight band and take a look at the

00:15:13,940 --> 00:15:18,410
reactive platform they're offering you

00:15:16,070 --> 00:15:20,810
will see that almost all libraries there

00:15:18,410 --> 00:15:24,110
they have either used the our api's or

00:15:20,810 --> 00:15:26,870
are planning to use so it's or have

00:15:24,110 --> 00:15:28,490
experimented with them so it's it's a

00:15:26,870 --> 00:15:31,459
fairly unique situation where we have an

00:15:28,490 --> 00:15:35,750
important technology that is not quite

00:15:31,459 --> 00:15:37,240
there so what do we do about that and we

00:15:35,750 --> 00:15:40,910
drop macros so

00:15:37,240 --> 00:15:43,430
what's going on well actually we've

00:15:40,910 --> 00:15:44,839
anticipated the situation and a couple

00:15:43,430 --> 00:15:46,699
years ago when the project was started

00:15:44,839 --> 00:15:48,980
we thought real hard what to do with it

00:15:46,699 --> 00:15:51,079
so macros actually were the main

00:15:48,980 --> 00:15:53,509
inspiration for Scala Mehta they were

00:15:51,079 --> 00:15:55,879
our answer to the question how do we do

00:15:53,509 --> 00:16:00,019
macros without well going crazy

00:15:55,879 --> 00:16:03,350
essentially and now since version 1.0 is

00:16:00,019 --> 00:16:07,910
finally here it's time to unveil our

00:16:03,350 --> 00:16:12,170
plans so macros are gone but macros also

00:16:07,910 --> 00:16:13,120
return and now we'll see exactly in what

00:16:12,170 --> 00:16:17,600
capacity

00:16:13,120 --> 00:16:19,850
well once we got into this reflection on

00:16:17,600 --> 00:16:21,800
what's good and bad about macros we

00:16:19,850 --> 00:16:23,660
actually figured out that macros can be

00:16:21,800 --> 00:16:26,689
further split into two different

00:16:23,660 --> 00:16:29,180
language features so one aspect of

00:16:26,689 --> 00:16:32,810
macros is that they do meta programming

00:16:29,180 --> 00:16:35,449
at compile time so this feature we

00:16:32,810 --> 00:16:38,089
called meta and well here goes the names

00:16:35,449 --> 00:16:40,129
kilometer right and another feature of

00:16:38,089 --> 00:16:43,310
macros is that they take some code and

00:16:40,129 --> 00:16:46,220
they inline it at the call side so first

00:16:43,310 --> 00:16:48,470
a meta program is run it computes some

00:16:46,220 --> 00:16:51,410
results some abstract syntax trees and

00:16:48,470 --> 00:16:53,810
then they get introduced into the rest

00:16:51,410 --> 00:16:57,259
of the program so here we have these two

00:16:53,810 --> 00:17:00,199
features that constitute the future of

00:16:57,259 --> 00:17:04,579
macros inline and meta so for details

00:17:00,199 --> 00:17:07,159
later on you could take a look at this

00:17:04,579 --> 00:17:09,890
we precip that we've submitted for a

00:17:07,159 --> 00:17:11,870
public discussion but now I will give a

00:17:09,890 --> 00:17:14,240
real real quick idea of what's going on

00:17:11,870 --> 00:17:16,520
so let's take a look at the same macro

00:17:14,240 --> 00:17:19,100
that we've seen before written using the

00:17:16,520 --> 00:17:22,309
API the the idioms that I was talking

00:17:19,100 --> 00:17:25,400
about so here we can see the same code

00:17:22,309 --> 00:17:27,890
as I promised before all the boilerplate

00:17:25,400 --> 00:17:30,470
that was just cut so nowhere to be found

00:17:27,890 --> 00:17:34,010
this separation between macro devs and

00:17:30,470 --> 00:17:37,010
macro impulse and here we have a simple

00:17:34,010 --> 00:17:40,970
method apply which is defined as an

00:17:37,010 --> 00:17:43,159
inline method on a static annotation so

00:17:40,970 --> 00:17:44,809
so far so good and then on the right

00:17:43,159 --> 00:17:50,860
hand side of this method we have the

00:17:44,809 --> 00:17:52,390
meta block so that's basically the diff

00:17:50,860 --> 00:17:54,760
in the old-style Macker and the new

00:17:52,390 --> 00:17:56,650
style macros so as you can see the

00:17:54,760 --> 00:18:01,210
rumors of the death of macros they were

00:17:56,650 --> 00:18:03,580
greatly exaggerated and now let's

00:18:01,210 --> 00:18:06,100
examine this mechanism a little bit

00:18:03,580 --> 00:18:07,750
closer so here we go here we have our

00:18:06,100 --> 00:18:10,059
object which is annotated with the main

00:18:07,750 --> 00:18:13,540
annotation so what happens next well

00:18:10,059 --> 00:18:15,580
first of all since the method apply of

00:18:13,540 --> 00:18:16,840
the notation is marked as in line we

00:18:15,580 --> 00:18:18,760
just take the right-hand side of the

00:18:16,840 --> 00:18:20,200
annotation so this this entire meta

00:18:18,760 --> 00:18:24,280
block with all the kawazu quotes and

00:18:20,200 --> 00:18:27,040
stuff and we just inline it so the the

00:18:24,280 --> 00:18:28,929
argument of course this is kind of

00:18:27,040 --> 00:18:32,350
pseudo notation because it no longer is

00:18:28,929 --> 00:18:34,870
quasi codes and stuff but it's more or

00:18:32,350 --> 00:18:38,790
less gives an idea of what happens here

00:18:34,870 --> 00:18:42,760
and finally after we have the meta block

00:18:38,790 --> 00:18:45,700
we perform the computation which expands

00:18:42,760 --> 00:18:47,650
into the desired result so as you can

00:18:45,700 --> 00:18:49,600
see it's nothing scary if you were

00:18:47,650 --> 00:18:52,660
already familiar with macros with Scala

00:18:49,600 --> 00:18:54,610
FLAC macros before if you have you know

00:18:52,660 --> 00:18:57,040
invested your time and learning how they

00:18:54,610 --> 00:19:00,100
work basic principles remain the same of

00:18:57,040 --> 00:19:03,480
course as I promised we're gonna change

00:19:00,100 --> 00:19:05,710
API and sometimes in a drastic manner

00:19:03,480 --> 00:19:07,570
but that's the price for a

00:19:05,710 --> 00:19:10,840
simplification and for making macros

00:19:07,570 --> 00:19:13,450
work well with other tools so later on

00:19:10,840 --> 00:19:15,190
we will publish our ideas of what

00:19:13,450 --> 00:19:17,470
exactly will have to be changed in

00:19:15,190 --> 00:19:21,010
macros to make them compatible with the

00:19:17,470 --> 00:19:25,210
brave new world but for now it's it's

00:19:21,010 --> 00:19:28,179
still unclear we will get to that and of

00:19:25,210 --> 00:19:33,309
course when I was talking about IDE

00:19:28,179 --> 00:19:35,530
support we really really recognized the

00:19:33,309 --> 00:19:38,890
problem that macros don't work well in

00:19:35,530 --> 00:19:41,200
IntelliJ and to that end almost from the

00:19:38,890 --> 00:19:43,450
very from the earliest days of macros

00:19:41,200 --> 00:19:44,440
we've been working together with the

00:19:43,450 --> 00:19:47,169
guys from JetBrains

00:19:44,440 --> 00:19:49,299
and some results so they're already

00:19:47,169 --> 00:19:52,299
available and they're interesting flags

00:19:49,299 --> 00:19:54,940
in production builds but Scala meta it

00:19:52,299 --> 00:19:58,510
provides a really principled foundation

00:19:54,940 --> 00:20:00,640
to make macro support work once and

00:19:58,510 --> 00:20:03,400
forever and now I would like to invite

00:20:00,640 --> 00:20:04,519
one of the developers of the Scala

00:20:03,400 --> 00:20:07,279
plugins him

00:20:04,519 --> 00:20:12,669
Mihal to join me and give you guys a

00:20:07,279 --> 00:20:12,669
look at the results of his work okay

00:20:26,709 --> 00:20:39,139
we're taking some risks here so there we

00:20:36,919 --> 00:20:41,859
are that's actually the macro which

00:20:39,139 --> 00:20:44,649
Eugene showed you in the previous slides

00:20:41,859 --> 00:20:47,269
as you can see everything is fairly

00:20:44,649 --> 00:20:55,809
looks normal no red code

00:20:47,269 --> 00:20:55,809
no unresolved symbols and whatnot what

00:20:55,899 --> 00:21:07,089
can we zoom in ctrl + I'm not really

00:21:04,129 --> 00:21:07,089
familiar with Macs

00:21:08,059 --> 00:21:31,039
all right sub pixel font size 2036 all

00:21:24,259 --> 00:21:33,619
right can you pop up back someone is

00:21:31,039 --> 00:21:46,279
requesting bigger someone else is saying

00:21:33,619 --> 00:21:51,109
smaller equally position mouse cursor

00:21:46,279 --> 00:21:55,269
it's fairly complicated you'll be fine

00:21:51,109 --> 00:22:04,820
now there's a checkbox which allows you

00:21:55,269 --> 00:22:12,909
to all right with a scroll cyclic

00:22:04,820 --> 00:22:15,710
scrolling no size keywords all right

00:22:12,909 --> 00:22:19,460
something is really off but I'm sure you

00:22:15,710 --> 00:22:23,509
can see at least something well that's

00:22:19,460 --> 00:22:29,479
not the main point to say is that Scala

00:22:23,509 --> 00:22:32,299
meta is not a blame for this thank you

00:22:29,479 --> 00:22:39,229
so what we actually want to do is to see

00:22:32,299 --> 00:22:41,299
how it performs within the editor there

00:22:39,229 --> 00:22:50,539
you go so we're going to write a simple

00:22:41,299 --> 00:23:00,619
object checked mine and put something

00:22:50,539 --> 00:23:03,080
inside mater there we go

00:23:00,619 --> 00:23:08,269
and after that we are going to add the

00:23:03,080 --> 00:23:11,570
given annotation name so as you can see

00:23:08,269 --> 00:23:15,200
it's being marked with a special button

00:23:11,570 --> 00:23:19,460
which says expand Scala meta macro when

00:23:15,200 --> 00:23:21,759
you press it it expands without into

00:23:19,460 --> 00:23:21,759
written

00:23:23,690 --> 00:23:35,310
so for example if I change something to

00:23:28,680 --> 00:23:40,320
something else I'm not very creative

00:23:35,310 --> 00:23:42,780
right now unfortunately and again

00:23:40,320 --> 00:23:46,470
without me to recompile it just changes

00:23:42,780 --> 00:23:48,180
everything on the fly in place so that's

00:23:46,470 --> 00:23:53,100
the quick look into the new features

00:23:48,180 --> 00:23:58,230
that are gonna be available soon now

00:23:53,100 --> 00:24:03,300
let's talk about what is gonna be next

00:23:58,230 --> 00:24:06,270
in general so how is it done firstly as

00:24:03,300 --> 00:24:07,680
you probably know the IntelliJ platform

00:24:06,270 --> 00:24:08,910
provides its own type checking

00:24:07,680 --> 00:24:12,050
facilities and name resolution

00:24:08,910 --> 00:24:17,120
facilities that arises some problems

00:24:12,050 --> 00:24:21,630
although that's the price for the fast

00:24:17,120 --> 00:24:24,090
highlighting and refactorings but that's

00:24:21,630 --> 00:24:28,710
not the deal the main thing is that we

00:24:24,090 --> 00:24:31,140
take our own syntax trees the PSI ones

00:24:28,710 --> 00:24:33,810
program structure interface we convert

00:24:31,140 --> 00:24:37,740
them into Scour meta format we resolve

00:24:33,810 --> 00:24:41,490
all the names and references calculate

00:24:37,740 --> 00:24:44,160
types and so on and then we feel the

00:24:41,490 --> 00:24:48,720
given three is converted once into the

00:24:44,160 --> 00:24:50,400
macro annotation itself so after that we

00:24:48,720 --> 00:24:52,920
are getting the converted trees back

00:24:50,400 --> 00:24:56,580
convert them to strings and insert them

00:24:52,920 --> 00:24:59,870
into the editor so that's the very basic

00:24:56,580 --> 00:25:06,570
explanation how the hell does it work

00:24:59,870 --> 00:25:09,230
alright so the next slide I think it's

00:25:06,570 --> 00:25:11,960
gonna be free Oh No

00:25:09,230 --> 00:25:13,790
I still have something mm-hmm but that's

00:25:11,960 --> 00:25:15,760
not the end obviously we're going to

00:25:13,790 --> 00:25:18,410
implement the live resolving of

00:25:15,760 --> 00:25:21,080
everything without need to expand

00:25:18,410 --> 00:25:24,110
actually things too you know when you

00:25:21,080 --> 00:25:27,620
need the code completion you just don't

00:25:24,110 --> 00:25:30,530
need to expand them anymore so the

00:25:27,620 --> 00:25:34,760
upcoming semantic API is also be will be

00:25:30,530 --> 00:25:37,309
supported and as the final the long-term

00:25:34,760 --> 00:25:40,040
results will be interpreting of the

00:25:37,309 --> 00:25:43,429
Scala meta programs which now require

00:25:40,040 --> 00:25:45,410
actually come to be compiled but the

00:25:43,429 --> 00:25:48,140
code that uses them should not be

00:25:45,410 --> 00:26:02,270
compiled and the next step is no

00:25:48,140 --> 00:26:04,190
compiling anything that's basically well

00:26:02,270 --> 00:26:06,350
as you've seen now there's quite a lot

00:26:04,190 --> 00:26:09,230
of exciting stuff that we hear that we

00:26:06,350 --> 00:26:11,750
have prepared for you and just to wrap

00:26:09,230 --> 00:26:14,000
up with macros and get to some other

00:26:11,750 --> 00:26:16,010
interesting things I would I would like

00:26:14,000 --> 00:26:17,540
to summarize what we heard today so

00:26:16,010 --> 00:26:19,820
first of all markers are not going

00:26:17,540 --> 00:26:22,669
anywhere they're they're just been

00:26:19,820 --> 00:26:25,520
replaced by a better system which is a

00:26:22,669 --> 00:26:28,429
based on Scala meta and the really cool

00:26:25,520 --> 00:26:31,460
features of new macros is that there is

00:26:28,429 --> 00:26:33,850
it to write as we've seen and it's

00:26:31,460 --> 00:26:37,010
possible it's finally possible to have

00:26:33,850 --> 00:26:39,440
fully functional IDE support for macros

00:26:37,010 --> 00:26:42,580
so what you've seen here is a prototype

00:26:39,440 --> 00:26:44,570
it's based on macro paradise version 3.0

00:26:42,580 --> 00:26:46,940
currently it's a milestone so which

00:26:44,570 --> 00:26:49,820
means that well it may or may not work

00:26:46,940 --> 00:26:52,070
but as I've seen works pretty stable and

00:26:49,820 --> 00:26:54,500
we didn't have to hard code anything

00:26:52,070 --> 00:26:56,870
it's it's really really honest

00:26:54,500 --> 00:27:00,650
implementation will be looking into it

00:26:56,870 --> 00:27:04,070
in the near future and let's get to

00:27:00,650 --> 00:27:07,580
other stuff well when I was talking

00:27:04,070 --> 00:27:09,470
about macros as the interchange format

00:27:07,580 --> 00:27:12,340
for meta programming in the Scala

00:27:09,470 --> 00:27:15,320
ecosystem what the vehicle in mind is

00:27:12,340 --> 00:27:16,850
the support for all possible

00:27:15,320 --> 00:27:18,590
environments so we've seen how macros

00:27:16,850 --> 00:27:21,470
are supported in the standard compiler

00:27:18,590 --> 00:27:22,730
so this macro paradise 3.0 it's actually

00:27:21,470 --> 00:27:24,710
a compiler plugin just

00:27:22,730 --> 00:27:26,780
like you know the usual paradise we've

00:27:24,710 --> 00:27:29,000
seen how it works in the intelligent

00:27:26,780 --> 00:27:32,840
environment so there's another case

00:27:29,000 --> 00:27:35,090
study here dasa linker you've probably

00:27:32,840 --> 00:27:37,400
heard of it yesterday during Dimitri's

00:27:35,090 --> 00:27:39,110
presentation it was quite an awesome one

00:27:37,400 --> 00:27:41,480
so I really recommend you to take a look

00:27:39,110 --> 00:27:45,650
at the benchmarks numbers look really

00:27:41,480 --> 00:27:47,690
cool but in a nutshell the Z linker is

00:27:45,650 --> 00:27:48,440
an experimental whole program optimizer

00:27:47,690 --> 00:27:51,290
for Scala

00:27:48,440 --> 00:27:55,400
so it's based off dot C but it works

00:27:51,290 --> 00:27:57,980
ones on scholar programs and it applies

00:27:55,400 --> 00:28:00,890
some really neat optimization techniques

00:27:57,980 --> 00:28:04,190
one of them is auto specialization so

00:28:00,890 --> 00:28:05,900
for details I refer you to the talk the

00:28:04,190 --> 00:28:07,850
dmitriy gave yesterday but the basic

00:28:05,900 --> 00:28:11,559
point is that you know you have to worry

00:28:07,850 --> 00:28:14,450
about boxing in most of the places and

00:28:11,559 --> 00:28:16,880
one of the recent additions that wasn't

00:28:14,450 --> 00:28:18,860
there before is rewrite rules so with

00:28:16,880 --> 00:28:22,070
the right rules it's possible to meta

00:28:18,860 --> 00:28:26,120
program does it's linker and to tell it

00:28:22,070 --> 00:28:29,210
that it needs to change certain patterns

00:28:26,120 --> 00:28:30,919
of code to other patterns of code and of

00:28:29,210 --> 00:28:34,669
course when there's meta programming

00:28:30,919 --> 00:28:36,790
there's also meta so we've really

00:28:34,669 --> 00:28:40,690
looking forward to integration of

00:28:36,790 --> 00:28:43,840
linkers rewrite rules with Scala meta

00:28:40,690 --> 00:28:47,210
metaprogramming API so as you see here

00:28:43,840 --> 00:28:50,419
we can take some existing class and so

00:28:47,210 --> 00:28:52,250
that uses some really slow coding idiom

00:28:50,419 --> 00:28:54,919
and then using does is Lincoln

00:28:52,250 --> 00:28:57,320
infrastructure we can explain how to

00:28:54,919 --> 00:28:59,210
rewrite it to be more optimal so this is

00:28:57,320 --> 00:29:01,280
this is a prototype this is early work

00:28:59,210 --> 00:29:04,010
but we're very much looking forward to

00:29:01,280 --> 00:29:07,820
the Future to the fruits that this

00:29:04,010 --> 00:29:12,049
collaboration bear all right now onto

00:29:07,820 --> 00:29:14,630
the next use case coda C so coda C is a

00:29:12,049 --> 00:29:16,580
Portuguese startup they're doing static

00:29:14,630 --> 00:29:19,400
code analysis they essentially have a

00:29:16,580 --> 00:29:22,610
web app that takes your github or

00:29:19,400 --> 00:29:26,240
bitbucket projects and then runs all

00:29:22,610 --> 00:29:28,100
sorts of you know style checks so one of

00:29:26,240 --> 00:29:31,850
the languages that is supported by

00:29:28,100 --> 00:29:33,620
codices Scala and well where there is a

00:29:31,850 --> 00:29:35,059
skull and metaprogramming probably using

00:29:33,620 --> 00:29:38,029
Scala matt is a good idea

00:29:35,059 --> 00:29:42,019
and now we will see how exactly this

00:29:38,029 --> 00:29:50,960
works in reality so let's go to their

00:29:42,019 --> 00:29:54,070
website I think I'll need to login just

00:29:50,960 --> 00:29:57,019
let's give it a moment so as you can see

00:29:54,070 --> 00:29:59,720
here we have a list of projects so this

00:29:57,019 --> 00:30:01,999
is meta it's it was really strange -

00:29:59,720 --> 00:30:03,950
Tony gets be is so I should have really

00:30:01,999 --> 00:30:06,559
hard coded some stuff to let it pass

00:30:03,950 --> 00:30:09,139
with an a but hey this is like we should

00:30:06,559 --> 00:30:12,730
work what's interesting to us here is

00:30:09,139 --> 00:30:17,570
the list of patterns that's implemented

00:30:12,730 --> 00:30:20,480
for Scala so here in my profile I can

00:30:17,570 --> 00:30:22,369
check out the patterns that are provided

00:30:20,480 --> 00:30:24,950
by default and then take a look at them

00:30:22,369 --> 00:30:26,869
so as I promised there's a bunch of

00:30:24,950 --> 00:30:29,059
languages and one of them is Scala

00:30:26,869 --> 00:30:32,509
so let's take a look at the particular

00:30:29,059 --> 00:30:35,029
pattern you discover madam so here we

00:30:32,509 --> 00:30:37,490
can see what what it does so some teams

00:30:35,029 --> 00:30:39,860
they may really prefer to convert this

00:30:37,490 --> 00:30:41,869
you know big if Celsius and so on so

00:30:39,860 --> 00:30:45,129
forth into pattern mesh sometimes it

00:30:41,869 --> 00:30:48,730
really looks looks good

00:30:45,129 --> 00:30:50,869
and now let's encode this check and

00:30:48,730 --> 00:30:54,230
essentially implement this small

00:30:50,869 --> 00:30:57,649
analysis with Scala madam if we do fork

00:30:54,230 --> 00:30:59,450
pattern in this interface we will see a

00:30:57,649 --> 00:31:02,179
really neat web editor so I hope

00:30:59,450 --> 00:31:05,330
everyone can see this on the right hand

00:31:02,179 --> 00:31:07,970
side we have the text of the pattern so

00:31:05,330 --> 00:31:10,700
as you can see here we import Scala meta

00:31:07,970 --> 00:31:13,399
on this line and here we extend the

00:31:10,700 --> 00:31:15,950
provided interface to implement the

00:31:13,399 --> 00:31:18,230
logic so this pattern itself is very

00:31:15,950 --> 00:31:21,049
simple we just use a quasi code which

00:31:18,230 --> 00:31:22,720
says whenever we have an if else if and

00:31:21,049 --> 00:31:25,360
probably something's bad is going on and

00:31:22,720 --> 00:31:29,779
here is the message that we provide and

00:31:25,360 --> 00:31:33,259
on the left hand side we have the test

00:31:29,779 --> 00:31:35,929
code that we can use to run this pattern

00:31:33,259 --> 00:31:39,590
and see how it works so here on this

00:31:35,929 --> 00:31:42,769
code it will display several messages

00:31:39,590 --> 00:31:45,919
but something is not quite right now

00:31:42,769 --> 00:31:47,809
let's take a look at how it works

00:31:45,919 --> 00:31:48,679
and how exactly Scala mater helped code

00:31:47,809 --> 00:31:51,470
the city to deliver

00:31:48,679 --> 00:31:53,119
experience well first of all at the very

00:31:51,470 --> 00:31:56,090
early days when Scala meta wasn't

00:31:53,119 --> 00:31:58,369
available we didn't even have you know

00:31:56,090 --> 00:32:01,159
any milestone builds Cody she used to

00:31:58,369 --> 00:32:03,470
use scarf like two boxes so with the two

00:32:01,159 --> 00:32:06,740
boxes it's possible to use the compiler

00:32:03,470 --> 00:32:10,100
internal API and then parse code analyze

00:32:06,740 --> 00:32:13,999
it using the Scala sees internal

00:32:10,100 --> 00:32:15,590
representation for programs well as I

00:32:13,999 --> 00:32:18,379
mentioned before Scala materially

00:32:15,590 --> 00:32:22,009
improve on that by providing very very

00:32:18,379 --> 00:32:25,309
precise model of Scala code and of

00:32:22,009 --> 00:32:28,759
course it this capability it hasn't gone

00:32:25,309 --> 00:32:32,929
without being mentioned and at at some

00:32:28,759 --> 00:32:35,869
point my student much you what starts in

00:32:32,929 --> 00:32:38,389
a masterís tedious project so before

00:32:35,869 --> 00:32:41,019
doing the master thesis itself at EPFL

00:32:38,389 --> 00:32:43,820
you have to to take several projects

00:32:41,019 --> 00:32:46,369
together with some of the labs so much

00:32:43,820 --> 00:32:49,999
you choose us and he was very interested

00:32:46,369 --> 00:32:52,279
in code analysis so then after the half

00:32:49,999 --> 00:32:55,600
a year of collaboration with Johan from

00:32:52,279 --> 00:32:58,340
coda see they wrote this cool system and

00:32:55,600 --> 00:33:01,519
this I find pretty amazing that a

00:32:58,340 --> 00:33:05,110
student project can turn into this cool

00:33:01,519 --> 00:33:08,299
thing this cool editor where you can use

00:33:05,110 --> 00:33:10,700
that integrates some very very new

00:33:08,299 --> 00:33:11,539
upcoming technology with something

00:33:10,700 --> 00:33:13,789
practical

00:33:11,539 --> 00:33:17,840
so that's frankly what I find amazing

00:33:13,789 --> 00:33:19,610
about EPFL and just to get a little bit

00:33:17,840 --> 00:33:22,249
into the details of how this thing works

00:33:19,610 --> 00:33:24,230
as you've seen code patterns they use

00:33:22,249 --> 00:33:27,559
quasi codes and which provides a really

00:33:24,230 --> 00:33:29,690
intuitive way of creating and taking

00:33:27,559 --> 00:33:31,610
apart Scala code and at the moment

00:33:29,690 --> 00:33:33,669
there's a bunch of patterns you can see

00:33:31,610 --> 00:33:36,649
it's more than 80 patterns and

00:33:33,669 --> 00:33:39,110
additional stuff gets added every day so

00:33:36,649 --> 00:33:42,769
in the future again it's not just a

00:33:39,110 --> 00:33:45,529
static project i-i've just been in touch

00:33:42,769 --> 00:33:48,139
today with the guys from coda C and they

00:33:45,529 --> 00:33:50,389
told me that their plans are to work on

00:33:48,139 --> 00:33:55,970
security on patterns like check security

00:33:50,389 --> 00:33:57,590
and also when our additional api's that

00:33:55,970 --> 00:33:59,899
provide name resolution and type

00:33:57,590 --> 00:34:00,940
checking are available they will also be

00:33:59,899 --> 00:34:04,630
able to use

00:34:00,940 --> 00:34:07,210
to have more precise rules and finally

00:34:04,630 --> 00:34:09,370
yesterday I got this really cool news

00:34:07,210 --> 00:34:10,840
that all those patterns even though it's

00:34:09,370 --> 00:34:14,710
a proprietary system all those patterns

00:34:10,840 --> 00:34:16,660
they were open sourced so as far as I

00:34:14,710 --> 00:34:20,050
understand it we play a plan to maintain

00:34:16,660 --> 00:34:22,360
it and I put some of the new stuff there

00:34:20,050 --> 00:34:26,320
on the repo and I found it pretty

00:34:22,360 --> 00:34:31,270
amazing that our collaboration resulted

00:34:26,320 --> 00:34:33,370
in some open source stuff so now just in

00:34:31,270 --> 00:34:35,380
the spirit of open source and since

00:34:33,370 --> 00:34:40,090
right now we just released scala mehta

00:34:35,380 --> 00:34:43,680
1.0 let's come to the build of this

00:34:40,090 --> 00:35:01,810
project and let them know what happened

00:34:43,680 --> 00:35:04,270
alright so if we take a look well I

00:35:01,810 --> 00:35:11,050
guess snapshot is their version it's not

00:35:04,270 --> 00:35:13,140
me cheat a little bit and see what

00:35:11,050 --> 00:35:19,420
actually I'm supposed to modify uh-huh

00:35:13,140 --> 00:35:24,130
it's the core bill ok so here we go so

00:35:19,420 --> 00:35:32,370
here's the scala metal version 0:23 now

00:35:24,130 --> 00:35:32,370
it's outdated so just change hello guys

00:35:38,510 --> 00:35:42,440
all right so let's submit the spool

00:35:41,430 --> 00:35:46,130
request immediately

00:35:42,440 --> 00:35:46,130
yay for open source

00:35:52,770 --> 00:35:58,600
okay our final case study is going to be

00:35:56,350 --> 00:36:00,400
a very very new tool that has just

00:35:58,600 --> 00:36:02,520
appeared in the recent months

00:36:00,400 --> 00:36:05,680
it's called Scala from T and it does

00:36:02,520 --> 00:36:07,300
automatic code for machine but well I'll

00:36:05,680 --> 00:36:10,240
stop talking about it because the author

00:36:07,300 --> 00:36:18,910
is here and he kindly agreed to present

00:36:10,240 --> 00:36:20,620
it today let's take a look hello

00:36:18,910 --> 00:36:23,860
everybody thank you Jim for bringing me

00:36:20,620 --> 00:36:25,450
up here and talk about Scala frontier so

00:36:23,860 --> 00:36:28,690
Scala Vinci is a new code formatter for

00:36:25,450 --> 00:36:32,050
Scala and I really wanted to work on

00:36:28,690 --> 00:36:33,430
Scarlet Mt because I think we just have

00:36:32,050 --> 00:36:36,970
so much better things to do than talk

00:36:33,430 --> 00:36:39,940
about formatting this is Sebastian

00:36:36,970 --> 00:36:42,160
maintaining Scala yes compiler and

00:36:39,940 --> 00:36:46,510
commenting that one of the contributors

00:36:42,160 --> 00:36:49,510
added two spaces in his patch but there

00:36:46,510 --> 00:36:51,850
should only be one space so and I think

00:36:49,510 --> 00:36:53,890
really we've seen in this conference

00:36:51,850 --> 00:36:55,630
everyone are talking about distributing

00:36:53,890 --> 00:36:57,880
their applications getting better

00:36:55,630 --> 00:37:00,160
performance using type classes better

00:36:57,880 --> 00:37:02,650
design patterns and we really want to be

00:37:00,160 --> 00:37:05,590
focused on we really want to be focusing

00:37:02,650 --> 00:37:08,170
on these things instead of whitespace

00:37:05,590 --> 00:37:11,200
code formatting so so I thought that

00:37:08,170 --> 00:37:14,410
well my personal motivation was to try

00:37:11,200 --> 00:37:17,110
to make this and I really like this

00:37:14,410 --> 00:37:20,440
tweet from Victor clang from ripened

00:37:17,110 --> 00:37:22,990
because this is it should really be

00:37:20,440 --> 00:37:25,300
automated and it is possible so the code

00:37:22,990 --> 00:37:28,180
says code Styles should be enforced but

00:37:25,300 --> 00:37:31,060
should not be enforced by review but by

00:37:28,180 --> 00:37:33,370
automate rewriting evolve this style

00:37:31,060 --> 00:37:35,350
using peers against the rewriting config

00:37:33,370 --> 00:37:39,480
so I'm hoping that will be scale of

00:37:35,350 --> 00:37:42,480
empty so I want to quickly show you a

00:37:39,480 --> 00:37:42,480
demo

00:37:43,890 --> 00:37:49,780
yeah it's hard everyone has their own

00:37:46,300 --> 00:37:55,860
configurations and oh but I think it's

00:37:49,780 --> 00:37:55,860
gonna work yeah larger font size

00:37:59,710 --> 00:38:03,310
IntelliJ should have this feature

00:38:14,019 --> 00:38:19,249
so here I have set up an integration

00:38:18,109 --> 00:38:22,639
with them there is also an intelligent

00:38:19,249 --> 00:38:24,469
plug-in and SBT plugin and this is just

00:38:22,639 --> 00:38:27,889
an example I made myself a classic DB

00:38:24,469 --> 00:38:29,479
object and I usually try to fit my code

00:38:27,889 --> 00:38:31,639
in 80 characters people have different

00:38:29,479 --> 00:38:34,849
preferences but I usually use a split

00:38:31,639 --> 00:38:39,829
screen and in SBT on the other side so

00:38:34,849 --> 00:38:44,479
so I like to format it so that it fits

00:38:39,829 --> 00:38:46,429
in on the line and then I just I pulled

00:38:44,479 --> 00:38:49,399
a few examples from code on line this

00:38:46,429 --> 00:38:50,809
one was taken from akka and and I

00:38:49,399 --> 00:38:52,239
noticed that there were lots of long

00:38:50,809 --> 00:38:56,989
lines that couldn't fit on my

00:38:52,239 --> 00:39:00,019
presentation slides so I I run them like

00:38:56,989 --> 00:39:01,699
this and I don't know it's up to you

00:39:00,019 --> 00:39:03,109
what you which you prefer but I

00:39:01,699 --> 00:39:08,959
personally think that this looks quite

00:39:03,109 --> 00:39:11,389
nice and this one I pulled out of Scala

00:39:08,959 --> 00:39:16,189
said I think it was like 150 characters

00:39:11,389 --> 00:39:18,649
long on one line so there we go great

00:39:16,189 --> 00:39:21,259
and it still fits in in the character

00:39:18,649 --> 00:39:23,839
limit so like I said you can install it

00:39:21,259 --> 00:39:31,039
in IntelliJ and also there's an in an

00:39:23,839 --> 00:39:32,689
SPT plugin can you okay every time I

00:39:31,039 --> 00:39:37,909
touch his keyboard edge in just the

00:39:32,689 --> 00:39:39,709
keyboard to Russian so you can visit the

00:39:37,909 --> 00:39:44,349
the page for more information on how to

00:39:39,709 --> 00:39:46,159
use it I'm gonna quickly show how so

00:39:44,349 --> 00:39:48,799
behind-the-scenes Calif MT is

00:39:46,159 --> 00:39:50,389
implemented with Scala meta and uses the

00:39:48,799 --> 00:39:53,299
examples that we were seeing earlier for

00:39:50,389 --> 00:39:56,779
parsing trees and and tokens so I'm

00:39:53,299 --> 00:39:58,249
gonna quickly show really what what the

00:39:56,779 --> 00:40:00,259
ideas are driving the implementation of

00:39:58,249 --> 00:40:02,089
Scala is empty so let's say that we have

00:40:00,259 --> 00:40:03,799
this this class here but we have some

00:40:02,089 --> 00:40:05,809
pathological like tiny character column

00:40:03,799 --> 00:40:09,769
limit so we don't really know where it

00:40:05,809 --> 00:40:12,679
fits and what what the way scale of

00:40:09,769 --> 00:40:15,799
empty looks at this code really is from

00:40:12,679 --> 00:40:18,229
the token level and when scala meta

00:40:15,799 --> 00:40:20,899
makes it really really easy to tokenize

00:40:18,229 --> 00:40:22,579
and what you have is is a long sequence

00:40:20,899 --> 00:40:25,730
of token

00:40:22,579 --> 00:40:27,289
and what you will observe is that that

00:40:25,730 --> 00:40:29,390
basically the the role of the code

00:40:27,289 --> 00:40:31,730
formatter is to insert whitespace

00:40:29,390 --> 00:40:33,859
between like the class and the point and

00:40:31,730 --> 00:40:36,589
the point and opening Fran

00:40:33,859 --> 00:40:40,250
this is etc and these can get really

00:40:36,589 --> 00:40:42,230
long so but but it's generally just it

00:40:40,250 --> 00:40:44,029
really treats it just like this and then

00:40:42,230 --> 00:40:46,279
it inserts anywhere and and it will not

00:40:44,029 --> 00:40:48,109
rearrange anything and it really tries

00:40:46,279 --> 00:40:52,279
to preserve the ast or it does precisely

00:40:48,109 --> 00:40:54,740
SD so and then it performs a search to

00:40:52,279 --> 00:40:58,309
decide which layout is the best and and

00:40:54,740 --> 00:41:00,650
in the end you'll have have labels some

00:40:58,309 --> 00:41:02,150
of these edges with with the new lines

00:41:00,650 --> 00:41:04,880
and some of them will be lave and we

00:41:02,150 --> 00:41:06,470
label with spaces and you'll have some

00:41:04,880 --> 00:41:09,470
layers like this that then can easily be

00:41:06,470 --> 00:41:12,950
constructed back into a string and and

00:41:09,470 --> 00:41:14,750
so I'm part of my master's thesis and I

00:41:12,950 --> 00:41:16,069
managed to with Scala method to get this

00:41:14,750 --> 00:41:18,440
up and running and have a proof of a

00:41:16,069 --> 00:41:20,990
concept in just like one or two weeks

00:41:18,440 --> 00:41:22,849
and we've been really working now for a

00:41:20,990 --> 00:41:25,460
long time just on the long tail problems

00:41:22,849 --> 00:41:28,970
of trying to format basically everything

00:41:25,460 --> 00:41:31,190
we can find online so I think without

00:41:28,970 --> 00:41:34,220
Kalamata it would have been impossible

00:41:31,190 --> 00:41:37,160
to really make this happen so fast so

00:41:34,220 --> 00:41:44,390
that's really cool I think oh yeah oh

00:41:37,160 --> 00:41:45,740
sorry I forgot just the future plans we

00:41:44,390 --> 00:41:47,750
currently support there's one default

00:41:45,740 --> 00:41:49,789
style and then there's a s ecology a

00:41:47,750 --> 00:41:50,349
style that's in in progress working

00:41:49,789 --> 00:41:52,760
progress

00:41:50,349 --> 00:41:55,910
Sebastian already merged one day force

00:41:52,760 --> 00:41:58,819
ecology as Dom using that style so it's

00:41:55,910 --> 00:42:00,950
it's come quite far already but but it

00:41:58,819 --> 00:42:05,329
would be really cool to support out of

00:42:00,950 --> 00:42:06,829
box styles for for I don't know no one

00:42:05,329 --> 00:42:08,299
has approached me yet but feel free to

00:42:06,829 --> 00:42:10,819
approach me if you're interested they've

00:42:08,299 --> 00:42:12,529
type level style or or a spark style or

00:42:10,819 --> 00:42:15,319
a light pen style or or your

00:42:12,529 --> 00:42:18,380
organization I think that would be

00:42:15,319 --> 00:42:20,089
really great for people to to just come

00:42:18,380 --> 00:42:21,770
in say we want to use this light because

00:42:20,089 --> 00:42:24,559
it looks great and then focus on design

00:42:21,770 --> 00:42:27,130
and then another one which i think is

00:42:24,559 --> 00:42:29,900
really would be great is if you could

00:42:27,130 --> 00:42:32,630
format only a diff so you could just

00:42:29,900 --> 00:42:35,279
jump into a a project that's not even

00:42:32,630 --> 00:42:38,390
using Scala simply start hacking adding

00:42:35,279 --> 00:42:40,679
you may be submitting a pull request and

00:42:38,390 --> 00:42:41,789
you can skeleton people just format

00:42:40,679 --> 00:42:43,919
whatever you edit it and leave

00:42:41,789 --> 00:42:46,349
everything else behind I think this

00:42:43,919 --> 00:42:49,049
would be a great way to introduce Calif

00:42:46,349 --> 00:42:51,630
MT in your organization and then we're

00:42:49,049 --> 00:42:54,119
also working on performance so at the

00:42:51,630 --> 00:42:56,400
moment it can still do quite well for

00:42:54,119 --> 00:42:59,640
for most normal sized files but if you

00:42:56,400 --> 00:43:04,109
have five thousand lines in your code it

00:42:59,640 --> 00:43:09,799
might take a bit longer than we want

00:43:04,109 --> 00:43:09,799
so I think that was on thank you

00:43:14,690 --> 00:43:20,759
all right so after this quick tour of

00:43:17,549 --> 00:43:23,150
the cool new tools that can be built on

00:43:20,759 --> 00:43:26,279
top of Scala meta knew macros

00:43:23,150 --> 00:43:28,890
integration with the dotty linker called

00:43:26,279 --> 00:43:30,660
the C and finally Scala from Team let's

00:43:28,890 --> 00:43:32,849
see what's gonna happen next so we've

00:43:30,660 --> 00:43:34,460
seen the future we've seen the present

00:43:32,849 --> 00:43:37,289
and now we'll see the future

00:43:34,460 --> 00:43:39,180
all right so this part of the talk is

00:43:37,289 --> 00:43:40,619
going to be a little bit personal and I

00:43:39,180 --> 00:43:44,190
was kinda surprised that this necessary

00:43:40,619 --> 00:43:46,079
but anyway I think it is well some of

00:43:44,190 --> 00:43:48,329
you may know that I'm a PhD student at

00:43:46,079 --> 00:43:48,869
EPFL and I've been there for almost five

00:43:48,329 --> 00:43:51,289
years

00:43:48,869 --> 00:43:54,839
so macros and meta they're essentially

00:43:51,289 --> 00:43:58,170
my dissertation which I've just started

00:43:54,839 --> 00:44:01,140
writing this this has been fun too so

00:43:58,170 --> 00:44:03,000
it's it's been quite cool to spend time

00:44:01,140 --> 00:44:05,460
at the PFL but it's time to wrap up

00:44:03,000 --> 00:44:08,720
otherwise I just get kicked out by the

00:44:05,460 --> 00:44:11,519
Swiss government that's not nice and

00:44:08,720 --> 00:44:13,289
well the natural question is so what

00:44:11,519 --> 00:44:15,599
happens after I graduate probably I'll

00:44:13,289 --> 00:44:20,480
go to industry and then abandon all that

00:44:15,599 --> 00:44:20,480
and then well no just die

00:44:22,050 --> 00:44:28,030
well now don't applause just yet because

00:44:25,230 --> 00:44:30,340
yeah that's an exaggeration of course

00:44:28,030 --> 00:44:34,180
this all has been so important to me for

00:44:30,340 --> 00:44:37,360
quite a long time that when looking for

00:44:34,180 --> 00:44:40,960
my future job I specifically wanted to

00:44:37,360 --> 00:44:44,290
continue working on meta and other open

00:44:40,960 --> 00:44:45,850
source projects and so among the offers

00:44:44,290 --> 00:44:50,190
that they had I chose to join Twitter

00:44:45,850 --> 00:44:52,840
this fall and well it was a quite a ride

00:44:50,190 --> 00:44:54,100
spending all this time doing interviews

00:44:52,840 --> 00:44:56,620
and chatting with the guys and seeing

00:44:54,100 --> 00:45:00,520
how they actually could use the Scala

00:44:56,620 --> 00:45:03,160
meta for their production quite amazing

00:45:00,520 --> 00:45:05,500
the facts what I've learned and what I'm

00:45:03,160 --> 00:45:06,970
telling you all that is that according

00:45:05,500 --> 00:45:09,160
to our arrangement with Twitter that's

00:45:06,970 --> 00:45:11,050
really super generous of them and that's

00:45:09,160 --> 00:45:13,660
why I'm so excited about joining them

00:45:11,050 --> 00:45:14,530
this fall half of the time I'll be just

00:45:13,660 --> 00:45:18,400
doing whatever I want

00:45:14,530 --> 00:45:20,050
which means this stuff that I've just

00:45:18,400 --> 00:45:22,360
shown so it's not going to die it's

00:45:20,050 --> 00:45:25,000
still going to continue and then the

00:45:22,360 --> 00:45:27,370
rest of the time we will be making Scala

00:45:25,000 --> 00:45:28,630
tooling a Twitter better also really

00:45:27,370 --> 00:45:32,250
looking forward to that because they

00:45:28,630 --> 00:45:34,600
have a lot of code and projects at scale

00:45:32,250 --> 00:45:37,240
they present unique challenges so

00:45:34,600 --> 00:45:39,100
that'll be fun

00:45:37,240 --> 00:45:42,160
speaking of Scala Matt I guess unless

00:45:39,100 --> 00:45:44,050
personal after while reassuring you that

00:45:42,160 --> 00:45:45,640
this thing is not going to die and this

00:45:44,050 --> 00:45:48,550
is not just you know the future works at

00:45:45,640 --> 00:45:50,380
a section in an academic paper the stuff

00:45:48,550 --> 00:45:54,100
that nan had time to do and no one will

00:45:50,380 --> 00:45:56,290
so actually what we do plan to do is the

00:45:54,100 --> 00:45:58,240
big next step is the semantic API so

00:45:56,290 --> 00:45:59,290
with Scala meta it will be possible to

00:45:58,240 --> 00:46:01,030
the type check in name resolution

00:45:59,290 --> 00:46:03,520
whatever we expect of the meta

00:46:01,030 --> 00:46:05,620
programming framework so essentially we

00:46:03,520 --> 00:46:08,530
plan to achieve Fisher parity with Scala

00:46:05,620 --> 00:46:10,810
reflects to make Scala meta to

00:46:08,530 --> 00:46:12,850
reasonable stuff of course calling into

00:46:10,810 --> 00:46:14,830
compiler internals cast into scotto's in

00:46:12,850 --> 00:46:17,220
a sea global this is out of the question

00:46:14,830 --> 00:46:20,560
no more no more that was a mistake and

00:46:17,220 --> 00:46:23,530
then after we have the semantic API in

00:46:20,560 --> 00:46:25,510
place we'll be able to roll the full

00:46:23,530 --> 00:46:28,900
official new style macros that are based

00:46:25,510 --> 00:46:30,610
on in line and meta blocks also since I

00:46:28,900 --> 00:46:31,780
mentioned that being platform

00:46:30,610 --> 00:46:34,250
independent as one of the essential

00:46:31,780 --> 00:46:36,470
goals we do plan to support

00:46:34,250 --> 00:46:38,900
other execution environments at the

00:46:36,470 --> 00:46:41,960
moment we run into 11 not just to 11 a

00:46:38,900 --> 00:46:43,970
just all kinds of to 11 but later on we

00:46:41,960 --> 00:46:45,860
want to explore other revenues this is

00:46:43,970 --> 00:46:49,640
pretty mandatory one interesting idea

00:46:45,860 --> 00:46:52,820
was to do a Scala GS port and while

00:46:49,640 --> 00:46:54,860
there's work ongoing about that so you

00:46:52,820 --> 00:46:57,230
can join our heater and see how it goes

00:46:54,860 --> 00:47:00,140
maybe help us out so this is very

00:46:57,230 --> 00:47:02,450
exciting to me personally well finally

00:47:00,140 --> 00:47:05,270
let's just summarize what we have heard

00:47:02,450 --> 00:47:07,490
today and what I think is worth looking

00:47:05,270 --> 00:47:09,830
forward to in the future well first of

00:47:07,490 --> 00:47:12,560
all I said that a few times already but

00:47:09,830 --> 00:47:15,260
macros are not going away we'll be

00:47:12,560 --> 00:47:17,120
making them better but the main idea of

00:47:15,260 --> 00:47:20,030
compile time function like the execution

00:47:17,120 --> 00:47:21,770
is gonna remain there I'm graduating

00:47:20,030 --> 00:47:24,040
soon real soon I have the defense and

00:47:21,770 --> 00:47:27,380
three and a half months but later on

00:47:24,040 --> 00:47:29,060
this whole show will continue and I'm

00:47:27,380 --> 00:47:31,640
still gonna be leading the effort so

00:47:29,060 --> 00:47:33,980
nothing changes essentially finally

00:47:31,640 --> 00:47:36,950
speaking of Scala madam as we've seen

00:47:33,980 --> 00:47:40,280
the project is officially endorsed the

00:47:36,950 --> 00:47:42,020
project is funded and we've just

00:47:40,280 --> 00:47:44,720
released the our first a really stable

00:47:42,020 --> 00:47:46,790
version there's already folks at the

00:47:44,720 --> 00:47:49,520
jetbrains called the C and well all of

00:47:46,790 --> 00:47:51,740
now with Scala from T which are building

00:47:49,520 --> 00:47:55,190
cool stuff with Scala meta thanks to its

00:47:51,740 --> 00:47:58,280
unique features and well we're looking

00:47:55,190 --> 00:47:59,000
forward to welcoming more guys into our

00:47:58,280 --> 00:48:03,520
community

00:47:59,000 --> 00:48:03,520
join us and thanks for attention

00:48:08,049 --> 00:48:10,109

YouTube URL: https://www.youtube.com/watch?v=IPnd_SZJ1nM


