Title: Using Actors for the Internet of (Lego) Trains by Johan Janssen & Mark van Cuijk
Publication date: 2017-01-19
Playlist: Scala Days 2016
Description: 
	This video was recorded at Scala Days Berlin 2016
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

Anstract:
Normally, we use Java or Scala to build applications for large organizations running on servers. We wanted to find out if we could use the same languages and tools on IoT hardware. We also wanted to investigate whether or not (remote) actors could replace REST endpoints. The Lego trains are equipped with a Raspberry Pi, camera, wireless dongle, infrared transmitter, speaker, RFID reader, and battery pack. Next to that, we have automated switch tracks a Lego Ferris Wheel and camera's again with the help of Raspberry Pi's. We also built some lightning effects with LEDs controlled by Particle Photonâ€™s. To control the trains and other parts, we built a remote actor based application with Scala, Akka, Akka HTTP and AngularJS. We will show you when and how to use Akka HTTP and remote actors. We will also show the results of the performance tests we did to compare the two options. Next to that we will talk about our experiences and challenges and of course we will give a live demo!
Captions: 
	00:00:02,300 --> 00:00:06,540
my name is your announcer you can reach

00:00:04,859 --> 00:00:08,069
me by Twitter if you want so if you have

00:00:06,540 --> 00:00:09,809
any questions later you can also tweet

00:00:08,069 --> 00:00:11,460
them my colleague Mark and Ike will

00:00:09,809 --> 00:00:12,990
later present the part of the session as

00:00:11,460 --> 00:00:17,039
well but you will see him in a few

00:00:12,990 --> 00:00:18,929
minutes so to get its rate I

00:00:17,039 --> 00:00:21,509
unfortunately don't work for Lego I

00:00:18,929 --> 00:00:24,869
often get the question but I was luckily

00:00:21,509 --> 00:00:26,550
enough that my manager gave me some time

00:00:24,869 --> 00:00:31,710
to work on Lego trains during working

00:00:26,550 --> 00:00:34,050
hours so that's not bad either so yeah

00:00:31,710 --> 00:00:35,850
if you liked the session please rate it

00:00:34,050 --> 00:00:40,830
if you don't like it complain to your

00:00:35,850 --> 00:00:42,420
neighbor it's quite easy some

00:00:40,830 --> 00:00:45,810
disclaimers you always need a disclaimer

00:00:42,420 --> 00:00:47,400
so no Lego was harmed although for

00:00:45,810 --> 00:00:50,790
instance wall-e which you see over there

00:00:47,400 --> 00:00:52,950
was severely damaged after going on

00:00:50,790 --> 00:00:54,780
flight trips across the Atlantic but

00:00:52,950 --> 00:00:57,780
luckily you can assemble Lego again

00:00:54,780 --> 00:01:00,480
unfortunately some raspberry PI's didn't

00:00:57,780 --> 00:01:01,920
survive it they burn down and/or get

00:01:00,480 --> 00:01:05,519
crashed otherwise but I will explain

00:01:01,920 --> 00:01:07,080
that later so a bit of the content what

00:01:05,519 --> 00:01:10,320
we are going to discuss in more or less

00:01:07,080 --> 00:01:12,000
the next 50 minutes if you have any

00:01:10,320 --> 00:01:14,159
questions feel free to interrupt us

00:01:12,000 --> 00:01:15,690
immediately you don't have to wait until

00:01:14,159 --> 00:01:19,860
the end we will try and answer your

00:01:15,690 --> 00:01:22,229
questions immediately so that's easy but

00:01:19,860 --> 00:01:23,909
first of all why except of course for

00:01:22,229 --> 00:01:27,210
having lots of fun and playing around

00:01:23,909 --> 00:01:30,479
with Lego as a company we also noticed

00:01:27,210 --> 00:01:32,670
that is a big person nowadays companies

00:01:30,479 --> 00:01:36,900
are investing a lot in it they're trying

00:01:32,670 --> 00:01:38,880
to build something in it but mostly

00:01:36,900 --> 00:01:40,680
still trying around and what we were

00:01:38,880 --> 00:01:42,750
wondering was what we could use the same

00:01:40,680 --> 00:01:44,970
tools and languages that we currently

00:01:42,750 --> 00:01:47,790
use to build big enterprise applications

00:01:44,970 --> 00:01:50,610
for big servers with Java or Scala or

00:01:47,790 --> 00:01:52,170
whatever stuff we're using if we could

00:01:50,610 --> 00:01:55,650
run that same software on a Raspberry Pi

00:01:52,170 --> 00:01:58,020
or other IOT hardware because if that's

00:01:55,650 --> 00:02:00,900
possible than our employees we're now

00:01:58,020 --> 00:02:03,150
using Scala and Java could easily start

00:02:00,900 --> 00:02:05,010
working on IOT projects if they could

00:02:03,150 --> 00:02:07,140
use the same knowledge that they already

00:02:05,010 --> 00:02:09,689
have and not having to learn some C

00:02:07,140 --> 00:02:12,330
languages or other languages that are

00:02:09,689 --> 00:02:14,400
more familiar for IOT hardware in the

00:02:12,330 --> 00:02:16,560
past

00:02:14,400 --> 00:02:20,010
so that was one of the reasons and it's

00:02:16,560 --> 00:02:21,599
also I mean the the reason we started

00:02:20,010 --> 00:02:24,540
with Lego was also to make it more

00:02:21,599 --> 00:02:26,099
visually appealing and to make it a bit

00:02:24,540 --> 00:02:27,989
more fun of course if you learn a new

00:02:26,099 --> 00:02:30,090
language language or want to try out new

00:02:27,989 --> 00:02:32,760
stuff you can write hello world and

00:02:30,090 --> 00:02:34,560
maybe a few more lines of code but most

00:02:32,760 --> 00:02:36,090
of the times after that you start you

00:02:34,560 --> 00:02:37,470
stop coding with it because it's it's

00:02:36,090 --> 00:02:39,900
not really fun if you don't have

00:02:37,470 --> 00:02:42,180
something visual or something to work

00:02:39,900 --> 00:02:43,440
towards and with Lego it's it's

00:02:42,180 --> 00:02:45,959
something nice which you can easily

00:02:43,440 --> 00:02:48,329
extend and it makes fun for others as

00:02:45,959 --> 00:02:51,450
well I mean my kids like to watch it and

00:02:48,329 --> 00:02:53,340
apparently you like it as well and the

00:02:51,450 --> 00:02:55,079
fun thing is if you use stuff like this

00:02:53,340 --> 00:02:57,480
it's also easier to explain certain

00:02:55,079 --> 00:02:58,950
concepts and for instance if I talk to

00:02:57,480 --> 00:03:00,989
my wife and I say yeah we do

00:02:58,950 --> 00:03:03,349
event-driven architecture and a message

00:03:00,989 --> 00:03:05,220
mm is sent from system X to system Y

00:03:03,349 --> 00:03:08,069
probably she would have stopped

00:03:05,220 --> 00:03:09,840
listening at if I'm driven and that's

00:03:08,069 --> 00:03:11,370
not her fault I mean she doesn't have

00:03:09,840 --> 00:03:13,560
the technical background that we have

00:03:11,370 --> 00:03:17,579
and and we tend to speak in some alien

00:03:13,560 --> 00:03:19,139
dialect that nobody else understands but

00:03:17,579 --> 00:03:21,329
when I tell her okay I'm sending a

00:03:19,139 --> 00:03:23,700
message to the train so that the train

00:03:21,329 --> 00:03:24,930
will start playing a song then it's easy

00:03:23,700 --> 00:03:27,900
to understand for everybody and

00:03:24,930 --> 00:03:30,680
basically I explain the same concept so

00:03:27,900 --> 00:03:32,970
for those things it's also really easy

00:03:30,680 --> 00:03:34,139
one thing to keep in mind if you start

00:03:32,970 --> 00:03:36,030
playing with stuff like this

00:03:34,139 --> 00:03:39,629
you end up with your living room quite

00:03:36,030 --> 00:03:42,540
filled it's a some time and point I had

00:03:39,629 --> 00:03:44,129
that I think three of these setups at

00:03:42,540 --> 00:03:49,319
one time so then it was completely

00:03:44,129 --> 00:03:51,690
filled but still fun of course um so how

00:03:49,319 --> 00:03:53,250
you get started I mean I can talk about

00:03:51,690 --> 00:03:54,900
lots of cool stuff but maybe you also

00:03:53,250 --> 00:03:57,690
want to do this yourself at home and

00:03:54,900 --> 00:03:58,919
actually it's cool it's quite easy first

00:03:57,690 --> 00:04:01,859
let me ask you if you already have a

00:03:58,919 --> 00:04:03,239
Raspberry Pi and please keep your hand

00:04:01,859 --> 00:04:06,569
in the air if it's collecting dust

00:04:03,239 --> 00:04:09,780
somewhere okay so it's still quite a few

00:04:06,569 --> 00:04:11,840
so now you have a project to use it

00:04:09,780 --> 00:04:15,480
Raspberry Pi for that is collecting dust

00:04:11,840 --> 00:04:17,609
so here I say it's 50 bucks to build an

00:04:15,480 --> 00:04:20,010
first setup if you have a Raspberry Pi

00:04:17,609 --> 00:04:22,109
it's like 25 bucks so it's it's quite

00:04:20,010 --> 00:04:24,630
cheap to get started with you need a

00:04:22,109 --> 00:04:25,600
Wi-Fi dongle USB battery pack an

00:04:24,630 --> 00:04:27,670
infrared ransom

00:04:25,600 --> 00:04:29,800
where you're needed for I will explain

00:04:27,670 --> 00:04:31,840
in a moment but that's basically all the

00:04:29,800 --> 00:04:35,080
ingredients to get started and make a

00:04:31,840 --> 00:04:37,270
simple set up of course you can go a bit

00:04:35,080 --> 00:04:40,570
further here I've added the Raspberry Pi

00:04:37,270 --> 00:04:42,580
camera to it and there is an rfid reader

00:04:40,570 --> 00:04:45,040
at the bottom and there is a speaker

00:04:42,580 --> 00:04:50,500
because you need trained sons house it's

00:04:45,040 --> 00:04:52,120
not done a bit of about the background

00:04:50,500 --> 00:04:54,190
about the hardware that we we've chosen

00:04:52,120 --> 00:04:55,900
we also looked at for instance the out

00:04:54,190 --> 00:04:58,690
droid but we had something difficult to

00:04:55,900 --> 00:05:00,460
get that stable it kept on shutting down

00:04:58,690 --> 00:05:02,710
I believe because it was getting too

00:05:00,460 --> 00:05:06,310
warm and it needed more cooling elements

00:05:02,710 --> 00:05:08,230
and the problem with out droid and other

00:05:06,310 --> 00:05:10,480
hardware vendors nowadays that try to

00:05:08,230 --> 00:05:12,640
compete with Raspberry Pi is mainly that

00:05:10,480 --> 00:05:15,540
the community is a lot smaller and

00:05:12,640 --> 00:05:17,980
documentation and questions and answers

00:05:15,540 --> 00:05:21,070
there are not so many of them for other

00:05:17,980 --> 00:05:22,450
platforms for Raspberry Pi any problem

00:05:21,070 --> 00:05:24,550
you encounter you will find somebody

00:05:22,450 --> 00:05:26,320
with the same problem maybe you will

00:05:24,550 --> 00:05:27,940
even find the answer but at least you

00:05:26,320 --> 00:05:32,380
find somebody that has the same problem

00:05:27,940 --> 00:05:34,150
than you so you're not on your own so in

00:05:32,380 --> 00:05:38,020
the end I stuck to the Raspberry Pi and

00:05:34,150 --> 00:05:39,460
I started using Raspberry Pi A+ models

00:05:38,020 --> 00:05:42,010
because they're quite small and they

00:05:39,460 --> 00:05:43,420
don't consume lots of power and if you

00:05:42,010 --> 00:05:44,710
use a battery pack you want something

00:05:43,420 --> 00:05:46,510
that doesn't consume lots of power

00:05:44,710 --> 00:05:49,150
because else you cannot play with your

00:05:46,510 --> 00:05:51,700
Lego trains for a long time we're also

00:05:49,150 --> 00:05:53,800
working on recharging with induction so

00:05:51,700 --> 00:05:57,670
we can run the trains forever but that's

00:05:53,800 --> 00:05:59,440
a project that isn't finished yet one

00:05:57,670 --> 00:06:01,690
question I often go out in the past was

00:05:59,440 --> 00:06:03,460
why did didn't use Raspberry Pi 0 the

00:06:01,690 --> 00:06:05,830
easy answer is they weren't there yet

00:06:03,460 --> 00:06:08,530
when we started with it and another

00:06:05,830 --> 00:06:10,270
answer is we use a camera on board and

00:06:08,530 --> 00:06:11,770
the first version of the Raspberry Pi 0

00:06:10,270 --> 00:06:14,260
didn't have the Raspberry Pi camera

00:06:11,770 --> 00:06:17,620
interface so we could have used the USB

00:06:14,260 --> 00:06:20,530
camera maybe but now the new version of

00:06:17,620 --> 00:06:22,360
the Raspberry Pi 0 actually has a camera

00:06:20,530 --> 00:06:23,170
interface if you want to do something

00:06:22,360 --> 00:06:25,180
like this yourself

00:06:23,170 --> 00:06:27,280
I would advise to use a Raspberry Pi 0

00:06:25,180 --> 00:06:29,140
mainly because it's even smaller and you

00:06:27,280 --> 00:06:32,530
can hide it better in a Lego train and

00:06:29,140 --> 00:06:35,080
it consumes less power so in the trains

00:06:32,530 --> 00:06:38,020
we use a plus everything around it is

00:06:35,080 --> 00:06:39,260
mainly Raspberry Pi model 2 basically

00:06:38,020 --> 00:06:41,840
because it's a lot

00:06:39,260 --> 00:06:43,880
to play around that the A+ is a nice

00:06:41,840 --> 00:06:45,560
model but it's a single-core and if you

00:06:43,880 --> 00:06:47,300
want to compile stuff or try out stuff

00:06:45,560 --> 00:06:50,000
it takes a lot longer if you have a

00:06:47,300 --> 00:06:52,520
model 2 or even a model 3 it's a lot

00:06:50,000 --> 00:06:56,180
easier to play around with so that's the

00:06:52,520 --> 00:06:57,650
reason we started using those so a bit

00:06:56,180 --> 00:07:04,340
about architecture which my colleague

00:06:57,650 --> 00:07:05,990
will explain so in architecture let's

00:07:04,340 --> 00:07:07,910
start with this picture

00:07:05,990 --> 00:07:11,540
you're almost actually buying at the

00:07:07,910 --> 00:07:13,610
Lego we need it and they go by the by

00:07:11,540 --> 00:07:14,930
the bucket you pay by the bucket so it

00:07:13,610 --> 00:07:16,970
also needs to fill up the bucket

00:07:14,930 --> 00:07:21,260
completely even with components we don't

00:07:16,970 --> 00:07:22,730
need just to get the stuff in there the

00:07:21,260 --> 00:07:24,350
architecture we have a couple of

00:07:22,730 --> 00:07:26,180
components included and we have

00:07:24,350 --> 00:07:28,550
color-coded them for the language that

00:07:26,180 --> 00:07:29,720
they're created with on the front end in

00:07:28,550 --> 00:07:32,420
the web browser so runs a web

00:07:29,720 --> 00:07:34,730
application using angular it connects

00:07:32,420 --> 00:07:38,390
using a rest interface to a java

00:07:34,730 --> 00:07:41,960
application which uses Jersey to expose

00:07:38,390 --> 00:07:44,150
to rest interface there is a resting

00:07:41,960 --> 00:07:46,880
symbol by the way which means that is

00:07:44,150 --> 00:07:49,640
using rest and it also connects to the

00:07:46,880 --> 00:07:52,850
camera interface using some other

00:07:49,640 --> 00:07:57,430
protocol just to collect images now the

00:07:52,850 --> 00:08:01,070
LTCC which is the Lego train command the

00:07:57,430 --> 00:08:03,470
control center connects again to some

00:08:01,070 --> 00:08:06,710
two other components to actually get the

00:08:03,470 --> 00:08:08,840
values of the RF ID of the infrared

00:08:06,710 --> 00:08:11,150
sense information of the infrared and

00:08:08,840 --> 00:08:12,830
control the servo motors another

00:08:11,150 --> 00:08:14,870
complete bottom those are components

00:08:12,830 --> 00:08:17,750
that were already existing we don't need

00:08:14,870 --> 00:08:19,580
to reinvent the wheel we only adapted

00:08:17,750 --> 00:08:22,040
them slightly to make them suitable for

00:08:19,580 --> 00:08:24,590
exactly what we were doing but at a

00:08:22,040 --> 00:08:27,260
certain point in time we decided we want

00:08:24,590 --> 00:08:29,330
to try something more than only Java so

00:08:27,260 --> 00:08:32,140
let's convert those components into

00:08:29,330 --> 00:08:34,820
Scala and introduce some actors and

00:08:32,140 --> 00:08:40,220
those actors of course use the archive

00:08:34,820 --> 00:08:42,500
framework and also edit on the right we

00:08:40,220 --> 00:08:45,230
editor a particle photon device which

00:08:42,500 --> 00:08:47,540
uses a SC implementation so we have a

00:08:45,230 --> 00:08:49,550
LED strip which demonstrates the speed

00:08:47,540 --> 00:08:52,090
of the trains and there is also one on

00:08:49,550 --> 00:08:52,090
the ferris wheel

00:08:52,200 --> 00:08:56,790
acha the communication between those

00:08:54,300 --> 00:08:59,010
systems now we have also converted from

00:08:56,790 --> 00:09:04,200
a restful interface into a using remote

00:08:59,010 --> 00:09:05,610
actors and then everything is on

00:09:04,200 --> 00:09:08,370
different devices it needs to

00:09:05,610 --> 00:09:09,840
communicate together we're using Wi-Fi

00:09:08,370 --> 00:09:12,650
dongles for this so we have a wireless

00:09:09,840 --> 00:09:14,760
communication but some of them

00:09:12,650 --> 00:09:16,620
especially when you're in places like

00:09:14,760 --> 00:09:18,300
this there are a lot of Wi-Fi devices

00:09:16,620 --> 00:09:20,400
and we noticed there is some

00:09:18,300 --> 00:09:22,350
interference and devices are not really

00:09:20,400 --> 00:09:24,630
responding anymore so some of the

00:09:22,350 --> 00:09:26,970
devices we replace the connection with

00:09:24,630 --> 00:09:28,950
actually with a cable except for the

00:09:26,970 --> 00:09:34,350
trains I learned the trains with the

00:09:28,950 --> 00:09:36,540
cables weren't really a good idea at the

00:09:34,350 --> 00:09:40,020
bottom you see well as inside the Lego

00:09:36,540 --> 00:09:43,200
train to control it there is a infrared

00:09:40,020 --> 00:09:46,500
interface so what we use here is the

00:09:43,200 --> 00:09:48,630
infrared transmitter which is connected

00:09:46,500 --> 00:09:50,130
to the Raspberry Pi and it's forwards to

00:09:48,630 --> 00:09:53,190
commands to the terrain so we can

00:09:50,130 --> 00:09:54,810
control the speed of the train so here

00:09:53,190 --> 00:09:57,330
you see a picture of the terrain in this

00:09:54,810 --> 00:09:59,850
original way there is a battery pack

00:09:57,330 --> 00:10:01,560
there is the infrared receiver and this

00:09:59,850 --> 00:10:06,380
is the wireless controller you can use

00:10:01,560 --> 00:10:06,380
and also there is a Wally

00:10:11,470 --> 00:10:16,990
that work back to the microphone and the

00:10:14,770 --> 00:10:18,730
wall he has the same kind of components

00:10:16,990 --> 00:10:19,900
they are not included originally but you

00:10:18,730 --> 00:10:22,030
can add them yourself

00:10:19,900 --> 00:10:24,820
so there is a battery pack included

00:10:22,030 --> 00:10:27,220
there is the same infrared receiver and

00:10:24,820 --> 00:10:29,590
the year.i some of the motors you can

00:10:27,220 --> 00:10:33,400
connect them and then you I'm actually

00:10:29,590 --> 00:10:36,310
breaking Wally okay let's find out where

00:10:33,400 --> 00:10:38,170
this belongs later there is a remote

00:10:36,310 --> 00:10:40,030
controller but we probably left it at

00:10:38,170 --> 00:10:43,980
some other conference otherwise we could

00:10:40,030 --> 00:10:43,980
have given a small demonstration with it

00:10:51,770 --> 00:10:57,050
so usually you see a close-up of the

00:10:54,290 --> 00:10:58,850
infrared transmitter it is connected

00:10:57,050 --> 00:11:01,340
with three wires to the Raspberry Pi to

00:10:58,850 --> 00:11:04,910
give it a ground and voltage and a

00:11:01,340 --> 00:11:07,280
control signal another of the devices

00:11:04,910 --> 00:11:10,280
we've included in the train is a speaker

00:11:07,280 --> 00:11:11,930
of course the trains need to make sound

00:11:10,280 --> 00:11:13,640
and the Lego trains themself don't make

00:11:11,930 --> 00:11:16,010
them nice sounds we know when the train

00:11:13,640 --> 00:11:20,600
is passing by so we need to emulate it a

00:11:16,010 --> 00:11:25,970
bit and here you see the living room of

00:11:20,600 --> 00:11:28,670
yalom where yes put a couple of points

00:11:25,970 --> 00:11:31,300
mark them and there are RFID tags below

00:11:28,670 --> 00:11:35,090
them and inside the terrain there is a

00:11:31,300 --> 00:11:37,280
RFID reader and when you pass the RFID

00:11:35,090 --> 00:11:38,750
tag it will detect the tag so we can

00:11:37,280 --> 00:11:40,580
actually read the location of the

00:11:38,750 --> 00:11:42,140
terrain and later on in the

00:11:40,580 --> 00:11:44,720
demonstration we can also show you that

00:11:42,140 --> 00:11:49,280
based on the location we can make some

00:11:44,720 --> 00:11:51,470
actions having happening last but not

00:11:49,280 --> 00:11:53,930
least in the terrain is also a camera

00:11:51,470 --> 00:11:55,700
and there is a second camera which is on

00:11:53,930 --> 00:12:00,050
the overview so you can see the whole

00:11:55,700 --> 00:12:01,940
thing from the top and the camera takes

00:12:00,050 --> 00:12:05,480
pictures which are then transmitted back

00:12:01,940 --> 00:12:07,280
to the user interface actually the

00:12:05,480 --> 00:12:09,170
camera on the terrain we have now not

00:12:07,280 --> 00:12:11,540
connected because this uses quite some

00:12:09,170 --> 00:12:13,160
wireless bandwidth and if the connection

00:12:11,540 --> 00:12:15,230
breaks because of this bandwidth then

00:12:13,160 --> 00:12:16,490
also the commands towards the Train are

00:12:15,230 --> 00:12:18,890
not coming through so we have only

00:12:16,490 --> 00:12:24,560
connected now the camera with the

00:12:18,890 --> 00:12:26,540
overview where picture there are also

00:12:24,560 --> 00:12:28,190
some switches we've not brought them

00:12:26,540 --> 00:12:30,770
because they're a bit fragile during a

00:12:28,190 --> 00:12:32,930
transportation and a bit more a bit more

00:12:30,770 --> 00:12:35,000
time to set them up but there are some

00:12:32,930 --> 00:12:37,670
servo motor which is connected to a

00:12:35,000 --> 00:12:39,770
server board which again is connected to

00:12:37,670 --> 00:12:41,780
the Raspberry Pi and it can switch the

00:12:39,770 --> 00:12:44,180
the knobs to the left and to the right

00:12:41,780 --> 00:12:46,190
which will actually switch the tracks to

00:12:44,180 --> 00:12:49,190
go straight ahead or to divert it to the

00:12:46,190 --> 00:12:50,990
other Road those paper clips we use

00:12:49,190 --> 00:12:53,120
paper clips to connect them and it has

00:12:50,990 --> 00:12:55,040
been a lot of time to get them exactly

00:12:53,120 --> 00:12:56,720
right if they are one millimeter too

00:12:55,040 --> 00:12:59,960
short or too long it doesn't really work

00:12:56,720 --> 00:13:03,110
anymore so if you take a consultant for

00:12:59,960 --> 00:13:05,360
100 euros per hour and you take four of

00:13:03,110 --> 00:13:05,570
them and they are bending paper clip for

00:13:05,360 --> 00:13:07,640
three

00:13:05,570 --> 00:13:13,460
as you can see how expensive a paperclip

00:13:07,640 --> 00:13:16,390
can be later on also was added a ferris

00:13:13,460 --> 00:13:19,400
wheel and the ferris wheel also has a

00:13:16,390 --> 00:13:21,530
connection where the Raspberry Pi to

00:13:19,400 --> 00:13:25,790
control the speed and the direction and

00:13:21,530 --> 00:13:27,530
there are some lets on it to give it a

00:13:25,790 --> 00:13:30,500
nice appeal a ferris wheel is never

00:13:27,530 --> 00:13:32,720
complete without let's of course those

00:13:30,500 --> 00:13:35,510
lands are controlled by the particle

00:13:32,720 --> 00:13:37,190
photon and particle photon devices are

00:13:35,510 --> 00:13:40,580
much more like Arduino than they are

00:13:37,190 --> 00:13:42,470
like raspberry PI's but they have an

00:13:40,580 --> 00:13:44,690
integrated wireless connection Wi-Fi

00:13:42,470 --> 00:13:47,690
connection which is connecting to a

00:13:44,690 --> 00:13:49,490
cloud provider so in this user interface

00:13:47,690 --> 00:13:51,740
on the left you can see a list of

00:13:49,490 --> 00:13:53,900
devices connected to your account in in

00:13:51,740 --> 00:13:56,480
the cloud and you can then upload your

00:13:53,900 --> 00:13:58,670
code straight to it on the right you see

00:13:56,480 --> 00:14:00,860
a bit of C code it looks a lot like

00:13:58,670 --> 00:14:03,860
Arduino code it has quite a compatible

00:14:00,860 --> 00:14:05,390
API actually but we modified things a

00:14:03,860 --> 00:14:07,730
bit so there is actually server running

00:14:05,390 --> 00:14:09,860
on the notebook so we are not depending

00:14:07,730 --> 00:14:13,700
on the internet connection so to connect

00:14:09,860 --> 00:14:16,430
to the cloud for them I said we are

00:14:13,700 --> 00:14:20,660
using akka and akka is based on an

00:14:16,430 --> 00:14:23,510
actors the ecto model and in an actual

00:14:20,660 --> 00:14:26,330
model the actor is the smallest unit of

00:14:23,510 --> 00:14:27,920
operation compared to an object for

00:14:26,330 --> 00:14:30,350
example an object-oriented programming

00:14:27,920 --> 00:14:32,870
and the actual model you can use to make

00:14:30,350 --> 00:14:34,430
highly concurrent systems and this is

00:14:32,870 --> 00:14:37,730
actually one of the reasons we wanted to

00:14:34,430 --> 00:14:40,040
try this setup so an actor can have some

00:14:37,730 --> 00:14:41,870
internal states and if you only change

00:14:40,040 --> 00:14:44,420
the internal state from the receive

00:14:41,870 --> 00:14:46,670
method then akka will guarantee that you

00:14:44,420 --> 00:14:49,880
don't need any other kind of locking etc

00:14:46,670 --> 00:14:51,710
so you can have so a kind of single

00:14:49,880 --> 00:14:54,890
threaded feel on your programming model

00:14:51,710 --> 00:14:56,840
and everything will work out now if you

00:14:54,890 --> 00:14:59,030
have such an actor one is here at the

00:14:56,840 --> 00:15:00,680
top at the bottom where you will see it

00:14:59,030 --> 00:15:02,540
you can create an actor system and in

00:15:00,680 --> 00:15:04,610
this active system you can instantiate a

00:15:02,540 --> 00:15:07,400
lot of those actors which will then be

00:15:04,610 --> 00:15:10,940
able to send messages to each other so

00:15:07,400 --> 00:15:13,280
on this line we can you see we ask the

00:15:10,940 --> 00:15:16,130
actor system to create one actor of the

00:15:13,280 --> 00:15:18,889
type worker which is this and using the

00:15:16,130 --> 00:15:20,420
exclamation mark operator you can send

00:15:18,889 --> 00:15:22,600
a message steward which can be any

00:15:20,420 --> 00:15:24,949
object in this case it is a string and

00:15:22,600 --> 00:15:26,989
akka will makes it will invoke to

00:15:24,949 --> 00:15:30,230
receive method and in this case the

00:15:26,989 --> 00:15:31,999
string will just be printed now one of

00:15:30,230 --> 00:15:35,629
the nice thing with actors is that you

00:15:31,999 --> 00:15:38,589
can do it also in a remote fashion so it

00:15:35,629 --> 00:15:41,749
can be a nearby of a very faraway Island

00:15:38,589 --> 00:15:43,519
so Realmuto pre create an actor by

00:15:41,749 --> 00:15:45,499
requesting one from the system of a

00:15:43,519 --> 00:15:48,169
certain type but if there is an actor in

00:15:45,499 --> 00:15:51,350
a remote actor system you can connect it

00:15:48,169 --> 00:15:53,569
with it with the different syntax you

00:15:51,350 --> 00:15:56,329
say I'm going to use the okapi protocol

00:15:53,569 --> 00:15:58,369
on a certain IP address and port we're

00:15:56,329 --> 00:16:01,189
going to address the name of the actor

00:15:58,369 --> 00:16:03,169
system and when once connected akka will

00:16:01,189 --> 00:16:06,319
request it slash user slash were correct

00:16:03,169 --> 00:16:08,269
or extra what you get back is an actor

00:16:06,319 --> 00:16:11,119
reference just the same as you would

00:16:08,269 --> 00:16:13,069
have get getting gotten here and now

00:16:11,119 --> 00:16:14,869
again with an exclamation mark operator

00:16:13,069 --> 00:16:17,119
you can just send it a message and akka

00:16:14,869 --> 00:16:21,169
will take care of communication over the

00:16:17,119 --> 00:16:23,629
network a bit of configuration is

00:16:21,169 --> 00:16:26,239
required to get this working but the

00:16:23,629 --> 00:16:28,160
nice thing is you can also in the

00:16:26,239 --> 00:16:29,809
previous slides you saw in code we have

00:16:28,160 --> 00:16:31,579
actually this string but you can also

00:16:29,809 --> 00:16:34,360
abstract this away in the code so you

00:16:31,579 --> 00:16:37,220
can do the entire intercommunication in

00:16:34,360 --> 00:16:39,410
configuration so yeah you can start

00:16:37,220 --> 00:16:42,529
developing in a local system and then

00:16:39,410 --> 00:16:54,169
split things out over more notes if

00:16:42,529 --> 00:16:56,749
needed yes the other way this call where

00:16:54,169 --> 00:16:58,999
doesn't run this code runs in this case

00:16:56,749 --> 00:17:00,709
on the machine who is now trying to get

00:16:58,999 --> 00:17:04,549
a reference to an actor on the remote

00:17:00,709 --> 00:17:06,589
machine so let's say if you have two

00:17:04,549 --> 00:17:08,809
notes set up and note one wants to send

00:17:06,589 --> 00:17:12,500
a message - no - oh no Towanda sizz

00:17:08,809 --> 00:17:14,510
running and then once you have done this

00:17:12,500 --> 00:17:16,069
call akka will actually create a network

00:17:14,510 --> 00:17:17,929
connection if it is not there yet and

00:17:16,069 --> 00:17:20,299
use that connection for any messages you

00:17:17,929 --> 00:17:26,110
send through this reference later in

00:17:20,299 --> 00:17:26,110
time that's correct

00:17:28,130 --> 00:17:34,049
now when you have in two machines

00:17:31,950 --> 00:17:35,460
running an actor system and you want

00:17:34,049 --> 00:17:37,590
them to enter communicate you I need a

00:17:35,460 --> 00:17:39,450
protocol and the nice thing about

00:17:37,590 --> 00:17:41,010
archives you don't need to serialize

00:17:39,450 --> 00:17:43,530
things in JSON that's right

00:17:41,010 --> 00:17:47,309
you just run with objects but somehow it

00:17:43,530 --> 00:17:49,409
needs to run on both sides so you see it

00:17:47,309 --> 00:17:51,539
in here messages that are being passed

00:17:49,409 --> 00:17:54,120
between two JVMs needs to be serialized

00:17:51,539 --> 00:17:56,700
in some way for a concrete example would

00:17:54,120 --> 00:17:58,890
be on our laptop we want to send a play

00:17:56,700 --> 00:18:00,690
message we create a play message we want

00:17:58,890 --> 00:18:02,549
to send it to the terrain where it is

00:18:00,690 --> 00:18:04,860
running a music surface actor that

00:18:02,549 --> 00:18:10,140
actually needs to play the song that you

00:18:04,860 --> 00:18:12,210
are selecting for this the objects the

00:18:10,140 --> 00:18:14,850
classes actually needs to be present in

00:18:12,210 --> 00:18:17,190
both JMS so what we did to make this

00:18:14,850 --> 00:18:20,549
work is we created a library and this

00:18:17,190 --> 00:18:22,799
library contains the actual messages

00:18:20,549 --> 00:18:25,260
which is done the server application and

00:18:22,799 --> 00:18:27,539
a referee PI applications depend on this

00:18:25,260 --> 00:18:30,059
library so the same definitions are

00:18:27,539 --> 00:18:32,789
available an example of such a message

00:18:30,059 --> 00:18:35,520
you see here this is the pipe of this

00:18:32,789 --> 00:18:37,950
library it contains for example the play

00:18:35,520 --> 00:18:40,710
message which can be parameterize by a

00:18:37,950 --> 00:18:43,320
file name and when you send this to the

00:18:40,710 --> 00:18:44,909
Raspberry Pi the music surface actor

00:18:43,320 --> 00:18:46,679
then recognizes this and will actually

00:18:44,909 --> 00:18:49,559
collect a file from its local storage

00:18:46,679 --> 00:18:52,320
local high and drive filesystem and will

00:18:49,559 --> 00:18:54,870
play it another message is to get a

00:18:52,320 --> 00:18:57,120
music list back so it contains the list

00:18:54,870 --> 00:19:03,210
of songs that are available inside the

00:18:57,120 --> 00:19:07,710
local Drive so here you see the things

00:19:03,210 --> 00:19:10,679
combined together we create occur we get

00:19:07,710 --> 00:19:12,090
address use the address of the actor on

00:19:10,679 --> 00:19:14,880
the remote system to create a connection

00:19:12,090 --> 00:19:17,400
and using the exclamation mark we can

00:19:14,880 --> 00:19:22,140
send now a message to play message to

00:19:17,400 --> 00:19:24,059
this actor using the actor reference so

00:19:22,140 --> 00:19:26,760
for demonstration I'm going to ask you I

00:19:24,059 --> 00:19:29,000
want to actually share what is working

00:19:26,760 --> 00:19:29,000
here

00:19:33,419 --> 00:19:40,570
hello okay so probably you're all

00:19:37,059 --> 00:19:42,490
waiting for the demo already yeah so

00:19:40,570 --> 00:19:48,429
let's see if we can get something up and

00:19:42,490 --> 00:19:49,840
running so what you can see here is at

00:19:48,429 --> 00:19:51,880
the bottom we have the overview camera

00:19:49,840 --> 00:19:54,100
which is a bit located here at the back

00:19:51,880 --> 00:19:56,110
so some people will see it others maybe

00:19:54,100 --> 00:19:59,230
not be able to see it but it's a it's a

00:19:56,110 --> 00:20:01,210
Raspberry Pi camera and if you want you

00:19:59,230 --> 00:20:02,590
can walk up front but make sure you're

00:20:01,210 --> 00:20:04,000
not in front of the camera that's

00:20:02,590 --> 00:20:05,860
standing there because they want to

00:20:04,000 --> 00:20:10,059
record it for our future generations

00:20:05,860 --> 00:20:11,380
which is of course really important so

00:20:10,059 --> 00:20:13,750
here we have the overview camera which

00:20:11,380 --> 00:20:15,490
is really nice especially I mean when

00:20:13,750 --> 00:20:17,230
I'm at work I can watch this on my

00:20:15,490 --> 00:20:19,179
mobile phone as well and control my

00:20:17,230 --> 00:20:20,860
trains and money of the overview camera

00:20:19,179 --> 00:20:22,179
I can still see what's going on of

00:20:20,860 --> 00:20:25,049
course I only do that during lunch

00:20:22,179 --> 00:20:27,490
breaks but it's still really nice to do

00:20:25,049 --> 00:20:30,130
and what we see at the top are the

00:20:27,490 --> 00:20:32,080
switches which mark already explains we

00:20:30,130 --> 00:20:35,289
didn't brought them with us but with

00:20:32,080 --> 00:20:37,899
those knobs here we can control whether

00:20:35,289 --> 00:20:39,730
or they go straight or add a band and

00:20:37,899 --> 00:20:42,370
that for all the different switches and

00:20:39,730 --> 00:20:45,130
over here we see three trains and a

00:20:42,370 --> 00:20:47,080
ferris wheel and actually the software

00:20:45,130 --> 00:20:49,149
that's running on the Raspberry Pi that

00:20:47,080 --> 00:20:50,860
controls the ferris wheel is exactly the

00:20:49,149 --> 00:20:52,960
same software that's running on the

00:20:50,860 --> 00:20:56,230
raspberry PI's on the trains because the

00:20:52,960 --> 00:20:58,510
interface the infrared receiver from

00:20:56,230 --> 00:21:00,580
Lego for the ferris wheel is exactly the

00:20:58,510 --> 00:21:03,519
same receiver as the one on the Lego

00:21:00,580 --> 00:21:05,830
train so that's the nice thing about the

00:21:03,519 --> 00:21:07,899
Lego set up and they have one infrared

00:21:05,830 --> 00:21:09,669
receiver and if you can control that one

00:21:07,899 --> 00:21:12,159
you can control all kinds of different

00:21:09,669 --> 00:21:15,190
engines for instance train engines or

00:21:12,159 --> 00:21:16,809
small engines or big engines and do all

00:21:15,190 --> 00:21:20,110
kinds of fun stuff with the red Lego

00:21:16,809 --> 00:21:23,919
basically so we can make it moving

00:21:20,110 --> 00:21:25,750
around now you can see that the ferris

00:21:23,919 --> 00:21:27,789
wheel is moving around and you can also

00:21:25,750 --> 00:21:30,010
see that the LEDs there are three dots

00:21:27,789 --> 00:21:34,539
moving clockwise which means that it's

00:21:30,010 --> 00:21:37,090
moving at the speed three forward and

00:21:34,539 --> 00:21:41,399
ever we change it then it will hopefully

00:21:37,090 --> 00:21:41,399
also change the LEDs you can go backward

00:21:44,090 --> 00:21:49,140
so that's why we can I can play around a

00:21:47,130 --> 00:21:54,330
bit this is on manual mode you can do

00:21:49,140 --> 00:21:56,910
the same with the train they're all

00:21:54,330 --> 00:21:59,130
moving and at the Blue Train here you

00:21:56,910 --> 00:22:01,410
can see that there is a destination so

00:21:59,130 --> 00:22:04,620
Google Maps more or less and so this is

00:22:01,410 --> 00:22:08,460
the place of the Train so whichever ID

00:22:04,620 --> 00:22:10,140
card is red so now the blue train is

00:22:08,460 --> 00:22:12,120
crossed the crossing and it will show

00:22:10,140 --> 00:22:15,900
that and it's what the bicycle now and

00:22:12,120 --> 00:22:17,760
and it will move on so that's why we we

00:22:15,900 --> 00:22:19,380
can even if the camera isn't working I

00:22:17,760 --> 00:22:23,040
can still see what the position of the

00:22:19,380 --> 00:22:29,670
car is but of course we have trained

00:22:23,040 --> 00:22:31,770
sounds really helpful also mean if you

00:22:29,670 --> 00:22:33,750
have burglars in your home or a cat's or

00:22:31,770 --> 00:22:38,370
your wife or your or your children you

00:22:33,750 --> 00:22:41,070
can scare them away quite easily yeah

00:22:38,370 --> 00:22:42,840
yeah yeah you can also play other signs

00:22:41,070 --> 00:22:47,000
it doesn't have to be train sounds I

00:22:42,840 --> 00:22:47,000
mean we have all kinds of stuff like

00:22:51,230 --> 00:22:57,540
tornado sirens and so maybe this works

00:22:54,690 --> 00:22:59,340
better than a train sound except from

00:22:57,540 --> 00:23:04,230
manual pilot we also have automated

00:22:59,340 --> 00:23:05,670
pilot and there we might a few different

00:23:04,230 --> 00:23:09,780
patterns it's a bit annoying that I

00:23:05,670 --> 00:23:12,450
cannot stop the sound but so here I can

00:23:09,780 --> 00:23:14,840
send a list of commands to the train so

00:23:12,450 --> 00:23:18,960
in this case I sent three commands to it

00:23:14,840 --> 00:23:20,940
so what I say is I want to run for three

00:23:18,960 --> 00:23:22,500
seconds which p3 and then I want to stop

00:23:20,940 --> 00:23:25,190
for three seconds and then I want to

00:23:22,500 --> 00:23:28,200
play a song so when I now press play

00:23:25,190 --> 00:23:31,200
wait the first will of course cannot

00:23:28,200 --> 00:23:33,570
play a song so that's a bit silly let's

00:23:31,200 --> 00:23:37,290
take another one the Blue Train can play

00:23:33,570 --> 00:23:41,640
songs of course we hear it already so

00:23:37,290 --> 00:23:43,890
should be moving somewhere and now it's

00:23:41,640 --> 00:23:45,660
playing another song so that's a some

00:23:43,890 --> 00:23:48,330
automated commands that we can send to

00:23:45,660 --> 00:23:50,490
it and another thing we can do is we can

00:23:48,330 --> 00:23:53,130
do location-based commands so based on

00:23:50,490 --> 00:23:55,590
the location of the Blue Train

00:23:53,130 --> 00:23:57,720
which is detected by the RFID reader we

00:23:55,590 --> 00:23:59,730
can let the white train do all kinds of

00:23:57,720 --> 00:24:01,950
stuff or we can do the FIR let the

00:23:59,730 --> 00:24:04,470
Ferris wheel move whatever you want we

00:24:01,950 --> 00:24:06,330
can even make the blue train move when

00:24:04,470 --> 00:24:09,210
it reaches the bicycle that it should go

00:24:06,330 --> 00:24:12,419
backward or something else so I will

00:24:09,210 --> 00:24:24,179
just enter some commands to show it to

00:24:12,419 --> 00:24:25,770
you it doesn't really matter I say so

00:24:24,179 --> 00:24:27,690
now it's programs and it's already

00:24:25,770 --> 00:24:29,280
running because of course the blue train

00:24:27,690 --> 00:24:31,230
is already at a certain location it's at

00:24:29,280 --> 00:24:33,480
the crossing so then the white train

00:24:31,230 --> 00:24:35,760
should be moving at speed four and if we

00:24:33,480 --> 00:24:37,559
now make the blue train moving then

00:24:35,760 --> 00:24:42,720
hopefully the white rain will do

00:24:37,559 --> 00:24:44,940
something so it's now going backwards so

00:24:42,720 --> 00:24:47,100
this way we can make some logic making

00:24:44,940 --> 00:24:51,390
certain elements depend on each other

00:24:47,100 --> 00:24:53,659
and start moving around it can go quite

00:24:51,390 --> 00:24:53,659
fast

00:25:01,900 --> 00:25:06,520
should be stopping ah not stopping so

00:25:05,110 --> 00:25:08,380
that's that's basically the basic

00:25:06,520 --> 00:25:10,420
commands that we can do where it is but

00:25:08,380 --> 00:25:13,540
you could more or less do anything which

00:25:10,420 --> 00:25:15,490
you imagine with it and program it like

00:25:13,540 --> 00:25:17,530
automated pilot that you see now it's

00:25:15,490 --> 00:25:19,900
programmed that way that even if my

00:25:17,530 --> 00:25:22,120
laptop is shut down the trains will keep

00:25:19,900 --> 00:25:25,990
on moving around so it's completely

00:25:22,120 --> 00:25:27,340
independent of what's running here so

00:25:25,990 --> 00:25:31,600
you can try out all kinds of different

00:25:27,340 --> 00:25:38,470
stuff with it and I really like that now

00:25:31,600 --> 00:25:40,900
we can use the other mic now so yeah we

00:25:38,470 --> 00:25:42,460
really like the remote actor model even

00:25:40,900 --> 00:25:44,710
more than using rest

00:25:42,460 --> 00:25:46,870
I mean rest worked perfectly fine but it

00:25:44,710 --> 00:25:49,150
feels a bit silly if you want to run

00:25:46,870 --> 00:25:51,610
something remotely that you need to add

00:25:49,150 --> 00:25:54,570
all kinds of annotations and stuff to

00:25:51,610 --> 00:25:56,980
make your code available remotely and

00:25:54,570 --> 00:25:58,780
it's not business logic it's also

00:25:56,980 --> 00:26:00,850
technical details that you need to

00:25:58,780 --> 00:26:02,920
implement but with remote actors it's

00:26:00,850 --> 00:26:04,570
basically the same whether you run it

00:26:02,920 --> 00:26:06,910
locally or remote it's just entering

00:26:04,570 --> 00:26:09,820
some IP address and some other stuff and

00:26:06,910 --> 00:26:11,410
so but nowadays popular is micro

00:26:09,820 --> 00:26:13,870
services and they say yeah you should

00:26:11,410 --> 00:26:15,520
start with a monolith so you could do

00:26:13,870 --> 00:26:18,130
that you start with a monolith all local

00:26:15,520 --> 00:26:19,600
actors and then extract some parts of it

00:26:18,130 --> 00:26:21,400
and just make it remote actors that's

00:26:19,600 --> 00:26:23,620
just a small change you don't need to

00:26:21,400 --> 00:26:26,620
implement all kinds of rest endpoints

00:26:23,620 --> 00:26:28,300
and stuff like that so we really liked

00:26:26,620 --> 00:26:30,790
it it's it's a more natural way of

00:26:28,300 --> 00:26:33,310
programming you don't need to make

00:26:30,790 --> 00:26:34,960
converters to Jason or whatever and

00:26:33,310 --> 00:26:36,940
using akka has some features like

00:26:34,960 --> 00:26:38,320
concurrency and load balancer and

00:26:36,940 --> 00:26:41,110
circuit breakers and stuff like that

00:26:38,320 --> 00:26:43,330
which may be for a Lego train isn't that

00:26:41,110 --> 00:26:44,740
useful but if you make really highly

00:26:43,330 --> 00:26:47,800
concurrent applications on a server

00:26:44,740 --> 00:26:49,450
which you would probably do more often

00:26:47,800 --> 00:26:52,240
than building Lego trains then it's a

00:26:49,450 --> 00:26:53,830
it's good advantages and of course HTTP

00:26:52,240 --> 00:26:55,960
also has some advantages it's more

00:26:53,830 --> 00:26:58,060
independent of technology if you have

00:26:55,960 --> 00:26:59,680
actors you cannot just talk to them from

00:26:58,060 --> 00:27:00,820
another language you need to create a

00:26:59,680 --> 00:27:03,460
rest an end point or something like that

00:27:00,820 --> 00:27:08,830
to be able to let angular talk to your

00:27:03,460 --> 00:27:10,840
akka akka actor system and using rest

00:27:08,830 --> 00:27:13,000
it's it's a bit more loosely coupled so

00:27:10,840 --> 00:27:14,580
you could change Francis's server part

00:27:13,000 --> 00:27:18,100
without changing

00:27:14,580 --> 00:27:20,130
the the client part but I mean I don't

00:27:18,100 --> 00:27:22,360
know how much that will hold up because

00:27:20,130 --> 00:27:24,100
when I work in a company when we change

00:27:22,360 --> 00:27:28,750
one part to most of the time also change

00:27:24,100 --> 00:27:30,730
the other parts of maybe it goes bad so

00:27:28,750 --> 00:27:33,910
we were like okay but how do we convince

00:27:30,730 --> 00:27:36,850
you guys and girls of course to use

00:27:33,910 --> 00:27:38,530
remote actors or even consider them and

00:27:36,850 --> 00:27:40,300
because I can say it's cool when I like

00:27:38,530 --> 00:27:42,760
it but I don't have blue eyes so you

00:27:40,300 --> 00:27:44,680
cannot trust me on my blue eyes so we

00:27:42,760 --> 00:27:46,450
were like okay can we collect some facts

00:27:44,680 --> 00:27:49,960
or something like that to to convince

00:27:46,450 --> 00:27:54,160
you guys so we first started at looking

00:27:49,960 --> 00:27:56,440
at the the size of the packaging of the

00:27:54,160 --> 00:27:58,060
applications so we created a fat jar but

00:27:56,440 --> 00:28:00,160
basically just includes all the

00:27:58,060 --> 00:28:01,690
libraries that you use in one big jar

00:28:00,160 --> 00:28:03,640
file and then we looked at the file

00:28:01,690 --> 00:28:06,160
sizes when we had a simple application

00:28:03,640 --> 00:28:08,290
with a local actor that was like 8

00:28:06,160 --> 00:28:11,590
megabytes and with a remote actor it was

00:28:08,290 --> 00:28:13,780
around 12 you see that as soon as we

00:28:11,590 --> 00:28:16,000
started adding ok HTTP it was already a

00:28:13,780 --> 00:28:17,860
lot more but that was a little old

00:28:16,000 --> 00:28:19,540
version of HTTP so I can't imagine that

00:28:17,860 --> 00:28:22,690
it is now a bit more optimized and might

00:28:19,540 --> 00:28:25,630
be a bit less and to compare it to stuff

00:28:22,690 --> 00:28:29,710
that's more regularly regularly used

00:28:25,630 --> 00:28:31,270
like spring boot that's around 14

00:28:29,710 --> 00:28:34,170
megabyte so it's quite comparable

00:28:31,270 --> 00:28:36,430
they're not really big advantages there

00:28:34,170 --> 00:28:38,110
so after that we started looking at

00:28:36,430 --> 00:28:40,270
Gatling to do performance testing if

00:28:38,110 --> 00:28:43,210
you've never looked at Gatling before I

00:28:40,270 --> 00:28:45,910
can really advise you to do it use some

00:28:43,210 --> 00:28:48,040
Scala DSL which makes it really easy to

00:28:45,910 --> 00:28:50,680
set up performance tests I've used a

00:28:48,040 --> 00:28:52,870
meter in the past but I find Gatling a

00:28:50,680 --> 00:28:54,370
lot easier to use to it so if you want

00:28:52,870 --> 00:28:56,740
to do anything with performance testing

00:28:54,370 --> 00:28:58,360
have a look at it it basically looks

00:28:56,740 --> 00:29:01,240
just like this so we create a scenario

00:28:58,360 --> 00:29:03,700
we basically say how how much times we

00:29:01,240 --> 00:29:06,490
want to loop it or repeat it and we then

00:29:03,700 --> 00:29:11,770
execute an HTTP call and we check if the

00:29:06,490 --> 00:29:13,840
result is 200 or okay then so we add

00:29:11,770 --> 00:29:16,060
certain scenarios one scenarios was that

00:29:13,840 --> 00:29:17,850
we do did a pause between each request

00:29:16,060 --> 00:29:20,770
so we did a hundred millisecond pause

00:29:17,850 --> 00:29:22,510
and we did also a test run where we

00:29:20,770 --> 00:29:25,120
didn't pause and just fired all the

00:29:22,510 --> 00:29:27,390
requests after each other and then we

00:29:25,120 --> 00:29:29,070
ran up the users and

00:29:27,390 --> 00:29:33,690
ten seconds and we did test with

00:29:29,070 --> 00:29:35,970
different amounts of users and what we

00:29:33,690 --> 00:29:38,520
tested tested was basically this so the

00:29:35,970 --> 00:29:41,030
left part until the orange boxes in the

00:29:38,520 --> 00:29:43,920
middle is the same and in the right part

00:29:41,030 --> 00:29:46,530
at the top we connect to our HTTP

00:29:43,920 --> 00:29:47,610
endpoint and at the bottom we connect to

00:29:46,530 --> 00:29:49,440
our remote actor

00:29:47,610 --> 00:29:51,299
so that way we want to measure the

00:29:49,440 --> 00:29:54,030
difference in speed between our HTTP and

00:29:51,299 --> 00:29:55,860
archive remote actors which gave us

00:29:54,030 --> 00:29:57,030
these results so what you can see here

00:29:55,860 --> 00:30:01,260
is the mean response time in

00:29:57,030 --> 00:30:03,210
milliseconds for 50 users and this is

00:30:01,260 --> 00:30:06,120
for 50 users without a pause so just

00:30:03,210 --> 00:30:07,620
firing requests and we were quite happy

00:30:06,120 --> 00:30:09,390
with the results because remote actors

00:30:07,620 --> 00:30:11,090
were a lot quicker so that's that's good

00:30:09,390 --> 00:30:13,440
right

00:30:11,090 --> 00:30:15,600
we had more or less the same results for

00:30:13,440 --> 00:30:18,630
the max response times still were really

00:30:15,600 --> 00:30:21,120
good results the one the higher one

00:30:18,630 --> 00:30:22,860
there you probably notice it like hey

00:30:21,120 --> 00:30:26,309
what's that doing Gerrit doesn't see

00:30:22,860 --> 00:30:29,220
seem logical to be that size actually we

00:30:26,309 --> 00:30:31,350
did three test runs for every scenario

00:30:29,220 --> 00:30:33,450
and in that one one of the three

00:30:31,350 --> 00:30:35,610
scenarios had really high response times

00:30:33,450 --> 00:30:37,140
but we opted to keep it in and not

00:30:35,610 --> 00:30:39,390
fiddle with the results because yeah

00:30:37,140 --> 00:30:42,720
don't trust results you didn't falsify

00:30:39,390 --> 00:30:45,299
ourselves so we just opted to keep them

00:30:42,720 --> 00:30:47,669
which you can see the the logic behind

00:30:45,299 --> 00:30:49,919
it the remote actors are quite a bit

00:30:47,669 --> 00:30:52,620
quicker than that and our HTTP the same

00:30:49,919 --> 00:30:55,500
goes for in 99 percentile which is often

00:30:52,620 --> 00:30:58,010
used within companies and so I have

00:30:55,500 --> 00:31:00,690
quite positive wedded that remote actors

00:30:58,010 --> 00:31:03,179
work quite a bit faster than our HTTP

00:31:00,690 --> 00:31:05,549
and we had a graduation student he did

00:31:03,179 --> 00:31:06,950
more or less the same test with but a

00:31:05,549 --> 00:31:10,200
different set up with a different

00:31:06,950 --> 00:31:13,049
program and he saw that rest could

00:31:10,200 --> 00:31:15,210
handle around 6600 users and a remote

00:31:13,049 --> 00:31:18,299
actors system could probably go to

00:31:15,210 --> 00:31:20,880
around 3300 users which means that in

00:31:18,299 --> 00:31:24,179
fact you need a lot less hardware to run

00:31:20,880 --> 00:31:25,919
the same software on remote actor system

00:31:24,179 --> 00:31:28,290
instead of a rest system so that that's

00:31:25,919 --> 00:31:33,330
that's really great so now we're done

00:31:28,290 --> 00:31:35,820
right and but actually I mean HTTP was

00:31:33,330 --> 00:31:37,260
still fairly new and and maybe now it's

00:31:35,820 --> 00:31:39,270
it's even performing better I don't know

00:31:37,260 --> 00:31:41,070
but we we also wanted to compare it to

00:31:39,270 --> 00:31:43,409
some stuff that was more why

00:31:41,070 --> 00:31:46,620
they use already and a bit more mature

00:31:43,409 --> 00:31:51,450
already so we compared it against spring

00:31:46,620 --> 00:31:53,340
boot of course you know it's it but that

00:31:51,450 --> 00:31:55,080
was a it was a bit sad because bring

00:31:53,340 --> 00:31:56,669
boot was a bit quicker what you can see

00:31:55,080 --> 00:31:58,559
here in a remaining response time so I

00:31:56,669 --> 00:32:01,769
was like man what do you do now just

00:31:58,559 --> 00:32:06,149
falsify the results or find some other

00:32:01,769 --> 00:32:07,830
thing to compare with I have to say with

00:32:06,149 --> 00:32:09,360
spring boot we had to do some

00:32:07,830 --> 00:32:11,039
optimizations because the connection

00:32:09,360 --> 00:32:13,559
factory spring is normally using to do

00:32:11,039 --> 00:32:16,289
HTTP requests it's quite crappy so we

00:32:13,559 --> 00:32:18,480
replaced it with an apache connection

00:32:16,289 --> 00:32:20,399
factory because else we could even we

00:32:18,480 --> 00:32:22,139
can only run like four hundred users and

00:32:20,399 --> 00:32:23,850
then it would crash so we did a small

00:32:22,139 --> 00:32:27,690
optimization there and for the rest we

00:32:23,850 --> 00:32:31,200
didn't do any optimizations so we got a

00:32:27,690 --> 00:32:32,970
bit quicker response times but the funny

00:32:31,200 --> 00:32:34,769
thing to see is that way to max response

00:32:32,970 --> 00:32:37,379
times the remote actors are much more

00:32:34,769 --> 00:32:40,350
stable than the spring boot so here

00:32:37,379 --> 00:32:42,419
especially at thousand users you can see

00:32:40,350 --> 00:32:45,480
that the response times for remote

00:32:42,419 --> 00:32:47,370
actors are far quicker than for spring

00:32:45,480 --> 00:32:49,080
boot so that's I mean it's a good result

00:32:47,370 --> 00:32:51,659
if you have high load applications

00:32:49,080 --> 00:32:55,470
running somewhere and the same goes for

00:32:51,659 --> 00:32:57,659
a 99 percentile um so I already got the

00:32:55,470 --> 00:32:59,730
comment like yeah you can say this but

00:32:57,659 --> 00:33:00,929
it depends on the scenario of course it

00:32:59,730 --> 00:33:03,179
depends on the scenario what you're

00:33:00,929 --> 00:33:06,330
doing and what we mainly want to

00:33:03,179 --> 00:33:08,159
indicate is using remote actors or using

00:33:06,330 --> 00:33:11,460
aqua clusters or something like that can

00:33:08,159 --> 00:33:12,690
be a good alternative to your rest

00:33:11,460 --> 00:33:14,730
implementation that you're currently

00:33:12,690 --> 00:33:19,169
using but of course it depends on

00:33:14,730 --> 00:33:20,220
scenario and what you want to build yeah

00:33:19,169 --> 00:33:21,899
we also had some challenges

00:33:20,220 --> 00:33:23,610
unfortunately this is not my house

00:33:21,899 --> 00:33:29,700
because else I would probably have quite

00:33:23,610 --> 00:33:32,039
a good insurance so resources raspberry

00:33:29,700 --> 00:33:33,840
PI's for IOT hardware already they have

00:33:32,039 --> 00:33:37,019
a lot of resources nowadays you have a

00:33:33,840 --> 00:33:39,870
gigabytes of RAM and stuff like that but

00:33:37,019 --> 00:33:42,210
the A+ we used still has 256 megabytes

00:33:39,870 --> 00:33:43,919
of RAM and we reached a bit of the limit

00:33:42,210 --> 00:33:46,139
of that with all the applications we

00:33:43,919 --> 00:33:48,750
were running on it so it's still if you

00:33:46,139 --> 00:33:50,519
want to do some more heavy stuff you

00:33:48,750 --> 00:33:53,279
need to buy either a faster Raspberry Pi

00:33:50,519 --> 00:33:54,690
or maybe consider something else than a

00:33:53,279 --> 00:33:58,710
Raspberry Pi

00:33:54,690 --> 00:34:00,420
there are still more for not intense

00:33:58,710 --> 00:34:02,160
applications if you have a simple

00:34:00,420 --> 00:34:03,780
applications that is doing just simple

00:34:02,160 --> 00:34:05,970
stuff for as berry pies fine if you want

00:34:03,780 --> 00:34:07,920
to do lots of calculations of course

00:34:05,970 --> 00:34:11,520
it's better to just buy expensive

00:34:07,920 --> 00:34:14,340
hardware or better hardware I broke a

00:34:11,520 --> 00:34:17,460
couple of Raspberry Pi A+ models if you

00:34:14,340 --> 00:34:19,950
ever buy a Raspberry Pi A+ keep in mind

00:34:17,460 --> 00:34:21,840
that the pins that are in here normally

00:34:19,950 --> 00:34:25,050
they keep your connector in place or USB

00:34:21,840 --> 00:34:27,180
connector but in a plus model their pins

00:34:25,050 --> 00:34:29,550
are a bit high and when you put in a USB

00:34:27,180 --> 00:34:31,140
device the pins will bend backwards and

00:34:29,550 --> 00:34:33,890
then it's the end of your Raspberry Pi

00:34:31,140 --> 00:34:36,270
and I only found out after three models

00:34:33,890 --> 00:34:38,070
that that was the problem so it was a

00:34:36,270 --> 00:34:39,570
bit silly and then I read it on the

00:34:38,070 --> 00:34:41,580
internet and apparently it's a common

00:34:39,570 --> 00:34:43,410
problem with exactly this model so all

00:34:41,580 --> 00:34:45,300
the other models are basically fine

00:34:43,410 --> 00:34:47,580
except this model it uses another

00:34:45,300 --> 00:34:52,200
connector which is a bit cheaper and a

00:34:47,580 --> 00:34:54,000
bit crappier batteries I really like

00:34:52,200 --> 00:34:56,940
Lego trains and playing around with it

00:34:54,000 --> 00:35:00,030
but I find it really silly that the the

00:34:56,940 --> 00:35:02,220
battery container is really picky about

00:35:00,030 --> 00:35:03,570
batteries so using rechargeable

00:35:02,220 --> 00:35:06,090
batteries even quite expensive

00:35:03,570 --> 00:35:08,280
well-known brands sometimes works

00:35:06,090 --> 00:35:10,170
sometimes doesn't work so in the end you

00:35:08,280 --> 00:35:11,220
end up using normal batteries which of

00:35:10,170 --> 00:35:12,710
course isn't really good for the

00:35:11,220 --> 00:35:16,050
environment

00:35:12,710 --> 00:35:18,510
FOD works fine as long as the train is

00:35:16,050 --> 00:35:20,550
moving quickly or the speed between the

00:35:18,510 --> 00:35:22,650
reader and the cart is a bit hide and it

00:35:20,550 --> 00:35:24,540
doesn't work but it's a steep solution

00:35:22,650 --> 00:35:27,050
for like five bucks you can get a reader

00:35:24,540 --> 00:35:30,120
and two cards so it's fine for the money

00:35:27,050 --> 00:35:32,370
yeah Wi-Fi issues like my colleague told

00:35:30,120 --> 00:35:34,260
we cannot put such a thing on top of the

00:35:32,370 --> 00:35:37,500
Raspberry Pi on the train because it's

00:35:34,260 --> 00:35:40,080
way too heavy but also using five

00:35:37,500 --> 00:35:42,300
gigahertz bandwidth use bit on also on a

00:35:40,080 --> 00:35:44,070
Raspberry Pi is quite hard there's not

00:35:42,300 --> 00:35:46,440
really good support for it so you're

00:35:44,070 --> 00:35:49,290
quite stuck with using 2.4 gigahertz and

00:35:46,440 --> 00:35:52,050
USB dongles and everybody is using 2.4

00:35:49,290 --> 00:35:53,510
gigahertz so it's a bit tricky so

00:35:52,050 --> 00:35:55,770
everything is not really plug-and-play

00:35:53,510 --> 00:35:58,050
there are lots of options when we

00:35:55,770 --> 00:36:00,150
started with this project I really liked

00:35:58,050 --> 00:36:03,360
Dockers was okay we ran everything in

00:36:00,150 --> 00:36:05,760
darker because it's cool but then

00:36:03,360 --> 00:36:07,190
raspbian were all the software mainly

00:36:05,760 --> 00:36:09,110
was built for soda

00:36:07,190 --> 00:36:12,470
the infrared transmitter and everything

00:36:09,110 --> 00:36:14,480
it has libraries for raspbian but

00:36:12,470 --> 00:36:16,190
raspbian had really poor doctor support

00:36:14,480 --> 00:36:17,750
yet to cross-compiled stuff on your main

00:36:16,190 --> 00:36:20,210
computer and stuff like that and i

00:36:17,750 --> 00:36:22,370
really didn't want that and you also our

00:36:20,210 --> 00:36:25,100
clinics for raspbian are for for

00:36:22,370 --> 00:36:26,690
raspberry pi our clinics has perfect

00:36:25,100 --> 00:36:29,330
support for docker for like two or three

00:36:26,690 --> 00:36:31,910
years already but they don't have good

00:36:29,330 --> 00:36:33,740
support for like infrared transmitters

00:36:31,910 --> 00:36:35,720
and stuff like that so it's you really

00:36:33,740 --> 00:36:38,930
have to choose between more or less the

00:36:35,720 --> 00:36:40,760
best solution among it and there's lots

00:36:38,930 --> 00:36:42,500
of documentation some is good some was a

00:36:40,760 --> 00:36:44,690
bit worse I destroyed the infrared

00:36:42,500 --> 00:36:45,950
transmitter because I found a website

00:36:44,690 --> 00:36:48,320
like oh you have to connect it like this

00:36:45,950 --> 00:36:50,920
I connected it and then it became quite

00:36:48,320 --> 00:36:53,540
warm it's not really good apparently

00:36:50,920 --> 00:36:55,430
but luckily most of the hardware is it's

00:36:53,540 --> 00:36:58,120
quite cheap for a few bucks you just buy

00:36:55,430 --> 00:37:00,620
some replacements so it's it's it's cool

00:36:58,120 --> 00:37:02,000
children is really cool except if you

00:37:00,620 --> 00:37:04,310
are too small because then you need to

00:37:02,000 --> 00:37:09,650
hurry to carry out your leg over way

00:37:04,310 --> 00:37:12,850
before you enter the room so conclusion

00:37:09,650 --> 00:37:15,080
I mean it's been a really fun project

00:37:12,850 --> 00:37:16,630
that's part one I think and I can really

00:37:15,080 --> 00:37:19,040
advise you if you want to try a new

00:37:16,630 --> 00:37:21,710
technologies or new hardware and you saw

00:37:19,040 --> 00:37:23,180
for whatever make something fun of it

00:37:21,710 --> 00:37:25,160
don't build the next HelloWorld

00:37:23,180 --> 00:37:27,320
application because you will get bored

00:37:25,160 --> 00:37:28,580
in a couple of hours and stop playing

00:37:27,320 --> 00:37:31,190
around with it and if you have something

00:37:28,580 --> 00:37:32,600
fun you will keep on expanding it I've

00:37:31,190 --> 00:37:35,840
got some colleagues we started helping

00:37:32,600 --> 00:37:38,210
with it's also gained some experience in

00:37:35,840 --> 00:37:40,760
building hardware stuff using akka and

00:37:38,210 --> 00:37:42,200
everything so it's really fun to do

00:37:40,760 --> 00:37:44,120
something like this so I can really

00:37:42,200 --> 00:37:48,160
advise it to you and it brings you to

00:37:44,120 --> 00:37:51,110
places like Berlin so it's not that bad

00:37:48,160 --> 00:37:53,660
we also learned that using akka and

00:37:51,110 --> 00:37:56,870
Scala and Java on a Raspberry Pi it

00:37:53,660 --> 00:37:58,670
works quite fine if you don't have too

00:37:56,870 --> 00:38:00,170
much load on it I mean it's not a highly

00:37:58,670 --> 00:38:02,390
concurrent system or anything like that

00:38:00,170 --> 00:38:04,850
but you can do some fun stuff with it so

00:38:02,390 --> 00:38:07,940
if you're ever going to do projects on

00:38:04,850 --> 00:38:09,770
an IOT hardware we will still consider

00:38:07,940 --> 00:38:12,920
it an option to just build it in either

00:38:09,770 --> 00:38:16,430
Java or skull so that's quite fun and we

00:38:12,920 --> 00:38:18,110
saw that lots of people also like it but

00:38:16,430 --> 00:38:20,090
of course for the people who were in a

00:38:18,110 --> 00:38:29,120
bit late and didn't see the video and

00:38:20,090 --> 00:38:29,540
there is one best part about it in the

00:38:29,120 --> 00:38:32,110
meantime

00:38:29,540 --> 00:38:32,110
are there any questions

00:38:38,430 --> 00:38:41,000
yeah

00:38:42,750 --> 00:38:46,109
okay so the question is when did you

00:38:44,609 --> 00:38:48,630
start your project and how many hours

00:38:46,109 --> 00:38:52,080
did you invest in it I think I started

00:38:48,630 --> 00:38:54,180
it around two years ago and how many

00:38:52,080 --> 00:38:57,180
hours I didn't dare to count and my wife

00:38:54,180 --> 00:38:59,730
would be really upset if I told her now

00:38:57,180 --> 00:39:01,770
it's really like you think how difficult

00:38:59,730 --> 00:39:03,930
can it be you you add a sensor or

00:39:01,770 --> 00:39:05,940
whatever to a Raspberry Pi it's like an

00:39:03,930 --> 00:39:07,890
hour work but then something fills in

00:39:05,940 --> 00:39:10,020
the software the sensor isn't working or

00:39:07,890 --> 00:39:13,140
whatever and you spend two days fixing

00:39:10,020 --> 00:39:17,760
it and we had all kinds of issues like a

00:39:13,140 --> 00:39:19,470
code broken raspberry PI's software that

00:39:17,760 --> 00:39:21,030
didn't want to start up all kinds of

00:39:19,470 --> 00:39:35,940
crazy stuff so it's really a lot of

00:39:21,030 --> 00:39:38,609
hours in the end that's quite quickly

00:39:35,940 --> 00:39:40,920
actually because we noticed at first I

00:39:38,609 --> 00:39:42,330
displayed it at my company we do every

00:39:40,920 --> 00:39:45,180
week we present sessions to our

00:39:42,330 --> 00:39:48,030
colleagues and I use it there as well

00:39:45,180 --> 00:39:50,790
and people really like it people start

00:39:48,030 --> 00:39:54,030
coming to it and then we got the idea of

00:39:50,790 --> 00:39:56,790
showing it at a booth so in Holland or

00:39:54,030 --> 00:39:57,900
IOT tag days and our company had a booth

00:39:56,790 --> 00:39:59,430
there and they were like okay we need

00:39:57,900 --> 00:40:00,990
something to display there and I was

00:39:59,430 --> 00:40:03,720
like okay let's put the Lego trains

00:40:00,990 --> 00:40:05,609
there it will probably work by then so

00:40:03,720 --> 00:40:07,619
then we had to work long long days to

00:40:05,609 --> 00:40:09,270
get everything up and running and we

00:40:07,619 --> 00:40:11,730
discovered all the Wi-Fi issues and

00:40:09,270 --> 00:40:14,280
stuff like that so that's how it got

00:40:11,730 --> 00:40:16,680
started so now we use it sometimes or

00:40:14,280 --> 00:40:18,359
have used it at our booth I've given

00:40:16,680 --> 00:40:19,940
presentations basically all over the

00:40:18,359 --> 00:40:22,140
world about it

00:40:19,940 --> 00:40:24,839
it's a fun way to introduce some

00:40:22,140 --> 00:40:34,369
concepts and I mean everybody likes Lego

00:40:24,839 --> 00:40:36,810
right the code is actually a bit crappy

00:40:34,369 --> 00:40:37,859
so so we're a bit afraid of it if you

00:40:36,810 --> 00:40:40,619
want to see part of it or whatever

00:40:37,859 --> 00:40:42,270
sounds anymore tweet me and we'll make

00:40:40,619 --> 00:40:45,349
it available but we are a bit of shame

00:40:42,270 --> 00:40:45,349
to just put it on get up

00:40:51,760 --> 00:41:01,640
actually there are some blog posts on my

00:40:53,960 --> 00:41:04,670
company website the the Lego blocks you

00:41:01,640 --> 00:41:07,790
mean actually the Lego blocks we bought

00:41:04,670 --> 00:41:09,650
just to build our switches to for the

00:41:07,790 --> 00:41:11,960
Lego trains you only need a normal Lego

00:41:09,650 --> 00:41:13,640
train and the Raspberry Pi stuff and

00:41:11,960 --> 00:41:16,340
that's basically it so if you buy a

00:41:13,640 --> 00:41:18,440
standard Lego train kit you can get them

00:41:16,340 --> 00:41:21,140
playing around quite quickly with with

00:41:18,440 --> 00:41:24,550
Raspberry Pi and infrared transmitter

00:41:21,140 --> 00:41:26,870
battery pack and I forgot one thing I

00:41:24,550 --> 00:41:29,030
did one of the first slides it was

00:41:26,870 --> 00:41:30,800
mentioned if you have used if you have

00:41:29,030 --> 00:41:33,260
does stuff you can get up and running

00:41:30,800 --> 00:41:35,780
there is a some I believe those a

00:41:33,260 --> 00:41:38,030
Japanese guy wrote a C program that uses

00:41:35,780 --> 00:41:40,940
lyric the Linux infrared protocol and

00:41:38,030 --> 00:41:42,410
with that you can easily control the

00:41:40,940 --> 00:41:44,840
signals that you sent to the Lego

00:41:42,410 --> 00:41:46,520
infrared receiver but if you have any

00:41:44,840 --> 00:41:49,580
questions feel free to tweet me email me

00:41:46,520 --> 00:41:54,830
or whatever and I'll help you set up all

00:41:49,580 --> 00:41:55,670
right any more questions and thank you

00:41:54,830 --> 00:41:58,030
all for coming and have a good

00:41:55,670 --> 00:41:58,030

YouTube URL: https://www.youtube.com/watch?v=1xAe5a_XRho


