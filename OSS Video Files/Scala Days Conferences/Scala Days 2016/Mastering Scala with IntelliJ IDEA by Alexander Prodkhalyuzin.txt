Title: Mastering Scala with IntelliJ IDEA by Alexander Prodkhalyuzin
Publication date: 2017-01-19
Playlist: Scala Days 2016
Description: 
	This video was recorded at Scala Days Berlin 2016
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

Anstract:
Why do developers love IntelliJ IDEA? Because it takes care of all the routine and provides intelligent coding assistance. Once you master it, the productivity gains are quite surprising. In this session I'll show you the 30 hidden gems of IntelliJ IDEA that will help you become a more productive Scala developer.
Captions: 
	00:00:02,340 --> 00:00:09,190
so my name is Alexander post Ellison and

00:00:05,890 --> 00:00:13,030
today I want to share some knowledge

00:00:09,190 --> 00:00:15,280
about our product IntelliJ IDEA I'm team

00:00:13,030 --> 00:00:18,280
leader of Scala plugin for IntelliJ IDEA

00:00:15,280 --> 00:00:22,660
and I hope that everybody of you will

00:00:18,280 --> 00:00:25,270
learn something new today as I'm scallop

00:00:22,660 --> 00:00:30,160
loggin developer I know a lot about

00:00:25,270 --> 00:00:33,370
IntelliJ IDEA itself and recently we I

00:00:30,160 --> 00:00:39,460
participated in our internal JetBrains

00:00:33,370 --> 00:00:43,740
hackathon and I had an idea to solve my

00:00:39,460 --> 00:00:47,950
personal personal problem because I

00:00:43,740 --> 00:00:50,770
usually type small popular identifiers

00:00:47,950 --> 00:00:56,079
like string without out of completion

00:00:50,770 --> 00:00:59,050
but sometimes I do very obvious typos

00:00:56,079 --> 00:01:02,410
and intelligent idea can't help me with

00:00:59,050 --> 00:01:05,680
that so my idea was to implement some

00:01:02,410 --> 00:01:10,060
typing correction plugin which corrects

00:01:05,680 --> 00:01:14,889
this on the fly but why I'm telling you

00:01:10,060 --> 00:01:17,770
about that one guy which is which is

00:01:14,889 --> 00:01:20,909
more experienced than me I mean even

00:01:17,770 --> 00:01:24,789
even more experienced with IntelliJ IDEA

00:01:20,909 --> 00:01:27,520
he said me that this problem I mean a

00:01:24,789 --> 00:01:31,840
problem about strings was soft in Java

00:01:27,520 --> 00:01:35,560
actually they have a life template to

00:01:31,840 --> 00:01:39,340
have string into identifiers only in

00:01:35,560 --> 00:01:42,009
three keystrokes so the funny thing and

00:01:39,340 --> 00:01:44,909
I really was impressed because I didn't

00:01:42,009 --> 00:01:47,679
know about this life template and

00:01:44,909 --> 00:01:50,459
probably I will implement the similar

00:01:47,679 --> 00:01:53,679
thing in first color as well but

00:01:50,459 --> 00:01:57,759
interesting thing that even one you

00:01:53,679 --> 00:02:01,299
think can could impress me a lot I think

00:01:57,759 --> 00:02:05,740
that project was important for me just

00:02:01,299 --> 00:02:11,140
to realize that new features exist in

00:02:05,740 --> 00:02:13,840
IntelliJ IDEA so let's play the game I'm

00:02:11,140 --> 00:02:14,780
giving you some tips about in IntelliJ

00:02:13,840 --> 00:02:16,840
IDEA and

00:02:14,780 --> 00:02:23,150
you're calculating number of new things

00:02:16,840 --> 00:02:26,390
which was new to you and also for the

00:02:23,150 --> 00:02:30,080
beginning let me tell a story about our

00:02:26,390 --> 00:02:32,120
users so it's about you

00:02:30,080 --> 00:02:36,340
we usually participate in conferences

00:02:32,120 --> 00:02:39,890
like this one and sometime people

00:02:36,340 --> 00:02:42,560
complains about problems they have with

00:02:39,890 --> 00:02:47,840
IntelliJ IDEA so we can see how they

00:02:42,560 --> 00:02:54,320
actually work with IntelliJ IDEA and we

00:02:47,840 --> 00:02:59,540
can see that we can declare some state

00:02:54,320 --> 00:03:06,080
that like about money that you know that

00:02:59,540 --> 00:03:09,560
80% of people own 20% of people own more

00:03:06,080 --> 00:03:12,709
than 80% of money so it's the same

00:03:09,560 --> 00:03:15,380
amount of people uses almost all

00:03:12,709 --> 00:03:19,360
features of IntelliJ IDEA but most

00:03:15,380 --> 00:03:22,549
people use just small amount of them and

00:03:19,360 --> 00:03:25,640
that's the reason why we are more

00:03:22,549 --> 00:03:28,390
focused right now on simplifying

00:03:25,640 --> 00:03:31,760
features improving discoverability and

00:03:28,390 --> 00:03:36,070
usability of them and that's also one of

00:03:31,760 --> 00:03:41,209
the reasons of this talk just to improve

00:03:36,070 --> 00:03:44,329
skills of people of our users so the

00:03:41,209 --> 00:03:47,540
first tip will be about activator

00:03:44,329 --> 00:03:51,079
templates so you have them in IntelliJ

00:03:47,540 --> 00:03:54,280
IDEA right from the new project we can

00:03:51,079 --> 00:03:57,190
open new project press next here

00:03:54,280 --> 00:04:02,350
activator we can choose something like

00:03:57,190 --> 00:04:08,000
hello world hello Scala it's here and

00:04:02,350 --> 00:04:14,790
finish and now we need to wait a bit for

00:04:08,000 --> 00:04:19,250
SBT a bit a bit more and a bit more

00:04:14,790 --> 00:04:28,500
okay so now we can just choose main

00:04:19,250 --> 00:04:31,500
class and run it okay so now we have the

00:04:28,500 --> 00:04:35,340
fastest way to run hello world project

00:04:31,500 --> 00:04:38,100
in IntelliJ IDEA but did I mention that

00:04:35,340 --> 00:04:42,180
you shouldn't use Mouse at all

00:04:38,100 --> 00:04:44,550
and I use it I use only mass all right

00:04:42,180 --> 00:04:47,520
now so we have to start over again

00:04:44,550 --> 00:04:50,810
just to show how to did without with

00:04:47,520 --> 00:04:55,050
only keyboard so let me close it and

00:04:50,810 --> 00:04:59,070
first important tip is about go to

00:04:55,050 --> 00:05:03,380
action action and when you don't

00:04:59,070 --> 00:05:07,380
remember keyboard shortcut you can use

00:05:03,380 --> 00:05:10,220
this action and then you you just need

00:05:07,380 --> 00:05:13,530
to remember name of this action and

00:05:10,220 --> 00:05:16,470
before that I also don't want to tell

00:05:13,530 --> 00:05:20,580
you keyboard shortcuts allowed because

00:05:16,470 --> 00:05:25,380
it's too boring and it's also almost

00:05:20,580 --> 00:05:29,010
impossible to remember from this live

00:05:25,380 --> 00:05:31,530
presentation so I hope that the video

00:05:29,010 --> 00:05:33,090
will be recorded and available later on

00:05:31,530 --> 00:05:38,430
the Internet

00:05:33,090 --> 00:05:40,949
so I will enable shortcuts here so you

00:05:38,430 --> 00:05:45,539
will see in the boiling of the screen

00:05:40,949 --> 00:05:49,229
all action names and shortcuts so now we

00:05:45,539 --> 00:05:54,150
can invoke a go-to action action and

00:05:49,229 --> 00:05:56,460
here you can type anything any name of

00:05:54,150 --> 00:05:58,530
the action so now we can put here

00:05:56,460 --> 00:06:02,250
something like project choose new

00:05:58,530 --> 00:06:05,810
project so we did it from keyboard then

00:06:02,250 --> 00:06:05,810
we can just choose activator

00:06:09,469 --> 00:06:23,339
what it's too too low yeah okay

00:06:18,029 --> 00:06:26,599
I'll name it did so on so go to X

00:06:23,339 --> 00:06:30,449
connection is common shift 8 for Mac OS

00:06:26,599 --> 00:06:34,319
so now we can find our hello scour with

00:06:30,449 --> 00:06:38,819
speed search finish so new project is

00:06:34,319 --> 00:06:43,800
opened now go to class command oh it's

00:06:38,819 --> 00:06:47,909
not ok we need to wait for SBT again go

00:06:43,800 --> 00:06:53,879
to class hello and ran from context menu

00:06:47,909 --> 00:06:56,849
control shift R so we can run any main

00:06:53,879 --> 00:06:59,819
class right from keyboard so it's it's

00:06:56,849 --> 00:07:05,639
again the same result but only with

00:06:59,819 --> 00:07:08,759
keyboard ok but now you can ask a

00:07:05,639 --> 00:07:12,059
question is it really IntelliJ IDEA I

00:07:08,759 --> 00:07:15,870
mean that it looks like some very plain

00:07:12,059 --> 00:07:19,889
text editor actually it's true it's

00:07:15,870 --> 00:07:24,360
IntelliJ IDEA and I just enabled

00:07:19,889 --> 00:07:26,879
destruction free mode so in add action I

00:07:24,360 --> 00:07:29,909
can choose put destruction toggle

00:07:26,879 --> 00:07:32,819
distraction free mall and again put it

00:07:29,909 --> 00:07:38,159
again and it's it's more it's more looks

00:07:32,819 --> 00:07:39,959
like IntelliJ IDEA right now but the

00:07:38,159 --> 00:07:44,099
important thing is that in

00:07:39,959 --> 00:07:47,490
distraction-free mode you can you you

00:07:44,099 --> 00:07:50,399
you will avoid using mouses in usual

00:07:47,490 --> 00:07:53,819
cases so you will have to learn a lot of

00:07:50,399 --> 00:07:56,580
keyboard shortcuts and it will make you

00:07:53,819 --> 00:08:03,269
much more productive with IntelliJ IDEA

00:07:56,580 --> 00:08:05,639
and now I will teach you how to use this

00:08:03,269 --> 00:08:08,129
distraction free mode before we will

00:08:05,639 --> 00:08:11,189
continue with color specific features

00:08:08,129 --> 00:08:13,199
because otherwise you will tell me that

00:08:11,189 --> 00:08:14,689
it's not possible to use distraction

00:08:13,199 --> 00:08:17,899
promote at all

00:08:14,689 --> 00:08:21,070
so let's start from navigation features

00:08:17,899 --> 00:08:25,470
it's very simple and obvious

00:08:21,070 --> 00:08:28,390
and we always but let me open some

00:08:25,470 --> 00:08:33,280
project it's our plugin project which is

00:08:28,390 --> 00:08:35,650
more interesting about navigation so we

00:08:33,280 --> 00:08:40,050
we always need something like Google

00:08:35,650 --> 00:08:43,320
search in big projects because we need

00:08:40,050 --> 00:08:48,520
which sometimes don't know where to find

00:08:43,320 --> 00:08:50,740
some class so the first tip about

00:08:48,520 --> 00:08:55,390
navigation will be about search

00:08:50,740 --> 00:08:59,470
everywhere feature is double-shift it it

00:08:55,390 --> 00:09:02,620
makes all searches altogether personal

00:08:59,470 --> 00:09:05,020
me I don't like this because it's it's a

00:09:02,620 --> 00:09:09,100
bit slower than just go to class go to

00:09:05,020 --> 00:09:12,220
symbol but some people like it because

00:09:09,100 --> 00:09:13,840
it's only one keyboard shortcut you just

00:09:12,220 --> 00:09:16,570
don't need to remember all these

00:09:13,840 --> 00:09:19,210
features so it's double fish shift and

00:09:16,570 --> 00:09:22,750
you can put here what you want and find

00:09:19,210 --> 00:09:28,480
lots of things right here including even

00:09:22,750 --> 00:09:33,610
actions so my tip is just try it if it's

00:09:28,480 --> 00:09:36,280
suitable for you or not so and as for

00:09:33,610 --> 00:09:38,500
ordinary features navigations like go to

00:09:36,280 --> 00:09:41,340
class you can invoke for example you

00:09:38,500 --> 00:09:45,330
want to fix something about implicit

00:09:41,340 --> 00:09:48,790
search in scala plugin so you can open

00:09:45,330 --> 00:09:51,430
implicit right here implicit and you can

00:09:48,790 --> 00:09:54,040
see that implicit collect is probably

00:09:51,430 --> 00:09:57,610
what you are looking for now you can

00:09:54,040 --> 00:10:01,270
take a look for this class and probably

00:09:57,610 --> 00:10:04,140
close scala plugin project and forget it

00:10:01,270 --> 00:10:04,140
is a nightmare

00:10:04,500 --> 00:10:14,260
but generally we really found what we

00:10:10,690 --> 00:10:17,440
looked for another thing is that you can

00:10:14,260 --> 00:10:20,580
use camel humps everywhere in any search

00:10:17,440 --> 00:10:26,230
in any speed search so camel humps is

00:10:20,580 --> 00:10:28,720
like uppercase letters so even even in

00:10:26,230 --> 00:10:33,570
find action action we can put here like

00:10:28,720 --> 00:10:37,630
split but we can see here horizontal

00:10:33,570 --> 00:10:39,730
vertical now we can just put V and it

00:10:37,630 --> 00:10:42,580
would it will be split vertically action

00:10:39,730 --> 00:10:45,220
so always use camel arms to simplify

00:10:42,580 --> 00:10:51,250
searches so we can find split vertical

00:10:45,220 --> 00:10:58,630
even with three three letters so and

00:10:51,250 --> 00:11:01,230
then we can just an split so that's all

00:10:58,630 --> 00:11:05,589
about navigation we can tell much more

00:11:01,230 --> 00:11:09,550
but it's it's more about not for Scala

00:11:05,589 --> 00:11:13,029
probably conference so let me finish

00:11:09,550 --> 00:11:15,959
with all destruction promote things and

00:11:13,029 --> 00:11:19,149
we will continue with Scala things

00:11:15,959 --> 00:11:22,540
what's next its navigation bar in right

00:11:19,149 --> 00:11:25,990
now we don't have navigation bar in our

00:11:22,540 --> 00:11:29,230
user interface but why why would we need

00:11:25,990 --> 00:11:35,160
that because we can call it on demand so

00:11:29,230 --> 00:11:39,100
I can call comment up arrow and see this

00:11:35,160 --> 00:11:42,850
navigation bar right here so I can put

00:11:39,100 --> 00:11:48,730
here using its very small font here but

00:11:42,850 --> 00:11:51,760
I can't improve that right now but

00:11:48,730 --> 00:11:55,120
believe me it works and it's it's it's

00:11:51,760 --> 00:11:59,079
really good not on on presentation so

00:11:55,120 --> 00:12:02,350
now you can even create new classes

00:11:59,079 --> 00:12:05,589
right from navigation bar so comment and

00:12:02,350 --> 00:12:07,990
to create our class and everything is

00:12:05,589 --> 00:12:10,750
very good

00:12:07,990 --> 00:12:13,750
next thing is tops you can see that we

00:12:10,750 --> 00:12:16,300
don't have tabs like in Google from but

00:12:13,750 --> 00:12:18,670
even in Google from I don't like tabs

00:12:16,300 --> 00:12:21,910
because at some point you can see that

00:12:18,670 --> 00:12:26,020
you have 100 tabs and and your memory is

00:12:21,910 --> 00:12:29,589
over because of Google from so taps is

00:12:26,020 --> 00:12:33,060
not really good idea and in IntelliJ

00:12:29,589 --> 00:12:37,570
IDEA you can use actually just recent

00:12:33,060 --> 00:12:40,089
files its comment E and what is better

00:12:37,570 --> 00:12:42,820
in recent files compared to tabs because

00:12:40,089 --> 00:12:45,160
you have three search here as well so we

00:12:42,820 --> 00:12:49,690
can put here like

00:12:45,160 --> 00:12:52,510
stru okay statement or something like

00:12:49,690 --> 00:12:55,030
this and you can go to this class

00:12:52,510 --> 00:12:59,590
directly you don't have speech search in

00:12:55,030 --> 00:13:02,530
tabs and what what else in recent files

00:12:59,590 --> 00:13:05,740
you can use recently edited files like

00:13:02,530 --> 00:13:12,390
common shift e so it's even smaller set

00:13:05,740 --> 00:13:17,200
of your your so it's actual set of your

00:13:12,390 --> 00:13:20,140
changes and if you are really lazy

00:13:17,200 --> 00:13:24,250
developer as all developers all

00:13:20,140 --> 00:13:29,650
developers are lazy usually so you can

00:13:24,250 --> 00:13:33,250
just do it even with with less number of

00:13:29,650 --> 00:13:36,310
shortcuts by using switch so in with

00:13:33,250 --> 00:13:41,410
ctrl tab we can switch to the previous

00:13:36,310 --> 00:13:46,350
file with only one shortcut and return

00:13:41,410 --> 00:13:51,940
back here and next thing is run

00:13:46,350 --> 00:13:56,230
configurations so now we can't run run

00:13:51,940 --> 00:13:59,230
project or main classes through the user

00:13:56,230 --> 00:14:02,800
interface so we still can call it on

00:13:59,230 --> 00:14:05,950
demand so for example if we want to

00:14:02,800 --> 00:14:09,310
debug something we can run control

00:14:05,950 --> 00:14:12,390
option D and choose any run

00:14:09,310 --> 00:14:17,410
configuration we want or comment control

00:14:12,390 --> 00:14:20,050
option our to run it or debug or even

00:14:17,410 --> 00:14:23,770
edit configuration so a lot of things is

00:14:20,050 --> 00:14:27,040
available here and the last thing which

00:14:23,770 --> 00:14:29,530
is not available here is to windows so

00:14:27,040 --> 00:14:34,510
sum of two windows like project view you

00:14:29,530 --> 00:14:37,240
can call own demand with focus exact

00:14:34,510 --> 00:14:39,790
place where we are I mean our file so

00:14:37,240 --> 00:14:42,400
implicit collector we can call it like

00:14:39,790 --> 00:14:46,240
option f1 then select target or in

00:14:42,400 --> 00:14:52,330
project view and we in exact place where

00:14:46,240 --> 00:14:54,880
the simplicity collector is some of them

00:14:52,330 --> 00:14:57,400
we can call like structure view we don't

00:14:54,880 --> 00:15:00,600
need structure view always open

00:14:57,400 --> 00:15:04,930
where we can call it on demand with

00:15:00,600 --> 00:15:08,800
comment f12 and then we can use speed

00:15:04,930 --> 00:15:12,310
search to find a required method like

00:15:08,800 --> 00:15:18,250
collect and then navigate to this method

00:15:12,310 --> 00:15:20,440
and some almost all of to windows is

00:15:18,250 --> 00:15:24,070
available through numbers so like

00:15:20,440 --> 00:15:27,760
project you is common one we can open

00:15:24,070 --> 00:15:32,590
and close that comment nice like version

00:15:27,760 --> 00:15:36,520
control tool window and then we can do

00:15:32,590 --> 00:15:40,870
something in this and the final thing is

00:15:36,520 --> 00:15:43,810
that you have recently recent files and

00:15:40,870 --> 00:15:46,450
it also has all of tog windows so you

00:15:43,810 --> 00:15:50,620
can open recent files put here something

00:15:46,450 --> 00:15:54,180
like SBT and you will open them SBT to

00:15:50,620 --> 00:15:58,030
window to refresh for example SBT and

00:15:54,180 --> 00:16:01,150
all two windows we can close or open all

00:15:58,030 --> 00:16:03,910
together by common shift f12 so just

00:16:01,150 --> 00:16:07,390
hire all two windows and return back to

00:16:03,910 --> 00:16:12,220
focused development in distraction-free

00:16:07,390 --> 00:16:13,960
mode so that's all about distraction

00:16:12,220 --> 00:16:18,600
free mode and we will continue with

00:16:13,960 --> 00:16:21,940
Scala I want to say that this mode is my

00:16:18,600 --> 00:16:25,030
vision of how to use IntelliJ IDEA so

00:16:21,940 --> 00:16:27,550
but I hope that you you you you can find

00:16:25,030 --> 00:16:31,240
some inspiration some new features some

00:16:27,550 --> 00:16:34,150
shortcuts how to use that so I think

00:16:31,240 --> 00:16:34,870
that everybody has to know that it

00:16:34,150 --> 00:16:38,670
exists

00:16:34,870 --> 00:16:42,750
and it has lots of cool things and

00:16:38,670 --> 00:16:48,220
possibilities especially on mark air of

00:16:42,750 --> 00:16:51,780
11th inches so then it's good idea to

00:16:48,220 --> 00:16:55,420
use this traction free mode so let's

00:16:51,780 --> 00:17:00,280
continue with scour and before that let

00:16:55,420 --> 00:17:06,690
me tell you some one more story I hope

00:17:00,280 --> 00:17:09,780
you like stores so at the end of 2007 I

00:17:06,690 --> 00:17:15,569
when I tried

00:17:09,780 --> 00:17:20,930
applied to JetBrains they asked me to do

00:17:15,569 --> 00:17:23,670
some test project to see my skills and

00:17:20,930 --> 00:17:27,600
what I want to say that IntelliJ IDEA

00:17:23,670 --> 00:17:31,050
can help you learning Scala and that

00:17:27,600 --> 00:17:33,120
time it could help me to learn Java but

00:17:31,050 --> 00:17:37,440
I didn't know that I didn't know what

00:17:33,120 --> 00:17:46,260
the trains do and I sent my project as

00:17:37,440 --> 00:17:48,720
Eclipse project it it was okay actually

00:17:46,260 --> 00:17:55,470
because they just asked me to resend it

00:17:48,720 --> 00:18:00,690
mean as IntelliJ project they didn't

00:17:55,470 --> 00:18:03,120
want to open eclipse really but I just

00:18:00,690 --> 00:18:06,470
could look more professional because I

00:18:03,120 --> 00:18:12,540
ontology has some inspections which

00:18:06,470 --> 00:18:16,740
would work that time for my code so the

00:18:12,540 --> 00:18:21,480
same thing is in Java or in Scala sorry

00:18:16,740 --> 00:18:25,200
so let's let's move to presentation mode

00:18:21,480 --> 00:18:27,090
not now because presentation mode is

00:18:25,200 --> 00:18:29,790
something similar to distraction-free

00:18:27,090 --> 00:18:33,240
mode but it's full screen so it's only

00:18:29,790 --> 00:18:37,200
cold front right here and everybody who

00:18:33,240 --> 00:18:40,380
presents live demos should use actually

00:18:37,200 --> 00:18:44,850
presentation mode because it's much

00:18:40,380 --> 00:18:48,000
better and then you should use lots of

00:18:44,850 --> 00:18:51,300
things I just showed about keyboard

00:18:48,000 --> 00:18:58,160
shortcuts to Windows and so on so let's

00:18:51,300 --> 00:19:02,250
open some class and here I prepared some

00:18:58,160 --> 00:19:09,180
word code so just raise hands when you

00:19:02,250 --> 00:19:12,050
understand what this code about I mean

00:19:09,180 --> 00:19:12,050
this first line

00:19:13,909 --> 00:19:20,429
okay you are not just active to raise

00:19:17,940 --> 00:19:26,099
hands because developers probably so

00:19:20,429 --> 00:19:30,179
lazy so intelligent LP with that because

00:19:26,099 --> 00:19:33,749
we can just replace with non empty okay

00:19:30,179 --> 00:19:35,399
that's fine right now it helps that you

00:19:33,749 --> 00:19:38,489
can replace it's just with the exist

00:19:35,399 --> 00:19:41,669
mantis because it can simplify your code

00:19:38,489 --> 00:19:44,419
and then you actually can replace with

00:19:41,669 --> 00:19:47,940
contains methods so this was all about

00:19:44,419 --> 00:19:54,299
contains and in Scala you you are able

00:19:47,940 --> 00:19:56,339
to write its in long way so so that's

00:19:54,299 --> 00:20:01,580
what I'm talking about that intelligent

00:19:56,339 --> 00:20:05,190
help you to learn that in purchase it's

00:20:01,580 --> 00:20:10,219
it's on the fly so you don't need to run

00:20:05,190 --> 00:20:14,029
some specific action for that so we have

00:20:10,219 --> 00:20:17,249
some new inspections sometimes we

00:20:14,029 --> 00:20:19,799
develop we develop scarlet dragon so

00:20:17,249 --> 00:20:22,589
something you has to be implemented and

00:20:19,799 --> 00:20:25,080
for example one of new instruction is

00:20:22,589 --> 00:20:30,419
something like unnecessary partial

00:20:25,080 --> 00:20:34,529
function which is also you can see that

00:20:30,419 --> 00:20:38,190
in our code base but what to do we want

00:20:34,529 --> 00:20:40,200
to get rid of all of them it's quite

00:20:38,190 --> 00:20:42,570
simple to do in analogy we can invoke

00:20:40,200 --> 00:20:45,469
navigation bar for example I want to get

00:20:42,570 --> 00:20:52,109
rid of all of them in worksheet package

00:20:45,469 --> 00:20:55,799
and right okay sorry right from here I

00:20:52,109 --> 00:21:01,639
can walk go to action action and then

00:20:55,799 --> 00:21:04,649
run here inspection by name so I can

00:21:01,639 --> 00:21:07,369
around unnecessary partial function

00:21:04,649 --> 00:21:13,679
inspection or I also can run all of

00:21:07,369 --> 00:21:16,919
inspections it's it's up to you so I can

00:21:13,679 --> 00:21:19,950
choose directory of worksheet and ran it

00:21:16,919 --> 00:21:23,460
so we found just fourteen warnings here

00:21:19,950 --> 00:21:25,830
and the interesting thing that I can fix

00:21:23,460 --> 00:21:28,830
all of them right from here

00:21:25,830 --> 00:21:35,129
so convert an anonymous function so and

00:21:28,830 --> 00:21:38,429
now we don't see here this case and you

00:21:35,129 --> 00:21:43,200
see here more convenient simple

00:21:38,429 --> 00:21:45,480
anonymous function so as we any

00:21:43,200 --> 00:21:48,029
worksheet package I can show you

00:21:45,480 --> 00:21:52,649
something about worksheet who know what

00:21:48,029 --> 00:21:56,789
is worksheet is so almost everybody

00:21:52,649 --> 00:21:59,509
you can run were in in in light way

00:21:56,789 --> 00:22:04,470
so you don't need physical file for that

00:21:59,509 --> 00:22:07,950
and we can you can run action about

00:22:04,470 --> 00:22:10,470
creating collide cut realized color

00:22:07,950 --> 00:22:14,609
worksheet and now we have a worksheet

00:22:10,470 --> 00:22:16,859
which is just for experimenting with

00:22:14,609 --> 00:22:19,679
your project you you don't need to

00:22:16,859 --> 00:22:23,070
create some physical file and it's like

00:22:19,679 --> 00:22:27,649
new console you can open it and run and

00:22:23,070 --> 00:22:32,779
experiment of course you still can

00:22:27,649 --> 00:22:36,450
create it physical so we can open a

00:22:32,779 --> 00:22:43,049
navigation bar create here use P search

00:22:36,450 --> 00:22:46,649
and create physical test worksheet and

00:22:43,049 --> 00:22:49,350
now we I can I can show you some small

00:22:46,649 --> 00:22:52,799
refactorings I mean intentions everybody

00:22:49,350 --> 00:22:55,559
no intentions but a lot of intentions

00:22:52,799 --> 00:22:58,019
are just hidden because it's implemented

00:22:55,559 --> 00:23:00,299
but undocumented actually it's

00:22:58,019 --> 00:23:03,960
documented I'll show here you're aware

00:23:00,299 --> 00:23:07,649
but not everybody use whole power of

00:23:03,960 --> 00:23:14,100
intentions so let right let's write some

00:23:07,649 --> 00:23:17,100
code like list of 2 3 9 then map

00:23:14,100 --> 00:23:22,609
something like here we can for example

00:23:17,100 --> 00:23:27,299
invoke smart completion to complete

00:23:22,609 --> 00:23:31,289
anonymous function name it and then put

00:23:27,299 --> 00:23:33,919
I plus 1 but for example interesting

00:23:31,289 --> 00:23:36,690
thinker then we can convert it into

00:23:33,919 --> 00:23:38,450
implicit anonymous function so we can

00:23:36,690 --> 00:23:40,700
invoke

00:23:38,450 --> 00:23:43,340
intention and just just introduce

00:23:40,700 --> 00:23:45,980
implicit parameter it will simplify

00:23:43,340 --> 00:23:48,140
things we can do it back introduce

00:23:45,980 --> 00:23:52,670
explicit parameter so intention is just

00:23:48,140 --> 00:23:56,570
small refactorings another example is

00:23:52,670 --> 00:24:00,590
with strings so we can put let me

00:23:56,570 --> 00:24:03,230
introduce variable list so we can for

00:24:00,590 --> 00:24:09,530
example we want to see this list you can

00:24:03,230 --> 00:24:12,830
list values plus list plus exclamation

00:24:09,530 --> 00:24:16,300
mark but we know about interpolation

00:24:12,830 --> 00:24:19,430
strings which we can just invoke

00:24:16,300 --> 00:24:22,490
intention and convert to interpolate

00:24:19,430 --> 00:24:24,860
shrink quite useful but as for strings

00:24:22,490 --> 00:24:28,870
even simple thing is available we can

00:24:24,860 --> 00:24:32,630
put here starts writing new string right

00:24:28,870 --> 00:24:36,680
values and now we can put dollar sign

00:24:32,630 --> 00:24:38,600
and see out a completion feature here so

00:24:36,680 --> 00:24:41,170
we just can invoke enter and

00:24:38,600 --> 00:24:45,980
interpolated string keys right here

00:24:41,170 --> 00:24:48,920
so now we can finish it in other way but

00:24:45,980 --> 00:24:51,410
if we have a lot of legacy code these

00:24:48,920 --> 00:24:54,050
places we can use the intention action

00:24:51,410 --> 00:24:58,460
to convert everything into interpolated

00:24:54,050 --> 00:25:02,840
string so where to see all intentions

00:24:58,460 --> 00:25:07,730
list we can open settings here we can

00:25:02,840 --> 00:25:10,130
find for intentions and in settings we

00:25:07,730 --> 00:25:12,320
can see whole list of intentions is not

00:25:10,130 --> 00:25:18,200
on the scholar and for action scripts as

00:25:12,320 --> 00:25:21,190
well who know what is external script so

00:25:18,200 --> 00:25:25,790
here we can filter by scholar and see

00:25:21,190 --> 00:25:29,180
lots of inspection intentions here very

00:25:25,790 --> 00:25:32,240
similar so simple - so we can see here

00:25:29,180 --> 00:25:35,360
that some inspections about intentions

00:25:32,240 --> 00:25:40,130
about for comprehension so let's take a

00:25:35,360 --> 00:25:43,280
look for them so for example 1 2 4 from

00:25:40,130 --> 00:25:45,490
list and now we realize we wanted curly

00:25:43,280 --> 00:25:51,520
braces of even converted curly braces

00:25:45,490 --> 00:25:57,970
then put if not the close to 2

00:25:51,520 --> 00:26:03,160
then for example yield how so now we

00:25:57,970 --> 00:26:05,860
just did some filtering and another

00:26:03,160 --> 00:26:10,620
intention is to take a look how it looks

00:26:05,860 --> 00:26:13,210
really in Scala language so we can use

00:26:10,620 --> 00:26:18,300
intention to convert to dis sugar right

00:26:13,210 --> 00:26:23,679
this expression one time the second time

00:26:18,300 --> 00:26:26,650
so it's something like this one but in

00:26:23,679 --> 00:26:31,240
in the nightly bills we have even more

00:26:26,650 --> 00:26:36,240
interesting way how to see the sugar

00:26:31,240 --> 00:26:41,320
eyes for expressions so let's go to

00:26:36,240 --> 00:26:45,100
prepare code explains color code so it's

00:26:41,320 --> 00:26:49,990
some very very simple code like hello

00:26:45,100 --> 00:26:55,000
world similar to hello world but if we

00:26:49,990 --> 00:26:58,690
do explain Scala code action with lots

00:26:55,000 --> 00:27:02,730
of explanations we can see that it's

00:26:58,690 --> 00:27:06,850
much much harder than it looked before

00:27:02,730 --> 00:27:10,660
so we can also enable soft softwraps

00:27:06,850 --> 00:27:12,790
to see whole string so you can see a lot

00:27:10,660 --> 00:27:16,600
of interesting things like open strings

00:27:12,790 --> 00:27:24,460
string can do from and tuple 2 and so on

00:27:16,600 --> 00:27:28,170
quite fine so now let's continue with

00:27:24,460 --> 00:27:31,679
more features about Scala plugin

00:27:28,170 --> 00:27:37,390
so let me show you something like class

00:27:31,679 --> 00:27:41,350
it's C its class representation in our a

00:27:37,390 --> 00:27:43,510
steed internal presentation and for

00:27:41,350 --> 00:27:45,520
example we want to create a new one so

00:27:43,510 --> 00:27:48,370
after you you can invoke smart

00:27:45,520 --> 00:27:52,660
completion and to see all inheritors of

00:27:48,370 --> 00:27:54,480
our c class and vogue that and then put

00:27:52,660 --> 00:27:57,550
something anything

00:27:54,480 --> 00:28:01,140
it's quite simple probably everybody

00:27:57,550 --> 00:28:04,330
knows that what is more interesting is

00:28:01,140 --> 00:28:07,299
for example we want to put class

00:28:04,330 --> 00:28:10,750
and then we will qualify the name it's

00:28:07,299 --> 00:28:13,360
funny thing in in our code base that get

00:28:10,750 --> 00:28:16,510
qualified name is a wrong function to

00:28:13,360 --> 00:28:18,820
invoke you just need qualified name but

00:28:16,510 --> 00:28:22,000
there it it it will be added only

00:28:18,820 --> 00:28:26,500
through the extension implicit

00:28:22,000 --> 00:28:29,529
conversion so how to remember where this

00:28:26,500 --> 00:28:35,409
extension implicit conversion is we can

00:28:29,529 --> 00:28:38,620
find the just invoking second second

00:28:35,409 --> 00:28:41,549
outer completion so now you can see that

00:28:38,620 --> 00:28:45,190
we have C class next class with

00:28:41,549 --> 00:28:47,139
qualified name function invoke it and

00:28:45,190 --> 00:28:50,260
import for that will be added

00:28:47,139 --> 00:28:53,200
automatically so it's quite useful when

00:28:50,260 --> 00:28:57,220
you don't need to remember all your

00:28:53,200 --> 00:29:00,130
extensions in your code

00:28:57,220 --> 00:29:02,950
then we can we want for example to put

00:29:00,130 --> 00:29:05,740
name equals class qualified name but for

00:29:02,950 --> 00:29:13,149
example it's not just drink it's option

00:29:05,740 --> 00:29:15,610
of string so it's right here but we have

00:29:13,149 --> 00:29:17,669
also something like some smart

00:29:15,610 --> 00:29:21,070
completion so we can invoke that and

00:29:17,669 --> 00:29:24,039
just choose qualified name and some will

00:29:21,070 --> 00:29:26,980
be added automatically here as well so

00:29:24,039 --> 00:29:29,799
we have a lot of interesting thing in

00:29:26,980 --> 00:29:32,200
smart completion so I want just to

00:29:29,799 --> 00:29:34,750
inspire you to try smart completions as

00:29:32,200 --> 00:29:39,179
well and probably give us feedback to

00:29:34,750 --> 00:29:43,260
improve that this feature is well and

00:29:39,179 --> 00:29:46,210
now let's go to something even more

00:29:43,260 --> 00:29:51,159
complicated so I am talking about my

00:29:46,210 --> 00:29:55,210
courses in in our code base will also

00:29:51,159 --> 00:29:58,269
have my courses it's very good thing so

00:29:55,210 --> 00:30:03,519
for example we have macro annotation I

00:29:58,269 --> 00:30:10,139
cashed so we can cache any function just

00:30:03,519 --> 00:30:13,600
by using annotation and sometimes it's

00:30:10,139 --> 00:30:17,080
actually not sometimes it's always hard

00:30:13,600 --> 00:30:20,139
to implement macro annotation

00:30:17,080 --> 00:30:24,250
because you need to do a lot of

00:30:20,139 --> 00:30:27,639
iterations about that to understand how

00:30:24,250 --> 00:30:30,190
this macro works and to understand quasi

00:30:27,639 --> 00:30:34,480
quotes and it's it's it's a lot of time

00:30:30,190 --> 00:30:40,570
and in IntelliJ IDEA you we can help a

00:30:34,480 --> 00:30:45,190
lot you just need to enable so let's go

00:30:40,570 --> 00:30:49,330
to build SBT you why macro debug light

00:30:45,190 --> 00:30:51,940
and then you can use quite new feature

00:30:49,330 --> 00:30:55,360
about macro expansion in IntelliJ IDEA

00:30:51,940 --> 00:30:57,549
so let's open sea for statement in pool

00:30:55,360 --> 00:31:01,840
for example we have here example of

00:30:57,549 --> 00:31:03,700
cached so it's it's one of the ways in

00:31:01,840 --> 00:31:08,649
IntelliJ to district arise for

00:31:03,700 --> 00:31:11,649
expression I showed you and it's cache

00:31:08,649 --> 00:31:15,519
function but in intelligent we can

00:31:11,649 --> 00:31:20,559
expand it in what is going in our actual

00:31:15,519 --> 00:31:23,190
markers so it a lot of thing is here so

00:31:20,559 --> 00:31:27,549
we can create few local volatile

00:31:23,190 --> 00:31:30,250
variables and then expand it into very

00:31:27,549 --> 00:31:34,149
complicated code it's not very well

00:31:30,250 --> 00:31:39,070
because it's pretty printed Scala

00:31:34,149 --> 00:31:42,039
compiler trees and it's not real Scala

00:31:39,070 --> 00:31:45,190
code actually but still it will help a

00:31:42,039 --> 00:31:51,750
lot in understanding what's happening

00:31:45,190 --> 00:31:58,690
with your macros and tomorrow in Eugene

00:31:51,750 --> 00:32:03,210
brocco talk will show you the similar

00:31:58,690 --> 00:32:08,559
feature with meta which is macro version

00:32:03,210 --> 00:32:12,789
2.0 and it will be much easier to use

00:32:08,559 --> 00:32:18,789
and so I I really recommend you to take

00:32:12,789 --> 00:32:22,000
a look for this talk so though I think

00:32:18,789 --> 00:32:23,889
actually what I want to show you is

00:32:22,000 --> 00:32:27,250
about implicit conversions and

00:32:23,889 --> 00:32:30,659
parameters I wanted to show you a few

00:32:27,250 --> 00:32:34,720
and discoverable feature about debugger

00:32:30,659 --> 00:32:38,350
but after three people asked me about

00:32:34,720 --> 00:32:41,559
how to see which implicit conversion

00:32:38,350 --> 00:32:44,799
were used in some exact place I decided

00:32:41,559 --> 00:32:48,610
to change this place to show you our few

00:32:44,799 --> 00:32:53,529
implicit features so let's open any

00:32:48,610 --> 00:32:58,140
place and let's do some code life coding

00:32:53,529 --> 00:33:02,019
so let's test dot R so it's implicit

00:32:58,140 --> 00:33:05,200
extension function and we want to

00:33:02,019 --> 00:33:09,340
understand which implicit converted this

00:33:05,200 --> 00:33:14,620
string now we can invoke go to action

00:33:09,340 --> 00:33:17,320
action and just put implicit now lists

00:33:14,620 --> 00:33:19,720
it so we have conversion and parameters

00:33:17,320 --> 00:33:22,480
here you can just invoke this conversion

00:33:19,720 --> 00:33:25,539
and see that actual implicit conversion

00:33:22,480 --> 00:33:27,909
is augment string and we have a lot of

00:33:25,539 --> 00:33:32,590
different possibilities to convert

00:33:27,909 --> 00:33:35,019
strings and if if actually elven string

00:33:32,590 --> 00:33:38,740
is wrong implicit conversion and we want

00:33:35,019 --> 00:33:41,830
a wrap string so we can invoke intention

00:33:38,740 --> 00:33:43,919
action here and make it explicitly so

00:33:41,830 --> 00:33:48,340
that's that's quite funny

00:33:43,919 --> 00:33:51,279
and what about implicit parameters it's

00:33:48,340 --> 00:33:54,399
a bit different feature so let's let do

00:33:51,279 --> 00:33:59,590
a bit more life calling so let's create

00:33:54,399 --> 00:34:11,320
two classes one function which requires

00:33:59,590 --> 00:34:17,080
a so another implicit function which

00:34:11,320 --> 00:34:20,820
requires B and returns a and finally

00:34:17,080 --> 00:34:20,820
implicit value B

00:34:26,000 --> 00:34:35,850
now we have everything we need to define

00:34:32,040 --> 00:34:37,860
a tool in Vogel's all new method for so

00:34:35,850 --> 00:34:41,550
now we can invoke implicit parameters

00:34:37,860 --> 00:34:44,659
and see all recursive implicit

00:34:41,550 --> 00:34:49,500
parameters here so it's for one and B

00:34:44,659 --> 00:34:53,040
moreover we can analyze all steps in

00:34:49,500 --> 00:34:55,830
this here in this case for example we

00:34:53,040 --> 00:34:59,400
don't have implicit value B so it's an

00:34:55,830 --> 00:35:02,550
error in compiler and we can invoke that

00:34:59,400 --> 00:35:05,010
you can see that it's it's really error

00:35:02,550 --> 00:35:06,750
because parameter is not found but then

00:35:05,010 --> 00:35:10,910
we can take a look for the reason and

00:35:06,750 --> 00:35:14,250
for possible parameters so for one is

00:35:10,910 --> 00:35:18,300
possible for our mentor but then we can

00:35:14,250 --> 00:35:20,130
take a look why it's not chosen and it

00:35:18,300 --> 00:35:23,880
shows that actually parameters are not

00:35:20,130 --> 00:35:26,660
found for type B and then we can take a

00:35:23,880 --> 00:35:30,560
look for that and see that applicable

00:35:26,660 --> 00:35:33,510
the places were not found that's all and

00:35:30,560 --> 00:35:36,870
we also can navigate to any of these

00:35:33,510 --> 00:35:40,860
things so just use go to action action

00:35:36,870 --> 00:35:43,890
for everything put something like

00:35:40,860 --> 00:35:49,700
complicit and here you go you can

00:35:43,890 --> 00:35:52,200
analyze implicit so that's all about

00:35:49,700 --> 00:35:58,170
scholar and that's all about IntelliJ

00:35:52,200 --> 00:36:05,430
IDEA as this is last session so I hope

00:35:58,170 --> 00:36:08,070
you will be glad that it and I wanted to

00:36:05,430 --> 00:36:10,170
put more about Schow but at some point

00:36:08,070 --> 00:36:13,440
and decided to show you more about

00:36:10,170 --> 00:36:16,470
IntelliJ IDEA itself because it's the

00:36:13,440 --> 00:36:20,180
base and it it helps a lot in

00:36:16,470 --> 00:36:22,670
understanding Scala plugin features and

00:36:20,180 --> 00:36:24,840
discovering plugin features and

00:36:22,670 --> 00:36:28,770
understanding how to be more productive

00:36:24,840 --> 00:36:33,060
in general as well so I hope you will

00:36:28,770 --> 00:36:37,080
like this way as well and right now we

00:36:33,060 --> 00:36:40,890
can finish our game and who calculated

00:36:37,080 --> 00:36:43,740
number of new things we can ask hoon who

00:36:40,890 --> 00:36:53,550
knew everything from this presentation

00:36:43,740 --> 00:36:56,490
okay so who learnt only one thing to

00:36:53,550 --> 00:37:00,869
thing only one okay

00:36:56,490 --> 00:37:06,270
so just reach me later after this talk

00:37:00,869 --> 00:37:09,480
and I'll probe out I'll try to give you

00:37:06,270 --> 00:37:14,340
something instead of that you just spend

00:37:09,480 --> 00:37:18,630
this time on this boring session so it's

00:37:14,340 --> 00:37:35,369
it's a bright so I finished and any

00:37:18,630 --> 00:37:38,520
questions in intelligence the same

00:37:35,369 --> 00:37:42,150
shortcut will will undo that so you can

00:37:38,520 --> 00:37:48,510
use comments / to uncomment on comment /

00:37:42,150 --> 00:37:52,890
to command that so you can take a look

00:37:48,510 --> 00:37:56,160
for in go to action action you just go

00:37:52,890 --> 00:38:00,600
here and see comment this line current

00:37:56,160 --> 00:38:03,230
our block comment so anything any other

00:38:00,600 --> 00:38:03,230
questions

00:38:15,080 --> 00:38:28,110
so question about Makris editor

00:38:20,490 --> 00:38:32,460
macrosystem okay in so so I've got a

00:38:28,110 --> 00:38:34,980
question about editor mattresses here in

00:38:32,460 --> 00:38:37,320
IntelliJ IDEA we have few things the

00:38:34,980 --> 00:38:42,540
first one is left in place you can add

00:38:37,320 --> 00:38:49,650
any life template you want so it's it's

00:38:42,540 --> 00:38:51,360
here Y template you can choose it we

00:38:49,650 --> 00:38:54,270
have a lot of lights in place included

00:38:51,360 --> 00:38:57,480
some of them for Scala and you can add

00:38:54,270 --> 00:39:00,180
anything you need for for yourself just

00:38:57,480 --> 00:39:02,630
for life templates and if you want to

00:39:00,180 --> 00:39:09,150
replace some actions we also have

00:39:02,630 --> 00:39:13,440
possibility like okay writing macros I

00:39:09,150 --> 00:39:17,120
mean you can record number of edges or

00:39:13,440 --> 00:39:19,910
actions and then replay them

00:39:17,120 --> 00:39:23,880
simultaneous it's almost simultaneously

00:39:19,910 --> 00:39:26,790
I'm not sure it's it works very well but

00:39:23,880 --> 00:39:30,530
still you can do a lot of micro C's I

00:39:26,790 --> 00:39:30,530
mean editor mattresses here

00:39:32,540 --> 00:39:40,160
so with so we can start stop macro

00:39:37,310 --> 00:39:44,330
recording here and play saved markers

00:39:40,160 --> 00:39:48,710
here it not always works as expected

00:39:44,330 --> 00:39:55,150
because playing is something like in

00:39:48,710 --> 00:39:58,960
fast way by in in most cases it works

00:39:55,150 --> 00:39:58,960
any other questions

00:40:01,180 --> 00:40:06,940
it's okay that's fine thank you very

00:40:04,190 --> 00:40:06,940

YouTube URL: https://www.youtube.com/watch?v=sWikZLIOAEc


