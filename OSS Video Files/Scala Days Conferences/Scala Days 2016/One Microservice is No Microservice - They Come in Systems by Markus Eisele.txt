Title: One Microservice is No Microservice - They Come in Systems by Markus Eisele
Publication date: 2017-01-19
Playlist: Scala Days 2016
Description: 
	This video was recorded at Scala Days Berlin 2016
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

Abstract:
Building a complete system out of individual Microservices is not as simple as we're being told. While Microservices-based Architecture continues to draw more and more attention we're also starting to learn about the trade-offs and drawbacks. Individual Microservices are fairly easy to understand and implement, but they only make sense as systems, and it is in-between the services that the most challenging (and interesting) problems arise—here we are entering the world of distributed systems.

As we all know, distributed systems are inherently complex and we enterprise developers have been spoiled by centralized servers for too long to easily understand what this really means. Just slicing an existing system into various REST services and wiring them back together again with synchronous protocols and traditional enterprise tools—designed for a monolithic architectures—will set you up for failure.

This talk is going to distill the essence Microservices-based systems and then introduce you to a new development approach to Microservices which gets you started quickly with a guided, minimalistic approach on your local machine and supports you every single step on the way to a productive scaled out Microservices-based system composed of hundreds of services. At the end of this talk, you've experienced first hand how creating systems of microservices on the JVM is dead-simple, intuitive, frictionless and last and more importantly—a lot of fun!
Captions: 
	00:00:04,200 --> 00:00:10,570
welcome my name is Marcus I'm actually

00:00:07,720 --> 00:00:13,389
German working for like Bend as a

00:00:10,570 --> 00:00:15,480
developer advocate I have to admit I do

00:00:13,389 --> 00:00:18,789
a lot more than just speaking and

00:00:15,480 --> 00:00:21,880
talking to developers and I still do

00:00:18,789 --> 00:00:24,040
code a little I have a comparable a

00:00:21,880 --> 00:00:26,740
solid background of 14 years of

00:00:24,040 --> 00:00:30,940
consulting like being out with customers

00:00:26,740 --> 00:00:34,030
like in the field fixing issues but my

00:00:30,940 --> 00:00:36,850
background is more Java and Java EE so

00:00:34,030 --> 00:00:41,440
having me here is kind of a weird thing

00:00:36,850 --> 00:00:43,749
and I agree but I'm I'm trying to talk

00:00:41,440 --> 00:00:45,190
about something that you all at least

00:00:43,749 --> 00:00:47,379
have heard about because that's been a

00:00:45,190 --> 00:00:49,510
couple of other sessions diving into

00:00:47,379 --> 00:00:52,480
that a little bit more deeper and that's

00:00:49,510 --> 00:00:55,479
a new framework like Lagaan with named

00:00:52,480 --> 00:00:58,539
legume which is Swedish who's been

00:00:55,479 --> 00:01:01,449
attending a legume session already Oh

00:00:58,539 --> 00:01:03,789
fair okay so I'm not going to show you

00:01:01,449 --> 00:01:05,979
anything today in terms of sauce code I

00:01:03,789 --> 00:01:09,270
would like to introduce you a little bit

00:01:05,979 --> 00:01:12,909
more to the motivations behind

00:01:09,270 --> 00:01:16,630
micro-services and why this is actually

00:01:12,909 --> 00:01:20,409
a hype and a little bit more what I

00:01:16,630 --> 00:01:22,570
think makes microservices a lot better

00:01:20,409 --> 00:01:26,590
approach than traditional application

00:01:22,570 --> 00:01:29,890
development y'all should have received a

00:01:26,590 --> 00:01:32,289
very nice little sixty something pages

00:01:29,890 --> 00:01:34,240
book and your attendee picks that was

00:01:32,289 --> 00:01:35,829
actually mean so whenever you're feeling

00:01:34,240 --> 00:01:38,380
more it on your way back tonight or

00:01:35,829 --> 00:01:40,899
tomorrow give it a nice read I have to

00:01:38,380 --> 00:01:43,149
admit it's also about the Java API and

00:01:40,899 --> 00:01:46,479
log on but it should give you a nice

00:01:43,149 --> 00:01:49,329
head start and surprisingly we will have

00:01:46,479 --> 00:01:51,520
a Scala API so it's definitely something

00:01:49,329 --> 00:01:55,539
to get you prepped and ready whenever

00:01:51,520 --> 00:01:56,979
the Scala API is there finally if you

00:01:55,539 --> 00:01:59,619
want to reach out to me the best way to

00:01:56,979 --> 00:02:01,179
do that is actually Twitter I'm just

00:01:59,619 --> 00:02:03,729
waiting for the day where my wife starts

00:02:01,179 --> 00:02:06,219
to tweet at me for to do something but

00:02:03,729 --> 00:02:10,300
hasn't happened yet otherwise just drop

00:02:06,219 --> 00:02:15,690
me an email I should be should be there

00:02:10,300 --> 00:02:18,130
who did ever write that kind of code a

00:02:15,690 --> 00:02:22,840
couple of hands go up

00:02:18,130 --> 00:02:27,640
so yeah that's Java EE um kind of jocks

00:02:22,840 --> 00:02:30,610
are as rest services looks pretty solid

00:02:27,640 --> 00:02:34,180
does it like auto processing very nice

00:02:30,610 --> 00:02:37,150
awesome stuff everybody's talking about

00:02:34,180 --> 00:02:39,310
micro services as do I today and the

00:02:37,150 --> 00:02:40,960
funny part is haven't we been doing that

00:02:39,310 --> 00:02:43,030
like everybody's talking about rest

00:02:40,960 --> 00:02:46,090
endpoints everybody's talking about like

00:02:43,030 --> 00:02:48,790
putting rest endpoints together and if

00:02:46,090 --> 00:02:50,710
we if we take that classical thing here

00:02:48,790 --> 00:02:52,810
which you probably will find in many

00:02:50,710 --> 00:02:55,330
enterprises like you're knocking at the

00:02:52,810 --> 00:02:58,600
door at a customer and you have that

00:02:55,330 --> 00:03:01,390
great toolkit of ARCA and play and all

00:02:58,600 --> 00:03:03,910
kinds of fancy technologies and this is

00:03:01,390 --> 00:03:06,340
exactly what you get as a spec so they

00:03:03,910 --> 00:03:07,840
calling you and we we don't have real

00:03:06,340 --> 00:03:09,460
business document this is like the

00:03:07,840 --> 00:03:11,710
source code this is Java you make that

00:03:09,460 --> 00:03:14,860
micro services please and make it a good

00:03:11,710 --> 00:03:16,990
one that's basically what they asking

00:03:14,860 --> 00:03:19,300
for it so something that is not

00:03:16,990 --> 00:03:22,810
necessarily fast but it has worked for

00:03:19,300 --> 00:03:25,360
many many years we would like to call it

00:03:22,810 --> 00:03:29,470
the monolith right and I intentionally

00:03:25,360 --> 00:03:31,209
took apart a very old Ferrari here so I

00:03:29,470 --> 00:03:34,900
think it might have been top notch

00:03:31,209 --> 00:03:37,650
technology just ten years back and now

00:03:34,900 --> 00:03:40,630
we have this thing and this thing

00:03:37,650 --> 00:03:43,270
monolithic application developed by very

00:03:40,630 --> 00:03:44,950
bright minds needs to move forward we

00:03:43,270 --> 00:03:47,800
need to introduce new business

00:03:44,950 --> 00:03:49,870
requirements we have we're working in an

00:03:47,800 --> 00:03:51,340
insurance context and we just want to

00:03:49,870 --> 00:03:54,250
want to calculate our policies

00:03:51,340 --> 00:03:57,700
differently right so we actually have to

00:03:54,250 --> 00:03:59,680
decompose those things and what could be

00:03:57,700 --> 00:04:02,380
closer than just ripping everything

00:03:59,680 --> 00:04:04,540
apart having all those components

00:04:02,380 --> 00:04:07,420
hopefully they are there to a certain

00:04:04,540 --> 00:04:09,489
extent and just making all of the rest

00:04:07,420 --> 00:04:14,739
calls and kind of binding them together

00:04:09,489 --> 00:04:16,750
again I tried to do that at least for

00:04:14,739 --> 00:04:18,820
one of the calls in this example code

00:04:16,750 --> 00:04:21,790
and what you can see is like it's going

00:04:18,820 --> 00:04:24,910
to be very dirty very very quickly

00:04:21,790 --> 00:04:27,460
so you end up having rest services

00:04:24,910 --> 00:04:30,940
calling other rest services calling

00:04:27,460 --> 00:04:33,820
other rest services and nobody is really

00:04:30,940 --> 00:04:36,630
willing to manage that seriously not

00:04:33,820 --> 00:04:39,040
that can't be the solution at that point

00:04:36,630 --> 00:04:43,240
maybe there are other solutions to that

00:04:39,040 --> 00:04:45,570
problem what else could be an issue with

00:04:43,240 --> 00:04:48,400
just chaining rested services

00:04:45,570 --> 00:04:50,500
performance right I mean that's network

00:04:48,400 --> 00:04:52,240
hauls at the end of the day and that

00:04:50,500 --> 00:04:55,690
might be okay if we do a bunch of

00:04:52,240 --> 00:04:58,810
network calls I think we all have kind

00:04:55,690 --> 00:05:01,660
of smartphones today and the apps

00:04:58,810 --> 00:05:06,130
basically do exactly that right some

00:05:01,660 --> 00:05:09,490
back-end calls rest services but mostly

00:05:06,130 --> 00:05:11,800
only a tree of the depth of one so a

00:05:09,490 --> 00:05:14,320
bunch of services getting called more or

00:05:11,800 --> 00:05:16,000
less at the same time deliver all the

00:05:14,320 --> 00:05:18,250
information that the app actually needs

00:05:16,000 --> 00:05:20,620
and we're done if we're thinking

00:05:18,250 --> 00:05:23,560
enterprise of we're thinking component

00:05:20,620 --> 00:05:25,960
models we probably will end up having a

00:05:23,560 --> 00:05:28,990
depth of five six

00:05:25,960 --> 00:05:31,390
each call might end up having a couple

00:05:28,990 --> 00:05:33,490
of seconds maybe like we're talking

00:05:31,390 --> 00:05:36,810
legacy probably there might be a host

00:05:33,490 --> 00:05:40,120
system down there that's so scary and

00:05:36,810 --> 00:05:42,610
does anybody know how long our attention

00:05:40,120 --> 00:05:47,100
span is like how long are we willing to

00:05:42,610 --> 00:05:47,100
wait for a reply from an application

00:05:47,370 --> 00:05:55,210
other guesses aside I think one second

00:05:52,120 --> 00:05:58,270
is pretty close so you you just can't

00:05:55,210 --> 00:06:01,180
chain rest services you just can't slice

00:05:58,270 --> 00:06:03,130
up what you already have and just make

00:06:01,180 --> 00:06:09,310
rest service out of every component and

00:06:03,130 --> 00:06:12,220
kind of chain them another problem space

00:06:09,310 --> 00:06:15,880
how do those enterprises actually

00:06:12,220 --> 00:06:18,880
package those funny new rest services

00:06:15,880 --> 00:06:21,010
that everybody is talking about this is

00:06:18,880 --> 00:06:24,460
obviously like the Java EE stack and

00:06:21,010 --> 00:06:26,680
everything that you might want to have

00:06:24,460 --> 00:06:29,170
if you want to run something and even

00:06:26,680 --> 00:06:30,820
like a surfer engine so you have your

00:06:29,170 --> 00:06:32,139
deployment units you have your

00:06:30,820 --> 00:06:34,389
components

00:06:32,139 --> 00:06:36,550
you have your run time like the

00:06:34,389 --> 00:06:39,879
sovereign time you have a virtual

00:06:36,550 --> 00:06:44,529
machine you have an operating system who

00:06:39,879 --> 00:06:45,550
has ever done that before not a lot I

00:06:44,529 --> 00:06:48,580
expected that

00:06:45,550 --> 00:06:51,219
don't worry we're getting there the idea

00:06:48,580 --> 00:06:53,860
is actually enterprises are doing that

00:06:51,219 --> 00:06:55,240
kind of complex scenarios and even if we

00:06:53,860 --> 00:06:56,770
are shaking our heads because we're

00:06:55,240 --> 00:06:59,080
looking at it from a different

00:06:56,770 --> 00:07:01,599
technology perspective this is what

00:06:59,080 --> 00:07:03,610
everybody is telling the big enterprises

00:07:01,599 --> 00:07:06,460
out there today slice up your

00:07:03,610 --> 00:07:08,379
infrastructures instead of deploying one

00:07:06,460 --> 00:07:10,900
big monolithic application to your

00:07:08,379 --> 00:07:13,629
platform of choice slice it up and

00:07:10,900 --> 00:07:15,490
deploy millions of little applications

00:07:13,629 --> 00:07:19,180
and wire them back together with rest

00:07:15,490 --> 00:07:22,509
services that doesn't even sound right

00:07:19,180 --> 00:07:24,849
at that point right and another thing

00:07:22,509 --> 00:07:27,879
that we have an enterprises mostly are

00:07:24,849 --> 00:07:30,909
large teams so what's the average team

00:07:27,879 --> 00:07:32,650
size you guys are working in just shout

00:07:30,909 --> 00:07:35,250
at me I'm trying to make that an open

00:07:32,650 --> 00:07:40,539
session for everybody to not fall asleep

00:07:35,250 --> 00:07:42,879
eight nine five I can make it guess what

00:07:40,539 --> 00:07:45,279
the biggest Enterprise Java project was

00:07:42,879 --> 00:07:50,710
that I ever worked in as a technical

00:07:45,279 --> 00:07:59,020
architect good guess next one not even

00:07:50,710 --> 00:08:01,960
close yet 200 people Jesus unbelievable

00:07:59,020 --> 00:08:04,270
isn't that so and this is kind of like a

00:08:01,960 --> 00:08:06,789
setting that I don't even want to want

00:08:04,270 --> 00:08:10,270
to think about because if we really

00:08:06,789 --> 00:08:13,240
start at vendors are really starting to

00:08:10,270 --> 00:08:16,409
tell enterprises to just stick with a

00:08:13,240 --> 00:08:20,169
stack they have with the teams they have

00:08:16,409 --> 00:08:23,139
slice up everything double the amount of

00:08:20,169 --> 00:08:24,909
complexity and deployment double the

00:08:23,139 --> 00:08:28,330
amount of communication overhead in

00:08:24,909 --> 00:08:30,729
between the teams actually breaking up

00:08:28,330 --> 00:08:33,969
monolithic applications with that

00:08:30,729 --> 00:08:36,279
approach adds complexity and doesn't

00:08:33,969 --> 00:08:38,060
take it away and that's the most

00:08:36,279 --> 00:08:43,099
interesting part

00:08:38,060 --> 00:08:46,640
but for sure there is a need for having

00:08:43,099 --> 00:08:49,290
micro-services and the need is pretty

00:08:46,640 --> 00:08:52,470
pretty clear so if you look at that

00:08:49,290 --> 00:08:57,709
little chart i put actually a couple of

00:08:52,470 --> 00:09:01,380
weeks times in here assumption is that

00:08:57,709 --> 00:09:03,570
developing a new release of a monolithic

00:09:01,380 --> 00:09:07,950
system it doesn't have to be the 200

00:09:03,570 --> 00:09:12,720
people thing could be on average like 36

00:09:07,950 --> 00:09:14,310
weeks maybe that works 63 it's actually

00:09:12,720 --> 00:09:17,820
right the other way around German and

00:09:14,310 --> 00:09:22,110
English is heart so if we have a single

00:09:17,820 --> 00:09:24,930
change by legislation by some European

00:09:22,110 --> 00:09:27,209
laws that actually go through to our

00:09:24,930 --> 00:09:28,890
insurances and we need to have something

00:09:27,209 --> 00:09:30,930
in place and in a couple of weeks

00:09:28,890 --> 00:09:33,149
that's hardly possible for those

00:09:30,930 --> 00:09:35,370
corporations working in monolithic

00:09:33,149 --> 00:09:37,260
application settings right so they are

00:09:35,370 --> 00:09:40,380
trying to break that down and having

00:09:37,260 --> 00:09:42,420
smaller systems smaller chunks actually

00:09:40,380 --> 00:09:44,850
allows them to put those changes into

00:09:42,420 --> 00:09:46,850
production a lot easier and just

00:09:44,850 --> 00:09:49,170
assuming now you have like five or six

00:09:46,850 --> 00:09:51,510
individual components that you have to

00:09:49,170 --> 00:09:54,089
update for one singer requirement change

00:09:51,510 --> 00:09:58,200
that might only take a third of the time

00:09:54,089 --> 00:10:01,020
or you have even smaller parts down to

00:09:58,200 --> 00:10:04,079
individual services down to micro

00:10:01,020 --> 00:10:09,060
services that only might take a day or

00:10:04,079 --> 00:10:11,040
two or even hours so this is exactly

00:10:09,060 --> 00:10:13,260
what enterprises are looking for because

00:10:11,040 --> 00:10:15,839
software starts to earn money when it is

00:10:13,260 --> 00:10:18,690
in production and not when it when it is

00:10:15,839 --> 00:10:20,610
in development right so the more

00:10:18,690 --> 00:10:23,610
frequently if we can get changes into

00:10:20,610 --> 00:10:25,800
production the easier everything gets so

00:10:23,610 --> 00:10:29,510
that's pretty much one of the biggest

00:10:25,800 --> 00:10:29,510
motivations behind micro services

00:10:31,529 --> 00:10:36,930
but what nobody is telling you that the

00:10:34,740 --> 00:10:39,540
one microservice the first one is

00:10:36,930 --> 00:10:42,149
exactly the easy one but combining

00:10:39,540 --> 00:10:45,839
everything and building a system out of

00:10:42,149 --> 00:10:51,689
that that really really works is the

00:10:45,839 --> 00:10:54,600
super hard part here ice at rest service

00:10:51,689 --> 00:10:56,459
are another good way to go right so

00:10:54,600 --> 00:11:01,230
don't even think about replacing

00:10:56,459 --> 00:11:03,329
existing stuff just one by one if you

00:11:01,230 --> 00:11:05,339
want to have the performing micro

00:11:03,329 --> 00:11:07,410
service architecture a micro service

00:11:05,339 --> 00:11:09,329
system then you need to think about how

00:11:07,410 --> 00:11:10,860
a synchronous communication which is

00:11:09,329 --> 00:11:13,529
something that is pretty close to all

00:11:10,860 --> 00:11:16,889
all hearts we've been thinking in that

00:11:13,529 --> 00:11:19,290
kind of dimensions for definitely longer

00:11:16,889 --> 00:11:21,629
than anybody else but the enterprise has

00:11:19,290 --> 00:11:25,110
happened so keep in mind that this might

00:11:21,629 --> 00:11:27,930
be the most interesting challenge moving

00:11:25,110 --> 00:11:30,529
somebody over from a monolithic platform

00:11:27,930 --> 00:11:32,819
based approach no matter what technology

00:11:30,529 --> 00:11:35,009
into something that is the synchronous

00:11:32,819 --> 00:11:39,540
and that is a micro service based system

00:11:35,009 --> 00:11:43,079
and there's been a couple of nice talks

00:11:39,540 --> 00:11:45,660
when I outlined here is when I really

00:11:43,079 --> 00:11:47,759
truly enjoyed so you can even build a

00:11:45,660 --> 00:11:51,089
distributed monolithic system if you're

00:11:47,759 --> 00:11:53,009
not careful enough so give give it a go

00:11:51,089 --> 00:11:58,079
and just watch that YouTube recording I

00:11:53,009 --> 00:12:00,439
really like that one I talked about how

00:11:58,079 --> 00:12:03,420
not to build micro service systems right

00:12:00,439 --> 00:12:07,769
but how do we build micro service system

00:12:03,420 --> 00:12:09,520
who is actually building one right now 3

00:12:07,769 --> 00:12:12,670
4 or 5

00:12:09,520 --> 00:12:16,709
okay so you actually know the answer to

00:12:12,670 --> 00:12:16,709
how to build micro servos based systems

00:12:16,830 --> 00:12:23,920
Gartner has a very easy answer they tell

00:12:20,950 --> 00:12:26,380
us how not to build them so whatever we

00:12:23,920 --> 00:12:28,630
find out there like Java EE dotnet

00:12:26,380 --> 00:12:32,649
whatever just forget about it that's

00:12:28,630 --> 00:12:34,990
definitely the dead end those outdated

00:12:32,649 --> 00:12:38,380
application platforms can't be the right

00:12:34,990 --> 00:12:42,220
thing to start over I'm not a big fan of

00:12:38,380 --> 00:12:44,560
Gartner what I used gotten a four in the

00:12:42,220 --> 00:12:46,570
past is actually to push through

00:12:44,560 --> 00:12:49,000
decisions I hadn't made it make as an

00:12:46,570 --> 00:12:50,529
architect so whenever you have somebody

00:12:49,000 --> 00:12:52,420
up the line that you really want to

00:12:50,529 --> 00:12:55,000
convince and you have no other way

00:12:52,420 --> 00:12:59,080
through it just find the correct Gartner

00:12:55,000 --> 00:13:04,600
quote that most likely works seriously

00:12:59,080 --> 00:13:06,370
so trying it from another angle Gartner

00:13:04,600 --> 00:13:09,550
doesn't work and I get it so here's a

00:13:06,370 --> 00:13:12,100
quote from me first of all the good news

00:13:09,550 --> 00:13:15,850
whatever we learned over the past couple

00:13:12,100 --> 00:13:18,010
of years is actually still relevant we

00:13:15,850 --> 00:13:20,890
will still have our jobs if it's

00:13:18,010 --> 00:13:23,200
micro-services or not and I personally

00:13:20,890 --> 00:13:26,290
believe that architecting those systems

00:13:23,200 --> 00:13:28,990
in the classical sense and design

00:13:26,290 --> 00:13:31,360
patterns that we already know get even

00:13:28,990 --> 00:13:33,940
more important in those distributed

00:13:31,360 --> 00:13:38,290
complex systems and this is something

00:13:33,940 --> 00:13:39,790
that kind of pleased me well and let me

00:13:38,290 --> 00:13:42,790
at least look forward to those

00:13:39,790 --> 00:13:46,779
distributed systems I don't have relearn

00:13:42,790 --> 00:13:48,640
everything I already knew right so we

00:13:46,779 --> 00:13:52,209
know a lot of principles out there

00:13:48,640 --> 00:13:53,890
single responsibility I'm actually not

00:13:52,209 --> 00:13:56,079
talking about how microservice looks

00:13:53,890 --> 00:13:59,079
like but I want to have an answer for me

00:13:56,079 --> 00:14:02,079
how micro doesn't micro servers need to

00:13:59,079 --> 00:14:03,910
be so when I first started giving talks

00:14:02,079 --> 00:14:05,740
around micro services that was the

00:14:03,910 --> 00:14:06,940
number one question I received from the

00:14:05,740 --> 00:14:10,860
audience

00:14:06,940 --> 00:14:10,860
how big is a micro service

00:14:12,540 --> 00:14:21,100
curious to hear your thoughts unfair

00:14:18,180 --> 00:14:23,709
unfair yeah it's bounded context to

00:14:21,100 --> 00:14:26,649
context is a good good guideline to find

00:14:23,709 --> 00:14:28,870
micro-services actually the the

00:14:26,649 --> 00:14:31,779
enterprise Java guys they were

00:14:28,870 --> 00:14:34,029
speculating more like lines of code so

00:14:31,779 --> 00:14:38,079
they were thinking like let's talk about

00:14:34,029 --> 00:14:40,630
50 100 lines of code the best answer I

00:14:38,079 --> 00:14:42,940
ever got was like five kilobytes and

00:14:40,630 --> 00:14:47,529
that actually referred to the package

00:14:42,940 --> 00:14:50,200
jar file so I bounded context is

00:14:47,529 --> 00:14:53,890
definitely a good good guideline to look

00:14:50,200 --> 00:14:56,440
for a service and micro service Jonah's

00:14:53,890 --> 00:14:59,709
been told that plenty of times already I

00:14:56,440 --> 00:15:02,620
think and either I don't like the word

00:14:59,709 --> 00:15:06,100
micro either because it implies the size

00:15:02,620 --> 00:15:09,100
and did I mention that logon actually

00:15:06,100 --> 00:15:12,100
has a translation into English so log on

00:15:09,100 --> 00:15:15,370
is Swedish and it means right size or

00:15:12,100 --> 00:15:17,790
just the right amount and I I like that

00:15:15,370 --> 00:15:19,720
so right sized services are actually

00:15:17,790 --> 00:15:23,019
something that we're looking for

00:15:19,720 --> 00:15:25,990
I doubt that I can influence the

00:15:23,019 --> 00:15:28,029
industry strong enough to have make

00:15:25,990 --> 00:15:30,250
everybody talk about right sites sized

00:15:28,029 --> 00:15:33,940
services but this would be definitely

00:15:30,250 --> 00:15:37,390
something I truly enjoy another lesson

00:15:33,940 --> 00:15:39,640
that we've been taught in in the context

00:15:37,390 --> 00:15:42,790
of enterprises actually everything we

00:15:39,640 --> 00:15:44,170
learned from SOA approaches so

00:15:42,790 --> 00:15:47,260
everything that had to do with those

00:15:44,170 --> 00:15:49,810
service-oriented architectures call it

00:15:47,260 --> 00:15:52,510
good a bat-like centralized is Bees

00:15:49,810 --> 00:15:56,050
whatever we had we learned a couple of

00:15:52,510 --> 00:15:58,570
lessons how to have systems communicate

00:15:56,050 --> 00:16:00,880
with each other and those principles are

00:15:58,570 --> 00:16:04,240
still valid just on another granularity

00:16:00,880 --> 00:16:07,000
right another really important part to

00:16:04,240 --> 00:16:10,110
me is everything that has to do with

00:16:07,000 --> 00:16:13,930
component i'll componentization so

00:16:10,110 --> 00:16:16,360
encapsulating functionality reusing

00:16:13,930 --> 00:16:17,700
functionality where it's valuable and

00:16:16,360 --> 00:16:19,650
helpful

00:16:17,700 --> 00:16:23,580
the Java world especially has been

00:16:19,650 --> 00:16:26,250
failing on that and so gracefully it was

00:16:23,580 --> 00:16:28,890
amazing so there's not been a single

00:16:26,250 --> 00:16:33,089
Java project where there hasn't been

00:16:28,890 --> 00:16:35,640
something like a utility or a commons

00:16:33,089 --> 00:16:37,350
package I'm still a big fan of that

00:16:35,640 --> 00:16:39,900
because first of all nobody is

00:16:37,350 --> 00:16:42,600
responsible for that and second of all

00:16:39,900 --> 00:16:44,490
everything ends up in that package it

00:16:42,600 --> 00:16:48,089
doesn't doesn't look like I want to take

00:16:44,490 --> 00:16:50,460
comments goodbye so this is something

00:16:48,089 --> 00:16:52,350
that we probably can't do in

00:16:50,460 --> 00:16:55,380
micro-services we shouldn't have done it

00:16:52,350 --> 00:16:57,960
back in the Java EE days either but it

00:16:55,380 --> 00:17:01,380
was just convenient right so we finally

00:16:57,960 --> 00:17:05,880
get something like componentization and

00:17:01,380 --> 00:17:08,610
capitalization right and we are forced

00:17:05,880 --> 00:17:11,130
to think about separation of concerns a

00:17:08,610 --> 00:17:13,020
lot more than we did because instead of

00:17:11,130 --> 00:17:15,750
having everything in a single deployment

00:17:13,020 --> 00:17:18,360
unit everything might be potentially

00:17:15,750 --> 00:17:23,329
distributed so we really need to think

00:17:18,360 --> 00:17:26,339
about who's doing what loose coupling

00:17:23,329 --> 00:17:30,050
no-brainer we've we've tried that like

00:17:26,339 --> 00:17:34,440
my favorite still is web service calls

00:17:30,050 --> 00:17:36,570
it kind of worked but hasn't been a good

00:17:34,440 --> 00:17:38,820
thing and that's also been a couple of

00:17:36,570 --> 00:17:40,740
new architectural approaches I don't

00:17:38,820 --> 00:17:43,920
think they are actually that new like

00:17:40,740 --> 00:17:45,360
the hexagonal architecture but they

00:17:43,920 --> 00:17:49,200
haven't been on the radar of the

00:17:45,360 --> 00:17:51,150
classical architects for a while and I

00:17:49,200 --> 00:17:55,070
think we can we can assume that I'm

00:17:51,150 --> 00:17:58,140
still talking about the enterprise guys

00:17:55,070 --> 00:17:59,970
software design patterns you had a great

00:17:58,140 --> 00:18:02,520
talk before this one about the main

00:17:59,970 --> 00:18:05,970
driven design I think was it that one or

00:18:02,520 --> 00:18:08,190
test-driven it's not the same I know the

00:18:05,970 --> 00:18:10,530
main driven design is something that I

00:18:08,190 --> 00:18:12,900
think has been underrated so far and

00:18:10,530 --> 00:18:16,740
underused especially in the classical

00:18:12,900 --> 00:18:18,840
enterprise projects it is still is the

00:18:16,740 --> 00:18:20,610
most valuable tool that you can have at

00:18:18,840 --> 00:18:24,640
hand if you are really looking at

00:18:20,610 --> 00:18:28,910
building microservice based systems

00:18:24,640 --> 00:18:31,940
bounded context as the corners and

00:18:28,910 --> 00:18:35,270
boundaries for microservices a couple of

00:18:31,940 --> 00:18:37,970
other things but a banker service based

00:18:35,270 --> 00:18:42,290
system worked with classical JDBC

00:18:37,970 --> 00:18:48,520
architectures as data stores opinions

00:18:42,290 --> 00:18:48,520
ideas maybe anybody

00:18:49,330 --> 00:18:54,890
nobody why not sure why not it would

00:18:53,179 --> 00:18:56,870
even work with dotnet persistence

00:18:54,890 --> 00:18:59,809
however that looks like we actually

00:18:56,870 --> 00:19:02,000
don't care the funny part is it's not

00:18:59,809 --> 00:19:04,340
optimal there are a couple of things

00:19:02,000 --> 00:19:06,650
that you need to keep in mind so micro

00:19:04,340 --> 00:19:10,309
services aren't monolithic applications

00:19:06,650 --> 00:19:11,870
they don't get called ones and wait for

00:19:10,309 --> 00:19:15,380
all the information to come back to the

00:19:11,870 --> 00:19:19,330
users browser browser for example they

00:19:15,380 --> 00:19:22,280
actually have kind of a more granular

00:19:19,330 --> 00:19:24,950
usage pattern so they get potentially

00:19:22,280 --> 00:19:27,110
called a lot more often than a bigger

00:19:24,950 --> 00:19:31,520
service how we're actually designed them

00:19:27,110 --> 00:19:33,350
out of SOA times and underneath is

00:19:31,520 --> 00:19:35,600
everything that has to do with data

00:19:33,350 --> 00:19:37,429
there's no serious enterprise

00:19:35,600 --> 00:19:39,980
application without a reasonable

00:19:37,429 --> 00:19:43,610
database so what's the biggest drawback

00:19:39,980 --> 00:19:48,320
of databases you can actually optimize

00:19:43,610 --> 00:19:49,900
them for either reads or writes you

00:19:48,320 --> 00:19:54,470
can't have both

00:19:49,900 --> 00:19:57,580
so no arms no cookies what's actually

00:19:54,470 --> 00:20:01,100
the thing that our DBAs did in the past

00:19:57,580 --> 00:20:04,429
they did their best to do something that

00:20:01,100 --> 00:20:06,770
is exactly in the middle kind of fulfill

00:20:04,429 --> 00:20:10,220
the Reap requirements and kind of

00:20:06,770 --> 00:20:13,370
fulfill the right requirements they're

00:20:10,220 --> 00:20:15,470
actually other approaches to that why

00:20:13,370 --> 00:20:18,530
not have two separate models and

00:20:15,470 --> 00:20:20,600
optimize for the exact use case that we

00:20:18,530 --> 00:20:23,510
want to have and that's this is

00:20:20,600 --> 00:20:26,059
something that CQRS actually allows you

00:20:23,510 --> 00:20:29,120
as a design pattern that a couple of

00:20:26,059 --> 00:20:31,040
frameworks out there and I'm again

00:20:29,120 --> 00:20:33,380
shooting against the Java world because

00:20:31,040 --> 00:20:34,900
those probably are concepts that we all

00:20:33,380 --> 00:20:37,710
have heard about

00:20:34,900 --> 00:20:40,270
the bigger accounts that are looking for

00:20:37,710 --> 00:20:42,490
modernizing their applications and their

00:20:40,270 --> 00:20:45,010
legacy today they haven't heard about

00:20:42,490 --> 00:20:46,660
that vocabulary at all and they're just

00:20:45,010 --> 00:20:49,030
slowly finding out that there are

00:20:46,660 --> 00:20:51,280
different ways to architect applications

00:20:49,030 --> 00:20:52,900
and this is the most interesting part so

00:20:51,280 --> 00:20:56,230
we actually have to educate them about

00:20:52,900 --> 00:20:58,390
that and make them aware that you can

00:20:56,230 --> 00:21:00,190
have both that you can have a use case

00:20:58,390 --> 00:21:04,230
that is right optimized in a use case

00:21:00,190 --> 00:21:04,230
that's read optimized perfect great

00:21:04,440 --> 00:21:10,570
another thing that is been talked about

00:21:08,050 --> 00:21:13,870
a lot in distributed application

00:21:10,570 --> 00:21:15,910
development is eventual consistency this

00:21:13,870 --> 00:21:19,990
is something that mostly they read

00:21:15,910 --> 00:21:22,410
optimized site and CQRS systems kind of

00:21:19,990 --> 00:21:25,600
suffering from but the whole system

00:21:22,410 --> 00:21:28,210
might actually be designed to handle

00:21:25,600 --> 00:21:30,400
that and instead of preventing failure

00:21:28,210 --> 00:21:32,880
which happen like my biggest design

00:21:30,400 --> 00:21:36,520
paradigm over the last couple of years

00:21:32,880 --> 00:21:38,260
those Microsoft's based systems are

00:21:36,520 --> 00:21:40,870
actually embracing failure

00:21:38,260 --> 00:21:43,809
they are expecting failure to happen

00:21:40,870 --> 00:21:46,870
everywhere and anytime and they know how

00:21:43,809 --> 00:21:49,300
to handle it and make it work still at

00:21:46,870 --> 00:21:52,600
least to the best possible amount and

00:21:49,300 --> 00:21:54,370
those thought models are something that

00:21:52,600 --> 00:21:56,650
you definitely need to keep in mind if

00:21:54,370 --> 00:22:02,410
you want to switch some monolithic

00:21:56,650 --> 00:22:05,950
application over burning all that down

00:22:02,410 --> 00:22:09,790
to one sentence and I'm I'm actually not

00:22:05,950 --> 00:22:12,730
even sure if I think it's a quote from

00:22:09,790 --> 00:22:15,280
from a Red Hat guy I think it's a former

00:22:12,730 --> 00:22:18,130
coworker of mine he said we need to stop

00:22:15,280 --> 00:22:19,960
building systems just for efficiency and

00:22:18,130 --> 00:22:22,630
robustness which is something that we

00:22:19,960 --> 00:22:25,090
did we need to start building systems

00:22:22,630 --> 00:22:27,670
that are flexible and extremely

00:22:25,090 --> 00:22:30,990
resilient and this is exactly where my

00:22:27,670 --> 00:22:35,400
per services come in and help you with

00:22:30,990 --> 00:22:37,620
achieving exactly those goals right

00:22:35,400 --> 00:22:43,190
the slides will be available afterwards

00:22:37,620 --> 00:22:46,920
anyways I hope you've seen that right

00:22:43,190 --> 00:22:49,320
what's it before big Tenon's right

00:22:46,920 --> 00:22:52,080
directive manifesto yeah that looks all

00:22:49,320 --> 00:22:54,030
familiar and and it actually is familiar

00:22:52,080 --> 00:22:59,070
and that's the most interesting part to

00:22:54,030 --> 00:23:01,470
me that the world is turning slowly but

00:22:59,070 --> 00:23:04,160
consistently into a direction that we

00:23:01,470 --> 00:23:07,650
all know probably since a while but

00:23:04,160 --> 00:23:09,540
nobody else out there thought about when

00:23:07,650 --> 00:23:12,540
they designed the term micro-services

00:23:09,540 --> 00:23:14,580
and do you know where where that

00:23:12,540 --> 00:23:21,980
initially came from like the term who

00:23:14,580 --> 00:23:24,480
made that popular company names arcane I

00:23:21,980 --> 00:23:27,510
think it was a Netflix right so that's

00:23:24,480 --> 00:23:29,970
where we all kind of were hooked up with

00:23:27,510 --> 00:23:32,309
everything that had to do with with

00:23:29,970 --> 00:23:35,070
micro services and rest based approaches

00:23:32,309 --> 00:23:36,960
and now and that's funny and also Amazon

00:23:35,070 --> 00:23:38,640
did that years before that just

00:23:36,960 --> 00:23:40,679
internally and they never never really

00:23:38,640 --> 00:23:42,750
talked about micro services I think

00:23:40,679 --> 00:23:44,970
that's all driven by the conference

00:23:42,750 --> 00:23:47,820
circus maybe so we're all looking for

00:23:44,970 --> 00:23:49,710
the next big hype Gardiner today

00:23:47,820 --> 00:23:50,880
released something about the next big

00:23:49,710 --> 00:23:53,760
thing

00:23:50,880 --> 00:23:56,010
Savalas architectures so Microsoft's are

00:23:53,760 --> 00:23:58,620
as of today officially old and outdated

00:23:56,010 --> 00:24:02,400
already I need to start talking about

00:23:58,620 --> 00:24:04,290
Savalas architectures but yeah it all it

00:24:02,400 --> 00:24:06,059
all burns down pretty much to the same

00:24:04,290 --> 00:24:09,690
principles that we've been working along

00:24:06,059 --> 00:24:14,490
and that's that's reassuring and really

00:24:09,690 --> 00:24:16,980
helpful at that end so whatever you know

00:24:14,490 --> 00:24:20,580
and whatever you learned at Scala days

00:24:16,980 --> 00:24:23,940
about Scala akka play those are actually

00:24:20,580 --> 00:24:26,640
pretty great fits for micro service

00:24:23,940 --> 00:24:29,040
based architectures already so we're

00:24:26,640 --> 00:24:30,990
done here we can go right that's it

00:24:29,040 --> 00:24:35,130
micro services are exactly that stack

00:24:30,990 --> 00:24:37,020
and we are going to do that if you throw

00:24:35,130 --> 00:24:39,870
somebody in there who's actually

00:24:37,020 --> 00:24:42,480
starting with that world with erect of

00:24:39,870 --> 00:24:43,890
world one two three four or five a

00:24:42,480 --> 00:24:45,780
reasonable amount of people what have

00:24:43,890 --> 00:24:47,660
you been doing before like what's been

00:24:45,780 --> 00:24:51,870
your main language

00:24:47,660 --> 00:24:54,780
how does the stack feel just honest

00:24:51,870 --> 00:25:01,980
feedback how easy is it to get from Java

00:24:54,780 --> 00:25:04,100
to Scala and play in Agra don't think so

00:25:01,980 --> 00:25:04,100
much

00:25:18,889 --> 00:25:23,659
but but it's a different world right so

00:25:21,389 --> 00:25:27,089
instead of using maven we're using SBT

00:25:23,659 --> 00:25:29,879
it's it's different world after all and

00:25:27,089 --> 00:25:31,709
what I experienced talking to to the

00:25:29,879 --> 00:25:33,299
Java developers out there and trying to

00:25:31,709 --> 00:25:36,029
to make them excited for everything

00:25:33,299 --> 00:25:38,519
around micro serves resilient micro

00:25:36,029 --> 00:25:40,979
services actually they said it's it's a

00:25:38,519 --> 00:25:43,829
pretty steep learning curve I had to

00:25:40,979 --> 00:25:46,079
spend a lot of cycles to actually get

00:25:43,829 --> 00:25:50,969
started with all of that and where's my

00:25:46,079 --> 00:25:53,069
maven and yeah I get that I get that I

00:25:50,969 --> 00:25:55,439
mean if you've been doing maven for what

00:25:53,069 --> 00:25:58,139
five ten years you probably don't want

00:25:55,439 --> 00:26:00,869
to see anything else and you still would

00:25:58,139 --> 00:26:03,149
have to build a lot of infrastructures

00:26:00,869 --> 00:26:05,039
for micro services yourself service

00:26:03,149 --> 00:26:08,219
registry how do you do that I mean you

00:26:05,039 --> 00:26:10,529
can map actors to services and can have

00:26:08,219 --> 00:26:12,509
kind of thought model around that but

00:26:10,529 --> 00:26:15,629
still it's not the complete thing out of

00:26:12,509 --> 00:26:18,229
the box and actually those technique

00:26:15,629 --> 00:26:20,429
technologies have never been built for

00:26:18,229 --> 00:26:22,259
Microsoft's architectures they've been

00:26:20,429 --> 00:26:26,189
built for resilient architectures and

00:26:22,259 --> 00:26:27,929
that's what they can do best and this is

00:26:26,189 --> 00:26:30,539
exactly a now we're getting there

00:26:27,929 --> 00:26:34,529
finally we're legume comes in and I

00:26:30,539 --> 00:26:36,599
acknowledge that not even paint it's

00:26:34,529 --> 00:26:38,399
like whatever and blue doesn't really

00:26:36,599 --> 00:26:42,509
work well here so that should be the

00:26:38,399 --> 00:26:44,909
logon logo sorry for that so what does

00:26:42,509 --> 00:26:48,359
legume change in the whole game

00:26:44,909 --> 00:26:53,099
logon isn't a complete framework I'd

00:26:48,359 --> 00:26:56,219
like to call it optimized layer on top

00:26:53,099 --> 00:26:58,139
of our car and play so instead of having

00:26:56,219 --> 00:27:01,079
to mingle around with the individual

00:26:58,139 --> 00:27:04,889
technologies you can just use log um and

00:27:01,079 --> 00:27:06,899
have a very very complete developer

00:27:04,889 --> 00:27:08,759
experience without having to build all

00:27:06,899 --> 00:27:11,789
those individual technologies into

00:27:08,759 --> 00:27:15,179
something new and it also takes care for

00:27:11,789 --> 00:27:19,079
the service definition itself we have a

00:27:15,179 --> 00:27:21,209
service API you don't need anything to

00:27:19,079 --> 00:27:23,279
bundle your individual bills together

00:27:21,209 --> 00:27:24,720
because log um has a very opinionated

00:27:23,279 --> 00:27:29,220
framework to make that

00:27:24,720 --> 00:27:30,840
happen for you and most importantly you

00:27:29,220 --> 00:27:33,179
have something that takes you all the

00:27:30,840 --> 00:27:35,610
way from the individual developer

00:27:33,179 --> 00:27:38,400
machine to the distributed system in

00:27:35,610 --> 00:27:40,830
production on various nodes wherever

00:27:38,400 --> 00:27:46,080
they are and this is exactly what Logan

00:27:40,830 --> 00:27:49,580
was built to inside lagom are exactly

00:27:46,080 --> 00:27:53,130
the technologies you would have expected

00:27:49,580 --> 00:27:55,110
SBT is build tool as it is a lot more

00:27:53,130 --> 00:28:00,090
than a bill tool is it is like a

00:27:55,110 --> 00:28:03,299
development environment and it will help

00:28:00,090 --> 00:28:09,179
you a lot to be productive hot reloading

00:28:03,299 --> 00:28:14,700
issues gun starting individual services

00:28:09,179 --> 00:28:16,440
like Java jar it terminals gun SBT and

00:28:14,700 --> 00:28:18,690
the larom development environment allows

00:28:16,440 --> 00:28:21,059
you to fire up a complete micro-services

00:28:18,690 --> 00:28:23,640
system including a local database

00:28:21,059 --> 00:28:26,850
including all the necessary services

00:28:23,640 --> 00:28:28,650
that are included in your system and it

00:28:26,850 --> 00:28:33,480
fires up everything with a single

00:28:28,650 --> 00:28:37,080
command persistence back-end in this

00:28:33,480 --> 00:28:39,150
case is Cassandra and for the local

00:28:37,080 --> 00:28:41,309
development and service discovery it

00:28:39,150 --> 00:28:47,549
highly relies on Google juice in that

00:28:41,309 --> 00:28:49,710
case somebody heard that before maybe

00:28:47,549 --> 00:28:55,590
highly opinionated what does that mean

00:28:49,710 --> 00:28:58,559
actually it means we don't let you do

00:28:55,590 --> 00:29:01,500
everything with log on first of all if

00:28:58,559 --> 00:29:04,110
you are using a logon you definitely

00:29:01,500 --> 00:29:08,309
decide to implement micro service based

00:29:04,110 --> 00:29:12,090
architectures and we have various api's

00:29:08,309 --> 00:29:15,210
ready for you to use that help you

00:29:12,090 --> 00:29:18,570
implement the principles and design

00:29:15,210 --> 00:29:22,460
patterns without too much thinking about

00:29:18,570 --> 00:29:25,020
it that's first of all the service API

00:29:22,460 --> 00:29:28,110
wait can actually implement a service

00:29:25,020 --> 00:29:30,270
interface so for everybody out of the

00:29:28,110 --> 00:29:33,270
Java EE alike it's it's kind of a

00:29:30,270 --> 00:29:36,539
servlet based the standardized API that

00:29:33,270 --> 00:29:37,879
you can just use and I think I've I've

00:29:36,539 --> 00:29:41,820
not seen that before

00:29:37,879 --> 00:29:44,730
anywhere solo gum has a service API and

00:29:41,820 --> 00:29:48,049
we have a persistence API that is

00:29:44,730 --> 00:29:51,119
actually capable of delivering CQRS

00:29:48,049 --> 00:29:52,730
features so you can directly implement

00:29:51,119 --> 00:29:56,090
that you don't have to think about how

00:29:52,730 --> 00:29:57,869
logon guides you with a very strict api

00:29:56,090 --> 00:30:00,299
we talked about the development

00:29:57,869 --> 00:30:02,340
environment and the production setting

00:30:00,299 --> 00:30:05,249
environment is also included every hook

00:30:02,340 --> 00:30:07,139
that you could you could need every

00:30:05,249 --> 00:30:09,629
service interface to put your individual

00:30:07,139 --> 00:30:15,779
services into production is also part of

00:30:09,629 --> 00:30:17,929
a low gamma API basically takes care for

00:30:15,779 --> 00:30:22,080
everything that has to do with

00:30:17,929 --> 00:30:24,869
communication between services you don't

00:30:22,080 --> 00:30:27,029
have to think about how calls are

00:30:24,869 --> 00:30:29,970
constructed you don't have to think

00:30:27,029 --> 00:30:31,080
about how services communicate with each

00:30:29,970 --> 00:30:33,149
other

00:30:31,080 --> 00:30:36,869
you basically just implement your

00:30:33,149 --> 00:30:40,259
bounded context definitions and you can

00:30:36,869 --> 00:30:42,899
use them the services with various

00:30:40,259 --> 00:30:45,869
endpoint technologies and can also use

00:30:42,899 --> 00:30:49,350
them in from service to service calls so

00:30:45,869 --> 00:30:51,960
interest service calls all on a single

00:30:49,350 --> 00:30:54,389
API without having to learn akka that

00:30:51,960 --> 00:30:56,789
much without having to learn play that

00:30:54,389 --> 00:31:02,359
much so it's all nicely encapsulated

00:30:56,789 --> 00:31:02,359
with a more very fluent API in that case

00:31:02,809 --> 00:31:11,549
the persistence API I think my biggest

00:31:08,239 --> 00:31:15,929
advantage here is that it totally turns

00:31:11,549 --> 00:31:18,499
everything I knew about JDBC and JPA

00:31:15,929 --> 00:31:22,080
upside down because it fully relies on

00:31:18,499 --> 00:31:26,960
CQRS so instead of persisting complete

00:31:22,080 --> 00:31:31,230
objects we are storing the deltas in

00:31:26,960 --> 00:31:34,529
terms of messages so event sourcing is

00:31:31,230 --> 00:31:36,450
is the big big thing behind that we're

00:31:34,529 --> 00:31:39,450
basically replaying the state of

00:31:36,450 --> 00:31:41,549
individual entities through and through

00:31:39,450 --> 00:31:44,730
capturing the individual change events

00:31:41,549 --> 00:31:48,269
that happen and that has a lot of

00:31:44,730 --> 00:31:50,879
advantages so if you want to construct

00:31:48,269 --> 00:31:53,700
a read site for your persistent entities

00:31:50,879 --> 00:31:54,749
you can basically choose at any given

00:31:53,700 --> 00:31:57,779
point in time

00:31:54,749 --> 00:32:00,239
what part of the entity you really need

00:31:57,779 --> 00:32:02,999
so you can have read site that only

00:32:00,239 --> 00:32:05,940
grabs like the first three attributes of

00:32:02,999 --> 00:32:08,759
your entity and expose that as a table

00:32:05,940 --> 00:32:10,589
view you can also expose the complete

00:32:08,759 --> 00:32:13,469
captured events and the complete

00:32:10,589 --> 00:32:16,649
attributes of your entities you can

00:32:13,469 --> 00:32:21,479
still use something like crud and JDBC

00:32:16,649 --> 00:32:23,759
XS even in logon just don't use the

00:32:21,479 --> 00:32:25,619
persistence API in that case and that's

00:32:23,759 --> 00:32:29,369
exactly why it's highly opinionated so

00:32:25,619 --> 00:32:33,419
you don't have a big choice if you want

00:32:29,369 --> 00:32:36,419
to go that way this looks like spring

00:32:33,419 --> 00:32:38,129
butit's not it's actually SBT firing up

00:32:36,419 --> 00:32:40,859
your your local development environment

00:32:38,129 --> 00:32:42,450
and it's actually just one command I've

00:32:40,859 --> 00:32:44,639
been using activator here it doesn't

00:32:42,450 --> 00:32:46,769
matter you can just simply use SBT and

00:32:44,639 --> 00:32:50,219
the command to fire up your service

00:32:46,769 --> 00:32:53,729
system is run all that's pretty much it

00:32:50,219 --> 00:32:55,679
you get your a service locator which is

00:32:53,729 --> 00:32:58,559
used internally to look up the services

00:32:55,679 --> 00:33:00,809
and you have your gateway running which

00:32:58,559 --> 00:33:07,139
dispatches requests from climb to the

00:33:00,809 --> 00:33:09,599
individual endpoints the next steps for

00:33:07,139 --> 00:33:13,649
logon are pretty easy so we're that

00:33:09,599 --> 00:33:14,969
close maybe even closer to a 1.0 at the

00:33:13,649 --> 00:33:17,759
very moment it's still a technical

00:33:14,969 --> 00:33:20,099
preview we are looking at a scala

00:33:17,759 --> 00:33:22,739
api i apologize for everything being

00:33:20,099 --> 00:33:24,959
java right now but this is exactly what

00:33:22,739 --> 00:33:29,969
you get when you start a try out logon

00:33:24,959 --> 00:33:32,489
today it's Java based API first you will

00:33:29,969 --> 00:33:34,409
find the deeper you dig into log on that

00:33:32,489 --> 00:33:37,769
the service coupling at the very moment

00:33:34,409 --> 00:33:40,469
is comparable tight and it's actually

00:33:37,769 --> 00:33:43,169
binary and we want to break that up so

00:33:40,469 --> 00:33:44,969
there will be a swagger integration to

00:33:43,169 --> 00:33:47,820
really separate the services from each

00:33:44,969 --> 00:33:49,829
other and because everybody has been

00:33:47,820 --> 00:33:53,279
screaming for maven support especially

00:33:49,829 --> 00:33:56,519
those legacy Java developers and maybe

00:33:53,279 --> 00:33:58,440
even myself we will get a reasonable

00:33:56,519 --> 00:33:59,140
maven support the idea behind that is

00:33:58,440 --> 00:34:01,180
that you can

00:33:59,140 --> 00:34:04,510
actually integrate existing Java based

00:34:01,180 --> 00:34:06,190
libraries or modules or features into

00:34:04,510 --> 00:34:09,040
your newly built micro service based

00:34:06,190 --> 00:34:12,190
system without problem there will be

00:34:09,040 --> 00:34:14,470
more support for secure s and various DS

00:34:12,190 --> 00:34:18,880
at the moment is still Cassandra and

00:34:14,470 --> 00:34:21,460
nothing else and I think the other part

00:34:18,880 --> 00:34:23,860
is the operational side is based on

00:34:21,460 --> 00:34:27,220
conductor at the very moment which is

00:34:23,860 --> 00:34:30,100
something that not all of us totally

00:34:27,220 --> 00:34:33,120
support there is a community project who

00:34:30,100 --> 00:34:37,200
is writing an integration for kubernetes

00:34:33,120 --> 00:34:40,240
there are a couple of initiatives around

00:34:37,200 --> 00:34:42,640
legume-based on D cos like mesosphere

00:34:40,240 --> 00:34:45,100
data center operating system so there's

00:34:42,640 --> 00:34:46,510
a lot of stuff coming up if you feel

00:34:45,100 --> 00:34:48,370
there's something missing after you

00:34:46,510 --> 00:34:51,190
looked at a logo moment and start to

00:34:48,370 --> 00:34:53,500
play around just let me know send me an

00:34:51,190 --> 00:34:55,990
email and I'd be totally happy to get

00:34:53,500 --> 00:35:01,470
that feedback in and talk to the team

00:34:55,990 --> 00:35:07,000
about it sorry swagger is actually in

00:35:01,470 --> 00:35:10,150
REST API description and the dynamic

00:35:07,000 --> 00:35:14,520
REST API description so that's kind of

00:35:10,150 --> 00:35:20,740
what is it legal to compare that with W

00:35:14,520 --> 00:35:24,070
with a DSL web service dsls maybe way to

00:35:20,740 --> 00:35:25,900
say okay you find log on my github

00:35:24,070 --> 00:35:29,890
because the good news is it's open

00:35:25,900 --> 00:35:31,840
source so just give it a try play around

00:35:29,890 --> 00:35:33,520
with it we have a great mailing list

00:35:31,840 --> 00:35:38,110
where all of our engineers are reading

00:35:33,520 --> 00:35:38,890
and most importantly answering you find

00:35:38,110 --> 00:35:42,880
log I'm on Twitter

00:35:38,890 --> 00:35:45,760
and I have to admit that's mostly me but

00:35:42,880 --> 00:35:47,520
again I like it and we also have a chat

00:35:45,760 --> 00:35:50,110
room which is pretty cool

00:35:47,520 --> 00:35:54,370
the idea behind log on is pretty simple

00:35:50,110 --> 00:35:56,860
it's exactly that book Jonah's wrote it

00:35:54,370 --> 00:35:59,410
and it contains the architectural

00:35:56,860 --> 00:36:02,530
principles behind react of micro service

00:35:59,410 --> 00:36:04,240
based systems it's totally free to

00:36:02,530 --> 00:36:06,070
download just give me your name and your

00:36:04,240 --> 00:36:07,490
email address register on the side

00:36:06,070 --> 00:36:10,070
linked here and you can

00:36:07,490 --> 00:36:13,790
download all kinds of copies PDF eBook

00:36:10,070 --> 00:36:16,490
formats of various ones it gives you a

00:36:13,790 --> 00:36:19,450
very very solid overview and is probably

00:36:16,490 --> 00:36:21,710
the best read for architects in general

00:36:19,450 --> 00:36:23,750
you've seen that one in your attendee

00:36:21,710 --> 00:36:27,380
bags if you don't want to take it with

00:36:23,750 --> 00:36:30,380
you just download again the same same

00:36:27,380 --> 00:36:32,600
procedure it's free you can share it

00:36:30,380 --> 00:36:34,460
with your with your peers and just give

00:36:32,600 --> 00:36:38,869
it a try to get your first hands-on

00:36:34,460 --> 00:36:41,030
logon and this is actually where you can

00:36:38,869 --> 00:36:44,869
access it so this is the github project

00:36:41,030 --> 00:36:46,910
URL I really have a very nice project

00:36:44,869 --> 00:36:48,890
site about welcome up there are a couple

00:36:46,910 --> 00:36:50,840
of introduction e like three minute

00:36:48,890 --> 00:36:53,330
videos that you could watch about all

00:36:50,840 --> 00:36:56,650
aspects around logon and the

00:36:53,330 --> 00:36:56,650
documentation is pretty awesome

00:36:57,070 --> 00:37:03,470
no it's not as documentation seriously

00:36:59,720 --> 00:37:05,540
wake up no documentation is perfect but

00:37:03,470 --> 00:37:07,850
it's a very solid start and it's one of

00:37:05,540 --> 00:37:09,619
the best ones I've seen in a while and

00:37:07,850 --> 00:37:11,840
again if you have any any ideas about

00:37:09,619 --> 00:37:13,700
how to improve the whole thing just let

00:37:11,840 --> 00:37:17,170
us know a couple of ways to get in

00:37:13,700 --> 00:37:20,440
contact with us thank you for your time

00:37:17,170 --> 00:37:20,440

YouTube URL: https://www.youtube.com/watch?v=QjYnFiwO8F8


