Title: Keynote: Journey to a Real Time Enterprise by Neha Narkhede
Publication date: 2018-09-22
Playlist: Scala Days New York 2018 Keynotes
Description: 
	This video was recorded at Scala Days New York 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://na.scaladays.org/schedule/journey-to-a-real-time-enterprise
Captions: 
	00:00:03,550 --> 00:00:08,860
a high in New York City I'm really

00:00:05,710 --> 00:00:11,349
excited to be here and give this first

00:00:08,860 --> 00:00:13,269
keynote for today I hope you're looking

00:00:11,349 --> 00:00:15,580
forward to a fantastic conference I had

00:00:13,269 --> 00:00:19,210
what I wanted to kick off this day with

00:00:15,580 --> 00:00:21,490
is you know share my observation of a

00:00:19,210 --> 00:00:23,949
pretty big shift happening in the

00:00:21,490 --> 00:00:27,119
industry that have have been lucky

00:00:23,949 --> 00:00:30,069
enough to have a front row seat to and

00:00:27,119 --> 00:00:32,529
you know as part of my day job I get to

00:00:30,069 --> 00:00:35,230
talk to a lot of companies right some of

00:00:32,529 --> 00:00:37,390
them are super sophisticated you know

00:00:35,230 --> 00:00:39,670
lots of them back in Silicon Valley and

00:00:37,390 --> 00:00:41,219
I also get to talk to brick-and-mortar

00:00:39,670 --> 00:00:44,410
businesses that are actually

00:00:41,219 --> 00:00:48,339
transforming themselves into digital

00:00:44,410 --> 00:00:51,670
ones and a key sort of you know trend I

00:00:48,339 --> 00:00:54,339
observe in that transformation is the

00:00:51,670 --> 00:00:57,699
rise of real-time data and stream

00:00:54,339 --> 00:00:59,920
processing so in this talk today I

00:00:57,699 --> 00:01:02,859
actually want to put forth a simple

00:00:59,920 --> 00:01:06,220
thesis I think we are witnessing the

00:01:02,859 --> 00:01:08,320
rise of a new category of infrastructure

00:01:06,220 --> 00:01:12,070
technology which is the streaming

00:01:08,320 --> 00:01:14,800
platform and this new way of thinking

00:01:12,070 --> 00:01:17,530
about data is not something we've had to

00:01:14,800 --> 00:01:20,110
do very often now if you have been in

00:01:17,530 --> 00:01:22,480
the industry long enough you've observed

00:01:20,110 --> 00:01:25,690
a few big categories of infrastructure

00:01:22,480 --> 00:01:27,700
technology and each of these shaped a

00:01:25,690 --> 00:01:30,250
whole decade of applications right it

00:01:27,700 --> 00:01:32,230
started with relational databases that

00:01:30,250 --> 00:01:34,810
shaped dynamic web apps application

00:01:32,230 --> 00:01:37,180
development there were data warehouses

00:01:34,810 --> 00:01:40,360
that shaped business intelligence and

00:01:37,180 --> 00:01:43,240
analytics and I think this whole area

00:01:40,360 --> 00:01:46,450
around streaming platforms around kafka

00:01:43,240 --> 00:01:49,450
and stream processing is likely to be

00:01:46,450 --> 00:01:51,640
like that from my observation and

00:01:49,450 --> 00:01:53,800
experience I've observed that the impact

00:01:51,640 --> 00:01:56,050
that a streaming platform can have and

00:01:53,800 --> 00:01:58,720
has on a business is probably as

00:01:56,050 --> 00:02:01,900
significant as these other categories of

00:01:58,720 --> 00:02:04,210
technology but you might think you know

00:02:01,900 --> 00:02:07,030
what is the evidence that such a thing

00:02:04,210 --> 00:02:09,160
might be happening right so let's look

00:02:07,030 --> 00:02:12,640
at Kafka's journey it started about

00:02:09,160 --> 00:02:14,650
eight to nine years ago back in Silicon

00:02:12,640 --> 00:02:17,230
Valley when we created Kafka we open

00:02:14,650 --> 00:02:19,590
sourced it and pretty soon

00:02:17,230 --> 00:02:22,599
Valley is most technically sophisticated

00:02:19,590 --> 00:02:26,319
companies they started to rebuild their

00:02:22,599 --> 00:02:29,140
data architecture around Kafka over the

00:02:26,319 --> 00:02:32,500
years you know Kafka actually made its

00:02:29,140 --> 00:02:34,299
way into the big enterprises and today

00:02:32,500 --> 00:02:36,790
there are thousands of companies that

00:02:34,299 --> 00:02:39,459
use Kafka for really mission-critical

00:02:36,790 --> 00:02:41,319
applications you know and this range is

00:02:39,459 --> 00:02:44,500
all the way from the biggest banks

00:02:41,319 --> 00:02:50,019
telecom companies insurance businesses

00:02:44,500 --> 00:02:52,090
healthcare and much more so everyone

00:02:50,019 --> 00:02:54,189
kind of knows that we're onto something

00:02:52,090 --> 00:02:57,549
here you know all this data is pointing

00:02:54,189 --> 00:02:59,829
to the rise of a new phenomenon this new

00:02:57,549 --> 00:03:03,310
category of technology called the

00:02:59,829 --> 00:03:06,480
streaming platform now this is powering

00:03:03,310 --> 00:03:10,209
the move from batch to real-time the

00:03:06,480 --> 00:03:12,730
streaming platform is the architecture

00:03:10,209 --> 00:03:14,230
of a lot of tech companies and this is

00:03:12,730 --> 00:03:17,109
something that's destined to be a major

00:03:14,230 --> 00:03:19,030
technology platform in the world so you

00:03:17,109 --> 00:03:20,739
might think well you know what is the

00:03:19,030 --> 00:03:23,349
role of a streaming platform in a

00:03:20,739 --> 00:03:25,359
business the role of a streaming

00:03:23,349 --> 00:03:27,819
platform in a business is to sit at the

00:03:25,359 --> 00:03:30,040
center of the company you know

00:03:27,819 --> 00:03:32,949
interconnect all the micro services and

00:03:30,040 --> 00:03:34,569
applications capture streams of events

00:03:32,949 --> 00:03:37,209
from all parts of the business and in

00:03:34,569 --> 00:03:40,239
particular applications connect all that

00:03:37,209 --> 00:03:43,000
data to all the backend systems and be

00:03:40,239 --> 00:03:44,040
able to do that in real time and a

00:03:43,000 --> 00:03:47,049
global scale

00:03:44,040 --> 00:03:50,079
that is the vision we had when we

00:03:47,049 --> 00:03:52,509
started Kafka and that is what we had

00:03:50,079 --> 00:03:56,079
envisioned companies would turn into by

00:03:52,509 --> 00:03:58,840
adopting it now you might think about

00:03:56,079 --> 00:04:01,509
you know why did we have to solve this

00:03:58,840 --> 00:04:03,699
problem or what problem does a streaming

00:04:01,509 --> 00:04:05,979
platform solve for a business and why

00:04:03,699 --> 00:04:08,829
did we create it so in order to answer

00:04:05,979 --> 00:04:11,889
that I wanted to rewind like decades ago

00:04:08,829 --> 00:04:14,590
right and replay what happened so we had

00:04:11,889 --> 00:04:17,019
relational databases and they were

00:04:14,590 --> 00:04:18,970
mainly used for a lot of application

00:04:17,019 --> 00:04:21,729
integration needs in addition to

00:04:18,970 --> 00:04:23,800
transactional applications there over

00:04:21,729 --> 00:04:25,700
time in order to isolate the database

00:04:23,800 --> 00:04:28,130
and still be able to run these

00:04:25,700 --> 00:04:30,320
political bash workloads we brought in

00:04:28,130 --> 00:04:33,200
data warehouses right and that became

00:04:30,320 --> 00:04:35,480
the center for a lot of beyond analytics

00:04:33,200 --> 00:04:39,520
and that actually led to a whole

00:04:35,480 --> 00:04:42,440
ecosystem of ETL tools that existed

00:04:39,520 --> 00:04:45,920
mainly to transfer data from databases

00:04:42,440 --> 00:04:46,940
into the warehouse then you know

00:04:45,920 --> 00:04:49,400
databases

00:04:46,940 --> 00:04:51,050
stop being scalable for application

00:04:49,400 --> 00:04:53,660
integration and messaging so we created

00:04:51,050 --> 00:04:55,430
M queues to isolate the databases and

00:04:53,660 --> 00:04:58,880
yet have applications talk to each other

00:04:55,430 --> 00:05:02,150
and that change led to another category

00:04:58,880 --> 00:05:05,690
of application integration tools called

00:05:02,150 --> 00:05:08,360
ESB Zandi eyes that were a little bit

00:05:05,690 --> 00:05:11,450
like ETL but mainly specialized only for

00:05:08,360 --> 00:05:13,280
application integration and over the

00:05:11,450 --> 00:05:15,860
decades as companies started to become

00:05:13,280 --> 00:05:18,530
more data oriented you know we realized

00:05:15,860 --> 00:05:21,200
that hey you know the data that goes

00:05:18,530 --> 00:05:24,040
into your warehouse you actually need to

00:05:21,200 --> 00:05:26,690
use in your applications and vice versa

00:05:24,040 --> 00:05:29,030
so then that led to a lot of these

00:05:26,690 --> 00:05:31,100
point-to-point connections that you have

00:05:29,030 --> 00:05:34,450
to put in place in order to just

00:05:31,100 --> 00:05:37,160
duct-tape data to move it around and

00:05:34,450 --> 00:05:39,260
this might work for a couple of

00:05:37,160 --> 00:05:41,030
applications and maybe a couple of data

00:05:39,260 --> 00:05:43,400
systems but it simply doesn't scale

00:05:41,030 --> 00:05:45,830
anymore you know you have data stuck in

00:05:43,400 --> 00:05:47,480
legacy systems in various silos and this

00:05:45,830 --> 00:05:51,920
point-to-point architecture is actually

00:05:47,480 --> 00:05:54,430
the reality of many businesses so that

00:05:51,920 --> 00:05:56,660
is the problem we started with and we

00:05:54,430 --> 00:05:58,940
reimagine the world very differently and

00:05:56,660 --> 00:06:01,370
we said well if our business is digital

00:05:58,940 --> 00:06:03,950
what do you actually need right you need

00:06:01,370 --> 00:06:06,380
an architecture that is fundamentally

00:06:03,950 --> 00:06:09,380
event-driven that allows you to capture

00:06:06,380 --> 00:06:13,070
data in its most natural form which is

00:06:09,380 --> 00:06:14,540
as a series of events so then we started

00:06:13,070 --> 00:06:16,790
you know thinking about well what is

00:06:14,540 --> 00:06:20,390
different right about this event-driven

00:06:16,790 --> 00:06:22,760
architecture or this new need for a

00:06:20,390 --> 00:06:24,980
business in order for it to move to this

00:06:22,760 --> 00:06:26,150
event-driven architecture and it is that

00:06:24,980 --> 00:06:28,310
there are several things that have

00:06:26,150 --> 00:06:30,080
changed over time right you actually

00:06:28,310 --> 00:06:32,300
don't have just the database and the

00:06:30,080 --> 00:06:34,250
warehouse you have many more distributed

00:06:32,300 --> 00:06:36,680
systems from those sequel databases to

00:06:34,250 --> 00:06:39,060
search systems to a lot of specialized

00:06:36,680 --> 00:06:40,850
logging systems and much more so

00:06:39,060 --> 00:06:44,460
whole data integration problem has

00:06:40,850 --> 00:06:46,490
really massively been complicated in

00:06:44,460 --> 00:06:49,320
addition to that we're actually moving

00:06:46,490 --> 00:06:52,020
slowly and steadily away from big

00:06:49,320 --> 00:06:54,270
monoliths to lots of micro services so

00:06:52,020 --> 00:06:57,419
your application integration needs have

00:06:54,270 --> 00:06:59,520
also multiplied and in the last decade

00:06:57,419 --> 00:07:02,160
or so this actually legitimately a huge

00:06:59,520 --> 00:07:06,270
move away from bash to real time for

00:07:02,160 --> 00:07:09,780
most of what a business needs so this is

00:07:06,270 --> 00:07:11,669
the new world that we live in and what

00:07:09,780 --> 00:07:14,580
that needs is a fundamentally different

00:07:11,669 --> 00:07:17,250
way of handling your data and that is

00:07:14,580 --> 00:07:20,220
what a streaming platform does you know

00:07:17,250 --> 00:07:22,979
if you think about this you might have

00:07:20,220 --> 00:07:25,080
heard this before right this promise of

00:07:22,979 --> 00:07:27,960
an event or an architecture it's not a

00:07:25,080 --> 00:07:29,520
new term it's probably being invented by

00:07:27,960 --> 00:07:31,889
one of these different categories of

00:07:29,520 --> 00:07:34,979
technologies that existed to also solve

00:07:31,889 --> 00:07:36,630
that problem back then and you might

00:07:34,979 --> 00:07:38,639
think about well why didn't these

00:07:36,630 --> 00:07:40,380
technologies actually bring this whole

00:07:38,639 --> 00:07:43,140
event of an architecture at the center

00:07:40,380 --> 00:07:44,550
of a business and before we created

00:07:43,140 --> 00:07:46,890
Kafka we actually started with a

00:07:44,550 --> 00:07:48,660
thorough you know technical breakdown of

00:07:46,890 --> 00:07:51,000
a lot of these systems and we realized

00:07:48,660 --> 00:07:52,950
that there were some core architectural

00:07:51,000 --> 00:07:55,440
deficiencies that prevented these

00:07:52,950 --> 00:07:57,620
particular systems from serving the

00:07:55,440 --> 00:08:00,930
needs of a whole event driven

00:07:57,620 --> 00:08:02,220
organization so while they worked for

00:08:00,930 --> 00:08:04,440
the set of problems that they were

00:08:02,220 --> 00:08:07,770
designed to solve they were actually not

00:08:04,440 --> 00:08:09,750
designed to you know be the businesses

00:08:07,770 --> 00:08:13,260
central nervous system and so that is

00:08:09,750 --> 00:08:15,960
why that didn't quite work and while

00:08:13,260 --> 00:08:17,490
that might be okay for some time the

00:08:15,960 --> 00:08:20,450
world today has changed right there are

00:08:17,490 --> 00:08:22,650
lots of these big trends at the heart of

00:08:20,450 --> 00:08:24,750
digitization of business you know this

00:08:22,650 --> 00:08:26,760
is trends I see everywhere there's

00:08:24,750 --> 00:08:29,130
internet things there's micro services

00:08:26,760 --> 00:08:30,720
you know the mobile trend is like it's

00:08:29,130 --> 00:08:32,490
taken for granted now this machine

00:08:30,720 --> 00:08:35,700
learning and if you look at all of these

00:08:32,490 --> 00:08:38,880
they actually rely on a central

00:08:35,700 --> 00:08:41,760
streaming backbone a source of truth to

00:08:38,880 --> 00:08:45,720
be able to get data hopefully in real

00:08:41,760 --> 00:08:47,910
time and so that is the reason that you

00:08:45,720 --> 00:08:52,590
know now is the time to actually solve

00:08:47,910 --> 00:08:56,160
this problem in the right way so

00:08:52,590 --> 00:08:59,730
is needed to make this transition to an

00:08:56,160 --> 00:09:02,520
event of an architecture it isn't just

00:08:59,730 --> 00:09:04,890
about adopting or different technology

00:09:02,520 --> 00:09:07,440
you of course need that in my experience

00:09:04,890 --> 00:09:10,260
it's actually much more about changing

00:09:07,440 --> 00:09:13,710
the way you think about your data it's

00:09:10,260 --> 00:09:16,650
about making a fundamental shift to what

00:09:13,710 --> 00:09:19,650
I call event centric thinking this is

00:09:16,650 --> 00:09:21,780
nothing but the ability to view data in

00:09:19,650 --> 00:09:25,710
its most natural form the ability to

00:09:21,780 --> 00:09:29,130
capture events sense events and process

00:09:25,710 --> 00:09:32,430
events in the moment versus treating it

00:09:29,130 --> 00:09:36,480
as a static pile of data which is how

00:09:32,430 --> 00:09:38,550
we've been trained to think of data so

00:09:36,480 --> 00:09:41,100
that brings me to this question that

00:09:38,550 --> 00:09:42,720
some of you might be thinking about well

00:09:41,100 --> 00:09:44,880
what is an event is it different from

00:09:42,720 --> 00:09:47,880
information is it different from data

00:09:44,880 --> 00:09:49,410
the way we know this concept and it's

00:09:47,880 --> 00:09:51,540
really pretty simple

00:09:49,410 --> 00:09:54,180
it's an event it's just something that

00:09:51,540 --> 00:09:57,540
happened in the business at some point

00:09:54,180 --> 00:09:59,370
in time that might be relevant right so

00:09:57,540 --> 00:10:01,770
what are some examples you know these

00:09:59,370 --> 00:10:03,630
are some examples from different types

00:10:01,770 --> 00:10:05,820
of businesses right or sales happening

00:10:03,630 --> 00:10:08,010
an invoice taking place or trade

00:10:05,820 --> 00:10:09,720
happening in financial services a

00:10:08,010 --> 00:10:12,780
customer experience happening in

00:10:09,720 --> 00:10:14,850
essentially all types of businesses if

00:10:12,780 --> 00:10:17,430
you observe these examples you will

00:10:14,850 --> 00:10:20,880
realize that these are things that

00:10:17,430 --> 00:10:24,540
should hopefully happen all the time in

00:10:20,880 --> 00:10:27,930
a healthy business these are events you

00:10:24,540 --> 00:10:30,900
know put very naturally an event is just

00:10:27,930 --> 00:10:33,930
an immutable record about something that

00:10:30,900 --> 00:10:37,050
happened at some point in time so the

00:10:33,930 --> 00:10:39,180
question to ask is well if these events

00:10:37,050 --> 00:10:42,510
in in their most natural form they

00:10:39,180 --> 00:10:44,460
arrive on the fly why shouldn't you be

00:10:42,510 --> 00:10:48,030
able to process it as soon as they

00:10:44,460 --> 00:10:49,620
arrive versus when it is too late so

00:10:48,030 --> 00:10:52,710
this is the whole premise of the

00:10:49,620 --> 00:10:55,770
event-driven architecture I actually

00:10:52,710 --> 00:10:58,710
wanted to point out that this notion of

00:10:55,770 --> 00:11:01,230
you know using events ectric thinking

00:10:58,710 --> 00:11:04,800
you know and capturing streams of events

00:11:01,230 --> 00:11:05,950
that represent changes in state it's

00:11:04,800 --> 00:11:08,529
actually been there for that

00:11:05,950 --> 00:11:12,070
this is not a new concept this is at the

00:11:08,529 --> 00:11:14,019
heart of database replication this is at

00:11:12,070 --> 00:11:15,399
the heart of distributed systems and

00:11:14,019 --> 00:11:18,130
this is at the heart of stream

00:11:15,399 --> 00:11:20,920
processing and so the bowl claim I want

00:11:18,130 --> 00:11:23,589
to make here is that if you wanted to

00:11:20,920 --> 00:11:27,459
you could think of all your data as

00:11:23,589 --> 00:11:31,060
event streams and relating this whole

00:11:27,459 --> 00:11:32,949
concept back to how a business works you

00:11:31,060 --> 00:11:35,350
know a simplistic definition of a

00:11:32,949 --> 00:11:38,740
company or business is a series of

00:11:35,350 --> 00:11:40,660
events and reacting to those events that

00:11:38,740 --> 00:11:43,750
form the company's business logic and

00:11:40,660 --> 00:11:47,110
that's really how natural event oriented

00:11:43,750 --> 00:11:50,579
businesses are so some examples that I

00:11:47,110 --> 00:11:53,070
wanted to share of you know traditional

00:11:50,579 --> 00:11:54,730
companies traditional organizations

00:11:53,070 --> 00:11:57,550
transforming themselves into

00:11:54,730 --> 00:12:00,430
event-driven ones just to make sure that

00:11:57,550 --> 00:12:02,470
this concept is actually real you know

00:12:00,430 --> 00:12:04,660
this is my favorite example this is from

00:12:02,470 --> 00:12:06,820
the Norwegian work and welfare

00:12:04,660 --> 00:12:10,149
Administration they have an initiative

00:12:06,820 --> 00:12:13,480
called life is a series of events is a

00:12:10,149 --> 00:12:17,199
stream of events their vision is to put

00:12:13,480 --> 00:12:19,959
event thinking into practice for all 5.2

00:12:17,199 --> 00:12:22,000
million citizens of Norway to make the

00:12:19,959 --> 00:12:25,510
government work for people in a

00:12:22,000 --> 00:12:28,209
proactive way they pick Africa as the

00:12:25,510 --> 00:12:30,699
streaming backbone for this event of in

00:12:28,209 --> 00:12:33,160
government the concept is all the life

00:12:30,699 --> 00:12:36,459
events the major major ones will trigger

00:12:33,160 --> 00:12:38,620
messages in Kafka that will lead to a

00:12:36,459 --> 00:12:40,810
lot of event even applications that

00:12:38,620 --> 00:12:42,670
respond to those events and actually go

00:12:40,810 --> 00:12:47,199
through a whole bunch of welfare related

00:12:42,670 --> 00:12:50,800
processes that were manual today known

00:12:47,199 --> 00:12:52,510
as vision is to make sure the government

00:12:50,800 --> 00:12:54,569
is event driven to begin with so that

00:12:52,510 --> 00:12:57,010
the citizens don't have to worry about

00:12:54,569 --> 00:12:59,709
manually you know worrying about how to

00:12:57,010 --> 00:13:01,899
get welfare benefits that should just

00:12:59,709 --> 00:13:04,779
work if you capture the events that

00:13:01,899 --> 00:13:06,699
matter anyway so that was an example

00:13:04,779 --> 00:13:09,640
from the government this might be a

00:13:06,699 --> 00:13:11,380
little more familiar this is

00:13:09,640 --> 00:13:13,390
you know all these connected car

00:13:11,380 --> 00:13:15,520
initiative I see this happening across

00:13:13,390 --> 00:13:17,530
the board in the automotive industry is

00:13:15,520 --> 00:13:18,580
they're moving to an event-driven

00:13:17,530 --> 00:13:20,530
architecture

00:13:18,580 --> 00:13:24,640
Howdy's vision in particular is to

00:13:20,530 --> 00:13:27,580
collect data from around 850 sensors on

00:13:24,640 --> 00:13:30,250
the cars onboard processors and to use

00:13:27,580 --> 00:13:32,380
that data stream it across the cellular

00:13:30,250 --> 00:13:35,110
network and regional hubs in Germany and

00:13:32,380 --> 00:13:37,540
use them to power several functions that

00:13:35,110 --> 00:13:39,460
are critical to Oddie that are not

00:13:37,540 --> 00:13:41,950
possible today or are possible with a

00:13:39,460 --> 00:13:43,660
lot of delay right so this includes

00:13:41,950 --> 00:13:46,180
anomaly detection about what's wrong

00:13:43,660 --> 00:13:48,580
with cars this includes driver alerts

00:13:46,180 --> 00:13:51,490
this includes hazard alerts traffic

00:13:48,580 --> 00:13:53,710
alerts and their vision is also that

00:13:51,490 --> 00:13:55,450
this will enable personalization so that

00:13:53,710 --> 00:13:57,100
they're better able to create products

00:13:55,450 --> 00:14:01,330
and services that their customers

00:13:57,100 --> 00:14:04,390
actually want and need Aldi has selected

00:14:01,330 --> 00:14:06,460
Kafka as the streaming backbone and this

00:14:04,390 --> 00:14:08,500
is something I see across the board in

00:14:06,460 --> 00:14:10,660
IOT is you know event of in

00:14:08,500 --> 00:14:13,150
architectures they're not a shiny new

00:14:10,660 --> 00:14:15,910
technology it's simply the need for the

00:14:13,150 --> 00:14:17,680
business the last example I wanted to

00:14:15,910 --> 00:14:20,970
share is from the banking industry I

00:14:17,680 --> 00:14:24,010
think the banking industry you know

00:14:20,970 --> 00:14:26,200
understands real time the most and the

00:14:24,010 --> 00:14:28,810
best example I could find was Royal Bank

00:14:26,200 --> 00:14:30,790
of Canada they not too long ago started

00:14:28,810 --> 00:14:34,030
their streaming journey with the goal of

00:14:30,790 --> 00:14:36,400
just three data from mainframes by

00:14:34,030 --> 00:14:38,530
streaming it into kafka so that they can

00:14:36,400 --> 00:14:40,720
reduce the costs and make sure the reads

00:14:38,530 --> 00:14:45,190
go from a much cheaper and more scalable

00:14:40,720 --> 00:14:48,280
system but today there are 30-plus use

00:14:45,190 --> 00:14:50,920
cases across 50 plus apps and 10 plus

00:14:48,280 --> 00:14:52,900
different lines of businesses in RBC

00:14:50,920 --> 00:14:55,390
that alt happen to the central streaming

00:14:52,900 --> 00:14:57,850
platform and that powers a whole bunch

00:14:55,390 --> 00:15:00,190
of you know processes that are

00:14:57,850 --> 00:15:02,170
irrelevant to the bank from reducing

00:15:00,190 --> 00:15:04,810
anomaly detection time from weeks to

00:15:02,170 --> 00:15:07,630
seconds enabling a move away from

00:15:04,810 --> 00:15:09,370
mainframes to micro services without

00:15:07,630 --> 00:15:11,830
actually touching the old architecture

00:15:09,370 --> 00:15:13,420
and also sharing data across different

00:15:11,830 --> 00:15:15,730
lines of businesses and business

00:15:13,420 --> 00:15:18,340
partners so the streaming platform

00:15:15,730 --> 00:15:22,930
concept is really transforming banks

00:15:18,340 --> 00:15:24,820
into event-driven banks so you know

00:15:22,930 --> 00:15:26,770
that hopefully might have given some con

00:15:24,820 --> 00:15:28,450
you know context on whether this

00:15:26,770 --> 00:15:30,580
event-driven architecture is happening

00:15:28,450 --> 00:15:32,649
and and what are some real use cases you

00:15:30,580 --> 00:15:35,110
know what are companies using it for so

00:15:32,649 --> 00:15:38,800
let's dive into you know what a

00:15:35,110 --> 00:15:41,080
streaming platform is and a streaming

00:15:38,800 --> 00:15:42,880
platform I've mentioned that it powers

00:15:41,080 --> 00:15:44,740
this whole event of an architecture but

00:15:42,880 --> 00:15:47,050
it's really a new concept right what is

00:15:44,740 --> 00:15:50,080
it really do so let's start with the

00:15:47,050 --> 00:15:51,760
technical capabilities you know there

00:15:50,080 --> 00:15:53,830
are some core capabilities that a

00:15:51,760 --> 00:15:56,170
streaming platform should have right the

00:15:53,830 --> 00:15:59,230
first one is probably the most familiar

00:15:56,170 --> 00:16:00,010
to us is the ability to publish and

00:15:59,230 --> 00:16:02,560
subscribe

00:16:00,010 --> 00:16:04,300
you know streams of messages now M

00:16:02,560 --> 00:16:05,620
queues have been able to do this but the

00:16:04,300 --> 00:16:07,540
key difference between a streaming

00:16:05,620 --> 00:16:09,670
platform and the messaging queue is the

00:16:07,540 --> 00:16:12,940
ability to store that data right and

00:16:09,670 --> 00:16:15,339
this ability to store data is really key

00:16:12,940 --> 00:16:18,750
because that is essentially the key

00:16:15,339 --> 00:16:21,279
component that enables decoupling and

00:16:18,750 --> 00:16:23,589
integration of the online application

00:16:21,279 --> 00:16:25,450
world and the offline batch world in

00:16:23,589 --> 00:16:27,970
other words have a single integration

00:16:25,450 --> 00:16:29,380
plane across the company and last but

00:16:27,970 --> 00:16:32,260
not the least is the capability to

00:16:29,380 --> 00:16:33,940
process streams of messages it's so

00:16:32,260 --> 00:16:36,339
these are the key capabilities and

00:16:33,940 --> 00:16:39,070
quintessential characteristics of a

00:16:36,339 --> 00:16:42,310
streaming platform so when people

00:16:39,070 --> 00:16:44,140
encounter this concept of a streaming

00:16:42,310 --> 00:16:46,500
platform they actually come from a

00:16:44,140 --> 00:16:49,180
variety of different backgrounds and

00:16:46,500 --> 00:16:52,270
each of these different backgrounds

00:16:49,180 --> 00:16:54,730
lends them to understanding and viewing

00:16:52,270 --> 00:16:56,200
the streaming platform in a slightly

00:16:54,730 --> 00:16:59,620
different way so I wanted to share that

00:16:56,200 --> 00:17:01,900
there are three most common lenses on

00:16:59,620 --> 00:17:04,630
what a streaming platform actually does

00:17:01,900 --> 00:17:07,089
know and the first lens is the messaging

00:17:04,630 --> 00:17:09,459
band right a lot of people actually

00:17:07,089 --> 00:17:13,240
think of kafka in a streaming platform

00:17:09,459 --> 00:17:16,209
is just an evolution of messaging now

00:17:13,240 --> 00:17:18,970
there is some truth to that view right a

00:17:16,209 --> 00:17:21,130
streaming platform does handle a lot of

00:17:18,970 --> 00:17:24,220
the core applications that a messaging

00:17:21,130 --> 00:17:28,150
system does but viewing kafka in

00:17:24,220 --> 00:17:30,130
particular as just mq is overly limited

00:17:28,150 --> 00:17:33,700
I think there are a couple of major

00:17:30,130 --> 00:17:36,910
differences between an MQ and a

00:17:33,700 --> 00:17:40,000
streaming platform the first one is

00:17:36,910 --> 00:17:41,770
you know Kafka is built as natively

00:17:40,000 --> 00:17:44,200
distributed systems from the grounds up

00:17:41,770 --> 00:17:47,950
so scalability was actually a core

00:17:44,200 --> 00:17:50,470
design principle this does mean that

00:17:47,950 --> 00:17:53,800
Kafka can handle a lot more messages

00:17:50,470 --> 00:17:58,300
than an MQ but that's not the only point

00:17:53,800 --> 00:18:02,470
it is that Kafue can actually serve as a

00:17:58,300 --> 00:18:04,240
central central nervous system and that

00:18:02,470 --> 00:18:06,040
difference is actually critical because

00:18:04,240 --> 00:18:08,350
it can handle not just a couple of

00:18:06,040 --> 00:18:10,090
applications it can actually scale

00:18:08,350 --> 00:18:12,370
through the needs of hundreds or

00:18:10,090 --> 00:18:14,800
thousands of micro services are off

00:18:12,370 --> 00:18:17,290
applications and that's what enables it

00:18:14,800 --> 00:18:20,500
to be a true integration plane across

00:18:17,290 --> 00:18:22,780
the company the second one that we may

00:18:20,500 --> 00:18:24,790
be aware of in this is why Kafka was

00:18:22,780 --> 00:18:26,920
popular one of the main reasons is

00:18:24,790 --> 00:18:29,290
because it stores data it persists data

00:18:26,920 --> 00:18:31,900
so you don't have the fear of running

00:18:29,290 --> 00:18:33,700
out of queue space and today there are

00:18:31,900 --> 00:18:35,980
Kafka clusters out there that store

00:18:33,700 --> 00:18:37,600
probably petabytes of data in them there

00:18:35,980 --> 00:18:40,690
are you know companies like New York

00:18:37,600 --> 00:18:43,690
Times that store data forever in Kafka

00:18:40,690 --> 00:18:45,760
and that is happening so persistence is

00:18:43,690 --> 00:18:47,920
one of the key features and how Kafka is

00:18:45,760 --> 00:18:50,200
different from mqs and the last one is

00:18:47,920 --> 00:18:52,990
actually really important and that one

00:18:50,200 --> 00:18:54,790
is powering stream processing right so

00:18:52,990 --> 00:18:57,820
Kafka actually does power a lot of the

00:18:54,790 --> 00:19:01,360
rich real-time stream processing that

00:18:57,820 --> 00:19:04,180
you've come to expect now today so that

00:19:01,360 --> 00:19:06,610
stream processing concept brings me to

00:19:04,180 --> 00:19:10,480
the second lens on a streaming platform

00:19:06,610 --> 00:19:13,570
and that is Hadoop made fast right so

00:19:10,480 --> 00:19:15,880
there's a group of people and their lens

00:19:13,570 --> 00:19:18,430
on a streaming platform is this actually

00:19:15,880 --> 00:19:20,710
does look like you know Hadoop but

00:19:18,430 --> 00:19:24,220
faster right and there's some truth to

00:19:20,710 --> 00:19:26,920
this view as well after all just like a

00:19:24,220 --> 00:19:30,070
data warehouse or just like Hadoop today

00:19:26,920 --> 00:19:32,230
Kafka does have the kind of a rich

00:19:30,070 --> 00:19:34,420
sequel layer that we have come to expect

00:19:32,230 --> 00:19:36,010
from the Hadoop ecosystem or the

00:19:34,420 --> 00:19:38,620
warehouse ecosystem right and that is

00:19:36,010 --> 00:19:42,340
Kay sequel but the key difference

00:19:38,620 --> 00:19:46,740
between applications whether they're

00:19:42,340 --> 00:19:48,640
queries continuous queries or jobs or

00:19:46,740 --> 00:19:49,040
simply applications that are built

00:19:48,640 --> 00:19:50,810
around

00:19:49,040 --> 00:19:53,480
I've got the key difference between that

00:19:50,810 --> 00:19:56,420
and those built around Hadoop is this

00:19:53,480 --> 00:19:58,910
concept of event at a time processing

00:19:56,420 --> 00:20:01,130
right so fundamentally the applications

00:19:58,910 --> 00:20:03,050
that are built using case equal and the

00:20:01,130 --> 00:20:04,460
kind of activities and the queries that

00:20:03,050 --> 00:20:06,830
you can do using case equal are

00:20:04,460 --> 00:20:09,890
continuous in nature which means that as

00:20:06,830 --> 00:20:12,530
if events arrive on the underlying Kafka

00:20:09,890 --> 00:20:15,320
topics your table viewer the stream view

00:20:12,530 --> 00:20:18,680
actually gets updated and that is the

00:20:15,320 --> 00:20:20,990
key difference but that ability to do

00:20:18,680 --> 00:20:23,030
event at a time querying actually

00:20:20,990 --> 00:20:25,550
completely changes the role of a

00:20:23,030 --> 00:20:27,500
streaming platform relative to Hadoop in

00:20:25,550 --> 00:20:29,990
an organization so although they are

00:20:27,500 --> 00:20:32,930
somewhat similar the role is completely

00:20:29,990 --> 00:20:35,240
different and why is that well it's

00:20:32,930 --> 00:20:37,010
because you know if you look at data

00:20:35,240 --> 00:20:39,860
warehouses if you look at Hadoop right

00:20:37,010 --> 00:20:42,860
primary use cases and the Linux bi

00:20:39,860 --> 00:20:45,770
reporting and they're actually really

00:20:42,860 --> 00:20:47,390
good at that and it is possible that the

00:20:45,770 --> 00:20:50,600
streaming platform will not displace

00:20:47,390 --> 00:20:53,540
these technologies anytime soon and that

00:20:50,600 --> 00:20:56,450
is okay because for reporting a bash ETL

00:20:53,540 --> 00:20:57,920
process it's actually sufficient you

00:20:56,450 --> 00:21:01,430
know you don't really have to change

00:20:57,920 --> 00:21:03,740
anything about it but when you think of

00:21:01,430 --> 00:21:06,500
applications that actually power the

00:21:03,740 --> 00:21:08,540
business here is where the problem

00:21:06,500 --> 00:21:11,390
really arises after all your customers

00:21:08,540 --> 00:21:13,220
actually do not understand 24 hours

00:21:11,390 --> 00:21:16,760
stale data anymore or several hours of

00:21:13,220 --> 00:21:18,680
delay and the whole mechanics of you

00:21:16,760 --> 00:21:20,420
know building your application in a way

00:21:18,680 --> 00:21:22,700
that depends on data that is munch

00:21:20,420 --> 00:21:24,680
through Hadoop and shipped back into

00:21:22,700 --> 00:21:26,900
your production data centers itself is

00:21:24,680 --> 00:21:29,600
really complex and so that is the key

00:21:26,900 --> 00:21:31,520
difference between the roles that these

00:21:29,600 --> 00:21:34,490
two technologies play in a company is

00:21:31,520 --> 00:21:36,530
that the role that a streaming platform

00:21:34,490 --> 00:21:39,680
plays is actually to power exactly

00:21:36,530 --> 00:21:41,930
applications of this nature these are

00:21:39,680 --> 00:21:44,030
not applications that report on the

00:21:41,930 --> 00:21:46,370
business these are actually applications

00:21:44,030 --> 00:21:49,490
that run the business and that is a

00:21:46,370 --> 00:21:52,040
pretty major difference so that brings

00:21:49,490 --> 00:21:55,340
me to the third and final lens for a

00:21:52,040 --> 00:21:57,410
streaming platform and that is about ETL

00:21:55,340 --> 00:21:59,270
and data integration right so it's shown

00:21:57,410 --> 00:22:02,360
earlier there are a whole you know

00:21:59,270 --> 00:22:02,960
category of technology is built to solve

00:22:02,360 --> 00:22:06,050
this date

00:22:02,960 --> 00:22:08,540
an application integration problem but

00:22:06,050 --> 00:22:10,790
you have this chasm in the middle and

00:22:08,540 --> 00:22:14,090
two ends of the spectrum right on one

00:22:10,790 --> 00:22:17,930
end you have AI is in es B's and they

00:22:14,090 --> 00:22:19,250
can handle a quick low volume data on

00:22:17,930 --> 00:22:21,860
the other end of the spectrum you have

00:22:19,250 --> 00:22:25,310
ETL tools that handle somewhat scalable

00:22:21,860 --> 00:22:27,590
but batch data and the problem is that

00:22:25,310 --> 00:22:30,050
you know these actually two different

00:22:27,590 --> 00:22:32,390
ends of the spectrum there's a big gap

00:22:30,050 --> 00:22:35,690
in the middle and that is the gap that a

00:22:32,390 --> 00:22:37,550
streaming platform attempts to fill you

00:22:35,690 --> 00:22:40,370
know this actually gives you a pretty

00:22:37,550 --> 00:22:43,250
hard choice right it gives you either a

00:22:40,370 --> 00:22:44,930
choice between latency or scalability

00:22:43,250 --> 00:22:48,830
and flexibility and you kind of need

00:22:44,930 --> 00:22:50,780
both so this view on in this lens on the

00:22:48,830 --> 00:22:53,120
streaming platform is that it is kind of

00:22:50,780 --> 00:22:55,550
a unification of these two you know

00:22:53,120 --> 00:22:58,940
different concepts and an up leveling on

00:22:55,550 --> 00:23:02,390
that and by that I mean that the E and L

00:22:58,940 --> 00:23:07,120
which is extract and load is powered

00:23:02,390 --> 00:23:10,040
through Kafka's Connect API and the T is

00:23:07,120 --> 00:23:11,750
transformations which on topic after it

00:23:10,040 --> 00:23:14,270
means stream processing right and today

00:23:11,750 --> 00:23:15,890
there are several alternatives that you

00:23:14,270 --> 00:23:18,050
have in order to do stream processing

00:23:15,890 --> 00:23:20,540
you could use Kafka streams API K sequel

00:23:18,050 --> 00:23:23,630
or actually any other stream processing

00:23:20,540 --> 00:23:25,930
system that works with Kafka and the

00:23:23,630 --> 00:23:28,520
connector ecosystem is a pretty

00:23:25,930 --> 00:23:30,440
flourishing and thriving today now today

00:23:28,520 --> 00:23:32,030
have like hundreds of different

00:23:30,440 --> 00:23:34,460
connectors to all types of different

00:23:32,030 --> 00:23:37,340
systems so you're able to build these

00:23:34,460 --> 00:23:38,930
streaming data pipelines with ease by

00:23:37,340 --> 00:23:42,380
just plugging and playing with these

00:23:38,930 --> 00:23:46,910
connectors so coming back to this lens

00:23:42,380 --> 00:23:49,490
tray the traditional ETL view on data

00:23:46,910 --> 00:23:51,740
integration is a lot about one-off

00:23:49,490 --> 00:23:53,270
tooling is about moving data from one

00:23:51,740 --> 00:23:55,040
place to the other

00:23:53,270 --> 00:23:58,370
probably managing some data along the

00:23:55,040 --> 00:24:01,670
way and the streaming platform approach

00:23:58,370 --> 00:24:03,380
on the other hand is much more of a

00:24:01,670 --> 00:24:06,020
platform centric approach what that

00:24:03,380 --> 00:24:07,910
means is there are a bunch of common

00:24:06,020 --> 00:24:10,010
problems that every detail too needs to

00:24:07,910 --> 00:24:12,800
solve they are to do with partitioning

00:24:10,010 --> 00:24:14,450
load balancing schema management the

00:24:12,800 --> 00:24:16,190
streaming platforms of us those are all

00:24:14,450 --> 00:24:16,610
problems that should be solved in a

00:24:16,190 --> 00:24:19,970
platform

00:24:16,610 --> 00:24:22,250
centric approach in a similar way then

00:24:19,970 --> 00:24:24,260
there are you know platform specific API

00:24:22,250 --> 00:24:26,179
that you may need to program to those

00:24:24,260 --> 00:24:27,860
could happen in every connector so

00:24:26,179 --> 00:24:30,140
that's a very platform centric approach

00:24:27,860 --> 00:24:32,360
a streaming platform isn't just for

00:24:30,140 --> 00:24:33,920
getting data from one place to the other

00:24:32,360 --> 00:24:36,140
and munching it along the way it is

00:24:33,920 --> 00:24:38,120
actually much more of a platform in the

00:24:36,140 --> 00:24:40,549
sense that you're expected to build

00:24:38,120 --> 00:24:42,770
applications around it while the

00:24:40,549 --> 00:24:45,440
platform actually moves data and it all

00:24:42,770 --> 00:24:48,890
happens around the same ecosystem it's

00:24:45,440 --> 00:24:51,320
not two separate things anymore so you

00:24:48,890 --> 00:24:54,220
know these three lenses hopefully give

00:24:51,320 --> 00:24:56,720
you some view into you know how people

00:24:54,220 --> 00:24:58,910
understand the streaming platform

00:24:56,720 --> 00:25:01,549
depending on which background they come

00:24:58,910 --> 00:25:04,250
from right so each lens in isolation

00:25:01,549 --> 00:25:06,770
doesn't fully communicate the power of a

00:25:04,250 --> 00:25:08,780
streaming platform but it's actually

00:25:06,770 --> 00:25:10,340
okay because this is the process of

00:25:08,780 --> 00:25:13,330
understanding a new category of

00:25:10,340 --> 00:25:16,040
technology it usually a new category

00:25:13,330 --> 00:25:19,100
cuts across a number of familiar use

00:25:16,040 --> 00:25:20,960
cases in a way that wasn't ever possible

00:25:19,100 --> 00:25:22,640
before so I think that's what's

00:25:20,960 --> 00:25:25,429
happening with this category of

00:25:22,640 --> 00:25:27,410
technology so if you believe in

00:25:25,429 --> 00:25:29,299
event-driven architectures if you're

00:25:27,410 --> 00:25:32,480
mildly interested and you want to you

00:25:29,299 --> 00:25:34,370
know move away from the batch world into

00:25:32,480 --> 00:25:36,350
an event-driven world you might think

00:25:34,370 --> 00:25:37,760
about well what are the different steps

00:25:36,350 --> 00:25:41,179
you know what do you have to actually do

00:25:37,760 --> 00:25:43,100
in order to make your business prevent

00:25:41,179 --> 00:25:44,929
tripping and I would have loved to say

00:25:43,100 --> 00:25:47,540
that this is you know one step process

00:25:44,929 --> 00:25:49,730
you just wake up the other the next day

00:25:47,540 --> 00:25:52,549
and everything is event-driven but the

00:25:49,730 --> 00:25:55,040
reality is it's actually you know a slow

00:25:52,549 --> 00:25:57,020
transformation process and there are

00:25:55,040 --> 00:25:58,850
multiple steps in the journey and in my

00:25:57,020 --> 00:26:00,710
experience this is what that journey

00:25:58,850 --> 00:26:02,929
roughly looks like right you start

00:26:00,710 --> 00:26:04,730
usually with some kind of awareness

00:26:02,929 --> 00:26:07,790
which hopefully is a conference like

00:26:04,730 --> 00:26:10,220
that or a blog post and then you try to

00:26:07,790 --> 00:26:13,130
you know build some applications mostly

00:26:10,220 --> 00:26:15,260
to play with it then you you know

00:26:13,130 --> 00:26:16,970
graduate to building a couple of

00:26:15,260 --> 00:26:19,910
mission-critical applications around it

00:26:16,970 --> 00:26:22,580
after that your business actually moves

00:26:19,910 --> 00:26:25,429
to a platform centric view of this

00:26:22,580 --> 00:26:27,110
technology where you probably have a

00:26:25,429 --> 00:26:29,990
central caf-co team that runs the

00:26:27,110 --> 00:26:30,530
software and lots of more application

00:26:29,990 --> 00:26:32,420
that star

00:26:30,530 --> 00:26:34,430
plugging into it at that point you're

00:26:32,420 --> 00:26:36,320
thinking about global scalability at

00:26:34,430 --> 00:26:38,990
that point you're thinking about and

00:26:36,320 --> 00:26:41,900
slowly moving to the central nervous

00:26:38,990 --> 00:26:44,420
system stage which is the ideal stage

00:26:41,900 --> 00:26:47,270
that you want to be in where data just

00:26:44,420 --> 00:26:50,030
ends up in this platform naturally and

00:26:47,270 --> 00:26:52,160
you have the ability to then queried it

00:26:50,030 --> 00:26:55,100
on the fly as well as joy in streams

00:26:52,160 --> 00:26:59,120
with tables and really build data-driven

00:26:55,100 --> 00:27:00,950
applications but it's a journey so you

00:26:59,120 --> 00:27:02,780
know where does the end state look like

00:27:00,950 --> 00:27:05,600
I said that the central nervous system

00:27:02,780 --> 00:27:08,720
stage is actually the most viable stage

00:27:05,600 --> 00:27:11,480
that people want to be in so I wanted to

00:27:08,720 --> 00:27:14,540
give a glimpse on what a business gets

00:27:11,480 --> 00:27:17,870
what do you get if you make it to that

00:27:14,540 --> 00:27:21,320
other end this is a pretty powerful

00:27:17,870 --> 00:27:23,900
state for a business to be in and the

00:27:21,320 --> 00:27:25,850
possibilities are immense this is the

00:27:23,900 --> 00:27:27,920
stage that RBC is in today this is the

00:27:25,850 --> 00:27:29,540
stage that you know Netflix and LinkedIn

00:27:27,920 --> 00:27:32,630
and a lot of other companies were in

00:27:29,540 --> 00:27:34,460
years ago and what happens in this stage

00:27:32,630 --> 00:27:35,930
is you know it's really powerful in the

00:27:34,460 --> 00:27:39,080
sense that everything happening in the

00:27:35,930 --> 00:27:41,570
business is most naturally an event it

00:27:39,080 --> 00:27:43,430
is available instantly to all the

00:27:41,570 --> 00:27:46,160
applications in the business so you're

00:27:43,430 --> 00:27:47,480
not worrying about how to duck tape and

00:27:46,160 --> 00:27:50,500
move data you're actually building

00:27:47,480 --> 00:27:54,080
applications you have the ability to

00:27:50,500 --> 00:27:56,570
query data as it arrives in addition to

00:27:54,080 --> 00:28:00,170
acquiring data in a batch fashion it's

00:27:56,570 --> 00:28:03,260
not one or the either and to me the most

00:28:00,170 --> 00:28:06,680
important benefit is that you know all

00:28:03,260 --> 00:28:09,380
this is available while also simplifying

00:28:06,680 --> 00:28:11,000
the data architecture by putting this

00:28:09,380 --> 00:28:13,220
central streaming platform at the heart

00:28:11,000 --> 00:28:15,350
of your data center if you compare this

00:28:13,220 --> 00:28:16,970
picture to the pre streaming world mass

00:28:15,350 --> 00:28:19,250
you will realize what I'm talking about

00:28:16,970 --> 00:28:21,440
and the simplicity actually gives you

00:28:19,250 --> 00:28:23,390
men's leverage over time right you stop

00:28:21,440 --> 00:28:24,920
worrying about the day to day my

00:28:23,390 --> 00:28:27,200
pipeline broke because some schema

00:28:24,920 --> 00:28:30,200
changed and I don't know where the data

00:28:27,200 --> 00:28:34,430
is because it is in all these different

00:28:30,200 --> 00:28:36,110
ETL tools so this is what we wanted to

00:28:34,430 --> 00:28:37,880
enable this was the vision we started

00:28:36,110 --> 00:28:39,560
with many years ago and this the mission

00:28:37,880 --> 00:28:41,300
of confluent is our belief is

00:28:39,560 --> 00:28:43,550
fundamentally you want to program around

00:28:41,300 --> 00:28:43,940
an open platform right and so that's

00:28:43,550 --> 00:28:45,740
what

00:28:43,940 --> 00:28:47,990
kontin platform is it's it's not just

00:28:45,740 --> 00:28:49,700
Kafka but it's Kafka plus clients in

00:28:47,990 --> 00:28:51,500
various different languages connectors

00:28:49,700 --> 00:28:52,879
to different systems the schema registry

00:28:51,500 --> 00:28:55,580
to manage all your schemas

00:28:52,879 --> 00:28:57,620
there is also an enterprise patient for

00:28:55,580 --> 00:29:00,200
those of you who want to operationalize

00:28:57,620 --> 00:29:02,600
that whole platform in a business but

00:29:00,200 --> 00:29:05,330
the journey usually starts by playing

00:29:02,600 --> 00:29:08,090
around with open source tools so that's

00:29:05,330 --> 00:29:10,789
the thesis I wanted to put forth here is

00:29:08,090 --> 00:29:12,919
this streaming platform category it's

00:29:10,789 --> 00:29:15,470
really going to be one of the most

00:29:12,919 --> 00:29:17,779
exciting new areas of technology of our

00:29:15,470 --> 00:29:19,759
time I hope that in this keynote you

00:29:17,779 --> 00:29:21,710
took a little bit away about what an

00:29:19,759 --> 00:29:23,809
event-driven architecture is you know

00:29:21,710 --> 00:29:25,610
what a streaming platform is and how

00:29:23,809 --> 00:29:26,600
your business might benefit from it

00:29:25,610 --> 00:29:31,140
thank you

00:29:26,600 --> 00:29:31,140

YouTube URL: https://www.youtube.com/watch?v=I-R_j9ZhJ2A


