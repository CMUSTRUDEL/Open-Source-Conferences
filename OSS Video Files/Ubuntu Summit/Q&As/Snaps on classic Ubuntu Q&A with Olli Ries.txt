Title: Snaps on classic Ubuntu Q&A with Olli Ries
Publication date: 2016-04-14
Playlist: Q&As
Description: 
	We've just announced that Snappy is coming to the Ubuntu 16.04 desktop, and we know that you have a lot of questions about it. So we're having a live Q&A on https://ubuntuonair.com to hear all of those questions and answer as many of them as we have time for.
Captions: 
	00:00:00,750 --> 00:00:07,240
hello everyone and welcome to a special

00:00:03,250 --> 00:00:09,190
a bun to on-air Q&A session we usually

00:00:07,240 --> 00:00:11,200
do these on Tuesday but we're making an

00:00:09,190 --> 00:00:13,599
exception today because we had a big

00:00:11,200 --> 00:00:15,759
announcement Tuesday after our regular

00:00:13,599 --> 00:00:18,609
QA and that was the introduced

00:00:15,759 --> 00:00:22,929
introduction of snappy on the classic

00:00:18,609 --> 00:00:24,669
ubuntu desktop in 1604 so we're going to

00:00:22,929 --> 00:00:27,729
be taking any questions you have on that

00:00:24,669 --> 00:00:29,439
today we're on ubuntu and Eircom if you

00:00:27,729 --> 00:00:30,999
are not on that page watching this you

00:00:29,439 --> 00:00:32,769
should go there because underneath the

00:00:30,999 --> 00:00:35,379
video there's an embedded chat window

00:00:32,769 --> 00:00:38,379
that leads you to our IRC channel which

00:00:35,379 --> 00:00:41,320
is hyphen ubuntu dash on dash air on

00:00:38,379 --> 00:00:43,269
freenode in that channel is where you're

00:00:41,320 --> 00:00:44,800
going to ask your questions to do that

00:00:43,269 --> 00:00:46,839
all you have to do is say the word

00:00:44,800 --> 00:00:49,149
question and all caps followed by your

00:00:46,839 --> 00:00:51,370
question doing that makes it turn bright

00:00:49,149 --> 00:00:53,230
yellow on my screen so that I don't miss

00:00:51,370 --> 00:00:54,550
it and we'll go through them the order

00:00:53,230 --> 00:00:56,649
they come and we'll try and get through

00:00:54,550 --> 00:00:58,300
as many as possible go ahead and start

00:00:56,649 --> 00:01:00,579
asking any time you think of something

00:00:58,300 --> 00:01:03,370
and we'll come back to it as we get

00:01:00,579 --> 00:01:06,790
through this session so with me today I

00:01:03,370 --> 00:01:10,200
have ollie I have Martin and I have

00:01:06,790 --> 00:01:10,200
David say hi guys

00:01:12,640 --> 00:01:16,810
Ollie has bullion getting all of this

00:01:14,200 --> 00:01:19,300
snappy stuff coming to the desktop and

00:01:16,810 --> 00:01:21,790
Martin is in chart the back end side of

00:01:19,300 --> 00:01:23,380
things on the snappy store so we should

00:01:21,790 --> 00:01:27,430
be able to answer any questions that you

00:01:23,380 --> 00:01:28,930
have on either of those things all right

00:01:27,430 --> 00:01:31,420
so start asking your questions anytime

00:01:28,930 --> 00:01:33,520
and to start us off Ali's going to give

00:01:31,420 --> 00:01:36,880
kind of a summary of what it is that

00:01:33,520 --> 00:01:41,080
we're actually introducing in 1604 yeah

00:01:36,880 --> 00:01:43,540
thanks Mike and hi everybody it's been

00:01:41,080 --> 00:01:45,970
you know an interesting project and

00:01:43,540 --> 00:01:53,140
really excited to see what questions

00:01:45,970 --> 00:01:54,490
they are thanks puppy so what we're

00:01:53,140 --> 00:01:56,500
doing there is actually not only

00:01:54,490 --> 00:01:58,479
bringing snappy to banta desktop but

00:01:56,500 --> 00:02:01,899
ubuntu right to classic Ubuntu which i

00:01:58,479 --> 00:02:05,380
think is super exactly snappy think of

00:02:01,899 --> 00:02:06,850
it as the evolution of our experiences

00:02:05,380 --> 00:02:09,009
that we gathered when doing the phone

00:02:06,850 --> 00:02:11,860
where we had to think about how to live

00:02:09,009 --> 00:02:13,930
or updates to devices as system images

00:02:11,860 --> 00:02:19,299
how to confine applications and so on so

00:02:13,930 --> 00:02:21,940
forth and snappies is you know the the

00:02:19,299 --> 00:02:25,440
sum of all that goodness in our learning

00:02:21,940 --> 00:02:27,820
that we're bringing to bundle and

00:02:25,440 --> 00:02:29,380
there's I think two incarnations of

00:02:27,820 --> 00:02:31,150
snappy if you were all right so there's

00:02:29,380 --> 00:02:34,329
there's snappy banter core that we've

00:02:31,150 --> 00:02:37,720
heard of for about a year now which is a

00:02:34,329 --> 00:02:40,900
full OS stack decides to to embrace and

00:02:37,720 --> 00:02:45,040
utilize snap in its entirety and then

00:02:40,900 --> 00:02:47,890
there is snappy on classic Ubuntu now we

00:02:45,040 --> 00:02:51,790
don't have that layout at the sign of

00:02:47,890 --> 00:02:54,250
the operating system but we're still

00:02:51,790 --> 00:02:57,160
able to provide snappy functionality

00:02:54,250 --> 00:02:59,170
snap functionality for our developers

00:02:57,160 --> 00:03:04,140
and users there so what does that mean

00:02:59,170 --> 00:03:07,269
specifically for you as a user we all

00:03:04,140 --> 00:03:09,700
are using you know banter LTS releases

00:03:07,269 --> 00:03:11,590
and you know that's being a long term

00:03:09,700 --> 00:03:14,980
support release they tend to get old

00:03:11,590 --> 00:03:18,850
after a while so if you're not on on the

00:03:14,980 --> 00:03:20,290
most current developer release you'll

00:03:18,850 --> 00:03:24,740
eventually probably run into a problem

00:03:20,290 --> 00:03:27,500
of being on 1404 right now or maybe 1604

00:03:24,740 --> 00:03:31,040
from now and still wanting that newest

00:03:27,500 --> 00:03:32,720
latest greatest software package but due

00:03:31,040 --> 00:03:35,060
to dependency problems and whatnot it's

00:03:32,720 --> 00:03:38,630
it's just not available anymore I mean

00:03:35,060 --> 00:03:40,370
so snappy on Ubuntu classic or classic

00:03:38,630 --> 00:03:42,500
Ubuntu is actually going to address that

00:03:40,370 --> 00:03:47,180
the way how you did it so far is you

00:03:42,500 --> 00:03:48,980
were other people maintaining lib'ry

00:03:47,180 --> 00:03:52,370
office and ever you know such

00:03:48,980 --> 00:03:59,330
applications in ppas that are targeting

00:03:52,370 --> 00:04:01,940
yeah and then LTS release but with that

00:03:59,330 --> 00:04:05,120
you had to install random set of ppas

00:04:01,940 --> 00:04:06,770
installing a PPA usually comes with you

00:04:05,120 --> 00:04:10,220
know the equivalent of giving full root

00:04:06,770 --> 00:04:13,220
access to your system just just how how

00:04:10,220 --> 00:04:15,650
apt works in that regard and now with

00:04:13,220 --> 00:04:19,299
snappy on classic you can actually

00:04:15,650 --> 00:04:22,340
replace that by accessing the same

00:04:19,299 --> 00:04:24,560
updated version of libris not from the

00:04:22,340 --> 00:04:26,570
PPA but from the Ubuntu Software store

00:04:24,560 --> 00:04:29,750
without having to give full access to

00:04:26,570 --> 00:04:31,370
your system libera office you know just

00:04:29,750 --> 00:04:33,730
using this as an example that's relevant

00:04:31,370 --> 00:04:37,880
to best abusers and it's a big big

00:04:33,730 --> 00:04:40,120
software package that libera office in

00:04:37,880 --> 00:04:43,040
that case is then running on your system

00:04:40,120 --> 00:04:44,960
move enhanced security specifically you

00:04:43,040 --> 00:04:48,740
know with some armor profiles that

00:04:44,960 --> 00:04:51,260
prevent and file system access on

00:04:48,740 --> 00:04:52,970
certain directories you know not so sure

00:04:51,260 --> 00:04:55,460
if if you loopy office for example needs

00:04:52,970 --> 00:04:58,550
to have access to ssh key so you to hear

00:04:55,460 --> 00:05:01,100
PGP keys and so i think this is where

00:04:58,550 --> 00:05:03,530
i'm excited about bringing snappy to

00:05:01,100 --> 00:05:06,470
ubuntu it's an additional channel to

00:05:03,530 --> 00:05:09,590
install software where you our users

00:05:06,470 --> 00:05:11,810
will benefit from having new updated and

00:05:09,590 --> 00:05:14,270
more recent software available to them

00:05:11,810 --> 00:05:18,410
without the hassle of maintaining those

00:05:14,270 --> 00:05:21,620
ppas so that's my you know five minutes

00:05:18,410 --> 00:05:26,720
sales pitch one snappy Martin what did I

00:05:21,620 --> 00:05:28,630
miss oh I think the questions people are

00:05:26,720 --> 00:05:31,720
asking are going to fill in all the gas

00:05:28,630 --> 00:05:34,210
I see people came prepared

00:05:31,720 --> 00:05:35,500
yep so we'll go ahead and we'll start

00:05:34,210 --> 00:05:36,880
getting to those go ahead and keep

00:05:35,500 --> 00:05:38,440
asking your questions we're going to

00:05:36,880 --> 00:05:40,570
take them in the order that they come in

00:05:38,440 --> 00:05:43,060
all right the first one is from D

00:05:40,570 --> 00:05:45,460
shimmer he asked does this rely entirely

00:05:43,060 --> 00:05:48,310
on a project's willingness to add snaps

00:05:45,460 --> 00:05:50,560
to their available delivery options so

00:05:48,310 --> 00:05:56,920
do the up streams have to provide the

00:05:50,560 --> 00:05:58,780
snaps no I mean anybody can write and

00:05:56,920 --> 00:06:01,600
the content of that step as long as you

00:05:58,780 --> 00:06:03,700
have the correct licensing and

00:06:01,600 --> 00:06:06,790
permissions to distribute that software

00:06:03,700 --> 00:06:08,500
anybody can can upload a snap I think

00:06:06,790 --> 00:06:09,700
it's it's always preferable if its

00:06:08,500 --> 00:06:12,400
upstream I think it's one of the

00:06:09,700 --> 00:06:16,000
interesting changes we get here right we

00:06:12,400 --> 00:06:17,890
often see tension between up streams and

00:06:16,000 --> 00:06:20,110
distros where upstream wants their

00:06:17,890 --> 00:06:22,300
latest software in the distro and the

00:06:20,110 --> 00:06:24,940
distro is just trying to provide a more

00:06:22,300 --> 00:06:28,060
stable environment for the users and

00:06:24,940 --> 00:06:29,800
there's there's lots of tension here the

00:06:28,060 --> 00:06:32,290
opportunity we have here is to let

00:06:29,800 --> 00:06:36,010
upstream take care of their users in

00:06:32,290 --> 00:06:37,810
every sense of the word so I think well

00:06:36,010 --> 00:06:42,690
well it'll probably be preferable for up

00:06:37,810 --> 00:06:46,210
streams to put their snaps anybody

00:06:42,690 --> 00:06:48,990
anybody can upload any software that

00:06:46,210 --> 00:06:48,990
they're allowed to

00:06:50,020 --> 00:06:54,699
alright and on that topic can you talk

00:06:52,660 --> 00:06:57,789
about how we're going to handle having

00:06:54,699 --> 00:07:05,020
maybe multiple packages of the same

00:06:57,789 --> 00:07:06,550
upstream yeah I mean they should be

00:07:05,020 --> 00:07:08,110
called different things like event will

00:07:06,550 --> 00:07:11,139
have oh we have a plan eventually to

00:07:08,110 --> 00:07:13,449
allow such to support proper Forks

00:07:11,139 --> 00:07:15,159
essentially of just to map that a little

00:07:13,449 --> 00:07:17,500
bit closer to what ends up ends up

00:07:15,159 --> 00:07:20,229
having an open source but for now I

00:07:17,500 --> 00:07:23,740
think you should be mindful right don't

00:07:20,229 --> 00:07:26,650
don't upload Apache the package name

00:07:23,740 --> 00:07:29,560
Apache if it belongs with that trademark

00:07:26,650 --> 00:07:32,409
balance or somebody else so if you have

00:07:29,560 --> 00:07:35,500
your own taken Apache have call it

00:07:32,409 --> 00:07:37,659
something else um otherwise you kind of

00:07:35,500 --> 00:07:39,550
risk the uploading of building a

00:07:37,659 --> 00:07:42,360
community and then having that taken

00:07:39,550 --> 00:07:42,360
away from you right

00:07:43,000 --> 00:07:46,870
alright the dish shimmer is asking again

00:07:45,340 --> 00:07:49,060
is there any indication whether any

00:07:46,870 --> 00:07:51,670
popular projects are investing or

00:07:49,060 --> 00:07:59,530
already plant investigating we're

00:07:51,670 --> 00:08:02,440
already planning on providing snaps well

00:07:59,530 --> 00:08:04,000
we already have a sizable developer

00:08:02,440 --> 00:08:11,170
community who have been doing this for

00:08:04,000 --> 00:08:15,100
devices right correct and so we're we're

00:08:11,170 --> 00:08:17,440
in discussions with the third party

00:08:15,100 --> 00:08:23,500
developers that you know are important

00:08:17,440 --> 00:08:25,960
to abantu and getting their software

00:08:23,500 --> 00:08:27,370
package and provided as a snap through

00:08:25,960 --> 00:08:30,340
the store and you know again that has a

00:08:27,370 --> 00:08:32,409
lot of benefits for them as they have

00:08:30,340 --> 00:08:36,130
direct you know they can upload directly

00:08:32,409 --> 00:08:37,870
to the store okay and the turnaround

00:08:36,130 --> 00:08:40,240
time to get an update out for example

00:08:37,870 --> 00:08:43,080
you know will be cut down quite a bit so

00:08:40,240 --> 00:08:43,080
the answer is yes

00:08:43,130 --> 00:08:48,380
so the one that springs immediately to

00:08:45,200 --> 00:08:50,000
mind for me is own cloud I've seen some

00:08:48,380 --> 00:08:53,180
of the young developers talking about

00:08:50,000 --> 00:08:55,880
snappy they were one of the primary use

00:08:53,180 --> 00:08:57,650
cases that we're going after was nappy

00:08:55,880 --> 00:08:59,570
because they actually asked us to take

00:08:57,650 --> 00:09:00,890
out old packages from the archives a

00:08:59,570 --> 00:09:03,410
little while ago because they weren't

00:09:00,890 --> 00:09:08,510
able to get them updated as quickly as

00:09:03,410 --> 00:09:11,920
they wanted to I don't think here we're

00:09:08,510 --> 00:09:14,300
here today to announce other people's

00:09:11,920 --> 00:09:15,830
announcements so I'm just throwing that

00:09:14,300 --> 00:09:20,060
out as an example that's been talked

00:09:15,830 --> 00:09:22,400
about already all right Aquarius is

00:09:20,060 --> 00:09:24,290
asking how do I serve updates for a snap

00:09:22,400 --> 00:09:26,320
package that I've provided and how does

00:09:24,290 --> 00:09:28,510
snapping know that there's an update

00:09:26,320 --> 00:09:34,880
Martin you said you could take that one

00:09:28,510 --> 00:09:40,670
yeah hey Stuart we miss you glad you're

00:09:34,880 --> 00:09:42,500
still hanging around so so here's the

00:09:40,670 --> 00:09:44,900
thing the interesting thing about snaps

00:09:42,500 --> 00:09:47,260
is that they are confined right in a in

00:09:44,900 --> 00:09:49,280
a way where we couldn't do with debs and

00:09:47,260 --> 00:09:51,500
in order to guarantee that that

00:09:49,280 --> 00:09:54,110
confinement is actually properly

00:09:51,500 --> 00:09:55,970
implemented we needed to we need to

00:09:54,110 --> 00:10:00,410
inspect that before serving it to users

00:09:55,970 --> 00:10:03,290
so the distribution mechanism is through

00:10:00,410 --> 00:10:05,710
our through our store because that gives

00:10:03,290 --> 00:10:07,970
our infrastructure an opportunity to

00:10:05,710 --> 00:10:10,400
enforce that something is properly

00:10:07,970 --> 00:10:11,960
confined you can you can absolutely

00:10:10,400 --> 00:10:17,270
build your own snap and distribute your

00:10:11,960 --> 00:10:19,130
own snap and but in that case it should

00:10:17,270 --> 00:10:21,350
be treated as an untrusted piece of

00:10:19,130 --> 00:10:25,400
software because you could have sidestep

00:10:21,350 --> 00:10:27,560
confinement in different ways so in

00:10:25,400 --> 00:10:29,810
general we don't think that's the best

00:10:27,560 --> 00:10:31,850
way to distribute software right I think

00:10:29,810 --> 00:10:33,230
if you have a relationship between you

00:10:31,850 --> 00:10:35,390
and your users and users are willing to

00:10:33,230 --> 00:10:37,370
fully trust you you want to do that

00:10:35,390 --> 00:10:38,840
that's that's totally fine there's

00:10:37,370 --> 00:10:41,690
there's nothing stopping you right it's

00:10:38,840 --> 00:10:42,920
just it's just not the the world we're

00:10:41,690 --> 00:10:45,260
trying to build right we're trying to

00:10:42,920 --> 00:10:47,200
make sure people can just look at random

00:10:45,260 --> 00:10:51,410
apps and install them and make sure that

00:10:47,200 --> 00:10:53,420
that confinement or respect it

00:10:51,410 --> 00:10:56,019
and I'm not sure why you would not want

00:10:53,420 --> 00:10:59,629
to use the store because it's such a

00:10:56,019 --> 00:11:01,459
nice experience as a developer you know

00:10:59,629 --> 00:11:06,370
you can push a package out within

00:11:01,459 --> 00:11:06,370
seconds really to to all of your users I

00:11:06,430 --> 00:11:11,629
think store just likes to mess with us

00:11:08,660 --> 00:11:15,649
oh I know Stuart just likes to mess with

00:11:11,629 --> 00:11:17,870
us nothing changes there all right broke

00:11:15,649 --> 00:11:24,860
me like asks what's the difference

00:11:17,870 --> 00:11:27,819
between snaps and clicks so snaps is

00:11:24,860 --> 00:11:30,079
everything we learn from building clicks

00:11:27,819 --> 00:11:31,250
so there are completely different

00:11:30,079 --> 00:11:32,899
technologies like they're completely

00:11:31,250 --> 00:11:36,439
right but with the same concept tonight

00:11:32,899 --> 00:11:39,769
right we the same ideas we went we we

00:11:36,439 --> 00:11:43,129
had wind building clicks are are there

00:11:39,769 --> 00:11:45,199
with snaps but as always the second

00:11:43,129 --> 00:11:48,889
implementation is is is better than the

00:11:45,199 --> 00:11:50,689
first one so so clicks there's there's

00:11:48,889 --> 00:11:52,069
some under like uninteresting

00:11:50,689 --> 00:11:57,319
underlining details that clicks are

00:11:52,069 --> 00:12:02,240
based on dpkg packages essentially on

00:11:57,319 --> 00:12:06,769
the depth formats whereas a snaps aren't

00:12:02,240 --> 00:12:08,810
snaps are essentially squash efest heart

00:12:06,769 --> 00:12:10,579
balls and squash surface is an

00:12:08,810 --> 00:12:12,560
interesting piece of technology because

00:12:10,579 --> 00:12:15,980
it it guarantees that that content is

00:12:12,560 --> 00:12:18,230
read-only right and so it's a very

00:12:15,980 --> 00:12:22,130
different approach of taking taking a

00:12:18,230 --> 00:12:25,009
package unpacking it on disk which is

00:12:22,130 --> 00:12:29,680
how we do dabs and clicks versus snaps

00:12:25,009 --> 00:12:32,839
where you take a blob and you mount it

00:12:29,680 --> 00:12:34,970
so you're not duplicating these content

00:12:32,839 --> 00:12:37,339
on disk but more importantly that

00:12:34,970 --> 00:12:42,589
there's some level of guarantee that

00:12:37,339 --> 00:12:44,360
that app won't be modified so I think

00:12:42,589 --> 00:12:47,019
that's a that that adds the security

00:12:44,360 --> 00:12:47,019
story quite a bit

00:12:47,290 --> 00:12:52,089
okay next is from Michael to Nell is

00:12:50,290 --> 00:12:54,579
asking what does the term frameworks

00:12:52,089 --> 00:13:00,269
refer to on this page any points to

00:12:54,579 --> 00:13:00,269
ubuntu com / cloud / snappy

00:13:03,989 --> 00:13:11,949
so frameworks did you want to take as

00:13:07,720 --> 00:13:17,259
much okay frameworks is a concept we

00:13:11,949 --> 00:13:19,959
used to extend snap you 12 core

00:13:17,259 --> 00:13:21,790
essentially snap you but ubuntu core if

00:13:19,959 --> 00:13:24,790
you've ever played a very little minimal

00:13:21,790 --> 00:13:28,449
OS right it gives you colonel a shell

00:13:24,790 --> 00:13:30,779
and like you irregular utilities but

00:13:28,449 --> 00:13:33,309
that's it right there's no applications

00:13:30,779 --> 00:13:36,249
or middleware installed and so

00:13:33,309 --> 00:13:39,220
frameworks was the one that you that's

00:13:36,249 --> 00:13:40,299
documented airs is is a concept if

00:13:39,220 --> 00:13:42,850
extending that in providing

00:13:40,299 --> 00:13:45,549
functionality middleware to such a

00:13:42,850 --> 00:13:48,910
system that might be used by by other

00:13:45,549 --> 00:13:50,829
applications that sit on top of it so

00:13:48,910 --> 00:13:55,419
that's what I'm frameworks is referring

00:13:50,829 --> 00:13:57,999
to but I think we're going to see quite

00:13:55,419 --> 00:14:01,419
a change in that concept with with

00:13:57,999 --> 00:14:05,499
snappy on 1604 I think our thoughts have

00:14:01,419 --> 00:14:09,819
evolved there in providing access to

00:14:05,499 --> 00:14:17,559
shared resources in a more mediated and

00:14:09,819 --> 00:14:20,649
secure way some kit is asking an easy

00:14:17,559 --> 00:14:22,449
one for you when I guess it means win is

00:14:20,649 --> 00:14:23,589
this going to be available and can those

00:14:22,449 --> 00:14:26,790
of us who don't mind breaking our

00:14:23,589 --> 00:14:31,540
systems get it early I can take that one

00:14:26,790 --> 00:14:33,639
so essentially if you're following the

00:14:31,540 --> 00:14:36,069
development release which will very very

00:14:33,639 --> 00:14:39,399
simply be our stable over 260 for

00:14:36,069 --> 00:14:44,230
release most of it has has landed or

00:14:39,399 --> 00:14:46,389
most of it is is already available do

00:14:44,230 --> 00:14:49,029
you know a cindy you have surely seen

00:14:46,389 --> 00:14:50,529
the announcement and you have also

00:14:49,029 --> 00:14:52,660
notice that there's no documentation for

00:14:50,529 --> 00:14:55,509
it yet the only reason for that is

00:14:52,660 --> 00:14:57,579
because we're we're putting together a

00:14:55,509 --> 00:14:59,889
set of example so that developers can

00:14:57,579 --> 00:15:02,230
start right away testing their apt and

00:14:59,889 --> 00:15:04,299
having a set of recipes on how to get

00:15:02,230 --> 00:15:06,129
started packaging their their

00:15:04,299 --> 00:15:08,319
applications we just want to make sure

00:15:06,129 --> 00:15:11,279
that this does these examples work

00:15:08,319 --> 00:15:15,149
perfectly and that they are solid that

00:15:11,279 --> 00:15:16,480
we said we set developers to good start

00:15:15,149 --> 00:15:18,550
for

00:15:16,480 --> 00:15:20,800
I'm essentially getting the first

00:15:18,550 --> 00:15:24,519
experience with loud snaps on the

00:15:20,800 --> 00:15:28,360
desktop so even if you don't mind

00:15:24,519 --> 00:15:31,420
breaking things I'd recommend you to

00:15:28,360 --> 00:15:32,829
wait for a couple of days until the

00:15:31,420 --> 00:15:34,600
recommendation has been I've been

00:15:32,829 --> 00:15:36,850
published essentially right now you can

00:15:34,600 --> 00:15:39,970
already test it there on your system

00:15:36,850 --> 00:15:41,260
we've got some example applications but

00:15:39,970 --> 00:15:43,959
we want to make sure how to say that

00:15:41,260 --> 00:15:46,139
we've got right documentation right from

00:15:43,959 --> 00:15:46,139
the start

00:15:49,149 --> 00:15:54,769
alright broke me lay guests is it

00:15:52,190 --> 00:16:00,310
possible to snap an android game even if

00:15:54,769 --> 00:16:06,110
you have to include the colonel so

00:16:00,310 --> 00:16:08,570
you're confined I think it would be a

00:16:06,110 --> 00:16:15,889
challenge to run a whole OS inside the

00:16:08,570 --> 00:16:19,070
snout um I don't want to say for sure

00:16:15,889 --> 00:16:21,680
you can't do that i would i would like

00:16:19,070 --> 00:16:25,639
to see somebody try and let us know how

00:16:21,680 --> 00:16:29,899
it what I don't think it'll be a an easy

00:16:25,639 --> 00:16:34,540
path yeah I mean it's hard just to run

00:16:29,899 --> 00:16:34,540
an Android app on a bun to in general

00:16:34,690 --> 00:16:42,980
but also I think if it's running on

00:16:38,899 --> 00:16:46,490
ubuntu today you know snappy is designed

00:16:42,980 --> 00:16:48,440
to to have those those applications also

00:16:46,490 --> 00:16:51,139
running within a snappy context that

00:16:48,440 --> 00:16:53,690
might be modifications needed arm to

00:16:51,139 --> 00:16:57,500
maybe deal with confinement or some

00:16:53,690 --> 00:16:59,959
other semantics of snappy but generally

00:16:57,500 --> 00:17:01,339
if it's running there today you know

00:16:59,959 --> 00:17:02,839
there shouldn't be as far as our

00:17:01,339 --> 00:17:07,250
thinking goes any reason why it wouldn't

00:17:02,839 --> 00:17:09,169
run in the context of snappy all right

00:17:07,250 --> 00:17:11,360
here's a good one from Stewart is there

00:17:09,169 --> 00:17:14,299
a certain runtime that my app is allowed

00:17:11,360 --> 00:17:15,620
to assume exists how can I find details

00:17:14,299 --> 00:17:17,959
of this and what are your policies

00:17:15,620 --> 00:17:20,000
around changing the runtime for example

00:17:17,959 --> 00:17:22,669
adding new things to it removing things

00:17:20,000 --> 00:17:28,370
from it versioning it deprecating its

00:17:22,669 --> 00:17:33,350
existing parts and so on so whatever we

00:17:28,370 --> 00:17:38,570
release with what's going to be called

00:17:33,350 --> 00:17:42,590
snappy 16 which will happen um little

00:17:38,570 --> 00:17:44,750
while we are for the for the life of

00:17:42,590 --> 00:17:46,760
that of that release which is going to

00:17:44,750 --> 00:17:49,730
be quite long we aren't going to break

00:17:46,760 --> 00:17:52,700
anything so there it's it's going to be

00:17:49,730 --> 00:17:55,400
a very minimal base which we will ensure

00:17:52,700 --> 00:17:56,870
that whatever app you writes on the day

00:17:55,400 --> 00:18:00,559
of that release it's going to continue

00:17:56,870 --> 00:18:01,970
working for however many years we

00:18:00,559 --> 00:18:04,220
support that release

00:18:01,970 --> 00:18:07,540
and so we're not going to be changing

00:18:04,220 --> 00:18:12,590
things under folks within within that

00:18:07,540 --> 00:18:16,700
and as for where you can find that list

00:18:12,590 --> 00:18:20,180
of those runtimes um that's a good

00:18:16,700 --> 00:18:22,940
documentation task for us to take on so

00:18:20,180 --> 00:18:25,850
you know it is going to be pretty

00:18:22,940 --> 00:18:28,220
bare-bones that's sort of the idea well

00:18:25,850 --> 00:18:30,800
the other main idea is snappy right why

00:18:28,220 --> 00:18:32,450
we did this is like we're not going to

00:18:30,800 --> 00:18:36,740
break you you know you can break

00:18:32,450 --> 00:18:38,420
yourself but this snaps being providing

00:18:36,740 --> 00:18:40,640
all their dependencies and everything

00:18:38,420 --> 00:18:45,590
that they need themselves you're in full

00:18:40,640 --> 00:18:48,650
control of your fate there so trying to

00:18:45,590 --> 00:18:51,950
get out of here there Michael tonnelle

00:18:48,650 --> 00:18:54,680
has a few questions in one he says does

00:18:51,950 --> 00:18:56,990
this does this mean that snaps are

00:18:54,680 --> 00:18:59,540
completely isolated what about apps that

00:18:56,990 --> 00:19:02,360
rely on stuff like X for keyboard import

00:18:59,540 --> 00:19:04,130
input does it also mean that snaps don't

00:19:02,360 --> 00:19:06,980
need to ask for passwords when they're

00:19:04,130 --> 00:19:08,540
when they are installed and our snaps

00:19:06,980 --> 00:19:11,360
only allowed to be installed from

00:19:08,540 --> 00:19:13,760
controlled sources so taking one at a

00:19:11,360 --> 00:19:19,040
time what does it mean that they're

00:19:13,760 --> 00:19:22,280
completely isolated I could find means

00:19:19,040 --> 00:19:25,790
that when they get installed and they in

00:19:22,280 --> 00:19:29,030
your app looks at the system it sees its

00:19:25,790 --> 00:19:32,360
own its own parallel universe of the

00:19:29,030 --> 00:19:34,490
system so when it's when it's looking as

00:19:32,360 --> 00:19:38,300
what what but install me we essentially

00:19:34,490 --> 00:19:42,980
give it a picture specifically painted

00:19:38,300 --> 00:19:46,250
for that app so it'll it'll it'll won't

00:19:42,980 --> 00:19:48,770
be able to write outside of its of its

00:19:46,250 --> 00:19:51,680
own space and whenever it reads it will

00:19:48,770 --> 00:19:55,460
only be reading something general to the

00:19:51,680 --> 00:19:57,500
system so apps can't can't mess with

00:19:55,460 --> 00:20:01,340
each other essentially right they can't

00:19:57,500 --> 00:20:05,420
write to the same paths they can't steal

00:20:01,340 --> 00:20:08,390
data from each other we have to go from

00:20:05,420 --> 00:20:10,310
where we are today the to the future

00:20:08,390 --> 00:20:11,750
where apps are properly confined from

00:20:10,310 --> 00:20:13,790
each other so I think there's this is

00:20:11,750 --> 00:20:15,770
going to be a transitional period where

00:20:13,790 --> 00:20:19,190
we won't we won't be drawing

00:20:15,770 --> 00:20:22,430
super hard lines where your app can't

00:20:19,190 --> 00:20:24,500
access X for example because if we have

00:20:22,430 --> 00:20:26,330
snaps on desktop and they can't access X

00:20:24,500 --> 00:20:32,030
it's not going to be a very interesting

00:20:26,330 --> 00:20:35,180
um right for everybody so what is going

00:20:32,030 --> 00:20:38,240
to change is apps will have to express

00:20:35,180 --> 00:20:40,340
beyond being complete confined what they

00:20:38,240 --> 00:20:42,980
would like and we're going to enforce

00:20:40,340 --> 00:20:46,400
that confinement right so a nap in order

00:20:42,980 --> 00:20:48,440
to access X they have to express in a

00:20:46,400 --> 00:20:54,020
feature we've called interfaces they

00:20:48,440 --> 00:20:56,900
want to access the X interface and and

00:20:54,020 --> 00:20:58,730
we get to tweak the policy on that so we

00:20:56,900 --> 00:21:01,310
might start off saying well you just

00:20:58,730 --> 00:21:04,280
have to say you want to access X and

00:21:01,310 --> 00:21:06,610
then you will give you access to it and

00:21:04,280 --> 00:21:09,020
then eventually you might ask users hey

00:21:06,610 --> 00:21:11,300
this app that you're trying to install

00:21:09,020 --> 00:21:12,740
once to access your your screen

00:21:11,300 --> 00:21:16,370
essentially would you would you like to

00:21:12,740 --> 00:21:20,860
allow that the actual feature we want is

00:21:16,370 --> 00:21:23,210
is using something like mere we're

00:21:20,860 --> 00:21:25,520
having access to the display server

00:21:23,210 --> 00:21:27,860
doesn't mean being able to mess with

00:21:25,520 --> 00:21:29,840
everything so that's that's the future

00:21:27,860 --> 00:21:37,310
where we will be actually to properly

00:21:29,840 --> 00:21:39,020
confine things so so so confine from

00:21:37,310 --> 00:21:41,690
each other means we have all the

00:21:39,020 --> 00:21:43,970
mechanisms to isolate apps from each

00:21:41,690 --> 00:21:46,940
other we'll just have to navigate from

00:21:43,970 --> 00:21:50,690
where we are today 2222 that future and

00:21:46,940 --> 00:21:52,670
I've in a smart way right and the second

00:21:50,690 --> 00:21:55,340
half of that was do you need a password

00:21:52,670 --> 00:21:57,380
to install snaps and can they only be

00:21:55,340 --> 00:22:01,640
installed from a controlled source like

00:21:57,380 --> 00:22:09,490
the snappy store by default yes I mean

00:22:01,640 --> 00:22:12,410
they'll be the the the gnome software

00:22:09,490 --> 00:22:16,790
will will be looking at just at the

00:22:12,410 --> 00:22:18,580
point to store but yet that I think it's

00:22:16,790 --> 00:22:21,440
a bit of a change of mindset writes the

00:22:18,580 --> 00:22:26,799
the current of went to store the snap

00:22:21,440 --> 00:22:29,539
store is is ppas plus plus

00:22:26,799 --> 00:22:33,410
Plus kind of the archive all mix mix

00:22:29,539 --> 00:22:34,789
together right so it's controlled source

00:22:33,410 --> 00:22:37,250
in the sense that snaps have gone

00:22:34,789 --> 00:22:40,340
through some enforcement of confinement

00:22:37,250 --> 00:22:42,980
before they reach users desktops but not

00:22:40,340 --> 00:22:48,500
necessarily having gone through archive

00:22:42,980 --> 00:22:51,289
admits and things like that um does that

00:22:48,500 --> 00:22:54,080
answer the question I think so yeah if

00:22:51,289 --> 00:22:56,289
we didn't answer your question all the

00:22:54,080 --> 00:22:58,250
way Michael just go ahead and reacts

00:22:56,289 --> 00:23:00,830
working one thing I think I know power

00:22:58,250 --> 00:23:03,380
that is simply that I mean as Martin was

00:23:00,830 --> 00:23:05,870
saying for users and there will be

00:23:03,380 --> 00:23:07,340
client where they will be able to

00:23:05,870 --> 00:23:09,350
install their software and the

00:23:07,340 --> 00:23:10,460
experience will be exactly same as if

00:23:09,350 --> 00:23:13,280
you are installing enough from the

00:23:10,460 --> 00:23:16,159
archive or from from the store when and

00:23:13,280 --> 00:23:19,159
in that sense yes the apps chrome former

00:23:16,159 --> 00:23:22,039
control source as a developer though or

00:23:19,159 --> 00:23:25,220
doing other power user you can choose to

00:23:22,039 --> 00:23:28,990
sideload apps for testing purposes where

00:23:25,220 --> 00:23:32,030
our value install a local got snap-on

00:23:28,990 --> 00:23:33,710
package essentially and yet again your

00:23:32,030 --> 00:23:37,659
system in the same way that you can do

00:23:33,710 --> 00:23:37,659
on your phone today were entitled clicks

00:23:38,200 --> 00:23:42,220
alright the next one's kind of a fun one

00:23:40,450 --> 00:23:44,200
i'm not sure if any of us are going to

00:23:42,220 --> 00:23:46,960
know the answer to it though broke me

00:23:44,200 --> 00:23:49,240
like gas does snappy work on ubuntu or

00:23:46,960 --> 00:23:52,000
on windows 10 i'm assuming he means the

00:23:49,240 --> 00:23:57,790
ubuntu on windows feature that's just

00:23:52,000 --> 00:24:01,360
been released sure it will i think

00:23:57,790 --> 00:24:04,770
there's still some i think the windows

00:24:01,360 --> 00:24:08,470
preview is 1404 not 1604 but i

00:24:04,770 --> 00:24:12,370
understand it'll likely moved to 1604

00:24:08,470 --> 00:24:15,340
what does it'll look it's nice so snappy

00:24:12,370 --> 00:24:23,170
on a bun to on windows that might just

00:24:15,340 --> 00:24:25,060
bend it all right mighty kk says is it

00:24:23,170 --> 00:24:34,020
possible to create a snap of a windows

00:24:25,060 --> 00:24:36,340
application running in wine let us know

00:24:34,020 --> 00:24:40,200
there's there's nothing we've built that

00:24:36,340 --> 00:24:43,320
would stop you from it again it's a

00:24:40,200 --> 00:24:46,150
because of the confinement policy it's

00:24:43,320 --> 00:24:49,630
always interesting just to realize how

00:24:46,150 --> 00:24:52,210
things do are used to just parting all

00:24:49,630 --> 00:24:57,190
over your system and once you can find

00:24:52,210 --> 00:25:00,400
them you sort of realize how how easier

00:24:57,190 --> 00:25:06,310
harder some of these things are it'll

00:25:00,400 --> 00:25:08,770
it'll get easier i'm sure the right way

00:25:06,310 --> 00:25:12,460
to do it is to not spread fazal all over

00:25:08,770 --> 00:25:15,400
the file system so i think lots of apps

00:25:12,460 --> 00:25:16,540
will will do that properly but it's hard

00:25:15,400 --> 00:25:18,040
to predict once you have things like

00:25:16,540 --> 00:25:21,370
wine and things that layer on top of

00:25:18,040 --> 00:25:25,090
each other whether they'll be able to be

00:25:21,370 --> 00:25:27,850
confined properly so what one thing that

00:25:25,090 --> 00:25:29,800
I think is particularly important and

00:25:27,850 --> 00:25:31,570
exciting about this announcement ability

00:25:29,800 --> 00:25:33,670
of bringing snappy to classic it's like

00:25:31,570 --> 00:25:36,460
Martin I think it was the second time as

00:25:33,670 --> 00:25:40,600
I said let us know right we haven't you

00:25:36,460 --> 00:25:42,670
know really gone in and looked at all

00:25:40,600 --> 00:25:45,550
the apps that are there's a gazillion of

00:25:42,670 --> 00:25:48,340
apps in the store right and just just

00:25:45,550 --> 00:25:51,370
we're in early phase of the project but

00:25:48,340 --> 00:25:52,000
I'm by bringing snappy to classic Ubuntu

00:25:51,370 --> 00:25:55,890
we're enable

00:25:52,000 --> 00:25:59,350
you as a developer to actually you know

00:25:55,890 --> 00:26:01,750
start using it we're providing you tools

00:25:59,350 --> 00:26:04,330
and documentation so that we can have

00:26:01,750 --> 00:26:05,830
that feedback from you obviously there's

00:26:04,330 --> 00:26:07,330
things you know that we think will work

00:26:05,830 --> 00:26:09,190
and you'll find out that don't quite

00:26:07,330 --> 00:26:10,870
work as good as we think they do and

00:26:09,190 --> 00:26:13,360
there will be future gaps and you know

00:26:10,870 --> 00:26:15,370
I'm getting your feedback in early will

00:26:13,360 --> 00:26:19,270
help us tremendously in moving that

00:26:15,370 --> 00:26:21,780
whole system forward so um you know help

00:26:19,270 --> 00:26:25,960
us there be part of the snappy community

00:26:21,780 --> 00:26:28,360
join snappy hash snappy i think on

00:26:25,960 --> 00:26:33,220
freenode this not be mailing lists just

00:26:28,360 --> 00:26:35,710
give us that food thing all right

00:26:33,220 --> 00:26:38,110
Michael tonnelle is asking will multiple

00:26:35,710 --> 00:26:41,170
developers like a team be able to work

00:26:38,110 --> 00:26:45,090
on the same snap and I gather this means

00:26:41,170 --> 00:26:45,090
maybe more on the store side of things

00:26:45,780 --> 00:26:52,720
yeah so um so we are building many

00:26:50,800 --> 00:26:56,680
things at the same time one of those

00:26:52,720 --> 00:26:58,360
features is to be able to and then where

00:26:56,680 --> 00:27:01,120
I think we'll have this out pretty soon

00:26:58,360 --> 00:27:03,400
where you basically shower access to

00:27:01,120 --> 00:27:09,190
upload access to that snap to other

00:27:03,400 --> 00:27:11,620
developers and and and just you know

00:27:09,190 --> 00:27:14,040
somebody will own it and they'll just

00:27:11,620 --> 00:27:16,770
provide access to others to upload it

00:27:14,040 --> 00:27:20,230
that's that's certainly something we

00:27:16,770 --> 00:27:25,480
would like to enable as quickly as we

00:27:20,230 --> 00:27:28,240
can all right the next question from

00:27:25,480 --> 00:27:31,570
MacPhail was about running these on air

00:27:28,240 --> 00:27:34,060
at previous question and so we're gonna

00:27:31,570 --> 00:27:35,890
skip that McPhail if you want to re ask

00:27:34,060 --> 00:27:39,490
that for something more specific that

00:27:35,890 --> 00:27:42,070
didn't get answered feel free sten pet

00:27:39,490 --> 00:27:44,320
ass i'm running snappy core on a

00:27:42,070 --> 00:27:47,980
raspberry pi 2 and currently there is no

00:27:44,320 --> 00:27:49,900
X or mere support well will there be or

00:27:47,980 --> 00:27:56,110
is there some support of desktop

00:27:49,900 --> 00:27:57,790
environments on snappy core um it's a

00:27:56,110 --> 00:28:02,590
good question that we're actually like

00:27:57,790 --> 00:28:05,799
discussing right now if the team so

00:28:02,590 --> 00:28:09,940
there will be mere on ubuntu

00:28:05,799 --> 00:28:13,389
snap you bunch of core by and by when we

00:28:09,940 --> 00:28:16,629
release snappy serious 16 there will be

00:28:13,389 --> 00:28:20,110
more support for that bringing the whole

00:28:16,629 --> 00:28:21,580
desktop shell over on top of snap you

00:28:20,110 --> 00:28:23,619
bunch of core is probably not going to

00:28:21,580 --> 00:28:26,739
happen that's that's as architectural

00:28:23,619 --> 00:28:28,899
levels because the we want to keep

00:28:26,739 --> 00:28:32,009
snappy banter core you know thin and

00:28:28,899 --> 00:28:35,289
lean and just have a minimal OS there

00:28:32,009 --> 00:28:37,450
but a desktop environment requires just

00:28:35,289 --> 00:28:41,259
so much more things and so we're

00:28:37,450 --> 00:28:44,710
currently thinking of ways how to bring

00:28:41,259 --> 00:28:49,649
a unity age experience in a fully

00:28:44,710 --> 00:28:54,460
architect like a p.o.s and so I think

00:28:49,649 --> 00:28:56,679
starting this cycle so in a week from

00:28:54,460 --> 00:28:59,230
now you'll probably see us will think

00:28:56,679 --> 00:29:00,850
out more and more public ways of how we

00:28:59,230 --> 00:29:02,649
could do this and you know how we would

00:29:00,850 --> 00:29:05,559
approach that but to the core of your

00:29:02,649 --> 00:29:07,989
question there's no graphics right now

00:29:05,559 --> 00:29:12,609
on pie or the dragon board and there

00:29:07,989 --> 00:29:14,470
will be soon from you all right and kind

00:29:12,609 --> 00:29:17,080
of on the other side of that from

00:29:14,470 --> 00:29:19,149
Brooklyn or Berkeley like will the

00:29:17,080 --> 00:29:36,399
phones win will the phones be snapped

00:29:19,149 --> 00:29:38,440
and that's their nice to me thank you so

00:29:36,399 --> 00:29:41,679
this requires us to solve what I just

00:29:38,440 --> 00:29:45,309
described right now on it's a finger

00:29:41,679 --> 00:29:48,129
very they need to spend you know quite

00:29:45,309 --> 00:29:51,489
some cycles in understanding what's the

00:29:48,129 --> 00:29:54,909
minimal set for what we call a bunch of

00:29:51,489 --> 00:29:56,919
personal in terms of an OS image that is

00:29:54,909 --> 00:29:59,499
you know as small as possible as soon as

00:29:56,919 --> 00:30:00,999
possible but at the same token it

00:29:59,499 --> 00:30:02,859
provides all the functionality that we

00:30:00,999 --> 00:30:05,559
would need for a phone or anything with

00:30:02,859 --> 00:30:09,129
you n t8 on top of it so I think you

00:30:05,559 --> 00:30:11,980
know we'll start the work on this cycle

00:30:09,129 --> 00:30:16,960
and then we'll see how planned straight

00:30:11,980 --> 00:30:18,279
out all right Stuart so next the next

00:30:16,960 --> 00:30:19,120
question might just one thing that I

00:30:18,279 --> 00:30:21,200
wanted to

00:30:19,120 --> 00:30:25,100
you might have noticed it sometimes

00:30:21,200 --> 00:30:26,690
Ollie or I are occurring this is as you

00:30:25,100 --> 00:30:30,770
say in versity just right next to each

00:30:26,690 --> 00:30:33,830
other this week we're at the u.s.

00:30:30,770 --> 00:30:36,950
managers springboard becoming quite a

00:30:33,830 --> 00:30:38,929
lot of the other all feature and of the

00:30:36,950 --> 00:30:42,980
architectural changes or evolution that

00:30:38,929 --> 00:30:45,230
the Foley's talking about and you'll see

00:30:42,980 --> 00:30:48,799
more and more of these planning as we go

00:30:45,230 --> 00:30:52,120
to must be really 1604 right now we're

00:30:48,799 --> 00:30:54,980
also sprinting to really 60 for itself

00:30:52,120 --> 00:30:57,260
but yeah what I'm trying to say is

00:30:54,980 --> 00:30:58,850
expected to see more and more of what's

00:30:57,260 --> 00:31:03,049
going to happen in the next he can

00:30:58,850 --> 00:31:05,030
excite also very soon all right

00:31:03,049 --> 00:31:06,919
Stewart's following up on his earlier

00:31:05,030 --> 00:31:09,140
question he says are you suggesting that

00:31:06,919 --> 00:31:10,669
if I snap anything I didn't myself

00:31:09,140 --> 00:31:13,100
developed that I have to invent a new

00:31:10,669 --> 00:31:15,110
name for it and not named it after the

00:31:13,100 --> 00:31:17,510
project for example if he makes a snap

00:31:15,110 --> 00:31:20,990
of ffmpeg he should call it Stuart's

00:31:17,510 --> 00:31:26,120
ffmpeg are you planning on namespacing

00:31:20,990 --> 00:31:29,809
by uploader or something similar so as I

00:31:26,120 --> 00:31:31,070
said supporting Forks is in there in in

00:31:29,809 --> 00:31:34,669
our roadmap a little bit down the line

00:31:31,070 --> 00:31:37,549
but not just yet so eventually you will

00:31:34,669 --> 00:31:40,040
probably be able to upload ffmpeg dot

00:31:37,549 --> 00:31:43,970
Aquarius and that'll be your take on

00:31:40,040 --> 00:31:46,580
ffmpeg but if ffmpeg up upstream wants

00:31:43,970 --> 00:31:50,059
to start uplink snaps they they get to

00:31:46,580 --> 00:31:53,900
do ffmpeg the guidance i can give you on

00:31:50,059 --> 00:31:59,390
on picking a name is just pick a name

00:31:53,900 --> 00:32:00,950
that you that you'll be able to build a

00:31:59,390 --> 00:32:04,100
community around right if you're

00:32:00,950 --> 00:32:07,280
building a name that somebody else owns

00:32:04,100 --> 00:32:10,970
then that's just that a ticking time

00:32:07,280 --> 00:32:13,210
bomb right um i think if you if you want

00:32:10,970 --> 00:32:16,370
to help but upstream so if you wanted to

00:32:13,210 --> 00:32:19,429
package up FM ffmpeg put it out there

00:32:16,370 --> 00:32:23,080
and then when ffmpeg upstream wow that's

00:32:19,429 --> 00:32:26,150
a bad example to pick to say 10 times

00:32:23,080 --> 00:32:29,690
when they come in and want to actually

00:32:26,150 --> 00:32:32,029
take over it if you're happy to hand it

00:32:29,690 --> 00:32:34,279
over to upstream once they're interested

00:32:32,029 --> 00:32:37,039
and I think that's okay like if you go

00:32:34,279 --> 00:32:39,469
into it just trying to help upstream

00:32:37,039 --> 00:32:41,659
package it up show that there's some

00:32:39,469 --> 00:32:43,849
interest that's that's absolutely fine

00:32:41,659 --> 00:32:45,379
you just have to be willing to two then

00:32:43,849 --> 00:32:50,299
hand that over to the to the actual

00:32:45,379 --> 00:32:51,919
owners so just be conscious that you

00:32:50,299 --> 00:32:53,690
don't want to you want you don't want to

00:32:51,919 --> 00:32:57,729
build a community around a name that you

00:32:53,690 --> 00:33:00,259
don't really have the rights to use and

00:32:57,729 --> 00:33:02,659
and if you do just just be conscious

00:33:00,259 --> 00:33:08,919
that you you should do it in a way we're

00:33:02,659 --> 00:33:10,909
just helping somebody else out all right

00:33:08,919 --> 00:33:12,769
I'm going to skip some of the more

00:33:10,909 --> 00:33:15,289
technical questions we can come back to

00:33:12,769 --> 00:33:17,599
them if we get through all of them in

00:33:15,289 --> 00:33:18,979
time but we're gonna try and keep this a

00:33:17,599 --> 00:33:20,869
little bit higher level so if you have

00:33:18,979 --> 00:33:23,899
technical questions like MacPhail has

00:33:20,869 --> 00:33:27,559
about the the snappy runtime where it

00:33:23,899 --> 00:33:29,899
runs from go to hash snappy on freenode

00:33:27,559 --> 00:33:32,210
and ask it there that's the best place

00:33:29,899 --> 00:33:38,419
to go for technical support questions

00:33:32,210 --> 00:33:40,759
like that so moving on to oh word yes is

00:33:38,419 --> 00:33:45,619
there an ETA for diff based updates

00:33:40,759 --> 00:33:50,960
between two snap versions now we have

00:33:45,619 --> 00:33:53,690
plans we know how we'll do it it's just

00:33:50,960 --> 00:33:56,089
work which we have to get to and we we

00:33:53,690 --> 00:33:57,830
will pretty soon we want to make this a

00:33:56,089 --> 00:34:01,669
good a good experience for everybody so

00:33:57,830 --> 00:34:04,489
fast downloads is a is a is a big part

00:34:01,669 --> 00:34:08,149
of that so we'll definitely will

00:34:04,489 --> 00:34:10,960
definitely get to it I think in the in

00:34:08,149 --> 00:34:10,960
the midterm

00:34:11,040 --> 00:34:17,490
ok DS shimmer is asking once I upgrade

00:34:14,130 --> 00:34:20,100
to 1604 what will it take to switch a

00:34:17,490 --> 00:34:22,200
particular package to a snappy version

00:34:20,100 --> 00:34:28,200
and will the original still exists on

00:34:22,200 --> 00:34:32,250
the system yeah I mean switching will

00:34:28,200 --> 00:34:34,860
require just installing the snap and the

00:34:32,250 --> 00:34:39,510
original version the original the Deb

00:34:34,860 --> 00:34:42,120
will stay on the system but this snaps

00:34:39,510 --> 00:34:44,880
because it's invasive an edit in

00:34:42,120 --> 00:34:46,919
addition to 12 when you what if you run

00:34:44,880 --> 00:34:48,390
if you stall Apache and you already had

00:34:46,919 --> 00:34:50,429
a patch installed and install the patch

00:34:48,390 --> 00:34:52,740
oh snap when you're and apache on the

00:34:50,429 --> 00:34:54,120
system it'll on the path when your

00:34:52,740 --> 00:34:57,960
system path it will essentially run the

00:34:54,120 --> 00:35:02,340
snap above before it runs the dead right

00:34:57,960 --> 00:35:04,650
so you can keep both around and once you

00:35:02,340 --> 00:35:06,900
stall stab that the default path will go

00:35:04,650 --> 00:35:10,200
to to the snap so it should be just the

00:35:06,900 --> 00:35:12,660
matter of snapping snap install apache

00:35:10,200 --> 00:35:14,930
and and that's it you're off using that

00:35:12,660 --> 00:35:14,930
stuff

00:35:17,750 --> 00:35:19,810
you

00:35:20,620 --> 00:35:24,200
you

00:35:22,140 --> 00:35:24,200
you

00:35:26,050 --> 00:35:34,510
I think you're muted mike is the sound

00:35:30,070 --> 00:35:36,850
doesn't come yeah sorry ng aio is asking

00:35:34,510 --> 00:35:39,400
should a Python binding to something

00:35:36,850 --> 00:35:42,220
like lib G photo to include what it is

00:35:39,400 --> 00:35:44,800
binding in the snap package so if you've

00:35:42,220 --> 00:35:46,990
got a Python binding to a compiled

00:35:44,800 --> 00:35:50,430
library should you include the compiled

00:35:46,990 --> 00:35:50,430
library also in your snap

00:35:54,420 --> 00:36:01,049
I was waiting for my inner aletta

00:35:59,609 --> 00:36:04,829
pick it up but the sensitive the short

00:36:01,049 --> 00:36:07,380
answer is yes snap packages contain all

00:36:04,829 --> 00:36:12,020
of the bundle dependencies in the same

00:36:07,380 --> 00:36:12,020
way as squid packages to on the phone

00:36:13,010 --> 00:36:19,260
Stewart still has questions about the

00:36:16,099 --> 00:36:22,470
runtime policy so if you make a change

00:36:19,260 --> 00:36:25,200
to the runtime say going from 10 to 1

00:36:22,470 --> 00:36:29,150
dot one will you guarantee that apps

00:36:25,200 --> 00:36:29,150
that targeted 1 dot 0 will keep working

00:36:33,599 --> 00:36:40,990
Martin or Ollie can you answer that

00:36:36,780 --> 00:36:44,980
question reading the question hmm not

00:36:40,990 --> 00:36:47,500
sure what would I refer to as runtime in

00:36:44,980 --> 00:36:52,710
in a world where the snap is providing

00:36:47,500 --> 00:36:55,150
its runtime by itself um I think he's

00:36:52,710 --> 00:36:58,329
thinking like four for the phone we

00:36:55,150 --> 00:37:01,660
offer a set of libraries that the apps

00:36:58,329 --> 00:37:04,630
can use that they don't ship in the clip

00:37:01,660 --> 00:37:07,960
package itself is there an equivalent of

00:37:04,630 --> 00:37:10,750
snappy world no so for core we strip it

00:37:07,960 --> 00:37:12,190
down to the absolute bare bones right so

00:37:10,750 --> 00:37:15,849
they're what they're obviously is things

00:37:12,190 --> 00:37:18,040
like G lib that we will provide and

00:37:15,849 --> 00:37:20,430
we'll have to document those but again

00:37:18,040 --> 00:37:22,480
we won't break you right whatever

00:37:20,430 --> 00:37:26,740
whatever is on the image on the day of

00:37:22,480 --> 00:37:28,329
the release of snappy 16 you can build a

00:37:26,740 --> 00:37:33,400
stand for that you know work for the

00:37:28,329 --> 00:37:35,500
lifetime of that release so it's the

00:37:33,400 --> 00:37:37,390
phone has a has a pretty big layer I to

00:37:35,500 --> 00:37:39,369
make things easier for you right so

00:37:37,390 --> 00:37:43,420
there's an SDK there's all all sorts of

00:37:39,369 --> 00:37:45,520
things point of course is is the very

00:37:43,420 --> 00:37:47,950
very bare-bones so we expect that the

00:37:45,520 --> 00:37:51,069
phone will will eventually run 2.2 core

00:37:47,950 --> 00:37:53,650
plus a stack on top which will be the

00:37:51,069 --> 00:37:56,200
SDK and and folks will build on top of

00:37:53,650 --> 00:37:58,750
that stack to make things easier but in

00:37:56,200 --> 00:38:01,060
the winter courts very very bare-bones

00:37:58,750 --> 00:38:07,150
will will document what's there and and

00:38:01,060 --> 00:38:14,530
will um will guarantee we won't break or

00:38:07,150 --> 00:38:17,380
at least not on purpose ok d shimmer s

00:38:14,530 --> 00:38:19,720
can other distributions run an

00:38:17,380 --> 00:38:21,520
implementation of the snap concept if

00:38:19,720 --> 00:38:23,980
they did is there a scenario that

00:38:21,520 --> 00:38:28,270
multiple distros could run the exact

00:38:23,980 --> 00:38:29,560
same snap package for sure so the

00:38:28,270 --> 00:38:33,280
interesting thing of bundling all the

00:38:29,560 --> 00:38:36,819
dependencies is that that the deltas

00:38:33,280 --> 00:38:40,300
between distresses becomes almost almost

00:38:36,819 --> 00:38:42,550
zero right and the way the way this

00:38:40,300 --> 00:38:46,150
we've been calling it a snappy dimension

00:38:42,550 --> 00:38:48,730
within we're going to it

00:38:46,150 --> 00:38:50,740
brings in it brings in the whole core

00:38:48,730 --> 00:38:54,640
blob into the system so it has other

00:38:50,740 --> 00:38:57,099
libraries it has everything so you only

00:38:54,640 --> 00:39:00,059
need a really really small set of things

00:38:57,099 --> 00:39:03,099
to have actual snaps actually work so I

00:39:00,059 --> 00:39:06,430
i would guess that if somebody wanted to

00:39:03,099 --> 00:39:08,529
bun snaps in fedora and by snaps i mean

00:39:06,430 --> 00:39:11,890
the exact same snaps on boon to and

00:39:08,529 --> 00:39:15,029
fedora that exact same binary they could

00:39:11,890 --> 00:39:18,700
they could package snappity snap t and

00:39:15,029 --> 00:39:22,020
and then snap install would put install

00:39:18,700 --> 00:39:27,010
it on on on federal system with without

00:39:22,020 --> 00:39:31,299
any any differences or hassle or on

00:39:27,010 --> 00:39:35,890
Windows 10 or imma does that so it's a

00:39:31,299 --> 00:39:38,260
brave new world all right dev more to is

00:39:35,890 --> 00:39:40,750
asking how will snappy and snaps work

00:39:38,260 --> 00:39:42,220
with different users on the system well

00:39:40,750 --> 00:39:47,170
the same snap have to be installed

00:39:42,220 --> 00:39:51,609
repeatedly for example I didn't quite

00:39:47,170 --> 00:39:53,289
get that so basically will if you have

00:39:51,609 --> 00:39:55,630
multiple users on the system will you

00:39:53,289 --> 00:39:57,880
have to install the snap once for each

00:39:55,630 --> 00:40:01,329
user or just one time and they all get

00:39:57,880 --> 00:40:04,359
to use it one time and they all get to

00:40:01,329 --> 00:40:07,109
use it but each user has their own

00:40:04,359 --> 00:40:07,109
writable space

00:40:09,630 --> 00:40:15,509
all right Michael tonnelle is asking LTS

00:40:13,200 --> 00:40:17,670
versus non LTS how will the current

00:40:15,509 --> 00:40:21,480
six-month release cycle be affected by

00:40:17,670 --> 00:40:23,970
snappy if snappy is on 1604 LTS than the

00:40:21,480 --> 00:40:26,700
biggest reason for users to jump is gone

00:40:23,970 --> 00:40:29,670
I assume he means jump to the non LTS

00:40:26,700 --> 00:40:31,259
releases amoo bun to write so I think

00:40:29,670 --> 00:40:36,380
that's sort of Stewart's question as

00:40:31,259 --> 00:40:40,609
well that he's been trying to react so

00:40:36,380 --> 00:40:43,529
so yeah I mean mmm 1610 will ship with

00:40:40,609 --> 00:40:46,380
with a snappy dimension and the same

00:40:43,529 --> 00:40:50,059
snaps that were next thursday will work

00:40:46,380 --> 00:40:52,109
on 1610 without any changes because

00:40:50,059 --> 00:40:53,910
those snaps will bundle their

00:40:52,109 --> 00:40:56,880
dependencies which is what usually

00:40:53,910 --> 00:40:59,430
breaks apps between releases and they'll

00:40:56,880 --> 00:41:01,920
be running on this on on top of the on

00:40:59,430 --> 00:41:06,829
snappy core which is being pulled in

00:41:01,920 --> 00:41:10,319
separately so nothing will actually

00:41:06,829 --> 00:41:11,970
break between release between point to

00:41:10,319 --> 00:41:14,250
point releases because they'll be

00:41:11,970 --> 00:41:15,930
embedding this variable unstable

00:41:14,250 --> 00:41:17,190
environment and you'll be bundling all

00:41:15,930 --> 00:41:23,269
your dependencies with it and moving

00:41:17,190 --> 00:41:25,500
forward as as it's convenient for you I

00:41:23,269 --> 00:41:30,059
think that's really what Stewart's

00:41:25,500 --> 00:41:31,980
question as well all right whether it's

00:41:30,059 --> 00:41:36,240
worth it or not moving between would two

00:41:31,980 --> 00:41:37,289
releases I mean I don't know the dead

00:41:36,240 --> 00:41:39,150
really is up to there's other

00:41:37,289 --> 00:41:42,329
interesting things in a release right

00:41:39,150 --> 00:41:46,259
like unity and those there's there's

00:41:42,329 --> 00:41:48,299
other I think you will I think you won't

00:41:46,259 --> 00:41:50,460
be moving releases between releases just

00:41:48,299 --> 00:41:51,869
to get the latest version of apps and i

00:41:50,460 --> 00:41:53,579
think that's that's actually the right

00:41:51,869 --> 00:41:56,759
thing i think people don't really want

00:41:53,579 --> 00:41:57,660
to will be choices just to get updated

00:41:56,759 --> 00:42:00,750
apps but i think there'll be other

00:41:57,660 --> 00:42:05,009
reasons to move between between releases

00:42:00,750 --> 00:42:08,549
them that might be appealing all right

00:42:05,009 --> 00:42:11,009
Stewart is asking what reserved means in

00:42:08,549 --> 00:42:14,309
an interface definition and then he

00:42:11,009 --> 00:42:15,990
gives up document based on yeah reserved

00:42:14,309 --> 00:42:19,880
means it breaks confinement one way or

00:42:15,990 --> 00:42:22,830
another early strict confinement so

00:42:19,880 --> 00:42:25,650
developers shouldn't expect to

00:42:22,830 --> 00:42:27,990
to use that freely although as I said at

00:42:25,650 --> 00:42:30,300
the beginning it's a it's in your world

00:42:27,990 --> 00:42:33,540
and you have to transition so there

00:42:30,300 --> 00:42:35,160
might be some interfaces which we which

00:42:33,540 --> 00:42:37,050
are reserved which we allowed through

00:42:35,160 --> 00:42:39,390
automatically today but we have a record

00:42:37,050 --> 00:42:42,990
of which apps are using which reserved

00:42:39,390 --> 00:42:45,660
interfaces some some we might flag

00:42:42,990 --> 00:42:49,980
automatically and ends up on a cue that

00:42:45,660 --> 00:42:52,080
a human looks at it makes a decision but

00:42:49,980 --> 00:42:54,180
reserved essentially means means it

00:42:52,080 --> 00:42:59,730
breaks a little bit out of confinement

00:42:54,180 --> 00:43:02,040
one way another all right I'll Meho is

00:42:59,730 --> 00:43:04,290
asking I am a develop I'm developing a

00:43:02,040 --> 00:43:06,840
browser plugin for firefox the plugin

00:43:04,290 --> 00:43:09,330
starts another local app of mine is it

00:43:06,840 --> 00:43:11,660
possible to package these two apps in a

00:43:09,330 --> 00:43:11,660
snap

00:43:12,210 --> 00:43:17,160
I theses I think the problem is to plug

00:43:15,000 --> 00:43:19,520
in so maybe if you can answer a little

00:43:17,160 --> 00:43:23,400
bit more broadly how plugins will work

00:43:19,520 --> 00:43:27,660
if they will work I don't think plugins

00:43:23,400 --> 00:43:29,970
are the are the right things to start up

00:43:27,660 --> 00:43:33,390
snapping because of confinement write

00:43:29,970 --> 00:43:34,800
plugins by by definition don't want to

00:43:33,390 --> 00:43:36,480
be confined right they want to be part

00:43:34,800 --> 00:43:40,770
of something else and access something

00:43:36,480 --> 00:43:43,170
else and extend something else so we've

00:43:40,770 --> 00:43:46,170
we've been thinking quite a bit about

00:43:43,170 --> 00:43:49,260
about plugins and language packs and all

00:43:46,170 --> 00:43:54,660
sorts of extensions to existing apps but

00:43:49,260 --> 00:43:56,540
I and we'll figure this out we but I

00:43:54,660 --> 00:44:02,460
don't think that's the right place to

00:43:56,540 --> 00:44:04,740
start at the moment all right ng aio is

00:44:02,460 --> 00:44:07,230
asking for an application like a photo

00:44:04,740 --> 00:44:09,210
importer where you want the user to be

00:44:07,230 --> 00:44:10,710
able to save photos pretty much wherever

00:44:09,210 --> 00:44:13,349
they have write access to the file

00:44:10,710 --> 00:44:17,730
system how will the confinement policy

00:44:13,349 --> 00:44:21,690
affect that so so a lot of these things

00:44:17,730 --> 00:44:23,670
we solve for the phone so we'll slowly

00:44:21,690 --> 00:44:28,020
bring in our are what we call trusted

00:44:23,670 --> 00:44:31,109
helpers where the app doesn't have free

00:44:28,020 --> 00:44:36,000
access to the file system but it pops up

00:44:31,109 --> 00:44:38,790
a system trusted mechanism for the user

00:44:36,000 --> 00:44:40,740
to explicitly say yes you can write or

00:44:38,790 --> 00:44:42,630
read from this location right and it

00:44:40,740 --> 00:44:46,230
will just be a file dialogue dialogue

00:44:42,630 --> 00:44:48,450
right so all this is lots of

00:44:46,230 --> 00:44:52,680
implementation but it'll it'll just be

00:44:48,450 --> 00:44:54,450
save it'll show your home directory and

00:44:52,680 --> 00:44:56,190
you'll say wherever you want and all

00:44:54,450 --> 00:44:58,980
that will be fine right the difference

00:44:56,190 --> 00:45:00,390
is that the app will be able to read or

00:44:58,980 --> 00:45:04,020
write from places on your file system

00:45:00,390 --> 00:45:06,869
without you having explicitly decided to

00:45:04,020 --> 00:45:10,320
do so and and again it's a lot of this

00:45:06,869 --> 00:45:13,770
we solved on the phone so we're be using

00:45:10,320 --> 00:45:16,290
all those concepts in some cases human

00:45:13,770 --> 00:45:19,109
code but the trust to help lower helpers

00:45:16,290 --> 00:45:20,910
from the phone to the desktop will take

00:45:19,109 --> 00:45:23,180
a little bit of time as as as we bring

00:45:20,910 --> 00:45:23,180
them in

00:45:24,890 --> 00:45:30,620
alright um Stewart has another question

00:45:29,210 --> 00:45:33,140
he says if I have five different

00:45:30,620 --> 00:45:35,240
versions of inkscape as snaps and then I

00:45:33,140 --> 00:45:37,190
type inkscape in a terminal which one

00:45:35,240 --> 00:45:41,030
runs is there some sort of Debian ish

00:45:37,190 --> 00:45:45,490
alternatives approach so as I said we

00:45:41,030 --> 00:45:49,820
won't have alternatives or Forks support

00:45:45,490 --> 00:45:51,980
and the the short term so that means

00:45:49,820 --> 00:45:55,550
they will actually be different apps

00:45:51,980 --> 00:45:59,660
it'll be inkscape dash Aquarius inkscape

00:45:55,550 --> 00:46:01,580
dash DPM or inscape and you'll actually

00:45:59,660 --> 00:46:03,590
have to run different commands you'll

00:46:01,580 --> 00:46:07,120
either run in inkscape which will manage

00:46:03,590 --> 00:46:07,120
to that a package

00:46:08,760 --> 00:46:13,710
okay d shimmer is asking do all of the

00:46:12,060 --> 00:46:17,660
answers that we've been giving so far

00:46:13,710 --> 00:46:24,120
also applied to a bun to server in 1604

00:46:17,660 --> 00:46:25,740
they do yes so I probably the gooey

00:46:24,120 --> 00:46:28,950
stuff right right right right i was just

00:46:25,740 --> 00:46:32,450
supposed to say but so is snappy on

00:46:28,950 --> 00:46:35,850
classic ubuntu and it's not just desktop

00:46:32,450 --> 00:46:37,650
stewart it's fun to write that they've

00:46:35,850 --> 00:46:40,950
been based bunch of y'all love and use

00:46:37,650 --> 00:46:42,830
right now that everything applies there

00:46:40,950 --> 00:46:45,840
with the caveat of you know some some

00:46:42,830 --> 00:46:52,560
graphics or GUI related questions or

00:46:45,840 --> 00:46:55,800
answers we've we were giving all right

00:46:52,560 --> 00:46:59,910
and we're i don't see any questions I'm

00:46:55,800 --> 00:47:03,030
gonna go back and try it um capture one

00:46:59,910 --> 00:47:04,890
that Stewart was asking so it seems what

00:47:03,030 --> 00:47:09,930
Stewart really wants to know is if he

00:47:04,890 --> 00:47:12,300
targets his snap package for 1604 does

00:47:09,930 --> 00:47:17,490
he know if that is going to continue to

00:47:12,300 --> 00:47:20,820
run when the users on 16 10 or 1704 so

00:47:17,490 --> 00:47:24,570
it will that 1604 environment still be

00:47:20,820 --> 00:47:32,010
the same on different newer releases of

00:47:24,570 --> 00:47:34,800
ubuntu itself yes good crisp because the

00:47:32,010 --> 00:47:39,510
way how it works is right so in snappy

00:47:34,800 --> 00:47:42,570
on classic bunters pulling in ubuntu

00:47:39,510 --> 00:47:44,790
core and that that is tied to the 16

00:47:42,570 --> 00:47:46,710
release and so that speaks that will be

00:47:44,790 --> 00:47:51,300
stable throughout the lifetime of the

00:47:46,710 --> 00:47:53,580
series 16 about to call release so it

00:47:51,300 --> 00:47:57,540
doesn't matter like if your software

00:47:53,580 --> 00:47:58,980
around you is 6046 in 10 what really

00:47:57,540 --> 00:48:03,150
matters what's what's your entry point

00:47:58,980 --> 00:48:05,340
is snappy or the snappy package and then

00:48:03,150 --> 00:48:08,840
whatever magic a desk underneath which

00:48:05,340 --> 00:48:08,840
is you know pulling in a bunch of court

00:48:09,380 --> 00:48:13,010
alright well those were all the

00:48:11,120 --> 00:48:15,470
questions that we've had do you guys

00:48:13,010 --> 00:48:17,810
have any anything you want to talk about

00:48:15,470 --> 00:48:19,580
that maybe didn't get asked or any

00:48:17,810 --> 00:48:23,990
closing thoughts that you want to leave

00:48:19,580 --> 00:48:25,820
people with before we wrap up I would

00:48:23,990 --> 00:48:27,530
perhaps wait for the developer

00:48:25,820 --> 00:48:31,310
experience which i think we haven't

00:48:27,530 --> 00:48:32,780
covered that down and that much so one

00:48:31,310 --> 00:48:34,520
of the important part for users will be

00:48:32,780 --> 00:48:37,820
that as we've said they will have the

00:48:34,520 --> 00:48:40,010
same experience as they had for

00:48:37,820 --> 00:48:42,020
installing applications on various

00:48:40,010 --> 00:48:43,940
versions of Ubuntu they will just get

00:48:42,020 --> 00:48:45,290
the benefit of not just that they will

00:48:43,940 --> 00:48:48,280
get the other benefits of one more

00:48:45,290 --> 00:48:51,110
frequent updates and decoupling the

00:48:48,280 --> 00:48:55,970
update cycle from the the actual release

00:48:51,110 --> 00:48:57,560
release cycle for developers we put

00:48:55,970 --> 00:48:59,530
together a set of tools and and

00:48:57,560 --> 00:49:02,990
documentation to get to make the

00:48:59,530 --> 00:49:06,130
experience of creating a snap much more

00:49:02,990 --> 00:49:09,320
on my plate much much much more pleasant

00:49:06,130 --> 00:49:11,540
essentially this was on to both down to

00:49:09,320 --> 00:49:13,360
at all it's not craft that takes care of

00:49:11,540 --> 00:49:17,360
doing all the work for you essentially

00:49:13,360 --> 00:49:20,870
all of words snap craft requires is

00:49:17,360 --> 00:49:24,530
essentially the resources and then a

00:49:20,870 --> 00:49:26,870
llamo file called snap craft on TMO with

00:49:24,530 --> 00:49:29,660
a specific synced up symptoms where you

00:49:26,870 --> 00:49:33,140
describe how your package is crafted its

00:49:29,660 --> 00:49:35,600
put together essentially you can then

00:49:33,140 --> 00:49:37,790
call a snap craft in different stages or

00:49:35,600 --> 00:49:40,190
you can just call an tells not craft to

00:49:37,790 --> 00:49:42,920
do to do everything where everything

00:49:40,190 --> 00:49:45,740
means fetching the required dependencies

00:49:42,920 --> 00:49:49,220
being Debian packages being get sources

00:49:45,740 --> 00:49:51,250
being busy our sources then stitching

00:49:49,220 --> 00:49:54,530
all together assembling the snap

00:49:51,250 --> 00:49:56,870
building the snap and then you end up

00:49:54,530 --> 00:49:59,780
with dot snap file which you can either

00:49:56,870 --> 00:50:02,090
side vote for for installing and testing

00:49:59,780 --> 00:50:05,360
locally or then ultimately you can then

00:50:02,090 --> 00:50:06,830
publish to the store and when I say

00:50:05,360 --> 00:50:09,170
polish to a store then that only know

00:50:06,830 --> 00:50:13,940
that you can publish your application

00:50:09,170 --> 00:50:16,880
for baifern architectures as well and to

00:50:13,940 --> 00:50:20,450
rub that up just to mention that launch

00:50:16,880 --> 00:50:22,100
pad also supports building snaps for you

00:50:20,450 --> 00:50:23,190
so once you've tested that your

00:50:22,100 --> 00:50:25,349
application built

00:50:23,190 --> 00:50:27,660
locally or New York snapped application

00:50:25,349 --> 00:50:30,060
built locally but you can do is to get a

00:50:27,660 --> 00:50:33,869
launch pad to to use a branch which

00:50:30,060 --> 00:50:37,640
might be a PCI branch or grant imported

00:50:33,869 --> 00:50:40,170
from from github get up to build those

00:50:37,640 --> 00:50:42,060
those snaps in different magic adapters

00:50:40,170 --> 00:50:47,670
for you and make them available to to

00:50:42,060 --> 00:50:55,710
users all right I think probably wanted

00:50:47,670 --> 00:50:57,510
to take another question what time yeah

00:50:55,710 --> 00:50:59,790
erica j asked an interesting question

00:50:57,510 --> 00:51:02,810
whether you know we're going dog food it

00:50:59,790 --> 00:51:05,099
and very snappy will be a snap itself

00:51:02,810 --> 00:51:06,660
labret this you know because of our

00:51:05,099 --> 00:51:10,380
isolation or whatever will not be

00:51:06,660 --> 00:51:12,660
possible right in snappy banter core

00:51:10,380 --> 00:51:15,210
which I refer to as a oh s that's

00:51:12,660 --> 00:51:17,700
architected and laid out to view like

00:51:15,210 --> 00:51:20,640
you know an entire snap system as

00:51:17,700 --> 00:51:23,040
opposed to how the snowflake that we see

00:51:20,640 --> 00:51:25,440
in classical Bunter today everything and

00:51:23,040 --> 00:51:29,579
it's kind of cool is a snap right so you

00:51:25,440 --> 00:51:32,490
have this separation of the OS snap

00:51:29,579 --> 00:51:35,730
there's a kernel snap and so on so far

00:51:32,490 --> 00:51:37,440
so snappy that like the tooling command

00:51:35,730 --> 00:51:40,050
line client will be part of the OS snap

00:51:37,440 --> 00:51:43,200
so yes we're definitely dogfooding that

00:51:40,050 --> 00:51:44,880
right there I'm learning a lot by doing

00:51:43,200 --> 00:51:49,319
so actually um it's been an interesting

00:51:44,880 --> 00:51:50,849
experience alright there's a few

00:51:49,319 --> 00:51:53,970
questions that I think we can bundle all

00:51:50,849 --> 00:51:57,450
together to wrap things up and that's

00:51:53,970 --> 00:52:01,589
about the UI toolkit so Michael tonnelle

00:51:57,450 --> 00:52:04,050
asked if you depended on gtk3 18 and

00:52:01,589 --> 00:52:08,160
then the newer version of ubuntu as gtk3

00:52:04,050 --> 00:52:12,060
20 how would the snap handle this and

00:52:08,160 --> 00:52:14,250
then ng aio is also asking for cute

00:52:12,060 --> 00:52:16,950
based apps should the snap include its

00:52:14,250 --> 00:52:19,050
own version of cute also yeah i mean

00:52:16,950 --> 00:52:22,319
remember that's what you're saying from

00:52:19,050 --> 00:52:25,079
a snap on classic isn't isn't isn't the

00:52:22,319 --> 00:52:26,819
desktop you're seeing punta core that's

00:52:25,079 --> 00:52:30,359
the fastest thing is saying so you don't

00:52:26,819 --> 00:52:32,190
have cutes and GDK even though they're

00:52:30,359 --> 00:52:34,589
installed on the desktop you don't right

00:52:32,190 --> 00:52:36,750
so you have to bundle those libraries

00:52:34,589 --> 00:52:38,460
with your with your snap

00:52:36,750 --> 00:52:43,050
otherwise they're not available all

00:52:38,460 --> 00:52:44,760
right you don't get to access things

00:52:43,050 --> 00:52:47,580
outside of winter core right so

00:52:44,760 --> 00:52:49,470
confinement goes goes few a so there's

00:52:47,580 --> 00:52:51,450
some exceptions to that like like X

00:52:49,470 --> 00:52:53,820
being able to use their socket of things

00:52:51,450 --> 00:52:56,340
like that but in general it's your

00:52:53,820 --> 00:52:58,800
library so you pick the version of cute

00:52:56,340 --> 00:53:02,010
that you want and butter that with your

00:52:58,800 --> 00:53:04,320
snap and that'll work forever if you

00:53:02,010 --> 00:53:08,130
want to upgrade cutes do whatever

00:53:04,320 --> 00:53:10,340
version even your crazy patch version go

00:53:08,130 --> 00:53:13,980
ahead that's that's absolutely fine

00:53:10,340 --> 00:53:16,080
there's the there's the question that

00:53:13,980 --> 00:53:18,900
comes up over and over again where well

00:53:16,080 --> 00:53:20,790
but then security updates and and and

00:53:18,900 --> 00:53:24,200
and things like that which is an

00:53:20,790 --> 00:53:26,790
absolutely fair question and concern and

00:53:24,200 --> 00:53:29,730
I mean obviously this trade-offs between

00:53:26,790 --> 00:53:32,070
all all of the approaches we have we

00:53:29,730 --> 00:53:34,440
have some pretty good ideas there though

00:53:32,070 --> 00:53:36,030
the way you if you use the standard

00:53:34,440 --> 00:53:40,560
tooling like snap craft snap crackle

00:53:36,030 --> 00:53:42,510
book will pull in cute and all the

00:53:40,560 --> 00:53:44,550
libraries from the archive and will

00:53:42,510 --> 00:53:45,900
record what versions of the libraries

00:53:44,550 --> 00:53:49,500
are there and that will be possible

00:53:45,900 --> 00:53:51,900
essentially so we will still be able to

00:53:49,500 --> 00:53:53,520
tell developers hey you bundled this

00:53:51,900 --> 00:53:55,490
specific library as part of your snap

00:53:53,520 --> 00:53:58,320
and there's a pretty critical security

00:53:55,490 --> 00:54:01,980
vulnerability we suggest you update so

00:53:58,320 --> 00:54:05,130
we'll still be able to poke developers

00:54:01,980 --> 00:54:06,750
about security updates and if there's

00:54:05,130 --> 00:54:08,520
there's critical security updates we

00:54:06,750 --> 00:54:10,440
could we could ask developers to pull

00:54:08,520 --> 00:54:11,970
the apps we could warn users there's

00:54:10,440 --> 00:54:14,100
plenty of things we do we can do and

00:54:11,970 --> 00:54:15,540
we'll we'll figure out how the what the

00:54:14,100 --> 00:54:19,760
best thing to do is right but the

00:54:15,540 --> 00:54:23,100
reality is it's it's it's up streams

00:54:19,760 --> 00:54:26,340
users right so well there might be a

00:54:23,100 --> 00:54:28,260
vulnerability in a specific library it

00:54:26,340 --> 00:54:29,790
might not affect your your app because

00:54:28,260 --> 00:54:32,550
your app doesn't doesn't use that part

00:54:29,790 --> 00:54:35,580
and things like that so there's

00:54:32,550 --> 00:54:37,680
definitely a trade-off all right so

00:54:35,580 --> 00:54:39,780
we've got time for one last question and

00:54:37,680 --> 00:54:42,990
this is a good one to end on it's from D

00:54:39,780 --> 00:54:46,080
shimmer he's asking on upgrading to 1604

00:54:42,990 --> 00:54:48,510
I assume will I have to install snappy

00:54:46,080 --> 00:54:49,800
or can I just start snap installing and

00:54:48,510 --> 00:54:53,750
will avail

00:54:49,800 --> 00:54:53,750
snap packages be easily discoverable

00:54:55,460 --> 00:55:01,820
I will be installed by default and you

00:54:59,870 --> 00:55:05,540
will be able to use it right from the

00:55:01,820 --> 00:55:08,270
start we'll have discovery will happen

00:55:05,540 --> 00:55:11,330
through the command line or through a

00:55:08,270 --> 00:55:16,520
bunch of software the graphical climbs

00:55:11,330 --> 00:55:20,650
to the store so it's right there at the

00:55:16,520 --> 00:55:20,650
tip of your finger or your most whatever

00:55:20,860 --> 00:55:26,390
all right well apologies if we didn't

00:55:23,990 --> 00:55:29,420
get to your questions you can always

00:55:26,390 --> 00:55:32,120
like we said earlier go to hash snappy

00:55:29,420 --> 00:55:34,460
on freenode IRC you can ask us any time

00:55:32,120 --> 00:55:38,030
there there's a snappy mailing list

00:55:34,460 --> 00:55:40,730
there's also a scab unto where we've got

00:55:38,030 --> 00:55:44,210
some tags typically for these kinds of

00:55:40,730 --> 00:55:47,360
questions um the Ubuntu community team

00:55:44,210 --> 00:55:49,040
will be back next week on Tuesday to do

00:55:47,360 --> 00:55:52,010
another Q&A so you can bring questions

00:55:49,040 --> 00:55:53,330
then also this video is available to

00:55:52,010 --> 00:55:55,310
rewatch so if you want to go back and

00:55:53,330 --> 00:55:58,100
get any questions you may have missed

00:55:55,310 --> 00:56:00,290
it's all on youtube.com slash abun to

00:55:58,100 --> 00:56:02,960
on-air I want to thank Ali and Martin

00:56:00,290 --> 00:56:04,310
and David for coming on oh and David

00:56:02,960 --> 00:56:06,590
reminds me we're also going to be doing

00:56:04,310 --> 00:56:08,030
a snappy clinic where we're going to be

00:56:06,590 --> 00:56:09,740
walking you through getting set up

00:56:08,030 --> 00:56:12,170
creating your own snaps David could you

00:56:09,740 --> 00:56:16,460
say when that is sure so that's going to

00:56:12,170 --> 00:56:19,790
be right after release on the Tuesday

00:56:16,460 --> 00:56:22,010
the twenty-sixth of of April where

00:56:19,790 --> 00:56:24,590
people will have had time to upgrade

00:56:22,010 --> 00:56:28,370
their systems or install their systems

00:56:24,590 --> 00:56:30,710
me with 1604 will be running this snappy

00:56:28,370 --> 00:56:32,900
clinic here on this channel or no boot

00:56:30,710 --> 00:56:36,680
on air Tuesday the twenty-sixth of April

00:56:32,900 --> 00:56:38,930
at 1500 ttc psychos antenna so as this

00:56:36,680 --> 00:56:40,490
as this tuning and you'll be able to ask

00:56:38,930 --> 00:56:44,000
first profession specifically about

00:56:40,490 --> 00:56:45,530
snappy and get help in packaging your

00:56:44,000 --> 00:56:48,620
your apps will have some of these snappy

00:56:45,530 --> 00:56:52,730
developers to essentially help you with

00:56:48,620 --> 00:56:55,600
any questions or guiding you through

00:56:52,730 --> 00:56:55,600
creating your first now

00:56:55,990 --> 00:57:00,940
alright what we hope all of you are just

00:56:58,240 --> 00:57:03,160
as excited about the snappy future of a

00:57:00,940 --> 00:57:04,869
bun to as we are and again please send

00:57:03,160 --> 00:57:07,210
us any feedback you have as you start

00:57:04,869 --> 00:57:09,910
trying out these tools we will make it

00:57:07,210 --> 00:57:12,340
better with your input and testing and

00:57:09,910 --> 00:57:14,050
feedback again thank you martin and

00:57:12,340 --> 00:57:17,080
Ollie and David and thank you everybody

00:57:14,050 --> 00:57:19,390
on IRC for all of your questions we will

00:57:17,080 --> 00:57:22,980
talk to you all of you later thank you

00:57:19,390 --> 00:57:22,980

YouTube URL: https://www.youtube.com/watch?v=lHO8j8uo5Z4


