Title: Athan Reines -  CSVConf 2017
Publication date: 2017-06-04
Playlist: CSVConf 2017
Description: 
	Math, Numeric Computing, and JavaScript
Captions: 
	00:00:00,180 --> 00:00:10,920
[Music]

00:00:05,690 --> 00:00:13,070
all right the survivors awesome welcome

00:00:10,920 --> 00:00:16,109
to this talk I'm a pan drain

00:00:13,070 --> 00:00:19,170
and what I'm going to talk to you about

00:00:16,109 --> 00:00:22,320
today is mass numeric computing and

00:00:19,170 --> 00:00:25,500
JavaScript a nice weighty topic before

00:00:22,320 --> 00:00:27,599
you go home right and just so I can get

00:00:25,500 --> 00:00:30,090
it kind of feel to the room need to do a

00:00:27,599 --> 00:00:32,340
quick little survey how many people here

00:00:30,090 --> 00:00:34,730
have done what they think to be numeric

00:00:32,340 --> 00:00:37,739
computing that could be like clustering

00:00:34,730 --> 00:00:38,489
fiscal analysis data analysis just a

00:00:37,739 --> 00:00:42,420
quick show of hands

00:00:38,489 --> 00:00:46,289
that's timid show of hands all right how

00:00:42,420 --> 00:00:52,020
many people have used like our X month

00:00:46,289 --> 00:00:53,129
Python matlab mathematica any

00:00:52,020 --> 00:00:54,960
Mathematica fans

00:00:53,129 --> 00:00:59,190
how about Julia how many people views

00:00:54,960 --> 00:01:00,960
Julia one brave soul awesome and then

00:00:59,190 --> 00:01:04,530
how many people have used JavaScript for

00:01:00,960 --> 00:01:06,030
anything at any time everyone but how

00:01:04,530 --> 00:01:07,439
many people how many of you have

00:01:06,030 --> 00:01:11,360
actually used javascript for numeric

00:01:07,439 --> 00:01:14,820
computing oh yeah okay awesome

00:01:11,360 --> 00:01:16,590
all right cool so this talks can be a

00:01:14,820 --> 00:01:20,130
bit of a roller coaster

00:01:16,590 --> 00:01:22,320
give me an emotional journey okay it

00:01:20,130 --> 00:01:24,210
will be so I mean you guys are familiar

00:01:22,320 --> 00:01:26,009
language is you're familiar JavaScript

00:01:24,210 --> 00:01:29,850
so what I'm going to tell you is gonna

00:01:26,009 --> 00:01:32,700
be like ah oh oh no that's not going

00:01:29,850 --> 00:01:34,470
over to work so I want to try to provide

00:01:32,700 --> 00:01:35,759
some light in terms of if you've ever

00:01:34,470 --> 00:01:37,439
thought about numeric computing in

00:01:35,759 --> 00:01:39,570
JavaScript like how to approach it what

00:01:37,439 --> 00:01:41,130
to avoid the pitfalls etc because if

00:01:39,570 --> 00:01:42,810
you're doing data visualization or you

00:01:41,130 --> 00:01:43,710
want to do some analysis or maybe you

00:01:42,810 --> 00:01:44,790
just want a little bit of machine

00:01:43,710 --> 00:01:46,110
learning in your application there's

00:01:44,790 --> 00:01:47,520
some things you need to be aware of and

00:01:46,110 --> 00:01:50,009
things that you need to look for in

00:01:47,520 --> 00:01:51,750
different libraries so the overview is

00:01:50,009 --> 00:01:53,340
first I'm going to motivate a little bit

00:01:51,750 --> 00:01:56,130
like well why should you care about

00:01:53,340 --> 00:01:57,299
JavaScript in the first place and then

00:01:56,130 --> 00:01:59,070
I'm going to talk about the state of

00:01:57,299 --> 00:02:01,290
JavaScript state of in particular the

00:01:59,070 --> 00:02:02,159
state of math and JavaScript and then

00:02:01,290 --> 00:02:04,799
I'll talk about the state of the

00:02:02,159 --> 00:02:06,689
ecosystem I'll talk about a project that

00:02:04,799 --> 00:02:08,670
I'm working on that's helping to drive

00:02:06,689 --> 00:02:11,069
this conversation forward and then I'll

00:02:08,670 --> 00:02:12,930
talk about the future and how you can be

00:02:11,069 --> 00:02:13,790
a part of the JavaScript computing

00:02:12,930 --> 00:02:15,840
revolution

00:02:13,790 --> 00:02:17,880
so without further ado let's talk about

00:02:15,840 --> 00:02:21,480
JavaScript everyone's favorite language

00:02:17,880 --> 00:02:24,840
and whether you like it or not like

00:02:21,480 --> 00:02:27,240
JavaScript is the capital t-h-e language

00:02:24,840 --> 00:02:29,640
of the web right and as Mike Bostock was

00:02:27,240 --> 00:02:31,950
talking about it is how you do things in

00:02:29,640 --> 00:02:33,330
a web standards way right now and it's

00:02:31,950 --> 00:02:35,130
how you do things if you want to be able

00:02:33,330 --> 00:02:36,900
to distribute application to anyone in

00:02:35,130 --> 00:02:40,010
the world whether that's through desktop

00:02:36,900 --> 00:02:41,760
mobile or through the web browser and

00:02:40,010 --> 00:02:42,960
depending on your bit there are some

00:02:41,760 --> 00:02:44,760
things that are not so great about

00:02:42,960 --> 00:02:45,780
JavaScript and then there's sin in your

00:02:44,760 --> 00:02:47,670
bit there are some good things about

00:02:45,780 --> 00:02:50,760
javascript using a fairly polarizing

00:02:47,670 --> 00:02:52,620
example but when people think about

00:02:50,760 --> 00:02:55,170
numeric computing they typically think

00:02:52,620 --> 00:02:57,300
about like MATLAB or Python Giulia

00:02:55,170 --> 00:03:00,270
Mathematica they don't really think

00:02:57,300 --> 00:03:02,700
about like JavaScript and we should ask

00:03:00,270 --> 00:03:03,840
ourselves like why is that why do people

00:03:02,700 --> 00:03:05,250
not really consider is there something

00:03:03,840 --> 00:03:06,990
inherent about the language for why you

00:03:05,250 --> 00:03:09,410
can't do an American pew in JavaScript

00:03:06,990 --> 00:03:11,610
or is maybe just a historical accident

00:03:09,410 --> 00:03:13,440
so let's investigate some of the reasons

00:03:11,610 --> 00:03:15,030
why people say oh I don't want to do

00:03:13,440 --> 00:03:16,830
JavaScript for an American feuding for

00:03:15,030 --> 00:03:17,520
any kind of number crunching first is

00:03:16,830 --> 00:03:19,110
that they might say well it's

00:03:17,520 --> 00:03:21,270
dynamically compiled maybe these are

00:03:19,110 --> 00:03:23,100
people from a C C++ Fortran background

00:03:21,270 --> 00:03:24,870
but the reality is that many other

00:03:23,100 --> 00:03:27,150
numeric computing languages like R and

00:03:24,870 --> 00:03:30,060
Python or dynamically compile write or

00:03:27,150 --> 00:03:32,220
they say well there's no 64-bit integers

00:03:30,060 --> 00:03:34,620
I care about my dollars and since well

00:03:32,220 --> 00:03:36,180
neither does our not R doesn't have

00:03:34,620 --> 00:03:38,310
64-bit integers you have to use an

00:03:36,180 --> 00:03:39,989
outside package for this or they say

00:03:38,310 --> 00:03:42,630
well there's no native big and big

00:03:39,989 --> 00:03:45,269
number support well and are you need to

00:03:42,630 --> 00:03:46,440
use a package and MATLAB you need to use

00:03:45,269 --> 00:03:47,850
a toolbox

00:03:46,440 --> 00:03:49,190
so in these other numeric computing

00:03:47,850 --> 00:03:52,440
languages you don't have these features

00:03:49,190 --> 00:03:55,470
they also say well single-threaded those

00:03:52,440 --> 00:03:57,420
are right or they say well what about

00:03:55,470 --> 00:03:59,820
performance JavaScript is really slow

00:03:57,420 --> 00:04:02,100
isn't it and that may have been true

00:03:59,820 --> 00:04:03,750
like back in the early 2000s and 90s

00:04:02,100 --> 00:04:06,030
that's no longer the case anymore

00:04:03,750 --> 00:04:08,820
especially after the browser wars in the

00:04:06,030 --> 00:04:10,260
late 2000s and where browser vendors

00:04:08,820 --> 00:04:12,660
competed to really drive performance

00:04:10,260 --> 00:04:13,830
forward on the web and so now I've done

00:04:12,660 --> 00:04:16,280
the benchmarks I can tell you with

00:04:13,830 --> 00:04:18,419
without a shadow of a doubt that

00:04:16,280 --> 00:04:20,669
JavaScript is a dynamically compiled

00:04:18,419 --> 00:04:22,710
scripting language it's faster than R in

00:04:20,669 --> 00:04:24,539
Python okay most people don't realize

00:04:22,710 --> 00:04:26,700
that but it's a fast language for doing

00:04:24,539 --> 00:04:29,280
it doing just regular computation

00:04:26,700 --> 00:04:31,380
and finally they say well there's no C

00:04:29,280 --> 00:04:34,770
C++ some fortune bindings because the

00:04:31,380 --> 00:04:36,420
secret behind Python R and Julia etc

00:04:34,770 --> 00:04:39,210
even MATLAB is that they're just

00:04:36,420 --> 00:04:40,800
wrappers around older libraries from

00:04:39,210 --> 00:04:42,930
twenty to thirty years ago they

00:04:40,800 --> 00:04:43,830
integrate with like blasts or la pack

00:04:42,930 --> 00:04:45,990
that's where a lot of the performance

00:04:43,830 --> 00:04:48,120
comes in for linear algebra and

00:04:45,990 --> 00:04:50,760
high-performance computing right they

00:04:48,120 --> 00:04:52,260
just provide some external API and the

00:04:50,760 --> 00:04:54,810
thing about with JavaScript is that well

00:04:52,260 --> 00:04:56,700
in the past yeah everything ran the web

00:04:54,810 --> 00:04:59,580
browser so you couldn't have like an

00:04:56,700 --> 00:05:00,750
interface at C and C++ but given the

00:04:59,580 --> 00:05:02,940
rise of nodejs

00:05:00,750 --> 00:05:05,100
and the ability to write node.js native

00:05:02,940 --> 00:05:07,170
add-ons you can easily tie into these

00:05:05,100 --> 00:05:09,090
blast libraries and get high performance

00:05:07,170 --> 00:05:11,040
and american feuding and javascript now

00:05:09,090 --> 00:05:12,960
and especially with web standards coming

00:05:11,040 --> 00:05:15,900
on board like web assembly this means

00:05:12,960 --> 00:05:17,630
that you can run native code C C++ in a

00:05:15,900 --> 00:05:20,340
web browser with near native performance

00:05:17,630 --> 00:05:24,780
so what was true in the past is no one

00:05:20,340 --> 00:05:27,000
really true now but there are two more

00:05:24,780 --> 00:05:29,510
substantive issues that people give so

00:05:27,000 --> 00:05:31,860
all those reasons I just listed are

00:05:29,510 --> 00:05:33,060
they're not technical barriers for why

00:05:31,860 --> 00:05:36,120
you can't do numeric computing in

00:05:33,060 --> 00:05:38,520
JavaScript right there's no reason why

00:05:36,120 --> 00:05:41,190
you might choose are just as a language

00:05:38,520 --> 00:05:42,780
over JavaScript all right but there are

00:05:41,190 --> 00:05:44,070
two more substantive things that people

00:05:42,780 --> 00:05:45,330
cite for why you don't want to do in

00:05:44,070 --> 00:05:47,040
America computing in JavaScript the

00:05:45,330 --> 00:05:48,600
first is this sheer community now we

00:05:47,040 --> 00:05:51,360
talk about JavaScript the size of the

00:05:48,600 --> 00:05:52,950
community is huge but the size of people

00:05:51,360 --> 00:05:55,770
doing interesting things in numeric

00:05:52,950 --> 00:05:57,390
computing and JavaScript is small so if

00:05:55,770 --> 00:05:59,010
you want to do something in American

00:05:57,390 --> 00:06:02,430
feuding the mouth tutorials it's like

00:05:59,010 --> 00:06:05,030
that is going to be quite a few and it

00:06:02,430 --> 00:06:07,140
can be kind of a lonely endeavor right

00:06:05,030 --> 00:06:09,120
another reason that people cite is well

00:06:07,140 --> 00:06:11,580
there's a lack of comfortable libraries

00:06:09,120 --> 00:06:13,560
there's no numpy for in javascript at

00:06:11,580 --> 00:06:15,540
the present moment and this is true

00:06:13,560 --> 00:06:17,340
right like there aren't there isn't a

00:06:15,540 --> 00:06:19,020
numpy right now for javascript people

00:06:17,340 --> 00:06:20,700
are working toward this but there isn't

00:06:19,020 --> 00:06:22,970
one so if you need to do something here

00:06:20,700 --> 00:06:26,160
and now well you're kind of out of luck

00:06:22,970 --> 00:06:27,750
but this doesn't mean that you can't use

00:06:26,160 --> 00:06:30,150
javascript where we can't port these

00:06:27,750 --> 00:06:31,710
libraries to use javascript for numeric

00:06:30,150 --> 00:06:34,620
computing a web browser in fact we need

00:06:31,710 --> 00:06:36,720
to you might be asking yourself well we

00:06:34,620 --> 00:06:38,380
still really answer the question why we

00:06:36,720 --> 00:06:39,940
should why we'd even want to be

00:06:38,380 --> 00:06:41,650
to do numeric computing and JavaScript

00:06:39,940 --> 00:06:43,240
why should we even care

00:06:41,650 --> 00:06:45,490
where the positive reasons for why we

00:06:43,240 --> 00:06:46,810
need to do this the first is that you

00:06:45,490 --> 00:06:49,300
want to be able to leverage web api's

00:06:46,810 --> 00:06:51,610
you even want access to Hardware API you

00:06:49,300 --> 00:06:53,410
want your application to leverage

00:06:51,610 --> 00:06:55,540
browser rendering capabilities you want

00:06:53,410 --> 00:06:57,430
to be able to output your data

00:06:55,540 --> 00:07:00,070
visualization your analysis is SVG

00:06:57,430 --> 00:07:02,770
canvas WebGL as Mike Bostock talked

00:07:00,070 --> 00:07:04,600
about earlier you want to have a tighter

00:07:02,770 --> 00:07:06,850
coupling between your visualization your

00:07:04,600 --> 00:07:09,250
compass computation so as we saw in the

00:07:06,850 --> 00:07:11,410
keynote with the reactive programming

00:07:09,250 --> 00:07:12,400
style for d3 express imagine if you

00:07:11,410 --> 00:07:14,200
could marry that to a computational

00:07:12,400 --> 00:07:15,790
back-end within the web browser you can

00:07:14,200 --> 00:07:18,040
make a pre powerful proposition there

00:07:15,790 --> 00:07:20,800
for interactive numeric computing all on

00:07:18,040 --> 00:07:22,210
a client's machine another thing you

00:07:20,800 --> 00:07:23,830
want to take advantage of is ubiquity

00:07:22,210 --> 00:07:25,240
the fact that you can run JavaScript

00:07:23,830 --> 00:07:27,370
pretty much anywhere and everywhere

00:07:25,240 --> 00:07:29,050
right and every single fortune 500

00:07:27,370 --> 00:07:31,470
company now they're running node.js and

00:07:29,050 --> 00:07:33,790
production another thing is if any

00:07:31,470 --> 00:07:34,990
pretty much any smartphone device has a

00:07:33,790 --> 00:07:37,630
web browser so you can run JavaScript

00:07:34,990 --> 00:07:39,430
there and now as electron you can create

00:07:37,630 --> 00:07:41,020
desktop applications so you can pretty

00:07:39,430 --> 00:07:42,970
much run JavaScript anywhere and

00:07:41,020 --> 00:07:45,520
especially if you think about the IOT

00:07:42,970 --> 00:07:47,350
movement and with Samsung's movement

00:07:45,520 --> 00:07:50,260
Jarry script like increasingly

00:07:47,350 --> 00:07:52,240
javascript is running in IOT devices so

00:07:50,260 --> 00:07:53,470
if you want to develop an American

00:07:52,240 --> 00:07:55,510
application and you do it in JavaScript

00:07:53,470 --> 00:07:58,240
you have a pretty good chance for having

00:07:55,510 --> 00:08:00,400
pretty high penetration another thing is

00:07:58,240 --> 00:08:02,980
this distribution the fact is is with

00:08:00,400 --> 00:08:04,630
JavaScript and distributing your your

00:08:02,980 --> 00:08:05,650
computational library or your results

00:08:04,630 --> 00:08:07,690
were to be able to reproduce your

00:08:05,650 --> 00:08:10,600
analysis can be as simple as just giving

00:08:07,690 --> 00:08:12,730
someone a URL right there's no special

00:08:10,600 --> 00:08:14,650
set up installation configuration all

00:08:12,730 --> 00:08:17,350
they need is that URL in a browser and

00:08:14,650 --> 00:08:19,630
then BAM have your your computational

00:08:17,350 --> 00:08:20,860
program your algorithms as well as your

00:08:19,630 --> 00:08:23,530
data and they can run right there and

00:08:20,860 --> 00:08:24,640
reproduce it on their own machines the

00:08:23,530 --> 00:08:26,860
other reason that you might want to use

00:08:24,640 --> 00:08:29,020
JavaScript is this package management I

00:08:26,860 --> 00:08:30,550
mean if you come from other environments

00:08:29,020 --> 00:08:32,560
if you move with like pip and you've

00:08:30,550 --> 00:08:34,180
done like our packages or you've been

00:08:32,560 --> 00:08:36,010
familiar with like Julia you know that

00:08:34,180 --> 00:08:37,539
package management other ecosystems is

00:08:36,010 --> 00:08:39,610
kind of difficult especially when you

00:08:37,539 --> 00:08:42,940
think about versioning and the reality

00:08:39,610 --> 00:08:45,280
is that for all its warts like no Jess

00:08:42,940 --> 00:08:47,589
and NPM have kind of like more or less I

00:08:45,280 --> 00:08:49,180
my opinion solve the package management

00:08:47,589 --> 00:08:50,530
problem like it's an efficient way of

00:08:49,180 --> 00:08:51,880
thinking about versioning and you want

00:08:50,530 --> 00:08:53,380
to be able take advantage of that

00:08:51,880 --> 00:08:55,449
for distributing your computational

00:08:53,380 --> 00:08:56,680
results version etc and you also want to

00:08:55,449 --> 00:08:58,630
be able to take advantage of the largest

00:08:56,680 --> 00:09:01,899
package ecosystem of any language out

00:08:58,630 --> 00:09:03,940
there but there's one other really

00:09:01,899 --> 00:09:05,110
important reason for why you want to

00:09:03,940 --> 00:09:06,399
think about JavaScript for doing

00:09:05,110 --> 00:09:09,220
American feuding and that's this is the

00:09:06,399 --> 00:09:11,800
type of applications that you can do if

00:09:09,220 --> 00:09:12,940
you went to the decentralized talk

00:09:11,800 --> 00:09:15,550
earlier this afternoon

00:09:12,940 --> 00:09:17,470
you heard the topic of edge computing

00:09:15,550 --> 00:09:21,250
the notion of edge computing is the is

00:09:17,470 --> 00:09:22,870
the thought of what why should you know

00:09:21,250 --> 00:09:25,180
why why do we need to do our

00:09:22,870 --> 00:09:27,250
computational tasks on a server when a

00:09:25,180 --> 00:09:29,500
client's machine with its resources its

00:09:27,250 --> 00:09:31,509
graphics card can just as easily do this

00:09:29,500 --> 00:09:33,490
type of computation why can't we

00:09:31,509 --> 00:09:34,990
outsource some of the our infrastructure

00:09:33,490 --> 00:09:38,589
to client machines so we can decrease

00:09:34,990 --> 00:09:39,519
our own our own server cost you also

00:09:38,589 --> 00:09:42,190
want to be able to take advantage of

00:09:39,519 --> 00:09:43,120
cross-platform applications maybe you

00:09:42,190 --> 00:09:45,430
want to be able to do something that's a

00:09:43,120 --> 00:09:46,480
bit more compute intensive maybe you

00:09:45,430 --> 00:09:48,610
have an application that wants to do

00:09:46,480 --> 00:09:50,110
like interactive data analysis for

00:09:48,610 --> 00:09:51,490
example let's say you have a mapping

00:09:50,110 --> 00:09:53,949
application and you want to be able to

00:09:51,490 --> 00:09:54,850
do dynamic sampling of your titles you

00:09:53,949 --> 00:09:56,500
need to be able to do some kind of

00:09:54,850 --> 00:09:58,060
numeric computing for this let's say you

00:09:56,500 --> 00:09:59,680
want to be able to you have a lot of

00:09:58,060 --> 00:10:01,990
time series data and you want to be able

00:09:59,680 --> 00:10:03,279
to slice and dice and filter and sample

00:10:01,990 --> 00:10:05,290
etc you need to be able to do some

00:10:03,279 --> 00:10:07,300
numeric computing with that and then

00:10:05,290 --> 00:10:08,980
maybe you want to do an application has

00:10:07,300 --> 00:10:10,990
integrated machine learning in a web

00:10:08,980 --> 00:10:12,670
browser context let's say you want to be

00:10:10,990 --> 00:10:14,620
able to be like clustering or you want

00:10:12,670 --> 00:10:15,639
to be able to do object tracking or

00:10:14,620 --> 00:10:17,529
you're going to be able to do speech

00:10:15,639 --> 00:10:20,680
recognition dictation using hid Markov

00:10:17,529 --> 00:10:21,970
models like all these things you need to

00:10:20,680 --> 00:10:23,980
have machine learning you need to have

00:10:21,970 --> 00:10:25,750
some kind of primitives a numeric

00:10:23,980 --> 00:10:27,550
computing framework within JavaScript to

00:10:25,750 --> 00:10:28,329
be able to do these kinds of things then

00:10:27,550 --> 00:10:29,860
maybe you want to be able to be

00:10:28,329 --> 00:10:30,910
something that's a bit more AI powered

00:10:29,860 --> 00:10:34,060
you want some kind of like smart

00:10:30,910 --> 00:10:36,839
application maybe that does sometimes

00:10:34,060 --> 00:10:40,779
kind of enhance augmented reality or

00:10:36,839 --> 00:10:42,759
with object tracking within images and

00:10:40,779 --> 00:10:44,740
then lastly you want to be able to do

00:10:42,759 --> 00:10:46,329
mad science right you want to be able to

00:10:44,740 --> 00:10:47,889
do mad science in the web browser you

00:10:46,329 --> 00:10:49,540
want to be able to do crazy things that

00:10:47,889 --> 00:10:51,459
are really only accessible and available

00:10:49,540 --> 00:10:53,410
in JavaScript and within the node

00:10:51,459 --> 00:10:56,230
community like for example a

00:10:53,410 --> 00:10:59,439
peer-to-peer serverless grid computing

00:10:56,230 --> 00:11:02,800
application over WebRTC right oh that's

00:10:59,439 --> 00:11:05,540
possible more or less over within using

00:11:02,800 --> 00:11:07,339
just web technologies right now and that

00:11:05,540 --> 00:11:09,620
really hard to get access to or not

00:11:07,339 --> 00:11:13,699
immediately not immediately accessible

00:11:09,620 --> 00:11:14,600
in other language and platforms that's

00:11:13,699 --> 00:11:17,240
great

00:11:14,600 --> 00:11:18,680
hopefully your interest is like okay

00:11:17,240 --> 00:11:20,389
that's kind of interesting it's a little

00:11:18,680 --> 00:11:22,639
bit peak you're like I can kind of see

00:11:20,389 --> 00:11:24,639
some applications and I maybe I care a

00:11:22,639 --> 00:11:26,720
little bit but I'm still a bit skeptical

00:11:24,639 --> 00:11:28,160
and you might be one in our case so like

00:11:26,720 --> 00:11:30,139
how do I get started what do I need to

00:11:28,160 --> 00:11:31,519
do and so from from there we need to

00:11:30,139 --> 00:11:33,880
talk about the state of math and

00:11:31,519 --> 00:11:36,889
JavaScript like what's available right

00:11:33,880 --> 00:11:38,180
the state of math and JavaScript is not

00:11:36,889 --> 00:11:40,160
great this is our emotional

00:11:38,180 --> 00:11:42,589
rollercoaster right it's not great

00:11:40,160 --> 00:11:45,110
so we first needed to talk about the

00:11:42,589 --> 00:11:46,639
standard math library this is the

00:11:45,110 --> 00:11:48,980
standard math library in its entirety

00:11:46,639 --> 00:11:51,620
right 35 functions if you're familiar

00:11:48,980 --> 00:11:54,230
with like modern computing languages you

00:11:51,620 --> 00:11:56,000
know that this is a little bit small you

00:11:54,230 --> 00:11:58,220
know if you're ready to go it has like

00:11:56,000 --> 00:12:00,110
53 function system space library plus

00:11:58,220 --> 00:12:02,779
random number generators plus big in big

00:12:00,110 --> 00:12:05,209
float you're like oh great and you come

00:12:02,779 --> 00:12:09,350
to JavaScript and you go oh that's not

00:12:05,209 --> 00:12:11,089
very good right and then if you compare

00:12:09,350 --> 00:12:14,149
this to let's say your numeric computing

00:12:11,089 --> 00:12:16,160
languages like our or Julie this is like

00:12:14,149 --> 00:12:19,100
downright tiny right what am I going to

00:12:16,160 --> 00:12:21,019
do with that and the route is is not

00:12:19,100 --> 00:12:23,660
much but there are more problems with

00:12:21,019 --> 00:12:26,209
the java javascript standard math

00:12:23,660 --> 00:12:28,279
library in the ecosystem the first is

00:12:26,209 --> 00:12:29,660
this is this kind of the section of the

00:12:28,279 --> 00:12:31,550
talk we talk about like here are the

00:12:29,660 --> 00:12:32,779
warnings the big red flashing signs you

00:12:31,550 --> 00:12:36,410
need to be aware of when you start to

00:12:32,779 --> 00:12:38,029
think about like even creating a data

00:12:36,410 --> 00:12:39,440
visualization packages or whatever else

00:12:38,029 --> 00:12:40,760
your applications within web browsers

00:12:39,440 --> 00:12:42,500
like here's the things you need to think

00:12:40,760 --> 00:12:45,589
about the first is that there are no

00:12:42,500 --> 00:12:47,209
standard algorithms for the standard

00:12:45,589 --> 00:12:48,620
math libraries the specification does

00:12:47,209 --> 00:12:50,990
not say like how you need to compute

00:12:48,620 --> 00:12:52,279
something so each browser vendor can

00:12:50,990 --> 00:12:54,430
have a different underlying

00:12:52,279 --> 00:12:56,660
implementation that's kind of a problem

00:12:54,430 --> 00:12:58,430
another one is that the specification

00:12:56,660 --> 00:13:01,220
does not mandate a particular precision

00:12:58,430 --> 00:13:02,750
browser vendors are able to make speed

00:13:01,220 --> 00:13:06,260
and precision trade-off and they have

00:13:02,750 --> 00:13:08,360
and what this means is that you cannot

00:13:06,260 --> 00:13:10,519
guarantee portability of your app your

00:13:08,360 --> 00:13:13,069
numeric computing application right now

00:13:10,519 --> 00:13:14,720
from different between different

00:13:13,069 --> 00:13:15,949
browsers that you could run in Firefox

00:13:14,720 --> 00:13:18,460
and you could run on Chrome and you can

00:13:15,949 --> 00:13:19,839
get different results okay and

00:13:18,460 --> 00:13:21,670
because there's no standard math

00:13:19,839 --> 00:13:23,920
algorithm or anything else even from one

00:13:21,670 --> 00:13:25,149
browser restart to the next you could

00:13:23,920 --> 00:13:27,190
have a different underlying math

00:13:25,149 --> 00:13:29,740
implemented and you can have entirely

00:13:27,190 --> 00:13:30,880
different results that's kind of it that

00:13:29,740 --> 00:13:33,060
makes an issue you especially if I want

00:13:30,880 --> 00:13:34,959
to do reproducible applications right

00:13:33,060 --> 00:13:37,720
there's another issue that there's no

00:13:34,959 --> 00:13:39,550
common code base right this is kind of

00:13:37,720 --> 00:13:41,440
how the job community works and how

00:13:39,550 --> 00:13:43,510
browser vendors like each of their own

00:13:41,440 --> 00:13:44,980
implementations if you care about like

00:13:43,510 --> 00:13:47,620
really driving this conversation forward

00:13:44,980 --> 00:13:48,820
well it's going to be kind of a pain

00:13:47,620 --> 00:13:51,010
because you have to invest a lot of time

00:13:48,820 --> 00:13:52,990
and research going to different

00:13:51,010 --> 00:13:54,640
repositories etc it's not like Julia

00:13:52,990 --> 00:13:57,279
where there's like one single repository

00:13:54,640 --> 00:13:58,870
like an go file an issue for know I have

00:13:57,279 --> 00:14:01,450
to go around to like I have to look at

00:13:58,870 --> 00:14:03,310
rust at to look at how the chrome guys

00:14:01,450 --> 00:14:06,100
are doing it etc right it's a lot of

00:14:03,310 --> 00:14:08,290
work there's also this kind of slow pace

00:14:06,100 --> 00:14:11,770
of innovation within JavaScript at the

00:14:08,290 --> 00:14:13,630
specification level for example 64-bit

00:14:11,770 --> 00:14:15,670
integers have been kind of like on the

00:14:13,630 --> 00:14:18,580
table off the table on the table on the

00:14:15,670 --> 00:14:20,140
table for over a decade now right and

00:14:18,580 --> 00:14:21,580
this more recently there's finally a

00:14:20,140 --> 00:14:23,709
specification that's reached like stage

00:14:21,580 --> 00:14:25,450
two for doing arbitrary precision

00:14:23,709 --> 00:14:27,790
integers like you would have in Python

00:14:25,450 --> 00:14:29,950
versus h2 and it may not even succeed

00:14:27,790 --> 00:14:31,450
these things take a lot of time because

00:14:29,950 --> 00:14:33,100
you have to get cross browser consensus

00:14:31,450 --> 00:14:34,720
so it's really hard to do things at the

00:14:33,100 --> 00:14:38,220
specification level to drive math

00:14:34,720 --> 00:14:41,400
forward on the web and then finally

00:14:38,220 --> 00:14:43,839
there's one more problem which is that

00:14:41,400 --> 00:14:45,400
where's his hat you would think like

00:14:43,839 --> 00:14:47,440
JavaScript it around since like the mid

00:14:45,400 --> 00:14:48,550
90s right you would think like hand they

00:14:47,440 --> 00:14:50,500
probably like nail these these

00:14:48,550 --> 00:14:51,250
implementations I'm sure everything's

00:14:50,500 --> 00:14:55,060
accurate

00:14:51,250 --> 00:14:56,890
no they're not right the lot of the

00:14:55,060 --> 00:14:58,720
implementations are not accurate in fact

00:14:56,890 --> 00:15:00,730
my version of chrome running right now

00:14:58,720 --> 00:15:04,180
does not accurate compute ten to the

00:15:00,730 --> 00:15:06,279
three zero eight okay and I came across

00:15:04,180 --> 00:15:07,660
an initial bug because I was doing

00:15:06,279 --> 00:15:08,890
testing for high precision numeric

00:15:07,660 --> 00:15:12,010
algorithms and I kept on getting the

00:15:08,890 --> 00:15:13,510
wrong results or things that defied my

00:15:12,010 --> 00:15:15,250
expectations and it's because of this

00:15:13,510 --> 00:15:16,720
something very basic and the reason is

00:15:15,250 --> 00:15:21,310
it because the chrome team is using a

00:15:16,720 --> 00:15:22,510
fast algorithm to compute powers right

00:15:21,310 --> 00:15:24,399
they're making that speed and precision

00:15:22,510 --> 00:15:27,010
trade-off and so there's accuracy issues

00:15:24,399 --> 00:15:29,190
in other versions of chrome when you

00:15:27,010 --> 00:15:31,329
compute e to the X it's not accurate

00:15:29,190 --> 00:15:32,170
right and the reason why this is so

00:15:31,329 --> 00:15:34,570
important

00:15:32,170 --> 00:15:36,250
it's because these implementations are

00:15:34,570 --> 00:15:37,360
foundational right if you want to be

00:15:36,250 --> 00:15:39,430
able to do a higher level machine

00:15:37,360 --> 00:15:40,959
learning and statistical analysis you

00:15:39,430 --> 00:15:42,850
need to get the basics right because

00:15:40,959 --> 00:15:44,980
those errors propagate and those errors

00:15:42,850 --> 00:15:46,690
matter when you're trying to decide if

00:15:44,980 --> 00:15:48,699
someone has cancer or not right like

00:15:46,690 --> 00:15:50,980
these things are these things are

00:15:48,699 --> 00:15:52,180
important and the reason why browser

00:15:50,980 --> 00:15:53,889
vendors have won in this kind of

00:15:52,180 --> 00:15:55,449
flexibility is because in the past

00:15:53,889 --> 00:15:57,190
they've been more concerned about like

00:15:55,449 --> 00:15:58,750
games how to make things really fast on

00:15:57,190 --> 00:16:00,880
the web and so they wanted to have like

00:15:58,750 --> 00:16:02,680
really fast implementation but the

00:16:00,880 --> 00:16:04,570
domains to which those concerns apply

00:16:02,680 --> 00:16:06,639
are definitely not numeric computing

00:16:04,570 --> 00:16:09,670
right so we need something else to

00:16:06,639 --> 00:16:11,709
address these shortcomings so we need

00:16:09,670 --> 00:16:14,260
time the standards have led us down in

00:16:11,709 --> 00:16:16,029
JavaScript right we go the community is

00:16:14,260 --> 00:16:18,670
always rushed in and created stellar

00:16:16,029 --> 00:16:20,620
solutions and they come and save the day

00:16:18,670 --> 00:16:22,630
right so let's let's talk about the

00:16:20,620 --> 00:16:24,750
state of the ecosystem the reality is

00:16:22,630 --> 00:16:28,990
the state of the ecosystem ain't greater

00:16:24,750 --> 00:16:31,149
and there are a number of issues 95 to

00:16:28,990 --> 00:16:32,440
99 percent of the math libraries out

00:16:31,149 --> 00:16:33,670
there that you will see and JavaScript

00:16:32,440 --> 00:16:35,560
and referring on the web make false

00:16:33,670 --> 00:16:37,510
assumptions the first number one

00:16:35,560 --> 00:16:39,640
assumption they assume is a good

00:16:37,510 --> 00:16:41,019
standard math library right and that's

00:16:39,640 --> 00:16:42,550
an issue because it just kind of like

00:16:41,019 --> 00:16:43,660
taints the rest of all their

00:16:42,550 --> 00:16:44,890
implementations that they want to do

00:16:43,660 --> 00:16:47,290
some kind of machine learning or deep

00:16:44,890 --> 00:16:48,490
learning right they just assume blindly

00:16:47,290 --> 00:16:50,019
assume that they have a good standard

00:16:48,490 --> 00:16:52,050
math library and they ignore the reality

00:16:50,019 --> 00:16:53,980
of what the lay of the land actually is

00:16:52,050 --> 00:16:55,690
the next thing is that many people

00:16:53,980 --> 00:16:58,360
address this low-hanging fruit like

00:16:55,690 --> 00:17:00,070
there are just tons of packages out

00:16:58,360 --> 00:17:01,269
there to compute like the mean variance

00:17:00,070 --> 00:17:04,569
and standard deviation of an array

00:17:01,269 --> 00:17:05,860
that's great go ahead and do that but if

00:17:04,569 --> 00:17:07,209
you're going to do like the basics you

00:17:05,860 --> 00:17:09,250
better make sure that you do them right

00:17:07,209 --> 00:17:11,260
right and the reality is that there's a

00:17:09,250 --> 00:17:14,049
lot of poor implementations one of my

00:17:11,260 --> 00:17:15,250
Olympus test for any math library out

00:17:14,049 --> 00:17:16,540
there is like how do they compute the

00:17:15,250 --> 00:17:18,610
variance because if you take the

00:17:16,540 --> 00:17:19,809
standard textbook definition where you

00:17:18,610 --> 00:17:22,270
do like to sum of squared differences

00:17:19,809 --> 00:17:24,250
it's not numerically stable you can have

00:17:22,270 --> 00:17:26,290
overflow errors or you can have

00:17:24,250 --> 00:17:30,040
catastrophic cancellation rights my most

00:17:26,290 --> 00:17:32,290
basic Liz litmus test 99% of math

00:17:30,040 --> 00:17:33,280
libraries out there do not do this well

00:17:32,290 --> 00:17:34,540
so if you're out there like looking for

00:17:33,280 --> 00:17:37,480
a package alright I'm going to do some

00:17:34,540 --> 00:17:38,830
clustering do your homework you need to

00:17:37,480 --> 00:17:41,380
read the source because most of them

00:17:38,830 --> 00:17:42,490
haven't really done their homework the

00:17:41,380 --> 00:17:44,559
other thing is that there's this kind of

00:17:42,490 --> 00:17:46,140
insufficient scope right so there are

00:17:44,559 --> 00:17:47,860
some interesting

00:17:46,140 --> 00:17:49,630
libraries out there as I've done like

00:17:47,860 --> 00:17:52,330
deep learning in the browser so like

00:17:49,630 --> 00:17:53,530
andrew capacities cognate j/s or there

00:17:52,330 --> 00:17:55,960
are people that have thought about like

00:17:53,530 --> 00:17:57,669
okay I'm going to use WebGL shaders and

00:17:55,960 --> 00:17:59,140
I'm going to implement blast I'm going

00:17:57,669 --> 00:18:01,650
to call it web blast so that you can do

00:17:59,140 --> 00:18:04,120
really high efficient computational

00:18:01,650 --> 00:18:05,710
algorithms on the graphics cards and

00:18:04,120 --> 00:18:07,840
browsers that's great

00:18:05,710 --> 00:18:09,280
however there's an insufficient scope

00:18:07,840 --> 00:18:10,780
here you can't do that's not a

00:18:09,280 --> 00:18:12,309
foundational technology that you can

00:18:10,780 --> 00:18:14,830
build an erect an entire numeric

00:18:12,309 --> 00:18:17,169
computing ecosystem for JavaScript

00:18:14,830 --> 00:18:19,960
around that and then this is kind of

00:18:17,169 --> 00:18:22,659
this lack of ambition right so a while

00:18:19,960 --> 00:18:24,789
back ago a developer by the name of

00:18:22,659 --> 00:18:26,350
Michael I think oh he does a lot of

00:18:24,789 --> 00:18:26,950
stuff in graphics program and definitely

00:18:26,350 --> 00:18:28,900
check them out

00:18:26,950 --> 00:18:30,280
he showed that basically the same

00:18:28,900 --> 00:18:33,159
multi-dimensional data structures that

00:18:30,280 --> 00:18:34,960
you see in like R and python and matlab

00:18:33,159 --> 00:18:36,580
there's no secret to them you can

00:18:34,960 --> 00:18:38,140
implement them in JavaScript you called

00:18:36,580 --> 00:18:39,460
it he create a package called india ray

00:18:38,140 --> 00:18:41,110
and you showed how you can do a fishing

00:18:39,460 --> 00:18:43,750
computation in javascript very

00:18:41,110 --> 00:18:45,190
performant lee right so instead of the

00:18:43,750 --> 00:18:46,570
community kind of consolidating around

00:18:45,190 --> 00:18:48,100
this and figuring out like effective

00:18:46,570 --> 00:18:49,990
ways to leverage this kind of technology

00:18:48,100 --> 00:18:51,520
this way of thinking we're still

00:18:49,990 --> 00:18:53,440
addressing these low-hanging fruit right

00:18:51,520 --> 00:18:55,450
and so this is kind of lack of ambition

00:18:53,440 --> 00:18:56,890
and really tackling the hard problem and

00:18:55,450 --> 00:19:00,159
part of that is just getting momentum

00:18:56,890 --> 00:19:02,350
into the ecosystem and and and get syrup

00:19:00,159 --> 00:19:07,350
demand for y numeric computer is

00:19:02,350 --> 00:19:10,870
important within the browser context so

00:19:07,350 --> 00:19:12,820
at this point you're going just I'm this

00:19:10,870 --> 00:19:14,409
I'm floored right like I'm on this

00:19:12,820 --> 00:19:17,350
emotional roller coaster and you really

00:19:14,409 --> 00:19:18,880
were at the bottom it's not great I came

00:19:17,350 --> 00:19:21,520
here to learn about American JavaScript

00:19:18,880 --> 00:19:23,350
or is anyone doing anything around this

00:19:21,520 --> 00:19:25,150
and I can tell you that there are people

00:19:23,350 --> 00:19:26,950
that have identified these problems are

00:19:25,150 --> 00:19:30,460
actually working on a solution for this

00:19:26,950 --> 00:19:31,840
the project of the working on is tries

00:19:30,460 --> 00:19:34,330
to combat a lot of noises in the

00:19:31,840 --> 00:19:36,190
ecosystem and that project that they're

00:19:34,330 --> 00:19:39,159
working on a standard lip now standard

00:19:36,190 --> 00:19:41,679
Lib is a standard library for JavaScript

00:19:39,159 --> 00:19:44,140
and node.js with an emphasis on numeric

00:19:41,679 --> 00:19:48,220
computing and if you're familiar with

00:19:44,140 --> 00:19:49,900
the NPM and node ecosystem you might be

00:19:48,220 --> 00:19:51,730
familiar with like modular design if you

00:19:49,900 --> 00:19:52,530
went to a male basis talk you talked

00:19:51,730 --> 00:19:54,789
about

00:19:52,530 --> 00:19:57,280
decomposable functions separating things

00:19:54,789 --> 00:19:59,530
out this project embraces that

00:19:57,280 --> 00:20:00,220
philosophy to its end right it creates

00:19:59,530 --> 00:20:01,390
many

00:20:00,220 --> 00:20:02,710
different packages for different

00:20:01,390 --> 00:20:04,929
elements in numeric computing it

00:20:02,710 --> 00:20:06,370
includes robust implementations like

00:20:04,929 --> 00:20:08,440
special functions or doing

00:20:06,370 --> 00:20:11,400
floating-point manipulation plotting

00:20:08,440 --> 00:20:13,450
those utilities it also includes a

00:20:11,400 --> 00:20:14,860
extensive growing list of c double

00:20:13,450 --> 00:20:17,500
random number generators that you might

00:20:14,860 --> 00:20:21,039
find in any kind of numeric computing

00:20:17,500 --> 00:20:24,400
library there's also an integrated help

00:20:21,039 --> 00:20:26,200
and repple so you can get repla docks if

00:20:24,400 --> 00:20:28,090
you're from it's like numpy and just do

00:20:26,200 --> 00:20:30,309
like help and a function you get back

00:20:28,090 --> 00:20:33,280
this help text here I'm showing the help

00:20:30,309 --> 00:20:36,039
for a blast implementation because this

00:20:33,280 --> 00:20:37,659
project has written wrappers for blasts

00:20:36,039 --> 00:20:39,190
and lob pack libraries to do efficient

00:20:37,659 --> 00:20:41,320
high-performance numeric computing and

00:20:39,190 --> 00:20:43,330
JavaScript and with that there's also

00:20:41,320 --> 00:20:45,100
web assembly implementations so you can

00:20:43,330 --> 00:20:48,159
do this kind of computation with in web

00:20:45,100 --> 00:20:49,720
browsers now if you're familiar with the

00:20:48,159 --> 00:20:51,220
our ruffle I think everyone in here is

00:20:49,720 --> 00:20:53,620
done are you know that you can run like

00:20:51,220 --> 00:20:56,260
example and then whichever function and

00:20:53,620 --> 00:20:58,150
that gives you spins out that example

00:20:56,260 --> 00:20:58,750
and then you can interact with it same

00:20:58,150 --> 00:21:00,370
thing here

00:20:58,750 --> 00:21:01,690
just calling an example with a certain

00:21:00,370 --> 00:21:05,980
function you can go back and edit that

00:21:01,690 --> 00:21:07,870
history and interact with it so it's a

00:21:05,980 --> 00:21:09,429
standard library it's a standard library

00:21:07,870 --> 00:21:11,500
to piece of foundational technologies

00:21:09,429 --> 00:21:13,659
that focuses on doing high-performance

00:21:11,500 --> 00:21:16,330
numeric computing a lot of utilities to

00:21:13,659 --> 00:21:18,730
build libraries that do like machine

00:21:16,330 --> 00:21:20,110
learning in statistical analysis etc now

00:21:18,730 --> 00:21:22,720
lest you think I'm one of those false

00:21:20,110 --> 00:21:24,580
prophets that was a lot of that full of

00:21:22,720 --> 00:21:25,539
lava noise and doesn't really know what

00:21:24,580 --> 00:21:27,850
he's talking about

00:21:25,539 --> 00:21:30,039
there's also an integrated integrated

00:21:27,850 --> 00:21:31,390
bibliographic database with all the

00:21:30,039 --> 00:21:33,880
primary literature that we use for all

00:21:31,390 --> 00:21:35,740
the different implementations and

00:21:33,880 --> 00:21:37,419
there's also tests against standard

00:21:35,740 --> 00:21:40,240
reference implementations and Julia are

00:21:37,419 --> 00:21:41,860
and Python so that's great

00:21:40,240 --> 00:21:43,270
you might be thinking crib I'm back on

00:21:41,860 --> 00:21:44,770
this around the high point of roller

00:21:43,270 --> 00:21:46,929
coaster there's like this library out

00:21:44,770 --> 00:21:50,590
there that's all for my problem fabulous

00:21:46,929 --> 00:21:52,120
how can I use it roller coaster the

00:21:50,590 --> 00:21:54,460
reality is that so much in very much an

00:21:52,120 --> 00:21:55,659
active development it's been over a year

00:21:54,460 --> 00:21:57,309
now that I've worked on this full time

00:21:55,659 --> 00:21:59,830
as an open source developer living off

00:21:57,309 --> 00:22:01,059
my savings and there's still a lot of

00:21:59,830 --> 00:22:03,549
work to be done is very much in alpha

00:22:01,059 --> 00:22:04,840
status right it can be used to interact

00:22:03,549 --> 00:22:06,429
with it now and it'd be great to get

00:22:04,840 --> 00:22:08,440
feedback but there's a lot of work still

00:22:06,429 --> 00:22:10,030
to be done and so you might say like

00:22:08,440 --> 00:22:11,710
what's needed what's needed to really

00:22:10,030 --> 00:22:13,059
kind of drive this forward and how can I

00:22:11,710 --> 00:22:13,960
start taking advantage of doing machine

00:22:13,059 --> 00:22:15,250
learning applications

00:22:13,960 --> 00:22:17,740
in the web browser and within my

00:22:15,250 --> 00:22:20,279
applications and what's needed is your

00:22:17,740 --> 00:22:22,570
help your help is needed to do to write

00:22:20,279 --> 00:22:24,850
robust and performant algorithms to

00:22:22,570 --> 00:22:26,620
write tests and documentation your help

00:22:24,850 --> 00:22:28,149
is needed to make JavaScript a

00:22:26,620 --> 00:22:29,500
first-class computing language and to

00:22:28,149 --> 00:22:31,870
really bring the merit computing to the

00:22:29,500 --> 00:22:33,159
web browser and hopefully I've shown you

00:22:31,870 --> 00:22:34,809
that there is a light at the end of the

00:22:33,159 --> 00:22:37,000
tunnel I encourage you to look into it

00:22:34,809 --> 00:22:37,630
to give feedback and hopefully you help

00:22:37,000 --> 00:22:39,970
us get there

00:22:37,630 --> 00:22:40,960
so with that like to thank you for

00:22:39,970 --> 00:22:42,580
coming to the talk we're coming to the

00:22:40,960 --> 00:22:44,080
conference if you're interested in the

00:22:42,580 --> 00:22:45,700
project here's a URL and if you wanna

00:22:44,080 --> 00:22:47,260
help crowd fund it there's also a URL

00:22:45,700 --> 00:22:47,740
but thank you very much and I can take

00:22:47,260 --> 00:22:50,500
the clock

00:22:47,740 --> 00:22:54,769
[Applause]

00:22:50,500 --> 00:22:54,769

YouTube URL: https://www.youtube.com/watch?v=P4_5LvKmhIc


