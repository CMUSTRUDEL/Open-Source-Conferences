Title: Raj Singh - CSVConf 2017
Publication date: 2017-06-04
Playlist: CSVConf 2017
Description: 
	
Captions: 
	00:00:00,190 --> 00:00:02,839
[Music]

00:00:04,910 --> 00:00:12,750
Hey

00:00:06,919 --> 00:00:14,849
okay so I know uh a lot of you people

00:00:12,750 --> 00:00:19,859
work a lot with no books which is good

00:00:14,849 --> 00:00:22,650
but as you probably know the work can be

00:00:19,859 --> 00:00:24,720
completely frustrating and monotonous

00:00:22,650 --> 00:00:28,140
and just crappy before you get a result

00:00:24,720 --> 00:00:30,630
so here's an example of a heat standard

00:00:28,140 --> 00:00:34,440
stick here's an example of what you need

00:00:30,630 --> 00:00:37,380
to do to create that ugly 1980s bitmap

00:00:34,440 --> 00:00:39,930
thing in the middle so import a bunch of

00:00:37,380 --> 00:00:44,520
library we're going to use matplotlib

00:00:39,930 --> 00:00:46,950
here use some obscure style to find your

00:00:44,520 --> 00:00:49,920
figure your axes and all that stuff and

00:00:46,950 --> 00:00:52,829
then set all your colors and you

00:00:49,920 --> 00:00:54,510
probably don't just write this code

00:00:52,829 --> 00:00:56,190
you'll probably take hours to figure out

00:00:54,510 --> 00:00:58,320
exactly what you want and this is

00:00:56,190 --> 00:01:00,480
probably the simple version of hours or

00:00:58,320 --> 00:01:05,010
days worth of work and at the end of it

00:01:00,480 --> 00:01:09,979
you get this thing which is you know not

00:01:05,010 --> 00:01:14,549
really not really bootstrap type or like

00:01:09,979 --> 00:01:15,560
2017 web design so wouldn't this be

00:01:14,549 --> 00:01:19,320
nicer

00:01:15,560 --> 00:01:20,670
so pixie dust is an extension mainly

00:01:19,320 --> 00:01:23,460
written by a colleague of mine another

00:01:20,670 --> 00:01:26,610
developer advocate in my group and I

00:01:23,460 --> 00:01:28,259
just implemented the mapping part he did

00:01:26,610 --> 00:01:29,640
all the tough part about reverse

00:01:28,259 --> 00:01:31,290
engineering Jupiter notebooks and

00:01:29,640 --> 00:01:33,479
figuring out how to write new Python

00:01:31,290 --> 00:01:35,810
code in the sort of inside the kernel

00:01:33,479 --> 00:01:39,150
and extend it in amazing ways

00:01:35,810 --> 00:01:42,439
so with pixie dust you get one command

00:01:39,150 --> 00:01:44,970
display and it takes your data frame

00:01:42,439 --> 00:01:48,090
either spark data frame or panda's data

00:01:44,970 --> 00:01:51,450
frame and gives you a GUI to work with

00:01:48,090 --> 00:01:53,220
it you can make it a table you can do

00:01:51,450 --> 00:01:57,540
bar charts and line charts and scatter

00:01:53,220 --> 00:02:00,060
plots and histograms and adding support

00:01:57,540 --> 00:02:03,509
to stash it to different databases that

00:02:00,060 --> 00:02:06,960
we support our favorite IBM databases on

00:02:03,509 --> 00:02:07,340
the cloud and also do mappings and

00:02:06,960 --> 00:02:09,410
that's the

00:02:07,340 --> 00:02:11,510
focus of what I'm going to talk about so

00:02:09,410 --> 00:02:15,349
how many people do mapping on a daily

00:02:11,510 --> 00:02:17,390
basis geospatial work just a few good so

00:02:15,349 --> 00:02:19,970
I was part of the reason I'm you know

00:02:17,390 --> 00:02:21,560
you can do obviously when you're going

00:02:19,970 --> 00:02:24,260
to do really high end stuff you're going

00:02:21,560 --> 00:02:25,400
to get in and customize it yourself and

00:02:24,260 --> 00:02:28,400
you're going to want the control you get

00:02:25,400 --> 00:02:29,810
with a lot of code or the kind of

00:02:28,400 --> 00:02:32,239
control you can only get with coding

00:02:29,810 --> 00:02:34,610
yourself but if you're kind of new to it

00:02:32,239 --> 00:02:36,019
and you just want you know you have a

00:02:34,610 --> 00:02:37,340
latitude and longitude field in your

00:02:36,019 --> 00:02:40,040
data you want to see what it looks like

00:02:37,340 --> 00:02:42,110
or you want to do a lot of exploratory

00:02:40,040 --> 00:02:45,290
data analysis before you spend all that

00:02:42,110 --> 00:02:47,030
time on your final product the pixie

00:02:45,290 --> 00:02:50,060
dust extension can be a great way to

00:02:47,030 --> 00:02:54,860
just play around before you devote a lot

00:02:50,060 --> 00:02:57,110
of time to the custom code based work

00:02:54,860 --> 00:02:58,540
and that applies to the charting the bar

00:02:57,110 --> 00:03:02,420
charting and the line charting as well

00:02:58,540 --> 00:03:08,360
so you know I think of pixie dust as a

00:03:02,420 --> 00:03:10,760
tool to sort of give you just as much or

00:03:08,360 --> 00:03:12,290
devote just as much time as you want to

00:03:10,760 --> 00:03:16,100
at the right stage of the process

00:03:12,290 --> 00:03:18,079
project so at the beginning of getting a

00:03:16,100 --> 00:03:20,150
beginning of a project when you just

00:03:18,079 --> 00:03:22,700
want to sort of get a feel for your data

00:03:20,150 --> 00:03:26,359
look at a few things you don't want to

00:03:22,700 --> 00:03:27,769
have to stop switch context and go and

00:03:26,359 --> 00:03:30,590
read books for three hours

00:03:27,769 --> 00:03:33,079
and figuring out like all the all the

00:03:30,590 --> 00:03:34,430
options in the PLT command alright you

00:03:33,079 --> 00:03:36,500
want to sort of play with your data you

00:03:34,430 --> 00:03:38,750
want to be focused on your subject

00:03:36,500 --> 00:03:41,930
matter and understanding that and then

00:03:38,750 --> 00:03:43,790
when you get you know overlapping text

00:03:41,930 --> 00:03:45,230
and on your on your graphs and you want

00:03:43,790 --> 00:03:46,849
to fix that and really make that nice

00:03:45,230 --> 00:03:48,590
you can do to save that all to the end

00:03:46,849 --> 00:03:50,060
when you're when you're just thinking

00:03:48,590 --> 00:03:53,540
and brainstorming you want some

00:03:50,060 --> 00:03:53,829
easy-to-use tool and this looks pretty

00:03:53,540 --> 00:03:57,139
good

00:03:53,829 --> 00:03:59,389
actually right out of the box so I'm

00:03:57,139 --> 00:04:00,680
going to talk a little bit so that's the

00:03:59,389 --> 00:04:04,310
problem I think this is a great solution

00:04:00,680 --> 00:04:06,950
to that it's an open pixie-dust an open

00:04:04,310 --> 00:04:09,970
source extension we're looking for lots

00:04:06,950 --> 00:04:14,330
of help with making it better and you

00:04:09,970 --> 00:04:16,519
don't have to run it on IBM cloud

00:04:14,330 --> 00:04:18,019
talk a little bit about that it can just

00:04:16,519 --> 00:04:19,760
run on its own and Jupiter you can

00:04:18,019 --> 00:04:23,830
download Jupiter notebook set everything

00:04:19,760 --> 00:04:26,150
up yourself and go yourself and use it

00:04:23,830 --> 00:04:28,940
but let me talk a little bit about what

00:04:26,150 --> 00:04:32,780
we do so I'm in I'm a developer advocate

00:04:28,940 --> 00:04:35,570
for the Watson data platform which is a

00:04:32,780 --> 00:04:36,950
combination we used last year we were

00:04:35,570 --> 00:04:39,230
cloud data services

00:04:36,950 --> 00:04:42,170
we're responsible for all the online

00:04:39,230 --> 00:04:46,280
databases managed databases that IBM

00:04:42,170 --> 00:04:49,280
offers on db2 on cloud and cloud in

00:04:46,280 --> 00:04:51,500
great no sequel database and dashdb

00:04:49,280 --> 00:04:53,660
column data store things like that and

00:04:51,500 --> 00:04:55,430
this year we kind of merged with cloud

00:04:53,660 --> 00:04:58,280
and watson a little bit and our

00:04:55,430 --> 00:05:00,170
responsibility is more now it's more

00:04:58,280 --> 00:05:01,460
than databases and analytics and we're

00:05:00,170 --> 00:05:04,280
talking more about some of the cognitive

00:05:01,460 --> 00:05:06,380
stuff from Watson but the can't really

00:05:04,280 --> 00:05:09,440
read this back there but the core pieces

00:05:06,380 --> 00:05:13,460
of what we do our data engineering data

00:05:09,440 --> 00:05:16,150
science analysis and app development we

00:05:13,460 --> 00:05:18,140
try to bring those all together so

00:05:16,150 --> 00:05:19,669
eliminate a lot of the friction of

00:05:18,140 --> 00:05:22,340
starting of doing all that stuff

00:05:19,669 --> 00:05:26,270
yourself and have it all in one in one

00:05:22,340 --> 00:05:28,820
managed service offering so you know

00:05:26,270 --> 00:05:30,410
that's the whole big picture and then we

00:05:28,820 --> 00:05:31,880
have data services that we're adding

00:05:30,410 --> 00:05:36,050
like we bought the weather company last

00:05:31,880 --> 00:05:38,630
year and you know making it as big

00:05:36,050 --> 00:05:39,740
companies do a one-stop shop but today

00:05:38,630 --> 00:05:42,110
I'm just going to talk about data

00:05:39,740 --> 00:05:45,560
science really and the flagship offering

00:05:42,110 --> 00:05:47,000
there is no forgot to do my animation so

00:05:45,560 --> 00:05:48,460
yeah we got a lot of weather data from

00:05:47,000 --> 00:05:50,930
buying weather company and Twitter

00:05:48,460 --> 00:05:53,830
partnership and adding lots and machine

00:05:50,930 --> 00:05:57,380
learning stuff and geo is my specialty

00:05:53,830 --> 00:05:59,150
so data science our main offering

00:05:57,380 --> 00:06:01,100
flagship offering and data science is

00:05:59,150 --> 00:06:05,900
called the data science experience not

00:06:01,100 --> 00:06:10,100
very creative and we call it DSX but all

00:06:05,900 --> 00:06:13,010
DSX really is is a real convenience tool

00:06:10,100 --> 00:06:15,620
it combines gives you a web-based

00:06:13,010 --> 00:06:18,110
interface to a jupiter notebook and it

00:06:15,620 --> 00:06:20,900
fires up spark instances automatically

00:06:18,110 --> 00:06:22,639
along with the object storage which is

00:06:20,900 --> 00:06:25,129
kind of like Amazon

00:06:22,639 --> 00:06:30,080
three so as soon as you start up a

00:06:25,129 --> 00:06:32,210
project and DSX you have sparked place

00:06:30,080 --> 00:06:34,669
to store files and Jupiter a notebook

00:06:32,210 --> 00:06:36,889
environment running right away which is

00:06:34,669 --> 00:06:38,629
a really nice thing if you are well you

00:06:36,889 --> 00:06:41,270
most of you sounds like you probably

00:06:38,629 --> 00:06:47,599
have set that up on your own and that

00:06:41,270 --> 00:06:51,949
can be no fun so so for those of you who

00:06:47,599 --> 00:06:56,360
don't know much about notebooks oh just

00:06:51,949 --> 00:06:58,490
talk about so a jupiter notebook is not

00:06:56,360 --> 00:07:00,620
just a coding environment but it's also

00:06:58,490 --> 00:07:05,569
a place where you can combine code with

00:07:00,620 --> 00:07:09,740
markdown text and interactive HTML to

00:07:05,569 --> 00:07:13,219
really create final presentation product

00:07:09,740 --> 00:07:16,669
around around your data engineering and

00:07:13,219 --> 00:07:18,620
data science work started off the idea

00:07:16,669 --> 00:07:20,749
started off you know hundreds of years

00:07:18,620 --> 00:07:23,569
ago scientists have been documenting

00:07:20,749 --> 00:07:25,129
their work for a long time and they'd

00:07:23,569 --> 00:07:25,699
write notebooks that's where the name

00:07:25,129 --> 00:07:27,620
came from

00:07:25,699 --> 00:07:28,969
so you'd have all these scientific

00:07:27,620 --> 00:07:30,830
notebooks where people are writing down

00:07:28,969 --> 00:07:32,509
their experimental results and Rand

00:07:30,830 --> 00:07:36,379
drawing little graphs and things like

00:07:32,509 --> 00:07:40,520
that and then I forget who invented

00:07:36,379 --> 00:07:43,909
MATLAB Carl I can't remember this name

00:07:40,520 --> 00:07:46,250
but this is amazing guy we owe a lot to

00:07:43,909 --> 00:07:48,020
MATLAB took the idea of this sort of

00:07:46,250 --> 00:07:50,930
analog notebooks and brought it into the

00:07:48,020 --> 00:07:53,930
digital world back in maybe the 80s but

00:07:50,930 --> 00:07:56,449
I think the 90s and the MATLAB notebook

00:07:53,930 --> 00:07:59,149
is really the probably the direct

00:07:56,449 --> 00:08:01,759
heritage of Jupiter notebooks you could

00:07:59,149 --> 00:08:04,189
do a lot of coding in there and get you

00:08:01,759 --> 00:08:07,460
know results right away in a graph in a

00:08:04,189 --> 00:08:10,520
visualization put in pictures and helper

00:08:07,460 --> 00:08:15,199
things and MATLAB is still an amazing

00:08:10,520 --> 00:08:18,259
product and so out of that grew a whole

00:08:15,199 --> 00:08:20,800
sort of family of data science notebook

00:08:18,259 --> 00:08:25,610
types is not just Jupiter there's

00:08:20,800 --> 00:08:29,149
Zeppelin and some other things but since

00:08:25,610 --> 00:08:30,979
we since our company is focused on

00:08:29,149 --> 00:08:31,720
supporting Jupiter that's what we built

00:08:30,979 --> 00:08:34,539
pixie dust

00:08:31,720 --> 00:08:37,180
or and I'm talking about visualizations

00:08:34,539 --> 00:08:38,770
and particularly map visualization but

00:08:37,180 --> 00:08:41,050
there are a lot of other pieces to pixie

00:08:38,770 --> 00:08:44,080
dust which make your Jupiter notebook

00:08:41,050 --> 00:08:46,240
work a little bit more pleasant package

00:08:44,080 --> 00:08:47,800
manager it can import while I'm going to

00:08:46,240 --> 00:08:48,970
talk about all these very quickly

00:08:47,800 --> 00:08:51,940
because I'm already almost halfway

00:08:48,970 --> 00:08:54,430
through package management visualization

00:08:51,940 --> 00:08:57,400
cloud integration a Scala bridge which

00:08:54,430 --> 00:09:00,790
is really cool extensibility embedded

00:08:57,400 --> 00:09:03,340
apps so the package manager can install

00:09:00,790 --> 00:09:06,070
spark packages or jars without modifying

00:09:03,340 --> 00:09:09,250
a config file if you do that that's

00:09:06,070 --> 00:09:13,660
really nice one simple API for display

00:09:09,250 --> 00:09:17,740
which I'm going to talk more about data

00:09:13,660 --> 00:09:21,670
export into file CSV JSON XML or your

00:09:17,740 --> 00:09:23,470
favorite online cloud IBM database Scala

00:09:21,670 --> 00:09:25,810
bridge if you use this I don't do Scala

00:09:23,470 --> 00:09:27,970
so I don't know how amazing this is what

00:09:25,810 --> 00:09:30,460
I hear the sharing variables between

00:09:27,970 --> 00:09:32,650
Python and Scala you know if you want to

00:09:30,460 --> 00:09:34,660
use a library really good Scala library

00:09:32,650 --> 00:09:39,220
but you're working in Python you can go

00:09:34,660 --> 00:09:41,170
back and forth as an amazing feature try

00:09:39,220 --> 00:09:45,070
to make this animate quickly so I can go

00:09:41,170 --> 00:09:49,690
through quickly extensibility with HTML

00:09:45,070 --> 00:09:51,600
J's CSS and JavaScript and embedded apps

00:09:49,690 --> 00:09:53,830
so this is something we're building so

00:09:51,600 --> 00:09:56,650
we're still building this out right now

00:09:53,830 --> 00:09:59,470
so once you're able to sort of

00:09:56,650 --> 00:10:03,850
programmatically control your data frame

00:09:59,470 --> 00:10:05,589
and build some of these graphics why not

00:10:03,850 --> 00:10:08,050
construct an app why not really take

00:10:05,589 --> 00:10:13,390
advantage of the Dom and build out a

00:10:08,050 --> 00:10:15,430
whole basically a whole web web

00:10:13,390 --> 00:10:18,100
application within your Jupiter notebook

00:10:15,430 --> 00:10:20,230
which is fed live from dynamic data from

00:10:18,100 --> 00:10:22,240
data frames it's all based on the fact

00:10:20,230 --> 00:10:24,370
that you have these data frames these

00:10:22,240 --> 00:10:25,540
objects variable objects some stored in

00:10:24,370 --> 00:10:28,990
your droopier notebook that can be

00:10:25,540 --> 00:10:32,200
exposed and operated on computationally

00:10:28,990 --> 00:10:39,010
and then rendered with anything you can

00:10:32,200 --> 00:10:40,880
do in HTML Javascript CSS CSS so now I'm

00:10:39,010 --> 00:10:53,130
going to switch to a demo

00:10:40,880 --> 00:10:55,850
so if everything works well sorry this

00:10:53,130 --> 00:11:00,950
is a little bit blurry in the background

00:10:55,850 --> 00:11:03,870
so this is a data science experience and

00:11:00,950 --> 00:11:06,350
you'll see it's not very the fact that

00:11:03,870 --> 00:11:09,060
it's Jupiter isn't hidden very much

00:11:06,350 --> 00:11:11,610
everything below here is pretty much

00:11:09,060 --> 00:11:15,480
like the jupiter notebook you'll see on

00:11:11,610 --> 00:11:18,930
your desktop so I'm just going to I have

00:11:15,480 --> 00:11:21,180
some code here you can install it from

00:11:18,930 --> 00:11:31,769
pi PI so I comment out pip install

00:11:21,180 --> 00:11:36,149
pixie-dust import pixie does so we bring

00:11:31,769 --> 00:11:40,560
in this library so we've got two mapping

00:11:36,149 --> 00:11:42,899
libraries in here Google Maps and matte

00:11:40,560 --> 00:11:48,000
box and that's what I'm going to talk

00:11:42,899 --> 00:11:49,829
about mainly so Google Maps has a nice

00:11:48,000 --> 00:11:54,560
little developer API for letting you

00:11:49,829 --> 00:11:57,149
make maps based on names named fields so

00:11:54,560 --> 00:11:58,829
let's say you have a bunch of

00:11:57,149 --> 00:12:00,360
international data and you have country

00:11:58,829 --> 00:12:02,010
names and you have values in another

00:12:00,360 --> 00:12:04,500
field that's what Google Maps is good at

00:12:02,010 --> 00:12:06,899
or you have some US data and you have

00:12:04,500 --> 00:12:11,910
state or county names and you have

00:12:06,899 --> 00:12:13,680
values you want to map that's what

00:12:11,910 --> 00:12:15,990
Google Maps is good at math box is

00:12:13,680 --> 00:12:20,130
better at mapping data with geographic

00:12:15,990 --> 00:12:22,709
coordinates who so I forgot to talk a

00:12:20,130 --> 00:12:25,170
little bit about this so the first thing

00:12:22,709 --> 00:12:27,570
we do we import pixie-dust we run the

00:12:25,170 --> 00:12:29,040
pixie dust comes with a few sample data

00:12:27,570 --> 00:12:31,529
sets built-in which I'm going to take

00:12:29,040 --> 00:12:34,560
advantage of so if you run the sample

00:12:31,529 --> 00:12:36,600
data command with no no parameter it

00:12:34,560 --> 00:12:39,240
returns a list showing you the data sets

00:12:36,600 --> 00:12:41,250
available I'm going to grab the total

00:12:39,240 --> 00:12:43,769
population by country data set from the

00:12:41,250 --> 00:12:47,339
UN or from the World Bank that I haven't

00:12:43,769 --> 00:12:49,470
here and that was number three so I run

00:12:47,339 --> 00:12:53,660
sample data again with the value of

00:12:49,470 --> 00:12:56,999
three it creates a spark data frame and

00:12:53,660 --> 00:12:58,910
then I run the display command with the

00:12:56,999 --> 00:13:03,449
data frame as with a single parameter

00:12:58,910 --> 00:13:07,019
and you'll see this sweet looking map

00:13:03,449 --> 00:13:10,769
with no code and not just a map but as

00:13:07,019 --> 00:13:14,189
your hover over it pops up pops up the

00:13:10,769 --> 00:13:17,309
name of the field name and the value in

00:13:14,189 --> 00:13:20,189
this case this is a nice exact obviously

00:13:17,309 --> 00:13:22,350
I use good sample data so you pop up the

00:13:20,189 --> 00:13:24,839
name of the country and the population

00:13:22,350 --> 00:13:30,259
value you probably can't see back there

00:13:24,839 --> 00:13:30,259
and as you move over here you'll see

00:13:34,489 --> 00:13:40,709
directly from the Google Maps API so all

00:13:38,309 --> 00:13:43,290
we're really doing here is feeding the

00:13:40,709 --> 00:13:48,559
Google Maps JavaScript library which is

00:13:43,290 --> 00:13:48,559
all in this cell with the data frame and

00:13:49,999 --> 00:13:55,499
I'll show you so you go in here there

00:13:53,490 --> 00:14:03,480
options here I could have given the map

00:13:55,499 --> 00:14:05,309
a title so global population and this is

00:14:03,480 --> 00:14:10,410
where I picked out my fields this is a

00:14:05,309 --> 00:14:14,269
lot more fun than writing code so you

00:14:10,410 --> 00:14:20,579
can just drag and drop these guys here

00:14:14,269 --> 00:14:23,119
and here's an important thing so you can

00:14:20,579 --> 00:14:25,980
choose what sampling of your data to use

00:14:23,119 --> 00:14:27,509
so here I'm going to choose that I'm all

00:14:25,980 --> 00:14:29,429
this has to happen in memory so you

00:14:27,509 --> 00:14:31,829
don't want to use a terabyte of data in

00:14:29,429 --> 00:14:33,809
your browser so you can pick the number

00:14:31,829 --> 00:14:35,699
of rows to display problem I'm using

00:14:33,809 --> 00:14:37,829
1000 right now which covers all the

00:14:35,699 --> 00:14:39,419
countries in the world so that that

00:14:37,829 --> 00:14:42,480
actually grabs all the data but if you

00:14:39,419 --> 00:14:43,860
had millions of records you know that

00:14:42,480 --> 00:14:47,850
you were guaranteed to only get back a

00:14:43,860 --> 00:14:49,799
thousand in your browser in memory and

00:14:47,850 --> 00:14:52,410
you could up that to ten thousand which

00:14:49,799 --> 00:14:54,869
would probably be fine but I know this

00:14:52,410 --> 00:14:57,269
works for this and one thing to note

00:14:54,869 --> 00:14:57,540
about that it's not the number of rows

00:14:57,269 --> 00:15:00,060
that

00:14:57,540 --> 00:15:01,829
are going to come back are not the

00:15:00,060 --> 00:15:04,350
number of rows in your data set but it's

00:15:01,829 --> 00:15:06,750
a number of rows after you do this

00:15:04,350 --> 00:15:08,160
aggregation command of sum count or

00:15:06,750 --> 00:15:13,380
something like that so you can actually

00:15:08,160 --> 00:15:15,480
operate on the whole data set and as

00:15:13,380 --> 00:15:19,279
long as you know that less than this

00:15:15,480 --> 00:15:19,279
amount of rows is going to be the result

00:15:23,029 --> 00:15:30,240
so that's cool but you know if you're

00:15:26,880 --> 00:15:35,100
doing real work you probably have data

00:15:30,240 --> 00:15:36,660
with latitudes and longitudes in it so

00:15:35,100 --> 00:15:38,490
I'm going to I just pull down a few

00:15:36,660 --> 00:15:40,920
months worth of home sales data from red

00:15:38,490 --> 00:15:45,199
friend Monday and use that to build a

00:15:40,920 --> 00:15:45,199
another sample data set we put in here

00:15:45,560 --> 00:15:54,569
so I'm going to pull that into a spark

00:15:47,730 --> 00:15:59,160
data frame really quick and I'm going to

00:15:54,569 --> 00:16:02,240
run this display command again how much

00:15:59,160 --> 00:16:02,240
time do I have okay

00:16:11,580 --> 00:16:21,730
and do we get a knife

00:16:15,330 --> 00:16:22,390
so pixie dust fires up the grabs the

00:16:21,730 --> 00:16:25,000
math box

00:16:22,390 --> 00:16:27,460
client-side JavaScript library takes all

00:16:25,000 --> 00:16:29,440
the data transforms it into geo JSON as

00:16:27,460 --> 00:16:32,680
you heard Mike Bostock talked a little

00:16:29,440 --> 00:16:35,620
bit about because d3 uses geo JSON as a

00:16:32,680 --> 00:16:38,680
spatial data format so does map boxes

00:16:35,620 --> 00:16:43,770
client-side library translates it into

00:16:38,680 --> 00:16:49,810
JSON add some basic styling styling

00:16:43,770 --> 00:16:51,250
thematic styling cartographic whatever

00:16:49,810 --> 00:16:52,780
you want to call it it's a JSON file

00:16:51,250 --> 00:16:56,260
that describes how to cartographically

00:16:52,780 --> 00:16:58,750
style the point and then it also uses

00:16:56,260 --> 00:17:02,080
map box to pull in this base street

00:16:58,750 --> 00:17:04,390
layer underneath for some context so

00:17:02,080 --> 00:17:06,339
instead of just getting a map with your

00:17:04,390 --> 00:17:16,540
data back you actually get all the

00:17:06,339 --> 00:17:18,490
streets for free so these are so it's

00:17:16,540 --> 00:17:21,190
doing a little bit of deconfliction for

00:17:18,490 --> 00:17:24,070
to give you a clean map and it's

00:17:21,190 --> 00:17:26,199
clustering points if they overlap so as

00:17:24,070 --> 00:17:27,579
you move out you'll see all these

00:17:26,199 --> 00:17:29,710
numbers or how many points are clustered

00:17:27,579 --> 00:17:31,720
there but as you zoom in you'll get

00:17:29,710 --> 00:17:34,030
individual points and then you can see

00:17:31,720 --> 00:17:36,870
the price of the home sale so these are

00:17:34,030 --> 00:17:39,850
all home sales over a million dollars in

00:17:36,870 --> 00:17:43,660
northeastern Massachusetts and if over a

00:17:39,850 --> 00:17:45,510
few months period so you can start to

00:17:43,660 --> 00:17:48,360
see patterns what you can also do here

00:17:45,510 --> 00:17:50,130
we have a few options you can just see

00:17:48,360 --> 00:17:53,520
[Music]

00:17:50,130 --> 00:17:57,160
just see all the points not thematically

00:17:53,520 --> 00:17:59,350
just hover over get the values I showed

00:17:57,160 --> 00:18:02,620
you that Cora plus map which is thematic

00:17:59,350 --> 00:18:05,770
or you can do a heat map or of a heat

00:18:02,620 --> 00:18:12,340
map style so that spatial patterns jump

00:18:05,770 --> 00:18:14,020
out more visibly and that's all defined

00:18:12,340 --> 00:18:16,720
all you have to do is have a latitude

00:18:14,020 --> 00:18:17,760
and longitude field in your data you

00:18:16,720 --> 00:18:20,460
drag those over here

00:18:17,760 --> 00:18:24,630
and then you put some numeric field as

00:18:20,460 --> 00:18:26,430
your value to style on and just like

00:18:24,630 --> 00:18:30,780
anything else you get some you get

00:18:26,430 --> 00:18:37,190
aggregation there Oh forgot to show you

00:18:30,780 --> 00:18:39,720
so you'll need a free you'll need a free

00:18:37,190 --> 00:18:41,520
access token format box to make this

00:18:39,720 --> 00:18:44,900
work you can get that on their website

00:18:41,520 --> 00:18:47,190
that the Help button explains all that

00:18:44,900 --> 00:18:48,720
well let me just quickly show you so in

00:18:47,190 --> 00:18:51,210
addition to the mapping which is sort of

00:18:48,720 --> 00:18:53,040
the most complex thing you can just

00:18:51,210 --> 00:18:55,170
click on the table button and see the

00:18:53,040 --> 00:18:58,260
data as a table you can go back and

00:18:55,170 --> 00:19:01,350
forth so here's a nice if you've ever

00:18:58,260 --> 00:19:03,270
used notebooks the tabular output is

00:19:01,350 --> 00:19:07,650
kind of crappy so this is a much nicer

00:19:03,270 --> 00:19:11,550
way to see your data in a table then you

00:19:07,650 --> 00:19:12,960
can go in here and the idea is that at

00:19:11,550 --> 00:19:14,760
any point in time you might want to see

00:19:12,960 --> 00:19:17,130
your data as any one of these types of

00:19:14,760 --> 00:19:22,350
visualizations I don't think this one

00:19:17,130 --> 00:19:23,730
will make sense really yeah but it's

00:19:22,350 --> 00:19:25,950
kind of fun to play with this you see

00:19:23,730 --> 00:19:30,050
like the relationship between home price

00:19:25,950 --> 00:19:30,050
and number of bathrooms things like that

00:19:31,010 --> 00:19:36,000
go back to the map so that is the demo

00:19:35,100 --> 00:19:38,870
it all worked

00:19:36,000 --> 00:19:38,870
excellent

00:19:42,220 --> 00:19:49,540
so for programmers who had liked to

00:19:45,770 --> 00:19:53,090
court your participation on the project

00:19:49,540 --> 00:19:54,860
as I mentioned earlier this all works

00:19:53,090 --> 00:19:56,660
off all the renderers were calling all

00:19:54,860 --> 00:19:59,210
these different visualization styles

00:19:56,660 --> 00:20:02,750
renders they all work off of a spark

00:19:59,210 --> 00:20:06,050
data frame which is exposed to the code

00:20:02,750 --> 00:20:07,610
and in my case and mapping I need to

00:20:06,050 --> 00:20:09,050
translate that spark data frame in the

00:20:07,610 --> 00:20:14,080
Geo JSON because that's sort of the

00:20:09,050 --> 00:20:17,870
lingua franca of web-based mapping and I

00:20:14,080 --> 00:20:20,960
know if you chose a thematic coroplast

00:20:17,870 --> 00:20:24,290
style map you need to quickly generate

00:20:20,960 --> 00:20:27,040
five quantiles just chose that because

00:20:24,290 --> 00:20:29,570
that's the most common thing you do that

00:20:27,040 --> 00:20:33,650
which is obviously in a really easy

00:20:29,570 --> 00:20:37,010
thing for for Python to do and then we

00:20:33,650 --> 00:20:38,600
so the data is in geo JSON the styling

00:20:37,010 --> 00:20:42,080
the credit graphic styling is in another

00:20:38,600 --> 00:20:44,990
style type of JSON file we create that

00:20:42,080 --> 00:20:47,750
and then we combine it all into a ginger

00:20:44,990 --> 00:20:49,550
to template so pixie-dust adopted ginger

00:20:47,750 --> 00:20:51,470
- is a templating engine so you can use

00:20:49,550 --> 00:20:54,980
variables you don't just have to spit

00:20:51,470 --> 00:20:57,350
out HTML you can reference variables

00:20:54,980 --> 00:21:01,100
from your Python code within the HTML to

00:20:57,350 --> 00:21:04,550
bring data and and then we show it all

00:21:01,100 --> 00:21:06,770
in the output of a notebook cell and the

00:21:04,550 --> 00:21:10,520
magic of notebook cells is that you can

00:21:06,770 --> 00:21:12,530
embed any HTML Javascript and CSS inside

00:21:10,520 --> 00:21:14,420
them so you can do amazing things you

00:21:12,530 --> 00:21:16,100
can take that as far as you want and

00:21:14,420 --> 00:21:17,110
we're pushing it pretty much as hard as

00:21:16,100 --> 00:21:21,290
you can

00:21:17,110 --> 00:21:24,950
in our case only for the mapping for

00:21:21,290 --> 00:21:26,960
some reason map boxes library doesn't

00:21:24,950 --> 00:21:29,690
like being embedded in a div so you have

00:21:26,960 --> 00:21:32,420
to have to put it in an iframe but that

00:21:29,690 --> 00:21:35,480
so that happens so we have an iframe

00:21:32,420 --> 00:21:37,930
that gets shown before we embed the map

00:21:35,480 --> 00:21:41,840
view dot HTML inside that iframe and

00:21:37,930 --> 00:21:43,580
then we just as I mentioned before we

00:21:41,840 --> 00:21:45,440
call the base mapping service from map

00:21:43,580 --> 00:21:47,860
box to show a really pretty street map

00:21:45,440 --> 00:21:47,860
underneath

00:21:49,710 --> 00:21:55,860
Oh future of this particular part of

00:21:53,130 --> 00:21:59,730
pixie dust is probably adding more

00:21:55,860 --> 00:22:03,390
support for other companies maybe a Zuri

00:21:59,730 --> 00:22:06,179
support for mapping if you want to in

00:22:03,390 --> 00:22:07,710
addition to the map box in Google right

00:22:06,179 --> 00:22:11,700
now we're just doing points that we nice

00:22:07,710 --> 00:22:13,710
support polygons and you have more

00:22:11,700 --> 00:22:17,070
credit graphic visualization options

00:22:13,710 --> 00:22:19,110
like a lot of data not a lot of natural

00:22:17,070 --> 00:22:23,120
occurring data like weather patterns or

00:22:19,110 --> 00:22:26,899
hurricanes or sort of erosion erosion

00:22:23,120 --> 00:22:31,260
likelihood is more suited to a sort of a

00:22:26,899 --> 00:22:33,330
hex bin type view rather than a rather

00:22:31,260 --> 00:22:35,000
than a hard-line view points points

00:22:33,330 --> 00:22:38,039
lines and polygons are really meant for

00:22:35,000 --> 00:22:39,360
man-made features not really

00:22:38,039 --> 00:22:42,000
environmental things like rainfall

00:22:39,360 --> 00:22:44,520
patterns and things like that so having

00:22:42,000 --> 00:22:49,770
some support for continuously changing

00:22:44,520 --> 00:22:53,490
data visualizations is is in the future

00:22:49,770 --> 00:22:55,020
and then animated visualization so if

00:22:53,490 --> 00:22:58,740
you want a model if you want to see

00:22:55,020 --> 00:23:01,770
plume dispersion that's something pretty

00:22:58,740 --> 00:23:07,039
big now with all the with all the things

00:23:01,770 --> 00:23:09,600
happening in subways and for no flooding

00:23:07,039 --> 00:23:11,669
the way water disperses across the

00:23:09,600 --> 00:23:13,470
surface those are the kind of things

00:23:11,669 --> 00:23:16,279
those are the kind of scientific areas

00:23:13,470 --> 00:23:20,760
you'd want an animated spacial temporal

00:23:16,279 --> 00:23:22,470
visualization and that's that's a lot

00:23:20,760 --> 00:23:27,840
harder than what's happened so far so

00:23:22,470 --> 00:23:30,510
please help and that's what I've got so

00:23:27,840 --> 00:23:33,720
go out and use pixie dust install it try

00:23:30,510 --> 00:23:35,130
out data science data science experience

00:23:33,720 --> 00:23:37,799
or try it on your own in your local

00:23:35,130 --> 00:23:40,020
notebooks and let me know how you like

00:23:37,799 --> 00:23:44,539
it or if you want to get started helping

00:23:40,020 --> 00:23:44,539

YouTube URL: https://www.youtube.com/watch?v=kdoDkoZJDts


