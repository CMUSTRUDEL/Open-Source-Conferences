Title: Emil Bay -  CSVConf 2017
Publication date: 2017-06-04
Playlist: CSVConf 2017
Description: 
	Applying software engineering practises to data analysis
Captions: 
	00:00:00,180 --> 00:00:02,839
[Music]

00:00:05,000 --> 00:00:12,809
all right so title with a long talk I'm

00:00:09,780 --> 00:00:15,179
going to talk about how to I'm going to

00:00:12,809 --> 00:00:16,560
talk about how being that a passive guy

00:00:15,179 --> 00:00:18,170
that here we just talked about the one

00:00:16,560 --> 00:00:21,779
that tells you how to do stuff and

00:00:18,170 --> 00:00:23,880
that's what my talk is about so and well

00:00:21,779 --> 00:00:25,800
I mean I'm not here preaching an

00:00:23,880 --> 00:00:28,500
absolute truth you make up your own mind

00:00:25,800 --> 00:00:32,219
right but in this is how I do my data

00:00:28,500 --> 00:00:35,100
analysis so my name is me obey I go by

00:00:32,219 --> 00:00:38,360
mu based online I currently am working

00:00:35,100 --> 00:00:42,629
on a project called commodity trader and

00:00:38,360 --> 00:00:45,930
what we also like what we basically do

00:00:42,629 --> 00:00:48,300
is that we trade our grain online so if

00:00:45,930 --> 00:00:51,030
you want to buy like 500 tons of grain

00:00:48,300 --> 00:00:52,350
like soybeans or whatever talk to me and

00:00:51,030 --> 00:00:55,079
I'll ship you like a whole ship of

00:00:52,350 --> 00:00:57,449
screen so in yeah that's basically it

00:00:55,079 --> 00:00:59,280
but I mean not too much data analysis in

00:00:57,449 --> 00:01:02,340
here it's actually a lot more about

00:00:59,280 --> 00:01:07,170
cryptography and so yeah totally

00:01:02,340 --> 00:01:10,040
unrelated kind of still math oh yeah I

00:01:07,170 --> 00:01:11,790
used to study method at university

00:01:10,040 --> 00:01:13,890
mostly because it's like this

00:01:11,790 --> 00:01:15,240
masochistic thing or like trying to get

00:01:13,890 --> 00:01:17,670
at the absolute truth of the universe

00:01:15,240 --> 00:01:18,770
and today I'm also here to talk about

00:01:17,670 --> 00:01:23,430
absolute truth

00:01:18,770 --> 00:01:25,290
so I previously I have a pretty varied

00:01:23,430 --> 00:01:26,909
background a first I've worked at an

00:01:25,290 --> 00:01:28,680
advertising agency as a software

00:01:26,909 --> 00:01:30,689
development then I've worked at a

00:01:28,680 --> 00:01:33,600
high-performance computing lab so like a

00:01:30,689 --> 00:01:36,060
super computing lab I built it was at my

00:01:33,600 --> 00:01:39,090
university I built the Hadoop cluster

00:01:36,060 --> 00:01:41,700
and then I've also worked at a daily

00:01:39,090 --> 00:01:44,100
newspaper as like a data journalist or

00:01:41,700 --> 00:01:46,560
more like gum actually the actual title

00:01:44,100 --> 00:01:48,840
was a editorial developer so it's like

00:01:46,560 --> 00:01:51,290
the program are helping the journalists

00:01:48,840 --> 00:01:53,820
get at what they're trying to get at

00:01:51,290 --> 00:01:56,399
other fun facts I've been part of a TV

00:01:53,820 --> 00:01:58,740
show I was like a hacker dude in like a

00:01:56,399 --> 00:02:01,649
show we had to catch people on the run

00:01:58,740 --> 00:02:05,939
I've also done a project with some some

00:02:01,649 --> 00:02:09,989
Syrian journalists trying to UM get back

00:02:05,939 --> 00:02:12,239
at a peaceful Syria and they all in

00:02:09,989 --> 00:02:13,620
exile in Istanbul that was pretty

00:02:12,239 --> 00:02:16,680
interesting as well

00:02:13,620 --> 00:02:22,200
and I'm also a shark attack survivor so

00:02:16,680 --> 00:02:27,379
that's just one big okay first theme on

00:02:22,200 --> 00:02:29,400
the menu decoupling so decoupling is a

00:02:27,379 --> 00:02:33,180
computer software engineering term it

00:02:29,400 --> 00:02:35,420
means to take a program and try and pull

00:02:33,180 --> 00:02:39,360
it apart so it's easier to reason about

00:02:35,420 --> 00:02:41,849
so in our contrast is pretty bad in here

00:02:39,360 --> 00:02:43,170
but in CV here we have like a kind of

00:02:41,849 --> 00:02:46,290
shortest program it's pretty easy to see

00:02:43,170 --> 00:02:49,049
what's going on or like get the overview

00:02:46,290 --> 00:02:50,700
of what's actually going on if you came

00:02:49,049 --> 00:02:52,290
into this protein into a project that

00:02:50,700 --> 00:02:54,000
had this code it would be pretty easy to

00:02:52,290 --> 00:02:56,250
figure out what was going on because

00:02:54,000 --> 00:02:57,959
there's not that much to it but then

00:02:56,250 --> 00:02:59,190
over time you expand your analysis and

00:02:57,959 --> 00:03:02,310
suddenly you're doing more modeling

00:02:59,190 --> 00:03:03,810
inside your your project and over time

00:03:02,310 --> 00:03:05,879
it just builds and builds and I mean now

00:03:03,810 --> 00:03:08,790
starting to get oh well now it's at a

00:03:05,879 --> 00:03:10,019
place where it's there's so much stuff

00:03:08,790 --> 00:03:12,030
going on like I mean you can't even see

00:03:10,019 --> 00:03:14,209
it on the screen right so what can we do

00:03:12,030 --> 00:03:16,980
about like I mean it gets messy right um

00:03:14,209 --> 00:03:19,410
doesn't scale well a scale well for

00:03:16,980 --> 00:03:22,709
human memory a one thing that Hillary

00:03:19,410 --> 00:03:25,139
also talked about was that human errors

00:03:22,709 --> 00:03:28,560
are going to happen so we have to try

00:03:25,139 --> 00:03:32,480
and build a process around how to rent

00:03:28,560 --> 00:03:35,190
these errors and I know of one that and

00:03:32,480 --> 00:03:36,720
you come back at a project just even a

00:03:35,190 --> 00:03:40,669
month after and you have no idea what's

00:03:36,720 --> 00:03:42,810
going on so how can we work around this

00:03:40,669 --> 00:03:43,949
we can use something from social

00:03:42,810 --> 00:03:48,329
engineering something called the UNIX

00:03:43,949 --> 00:03:50,669
philosophy it's kind of like the 10

00:03:48,329 --> 00:03:53,430
commandments of of software engineering

00:03:50,669 --> 00:03:55,470
it's a it's a philosophy developed in I

00:03:53,430 --> 00:03:58,680
think the 60s at build apps the first

00:03:55,470 --> 00:04:00,329
people are doing like a timeshare drill

00:03:58,680 --> 00:04:01,709
general purpose computer and they are

00:04:00,329 --> 00:04:04,709
developing an operating system called

00:04:01,709 --> 00:04:08,280
Linux UNIX we're still living with the

00:04:04,709 --> 00:04:12,480
legacy there's a unique legacy inside

00:04:08,280 --> 00:04:16,289
the Mac OS X or Mac OS there's a Linux

00:04:12,480 --> 00:04:18,750
is also a UNIX derivative and FreeBSD

00:04:16,289 --> 00:04:21,030
and all these still live by the

00:04:18,750 --> 00:04:25,560
principles of the UNIX philosophy in

00:04:21,030 --> 00:04:27,740
contrast to the way that windows have

00:04:25,560 --> 00:04:27,740
gone

00:04:28,280 --> 00:04:33,539
so what is the UNIX philosophy it's a

00:04:31,379 --> 00:04:35,580
program to do one thing and do it well

00:04:33,539 --> 00:04:37,919
so often you get these small programs

00:04:35,580 --> 00:04:40,319
that are easy to reason about it's about

00:04:37,919 --> 00:04:43,080
two writing programs that can work

00:04:40,319 --> 00:04:44,909
together so you can take simple

00:04:43,080 --> 00:04:48,270
operations and compose them into more

00:04:44,909 --> 00:04:50,370
complicated operations and like the

00:04:48,270 --> 00:04:53,520
third third tenant is to have programs

00:04:50,370 --> 00:04:54,870
that work with with text streams which

00:04:53,520 --> 00:05:00,300
is something we're going to ignore in

00:04:54,870 --> 00:05:03,630
the way I do things so we have this huge

00:05:00,300 --> 00:05:05,909
program just one big a file called data

00:05:03,630 --> 00:05:07,620
analysis that are and what we're going

00:05:05,909 --> 00:05:09,810
to do this is we're going to build this

00:05:07,620 --> 00:05:12,090
graph it's a directed graph so like you

00:05:09,810 --> 00:05:16,110
have these small programs that all do

00:05:12,090 --> 00:05:18,690
one little task and well and you compose

00:05:16,110 --> 00:05:21,389
them together into like this directed

00:05:18,690 --> 00:05:25,080
graph and the wave these programs talk

00:05:21,389 --> 00:05:27,719
with each other is through exporting

00:05:25,080 --> 00:05:30,330
data so you have a very clear contract

00:05:27,719 --> 00:05:33,020
between what's the output of one program

00:05:30,330 --> 00:05:36,240
and what's the input of another program

00:05:33,020 --> 00:05:39,270
so this is a the example project and I

00:05:36,240 --> 00:05:42,029
put in the abstract so we have a it's a

00:05:39,270 --> 00:05:45,930
project about indoor climate at my

00:05:42,029 --> 00:05:48,900
University and it has a couple parts to

00:05:45,930 --> 00:05:51,840
it it has a crawler for going gathering

00:05:48,900 --> 00:05:53,819
weather data data then it has a import

00:05:51,840 --> 00:05:55,740
scripts so that's like you're you're

00:05:53,819 --> 00:05:57,630
stuck your ETL script like cleaning up

00:05:55,740 --> 00:06:01,650
the data and putting it back into a

00:05:57,630 --> 00:06:04,319
format that you can actually use then it

00:06:01,650 --> 00:06:06,569
has like a model a demain model taking

00:06:04,319 --> 00:06:09,569
this this data from the weather data and

00:06:06,569 --> 00:06:11,669
then they imported readings from the

00:06:09,569 --> 00:06:15,719
buildings and building this domain model

00:06:11,669 --> 00:06:19,889
and instead of this domain model file

00:06:15,719 --> 00:06:21,870
being like one huge script that does the

00:06:19,889 --> 00:06:23,370
the different types of models we

00:06:21,870 --> 00:06:25,949
exploring and does all the plotting and

00:06:23,370 --> 00:06:27,449
exports like all the CSV and JSON files

00:06:25,949 --> 00:06:32,039
for other people to work with we

00:06:27,449 --> 00:06:34,680
decompose it so how to do that so in our

00:06:32,039 --> 00:06:38,849
we have these two functions called load

00:06:34,680 --> 00:06:39,920
and save and this is basically going to

00:06:38,849 --> 00:06:42,140
be the

00:06:39,920 --> 00:06:44,660
put and the output of these small

00:06:42,140 --> 00:06:47,180
programs the load function will read our

00:06:44,660 --> 00:06:51,770
data file and whatever variables you put

00:06:47,180 --> 00:06:54,170
into that 8 out of 8 data file will

00:06:51,770 --> 00:06:56,150
appear in your environment when you run

00:06:54,170 --> 00:06:57,230
the command and you can also save

00:06:56,150 --> 00:07:00,050
commands which is going to be the output

00:06:57,230 --> 00:07:03,050
so here this is from the domain model in

00:07:00,050 --> 00:07:04,940
there our file you can see that we

00:07:03,050 --> 00:07:07,340
export the the weather model and we have

00:07:04,940 --> 00:07:09,170
the energy model and which is data

00:07:07,340 --> 00:07:11,960
frames and then we also have like an

00:07:09,170 --> 00:07:16,430
axillary building vector and we write it

00:07:11,960 --> 00:07:21,920
to a file in the a data directory so now

00:07:16,430 --> 00:07:23,240
in the contract between the programs how

00:07:21,920 --> 00:07:24,770
the programs communicate together how

00:07:23,240 --> 00:07:26,330
you can like how you build your big

00:07:24,770 --> 00:07:32,390
analysis is going to be through these

00:07:26,330 --> 00:07:35,420
eight data files you get a couple of

00:07:32,390 --> 00:07:36,980
nice things from this your programs

00:07:35,420 --> 00:07:38,750
become much smaller all you have to

00:07:36,980 --> 00:07:40,970
reason it like before when you have a

00:07:38,750 --> 00:07:42,800
like a huge our data program you would

00:07:40,970 --> 00:07:45,050
have to reason about the whole program

00:07:42,800 --> 00:07:46,550
at once so you often have a lot of

00:07:45,050 --> 00:07:47,930
global variables that are all

00:07:46,550 --> 00:07:50,990
intermediate steps and your analysis

00:07:47,930 --> 00:07:53,060
well when you take your thing take your

00:07:50,990 --> 00:07:55,250
variables pick out the important ones

00:07:53,060 --> 00:07:56,690
and export them into our data files you

00:07:55,250 --> 00:07:59,210
now only have to reason about a very

00:07:56,690 --> 00:08:00,740
small set of variables so that makes it

00:07:59,210 --> 00:08:02,780
much easier for new people to come into

00:08:00,740 --> 00:08:05,210
the project or for yourself to come back

00:08:02,780 --> 00:08:06,980
into the project after a month you also

00:08:05,210 --> 00:08:08,720
get some other nice things from having

00:08:06,980 --> 00:08:10,610
from using this technique of having

00:08:08,720 --> 00:08:13,280
intermediate files that save the data

00:08:10,610 --> 00:08:16,460
and you can check find your capitation

00:08:13,280 --> 00:08:18,410
so for this analysis of the the indoor

00:08:16,460 --> 00:08:22,460
climate I was running a pretty hefty

00:08:18,410 --> 00:08:24,860
time series model that took like eight

00:08:22,460 --> 00:08:27,320
hours to run on my macbook and you don't

00:08:24,860 --> 00:08:29,480
want to do that too often so you run the

00:08:27,320 --> 00:08:31,340
analysis once right through the a data

00:08:29,480 --> 00:08:35,870
file and now you have the results to

00:08:31,340 --> 00:08:39,320
continual analysis and the analysis also

00:08:35,870 --> 00:08:41,570
becomes reproducible in some sense with

00:08:39,320 --> 00:08:42,620
some serviettes it's reproducible in the

00:08:41,570 --> 00:08:45,290
way that you could share the

00:08:42,620 --> 00:08:47,690
intermediate results or with your

00:08:45,290 --> 00:08:51,290
collaborators and you have the same

00:08:47,690 --> 00:08:52,580
starting point another property it's a

00:08:51,290 --> 00:08:56,390
fancy word

00:08:52,580 --> 00:08:58,700
how to pronounce again add impotant it

00:08:56,390 --> 00:09:00,560
just means that oh well if that's how

00:08:58,700 --> 00:09:02,060
your program should behave that if you

00:09:00,560 --> 00:09:03,560
run the program again and again it

00:09:02,060 --> 00:09:05,270
should always give the same our data

00:09:03,560 --> 00:09:06,830
file unless of course you change the

00:09:05,270 --> 00:09:13,310
inputs or you change the code to

00:09:06,830 --> 00:09:16,660
transform say the input data one problem

00:09:13,310 --> 00:09:20,030
though with with this graph is that okay

00:09:16,660 --> 00:09:22,520
so a new person comes into the project

00:09:20,030 --> 00:09:24,050
and they have to figure out what the

00:09:22,520 --> 00:09:25,550
relationship is between all the our

00:09:24,050 --> 00:09:29,150
files and they have to figure out to run

00:09:25,550 --> 00:09:30,620
the our files in the right sequence to

00:09:29,150 --> 00:09:33,740
the model to actually work because now

00:09:30,620 --> 00:09:36,860
the dependency is no longer on your csv

00:09:33,740 --> 00:09:41,380
files or json files or web services the

00:09:36,860 --> 00:09:41,380
dependencies are now on the a data files

00:09:41,740 --> 00:09:47,270
turns out it's pretty easy to solve or

00:09:44,300 --> 00:09:49,520
it's been solved for like what 50 years

00:09:47,270 --> 00:09:55,900
now we can use a tool called make or

00:09:49,520 --> 00:09:55,900
make files so so a make file is a is a

00:09:56,440 --> 00:10:02,060
task runner or like a declarative wave

00:09:59,960 --> 00:10:05,150
to say these files come from these

00:10:02,060 --> 00:10:08,230
commands and and that way you can like

00:10:05,150 --> 00:10:11,330
automate this whole graph so this is a

00:10:08,230 --> 00:10:14,570
sample a file you have something called

00:10:11,330 --> 00:10:17,690
targets targets define a output and

00:10:14,570 --> 00:10:22,270
depend on inputs and then you can run

00:10:17,690 --> 00:10:26,660
whatever commands under these targets so

00:10:22,270 --> 00:10:28,040
the cool thing with this is that you

00:10:26,660 --> 00:10:29,660
have total freedom so you could run

00:10:28,040 --> 00:10:32,960
without whatever commands you want here

00:10:29,660 --> 00:10:35,210
this applies to what whether you're

00:10:32,960 --> 00:10:36,860
doing Python or R are you doing batch

00:10:35,210 --> 00:10:41,630
scripts in between you and also steps

00:10:36,860 --> 00:10:43,580
this applies to to all those and it also

00:10:41,630 --> 00:10:45,680
has another couple of nice properties

00:10:43,580 --> 00:10:47,870
I'm going to get to in a minute but you

00:10:45,680 --> 00:10:50,210
can compose these targets so now you can

00:10:47,870 --> 00:10:54,590
start to build this graph of how things

00:10:50,210 --> 00:10:56,420
work together in your program it also

00:10:54,590 --> 00:10:59,710
has a nice property that if any of your

00:10:56,420 --> 00:11:02,660
inputs to your targets change then in

00:10:59,710 --> 00:11:05,780
only the targets that changed run will

00:11:02,660 --> 00:11:06,259
update for you so in this is example a

00:11:05,780 --> 00:11:09,350
fry

00:11:06,259 --> 00:11:13,040
from the project at the top we have the

00:11:09,350 --> 00:11:15,439
Kroll RDA data that I am we had on the

00:11:13,040 --> 00:11:16,910
graph before it defines its input so its

00:11:15,439 --> 00:11:18,470
input to this target is actually our

00:11:16,910 --> 00:11:19,749
script so the program that we're going

00:11:18,470 --> 00:11:23,329
to run and you can see that I have the

00:11:19,749 --> 00:11:26,419
command for for running a our file from

00:11:23,329 --> 00:11:29,629
the terminal then we define the next

00:11:26,419 --> 00:11:31,699
target which is the kind of like the

00:11:29,629 --> 00:11:34,850
first one it's just the yellow step of

00:11:31,699 --> 00:11:36,679
the graph and in the end we have the

00:11:34,850 --> 00:11:39,709
more advanced target where we have the

00:11:36,679 --> 00:11:43,069
the model and it depends on the to our

00:11:39,709 --> 00:11:45,559
data files and on the domain model arr

00:11:43,069 --> 00:11:49,579
so the cool thing now is that if I ever

00:11:45,559 --> 00:11:51,289
change the import script then a make

00:11:49,579 --> 00:11:53,269
will go and look at your file system and

00:11:51,289 --> 00:11:55,699
it will realize that ok I'm missing the

00:11:53,269 --> 00:11:57,169
of the important a script which is the

00:11:55,699 --> 00:11:58,910
dependency of the our data file has

00:11:57,169 --> 00:12:01,910
changed so I can just go in and run

00:11:58,910 --> 00:12:03,769
those pieces that are missing or if I've

00:12:01,910 --> 00:12:05,689
never had this project on my computer

00:12:03,769 --> 00:12:07,609
before I just cloned it from github ogre

00:12:05,689 --> 00:12:11,149
from a colleague and I'm trying to get

00:12:07,609 --> 00:12:12,619
at the the model that our data file make

00:12:11,149 --> 00:12:14,569
will go in and it will look at the

00:12:12,619 --> 00:12:16,309
dependencies and will figure out ok what

00:12:14,569 --> 00:12:17,949
are the targets do I need to run in

00:12:16,309 --> 00:12:20,359
order to be able to generate this file

00:12:17,949 --> 00:12:23,480
so that way you have like a manifest of

00:12:20,359 --> 00:12:26,449
how to build your whole project and no

00:12:23,480 --> 00:12:30,439
one needs to run the our data files in a

00:12:26,449 --> 00:12:34,579
specific sequence it's proven technology

00:12:30,439 --> 00:12:36,739
so like I said it's a this was built

00:12:34,579 --> 00:12:39,470
before my mom was born so it has like a

00:12:36,739 --> 00:12:41,359
pretty good track record it's still

00:12:39,470 --> 00:12:43,970
state-of-the-art so if you ever worked

00:12:41,359 --> 00:12:45,199
with any may be done scientific

00:12:43,970 --> 00:12:48,439
computing where you've done something in

00:12:45,199 --> 00:12:51,379
C or C++ then you probably ran a make

00:12:48,439 --> 00:12:53,209
file to build that project and the make

00:12:51,379 --> 00:12:55,789
laws are totally underrated because you

00:12:53,209 --> 00:12:58,489
can use it for any project um in my

00:12:55,789 --> 00:13:00,949
daily work I usually work on fronted

00:12:58,489 --> 00:13:02,569
JavaScript and if any of you have ever

00:13:00,949 --> 00:13:04,159
like have worked with front-end

00:13:02,569 --> 00:13:06,139
JavaScript in the last couple of years

00:13:04,159 --> 00:13:08,449
then you probably had to install like a

00:13:06,139 --> 00:13:11,029
whole sleeve of task runners that would

00:13:08,449 --> 00:13:12,409
manage your project for you well make

00:13:11,029 --> 00:13:14,329
has been around for 40 years and these

00:13:12,409 --> 00:13:17,149
guys are just reinventing the wheel in

00:13:14,329 --> 00:13:19,670
my opinion so here we have a more

00:13:17,149 --> 00:13:21,410
comprehensive our file from all

00:13:19,670 --> 00:13:24,830
or make valve from the from the projects

00:13:21,410 --> 00:13:25,880
I have a convenience export targeted it

00:13:24,830 --> 00:13:28,460
up you can see it doesn't have any

00:13:25,880 --> 00:13:31,070
commands it just defines what what

00:13:28,460 --> 00:13:33,650
inputs does it need to do like does it

00:13:31,070 --> 00:13:35,900
require to run the export target so that

00:13:33,650 --> 00:13:37,940
means I can from my terminal I can type

00:13:35,900 --> 00:13:40,550
make export it will go in and it will

00:13:37,940 --> 00:13:42,260
figure out how to fulfill those

00:13:40,550 --> 00:13:44,780
requirements by passing the rest of the

00:13:42,260 --> 00:13:46,670
file you can also see I have a clean

00:13:44,780 --> 00:13:49,970
target the clean target is but the

00:13:46,670 --> 00:13:52,850
leading all is intermediate our data

00:13:49,970 --> 00:13:54,500
files it's very important that you can

00:13:52,850 --> 00:13:56,570
start over from any point in time so you

00:13:54,500 --> 00:13:58,880
should be able to delete all the these

00:13:56,570 --> 00:14:01,220
intermediate data files and reconstruct

00:13:58,880 --> 00:14:04,070
them again I mean that's the whole point

00:14:01,220 --> 00:14:06,230
of being reproducible right so and then

00:14:04,070 --> 00:14:09,620
it has some some other some other stuff

00:14:06,230 --> 00:14:11,720
in here as well right so yeah that's the

00:14:09,620 --> 00:14:14,060
command that usually run if I came into

00:14:11,720 --> 00:14:15,830
the project and to like build the whole

00:14:14,060 --> 00:14:18,320
project I'll just run the did make

00:14:15,830 --> 00:14:21,620
export which is the top bits up command

00:14:18,320 --> 00:14:23,530
and if I get into a bad state so some of

00:14:21,620 --> 00:14:26,720
my programs start to behave in

00:14:23,530 --> 00:14:28,490
unexpected way and probably because I

00:14:26,720 --> 00:14:30,580
messed up one of the files I will just

00:14:28,490 --> 00:14:35,870
clean it all out they leave it all and

00:14:30,580 --> 00:14:40,880
explore it all over again I'm not going

00:14:35,870 --> 00:14:45,070
to time okay it's just a just one

00:14:40,880 --> 00:14:46,760
assumption in all this something that

00:14:45,070 --> 00:14:49,340
from a computer science physics

00:14:46,760 --> 00:14:53,780
perspective we call pure functions so

00:14:49,340 --> 00:14:58,610
the thing with all this this this graph

00:14:53,780 --> 00:15:01,850
I showed is that this the main models

00:14:58,610 --> 00:15:04,070
that are can only depend on the input

00:15:01,850 --> 00:15:06,680
size you give it if it depends on

00:15:04,070 --> 00:15:09,860
randomness or it depends on the time of

00:15:06,680 --> 00:15:12,620
the day or it goes out and talks to a

00:15:09,860 --> 00:15:14,840
web service or something like that then

00:15:12,620 --> 00:15:16,280
the amount like this way of computing

00:15:14,840 --> 00:15:18,560
your models doesn't work anymore because

00:15:16,280 --> 00:15:21,230
then you have inputs that are not

00:15:18,560 --> 00:15:23,470
explicit it doesn't matter over here or

00:15:21,230 --> 00:15:25,940
well it does matter over here but it

00:15:23,470 --> 00:15:29,180
because this is the start of your your

00:15:25,940 --> 00:15:31,250
pipeline you have to get input from

00:15:29,180 --> 00:15:32,699
somewhere otherwise your program doesn't

00:15:31,250 --> 00:15:38,559
really do anything

00:15:32,699 --> 00:15:42,220
so I'll just show quickly pure functions

00:15:38,559 --> 00:15:46,209
so here we have a function from the

00:15:42,220 --> 00:15:48,369
project it's a so the project collects

00:15:46,209 --> 00:15:50,079
data from these energy centers around

00:15:48,369 --> 00:15:52,059
different buildings at the University

00:15:50,079 --> 00:15:53,379
and you can see we have a lot of stuff

00:15:52,059 --> 00:15:58,509
going on here the first couple of lines

00:15:53,379 --> 00:16:00,519
are they are making the URL to go and

00:15:58,509 --> 00:16:02,889
talk to a web service then we go and

00:16:00,519 --> 00:16:04,749
fetch that or URL and we pass the JSON

00:16:02,889 --> 00:16:06,730
that comes back and then we go and

00:16:04,749 --> 00:16:09,730
format some of the the data that comes

00:16:06,730 --> 00:16:14,259
back to the right type in our and then

00:16:09,730 --> 00:16:16,509
return the data but this function has a

00:16:14,259 --> 00:16:19,029
couple of issues in my opinion because

00:16:16,509 --> 00:16:22,209
this is not a pure function we have the

00:16:19,029 --> 00:16:23,559
inputs are shown at the top but we

00:16:22,209 --> 00:16:26,290
actually have another input to this

00:16:23,559 --> 00:16:28,689
function as well that's not explicit and

00:16:26,290 --> 00:16:30,519
that's this function here because this

00:16:28,689 --> 00:16:34,660
function is what you'd call a side

00:16:30,519 --> 00:16:38,559
effect it it goes and talks to the web

00:16:34,660 --> 00:16:41,139
service and it's alright to encapsulate

00:16:38,559 --> 00:16:42,639
this kind of logic but then this is no

00:16:41,139 --> 00:16:44,740
longer pure function and we can no

00:16:42,639 --> 00:16:47,470
longer depend on this function to always

00:16:44,740 --> 00:16:52,990
give the same result give them the same

00:16:47,470 --> 00:16:54,759
inputs so M for a function to be pure

00:16:52,990 --> 00:16:57,519
for function to be reliable to be

00:16:54,759 --> 00:16:59,679
reproducible it has to fulfill these

00:16:57,519 --> 00:17:02,620
properties it has to has no side effect

00:16:59,679 --> 00:17:05,380
so you can't go and change a data frame

00:17:02,620 --> 00:17:09,850
that you pass in that has to be explicit

00:17:05,380 --> 00:17:11,409
you so that's a doing no state mutations

00:17:09,850 --> 00:17:13,209
you can also no side-effects that also

00:17:11,409 --> 00:17:14,559
means that you cannot go and fetch a

00:17:13,209 --> 00:17:16,539
random number from a random number

00:17:14,559 --> 00:17:21,100
generator that is something you have to

00:17:16,539 --> 00:17:23,470
pass in as a explicit input and the

00:17:21,100 --> 00:17:28,120
output should be directly the variable

00:17:23,470 --> 00:17:32,230
from the input so here's a rewrite of

00:17:28,120 --> 00:17:33,730
the function in it might seem very

00:17:32,230 --> 00:17:36,010
pedantic to just take the whole thing

00:17:33,730 --> 00:17:39,700
and clear and path for these reasons but

00:17:36,010 --> 00:17:41,679
then the the program is a lot easier to

00:17:39,700 --> 00:17:43,480
reason about when you have a at the top

00:17:41,679 --> 00:17:44,950
we have a function to format the URL so

00:17:43,480 --> 00:17:46,720
the first part of the of the last

00:17:44,950 --> 00:17:49,409
function show

00:17:46,720 --> 00:17:52,149
so we do that here read out the the URL

00:17:49,409 --> 00:17:54,220
then we go and do the side effect we go

00:17:52,149 --> 00:17:58,200
and fetched from the web service and

00:17:54,220 --> 00:18:00,220
then we have a second function which

00:17:58,200 --> 00:18:02,259
actually doesn't change the data frame

00:18:00,220 --> 00:18:03,669
so we pass in a piece of the data we are

00:18:02,259 --> 00:18:06,519
very explicit about the piece of data we

00:18:03,669 --> 00:18:08,799
pass in um it goes and updates or in

00:18:06,519 --> 00:18:12,220
returns it and we do the mutation we do

00:18:08,799 --> 00:18:15,370
the change outside the function because

00:18:12,220 --> 00:18:18,039
that way we always know where the state

00:18:15,370 --> 00:18:19,769
changes on so I mean of course you could

00:18:18,039 --> 00:18:22,450
just this would be inside one of the

00:18:19,769 --> 00:18:25,750
initial our files in in the dependency

00:18:22,450 --> 00:18:28,120
graph but here we are very explicit

00:18:25,750 --> 00:18:30,190
about where we change stuff and that way

00:18:28,120 --> 00:18:33,009
the program becomes really easier to

00:18:30,190 --> 00:18:37,240
reason about and you can you can know

00:18:33,009 --> 00:18:39,370
that there's nothing going on and inside

00:18:37,240 --> 00:18:44,019
any of the functions that will modify

00:18:39,370 --> 00:18:47,289
your state and that was actually kind of

00:18:44,019 --> 00:18:48,370
what I have um so I mean that leaves

00:18:47,289 --> 00:18:51,460
plenty of time for questions

00:18:48,370 --> 00:18:54,090
I guess if anybody has questions we have

00:18:51,460 --> 00:18:54,090
five minutes right

00:18:58,720 --> 00:19:08,600
[Applause]

00:19:03,800 --> 00:19:11,600
[Music]

00:19:08,600 --> 00:19:11,600

YouTube URL: https://www.youtube.com/watch?v=nGCxq4sXqkY


