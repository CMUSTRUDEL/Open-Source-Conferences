Title: Grant Vousden-Dishington - Using GitHub Actions to Accelerate your Data Efforts
Publication date: 2021-05-19
Playlist: CSVConf 2021
Description: 
	Data science work often requires computing resources that isn’t available to practitioners from disadvantaged backgrounds or located in “data deserts” with low technology access. Cloud computing is an option in such situations but can be costly and not friendly to beginners who don’t know what infrastructure to pick. Most of the data science community thinks of GitHub as only a code storage repository with some management features, but GitHub Actions provide a powerful and often free resource for computing that can perform many data collection and analysis needs. This introduction to GitHub Actions will provide an overview of everything needed for GitHub users to get started applying GitHub Actions to their projects. We’ll see both simple and advanced examples of the YAML format that controls various workflows and how it ties into traditional data science needs, like testing and automation. Time permitting, we’ll also see how these workflows can be used for special applications, such as open source intelligence and machine learning.
Captions: 
	00:00:03,440 --> 00:00:08,160
Hi, everybody. I'm happy to be here today.  My name is Grant, and I'll be presenting on  

00:00:09,360 --> 00:00:20,240
a cool utility for any of you that do code work.  This is my first time participating in csv,conf.  

00:00:21,360 --> 00:00:25,120
This is my first presentation in quite some time,  but I'm really, really looking forward to it. 

00:00:26,480 --> 00:00:34,320
With that, you should be able to see my slides.  Let me just get my speaker view up here. I'll  

00:00:34,320 --> 00:00:39,760
take it from here. Yeah. I'm going to be talking  today about "Using GitHub Actions to Accelerate  

00:00:39,760 --> 00:00:44,400
Your Data Efforts." If you haven't heard of GitHub  Actions before, don't worry. I will cover that.  

00:00:46,640 --> 00:00:50,800
This is something that I'm kind of doing on a  personal note, not really related to my job.  

00:00:51,440 --> 00:00:57,760
I see so few people making use of it  when it is an incredibly underrated tool,  

00:00:57,760 --> 00:01:03,120
so I'm hoping by sharing it with all of you  today you'll have something new in your tool set. 

00:01:03,920 --> 00:01:10,400
Before we get into that, just a little bit  about me. In case my video in the corner is too  

00:01:10,400 --> 00:01:17,360
small here, there's a slightly larger photo of me.  Although, a bit out of date. To give you a little  

00:01:17,360 --> 00:01:24,320
bit more info on where and who I am, I am coming  to you live from sunny San Diego, California,  

00:01:24,320 --> 00:01:35,680
home territory of the Kumeyaay people. I  lived here prior to now. Right now, I'm a  

00:01:35,680 --> 00:01:46,400
research software engineer at the antidefamation  League. That's where I do a lot of data science  

00:01:48,720 --> 00:01:56,480
related to social media and online hate speech,  especially how to make there be less of it online,  

00:01:57,520 --> 00:02:01,600
but I'm not really giving a talk today  about my work or my organization,  

00:02:01,600 --> 00:02:08,240
so we won't be hearing about that terrible stuff. I put together this talk kind of on my own time,  

00:02:09,680 --> 00:02:14,320
but I will, after this talk, be sharing a  fellowship opportunity that some of you may  

00:02:14,320 --> 00:02:21,040
be interested in over on my Twitter. I encourage  you to sort of check that out later. If you want  

00:02:21,040 --> 00:02:26,240
to be able to contact me here, here are a few of  my socials. Twitter is one of the easiest ways to  

00:02:26,240 --> 00:02:31,760
reach me. You can find me on GitHub. I'm aware  my email may be blocked in the lower left‑hand  

00:02:31,760 --> 00:02:47,280
corner. Prior to that, I was a Ph.D. dropout. I  was doing a lot of engineering and neuroscience.  

00:02:49,440 --> 00:02:54,560
Before that, I was a graduate in computer science  philosophy and engineering from University of  

00:02:54,560 --> 00:03:02,400
Irvine. I was interested in far too many things. Without further ado, the first step to sort of  

00:03:02,400 --> 00:03:14,480
understanding how you use GitHub Actions is to  understand what is a GitHub action. I'll show  

00:03:15,120 --> 00:03:18,880
you. I apologize if you can hear the airplane  noise in the background. It will pass quickly. 

00:03:20,800 --> 00:03:26,400
If you've ever been on GitHub, you've  probably seen this toolbar before.  

00:03:28,160 --> 00:03:34,000
And you may have noticed it has a few options that  you rarely click on. In particular, you may notice  

00:03:34,000 --> 00:03:39,760
there's this button that says "actions" that  is probably less used than the issues and pull  

00:03:39,760 --> 00:03:48,400
request buttons that you're used to. In short,  a GitHub action is simply when a specified event  

00:03:48,400 --> 00:03:54,880
happens, GitHub will do computation for you. That  may sound a little bit strange because when most  

00:03:54,880 --> 00:04:00,080
people think of GitHub, they think of storage  and version control and using it to sort of  

00:04:00,640 --> 00:04:05,600
maintain projects. Sometimes they go as far  as using it for documentation and management.  

00:04:06,160 --> 00:04:12,400
But about a year and a half ago at the end of  2019, GitHub released these things called actions  

00:04:13,360 --> 00:04:19,280
that take GitHub's capabilities further. I  think they're very useful for the things that  

00:04:21,120 --> 00:04:27,680
you're probably familiar with but a bit beyond  that. It is meant to facilitate some of the more  

00:04:27,680 --> 00:04:35,760
traditional elements of software development,  like testing, automatically formatting code,  

00:04:35,760 --> 00:04:41,440
continuous integration, deployment, all those  sorts of usual things, but it's much more  

00:04:41,440 --> 00:04:45,040
flexible than that. That's kind of what I'm  going to be talking about a little bit today. 

00:04:46,320 --> 00:04:50,320
For the moment, beyond that, one of  the things that makes GitHub Actions  

00:04:50,960 --> 00:04:58,400
very cool is for private repositories, you  get 30 to 50 hours of free compute time  

00:04:58,400 --> 00:05:02,640
per month depending on which of the free  tier options you're in. You'll get more in  

00:05:03,200 --> 00:05:11,280
paid options. If you're using a public repository,  you have an unlimited amount of compute minutes  

00:05:11,280 --> 00:05:15,120
per month, if I'm understanding  GitHub's documentation correctly.  

00:05:15,760 --> 00:05:20,800
If you have a public or open‑source project,  you can basically make use of these utilities as  

00:05:20,800 --> 00:05:28,960
much as you'd like without much restriction.  When you factor in the ability to sort of run  

00:05:28,960 --> 00:05:35,680
any GitHub action for up to six hours at a time or  more, if you play your cards right, they become a  

00:05:35,680 --> 00:05:42,560
very powerful tool, especially if you have limited  compute resources elsewhere or you don't have a  

00:05:42,560 --> 00:05:48,000
very powerful computer or you don't have a lot of  time in one place with a computer at a given time. 

00:05:50,160 --> 00:05:59,760
GitHub action, to go through the anatomy of  it, the top‑level item is actually called a  

00:05:59,760 --> 00:06:07,120
workflow. They link several actions together.  There are kind of six pieces to the anatomy  

00:06:07,120 --> 00:06:14,880
of GitHub Actions that you need to understand.  There are events. Events can be chronological or  

00:06:15,520 --> 00:06:22,640
asynchronous. They can be initiated by a user or  an event online, which will trigger the action.  

00:06:23,200 --> 00:06:30,720
That triggers the workflow, which will kick  in as soon as the action is detected by  

00:06:32,000 --> 00:06:39,760
GitHub servers. Workflows are sequences of jobs.  A single workflow can handle multiple jobs, which,  

00:06:39,760 --> 00:06:46,160
as I mentioned before, may relate to you testing,  data collection, deployment, several other things.  

00:06:47,360 --> 00:06:53,840
Each job contains multiple steps towards  completion. Each step is broken down  

00:06:53,840 --> 00:07:01,360
into the eponymous actions. This is kind of where  the GitHub magic comes into play. I'll give you a  

00:07:01,360 --> 00:07:07,920
little bit of an explanation of what these actions  are as we get towards that. Finally, these actions  

00:07:07,920 --> 00:07:21,440
are executed by servers on GitHub's side called  runners. You have an overview, a bird's‑eye view,  

00:07:21,440 --> 00:07:28,480
of what GitHub Actions are composed of. I'll give  you an example of what a GitHub action actually  

00:07:28,480 --> 00:07:38,560
looks like under a repository. All GitHub Actions  are maintained using YAML format. It is relatively  

00:07:39,760 --> 00:07:48,320
easy to read, even if you haven't used it before. I'm going to go through it bit by bit. You have  

00:07:48,320 --> 00:07:55,200
an event on which the GitHub action executes.  In this case, this particular configuration is  

00:07:55,200 --> 00:07:59,680
set to execute whenever there's a push  to the repository that this is hosted on.  

00:08:00,480 --> 00:08:08,400
The workflow is basically the entire file, but it  has a name. In this case, I'm borrowing from the  

00:08:08,400 --> 00:08:14,640
introduction to GitHub Actions documentation on  the official GitHub website. The workflow is then  

00:08:14,640 --> 00:08:21,440
broken down further into jobs. In this case, this  workflow has only one job, which is to check a  

00:08:21,440 --> 00:08:29,680
version number of some sort. And then the rest of  it is broken down into steps where the four steps  

00:08:29,680 --> 00:08:36,480
involved here are checking out the repository's  code, setting up Node.js on the runner,  

00:08:37,200 --> 00:08:44,960
running install for the particular module that's  hosted in this repository, and then finally  

00:08:44,960 --> 00:08:52,400
running the code once npm has installed it. You  can break it down into each step, and you can see  

00:08:53,040 --> 00:08:58,080
what the steps are by looking at the dash  marks under the steps section of the YAML file.  

00:09:00,080 --> 00:09:07,120
Finally, the actions in question here are  particularly these two steps. When you see these  

00:09:07,120 --> 00:09:14,480
sort of actions/some name, that is usually a piece  of code that's hosted in the GitHub marketplace  

00:09:14,480 --> 00:09:21,440
to perform an action for you. The other two steps  are running the code that's written in the YAML  

00:09:21,440 --> 00:09:27,760
file. You can choose between using things that  other people have published or you can just sort  

00:09:27,760 --> 00:09:34,320
of write the raw code and have GitHub actions  sort of execute the code that you put right in  

00:09:34,320 --> 00:09:42,080
your file. Finally, the runner is specified a  little bit toward the top. You have a choice of  

00:09:42,080 --> 00:09:49,360
many operating systems, including various versions  of macOS, Windows. There's probably a few others.  

00:09:50,640 --> 00:09:57,440
I'm nearly always using Ubuntu latest version.  That's why this file is what I'm going with. 

00:10:00,320 --> 00:10:05,280
What triggers a workflow? What actually is  an event? What can you actually use this for?  

00:10:05,840 --> 00:10:12,080
You have a lot of options. One is that you can  schedule using timed events. You can run it every  

00:10:12,080 --> 00:10:19,680
so often or on certain dates and so on. The syntax  is very similar to cron jobs, if you've used  

00:10:23,920 --> 00:10:33,200
that before, C‑R‑O‑N. You can also fire off  manual events to trigger GitHub Actions.  

00:10:33,760 --> 00:10:38,320
That can be done through the user  interface on GitHub itself. If you go  

00:10:38,320 --> 00:10:44,320
through the actions tab I showed you  before and you specify a certain workflow,  

00:10:48,800 --> 00:10:53,920
you'll be able to sort of hit a button and have  code execute on call, which is really cool.  

00:10:54,800 --> 00:11:01,040
Finally, basically, any GitHub event that  you can think of can be used as an event  

00:11:01,040 --> 00:11:07,360
to trigger a workflow. That includes the pull  request. I'm sure many of you are familiar with  

00:11:07,360 --> 00:11:13,840
that. You can set it so when a pull request is  opened or signed or synchronized or reopened,  

00:11:15,920 --> 00:11:24,640
you can have GitHub Actions run on push to any  branch of your repository, and you're allowed to  

00:11:24,640 --> 00:11:33,360
select what branch triggers a workflow and which  ones do not. You can have them trigger by issues  

00:11:33,360 --> 00:11:40,960
opened or edited or replied to or closed. Any  attribute of GitHub you can name you can use as  

00:11:40,960 --> 00:11:46,880
a basis for triggering a GitHub action. There  are many others that you can look up as well. 

00:11:49,040 --> 00:11:55,280
What actions are available? There is a  GitHub marketplace. And as of this morning,  

00:11:55,280 --> 00:12:01,840
there are nearly 8300 actions available  to you in the GitHub Actions marketplace  

00:12:01,840 --> 00:12:08,320
that you can freely use in any of your code, so  I encourage you to go and look through it. You'll  

00:12:08,320 --> 00:12:17,520
probably find an action associated for any piece  of text that is commonly used or probably has  

00:12:18,320 --> 00:12:25,280
utilities in this marketplace. Some very common  actions, which you'll see over and over again,  

00:12:25,280 --> 00:12:33,040
are this checkout action, which is the one  that gets you code from your repository onto  

00:12:33,040 --> 00:12:40,480
the runner. It's executing this action. You'll  want to pay attention to the upload and download  

00:12:40,480 --> 00:12:48,720
artifact item. That will let you pass assets and  data between different jobs so you can preserve  

00:12:48,720 --> 00:12:52,800
some of the output of your computation  and reuse it later, if you want to.  

00:12:52,800 --> 00:12:58,320
That'll be very useful for some of your data,  data maintenance and data processing efforts. 

00:13:01,120 --> 00:13:08,080
By way of example, since we have a few minutes  left, I want to go with a more full example of a  

00:13:08,080 --> 00:13:14,960
GitHub workflow that I'm using for one of my  projects or that I'm making use of in my spare  

00:13:14,960 --> 00:13:21,760
time as well. In this case, we'll be testing a  piece of Python code. This is the full file. Don't  

00:13:21,760 --> 00:13:26,640
worry. We'll go through it step by step. This is  for a project that I affectionately refer to as  

00:13:26,640 --> 00:13:35,440
the data kitchen because it has many different  culinary tools for preparing and acquiring and  

00:13:35,440 --> 00:13:41,920
processing data. And so, it's going to be named  the kitchen testing suite. This is a moniker. It  

00:13:41,920 --> 00:13:48,720
doesn't actually represent any piece of executed  code. I want this piece of code to execute on both  

00:13:48,720 --> 00:13:53,920
pushes and pull requests. For a pull request,  I want to execute on every pull request.  

00:13:53,920 --> 00:13:58,560
But when it comes to pushes, I'm only going  to have this executed whenever there's a new  

00:13:58,560 --> 00:14:07,840
commitment to the main branch. It's only when they  try to put it in the main branch that I'm going to  

00:14:08,480 --> 00:14:14,480
be doubly sure it is passing all the tests. Moving on to the jobs, there's only one job  

00:14:14,480 --> 00:14:19,280
in this workflow, which is to run the test. One  of the things I'm going to make use of here that  

00:14:19,280 --> 00:14:25,360
I think is really cool is this thing called a  strategy matrix. What this does is I'm specifying  

00:14:26,000 --> 00:14:31,520
four operating systems and two versions of Python  because I don't want to just make sure it works  

00:14:31,520 --> 00:14:38,400
for whatever the latest Python version is. I  want to have compatibility for other versions.  

00:14:42,480 --> 00:14:50,400
I can test in various different environments.  Now that I've defined a matrix for these items ‑‑  

00:14:51,840 --> 00:14:55,280
are we coming up on time? >> You have five minutes left. 

00:14:55,280 --> 00:15:05,760
>> GRANT: We'll be through in a minute or two. You can specify this item will run on the  

00:15:05,760 --> 00:15:10,000
operating system specified in that  matrix by using the special syntax.  

00:15:10,000 --> 00:15:20,480
It's a dollar sign double curly braces. We  use the checkout action I defined earlier.  

00:15:20,480 --> 00:15:26,960
That puts my code into the runner so I can now  use it. I'm going to set up a version of Python  

00:15:26,960 --> 00:15:37,760
based on whatever part of the matrix it's in. In  this case, I invoked a matrix dot Python version.  

00:15:37,760 --> 00:15:43,280
That runner will now have Python installed,  specifically the version of Python I specify.  

00:15:44,400 --> 00:16:02,320
Then I'm going to use pip install and then pipenv.  Once that is installed, I can run a test by having  

00:16:02,320 --> 00:16:20,960
it install at the pipenv in the repository.  You can do similar things to execute data  

00:16:20,960 --> 00:16:26,640
science‑related jobs. That's just one example.  Unfortunately, I saw that's all we have time for.  

00:16:27,760 --> 00:16:32,160
Here again is the full code. You'll be welcome  to look at it after the presentation as well.  

00:16:32,880 --> 00:16:37,840
If you want to learn more about GitHub Actions,  I highly recommend looking at the GitHub learning  

00:16:37,840 --> 00:16:46,000
labs. They have great learning tutorials for many  aspects of GitHub Actions. I recommend Helloworld.  

00:16:50,080 --> 00:16:57,280
Other data resources you might want to check out  is this blog and repository for the person who  

00:16:57,840 --> 00:17:04,080
inspired me to make this talk in the first place.  He has a project where you can actually deploy  

00:17:04,080 --> 00:17:14,080
and train a model using entirely GitHub Actions.  It's a small model, but you can still use it and  

00:17:14,080 --> 00:17:18,800
you don't have to have a powerful computer to  get it started. You just need to write up the  

00:17:19,360 --> 00:17:25,200
YAML files and GitHub Actions will handle  the rest. I highly recommend looking into the  

00:17:25,200 --> 00:17:33,040
Debugging Actions. If you do any amount of coding,  you'll eventually need to learn how to debug. If  

00:17:33,040 --> 00:17:38,000
you're wondering how to debug something that gets  automatically triggered on somebody else's server,  

00:17:38,560 --> 00:17:40,640
this is the GitHub action you'll want to look at. 

00:17:41,920 --> 00:17:46,880
I'll let you go off on your separate  ways. Hopefully you'll find GitHub Actions  

00:17:46,880 --> 00:17:51,760

YouTube URL: https://www.youtube.com/watch?v=0WYpiba-UjE


