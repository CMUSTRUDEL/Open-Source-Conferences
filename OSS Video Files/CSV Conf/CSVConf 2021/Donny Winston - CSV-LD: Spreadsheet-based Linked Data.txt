Title: Donny Winston - CSV-LD: Spreadsheet-based Linked Data
Publication date: 2021-05-19
Playlist: CSVConf 2021
Description: 
	Comma-separated-values (CSV) is a useful data serialization and sharing format. This talk introduces the idea of CSV-LD as a CSV-based format to serialize Linked Data, mirroring the way that JSON-LD is a JSON-based format to serialize Linked Data. "CSV" here includes any dialect that uses a different delimiter, such as tab-separated-values (TSV). The syntax of CSV-LD is designed to easily integrate into workflows that already use CSV, and provides a smooth upgrade path from CSV to CSV-LD. It is primarily intended to be a way to use Linked Data as part of spreadsheet-based data entry; to facilitate data validation, display, and conversion of CSV into other formats via use of CSV on the Web (CSVW) metadata; and to build FAIR data services. The term "CSV-LD" was previously used to describe a now-obsoleted precursor to the CSVW specifications; both approaches require a second file, a JSON-LD template document, to be shared along with a CSV file. The approach described here, in contrast, requires only a CSV file from the data producer, one that includes links to CSVW-powered metadata.
Captions: 
	00:00:01,760 --> 00:00:08,560
In this talk, I will introduce the idea and  practice of linked data. And have a way to  

00:00:08,560 --> 00:00:20,640
use linked data from a spreadsheet data entry.  Linked data is a formal way to identify context  

00:00:21,200 --> 00:00:30,320
within data. By formal, I meant that a machine  can find, a and interpret the context. A typical  

00:00:30,320 --> 00:00:35,920
read me file is not formal, a human can  read it and identify the sections that list  

00:00:35,920 --> 00:00:42,240
terms and the expected data types, for instance,  a machine will not be able to find this without  

00:00:42,240 --> 00:00:47,600
some guidance in the form of a custom program that  can parse the bespoke structure of a README file.  

00:00:49,280 --> 00:00:55,760
By context, I mean the context and relationships  needed to understand both the data's meaning  

00:00:55,760 --> 00:01:00,400
and the data's formatting. By within data, I mean,  

00:01:00,400 --> 00:01:07,360
within the same delivered artifact of the data  itself. Often the documentation for a data object  

00:01:07,360 --> 00:01:14,160
is not directly linked or provided in-line within  the data object. Even if this context is delivered  

00:01:14,160 --> 00:01:19,680
alongside the data object, for example, as  a README file in the same shared directly,  

00:01:20,400 --> 00:01:25,840
there is a risk that the data object will be  lifted and forwarded along without its sibling.  

00:01:27,680 --> 00:01:33,760
Sir Tim Berners-Lee's notes on linked data  gives the principle of the expectations.  

00:01:34,560 --> 00:01:44,000
First, use uniform resource identifiers, URIs,  as names for things. Second, use HTTP URIs so  

00:01:44,000 --> 00:01:51,280
that people can resolve these names with web  browsers. Third, when someone requests such a URI,  

00:01:51,280 --> 00:01:57,840
provide a formal response using the web standard  Resource Description Framework, or RDF. Finally,  

00:01:57,840 --> 00:02:04,000
your linked data should link to other  people's linked data to provide more context.  

00:02:04,000 --> 00:02:08,960
Just like our web documents link to other people's  web documents to provide additional context. 

00:02:12,240 --> 00:02:18,880
There are many standard serializations for linked  data. One is JSON-LD where the LD stands for  

00:02:18,880 --> 00:02:29,200
linked data. Using Jathan notation, or JSON, is  quite popular. The LD document is a JSON document  

00:02:29,200 --> 00:02:37,280
that includes the context. Here I show a JSON-LD  document. This is also shown at JSON-LD.org.  

00:02:38,080 --> 00:02:45,040
The document makes statements about a resource  offed bit value of the at ID key. That value  

00:02:45,040 --> 00:02:52,080
is a uniform resource identifier, or URI, under  a different domain space at the ddpedia domain  

00:02:55,360 --> 00:03:03,360
and at different places than the JSON.org. It  has another key context that links to the context  

00:03:03,360 --> 00:03:08,640
to help a human and their machine agents to  understand the meaning and formatting of the  

00:03:08,640 --> 00:03:16,640
JSON document. If we resolve the at context link,  we get a map of vocabulary terms to URIs that in  

00:03:16,640 --> 00:03:22,640
turn have more information. Our processer might  already know about XML schema data types and  

00:03:22,640 --> 00:03:28,400
doesn't need to follow that link to know what to  expect for date formatting. We see that the spouse  

00:03:28,400 --> 00:03:34,560
field is to be interpreted not as a general string  value, but as a URI given the at in the context.  

00:03:35,920 --> 00:03:42,160
JSON-LD is a great way to ensure that a JSON's  context travels with the data. Whether served  

00:03:42,160 --> 00:03:49,440
with a database like MongoDB, or a  request for data as JSON responses. 

00:03:51,440 --> 00:03:57,440
But we're not here for JSON. We're here for  spreadsheets. How can I power up my spreadsheet  

00:03:57,440 --> 00:04:06,400
to be linked data? CSV on the Web, or CSVW,  helps you build sidecars for spreadsheets.  

00:04:07,440 --> 00:04:13,840
The term side Jon car is a functional  addition. A motorcycle sidecar carries people.  

00:04:14,640 --> 00:04:25,040
Kubernetes carries pods of the main container  and so supports auxiliary work. Unstructured  

00:04:25,040 --> 00:04:30,240
documentation, for example, a typical  README file, is not a functional sidecar.  

00:04:31,520 --> 00:04:37,280
The World Wide Web Consortium's working  group published seven documents,  

00:04:37,280 --> 00:04:43,840
including a note on 25 identified use cases  and a primer on its effective use and practice.  

00:04:44,720 --> 00:04:48,560
For example, when serving  a CSV file like mydata.csv,  

00:04:49,280 --> 00:05:00,720
you can add metadata.JSON to the name and use  it to provide extra information about your data. 

00:05:03,520 --> 00:05:08,880
Before I elaborate on spreadsheet-based linked  data, I want to highlight the relationship  

00:05:08,880 --> 00:05:14,240
between linking and packaging. Linking and  packaging are complementary techniques.  

00:05:15,520 --> 00:05:20,480
With linked data, your entry point is the  data which links out to context and other  

00:05:20,480 --> 00:05:27,120
data. With data packages, your entry point is the  package which links in to the contains data and  

00:05:27,120 --> 00:05:33,680
its metadata. A great example of data packaging is  the frictionless data packaging of specifications.  

00:05:34,560 --> 00:05:39,760
Just like a Docker file can have a file system  and add an entry point to the resources,  

00:05:40,880 --> 00:05:45,520
it provides white glove  service to the data within.  

00:05:47,120 --> 00:05:52,880
When it comes to linking, links can be embedded  within the data, like with the at context field  

00:05:52,880 --> 00:06:01,040
of JSON-LD, or not embedded within the data as  is the case with CSVW sidecars, or link headers. 

00:06:03,760 --> 00:06:06,800
What could a standard for embedded  links do for spreadsheets?  

00:06:07,840 --> 00:06:15,360
Just like you can print out barcode labels for a  laboratory, you could mint them for the columns.  

00:06:16,320 --> 00:06:23,680
Instead or in addition to a header label that may  or may not be understood by a consumer. A barcode  

00:06:24,400 --> 00:06:34,080
would let them get the meaning and format of a  column. Many code editors have a go-to definition  

00:06:34,080 --> 00:06:40,000
or go to declaration function. You can control  click on the symbol in the code and the editor  

00:06:40,000 --> 00:06:45,440
takes you to where the symbol is defined, even if  it's in out model or package you have imported.  

00:06:46,720 --> 00:06:52,720
If we use HTTP for our web codes, we can  use the infrastructure of the web to read  

00:06:52,720 --> 00:07:04,080
them. And here is a CSV-LD file. It tells you  what format should be assumed for the file.  

00:07:05,760 --> 00:07:14,240
The vocab-based file is like a  database, but for vocabulary.  

00:07:15,120 --> 00:07:19,600
A tool reading the file can help resolve each  column label in the header to a definition. 

00:07:22,240 --> 00:07:29,840
I will dig deeper into CSV-LD and  also the vocab-based directives.  

00:07:31,040 --> 00:07:38,480
First, a CSV-LD file is still a CSV file.  Whatever comes before format version on  

00:07:38,480 --> 00:07:44,000
the first line is inferred to be the comment  prefix. And whatever comes after format version  

00:07:45,120 --> 00:07:53,360
and before the H in the HTTP URI is inferred to  be the delimiter. The CSV on the Web vocabulary  

00:07:53,360 --> 00:08:01,520
includes terms for dialect descriptions.  CSVW is the octothorp as the prefix  

00:08:01,520 --> 00:08:05,600
and the comma as the delimiter and  that's what I use in my examples. 

00:08:08,880 --> 00:08:15,360
The goals of the format version directive on the  first line are two-fold. The first goal is to help  

00:08:15,360 --> 00:08:22,480
someone new to the format learn more. Follow your  nose is a widely celebrated linked data pattern.  

00:08:23,040 --> 00:08:28,880
The idea is that people as well as their software  agents will sniff out links and follow them when  

00:08:28,880 --> 00:08:34,880
it makes sense for them to do so. Hence the  second goal: Help someone's software agents  

00:08:34,880 --> 00:08:42,320
know what to expect in the rest of the file. The next line is a directive that identifies a  

00:08:42,880 --> 00:08:49,840
vocabulary base for column labels. If a column  label is not given as a URI, then the vocab  

00:08:49,840 --> 00:08:55,920
base can be queried for the label. There are two  cases here, either the column label is the last  

00:08:55,920 --> 00:09:04,400
part of the URI with the vocab-based URI as the  prefix, or there's a full URI in the base that  

00:09:06,640 --> 00:09:12,960
is a human readable label for the URI.  In this way, they can retain preferred  

00:09:12,960 --> 00:09:18,640
column labels even if they can't contain  spaces or wouldn't form a part of a valid URI. 

00:09:21,760 --> 00:09:28,880
As an alternative to maintaining all column  vocabulary terms in one vocab base, you can use  

00:09:28,880 --> 00:09:36,000
vocabularies maintained by others. Here I enable  succinct linking to terms by the example.org  

00:09:36,000 --> 00:09:44,400
organization, which I trust. I link to the atom  entry in the namespace for pure and applied  

00:09:44,400 --> 00:09:54,320
chemistry. I do this because doing so can signal  to a CSV-LD that the term must be atomic elements.  

00:09:55,920 --> 00:10:01,520
If you like the vocabulary, but don't trust  their governance, you can fork the terms  

00:10:01,520 --> 00:10:08,720
into your vocab space or into a name Space you  govern, linking up source to the terminology. 

00:10:12,000 --> 00:10:16,480
Apart from the directive statements, you  can include RDF statements in the header.  

00:10:17,120 --> 00:10:22,800
Resource description form statements are in the  form of triples of the subject, predicate and  

00:10:22,800 --> 00:10:30,240
object. The subject is the current sheet. The  predicate is always a URI. And in this example,  

00:10:30,240 --> 00:10:36,560
I'm saying that CSVW is given as the available  as the URI given as the subject of the triple.  

00:10:37,840 --> 00:10:45,840
The header also even accommodates comment lines  which is followed directly by a space character.  

00:10:45,840 --> 00:10:55,600
Finally, there's one additional director in  CSVW, and that is the ID directive, allowing  

00:10:55,600 --> 00:11:01,600
you to assign a URI to identify the sheet and thus  the subject of any RDF statements in the header. 

00:11:04,640 --> 00:11:08,960
From the fair guiding principles for  scientific data management and stewardship  

00:11:08,960 --> 00:11:18,080
where FAIR is Findable, Accessible, Interoperable  and Reusable, one is that the data and metadata  

00:11:18,080 --> 00:11:25,040
vocabularies themselves follow FAIR principles.  In this case, the vocabulary terms need to be  

00:11:25,040 --> 00:11:31,600
resolve so that people can look them up.  There are ways to do this. One is to host  

00:11:31,600 --> 00:11:38,160
a static site with an HTML document for a  human readable version. And to have the HTML  

00:11:38,160 --> 00:11:47,200
document to have a link to an RDF that's a  machine representation of the vocabulary.  

00:11:48,160 --> 00:11:55,840
RDF site summary feeds, that is RSS feeds,  are also communicated such HTML header links. 

00:11:58,640 --> 00:12:04,240
In the near term, I hope that CSV-LD proves  useful for validating and collecting data  

00:12:04,240 --> 00:12:09,840
from individual spreadsheets. Columns may  be validated independently of each other.  

00:12:10,800 --> 00:12:15,760
Beyond that, a statement in the header may  indicate to a processer that each row in this  

00:12:15,760 --> 00:12:22,480
sheet should validate as a certain kind of entity.  Meaning certain columns are required to be present  

00:12:22,480 --> 00:12:28,160
and valid. And other optional columns, if present  reason will also be validated and collected.  

00:12:29,520 --> 00:12:33,360
Furthermore, there are standard  affordances in ontologies  

00:12:33,360 --> 00:12:41,520
such as product hierarchies to make them  flexible and to layer on new meaning over time  

00:12:41,520 --> 00:12:45,440
via compatible, additive changes  rather than breaking changes. 

00:12:48,800 --> 00:12:55,040
Eventually, I hope that the basic column and  validation facilities of CSV-LD processers  

00:12:55,680 --> 00:13:04,640
allow you to unify known spreadsheets under column  URIs and to discover related spreadsheets hosted  

00:13:04,640 --> 00:13:11,920
elsewhere by allocating computation budgets  to follow their noses for more linked data.  

00:13:15,920 --> 00:13:22,560
After this talk, come find me in the csv,conf  Slack. And if you raise issues in the CSV  

00:13:22,560 --> 00:13:34,640
namespaces GitHub, I will find them. Or email me.  If you are a scientist, I'm part of the materials  

00:13:34,640 --> 00:13:41,840
research data alliance. Come join the discussion  on matsci.org. If you are a micro researcher or  

00:13:41,840 --> 00:13:48,400
know one, I'm involved with a national microbiome  data collective and you can see our pilot project.  

00:13:49,360 --> 00:13:55,920
Finally, the Recurse Center is a pretty place  for a mini sabbatical. If you are a Recurser,  

00:13:55,920 --> 00:13:59,920
I am one too and I hang out in  the Zulip chat a lot. Thank you.  

00:14:01,200 --> 00:14:03,160
Are there any questions? >>  

00:14:06,880 --> 00:14:13,680
Thank you so much. That was a really great  talk. I am going to turn on my video now.  

00:14:13,680 --> 00:14:22,560
And there are several questions. So, the -- as a  reminder, participants, you can up-vote questions.  

00:14:22,560 --> 00:14:27,280
I'm going to take the top question right  now which is: Can you assign definitions  

00:14:27,280 --> 00:14:36,880
to rows or individual cells or just columns? Donny: Great question. So, the CSVW specification  

00:14:36,880 --> 00:14:46,720
allows you to do much more. For simplicity's sake,  just with CSV there's the column stuff. But the  

00:14:46,720 --> 00:14:56,240
link out to CSVW allows you to do multiple things.  And there's a fantastic specification. I recommend  

00:14:56,240 --> 00:15:09,280
people like at the CSVW W3C recommendations. >> Thank you. Next question. Has a molecule  

00:15:09,280 --> 00:15:18,560
example been deployed? If so, where? Donny: Yeah. Thank you. So, if you look  

00:15:18,560 --> 00:15:27,760
on the -- that GitHub repository, it will link to  a deployment of the examples here, the namespaces.  

00:15:29,600 --> 00:15:35,280
The actual Excel spreadsheet, I don't believe, is  deployed. But my slides are there. I just use that  

00:15:35,280 --> 00:15:43,440
as a simple example. For demonstration purposes.  But yes, all the namespace code and examples are  

00:15:43,440 --> 00:15:46,040
available at the GitHub repository. >>  

00:15:52,720 --> 00:16:02,880
Thanks. I think we have time for at least one more  question. Which is: How does CSV-LD relate to CSV  

00:16:02,880 --> 00:16:12,480
schemas, schema language or JSON table schema. Donny: CSV table language or JSON table schema.  

00:16:15,280 --> 00:16:21,600
I don't know. I would love to do sort of a  mapping to be clear on the relationships. Rather  

00:16:21,600 --> 00:16:26,480
than talking in hand-wavy terms. I think that  would be very helpful. So, whatever asked that,  

00:16:27,360 --> 00:16:32,880
it's great to be able to have qualified  relationships between things so people can  

00:16:33,520 --> 00:16:38,480
discuss them. But I can't give a summary right  now of those. But thanks for bringing those up. 

00:16:38,480 --> 00:16:48,240
>> That's a great question. I'm going to give us  30 seconds to do one final question. Which is:  

00:16:48,240 --> 00:16:53,040
How do we get scientists to upgrade to  this level of documentation and formatting  

00:16:53,040 --> 00:17:02,800
when they are happy to send us Excel sheets? Donny: Fantastic. So, I think part of it will be  

00:17:02,800 --> 00:17:11,280
having nice tooling to help give them interactive  feedback. One thing that's nice out of the back is  

00:17:11,280 --> 00:17:20,320
the annotation properties, they like to look up  the column names and distribute that to people  

00:17:20,320 --> 00:17:28,000
and have automatic data dictionaries. If they're  online processers, it can be helpful to validate  

00:17:28,000 --> 00:17:34,960
spreadsheets because Excel does all sorts of  funny things with converting fields. I think a  

00:17:34,960 --> 00:17:39,760
lot of scientists might appreciate that as sort of  a last step before uploading it as supplementary  

00:17:39,760 --> 00:17:46,960

YouTube URL: https://www.youtube.com/watch?v=qIXcnSCOyZs


