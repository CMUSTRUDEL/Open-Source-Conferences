Title: Simon Tyrrell - Frictionless Data for Wheat
Publication date: 2021-05-20
Playlist: CSVConf 2021
Description: 
	The international wheat community has embraced the omics era and is producing larger and more heterogeneous datasets at a rapid pace in order to produce better varieties via breeding programmes. These programmes, especially in the pre-breeding space, have encouraged wheat communities to make these datasets available more openly. This is a positive step, but the consistent and standardised collection and dissemination of data based on rich metadata remains difficult, as so much of this information is stored in papers and supplementary information. Furthermore, whilst ontologies exist for data descriptions, e.g. the Environmental Factor Ontology, the Crop Ontology, etc., use of these ontology terms to annotate key development characteristics across disparate data generation methods and growing sites is rarely routine or harmonised. Therefore, we built Grassroots, an infrastructure including portals to deliver large scale datasets with semantically marked-up metadata to power FAIR data in crop research. As part of the UK Designing Future Wheat (DFW) programme, we generate a variety of data ranging from field trial experimental information, sequencing data and phenotyping images, through to molecular biology data about host and pathogen interactions, nitrogen use efficiency, and other key treatment factors. As such, there is an increasing need to be able to manage this data and its metadata to allow for consistent, easy dissemination and integration with other datasets and within analytical tools and workflows. We decided that Frictionless Data was the right framework to use due to its ease of use and open standards, so we developed open source tools for FAIR data sharing to automatically generate Frictionless Data Packages for these datasets on both our Apache/iRODS and CKAN portals.
Captions: 
	00:00:03,360 --> 00:00:06,640
cool uh thank you joe

00:00:04,640 --> 00:00:08,720
um so today i'm going to talk to you

00:00:06,640 --> 00:00:10,240
about frictionless data for wheat

00:00:08,720 --> 00:00:11,759
this is a project that we've worked on

00:00:10,240 --> 00:00:13,519
at the early institute

00:00:11,759 --> 00:00:15,280
it's myself and another guy called

00:00:13,519 --> 00:00:17,199
shindong bian and we work for a guy

00:00:15,280 --> 00:00:18,880
called rob davey

00:00:17,199 --> 00:00:20,400
i'll talk to you about it now so to

00:00:18,880 --> 00:00:22,160
begin with um we are

00:00:20,400 --> 00:00:23,920
funded as part of a sort of

00:00:22,160 --> 00:00:25,519
infrastructure program that covers

00:00:23,920 --> 00:00:27,359
eight different research institutes and

00:00:25,519 --> 00:00:28,960
universities there's over 25 groups of

00:00:27,359 --> 00:00:30,400
scientists

00:00:28,960 --> 00:00:32,559
and the idea is basically to try and

00:00:30,400 --> 00:00:34,719
increase the yield of wheat

00:00:32,559 --> 00:00:35,600
so effectively by 2050 we need to

00:00:34,719 --> 00:00:38,399
produce 60

00:00:35,600 --> 00:00:39,840
more wheat to meet global demand so any

00:00:38,399 --> 00:00:41,440
any research we could do to try and make

00:00:39,840 --> 00:00:43,680
that easier for users

00:00:41,440 --> 00:00:45,840
for people to get so what do we do under

00:00:43,680 --> 00:00:47,360
dfw well we produce lots of scientific

00:00:45,840 --> 00:00:48,320
data and it can be in various different

00:00:47,360 --> 00:00:50,000
types so we have

00:00:48,320 --> 00:00:52,239
field trial experiments we have data

00:00:50,000 --> 00:00:54,640
sets and we have genomic sequences

00:00:52,239 --> 00:00:55,600
amongst many other types of data on top

00:00:54,640 --> 00:00:56,800
of that we have also

00:00:55,600 --> 00:00:58,879
different groups of users so we have

00:00:56,800 --> 00:01:00,879
breeders who have particular needs and

00:00:58,879 --> 00:01:02,079
academics and data scientists and people

00:01:00,879 --> 00:01:04,400
in the industry and all requiring

00:01:02,079 --> 00:01:06,159
different needs from the data

00:01:04,400 --> 00:01:08,159
so the challenge we have is how to make

00:01:06,159 --> 00:01:09,760
this data accessible and usable for

00:01:08,159 --> 00:01:11,760
everyone

00:01:09,760 --> 00:01:13,360
so our solution to this is we came up

00:01:11,760 --> 00:01:14,960
with a software platform called the

00:01:13,360 --> 00:01:16,560
grassroots infrastructure and this is a

00:01:14,960 --> 00:01:18,240
suite of tools that wrap up

00:01:16,560 --> 00:01:20,560
industry standard software tools along

00:01:18,240 --> 00:01:22,479
with our own custom open source ones

00:01:20,560 --> 00:01:24,640
and it works on the principle of

00:01:22,479 --> 00:01:27,040
communication between different systems

00:01:24,640 --> 00:01:28,320
or using a json api so it's language

00:01:27,040 --> 00:01:29,520
programming language and platform

00:01:28,320 --> 00:01:31,520
agnostic

00:01:29,520 --> 00:01:33,280
and the idea is that these grassroots

00:01:31,520 --> 00:01:34,880
institutes can be federated between each

00:01:33,280 --> 00:01:36,000
other and data and services can be

00:01:34,880 --> 00:01:37,040
shared

00:01:36,000 --> 00:01:38,640
and also we try to make sure

00:01:37,040 --> 00:01:39,600
everything's done in a fair way so if

00:01:38,640 --> 00:01:40,799
you don't know about that i'll just

00:01:39,600 --> 00:01:43,119
quickly run through those

00:01:40,799 --> 00:01:44,880
there the four principles of their data

00:01:43,119 --> 00:01:46,399
are the first one is findability as in

00:01:44,880 --> 00:01:47,600
can you find what you're looking for out

00:01:46,399 --> 00:01:49,040
of a system

00:01:47,600 --> 00:01:50,799
so making sure the data is well

00:01:49,040 --> 00:01:53,040
described and can be searchable for both

00:01:50,799 --> 00:01:55,040
humans and users

00:01:53,040 --> 00:01:56,320
um it needs to be accessible so once

00:01:55,040 --> 00:01:57,680
people can find the data

00:01:56,320 --> 00:01:59,680
can they access it do they need

00:01:57,680 --> 00:02:01,360
authentication or is it openly available

00:01:59,680 --> 00:02:02,960
and so forth

00:02:01,360 --> 00:02:04,640
we have interoperability so the idea

00:02:02,960 --> 00:02:05,759
that even though you've got open data

00:02:04,640 --> 00:02:07,280
you need to make sure they can be

00:02:05,759 --> 00:02:09,440
integrated into other systems whether it

00:02:07,280 --> 00:02:10,319
be different workflows for analysis or

00:02:09,440 --> 00:02:12,720
so forth

00:02:10,319 --> 00:02:14,480
so need to be well described and if i in

00:02:12,720 --> 00:02:15,760
terms of reusability

00:02:14,480 --> 00:02:18,080
we might want to make sure that all the

00:02:15,760 --> 00:02:20,480
data is well described so marked up and

00:02:18,080 --> 00:02:22,000
with detailed prominence so now that

00:02:20,480 --> 00:02:22,959
i've given you a quick overview of their

00:02:22,000 --> 00:02:24,319
data i've now gone through the

00:02:22,959 --> 00:02:26,400
grassroots infrastructure

00:02:24,319 --> 00:02:28,000
so what we have we have a set of common

00:02:26,400 --> 00:02:29,040
core libraries which take care of things

00:02:28,000 --> 00:02:31,599
of how we describe

00:02:29,040 --> 00:02:33,440
our parameters and our web service apis

00:02:31,599 --> 00:02:35,760
how you call different systems

00:02:33,440 --> 00:02:37,519
writing reading files and so forth and

00:02:35,760 --> 00:02:38,080
we have that attached to an apache web

00:02:37,519 --> 00:02:40,080
server

00:02:38,080 --> 00:02:41,280
via our own apache module we write so

00:02:40,080 --> 00:02:42,640
that connects all

00:02:41,280 --> 00:02:44,800
all of the plumbing together for this

00:02:42,640 --> 00:02:46,480
system the bits that actually do the

00:02:44,800 --> 00:02:47,760
scientific analysis are what we call

00:02:46,480 --> 00:02:49,519
services

00:02:47,760 --> 00:02:51,680
so this is either where we've taken

00:02:49,519 --> 00:02:52,879
adapted existing programs and we've

00:02:51,680 --> 00:02:55,280
wrapped them into our own

00:02:52,879 --> 00:02:56,080
sort of api or we write our own bespoke

00:02:55,280 --> 00:02:57,840
tools

00:02:56,080 --> 00:02:59,440
and as long as systems conform to our

00:02:57,840 --> 00:03:01,200
api which is a well-defined set of

00:02:59,440 --> 00:03:02,879
standards and a json schema

00:03:01,200 --> 00:03:04,239
then they can run inside it so we have

00:03:02,879 --> 00:03:04,560
various different types of tools so we

00:03:04,239 --> 00:03:06,319
have

00:03:04,560 --> 00:03:07,680
we take an existing tool such as blast

00:03:06,319 --> 00:03:08,800
which is a really common one in

00:03:07,680 --> 00:03:10,159
bioinformatics

00:03:08,800 --> 00:03:11,760
which is where you find areas of

00:03:10,159 --> 00:03:12,800
similarity between different biological

00:03:11,760 --> 00:03:14,159
sequences

00:03:12,800 --> 00:03:15,920
as well as our own sort of custom

00:03:14,159 --> 00:03:16,879
services like field trials field

00:03:15,920 --> 00:03:18,400
pathogenomics

00:03:16,879 --> 00:03:19,680
searching and stuff i'll come on and

00:03:18,400 --> 00:03:21,760
talk chat about these in a bit more

00:03:19,680 --> 00:03:23,519
detail

00:03:21,760 --> 00:03:24,879
so typically when you do a web service

00:03:23,519 --> 00:03:26,560
interaction say you want to go and do a

00:03:24,879 --> 00:03:27,280
search across two different systems for

00:03:26,560 --> 00:03:29,599
a particular

00:03:27,280 --> 00:03:30,319
sequence normally if in this case you'd

00:03:29,599 --> 00:03:31,519
have

00:03:30,319 --> 00:03:32,959
two servers one for the earl of

00:03:31,519 --> 00:03:33,599
institute here one for the university of

00:03:32,959 --> 00:03:36,080
bristol

00:03:33,599 --> 00:03:37,360
you log into one system do your search

00:03:36,080 --> 00:03:38,640
and then you go across the other one and

00:03:37,360 --> 00:03:39,920
perform the same search

00:03:38,640 --> 00:03:41,760
and try and get your results so the

00:03:39,920 --> 00:03:43,599
problem there is you have to

00:03:41,760 --> 00:03:44,640
access each one individually and then

00:03:43,599 --> 00:03:46,080
once you've done that you have to

00:03:44,640 --> 00:03:47,519
collate results together and if you're

00:03:46,080 --> 00:03:49,920
anything like me

00:03:47,519 --> 00:03:51,680
you're prone to human error and not cut

00:03:49,920 --> 00:03:53,680
and pasting things together properly

00:03:51,680 --> 00:03:55,439
you might mistakenly run the services

00:03:53,680 --> 00:03:56,239
within parameters so you might not have

00:03:55,439 --> 00:03:58,799
to compare them

00:03:56,239 --> 00:04:00,000
um correctly and it's time consuming so

00:03:58,799 --> 00:04:01,920
one of the things we tried to solve

00:04:00,000 --> 00:04:03,040
this idea is that the idea of federating

00:04:01,920 --> 00:04:04,560
services so

00:04:03,040 --> 00:04:06,080
if two different places are running a

00:04:04,560 --> 00:04:07,360
grassroots instance they can be hooked

00:04:06,080 --> 00:04:09,040
up together

00:04:07,360 --> 00:04:10,400
and all the services shared so the idea

00:04:09,040 --> 00:04:11,040
being it doesn't matter which one you

00:04:10,400 --> 00:04:12,840
log into

00:04:11,040 --> 00:04:14,480
you see the same list of services and

00:04:12,840 --> 00:04:17,680
functionality

00:04:14,480 --> 00:04:20,479
so on top of that you can also

00:04:17,680 --> 00:04:21,600
amalgamate services themselves so the

00:04:20,479 --> 00:04:23,199
the service

00:04:21,600 --> 00:04:24,880
can actually see the databases all on

00:04:23,199 --> 00:04:26,400
one system normal on the other but to a

00:04:24,880 --> 00:04:27,040
user they appear like they're in one

00:04:26,400 --> 00:04:28,639
place

00:04:27,040 --> 00:04:30,160
so from user's point of view they just

00:04:28,639 --> 00:04:31,280
look into a system they see a list of

00:04:30,160 --> 00:04:32,960
databases

00:04:31,280 --> 00:04:34,479
search against and they can just run

00:04:32,960 --> 00:04:36,479
their pro run their analysis

00:04:34,479 --> 00:04:37,919
and that's fine they get results back

00:04:36,479 --> 00:04:39,199
whereas under the hood obviously has

00:04:37,919 --> 00:04:40,960
communication between the two different

00:04:39,199 --> 00:04:42,160
systems and all the results get placed

00:04:40,960 --> 00:04:44,000
together

00:04:42,160 --> 00:04:45,600
so that's an inter sort of introduction

00:04:44,000 --> 00:04:46,800
to grassroots and i'm now going to talk

00:04:45,600 --> 00:04:47,840
about a couple of systems that we've

00:04:46,800 --> 00:04:50,160
done

00:04:47,840 --> 00:04:51,440
so the first is as as part of this

00:04:50,160 --> 00:04:54,479
project the dfw

00:04:51,440 --> 00:04:55,120
um program we create lots and lots of

00:04:54,479 --> 00:04:56,320
data

00:04:55,120 --> 00:04:57,840
and all of this we need to make

00:04:56,320 --> 00:04:58,720
available so we have a data portal for

00:04:57,840 --> 00:05:00,880
this

00:04:58,720 --> 00:05:02,560
and this is um everything on this system

00:05:00,880 --> 00:05:03,039
is based upon the toronto data agreement

00:05:02,560 --> 00:05:05,280
which is an

00:05:03,039 --> 00:05:07,360
excellent license which allows you to do

00:05:05,280 --> 00:05:09,680
pre-publication data sharing so the idea

00:05:07,360 --> 00:05:11,360
is if you do some scientific analysis

00:05:09,680 --> 00:05:13,440
you can make your data available for

00:05:11,360 --> 00:05:14,479
everyone else and they can access it

00:05:13,440 --> 00:05:16,080
straight away

00:05:14,479 --> 00:05:17,759
but they can't publish on it until you

00:05:16,080 --> 00:05:19,759
have so you still get first

00:05:17,759 --> 00:05:21,199
first rights if you like but it makes

00:05:19,759 --> 00:05:22,000
sure that everyone else can do their

00:05:21,199 --> 00:05:24,560
analysis and

00:05:22,000 --> 00:05:26,560
pipelines with it much earlier than they

00:05:24,560 --> 00:05:28,560
normally would

00:05:26,560 --> 00:05:30,160
so where we store this we store in a

00:05:28,560 --> 00:05:31,600
system called irons which you haven't

00:05:30,160 --> 00:05:33,120
come across as an open source

00:05:31,600 --> 00:05:35,440
data management software and it's used

00:05:33,120 --> 00:05:37,840
by a variety of research or commercial

00:05:35,440 --> 00:05:38,639
organizations worldwide and it has a

00:05:37,840 --> 00:05:40,320
number of sort of

00:05:38,639 --> 00:05:41,680
cool features so one is that you can

00:05:40,320 --> 00:05:43,039
virtualize the data actually

00:05:41,680 --> 00:05:44,400
it doesn't really mat from the user's

00:05:43,039 --> 00:05:45,440
point of view it doesn't matter where

00:05:44,400 --> 00:05:46,560
the data is stored

00:05:45,440 --> 00:05:47,759
so you can shuffle around on your

00:05:46,560 --> 00:05:49,360
servers and from their point of view it

00:05:47,759 --> 00:05:50,960
doesn't move

00:05:49,360 --> 00:05:52,560
it has data discovery so because once

00:05:50,960 --> 00:05:53,280
doing the standard typical file and

00:05:52,560 --> 00:05:55,199
search things

00:05:53,280 --> 00:05:57,199
you can also attach metadata to the

00:05:55,199 --> 00:05:58,720
files so for instance if you have

00:05:57,199 --> 00:06:00,000
you run an experiment and you want to

00:05:58,720 --> 00:06:01,440
store the parameters you've run an

00:06:00,000 --> 00:06:02,400
experiment with you can attach as

00:06:01,440 --> 00:06:03,840
metadata to the

00:06:02,400 --> 00:06:05,759
results file and if your results bar

00:06:03,840 --> 00:06:06,000
gets moved around the metadata stays

00:06:05,759 --> 00:06:09,280
with

00:06:06,000 --> 00:06:09,840
it and in the same way that uh we have

00:06:09,280 --> 00:06:12,000
the graph

00:06:09,840 --> 00:06:12,880
grassroots instances could be federated

00:06:12,000 --> 00:06:14,400
so too you can

00:06:12,880 --> 00:06:16,720
you can do that with the eye rods which

00:06:14,400 --> 00:06:19,680
is where we got the idea from

00:06:16,720 --> 00:06:20,240
so what we did is we took a an apache

00:06:19,680 --> 00:06:21,919
module

00:06:20,240 --> 00:06:23,360
and we forked it to make this available

00:06:21,919 --> 00:06:24,880
on the web so the idea being that we can

00:06:23,360 --> 00:06:26,319
make the data appear in like a

00:06:24,880 --> 00:06:27,680
user-friendly environment

00:06:26,319 --> 00:06:29,520
but add lots of extra features so we

00:06:27,680 --> 00:06:32,000
want to expose the metadata so that can

00:06:29,520 --> 00:06:33,600
be displayed and that can be edited

00:06:32,000 --> 00:06:35,440
and give gives the whole system a full

00:06:33,600 --> 00:06:38,080
rest of web service api so people can

00:06:35,440 --> 00:06:40,880
program against it if they want to

00:06:38,080 --> 00:06:42,800
so um in terms of the metadata we store

00:06:40,880 --> 00:06:45,600
we use the minimal information about a

00:06:42,800 --> 00:06:48,639
plant phenotype experiment or myappy

00:06:45,600 --> 00:06:49,759
and that that has a um a list of certain

00:06:48,639 --> 00:06:52,639
parameters or certain

00:06:49,759 --> 00:06:53,120
metadata attributes to store and keep so

00:06:52,639 --> 00:06:56,000
we

00:06:53,120 --> 00:06:57,360
we stick with that on top of that we

00:06:56,000 --> 00:06:59,280
have an extra field so we have things

00:06:57,360 --> 00:07:00,319
like the title of a project the list of

00:06:59,280 --> 00:07:02,479
the authors

00:07:00,319 --> 00:07:04,160
a description of it and license details

00:07:02,479 --> 00:07:06,319
along with the actual data itself

00:07:04,160 --> 00:07:07,440
and all of this gets indexed within our

00:07:06,319 --> 00:07:09,199
own um

00:07:07,440 --> 00:07:10,639
search engine which is based upon lucy

00:07:09,199 --> 00:07:12,880
again everything we do is open source

00:07:10,639 --> 00:07:15,520
it's all available

00:07:12,880 --> 00:07:16,000
now last year we were lucky enough to uh

00:07:15,520 --> 00:07:17,520
with a tool

00:07:16,000 --> 00:07:19,280
fund from the open knowledge foundation

00:07:17,520 --> 00:07:20,000
and with the goal being to expose these

00:07:19,280 --> 00:07:22,639
data sets

00:07:20,000 --> 00:07:24,080
the data frictionless data packages and

00:07:22,639 --> 00:07:27,520
if you can see in the little red box we

00:07:24,080 --> 00:07:29,120
have a little data package json file

00:07:27,520 --> 00:07:30,400
so what is friction data i'm sure you've

00:07:29,120 --> 00:07:30,960
heard lots about it over the last day

00:07:30,400 --> 00:07:33,199
and a half

00:07:30,960 --> 00:07:35,039
but just in case you haven't it's a

00:07:33,199 --> 00:07:35,840
simple container format used to describe

00:07:35,039 --> 00:07:39,039
and package

00:07:35,840 --> 00:07:41,520
any type of data and it's it has

00:07:39,039 --> 00:07:44,240
many advantages simple to use can handle

00:07:41,520 --> 00:07:45,520
anything it's easily extensible

00:07:44,240 --> 00:07:46,879
that you can package your metadata in

00:07:45,520 --> 00:07:47,759
there it's human editable and machine

00:07:46,879 --> 00:07:49,759
usable

00:07:47,759 --> 00:07:51,919
i like the fact it uses reasons existing

00:07:49,759 --> 00:07:53,199
standards and because it's in json

00:07:51,919 --> 00:07:56,560
it's language technology and

00:07:53,199 --> 00:07:58,319
infrastructure it's great i love it

00:07:56,560 --> 00:07:59,680
so we've put we put all of our data into

00:07:58,319 --> 00:08:01,759
that so each of the

00:07:59,680 --> 00:08:03,280
projects were on the dfw data portal now

00:08:01,759 --> 00:08:04,639
have these frictionless data packages

00:08:03,280 --> 00:08:07,199
automatically generated it's not like

00:08:04,639 --> 00:08:08,720
the user has to go and create it

00:08:07,199 --> 00:08:10,639
and it contains all of the files that we

00:08:08,720 --> 00:08:12,319
have actually sit on the website as well

00:08:10,639 --> 00:08:13,280
so for things like the license the name

00:08:12,319 --> 00:08:16,479
the description

00:08:13,280 --> 00:08:18,240
and so forth we've done this by

00:08:16,479 --> 00:08:20,000
adding some extra functionality to the

00:08:18,240 --> 00:08:22,400
apache module that i mentioned

00:08:20,000 --> 00:08:24,000
that connects to my rods so it has a

00:08:22,400 --> 00:08:24,400
number of features so that first is it

00:08:24,000 --> 00:08:26,479
can

00:08:24,400 --> 00:08:27,599
as well dynamically creating these files

00:08:26,479 --> 00:08:28,960
if they're particularly large will take

00:08:27,599 --> 00:08:30,240
a long time to generate

00:08:28,960 --> 00:08:32,000
they can be cached and written back to

00:08:30,240 --> 00:08:33,279
iraq so next time that file can just be

00:08:32,000 --> 00:08:34,560
served

00:08:33,279 --> 00:08:35,919
that's really good and because it's in

00:08:34,560 --> 00:08:37,519
apache you can use all your standard

00:08:35,919 --> 00:08:38,320
apache configuration directive so you

00:08:37,519 --> 00:08:40,399
can just say

00:08:38,320 --> 00:08:42,080
that a particular level in your file

00:08:40,399 --> 00:08:42,399
directory hierarchy these things can

00:08:42,080 --> 00:08:45,839
have

00:08:42,399 --> 00:08:47,839
frictionless later packages generated

00:08:45,839 --> 00:08:49,519
obviously we can't control what metadata

00:08:47,839 --> 00:08:50,560
keys people use to describe that data

00:08:49,519 --> 00:08:51,680
within irons

00:08:50,560 --> 00:08:53,440
so all of this is completely

00:08:51,680 --> 00:08:54,880
configurable so you can set up in your

00:08:53,440 --> 00:08:55,519
pat in your configuration you can say

00:08:54,880 --> 00:08:57,360
use these

00:08:55,519 --> 00:08:58,640
irons keys to generate these

00:08:57,360 --> 00:09:01,360
frictionless data

00:08:58,640 --> 00:09:03,040
and metadata values and you could the

00:09:01,360 --> 00:09:04,720
iron's metadata values can all be

00:09:03,040 --> 00:09:06,480
combined together so you can take the

00:09:04,720 --> 00:09:08,080
results from multiple different metadata

00:09:06,480 --> 00:09:09,760
values concatenate them together and

00:09:08,080 --> 00:09:11,760
that becomes the frictionless data value

00:09:09,760 --> 00:09:13,600
that you see

00:09:11,760 --> 00:09:15,600
so as well as basic data resources we

00:09:13,600 --> 00:09:16,880
also support tabular data resources

00:09:15,600 --> 00:09:18,959
so these are typically things like

00:09:16,880 --> 00:09:20,480
spreadsheets or csv files

00:09:18,959 --> 00:09:22,240
and in much the same way all of the

00:09:20,480 --> 00:09:23,519
column headings and variable types again

00:09:22,240 --> 00:09:24,880
completely configurable and can be

00:09:23,519 --> 00:09:26,959
pulled from the arrival system so we've

00:09:24,880 --> 00:09:28,880
tried to make it

00:09:26,959 --> 00:09:30,480
as little with no hard coding as

00:09:28,880 --> 00:09:32,560
possible so that anyone can configure it

00:09:30,480 --> 00:09:33,680
for their own systems

00:09:32,560 --> 00:09:35,519
so the second thing i'm going to talk

00:09:33,680 --> 00:09:37,680
about are field trials so field trials

00:09:35,519 --> 00:09:39,360
are experiments where

00:09:37,680 --> 00:09:41,120
scientists will will put loads of

00:09:39,360 --> 00:09:42,800
different crops within a field

00:09:41,120 --> 00:09:44,240
and apply different treatments to them

00:09:42,800 --> 00:09:45,120
could be fertilized and so forth and

00:09:44,240 --> 00:09:46,880
then measure

00:09:45,120 --> 00:09:48,560
particular traits it could be how

00:09:46,880 --> 00:09:50,560
quickly it takes for the crop to grow or

00:09:48,560 --> 00:09:52,959
how high it grows or so forth

00:09:50,560 --> 00:09:54,240
so we've worked with the data producers

00:09:52,959 --> 00:09:55,519
all within dfw

00:09:54,240 --> 00:09:57,920
and we came up with standardized

00:09:55,519 --> 00:09:59,600
temperament for template for submitting

00:09:57,920 --> 00:10:01,279
the genotype which is the genetic

00:09:59,600 --> 00:10:02,240
material of the crop i.e what type of

00:10:01,279 --> 00:10:03,600
seed it was

00:10:02,240 --> 00:10:04,959
and the phenotypes you want to store

00:10:03,600 --> 00:10:05,760
which is typically the characteristics

00:10:04,959 --> 00:10:07,120
you want to measure

00:10:05,760 --> 00:10:09,200
like i mentioned plant height and so

00:10:07,120 --> 00:10:09,680
forth and we're trying to facilitate all

00:10:09,200 --> 00:10:12,720
of this

00:10:09,680 --> 00:10:14,079
so everything is we're keeping the fair

00:10:12,720 --> 00:10:15,839
share principles in mind with everything

00:10:14,079 --> 00:10:18,240
that we produce

00:10:15,839 --> 00:10:19,440
so in terms of findability we have a a

00:10:18,240 --> 00:10:20,880
google maps type

00:10:19,440 --> 00:10:22,320
approach where you can go in and you can

00:10:20,880 --> 00:10:23,920
zoom in on the map and search around to

00:10:22,320 --> 00:10:24,240
find any trials or in a particular part

00:10:23,920 --> 00:10:26,560
of

00:10:24,240 --> 00:10:28,079
the world so or alternatively you can go

00:10:26,560 --> 00:10:30,000
into a normal text-based

00:10:28,079 --> 00:10:31,279
search webpage but you eventually you

00:10:30,000 --> 00:10:34,160
come down to particular

00:10:31,279 --> 00:10:35,600
set of studies so all everything we do

00:10:34,160 --> 00:10:37,360
is openly accessible

00:10:35,600 --> 00:10:38,959
and they all have unique identifiers

00:10:37,360 --> 00:10:41,519
that are fixed urls

00:10:38,959 --> 00:10:42,880
so you can they're accessible and can we

00:10:41,519 --> 00:10:44,399
we will keep them

00:10:42,880 --> 00:10:45,680
those addresses so people can reference

00:10:44,399 --> 00:10:47,200
to them and know they'll carry on

00:10:45,680 --> 00:10:48,800
existing

00:10:47,200 --> 00:10:50,240
in terms of interoperability as well as

00:10:48,800 --> 00:10:51,920
having the grassroots api

00:10:50,240 --> 00:10:54,079
we also have adopted something called

00:10:51,920 --> 00:10:56,560
brappy or the breeding api

00:10:54,079 --> 00:10:57,440
which is a community driven standard for

00:10:56,560 --> 00:10:59,760
developing

00:10:57,440 --> 00:11:01,440
a web service api for enabling improper

00:10:59,760 --> 00:11:02,720
interoperability between different plant

00:11:01,440 --> 00:11:06,320
breeding databases

00:11:02,720 --> 00:11:07,519
so that's another api that we use

00:11:06,320 --> 00:11:10,160
in terms of what we actually store in a

00:11:07,519 --> 00:11:12,160
system we have gps

00:11:10,160 --> 00:11:13,600
files for where the plots are within a

00:11:12,160 --> 00:11:16,240
particular um

00:11:13,600 --> 00:11:17,680
field so as well as storing lots of

00:11:16,240 --> 00:11:19,279
different metadata such as

00:11:17,680 --> 00:11:21,440
a description of a particular study what

00:11:19,279 --> 00:11:23,279
is trying to calculate

00:11:21,440 --> 00:11:24,800
any design notes or anything like this

00:11:23,279 --> 00:11:26,880
we also have these for the

00:11:24,800 --> 00:11:28,720
on the individual plot level and we've

00:11:26,880 --> 00:11:30,399
allowed automatic map updating so

00:11:28,720 --> 00:11:32,240
someone can have their phone or tablet

00:11:30,399 --> 00:11:33,920
and walk through the field

00:11:32,240 --> 00:11:35,680
and know which plot they're on so they

00:11:33,920 --> 00:11:36,640
can then tap on that and see the details

00:11:35,680 --> 00:11:39,360
of that plot

00:11:36,640 --> 00:11:40,800
to try and make it as useful as possible

00:11:39,360 --> 00:11:43,200
so what we store for the plot

00:11:40,800 --> 00:11:45,200
well we have lots of um generic data

00:11:43,200 --> 00:11:45,839
such as its dimensions its length its

00:11:45,200 --> 00:11:47,440
width

00:11:45,839 --> 00:11:49,519
when the crop was sewn when it was

00:11:47,440 --> 00:11:50,320
harvested and any um user comments for

00:11:49,519 --> 00:11:52,160
the person

00:11:50,320 --> 00:11:53,360
putting into the field you can also

00:11:52,160 --> 00:11:54,399
attach images that they

00:11:53,360 --> 00:11:56,000
and they can be able to take obviously

00:11:54,399 --> 00:11:57,120
taken your camera or we can have drone

00:11:56,000 --> 00:11:58,720
based images

00:11:57,120 --> 00:12:00,959
along with what crops have been sown

00:11:58,720 --> 00:12:01,680
there where the accession and seed so

00:12:00,959 --> 00:12:03,519
you can actually get

00:12:01,680 --> 00:12:05,600
you can go and order the seed for that

00:12:03,519 --> 00:12:08,320
particular variety the sun in that

00:12:05,600 --> 00:12:09,680
particular plot

00:12:08,320 --> 00:12:11,680
and then obviously what people do

00:12:09,680 --> 00:12:13,760
they're interested in measuring stuff so

00:12:11,680 --> 00:12:15,440
we the phenotypes are all the

00:12:13,760 --> 00:12:16,720
measurements that we people

00:12:15,440 --> 00:12:19,279
are interested in are typically

00:12:16,720 --> 00:12:21,120
comprised of sets

00:12:19,279 --> 00:12:22,480
core or triple values the first is a

00:12:21,120 --> 00:12:23,920
trait as in what to measure

00:12:22,480 --> 00:12:26,720
and this could be the plant height this

00:12:23,920 --> 00:12:28,639
could be how long it takes to grow

00:12:26,720 --> 00:12:30,240
the method of how it was measured it's

00:12:28,639 --> 00:12:31,440
the next part and finally the unit so it

00:12:30,240 --> 00:12:33,120
could be if you're measuring height it

00:12:31,440 --> 00:12:34,480
could be in centimeters or in meters or

00:12:33,120 --> 00:12:35,760
so forth along with the value and

00:12:34,480 --> 00:12:37,440
potentially a date

00:12:35,760 --> 00:12:38,880
now all of this stuff and everything

00:12:37,440 --> 00:12:40,399
that we do and all the data we store we

00:12:38,880 --> 00:12:42,320
try to make sure it's well-defined

00:12:40,399 --> 00:12:44,000
they're well-defined terms so everything

00:12:42,320 --> 00:12:46,320
we do comes from the crop ontology

00:12:44,000 --> 00:12:48,639
so everything is marked up and has

00:12:46,320 --> 00:12:50,079
proper provenance from there

00:12:48,639 --> 00:12:53,120
so as i mentioned we've got a couple of

00:12:50,079 --> 00:12:55,120
web service apis grassroots and rappy

00:12:53,120 --> 00:12:56,320
but another thing that people requested

00:12:55,120 --> 00:12:58,880
that we work with

00:12:56,320 --> 00:12:59,760
is they're not that they're way experts

00:12:58,880 --> 00:13:00,959
in the field way

00:12:59,760 --> 00:13:02,720
way better than me but they're not

00:13:00,959 --> 00:13:03,839
necessarily comfortable scripting or

00:13:02,720 --> 00:13:05,040
programming and they just want to get

00:13:03,839 --> 00:13:07,519
the basic data

00:13:05,040 --> 00:13:09,200
and the ideal solution for this and i'm

00:13:07,519 --> 00:13:10,560
not i'm not being paid to plug it is

00:13:09,200 --> 00:13:12,079
frictionless data

00:13:10,560 --> 00:13:14,560
so what we've done is we've come up with

00:13:12,079 --> 00:13:16,560
a load of schemas for the different

00:13:14,560 --> 00:13:18,320
classes of data we store whether it be

00:13:16,560 --> 00:13:19,120
studies the data and the plots and so

00:13:18,320 --> 00:13:20,560
forth

00:13:19,120 --> 00:13:22,240
and we package those all into

00:13:20,560 --> 00:13:23,920
frictionless data package and we're not

00:13:22,240 --> 00:13:25,360
just the only people on dfw working on

00:13:23,920 --> 00:13:26,959
fisherman's data we have collaborators

00:13:25,360 --> 00:13:29,120
such as richard also at roth

00:13:26,959 --> 00:13:30,880
research who's working a similar field

00:13:29,120 --> 00:13:33,200
and doing data carpentry lessons in

00:13:30,880 --> 00:13:35,519
frictionless data

00:13:33,200 --> 00:13:36,880
so what do we store well we've got

00:13:35,519 --> 00:13:37,920
within the frictionless data packages

00:13:36,880 --> 00:13:39,360
these are all again all

00:13:37,920 --> 00:13:41,600
automatically generated the user doesn't

00:13:39,360 --> 00:13:42,880
have to do anything um we have

00:13:41,600 --> 00:13:44,959
the various different languages

00:13:42,880 --> 00:13:45,440
resources so one for the program that's

00:13:44,959 --> 00:13:47,120
in

00:13:45,440 --> 00:13:49,519
then the field trial then study this

00:13:47,120 --> 00:13:51,839
inside that and then the plot data so we

00:13:49,519 --> 00:13:53,680
all of the videos that we have in there

00:13:51,839 --> 00:13:55,199
are standardized and unless on a study

00:13:53,680 --> 00:13:56,800
level as i mentioned there are standard

00:13:55,199 --> 00:13:57,760
attributes such as length and width and

00:13:56,800 --> 00:14:00,320
position and stuff

00:13:57,760 --> 00:14:01,760
well specific to each individual study

00:14:00,320 --> 00:14:02,240
you might be having different treatments

00:14:01,760 --> 00:14:04,320
or

00:14:02,240 --> 00:14:05,440
measuring different phenotypes so all of

00:14:04,320 --> 00:14:08,240
that again is

00:14:05,440 --> 00:14:08,959
is calculated with the software and it

00:14:08,240 --> 00:14:10,560
automatically

00:14:08,959 --> 00:14:12,079
creates the spreadsheet including these

00:14:10,560 --> 00:14:14,000
values

00:14:12,079 --> 00:14:16,560
so it might not be easy to see from the

00:14:14,000 --> 00:14:18,160
screen on there but um just an example

00:14:16,560 --> 00:14:19,199
of one of the sets of tabular data we've

00:14:18,160 --> 00:14:21,120
got

00:14:19,199 --> 00:14:22,800
and it shows the particular phenotypes

00:14:21,120 --> 00:14:24,399
within that study

00:14:22,800 --> 00:14:26,160
simon just to say you've got about four

00:14:24,399 --> 00:14:26,800
minutes left that's awesome thank you

00:14:26,160 --> 00:14:29,360
jake

00:14:26,800 --> 00:14:30,000
um so as well as exposing this the

00:14:29,360 --> 00:14:31,440
frictional data

00:14:30,000 --> 00:14:33,680
package we've thought can we make this

00:14:31,440 --> 00:14:35,440
even easier for users to use but so i

00:14:33,680 --> 00:14:35,680
know that frictional data has great apis

00:14:35,440 --> 00:14:37,680
and

00:14:35,680 --> 00:14:39,120
great tools in python and stuff but

00:14:37,680 --> 00:14:40,079
could we make it even simpler for them

00:14:39,120 --> 00:14:41,519
to unpack the data

00:14:40,079 --> 00:14:43,440
so another thing we've been working on

00:14:41,519 --> 00:14:46,240
it's a tool to extract resources from

00:14:43,440 --> 00:14:47,920
within a date frictionless data package

00:14:46,240 --> 00:14:49,600
and the way this works it's a standalone

00:14:47,920 --> 00:14:51,040
tool that you can download

00:14:49,600 --> 00:14:52,720
again it's open source with the link at

00:14:51,040 --> 00:14:53,120
the bottom and the idea is that it will

00:14:52,720 --> 00:14:54,800
read

00:14:53,120 --> 00:14:56,399
the contents of a frictionless data

00:14:54,800 --> 00:14:57,120
package and for each data resource

00:14:56,399 --> 00:14:58,959
within it

00:14:57,120 --> 00:15:00,160
it will look at the schema that it uses

00:14:58,959 --> 00:15:02,160
with the profile attribute

00:15:00,160 --> 00:15:04,079
go over to the internet and download it

00:15:02,160 --> 00:15:07,040
and then write out all of the

00:15:04,079 --> 00:15:07,920
data resource fields for using from that

00:15:07,040 --> 00:15:09,839
schema

00:15:07,920 --> 00:15:11,199
so currently we support the data of

00:15:09,839 --> 00:15:12,800
resources being written into the

00:15:11,199 --> 00:15:14,000
markdown or html but we're looking to

00:15:12,800 --> 00:15:16,959
add more different types

00:15:14,000 --> 00:15:18,800
and any tabular data resources we we've

00:15:16,959 --> 00:15:21,920
taken out with csv

00:15:18,800 --> 00:15:23,040
this tool is cross-platform as we plan

00:15:21,920 --> 00:15:24,320
to make it available for as many

00:15:23,040 --> 00:15:25,839
different platforms as possible and

00:15:24,320 --> 00:15:26,880
there's absolutely nothing weak specific

00:15:25,839 --> 00:15:28,240
in it so it could work of any

00:15:26,880 --> 00:15:29,120
frictionless later package that you'd

00:15:28,240 --> 00:15:32,320
like

00:15:29,120 --> 00:15:33,600
and the url is there for the

00:15:32,320 --> 00:15:35,680
pre-release version hopefully we'll have

00:15:33,600 --> 00:15:36,880
proper releases soon so in terms of

00:15:35,680 --> 00:15:38,160
further work well we want to add

00:15:36,880 --> 00:15:39,600
frictionless data

00:15:38,160 --> 00:15:41,440
as many different places as possible

00:15:39,600 --> 00:15:43,279
within our systems and at machine

00:15:41,440 --> 00:15:45,680
learning to try and detect scientific

00:15:43,279 --> 00:15:47,440
values from media such as photos

00:15:45,680 --> 00:15:49,040
and we're looking to try and standardize

00:15:47,440 --> 00:15:50,560
on frictional estate schemas

00:15:49,040 --> 00:15:51,839
between different types of field trial

00:15:50,560 --> 00:15:53,440
experiments you might have one we

00:15:51,839 --> 00:15:54,880
typically work with ones that

00:15:53,440 --> 00:15:57,120
over a single year but in some

00:15:54,880 --> 00:15:58,720
institutions they they make over 10 15

00:15:57,120 --> 00:15:59,759
years and so forth

00:15:58,720 --> 00:16:01,519
so finally i've got lots of

00:15:59,759 --> 00:16:03,519
acknowledgements that people work with

00:16:01,519 --> 00:16:06,000
so various different people

00:16:03,519 --> 00:16:07,360
that work across dfw that we've helped

00:16:06,000 --> 00:16:08,720
us enormously so with the diamond

00:16:07,360 --> 00:16:09,519
institute where i work and at the john

00:16:08,720 --> 00:16:11,440
innes center

00:16:09,519 --> 00:16:13,440
both and rested both instead research

00:16:11,440 --> 00:16:15,519
was to say and university of bristol

00:16:13,440 --> 00:16:16,560
and finally a big thank you to the csv

00:16:15,519 --> 00:16:19,920
con organizers

00:16:16,560 --> 00:16:23,120
for inviting us and that's it

00:16:19,920 --> 00:16:25,360
thank you very much

00:16:23,120 --> 00:16:26,800
thank you very much and um thank you

00:16:25,360 --> 00:16:28,240
thank you from us to

00:16:26,800 --> 00:16:30,560
presenting that was a really great talk

00:16:28,240 --> 00:16:33,680
thank you very much cheers

00:16:30,560 --> 00:16:35,279
i um we do have a question i'm just

00:16:33,680 --> 00:16:36,880
going to see so we're going to give you

00:16:35,279 --> 00:16:37,759
again a very short answer for this one

00:16:36,880 --> 00:16:40,639
so maybe you can

00:16:37,759 --> 00:16:42,000
um answer it in a bit more detail later

00:16:40,639 --> 00:16:42,880
because we've got the keynote starting

00:16:42,000 --> 00:16:45,360
in

00:16:42,880 --> 00:16:46,320
two minutes tell us a little bit about

00:16:45,360 --> 00:16:48,320
your users

00:16:46,320 --> 00:16:49,360
um it's a question that i had as well

00:16:48,320 --> 00:16:51,440
actually so

00:16:49,360 --> 00:16:53,040
yes so we we have um within the

00:16:51,440 --> 00:16:54,399
instruments themselves we have lots of

00:16:53,040 --> 00:16:56,079
research scientists that are

00:16:54,399 --> 00:16:58,079
particularly i'm trying to do

00:16:56,079 --> 00:16:59,440
to get this data and like work out what

00:16:58,079 --> 00:17:01,199
particular things there might be

00:16:59,440 --> 00:17:02,480
particular phenotypic values we also

00:17:01,199 --> 00:17:02,959
have breeders that are trying to work

00:17:02,480 --> 00:17:04,400
out

00:17:02,959 --> 00:17:06,880
whether there are particular seed lines

00:17:04,400 --> 00:17:08,959
that they can cross as in like

00:17:06,880 --> 00:17:10,480
you know have two parents for and try to

00:17:08,959 --> 00:17:11,439
come up with a species that's

00:17:10,480 --> 00:17:12,959
particularly hard

00:17:11,439 --> 00:17:14,959
to against them say a particular disease

00:17:12,959 --> 00:17:16,839
or a political characteristic

00:17:14,959 --> 00:17:18,079
um you might also have people in the

00:17:16,839 --> 00:17:20,160
industry

00:17:18,079 --> 00:17:21,760
they're doing similar things and we have

00:17:20,160 --> 00:17:22,640
academics so we have like a variety of

00:17:21,760 --> 00:17:24,160
different users

00:17:22,640 --> 00:17:26,720
and that that's part of the challenge is

00:17:24,160 --> 00:17:28,079
going well you can't just you can't have

00:17:26,720 --> 00:17:29,360
a one-size-fits-all you've got to make

00:17:28,079 --> 00:17:33,280
it so that everyone can get what they

00:17:29,360 --> 00:17:33,280

YouTube URL: https://www.youtube.com/watch?v=WHmWCZapMmE


