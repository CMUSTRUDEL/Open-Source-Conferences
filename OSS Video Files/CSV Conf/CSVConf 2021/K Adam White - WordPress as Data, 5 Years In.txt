Title: K Adam White - WordPress as Data, 5 Years In
Publication date: 2021-05-19
Playlist: CSVConf 2021
Description: 
	In 2016, WordPress introduced a REST API to expose site content as JSON. Also in 2016, we had the opportunity to present at csv,conf about this paradigm shift: what would it mean for all the content in any WordPress website to be accessible as data? Since then, WordPress has fundamentally reinvented itself using that new API. The project has been reimagined from the inside out, with the humble content block as the foundational unit of site data. But, where was that explosion of data-driven WordPress applications we hoped for? In this talk we will look at what worked as we integrated this new API into WordPress, and at where we stumbled. We'll explore how roles, access, and authentication limit the utility of data. We'll candidly discuss how burnout affects project stewardship. And we'll also celebrate a tremendous, successful change of course for a venerable open source project, and think ahead to what "WordPress as Data" may mean in five more years' time!
Captions: 
	00:00:03,040 --> 00:00:09,920
Hello and thank you‑all for joining today. My  name is K. Adam White. I'm a principal engineer  

00:00:11,440 --> 00:00:18,480
at a company called Human Made where we make  a digital experience platform called ALTIS,  

00:00:19,120 --> 00:00:28,800
which is built around WordPress. I met  several colleagues back in the 2014,  

00:00:28,800 --> 00:00:34,880
2015 range working on an open‑source project  together called the WordPress REST API.  

00:00:35,680 --> 00:00:44,400
I had the opportunity to work on this project as  a contributor to a plugin on GitHub through 2016,  

00:00:44,400 --> 00:00:53,200
and in 2016, I had the opportunity to speak  at csv,conf,v2 to leave the community with  

00:00:55,840 --> 00:01:00,320
my thoughts about what was exciting about  getting data access to WordPress content.  

00:01:04,000 --> 00:01:07,920
The hope is we'll be able to do a bit of a  retrospective. I hope it's a good segue from  

00:01:07,920 --> 00:01:16,800
the last talk. Not quite the same in the co‑making  space, but there are some things we did right and  

00:01:16,800 --> 00:01:21,360
there are some things we did wrong. We're going  to get into that today. But definitely worth  

00:01:21,360 --> 00:01:27,520
clarifying that the capacity in which I'm giving  this talk is the author of that 2016 version,  

00:01:27,520 --> 00:01:34,800
as a contributor to WordPress, and a maintainer  of the REST API plugin in the intervening years.  

00:01:34,800 --> 00:01:39,840
I don't speak for everyone on the project.  I am a consultant and this is my opinion. 

00:01:42,640 --> 00:01:50,960
What has changed since 2016? WordPress is a  content management system written in PHP. It  

00:01:50,960 --> 00:01:58,560
is free and open source, and it powers up to 40%  of the navigable internet. It's hugely widespread,  

00:01:58,560 --> 00:02:07,280
and we added in 2016, in October ‑‑ we merged it  and launched in December a JSON based data API to  

00:02:07,280 --> 00:02:14,320
get access to all the content in your site from  applications. Since then, we've done a lot around  

00:02:14,320 --> 00:02:21,120
improving our ability to define complex metadata  using schemas. We've done a lot around introducing  

00:02:21,120 --> 00:02:25,840
abilities to limit how much information we  transmit over the wire for efficiency and economy,  

00:02:26,400 --> 00:02:33,120
but the biggest thing that's changed in  WordPress ever is a project called Gutenberg. It  

00:02:33,120 --> 00:02:40,000
is a Block Editor. It is a tool designed to blow  up WordPress and not have it just be a rich text  

00:02:40,000 --> 00:02:47,200
editor writing to a single field in your database  but to give you a fast, responsive, flexible  

00:02:47,200 --> 00:02:56,960
what‑you‑see‑is‑what‑you‑get interface. You can  compose your site using these. We launched it  

00:02:56,960 --> 00:03:02,000
where it would let you do a much better job of  authoring the content within a post, much closer  

00:03:02,000 --> 00:03:06,160
to one of the experiences you would have with the  competing software out there, particularly some  

00:03:06,160 --> 00:03:14,800
of the proprietary ones. This year, we're doing  full‑site editing where you can adjust anything.  

00:03:20,720 --> 00:03:25,280
We needed an API, and it was built on top of  the API that I was here five years ago to talk  

00:03:25,280 --> 00:03:32,240
about. This has an extremely exciting voyage into  the future for WordPress. This is the project  

00:03:32,240 --> 00:03:36,720
that has made WordPress something that is viable  to continue being relevant for years to come. 

00:03:48,160 --> 00:03:55,520
So, what have we learned since then? The first  thing is if I look back on my talk from 2016,  

00:03:55,520 --> 00:04:01,200
I was saying we want data access to our content.  It will be revolutionary. I swear. We didn't have  

00:04:01,200 --> 00:04:06,960
a really compelling argument why. We were coming  at this from this perspective. We were saying  

00:04:06,960 --> 00:04:14,080
obviously we need WordPress data API. It would be  so great if we had one. We can do all these cool  

00:04:14,080 --> 00:04:18,400
things. We'll have flying cars. We'll have new  editing interfaces. We can do machine learning.  

00:04:19,760 --> 00:04:28,800
And what we realized, as we were challenged on  this, was that we were in fact so blind to any  

00:04:28,800 --> 00:04:34,400
argument that this couldn't be a good thing that  we were sort of beginning to look at anyone who is  

00:04:34,400 --> 00:04:38,080
arguing against it in a negative light.  And in the honor of it being May 4th,  

00:04:38,880 --> 00:04:43,760
we were hoping we could merge the darn  thing, have a giant party, move on,  

00:04:43,760 --> 00:04:48,960
and not worry about it for years. I'll come back  to the overextended Star Wars metaphor later. 

00:04:54,400 --> 00:04:59,200
The release lead, who was in charge of  saying, yes, you get to put this in or no,  

00:04:59,200 --> 00:05:03,520
you don't, she challenged us and called us  on our bullshit and said, who is this for?  

00:05:06,160 --> 00:05:12,160
We didn't have a good answer for  that. I'm sorry about that. We  

00:05:12,160 --> 00:05:17,440
were not necessarily in a position  where we were looking that closely on  

00:05:18,480 --> 00:05:25,360
the potential use cases beyond the ones that we  already had in mind. It wasn't until we started  

00:05:25,360 --> 00:05:29,920
getting the plugin developer community on board  that we were able to come to the realization  

00:05:29,920 --> 00:05:35,280
that what an API provided was not just a solution  to our problems because we could have continued  

00:05:35,280 --> 00:05:42,560
to do those if we had left it as a plugin, but  having an API in core gave us interoperability.  

00:05:42,560 --> 00:05:48,480
It gave us a foundation where all the plugins  that people write for WordPress can have common  

00:05:48,480 --> 00:05:54,080
expectations around how they can access and  manipulate data. One plugin can add or adjust  

00:05:54,080 --> 00:05:59,520
the data of another in the way that WordPress  has always been such a strong, strong tool. 

00:06:01,280 --> 00:06:07,680
In the end, in 2016, it did get merged. It went  on to power Gutenberg. We actually defined several  

00:06:07,680 --> 00:06:14,480
major metrics for success. We sort of set our  own bar, which we didn't end up living up to in  

00:06:14,480 --> 00:06:21,600
some ways, but we did get that one major feature  project with Gutenberg. Because the major thing  

00:06:21,600 --> 00:06:25,840
that really began to demonstrate the value of  the API was the Gutenberg project and that didn't  

00:06:25,840 --> 00:06:30,720
launch for several versions after, there was  an argument on whether we should have waited,  

00:06:30,720 --> 00:06:38,560
whether we should have potentially merged this  as a component of the Gutenberg project itself.  

00:06:39,520 --> 00:06:45,680
I think we did benefit from the co‑creation  aspect where an API contract is a standard,  

00:06:45,680 --> 00:06:50,400
and standards are best when they're challenged  from a variety of perspectives. I think the  

00:06:50,400 --> 00:06:55,360
downside to having done something like the REST  API as a part of Gutenberg would have been it  

00:06:55,360 --> 00:07:00,880
would make it too tailored to that particular  editor use case and some of the reader or other  

00:07:00,880 --> 00:07:06,080
app integration use cases that we were considering  might not have been as possible as they were.  

00:07:06,080 --> 00:07:10,320
I actually consider it to be a major success  that we were able to launch with as little change  

00:07:10,880 --> 00:07:18,240
to the editor as we did. Sorry, to the API  in order to build the editor as we did. 

00:07:21,360 --> 00:07:26,560
So, the one area where we know we definitely  made a misstep, it powers Gutenberg. That's  

00:07:26,560 --> 00:07:33,440
fine. If we want to go beyond where we are now,  we never considered versioning core construct.  

00:07:46,800 --> 00:07:53,040
They're all communicated over HTTP. That constant  really isn't accounted for anywhere else. We  

00:07:53,040 --> 00:07:59,200
didn't give ourselves the ability to progressively  and gradually update the version the way we might  

00:07:59,200 --> 00:08:03,680
have been able to if we followed a path like ‑‑ I  think Stripe does this very well with their API. 

00:08:05,520 --> 00:08:13,440
One thing Gutenberg did impact is user  capabilities. This is another area where  

00:08:14,000 --> 00:08:23,440
we considered the resources in a WordPress site,  like a post, an article, a media item, to be kind  

00:08:23,440 --> 00:08:30,240
of holistic entities. The reason plugins are  possible is because there's a variety of seams  

00:08:30,240 --> 00:08:38,080
throughout the application where you can insert,  adjust, remove, or filter data. That includes the  

00:08:38,080 --> 00:08:44,880
capabilities that a user has. There could be users  where, based on custom code, they only have access  

00:08:44,880 --> 00:08:56,960
to a certain post on a certain site. They have  tightly rigorously controlled media outlets or  

00:08:58,240 --> 00:09:02,720
banks and financial institutions where there's  regulatory requirements where not every user is  

00:09:02,720 --> 00:09:09,520
going to have access to everything, even within  the same item. This question of who can access an  

00:09:09,520 --> 00:09:14,880
individual field in our API, who can modify  an individual field was not something that  

00:09:14,880 --> 00:09:19,680
we really accounted for. We just had a sense of  either you had access to the post or you didn't. 

00:09:24,560 --> 00:09:30,160
We adapted JSON hyper‑schemas target  schema property to be able to communicate  

00:09:30,160 --> 00:09:33,680
actions that were available on a  resource. When we were editing it,  

00:09:33,680 --> 00:09:39,040
we exposed what the currently authenticated  user is able to do in the links property.  

00:09:39,680 --> 00:09:46,560
It feels very bolted on, and it feels like  we were not aware of at the time how the  

00:09:48,240 --> 00:09:54,560
flexibility of our data was going to be limited  by the degree of control we had over who was able  

00:09:54,560 --> 00:09:59,840
to access it. I think that something I've  learned about the data from this project is  

00:10:00,640 --> 00:10:05,920
there's always a complexity to what type  of user has access to different actions.  

00:10:06,800 --> 00:10:10,640
I think I'm still interested in figuring out  whether there's a better way to solve these  

00:10:10,640 --> 00:10:17,840
problems if we do eventually end up solving that  version issue and launch a V3 in some fashion. 

00:10:18,720 --> 00:10:23,520
In addition to providing access  to specific fields on responses,  

00:10:23,520 --> 00:10:28,560
we also took a really long time to support  authentication from external applications.  

00:10:30,000 --> 00:10:34,960
In the spirit of an API only being as good as  what you can do with it, when we launched the  

00:10:34,960 --> 00:10:39,840
REST API in WordPress, it would only let you  authenticate responses from a logged in browser  

00:10:39,840 --> 00:10:48,320
session using a cookie and knot system. They  didn't actually meet ‑‑ they didn't actually  

00:10:51,440 --> 00:10:55,600
cut the mustard for a variety of reasons  in terms of what we could merge in core.  

00:10:55,600 --> 00:11:01,600
They had insufficient documentation. A lot of  them didn't have good example code. These are  

00:11:01,600 --> 00:11:07,920
things you need to make an authentication system  usable, but I think many of them were closer  

00:11:07,920 --> 00:11:12,960
than we realized. Unfortunately, I think it is  probably on me, as the steward of the project  

00:11:13,840 --> 00:11:18,640
up through 2019, that I kept saying, no, I  don't think we should do this authentication  

00:11:18,640 --> 00:11:25,200
thing. I think we should do something better. I  let the lack of a really compelling system with  

00:11:25,200 --> 00:11:31,200
good documentation and good user support hold  us back from getting something that was broadly  

00:11:31,200 --> 00:11:36,000
applicable into core. Gutenberg can operate  within the admin. The authentication system  

00:11:36,000 --> 00:11:43,440
we had in place was fine, but it doesn't work for  the Android and iOS scripts. It doesn't work for a  

00:11:48,160 --> 00:11:57,600
software‑as‑a‑service external application. By  saying we had to wait for someone to bequeath us  

00:11:57,600 --> 00:12:04,160
a fully documented, fully user example authored  plugin that we could then merge, I was saying an  

00:12:04,160 --> 00:12:10,720
impossibly high bar for getting something out the  door. I want to give full props to Timothy Jacobs.  

00:12:18,880 --> 00:12:23,280
If you've been waiting since 2016 to write an  app that integrates with WordPress, now is a  

00:12:23,280 --> 00:12:28,240
really good time to finally get on that, but I  do think it was a mistake that we took that long. 

00:12:30,160 --> 00:12:34,640
Unfortunately, one of the reasons why I think  I dragged my heels on a lot of these things and  

00:12:34,640 --> 00:12:41,280
why I feel like I have held the project back is  around burnout. This is the last major thing I  

00:12:41,280 --> 00:12:47,040
want to get into. We were all extraordinarily  optimistic about this project in 2016.  

00:12:47,680 --> 00:12:55,760
All of us, the lead developers on the project,  Ryan and Rachel, were putting in so much effort.  

00:12:55,760 --> 00:13:00,160
We had over 100 individual contributors  in the plugin stage. We've had more since.  

00:13:00,720 --> 00:13:08,960
There was so much effort to get it into core that  when we met with challenges, like skepticism,  

00:13:10,480 --> 00:13:15,040
we just pushed harder. I think we got a lot  of particular pushback from Matt Mullenweg,  

00:13:15,040 --> 00:13:27,680
the CEO of Automattic. The buck stops with  him on decision‑making. I still don't fully  

00:13:27,680 --> 00:13:34,560
understand all of his arguments against the API,  but during the proposal stage and even long since,  

00:13:34,560 --> 00:13:38,000
there's been a lot of talk over  why is this useful. I feel like  

00:13:39,120 --> 00:13:43,120
most of us who were involved in the project and  all of the plugin developers who rallied around  

00:13:43,120 --> 00:13:48,080
it to help make the case for it being merged saw  the potential of what went on to become Gutenberg,  

00:13:48,080 --> 00:13:54,400
what went on to become these other systems, but  this sense we were fighting uphill while coupled  

00:13:54,400 --> 00:14:02,400
with reasonable criticism that Helen was leveling  against us, at least for some of us, it encouraged  

00:14:02,400 --> 00:14:10,560
an "us versus them" attitude. In open source,  coming at the perspective of being a heroic is  

00:14:12,160 --> 00:14:16,640
tantalizing but also harmful. >> Five‑minute warning. 

00:14:16,640 --> 00:14:26,640
>> K ADAM: Going back to Star Wars,  they had to make them underdogs again,  

00:14:29,600 --> 00:14:33,520
but that's not a successful model for  collaboration on an open‑source project.  

00:14:34,880 --> 00:14:41,520
The success we've seen around the REST API is when  we've reduced this and have folks like Timothy  

00:14:41,520 --> 00:14:46,880
drive the development of this without the baggage  of having participated in that merge discussion.  

00:14:47,440 --> 00:14:53,440
We've had the developers of Gutenberg take  ownership of their components and bring that lens  

00:14:53,440 --> 00:15:00,480
of, we need this for our core WordPress tasks of  this Block Editor, but can we make this endpoint  

00:15:00,480 --> 00:15:08,160
broadly usable? That's taken hold in the project  contributor team, and that's getting us through  

00:15:08,160 --> 00:15:14,880
this, but I definitely call myself out for getting  to a point where I was feeling frustrated, which  

00:15:14,880 --> 00:15:19,680
accelerated the actual sort of normal open‑source  contributor burnout that I experienced. 

00:15:20,400 --> 00:15:25,520
I'll call out folks like Matt, who continue  to say, I don't know if we need it or I  

00:15:25,520 --> 00:15:30,000
don't know if it should be merged, long  after because that made it much harder  

00:15:30,000 --> 00:15:37,200
for us to bring in new contributors. If you don't  have a continual stream of new contributors,  

00:15:37,760 --> 00:15:42,720
over time people change focus unless they've  made a business out of something. Open‑source  

00:15:42,720 --> 00:15:51,040
projects rely on not just a low barrier to  entry but having components that people can  

00:15:51,040 --> 00:15:56,960
feel excited about. Negative talk about a critical  piece of software by the lead of that software  

00:15:57,680 --> 00:16:03,040
makes it hard to rally the troops around getting  people excited to continue making it better. 

00:16:05,680 --> 00:16:08,480
To avoid ending on a bad note, I will say again  

00:16:09,760 --> 00:16:13,120
even though most of us that worked on the  plugin have taken a bit of a step back,  

00:16:13,680 --> 00:16:19,040
we have seen a lot of success in this. It  does continue to be a very solid foundation,  

00:16:19,040 --> 00:16:23,280
and I think it will be complemented by other types  of API that might be introduced until the future,  

00:16:23,280 --> 00:16:28,400
like GraphQL. Those meet very different  concerns and are both relevant going forward.  

00:16:30,000 --> 00:16:35,600
Broadly speaking, it has definitely been worth it  because the fact that we've made these APIs for  

00:16:35,600 --> 00:16:40,320
problems that we've experienced and for the Block  Editor has had an interesting curb cutting effect  

00:16:40,320 --> 00:16:51,360
around making it easier to start using WordPress  data at all. The previous API was XML RPC. By  

00:16:51,360 --> 00:16:54,480
replacing it with JSON, we were making something  easier for us to code. It's also easier for us to  

00:16:57,520 --> 00:17:04,640
understand. As Ashley called out at a conference  a number of years ago, this has had the effect  

00:17:04,640 --> 00:17:10,240
of making it easier for anybody getting  involved in making data for WordPress easier. 

00:17:12,640 --> 00:17:18,960
In summary, we need to know why having a standard  matters. We need to be able to articulate that  

00:17:18,960 --> 00:17:23,680
clearly if you're going to sway a large community  project like this. We need to plan for versioning.  

00:17:25,600 --> 00:17:30,320
You need to be able to have access to data and  know what level of access you have within any  

00:17:30,320 --> 00:17:35,680
object for it to be really useful. It's never "us  versus them" in a free and open‑source community.  

00:17:36,880 --> 00:17:42,400

YouTube URL: https://www.youtube.com/watch?v=OBVg5x8uQ6M


