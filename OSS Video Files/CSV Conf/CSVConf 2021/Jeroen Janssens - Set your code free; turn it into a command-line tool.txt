Title: Jeroen Janssens - Set your code free; turn it into a command-line tool
Publication date: 2021-05-19
Playlist: CSVConf 2021
Description: 
	If your data analyses involve coding, then you know how liberating it is to use and create functions. They hide complexity, improve testability, and enable reusability. In this talk I explain how you can really set your code free: by turning it into a command-line tool. The command line can be a very flexible and efficient environment for working with data. It's specialized in combining tools that are written in all sorts of languages (including Python and R), running them in parallel, and applying them to massive amounts of (streaming) data. Although the command line itself has quite a learning curve, turning your existing code into a tool is, as I demonstrate, a matter of a few steps. I discuss how your new tool can be combined with existing tools in order to obtain, scrub, explore, and model data at the command line. Finally, I share some best practices regarding interface design and distribution.
Captions: 
	00:00:04,560 --> 00:00:04,960
thank you

00:00:07,120 --> 00:00:13,520
and hello there my name is jeroen and in the  next 20 minutes i'm gonna try to convince you  

00:00:14,240 --> 00:00:20,640
that if you have written some code that you should  consider turning it into a command line tool

00:00:23,440 --> 00:00:28,240
in the next 20 minutes this is what i have  in mind i'm going to say a few words about  

00:00:28,240 --> 00:00:33,840
myself so that you know where i'm coming from i'm  going to briefly explain what the command line is  

00:00:33,840 --> 00:00:40,160
what tools are and most importantly why you should  care about this then we're actually going to  

00:00:40,160 --> 00:00:47,360
build a command line tool so that you can see  how that process goes and then i'm gonna wrap up

00:00:50,160 --> 00:00:56,400
so a few words about myself i have a background  in computer science and artificial intelligence  

00:00:56,400 --> 00:01:04,560
i did my phd in machine learning and this was  around 2010 and back then i worked in windows and  

00:01:04,560 --> 00:01:13,200
i coded everything in matlab and my code was not  free at all i wasn't thinking in tools so to speak  

00:01:14,960 --> 00:01:23,360
so after my phd i moved to new york to work as  a data scientist at various startups and that's  

00:01:23,360 --> 00:01:29,040
where things changed i got the opportunity to  write this book data science at the command  

00:01:29,040 --> 00:01:36,720
line currently working very hard on the second  edition which should come out somewhere in october  

00:01:37,520 --> 00:01:43,600
you can read both editions for free if you're  interested at data science commandline dot com

00:01:46,080 --> 00:01:52,960
and if i am not writing i'm spending  my time coaching and training others  

00:01:52,960 --> 00:01:56,880
in a variety of topics related to data science

00:01:59,360 --> 00:02:04,960
so about that title now there are a  couple of interpretations of the word free  

00:02:04,960 --> 00:02:10,640
there's free as in beer there is free  as in speech but i'm not going to talk  

00:02:10,640 --> 00:02:15,840
about those things i'm also not going to  talk about versioning code packaging code  

00:02:15,840 --> 00:02:22,320
and distributing code they're all important  yes but they're outside the scope of this talk  

00:02:22,320 --> 00:02:28,880
now i'm going to talk about free as  in bird in the sense that your code is  

00:02:29,520 --> 00:02:42,320
light and can go everywhere it pleases the command  line is a stark and unforgiving environment but if  

00:02:42,320 --> 00:02:50,160
you know which spells to cast it can offer  unlimited possibilities so um a while ago  

00:02:51,840 --> 00:02:59,040
in february nature argued that researchers should  embrace the command line they say that it can help  

00:02:59,040 --> 00:03:05,840
you wrangle big files and that it can parallelize  your experiments and automate your work  

00:03:06,800 --> 00:03:12,880
and yes there are plenty of of  other reasons um most importantly  

00:03:13,840 --> 00:03:21,200
it can save you from velociraptors but i'm not  here to convince you to use the command line no  

00:03:21,200 --> 00:03:27,440
i want you to consider to turn your code into  a command line tool so something that can  

00:03:27,440 --> 00:03:35,200
be executed from the command line and that  can interact with other command line tools

00:03:39,040 --> 00:03:45,680
and the real reason i am talking to you about this  topic is that because i believe that command line  

00:03:45,680 --> 00:03:58,240
tools enable these yeah wider community ideals um  that i read here on about csv conf so those are  

00:03:58,800 --> 00:04:03,680
interoperability hackability and simplicity  i took the liberty of not highlighting data  

00:04:04,560 --> 00:04:10,080
because there can of course also be  interoperability regarding tools so  

00:04:11,840 --> 00:04:18,640
command line tools are are simple well most  of them are they usually do one thing and they  

00:04:18,640 --> 00:04:26,720
do it well they're hackable in the sense that  you can combine tools right they they all have  

00:04:26,720 --> 00:04:33,840
text as a universal language and  there's also a sense of interoperability  

00:04:33,840 --> 00:04:43,360
in yeah regarding that you are able to leverage  the tools and the command line in other places  

00:04:44,560 --> 00:04:52,880
so for example here is a here's jupiter  lab right i'm showing here some python  

00:04:52,880 --> 00:04:57,760
code there's a jupyter notebook and there  is a full terminal here at the bottom  

00:04:58,320 --> 00:05:07,840
all showing different ways in which you can  use the command line within python so plenty  

00:05:07,840 --> 00:05:17,120
of programming languages and environment have  this ability also r and rstudio allow you to use

00:05:20,160 --> 00:05:28,000
the command line and their tools so  excuse me yeah you wanted to say something  

00:05:28,000 --> 00:05:36,240
i'm sorry your your slides aren't popping up oh oh  my you've just been looking at my face and that's  

00:05:36,240 --> 00:05:44,000
the that's the least important thing of of all  i forgot to press this button oh my and just the  

00:05:44,000 --> 00:05:50,640
thing that i worked so hard on these slides so  how are we doing on time i have plenty of time  

00:05:50,640 --> 00:05:56,160
left so let's just you're good i was thinking  where is all the laughter i mean all these

00:05:58,560 --> 00:06:00,000
yeah i'm working on this book

00:06:02,640 --> 00:06:09,040
yeah data science at the command line  here we go my company free as in bird  

00:06:09,040 --> 00:06:13,360
this is what the command line looks  like in case you have not seen it before

00:06:17,840 --> 00:06:22,880
there's this nature article which you should be  able to find if you google for nature and bash

00:06:25,440 --> 00:06:29,840
now this of course refers to well i'm not  going to explain it you see the slides

00:06:33,200 --> 00:06:40,400
these are the core values of csv conf  there's value in repeating all this of course  

00:06:41,360 --> 00:06:48,240
uh jupiter lab r r studio well i'm  glad you you told me thank you for that  

00:06:48,800 --> 00:06:54,560
and even spark here i highlighted a sentence  from the book spark the definitive guide by  

00:06:55,200 --> 00:07:03,120
the original author of of spark and they say  the pipe method is probably one of spark's more  

00:07:03,120 --> 00:07:10,800
interesting methods now and i think that's quite a  compliment um coming from well the author of this  

00:07:10,800 --> 00:07:18,720
800 pound gorilla when it comes to wrangling a lot  of data and i i think it's really interesting that  

00:07:18,720 --> 00:07:24,720
they've decided to add the functionality  to leverage a 50 year old technology

00:07:27,360 --> 00:07:33,760
so now that i have sort of  established uh what command line is uh  

00:07:35,200 --> 00:07:42,080
tools we're gonna look at tools in a moment uh but  also that it's in a in a lot of different places  

00:07:42,080 --> 00:07:47,680
right not only different programming languages and  environments but it can be found on supercomputers  

00:07:48,560 --> 00:07:54,320
to microcontrollers and of course on  your laptops even windows now with it's a  

00:07:54,880 --> 00:08:02,160
wsl windows subsystem for linux you  can easily run a unix command line  

00:08:02,160 --> 00:08:14,320
on your windows system so it's everywhere and  it's here to stay so so about turning um your  

00:08:14,320 --> 00:08:21,760
code into a tool right all you have to do is  follow these six easy steps now i can imagine  

00:08:21,760 --> 00:08:27,680
that right now you're feeling a bit like alice  tumbling down the rabbit hole oh don't worry  

00:08:28,240 --> 00:08:39,840
let's all just take the red pill and i show you  how deep the rabbit hole goes and let's go to

00:08:42,960 --> 00:08:43,520
here we go

00:08:47,360 --> 00:08:53,200
if you don't see the full screen i now have  jupiter lab open what i've learned about  

00:08:53,200 --> 00:09:00,880
crowdcast is that if you resize your browser if  you make it a bit wider the aspect ratio changes  

00:09:00,880 --> 00:09:10,080
and the entire slide or my entire screen should be  visible so in this demonstration i'm going to use  

00:09:10,640 --> 00:09:17,120
python but the same principles apply to  other programming languages right if your  

00:09:17,120 --> 00:09:25,200
weapon of choice is r or javascript or  java the same steps right the syntax  

00:09:25,200 --> 00:09:31,280
will be slightly different but the same  steps can be taken so i've also chosen a  

00:09:31,280 --> 00:09:38,560
very simple example so that we can focus  on the process itself rather than the code

00:09:42,000 --> 00:09:48,480
so here we've got some some analysis right  what we're going to do here in this piece  

00:09:48,480 --> 00:09:55,360
of code is we're going to open up a text  file that contains the adventures of alice  

00:09:55,360 --> 00:10:00,720
in wonderland and we're going to count  the number of lines that contain the term

00:10:01,360 --> 00:10:11,120
alice then we're going to print the result now now  of course it's up to you to use your imagination  

00:10:11,120 --> 00:10:20,320
and think like okay how does that apply to my  code right um so the very first step although  

00:10:20,320 --> 00:10:27,760
it's a bit trivial at this point is to copy  this uh to a file right a regular text file

00:10:30,240 --> 00:10:35,920
and that's what i have right here that's the  that's the first step that you need to do  

00:10:35,920 --> 00:10:43,760
and this becomes more complicated when  of course your uh code is uh scattered  

00:10:43,760 --> 00:10:48,560
across many different files  or notebooks and so forth

00:10:54,080 --> 00:11:01,760
let's see now i shoot where is my command  line oh there it's hiding let's move that

00:11:05,120 --> 00:11:12,400
over here so now you should see click  on that line got a couple of files here  

00:11:12,400 --> 00:11:22,240
count.pie now let's first check that it's working  right 401 that's the number of times alice appears  

00:11:23,280 --> 00:11:31,360
in this text and this is again a really simple  command line tool in fact um what we've just

00:11:34,240 --> 00:11:41,840
did is i've implemented quite poorly  to be honest uh grep oh should be uh  

00:11:42,400 --> 00:11:49,200
right but that doesn't matter it's the process  like i said which matters so i'm now going to  

00:11:49,200 --> 00:11:55,840
take you uh through the steps that are needed in  order to turn this into a proper command line tool

00:11:59,760 --> 00:12:06,800
by the way if you have any questions um i  unfortunately don't have the time to look  

00:12:06,800 --> 00:12:13,520
at them now but there are various ways you  can get a hold of me after this session so  

00:12:14,880 --> 00:12:17,200
okay the very first thing we want to do

00:12:21,680 --> 00:12:24,960
not this file that is the text itself

00:12:31,760 --> 00:12:32,240
i'm gonna

00:12:34,960 --> 00:12:38,080
now let's let's copy that over from the previous  

00:12:38,080 --> 00:12:42,160
directory that will speed up  things a little bit faster

00:12:45,200 --> 00:12:50,400
so the very first step that we want to do  or the second step actually after we've  

00:12:50,400 --> 00:12:55,760
put things into a file is to add some arguments  right because this piece of code does this the  

00:12:55,760 --> 00:13:03,680
same thing over and over again right and in  order to make this tool more uh usable in in more  

00:13:03,680 --> 00:13:10,080
general you have to think about okay what are some  parts that can vary that i would like to change  

00:13:10,960 --> 00:13:21,120
and so what i've added here is this import  statement and i'm using the uh well uh an  

00:13:21,120 --> 00:13:28,000
argument that is passed here at the command line  the first element is always the name of of the  

00:13:28,000 --> 00:13:35,440
file and so the second element in python that  is element one that would be an argument so now

00:13:39,520 --> 00:13:47,840
what i could do well i can test if alice still  works but i could also try out other values

00:13:49,920 --> 00:13:53,280
so we've already made our code a little bit more  

00:13:53,280 --> 00:14:01,840
uh general um but of course there are  other things we can do now let's see

00:14:09,120 --> 00:14:19,440
um this piece of code only works on alice right  this code takes on the responsibility of opening  

00:14:19,440 --> 00:14:25,920
up a file and reading that file and it's the same  file over and over again now of course you could  

00:14:25,920 --> 00:14:33,040
turn that into an argument just like the pattern  is then yeah so alice hadn't get our that's an  

00:14:33,040 --> 00:14:42,000
argument so we could also turn the file name as  an argument but another um approach is to re let  

00:14:42,000 --> 00:14:50,560
your tool read from standard input so that's a  a standardized way of feeding data into a tool  

00:14:51,200 --> 00:14:59,280
and that's what this code is doing  it's let me put them side by side

00:15:02,880 --> 00:15:10,320
i guess if i do it like this so now we have  those two files side by side and you the  

00:15:10,320 --> 00:15:13,600
uh the second version here the newer version  

00:15:13,600 --> 00:15:19,520
is even a bit simpler it doesn't open a  file it just reads from standard input

00:15:22,080 --> 00:15:29,280
so it has moved that responsibility to  outside the tool so now we have to read it in  

00:15:30,080 --> 00:15:33,680
this is one way you can do it  and then we can pipe that into

00:15:36,400 --> 00:15:46,880
well okay so this works but now that this tool  is reading from standard input anything is  

00:15:46,880 --> 00:15:55,120
possible we could even this is your sorry this  is your five minute warning thank you very much  

00:15:56,800 --> 00:16:05,200
that's actually a minute more than i had i'm  gonna make use of it so it can read anything it  

00:16:05,200 --> 00:16:10,560
any any data that you feed into this it can now  handle so what i'm doing here is i'm using the  

00:16:10,560 --> 00:16:21,840
command line tool curl to download a file this is  the sequel to that book through the looking glass

00:16:27,840 --> 00:16:35,840
wow oh that took a long time to download  a uh a book i can i can silence that one  

00:16:36,960 --> 00:16:38,560
is it going to take that long still

00:16:40,720 --> 00:16:48,880
anyway you can see that alice is mentioned on  465 lines in this book so um there's already  

00:16:48,880 --> 00:16:56,400
a lot more possible now in fact it is just  text so so we could we could even generate  

00:16:57,040 --> 00:17:04,480
a uh a list of numbers here i'm generating 1  through 100 and i could type that to that tool  

00:17:05,840 --> 00:17:11,520
and say i want you to count the number  of times three a3 appears on a line

00:17:15,120 --> 00:17:19,680
so moving on because this doesn't really  feel like a proper command line tool right

00:17:26,080 --> 00:17:26,240
so

00:17:31,280 --> 00:17:34,400
what i've changed here is  i've added a single line here  

00:17:35,360 --> 00:17:41,760
these two first characters that that is known  as the shebang or hashbang and this lets  

00:17:42,400 --> 00:17:48,960
the command line or the shell know that this  is executable and what's here what follows  

00:17:48,960 --> 00:17:55,920
that is the program which is responsible  for interpreting uh this source code now  

00:17:57,040 --> 00:18:01,840
unfortunately or no that's not really  unfortunately we need one more step in order  

00:18:01,840 --> 00:18:12,800
to uh make this work and that is we need to change  the permissions on the on this file so otherwise  

00:18:12,800 --> 00:18:20,080
we would we would get an error like hey you don't  have to write permissions so now what i can do is

00:18:22,400 --> 00:18:27,840
i could use it like so

00:18:30,080 --> 00:18:31,680
and then i guess if you change  

00:18:33,120 --> 00:18:37,200
this to just being count because the  command line doesn't really care about

00:18:37,760 --> 00:18:41,840
extensions

00:18:46,960 --> 00:18:52,400
right this already starts to feel more  like a proper tool now there's one uh  

00:18:52,400 --> 00:18:58,480
final step i'm gonna leave that as a take home  exercise you'll be able to find it in my book  

00:18:59,040 --> 00:19:07,120
let's uh let's wrap up because i have a  few closing thoughts here so these steps  

00:19:07,120 --> 00:19:16,080
i'd say are pretty easy it's the thinking about  what goes into this tool that is hard right um  

00:19:17,040 --> 00:19:24,480
once you have a tool yeah even if you don't use  it yourself it will benefit others yeah if you  

00:19:24,480 --> 00:19:30,720
at least of course want others to be able to use  your tool they would then and perhaps you as well  

00:19:31,600 --> 00:19:38,400
able to tap into the existing ecosystem of all  these command line tools so all this functionality  

00:19:38,400 --> 00:19:50,080
of downloading files of scheduling of monitoring  and parallelizing even all becomes available and  

00:19:50,080 --> 00:19:55,520
then i haven't even thought uh talked about  packaging and distribution which is is uh is  

00:19:55,520 --> 00:20:06,560
very important in itself so that's my talk thank  you very much for listening i hope i've been able  

00:20:06,560 --> 00:20:12,560
to sort of convince you if you need further  convincing if you have any questions at all  

00:20:12,560 --> 00:20:23,280
um you can leave a message on slack or you can  send me a tweet i'm on twitter here and again  

00:20:24,000 --> 00:20:31,280

YouTube URL: https://www.youtube.com/watch?v=u-HcZTvLygA


