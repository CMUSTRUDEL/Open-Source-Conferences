Title: Beyond the WARC: Making Web Archives More Useful and User-friendly - Ilya Kreymer
Publication date: 2019-05-19
Playlist: CSVConf 2019
Description: 
	Archives of the web contain not only web pages but any type of data. The only standard in web archiving is the ISO WARC file format, which specifies raw data captured from the web. However, the WARC files often lack any context or metadata about how this data was captured. The talk will briefly cover the basics of the WARC format, and also provide possible ideas for making web archiving data more user-friendly, present existing tools and suggest ideas for interoperable ways to describe collections and make sense of growing web archive data beyond the WARC format.

Slides: 
Talk page: https://csvconf.com/speakers/#ilya-kreymer
Captions: 
	00:00:00,580 --> 00:00:06,490
everyone great to be here I'll be

00:00:03,790 --> 00:00:08,559
talking about web archiving data and

00:00:06,490 --> 00:00:10,629
tools and so I'll be talking about work

00:00:08,559 --> 00:00:13,090
files which is one of the components of

00:00:10,629 --> 00:00:14,920
web archives and then the second part of

00:00:13,090 --> 00:00:19,870
demo tool I've been working on for the

00:00:14,920 --> 00:00:22,750
past several years and so a little bit

00:00:19,870 --> 00:00:24,160
about me I've been working on open

00:00:22,750 --> 00:00:26,800
source web archiving tools for the last

00:00:24,160 --> 00:00:28,960
eight years now initially I was working

00:00:26,800 --> 00:00:31,420
at the Internet Archive on the wayback

00:00:28,960 --> 00:00:34,390
machine there and I create a project

00:00:31,420 --> 00:00:36,670
called web reporter 2015 and I've been

00:00:34,390 --> 00:00:39,000
leading development honored at rhizome

00:00:36,670 --> 00:00:44,980
org just a digital arts a nonprofit

00:00:39,000 --> 00:00:47,920
since 2016 and so kind of started at the

00:00:44,980 --> 00:00:52,050
basics so what is web archiving exactly

00:00:47,920 --> 00:00:55,300
and well basically idea is that it's

00:00:52,050 --> 00:00:56,829
essentially capturing storing in some

00:00:55,300 --> 00:00:59,500
way in providing access to web content

00:00:56,829 --> 00:01:01,390
that there could be additional parts to

00:00:59,500 --> 00:01:04,360
it but that's sort of the key the key

00:01:01,390 --> 00:01:06,399
parts that as I see it and it's actually

00:01:04,360 --> 00:01:08,100
quite distinct from scraping or

00:01:06,399 --> 00:01:10,119
extraction since we're not trying to

00:01:08,100 --> 00:01:14,109
extract certain types of data from the

00:01:10,119 --> 00:01:17,139
web one to get everything such that it's

00:01:14,109 --> 00:01:20,409
preserved in an archival fashion and

00:01:17,139 --> 00:01:21,819
it's also not saving URLs because that's

00:01:20,409 --> 00:01:24,490
a little bit different we're actually

00:01:21,819 --> 00:01:27,359
saving only think of the web we think of

00:01:24,490 --> 00:01:31,389
HTTP as the main protocol of the web and

00:01:27,359 --> 00:01:33,670
so web archiving involves capturing the

00:01:31,389 --> 00:01:35,049
HTTP request and response traffic

00:01:33,670 --> 00:01:38,950
exactly as it comes down the wire

00:01:35,049 --> 00:01:41,649
essentially and another part to it is

00:01:38,950 --> 00:01:43,749
that web archiving doesn't have to mean

00:01:41,649 --> 00:01:46,060
archiving the entire web that's sort of

00:01:43,749 --> 00:01:47,499
how it perhaps initially started with

00:01:46,060 --> 00:01:49,240
the Internet Archive doing a lot of

00:01:47,499 --> 00:01:52,119
crawling but there's also other

00:01:49,240 --> 00:01:54,099
approaches to doing web archiving in

00:01:52,119 --> 00:01:57,789
particular what web archives could

00:01:54,099 --> 00:01:59,489
actually be quite small and targeted web

00:01:57,789 --> 00:02:02,859
archives and contains small down what

00:01:59,489 --> 00:02:07,719
objects essentially just one or two

00:02:02,859 --> 00:02:09,910
pages or a single website and it's also

00:02:07,719 --> 00:02:11,890
possible to focus on the quality of a

00:02:09,910 --> 00:02:13,280
live archive rather than sort of how

00:02:11,890 --> 00:02:15,080
many pages you've captured

00:02:13,280 --> 00:02:20,390
and that the quality is also really

00:02:15,080 --> 00:02:23,450
important and so why why I do love

00:02:20,390 --> 00:02:25,700
archiving well actually a really great

00:02:23,450 --> 00:02:29,210
example is this graphic that I've said

00:02:25,700 --> 00:02:31,400
it's now a couple years old from the

00:02:29,210 --> 00:02:34,040
British Library or one of the

00:02:31,400 --> 00:02:38,330
institutions I do web archiving and it

00:02:34,040 --> 00:02:40,850
kind of shows that now over that gray

00:02:38,330 --> 00:02:43,190
and black area are the pages that have

00:02:40,850 --> 00:02:47,360
essentially disappeared from the web and

00:02:43,190 --> 00:02:51,640
are no longer available and so over a

00:02:47,360 --> 00:02:54,050
time span of ten years possibly sooner

00:02:51,640 --> 00:02:56,450
and anything that's online will

00:02:54,050 --> 00:02:58,520
eventually likely to no longer be

00:02:56,450 --> 00:03:00,590
available and actually a pretty

00:02:58,520 --> 00:03:02,720
important secondary reason that I think

00:03:00,590 --> 00:03:05,360
I want to mention after the last couple

00:03:02,720 --> 00:03:06,880
talks is that web archiving can also be

00:03:05,360 --> 00:03:09,020
an essential component of

00:03:06,880 --> 00:03:12,290
reproducibility because of how much

00:03:09,020 --> 00:03:14,590
content is actually on the web and I'll

00:03:12,290 --> 00:03:21,410
get to that a little bit later as well

00:03:14,590 --> 00:03:25,400
and so starting where is how is the web

00:03:21,410 --> 00:03:27,950
archive data stored and the key format

00:03:25,400 --> 00:03:31,610
for web archives is what's called the

00:03:27,950 --> 00:03:34,430
work format or sometimes referred to as

00:03:31,610 --> 00:03:37,430
the work file and it's basically created

00:03:34,430 --> 00:03:41,150
in collaboration in an archive and many

00:03:37,430 --> 00:03:43,780
national libraries in 2005 it's

00:03:41,150 --> 00:03:45,769
currently an ISO standard so it's a

00:03:43,780 --> 00:03:48,070
there's actually two revisions of the

00:03:45,769 --> 00:03:52,549
ISO standard the first one was in 2005

00:03:48,070 --> 00:03:54,560
second was in 2016 and it's designed to

00:03:52,549 --> 00:03:57,880
essentially package HTTP requests and

00:03:54,560 --> 00:04:01,100
responses and also support deduplication

00:03:57,880 --> 00:04:02,660
metadata and actually also storing

00:04:01,100 --> 00:04:06,019
essentially storing arbitrary resources

00:04:02,660 --> 00:04:09,440
in this package format and so look

00:04:06,019 --> 00:04:12,590
quickly I'll show an example of some of

00:04:09,440 --> 00:04:17,479
these work records essentially the work

00:04:12,590 --> 00:04:21,859
records are concatenated together and an

00:04:17,479 --> 00:04:23,900
example is not something like this I

00:04:21,859 --> 00:04:27,020
know it might might be a bit hard to see

00:04:23,900 --> 00:04:31,920
but essentially it's

00:04:27,020 --> 00:04:34,860
mine style headers before the HTTP

00:04:31,920 --> 00:04:38,070
headers and then after that is HTTP

00:04:34,860 --> 00:04:41,160
payload so essentially saving the entire

00:04:38,070 --> 00:04:43,680
HTTP transaction with additional

00:04:41,160 --> 00:04:46,590
metadata inserted in front of it and

00:04:43,680 --> 00:04:49,590
there's also usually a digest that

00:04:46,590 --> 00:04:52,560
represents a unique essentially that the

00:04:49,590 --> 00:04:57,690
hash of the of the payload so it can be

00:04:52,560 --> 00:05:00,840
duplicated and so that can include the

00:04:57,690 --> 00:05:02,100
HTTP response record and the request

00:05:00,840 --> 00:05:05,130
record is in a similar format

00:05:02,100 --> 00:05:08,420
essentially stores the the request

00:05:05,130 --> 00:05:10,980
received during the HTTP transaction and

00:05:08,420 --> 00:05:14,490
that can include not just get requests

00:05:10,980 --> 00:05:20,070
if include any HTTP verbs so I'm going

00:05:14,490 --> 00:05:22,530
post put where you know even delete so

00:05:20,070 --> 00:05:24,450
when when archiving a URL for example

00:05:22,530 --> 00:05:29,520
actually involves storing both the

00:05:24,450 --> 00:05:31,290
request that was sent to a server to get

00:05:29,520 --> 00:05:36,870
that URL and the response received from

00:05:31,290 --> 00:05:38,870
the server and unfortunately the the

00:05:36,870 --> 00:05:41,610
work limit does have a few limitations

00:05:38,870 --> 00:05:46,860
one is that there's no index of records

00:05:41,610 --> 00:05:49,680
it's just essentially a listing there's

00:05:46,860 --> 00:05:52,260
no will define that a data format it's

00:05:49,680 --> 00:05:55,590
it's essentially you know you can put

00:05:52,260 --> 00:05:58,470
arbitrary data in there but there's not

00:05:55,590 --> 00:06:04,260
a specified format other than this sort

00:05:58,470 --> 00:06:06,300
of headers and and the payload after

00:06:04,260 --> 00:06:08,730
that and so it's a it's extensible which

00:06:06,300 --> 00:06:10,980
is great but also a bit limiting its in

00:06:08,730 --> 00:06:14,730
some ways there's not a way to specify

00:06:10,980 --> 00:06:17,250
starting pages which are URLs that you

00:06:14,730 --> 00:06:19,710
might want to load in order to actually

00:06:17,250 --> 00:06:24,210
browser web a web page because it can

00:06:19,710 --> 00:06:26,670
contain any data and there's also not

00:06:24,210 --> 00:06:31,110
really support for some of the more

00:06:26,670 --> 00:06:32,430
recent web features such as WebSockets

00:06:31,110 --> 00:06:35,550
for example there's not really a way to

00:06:32,430 --> 00:06:38,130
store WebSockets in work files or

00:06:35,550 --> 00:06:39,900
represent dynamic history changes that

00:06:38,130 --> 00:06:43,370
you might see in a

00:06:39,900 --> 00:06:48,660
and in a single-page app for instance

00:06:43,370 --> 00:06:52,050
and so one way to deal with that is the

00:06:48,660 --> 00:06:54,120
key part is that we have is the URL

00:06:52,050 --> 00:06:56,130
index so in order to actually get some

00:06:54,120 --> 00:06:59,570
something out of the work file you need

00:06:56,130 --> 00:07:01,260
to be able to look it up by by a URL and

00:06:59,570 --> 00:07:04,080
unfortunately there isn't really a

00:07:01,260 --> 00:07:07,110
standard for the sort of the work file

00:07:04,080 --> 00:07:09,000
is sort of the main standard web

00:07:07,110 --> 00:07:12,360
archiving data structure that that is

00:07:09,000 --> 00:07:17,040
out there the RFU kind of pseudo

00:07:12,360 --> 00:07:21,860
standards and it's actually a text-based

00:07:17,040 --> 00:07:27,240
space delimited whoo format for

00:07:21,860 --> 00:07:29,490
essentially looking at entries in this

00:07:27,240 --> 00:07:32,550
work file and it was popularized by

00:07:29,490 --> 00:07:35,940
Internet Archive and it looks something

00:07:32,550 --> 00:07:38,960
like this basically a single line

00:07:35,940 --> 00:07:45,500
represents an entry in a work file a

00:07:38,960 --> 00:07:49,620
more recent variation of this includes

00:07:45,500 --> 00:07:52,740
essentially instead of just space

00:07:49,620 --> 00:07:55,950
delimited we put all of the data that's

00:07:52,740 --> 00:07:58,980
after the the the URL and timestamp into

00:07:55,950 --> 00:08:02,760
a JSON blob to make a little bit more

00:07:58,980 --> 00:08:08,490
extensible and actually the the first

00:08:02,760 --> 00:08:10,380
part of this format is designed to to be

00:08:08,490 --> 00:08:13,110
looked up in the binary search so it's

00:08:10,380 --> 00:08:17,460
specifically formatted in such a way

00:08:13,110 --> 00:08:20,550
that for example that the domain is put

00:08:17,460 --> 00:08:24,510
is reversed such that you could more

00:08:20,550 --> 00:08:26,790
easily look up all URLs that end in comm

00:08:24,510 --> 00:08:32,930
for example so that's that's sort of a

00:08:26,790 --> 00:08:32,930
technique for normalizing this data and

00:08:33,290 --> 00:08:37,080
yeah and actually an Internet Archive

00:08:35,340 --> 00:08:39,390
provides kind of a query interface that

00:08:37,080 --> 00:08:42,030
you could use to to look up this data

00:08:39,390 --> 00:08:44,550
for for many pages essentially anything

00:08:42,030 --> 00:08:47,130
that's that's in the interactive wayback

00:08:44,550 --> 00:08:51,540
machine can be looked up and overturn

00:08:47,130 --> 00:08:53,360
actually a listing of many of these URLs

00:08:51,540 --> 00:08:58,050
on this one

00:08:53,360 --> 00:09:01,279
another important data piece for web

00:08:58,050 --> 00:09:06,180
archives is replay rules and this

00:09:01,279 --> 00:09:08,130
actually a little bit complicated but

00:09:06,180 --> 00:09:11,490
I'll try to kind of summarize is that in

00:09:08,130 --> 00:09:16,589
order to actually capture or replay a

00:09:11,490 --> 00:09:18,089
captured web page you have to replay the

00:09:16,589 --> 00:09:20,640
request and response traffic and that

00:09:18,089 --> 00:09:23,910
can actually be more difficult than than

00:09:20,640 --> 00:09:26,040
the actual capture and what you need to

00:09:23,910 --> 00:09:29,970
do is to match the HTTP request to

00:09:26,040 --> 00:09:33,029
response and often cases there may not

00:09:29,970 --> 00:09:35,250
be an exact match and so in this way

00:09:33,029 --> 00:09:38,880
what web archive replays itself sort of

00:09:35,250 --> 00:09:42,149
a reproducibility problem and an example

00:09:38,880 --> 00:09:45,540
of that is something like this where you

00:09:42,149 --> 00:09:50,160
might have a URL that that's been

00:09:45,540 --> 00:09:53,550
captured it might end in one timestamp

00:09:50,160 --> 00:09:56,220
well then when it's played back it has a

00:09:53,550 --> 00:09:59,120
different timestamp appended dynamically

00:09:56,220 --> 00:10:02,220
and this happens all the time because if

00:09:59,120 --> 00:10:06,990
user is interacting with a page during

00:10:02,220 --> 00:10:09,660
the capture process it might they might

00:10:06,990 --> 00:10:12,329
wait one second to do something and then

00:10:09,660 --> 00:10:13,800
when they try to replay that page it

00:10:12,329 --> 00:10:15,870
might wait two seconds and so they'll

00:10:13,800 --> 00:10:18,269
have a different timestamp and so we

00:10:15,870 --> 00:10:21,990
need to figure out a way to fuzzy match

00:10:18,269 --> 00:10:25,230
essentially the certain parts of the URL

00:10:21,990 --> 00:10:28,560
away and so there needs to be certain

00:10:25,230 --> 00:10:31,380
rules for to determine which parameters

00:10:28,560 --> 00:10:36,420
to ignore oh and here's a more more

00:10:31,380 --> 00:10:38,610
complicated example you might have again

00:10:36,420 --> 00:10:41,339
a ARL that has certain parameters

00:10:38,610 --> 00:10:43,680
there's significant and certain ones

00:10:41,339 --> 00:10:45,600
that are not and so we need to only

00:10:43,680 --> 00:10:47,910
match one of the parameters but not the

00:10:45,600 --> 00:10:51,540
other two in order to be able to

00:10:47,910 --> 00:10:53,610
reproduce this this particular URL so

00:10:51,540 --> 00:10:55,920
the request might might ask for the

00:10:53,610 --> 00:10:59,120
first URL but we only have the second

00:10:55,920 --> 00:10:59,120
one or vice versa

00:10:59,160 --> 00:11:02,699
and so these rules also need to be part

00:11:01,410 --> 00:11:04,110
of the what part of the web archiving

00:11:02,699 --> 00:11:05,940
system

00:11:04,110 --> 00:11:10,680
and then there's also web archive

00:11:05,940 --> 00:11:15,120
collections which is essentially a way

00:11:10,680 --> 00:11:17,640
to organize work files and provide kind

00:11:15,120 --> 00:11:21,050
of a context and metadata to them and

00:11:17,640 --> 00:11:23,400
group group them into into kind of

00:11:21,050 --> 00:11:26,760
usable units and there's not really a

00:11:23,400 --> 00:11:28,560
standard for that either as well it's

00:11:26,760 --> 00:11:31,110
also possible to analyze web archives

00:11:28,560 --> 00:11:32,940
and there's a really great tool set

00:11:31,110 --> 00:11:35,779
called the archives Unleashed toolset

00:11:32,940 --> 00:11:39,450
that provides data extraction and

00:11:35,779 --> 00:11:42,210
extract text link analysis and so forth

00:11:39,450 --> 00:11:44,640
and that results in additional data and

00:11:42,210 --> 00:11:46,980
so how can all this data be be

00:11:44,640 --> 00:11:49,100
distributed well that's the kind of a

00:11:46,980 --> 00:11:51,540
work in progress

00:11:49,100 --> 00:11:54,480
data could include work files the oral

00:11:51,540 --> 00:11:56,339
indices ageless replay rules search

00:11:54,480 --> 00:11:58,260
indices other group data sets organized

00:11:56,339 --> 00:11:59,910
by collection and a one of the things

00:11:58,260 --> 00:12:02,460
I'm currently working on is kind of

00:11:59,910 --> 00:12:07,020
creating a spec for including all this

00:12:02,460 --> 00:12:08,400
web archive data so kind of going beyond

00:12:07,020 --> 00:12:11,540
what's available in work files and

00:12:08,400 --> 00:12:13,620
providing a way to to specify and

00:12:11,540 --> 00:12:16,290
distribute neatly all of these these

00:12:13,620 --> 00:12:19,500
other data sets they're part of what web

00:12:16,290 --> 00:12:22,200
archiving and so next I want to talk

00:12:19,500 --> 00:12:22,890
about how could you do what archive on

00:12:22,200 --> 00:12:26,040
your own

00:12:22,890 --> 00:12:27,750
and that I wanted to demo the project

00:12:26,040 --> 00:12:32,010
I've been working on which is called web

00:12:27,750 --> 00:12:33,900
reporter and just a little bit quick

00:12:32,010 --> 00:12:36,120
intro the purpose of web reporter is is

00:12:33,900 --> 00:12:38,550
kind of web archiving it for all which

00:12:36,120 --> 00:12:41,130
is the ideas that anyone can create a

00:12:38,550 --> 00:12:43,680
web archive and it uses the browser to

00:12:41,130 --> 00:12:47,280
capture and same browser to then be

00:12:43,680 --> 00:12:49,110
played any website that's sort of the

00:12:47,280 --> 00:12:52,740
goal of the project and we're creating

00:12:49,110 --> 00:12:55,980
both user friendly service and apps for

00:12:52,740 --> 00:12:59,220
for people to use as well as a whole set

00:12:55,980 --> 00:13:04,320
of open source tools for working with

00:12:59,220 --> 00:13:06,990
web archives and I'll go ahead and kind

00:13:04,320 --> 00:13:10,640
of do a quick demo of web reporter and

00:13:06,990 --> 00:13:14,670
so this is right now web record IO and

00:13:10,640 --> 00:13:15,939
I'll try to do a live demo just always

00:13:14,670 --> 00:13:22,049
fun

00:13:15,939 --> 00:13:22,049
and so for example I can enter the

00:13:22,169 --> 00:13:29,889
hashtag for CSV conf and I'll use the

00:13:25,959 --> 00:13:33,399
current browser and so what you're

00:13:29,889 --> 00:13:36,279
seeing here is that there's a there's a

00:13:33,399 --> 00:13:39,220
size counter here that's indicating how

00:13:36,279 --> 00:13:41,619
much data has been captured so far and

00:13:39,220 --> 00:13:44,410
this data is written into a work file

00:13:41,619 --> 00:13:46,389
essentially and so we could and here

00:13:44,410 --> 00:13:48,839
it's loading Twitter through web

00:13:46,389 --> 00:13:53,169
recorder which is a recording proxy and

00:13:48,839 --> 00:13:58,329
essentially as I scroll down we probably

00:13:53,169 --> 00:14:00,549
see that that size counter is is going

00:13:58,329 --> 00:14:03,279
up and so more data is being captured

00:14:00,549 --> 00:14:05,980
and now we're up to four points

00:14:03,279 --> 00:14:10,569
you know we're can see that that more

00:14:05,980 --> 00:14:13,980
data is being being captured I won't

00:14:10,569 --> 00:14:15,939
click on the live stream that would be

00:14:13,980 --> 00:14:20,489
okay that would be interesting thing to

00:14:15,939 --> 00:14:24,129
do but I won't do that now but I can I

00:14:20,489 --> 00:14:25,559
can for example and navigate to if

00:14:24,129 --> 00:14:27,639
there's a link on the on this page

00:14:25,559 --> 00:14:33,579
somewhere for example I can click on

00:14:27,639 --> 00:14:34,799
this and then this the this github

00:14:33,579 --> 00:14:36,939
repository

00:14:34,799 --> 00:14:38,079
just a page that's currently loaded is

00:14:36,939 --> 00:14:44,289
now also being archived

00:14:38,079 --> 00:14:47,289
in through web record and I can stop and

00:14:44,289 --> 00:14:48,429
I do that there's a listing of pages and

00:14:47,289 --> 00:14:52,689
so this is kind of those talking about

00:14:48,429 --> 00:14:55,689
with key pages that are in that that are

00:14:52,689 --> 00:14:56,829
part of the collection so there's a lot

00:14:55,689 --> 00:15:02,109
more you are else in there but these are

00:14:56,829 --> 00:15:07,809
the pages and I can for example click on

00:15:02,109 --> 00:15:12,389
this again and this will now show to

00:15:07,809 --> 00:15:14,829
show the replay of the book

00:15:12,389 --> 00:15:18,459
yeah it's essentially that we're now

00:15:14,829 --> 00:15:21,369
viewing the replayed version of this

00:15:18,459 --> 00:15:23,649
hashtag cuz I just browse before but

00:15:21,369 --> 00:15:28,089
another part of what web archiving that

00:15:23,649 --> 00:15:29,540
I wanted to add is so we have all the

00:15:28,089 --> 00:15:34,610
web archive data

00:15:29,540 --> 00:15:36,800
then what about the the web browser

00:15:34,610 --> 00:15:39,860
itself so even if we have all the data

00:15:36,800 --> 00:15:41,810
can we still actually replay it later

00:15:39,860 --> 00:15:44,209
and so browser features change and they

00:15:41,810 --> 00:15:45,560
become obsolete fortunately we can

00:15:44,209 --> 00:15:48,170
actually also preserve the browser

00:15:45,560 --> 00:15:50,540
itself using a docker image and they can

00:15:48,170 --> 00:15:57,350
using that we can provide browsers with

00:15:50,540 --> 00:15:59,389
Java and flash and so here's a just to

00:15:57,350 --> 00:16:00,649
kind of show that part of web recorder

00:15:59,389 --> 00:16:02,660
previously I was using this current

00:16:00,649 --> 00:16:05,750
browser and I'm on we also have an

00:16:02,660 --> 00:16:07,040
option to select a different browser and

00:16:05,750 --> 00:16:12,740
we have these different versions of

00:16:07,040 --> 00:16:15,319
Chrome and Firefox and so I'll go to

00:16:12,740 --> 00:16:18,709
this particular collection that includes

00:16:15,319 --> 00:16:21,139
a version of Firefox that supports that

00:16:18,709 --> 00:16:26,149
supports Java we were able to to create

00:16:21,139 --> 00:16:29,899
that version as a as a docker image and

00:16:26,149 --> 00:16:35,449
so it's actually running up hopefully it

00:16:29,899 --> 00:16:37,790
will really connect so it's connected to

00:16:35,449 --> 00:16:42,639
the Wi-Fi through my phone so it might

00:16:37,790 --> 00:16:45,709
be a little bit and so what it's doing

00:16:42,639 --> 00:16:50,089
what it's doing is actually show it's

00:16:45,709 --> 00:16:52,370
running a browser remotely in a in a

00:16:50,089 --> 00:16:54,709
docker container in the cloud and it's

00:16:52,370 --> 00:16:56,870
streaming that that connection so this

00:16:54,709 --> 00:16:59,029
is a version of Firefox here that's

00:16:56,870 --> 00:17:04,040
running remotely and it has this

00:16:59,029 --> 00:17:07,569
embedded Java applet and we might not be

00:17:04,040 --> 00:17:13,400
able to quite stay connected to Wi-Fi

00:17:07,569 --> 00:17:15,400
but and so this becomes kind of an

00:17:13,400 --> 00:17:18,230
immediate issue I think for

00:17:15,400 --> 00:17:21,169
reproducibility another example I just

00:17:18,230 --> 00:17:24,799
recently looked for is flash and there's

00:17:21,169 --> 00:17:29,090
sort of a ton of I just wanted to see

00:17:24,799 --> 00:17:31,780
what there's any kind of a lot of Flash

00:17:29,090 --> 00:17:34,190
content out there and so I found this

00:17:31,780 --> 00:17:35,870
page with flash animations for physics

00:17:34,190 --> 00:17:39,110
and so if I just load them in my own

00:17:35,870 --> 00:17:42,690
browser I'll probably just get this that

00:17:39,110 --> 00:17:48,840
the flash player doesn't isn't installed

00:17:42,690 --> 00:17:53,100
but if I go to web recorder enter a URL

00:17:48,840 --> 00:17:57,509
and select a select the flash capable

00:17:53,100 --> 00:18:04,500
browser here select this version of

00:17:57,509 --> 00:18:09,500
Firefox I should be able to play this

00:18:04,500 --> 00:18:14,269
will work and so this is that same page

00:18:09,500 --> 00:18:14,269
but now if I click on any of these

00:18:15,169 --> 00:18:20,820
projects I can actually see the the

00:18:18,000 --> 00:18:26,009
flash is now loading and I can go

00:18:20,820 --> 00:18:30,110
through and basically go through all of

00:18:26,009 --> 00:18:32,190
these or automated and and capture these

00:18:30,110 --> 00:18:34,740
these flash applets which will probably

00:18:32,190 --> 00:18:36,929
will not be converted to JavaScript and

00:18:34,740 --> 00:18:39,330
have a working version of these and so

00:18:36,929 --> 00:18:42,120
this is kind of combining both web

00:18:39,330 --> 00:18:45,679
archiving with preservation and

00:18:42,120 --> 00:18:48,120
emulation of web browsers which I think

00:18:45,679 --> 00:18:53,750
will become more and more important for

00:18:48,120 --> 00:18:53,750
for being able to preserve and reproduce

00:18:54,230 --> 00:19:02,070
content that that is online and yes I

00:18:59,340 --> 00:19:05,070
can stop that I was capturing these and

00:19:02,070 --> 00:19:11,110
then I can so this is kind of the view

00:19:05,070 --> 00:19:14,440
of the I can then select

00:19:11,110 --> 00:19:16,360
one of the let's here and then now I'm

00:19:14,440 --> 00:19:21,659
in browsing mode and so I'm actually

00:19:16,360 --> 00:19:25,539
browsing browsing this this particular

00:19:21,659 --> 00:19:27,100
piece we also have a desktop app that

00:19:25,539 --> 00:19:30,730
that's being developed we actually have

00:19:27,100 --> 00:19:32,710
a 2-1 still in development and any other

00:19:30,730 --> 00:19:36,159
is called the web recorder player which

00:19:32,710 --> 00:19:38,950
allows for viewing these web archives

00:19:36,159 --> 00:19:41,710
locally and so I can also download this

00:19:38,950 --> 00:19:43,840
collection right now it's going to

00:19:41,710 --> 00:19:50,500
download as a single work file because

00:19:43,840 --> 00:19:53,380
that the new kind of multi multi

00:19:50,500 --> 00:19:54,639
collector kind of data structure format

00:19:53,380 --> 00:19:57,460
is not yet ready so right now we're just

00:19:54,639 --> 00:20:01,809
packaging everything into work files and

00:19:57,460 --> 00:20:03,250
then let's see if this works since it

00:20:01,809 --> 00:20:07,450
and so I can open it with the web

00:20:03,250 --> 00:20:09,880
recorder player app and actually don't

00:20:07,450 --> 00:20:12,730
know if this will maybe this won't work

00:20:09,880 --> 00:20:17,380
set no this is the right version oh yeah

00:20:12,730 --> 00:20:20,080
so so here's this applet that I've said

00:20:17,380 --> 00:20:22,889
that this flash piece that that was that

00:20:20,080 --> 00:20:25,870
I captured before running in the browser

00:20:22,889 --> 00:20:28,840
or sorry in in desktop player and to

00:20:25,870 --> 00:20:32,769
actually show that I could I could even

00:20:28,840 --> 00:20:36,159
disconnect from the Wi-Fi and you know

00:20:32,769 --> 00:20:41,919
still browse this kind of showed that

00:20:36,159 --> 00:20:43,659
this is actually running offline now so

00:20:41,919 --> 00:20:45,970
I was able to capture this this

00:20:43,659 --> 00:20:49,179
particular flash project download it and

00:20:45,970 --> 00:20:53,889
now run it offline I'll connect back the

00:20:49,179 --> 00:20:58,230
Wi-Fi and yeah and so that's that sort

00:20:53,889 --> 00:21:01,870
of part of the web recorder toolkit and

00:20:58,230 --> 00:21:05,649
and I so oh and all of this zone tab is

00:21:01,870 --> 00:21:08,590
open source and hopefully like to get

00:21:05,649 --> 00:21:11,460
more more people involved more users and

00:21:08,590 --> 00:21:16,630
more contributors and so I'll cover some

00:21:11,460 --> 00:21:18,250
of the kind of some of the tools that we

00:21:16,630 --> 00:21:20,889
have available so we just want to read

00:21:18,250 --> 00:21:23,200
and write work files have the very basic

00:21:20,889 --> 00:21:25,050
you have then we have a library called

00:21:23,200 --> 00:21:27,660
work I

00:21:25,050 --> 00:21:30,510
and with that you can create work files

00:21:27,660 --> 00:21:32,010
with just four lines of Python basically

00:21:30,510 --> 00:21:32,910
kind of trying to make it as easy as

00:21:32,010 --> 00:21:35,940
possible

00:21:32,910 --> 00:21:37,140
this of course won't give you what you

00:21:35,940 --> 00:21:41,130
see in the browser this is just for a

00:21:37,140 --> 00:21:45,810
single URL at a time but you can do that

00:21:41,130 --> 00:21:47,370
if needed if you want to if you want to

00:21:45,810 --> 00:21:49,290
package existing files as works we also

00:21:47,370 --> 00:21:53,250
have a small library for that I'll work

00:21:49,290 --> 00:21:56,850
it which allows you to convert directory

00:21:53,250 --> 00:21:58,400
of files into into a war file

00:21:56,850 --> 00:22:02,070
essentially so they can then be opened

00:21:58,400 --> 00:22:03,570
up and as a web archive then we also

00:22:02,070 --> 00:22:06,810
have Popeye de bebé which is kind of our

00:22:03,570 --> 00:22:08,280
Python wayback machine slash web

00:22:06,810 --> 00:22:12,510
archiving toolkit and that's the core

00:22:08,280 --> 00:22:14,040
engine that powers web reporter and then

00:22:12,510 --> 00:22:16,410
if you want to archive through the

00:22:14,040 --> 00:22:19,380
browser and I'll share these slides so

00:22:16,410 --> 00:22:24,900
you could be easier to fall along you

00:22:19,380 --> 00:22:27,120
can essentially use a simple script to

00:22:24,900 --> 00:22:31,980
launch a browser and kind of do what

00:22:27,120 --> 00:22:36,000
what I just showed initially on the

00:22:31,980 --> 00:22:38,250
command line and then it could also host

00:22:36,000 --> 00:22:43,620
the wayback machine using these tools

00:22:38,250 --> 00:22:45,840
and then there's also do a reporter

00:22:43,620 --> 00:22:50,670
player which I showed earlier and then

00:22:45,840 --> 00:22:52,740
we also have for the browser system with

00:22:50,670 --> 00:22:55,650
with older versions of firefox and

00:22:52,740 --> 00:22:58,310
chrome that is also available it's part

00:22:55,650 --> 00:23:00,680
of the old web today project initially

00:22:58,310 --> 00:23:04,350
that's also available on github as a

00:23:00,680 --> 00:23:08,330
separate project and if you want to try

00:23:04,350 --> 00:23:10,140
everything the whole web recorder

00:23:08,330 --> 00:23:13,530
configuration is available as a docker

00:23:10,140 --> 00:23:16,110
compose set up on on our github also and

00:23:13,530 --> 00:23:20,060
includes the entire package that kind of

00:23:16,110 --> 00:23:24,930
shown with the front end UI yeah and so

00:23:20,060 --> 00:23:27,590
kind of nope happy to answer any

00:23:24,930 --> 00:23:30,710
questions about all of this

00:23:27,590 --> 00:23:30,710

YouTube URL: https://www.youtube.com/watch?v=HbqfDHjr1GM


