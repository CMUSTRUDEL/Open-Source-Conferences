Title: Learn to Develop a Service Broker in No Time by Christian Brinker, evoila GmbH
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Learn to Develop a Service Broker in No Time - Christian Brinker, evoila GmbH

When it comes to setting up a Cloud Foundry environment, one of the first questions is which services should be provided. Therefore, Service Brokers are the core components to implement. Based on their experience on the development of several Service Brokers for use cases in DevOps and production infrastructures the speakers present how to avoid common pitfalls and risks. Together with the audience the speakers implement an exemplary Service Broker based on an Open Source framework[1]. After the tutorial, participants are able to implement their own Service Brokers more efficiently with the gained insights and knowledge. The speaker team helps the audience to benefit from their rich experience from small and highly complex projects and the improving of their own DevOps infrastructure with customized Service Brokers to accelerate Development.[1] https://github.com/evoila/cf-service-broker

About Christian Brinker
As long-standing member of the evoila Automation and Technology team and Automation Engineer Christian Brinker is well experienced in the automation of Cloud Environments. His focus is the development of Software Architectures in customized XaaS solutions. He developed many solutions in and for the Cloud Foundry ecosystem, like Service Brokers or complex Billing Systems for Cloud Foundry and OpenStack. Additionally he gained broad experience as a Data Scientist resulting in publications and presentations on international conferences. The next conference he attends as a speaker are the upcoming OpenStack Days Germany 2016. Christian Brinker works at an agile, German-based cloud engineering and consulting company. The evoila GmbH develops cloud strategies and engineers tools for cloud enablement and improvement. Their customers are small companies, global players and the public sector.
Captions: 
	00:00:00,060 --> 00:00:06,779
my name is Christian patinka and I'm

00:00:04,020 --> 00:00:09,929
from Ebola we are in cloud company

00:00:06,779 --> 00:00:12,210
helping other companies to commit to the

00:00:09,929 --> 00:00:13,889
cloud to transform the IT technologies

00:00:12,210 --> 00:00:17,010
and by that we are

00:00:13,889 --> 00:00:20,789
I'm here as a software developer at at

00:00:17,010 --> 00:00:23,130
Ebola when we developed several service

00:00:20,789 --> 00:00:26,279
brokers and made open-source framework

00:00:23,130 --> 00:00:29,820
out of it and help and now we're helping

00:00:26,279 --> 00:00:31,320
to others adapt to the to getting to

00:00:29,820 --> 00:00:34,920
start with developing their own service

00:00:31,320 --> 00:00:37,110
progress one question ahead has someone

00:00:34,920 --> 00:00:40,950
in here already implemented service

00:00:37,110 --> 00:00:45,030
brokers for Cloud Foundry already one

00:00:40,950 --> 00:00:48,180
hand app okay okay

00:00:45,030 --> 00:00:52,170
then get you started what is the task

00:00:48,180 --> 00:00:54,030
here about and one step ahead we wanted

00:00:52,170 --> 00:00:56,940
to also as the last session in here

00:00:54,030 --> 00:00:59,879
wanted to do is Tuesday hours deep dive

00:00:56,940 --> 00:01:02,660
into the couch helping you to program a

00:00:59,879 --> 00:01:05,309
service broker on your own and

00:01:02,660 --> 00:01:09,150
financially we got 30 minutes so we have

00:01:05,309 --> 00:01:12,030
to speed up a little bit okay what the

00:01:09,150 --> 00:01:13,470
task you have you a Cloud Foundry you

00:01:12,030 --> 00:01:14,880
have your application which you want to

00:01:13,470 --> 00:01:18,060
run there but you need additional

00:01:14,880 --> 00:01:21,780
services like databases or something or

00:01:18,060 --> 00:01:26,460
message queues or whatever so you have

00:01:21,780 --> 00:01:30,299
to do have there some some service at

00:01:26,460 --> 00:01:32,759
some service source one possibility

00:01:30,299 --> 00:01:35,040
maybe is you have a web app and you want

00:01:32,759 --> 00:01:37,079
to go to your MySQL server which is

00:01:35,040 --> 00:01:40,530
hosted on Europe I a stack like

00:01:37,079 --> 00:01:42,390
OpenStack or something but how do you

00:01:40,530 --> 00:01:45,210
get there how do you get this one

00:01:42,390 --> 00:01:47,850
running fast easy as your apps which you

00:01:45,210 --> 00:01:51,750
can deploy fast with your CF pash and

00:01:47,850 --> 00:01:53,850
you have it so the trick in flower farm

00:01:51,750 --> 00:01:56,759
is you have something called service

00:01:53,850 --> 00:01:59,640
broker your Cloud Foundry installation

00:01:56,759 --> 00:02:03,509
has the class using the cloud controller

00:01:59,640 --> 00:02:06,210
to manage all the things now someone who

00:02:03,509 --> 00:02:09,629
can get you some service and this is

00:02:06,210 --> 00:02:13,010
called the service broker which knows on

00:02:09,629 --> 00:02:15,830
some back end to get a service

00:02:13,010 --> 00:02:18,319
so if you get there you say hey cloud

00:02:15,830 --> 00:02:20,329
foundry get me some service you say it's

00:02:18,319 --> 00:02:23,930
a service broker get me the service and

00:02:20,329 --> 00:02:26,079
the service is deployed and the service

00:02:23,930 --> 00:02:28,310
broker tells the cloud controller hey

00:02:26,079 --> 00:02:32,750
that's the way you can connect your apps

00:02:28,310 --> 00:02:34,790
to and then gets the the credentials to

00:02:32,750 --> 00:02:38,659
your application which is then able to

00:02:34,790 --> 00:02:42,049
access the service both types of service

00:02:38,659 --> 00:02:45,440
are there you have managed service by

00:02:42,049 --> 00:02:48,890
service broker on the backend you can

00:02:45,440 --> 00:02:52,459
also use user provided service so your

00:02:48,890 --> 00:02:56,629
app can be said hey it's a service for

00:02:52,459 --> 00:02:58,879
your other apps but that's it's not part

00:02:56,629 --> 00:03:00,859
of the thing because we do not need a

00:02:58,879 --> 00:03:03,409
service broker for it of this session

00:03:00,859 --> 00:03:05,269
you have bindable service services which

00:03:03,409 --> 00:03:07,700
can be connected to your apps you have

00:03:05,269 --> 00:03:10,819
non barnable services which are not

00:03:07,700 --> 00:03:14,060
connected to yet but you can connect

00:03:10,819 --> 00:03:16,480
them set themselves to it

00:03:14,060 --> 00:03:21,049
you've route services which are

00:03:16,480 --> 00:03:23,840
intercepting the the messages sent to

00:03:21,049 --> 00:03:26,629
your apps and get back and the syslog

00:03:23,840 --> 00:03:30,590
drain services which can collect those

00:03:26,629 --> 00:03:32,449
the syslog of your applications for the

00:03:30,590 --> 00:03:34,250
route service that's another talk in

00:03:32,449 --> 00:03:38,629
this conference I've seen in the program

00:03:34,250 --> 00:03:41,660
so we don't match it here so let's look

00:03:38,629 --> 00:03:44,569
a little bit deeper if you have your

00:03:41,660 --> 00:03:48,139
cloud for installation you can create a

00:03:44,569 --> 00:03:49,760
service broker and by and telling the

00:03:48,139 --> 00:03:52,010
cloud controller how to access the

00:03:49,760 --> 00:03:54,349
service broker where it finds then the

00:03:52,010 --> 00:03:56,810
cloud the cloud controller fetches the

00:03:54,349 --> 00:04:00,079
catalog of services presented by the

00:03:56,810 --> 00:04:02,569
service broker and if you call the

00:04:00,079 --> 00:04:04,540
marketplace and say in cloud foundry you

00:04:02,569 --> 00:04:08,959
get this information from here

00:04:04,540 --> 00:04:11,359
afterwards if you say hey I want some

00:04:08,959 --> 00:04:13,129
instance of this service the cloud

00:04:11,359 --> 00:04:16,220
controller says the service broker

00:04:13,129 --> 00:04:18,970
provision me one instance a my for

00:04:16,220 --> 00:04:23,510
example of MySQL database is created and

00:04:18,970 --> 00:04:25,130
then afterwards if the service worker if

00:04:23,510 --> 00:04:26,530
you want to bind your application

00:04:25,130 --> 00:04:29,719
against the clock

00:04:26,530 --> 00:04:34,099
against the service instance he creates

00:04:29,719 --> 00:04:36,860
by name and that means here are created

00:04:34,099 --> 00:04:39,949
dangerous cattle and back to the

00:04:36,860 --> 00:04:42,379
application the same deleting the

00:04:39,949 --> 00:04:48,229
binding or deleting the instance removes

00:04:42,379 --> 00:04:51,439
the instance so we have to do some rest

00:04:48,229 --> 00:04:54,379
calls rest interface implementation many

00:04:51,439 --> 00:04:59,270
big stuff of course having to include

00:04:54,379 --> 00:05:03,319
the complete thing but ha we do not have

00:04:59,270 --> 00:05:05,960
to reimplemented things because we've

00:05:03,319 --> 00:05:08,000
made a framework out of it so if you

00:05:05,960 --> 00:05:11,389
build this app service broker you can

00:05:08,000 --> 00:05:13,789
get easily all the application of things

00:05:11,389 --> 00:05:17,300
together we made it open sewers

00:05:13,789 --> 00:05:19,789
available on github the service brokers

00:05:17,300 --> 00:05:21,560
are deployed as made a springboard

00:05:19,789 --> 00:05:23,990
applications if you stay at the last

00:05:21,560 --> 00:05:25,999
session here you've heard a little bit

00:05:23,990 --> 00:05:28,099
about spring built on breathing spring

00:05:25,999 --> 00:05:31,069
boot applications which makes things

00:05:28,099 --> 00:05:34,599
easy also including here spring cloud as

00:05:31,069 --> 00:05:37,129
with spring cloud configuration and

00:05:34,599 --> 00:05:38,479
making built management management was

00:05:37,129 --> 00:05:40,939
made and we are happy for your

00:05:38,479 --> 00:05:43,969
contribution to it if you want to add

00:05:40,939 --> 00:05:46,189
code new service brokers scripts for

00:05:43,969 --> 00:05:48,680
deployments of something document

00:05:46,189 --> 00:05:52,370
editing by at the documentation we're

00:05:48,680 --> 00:05:56,000
happy for your aid and let's get a

00:05:52,370 --> 00:05:58,430
little bit look a deeper look into it if

00:05:56,000 --> 00:06:01,729
you have your service broker you have to

00:05:58,430 --> 00:06:06,649
deal with something with the catalogs

00:06:01,729 --> 00:06:08,629
yeah you have to tell tell the the cloud

00:06:06,649 --> 00:06:11,509
controller how to access services which

00:06:08,629 --> 00:06:13,759
services are there what is interesting

00:06:11,509 --> 00:06:15,889
at that for the marketplace that's done

00:06:13,759 --> 00:06:18,169
by the catalog controller yes service

00:06:15,889 --> 00:06:23,539
instance controller doing the same

00:06:18,169 --> 00:06:27,919
things about the instance creation using

00:06:23,539 --> 00:06:31,669
deployment service and here some kind of

00:06:27,919 --> 00:06:34,099
platform service which uses the the tee

00:06:31,669 --> 00:06:36,349
at the executor deployment on some

00:06:34,099 --> 00:06:40,220
platform or something for example if you

00:06:36,349 --> 00:06:43,280
have want you do our example from

00:06:40,220 --> 00:06:46,460
before with the MySQL database deploy to

00:06:43,280 --> 00:06:51,020
your OpenStack we have to create some

00:06:46,460 --> 00:06:55,940
custom code for deploying MySQL and some

00:06:51,020 --> 00:06:58,880
code for doing it on OpenStack if you

00:06:55,940 --> 00:07:01,340
here see here the rat things and the

00:06:58,880 --> 00:07:05,570
Blues things the blue things are covered

00:07:01,340 --> 00:07:09,980
by the by the pile of a framework the

00:07:05,570 --> 00:07:12,410
light red things are also implemented it

00:07:09,980 --> 00:07:15,980
also open source may be used by your

00:07:12,410 --> 00:07:18,470
side by you but may be exchanged we see

00:07:15,980 --> 00:07:21,470
that later on and the red ones are the

00:07:18,470 --> 00:07:24,920
casts a service specific code so we can

00:07:21,470 --> 00:07:27,650
reduce when Pro when developing a new

00:07:24,920 --> 00:07:30,410
service broker we can reduce the amount

00:07:27,650 --> 00:07:34,220
of code which we have to do to the one

00:07:30,410 --> 00:07:37,520
specific to our service so instead of

00:07:34,220 --> 00:07:40,670
really implementing the or all of the

00:07:37,520 --> 00:07:43,670
the code used to you handle with Cloud

00:07:40,670 --> 00:07:46,700
Foundry and so on we can shift that away

00:07:43,670 --> 00:07:50,030
and say we only want to use well the

00:07:46,700 --> 00:07:52,820
curl make the new code to adapt to the

00:07:50,030 --> 00:07:55,100
new service deploy for the new service

00:07:52,820 --> 00:08:00,860
broker so we have only to deal with

00:07:55,100 --> 00:08:02,390
MySQL not with Cloud Foundry also when

00:08:00,860 --> 00:08:05,480
you have for the binding with the same

00:08:02,390 --> 00:08:07,760
thing here with some custom code for the

00:08:05,480 --> 00:08:09,560
binding service and the rest is done

00:08:07,760 --> 00:08:12,169
away because we developed that as

00:08:09,560 --> 00:08:14,450
microservices no state is in the

00:08:12,169 --> 00:08:17,960
application so we have some persistent

00:08:14,450 --> 00:08:20,960
service which persists the persister

00:08:17,960 --> 00:08:26,840
state to some database for example here

00:08:20,960 --> 00:08:32,089
Redis so how do you define the services

00:08:26,840 --> 00:08:35,060
for making that more easily we edit some

00:08:32,089 --> 00:08:36,650
kind of definition llamo file the

00:08:35,060 --> 00:08:39,680
service definition file where you can

00:08:36,650 --> 00:08:41,479
define the service which is presented in

00:08:39,680 --> 00:08:43,600
the catalog in the marketplace to the

00:08:41,479 --> 00:08:47,390
customer of the cloud from the earth

00:08:43,600 --> 00:08:49,970
side for example you can define an ID

00:08:47,390 --> 00:08:52,450
for the service and name for the service

00:08:49,970 --> 00:08:53,620
description shown in the marketplace and

00:08:52,450 --> 00:08:55,710
bind

00:08:53,620 --> 00:08:58,060
well if it's fine the blow or not and

00:08:55,710 --> 00:09:01,420
several service plans for each of the

00:08:58,060 --> 00:09:04,000
services we also provide some major data

00:09:01,420 --> 00:09:07,780
field which can be accessed and so you

00:09:04,000 --> 00:09:11,350
can easily add and remove new services

00:09:07,780 --> 00:09:14,440
based on that for example you and the

00:09:11,350 --> 00:09:17,050
major data part you can define templates

00:09:14,440 --> 00:09:19,080
for use by heat deployment of new

00:09:17,050 --> 00:09:22,600
virtual machines on OpenStack

00:09:19,080 --> 00:09:25,390
and exchange the templates easily by

00:09:22,600 --> 00:09:29,890
changing the property and really flowing

00:09:25,390 --> 00:09:32,290
the application of something also the

00:09:29,890 --> 00:09:34,480
configuration of the application can be

00:09:32,290 --> 00:09:37,210
made like because it Springwood very

00:09:34,480 --> 00:09:38,950
easily by your application Jarl file you

00:09:37,210 --> 00:09:42,820
can define several profiles for

00:09:38,950 --> 00:09:46,900
different kinds of different kinds of

00:09:42,820 --> 00:09:49,620
deployments can edit for example the

00:09:46,900 --> 00:09:52,180
persistence part of something easily and

00:09:49,620 --> 00:09:54,580
what the best thing is it spring boot

00:09:52,180 --> 00:09:56,890
it's can you spring clouds so you can

00:09:54,580 --> 00:10:00,010
also shift this to your spring cloud

00:09:56,890 --> 00:10:03,250
config server getting the informatica

00:10:00,010 --> 00:10:07,660
information from remote side I can get

00:10:03,250 --> 00:10:11,230
repository of something so that's part

00:10:07,660 --> 00:10:15,730
of the the talk let's go to the couch

00:10:11,230 --> 00:10:17,860
which is more interesting maybe so I

00:10:15,730 --> 00:10:21,970
don't think you can read it because so I

00:10:17,860 --> 00:10:24,690
make it a little bit more bigger is it

00:10:21,970 --> 00:10:30,880
possible for you to read that up there

00:10:24,690 --> 00:10:34,240
good we because implementing how to get

00:10:30,880 --> 00:10:38,740
into the the structure is a little bit

00:10:34,240 --> 00:10:42,640
maybe not so easy we made an example

00:10:38,740 --> 00:10:45,730
project on a git repository example

00:10:42,640 --> 00:10:48,550
service broker if you look at it we have

00:10:45,730 --> 00:10:51,580
you some small code we have two only

00:10:48,550 --> 00:10:58,450
there and a pom file if we look at the

00:10:51,580 --> 00:11:01,720
the pom file we see there's not much in

00:10:58,450 --> 00:11:05,620
it because we have a predefined parent

00:11:01,720 --> 00:11:07,360
and we can add it only core dependencies

00:11:05,620 --> 00:11:10,000
for the service broker which

00:11:07,360 --> 00:11:12,370
the blue part from our graphic we've

00:11:10,000 --> 00:11:15,430
seen we have added the the docker

00:11:12,370 --> 00:11:18,100
contact usage the OpenStack usage and

00:11:15,430 --> 00:11:23,140
the Redis service so this is the light

00:11:18,100 --> 00:11:25,810
red part from our graphic so the blue

00:11:23,140 --> 00:11:28,390
part is there the high light red parts

00:11:25,810 --> 00:11:29,290
are there so we only need some service

00:11:28,390 --> 00:11:33,670
specific code

00:11:29,290 --> 00:11:35,920
let's look within application ok spring

00:11:33,670 --> 00:11:40,300
boot application nothing interesting in

00:11:35,920 --> 00:11:42,430
here hmm you have the service example

00:11:40,300 --> 00:11:45,430
service binding service this is the

00:11:42,430 --> 00:11:49,480
interesting part because for binding the

00:11:45,430 --> 00:11:53,140
service we only need credit creating

00:11:49,480 --> 00:11:55,930
credentials here so what is put back to

00:11:53,140 --> 00:11:59,829
the user like a URI with credentials in

00:11:55,930 --> 00:12:05,560
it and how do we delete a binding so we

00:11:59,829 --> 00:12:07,930
have only to define that and also custom

00:12:05,560 --> 00:12:10,450
property handling like service specific

00:12:07,930 --> 00:12:15,760
property handling getting down from from

00:12:10,450 --> 00:12:18,720
from config files to the code that's all

00:12:15,760 --> 00:12:21,160
you need for a slide style op

00:12:18,720 --> 00:12:24,220
additionally you need some temporary

00:12:21,160 --> 00:12:28,870
template to deployment if we look yeah

00:12:24,220 --> 00:12:32,320
yet to the to the more specific part

00:12:28,870 --> 00:12:38,070
like hmm let's do a service broker and

00:12:32,320 --> 00:12:40,810
CouchDB we have to look we have to

00:12:38,070 --> 00:12:43,240
rename some things from the code we made

00:12:40,810 --> 00:12:47,800
a because we have short arm we made a

00:12:43,240 --> 00:12:51,310
list on it put it on our repository for

00:12:47,800 --> 00:12:53,410
the coding session we've shown the I

00:12:51,310 --> 00:12:55,240
will show the link later on and what

00:12:53,410 --> 00:12:58,930
have you have you got their hair with

00:12:55,240 --> 00:13:03,060
designed said ah credentials what do we

00:12:58,930 --> 00:13:06,670
do with admin users for this database

00:13:03,060 --> 00:13:08,680
for easy use here in the in this for the

00:13:06,670 --> 00:13:13,149
slides we use the demonstration we use

00:13:08,680 --> 00:13:16,690
in service instance ID and we want to do

00:13:13,149 --> 00:13:18,880
a database added in the Cloud Foundry

00:13:16,690 --> 00:13:21,120
installation and the CouchDB

00:13:18,880 --> 00:13:23,860
installation

00:13:21,120 --> 00:13:25,480
which is named after the binding ID and

00:13:23,860 --> 00:13:27,970
Elsa user was password for it and

00:13:25,480 --> 00:13:31,840
afterwards we get back to the user for

00:13:27,970 --> 00:13:35,350
the app to Cloud Foundry a URI which has

00:13:31,840 --> 00:13:38,200
user password and the host IP and the

00:13:35,350 --> 00:13:43,930
host port of the deployed instead Shiva

00:13:38,200 --> 00:13:47,140
instance if we delete a binding we have

00:13:43,930 --> 00:13:53,730
the same credentials and let's look what

00:13:47,140 --> 00:13:53,730
code we have to add so

00:13:59,150 --> 00:14:04,220
if you go to the final step you receive

00:14:01,490 --> 00:14:05,900
the the projects we added with our maven

00:14:04,220 --> 00:14:09,050
dependencies so we added the core

00:14:05,900 --> 00:14:11,839
function of the persistence and some

00:14:09,050 --> 00:14:14,029
model specific parts from the core but

00:14:11,839 --> 00:14:19,150
the interesting part is what did we have

00:14:14,029 --> 00:14:25,400
to add when we start we add only

00:14:19,150 --> 00:14:28,400
some-some CouchDB framework to access

00:14:25,400 --> 00:14:32,029
the CouchDB service for administrative

00:14:28,400 --> 00:14:35,029
usage where did some all the plate code

00:14:32,029 --> 00:14:37,550
for usage of the user and database

00:14:35,029 --> 00:14:40,580
management of the CouchDB which is not

00:14:37,550 --> 00:14:43,550
part of the the framework for adding

00:14:40,580 --> 00:14:46,940
users adding administrative usage adding

00:14:43,550 --> 00:14:49,730
roles and such things but let's serve a

00:14:46,940 --> 00:14:53,960
specific code no code use it used for

00:14:49,730 --> 00:14:56,180
the deployment of with Cloud Foundry so

00:14:53,960 --> 00:15:00,080
what do we add it for the service

00:14:56,180 --> 00:15:04,160
brokers part we said oh there's a

00:15:00,080 --> 00:15:07,310
problem with with with CouchDB and using

00:15:04,160 --> 00:15:09,800
the ID so we added some lowercase

00:15:07,310 --> 00:15:12,470
letters but the service specific we said

00:15:09,800 --> 00:15:16,010
it we wanted to tell you we used the

00:15:12,470 --> 00:15:20,390
code from our friend from of cut should

00:15:16,010 --> 00:15:24,650
be framework to add the user if we bind

00:15:20,390 --> 00:15:27,980
it to the service create a database add

00:15:24,650 --> 00:15:32,390
the user to the database back to

00:15:27,980 --> 00:15:35,779
credentials and we if you go what wider

00:15:32,390 --> 00:15:36,709
we could delete the user from the

00:15:35,779 --> 00:15:40,310
database

00:15:36,709 --> 00:15:44,209
maybe delete the database too but that's

00:15:40,310 --> 00:15:48,140
all the rest is done by the framework

00:15:44,209 --> 00:15:53,830
what do we have to add them to get a new

00:15:48,140 --> 00:15:57,380
service broker we have to add deployment

00:15:53,830 --> 00:16:02,000
scripts like a DTM plate for deploying

00:15:57,380 --> 00:16:05,150
to heat so it's like here some script

00:16:02,000 --> 00:16:09,079
part deploying all the things you need

00:16:05,150 --> 00:16:10,960
to deploy code should be to a new couch

00:16:09,079 --> 00:16:16,100
DB instance to

00:16:10,960 --> 00:16:20,500
to OpenStack or the Tucker commands to

00:16:16,100 --> 00:16:26,000
run it on there you will get information

00:16:20,500 --> 00:16:30,580
here from our service broker property

00:16:26,000 --> 00:16:33,770
files in here shifted to us we can also

00:16:30,580 --> 00:16:41,120
manipulate them using the custom

00:16:33,770 --> 00:16:44,320
properties handler and if we look at the

00:16:41,120 --> 00:16:51,010
application Yama file we see some

00:16:44,320 --> 00:16:54,110
general-purpose usage and here getting

00:16:51,010 --> 00:16:57,650
the scripts down to the third here he

00:16:54,110 --> 00:17:01,310
template from some git repository also

00:16:57,650 --> 00:17:06,110
here on our repository - brought to you

00:17:01,310 --> 00:17:08,949
and also some service specific

00:17:06,110 --> 00:17:11,209
configuration like the port we want you

00:17:08,949 --> 00:17:18,980
we want to get to the couch to be

00:17:11,209 --> 00:17:22,250
instance but that's it no more code is

00:17:18,980 --> 00:17:27,589
needed to get a new couch to be instance

00:17:22,250 --> 00:17:30,050
if you want one you get new users added

00:17:27,589 --> 00:17:34,700
new databases added if you get your

00:17:30,050 --> 00:17:37,940
service if you say to the cloud from the

00:17:34,700 --> 00:17:40,850
instance get me some new instance find

00:17:37,940 --> 00:17:44,450
me you my app - that your app gets an o

00:17:40,850 --> 00:17:49,900
its own database it get its own user on

00:17:44,450 --> 00:17:54,910
it and you can access the data there and

00:17:49,900 --> 00:17:54,910
if you look how easy it is

00:18:12,590 --> 00:18:14,620
ah

00:18:38,460 --> 00:18:46,240
so here you see we defined we get you a

00:18:42,730 --> 00:18:49,780
new service instance of CouchDB with

00:18:46,240 --> 00:18:55,450
size a t-shirt size at plan m and we

00:18:49,780 --> 00:19:03,700
call a test and it's created if we get a

00:18:55,450 --> 00:19:04,840
new CMD open for seam be open for

00:19:03,700 --> 00:19:13,120
looking in the meantime at the

00:19:04,840 --> 00:19:18,250
marketplace we see here we have CouchDB

00:19:13,120 --> 00:19:23,620
addressed with s widths plans S & M and

00:19:18,250 --> 00:19:29,730
if you look at our code at our service

00:19:23,620 --> 00:19:33,340
definition llaman we see here we defined

00:19:29,730 --> 00:19:37,510
CouchDB is a here with the CouchDB s

00:19:33,340 --> 00:19:41,049
service with plan name s with some text

00:19:37,510 --> 00:19:44,919
some definitions if we wanted to create

00:19:41,049 --> 00:19:49,539
it and to deploy it darker and if you

00:19:44,919 --> 00:19:52,510
look here down to open stack we said a

00:19:49,539 --> 00:19:55,809
to size and we said which we used at the

00:19:52,510 --> 00:19:59,860
example right away we said we want to

00:19:55,809 --> 00:20:02,620
use it with with OpenStack so we deploy

00:19:59,860 --> 00:20:04,419
it at the moment with tip a typed in the

00:20:02,620 --> 00:20:07,000
create service a new instance to

00:20:04,419 --> 00:20:11,230
OpenStack which was installed the

00:20:07,000 --> 00:20:13,929
CouchDB installation and we have to wait

00:20:11,230 --> 00:20:16,390
until the applique instance goes up

00:20:13,929 --> 00:20:18,190
there is in the pair it's an S and

00:20:16,390 --> 00:20:20,409
Kronus service we are binding here for

00:20:18,190 --> 00:20:24,100
someone who is also getting a little bit

00:20:20,409 --> 00:20:26,980
into the service broker api which means

00:20:24,100 --> 00:20:30,970
the service broker starts the deployment

00:20:26,980 --> 00:20:33,610
and waits for it to end so we it's going

00:20:30,970 --> 00:20:36,159
to look after the installation installed

00:20:33,610 --> 00:20:38,080
instance if the service is already there

00:20:36,159 --> 00:20:42,100
and afterwards telling the Cloud Foundry

00:20:38,080 --> 00:20:46,090
and if it's if the service is up if you

00:20:42,100 --> 00:20:50,130
look back here we can see CF services

00:20:46,090 --> 00:20:50,130
our started services and

00:20:50,260 --> 00:21:04,380
we see ah didn't go ahead up the push

00:20:58,410 --> 00:21:04,380
for I forgot to push the application

00:21:05,940 --> 00:21:15,780
that's the problem with live coding

00:21:08,770 --> 00:21:15,780
sessions excuse myself

00:21:18,690 --> 00:21:26,220
so what's also there we have the the

00:21:22,450 --> 00:21:28,720
service brokers are applications with

00:21:26,220 --> 00:21:32,230
Java spring good applications so we can

00:21:28,720 --> 00:21:35,860
easily deploy them as applications to

00:21:32,230 --> 00:21:38,350
the cloud foundry installation so I've

00:21:35,860 --> 00:21:41,970
pushed at the moment my installation up

00:21:38,350 --> 00:21:44,580
there and if we look back at the code we

00:21:41,970 --> 00:21:49,090
see there's a manifest file in there

00:21:44,580 --> 00:21:52,840
saying under which name it's deployed

00:21:49,090 --> 00:21:55,080
there down up above with which spring

00:21:52,840 --> 00:21:57,400
profile so we can switch the

00:21:55,080 --> 00:22:05,790
configuration from deployment to

00:21:57,400 --> 00:22:05,790
deployment so

00:22:13,250 --> 00:22:21,090
if we if you want to join the coding you

00:22:17,430 --> 00:22:27,060
can use the code we presented here on

00:22:21,090 --> 00:22:32,760
the CFC on our CF Summit repository at

00:22:27,060 --> 00:22:35,520
the slash koala github organization you

00:22:32,760 --> 00:22:40,020
can also get other service brokers like

00:22:35,520 --> 00:22:43,140
MongoDB Posterous red is rabbit in queue

00:22:40,020 --> 00:22:48,120
or something also with the core parts

00:22:43,140 --> 00:22:49,970
the deployment repository parts and so

00:22:48,120 --> 00:22:53,010
on

00:22:49,970 --> 00:22:55,740
so which edition of additional features

00:22:53,010 --> 00:22:58,800
have we back there we have remote

00:22:55,740 --> 00:23:01,980
control of the hey a proxy for getting

00:22:58,800 --> 00:23:04,290
you access to your databases out of the

00:23:01,980 --> 00:23:08,130
Cloud Foundry installation with a little

00:23:04,290 --> 00:23:10,380
bit of an extra project which is called

00:23:08,130 --> 00:23:13,260
which echo th proxy back and inhale

00:23:10,380 --> 00:23:16,920
proxy agent we have implemented the

00:23:13,260 --> 00:23:19,470
logic for the routing services we we

00:23:16,920 --> 00:23:21,570
have additional features for deploying

00:23:19,470 --> 00:23:24,150
also database classes not only one

00:23:21,570 --> 00:23:29,070
single instance but deploying for

00:23:24,150 --> 00:23:31,740
example if I several fully grown MongoDB

00:23:29,070 --> 00:23:35,360
cluster with Rao a query service with

00:23:31,740 --> 00:23:37,770
replica sets and so on and with existing

00:23:35,360 --> 00:23:39,980
service brokers log search elastic

00:23:37,770 --> 00:23:42,210
search manga ravine Maria Rubio

00:23:39,980 --> 00:23:46,500
PostgreSQL and so on chart configuration

00:23:42,210 --> 00:23:50,130
service discovery from the Springwood

00:23:46,500 --> 00:23:54,810
cloud as spring clouds things and I

00:23:50,130 --> 00:24:03,540
think we're back here so we can create

00:23:54,810 --> 00:24:08,330
this service instance so I would they

00:24:03,540 --> 00:24:11,430
would say we we start with a question

00:24:08,330 --> 00:24:14,960
round and wait for the service to come

00:24:11,430 --> 00:24:20,070
up so I can present to you the installed

00:24:14,960 --> 00:24:25,570
DB and interface are there any questions

00:24:20,070 --> 00:24:28,990
left for sure if you see here green

00:24:25,570 --> 00:24:30,580
button if you have interested in the

00:24:28,990 --> 00:24:33,180
in-service broker development you can

00:24:30,580 --> 00:24:35,830
come up to me at the whole conference

00:24:33,180 --> 00:24:38,350
contact data my colleague if you don't

00:24:35,830 --> 00:24:40,900
find me my colleague Alex is here he

00:24:38,350 --> 00:24:42,700
knows where I add the map where I'm on

00:24:40,900 --> 00:24:44,950
them at the moment of each time of the

00:24:42,700 --> 00:24:48,850
conference afterwards we can email me

00:24:44,950 --> 00:24:51,730
get a contact us and get a half so free

00:24:48,850 --> 00:24:53,650
for your questions unfortunately if like

00:24:51,730 --> 00:24:55,720
I said we had only 30 minutes and wanted

00:24:53,650 --> 00:24:57,790
to do a deep dive into the code and had

00:24:55,720 --> 00:25:13,270
to change because we were said you have

00:24:57,790 --> 00:25:15,730
only 30 minutes yes and that's the

00:25:13,270 --> 00:25:18,940
framework is in production use so it's

00:25:15,730 --> 00:25:22,360
it's measure the versioning was because

00:25:18,940 --> 00:25:28,480
of we were changing the structure of the

00:25:22,360 --> 00:25:28,990
open source github and the because we

00:25:28,480 --> 00:25:31,000
changed

00:25:28,990 --> 00:25:34,060
also the maven dependencies and

00:25:31,000 --> 00:25:36,340
redesigned which parts are a core

00:25:34,060 --> 00:25:40,150
functionalities in which are not the the

00:25:36,340 --> 00:25:44,620
open source version is actually in 0.1

00:25:40,150 --> 00:25:45,400
RC because we want to get ready that

00:25:44,620 --> 00:25:51,040
it's stable

00:25:45,400 --> 00:25:54,550
so it's only because we we we've done

00:25:51,040 --> 00:25:56,650
the the changes two weeks ago and aren't

00:25:54,550 --> 00:25:59,260
finished yet because if we do it not

00:25:56,650 --> 00:26:01,780
full-time or programming but in part

00:25:59,260 --> 00:26:05,620
time of our workings time at the company

00:26:01,780 --> 00:26:10,570
so it's only that's the only reason it's

00:26:05,620 --> 00:26:12,490
it's 0.1 because the new structure

00:26:10,570 --> 00:26:16,440
you've seen on the the graphics is a

00:26:12,490 --> 00:26:21,340
little bit different and we want to get

00:26:16,440 --> 00:26:23,560
that straight we are here for the 1.0

00:26:21,340 --> 00:26:29,630
version of the new structure in about

00:26:23,560 --> 00:26:32,630
two weeks or so but a good good point

00:26:29,630 --> 00:26:32,630
yes

00:26:40,340 --> 00:26:49,040
mm-hmm you have that depends so um you

00:26:46,490 --> 00:26:50,750
have to see the the sells broker itself

00:26:49,040 --> 00:26:52,970
it's a cripples bring good application

00:26:50,750 --> 00:26:56,450
you can deploy it to where you want also

00:26:52,970 --> 00:26:59,330
to use Cloud Foundry the the service you

00:26:56,450 --> 00:27:02,240
want to implement it depends maybe your

00:26:59,330 --> 00:27:05,150
service is not an instance itself so

00:27:02,240 --> 00:27:09,290
it's maybe some kind of abstract things

00:27:05,150 --> 00:27:12,380
like you have an Jenkins server and you

00:27:09,290 --> 00:27:15,160
want a service instance is like a new

00:27:12,380 --> 00:27:18,130
project on the Jenkins server and

00:27:15,160 --> 00:27:21,890
binding a service means that it's

00:27:18,130 --> 00:27:25,040
somehow added to the Jenkins so you need

00:27:21,890 --> 00:27:29,120
to change some things of the of the

00:27:25,040 --> 00:27:31,460
connection if you see here we've we've

00:27:29,120 --> 00:27:33,940
made this the structure for that purpose

00:27:31,460 --> 00:27:38,980
so you can here make some logic

00:27:33,940 --> 00:27:42,410
deploying accessing the the existing

00:27:38,980 --> 00:27:44,570
Jenkins server for example and here

00:27:42,410 --> 00:27:49,310
adding a new platform service which

00:27:44,570 --> 00:27:52,700
orchestrate these things and here you're

00:27:49,310 --> 00:27:54,890
doing things like adding new stages or

00:27:52,700 --> 00:27:56,780
something or adding this as a service in

00:27:54,890 --> 00:28:00,230
the in the Jenkins pipeline or whatever

00:27:56,780 --> 00:28:02,780
you want so it's made so this the blue

00:28:00,230 --> 00:28:05,180
parts are getting the concepts of the

00:28:02,780 --> 00:28:09,260
the Cloud Foundry side of the service

00:28:05,180 --> 00:28:13,150
broker API and the red ones are for

00:28:09,260 --> 00:28:15,950
change which can be be changed we only

00:28:13,150 --> 00:28:18,050
developed OpenStack darker and Redis for

00:28:15,950 --> 00:28:20,840
the moment but that's not the the thing

00:28:18,050 --> 00:28:26,690
we want you go to it's only part of the

00:28:20,840 --> 00:28:30,260
work done so and happy for contributions

00:28:26,690 --> 00:28:34,250
new forking new protein new projects at

00:28:30,260 --> 00:28:36,440
the the CF service broker github

00:28:34,250 --> 00:28:38,120
repository we want to try to get

00:28:36,440 --> 00:28:41,420
something like an inventory of existing

00:28:38,120 --> 00:28:44,510
projects so if you have your own one by

00:28:41,420 --> 00:28:49,280
forking our code tell us we stay put a

00:28:44,510 --> 00:28:52,580
link on it and so that's the one of the

00:28:49,280 --> 00:28:53,870
main reason we changed the structure if

00:28:52,580 --> 00:29:00,529
you have not all code

00:28:53,870 --> 00:29:02,270
one repository but divided so we have

00:29:00,529 --> 00:29:05,840
for each of the the custom service

00:29:02,270 --> 00:29:14,779
brokers for example one one single

00:29:05,840 --> 00:29:19,809
repository with a new setup so I think

00:29:14,779 --> 00:29:19,809
we waited long enough to see

00:29:25,120 --> 00:29:33,430
see a find service so we have no app

00:29:31,150 --> 00:29:37,410
here in the space so I use the service

00:29:33,430 --> 00:29:44,220
broke itself and bind it to our test

00:29:37,410 --> 00:29:44,220
database we if we go to the

00:29:51,430 --> 00:29:59,240
there it is our new database and if you

00:29:56,300 --> 00:30:02,330
see here it's the binding ID of the

00:29:59,240 --> 00:30:05,690
service instance binding and if you go

00:30:02,330 --> 00:30:13,060
to the users list we see the new user

00:30:05,690 --> 00:30:13,060
with the same ID any questions

00:30:15,760 --> 00:30:22,700
programming this I started last Friday

00:30:19,120 --> 00:30:25,070
so you see it's not much is it not much

00:30:22,700 --> 00:30:35,270
time to you you need to implement a new

00:30:25,070 --> 00:30:37,370
service broker with this unfortunately

00:30:35,270 --> 00:30:45,710
it's a spring boot application which

00:30:37,370 --> 00:30:48,110
uses Java so it's a Java framework but

00:30:45,710 --> 00:30:50,090
you can looking at the code it's open

00:30:48,110 --> 00:30:53,860
source so we can easily adapt the code

00:30:50,090 --> 00:30:53,860
to other languages for example

00:30:59,070 --> 00:31:16,740
yeah hmm yeah very good question if we

00:31:07,380 --> 00:31:24,030
if we look back here enjoy on this one

00:31:16,740 --> 00:31:26,340
very easy you have or maybe that's more

00:31:24,030 --> 00:31:29,300
interesting and you have several

00:31:26,340 --> 00:31:32,820
different API endpoints to implement

00:31:29,300 --> 00:31:35,220
with several parameters which can be

00:31:32,820 --> 00:31:38,070
added exchanged for the different kinds

00:31:35,220 --> 00:31:40,410
of services so it easily gets a little

00:31:38,070 --> 00:31:46,400
bit frustrating to get all the things

00:31:40,410 --> 00:31:49,860
into it and and the it is a little bit

00:31:46,400 --> 00:31:51,390
problematic too to adapt the code from

00:31:49,860 --> 00:31:54,090
one service broker to another if it's

00:31:51,390 --> 00:31:58,260
too hardly coupled to the original code

00:31:54,090 --> 00:32:00,710
so if you want to develop several

00:31:58,260 --> 00:32:05,190
service brokers you have to get in an

00:32:00,710 --> 00:32:07,860
interface to it yep because the the API

00:32:05,190 --> 00:32:10,830
to the Cloud Foundry system isn't

00:32:07,860 --> 00:32:13,500
changing if it's an service broker for

00:32:10,830 --> 00:32:17,190
CouchDB if it's service broker for some

00:32:13,500 --> 00:32:20,250
other custom service like a PostgreSQL

00:32:17,190 --> 00:32:22,320
of water ever so only the the

00:32:20,250 --> 00:32:24,570
information in the parameters change and

00:32:22,320 --> 00:32:27,120
maybe a list of custom parameters is

00:32:24,570 --> 00:32:31,470
added to the metadata of the of the of

00:32:27,120 --> 00:32:36,630
the Java file of the JSON file sent from

00:32:31,470 --> 00:32:43,070
Cloud Foundry to you and that's the part

00:32:36,630 --> 00:32:46,980
so another challenge for us to get here

00:32:43,070 --> 00:32:48,930
things done like if you have several I

00:32:46,980 --> 00:32:56,700
wanted to have several service brokers

00:32:48,930 --> 00:32:59,850
at the same time which are which are

00:32:56,700 --> 00:33:02,730
also a fail backs of themselves so you

00:32:59,850 --> 00:33:05,850
have you have to maintenance the stage

00:33:02,730 --> 00:33:09,360
in some external database but remain

00:33:05,850 --> 00:33:12,769
here and if it comes into challenge with

00:33:09,360 --> 00:33:15,330
a with a I think Ronis service instead

00:33:12,769 --> 00:33:17,580
so you have deploy service you have to

00:33:15,330 --> 00:33:19,710
own it not 60 seconds but longer time

00:33:17,580 --> 00:33:22,559
and you want to follow up the the

00:33:19,710 --> 00:33:25,370
maintenance the the the progress you

00:33:22,559 --> 00:33:29,250
have to to get in to achieve that it's

00:33:25,370 --> 00:33:33,330
may change over time so you can have the

00:33:29,250 --> 00:33:36,000
problems of the jobs created the service

00:33:33,330 --> 00:33:39,090
broker crashes another service broker

00:33:36,000 --> 00:33:43,139
comes up and has to get those the same

00:33:39,090 --> 00:33:45,440
the same status up and so on so it's the

00:33:43,139 --> 00:33:51,330
maintenance cycles you have in

00:33:45,440 --> 00:33:54,269
productions or systems and also to to

00:33:51,330 --> 00:33:58,620
depth from different deployment systems

00:33:54,269 --> 00:34:00,840
to one single point of code so it's so

00:33:58,620 --> 00:34:04,740
you don't depend on where to where gets

00:34:00,840 --> 00:34:08,730
over the service tube at this part of

00:34:04,740 --> 00:34:11,869
the code but only it's there and this

00:34:08,730 --> 00:34:11,869
handless of the rest

00:34:19,649 --> 00:34:22,819
other questions

00:34:25,629 --> 00:34:39,379
okay or okay then thank you if you want

00:34:36,470 --> 00:34:44,050
to contact us here are the informations

00:34:39,379 --> 00:34:44,050

YouTube URL: https://www.youtube.com/watch?v=hl-zIvAu7TA


