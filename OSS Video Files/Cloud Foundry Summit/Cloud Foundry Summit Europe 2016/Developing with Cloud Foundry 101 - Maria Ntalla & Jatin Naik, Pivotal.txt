Title: Developing with Cloud Foundry 101 - Maria Ntalla & Jatin Naik, Pivotal
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Developing with Cloud Foundry 101 - Maria Ntalla & Jatin Naik, Pivotal

Do you want to get started with Cloud Foundry - but think that setting it up takes too long? Do you want to know to get started with using services but donâ€™t have a BOSH director setup?

Join us while we give you a quick intro to the fundamentals and then take you through the whole process of writing, deploying, updating apps on CF.

In this session, we will iterate on an application, demonstrating how you can get started on a Cloud Foundry without even leaving your workstation - and push to a remote Cloud Foundry when ready. You will also learn how to use services from your CF application.

About Jatin Naik
Software Engineer at Pivotal, on Cloud Foundry.

About Maria Ntalla
Maria works as a Software Engineer with Pivotal on CloudFoundry.
Captions: 
	00:00:00,380 --> 00:00:07,080
hello oh hi hello everyone thanks very

00:00:04,920 --> 00:00:09,179
much for coming along welcome to cloud

00:00:07,080 --> 00:00:13,980
foundry 101 an introduction for

00:00:09,179 --> 00:00:17,010
developers so over the next half hour so

00:00:13,980 --> 00:00:19,050
we're going to go and look what it's

00:00:17,010 --> 00:00:21,090
like to use cloud foundry but from an

00:00:19,050 --> 00:00:22,590
application developers perspective so

00:00:21,090 --> 00:00:24,420
we're going to look at some main

00:00:22,590 --> 00:00:27,090
concepts and some commands to kind of

00:00:24,420 --> 00:00:29,369
help you get started when you first

00:00:27,090 --> 00:00:32,070
learn with cloud foundry we're also

00:00:29,369 --> 00:00:33,690
going to look at what type of

00:00:32,070 --> 00:00:36,149
applications you can deploy using cloud

00:00:33,690 --> 00:00:38,219
foundry how you manage services and

00:00:36,149 --> 00:00:40,440
databases and also we're gonna have a

00:00:38,219 --> 00:00:42,149
look at logging and debugging we're not

00:00:40,440 --> 00:00:43,350
gonna go very much into great detail of

00:00:42,149 --> 00:00:45,620
like the internals and how the

00:00:43,350 --> 00:00:48,539
components work together with each other

00:00:45,620 --> 00:00:50,180
we're just going to yeah stay up

00:00:48,539 --> 00:00:52,770
developers for the next half hour

00:00:50,180 --> 00:00:54,719
so before we check out who are these two

00:00:52,770 --> 00:00:57,120
strange people who have come here to

00:00:54,719 --> 00:01:00,629
talk to you for half an hour so my name

00:00:57,120 --> 00:01:02,489
is Maria I work for pivotal I'm a

00:01:00,629 --> 00:01:04,320
developer for cloud foundry and I'm

00:01:02,489 --> 00:01:09,060
currently on the team that provides

00:01:04,320 --> 00:01:12,119
Redis as a service for the platform I

00:01:09,060 --> 00:01:13,380
work portal as well so I work on the

00:01:12,119 --> 00:01:15,299
team which is trying to solve the

00:01:13,380 --> 00:01:19,860
problem of backing up and restoring for

00:01:15,299 --> 00:01:21,869
me as a platform all right so what is

00:01:19,860 --> 00:01:25,170
cloud foundry and like why should you

00:01:21,869 --> 00:01:28,350
care in a nutshell cloud foundry is a

00:01:25,170 --> 00:01:30,390
platform or a tool that takes your code

00:01:28,350 --> 00:01:32,430
and does whatever it needs to do to make

00:01:30,390 --> 00:01:34,470
it a running application somewhere on

00:01:32,430 --> 00:01:35,909
the cloud or somewhere in a server

00:01:34,470 --> 00:01:38,220
there's a famous haiku that you might

00:01:35,909 --> 00:01:40,079
have heard of which goes here's my code

00:01:38,220 --> 00:01:42,720
rendered on the cloud I don't know I

00:01:40,079 --> 00:01:45,780
don't care how and this that pretty much

00:01:42,720 --> 00:01:47,520
describes it quite well it's obviously a

00:01:45,780 --> 00:01:48,899
lot more involved than that in the

00:01:47,520 --> 00:01:52,500
background but as far as we are

00:01:48,899 --> 00:01:54,270
concerned it solves a couple of very

00:01:52,500 --> 00:01:58,500
important problems that developers face

00:01:54,270 --> 00:02:00,320
quite often the first of them is that it

00:01:58,500 --> 00:02:02,399
gives you complete flexibility on how

00:02:00,320 --> 00:02:03,930
elastic you want your application to be

00:02:02,399 --> 00:02:05,520
so you can you can have more instances

00:02:03,930 --> 00:02:07,140
of your application quite easily you can

00:02:05,520 --> 00:02:09,420
have more memory or more disk on your

00:02:07,140 --> 00:02:10,319
server if you see that your application

00:02:09,420 --> 00:02:13,710
needs it and that's quite

00:02:10,319 --> 00:02:16,620
straightforward to do a second point is

00:02:13,710 --> 00:02:18,630
it makes it really easy for a developer

00:02:16,620 --> 00:02:20,130
to have a complete replication of their

00:02:18,630 --> 00:02:21,660
environments so a problem that I've had

00:02:20,130 --> 00:02:24,270
in the past is that I would be

00:02:21,660 --> 00:02:27,960
developing my code against a development

00:02:24,270 --> 00:02:29,190
environment and then the the production

00:02:27,960 --> 00:02:31,350
one would have a slightly different

00:02:29,190 --> 00:02:33,060
setup and I would run into issues that

00:02:31,350 --> 00:02:35,040
had to do with the configuration the

00:02:33,060 --> 00:02:37,320
setup of the environment not so much

00:02:35,040 --> 00:02:39,660
with the code itself so Cloud Foundry

00:02:37,320 --> 00:02:42,330
makes it really easy to just have exact

00:02:39,660 --> 00:02:44,550
replication between your development and

00:02:42,330 --> 00:02:46,410
your staging environment your CI and

00:02:44,550 --> 00:02:51,120
your production or whatever else makes

00:02:46,410 --> 00:02:53,190
sense for you so how does the clone

00:02:51,120 --> 00:02:54,750
Cloud Foundry ecosystem look like so

00:02:53,190 --> 00:02:57,960
Cloud Foundry itself as you might have

00:02:54,750 --> 00:03:00,660
heard is a open source software you as a

00:02:57,960 --> 00:03:02,880
developer would never have to install

00:03:00,660 --> 00:03:05,160
Cloud Foundry that should be done by

00:03:02,880 --> 00:03:09,690
someone in your ops team in the in the

00:03:05,160 --> 00:03:11,580
organization you like normally there are

00:03:09,690 --> 00:03:13,770
different flavors of Cloud Foundry that

00:03:11,580 --> 00:03:15,420
people install so you could potentially

00:03:13,770 --> 00:03:17,580
just download the release open source

00:03:15,420 --> 00:03:20,610
releases and the operator can install

00:03:17,580 --> 00:03:23,190
Cloud Foundry open source people also go

00:03:20,610 --> 00:03:25,440
for a different flavor of floor foundry

00:03:23,190 --> 00:03:28,830
made by like nearly all of these

00:03:25,440 --> 00:03:31,050
companies which essentially provides

00:03:28,830 --> 00:03:32,910
support and they're add-ons on top of

00:03:31,050 --> 00:03:34,980
cloud foundry on top of the open source

00:03:32,910 --> 00:03:36,480
cloud foundry and that is deployed

00:03:34,980 --> 00:03:38,520
on-premise so that is deployed on

00:03:36,480 --> 00:03:41,970
however hardware that you own in your

00:03:38,520 --> 00:03:44,430
company so the other option is to use

00:03:41,970 --> 00:03:46,440
Cloud Foundry as a service so there are

00:03:44,430 --> 00:03:49,050
certain sites in which you can go to and

00:03:46,440 --> 00:03:51,210
sign up for a Cloud Foundry account and

00:03:49,050 --> 00:03:53,280
then you will you will receive

00:03:51,210 --> 00:03:56,520
credentials through which you can deploy

00:03:53,280 --> 00:03:58,200
applications on their environment this

00:03:56,520 --> 00:03:59,520
is really useful if you are like just

00:03:58,200 --> 00:04:00,960
starting out and you don't have that

00:03:59,520 --> 00:04:03,360
many applications to push on Cloud

00:04:00,960 --> 00:04:06,210
Foundry or you just want to try out

00:04:03,360 --> 00:04:09,540
Cloud Foundry so the others the other

00:04:06,210 --> 00:04:11,610
scenario is that how can you use Cloud

00:04:09,540 --> 00:04:13,230
Foundry on your workstations or if you

00:04:11,610 --> 00:04:16,100
if you would like to work with Cloud

00:04:13,230 --> 00:04:19,350
Foundry offline so there is this tool

00:04:16,100 --> 00:04:22,560
developed by PC pivotal called PCF depth

00:04:19,350 --> 00:04:24,900
which you can which you can essentially

00:04:22,560 --> 00:04:27,300
download and run on your local machine

00:04:24,900 --> 00:04:29,190
so this will give you a

00:04:27,300 --> 00:04:30,810
version of Cloud Foundry so this is not

00:04:29,190 --> 00:04:34,139
Cloud Foundry as it runs on the server

00:04:30,810 --> 00:04:35,940
so what what we have done is like taken

00:04:34,139 --> 00:04:38,190
all the components and put them on one

00:04:35,940 --> 00:04:40,620
motion machine they will give you like

00:04:38,190 --> 00:04:42,810
around the same interface as your

00:04:40,620 --> 00:04:45,509
application would have when it runs in

00:04:42,810 --> 00:04:50,310
the cloud so we are also going to be

00:04:45,509 --> 00:04:53,340
using this tool to - for all of our

00:04:50,310 --> 00:04:57,120
demos it takes around 15 minutes to

00:04:53,340 --> 00:05:01,110
install is pretty easy so now so now I

00:04:57,120 --> 00:05:04,289
did now we come to the next part of our

00:05:01,110 --> 00:05:05,940
talk which is like how a day looks like

00:05:04,289 --> 00:05:09,990
in life of a cloud foundry developer

00:05:05,940 --> 00:05:11,729
yeah yeah so I like trick so much that

00:05:09,990 --> 00:05:14,039
for a moment you you come into work in

00:05:11,729 --> 00:05:16,490
the morning at like nine ish you've had

00:05:14,039 --> 00:05:18,960
your favorite caffeinated drink and

00:05:16,490 --> 00:05:21,240
you've gone to your desk and your

00:05:18,960 --> 00:05:22,889
beloved project manager comes in and

00:05:21,240 --> 00:05:27,060
gives you that tells you that the

00:05:22,889 --> 00:05:28,770
assignment for that week is to create a

00:05:27,060 --> 00:05:31,020
web application somewhere in the

00:05:28,770 --> 00:05:34,830
internet that lists beers to its

00:05:31,020 --> 00:05:36,779
visitors so you go away you have a quick

00:05:34,830 --> 00:05:39,449
chat with your teammates and you decide

00:05:36,779 --> 00:05:42,180
to deploy it as a simple Ruby web

00:05:39,449 --> 00:05:44,009
application so let's have a look at the

00:05:42,180 --> 00:05:48,240
first step which is how do we deploy an

00:05:44,009 --> 00:05:51,360
app onto Cloud Foundry so I will checked

00:05:48,240 --> 00:05:53,279
out the first step here you'll see that

00:05:51,360 --> 00:05:56,069
we just have one endpoint and that

00:05:53,279 --> 00:05:58,770
endpoint renders an HTML page which is

00:05:56,069 --> 00:06:01,199
statically displays a list of beers

00:05:58,770 --> 00:06:04,650
so anybody that visits it and if we

00:06:01,199 --> 00:06:06,090
wanted we can go ahead and deploy that

00:06:04,650 --> 00:06:07,800
web application that's exactly what

00:06:06,090 --> 00:06:09,150
we're going to do the only thing that

00:06:07,800 --> 00:06:11,940
we'll have to change is that the

00:06:09,150 --> 00:06:13,979
instruction the startup instruction we

00:06:11,940 --> 00:06:16,889
will change the hard-coded 8080 port

00:06:13,979 --> 00:06:19,199
into an environment variable called port

00:06:16,889 --> 00:06:21,810
now this environment variable is

00:06:19,199 --> 00:06:25,319
populated by Cloud Foundry and it's

00:06:21,810 --> 00:06:27,990
important to have it to use it like that

00:06:25,319 --> 00:06:30,569
for two reasons first of all it's the

00:06:27,990 --> 00:06:33,120
port where Cloud Foundry will redirect

00:06:30,569 --> 00:06:35,610
traffic so we don't want to lose that

00:06:33,120 --> 00:06:38,820
and secondly its support against which

00:06:35,610 --> 00:06:40,550
it will learn any health checks it

00:06:38,820 --> 00:06:43,010
exposes it to us through the

00:06:40,550 --> 00:06:44,930
yes this variable so now we're ready to

00:06:43,010 --> 00:06:47,360
go we see f.push and the name of the

00:06:44,930 --> 00:06:49,070
application and this will go away and do

00:06:47,360 --> 00:06:50,840
stuff so what's happening in the

00:06:49,070 --> 00:06:53,540
background the first thing that happens

00:06:50,840 --> 00:06:55,550
is that the command-line tool that we're

00:06:53,540 --> 00:06:58,130
targeting to talk to plan foundry which

00:06:55,550 --> 00:07:01,880
is called the CF CLI will create a zip

00:06:58,130 --> 00:07:05,300
of all of our code and pass that on to

00:07:01,880 --> 00:07:07,490
cloud foundry once cloud foundry has our

00:07:05,300 --> 00:07:10,880
code it needs first of all to determine

00:07:07,490 --> 00:07:12,470
what it's written in so it comes

00:07:10,880 --> 00:07:14,720
equipped with a set of diagnostic

00:07:12,470 --> 00:07:17,240
scripts if you like which are called

00:07:14,720 --> 00:07:18,710
build parks and their responsibility is

00:07:17,240 --> 00:07:20,930
to go through the code and see is it a

00:07:18,710 --> 00:07:22,160
ruby application is it a Java project

00:07:20,930 --> 00:07:25,610
what is it

00:07:22,160 --> 00:07:27,410
once it finds that out it knows how to

00:07:25,610 --> 00:07:29,210
build it and that's exactly what it does

00:07:27,410 --> 00:07:31,760
it built it into an executable package

00:07:29,210 --> 00:07:34,730
which in CF lingo is called a droplet it

00:07:31,760 --> 00:07:36,530
takes that droplet and deploys it into a

00:07:34,730 --> 00:07:38,000
container and attempts to start the

00:07:36,530 --> 00:07:40,550
application in the way that we have

00:07:38,000 --> 00:07:42,020
instructed it in the first seconds after

00:07:40,550 --> 00:07:43,970
it has attempted to start it will

00:07:42,020 --> 00:07:46,220
perform some checks against the port and

00:07:43,970 --> 00:07:48,230
if everything is up and running it will

00:07:46,220 --> 00:07:51,500
consider the deployment successful and

00:07:48,230 --> 00:07:54,250
it will give us back a route through

00:07:51,500 --> 00:07:56,390
which we can go ahead and access that

00:07:54,250 --> 00:08:01,930
application so let's have a look at what

00:07:56,390 --> 00:08:01,930
our application looks like at this point

00:08:10,040 --> 00:08:16,200
all right brilliant okay so yeah it's

00:08:13,290 --> 00:08:18,420
pretty much what we're expecting yeah we

00:08:16,200 --> 00:08:20,220
have a static table and a little image

00:08:18,420 --> 00:08:24,930
on the top so what feature are we adding

00:08:20,220 --> 00:08:26,340
next yeah so alright what what I would

00:08:24,930 --> 00:08:28,140
like to do like when I deploy

00:08:26,340 --> 00:08:30,600
applications to the Internet the next

00:08:28,140 --> 00:08:33,630
step that I do is try to add some

00:08:30,600 --> 00:08:35,100
tracking on so to figure out who is

00:08:33,630 --> 00:08:37,740
visiting my website and how many

00:08:35,100 --> 00:08:40,050
visitors I'm guy am I getting per day so

00:08:37,740 --> 00:08:41,790
I normally do that with a tool called

00:08:40,050 --> 00:08:44,310
Google Analytics in which you can search

00:08:41,790 --> 00:08:47,790
some JavaScript on your page and it will

00:08:44,310 --> 00:08:49,710
track visitors for you so like we have

00:08:47,790 --> 00:08:51,420
done just that in you know in our sample

00:08:49,710 --> 00:08:53,910
application so in our sample sample

00:08:51,420 --> 00:08:55,170
application we have a script that from

00:08:53,910 --> 00:08:57,180
Google Analytics injected

00:08:55,170 --> 00:08:59,460
now this zip tax needs some

00:08:57,180 --> 00:09:02,310
configuration this configuration that it

00:08:59,460 --> 00:09:05,280
needs is my account ID essentially on

00:09:02,310 --> 00:09:08,730
Google Analytics and that is injected

00:09:05,280 --> 00:09:11,580
into this tag so traditionally you would

00:09:08,730 --> 00:09:14,310
you would inject this configuration

00:09:11,580 --> 00:09:15,960
through different means so the first

00:09:14,310 --> 00:09:18,090
option is you could just keep it in this

00:09:15,960 --> 00:09:20,280
inside the code or you could have a

00:09:18,090 --> 00:09:22,350
configuration file

00:09:20,280 --> 00:09:24,600
what Cloud Foundry asks you to do is

00:09:22,350 --> 00:09:27,330
keep all the configuration for your

00:09:24,600 --> 00:09:30,180
application in environment variables so

00:09:27,330 --> 00:09:31,950
and you can pull the configuration from

00:09:30,180 --> 00:09:34,350
your environment variable in your

00:09:31,950 --> 00:09:36,990
application so the reason for that is

00:09:34,350 --> 00:09:39,300
your app code is then separate from your

00:09:36,990 --> 00:09:41,400
configuration pool so you could deploy

00:09:39,300 --> 00:09:45,660
the same app artifact on to different

00:09:41,400 --> 00:09:48,240
environments like a def and prod so what

00:09:45,660 --> 00:09:50,340
we have done over here is we have set

00:09:48,240 --> 00:09:51,840
like the configuration for the account

00:09:50,340 --> 00:09:55,950
will come from an environment variable

00:09:51,840 --> 00:09:58,890
called GA tag and we can use Cloud

00:09:55,950 --> 00:10:02,670
Foundry to to set that environment so

00:09:58,890 --> 00:10:06,690
the way that you do that is you use a

00:10:02,670 --> 00:10:09,470
CLI command called CF set N and give the

00:10:06,690 --> 00:10:15,440
app name and the environment

00:10:09,470 --> 00:10:17,540
you want effect and if you restart the

00:10:15,440 --> 00:10:19,490
application what will happen is that

00:10:17,540 --> 00:10:21,860
environment variable will be injected to

00:10:19,490 --> 00:10:26,270
club boundary and it will be replaced

00:10:21,860 --> 00:10:28,900
inside our our tag there so if you can

00:10:26,270 --> 00:10:28,900
go to the source

00:10:39,390 --> 00:10:49,019
yeah so by magic we have our of a cord

00:10:44,519 --> 00:10:52,350
injected over there so what's next so am

00:10:49,019 --> 00:10:55,010
i so the other way other thing that you

00:10:52,350 --> 00:10:58,019
can do is you can see the environment

00:10:55,010 --> 00:10:59,610
variables set on an application so the

00:10:58,019 --> 00:11:02,459
way that you do that is you have a

00:10:59,610 --> 00:11:05,160
command called CF and an application

00:11:02,459 --> 00:11:07,200
name that could give you a list of all

00:11:05,160 --> 00:11:08,730
the user provided environment variables

00:11:07,200 --> 00:11:11,190
or configuration that you have set up

00:11:08,730 --> 00:11:13,140
for that application so this is the way

00:11:11,190 --> 00:11:14,490
you can access that you can also see

00:11:13,140 --> 00:11:16,410
that there are there are some system

00:11:14,490 --> 00:11:24,060
provided variables and we'll come to

00:11:16,410 --> 00:11:25,709
those later so so now what's next so our

00:11:24,060 --> 00:11:28,230
project manager is back and like

00:11:25,709 --> 00:11:30,870
apparently our amazing application has

00:11:28,230 --> 00:11:33,440
gone viral on the Internet and how can

00:11:30,870 --> 00:11:35,700
we possibly cope with so much traffic I

00:11:33,440 --> 00:11:37,529
mean it's a it's a really good problem

00:11:35,700 --> 00:11:38,640
to have I think struggling for resources

00:11:37,529 --> 00:11:40,890
I guess it means you have a lot of

00:11:38,640 --> 00:11:42,329
visitors there generally as you may or

00:11:40,890 --> 00:11:45,510
may not know two ways that you can

00:11:42,329 --> 00:11:48,000
provide more oomph to your applications

00:11:45,510 --> 00:11:50,100
you can either provide more resources to

00:11:48,000 --> 00:11:52,470
the server's more RAM or more disk which

00:11:50,100 --> 00:11:55,220
is also known as scaling up or you can

00:11:52,470 --> 00:11:58,410
simply have more instances of that our

00:11:55,220 --> 00:12:01,050
serving requests which is also known as

00:11:58,410 --> 00:12:03,570
scaling out we can try and figure out

00:12:01,050 --> 00:12:09,300
what exactly the problem is by looking

00:12:03,570 --> 00:12:11,880
at CF apps or CF a beer as well we'll

00:12:09,300 --> 00:12:18,630
give it for that specific one so you can

00:12:11,880 --> 00:12:20,790
see next to how much B utilization we

00:12:18,630 --> 00:12:22,170
have and how much memory in disk we're

00:12:20,790 --> 00:12:23,880
using so if you're try and imagine a

00:12:22,170 --> 00:12:25,800
very high CPU load for example that

00:12:23,880 --> 00:12:27,680
would indicate high traffic and in such

00:12:25,800 --> 00:12:31,230
a situation we would probably think of

00:12:27,680 --> 00:12:34,230
simply having more instances of the

00:12:31,230 --> 00:12:37,529
application now Cloud Foundry makes it

00:12:34,230 --> 00:12:39,899
really easy for us to replicate our code

00:12:37,529 --> 00:12:42,300
and we just do that with a command

00:12:39,899 --> 00:12:44,760
called CF scale and then with a flag

00:12:42,300 --> 00:12:46,949
minus i we can provide the number of

00:12:44,760 --> 00:12:49,170
instances that we want to run so you say

00:12:46,949 --> 00:12:51,990
that we wanted five in total and that's

00:12:49,170 --> 00:12:52,950
pretty much all of the work that we have

00:12:51,990 --> 00:12:55,950
to do we don't need to do

00:12:52,950 --> 00:12:56,850
any discovery or any like load-balancing

00:12:55,950 --> 00:12:59,730
or anything like that

00:12:56,850 --> 00:13:02,580
Cloud Foundry will do it for us and then

00:12:59,730 --> 00:13:06,210
we'll start giving traffic to all of

00:13:02,580 --> 00:13:10,550
these five instances equally to see it

00:13:06,210 --> 00:13:15,120
in action if we go back to our page I

00:13:10,550 --> 00:13:20,330
think we have added a little line at the

00:13:15,120 --> 00:13:20,330
bottom it actually comes up

00:13:22,860 --> 00:13:27,390
yes which tell us which servers which

00:13:25,800 --> 00:13:30,900
instance is currently serving a request

00:13:27,390 --> 00:13:36,590
and we feel refresh enough times we

00:13:30,900 --> 00:13:36,590
should see it changing

00:13:42,540 --> 00:13:48,060
yeah and I was about that if we had if

00:13:45,690 --> 00:13:50,520
we just if we prefer to give more memory

00:13:48,060 --> 00:13:52,230
to our applications for example we use

00:13:50,520 --> 00:13:54,600
exactly the same commands to see a scale

00:13:52,230 --> 00:14:02,610
just with different Flags - Emperor

00:13:54,600 --> 00:14:04,860
memory for example next step is that we

00:14:02,610 --> 00:14:06,390
need to drive engagement and that's a

00:14:04,860 --> 00:14:08,820
very good point because until now we've

00:14:06,390 --> 00:14:10,680
had this static HTML table so that's not

00:14:08,820 --> 00:14:13,590
very interesting and the project manager

00:14:10,680 --> 00:14:19,440
wants us to enable users throughout

00:14:13,590 --> 00:14:22,440
their own beer yeah so as you saw our

00:14:19,440 --> 00:14:24,990
application is extremely static and the

00:14:22,440 --> 00:14:27,780
reason is because we don't we don't

00:14:24,990 --> 00:14:30,090
really receive any data from then from

00:14:27,780 --> 00:14:32,340
the end user and we don't save it

00:14:30,090 --> 00:14:35,970
anywhere and we don't push it out to the

00:14:32,340 --> 00:14:38,910
user again so as we mentioned in Cloud

00:14:35,970 --> 00:14:41,940
Foundry the applications run inside

00:14:38,910 --> 00:14:43,710
containers so it won't be a good idea to

00:14:41,940 --> 00:14:45,840
like write a file in the container that

00:14:43,710 --> 00:14:48,330
the application is running in to

00:14:45,840 --> 00:14:50,760
retrieve the data back one reason is

00:14:48,330 --> 00:14:53,010
that container like that data will only

00:14:50,760 --> 00:14:54,750
remain with that container and won't be

00:14:53,010 --> 00:14:57,480
like shared across all the containers

00:14:54,750 --> 00:15:00,090
and the other reason is like more

00:14:57,480 --> 00:15:02,220
importantly container ephemeral so

00:15:00,090 --> 00:15:05,300
you're supposed to assume that they can

00:15:02,220 --> 00:15:07,800
be destroyed and recreated anytime so

00:15:05,300 --> 00:15:11,520
like so the encapsulation through which

00:15:07,800 --> 00:15:14,190
you can save data is in Cloud Foundry is

00:15:11,520 --> 00:15:18,120
called a data service an example of a

00:15:14,190 --> 00:15:21,000
data service is like MySQL or Redis or a

00:15:18,120 --> 00:15:25,920
blob store so the way that you interact

00:15:21,000 --> 00:15:27,660
with a data service is you you you get a

00:15:25,920 --> 00:15:29,340
certain set of credentials through your

00:15:27,660 --> 00:15:33,060
environment you connect to that database

00:15:29,340 --> 00:15:35,670
and save data into it so you can look at

00:15:33,060 --> 00:15:38,120
the services data services available to

00:15:35,670 --> 00:15:40,830
you on your boundary installation by

00:15:38,120 --> 00:15:43,470
creating a firing of a command called CF

00:15:40,830 --> 00:15:47,310
marketplace so this will give you a list

00:15:43,470 --> 00:15:51,030
of services that are available like on

00:15:47,310 --> 00:15:53,180
the CF F installation you it comes with

00:15:51,030 --> 00:15:55,880
MySQL rabbit and various

00:15:53,180 --> 00:15:58,160
and all of them have certain plants so

00:15:55,880 --> 00:16:02,180
for for our application we can bind it

00:15:58,160 --> 00:16:11,750
to say a MySQL so we create a service of

00:16:02,180 --> 00:16:14,120
MySQL and choose a plan so this has now

00:16:11,750 --> 00:16:18,170
given us like this is an automated way

00:16:14,120 --> 00:16:22,310
of creating a datastore so we have a

00:16:18,170 --> 00:16:24,440
useable database instance so when I like

00:16:22,310 --> 00:16:26,660
let's just take a moment to like

00:16:24,440 --> 00:16:29,180
acknowledge what has happened here so

00:16:26,660 --> 00:16:31,160
when I was working at my last company it

00:16:29,180 --> 00:16:33,440
took quite some time to do this process

00:16:31,160 --> 00:16:36,770
so what I had to do to create a database

00:16:33,440 --> 00:16:39,770
was create a ticket and then follow up

00:16:36,770 --> 00:16:43,250
with our administrator to like like us

00:16:39,770 --> 00:16:47,030
like fulfill my request so that is self

00:16:43,250 --> 00:16:49,100
served now and you can do CF like create

00:16:47,030 --> 00:16:51,020
service if the operator has automated

00:16:49,100 --> 00:16:53,690
this workflow you can get a database

00:16:51,020 --> 00:16:56,570
that you could use so the next thing

00:16:53,690 --> 00:16:59,420
that we do is essentially like use this

00:16:56,570 --> 00:17:02,660
database in our application so the the

00:16:59,420 --> 00:17:05,060
concept or the lingo for like attaching

00:17:02,660 --> 00:17:09,920
a database to your application is called

00:17:05,060 --> 00:17:11,839
bind so if you bind a service to so we

00:17:09,920 --> 00:17:14,150
will bind our application to this

00:17:11,839 --> 00:17:18,050
service so what this will do is actually

00:17:14,150 --> 00:17:20,110
is get the credentials for the service

00:17:18,050 --> 00:17:22,820
and give it or inject it into the

00:17:20,110 --> 00:17:26,570
applications environment so if you look

00:17:22,820 --> 00:17:29,420
at the code changes that we have done we

00:17:26,570 --> 00:17:30,770
have some very preliminary database

00:17:29,420 --> 00:17:34,460
connection so we just creating a table

00:17:30,770 --> 00:17:36,860
and we have some post request handle

00:17:34,460 --> 00:17:38,930
which will insert records into the

00:17:36,860 --> 00:17:41,270
database the important thing to note

00:17:38,930 --> 00:17:44,290
here is like on line number four we are

00:17:41,270 --> 00:17:46,670
connecting to the database using

00:17:44,290 --> 00:17:49,250
environment variable called database URL

00:17:46,670 --> 00:17:51,170
so this is injected in by our bind

00:17:49,250 --> 00:17:53,390
service so this is specific to Ruby so

00:17:51,170 --> 00:17:56,120
the Ruby build pack will construct the

00:17:53,390 --> 00:18:00,020
database URL from vcap services which we

00:17:56,120 --> 00:18:01,970
will talk about more in a bit so after

00:18:00,020 --> 00:18:04,010
we after we have bound and pushed our

00:18:01,970 --> 00:18:05,510
applications you can see that all of our

00:18:04,010 --> 00:18:07,290
applications have started again and all

00:18:05,510 --> 00:18:09,990
of our applications are

00:18:07,290 --> 00:18:13,920
to that database that we created so if

00:18:09,990 --> 00:18:16,730
we like man go to our app again and add

00:18:13,920 --> 00:18:16,730
some more data

00:18:23,060 --> 00:18:26,260
[Music]

00:18:35,110 --> 00:18:42,309
the other DNS lookup is taken down yeah

00:18:38,289 --> 00:18:44,559
so now you can see the application can

00:18:42,309 --> 00:18:48,789
do a can connect to the database as well

00:18:44,559 --> 00:18:53,649
and store data inside a datastore if you

00:18:48,789 --> 00:18:58,110
go back to the environment we can see

00:18:53,649 --> 00:19:01,509
that in the Applications environment

00:18:58,110 --> 00:19:03,999
boundary has injected a special variable

00:19:01,509 --> 00:19:05,889
called week app services so this is

00:19:03,999 --> 00:19:07,779
common across all like languages that

00:19:05,889 --> 00:19:09,730
you use on Cloud Foundry and this

00:19:07,779 --> 00:19:13,330
essentially contains the credentials to

00:19:09,730 --> 00:19:15,039
connect to that database so if you if

00:19:13,330 --> 00:19:18,100
you are like debugging something you can

00:19:15,039 --> 00:19:20,139
essentially take that URL and use my

00:19:18,100 --> 00:19:24,539
sequel client to hop onto the database

00:19:20,139 --> 00:19:24,539
and see if some see what is going wrong

00:19:26,510 --> 00:19:33,009
[Music]

00:19:29,460 --> 00:19:34,690
yeah and just an additional point that I

00:19:33,009 --> 00:19:35,889
think is quite interesting is that when

00:19:34,690 --> 00:19:37,330
you're running with five instances of

00:19:35,889 --> 00:19:40,119
the same application they can also

00:19:37,330 --> 00:19:42,070
immediately see that one database Cloud

00:19:40,119 --> 00:19:44,710
Foundry gives you that but for free as

00:19:42,070 --> 00:19:46,239
well which is quite cool alright so I

00:19:44,710 --> 00:19:47,679
think we've got a pretty mature version

00:19:46,239 --> 00:19:49,690
of our application now it's time to

00:19:47,679 --> 00:19:51,940
start thinking about a bit of our

00:19:49,690 --> 00:19:54,549
long-term strategy how do we manage logs

00:19:51,940 --> 00:19:57,399
for it how do we what's our strategy if

00:19:54,549 --> 00:19:59,200
things start going wrong so a typical

00:19:57,399 --> 00:20:01,059
approach to do logs in an application

00:19:59,200 --> 00:20:03,309
would be this one for example you have a

00:20:01,059 --> 00:20:05,109
log file that you open at the beginning

00:20:03,309 --> 00:20:07,450
of your code and then when something not

00:20:05,109 --> 00:20:10,899
worth it happens you might want to log

00:20:07,450 --> 00:20:13,029
some lines inside at those points and

00:20:10,899 --> 00:20:16,690
say oh this happened here this happened

00:20:13,029 --> 00:20:19,509
here for the reason mainly that Jatin

00:20:16,690 --> 00:20:21,159
mentioned before which is that

00:20:19,509 --> 00:20:23,499
containers are fairly ephemeral so you

00:20:21,159 --> 00:20:26,139
can't really depend on their permanent

00:20:23,499 --> 00:20:27,940
storage being available at all times

00:20:26,139 --> 00:20:31,119
there's a better approach that Cloud

00:20:27,940 --> 00:20:33,940
Foundry adopts and and that is that you

00:20:31,119 --> 00:20:37,239
all you need to do for Cloud Foundry to

00:20:33,940 --> 00:20:39,879
do to register you the logs for you is

00:20:37,239 --> 00:20:42,369
to just put out any logs that you want

00:20:39,879 --> 00:20:43,990
in standard out stream and that's pretty

00:20:42,369 --> 00:20:46,269
much it so anything that touches the log

00:20:43,990 --> 00:20:47,779
file will just go and be replaced with

00:20:46,269 --> 00:20:50,070
the puts for Ruby

00:20:47,779 --> 00:20:52,109
and that does a couple of things for us

00:20:50,070 --> 00:20:54,269
first of all it mitigates that risk of

00:20:52,109 --> 00:20:58,739
permanent storage flying away now losing

00:20:54,269 --> 00:21:00,419
our logs secondly which is also quite a

00:20:58,739 --> 00:21:02,179
cool addition is if we have multiple

00:21:00,419 --> 00:21:04,529
instances of the application running

00:21:02,179 --> 00:21:07,019
with the traditional approach we would

00:21:04,529 --> 00:21:09,749
have to somehow be able to concatenate

00:21:07,019 --> 00:21:11,729
them into one or somehow coordinate them

00:21:09,749 --> 00:21:13,950
amongst themselves to find out what's

00:21:11,729 --> 00:21:16,049
happening we're Cloud Foundry does that

00:21:13,950 --> 00:21:17,969
log aggregation for us and it also gives

00:21:16,049 --> 00:21:20,609
you the capability of forwarding these

00:21:17,969 --> 00:21:25,349
logs to an external log train if you so

00:21:20,609 --> 00:21:27,599
want to do brilliant so we have the the

00:21:25,349 --> 00:21:30,210
new version of the application pushed

00:21:27,599 --> 00:21:33,179
and we can run a command called CF logs

00:21:30,210 --> 00:21:37,559
and the application name I think and

00:21:33,179 --> 00:21:39,570
this will give us a tailing of the logs

00:21:37,559 --> 00:21:42,089
at real time we've added lines every

00:21:39,570 --> 00:21:46,950
time somebody loads the screen and every

00:21:42,089 --> 00:21:51,179
time somebody adds a beard so if we make

00:21:46,950 --> 00:21:52,379
a few requests we're going to see in the

00:21:51,179 --> 00:21:56,129
other screen that logs are going to

00:21:52,379 --> 00:21:58,349
start streaming in which is quite quite

00:21:56,129 --> 00:22:03,119
a good tool if you'd like to see how

00:21:58,349 --> 00:22:05,460
your application is performing I think

00:22:03,119 --> 00:22:07,469
that's about it and then the last step

00:22:05,460 --> 00:22:09,059
that we might want to look at the last

00:22:07,469 --> 00:22:10,440
minute is all panics happen is what

00:22:09,059 --> 00:22:12,359
happens when we want to debug something

00:22:10,440 --> 00:22:13,919
and for that let's have a look at the

00:22:12,359 --> 00:22:21,809
last version of the application which

00:22:13,919 --> 00:22:27,299
introduces a random bug as bugs usually

00:22:21,809 --> 00:22:29,700
are so yes your thought is that just on

00:22:27,299 --> 00:22:31,259
line 5 we have an exception oops we have

00:22:29,700 --> 00:22:34,499
an exception that checks for something

00:22:31,259 --> 00:22:38,389
and explodes if it's not there so we'll

00:22:34,499 --> 00:22:38,389
just give that a moment to be deployed

00:22:54,080 --> 00:22:58,040
so this is the point where it attempts

00:22:55,910 --> 00:23:02,570
to start the instances and you'll see

00:22:58,040 --> 00:23:04,760
that sadly it failed badly actually so

00:23:02,570 --> 00:23:07,520
it gives us a hint of look at the recent

00:23:04,760 --> 00:23:08,660
logs and this is the command so we can

00:23:07,520 --> 00:23:11,690
have a look at that and this will

00:23:08,660 --> 00:23:14,390
probably give us an indication that oh

00:23:11,690 --> 00:23:17,330
yeah but us we forgot to set that must

00:23:14,390 --> 00:23:18,920
exist environment variable so that is

00:23:17,330 --> 00:23:22,270
very straightforward to fix from simply

00:23:18,920 --> 00:23:33,790
CF set time in the environment variable

00:23:22,270 --> 00:23:36,290
and that should have them start cool

00:23:33,790 --> 00:23:38,390
that will have them start imagine though

00:23:36,290 --> 00:23:40,340
that if you had a more kind of obscure

00:23:38,390 --> 00:23:42,500
bug but something like a networking

00:23:40,340 --> 00:23:44,990
issue that you you assume that you are

00:23:42,500 --> 00:23:47,420
able for example to ping Google Google

00:23:44,990 --> 00:23:49,660
calm but you're not able to this is

00:23:47,420 --> 00:23:54,710
something that you can't necessarily see

00:23:49,660 --> 00:23:55,940
from your logs as in you can't you can

00:23:54,710 --> 00:23:57,850
pretty much see what the setup of the

00:23:55,940 --> 00:24:01,250
container is like so things like

00:23:57,850 --> 00:24:02,810
interface configuration or the what the

00:24:01,250 --> 00:24:05,150
local file system file system looks like

00:24:02,810 --> 00:24:07,760
so for that Cloud Foundry provides you

00:24:05,150 --> 00:24:10,160
with quite a quite handy command which

00:24:07,760 --> 00:24:12,590
is CF SSH the name of the application

00:24:10,160 --> 00:24:14,270
and optionally they idea of the

00:24:12,590 --> 00:24:20,540
container that you want to associate

00:24:14,270 --> 00:24:22,550
into and it will open a NS 8 session on

00:24:20,540 --> 00:24:26,410
that container and you can do your

00:24:22,550 --> 00:24:26,410
troubleshooting there if you so wish to

00:24:26,650 --> 00:24:39,170
brilliant so with that I think it's time

00:24:32,060 --> 00:24:42,680
to go home that's the end of the day to

00:24:39,170 --> 00:24:44,750
summarize we looked at we explained you

00:24:42,680 --> 00:24:46,730
what cloud foundry is and like the

00:24:44,750 --> 00:24:48,470
different flavors of cloud foundry we

00:24:46,730 --> 00:24:51,260
took you through the basic cloud foundry

00:24:48,470 --> 00:24:54,020
journey for an application developer so

00:24:51,260 --> 00:24:56,690
which is CF push for taking your code

00:24:54,020 --> 00:24:59,420
and giving it to cloud foundry to run CF

00:24:56,690 --> 00:25:02,330
environment to set your configuration

00:24:59,420 --> 00:25:05,300
through environments CF scale to add

00:25:02,330 --> 00:25:07,490
more compute gives capacity to your

00:25:05,300 --> 00:25:07,850
application see at marketplace to see

00:25:07,490 --> 00:25:11,630
the

00:25:07,850 --> 00:25:12,770
services CF create service to create new

00:25:11,630 --> 00:25:14,870
services that you could use your

00:25:12,770 --> 00:25:17,600
application in your application with the

00:25:14,870 --> 00:25:21,440
bind and some debugging tools like logs

00:25:17,600 --> 00:25:23,419
and SSH so I think with this we we hope

00:25:21,440 --> 00:25:26,240
to have given you enough information to

00:25:23,419 --> 00:25:28,669
go and try out boundary for yourself you

00:25:26,240 --> 00:25:31,309
can now download it from PCF dev I think

00:25:28,669 --> 00:25:33,140
that is a really nice start point to

00:25:31,309 --> 00:25:56,780
start with to download and just to try

00:25:33,140 --> 00:25:58,850
it out on your local thank you so the

00:25:56,780 --> 00:26:01,190
applications that we described are

00:25:58,850 --> 00:26:02,299
called twelve pack for applications so

00:26:01,190 --> 00:26:04,580
these are essentially stateless

00:26:02,299 --> 00:26:05,240
applications that you need to push to

00:26:04,580 --> 00:26:08,840
Cloud Foundry

00:26:05,240 --> 00:26:10,640
so if you if your application relies on

00:26:08,840 --> 00:26:12,320
some state being there on local disk

00:26:10,640 --> 00:26:15,080
that won't work we have to encapsulate

00:26:12,320 --> 00:26:16,789
that state out into a service so that

00:26:15,080 --> 00:26:18,740
you cut your application remain

00:26:16,789 --> 00:26:21,350
stateless and then you can scale

00:26:18,740 --> 00:26:23,799
services separately than the application

00:26:21,350 --> 00:26:23,799
code

00:26:36,480 --> 00:26:42,299
now so the question is is there any way

00:26:39,450 --> 00:26:44,460
to scale the services so I think that is

00:26:42,299 --> 00:26:46,289
a really service specific thing so

00:26:44,460 --> 00:26:49,259
different services will handle it

00:26:46,289 --> 00:26:51,749
different differently so what what is a

00:26:49,259 --> 00:26:54,929
binding right like so in data stores

00:26:51,749 --> 00:26:56,519
like Redis a binding is like they cannot

00:26:54,929 --> 00:26:58,950
create a separate binding for each app

00:26:56,519 --> 00:27:01,499
that joins Redis it will give you the

00:26:58,950 --> 00:27:03,419
same credentials back and for example a

00:27:01,499 --> 00:27:05,639
datastore like MySQL it might create a

00:27:03,419 --> 00:27:08,279
new user for every time you bind to a

00:27:05,639 --> 00:27:10,230
different app right so it is that that

00:27:08,279 --> 00:27:11,970
problem is really service specific and

00:27:10,230 --> 00:27:14,909
different services do it in a different

00:27:11,970 --> 00:27:16,980
way then encapsulation that probability

00:27:14,909 --> 00:27:19,590
powers you is just create a service and

00:27:16,980 --> 00:27:21,330
attach to it then so the operators of

00:27:19,590 --> 00:27:23,220
that service can scale it independently

00:27:21,330 --> 00:27:26,450
of your applications in clock foundry

00:27:23,220 --> 00:27:26,450
does that make sense

00:27:44,950 --> 00:27:49,120
okay I see what you mean so the binding

00:27:47,530 --> 00:27:50,680
is between the application and the

00:27:49,120 --> 00:27:52,060
service so if you have multiple

00:27:50,680 --> 00:27:54,670
instances of the application there's

00:27:52,060 --> 00:27:57,040
still the same thing if that makes sense

00:27:54,670 --> 00:27:58,900
for them to be able to look at different

00:27:57,040 --> 00:28:00,070
instances correct me if I'm wrong I

00:27:58,900 --> 00:28:03,160
believe they have to be deployed as

00:28:00,070 --> 00:28:05,650
different apps what you can do you can

00:28:03,160 --> 00:28:07,900
simply we did CF push pair if we did

00:28:05,650 --> 00:28:10,750
from the same code directory CF push

00:28:07,900 --> 00:28:21,000
br-2 they would be the completely

00:28:10,750 --> 00:28:21,000
different entities at that point yes

00:28:36,200 --> 00:28:38,980
yeah

00:28:43,429 --> 00:28:49,580
yeah so that that workflow really

00:28:46,580 --> 00:28:51,469
remains outside of cloud foundry and so

00:28:49,580 --> 00:28:53,659
what you could do in for example if you

00:28:51,469 --> 00:28:55,729
would like more shards on a MongoDB

00:28:53,659 --> 00:28:57,859
cluster you could update the service

00:28:55,729 --> 00:29:00,019
with the shard ID for example how many

00:28:57,859 --> 00:29:03,019
shots you would like but it's up to the

00:29:00,019 --> 00:29:05,149
service author to actually like take in

00:29:03,019 --> 00:29:05,809
your variables and respond to your

00:29:05,149 --> 00:29:07,639
request

00:29:05,809 --> 00:29:10,279
so Cloud Foundry does not have any

00:29:07,639 --> 00:29:12,710
inherent way of scaling services that

00:29:10,279 --> 00:29:14,989
Israel like so what it does is publishes

00:29:12,710 --> 00:29:18,080
a service broker API through which

00:29:14,989 --> 00:29:21,519
people can implement it and host their

00:29:18,080 --> 00:29:21,519
services for foundering

00:29:27,290 --> 00:29:33,200
so so the the marketplace that you see

00:29:31,160 --> 00:29:35,390
is just a way to attach to a Service

00:29:33,200 --> 00:29:38,510
Cloud Foundry itself does not have any

00:29:35,390 --> 00:29:40,880
services and inside of it the CF ton CF

00:29:38,510 --> 00:29:43,940
dev the PCF application that we showed

00:29:40,880 --> 00:29:46,310
you comes pre-installed with like those

00:29:43,940 --> 00:29:49,010
three services but that is specific to

00:29:46,310 --> 00:29:51,290
PCF def not Cloud Foundry in general

00:29:49,010 --> 00:29:54,500
lower boundary is a platform for pushing

00:29:51,290 --> 00:29:57,110
applications and services it allows you

00:29:54,500 --> 00:29:59,470
to take service data and attach it to an

00:29:57,110 --> 00:29:59,470
application

00:30:07,530 --> 00:30:11,680

YouTube URL: https://www.youtube.com/watch?v=Kg1cobMqH1s


