Title: Not Only for Giants: The Minimal Reasonable Size of a Cloud Foundry Implementation
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Not Only for Giants: The Minimal Reasonable Size of a Cloud Foundry Implementation - Juan Pablo Genovese, Altoros

Allstate, EMC, HP, IBM, GE... All of them are giants in their respective industries. Sometimes, it looks like Cloud Foundry is destined to only work for the big guys. The size of a typical deployment alone can be quite intimidating. However, there are very compelling reasons and very specific ways for a small/medium sized business to adopt Cloud Foundry as a cloud platform to manage their software products and implementations. In this presentation, Juan Pablo Genovese will demonstrate the smallest and cheapest possible way to deploy Cloud Foundry, achieving an affordable solution for in-house Cloud Foundry management. He will go over different IaaS options, a sample BOSH manifest, and how to make the most of Cloud Foundry for a small/medium sized company. This will help companies that think Cloud Foundry is "too complicated" to look at this awesome product in a different way.

About Juan Pablo Genovese
All and Everything Cloud Foundry. Tango. Beers. Blues. :)
Captions: 
	00:00:00,030 --> 00:00:07,020
all right so good afternoon to everybody

00:00:01,650 --> 00:00:09,510
thank you for being here this talk is

00:00:07,020 --> 00:00:11,730
not a technical talk you're not going to

00:00:09,510 --> 00:00:15,240
learn lots of technical stuff about

00:00:11,730 --> 00:00:18,720
Cloud Foundry so if you're expecting

00:00:15,240 --> 00:00:20,510
difficult things you're going to learn

00:00:18,720 --> 00:00:23,820
that this is not actually that difficult

00:00:20,510 --> 00:00:26,910
probably is the main topic of the of the

00:00:23,820 --> 00:00:29,160
talk so do you know the Califano

00:00:26,910 --> 00:00:33,210
foundation of course this beautiful

00:00:29,160 --> 00:00:36,390
entity that actually allows us to use go

00:00:33,210 --> 00:00:39,989
hungry for free to work around the

00:00:36,390 --> 00:00:44,010
services to create products to actually

00:00:39,989 --> 00:00:47,610
leave and somehow struggle with

00:00:44,010 --> 00:00:51,360
compounder a little bit so from if you

00:00:47,610 --> 00:00:54,780
take a quick approach on this and you

00:00:51,360 --> 00:00:56,820
identify the companies that actually are

00:00:54,780 --> 00:01:01,079
part of the croixfamily foundation you

00:00:56,820 --> 00:01:04,140
will see that 26% of those companies

00:01:01,079 --> 00:01:07,170
appears in the global fortune 500

00:01:04,140 --> 00:01:10,170
ranking so it means that 26 percent of

00:01:07,170 --> 00:01:12,900
the companies that belongs to the that

00:01:10,170 --> 00:01:15,990
forms the California foundation they

00:01:12,900 --> 00:01:18,869
have quite a huge amount of money huge

00:01:15,990 --> 00:01:22,049
amount of incomes and you are probably

00:01:18,869 --> 00:01:26,759
then defining them as big really big

00:01:22,049 --> 00:01:30,180
companies actually they are so the

00:01:26,759 --> 00:01:32,759
problem is that if you take a look at a

00:01:30,180 --> 00:01:35,040
number of companies around the world

00:01:32,759 --> 00:01:37,409
this is an estimated number of course

00:01:35,040 --> 00:01:40,790
there is almost no way to know exactly

00:01:37,409 --> 00:01:44,670
how many companies are around the world

00:01:40,790 --> 00:01:49,680
you will see that that fortune 500 is

00:01:44,670 --> 00:01:52,759
only the 0.0002 percent of the companies

00:01:49,680 --> 00:01:56,070
that are in in the world so the rest

00:01:52,759 --> 00:01:57,840
probably the rest of us belongs to the

00:01:56,070 --> 00:02:02,670
nine point ninety nine point ninety nine

00:01:57,840 --> 00:02:05,759
eight percent okay so before going

00:02:02,670 --> 00:02:08,069
forward Who am I

00:02:05,759 --> 00:02:08,819
my name is Juan Pablo I am from

00:02:08,069 --> 00:02:12,310
Argentina

00:02:08,819 --> 00:02:15,250
I live in Werner cyrus in the community

00:02:12,310 --> 00:02:18,940
they know me mostly as for my initials

00:02:15,250 --> 00:02:22,420
JP as easier than Juan Pablo so if

00:02:18,940 --> 00:02:25,750
anyone calls me JP that's just perfect I

00:02:22,420 --> 00:02:30,520
have been working in IT 419 for 19 years

00:02:25,750 --> 00:02:36,400
since I was 17 I have worked with s/390

00:02:30,520 --> 00:02:40,290
yes COBOL yes I like dancing tango I

00:02:36,400 --> 00:02:42,940
teach tango I play guitar as saying I

00:02:40,290 --> 00:02:47,350
love working with Cloud Foundry

00:02:42,940 --> 00:02:50,350
enabling companies to this new cloud war

00:02:47,350 --> 00:02:51,730
this new cloud negative word please stay

00:02:50,350 --> 00:02:53,590
in touch if you want to follow me on

00:02:51,730 --> 00:02:56,410
Twitter I don't tweet and much but when

00:02:53,590 --> 00:03:00,250
I tweet this not important but maybe

00:02:56,410 --> 00:03:03,100
interesting or you can add me in

00:03:00,250 --> 00:03:07,300
LinkedIn I stay there a little bit much

00:03:03,100 --> 00:03:08,530
that in in in Twitter moving forward so

00:03:07,300 --> 00:03:10,000
probably you're going to see this

00:03:08,530 --> 00:03:11,770
picture right you dint off' I the

00:03:10,000 --> 00:03:14,100
monsters this is a clover from

00:03:11,770 --> 00:03:18,100
Cloverfield and here we have Chucky

00:03:14,100 --> 00:03:19,060
right so the scale of monsters if we

00:03:18,100 --> 00:03:21,310
take a look if you put in perspective

00:03:19,060 --> 00:03:24,760
this is the zero point zero zero zero

00:03:21,310 --> 00:03:27,580
two percent right if you identify a

00:03:24,760 --> 00:03:28,959
small medium business if you have a

00:03:27,580 --> 00:03:31,750
small medium business probably you're

00:03:28,959 --> 00:03:33,670
going to be like here between you're

00:03:31,750 --> 00:03:37,300
going to be working really hard to have

00:03:33,670 --> 00:03:40,150
your product down between Chucky and the

00:03:37,300 --> 00:03:42,100
depressed t-rex because he cannot reach

00:03:40,150 --> 00:03:46,780
the beer right you're probably going to

00:03:42,100 --> 00:03:50,140
be around there a small medium business

00:03:46,780 --> 00:03:53,910
has very specific limitations a system

00:03:50,140 --> 00:03:58,030
is defined by these limitations so a

00:03:53,910 --> 00:04:02,170
small medium business you want to have a

00:03:58,030 --> 00:04:04,120
product as fast as possible in the

00:04:02,170 --> 00:04:07,600
streets you want to have the product you

00:04:04,120 --> 00:04:09,549
want to have that application running so

00:04:07,600 --> 00:04:12,190
your potential customers or even your

00:04:09,549 --> 00:04:13,900
customers can start trying it can start

00:04:12,190 --> 00:04:16,390
building things with it can estrade

00:04:13,900 --> 00:04:18,880
start saying ok so this product is

00:04:16,390 --> 00:04:21,250
really good you want to start getting

00:04:18,880 --> 00:04:23,950
revenue as fast as possible as well

00:04:21,250 --> 00:04:25,300
because your money is limited I don't

00:04:23,950 --> 00:04:27,320
know if you're going to have like

00:04:25,300 --> 00:04:29,720
startup

00:04:27,320 --> 00:04:32,720
funding or not probably not if you're a

00:04:29,720 --> 00:04:36,770
self-funded company your budget is going

00:04:32,720 --> 00:04:39,500
to be really limited so you have to have

00:04:36,770 --> 00:04:42,200
a very very fast feature to cycle

00:04:39,500 --> 00:04:45,710
feature to production cycle I mean you

00:04:42,200 --> 00:04:50,030
have to be a very quick to adapt very

00:04:45,710 --> 00:04:53,540
quick to fix very quick you have to

00:04:50,030 --> 00:04:55,780
spend your money very smartly your time

00:04:53,540 --> 00:05:00,880
to and and tell of course time is money

00:04:55,780 --> 00:05:05,180
a small medium business has these

00:05:00,880 --> 00:05:07,010
characteristics right and this the last

00:05:05,180 --> 00:05:09,919
one is probably one of the most

00:05:07,010 --> 00:05:14,540
important of all stay small until you

00:05:09,919 --> 00:05:16,220
can't growing is extremely easy I mean

00:05:14,540 --> 00:05:18,860
everybody can hire people

00:05:16,220 --> 00:05:23,480
everybody can build more infrastructure

00:05:18,860 --> 00:05:26,330
everybody can build by services stay

00:05:23,480 --> 00:05:31,580
small until you can't downsizing is the

00:05:26,330 --> 00:05:34,880
problem so this is the main feature stay

00:05:31,580 --> 00:05:36,919
in budget a small medium business stay

00:05:34,880 --> 00:05:40,810
in budget right

00:05:36,919 --> 00:05:44,540
how can call foundry help with this

00:05:40,810 --> 00:05:47,150
quandary actually puts developer first

00:05:44,540 --> 00:05:50,000
the only thing that the developers has

00:05:47,150 --> 00:05:55,430
to do is focus in developing the product

00:05:50,000 --> 00:05:58,160
that you are building okay you can focus

00:05:55,430 --> 00:06:00,200
on your ideas you can focus on your

00:05:58,160 --> 00:06:01,970
business development you don't have to

00:06:00,200 --> 00:06:05,060
worry about infrastructure you just

00:06:01,970 --> 00:06:11,000
worry about how your product can make an

00:06:05,060 --> 00:06:15,320
impact it has this beautiful way of

00:06:11,000 --> 00:06:17,450
forcing good practices in cloud negative

00:06:15,320 --> 00:06:19,250
environments 12 factor apps if you're

00:06:17,450 --> 00:06:21,050
not familiar with the 12x reps you

00:06:19,250 --> 00:06:24,140
should take a look there's a very

00:06:21,050 --> 00:06:29,210
beautiful website you can take a look at

00:06:24,140 --> 00:06:34,940
it if not base ask me I will habit you

00:06:29,210 --> 00:06:39,540
to to guide you through them Cloud

00:06:34,940 --> 00:06:43,620
Foundry provides a really really easy

00:06:39,540 --> 00:06:47,100
really fast way to provide a product

00:06:43,620 --> 00:06:49,410
feedback cycle you can push applications

00:06:47,100 --> 00:06:53,060
so easily to go under that can be up and

00:06:49,410 --> 00:06:56,610
running in seconds so you're actually

00:06:53,060 --> 00:06:59,790
the stakes holders are going to be up to

00:06:56,610 --> 00:07:03,090
date with your product and even you if

00:06:59,790 --> 00:07:05,250
you are like working yourself only you

00:07:03,090 --> 00:07:10,830
will be able to see your application up

00:07:05,250 --> 00:07:12,570
and running very easily 1200 is ideally

00:07:10,830 --> 00:07:14,700
is coupled with that continuous

00:07:12,570 --> 00:07:16,650
integration software whatever the likes

00:07:14,700 --> 00:07:19,650
you want we in the community will love

00:07:16,650 --> 00:07:21,390
concourse a few probably caps in that if

00:07:19,650 --> 00:07:23,940
you use Jenkins that's just perfect if

00:07:21,390 --> 00:07:27,960
you use any other CI software this is

00:07:23,940 --> 00:07:31,800
all right so if you use a CI system plus

00:07:27,960 --> 00:07:35,460
a good test suit you are done that's a

00:07:31,800 --> 00:07:37,980
really killer combination quad foundry

00:07:35,460 --> 00:07:42,120
is quite secure and stable you can have

00:07:37,980 --> 00:07:44,790
I mean in our company we have had really

00:07:42,120 --> 00:07:46,830
big and small stuff under deployment in

00:07:44,790 --> 00:07:50,280
our customers for a long time without

00:07:46,830 --> 00:07:54,720
any single problem no VM down everything

00:07:50,280 --> 00:07:56,550
working perfectly and this is one of my

00:07:54,720 --> 00:07:58,440
favorite parts the community community

00:07:56,550 --> 00:08:01,350
is amazing

00:07:58,440 --> 00:08:03,330
they have list the mailing list the

00:08:01,350 --> 00:08:07,200
co-founder is like channel all the

00:08:03,330 --> 00:08:09,150
releases security fixes everything is

00:08:07,200 --> 00:08:13,770
provided by the community and the

00:08:09,150 --> 00:08:15,570
community is absolutely fantastic okay

00:08:13,770 --> 00:08:17,520
so let's say that you are a very small

00:08:15,570 --> 00:08:20,670
business and you have a very small

00:08:17,520 --> 00:08:25,740
budget right so like I mean in the range

00:08:20,670 --> 00:08:28,650
of maybe you can spend 100 200 bucks per

00:08:25,740 --> 00:08:31,770
month no problem you can still use for a

00:08:28,650 --> 00:08:35,400
foundry using one of the public

00:08:31,770 --> 00:08:37,680
offerings out there you have pivotal web

00:08:35,400 --> 00:08:41,640
services you have Swisscom IBM bluemix

00:08:37,680 --> 00:08:44,040
Centrelink entity Ankara predicts you

00:08:41,640 --> 00:08:47,790
have your choices you can choose one of

00:08:44,040 --> 00:08:50,700
them and start basically with this

00:08:47,790 --> 00:08:52,110
almost for free you can actually start

00:08:50,700 --> 00:08:52,790
for free using cloud foundry

00:08:52,110 --> 00:08:54,980
you don't

00:08:52,790 --> 00:08:58,010
have to pay anything I don't care if

00:08:54,980 --> 00:08:59,420
you're using open source or one of these

00:08:58,010 --> 00:09:02,270
public offerings you're using call

00:08:59,420 --> 00:09:04,580
foundry that makes the community grow

00:09:02,270 --> 00:09:08,840
and make the community even great than

00:09:04,580 --> 00:09:12,440
what it is actually but if you have

00:09:08,840 --> 00:09:16,640
enough budget I still just recommend to

00:09:12,440 --> 00:09:18,380
go with open source right I am a huge

00:09:16,640 --> 00:09:21,050
proponent of open source I love open

00:09:18,380 --> 00:09:25,850
source so if you want to use open source

00:09:21,050 --> 00:09:28,520
it's better the problem is that this

00:09:25,850 --> 00:09:30,380
might be somehow familiar for you so you

00:09:28,520 --> 00:09:33,260
do a bunch of employee it doesn't work

00:09:30,380 --> 00:09:37,100
why then you do a Bosch deploy and it

00:09:33,260 --> 00:09:39,410
works why I think that's that's that's

00:09:37,100 --> 00:09:41,870
that's quite that does happen it happens

00:09:39,410 --> 00:09:44,180
to you a lot right it's like why why why

00:09:41,870 --> 00:09:46,970
all right so in this case companies like

00:09:44,180 --> 00:09:47,240
us like Alturas that's when we come to

00:09:46,970 --> 00:09:48,380
help

00:09:47,240 --> 00:09:50,540
[Music]

00:09:48,380 --> 00:09:53,030
we are notorious we have been part of

00:09:50,540 --> 00:09:55,010
the CF foundation from the very

00:09:53,030 --> 00:09:57,680
beginning we have lots of experience

00:09:55,010 --> 00:10:01,940
with foundry we are vendor agnostic we

00:09:57,680 --> 00:10:04,190
don't sell any kind of distribution

00:10:01,940 --> 00:10:06,920
whatever we just provide services around

00:10:04,190 --> 00:10:09,470
Cloud Foundry this is some or some of

00:10:06,920 --> 00:10:12,260
our customers new customers are actually

00:10:09,470 --> 00:10:14,950
coming to us every day we provide

00:10:12,260 --> 00:10:17,830
services from integration to trainings

00:10:14,950 --> 00:10:20,620
from creating service brokers bill packs

00:10:17,830 --> 00:10:24,800
whatever you need a trunkload foundry

00:10:20,620 --> 00:10:27,500
and yes we are sponsors called the

00:10:24,800 --> 00:10:33,700
sponsors so we are very very proud of it

00:10:27,500 --> 00:10:37,910
okay enough with the commercial pitch so

00:10:33,700 --> 00:10:43,160
what are we aiming at with this

00:10:37,910 --> 00:10:46,460
presentation what I going to try to do

00:10:43,160 --> 00:10:48,200
is to have a Coventry deployment that is

00:10:46,460 --> 00:10:51,860
good for development that is good for

00:10:48,200 --> 00:10:53,870
testing and demoing applications that is

00:10:51,860 --> 00:10:57,950
suitable for very light production use

00:10:53,870 --> 00:10:59,870
ok internal applications and fiercest a

00:10:57,950 --> 00:11:02,180
ships of the product release like alphas

00:10:59,870 --> 00:11:06,430
and betas this is not going to be like

00:11:02,180 --> 00:11:09,840
real heavy heavy production usage

00:11:06,430 --> 00:11:12,850
but it can work for the first stage of

00:11:09,840 --> 00:11:17,080
releasing applications or even using

00:11:12,850 --> 00:11:19,080
internal applications it has to be very

00:11:17,080 --> 00:11:21,190
easy to manage various advantages

00:11:19,080 --> 00:11:24,790
basically upgrading and disaster

00:11:21,190 --> 00:11:26,800
recovery and uses the best possible

00:11:24,790 --> 00:11:28,450
resources in your infrastructure as a

00:11:26,800 --> 00:11:31,270
service

00:11:28,450 --> 00:11:33,820
of course cost less possible amount of

00:11:31,270 --> 00:11:37,780
money we are cheap we don't have that

00:11:33,820 --> 00:11:42,640
much money so we have to shrink down the

00:11:37,780 --> 00:11:44,770
deployment has some h.a in this case

00:11:42,640 --> 00:11:46,960
self-healing it will have self-healing

00:11:44,770 --> 00:11:50,290
we will have that functionality working

00:11:46,960 --> 00:11:52,360
but this is what we are not going to

00:11:50,290 --> 00:11:56,110
have and this is actually why it's not

00:11:52,360 --> 00:11:58,870
suitable for large production usage we

00:11:56,110 --> 00:12:01,420
are not going to have redundancy this

00:11:58,870 --> 00:12:03,520
eight part of H a that is very important

00:12:01,420 --> 00:12:06,370
we are not going to have it and we are

00:12:03,520 --> 00:12:08,500
not going to have true load balancing ok

00:12:06,370 --> 00:12:13,510
so these are the limits of the system

00:12:08,500 --> 00:12:17,470
this is what we're aiming at having this

00:12:13,510 --> 00:12:23,020
in mind we have some options right if

00:12:17,470 --> 00:12:25,780
you don't have your internal data center

00:12:23,020 --> 00:12:28,870
that you may use VMware or OpenStack you

00:12:25,780 --> 00:12:31,000
have these three options out of the box

00:12:28,870 --> 00:12:33,130
with boss you can deploy a co-founder

00:12:31,000 --> 00:12:34,720
with boss in one of these three options

00:12:33,130 --> 00:12:36,460
you have I mean some web services you

00:12:34,720 --> 00:12:39,100
have Microsoft Azure and you have Google

00:12:36,460 --> 00:12:41,770
cloud platform for the sake of

00:12:39,100 --> 00:12:45,690
simplicity and that probably every one

00:12:41,770 --> 00:12:50,800
of us here played with AWS at some point

00:12:45,690 --> 00:12:54,820
I choose Amazon Web Services for this

00:12:50,800 --> 00:12:59,140
like theory or however you want to call

00:12:54,820 --> 00:13:03,490
it and because it's actually is very

00:12:59,140 --> 00:13:05,170
widely used to deploy our foundry

00:13:03,490 --> 00:13:08,470
actually you have many different weights

00:13:05,170 --> 00:13:11,860
but the preferred way in the community

00:13:08,470 --> 00:13:14,650
is using Bosh actually you have the new

00:13:11,860 --> 00:13:16,870
releases are prepared for Bosh you can

00:13:14,650 --> 00:13:19,640
upgrade call foundry very easily using

00:13:16,870 --> 00:13:24,140
Bosh so you have two flavors you have

00:13:19,640 --> 00:13:26,750
gosh that's wise in bald bald type face

00:13:24,140 --> 00:13:28,279
and you have micro Bosch the two

00:13:26,750 --> 00:13:31,250
differences between one of them is that

00:13:28,279 --> 00:13:33,529
Bosch is a highly distributed it uses

00:13:31,250 --> 00:13:36,440
many different virtual machines a micro

00:13:33,529 --> 00:13:39,529
Bosch is only one virtual machine right

00:13:36,440 --> 00:13:42,350
so and since we are trying to shrink

00:13:39,529 --> 00:13:46,459
everything we are going to use micro

00:13:42,350 --> 00:13:48,589
Bosch so you have a killer combo that

00:13:46,459 --> 00:13:51,170
actually Dumbledore is very happy with

00:13:48,589 --> 00:13:55,209
that you use Amazon Web Services micro

00:13:51,170 --> 00:14:00,350
Bosch and open source cloud foundry the

00:13:55,209 --> 00:14:04,610
problem is that when you deploy across

00:14:00,350 --> 00:14:08,300
foundry in Amazon the size of it can be

00:14:04,610 --> 00:14:10,760
quite shocking because you have micro

00:14:08,300 --> 00:14:17,300
Bosch only one instance called foundry

00:14:10,760 --> 00:14:24,560
takes 18 VMs 18 VMs one per each process

00:14:17,300 --> 00:14:27,470
right and that you have to some you know

00:14:24,560 --> 00:14:32,750
some assorted AWS services like elastic

00:14:27,470 --> 00:14:33,350
IP ease and and and whatnot this so this

00:14:32,750 --> 00:14:39,589
sums

00:14:33,350 --> 00:14:44,029
about one 1300 USD per month yeah power

00:14:39,589 --> 00:14:47,779
ranges are not really happy with this so

00:14:44,029 --> 00:14:50,839
that can be a quite high number okay so

00:14:47,779 --> 00:14:54,620
this is per hour usage okay you can save

00:14:50,839 --> 00:14:56,779
money if you hire if you pay upfront but

00:14:54,620 --> 00:14:58,100
let's say that we don't want to pay

00:14:56,779 --> 00:15:00,440
upfront because we don't know if our

00:14:58,100 --> 00:15:05,350
business is going sucks to be successful

00:15:00,440 --> 00:15:08,540
so we want to go you know month by month

00:15:05,350 --> 00:15:11,510
the deployment the deployment is going

00:15:08,540 --> 00:15:15,890
to have lots of different processes each

00:15:11,510 --> 00:15:18,560
one of these little boxes is one VM

00:15:15,890 --> 00:15:21,920
right so you have console at your proxy

00:15:18,560 --> 00:15:24,290
nadsat city starts NFS blobs or you have

00:15:21,920 --> 00:15:29,180
all the different components of a coffin

00:15:24,290 --> 00:15:32,149
redeployment one per VM that's highly

00:15:29,180 --> 00:15:34,210
costly so we have to start trimming this

00:15:32,149 --> 00:15:39,110
how do we do it

00:15:34,210 --> 00:15:41,210
we start by using the right resources in

00:15:39,110 --> 00:15:44,300
our infrastructure as a service so the

00:15:41,210 --> 00:15:47,470
blobstore we can easily replace it with

00:15:44,300 --> 00:15:51,350
with us 3 and s 3 it doesn't have a

00:15:47,470 --> 00:15:54,710
fixed cost is paid by usage so if you

00:15:51,350 --> 00:15:57,320
use a very low amount of as 3 you're

00:15:54,710 --> 00:16:00,620
going to have a very low bill in it a

00:15:57,320 --> 00:16:04,100
cheap proxy can be replaced with elastic

00:16:00,620 --> 00:16:05,390
load balancer very easily that's not a

00:16:04,100 --> 00:16:08,900
huge problem

00:16:05,390 --> 00:16:12,589
Postgres can be replaced with RDS right

00:16:08,900 --> 00:16:14,750
and then you have three processes that

00:16:12,589 --> 00:16:16,760
are not essential for call foundry

00:16:14,750 --> 00:16:23,420
that's the clock lobe all the stats and

00:16:16,760 --> 00:16:27,230
FS those three can go just like that

00:16:23,420 --> 00:16:30,230
it's not much a problem then you have

00:16:27,230 --> 00:16:33,470
this is the new layout of your

00:16:30,230 --> 00:16:35,270
deployment how is it going to look ok so

00:16:33,470 --> 00:16:38,270
we have this processes is we still have

00:16:35,270 --> 00:16:42,170
like a lots of VMs that are going to be

00:16:38,270 --> 00:16:47,210
up and running all the time like 11 so

00:16:42,170 --> 00:16:51,310
how we will keep thinking how how can we

00:16:47,210 --> 00:16:56,380
shrink this even more even more right

00:16:51,310 --> 00:16:59,839
this is where Bosch comes to our rescue

00:16:56,380 --> 00:17:03,350
Bosch has this fantastic feature does

00:16:59,839 --> 00:17:06,829
call job colocation so you can actually

00:17:03,350 --> 00:17:09,620
put two or three different jobs in one

00:17:06,829 --> 00:17:14,980
VM right if you configure it correctly

00:17:09,620 --> 00:17:18,890
it's not a small task but you can do it

00:17:14,980 --> 00:17:23,300
so we can put two or three different

00:17:18,890 --> 00:17:25,579
shops in each one of the VMs the

00:17:23,300 --> 00:17:28,970
important thing is identifying the

00:17:25,579 --> 00:17:32,360
roommates right who can live with

00:17:28,970 --> 00:17:35,840
another process and that's the kind of

00:17:32,360 --> 00:17:38,240
the EDA the key to the question so the

00:17:35,840 --> 00:17:40,610
important process here is the runner the

00:17:38,240 --> 00:17:43,250
runner the runner is where your

00:17:40,610 --> 00:17:45,860
applications are going to be living is

00:17:43,250 --> 00:17:47,270
where the containers are created are

00:17:45,860 --> 00:17:49,220
destroyed when you

00:17:47,270 --> 00:17:51,350
push your application where you restate

00:17:49,220 --> 00:17:53,030
your application that's going to happen

00:17:51,350 --> 00:17:54,110
in the runner so the runner has to be

00:17:53,030 --> 00:17:57,670
left alone

00:17:54,110 --> 00:17:59,210
he likes to leave alone no nobody

00:17:57,670 --> 00:18:02,179
bothering him

00:17:59,210 --> 00:18:06,620
runner is it's kind of anti-social right

00:18:02,179 --> 00:18:08,480
so then you have other processes there

00:18:06,620 --> 00:18:12,250
actually likes living together because

00:18:08,480 --> 00:18:15,470
for example nuts is network intensive

00:18:12,250 --> 00:18:18,110
but the API and the API worker not so

00:18:15,470 --> 00:18:20,780
much it's not that this they are not

00:18:18,110 --> 00:18:23,420
Negro intensive and you have the router

00:18:20,780 --> 00:18:28,010
that is network intensive and it's also

00:18:23,420 --> 00:18:32,590
process intensive so these can actually

00:18:28,010 --> 00:18:35,809
live together they will compensate then

00:18:32,590 --> 00:18:38,390
you have for example the UAA and the

00:18:35,809 --> 00:18:41,120
whole in the health manager as you

00:18:38,390 --> 00:18:44,000
notice this is a regular laundry without

00:18:41,120 --> 00:18:48,650
Diego right I wanted to simplify this is

00:18:44,000 --> 00:18:52,370
this is without Diego running you have

00:18:48,650 --> 00:18:57,080
the UA and the health manager this can

00:18:52,370 --> 00:19:00,950
be another BM right the UA in a

00:18:57,080 --> 00:19:02,960
development environment were many where

00:19:00,950 --> 00:19:05,210
you have a small team of developers it's

00:19:02,960 --> 00:19:07,790
not right going to be very intensive and

00:19:05,210 --> 00:19:12,590
the health manager also is not going to

00:19:07,790 --> 00:19:14,510
have lots of of jobs running because

00:19:12,590 --> 00:19:18,050
there are not going to be so many

00:19:14,510 --> 00:19:22,370
containers and then you have what I like

00:19:18,050 --> 00:19:24,200
to call log VM that has logger Gator

00:19:22,370 --> 00:19:28,150
Doppler and the traffic controller all

00:19:24,200 --> 00:19:32,570
together this is very network intensive

00:19:28,150 --> 00:19:35,030
vm e we can size it we will size it

00:19:32,570 --> 00:19:37,850
later but all of three of these three

00:19:35,030 --> 00:19:42,020
can live together in one VM and of

00:19:37,850 --> 00:19:44,450
course you get console and HCD and the

00:19:42,020 --> 00:19:48,380
thing with console and EDD is that HCD

00:19:44,450 --> 00:19:50,390
is very disk intensive it's very this

00:19:48,380 --> 00:19:53,630
intensive it is writing to the disk

00:19:50,390 --> 00:19:57,140
constantly in fact for one of our

00:19:53,630 --> 00:19:59,990
customers we had to make a CD right to a

00:19:57,140 --> 00:20:00,890
ram disk because it was killing actually

00:19:59,990 --> 00:20:04,590
the death

00:20:00,890 --> 00:20:08,400
that's something that can happen so have

00:20:04,590 --> 00:20:10,110
it in mind counsel is not that this

00:20:08,400 --> 00:20:13,050
intensive counsel is for several

00:20:10,110 --> 00:20:14,970
discovery and and keeping some secrets

00:20:13,050 --> 00:20:18,510
that's okay that's good

00:20:14,970 --> 00:20:19,290
it's not really intensive so they can

00:20:18,510 --> 00:20:25,160
coexist

00:20:19,290 --> 00:20:28,980
so right now we have reduced those 18

00:20:25,160 --> 00:20:35,010
VMs to four of five actually with the

00:20:28,980 --> 00:20:36,600
runner being on one VM this is actually

00:20:35,010 --> 00:20:39,480
very nice okay

00:20:36,600 --> 00:20:42,870
so what we're going to do we are going

00:20:39,480 --> 00:20:47,030
to size it and this is the very this is

00:20:42,870 --> 00:20:47,030
one of the key parts of this exercise

00:20:47,630 --> 00:20:56,700
the first vm let's put it in a c4 why c4

00:20:52,980 --> 00:21:00,360
c4 is a double yes category actually see

00:20:56,700 --> 00:21:02,610
is a double yes category for processor

00:21:00,360 --> 00:21:07,710
intensive virtual machines

00:21:02,610 --> 00:21:11,400
this will also see for has enhancing

00:21:07,710 --> 00:21:14,160
enhanced Network capabilities so the VM

00:21:11,400 --> 00:21:15,960
one that has two processes that are

00:21:14,160 --> 00:21:18,000
processor intensive and network

00:21:15,960 --> 00:21:22,050
intensive will have enough room to work

00:21:18,000 --> 00:21:25,790
with the API and the API worker then you

00:21:22,050 --> 00:21:29,010
have the VM 2 that's UAA and ho and the

00:21:25,790 --> 00:21:31,740
health manager you can easily fit it

00:21:29,010 --> 00:21:36,360
into an m3 medium that is not really

00:21:31,740 --> 00:21:39,510
expensive machine actually if you take

00:21:36,360 --> 00:21:43,370
the manifest from default 1200

00:21:39,510 --> 00:21:46,770
appointment and you take a look at the

00:21:43,370 --> 00:21:49,080
Bosch manifest and all the machines like

00:21:46,770 --> 00:21:52,700
basically an 80 person of than our m3

00:21:49,080 --> 00:21:58,380
medium with a couple of largest there

00:21:52,700 --> 00:22:01,830
then you have the logger Gator machine

00:21:58,380 --> 00:22:05,510
that is also a c4 why because there are

00:22:01,830 --> 00:22:08,310
mostly processor intensive and c4 has

00:22:05,510 --> 00:22:11,100
enhanced networking capabilities and

00:22:08,310 --> 00:22:13,800
then you have the VM for that's an m3

00:22:11,100 --> 00:22:14,380
medium you don't have to have lots of

00:22:13,800 --> 00:22:19,180
processing

00:22:14,380 --> 00:22:23,050
were there and for the runner we live it

00:22:19,180 --> 00:22:25,300
alone we have an M for large okay so em

00:22:23,050 --> 00:22:29,140
four large it only has a gigabytes of

00:22:25,300 --> 00:22:33,880
memory that's about sixteen containers

00:22:29,140 --> 00:22:35,740
running without any issue but for a

00:22:33,880 --> 00:22:38,890
small medium business 16 containers is

00:22:35,740 --> 00:22:42,550
okay it's not a small medium business

00:22:38,890 --> 00:22:45,180
maybe you can have like what eight

00:22:42,550 --> 00:22:47,700
instances of your application running

00:22:45,180 --> 00:22:51,670
according to different environments

00:22:47,700 --> 00:22:53,830
that's okay it's not it's not that much

00:22:51,670 --> 00:22:56,500
I mean we're talking to we're talking

00:22:53,830 --> 00:22:57,940
about small and medium businesses we're

00:22:56,500 --> 00:23:02,050
not talking about big companies running

00:22:57,940 --> 00:23:04,180
hundreds of containers okay if you want

00:23:02,050 --> 00:23:06,310
to double that you just use an M for

00:23:04,180 --> 00:23:08,800
extra-large that has 16 gigabytes of

00:23:06,310 --> 00:23:10,690
memory you can have up easily 32

00:23:08,800 --> 00:23:14,800
containers running running without any

00:23:10,690 --> 00:23:18,190
any any problem so the number this is

00:23:14,800 --> 00:23:21,400
the really important part number if we

00:23:18,190 --> 00:23:25,210
took it would take to see for large to

00:23:21,400 --> 00:23:28,990
m3 medium 1 M for large we had 16

00:23:25,210 --> 00:23:32,170
gigabytes of storage in s3 we had about

00:23:28,990 --> 00:23:36,610
50 gigabytes per month of elastic load

00:23:32,170 --> 00:23:38,620
balancer and we had 10 gigabytes of RDS

00:23:36,610 --> 00:23:40,840
and an a 10 gigabytes is a lot for

00:23:38,620 --> 00:23:45,220
laundry really 10 gigabytes is like a

00:23:40,840 --> 00:23:48,310
huge mount these with this approach we

00:23:45,220 --> 00:23:54,010
can get to USD 400 and kaliesha say

00:23:48,310 --> 00:23:57,970
that's okay so the cool thing about this

00:23:54,010 --> 00:24:00,540
is that you can actually shrink it just

00:23:57,970 --> 00:24:07,090
a little bit more how do you do it

00:24:00,540 --> 00:24:11,710
instead of using c4 large you use 1 m3

00:24:07,090 --> 00:24:15,100
medium 3t to minions and 1m 4 large for

00:24:11,710 --> 00:24:19,990
the runner these with a gigabytes of

00:24:15,100 --> 00:24:25,270
storage in s3 25 gigabytes a month on

00:24:19,990 --> 00:24:28,150
ELB and 5 gigabytes on an early on RDS

00:24:25,270 --> 00:24:33,430
you can have it for 300 and chuck

00:24:28,150 --> 00:24:37,270
Risa's okay so that's fantastic so this

00:24:33,430 --> 00:24:41,910
little exercise okay shows us that we

00:24:37,270 --> 00:24:44,500
can have like instead of a huge 18

00:24:41,910 --> 00:24:48,760
instances Cloud Foundry deployment we

00:24:44,500 --> 00:24:52,300
can shrink it to five actually we can

00:24:48,760 --> 00:24:55,240
cut up to 75% of the cost of the

00:24:52,300 --> 00:24:56,710
original cost and domitor is really

00:24:55,240 --> 00:25:01,750
partying hard because he's really happy

00:24:56,710 --> 00:25:06,070
okay so this is actually a very quick

00:25:01,750 --> 00:25:09,010
exercises talk is not long and I really

00:25:06,070 --> 00:25:12,820
want to have your questions who's who

00:25:09,010 --> 00:25:23,830
who has some questions nobody okay

00:25:12,820 --> 00:25:26,020
that's it okay hey actually actually no

00:25:23,830 --> 00:25:29,050
I would love actually it's one of the

00:25:26,020 --> 00:25:32,380
things that I wanted to do afterwards

00:25:29,050 --> 00:25:36,300
what I going to do afterwards is with my

00:25:32,380 --> 00:25:39,280
company we're going to develop a small

00:25:36,300 --> 00:25:43,300
terraform script with Bosh manifest that

00:25:39,280 --> 00:25:46,450
actually will provide this deployment in

00:25:43,300 --> 00:25:51,250
AWS so what we wanted to do we want to

00:25:46,450 --> 00:25:55,480
deploy the same configuration in assure

00:25:51,250 --> 00:25:58,120
the same configuration and in GCP and we

00:25:55,480 --> 00:26:01,330
want to stress test it we want to know

00:25:58,120 --> 00:26:04,710
what are the limitations of it we have

00:26:01,330 --> 00:26:08,470
it we have done this for small

00:26:04,710 --> 00:26:11,380
development groups right but they didn't

00:26:08,470 --> 00:26:14,070
do any kind of stress testing but we

00:26:11,380 --> 00:26:18,460
want to do it we want to know how much

00:26:14,070 --> 00:26:21,610
how much pounding can go foundry resist

00:26:18,460 --> 00:26:24,790
in different infrastructure as a service

00:26:21,610 --> 00:26:27,760
providers on this configuration that's

00:26:24,790 --> 00:26:29,920
what we want to do actually I tried to

00:26:27,760 --> 00:26:31,999
make it before the conference because I

00:26:29,920 --> 00:26:35,599
wanted to have it ready but

00:26:31,999 --> 00:26:38,839
work constraints I've worked impossible

00:26:35,599 --> 00:26:41,029
for me but it's going to be very

00:26:38,839 --> 00:26:41,779
interesting exercise just following -

00:26:41,029 --> 00:26:44,199
and Twitter

00:26:41,779 --> 00:26:47,299
I know H we posting the results of this

00:26:44,199 --> 00:26:51,379
exercise because I really do believe

00:26:47,299 --> 00:26:53,629
that is Cloud Foundry is much more

00:26:51,379 --> 00:26:56,569
accessible than people things I mean

00:26:53,629 --> 00:26:59,269
some so much so many times it's like Oh

00:26:56,569 --> 00:27:01,729
Andre we are only big companies use that

00:26:59,269 --> 00:27:04,369
ok no it's not only big companies you

00:27:01,729 --> 00:27:05,779
have so many options and maybe choosing

00:27:04,369 --> 00:27:07,209
your right you

00:27:05,779 --> 00:27:10,249
infrastructure-as-a-service

00:27:07,209 --> 00:27:13,039
correctly can help you you know cut cost

00:27:10,249 --> 00:27:15,859
and whatever so I don't have the same

00:27:13,039 --> 00:27:19,009
exercise for GCP but we're going to do

00:27:15,859 --> 00:27:26,509
it actually we're going to do it no

00:27:19,009 --> 00:27:29,929
problem any other questions yes

00:27:26,509 --> 00:27:32,089
absolutely that's the thing and this is

00:27:29,929 --> 00:27:34,999
the principle that I that I pointed out

00:27:32,089 --> 00:27:39,679
before it's very easy to grow it's

00:27:34,999 --> 00:27:41,959
extremely easy to grow you can let's go

00:27:39,679 --> 00:27:47,449
back just a little bit tumblr partying

00:27:41,959 --> 00:27:51,229
yeah yeah yeah yeah with the help of

00:27:47,449 --> 00:27:54,409
Bosh actually you could instead of

00:27:51,229 --> 00:27:57,529
collocating jobs you can say that the

00:27:54,409 --> 00:27:59,389
one job belongs to only one virtual

00:27:57,529 --> 00:28:01,879
machine so let's say that you start

00:27:59,389 --> 00:28:04,940
having lots of traffic into your

00:28:01,879 --> 00:28:06,559
application right so the first component

00:28:04,940 --> 00:28:09,079
that is going to be affected is the

00:28:06,559 --> 00:28:10,909
router the go router is the first

00:28:09,079 --> 00:28:13,879
component is going to be affected so

00:28:10,909 --> 00:28:17,479
very easily you can change your Bosch

00:28:13,879 --> 00:28:20,779
manifest to have the router on its own

00:28:17,479 --> 00:28:24,159
virtual machine you can redeploy and

00:28:20,779 --> 00:28:27,469
you're going to be having your router

00:28:24,159 --> 00:28:30,619
working in a single virtual machine this

00:28:27,469 --> 00:28:33,289
is the one of the key elements of this

00:28:30,619 --> 00:28:37,609
configuration you can scale very easily

00:28:33,289 --> 00:28:41,599
you can scale very easily but what

00:28:37,609 --> 00:28:44,059
happens if you have to shrink shrinking

00:28:41,599 --> 00:28:45,560
is so much complicated everybody who

00:28:44,059 --> 00:28:48,020
works with outer scale

00:28:45,560 --> 00:28:50,290
knows that create a new instance this is

00:28:48,020 --> 00:28:53,360
very easy but how do you shrink it back

00:28:50,290 --> 00:28:55,850
what are what are the constraints how do

00:28:53,360 --> 00:28:59,660
i reroute the traffic how do I work with

00:28:55,850 --> 00:29:02,270
that so this principle stays small until

00:28:59,660 --> 00:29:03,860
you can't it's extremely important it's

00:29:02,270 --> 00:29:06,500
extremely portable for business and for

00:29:03,860 --> 00:29:09,430
application development so yes you can

00:29:06,500 --> 00:29:11,260
scale it very easily very easily

00:29:09,430 --> 00:29:15,110
questions questions questions

00:29:11,260 --> 00:29:18,340
wells nothing else okay nice so I have

00:29:15,110 --> 00:29:30,070
been over very clear or too confusing

00:29:18,340 --> 00:29:33,380
okay oh there sorry I did I actually did

00:29:30,070 --> 00:29:37,280
the thing is that Diego right now is

00:29:33,380 --> 00:29:40,610
it's not lots of people knows this

00:29:37,280 --> 00:29:42,950
configuration right and Diego is kind of

00:29:40,610 --> 00:29:48,890
a newcomer and you still have to install

00:29:42,950 --> 00:29:53,480
it separately and it's bigger you have

00:29:48,890 --> 00:29:55,880
even more jobs and processes running so

00:29:53,480 --> 00:29:59,360
I wanted to keep it as simple as

00:29:55,880 --> 00:30:01,550
possible and many lots of people are is

00:29:59,360 --> 00:30:04,730
familiar with its configuration so that

00:30:01,550 --> 00:30:06,650
was the rationale before before this but

00:30:04,730 --> 00:30:09,260
what we are going to do in the company

00:30:06,650 --> 00:30:11,690
we're actually going to take closed

00:30:09,260 --> 00:30:14,660
boundary even with Diego and we're going

00:30:11,690 --> 00:30:17,270
to apply the same rational process

00:30:14,660 --> 00:30:19,760
behind this approach so we're going to

00:30:17,270 --> 00:30:21,940
do the exercise with Diego - that's

00:30:19,760 --> 00:30:27,320
going to be very interesting actually

00:30:21,940 --> 00:30:30,230
yeah I consider Diego but since cloth

00:30:27,320 --> 00:30:33,350
Andre has been working for so long with

00:30:30,230 --> 00:30:35,720
this configuration for me it was like

00:30:33,350 --> 00:30:37,580
more familiar to work with this

00:30:35,720 --> 00:30:39,350
configuration and that pretty much

00:30:37,580 --> 00:30:39,740
everybody will know what I'm talking

00:30:39,350 --> 00:30:41,540
about

00:30:39,740 --> 00:30:45,410
instead of all talking Diego do brain

00:30:41,540 --> 00:30:49,640
and you know all the components but yes

00:30:45,410 --> 00:30:53,590
I considered that I consider that cool

00:30:49,640 --> 00:30:53,590
anybody else okay sir

00:30:55,770 --> 00:31:02,820
not yet not yet but in our company we're

00:30:59,490 --> 00:31:05,730
working on actually doing this and an

00:31:02,820 --> 00:31:08,520
open source it we're going to open

00:31:05,730 --> 00:31:12,210
source terraform script to create all

00:31:08,520 --> 00:31:15,330
the resources in AWS with a bootstrap

00:31:12,210 --> 00:31:20,179
that will create the quandary deployment

00:31:15,330 --> 00:31:23,010
and the Bosch manifest and the

00:31:20,179 --> 00:31:27,740
deployment manifest with this

00:31:23,010 --> 00:31:31,710
configuration it's not yet but it will

00:31:27,740 --> 00:31:35,610
good question actually I don't really

00:31:31,710 --> 00:31:39,510
know it all depends on our availability

00:31:35,610 --> 00:31:41,720
but I think that before the end of

00:31:39,510 --> 00:31:46,020
October we'll have everything ready

00:31:41,720 --> 00:31:48,450
that's we will have that ready the next

00:31:46,020 --> 00:31:50,910
step for us is going to be like I was

00:31:48,450 --> 00:31:54,390
telling before a stress test it see how

00:31:50,910 --> 00:31:55,799
much it can it take but yes I will make

00:31:54,390 --> 00:31:59,190
it available I wanna make it available

00:31:55,799 --> 00:32:03,210
just follow me on Twitter this is the

00:31:59,190 --> 00:32:06,630
thing you hear it's not easy but it's my

00:32:03,210 --> 00:32:10,190
nickname probably if I go to the start

00:32:06,630 --> 00:32:10,190
of a presentation it's going to be

00:32:19,400 --> 00:32:26,870
well time okay so that's my my McMahon

00:32:23,030 --> 00:32:28,250
on Twitter but yes we'll make it

00:32:26,870 --> 00:32:30,770
available absolutely

00:32:28,250 --> 00:32:33,110
we are very interesting in people to be

00:32:30,770 --> 00:32:35,840
able to deploy cloud foundry in a small

00:32:33,110 --> 00:32:38,240
environment of course I mean if you're

00:32:35,840 --> 00:32:40,160
going to develop on your computer and it

00:32:38,240 --> 00:32:43,670
is very very small environment you have

00:32:40,160 --> 00:32:45,980
PCF PCF def PCF def is absolutely

00:32:43,670 --> 00:32:49,880
fantastic but is only if you're working

00:32:45,980 --> 00:32:52,850
in your you know computer and you cannot

00:32:49,880 --> 00:32:54,860
install many more services so but PCF

00:32:52,850 --> 00:32:58,730
dev is absolutely fantastic I love it I

00:32:54,860 --> 00:33:00,500
have it I use it but this is for most

00:32:58,730 --> 00:33:02,690
mostly for teams that are working

00:33:00,500 --> 00:33:04,880
together on on seven same environment

00:33:02,690 --> 00:33:07,970
any other questions

00:33:04,880 --> 00:33:08,690
I think that we are we're up with the

00:33:07,970 --> 00:33:12,260
time right

00:33:08,690 --> 00:33:13,610
we're working much done wrapping up yeah

00:33:12,260 --> 00:33:15,740
sure okay

00:33:13,610 --> 00:33:16,860
alright so thank you everybody thank you

00:33:15,740 --> 00:33:22,460
so much see you

00:33:16,860 --> 00:33:22,460

YouTube URL: https://www.youtube.com/watch?v=RJx9tLoa2ug


