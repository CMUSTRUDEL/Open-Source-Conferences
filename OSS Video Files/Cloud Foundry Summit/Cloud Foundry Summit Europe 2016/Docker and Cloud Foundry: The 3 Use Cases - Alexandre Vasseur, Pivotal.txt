Title: Docker and Cloud Foundry: The 3 Use Cases - Alexandre Vasseur, Pivotal
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Docker and Cloud Foundry: The 3 Use Cases - Alexandre Vasseur, Pivotal

With Diego, Cloud Foundry is capable of deploying and running apps as Docker images. That is now easy to orchestrate, scale and manage in production those Docker containers up to the point that what you care is not Docker but the app itself. But there is more you can do to and explore combining Cloud Foundry with Docker! 

- leveraging Docker service broker, possibly using Docker Swarm managed by BOSH to provide containers as a service with all the BOSH and service broker great capabilities 
- leveraging Concourse and Docker based pipeline to ensure your run pipeline in isolation, using Concourse as BOSH release with garden-runC.

Those 3 uses cases are fully independent yet all use Cloud Foundry, BOSH and Docker to align to specific requirements. Come learn about those combined architectures, seem them in action thru live demos, and expand the possibilities with Cloud Foundry.

About Alexandre Vasseur
Alexandre Vasseur is in charge of Pivotal â€˜ technical field engagements in France and South of Europe. He and his team are in charge of technical awareness and solution architecture for customers, prospects and partners in that region around Cloud Foundry and Pivotal solutions. Alexandre joined Pivotal at its creation from his past tenure at VMware in the early Cloud Foundry days and spent around 15 years on applications and middleware. He also leads the Cloud Foundry Paris meetup.
Captions: 
	00:00:00,500 --> 00:00:05,730
okay let's let's start on time welcome

00:00:03,540 --> 00:00:08,189
to this session about clad finale and

00:00:05,730 --> 00:00:09,960
containers and docker has been a pretty

00:00:08,189 --> 00:00:11,790
good session before so I think some of

00:00:09,960 --> 00:00:14,759
you guys are warm upon the under topic

00:00:11,790 --> 00:00:17,520
pleased to be here so my name is Alexson

00:00:14,759 --> 00:00:20,189
Besser I work for pivotal a Bayesian

00:00:17,520 --> 00:00:22,529
Paris part of the field architect group

00:00:20,189 --> 00:00:25,650
I've been working in you know

00:00:22,529 --> 00:00:28,289
development Java Enterprise Architecture

00:00:25,650 --> 00:00:30,300
and cloud platform for about 20 years

00:00:28,289 --> 00:00:33,090
been with glad finale for about five six

00:00:30,300 --> 00:00:35,460
years part of the VMware team when it

00:00:33,090 --> 00:00:37,380
started there as an LNG project I've

00:00:35,460 --> 00:00:39,480
launched the cloud funding meet up in

00:00:37,380 --> 00:00:42,180
Paris so if you happen to visit Paris

00:00:39,480 --> 00:00:44,610
you know send an email and we get you

00:00:42,180 --> 00:00:48,180
have a torque or there as well would be

00:00:44,610 --> 00:00:50,100
fun I've been discussing with many you

00:00:48,180 --> 00:00:51,840
know organizations looking at you know

00:00:50,100 --> 00:00:54,809
clad native platforms platforms

00:00:51,840 --> 00:00:56,100
containers you know over the years and

00:00:54,809 --> 00:00:58,109
obviously you know the landscape is

00:00:56,100 --> 00:01:01,170
changing very quickly you've heard all

00:00:58,109 --> 00:01:02,760
about Diego the fact that Jago would be

00:01:01,170 --> 00:01:06,119
part of the you know Cloud Foundry is

00:01:02,760 --> 00:01:08,280
certified for 270 next year

00:01:06,119 --> 00:01:11,369
although we have it you know production

00:01:08,280 --> 00:01:13,619
already in pivotal fully wide you know I

00:01:11,369 --> 00:01:15,390
think it was good time for you know

00:01:13,619 --> 00:01:17,100
stepping back and looking at what you

00:01:15,390 --> 00:01:19,170
can do with that and it's not just the

00:01:17,100 --> 00:01:21,119
only thing you can do around cloud four

00:01:19,170 --> 00:01:22,920
million containers and it's been a

00:01:21,119 --> 00:01:25,350
number of initiatives around containers

00:01:22,920 --> 00:01:28,229
as well as you know for services and not

00:01:25,350 --> 00:01:30,360
just for apps and so for pipelines so I

00:01:28,229 --> 00:01:34,079
wanted to aggregate three use cases and

00:01:30,360 --> 00:01:35,900
discuss some of the architecture the you

00:01:34,079 --> 00:01:38,460
know building blocks and moving parts

00:01:35,900 --> 00:01:40,259
which implies you know challenges if

00:01:38,460 --> 00:01:42,270
your the platform architect or platform

00:01:40,259 --> 00:01:44,850
operation team and pretty good use cases

00:01:42,270 --> 00:01:48,049
if you are more on the user side of it I

00:01:44,850 --> 00:01:50,790
try to articulate that with some demos

00:01:48,049 --> 00:01:52,170
we have very short time so my demos are

00:01:50,790 --> 00:01:55,020
coded I don't want to download stuff

00:01:52,170 --> 00:01:56,310
from the internet or whatever and you

00:01:55,020 --> 00:01:58,200
know awfully it would give you a fear of

00:01:56,310 --> 00:02:00,930
you know what what what the stuff can

00:01:58,200 --> 00:02:02,790
can look like so let's start with one

00:02:00,930 --> 00:02:05,189
thing in and you've heard yesterday

00:02:02,790 --> 00:02:06,479
about you know he's my app are running

00:02:05,189 --> 00:02:08,789
it in the cloud for me I don't care how

00:02:06,479 --> 00:02:11,550
so you know the first use case is here's

00:02:08,789 --> 00:02:13,680
my app as a container ready for me and

00:02:11,550 --> 00:02:15,870
you know most importantly you know

00:02:13,680 --> 00:02:18,900
but running for me so scale it heal it

00:02:15,870 --> 00:02:20,489
for me and and I don't care how so you

00:02:18,900 --> 00:02:23,129
know if you think about it you know

00:02:20,489 --> 00:02:25,950
that's enabled by obviously Diego and

00:02:23,129 --> 00:02:28,530
you know the work done in garden and the

00:02:25,950 --> 00:02:31,230
work done in garden run see previously

00:02:28,530 --> 00:02:34,439
Garden Linux with this you know goal of

00:02:31,230 --> 00:02:37,139
having a kind of standard for container

00:02:34,439 --> 00:02:39,780
libraries in same run see part of the

00:02:37,139 --> 00:02:42,209
open container initiative that docker is

00:02:39,780 --> 00:02:44,489
using so you know fundamentally when you

00:02:42,209 --> 00:02:47,370
go into that use case the container

00:02:44,489 --> 00:02:48,090
becomes the unit of currency even if you

00:02:47,370 --> 00:02:50,879
know the container

00:02:48,090 --> 00:02:53,010
you know contains the app the user is

00:02:50,879 --> 00:02:54,900
exposed to the container it has to build

00:02:53,010 --> 00:02:56,790
the container up front rather than the

00:02:54,900 --> 00:03:00,599
platform building the container on the

00:02:56,790 --> 00:03:02,340
fly and UCF push our container so what

00:03:00,599 --> 00:03:04,290
does it mean it means that you actually

00:03:02,340 --> 00:03:07,769
see if push a reference to a container

00:03:04,290 --> 00:03:10,349
that exists into a system that in the

00:03:07,769 --> 00:03:13,500
system is called a registry and the

00:03:10,349 --> 00:03:16,379
registry is kind of the namespace can be

00:03:13,500 --> 00:03:19,229
secured to be completely online or can

00:03:16,379 --> 00:03:21,599
be private and the registry is having a

00:03:19,229 --> 00:03:25,379
repository obviously to store stuff so

00:03:21,599 --> 00:03:27,419
it's a number of moving parts as a user

00:03:25,379 --> 00:03:29,400
you have an app you probably need to

00:03:27,419 --> 00:03:31,799
care and you know care about you know

00:03:29,400 --> 00:03:33,959
the app as well as its each one times

00:03:31,799 --> 00:03:35,790
you know if it's a Java app you need a

00:03:33,959 --> 00:03:38,549
JVM or maybe Guinea Tomcat or maybe you

00:03:35,790 --> 00:03:40,560
need whatever the app needs as well as

00:03:38,549 --> 00:03:42,780
you know all dependencies so you would

00:03:40,560 --> 00:03:46,290
build up a docker file in the docker

00:03:42,780 --> 00:03:49,470
world to describe that you would use

00:03:46,290 --> 00:03:51,989
your docker tools on your machines maybe

00:03:49,470 --> 00:03:53,609
on a pipeline actually to build the

00:03:51,989 --> 00:03:55,919
image and upload the image to the

00:03:53,609 --> 00:03:57,840
registry and then you would use cloud

00:03:55,919 --> 00:03:59,609
firmly and Anna creates the dependency

00:03:57,840 --> 00:04:01,739
between Cloud Foundry as a runtime

00:03:59,609 --> 00:04:04,049
platform and docker as a registry

00:04:01,739 --> 00:04:06,989
because Diego would pull the image from

00:04:04,049 --> 00:04:08,819
the registry so the registry becomes a

00:04:06,989 --> 00:04:11,069
fairly you know sensitive component for

00:04:08,819 --> 00:04:12,959
you runtime platform so there are many

00:04:11,069 --> 00:04:14,959
many things that you need to think that

00:04:12,959 --> 00:04:18,209
when you start doing that and obviously

00:04:14,959 --> 00:04:20,039
you know as use cases so she appears I

00:04:18,209 --> 00:04:22,620
think you need to be cautious about what

00:04:20,039 --> 00:04:23,760
you put into your doctor file and you

00:04:22,620 --> 00:04:25,680
know I think the previous session was

00:04:23,760 --> 00:04:27,480
was pretty much about that so let's go

00:04:25,680 --> 00:04:32,730
through you know quick example

00:04:27,480 --> 00:04:34,140
to look through that as I said I

00:04:32,730 --> 00:04:36,150
recorded the demo because you know

00:04:34,140 --> 00:04:38,310
building and pushing Rico docker file is

00:04:36,150 --> 00:04:40,710
not going to be fun over Wi-Fi

00:04:38,310 --> 00:04:47,220
I did that with fiber-to-the-home was

00:04:40,710 --> 00:04:49,380
good so exactly

00:04:47,220 --> 00:04:52,350
so if it's too small I have like you

00:04:49,380 --> 00:04:54,800
know the zoom thing so it's it's a basic

00:04:52,350 --> 00:04:57,270
app doesn't matter we have a doctor fide

00:04:54,800 --> 00:04:59,880
parent image and the parent images

00:04:57,270 --> 00:05:02,400
having a parent image X etc my app the

00:04:59,880 --> 00:05:04,350
port and the kind of stuff came in for

00:05:02,400 --> 00:05:07,620
the app it's Java but it doesn't matter

00:05:04,350 --> 00:05:10,440
it's actually spring boot then using the

00:05:07,620 --> 00:05:13,200
darker tours I built that stuff locally

00:05:10,440 --> 00:05:15,270
in my machine the little docker demon

00:05:13,200 --> 00:05:17,940
would run luckily if I want to try it

00:05:15,270 --> 00:05:20,820
layer out five systems goes in if you

00:05:17,940 --> 00:05:24,270
look in the in the bottom my local local

00:05:20,820 --> 00:05:26,580
images gets gets updated and then I can

00:05:24,270 --> 00:05:27,780
try it I can try it without clapping or

00:05:26,580 --> 00:05:30,690
it's just talker

00:05:27,780 --> 00:05:32,610
maybe map you know my local machine both

00:05:30,690 --> 00:05:33,810
to the container port need to remember

00:05:32,610 --> 00:05:37,800
what I put in the good doc five by the

00:05:33,810 --> 00:05:39,690
way and looks to be working you know

00:05:37,800 --> 00:05:41,880
shut it down I doesn't I don't care

00:05:39,690 --> 00:05:46,890
because I want to run it in the cloud so

00:05:41,880 --> 00:05:48,480
doctor push to my registry not providing

00:05:46,890 --> 00:05:51,870
a server name so I'm going to the public

00:05:48,480 --> 00:05:54,600
docker IO registry and I'm logged into

00:05:51,870 --> 00:05:57,300
it before you haven't seen that big

00:05:54,600 --> 00:06:00,300
uploads especially if you remove the

00:05:57,300 --> 00:06:02,610
image all the time in parallel I'm going

00:06:00,300 --> 00:06:05,040
to connect as a user to my class early

00:06:02,610 --> 00:06:07,590
check that I'm running J go check that

00:06:05,040 --> 00:06:09,980
my admin has enabled Jago docker so that

00:06:07,590 --> 00:06:13,140
I can actually push docker image as is

00:06:09,980 --> 00:06:16,020
that's fine it's enabled in this

00:06:13,140 --> 00:06:18,540
meantime my image has been uploaded to

00:06:16,020 --> 00:06:21,630
the docker dot IO it's been just updated

00:06:18,540 --> 00:06:25,500
few seconds ago so it's good to go and

00:06:21,630 --> 00:06:28,710
then I can start to do a CF push - OH

00:06:25,500 --> 00:06:30,960
- oh like the docker image or OCI image

00:06:28,710 --> 00:06:34,650
happens to be a pretty good name - OH

00:06:30,960 --> 00:06:39,840
rather than - knee or whatever point to

00:06:34,650 --> 00:06:40,380
the registry and then give it a name CFS

00:06:39,840 --> 00:06:44,240
likes

00:06:40,380 --> 00:06:48,570
and then we have the staging process

00:06:44,240 --> 00:06:52,410
that is happening in the back so we will

00:06:48,570 --> 00:06:54,060
watch at the to thing in Perez this is

00:06:52,410 --> 00:06:57,630
running on a pivotal clef only on my

00:06:54,060 --> 00:07:00,570
home lab private DNS so if you see a

00:06:57,630 --> 00:07:04,680
password I don't mind it's mom it's on

00:07:00,570 --> 00:07:07,140
my private VPN so it takes a little

00:07:04,680 --> 00:07:08,580
while you know as much as I understand

00:07:07,140 --> 00:07:10,530
that you know maybe buildpack is

00:07:08,580 --> 00:07:12,690
actually slow blah blah blah actually I

00:07:10,530 --> 00:07:14,340
don't think docker is that fast to start

00:07:12,690 --> 00:07:16,800
anywhere because there's a number of

00:07:14,340 --> 00:07:19,410
things that is happening in in the

00:07:16,800 --> 00:07:21,420
overall process as a whole from J go to

00:07:19,410 --> 00:07:23,520
you know the image running to the house

00:07:21,420 --> 00:07:26,010
check check you know kicking in and meet

00:07:23,520 --> 00:07:28,470
Hertz manager and the voter having the

00:07:26,010 --> 00:07:31,140
hood you know accessing the app and exit

00:07:28,470 --> 00:07:33,750
rock cetera and of course there's demand

00:07:31,140 --> 00:07:36,120
on the storage and you know I haven't

00:07:33,750 --> 00:07:37,800
heard a lot but I think the storage back

00:07:36,120 --> 00:07:39,270
in of a platform is really really

00:07:37,800 --> 00:07:42,570
critical to the overall traveling

00:07:39,270 --> 00:07:44,400
performance and staging Anshu there you

00:07:42,570 --> 00:07:47,370
don't care it's a container or not it's

00:07:44,400 --> 00:07:51,260
just an app so you can scale it see if

00:07:47,370 --> 00:07:53,730
scale just as you would do you could

00:07:51,260 --> 00:07:56,330
look at you know the logs they are

00:07:53,730 --> 00:07:59,040
aggregated across different different

00:07:56,330 --> 00:08:00,240
cells you can see cell to zero and said

00:07:59,040 --> 00:08:03,090
one because I have two containers

00:08:00,240 --> 00:08:04,820
they've been distributed so fine survive

00:08:03,090 --> 00:08:11,400
you know high availability and placement

00:08:04,820 --> 00:08:13,290
in the end I can access the app look at

00:08:11,400 --> 00:08:15,630
you know the app running into my

00:08:13,290 --> 00:08:19,440
container kind of network in the cells I

00:08:15,630 --> 00:08:21,600
can kill the container when I click that

00:08:19,440 --> 00:08:23,550
button I see an index one it's actually

00:08:21,600 --> 00:08:26,670
got killed right because it says hey

00:08:23,550 --> 00:08:29,670
it's me but then sort of get killed and

00:08:26,670 --> 00:08:32,010
then I can see that this is only one

00:08:29,670 --> 00:08:34,320
left but actually you know hoto illing

00:08:32,010 --> 00:08:36,810
starts to kick in so there's another one

00:08:34,320 --> 00:08:39,900
starting which is good and it's the

00:08:36,810 --> 00:08:43,979
container one that was just killed if my

00:08:39,900 --> 00:08:46,500
admin has enabled also ssession

00:08:43,979 --> 00:08:49,050
access to the container and a really

00:08:46,500 --> 00:08:51,300
mean the garden diego container doesn't

00:08:49,050 --> 00:08:52,830
matter if it is OCI or built fact-based

00:08:51,300 --> 00:08:55,290
container i can s

00:08:52,830 --> 00:08:57,960
search in using my you know you could on

00:08:55,290 --> 00:09:00,480
shows etc if my you know I'd mean an

00:08:57,960 --> 00:09:02,550
organ mean in space I mean have provided

00:09:00,480 --> 00:09:05,880
man probably provided access to me and

00:09:02,550 --> 00:09:07,830
here we are we are in the container and

00:09:05,880 --> 00:09:09,870
we have a disability so it's to truly

00:09:07,830 --> 00:09:11,640
you know generic platform and I can

00:09:09,870 --> 00:09:15,540
check you know who's who's got in into

00:09:11,640 --> 00:09:18,210
ssh has the container crash whatever you

00:09:15,540 --> 00:09:19,980
know all the clad for goodness kicks in

00:09:18,210 --> 00:09:24,360
so you know it gives you like a quick

00:09:19,980 --> 00:09:25,920
overview very very quick very fast but i

00:09:24,360 --> 00:09:28,350
think you know all this is what we

00:09:25,920 --> 00:09:30,930
already know so let's switch to another

00:09:28,350 --> 00:09:34,710
use case as you know in cloud finally we

00:09:30,930 --> 00:09:37,080
have apps but we have a so services so

00:09:34,710 --> 00:09:40,530
second use case is really about service

00:09:37,080 --> 00:09:43,050
as a container so unlike the first use

00:09:40,530 --> 00:09:45,900
case services a container is not so much

00:09:43,050 --> 00:09:47,700
part of the core of the cloud family you

00:09:45,900 --> 00:09:49,890
know stable components it's been

00:09:47,700 --> 00:09:52,170
actually kind of more L&D resource

00:09:49,890 --> 00:09:54,510
projects etc but let's talk about let's

00:09:52,170 --> 00:09:56,850
talk about the use case before talking

00:09:54,510 --> 00:10:00,170
about the implementation so the use case

00:09:56,850 --> 00:10:04,490
is you know get me an instance of x

00:10:00,170 --> 00:10:07,830
database caching whatever no sequel

00:10:04,490 --> 00:10:09,690
binding to my app and do that over and

00:10:07,830 --> 00:10:12,480
over and over again

00:10:09,690 --> 00:10:15,810
maybe with actually a different size of

00:10:12,480 --> 00:10:18,480
the service X and I don't care how and

00:10:15,810 --> 00:10:21,510
all that is not specific to containers

00:10:18,480 --> 00:10:23,310
it's specific to the service worker the

00:10:21,510 --> 00:10:25,350
service worker is really really you know

00:10:23,310 --> 00:10:28,380
variable in cloud family because it

00:10:25,350 --> 00:10:31,740
gives the user the level of abstraction

00:10:28,380 --> 00:10:34,590
so the way the service is implemented is

00:10:31,740 --> 00:10:37,650
it a dedicated VM is it a pre provision

00:10:34,590 --> 00:10:41,100
VM is it a container on the fly is it a

00:10:37,650 --> 00:10:44,340
container on the fly onto container

00:10:41,100 --> 00:10:47,300
back-end suam or kubernetes or whatever

00:10:44,340 --> 00:10:51,000
is a service implementation detail and

00:10:47,300 --> 00:10:54,000
the way the application is going to talk

00:10:51,000 --> 00:10:55,920
to the backend service is actually

00:10:54,000 --> 00:11:00,180
managed by the service worker that will

00:10:55,920 --> 00:11:03,030
provide credentials from the service to

00:11:00,180 --> 00:11:05,070
the application using the mechanism that

00:11:03,030 --> 00:11:06,660
you know many of you knows which is you

00:11:05,070 --> 00:11:10,699
know the vcap service environment

00:11:06,660 --> 00:11:12,870
properties etc injected into the app so

00:11:10,699 --> 00:11:14,910
it's pretty interesting though to look

00:11:12,870 --> 00:11:17,069
into you know how does it work if you

00:11:14,910 --> 00:11:19,139
really want to go and do that with

00:11:17,069 --> 00:11:21,839
containers and using your feather-light

00:11:19,139 --> 00:11:23,910
you know container back-end like for

00:11:21,839 --> 00:11:25,529
example suam and I know you know some

00:11:23,910 --> 00:11:27,810
people have been actively looking into

00:11:25,529 --> 00:11:31,800
that it was an LNG project studied by

00:11:27,810 --> 00:11:33,810
fairly felon Ordonez in pivotal put on

00:11:31,800 --> 00:11:36,360
github and I know what stuck in Wayne

00:11:33,810 --> 00:11:37,980
and dr. Nick is fairly actively meeting

00:11:36,360 --> 00:11:40,949
that so I don't think you will learn

00:11:37,980 --> 00:11:44,959
anything looking at that so what are the

00:11:40,949 --> 00:11:47,610
moving parts somewhat you know the same

00:11:44,959 --> 00:11:48,329
we need we need an image with the

00:11:47,610 --> 00:11:50,360
service

00:11:48,329 --> 00:11:52,889
someone has to built and prepare that

00:11:50,360 --> 00:11:54,720
having kind of you know cloud funnel in

00:11:52,889 --> 00:11:57,329
mind because the image will have to

00:11:54,720 --> 00:11:59,339
pretty much publish credentials back

00:11:57,329 --> 00:12:03,930
into the cloud foundry service bakker

00:11:59,339 --> 00:12:07,139
components then using you know some kind

00:12:03,930 --> 00:12:09,660
of container back in swell more cabinets

00:12:07,139 --> 00:12:12,269
whatever we need a service broker that

00:12:09,660 --> 00:12:15,569
we interact with that to ask for the

00:12:12,269 --> 00:12:17,430
container provisioning synchronous

00:12:15,569 --> 00:12:19,290
asynchronous exit route service worker

00:12:17,430 --> 00:12:21,480
can do anything

00:12:19,290 --> 00:12:24,060
key point is of course that once you

00:12:21,480 --> 00:12:26,579
until there you actually need to operate

00:12:24,060 --> 00:12:28,279
kind of two platforms the app platform

00:12:26,579 --> 00:12:32,130
with family and the container platform

00:12:28,279 --> 00:12:34,290
with the kind of container back in so

00:12:32,130 --> 00:12:36,209
you then decide hey you know why don't

00:12:34,290 --> 00:12:38,130
we take this container back-end and make

00:12:36,209 --> 00:12:40,380
that Bocelli's so this is also part of

00:12:38,130 --> 00:12:43,380
this get up project with the docker

00:12:40,380 --> 00:12:45,870
bas-reliefs it's actually a docker Squam

00:12:43,380 --> 00:12:48,209
as a bas-reliefs which you know has many

00:12:45,870 --> 00:12:50,730
benefits if you want to look into that

00:12:48,209 --> 00:12:52,259
and and you already know cloud family or

00:12:50,730 --> 00:12:53,910
it can be a little bit of a surprise if

00:12:52,259 --> 00:12:55,290
you're more coming from the docker world

00:12:53,910 --> 00:12:58,259
and don't know anything about washing

00:12:55,290 --> 00:12:59,430
cloud forming but you know as a cloud

00:12:58,259 --> 00:13:02,040
from the user I thought hey you know

00:12:59,430 --> 00:13:04,769
let's give this project a try and and

00:13:02,040 --> 00:13:07,079
look into this architecture so again you

00:13:04,769 --> 00:13:10,699
know let's have a look at what it looks

00:13:07,079 --> 00:13:10,699
like from a user standpoint

00:13:13,180 --> 00:13:18,600
which aim to have the video oops

00:13:23,610 --> 00:13:28,620
so in this scenario I'm going to start

00:13:26,280 --> 00:13:32,220
with buff so I'm really the platform

00:13:28,620 --> 00:13:34,260
admin and Wes Bosch I'm looking at my

00:13:32,220 --> 00:13:37,500
deployments it's actually already there

00:13:34,260 --> 00:13:41,580
so we'll see docker swamp has Bosh

00:13:37,500 --> 00:13:43,920
Calise on my platform that deployment is

00:13:41,580 --> 00:13:46,440
kind of fairly small I have you know

00:13:43,920 --> 00:13:48,660
kind of a control plane VM where is the

00:13:46,440 --> 00:13:49,530
service blocker and the twirl manager it

00:13:48,660 --> 00:13:53,700
should be better

00:13:49,530 --> 00:13:58,260
by the way and then I have two darker

00:13:53,700 --> 00:14:01,850
engine right kind of to manage high

00:13:58,260 --> 00:14:05,130
availability or whatever then I have

00:14:01,850 --> 00:14:07,320
manifest file for that boss please the

00:14:05,130 --> 00:14:08,730
most interesting part is the blocker

00:14:07,320 --> 00:14:10,650
configuration service Barker

00:14:08,730 --> 00:14:14,630
configuration so you can see a memcache

00:14:10,650 --> 00:14:19,380
D pointing to the image in a registry

00:14:14,630 --> 00:14:22,200
right on docker hub and then I have two

00:14:19,380 --> 00:14:24,060
plans one with small memory one was big

00:14:22,200 --> 00:14:25,590
memory etc so that's very specific to

00:14:24,060 --> 00:14:27,330
the serviceworker implementation you

00:14:25,590 --> 00:14:29,880
could configure your broker any way

00:14:27,330 --> 00:14:32,010
you'd like important part is this image

00:14:29,880 --> 00:14:34,200
is you know publishing credentials so

00:14:32,010 --> 00:14:35,730
that image is already in the registry it

00:14:34,200 --> 00:14:37,380
has a docker file you could look at it

00:14:35,730 --> 00:14:39,180
it's pretty ugly because it's docked

00:14:37,380 --> 00:14:43,860
right to install and unzip you know

00:14:39,180 --> 00:14:46,710
memcache D etc then obviously other user

00:14:43,860 --> 00:14:49,410
I still have that app running before and

00:14:46,710 --> 00:14:51,150
as a user can check service workers I

00:14:49,410 --> 00:14:53,580
have these service workers to deal with

00:14:51,150 --> 00:14:57,000
containers at the bottom I just looked

00:14:53,580 --> 00:14:58,980
into the docker swamp cluster to see

00:14:57,000 --> 00:15:01,470
what we are going to create on them dr.

00:14:58,980 --> 00:15:03,800
swamp cluster as an admin so let's just

00:15:01,470 --> 00:15:10,350
clear a cache service here service

00:15:03,800 --> 00:15:13,410
memcache d14 128 mega for the service

00:15:10,350 --> 00:15:18,440
plan call it cash so it should kick in

00:15:13,410 --> 00:15:21,480
into the docker swamp cluster an image

00:15:18,440 --> 00:15:24,990
kind of pull in an container creation

00:15:21,480 --> 00:15:30,780
with memcache D and then I can bind the

00:15:24,990 --> 00:15:32,610
service to my app and here we go we get

00:15:30,780 --> 00:15:34,470
we are given the credentials if I want

00:15:32,610 --> 00:15:36,690
my app to take these credentials and the

00:15:34,470 --> 00:15:37,350
app needs that probably need a refresh

00:15:36,690 --> 00:15:39,930
so maybe

00:15:37,350 --> 00:15:42,060
they stopped maybe restage depends of

00:15:39,930 --> 00:15:45,060
you know how the first image was built

00:15:42,060 --> 00:15:47,820
and then in my tool whether it is UI or

00:15:45,060 --> 00:15:50,970
command-line I can see the service and I

00:15:47,820 --> 00:15:54,210
can see the vcap services credentials

00:15:50,970 --> 00:15:56,160
like you know any service worker and

00:15:54,210 --> 00:15:59,040
service implementation would provide to

00:15:56,160 --> 00:16:02,040
me so if I'm accessing this app

00:15:59,040 --> 00:16:04,980
obviously my app source code can no

00:16:02,040 --> 00:16:07,050
access and discover the services and

00:16:04,980 --> 00:16:09,900
here we go in it doesn't need to know it

00:16:07,050 --> 00:16:13,470
is docker or not it's just asking to be

00:16:09,900 --> 00:16:15,120
daughter in the backend so you know kind

00:16:13,470 --> 00:16:17,250
of like use case because I think you

00:16:15,120 --> 00:16:19,500
know it shows kind of how to simplify

00:16:17,250 --> 00:16:21,590
maybe docker in giant management with

00:16:19,500 --> 00:16:24,210
bash if you really want to go that old

00:16:21,590 --> 00:16:25,980
but it's most importantly shows the

00:16:24,210 --> 00:16:29,160
value of the service blocker as an

00:16:25,980 --> 00:16:31,500
abstracted construct on top of you know

00:16:29,160 --> 00:16:34,050
how the service implementation is made

00:16:31,500 --> 00:16:36,360
in how the service plan is provided to

00:16:34,050 --> 00:16:38,400
the user so you know think about it you

00:16:36,360 --> 00:16:40,080
could switch the backend it should be

00:16:38,400 --> 00:16:42,000
transparent for the user

00:16:40,080 --> 00:16:43,410
definitely not transparent for the

00:16:42,000 --> 00:16:46,190
people doing you know platform

00:16:43,410 --> 00:16:49,350
architecture and platform operations etc

00:16:46,190 --> 00:16:53,400
so what is pretty cool about that use

00:16:49,350 --> 00:16:55,470
case is obviously your Service Catalog

00:16:53,400 --> 00:16:57,000
can be really really bored I think in

00:16:55,470 --> 00:17:00,660
the first prototype they came up with

00:16:57,000 --> 00:17:03,330
about a dozen of services you know kind

00:17:00,660 --> 00:17:04,860
of more development ready than

00:17:03,330 --> 00:17:06,450
production already obviously because

00:17:04,860 --> 00:17:08,520
then a whole lot of use cases that

00:17:06,450 --> 00:17:10,410
happens around how you manage you know

00:17:08,520 --> 00:17:11,880
service upgrade service high

00:17:10,410 --> 00:17:13,380
availability except Ryan

00:17:11,880 --> 00:17:15,170
all the time it's going to be service

00:17:13,380 --> 00:17:17,970
specific you know the way you manage

00:17:15,170 --> 00:17:20,490
database are clustering is not the same

00:17:17,970 --> 00:17:23,400
way as managing you know caching

00:17:20,490 --> 00:17:27,170
clustering or you know no secret

00:17:23,400 --> 00:17:27,170
clustering except for myself you know

00:17:28,400 --> 00:17:33,090
pushing our apps knowing that there will

00:17:30,780 --> 00:17:36,510
be Postgres knowing a movie bloke's -

00:17:33,090 --> 00:17:37,880
and then the team has some runway

00:17:36,510 --> 00:17:48,080
actually built

00:17:37,880 --> 00:17:49,669
exactly exactly exactly yeah exactly so

00:17:48,080 --> 00:17:51,110
you know it happens to kind of drive the

00:17:49,669 --> 00:17:53,660
consumptions because then you have this

00:17:51,110 --> 00:17:55,250
service catalog you do the homework to

00:17:53,660 --> 00:17:57,320
provide these as images and then they

00:17:55,250 --> 00:17:59,809
get started and as you hump up your

00:17:57,320 --> 00:18:01,789
prediction system you decide if it's

00:17:59,809 --> 00:18:04,640
still you know that implementation or

00:18:01,789 --> 00:18:06,350
another and you know at pivotal we

00:18:04,640 --> 00:18:08,299
happen to work with many partners so we

00:18:06,350 --> 00:18:11,450
work with you know you know stocking

00:18:08,299 --> 00:18:14,330
away non their bingo tied specific you

00:18:11,450 --> 00:18:17,659
know this for PCF we happen to work with

00:18:14,330 --> 00:18:20,390
that stacks and MongoDB etc to provide

00:18:17,659 --> 00:18:23,330
production already back in services and

00:18:20,390 --> 00:18:24,770
you know that's not up to us or the

00:18:23,330 --> 00:18:26,360
class only community to decide if

00:18:24,770 --> 00:18:28,010
containers are best for that kind of

00:18:26,360 --> 00:18:31,669
technology I think that's more for than

00:18:28,010 --> 00:18:32,990
data stacks mangal etc are they happy to

00:18:31,669 --> 00:18:46,220
run in containers or not what are the

00:18:32,990 --> 00:18:49,400
short yeah but it's kind of a full-time

00:18:46,220 --> 00:18:53,570
job an engineering effort if you go that

00:18:49,400 --> 00:18:55,490
road yeah so the next use case is pretty

00:18:53,570 --> 00:18:57,860
interesting is not directly related to

00:18:55,490 --> 00:18:59,450
you know clap summary itself but

00:18:57,860 --> 00:19:02,330
actually it is because it's all about

00:18:59,450 --> 00:19:05,090
velocity it's really pipeline tasks as

00:19:02,330 --> 00:19:07,220
containers and you know the use case can

00:19:05,090 --> 00:19:10,370
be summarized at you with this for me

00:19:07,220 --> 00:19:12,380
with a clean environment and clean build

00:19:10,370 --> 00:19:15,230
tools etc so that I can build that over

00:19:12,380 --> 00:19:17,809
and over again and I know what's going

00:19:15,230 --> 00:19:20,179
on and you know go to the next step in

00:19:17,809 --> 00:19:21,770
my pipeline and go to production and I

00:19:20,179 --> 00:19:23,539
want to build that stuff anywhere

00:19:21,770 --> 00:19:25,340
anytime because maybe people are

00:19:23,539 --> 00:19:27,409
committing into the project maybe people

00:19:25,340 --> 00:19:28,940
are you know contributing images there

00:19:27,409 --> 00:19:32,570
are dependencies to my project in my

00:19:28,940 --> 00:19:34,429
pipeline etc so you know as you know

00:19:32,570 --> 00:19:36,650
we're close to the clapping ecosystem we

00:19:34,429 --> 00:19:39,049
have concours concours you know had a

00:19:36,650 --> 00:19:42,500
burst you know into the clinical system

00:19:39,049 --> 00:19:44,390
into the engineering hope you know the

00:19:42,500 --> 00:19:46,190
whole of platform is built with concours

00:19:44,390 --> 00:19:48,950
and conquers happens to be an open

00:19:46,190 --> 00:19:50,720
source project and course dot IO it's a

00:19:48,950 --> 00:19:52,850
you know pipeline as code

00:19:50,720 --> 00:19:54,410
right so you have a fight you describe

00:19:52,850 --> 00:19:56,810
you know what you want to do as a

00:19:54,410 --> 00:19:59,600
pipeline and quite interestingly the

00:19:56,810 --> 00:20:02,570
Concord server you know given the

00:19:59,600 --> 00:20:05,420
pipeline is code happens to be quite a

00:20:02,570 --> 00:20:07,550
familiar if you want to unlike maybe

00:20:05,420 --> 00:20:08,990
other architectures of course you know

00:20:07,550 --> 00:20:11,330
in a non surprise you may want to have

00:20:08,990 --> 00:20:14,210
access control always access except on

00:20:11,330 --> 00:20:15,920
the concourse but fundamentally I can

00:20:14,210 --> 00:20:18,530
spawn up a concourse in your developer

00:20:15,920 --> 00:20:20,800
machine and get going

00:20:18,530 --> 00:20:25,700
rather than having a kind of back-end

00:20:20,800 --> 00:20:27,230
you know built infrastructure etc so in

00:20:25,700 --> 00:20:30,530
I use case it's pretty interesting to

00:20:27,230 --> 00:20:32,600
also observe that enforces pipeline as

00:20:30,530 --> 00:20:34,900
code but is having container first

00:20:32,600 --> 00:20:38,630
architecture so most of the concourse

00:20:34,900 --> 00:20:42,190
tasks sort of elementary unit of work

00:20:38,630 --> 00:20:48,230
that are part of a pipeline are actually

00:20:42,190 --> 00:20:50,990
docker images if you want to and if you

00:20:48,230 --> 00:20:52,520
deploy course he happens to leverage you

00:20:50,990 --> 00:20:55,460
know clad from the components sort of

00:20:52,520 --> 00:20:57,920
you know hit your own dogfood so it

00:20:55,460 --> 00:20:59,540
relies on garden renze as well and you

00:20:57,920 --> 00:21:01,910
can run concourse as a Bosh Phillies

00:20:59,540 --> 00:21:04,610
inside carefully and and operate

00:21:01,910 --> 00:21:07,190
concourse inside cloud forming of course

00:21:04,610 --> 00:21:08,840
if you do that the docker registry kicks

00:21:07,190 --> 00:21:11,060
in again as an important component

00:21:08,840 --> 00:21:12,860
because it becomes you know kind of the

00:21:11,060 --> 00:21:17,180
registry for the build tools if you need

00:21:12,860 --> 00:21:19,850
like maven or Java or the CF CLI because

00:21:17,180 --> 00:21:25,310
the pipeline is going to push some stuff

00:21:19,850 --> 00:21:28,040
in there etc etc so building blocks you

00:21:25,310 --> 00:21:30,740
need images for the build tools you need

00:21:28,040 --> 00:21:33,230
the docker registry it might not be so

00:21:30,740 --> 00:21:34,970
much a production system anymore for the

00:21:33,230 --> 00:21:36,950
docker registry but you know if you

00:21:34,970 --> 00:21:40,160
think about continuous deployment and

00:21:36,950 --> 00:21:41,810
the sensitiveness of the pipeline you

00:21:40,160 --> 00:21:43,670
know you'd better think about it as a

00:21:41,810 --> 00:21:45,920
production already component and the

00:21:43,670 --> 00:21:47,330
Concours itself as well and we've seen

00:21:45,920 --> 00:21:49,310
many enterprises that you know have been

00:21:47,330 --> 00:21:51,770
looking into build tours as a build

00:21:49,310 --> 00:21:53,060
system and they are completely unable to

00:21:51,770 --> 00:21:54,800
connect the build tools to the

00:21:53,060 --> 00:21:56,480
production platform because of the UM

00:21:54,800 --> 00:21:58,910
you know network segmentations

00:21:56,480 --> 00:22:00,710
governance etc so having concourse as a

00:21:58,910 --> 00:22:03,230
partial is in cyclic formally into a

00:22:00,710 --> 00:22:04,170
specific you know service networks and

00:22:03,230 --> 00:22:08,400
vm projects

00:22:04,170 --> 00:22:10,080
so does a lot of these problems so the

00:22:08,400 --> 00:22:12,060
way you interact with concours is with

00:22:10,080 --> 00:22:14,340
the pipeline Yemen file in a command

00:22:12,060 --> 00:22:16,440
line fly and what happens with his fly

00:22:14,340 --> 00:22:19,620
is you can also inspect the container

00:22:16,440 --> 00:22:22,050
that just ran your pipeline even if the

00:22:19,620 --> 00:22:24,780
container as top because concourse will

00:22:22,050 --> 00:22:33,180
keep the container fully white so let's

00:22:24,780 --> 00:22:36,660
have a look into that so I'm going to

00:22:33,180 --> 00:22:38,640
show you a fairly basic pipeline but you

00:22:36,660 --> 00:22:42,960
know for the sake of it we're going to

00:22:38,640 --> 00:22:46,710
use confers as a Bosch deployment

00:22:42,960 --> 00:22:48,690
so using concours garden one see it's

00:22:46,710 --> 00:22:51,420
actually using the whole body stuff so

00:22:48,690 --> 00:22:55,680
that my CF 1 card is having a converse

00:22:51,420 --> 00:22:57,200
in M space and it's running on very

00:22:55,680 --> 00:23:00,540
basic deployments tvN's

00:22:57,200 --> 00:23:04,380
one of it is the worker that will kick

00:23:00,540 --> 00:23:07,440
in the containers then I have pipeline 5

00:23:04,380 --> 00:23:10,620
minus code get people as a source

00:23:07,440 --> 00:23:14,030
so if changing committing stuff in there

00:23:10,620 --> 00:23:16,920
it will kick in in that blanch CF as a

00:23:14,030 --> 00:23:20,820
endpoint as well so I can use that as a

00:23:16,920 --> 00:23:23,160
destination darker as a registry as a

00:23:20,820 --> 00:23:25,110
possible source or destination and then

00:23:23,160 --> 00:23:27,240
my pipeline and that that thing is a

00:23:25,110 --> 00:23:29,160
unit test may be triggers maven or

00:23:27,240 --> 00:23:32,160
whatever you need to do in your project

00:23:29,160 --> 00:23:33,750
and that task is going to be a container

00:23:32,160 --> 00:23:35,250
and that wilt is going to be a container

00:23:33,750 --> 00:23:38,250
and that push is going to be a container

00:23:35,250 --> 00:23:40,050
right for doing all these tasks in the

00:23:38,250 --> 00:23:43,290
pipeline so what the pipeline is doing

00:23:40,050 --> 00:23:46,020
is taking source unit testing wilt it

00:23:43,290 --> 00:23:48,360
push it to the docker registry and then

00:23:46,020 --> 00:23:50,910
it could goes on and CF push the docker

00:23:48,360 --> 00:23:54,000
image and you know find it to the thing

00:23:50,910 --> 00:23:56,700
so the task that's another yeah Mel file

00:23:54,000 --> 00:23:59,700
and that's the task that would do the

00:23:56,700 --> 00:24:02,460
mavin with maven Java compilation

00:23:59,700 --> 00:24:04,860
whatever obviously if you want to do a

00:24:02,460 --> 00:24:06,960
maven build you wouldn't need a Java

00:24:04,860 --> 00:24:11,610
Runtime so you can see the reference to

00:24:06,960 --> 00:24:13,620
the specific docker image he hasn't got

00:24:11,610 --> 00:24:15,240
like my name slash or Java

00:24:13,620 --> 00:24:17,410
it's just Java because that's part of

00:24:15,240 --> 00:24:20,860
the kind of daughter official

00:24:17,410 --> 00:24:22,420
you know what repository images so you

00:24:20,860 --> 00:24:25,180
could build your own you know kind of

00:24:22,420 --> 00:24:28,900
compilation VM so it's essentially you

00:24:25,180 --> 00:24:31,960
know pointing to the registry and then

00:24:28,900 --> 00:24:35,050
kicks in some some tasks inside the

00:24:31,960 --> 00:24:37,780
container so let's have a look at the

00:24:35,050 --> 00:24:42,160
pipeline from you know the

00:24:37,780 --> 00:24:45,700
prime-minister point so using fly I'm

00:24:42,160 --> 00:24:48,730
going to deploy that pipeline I would

00:24:45,700 --> 00:24:51,130
pass in done shows into a different file

00:24:48,730 --> 00:24:55,480
I would target a specific concourse end

00:24:51,130 --> 00:24:56,950
point my server and the controls you

00:24:55,480 --> 00:24:58,440
know wouldn't be in my git server it

00:24:56,950 --> 00:25:02,320
would be in a different file as the

00:24:58,440 --> 00:25:04,720
parameters of my pipelines concourse

00:25:02,320 --> 00:25:07,810
would you know kind of give the pipeline

00:25:04,720 --> 00:25:09,790
a name so let's quit docker would kind

00:25:07,810 --> 00:25:13,090
of update it if if the pipeline is

00:25:09,790 --> 00:25:15,610
already there or not and then you can

00:25:13,090 --> 00:25:18,610
access the pipeline so you can see kind

00:25:15,610 --> 00:25:21,270
of the sources resources app being one

00:25:18,610 --> 00:25:25,840
docker in the sense of docker registry

00:25:21,270 --> 00:25:28,450
being another and each greenboxes is a

00:25:25,840 --> 00:25:31,150
task and they are green because they've

00:25:28,450 --> 00:25:32,830
been successfully running before or they

00:25:31,150 --> 00:25:35,350
might have a color coding they failed

00:25:32,830 --> 00:25:38,260
you can look into the history of each

00:25:35,350 --> 00:25:40,660
tasks activities some of them failed

00:25:38,260 --> 00:25:42,550
some of them work you can look into the

00:25:40,660 --> 00:25:46,690
details and if you look into what this

00:25:42,550 --> 00:25:49,630
tasks been doing this this is the docker

00:25:46,690 --> 00:25:51,730
push task so it's been building the

00:25:49,630 --> 00:25:54,730
docker image and pushing that to the

00:25:51,730 --> 00:25:57,520
docker registry all aqus traded back on

00:25:54,730 --> 00:25:59,710
course I could figure the tasks manually

00:25:57,520 --> 00:26:02,950
as well which I just did there for that

00:25:59,710 --> 00:26:05,740
deal and while doing that while Concours

00:26:02,950 --> 00:26:09,370
is working and executing that task I can

00:26:05,740 --> 00:26:13,960
use fly and I can use the intercept

00:26:09,370 --> 00:26:15,790
command in fly to get an access into the

00:26:13,960 --> 00:26:18,520
container and maybe check you know the

00:26:15,790 --> 00:26:20,920
file systems or the you know log

00:26:18,520 --> 00:26:25,900
messages what when what when Wang into

00:26:20,920 --> 00:26:28,690
my pipeline step so picking picking one

00:26:25,900 --> 00:26:30,640
you know stage of my pipeline getting in

00:26:28,690 --> 00:26:31,510
I'm inside a container and what I can

00:26:30,640 --> 00:26:34,030
see in there

00:26:31,510 --> 00:26:36,610
I can see that docker push right which

00:26:34,030 --> 00:26:39,970
is really the task that is kicking in so

00:26:36,610 --> 00:26:42,370
it's kind of using a container to run a

00:26:39,970 --> 00:26:46,720
pipeline task to beat another container

00:26:42,370 --> 00:26:48,790
and so on and so on so gives you like an

00:26:46,720 --> 00:26:52,080
idea of you know what we mean by having

00:26:48,790 --> 00:26:54,490
these containers everywhere right so

00:26:52,080 --> 00:26:57,790
going back to the to the deck and

00:26:54,490 --> 00:26:59,440
looking into the discussion you know

00:26:57,790 --> 00:27:01,810
we've we've seen I don't know if you

00:26:59,440 --> 00:27:05,230
guys try it by the way huh guess how

00:27:01,810 --> 00:27:09,040
many containers today in just 25 minutes

00:27:05,230 --> 00:27:11,440
you don't know right how many containers

00:27:09,040 --> 00:27:14,260
have we built just in these demos right

00:27:11,440 --> 00:27:16,420
so right I mean about between 10 and 20

00:27:14,260 --> 00:27:17,950
I would need to know better the staging

00:27:16,420 --> 00:27:24,040
process because they might be eaten

00:27:17,950 --> 00:27:26,080
containers somewhere so yeah so that's

00:27:24,040 --> 00:27:28,480
quite interesting but you know if you if

00:27:26,080 --> 00:27:30,550
you step back a bit you know beyond the

00:27:28,480 --> 00:27:33,340
Bears off you know darker or container

00:27:30,550 --> 00:27:35,170
and pretty nice you know engineering you

00:27:33,340 --> 00:27:37,420
know topic that it is with layout five

00:27:35,170 --> 00:27:38,890
systems and all this you know at the end

00:27:37,420 --> 00:27:40,060
of the day it's all about app it's all

00:27:38,890 --> 00:27:41,650
about services and it's all about

00:27:40,060 --> 00:27:44,470
putting that in production with high

00:27:41,650 --> 00:27:46,330
quality and you know velocity and you

00:27:44,470 --> 00:27:49,060
know making sure that you know your

00:27:46,330 --> 00:27:51,970
process and your platform will will you

00:27:49,060 --> 00:27:53,530
know survive innovations so you know if

00:27:51,970 --> 00:27:56,200
you think about service bar if you think

00:27:53,530 --> 00:27:58,510
about CF push and the Diego abstractions

00:27:56,200 --> 00:28:00,490
you know all of this make that platform

00:27:58,510 --> 00:28:02,860
a fairly solid abstraction and you can

00:28:00,490 --> 00:28:05,290
survive the next phase of innovation it

00:28:02,860 --> 00:28:07,450
can can survive the next phase of you

00:28:05,290 --> 00:28:10,090
know innovation from the cloud foundry

00:28:07,450 --> 00:28:14,140
group if they decide to change this and

00:28:10,090 --> 00:28:14,980
that components and I think this is

00:28:14,140 --> 00:28:17,380
really important

00:28:14,980 --> 00:28:18,970
no you know David's in the details so I

00:28:17,380 --> 00:28:21,280
don't know if you looked carefully if

00:28:18,970 --> 00:28:24,100
you guys are doing Java my doctor fight

00:28:21,280 --> 00:28:29,170
was pretty rubbish you know - X and

00:28:24,100 --> 00:28:30,880
makes 500 Mac you know I mean then you

00:28:29,170 --> 00:28:32,620
allocate a container which size you need

00:28:30,880 --> 00:28:34,450
to remember the size the size is half

00:28:32,620 --> 00:28:36,430
cut it into the docker file it's pretty

00:28:34,450 --> 00:28:38,290
bad you know in cloud for me if you're

00:28:36,430 --> 00:28:39,940
using the breed pack this is a whole

00:28:38,290 --> 00:28:41,680
mechanism that would compute the heap

00:28:39,940 --> 00:28:44,809
size for you based on the container size

00:28:41,680 --> 00:28:47,210
that's the massive benefit in

00:28:44,809 --> 00:28:48,590
so as much as containers are fun you

00:28:47,210 --> 00:28:50,419
know don't forget about these little

00:28:48,590 --> 00:28:51,769
details you know the price this is what

00:28:50,419 --> 00:28:54,440
matters to them

00:28:51,769 --> 00:28:55,729
so you know it's not about adoption but

00:28:54,440 --> 00:28:57,289
it's also about abstractions

00:28:55,729 --> 00:28:58,999
architecture don't forget day to

00:28:57,289 --> 00:29:00,649
operations and it goes system in the

00:28:58,999 --> 00:29:03,109
moving parts that you need in addition

00:29:00,649 --> 00:29:04,669
to the crowdfunding platform birds as

00:29:03,109 --> 00:29:06,559
well you know because if you don't do

00:29:04,669 --> 00:29:09,289
anything you will fish like people as

00:29:06,559 --> 00:29:11,479
well so you know I think it's pretty

00:29:09,289 --> 00:29:13,099
good to do something to showcase you

00:29:11,479 --> 00:29:15,200
know the joint use cases between the

00:29:13,099 --> 00:29:18,349
ecosystems and of course this can work

00:29:15,200 --> 00:29:20,359
in the long term only if you emerge you

00:29:18,349 --> 00:29:25,119
know good startups and not just like a

00:29:20,359 --> 00:29:27,649
doc you know Wendy or demonstrations

00:29:25,119 --> 00:29:29,719
containers everywhere you've seen that

00:29:27,649 --> 00:29:32,089
but maybe you don't need to care it

00:29:29,719 --> 00:29:34,789
depends what you do with the platform if

00:29:32,089 --> 00:29:39,559
you focus on ab dev and velocity etc

00:29:34,789 --> 00:29:41,869
it's a mean to an end and obviously my

00:29:39,559 --> 00:29:44,210
word of caution being there for the Y

00:29:41,869 --> 00:29:45,469
having done dev and production

00:29:44,210 --> 00:29:48,320
deployment and class family and

00:29:45,469 --> 00:29:51,320
different scenarios garbage in garbage

00:29:48,320 --> 00:29:54,589
out I think it applies to container you

00:29:51,320 --> 00:29:56,839
know it applies to VM in the past so it

00:29:54,589 --> 00:29:58,820
doesn't matter so you know keep that in

00:29:56,839 --> 00:30:00,799
mind have a look at what's inside the

00:29:58,820 --> 00:30:02,419
container look into the architecture and

00:30:00,799 --> 00:30:04,369
I think this is why we focus so much on

00:30:02,419 --> 00:30:06,409
you know micro services 12 factors clam

00:30:04,369 --> 00:30:09,979
that if you've seen my shares it's not

00:30:06,409 --> 00:30:11,960
you know on purpose you know I think the

00:30:09,979 --> 00:30:13,700
future is about an end-to-end

00:30:11,960 --> 00:30:15,349
you know clad narrative architecture on

00:30:13,700 --> 00:30:17,719
a cloud native platform it's not just

00:30:15,349 --> 00:30:21,080
showing stuff in a platform and expect

00:30:17,719 --> 00:30:24,339
it to run so thank you for your time

00:30:21,080 --> 00:30:24,339
today happy to take any questions

00:30:29,190 --> 00:30:32,339
[Applause]

00:30:40,039 --> 00:30:46,049
hmm that's a good point I think very few

00:30:43,320 --> 00:30:49,559
of them are actually Diego enabled first

00:30:46,049 --> 00:30:53,070
first of all in and I'm not aware of any

00:30:49,559 --> 00:30:56,399
really public one multi-tenant that

00:30:53,070 --> 00:30:58,320
offer the Diego darker flag pee tubs in

00:30:56,399 --> 00:31:00,570
pivotal web services we don't enable

00:30:58,320 --> 00:31:22,010
that yet we don't say it's study for you

00:31:00,570 --> 00:31:27,390
know highly secured multi-tenant now

00:31:22,010 --> 00:31:30,299
picture any garden one see then without

00:31:27,390 --> 00:31:34,200
extra configuration every container is

00:31:30,299 --> 00:31:40,039
privileged these molecules have a set

00:31:34,200 --> 00:31:40,039
called whitelist it's basically as

00:31:45,160 --> 00:31:55,520
right yeah it's going to change yeah

00:31:48,049 --> 00:32:00,650
definitely oh yeah maybe go come and

00:31:55,520 --> 00:32:02,420
chat with the folks there yeah okay so

00:32:00,650 --> 00:32:04,850
question was about you know is there any

00:32:02,420 --> 00:32:07,490
public platform platform today that

00:32:04,850 --> 00:32:10,429
would enable the Jago docker which is

00:32:07,490 --> 00:32:14,059
the first use case and the reality is

00:32:10,429 --> 00:32:17,210
not so much I haven't seen any but you

00:32:14,059 --> 00:32:20,330
know it's expected to change Showtime

00:32:17,210 --> 00:32:21,919
sings to the Jago Oakland sea because

00:32:20,330 --> 00:32:24,740
once a is having all the primitives to

00:32:21,919 --> 00:32:27,470
run privileged in two to one containers

00:32:24,740 --> 00:32:30,020
in unprivileged mode with apparmor and

00:32:27,470 --> 00:32:33,440
you know security linux and all the

00:32:30,020 --> 00:32:35,120
other stuff which you know make that

00:32:33,440 --> 00:32:38,950
good candidate what we've seen is more

00:32:35,120 --> 00:32:42,380
like you know spoon up specific docker

00:32:38,950 --> 00:32:44,179
cluster for a specific tenant and have

00:32:42,380 --> 00:32:47,299
them work into this thing and I think

00:32:44,179 --> 00:32:50,950
also even Amazon is doing that it's

00:32:47,299 --> 00:32:50,950
blown up like a specific cluster for you

00:32:53,169 --> 00:32:56,640
okay

00:32:54,320 --> 00:32:59,749
enjoy the rest of the day

00:32:56,640 --> 00:32:59,749

YouTube URL: https://www.youtube.com/watch?v=POayw43EoQc


