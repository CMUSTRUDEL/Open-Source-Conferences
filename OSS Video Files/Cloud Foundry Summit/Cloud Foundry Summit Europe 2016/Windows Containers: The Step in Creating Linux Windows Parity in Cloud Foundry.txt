Title: Windows Containers: The Step in Creating Linux Windows Parity in Cloud Foundry
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Windows Containers: The Step in Creating Linux/Windows Parity in Cloud Foundry - Stefan Schneider & Vlad Iovanov, HPE Helion

The current sandboxing technologies used in the Windows Diego cells are quite different from their Linux counterparts. Luckily, Microsoft is narrowing the gap. 

The presenters will walk the audience through the new containerization technologies available in the latest server versions of Microsoft Windows and how they can be used in conjunction with Windows Diego Cells. 

They will also be demonstrating Cloud Foundry running on Windows Diego Cell implementation that uses these new technologies in Windows Server release.
Captions: 
	00:00:00,000 --> 00:00:06,660
okay I think we can start yeah hello

00:00:04,529 --> 00:00:10,019
everyone and welcome to the session

00:00:06,660 --> 00:00:11,400
about windows containers this is where

00:00:10,019 --> 00:00:13,559
we'll be talking about some new cool

00:00:11,400 --> 00:00:15,480
features that are coming in Windows

00:00:13,559 --> 00:00:18,000
Server 2016

00:00:15,480 --> 00:00:19,320
I'm glad ivanova I'm the technical lead

00:00:18,000 --> 00:00:23,400
for cloud foundry at Hewlett Packard

00:00:19,320 --> 00:00:27,390
Enterprise hey Anna Schnieder

00:00:23,400 --> 00:00:29,250
I'm a software developer at HP mooched

00:00:27,390 --> 00:00:31,289
Fe and I have been involved with cloud

00:00:29,250 --> 00:00:33,809
foundry for about five years

00:00:31,289 --> 00:00:36,300
we were a part of a startup called the

00:00:33,809 --> 00:00:39,120
hooter software that's now part of Hilda

00:00:36,300 --> 00:00:43,079
Packard Enterprise we developed the

00:00:39,120 --> 00:00:45,510
first DEA for Windows if anyone is not

00:00:43,079 --> 00:00:47,969
aware the de A's were the elastic

00:00:45,510 --> 00:00:51,780
runtime for cloud foundry before Diego

00:00:47,969 --> 00:00:53,820
was a thing so we're now continuing that

00:00:51,780 --> 00:00:57,600
work to bring Windows to the cloud

00:00:53,820 --> 00:00:59,399
foundry ecosystem and we're trying to

00:00:57,600 --> 00:01:03,390
add support for native Windows

00:00:59,399 --> 00:01:06,270
containers for Diego and the team that

00:01:03,390 --> 00:01:09,600
were part of also maintains the Visual

00:01:06,270 --> 00:01:14,130
Studio Tools and the.net SDK that have

00:01:09,600 --> 00:01:20,640
just graduated from incubation from the

00:01:14,130 --> 00:01:22,799
cloud foundry incubator so I'm going to

00:01:20,640 --> 00:01:25,500
the major mechanisms that the current

00:01:22,799 --> 00:01:29,909
garden windows is using to face some

00:01:25,500 --> 00:01:33,540
kind of isolation between processes or

00:01:29,909 --> 00:01:36,150
applications so the current

00:01:33,540 --> 00:01:39,650
implementation for Gardens for Windows

00:01:36,150 --> 00:01:42,479
2012 r2 only it is a best-effort

00:01:39,650 --> 00:01:47,880
implementation with some known isolation

00:01:42,479 --> 00:01:51,509
risk so for every app instance or

00:01:47,880 --> 00:01:55,229
container there is a dedicated user and

00:01:51,509 --> 00:01:57,299
with low privileges process is run under

00:01:55,229 --> 00:02:00,329
the low privileged account to prevent

00:01:57,299 --> 00:02:03,479
system-wide notifications in the windows

00:02:00,329 --> 00:02:07,170
of system thus applications cannot

00:02:03,479 --> 00:02:12,300
install new system components or affect

00:02:07,170 --> 00:02:16,110
system-wide configs now to keep track of

00:02:12,300 --> 00:02:19,800
what is running inside windows prevent

00:02:16,110 --> 00:02:22,980
for bombs and for some type of memory

00:02:19,800 --> 00:02:27,870
restrictions processes are further

00:02:22,980 --> 00:02:31,230
isolated by in those job objects but job

00:02:27,870 --> 00:02:34,379
objects are not bulletproof

00:02:31,230 --> 00:02:37,590
there is at least one method to escape a

00:02:34,379 --> 00:02:41,640
job object using windows console

00:02:37,590 --> 00:02:45,660
processes and also because windows

00:02:41,640 --> 00:02:47,879
memory management is very complicated it

00:02:45,660 --> 00:02:51,720
is hard to enforce all type of memory

00:02:47,879 --> 00:02:57,300
quotas for example it does not count

00:02:51,720 --> 00:02:59,970
knowing that files for network access

00:02:57,300 --> 00:03:03,480
control garden windows will dynamically

00:02:59,970 --> 00:03:04,319
create Windows Firewall rules to block

00:03:03,480 --> 00:03:07,650
outbound

00:03:04,319 --> 00:03:12,480
access based on our foundry security

00:03:07,650 --> 00:03:15,870
group rules but still apps will will use

00:03:12,480 --> 00:03:19,739
the same network adapter and IP address

00:03:15,870 --> 00:03:22,830
of the windows host also another

00:03:19,739 --> 00:03:25,890
limitation of Windows firewalls is that

00:03:22,830 --> 00:03:32,040
the rules do not apply to localhost or

00:03:25,890 --> 00:03:34,590
any internal traffic inside the host so

00:03:32,040 --> 00:03:37,770
hopefully I convinced that the current

00:03:34,590 --> 00:03:39,470
implementation is a best effort and

00:03:37,770 --> 00:03:44,190
if there's something better we should

00:03:39,470 --> 00:03:46,530
consider it yeah so like you just saw

00:03:44,190 --> 00:03:48,090
there is a lot of duct tape involved

00:03:46,530 --> 00:03:52,730
into creating the current deployment

00:03:48,090 --> 00:03:55,290
ation for for Windows on Cloud Foundry

00:03:52,730 --> 00:03:58,650
basically there's no there are no real

00:03:55,290 --> 00:04:02,280
containers so what does Windows Server

00:03:58,650 --> 00:04:04,920
2016 bring actual containers it has

00:04:02,280 --> 00:04:08,430
native support for it

00:04:04,920 --> 00:04:11,310
we have hyper-v containers which are

00:04:08,430 --> 00:04:14,790
isolated kernels those are containers

00:04:11,310 --> 00:04:16,709
that actually lightweight VMS but we

00:04:14,790 --> 00:04:18,570
also have shared kernel containers and

00:04:16,709 --> 00:04:21,299
those are the ones those are the kind

00:04:18,570 --> 00:04:22,800
that we care about and these are the

00:04:21,299 --> 00:04:27,120
ones that are that we're going to be

00:04:22,800 --> 00:04:30,120
focusing on this talk so having actual

00:04:27,120 --> 00:04:33,480
containers means we need something like

00:04:30,120 --> 00:04:37,350
chroot and Microsoft has made available

00:04:33,480 --> 00:04:40,800
to route file systems so far as a full

00:04:37,350 --> 00:04:46,260
Windows 2016 server and also the much

00:04:40,800 --> 00:04:48,620
smaller new nano server so these two

00:04:46,260 --> 00:04:51,300
images will give users more choice and

00:04:48,620 --> 00:04:54,060
of course the new nano server will

00:04:51,300 --> 00:04:58,440
probably help out with application

00:04:54,060 --> 00:05:01,080
density a lot and finally you know you

00:04:58,440 --> 00:05:04,980
you get network isolation like if you

00:05:01,080 --> 00:05:08,130
mentioned network isolation can get very

00:05:04,980 --> 00:05:10,680
tricky but using the new net driver

00:05:08,130 --> 00:05:14,040
capabilities on Windows 2016 each

00:05:10,680 --> 00:05:16,410
container gets its own IP IP address

00:05:14,040 --> 00:05:18,950
from an internal private subnet this is

00:05:16,410 --> 00:05:23,850
very similar to but it's equivalent to

00:05:18,950 --> 00:05:25,560
network namespaces on on Linux so these

00:05:23,850 --> 00:05:29,490
are the are the things that will make

00:05:25,560 --> 00:05:31,740
Windows support for Cloud Foundry truly

00:05:29,490 --> 00:05:36,890
a first-class citizen and we're really

00:05:31,740 --> 00:05:36,890
excited to work on new integration

00:05:39,340 --> 00:05:47,449
so this is their architecture of Windows

00:05:43,330 --> 00:05:50,840
2016 Diego sell before I go on to

00:05:47,449 --> 00:05:57,979
details on to mention that Windows 2016

00:05:50,840 --> 00:06:01,639
is GA as of this week so as a small

00:05:57,979 --> 00:06:05,150
intro to Cloud Foundry architecture the

00:06:01,639 --> 00:06:08,210
Diego scheduler the Diego schedules and

00:06:05,150 --> 00:06:13,250
runs all foundry applications on Diego

00:06:08,210 --> 00:06:15,680
sells so application that are pushed to

00:06:13,250 --> 00:06:19,190
Cloud Foundry will eventually end up

00:06:15,680 --> 00:06:29,300
running on a Linux Diego cell or Windows

00:06:19,190 --> 00:06:33,229
Diego sell the Diego components are

00:06:29,300 --> 00:06:37,340
marked in green here the first one is a

00:06:33,229 --> 00:06:39,560
wrap which is a representative or agent

00:06:37,340 --> 00:06:47,030
for the Windows machine in the Diego

00:06:39,560 --> 00:06:50,449
cluster thus the second one is Neutron

00:06:47,030 --> 00:06:54,050
which is an agent for logger Gator which

00:06:50,449 --> 00:06:57,020
forwards app logs and metrics and the

00:06:54,050 --> 00:06:58,909
third one is consolation which provides

00:06:57,020 --> 00:07:04,360
services covered between yellow

00:06:58,909 --> 00:07:08,599
components then we have garden windows

00:07:04,360 --> 00:07:10,729
which is designed for those 2016 it's

00:07:08,599 --> 00:07:14,210
the local service that provides the rest

00:07:10,729 --> 00:07:18,789
like API consumed by the red to manage

00:07:14,210 --> 00:07:21,740
containers and run processes and at

00:07:18,789 --> 00:07:24,889
below garden windows there is the

00:07:21,740 --> 00:07:29,270
computer service also known as host

00:07:24,889 --> 00:07:33,409
compute service or HDS is a brand-new

00:07:29,270 --> 00:07:36,169
windows API in 2016 that provides the

00:07:33,409 --> 00:07:41,449
capabilities to create native containers

00:07:36,169 --> 00:07:43,580
windows I'm going to give a small

00:07:41,449 --> 00:07:48,499
overview of the communication flow

00:07:43,580 --> 00:07:54,020
between components so when a cloud

00:07:48,499 --> 00:07:57,879
foundry app is started first the rep

00:07:54,020 --> 00:08:03,080
will receive the request to run the app

00:07:57,879 --> 00:08:05,889
then the rep will instruct garden to set

00:08:03,080 --> 00:08:08,360
up the container and start the app and

00:08:05,889 --> 00:08:11,180
after that garden will invoke the

00:08:08,360 --> 00:08:13,550
compute service API to create native

00:08:11,180 --> 00:08:18,560
Windows containers and run processes

00:08:13,550 --> 00:08:20,779
inside and in the meantime rep will

00:08:18,560 --> 00:08:28,159
stream the standard out and standard

00:08:20,779 --> 00:08:30,080
error to meet Ron from containers so the

00:08:28,159 --> 00:08:35,659
only new component in this architecture

00:08:30,080 --> 00:08:40,250
is the garden service this Y is marked

00:08:35,659 --> 00:08:43,370
in orange the wrapped meet Ron console

00:08:40,250 --> 00:08:47,050
are compiled from this same code as

00:08:43,370 --> 00:08:47,050
their New York counterparts

00:08:50,990 --> 00:08:57,440
some details about garden so to create a

00:08:54,769 --> 00:09:00,380
garden service with a new windows

00:08:57,440 --> 00:09:03,500
thousand sixteen native containers we

00:09:00,380 --> 00:09:07,269
had to implement a completely new garden

00:09:03,500 --> 00:09:10,610
back-end in golang for the garden server

00:09:07,269 --> 00:09:13,760
the new garden back-end has to connect

00:09:10,610 --> 00:09:15,949
to the computer service API to create

00:09:13,760 --> 00:09:18,740
the actual containers and run the

00:09:15,949 --> 00:09:23,060
processes now to interact with a

00:09:18,740 --> 00:09:25,940
computer service API we used HCS single

00:09:23,060 --> 00:09:29,240
library from Microsoft which is also

00:09:25,940 --> 00:09:35,810
used in docker bemoan implementation for

00:09:29,240 --> 00:09:39,070
Windows for for implementation we also

00:09:35,810 --> 00:09:43,100
tried to reuse as much code available

00:09:39,070 --> 00:09:46,600
from the Cloud Foundry community or that

00:09:43,100 --> 00:09:49,820
Microsoft has contributed to docker

00:09:46,600 --> 00:09:53,449
on example the Diego health check used

00:09:49,820 --> 00:09:57,769
in our implementation is the same the

00:09:53,449 --> 00:10:00,500
same one as the Linux counterpart which

00:09:57,769 --> 00:10:02,569
means that we're using less workarounds

00:10:00,500 --> 00:10:10,760
when working with Windows which is

00:10:02,569 --> 00:10:16,279
saturating now also we have as a sage

00:10:10,760 --> 00:10:22,040
support for Windows 2016 which means

00:10:16,279 --> 00:10:25,399
that CF SSH to a cloud foundry app for

00:10:22,040 --> 00:10:30,199
Windows works this is very useful when

00:10:25,399 --> 00:10:33,199
debugging running applications we used

00:10:30,199 --> 00:10:36,019
for this cloud foundry Diego as a sage

00:10:33,199 --> 00:10:38,240
server which is returning though with

00:10:36,019 --> 00:10:42,829
some additional changes to use the wind

00:10:38,240 --> 00:10:46,430
PTI as a background in PTI is an open

00:10:42,829 --> 00:10:48,980
source project that brings PTI's to

00:10:46,430 --> 00:10:53,540
Windows and will translate between

00:10:48,980 --> 00:10:58,180
windows console actions to a TTY stream

00:10:53,540 --> 00:11:01,160
usable by an SSH client

00:10:58,180 --> 00:11:04,640
also this would enable features like

00:11:01,160 --> 00:11:13,610
history tab completion control-c and so

00:11:04,640 --> 00:11:16,280
on so bill packs we recognize that bill

00:11:13,610 --> 00:11:19,490
packs are an important part of of Cloud

00:11:16,280 --> 00:11:21,740
Foundry and in the linux world they are

00:11:19,490 --> 00:11:24,410
for a very easy way to add new

00:11:21,740 --> 00:11:27,680
capabilities to the platform and they

00:11:24,410 --> 00:11:32,420
also serve as kind of an it an extension

00:11:27,680 --> 00:11:34,070
point that a customer can use so we we

00:11:32,420 --> 00:11:37,010
want to bring this power of Bill packs

00:11:34,070 --> 00:11:39,950
to two windows as well and given that

00:11:37,010 --> 00:11:43,190
the goal is to have feature parity with

00:11:39,950 --> 00:11:46,760
Linux bill packs are definitely a part

00:11:43,190 --> 00:11:49,610
of our a part of our efforts so the POC

00:11:46,760 --> 00:11:53,030
that you're about to see demoed has full

00:11:49,610 --> 00:11:57,110
support for Bill packs and this means

00:11:53,030 --> 00:11:59,240
that you'll be able to use is the is

00:11:57,110 --> 00:12:01,610
built bag the XE Bill pack that are

00:11:59,240 --> 00:12:04,520
already available and working using the

00:12:01,610 --> 00:12:06,530
windy ADA the DEA for windows

00:12:04,520 --> 00:12:11,090
implementation that I mentioned at the

00:12:06,530 --> 00:12:13,550
beginning of the talk and with

00:12:11,090 --> 00:12:16,310
containers Windows bill packs can become

00:12:13,550 --> 00:12:18,530
much more interesting you could have a

00:12:16,310 --> 00:12:21,010
bill back that actually that they can

00:12:18,530 --> 00:12:25,340
actually run Windows services or

00:12:21,010 --> 00:12:28,670
schedule tasks so the ability to have an

00:12:25,340 --> 00:12:31,250
actual contained system will open up

00:12:28,670 --> 00:12:33,640
bill packs for for Windows in a much

00:12:31,250 --> 00:12:33,640
nicer way

00:12:34,900 --> 00:12:44,610
so now a small demo between those 2016

00:12:40,500 --> 00:12:44,610
what enclose this

00:12:54,450 --> 00:13:05,740
it's better so this is a local

00:13:02,560 --> 00:13:11,200
deployment so everything is on my Mac

00:13:05,740 --> 00:13:14,290
here this is a boss flight and this is

00:13:11,200 --> 00:13:20,800
the second the third VM is actual

00:13:14,290 --> 00:13:23,590
Windows 2016 so if I do target I'm just

00:13:20,800 --> 00:13:32,020
going to show you that I'm targeted to

00:13:23,590 --> 00:13:37,390
boss flight deployments so this is the

00:13:32,020 --> 00:13:42,490
actual GF version two for two right so

00:13:37,390 --> 00:13:45,520
this is running now for the CF target

00:13:42,490 --> 00:13:47,790
and target adhere to the API buff

00:13:45,520 --> 00:13:53,770
live.com

00:13:47,790 --> 00:13:58,410
let's check the CF stacks first so there

00:13:53,770 --> 00:13:58,410
is a new stack now Windows 2016

00:13:58,530 --> 00:14:06,760
let's check the bill packs so we have

00:14:03,280 --> 00:14:09,610
here two new bill packs for Windows one

00:14:06,760 --> 00:14:16,210
is the XE bill pack and the other one is

00:14:09,610 --> 00:14:19,210
is a built back right let me check if

00:14:16,210 --> 00:14:25,000
this is clean all right I don't have any

00:14:19,210 --> 00:14:29,070
app so I'm going to push here an XE

00:14:25,000 --> 00:14:34,510
application which is actually a go app

00:14:29,070 --> 00:14:37,840
we just serves a basic HTTP request with

00:14:34,510 --> 00:14:40,680
hi I am a standalone lab I have here the

00:14:37,840 --> 00:14:45,850
actual executable compiled already and

00:14:40,680 --> 00:14:48,850
there is run dot bat which actually is

00:14:45,850 --> 00:14:53,560
the entry point that the build back will

00:14:48,850 --> 00:14:58,590
use for auto detection so now to push

00:14:53,560 --> 00:15:01,490
this I just CF push xef4 the app name

00:14:58,590 --> 00:15:10,480
stack windows

00:15:01,490 --> 00:15:10,480
sixteen all right so this is uploading

00:15:10,690 --> 00:15:16,300
you can see that all the bill packs were

00:15:13,940 --> 00:15:19,880
downloaded and it was pretty fast

00:15:16,300 --> 00:15:20,510
because the rep will cash this bill

00:15:19,880 --> 00:15:24,680
packs

00:15:20,510 --> 00:15:25,100
I noticed that logs are streaming as

00:15:24,680 --> 00:15:27,350
well

00:15:25,100 --> 00:15:30,470
yeah and there we have a staging

00:15:27,350 --> 00:15:36,050
complete the bill track was also

00:15:30,470 --> 00:15:44,300
detected and we have an URL let's try

00:15:36,050 --> 00:15:50,890
the URL and it's working let's see the

00:15:44,300 --> 00:15:54,800
SSH feature so we just have to see fssh

00:15:50,890 --> 00:15:58,130
an app name like any other Linux

00:15:54,800 --> 00:16:05,029
application so we are inside the

00:15:58,130 --> 00:16:08,149
container this is just an information so

00:16:05,029 --> 00:16:14,180
here you see that it's Windows Server

00:16:08,149 --> 00:16:15,920
2016 technical preview 5:00 right this

00:16:14,180 --> 00:16:21,200
actually works okay like the terminal

00:16:15,920 --> 00:16:31,100
one bounced one yeah clear screen also

00:16:21,200 --> 00:16:38,209
work let's go to power we can also get

00:16:31,100 --> 00:16:41,110
Windows those features if we want to

00:16:38,209 --> 00:16:45,170
inspect what's inside the container and

00:16:41,110 --> 00:16:47,899
also because we have administrative

00:16:45,170 --> 00:16:50,560
access we can also like install new

00:16:47,899 --> 00:16:56,450
features if we want to install windows

00:16:50,560 --> 00:16:59,000
feature and for example I just say

00:16:56,450 --> 00:17:03,579
telnet client just to have something

00:16:59,000 --> 00:17:06,260
very fast so part of progress bars also

00:17:03,579 --> 00:17:08,440
working

00:17:06,260 --> 00:17:11,890
[Music]

00:17:08,440 --> 00:17:20,200
yeah feature install complete and we

00:17:11,890 --> 00:17:24,280
have telnet now let's see our process

00:17:20,200 --> 00:17:26,410
tree here inside the container this is

00:17:24,280 --> 00:17:29,530
how the actual process tree looks inside

00:17:26,410 --> 00:17:31,920
a Windows container there are extra

00:17:29,530 --> 00:17:36,580
services running for each container and

00:17:31,920 --> 00:17:45,630
here we can see our app I'm just going

00:17:36,580 --> 00:17:51,640
to just stop this process process name

00:17:45,630 --> 00:17:53,770
and now we can see after three seconds

00:17:51,640 --> 00:17:59,920
the health check will kick in from Diego

00:17:53,770 --> 00:18:04,030
and this app will get recreated and we

00:17:59,920 --> 00:18:09,460
can still check that the app was up and

00:18:04,030 --> 00:18:12,220
running after Diego restarted so so this

00:18:09,460 --> 00:18:15,940
was the demo for an actual executable

00:18:12,220 --> 00:18:20,350
app I'm also going to show you an

00:18:15,940 --> 00:18:22,750
asp.net app so for this I'm going to

00:18:20,350 --> 00:18:26,070
start another development box where I

00:18:22,750 --> 00:18:26,070
have Visual Studio

00:18:29,670 --> 00:18:40,049
so here I have SP dotnet at is opened in

00:18:36,210 --> 00:18:44,700
Visual Studio it's a sample lab from the

00:18:40,049 --> 00:18:49,520
template it just has some it just has

00:18:44,700 --> 00:18:53,580
some some yet not yet package installed

00:18:49,520 --> 00:18:56,820
so that we can push this app so for this

00:18:53,580 --> 00:19:00,990
we right-click on the app select publish

00:18:56,820 --> 00:19:05,220
to Cloud Foundry select are both light

00:19:00,990 --> 00:19:11,429
target yes we are happy with Diego organ

00:19:05,220 --> 00:19:16,049
space next let's call it web we were

00:19:11,429 --> 00:19:22,559
just going with also detect here select

00:19:16,049 --> 00:19:28,830
Windows 2016 stack I'm going to change

00:19:22,559 --> 00:19:33,330
the URL yes we want both light URL next

00:19:28,830 --> 00:19:37,980
you don't want services we're good to go

00:19:33,330 --> 00:19:46,200
so finish we're going to see the output

00:19:37,980 --> 00:19:51,169
logs here in the output pain these are

00:19:46,200 --> 00:19:51,169
actually coming from the NS build task

00:19:54,160 --> 00:20:03,510
so this our same as CF logs you can see

00:20:10,760 --> 00:20:17,770
and it should be done this is a bit

00:20:15,290 --> 00:20:20,690
verbose but the push operation finished

00:20:17,770 --> 00:20:26,540
and now it was just browse the app to

00:20:20,690 --> 00:20:29,390
see here we have the web app we can see

00:20:26,540 --> 00:20:33,049
here the detective bill Pak was as 8

00:20:29,390 --> 00:20:37,400
which was automatically now it's viewing

00:20:33,049 --> 00:20:45,200
browser the first hit takes a bit longer

00:20:37,400 --> 00:20:47,030
to initialize the dotnet yep there we go

00:20:45,200 --> 00:20:52,880
so this is the actual app push to

00:20:47,030 --> 00:20:58,030
Windows 2016 let me just show you the

00:20:52,880 --> 00:21:02,270
inside of the actual Windows 2016 cell

00:20:58,030 --> 00:21:11,450
how the process tree looks there so I'm

00:21:02,270 --> 00:21:17,120
going to RDP inside right so this is the

00:21:11,450 --> 00:21:19,429
actual cell its strength of 25 this is a

00:21:17,120 --> 00:21:22,000
normal server here we have the meter on

00:21:19,429 --> 00:21:25,600
server service that I described a

00:21:22,000 --> 00:21:30,070
console this is the actual garden

00:21:25,600 --> 00:21:34,370
implementation prep here and at the end

00:21:30,070 --> 00:21:42,559
we have our two containers one is this

00:21:34,370 --> 00:21:45,679
web app and here it's a second one so we

00:21:42,559 --> 00:21:48,650
can see that we have our high speed on

00:21:45,679 --> 00:21:54,440
that here in a host of all web core now

00:21:48,650 --> 00:21:55,970
just try to terminate an app and after a

00:21:54,440 --> 00:21:58,220
while we can see that the whole

00:21:55,970 --> 00:22:04,010
container will get destroyed and were

00:21:58,220 --> 00:22:08,150
created by my Diego the health checks

00:22:04,010 --> 00:22:13,940
root kicking yep dead and now it's just

00:22:08,150 --> 00:22:19,490
recreated and yes we have the new

00:22:13,940 --> 00:22:24,740
process for asp.net and we can check the

00:22:19,490 --> 00:22:30,559
app that that it's working again take

00:22:24,740 --> 00:22:34,580
some time for the first hit yep that's

00:22:30,559 --> 00:22:38,510
it it works again yeah I guess that

00:22:34,580 --> 00:22:41,740
concludes the demo let me switch back to

00:22:38,510 --> 00:22:41,740
the slides

00:22:48,940 --> 00:22:51,570
right

00:22:52,059 --> 00:22:58,539
so what's next we still have many things

00:22:56,259 --> 00:23:01,960
to do we would also like to support the

00:22:58,539 --> 00:23:04,690
darker Application Lifecycle as well we

00:23:01,960 --> 00:23:07,509
think that having both app lifecycles

00:23:04,690 --> 00:23:11,139
build backs and darker available for

00:23:07,509 --> 00:23:13,599
Windows would be would be great then we

00:23:11,139 --> 00:23:15,580
would want security groups to work on

00:23:13,599 --> 00:23:17,889
Windows the same way they work on Linux

00:23:15,580 --> 00:23:21,070
you can imagine that the operator

00:23:17,889 --> 00:23:24,249
experience would be much greater if if

00:23:21,070 --> 00:23:27,309
they if the if the operator could use

00:23:24,249 --> 00:23:30,279
the same tools for Linux as they do for

00:23:27,309 --> 00:23:32,889
Windows to set up these things and then

00:23:30,279 --> 00:23:35,080
of course supporting more than one root

00:23:32,889 --> 00:23:38,080
filesystem we're currently using the

00:23:35,080 --> 00:23:41,559
full Windows 2016 root file system using

00:23:38,080 --> 00:23:43,450
the Nano server one would be great if we

00:23:41,559 --> 00:23:45,070
give you a comparison the Nano server

00:23:43,450 --> 00:23:49,589
image is about four hundred and fifty

00:23:45,070 --> 00:23:53,619
Meg's the full Windows one is five gigs

00:23:49,589 --> 00:23:57,460
so great improvement there and then

00:23:53,619 --> 00:23:58,929
finally resource enforcement the POC and

00:23:57,460 --> 00:24:03,549
the demo that you just saw doesn't do

00:23:58,929 --> 00:24:07,149
resource enforcement on or on memory or

00:24:03,549 --> 00:24:07,539
CPU so we would like to enable those as

00:24:07,149 --> 00:24:10,119
well

00:24:07,539 --> 00:24:12,549
and of course if if you have any

00:24:10,119 --> 00:24:16,599
suggestions we're happy to learn about

00:24:12,549 --> 00:24:22,509
them to make this thing this thing

00:24:16,599 --> 00:24:24,369
better and contributors are welcome

00:24:22,509 --> 00:24:27,070
we're planning to open source all of

00:24:24,369 --> 00:24:29,169
this work like just a few mention it's a

00:24:27,070 --> 00:24:32,019
it's basically a packet implementation

00:24:29,169 --> 00:24:34,989
for garden so please keep an eye out for

00:24:32,019 --> 00:24:38,469
this it's not difficult to stand up

00:24:34,989 --> 00:24:41,049
basically you just use an existing box

00:24:38,469 --> 00:24:43,450
light deployment and then there are

00:24:41,049 --> 00:24:46,330
Packer scripts available that allow you

00:24:43,450 --> 00:24:48,429
to create a Windows image for vagrant

00:24:46,330 --> 00:24:53,399
that you just end up and you have your

00:24:48,429 --> 00:24:53,399
your your development environment

00:24:56,250 --> 00:25:06,180
yeah we're going to open source it so

00:24:59,920 --> 00:25:09,520
please keep refreshing that page yeah so

00:25:06,180 --> 00:25:19,060
that concludes the talk if there are any

00:25:09,520 --> 00:25:21,610
questions yes please go ahead the

00:25:19,060 --> 00:25:26,200
question was how are we relating this to

00:25:21,610 --> 00:25:29,230
the greenhouse project well it's it's

00:25:26,200 --> 00:25:33,850
similar in a way that greenhouse just

00:25:29,230 --> 00:25:37,180
uses a garden back-end as well so we're

00:25:33,850 --> 00:25:39,160
all sharing the same code for the most

00:25:37,180 --> 00:25:41,770
part the rep is the same thing Metron is

00:25:39,160 --> 00:25:44,320
the same all the things are essentially

00:25:41,770 --> 00:25:47,680
the same except for the for the backend

00:25:44,320 --> 00:25:52,950
implementation of garden so if you think

00:25:47,680 --> 00:25:52,950
about it it's like 90 percent same thing

00:26:36,840 --> 00:26:46,080
any any other questions great Oh

00:26:46,750 --> 00:26:57,419
how could I try this out I think there

00:26:54,100 --> 00:27:02,100
are evaluation images windows a server

00:26:57,419 --> 00:27:02,100
so you can you can download that

00:27:12,920 --> 00:27:15,490
yeah

00:27:16,299 --> 00:27:18,869
sure

00:27:27,210 --> 00:27:38,700
can you so if we tried Oh have you ever

00:27:36,270 --> 00:27:43,880
tried Jen no but I think he should work

00:27:38,700 --> 00:27:43,880
fine just config but now

00:27:46,690 --> 00:27:53,190
okay thank you very much

00:27:48,920 --> 00:27:53,190

YouTube URL: https://www.youtube.com/watch?v=HysKULva0GA


