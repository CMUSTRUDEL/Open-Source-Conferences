Title: Keynote: State of the Project - Chip Childers, Vice President of Technology
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Keynote: State of the Project - Chip Childers, Vice President of Technology, Cloud Foundry Foundation

About Chip Childers
A proven DevOps visionary and leader. Before coming to the Foundation, Chip was vice president of Product Strategy at CumuLogic. He spent more than 15 years in engineering leadership positions within the service provider industry including work with SunGard Availability Services and Qwest Solutions. He has served on the board of directors for the Distributed Management Task Force; and is a member of The Apache Software Foundation.
Captions: 
	00:00:00,030 --> 00:00:06,270
so I have the pleasure of trying to

00:00:03,330 --> 00:00:08,790
summarize the work of over a hundred and

00:00:06,270 --> 00:00:12,120
thirty people working full-time on the

00:00:08,790 --> 00:00:13,500
various Cloud Foundry projects the

00:00:12,120 --> 00:00:16,109
thousands of contributors who've

00:00:13,500 --> 00:00:18,480
contributed software over the course of

00:00:16,109 --> 00:00:21,810
the project's lifetime and to try to

00:00:18,480 --> 00:00:23,550
give a pulse on give you a sense of

00:00:21,810 --> 00:00:25,949
what's happening in all these various

00:00:23,550 --> 00:00:27,029
projects and what that actually means so

00:00:25,949 --> 00:00:28,650
this is gonna be a fairly dense

00:00:27,029 --> 00:00:30,960
presentation we're gonna move a little

00:00:28,650 --> 00:00:32,940
fast because I've got a really red clock

00:00:30,960 --> 00:00:35,100
here that's telling me I have 19 minutes

00:00:32,940 --> 00:00:37,860
and 46 seconds to talk about all the

00:00:35,100 --> 00:00:40,800
good work everybody's doing but let's

00:00:37,860 --> 00:00:42,629
start here let's start at this this

00:00:40,800 --> 00:00:45,210
wonderful moment those of you that use

00:00:42,629 --> 00:00:47,520
Cloud Foundry this wonderful moment of

00:00:45,210 --> 00:00:49,969
anticipation this wonderful moment where

00:00:47,520 --> 00:00:53,550
there's a lot of potential behind this

00:00:49,969 --> 00:00:55,440
but it's not simple as much as we love

00:00:53,550 --> 00:00:57,629
on C's haiku and if you don't know an

00:00:55,440 --> 00:00:59,690
see from pivotal he leads their Cloud

00:00:57,629 --> 00:01:02,039
Foundry engineering and product efforts

00:00:59,690 --> 00:01:04,949
the wonderful haiku I use this in all my

00:01:02,039 --> 00:01:07,080
presentations here's my source code run

00:01:04,949 --> 00:01:09,720
it on the cloud for me and I do not care

00:01:07,080 --> 00:01:11,850
how there's a lot of power behind that

00:01:09,720 --> 00:01:14,189
promise but it takes a lot to actually

00:01:11,850 --> 00:01:17,100
make this real because when we when we

00:01:14,189 --> 00:01:18,990
go out and we speak to non Cloud Foundry

00:01:17,100 --> 00:01:20,400
knowledgeable audiences about what is

00:01:18,990 --> 00:01:23,520
Cloud Foundry why does it matter why do

00:01:20,400 --> 00:01:25,890
we have here a sold-out audience here we

00:01:23,520 --> 00:01:28,619
talk a lot about how platforms make

00:01:25,890 --> 00:01:30,630
promises and the good platforms are able

00:01:28,619 --> 00:01:33,600
to keep them and Cloud Foundry is an

00:01:30,630 --> 00:01:34,560
outstanding platform so let's dive deep

00:01:33,600 --> 00:01:36,869
and we're gonna we're gonna kind of

00:01:34,560 --> 00:01:40,590
start start a little bit lower than the

00:01:36,869 --> 00:01:42,000
CLI let's talk about the API so we have

00:01:40,590 --> 00:01:45,540
a v2 API it's been around for a long

00:01:42,000 --> 00:01:47,490
time it's evolving but we've kind of

00:01:45,540 --> 00:01:50,340
slowed down an evolution and it's time

00:01:47,490 --> 00:01:52,020
to rethink that API experience so

00:01:50,340 --> 00:01:54,329
there's a very general goal here which

00:01:52,020 --> 00:01:55,890
is to for those that interact with it

00:01:54,329 --> 00:01:57,960
have better consistency and

00:01:55,890 --> 00:02:00,390
discoverability in the way that it that

00:01:57,960 --> 00:02:02,850
it works we need to be able to actually

00:02:00,390 --> 00:02:05,219
improve the application owner experience

00:02:02,850 --> 00:02:06,560
significantly as well because this API

00:02:05,219 --> 00:02:09,780
can use the same basic functionality

00:02:06,560 --> 00:02:12,800
inside the platform but for example

00:02:09,780 --> 00:02:15,440
instead of that CF push operation

00:02:12,800 --> 00:02:17,330
Curren and taking the current system

00:02:15,440 --> 00:02:19,340
offline and you having to use CLI

00:02:17,330 --> 00:02:21,410
plugins to avoid that little blip and

00:02:19,340 --> 00:02:23,180
outage the platform should just

00:02:21,410 --> 00:02:25,940
naturally be able to go through the

00:02:23,180 --> 00:02:28,670
staging process and deploy and start the

00:02:25,940 --> 00:02:30,740
new system so lots of lots of work

00:02:28,670 --> 00:02:33,410
occurring there they're gonna be doing

00:02:30,740 --> 00:02:36,920
the release incremental e a lot of this

00:02:33,410 --> 00:02:38,330
work has occurred already but it's time

00:02:36,920 --> 00:02:41,120
to accelerate and it's time to start

00:02:38,330 --> 00:02:42,560
getting each individual function out out

00:02:41,120 --> 00:02:44,720
to the users so the first one that's

00:02:42,560 --> 00:02:47,060
gonna be marked for GA is going to be

00:02:44,720 --> 00:02:48,560
the tasks capability a really simple

00:02:47,060 --> 00:02:50,450
concept you have an application

00:02:48,560 --> 00:02:52,520
sometimes it's nice to be able to do

00:02:50,450 --> 00:02:54,320
something within the context of that

00:02:52,520 --> 00:02:57,620
application think database migrations

00:02:54,320 --> 00:02:59,150
they're great use case example now let's

00:02:57,620 --> 00:03:00,950
talk about our secret weapon write build

00:02:59,150 --> 00:03:03,110
packs well not so secret they're really

00:03:00,950 --> 00:03:05,450
the heart of that promise of just take

00:03:03,110 --> 00:03:07,010
the source code and run it and they're

00:03:05,450 --> 00:03:09,650
really really important

00:03:07,010 --> 00:03:11,660
we of course have lots of build packs

00:03:09,650 --> 00:03:12,770
that exist within the foundation we have

00:03:11,660 --> 00:03:16,490
lots of build packs that are being

00:03:12,770 --> 00:03:18,200
created by the community in general but

00:03:16,490 --> 00:03:20,080
one of the problems we've had is that we

00:03:18,200 --> 00:03:22,850
have a lot of forking of build packs

00:03:20,080 --> 00:03:24,970
because that's the way that build packs

00:03:22,850 --> 00:03:28,160
and the build pack process is customized

00:03:24,970 --> 00:03:30,080
so I'm just going to point to the second

00:03:28,160 --> 00:03:32,480
bullet they're multi build packs and say

00:03:30,080 --> 00:03:34,580
that that right there is the forking

00:03:32,480 --> 00:03:37,160
killer it's going to eliminate all the

00:03:34,580 --> 00:03:39,260
risk that companies have if they fork to

00:03:37,160 --> 00:03:42,290
build pack like let's say thee I'll pick

00:03:39,260 --> 00:03:44,390
on the PHP community right fork the the

00:03:42,290 --> 00:03:46,370
the upstream PHP build pack yeah tweak

00:03:44,390 --> 00:03:47,959
it because you want to have some

00:03:46,370 --> 00:03:50,750
additional steps occur during the build

00:03:47,959 --> 00:03:52,209
process that puts you at risk because

00:03:50,750 --> 00:03:54,170
now you're out of sync with the

00:03:52,209 --> 00:03:56,720
wonderful job that the build pack

00:03:54,170 --> 00:03:58,550
project does to make sure that the

00:03:56,720 --> 00:04:00,739
community has access to the latest and

00:03:58,550 --> 00:04:02,630
greatest PHP software especially when it

00:04:00,739 --> 00:04:04,100
relates to vulnerabilities so with this

00:04:02,630 --> 00:04:05,930
multi build pack capability you can

00:04:04,100 --> 00:04:08,420
start thinking about the core platform

00:04:05,930 --> 00:04:11,660
operations as being pipelines very

00:04:08,420 --> 00:04:13,250
simple pipelines but pipelines so we can

00:04:11,660 --> 00:04:14,930
do something like for example do a

00:04:13,250 --> 00:04:17,209
static code analysis for the purpose of

00:04:14,930 --> 00:04:20,600
compliance I can do that as an option

00:04:17,209 --> 00:04:21,830
through a multi build pack or think

00:04:20,600 --> 00:04:24,950
about what happens when that becomes

00:04:21,830 --> 00:04:26,110
mandatory it starts really making the

00:04:24,950 --> 00:04:29,110
whole compliance

00:04:26,110 --> 00:04:32,259
process a lot easier and it improves the

00:04:29,110 --> 00:04:34,030
experience of the developers so let's

00:04:32,259 --> 00:04:35,680
get dig a little bit deeper now let's

00:04:34,030 --> 00:04:37,900
talk about Diego and I'm gonna give you

00:04:35,680 --> 00:04:41,139
a quick preview about what I'm gonna be

00:04:37,900 --> 00:04:42,520
talking about Diego is in fact at the

00:04:41,139 --> 00:04:44,500
point where you should be migrating to

00:04:42,520 --> 00:04:47,500
it so why is that right let's let's talk

00:04:44,500 --> 00:04:49,599
about what Diego was reactor tech chure

00:04:47,500 --> 00:04:53,349
the core elastic runtime and related

00:04:49,599 --> 00:04:56,259
components that's what it was we

00:04:53,349 --> 00:04:57,849
graduated this time last year it's as an

00:04:56,259 --> 00:05:01,000
active project it was shipping

00:04:57,849 --> 00:05:04,180
commercially then we're approaching the

00:05:01,000 --> 00:05:06,580
scale of 250,000 application instances

00:05:04,180 --> 00:05:09,310
that's containers running within a

00:05:06,580 --> 00:05:10,629
single single Diego cluster and talking

00:05:09,310 --> 00:05:12,250
with the engineering teams they say that

00:05:10,629 --> 00:05:14,949
that's just the way you know that's the

00:05:12,250 --> 00:05:17,349
scale that we're gonna test to but if we

00:05:14,949 --> 00:05:19,330
for example take the same environment

00:05:17,349 --> 00:05:24,580
add additional cells to it they think

00:05:19,330 --> 00:05:25,659
they could at least quadruple it use

00:05:24,580 --> 00:05:27,159
commercially and most distributions

00:05:25,659 --> 00:05:28,960
today I want to hammer at this point

00:05:27,159 --> 00:05:31,930
home when you're buying cloud foundry

00:05:28,960 --> 00:05:35,979
from someone I hope you're getting Diego

00:05:31,930 --> 00:05:37,870
and if you aren't asked for it last it's

00:05:35,979 --> 00:05:40,000
gonna be required all of those 11 I

00:05:37,870 --> 00:05:42,879
guess is the happy eleven now Sam all of

00:05:40,000 --> 00:05:46,270
those 11 to get the 2017 certification

00:05:42,879 --> 00:05:46,629
they will offer you d8 Diego so make no

00:05:46,270 --> 00:05:49,569
mistake

00:05:46,629 --> 00:05:52,089
Diego's here the older architecture will

00:05:49,569 --> 00:05:53,979
be end-of-life after a period of about

00:05:52,089 --> 00:05:56,169
six months that means no updates of any

00:05:53,979 --> 00:05:57,430
kind all right so I just wanted to

00:05:56,169 --> 00:05:58,960
hammer that message home for that team

00:05:57,430 --> 00:06:00,039
but why does that matter right so why

00:05:58,960 --> 00:06:01,870
don't we spend all the time to rewrite

00:06:00,039 --> 00:06:03,520
when we actually spent a lot of time to

00:06:01,870 --> 00:06:05,710
rewrite because there's a lot of

00:06:03,520 --> 00:06:07,599
innovation that we can now do with the

00:06:05,710 --> 00:06:09,370
new architecture so let's first start

00:06:07,599 --> 00:06:11,349
with garden garden we're going really

00:06:09,370 --> 00:06:13,409
deep now this is the the wrapper around

00:06:11,349 --> 00:06:16,379
Linux kernel features that support

00:06:13,409 --> 00:06:19,900
containerization functions the garden

00:06:16,379 --> 00:06:23,259
project has just released what they call

00:06:19,900 --> 00:06:26,469
it garden run see now run see is at the

00:06:23,259 --> 00:06:27,969
heart of the docker engine as well so

00:06:26,469 --> 00:06:30,789
cloud foundry is adopting industry

00:06:27,969 --> 00:06:33,879
standards that exist in neutral places

00:06:30,789 --> 00:06:35,889
that are now proven to be robust and I

00:06:33,879 --> 00:06:37,999
think most importantly we're focused on

00:06:35,889 --> 00:06:39,979
securing it for multi tenant and tenant

00:06:37,999 --> 00:06:41,689
if you talk to the garden team this is I

00:06:39,979 --> 00:06:44,569
love this team you talk to them and you

00:06:41,689 --> 00:06:46,189
ask them you know what's the goal they

00:06:44,569 --> 00:06:48,559
made it very simple the garden team

00:06:46,189 --> 00:06:50,989
intends to always be the most out of the

00:06:48,559 --> 00:06:53,299
box secure container run time for

00:06:50,989 --> 00:06:55,969
large-scale multi-tenant workloads

00:06:53,299 --> 00:06:57,649
that's a lot of words but that's their

00:06:55,969 --> 00:06:59,269
promise to you when they're backing it

00:06:57,649 --> 00:07:00,679
up with a lot of work in addition

00:06:59,269 --> 00:07:02,839
there's there's some exciting activity

00:07:00,679 --> 00:07:05,509
going on around how we think about the

00:07:02,839 --> 00:07:09,439
route FS and aligning that with vo C

00:07:05,509 --> 00:07:10,939
eyes container image standard hopefully

00:07:09,439 --> 00:07:13,610
that'll get us some better portability

00:07:10,939 --> 00:07:15,319
in the industry okay so you know we've

00:07:13,610 --> 00:07:17,749
got garden and and that's great we've

00:07:15,319 --> 00:07:19,909
got Diego its orchestrating a lot of

00:07:17,749 --> 00:07:20,899
garden sells so what are we gonna do

00:07:19,909 --> 00:07:22,939
with it well we can do things like

00:07:20,899 --> 00:07:24,889
volume services for years you know we've

00:07:22,939 --> 00:07:26,749
talked about the 12 factor application

00:07:24,889 --> 00:07:30,679
one of the core tenets of 12 factors is

00:07:26,749 --> 00:07:33,229
that the apps are stateless now that's

00:07:30,679 --> 00:07:34,219
still the ideal but sometimes it's good

00:07:33,229 --> 00:07:38,799
to have a little bit of wiggle room

00:07:34,219 --> 00:07:43,849
right so as of today actually as of

00:07:38,799 --> 00:07:46,999
version 242 of CF release volumes

00:07:43,849 --> 00:07:48,709
services are included so you can work

00:07:46,999 --> 00:07:50,779
with any company who wants to create a

00:07:48,709 --> 00:07:53,889
volume service service broker and have

00:07:50,779 --> 00:07:56,389
persistence in your applications

00:07:53,889 --> 00:07:57,619
networking we all love networking right

00:07:56,389 --> 00:08:02,749
everybody raise your hand if you enjoy

00:07:57,619 --> 00:08:05,869
configuring switches yeah yeah okay so

00:08:02,749 --> 00:08:10,549
let's let's talk about networking so

00:08:05,869 --> 00:08:13,669
today with networking we have multiple

00:08:10,549 --> 00:08:16,519
micro services these micro services have

00:08:13,669 --> 00:08:18,709
to talk to each other now they can and

00:08:16,519 --> 00:08:20,479
see if let's them do that but there's an

00:08:18,709 --> 00:08:22,699
awful lot of north-south traffic that's

00:08:20,479 --> 00:08:24,139
occurring right things are going up to

00:08:22,699 --> 00:08:27,319
the go router back down again

00:08:24,139 --> 00:08:28,639
it's suboptimal we also really don't

00:08:27,319 --> 00:08:30,889
have fine-grained access controls and

00:08:28,639 --> 00:08:32,209
policy driven control about how these

00:08:30,889 --> 00:08:34,189
various applications are talking to each

00:08:32,209 --> 00:08:36,620
other there's ways to make it work but

00:08:34,189 --> 00:08:38,659
we can do better so the future is very

00:08:36,620 --> 00:08:41,089
policy driven and so the project team

00:08:38,659 --> 00:08:42,620
that's working on this is starting with

00:08:41,089 --> 00:08:44,930
the premise that the Cloud Foundry

00:08:42,620 --> 00:08:46,939
software the upstream open source should

00:08:44,930 --> 00:08:48,620
always be batteries included because

00:08:46,939 --> 00:08:49,399
what we don't want to do is put it in a

00:08:48,620 --> 00:08:51,720
position where

00:08:49,399 --> 00:08:54,990
you get locked into a particular type of

00:08:51,720 --> 00:08:56,610
infrastructure you can't use a

00:08:54,990 --> 00:08:58,410
particular function because you're not

00:08:56,610 --> 00:08:59,639
able to you know deal with the hardware

00:08:58,410 --> 00:09:02,040
itself because you're on a public cloud

00:08:59,639 --> 00:09:04,769
so batteries included all the containers

00:09:02,040 --> 00:09:08,069
they get a single they're on a single

00:09:04,769 --> 00:09:09,990
system-wide l3 Network and they're

00:09:08,069 --> 00:09:11,370
actually using flannel and IP tables for

00:09:09,990 --> 00:09:13,649
those of you that that like Linux

00:09:11,370 --> 00:09:15,180
networking that's the the batteries

00:09:13,649 --> 00:09:17,250
included approach that Cloud Foundry is

00:09:15,180 --> 00:09:18,230
implemented but it's also bring your own

00:09:17,250 --> 00:09:20,430
this is another place where

00:09:18,230 --> 00:09:22,529
standardization really matters for Cloud

00:09:20,430 --> 00:09:24,360
Foundry and and your adoption of it a

00:09:22,529 --> 00:09:25,410
lot of you use different Software

00:09:24,360 --> 00:09:27,269
Defined Networking stacks

00:09:25,410 --> 00:09:30,810
they'll be supported they can be

00:09:27,269 --> 00:09:33,899
supported today by adding a CNI based

00:09:30,810 --> 00:09:35,399
interface that's another API spec I told

00:09:33,899 --> 00:09:38,399
you this is dense right so everybody

00:09:35,399 --> 00:09:40,410
with me still so next up hardening

00:09:38,399 --> 00:09:42,509
scalability testing there's a lot of

00:09:40,410 --> 00:09:44,339
hardening that goes on it's a great

00:09:42,509 --> 00:09:46,800
project I think it's gonna bring a lot

00:09:44,339 --> 00:09:50,160
of capabilities to your application

00:09:46,800 --> 00:09:52,079
teams let's talk more networking this is

00:09:50,160 --> 00:09:53,430
this is routing a couple of key things

00:09:52,079 --> 00:09:55,019
that that's happening in the routing

00:09:53,430 --> 00:09:57,360
world so first is this notion of route

00:09:55,019 --> 00:09:59,160
services this slide doesn't do it

00:09:57,360 --> 00:10:00,839
justice this is perhaps wanted to me one

00:09:59,160 --> 00:10:02,940
of the most interesting capabilities

00:10:00,839 --> 00:10:06,839
that CF is added in the last I'd say

00:10:02,940 --> 00:10:09,149
half a year the idea of route services

00:10:06,839 --> 00:10:11,399
is that in the data path from the the

00:10:09,149 --> 00:10:13,529
browser or the the end device that's

00:10:11,399 --> 00:10:15,899
going to talk to the application we come

00:10:13,529 --> 00:10:17,279
into the network and CF knows how to

00:10:15,899 --> 00:10:19,860
route you to the various applications

00:10:17,279 --> 00:10:21,420
but more interestingly is instead of

00:10:19,860 --> 00:10:23,310
rounding directly the application we can

00:10:21,420 --> 00:10:25,319
now pass you off to various other

00:10:23,310 --> 00:10:28,500
capabilities thank API management

00:10:25,319 --> 00:10:32,130
functions think application or protocol

00:10:28,500 --> 00:10:35,310
aware firewalls a lot of functionality

00:10:32,130 --> 00:10:36,750
that allows you to extend the way that

00:10:35,310 --> 00:10:39,120
you manage API is and all these micro

00:10:36,750 --> 00:10:41,339
services you know the next thing though

00:10:39,120 --> 00:10:43,110
of course is that we've this is this has

00:10:41,339 --> 00:10:44,370
been out there for a while but it's

00:10:43,110 --> 00:10:46,319
starting to pick up steam I'm starting

00:10:44,370 --> 00:10:48,899
to see people use TCP based routing and

00:10:46,319 --> 00:10:50,490
anger previously before this function

00:10:48,899 --> 00:10:53,100
was released this was an entirely

00:10:50,490 --> 00:10:55,139
web-based stack so now we can support

00:10:53,100 --> 00:10:57,180
anything that rides on top of TCP and

00:10:55,139 --> 00:11:00,620
the pattern exists to add additional

00:10:57,180 --> 00:11:02,790
protocols so what's next for routing

00:11:00,620 --> 00:11:05,340
I'll highlight two

00:11:02,790 --> 00:11:08,880
things one I'll point to zippy

00:11:05,340 --> 00:11:11,220
incompatible tracing Brent the routers

00:11:08,880 --> 00:11:12,300
in the data path of the application for

00:11:11,220 --> 00:11:14,340
those of you that are familiar with

00:11:12,300 --> 00:11:15,900
Zipkin Zipkin distributed tracing system

00:11:14,340 --> 00:11:17,700
it's used in a micro-services

00:11:15,900 --> 00:11:20,310
environment to be able to get really

00:11:17,700 --> 00:11:22,260
detailed traceability across complex

00:11:20,310 --> 00:11:25,170
networked application

00:11:22,260 --> 00:11:27,420
well our router is part of that so it

00:11:25,170 --> 00:11:28,650
should actually be able to emit logs and

00:11:27,420 --> 00:11:30,930
you should be able to track your

00:11:28,650 --> 00:11:31,920
application transactions through it the

00:11:30,930 --> 00:11:34,230
other one that's interesting of course

00:11:31,920 --> 00:11:35,400
is the multiple application ports think

00:11:34,230 --> 00:11:38,160
about this as kind of opening up a

00:11:35,400 --> 00:11:39,690
little bit more flexibility I'm going to

00:11:38,160 --> 00:11:41,100
give a shout out to the IBM team that's

00:11:39,690 --> 00:11:43,020
based here in Germany they've started

00:11:41,100 --> 00:11:45,720
the process of Viette disaggregating a

00:11:43,020 --> 00:11:48,060
few of the functions that exist within

00:11:45,720 --> 00:11:49,380
our cloud controller this is you know

00:11:48,060 --> 00:11:50,970
this is the type of heavy lifting that's

00:11:49,380 --> 00:11:54,810
occurring on your behalf this is not

00:11:50,970 --> 00:11:56,250
something that is end-user facing but

00:11:54,810 --> 00:11:58,730
it's going to allow us to continue to

00:11:56,250 --> 00:12:01,050
scale the platform to higher levels

00:11:58,730 --> 00:12:03,690
another interesting bit of work is

00:12:01,050 --> 00:12:07,080
isolation segments this was previously

00:12:03,690 --> 00:12:08,880
known as elastic clusters and members of

00:12:07,080 --> 00:12:11,210
the community pivotal IBM got together

00:12:08,880 --> 00:12:13,470
and they iterated on the idea a bit

00:12:11,210 --> 00:12:15,570
found a way to make it a little bit more

00:12:13,470 --> 00:12:17,220
incremental for delivery and now we're

00:12:15,570 --> 00:12:19,050
starting to get delivery of it

00:12:17,220 --> 00:12:21,780
so isolation segments are very very

00:12:19,050 --> 00:12:25,200
simple in a very very simple description

00:12:21,780 --> 00:12:26,580
is the ability to take that cluster that

00:12:25,200 --> 00:12:28,740
you've been deploying applications to

00:12:26,580 --> 00:12:31,290
and slice off parts of it maybe for

00:12:28,740 --> 00:12:33,660
compliance reasons maybe for tenant

00:12:31,290 --> 00:12:35,100
isolation reasons but you should be able

00:12:33,660 --> 00:12:37,350
to slice off parts of it and then place

00:12:35,100 --> 00:12:39,450
applications into them so we started

00:12:37,350 --> 00:12:41,010
with compute there's of course label

00:12:39,450 --> 00:12:42,750
based administration steps that need to

00:12:41,010 --> 00:12:43,950
occur in the cloud controller they're

00:12:42,750 --> 00:12:45,240
going to move into networking and that

00:12:43,950 --> 00:12:48,920
moving a logging and they actually have

00:12:45,240 --> 00:12:52,740
a pretty robust backlog well beyond that

00:12:48,920 --> 00:12:54,150
also atticus this is a great project not

00:12:52,740 --> 00:12:56,580
part a Cloud Foundry core but it's a

00:12:54,150 --> 00:12:59,370
really interesting project that both IBM

00:12:56,580 --> 00:13:03,740
and sa PE are collaborating on it is a

00:12:59,370 --> 00:13:06,990
metering and usage aggregation service

00:13:03,740 --> 00:13:10,220
it's been out for quite some time this

00:13:06,990 --> 00:13:12,269
is how bluemix builds people

00:13:10,220 --> 00:13:14,999
so it's really really important and we

00:13:12,269 --> 00:13:18,269
know that it works at scale they've been

00:13:14,999 --> 00:13:19,920
working quite hard to to make sure that

00:13:18,269 --> 00:13:21,600
the abacus software itself has been

00:13:19,920 --> 00:13:23,730
hardened s IP has been doing a lot of

00:13:21,600 --> 00:13:26,549
vulnerability scanning along with IBM to

00:13:23,730 --> 00:13:27,779
improve the surface area but what's

00:13:26,549 --> 00:13:30,389
really coming up next is going to be

00:13:27,779 --> 00:13:32,100
interesting so UI for the onboarding of

00:13:30,389 --> 00:13:34,319
service providers so we're gonna start

00:13:32,100 --> 00:13:36,540
to see user interfaces now coming into

00:13:34,319 --> 00:13:38,129
foundation upstream projects and then

00:13:36,540 --> 00:13:39,509
abacus is a service which is an

00:13:38,129 --> 00:13:41,279
interesting idea so you take this

00:13:39,509 --> 00:13:43,649
component of the Cloud Foundry runtime

00:13:41,279 --> 00:13:49,410
an optional component yuri express it as

00:13:43,649 --> 00:13:51,569
a service okay so sorry that was runtime

00:13:49,410 --> 00:13:53,730
let's quickly go down through the Boche

00:13:51,569 --> 00:13:56,910
layer for you because bosch make no

00:13:53,730 --> 00:14:00,449
mistake about this Bosch is the Cloud

00:13:56,910 --> 00:14:03,959
Foundry multi-cloud story it is what

00:14:00,449 --> 00:14:07,980
allows us to quickly and easily deploy

00:14:03,959 --> 00:14:10,199
cloud foundry on any public cloud any of

00:14:07,980 --> 00:14:12,569
the private cloud platforms that exist

00:14:10,199 --> 00:14:15,629
so it is that story for us it's

00:14:12,569 --> 00:14:19,019
incredibly important you may have been

00:14:15,629 --> 00:14:20,790
hearing things about bosch 2.0 so tirado

00:14:19,019 --> 00:14:23,009
isn't actually a version number this is

00:14:20,790 --> 00:14:24,839
what I love about continuous delivery of

00:14:23,009 --> 00:14:26,160
upstream software what we're actually

00:14:24,839 --> 00:14:29,579
talking about is a set of capabilities

00:14:26,160 --> 00:14:36,689
that are released as version 250 5.4 and

00:14:29,579 --> 00:14:38,399
up bacha to do this feature future

00:14:36,689 --> 00:14:41,129
narrative did a wonderful job of

00:14:38,399 --> 00:14:44,059
beginning to simplify the operational

00:14:41,129 --> 00:14:46,559
experience of creating Bosch deployments

00:14:44,059 --> 00:14:47,850
very very important there's still a lot

00:14:46,559 --> 00:14:51,119
of work to do to continue to make it

00:14:47,850 --> 00:14:53,549
easier to consume and and manage Bosch

00:14:51,119 --> 00:14:56,910
but it's an incredible platform that

00:14:53,549 --> 00:14:59,629
given all of these improvements is just

00:14:56,910 --> 00:15:02,129
continuing to get better and better

00:14:59,629 --> 00:15:05,819
let's actually just highlight one of the

00:15:02,129 --> 00:15:08,850
CPI teams this happens to be a team not

00:15:05,819 --> 00:15:12,089
very far from here based involved over

00:15:08,850 --> 00:15:14,730
at sa p with sous engineers

00:15:12,089 --> 00:15:16,829
participating they care for the

00:15:14,730 --> 00:15:19,709
OpenStack integration that Bosch has

00:15:16,829 --> 00:15:21,959
they care for it they love it they fix

00:15:19,709 --> 00:15:23,560
it but they also support the community

00:15:21,959 --> 00:15:25,150
and one of the

00:15:23,560 --> 00:15:27,760
I'm in questions that they got I mean

00:15:25,150 --> 00:15:30,400
how many of you have used OpenStack yeah

00:15:27,760 --> 00:15:32,529
looks like a few right so so here's the

00:15:30,400 --> 00:15:33,760
thing about OpenStack love it it's open

00:15:32,529 --> 00:15:35,770
source that's great

00:15:33,760 --> 00:15:38,890
but there's no two open stacks at the

00:15:35,770 --> 00:15:40,720
same lots of configuration variants lots

00:15:38,890 --> 00:15:42,760
of ways you can like recombine it so you

00:15:40,720 --> 00:15:45,160
get this question does it work on my

00:15:42,760 --> 00:15:47,470
OpenStack well you know the answer to

00:15:45,160 --> 00:15:49,360
that had been well that's a good

00:15:47,470 --> 00:15:51,130
question and then you get this checklist

00:15:49,360 --> 00:15:53,910
of about 50 things you'd have to go look

00:15:51,130 --> 00:15:56,860
at now of course any good product owner

00:15:53,910 --> 00:15:58,120
Marko realized that that's totally

00:15:56,860 --> 00:16:01,000
inappropriate why don't we automate this

00:15:58,120 --> 00:16:01,960
for you so if you're using OpenStack if

00:16:01,000 --> 00:16:03,970
you're deploying Cloud Foundry and

00:16:01,960 --> 00:16:06,279
OpenStack I highly recommend you take a

00:16:03,970 --> 00:16:10,270
look at be the CF OpenStack validator

00:16:06,279 --> 00:16:12,279
they hit I guess 1.0 a few weeks back it

00:16:10,270 --> 00:16:13,930
works great it simplifies the manual

00:16:12,279 --> 00:16:17,680
process of making sure that open stacks

00:16:13,930 --> 00:16:19,660
working effectively for you so with that

00:16:17,680 --> 00:16:22,180
I can read deep that was kind of deep

00:16:19,660 --> 00:16:25,450
kind of dense so let's just reflect on

00:16:22,180 --> 00:16:27,520
how simple this looks now this is all of

00:16:25,450 --> 00:16:29,950
the work of all of the engineers and all

00:16:27,520 --> 00:16:32,080
of the product managers that that work

00:16:29,950 --> 00:16:35,710
constantly together across companies

00:16:32,080 --> 00:16:37,450
pairing they're building a platform for

00:16:35,710 --> 00:16:39,370
you so that the digital transformation

00:16:37,450 --> 00:16:41,140
stories that we're hearing here at the

00:16:39,370 --> 00:16:43,810
conference you know the two that I that

00:16:41,140 --> 00:16:46,480
led into me are actually able to focus

00:16:43,810 --> 00:16:48,220
on their business because building a

00:16:46,480 --> 00:16:52,089
complex system like Cloud Foundry isn't

00:16:48,220 --> 00:16:53,920
a joke it's it's very hard and require a

00:16:52,089 --> 00:16:56,080
serious engineering commitment but it

00:16:53,920 --> 00:16:57,310
also requires executing your software

00:16:56,080 --> 00:17:00,010
engineering in the same way that we

00:16:57,310 --> 00:17:03,130
preach you should develop business

00:17:00,010 --> 00:17:06,699
applications so with that thank you very

00:17:03,130 --> 00:17:07,160
much and I hope you enjoyed the rest of

00:17:06,699 --> 00:17:10,249
the topics

00:17:07,160 --> 00:17:10,249

YouTube URL: https://www.youtube.com/watch?v=aj9B_IAMFnQ


