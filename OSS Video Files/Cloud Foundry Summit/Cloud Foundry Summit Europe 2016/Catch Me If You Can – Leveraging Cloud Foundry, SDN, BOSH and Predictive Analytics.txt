Title: Catch Me If You Can – Leveraging Cloud Foundry, SDN, BOSH and Predictive Analytics
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Catch Me If You Can – Leveraging Cloud Foundry, SDN, BOSH and Predictive Analytics to Outrun Advanced Persistent Threats (APT) While Maintaining Optimal Quality of Service (QoS) - Keith Strini, Merlin Glynn & Sean Keery, Pivotal

As we work to move the BOSH/Cloud Foundry ecosystem closer to an autonomous dynamic runtime architecture, it’s time to incorporate more layers of the OSI model into the fold to provide a more robust security posture and optimize performance. BOSH coupled with a properly architected SDN, can manage more complexity in its deployments such that each Cloud Foundry deployment can adapt in response to demands on the system, security policy, or degradation of network performance. By analyzing continuous feedback of key metrics and easily offloading these metrics to BOSH managed Big Data platforms, operators can now define Domain Specific Language (DSL) based strategies and pass them to BOSH to manage how to adapt the entire domain in response to changes in the health of the communications layers below it.

About Merlin Glynn
Merlin has been building complex environments for over 20 years {yeah he's an old guy}. While with IBM, he architected some of the worlds largest Supercomputers regularly being listed on the https://www.top500.org/. At VMware, he was the lead architect for VMware's global OneCloud. Now at Pivotal, he focuses on designing next generation Cloud Foundry platforms with Pivotal's key enterprise customers.

About Sean Keery
Sean Keery began hacking obscure video game systems at the age of 13. Sean then developed interpersonal skills while teaching snowboarding. Nowadays we've got Cloud Foundry, choreography, containers and plenty of io. Cluster deployments and IaaS independence occupy most days, while the daily commute is filled with podcasts and chipmunk bunny hops. Some family time, spicy food, a good book and hacking on the newest toy keep Sean busy at home.

About Keith Strini
Keith Strini is a Cloud Foundry Solutions Architect at Pivotal, implementing Cloud Foundry solutions across a wide variety of customer environments both in the Federal and Commercial space. He also served as a technology analyst for the US Department of Defense and Intelligence communities. In this capacity, he was responsible in aiding the enterprise management decision process and guiding the modernization migrations to cloud initiatives. In addition to this he provided strategic analysis to aide in the planning and investment projections necessary for this technology acquisition. He has helped architect, develop and execute the fielding of information systems across the Joint Services both CONUS and OCONUS (Korea, Japan, Europe, and the Middle East) and NATO.
Captions: 
	00:00:00,060 --> 00:00:06,150
good afternoon we're here to talk to you

00:00:03,030 --> 00:00:07,350
guys today the title of our session is

00:00:06,150 --> 00:00:11,570
catch me if you can and what we're going

00:00:07,350 --> 00:00:13,710
to be doing is delving into how one

00:00:11,570 --> 00:00:15,690
gonna stand here in front of all right

00:00:13,710 --> 00:00:18,060
so for the video I guess I have to be

00:00:15,690 --> 00:00:21,930
stationary we're going to be delving

00:00:18,060 --> 00:00:23,850
into some conceptual and some some

00:00:21,930 --> 00:00:26,910
advanced features of monitoring metrics

00:00:23,850 --> 00:00:29,010
from a platform of Cloud Foundry in

00:00:26,910 --> 00:00:31,199
addition to the external environment and

00:00:29,010 --> 00:00:33,590
then tenth the home of ten of this is so

00:00:31,199 --> 00:00:38,010
that we can show how we can adaptively

00:00:33,590 --> 00:00:39,660
react to persistent threats to quality

00:00:38,010 --> 00:00:42,059
of service degradation to two things

00:00:39,660 --> 00:00:44,370
that make the our foundation our

00:00:42,059 --> 00:00:46,230
environment poor so that's what our

00:00:44,370 --> 00:00:49,020
session is today and I'll go ahead and

00:00:46,230 --> 00:00:51,360
introduce myself and my two colleagues

00:00:49,020 --> 00:00:53,789
on stage with me my name is Merlin Glenn

00:00:51,360 --> 00:00:55,500
I'm with a pivotal I'm a solution

00:00:53,789 --> 00:00:56,699
architect with pivotal and the reason

00:00:55,500 --> 00:00:58,289
this session is a little important for

00:00:56,699 --> 00:00:59,820
me and it's work that we're actively

00:00:58,289 --> 00:01:03,019
doing with a lot of our customers

00:00:59,820 --> 00:01:06,510
today's I'm a network architect I design

00:01:03,019 --> 00:01:10,290
Sdn networks and this tends to be a

00:01:06,510 --> 00:01:11,460
topic that is very difficult to it's

00:01:10,290 --> 00:01:14,970
very difficult to meet customer

00:01:11,460 --> 00:01:17,189
requirements and be able to adapt to

00:01:14,970 --> 00:01:19,200
threats as they change to be able to and

00:01:17,189 --> 00:01:21,840
be proactive instead of reactive and how

00:01:19,200 --> 00:01:23,159
we actually resolve an issue that

00:01:21,840 --> 00:01:24,119
degrades the quality of service inside

00:01:23,159 --> 00:01:25,740
of a platform so that's why it's

00:01:24,119 --> 00:01:30,180
important to me and let me go ahead and

00:01:25,740 --> 00:01:32,100
introduce Sean good afternoon I'm Sean

00:01:30,180 --> 00:01:34,229
kiri I'm also a Solutions Architect at

00:01:32,100 --> 00:01:36,750
pivotal so we're the guys who get to

00:01:34,229 --> 00:01:39,930
play with all the new toys and we get to

00:01:36,750 --> 00:01:42,420
dream up these new ideas on this project

00:01:39,930 --> 00:01:46,290
I was the Kaos Titian I like to give

00:01:42,420 --> 00:01:48,500
myself new titles too so the reason I'm

00:01:46,290 --> 00:01:51,930
interested in this kind of stuff is

00:01:48,500 --> 00:01:54,090
because we're gonna break things and if

00:01:51,930 --> 00:01:57,540
we know how they fail we can learn from

00:01:54,090 --> 00:02:00,119
them and improve them in the future we

00:01:57,540 --> 00:02:02,549
got to play with the machine learning

00:02:00,119 --> 00:02:04,340
algorithms no anybody here have an

00:02:02,549 --> 00:02:08,099
experience with machine learning hands

00:02:04,340 --> 00:02:10,099
predicts guy know machine learning okay

00:02:08,099 --> 00:02:12,930
developers any developers in the room

00:02:10,099 --> 00:02:15,930
operators businesspeople

00:02:12,930 --> 00:02:21,750
who see it what do you guys do all right

00:02:15,930 --> 00:02:22,400
I'm gonna hand this over to Keith good

00:02:21,750 --> 00:02:24,810
afternoon

00:02:22,400 --> 00:02:27,299
I'm Keith srini I'm also on the

00:02:24,810 --> 00:02:28,739
solutions team with Sean it's like he's

00:02:27,299 --> 00:02:31,379
sailing it's a break a lot of things but

00:02:28,739 --> 00:02:33,090
we also have direct line sensing

00:02:31,379 --> 00:02:36,030
customer feedback and we understand some

00:02:33,090 --> 00:02:39,780
of the frustrations the customers have

00:02:36,030 --> 00:02:42,510
both in and just in general with putting

00:02:39,780 --> 00:02:43,829
a an environment out there we battle

00:02:42,510 --> 00:02:47,159
every day with you know getting things

00:02:43,829 --> 00:02:49,230
under configuration and and adjusting to

00:02:47,159 --> 00:02:51,209
drift and things like that but then what

00:02:49,230 --> 00:02:53,069
happens is even if you had all that

00:02:51,209 --> 00:02:54,750
perfect the environment does need to

00:02:53,069 --> 00:02:57,450
change because it's always facing

00:02:54,750 --> 00:02:58,739
constant adversity so that's some of the

00:02:57,450 --> 00:03:03,030
things that we want to discuss here

00:02:58,739 --> 00:03:04,739
today again we want to give a special

00:03:03,030 --> 00:03:07,170
shout out to Riley who can be with us

00:03:04,739 --> 00:03:10,290
today he's on our Big Data Services team

00:03:07,170 --> 00:03:11,939
he helped on on some of the big data and

00:03:10,290 --> 00:03:21,449
platform analytic side to help us get up

00:03:11,939 --> 00:03:24,030
and running so all right so the main

00:03:21,449 --> 00:03:26,910
goals of this talk are to bring Sdn into

00:03:24,030 --> 00:03:29,129
the conversation we feel like it's it's

00:03:26,910 --> 00:03:31,099
that time we do a lot of stuff in the

00:03:29,129 --> 00:03:33,780
environment Bosch in the infrastructure

00:03:31,099 --> 00:03:35,190
cloud foundry the application layer but

00:03:33,780 --> 00:03:37,470
it's important to bring in the entire

00:03:35,190 --> 00:03:40,139
environment because it does affect what

00:03:37,470 --> 00:03:41,489
we do promote the need for an active

00:03:40,139 --> 00:03:43,709
platform so today

00:03:41,489 --> 00:03:45,629
technically the platform is monitored

00:03:43,709 --> 00:03:47,220
you have dashboards heat maps things

00:03:45,629 --> 00:03:49,109
like that so you can see what's going on

00:03:47,220 --> 00:03:50,489
with the environment but it's not so

00:03:49,109 --> 00:03:53,299
much on the active side we're actually

00:03:50,489 --> 00:03:55,470
doing and making decisions in real time

00:03:53,299 --> 00:03:57,239
with that actually with those indicators

00:03:55,470 --> 00:03:59,250
that we get through the different

00:03:57,239 --> 00:04:01,019
environmental probes and then finally

00:03:59,250 --> 00:04:02,669
highlight the power of Clos deploying an

00:04:01,019 --> 00:04:05,310
analytics platform with cloud foundry

00:04:02,669 --> 00:04:08,129
and this isn't just for special data

00:04:05,310 --> 00:04:10,440
science cases but like as a part of the

00:04:08,129 --> 00:04:12,479
normal deployment of the platform

00:04:10,440 --> 00:04:14,280
hooking up the intelligence at every

00:04:12,479 --> 00:04:15,959
single layer at the platform because a

00:04:14,280 --> 00:04:18,000
lot of this stuff is there you know we

00:04:15,959 --> 00:04:20,130
have abstractions in Diego now we have

00:04:18,000 --> 00:04:21,779
Bosh we have a tool so that we'll talk

00:04:20,130 --> 00:04:24,750
about a little bit today an animal that

00:04:21,779 --> 00:04:26,430
helps drive Bosh at that infrastructure

00:04:24,750 --> 00:04:27,900
layer we have Sdn with

00:04:26,430 --> 00:04:29,940
the api's and the separation from

00:04:27,900 --> 00:04:32,009
control and data so we have the ability

00:04:29,940 --> 00:04:33,660
to dynamically reconfigure these things

00:04:32,009 --> 00:04:36,449
so all these things bringing them

00:04:33,660 --> 00:04:38,039
together into a conversation about why

00:04:36,449 --> 00:04:41,490
it's important to bring intelligence to

00:04:38,039 --> 00:04:46,650
the platform as it is today so those are

00:04:41,490 --> 00:04:48,000
what we hope to cover and I'll turn it

00:04:46,650 --> 00:04:51,840
over to my colleagues to talk about

00:04:48,000 --> 00:04:54,660
quality servicing nice and offs

00:04:51,840 --> 00:04:57,240
so quality service so for those of you

00:04:54,660 --> 00:05:00,000
that are network network guys qsqso

00:04:57,240 --> 00:05:02,789
costs might relate to a protocol stream

00:05:00,000 --> 00:05:04,650
or putting priority of one type of

00:05:02,789 --> 00:05:06,210
traffic pattern over another what we're

00:05:04,650 --> 00:05:08,250
really talking about here within this

00:05:06,210 --> 00:05:09,509
aspect of quality of service is quality

00:05:08,250 --> 00:05:11,190
of service of the environment as a whole

00:05:09,509 --> 00:05:12,630
and where cloud foundry summits so we're

00:05:11,190 --> 00:05:14,280
going to be focusing on cloud foundry

00:05:12,630 --> 00:05:17,160
and applications published on cloud

00:05:14,280 --> 00:05:18,150
foundry so that's the the view point I

00:05:17,160 --> 00:05:20,400
want to set in the frame of mind a

00:05:18,150 --> 00:05:22,139
croisé when we we're gonna walk through

00:05:20,400 --> 00:05:23,610
visually here in a second what we're

00:05:22,139 --> 00:05:24,870
talking about because it's kind of hard

00:05:23,610 --> 00:05:27,509
just to read a bunch of bullets up in

00:05:24,870 --> 00:05:30,210
the screen and kind of see or understand

00:05:27,509 --> 00:05:32,669
what we're trying to achieve when we say

00:05:30,210 --> 00:05:34,349
an adaptive platform but really the key

00:05:32,669 --> 00:05:36,510
concept I want to put in mind here is

00:05:34,349 --> 00:05:38,130
when I say Kwas we're not talking about

00:05:36,510 --> 00:05:39,320
quas from a network pattern standpoint

00:05:38,130 --> 00:05:42,750
we're talking about quas from

00:05:39,320 --> 00:05:44,430
availability reliability security uptime

00:05:42,750 --> 00:05:45,659
of the platform itself the quality of

00:05:44,430 --> 00:05:47,669
services the platform is one of the

00:05:45,659 --> 00:05:50,400
things we're keen on and what kind of

00:05:47,669 --> 00:05:52,229
things degrade quality of service I mean

00:05:50,400 --> 00:05:53,820
some of you guys raise your hands and

00:05:52,229 --> 00:05:57,199
your cloud foundry operators right I

00:05:53,820 --> 00:05:59,789
mean you name it infrastructure outages

00:05:57,199 --> 00:06:03,570
DDoS attacks if you have persistent

00:05:59,789 --> 00:06:04,770
threats data loss miss configures change

00:06:03,570 --> 00:06:06,449
controls I mean that there's lots of

00:06:04,770 --> 00:06:08,400
things if you have to that you have to

00:06:06,449 --> 00:06:09,479
be able to adapt to and one of it one of

00:06:08,400 --> 00:06:12,870
the key concepts are going to be going

00:06:09,479 --> 00:06:15,090
over is how do you you know today most

00:06:12,870 --> 00:06:16,680
operators are limited by the sets of

00:06:15,090 --> 00:06:18,720
metrics that they might collect from a

00:06:16,680 --> 00:06:20,250
foreign environment that are healthy

00:06:18,720 --> 00:06:22,169
unhealthy type metrics right or I might

00:06:20,250 --> 00:06:24,659
have some some green threshold regions

00:06:22,169 --> 00:06:26,280
and you build a pattern of remediation

00:06:24,659 --> 00:06:28,620
actions based on those thresholds and

00:06:26,280 --> 00:06:30,870
that's a very static it's a very hard

00:06:28,620 --> 00:06:32,159
thing to do it puts you always behind

00:06:30,870 --> 00:06:33,479
the gun which is that's the title of the

00:06:32,159 --> 00:06:34,789
session if catch me if you can it always

00:06:33,479 --> 00:06:37,830
puts you behind the gun of trying to

00:06:34,789 --> 00:06:40,020
figure out a predict what's going to

00:06:37,830 --> 00:06:41,520
cause a degradation of quality so

00:06:40,020 --> 00:06:42,750
that's the whole point of what we're

00:06:41,520 --> 00:06:45,120
building here so that we begin to build

00:06:42,750 --> 00:06:46,379
analytic sense so that we can predict

00:06:45,120 --> 00:06:48,360
that based on patterns and we can even

00:06:46,379 --> 00:06:50,060
predict remediations as opposed to

00:06:48,360 --> 00:06:52,199
having these static thresholds and and

00:06:50,060 --> 00:06:54,090
things that are just hard to track and

00:06:52,199 --> 00:06:54,960
chase when threats are adaptive and

00:06:54,090 --> 00:06:57,120
threats are coming in from all different

00:06:54,960 --> 00:06:58,110
directions and you might want to talk

00:06:57,120 --> 00:06:59,639
about threats a little bit cuz you're

00:06:58,110 --> 00:07:01,020
like you're the Kaos guy right on the

00:06:59,639 --> 00:07:03,930
network out here the Kaos guy is that

00:07:01,020 --> 00:07:08,159
today nice guy bad guy good cop bad cop

00:07:03,930 --> 00:07:09,690
again so yeah we have a spectrum of

00:07:08,159 --> 00:07:10,710
things where let's touched on a couple

00:07:09,690 --> 00:07:11,729
of them the one we really haven't

00:07:10,710 --> 00:07:14,699
touched on yet is our advanced

00:07:11,729 --> 00:07:16,470
persistent threat right we work with big

00:07:14,699 --> 00:07:19,199
customers a lot of you guys have

00:07:16,470 --> 00:07:20,400
sensitive data you need to hide right

00:07:19,199 --> 00:07:24,690
people are always trying to get that

00:07:20,400 --> 00:07:26,370
data be it from external or internal and

00:07:24,690 --> 00:07:27,930
then they're trying to screw up your

00:07:26,370 --> 00:07:29,220
systems the competitors maybe you're

00:07:27,930 --> 00:07:31,590
running the cast monkey against your

00:07:29,220 --> 00:07:36,479
system shutting things down anybody have

00:07:31,590 --> 00:07:39,629
that happened to him yet no good okay so

00:07:36,479 --> 00:07:41,219
we can DDoS ourselves right anybody ever

00:07:39,629 --> 00:07:42,900
have an application that just goes out

00:07:41,219 --> 00:07:44,969
there and just keeps making requests to

00:07:42,900 --> 00:07:48,360
a service that isn't there right over

00:07:44,969 --> 00:07:49,620
those the service self DDoS right we

00:07:48,360 --> 00:07:51,750
have some patterns and application

00:07:49,620 --> 00:07:52,889
development like the circuit breaker

00:07:51,750 --> 00:07:54,960
anybody familiar with the circuit

00:07:52,889 --> 00:07:56,279
breaker pattern right we're thinking

00:07:54,960 --> 00:07:59,340
about taking the circuit breaker pattern

00:07:56,279 --> 00:08:01,319
and applying it from the network all the

00:07:59,340 --> 00:08:02,639
way down through your applications right

00:08:01,319 --> 00:08:07,740
and that's the pattern we're trying to

00:08:02,639 --> 00:08:09,210
talk about here so ultimately it all

00:08:07,740 --> 00:08:11,849
comes down to what if we could actually

00:08:09,210 --> 00:08:13,529
improve and improve the performance of

00:08:11,849 --> 00:08:15,330
the platform and respond to

00:08:13,529 --> 00:08:18,659
environmental adversity at the same time

00:08:15,330 --> 00:08:20,430
rather than reacting to it afterwards so

00:08:18,659 --> 00:08:22,710
what we like to look at here is what

00:08:20,430 --> 00:08:24,180
would continuous improvement over the

00:08:22,710 --> 00:08:25,650
environment adversities what would it

00:08:24,180 --> 00:08:27,300
actually look like how would we do this

00:08:25,650 --> 00:08:29,550
and real life do you pack everything

00:08:27,300 --> 00:08:30,870
into Bosh and make Bosh super super

00:08:29,550 --> 00:08:33,630
smart and then now have things down

00:08:30,870 --> 00:08:35,370
there do you pack everything into it

00:08:33,630 --> 00:08:37,800
Cloud Foundry and do stuff with Diego's

00:08:35,370 --> 00:08:40,050
abstractions do you do everything in you

00:08:37,800 --> 00:08:41,880
know in the SDN layer or do you have to

00:08:40,050 --> 00:08:43,649
actually extract all these things out so

00:08:41,880 --> 00:08:47,250
that you can do higher-level analytics

00:08:43,649 --> 00:08:49,230
and in sets of patterns and recipes in

00:08:47,250 --> 00:08:50,730
order to sort of articulate the entire

00:08:49,230 --> 00:08:52,470
environment changing to the threat

00:08:50,730 --> 00:08:53,030
because if you think about how a threat

00:08:52,470 --> 00:08:54,530
we're

00:08:53,030 --> 00:08:56,690
you know it doesn't come in the same

00:08:54,530 --> 00:08:58,400
time the same way every time it comes in

00:08:56,690 --> 00:09:00,230
differently and so there might be a

00:08:58,400 --> 00:09:02,390
combination of things that respond to a

00:09:00,230 --> 00:09:04,670
DDoS that's different than a set of

00:09:02,390 --> 00:09:06,110
things that we respond to an apt or

00:09:04,670 --> 00:09:08,270
there might be a set of things that in

00:09:06,110 --> 00:09:10,430
network outages how you need to route

00:09:08,270 --> 00:09:12,500
that traffic over maybe more than just a

00:09:10,430 --> 00:09:14,270
single step of doing it and so that's

00:09:12,500 --> 00:09:17,500
where we're gonna talk about a little

00:09:14,270 --> 00:09:17,500
bit spend a little time on this slide

00:09:19,000 --> 00:09:27,260
okay so something bad comes in the

00:09:23,000 --> 00:09:28,880
environment sets it on fire and today

00:09:27,260 --> 00:09:30,260
what we have is you know we have boss

00:09:28,880 --> 00:09:32,390
agents that will actually report that

00:09:30,260 --> 00:09:33,950
state but what ends up happening is we

00:09:32,390 --> 00:09:35,450
just monitor that we okay but something

00:09:33,950 --> 00:09:37,010
bad happened we run around we do

00:09:35,450 --> 00:09:38,630
something with it ops before I'm sure

00:09:37,010 --> 00:09:40,130
you're familiar with this and it's like

00:09:38,630 --> 00:09:41,690
you know we got it we got to go fix this

00:09:40,130 --> 00:09:44,270
where do we start this kind of thing

00:09:41,690 --> 00:09:45,800
so we're yeah a lot of firefighting so

00:09:44,270 --> 00:09:48,320
what we're hoping to do is get beyond

00:09:45,800 --> 00:09:51,440
this so that we can actually reason on

00:09:48,320 --> 00:09:53,390
it in a consistent fashion and through

00:09:51,440 --> 00:09:55,760
the dynamic analysis and by driving this

00:09:53,390 --> 00:09:58,550
3 SL A's we will actually start sending

00:09:55,760 --> 00:10:00,200
these recipes out to the environment at

00:09:58,550 --> 00:10:01,490
the different levels some things will go

00:10:00,200 --> 00:10:03,110
to Bosh some things would go to clock

00:10:01,490 --> 00:10:05,450
foundry some things will go to the Sdn

00:10:03,110 --> 00:10:06,770
and then through that remediation you

00:10:05,450 --> 00:10:09,620
will see the environment actually adapt

00:10:06,770 --> 00:10:13,130
to the threat and then this way you know

00:10:09,620 --> 00:10:15,380
ultimately it's all cleaned up and we've

00:10:13,130 --> 00:10:18,500
self healed so this is why it's

00:10:15,380 --> 00:10:19,880
important you know it's it's important

00:10:18,500 --> 00:10:21,560
it's important to understand it from a

00:10:19,880 --> 00:10:22,790
holistic perspective that it's no one

00:10:21,560 --> 00:10:24,740
thing in the environment that needs to

00:10:22,790 --> 00:10:25,730
be changed so turnover my colleagues

00:10:24,740 --> 00:10:29,470
will talk a little bit more about the

00:10:25,730 --> 00:10:33,290
details and the different color schemes

00:10:29,470 --> 00:10:34,550
yes so the environment so I guess kind

00:10:33,290 --> 00:10:35,840
of walk through a story of this the

00:10:34,550 --> 00:10:37,910
environment doesn't necessarily mean

00:10:35,840 --> 00:10:39,710
just Cloud Foundry right because Cloud

00:10:37,910 --> 00:10:43,100
Foundry has a rich set of metrics that

00:10:39,710 --> 00:10:44,630
we can tap into the firehose and event

00:10:43,100 --> 00:10:47,750
states but that doesn't give us the

00:10:44,630 --> 00:10:49,640
health or the expected or current state

00:10:47,750 --> 00:10:50,750
of the environment as a whole so we're

00:10:49,640 --> 00:10:52,610
really talking about pulling metrics

00:10:50,750 --> 00:10:54,170
from your Sdn layer from your Aya's

00:10:52,610 --> 00:10:55,640
layer in addition to SIA

00:10:54,170 --> 00:10:57,710
so that all of these metrics are fed

00:10:55,640 --> 00:11:00,350
into an HDS south's style system and

00:10:57,710 --> 00:11:04,490
given the capability to analyze what

00:11:00,350 --> 00:11:05,690
happens when expected metric X for

00:11:04,490 --> 00:11:07,490
example ago router

00:11:05,690 --> 00:11:09,350
last time of a metric from Cloud Foundry

00:11:07,490 --> 00:11:11,240
what does that actually correlate to

00:11:09,350 --> 00:11:13,640
what's happening on my physical routers

00:11:11,240 --> 00:11:15,320
or my virtual routers of my Sdn layer is

00:11:13,640 --> 00:11:16,460
that a pattern is that a fingerprint

00:11:15,320 --> 00:11:17,870
that's happened already so when we look

00:11:16,460 --> 00:11:20,210
at this environment box here we're not

00:11:17,870 --> 00:11:21,230
thinking of just Cloud Foundry we're

00:11:20,210 --> 00:11:22,940
really thinking of the entire

00:11:21,230 --> 00:11:25,460
environment the solution as a whole

00:11:22,940 --> 00:11:27,200
which could involve and does typically

00:11:25,460 --> 00:11:29,600
involve perimeter networks things that

00:11:27,200 --> 00:11:32,780
are beyond objects that Cloud Foundry

00:11:29,600 --> 00:11:35,960
could even report on so you know in our

00:11:32,780 --> 00:11:37,850
animation where we had our bad cop you

00:11:35,960 --> 00:11:40,130
know get back from the Terminator and do

00:11:37,850 --> 00:11:41,690
the whole Terminator sequence so this

00:11:40,130 --> 00:11:43,010
could be you know this could be anything

00:11:41,690 --> 00:11:45,190
we don't know what the threat is right

00:11:43,010 --> 00:11:48,440
now and the concept is is in traditional

00:11:45,190 --> 00:11:50,000
monitoring scopes we may have a set of

00:11:48,440 --> 00:11:52,310
hard thresholds when this happens you

00:11:50,000 --> 00:11:53,480
know so we know something odd has

00:11:52,310 --> 00:11:55,040
happened in the environment and a

00:11:53,480 --> 00:11:58,370
certain set of metrics has now changed

00:11:55,040 --> 00:12:00,620
of deltad in an unexpected state in a

00:11:58,370 --> 00:12:02,330
traditional pattern we're having to

00:12:00,620 --> 00:12:05,390
build thresholds we're having to guess

00:12:02,330 --> 00:12:06,950
what that unexpected state might be and

00:12:05,390 --> 00:12:08,060
this is the pattern we're trying to get

00:12:06,950 --> 00:12:09,830
away from and why are we introducing

00:12:08,060 --> 00:12:11,300
analytics into this the next phase is

00:12:09,830 --> 00:12:12,740
going to occur because it's it's going

00:12:11,300 --> 00:12:15,200
to be a losing game or it is a losing

00:12:12,740 --> 00:12:16,250
game for most customers and I'm using

00:12:15,200 --> 00:12:18,110
the term customers because we're like

00:12:16,250 --> 00:12:19,640
services guys we do a lot of deployment

00:12:18,110 --> 00:12:23,030
or Cloud Foundry so most Cloud Foundry

00:12:19,640 --> 00:12:25,400
users are environments to be able to for

00:12:23,030 --> 00:12:26,870
example respond to a threat how do you

00:12:25,400 --> 00:12:29,630
know what that threats gonna be in DDoS

00:12:26,870 --> 00:12:30,890
to do s-type style attack what does that

00:12:29,630 --> 00:12:33,440
can actually be is that going to be a

00:12:30,890 --> 00:12:34,460
hit to an application you're hosting is

00:12:33,440 --> 00:12:36,860
it could be something in your control

00:12:34,460 --> 00:12:38,510
plane is it going to be another endpoint

00:12:36,860 --> 00:12:40,040
external Cloud Foundry but still follows

00:12:38,510 --> 00:12:42,170
the same data path or the same data

00:12:40,040 --> 00:12:44,300
route how do you build metrics in to

00:12:42,170 --> 00:12:45,830
detect that that's happening and so

00:12:44,300 --> 00:12:48,200
we're trying to do here is push all of

00:12:45,830 --> 00:12:50,570
that stream of metrics into the dynamic

00:12:48,200 --> 00:12:52,190
analysis engine which is what these fine

00:12:50,570 --> 00:12:53,120
gentlemen go into because I'm in Sdn guy

00:12:52,190 --> 00:12:55,820
right I know the stuff about the

00:12:53,120 --> 00:12:57,170
networks and but the key concept here is

00:12:55,820 --> 00:12:58,880
we're trying to get away from having to

00:12:57,170 --> 00:13:01,010
define static thresholds we're having to

00:12:58,880 --> 00:13:02,420
get away from having to predict what the

00:13:01,010 --> 00:13:04,310
problem is going to be and actually be

00:13:02,420 --> 00:13:06,880
able to analyze and predict what the

00:13:04,310 --> 00:13:08,900
route the resolution is going to be

00:13:06,880 --> 00:13:12,530
anybody out here work for storage could

00:13:08,900 --> 00:13:14,630
be storage is cheap right so we can keep

00:13:12,530 --> 00:13:15,730
all these analytics our Hadoop file

00:13:14,630 --> 00:13:20,610
system whatever

00:13:15,730 --> 00:13:24,670
system and mark them right as an event

00:13:20,610 --> 00:13:27,070
through our learning models right then

00:13:24,670 --> 00:13:30,100
when we see that pattern again we can

00:13:27,070 --> 00:13:33,579
apply our previous solution using our

00:13:30,100 --> 00:13:36,370
DSL libraries right so our DSL libraries

00:13:33,579 --> 00:13:40,720
will just be all those calls out to bot

00:13:36,370 --> 00:13:45,839
right Bausch create stem cell whatever

00:13:40,720 --> 00:13:49,779
it may be right CF scale application ad

00:13:45,839 --> 00:13:52,540
network for the SDN stuff right and then

00:13:49,779 --> 00:13:55,690
we have continuous learning right this

00:13:52,540 --> 00:13:58,449
is where obviously we need our data

00:13:55,690 --> 00:14:01,420
scientists involved and we need to start

00:13:58,449 --> 00:14:02,529
looking at patterns and you know one of

00:14:01,420 --> 00:14:05,339
the things we're talking about is

00:14:02,529 --> 00:14:08,019
sharing that information across

00:14:05,339 --> 00:14:09,190
customers right this is open source code

00:14:08,019 --> 00:14:11,560
foundries open source we're going to

00:14:09,190 --> 00:14:13,810
share this information we're also

00:14:11,560 --> 00:14:15,610
talking about enhancement where there's

00:14:13,810 --> 00:14:17,199
a product called a matching Metron

00:14:15,610 --> 00:14:20,230
anybody familiar with the Metron project

00:14:17,199 --> 00:14:22,959
so what they do is they aggregate known

00:14:20,230 --> 00:14:25,600
bad IP addresses for example right so

00:14:22,959 --> 00:14:28,630
when our data comes in right we add that

00:14:25,600 --> 00:14:32,319
and we learn from that right we can

00:14:28,630 --> 00:14:34,870
create these internal sources as well so

00:14:32,319 --> 00:14:36,339
really for me the clustering of the data

00:14:34,870 --> 00:14:39,209
saying this pattern looks like that

00:14:36,339 --> 00:14:42,639
pattern we should do something about it

00:14:39,209 --> 00:14:46,149
is key and that our DSL library is just

00:14:42,639 --> 00:14:48,310
going to change really based on the

00:14:46,149 --> 00:14:51,550
implementation right of what our

00:14:48,310 --> 00:14:52,750
environment is so this is kind of the

00:14:51,550 --> 00:14:55,269
meta pattern we're gonna look at a

00:14:52,750 --> 00:14:59,050
specific implementation later how we did

00:14:55,269 --> 00:15:04,000
it this first project and then you guys

00:14:59,050 --> 00:15:06,730
could go do it however you want to do so

00:15:04,000 --> 00:15:07,930
ultimately what you're hearing is we

00:15:06,730 --> 00:15:09,850
really need a way to detect and analyze

00:15:07,930 --> 00:15:11,290
running behavior right so we have a lot

00:15:09,850 --> 00:15:12,459
of stuff from static behavior we have

00:15:11,290 --> 00:15:14,829
configuration that type of stuff but

00:15:12,459 --> 00:15:17,560
it's important to detect analyze and

00:15:14,829 --> 00:15:18,940
then actually consistently do something

00:15:17,560 --> 00:15:20,980
with that running behavior in those

00:15:18,940 --> 00:15:22,870
detection and this is the important part

00:15:20,980 --> 00:15:24,579
the reason why so I mean we could do

00:15:22,870 --> 00:15:27,189
something up here and that would be fine

00:15:24,579 --> 00:15:29,320
but really the thing is to have very

00:15:27,189 --> 00:15:32,920
very basic building blocks recipes by

00:15:29,320 --> 00:15:35,770
recipes CFC lye recipes enamel recipes

00:15:32,920 --> 00:15:38,410
that drive infrastructure or you know

00:15:35,770 --> 00:15:40,450
Sdn recipes for a REST API cost and you

00:15:38,410 --> 00:15:42,700
know to see NSX or something like that

00:15:40,450 --> 00:15:44,650
but that's not real meat and potatoes is

00:15:42,700 --> 00:15:46,750
the mean potatoes is being able to run

00:15:44,650 --> 00:15:48,250
that model a thousand ten thousand a

00:15:46,750 --> 00:15:49,840
hundred thousand times to understand

00:15:48,250 --> 00:15:51,820
which of the efficient combinations of

00:15:49,840 --> 00:15:53,800
those recipes so that when we do get

00:15:51,820 --> 00:15:55,030
that runtime behavior and we are able to

00:15:53,800 --> 00:15:57,460
look at what the most efficient way to

00:15:55,030 --> 00:15:59,110
mitigate that is what we what we realize

00:15:57,460 --> 00:16:02,080
is we can get to where we have very very

00:15:59,110 --> 00:16:04,300
very little outages we have a high level

00:16:02,080 --> 00:16:06,910
of reliable predictability and and

00:16:04,300 --> 00:16:08,710
stable responses and this also mitigates

00:16:06,910 --> 00:16:11,350
against you know how many have you had

00:16:08,710 --> 00:16:12,790
junior level operators on your staff and

00:16:11,350 --> 00:16:13,870
then what they thought was the right

00:16:12,790 --> 00:16:15,760
thing you actually made the problem

00:16:13,870 --> 00:16:17,350
worse and so what this does is take some

00:16:15,760 --> 00:16:19,030
of that out of their hands and allows

00:16:17,350 --> 00:16:22,270
you to apply more senior level strategic

00:16:19,030 --> 00:16:24,580
guidance in those and those goals and

00:16:22,270 --> 00:16:26,920
and from an SLA perspective and they'd

00:16:24,580 --> 00:16:29,190
execute that across the environment so

00:16:26,920 --> 00:16:32,820
when we look at the next piece sorry

00:16:29,190 --> 00:16:32,820
somebody is playing with this line

00:16:35,190 --> 00:16:39,790
alright so this is what the project

00:16:37,450 --> 00:16:42,550
actually looked like so the way this is

00:16:39,790 --> 00:16:44,110
set up is we have we used in a section

00:16:42,550 --> 00:16:46,660
because we're on a vSphere piece so that

00:16:44,110 --> 00:16:48,940
we could work with the API string called

00:16:46,660 --> 00:16:51,910
data flow to flow metrics and logs out

00:16:48,940 --> 00:16:54,340
of Cloud Foundry into a hawk the hawk is

00:16:51,910 --> 00:16:55,300
so in a section or Sdn Cloud Foundry

00:16:54,340 --> 00:16:57,520
you're all aware of that's our

00:16:55,300 --> 00:16:58,800
application level adaptations we have

00:16:57,520 --> 00:17:01,540
Bosch which is our infrastructure

00:16:58,800 --> 00:17:02,800
adaptations and then we have the spring

00:17:01,540 --> 00:17:05,260
cloud data flow which allows us to

00:17:02,800 --> 00:17:06,459
real-time insight on the streams so that

00:17:05,260 --> 00:17:08,980
you can deal with it in two different

00:17:06,459 --> 00:17:10,630
ways you can do like an actual right

00:17:08,980 --> 00:17:11,949
there than pin in there threat that you

00:17:10,630 --> 00:17:14,530
can you know run through the stream

00:17:11,949 --> 00:17:18,100
split it off respond to it you know via

00:17:14,530 --> 00:17:20,050
nml or C of CLI or Sdn recipes based on

00:17:18,100 --> 00:17:21,370
the dsls but then you also have long

00:17:20,050 --> 00:17:22,630
term patterns so when we talk about

00:17:21,370 --> 00:17:24,280
something like advanced persistent

00:17:22,630 --> 00:17:26,380
threat the reason why it's so difficult

00:17:24,280 --> 00:17:28,810
is because it's malware it embeds it

00:17:26,380 --> 00:17:30,670
sits there for a month in six months a

00:17:28,810 --> 00:17:31,990
year and then it comes alive and then it

00:17:30,670 --> 00:17:33,400
starts doing stuff on your network so

00:17:31,990 --> 00:17:36,610
you don't it's not that easy to detect

00:17:33,400 --> 00:17:38,380
however what you can do is if you build

00:17:36,610 --> 00:17:40,540
up a month three months a year worth of

00:17:38,380 --> 00:17:41,080
training of data historical data on

00:17:40,540 --> 00:17:43,240
yours and you

00:17:41,080 --> 00:17:44,860
crank those baselines now suddenly as

00:17:43,240 --> 00:17:47,080
soon as that anomalous behavior pops up

00:17:44,860 --> 00:17:49,120
the system recognizes it and says no

00:17:47,080 --> 00:17:51,039
repay this entire thing you know

00:17:49,120 --> 00:17:52,210
shifting an entire environment over to

00:17:51,039 --> 00:17:54,760
something else get rid of the the

00:17:52,210 --> 00:17:56,679
malware threat start a fresh new install

00:17:54,760 --> 00:17:59,740
route everything over connecting the new

00:17:56,679 --> 00:18:02,140
data sources etc so the ability to do

00:17:59,740 --> 00:18:04,630
both real-time analytics and the actual

00:18:02,140 --> 00:18:06,010
long-term with both talk and and the

00:18:04,630 --> 00:18:07,690
Madlib is you know basically we're in

00:18:06,010 --> 00:18:10,210
building models Shawn some talk a little

00:18:07,690 --> 00:18:12,130
bit more about Madlib in hawk in this

00:18:10,210 --> 00:18:13,570
particular side but really that's the

00:18:12,130 --> 00:18:15,340
key here is understanding the two types

00:18:13,570 --> 00:18:24,190
of behaviors you need to deal with most

00:18:15,340 --> 00:18:26,820
versatile environment yeah so Hawk is a

00:18:24,190 --> 00:18:31,630
sequel interface on a Hadoop file system

00:18:26,820 --> 00:18:33,340
right we have a huge people or a huge

00:18:31,630 --> 00:18:37,149
group of people who have sequel skills

00:18:33,340 --> 00:18:39,580
who now have access to this big data and

00:18:37,149 --> 00:18:41,289
it's open source right Madlib is those

00:18:39,580 --> 00:18:44,019
machine learning libraries right we

00:18:41,289 --> 00:18:45,580
continue to run these queries time and

00:18:44,019 --> 00:18:48,399
time again as key said we have our

00:18:45,580 --> 00:18:50,380
training data we can test scenarios

00:18:48,399 --> 00:18:55,059
against that training data to see if our

00:18:50,380 --> 00:18:56,830
DSS would be triggered but again this is

00:18:55,059 --> 00:19:00,250
this is what we did you can go out there

00:18:56,830 --> 00:19:02,610
there's other tools you can use Kafka

00:19:00,250 --> 00:19:06,279
instead of spring dataflow you can use

00:19:02,610 --> 00:19:08,679
Apache Metron you can go out create a

00:19:06,279 --> 00:19:10,720
route service and CF write stream all

00:19:08,679 --> 00:19:11,740
that stuff in through there so the

00:19:10,720 --> 00:19:18,010
traffic doesn't even get to the

00:19:11,740 --> 00:19:19,870
applications ahead of time and yeah the

00:19:18,010 --> 00:19:21,100
only thing we added here that maybe you

00:19:19,870 --> 00:19:23,230
guys don't know anything about it's

00:19:21,100 --> 00:19:27,299
called enamel and it's just a tool that

00:19:23,230 --> 00:19:29,230
we use to automate our cloud foundry

00:19:27,299 --> 00:19:31,870
deployments as well as somewhere other

00:19:29,230 --> 00:19:35,679
deployments and this helps us really

00:19:31,870 --> 00:19:38,649
close the cycle for automation which is

00:19:35,679 --> 00:19:41,730
really important to us to make sure we

00:19:38,649 --> 00:19:41,730
can do this in a repeatable fashion

00:19:44,350 --> 00:19:52,700
so ultimately what we're looking at is

00:19:50,320 --> 00:19:54,770
you could apply the analytics platform

00:19:52,700 --> 00:19:56,870
with every Cloud Foundry instance right

00:19:54,770 --> 00:19:58,910
and what this does give you with the

00:19:56,870 --> 00:20:00,559
analytics pieces over time you get

00:19:58,910 --> 00:20:02,690
repeatable solutions I mean that's what

00:20:00,559 --> 00:20:05,179
we're after repeatable solutions but

00:20:02,690 --> 00:20:08,480
also you win against every customer

00:20:05,179 --> 00:20:10,940
baseline you are able to aggregate sort

00:20:08,480 --> 00:20:12,830
of a foundation of analytics library and

00:20:10,940 --> 00:20:14,540
all of these would be field tested right

00:20:12,830 --> 00:20:16,190
because the real customer solutions that

00:20:14,540 --> 00:20:18,650
dealt with different customer traffic

00:20:16,190 --> 00:20:20,809
patterns so the idea is when you do this

00:20:18,650 --> 00:20:22,640
go back real quick when you do this the

00:20:20,809 --> 00:20:24,590
model sits in MATLAB so it's a generic

00:20:22,640 --> 00:20:25,970
model and you have a set of recipes that

00:20:24,590 --> 00:20:27,980
will grow over time but then that goals

00:20:25,970 --> 00:20:29,690
column and then what ends up happening

00:20:27,980 --> 00:20:31,040
is for a specific customer they're gonna

00:20:29,690 --> 00:20:33,200
have a very unique traffic pattern

00:20:31,040 --> 00:20:35,090
typically so you run that against their

00:20:33,200 --> 00:20:37,700
traffic patterns that model evolves and

00:20:35,090 --> 00:20:40,400
then there's particular goals and SLA is

00:20:37,700 --> 00:20:42,140
then adjust the environment but as a

00:20:40,400 --> 00:20:43,460
whole what you're able to deploy is a

00:20:42,140 --> 00:20:44,900
library that continues to grow bigger

00:20:43,460 --> 00:20:46,220
and bigger and bigger with all the

00:20:44,900 --> 00:20:48,980
different threats that are out there and

00:20:46,220 --> 00:20:50,750
also just in adversity in general let's

00:20:48,980 --> 00:20:53,360
not even talk about cyber first I can

00:20:50,750 --> 00:20:55,220
talk about just network intermittency so

00:20:53,360 --> 00:20:57,110
right now it's very difficult to

00:20:55,220 --> 00:20:58,910
optimize on network intermittency

00:20:57,110 --> 00:21:01,429
because it's so fast and with the human

00:20:58,910 --> 00:21:03,170
in the loop on unag mented you can't

00:21:01,429 --> 00:21:05,179
make decisions that fast like recognize

00:21:03,170 --> 00:21:06,980
that there is intermittency deal with

00:21:05,179 --> 00:21:08,600
the intermittency and then act upon it

00:21:06,980 --> 00:21:10,670
all right so what what ends up happening

00:21:08,600 --> 00:21:12,770
is think of it like a cybernetic suit

00:21:10,670 --> 00:21:14,270
right it's no you and the inside but the

00:21:12,770 --> 00:21:15,860
idea is to have so many probes and

00:21:14,270 --> 00:21:17,660
environmental probes out there that

00:21:15,860 --> 00:21:19,970
you're able to respond with the speed of

00:21:17,660 --> 00:21:21,559
because of the computational assistance

00:21:19,970 --> 00:21:23,059
that you're given in the environment

00:21:21,559 --> 00:21:25,370
itself and when this is really really

00:21:23,059 --> 00:21:27,050
important because now what you can do is

00:21:25,370 --> 00:21:29,000
prioritization algorithms I have

00:21:27,050 --> 00:21:30,590
mission-critical data for a customer and

00:21:29,000 --> 00:21:32,480
non mission-critical data and by

00:21:30,590 --> 00:21:34,130
prioritizing those algorithms having the

00:21:32,480 --> 00:21:36,530
environmental probes being able to

00:21:34,130 --> 00:21:38,540
compute at the speed of computation

00:21:36,530 --> 00:21:40,309
power in the cloud now suddenly we're

00:21:38,540 --> 00:21:41,510
able to make sure the mission curtain if

00:21:40,309 --> 00:21:43,550
the throttle goes way way down

00:21:41,510 --> 00:21:45,740
mission-critical data is still being at

00:21:43,550 --> 00:21:47,150
you know being transmitted from that

00:21:45,740 --> 00:21:49,130
particular customer if you have

00:21:47,150 --> 00:21:50,600
multi-tenancy perhaps you have a pawn

00:21:49,130 --> 00:21:52,040
store in a platinum - your type of

00:21:50,600 --> 00:21:53,030
customer you want to make sure that

00:21:52,040 --> 00:21:54,890
platinum is here when that gets

00:21:53,030 --> 00:21:55,490
throttled because it's not your fault

00:21:54,890 --> 00:21:57,650
you know

00:21:55,490 --> 00:21:59,030
your cyber target but it happens

00:21:57,650 --> 00:22:00,830
nonetheless and so it's to get that

00:21:59,030 --> 00:22:02,480
Platinum to your customer as part of

00:22:00,830 --> 00:22:04,160
their SLA to continue to get their

00:22:02,480 --> 00:22:05,570
mission-critical data out then your

00:22:04,160 --> 00:22:07,250
bronzer has got to sit around so you can

00:22:05,570 --> 00:22:08,809
remediate the cyber problem right and

00:22:07,250 --> 00:22:10,820
then accommodation with both of them

00:22:08,809 --> 00:22:12,500
hopefully you don't have any outages at

00:22:10,820 --> 00:22:17,660
all because your the the platform is

00:22:12,500 --> 00:22:19,880
constantly evolving so our use cases for

00:22:17,660 --> 00:22:21,320
the demo where we kept them basic as you

00:22:19,880 --> 00:22:23,420
can see it's more generic it says

00:22:21,320 --> 00:22:24,860
responding to environmental adversity

00:22:23,420 --> 00:22:26,900
but in our particular case we wanted to

00:22:24,860 --> 00:22:29,120
kind of do some concrete things so we

00:22:26,900 --> 00:22:31,580
have DDoS right recognize the foreign IP

00:22:29,120 --> 00:22:32,330
add an apple to intersects do that you

00:22:31,580 --> 00:22:34,400
know through the API

00:22:32,330 --> 00:22:36,050
pretty simple remediation but you know

00:22:34,400 --> 00:22:38,480
that could take a while today in a

00:22:36,050 --> 00:22:39,770
manual sort of monitoring mode quality

00:22:38,480 --> 00:22:42,170
of service detect the network throughput

00:22:39,770 --> 00:22:43,550
deficiency ad plus up the routes it's

00:22:42,170 --> 00:22:45,559
not exactly adding routes but you know

00:22:43,550 --> 00:22:48,230
you would do some things in terms of the

00:22:45,559 --> 00:22:49,520
NSX piece apt so this is the one where

00:22:48,230 --> 00:22:52,130
it gets a little bit tricky so what you

00:22:49,520 --> 00:22:53,780
do is you recognize that IP loads you

00:22:52,130 --> 00:22:55,670
know some unique signature within your

00:22:53,780 --> 00:22:58,040
environment itself and you can spin up

00:22:55,670 --> 00:23:00,050
an entire new cloud foundation a cloud

00:22:58,040 --> 00:23:02,020
your foundation including you know

00:23:00,050 --> 00:23:04,190
switching over the unisex routes

00:23:02,020 --> 00:23:06,380
including and adding attention to the

00:23:04,190 --> 00:23:08,780
data sources including shelling out that

00:23:06,380 --> 00:23:10,130
old compromised Cloud Foundry so that

00:23:08,780 --> 00:23:10,670
your forensics team can come in and look

00:23:10,130 --> 00:23:12,590
at that

00:23:10,670 --> 00:23:14,540
honeypot that start studying what is

00:23:12,590 --> 00:23:16,160
where the attack is originating from so

00:23:14,540 --> 00:23:18,500
that you can switch from being defensive

00:23:16,160 --> 00:23:19,940
to a more offensive being able to report

00:23:18,500 --> 00:23:21,830
that and have those things be remediated

00:23:19,940 --> 00:23:24,050
by whoever you know handles that

00:23:21,830 --> 00:23:26,090
remediation and then finally details so

00:23:24,050 --> 00:23:27,860
detecting network throughput identify

00:23:26,090 --> 00:23:29,090
best selves throughput you know we heard

00:23:27,860 --> 00:23:31,550
a little bit about Iceland s

00:23:29,090 --> 00:23:33,230
segmentation isolation segmentations so

00:23:31,550 --> 00:23:34,880
as those come online being able to move

00:23:33,230 --> 00:23:37,309
those high priority workloads to those

00:23:34,880 --> 00:23:39,290
isolated segments and and and being able

00:23:37,309 --> 00:23:40,820
to do it like with different types of

00:23:39,290 --> 00:23:43,220
workloads so by being able to

00:23:40,820 --> 00:23:44,900
dynamically control the Sdn piece while

00:23:43,220 --> 00:23:47,510
you're able to do is something like move

00:23:44,900 --> 00:23:48,830
a fin surf workload over who have very

00:23:47,510 --> 00:23:50,840
very different requirements and say

00:23:48,830 --> 00:23:53,240
today's workload on that particular cell

00:23:50,840 --> 00:23:55,550
what ultimately sells VPNs so now you

00:23:53,240 --> 00:23:57,230
can do dynamic service chaining and meet

00:23:55,550 --> 00:23:58,610
the kind of meet the actual compliancy

00:23:57,230 --> 00:24:00,440
pieces that that Finisterre customer

00:23:58,610 --> 00:24:02,390
would have and so now that workload can

00:24:00,440 --> 00:24:04,070
be shifted over it's still secure it

00:24:02,390 --> 00:24:05,870
still meets the compliancy and it got

00:24:04,070 --> 00:24:06,740
away from the threat so basically you're

00:24:05,870 --> 00:24:12,350
out running it

00:24:06,740 --> 00:24:16,270
and there will be no demo so where do we

00:24:12,350 --> 00:24:20,659
go from here a little bit of feature

00:24:16,270 --> 00:24:22,279
yeah sure so why don't you know one of

00:24:20,659 --> 00:24:24,649
the other concepts too I wish you wish

00:24:22,279 --> 00:24:27,049
you had the graphics still up as we

00:24:24,649 --> 00:24:28,820
mentioned DSL right and we mentioned a

00:24:27,049 --> 00:24:29,929
lot of we've been touching on Sdn we

00:24:28,820 --> 00:24:32,299
keep saying in a sex because that was

00:24:29,929 --> 00:24:34,039
just in our development environment all

00:24:32,299 --> 00:24:37,309
those tasks that are being performed all

00:24:34,039 --> 00:24:39,230
the DSL that gets executed as a

00:24:37,309 --> 00:24:40,460
byproduct the analytics detecting

00:24:39,230 --> 00:24:42,260
there's a problem or there's a signature

00:24:40,460 --> 00:24:44,270
for a problem those also feed back to

00:24:42,260 --> 00:24:45,620
the same engine so it's really a loop so

00:24:44,270 --> 00:24:47,029
you're also detecting did that

00:24:45,620 --> 00:24:48,350
corrective action that we just applied

00:24:47,029 --> 00:24:49,549
did it actually have the desired effect

00:24:48,350 --> 00:24:50,740
there's probably one of the missing

00:24:49,549 --> 00:24:52,549
pieces want to make sure that we

00:24:50,740 --> 00:24:54,289
portrayed you guys because this is a

00:24:52,549 --> 00:24:56,090
constant learning engine so it's

00:24:54,289 --> 00:24:57,320
learning did the did the corrective

00:24:56,090 --> 00:25:00,110
measure did the corrective detail

00:24:57,320 --> 00:25:01,399
response for example give me the

00:25:00,110 --> 00:25:02,510
expected result or did it give me an

00:25:01,399 --> 00:25:05,179
adverse result somewhere else that I

00:25:02,510 --> 00:25:07,279
didn't didn't intend on and so to get to

00:25:05,179 --> 00:25:09,830
get that level of sophistication in the

00:25:07,279 --> 00:25:12,799
DSL libs to train the Madlib libraries

00:25:09,830 --> 00:25:14,630
to build that type of pattern for a

00:25:12,799 --> 00:25:16,070
cross-section of customers so that would

00:25:14,630 --> 00:25:17,480
be something usable in other words we

00:25:16,070 --> 00:25:19,309
could give to you guys hey run this in

00:25:17,480 --> 00:25:21,950
your environment you could actually see

00:25:19,309 --> 00:25:23,299
adaptive rules taking place it's

00:25:21,950 --> 00:25:25,370
something that takes time for us to

00:25:23,299 --> 00:25:26,450
validate in actual scenarios right we're

00:25:25,370 --> 00:25:27,620
going to capture those signatures we've

00:25:26,450 --> 00:25:29,059
got to capture those patterns so we have

00:25:27,620 --> 00:25:30,440
to simulate them and so that's something

00:25:29,059 --> 00:25:33,320
we're doing internally a pivotal we have

00:25:30,440 --> 00:25:34,880
a unit called customer zero where we we

00:25:33,320 --> 00:25:37,880
simulate the customer and we simulate

00:25:34,880 --> 00:25:39,470
all sorts of weird have icky things and

00:25:37,880 --> 00:25:41,149
also a lot of things that are that are

00:25:39,470 --> 00:25:42,440
pretty generic and pretty you know

00:25:41,149 --> 00:25:44,210
lowest common denominator the fit most

00:25:42,440 --> 00:25:46,130
of our customers so we're actually

00:25:44,210 --> 00:25:47,390
running this project through the

00:25:46,130 --> 00:25:49,730
customers they're a filter so that we

00:25:47,390 --> 00:25:51,110
can simulate and build that pattern to

00:25:49,730 --> 00:25:52,730
build a library so that we can then

00:25:51,110 --> 00:25:54,529
match them to appropriate DSL that

00:25:52,730 --> 00:25:56,750
actually makes sense for an operator

00:25:54,529 --> 00:25:59,179
because that's at this point in time

00:25:56,750 --> 00:26:00,860
hopefully it's evident that we're

00:25:59,179 --> 00:26:02,179
talking about learning systems so those

00:26:00,860 --> 00:26:03,860
learning systems have to be taught in

00:26:02,179 --> 00:26:05,630
some way and so it's not something that

00:26:03,860 --> 00:26:08,840
an operator could just go to apply today

00:26:05,630 --> 00:26:10,279
and have a preset you know base of

00:26:08,840 --> 00:26:12,110
learning or preset set of knowledge

00:26:10,279 --> 00:26:12,980
inside of their handset of their HDS

00:26:12,110 --> 00:26:14,390
environments something that we're

00:26:12,980 --> 00:26:15,770
training and we're building and that's

00:26:14,390 --> 00:26:17,520
one of the things where we're going for

00:26:15,770 --> 00:26:19,920
now

00:26:17,520 --> 00:26:23,400
so with that said I think we're running

00:26:19,920 --> 00:26:27,570
a little short on time this is probably

00:26:23,400 --> 00:26:29,309
a you know as I said at the outset this

00:26:27,570 --> 00:26:32,190
is these are things your cloud factory

00:26:29,309 --> 00:26:34,980
can do and your environment can do but

00:26:32,190 --> 00:26:37,440
they're not features that the operator

00:26:34,980 --> 00:26:39,240
you know pulling open-source or going to

00:26:37,440 --> 00:26:40,650
piddle and you know running Cloud

00:26:39,240 --> 00:26:42,420
Foundry an elastic runtime for pivotal

00:26:40,650 --> 00:26:43,559
are gonna function out of the box so

00:26:42,420 --> 00:26:46,230
this is definitely something that we're

00:26:43,559 --> 00:26:48,030
building a solution stack around so that

00:26:46,230 --> 00:26:49,350
we can make it something portable and

00:26:48,030 --> 00:26:51,030
deployable that you would lay on top

00:26:49,350 --> 00:26:53,100
every cup you have your Cloud Foundry

00:26:51,030 --> 00:26:54,360
implementation there are a lot of key

00:26:53,100 --> 00:26:55,800
components that we had up there and then

00:26:54,360 --> 00:26:58,020
the slide before that we're building the

00:26:55,800 --> 00:27:00,480
solution based on such as Hauk that are

00:26:58,020 --> 00:27:01,860
sort of lowest common denominator to use

00:27:00,480 --> 00:27:03,420
a term again those are things that we

00:27:01,860 --> 00:27:05,130
would expect to deploy on top of any

00:27:03,420 --> 00:27:06,420
environment but there's also going to be

00:27:05,130 --> 00:27:09,059
some environment specific things like

00:27:06,420 --> 00:27:11,130
the SDN we wouldn't think that everyone

00:27:09,059 --> 00:27:14,550
here in this room is a VMware customer

00:27:11,130 --> 00:27:16,110
and running NSX you know there are other

00:27:14,550 --> 00:27:18,120
topologies out there other ways at which

00:27:16,110 --> 00:27:19,500
with which we could apply DSL that hit

00:27:18,120 --> 00:27:20,970
things at the network layer same thing

00:27:19,500 --> 00:27:22,080
at the highest layer so some of these

00:27:20,970 --> 00:27:24,929
things are going to be extracted and

00:27:22,080 --> 00:27:26,250
definitive DSL maybe dependent on other

00:27:24,929 --> 00:27:27,900
components inside of the environment

00:27:26,250 --> 00:27:30,870
solution so we're working to get that as

00:27:27,900 --> 00:27:32,520
a package thing I'm just going to touch

00:27:30,870 --> 00:27:34,410
briefly on the second point right we

00:27:32,520 --> 00:27:36,660
have we have DevOps everybody know what

00:27:34,410 --> 00:27:40,200
DevOps is right next we're gonna have

00:27:36,660 --> 00:27:42,059
met DevOps that sack DevOps etc etc

00:27:40,200 --> 00:27:46,620
right we want everyone working together

00:27:42,059 --> 00:27:48,780
to optimize the platform and so finally

00:27:46,620 --> 00:27:50,550
I think it's important if you take one

00:27:48,780 --> 00:27:53,100
analogy away from this it's it's like

00:27:50,550 --> 00:27:55,140
this right so today we work very hard to

00:27:53,100 --> 00:27:57,360
make Cloud Foundry bulletproof right so

00:27:55,140 --> 00:27:59,340
well what's harder to destroy than an

00:27:57,360 --> 00:28:02,070
armored vehicle is an armored vehicle

00:27:59,340 --> 00:28:03,540
that moves right and so that's you know

00:28:02,070 --> 00:28:04,679
you first you start with that the three

00:28:03,540 --> 00:28:06,390
hours I don't know how many of you have

00:28:04,679 --> 00:28:08,490
read Justin Smith's about how we can

00:28:06,390 --> 00:28:09,990
repay the entire platform to kind of

00:28:08,490 --> 00:28:11,370
clean slate it but you can't just do

00:28:09,990 --> 00:28:12,750
that every single time there's a threat

00:28:11,370 --> 00:28:15,450
right because it slows things down you

00:28:12,750 --> 00:28:17,880
ddos yourself I mean essentially you're

00:28:15,450 --> 00:28:20,130
down your customer uptime goes way down

00:28:17,880 --> 00:28:21,990
so what's harder than hitting an armored

00:28:20,130 --> 00:28:23,610
target that moves is a armored target

00:28:21,990 --> 00:28:26,160
that moves that has countermeasures that

00:28:23,610 --> 00:28:28,140
attacks back that has these ability to

00:28:26,160 --> 00:28:30,510
suddenly there's a risk there if I

00:28:28,140 --> 00:28:31,380
attack this particular target you know

00:28:30,510 --> 00:28:33,630
I'm going to

00:28:31,380 --> 00:28:35,640
it can come after me it can report

00:28:33,630 --> 00:28:37,799
forensic data and that stuff can be used

00:28:35,640 --> 00:28:39,840
to prosecute the the actual attacker if

00:28:37,799 --> 00:28:41,549
environmental versity same kind of thing

00:28:39,840 --> 00:28:43,169
instead of reacting to it and saying

00:28:41,549 --> 00:28:45,059
please I hope my environment is perfect

00:28:43,169 --> 00:28:47,010
today perfect tomorrow perfect next week

00:28:45,059 --> 00:28:48,750
what you're really saying is I recognize

00:28:47,010 --> 00:28:49,890
it's going to it's going to fail they're

00:28:48,750 --> 00:28:51,600
gonna be outages there's going to be

00:28:49,890 --> 00:28:53,730
these different parts so we deal with H

00:28:51,600 --> 00:28:55,830
a today but what we don't necessarily do

00:28:53,730 --> 00:28:57,630
is how to actually optimize the entire

00:28:55,830 --> 00:28:59,370
environment holistically and I think

00:28:57,630 --> 00:29:00,630
that's the most important pieces that

00:28:59,370 --> 00:29:02,370
we're trying to get to that armored

00:29:00,630 --> 00:29:03,870
vehicle that moves that does defensive

00:29:02,370 --> 00:29:05,850
countermeasures and maybe you one day

00:29:03,870 --> 00:29:07,860
offensive countermeasures to really make

00:29:05,850 --> 00:29:21,450
it hard for for for Cloud Foundry to be

00:29:07,860 --> 00:29:23,190
a target that's it any questions is it

00:29:21,450 --> 00:29:25,770
gonna be built into Cloud Foundry well

00:29:23,190 --> 00:29:28,320
there's a long and arduous process to

00:29:25,770 --> 00:29:30,510
get it accepted by the community but we

00:29:28,320 --> 00:29:34,890
will definitely put our source going out

00:29:30,510 --> 00:29:36,870
there and make it available yeah yeah we

00:29:34,890 --> 00:29:39,980
don't that's why we didn't we're doing

00:29:36,870 --> 00:29:43,280
it any other questions

00:29:39,980 --> 00:29:43,280
the doctor

00:29:45,740 --> 00:29:48,910
[Music]

00:29:50,279 --> 00:29:54,520
well the idea is not to send alerts

00:29:52,539 --> 00:29:56,440
right because most of the alerts are

00:29:54,520 --> 00:29:59,320
ignored right with the ideas to have it

00:29:56,440 --> 00:30:00,820
learn and take action without you and

00:29:59,320 --> 00:30:02,350
remediate without you having to be

00:30:00,820 --> 00:30:04,809
involved right you get an alert if it's

00:30:02,350 --> 00:30:10,330
you know everything's on fire and that's

00:30:04,809 --> 00:30:12,789
see yeah so we tap into the fire hose if

00:30:10,330 --> 00:30:16,059
our demo was working at all you would

00:30:12,789 --> 00:30:18,039
see we go right into the fire hose log

00:30:16,059 --> 00:30:22,690
stream and we pull our metrics from

00:30:18,039 --> 00:30:24,279
there in real time but like Merlin said

00:30:22,690 --> 00:30:26,409
it's not all there today right so we

00:30:24,279 --> 00:30:27,880
need things like additional like a boss

00:30:26,409 --> 00:30:30,309
agent that would be able to monitor

00:30:27,880 --> 00:30:31,929
network traffic pcap data things that

00:30:30,309 --> 00:30:34,090
are cyber related or things that are

00:30:31,929 --> 00:30:36,070
network related for you know for actual

00:30:34,090 --> 00:30:37,809
quality of service pieces so there are a

00:30:36,070 --> 00:30:39,340
lot of things to still do but the idea

00:30:37,809 --> 00:30:41,020
is if you think about it we have

00:30:39,340 --> 00:30:42,880
abstractions at every single layer we

00:30:41,020 --> 00:30:44,710
can drive the infrastructure to do

00:30:42,880 --> 00:30:46,240
things to act but you need that

00:30:44,710 --> 00:30:47,320
intelligence backing right you don't

00:30:46,240 --> 00:30:48,940
want to put everything into the

00:30:47,320 --> 00:30:49,960
environment and then have it manage it

00:30:48,940 --> 00:30:51,850
and then also have it have the

00:30:49,960 --> 00:30:53,679
intelligence so I mean there's

00:30:51,850 --> 00:30:54,850
best-of-breed technologies that are out

00:30:53,679 --> 00:30:56,710
there that can do these type of

00:30:54,850 --> 00:30:58,510
analytics and reasoning and there's

00:30:56,710 --> 00:31:00,340
linkages you know that's you know what

00:30:58,510 --> 00:31:02,110
we did there was linkages between the

00:31:00,340 --> 00:31:04,570
platform and the analytics piece and

00:31:02,110 --> 00:31:05,440
making that sort of a standard solution

00:31:04,570 --> 00:31:07,480
that gets put in front of a customer

00:31:05,440 --> 00:31:09,309
that's what's critical and then you grow

00:31:07,480 --> 00:31:10,809
it over time and you adapt it to you

00:31:09,309 --> 00:31:12,730
know and help you know drive it to their

00:31:10,809 --> 00:31:15,029
particular needs all the customer

00:31:12,730 --> 00:31:15,029
questions

00:31:26,930 --> 00:31:32,250
very simply very very simple like you

00:31:30,510 --> 00:31:33,540
know like latency right looking at some

00:31:32,250 --> 00:31:35,820
things like latency when when

00:31:33,540 --> 00:31:40,470
something's out of the normal thresholds

00:31:35,820 --> 00:31:41,670
things like that pieces of of what was

00:31:40,470 --> 00:31:45,210
the other thing that we did on it was

00:31:41,670 --> 00:31:49,560
the latency and the well for an IP

00:31:45,210 --> 00:31:50,910
source source destination yeah those are

00:31:49,560 --> 00:31:52,740
sort of like those static metrics I was

00:31:50,910 --> 00:31:54,660
talking about before so the the key

00:31:52,740 --> 00:31:56,780
piece here is yes we'll build a first

00:31:54,660 --> 00:32:00,390
initial hey if you see this pattern

00:31:56,780 --> 00:32:02,910
apply this DSL but we're also building a

00:32:00,390 --> 00:32:03,960
this is the expected state after the DSL

00:32:02,910 --> 00:32:05,430
should be applied that I was talking

00:32:03,960 --> 00:32:07,050
about the feedback loop in which the

00:32:05,430 --> 00:32:08,370
system begins to learn did this

00:32:07,050 --> 00:32:11,040
remediation have the desired effect

00:32:08,370 --> 00:32:12,870
based on this fingerprint and so that

00:32:11,040 --> 00:32:14,190
was a very simplistic you know first

00:32:12,870 --> 00:32:15,540
first set we're just looking at things

00:32:14,190 --> 00:32:17,040
to start the learning with you know

00:32:15,540 --> 00:32:18,210
what's the what's the latency on go

00:32:17,040 --> 00:32:19,590
routers what's the latency on the

00:32:18,210 --> 00:32:21,090
physical routers ahead of it what's the

00:32:19,590 --> 00:32:23,280
what's the number of packets being

00:32:21,090 --> 00:32:24,960
pushed through to detected DDoS but did

00:32:23,280 --> 00:32:27,720
we we also had to feed in an expected

00:32:24,960 --> 00:32:29,910
state of after this the the latency

00:32:27,720 --> 00:32:32,220
should go back to a certain medium you

00:32:29,910 --> 00:32:33,720
should have no more packets that aren't

00:32:32,220 --> 00:32:35,070
in a drop state from the origination

00:32:33,720 --> 00:32:36,810
source address of the attacker which

00:32:35,070 --> 00:32:37,890
would be a perimeter thing so you you

00:32:36,810 --> 00:32:39,990
have to tell it what do you have to look

00:32:37,890 --> 00:32:41,850
for at the end of it and determined did

00:32:39,990 --> 00:32:43,650
that remediation actually to achieve the

00:32:41,850 --> 00:32:45,330
desired effect if not what are the

00:32:43,650 --> 00:32:46,440
second set of DSL is what is that

00:32:45,330 --> 00:32:48,180
learning mechanism that you have to

00:32:46,440 --> 00:32:50,010
begin to build into it that's that's

00:32:48,180 --> 00:32:51,840
some other customer zero stuff even the

00:32:50,010 --> 00:32:53,730
one said the other thing that went into

00:32:51,840 --> 00:32:55,500
it is the the product technology that

00:32:53,730 --> 00:32:57,150
was chosen every single thing up there

00:32:55,500 --> 00:33:00,960
was open source everything up there is

00:32:57,150 --> 00:33:02,130
available for you today subdennis X well

00:33:00,960 --> 00:33:03,870
that was because we were working on

00:33:02,130 --> 00:33:06,090
these for everybody but the Sdn API

00:33:03,870 --> 00:33:07,770
right you know open flow whatever those

00:33:06,090 --> 00:33:08,430
other pieces also have the same ability

00:33:07,770 --> 00:33:10,980
to do that

00:33:08,430 --> 00:33:13,020
but what's also important to understand

00:33:10,980 --> 00:33:14,700
is like you know when we put it into

00:33:13,020 --> 00:33:16,470
HDFS cuz that's really what's under the

00:33:14,700 --> 00:33:18,210
hood in that Hadoop distro you know

00:33:16,470 --> 00:33:20,190
you're able to do directed a select

00:33:18,210 --> 00:33:22,170
graph so you can do instant you know

00:33:20,190 --> 00:33:24,060
relationship built I mean there's so

00:33:22,170 --> 00:33:25,980
many things in terms of how you would

00:33:24,060 --> 00:33:27,420
interpret that data that that's the

00:33:25,980 --> 00:33:28,710
biggest thing is getting that data in

00:33:27,420 --> 00:33:30,960
and then start building within the

00:33:28,710 --> 00:33:32,130
foundation it's not a one-off analytic

00:33:30,960 --> 00:33:34,320
it becomes a commune

00:33:32,130 --> 00:33:36,480
analytic this is how we sniff out this

00:33:34,320 --> 00:33:38,550
this is how we do deal with this problem

00:33:36,480 --> 00:33:41,190
the idea is to grow it as a community so

00:33:38,550 --> 00:33:43,050
that that library becomes you know yeah

00:33:41,190 --> 00:33:44,700
we saw that problem nobody else has seen

00:33:43,050 --> 00:33:47,250
that problem yet but we saw that in this

00:33:44,700 --> 00:33:48,990
customer and it's not a customer

00:33:47,250 --> 00:33:51,360
sensitive thing it's more of like how do

00:33:48,990 --> 00:33:53,520
we deal with a DDoS right we're not

00:33:51,360 --> 00:33:55,170
dealing with customer data for that DDoS

00:33:53,520 --> 00:33:57,060
but how do we respond to it and what did

00:33:55,170 --> 00:33:59,040
we see so it's really important to build

00:33:57,060 --> 00:34:00,120
on top of those sort of open schools

00:33:59,040 --> 00:34:02,430
that everybody has already built

00:34:00,120 --> 00:34:03,960
visualizations analytics you know it's

00:34:02,430 --> 00:34:05,040
it's not a new skill so that you have to

00:34:03,960 --> 00:34:06,750
learn in order to get this up and

00:34:05,040 --> 00:34:08,460
running we have a we have an internal a

00:34:06,750 --> 00:34:11,970
pivotal we have an internal Cloud

00:34:08,460 --> 00:34:16,290
Foundry that we can leverage as we move

00:34:11,970 --> 00:34:17,990
forward to test our models right so that

00:34:16,290 --> 00:34:20,990
will be our training in our testing

00:34:17,990 --> 00:34:20,990
ground

00:34:35,850 --> 00:34:40,210
yes so that's that's how you evolve your

00:34:38,620 --> 00:34:41,860
your actual enterprise right so

00:34:40,210 --> 00:34:43,899
absolutely because we're talking about

00:34:41,860 --> 00:34:45,340
the reason why we went from our standard

00:34:43,899 --> 00:34:47,379
nozzle to like something like sprinkle

00:34:45,340 --> 00:34:48,669
dataflow is so that you can split and

00:34:47,379 --> 00:34:50,230
split and split and so that you're

00:34:48,669 --> 00:34:51,940
feeding different different analytics

00:34:50,230 --> 00:34:53,500
for looking for different things like

00:34:51,940 --> 00:34:54,850
today it's not there right we don't have

00:34:53,500 --> 00:34:56,169
that analytic buh what you're talking

00:34:54,850 --> 00:34:58,030
about like five threats at once that are

00:34:56,169 --> 00:34:59,350
all different in characteristics but

00:34:58,030 --> 00:35:00,670
there's no reason that you can't split

00:34:59,350 --> 00:35:02,620
that initial stream coming in that's

00:35:00,670 --> 00:35:05,080
already monitoring your network your

00:35:02,620 --> 00:35:06,520
containers your your VMs everything you

00:35:05,080 --> 00:35:08,500
know the entire all the different layers

00:35:06,520 --> 00:35:09,730
and then streaming those off into the

00:35:08,500 --> 00:35:11,140
different analytics to deal with the

00:35:09,730 --> 00:35:12,640
different problem sets so that you would

00:35:11,140 --> 00:35:13,810
detect those type of things we're gonna

00:35:12,640 --> 00:35:15,400
take one more question because this

00:35:13,810 --> 00:35:24,760
gentleman has his hand up and then grab

00:35:15,400 --> 00:35:27,130
us in the corner if you need to least

00:35:24,760 --> 00:35:31,150
response or kitchen sink depends who you

00:35:27,130 --> 00:35:33,390
ask probably up here the approach we

00:35:31,150 --> 00:35:35,320
were taking is MVP least amount because

00:35:33,390 --> 00:35:37,540
throw in the kitchen sink

00:35:35,320 --> 00:35:39,310
you know that's deciding multiple

00:35:37,540 --> 00:35:42,760
mitigations or multiple remediations for

00:35:39,310 --> 00:35:44,980
one for one signature in one pattern how

00:35:42,760 --> 00:35:46,240
do you know which one actually resolved

00:35:44,980 --> 00:35:48,490
the issue how does the system learn from

00:35:46,240 --> 00:35:51,100
that so the idea is to be is to get

00:35:48,490 --> 00:35:52,780
smaller mediations and does that affect

00:35:51,100 --> 00:35:53,770
this does that give the desired result

00:35:52,780 --> 00:35:55,600
or not the desired state I'm ultimately

00:35:53,770 --> 00:35:57,220
striven by your SLA right I mean

00:35:55,600 --> 00:35:58,780
everything is about what did you sign up

00:35:57,220 --> 00:36:00,190
to what kind of service did you with

00:35:58,780 --> 00:36:01,990
service tier did you sign up for for

00:36:00,190 --> 00:36:03,220
that customer so if you have to throw

00:36:01,990 --> 00:36:04,720
the kitchen sink because you're trying

00:36:03,220 --> 00:36:06,640
to meet that SLA then that's what you do

00:36:04,720 --> 00:36:08,320
now it might be sequential so it's small

00:36:06,640 --> 00:36:11,140
thing at a time but the entire

00:36:08,320 --> 00:36:14,710
remediation process was like 50 small

00:36:11,140 --> 00:36:16,510
steps each one chest did it fixed it

00:36:14,710 --> 00:36:17,980
fixed it affixed but you know that at

00:36:16,510 --> 00:36:19,570
the end of the day it became the kitchen

00:36:17,980 --> 00:36:22,270
sink because that's what was required to

00:36:19,570 --> 00:36:24,190
get you within the thresholds so so

00:36:22,270 --> 00:36:30,249
thank you

00:36:24,190 --> 00:36:30,249

YouTube URL: https://www.youtube.com/watch?v=FbuYhtMtwuI


