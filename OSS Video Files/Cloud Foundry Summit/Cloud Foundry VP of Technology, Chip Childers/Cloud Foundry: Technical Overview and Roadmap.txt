Title: Cloud Foundry: Technical Overview and Roadmap
Publication date: 2016-03-18
Playlist: Cloud Foundry VP of Technology, Chip Childers
Description: 
	The mission of the Cloud Foundry Foundation (CFF), the global standard for open Platform-as-a-Service (PaaS), is to enable a broad, open ecosystem of developer frameworks and application services to make it faster and easier to build, test, deploy, and scale cloud native applications. 

This presentation is a technical overview of Cloud Foundry introducing all of its core components. Speakers will discuss the technical benefits of the platform, highlight the technical direction of the project, and explain the technical focus areas for the next 3-6 months. 

Speakers:
Chip Childers, VP Technology, Cloud Foundry
Chris Ferris, CTO Open Technology, IBM Cloud
Dieu Cao, Cloud Foundry Runtime PMC Lead, Pivotal

For the latest Cloud Foundry webinars, visit www.cloud-council.org/events.
Captions: 
	00:00:06,779 --> 00:00:11,679
hello everyone and welcome to a special

00:00:09,490 --> 00:00:14,230
guest webinar hosted by the cloud

00:00:11,679 --> 00:00:16,539
standards customer council my name is

00:00:14,230 --> 00:00:19,210
Tracy and I am program manager of the

00:00:16,539 --> 00:00:22,990
cscc today we're joined by three

00:00:19,210 --> 00:00:26,170
speakers chip Childers the VP of

00:00:22,990 --> 00:00:29,619
Technology at Cloud Foundry Chris Perez

00:00:26,170 --> 00:00:33,310
who is CTO of open cloud at IBM in UE

00:00:29,619 --> 00:00:35,800
Cal this cloud foundry runtime PMC lead

00:00:33,310 --> 00:00:37,860
at pivotal and they're here to provide a

00:00:35,800 --> 00:00:41,110
technical overview of cloud foundry

00:00:37,860 --> 00:00:44,379
including its core components technical

00:00:41,110 --> 00:00:47,440
benefits and future directions if you'd

00:00:44,379 --> 00:00:50,620
like to download the presentation file

00:00:47,440 --> 00:00:53,739
there's a link to the slide deck it's in

00:00:50,620 --> 00:00:56,769
the chat box of the GoToWebinar toolbar

00:00:53,739 --> 00:00:59,500
and following the webinar will also post

00:00:56,769 --> 00:01:03,370
the presentation and a recording of the

00:00:59,500 --> 00:01:07,630
webcast to the cscc website you can find

00:01:03,370 --> 00:01:09,670
that on our events calendar we'll have

00:01:07,630 --> 00:01:12,310
time for Q&A at the end of the

00:01:09,670 --> 00:01:14,740
presentation so if you'd like to pose a

00:01:12,310 --> 00:01:17,860
question you can use the questions box

00:01:14,740 --> 00:01:19,689
in the GoToWebinar toolbar and with that

00:01:17,860 --> 00:01:24,100
brief introduction I'll turn it over to

00:01:19,689 --> 00:01:27,159
you Chris thanks thanks Tracy welcome

00:01:24,100 --> 00:01:29,710
everyone thanks for dialing in we

00:01:27,159 --> 00:01:35,049
definitely appreciate it and your time

00:01:29,710 --> 00:01:38,470
so back in June I gave a webinar via the

00:01:35,049 --> 00:01:42,430
CSEC with Sam Ramsey who is the CEO of

00:01:38,470 --> 00:01:43,930
the cloud county foundation I'm one of

00:01:42,430 --> 00:01:46,030
the IBM board representatives and we

00:01:43,930 --> 00:01:48,490
gave a high-level overview of Cloud

00:01:46,030 --> 00:01:51,219
Foundry the foundation what its goals

00:01:48,490 --> 00:01:52,360
and objectives are and so forth if

00:01:51,219 --> 00:01:54,340
you're interested in you weren't able to

00:01:52,360 --> 00:01:56,380
catch that particular webinar it's

00:01:54,340 --> 00:02:00,280
actually also hosted at the link that

00:01:56,380 --> 00:02:01,600
Tracy posted in that in the chat but

00:02:00,280 --> 00:02:03,850
what we did was we got a lot of good

00:02:01,600 --> 00:02:05,170
feedback but people wanted to go a

00:02:03,850 --> 00:02:07,570
little bit deeper from a technical

00:02:05,170 --> 00:02:09,580
perspective and so this time I brought

00:02:07,570 --> 00:02:12,430
with me too I think of the best people

00:02:09,580 --> 00:02:14,140
to help provide that perspective of this

00:02:12,430 --> 00:02:16,780
or the deep technical understanding of

00:02:14,140 --> 00:02:17,210
how cloud foundry is put together how it

00:02:16,780 --> 00:02:19,610
works

00:02:17,210 --> 00:02:21,200
and also where we're going from a road

00:02:19,610 --> 00:02:22,670
map perspective with some of the future

00:02:21,200 --> 00:02:25,280
developments that were currently working

00:02:22,670 --> 00:02:27,770
on collaboratively with you know all the

00:02:25,280 --> 00:02:29,450
different members of the foundation so

00:02:27,770 --> 00:02:30,920
I'm going to turn it over initially to

00:02:29,450 --> 00:02:33,740
chip and he's going to go through and

00:02:30,920 --> 00:02:36,440
provide the sort of the technical deeper

00:02:33,740 --> 00:02:38,060
dive on Cloud Foundry and what it's for

00:02:36,440 --> 00:02:40,760
and how it works and so forth and then

00:02:38,060 --> 00:02:42,980
you'ii is going to follow that up with

00:02:40,760 --> 00:02:44,450
an overview of what we're doing from a

00:02:42,980 --> 00:02:49,180
roadmap perspective and then we can have

00:02:44,450 --> 00:02:51,610
some QA so chip all over you at Aston

00:02:49,180 --> 00:02:53,870
thanks so much Chris appreciate it

00:02:51,610 --> 00:02:55,820
before we actually talk about what Cloud

00:02:53,870 --> 00:02:59,150
Foundry is and we will talk about its

00:02:55,820 --> 00:03:02,210
architecture I wanted to try to find a

00:02:59,150 --> 00:03:04,010
way to transition from the discussion

00:03:02,210 --> 00:03:06,170
that Chris and Sam had in the previous

00:03:04,010 --> 00:03:07,700
webinar when they talked a lot about the

00:03:06,170 --> 00:03:08,990
Foundation's goals but I think more

00:03:07,700 --> 00:03:11,390
importantly they talked about plant

00:03:08,990 --> 00:03:13,120
foundries the notion of software that's

00:03:11,390 --> 00:03:16,640
really supporting a movement that's

00:03:13,120 --> 00:03:18,980
around the shift from traditional

00:03:16,640 --> 00:03:20,390
approaches to to businesses operating

00:03:18,980 --> 00:03:22,760
themselves based on the notion of

00:03:20,390 --> 00:03:24,500
sustainable competitive advantage to

00:03:22,760 --> 00:03:26,660
what is really the new business world

00:03:24,500 --> 00:03:28,940
the new business reality which is where

00:03:26,660 --> 00:03:31,760
you have to embrace the concept of

00:03:28,940 --> 00:03:33,860
continuous innovation now continuous

00:03:31,760 --> 00:03:35,990
innovation is an interesting problem for

00:03:33,860 --> 00:03:39,290
businesses but when you think about how

00:03:35,990 --> 00:03:41,180
technology needs to evolve to support

00:03:39,290 --> 00:03:45,290
the need to continuously innovate within

00:03:41,180 --> 00:03:47,150
your organization it leads us to some

00:03:45,290 --> 00:03:49,670
architectural patterns it leads us to a

00:03:47,150 --> 00:03:51,830
set of requirements and it also leads to

00:03:49,670 --> 00:03:54,050
an awful lot of work occurring in the in

00:03:51,830 --> 00:03:56,120
the industry around different platforms

00:03:54,050 --> 00:03:59,510
and technologies that can support that

00:03:56,120 --> 00:04:01,880
transition I think most notably one of

00:03:59,510 --> 00:04:04,760
the one of the clear evolutions that's

00:04:01,880 --> 00:04:07,370
occurring in applications application

00:04:04,760 --> 00:04:09,320
architecture today is the shift from the

00:04:07,370 --> 00:04:11,180
monolithic and layered application thank

00:04:09,320 --> 00:04:14,090
either you know single jar file based

00:04:11,180 --> 00:04:18,049
apps or into your architectures that are

00:04:14,090 --> 00:04:21,650
very in a UI to apple app server to to

00:04:18,049 --> 00:04:24,380
data to your are concentric to one where

00:04:21,650 --> 00:04:26,680
we're we're thinking about the functions

00:04:24,380 --> 00:04:29,419
that exist within each application and

00:04:26,680 --> 00:04:31,009
breaking those apart into micro services

00:04:29,419 --> 00:04:32,479
and then this discrete

00:04:31,009 --> 00:04:35,199
services are able to be where we

00:04:32,479 --> 00:04:38,689
composed and potentially multiple ways

00:04:35,199 --> 00:04:40,490
to let that business deploy different

00:04:38,689 --> 00:04:43,849
applications to maybe mobile devices

00:04:40,490 --> 00:04:46,399
take the same basic logic scale things

00:04:43,849 --> 00:04:48,080
independently so you could support maybe

00:04:46,399 --> 00:04:51,409
industrial internet connections into

00:04:48,080 --> 00:04:53,479
into the services landscape and so this

00:04:51,409 --> 00:04:56,689
this evolution is very very important to

00:04:53,479 --> 00:04:59,749
developers but just as importantly it's

00:04:56,689 --> 00:05:02,059
also causing some desire to think about

00:04:59,749 --> 00:05:03,740
what are the things that you need out of

00:05:02,059 --> 00:05:06,529
your underlying technology to support

00:05:03,740 --> 00:05:07,849
the micro services world things get a

00:05:06,529 --> 00:05:10,789
lot more complex when you're talking

00:05:07,849 --> 00:05:14,029
about many instances of many different

00:05:10,789 --> 00:05:16,610
applications on the other hand it

00:05:14,029 --> 00:05:19,490
actually simplifies quite a lot there to

00:05:16,610 --> 00:05:21,169
there too I think important drivers that

00:05:19,490 --> 00:05:24,169
are worth noting with micro services and

00:05:21,169 --> 00:05:25,729
so one of them is that when you think

00:05:24,169 --> 00:05:29,539
about how you're going to reorganize

00:05:25,729 --> 00:05:31,550
your your business around the finding

00:05:29,539 --> 00:05:33,619
ways to support continuous innovation

00:05:31,550 --> 00:05:35,809
you're going to quickly break teams

00:05:33,619 --> 00:05:36,919
break up your organization into lots of

00:05:35,809 --> 00:05:38,449
small teams that are going to own

00:05:36,919 --> 00:05:40,819
various bits of function within the

00:05:38,449 --> 00:05:42,409
business process now the micro services

00:05:40,819 --> 00:05:45,499
architecture is great because it it

00:05:42,409 --> 00:05:47,269
allows those organizational changes to

00:05:45,499 --> 00:05:49,339
actually be reflected in the software

00:05:47,269 --> 00:05:51,620
itself there's even a law called

00:05:49,339 --> 00:05:54,589
Conway's law that gives you an

00:05:51,620 --> 00:05:55,699
understanding of how organizational

00:05:54,589 --> 00:05:57,949
structures are going to impact

00:05:55,699 --> 00:06:02,180
architecture so if you jump to the next

00:05:57,949 --> 00:06:03,289
slide now Martin Fowler and if you're

00:06:02,180 --> 00:06:05,629
not familiar with him I highly recommend

00:06:03,289 --> 00:06:08,839
you look him up he does a lot of very

00:06:05,629 --> 00:06:11,240
thoughtful writing on various subjects

00:06:08,839 --> 00:06:13,550
around architecture and development

00:06:11,240 --> 00:06:14,990
practices but I one of the things that

00:06:13,550 --> 00:06:18,830
Martin's done CC spent time thinking

00:06:14,990 --> 00:06:20,990
about and what happens when an

00:06:18,830 --> 00:06:23,209
organization takes a micro services

00:06:20,990 --> 00:06:24,379
approach to application development now

00:06:23,209 --> 00:06:26,209
what are the what are the emergent

00:06:24,379 --> 00:06:29,240
requirements that you actually need to

00:06:26,209 --> 00:06:32,599
support here please summarize them as

00:06:29,240 --> 00:06:34,129
the need for rapid provisioning the

00:06:32,599 --> 00:06:36,800
largely we think of this in terms of

00:06:34,129 --> 00:06:38,300
rapid provisioning of the basic

00:06:36,800 --> 00:06:41,449
infrastructure building blocks that are

00:06:38,300 --> 00:06:42,469
necessary for the software itself second

00:06:41,449 --> 00:06:44,960
you have to have some level of basic

00:06:42,469 --> 00:06:48,590
monitoring I broaden this one a bit

00:06:44,960 --> 00:06:51,199
I really think of it as a basic level of

00:06:48,590 --> 00:06:52,639
operability so what happens on day two

00:06:51,199 --> 00:06:54,380
after the applications are being

00:06:52,639 --> 00:06:56,210
deployed you need to monitor them you

00:06:54,380 --> 00:06:58,729
need to get strong telemetry you need to

00:06:56,210 --> 00:07:00,889
be able to trace transactions through a

00:06:58,729 --> 00:07:02,630
more complex and distributed system but

00:07:00,889 --> 00:07:05,240
you also need to be able to ensure that

00:07:02,630 --> 00:07:06,710
there's going to be automated health

00:07:05,240 --> 00:07:08,630
checks that are going to care and feed

00:07:06,710 --> 00:07:11,060
for the system what's been deployed so

00:07:08,630 --> 00:07:13,669
it's basic operability the third was

00:07:11,060 --> 00:07:15,349
rapid application deployment now that's

00:07:13,669 --> 00:07:16,520
we'll spend a little bit more time in

00:07:15,349 --> 00:07:19,220
that minute but that's really where

00:07:16,520 --> 00:07:22,190
Cloud Foundry shines I foundries focused

00:07:19,220 --> 00:07:25,039
on taking code and turning it into a

00:07:22,190 --> 00:07:27,830
running application and making that a

00:07:25,039 --> 00:07:30,470
very smooth process and the last is

00:07:27,830 --> 00:07:33,410
DevOps culture or you could broaden that

00:07:30,470 --> 00:07:37,639
and say the appropriate organizational

00:07:33,410 --> 00:07:41,389
structures and practices that allow for

00:07:37,639 --> 00:07:44,120
a seamless flow of application both new

00:07:41,389 --> 00:07:46,550
and application changes into production

00:07:44,120 --> 00:07:49,310
environments and to really create strong

00:07:46,550 --> 00:07:51,880
feedback loops that allow for you to use

00:07:49,310 --> 00:07:54,139
the deployed environment as a way to

00:07:51,880 --> 00:07:56,930
actually sense and then feed back into

00:07:54,139 --> 00:07:58,310
the developers very very quickly so

00:07:56,930 --> 00:08:02,750
that's what Martin believes are kind of

00:07:58,310 --> 00:08:04,159
the emergent requirement next line now

00:08:02,750 --> 00:08:08,090
there's there's another way to think

00:08:04,159 --> 00:08:10,099
about the the applications themselves so

00:08:08,090 --> 00:08:12,139
if you were to tear apart a micro

00:08:10,099 --> 00:08:14,030
servers you're likely to think about the

00:08:12,139 --> 00:08:16,789
service itself is having potentially two

00:08:14,030 --> 00:08:19,490
different components at the top you have

00:08:16,789 --> 00:08:21,800
the logic and the the API surface area

00:08:19,490 --> 00:08:23,990
of that microservice and underneath that

00:08:21,800 --> 00:08:25,880
you'll have some level of data services

00:08:23,990 --> 00:08:28,490
potentially it's just persistence or it

00:08:25,880 --> 00:08:31,130
could only be communicating with other

00:08:28,490 --> 00:08:33,469
micro services but for that top layer

00:08:31,130 --> 00:08:35,510
what would Heroku did back when they

00:08:33,469 --> 00:08:37,219
first rolled out was they spent some

00:08:35,510 --> 00:08:39,349
time codifying some of the best

00:08:37,219 --> 00:08:43,190
practices that they believed were

00:08:39,349 --> 00:08:46,370
appropriate for a micro services driven

00:08:43,190 --> 00:08:50,540
approach to two applications and they've

00:08:46,370 --> 00:08:54,020
listed those as 12 different factors or

00:08:50,540 --> 00:08:56,060
12 different of basic premises that you

00:08:54,020 --> 00:08:58,279
need to think about as you're designing

00:08:56,060 --> 00:09:05,730
your application next slide

00:08:58,279 --> 00:09:06,839
a good summary

00:09:05,730 --> 00:09:08,579
the twelve factor model though is to

00:09:06,839 --> 00:09:10,589
really look at these these five basic

00:09:08,579 --> 00:09:11,940
bullets and each one of them is really

00:09:10,589 --> 00:09:13,380
important when you think about how

00:09:11,940 --> 00:09:15,149
you're designing your applications to

00:09:13,380 --> 00:09:16,949
run on a platform like Cloud Foundry or

00:09:15,149 --> 00:09:19,620
even if you're going to use some sort of

00:09:16,949 --> 00:09:21,949
bespoke platform you're still going to

00:09:19,620 --> 00:09:24,089
want to find ways to think about

00:09:21,949 --> 00:09:25,440
declarative formats for any of the

00:09:24,089 --> 00:09:27,149
automation that you're going to put in

00:09:25,440 --> 00:09:29,790
place now when you're working with a

00:09:27,149 --> 00:09:32,519
platform that declarative format is is

00:09:29,790 --> 00:09:34,350
simply the ability to tell the platform

00:09:32,519 --> 00:09:37,320
what you want to exist and trust that

00:09:34,350 --> 00:09:38,519
it's going to occur for a second you

00:09:37,320 --> 00:09:39,779
want have a clean contract with the

00:09:38,519 --> 00:09:42,120
underlying operating system that's

00:09:39,779 --> 00:09:44,149
really important because the idea is

00:09:42,120 --> 00:09:46,350
that you're you're going to have

00:09:44,149 --> 00:09:48,360
application code that's tightly

00:09:46,350 --> 00:09:49,860
interwoven with specific features of an

00:09:48,360 --> 00:09:51,839
operating system and configurations of

00:09:49,860 --> 00:09:53,190
an operating system is dangerous and

00:09:51,839 --> 00:09:56,100
that's where you get a lot of drift

00:09:53,190 --> 00:09:59,880
between various environments the third

00:09:56,100 --> 00:10:03,810
is focusing on modern cloud platform is

00:09:59,880 --> 00:10:05,579
the deployment target that goes back to

00:10:03,810 --> 00:10:06,750
Martin's point about rapid provisioning

00:10:05,579 --> 00:10:08,220
when you think about the infrastructure

00:10:06,750 --> 00:10:09,690
that you need that's what the modern

00:10:08,220 --> 00:10:12,449
cloud platforms are providing for you

00:10:09,690 --> 00:10:15,000
you want to be able to enable the

00:10:12,449 --> 00:10:17,190
application developers and app operators

00:10:15,000 --> 00:10:18,899
to really not have to be concerned with

00:10:17,190 --> 00:10:20,970
any of the physical infrastructure data

00:10:18,899 --> 00:10:23,579
center concerns they really need to be

00:10:20,970 --> 00:10:25,440
able to say here's the code here's the

00:10:23,579 --> 00:10:28,079
architecture of that application here

00:10:25,440 --> 00:10:29,579
the backend services I need for it and

00:10:28,079 --> 00:10:32,639
not be concerned with any of the

00:10:29,579 --> 00:10:35,250
provisioning requirements their fourth

00:10:32,639 --> 00:10:38,339
minimizing divergence between dev and

00:10:35,250 --> 00:10:40,800
production the Cloud Foundry perspective

00:10:38,339 --> 00:10:42,810
is that your dev environment your

00:10:40,800 --> 00:10:44,310
staging environment QA environment the

00:10:42,810 --> 00:10:47,459
production environment they should all

00:10:44,310 --> 00:10:49,980
be the same with perhaps the only

00:10:47,459 --> 00:10:53,339
difference being the scale that's being

00:10:49,980 --> 00:10:55,490
applied to each when you have no

00:10:53,339 --> 00:10:59,760
divergence between those environments

00:10:55,490 --> 00:11:01,889
one of the major issues with manual

00:10:59,760 --> 00:11:03,779
provisioning or you know the traditional

00:11:01,889 --> 00:11:05,490
approach to application deployment and

00:11:03,779 --> 00:11:08,639
the need for heavy change control

00:11:05,490 --> 00:11:10,410
procedures is really obviated you solve

00:11:08,639 --> 00:11:13,139
for a lot of problems by being very

00:11:10,410 --> 00:11:16,260
clear that the dev through prod pipeline

00:11:13,139 --> 00:11:17,550
is consistent and last you have to be

00:11:16,260 --> 00:11:19,560
able to scale up without significant

00:11:17,550 --> 00:11:22,770
changes toiling the architecture and

00:11:19,560 --> 00:11:24,779
that really is very very much

00:11:22,770 --> 00:11:28,830
intertwined with the idea that you want

00:11:24,779 --> 00:11:32,730
the application code to have a very

00:11:28,830 --> 00:11:34,080
clean way to think about the back-end

00:11:32,730 --> 00:11:36,600
data services that it's going to work

00:11:34,080 --> 00:11:38,190
with you want to be able to separate the

00:11:36,600 --> 00:11:39,570
deployment of those data services from

00:11:38,190 --> 00:11:40,860
the deployment of the code you would

00:11:39,570 --> 00:11:43,500
like to be able to scale that code

00:11:40,860 --> 00:11:46,230
horizontally or skis both scale it up as

00:11:43,500 --> 00:11:51,540
well as scaling it down as need needs

00:11:46,230 --> 00:11:53,190
demand next slide and even that's not

00:11:51,540 --> 00:11:55,080
enough there's actually quite a lot of

00:11:53,190 --> 00:11:57,720
additional things that that you need to

00:11:55,080 --> 00:12:01,200
think through when you consider how

00:11:57,720 --> 00:12:02,820
you're going to run these micro services

00:12:01,200 --> 00:12:04,920
in an enterprise based environment

00:12:02,820 --> 00:12:06,480
that's where things like role based

00:12:04,920 --> 00:12:08,370
access control to the various resources

00:12:06,480 --> 00:12:11,670
do you are you able to map and

00:12:08,370 --> 00:12:14,460
organizations let's say compliance

00:12:11,670 --> 00:12:17,339
controls effectively to the platform can

00:12:14,460 --> 00:12:18,690
you trust that I'm day to the

00:12:17,339 --> 00:12:20,850
application you deployed is still

00:12:18,690 --> 00:12:23,490
running there's there's a lot of details

00:12:20,850 --> 00:12:25,290
behind each one of these but they're

00:12:23,490 --> 00:12:27,570
really just trying to make the point

00:12:25,290 --> 00:12:29,130
that it's not enough to even just think

00:12:27,570 --> 00:12:30,480
about the application from the developer

00:12:29,130 --> 00:12:36,120
standpoint really there's a day to

00:12:30,480 --> 00:12:41,670
operational story as well next slide and

00:12:36,120 --> 00:12:44,100
now containers are an amazing amazing

00:12:41,670 --> 00:12:47,310
phenomenon right now in the industry now

00:12:44,100 --> 00:12:49,860
the the use of Linux kernel features and

00:12:47,310 --> 00:12:54,589
making them very making it very easy to

00:12:49,860 --> 00:12:57,060
think about isolation and name spacing

00:12:54,589 --> 00:12:59,460
resource you know resource isolation

00:12:57,060 --> 00:13:01,470
within a deployed server that you're

00:12:59,460 --> 00:13:02,850
going to be pushing code into making

00:13:01,470 --> 00:13:04,650
that very user friendly that are

00:13:02,850 --> 00:13:06,750
important but there really aren't the

00:13:04,650 --> 00:13:08,040
whole answer now cloud battery does make

00:13:06,750 --> 00:13:10,950
use of containers within its

00:13:08,040 --> 00:13:13,200
architecture we have and we'll talk

00:13:10,950 --> 00:13:14,790
about this a bit in the in the roadmap

00:13:13,200 --> 00:13:18,360
discussion and perhaps through some of

00:13:14,790 --> 00:13:20,220
the questions but containers really are

00:13:18,360 --> 00:13:22,830
an ingredient to our larger platform and

00:13:20,220 --> 00:13:24,209
they're really not enough you do have to

00:13:22,830 --> 00:13:26,760
have a system that's going to think

00:13:24,209 --> 00:13:28,709
about both the upfront process of

00:13:26,760 --> 00:13:31,440
getting from code to a running

00:13:28,709 --> 00:13:34,400
application and what happens on day two

00:13:31,440 --> 00:13:34,400
next

00:13:36,470 --> 00:13:41,190
we described cloud founder as being a

00:13:38,880 --> 00:13:43,290
cloud native application platform and

00:13:41,190 --> 00:13:48,900
that really is fundamentally what we're

00:13:43,290 --> 00:13:50,970
about go to the next slide but there's a

00:13:48,900 --> 00:13:53,100
lot of platforms that are out there we

00:13:50,970 --> 00:13:55,080
clearly have infrastructure as a service

00:13:53,100 --> 00:13:57,540
that went through a fairly significant

00:13:55,080 --> 00:13:59,160
hype cycle it's incredibly important

00:13:57,540 --> 00:14:02,190
that in structuring the service exists

00:13:59,160 --> 00:14:03,720
it's it's very especially for when we

00:14:02,190 --> 00:14:06,270
think about those requirements the rapid

00:14:03,720 --> 00:14:07,980
provisioning that needs to be there but

00:14:06,270 --> 00:14:09,540
the application developers needs are a

00:14:07,980 --> 00:14:11,180
little bit different the app dev is

00:14:09,540 --> 00:14:13,860
focused on the faster time-to-market

00:14:11,180 --> 00:14:16,530
they need to be able to deal with

00:14:13,860 --> 00:14:17,790
iteration quickly they'd like to

00:14:16,530 --> 00:14:20,130
leverage a lot of open source software

00:14:17,790 --> 00:14:21,660
and then application operators really

00:14:20,130 --> 00:14:23,040
are the ones who then take that work of

00:14:21,660 --> 00:14:24,660
the developer and they need to be able

00:14:23,040 --> 00:14:26,870
to continuously deliver the software out

00:14:24,660 --> 00:14:28,950
of the production their needs are

00:14:26,870 --> 00:14:30,980
similar you know if you think about what

00:14:28,950 --> 00:14:32,610
IT operations might want out of a

00:14:30,980 --> 00:14:34,410
infrastructure it's a service platform

00:14:32,610 --> 00:14:36,780
and what application operations might

00:14:34,410 --> 00:14:38,450
want out of an app platform the needs of

00:14:36,780 --> 00:14:42,060
similar when you talk about things like

00:14:38,450 --> 00:14:44,370
flexibility and agility but the actual

00:14:42,060 --> 00:14:49,620
artifacts that are being moved are very

00:14:44,370 --> 00:14:51,480
distinct next line so I mentioned

00:14:49,620 --> 00:14:53,250
earlier the cloud founders primary goal

00:14:51,480 --> 00:14:54,990
for the app developer the application

00:14:53,250 --> 00:14:56,370
owners being able to take the artifacts

00:14:54,990 --> 00:14:57,810
that are produced from the software

00:14:56,370 --> 00:14:59,940
development process and turn it into

00:14:57,810 --> 00:15:01,800
that running application there's a lot

00:14:59,940 --> 00:15:03,720
of complexity built into that but there

00:15:01,800 --> 00:15:05,850
doesn't need to be for the user you

00:15:03,720 --> 00:15:08,460
should vary you should be able to say

00:15:05,850 --> 00:15:10,080
here's the coast here the dependencies

00:15:08,460 --> 00:15:12,330
that we have this is the build system

00:15:10,080 --> 00:15:15,270
that we're using whether that be maven

00:15:12,330 --> 00:15:19,100
for a java project and then you know

00:15:15,270 --> 00:15:21,510
what what is the what is the

00:15:19,100 --> 00:15:23,190
architecture that I need when it's

00:15:21,510 --> 00:15:25,230
running in production what is the

00:15:23,190 --> 00:15:27,870
back-end data service do I need that I

00:15:25,230 --> 00:15:30,450
need do I need a message broker do i

00:15:27,870 --> 00:15:32,700
need a relational database how our user

00:15:30,450 --> 00:15:34,380
is going to access the the app once it's

00:15:32,700 --> 00:15:36,300
running these are all very very

00:15:34,380 --> 00:15:38,310
important things to understand and it's

00:15:36,300 --> 00:15:44,920
what Cloud Foundry is aiming to make

00:15:38,310 --> 00:15:46,750
very simple for you next slide so

00:15:44,920 --> 00:15:49,209
is a question unit of value that I

00:15:46,750 --> 00:15:50,800
brought up a little bit earlier and with

00:15:49,209 --> 00:15:52,839
infrastructure as a service that unit of

00:15:50,800 --> 00:15:55,450
value is the virtual machine right very

00:15:52,839 --> 00:15:56,620
clearly VMs or what most people think

00:15:55,450 --> 00:15:59,050
about when you when you talk about

00:15:56,620 --> 00:16:01,720
deploying on a cloud infrastructure

00:15:59,050 --> 00:16:03,010
platform you're you're asking for

00:16:01,720 --> 00:16:05,800
virtual machine you're asking for

00:16:03,010 --> 00:16:07,779
specific operating system you're having

00:16:05,800 --> 00:16:10,000
to then think about how you're going to

00:16:07,779 --> 00:16:12,610
attach maybe configuration management to

00:16:10,000 --> 00:16:14,019
push code into that into that virtual

00:16:12,610 --> 00:16:15,459
machine or into a collection of virtual

00:16:14,019 --> 00:16:17,470
machines there's a lot of coordination

00:16:15,459 --> 00:16:19,540
that really has to happen and it only

00:16:17,470 --> 00:16:22,000
gets you so far now for an application

00:16:19,540 --> 00:16:24,850
platform that unit of value is the app

00:16:22,000 --> 00:16:27,250
itself things details like containers

00:16:24,850 --> 00:16:30,660
are actually transparent you're you're

00:16:27,250 --> 00:16:33,579
thinking about the life cycle of the app

00:16:30,660 --> 00:16:35,470
you're focusing on describing the app

00:16:33,579 --> 00:16:37,630
architecture in a very declarative way I

00:16:35,470 --> 00:16:39,790
even take this a little bit a little bit

00:16:37,630 --> 00:16:42,010
further and say that need the true unit

00:16:39,790 --> 00:16:46,329
of value of a cloud native application

00:16:42,010 --> 00:16:50,640
platform is the velocity with win with

00:16:46,329 --> 00:16:53,620
which an organization is able to push

00:16:50,640 --> 00:16:54,940
changes to its applications because

00:16:53,620 --> 00:16:57,130
that's how you actually get to that

00:16:54,940 --> 00:16:58,740
notion of continuous innovation and you

00:16:57,130 --> 00:17:04,880
get the business value that you need

00:16:58,740 --> 00:17:07,430
next line I've been mentioning

00:17:04,880 --> 00:17:09,800
repeatedly it's always important to step

00:17:07,430 --> 00:17:12,829
back and remember that the applications

00:17:09,800 --> 00:17:15,170
have a life cycle some of them live for

00:17:12,829 --> 00:17:16,730
years and years and years but they do in

00:17:15,170 --> 00:17:18,079
fact have this life cycle where you need

00:17:16,730 --> 00:17:20,690
to start with the notion of building

00:17:18,079 --> 00:17:22,339
make sure that it's easy to do Cloud

00:17:20,690 --> 00:17:23,690
Foundry can do things like auto detect

00:17:22,339 --> 00:17:26,209
the framework or the language that

00:17:23,690 --> 00:17:29,120
you're working on it needs to be able to

00:17:26,209 --> 00:17:31,400
very easily then be pushed out in its

00:17:29,120 --> 00:17:33,890
first release you then need to be able

00:17:31,400 --> 00:17:35,990
to scale it you need to integrate have

00:17:33,890 --> 00:17:38,330
integrated high availability and health

00:17:35,990 --> 00:17:39,800
monitoring you need to limit Orion to

00:17:38,330 --> 00:17:43,880
the app you need blog aggregation and

00:17:39,800 --> 00:17:47,090
monitoring policy enough and different

00:17:43,880 --> 00:17:48,860
author oles to to access it and then

00:17:47,090 --> 00:17:50,780
there's the things like once you're

00:17:48,860 --> 00:17:52,760
going to update that application how do

00:17:50,780 --> 00:17:55,280
you do a B version how do you do rolling

00:17:52,760 --> 00:17:57,830
upgrades there are patterns that are

00:17:55,280 --> 00:18:00,290
well established now for microservices

00:17:57,830 --> 00:18:02,300
deployments on things like a canary no

00:18:00,290 --> 00:18:05,630
deployment where you'll roll out a new

00:18:02,300 --> 00:18:07,610
version of that application service in a

00:18:05,630 --> 00:18:09,230
very limited way to confirm that you

00:18:07,610 --> 00:18:11,570
actually have an impact with the overall

00:18:09,230 --> 00:18:13,430
system and then once you've kind of let

00:18:11,570 --> 00:18:14,980
that canary node sit there and you're

00:18:13,430 --> 00:18:17,840
sure that its operating effectively

00:18:14,980 --> 00:18:19,070
you're able to then continue the rollout

00:18:17,840 --> 00:18:21,200
and the rest of the environment gets

00:18:19,070 --> 00:18:23,870
updated with the latest version and all

00:18:21,200 --> 00:18:25,340
of that requires some thought and see

00:18:23,870 --> 00:18:30,690
how fans to make that as simple as

00:18:25,340 --> 00:18:32,550
possible excellent so this is the

00:18:30,690 --> 00:18:35,310
the i guess i call it the market

00:18:32,550 --> 00:18:40,290
textured for cloud foundry let's take a

00:18:35,310 --> 00:18:43,380
look at this bottom-up infrastructure so

00:18:40,290 --> 00:18:46,080
the CF premise is that we support many

00:18:43,380 --> 00:18:49,200
different types of infrastructure with

00:18:46,080 --> 00:18:51,240
IBM obviously you'll be running on the

00:18:49,200 --> 00:18:52,710
bluemix platform there's an

00:18:51,240 --> 00:18:54,360
infrastructure as a service component to

00:18:52,710 --> 00:18:56,820
that that's that's how much on being

00:18:54,360 --> 00:18:58,470
able to be deployed for you there are

00:18:56,820 --> 00:19:00,630
other options with the open source cloud

00:18:58,470 --> 00:19:03,300
founder itself going to other platforms

00:19:00,630 --> 00:19:05,190
like Amazon really any OpenStack or

00:19:03,300 --> 00:19:06,800
VMware environment and it's an

00:19:05,190 --> 00:19:09,480
extensible architecture that allows

00:19:06,800 --> 00:19:13,620
organizations to add cloud provider

00:19:09,480 --> 00:19:14,730
interfaces for different I as ap is now

00:19:13,620 --> 00:19:17,280
going all the way back up to the top

00:19:14,730 --> 00:19:20,220
think about the end users now we're

00:19:17,280 --> 00:19:21,540
seeing the majority of applications that

00:19:20,220 --> 00:19:23,250
typically get deployed into cloud

00:19:21,540 --> 00:19:25,860
foundry environments are going to be

00:19:23,250 --> 00:19:27,510
web-based or they're going to be mobile

00:19:25,860 --> 00:19:29,250
backends that that tends to be the

00:19:27,510 --> 00:19:33,000
majority of use cases but there's an

00:19:29,250 --> 00:19:35,970
increasing number of organizations that

00:19:33,000 --> 00:19:38,280
are using cloud foundry environments to

00:19:35,970 --> 00:19:40,860
support industrial Internet applications

00:19:38,280 --> 00:19:42,570
and those industrial Internet

00:19:40,860 --> 00:19:44,820
applications are are interesting because

00:19:42,570 --> 00:19:46,740
we're seeing a change from embedded

00:19:44,820 --> 00:19:48,690
systems working based on legacy

00:19:46,740 --> 00:19:51,180
protocols to ones where they were coming

00:19:48,690 --> 00:19:53,880
a lot smarter they're becoming part of

00:19:51,180 --> 00:19:55,440
the the web effectively which means

00:19:53,880 --> 00:19:57,030
they're communicating much the same way

00:19:55,440 --> 00:19:58,530
that browsers and mobile devices are

00:19:57,030 --> 00:20:01,380
communicating and so you can get this

00:19:58,530 --> 00:20:03,950
consistency across your architecture

00:20:01,380 --> 00:20:06,840
regardless of what that usage might be

00:20:03,950 --> 00:20:08,330
now within cloud foundry you can think

00:20:06,840 --> 00:20:10,440
of it really in three different layers

00:20:08,330 --> 00:20:12,590
at the bottom we have the concept of

00:20:10,440 --> 00:20:16,020
operations right operations is critical

00:20:12,590 --> 00:20:18,150
we we we know that you need things like

00:20:16,020 --> 00:20:20,310
logging you need to be able to scale the

00:20:18,150 --> 00:20:22,680
platform you need to just be able to

00:20:20,310 --> 00:20:25,140
deploy Cloud Foundry itself which is a

00:20:22,680 --> 00:20:26,730
complex distributed system made up of

00:20:25,140 --> 00:20:28,470
multiple microservices and so that

00:20:26,730 --> 00:20:31,440
should be as easy as possible and it

00:20:28,470 --> 00:20:32,850
should also sustain itself and sustain

00:20:31,440 --> 00:20:36,330
the applications that have been deployed

00:20:32,850 --> 00:20:38,880
on it now above that are the services

00:20:36,330 --> 00:20:40,980
this is where the code that you write

00:20:38,880 --> 00:20:42,900
needs to rely on some type of service

00:20:40,980 --> 00:20:44,610
and and the foundation has some what we

00:20:42,900 --> 00:20:47,670
call core services in it but

00:20:44,610 --> 00:20:49,140
my sequel or the rice es implementation

00:20:47,670 --> 00:20:52,320
there are others that are incubating

00:20:49,140 --> 00:20:54,390
right now each one of the providers and

00:20:52,320 --> 00:20:56,520
vendors that is offering a cloud foundry

00:20:54,390 --> 00:20:59,250
distribution or service is going to

00:20:56,520 --> 00:21:01,710
bring a lot of additional services to to

00:20:59,250 --> 00:21:04,110
developers you know the best example

00:21:01,710 --> 00:21:06,780
with bluemix that I love to use is the

00:21:04,110 --> 00:21:08,640
integration with lots of machine

00:21:06,780 --> 00:21:11,910
learning is something that that you can

00:21:08,640 --> 00:21:14,549
now all take advantage of and it's very

00:21:11,910 --> 00:21:17,520
provider specific and then you have the

00:21:14,549 --> 00:21:19,820
user provided service instances this is

00:21:17,520 --> 00:21:21,750
a powerful function that will allow

00:21:19,820 --> 00:21:23,150
especially if you're if you're in an

00:21:21,750 --> 00:21:25,679
enterprise and you have some legacy

00:21:23,150 --> 00:21:27,360
environments that are already running

00:21:25,679 --> 00:21:29,220
it's unlikely you're going to go take

00:21:27,360 --> 00:21:31,590
some legacy application and completely

00:21:29,220 --> 00:21:34,470
tear it apart the best pattern there

00:21:31,590 --> 00:21:36,270
tends to be add AP itís odds in front of

00:21:34,470 --> 00:21:38,520
the legacy applications and then expose

00:21:36,270 --> 00:21:40,799
those to the new acts that are being

00:21:38,520 --> 00:21:42,179
built within a cloud foundry environment

00:21:40,799 --> 00:21:45,330
and user provided services can help

00:21:42,179 --> 00:21:46,919
support that and the last layer is the

00:21:45,330 --> 00:21:49,890
elastic runtime this is where those 12

00:21:46,919 --> 00:21:52,080
factor applications get deployed really

00:21:49,890 --> 00:21:54,990
any type of application web based access

00:21:52,080 --> 00:21:56,280
to it there's a lot of intelligence

00:21:54,990 --> 00:21:58,650
build into our platform around

00:21:56,280 --> 00:22:01,140
identifying starting with the code

00:21:58,650 --> 00:22:04,049
identifying how to build pull in

00:22:01,140 --> 00:22:06,690
dependencies package containerized and

00:22:04,049 --> 00:22:13,790
then run as well as monitor those apps

00:22:06,690 --> 00:22:16,559
for you next slide now coming up in

00:22:13,790 --> 00:22:17,970
later this year the cloud fenders

00:22:16,559 --> 00:22:20,990
foundation is going to be announcing the

00:22:17,970 --> 00:22:22,919
first of what we believe will be several

00:22:20,990 --> 00:22:25,710
certification programs that are really

00:22:22,919 --> 00:22:28,470
aimed at helping users of cloud fabric

00:22:25,710 --> 00:22:31,410
products and services that the first one

00:22:28,470 --> 00:22:33,540
will be what we call CF core and see if

00:22:31,410 --> 00:22:35,580
cord is fundamentally about saying that

00:22:33,540 --> 00:22:38,340
a an online service that you might go

00:22:35,580 --> 00:22:40,080
use or a distribution of software that

00:22:38,340 --> 00:22:43,770
it's based on Cloud Foundry that you'd

00:22:40,080 --> 00:22:45,900
like to go use if it's certified will be

00:22:43,770 --> 00:22:48,330
known to come from a specific release

00:22:45,900 --> 00:22:50,460
that the foundation has made across all

00:22:48,330 --> 00:22:52,800
of our projects a coordinated release if

00:22:50,460 --> 00:22:55,740
you were but we're also thinking about

00:22:52,800 --> 00:22:58,200
the user experience as you as you use

00:22:55,740 --> 00:23:00,390
more and more of this on you're going

00:22:58,200 --> 00:23:02,550
rely on services you're going to rely on

00:23:00,390 --> 00:23:05,340
plugins that might tie the logging

00:23:02,550 --> 00:23:07,230
framework and the Foundation's going to

00:23:05,340 --> 00:23:10,800
serve as both a home to many of these

00:23:07,230 --> 00:23:13,380
extension points as well as we're going

00:23:10,800 --> 00:23:15,060
to work with work with organizations

00:23:13,380 --> 00:23:16,860
that might not have an open source

00:23:15,060 --> 00:23:18,390
implementation of the service broker and

00:23:16,860 --> 00:23:19,950
they don't want to house it within the

00:23:18,390 --> 00:23:22,110
foundation but they'd like to make sure

00:23:19,950 --> 00:23:23,790
that it's certified so that users can

00:23:22,110 --> 00:23:26,220
trust that it will plug into a cloud

00:23:23,790 --> 00:23:27,630
foundry cluster and then last the best

00:23:26,220 --> 00:23:29,490
part about open source is that you get

00:23:27,630 --> 00:23:31,080
an extended ecosystem a lot of

00:23:29,490 --> 00:23:34,200
experimentation this is the stuff that's

00:23:31,080 --> 00:23:35,760
out on that it's out of github that may

00:23:34,200 --> 00:23:37,140
be an individual with scratching their

00:23:35,760 --> 00:23:39,120
own itch and they developed or an

00:23:37,140 --> 00:23:42,270
organization has has built something

00:23:39,120 --> 00:23:44,400
that's unique but they chose to share it

00:23:42,270 --> 00:23:46,080
with the world and that's the extended

00:23:44,400 --> 00:23:49,440
ecosystem and the architecture allows

00:23:46,080 --> 00:23:51,330
for a lot of that extensibility and will

00:23:49,440 --> 00:23:54,180
will give us the certification process

00:23:51,330 --> 00:23:57,540
should give us a way to help you as

00:23:54,180 --> 00:23:59,700
users understand the level of trust that

00:23:57,540 --> 00:24:01,950
we can have with a particular back-end

00:23:59,700 --> 00:24:03,770
service or a particular plugin that

00:24:01,950 --> 00:24:08,700
would tie into the core of confounded

00:24:03,770 --> 00:24:10,050
next slide and I mentioned the

00:24:08,700 --> 00:24:12,590
architectural extensions the way that we

00:24:10,050 --> 00:24:16,290
look at this and this is certainly not

00:24:12,590 --> 00:24:18,840
necessarily comprehensive but there are

00:24:16,290 --> 00:24:20,640
many extension points I'll start with

00:24:18,840 --> 00:24:23,010
build packs you know build packs are the

00:24:20,640 --> 00:24:24,660
magic that takes the code itself and

00:24:23,010 --> 00:24:27,090
transitions that into a containerized

00:24:24,660 --> 00:24:29,760
application we've got a command-line

00:24:27,090 --> 00:24:31,320
interface that the CLI tool that

00:24:29,760 --> 00:24:34,230
supports a plug-in architecture and

00:24:31,320 --> 00:24:35,640
there's some fascinating plug-in

00:24:34,230 --> 00:24:38,700
extensions that are out there right now

00:24:35,640 --> 00:24:40,940
that are codifying a lot of those best

00:24:38,700 --> 00:24:43,320
practices for application deployments

00:24:40,940 --> 00:24:46,350
things like the canary know things like

00:24:43,320 --> 00:24:48,540
red green deployments and that plug-in

00:24:46,350 --> 00:24:51,360
architecture is enabling that that type

00:24:48,540 --> 00:24:54,660
of orchestration of the court Cloud

00:24:51,360 --> 00:24:56,580
Foundry units of operations and there's

00:24:54,660 --> 00:24:58,410
quite a few more others there's again

00:24:56,580 --> 00:25:00,510
the cloud provider interfaces there's

00:24:58,410 --> 00:25:01,590
various services services could be

00:25:00,510 --> 00:25:03,120
deployed within a cloud foundry

00:25:01,590 --> 00:25:07,560
environment services that might live

00:25:03,120 --> 00:25:10,020
outside but but yet nearby and services

00:25:07,560 --> 00:25:11,820
that could be online services that live

00:25:10,020 --> 00:25:12,120
outside of the enterprise are outside of

00:25:11,820 --> 00:25:14,670
the club

00:25:12,120 --> 00:25:18,240
environment the year you're within next

00:25:14,670 --> 00:25:20,160
slide and with that I can transition to

00:25:18,240 --> 00:25:23,190
you and have her walk through what's

00:25:20,160 --> 00:25:26,070
coming up next all right and thank you

00:25:23,190 --> 00:25:31,560
chip and so I'm just going to go over

00:25:26,070 --> 00:25:35,520
some roadmap items um next slide and so

00:25:31,560 --> 00:25:38,900
the big chunk of work that we've been

00:25:35,520 --> 00:25:42,810
working on is getting the rewrite of the

00:25:38,900 --> 00:25:46,620
back end out there and we've called it

00:25:42,810 --> 00:25:49,650
Diego and this was originally a rewrite

00:25:46,620 --> 00:25:53,400
of the DA's and go but it is gone beyond

00:25:49,650 --> 00:25:56,640
that and it's now a many component back

00:25:53,400 --> 00:25:58,160
end um so the the goals of this was to

00:25:56,640 --> 00:26:01,340
improve maintainability and

00:25:58,160 --> 00:26:05,220
extensibility of the runtime layer and

00:26:01,340 --> 00:26:09,210
and it would it also supports build

00:26:05,220 --> 00:26:12,570
packs and containers so um das before

00:26:09,210 --> 00:26:16,020
only supported build packs and right now

00:26:12,570 --> 00:26:19,190
it's running in beta on on p WS and some

00:26:16,020 --> 00:26:23,580
other service provider environments and

00:26:19,190 --> 00:26:27,510
right now the team is focusing on making

00:26:23,580 --> 00:26:30,840
sure it scales well um it addresses a

00:26:27,510 --> 00:26:35,270
lot security concerns are dropping down

00:26:30,840 --> 00:26:37,710
to unprivileged containers for example

00:26:35,270 --> 00:26:41,610
versioning making sure all of the

00:26:37,710 --> 00:26:45,120
components that make up Diego can be can

00:26:41,610 --> 00:26:48,740
be changed without downtime and we

00:26:45,120 --> 00:26:51,870
expect a commercial vendors to start

00:26:48,740 --> 00:26:56,400
releasing product diets versions of

00:26:51,870 --> 00:27:02,120
Diego in this next quarter um next slide

00:26:56,400 --> 00:27:07,410
and so greenhouse and is our project for

00:27:02,120 --> 00:27:12,060
having windows on our support for net on

00:27:07,410 --> 00:27:14,160
Diego and this is closely aligned with

00:27:12,060 --> 00:27:18,600
the Microsoft road map around containers

00:27:14,160 --> 00:27:20,640
and it's currently worked on by it's a

00:27:18,600 --> 00:27:23,430
joint effort between pivotal HP at

00:27:20,640 --> 00:27:25,560
centurylink on this project and we're

00:27:23,430 --> 00:27:28,410
coordinating with Microsoft around

00:27:25,560 --> 00:27:35,010
next release of windows with run see you

00:27:28,410 --> 00:27:36,840
support next line and so these are a lot

00:27:35,010 --> 00:27:39,570
of different features from several

00:27:36,840 --> 00:27:45,060
different teams in the runtime layer

00:27:39,570 --> 00:27:48,710
that we are working on route services so

00:27:45,060 --> 00:27:51,900
the idea here is you could insert a

00:27:48,710 --> 00:27:55,860
service into the flow between the router

00:27:51,900 --> 00:27:57,660
and your app you could um for example

00:27:55,860 --> 00:28:03,240
have an authorization service or an

00:27:57,660 --> 00:28:07,530
auditing service or some other type of

00:28:03,240 --> 00:28:11,760
metering service in between your your

00:28:07,530 --> 00:28:13,920
app and the router we are also working

00:28:11,760 --> 00:28:17,100
on support for TCP routing and that's

00:28:13,920 --> 00:28:20,090
currently supported and with lattice and

00:28:17,100 --> 00:28:22,770
and we're making we're working towards

00:28:20,090 --> 00:28:24,900
integrating that with with the cloud

00:28:22,770 --> 00:28:30,090
controller and exposing that in the API

00:28:24,900 --> 00:28:33,410
so that you could have support for TCP

00:28:30,090 --> 00:28:36,930
routing to your application containers

00:28:33,410 --> 00:28:40,020
we're also working the routing team is

00:28:36,930 --> 00:28:42,840
also working on a routing API so as

00:28:40,020 --> 00:28:46,500
opposed to broadcasting messages over

00:28:42,840 --> 00:28:50,370
Nats and we'd like to move away from

00:28:46,500 --> 00:28:53,630
using matts where we're developing

00:28:50,370 --> 00:29:00,470
routing API layer that you can register

00:28:53,630 --> 00:29:03,060
HTTP and TCP routes over we're also

00:29:00,470 --> 00:29:06,990
working on securely running docker

00:29:03,060 --> 00:29:11,010
images this includes user name spaces

00:29:06,990 --> 00:29:16,560
dropping Linux capabilities and again

00:29:11,010 --> 00:29:18,360
running unprivileged containers the capi

00:29:16,560 --> 00:29:23,030
team is working on application process

00:29:18,360 --> 00:29:25,350
types which enables running multiple

00:29:23,030 --> 00:29:28,200
processes from the same codebase if you

00:29:25,350 --> 00:29:30,150
think of it like different start

00:29:28,200 --> 00:29:34,470
commands on the same codebase you might

00:29:30,150 --> 00:29:35,590
have a runner or web process or a worker

00:29:34,470 --> 00:29:38,740
process

00:29:35,590 --> 00:29:43,270
job all using the same code base and

00:29:38,740 --> 00:29:45,850
part of that work we're working on we

00:29:43,270 --> 00:29:48,789
ended up versioning the Cloud Controller

00:29:45,850 --> 00:29:53,370
API and we're working on a v3 version of

00:29:48,789 --> 00:29:58,059
that and that also enables we did

00:29:53,370 --> 00:30:01,059
discomposed the v2 app so into smaller

00:29:58,059 --> 00:30:02,500
pieces it's a little it's very

00:30:01,059 --> 00:30:04,659
interesting and we'll be talking about

00:30:02,500 --> 00:30:09,669
that at sea of summit some of the

00:30:04,659 --> 00:30:13,720
capabilities of this enables so we're

00:30:09,669 --> 00:30:16,120
also working on enabling asynchronous

00:30:13,720 --> 00:30:22,289
and temporary app processes so that you

00:30:16,120 --> 00:30:25,390
could say just run this thing once and

00:30:22,289 --> 00:30:32,730
will ensure that I'd run runs one set it

00:30:25,390 --> 00:30:38,610
at a time so you could imagine running a

00:30:32,730 --> 00:30:42,460
job just once and sort of like cron um

00:30:38,610 --> 00:30:45,429
you could work as part of the work on

00:30:42,460 --> 00:30:48,340
TCP writing and and as part of what

00:30:45,429 --> 00:30:51,460
Diego is exposing where we'll be

00:30:48,340 --> 00:30:56,350
supporting multiple quart containers per

00:30:51,460 --> 00:30:59,950
application and apps can then have

00:30:56,350 --> 00:31:05,620
multiple routes on multiple ports so you

00:30:59,950 --> 00:31:09,730
might imagine an admin route to your app

00:31:05,620 --> 00:31:14,380
and or a debugging router or something

00:31:09,730 --> 00:31:18,809
like that Diego also supports ssh into

00:31:14,380 --> 00:31:21,340
your application containers this will be

00:31:18,809 --> 00:31:24,520
there will be some security governance

00:31:21,340 --> 00:31:28,029
there's some policy we're developing

00:31:24,520 --> 00:31:32,980
around recycling those containers if

00:31:28,029 --> 00:31:38,740
someone should SSH in and and logging of

00:31:32,980 --> 00:31:44,350
that lattice which we like to refer to

00:31:38,740 --> 00:31:48,130
as a cloud foundry by subtraction and is

00:31:44,350 --> 00:31:49,840
now able to produce droplets

00:31:48,130 --> 00:31:53,940
so you take your build pack and your

00:31:49,840 --> 00:31:57,880
outfits and you can run those on lattice

00:31:53,940 --> 00:32:02,640
you lay has an support now for

00:31:57,880 --> 00:32:05,260
multi-tenancy with zones so that you can

00:32:02,640 --> 00:32:10,060
with the single you a deployment you

00:32:05,260 --> 00:32:11,770
could use it for multiple different apps

00:32:10,060 --> 00:32:15,280
and services and those are all

00:32:11,770 --> 00:32:19,810
segregated system components may now use

00:32:15,280 --> 00:32:25,780
blogger Gator for four metrics so they

00:32:19,810 --> 00:32:30,040
can instead of having a VAR z endpoint

00:32:25,780 --> 00:32:32,950
and that the collector job is is polling

00:32:30,040 --> 00:32:35,410
you can now have those system components

00:32:32,950 --> 00:32:37,120
inserting their metrics into a log of

00:32:35,410 --> 00:32:44,890
Gator and that will come out of that the

00:32:37,120 --> 00:32:47,370
fire hose next slide please and so what

00:32:44,890 --> 00:32:49,120
else we are looking into securing

00:32:47,370 --> 00:32:52,890
communication between all of the

00:32:49,120 --> 00:33:01,900
components and rotating of certificates

00:32:52,890 --> 00:33:06,010
I believe that the how you can rotate

00:33:01,900 --> 00:33:09,520
between the vm components runtime

00:33:06,010 --> 00:33:11,470
support for fine finer grained roles and

00:33:09,520 --> 00:33:13,380
permissions so right now we have some

00:33:11,470 --> 00:33:17,020
pre-canned roles and they're very

00:33:13,380 --> 00:33:20,500
specific and perhaps a little bit odd in

00:33:17,020 --> 00:33:22,390
what a role allows you to do on this

00:33:20,500 --> 00:33:27,310
face developer role for example allows

00:33:22,390 --> 00:33:30,250
you to do most anything and we realize

00:33:27,310 --> 00:33:33,190
that a lot of users out there would like

00:33:30,250 --> 00:33:37,150
to have separation concerns around this

00:33:33,190 --> 00:33:40,780
and have certain actions limited to

00:33:37,150 --> 00:33:43,780
certain certain roles and we're also

00:33:40,780 --> 00:33:47,770
looking into supporting extensible tags

00:33:43,780 --> 00:33:51,340
different labels on on the different

00:33:47,770 --> 00:33:56,860
resources and the components we're

00:33:51,340 --> 00:34:00,830
looking into the possibility of staging

00:33:56,860 --> 00:34:06,080
gates so that you could

00:34:00,830 --> 00:34:09,740
and our hook into the staging process as

00:34:06,080 --> 00:34:12,950
as aptor uploaded to the platform and

00:34:09,740 --> 00:34:16,070
and possibly run some lights and

00:34:12,950 --> 00:34:21,290
scanning tools or fire scanning tools

00:34:16,070 --> 00:34:24,139
there and the next item is isolation

00:34:21,290 --> 00:34:28,369
groups we formally refer to this as

00:34:24,139 --> 00:34:31,760
placement pools and the way we're

00:34:28,369 --> 00:34:36,440
looking at this now would be a tear of

00:34:31,760 --> 00:34:39,710
cloud controllers above many lattices so

00:34:36,440 --> 00:34:45,760
the components that make up lattice like

00:34:39,710 --> 00:34:45,760
a router and Diego components would be

00:34:47,379 --> 00:34:56,480
all controlled by one Cloud Controller

00:34:50,750 --> 00:34:58,970
tier and app containers may use custom

00:34:56,480 --> 00:35:02,660
ca's so the idea here is that instead of

00:34:58,970 --> 00:35:08,780
heading to fork build packs to include

00:35:02,660 --> 00:35:13,609
your your custom cas and the you could

00:35:08,780 --> 00:35:19,300
configure the system to insert the the

00:35:13,609 --> 00:35:22,160
CAS and be trusted on the root FS and

00:35:19,300 --> 00:35:25,430
the path to this may also resolve some

00:35:22,160 --> 00:35:29,800
of our how how we you can similarly

00:35:25,430 --> 00:35:35,700
modify that etsy a result calm um

00:35:29,800 --> 00:35:42,050
alright next slide and so

00:35:35,700 --> 00:35:49,079
longer term support for persistence so

00:35:42,050 --> 00:35:55,010
there are some initial investigations

00:35:49,079 --> 00:35:57,960
into how you can have a storage on diego

00:35:55,010 --> 00:36:02,880
and then we're also looking into a

00:35:57,960 --> 00:36:10,890
container to container networking um so

00:36:02,880 --> 00:36:14,540
next slide yeah the the bosch roadmap

00:36:10,890 --> 00:36:19,369
and so they some of these things are

00:36:14,540 --> 00:36:22,740
actually just completed so Bosch

00:36:19,369 --> 00:36:25,200
recently finished support for compiled

00:36:22,740 --> 00:36:29,790
releases this allows you to ship

00:36:25,200 --> 00:36:31,890
releases that contain the jobs and

00:36:29,790 --> 00:36:35,130
compiled packages for a specific stem

00:36:31,890 --> 00:36:39,720
cell version like ooh Bunty Aur zento s

00:36:35,130 --> 00:36:43,770
and that reduces the time for for that

00:36:39,720 --> 00:36:46,680
job own to to deploy and there's you a

00:36:43,770 --> 00:36:49,880
support in the boss director so if you

00:36:46,680 --> 00:36:52,650
wish you can have your boss users and

00:36:49,880 --> 00:36:56,060
connected to some separate identity

00:36:52,650 --> 00:37:00,420
provider and like Active Directory and

00:36:56,060 --> 00:37:03,450
they've there's work on the pre-start

00:37:00,420 --> 00:37:06,089
release job scripts and we hope this

00:37:03,450 --> 00:37:10,650
will allow for support of migrations

00:37:06,089 --> 00:37:14,130
with wash and there are a fair way

00:37:10,650 --> 00:37:18,200
through working on support for dynamic

00:37:14,130 --> 00:37:24,200
provisioning so this is make simplifying

00:37:18,200 --> 00:37:29,510
manifest making it easier to UM easily

00:37:24,200 --> 00:37:32,220
dynamically provision deployments um

00:37:29,510 --> 00:37:36,329
there are some links there for job

00:37:32,220 --> 00:37:38,510
linking and first-class azs and next

00:37:36,329 --> 00:37:38,510
slide

00:37:40,490 --> 00:37:47,570
so the services roadmap and the

00:37:43,660 --> 00:37:51,710
notifications team has been working on

00:37:47,570 --> 00:37:53,840
their v2 API to support batch sending

00:37:51,710 --> 00:37:56,119
test sons and some few other features

00:37:53,840 --> 00:38:01,160
that I believe that's nearly complete

00:37:56,119 --> 00:38:04,190
and we are also working on user and

00:38:01,160 --> 00:38:06,950
managed service brokers so the idea here

00:38:04,190 --> 00:38:09,920
is that you could create a service

00:38:06,950 --> 00:38:13,160
broker at the space level or org level

00:38:09,920 --> 00:38:15,560
and it would just be focused on on the

00:38:13,160 --> 00:38:19,970
space and it wouldn't require admin

00:38:15,560 --> 00:38:24,830
privileges in order to to develop that

00:38:19,970 --> 00:38:26,690
private broker to develop that service

00:38:24,830 --> 00:38:32,060
broker right now that there's a burden

00:38:26,690 --> 00:38:34,670
on service brokerage to deploy their own

00:38:32,060 --> 00:38:40,190
environment almost to you to work out

00:38:34,670 --> 00:38:42,710
the kinks there where there's some plan

00:38:40,190 --> 00:38:46,940
for our support for sso for service

00:38:42,710 --> 00:38:52,510
dashboards per instance so that you

00:38:46,940 --> 00:38:56,720
could have the single sign-on experience

00:38:52,510 --> 00:39:01,850
for individual service dashboards per

00:38:56,720 --> 00:39:04,430
service instance your service service

00:39:01,850 --> 00:39:08,030
provider may want to have configuration

00:39:04,430 --> 00:39:12,109
per pair instance protected by by single

00:39:08,030 --> 00:39:16,430
sign-on the notifications team is also

00:39:12,109 --> 00:39:21,410
working on a CLI tool to to make that

00:39:16,430 --> 00:39:26,780
easier to operate and there's a concept

00:39:21,410 --> 00:39:29,810
of an echo broker and this is really so

00:39:26,780 --> 00:39:32,240
a replacement of user provided services

00:39:29,810 --> 00:39:36,680
currently user provided services you can

00:39:32,240 --> 00:39:39,500
only create them / space and you can't

00:39:36,680 --> 00:39:43,730
share that across so other brokers would

00:39:39,500 --> 00:39:46,369
be a full implementation of user user

00:39:43,730 --> 00:39:48,650
provided services exposed in the

00:39:46,369 --> 00:39:52,150
marketplace so that you could define

00:39:48,650 --> 00:39:53,900
once um some user provided service

00:39:52,150 --> 00:39:56,230
people could then

00:39:53,900 --> 00:39:58,940
and see that in the in the marketplace

00:39:56,230 --> 00:40:02,600
create service instances from there in

00:39:58,940 --> 00:40:07,030
whatever orgs or spaces have visibility

00:40:02,600 --> 00:40:09,860
to that service in the marketplace and

00:40:07,030 --> 00:40:17,350
something else we were looking into is a

00:40:09,860 --> 00:40:21,080
parameter prompts um so brokers could

00:40:17,350 --> 00:40:23,990
have a way to tell CF clients they would

00:40:21,080 --> 00:40:36,050
like to have and these feels prompted

00:40:23,990 --> 00:40:38,180
for next slide um chip was this slide

00:40:36,050 --> 00:40:43,130
something you wanted me to go over or

00:40:38,180 --> 00:40:44,750
you wanted no take this one in addition

00:40:43,130 --> 00:40:46,730
to a lot of the features that you he was

00:40:44,750 --> 00:40:48,470
talking about there's actually a lot of

00:40:46,730 --> 00:40:51,440
work and thought that's going into

00:40:48,470 --> 00:40:53,240
taking a look at the the entirety of all

00:40:51,440 --> 00:40:55,670
of the components that make up cloud

00:40:53,240 --> 00:40:58,910
foundry and applying a security

00:40:55,670 --> 00:41:00,290
discipline that it elevates beyond you

00:40:58,910 --> 00:41:02,870
know the current security posture of the

00:41:00,290 --> 00:41:06,740
system there's in fact there's some work

00:41:02,870 --> 00:41:09,440
occurring right now I added frankly the

00:41:06,740 --> 00:41:13,580
open source world where the US federal

00:41:09,440 --> 00:41:15,890
government's GSA is taking a look at how

00:41:13,580 --> 00:41:17,840
they can help provide guidance for how

00:41:15,890 --> 00:41:20,180
to deploy Cloud Foundry into regulated

00:41:17,840 --> 00:41:22,400
environments we have the financial

00:41:20,180 --> 00:41:25,370
services industry I'm starting to

00:41:22,400 --> 00:41:26,840
collaborate collectively on reference

00:41:25,370 --> 00:41:30,770
implementations and requirements that

00:41:26,840 --> 00:41:32,240
they have to continue to enhance the

00:41:30,770 --> 00:41:39,290
security posture in the compliance

00:41:32,240 --> 00:41:45,700
posture of Cloud Foundry is about next

00:41:39,290 --> 00:41:48,520
line and with that I

00:41:45,700 --> 00:41:51,460
we're done so thank you you but I think

00:41:48,520 --> 00:41:54,760
we have some questions yeah yeah this is

00:41:51,460 --> 00:41:56,440
Tracy again thank you so much it's just

00:41:54,760 --> 00:42:01,510
taking a look at some questions that

00:41:56,440 --> 00:42:06,820
have come in let's see here's the first

00:42:01,510 --> 00:42:10,150
one you state about reusable components

00:42:06,820 --> 00:42:12,790
as a service so how is this different

00:42:10,150 --> 00:42:15,220
from micro services which again I

00:42:12,790 --> 00:42:19,810
presume is a service which is not

00:42:15,220 --> 00:42:21,370
tightly coupled this is from the

00:42:19,810 --> 00:42:25,570
beginning of the presentation you're

00:42:21,370 --> 00:42:27,670
talking about microservices right this

00:42:25,570 --> 00:42:30,670
is this is one that that actually comes

00:42:27,670 --> 00:42:34,510
up a lot I certainly had a lot with

00:42:30,670 --> 00:42:38,040
Cloud Foundry we can integrate a number

00:42:34,510 --> 00:42:41,140
of services like database as a service

00:42:38,040 --> 00:42:42,790
queueing as a service Watson was

00:42:41,140 --> 00:42:45,940
something chip mentioned earlier as a

00:42:42,790 --> 00:42:48,490
service analytics as a service and so

00:42:45,940 --> 00:42:50,200
forth Hadoop clusters of service pretty

00:42:48,490 --> 00:42:54,100
much anything can be bundled up as a

00:42:50,200 --> 00:42:55,750
service now this is a little bit

00:42:54,100 --> 00:42:57,490
different when we talk about something

00:42:55,750 --> 00:43:00,010
like micro services which is really an

00:42:57,490 --> 00:43:03,970
architectural style for how you develop

00:43:00,010 --> 00:43:05,170
an application or a service so a service

00:43:03,970 --> 00:43:07,420
that's integrated like let's take

00:43:05,170 --> 00:43:09,370
database as a service is probably

00:43:07,420 --> 00:43:13,210
implemented using something like my

00:43:09,370 --> 00:43:15,430
sequel db2 Oracle or what have you as

00:43:13,210 --> 00:43:17,650
the back end and that's not a micro

00:43:15,430 --> 00:43:21,250
service architecture thing it's you know

00:43:17,650 --> 00:43:23,140
it's your typical you know what you

00:43:21,250 --> 00:43:25,300
normally expect with with one of those

00:43:23,140 --> 00:43:27,490
database engines it's a single thing it

00:43:25,300 --> 00:43:29,500
can be clustered and so forth and but

00:43:27,490 --> 00:43:31,540
the details of how it's been deployed

00:43:29,500 --> 00:43:34,840
how it's clustered and so forth are

00:43:31,540 --> 00:43:36,580
really completely invisible to the

00:43:34,840 --> 00:43:38,620
end-user the end user is just going to

00:43:36,580 --> 00:43:40,480
request an instance of that service of

00:43:38,620 --> 00:43:44,530
that database you know give me a

00:43:40,480 --> 00:43:47,350
database give me a cue whatever the sort

00:43:44,530 --> 00:43:48,760
of the instance metric is and then you

00:43:47,350 --> 00:43:50,320
just deal with it you bind into your

00:43:48,760 --> 00:43:52,000
application and you can just interact

00:43:50,320 --> 00:43:53,890
with it using its set of API so you

00:43:52,000 --> 00:43:55,120
don't have to worry about deploying it

00:43:53,890 --> 00:43:57,910
and upgrading it and all that on a

00:43:55,120 --> 00:43:58,720
concept that's provided for you mike

00:43:57,910 --> 00:44:00,700
mcclure versus are

00:43:58,720 --> 00:44:05,500
really talking about this notion that

00:44:00,700 --> 00:44:09,869
you compose the application from a

00:44:05,500 --> 00:44:12,790
number of independent service oriented

00:44:09,869 --> 00:44:15,490
endpoints if you will write that

00:44:12,790 --> 00:44:17,260
typically provide a single function or a

00:44:15,490 --> 00:44:19,750
very limited set of function and they're

00:44:17,260 --> 00:44:21,940
deployed independently they have their

00:44:19,750 --> 00:44:24,160
own application life cycle that ship

00:44:21,940 --> 00:44:25,570
talked about in this presentation but

00:44:24,160 --> 00:44:28,240
they're all integrated together to

00:44:25,570 --> 00:44:30,310
deliver an overall solution that can

00:44:28,240 --> 00:44:33,369
scale independently and that can be

00:44:30,310 --> 00:44:35,530
upgraded independently based on all the

00:44:33,369 --> 00:44:47,430
different moving parts does that make

00:44:35,530 --> 00:44:51,580
sense I think it did to me yes thank you

00:44:47,430 --> 00:44:54,400
let's see moving on a lot of customers I

00:44:51,580 --> 00:44:56,920
work with think that warden containers

00:44:54,400 --> 00:44:58,859
will slowly be phased out with docker

00:44:56,920 --> 00:45:03,609
taking its place in the cloud foundry

00:44:58,859 --> 00:45:07,349
could you comment on that yeah I'll

00:45:03,609 --> 00:45:11,410
actually be happy to sir comment on that

00:45:07,349 --> 00:45:13,030
so so that is true but there's there's

00:45:11,410 --> 00:45:14,770
two ways I'd like to answer the question

00:45:13,030 --> 00:45:16,150
the first one would be to say that go

00:45:14,770 --> 00:45:17,710
back to the premise of what cloud

00:45:16,150 --> 00:45:20,470
foundry is attempting to do for you or

00:45:17,710 --> 00:45:22,810
does for you the platform is able to

00:45:20,470 --> 00:45:25,150
take the code and then deal with the

00:45:22,810 --> 00:45:27,849
aspects of running it within the within

00:45:25,150 --> 00:45:29,619
the cluster the process of

00:45:27,849 --> 00:45:31,270
containerization is in fact an

00:45:29,619 --> 00:45:34,300
implementation detail of how you go from

00:45:31,270 --> 00:45:36,099
code to running clusters and so the

00:45:34,300 --> 00:45:38,859
warning warding container technology

00:45:36,099 --> 00:45:41,950
that that's within clap boundary today

00:45:38,859 --> 00:45:46,150
is in fact a key ingredient to our

00:45:41,950 --> 00:45:50,640
architecture now I also mentioned

00:45:46,150 --> 00:45:53,290
earlier that there's a lot of industry

00:45:50,640 --> 00:45:54,670
activity around containers themselves

00:45:53,290 --> 00:45:57,760
and I think most importantly what

00:45:54,670 --> 00:45:59,470
occurred very recently was the daka

00:45:57,760 --> 00:46:02,890
incorporated agreed along with a number

00:45:59,470 --> 00:46:05,940
of other companies IBM included to take

00:46:02,890 --> 00:46:10,150
what's at the heart of the docker

00:46:05,940 --> 00:46:12,110
approach to containers on the the format

00:46:10,150 --> 00:46:14,090
as well as the

00:46:12,110 --> 00:46:16,250
the runtime implementation or what was

00:46:14,090 --> 00:46:18,380
lib container and create the open

00:46:16,250 --> 00:46:20,720
container initiative so that open

00:46:18,380 --> 00:46:26,150
container initiative is now the home of

00:46:20,720 --> 00:46:29,330
a broad industry effort around a common

00:46:26,150 --> 00:46:31,670
standard for containers for Linux

00:46:29,330 --> 00:46:34,670
containers initially but also their

00:46:31,670 --> 00:46:36,230
implementations other platforms now what

00:46:34,670 --> 00:46:39,020
the cloud foundry project is doing

00:46:36,230 --> 00:46:44,210
within the Diego rewrite of the elastic

00:46:39,020 --> 00:46:46,190
runtime is that we we do have the an

00:46:44,210 --> 00:46:49,610
implementation that is very similar to

00:46:46,190 --> 00:46:50,840
ward it but recently the project team

00:46:49,610 --> 00:46:55,250
that's been working on that said

00:46:50,840 --> 00:46:56,900
fantastic now we see that oci exists so

00:46:55,250 --> 00:46:58,310
what we can do is we can take some of

00:46:56,900 --> 00:47:00,200
the goodness that was developed in

00:46:58,310 --> 00:47:01,900
warden that solves for specific use

00:47:00,200 --> 00:47:05,150
cases that doctor is not actually

00:47:01,900 --> 00:47:07,220
looking to solve and it we're able to

00:47:05,150 --> 00:47:08,600
then collaborate with the rest of the

00:47:07,220 --> 00:47:11,060
industry and bring those into the

00:47:08,600 --> 00:47:15,250
reference implementation called 1c and

00:47:11,060 --> 00:47:15,250
cloud foundered will be adopting run see

00:47:17,500 --> 00:47:24,910
ok thanks and just you just to follow up

00:47:22,970 --> 00:47:27,710
with that you know chip that was a great

00:47:24,910 --> 00:47:30,590
point but I think again what this allows

00:47:27,710 --> 00:47:32,990
is for and you mentioned that there are

00:47:30,590 --> 00:47:34,850
other no not just Linux containers with

00:47:32,990 --> 00:47:36,320
other platforms as well one of the most

00:47:34,850 --> 00:47:38,630
important platforms i think is probably

00:47:36,320 --> 00:47:40,220
the windows platform and microsoft is

00:47:38,630 --> 00:47:42,800
working on their own containerization

00:47:40,220 --> 00:47:45,080
then they too have embraced run c so

00:47:42,800 --> 00:47:47,750
that the beauty of it is is that by

00:47:45,080 --> 00:47:51,220
cloud foundry embracing run see for

00:47:47,750 --> 00:47:53,120
Diego as we go forward we're able to run

00:47:51,220 --> 00:47:55,370
containers that are developed through

00:47:53,120 --> 00:47:57,440
the build pack process containers that

00:47:55,370 --> 00:48:00,110
are derived from docker images and or

00:47:57,440 --> 00:48:02,510
doctor files as well as container images

00:48:00,110 --> 00:48:05,540
for Microsoft using the same doc replies

00:48:02,510 --> 00:48:07,910
so so ultimately it's sort of it's a

00:48:05,540 --> 00:48:10,400
natural point where everybody you know

00:48:07,910 --> 00:48:14,270
as chip said is organized around this

00:48:10,400 --> 00:48:16,970
common standard for image formats and

00:48:14,270 --> 00:48:19,480
for how you interact with the runtime of

00:48:16,970 --> 00:48:19,480
a container

00:48:21,350 --> 00:48:28,080
okay next question could you talk a bit

00:48:25,350 --> 00:48:30,090
more about how microservices are

00:48:28,080 --> 00:48:39,660
connected to each other to build the

00:48:30,090 --> 00:48:41,580
overall app and how that's done I'd be

00:48:39,660 --> 00:48:46,890
happy to take it unless cursor you would

00:48:41,580 --> 00:48:48,930
like to so that is actually a really

00:48:46,890 --> 00:48:52,380
good question and when you start dealing

00:48:48,930 --> 00:48:54,950
with a lot of different you know

00:48:52,380 --> 00:48:57,930
indistinct systems that are out there

00:48:54,950 --> 00:49:01,080
you you do have this the question of how

00:48:57,930 --> 00:49:03,600
do you do service discovery right so how

00:49:01,080 --> 00:49:05,610
does one service or the or the front end

00:49:03,600 --> 00:49:07,530
of your web application how does it

00:49:05,610 --> 00:49:10,230
figure out where the other services that

00:49:07,530 --> 00:49:12,390
it's going to rely on actually lives now

00:49:10,230 --> 00:49:16,080
there's a couple of patterns that you

00:49:12,390 --> 00:49:18,390
can employ for this if some people

00:49:16,080 --> 00:49:20,970
approach it by putting something in

00:49:18,390 --> 00:49:22,950
place that will act as kind of a source

00:49:20,970 --> 00:49:25,950
of truth you know there's an example of

00:49:22,950 --> 00:49:28,950
Tashi quartz console software can do

00:49:25,950 --> 00:49:30,720
this type of thing for you so that's one

00:49:28,950 --> 00:49:35,190
approach now there are other frameworks

00:49:30,720 --> 00:49:38,060
that exist out there that for example

00:49:35,190 --> 00:49:42,240
some of the netflix open source software

00:49:38,060 --> 00:49:43,890
does service discovery as well and so

00:49:42,240 --> 00:49:45,210
there are implementations of that that

00:49:43,890 --> 00:49:47,880
run within some cloud foundry

00:49:45,210 --> 00:49:51,330
environments and then there's I think

00:49:47,880 --> 00:49:53,010
there's also quite frankly a relatively

00:49:51,330 --> 00:49:55,320
straightforward way to approach this if

00:49:53,010 --> 00:49:57,780
you consider cloud founder itself and

00:49:55,320 --> 00:50:00,840
its routing functionality as being a

00:49:57,780 --> 00:50:02,970
very straightforward way to to enable

00:50:00,840 --> 00:50:03,990
that service discovery and so when you

00:50:02,970 --> 00:50:05,700
write yourself where you're going to be

00:50:03,990 --> 00:50:07,380
aware that you have you know multiple

00:50:05,700 --> 00:50:10,020
backup multiple other services that

00:50:07,380 --> 00:50:12,150
you'll rely on and if you can if you

00:50:10,020 --> 00:50:16,790
code your application in such a way that

00:50:12,150 --> 00:50:19,830
it it refers to those dependencies via

00:50:16,790 --> 00:50:22,530
names and those names would end up being

00:50:19,830 --> 00:50:24,090
routes within the the CF cluster it's

00:50:22,530 --> 00:50:26,250
fairly straightforward then for the sea

00:50:24,090 --> 00:50:28,610
of cluster then forward that request to

00:50:26,250 --> 00:50:29,900
the appropriate target

00:50:28,610 --> 00:50:32,090
I don't know if Chris or you would like

00:50:29,900 --> 00:50:33,710
to add any more color I think that's a

00:50:32,090 --> 00:50:36,860
that's a good answer it again you know

00:50:33,710 --> 00:50:38,690
you can I mean what you deploy into

00:50:36,860 --> 00:50:42,620
cloud foundry can be just about anything

00:50:38,690 --> 00:50:44,840
yeah and and so in that case you know

00:50:42,620 --> 00:50:46,550
you could actually deploy something that

00:50:44,840 --> 00:50:49,220
would be a sort of a central registry

00:50:46,550 --> 00:50:51,140
that provides the ability for your

00:50:49,220 --> 00:50:53,510
individual microservices to register

00:50:51,140 --> 00:50:56,840
each other with this you know service

00:50:53,510 --> 00:50:58,670
discovery node and then find each other

00:50:56,840 --> 00:50:59,900
through through that you know through

00:50:58,670 --> 00:51:02,360
through that service discovery so you

00:50:59,900 --> 00:51:04,430
can roll your own then I think the other

00:51:02,360 --> 00:51:06,230
one that I think that that can be used

00:51:04,430 --> 00:51:08,180
obviously is DNS and again a lot of

00:51:06,230 --> 00:51:09,440
these are really a function of how have

00:51:08,180 --> 00:51:11,510
you deployed it if this is something

00:51:09,440 --> 00:51:12,800
you're deploying on-premises then you

00:51:11,510 --> 00:51:15,500
actually have a lot more control over

00:51:12,800 --> 00:51:24,440
things than if it's a public cloud thing

00:51:15,500 --> 00:51:27,350
like a bluemix thank you do you have any

00:51:24,440 --> 00:51:29,960
data pertaining to the efficiency and

00:51:27,350 --> 00:51:33,160
savings from using cloud foundry over

00:51:29,960 --> 00:51:35,960
traditional deployment for example

00:51:33,160 --> 00:51:38,960
dollar save and function point reduction

00:51:35,960 --> 00:51:44,750
or time-to-market scheduled duration

00:51:38,960 --> 00:51:47,060
compression so the cloud foundry

00:51:44,750 --> 00:51:49,580
foundation does not actually have dated

00:51:47,060 --> 00:51:52,040
like that that we published to date it

00:51:49,580 --> 00:51:54,700
is quite possible and I'll to Chris

00:51:52,040 --> 00:51:58,250
maybe hasn't answered that the

00:51:54,700 --> 00:51:59,930
downstream organizations that they take

00:51:58,250 --> 00:52:02,330
the the open source cloud foundry

00:51:59,930 --> 00:52:03,740
software and then commercialize it it's

00:52:02,330 --> 00:52:05,330
very likely that there are some tea Co

00:52:03,740 --> 00:52:07,130
calculations that are out there that are

00:52:05,330 --> 00:52:12,140
specific to that distribution or that

00:52:07,130 --> 00:52:14,260
service yeah I don't have any specific

00:52:12,140 --> 00:52:16,640
data points on that other than you know

00:52:14,260 --> 00:52:18,440
you know there's a few cloud foundry

00:52:16,640 --> 00:52:21,430
base implementations out there and just

00:52:18,440 --> 00:52:25,400
about every developer that engages them

00:52:21,430 --> 00:52:28,640
tries it out is ecstatic over how simple

00:52:25,400 --> 00:52:30,800
it is to get going and how easy is to

00:52:28,640 --> 00:52:33,350
you know sort of iterate through the

00:52:30,800 --> 00:52:35,600
development so you know just sort of

00:52:33,350 --> 00:52:38,810
that you know anecdotal evidence is

00:52:35,600 --> 00:52:41,120
really you know in many cases the thing

00:52:38,810 --> 00:52:41,770
that really sells not specific data

00:52:41,120 --> 00:52:44,770
points

00:52:41,770 --> 00:52:47,050
I in front from the summit you had you

00:52:44,770 --> 00:52:50,080
know Diego for me to Neff they were

00:52:47,050 --> 00:52:51,700
talking about how the developers once

00:52:50,080 --> 00:52:54,250
was there I introduced to Cloud Foundry

00:52:51,700 --> 00:52:59,830
would say you know if you take it away

00:52:54,250 --> 00:53:02,710
from them and they'll hurt you or I

00:52:59,830 --> 00:53:06,160
believe I think it was Humana that said

00:53:02,710 --> 00:53:09,880
they developed an apple watch at shortly

00:53:06,160 --> 00:53:11,500
after it was developed or took them six

00:53:09,880 --> 00:53:14,470
weeks and they they could never have

00:53:11,500 --> 00:53:17,230
imagined doing that with that cloud

00:53:14,470 --> 00:53:19,480
foundry that that's exactly right and

00:53:17,230 --> 00:53:22,260
one of the ways that we you know engage

00:53:19,480 --> 00:53:25,390
with customers is through hackathons and

00:53:22,260 --> 00:53:28,030
it's really quite effective sort of you

00:53:25,390 --> 00:53:31,810
know bringing home the point that you he

00:53:28,030 --> 00:53:35,920
made about what you know the folks at in

00:53:31,810 --> 00:53:38,170
the was at 18f and the federal

00:53:35,920 --> 00:53:39,610
government said to intova senior matted

00:53:38,170 --> 00:53:41,650
and don't take this away from us or our

00:53:39,610 --> 00:53:44,410
two that's really pretty much what

00:53:41,650 --> 00:53:46,890
happens when when developers are exposed

00:53:44,410 --> 00:53:49,450
to a cloud-based environment they just

00:53:46,890 --> 00:53:57,820
they love the way that they can be

00:53:49,450 --> 00:53:59,710
productive almost instantaneously great

00:53:57,820 --> 00:54:02,710
well I think I like to phrase it as

00:53:59,710 --> 00:54:04,150
there is a significant reduction in the

00:54:02,710 --> 00:54:07,240
amount of yaks that are shaped in

00:54:04,150 --> 00:54:08,830
producing an application yeah I'll get

00:54:07,240 --> 00:54:09,910
on with the business of writing the

00:54:08,830 --> 00:54:12,010
software that's going to move their

00:54:09,910 --> 00:54:17,980
companies forward work just interest

00:54:12,010 --> 00:54:22,180
them okay I think we can get in another

00:54:17,980 --> 00:54:25,450
question that came in asking about how

00:54:22,180 --> 00:54:29,790
bluemix and cloud foundry are related if

00:54:25,450 --> 00:54:29,790
you could just explain that briefly i

00:54:33,060 --> 00:54:40,600
was on you sorry i'll take that so so

00:54:36,880 --> 00:54:42,910
bluemix started life as an

00:54:40,600 --> 00:54:45,670
implementation of cloud foundry it's the

00:54:42,910 --> 00:54:50,770
same bits that you know you get from the

00:54:45,670 --> 00:54:52,780
CF release repository on github you know

00:54:50,770 --> 00:54:55,040
this was about at the time that we

00:54:52,780 --> 00:54:57,360
actually announced that we were

00:54:55,040 --> 00:55:00,450
joining forces with pivotal on the

00:54:57,360 --> 00:55:01,560
development of cloud foundry and we were

00:55:00,450 --> 00:55:05,220
going to be working towards establishing

00:55:01,560 --> 00:55:07,980
the cloud foundry foundation and since

00:55:05,220 --> 00:55:12,120
that point it is grown we've added

00:55:07,980 --> 00:55:13,860
additional capability around and as part

00:55:12,120 --> 00:55:15,660
of the bluemix platform so we've taken

00:55:13,860 --> 00:55:18,540
advantage of the fact that you know we

00:55:15,660 --> 00:55:21,360
have OpenStack running out on softlayer

00:55:18,540 --> 00:55:23,190
and so we've added provisioning of VMs

00:55:21,360 --> 00:55:25,560
to the user experience that you get with

00:55:23,190 --> 00:55:27,300
bluemix it doesn't change the nature of

00:55:25,560 --> 00:55:29,280
what cloud foundry is under the covers

00:55:27,300 --> 00:55:31,830
the cloud foundry aspect of bluemix is

00:55:29,280 --> 00:55:33,870
the same it's obviously you know we've

00:55:31,830 --> 00:55:36,480
evolved it over time along with the

00:55:33,870 --> 00:55:38,520
foundation and and the collaboration we

00:55:36,480 --> 00:55:40,410
have around the code base and we've also

00:55:38,520 --> 00:55:43,080
added a container service in our

00:55:40,410 --> 00:55:45,240
OpenStack environment that allows you to

00:55:43,080 --> 00:55:48,090
spin up docker containers and interact

00:55:45,240 --> 00:55:51,300
with docker containers sort of in there

00:55:48,090 --> 00:55:55,770
sort of their their native with their

00:55:51,300 --> 00:55:57,150
native Native dr. api's and we did this

00:55:55,770 --> 00:56:00,600
because you know we recognize that

00:55:57,150 --> 00:56:03,090
customers have an interest in sort of

00:56:00,600 --> 00:56:06,210
the full spectrum of virtualization

00:56:03,090 --> 00:56:09,270
capabilities and and they want to be

00:56:06,210 --> 00:56:13,260
able to integrate them you know across

00:56:09,270 --> 00:56:15,060
the different platforms but as far as

00:56:13,260 --> 00:56:16,940
bluemix and cloud foundry are concerned

00:56:15,060 --> 00:56:19,680
that meanness again we're you know

00:56:16,940 --> 00:56:22,650
continuing full steam ahead with pivotal

00:56:19,680 --> 00:56:25,500
and HP and SI p and intel any others on

00:56:22,650 --> 00:56:29,300
the development of cloud foundry and

00:56:25,500 --> 00:56:33,510
cloud foundry will remain a significant

00:56:29,300 --> 00:56:40,170
portion of what bluemix is as we go

00:56:33,510 --> 00:56:42,750
forward and to wrap up how can a company

00:56:40,170 --> 00:56:46,650
or developer get and get engaged with

00:56:42,750 --> 00:56:47,880
the couch laundry that's a great

00:56:46,650 --> 00:56:50,400
question so i think the starting point

00:56:47,880 --> 00:56:53,370
is go to clock foundry org that that's

00:56:50,400 --> 00:56:55,290
our foundation's website from there it

00:56:53,370 --> 00:56:57,270
will depend on on the level of interest

00:56:55,290 --> 00:56:59,610
are you interested in using cloud

00:56:57,270 --> 00:57:01,200
pattern well there are links to the

00:56:59,610 --> 00:57:03,420
documentation for how to get started if

00:57:01,200 --> 00:57:06,240
you'd like to deploy it yourself there's

00:57:03,420 --> 00:57:08,130
there's a process there I'm we highly

00:57:06,240 --> 00:57:08,760
recommend you you take advantage of some

00:57:08,130 --> 00:57:10,230
of the four

00:57:08,760 --> 00:57:13,320
trials that are available from the

00:57:10,230 --> 00:57:15,780
various as a service offerings that are

00:57:13,320 --> 00:57:18,080
out there you know bluemix is an example

00:57:15,780 --> 00:57:20,460
pivotal web services is another example

00:57:18,080 --> 00:57:22,830
that's a great way to get a taste for

00:57:20,460 --> 00:57:23,670
the developer experience itself if

00:57:22,830 --> 00:57:26,630
you're interested in contributing

00:57:23,670 --> 00:57:30,000
there's there's lots of ways to do that

00:57:26,630 --> 00:57:31,530
and so I step one there would be to take

00:57:30,000 --> 00:57:33,510
a look at the the mailing list as an

00:57:31,530 --> 00:57:35,850
individual start to participate in the

00:57:33,510 --> 00:57:37,500
user discussions that are occurring I

00:57:35,850 --> 00:57:40,380
would also recommend that people

00:57:37,500 --> 00:57:42,300
strongly considered coming to one of the

00:57:40,380 --> 00:57:44,640
the upcoming summits that we're having

00:57:42,300 --> 00:57:46,950
these are conferences that the cloud

00:57:44,640 --> 00:57:49,260
foundry foundations managing and be

00:57:46,950 --> 00:57:52,860
remiss not to not to mention these we

00:57:49,260 --> 00:57:54,720
have one coming up in Berlin on November

00:57:52,860 --> 00:57:56,580
second and third and then we have

00:57:54,720 --> 00:57:59,790
another one that will be in Shanghai

00:57:56,580 --> 00:58:01,910
China in December second and third

00:57:59,790 --> 00:58:06,270
interestingly enough so 11 month apart

00:58:01,910 --> 00:58:08,400
and then early in 2016 we'll come back

00:58:06,270 --> 00:58:10,980
to North America and they'll be a good

00:58:08,400 --> 00:58:13,110
multi-day event that will occur there so

00:58:10,980 --> 00:58:14,610
go again go to cloud foundry org that

00:58:13,110 --> 00:58:17,010
can be a jumping off point from there

00:58:14,610 --> 00:58:19,170
you can figure out based on who you are

00:58:17,010 --> 00:58:22,740
and what your interests are how to

00:58:19,170 --> 00:58:27,030
engage with the broader community okay

00:58:22,740 --> 00:58:30,270
perfect yep that's cloud foundry org so

00:58:27,030 --> 00:58:32,730
thanks again chip Chris and Yui in to

00:58:30,270 --> 00:58:35,670
everyone who joined us today as a

00:58:32,730 --> 00:58:38,610
reminder will post the presentation and

00:58:35,670 --> 00:58:41,390
recording to the cscc website this

00:58:38,610 --> 00:58:44,610
afternoon and that website is cloud

00:58:41,390 --> 00:58:46,740
council dot org if you check back in an

00:58:44,610 --> 00:58:51,480
hour or so we should have that that

00:58:46,740 --> 00:58:53,700
posted and great i hope you'll join us

00:58:51,480 --> 00:58:56,160
again for another guest webinar down the

00:58:53,700 --> 00:58:58,920
road appreciate your time spent today

00:58:56,160 --> 00:59:02,450
and everyone have a great day thank you

00:58:58,920 --> 00:59:02,450
thanks a wool I

00:59:10,309 --> 00:59:12,369

YouTube URL: https://www.youtube.com/watch?v=W-NATQxkxGE


