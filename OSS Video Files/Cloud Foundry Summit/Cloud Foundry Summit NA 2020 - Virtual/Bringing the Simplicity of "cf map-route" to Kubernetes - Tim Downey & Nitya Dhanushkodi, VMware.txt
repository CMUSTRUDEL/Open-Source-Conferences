Title: Bringing the Simplicity of "cf map-route" to Kubernetes - Tim Downey & Nitya Dhanushkodi, VMware
Publication date: 2020-06-14
Playlist: Cloud Foundry Summit NA 2020 - Virtual
Description: 
	Bringing the Simplicity of "cf map-route" to Kubernetes - Tim Downey & Nitya Dhanushkodi, VMware 

For more info: https://www.cloudfoundry.org/ 

Cloud Foundry for Kubernetes seeks to bring the simple, self-service APIs of Cloud Foundry to the powerful, but complicated world of Kubernetes. By bringing the “cf map-route” experience to Kubernetes, developers can focus on core application business logic instead of complex Kubernetes networking configuration.

In this session, Tim and Nitya will cover the design decisions, implementation, and extensibility of the new networking tier in CF for Kubernetes. They will demonstrate how CF for Kubernetes leverages Istio service mesh and Kubernetes networking features to enhance the platform. They will also present a new Kubernetes custom resource and controller: the CF Route CRD and RouteController. The CF Route CRD and RouteController lend future extensibility to the networking tier by opening up potential for additional control planes and pluggable ingress implementations in the future.
Captions: 
	00:00:00,000 --> 00:00:04,799
hi I'm Nydia Dinesh Cody and I'm an

00:00:02,220 --> 00:00:08,250
engineer on the app connectivity team at

00:00:04,799 --> 00:00:09,990
VMware hi and I'm Tim Downey also an

00:00:08,250 --> 00:00:12,509
engineer on the app connectivity team at

00:00:09,990 --> 00:00:14,070
VMware today we're gonna talk to you

00:00:12,509 --> 00:00:17,880
about bringing the CF map broad

00:00:14,070 --> 00:00:19,920
experience to kubernetes first we wanted

00:00:17,880 --> 00:00:21,689
to tell you a story about how ingress

00:00:19,920 --> 00:00:25,920
routing looks in kubernetes

00:00:21,689 --> 00:00:27,210
today you've got a developer and they

00:00:25,920 --> 00:00:31,410
want to set up a route to their

00:00:27,210 --> 00:00:33,630
application so they figure they'll go

00:00:31,410 --> 00:00:35,940
configure some DNS and point it to a

00:00:33,630 --> 00:00:39,020
load balancer and hey they realize

00:00:35,940 --> 00:00:41,399
kubernetes has got some tooling for this

00:00:39,020 --> 00:00:43,530
so they learned they can deploy an

00:00:41,399 --> 00:00:46,170
ingress controller and some kubernetes

00:00:43,530 --> 00:00:48,840
ingress objects to set up the route host

00:00:46,170 --> 00:00:51,020
and in order to have encrypted traffic

00:00:48,840 --> 00:00:53,730
from clients to their ingress router

00:00:51,020 --> 00:00:58,140
they've got to add some kubernetes

00:00:53,730 --> 00:01:00,719
secrets and now they need to configure

00:00:58,140 --> 00:01:02,129
the route to reach an actual back-end so

00:01:00,719 --> 00:01:04,769
they need to figure out which type of

00:01:02,129 --> 00:01:08,850
service to use and set up the service to

00:01:04,769 --> 00:01:10,740
select their app pods and if they deploy

00:01:08,850 --> 00:01:13,080
multiple apps that need to talk to each

00:01:10,740 --> 00:01:15,030
other they'll want to add network policy

00:01:13,080 --> 00:01:19,490
especially if this is a multi-tenant

00:01:15,030 --> 00:01:22,320
cluster so that's a lot of pieces and

00:01:19,490 --> 00:01:24,780
the same process needs to happen for

00:01:22,320 --> 00:01:27,540
other apps deployed to the cluster so

00:01:24,780 --> 00:01:30,570
you can see the flexibility and power of

00:01:27,540 --> 00:01:32,159
kubernetes but also the difficulty

00:01:30,570 --> 00:01:35,840
managing all the yamo and

00:01:32,159 --> 00:01:37,950
decision-making that comes with it so

00:01:35,840 --> 00:01:40,950
that's why we've been working on

00:01:37,950 --> 00:01:42,600
bringing CF map route to kubernetes we

00:01:40,950 --> 00:01:44,850
want to dive into some of the key

00:01:42,600 --> 00:01:46,470
decisions that we've made in bringing

00:01:44,850 --> 00:01:49,680
this to the platform and what

00:01:46,470 --> 00:01:53,280
implications they have so first let's

00:01:49,680 --> 00:01:56,219
take a look at how CF Baro works on CF

00:01:53,280 --> 00:01:58,710
free kubernetes I'll show you all the

00:01:56,219 --> 00:02:01,259
components and pieces involved in making

00:01:58,710 --> 00:02:03,119
map route work and Tim will dive a

00:02:01,259 --> 00:02:06,689
little deeper into them later on

00:02:03,119 --> 00:02:09,030
so in this window I'm targeting a CF for

00:02:06,689 --> 00:02:12,430
kubernetes environment and we've got my

00:02:09,030 --> 00:02:14,769
app deployed here so myopic

00:02:12,430 --> 00:02:24,099
and right now it doesn't have her out so

00:02:14,769 --> 00:02:29,049
let's go ahead and add one great so now

00:02:24,099 --> 00:02:31,209
we've got a route here

00:02:29,049 --> 00:02:33,970
and when we mapped the route cloud

00:02:31,209 --> 00:02:36,939
controller created a route custom

00:02:33,970 --> 00:02:53,379
resource for a CR so let's take a look

00:02:36,939 --> 00:02:54,909
at that so the routes here here looks a

00:02:53,379 --> 00:02:57,639
lot like the cloud controller

00:02:54,909 --> 00:03:02,049
representation of a route it's got a

00:02:57,639 --> 00:03:04,480
route gooood here and a list of

00:03:02,049 --> 00:03:07,930
destinations that it's mapped to here

00:03:04,480 --> 00:03:11,200
and in that in this case here it's my

00:03:07,930 --> 00:03:20,709
app and let's make sure that my apps

00:03:11,200 --> 00:03:25,780
gooood matches this one cool so they're

00:03:20,709 --> 00:03:27,459
the same and this route Zr is used by a

00:03:25,780 --> 00:03:29,980
component that we've created called

00:03:27,459 --> 00:03:33,400
route controller that looks at changes

00:03:29,980 --> 00:03:36,510
to route CRS and creates SDO virtual

00:03:33,400 --> 00:03:41,620
service see ours and kubernetes services

00:03:36,510 --> 00:03:43,989
so if we take a look at route controller

00:03:41,620 --> 00:03:47,229
we can see that route controller is just

00:03:43,989 --> 00:03:51,040
a deployment in the CF system namespace

00:03:47,229 --> 00:03:52,900
and let's also take a look at the SDO

00:03:51,040 --> 00:03:55,389
virtual service that was created by

00:03:52,900 --> 00:04:03,400
route controller that corresponds to the

00:03:55,389 --> 00:04:06,310
route we just saw so this is the virtual

00:04:03,400 --> 00:04:09,819
service and you can see the owner

00:04:06,310 --> 00:04:14,859
reference to the route here you can see

00:04:09,819 --> 00:04:17,650
the host and also the destination and

00:04:14,859 --> 00:04:20,829
this destination actually maps to a

00:04:17,650 --> 00:04:22,570
service name so we'll take a look at

00:04:20,829 --> 00:04:25,270
that service it's actually created by

00:04:22,570 --> 00:04:25,840
route controller as well and it selects

00:04:25,270 --> 00:04:34,030
the app

00:04:25,840 --> 00:04:36,790
pods that we're trying to route to so

00:04:34,030 --> 00:04:38,410
again in the service you see the owner

00:04:36,790 --> 00:04:42,820
reference which is the route we've been

00:04:38,410 --> 00:04:47,980
talking about and the selector selects

00:04:42,820 --> 00:04:51,610
the my app app pods you can see the buid

00:04:47,980 --> 00:04:54,370
again matches so in order to make

00:04:51,610 --> 00:04:56,830
ingress routing work a virtual service

00:04:54,370 --> 00:05:00,130
ties a route fqdn

00:04:56,830 --> 00:05:04,660
to a backing service which selects the

00:05:00,130 --> 00:05:07,600
app pods in the demo I mentioned using

00:05:04,660 --> 00:05:09,880
an sto virtual service so I want to step

00:05:07,600 --> 00:05:13,660
back and discuss what is this do and why

00:05:09,880 --> 00:05:16,960
are we using it it steals a service mesh

00:05:13,660 --> 00:05:20,110
that enables us to take a lot of the

00:05:16,960 --> 00:05:22,150
logic related to networking out of the

00:05:20,110 --> 00:05:25,510
application and put it into the service

00:05:22,150 --> 00:05:28,479
mesh this is achieved in sto by

00:05:25,510 --> 00:05:31,900
configuring a series of envoy proxies

00:05:28,479 --> 00:05:35,229
deployed to the platform these envoy

00:05:31,900 --> 00:05:38,410
proxies are deployed both as side cars

00:05:35,229 --> 00:05:42,130
to applications you can see one on every

00:05:38,410 --> 00:05:45,580
app pod here and as a router into the

00:05:42,130 --> 00:05:49,330
cluster you can say the ingress gateway

00:05:45,580 --> 00:05:51,729
envoy here and sto acts as the control

00:05:49,330 --> 00:05:57,070
plane for these envoy proxies by

00:05:51,729 --> 00:05:59,530
configuring them to zoom into the

00:05:57,070 --> 00:06:02,110
ingress route in case we have an envoy

00:05:59,530 --> 00:06:06,070
proxy deployed as the ingress gateway

00:06:02,110 --> 00:06:07,830
and the is do custom resources are used

00:06:06,070 --> 00:06:11,530
to configure the ingress gateway to

00:06:07,830 --> 00:06:13,660
route to a backing rate service this

00:06:11,530 --> 00:06:16,870
diagram illustrates the SEO config

00:06:13,660 --> 00:06:19,210
involved in our map route example so sto

00:06:16,870 --> 00:06:22,720
has a set of controllers that act on

00:06:19,210 --> 00:06:25,330
this virtual service CR this gateway CR

00:06:22,720 --> 00:06:27,880
and other issue of custom resources to

00:06:25,330 --> 00:06:30,389
configure the set of Envoy proxies as

00:06:27,880 --> 00:06:30,389
desired

00:06:30,450 --> 00:06:37,330
so why sto it has a lot of features that

00:06:35,050 --> 00:06:39,770
address common concerns of developers

00:06:37,330 --> 00:06:42,349
and operators envoy

00:06:39,770 --> 00:06:44,780
proxy's have a small footprint and can

00:06:42,349 --> 00:06:47,509
support a lot of these common concerns

00:06:44,780 --> 00:06:50,690
so sto can configure them to do things

00:06:47,509 --> 00:06:53,180
like and MPLS everywhere you met rich

00:06:50,690 --> 00:06:56,240
metrics and shift traffic to new

00:06:53,180 --> 00:06:58,909
versions so while SEO has all these

00:06:56,240 --> 00:07:02,569
capabilities it can be hard to manage

00:06:58,909 --> 00:07:05,539
and configure so bringing the power of

00:07:02,569 --> 00:07:08,690
sto to the platform while giving people

00:07:05,539 --> 00:07:11,000
the CF experience by ironing out the

00:07:08,690 --> 00:07:13,190
rough edges and making it easier to

00:07:11,000 --> 00:07:16,669
configure is something we're really

00:07:13,190 --> 00:07:20,960
excited about so now Tim is gonna dive

00:07:16,669 --> 00:07:23,509
deeper into the route custom resource hi

00:07:20,960 --> 00:07:25,340
everyone it's me Tim again and I'm here

00:07:23,509 --> 00:07:27,800
to dig a little bit deeper into the

00:07:25,340 --> 00:07:29,409
route C Rd and route controller and how

00:07:27,800 --> 00:07:32,479
all this stuff works behind the scenes

00:07:29,409 --> 00:07:34,819
but before we begin with that I want to

00:07:32,479 --> 00:07:37,490
take a second to level set and lay down

00:07:34,819 --> 00:07:40,099
some vocabulary so you've heard us talk

00:07:37,490 --> 00:07:42,979
about CR DS and CRS and custom resources

00:07:40,099 --> 00:07:44,840
a lot in this talk and I'm gonna keep

00:07:42,979 --> 00:07:46,159
talking about it but I want to just make

00:07:44,840 --> 00:07:47,690
sure we're all on the same page with

00:07:46,159 --> 00:07:49,400
what that actually means if you already

00:07:47,690 --> 00:07:53,090
know this stuff that's great if you

00:07:49,400 --> 00:07:55,550
don't just know that a CR D is a way of

00:07:53,090 --> 00:07:58,069
defining a custom resource on the

00:07:55,550 --> 00:07:59,779
kubernetes api so like kubernetes

00:07:58,069 --> 00:08:01,969
supports a set of resources already

00:07:59,779 --> 00:08:04,849
things like pods services deployments

00:08:01,969 --> 00:08:06,889
all that stuff CR DS just lets us add

00:08:04,849 --> 00:08:09,620
our own idea of what a new resource

00:08:06,889 --> 00:08:11,000
could be in this case a route and it

00:08:09,620 --> 00:08:13,759
will behave pretty much just like those

00:08:11,000 --> 00:08:16,069
built-in resources and the cool thing

00:08:13,759 --> 00:08:17,930
about this is C IDs are automatically

00:08:16,069 --> 00:08:21,080
supported by clients at the kubernetes

00:08:17,930 --> 00:08:22,669
api so that's how nithya was able to

00:08:21,080 --> 00:08:25,509
just keep couple get routes and it

00:08:22,669 --> 00:08:27,860
worked just like anything else and

00:08:25,509 --> 00:08:30,440
lastly but maybe most important for us

00:08:27,860 --> 00:08:33,829
we found that CR DS provide a good

00:08:30,440 --> 00:08:34,940
boundary where it allows components to

00:08:33,829 --> 00:08:36,260
coordinate through the kubernetes api

00:08:34,940 --> 00:08:37,810
instead of talking to each other

00:08:36,260 --> 00:08:40,740
directly

00:08:37,810 --> 00:08:42,029
so without the way

00:08:40,740 --> 00:08:44,760
let's look a little bit closer at the

00:08:42,029 --> 00:08:46,320
route CRD the route CRD is just a

00:08:44,760 --> 00:08:49,080
declarative representation of a Cloud

00:08:46,320 --> 00:08:50,910
Foundry route like Mitya showed if

00:08:49,080 --> 00:08:53,250
you're familiar with what a v3 route

00:08:50,910 --> 00:08:54,690
looks like in Cloud Foundry this is

00:08:53,250 --> 00:08:57,450
pretty much the same thing it's just ya

00:08:54,690 --> 00:08:58,350
know instead of JSON but it's some

00:08:57,450 --> 00:09:01,020
premium yeah Mille

00:08:58,350 --> 00:09:02,640
and it enables components running on

00:09:01,020 --> 00:09:04,440
them to kubernetes cluster to discover

00:09:02,640 --> 00:09:06,660
information about how an app should be

00:09:04,440 --> 00:09:08,339
routed to without having to call out the

00:09:06,660 --> 00:09:09,930
cloud controller they can just talk to

00:09:08,339 --> 00:09:12,000
the kubernetes api like they're used to

00:09:09,930 --> 00:09:13,860
you today in Cloud Foundry the cloud

00:09:12,000 --> 00:09:15,959
controller API is the source of truth

00:09:13,860 --> 00:09:19,980
for pretty much all desired state in the

00:09:15,959 --> 00:09:21,600
platform it makes sense then that cloud

00:09:19,980 --> 00:09:23,610
controller is the source of truth for

00:09:21,600 --> 00:09:27,149
these route CRS that exists on the

00:09:23,610 --> 00:09:29,730
kubernetes @cd so any time a developer

00:09:27,149 --> 00:09:31,620
type CF create route CF map route delete

00:09:29,730 --> 00:09:33,720
route Cloud Controller is going to call

00:09:31,620 --> 00:09:38,580
out to the kubernetes and update those

00:09:33,720 --> 00:09:39,930
route CRS esna Tia showed around on its

00:09:38,580 --> 00:09:42,240
own is not enough to make something

00:09:39,930 --> 00:09:43,800
routable there are also services and

00:09:42,240 --> 00:09:45,420
virtual services involved there but

00:09:43,800 --> 00:09:48,020
where did these come from

00:09:45,420 --> 00:09:50,730
it's definitely not the cloud controller

00:09:48,020 --> 00:09:52,970
instead it's that route controller that

00:09:50,730 --> 00:09:55,280
she should

00:09:52,970 --> 00:09:57,350
if it fills the role of a kubernetes

00:09:55,280 --> 00:09:59,420
controller something that continuously

00:09:57,350 --> 00:10:01,210
watches for updates to a particular

00:09:59,420 --> 00:10:04,010
resource in this case a route and

00:10:01,210 --> 00:10:05,750
performs reconciliation on it and what

00:10:04,010 --> 00:10:07,430
is known as a reconciliation looper

00:10:05,750 --> 00:10:09,770
control loop or what have you

00:10:07,430 --> 00:10:12,650
anytime someone updates a route creates

00:10:09,770 --> 00:10:15,710
a route deletes a route route controller

00:10:12,650 --> 00:10:17,360
is notified and it will take the

00:10:15,710 --> 00:10:19,340
appropriate actions on updating the

00:10:17,360 --> 00:10:22,700
kubernetes services and virtual services

00:10:19,340 --> 00:10:24,140
that correspond with that route so let's

00:10:22,700 --> 00:10:26,810
just look a little bit closer at how a

00:10:24,140 --> 00:10:29,480
route maps to these resources starting

00:10:26,810 --> 00:10:32,000
with the service so here we have a route

00:10:29,480 --> 00:10:35,480
of two destinations that means when you

00:10:32,000 --> 00:10:38,690
hit multi app apps example.com this is

00:10:35,480 --> 00:10:40,790
going to be directed to app a we'll call

00:10:38,690 --> 00:10:43,100
it an app be the route controller will

00:10:40,790 --> 00:10:44,900
see that this route was created and then

00:10:43,100 --> 00:10:47,750
in turn make two services that

00:10:44,900 --> 00:10:50,000
correspond with it the coolest thing

00:10:47,750 --> 00:10:52,490
about this to me actually is

00:10:50,000 --> 00:10:54,770
note that the selector for these it's

00:10:52,490 --> 00:10:57,650
pretty much the same RAL controller just

00:10:54,770 --> 00:10:59,420
transparently copies over the selector

00:10:57,650 --> 00:11:02,030
that was defined on the route itself

00:10:59,420 --> 00:11:03,560
without having to know how this route

00:11:02,030 --> 00:11:06,980
actually maps to anything

00:11:03,560 --> 00:11:08,990
so today cloud controller considers a

00:11:06,980 --> 00:11:12,170
route mapping to be mapping between a

00:11:08,990 --> 00:11:15,980
route and an app based on its good and

00:11:12,170 --> 00:11:17,540
process type but imagine if that changes

00:11:15,980 --> 00:11:19,160
in the future maybe file controller

00:11:17,540 --> 00:11:21,560
wants to implement finer grained routing

00:11:19,160 --> 00:11:23,120
and introduced routing by process Guin

00:11:21,560 --> 00:11:25,670
instead in case you have multiple web

00:11:23,120 --> 00:11:27,110
processes for an app well all they have

00:11:25,670 --> 00:11:30,710
to do is update the selector on the

00:11:27,110 --> 00:11:32,450
existing routes and our controller will

00:11:30,710 --> 00:11:34,730
see that those resources were updated

00:11:32,450 --> 00:11:36,620
then just go ahead and make the change

00:11:34,730 --> 00:11:38,450
on the services it all will just happen

00:11:36,620 --> 00:11:43,460
without any coordination between our

00:11:38,450 --> 00:11:45,440
teams so similarly we create virtual

00:11:43,460 --> 00:11:48,170
services to let these things actually be

00:11:45,440 --> 00:11:50,690
externally routable so here we have two

00:11:48,170 --> 00:11:52,940
routes pretty much the same except for

00:11:50,690 --> 00:11:55,400
the second route is doing what we call

00:11:52,940 --> 00:11:57,650
context path routing where is routing

00:11:55,400 --> 00:12:02,510
all traffic to the slash admin path to a

00:11:57,650 --> 00:12:04,310
separate app we aggregate all routes for

00:12:02,510 --> 00:12:07,129
a given fully qualified domain name or

00:12:04,310 --> 00:12:09,980
fqdn into a single virtual so

00:12:07,129 --> 00:12:12,589
which handles the matching based on path

00:12:09,980 --> 00:12:15,169
prefix as well as any weights that were

00:12:12,589 --> 00:12:17,410
specified on the route

00:12:15,169 --> 00:12:19,810
and similar

00:12:17,410 --> 00:12:22,329
the services anytime destinations are

00:12:19,810 --> 00:12:27,970
updated on a route virtual service is

00:12:22,329 --> 00:12:30,490
going to be updated as well so that's

00:12:27,970 --> 00:12:32,829
cool and all but apart from some shiny

00:12:30,490 --> 00:12:34,660
new components like sto and Envoy and

00:12:32,829 --> 00:12:36,699
the fact that everything is yanil now

00:12:34,660 --> 00:12:38,560
instead of JSON how's this any better

00:12:36,699 --> 00:12:41,529
than what we have in CF for VMs today

00:12:38,560 --> 00:12:44,110
and that's a fair question

00:12:41,529 --> 00:12:45,790
honestly because right now we're pretty

00:12:44,110 --> 00:12:48,040
much focused on reaching feature parity

00:12:45,790 --> 00:12:49,360
with let that go router and existing

00:12:48,040 --> 00:12:53,230
container to container networking

00:12:49,360 --> 00:12:55,509
solutions support but what really

00:12:53,230 --> 00:12:59,649
excites me is what this can enable for

00:12:55,509 --> 00:13:02,350
the future and I just want to disclaim

00:12:59,649 --> 00:13:05,110
here that the following slides are

00:13:02,350 --> 00:13:07,689
purely hypothetical this is all stuff

00:13:05,110 --> 00:13:14,050
like kind of pie in the sky of what will

00:13:07,689 --> 00:13:16,180
be possible potentially so just read the

00:13:14,050 --> 00:13:19,660
title here swappable ingress flush

00:13:16,180 --> 00:13:23,139
service mesh like it's do like nithya

00:13:19,660 --> 00:13:25,060
mentioned earlier sto is it's really

00:13:23,139 --> 00:13:27,430
powerful it gives us a lot out of the

00:13:25,060 --> 00:13:29,170
box and it's allowed us to move fast

00:13:27,430 --> 00:13:32,529
because we don't have to implement those

00:13:29,170 --> 00:13:34,000
things ourselves but to achieve that

00:13:32,529 --> 00:13:35,769
power SEO ends up being pretty

00:13:34,000 --> 00:13:40,630
heavyweight and it's got a large

00:13:35,769 --> 00:13:42,910
footprint so for some users maybe all

00:13:40,630 --> 00:13:44,620
these features are overkill maybe it's

00:13:42,910 --> 00:13:47,380
just a small dev team and they don't

00:13:44,620 --> 00:13:50,560
need weighted routing or something or

00:13:47,380 --> 00:13:53,290
maybe some some operators out there are

00:13:50,560 --> 00:13:55,720
just like used to running other ingress

00:13:53,290 --> 00:13:58,269
controllers or surface nesters like link

00:13:55,720 --> 00:14:03,370
or D and sto is like not something they

00:13:58,269 --> 00:14:05,079
want to learn well traditionally Cloud

00:14:03,370 --> 00:14:07,480
Foundry has been pretty much like a

00:14:05,079 --> 00:14:10,149
one-size-fits-all platform as a service

00:14:07,480 --> 00:14:13,680
with a focus for better for worse on

00:14:10,149 --> 00:14:16,689
large enterprise development teams but

00:14:13,680 --> 00:14:18,160
Cloud Foundry for kubernetes it's it's

00:14:16,689 --> 00:14:20,379
not a baseball cap it doesn't need to be

00:14:18,160 --> 00:14:22,720
one size fits all and thanks to the

00:14:20,379 --> 00:14:24,660
router ID the ingress and service mesh

00:14:22,720 --> 00:14:28,809
part of that definitely doesn't need to

00:14:24,660 --> 00:14:30,370
the route C or D helps keep sto as an

00:14:28,809 --> 00:14:32,620
implementation detail

00:14:30,370 --> 00:14:35,800
users running CF map route aren't

00:14:32,620 --> 00:14:38,230
exposed to its complexity and this also

00:14:35,800 --> 00:14:41,140
makes it so that we could swap it out

00:14:38,230 --> 00:14:42,580
potentially in the future so here's an

00:14:41,140 --> 00:14:44,740
architecture diagram that's pretty

00:14:42,580 --> 00:14:46,420
similar to what we saw earlier with one

00:14:44,740 --> 00:14:48,370
major difference the state of creating

00:14:46,420 --> 00:14:49,960
issue of virtual services route

00:14:48,370 --> 00:14:54,150
controller is creating ingress

00:14:49,960 --> 00:14:56,830
controller resources and link Rd config

00:14:54,150 --> 00:14:59,470
that's it everything else on here is the

00:14:56,830 --> 00:15:00,700
same notice that the lines coming out

00:14:59,470 --> 00:15:03,339
from cloud from controller haven't

00:15:00,700 --> 00:15:05,350
changed at all and this is because at

00:15:03,339 --> 00:15:07,810
the end of the day everything is just

00:15:05,350 --> 00:15:09,670
talking to the kubernetes api it's

00:15:07,810 --> 00:15:10,990
mediating the interactions between cloud

00:15:09,670 --> 00:15:12,640
controller and route controller and

00:15:10,990 --> 00:15:15,310
route controller because it's just

00:15:12,640 --> 00:15:19,960
writing out kubernetes resources very

00:15:15,310 --> 00:15:22,300
little of it has to change so that's it

00:15:19,960 --> 00:15:24,490
we've seen the reconciliation loop and

00:15:22,300 --> 00:15:27,490
how route controller is converting

00:15:24,490 --> 00:15:29,860
routes into virtual services and

00:15:27,490 --> 00:15:31,870
kubernetes services and we've seen some

00:15:29,860 --> 00:15:34,480
of the possibilities that the future

00:15:31,870 --> 00:15:37,900
might hold for these components but I

00:15:34,480 --> 00:15:39,250
just want to say one more thing as a

00:15:37,900 --> 00:15:42,160
contributor to cloud foundry on

00:15:39,250 --> 00:15:44,740
kubernetes and a previous contributor to

00:15:42,160 --> 00:15:46,810
cloud foundry on Bosh I just want to

00:15:44,740 --> 00:15:48,220
reiterate that I found Cloud Foundry for

00:15:46,810 --> 00:15:50,500
kubernetes just so much more

00:15:48,220 --> 00:15:52,690
approachable I no longer have to worry

00:15:50,500 --> 00:15:55,570
about writing bot releases or managing a

00:15:52,690 --> 00:15:57,160
boss director and an environment just to

00:15:55,570 --> 00:15:59,320
try out some small changes I might want

00:15:57,160 --> 00:16:02,530
to make to a component with CF for

00:15:59,320 --> 00:16:04,540
kubernetes you just got to change the

00:16:02,530 --> 00:16:07,060
code build a new docker image for the

00:16:04,540 --> 00:16:08,770
component cube cut' will apply and your

00:16:07,060 --> 00:16:10,720
changes are out there in minutes it's a

00:16:08,770 --> 00:16:12,910
really fast feedback loop and I think

00:16:10,720 --> 00:16:14,320
it's a lot more approachable for folks

00:16:12,910 --> 00:16:16,420
in the community who might want to get

00:16:14,320 --> 00:16:19,120
involved so if you've seen anything

00:16:16,420 --> 00:16:22,180
today that sparked any ideas like maybe

00:16:19,120 --> 00:16:23,950
you want to try working on route

00:16:22,180 --> 00:16:26,110
controller and swapping out is do it for

00:16:23,950 --> 00:16:28,600
something else or maybe you want to just

00:16:26,110 --> 00:16:31,240
like bypass cloud controlling cue cuddle

00:16:28,600 --> 00:16:33,100
apply I don't know I did encourage you

00:16:31,240 --> 00:16:36,190
all to experiment and dream big and just

00:16:33,100 --> 00:16:37,990
try hacking something together well

00:16:36,190 --> 00:16:39,850
that's about it thanks for tuning in

00:16:37,990 --> 00:16:41,980
everyone if you'd like to keep in touch

00:16:39,850 --> 00:16:43,690
with what we're working on feel free to

00:16:41,980 --> 00:16:44,110
hit us up in Cloud Foundry slack in the

00:16:43,690 --> 00:16:46,959
network

00:16:44,110 --> 00:16:48,339
channel or up on over to github and you

00:16:46,959 --> 00:16:50,860
can follow along with our progress in

00:16:48,339 --> 00:16:53,589
the CF caves networking repo now we're

00:16:50,860 --> 00:16:55,800
available for some live Q&A so see you

00:16:53,589 --> 00:16:55,800

YouTube URL: https://www.youtube.com/watch?v=A8fvYySV5WU


