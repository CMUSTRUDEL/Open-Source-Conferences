Title: CRD-ifying Cloud Foundry for Kubernetes - Angela Chin & Connor Braa, VMware
Publication date: 2020-06-14
Playlist: Cloud Foundry Summit NA 2020 - Virtual
Description: 
	CRD-ifying Cloud Foundry for Kubernetes - Angela Chin & Connor Braa, VMware 

For more info: https://www.cloudfoundry.org/ 

Over the past year, there has been major effort invested in re-platforming Cloud Foundry to run on Kubernetes. As part of this re-architecture, the idea of utilizing Custom Resource Definitions (CRDs) has come to the forefront of discussion. In this session, Angela and Connor will examine why CRDs are so compelling to use as a core component of the future cf-for-k8s. We will highlight the benefits of a CRD-centric approach for users, application developers, and contributors and offer some thoughts on what a CRD-centric cf-for-k8s might look like. Attendees should leave with a strong understanding of why and how they might utilize CRDs.
Captions: 
	00:00:00,000 --> 00:00:05,160
hi everybody thanks for joining us today

00:00:02,610 --> 00:00:07,290
my name is Angela and with me is Connor

00:00:05,160 --> 00:00:11,370
and we'll be talking about CR deifying

00:00:07,290 --> 00:00:13,110
Cloud Foundry for kubernetes so in the

00:00:11,370 --> 00:00:14,790
next 12 minutes or so we're going to

00:00:13,110 --> 00:00:17,789
talk about what the current state a CF

00:00:14,790 --> 00:00:20,550
for kids is and then explore why exactly

00:00:17,789 --> 00:00:22,320
we think CR DS is the future of the

00:00:20,550 --> 00:00:24,570
project well then look at what's

00:00:22,320 --> 00:00:26,970
happening now in relation to CR DS as

00:00:24,570 --> 00:00:29,789
well as look at the near future

00:00:26,970 --> 00:00:34,110
about what could happen with integration

00:00:29,789 --> 00:00:36,059
for CR DS so hopefully you are all able

00:00:34,110 --> 00:00:38,760
to attend the previous session where

00:00:36,059 --> 00:00:41,010
Erica Andrew did a deep dive into CF for

00:00:38,760 --> 00:00:43,140
kids but if not we're going to do a

00:00:41,010 --> 00:00:45,629
quick refresher on what exactly this

00:00:43,140 --> 00:00:48,210
project is so CF for kate's is a

00:00:45,629 --> 00:00:51,469
deployment artifact that allows us to

00:00:48,210 --> 00:00:55,440
run Cloud Foundry on top of kubernetes

00:00:51,469 --> 00:00:57,989
this project has two main goals one is

00:00:55,440 --> 00:01:00,840
to be more kubernetes native so

00:00:57,989 --> 00:01:03,750
leveraging kubernetes native features

00:01:00,840 --> 00:01:05,760
for Cloud Foundry and then second it

00:01:03,750 --> 00:01:08,790
looks to build on top of kubernetes

00:01:05,760 --> 00:01:12,930
ecosystem projects such as stok pack

00:01:08,790 --> 00:01:16,799
fluent II and Envoy so that we're able

00:01:12,930 --> 00:01:19,670
to focus on really some of the key CF

00:01:16,799 --> 00:01:21,960
features rather than additional

00:01:19,670 --> 00:01:24,930
extensibility and benefits that each of

00:01:21,960 --> 00:01:26,850
these different projects provides so

00:01:24,930 --> 00:01:29,220
when we think about the components that

00:01:26,850 --> 00:01:30,540
are running on a kubernetes cluster when

00:01:29,220 --> 00:01:32,759
you deploy CF for Kade's

00:01:30,540 --> 00:01:35,790
we can think of it in sort of three main

00:01:32,759 --> 00:01:37,140
buckets first and foremost the Cloud

00:01:35,790 --> 00:01:39,270
Foundry components that we've

00:01:37,140 --> 00:01:43,110
historically known and loved such as

00:01:39,270 --> 00:01:45,000
copy and UA a secondly some additional

00:01:43,110 --> 00:01:47,549
components are either Cooper days native

00:01:45,000 --> 00:01:49,560
or created to be a bridge between the

00:01:47,549 --> 00:01:51,930
historical CBF components and the

00:01:49,560 --> 00:01:54,060
underlying Cabernets infrastructure so I

00:01:51,930 --> 00:01:56,549
mean ek pack and SEO as some examples

00:01:54,060 --> 00:01:58,740
and then lastly you have your

00:01:56,549 --> 00:02:03,270
application workloads themselves running

00:01:58,740 --> 00:02:05,790
on top of the cluster now this works

00:02:03,270 --> 00:02:07,890
it's great it allows us to pull a Cloud

00:02:05,790 --> 00:02:09,690
Foundry on top of kubernetes but only

00:02:07,890 --> 00:02:12,450
think back to the goal is see affricates

00:02:09,690 --> 00:02:13,440
we want to zero in on the idea of being

00:02:12,450 --> 00:02:16,020
Cooper days Nate

00:02:13,440 --> 00:02:18,180
and we noticed that when we look at this

00:02:16,020 --> 00:02:20,430
diagram there are some components that

00:02:18,180 --> 00:02:23,580
are historical parts of Cloud Foundry

00:02:20,430 --> 00:02:27,120
I've really been lifted and shifted from

00:02:23,580 --> 00:02:30,750
VMs to pods running on kubernetes and so

00:02:27,120 --> 00:02:34,140
to really try to embrace the philosophy

00:02:30,750 --> 00:02:36,510
of being kubernetes native it makes us

00:02:34,140 --> 00:02:38,460
to ask the question what would it look

00:02:36,510 --> 00:02:40,170
like for these different components and

00:02:38,460 --> 00:02:42,360
the Cloud Foundry architecture as a

00:02:40,170 --> 00:02:45,720
whole to be more cooper neighs native

00:02:42,360 --> 00:02:51,000
and this is where CR DS come into play

00:02:45,720 --> 00:02:54,450
so CR D is represent custom resource

00:02:51,000 --> 00:02:56,790
definitions which are a kubernetes

00:02:54,450 --> 00:03:00,900
resource that allows you to define a

00:02:56,790 --> 00:03:03,210
custom resource a constant resource is

00:03:00,900 --> 00:03:04,980
an extension of the kubernetes api so

00:03:03,210 --> 00:03:07,920
essentially custom resource definitions

00:03:04,980 --> 00:03:10,890
are a way for us to establish api

00:03:07,920 --> 00:03:14,190
contracts using kubernetes as the

00:03:10,890 --> 00:03:16,890
datastore and api and so now that we've

00:03:14,190 --> 00:03:20,130
level set on what both cf4 kate's and CR

00:03:16,890 --> 00:03:23,040
g's are well now go and take a deeper

00:03:20,130 --> 00:03:25,380
dive into why exactly we think that cre

00:03:23,040 --> 00:03:27,959
DS are going to be a critical part of

00:03:25,380 --> 00:03:31,920
the future of CF for kids and with that

00:03:27,959 --> 00:03:32,850
I'll hand it over to Connor hi first

00:03:31,920 --> 00:03:35,250
let's talk a little bit about

00:03:32,850 --> 00:03:38,190
declarative platform management which

00:03:35,250 --> 00:03:39,870
one might think of as CF administrator

00:03:38,190 --> 00:03:41,070
interfaces with queue control for a long

00:03:39,870 --> 00:03:43,380
time

00:03:41,070 --> 00:03:45,989
CF administrators have wanted more

00:03:43,380 --> 00:03:48,900
declarative interfaces for managing

00:03:45,989 --> 00:03:51,000
their platforms and while Bosch offered

00:03:48,900 --> 00:03:55,370
some of those it's much easier for us to

00:03:51,000 --> 00:03:59,430
offer them in a or kubernetes native way

00:03:55,370 --> 00:04:03,080
so traditionally we'll talk here about

00:03:59,430 --> 00:04:05,220
build pack management but traditionally

00:04:03,080 --> 00:04:07,380
when when an administrator wants to add

00:04:05,220 --> 00:04:10,590
a new build pack to the platform they'll

00:04:07,380 --> 00:04:12,270
run CF create build pack no GS and the

00:04:10,590 --> 00:04:14,459
CF CLI will go and talk to the Cloud

00:04:12,270 --> 00:04:15,140
Controller API upload some packages the

00:04:14,459 --> 00:04:22,410
blobstore

00:04:15,140 --> 00:04:24,419
and make an entry within ccdb but parts

00:04:22,410 --> 00:04:26,669
of this workflow aren't very declarative

00:04:24,419 --> 00:04:29,789
for example when you run

00:04:26,669 --> 00:04:31,499
if you want to change your auto-detects

00:04:29,789 --> 00:04:33,539
order for your bill packs you need to

00:04:31,499 --> 00:04:35,520
run CF update bill pack with a position

00:04:33,539 --> 00:04:39,029
argument but the ordering of them

00:04:35,520 --> 00:04:43,020
depends largely on what else is in that

00:04:39,029 --> 00:04:45,659
list and so the interface is not very

00:04:43,020 --> 00:04:47,340
declarative with CRD is we start to

00:04:45,659 --> 00:04:49,590
break all of these different steps down

00:04:47,340 --> 00:04:52,889
we don't need to just talk to the CF API

00:04:49,590 --> 00:04:54,689
but instead we can upload our cloud

00:04:52,889 --> 00:04:58,529
native build pack package directly to a

00:04:54,689 --> 00:05:01,199
container registry and then apply a nuke

00:04:58,529 --> 00:05:03,379
a pack builder to the kubernetes api in

00:05:01,199 --> 00:05:09,810
order to declare a whole new list of

00:05:03,379 --> 00:05:12,000
ordered build packs that builder can

00:05:09,810 --> 00:05:14,669
then reference the the image that we

00:05:12,000 --> 00:05:18,029
just uploaded to the registry previously

00:05:14,669 --> 00:05:19,310
in its yeah mo and and what just like

00:05:18,029 --> 00:05:22,169
that we've created a whole new

00:05:19,310 --> 00:05:24,000
completely declarative interface for the

00:05:22,169 --> 00:05:28,319
management a build pack and build packs

00:05:24,000 --> 00:05:31,560
in there auto-detection order when

00:05:28,319 --> 00:05:35,310
pushing this builder gets referenced by

00:05:31,560 --> 00:05:39,569
the K pack image that the cloud

00:05:35,310 --> 00:05:42,330
controller API creates so we we push an

00:05:39,569 --> 00:05:44,310
app the cloud controller hands the

00:05:42,330 --> 00:05:46,949
package off to a blob store the

00:05:44,310 --> 00:05:49,500
kubernetes api will then accept an image

00:05:46,949 --> 00:05:52,800
from the cloud controller and the image

00:05:49,500 --> 00:05:54,810
itself another K pack CRD can reference

00:05:52,800 --> 00:05:59,129
the builder that the administrator

00:05:54,810 --> 00:06:01,919
created earlier and and use the build

00:05:59,129 --> 00:06:03,449
packs in a registry that it points to to

00:06:01,919 --> 00:06:09,089
build the package that was uploaded to

00:06:03,449 --> 00:06:11,449
the platform by CF push beyond platform

00:06:09,089 --> 00:06:14,129
management there's also great hope for

00:06:11,449 --> 00:06:16,979
creating new declarative interfaces for

00:06:14,129 --> 00:06:18,689
app management and these would look like

00:06:16,979 --> 00:06:23,339
CF app developer interface with Q

00:06:18,689 --> 00:06:26,069
control however there's some complexity

00:06:23,339 --> 00:06:28,279
here in particular authorization is very

00:06:26,069 --> 00:06:30,569
difficult to manage within this space

00:06:28,279 --> 00:06:32,370
administrator interfaces are easier

00:06:30,569 --> 00:06:35,669
because often see if administrators have

00:06:32,370 --> 00:06:37,080
access to the kubernetes platforms that

00:06:35,669 --> 00:06:39,990
they're running on but see if app

00:06:37,080 --> 00:06:42,620
developers don't necessarily

00:06:39,990 --> 00:06:45,510
and so this makes it so that

00:06:42,620 --> 00:06:47,070
particularly things that are writable

00:06:45,510 --> 00:06:49,290
things that we might want to modify are

00:06:47,070 --> 00:06:50,760
hard and dangerous to implement we

00:06:49,290 --> 00:06:55,380
probably won't be seeing any of them

00:06:50,760 --> 00:06:58,440
very things that might be like CF Space

00:06:55,380 --> 00:07:01,080
manifests as a CRT or CF apps as a CRT

00:06:58,440 --> 00:07:02,820
are very exciting and things that we'd

00:07:01,080 --> 00:07:05,520
love to build but first would figure out

00:07:02,820 --> 00:07:09,210
how to get app developers authorized to

00:07:05,520 --> 00:07:12,510
the platform the kubernetes platform

00:07:09,210 --> 00:07:15,930
that is however we already have a lot of

00:07:12,510 --> 00:07:17,730
readable realities and for staging and

00:07:15,930 --> 00:07:20,790
building that means things like kpac

00:07:17,730 --> 00:07:22,160
images and custom builders and these

00:07:20,790 --> 00:07:25,740
things that we've been talking about

00:07:22,160 --> 00:07:28,260
pods that they create for runtime

00:07:25,740 --> 00:07:30,330
compute for apps this means the actual

00:07:28,260 --> 00:07:32,880
stateful sets and pods created by

00:07:30,330 --> 00:07:37,260
ireenie in the process of starting to

00:07:32,880 --> 00:07:40,590
run an app and for network ingress this

00:07:37,260 --> 00:07:42,150
means the routes erd and for operators

00:07:40,590 --> 00:07:43,740
and other people who have access to the

00:07:42,150 --> 00:07:45,990
communities api all of these things can

00:07:43,740 --> 00:07:47,520
already be read access their statuses

00:07:45,990 --> 00:07:50,880
examine their errors seeing their

00:07:47,520 --> 00:07:53,730
configuration and so on inspected and I

00:07:50,880 --> 00:07:55,590
think that's pretty exciting and with

00:07:53,730 --> 00:07:57,350
that I'll hand it off to Angela to talk

00:07:55,590 --> 00:08:02,550
a little bit more about extensibility

00:07:57,350 --> 00:08:05,700
great so already we see a lot of great

00:08:02,550 --> 00:08:09,030
possibilities in regards to CR DS with

00:08:05,700 --> 00:08:12,180
both platform and application developers

00:08:09,030 --> 00:08:15,150
being able to manage their different

00:08:12,180 --> 00:08:17,100
components declaratively but in addition

00:08:15,150 --> 00:08:20,160
we can also see CRTs as an entry point

00:08:17,100 --> 00:08:24,750
to making the CF ecosystem more

00:08:20,160 --> 00:08:27,030
extensible so let's take one example to

00:08:24,750 --> 00:08:31,440
understand what exactly we mean by

00:08:27,030 --> 00:08:33,210
extensibility with respect to CR DS so

00:08:31,440 --> 00:08:35,580
in this case we're going to look at the

00:08:33,210 --> 00:08:38,850
example of ingress routing currently and

00:08:35,580 --> 00:08:41,460
CF for gates when you create around so

00:08:38,850 --> 00:08:43,800
you run CF create route you'll be

00:08:41,460 --> 00:08:46,950
reaching out to copy which is actually

00:08:43,800 --> 00:08:50,190
already doing the work to create a route

00:08:46,950 --> 00:08:51,990
custom resource in the cases API the

00:08:50,190 --> 00:08:53,760
networking team has done a lot of work

00:08:51,990 --> 00:08:55,380
in regards not only

00:08:53,760 --> 00:08:57,120
creating the route customer resource

00:08:55,380 --> 00:08:59,910
definition but also the corresponding

00:08:57,120 --> 00:09:02,130
ROC controller that's able to watch for

00:08:59,910 --> 00:09:04,680
these route custom resources and based

00:09:02,130 --> 00:09:07,620
on the creation of them create SCO

00:09:04,680 --> 00:09:10,290
configuration SEO is also running on our

00:09:07,620 --> 00:09:12,990
cluster and is able to see this

00:09:10,290 --> 00:09:15,450
configuration and update the Envoy to

00:09:12,990 --> 00:09:19,140
know where exactly to forward requests

00:09:15,450 --> 00:09:21,750
to so that when you try to actually make

00:09:19,140 --> 00:09:24,150
a connection to your application you go

00:09:21,750 --> 00:09:28,680
through the Envoy and are successfully

00:09:24,150 --> 00:09:31,860
ingress routed to the application now in

00:09:28,680 --> 00:09:34,650
this workflow we can pinpoint certain

00:09:31,860 --> 00:09:37,080
components such as the route controller

00:09:34,650 --> 00:09:39,600
is do an envoy and ask ourselves a very

00:09:37,080 --> 00:09:43,080
basic question could we swap these out

00:09:39,600 --> 00:09:45,960
for another ingress solution that is the

00:09:43,080 --> 00:09:49,710
route custom resource is the contract

00:09:45,960 --> 00:09:53,220
between Cappy and any networking team

00:09:49,710 --> 00:09:55,590
and instead you simply have to program a

00:09:53,220 --> 00:09:58,320
new controller that will create custom

00:09:55,590 --> 00:10:00,990
resources for some other ingress project

00:09:58,320 --> 00:10:01,560
so one such option would be in the

00:10:00,990 --> 00:10:04,710
future

00:10:01,560 --> 00:10:06,990
swapping out these three components to

00:10:04,710 --> 00:10:08,730
instead be using contour and this

00:10:06,990 --> 00:10:12,060
updated route controller that's being

00:10:08,730 --> 00:10:14,190
swapped out we'll be watching for CRS

00:10:12,060 --> 00:10:18,810
and instead creating contour config

00:10:14,190 --> 00:10:21,900
instead of SEO configuration in addition

00:10:18,810 --> 00:10:25,380
to extensibility we can also see that

00:10:21,900 --> 00:10:27,720
using custom resources as the mechanism

00:10:25,380 --> 00:10:29,970
for understanding what's happening in

00:10:27,720 --> 00:10:34,050
Cloud Foundry for gates also exposes a

00:10:29,970 --> 00:10:36,780
lot of benefits with kubernetes tooling

00:10:34,050 --> 00:10:39,720
so the communities community has done a

00:10:36,780 --> 00:10:42,810
lot of work in creating some great tools

00:10:39,720 --> 00:10:44,970
for both developers and operators to

00:10:42,810 --> 00:10:47,100
understand what's going on in a

00:10:44,970 --> 00:10:48,900
kubernetes cluster and so there's a rich

00:10:47,100 --> 00:10:52,920
ecosystem that we can take advantage of

00:10:48,900 --> 00:10:54,960
if we assume that we have the current

00:10:52,920 --> 00:10:57,330
state of the world in the kubernetes

00:10:54,960 --> 00:11:00,240
cluster as custom resource definitions

00:10:57,330 --> 00:11:00,930
so we don't have enough time to take a

00:11:00,240 --> 00:11:03,510
look

00:11:00,930 --> 00:11:05,940
demoing some of these tools but there's

00:11:03,510 --> 00:11:07,110
a variety of web GUI such as auxin in

00:11:05,940 --> 00:11:10,620
addition to

00:11:07,110 --> 00:11:12,930
CLI tools such as canines that provide a

00:11:10,620 --> 00:11:20,730
lot of great features to understanding

00:11:12,930 --> 00:11:22,950
what's going on in your system so today

00:11:20,730 --> 00:11:25,860
and in early versions of CF Cates we are

00:11:22,950 --> 00:11:31,020
already utilizing CR D's in several ways

00:11:25,860 --> 00:11:33,860
that's we've been over particularly for

00:11:31,020 --> 00:11:38,100
builds k pack has images custom builders

00:11:33,860 --> 00:11:40,350
and builds and for networking dress

00:11:38,100 --> 00:11:46,560
routes to a great job of representing

00:11:40,350 --> 00:11:48,420
what we can wrap traffic to in addition

00:11:46,560 --> 00:11:50,610
to what we currently have available as

00:11:48,420 --> 00:11:53,220
custom resources there's also a lot of

00:11:50,610 --> 00:11:56,940
work going on right now to provide a

00:11:53,220 --> 00:11:59,640
variety of additional CF resources as CR

00:11:56,940 --> 00:12:02,520
DS in the near future some of these

00:11:59,640 --> 00:12:04,620
include work that copies doing to

00:12:02,520 --> 00:12:07,800
represent droplets as custom resources

00:12:04,620 --> 00:12:10,050
in cloud foundry services teams are

00:12:07,800 --> 00:12:12,900
looking at what it would mean in to

00:12:10,050 --> 00:12:15,480
actually be having services represented

00:12:12,900 --> 00:12:17,430
as custom resource definitions and in

00:12:15,480 --> 00:12:19,590
fact are looking at even using existing

00:12:17,430 --> 00:12:22,410
projects running on kubernetes such a

00:12:19,590 --> 00:12:25,560
Service Catalog as a means of doing so

00:12:22,410 --> 00:12:27,570
and then lastly Irena has started to

00:12:25,560 --> 00:12:30,660
look at what it would mean to shift the

00:12:27,570 --> 00:12:34,350
contract between itself and copy to be

00:12:30,660 --> 00:12:40,020
one using CR DS it's the the current

00:12:34,350 --> 00:12:45,060
model where we have a OPI layer to deal

00:12:40,020 --> 00:12:48,450
with LR piece and with that thank you so

00:12:45,060 --> 00:12:51,120
much for attending our session we're

00:12:48,450 --> 00:12:53,990
more than happy to be answering any

00:12:51,120 --> 00:12:53,990

YouTube URL: https://www.youtube.com/watch?v=psTGfXKhGeY


