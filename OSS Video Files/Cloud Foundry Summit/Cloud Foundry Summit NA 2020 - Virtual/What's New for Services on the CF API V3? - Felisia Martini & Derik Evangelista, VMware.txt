Title: What's New for Services on the CF API V3? - Felisia Martini & Derik Evangelista, VMware
Publication date: 2020-06-14
Playlist: Cloud Foundry Summit NA 2020 - Virtual
Description: 
	What's New for Services on the CF API V3? - Felisia Martini & Derik Evangelista, VMware 

For more info: https://www.cloudfoundry.org/ 

The services endpoints on the Cloud Controller API have been a general source of pain for consumers. Some of the problems with the V2 implementation include: needing several requests to get basic information about a service or service instance, multiple endpoints to manage the same resource, leaking abstractions between the API and the Service Broker, and lack of features like blocking during service instance creation. This contributes to frustrate not only API consumers but also CLI/GUI users.

The SAPI team is working on improving many aspects of the services API with V3 of the cloud controller API. The new services endpoints provide much more flexibility and control over the workflows available for service offerings and service instance management. Many of these features and improvements are already available as experimental APIs on recent versions of Cloud Foundry.
Captions: 
	00:00:00,000 --> 00:00:05,670
hello and welcome to our talk I'm Derek

00:00:02,580 --> 00:00:07,740
and I'm Felicia and you're both soft

00:00:05,670 --> 00:00:10,050
engineers at VMware and you here today

00:00:07,740 --> 00:00:16,890
to talk about what's new first services

00:00:10,050 --> 00:00:18,390
in the early 3d API so it's briefly the

00:00:16,890 --> 00:00:21,119
agenda we're going to talk about some of

00:00:18,390 --> 00:00:22,830
the new concepts available on v3 we'll

00:00:21,119 --> 00:00:25,710
talk about service brokers we talked

00:00:22,830 --> 00:00:27,900
about service plans and offerings we

00:00:25,710 --> 00:00:30,330
also better talk about service instances

00:00:27,900 --> 00:00:32,369
what's new there user provider service

00:00:30,330 --> 00:00:34,170
instances service bindings and anyway

00:00:32,369 --> 00:00:36,809
we'll touch a little bit on what's

00:00:34,170 --> 00:00:40,879
coming next for the CLI and what's the

00:00:36,809 --> 00:00:40,879
new experience could be for the Sailor

00:00:41,390 --> 00:00:45,899
first if you're curious about why

00:00:44,070 --> 00:00:47,940
between there is this very good talk on

00:00:45,899 --> 00:00:50,160
the last chef summit it was actually a

00:00:47,940 --> 00:00:53,670
panel discussion with the between a

00:00:50,160 --> 00:00:56,430
celebration team where they go through a

00:00:53,670 --> 00:00:59,280
few of the reasons behind this

00:00:56,430 --> 00:01:02,699
refactoring so if you're curious go

00:00:59,280 --> 00:01:04,170
there it's pretty good so let's start by

00:01:02,699 --> 00:01:06,450
talking about synchronous and

00:01:04,170 --> 00:01:07,890
asynchronous operations so what are

00:01:06,450 --> 00:01:10,049
synchronous operations singham's

00:01:07,890 --> 00:01:13,200
operations are that one that block once

00:01:10,049 --> 00:01:14,820
a request is received so Kathy will

00:01:13,200 --> 00:01:16,530
receive that request and will not do

00:01:14,820 --> 00:01:19,290
anything until that request is

00:01:16,530 --> 00:01:21,210
completely fulfilled by by the service

00:01:19,290 --> 00:01:22,710
broker for example a synchronous

00:01:21,210 --> 00:01:25,170
operators are the one that's the cult

00:01:22,710 --> 00:01:28,140
controller will return before actually

00:01:25,170 --> 00:01:31,909
finish it up before they all the process

00:01:28,140 --> 00:01:35,009
has been done to that particular request

00:01:31,909 --> 00:01:38,250
for some of the services or the services

00:01:35,009 --> 00:01:40,560
part of the API operations usually

00:01:38,250 --> 00:01:42,990
involve the service procurement oh stop

00:01:40,560 --> 00:01:45,420
it defines a pre-prom called steps and

00:01:42,990 --> 00:01:47,850
completes that platform stop entry

00:01:45,420 --> 00:01:51,420
brokers can provide to determine how the

00:01:47,850 --> 00:01:53,939
broker should respond on the two

00:01:51,420 --> 00:01:56,610
endpoints we had a quite inconsistent

00:01:53,939 --> 00:01:59,219
approach approach to how we deal with

00:01:56,610 --> 00:02:00,930
that a few of our endpoints like the

00:01:59,219 --> 00:02:01,560
create service instance endpoints would

00:02:00,930 --> 00:02:03,930
accept

00:02:01,560 --> 00:02:06,270
optional steps in complete period forum

00:02:03,930 --> 00:02:08,550
that would then be passed directly to

00:02:06,270 --> 00:02:10,850
the broker we had some other end points

00:02:08,550 --> 00:02:12,050
that would synchronously call the broker

00:02:10,850 --> 00:02:14,360
and I have some other end points that

00:02:12,050 --> 00:02:18,740
would potentially talk is synchronous to

00:02:14,360 --> 00:02:21,620
the broker on v3 we decided to simplify

00:02:18,740 --> 00:02:23,900
those interactions by taking the simple

00:02:21,620 --> 00:02:25,790
approach of is any communication

00:02:23,900 --> 00:02:27,770
required with the broker if that's the

00:02:25,790 --> 00:02:29,480
case it will be a synchronous so the

00:02:27,770 --> 00:02:32,090
clients that is talking to Kathy will

00:02:29,480 --> 00:02:34,940
receive achoo achoo accepted unless

00:02:32,090 --> 00:02:38,150
request is invalid and all that with a

00:02:34,940 --> 00:02:40,280
job that they can use to pull any of any

00:02:38,150 --> 00:02:42,950
requests to the broker will be sent with

00:02:40,280 --> 00:02:45,620
their subs in complete equals true so we

00:02:42,950 --> 00:02:47,600
cap you always request asynchronous when

00:02:45,620 --> 00:02:49,490
possible for the broker on the other

00:02:47,600 --> 00:02:52,220
hand when communication is not required

00:02:49,490 --> 00:02:57,340
with the broker it will usually always

00:02:52,220 --> 00:02:59,900
be synchronous and will return no job

00:02:57,340 --> 00:03:01,250
yet so it's like different resources

00:02:59,900 --> 00:03:03,890
changed slightly different on how

00:03:01,250 --> 00:03:05,240
they're gonna do the sync vs and async

00:03:03,890 --> 00:03:08,120
so if you're curious to know more I

00:03:05,240 --> 00:03:10,460
recommend going to the to the API Docs

00:03:08,120 --> 00:03:16,040
for each particular end points that

00:03:10,460 --> 00:03:20,210
should tell you what you expect next up

00:03:16,040 --> 00:03:21,590
in our list is service offerings so this

00:03:20,210 --> 00:03:23,180
might be actually the first time we talk

00:03:21,590 --> 00:03:25,910
about service offerings on which you

00:03:23,180 --> 00:03:30,310
service offering was actually there is

00:03:25,910 --> 00:03:33,140
service resource and as you may have

00:03:30,310 --> 00:03:34,940
noticed the service word is a little bit

00:03:33,140 --> 00:03:37,610
overloaded it sometimes I say the scenes

00:03:34,940 --> 00:03:40,310
it sometimes service offering your

00:03:37,610 --> 00:03:42,320
service plans their service access their

00:03:40,310 --> 00:03:44,450
services everywhere so if you try to

00:03:42,320 --> 00:03:47,510
reduce the some ambiguity at least on

00:03:44,450 --> 00:03:49,910
their API endpoints we decided to rename

00:03:47,510 --> 00:03:52,070
services to what they actually are which

00:03:49,910 --> 00:03:53,990
is service offerings which is like the

00:03:52,070 --> 00:03:56,110
services that are available for

00:03:53,990 --> 00:03:59,020
developers to use in the platform

00:03:56,110 --> 00:04:03,440
hopefully it's a little bit more clear

00:03:59,020 --> 00:04:06,440
yes there is some CLI commands that are

00:04:03,440 --> 00:04:11,050
still called service but eventually when

00:04:06,440 --> 00:04:11,050
we hope that those go change also change

00:04:11,800 --> 00:04:15,450
service offering

00:04:13,170 --> 00:04:17,250
next series options have service plans

00:04:15,450 --> 00:04:19,950
not a lot has changed in the service

00:04:17,250 --> 00:04:22,770
plans themselves but we want to use

00:04:19,950 --> 00:04:24,690
service plans to bring up some of the

00:04:22,770 --> 00:04:27,389
other changes that which we introduced

00:04:24,690 --> 00:04:30,330
that would make life of API users a

00:04:27,389 --> 00:04:32,820
little bit easier and for that who

00:04:30,330 --> 00:04:34,680
considered ACF marketplace demand so

00:04:32,820 --> 00:04:37,560
marketplace it's simple commands that

00:04:34,680 --> 00:04:39,360
should should be simple that runs get a

00:04:37,560 --> 00:04:41,150
list of services and outputs the

00:04:39,360 --> 00:04:44,790
services the plans and the broker names

00:04:41,150 --> 00:04:48,330
on v2 it's achieved by sending a get

00:04:44,790 --> 00:04:50,040
request to that space services endpoints

00:04:48,330 --> 00:04:52,080
which is an endpoint that is created

00:04:50,040 --> 00:04:54,300
basically for this marketplace commands

00:04:52,080 --> 00:04:57,419
and for each one of the service we send

00:04:54,300 --> 00:04:59,910
a get request to get a service once why

00:04:57,419 --> 00:05:02,729
are in theory it doesn't look that bad

00:04:59,910 --> 00:05:05,100
it has a few API problems a few design

00:05:02,729 --> 00:05:06,960
problems so first is very shoddy to have

00:05:05,100 --> 00:05:08,430
the more services you have the more

00:05:06,960 --> 00:05:10,169
requests you need to send because they

00:05:08,430 --> 00:05:12,720
send one request for service to get the

00:05:10,169 --> 00:05:15,440
service ones I also brave little

00:05:12,720 --> 00:05:19,169
obstructions we added that space

00:05:15,440 --> 00:05:21,240
services endpoint just because the

00:05:19,169 --> 00:05:23,460
alternative was a little bit too bad and

00:05:21,240 --> 00:05:27,030
the commands would like to take ages to

00:05:23,460 --> 00:05:29,760
complete and another another problem is

00:05:27,030 --> 00:05:32,250
that in general is that when you get

00:05:29,760 --> 00:05:35,520
things from when you gather services you

00:05:32,250 --> 00:05:37,200
get periods a set of names for their

00:05:35,520 --> 00:05:39,960
related resources and then usually

00:05:37,200 --> 00:05:44,550
clients want names when they one show

00:05:39,960 --> 00:05:46,380
that to users so what we tree introduced

00:05:44,550 --> 00:05:49,169
is this concept of filters includes in

00:05:46,380 --> 00:05:51,900
fields which are our clients should

00:05:49,169 --> 00:05:54,479
change what stiff like what the response

00:05:51,900 --> 00:05:56,430
will look like so for example you can

00:05:54,479 --> 00:05:58,800
add X information or you can remove

00:05:56,430 --> 00:06:00,860
information you can also it also allows

00:05:58,800 --> 00:06:05,039
a guy to hide some of the sensitive data

00:06:00,860 --> 00:06:08,780
when appropriate in a way we use that on

00:06:05,039 --> 00:06:11,970
cf7 marketplace it's by basically

00:06:08,780 --> 00:06:15,300
sending a combination of filters

00:06:11,970 --> 00:06:17,340
includes in fields too in a single

00:06:15,300 --> 00:06:20,160
request get all of the information that

00:06:17,340 --> 00:06:22,130
the API needs that the client needs so

00:06:20,160 --> 00:06:24,870
you can see that in this particular

00:06:22,130 --> 00:06:27,150
request you have here we are getting all

00:06:24,870 --> 00:06:29,280
the service plans filtering byte States

00:06:27,150 --> 00:06:31,230
including in the response the service

00:06:29,280 --> 00:06:32,850
offering and then also to the service

00:06:31,230 --> 00:06:37,410
offerings including the service broker

00:06:32,850 --> 00:06:41,910
name and that allows us to run much

00:06:37,410 --> 00:06:45,240
faster staff might replace commands next

00:06:41,910 --> 00:06:47,729
we have service plans disabilities which

00:06:45,240 --> 00:06:51,630
is usually hidden from developers but

00:06:47,729 --> 00:06:54,720
it's kind of front of mind for admins as

00:06:51,630 --> 00:06:56,729
well service plans can be public

00:06:54,720 --> 00:06:59,370
restricted to some more experienced in

00:06:56,729 --> 00:07:01,440
space or only available for admins that

00:06:59,370 --> 00:07:03,300
determines like what user can actually

00:07:01,440 --> 00:07:06,810
use that particular service and that

00:07:03,300 --> 00:07:08,940
particular plan to determine that

00:07:06,810 --> 00:07:10,680
visibility the client is to look in

00:07:08,940 --> 00:07:12,419
different places so we have a property

00:07:10,680 --> 00:07:15,150
called public that can be true or false

00:07:12,419 --> 00:07:17,370
in the plan itself we also have another

00:07:15,150 --> 00:07:19,470
resource which is so responsibilities

00:07:17,370 --> 00:07:23,310
which is a little bit of a leak of our

00:07:19,470 --> 00:07:24,720
database model that you can qhc

00:07:23,310 --> 00:07:27,150
determine what are the orgs that are

00:07:24,720 --> 00:07:30,150
available for that particular plants for

00:07:27,150 --> 00:07:34,110
if it's face sculpt is actually not that

00:07:30,150 --> 00:07:36,450
straightforward so and also to change

00:07:34,110 --> 00:07:37,919
that plan because ability of that plan

00:07:36,450 --> 00:07:41,639
we also need to change multiple places

00:07:37,919 --> 00:07:44,010
so for example to make it admin only we

00:07:41,639 --> 00:07:46,289
might need to change the public property

00:07:44,010 --> 00:07:50,700
and delete some interests in the service

00:07:46,289 --> 00:07:51,990
for visibility and that can cause like a

00:07:50,700 --> 00:07:54,030
lot of problems

00:07:51,990 --> 00:07:58,169
it is one of the example of an issue of

00:07:54,030 --> 00:07:59,880
a client with tons of orgs and it's

00:07:58,169 --> 00:08:02,930
saying that's the service access command

00:07:59,880 --> 00:08:05,190
can take an hour sometimes it times out

00:08:02,930 --> 00:08:07,950
terrible okay

00:08:05,190 --> 00:08:09,419
it's all fixed now with the visibility

00:08:07,950 --> 00:08:12,930
type so the first thing we did was

00:08:09,419 --> 00:08:15,479
actually simplify or add a property that

00:08:12,930 --> 00:08:17,220
tells the client immediately what's the

00:08:15,479 --> 00:08:19,979
disability type for a particular service

00:08:17,220 --> 00:08:23,010
offering service plan and that can be

00:08:19,979 --> 00:08:25,050
public admin organization or space and

00:08:23,010 --> 00:08:27,810
he also made it simpler for users should

00:08:25,050 --> 00:08:30,680
change by sending a single request to

00:08:27,810 --> 00:08:32,940
copy and then copy will take care of

00:08:30,680 --> 00:08:35,490
synchronizing all of the things that

00:08:32,940 --> 00:08:37,110
need to be synchronized and the tree is

00:08:35,490 --> 00:08:40,700
service funds disability it's not a

00:08:37,110 --> 00:08:40,700
thing anymore it just doesn't exist

00:08:41,750 --> 00:08:46,470
yeah and then when you use that in

00:08:44,100 --> 00:08:49,620
combination with fuse and includes we

00:08:46,470 --> 00:08:52,050
can vastly like simplify the number of

00:08:49,620 --> 00:08:53,640
requests that is needed to run like CF

00:08:52,050 --> 00:08:55,380
service access come on for example you

00:08:53,640 --> 00:08:57,600
can see that it's the same environment

00:08:55,380 --> 00:09:00,480
the one on the left has four requests

00:08:57,600 --> 00:09:03,270
which is the CF 7 command using v3

00:09:00,480 --> 00:09:05,610
endpoints the one in the right has think

00:09:03,270 --> 00:09:07,410
50 something commands and takes much

00:09:05,610 --> 00:09:14,640
more time it takes much longer to

00:09:07,410 --> 00:09:15,810
actually execute too so we cannot talk

00:09:14,640 --> 00:09:18,330
about a little bit about service

00:09:15,810 --> 00:09:21,720
instances the first thing we did was

00:09:18,330 --> 00:09:24,540
choose again simplify the number of fun

00:09:21,720 --> 00:09:27,600
points we get we have so we just merge

00:09:24,540 --> 00:09:30,390
that you types of services into a single

00:09:27,600 --> 00:09:32,580
endpoint and of course you can use

00:09:30,390 --> 00:09:34,170
filters to get only the ones you want

00:09:32,580 --> 00:09:36,000
and you can the end when you are

00:09:34,170 --> 00:09:37,920
creating you need to make sure that you

00:09:36,000 --> 00:09:40,460
send an appropriate body so we can

00:09:37,920 --> 00:09:43,080
create the appropriate type of service

00:09:40,460 --> 00:09:48,780
but more important than that we also

00:09:43,080 --> 00:09:50,640
changed how create behaves in the API so

00:09:48,780 --> 00:09:53,100
basically the v2 implemented in has a

00:09:50,640 --> 00:09:55,440
few problems the first thing the first

00:09:53,100 --> 00:09:58,800
one being the initial provision requests

00:09:55,440 --> 00:10:00,090
to the broker is synchronous so we wait

00:09:58,800 --> 00:10:02,400
for the broker to respond before

00:10:00,090 --> 00:10:03,750
responding to the client but that makes

00:10:02,400 --> 00:10:06,630
you requests can take a long time and

00:10:03,750 --> 00:10:09,240
the client can timeout and also the way

00:10:06,630 --> 00:10:11,430
we create jobs the restructure their

00:10:09,240 --> 00:10:13,790
jobs makes it quite impossible for

00:10:11,430 --> 00:10:20,220
people to follow through a particular

00:10:13,790 --> 00:10:22,920
job so on v3 we change that by make like

00:10:20,220 --> 00:10:24,810
as I said before if he needs the broker

00:10:22,920 --> 00:10:27,000
it's a sync it creates a job immediately

00:10:24,810 --> 00:10:29,040
and that job goes through different

00:10:27,000 --> 00:10:32,220
states processing pooling suceeded

00:10:29,040 --> 00:10:34,730
failed and that would allow clients to

00:10:32,220 --> 00:10:37,440
more confidently follow through the jobs

00:10:34,730 --> 00:10:39,360
to provide whatever UX they want to

00:10:37,440 --> 00:10:41,630
provide to the users will touch would

00:10:39,360 --> 00:10:47,120
touch a little bit more about that next

00:10:41,630 --> 00:10:47,120
now next up later today stay tuned

00:10:50,060 --> 00:10:54,839
in the next important operation of the

00:10:52,709 --> 00:10:57,149
creating a service instance is using it

00:10:54,839 --> 00:10:59,339
by creating a binding that can be for

00:10:57,149 --> 00:11:02,250
the purposes of finding that to an app

00:10:59,339 --> 00:11:04,860
or create creating credentials for that

00:11:02,250 --> 00:11:06,540
service instance as a disclaimer all the

00:11:04,860 --> 00:11:09,810
updates that I'm gonna be talking about

00:11:06,540 --> 00:11:11,639
right now they are still in a proposal

00:11:09,810 --> 00:11:13,440
stage and you won't find them

00:11:11,639 --> 00:11:15,829
implemented so you're still welcome to

00:11:13,440 --> 00:11:18,449
give us your feedback on the resources

00:11:15,829 --> 00:11:20,790
as we know the service bindings have a

00:11:18,449 --> 00:11:22,380
rough mapping from the auspice back into

00:11:20,790 --> 00:11:25,170
the socket endpoints however the

00:11:22,380 --> 00:11:28,079
underlying operations are very similar

00:11:25,170 --> 00:11:30,029
so in v2 creating a service binding

00:11:28,079 --> 00:11:32,100
would mean creating a no static

00:11:30,029 --> 00:11:34,350
credential binding type and sometimes

00:11:32,100 --> 00:11:36,959
also including a log drain and the

00:11:34,350 --> 00:11:39,449
volume mount type and on the other hand

00:11:36,959 --> 00:11:41,880
creating the service key is very similar

00:11:39,449 --> 00:11:44,360
subset of this but it creates a

00:11:41,880 --> 00:11:47,970
credential binding type without buying

00:11:44,360 --> 00:11:49,709
into the app so we found that the

00:11:47,970 --> 00:11:52,410
differences of these bindings were not

00:11:49,709 --> 00:11:54,990
very clear unless you knew the behind

00:11:52,410 --> 00:11:57,779
operations of the cloud controller and

00:11:54,990 --> 00:11:59,130
those bappy and what was clear was the

00:11:57,779 --> 00:12:01,290
fact that they were doing essentially

00:11:59,130 --> 00:12:03,480
the same about the operation so we

00:12:01,290 --> 00:12:05,010
decided to bring the bindings resources

00:12:03,480 --> 00:12:07,319
more in line with what does Buffy

00:12:05,010 --> 00:12:09,870
defines as a binding type and now the

00:12:07,319 --> 00:12:12,810
service credential binding is the new

00:12:09,870 --> 00:12:15,120
resource that represents ospa be binding

00:12:12,810 --> 00:12:17,760
type of credentials and then you can use

00:12:15,120 --> 00:12:21,930
a type key or app to define which one

00:12:17,760 --> 00:12:24,510
you would like to use another issue that

00:12:21,930 --> 00:12:26,430
your users who are facing when using the

00:12:24,510 --> 00:12:28,050
v2 API is the amount of different

00:12:26,430 --> 00:12:30,569
endpoints that you have to go through in

00:12:28,050 --> 00:12:32,939
order to build full usable pictures as

00:12:30,569 --> 00:12:34,769
an example there are six different get

00:12:32,939 --> 00:12:36,660
endpoints to give slightly different

00:12:34,769 --> 00:12:38,939
information about service bindings and

00:12:36,660 --> 00:12:41,550
that means that even simple client

00:12:38,939 --> 00:12:43,709
operations such as get all bindings and

00:12:41,550 --> 00:12:47,040
all apps and instances that they relate

00:12:43,709 --> 00:12:49,740
to would request very a lot of different

00:12:47,040 --> 00:12:53,339
endpoints with very different response

00:12:49,740 --> 00:12:55,380
types and styles following the same

00:12:53,339 --> 00:12:56,850
principles as the rest of the API design

00:12:55,380 --> 00:12:59,250
we have concentrated all the

00:12:56,850 --> 00:13:02,030
functionality on a single endpoint that

00:12:59,250 --> 00:13:04,670
has one consistent response and that

00:13:02,030 --> 00:13:07,220
can be manipulated using filters such as

00:13:04,670 --> 00:13:09,260
selecting the title the bindings and its

00:13:07,220 --> 00:13:12,770
relationship with the service instances

00:13:09,260 --> 00:13:15,500
or apps if it has any and it can also be

00:13:12,770 --> 00:13:17,330
extended by using includes so that you

00:13:15,500 --> 00:13:20,630
can receive the service instance and the

00:13:17,330 --> 00:13:24,230
app at the same time as receiving the

00:13:20,630 --> 00:13:26,840
bindings also as Derek mentioned before

00:13:24,230 --> 00:13:28,640
in v2 we relied heavily on accepting

00:13:26,840 --> 00:13:30,560
complete to communicate to the broker

00:13:28,640 --> 00:13:33,260
and to implement the asynchronous

00:13:30,560 --> 00:13:36,350
features of the broker however because

00:13:33,260 --> 00:13:39,460
these endpoints were all separate it

00:13:36,350 --> 00:13:43,160
meant that not all changes were

00:13:39,460 --> 00:13:46,490
propagated with all the resources so

00:13:43,160 --> 00:13:49,490
service keys in v2 did not could not be

00:13:46,490 --> 00:13:51,310
created in a sync fashion which becomes

00:13:49,490 --> 00:13:53,780
even more of an issue as more and more

00:13:51,310 --> 00:13:56,540
brokers are embracing the async

00:13:53,780 --> 00:13:59,120
behaviors so as other resources

00:13:56,540 --> 00:14:01,040
mentioned so far this resource also

00:13:59,120 --> 00:14:04,180
communicates completely in a sync

00:14:01,040 --> 00:14:06,320
passion with the client and the broker

00:14:04,180 --> 00:14:08,150
another addition to this resource

00:14:06,320 --> 00:14:09,830
interface is the separate endpoint to

00:14:08,150 --> 00:14:12,320
retrieve credentials which allows the

00:14:09,830 --> 00:14:13,580
API to be much more transparent about

00:14:12,320 --> 00:14:15,920
the permissions model

00:14:13,580 --> 00:14:18,400
there will be no redacted fields which

00:14:15,920 --> 00:14:21,500
means the user either gets the entire

00:14:18,400 --> 00:14:24,230
resource or doesn't get it at all and it

00:14:21,500 --> 00:14:27,860
makes it harder to accidentally leak

00:14:24,230 --> 00:14:30,890
credentials on the other side of

00:14:27,860 --> 00:14:34,610
bindings are route bindings which are

00:14:30,890 --> 00:14:36,110
also in a proposal stage so in v2 these

00:14:34,610 --> 00:14:38,000
bindings were implemented as a

00:14:36,110 --> 00:14:40,250
relationship between service instance

00:14:38,000 --> 00:14:42,230
under root which is easy to understand

00:14:40,250 --> 00:14:44,660
but not very easy to implement and

00:14:42,230 --> 00:14:47,210
extend in line with the new features of

00:14:44,660 --> 00:14:50,030
a stop it so in v3 we decided to give

00:14:47,210 --> 00:14:53,270
grid bindings its own resource which is

00:14:50,030 --> 00:14:55,160
called service route bindings that will

00:14:53,270 --> 00:14:57,470
create a no-smoking binding type of

00:14:55,160 --> 00:15:01,490
route service and allows us to implement

00:14:57,470 --> 00:15:04,100
features such as acing bindings in v2

00:15:01,490 --> 00:15:05,840
the only possible operation was to just

00:15:04,100 --> 00:15:08,990
get the list over all the routes for a

00:15:05,840 --> 00:15:11,510
service instance and again following the

00:15:08,990 --> 00:15:14,990
same API guidelines you can now do much

00:15:11,510 --> 00:15:19,190
more manipulations using filters and you

00:15:14,990 --> 00:15:22,190
includes another thing we wanted to talk

00:15:19,190 --> 00:15:24,950
about today is sharing with you our

00:15:22,190 --> 00:15:27,440
lessons that we learned as part of not

00:15:24,950 --> 00:15:30,410
just implementing the API but also using

00:15:27,440 --> 00:15:31,880
it in a client such as the CF CLI which

00:15:30,410 --> 00:15:34,910
has been quite an important feedback

00:15:31,880 --> 00:15:36,890
mechanism for us as a result of the

00:15:34,910 --> 00:15:39,740
improvements in the API interface we've

00:15:36,890 --> 00:15:43,070
been able to provide a much simpler CLI

00:15:39,740 --> 00:15:46,390
flow as you might remember the API used

00:15:43,070 --> 00:15:49,190
to offer summary endpoints that would be

00:15:46,390 --> 00:15:51,650
modified to match new feature requests

00:15:49,190 --> 00:15:54,470
and while they were quite useful in

00:15:51,650 --> 00:15:56,990
getting new pieces of information on

00:15:54,470 --> 00:16:00,200
demand they were also not standard and

00:15:56,990 --> 00:16:02,180
they were confusing to work with what we

00:16:00,200 --> 00:16:05,510
achieved with the new standard API is

00:16:02,180 --> 00:16:08,240
that the CLI client now can use a mix of

00:16:05,510 --> 00:16:10,820
fields and filters and includes to

00:16:08,240 --> 00:16:13,670
achieve the same output in many less

00:16:10,820 --> 00:16:15,530
requests and also all the responses are

00:16:13,670 --> 00:16:18,320
standard which means that the knowledge

00:16:15,530 --> 00:16:23,210
and the code can be easily reused

00:16:18,320 --> 00:16:25,220
between different resources and one of

00:16:23,210 --> 00:16:27,230
the most important requests on the CLI

00:16:25,220 --> 00:16:29,000
features has been the addition of the

00:16:27,230 --> 00:16:31,730
white flag to give the users the option

00:16:29,000 --> 00:16:34,310
to wait on operations rather than keep

00:16:31,730 --> 00:16:37,910
falling on another command and with the

00:16:34,310 --> 00:16:41,240
addition of asynchronous behavior in

00:16:37,910 --> 00:16:43,790
every v3 endpoint now we can exactly

00:16:41,240 --> 00:16:45,950
follow the same job that the command

00:16:43,790 --> 00:16:51,610
started and make decisions on the user

00:16:45,950 --> 00:16:54,950
experience how to translate that job I

00:16:51,610 --> 00:16:56,000
hope you have enjoyed our talk and if

00:16:54,950 --> 00:16:58,670
you want to continue the conversation

00:16:56,000 --> 00:17:01,700
with us we're monitoring the following

00:16:58,670 --> 00:17:04,250
channels we are still waiting for

00:17:01,700 --> 00:17:07,550
feedback on our binding proposals and

00:17:04,250 --> 00:17:09,709
you can open new github issues or just

00:17:07,550 --> 00:17:12,560
give your voice on the old github issues

00:17:09,709 --> 00:17:14,780
on Cloud Controller and CLI and you can

00:17:12,560 --> 00:17:20,709
talk to us directly on our Cloud Foundry

00:17:14,780 --> 00:17:20,709

YouTube URL: https://www.youtube.com/watch?v=wLfg43UdrKQ


