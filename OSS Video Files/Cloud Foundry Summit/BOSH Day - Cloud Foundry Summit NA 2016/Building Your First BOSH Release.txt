Title: Building Your First BOSH Release
Publication date: 2016-05-30
Playlist: BOSH Day - Cloud Foundry Summit NA 2016
Description: 
	Maria Shaldibina of Pivotal presents "Building Your First BOSH Release."
Captions: 
	00:00:00,319 --> 00:00:05,100
hello everyone welcome to the talk

00:00:02,550 --> 00:00:07,290
building your first varsity's so we're

00:00:05,100 --> 00:00:11,700
going to talk about what is Bosch

00:00:07,290 --> 00:00:14,540
what a Deniz is and how to build them so

00:00:11,700 --> 00:00:17,609
what is Bosh Bosh is an open source

00:00:14,540 --> 00:00:20,550
cluster management tool developed and

00:00:17,609 --> 00:00:22,680
used by pivotal and other companies to

00:00:20,550 --> 00:00:25,230
efficiently manage large-scale systems

00:00:22,680 --> 00:00:27,539
like cloud funding it can handle

00:00:25,230 --> 00:00:30,119
infrastructure provisioning release

00:00:27,539 --> 00:00:32,430
engineering configuration management and

00:00:30,119 --> 00:00:38,190
deployment lifecycle of a complex

00:00:32,430 --> 00:00:42,210
distributed system several people asked

00:00:38,190 --> 00:00:45,570
me during CF summit if Bosch is

00:00:42,210 --> 00:00:48,090
something like chef or puppet well some

00:00:45,570 --> 00:00:50,789
features of Bosch can be compared to

00:00:48,090 --> 00:00:52,739
configuration management systems but it

00:00:50,789 --> 00:00:55,170
does much more than just configuration

00:00:52,739 --> 00:00:58,230
management it can manage deployments

00:00:55,170 --> 00:01:00,449
that span hundreds of millions providing

00:00:58,230 --> 00:01:03,260
all required tooling for release

00:01:00,449 --> 00:01:07,500
engineering rolling cluster updates

00:01:03,260 --> 00:01:14,820
operating system updates real-time

00:01:07,500 --> 00:01:17,100
monitoring and recovery it can utilize

00:01:14,820 --> 00:01:19,380
your infrastructure efficiently by

00:01:17,100 --> 00:01:21,090
provisioning allocating and releasing

00:01:19,380 --> 00:01:23,750
resources for your deployment in a

00:01:21,090 --> 00:01:23,750
controlled manner

00:01:23,840 --> 00:01:30,270
rolling updates is a hard problem to

00:01:26,610 --> 00:01:32,790
solve so many systems leave it up to

00:01:30,270 --> 00:01:35,970
operator to figure out the proper order

00:01:32,790 --> 00:01:39,689
of updates and minimize the number of

00:01:35,970 --> 00:01:41,700
disruptions to production systems both

00:01:39,689 --> 00:01:44,520
deployment manifest is completely

00:01:41,700 --> 00:01:46,829
declarative the system itself takes care

00:01:44,520 --> 00:01:49,320
of understanding what is currently

00:01:46,829 --> 00:01:52,259
running in your cloud what do you intend

00:01:49,320 --> 00:01:55,140
to run and figures out the best way of

00:01:52,259 --> 00:01:57,840
running updates minimizing the number of

00:01:55,140 --> 00:01:59,850
disruptions if something did not change

00:01:57,840 --> 00:02:05,490
it's not going to get updated only

00:01:59,850 --> 00:02:08,069
affected node will be touched this

00:02:05,490 --> 00:02:11,370
engineering is part of bash it is

00:02:08,069 --> 00:02:13,290
opinionated about structure and

00:02:11,370 --> 00:02:15,620
lifecycle of the release

00:02:13,290 --> 00:02:18,480
it provides required tooling for

00:02:15,620 --> 00:02:21,000
creating and updating your releases it

00:02:18,480 --> 00:02:23,640
is easy to iterate on your releases

00:02:21,000 --> 00:02:26,879
while developing and create production

00:02:23,640 --> 00:02:30,120
releases everything is fingerprinted and

00:02:26,879 --> 00:02:32,730
incremental if something did not change

00:02:30,120 --> 00:02:42,780
it's not gonna get included in release

00:02:32,730 --> 00:02:45,359
rebuilt and deployed Bosch can confirm

00:02:42,780 --> 00:02:48,750
all kind of complex updates including

00:02:45,359 --> 00:02:52,260
operating system updates so operator can

00:02:48,750 --> 00:02:55,859
specify the oil's image version he wants

00:02:52,260 --> 00:02:58,010
to to deploy and Bosch will take care of

00:02:55,859 --> 00:03:01,049
recreating every node in the deployment

00:02:58,010 --> 00:03:08,400
with the base OS image with the new

00:03:01,049 --> 00:03:11,069
version of base OS image Bosch provides

00:03:08,400 --> 00:03:13,290
a built-in mechanism for detecting

00:03:11,069 --> 00:03:17,370
potential infrastructure problems it

00:03:13,290 --> 00:03:20,099
provides recovery mechanisms for failing

00:03:17,370 --> 00:03:25,409
services and inconsistent infrastructure

00:03:20,099 --> 00:03:27,720
state as you can see Bosch takes a

00:03:25,409 --> 00:03:31,319
holistic approach to managing your

00:03:27,720 --> 00:03:33,629
deployments it is a prescribed solution

00:03:31,319 --> 00:03:38,909
that will take care of your complex

00:03:33,629 --> 00:03:44,430
workloads every step of the way let's

00:03:38,909 --> 00:03:47,750
quickly take a look how Bosch works so

00:03:44,430 --> 00:03:50,879
the main wash component is director

00:03:47,750 --> 00:03:53,639
director exposes a RESTful API that

00:03:50,879 --> 00:03:56,579
allows you to manage your deployments

00:03:53,639 --> 00:03:58,769
manage your releases get the current

00:03:56,579 --> 00:04:02,340
state of your deployment and perform

00:03:58,769 --> 00:04:04,979
other administrative tasks you can see

00:04:02,340 --> 00:04:08,819
the director with the cloud config which

00:04:04,979 --> 00:04:11,639
contains your cloud provider properties

00:04:08,819 --> 00:04:15,329
that define types of resources that your

00:04:11,639 --> 00:04:19,680
deployments can use like networks vm

00:04:15,329 --> 00:04:22,440
types disks director interacts with

00:04:19,680 --> 00:04:26,730
cloud providers via something we call

00:04:22,440 --> 00:04:29,820
cloud provider interface or CPI

00:04:26,730 --> 00:04:32,490
abstractedly infrastructure details to a

00:04:29,820 --> 00:04:35,780
well-defined interface it has methods

00:04:32,490 --> 00:04:40,410
like create VM create disk attached disk

00:04:35,780 --> 00:04:43,200
this way if you have your Amazon or GC

00:04:40,410 --> 00:04:45,390
or any other infrastructure you can make

00:04:43,200 --> 00:04:49,560
it work with bosch by just implementing

00:04:45,390 --> 00:04:51,330
the CPI we officially support CP is for

00:04:49,560 --> 00:04:55,770
AWS OpenStack

00:04:51,330 --> 00:04:58,410
this year and other infrastructures but

00:04:55,770 --> 00:05:00,750
since it's all open source you can add

00:04:58,410 --> 00:05:04,590
support for infrastructure by

00:05:00,750 --> 00:05:09,180
implementing the CPI Bosch creates VMs

00:05:04,590 --> 00:05:12,090
from a set of predefined templates which

00:05:09,180 --> 00:05:16,730
we call stem cells you can think of the

00:05:12,090 --> 00:05:20,790
stem cell as a my for AWS for example

00:05:16,730 --> 00:05:23,520
and edits core stem cell is a base OS

00:05:20,790 --> 00:05:27,660
image with some hardening on top of it

00:05:23,520 --> 00:05:31,260
and Bosch agent Bosch agent is a process

00:05:27,660 --> 00:05:33,630
that runs on every VM we are officially

00:05:31,260 --> 00:05:37,290
support stem cells for multiple

00:05:33,630 --> 00:05:40,500
infrastructures you can download them at

00:05:37,290 --> 00:05:43,200
birth dot IO website and they constantly

00:05:40,500 --> 00:05:47,610
released with new security updates to

00:05:43,200 --> 00:05:50,610
kernel and base OS packages so once VM

00:05:47,610 --> 00:05:53,420
that was created from stem cell boots up

00:05:50,610 --> 00:05:57,750
Bosch agent starts running on that VM

00:05:53,420 --> 00:06:01,050
and agent bootstraps itself it fetches

00:05:57,750 --> 00:06:03,180
information provided by CPI and that

00:06:01,050 --> 00:06:06,480
information tells agen how to interact

00:06:03,180 --> 00:06:08,430
with the rest of the system so once

00:06:06,480 --> 00:06:10,830
agent is ready it starts recording to

00:06:08,430 --> 00:06:14,280
director and director starts issuing

00:06:10,830 --> 00:06:17,100
commands to the agent to configure VM in

00:06:14,280 --> 00:06:21,540
a certain way like configure network's

00:06:17,100 --> 00:06:24,240
setup discs and install software agents

00:06:21,540 --> 00:06:26,660
are also responsible for supervising

00:06:24,240 --> 00:06:30,110
jobs that are running on that VM and

00:06:26,660 --> 00:06:33,840
also perform some housekeeping like

00:06:30,110 --> 00:06:38,180
rolling over debug logs reporting

00:06:33,840 --> 00:06:38,180
resource usages and yet cetera

00:06:38,629 --> 00:06:44,300
in order for software to be runnable on

00:06:41,449 --> 00:06:49,069
wash it needs to be packaged in to

00:06:44,300 --> 00:06:53,659
release manifest is what it ties it all

00:06:49,069 --> 00:06:56,330
together manifest defines your

00:06:53,659 --> 00:06:59,839
deployment lay out what releases to

00:06:56,330 --> 00:07:01,399
deploy and what stem cells to use so

00:06:59,839 --> 00:07:07,249
let's quickly take a look at deployment

00:07:01,399 --> 00:07:09,619
manifest so manifest consists of the

00:07:07,249 --> 00:07:12,949
following sections it has some

00:07:09,619 --> 00:07:17,240
deployment information list of stem

00:07:12,949 --> 00:07:21,499
cells to use to provision VMs releases

00:07:17,240 --> 00:07:22,969
to deploy update section defines how to

00:07:21,499 --> 00:07:26,869
perform a rolling update of your

00:07:22,969 --> 00:07:30,349
deployment and instance groups define

00:07:26,869 --> 00:07:33,919
what software to install what stem cells

00:07:30,349 --> 00:07:38,929
you use to provision VM and what jobs

00:07:33,919 --> 00:07:43,879
from releases to install on that VM so

00:07:38,929 --> 00:07:46,729
what is release let's say you have some

00:07:43,879 --> 00:07:49,819
source files and in order to deploy

00:07:46,729 --> 00:07:53,089
those source files you need to package

00:07:49,819 --> 00:07:56,419
them into release this is how Bosch

00:07:53,089 --> 00:08:00,079
understands how to run your software how

00:07:56,419 --> 00:08:04,099
to deploy it release contains all the

00:08:00,079 --> 00:08:07,039
bits that need to be deployed like your

00:08:04,099 --> 00:08:11,839
package contents installation scripts

00:08:07,039 --> 00:08:14,329
and configuration file templates so

00:08:11,839 --> 00:08:17,629
every release consists of the following

00:08:14,329 --> 00:08:20,539
parts it has your software source files

00:08:17,629 --> 00:08:24,349
it has packages that define how to

00:08:20,539 --> 00:08:29,300
install your software and it has jobs to

00:08:24,349 --> 00:08:32,930
specify how to run your software so

00:08:29,300 --> 00:08:36,439
let's take a look at example really

00:08:32,930 --> 00:08:40,009
simple release let's say you have some

00:08:36,439 --> 00:08:43,069
goal application you will need to

00:08:40,009 --> 00:08:46,310
include its source files in a in a

00:08:43,069 --> 00:08:49,490
source directory then in order to

00:08:46,310 --> 00:08:52,490
install those files you will need to

00:08:49,490 --> 00:08:56,570
provide a goal in binary

00:08:52,490 --> 00:08:59,240
usually releases live in git repos and

00:08:56,570 --> 00:09:01,880
large objects are not included in

00:08:59,240 --> 00:09:05,180
release itself instead they are

00:09:01,880 --> 00:09:09,500
referenced as some lobster identifiers

00:09:05,180 --> 00:09:13,730
like SV or Swift and Bosch will take

00:09:09,500 --> 00:09:16,850
care of downloading those binaries and

00:09:13,730 --> 00:09:18,290
including them in your release when once

00:09:16,850 --> 00:09:20,120
you're gonna create your release for the

00:09:18,290 --> 00:09:24,890
first time and then it's going to catch

00:09:20,120 --> 00:09:28,100
them for subsequent use also you need to

00:09:24,890 --> 00:09:30,830
provide a packaging script where you

00:09:28,100 --> 00:09:37,510
will specify how to install your

00:09:30,830 --> 00:09:41,690
software and then you'll have to provide

00:09:37,510 --> 00:09:49,100
the startup script that will define how

00:09:41,690 --> 00:09:52,550
to run your software on Bosh so let's

00:09:49,100 --> 00:09:56,870
take a look what Bosh will do how it's

00:09:52,550 --> 00:09:59,870
gonna deploy your release so it will

00:09:56,870 --> 00:10:03,320
start by compiling packages that were

00:09:59,870 --> 00:10:06,050
updated it detects what source files

00:10:03,320 --> 00:10:08,750
were changed it will create a predefined

00:10:06,050 --> 00:10:11,800
number of compilation VMs and it will

00:10:08,750 --> 00:10:17,090
start compiling all your source packages

00:10:11,800 --> 00:10:20,000
that were changed packages might depend

00:10:17,090 --> 00:10:22,810
on other packages and Bosh will take

00:10:20,000 --> 00:10:26,690
care of resolving dependency graph and

00:10:22,810 --> 00:10:29,840
making sure to provide all the packages

00:10:26,690 --> 00:10:34,100
that your dependencies need on the node

00:10:29,840 --> 00:10:36,680
that Trance them so once the packages

00:10:34,100 --> 00:10:40,370
are compiled Bosh will store them in its

00:10:36,680 --> 00:10:45,370
blob store one of the nice things about

00:10:40,370 --> 00:10:49,070
this approach is that wash only compiles

00:10:45,370 --> 00:10:51,200
packages once and then it distributes

00:10:49,070 --> 00:10:56,270
them across all the nodes that meet

00:10:51,200 --> 00:10:58,610
those packages so this way scaling up

00:10:56,270 --> 00:11:01,790
the number of instances is not slowed

00:10:58,610 --> 00:11:04,790
down by package compilation because Bosh

00:11:01,790 --> 00:11:05,420
already has all the packages precompiled

00:11:04,790 --> 00:11:11,600
in its flow

00:11:05,420 --> 00:11:14,090
store so release engineering is

00:11:11,600 --> 00:11:17,300
completely automated in a sense that if

00:11:14,090 --> 00:11:19,670
you change one file then every package

00:11:17,300 --> 00:11:23,180
that is using that file and every job

00:11:19,670 --> 00:11:26,150
that is using that package is going to

00:11:23,180 --> 00:11:28,760
be revealed for that new version if

00:11:26,150 --> 00:11:31,670
something did not change it won't get

00:11:28,760 --> 00:11:34,340
rebuilt and one of the design principles

00:11:31,670 --> 00:11:37,490
of Bosch is that it does a minimal

00:11:34,340 --> 00:11:40,370
amount of work to deploy the new version

00:11:37,490 --> 00:11:44,350
of your software if something did not

00:11:40,370 --> 00:11:49,880
change it's not going to get updated

00:11:44,350 --> 00:11:54,440
restarted and deployed whether you're

00:11:49,880 --> 00:11:57,500
working on a new deployment or on a

00:11:54,440 --> 00:12:02,600
completely or own or existing deployment

00:11:57,500 --> 00:12:05,840
the flow every time the same you create

00:12:02,600 --> 00:12:07,640
a new version of theories you upload

00:12:05,840 --> 00:12:10,070
that version of your release to director

00:12:07,640 --> 00:12:12,590
then you can make some changes to your

00:12:10,070 --> 00:12:18,710
manifest file and then you would run

00:12:12,590 --> 00:12:21,170
boards deployed the deployment process

00:12:18,710 --> 00:12:24,110
will reach out to every node in the

00:12:21,170 --> 00:12:29,420
existing deployment and try to match its

00:12:24,110 --> 00:12:33,110
state and its actual state to your into

00:12:29,420 --> 00:12:36,530
your desired intent and that is declared

00:12:33,110 --> 00:12:38,510
in your deployment manifest and by your

00:12:36,530 --> 00:12:41,380
release the release and deployment

00:12:38,510 --> 00:12:46,630
manifest are completely declarative

00:12:41,380 --> 00:12:50,180
Bosch make sure of that

00:12:46,630 --> 00:12:53,990
record of intent matches the actual

00:12:50,180 --> 00:12:59,120
state of the system so let's take a look

00:12:53,990 --> 00:13:04,070
how you can configure it is you can

00:12:59,120 --> 00:13:08,360
specify list of properties in in your

00:13:04,070 --> 00:13:10,220
job manifest file and then you can

00:13:08,360 --> 00:13:15,350
reference those properties in your

00:13:10,220 --> 00:13:17,750
release configuration templates also you

00:13:15,350 --> 00:13:18,649
will provide values for those properties

00:13:17,750 --> 00:13:23,899
in your mind

00:13:18,649 --> 00:13:26,689
first these properties will be filled

00:13:23,899 --> 00:13:30,499
out by wash when it's gonna process

00:13:26,689 --> 00:13:33,879
those configuration file templates so

00:13:30,499 --> 00:13:36,649
this is how you configure your releases

00:13:33,879 --> 00:13:39,709
in case if you want to connect to

00:13:36,649 --> 00:13:45,529
services together you can use the links

00:13:39,709 --> 00:13:48,470
feature so let's say you have a web

00:13:45,529 --> 00:13:51,949
server released and your web application

00:13:48,470 --> 00:13:55,449
needs a database access so it can define

00:13:51,949 --> 00:13:58,369
that it needs these database properties

00:13:55,449 --> 00:14:01,009
then your my sequel or it is on the

00:13:58,369 --> 00:14:04,339
other hand you can say that it provides

00:14:01,009 --> 00:14:06,980
these database properties so what that

00:14:04,339 --> 00:14:10,459
means is that if these two jobs are

00:14:06,980 --> 00:14:14,749
deployed together Bush will wire them up

00:14:10,459 --> 00:14:18,079
automatically and it will make database

00:14:14,749 --> 00:14:22,069
properties available to your web server

00:14:18,079 --> 00:14:24,379
job so now your web server job can

00:14:22,069 --> 00:14:30,920
reference those properties in its

00:14:24,379 --> 00:14:44,689
configuration templates all right let's

00:14:30,920 --> 00:14:48,709
do down okay so I have conkers release

00:14:44,689 --> 00:14:51,230
deployed and let's take a look at it so

00:14:48,709 --> 00:14:54,230
this is a Conquer series concur to the

00:14:51,230 --> 00:14:58,730
CI system that we use in cloud funding

00:14:54,230 --> 00:15:03,970
and you can deploy it with Bosh so it

00:14:58,730 --> 00:15:03,970
provides the source files as you can see

00:15:04,089 --> 00:15:11,689
it contains a bunch of go link packages

00:15:08,860 --> 00:15:15,069
so they need to be provided in the

00:15:11,689 --> 00:15:17,869
source directory then it includes

00:15:15,069 --> 00:15:20,809
packages that specify how to install

00:15:17,869 --> 00:15:23,959
them so let's let's take a look at this

00:15:20,809 --> 00:15:29,480
ATC package every package contains a

00:15:23,959 --> 00:15:31,730
manifest file which specifies what files

00:15:29,480 --> 00:15:36,259
to include from your source files

00:15:31,730 --> 00:15:38,149
and also what dependencies need to be

00:15:36,259 --> 00:15:41,059
provided when this package is going to

00:15:38,149 --> 00:15:44,929
become filed as you can see this package

00:15:41,059 --> 00:15:46,639
depends on goldlink package and that

00:15:44,929 --> 00:15:50,569
means that Bosch will first compile

00:15:46,639 --> 00:15:54,230
goaling package and then provide it to

00:15:50,569 --> 00:15:59,269
the compilation VM that will install

00:15:54,230 --> 00:16:01,419
your ATC package so the important part

00:15:59,269 --> 00:16:04,189
of the package is a packaging script

00:16:01,419 --> 00:16:08,359
which defines how to install your

00:16:04,189 --> 00:16:12,019
software so you can see here they ran

00:16:08,359 --> 00:16:15,079
some gold build so basically that tells

00:16:12,019 --> 00:16:18,730
bosch how to transform your software

00:16:15,079 --> 00:16:24,139
into something that's runnable on Bosch

00:16:18,730 --> 00:16:26,480
then release contains jobs folder these

00:16:24,139 --> 00:16:30,709
are different services that you can

00:16:26,480 --> 00:16:34,999
reference in your manifest and they

00:16:30,709 --> 00:16:39,259
specify how to run your software so here

00:16:34,999 --> 00:16:43,850
we every job has a manifest file which

00:16:39,259 --> 00:16:49,339
defines what packages are included in

00:16:43,850 --> 00:16:52,129
this job and what properties these job

00:16:49,339 --> 00:16:54,529
exposes so what that means is that if

00:16:52,129 --> 00:16:56,299
you're going to deploy this job you can

00:16:54,529 --> 00:17:02,149
configure these properties in your

00:16:56,299 --> 00:17:04,490
deployment manifest how these properties

00:17:02,149 --> 00:17:07,069
are being used they being used in the

00:17:04,490 --> 00:17:10,089
configuration file templates that also

00:17:07,069 --> 00:17:14,569
included in a job so here we have this

00:17:10,089 --> 00:17:21,250
template ATC CTL so let's take a look at

00:17:14,569 --> 00:17:24,220
it and you can see how how here these

00:17:21,250 --> 00:17:27,709
properties are being referenced

00:17:24,220 --> 00:17:29,450
so Bosch will fill out the values for

00:17:27,709 --> 00:17:34,610
these properties that is specified in

00:17:29,450 --> 00:17:38,779
your manifest during deployed then also

00:17:34,610 --> 00:17:41,240
this package here is using links so it

00:17:38,779 --> 00:17:44,559
depends on database and it specifies

00:17:41,240 --> 00:17:47,350
that it consumes database properties

00:17:44,559 --> 00:17:51,490
and if it's gonna be deployed alongside

00:17:47,350 --> 00:17:54,610
with your database job or job it

00:17:51,490 --> 00:17:56,590
provides a database link Bosch will make

00:17:54,610 --> 00:17:59,769
your database job properties available

00:17:56,590 --> 00:18:03,789
to this package so let's take a look at

00:17:59,769 --> 00:18:07,240
this Postgres SQL manifest file so you

00:18:03,789 --> 00:18:11,049
can see here it provides you in database

00:18:07,240 --> 00:18:14,620
with these properties so now your ATC

00:18:11,049 --> 00:18:20,220
configuration file templates can use

00:18:14,620 --> 00:18:24,549
these properties directly in a template

00:18:20,220 --> 00:18:27,129
depending on which platform your release

00:18:24,549 --> 00:18:30,249
is going to be running now release

00:18:27,129 --> 00:18:34,600
offers must provide jobs supervised the

00:18:30,249 --> 00:18:37,899
configuration file so for Linux platform

00:18:34,600 --> 00:18:42,369
Bosch is using more need to supervise

00:18:37,899 --> 00:18:45,549
running jobs and previous office might

00:18:42,369 --> 00:18:48,820
must include the monitor file so every

00:18:45,549 --> 00:18:50,350
money to file specifies what processes

00:18:48,820 --> 00:18:54,159
are going to be running as part of this

00:18:50,350 --> 00:18:59,710
job how to start and how to stop this

00:18:54,159 --> 00:19:04,480
processes so these are how the jobs look

00:18:59,710 --> 00:19:07,149
like and here we have also some lobs

00:19:04,480 --> 00:19:09,730
included in this release just to show

00:19:07,149 --> 00:19:13,360
you that these are some s free

00:19:09,730 --> 00:19:15,519
references so some binaries or tarballs

00:19:13,360 --> 00:19:19,019
they will be downloaded when you for the

00:19:15,519 --> 00:19:19,019
first time gonna create this release

00:19:19,169 --> 00:19:26,649
alright so maybe let's change our ad

00:19:23,649 --> 00:19:31,559
somehow and redeployed so I'm gonna show

00:19:26,649 --> 00:19:34,710
you my running conkers here so this is a

00:19:31,559 --> 00:19:39,029
concourse that was deployed before and

00:19:34,710 --> 00:19:39,029
let's just add some color to it

00:19:48,000 --> 00:19:59,270
so I'm gonna add some nice background

00:19:52,110 --> 00:20:03,870
image so we updating a source file which

00:19:59,270 --> 00:20:08,580
is somewhere here in the source

00:20:03,870 --> 00:20:13,380
directory then I'm going to my concourse

00:20:08,580 --> 00:20:16,590
release directory and before I start

00:20:13,380 --> 00:20:23,430
anything I need to regenerate JavaScript

00:20:16,590 --> 00:20:28,380
files then I'm gonna build new version

00:20:23,430 --> 00:20:31,140
of my Dedes so let's take a look

00:20:28,380 --> 00:20:32,820
I'm gonna run wash create release then

00:20:31,140 --> 00:20:37,100
I'm gonna upload this release to

00:20:32,820 --> 00:20:37,100
director and then I'm gonna run deploy

00:20:39,710 --> 00:20:49,740
so as you can see gosh figures out that

00:20:43,800 --> 00:20:52,010
a TC package was changed and it

00:20:49,740 --> 00:20:55,470
generates a new version of the release

00:20:52,010 --> 00:20:58,530
so here that's a new version of release

00:20:55,470 --> 00:21:03,060
and then it's uploading this release to

00:20:58,530 --> 00:21:05,910
director and then it's running deploy so

00:21:03,060 --> 00:21:09,090
it notices that the only thing that was

00:21:05,910 --> 00:21:11,100
changed is the release version and both

00:21:09,090 --> 00:21:13,740
of these packages depend on this source

00:21:11,100 --> 00:21:16,220
file that I just changed so it's going

00:21:13,740 --> 00:21:20,460
to recompile both of these packages and

00:21:16,220 --> 00:21:23,630
then it's gonna update the job with the

00:21:20,460 --> 00:21:23,630
new compiled bits

00:21:31,950 --> 00:21:38,490
so while is you not let's take a look

00:21:35,460 --> 00:21:40,760
how Bosch version 3 Nice's usually

00:21:38,490 --> 00:21:44,040
developers iterate quite a lot on their

00:21:40,760 --> 00:21:48,240
releases until they happy with their

00:21:44,040 --> 00:21:51,660
feature until it's stable enough or it

00:21:48,240 --> 00:21:54,240
passed CI pipeline once we happy with

00:21:51,660 --> 00:21:58,320
their job releases they can mark it as

00:21:54,240 --> 00:22:00,740
final and doing so basically applies a

00:21:58,320 --> 00:22:04,680
different version exterior release and

00:22:00,740 --> 00:22:06,510
make it available to other people so if

00:22:04,680 --> 00:22:10,590
you want to share your keys with others

00:22:06,510 --> 00:22:13,380
you will share your final release others

00:22:10,590 --> 00:22:18,240
don't see your def release history and

00:22:13,380 --> 00:22:19,520
you can internally iterate on it as much

00:22:18,240 --> 00:22:23,250
as you want

00:22:19,520 --> 00:22:27,050
it is guaranteed that the final release

00:22:23,250 --> 00:22:29,280
will have exactly the same package

00:22:27,050 --> 00:22:32,970
contents as a dev release it was

00:22:29,280 --> 00:22:40,080
generated from on every machine every

00:22:32,970 --> 00:22:44,000
time so let's take a look how our deploy

00:22:40,080 --> 00:22:44,000
is going so it's still going

00:22:45,620 --> 00:22:48,950
so maybe

00:23:00,290 --> 00:23:03,490
[Laughter]

00:23:05,540 --> 00:23:19,950
yeah so there is a configuration also

00:23:18,000 --> 00:23:24,120
included in your list that specifies the

00:23:19,950 --> 00:23:28,970
blobstore information so here I have

00:23:24,120 --> 00:23:32,790
this final llamo which contains your

00:23:28,970 --> 00:23:41,970
blobstore and also this is where your

00:23:32,790 --> 00:23:44,220
final releases will will be stored so so

00:23:41,970 --> 00:23:46,080
if you're gonna upload them you would

00:23:44,220 --> 00:23:49,830
put them in a separate configuration

00:23:46,080 --> 00:23:52,919
file which is usually get ignored so

00:23:49,830 --> 00:23:55,679
that you don't accidentally push it and

00:23:52,919 --> 00:23:57,690
whenever you're gonna update your

00:23:55,679 --> 00:24:11,460
packages you will have this file in your

00:23:57,690 --> 00:24:14,220
amis directory exactly alright so we got

00:24:11,460 --> 00:24:17,299
our new version of conkers deployed so

00:24:14,220 --> 00:24:17,299
let's take a look at it

00:24:19,990 --> 00:24:23,029
[Music]

00:24:28,410 --> 00:24:32,630
[Applause]

00:24:37,530 --> 00:24:44,650
so it's hard to beat that

00:24:40,480 --> 00:24:47,050
but I also want to show that we can

00:24:44,650 --> 00:24:49,990
change some properties in our manifest

00:24:47,050 --> 00:24:52,950
at our release release exposés so here

00:24:49,990 --> 00:24:55,210
we have our job right that defines

00:24:52,950 --> 00:25:00,460
properties that you can configure in you

00:24:55,210 --> 00:25:03,180
to an manifest so like this IP port no

00:25:00,460 --> 00:25:06,970
so like this username and password so

00:25:03,180 --> 00:25:11,260
let's maybe add some identification to

00:25:06,970 --> 00:25:20,740
our conquer deployment so I'm gonna

00:25:11,260 --> 00:25:24,340
modify manifest file and I'm gonna

00:25:20,740 --> 00:25:27,910
specify properties for a TC job here

00:25:24,340 --> 00:25:31,840
because it exposes those properties so

00:25:27,910 --> 00:25:37,540
we're gonna provide username password

00:25:31,840 --> 00:25:41,890
very secure and then I'm gonna run

00:25:37,540 --> 00:25:46,210
boards boy and it notices that those

00:25:41,890 --> 00:25:48,460
properties were changed and let's deploy

00:25:46,210 --> 00:25:51,340
it as you can see it's not recompiling

00:25:48,460 --> 00:25:55,360
any packages there were no source file

00:25:51,340 --> 00:25:58,690
changes the only thing that was changed

00:25:55,360 --> 00:26:01,330
is your deployment and what its gonna do

00:25:58,690 --> 00:26:04,060
it's gonna process your configuration

00:26:01,330 --> 00:26:06,550
templates and provide them to your job

00:26:04,060 --> 00:26:14,170
and restart the job of the new

00:26:06,550 --> 00:26:15,960
configuration so here we go that was

00:26:14,170 --> 00:26:20,050
fast

00:26:15,960 --> 00:26:24,010
now let's take a look now our pipeline

00:26:20,050 --> 00:26:27,120
is gone and it requires us to log in

00:26:24,010 --> 00:26:27,120
with some basic authentication

00:26:29,750 --> 00:26:45,110
yep that's one so you can learn more

00:26:41,300 --> 00:26:47,570
about Bosch these resources we just

00:26:45,110 --> 00:26:50,990
looked at release engineering process

00:26:47,570 --> 00:26:52,580
structure of deployment manifest but

00:26:50,990 --> 00:26:56,410
there is much more to Bosch

00:26:52,580 --> 00:26:58,460
so go to both data your website you can

00:26:56,410 --> 00:26:59,420
it's a great source of both

00:26:58,460 --> 00:27:03,350
documentation

00:26:59,420 --> 00:27:06,290
check out this Bosch tutorial also good

00:27:03,350 --> 00:27:08,840
introduction to watch and if you

00:27:06,290 --> 00:27:11,750
interested in contributing to watch it's

00:27:08,840 --> 00:27:26,240
all open source go to our github people

00:27:11,750 --> 00:27:26,660
and start considering thank you very

00:27:26,240 --> 00:27:28,730
much

00:27:26,660 --> 00:27:31,100
do you have any other questions you have

00:27:28,730 --> 00:27:36,170
a mic here for such an open ask a

00:27:31,100 --> 00:27:39,430
question any more questions right okay

00:27:36,170 --> 00:27:39,430
great thank you very much

00:27:40,400 --> 00:27:46,259

YouTube URL: https://www.youtube.com/watch?v=l91q00Vu2h8


