Title: How to Use Concourse to Deliver BOSH Releases
Publication date: 2016-05-30
Playlist: BOSH Day - Cloud Foundry Summit NA 2016
Description: 
	Amit Gupta of Pivotal presents "How to Use Concourse to Deliver BOSH Releases."
Captions: 
	00:00:00,030 --> 00:00:05,850
hi everybody thank you for to Paulo for

00:00:04,560 --> 00:00:09,330
organizing this and give me the

00:00:05,850 --> 00:00:12,150
opportunity to speak and so this is the

00:00:09,330 --> 00:00:15,089
title of my topic that was given to me

00:00:12,150 --> 00:00:17,160
by Paulo how to use concourse CI to

00:00:15,089 --> 00:00:20,539
deliver Bosch releases and so that's

00:00:17,160 --> 00:00:25,619
what I'll be talking about nominally I

00:00:20,539 --> 00:00:27,510
say nominally because this is Bosch day

00:00:25,619 --> 00:00:30,000
and this may be the one conference where

00:00:27,510 --> 00:00:36,719
people actually want to see tons of

00:00:30,000 --> 00:00:40,980
llamo you're gonna be disappointed

00:00:36,719 --> 00:00:44,399
so I will try to substantially talk

00:00:40,980 --> 00:00:47,010
about Bosch and concourse but I took

00:00:44,399 --> 00:00:52,530
some liberties to go a little bit meta

00:00:47,010 --> 00:00:53,850
to start with and then talk about why we

00:00:52,530 --> 00:00:55,710
arrived at some of the conclusions we've

00:00:53,850 --> 00:00:57,930
done and some of our teams around how we

00:00:55,710 --> 00:01:01,440
deliver blush releases and how we use

00:00:57,930 --> 00:01:03,989
concourse a little bit about me I'm a

00:01:01,440 --> 00:01:06,299
product manager at pivotal some of the

00:01:03,989 --> 00:01:08,130
products I manage CF release at CD

00:01:06,299 --> 00:01:11,369
release console release and Bosch

00:01:08,130 --> 00:01:14,600
bootloader previously I was an engineer

00:01:11,369 --> 00:01:18,360
working on Diego ops manager and Bosch

00:01:14,600 --> 00:01:22,470
so what are we gonna talk about why

00:01:18,360 --> 00:01:26,900
software in the first place going real

00:01:22,470 --> 00:01:30,560
meta on you complexity versus simplicity

00:01:26,900 --> 00:01:33,079
testable discoverable contracts

00:01:30,560 --> 00:01:36,150
complexity in the Boche ecosystem and

00:01:33,079 --> 00:01:39,270
then some of the recommended practices

00:01:36,150 --> 00:01:43,320
around Bosch and concours that that

00:01:39,270 --> 00:01:46,140
we've arrived at all right so what are

00:01:43,320 --> 00:01:47,700
some reasons I won't claim to be

00:01:46,140 --> 00:01:50,280
comprehensive here but what are some

00:01:47,700 --> 00:01:53,549
reasons why we do things with machines

00:01:50,280 --> 00:01:59,369
in the first place one obvious reason

00:01:53,549 --> 00:02:02,280
automate physical labor using machines

00:01:59,369 --> 00:02:05,520
we can do things faster more

00:02:02,280 --> 00:02:08,399
consistently at higher scales and more

00:02:05,520 --> 00:02:10,500
reproducibly the things we just can't do

00:02:08,399 --> 00:02:11,970
physically or if you get a human to do

00:02:10,500 --> 00:02:13,710
them enough times there's going to be a

00:02:11,970 --> 00:02:17,310
lot of defects people throughout the

00:02:13,710 --> 00:02:19,770
Bax you know you can only build

00:02:17,310 --> 00:02:25,650
skyscrapers so high before you start to

00:02:19,770 --> 00:02:28,170
need some sort of machine we can also

00:02:25,650 --> 00:02:29,820
use especially software to automate

00:02:28,170 --> 00:02:32,100
cognitive labor

00:02:29,820 --> 00:02:35,940
I like this term that martin ford used

00:02:32,100 --> 00:02:39,180
in a CF keynote cognitive labor I think

00:02:35,940 --> 00:02:43,140
it describes a lot of what we're trying

00:02:39,180 --> 00:02:45,990
to solve for when we build and we build

00:02:43,140 --> 00:02:52,440
software you guys can probably recognize

00:02:45,990 --> 00:02:54,420
this as an xkcd comic and we we try to

00:02:52,440 --> 00:02:56,130
solve for the the same sorts of problems

00:02:54,420 --> 00:03:03,180
speed consistency scale and

00:02:56,130 --> 00:03:06,120
reproducibility the the crux is complex

00:03:03,180 --> 00:03:08,250
cognitive tasks are hard to do well let

00:03:06,120 --> 00:03:11,360
me dive into what some of those what I

00:03:08,250 --> 00:03:14,340
mean by some of those terms complex

00:03:11,360 --> 00:03:18,620
meaning many pieces unclear interactions

00:03:14,340 --> 00:03:21,830
and requiring implicit knowledge

00:03:18,620 --> 00:03:26,360
cognitive tests such as doing taxes

00:03:21,830 --> 00:03:28,860
deploying software right see if push

00:03:26,360 --> 00:03:30,930
when when my mom and dad asked me what I

00:03:28,860 --> 00:03:34,110
do I say I build software for people who

00:03:30,930 --> 00:03:36,240
build software because we have the same

00:03:34,110 --> 00:03:38,160
problems as the people whom we're

00:03:36,240 --> 00:03:40,980
building software for right provisioning

00:03:38,160 --> 00:03:43,730
servers is hard and getting it right and

00:03:40,980 --> 00:03:46,050
doing it the same way every time is hard

00:03:43,730 --> 00:03:48,870
one of my favorite stories is the story

00:03:46,050 --> 00:03:50,930
of night capital if you don't know it

00:03:48,870 --> 00:03:53,730
just google it it's a great story and

00:03:50,930 --> 00:03:55,860
human error and things that could have

00:03:53,730 --> 00:03:58,470
been automated when provisioning servers

00:03:55,860 --> 00:04:02,670
makes you lose 400 million dollars in

00:03:58,470 --> 00:04:05,160
half an hour right but if you think

00:04:02,670 --> 00:04:06,840
about provisioning a web server for your

00:04:05,160 --> 00:04:08,610
app and scaling it up it's all these

00:04:06,840 --> 00:04:10,170
many pieces unclear interactions

00:04:08,610 --> 00:04:11,940
requiring implicit knowledge how do you

00:04:10,170 --> 00:04:15,420
teach the next person on your team to do

00:04:11,940 --> 00:04:17,280
this all kind of are the reasons why we

00:04:15,420 --> 00:04:21,000
why we love to see a push and Bosh

00:04:17,280 --> 00:04:23,669
deploy and they're hard to do well right

00:04:21,000 --> 00:04:26,280
just like what I had previously doing it

00:04:23,669 --> 00:04:28,940
fast consistently at scale and

00:04:26,280 --> 00:04:28,940
reproducibly

00:04:30,060 --> 00:04:38,900
so there are there are many more reasons

00:04:36,540 --> 00:04:43,500
than this about why we build software

00:04:38,900 --> 00:04:46,170
there are complexity solving for

00:04:43,500 --> 00:04:48,450
complexity is just one of them and there

00:04:46,170 --> 00:04:53,870
are many different sources of complexity

00:04:48,450 --> 00:04:59,220
and many ways to deal with them but one

00:04:53,870 --> 00:05:00,990
approach or one sort of sort of rule of

00:04:59,220 --> 00:05:05,940
thumb to keep in mind when building

00:05:00,990 --> 00:05:14,180
anything is having testable discoverable

00:05:05,940 --> 00:05:16,230
contracts so instead of having you know

00:05:14,180 --> 00:05:19,620
when you have to do your tax's there's

00:05:16,230 --> 00:05:21,660
just all these forms and you know nobody

00:05:19,620 --> 00:05:24,270
knows nobody knows how to do taxes let's

00:05:21,660 --> 00:05:26,970
be let's be real what's nice about

00:05:24,270 --> 00:05:28,980
something like TurboTax is it provides

00:05:26,970 --> 00:05:30,750
you a very clear interaction you log in

00:05:28,980 --> 00:05:35,150
and you just enter the things and you

00:05:30,750 --> 00:05:38,040
hit next so it provides interactions

00:05:35,150 --> 00:05:42,300
that let you do what you're trying to do

00:05:38,040 --> 00:05:44,850
and nothing else it asks the consumer

00:05:42,300 --> 00:05:47,130
for input required for those

00:05:44,850 --> 00:05:49,080
interactions and nothing more right it's

00:05:47,130 --> 00:05:51,000
very clear like just fill out this line

00:05:49,080 --> 00:05:52,890
and this line all those other blank

00:05:51,000 --> 00:05:55,290
spots in these forms don't have to fill

00:05:52,890 --> 00:05:56,820
them out are you missing something it'll

00:05:55,290 --> 00:06:00,240
tell you exactly what you're missing and

00:05:56,820 --> 00:06:04,470
where you can get that thing and provide

00:06:00,240 --> 00:06:06,630
the output that that the solution is

00:06:04,470 --> 00:06:08,520
supposed to provide and nothing else

00:06:06,630 --> 00:06:11,070
don't confuse people with other other

00:06:08,520 --> 00:06:14,880
noise and I say people but I use the

00:06:11,070 --> 00:06:18,450
term consumers here because I'll get to

00:06:14,880 --> 00:06:21,060
it in a second so everything you see up

00:06:18,450 --> 00:06:22,920
here these first three bullets this is a

00:06:21,060 --> 00:06:24,900
contract this is the interaction I'm

00:06:22,920 --> 00:06:26,510
going to provide these are the inputs

00:06:24,900 --> 00:06:28,800
you need to give me and this is the

00:06:26,510 --> 00:06:32,880
output and the side effects I'm going to

00:06:28,800 --> 00:06:34,470
create for you so this is a way the you

00:06:32,880 --> 00:06:40,580
know what's key is that and no more

00:06:34,470 --> 00:06:42,500
right make it clean and simple but

00:06:40,580 --> 00:06:43,849
one risk about doing this kind of thing

00:06:42,500 --> 00:06:46,310
is maybe you've just shoved the

00:06:43,849 --> 00:06:50,000
complexity somewhere else maybe you've

00:06:46,310 --> 00:06:53,539
simplified one thing by by making just

00:06:50,000 --> 00:06:56,990
something else more complex the example

00:06:53,539 --> 00:06:59,990
I have here is we all know and love

00:06:56,990 --> 00:07:02,810
concourse and concourse is a site

00:06:59,990 --> 00:07:05,060
project originally was a Aleks Sorachi

00:07:02,810 --> 00:07:07,129
site project what we're probably all

00:07:05,060 --> 00:07:12,349
familiar with some other Aleks raji side

00:07:07,129 --> 00:07:14,630
projects which which solves some

00:07:12,349 --> 00:07:16,220
problems and made something simpler but

00:07:14,630 --> 00:07:18,380
I think a lot of people have have had to

00:07:16,220 --> 00:07:22,940
fight with the additional complexity

00:07:18,380 --> 00:07:24,620
it's created in just another place so

00:07:22,940 --> 00:07:27,440
making these contracts testable and

00:07:24,620 --> 00:07:29,419
discoverable and making it clear to

00:07:27,440 --> 00:07:31,150
people to understand how you're supposed

00:07:29,419 --> 00:07:34,310
to use something and how it might work

00:07:31,150 --> 00:07:36,020
is key to not just shoving the

00:07:34,310 --> 00:07:42,889
complexity somewhere else and creating a

00:07:36,020 --> 00:07:44,919
just a different problem and so I on the

00:07:42,889 --> 00:07:47,780
previous slide I use the term consumers

00:07:44,919 --> 00:07:50,090
to try to keep it general because this

00:07:47,780 --> 00:07:53,870
problem crops up not just in a user

00:07:50,090 --> 00:07:57,889
facing product products and services but

00:07:53,870 --> 00:07:59,719
also between you know the services that

00:07:57,889 --> 00:08:01,099
we care about our services that are

00:07:59,719 --> 00:08:03,590
deployed as distributed systems right

00:08:01,099 --> 00:08:06,860
this is bashed a but between the system

00:08:03,590 --> 00:08:10,240
components themselves you want to keep

00:08:06,860 --> 00:08:13,310
those contracts clean and simple and

00:08:10,240 --> 00:08:14,870
going down a level between the processes

00:08:13,310 --> 00:08:17,539
running on a particular component in

00:08:14,870 --> 00:08:19,520
your system and even further down down

00:08:17,539 --> 00:08:21,259
to your modules objects and functions

00:08:19,520 --> 00:08:28,310
right so just down G down to the level

00:08:21,259 --> 00:08:30,529
of your code and this has this has quite

00:08:28,310 --> 00:08:33,050
direct parallels to the stuff we build

00:08:30,529 --> 00:08:36,050
in the Boche ecosystem so going back a

00:08:33,050 --> 00:08:40,520
slide user-facing products and services

00:08:36,050 --> 00:08:42,380
that's your Bosch deployment the

00:08:40,520 --> 00:08:45,010
distributed system components

00:08:42,380 --> 00:08:47,510
those are your Bosch instance groups

00:08:45,010 --> 00:08:50,089
Bosch releases and jobs those are your

00:08:47,510 --> 00:08:53,360
processes and the business logic source

00:08:50,089 --> 00:08:54,380
code right your release / source that's

00:08:53,360 --> 00:09:01,870
your source code

00:08:54,380 --> 00:09:04,310
and so these these design concerns

00:09:01,870 --> 00:09:06,110
happen at every layer right whether

00:09:04,310 --> 00:09:08,060
you're product manager worrying about

00:09:06,110 --> 00:09:10,040
the end user or whether your developer

00:09:08,060 --> 00:09:12,760
worrying about your you know your boss

00:09:10,040 --> 00:09:15,560
releases or your source code these

00:09:12,760 --> 00:09:17,600
contracts interfaces simplicity these

00:09:15,560 --> 00:09:21,950
are these things crop up it at every

00:09:17,600 --> 00:09:25,190
level one thing I want to highlight here

00:09:21,950 --> 00:09:27,350
is I I made at a point two separate Vash

00:09:25,190 --> 00:09:29,690
deployments and Bosch releases as

00:09:27,350 --> 00:09:32,780
separate concerns and that's gonna be a

00:09:29,690 --> 00:09:35,260
theme I come back to a little later so

00:09:32,780 --> 00:09:38,450
in addition to these four things here

00:09:35,260 --> 00:09:40,850
also that the test pipelines themselves

00:09:38,450 --> 00:09:42,470
can potentially suffer from complexity

00:09:40,850 --> 00:09:45,410
right if you're trying to deliver

00:09:42,470 --> 00:09:47,150
something you're delivering it using

00:09:45,410 --> 00:09:48,770
concourse with your own test pipelines

00:09:47,150 --> 00:09:52,100
and those things themselves can get

00:09:48,770 --> 00:09:53,510
quite complex if you have to ramp up a

00:09:52,100 --> 00:09:55,880
new team member and they can't make

00:09:53,510 --> 00:09:58,730
heads or tails of how anything else gets

00:09:55,880 --> 00:10:01,250
built in your system that that can be a

00:09:58,730 --> 00:10:03,910
big problem and concourse goes a long

00:10:01,250 --> 00:10:06,920
way to solving that excuse me right with

00:10:03,910 --> 00:10:11,660
with older systems Jen's Jenkins and

00:10:06,920 --> 00:10:13,490
ghosty D we're really the the mo for

00:10:11,660 --> 00:10:16,910
interacting with them was clicking

00:10:13,490 --> 00:10:19,580
around in a GUI after you've clicked

00:10:16,910 --> 00:10:21,890
around that information is lost and you

00:10:19,580 --> 00:10:23,560
can try to you know export the XML and

00:10:21,890 --> 00:10:25,610
check it in somewhere but it's not

00:10:23,560 --> 00:10:27,980
that's kind of an afterthought

00:10:25,610 --> 00:10:30,050
whereas with concourse there's only one

00:10:27,980 --> 00:10:33,080
way to do it and it's declaratively in

00:10:30,050 --> 00:10:36,200
your pipeline config still those things

00:10:33,080 --> 00:10:39,110
can get complex and there can still be

00:10:36,200 --> 00:10:42,710
hidden assumptions and unknown moving

00:10:39,110 --> 00:10:44,720
parts and unseen dependencies and that

00:10:42,710 --> 00:10:48,380
sort of thing so I'm going to talk about

00:10:44,720 --> 00:10:51,410
some of the recommended practices that

00:10:48,380 --> 00:10:59,600
we've come up on or dealing with these

00:10:51,410 --> 00:11:05,060
sorts of things so one is no snowflake

00:10:59,600 --> 00:11:07,350
environments if you have so something

00:11:05,060 --> 00:11:10,560
that's typical to do when you have a

00:11:07,350 --> 00:11:14,639
bashed appointment that you're that

00:11:10,560 --> 00:11:15,930
you're distributing is you in your CI

00:11:14,639 --> 00:11:17,639
you actually deploy it somewhere right

00:11:15,930 --> 00:11:19,529
so you might spin up an AWS environment

00:11:17,639 --> 00:11:22,889
you might spin up a Bosch light

00:11:19,529 --> 00:11:25,199
environment what-have-you and you might

00:11:22,889 --> 00:11:28,319
have hacked it together by hand clicking

00:11:25,199 --> 00:11:31,170
around in the AWS console or you ransom

00:11:28,319 --> 00:11:32,790
script once and now you never run that

00:11:31,170 --> 00:11:35,509
script again because nobody knows what

00:11:32,790 --> 00:11:40,350
happens when if you run it again and

00:11:35,509 --> 00:11:41,519
that's I'm kind of speaking about how

00:11:40,350 --> 00:11:45,889
we've done things on Cloud Foundry

00:11:41,519 --> 00:11:48,029
historically right are our initial

00:11:45,889 --> 00:11:49,529
environments for integrating Cloud

00:11:48,029 --> 00:11:53,009
Foundry one of the main environments is

00:11:49,529 --> 00:11:55,110
called a1 that thing was set up years

00:11:53,009 --> 00:11:57,209
ago before CloudFormation was really a

00:11:55,110 --> 00:11:59,370
thing and it was all done by clicking

00:11:57,209 --> 00:12:00,990
around now nobody wants to touch that

00:11:59,370 --> 00:12:03,600
thing nobody knows how it got there

00:12:00,990 --> 00:12:06,149
nobody knows what's in it nobody knows

00:12:03,600 --> 00:12:11,880
whether you can remove stuff from it so

00:12:06,149 --> 00:12:17,720
it's the snowflake and it leads to lots

00:12:11,880 --> 00:12:20,940
of fear in the development process so

00:12:17,720 --> 00:12:23,160
one of the recommended practices is to

00:12:20,940 --> 00:12:26,220
not snowflake any environment that you

00:12:23,160 --> 00:12:29,240
use in your CI rather what I'd recommend

00:12:26,220 --> 00:12:32,339
is to automate the provisioning of your

00:12:29,240 --> 00:12:36,569
environments in your CI and actually

00:12:32,339 --> 00:12:38,490
have C I run that build continuously

00:12:36,569 --> 00:12:40,079
prove that you can item potently

00:12:38,490 --> 00:12:43,769
recreate your environment at any time

00:12:40,079 --> 00:12:46,819
and anytime anything goes wrong you know

00:12:43,769 --> 00:12:48,810
worst case scenario blow it away and and

00:12:46,819 --> 00:12:54,360
recreate it from scratch click a button

00:12:48,810 --> 00:12:58,040
and bring it back and separate your per

00:12:54,360 --> 00:13:04,920
environment config resources so let me

00:12:58,040 --> 00:13:08,790
show you one of our pipelines so this is

00:13:04,920 --> 00:13:11,959
our mega CI I won't get into the history

00:13:08,790 --> 00:13:14,040
of the name mega CI but the

00:13:11,959 --> 00:13:19,230
infrastructure team that works on

00:13:14,040 --> 00:13:19,910
console and STD release the environment

00:13:19,230 --> 00:13:23,150
that

00:13:19,910 --> 00:13:27,230
that teams concourse itself is deployed

00:13:23,150 --> 00:13:29,450
to is deployed by this job and I'm not

00:13:27,230 --> 00:13:30,830
gonna click it right now but in theory I

00:13:29,450 --> 00:13:33,950
could click it and it should just know

00:13:30,830 --> 00:13:36,080
up right it should just see that none of

00:13:33,950 --> 00:13:38,390
the AWS resources have changed so I

00:13:36,080 --> 00:13:41,030
won't touch anything there nothing has

00:13:38,390 --> 00:13:42,980
changed in the Bosh configuration that

00:13:41,030 --> 00:13:45,380
we're using to deploy that concourse so

00:13:42,980 --> 00:13:49,790
it should just end after a few seconds

00:13:45,380 --> 00:13:53,200
of no hopping so being able to reproduce

00:13:49,790 --> 00:13:55,910
Li reproducibly create your environments

00:13:53,200 --> 00:13:57,820
having no snowflakes was was one of the

00:13:55,910 --> 00:14:00,800
points I mentioned and the other one was

00:13:57,820 --> 00:14:03,860
separating out your environment config

00:14:00,800 --> 00:14:06,080
so we've come upon a pattern that we

00:14:03,860 --> 00:14:08,540
like quite a bit which is to have

00:14:06,080 --> 00:14:10,690
separate repos for every environment so

00:14:08,540 --> 00:14:12,530
if you're by environment I sort of mean

00:14:10,690 --> 00:14:14,690
you know if you think about ahead of us

00:14:12,530 --> 00:14:17,870
it's a V PC with whatever subnets and

00:14:14,690 --> 00:14:21,560
load balancers and and stuff that you

00:14:17,870 --> 00:14:23,210
need right so if you for example if

00:14:21,560 --> 00:14:25,490
you're testing a release or deployment

00:14:23,210 --> 00:14:27,290
and you want to test it on AWS and

00:14:25,490 --> 00:14:28,820
vSphere and OpenStack then you might

00:14:27,290 --> 00:14:30,580
have an open stack environment and a VCR

00:14:28,820 --> 00:14:33,980
environment and nao based environment

00:14:30,580 --> 00:14:35,660
and your concourse itself may live in an

00:14:33,980 --> 00:14:37,670
in a separate environment because you

00:14:35,660 --> 00:14:39,290
you want to have a different life cycle

00:14:37,670 --> 00:14:41,740
for the things you're actually testing

00:14:39,290 --> 00:14:44,300
and deploying from your concourse itself

00:14:41,740 --> 00:14:49,670
so what we've done is we've separated

00:14:44,300 --> 00:14:53,570
out you know any private credentials SSH

00:14:49,670 --> 00:14:55,820
keys just configuration parameters that

00:14:53,570 --> 00:14:59,720
are specific to an environment we've

00:14:55,820 --> 00:15:02,660
extracted that into its own resource so

00:14:59,720 --> 00:15:05,870
that if we need to if a credential gets

00:15:02,660 --> 00:15:10,370
leaked if we ever need to rotate repave

00:15:05,870 --> 00:15:12,290
and repair this environment it's totally

00:15:10,370 --> 00:15:13,670
encapsulated in one thing and it's not

00:15:12,290 --> 00:15:17,060
going to leak into anything else we can

00:15:13,670 --> 00:15:19,010
we as a team can comfortably blow this

00:15:17,060 --> 00:15:23,110
away without affecting any other teams

00:15:19,010 --> 00:15:25,670
right so this is also this came out of

00:15:23,110 --> 00:15:29,540
the history that we had on cloud foundry

00:15:25,670 --> 00:15:32,540
of having all our credentials and all

00:15:29,540 --> 00:15:34,910
our environments in one big repo

00:15:32,540 --> 00:15:37,670
and a lot of these things have come from

00:15:34,910 --> 00:15:41,960
the fact that clattering you just grown

00:15:37,670 --> 00:15:46,040
a lot over over the last three four

00:15:41,960 --> 00:15:48,290
years a lot of these problems you know

00:15:46,040 --> 00:15:49,640
complexity is it's a human problem so a

00:15:48,290 --> 00:15:53,540
lot of things that we've had to solve is

00:15:49,640 --> 00:15:55,970
how do we scale this thing up to now a

00:15:53,540 --> 00:15:57,860
foundation with so many teams and so

00:15:55,970 --> 00:15:59,840
many contributing organizations and

00:15:57,860 --> 00:16:02,600
members all wanting to iterate

00:15:59,840 --> 00:16:06,230
independently it used to be easy to just

00:16:02,600 --> 00:16:07,970
have lots of stuff in one repo but that

00:16:06,230 --> 00:16:11,600
doesn't scale anymore so separating

00:16:07,970 --> 00:16:14,950
these things out is the pattern that

00:16:11,600 --> 00:16:14,950
we've come come upon here

00:16:25,520 --> 00:16:32,570
so a couple of the other recommended

00:16:28,640 --> 00:16:38,480
practices test your task scripts so what

00:16:32,570 --> 00:16:39,830
we do in our concourse pipelines is by

00:16:38,480 --> 00:16:40,970
the way it's probably a bit late to say

00:16:39,830 --> 00:16:42,890
this but I'm gonna assume everybody

00:16:40,970 --> 00:16:48,320
knows what a boss job is and a concourse

00:16:42,890 --> 00:16:49,700
task is etc if not sorry so you're gonna

00:16:48,320 --> 00:16:52,250
have your concourse pipelines your

00:16:49,700 --> 00:16:55,220
pipeline has many jobs your jobs will

00:16:52,250 --> 00:17:00,589
have many puts and gets and also some

00:16:55,220 --> 00:17:05,089
tasks and your tasks are you have a task

00:17:00,589 --> 00:17:08,209
ya mold which sort of tells concourse

00:17:05,089 --> 00:17:12,410
the basic setup of your tasks you know

00:17:08,209 --> 00:17:14,510
what what docker image it should run on

00:17:12,410 --> 00:17:18,170
top of what parameters does it need as

00:17:14,510 --> 00:17:20,689
input what resources does it need as

00:17:18,170 --> 00:17:23,209
input or rather what what things on the

00:17:20,689 --> 00:17:26,780
file system and then you have an actual

00:17:23,209 --> 00:17:28,250
task script itself which if it's simple

00:17:26,780 --> 00:17:30,940
it should be bash but if it's

00:17:28,250 --> 00:17:33,770
complicated don't write it in bash

00:17:30,940 --> 00:17:34,640
whatever you do though if you if you

00:17:33,770 --> 00:17:38,480
make it at all

00:17:34,640 --> 00:17:40,670
if it's at all complex test it people

00:17:38,480 --> 00:17:45,140
usually don't think to test their test

00:17:40,670 --> 00:17:46,910
scripts but you should if anything is

00:17:45,140 --> 00:17:48,800
sufficiently complex you should think of

00:17:46,910 --> 00:17:50,420
your test scripts as a tool that you're

00:17:48,800 --> 00:17:56,140
using and if you're building a tool you

00:17:50,420 --> 00:17:59,290
should test your tool because an example

00:17:56,140 --> 00:18:12,020
I don't know if I have an example

00:17:59,290 --> 00:18:17,720
offhand so I will show you I'll show you

00:18:12,020 --> 00:18:20,360
the pipeline actually it has let me I'll

00:18:17,720 --> 00:18:23,750
get to it in a second so test your test

00:18:20,360 --> 00:18:26,929
scripts and build your own task images

00:18:23,750 --> 00:18:30,050
so one thing that we another sort of one

00:18:26,929 --> 00:18:31,820
shared thing that we had for all the

00:18:30,050 --> 00:18:33,200
teams that sort of broke down once we

00:18:31,820 --> 00:18:36,590
started to scale up the teams quite a

00:18:33,200 --> 00:18:38,900
bit was we had this one massive bloated

00:18:36,590 --> 00:18:41,450
docker image called runtime CI

00:18:38,900 --> 00:18:45,530
which had multiple versions of Ruby in

00:18:41,450 --> 00:18:48,890
it it had a bash RC in it it had God

00:18:45,530 --> 00:18:52,430
knows what else in it you don't need two

00:18:48,890 --> 00:18:56,650
versions of Ruby to like get clone and

00:18:52,430 --> 00:19:01,210
do some JQ or something like that right

00:18:56,650 --> 00:19:06,050
when you when you have no idea what your

00:19:01,210 --> 00:19:09,490
tasks actually depend on that can that

00:19:06,050 --> 00:19:13,970
can put you in a scary place right so

00:19:09,490 --> 00:19:15,470
build your own task images don't don't

00:19:13,970 --> 00:19:17,170
rely on external dependencies for them

00:19:15,470 --> 00:19:20,990
it's not that hard to build a task

00:19:17,170 --> 00:19:24,560
images for your your Bosch tests keep

00:19:20,990 --> 00:19:28,520
them clean and simple and build them in

00:19:24,560 --> 00:19:36,190
concourse build them in CI so let me

00:19:28,520 --> 00:19:41,270
show you this one so this is this is our

00:19:36,190 --> 00:19:43,700
pipeline for our CI itself so the the

00:19:41,270 --> 00:19:45,590
things that CI itself needs the tasks

00:19:43,700 --> 00:19:49,430
and the docker images this is the

00:19:45,590 --> 00:19:51,920
pipeline that actually builds those

00:19:49,430 --> 00:19:57,560
images and also tests its own tests so

00:19:51,920 --> 00:20:01,430
we have this mega CI unit tests job and

00:19:57,560 --> 00:20:03,020
this will test I guess we have tests for

00:20:01,430 --> 00:20:06,170
like different sorts of manifest

00:20:03,020 --> 00:20:08,620
generation things I haven't looked at

00:20:06,170 --> 00:20:08,620
this in a while

00:20:08,770 --> 00:20:14,210
but any sort of code that we have that

00:20:12,530 --> 00:20:15,950
sufficiently complex in our concourse

00:20:14,210 --> 00:20:19,730
tasks themselves we've written

00:20:15,950 --> 00:20:24,710
ginko tests for them you can look at the

00:20:19,730 --> 00:20:28,190
repo to to get more details and then we

00:20:24,710 --> 00:20:30,290
have our docker images and we we

00:20:28,190 --> 00:20:34,510
wrestled for a while on what's the right

00:20:30,290 --> 00:20:36,860
level of granularity for docker images

00:20:34,510 --> 00:20:39,110
should you have a different docker image

00:20:36,860 --> 00:20:42,380
for every single job should you have one

00:20:39,110 --> 00:20:44,780
monolithic docker image or something in

00:20:42,380 --> 00:20:46,940
between and we landed on something that

00:20:44,780 --> 00:20:49,310
I think worked out really nicely which

00:20:46,940 --> 00:20:51,200
is something in between we have a really

00:20:49,310 --> 00:20:52,960
lightweight minimal docker image which

00:20:51,200 --> 00:20:57,980
just has bare bone

00:20:52,960 --> 00:20:58,520
my curl and W get mm-hmm I get and stuff

00:20:57,980 --> 00:21:00,530
like that

00:20:58,520 --> 00:21:02,600
and then we have a go Lang docker image

00:21:00,530 --> 00:21:04,190
which builds on top of that because we

00:21:02,600 --> 00:21:07,520
do a lot of goes so being able to have

00:21:04,190 --> 00:21:09,040
build and test go things then we have a

00:21:07,520 --> 00:21:11,090
deployment docker image so this will

00:21:09,040 --> 00:21:11,720
it's only here that we actually have

00:21:11,090 --> 00:21:14,810
some Ruby

00:21:11,720 --> 00:21:17,180
so we have Ruby debasht CLI Bosh in it

00:21:14,810 --> 00:21:18,650
those sorts of things and then because

00:21:17,180 --> 00:21:21,740
we test some stuff in Bosh light we have

00:21:18,650 --> 00:21:24,080
a vagrant docker image otherwise there's

00:21:21,740 --> 00:21:35,660
no no reason to have vagrants in all

00:21:24,080 --> 00:21:38,840
your docker images okay moving on with

00:21:35,660 --> 00:21:43,660
this manage boss jobs with real programs

00:21:38,840 --> 00:21:53,990
so what I mean by that is your boss jobs

00:21:43,660 --> 00:21:57,110
yeah the veyts of the VM itself the VM

00:21:53,990 --> 00:21:59,360
itself you're talking about when

00:21:57,110 --> 00:22:04,400
building the docker image when we use

00:21:59,360 --> 00:22:07,400
that no no

00:22:04,400 --> 00:22:09,380
so we just use vagrants with the AWS

00:22:07,400 --> 00:22:12,890
provider to bring up a Bosch light

00:22:09,380 --> 00:22:14,810
elsewhere I was actually gonna mention

00:22:12,890 --> 00:22:16,430
something here I've never used it myself

00:22:14,810 --> 00:22:18,470
so I didn't want to write it as a

00:22:16,430 --> 00:22:20,990
recommended practice but I know

00:22:18,470 --> 00:22:24,440
Dimitri's been working on a essentially

00:22:20,990 --> 00:22:27,910
a Bosch light docker image and so this

00:22:24,440 --> 00:22:29,960
would be rather than you having

00:22:27,910 --> 00:22:35,060
individual vagrant in it where you used

00:22:29,960 --> 00:22:37,310
to spin up a nativist VM somewhere else

00:22:35,060 --> 00:22:38,810
using vagrant so that you get posh light

00:22:37,310 --> 00:22:41,720
running in it and you can deploy to that

00:22:38,810 --> 00:22:44,330
you get a docker image that itself is

00:22:41,720 --> 00:22:47,000
running Bosch light and has the Box Eli

00:22:44,330 --> 00:22:50,090
in there so we could we might actually

00:22:47,000 --> 00:22:52,310
start to switch to that if we want to if

00:22:50,090 --> 00:22:54,200
we want to replicate our like we can

00:22:52,310 --> 00:22:56,090
deploy this thing to Bosch light bills

00:22:54,200 --> 00:22:58,340
we can just do that inside the docker

00:22:56,090 --> 00:23:03,560
image that'll be pretty sweet I don't

00:22:58,340 --> 00:23:05,130
know if it's he can't hear I can see him

00:23:03,560 --> 00:23:07,210
but

00:23:05,130 --> 00:23:11,230
we can ask them at some point whether

00:23:07,210 --> 00:23:13,830
it's legit or not yeah you got a

00:23:11,230 --> 00:23:13,830
question for me

00:23:16,890 --> 00:23:22,770
Bosch light has a botched appointment

00:23:19,440 --> 00:23:22,770
uh-huh okay

00:23:24,960 --> 00:23:32,850
instead of using vaguer do you have a

00:23:28,060 --> 00:23:32,850
Bosch light Bosch release that's cool

00:23:37,249 --> 00:23:45,089
okay that's cool

00:23:40,159 --> 00:23:51,419
many options in the Bosch ecosystem yeah

00:23:45,089 --> 00:23:57,029
yeah so managed boss job with real

00:23:51,419 --> 00:23:59,099
programs this is the story of confab and

00:23:57,029 --> 00:24:04,349
console release that we learned the hard

00:23:59,099 --> 00:24:05,819
way so most people have boss jobs just

00:24:04,349 --> 00:24:07,349
realizable I wasn't anywhere near the

00:24:05,819 --> 00:24:10,229
mic the whole time

00:24:07,349 --> 00:24:11,849
most people have boss jobs is that is

00:24:10,229 --> 00:24:15,269
that better was I like inaudible the

00:24:11,849 --> 00:24:16,949
whole time all right okay I don't want

00:24:15,269 --> 00:24:19,739
to hear myself actually so most people

00:24:16,949 --> 00:24:23,009
have boss jobs and in your boss jobs you

00:24:19,739 --> 00:24:25,079
have your spec that defines all the

00:24:23,009 --> 00:24:27,359
properties you're gonna use and then you

00:24:25,079 --> 00:24:32,069
tend to have two types of things in your

00:24:27,359 --> 00:24:38,069
templates you tend to have executables

00:24:32,069 --> 00:24:41,149
right CTL scripts ctos HDR v if it ends

00:24:38,069 --> 00:24:43,259
with dot s HDR B it's not a real program

00:24:41,149 --> 00:24:47,879
and then you probably have some yeah

00:24:43,259 --> 00:24:50,699
moldy or B and if what you're building

00:24:47,879 --> 00:24:56,309
is sufficiently simple you might be able

00:24:50,699 --> 00:24:57,749
to get away with using that er B to do a

00:24:56,309 --> 00:25:00,359
little bit of logic and dump that into

00:24:57,749 --> 00:25:03,269
your yeah mole or or dump that into your

00:25:00,359 --> 00:25:05,999
bash and then maybe your bash is simple

00:25:03,269 --> 00:25:08,509
enough that it's that it's simple and

00:25:05,999 --> 00:25:12,479
it's not likely to cause you problems

00:25:08,509 --> 00:25:14,279
but if you're trying to especially if

00:25:12,479 --> 00:25:16,619
you're trying to manage a stateful

00:25:14,279 --> 00:25:18,689
service like Postgres where you're

00:25:16,619 --> 00:25:19,979
worried about migrating data or if

00:25:18,689 --> 00:25:23,219
you're trying to manage something like

00:25:19,979 --> 00:25:24,719
console where you can't just bring up a

00:25:23,219 --> 00:25:26,519
bunch of console nodes and expect them

00:25:24,719 --> 00:25:29,429
to sync up and work correctly together

00:25:26,519 --> 00:25:35,729
they have to be orchestrated quite

00:25:29,429 --> 00:25:38,519
gingerly right trying to get all the

00:25:35,729 --> 00:25:42,409
logic right so that you can scale up

00:25:38,519 --> 00:25:44,459
scale down you know rotate credentials

00:25:42,409 --> 00:25:46,000
shoot a note in the head and bring it

00:25:44,459 --> 00:25:55,510
back up

00:25:46,000 --> 00:26:01,030
trying to get I'm waiting for the

00:25:55,510 --> 00:26:05,770
announcement all right thank you trying

00:26:01,030 --> 00:26:08,980
to get that right in bash in bash er be

00:26:05,770 --> 00:26:13,410
is is a nightmare

00:26:08,980 --> 00:26:15,190
so do yourself a favor and don't do that

00:26:13,410 --> 00:26:19,090
there's no reason to do that

00:26:15,190 --> 00:26:23,140
you can write programs in real languages

00:26:19,090 --> 00:26:29,380
like go which you can test and compile

00:26:23,140 --> 00:26:31,150
them and use that program to orchestrate

00:26:29,380 --> 00:26:32,800
the start you know whatever logic you

00:26:31,150 --> 00:26:35,320
need around actually starting up your

00:26:32,800 --> 00:26:38,440
underlying business logic process right

00:26:35,320 --> 00:26:41,290
so this is this is like everybody has

00:26:38,440 --> 00:26:42,490
business logic you have console as a

00:26:41,290 --> 00:26:43,720
binary or if you're writing cloud

00:26:42,490 --> 00:26:47,250
controller you have the cloud controller

00:26:43,720 --> 00:26:49,750
app itself and then you have this this

00:26:47,250 --> 00:26:54,130
mysterious contract with Bosh right

00:26:49,750 --> 00:26:56,260
where there's a mono file and you get

00:26:54,130 --> 00:27:01,570
some stuff thrown into your ear be

00:26:56,260 --> 00:27:04,360
context and you have some helpers and

00:27:01,570 --> 00:27:05,500
rather than putting a logic in there

00:27:04,360 --> 00:27:07,990
where you're never going to test it

00:27:05,500 --> 00:27:10,330
because you can't test it just dump all

00:27:07,990 --> 00:27:12,970
the data in to dump the data that it

00:27:10,330 --> 00:27:15,520
gives you into a raw file and delegate

00:27:12,970 --> 00:27:19,950
to some program that you can unit test

00:27:15,520 --> 00:27:25,240
to actually you know take all that stuff

00:27:19,950 --> 00:27:26,650
unmarshal all that data and and do all

00:27:25,240 --> 00:27:30,370
the ifs and else's that you need to do

00:27:26,650 --> 00:27:33,010
in a tested way so manage them with real

00:27:30,370 --> 00:27:36,070
programs and like I just said unit test

00:27:33,010 --> 00:27:38,110
and system test that logic so when you

00:27:36,070 --> 00:27:41,200
build that program the one we have for

00:27:38,110 --> 00:27:43,420
console we call the confab unit test it

00:27:41,200 --> 00:27:48,220
and then system test it so if you claim

00:27:43,420 --> 00:27:50,950
that you can scale up and scale down and

00:27:48,220 --> 00:27:56,799
continue to provide a service

00:27:50,950 --> 00:27:58,690
you could have system test for that yeah

00:27:56,799 --> 00:28:01,210
I keep releases small enough to be used

00:27:58,690 --> 00:28:04,539
with hand editable example manifests and

00:28:01,210 --> 00:28:06,700
validate those manifests and CI if your

00:28:04,539 --> 00:28:08,350
release is so big that it's hard to do

00:28:06,700 --> 00:28:11,950
that think of that release as a

00:28:08,350 --> 00:28:13,630
deployment and think about delivering

00:28:11,950 --> 00:28:16,690
that deployment separately from

00:28:13,630 --> 00:28:17,980
delivering this releases the smaller

00:28:16,690 --> 00:28:21,389
releases that should be composing that

00:28:17,980 --> 00:28:24,399
deployment in the interest of time

00:28:21,389 --> 00:28:27,009
there's a pipeline you can click on it

00:28:24,399 --> 00:28:29,440
in the slides and ask me more more

00:28:27,009 --> 00:28:31,690
details later I'm going to move on to

00:28:29,440 --> 00:28:36,639
some of the other practices cut your

00:28:31,690 --> 00:28:39,100
final releases in CI if you want to do

00:28:36,639 --> 00:28:43,690
acceptance on this before you cut the

00:28:39,100 --> 00:28:45,429
release or you need to get input from

00:28:43,690 --> 00:28:46,899
several other members in the foundation

00:28:45,429 --> 00:28:50,620
before you cut a release you probably

00:28:46,899 --> 00:28:52,299
want to do this process manually if it's

00:28:50,620 --> 00:28:54,100
something that is small and can move

00:28:52,299 --> 00:28:55,990
fast like constant release read CD

00:28:54,100 --> 00:28:59,259
release just cut the final release at

00:28:55,990 --> 00:29:01,000
the end of your pipeline no snowflake

00:28:59,259 --> 00:29:05,500
buckets so creating a final release

00:29:01,000 --> 00:29:08,230
means uploading final release assets to

00:29:05,500 --> 00:29:11,379
a bucket that bucket should show up as a

00:29:08,230 --> 00:29:13,389
snowflake you have CI idempotent lis

00:29:11,379 --> 00:29:18,639
create that bucket with the right IM

00:29:13,389 --> 00:29:21,279
users separate pipeline configs from

00:29:18,639 --> 00:29:25,539
params this is a really nice pattern

00:29:21,279 --> 00:29:29,889
that we've we've come upon of having all

00:29:25,539 --> 00:29:33,100
our pipeline all our pipeline yeah mole

00:29:29,889 --> 00:29:37,299
in public repositories with you know

00:29:33,100 --> 00:29:40,210
moustache templating that that fly

00:29:37,299 --> 00:29:43,210
supports and all the private credentials

00:29:40,210 --> 00:29:46,330
in a in a separate location right you

00:29:43,210 --> 00:29:52,120
could either put them in in vault or

00:29:46,330 --> 00:29:54,129
LastPass or just in a private repo this

00:29:52,120 --> 00:29:56,769
helps makes how your pipelines work

00:29:54,129 --> 00:29:58,049
totally discoverable even to the public

00:29:56,769 --> 00:30:00,519
which is really nice

00:29:58,049 --> 00:30:02,590
strive to make all your jobs public this

00:30:00,519 --> 00:30:05,440
isn't this is something we really try to

00:30:02,590 --> 00:30:08,840
strive for on the CF release

00:30:05,440 --> 00:30:10,820
pipelines and so you can see we actually

00:30:08,840 --> 00:30:17,270
we actually test that all our jobs are

00:30:10,820 --> 00:30:19,220
publicly viewable separate the process

00:30:17,270 --> 00:30:22,040
of creating the release from deploying

00:30:19,220 --> 00:30:25,640
it and testing it if you're going to be

00:30:22,040 --> 00:30:27,020
deploying your releases to multiple

00:30:25,640 --> 00:30:28,400
different environments to test that it

00:30:27,020 --> 00:30:30,620
works on different eise's or in

00:30:28,400 --> 00:30:33,200
different configurations build it early

00:30:30,620 --> 00:30:34,310
so you're not wasting time building the

00:30:33,200 --> 00:30:36,920
release over and over again

00:30:34,310 --> 00:30:38,540
separate your deploy and test so that if

00:30:36,920 --> 00:30:40,850
the test fails you can just rerun the

00:30:38,540 --> 00:30:43,720
test if necessary rather than having to

00:30:40,850 --> 00:30:46,160
rerun the whole the whole thing and

00:30:43,720 --> 00:30:47,870
leverage a lot of the bosch specific

00:30:46,160 --> 00:30:48,860
Concours reese's resources that are

00:30:47,870 --> 00:30:51,530
available to you

00:30:48,860 --> 00:30:58,700
Bosch IO stem cells releases and

00:30:51,530 --> 00:31:02,360
deployments here are some resources so

00:30:58,700 --> 00:31:04,220
you can see our release repos you can

00:31:02,360 --> 00:31:07,120
look at our pipelines and look at the

00:31:04,220 --> 00:31:09,160
pipeline configs how we've laid them out

00:31:07,120 --> 00:31:12,680
if you want to get in touch with me

00:31:09,160 --> 00:31:15,890
email is probably the best way there's a

00:31:12,680 --> 00:31:17,510
Twitter handle I'm pretty active on the

00:31:15,890 --> 00:31:19,580
mailing list so you can ask questions

00:31:17,510 --> 00:31:22,640
there if you think they're more general

00:31:19,580 --> 00:31:25,880
audience you know appropriate I have a

00:31:22,640 --> 00:31:30,580
website and a few github that's my work

00:31:25,880 --> 00:31:30,580
github there's slack too

00:31:33,010 --> 00:31:39,669
[Applause]

00:31:39,929 --> 00:31:43,809
awesome thank you very much I think we

00:31:42,159 --> 00:31:45,879
have time for one question while I work

00:31:43,809 --> 00:31:50,429
out where the next speakers are we stash

00:31:45,879 --> 00:31:50,429
you to the front any one single question

00:32:06,539 --> 00:32:11,320
specifically to glue the contract

00:32:09,729 --> 00:32:13,929
between Bosh and running the actual

00:32:11,320 --> 00:32:17,349
console process so it's not useful to

00:32:13,929 --> 00:32:28,749
anyone who's not in the Bosch console

00:32:17,349 --> 00:32:30,549
universe it actually it it it figures

00:32:28,749 --> 00:32:33,339
out all the it renders all the config

00:32:30,549 --> 00:32:35,469
templates that console needs it

00:32:33,339 --> 00:32:37,419
determines you know when to actually

00:32:35,469 --> 00:32:39,489
start console and with what parameters

00:32:37,419 --> 00:32:43,749
and then it actually just exits and

00:32:39,489 --> 00:32:45,369
leaves the console process running it

00:32:43,749 --> 00:32:47,460
writes the pit file when it you know

00:32:45,369 --> 00:32:50,109
when consoles ready and then it itself

00:32:47,460 --> 00:32:56,549
exits and you get the pit file of the

00:32:50,109 --> 00:32:56,549
console process okay thank you very much

00:32:59,020 --> 00:33:01,079

YouTube URL: https://www.youtube.com/watch?v=tyJPSJ5k0ek


