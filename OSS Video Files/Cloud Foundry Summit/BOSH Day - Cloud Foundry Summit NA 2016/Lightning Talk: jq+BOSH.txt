Title: Lightning Talk: jq+BOSH
Publication date: 2016-05-30
Playlist: BOSH Day - Cloud Foundry Summit NA 2016
Description: 
	Lightning Talk: jq+BOSHÂ - Speakers: Danny Berger
Captions: 
	00:00:00,199 --> 00:00:07,680
hello I'm Danny Berger and I've been a

00:00:04,589 --> 00:00:10,050
Bosch user operator release author for a

00:00:07,680 --> 00:00:13,040
couple of years and more recently a

00:00:10,050 --> 00:00:15,540
Bosch developer on the Bosch team

00:00:13,040 --> 00:00:18,060
throughout that time I've had some

00:00:15,540 --> 00:00:21,150
experience working with manifests and

00:00:18,060 --> 00:00:24,150
know the joys of them and tools like ER

00:00:21,150 --> 00:00:27,180
B templates for manifests or spife for

00:00:24,150 --> 00:00:29,849
spruce but more recently I've ended up

00:00:27,180 --> 00:00:31,859
using JQ to generate my manifests which

00:00:29,849 --> 00:00:35,940
is an interesting choice so I thought

00:00:31,859 --> 00:00:38,730
I'd talk about that manifests are

00:00:35,940 --> 00:00:41,219
everywhere cloud configs runtime configs

00:00:38,730 --> 00:00:44,460
deployment configs concourse pipelines

00:00:41,219 --> 00:00:46,800
and they often vary slightly depending

00:00:44,460 --> 00:00:50,399
on your environments whether you're in

00:00:46,800 --> 00:00:53,760
testing or trying to load tests or make

00:00:50,399 --> 00:00:57,840
sure your new changes are correct and so

00:00:53,760 --> 00:00:59,789
they get a bit tedious and we all have

00:00:57,840 --> 00:01:02,579
seen these sorts of manifests that you

00:00:59,789 --> 00:01:04,379
probably have in your own repos and on

00:01:02,579 --> 00:01:08,850
your own teams to make it easier for

00:01:04,379 --> 00:01:11,720
them to all start and so I was trying to

00:01:08,850 --> 00:01:14,850
use JQ to simplify this

00:01:11,720 --> 00:01:17,100
most of these variables actually come

00:01:14,850 --> 00:01:19,530
from some more authoritative place like

00:01:17,100 --> 00:01:21,390
you've got infrastructure you've got

00:01:19,530 --> 00:01:23,880
some networking settings and you've got

00:01:21,390 --> 00:01:29,040
some actual user settings which may end

00:01:23,880 --> 00:01:32,610
up changing and Jake you can help make

00:01:29,040 --> 00:01:36,840
those variables if you haven't heard of

00:01:32,610 --> 00:01:40,200
Jake you you probably it's like said a

00:01:36,840 --> 00:01:42,180
knock but for JSON data if you do use it

00:01:40,200 --> 00:01:44,399
it's probably for this sort of thing

00:01:42,180 --> 00:01:46,860
where you try to turn JSON data into

00:01:44,399 --> 00:01:49,530
more reasonable readable output whether

00:01:46,860 --> 00:01:54,240
that's plain text or JSON in a different

00:01:49,530 --> 00:01:56,670
format the other thing it can do is if

00:01:54,240 --> 00:01:59,040
you replace like that map command with

00:01:56,670 --> 00:02:02,460
just regular JSON it'll dump JSON back

00:01:59,040 --> 00:02:04,799
to you and combine that with the fact

00:02:02,460 --> 00:02:07,500
that JSON is a valid subset of llaman

00:02:04,799 --> 00:02:09,840
that Concours and Bosh can both

00:02:07,500 --> 00:02:12,410
understand becomes a more interesting

00:02:09,840 --> 00:02:15,920
option for manifests

00:02:12,410 --> 00:02:18,470
so some examples might help one thing

00:02:15,920 --> 00:02:20,420
you probably use is cloud formation or

00:02:18,470 --> 00:02:22,550
terraform to kind of help you provision

00:02:20,420 --> 00:02:25,550
your resources on your infrastructure

00:02:22,550 --> 00:02:27,920
and the nice thing about those tools is

00:02:25,550 --> 00:02:32,000
that you can export all those resources

00:02:27,920 --> 00:02:34,340
and kind of a labeled list and once you

00:02:32,000 --> 00:02:37,460
do that you can start integrating them

00:02:34,340 --> 00:02:40,280
into your manifests so here's an example

00:02:37,460 --> 00:02:43,190
JQ has this art file option where you

00:02:40,280 --> 00:02:45,230
can import this into a variable name so

00:02:43,190 --> 00:02:47,930
assuming you've got an infrastructure

00:02:45,230 --> 00:02:50,030
stack named infra you can reference the

00:02:47,930 --> 00:02:50,690
region as the value for one of your

00:02:50,030 --> 00:02:53,630
properties

00:02:50,690 --> 00:02:56,630
same thing with the security groups that

00:02:53,630 --> 00:02:58,790
your stocks may create so infrastructure

00:02:56,630 --> 00:03:00,230
create a security group instead of

00:02:58,790 --> 00:03:02,030
copying and pasting the SG

00:03:00,230 --> 00:03:03,010
one-two-three-four sort of thing into

00:03:02,030 --> 00:03:05,570
your manifest

00:03:03,010 --> 00:03:09,080
this lets you reference it automatically

00:03:05,570 --> 00:03:11,510
and so another example credentials are

00:03:09,080 --> 00:03:15,530
of course a poor example as we're

00:03:11,510 --> 00:03:17,570
learning and so it's just a flat file

00:03:15,530 --> 00:03:19,340
that's JSON where you can set your

00:03:17,570 --> 00:03:23,210
settings and then reference them as a

00:03:19,340 --> 00:03:25,640
regular object security certificates are

00:03:23,210 --> 00:03:27,740
another example until we get config

00:03:25,640 --> 00:03:30,470
server type stuff I've been using this

00:03:27,740 --> 00:03:32,090
approach whether it's from a file system

00:03:30,470 --> 00:03:34,460
or vault vault

00:03:32,090 --> 00:03:36,770
you can just cut out the result of a

00:03:34,460 --> 00:03:38,720
command and then import it just as a

00:03:36,770 --> 00:03:41,090
regular text file or in this case

00:03:38,720 --> 00:03:42,740
concatenate the two and not have to

00:03:41,090 --> 00:03:45,970
worry about copying and indenting and

00:03:42,740 --> 00:03:48,680
all your values into your manifest so

00:03:45,970 --> 00:03:51,170
overall big picture in general you have

00:03:48,680 --> 00:03:54,950
your inputs whether it's coming from a

00:03:51,170 --> 00:03:56,750
stack or from vault or actual

00:03:54,950 --> 00:03:59,360
configuration that you need to change

00:03:56,750 --> 00:04:02,090
like scaling how many instances you want

00:03:59,360 --> 00:04:04,670
those go into a file and then you have

00:04:02,090 --> 00:04:08,590
your render script which takes your

00:04:04,670 --> 00:04:11,150
actual manifest of JSON like data and

00:04:08,590 --> 00:04:14,690
turns it into a manifest that you can

00:04:11,150 --> 00:04:17,780
send to Bosh or cron course and once you

00:04:14,690 --> 00:04:20,810
have all that automated or once you have

00:04:17,780 --> 00:04:23,060
all that you can automate that and the

00:04:20,810 --> 00:04:26,360
cool thing about that is then you're

00:04:23,060 --> 00:04:28,160
able to easily and quickly duplicate

00:04:26,360 --> 00:04:30,560
your environments whether it's for

00:04:28,160 --> 00:04:33,020
different development teams or for

00:04:30,560 --> 00:04:35,120
testing the change on how it affects the

00:04:33,020 --> 00:04:37,190
performance between your releases all

00:04:35,120 --> 00:04:39,950
you have to do is kind of create that

00:04:37,190 --> 00:04:42,760
new set up from scratch and it's all

00:04:39,950 --> 00:04:45,830
documented so you just push it out and

00:04:42,760 --> 00:04:48,290
since you've heard Concours is great it

00:04:45,830 --> 00:04:51,560
makes for great pipelines so in this

00:04:48,290 --> 00:04:52,520
example the top on the left is two

00:04:51,560 --> 00:04:55,100
course docks

00:04:52,520 --> 00:04:57,440
one is for infrastructure one is for

00:04:55,100 --> 00:04:59,330
Bosh both of them create the security

00:04:57,440 --> 00:05:01,220
groups and everything you need and then

00:04:59,330 --> 00:05:04,729
the next stage actually boots that Bosh

00:05:01,220 --> 00:05:07,370
and it relies on the stack that created

00:05:04,729 --> 00:05:10,100
it and exports those resources so it

00:05:07,370 --> 00:05:12,370
doesn't even have to reload like from

00:05:10,100 --> 00:05:15,110
copying and pasting those values

00:05:12,370 --> 00:05:17,600
continues on to upload cloud config and

00:05:15,110 --> 00:05:19,940
then goes ahead and deploys a Cloud

00:05:17,600 --> 00:05:22,550
Foundry deployment all without having to

00:05:19,940 --> 00:05:27,169
copy and paste your security groups or

00:05:22,550 --> 00:05:29,270
VPC subnet identifiers another example

00:05:27,169 --> 00:05:33,140
of what you can do with it if you are

00:05:29,270 --> 00:05:34,850
relying on simple JSON data you're able

00:05:33,140 --> 00:05:36,860
to write very simple scripts which can

00:05:34,850 --> 00:05:39,710
automatically bump the JSON value and

00:05:36,860 --> 00:05:41,570
they don't have to understand how a Bosh

00:05:39,710 --> 00:05:46,190
manifest looks to figure out where the

00:05:41,570 --> 00:05:48,770
instance numbers are so I made a sample

00:05:46,190 --> 00:05:50,810
repo which is something you could kind

00:05:48,770 --> 00:05:54,680
of push up to your own concourse and let

00:05:50,810 --> 00:05:56,479
it boot up a whole wash director and CF

00:05:54,680 --> 00:05:58,490
deployment using this techniques and you

00:05:56,479 --> 00:06:00,200
could kind of take a look at what the

00:05:58,490 --> 00:06:03,169
render script looks like to generate

00:06:00,200 --> 00:06:07,580
some stuff from JQ

00:06:03,169 --> 00:06:10,670
that's on DB 587 I'm on github Twitter

00:06:07,580 --> 00:06:17,760
air the Cloud Foundry slack Thanks

00:06:10,670 --> 00:06:17,760

YouTube URL: https://www.youtube.com/watch?v=LS3DPQTINb4


