Title: Considerations of a Practical Migration to Cloud Foundry - Alon Aizenberg & Matthias Braach, SAP
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	Considerations of a Practical Migration to Cloud Foundry - Alon Aizenberg & Matthias Braach, SAP 

In the past year, we migrated our product and teams from an Infrastructure as a Service to Cloud Foundry. We will be happy to share our view on a practical migration of existing software products to Cloud Foundry, including reasoning about choosing a PaaS, migration pitfalls, best practices, application changes which you must do, and changes you should avoid doing. Attending this session you will learn our view on the optimal way to migrate existing applications and teams to work with Cloud Foundry.

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,060 --> 00:00:04,549
alright then let's start off hello and

00:00:03,090 --> 00:00:06,810
welcome everybody to the session

00:00:04,549 --> 00:00:08,730
considerations of a practical my

00:00:06,810 --> 00:00:12,750
creation to platformer II my name is

00:00:08,730 --> 00:00:14,700
Matias class and I'm alone Eisenberg we

00:00:12,750 --> 00:00:16,890
are both working at sa P and different

00:00:14,700 --> 00:00:19,949
project and have both just recently

00:00:16,890 --> 00:00:22,380
migrated our software stack to Cloud

00:00:19,949 --> 00:00:25,080
Foundry and in this session we want to

00:00:22,380 --> 00:00:26,699
share our experience we made how we

00:00:25,080 --> 00:00:29,250
achieve the quick migration and

00:00:26,699 --> 00:00:31,080
successful migration and we'll talk

00:00:29,250 --> 00:00:35,340
about what application adaptation we

00:00:31,080 --> 00:00:38,399
have done and also what temptations we

00:00:35,340 --> 00:00:41,640
try to resist so that we have overall a

00:00:38,399 --> 00:00:43,379
good migration in place and could really

00:00:41,640 --> 00:00:46,800
easily migrate everything to Cloud

00:00:43,379 --> 00:00:48,420
Foundry to get to start maybe to get

00:00:46,800 --> 00:00:51,750
some feedback from you guys I would like

00:00:48,420 --> 00:00:52,800
to do a little poll so who is currently

00:00:51,750 --> 00:00:55,800
from you guys

00:00:52,800 --> 00:00:57,829
migrating software to Cloud Foundry can

00:00:55,800 --> 00:01:01,530
you just with a right hand

00:00:57,829 --> 00:01:06,710
ok already a couple so who's considering

00:01:01,530 --> 00:01:09,210
to to move to cloud foundry ok and

00:01:06,710 --> 00:01:12,930
somebody already working on Cloud

00:01:09,210 --> 00:01:15,930
Foundry ok cool

00:01:12,930 --> 00:01:18,360
so the session will be definitely of

00:01:15,930 --> 00:01:21,330
interest for all of you guys we talked

00:01:18,360 --> 00:01:24,200
about different parts and have a look at

00:01:21,330 --> 00:01:26,810
general today so we will start off with

00:01:24,200 --> 00:01:29,280
application adaptation so what we

00:01:26,810 --> 00:01:31,350
recommend to do to make your application

00:01:29,280 --> 00:01:34,650
ready for Cloud Foundry and also talk

00:01:31,350 --> 00:01:38,970
about resisting temptation so not to do

00:01:34,650 --> 00:01:41,220
everything at first later second part is

00:01:38,970 --> 00:01:44,100
the actual migration execution so how

00:01:41,220 --> 00:01:47,220
you can achieve a quick migration and a

00:01:44,100 --> 00:01:50,280
successful migration after that we will

00:01:47,220 --> 00:01:53,490
have a look at how you can efficiently

00:01:50,280 --> 00:01:55,860
use the platform in the end and see

00:01:53,490 --> 00:01:59,130
about what services there are and what

00:01:55,860 --> 00:02:00,840
you should start doing at first and at

00:01:59,130 --> 00:02:03,090
where we end we will have a look at the

00:02:00,840 --> 00:02:04,799
cultural perspective of such a migration

00:02:03,090 --> 00:02:07,829
because if you have not been on the path

00:02:04,799 --> 00:02:10,229
before this will most likely be a big

00:02:07,829 --> 00:02:11,450
hit for the team but a very positive fit

00:02:10,229 --> 00:02:13,400
so and

00:02:11,450 --> 00:02:16,130
that's why we will have a look at what

00:02:13,400 --> 00:02:18,140
changes there will be so before we get

00:02:16,130 --> 00:02:20,390
started some information about SCP

00:02:18,140 --> 00:02:22,880
itself so I think you all know SCP is

00:02:20,390 --> 00:02:25,400
one of the or the worldwide leader of

00:02:22,880 --> 00:02:27,470
business software in the past years we

00:02:25,400 --> 00:02:30,739
have heavily invested into cloud and

00:02:27,470 --> 00:02:32,600
still ongoing so we have our own Cloud

00:02:30,739 --> 00:02:35,840
Foundry offering in place it's called a

00:02:32,600 --> 00:02:37,430
SAP cloud platform Cloud Foundry and the

00:02:35,840 --> 00:02:39,860
cool thing here is we have a multi

00:02:37,430 --> 00:02:42,800
vendor support so you can pick the

00:02:39,860 --> 00:02:43,489
underlying I asked you can be on AWS you

00:02:42,800 --> 00:02:46,670
can be an ever

00:02:43,489 --> 00:02:49,640
ICPs own data centers so we leave that

00:02:46,670 --> 00:02:52,069
free for you to choose and yeah we have

00:02:49,640 --> 00:02:54,019
already over think our customers on

00:02:52,069 --> 00:02:58,760
board so if you're interested just with

00:02:54,019 --> 00:03:01,580
cloud platform dot-com good and with

00:02:58,760 --> 00:03:04,549
this I would like to hand over to Alan

00:03:01,580 --> 00:03:07,610
so alone what made us change to Hungary

00:03:04,549 --> 00:03:09,590
awesome Thank You Matthias so yeah

00:03:07,610 --> 00:03:11,180
before talking about the actual changes

00:03:09,590 --> 00:03:12,890
that you will need to do to your

00:03:11,180 --> 00:03:15,650
applications to successfully around the

00:03:12,890 --> 00:03:18,230
boundary let's talk about why we choose

00:03:15,650 --> 00:03:19,850
to go to Andriy so historically we were

00:03:18,230 --> 00:03:22,570
running our application stacks and the

00:03:19,850 --> 00:03:25,150
components and services on an in-house

00:03:22,570 --> 00:03:28,340
infrastructure as a service provider

00:03:25,150 --> 00:03:30,470
with that obviously having quite a large

00:03:28,340 --> 00:03:31,700
invest in things like infrastructure

00:03:30,470 --> 00:03:34,489
provisioning infrastructure automation

00:03:31,700 --> 00:03:36,410
deployment automation so all of those

00:03:34,489 --> 00:03:38,480
things were putting quite a lot of

00:03:36,410 --> 00:03:41,510
effort on our teams

00:03:38,480 --> 00:03:44,630
moreover we were using quite a lot of

00:03:41,510 --> 00:03:46,190
unmanaged services if it's the backing

00:03:44,630 --> 00:03:49,910
services like databases that we were

00:03:46,190 --> 00:03:51,829
using but also all the stack that were

00:03:49,910 --> 00:03:55,100
using for the development so things like

00:03:51,829 --> 00:03:58,579
continuous integration infrastructure

00:03:55,100 --> 00:04:00,560
log management monitoring you name it

00:03:58,579 --> 00:04:02,239
all of it we were running ourselves or

00:04:00,560 --> 00:04:04,640
with some additional teams our city

00:04:02,239 --> 00:04:08,109
hoping to do that so we were really

00:04:04,640 --> 00:04:10,069
looking to simplify what we are doing

00:04:08,109 --> 00:04:11,989
simplify the amount of the tools that we

00:04:10,069 --> 00:04:14,450
need to manage and we were looking to

00:04:11,989 --> 00:04:16,549
boost the development experience and

00:04:14,450 --> 00:04:18,789
development productivity so choosing

00:04:16,549 --> 00:04:22,070
cloud foundry really allows us to focus

00:04:18,789 --> 00:04:22,960
mostly on the important thing that we

00:04:22,070 --> 00:04:26,050
are

00:04:22,960 --> 00:04:29,169
doing so writing in the link software so

00:04:26,050 --> 00:04:31,720
we could completely get rid of all the

00:04:29,169 --> 00:04:35,050
infrastructure hustle by just using

00:04:31,720 --> 00:04:36,789
cloud foundry which basically

00:04:35,050 --> 00:04:38,680
substitutes all the hassle around

00:04:36,789 --> 00:04:40,539
infrastructure provisioning and

00:04:38,680 --> 00:04:43,090
automation and including also the

00:04:40,539 --> 00:04:45,130
deployment automation as well so let's

00:04:43,090 --> 00:04:46,600
talk about the actual application

00:04:45,130 --> 00:04:49,449
changes so you have an application that

00:04:46,600 --> 00:04:52,360
runs on some other platform and you want

00:04:49,449 --> 00:04:53,919
to migrate it into cloud foundry before

00:04:52,360 --> 00:04:55,389
talking about that let's quote the edge

00:04:53,919 --> 00:04:58,449
of manifesto here which says that

00:04:55,389 --> 00:05:01,120
simplicity is essential so applying that

00:04:58,449 --> 00:05:04,479
to the migration process means that you

00:05:01,120 --> 00:05:06,370
really want to break down your set of

00:05:04,479 --> 00:05:09,250
applications instead of the player

00:05:06,370 --> 00:05:10,990
deploying everything together and

00:05:09,250 --> 00:05:13,000
migrating everything together into

00:05:10,990 --> 00:05:15,009
confounder you should really look into

00:05:13,000 --> 00:05:17,169
your application stack look into each

00:05:15,009 --> 00:05:20,949
application and see which components it

00:05:17,169 --> 00:05:23,130
is built from and choose the one

00:05:20,949 --> 00:05:25,240
component which is less critical and

00:05:23,130 --> 00:05:28,150
component you really can be great first

00:05:25,240 --> 00:05:30,310
and we propose to first integrate that

00:05:28,150 --> 00:05:32,260
component learn everything you need to

00:05:30,310 --> 00:05:33,729
learn on the fly so do not waste you

00:05:32,260 --> 00:05:35,139
know months and months into learning

00:05:33,729 --> 00:05:38,949
Cloud Foundry and learning all the

00:05:35,139 --> 00:05:40,539
surrounding technologies you just take

00:05:38,949 --> 00:05:42,729
one component and you learn on the fly

00:05:40,539 --> 00:05:45,400
how to use Cloud Foundry and how to

00:05:42,729 --> 00:05:48,699
deploy productively and that component

00:05:45,400 --> 00:05:52,750
and this means also learning how to

00:05:48,699 --> 00:05:55,030
build C CIN City around the platform how

00:05:52,750 --> 00:05:57,550
to do the monitoring right how to do the

00:05:55,030 --> 00:06:00,580
metrics collection operations everything

00:05:57,550 --> 00:06:01,990
so once you do that for a simple and non

00:06:00,580 --> 00:06:03,550
critical component it would be super

00:06:01,990 --> 00:06:05,289
easy for you to repeat the process for

00:06:03,550 --> 00:06:08,560
the rest of your stack so for the rest

00:06:05,289 --> 00:06:10,960
of the components so yeah this is the

00:06:08,560 --> 00:06:13,180
proposed way another thing to consider

00:06:10,960 --> 00:06:15,070
is that there might be some components

00:06:13,180 --> 00:06:17,020
or even whole applications that you do

00:06:15,070 --> 00:06:19,150
not want to migrate at all so an example

00:06:17,020 --> 00:06:20,800
might be application which is very

00:06:19,150 --> 00:06:22,090
difficult to engrave because it will

00:06:20,800 --> 00:06:24,120
require a lot of changes we will see

00:06:22,090 --> 00:06:28,060
later which changes you might need to do

00:06:24,120 --> 00:06:29,889
but also the lifespan of the application

00:06:28,060 --> 00:06:31,779
so if you have an application which is

00:06:29,889 --> 00:06:33,550
quite complex to migrate and it's going

00:06:31,779 --> 00:06:34,600
to be retired in one year maybe it

00:06:33,550 --> 00:06:38,520
doesn't work therefore

00:06:34,600 --> 00:06:41,200
of migrating it so the next thing to

00:06:38,520 --> 00:06:43,780
talk about is visiting resisting

00:06:41,200 --> 00:06:47,830
temptations so it is very easy to mix

00:06:43,780 --> 00:06:50,290
into the migration process refactoring

00:06:47,830 --> 00:06:52,570
right so you have application which runs

00:06:50,290 --> 00:06:54,550
in production for some time everything

00:06:52,570 --> 00:06:57,040
has that and every team in such

00:06:54,550 --> 00:07:01,510
applications needs to refactor stuff and

00:06:57,040 --> 00:07:03,640
it sounds very reasonable to mix the

00:07:01,510 --> 00:07:04,840
refactoring that you want to do together

00:07:03,640 --> 00:07:06,460
with a migration when you look into the

00:07:04,840 --> 00:07:10,000
cloud foundry first you see okay cool

00:07:06,460 --> 00:07:11,770
the supports native containers its

00:07:10,000 --> 00:07:13,840
support its polyglot so I can you know

00:07:11,770 --> 00:07:16,810
develop in any language I want it's very

00:07:13,840 --> 00:07:18,610
easy to deploy it's it's awesome for

00:07:16,810 --> 00:07:20,080
micro services so maybe I will reflect

00:07:18,610 --> 00:07:21,520
on my mana listen to micro services

00:07:20,080 --> 00:07:22,900
let's do it as together with the

00:07:21,520 --> 00:07:27,580
migration so this is a very good idea

00:07:22,900 --> 00:07:32,320
you want actually to change the minimal

00:07:27,580 --> 00:07:34,450
amount of application code lines that

00:07:32,320 --> 00:07:37,480
you have to speak in a second what you

00:07:34,450 --> 00:07:39,550
have to really change these things are

00:07:37,480 --> 00:07:41,230
awesome if you need them you should plan

00:07:39,550 --> 00:07:43,780
to do them after the migration so if you

00:07:41,230 --> 00:07:45,670
decide together with your teams that you

00:07:43,780 --> 00:07:46,870
need to break a monolith into micro

00:07:45,670 --> 00:07:48,310
services you should do that after the

00:07:46,870 --> 00:07:50,140
migration not to care about emigration

00:07:48,310 --> 00:07:51,330
because it will just complicate

00:07:50,140 --> 00:07:54,330
everything

00:07:51,330 --> 00:07:57,580
so let's talk about the actual

00:07:54,330 --> 00:08:00,100
application changes that you have to do

00:07:57,580 --> 00:08:01,300
right so to understand which application

00:08:00,100 --> 00:08:02,950
changes you have to do we need to

00:08:01,300 --> 00:08:06,040
understand what Cloud Foundry is or

00:08:02,950 --> 00:08:09,460
actually any pass so Cloud Foundry is in

00:08:06,040 --> 00:08:11,170
the end and on orchestration engine and

00:08:09,460 --> 00:08:13,330
that means that it takes your

00:08:11,170 --> 00:08:16,030
application it takes the configuration

00:08:13,330 --> 00:08:17,980
of that application and it monitors the

00:08:16,030 --> 00:08:21,880
application in production and it can

00:08:17,980 --> 00:08:25,450
decide based on the configuration and

00:08:21,880 --> 00:08:26,760
based on the traffic even if some of the

00:08:25,450 --> 00:08:28,390
instances of application should be

00:08:26,760 --> 00:08:30,760
restarted maybe they should be

00:08:28,390 --> 00:08:33,190
completely dropped maybe you have a

00:08:30,760 --> 00:08:34,570
component which monitors the traffic and

00:08:33,190 --> 00:08:36,460
scales up the application automatically

00:08:34,570 --> 00:08:40,719
and scales it down and that means that

00:08:36,460 --> 00:08:43,330
your instances might be shut down

00:08:40,719 --> 00:08:45,070
without any further notice so you have

00:08:43,330 --> 00:08:45,470
to build application to be resilient and

00:08:45,070 --> 00:08:47,870
there

00:08:45,470 --> 00:08:50,060
very awesome thing to do there

00:08:47,870 --> 00:08:53,420
application around the 12 factor up

00:08:50,060 --> 00:08:55,490
manifest so this is 12 properties for

00:08:53,420 --> 00:08:57,230
cloud native applications and four of

00:08:55,490 --> 00:09:01,100
these presented here are really

00:08:57,230 --> 00:09:03,290
essential for a successful application

00:09:01,100 --> 00:09:05,240
running on a cloud native platform such

00:09:03,290 --> 00:09:08,060
as cloud foundry so the first one is of

00:09:05,240 --> 00:09:10,430
course statelessness if you have a

00:09:08,060 --> 00:09:14,000
stateless if you have a state in the

00:09:10,430 --> 00:09:17,600
application and now the platform decides

00:09:14,000 --> 00:09:20,509
to cut the instance that holds the state

00:09:17,600 --> 00:09:22,100
the user loses the it session so you

00:09:20,509 --> 00:09:24,500
have to be stateless this is the first

00:09:22,100 --> 00:09:26,000
thing then you really need to separate

00:09:24,500 --> 00:09:28,069
between the banking services and

00:09:26,000 --> 00:09:29,810
application instances which means that

00:09:28,069 --> 00:09:32,300
the life cycle of the application should

00:09:29,810 --> 00:09:35,769
be separate than things like databases

00:09:32,300 --> 00:09:39,470
and message queues and any persistent

00:09:35,769 --> 00:09:42,019
service because services will come and

00:09:39,470 --> 00:09:45,199
go and they need to be able to quickly

00:09:42,019 --> 00:09:48,199
attach to an existing back-end and be

00:09:45,199 --> 00:09:49,819
attached from an existing back-end the

00:09:48,199 --> 00:09:51,880
next property is disposability very

00:09:49,819 --> 00:09:55,519
important it's actually two properties

00:09:51,880 --> 00:09:57,050
one is quick start ups and the other one

00:09:55,519 --> 00:09:58,970
is graceful shutdowns

00:09:57,050 --> 00:10:01,430
so the quick start ups is important

00:09:58,970 --> 00:10:03,170
because when the platform is spinning up

00:10:01,430 --> 00:10:05,480
new instances you want your instances to

00:10:03,170 --> 00:10:07,639
be quickly up otherwise you might get

00:10:05,480 --> 00:10:09,259
into situation of a downtime so the

00:10:07,639 --> 00:10:10,490
application is monitored and something

00:10:09,259 --> 00:10:13,279
is not wrong with some of the instances

00:10:10,490 --> 00:10:17,779
and new instances has to be started up

00:10:13,279 --> 00:10:20,300
very quickly this possibility is also as

00:10:17,779 --> 00:10:21,889
I said graceful shutdowns and this is to

00:10:20,300 --> 00:10:23,620
prevent data loss if you have a

00:10:21,889 --> 00:10:25,699
transaction in the in the middle or

00:10:23,620 --> 00:10:29,180
request processing in the middle and

00:10:25,699 --> 00:10:31,490
then the instances down you lose data

00:10:29,180 --> 00:10:33,709
and you low state so you have to have

00:10:31,490 --> 00:10:35,660
two containers or the instances have to

00:10:33,709 --> 00:10:38,149
be disposable and configuration via

00:10:35,660 --> 00:10:39,500
environments or Cloud Foundry loads all

00:10:38,149 --> 00:10:41,000
the configuration into environment

00:10:39,500 --> 00:10:43,309
variables the application has to support

00:10:41,000 --> 00:10:44,779
loading configuration from environment

00:10:43,309 --> 00:10:46,480
Corrado's there is a big debate now on

00:10:44,779 --> 00:10:48,139
the internet you really store

00:10:46,480 --> 00:10:50,480
configuration environment especially

00:10:48,139 --> 00:10:53,420
secrets but that's maybe for a different

00:10:50,480 --> 00:10:55,459
session awesome let's take a look into a

00:10:53,420 --> 00:10:57,139
few examples of applications or

00:10:55,459 --> 00:10:58,010
components that we migrated so the first

00:10:57,139 --> 00:10:59,990
one is a static

00:10:58,010 --> 00:11:03,320
vacation built with the angularjs static

00:10:59,990 --> 00:11:05,930
web app very easy to migrate so using

00:11:03,320 --> 00:11:08,690
the static file built attack which is

00:11:05,930 --> 00:11:11,960
essentially an engineer where you deploy

00:11:08,690 --> 00:11:13,130
your static files there very easy zero

00:11:11,960 --> 00:11:16,730
changes to the application

00:11:13,130 --> 00:11:17,630
we got completely removed all the

00:11:16,730 --> 00:11:20,810
hassles around

00:11:17,630 --> 00:11:23,540
VM provisioning around deploying the

00:11:20,810 --> 00:11:25,070
webserver deploying the application so

00:11:23,540 --> 00:11:27,260
that is not needed anymore you have CF

00:11:25,070 --> 00:11:29,150
push you push the application as is it

00:11:27,260 --> 00:11:31,750
works awesome

00:11:29,150 --> 00:11:34,940
the next example is a java application

00:11:31,750 --> 00:11:37,640
our api is written with spring boot and

00:11:34,940 --> 00:11:40,730
this is important so if you are using a

00:11:37,640 --> 00:11:43,310
framework for your applications which is

00:11:40,730 --> 00:11:44,720
already cloud native or cloud aware it

00:11:43,310 --> 00:11:45,980
will be significantly easier for you to

00:11:44,720 --> 00:11:48,590
do the changes that we were talking

00:11:45,980 --> 00:11:50,990
about rites of spring boot supports

00:11:48,590 --> 00:11:53,540
things like configuration you can load

00:11:50,990 --> 00:11:56,030
for anywhere anywhere you want by very

00:11:53,540 --> 00:11:58,010
little effort so for us migrating this

00:11:56,030 --> 00:12:00,040
application was very simple because we

00:11:58,010 --> 00:12:04,340
were already on the correct framework

00:12:00,040 --> 00:12:06,860
and yeah with really a few simple

00:12:04,340 --> 00:12:09,320
changes of configuration for example how

00:12:06,860 --> 00:12:11,870
the log our logs are generated and

00:12:09,320 --> 00:12:14,120
formatted because we were now generally

00:12:11,870 --> 00:12:15,590
putting the logs into a managed service

00:12:14,120 --> 00:12:18,710
into elasticsearch minute managed

00:12:15,590 --> 00:12:20,000
service so really small changes to log4j

00:12:18,710 --> 00:12:21,830
configuration and additional

00:12:20,000 --> 00:12:23,630
configuration files and then the

00:12:21,830 --> 00:12:27,230
application is migrated as is and again

00:12:23,630 --> 00:12:28,310
a big win in all the things that are

00:12:27,230 --> 00:12:30,140
related to

00:12:28,310 --> 00:12:34,130
provisioning and deployment automation

00:12:30,140 --> 00:12:37,130
and infrastructure management another

00:12:34,130 --> 00:12:39,170
example is an example how awesome

00:12:37,130 --> 00:12:41,630
managed services are so we have a

00:12:39,170 --> 00:12:45,680
component which schedules jobs on a

00:12:41,630 --> 00:12:48,260
bunch of VMs and the previous

00:12:45,680 --> 00:12:53,360
infrastructure we were using didn't have

00:12:48,260 --> 00:12:55,420
a native scheduler so we had to use run

00:12:53,360 --> 00:12:58,730
tag which is an open source scheduling

00:12:55,420 --> 00:13:00,350
software and we had to pre provision the

00:12:58,730 --> 00:13:02,960
VMS on which we were running the jobs

00:13:00,350 --> 00:13:05,300
and obviously the automating that stuff

00:13:02,960 --> 00:13:06,800
was very complicated so there are neck

00:13:05,300 --> 00:13:08,509
for example we had we have

00:13:06,800 --> 00:13:09,769
you know it has users and we need to

00:13:08,509 --> 00:13:11,300
provision the users and we need to

00:13:09,769 --> 00:13:15,050
provision the jobs and we version the

00:13:11,300 --> 00:13:18,410
VMS a lot of effort on just using the CF

00:13:15,050 --> 00:13:20,779
native scheduler which then uses CF

00:13:18,410 --> 00:13:23,179
tasks which spawned a new instances on

00:13:20,779 --> 00:13:25,519
demand when the jobs are running in that

00:13:23,179 --> 00:13:28,850
case this is a node.js application so

00:13:25,519 --> 00:13:31,610
this runs on the vanillin OG has built

00:13:28,850 --> 00:13:33,499
back very easily we save all the hustle

00:13:31,610 --> 00:13:34,819
around the infrastructure provisioning

00:13:33,499 --> 00:13:37,279
or automation and of course we are

00:13:34,819 --> 00:13:39,790
saving costs because we do not have to

00:13:37,279 --> 00:13:42,470
pre provision the VM the instances are

00:13:39,790 --> 00:13:44,209
started the jobs are executed and then

00:13:42,470 --> 00:13:48,529
the instances are shut down and we do

00:13:44,209 --> 00:13:51,019
not have to pay for them so these are a

00:13:48,529 --> 00:13:53,629
few examples of applications that were

00:13:51,019 --> 00:13:55,910
very easy to change or very very easy to

00:13:53,629 --> 00:13:57,739
migrate but of course there are also

00:13:55,910 --> 00:14:00,110
some use cases where the migration is

00:13:57,739 --> 00:14:01,549
quite difficult and it might happen if

00:14:00,110 --> 00:14:04,610
your application for example relies on

00:14:01,549 --> 00:14:06,439
services that you hadn't a previous

00:14:04,610 --> 00:14:08,540
infrastructure platform we do not have

00:14:06,439 --> 00:14:10,069
them on all foundry and in that case

00:14:08,540 --> 00:14:13,490
there are different solutions there are

00:14:10,069 --> 00:14:16,100
more complex like having abstraction

00:14:13,490 --> 00:14:18,619
layers and so on materials here has

00:14:16,100 --> 00:14:20,240
experience with applications like that

00:14:18,619 --> 00:14:21,819
maybe in the Q&A session if there is a

00:14:20,240 --> 00:14:25,699
demand to talk about this topic

00:14:21,819 --> 00:14:28,339
materials can elaborate on that ok so

00:14:25,699 --> 00:14:29,839
the next thing is ok so we understand

00:14:28,339 --> 00:14:31,100
which properties of the application we

00:14:29,839 --> 00:14:33,350
need to have for the application to

00:14:31,100 --> 00:14:35,689
smoothly run on boundary let's talk

00:14:33,350 --> 00:14:38,420
about how to execute the migration what

00:14:35,689 --> 00:14:39,679
is the best way to execute the migration

00:14:38,420 --> 00:14:42,649
and here we will quote again the edge'

00:14:39,679 --> 00:14:44,779
manifesto which says that you should be

00:14:42,649 --> 00:14:47,480
preferring basically releasing your

00:14:44,779 --> 00:14:49,129
software frequently and you should of

00:14:47,480 --> 00:14:52,100
course prefer the shorter time scales

00:14:49,129 --> 00:14:57,889
and when we apply that to a migration

00:14:52,100 --> 00:14:59,629
process we basically understand first of

00:14:57,889 --> 00:15:01,669
all why this is important for a

00:14:59,629 --> 00:15:04,369
migration process to be quick

00:15:01,669 --> 00:15:06,769
so an emigration is quite a stressful

00:15:04,369 --> 00:15:08,119
time for the team so not only your team

00:15:06,769 --> 00:15:10,069
now is busy with doing the migration

00:15:08,119 --> 00:15:12,559
learning new technology learning new

00:15:10,069 --> 00:15:14,179
tools it also has a productive system

00:15:12,559 --> 00:15:17,779
running because you're migrating here a

00:15:14,179 --> 00:15:19,490
productive application or and obviously

00:15:17,779 --> 00:15:21,029
you have bug fixes you have new features

00:15:19,490 --> 00:15:23,589
running you have the bill

00:15:21,029 --> 00:15:25,209
and you have the operations of the

00:15:23,589 --> 00:15:27,249
system so you have down times you need

00:15:25,209 --> 00:15:29,379
to investigate what's going on you don't

00:15:27,249 --> 00:15:31,120
want to have this process very long you

00:15:29,379 --> 00:15:33,339
want your team to go back to your normal

00:15:31,120 --> 00:15:35,800
route where they need to handle the

00:15:33,339 --> 00:15:38,139
stuff that they're handling right so how

00:15:35,800 --> 00:15:39,579
to do that the first thing and I think

00:15:38,139 --> 00:15:42,370
this is the most important thing to

00:15:39,579 --> 00:15:46,269
understand is that you really want to

00:15:42,370 --> 00:15:48,160
have one code line one artifact and you

00:15:46,269 --> 00:15:51,970
deployed that artifact to your prod and

00:15:48,160 --> 00:15:54,309
to the new platform at first when you

00:15:51,970 --> 00:15:55,600
think about it it might sound logical to

00:15:54,309 --> 00:15:59,319
fork the code because you have an

00:15:55,600 --> 00:16:01,269
application structure and now you have

00:15:59,319 --> 00:16:02,949
also a new infrastructure which has

00:16:01,269 --> 00:16:04,660
different properties so might you will

00:16:02,949 --> 00:16:07,689
you need to do some code changes in some

00:16:04,660 --> 00:16:09,459
cases how do you do that so yeah maybe

00:16:07,689 --> 00:16:11,050
we will just fork the code but this is

00:16:09,459 --> 00:16:13,839
of course very bad idea then you have to

00:16:11,050 --> 00:16:16,509
code lines you have doubled the

00:16:13,839 --> 00:16:18,819
maintenance and stress and even the team

00:16:16,509 --> 00:16:20,529
might be forked because some people will

00:16:18,819 --> 00:16:21,819
be dealing with the old code line and

00:16:20,529 --> 00:16:23,829
some people's will be dealing with new

00:16:21,819 --> 00:16:25,600
code line it's not something you want to

00:16:23,829 --> 00:16:28,569
get into so you need to do everything in

00:16:25,600 --> 00:16:30,879
your power not to the code and then

00:16:28,569 --> 00:16:32,620
the benefit of this is that you deploy

00:16:30,879 --> 00:16:34,540
exactly the same artifacts you build the

00:16:32,620 --> 00:16:36,670
artifact only once and then you deploy

00:16:34,540 --> 00:16:38,439
it to the old infrastructure and to the

00:16:36,670 --> 00:16:41,860
new infrastructure you run all your test

00:16:38,439 --> 00:16:44,110
automation against both and then in the

00:16:41,860 --> 00:16:47,740
end you have to run in exactly the same

00:16:44,110 --> 00:16:50,110
version which has many benefits and the

00:16:47,740 --> 00:16:52,839
first benefit is that it is very easy to

00:16:50,110 --> 00:16:54,040
understand where the problems are right

00:16:52,839 --> 00:16:56,170
so if you have your application running

00:16:54,040 --> 00:16:57,670
on your production and it works fine and

00:16:56,170 --> 00:17:01,240
on the new platform you have issues and

00:16:57,670 --> 00:17:04,000
the binary is the same binary call so

00:17:01,240 --> 00:17:05,860
it's easier to identify or to isolate

00:17:04,000 --> 00:17:09,039
the problem but also you have of course

00:17:05,860 --> 00:17:10,510
the benefit of switching from one

00:17:09,039 --> 00:17:12,250
environment to until the other one so

00:17:10,510 --> 00:17:14,409
let's say you went live and now you have

00:17:12,250 --> 00:17:17,530
issues it's very easy to go back of

00:17:14,409 --> 00:17:19,299
course there is the data problem into

00:17:17,530 --> 00:17:23,709
which databases you're writing but let's

00:17:19,299 --> 00:17:25,140
put this to the side this is super

00:17:23,709 --> 00:17:29,860
important

00:17:25,140 --> 00:17:31,919
all right so how to decide when your

00:17:29,860 --> 00:17:33,360
application is ready

00:17:31,919 --> 00:17:35,090
the good thing is that you have a

00:17:33,360 --> 00:17:37,470
productive environment which is a very

00:17:35,090 --> 00:17:38,730
big benefit so when you think about it

00:17:37,470 --> 00:17:43,169
when you're writing in your application

00:17:38,730 --> 00:17:44,549
and you have no clue in production what

00:17:43,169 --> 00:17:46,529
the user is going to do how many users

00:17:44,549 --> 00:17:48,450
you will have you don't have any numbers

00:17:46,529 --> 00:17:50,039
it's more difficult than just looking

00:17:48,450 --> 00:17:51,840
into a productive system you know what's

00:17:50,039 --> 00:17:54,480
the usage you know what's the data you

00:17:51,840 --> 00:17:57,510
know what are the peak times so you just

00:17:54,480 --> 00:18:00,750
copy the data and you run low tests

00:17:57,510 --> 00:18:02,190
which simulate the same behavior that

00:18:00,750 --> 00:18:06,179
you have in production on the new

00:18:02,190 --> 00:18:08,549
platform not only regular load you can

00:18:06,179 --> 00:18:10,769
also run a severe load severe stress to

00:18:08,549 --> 00:18:13,019
understand if the system is resilient

00:18:10,769 --> 00:18:15,419
enough if the platform is resilient

00:18:13,019 --> 00:18:21,440
enough but yet that's about it so you

00:18:15,419 --> 00:18:24,240
you do that very important point collect

00:18:21,440 --> 00:18:27,710
metrics and monitor all the things from

00:18:24,240 --> 00:18:30,450
the beginning so when you are doing the

00:18:27,710 --> 00:18:34,500
first migration of the first component

00:18:30,450 --> 00:18:36,330
which is non-critical already there you

00:18:34,500 --> 00:18:38,610
should start to think about how do you

00:18:36,330 --> 00:18:39,659
collect metrics and also from the

00:18:38,610 --> 00:18:40,860
application but of course from the

00:18:39,659 --> 00:18:41,399
platform itself from the operating

00:18:40,860 --> 00:18:42,960
system

00:18:41,399 --> 00:18:45,000
what's the disk is doing what the

00:18:42,960 --> 00:18:47,279
networking is doing but what the CPU is

00:18:45,000 --> 00:18:48,720
doing monitoring and metrics very

00:18:47,279 --> 00:18:51,090
important for the go-live

00:18:48,720 --> 00:18:53,940
when you will have issues this will help

00:18:51,090 --> 00:18:55,620
you a lot but also if you have nice

00:18:53,940 --> 00:18:57,000
metrics and monitoring in place it will

00:18:55,620 --> 00:18:59,370
help you also after the go-live it will

00:18:57,000 --> 00:19:00,419
help your development team who is doing

00:18:59,370 --> 00:19:01,710
the operations it will help your

00:19:00,419 --> 00:19:03,929
business also to understand what's going

00:19:01,710 --> 00:19:08,130
on so if you want to invest your time

00:19:03,929 --> 00:19:11,279
somewhere this is the place yeah once

00:19:08,130 --> 00:19:13,279
you have this you running the load test

00:19:11,279 --> 00:19:16,080
of course you can check for bottlenecks

00:19:13,279 --> 00:19:17,669
stability you will see immediately when

00:19:16,080 --> 00:19:18,720
you have good monitoring and metrics if

00:19:17,669 --> 00:19:20,370
you have if the system is over

00:19:18,720 --> 00:19:24,000
provisioned on on the provision it's

00:19:20,370 --> 00:19:26,610
very easy you should be verifying

00:19:24,000 --> 00:19:28,169
correctness of data maybe you have some

00:19:26,610 --> 00:19:29,549
miss configuration you're writing into

00:19:28,169 --> 00:19:31,440
the wrong database you're writing from

00:19:29,549 --> 00:19:33,860
production into staging system or

00:19:31,440 --> 00:19:36,690
whatever so you have to run all your

00:19:33,860 --> 00:19:37,690
jobs we were many all testing everything

00:19:36,690 --> 00:19:39,730
and to then

00:19:37,690 --> 00:19:41,909
nearly verified that the data and all

00:19:39,730 --> 00:19:46,539
the wiring is correct super important

00:19:41,909 --> 00:19:47,559
security testing usually very difficult

00:19:46,539 --> 00:19:49,659
to automate so you have to do this

00:19:47,559 --> 00:19:50,860
manually the new platform is completely

00:19:49,659 --> 00:19:52,120
different setup from what you had

00:19:50,860 --> 00:19:54,429
previously so we have to check

00:19:52,120 --> 00:19:55,870
everything you really need to pay

00:19:54,429 --> 00:19:59,889
attention to security this is difficult

00:19:55,870 --> 00:20:01,929
but before the go live this is something

00:19:59,889 --> 00:20:04,210
you have to do and be ready for a

00:20:01,929 --> 00:20:05,529
rollback plan for rollback if you do the

00:20:04,210 --> 00:20:07,330
thing that we are recommending in the

00:20:05,529 --> 00:20:09,879
beginning deploying the same artefact

00:20:07,330 --> 00:20:13,000
into multiple environments it will be

00:20:09,879 --> 00:20:15,940
easier for you to do and but you think

00:20:13,000 --> 00:20:18,789
about the data so these are the points

00:20:15,940 --> 00:20:21,279
ok awesome I'm now going to give the

00:20:18,789 --> 00:20:23,950
stage to Matthias to talk about next

00:20:21,279 --> 00:20:24,389
steps after the migration is done thank

00:20:23,950 --> 00:20:28,330
you

00:20:24,389 --> 00:20:30,700
Thanks cool so yeah so now you have

00:20:28,330 --> 00:20:33,490
migrated to Cloud Foundry but you're

00:20:30,700 --> 00:20:34,990
still not really done with migration so

00:20:33,490 --> 00:20:37,210
you've done the minimum to get onboard

00:20:34,990 --> 00:20:39,100
and done this hopefully successfully and

00:20:37,210 --> 00:20:41,620
now let's see what you can do actually

00:20:39,100 --> 00:20:43,929
to get the most also platform and get

00:20:41,620 --> 00:20:46,179
fully running on Cloud Foundry so again

00:20:43,929 --> 00:20:48,250
here we will cite actual manifesto to

00:20:46,179 --> 00:20:50,320
have a continuous attention to technical

00:20:48,250 --> 00:20:53,110
excellence because overall this will

00:20:50,320 --> 00:20:55,470
increase the agility of your team so

00:20:53,110 --> 00:20:58,330
what does this mean so agility for now

00:20:55,470 --> 00:21:00,850
let's have a look at simplifying of the

00:20:58,330 --> 00:21:04,090
development process so first of all if

00:21:00,850 --> 00:21:07,720
your team is still a hosting and

00:21:04,090 --> 00:21:10,169
operating and own influences for for

00:21:07,720 --> 00:21:13,539
keeping a development team alive like

00:21:10,169 --> 00:21:14,950
logging or whatever you need and you

00:21:13,539 --> 00:21:18,340
have a look at the services that are

00:21:14,950 --> 00:21:20,470
provided by cloud foundry on whatever

00:21:18,340 --> 00:21:22,779
cloud you are have a deep look what

00:21:20,470 --> 00:21:24,549
there is and what you can replace and

00:21:22,779 --> 00:21:27,309
get rid of on your side so basically

00:21:24,549 --> 00:21:29,110
everything you operate on your own fix

00:21:27,309 --> 00:21:31,779
on your own this will just take time

00:21:29,110 --> 00:21:33,970
from your team so get rid of that free

00:21:31,779 --> 00:21:37,360
up your team so that they can get up

00:21:33,970 --> 00:21:40,330
with working on features and increasing

00:21:37,360 --> 00:21:43,480
the the product quality so this is one

00:21:40,330 --> 00:21:47,040
big step aside that you should also aim

00:21:43,480 --> 00:21:49,940
for automating all the environments

00:21:47,040 --> 00:21:52,680
the development environment also the

00:21:49,940 --> 00:21:56,130
employment should be automated as well

00:21:52,680 --> 00:21:58,380
as the testing so I think nobody really

00:21:56,130 --> 00:22:01,140
likes doing manual things especially

00:21:58,380 --> 00:22:02,850
developers we don't like it so whatever

00:22:01,140 --> 00:22:06,990
you can automate will help you in the

00:22:02,850 --> 00:22:09,390
past and in the future and overall you

00:22:06,990 --> 00:22:11,340
will for sure take time fixing the

00:22:09,390 --> 00:22:13,380
pipelines and it will be a pain but on

00:22:11,340 --> 00:22:16,500
the long run it will definitely benefit

00:22:13,380 --> 00:22:17,790
from it from better product quality and

00:22:16,500 --> 00:22:20,270
also your developers will have

00:22:17,790 --> 00:22:23,520
ultimately more time to focus again on

00:22:20,270 --> 00:22:27,450
future delivery and making the product

00:22:23,520 --> 00:22:30,000
better and at last point money toward

00:22:27,450 --> 00:22:31,890
the application try to get system

00:22:30,000 --> 00:22:34,460
metrics and try to find out when your

00:22:31,890 --> 00:22:37,140
application is first in a healthy state

00:22:34,460 --> 00:22:41,460
then also when it's an analysis -

00:22:37,140 --> 00:22:43,590
unhealthy state and if you can I think

00:22:41,460 --> 00:22:45,270
this is more a bit more of an advanced

00:22:43,590 --> 00:22:47,670
topic also find out when it's getting

00:22:45,270 --> 00:22:49,830
into an analysis state and this is very

00:22:47,670 --> 00:22:53,460
very important because then you will be

00:22:49,830 --> 00:22:55,680
able to maybe decrease the amount of

00:22:53,460 --> 00:22:58,020
down times you have so a really

00:22:55,680 --> 00:22:59,610
important point probably takes some time

00:22:58,020 --> 00:23:02,070
but if you can achieve that this is just

00:22:59,610 --> 00:23:04,830
awesome - to avoid on downturns in the

00:23:02,070 --> 00:23:08,070
end so the next point we want to talk

00:23:04,830 --> 00:23:11,970
about is optimizing the application and

00:23:08,070 --> 00:23:16,080
reducing the cost overall so first of

00:23:11,970 --> 00:23:18,150
all memory in the cloud world is one of

00:23:16,080 --> 00:23:20,310
the most important parts so you should

00:23:18,150 --> 00:23:22,230
first check your application and see if

00:23:20,310 --> 00:23:24,780
there's any way to optimize the

00:23:22,230 --> 00:23:26,310
application to use less memory so this

00:23:24,780 --> 00:23:28,830
will definitely help you to reduce the

00:23:26,310 --> 00:23:31,590
cost and there's not only always

00:23:28,830 --> 00:23:33,720
something any application can can do

00:23:31,590 --> 00:23:36,690
better so first of all we recommend

00:23:33,720 --> 00:23:39,000
looking into that such that you should

00:23:36,690 --> 00:23:42,120
try to aim for scale square to zero

00:23:39,000 --> 00:23:44,340
development infrastructure so cloud is

00:23:42,120 --> 00:23:47,940
basically the perfect world for us with

00:23:44,340 --> 00:23:49,860
the paper use to only use stuff when we

00:23:47,940 --> 00:23:52,470
really need it so for example if you

00:23:49,860 --> 00:23:54,300
have a testing environment and it's only

00:23:52,470 --> 00:23:57,200
used a couple of minutes or maybe a few

00:23:54,300 --> 00:23:59,700
hours per day you why should you not

00:23:57,200 --> 00:24:01,830
build the testing environment on the fly

00:23:59,700 --> 00:24:03,930
do the testing after that throw it away

00:24:01,830 --> 00:24:06,300
so this will definitely help to reduce

00:24:03,930 --> 00:24:10,290
the cost because you only pay when you

00:24:06,300 --> 00:24:13,260
use it so make sense the third part here

00:24:10,290 --> 00:24:15,990
is a long already said earlier applying

00:24:13,260 --> 00:24:18,750
to the factors principles so again

00:24:15,990 --> 00:24:20,700
there's definitely always something each

00:24:18,750 --> 00:24:23,220
and every application can do better so

00:24:20,700 --> 00:24:24,480
we also recommend looking into that goes

00:24:23,220 --> 00:24:26,670
through the point and see what your

00:24:24,480 --> 00:24:30,450
application is applying to and what not

00:24:26,670 --> 00:24:33,180
so really a good point and last but not

00:24:30,450 --> 00:24:35,640
least I think quite obvious getting rid

00:24:33,180 --> 00:24:38,840
of your legacy code and also legacy

00:24:35,640 --> 00:24:42,660
systems so if you have legacy pipelines

00:24:38,840 --> 00:24:44,400
artifacts logging whatever you have get

00:24:42,660 --> 00:24:46,350
rid of it freed up for teams so that

00:24:44,400 --> 00:24:47,730
they can just focus on the new

00:24:46,350 --> 00:24:50,550
application

00:24:47,730 --> 00:24:53,100
besides that we but still recommend to

00:24:50,550 --> 00:24:55,410
maybe keep the old infrastructure in

00:24:53,100 --> 00:24:57,570
place after the migration for a couple

00:24:55,410 --> 00:24:59,610
of weeks just to make sure everything is

00:24:57,570 --> 00:25:01,500
fine and then you can we can throw it

00:24:59,610 --> 00:25:05,310
away and fully focus on your note

00:25:01,500 --> 00:25:07,650
journey okay the last part we want to

00:25:05,310 --> 00:25:10,080
talk about today is the cultural

00:25:07,650 --> 00:25:12,000
perspective for such a migration and we

00:25:10,080 --> 00:25:14,240
will again fight here the agile

00:25:12,000 --> 00:25:17,460
manifesto to build projects around

00:25:14,240 --> 00:25:20,340
motivated individuals and trust them to

00:25:17,460 --> 00:25:22,890
get the job done and Trust is really the

00:25:20,340 --> 00:25:24,570
important work here because now we have

00:25:22,890 --> 00:25:28,410
like if you have not been on the path

00:25:24,570 --> 00:25:31,800
before any unique way to give your team

00:25:28,410 --> 00:25:34,710
and your developers more freedom but

00:25:31,800 --> 00:25:36,840
also more responsibility so let's have a

00:25:34,710 --> 00:25:39,270
look at developer productivity as such

00:25:36,840 --> 00:25:44,880
so I think you all know the comparison

00:25:39,270 --> 00:25:47,370
is past and so on and overall hiring and

00:25:44,880 --> 00:25:49,320
retaining talent is really hard when you

00:25:47,370 --> 00:25:51,780
are on an IAS level and you have to deal

00:25:49,320 --> 00:25:53,340
with a lot of different technologies you

00:25:51,780 --> 00:25:55,590
have a whole big stack you need to take

00:25:53,340 --> 00:25:57,810
care about from operations to setting it

00:25:55,590 --> 00:25:59,970
up keeping it alive bug fixing and

00:25:57,810 --> 00:26:02,490
patching so there's a lot to know and

00:25:59,970 --> 00:26:04,140
it's really hard to get to

00:26:02,490 --> 00:26:07,260
people for the job and also then keep

00:26:04,140 --> 00:26:09,360
them so in the past world this is

00:26:07,260 --> 00:26:12,059
significantly easier because now we're

00:26:09,360 --> 00:26:14,340
really only taking care about the

00:26:12,059 --> 00:26:16,620
application and the data so that the

00:26:14,340 --> 00:26:20,190
developers can really focus on that and

00:26:16,620 --> 00:26:23,370
keep the rest aside and this will will

00:26:20,190 --> 00:26:25,710
really help you to to help to focus on

00:26:23,370 --> 00:26:28,350
the development of the application and

00:26:25,710 --> 00:26:30,540
and get the rest out of your team so

00:26:28,350 --> 00:26:31,980
besides that also setting more or

00:26:30,540 --> 00:26:33,840
betting more on open source will

00:26:31,980 --> 00:26:35,970
definitely help to maybe not always

00:26:33,840 --> 00:26:39,510
reinvent to deal with in the team it's

00:26:35,970 --> 00:26:41,190
nice but there's mostly some stuff

00:26:39,510 --> 00:26:44,900
available you can reuse so we also

00:26:41,190 --> 00:26:49,080
recommend doing this at the other side

00:26:44,900 --> 00:26:51,780
so connected with this topic is the last

00:26:49,080 --> 00:26:55,380
one we were talking about today to

00:26:51,780 --> 00:26:58,230
empower a real end-to-end responsibility

00:26:55,380 --> 00:27:00,900
within your team because now it's the

00:26:58,230 --> 00:27:03,750
big time when you're going from IIST to

00:27:00,900 --> 00:27:06,120
pass that you really have less stuff to

00:27:03,750 --> 00:27:08,250
do and your team can from end to end

00:27:06,120 --> 00:27:11,429
take over all the tasks so from

00:27:08,250 --> 00:27:14,400
development to testing to deploying to

00:27:11,429 --> 00:27:16,200
operating this is now all significantly

00:27:14,400 --> 00:27:19,080
easier when you're on a path level on

00:27:16,200 --> 00:27:21,030
our cloud foundry and we'll help you

00:27:19,080 --> 00:27:24,690
also within the team to organize the

00:27:21,030 --> 00:27:26,700
team properly so for example as they

00:27:24,690 --> 00:27:28,920
will probably be less or no Cee Lo's

00:27:26,700 --> 00:27:31,230
because you don't need specialists for

00:27:28,920 --> 00:27:33,330
example for operations everyone can do

00:27:31,230 --> 00:27:35,429
everything so there can be a guy out

00:27:33,330 --> 00:27:37,860
sick there can be someone on vacation or

00:27:35,429 --> 00:27:39,750
leaving the company you will still have

00:27:37,860 --> 00:27:41,850
at least one or two people who at

00:27:39,750 --> 00:27:44,690
minimum have basic knowledge about the

00:27:41,850 --> 00:27:47,040
topic so this is really really a key

00:27:44,690 --> 00:27:48,990
thing here when going to path and you

00:27:47,040 --> 00:27:51,360
should not miss the opportunity to

00:27:48,990 --> 00:27:53,370
implement such as such an end-to-end

00:27:51,360 --> 00:27:54,690
responsibility in your team and run a

00:27:53,370 --> 00:27:58,890
real DevOps

00:27:54,690 --> 00:28:02,580
so to to get the whole thing started

00:27:58,890 --> 00:28:06,210
what we did for example is when we knew

00:28:02,580 --> 00:28:08,790
that we want to shift away from IAS we

00:28:06,210 --> 00:28:10,440
involved a team early on and brought

00:28:08,790 --> 00:28:13,730
into the discussion and talked to them

00:28:10,440 --> 00:28:16,340
and said hey what could be the next step

00:28:13,730 --> 00:28:18,050
and again we had we had a nice solution

00:28:16,340 --> 00:28:20,750
together with the team even the team

00:28:18,050 --> 00:28:22,580
proposing to go to Cloud Foundry and

00:28:20,750 --> 00:28:24,440
this was perfect for us because we had

00:28:22,580 --> 00:28:27,110
right away from the start the buy-in

00:28:24,440 --> 00:28:30,170
from the team they want to go to to

00:28:27,110 --> 00:28:32,360
Cloud Foundry and this was actually than

00:28:30,170 --> 00:28:34,610
the start for a team to take over more

00:28:32,360 --> 00:28:36,920
responsibilities getting involved into

00:28:34,610 --> 00:28:40,160
into everything from from a to set and

00:28:36,920 --> 00:28:42,230
getting the whole thing running and it's

00:28:40,160 --> 00:28:44,420
also a lot of easier now for the team to

00:28:42,230 --> 00:28:47,030
get information about the project for

00:28:44,420 --> 00:28:49,190
example for project costs we also listed

00:28:47,030 --> 00:28:51,440
that here so you really see as a team

00:28:49,190 --> 00:28:54,500
what costs are you producing so if you

00:28:51,440 --> 00:28:56,030
are enhancing the product you can

00:28:54,500 --> 00:28:58,210
actually see all the costs go down

00:28:56,030 --> 00:29:00,830
because now we have a scale to zero

00:28:58,210 --> 00:29:02,660
development environment for example so

00:29:00,830 --> 00:29:05,180
this is really great so we definitely

00:29:02,660 --> 00:29:07,940
recommend if you're going this route get

00:29:05,180 --> 00:29:13,330
the team involved and and try to get an

00:29:07,940 --> 00:29:13,330
Trent responsibility integrators okay

00:29:13,600 --> 00:29:18,340
questions and answers

00:29:15,320 --> 00:29:18,340

YouTube URL: https://www.youtube.com/watch?v=xPC_VzcfeXo


