Title: Kubernetes 101 for Quarks and Eirini Users - Oleksandr Slynko, Pivotal & Georgi Dankov, SAP
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	Kubernetes 101 for Quarks and Eirini Users - Oleksandr Slynko, Pivotal & Georgi Dankov, SAP 

For a long time, the majority of Cloud Foundry operators used Bosh to operate their deployments. Quarks project provides another way of deploying and using Cloud Foundry - Kubernetes. You might want to deploy it but don't know where to start.
 This talk is for you.
  Oleksandr and Georgi will show how to deploy and operate applications deployed on top of Kubernetes using Quarks. They will share their experience operating, upgrading and debugging Kubernetes-deployed Cloud Foundry. They will share potential caveats with starting with Quarks. Additionally, they will show the Eirini flow of deploying Cloud Foundry application. 
 As a result, you will be able to deploy on Kubernetes and use the simple Cloud Foundry installation."

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:05,970
good afternoon everyone welcome to arena

00:00:03,060 --> 00:00:08,220
summit and clarify this ya Calicut is

00:00:05,970 --> 00:00:10,790
called hundred days my name is

00:00:08,220 --> 00:00:19,320
Aleksandra stinko I work at pivotal

00:00:10,790 --> 00:00:22,350
project irony and today we will talk

00:00:19,320 --> 00:00:26,580
about several things that we want you to

00:00:22,350 --> 00:00:29,250
know it's project irony with some like

00:00:26,580 --> 00:00:31,080
minor details how it works a little bit

00:00:29,250 --> 00:00:35,760
about project course and how it works

00:00:31,080 --> 00:00:37,469
and then about kubernetes some little

00:00:35,760 --> 00:00:39,540
bit of details a little bit of debugging

00:00:37,469 --> 00:00:42,390
we won't be able to cover everything

00:00:39,540 --> 00:00:45,270
we'll give some list of some tutorials

00:00:42,390 --> 00:00:49,469
ahead and we'll share the slides after

00:00:45,270 --> 00:00:54,270
the presentation so don't need to take a

00:00:49,469 --> 00:00:59,270
picture of it so why do you want to know

00:00:54,270 --> 00:01:02,070
more about irony quarks and kubernetes

00:00:59,270 --> 00:01:06,869
first of all quarks provide similar

00:01:02,070 --> 00:01:11,880
operator experience similar but not the

00:01:06,869 --> 00:01:15,750
same and lets you deploy it all for now

00:01:11,880 --> 00:01:18,030
kubernetes and developers get identical

00:01:15,750 --> 00:01:20,540
experience as both deployed cloud

00:01:18,030 --> 00:01:24,390
foundry coverage code called foundry

00:01:20,540 --> 00:01:27,740
also co works and arena provides smaller

00:01:24,390 --> 00:01:31,640
memory footprint and go practice adds

00:01:27,740 --> 00:01:36,659
simpler after scaling which you can use

00:01:31,640 --> 00:01:40,049
in future not now but soon and also

00:01:36,659 --> 00:01:43,799
because all the hype you want in our

00:01:40,049 --> 00:01:46,890
communities so what do we have we have

00:01:43,799 --> 00:01:48,920
all these components or on top of both

00:01:46,890 --> 00:01:54,270
typical called for the installation and

00:01:48,920 --> 00:01:58,500
then we Irene with quarks in just two

00:01:54,270 --> 00:02:02,780
like this click and tada my recent onset

00:01:58,500 --> 00:02:06,840
of combat is as simple of this and

00:02:02,780 --> 00:02:11,340
cowork solid for you so what it does it

00:02:06,840 --> 00:02:13,590
gets a bolus run some commands

00:02:11,340 --> 00:02:15,450
converts into talked image

00:02:13,590 --> 00:02:18,180
and then convert it to commands template

00:02:15,450 --> 00:02:22,170
which you can apply to a cluster in your

00:02:18,180 --> 00:02:24,450
cluster and notice that little bit more

00:02:22,170 --> 00:02:26,849
I'll just do refresher for some

00:02:24,450 --> 00:02:29,130
committees details that primitives that

00:02:26,849 --> 00:02:32,040
people should know or if they learn it

00:02:29,130 --> 00:02:37,830
here today it would be great first a

00:02:32,040 --> 00:02:39,739
sport board is minimal deployable entity

00:02:37,830 --> 00:02:42,269
in kubernetes its several containers

00:02:39,739 --> 00:02:47,120
Ryan together in single address space

00:02:42,269 --> 00:02:50,580
and it's one of containers

00:02:47,120 --> 00:02:56,400
it's a ephemeral sort can't read at any

00:02:50,580 --> 00:02:58,890
time and has IP address and things and

00:02:56,400 --> 00:03:00,780
since the ephemeral Cooper doesn't

00:02:58,890 --> 00:03:03,660
checked it's up and running if it dies

00:03:00,780 --> 00:03:06,599
it dies but it has different primitives

00:03:03,660 --> 00:03:10,440
that looks at both up and running that

00:03:06,599 --> 00:03:13,250
multiple pods are running so in quirks

00:03:10,440 --> 00:03:17,130
and in irony be mostly you stateful sets

00:03:13,250 --> 00:03:21,030
which gives you ordering and also give

00:03:17,130 --> 00:03:24,620
you a Kalos to sticky sessions and not

00:03:21,030 --> 00:03:27,510
hand allows you to connect disks and

00:03:24,620 --> 00:03:31,890
also their deployments which are not

00:03:27,510 --> 00:03:36,239
ordered but we won't cover them in this

00:03:31,890 --> 00:03:38,519
talk and as I said both have positive

00:03:36,239 --> 00:03:40,829
terminals they die all the time so you

00:03:38,519 --> 00:03:44,819
know to have the same address Cabrera's

00:03:40,829 --> 00:03:48,269
provides primitives called service which

00:03:44,819 --> 00:03:50,549
just has the same IP address all the

00:03:48,269 --> 00:03:53,760
time same others of the time and fine

00:03:50,549 --> 00:03:56,100
ports dice and you created it connects

00:03:53,760 --> 00:04:00,630
to the new port it's done the cabarrus

00:03:56,100 --> 00:04:02,489
magic and one more piece of magic so in

00:04:00,630 --> 00:04:04,340
order to solve the traffic all the time

00:04:02,489 --> 00:04:09,389
Cabaye thus allows you to specify

00:04:04,340 --> 00:04:09,900
so-called readiness probe and when port

00:04:09,389 --> 00:04:12,269
is ready

00:04:09,900 --> 00:04:14,579
I'd say you can configure it let's say

00:04:12,269 --> 00:04:17,850
application is running or it's listening

00:04:14,579 --> 00:04:20,220
on specific port it's connected to

00:04:17,850 --> 00:04:23,669
service if it's not ready service don't

00:04:20,220 --> 00:04:25,460
serve any traffic to that portal and we

00:04:23,669 --> 00:04:29,660
it's used awesome

00:04:25,460 --> 00:04:32,690
a course and irony so those things and

00:04:29,660 --> 00:04:36,139
as a result all the stains show restate

00:04:32,690 --> 00:04:38,270
recited so in this blue box and I think

00:04:36,139 --> 00:04:41,780
it's looks very good what do you think

00:04:38,270 --> 00:04:44,240
okay well I do agree this is pretty good

00:04:41,780 --> 00:04:48,590
but I still see one issue with this

00:04:44,240 --> 00:04:49,100
image does anyone know what it is let me

00:04:48,590 --> 00:04:52,070
help you

00:04:49,100 --> 00:04:53,120
it's the presence of Diego so why is

00:04:52,070 --> 00:04:54,919
Diego an issue

00:04:53,120 --> 00:04:57,680
well Diego is a container schedule

00:04:54,919 --> 00:04:59,419
common 870 in our schedule so now I have

00:04:57,680 --> 00:05:01,520
a container schedule being scheduled by

00:04:59,419 --> 00:05:03,949
another container of schedule and what

00:05:01,520 --> 00:05:05,960
happens when UCF pushing up the request

00:05:03,949 --> 00:05:07,940
will go to Diego and Diego will try to

00:05:05,960 --> 00:05:09,979
schedule this up in a carton container

00:05:07,940 --> 00:05:12,139
but since Diego itself is running in a

00:05:09,979 --> 00:05:14,419
container what you'll eventually end up

00:05:12,139 --> 00:05:16,880
with is something like this so have your

00:05:14,419 --> 00:05:18,800
app running in a garden container which

00:05:16,880 --> 00:05:21,050
is turning in a docker container which

00:05:18,800 --> 00:05:24,139
turning in a component spot and I really

00:05:21,050 --> 00:05:26,240
hope you see what the issue here is you

00:05:24,139 --> 00:05:28,759
have this nasty case of multiple nested

00:05:26,240 --> 00:05:31,849
containers it's hard to debug it's

00:05:28,759 --> 00:05:34,849
harder to operate it's just nowhere near

00:05:31,849 --> 00:05:35,479
a native solution so what can we do in

00:05:34,849 --> 00:05:38,000
that case

00:05:35,479 --> 00:05:40,550
well since kubernetes the container

00:05:38,000 --> 00:05:42,889
schedule first and foremost wouldn't be

00:05:40,550 --> 00:05:44,780
nice to be able to use the same cluster

00:05:42,889 --> 00:05:46,639
that you used to deploy or call foundry

00:05:44,780 --> 00:05:49,190
components in socks could actually

00:05:46,639 --> 00:05:52,180
schedule a UPS that's what irony does

00:05:49,190 --> 00:05:54,289
and in a nutshell we can say that irony

00:05:52,180 --> 00:05:55,909
enables co-variants

00:05:54,289 --> 00:05:59,210
to take over scheduling called foundry

00:05:55,909 --> 00:06:01,759
and now when you have to shut up this

00:05:59,210 --> 00:06:03,949
request will go to irony and irony will

00:06:01,759 --> 00:06:06,830
map it to some kubernetes native objects

00:06:03,949 --> 00:06:10,430
and it will let kubernetes do all the

00:06:06,830 --> 00:06:13,610
rest so from an architectural point of

00:06:10,430 --> 00:06:15,440
view what will happen is pretty much the

00:06:13,610 --> 00:06:16,400
same thing but now we don't have any

00:06:15,440 --> 00:06:20,990
deal components

00:06:16,400 --> 00:06:24,229
you just have idea and that was the

00:06:20,990 --> 00:06:26,630
high-level overview of what quirks

00:06:24,229 --> 00:06:28,490
needing to do but if you want to be able

00:06:26,630 --> 00:06:31,200
to understand them better and to operate

00:06:28,490 --> 00:06:33,680
them we have to take a closer look

00:06:31,200 --> 00:06:36,360
of how these things actually work and

00:06:33,680 --> 00:06:40,080
Alex will start by talking a bit about

00:06:36,360 --> 00:06:42,990
the quarks magic yeah so you probably

00:06:40,080 --> 00:06:44,550
know how packaging happens in bold is

00:06:42,990 --> 00:06:47,580
partially this communication happens

00:06:44,550 --> 00:06:49,980
with sportiness and how size deprivation

00:06:47,580 --> 00:06:52,890
is taught incredible you don't have

00:06:49,980 --> 00:06:56,070
anything of it in Cabarrus field so what

00:06:52,890 --> 00:07:00,090
you have instead is docker images cube

00:06:56,070 --> 00:07:02,790
dienes and go by the secrets so let's

00:07:00,090 --> 00:07:05,280
just talk about images they a generated

00:07:02,790 --> 00:07:09,690
by tool called fissile it gets porcellus

00:07:05,280 --> 00:07:14,340
and generates docker images and manifest

00:07:09,690 --> 00:07:17,250
and how it's done it does Pais image

00:07:14,340 --> 00:07:23,010
stem cell puts compiled packages and

00:07:17,250 --> 00:07:25,200
puts on top of it all the I can fake job

00:07:23,010 --> 00:07:27,780
scripts and zip conflicts and as a

00:07:25,200 --> 00:07:30,810
result each image is ready to start it

00:07:27,780 --> 00:07:34,020
just needs some environment variables to

00:07:30,810 --> 00:07:35,460
finish the templating and we'll come to

00:07:34,020 --> 00:07:38,370
environment variables later

00:07:35,460 --> 00:07:41,940
and how do components talk to each other

00:07:38,370 --> 00:07:43,640
so Cavanaugh's provides cube Dennis and

00:07:41,940 --> 00:07:46,590
Cortinas it's two different components

00:07:43,640 --> 00:07:51,470
doing the same thing you can deploy

00:07:46,590 --> 00:07:53,670
either of them I think all the whole

00:07:51,470 --> 00:07:56,790
providers provides them and deploy them

00:07:53,670 --> 00:07:59,250
by default one of them by default and

00:07:56,790 --> 00:08:02,160
how they work in a nutshell you have

00:07:59,250 --> 00:08:05,100
courtliness run in the cluster it talks

00:08:02,160 --> 00:08:09,450
to cabanas API get some information and

00:08:05,100 --> 00:08:12,510
builds DNS entries and also itself says

00:08:09,450 --> 00:08:15,780
DNS resolver for each kubernetes sport

00:08:12,510 --> 00:08:17,910
which glass container and how does the

00:08:15,780 --> 00:08:21,570
nests and disability so imagine you have

00:08:17,910 --> 00:08:23,610
service running in same namespace and as

00:08:21,570 --> 00:08:27,420
resulted builders service

00:08:23,610 --> 00:08:27,840
thought namespace dot SVC for type of

00:08:27,420 --> 00:08:29,790
say

00:08:27,840 --> 00:08:32,220
entity service in this case and dot

00:08:29,790 --> 00:08:35,340
cluster name which is usually close to

00:08:32,220 --> 00:08:38,940
local but not always and as a result

00:08:35,340 --> 00:08:41,430
this DNS name is resolvable inside the

00:08:38,940 --> 00:08:44,790
clusters of any component can say karuta

00:08:41,430 --> 00:08:49,680
dot IC l dot s physiatrist allaka and

00:08:44,790 --> 00:08:50,640
talk to go Rooter okay let's talk about

00:08:49,680 --> 00:08:52,890
secrets

00:08:50,640 --> 00:08:56,100
so Cabela's doesn't generate secret for

00:08:52,890 --> 00:08:59,220
you it has this thing called kubernetes

00:08:56,100 --> 00:09:02,310
secret and the secret white straws

00:08:59,220 --> 00:09:07,170
secrets encrypted in a CD database it's

00:09:02,310 --> 00:09:12,560
not too secure but can be used to solve

00:09:07,170 --> 00:09:15,060
a password and mostly kubernetes

00:09:12,560 --> 00:09:16,680
applications require that you have all

00:09:15,060 --> 00:09:21,750
the secrets provided you stole them

00:09:16,680 --> 00:09:24,810
solvin luckily for us quarks gives

00:09:21,750 --> 00:09:28,230
secret generation job that generates all

00:09:24,810 --> 00:09:32,840
the secrets that called foundry requires

00:09:28,230 --> 00:09:35,880
and store them in a CF secret secret and

00:09:32,840 --> 00:09:39,390
as a result by important needs to start

00:09:35,880 --> 00:09:43,500
and get some values I get those values

00:09:39,390 --> 00:09:46,260
from this secret puja marine environment

00:09:43,500 --> 00:09:49,920
variables and then completed happening

00:09:46,260 --> 00:09:55,560
and these secrets are propagated to port

00:09:49,920 --> 00:09:58,800
and they used inside the pod so let's

00:09:55,560 --> 00:10:01,320
talk about all right let's talk about le

00:09:58,800 --> 00:10:03,330
and just to disclaimer we won't be able

00:10:01,320 --> 00:10:05,190
to go through all the arena details

00:10:03,330 --> 00:10:06,390
because we don't have the time if you

00:10:05,190 --> 00:10:07,740
want to know more about Aden you should

00:10:06,390 --> 00:10:09,410
definitely watch all the projects that

00:10:07,740 --> 00:10:12,720
they talk stuff I've had so far

00:10:09,410 --> 00:10:15,270
but anyway as we already said I didn't

00:10:12,720 --> 00:10:16,890
is this little mocking layer that glues

00:10:15,270 --> 00:10:20,310
together called funding kubernetes when

00:10:16,890 --> 00:10:22,320
it comes to our scheduling and as such

00:10:20,310 --> 00:10:24,330
it has to be able to mop seer specific

00:10:22,320 --> 00:10:26,580
things to cover its native objects and

00:10:24,330 --> 00:10:28,440
it has to be able to do all of these

00:10:26,580 --> 00:10:31,140
things and many many more

00:10:28,440 --> 00:10:33,480
but in kubernetes and the first thing it

00:10:31,140 --> 00:10:35,370
does when UCF pushing up is to actually

00:10:33,480 --> 00:10:39,210
create a droplet for the app and it does

00:10:35,370 --> 00:10:41,940
that by running staging and therefore

00:10:39,210 --> 00:10:43,590
Irena creates a kubernetes job and it

00:10:41,940 --> 00:10:44,970
runs the staging process in the

00:10:43,590 --> 00:10:47,250
container that was created by the job

00:10:44,970 --> 00:10:49,530
and you can think about kubernetes jobs

00:10:47,250 --> 00:10:51,960
that they're basically the same thing as

00:10:49,530 --> 00:10:54,450
CF tasks is just a process that runs to

00:10:51,960 --> 00:10:57,690
completion and just before the staging

00:10:54,450 --> 00:11:01,740
job actually completes it uploads the

00:10:57,690 --> 00:11:03,360
in droplet in the bit service the pit

00:11:01,740 --> 00:11:08,160
service component which we use as a

00:11:03,360 --> 00:11:09,930
registry that hosts all up images so

00:11:08,160 --> 00:11:12,450
let's take a closer look at the staging

00:11:09,930 --> 00:11:14,550
job and we can see that it contains in

00:11:12,450 --> 00:11:16,830
consists of not one but three containers

00:11:14,550 --> 00:11:19,080
that are run sequentially in each of

00:11:16,830 --> 00:11:21,120
them is performing a different thing

00:11:19,080 --> 00:11:22,890
the first one is responsible for just

00:11:21,120 --> 00:11:25,050
downloading the abbot's

00:11:22,890 --> 00:11:26,790
the Builder is the one that's actually

00:11:25,050 --> 00:11:29,160
doing all the build packaging and it

00:11:26,790 --> 00:11:31,890
produces the droplet at the end and the

00:11:29,160 --> 00:11:34,460
uploader is obviously responsible for

00:11:31,890 --> 00:11:37,770
uploading the droplet to be serviced and

00:11:34,460 --> 00:11:39,900
you might be wondering why we split it

00:11:37,770 --> 00:11:42,210
that way why not just arrange a single

00:11:39,900 --> 00:11:44,580
container and there's a reason for that

00:11:42,210 --> 00:11:47,250
and that reason is because of security

00:11:44,580 --> 00:11:49,020
since both downloader and applaud are

00:11:47,250 --> 00:11:51,480
required to have some certificates

00:11:49,020 --> 00:11:52,680
present in the container because they

00:11:51,480 --> 00:11:55,050
need to connect to blob stole and bit

00:11:52,680 --> 00:11:56,610
service if the Builder step was actually

00:11:55,050 --> 00:11:59,310
running in the same container then in

00:11:56,610 --> 00:12:01,020
theory some built custom built pod can

00:11:59,310 --> 00:12:04,080
access these certificates and can use

00:12:01,020 --> 00:12:06,030
them for bad things so that's why we

00:12:04,080 --> 00:12:09,090
completely show that off and Turrentine

00:12:06,030 --> 00:12:12,600
separate in there so now that the app is

00:12:09,090 --> 00:12:14,910
staged Irene has to calculate structured

00:12:12,600 --> 00:12:17,370
schedule it and it does that by creating

00:12:14,910 --> 00:12:20,310
a stateful set and as Alex already

00:12:17,370 --> 00:12:23,460
explained data sets basically manage

00:12:20,310 --> 00:12:26,040
group of objects with identical

00:12:23,460 --> 00:12:29,010
container spec in these objects our

00:12:26,040 --> 00:12:31,620
ports are usually pods consists of one

00:12:29,010 --> 00:12:34,170
or multiple containers but in the case

00:12:31,620 --> 00:12:35,820
for uni it's always one container and

00:12:34,170 --> 00:12:39,090
this is the container that's actually

00:12:35,820 --> 00:12:39,600
running the app but since it's a

00:12:39,090 --> 00:12:41,850
container

00:12:39,600 --> 00:12:43,260
Cavanaugh's has to be able to pull the

00:12:41,850 --> 00:12:46,290
container image from somewhere and

00:12:43,260 --> 00:12:48,240
somewhere is called bit service if you

00:12:46,290 --> 00:12:50,610
recall we uploaded the droplet stupid

00:12:48,240 --> 00:12:53,010
service at the end of staging so now bit

00:12:50,610 --> 00:12:54,450
service can construct this app image by

00:12:53,010 --> 00:12:58,230
putting the droplet on top of a root

00:12:54,450 --> 00:13:02,970
face layer and the root face is just a

00:12:58,230 --> 00:13:04,880
wrapper around sibling surface tree the

00:13:02,970 --> 00:13:07,320
next two things would like to mention

00:13:04,880 --> 00:13:09,779
polishing routes and class events and

00:13:07,320 --> 00:13:13,439
the reason we're putting them together

00:13:09,779 --> 00:13:14,670
: covenants API called informal API how

00:13:13,439 --> 00:13:16,829
this works is basically you have an

00:13:14,670 --> 00:13:19,949
informal instance and this instance will

00:13:16,829 --> 00:13:22,379
receive an event every time company's

00:13:19,949 --> 00:13:26,850
resource of some type is updated

00:13:22,379 --> 00:13:29,370
terminated or created and for publishing

00:13:26,850 --> 00:13:30,899
routes we have an instance of an

00:13:29,370 --> 00:13:32,879
informal running in adeney and every

00:13:30,899 --> 00:13:35,160
time a police created this Informer

00:13:32,879 --> 00:13:37,259
we'll get an event for it and then it

00:13:35,160 --> 00:13:39,629
will tell Denis any renewal constructed

00:13:37,259 --> 00:13:41,699
correct route route registered message

00:13:39,629 --> 00:13:46,309
and send it to go router well the other

00:13:41,699 --> 00:13:49,559
route to when Apple is terminated again

00:13:46,309 --> 00:13:54,449
and he knows about it and sends the

00:13:49,559 --> 00:13:56,579
registered message for this crash events

00:13:54,449 --> 00:14:00,089
work in a very similar way but this time

00:13:56,579 --> 00:14:03,180
we have a separate informal that just

00:14:00,089 --> 00:14:05,009
watches for crashes and it tells again

00:14:03,180 --> 00:14:06,809
Iranian air enables in a crash event for

00:14:05,009 --> 00:14:10,350
this instance this time to cross

00:14:06,809 --> 00:14:12,449
controller all right so how done order

00:14:10,350 --> 00:14:14,850
to know how quirks and any basically

00:14:12,449 --> 00:14:17,459
work how do you install this whole Cloud

00:14:14,850 --> 00:14:19,699
Foundry on top codes the first thing you

00:14:17,459 --> 00:14:22,620
need to be familiar with is called helm

00:14:19,699 --> 00:14:24,689
helm is a package manager for kubernetes

00:14:22,620 --> 00:14:25,740
is the most widely used package measure

00:14:24,689 --> 00:14:28,500
for kubernetes

00:14:25,740 --> 00:14:30,629
and when working with helm you have to

00:14:28,500 --> 00:14:33,449
know about three main terms you have to

00:14:30,629 --> 00:14:35,160
know about Helms arts which is basically

00:14:33,449 --> 00:14:37,399
a collection of files which are called

00:14:35,160 --> 00:14:40,829
templates that describe similar

00:14:37,399 --> 00:14:42,779
kubernetes resources then you have a

00:14:40,829 --> 00:14:45,120
home repository which were home jars

00:14:42,779 --> 00:14:49,110
live and it just needs to be server

00:14:45,120 --> 00:14:51,389
which hosts package charge house it's

00:14:49,110 --> 00:14:54,689
also important to mention that charge

00:14:51,389 --> 00:14:57,329
can depend upon other charts and that's

00:14:54,689 --> 00:14:59,819
how we install the sewing deploy adding

00:14:57,329 --> 00:15:03,740
in our environments we just listed in e

00:14:59,819 --> 00:15:07,259
as a dependency of the main CF chart and

00:15:03,740 --> 00:15:09,809
the next thing the last thing to mention

00:15:07,259 --> 00:15:12,179
here is a release which is just a result

00:15:09,809 --> 00:15:14,639
our helm install should basically all

00:15:12,179 --> 00:15:17,639
these templates actually running on the

00:15:14,639 --> 00:15:20,790
cluster so others can actually work or

00:15:17,639 --> 00:15:22,460
home consists of two components there's

00:15:20,790 --> 00:15:24,350
film CLI which turning on

00:15:22,460 --> 00:15:26,270
local machine and there is a tiller

00:15:24,350 --> 00:15:30,070
component which lives in the coastal and

00:15:26,270 --> 00:15:32,900
when you want to upgrade or deploy any

00:15:30,070 --> 00:15:34,670
film chopped the Hume client will

00:15:32,900 --> 00:15:37,220
actually send this information killer

00:15:34,670 --> 00:15:39,260
component and tour will act on your

00:15:37,220 --> 00:15:41,950
behalf and it will call the cube API and

00:15:39,260 --> 00:15:44,420
it will create all these art resources

00:15:41,950 --> 00:15:46,580
now there are some things you need to be

00:15:44,420 --> 00:15:48,590
aware of when working with helm first

00:15:46,580 --> 00:15:52,370
one is that film is not that secure by

00:15:48,590 --> 00:15:53,780
default and you have to take care of

00:15:52,370 --> 00:15:57,520
applying the proper security

00:15:53,780 --> 00:16:00,920
configurations the next thing is that

00:15:57,520 --> 00:16:03,350
Hume CLI provides sort of useful flux

00:16:00,920 --> 00:16:05,960
for example dry land in the book will

00:16:03,350 --> 00:16:07,490
allow you to test your deployments

00:16:05,960 --> 00:16:10,010
without actually deploying anything to

00:16:07,490 --> 00:16:11,960
closer so he will still run all the pre

00:16:10,010 --> 00:16:13,460
deploy checks but it wouldn't actually

00:16:11,960 --> 00:16:17,200
apply anything so that way you can catch

00:16:13,460 --> 00:16:20,210
books earlier and last but not least

00:16:17,200 --> 00:16:23,780
film does templating and actually

00:16:20,210 --> 00:16:26,090
templating some huge part of him it uses

00:16:23,780 --> 00:16:28,880
a combination of go templating some

00:16:26,090 --> 00:16:30,800
custom functions and that allows child

00:16:28,880 --> 00:16:32,780
maintenance to expose variables

00:16:30,800 --> 00:16:36,350
properties that can be overridden by end

00:16:32,780 --> 00:16:38,180
users and these properties are usually

00:16:36,350 --> 00:16:42,830
put in a bottle

00:16:38,180 --> 00:16:44,450
 foul fYI there is a humor sentry on

00:16:42,830 --> 00:16:47,420
the way which is supposed to be a huge

00:16:44,450 --> 00:16:48,860
improvement over version 2 the biggest

00:16:47,420 --> 00:16:50,930
difference is that it actually doesn't

00:16:48,860 --> 00:16:53,300
contain it doesn't have a tiller

00:16:50,930 --> 00:16:57,680
component hem CLI directly communicates

00:16:53,300 --> 00:16:58,580
with the cube API but this is to

00:16:57,680 --> 00:17:01,280
embedder

00:16:58,580 --> 00:17:02,440
and it's not very stable so use at your

00:17:01,280 --> 00:17:05,839
own risk

00:17:02,440 --> 00:17:07,940
so now that we know how you know what

00:17:05,839 --> 00:17:10,640
helm actually is how do you install

00:17:07,940 --> 00:17:13,040
foundry and the only thing you have to

00:17:10,640 --> 00:17:14,420
do is run these two human stalls which

00:17:13,040 --> 00:17:17,330
were installed to film charts on your

00:17:14,420 --> 00:17:20,240
coaster the first one will install all

00:17:17,330 --> 00:17:22,100
the UN cup eBay components and in

00:17:20,240 --> 00:17:24,170
addition to the UA components to create

00:17:22,100 --> 00:17:28,000
a kubernetes secret which contains the

00:17:24,170 --> 00:17:30,920
sea salt for UA which you need in a bit

00:17:28,000 --> 00:17:33,020
and won all of these wants all these

00:17:30,920 --> 00:17:34,610
components are running you can install

00:17:33,020 --> 00:17:37,850
that is called foundry by storing the

00:17:34,610 --> 00:17:40,040
dear child but for the CF chart you need

00:17:37,850 --> 00:17:42,760
a couple of more things you need to

00:17:40,040 --> 00:17:45,590
provide a bit sorry certificate because

00:17:42,760 --> 00:17:47,330
it's a required certificates and the

00:17:45,590 --> 00:17:49,280
requirement for these certificates are

00:17:47,330 --> 00:17:52,130
that they have to be signed by CA which

00:17:49,280 --> 00:17:54,740
is trusted by the covenants cluster as

00:17:52,130 --> 00:17:56,960
we said you need a UAC a because a lot

00:17:54,740 --> 00:17:58,850
of Hesiod a lot of confounded components

00:17:56,960 --> 00:18:00,980
communicate with you a so they need to

00:17:58,850 --> 00:18:03,980
have a certificate and you need to

00:18:00,980 --> 00:18:06,500
provide a similar values file that was

00:18:03,980 --> 00:18:08,840
used to end upon you a in this will

00:18:06,500 --> 00:18:11,330
result you know the rest of the khawarij

00:18:08,840 --> 00:18:16,370
components being deployed and eventually

00:18:11,330 --> 00:18:18,049
running in the cluster well since you

00:18:16,370 --> 00:18:20,330
have installed all for now but at some

00:18:18,049 --> 00:18:23,570
point you would definitely need to

00:18:20,330 --> 00:18:27,919
upgrade it and to see how we can do that

00:18:23,570 --> 00:18:30,980
we'll jump to the terminal and see what

00:18:27,919 --> 00:18:38,299
we can do right

00:18:30,980 --> 00:18:39,950
do you see can you see it if you can't

00:18:38,299 --> 00:18:47,690
see just raise your hand close over even

00:18:39,950 --> 00:18:50,270
more all right so on the right we can

00:18:47,690 --> 00:18:51,679
see Cloud Foundry deployed and all of

00:18:50,270 --> 00:18:54,260
these components actually running in the

00:18:51,679 --> 00:18:56,360
cluster and let's say for example we

00:18:54,260 --> 00:18:58,790
want to upgrade the deployment and scale

00:18:56,360 --> 00:19:02,350
the API group to cut controller API

00:18:58,790 --> 00:19:04,760
group instance two to two instances

00:19:02,350 --> 00:19:06,770
before we do that let's actually see

00:19:04,760 --> 00:19:09,080
what we have installed and first thing

00:19:06,770 --> 00:19:11,090
we can do is we can do you can say home

00:19:09,080 --> 00:19:14,059
version just to verify that we're

00:19:11,090 --> 00:19:15,919
connected to the cluster and once we are

00:19:14,059 --> 00:19:18,500
connected to cluster we can Hume list

00:19:15,919 --> 00:19:19,730
which will show us all of the releases

00:19:18,500 --> 00:19:23,470
that are actually deployed on the

00:19:19,730 --> 00:19:24,679
cluster if you have internet of course

00:19:23,470 --> 00:19:26,419
yeah

00:19:24,679 --> 00:19:28,040
and we can see that we have three

00:19:26,419 --> 00:19:30,080
instances three releases in this case

00:19:28,040 --> 00:19:32,360
first some IBM caustic stuff so that's

00:19:30,080 --> 00:19:35,600
not interesting right now and then we

00:19:32,360 --> 00:19:38,450
have a CF anyway raises and you can see

00:19:35,600 --> 00:19:41,000
that helm shows us that the safe release

00:19:38,450 --> 00:19:45,050
was deployed using the C F chart version

00:19:41,000 --> 00:19:47,910
two 16.4 and the release was you a chart

00:19:45,050 --> 00:19:50,970
217 one and if you want to do

00:19:47,910 --> 00:19:52,710
any of these charts and inspect them who

00:19:50,970 --> 00:19:55,620
need to know in which repository they're

00:19:52,710 --> 00:19:58,230
they're hosted and in this case we do

00:19:55,620 --> 00:20:00,720
know it because we host it and it's on a

00:19:58,230 --> 00:20:03,180
teeny repository which is hosted using

00:20:00,720 --> 00:20:06,030
github so the first thing we have to do

00:20:03,180 --> 00:20:07,980
is tell him about it and once we have it

00:20:06,030 --> 00:20:09,990
we can just turn him search the name of

00:20:07,980 --> 00:20:11,550
the repository and this will tell us all

00:20:09,990 --> 00:20:14,280
of the theme charges are actually served

00:20:11,550 --> 00:20:17,370
by this reporter can have just a plain

00:20:14,280 --> 00:20:19,170
edenia chart we have a CF chart which

00:20:17,370 --> 00:20:20,880
contains all of the CF components but

00:20:19,170 --> 00:20:23,070
with a lenient bit service list it as

00:20:20,880 --> 00:20:26,220
dependencies and have a you a chart

00:20:23,070 --> 00:20:27,900
which is pretty standard if you want to

00:20:26,220 --> 00:20:30,020
download any of these charts you can

00:20:27,900 --> 00:20:32,490
just run him fetch with the name of the

00:20:30,020 --> 00:20:35,700
repository and then slash name of the

00:20:32,490 --> 00:20:38,460
chart and this will download vocally for

00:20:35,700 --> 00:20:40,080
us and we can inspect it in have stuff

00:20:38,460 --> 00:20:42,180
like chart llamo which is just some

00:20:40,080 --> 00:20:43,800
general chart information of name

00:20:42,180 --> 00:20:46,860
version description we have the

00:20:43,800 --> 00:20:48,600
requirements llamo which contains all

00:20:46,860 --> 00:20:49,650
the dependencies and where to find them

00:20:48,600 --> 00:20:53,610
it actually points to the repository

00:20:49,650 --> 00:20:55,140
system the repository that hosts them we

00:20:53,610 --> 00:20:57,300
have the templates directory which

00:20:55,140 --> 00:21:00,630
contains all of the resources that will

00:20:57,300 --> 00:21:03,810
be applied on the cluster and it has the

00:21:00,630 --> 00:21:05,610
values file which contains all the

00:21:03,810 --> 00:21:08,070
default values for the properties that

00:21:05,610 --> 00:21:10,920
you can override for the same chart and

00:21:08,070 --> 00:21:13,010
since we said we wanted to upgrade they

00:21:10,920 --> 00:21:16,890
see if the API grouped two instances

00:21:13,010 --> 00:21:19,410
this information is stored in a sizing

00:21:16,890 --> 00:21:21,210
section and the sizing section contains

00:21:19,410 --> 00:21:23,250
information for like all of the Kohala

00:21:21,210 --> 00:21:25,770
components but in this case we're

00:21:23,250 --> 00:21:27,420
interested in a VA group and here you

00:21:25,770 --> 00:21:29,490
can see what we can override for the a

00:21:27,420 --> 00:21:33,560
group which in this case the thing you

00:21:29,490 --> 00:21:36,480
want is the count and to override this

00:21:33,560 --> 00:21:38,160
we can use the same values file that was

00:21:36,480 --> 00:21:38,510
used to actually deploy it in the first

00:21:38,160 --> 00:21:42,110
place

00:21:38,510 --> 00:21:44,670
which should have stashed half here and

00:21:42,110 --> 00:21:46,320
this was all all the properties that we

00:21:44,670 --> 00:21:48,060
set initially when we deploy this

00:21:46,320 --> 00:21:51,000
environment so what we have to do is we

00:21:48,060 --> 00:21:53,180
just have to append to it and we wanted

00:21:51,000 --> 00:21:58,980
to say that the sizing for a PA group

00:21:53,180 --> 00:22:00,899
should be equal to two and now the

00:21:58,980 --> 00:22:02,940
like the last thing we have to do is

00:22:00,899 --> 00:22:03,779
actually around here more great and for

00:22:02,940 --> 00:22:07,679
him oh great

00:22:03,779 --> 00:22:09,299
we say which release one upgrade which

00:22:07,679 --> 00:22:11,249
come jobs we want to use for the upgrade

00:22:09,299 --> 00:22:13,590
and obviously we have to provide the

00:22:11,249 --> 00:22:15,659
father to just modify it and as we said

00:22:13,590 --> 00:22:17,580
it requires some UAE and bits of

00:22:15,659 --> 00:22:19,350
certificates which I already exposed

00:22:17,580 --> 00:22:21,619
this environment variable as in so

00:22:19,350 --> 00:22:24,480
that's interesting

00:22:21,619 --> 00:22:26,489
and if you run him up great we should

00:22:24,480 --> 00:22:29,159
see on the right that in a bit another

00:22:26,489 --> 00:22:33,419
API group instance should appear after

00:22:29,159 --> 00:22:36,480
this one film is sometimes low

00:22:33,419 --> 00:22:39,659
especially on conference Wi-Fi so yeah

00:22:36,480 --> 00:22:42,419
it works and we can see that EPA Group

00:22:39,659 --> 00:22:44,190
one appeared four seconds ago and it's

00:22:42,419 --> 00:22:45,960
one out of two but it will become

00:22:44,190 --> 00:22:50,239
running in a bit we want to iterate so

00:22:45,960 --> 00:22:55,559
that was how to actually operate this CF

00:22:50,239 --> 00:22:59,100
deployment back to the slides so as you

00:22:55,559 --> 00:23:02,549
saw how has different a deployment

00:22:59,100 --> 00:23:05,220
mechanism as portion it's very easy to

00:23:02,549 --> 00:23:06,960
deploy but it's a little bit more

00:23:05,220 --> 00:23:08,549
complicated to get our Tafari because

00:23:06,960 --> 00:23:10,919
you need to build image and replaced in

00:23:08,549 --> 00:23:12,840
helm chart in portion notes like watch

00:23:10,919 --> 00:23:16,460
craters and both deploy but you'll have

00:23:12,840 --> 00:23:20,940
to wait for deployment for some time and

00:23:16,460 --> 00:23:22,980
helm doesn't keep the state it's just no

00:23:20,940 --> 00:23:25,889
last successful state but it's can know

00:23:22,980 --> 00:23:27,869
in which stage here right now so it

00:23:25,889 --> 00:23:30,869
always supply Steve and if something

00:23:27,869 --> 00:23:33,299
goes wrong he just crushes like you know

00:23:30,869 --> 00:23:35,639
that wash task is run on director and if

00:23:33,299 --> 00:23:38,669
it's crash - just to deploy and wash

00:23:35,639 --> 00:23:42,960
we'll fix it for you but let's say no

00:23:38,669 --> 00:23:47,730
find out what happens when it crashes so

00:23:42,960 --> 00:23:52,769
we'll do one more demo Thank You Georgie

00:23:47,730 --> 00:23:54,659
and Georgie got working cluster I am

00:23:52,769 --> 00:23:57,840
unfortunately didn't have that luck I

00:23:54,659 --> 00:24:00,299
have broken cluster and I will use cube

00:23:57,840 --> 00:24:02,879
cattle command which you will have to

00:24:00,299 --> 00:24:05,340
learn if you use kubernetes your cattle

00:24:02,879 --> 00:24:08,000
get both its I'll get all pods running

00:24:05,340 --> 00:24:13,340
and safe namespace

00:24:08,000 --> 00:24:15,950
and its height posit I know Donna hides

00:24:13,340 --> 00:24:19,280
like says blobstore 0 of 2 is pending so

00:24:15,950 --> 00:24:20,950
this spine and white spending you want

00:24:19,280 --> 00:24:22,610
to find out something went wrong and

00:24:20,950 --> 00:24:28,100
let's find out

00:24:22,610 --> 00:24:31,280
so the next come on keep cartel and

00:24:28,100 --> 00:24:34,490
describe port blobstore zeros white

00:24:31,280 --> 00:24:37,160
spending I want to see information and

00:24:34,490 --> 00:24:40,730
when I do describe it will show me once

00:24:37,160 --> 00:24:43,040
and say whites felt just fell schedule

00:24:40,730 --> 00:24:47,870
in the system volume claim not found

00:24:43,040 --> 00:24:49,820
that shouldn't happen you coverage

00:24:47,870 --> 00:24:52,460
should create the sitting volumes and

00:24:49,820 --> 00:24:56,270
only then schedule ports but I broke it

00:24:52,460 --> 00:24:58,640
before presentation so I know what to do

00:24:56,270 --> 00:25:01,040
and typical response if something is

00:24:58,640 --> 00:25:02,840
broken like this its sound probably

00:25:01,040 --> 00:25:05,750
scheduling and you need to force the

00:25:02,840 --> 00:25:07,010
schedule and they just won't exist I

00:25:05,750 --> 00:25:10,400
think the only way to do it is just

00:25:07,010 --> 00:25:13,640
delete support so delete pod blobstore

00:25:10,400 --> 00:25:16,220
he's deleted and if I get paused again I

00:25:13,640 --> 00:25:19,630
see it it's running one of two is

00:25:16,220 --> 00:25:21,980
running so that means at one part of the

00:25:19,630 --> 00:25:25,400
port is running one container is running

00:25:21,980 --> 00:25:26,810
and second is not ready yet and I see

00:25:25,400 --> 00:25:30,560
the same for ipi group

00:25:26,810 --> 00:25:34,010
one of two is running so let's see what

00:25:30,560 --> 00:25:37,640
happens with API code describe port API

00:25:34,010 --> 00:25:40,310
group I'll just describe and I said it's

00:25:37,640 --> 00:25:42,680
unhealthy it means it's not ready and it

00:25:40,310 --> 00:25:45,620
says the readiness profiled waiting for

00:25:42,680 --> 00:25:48,310
money to be ready and I want to find out

00:25:45,620 --> 00:25:50,230
which container is not ready because

00:25:48,310 --> 00:25:52,940
that two containers

00:25:50,230 --> 00:25:56,750
that's why sure one of two and if I

00:25:52,940 --> 00:25:59,720
scroll little bit down and I see

00:25:56,750 --> 00:26:02,600
containers API group and it says ready

00:25:59,720 --> 00:26:06,580
force here so that's not ready

00:26:02,600 --> 00:26:09,110
that's what's broken and typically a

00:26:06,580 --> 00:26:14,300
regular kubernetes deployments I would

00:26:09,110 --> 00:26:17,840
go to logs but here it won't work

00:26:14,300 --> 00:26:21,020
because current version of corks uses

00:26:17,840 --> 00:26:22,460
both lifecycle and Jesus money and

00:26:21,020 --> 00:26:25,700
the last thing that I see it's Monnett

00:26:22,460 --> 00:26:28,010
started so that means that it went

00:26:25,700 --> 00:26:30,080
astray template in face it Sam's in

00:26:28,010 --> 00:26:32,900
problem gizmo need and to find out

00:26:30,080 --> 00:26:35,630
what's the problem I have to connect to

00:26:32,900 --> 00:26:39,220
the portal so what I will do I will

00:26:35,630 --> 00:26:42,680
exact to that port with that command and

00:26:39,220 --> 00:26:47,030
I will just set money summary now so I

00:26:42,680 --> 00:26:51,380
can do bot SSH and I see that pasta does

00:26:47,030 --> 00:26:54,950
not exist and why does it maybe logs

00:26:51,380 --> 00:26:59,240
will tell me something so I will go to

00:26:54,950 --> 00:27:03,020
Warwick up see a log date his log posted

00:26:59,240 --> 00:27:06,040
this is currently bore structure this

00:27:03,020 --> 00:27:09,110
won't be after new version of quarks but

00:27:06,040 --> 00:27:11,870
these are this right now so if I see it

00:27:09,110 --> 00:27:14,540
it says like some stock trace some

00:27:11,870 --> 00:27:16,640
terrible stories and I know the starter

00:27:14,540 --> 00:27:19,730
is because it's back in copy when you

00:27:16,640 --> 00:27:21,680
have staggered loot parks and stack full

00:27:19,730 --> 00:27:25,160
probably strike fulfilled parks it

00:27:21,680 --> 00:27:28,250
crushes so unfortunately I'll have to

00:27:25,160 --> 00:27:32,660
fix it the hard way I'll just delete

00:27:28,250 --> 00:27:33,170
build parts with the stack and to be in

00:27:32,660 --> 00:27:38,480
conf

00:27:33,170 --> 00:27:41,060
config console console and I just delete

00:27:38,480 --> 00:27:43,490
the spills back with the stack and it

00:27:41,060 --> 00:27:46,160
will proceed copies know about this

00:27:43,490 --> 00:27:48,620
issue I hope they go fix it I might be

00:27:46,160 --> 00:27:50,780
appointed as not fixable so if I check

00:27:48,620 --> 00:27:52,910
it I can see that there's definitely one

00:27:50,780 --> 00:27:56,420
go back with the start if I do the lead

00:27:52,910 --> 00:28:00,320
it will delete it I just takes it more

00:27:56,420 --> 00:28:05,090
needs summary okay I need to when you

00:28:00,320 --> 00:28:08,090
start probably poor start okay if the

00:28:05,090 --> 00:28:15,650
money summary it's Ryan accessible so if

00:28:08,090 --> 00:28:17,600
I just exit and do get pots so I see

00:28:15,650 --> 00:28:19,340
that API group is talked to it's running

00:28:17,600 --> 00:28:19,670
so everything is running everything is

00:28:19,340 --> 00:28:23,960
ready

00:28:19,670 --> 00:28:26,840
cluster is healthy and also basic

00:28:23,960 --> 00:28:29,630
minimal things that I would like to to

00:28:26,840 --> 00:28:32,420
learn some debugging summary keep cattle

00:28:29,630 --> 00:28:34,150
get pots to get all supports and other

00:28:32,420 --> 00:28:36,160
resources such as

00:28:34,150 --> 00:28:39,400
I'll get PVC to get volumes and mighty

00:28:36,160 --> 00:28:41,350
services then describe port and you can

00:28:39,400 --> 00:28:44,650
describe any object and describe port

00:28:41,350 --> 00:28:48,750
and see what's happening then logs to

00:28:44,650 --> 00:28:51,610
get logs and exec to connect to it and

00:28:48,750 --> 00:28:58,090
some issues that we found while we

00:28:51,610 --> 00:29:00,580
operated corks in last almost a year of

00:28:58,090 --> 00:29:02,730
your storage classes kubernetes allows

00:29:00,580 --> 00:29:05,830
to specify default storage class and

00:29:02,730 --> 00:29:07,960
sometimes it's an offense based and if

00:29:05,830 --> 00:29:11,170
you don't pass storage class it will use

00:29:07,960 --> 00:29:13,480
default storage class and its Godfather

00:29:11,170 --> 00:29:16,450
needs my sequel my sequel doesn't work

00:29:13,480 --> 00:29:18,760
with an offense so it might start and

00:29:16,450 --> 00:29:21,480
then start crashing might be very slow

00:29:18,760 --> 00:29:24,930
take a look that you don't use any first

00:29:21,480 --> 00:29:27,820
storage class second in a short rotation

00:29:24,930 --> 00:29:31,480
check the course documentations has some

00:29:27,820 --> 00:29:34,350
flags but important a backup your

00:29:31,480 --> 00:29:37,780
kubernetes secret after each deployment

00:29:34,350 --> 00:29:41,200
there is no backup for you so do it

00:29:37,780 --> 00:29:43,360
because we had couple cases where a

00:29:41,200 --> 00:29:45,670
secret cut regenerated maybe we done

00:29:43,360 --> 00:29:47,470
something wrong and the Harrod get back

00:29:45,670 --> 00:29:52,360
up so we had to read whole cluster and

00:29:47,470 --> 00:29:55,350
deployed from scratch so do backups then

00:29:52,360 --> 00:29:58,030
stack let's build packs as I showed

00:29:55,350 --> 00:29:59,920
quarks use of cycles build parks if you

00:29:58,030 --> 00:30:02,140
try to upgrade build back your data

00:29:59,920 --> 00:30:05,310
twist stack full I know how it's called

00:30:02,140 --> 00:30:09,100
and it will crush during the upgrade

00:30:05,310 --> 00:30:12,900
rotifers irena uses only Lin CF Linux FS

00:30:09,100 --> 00:30:16,930
3 rotifers they say you are to use

00:30:12,900 --> 00:30:20,190
different rotifers but anyway Irene will

00:30:16,930 --> 00:30:24,640
only use single root of us for some time

00:30:20,190 --> 00:30:26,680
and then this command that we had to

00:30:24,640 --> 00:30:29,530
learn that it's average is force it

00:30:26,680 --> 00:30:33,220
deletes all resources and creates them

00:30:29,530 --> 00:30:36,700
again it might cause up downtime super

00:30:33,220 --> 00:30:39,850
and safe but might help you Kade of

00:30:36,700 --> 00:30:42,660
troubles alright and the last thing we'd

00:30:39,850 --> 00:30:45,920
like to mention today is adding X and

00:30:42,660 --> 00:30:48,380
thanks to the good people to say this is

00:30:45,920 --> 00:30:50,510
new extensions library for editing it

00:30:48,380 --> 00:30:52,640
allows you to create specifically

00:30:50,510 --> 00:30:54,170
extensions for aleni using directed

00:30:52,640 --> 00:30:56,660
equivalents API without actually

00:30:54,170 --> 00:30:58,700
touching any of the Unicode and there

00:30:56,660 --> 00:31:00,860
are multiple extensions developed

00:30:58,700 --> 00:31:03,830
already for that again by the SUSE

00:31:00,860 --> 00:31:06,080
people and if you want to find out more

00:31:03,830 --> 00:31:08,360
about it you're in luck because exactly

00:31:06,080 --> 00:31:10,700
after our session they have a lot natori

00:31:08,360 --> 00:31:12,320
have a session about this so if you're

00:31:10,700 --> 00:31:15,770
interested in that you should go watch

00:31:12,320 --> 00:31:17,720
them another thing to mention is we have

00:31:15,770 --> 00:31:20,210
office hours I didn't have office hours

00:31:17,720 --> 00:31:23,210
they happen on first Monday of every

00:31:20,210 --> 00:31:25,220
month these times so if you have any

00:31:23,210 --> 00:31:27,200
questions problems or you just want to

00:31:25,220 --> 00:31:28,910
chat with us you're welcome to join you

00:31:27,200 --> 00:31:30,620
can find more information about it in

00:31:28,910 --> 00:31:32,660
the slack Channel they're in their stock

00:31:30,620 --> 00:31:35,810
Channel and we also post the link to the

00:31:32,660 --> 00:31:38,960
meeting there some useful links if you

00:31:35,810 --> 00:31:41,450
download the slides later for kubernetes

00:31:38,960 --> 00:31:45,020
there a lot of more resources out there

00:31:41,450 --> 00:31:48,050
but these are the ones you can use to

00:31:45,020 --> 00:31:48,680
start and that was it from us thank you

00:31:48,050 --> 00:31:51,080
very much

00:31:48,680 --> 00:31:54,790
and mushrik have time for questions but

00:31:51,080 --> 00:31:54,790

YouTube URL: https://www.youtube.com/watch?v=oZf6wRVOCmc


