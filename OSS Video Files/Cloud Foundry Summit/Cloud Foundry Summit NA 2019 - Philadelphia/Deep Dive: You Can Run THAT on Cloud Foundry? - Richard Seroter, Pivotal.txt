Title: Deep Dive: You Can Run THAT on Cloud Foundry? - Richard Seroter, Pivotal
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	Deep Dive: You Can Run THAT on Cloud Foundry? - Richard Seroter, Pivotal

Do you think Cloud Foundry is just for cloud-native apps? It's an honest mistake to make. Cloud Foundry actually runs all sorts of workloads, many of which might surprise you. In this talk, join Richard as he walks through a handful of different types of applications—batch jobs, streaming pipelines, .NET apps, TCP routable apps, and more—and deploys each to Cloud Foundry. At the end of the talk, you'll walk away with a checklist of workloads that are suitable for a Cloud Foundry environment.

About Richard Seroter
Richard Seroter is the VP of Product Marketing at Pivotal, with a master’s degree in Engineering from the University of Colorado. He’s also an 11-time Microsoft MVP for cloud, Pluralsight trainer, lead InfoQ.com editor for cloud computing, frequent public speaker, and author of multiple books on application integration strategies. Richard maintains a regularly updated blog on topics of architecture and solution design and can be found on Twitter as @rseroter.

https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:04,770
okay we'll go ahead and get started I

00:00:01,890 --> 00:00:06,779
think we're on time the next hour 15

00:00:04,770 --> 00:00:08,849
minutes of your life will be a hopefully

00:00:06,779 --> 00:00:10,260
full of excitement some laughter some

00:00:08,849 --> 00:00:11,519
tears we have some fun today going

00:00:10,260 --> 00:00:13,110
through I think I've got seven demos

00:00:11,519 --> 00:00:15,780
queued up if half of them work this is

00:00:13,110 --> 00:00:17,310
gonna be a great session so we make a

00:00:15,780 --> 00:00:18,750
lot of this hands-on kind of showing how

00:00:17,310 --> 00:00:19,980
things work maybe you inspire to do it

00:00:18,750 --> 00:00:21,420
yourself not during the session you're

00:00:19,980 --> 00:00:22,859
gonna be paying attention but right

00:00:21,420 --> 00:00:25,170
after this you will probably be doing

00:00:22,859 --> 00:00:26,670
all of these things which is awesome so

00:00:25,170 --> 00:00:28,439
I'm Richard I work at pivotal I do

00:00:26,670 --> 00:00:31,140
marketing stuff now I also like to build

00:00:28,439 --> 00:00:32,880
stuff to maintain illusion of relevance

00:00:31,140 --> 00:00:34,520
so a lot of this is stuff that I've been

00:00:32,880 --> 00:00:36,540
building and messing around with and

00:00:34,520 --> 00:00:38,040
hopefully that's value because you know

00:00:36,540 --> 00:00:39,660
as we're all sitting here at this show

00:00:38,040 --> 00:00:41,399
and all these shows there's just this

00:00:39,660 --> 00:00:43,020
question of like hey all of your stuff

00:00:41,399 --> 00:00:44,789
will never run in one place

00:00:43,020 --> 00:00:46,710
realistically right I've got all kinds

00:00:44,789 --> 00:00:49,469
of packaged software and commercial

00:00:46,710 --> 00:00:52,079
software and open source and Linux and

00:00:49,469 --> 00:00:54,030
Windows and batch and real-time stuff

00:00:52,079 --> 00:00:55,800
and all these sort of things so how do I

00:00:54,030 --> 00:00:57,329
start to consolidate some of it how do I

00:00:55,800 --> 00:00:59,190
get a sense where it's not nineteen

00:00:57,329 --> 00:01:00,629
bespoke platforms where this stuff is

00:00:59,190 --> 00:01:02,609
for this workload this is for this

00:01:00,629 --> 00:01:04,260
workload how do I start to pull it

00:01:02,609 --> 00:01:06,119
together so really the point of this

00:01:04,260 --> 00:01:07,619
talk is gonna be looking at maybe 7-ish

00:01:06,119 --> 00:01:09,600
workloads that you're not used to

00:01:07,619 --> 00:01:12,150
looking at in a cloud foundry well maybe

00:01:09,600 --> 00:01:14,040
six and then how they work will actually

00:01:12,150 --> 00:01:15,390
build it see if it works and then you

00:01:14,040 --> 00:01:18,150
can all maybe low test it if you feel

00:01:15,390 --> 00:01:20,759
like messing around with it so before we

00:01:18,150 --> 00:01:22,080
reset this is the 101 track or whatever

00:01:20,759 --> 00:01:23,369
it is if you're introducing the cloud

00:01:22,080 --> 00:01:25,890
foundry so I'll take just two minutes

00:01:23,369 --> 00:01:26,759
and describe a little bit about what PCF

00:01:25,890 --> 00:01:28,650
is all about and even if you're a

00:01:26,759 --> 00:01:30,720
veteran I would say this stuff matters

00:01:28,650 --> 00:01:33,000
because there's plenty of it's easy to

00:01:30,720 --> 00:01:35,340
be confused about well is cloud foundry

00:01:33,000 --> 00:01:36,900
and kubernetes do they clash does this

00:01:35,340 --> 00:01:38,729
compare to this how does this compare to

00:01:36,900 --> 00:01:40,770
that so what are we talking about like

00:01:38,729 --> 00:01:42,840
what is this thing that it does how does

00:01:40,770 --> 00:01:44,820
of that value so the things you should

00:01:42,840 --> 00:01:46,409
know if you forget anything else besides

00:01:44,820 --> 00:01:50,280
it I'm really good presenter let's focus

00:01:46,409 --> 00:01:52,079
on these things so by default cloud

00:01:50,280 --> 00:01:53,820
foundry built for multi-tenancy right so

00:01:52,079 --> 00:01:56,219
you've got orgs and spaces it's easy to

00:01:53,820 --> 00:01:57,960
segment users make it really simple to

00:01:56,219 --> 00:01:59,659
say hey this group can consume this many

00:01:57,960 --> 00:02:01,979
this has different roles and permissions

00:01:59,659 --> 00:02:03,659
even isolation segments which are a

00:02:01,979 --> 00:02:05,549
little underrated work naturally in

00:02:03,659 --> 00:02:08,489
every cloud foundry which is here's a

00:02:05,549 --> 00:02:09,929
compute pool that is only for these apps

00:02:08,489 --> 00:02:11,970
and it's still all managed in the same

00:02:09,929 --> 00:02:13,800
place but I could say hey this has GPUs

00:02:11,970 --> 00:02:15,150
or this is for PCI workload

00:02:13,800 --> 00:02:18,120
this is using really high-performance

00:02:15,150 --> 00:02:19,890
discs whatever your reason could be you

00:02:18,120 --> 00:02:21,390
can easily carve off actually pools of

00:02:19,890 --> 00:02:22,890
compute really easily within Cloud

00:02:21,390 --> 00:02:25,260
Foundry it's a natural thing

00:02:22,890 --> 00:02:27,390
so really purposely built for tenancy

00:02:25,260 --> 00:02:30,150
and large orgs and lots of teams which

00:02:27,390 --> 00:02:31,770
is nice you know the other thing I will

00:02:30,150 --> 00:02:33,360
show some of this is that you can kind

00:02:31,770 --> 00:02:36,000
of push whatever you want you can push

00:02:33,360 --> 00:02:37,410
code raw source code CF push you can

00:02:36,000 --> 00:02:39,120
actually push container images which

00:02:37,410 --> 00:02:40,260
will mess around with today so you have

00:02:39,120 --> 00:02:43,350
a lot of different ways to get source

00:02:40,260 --> 00:02:44,550
code into production the other one again

00:02:43,350 --> 00:02:46,380
will demonstrate a little bit today is

00:02:44,550 --> 00:02:48,030
you may think of most platforms hey

00:02:46,380 --> 00:02:49,920
Heroku you think of these kind of Google

00:02:48,030 --> 00:02:52,740
App Engine these traditional passes as

00:02:49,920 --> 00:02:54,780
it's for web stuff that's true it's for

00:02:52,740 --> 00:02:56,280
a lot of web stuff but with PCF and

00:02:54,780 --> 00:02:58,320
Cloud Foundry as a whole you can do TCP

00:02:56,280 --> 00:03:00,800
routing as well so we'll talk about that

00:02:58,320 --> 00:03:03,030
and it's not just web traffic for this

00:03:00,800 --> 00:03:06,180
the other one I think we don't probably

00:03:03,030 --> 00:03:07,440
use enough is you can do intercept Abul

00:03:06,180 --> 00:03:09,690
routes in the platform meaning I can

00:03:07,440 --> 00:03:11,820
have here's my app and let me go ahead

00:03:09,690 --> 00:03:13,950
and add intercept traffic to that and

00:03:11,820 --> 00:03:15,360
add an API gateway let me add some

00:03:13,950 --> 00:03:17,130
caching let me add whatever I don't have

00:03:15,360 --> 00:03:18,930
to change my app so it's really easy

00:03:17,130 --> 00:03:20,760
there's extensibility points that say I

00:03:18,930 --> 00:03:22,410
want to intercept traffic and call out

00:03:20,760 --> 00:03:23,790
to something else you can do that

00:03:22,410 --> 00:03:27,870
without touching any of the code of the

00:03:23,790 --> 00:03:29,700
app itself which is neat if you like

00:03:27,870 --> 00:03:31,770
doing yeah Mille you have a tiny bit of

00:03:29,700 --> 00:03:33,510
yeah Mille you write in PCF all endorse

00:03:31,770 --> 00:03:35,880
you on LinkedIn afterwards if you'd like

00:03:33,510 --> 00:03:37,560
for yeah Mille but this is the only

00:03:35,880 --> 00:03:38,940
thing that makes an app a Cloud Foundry

00:03:37,560 --> 00:03:41,010
app there's no such thing as a Cloud

00:03:38,940 --> 00:03:43,230
Foundry app right it's a dotnet app a

00:03:41,010 --> 00:03:45,480
Java app a spring app an ode app just an

00:03:43,230 --> 00:03:48,390
app the only thing that is even remotely

00:03:45,480 --> 00:03:50,100
CF like is hey you can do this and is

00:03:48,390 --> 00:03:51,990
even optional saying hey what's the name

00:03:50,100 --> 00:03:53,790
of this thing how many instances are

00:03:51,990 --> 00:03:55,350
there how much memory should I use so

00:03:53,790 --> 00:03:56,580
there's a there's a tiny bit of Yamma

00:03:55,350 --> 00:04:00,209
which is the right amount of yeah Mille

00:03:56,580 --> 00:04:01,709
for everyone automatically injects and

00:04:00,209 --> 00:04:03,390
reads environment variables again super

00:04:01,709 --> 00:04:04,830
handy sometimes as you're pushing to a

00:04:03,390 --> 00:04:06,209
platform how do I take stuff out of

00:04:04,830 --> 00:04:08,370
source code and store it in the

00:04:06,209 --> 00:04:09,989
environment so PCF handles all that

00:04:08,370 --> 00:04:12,690
stuff and Cloud Foundry handles that for

00:04:09,989 --> 00:04:13,680
you one of those things again we take

00:04:12,690 --> 00:04:15,660
for granted but being able to

00:04:13,680 --> 00:04:17,280
automatically aggregate all the logs

00:04:15,660 --> 00:04:18,870
that each one of your container spins

00:04:17,280 --> 00:04:21,390
out right every app you have that

00:04:18,870 --> 00:04:23,430
console right lines or debug whatever

00:04:21,390 --> 00:04:24,930
all of those things get sucked into one

00:04:23,430 --> 00:04:26,550
place so you're not going to each

00:04:24,930 --> 00:04:27,570
environment looking let me read logs

00:04:26,550 --> 00:04:29,430
here let me read law

00:04:27,570 --> 00:04:31,050
here that's all pulled to one place and

00:04:29,430 --> 00:04:32,790
it's correlated with things like

00:04:31,050 --> 00:04:34,560
Container metrics you can see gosh

00:04:32,790 --> 00:04:36,630
there's a spike in latency what's what's

00:04:34,560 --> 00:04:37,860
screwy here oh the logs indicate we're

00:04:36,630 --> 00:04:39,720
having a bunch of database timeouts

00:04:37,860 --> 00:04:41,640
that's cool because the point is be able

00:04:39,720 --> 00:04:43,560
to pinpoint problems faster so the

00:04:41,640 --> 00:04:46,290
platform naturally pulls all that

00:04:43,560 --> 00:04:47,960
information together that's nice also

00:04:46,290 --> 00:04:50,040
monitors application health hey if

00:04:47,960 --> 00:04:51,870
application crashes which I will do on

00:04:50,040 --> 00:04:54,330
purpose it often happens anyway for me

00:04:51,870 --> 00:04:56,370
just because I'm not great at this is

00:04:54,330 --> 00:04:57,750
that it'll automatically recover the

00:04:56,370 --> 00:04:59,490
instance in every programming language

00:04:57,750 --> 00:05:02,670
so it doesn't matter I'll show you that

00:04:59,490 --> 00:05:04,920
in a little bit again all those scale or

00:05:02,670 --> 00:05:05,610
manual scale scale up or out write more

00:05:04,920 --> 00:05:08,550
capacity

00:05:05,610 --> 00:05:10,290
I want bigger more RAM more disk or give

00:05:08,550 --> 00:05:13,140
me more instances so it's nice to have

00:05:10,290 --> 00:05:14,910
be able to flip both of those on the

00:05:13,140 --> 00:05:16,980
whole marketplace I want to stitch in

00:05:14,910 --> 00:05:19,980
different services data bases caches

00:05:16,980 --> 00:05:22,410
message buses log logging tools want to

00:05:19,980 --> 00:05:23,580
dump it all the Splunk terrific all of

00:05:22,410 --> 00:05:26,460
these things are external things that

00:05:23,580 --> 00:05:27,720
are really easy to plug in one of the

00:05:26,460 --> 00:05:29,700
most important things where you kind of

00:05:27,720 --> 00:05:31,650
differ from even just a straight kind of

00:05:29,700 --> 00:05:33,960
container Orchestrator is it PCF and

00:05:31,650 --> 00:05:36,780
Cloud Foundry as a whole manages VMs and

00:05:33,960 --> 00:05:38,730
kind of the apps Bryan's mean the first

00:05:36,780 --> 00:05:40,290
installation step for something like k-8

00:05:38,730 --> 00:05:42,660
which is awesome is like find a great

00:05:40,290 --> 00:05:43,890
cluster alright the heck do I get the

00:05:42,660 --> 00:05:45,270
cluster from so there's still that

00:05:43,890 --> 00:05:46,950
inception problem of actually

00:05:45,270 --> 00:05:48,540
instantiating environments that's what

00:05:46,950 --> 00:05:50,670
Cloud Foundry does with Bosh right it

00:05:48,540 --> 00:05:52,530
builds the VMS it runs them it manages

00:05:50,670 --> 00:05:57,240
them and then it also runs all the apps

00:05:52,530 --> 00:05:58,440
and stuff on top runs everywhere right

00:05:57,240 --> 00:06:00,000
it doesn't matter if you're on Prem off

00:05:58,440 --> 00:06:01,920
Prem that's part of the value prop of

00:06:00,000 --> 00:06:03,600
these sorts of things all these

00:06:01,920 --> 00:06:06,390
different layers of har kind of built

00:06:03,600 --> 00:06:07,680
into the platform so whether a container

00:06:06,390 --> 00:06:09,840
crashes alright let's go ahead and

00:06:07,680 --> 00:06:11,640
recover that a service on the VM may

00:06:09,840 --> 00:06:13,560
crash we gets a log collector whatever

00:06:11,640 --> 00:06:15,540
that automatically gets recovered a VM

00:06:13,560 --> 00:06:17,760
disappears or collapses fine Bosh

00:06:15,540 --> 00:06:19,620
recreates it an entire availability zone

00:06:17,760 --> 00:06:21,360
goes down not a big deal I'll go ahead

00:06:19,620 --> 00:06:22,560
and use this one instead so all that

00:06:21,360 --> 00:06:23,940
stuff just built it you don't have to

00:06:22,560 --> 00:06:25,500
wire it up you'll have to build anything

00:06:23,940 --> 00:06:28,620
in your apps those sort of things are

00:06:25,500 --> 00:06:30,000
built into the platform and then finally

00:06:28,620 --> 00:06:32,370
for using PCF you just have a few

00:06:30,000 --> 00:06:33,810
different interfaces I can use the API

00:06:32,370 --> 00:06:36,780
because you want to prove your geek cred

00:06:33,810 --> 00:06:37,350
that's fine maybe a GUI if you like the

00:06:36,780 --> 00:06:39,870
point-and-click

00:06:37,350 --> 00:06:41,460
and the command line interface of course

00:06:39,870 --> 00:06:42,960
as well to impress your friends you have

00:06:41,460 --> 00:06:46,920
two different ways to use this sort of

00:06:42,960 --> 00:06:48,600
stuff which is great you know in the PCF

00:06:46,920 --> 00:06:50,730
as a whole is the reminder runs on every

00:06:48,600 --> 00:06:52,290
cloud that cloud provider interfaces the

00:06:50,730 --> 00:06:54,180
secret if you implement like fifteen

00:06:52,290 --> 00:06:56,370
api's Cloud Foundry can talk to your

00:06:54,180 --> 00:06:57,840
cloud and Bosch does all this magic

00:06:56,370 --> 00:07:00,390
stuff like embedding the operating

00:06:57,840 --> 00:07:02,310
system Windows or Linux and then sure

00:07:00,390 --> 00:07:04,560
pivotal network think of this as the the

00:07:02,310 --> 00:07:05,970
CI source for my platform I'm just gonna

00:07:04,560 --> 00:07:08,070
keep pulling that stuff through critical

00:07:05,970 --> 00:07:09,470
vulnerability is not a big deal I'm just

00:07:08,070 --> 00:07:12,390
gonna suck that thing through a pipeline

00:07:09,470 --> 00:07:13,650
and of course pivotal application

00:07:12,390 --> 00:07:15,240
service which we're gonna focus on today

00:07:13,650 --> 00:07:17,760
this is the contradiction allowed

00:07:15,240 --> 00:07:19,170
foundry the thing that runs apps we also

00:07:17,760 --> 00:07:20,610
do people with a container service which

00:07:19,170 --> 00:07:24,870
runs on the same foundation if you want

00:07:20,610 --> 00:07:26,340
manage kubernetes the alpha of pivotal

00:07:24,870 --> 00:07:27,390
functions service is available we have

00:07:26,340 --> 00:07:29,340
people in the room who've been messing

00:07:27,390 --> 00:07:31,350
around with that and of course that

00:07:29,340 --> 00:07:32,340
marketplace so I mean in essence I

00:07:31,350 --> 00:07:34,410
usually talk about this as a

00:07:32,340 --> 00:07:36,420
continuously updated platform for your

00:07:34,410 --> 00:07:37,650
continuously updated apps right that's

00:07:36,420 --> 00:07:39,000
the point here and if all I'm doing is

00:07:37,650 --> 00:07:40,740
updating my apps all the time and my

00:07:39,000 --> 00:07:42,930
platform itself is kind of atrophying

00:07:40,740 --> 00:07:44,790
I'm not updating it very often I'm kind

00:07:42,930 --> 00:07:46,380
of missing out on what the value of this

00:07:44,790 --> 00:07:48,630
sort of thing is I need to keep updating

00:07:46,380 --> 00:07:50,370
both things all the time right that's

00:07:48,630 --> 00:07:52,680
where the value is for security purposes

00:07:50,370 --> 00:07:53,910
functionality purposes all of that so

00:07:52,680 --> 00:07:56,550
that's we're gonna deal with today and

00:07:53,910 --> 00:07:58,530
now we get to go go build stuff all

00:07:56,550 --> 00:07:59,610
right so what is a standard app if you

00:07:58,530 --> 00:08:01,050
were just going to a complete set of

00:07:59,610 --> 00:08:03,000
strangers and for some reason talking

00:08:01,050 --> 00:08:05,010
about apps you might say this is a

00:08:03,000 --> 00:08:07,290
standard app if I'm doing PCF and this

00:08:05,010 --> 00:08:09,030
would be kind of a cloud native app so

00:08:07,290 --> 00:08:10,470
that we mean by cloud native right what

00:08:09,030 --> 00:08:12,480
is a cloud native app mean then we'll go

00:08:10,470 --> 00:08:15,720
ahead and deploy one and live the dream

00:08:12,480 --> 00:08:17,670
so first off typically this is custom

00:08:15,720 --> 00:08:18,960
built if you're telling me SharePoint as

00:08:17,670 --> 00:08:20,070
a cloud native app I will make fun of

00:08:18,960 --> 00:08:21,600
you and ask you to leave it's not a

00:08:20,070 --> 00:08:23,130
cloud native app it's just commercial

00:08:21,600 --> 00:08:23,550
software that's big monolithic that's

00:08:23,130 --> 00:08:25,320
fine

00:08:23,550 --> 00:08:26,490
traditionally it's custom built stuff

00:08:25,320 --> 00:08:28,830
that you're building in a cloud native

00:08:26,490 --> 00:08:31,050
way following things like 12 factor app

00:08:28,830 --> 00:08:32,730
patterns right getting state out and

00:08:31,050 --> 00:08:34,220
having a horizontally scalable quick

00:08:32,730 --> 00:08:37,200
startup quick shutdown

00:08:34,220 --> 00:08:38,610
often it's microservices right not

00:08:37,200 --> 00:08:40,380
always doesn't have to be you can make a

00:08:38,610 --> 00:08:43,470
modular monolith it's not a big deal but

00:08:40,380 --> 00:08:45,030
often it's distributed these

00:08:43,470 --> 00:08:46,950
dependencies get declared and I don't

00:08:45,030 --> 00:08:48,480
assume that that box has all my services

00:08:46,950 --> 00:08:51,630
running these things often come with the

00:08:48,480 --> 00:08:53,610
app you're typically aiming for

00:08:51,630 --> 00:08:55,230
horizontal scale in these environments

00:08:53,610 --> 00:08:56,160
you know of course you can scale up

00:08:55,230 --> 00:08:57,690
but when you're doing cloud native

00:08:56,160 --> 00:09:01,410
you're taking advantage of the fact that

00:08:57,690 --> 00:09:03,360
compute is generally infinite you attach

00:09:01,410 --> 00:09:06,060
these things to back services databases

00:09:03,360 --> 00:09:07,560
caches queues all of your store just

00:09:06,060 --> 00:09:09,390
typically off box sometimes you have

00:09:07,560 --> 00:09:11,340
some scratch space in your container

00:09:09,390 --> 00:09:12,870
image and you can it's fine but it's

00:09:11,340 --> 00:09:16,800
ephemeral you know you can lose it

00:09:12,870 --> 00:09:18,990
technically of course these apps are

00:09:16,800 --> 00:09:20,730
kind of willing to handle faults they

00:09:18,990 --> 00:09:22,590
assume things fail all the time right

00:09:20,730 --> 00:09:24,270
that's a modern software we just accept

00:09:22,590 --> 00:09:27,000
the fact that things fail so how does my

00:09:24,270 --> 00:09:28,980
software handle it and it typically it's

00:09:27,000 --> 00:09:30,270
continuously delivered if you're doing

00:09:28,980 --> 00:09:32,040
these things or if you're building apps

00:09:30,270 --> 00:09:33,600
to be manageable building apps to fail

00:09:32,040 --> 00:09:35,340
building apps to scale you're doing

00:09:33,600 --> 00:09:36,720
cloud native software development so

00:09:35,340 --> 00:09:38,100
that's where these sort of platforms are

00:09:36,720 --> 00:09:40,590
have been made for this sort of thing

00:09:38,100 --> 00:09:43,860
especially Cloud Foundry so let's go

00:09:40,590 --> 00:09:45,780
ahead and mess with one and then with

00:09:43,860 --> 00:09:48,090
this as well we'll we'll try some other

00:09:45,780 --> 00:09:53,580
stuff all right so what am I gonna do

00:09:48,090 --> 00:09:55,020
here our first app is a dotnet core app

00:09:53,580 --> 00:09:56,610
and what I want to do is actually just

00:09:55,020 --> 00:09:57,960
deploy a regular app and then we're

00:09:56,610 --> 00:09:59,100
gonna kind of explore it a little bit

00:09:57,960 --> 00:10:01,950
and I'm also gonna do a no downtime

00:09:59,100 --> 00:10:03,180
update for fun so amusing steel-toe is a

00:10:01,950 --> 00:10:06,090
dependency this is the dotnet framework

00:10:03,180 --> 00:10:07,950
that pivitol created it's open source

00:10:06,090 --> 00:10:09,870
part of the.net foundation it's kind of

00:10:07,950 --> 00:10:13,020
how you add microservices logic to your

00:10:09,870 --> 00:10:14,400
dotnet framework or dotnet core apps so

00:10:13,020 --> 00:10:15,630
this I wanted to get some actuator end

00:10:14,400 --> 00:10:17,550
points get some health checks things

00:10:15,630 --> 00:10:21,000
like that there's a remarkably

00:10:17,550 --> 00:10:22,920
complicated service that simply returns

00:10:21,000 --> 00:10:24,570
a hard-coded set of cities when you ask

00:10:22,920 --> 00:10:25,950
it for information I know the source

00:10:24,570 --> 00:10:27,000
code will be available later if you'd

00:10:25,950 --> 00:10:30,690
like to use this in your own

00:10:27,000 --> 00:10:33,270
architecture so this character does not

00:10:30,690 --> 00:10:34,740
do a lot so what so get nothing in

00:10:33,270 --> 00:10:37,260
here's Cloud Foundry ask right I can go

00:10:34,740 --> 00:10:39,030
run this on the eks in Amazon I can run

00:10:37,260 --> 00:10:41,550
an azure app service nothing about this

00:10:39,030 --> 00:10:44,010
is Cloud Foundry there is that little

00:10:41,550 --> 00:10:45,720
tiny bitty amyl right that says what's

00:10:44,010 --> 00:10:47,550
the name of my thing how much memory how

00:10:45,720 --> 00:10:48,540
many instances I'm just defining an

00:10:47,550 --> 00:10:50,940
environment variable for the

00:10:48,540 --> 00:10:52,770
Philadelphia Airport plug for my local

00:10:50,940 --> 00:10:54,450
location and I'm attaching it to a

00:10:52,770 --> 00:10:55,950
service I'm saying when you start up

00:10:54,450 --> 00:10:57,810
attached to the service it exists called

00:10:55,950 --> 00:10:59,880
C rotor crunchy its a crunchy Postgres

00:10:57,810 --> 00:11:00,930
database instance right that's the only

00:10:59,880 --> 00:11:02,220
thing it just kind of gives me a little

00:11:00,930 --> 00:11:04,230
bit of insight and I can do all this

00:11:02,220 --> 00:11:05,670
from the command line to I'm just doing

00:11:04,230 --> 00:11:07,080
it in a declarative format that I could

00:11:05,670 --> 00:11:09,120
throw in source control I have a real

00:11:07,080 --> 00:11:09,540
change history so doing that all via the

00:11:09,120 --> 00:11:15,110
CL

00:11:09,540 --> 00:11:17,399
a little risky okay so let's run the

00:11:15,110 --> 00:11:22,880
what I would still contend is the best

00:11:17,399 --> 00:11:22,880
command in the cloud which is CF push

00:11:22,910 --> 00:11:27,329
what CF push does is that magical

00:11:25,949 --> 00:11:29,970
sequence of events it takes me from

00:11:27,329 --> 00:11:31,560
source code to a routable thing right

00:11:29,970 --> 00:11:33,449
that's it does all of the stitching it

00:11:31,560 --> 00:11:35,970
takes my app it pulls in any

00:11:33,449 --> 00:11:37,829
dependencies users build packs actually

00:11:35,970 --> 00:11:39,449
assemble the whole blob that needs to

00:11:37,829 --> 00:11:41,160
run then it goes ahead and gets that

00:11:39,449 --> 00:11:43,019
into Cloud Foundry then the stages it

00:11:41,160 --> 00:11:44,759
finds a place to store it hooks them all

00:11:43,019 --> 00:11:46,860
the network routing so load balances and

00:11:44,759 --> 00:11:49,350
taken care of DNS has taken care of

00:11:46,860 --> 00:11:51,449
logged rains are hooked up monitoring is

00:11:49,350 --> 00:11:53,880
turned on all those things happen when

00:11:51,449 --> 00:11:55,800
ICF push so instead of me deploying

00:11:53,880 --> 00:11:57,509
opening tickets doing all that sort of

00:11:55,800 --> 00:11:59,970
stuff the whole point is I always want

00:11:57,509 --> 00:12:04,170
to quickly have this thing assemble my

00:11:59,970 --> 00:12:06,680
my software and run it for me all right

00:12:04,170 --> 00:12:08,790
so that's gonna go deploy quickly here

00:12:06,680 --> 00:12:10,170
since this environment times out every

00:12:08,790 --> 00:12:13,910
nine seconds I'm gonna go ahead and log

00:12:10,170 --> 00:12:13,910
back in I think it's a security feature

00:12:14,720 --> 00:12:19,110
alright we'll see if I have my my app

00:12:17,100 --> 00:12:20,760
here it's starting up so again in

00:12:19,110 --> 00:12:22,050
pivotal Apps Manager this is something

00:12:20,760 --> 00:12:24,660
pivotal adds not part of Cloud Foundry

00:12:22,050 --> 00:12:26,279
proper you do have this idea of orgs and

00:12:24,660 --> 00:12:28,440
spaces so I have an org called

00:12:26,279 --> 00:12:30,779
you know pivot Larsa rotor I have a

00:12:28,440 --> 00:12:33,089
quota I have different permissions that

00:12:30,779 --> 00:12:35,310
I can have in my users then within that

00:12:33,089 --> 00:12:37,230
space of development and I could have a

00:12:35,310 --> 00:12:39,660
space for dev tests prod performance

00:12:37,230 --> 00:12:41,579
tests random QA guys like whatever I

00:12:39,660 --> 00:12:43,649
want to call it I can set all that up

00:12:41,579 --> 00:12:45,750
and that also has its own members that

00:12:43,649 --> 00:12:48,060
don't permissions has its own settings

00:12:45,750 --> 00:12:51,139
and security and quota so it's nice nice

00:12:48,060 --> 00:12:54,269
immediate sort of framing around tenancy

00:12:51,139 --> 00:12:57,839
all right so this app should be running

00:12:54,269 --> 00:12:59,939
let's see it is if I got four instances

00:12:57,839 --> 00:13:04,019
up and running that's delightful because

00:12:59,939 --> 00:13:05,459
I use that steel-toe dependency this

00:13:04,019 --> 00:13:07,380
app's manager actually reads the fact

00:13:05,459 --> 00:13:08,730
that this is a net app so it puts a

00:13:07,380 --> 00:13:10,259
little icon there now you could say are

00:13:08,730 --> 00:13:11,850
all you literally doing the icon that's

00:13:10,259 --> 00:13:14,430
and that's not a whole lot there no

00:13:11,850 --> 00:13:16,079
there is more so it does pull in health

00:13:14,430 --> 00:13:17,639
information specific to that you can

00:13:16,079 --> 00:13:20,519
write to this so that information can

00:13:17,639 --> 00:13:22,019
also be pulled in and we do some other

00:13:20,519 --> 00:13:23,440
things so let me go ahead and show that

00:13:22,019 --> 00:13:25,300
me quit pull it up

00:13:23,440 --> 00:13:27,160
now you can say oh my gosh your first

00:13:25,300 --> 00:13:28,470
demo of the day seriously that's not

00:13:27,160 --> 00:13:30,940
good

00:13:28,470 --> 00:13:33,009
okay come on the first one worked so we

00:13:30,940 --> 00:13:35,740
got we got our cities back that's a low

00:13:33,009 --> 00:13:37,629
bar but I have crossed it in front of

00:13:35,740 --> 00:13:38,829
you so I've made that request now what's

00:13:37,629 --> 00:13:40,480
nice is again because I'm using those

00:13:38,829 --> 00:13:42,879
Steel Toe libraries I can also pull in

00:13:40,480 --> 00:13:44,199
trace statements so this actually pulls

00:13:42,879 --> 00:13:46,899
in the last hundreds request to my

00:13:44,199 --> 00:13:49,300
service so this is me right just calling

00:13:46,899 --> 00:13:50,589
that I can see all the headers I can see

00:13:49,300 --> 00:13:52,240
all that stuff that's all just baked in

00:13:50,589 --> 00:13:53,709
right I had to do nothing to my app to

00:13:52,240 --> 00:13:55,870
make this work I just added the

00:13:53,709 --> 00:13:57,399
steel-toe dependency and I was good we

00:13:55,870 --> 00:14:00,910
can suck that information out when it

00:13:57,399 --> 00:14:02,800
runs in PCF and then of course I can do

00:14:00,910 --> 00:14:04,629
logs so this aggregates all the logs so

00:14:02,800 --> 00:14:06,699
from all four of those instances that's

00:14:04,629 --> 00:14:08,110
all coming through this one drain so

00:14:06,699 --> 00:14:09,430
again if I was hooking up Splunk or

00:14:08,110 --> 00:14:10,899
something else to this I can be sucking

00:14:09,430 --> 00:14:14,529
out logs from all of these from one

00:14:10,899 --> 00:14:16,050
firehose which is great and if you

00:14:14,529 --> 00:14:21,430
remember I said an environment variable

00:14:16,050 --> 00:14:23,139
so if I look at yep there's the hub

00:14:21,430 --> 00:14:25,269
there's Philadelphia right so that

00:14:23,139 --> 00:14:26,560
automatically gets loaded in again cuz

00:14:25,269 --> 00:14:28,810
I'm using steel tow it automatically

00:14:26,560 --> 00:14:29,949
knows all my end points so hey by the

00:14:28,810 --> 00:14:31,959
way if all of a sudden I kept seeing a

00:14:29,949 --> 00:14:33,310
bunch of 404 somebody calling an

00:14:31,959 --> 00:14:34,899
endpoint that doesn't exist I can

00:14:33,310 --> 00:14:36,370
actually interrogate and it'll show me

00:14:34,899 --> 00:14:38,310
here which at the end points my app

00:14:36,370 --> 00:14:42,180
actually exposes which is really handy

00:14:38,310 --> 00:14:44,170
and then finally you may know this

00:14:42,180 --> 00:14:45,550
because I hooked up to a Postgres

00:14:44,170 --> 00:14:47,259
instance that was already running in my

00:14:45,550 --> 00:14:49,300
environment it automatically gives me

00:14:47,259 --> 00:14:51,459
things like URLs and credentials so my

00:14:49,300 --> 00:14:53,380
app now can read these values from the

00:14:51,459 --> 00:14:54,939
environment again nothing in my code has

00:14:53,380 --> 00:14:57,069
credentials nothing in my code has to

00:14:54,939 --> 00:14:58,810
know about that just by deploying that

00:14:57,069 --> 00:15:06,579
to PCF I had Herot all that sort of

00:14:58,810 --> 00:15:07,809
stuff and then just for fun what's

00:15:06,579 --> 00:15:12,610
really nice is again these things are

00:15:07,809 --> 00:15:20,079
not kind of opaque containers I can't

00:15:12,610 --> 00:15:23,170
access so if I do CF SSH I may have

00:15:20,079 --> 00:15:27,540
spelled it wrong core no downtime app

00:15:23,170 --> 00:15:30,399
that right no not no downtime

00:15:27,540 --> 00:15:33,630
I've got node on the brain that's yeah

00:15:30,399 --> 00:15:36,130
that's not good for me

00:15:33,630 --> 00:15:37,750
so I'm actually SSH into a container

00:15:36,130 --> 00:15:39,009
here so I'm actually in the container

00:15:37,750 --> 00:15:40,689
one of the containers running my

00:15:39,009 --> 00:15:42,189
instance so I can go in and still create

00:15:40,689 --> 00:15:44,079
you know mess with logs I can touch a

00:15:42,189 --> 00:15:45,339
file and create something I can do all

00:15:44,079 --> 00:15:47,410
kinds of things here in this container

00:15:45,339 --> 00:15:49,000
now again this is still more informative

00:15:47,410 --> 00:15:50,199
I shouldn't be screwing around here any

00:15:49,000 --> 00:15:51,819
changes should come back through my

00:15:50,199 --> 00:15:54,009
deployment pipeline and things like that

00:15:51,819 --> 00:15:55,779
but this is not hidden right these are

00:15:54,009 --> 00:15:59,170
just Linux containers I can bounce

00:15:55,779 --> 00:16:01,149
around in which is really nice all right

00:15:59,170 --> 00:16:03,579
so I've got my app running let's go

00:16:01,149 --> 00:16:06,490
ahead and change something and see how

00:16:03,579 --> 00:16:08,230
it works so let me go ahead and show

00:16:06,490 --> 00:16:11,410
another version of the app or another

00:16:08,230 --> 00:16:12,730
app that runs and this is also

00:16:11,410 --> 00:16:14,199
remarkably complicated app so I'll

00:16:12,730 --> 00:16:16,870
explain it to you all after if you need

00:16:14,199 --> 00:16:19,660
it I'm literally just calling that

00:16:16,870 --> 00:16:21,160
endpoint and sleeping so again brace

00:16:19,660 --> 00:16:23,910
yourself I'm just gonna call this

00:16:21,160 --> 00:16:25,959
infinitely and see what happens

00:16:23,910 --> 00:16:28,839
may I hopefully know what happens it

00:16:25,959 --> 00:16:35,199
should run but let's say it's like ahead

00:16:28,839 --> 00:16:38,019
of ourselves here okay so this should

00:16:35,199 --> 00:16:39,790
start running alright fantastic so it's

00:16:38,019 --> 00:16:41,500
calling that endpoint every half second

00:16:39,790 --> 00:16:43,540
it's spitting out information that's

00:16:41,500 --> 00:16:45,730
terrific so what I want to do is

00:16:43,540 --> 00:16:47,620
actually make a change to this service

00:16:45,730 --> 00:16:49,149
but without actually causing a restart

00:16:47,620 --> 00:16:50,559
alright because traditionally in Cloud

00:16:49,149 --> 00:16:52,779
Foundry when I do another deploy there's

00:16:50,559 --> 00:16:54,160
at least a 30 60 second window while

00:16:52,779 --> 00:16:56,050
it's restaging everything we're actually

00:16:54,160 --> 00:16:56,319
everything's not routable I don't love

00:16:56,050 --> 00:16:57,970
that

00:16:56,319 --> 00:17:00,040
so I could do Bluegreen deployment and

00:16:57,970 --> 00:17:01,839
actually swap the network route a lot of

00:17:00,040 --> 00:17:02,889
strategies I can do to avoid that but

00:17:01,839 --> 00:17:03,309
let's say I don't want to mess with any

00:17:02,889 --> 00:17:05,079
of that

00:17:03,309 --> 00:17:09,370
so what I can actually do let me go

00:17:05,079 --> 00:17:12,280
ahead and add another city here I think

00:17:09,370 --> 00:17:14,439
Pittsburgh is P I T you're not gonna

00:17:12,280 --> 00:17:18,220
correct me if I'm wrong it's fine so

00:17:14,439 --> 00:17:20,220
let's go ahead and say I've got that and

00:17:18,220 --> 00:17:23,439
what I want to do is then issue a

00:17:20,220 --> 00:17:26,010
fancier newer command for no downtime

00:17:23,439 --> 00:17:26,010
deploy

00:17:27,150 --> 00:17:36,900
and so this one would be CF v3z DT for

00:17:32,610 --> 00:17:39,080
zero downtime deploy push and just give

00:17:36,900 --> 00:17:43,980
it the name of the app that I want to do

00:17:39,080 --> 00:17:44,970
no downtime app so what this does is

00:17:43,980 --> 00:17:47,160
pretty cool

00:17:44,970 --> 00:17:48,870
is it go ahead and it stages deploys

00:17:47,160 --> 00:17:50,880
there's all the bill pack stuff but then

00:17:48,870 --> 00:17:52,559
when it does is it puts a new instance

00:17:50,880 --> 00:17:53,970
online and then takes one of my old ones

00:17:52,559 --> 00:17:55,710
but the next one online takes out

00:17:53,970 --> 00:17:57,360
offline it so it's swapped out all four

00:17:55,710 --> 00:17:59,220
with the new version so there's gonna be

00:17:57,360 --> 00:18:00,840
at least a temporary period where I'm

00:17:59,220 --> 00:18:02,700
getting results back from both services

00:18:00,840 --> 00:18:04,440
right but I'm also doing this in a no

00:18:02,700 --> 00:18:06,140
downtime fashion there's that again 30

00:18:04,440 --> 00:18:08,880
seconds or maybe both versions are

00:18:06,140 --> 00:18:09,960
participating in the application but

00:18:08,880 --> 00:18:11,940
what's neat is that this is all

00:18:09,960 --> 00:18:13,290
happening without me having to do

00:18:11,940 --> 00:18:15,030
anything fancy so you're in production

00:18:13,290 --> 00:18:16,380
you still may do blue green you still

00:18:15,030 --> 00:18:18,870
may use things like spinnaker and do

00:18:16,380 --> 00:18:20,640
really smart deployments and weighted

00:18:18,870 --> 00:18:21,840
considerations and doing Canaries and

00:18:20,640 --> 00:18:23,370
all these kind of fun things but

00:18:21,840 --> 00:18:25,080
especially in your dev environment or

00:18:23,370 --> 00:18:27,270
maybe even tests this might be a really

00:18:25,080 --> 00:18:30,330
nice way to do easy no downtime

00:18:27,270 --> 00:18:32,880
deployments so once this thing gets done

00:18:30,330 --> 00:18:34,080
it's a magical part it starts taking

00:18:32,880 --> 00:18:38,190
down the old ones but again only

00:18:34,080 --> 00:18:39,750
replacing them with new instances if we

00:18:38,190 --> 00:18:47,630
go back to this guy still returning all

00:18:39,750 --> 00:18:47,630
the regular cities churning away happily

00:18:49,160 --> 00:18:53,430
there we go okay so you got one of the

00:18:51,990 --> 00:18:55,020
new ones is starting those other ones

00:18:53,430 --> 00:19:00,210
are going offline let's find with that

00:18:55,020 --> 00:19:01,770
window again hope we got a little well

00:19:00,210 --> 00:19:03,060
Pittsburgh action there so it's starting

00:19:01,770 --> 00:19:04,890
to come in there was zero hiccup here

00:19:03,060 --> 00:19:07,260
right this thing has continued to call

00:19:04,890 --> 00:19:09,210
with no downtime which is really cool so

00:19:07,260 --> 00:19:10,770
eventually all four instances get

00:19:09,210 --> 00:19:12,510
replaced all of them should be returning

00:19:10,770 --> 00:19:13,770
Pittsburgh in their results and in the

00:19:12,510 --> 00:19:15,060
meantime yeah I might have to do some

00:19:13,770 --> 00:19:16,320
defensive programming because there

00:19:15,060 --> 00:19:18,000
could be a chance that again my old

00:19:16,320 --> 00:19:20,490
version or other version are running at

00:19:18,000 --> 00:19:22,230
the same time but it's not it's pretty

00:19:20,490 --> 00:19:23,280
short window and depending on how you

00:19:22,230 --> 00:19:27,120
built your service that's not

00:19:23,280 --> 00:19:30,090
catastrophic I want that last one to go

00:19:27,120 --> 00:19:31,290
oh I think we're there there we go

00:19:30,090 --> 00:19:32,900
took a few seconds all of those

00:19:31,290 --> 00:19:35,910
instances refresh that's pretty cool

00:19:32,900 --> 00:19:43,320
that that actually worked all right

00:19:35,910 --> 00:19:46,380
terrific one four seven so far you're

00:19:43,320 --> 00:19:48,330
keeping track I know it all right there

00:19:46,380 --> 00:19:50,730
so what else can PCF run that said just

00:19:48,330 --> 00:19:52,650
a bread and butter meeting potatoes

00:19:50,730 --> 00:19:54,720
wherever I met culturally that's just a

00:19:52,650 --> 00:19:56,280
traditional work load right that's gonna

00:19:54,720 --> 00:19:57,930
work great on cloud foundry it's made

00:19:56,280 --> 00:19:59,700
for those sort of things it scales great

00:19:57,930 --> 00:20:02,490
let's do it let's do some quirky or

00:19:59,700 --> 00:20:04,410
stuff so let's talk about apps package

00:20:02,490 --> 00:20:06,720
does docker images lets live on the wild

00:20:04,410 --> 00:20:08,670
side together here so I have something

00:20:06,720 --> 00:20:09,840
I've packaged it up in a docker image I

00:20:08,670 --> 00:20:11,190
want to go ahead and just deploy that

00:20:09,840 --> 00:20:13,260
directly so what kind of things should I

00:20:11,190 --> 00:20:14,700
know about this before I get my feet wet

00:20:13,260 --> 00:20:16,920
well of course

00:20:14,700 --> 00:20:18,780
PCF has always used Linux containers it

00:20:16,920 --> 00:20:20,850
existed before docker did right so I

00:20:18,780 --> 00:20:22,440
mean this is original stuff with C

00:20:20,850 --> 00:20:23,540
groups and namespaces and all that so

00:20:22,440 --> 00:20:26,760
that's that's all great

00:20:23,540 --> 00:20:28,380
so Diego uses this garden run C engine

00:20:26,760 --> 00:20:30,630
to actually construct those containers

00:20:28,380 --> 00:20:32,310
run season a standard these are OCI

00:20:30,630 --> 00:20:35,760
compatible images so while standard

00:20:32,310 --> 00:20:37,890
container e stuff you can publish things

00:20:35,760 --> 00:20:40,110
to PCF from cloud foundry from either

00:20:37,890 --> 00:20:41,850
public or private registries credentials

00:20:40,110 --> 00:20:42,690
are no credential so if this is sitting

00:20:41,850 --> 00:20:45,480
behind the firewall

00:20:42,690 --> 00:20:47,970
terrific if you're using docker hub have

00:20:45,480 --> 00:20:49,920
at it all of these are valid choices for

00:20:47,970 --> 00:20:51,330
pushing of course you should probably

00:20:49,920 --> 00:20:53,070
specify a tag so you're always pulling

00:20:51,330 --> 00:20:54,480
the latest otherwise the platform will

00:20:53,070 --> 00:20:56,400
always just pull the latest so if you

00:20:54,480 --> 00:20:57,990
have versions you want to deploy you can

00:20:56,400 --> 00:21:00,780
specify a tag as part of the deployment

00:20:57,990 --> 00:21:02,970
what's interesting is why I didn't know

00:21:00,780 --> 00:21:04,260
this till somewhat recently

00:21:02,970 --> 00:21:06,360
you can actually control the exposed

00:21:04,260 --> 00:21:07,470
port when you push from a docker image

00:21:06,360 --> 00:21:11,640
so you can say hey I'm gonna push this

00:21:07,470 --> 00:21:14,460
and expose 6255 great PCF will Len will

00:21:11,640 --> 00:21:16,680
ponder that so maybe some additional

00:21:14,460 --> 00:21:18,210
controls you can get there I'll show you

00:21:16,680 --> 00:21:19,890
that of course as well the most

00:21:18,210 --> 00:21:22,620
important takeaway here is there's no

00:21:19,890 --> 00:21:25,380
difference between an app deployed from

00:21:22,620 --> 00:21:27,510
a PCF from a CF push source code or from

00:21:25,380 --> 00:21:29,550
docker it's treated the same it's all

00:21:27,510 --> 00:21:31,980
log all environment variable service

00:21:29,550 --> 00:21:33,330
brokers monitors all those scale no

00:21:31,980 --> 00:21:34,860
difference alright once it's running in

00:21:33,330 --> 00:21:37,050
the platform it's just stuff running on

00:21:34,860 --> 00:21:39,180
the platform so nothing degraded or

00:21:37,050 --> 00:21:41,100
anything like that and of course your

00:21:39,180 --> 00:21:42,390
admins do have to enable it just take

00:21:41,100 --> 00:21:43,980
them out to lunch or something it's fine

00:21:42,390 --> 00:21:44,990
they'll turn it on for you without too

00:21:43,980 --> 00:21:46,530
much trouble

00:21:44,990 --> 00:21:47,940
so when you're really you're just

00:21:46,530 --> 00:21:49,860
considering you have two choices right

00:21:47,940 --> 00:21:51,660
do I deploy code where the platform

00:21:49,860 --> 00:21:53,610
container eise's it for me that's build

00:21:51,660 --> 00:21:55,590
packs we saw that this morning even on

00:21:53,610 --> 00:21:56,970
stage from Ben as we talk about cloud

00:21:55,590 --> 00:21:59,640
native build packs going to more

00:21:56,970 --> 00:22:01,980
platforms so do we do build packs or do

00:21:59,640 --> 00:22:03,600
you do it and it's like the wrong answer

00:22:01,980 --> 00:22:05,400
it just might be wrong based on your

00:22:03,600 --> 00:22:08,040
team and what you you want to focus on

00:22:05,400 --> 00:22:09,720
so if you do the former and I want the

00:22:08,040 --> 00:22:12,270
platform to containerize it for me what

00:22:09,720 --> 00:22:14,400
happens UCF push you do what I just did

00:22:12,270 --> 00:22:16,200
right and so what happens there okay the

00:22:14,400 --> 00:22:18,390
cloud controller triggers a staging

00:22:16,200 --> 00:22:21,050
event container kind of gets created the

00:22:18,390 --> 00:22:23,520
root filesystem actually gets mounted

00:22:21,050 --> 00:22:25,440
Diego actually builds everything I need

00:22:23,520 --> 00:22:27,690
gets that droplet which is that blob if

00:22:25,440 --> 00:22:29,400
you will that thing gets scheduled onto

00:22:27,690 --> 00:22:31,200
those cells and it runs up right all the

00:22:29,400 --> 00:22:32,790
containerization activities all that

00:22:31,200 --> 00:22:35,130
sort of stuff is handled by the platform

00:22:32,790 --> 00:22:37,620
that just that just works for you and

00:22:35,130 --> 00:22:38,730
for most that's that's great right now

00:22:37,620 --> 00:22:40,200
if you want to do it yourself again this

00:22:38,730 --> 00:22:42,000
isn't a wrong thing it's just you have

00:22:40,200 --> 00:22:44,070
more blue responsibilities here right

00:22:42,000 --> 00:22:45,990
I've got a package my source code great

00:22:44,070 --> 00:22:47,730
I have to pick a base image right here's

00:22:45,990 --> 00:22:49,830
my node base image my Java one my

00:22:47,730 --> 00:22:51,270
whatever I've gotta think write a docker

00:22:49,830 --> 00:22:52,530
file I've never I don't think written

00:22:51,270 --> 00:22:54,390
one from scratch it's just copied from

00:22:52,530 --> 00:22:56,190
stack overflow

00:22:54,390 --> 00:22:58,830
I then have to generate and upload that

00:22:56,190 --> 00:23:00,270
image somewhere and I've got to go push

00:22:58,830 --> 00:23:01,740
that docker image right so I've got some

00:23:00,270 --> 00:23:03,330
pre steps now once it then gets into

00:23:01,740 --> 00:23:05,160
Cloud Foundry it's pretty trivial it

00:23:03,330 --> 00:23:06,900
starts up in seconds because it doesn't

00:23:05,160 --> 00:23:08,490
have to do anything literally mounts

00:23:06,900 --> 00:23:10,440
that container image as the root

00:23:08,490 --> 00:23:12,090
filesystem and stream you know streams

00:23:10,440 --> 00:23:14,130
it out to a cell and starts it up and

00:23:12,090 --> 00:23:15,720
you're great right so in both cases

00:23:14,130 --> 00:23:16,830
everything works you're just almost

00:23:15,720 --> 00:23:18,690
deciding

00:23:16,830 --> 00:23:20,610
is my team want to assemble these images

00:23:18,690 --> 00:23:22,169
for maybe good reasons or do I don't

00:23:20,610 --> 00:23:24,149
really care do I just really want to go

00:23:22,169 --> 00:23:26,519
from source to a routable thing with as

00:23:24,149 --> 00:23:28,620
left little mus as possible then do the

00:23:26,519 --> 00:23:30,029
former if I want to handcraft my

00:23:28,620 --> 00:23:31,409
container images or have my Jenkins

00:23:30,029 --> 00:23:34,580
pipeline do it or something like that

00:23:31,409 --> 00:23:41,850
totally cool you have a choice of both

00:23:34,580 --> 00:23:48,840
so let's do one of those so I'll take an

00:23:41,850 --> 00:23:52,230
app that I put together and so this is

00:23:48,840 --> 00:23:54,679
just a even simpler dotnet app that

00:23:52,230 --> 00:23:57,960
Lehrer just says like hi I'm in docker

00:23:54,679 --> 00:24:01,500
yeah so I'm net core to containerized

00:23:57,960 --> 00:24:03,510
it's in PCF it's amazing stuff so I have

00:24:01,500 --> 00:24:05,639
written the docker file written I've

00:24:03,510 --> 00:24:07,320
taken this from elsewhere for the most

00:24:05,639 --> 00:24:09,029
part and so this is just taking the

00:24:07,320 --> 00:24:11,580
Microsoft base images that they provide

00:24:09,029 --> 00:24:14,730
for free you know I'm running a restore

00:24:11,580 --> 00:24:16,799
to actually pull everything in then I'm

00:24:14,730 --> 00:24:18,929
going ahead just from grabbing that base

00:24:16,799 --> 00:24:22,320
runtime yep I'm setting it should listen

00:24:18,929 --> 00:24:23,669
on 8080 and here's my DLL right and then

00:24:22,320 --> 00:24:26,820
before I got here this morning cuz I'm

00:24:23,669 --> 00:24:28,860
not living that dangerously I went ahead

00:24:26,820 --> 00:24:31,230
and did my push to the docker hub I

00:24:28,860 --> 00:24:33,210
containerized my thing got it all

00:24:31,230 --> 00:24:35,399
running up there that's great no I don't

00:24:33,210 --> 00:24:36,299
wanna install docker extensions and I

00:24:35,399 --> 00:24:38,539
was good to go so let's prove that

00:24:36,299 --> 00:24:42,090
sitting up in the docker hub right now

00:24:38,539 --> 00:24:44,580
here's my arse rotor core CF docker this

00:24:42,090 --> 00:24:48,840
is a really complicated app that we're

00:24:44,580 --> 00:24:54,179
gonna go now push to CF so let's go here

00:24:48,840 --> 00:24:56,130
let's go bigger again and so the command

00:24:54,179 --> 00:24:58,769
is only slightly different if I'm

00:24:56,130 --> 00:25:01,649
dealing with docker so here my command

00:24:58,769 --> 00:25:05,340
is pretty basic it's still CF push let's

00:25:01,649 --> 00:25:07,370
call it core CF docker and this time now

00:25:05,340 --> 00:25:10,559
I'm passing in a docker image flag and

00:25:07,370 --> 00:25:13,159
so it's here's the place to find it it's

00:25:10,559 --> 00:25:15,539
gonna default here that the docker hub

00:25:13,159 --> 00:25:17,309
I'm gonna say I want the latest version

00:25:15,539 --> 00:25:20,460
of that we'll make one instance of that

00:25:17,309 --> 00:25:23,909
thing running and we'll give it 256

00:25:20,460 --> 00:25:26,370
Meg's of memory I'm gonna then type it

00:25:23,909 --> 00:25:28,520
wrong for some reason let's see what you

00:25:26,370 --> 00:25:28,520
like

00:25:28,690 --> 00:25:35,650
ah see you should just infer instances

00:25:34,480 --> 00:25:38,670
when's this machine-learning coming

00:25:35,650 --> 00:25:40,000
James Bear you know I want one instance

00:25:38,670 --> 00:25:41,680
come on

00:25:40,000 --> 00:25:43,300
so we'll go and push this this happen

00:25:41,680 --> 00:25:44,620
super fast because there's no real build

00:25:43,300 --> 00:25:46,420
 stuff here right it's just

00:25:44,620 --> 00:25:47,920
literally taking it mounting it starting

00:25:46,420 --> 00:25:49,240
it and in I mean this is about a

00:25:47,920 --> 00:25:51,040
ten-second process which you're pretty

00:25:49,240 --> 00:25:53,230
crazy they go from like hey here's this

00:25:51,040 --> 00:25:54,490
thing to hey I can now reach this thing

00:25:53,230 --> 00:25:56,920
and it's a running app which is just

00:25:54,490 --> 00:25:57,610
awesome now it's making a straight-up

00:25:56,920 --> 00:25:59,830
liar of me

00:25:57,610 --> 00:26:03,310
but this is just about ten seconds of

00:25:59,830 --> 00:26:05,170
time it'll get and start this up and now

00:26:03,310 --> 00:26:10,060
it's running so this is a docker based

00:26:05,170 --> 00:26:11,350
net core app running happily here in

00:26:10,060 --> 00:26:13,450
peace yep let's prove its happily you

00:26:11,350 --> 00:26:16,210
don't know me that well yet let's see if

00:26:13,450 --> 00:26:18,760
it's actually there Oh get a little

00:26:16,210 --> 00:26:19,960
whale up here alright Kanaka iconic

00:26:18,760 --> 00:26:22,300
ography work or whatever the heck the

00:26:19,960 --> 00:26:24,190
word is is spectacular so I mean that's

00:26:22,300 --> 00:26:25,660
a docker whale we've got Steel Toe icons

00:26:24,190 --> 00:26:27,780
don't even let me show you the boot one

00:26:25,660 --> 00:26:31,210
because you're not ready for it

00:26:27,780 --> 00:26:33,730
there we go I mean that's this is this

00:26:31,210 --> 00:26:35,440
is premium tech that's fine right dotnet

00:26:33,730 --> 00:26:38,290
core app just running perfectly fine in

00:26:35,440 --> 00:26:40,690
PCF from a docker image which is nice to

00:26:38,290 --> 00:26:42,070
have alright so that's pretty basic

00:26:40,690 --> 00:26:44,470
let's talk about more complicated

00:26:42,070 --> 00:26:48,400
scenario which actually is mildly more

00:26:44,470 --> 00:26:50,110
complicated because let's talk about TCP

00:26:48,400 --> 00:26:52,090
routable apps let's talk about something

00:26:50,110 --> 00:26:54,640
it's not just a friendly web application

00:26:52,090 --> 00:26:55,750
with you know traditional 8080 sort of

00:26:54,640 --> 00:26:58,270
traffic so what should you know about

00:26:55,750 --> 00:27:01,150
this so what's it mean to deploy one of

00:26:58,270 --> 00:27:03,190
these kind of apps the platform well hey

00:27:01,150 --> 00:27:04,330
I can do all kinds of protocols here

00:27:03,190 --> 00:27:06,190
everything's kind of supported you

00:27:04,330 --> 00:27:07,990
create your tcp route and you map it to

00:27:06,190 --> 00:27:10,540
your app it's pretty straightforward and

00:27:07,990 --> 00:27:13,000
then clients can make actual calls to

00:27:10,540 --> 00:27:14,320
that new route and admins enable this of

00:27:13,000 --> 00:27:16,690
course you have to step in IP space

00:27:14,320 --> 00:27:17,920
things like that what's cool is from

00:27:16,690 --> 00:27:19,330
here you can also use container to

00:27:17,920 --> 00:27:20,920
container networking so things can

00:27:19,330 --> 00:27:22,030
privately reach each other if you don't

00:27:20,920 --> 00:27:23,590
want this thing exposed to the public

00:27:22,030 --> 00:27:24,580
Internet which I'll do it first and then

00:27:23,590 --> 00:27:26,410
I don't trust you so I'll make it

00:27:24,580 --> 00:27:28,270
private I can have this container

00:27:26,410 --> 00:27:31,330
networking and service discovery that

00:27:28,270 --> 00:27:32,590
just works for me and so those container

00:27:31,330 --> 00:27:34,300
the container network and policies are

00:27:32,590 --> 00:27:35,950
great right developers do not have to go

00:27:34,300 --> 00:27:38,020
open a ticket to say this app should

00:27:35,950 --> 00:27:39,640
talk to this app developers get to

00:27:38,020 --> 00:27:40,900
create a command that says this app

00:27:39,640 --> 00:27:42,520
should talk to this app over this

00:27:40,900 --> 00:27:44,410
protocol in this port

00:27:42,520 --> 00:27:47,530
live life right it's much better

00:27:44,410 --> 00:27:48,910
approach there and so all that service

00:27:47,530 --> 00:27:50,560
discovery again it's built in I'll show

00:27:48,910 --> 00:27:51,880
you that I could just use a DNS entry

00:27:50,560 --> 00:27:53,680
and it goes ahead and figures out where

00:27:51,880 --> 00:27:55,180
everything is which is very handy so

00:27:53,680 --> 00:27:58,900
what I'm actually gonna do is deploy

00:27:55,180 --> 00:28:00,640
Redis to pas run Redis as a service

00:27:58,900 --> 00:28:02,710
instance in there and then have my app

00:28:00,640 --> 00:28:06,940
route to it with no problem that's crazy

00:28:02,710 --> 00:28:08,620
you say well just stay tuned it's right

00:28:06,940 --> 00:28:12,370
after lunch this is that this is the

00:28:08,620 --> 00:28:17,550
best you're getting all right so let's

00:28:12,370 --> 00:28:23,170
uh let's roll here so I'll go to another

00:28:17,550 --> 00:28:27,340
instance here of code yeah which one do

00:28:23,170 --> 00:28:34,540
I want to do let's do this all right

00:28:27,340 --> 00:28:37,390
that is a really large font alright good

00:28:34,540 --> 00:28:39,160
so what I want to do is first make that

00:28:37,390 --> 00:28:42,120
visible there we go

00:28:39,160 --> 00:28:44,320
and let's go and see what domains I have

00:28:42,120 --> 00:28:46,060
and so this pulls the domains that are

00:28:44,320 --> 00:28:47,740
available to me as an app dev right so

00:28:46,060 --> 00:28:49,450
these are things like in map to route to

00:28:47,740 --> 00:28:51,280
whatever so you see I have a TCP apps

00:28:49,450 --> 00:28:53,140
and I have one internal as well

00:28:51,280 --> 00:28:55,120
mesh apps just showed up there I didn't

00:28:53,140 --> 00:28:56,020
see that last week that's great so I

00:28:55,120 --> 00:28:57,970
have all these different things I can

00:28:56,020 --> 00:29:00,850
attach my app to so I want to attach

00:28:57,970 --> 00:29:02,650
this to one of these TCP routes so let's

00:29:00,850 --> 00:29:06,270
go ahead and do this I'm gonna go ahead

00:29:02,650 --> 00:29:09,100
and push we'll call it read this docker

00:29:06,270 --> 00:29:10,840
just literally the Redis image that's in

00:29:09,100 --> 00:29:11,800
the docker hub right I don't have to

00:29:10,840 --> 00:29:13,180
build anything here I just want to

00:29:11,800 --> 00:29:15,100
literally deploy the one that has tens

00:29:13,180 --> 00:29:17,770
of millions of pulls and just deploy

00:29:15,100 --> 00:29:19,900
that to PCF and I'm gonna go ahead and

00:29:17,770 --> 00:29:24,040
give it an instance of one because I

00:29:19,900 --> 00:29:25,810
need to specify that apparently 256

00:29:24,040 --> 00:29:28,150
Meg's of memory and what I'm also gonna

00:29:25,810 --> 00:29:29,170
do here is may give it no route Rex I

00:29:28,150 --> 00:29:31,030
don't want to make this thing routable

00:29:29,170 --> 00:29:32,470
yet again I don't want to attach an 8080

00:29:31,030 --> 00:29:33,430
sort of thing just don't give it a route

00:29:32,470 --> 00:29:35,290
yet I'll do it later

00:29:33,430 --> 00:29:37,660
and then finally what's really important

00:29:35,290 --> 00:29:40,930
is I also have to tell Cloud Foundry

00:29:37,660 --> 00:29:42,250
that this thing should be only looking

00:29:40,930 --> 00:29:43,990
at a process otherwise it's gonna be

00:29:42,250 --> 00:29:45,250
trying to ping at a web endpoint to see

00:29:43,990 --> 00:29:46,570
if this thing is healthy and it's gonna

00:29:45,250 --> 00:29:47,890
say oh my gosh I'm not healthy let me

00:29:46,570 --> 00:29:50,170
spit up another one you're gonna get

00:29:47,890 --> 00:29:51,730
stuck in this stupid place so instead I

00:29:50,170 --> 00:29:53,710
want to say look it's process is the

00:29:51,730 --> 00:29:55,330
process running then it's healthy and

00:29:53,710 --> 00:29:55,549
that's would be its indicator of what

00:29:55,330 --> 00:29:58,850
you

00:29:55,549 --> 00:30:06,200
do ya I figure might be you you let's

00:29:58,850 --> 00:30:07,999
see now that looks right yes curses I

00:30:06,200 --> 00:30:11,360
was so excited about the docker part

00:30:07,999 --> 00:30:12,739
that I left off the image all right so

00:30:11,360 --> 00:30:15,850
this should also be very fast because

00:30:12,739 --> 00:30:17,960
again it's pushing a docker image

00:30:15,850 --> 00:30:19,129
there's like six water's up here I know

00:30:17,960 --> 00:30:26,090
I'm drinking someone else's at this

00:30:19,129 --> 00:30:27,679
point this is very unsettling for me I'm

00:30:26,090 --> 00:30:29,809
sure it's fine all right so we've got

00:30:27,679 --> 00:30:32,869
everything up and running if you look at

00:30:29,809 --> 00:30:34,820
my app though this route is empty right

00:30:32,869 --> 00:30:36,049
this is an unreachable Redis server

00:30:34,820 --> 00:30:37,519
right now which is the worst kind of

00:30:36,049 --> 00:30:39,139
Redis server let's be honest it needs to

00:30:37,519 --> 00:30:40,730
be reachable so what am I going to do

00:30:39,139 --> 00:30:44,330
with this thing now if I do go back to

00:30:40,730 --> 00:30:45,440
the apps manager I should see it a

00:30:44,330 --> 00:30:47,899
little red of stock or all the whales

00:30:45,440 --> 00:30:49,580
back that's good too so this is running

00:30:47,899 --> 00:30:52,850
I just can't literally access it so

00:30:49,580 --> 00:30:54,679
let's change that so what I want to do

00:30:52,850 --> 00:30:58,669
is actually map a route so I'm going to

00:30:54,679 --> 00:31:00,080
do CF map route very intuitive and I'm

00:30:58,669 --> 00:31:02,359
gonna have this as read this docker what

00:31:00,080 --> 00:31:08,119
am I gonna map to and I'm gonna map it

00:31:02,359 --> 00:31:10,970
to the TCP apps PC f1 dot IO and I'm

00:31:08,119 --> 00:31:13,730
gonna live go random port because life's

00:31:10,970 --> 00:31:15,409
more exciting that way now it's

00:31:13,730 --> 00:31:16,489
interesting here is I'm sharing the TCP

00:31:15,409 --> 00:31:18,200
route there the public one with

00:31:16,489 --> 00:31:19,700
everybody so if I just tried to pick the

00:31:18,200 --> 00:31:21,739
Redis port I think it's blocked every

00:31:19,700 --> 00:31:23,029
time cuz someone else is using it so I'm

00:31:21,739 --> 00:31:24,679
just saying give me a random one now the

00:31:23,029 --> 00:31:26,179
one still exposed on the container is

00:31:24,679 --> 00:31:27,350
the standard Redis port but here's the

00:31:26,179 --> 00:31:29,779
one that the external router

00:31:27,350 --> 00:31:31,609
that'll be listening on a port send TCP

00:31:29,779 --> 00:31:33,710
traffic through to that port on the

00:31:31,609 --> 00:31:35,090
actual container so let's go ahead and

00:31:33,710 --> 00:31:39,590
see my app and see if that's actually

00:31:35,090 --> 00:31:42,980
there so app ready stalker I should now

00:31:39,590 --> 00:31:44,749
have a route I do so this is now

00:31:42,980 --> 00:31:47,210
routable right this is actually rather

00:31:44,749 --> 00:31:49,070
bold anybody again don't mess with me

00:31:47,210 --> 00:31:50,330
and try to do that anything here yet but

00:31:49,070 --> 00:31:53,149
you could actually reach this thing over

00:31:50,330 --> 00:31:55,539
the public Internet temporarily so let's

00:31:53,149 --> 00:31:55,539
prove it

00:31:55,609 --> 00:32:00,230
so let's go ahead and use the Redis CLI

00:31:57,440 --> 00:32:05,779
I have on my machine and will send this

00:32:00,230 --> 00:32:07,419
to TCP apps PCF 1 dot IO and will ping

00:32:05,779 --> 00:32:11,200
it and it was one

00:32:07,419 --> 00:32:15,599
gosh darn it the memory of a goldfish

00:32:11,200 --> 00:32:18,969
where was that port thank you

00:32:15,599 --> 00:32:21,129
wonderful all right so it's that and

00:32:18,969 --> 00:32:24,129
well let's just ping it all right we got

00:32:21,129 --> 00:32:26,409
pong back it's a good sign you might say

00:32:24,129 --> 00:32:28,629
I that seems mildly non legit so let's

00:32:26,409 --> 00:32:33,509
actually set company name we'll set a

00:32:28,629 --> 00:32:39,579
key to pivotal great let's go ahead and

00:32:33,509 --> 00:32:40,959
get the company name key a pivotal comes

00:32:39,579 --> 00:32:42,879
back so there's a real reticence it's

00:32:40,959 --> 00:32:44,259
accessible over the internet using the

00:32:42,879 --> 00:32:46,869
Redis CLI that's kind of cool

00:32:44,259 --> 00:32:48,759
now I'm still nervous having that

00:32:46,869 --> 00:32:53,499
sitting there on the public Internet so

00:32:48,759 --> 00:32:56,879
let's go ahead and delete route and then

00:32:53,499 --> 00:32:56,879
we're gonna do is the more secure way

00:32:58,859 --> 00:33:03,849
are you sure yes stop me making me

00:33:01,599 --> 00:33:05,289
nervous when you ask me that great so

00:33:03,849 --> 00:33:07,059
I'll go ahead and delete that route and

00:33:05,289 --> 00:33:09,009
now we're gonna do this the smarter way

00:33:07,059 --> 00:33:11,409
so the smarter way is to actually map it

00:33:09,009 --> 00:33:12,879
to that private kind of internal TCP

00:33:11,409 --> 00:33:14,559
router where it's only accessible within

00:33:12,879 --> 00:33:16,629
your organ space really your space I

00:33:14,559 --> 00:33:20,079
believe so let's go ahead and do that so

00:33:16,629 --> 00:33:23,259
let's go ahead and CF map route and once

00:33:20,079 --> 00:33:26,919
again read a stalker we're gonna map it

00:33:23,259 --> 00:33:29,950
to the apps internal domain and we'll

00:33:26,919 --> 00:33:31,119
give it a host name rather stalker now

00:33:29,950 --> 00:33:32,799
what's neat here is because this is

00:33:31,119 --> 00:33:33,999
mapping this again internally I can this

00:33:32,799 --> 00:33:35,979
is just gonna go over now the standard

00:33:33,999 --> 00:33:39,070
Redis port I don't do any sort of port

00:33:35,979 --> 00:33:40,749
translation stuff so it's gonna head

00:33:39,070 --> 00:33:45,089
create add that that was super easy

00:33:40,749 --> 00:33:45,089
let's go prove that worked real quick

00:33:45,179 --> 00:33:48,509
take a look

00:33:50,530 --> 00:33:54,100
and its route now shows up as apps

00:33:52,660 --> 00:33:55,660
internal so this is completely not

00:33:54,100 --> 00:33:57,550
accessible from the public Internet it's

00:33:55,660 --> 00:34:00,430
only accessible from within the Cloud

00:33:57,550 --> 00:34:03,850
Foundry network that makes sense so then

00:34:00,430 --> 00:34:05,650
I built an app that actually talks to

00:34:03,850 --> 00:34:09,760
that write read this talker that's using

00:34:05,650 --> 00:34:11,679
the standard Redis port right so this

00:34:09,760 --> 00:34:15,340
code just literally after you call it

00:34:11,679 --> 00:34:16,899
gets adds a product key to Redis then

00:34:15,340 --> 00:34:18,970
goes ahead and gets that product key and

00:34:16,899 --> 00:34:20,500
throws it on the page sophisticated

00:34:18,970 --> 00:34:22,899
stuff because you deserve it

00:34:20,500 --> 00:34:26,080
so it's good stuff so I'm gonna go ahead

00:34:22,899 --> 00:34:29,050
and push this app and then we're gonna

00:34:26,080 --> 00:34:30,340
go ahead and connect the two now they're

00:34:29,050 --> 00:34:33,330
already applauding I'm not done yet I

00:34:30,340 --> 00:34:36,760
don't know what's going on here CF push

00:34:33,330 --> 00:34:39,280
will go ahead and push that now again in

00:34:36,760 --> 00:34:41,260
this example I am not let's make sure

00:34:39,280 --> 00:34:42,820
I'm not a liar no I'm not connecting to

00:34:41,260 --> 00:34:44,230
that Redis instance as a service right

00:34:42,820 --> 00:34:45,850
it's not a backing service I didn't add

00:34:44,230 --> 00:34:47,470
it from a marketplace this is literally

00:34:45,850 --> 00:34:50,580
just a Redis container running there

00:34:47,470 --> 00:34:53,050
that I want to access from my app so

00:34:50,580 --> 00:34:54,100
we'll go ahead and push that and then

00:34:53,050 --> 00:34:55,419
the last thing I'll have to do is by

00:34:54,100 --> 00:34:57,400
default these two can't talk to each

00:34:55,419 --> 00:34:59,110
other so just because I've done this

00:34:57,400 --> 00:35:00,970
every app isn't just allowed to

00:34:59,110 --> 00:35:02,620
naturally talk to every other thing at

00:35:00,970 --> 00:35:04,060
this sort of container level that's kind

00:35:02,620 --> 00:35:04,840
of a special permission there you need

00:35:04,060 --> 00:35:06,460
permission first

00:35:04,840 --> 00:35:08,080
so what we'll do is actually create then

00:35:06,460 --> 00:35:10,540
that container container policy that

00:35:08,080 --> 00:35:11,800
says this can talk to this and I will

00:35:10,540 --> 00:35:13,510
load it first just so I can get that

00:35:11,800 --> 00:35:15,400
terrible feeling when the app doesn't

00:35:13,510 --> 00:35:19,810
work just to prove that it doesn't work

00:35:15,400 --> 00:35:21,010
and then it will work all right so we

00:35:19,810 --> 00:35:24,430
should have that one showing up here in

00:35:21,010 --> 00:35:27,560
a second there it is the reddest reader

00:35:24,430 --> 00:35:27,560
[Music]

00:35:28,580 --> 00:35:34,510
go built that go and then we'll define

00:35:31,340 --> 00:35:34,510
it which is great

00:35:40,820 --> 00:35:44,099
you know what's gonna bomb out when I

00:35:42,660 --> 00:35:45,480
push it to cuz it's actually gonna try

00:35:44,099 --> 00:35:47,400
to connect when it first starts gonna

00:35:45,480 --> 00:35:50,849
get angry you don't like Cloud Foundry

00:35:47,400 --> 00:35:52,200
when it's angry so it's gonna complain I

00:35:50,849 --> 00:35:55,080
should have done it with a no start but

00:35:52,200 --> 00:35:56,700
Yolo we're having fun here all right so

00:35:55,080 --> 00:35:59,760
it's gonna complain that makes total

00:35:56,700 --> 00:36:00,930
sense it's allowed to complain we can

00:35:59,760 --> 00:36:04,890
actually see in the logs why it's

00:36:00,930 --> 00:36:09,270
complaining because it's gonna say it

00:36:04,890 --> 00:36:10,619
cannot reach ya it's trying to reach

00:36:09,270 --> 00:36:12,240
stuff right trying to read hit the Redis

00:36:10,619 --> 00:36:13,680
connection it can't so again this will

00:36:12,240 --> 00:36:15,090
rag related logs are great so I don't

00:36:13,680 --> 00:36:16,290
have to go be SSA Ching and do a bunch

00:36:15,090 --> 00:36:17,730
of instances trying to figure out what

00:36:16,290 --> 00:36:19,470
goes wrong I know the one place and

00:36:17,730 --> 00:36:21,210
actually see everything going on so this

00:36:19,470 --> 00:36:24,390
gonna be angry let's just make it less

00:36:21,210 --> 00:36:26,010
angry and quiet it down and so what we

00:36:24,390 --> 00:36:27,780
want to do now is I'll add that policy

00:36:26,010 --> 00:36:32,070
that actually lets these things talk to

00:36:27,780 --> 00:36:37,500
each other so this is pretty easy so we

00:36:32,070 --> 00:36:38,609
just get to let's first off list access

00:36:37,500 --> 00:36:42,440
make sure I don't have any policies

00:36:38,609 --> 00:36:44,910
there right now nothing makes sense

00:36:42,440 --> 00:36:49,430
let's go ahead and see if allow access

00:36:44,910 --> 00:36:52,320
and this is the node CF where this

00:36:49,430 --> 00:36:55,020
reader it's my source app I want it to

00:36:52,320 --> 00:36:56,099
be allowed to talk to Redis talker and I

00:36:55,020 --> 00:37:00,930
want to be able to have them talk to

00:36:56,099 --> 00:37:06,030
each other over TCP and the port will be

00:37:00,930 --> 00:37:07,440
the standard port for Redis 63 79 it's

00:37:06,030 --> 00:37:08,490
gonna allow traffic and again it's all

00:37:07,440 --> 00:37:10,410
great stuff this would usually be

00:37:08,490 --> 00:37:11,820
network based you know ticket based

00:37:10,410 --> 00:37:13,800
routing sort of stuff I'm opening a

00:37:11,820 --> 00:37:16,830
ticket with a network team I'm waiting

00:37:13,800 --> 00:37:19,260
three weeks to get acknowledged instead

00:37:16,830 --> 00:37:20,849
now this should just have a policy here

00:37:19,260 --> 00:37:24,359
so now if I go back and restart my app

00:37:20,849 --> 00:37:27,470
it should be less angry and then when I

00:37:24,359 --> 00:37:27,470
started up it should just work fine

00:37:29,060 --> 00:37:34,349
we'll go ahead and stream the logs just

00:37:31,140 --> 00:37:35,660
so we can see when it's done that seemed

00:37:34,349 --> 00:37:39,720
really fast all right

00:37:35,660 --> 00:37:41,640
let's go ahead and view the app hey

00:37:39,720 --> 00:37:43,109
value from where this is PCF so put it

00:37:41,640 --> 00:37:45,240
into Redis pulled it back it's talking

00:37:43,109 --> 00:37:47,280
to Redis no problem I just have a random

00:37:45,240 --> 00:37:49,109
container running so now especially with

00:37:47,280 --> 00:37:51,390
that new feature we announced this week

00:37:49,109 --> 00:37:52,680
with having multi ports per container do

00:37:51,390 --> 00:37:54,060
you think your testing scenarios could

00:37:52,680 --> 00:37:54,270
be fun too I could throw rabbit in here

00:37:54,060 --> 00:37:55,620
in

00:37:54,270 --> 00:37:57,540
suppose the management port and the

00:37:55,620 --> 00:37:59,100
messaging port from the same image this

00:37:57,540 --> 00:38:00,870
could be a cool way to do some simpler

00:37:59,100 --> 00:38:02,430
testing on your systems by just

00:38:00,870 --> 00:38:04,320
deploying all of it to pas even though

00:38:02,430 --> 00:38:05,010
realistically you may not run this here

00:38:04,320 --> 00:38:06,720
permanently

00:38:05,010 --> 00:38:08,460
you'd have to attach a volume service

00:38:06,720 --> 00:38:10,230
maybe for persistent storage or things

00:38:08,460 --> 00:38:12,300
like that this could be a great way to

00:38:10,230 --> 00:38:17,640
deploy certain types of workloads with

00:38:12,300 --> 00:38:21,420
non HTTP traffic alright we're killing

00:38:17,640 --> 00:38:22,530
it on demos right now it's a lot of lot

00:38:21,420 --> 00:38:27,570
of cockiness it's gonna come back to

00:38:22,530 --> 00:38:30,090
bite me alright so we did these what's

00:38:27,570 --> 00:38:31,050
next background workers so again we

00:38:30,090 --> 00:38:33,450
think of this for web traffic

00:38:31,050 --> 00:38:35,460
interactive sort of stuff you know I'm

00:38:33,450 --> 00:38:36,930
triggering it what does it mean when I'm

00:38:35,460 --> 00:38:37,950
trying to do workloads instead or just

00:38:36,930 --> 00:38:40,530
kind of quietly sitting in the

00:38:37,950 --> 00:38:42,150
background making things happen like PCF

00:38:40,530 --> 00:38:43,770
product management just it's doing

00:38:42,150 --> 00:38:46,680
things right sound all flashy like

00:38:43,770 --> 00:38:48,900
engineering but James knows what's up so

00:38:46,680 --> 00:38:50,490
what should I know about these so by

00:38:48,900 --> 00:38:51,960
default of course everything I push gets

00:38:50,490 --> 00:38:54,120
a route everything is addressable I

00:38:51,960 --> 00:38:55,230
don't always want that right so instead

00:38:54,120 --> 00:38:57,150
I might want to choose a non-routable

00:38:55,230 --> 00:38:58,500
app is just gonna quietly do its job it

00:38:57,150 --> 00:39:00,480
just runs in the background and does

00:38:58,500 --> 00:39:01,800
stuff so I might need to have a

00:39:00,480 --> 00:39:05,130
different sort of health check right

00:39:01,800 --> 00:39:06,210
then just process and those things

00:39:05,130 --> 00:39:07,410
what's important though is if I have a

00:39:06,210 --> 00:39:09,150
background job it can still access

00:39:07,410 --> 00:39:11,490
everything else it can still use spring

00:39:09,150 --> 00:39:13,050
cloud services for configuration it can

00:39:11,490 --> 00:39:14,760
still do environment variables attached

00:39:13,050 --> 00:39:17,160
to services all that kind of stuff so

00:39:14,760 --> 00:39:22,470
let's quick show that and give you a

00:39:17,160 --> 00:39:27,570
sense of how that works so I've built an

00:39:22,470 --> 00:39:32,790
app and this one is core demo batch

00:39:27,570 --> 00:39:33,930
there we go enormous alright so what we

00:39:32,790 --> 00:39:35,760
have here is I'm actually gonna talk to

00:39:33,930 --> 00:39:37,260
rabbitmq in this background job and just

00:39:35,760 --> 00:39:38,490
pull things from the queue and do some

00:39:37,260 --> 00:39:40,140
work right I don't need it to be

00:39:38,490 --> 00:39:42,300
routable it just when a new message hits

00:39:40,140 --> 00:39:44,640
rabbitmq pull it and do some work it's a

00:39:42,300 --> 00:39:46,470
background job so in this case I'm

00:39:44,640 --> 00:39:48,810
pulling environment variables from Cloud

00:39:46,470 --> 00:39:50,730
Foundry I'm connecting to rabbit and

00:39:48,810 --> 00:39:52,440
then I'm just listening for let's say

00:39:50,730 --> 00:39:54,600
new loan records or something like that

00:39:52,440 --> 00:39:56,100
and processing when they come in alright

00:39:54,600 --> 00:39:59,250
just sitting there constantly quietly

00:39:56,100 --> 00:40:01,140
processing information and if I look at

00:39:59,250 --> 00:40:02,730
its manifest it is connected to my

00:40:01,140 --> 00:40:04,590
rabbitmq instance and i'm saying here's

00:40:02,730 --> 00:40:06,030
a process health check right don't

00:40:04,590 --> 00:40:08,720
restart you because it's not HTTP

00:40:06,030 --> 00:40:11,670
routable it's not supposed to be

00:40:08,720 --> 00:40:17,210
all right so let's go ahead and push

00:40:11,670 --> 00:40:22,799
this thing in we'll send that in and

00:40:17,210 --> 00:40:25,890
while that's going I can go to apps

00:40:22,799 --> 00:40:27,630
manager and I can look at my services

00:40:25,890 --> 00:40:33,059
and I can look at the RabbitMQ instance

00:40:27,630 --> 00:40:34,910
I deployed somewhere there we go I can

00:40:33,059 --> 00:40:39,390
manage that

00:40:34,910 --> 00:40:40,349
and login to that maybe oh you know

00:40:39,390 --> 00:40:42,509
what's gonna have to come from the other

00:40:40,349 --> 00:40:49,589
one all right we wait for that to start

00:40:42,509 --> 00:40:53,670
up okay so this one's attached to

00:40:49,589 --> 00:40:57,930
RabbitMQ let me try one more time see if

00:40:53,670 --> 00:41:02,940
my my credentials are weird all right

00:40:57,930 --> 00:41:04,380
we're gonna do this the fun way I trust

00:41:02,940 --> 00:41:08,099
you all so I can pull up credentials

00:41:04,380 --> 00:41:09,569
here that seems fine all right so let's

00:41:08,099 --> 00:41:13,079
go to our background job let's grab its

00:41:09,569 --> 00:41:16,220
password because we want to talk to

00:41:13,079 --> 00:41:16,220
rabbitmq and check it out

00:41:19,230 --> 00:41:27,869
I think it's username was also

00:41:21,119 --> 00:41:29,069
remarkably complicated and so I want to

00:41:27,869 --> 00:41:30,569
do is login and just prove there's

00:41:29,069 --> 00:41:33,390
nothing in rabbit which maybe is

00:41:30,569 --> 00:41:36,390
excessive at this point let's see let's

00:41:33,390 --> 00:41:37,520
go ahead we'll manage all right that's

00:41:36,390 --> 00:41:39,450
the password

00:41:37,520 --> 00:41:46,349
that means the username will be

00:41:39,450 --> 00:41:48,780
something delightful there we go

00:41:46,349 --> 00:41:53,220
that's like it's gonna name my third kid

00:41:48,780 --> 00:41:54,750
this but decided against it just it's

00:41:53,220 --> 00:41:57,960
you know kids are cruel why would I want

00:41:54,750 --> 00:42:00,030
to subject them to that so we'll be here

00:41:57,960 --> 00:42:02,640
if I look at the exchanges and the

00:42:00,030 --> 00:42:04,349
queues it just created the lone one as

00:42:02,640 --> 00:42:07,740
it started up right and Stan Shay that's

00:42:04,349 --> 00:42:09,210
looking for data that's cool if we go

00:42:07,740 --> 00:42:12,720
back to the app and actually stream the

00:42:09,210 --> 00:42:14,069
logs let's go ahead and turn this on

00:42:12,720 --> 00:42:16,589
real time so we can see it process

00:42:14,069 --> 00:42:17,760
things as it hits there let's go ahead

00:42:16,589 --> 00:42:19,440
and wrap in what you could actually do

00:42:17,760 --> 00:42:21,990
in RabbitMQ is actually send a message

00:42:19,440 --> 00:42:25,400
in just for fun here so I could send in

00:42:21,990 --> 00:42:28,740
a little JSON payload this might be loan

00:42:25,400 --> 00:42:32,400
ID is 100 then we'll just stop there

00:42:28,740 --> 00:42:34,309
it's a complicated message if we send

00:42:32,400 --> 00:42:36,660
that back in and look

00:42:34,309 --> 00:42:37,950
it received loan ID one so it's

00:42:36,660 --> 00:42:39,480
immediately reading that right it's

00:42:37,950 --> 00:42:41,099
connected to the cube permanently it's

00:42:39,480 --> 00:42:42,990
just a background job listening for

00:42:41,099 --> 00:42:46,190
stuff to hit rabbit it's really nice to

00:42:42,990 --> 00:42:48,660
have these sort of things that just run

00:42:46,190 --> 00:42:50,160
so background jobs again another nice

00:42:48,660 --> 00:42:51,089
option if you just want to get rid of

00:42:50,160 --> 00:42:52,650
some of these things that might have

00:42:51,089 --> 00:42:54,990
just been sitting on a scheduled task or

00:42:52,650 --> 00:42:56,430
a server somewhere now I'm not gonna do

00:42:54,990 --> 00:42:57,630
a demo on this one so I can hit the next

00:42:56,430 --> 00:43:00,510
one but if you look at scheduled jobs

00:42:57,630 --> 00:43:01,349
this is also exciting so if I don't want

00:43:00,510 --> 00:43:02,970
to just have something running

00:43:01,349 --> 00:43:04,530
permanently in the background or a web

00:43:02,970 --> 00:43:05,790
job I might have something that's just

00:43:04,530 --> 00:43:08,250
supposed to wake up and do something

00:43:05,790 --> 00:43:10,440
right maybe it's supposed to flush an

00:43:08,250 --> 00:43:11,910
FTP share just blow out old data maybe

00:43:10,440 --> 00:43:14,280
it's supposed to clear out a database or

00:43:11,910 --> 00:43:15,359
a cache whatever what's neat is each one

00:43:14,280 --> 00:43:17,309
of these starts up in their own

00:43:15,359 --> 00:43:19,079
container instance right it runs its

00:43:17,309 --> 00:43:20,490
thing and then it shuts down and Cloud

00:43:19,079 --> 00:43:23,099
Foundry doesn't worry about it supposed

00:43:20,490 --> 00:43:24,630
to shut down so you can initiate these

00:43:23,099 --> 00:43:26,819
things with a command-line interface you

00:43:24,630 --> 00:43:28,349
can use Apps manager again all the

00:43:26,819 --> 00:43:29,880
functionalities still available to these

00:43:28,349 --> 00:43:32,250
they're just meant to start up do some

00:43:29,880 --> 00:43:33,119
work and shut back down again now you

00:43:32,250 --> 00:43:35,220
can also set these two

00:43:33,119 --> 00:43:37,200
schedule and a scheduler uses like a

00:43:35,220 --> 00:43:38,640
cron expression the same run this every

00:43:37,200 --> 00:43:40,289
Thursday at 2:00 p.m.

00:43:38,640 --> 00:43:42,150
run this every other Monday run this

00:43:40,289 --> 00:43:44,279
every two minutes you can set up that

00:43:42,150 --> 00:43:46,680
expression and set up multiple scheduled

00:43:44,279 --> 00:43:48,869
tasks if you want to and you can even

00:43:46,680 --> 00:43:50,579
schedule it to call HTTP endpoints maybe

00:43:48,869 --> 00:43:53,039
you go call an endpoint pull down a feed

00:43:50,579 --> 00:43:54,749
of data whatever it would be so really

00:43:53,039 --> 00:43:56,430
easy to use these if you're looking to

00:43:54,749 --> 00:43:57,960
do again get rid of these scheduled cron

00:43:56,430 --> 00:43:59,369
jobs you just have spreading around a

00:43:57,960 --> 00:44:04,740
bunch of machines this is a nice

00:43:59,369 --> 00:44:15,029
replacement for that question can you

00:44:04,740 --> 00:44:16,890
auto scale these yeah so well so on the

00:44:15,029 --> 00:44:18,390
question is how can i auto scale these

00:44:16,890 --> 00:44:20,400
the answer would be so that background

00:44:18,390 --> 00:44:22,499
job I showed you all those scaling also

00:44:20,400 --> 00:44:24,089
works on RabbitMQ depth so you could

00:44:22,499 --> 00:44:25,710
easily define an auto scaling policy

00:44:24,089 --> 00:44:27,630
based on queue depth and spin up five

00:44:25,710 --> 00:44:29,190
more workers to start processing from

00:44:27,630 --> 00:44:30,809
the queue probably not as much as with

00:44:29,190 --> 00:44:34,859
these scheduled jobs but for background

00:44:30,809 --> 00:44:35,999
jobs absolutely good so next one I

00:44:34,859 --> 00:44:38,609
wanted to show you actually is a legacy

00:44:35,999 --> 00:44:40,259
app because the misnomer may because I

00:44:38,609 --> 00:44:41,700
don't know who ever does marketing here

00:44:40,259 --> 00:44:43,859
likes talking about cloud native apps a

00:44:41,700 --> 00:44:45,749
lot which is a real problem but in real

00:44:43,859 --> 00:44:47,730
life it's not just cloud native apps

00:44:45,749 --> 00:44:49,319
right I can take existing apps and just

00:44:47,730 --> 00:44:50,819
run them in the platform right they

00:44:49,319 --> 00:44:52,920
don't need to be completely refactored

00:44:50,819 --> 00:44:54,930
or redone so grant remember you can do

00:44:52,920 --> 00:44:57,599
Co your containers Linda Linux or

00:44:54,930 --> 00:44:58,739
Windows any of those just run and again

00:44:57,599 --> 00:45:00,299
when they do run they automatically

00:44:58,739 --> 00:45:02,849
inherit all that stuff that's happening

00:45:00,299 --> 00:45:04,200
in PCF which is great now sometimes you

00:45:02,849 --> 00:45:05,989
want to do some refactoring but what I

00:45:04,200 --> 00:45:08,849
want to show you is actually a

00:45:05,989 --> 00:45:10,920
dangerously old net application and just

00:45:08,849 --> 00:45:13,499
seeing it run on the windows cell within

00:45:10,920 --> 00:45:18,599
PCF with zero code changes run runs

00:45:13,499 --> 00:45:21,509
perfectly fine and so I'll use Visual

00:45:18,599 --> 00:45:26,759
Studio for Mac here just to mix it up

00:45:21,509 --> 00:45:29,220
and so this is a remarkably tiny let's

00:45:26,759 --> 00:45:31,470
make a little bigger this is a classic

00:45:29,220 --> 00:45:34,109
asp.net web service I wrote this I write

00:45:31,470 --> 00:45:35,460
now this was my 2005 style sort of

00:45:34,109 --> 00:45:37,349
dotnet web service where all you had to

00:45:35,460 --> 00:45:38,880
do was add an annotation and then you

00:45:37,349 --> 00:45:41,579
just got this hellacious soap based

00:45:38,880 --> 00:45:44,130
service and it was magical it's also you

00:45:41,579 --> 00:45:45,420
know catastrophic to look at today but

00:45:44,130 --> 00:45:46,710
this was really easy this was the first

00:45:45,420 --> 00:45:47,400
time we were building web services that

00:45:46,710 --> 00:45:49,920
we really

00:45:47,400 --> 00:45:52,260
so I took this code dotnet framework for

00:45:49,920 --> 00:45:54,420
you know it's pulling machine names from

00:45:52,260 --> 00:45:56,670
the in you know the environment it's

00:45:54,420 --> 00:45:57,900
writing out to the console it's pulling

00:45:56,670 --> 00:45:59,400
environment variables like it's doing a

00:45:57,900 --> 00:46:02,040
bunch of weird stuff that's cool that's

00:45:59,400 --> 00:46:04,170
what legacy apps are for so the only

00:46:02,040 --> 00:46:06,000
thing I've done is at a manifest file

00:46:04,170 --> 00:46:07,980
and this thing says look give me a

00:46:06,000 --> 00:46:09,900
couple instances use the host of a web

00:46:07,980 --> 00:46:12,210
core build pack which makes a little iis

00:46:09,900 --> 00:46:15,300
host of a web core and deploy this to

00:46:12,210 --> 00:46:17,310
Windows 2016 that's it right that's all

00:46:15,300 --> 00:46:20,610
this thing does so if I go back to

00:46:17,310 --> 00:46:21,690
another window here and I mean that's

00:46:20,610 --> 00:46:24,360
folder let's go ahead and see I've

00:46:21,690 --> 00:46:24,930
pushed that thing and so this pushes to

00:46:24,360 --> 00:46:26,880
a dotnet

00:46:24,930 --> 00:46:28,530
Windows environment right I don't have

00:46:26,880 --> 00:46:30,270
to refactor it to dotnet core if I don't

00:46:28,530 --> 00:46:31,890
happen one two I don't have to make any

00:46:30,270 --> 00:46:33,930
fundamental changes I'm taking a classic

00:46:31,890 --> 00:46:36,360
dotnet app and deploying that to a

00:46:33,930 --> 00:46:38,400
Windows cell and then it should just

00:46:36,360 --> 00:46:40,230
work now good if I were doing unholy

00:46:38,400 --> 00:46:41,400
things like reading from the registry or

00:46:40,230 --> 00:46:42,960
things like that you still might want to

00:46:41,400 --> 00:46:44,430
refactor that of course because you

00:46:42,960 --> 00:46:45,870
don't have access necessarily to the

00:46:44,430 --> 00:46:48,030
registry you can read from you can't

00:46:45,870 --> 00:46:50,010
write to it in a Windows container that

00:46:48,030 --> 00:46:51,960
we do here so there might be cases that

00:46:50,010 --> 00:46:56,160
was that was crazy fast

00:46:51,960 --> 00:46:58,640
but that's gonna be a dotnet app just

00:46:56,160 --> 00:47:02,070
running on the platform so here it is

00:46:58,640 --> 00:47:03,420
here's my asp.net web service let's

00:47:02,070 --> 00:47:08,010
prove it it's actually Windows Server

00:47:03,420 --> 00:47:09,210
2016 which is kind of crazy I can hit

00:47:08,010 --> 00:47:12,800
this service now again it's gonna

00:47:09,210 --> 00:47:16,650
complain don't worry it's gonna be good

00:47:12,800 --> 00:47:18,270
here is that glorious sort of classic

00:47:16,650 --> 00:47:20,730
net page I mean look at this look at

00:47:18,270 --> 00:47:22,920
this delicious soap that comes with this

00:47:20,730 --> 00:47:24,600
this is magical stuff we've really

00:47:22,920 --> 00:47:26,430
progressed as an industry we should all

00:47:24,600 --> 00:47:30,030
give ourselves a pat on the back this is

00:47:26,430 --> 00:47:32,880
good stuff so regular soap service now

00:47:30,030 --> 00:47:35,850
it's also cool is because this is using

00:47:32,880 --> 00:47:37,710
Windows containers I can actually SSH

00:47:35,850 --> 00:47:39,360
into this thing too which seems like now

00:47:37,710 --> 00:47:42,240
that's crazy you're not what are you

00:47:39,360 --> 00:47:46,020
doing here what witchcraft is this so I

00:47:42,240 --> 00:47:47,820
can so that is AC prompt right there now

00:47:46,020 --> 00:47:50,490
I can try to do LS because I'm used to

00:47:47,820 --> 00:47:51,990
using stuff here I can do dir here's all

00:47:50,490 --> 00:47:54,210
those windows folders no one ever uses

00:47:51,990 --> 00:47:55,470
like favorites and pictures like this is

00:47:54,210 --> 00:47:57,000
that's a windows container right that's

00:47:55,470 --> 00:47:58,830
a Windows box sitting right there and I

00:47:57,000 --> 00:48:00,869
can even do crazy stuff like you know

00:47:58,830 --> 00:48:02,219
instantiate PowerShell

00:48:00,869 --> 00:48:03,479
which is not a big deal and start

00:48:02,219 --> 00:48:04,890
running PowerShell commands for my

00:48:03,479 --> 00:48:07,229
windows container managed by Cloud

00:48:04,890 --> 00:48:10,140
Foundry pause for head exploding like

00:48:07,229 --> 00:48:11,460
that's really neat stuff and so I can do

00:48:10,140 --> 00:48:13,950
all my regular stuff here I could start

00:48:11,460 --> 00:48:16,019
services I could do whatever that's just

00:48:13,950 --> 00:48:18,210
a running app which is neat but what I

00:48:16,019 --> 00:48:20,069
also want to prove to you is that all

00:48:18,210 --> 00:48:21,509
that sort of failure recovery also comes

00:48:20,069 --> 00:48:24,029
for free so why would I move that app

00:48:21,509 --> 00:48:26,940
there well if I want to let's say

00:48:24,029 --> 00:48:28,499
purposely crash that endpoint so I have

00:48:26,940 --> 00:48:30,119
a function usually again this happens by

00:48:28,499 --> 00:48:32,339
default but let me purposely crash this

00:48:30,119 --> 00:48:33,809
thing by doing a remarkably bad thing

00:48:32,339 --> 00:48:35,640
which is actually aborting the thread

00:48:33,809 --> 00:48:37,680
that's running I is like this is a

00:48:35,640 --> 00:48:39,450
catastrophic you're every doc you read

00:48:37,680 --> 00:48:42,989
says please never do this so I did it

00:48:39,450 --> 00:48:49,650
which makes sense so what I want to do

00:48:42,989 --> 00:48:52,529
is call that a crash endpoint I'm going

00:48:49,650 --> 00:48:56,219
to call this it's gonna collapse into a

00:48:52,529 --> 00:48:58,739
flaming ball great and so it actually

00:48:56,219 --> 00:49:00,569
crashed the app and so what I will see

00:48:58,739 --> 00:49:04,130
here momentarily is actually just you

00:49:00,569 --> 00:49:07,229
know detects that one of them restarts

00:49:04,130 --> 00:49:08,849
it'll actually show me that yeah it's

00:49:07,229 --> 00:49:12,869
been a couple of seconds let me log back

00:49:08,849 --> 00:49:13,829
in again it'll actually show that one of

00:49:12,869 --> 00:49:15,660
them crashed and one of them is

00:49:13,829 --> 00:49:21,450
restarting here so let's go back to that

00:49:15,660 --> 00:49:23,400
app and still rakaat you know recover

00:49:21,450 --> 00:49:24,989
super fast so fast you'd even say there

00:49:23,400 --> 00:49:26,759
it is there's the app crash but it's

00:49:24,989 --> 00:49:28,349
immediately restarting that instance so

00:49:26,759 --> 00:49:30,690
even with a classic dotnet app being

00:49:28,349 --> 00:49:32,279
deploy to the platform even if it you

00:49:30,690 --> 00:49:33,660
know memory leak crashes whatever the

00:49:32,279 --> 00:49:35,489
platform still can detect and recover

00:49:33,660 --> 00:49:36,719
those sort of apps so that's a really

00:49:35,489 --> 00:49:38,640
big deal again for some of these

00:49:36,719 --> 00:49:40,529
complicated environments where you're

00:49:38,640 --> 00:49:41,759
not gonna modernize everything some of

00:49:40,529 --> 00:49:43,079
these things you might literally just be

00:49:41,759 --> 00:49:45,180
able to move and start getting log

00:49:43,079 --> 00:49:46,920
aggregation and fail your recovery and

00:49:45,180 --> 00:49:53,640
all that stuff for just for free without

00:49:46,920 --> 00:49:56,869
changing anything terrific

00:49:53,640 --> 00:49:59,130
all right so that's all exciting stuff I

00:49:56,869 --> 00:50:01,859
won't do a demo of this one but again we

00:49:59,130 --> 00:50:03,420
often get over here people like I well I

00:50:01,859 --> 00:50:06,089
mean Cloud Foundry is just for stateless

00:50:03,420 --> 00:50:08,819
stuff I mean kind of but really it's

00:50:06,089 --> 00:50:10,230
also does stateful stuff so while the

00:50:08,819 --> 00:50:12,779
containers are ephemeral you can

00:50:10,230 --> 00:50:15,119
actually attach disks and attach volumes

00:50:12,779 --> 00:50:18,239
to a container in Cloud Foundry so you

00:50:15,119 --> 00:50:19,499
can do NFS right NFS mounts it's not a

00:50:18,239 --> 00:50:20,700
big deal it's really easy it's something

00:50:19,499 --> 00:50:22,859
you can show up in your marketplace or

00:50:20,700 --> 00:50:25,170
SMB for Windows so I can actually attach

00:50:22,859 --> 00:50:26,309
to a shared file store write stuff to it

00:50:25,170 --> 00:50:28,950
that container does not have to be

00:50:26,309 --> 00:50:31,200
completely ephemeral the admins can add

00:50:28,950 --> 00:50:33,420
that developers then mount that volume

00:50:31,200 --> 00:50:35,249
wherever they want in the container so I

00:50:33,420 --> 00:50:36,779
can still have stateful things without

00:50:35,249 --> 00:50:39,180
any problem running in Cloud Foundry

00:50:36,779 --> 00:50:40,859
it's not a big deal and then of course

00:50:39,180 --> 00:50:42,569
again these can be read/write volumes or

00:50:40,859 --> 00:50:44,279
just just read volumes you have a lot of

00:50:42,569 --> 00:50:45,749
choices there so again if you have

00:50:44,279 --> 00:50:47,670
stateful workloads you have Windows

00:50:45,749 --> 00:50:50,999
workloads you have background jobs all

00:50:47,670 --> 00:50:52,529
those are cool the last one I'll quickly

00:50:50,999 --> 00:50:53,940
cover streaming pipelines

00:50:52,529 --> 00:50:55,349
this is neat stuff so if you're trying

00:50:53,940 --> 00:50:57,779
to move away from this world it may be

00:50:55,349 --> 00:50:59,880
just the centralized ESB or what kind of

00:50:57,779 --> 00:51:01,769
integration specialist team you want

00:50:59,880 --> 00:51:03,720
devs to be I'll also build kind of

00:51:01,769 --> 00:51:06,569
connectivity and data processing

00:51:03,720 --> 00:51:08,039
pipelines this could be good for you so

00:51:06,569 --> 00:51:10,739
how do I move from kind of batch to data

00:51:08,039 --> 00:51:12,690
processing to real-time PCF supports

00:51:10,739 --> 00:51:14,009
things like Kafka and rabbitmq and as

00:51:12,690 --> 00:51:16,319
your service boss and all that kind of

00:51:14,009 --> 00:51:17,910
fun stuff spring cloud streams a really

00:51:16,319 --> 00:51:19,799
nice library that actually makes it

00:51:17,910 --> 00:51:21,660
simple to talk to a broker I just put a

00:51:19,799 --> 00:51:23,670
blog post online a couple hours ago of

00:51:21,660 --> 00:51:26,549
using Azure event hubs with spring cloud

00:51:23,670 --> 00:51:27,930
stream really nice stuff again these

00:51:26,549 --> 00:51:29,970
things are probably background jobs I

00:51:27,930 --> 00:51:31,499
can ingest data multiple ways and if

00:51:29,970 --> 00:51:33,180
you're a pivotal customer you can use

00:51:31,499 --> 00:51:34,890
spring cloud dataflow to actually stand

00:51:33,180 --> 00:51:36,930
up this entire environment completely

00:51:34,890 --> 00:51:37,799
managed by the platform and build and

00:51:36,930 --> 00:51:39,569
deploy pipelines

00:51:37,799 --> 00:51:42,809
so let me quick show you what those data

00:51:39,569 --> 00:51:46,410
pipelines look like as they can they can

00:51:42,809 --> 00:51:48,499
be part of your world - alright so let's

00:51:46,410 --> 00:51:51,869
go back to here let's go to my services

00:51:48,499 --> 00:51:55,769
let's go to my data flow server check

00:51:51,869 --> 00:51:57,509
that character out and what I want to do

00:51:55,769 --> 00:51:59,730
is build a quick streaming pipeline for

00:51:57,509 --> 00:52:01,619
you and this is using spring cloud

00:51:59,730 --> 00:52:03,509
dataflow for PCF it's part of your

00:52:01,619 --> 00:52:04,549
entitlement if you're a PCF customer you

00:52:03,509 --> 00:52:06,900
don't to pay anything

00:52:04,549 --> 00:52:07,320
everything's great maybe I don't know

00:52:06,900 --> 00:52:10,610
I'm not in

00:52:07,320 --> 00:52:12,570
sailes it's probably free so what I did

00:52:10,610 --> 00:52:14,250
was built something that's gonna be in

00:52:12,570 --> 00:52:17,940
this pipeline it just built a spring

00:52:14,250 --> 00:52:24,060
boot app that let's see here's my data

00:52:17,940 --> 00:52:27,510
in a richer pipeline and so all if this

00:52:24,060 --> 00:52:28,920
thing is going to do is enrich data

00:52:27,510 --> 00:52:32,070
right so something comes into my

00:52:28,920 --> 00:52:33,360
pipeline and if it has a certain ID I

00:52:32,070 --> 00:52:35,850
want to turn into like a friendly

00:52:33,360 --> 00:52:37,830
numerical or a character letter right

00:52:35,850 --> 00:52:39,540
warehouse ID for 400 comes in switch

00:52:37,830 --> 00:52:40,950
that to California I'm just doing some

00:52:39,540 --> 00:52:43,050
data enrichment on data coming through

00:52:40,950 --> 00:52:45,480
think of this as data quality exercises

00:52:43,050 --> 00:52:47,280
whatever I just have a simple thing so

00:52:45,480 --> 00:52:48,930
this is just this simple thing just uses

00:52:47,280 --> 00:52:50,310
annotations that spring cloud stream

00:52:48,930 --> 00:52:52,440
understands it doesn't know anything

00:52:50,310 --> 00:52:55,110
about rabbit or coffee or any of that it

00:52:52,440 --> 00:52:57,660
doesn't care I deployed that to my data

00:52:55,110 --> 00:52:58,770
flow server here it is demo enricher and

00:52:57,660 --> 00:53:01,260
all I want to do is now it build a

00:52:58,770 --> 00:53:03,420
pipeline that works so let me go ahead

00:53:01,260 --> 00:53:05,250
and create a brand new stream and

00:53:03,420 --> 00:53:08,720
because there's no chance I'm typing the

00:53:05,250 --> 00:53:11,790
entire stream in front of you let me

00:53:08,720 --> 00:53:15,300
grab it from there and this uses a nice

00:53:11,790 --> 00:53:16,680
DSL that you can drag and drop or you

00:53:15,300 --> 00:53:18,600
can just type everything in and use

00:53:16,680 --> 00:53:20,190
pipes and filters kind of UNIX style and

00:53:18,600 --> 00:53:22,610
so this is great so this little

00:53:20,190 --> 00:53:24,870
character talks to a Postgres database

00:53:22,610 --> 00:53:26,880
pulls data from the database when it

00:53:24,870 --> 00:53:29,070
hits it processes it through this stream

00:53:26,880 --> 00:53:31,350
and then write stuff out to a log write

00:53:29,070 --> 00:53:33,540
data changes in database processes and

00:53:31,350 --> 00:53:35,280
through stream writes to log a developer

00:53:33,540 --> 00:53:37,320
does this right I don't need necessarily

00:53:35,280 --> 00:53:38,550
special expertise here I'm building

00:53:37,320 --> 00:53:40,770
spring food apps and stitching them

00:53:38,550 --> 00:53:42,840
together in a pipeline really simple

00:53:40,770 --> 00:53:45,090
stuff so let's go ahead and create that

00:53:42,840 --> 00:53:47,390
stream let's give it a name i'll call it

00:53:45,090 --> 00:53:49,860
the kind of warehouse processing stream

00:53:47,390 --> 00:53:51,450
now what's really cool what happens here

00:53:49,860 --> 00:53:53,640
it's ok so what does this have to do

00:53:51,450 --> 00:53:55,350
with PCF I'm glad you asked voice in my

00:53:53,640 --> 00:53:58,740
head let's go ahead and click Play and

00:53:55,350 --> 00:54:00,540
what I want to do here is deploy the

00:53:58,740 --> 00:54:02,190
apps that make up the pipeline go to

00:54:00,540 --> 00:54:03,390
Cloud Foundry now this is where

00:54:02,190 --> 00:54:04,650
microservices are cool because

00:54:03,390 --> 00:54:06,090
traditionally if all of a sudden your

00:54:04,650 --> 00:54:07,800
informatica environment was overloaded

00:54:06,090 --> 00:54:09,780
you would just buy more hardware make

00:54:07,800 --> 00:54:11,730
things bigger because each of those

00:54:09,780 --> 00:54:13,590
steps in that pipeline or unique micro

00:54:11,730 --> 00:54:16,350
services I get to go in here and say you

00:54:13,590 --> 00:54:18,150
know what let's have one node talking to

00:54:16,350 --> 00:54:21,120
that JDBC database let's have two of

00:54:18,150 --> 00:54:22,590
that enricher and then one doing the log

00:54:21,120 --> 00:54:24,420
right I get to have different instances

00:54:22,590 --> 00:54:25,830
in memory and whatever for each stage of

00:54:24,420 --> 00:54:28,590
the pipeline which is really neat and

00:54:25,830 --> 00:54:30,780
then each of those automatically get

00:54:28,590 --> 00:54:32,700
deployed to PCF and if I want to scale

00:54:30,780 --> 00:54:34,350
it I can scale it or whatever with all

00:54:32,700 --> 00:54:36,570
those steps in the pipeline get deployed

00:54:34,350 --> 00:54:39,060
to PCF it talks to that back-end Broker

00:54:36,570 --> 00:54:41,100
RabbitMQ Kafka whatever to actually do

00:54:39,060 --> 00:54:42,300
all the work but I don't really have to

00:54:41,100 --> 00:54:44,340
do much as a dev here I don't have to

00:54:42,300 --> 00:54:47,910
deploy anything this thing is now gonna

00:54:44,340 --> 00:54:50,130
start showing up over here I'm gonna

00:54:47,910 --> 00:54:52,230
start seeing apps show up and while

00:54:50,130 --> 00:54:55,980
that's happening I'll start this little

00:54:52,230 --> 00:54:57,060
app that loads stuff into Postgres and

00:54:55,980 --> 00:54:58,560
so here they here they're showing up

00:54:57,060 --> 00:55:00,600
here's all the actual things here's two

00:54:58,560 --> 00:55:01,950
instances of that enricher right so

00:55:00,600 --> 00:55:03,240
spring cloud dataflow automatically

00:55:01,950 --> 00:55:05,460
deploys the ether cloud foundry or

00:55:03,240 --> 00:55:07,440
kubernetes all the gap instances

00:55:05,460 --> 00:55:09,330
stitches them all together to the broker

00:55:07,440 --> 00:55:10,980
and then you're good to go kind of this

00:55:09,330 --> 00:55:12,300
managed integration platform where

00:55:10,980 --> 00:55:15,000
you're not again building kind of

00:55:12,300 --> 00:55:16,800
proprietary ESB sort of stuff you're

00:55:15,000 --> 00:55:21,240
just connecting apps which is our clear

00:55:16,800 --> 00:55:24,020
really nice way to go so we can see how

00:55:21,240 --> 00:55:26,340
this thing's doing takes a few seconds

00:55:24,020 --> 00:55:28,230
deployed deployed again they're

00:55:26,340 --> 00:55:31,410
applauding I mean finished yet it's very

00:55:28,230 --> 00:55:33,300
unsettling all these things are going I

00:55:31,410 --> 00:55:34,590
can see some information about it

00:55:33,300 --> 00:55:36,540
running because it actually interrogate

00:55:34,590 --> 00:55:40,260
Stu runtime kubernetes Cloud Foundry to

00:55:36,540 --> 00:55:43,340
see what's happening let's see if

00:55:40,260 --> 00:55:43,340
they're almost ready here

00:55:47,310 --> 00:55:54,760
and then once this starts up let's go

00:55:49,720 --> 00:55:57,760
ahead into that Postgres app all right

00:55:54,760 --> 00:56:01,200
so let's clean it up I might already be

00:55:57,760 --> 00:56:02,430
cleaned up okay it's create a table

00:56:01,200 --> 00:56:04,660
terrific

00:56:02,430 --> 00:56:07,420
let's add a record to that table it's

00:56:04,660 --> 00:56:08,830
add a few records to the table so these

00:56:07,420 --> 00:56:10,270
are just adding those warehouse records

00:56:08,830 --> 00:56:11,650
with like one two three four five it's

00:56:10,270 --> 00:56:14,290
gonna translate those into friendly

00:56:11,650 --> 00:56:17,920
things let's see if our pipeline app is

00:56:14,290 --> 00:56:20,770
up I think it isn't just lying let's go

00:56:17,920 --> 00:56:21,820
ahead and look at the logs we'll go

00:56:20,770 --> 00:56:23,050
ahead and stream the logs and we should

00:56:21,820 --> 00:56:24,790
see this happening real time when I add

00:56:23,050 --> 00:56:25,930
a record to a database this pipeline

00:56:24,790 --> 00:56:27,880
should be pulling records from the

00:56:25,930 --> 00:56:29,590
database processing it and dropping into

00:56:27,880 --> 00:56:33,850
the log file in this case the log of

00:56:29,590 --> 00:56:41,110
this app let's see I don't think I've

00:56:33,850 --> 00:56:42,250
seen it yet let's make sure all our apps

00:56:41,110 --> 00:56:43,720
are running it still says it's crashed

00:56:42,250 --> 00:56:49,390
but I don't believe it I think it's a

00:56:43,720 --> 00:56:50,710
liar maybe it's not okay so they're all

00:56:49,390 --> 00:56:56,830
deployed so this should be processing

00:56:50,710 --> 00:56:59,130
now keep adding records and there we go

00:56:56,830 --> 00:57:01,570
so here's a record so here's the order

00:56:59,130 --> 00:57:03,730
warehouse ID warehouse location that

00:57:01,570 --> 00:57:05,200
friendly thing California right so went

00:57:03,730 --> 00:57:07,660
through my little custom enricher wrote

00:57:05,200 --> 00:57:10,090
it out to the log every new one I add

00:57:07,660 --> 00:57:14,590
here let's add one more just you don't

00:57:10,090 --> 00:57:16,240
think I'm making stuff up oh good lord

00:57:14,590 --> 00:57:19,900
that was a lot so then more stuff comes

00:57:16,240 --> 00:57:21,250
in here's that new one showed up a lot a

00:57:19,900 --> 00:57:22,270
lot of stuff happens in the log which is

00:57:21,250 --> 00:57:25,900
why you shouldn't write the logs for

00:57:22,270 --> 00:57:27,310
demos things are happening though so you

00:57:25,900 --> 00:57:28,600
saw that one go in you already believe

00:57:27,310 --> 00:57:31,000
me we've built a lot of trust here

00:57:28,600 --> 00:57:32,470
together but this is a really easy way

00:57:31,000 --> 00:57:33,940
to build a data processing pipeline

00:57:32,470 --> 00:57:35,620
right and this stuff runs in PCF these

00:57:33,940 --> 00:57:37,420
are stream processing apps again not a

00:57:35,620 --> 00:57:39,190
traditional 12 factor web app this is

00:57:37,420 --> 00:57:41,580
sort of stitched together Apps which is

00:57:39,190 --> 00:57:41,580
pretty cool

00:57:42,090 --> 00:57:46,330
hopefully through all this you get a

00:57:45,070 --> 00:57:48,130
good sense like yeah you've got a ton of

00:57:46,330 --> 00:57:49,540
stuff but more and more of this can

00:57:48,130 --> 00:57:52,330
actually potentially consolidate on

00:57:49,540 --> 00:57:54,430
Cloud Foundry right I can run 12 factors

00:57:52,330 --> 00:57:56,290
sure but I can run docker images and TCP

00:57:54,430 --> 00:57:58,540
apps and background jobs and schedule

00:57:56,290 --> 00:58:00,910
jobs and legacy apps streaming apps and

00:57:58,540 --> 00:58:02,110
more right so this may be pretend

00:58:00,910 --> 00:58:03,430
so for you to start combining some of

00:58:02,110 --> 00:58:05,380
your things into one platform and

00:58:03,430 --> 00:58:07,240
simplify your ops and give your devs a

00:58:05,380 --> 00:58:08,260
better place to go for everything hope

00:58:07,240 --> 00:58:10,180
this is fun I'll be hanging out up here

00:58:08,260 --> 00:58:11,640
for questions and appreciate all the

00:58:10,180 --> 00:58:18,840
attention

00:58:11,640 --> 00:58:18,840
[Applause]

00:58:22,010 --> 00:58:25,819

YouTube URL: https://www.youtube.com/watch?v=643ZtjZ9SgA


