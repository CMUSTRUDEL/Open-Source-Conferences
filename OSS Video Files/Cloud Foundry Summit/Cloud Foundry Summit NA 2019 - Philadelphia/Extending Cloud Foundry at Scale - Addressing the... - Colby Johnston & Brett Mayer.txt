Title: Extending Cloud Foundry at Scale - Addressing the... - Colby Johnston & Brett Mayer
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	Extending Cloud Foundry at Scale - Addressing the Non-12-factor App Gap with CFCR - Colby Johnston & Brett Mayer, Comcast

For many years Comcast has been successfully running and managing Cloud Foundry for stateless applications and micro-services at scale. Over time, we have had to address the requirements of our non-12-factor apps as well. We have chosen Container Runtime (CFCR) platform for these stateful applications by deploying multi-site / multi-cloud environments. As an extension of Cloud Foundry Application Runtime, it allows customers to do self service deployments and scaling of application stacks and make use of additional features such as service catalog/market place, eternal DNS and persistent storage. Join us to learn and provide feedback on how we have leveraged Bosh and Concourse to efficiently and predictably deploy and manage CFCR at scale.

About Colby Johnston
I've been working in IT since 1996 working in various systems engineering roles. The previous 3 years, I've been part of the Comcast Cloud Engineering team working on Cloud platforms including CF, AWS, SDS, Kubernetes, and now CFCR. My primary role has been cloud platform engineering, automation, deployment, and management. 

My speaking experience has been with internal Comcast teams, organizations, and customers.

About Brett Mayer
Senior Cloud Engineer at Comcast responsible for engineering, deployment, management, of cloud platforms.Speaking experience has been with internal Comcast teams, organizations, and customers.

https://www.cloudfoundry.org/
Captions: 
	00:00:00,060 --> 00:00:05,040
all right everybody I think we're gonna

00:00:01,680 --> 00:00:08,880
go ahead and get started the time has

00:00:05,040 --> 00:00:10,710
come so my name is Colby Johnson and

00:00:08,880 --> 00:00:12,900
this is Brett Mayer behind me we are

00:00:10,710 --> 00:00:15,929
both from Comcast and work on a team

00:00:12,900 --> 00:00:18,690
that is responsible for various cloud

00:00:15,929 --> 00:00:21,810
platforms we've been running Cloud

00:00:18,690 --> 00:00:24,480
Foundry for many years as we now call it

00:00:21,810 --> 00:00:27,119
CF AR the application run time it's been

00:00:24,480 --> 00:00:29,189
a great pass environment for a cloud

00:00:27,119 --> 00:00:30,990
native apps and it's done very well and

00:00:29,189 --> 00:00:33,780
our customers have been very very happy

00:00:30,990 --> 00:00:35,850
with it today we hope to share with you

00:00:33,780 --> 00:00:38,640
a gap that we encountered as we work

00:00:35,850 --> 00:00:42,829
with customers over time many customers

00:00:38,640 --> 00:00:45,690
came to us with even modern applications

00:00:42,829 --> 00:00:47,629
that are very common today and and they

00:00:45,690 --> 00:00:55,410
didn't quite meet the 12 factor app

00:00:47,629 --> 00:00:57,120
requirements you guys can't hear all

00:00:55,410 --> 00:01:00,600
right how about that is that any better

00:00:57,120 --> 00:01:03,600
okay all right so many customers came to

00:01:00,600 --> 00:01:06,360
us with modern applications that they

00:01:03,600 --> 00:01:09,210
wanted to put in the cloud but they fell

00:01:06,360 --> 00:01:12,420
short of the 12 factor app requirements

00:01:09,210 --> 00:01:16,350
that are really kind of required for CF

00:01:12,420 --> 00:01:18,810
AR and as a team we recognized this we

00:01:16,350 --> 00:01:21,330
wanted to help them but really didn't

00:01:18,810 --> 00:01:24,659
have a solution or a platform to offer

00:01:21,330 --> 00:01:27,810
them so that they can enjoy the benefits

00:01:24,659 --> 00:01:30,329
of being in the cloud so today we hope

00:01:27,810 --> 00:01:33,140
to share with you what we did for these

00:01:30,329 --> 00:01:39,380
customers and how and how we helped them

00:01:33,140 --> 00:01:42,720
onboard onto the cloud now we as a team

00:01:39,380 --> 00:01:47,610
our focus really has been over the years

00:01:42,720 --> 00:01:50,729
to help developers develop faster build

00:01:47,610 --> 00:01:54,720
faster and deploy faster and we do this

00:01:50,729 --> 00:01:56,820
by removing friction and I just want to

00:01:54,720 --> 00:01:59,460
take a moment and describe what friction

00:01:56,820 --> 00:02:03,689
is friction can be a lot of different

00:01:59,460 --> 00:02:06,420
things primarily you know one of the big

00:02:03,689 --> 00:02:08,190
things is you know customer support we

00:02:06,420 --> 00:02:10,080
don't believe in opening tickets if

00:02:08,190 --> 00:02:12,959
customers need support they just simply

00:02:10,080 --> 00:02:14,750
ping us on our slack channel and we will

00:02:12,959 --> 00:02:16,920
respond

00:02:14,750 --> 00:02:21,110
immediately and give them the support

00:02:16,920 --> 00:02:24,450
they need other friction examples may be

00:02:21,110 --> 00:02:27,120
you know a DNS request or IP allocation

00:02:24,450 --> 00:02:29,160
or storage allocations all these things

00:02:27,120 --> 00:02:32,690
slow developers down they have to wait

00:02:29,160 --> 00:02:35,520
and there's delay and what we have done

00:02:32,690 --> 00:02:40,560
as part of our platform service is

00:02:35,520 --> 00:02:43,170
include using we call them add-ons to

00:02:40,560 --> 00:02:46,770
the platform to automate a lot of the

00:02:43,170 --> 00:02:50,700
pain a lot of the delay away and this

00:02:46,770 --> 00:02:53,000
has created a lot of happy developers

00:02:50,700 --> 00:02:55,260
because it's fast and it's efficient

00:02:53,000 --> 00:02:57,530
developers do not have to wait for these

00:02:55,260 --> 00:03:00,960
services and they can continue to move

00:02:57,530 --> 00:03:02,370
faster you know we do our best to take

00:03:00,960 --> 00:03:04,200
the friction away to allow the

00:03:02,370 --> 00:03:08,610
developers really to do what they do

00:03:04,200 --> 00:03:11,610
best which is write code now we've been

00:03:08,610 --> 00:03:16,110
doing CF AR for you know over five years

00:03:11,610 --> 00:03:18,840
we have over 40,000 AIS and over 19,000

00:03:16,110 --> 00:03:20,910
apps run in it so it's a very large

00:03:18,840 --> 00:03:23,610
environment and it continues to grow at

00:03:20,910 --> 00:03:26,010
a very rapid rate one of our biggest

00:03:23,610 --> 00:03:31,430
challenges really is just to simply keep

00:03:26,010 --> 00:03:31,430
up with demand of this platform now

00:03:32,510 --> 00:03:39,030
about five years ago as I said before we

00:03:35,400 --> 00:03:41,100
started out with CF AR which is one of

00:03:39,030 --> 00:03:44,550
the three what I'm going to call pillars

00:03:41,100 --> 00:03:47,990
of our cloud platforms that we offer as

00:03:44,550 --> 00:03:53,070
a group and then shortly thereafter we

00:03:47,990 --> 00:03:55,080
added concourse is to provide a CI CD

00:03:53,070 --> 00:03:55,709
type service and now really between the

00:03:55,080 --> 00:03:58,260
two

00:03:55,709 --> 00:04:00,270
this combination allowed developers to

00:03:58,260 --> 00:04:02,760
move at speeds that I don't think they

00:04:00,270 --> 00:04:08,580
had seen before and they were very very

00:04:02,760 --> 00:04:11,430
happy with this combination now recently

00:04:08,580 --> 00:04:15,540
we added a third Lake I think to this

00:04:11,430 --> 00:04:19,230
stool and and it is it's CF CR the

00:04:15,540 --> 00:04:23,040
container runtime and at this point we

00:04:19,230 --> 00:04:26,340
feel that we now offer complimentary

00:04:23,040 --> 00:04:26,630
platform services that really offer and

00:04:26,340 --> 00:04:31,240
a

00:04:26,630 --> 00:04:34,930
a wide range of application requirements

00:04:31,240 --> 00:04:38,480
you know it may seem a little bit odd

00:04:34,930 --> 00:04:41,960
out of the same group to support deploy

00:04:38,480 --> 00:04:45,050
maintain two different platforms AR vs.

00:04:41,960 --> 00:04:48,500
CR that really do have a lot of overlap

00:04:45,050 --> 00:04:51,850
in terms of features functions traits

00:04:48,500 --> 00:04:54,140
but but what we have found over the last

00:04:51,850 --> 00:04:56,210
year or so is we've been messing around

00:04:54,140 --> 00:04:59,510
with it is that they are much more

00:04:56,210 --> 00:05:03,890
complementary to each other than in

00:04:59,510 --> 00:05:09,710
competition I'll turn the time over to

00:05:03,890 --> 00:05:11,660
Brett so in order to set the stage I'm

00:05:09,710 --> 00:05:14,210
going to briefly touch upon the cloud

00:05:11,660 --> 00:05:17,210
native approach just a couple of bullet

00:05:14,210 --> 00:05:20,740
points that kind of tie into what we're

00:05:17,210 --> 00:05:23,810
doing so the first is time to market and

00:05:20,740 --> 00:05:26,510
with the cloud native approach you know

00:05:23,810 --> 00:05:28,400
that allows businesses to deploy their

00:05:26,510 --> 00:05:31,190
applications and their services much

00:05:28,400 --> 00:05:34,130
faster by reducing the amount of time

00:05:31,190 --> 00:05:35,960
that developers have to spend dealing

00:05:34,130 --> 00:05:39,470
with infrastructure so like what Colby

00:05:35,960 --> 00:05:40,940
was mentioning tickets DNS requests

00:05:39,470 --> 00:05:44,110
provisioning this and that and the other

00:05:40,940 --> 00:05:49,430
just dealing with the infrastructure and

00:05:44,110 --> 00:05:52,820
in addition to that by using CI CD

00:05:49,430 --> 00:05:55,310
practices and automating things when and

00:05:52,820 --> 00:05:57,410
where it makes sense these organizations

00:05:55,310 --> 00:06:02,020
can get their applications deployed

00:05:57,410 --> 00:06:05,540
quickly securely and predictably the

00:06:02,020 --> 00:06:08,960
second point resilience and portability

00:06:05,540 --> 00:06:14,270
so cloud native also empowers

00:06:08,960 --> 00:06:16,940
organizations to build and run or build

00:06:14,270 --> 00:06:18,650
in scale loosely coupled applications

00:06:16,940 --> 00:06:20,630
that are resilient

00:06:18,650 --> 00:06:23,170
they're easier to manage and they're

00:06:20,630 --> 00:06:26,260
able to run on any cloud provider and

00:06:23,170 --> 00:06:28,880
this in itself has a number of benefits

00:06:26,260 --> 00:06:31,190
such as reducing the application

00:06:28,880 --> 00:06:34,360
complexity so by deploying or

00:06:31,190 --> 00:06:36,440
decomposing traditional monolithic

00:06:34,360 --> 00:06:39,410
application into a set of smaller

00:06:36,440 --> 00:06:39,770
services and these smaller services can

00:06:39,410 --> 00:06:42,650
be

00:06:39,770 --> 00:06:45,770
developed much faster deployed easier

00:06:42,650 --> 00:06:48,470
maintained easier and again they're

00:06:45,770 --> 00:06:55,250
easier they run on any provider and

00:06:48,470 --> 00:06:58,220
they're portable so with regards to our

00:06:55,250 --> 00:06:59,930
group that called me an IR n like he

00:06:58,220 --> 00:07:02,349
said most the success that we've had has

00:06:59,930 --> 00:07:05,800
been related to application run time and

00:07:02,349 --> 00:07:09,949
demand keeps going for this platform and

00:07:05,800 --> 00:07:12,349
it's resulted in us creating a platform

00:07:09,949 --> 00:07:15,319
that's capable of running many of

00:07:12,349 --> 00:07:16,569
Comcast's most critical application

00:07:15,319 --> 00:07:19,909
workloads

00:07:16,569 --> 00:07:21,970
despite this we've had a number of

00:07:19,909 --> 00:07:23,990
customers that have come to us

00:07:21,970 --> 00:07:26,419
interested in moving into a cloud

00:07:23,990 --> 00:07:28,750
environment but for one reason or

00:07:26,419 --> 00:07:31,909
another we've had to turn them away and

00:07:28,750 --> 00:07:33,380
some of these reasons being perhaps

00:07:31,909 --> 00:07:37,340
their application is not fully

00:07:33,380 --> 00:07:39,469
decomposed maybe it's only got a few

00:07:37,340 --> 00:07:43,550
micro services but still primary

00:07:39,469 --> 00:07:45,889
primarily monolithic perhaps they have a

00:07:43,550 --> 00:07:48,919
very resource-intensive application

00:07:45,889 --> 00:07:51,530
requires a lot of memory or CPU such

00:07:48,919 --> 00:07:54,289
that might not fit into the application

00:07:51,530 --> 00:07:56,169
runtime environment more than likely

00:07:54,289 --> 00:07:59,440
though the reason is going to be

00:07:56,169 --> 00:08:01,699
statefulness or persistent storage and

00:07:59,440 --> 00:08:04,250
any of these requirements that I

00:08:01,699 --> 00:08:06,949
mentioned kind of fall outside the realm

00:08:04,250 --> 00:08:08,930
of 12 factor app principles and

00:08:06,949 --> 00:08:12,159
therefore aren't really suited for

00:08:08,930 --> 00:08:15,349
runtime or application runtime and

00:08:12,159 --> 00:08:17,990
because of this these customers are

00:08:15,349 --> 00:08:20,889
stuck in traditional infrastructure

00:08:17,990 --> 00:08:23,330
again VMs physicals what have you and

00:08:20,889 --> 00:08:26,300
you know that's not good for developers

00:08:23,330 --> 00:08:29,750
the application or the business again

00:08:26,300 --> 00:08:32,140
we're stuck with infrastructure so over

00:08:29,750 --> 00:08:35,390
the last 12 months or so we've been

00:08:32,140 --> 00:08:37,099
thinking about this problem and we think

00:08:35,390 --> 00:08:42,030
that we've come up with the solution

00:08:37,099 --> 00:08:45,630
which is CFC our thank you bro

00:08:42,030 --> 00:08:47,730
now Brett mentioned you know how did we

00:08:45,630 --> 00:08:51,540
fill this gap and we filled it with

00:08:47,730 --> 00:08:53,610
using CFC are now CFC are has some

00:08:51,540 --> 00:08:56,820
distinct traits about it that allow it

00:08:53,610 --> 00:09:00,360
to do very well and a few things the CF

00:08:56,820 --> 00:09:02,580
a are really does not but let's first

00:09:00,360 --> 00:09:05,690
look at the left hand column there and

00:09:02,580 --> 00:09:10,170
talk about what they have in common

00:09:05,690 --> 00:09:11,730
CF AR and CR that list you see there are

00:09:10,170 --> 00:09:14,760
common traits and we could probably

00:09:11,730 --> 00:09:17,310
argue about which platform is better

00:09:14,760 --> 00:09:18,960
what than the other but I don't think

00:09:17,310 --> 00:09:24,030
there's really any argument that they're

00:09:18,960 --> 00:09:27,690
both good at those things now in the

00:09:24,030 --> 00:09:29,340
right hand column we see CF CR and those

00:09:27,690 --> 00:09:32,760
are the distinct traits that really

00:09:29,340 --> 00:09:37,100
separate it and make it distinct from AR

00:09:32,760 --> 00:09:39,720
if an application has stateful workloads

00:09:37,100 --> 00:09:43,380
it's probably got to go somewhere else

00:09:39,720 --> 00:09:46,470
other than CFAR if it requires the

00:09:43,380 --> 00:09:50,250
maintaining of state if it requires the

00:09:46,470 --> 00:09:52,380
storing of data we would counsel that

00:09:50,250 --> 00:09:54,720
customer you know what AR is probably

00:09:52,380 --> 00:09:56,670
not the best place for you but we do

00:09:54,720 --> 00:10:01,710
have a place for you and it's called CF

00:09:56,670 --> 00:10:05,190
CR and I will say this AR does abstract

00:10:01,710 --> 00:10:08,000
at a higher level than does CFC R it

00:10:05,190 --> 00:10:11,670
abstracts more at the application level

00:10:08,000 --> 00:10:15,180
whereas CR abstracts more at the pod

00:10:11,670 --> 00:10:18,390
level and at the pod level you do need

00:10:15,180 --> 00:10:23,910
to worry about things like CPU memory

00:10:18,390 --> 00:10:27,690
and especially storage so you know

00:10:23,910 --> 00:10:30,240
unfortunately even in today we do have

00:10:27,690 --> 00:10:32,970
to still worry about things like CPU

00:10:30,240 --> 00:10:34,080
memory and storage we just simply can't

00:10:32,970 --> 00:10:36,150
forget about it

00:10:34,080 --> 00:10:39,540
if we do spend a little more time

00:10:36,150 --> 00:10:41,760
thinking about it and planning CF CR has

00:10:39,540 --> 00:10:44,070
a great way to accommodate these apps

00:10:41,760 --> 00:10:46,800
that require all these things you see

00:10:44,070 --> 00:10:49,980
here in the right hand column it does

00:10:46,800 --> 00:10:52,260
really well it's stateful workloads and

00:10:49,980 --> 00:10:55,190
computing and if your app has high

00:10:52,260 --> 00:11:02,870
compute needs great place

00:10:55,190 --> 00:11:06,370
to put it so statefulness and CFC are

00:11:02,870 --> 00:11:10,190
really you know why is it so good at

00:11:06,370 --> 00:11:13,040
stateful accommodating stateful apps

00:11:10,190 --> 00:11:15,680
really the one thing that separates it I

00:11:13,040 --> 00:11:17,389
think the most from AR is that first

00:11:15,680 --> 00:11:20,269
item in the list you see there is

00:11:17,389 --> 00:11:22,010
persistent volumes persistent volume

00:11:20,269 --> 00:11:25,490
claims we're just going to call it a PVC

00:11:22,010 --> 00:11:29,990
from here on out just because it's

00:11:25,490 --> 00:11:32,930
easier to say now I persist a PVC has

00:11:29,990 --> 00:11:34,910
the ability to store data and this is a

00:11:32,930 --> 00:11:41,630
very standard kubernetes feature

00:11:34,910 --> 00:11:44,360
function and the lifecycle let's talk

00:11:41,630 --> 00:11:47,570
about the PVC for a second the lifecycle

00:11:44,360 --> 00:11:50,329
of the PVC is independent of a

00:11:47,570 --> 00:11:53,149
deployment or a pod you can scale your

00:11:50,329 --> 00:11:55,310
pot up or you Scarry scale your

00:11:53,149 --> 00:11:57,589
deployment up you can even delete the

00:11:55,310 --> 00:11:58,760
pod in that deployment and you're going

00:11:57,589 --> 00:12:02,029
to be able to keep your data because

00:11:58,760 --> 00:12:08,750
your data is sitting on a PVC which is

00:12:02,029 --> 00:12:11,480
completely independent of a pod now the

00:12:08,750 --> 00:12:13,459
great thing about taking this little

00:12:11,480 --> 00:12:15,589
extra time to define your storage on

00:12:13,459 --> 00:12:17,870
kubernetes is you do it one time once

00:12:15,589 --> 00:12:21,260
you do it kubernetes really takes care

00:12:17,870 --> 00:12:22,820
of the rest it knows where your pod is

00:12:21,260 --> 00:12:24,920
running and it's going to take that

00:12:22,820 --> 00:12:27,980
volume and mount it to it it could be

00:12:24,920 --> 00:12:29,690
running on any host or VM in that

00:12:27,980 --> 00:12:32,420
cluster it'll find it and mount your

00:12:29,690 --> 00:12:35,209
storage there it's a great thing you do

00:12:32,420 --> 00:12:36,800
it once and forget about it but it

00:12:35,209 --> 00:12:40,279
really actually gets a little bit better

00:12:36,800 --> 00:12:46,610
than this if you combine two ideas the

00:12:40,279 --> 00:12:48,470
idea of a stateful set and a PVC but

00:12:46,610 --> 00:12:50,329
before we describe the benefits of it

00:12:48,470 --> 00:12:54,760
let's step back and talk about what the

00:12:50,329 --> 00:12:58,010
staple set is now a stateful set is a

00:12:54,760 --> 00:13:01,160
deployment of a set of pods I kind of

00:12:58,010 --> 00:13:03,410
like to think about it as a cluster an

00:13:01,160 --> 00:13:06,589
application cluster deployed in

00:13:03,410 --> 00:13:07,510
kubernetes and if you add the concept of

00:13:06,589 --> 00:13:10,930
a PVC

00:13:07,510 --> 00:13:12,430
to a cluster inside kubernetes you get

00:13:10,930 --> 00:13:15,630
something very powerful you get a

00:13:12,430 --> 00:13:20,920
cluster that you can scale on demand

00:13:15,630 --> 00:13:25,140
that can store data as well you know

00:13:20,920 --> 00:13:29,080
that that is a great thing

00:13:25,140 --> 00:13:33,160
now we've observed that over the time

00:13:29,080 --> 00:13:35,110
that we've been using CF CR that there's

00:13:33,160 --> 00:13:37,510
some common apps that take advantages of

00:13:35,110 --> 00:13:39,430
this combination of both stateful sets

00:13:37,510 --> 00:13:42,700
and PVCs

00:13:39,430 --> 00:13:47,650
examples of that might be databases like

00:13:42,700 --> 00:13:50,350
 and and cockroach or messaging you

00:13:47,650 --> 00:13:53,550
know apps like Kafka these are all

00:13:50,350 --> 00:13:56,260
running in our environment right now I

00:13:53,550 --> 00:13:59,440
did want to take a moment we do have a

00:13:56,260 --> 00:14:01,750
snippet of a deployment manifest for a

00:13:59,440 --> 00:14:03,100
stateful set so I didn't mention it's a

00:14:01,750 --> 00:14:05,260
little harder takes a little more time

00:14:03,100 --> 00:14:08,530
and thought but it really isn't that bad

00:14:05,260 --> 00:14:10,690
if we start at the top here we see this

00:14:08,530 --> 00:14:12,460
stateful set we'll have five replicas

00:14:10,690 --> 00:14:15,520
all that means it's it's going to deploy

00:14:12,460 --> 00:14:17,290
five pots it's going to employ a kafka

00:14:15,520 --> 00:14:20,560
image this is going to be a Kafka

00:14:17,290 --> 00:14:24,160
cluster if we go down further we see

00:14:20,560 --> 00:14:26,260
that there is a volume mount that bar

00:14:24,160 --> 00:14:27,970
Lib Kafka that we see there that is

00:14:26,260 --> 00:14:30,520
where we're going to keep and store our

00:14:27,970 --> 00:14:32,230
data below that we see a volume claim

00:14:30,520 --> 00:14:36,400
template that's really where we define

00:14:32,230 --> 00:14:39,430
the PBC you see it's 300 gig in size so

00:14:36,400 --> 00:14:43,330
each one of those five pods replicas

00:14:39,430 --> 00:14:46,900
will get its own unique storage falling

00:14:43,330 --> 00:14:48,370
that will attach to it and if later we

00:14:46,900 --> 00:14:51,070
get down the road and it turns out you

00:14:48,370 --> 00:14:54,160
know what we really needed seven pots or

00:14:51,070 --> 00:14:57,460
seven replicas we scale it up it creates

00:14:54,160 --> 00:15:01,600
two more volumes and attaches it to

00:14:57,460 --> 00:15:03,340
those two additional pots you know

00:15:01,600 --> 00:15:05,830
things like that are really easy

00:15:03,340 --> 00:15:07,210
kubernetes and there's a lot of value

00:15:05,830 --> 00:15:10,060
there and it's definitely well worth

00:15:07,210 --> 00:15:12,940
taking the time to figure these things

00:15:10,060 --> 00:15:15,240
out and like I said it's it's not that

00:15:12,940 --> 00:15:15,240
bad

00:15:18,490 --> 00:15:25,040
okay Colby just discussed the gap that

00:15:21,950 --> 00:15:27,500
CFC our fills and I'm going to talk a

00:15:25,040 --> 00:15:31,790
little bit about the tool set that we

00:15:27,500 --> 00:15:34,490
use to deploy our CFC our clusters so

00:15:31,790 --> 00:15:37,550
the Brawn and the brains here so we

00:15:34,490 --> 00:15:40,220
consider Bosch to be the brain and

00:15:37,550 --> 00:15:43,700
concourse or I'm sorry Bosch to be the

00:15:40,220 --> 00:15:44,930
brawn and concours to be the brain out

00:15:43,700 --> 00:15:47,870
of this tool set

00:15:44,930 --> 00:15:50,960
so Bosch is really does the heavy

00:15:47,870 --> 00:15:54,700
lifting so it manages that VM life cycle

00:15:50,960 --> 00:15:57,140
the VMs that make up the base of this

00:15:54,700 --> 00:16:01,340
CFC are cluster the masters and the

00:15:57,140 --> 00:16:04,220
workers it also manages the software

00:16:01,340 --> 00:16:06,290
releases that in this case make up CFC R

00:16:04,220 --> 00:16:10,880
so that's going to be kubernetes @zd

00:16:06,290 --> 00:16:14,060
docker things like that and besides that

00:16:10,880 --> 00:16:18,770
a Bosch also ties in very nicely with C

00:16:14,060 --> 00:16:21,980
ICD in our case concourse speaking of

00:16:18,770 --> 00:16:25,430
concours that's the brain so that brings

00:16:21,980 --> 00:16:28,250
all these tools together so Bosch vault

00:16:25,430 --> 00:16:31,100
and github and by bringing these

00:16:28,250 --> 00:16:33,220
together we define our deployments and

00:16:31,100 --> 00:16:38,020
then we put that into a pipeline and

00:16:33,220 --> 00:16:41,990
we're able to run this pipeline and

00:16:38,020 --> 00:16:44,720
deploy our clusters with repetition

00:16:41,990 --> 00:16:48,020
there's there's going to be no change in

00:16:44,720 --> 00:16:51,290
deploying those and very little human

00:16:48,020 --> 00:16:54,650
intervention so less prone to to

00:16:51,290 --> 00:16:57,350
Fivefinger mistakes and things like that

00:16:54,650 --> 00:17:00,730
vault is our centralized key management

00:16:57,350 --> 00:17:03,080
so that stores our certificates tokens

00:17:00,730 --> 00:17:06,350
super-secret passwords all that stuff

00:17:03,080 --> 00:17:08,840
things you don't want exposed in github

00:17:06,350 --> 00:17:13,970
or scripts or manifests anything like

00:17:08,840 --> 00:17:17,180
that and then github that's used

00:17:13,970 --> 00:17:19,130
extensively by concourse so any any

00:17:17,180 --> 00:17:21,410
repositories that are defined in our

00:17:19,130 --> 00:17:23,810
deployments concourse is going to pull

00:17:21,410 --> 00:17:26,090
that in whether its source code or

00:17:23,810 --> 00:17:30,450
manifest whatever and it's going to use

00:17:26,090 --> 00:17:34,120
all these tools and build that deploying

00:17:30,450 --> 00:17:37,240
so with regards to the deployment we

00:17:34,120 --> 00:17:40,480
keep those as vanilla as we possibly can

00:17:37,240 --> 00:17:43,030
so even across cloud providers order its

00:17:40,480 --> 00:17:45,970
on Prem or off Prem there's very little

00:17:43,030 --> 00:17:49,150
difference in what our deployment

00:17:45,970 --> 00:17:51,490
manifest look like and as platform

00:17:49,150 --> 00:17:53,920
engineers for us this makes things a lot

00:17:51,490 --> 00:17:56,590
easier as the configs are smaller

00:17:53,920 --> 00:18:02,530
they're easier to maintain and easier to

00:17:56,590 --> 00:18:05,920
understand and in addition to this so we

00:18:02,530 --> 00:18:07,750
aim to keep our clusters CFC our

00:18:05,920 --> 00:18:11,559
clusters all running at the current

00:18:07,750 --> 00:18:13,000
release the current release cycle of CFC

00:18:11,559 --> 00:18:17,800
are is about every three to four weeks

00:18:13,000 --> 00:18:20,920
and in order for us to maintain that we

00:18:17,800 --> 00:18:23,470
need to have a stable and a repeatable

00:18:20,920 --> 00:18:26,140
process and by using these tools

00:18:23,470 --> 00:18:28,330
specifically Concours it allows us to do

00:18:26,140 --> 00:18:31,450
that so we just do a little bit of

00:18:28,330 --> 00:18:34,570
update to our deployment regarding the

00:18:31,450 --> 00:18:37,710
CFC our version we want we check that in

00:18:34,570 --> 00:18:40,059
the github we run the pipeline and

00:18:37,710 --> 00:18:42,190
regardless of the environment or cloud

00:18:40,059 --> 00:18:47,850
provider kind of course we'll run that

00:18:42,190 --> 00:18:51,190
and manage the deployment in addition to

00:18:47,850 --> 00:18:54,220
just deploying clusters and upgrades

00:18:51,190 --> 00:18:57,220
we've also been able to leverage these

00:18:54,220 --> 00:18:58,929
tools to build our own patches for

00:18:57,220 --> 00:19:02,309
instance last year there was a

00:18:58,929 --> 00:19:04,750
kubernetes vulnerability we were able to

00:19:02,309 --> 00:19:08,290
build this patch deploy it to our

00:19:04,750 --> 00:19:13,420
clusters 24 hours before the official

00:19:08,290 --> 00:19:15,670
release was published on github so the

00:19:13,420 --> 00:19:20,470
flexibility that these tools give us in

00:19:15,670 --> 00:19:23,250
addition to the platform itself really

00:19:20,470 --> 00:19:27,280
allows us to move fast stay secure and

00:19:23,250 --> 00:19:30,030
just keep everything stable and in

00:19:27,280 --> 00:19:30,030
cookie-cutter

00:19:30,160 --> 00:19:36,550
so this is just a quick snip of what the

00:19:35,140 --> 00:19:38,650
deployment looks like from a Bosch

00:19:36,550 --> 00:19:41,980
perspective it's really just one line

00:19:38,650 --> 00:19:45,940
there you can see we prioritize

00:19:41,980 --> 00:19:49,560
everything nothing is hard-coded we try

00:19:45,940 --> 00:19:55,300
and keep as few ops files as we can and

00:19:49,560 --> 00:19:58,210
again keep everything simple this is

00:19:55,300 --> 00:20:01,270
just the snip from the pipeline itself

00:19:58,210 --> 00:20:04,450
and the reason I got this is because it

00:20:01,270 --> 00:20:08,110
shows how all the three tools Bosch get

00:20:04,450 --> 00:20:10,960
and vault are used in the pipeline so

00:20:08,110 --> 00:20:13,120
we're referencing two repositories up

00:20:10,960 --> 00:20:15,460
there that get CFC our deploy that's a

00:20:13,120 --> 00:20:19,360
private repository that we manage that

00:20:15,460 --> 00:20:22,210
contains our manifest files and and

00:20:19,360 --> 00:20:24,550
specific deployment information the Kubo

00:20:22,210 --> 00:20:28,230
deployment that's the official CFC our

00:20:24,550 --> 00:20:30,940
release used to be referred to as Kubo

00:20:28,230 --> 00:20:33,400
under the params list there the first

00:20:30,940 --> 00:20:35,470
three those are parameters used by Bosch

00:20:33,400 --> 00:20:37,570
so that's going to define the name of

00:20:35,470 --> 00:20:40,920
the cluster the ayahs that it's in the

00:20:37,570 --> 00:20:44,470
environment and then the last three are

00:20:40,920 --> 00:20:48,040
vault parameters and this is a good

00:20:44,470 --> 00:20:50,170
example of how concourse is able to dip

00:20:48,040 --> 00:20:52,810
in the vault get whatever secrets it

00:20:50,170 --> 00:20:55,510
needs and populate them into the

00:20:52,810 --> 00:20:57,370
deployment so none of this stuff is you

00:20:55,510 --> 00:21:02,430
know any any of this secret information

00:20:57,370 --> 00:21:02,430
is not exposed into plain text

00:21:04,809 --> 00:21:11,510
so where are we at right now with CFC

00:21:08,090 --> 00:21:14,809
are well we are still in POC but we do

00:21:11,510 --> 00:21:17,120
plan to go production very soon we have

00:21:14,809 --> 00:21:20,539
deployed it on-premise within vSphere

00:21:17,120 --> 00:21:23,500
and we've also deployed it into our AWS

00:21:20,539 --> 00:21:28,309
which is our primary cloud provider a

00:21:23,500 --> 00:21:30,799
Comcast one of the the advantages of CFC

00:21:28,309 --> 00:21:35,120
are that our customers just love is the

00:21:30,799 --> 00:21:37,880
fact that the user experience for our

00:21:35,120 --> 00:21:40,340
developers is the same regardless of

00:21:37,880 --> 00:21:42,950
which cloud provider it's in if our

00:21:40,340 --> 00:21:47,240
developers need a load balancer or they

00:21:42,950 --> 00:21:49,789
need storage or an IP address they would

00:21:47,240 --> 00:21:53,169
define that exactly the same way whether

00:21:49,789 --> 00:21:55,610
it's an on-prem or an off prem

00:21:53,169 --> 00:21:58,580
deployment it just simply doesn't matter

00:21:55,610 --> 00:22:00,710
to them it looks feels it smells it's

00:21:58,580 --> 00:22:03,649
it's all the same they use exactly the

00:22:00,710 --> 00:22:06,559
same command or exactly the same

00:22:03,649 --> 00:22:10,460
yamo definitions in their code you could

00:22:06,559 --> 00:22:13,750
take what they used on Prem and deploy

00:22:10,460 --> 00:22:15,919
that same thing off from an AWS and

00:22:13,750 --> 00:22:20,330
guaranteed it will work because all of

00:22:15,919 --> 00:22:23,080
that is abstracted away with CFC R now

00:22:20,330 --> 00:22:25,640
this kind of goes back to the concept of

00:22:23,080 --> 00:22:28,820
reducing friction this is big our

00:22:25,640 --> 00:22:31,880
developers can concentrate on their code

00:22:28,820 --> 00:22:33,380
in their application rather than trying

00:22:31,880 --> 00:22:35,960
to figure out all the individual

00:22:33,380 --> 00:22:40,490
differences in intricacies of the

00:22:35,960 --> 00:22:43,880
various cloud providers out there so it

00:22:40,490 --> 00:22:47,179
really has been a big win in that sense

00:22:43,880 --> 00:22:49,039
for us as well as them now up until this

00:22:47,179 --> 00:22:51,549
point we've talked primarily about the

00:22:49,039 --> 00:22:54,770
benefits to our customers the developers

00:22:51,549 --> 00:22:58,549
by utilizing CFC are but I did want to

00:22:54,770 --> 00:23:02,720
take a moment and talk about the effect

00:22:58,549 --> 00:23:04,190
that choosing CFC r has had on our team

00:23:02,720 --> 00:23:06,890
what the benefit has been to the

00:23:04,190 --> 00:23:08,809
platform team and when we started out in

00:23:06,890 --> 00:23:10,850
container orchestration we started out

00:23:08,809 --> 00:23:12,770
with a different platform and this

00:23:10,850 --> 00:23:16,920
platform required us to manage

00:23:12,770 --> 00:23:20,130
bare-metal various operating systems

00:23:16,920 --> 00:23:23,220
and tons of ansible rolls and play books

00:23:20,130 --> 00:23:25,800
and in many of the tools in fact almost

00:23:23,220 --> 00:23:27,870
all the tools were separate and distinct

00:23:25,800 --> 00:23:30,750
they were not in common with the tool

00:23:27,870 --> 00:23:33,120
said that the other half of our team was

00:23:30,750 --> 00:23:36,150
using for cfar and really what this did

00:23:33,120 --> 00:23:39,210
was had divided our team in two you

00:23:36,150 --> 00:23:42,960
there did kubernetes where you did cfar

00:23:39,210 --> 00:23:45,570
but not really so much both by switching

00:23:42,960 --> 00:23:48,390
to CFC are now we do have a lot in

00:23:45,570 --> 00:23:50,730
common with with CFA are that the tool

00:23:48,390 --> 00:23:54,390
sets are are very similar if not the

00:23:50,730 --> 00:23:58,950
same in most cases for instance we

00:23:54,390 --> 00:24:02,250
leverage Bosch for configuration

00:23:58,950 --> 00:24:06,570
management and VM deployment lifecycle

00:24:02,250 --> 00:24:09,780
management for VMs and and by using this

00:24:06,570 --> 00:24:14,700
common tool it's created synergy it's

00:24:09,780 --> 00:24:17,070
allowed us to share common practices and

00:24:14,700 --> 00:24:19,230
architectures and also the the skill

00:24:17,070 --> 00:24:23,730
that we've gained can be leveraged

00:24:19,230 --> 00:24:28,470
across both CF AR and CR but it really

00:24:23,730 --> 00:24:31,590
hasn't been without its challenges now

00:24:28,470 --> 00:24:33,210
this slide here depicts that challenge

00:24:31,590 --> 00:24:34,950
and I say this slide is a little bit

00:24:33,210 --> 00:24:37,920
graphic there's a lot of death and

00:24:34,950 --> 00:24:39,600
destruction going on there but what it

00:24:37,920 --> 00:24:41,700
does do it's it's a really good

00:24:39,600 --> 00:24:44,070
depiction of the learning curve for

00:24:41,700 --> 00:24:48,090
Bosch if you haven't had experience with

00:24:44,070 --> 00:24:50,010
it before which I had not and so but but

00:24:48,090 --> 00:24:53,160
over a little using a little time and

00:24:50,010 --> 00:24:55,230
effort I think for the most part we have

00:24:53,160 --> 00:24:57,150
been able to get up over the hump and

00:24:55,230 --> 00:24:59,310
we're all up on top of the mountain

00:24:57,150 --> 00:25:02,180
there and we're in that DC NiCad

00:24:59,310 --> 00:25:05,670
clearing a path for higher team

00:25:02,180 --> 00:25:10,070
efficiency so it's been a good thing for

00:25:05,670 --> 00:25:10,070
our team and I think we're better for it

00:25:12,200 --> 00:25:19,740
so we've gone through and described what

00:25:16,560 --> 00:25:23,100
CFC are is the gaps that it fills how we

00:25:19,740 --> 00:25:25,890
deploy it and all that is fine and great

00:25:23,100 --> 00:25:27,420
but we didn't want to stop there we

00:25:25,890 --> 00:25:30,750
wanted to provide more than just

00:25:27,420 --> 00:25:34,110
kubernetes as a service we really wanted

00:25:30,750 --> 00:25:36,510
to give the developer are ready to use

00:25:34,110 --> 00:25:40,700
turnkey environment again reducing

00:25:36,510 --> 00:25:44,460
friction so we took it upon ourselves to

00:25:40,700 --> 00:25:46,980
bacon some common features or services

00:25:44,460 --> 00:25:49,770
that most developers going to need so

00:25:46,980 --> 00:25:53,280
things like certificate management DNS

00:25:49,770 --> 00:25:57,630
management ingress and egress networking

00:25:53,280 --> 00:25:59,910
as well as built-in integrations to some

00:25:57,630 --> 00:26:02,760
Comcast infrastructure such as logging

00:25:59,910 --> 00:26:04,830
as a service monitoring as a service so

00:26:02,760 --> 00:26:09,630
again to reduce that friction reduce

00:26:04,830 --> 00:26:11,370
hurdles tickets etc and so that's great

00:26:09,630 --> 00:26:14,630
for the developer and that also

00:26:11,370 --> 00:26:17,790
developer helps us as platform engineers

00:26:14,630 --> 00:26:20,480
because it again provides us this cookie

00:26:17,790 --> 00:26:23,340
cutter approach to it we're not

00:26:20,480 --> 00:26:25,410
installing things post-deployment for a

00:26:23,340 --> 00:26:27,720
developer but not on that cluster or

00:26:25,410 --> 00:26:30,210
maybe on this one everything is the same

00:26:27,720 --> 00:26:34,250
so that leads to easier easier

00:26:30,210 --> 00:26:37,530
troubleshooting in some instances less

00:26:34,250 --> 00:26:40,110
customization and overall it gives us

00:26:37,530 --> 00:26:42,900
more time to continue to develop new

00:26:40,110 --> 00:26:46,440
services and new features for the

00:26:42,900 --> 00:26:49,380
developer and allows us to streamline

00:26:46,440 --> 00:26:52,760
our approach and ultimately give an

00:26:49,380 --> 00:26:52,760
improved customer experience

00:26:54,690 --> 00:27:01,050
so we want to shift gears just a little

00:26:57,070 --> 00:27:03,910
bit here and I think finish by

00:27:01,050 --> 00:27:07,900
emphasizing Comcast commitment to open

00:27:03,910 --> 00:27:10,150
source Comcast we are big believers in

00:27:07,900 --> 00:27:12,430
open source we're not only users of it

00:27:10,150 --> 00:27:14,590
but we also like to contribute back to

00:27:12,430 --> 00:27:16,660
it and here on the slide we do have a

00:27:14,590 --> 00:27:20,020
couple of examples of recent

00:27:16,660 --> 00:27:22,990
contributions back to the community I'm

00:27:20,020 --> 00:27:25,050
a patchy traffic control coober healthy

00:27:22,990 --> 00:27:28,450
and there on the bottom there is a URL

00:27:25,050 --> 00:27:30,340
that you can go to if you like to you

00:27:28,450 --> 00:27:34,150
know see that or even you know clone it

00:27:30,340 --> 00:27:35,860
and try it out and give it a spin we'd

00:27:34,150 --> 00:27:38,590
also like to invite you to stop by our

00:27:35,860 --> 00:27:41,440
booth and get some free schwag

00:27:38,590 --> 00:27:45,820
and also we are hiring and always

00:27:41,440 --> 00:27:48,130
looking for good people and we do value

00:27:45,820 --> 00:27:52,230
diversity and inclusion we do think it

00:27:48,130 --> 00:27:54,730
makes us a stronger and better company

00:27:52,230 --> 00:27:57,460
with that said we've come to the end of

00:27:54,730 --> 00:28:00,220
our presentation and I think there are

00:27:57,460 --> 00:28:02,470
at least a couple minutes left and we'll

00:28:00,220 --> 00:28:02,980
open the time up for any questions you

00:28:02,470 --> 00:28:16,440
might have

00:28:02,980 --> 00:28:16,440
thank you you sir

00:28:26,570 --> 00:28:29,650
[Music]

00:28:33,970 --> 00:28:40,640
you know I say we are the platform team

00:28:37,130 --> 00:28:42,620
and do work very closely with those that

00:28:40,640 --> 00:28:44,510
are deploying those but we don't really

00:28:42,620 --> 00:28:50,650
dictate to them how they're going to do

00:28:44,510 --> 00:28:50,650
it and a lot of patient oftentimes but

00:28:51,580 --> 00:28:59,240
just by nature of putting those into

00:28:54,920 --> 00:29:01,820
kubernetes with our docker hub upgrades

00:28:59,240 --> 00:29:05,620
are very easy customers do not have to

00:29:01,820 --> 00:29:09,020
worry about OS patching for sure and

00:29:05,620 --> 00:29:11,600
when we patch our platform we can do

00:29:09,020 --> 00:29:15,080
that in a rolling fashion that has zero

00:29:11,600 --> 00:29:18,410
impact to their application which is

00:29:15,080 --> 00:29:20,830
which is great but I don't know that I

00:29:18,410 --> 00:29:24,559
have a full answer for you on you know

00:29:20,830 --> 00:29:27,740
what it looks like to maintain Kafka day

00:29:24,559 --> 00:29:30,380
- I think we could probably find you

00:29:27,740 --> 00:29:32,809
somebody that could speak a little bit

00:29:30,380 --> 00:29:34,309
better - that that's closer to it did

00:29:32,809 --> 00:29:36,710
you have anything to add to that Bret or

00:29:34,309 --> 00:29:38,620
well yeah I mean we have a few

00:29:36,710 --> 00:29:42,140
developers on our team that are more

00:29:38,620 --> 00:29:45,770
geared towards recommendations on how to

00:29:42,140 --> 00:29:47,390
configure things like Kafka so we could

00:29:45,770 --> 00:29:49,700
certainly get you in touch with those

00:29:47,390 --> 00:29:51,850
folks if you got any deeper questions on

00:29:49,700 --> 00:29:51,850
that

00:29:53,240 --> 00:29:56,240
burn

00:30:11,460 --> 00:30:15,290
[Laughter]

00:30:22,600 --> 00:30:27,010
there another question yes sir

00:30:46,550 --> 00:30:52,430
yeah we're gonna dictate the release and

00:30:49,550 --> 00:30:53,930
patch cycle of the platform and we will

00:30:52,430 --> 00:30:55,070
work with them and say hey we're going

00:30:53,930 --> 00:30:57,710
to upgrade and you need to make sure

00:30:55,070 --> 00:30:59,630
your application is compliant with what

00:30:57,710 --> 00:31:02,750
we're doing but we're not going to

00:30:59,630 --> 00:31:06,440
dictate a particular release or patch

00:31:02,750 --> 00:31:11,930
for a you know a an application

00:31:06,440 --> 00:31:25,250
generally speaking all right anything

00:31:11,930 --> 00:31:28,960
else okay oh one more those are that's

00:31:25,250 --> 00:31:31,670
part of CFC our so a new CFC our release

00:31:28,960 --> 00:31:33,680
may include it probably won't be the

00:31:31,670 --> 00:31:37,610
latest and greatest kubernetes it might

00:31:33,680 --> 00:31:39,410
be like like a minor release back but

00:31:37,610 --> 00:31:43,300
that's all dictated and the CFC our

00:31:39,410 --> 00:31:43,300
release as to what version of kubernetes

00:31:43,780 --> 00:31:48,670
does that answer your question okay

00:31:52,370 --> 00:31:57,110
no we could I mean we could easily roll

00:31:55,010 --> 00:32:04,580
back and we've get rolled ahead - sure

00:31:57,110 --> 00:32:07,039
yeah but we don't make it a habit all

00:32:04,580 --> 00:32:08,570
right I think we're at the end of our

00:32:07,039 --> 00:32:10,190
time so if there are any further

00:32:08,570 --> 00:32:12,049
questions we're gonna be here for a

00:32:10,190 --> 00:32:13,580
while so please feel free to come on up

00:32:12,049 --> 00:32:16,190
and talk to us

00:32:13,580 --> 00:32:16,190

YouTube URL: https://www.youtube.com/watch?v=H7KReZGqgmU


