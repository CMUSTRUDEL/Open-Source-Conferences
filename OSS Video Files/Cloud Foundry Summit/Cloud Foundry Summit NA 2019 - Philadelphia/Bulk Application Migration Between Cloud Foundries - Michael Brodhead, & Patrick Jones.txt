Title: Bulk Application Migration Between Cloud Foundries - Michael Brodhead, & Patrick Jones
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	Bulk Application Migration Between Cloud Foundries - Michael Brodhead, & Patrick Jones, Stark & Wayne

You have 30 days to migrate hundreds of applications from one Cloud Foundry environment to another. You donâ€™t know what any of the apps are, nor how they work. How will you take inventory of what is running? How will you move these apps to the new site? How do you know whether they have been migrated properly? Believe it or not, this is all manageable. Learn what to do from a team which has done the job many times and lived to tell about it. Ready? Go.

About Michael Brodhead
Michael Brodhead, MKB, is a Cloud Security Architect at Stark & Wayne. He has over twenty years of experience in information security and software development. MKB has worked for financial giants, tiny startups, and everything in between. At Stark & Wayne, he helps clients secure and automate large-scale cloud deployments. In addition to speaking at CF Summit and other tech conferences, MKB frequently speaks to activist groups about privacy and technology in San Francisco.

About Patrick Jones
Patrick Jones is a Cloud Engineer at Stark & Wayne. Patrick spends most of his time working on open source projects like SHIELD and Genesis as well as building and maintaining large-scale open source Cloud Foundry environments. Patrick has also spoken at and taught hands-on labs at CF Summit Boston 2018.

https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:04,200
greetings programs my name is Michael

00:00:02,700 --> 00:00:09,780
Brodhead with Stark and Wayne this is my

00:00:04,200 --> 00:00:13,380
colleague Pat Jones once upon a time in

00:00:09,780 --> 00:00:17,250
a faraway land called the cloud a few of

00:00:13,380 --> 00:00:19,109
us sat down with a new client I have

00:00:17,250 --> 00:00:20,400
three foundations said the client and on

00:00:19,109 --> 00:00:23,310
these foundations I'm running some apps

00:00:20,400 --> 00:00:24,810
and I need you to move all three

00:00:23,310 --> 00:00:27,570
foundations and the apps that are

00:00:24,810 --> 00:00:29,930
running on them to my shiny new data

00:00:27,570 --> 00:00:29,930
center

00:00:30,800 --> 00:00:38,550
well I enquired how many apps are we

00:00:34,020 --> 00:00:41,340
talking about well came the reply we

00:00:38,550 --> 00:00:44,070
don't actually know for sure but across

00:00:41,340 --> 00:00:47,219
the three foundations it's it's on the

00:00:44,070 --> 00:00:49,440
order of several hundred apps and I

00:00:47,219 --> 00:00:52,440
thought to myself gee that's a lot of

00:00:49,440 --> 00:00:53,789
dev teams to coordinate with and they

00:00:52,440 --> 00:00:57,890
don't even have hard numbers for how

00:00:53,789 --> 00:01:04,110
many apps we're looking at so I paused I

00:00:57,890 --> 00:01:06,900
rolled up my sleeves and I said you're

00:01:04,110 --> 00:01:10,710
in good hands we can do that in six

00:01:06,900 --> 00:01:16,189
months now the people who know this

00:01:10,710 --> 00:01:19,950
story are laughing no no said the client

00:01:16,189 --> 00:01:21,930
you don't understand we have already

00:01:19,950 --> 00:01:28,159
given up the lease on that data center

00:01:21,930 --> 00:01:31,470
you have 60 days because in 61 days

00:01:28,159 --> 00:01:33,600
literally people are showing up to start

00:01:31,470 --> 00:01:37,110
pulling cables physically unwrapping

00:01:33,600 --> 00:01:39,329
servers that facility is shutting down

00:01:37,110 --> 00:01:46,890
we have a hard deadline

00:01:39,329 --> 00:01:48,979
I grew concerned pupils dilated my blood

00:01:46,890 --> 00:01:53,130
pressure went up respiration increased

00:01:48,979 --> 00:01:54,720
cortisol levels went up and as we dug

00:01:53,130 --> 00:01:56,700
into the details it became apparent that

00:01:54,720 --> 00:01:59,430
we didn't actually even have 60 days

00:01:56,700 --> 00:02:01,439
that when all was said and done what we

00:01:59,430 --> 00:02:05,520
really had was about 30 days in which to

00:02:01,439 --> 00:02:10,849
do the work which brings us to the hero

00:02:05,520 --> 00:02:10,849
of our story bulk application migration

00:02:12,450 --> 00:02:15,370
all right

00:02:14,110 --> 00:02:17,350
so let's talk about a few assumptions

00:02:15,370 --> 00:02:19,780
we're gonna make to not only scope what

00:02:17,350 --> 00:02:21,490
we're gonna talk about today but also to

00:02:19,780 --> 00:02:23,140
give you an idea of why we're doing what

00:02:21,490 --> 00:02:25,030
we're doing why we're not doing what

00:02:23,140 --> 00:02:26,470
we're not doing and things along those

00:02:25,030 --> 00:02:28,120
lines so these are gonna assume that

00:02:26,470 --> 00:02:29,620
both the foundations are using internal

00:02:28,120 --> 00:02:32,140
blob stores if you're using something

00:02:29,620 --> 00:02:33,900
like s3 for your application droplets

00:02:32,140 --> 00:02:37,300
this is gonna be a little simpler but

00:02:33,900 --> 00:02:38,650
yeah so internal blob stores we're not

00:02:37,300 --> 00:02:40,960
gonna be talking although it's really

00:02:38,650 --> 00:02:42,850
important for migrating foundations to

00:02:40,960 --> 00:02:44,650
talk about application services and

00:02:42,850 --> 00:02:46,150
service data that's kind of its own

00:02:44,650 --> 00:02:48,940
thing it's a almost the whole talks

00:02:46,150 --> 00:02:50,200
worth of material so important but we're

00:02:48,940 --> 00:02:52,810
not going to talk about that today as

00:02:50,200 --> 00:02:54,520
well we have to assume connectivity

00:02:52,810 --> 00:02:57,280
between both the new foundations and the

00:02:54,520 --> 00:02:59,110
old foundation not only between those

00:02:57,280 --> 00:03:02,140
two sites but also to the original

00:02:59,110 --> 00:03:04,420
application service data as well and we

00:03:02,140 --> 00:03:06,430
say commit connectivity what we mean is

00:03:04,420 --> 00:03:09,640
we basically we need to do some file

00:03:06,430 --> 00:03:15,070
transfer usually over SSH between the

00:03:09,640 --> 00:03:17,170
two sites all right so the first thing

00:03:15,070 --> 00:03:19,060
we do before we can migrate anything we

00:03:17,170 --> 00:03:21,790
need I mean we need our new foundation

00:03:19,060 --> 00:03:26,320
so in this case we created a new boss

00:03:21,790 --> 00:03:27,970
for Genesis and we the big thing for

00:03:26,320 --> 00:03:29,980
going them between two foundations like

00:03:27,970 --> 00:03:31,690
this you need to minimize the entropy

00:03:29,980 --> 00:03:34,630
you have so you need things like

00:03:31,690 --> 00:03:36,100
versions between cloud foundries sizes

00:03:34,630 --> 00:03:37,540
of code foundries you need these to be

00:03:36,100 --> 00:03:39,490
similar you don't want to move as many

00:03:37,540 --> 00:03:42,820
you don't need a lot of moving parts and

00:03:39,490 --> 00:03:45,760
make things an already process that even

00:03:42,820 --> 00:03:47,920
harder so basically we want to basically

00:03:45,760 --> 00:03:51,070
copy our manifest change the details we

00:03:47,920 --> 00:03:52,240
need to about networking for Genesis

00:03:51,070 --> 00:03:54,940
stuff we need to change the directory

00:03:52,240 --> 00:03:58,540
details and basically we're gonna kick

00:03:54,940 --> 00:04:00,370
that off so we've got our brand new

00:03:58,540 --> 00:04:02,470
green fielded environment we've got our

00:04:00,370 --> 00:04:03,970
old agreed our old environment with all

00:04:02,470 --> 00:04:06,070
our applications and we need to start

00:04:03,970 --> 00:04:08,350
making a game plan of how we're going to

00:04:06,070 --> 00:04:12,400
actually migrate those applications in

00:04:08,350 --> 00:04:15,130
one fell swoop so the big picture when

00:04:12,400 --> 00:04:17,859
it comes through migrating lots of CF

00:04:15,130 --> 00:04:20,410
applications at once there's two big

00:04:17,859 --> 00:04:23,440
operations that we need to do we need to

00:04:20,410 --> 00:04:25,510
migrate and sink our blob stores

00:04:23,440 --> 00:04:27,400
and the databases of Cloud Foundry those

00:04:25,510 --> 00:04:29,020
are what we need to do at the end of the

00:04:27,400 --> 00:04:31,350
day to get those applications to spin

00:04:29,020 --> 00:04:35,020
back up in the new environment

00:04:31,350 --> 00:04:36,370
now if you've gone crowing alone in CF

00:04:35,020 --> 00:04:37,930
databases you know there's more than

00:04:36,370 --> 00:04:40,660
these three but these are the three main

00:04:37,930 --> 00:04:42,430
ones for what cloud foundry knows to be

00:04:40,660 --> 00:04:44,770
the lay of the land for as far as

00:04:42,430 --> 00:04:46,810
application details tendency details

00:04:44,770 --> 00:04:48,520
these are what need the important

00:04:46,810 --> 00:04:50,920
databases for what we want to make sure

00:04:48,520 --> 00:04:55,810
is maintained on the next site to make

00:04:50,920 --> 00:04:57,370
sure everything comes up now before we

00:04:55,810 --> 00:04:59,500
move anything we want to make sure we

00:04:57,370 --> 00:05:01,600
understand what it is that we're moving

00:04:59,500 --> 00:05:03,610
so we need to take inventory we want to

00:05:01,600 --> 00:05:06,070
inventory applications that are running

00:05:03,610 --> 00:05:09,040
on the foundations these services those

00:05:06,070 --> 00:05:10,900
applications are consuming domains any

00:05:09,040 --> 00:05:14,410
domains that are bound to those services

00:05:10,900 --> 00:05:18,880
and any certificates that are on your

00:05:14,410 --> 00:05:21,100
your go routers in this case it turned

00:05:18,880 --> 00:05:23,800
out that we were looking at about 1100

00:05:21,100 --> 00:05:26,680
apps surprisingly almost all of them

00:05:23,800 --> 00:05:28,930
were single ai but it's important to

00:05:26,680 --> 00:05:31,420
know if there are any outliers so as

00:05:28,930 --> 00:05:34,930
part of the inventory we did as an aside

00:05:31,420 --> 00:05:36,520
anything database e that you see in our

00:05:34,930 --> 00:05:39,669
talk today is going to be using Postgres

00:05:36,520 --> 00:05:42,280
many of you may be running my sequel on

00:05:39,669 --> 00:05:43,660
your foundations the concepts are all

00:05:42,280 --> 00:05:47,890
the same is too few little details

00:05:43,660 --> 00:05:49,419
differ but so we did a query to identify

00:05:47,890 --> 00:05:51,370
any large applications if there are

00:05:49,419 --> 00:05:53,350
applications that are outliers that are

00:05:51,370 --> 00:05:55,510
running lots and lots of AIS we want to

00:05:53,350 --> 00:05:57,490
know about them because an app that's

00:05:55,510 --> 00:05:58,990
running a lot of AIS has a lot of

00:05:57,490 --> 00:06:00,730
visibility in the org so we want to

00:05:58,990 --> 00:06:02,169
contact those teams make sure they're in

00:06:00,730 --> 00:06:03,450
the loop about what they're doing what

00:06:02,169 --> 00:06:06,460
we are doing

00:06:03,450 --> 00:06:08,169
similarly there might be orgs that well

00:06:06,460 --> 00:06:09,820
they don't have any single app is really

00:06:08,169 --> 00:06:13,210
large they just have lots and lots of

00:06:09,820 --> 00:06:15,160
apps and so these are also effectively

00:06:13,210 --> 00:06:16,570
high visibility so we want to be in

00:06:15,160 --> 00:06:20,380
touch with those teams make sure they're

00:06:16,570 --> 00:06:23,169
in the loop as well we need to take

00:06:20,380 --> 00:06:24,580
inventory of any applications that are

00:06:23,169 --> 00:06:26,710
failing if an application is in a

00:06:24,580 --> 00:06:28,450
failing State on the old foundation we

00:06:26,710 --> 00:06:30,840
can't reasonably expect it to come up

00:06:28,450 --> 00:06:32,770
and run beautifully on the new one so

00:06:30,840 --> 00:06:34,810
determining what applications are

00:06:32,770 --> 00:06:37,120
already failing helps guide our

00:06:34,810 --> 00:06:39,860
definition of done

00:06:37,120 --> 00:06:41,930
once we've scraped all of the services

00:06:39,860 --> 00:06:43,850
and figured out what services the apps

00:06:41,930 --> 00:06:45,530
are consuming we need to make sure we

00:06:43,850 --> 00:06:47,660
really have connectivity to those

00:06:45,530 --> 00:06:49,250
services is there some firewalling in

00:06:47,660 --> 00:06:50,900
the way if somebody writing a rap laughs

00:06:49,250 --> 00:06:53,120
that needs to be weak and reconfigured

00:06:50,900 --> 00:06:55,780
so we want to try all this stuff out my

00:06:53,120 --> 00:06:57,980
favorite tool for doing this is is nmap

00:06:55,780 --> 00:07:00,050
if you don't have that available to you

00:06:57,980 --> 00:07:02,030
pretty much every host has netcat which

00:07:00,050 --> 00:07:04,580
you can use in some cases we only had

00:07:02,030 --> 00:07:06,290
host names and not ports so we just had

00:07:04,580 --> 00:07:10,700
to ping those hosts and make sure that

00:07:06,290 --> 00:07:13,550
they were pink able so while we're still

00:07:10,700 --> 00:07:15,050
in the beginning planning phases of the

00:07:13,550 --> 00:07:16,460
actual migration we definitely want to

00:07:15,050 --> 00:07:18,020
do some housekeeping things with

00:07:16,460 --> 00:07:19,790
certificates as far as if you have any

00:07:18,020 --> 00:07:21,290
external load balancers you're gonna

00:07:19,790 --> 00:07:23,140
want to adjust those for the new site

00:07:21,290 --> 00:07:25,790
and get those ready for the switchover

00:07:23,140 --> 00:07:29,150
and also early on it's a good idea to

00:07:25,790 --> 00:07:30,920
switch over your DNS shorten the TTL so

00:07:29,150 --> 00:07:32,870
when you do eventually flip the switch

00:07:30,920 --> 00:07:34,490
on your new apps that that is a shorter

00:07:32,870 --> 00:07:41,210
time frame and you can bring down that

00:07:34,490 --> 00:07:43,730
old foundation sooner all right so again

00:07:41,210 --> 00:07:46,280
more planning stuff we need to actually

00:07:43,730 --> 00:07:48,470
start timing the operations that we're

00:07:46,280 --> 00:07:51,080
gonna be doing it's hard to give you an

00:07:48,470 --> 00:07:52,370
idea even roughly about how long these

00:07:51,080 --> 00:07:54,320
operations will take because it just

00:07:52,370 --> 00:07:56,120
depends on your Cloud Foundry how many

00:07:54,320 --> 00:07:58,580
apps you have these sort of things how

00:07:56,120 --> 00:08:00,200
big your blob stores are it's really

00:07:58,580 --> 00:08:01,970
gonna make a difference on a lot of

00:08:00,200 --> 00:08:03,680
these operations so we want it you've

00:08:01,970 --> 00:08:05,750
really want to test to make sure you're

00:08:03,680 --> 00:08:08,150
accurately planning and giving yourself

00:08:05,750 --> 00:08:10,480
a good buffer for your change window so

00:08:08,150 --> 00:08:12,920
you're not gonna run into any issues so

00:08:10,480 --> 00:08:15,440
we're gonna run time against these

00:08:12,920 --> 00:08:17,900
commands to do those two operations we

00:08:15,440 --> 00:08:21,080
talked about so our precinct in

00:08:17,900 --> 00:08:23,180
blobstore this the blobstore is our most

00:08:21,080 --> 00:08:26,390
expensive operation this is what's

00:08:23,180 --> 00:08:27,800
really going to take the most time so

00:08:26,390 --> 00:08:29,780
not only do we want to time this like we

00:08:27,800 --> 00:08:32,000
said before but we want to do this as

00:08:29,780 --> 00:08:33,650
much as possible going forward to

00:08:32,000 --> 00:08:35,750
minimize the difference between the

00:08:33,650 --> 00:08:38,450
blobstore as developers are pushing to

00:08:35,750 --> 00:08:39,919
it as we approach the deadline so the

00:08:38,450 --> 00:08:41,300
the longest it's ever going to take is

00:08:39,919 --> 00:08:43,190
the first time you do it so we want to

00:08:41,300 --> 00:08:45,410
keep running it periodically to keep

00:08:43,190 --> 00:08:48,230
that diff as low as possible so we're

00:08:45,410 --> 00:08:50,870
just using our sync across the two boxes

00:08:48,230 --> 00:08:53,060
here we use the V cap you

00:08:50,870 --> 00:08:54,880
but just know if you can do it other

00:08:53,060 --> 00:08:58,010
ways but at the end of the day make sure

00:08:54,880 --> 00:09:01,370
that directory has is owned by vcap and

00:08:58,010 --> 00:09:03,410
everything will be good we want to do

00:09:01,370 --> 00:09:05,630
the same for the databases so we're

00:09:03,410 --> 00:09:08,540
gonna do a PG dump all same thing and

00:09:05,630 --> 00:09:10,580
time this and sort of put together your

00:09:08,540 --> 00:09:11,810
change window approximately how long

00:09:10,580 --> 00:09:18,890
it's going to take give yourself a good

00:09:11,810 --> 00:09:21,950
buffer and yeah so now that we know how

00:09:18,890 --> 00:09:24,980
long things take we can decide whether

00:09:21,950 --> 00:09:26,089
or not we need to take downtime one of

00:09:24,980 --> 00:09:28,010
the complicating factors in this

00:09:26,089 --> 00:09:29,750
particular case is the client told us

00:09:28,010 --> 00:09:31,730
not all of their apps were very 12

00:09:29,750 --> 00:09:33,830
factor friendly and they had some apps

00:09:31,730 --> 00:09:35,839
that really could only were designed to

00:09:33,830 --> 00:09:37,100
run with just a single AI and they

00:09:35,839 --> 00:09:38,720
didn't know what would happen if they

00:09:37,100 --> 00:09:39,350
were running multiple ai's it might be

00:09:38,720 --> 00:09:42,130
problematic

00:09:39,350 --> 00:09:44,540
so they specifically told us we can't

00:09:42,130 --> 00:09:45,920
have more than one instance of their app

00:09:44,540 --> 00:09:48,260
running at a time so they would rather

00:09:45,920 --> 00:09:50,779
take the downtime than risk the the

00:09:48,260 --> 00:09:54,470
undetermined behavior of running

00:09:50,779 --> 00:09:55,760
multiple instances of those apps so now

00:09:54,470 --> 00:09:58,370
we know we need downtime we know how

00:09:55,760 --> 00:10:00,529
long things take so we can go to the CCB

00:09:58,370 --> 00:10:03,140
and we can schedule our change windows

00:10:00,529 --> 00:10:04,520
for each foundation now those change

00:10:03,140 --> 00:10:07,580
windows are inevitably going to be at

00:10:04,520 --> 00:10:08,660
least a few days out so we want to keep

00:10:07,580 --> 00:10:11,510
sinking the blobstore

00:10:08,660 --> 00:10:14,930
every single day on a regular basis so

00:10:11,510 --> 00:10:16,820
that we as Pat was saying minimize the

00:10:14,930 --> 00:10:19,339
work that has to be done during our

00:10:16,820 --> 00:10:21,200
actual downtime we were fortunate on

00:10:19,339 --> 00:10:23,270
this project that we had one of one of

00:10:21,200 --> 00:10:24,650
the people on the team was was my

00:10:23,270 --> 00:10:26,990
colleague Ramon who is in Central

00:10:24,650 --> 00:10:29,660
European Time I'm on the West Coast us

00:10:26,990 --> 00:10:33,440
time so between us we were able to keep

00:10:29,660 --> 00:10:35,089
things pretty well locked down and at

00:10:33,440 --> 00:10:37,130
that use go time

00:10:35,089 --> 00:10:38,990
yeah so this is officially we're in our

00:10:37,130 --> 00:10:41,810
change window we're ready to start the

00:10:38,990 --> 00:10:44,720
actual process and things are ready to

00:10:41,810 --> 00:10:47,060
go so our first step is also an optional

00:10:44,720 --> 00:10:49,970
one you don't have to do this but the

00:10:47,060 --> 00:10:52,640
idea here is the question what happens

00:10:49,970 --> 00:10:54,740
during this time if developers are

00:10:52,640 --> 00:10:57,709
pushing you know pushing changes and

00:10:54,740 --> 00:10:59,720
whatnot what's gonna happen so the

00:10:57,709 --> 00:11:00,740
answer is depending on how easy it is to

00:10:59,720 --> 00:11:02,930
communicate with all your development

00:11:00,740 --> 00:11:04,040
teams if you have a bunch of development

00:11:02,930 --> 00:11:06,050
teams and you can

00:11:04,040 --> 00:11:07,790
necessarily talk to them you might want

00:11:06,050 --> 00:11:09,410
to bring down the go routers to prevent

00:11:07,790 --> 00:11:10,760
them from actually pushing changes and

00:11:09,410 --> 00:11:13,040
you're not gonna get any emails

00:11:10,760 --> 00:11:15,050
hey I push this what happened or you

00:11:13,040 --> 00:11:17,660
cannot do that and if they still send

00:11:15,050 --> 00:11:19,550
you those just say I mean you missed the

00:11:17,660 --> 00:11:21,740
email we were doing a change window so

00:11:19,550 --> 00:11:23,720
that's how do you man I'm sorry but if

00:11:21,740 --> 00:11:25,339
you don't want to get those emails then

00:11:23,720 --> 00:11:28,220
this is an option for you so this is

00:11:25,339 --> 00:11:31,370
optional but it's up to your

00:11:28,220 --> 00:11:33,440
organization how you want to do it so

00:11:31,370 --> 00:11:35,240
then like I said the first sort of

00:11:33,440 --> 00:11:36,800
actual step you want to do is our final

00:11:35,240 --> 00:11:39,260
blobstore sink like I said this is

00:11:36,800 --> 00:11:41,149
expensive even if this is a no op to

00:11:39,260 --> 00:11:43,250
traverse that tree instead every file is

00:11:41,149 --> 00:11:45,260
gonna be it's gonna take a long time so

00:11:43,250 --> 00:11:47,810
we're gonna do this front load our time

00:11:45,260 --> 00:11:49,160
front load our work so to speak so we're

00:11:47,810 --> 00:11:52,399
just gonna kick this off while we move

00:11:49,160 --> 00:11:54,050
on to our database bits with the blood

00:11:52,399 --> 00:11:56,029
store running it's time to dump our

00:11:54,050 --> 00:11:58,339
database so we botch SSH into the

00:11:56,029 --> 00:12:00,680
database host we dump everything into a

00:11:58,339 --> 00:12:03,950
file now before we ship that file off to

00:12:00,680 --> 00:12:06,800
the new site we want to run a hash of it

00:12:03,950 --> 00:12:08,270
now modern protocols are real good at

00:12:06,800 --> 00:12:09,680
getting files to the right place in good

00:12:08,270 --> 00:12:11,899
shape but if we're talking about

00:12:09,680 --> 00:12:13,730
hundreds of apps the cost of failure is

00:12:11,899 --> 00:12:15,440
high so it's worth being a little

00:12:13,730 --> 00:12:17,540
paranoid and making sure we dot every I

00:12:15,440 --> 00:12:20,360
and cross every T so it cost very little

00:12:17,540 --> 00:12:22,670
to do these check sums we may as well do

00:12:20,360 --> 00:12:24,950
that so we run a checksum we note that

00:12:22,670 --> 00:12:27,890
we note the output then we go over to

00:12:24,950 --> 00:12:29,540
the database on our new foundation but

00:12:27,890 --> 00:12:31,040
we can't load the database right away

00:12:29,540 --> 00:12:33,050
because that foundation is up and

00:12:31,040 --> 00:12:35,209
running a bunch of processes using that

00:12:33,050 --> 00:12:36,470
database using those tables we don't

00:12:35,209 --> 00:12:40,010
want to change things out from under it

00:12:36,470 --> 00:12:41,720
madness ensues so first thing we need to

00:12:40,010 --> 00:12:44,690
do is figure out who's connected to the

00:12:41,720 --> 00:12:46,220
database so this query at the bottom

00:12:44,690 --> 00:12:47,990
will tell us the answer to that and the

00:12:46,220 --> 00:12:49,910
output will look something like this now

00:12:47,990 --> 00:12:51,860
what we can do is we can go through this

00:12:49,910 --> 00:12:55,160
list and from the IPS we can identify

00:12:51,860 --> 00:12:57,290
all of the jobs that are connected to

00:12:55,160 --> 00:12:59,660
the database and we can Bosch stop every

00:12:57,290 --> 00:13:01,640
one of those and we go through one at a

00:12:59,660 --> 00:13:03,890
time we rerun our query we see what

00:13:01,640 --> 00:13:05,449
we've missed and eventually when we run

00:13:03,890 --> 00:13:07,550
the query we get this so now we know

00:13:05,449 --> 00:13:08,959
nobody but us are connected is connected

00:13:07,550 --> 00:13:12,020
to the database subject-verb agreement

00:13:08,959 --> 00:13:13,880
got to love it and it's safe to do our

00:13:12,020 --> 00:13:16,630
load and we won't be be mucking about

00:13:13,880 --> 00:13:19,220
with any running processes

00:13:16,630 --> 00:13:21,410
so we run that checksum on a local copy

00:13:19,220 --> 00:13:24,500
of the file compare the hash make sure

00:13:21,410 --> 00:13:27,740
it came across good and then we can kick

00:13:24,500 --> 00:13:30,110
off our load now we wait for a little

00:13:27,740 --> 00:13:33,830
bit once the load is done we make sure

00:13:30,110 --> 00:13:38,570
our blobstore sync is done and at that

00:13:33,830 --> 00:13:40,370
point we can start up our foundations so

00:13:38,570 --> 00:13:42,080
we issue a Bosch start command now all

00:13:40,370 --> 00:13:43,430
of the jobs that we stopped are going to

00:13:42,080 --> 00:13:45,470
come back up they're gonna reconnect to

00:13:43,430 --> 00:13:48,710
the database and start doing their thing

00:13:45,470 --> 00:13:50,750
a Diego in particular looks at the

00:13:48,710 --> 00:13:52,040
expected state of the world which is hey

00:13:50,750 --> 00:13:53,540
I've got all these apps that are

00:13:52,040 --> 00:13:55,730
supposed to be running and the actual

00:13:53,540 --> 00:13:58,130
state of the world which is hmm I don't

00:13:55,730 --> 00:13:59,360
see any apps at all running maybe we

00:13:58,130 --> 00:14:01,730
should do something about that and it

00:13:59,360 --> 00:14:03,200
begins to converge the state so it fires

00:14:01,730 --> 00:14:04,910
up these apps and if you're talking

00:14:03,200 --> 00:14:06,650
about hundreds of apps it that can't

00:14:04,910 --> 00:14:08,420
happen instantaneously it takes a while

00:14:06,650 --> 00:14:11,000
to spin up every single one of those

00:14:08,420 --> 00:14:13,640
containers so we can watch that process

00:14:11,000 --> 00:14:20,029
go by running a query on on the state of

00:14:13,640 --> 00:14:21,830
all the processes in the system so this

00:14:20,029 --> 00:14:23,029
this will let us see a summary of

00:14:21,830 --> 00:14:25,040
everything that's there and we're

00:14:23,029 --> 00:14:26,360
looking for everything or just about

00:14:25,040 --> 00:14:29,000
everything to get into that running

00:14:26,360 --> 00:14:30,610
state once we converged and we're happy

00:14:29,000 --> 00:14:34,490
all our apps are doing the right thing

00:14:30,610 --> 00:14:37,420
we now can go to the DNS and we can move

00:14:34,490 --> 00:14:40,400
DNS over to point to the new site and

00:14:37,420 --> 00:14:42,940
there we have it disaster narrowly

00:14:40,400 --> 00:14:51,100
averted thank you folks

00:14:42,940 --> 00:14:51,100
does anybody have questions yeah

00:15:06,540 --> 00:15:11,550
ah yes so the question is what about

00:15:09,600 --> 00:15:13,980
environment variables that have been set

00:15:11,550 --> 00:15:15,720
for your apps do those make it over and

00:15:13,980 --> 00:15:19,140
yes they do anything anything that's

00:15:15,720 --> 00:15:20,370
that's CFM in the old place that's all

00:15:19,140 --> 00:15:22,110
accounted for in the database and it

00:15:20,370 --> 00:15:25,130
will be see if and in the new place so

00:15:22,110 --> 00:15:38,070
all your configuration will survive

00:15:25,130 --> 00:15:41,820
anything else oh that's its own bag of

00:15:38,070 --> 00:15:43,650
bees that's come back next year and

00:15:41,820 --> 00:15:44,970
we'll and we'll do a talk on service

00:15:43,650 --> 00:15:47,580
migration I mean everything depends on

00:15:44,970 --> 00:15:50,180
on what the service is what kind of

00:15:47,580 --> 00:15:52,410
volume of the data how live is the data

00:15:50,180 --> 00:15:54,450
what is the usage like what are your

00:15:52,410 --> 00:15:56,310
downtime expect to air you know your

00:15:54,450 --> 00:15:59,460
what how much downtime is acceptable

00:15:56,310 --> 00:16:01,440
it's it all depends on on your

00:15:59,460 --> 00:16:05,070
particulars and what you've got in your

00:16:01,440 --> 00:16:06,930
environment but if you if you want to

00:16:05,070 --> 00:16:08,730
come up and talk to us afterwards and

00:16:06,930 --> 00:16:10,260
give us some specifics for what you have

00:16:08,730 --> 00:16:19,560
in your I'm we can we can dig into that

00:16:10,260 --> 00:16:21,120
if you like anybody else all right well

00:16:19,560 --> 00:16:22,050
we are gonna declare victory thanks very

00:16:21,120 --> 00:16:27,890
much folks Thanks

00:16:22,050 --> 00:16:27,890

YouTube URL: https://www.youtube.com/watch?v=w581X6x7ek8


