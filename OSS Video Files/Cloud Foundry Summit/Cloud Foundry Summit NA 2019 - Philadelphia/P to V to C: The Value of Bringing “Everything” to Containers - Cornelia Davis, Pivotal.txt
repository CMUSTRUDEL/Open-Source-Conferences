Title: P to V to C: The Value of Bringing “Everything” to Containers - Cornelia Davis, Pivotal
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	P to V to C: The Value of Bringing “Everything” to Containers - Cornelia Davis, Pivotal

Roughly twenty years ago VMware began a revolution in how IT systems would be managed. While initially used for only a small subset of their applications, eventually enterprises would move the vast majority of ALL workloads into virtual machines – many had “P(hysical) to V(irtual)” initiatives to accelerate the movement.

Today we stand at a similar crossroad with the widespread availability of container-based systems and particularly, with the extraordinary embrace and expansion of the Kubernetes ecosystem. Similar to the early days of infrastructure virtualization, organizations are already realizing benefits from containerization of some of their workloads. The question then is, first, how much of an enterprise IT portfolio can benefit can and should be moved into container-based platforms and second, what are the new tools and processes needed to fully realize those advantages? Together, Cloud Foundry Application Runtime (CFAR) and Cloud Foundry Container Runtime (CFCR) can capture “everything.”

In this session, we will examine the benefits that containerization can bring over and above that of the traditional infrastructure virtualization – the Devops efficiencies that come from the container image are only the beginning. We’ll also study the important role that infrastructure virtualization continues to play in a containerized IT ecosystem – just as virtualization did not eliminate physical machines, nor does containerization eliminate virtual machines. We’ll study containers, pods, controllers, policies and more – the building blocks of the next generation IT landscapes – and the new practices they enable.

By the end of the session, you’ll be starting to think about your V(irtual) to C(ontainer) initiative.

About Cornelia Davis
Cornelia Davis is Vice President of Technology at Pivotal, where she works on the technology strategy for both Pivotal and for Pivotal customers. Currently she is working on ways to bring the various cloud-computing models of Infrastructure as a Service, Application as a Service, Container as a Service and Function as a Service together into a comprehensive offering that allows IT organizations to function at the highest levels. She is the author of the book “Cloud Native: Designing Change-tolerant Software” by Manning Publications (https://www.manning.com/books/cloud-native).

https://www.cloudfoundry.org/
Captions: 
	00:00:00,240 --> 00:00:03,080
all right thanks everyone for your

00:00:01,319 --> 00:00:06,180
patience we're going to get started and

00:00:03,080 --> 00:00:09,840
it is a distinct honor and privilege to

00:00:06,180 --> 00:00:12,000
introduce Cornelia we've been working

00:00:09,840 --> 00:00:14,099
together with Cornelia and pivotal and

00:00:12,000 --> 00:00:16,470
they've been great friends of Comcast so

00:00:14,099 --> 00:00:18,359
it's a really special moment to be able

00:00:16,470 --> 00:00:21,390
to introduce and turn it over to

00:00:18,359 --> 00:00:23,880
Cornelia thank you and it is likewise a

00:00:21,390 --> 00:00:25,859
privilege to be introduced by Greg and

00:00:23,880 --> 00:00:28,710
you'll see in just a moment that Greg

00:00:25,859 --> 00:00:32,070
actually plays prominently in my my

00:00:28,710 --> 00:00:33,899
presentation so thank you all for coming

00:00:32,070 --> 00:00:36,600
this afternoon and spending the next

00:00:33,899 --> 00:00:38,190
half hour with with me and with all the

00:00:36,600 --> 00:00:41,910
rest of us in the room

00:00:38,190 --> 00:00:44,550
I really really appreciate that let me

00:00:41,910 --> 00:00:46,440
just very briefly introduce myself and

00:00:44,550 --> 00:00:47,550
then also just put a shameless plug up

00:00:46,440 --> 00:00:50,039
there

00:00:47,550 --> 00:00:51,840
my name is cornelia davis I work for

00:00:50,039 --> 00:00:54,629
pivotal I've been with pivotal since the

00:00:51,840 --> 00:00:56,129
pivotal spinoff I came from the EMC side

00:00:54,629 --> 00:00:57,449
of the business as a part of the

00:00:56,129 --> 00:00:59,520
spin-off where I worked in the corporate

00:00:57,449 --> 00:01:02,160
CTO office doing architecture and

00:00:59,520 --> 00:01:03,840
emerging tech and to a large extent I

00:01:02,160 --> 00:01:06,960
still do architecture and emerging tech

00:01:03,840 --> 00:01:10,140
for pivotal now but really the area that

00:01:06,960 --> 00:01:13,470
I focus on is taking emerging tech new

00:01:10,140 --> 00:01:17,070
shiny fancy objects whether it be paths

00:01:13,470 --> 00:01:21,360
from five or six years ago to cloud

00:01:17,070 --> 00:01:24,479
cashing to kubernetes to K native to

00:01:21,360 --> 00:01:26,640
server less and really try to figure out

00:01:24,479 --> 00:01:28,890
together with our customers how to tie

00:01:26,640 --> 00:01:30,869
that to business value because tech is

00:01:28,890 --> 00:01:32,579
fun for tech sake but when it really

00:01:30,869 --> 00:01:35,340
when it generates business value that's

00:01:32,579 --> 00:01:38,270
when it gets really exciting for me I've

00:01:35,340 --> 00:01:42,150
been working in web architectures for

00:01:38,270 --> 00:01:44,130
probably closer to 15 years now I've

00:01:42,150 --> 00:01:47,369
been working with cloud foundry for more

00:01:44,130 --> 00:01:51,990
than six years almost seven years and

00:01:47,369 --> 00:01:54,420
cloud native and I am just literally I

00:01:51,990 --> 00:01:57,240
have literally yesterday did the final

00:01:54,420 --> 00:02:00,030
approvals on the copy edits the last

00:01:57,240 --> 00:02:01,680
copy edits for my book so we are in the

00:02:00,030 --> 00:02:03,420
production process I've been writing a

00:02:01,680 --> 00:02:05,759
book with Manning it's an architecture

00:02:03,420 --> 00:02:07,140
book around cloud native applications so

00:02:05,759 --> 00:02:10,200
what are the patterns that you need to

00:02:07,140 --> 00:02:12,960
apply so that when you do something like

00:02:10,200 --> 00:02:16,860
run it on Cloud Foundry or run it on a

00:02:12,960 --> 00:02:19,110
container-based platform that we can do

00:02:16,860 --> 00:02:21,060
all sorts of cool things like some of

00:02:19,110 --> 00:02:23,310
the things that I'm gonna show you here

00:02:21,060 --> 00:02:25,410
if you don't follow those practices well

00:02:23,310 --> 00:02:30,830
we might not be able to do some of those

00:02:25,410 --> 00:02:34,200
things so so the title of the talk was

00:02:30,830 --> 00:02:38,640
p2v2 see so let me tell you where that

00:02:34,200 --> 00:02:40,440
came from as Greg said we've been

00:02:38,640 --> 00:02:42,390
working with Comcast for quite a number

00:02:40,440 --> 00:02:44,730
of years four or five years and I've

00:02:42,390 --> 00:02:48,060
known Greg for probably that whole time

00:02:44,730 --> 00:02:50,400
and they have been very successful with

00:02:48,060 --> 00:02:53,190
paths with the pivotal Cloud Foundry

00:02:50,400 --> 00:02:55,290
platform and you've heard Greg talk

00:02:53,190 --> 00:02:58,140
about that success that Comcast has

00:02:55,290 --> 00:02:59,610
achieved and about a year ago maybe a

00:02:58,140 --> 00:03:01,350
little more than a year ago Greg and I

00:02:59,610 --> 00:03:04,200
started talking about what we were doing

00:03:01,350 --> 00:03:06,360
with PKS with pivotal container service

00:03:04,200 --> 00:03:10,050
you know bringing kubernetes to the

00:03:06,360 --> 00:03:12,180
platform and it was Greg and it says

00:03:10,050 --> 00:03:15,480
there major US telco provider it was

00:03:12,180 --> 00:03:17,880
Greg and Greg has given me the okay to

00:03:15,480 --> 00:03:19,500
you know attribute this directly to him

00:03:17,880 --> 00:03:21,510
so that's why I'm sharing that with you

00:03:19,500 --> 00:03:23,490
and he said hey you know listen core

00:03:21,510 --> 00:03:26,820
tell you what I want to do is I want to

00:03:23,490 --> 00:03:28,620
move all workloads from V to C so from

00:03:26,820 --> 00:03:31,020
running directly on virtual machines to

00:03:28,620 --> 00:03:33,690
running in containers that doesn't get

00:03:31,020 --> 00:03:35,720
rid of virtual machines you'll see how

00:03:33,690 --> 00:03:38,370
that plays prominently in just a moment

00:03:35,720 --> 00:03:40,800
but I want to move all workloads from V

00:03:38,370 --> 00:03:42,420
to C so that I no longer have to worry

00:03:40,800 --> 00:03:43,050
about things like patching operating

00:03:42,420 --> 00:03:46,590
systems

00:03:43,050 --> 00:03:48,510
now Greg knew about patching operating

00:03:46,590 --> 00:03:51,000
systems because of the experience that

00:03:48,510 --> 00:03:52,830
he's had with cloud foundry and we're

00:03:51,000 --> 00:03:54,750
gonna talk about that for those of you

00:03:52,830 --> 00:03:57,690
who maybe are a little bit newer to

00:03:54,750 --> 00:03:59,340
running things in containers maybe this

00:03:57,690 --> 00:04:01,350
is going to be news for you and we'll

00:03:59,340 --> 00:04:07,310
talk about patching operating systems in

00:04:01,350 --> 00:04:10,830
a moment in a number of other things but

00:04:07,310 --> 00:04:12,810
so again we'll cover those things but

00:04:10,830 --> 00:04:16,320
there's another interesting part of this

00:04:12,810 --> 00:04:19,350
quote and Greg went on to say that he

00:04:16,320 --> 00:04:23,040
drew the parallel between where we are

00:04:19,350 --> 00:04:26,639
today with containers and where we were

00:04:23,040 --> 00:04:29,520
as an industry 15 or 20 years ago

00:04:26,639 --> 00:04:32,039
with virtualization now there's a couple

00:04:29,520 --> 00:04:33,990
of very interesting parallels we spend a

00:04:32,039 --> 00:04:36,199
lot of time at the Cloud Foundry Summit

00:04:33,990 --> 00:04:39,590
talking about the developer about

00:04:36,199 --> 00:04:42,090
developer value developer efficiency

00:04:39,590 --> 00:04:46,099
developer gains and those types of

00:04:42,090 --> 00:04:49,379
things and so I want to go back to

00:04:46,099 --> 00:04:51,120
infrastructure as a service and VMware

00:04:49,379 --> 00:04:54,180
just celebrated their 20 year

00:04:51,120 --> 00:04:56,699
anniversary or the 20 year birthday um I

00:04:54,180 --> 00:04:59,400
actually was one of the very first

00:04:56,699 --> 00:05:01,919
people to use virtualization technology

00:04:59,400 --> 00:05:05,159
because I'm a developer that's my

00:05:01,919 --> 00:05:08,610
background and before virtualization

00:05:05,159 --> 00:05:10,379
technology I had my laptop it was quite

00:05:08,610 --> 00:05:13,650
a bit thicker than the Mac that I have

00:05:10,379 --> 00:05:17,539
now but I ran around or when I was at

00:05:13,650 --> 00:05:20,759
home I had two hard drives anybody else

00:05:17,539 --> 00:05:23,669
yep I see a couple of emphatic nods I

00:05:20,759 --> 00:05:26,759
had one that booted two windows and if I

00:05:23,669 --> 00:05:28,860
was doing email or PowerPoint or word I

00:05:26,759 --> 00:05:32,159
booted that one up and I had another one

00:05:28,860 --> 00:05:33,810
that booted to Linux and so what

00:05:32,159 --> 00:05:35,610
happened was when work VMware

00:05:33,810 --> 00:05:37,610
Workstation came along I didn't have to

00:05:35,610 --> 00:05:41,099
carry around two hard drives anymore

00:05:37,610 --> 00:05:44,580
which was way cool for me as the

00:05:41,099 --> 00:05:47,550
developer now I can tell you this VMware

00:05:44,580 --> 00:05:51,149
did not build a business a 10 billion

00:05:47,550 --> 00:05:54,300
dollar business by making it easy for me

00:05:51,149 --> 00:05:56,909
to have multiple operating systems on my

00:05:54,300 --> 00:05:58,289
laptop to save me the trouble of running

00:05:56,909 --> 00:06:01,289
around with two hard drives

00:05:58,289 --> 00:06:04,800
they built a ten billion dollar business

00:06:01,289 --> 00:06:08,039
when virtualization hit the data center

00:06:04,800 --> 00:06:11,009
it's when it started being adopted to

00:06:08,039 --> 00:06:14,430
realize not just developer productivity

00:06:11,009 --> 00:06:16,770
but actually realize all sorts of other

00:06:14,430 --> 00:06:18,089
efficiencies that were bringing value to

00:06:16,770 --> 00:06:21,689
the enterprise

00:06:18,089 --> 00:06:23,969
that that's when it really took off and

00:06:21,689 --> 00:06:27,360
that's when we generated a ton of value

00:06:23,969 --> 00:06:29,909
for businesses now Greg's

00:06:27,360 --> 00:06:32,550
when Greg went on and took this quote a

00:06:29,909 --> 00:06:34,979
little bit further that was really

00:06:32,550 --> 00:06:38,009
insightful because on the container

00:06:34,979 --> 00:06:39,840
front I suggest that we are in a very

00:06:38,009 --> 00:06:42,900
similar spot now

00:06:39,840 --> 00:06:45,300
containers have captured the imagination

00:06:42,900 --> 00:06:47,340
of developers and developers are

00:06:45,300 --> 00:06:49,169
leveraging them they started leveraging

00:06:47,340 --> 00:06:51,900
them whatever four or five years ago

00:06:49,169 --> 00:06:54,780
first in their deployment pipelines and

00:06:51,900 --> 00:06:59,070
things like that but we are at the stage

00:06:54,780 --> 00:07:00,150
now cloud foundry has allowed us to do

00:06:59,070 --> 00:07:02,790
it all along

00:07:00,150 --> 00:07:05,240
for quite a number of years kubernetes

00:07:02,790 --> 00:07:08,490
more recently we're at the stage now

00:07:05,240 --> 00:07:12,090
where we can actually accelerate we can

00:07:08,490 --> 00:07:15,510
go beyond developer productivity and we

00:07:12,090 --> 00:07:18,870
can actually realize just unimaginable

00:07:15,510 --> 00:07:22,080
things that we can do around generating

00:07:18,870 --> 00:07:24,450
value around containers so that is

00:07:22,080 --> 00:07:26,790
what's even more interesting than maybe

00:07:24,450 --> 00:07:28,410
even more interesting than these very

00:07:26,790 --> 00:07:33,419
specific things that I'm going to talk

00:07:28,410 --> 00:07:38,970
about so let's start with why containers

00:07:33,419 --> 00:07:41,910
in the first place so arguably one of

00:07:38,970 --> 00:07:45,720
the first values that we saw out of

00:07:41,910 --> 00:07:48,840
containers was this what we have here is

00:07:45,720 --> 00:07:53,130
the operator on the left hand side who

00:07:48,840 --> 00:07:55,789
looks understandably angry and says to

00:07:53,130 --> 00:08:00,090
the developer on the right hand side

00:07:55,789 --> 00:08:07,280
your code doesn't work and what does the

00:08:00,090 --> 00:08:12,000
developer say it works on my machine

00:08:07,280 --> 00:08:14,430
right and so yes the first thing that

00:08:12,000 --> 00:08:18,479
the first value that we could get around

00:08:14,430 --> 00:08:21,990
containers was that we were able to take

00:08:18,479 --> 00:08:24,660
what was often done very late in the

00:08:21,990 --> 00:08:27,330
deployment process very late in the

00:08:24,660 --> 00:08:30,240
promotion to upper environments as some

00:08:27,330 --> 00:08:33,390
customers call it and we were able to do

00:08:30,240 --> 00:08:36,719
that shift left do the proverbial shift

00:08:33,390 --> 00:08:39,690
left and do that earlier so that we then

00:08:36,719 --> 00:08:42,120
had that done once and all we needed now

00:08:39,690 --> 00:08:44,940
was a container runtime that we can

00:08:42,120 --> 00:08:47,490
instantiate those containers in those

00:08:44,940 --> 00:08:50,910
container images in so there's no

00:08:47,490 --> 00:08:52,710
question that this brought value now it

00:08:50,910 --> 00:08:54,960
also brought with it also

00:08:52,710 --> 00:08:57,270
two very interesting problems that we

00:08:54,960 --> 00:08:59,910
needed to solve in that who's going to

00:08:57,270 --> 00:09:02,070
build those containers and we'll talk

00:08:59,910 --> 00:09:03,750
about that more a little bit later I'll

00:09:02,070 --> 00:09:06,120
tell you I remember very distinctly

00:09:03,750 --> 00:09:09,660
having a conversation with a prospective

00:09:06,120 --> 00:09:11,490
customer four years ago who said I don't

00:09:09,660 --> 00:09:14,130
need your pass because I'm doing

00:09:11,490 --> 00:09:16,170
everything with docker and my developers

00:09:14,130 --> 00:09:18,720
are just gonna ship me images and I'm

00:09:16,170 --> 00:09:20,130
just gonna run those images no problem

00:09:18,720 --> 00:09:22,380
and I said really

00:09:20,130 --> 00:09:25,140
you're developers that don't know the

00:09:22,380 --> 00:09:27,960
first thing about regulatory compliance

00:09:25,140 --> 00:09:30,330
that barely know what you need to know

00:09:27,960 --> 00:09:32,280
about security you're gonna let them

00:09:30,330 --> 00:09:34,320
take these container images you're gonna

00:09:32,280 --> 00:09:38,190
run them on your production systems no

00:09:34,320 --> 00:09:38,580
questions asked and he was like ok good

00:09:38,190 --> 00:09:41,790
point

00:09:38,580 --> 00:09:43,620
so we've matured a lot in the last four

00:09:41,790 --> 00:09:46,410
or five years and that's some of what

00:09:43,620 --> 00:09:50,010
we're gonna talk about so I want to turn

00:09:46,410 --> 00:09:54,360
back to Greg's quote and really drill in

00:09:50,010 --> 00:09:57,600
on the like the worry about things like

00:09:54,360 --> 00:10:00,300
patching operating systems so let's talk

00:09:57,600 --> 00:10:01,800
about that first one what do we mean for

00:10:00,300 --> 00:10:05,010
those of you who maybe aren't as

00:10:01,800 --> 00:10:07,110
familiar with container environments how

00:10:05,010 --> 00:10:09,630
on earth does a container help me

00:10:07,110 --> 00:10:13,170
actually patch the operating a patch an

00:10:09,630 --> 00:10:15,000
operating system so here of course is

00:10:13,170 --> 00:10:18,300
just our very simple picture we have a

00:10:15,000 --> 00:10:20,460
host that host is a virtual machine it

00:10:18,300 --> 00:10:22,770
could be a physical machine but it turns

00:10:20,460 --> 00:10:26,280
out that when it comes time to realize

00:10:22,770 --> 00:10:27,960
value in enterprises in data centers

00:10:26,280 --> 00:10:30,390
that the virtual machine still plays a

00:10:27,960 --> 00:10:33,120
very significant role I won't have a lot

00:10:30,390 --> 00:10:34,860
of time to go into those details find me

00:10:33,120 --> 00:10:37,290
afterward and we can certainly riff on

00:10:34,860 --> 00:10:38,850
that so we've got the virtual machine

00:10:37,290 --> 00:10:40,980
host which is running the kernel

00:10:38,850 --> 00:10:43,110
operating system and then we have

00:10:40,980 --> 00:10:45,300
container and in this picture I'm only

00:10:43,110 --> 00:10:47,220
showing a single container but generally

00:10:45,300 --> 00:10:50,040
you're gonna have multiple containers

00:10:47,220 --> 00:10:53,160
that are running on that host and inside

00:10:50,040 --> 00:10:56,070
of the container you bring in more of

00:10:53,160 --> 00:10:58,710
the operating system so you bring in the

00:10:56,070 --> 00:10:59,970
kernel just has the fundamentals the

00:10:58,710 --> 00:11:02,970
things that you need to be able to

00:10:59,970 --> 00:11:04,590
communicate with the hardware kind of in

00:11:02,970 --> 00:11:05,520
if you will what you would think of as

00:11:04,590 --> 00:11:07,440
the BIOS

00:11:05,520 --> 00:11:11,100
right it's just the core kernel

00:11:07,440 --> 00:11:13,110
operating system what we bring in into

00:11:11,100 --> 00:11:14,970
the container is we bring a little bit

00:11:13,110 --> 00:11:18,480
more of the operating systems things

00:11:14,970 --> 00:11:21,270
like OpenSSH or something like that that

00:11:18,480 --> 00:11:22,500
is going to give you support for the

00:11:21,270 --> 00:11:25,350
things that you want to run in that

00:11:22,500 --> 00:11:25,680
container you want to bring enough of

00:11:25,350 --> 00:11:29,100
that

00:11:25,680 --> 00:11:31,410
root filesystem that operating system to

00:11:29,100 --> 00:11:33,930
support those applications but no more

00:11:31,410 --> 00:11:37,050
because every single one of those

00:11:33,930 --> 00:11:40,620
processes has a potential attack surface

00:11:37,050 --> 00:11:42,920
or has a way of being vulnerable and so

00:11:40,620 --> 00:11:45,540
you want to minimize your attack surface

00:11:42,920 --> 00:11:47,790
so you bring in the OS image then you

00:11:45,540 --> 00:11:49,590
bring in the runtime layer like the JDK

00:11:47,790 --> 00:11:52,530
or something like that and then you

00:11:49,590 --> 00:11:55,140
bring in the application layer so

00:11:52,530 --> 00:11:57,690
everything is running fine everything's

00:11:55,140 --> 00:12:01,920
coming along just fine and then you know

00:11:57,690 --> 00:12:05,210
what there's a vulnerability and what

00:12:01,920 --> 00:12:07,890
happens is on a Friday afternoon

00:12:05,210 --> 00:12:11,370
Ubuntu canonical is going to say uh

00:12:07,890 --> 00:12:13,260
we've got a patch for you and we're

00:12:11,370 --> 00:12:15,360
keeping this under embargo we're not

00:12:13,260 --> 00:12:19,800
announcing it to the world just yet but

00:12:15,360 --> 00:12:24,030
here's the patch you the customer or you

00:12:19,800 --> 00:12:26,430
pivotal so a vendor that bundles the

00:12:24,030 --> 00:12:28,410
operating system they make the patch

00:12:26,430 --> 00:12:30,450
available and they say on Monday we're

00:12:28,410 --> 00:12:32,370
gonna announce it to the world so right

00:12:30,450 --> 00:12:34,680
now there's some hackers who probably

00:12:32,370 --> 00:12:36,000
know some small number of hackers who

00:12:34,680 --> 00:12:38,940
probably know about that vulnerability

00:12:36,000 --> 00:12:40,230
but on Monday every hacker is gonna know

00:12:38,940 --> 00:12:42,360
about that vulnerability and they're

00:12:40,230 --> 00:12:43,710
gonna start running their BOTS they're

00:12:42,360 --> 00:12:45,750
going to very quickly write some

00:12:43,710 --> 00:12:49,470
software that's going to look for a way

00:12:45,750 --> 00:12:51,810
of exploiting that vulnerability so as

00:12:49,470 --> 00:12:54,780
of Monday or Tuesday we've got BOTS out

00:12:51,810 --> 00:12:56,940
there that are attacking your system so

00:12:54,780 --> 00:12:58,980
you have this short window of

00:12:56,940 --> 00:13:03,270
opportunity where you can patch the

00:12:58,980 --> 00:13:06,360
operating system and in in the pre

00:13:03,270 --> 00:13:08,130
container world and I still talk to a

00:13:06,360 --> 00:13:10,650
lot of customers I spend a fair bit of

00:13:08,130 --> 00:13:12,960
my time out with customers they still

00:13:10,650 --> 00:13:17,190
concede to me that it often takes them

00:13:12,960 --> 00:13:19,260
three four five six months to ensure

00:13:17,190 --> 00:13:21,150
that an operating system patch

00:13:19,260 --> 00:13:25,830
has been applied to all of their

00:13:21,150 --> 00:13:29,070
machines that's still the reality so if

00:13:25,830 --> 00:13:32,640
I have my stuff in containers how can I

00:13:29,070 --> 00:13:36,060
oughta mate that well it's actually

00:13:32,640 --> 00:13:38,040
pretty simple I've got that container

00:13:36,060 --> 00:13:40,380
I've done all that work of building the

00:13:38,040 --> 00:13:43,200
container image ahead of time so what

00:13:40,380 --> 00:13:46,470
I'm gonna do is I'm gonna stand up a new

00:13:43,200 --> 00:13:49,260
machine and on that new machine I'm

00:13:46,470 --> 00:13:52,610
gonna install the new operating system

00:13:49,260 --> 00:13:57,210
the patched operating system and then I

00:13:52,610 --> 00:13:59,790
simply start up a new app instance and I

00:13:57,210 --> 00:14:01,410
take the old one off line and then for

00:13:59,790 --> 00:14:03,930
goodness sake let's get rid of that

00:14:01,410 --> 00:14:06,570
machine so that no other workloads end

00:14:03,930 --> 00:14:09,720
up landing on it now

00:14:06,570 --> 00:14:12,720
what I've showed here seems super simple

00:14:09,720 --> 00:14:15,990
like awesome I can do that that's really

00:14:12,720 --> 00:14:19,410
easy now here's the thing what happens

00:14:15,990 --> 00:14:21,870
when I need to do it at scale so I'm

00:14:19,410 --> 00:14:25,200
showing nine hosts here what happens if

00:14:21,870 --> 00:14:28,980
you have 9,000 hosts or 90,000 hosts I

00:14:25,200 --> 00:14:31,170
need to do this at scale and so the

00:14:28,980 --> 00:14:34,440
process if you watch it very quickly it

00:14:31,170 --> 00:14:36,030
goes by very quickly is it's that same

00:14:34,440 --> 00:14:39,150
process that I showed you a moment ago

00:14:36,030 --> 00:14:42,000
but it's that scale so I'm going to

00:14:39,150 --> 00:14:44,640
stand up three new hosts I'm gonna move

00:14:42,000 --> 00:14:46,140
some workloads over I'm gonna check make

00:14:44,640 --> 00:14:48,240
sure everything's cool and then I'm

00:14:46,140 --> 00:14:51,240
gonna keep cycling through that three at

00:14:48,240 --> 00:14:54,360
a time three at a time and so on so you

00:14:51,240 --> 00:14:56,460
can see how that goes now everything

00:14:54,360 --> 00:14:58,080
that I described here by the way is not

00:14:56,460 --> 00:15:00,360
something that you're just gonna get

00:14:58,080 --> 00:15:03,720
because you've created a container image

00:15:00,360 --> 00:15:06,900
you need a platform to be able to do

00:15:03,720 --> 00:15:11,040
this how many people in here are ready

00:15:06,900 --> 00:15:14,870
running Cloud Foundry in production you

00:15:11,040 --> 00:15:16,020
have a platform that does this for you

00:15:14,870 --> 00:15:20,010
okay

00:15:16,020 --> 00:15:22,050
that's how Greg knew that containers

00:15:20,010 --> 00:15:24,120
were a way that he no longer had to

00:15:22,050 --> 00:15:26,040
worry about patching operating systems

00:15:24,120 --> 00:15:30,360
is because he's been running a container

00:15:26,040 --> 00:15:31,890
platform in production for years so that

00:15:30,360 --> 00:15:33,059
this is something that you are already

00:15:31,890 --> 00:15:35,879
you are

00:15:33,059 --> 00:15:37,349
ready have available now of course

00:15:35,879 --> 00:15:39,869
there's all sorts of interesting things

00:15:37,349 --> 00:15:42,959
like the workloads themselves can they

00:15:39,869 --> 00:15:44,489
be moved that easily and all sorts of

00:15:42,959 --> 00:15:46,379
elements like are you running cloud

00:15:44,489 --> 00:15:48,779
native applications and all of those

00:15:46,379 --> 00:15:51,689
types of things but you have a platform

00:15:48,779 --> 00:15:53,309
that already implements this so let's

00:15:51,689 --> 00:15:55,859
look at some other things that your

00:15:53,309 --> 00:15:58,799
platform might implement as well so that

00:15:55,859 --> 00:16:00,809
was patching operating systems what

00:15:58,799 --> 00:16:04,889
about another security concern what

00:16:00,809 --> 00:16:06,989
about malware and one of our and I'm

00:16:04,889 --> 00:16:10,139
looking and I don't see Lance in the

00:16:06,989 --> 00:16:12,479
room but Lance from Wells Fargo has

00:16:10,139 --> 00:16:15,329
talked about this so I'm gonna be

00:16:12,479 --> 00:16:17,459
telling the same story that he has told

00:16:15,329 --> 00:16:19,949
and it's not just Lance who's doing this

00:16:17,459 --> 00:16:22,559
many of our customers are doing this the

00:16:19,949 --> 00:16:25,079
idea here is that with malware it's not

00:16:22,559 --> 00:16:27,059
like a vulnerable you know in known

00:16:25,079 --> 00:16:29,459
vulnerability in an operating system the

00:16:27,059 --> 00:16:33,629
way it works is some bad actor comes

00:16:29,459 --> 00:16:36,379
along and installs malware on inside of

00:16:33,629 --> 00:16:39,689
the container or on the host and then

00:16:36,379 --> 00:16:41,789
disappears because it's actually much

00:16:39,689 --> 00:16:44,789
easier to detect it an intruder while

00:16:41,789 --> 00:16:48,959
they're there than it is to detect them

00:16:44,789 --> 00:16:51,539
the malware so they disappear many of

00:16:48,959 --> 00:16:53,189
the breaches that we've heard many of

00:16:51,539 --> 00:16:55,169
them actually fell into the first

00:16:53,189 --> 00:16:57,329
category they didn't patch their

00:16:55,169 --> 00:17:00,389
operating system they didn't patch some

00:16:57,329 --> 00:17:02,479
runtime dependency but another set of

00:17:00,389 --> 00:17:05,129
vulnerabilities that we hear about are

00:17:02,479 --> 00:17:07,379
something that breaks into a point a

00:17:05,129 --> 00:17:10,019
sale system through the oh let's say the

00:17:07,379 --> 00:17:12,360
HVAC system that's what happened to

00:17:10,019 --> 00:17:15,409
target and they drop some malware on

00:17:12,360 --> 00:17:17,699
there and it sits there for months just

00:17:15,409 --> 00:17:22,199
collecting information looking for

00:17:17,699 --> 00:17:23,939
additional vulnerabilities so you might

00:17:22,199 --> 00:17:26,369
say that the way to solve this problem

00:17:23,939 --> 00:17:29,789
is to do a better job detecting malware

00:17:26,369 --> 00:17:31,799
and yeah you should probably do try to

00:17:29,789 --> 00:17:35,009
do a better job detecting malware but

00:17:31,799 --> 00:17:36,899
are you gonna depend on that the answer

00:17:35,009 --> 00:17:38,369
is you don't have to you don't have to

00:17:36,899 --> 00:17:42,149
depend on getting good at detecting

00:17:38,369 --> 00:17:44,100
malware you can do this imagine the

00:17:42,149 --> 00:17:46,400
process that I showed you just a moment

00:17:44,100 --> 00:17:49,160
ago where I can just stand up an

00:17:46,400 --> 00:17:53,350
their host and move my workloads over

00:17:49,160 --> 00:17:56,030
what if I just do this what if I just

00:17:53,350 --> 00:17:58,940
preemptively even if I even if there's

00:17:56,030 --> 00:18:01,790
not malware on there I just throw out

00:17:58,940 --> 00:18:05,510
the container and I stand up a new one

00:18:01,790 --> 00:18:07,340
if it didn't have malware on it no

00:18:05,510 --> 00:18:10,310
problem it still doesn't have malware on

00:18:07,340 --> 00:18:13,130
it but if it had malware on it it

00:18:10,310 --> 00:18:16,490
doesn't anymore because you're starting

00:18:13,130 --> 00:18:19,160
from scratch now containers support this

00:18:16,490 --> 00:18:22,280
because we have an environment where we

00:18:19,160 --> 00:18:25,490
can do this they also support it because

00:18:22,280 --> 00:18:29,150
again all of that work was done shifting

00:18:25,490 --> 00:18:30,830
left we've built the container image now

00:18:29,150 --> 00:18:32,960
we've built the container image with

00:18:30,830 --> 00:18:34,670
discipline you have to have a trust a

00:18:32,960 --> 00:18:37,310
container pipeline we'll talk about that

00:18:34,670 --> 00:18:40,640
in more in just a moment now notice that

00:18:37,310 --> 00:18:43,340
there's still malware on the host and it

00:18:40,640 --> 00:18:46,760
just so happens that this pattern that

00:18:43,340 --> 00:18:50,180
allows you to recreate these containers

00:18:46,760 --> 00:18:54,530
which is in the past Diego and in

00:18:50,180 --> 00:18:57,700
kubernetes in CF CR is kubernetes we

00:18:54,530 --> 00:19:02,030
have that same pattern built into what

00:18:57,700 --> 00:19:06,020
Bosch right so we can also throw away

00:19:02,030 --> 00:19:09,470
the VMs and stand up new does that make

00:19:06,020 --> 00:19:12,490
sense so you see how containers lend

00:19:09,470 --> 00:19:14,870
support it gives us a brand new

00:19:12,490 --> 00:19:17,240
primitive with which we can start to

00:19:14,870 --> 00:19:21,380
solve problems a different way and

00:19:17,240 --> 00:19:23,150
that's pretty darn cool all right and so

00:19:21,380 --> 00:19:25,460
we actually a pivotal we call this

00:19:23,150 --> 00:19:28,970
repaving the first scenario we call

00:19:25,460 --> 00:19:30,830
repair we call this repaving and I am

00:19:28,970 --> 00:19:36,140
suggesting that you do it proactively

00:19:30,830 --> 00:19:38,210
very often like every few days Lance if

00:19:36,140 --> 00:19:40,550
you if you chat with Lance and he's here

00:19:38,210 --> 00:19:42,260
I encourage you to seek him out he's

00:19:40,550 --> 00:19:43,850
doing this every three days right now on

00:19:42,260 --> 00:19:46,880
his platform he wants to move it up to

00:19:43,850 --> 00:19:49,850
every day so I'll tell you that I

00:19:46,880 --> 00:19:52,700
actually came as I mentioned to pivitol

00:19:49,850 --> 00:19:56,060
from EMC I came to EMC from Documentum

00:19:52,700 --> 00:19:56,450
any documentum folks out there just a

00:19:56,060 --> 00:19:59,300
few

00:19:56,450 --> 00:20:00,200
documentum content management systems we

00:19:59,300 --> 00:20:02,749
used to

00:20:00,200 --> 00:20:05,809
in back in those days it was all about

00:20:02,749 --> 00:20:07,879
stability we kept our machines up if and

00:20:05,809 --> 00:20:10,999
we like we kept account like a safety

00:20:07,879 --> 00:20:13,249
count like the number of days since I

00:20:10,999 --> 00:20:15,710
had to reboot my server was a hundred

00:20:13,249 --> 00:20:18,440
and eighty five we're doing great

00:20:15,710 --> 00:20:22,460
now if you've kept a server around 485

00:20:18,440 --> 00:20:24,320
days Oh little little skittish there you

00:20:22,460 --> 00:20:27,200
want it you're you're keeping containers

00:20:24,320 --> 00:20:32,389
around for sometimes just days or maybe

00:20:27,200 --> 00:20:34,340
even hours okay so I think I just

00:20:32,389 --> 00:20:38,059
accidentally went backwards

00:20:34,340 --> 00:20:39,980
sorry about that all right let's look at

00:20:38,059 --> 00:20:42,769
one more scenario and I'm gonna check my

00:20:39,980 --> 00:20:45,289
time okay cool

00:20:42,769 --> 00:20:48,080
and this is another one something like

00:20:45,289 --> 00:20:50,960
load balancer configuration now I

00:20:48,080 --> 00:20:52,460
realize that many of you because most of

00:20:50,960 --> 00:20:54,230
you raised your hand and said that

00:20:52,460 --> 00:20:56,929
you're doing some Cloud Foundry but I do

00:20:54,230 --> 00:20:59,090
know that we also have a track for new

00:20:56,929 --> 00:21:00,980
folks so bear with me those of you who

00:20:59,090 --> 00:21:02,649
are already know this bear with me I'm

00:21:00,980 --> 00:21:05,869
just gonna go through this very quickly

00:21:02,649 --> 00:21:06,289
where does where do containers help me

00:21:05,869 --> 00:21:08,480
with that

00:21:06,289 --> 00:21:11,029
now there is one other tidbit that I

00:21:08,480 --> 00:21:13,070
want to I want to share with you here so

00:21:11,029 --> 00:21:15,139
the way that we did things before what

00:21:13,070 --> 00:21:18,409
before we had kind of a container and a

00:21:15,139 --> 00:21:21,080
container platform was a typical

00:21:18,409 --> 00:21:24,830
deployment looked a little bit like this

00:21:21,080 --> 00:21:27,789
it was very workflow related so and by

00:21:24,830 --> 00:21:30,830
the way I work with customers that have

00:21:27,789 --> 00:21:33,049
they still have these pretty heavy-duty

00:21:30,830 --> 00:21:35,869
processes where they're promoting code

00:21:33,049 --> 00:21:38,389
into upper environments oh my gosh I'm

00:21:35,869 --> 00:21:40,489
so glad it's not my job I'm remembering

00:21:38,389 --> 00:21:42,830
one individual with one of our customers

00:21:40,489 --> 00:21:45,320
where I was somewhat involved with that

00:21:42,830 --> 00:21:48,619
project and we got together every week

00:21:45,320 --> 00:21:51,799
and when I say we it was myself the

00:21:48,619 --> 00:21:56,029
project manager Rodney and about 70

00:21:51,799 --> 00:21:59,869
other people on a weekly basis to go

00:21:56,029 --> 00:22:02,239
over a spreadsheet of 300 or so lines

00:21:59,869 --> 00:22:04,249
which were all the things that needed to

00:22:02,239 --> 00:22:07,999
be checked off before you could actually

00:22:04,249 --> 00:22:11,269
run this in production so what I'm

00:22:07,999 --> 00:22:13,430
talking about here still lives is still

00:22:11,269 --> 00:22:16,130
very much alive and well in the ant

00:22:13,430 --> 00:22:18,110
prai's and so this is greatly simplified

00:22:16,130 --> 00:22:20,930
it says okay well at the top of that

00:22:18,110 --> 00:22:22,610
list was do we provision machines and we

00:22:20,930 --> 00:22:25,280
do that maybe with some tickets and we

00:22:22,610 --> 00:22:27,500
install the operating system then we

00:22:25,280 --> 00:22:31,330
file a ticket to install the app I

00:22:27,500 --> 00:22:34,520
skipped a whole bunch of steps there

00:22:31,330 --> 00:22:36,860
then I file a ticket to configure the

00:22:34,520 --> 00:22:38,840
firewall or the load balancer or

00:22:36,860 --> 00:22:42,650
something like that and I do more things

00:22:38,840 --> 00:22:43,610
dot dot and then I'm done now there's

00:22:42,650 --> 00:22:45,620
two things

00:22:43,610 --> 00:22:48,380
remember that shifting left thing that I

00:22:45,620 --> 00:22:50,540
keep talking about well that's where the

00:22:48,380 --> 00:22:54,710
container comes in a lot of that again

00:22:50,540 --> 00:22:56,660
can be done very much earlier so that

00:22:54,710 --> 00:22:57,590
allows me not to have to do that with

00:22:56,660 --> 00:23:00,830
each deploy

00:22:57,590 --> 00:23:02,750
that's what allows me to not only be

00:23:00,830 --> 00:23:05,060
able to deploy software every hundred

00:23:02,750 --> 00:23:08,060
and eighty five days but to actually do

00:23:05,060 --> 00:23:09,950
it every single day is because I've

00:23:08,060 --> 00:23:16,220
already done this and I've done it in an

00:23:09,950 --> 00:23:17,870
innate and immutable signed binary and I

00:23:16,220 --> 00:23:20,780
have all sorts of things like harbour

00:23:17,870 --> 00:23:23,030
that is checking to make sure that the

00:23:20,780 --> 00:23:24,290
signatures are right and all of that now

00:23:23,030 --> 00:23:26,990
the other thing that I want to emphasize

00:23:24,290 --> 00:23:28,850
with you here and if you were to read my

00:23:26,990 --> 00:23:30,980
book you would probably get tired of

00:23:28,850 --> 00:23:33,950
this by the end of the book or hopefully

00:23:30,980 --> 00:23:35,480
not is that I I define cloud native

00:23:33,950 --> 00:23:38,660
software as that which is highly

00:23:35,480 --> 00:23:41,150
distributed and constantly changing that

00:23:38,660 --> 00:23:44,360
constantly changing part means that

00:23:41,150 --> 00:23:47,990
there is no such thing as done anymore

00:23:44,360 --> 00:23:49,820
so if you ever find yourself thinking ok

00:23:47,990 --> 00:23:53,780
I've done all of this and now I'm done

00:23:49,820 --> 00:23:56,630
with my deployment my voice is going to

00:23:53,780 --> 00:24:00,500
come into your head and say nope you are

00:23:56,630 --> 00:24:04,700
never done done is a fallacy in the

00:24:00,500 --> 00:24:07,880
cloud super super important so what does

00:24:04,700 --> 00:24:11,410
that look like here we've got let's say

00:24:07,880 --> 00:24:13,970
I've got two instances and the way that

00:24:11,410 --> 00:24:16,370
with the way that this is driven is the

00:24:13,970 --> 00:24:19,070
desired state in the actual state now

00:24:16,370 --> 00:24:20,720
I've drawn this picture here and it's

00:24:19,070 --> 00:24:22,760
labeled with kubernetes and it has

00:24:20,720 --> 00:24:25,580
things like kubernetes master replicas

00:24:22,760 --> 00:24:26,570
set of course those same base of that

00:24:25,580 --> 00:24:28,460
same basic DNA

00:24:26,570 --> 00:24:31,210
exists in the Cloud Foundry in the in

00:24:28,460 --> 00:24:33,740
the in the application runtime as well

00:24:31,210 --> 00:24:35,929
our desired state is I want two

00:24:33,740 --> 00:24:37,370
instances of this app running my actual

00:24:35,929 --> 00:24:39,019
state is that I have two instances

00:24:37,370 --> 00:24:44,570
running and my load balancer is

00:24:39,019 --> 00:24:47,059
configured I'm done except I'm not so

00:24:44,570 --> 00:24:49,250
the first thing is that I've lost an

00:24:47,059 --> 00:24:51,470
instance maybe because I'm doing a

00:24:49,250 --> 00:24:53,659
rolling upgrade or maybe I had an out of

00:24:51,470 --> 00:24:56,029
memory error but I've lost an instance

00:24:53,659 --> 00:24:57,919
and the first thing that I need to do is

00:24:56,029 --> 00:25:00,590
I need to have the load balancer

00:24:57,919 --> 00:25:03,379
automatically update itself there's a

00:25:00,590 --> 00:25:05,120
control loop that does that how is it

00:25:03,379 --> 00:25:08,120
that I can deal with things if I'm never

00:25:05,120 --> 00:25:11,059
done well I will tell you that

00:25:08,120 --> 00:25:14,330
kubernetes is a system of a whole bunch

00:25:11,059 --> 00:25:17,059
of infinite loops Cloud Foundry has

00:25:14,330 --> 00:25:18,830
those infinite loops too so

00:25:17,059 --> 00:25:21,200
Cloud Foundry has a loop that's

00:25:18,830 --> 00:25:24,080
constantly updating the load balancer it

00:25:21,200 --> 00:25:26,389
has a loop that's constantly updating

00:25:24,080 --> 00:25:28,100
the deployments so we've got all these

00:25:26,389 --> 00:25:30,710
control loops that are constantly

00:25:28,100 --> 00:25:35,960
running bringing things into the actual

00:25:30,710 --> 00:25:39,740
state so then of course I deploy the new

00:25:35,960 --> 00:25:41,929
application instance that came from the

00:25:39,740 --> 00:25:44,509
replica set controller and the scheduler

00:25:41,929 --> 00:25:46,870
and now that control loop that updates

00:25:44,509 --> 00:25:49,519
the load balancer that happens as well

00:25:46,870 --> 00:25:51,789
so these are the types of things that we

00:25:49,519 --> 00:25:56,690
can do because we have this primitive of

00:25:51,789 --> 00:25:58,730
a container alright so we did start just

00:25:56,690 --> 00:26:00,649
a few minutes late so I'm gonna go over

00:25:58,730 --> 00:26:02,029
a few minutes and keep my 30 minutes

00:26:00,649 --> 00:26:05,720
because I have 30 minutes worth of

00:26:02,029 --> 00:26:09,200
content but I am almost done so there

00:26:05,720 --> 00:26:11,299
are a whole host of other things that

00:26:09,200 --> 00:26:14,659
those are the things that are going to

00:26:11,299 --> 00:26:17,600
allow us to realize that business value

00:26:14,659 --> 00:26:21,289
that we did with virtual machines over

00:26:17,600 --> 00:26:23,330
the last 15 or 20 years and really up it

00:26:21,289 --> 00:26:25,009
from just being a developer productivity

00:26:23,330 --> 00:26:26,870
tool to being something that's

00:26:25,009 --> 00:26:29,419
generating tons and tons of business

00:26:26,870 --> 00:26:33,850
value so there's a whole host of other

00:26:29,419 --> 00:26:36,409
things now the question that remains is

00:26:33,850 --> 00:26:39,590
alright everything that I've talked

00:26:36,409 --> 00:26:40,370
about was around containers the question

00:26:39,590 --> 00:26:43,460
that remains

00:26:40,370 --> 00:26:46,880
now is which abstraction do I use to

00:26:43,460 --> 00:26:50,450
touch containers you're all doing

00:26:46,880 --> 00:26:52,400
containers but for the most part your

00:26:50,450 --> 00:26:54,620
application teams the ones that are

00:26:52,400 --> 00:26:56,900
building the apps and operating the apps

00:26:54,620 --> 00:26:59,780
aren't touching those containers at all

00:26:56,900 --> 00:27:02,960
and so one of the things that's really

00:26:59,780 --> 00:27:05,300
interesting and somewhat dangerous is

00:27:02,960 --> 00:27:08,420
that with the rise in popularity of

00:27:05,300 --> 00:27:10,820
kubernetes we have this like feeling

00:27:08,420 --> 00:27:13,429
like we all need to touch and touch

00:27:10,820 --> 00:27:16,670
those containers ourselves and of course

00:27:13,429 --> 00:27:19,280
we don't necessarily need to so let's

00:27:16,670 --> 00:27:21,770
talk about that and I only have a couple

00:27:19,280 --> 00:27:25,220
of slides here what I want to show you

00:27:21,770 --> 00:27:28,160
are two different specific things when

00:27:25,220 --> 00:27:30,920
we look at that contrast on the left

00:27:28,160 --> 00:27:33,440
hand side we have the notion that's a

00:27:30,920 --> 00:27:36,260
little bit closer to kubernetes and in

00:27:33,440 --> 00:27:40,600
that notion what we have is that the app

00:27:36,260 --> 00:27:43,730
team is providing the container image

00:27:40,600 --> 00:27:46,550
okay and so the container image isn't

00:27:43,730 --> 00:27:49,340
managed by the platform it's actually

00:27:46,550 --> 00:27:51,850
managed out-of-band out of the platform

00:27:49,340 --> 00:27:55,850
the platform here being kubernetes on

00:27:51,850 --> 00:27:57,770
the other side we have however and

00:27:55,850 --> 00:28:00,140
that's the developer on the left-hand

00:27:57,770 --> 00:28:02,420
side we have the people who are

00:28:00,140 --> 00:28:04,309
responsible for security compliance and

00:28:02,420 --> 00:28:07,040
all resilience cost and all of that

00:28:04,309 --> 00:28:09,410
stuff we'll call them the platform team

00:28:07,040 --> 00:28:10,490
on the right hand side and they say hang

00:28:09,410 --> 00:28:13,460
on a second

00:28:10,490 --> 00:28:15,740
I actually want to control parts of that

00:28:13,460 --> 00:28:18,440
I want to provide some of those things

00:28:15,740 --> 00:28:22,090
so that the application team is only

00:28:18,440 --> 00:28:25,100
providing that layer at the top now

00:28:22,090 --> 00:28:26,630
developer efficiency far stronger and

00:28:25,100 --> 00:28:29,540
the left-hand side I'll talk about that

00:28:26,630 --> 00:28:31,610
more in just a moment but your security

00:28:29,540 --> 00:28:33,230
posture on that remember I showed you

00:28:31,610 --> 00:28:36,590
how you could roll the kernel operating

00:28:33,230 --> 00:28:39,110
system well on the right-hand side of

00:28:36,590 --> 00:28:41,630
this picture and by the way I used the

00:28:39,110 --> 00:28:43,910
term trusted container pipeline in this

00:28:41,630 --> 00:28:47,240
case the trusted container pipeline is

00:28:43,910 --> 00:28:51,050
built into the platform it's built in to

00:28:47,240 --> 00:28:53,810
PA's and because it's built into pass I

00:28:51,050 --> 00:28:57,830
can now on the right hand side

00:28:53,810 --> 00:29:00,620
I'd do things like repair on a far

00:28:57,830 --> 00:29:03,620
greater part of what is running in my

00:29:00,620 --> 00:29:05,000
infrastructure on the left-hand side I

00:29:03,620 --> 00:29:07,940
can do it for the colonel operating

00:29:05,000 --> 00:29:09,830
system now you could potentially do it

00:29:07,940 --> 00:29:11,390
on other layers depending but now you

00:29:09,830 --> 00:29:13,370
have to build the trusted container

00:29:11,390 --> 00:29:16,340
pipeline and all the processes around

00:29:13,370 --> 00:29:19,400
that yourself all right

00:29:16,340 --> 00:29:22,790
and then finally here's the contrast

00:29:19,400 --> 00:29:26,390
between developer efficiency on the

00:29:22,790 --> 00:29:29,210
left-hand side we have the developer who

00:29:26,390 --> 00:29:33,230
is now like maybe it's saying a little

00:29:29,210 --> 00:29:36,890
bit more like what the heck with the W

00:29:33,230 --> 00:29:40,280
to a W th the G bar the PG version of

00:29:36,890 --> 00:29:41,780
that this is all the stuff that I need

00:29:40,280 --> 00:29:44,120
to do I need to create my container

00:29:41,780 --> 00:29:46,340
image I need to stick it in a repository

00:29:44,120 --> 00:29:48,740
I need to build a wall of yeah mol all

00:29:46,340 --> 00:29:51,140
just so that I can touch the container

00:29:48,740 --> 00:29:52,880
and use it on kubernetes on the right

00:29:51,140 --> 00:29:54,560
hand side we have a little bitty amyl -

00:29:52,880 --> 00:29:55,730
it's they'li emily you know and love

00:29:54,560 --> 00:29:58,160
it's what's in your Cloud Foundry

00:29:55,730 --> 00:30:01,070
manifest so you can see that there's a

00:29:58,160 --> 00:30:04,490
big contrast so there's absolutely no

00:30:01,070 --> 00:30:07,130
reason that you should oh I thought I

00:30:04,490 --> 00:30:09,950
hid that slide there's no reason that

00:30:07,130 --> 00:30:12,680
you should feel like you have to to use

00:30:09,950 --> 00:30:14,990
to touch the container yourself now

00:30:12,680 --> 00:30:17,720
where do you touch the container well

00:30:14,990 --> 00:30:19,970
here is at a very high level these are

00:30:17,720 --> 00:30:24,170
the workloads that run really well on

00:30:19,970 --> 00:30:27,050
paths net new cloud native applications

00:30:24,170 --> 00:30:29,390
microservices a lot of your existing

00:30:27,050 --> 00:30:33,620
application portfolio can get there with

00:30:29,390 --> 00:30:35,600
relative ease and then of course using

00:30:33,620 --> 00:30:37,700
Bosh we have some data services as well

00:30:35,600 --> 00:30:40,000
the ones that you have on the bottom

00:30:37,700 --> 00:30:42,740
things that are already containerized

00:30:40,000 --> 00:30:46,090
things that you don't have the software

00:30:42,740 --> 00:30:48,080
for like ISV software cots software

00:30:46,090 --> 00:30:50,270
existing more of your existing

00:30:48,080 --> 00:30:52,550
application portfolio that isn't worth

00:30:50,270 --> 00:30:54,350
putting any effort to refactor cuz

00:30:52,550 --> 00:30:57,170
you're going to retire it next year

00:30:54,350 --> 00:31:01,370
anyway or you don't have any developers

00:30:57,170 --> 00:31:03,770
that know the code anymore and some more

00:31:01,370 --> 00:31:06,230
stateful applications those are really

00:31:03,770 --> 00:31:06,610
well-suited where you need the

00:31:06,230 --> 00:31:09,040
additional

00:31:06,610 --> 00:31:13,480
control to use a different platform in

00:31:09,040 --> 00:31:17,500
either case you have the ability to take

00:31:13,480 --> 00:31:21,070
advantage of containers and that is what

00:31:17,500 --> 00:31:25,059
I mean by p2p to see the value of

00:31:21,070 --> 00:31:28,120
bringing everything to containers we are

00:31:25,059 --> 00:31:30,370
now roughly 80 90 % virtualized in most

00:31:28,120 --> 00:31:32,679
IT environments I don't think it's gonna

00:31:30,370 --> 00:31:35,140
take us 15 years I think five years from

00:31:32,679 --> 00:31:38,080
now we're gonna be 50% maybe

00:31:35,140 --> 00:31:40,720
containerized and we'll get to 70 or 80

00:31:38,080 --> 00:31:45,130
percent pretty quickly over the next few

00:31:40,720 --> 00:31:48,580
years with that I think that there was

00:31:45,130 --> 00:31:50,650
just a summary slide is it coming up and

00:31:48,580 --> 00:31:52,179
I will of course post these this just

00:31:50,650 --> 00:31:55,299
summarizes everything that I talked

00:31:52,179 --> 00:31:57,040
about and with that I thank you so much

00:31:55,299 --> 00:31:58,240
for your attention and I'll stick around

00:31:57,040 --> 00:32:00,460
for a few minutes for any other

00:31:58,240 --> 00:32:08,849
questions so thank you so much

00:32:00,460 --> 00:32:08,849

YouTube URL: https://www.youtube.com/watch?v=5kNxc-79seA


