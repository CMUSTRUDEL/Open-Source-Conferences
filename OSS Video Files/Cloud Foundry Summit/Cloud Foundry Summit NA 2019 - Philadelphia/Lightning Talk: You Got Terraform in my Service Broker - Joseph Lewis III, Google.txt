Title: Lightning Talk: You Got Terraform in my Service Broker - Joseph Lewis III, Google
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	Lightning Talk: You Got Terraform in my Service Broker - Joseph Lewis III, Google

Joseph will introduce Brokerpaks, a way for developers and operators to collaborate in designing their own services with Terraform that they can inject into the Cloud Foundry service catalog. Brokerpaks allow multi-cloud integration, faster turnaround, longer support, and a custom experience you can match to your organizationâ€™s structure.

About Joseph Lewis III
Joseph is a software engineer on Google's Cloud Graphite team. In this role, he focuses on building integrations between the Cloud Foundry ecosystem and GCP. Previously, he was a senior developer at Liberty Mutual where he developed apps on Cloud Foundry.
Joseph earned a MS in computer science from Purdue, and a BS from the University of Denver.

https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:04,319
all right three o'clock ready to go all

00:00:04,140 --> 00:00:06,839
right

00:00:04,319 --> 00:00:08,670
so hi everyone thanks for coming to the

00:00:06,839 --> 00:00:11,580
lightning talks my name is Joseph Lewis

00:00:08,670 --> 00:00:13,230
and I'm from Google I work on the GCP

00:00:11,580 --> 00:00:15,360
servers broker and everything I'm going

00:00:13,230 --> 00:00:17,750
to show you today you do not need a GCP

00:00:15,360 --> 00:00:20,910
account to do you can do it on Prem or

00:00:17,750 --> 00:00:24,000
wherever else because it's terraform and

00:00:20,910 --> 00:00:26,340
it's open source so you've probably seen

00:00:24,000 --> 00:00:28,320
the title slide if you want to contact

00:00:26,340 --> 00:00:29,760
me afterwards my email address will be

00:00:28,320 --> 00:00:32,250
in the bottom right of every slide so

00:00:29,760 --> 00:00:35,640
you can take a picture whenever I would

00:00:32,250 --> 00:00:36,930
love to chat with you so quickly we're

00:00:35,640 --> 00:00:39,450
gonna go over the problem with service

00:00:36,930 --> 00:00:41,010
brokers today a solution that I have

00:00:39,450 --> 00:00:43,890
proposed and we're actually running

00:00:41,010 --> 00:00:46,289
right now and then the implementation of

00:00:43,890 --> 00:00:47,940
that solution and hopefully in five

00:00:46,289 --> 00:00:49,890
minutes you will have an ideological

00:00:47,940 --> 00:00:53,219
shift and be like yes this is the way to

00:00:49,890 --> 00:00:55,829
do things going forward alright so I

00:00:53,219 --> 00:00:59,250
know everybody's system looks like this

00:00:55,829 --> 00:01:01,170
CF promises that all of your apps or you

00:00:59,250 --> 00:01:05,129
just need to push them all your services

00:01:01,170 --> 00:01:06,500
are managed you know your developers

00:01:05,129 --> 00:01:09,150
don't need to think about anything else

00:01:06,500 --> 00:01:12,570
but of course that is not the reality

00:01:09,150 --> 00:01:14,700
that most of us face so there's a lot of

00:01:12,570 --> 00:01:17,070
impediments to doing self service and

00:01:14,700 --> 00:01:19,259
service brokers so you've got the broker

00:01:17,070 --> 00:01:20,670
maintainer it's like me who get to

00:01:19,259 --> 00:01:22,710
decide what fields are available in

00:01:20,670 --> 00:01:24,119
which aren't you have differences

00:01:22,710 --> 00:01:26,400
between clouds that you need to take

00:01:24,119 --> 00:01:28,200
into account if you're doing multi cloud

00:01:26,400 --> 00:01:31,020
deployments or at least want to keep

00:01:28,200 --> 00:01:34,079
that those options open you have a lot

00:01:31,020 --> 00:01:37,200
of application inertia and other inertia

00:01:34,079 --> 00:01:39,570
from your on-prem platform and Cloud

00:01:37,200 --> 00:01:41,790
Foundry itself and then you also have

00:01:39,570 --> 00:01:43,170
stakeholders who can decide like thumbs

00:01:41,790 --> 00:01:45,780
up or thumbs down whether or not you're

00:01:43,170 --> 00:01:47,759
going to use the service which is is

00:01:45,780 --> 00:01:50,280
honestly pretty terrible for me because

00:01:47,759 --> 00:01:54,420
I have all the stakeholders from every

00:01:50,280 --> 00:01:55,680
company like no we need this field or no

00:01:54,420 --> 00:01:59,189
the service doesn't work for us because

00:01:55,680 --> 00:02:00,840
you added this field so everyone likes

00:01:59,189 --> 00:02:03,450
self-service but it's really hard to do

00:02:00,840 --> 00:02:07,649
in practice so what if we could make

00:02:03,450 --> 00:02:10,470
self-service self-serve and in comes the

00:02:07,649 --> 00:02:12,690
solution with the GCP service broker you

00:02:10,470 --> 00:02:15,180
can now bring your own services

00:02:12,690 --> 00:02:18,690
so what we've done is we've embedded

00:02:15,180 --> 00:02:20,720
terraform in the service broker and you

00:02:18,690 --> 00:02:24,090
can actually side load these at runtime

00:02:20,720 --> 00:02:27,030
so you can define services as terraform

00:02:24,090 --> 00:02:29,010
files and then your app developers can

00:02:27,030 --> 00:02:31,350
go in and the service broker will go and

00:02:29,010 --> 00:02:33,330
create a an instance of this and run

00:02:31,350 --> 00:02:35,310
terraform in the background go and

00:02:33,330 --> 00:02:36,900
create your infrastructure and then save

00:02:35,310 --> 00:02:38,220
the results in this database and then

00:02:36,900 --> 00:02:41,400
pass back their credentials that are

00:02:38,220 --> 00:02:42,930
created and i'm calling this technology

00:02:41,400 --> 00:02:44,550
broker packs and there are

00:02:42,930 --> 00:02:46,260
self-contained service broker plugins

00:02:44,550 --> 00:02:49,440
they use terraformed provision

00:02:46,260 --> 00:02:52,260
user-defined services and so the

00:02:49,440 --> 00:02:54,720
workflow that i'm pitching is this your

00:02:52,260 --> 00:02:57,810
developers know what is best for your

00:02:54,720 --> 00:03:00,090
ecosystem and everybody's ecosystem is

00:02:57,810 --> 00:03:02,370
going to be a little bit different so

00:03:00,090 --> 00:03:04,290
what they can do is they can use broker

00:03:02,370 --> 00:03:06,950
packs and create services that they want

00:03:04,290 --> 00:03:09,120
to use for example let's say you have a

00:03:06,950 --> 00:03:12,420
RabbitMQ that's shared across the entire

00:03:09,120 --> 00:03:14,910
company and has HR data coming in so

00:03:12,420 --> 00:03:16,800
that's a very special case tailored

00:03:14,910 --> 00:03:19,860
specifically to your company they could

00:03:16,800 --> 00:03:22,680
create a service using the terraform

00:03:19,860 --> 00:03:24,590
RabbitMQ provider and some yeah Mille

00:03:22,680 --> 00:03:27,450
and then they commit it to your git repo

00:03:24,590 --> 00:03:29,580
you use your CI to pull in all the

00:03:27,450 --> 00:03:31,680
services all the custom services from

00:03:29,580 --> 00:03:33,000
there and create a broker pack with it

00:03:31,680 --> 00:03:35,850
which is stored an artifact repository

00:03:33,000 --> 00:03:39,060
and all it needs to be is like a GCS

00:03:35,850 --> 00:03:41,790
bucket or s3 or available over HTTP

00:03:39,060 --> 00:03:44,130
so like artifactory and then the service

00:03:41,790 --> 00:03:46,440
broker you just point it at that

00:03:44,130 --> 00:03:47,700
artifact you reboot it and then your

00:03:46,440 --> 00:03:50,970
services are available in this yet

00:03:47,700 --> 00:03:54,660
marketplace and the broker pack itself

00:03:50,970 --> 00:03:57,660
is terraform binaries service

00:03:54,660 --> 00:03:59,489
definitions which are gamal and then all

00:03:57,660 --> 00:04:00,900
the fun legal stuff which is the sources

00:03:59,489 --> 00:04:05,340
to rebuild the binaries so you can

00:04:00,900 --> 00:04:06,959
redistribute these just fine and if you

00:04:05,340 --> 00:04:09,150
want to go and implement your own you

00:04:06,959 --> 00:04:11,280
can run GCP service broker packing it

00:04:09,150 --> 00:04:13,050
and it's kind of like get in it it'll

00:04:11,280 --> 00:04:16,709
create an example service definition and

00:04:13,050 --> 00:04:17,880
manifest you can run pack build to

00:04:16,709 --> 00:04:19,890
bundle all this together

00:04:17,880 --> 00:04:22,620
grab the terraform binaries and sources

00:04:19,890 --> 00:04:24,180
and generate an artifact and then you

00:04:22,620 --> 00:04:26,639
can upload that to your artefact manager

00:04:24,180 --> 00:04:28,349
and use it and then we also have

00:04:26,639 --> 00:04:30,719
tools for running integration tests so

00:04:28,349 --> 00:04:32,819
every service that your developers

00:04:30,719 --> 00:04:34,560
create will have examples that will show

00:04:32,819 --> 00:04:37,110
up in the docs but they are also used as

00:04:34,560 --> 00:04:38,789
the integration test for that service we

00:04:37,110 --> 00:04:41,610
can generate markdown documentation you

00:04:38,789 --> 00:04:43,560
can copy into your wiki and then just

00:04:41,610 --> 00:04:45,800
some general information about the like

00:04:43,560 --> 00:04:50,370
the version and metadata about the PAC

00:04:45,800 --> 00:04:51,840
so thank you take a photo of that URL if

00:04:50,370 --> 00:04:54,770
you want to learn more and the full

00:04:51,840 --> 00:04:54,770
specification is there

00:04:56,260 --> 00:05:01,350

YouTube URL: https://www.youtube.com/watch?v=BXIvzEfHil0


