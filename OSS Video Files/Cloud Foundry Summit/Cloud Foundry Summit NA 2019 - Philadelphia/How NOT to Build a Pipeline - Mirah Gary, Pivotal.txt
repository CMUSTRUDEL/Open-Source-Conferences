Title: How NOT to Build a Pipeline - Mirah Gary, Pivotal
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	How NOT to Build a Pipeline - Mirah Gary, Pivotal

Pipelines are the infrastructure we use to test and deliver our code. We work with them every day, but sometimes they behave in unexpected ways. 

We will go over common failure modes and issues encountered in Concourse pipleines, and understand what we can do to prevent and solve these pain points. 

Being able to build pipelines that work for you is critical for effective dev/ops. By sharing our own mistakes, we hope that the audience will be able to recognize them when they happen and know what to do to fix the problems. 

After this talk, attendees will:
- be familiar common mistakes found in pipelines and how to recognize and correct them
- be able to build pipelines that facilitate the development process rather than hinder it
- understand how to refactor and improve their pipelines

About Mirah Gary
Mirah is a senior software engineer at Pivotal, where she works on the Platform Recovery team, where she builds pipelines and products to help operators prepare for and recover from disasters. Prior to coming to Pivotal, Mirah was a theoretical physicist and pondered the deepest mysteries of the universe.

https://www.cloudfoundry.org/
Captions: 
	00:00:00,000 --> 00:00:03,200
all right I'm gonna go ahead and get

00:00:01,230 --> 00:00:06,839
started so I don't keep you during lunch

00:00:03,200 --> 00:00:09,450
I'm Mira Gary and I work at divot 'el

00:00:06,839 --> 00:00:11,040
and this talk was written in

00:00:09,450 --> 00:00:13,230
collaboration with Josh Hill who

00:00:11,040 --> 00:00:14,849
unfortunately can't be here because he

00:00:13,230 --> 00:00:16,440
has kids and traveling to the States is

00:00:14,849 --> 00:00:18,960
too far for him we're in the London

00:00:16,440 --> 00:00:22,170
office and it's based on our experiences

00:00:18,960 --> 00:00:24,449
on the platform recovery team which

00:00:22,170 --> 00:00:27,090
builds BB R which is a tool some of you

00:00:24,449 --> 00:00:29,960
might be familiar with anyways

00:00:27,090 --> 00:00:32,040
so here's how not to build a pipeline

00:00:29,960 --> 00:00:44,190
lessons learned from doing it wrong

00:00:32,040 --> 00:00:48,950
repeatedly clicker is the site to stop

00:00:44,190 --> 00:00:48,950
working and I've lost my mouse that is

00:00:49,550 --> 00:00:55,320
so the talk is put into two parts part

00:00:53,250 --> 00:00:57,059
one is mostly about build anti-patterns

00:00:55,320 --> 00:01:00,270
so things that can go wrong in an

00:00:57,059 --> 00:01:03,090
individual job or task and then part two

00:01:00,270 --> 00:01:06,330
is flow anti-patterns so things that you

00:01:03,090 --> 00:01:08,760
can do wrong connecting your pipelines

00:01:06,330 --> 00:01:10,260
together obviously like you know

00:01:08,760 --> 00:01:13,830
connecting pipelines together is an

00:01:10,260 --> 00:01:18,869
important part of pipelines so yeah so

00:01:13,830 --> 00:01:20,990
part one is builds builds Pass it's

00:01:18,869 --> 00:01:24,500
great everyone loves it when it passes

00:01:20,990 --> 00:01:27,960
and builds fail that's also okay

00:01:24,500 --> 00:01:30,079
totally fine like sometimes your tests

00:01:27,960 --> 00:01:32,610
don't pass and it's good that you failed

00:01:30,079 --> 00:01:34,530
but then sometimes you get an error and

00:01:32,610 --> 00:01:36,900
you know if you're using Concours this

00:01:34,530 --> 00:01:38,250
talk is mostly focused on Concours

00:01:36,900 --> 00:01:42,420
because that's the tool we use to run

00:01:38,250 --> 00:01:45,509
our pipelines and if you error and

00:01:42,420 --> 00:01:48,420
Concours turns all orange on you that is

00:01:45,509 --> 00:01:54,060
not a place you want to be errors are

00:01:48,420 --> 00:01:55,680
wrong so uh yeah the visual is that it's

00:01:54,060 --> 00:01:58,320
gone Orange I unfortunately don't have a

00:01:55,680 --> 00:02:00,000
picture of one even though actually the

00:01:58,320 --> 00:02:02,880
team I'm on right now did for a while

00:02:00,000 --> 00:02:05,009
have a lot of those orange builds yeah

00:02:02,880 --> 00:02:07,829
usually that means you've misconfigured

00:02:05,009 --> 00:02:10,860
something and to fix it you can just

00:02:07,829 --> 00:02:11,670
like correct the pipeline definition so

00:02:10,860 --> 00:02:13,350
some examples

00:02:11,670 --> 00:02:14,910
you got the wrong cord

00:02:13,350 --> 00:02:17,400
Scholz so you like tried to log into

00:02:14,910 --> 00:02:20,280
your your repo and it just like errored

00:02:17,400 --> 00:02:23,310
or you get a typo in the task name

00:02:20,280 --> 00:02:25,890
that's a fun one like it's just like

00:02:23,310 --> 00:02:27,770
nope that no there's no task you get an

00:02:25,890 --> 00:02:31,080
error

00:02:27,770 --> 00:02:34,080
another fun gotcha so if you're using

00:02:31,080 --> 00:02:37,950
Concours and you're using the the get

00:02:34,080 --> 00:02:40,080
resource github has an api limit if

00:02:37,950 --> 00:02:42,390
you're not authenticated and the get

00:02:40,080 --> 00:02:45,060
resource pulls just frequently enough

00:02:42,390 --> 00:02:47,280
that you hit this rate limit and so your

00:02:45,060 --> 00:02:49,320
your builds will also go orange if you

00:02:47,280 --> 00:02:52,110
don't die then ticket so easy fix for

00:02:49,320 --> 00:02:55,440
that just just log in to github at a

00:02:52,110 --> 00:02:59,130
private key problem solved you know just

00:02:55,440 --> 00:03:03,150
make one for your your CI another fun

00:02:59,130 --> 00:03:06,390
one errors are wrong but keeping on

00:03:03,150 --> 00:03:08,310
flowing for without you know things fail

00:03:06,390 --> 00:03:11,400
then you just say it's okay that's also

00:03:08,310 --> 00:03:13,860
wrong we've we've seen this one before

00:03:11,400 --> 00:03:15,570
the the error happened actually at the

00:03:13,860 --> 00:03:17,280
deploy stage but like nothing went wrong

00:03:15,570 --> 00:03:18,690
until you got to the run stage and

00:03:17,280 --> 00:03:20,220
you're like you got to look at the run

00:03:18,690 --> 00:03:23,160
task and you're like what's wrong oh

00:03:20,220 --> 00:03:25,910
that there's just no environment at all

00:03:23,160 --> 00:03:29,520
to be testing and like what are we doing

00:03:25,910 --> 00:03:35,970
if your task fails it should actually

00:03:29,520 --> 00:03:37,860
fail so uh tasks should fail yeah and

00:03:35,970 --> 00:03:40,290
their code so you should treat them like

00:03:37,860 --> 00:03:45,000
code and test them your tasks need to be

00:03:40,290 --> 00:03:47,880
tested and test the unhappy pads to make

00:03:45,000 --> 00:03:49,320
sure that if you know things are going

00:03:47,880 --> 00:03:53,420
wrong and failing that your task

00:03:49,320 --> 00:03:58,380
actually fails so your pipeline stops

00:03:53,420 --> 00:04:01,470
another fun one bad bash so we write a

00:03:58,380 --> 00:04:03,150
lot of our tasks in bash and then you'll

00:04:01,470 --> 00:04:07,500
use that as the glue to hold everything

00:04:03,150 --> 00:04:09,330
the other and run everything shell check

00:04:07,500 --> 00:04:11,970
is your friend shell check will tell you

00:04:09,330 --> 00:04:12,660
about when you've done something wrong

00:04:11,970 --> 00:04:16,950
in bash

00:04:12,660 --> 00:04:18,420
this example here I'm sure our variable

00:04:16,950 --> 00:04:20,700
slash star you know shell check will

00:04:18,420 --> 00:04:23,940
scream at you because that can explain

00:04:20,700 --> 00:04:26,130
expanded RM dash RF slash star if

00:04:23,940 --> 00:04:27,360
variables unset this example was

00:04:26,130 --> 00:04:33,389
actually

00:04:27,360 --> 00:04:36,689
every Bosch director great you don't

00:04:33,389 --> 00:04:40,169
want to run that yeah

00:04:36,689 --> 00:04:42,990
also set if you're doing using - set -

00:04:40,169 --> 00:04:44,879
EU and set - Oh pipe fail all these

00:04:42,990 --> 00:04:49,590
things will like ensure that your tasks

00:04:44,879 --> 00:04:50,610
fail if something goes wrong yeah - e

00:04:49,590 --> 00:04:54,240
exits on error

00:04:50,610 --> 00:04:57,569
- u exits with an unsettle so in this

00:04:54,240 --> 00:05:01,080
case if Farah was on the set you would

00:04:57,569 --> 00:05:05,610
just exit instead of our Mr effing slash

00:05:01,080 --> 00:05:09,990
and - so pipe fail exits when a pipe

00:05:05,610 --> 00:05:15,930
fails okay here's another one

00:05:09,990 --> 00:05:21,150
I think failed but what went wrong

00:05:15,930 --> 00:05:22,650
anyone know I don't know there's no

00:05:21,150 --> 00:05:24,659
output it failed

00:05:22,650 --> 00:05:26,819
I have no idea what went wrong you got

00:05:24,659 --> 00:05:28,949
it like you don't want to have to hijack

00:05:26,819 --> 00:05:32,969
or I guess the the correct term now is

00:05:28,949 --> 00:05:34,259
um intercept a container to uh to figure

00:05:32,969 --> 00:05:37,199
out what went wrong you should output

00:05:34,259 --> 00:05:41,400
debugging output so you can debug your

00:05:37,199 --> 00:05:43,169
tasks when they fail like you know so

00:05:41,400 --> 00:05:44,339
the treatment for that is that you know

00:05:43,169 --> 00:05:46,229
a lot of things to standard out and

00:05:44,339 --> 00:05:49,589
standard error Concours will just print

00:05:46,229 --> 00:05:51,870
them up for you one convenient way to do

00:05:49,589 --> 00:05:54,569
this is to set + X and then every

00:05:51,870 --> 00:05:56,669
command that you run is displayed but

00:05:54,569 --> 00:05:58,349
that's also a little unsafe because if

00:05:56,669 --> 00:06:00,719
you've got creds going into your

00:05:58,349 --> 00:06:05,039
commands then they're now suddenly

00:06:00,719 --> 00:06:06,599
printed in your concours concours is not

00:06:05,039 --> 00:06:07,860
like the most secure thing in the world

00:06:06,599 --> 00:06:10,259
maybe you don't want to leak your creds

00:06:07,860 --> 00:06:13,139
so be careful with that one but yeah

00:06:10,259 --> 00:06:18,930
generally more output is better than

00:06:13,139 --> 00:06:21,270
less output here's a good one

00:06:18,930 --> 00:06:24,659
flakes this is a picture of an actual

00:06:21,270 --> 00:06:27,569
pipeline and all those red jobs those

00:06:24,659 --> 00:06:30,270
aren't actual failures we were having

00:06:27,569 --> 00:06:32,520
some real fun networking issues and so

00:06:30,270 --> 00:06:36,289
things were just like dying because the

00:06:32,520 --> 00:06:36,289
network would just drop the connection

00:06:37,210 --> 00:06:42,639
it's not good because if you have flakes

00:06:40,120 --> 00:06:43,900
you learn to ignore them and just you're

00:06:42,639 --> 00:06:48,100
like oh it's fine I just run it again

00:06:43,900 --> 00:06:49,990
and you can hide real problems so you

00:06:48,100 --> 00:06:51,639
really always need to investigate them a

00:06:49,990 --> 00:06:55,800
good example actually have a real life

00:06:51,639 --> 00:06:58,479
flake so my girlfriend has a little

00:06:55,800 --> 00:07:01,539
detect a sensor on her door to tell if

00:06:58,479 --> 00:07:03,580
the door is open but it's not that well

00:07:01,539 --> 00:07:05,050
attached to the door so sometimes it

00:07:03,580 --> 00:07:06,490
just goes off and that like sends you a

00:07:05,050 --> 00:07:08,229
notification the door is open you're

00:07:06,490 --> 00:07:11,020
like that's fine the doors closed

00:07:08,229 --> 00:07:13,090
everything's fine well she was going

00:07:11,020 --> 00:07:14,620
away on a work trip and like you know

00:07:13,090 --> 00:07:17,020
she had just left and then I got this

00:07:14,620 --> 00:07:18,699
notification that the door was open and

00:07:17,020 --> 00:07:21,729
I'm like yeah it's fine

00:07:18,699 --> 00:07:24,400
who cares and she messages me and she's

00:07:21,729 --> 00:07:25,990
like can you check my door I was in and

00:07:24,400 --> 00:07:27,160
out like three times so I kept

00:07:25,990 --> 00:07:30,340
forgetting things and I'm not actually

00:07:27,160 --> 00:07:31,870
sure I shut the door and like okay so I

00:07:30,340 --> 00:07:35,560
went over to her house and yeah the door

00:07:31,870 --> 00:07:39,340
was open like hotdog flakes because they

00:07:35,560 --> 00:07:40,990
can be hiding real errors and you know

00:07:39,340 --> 00:07:43,479
if you're just ignoring things because

00:07:40,990 --> 00:07:50,110
oh it's just a flake you might miss the

00:07:43,479 --> 00:07:52,840
real the real signal another problem

00:07:50,110 --> 00:07:54,550
copypasta I mean like yeah there's a lot

00:07:52,840 --> 00:07:56,620
of things like you know your copy/paste

00:07:54,550 --> 00:07:58,000
things and you end up with like three

00:07:56,620 --> 00:07:59,560
different tasks that are almost

00:07:58,000 --> 00:08:04,199
identical and they just like take some

00:07:59,560 --> 00:08:04,199
you know one slightly different config

00:08:06,780 --> 00:08:12,190
yeah no infrastructure as code is still

00:08:09,909 --> 00:08:13,990
code all of you know the normal things

00:08:12,190 --> 00:08:16,810
that we do with code apply to it you can

00:08:13,990 --> 00:08:19,810
refactor it this this task here needs

00:08:16,810 --> 00:08:25,030
refactoring we can just make one task

00:08:19,810 --> 00:08:26,560
and then use input mapping to like you

00:08:25,030 --> 00:08:28,240
know you make a general input and then

00:08:26,560 --> 00:08:29,919
use input mapping to specify the

00:08:28,240 --> 00:08:32,800
specific one there's also output mapping

00:08:29,919 --> 00:08:35,110
does the same thing on outputs but yeah

00:08:32,800 --> 00:08:37,000
it lets you write you know general tasks

00:08:35,110 --> 00:08:39,849
with a very small API and then you can

00:08:37,000 --> 00:08:43,000
just make it very specific by using

00:08:39,849 --> 00:08:47,800
input mapping and just yeah refactor

00:08:43,000 --> 00:08:50,350
your tests another one another come and

00:08:47,800 --> 00:08:50,950
copy path stuff this is actually sort of

00:08:50,350 --> 00:08:53,680
more flow

00:08:50,950 --> 00:08:55,420
but you know you know sometimes you're

00:08:53,680 --> 00:08:56,920
like oh we need to add another step to

00:08:55,420 --> 00:08:58,600
this thing so I'm just gonna copy this

00:08:56,920 --> 00:09:00,400
piece of yamo and paste it into the

00:08:58,600 --> 00:09:02,200
other piece of yamo and now I got a new

00:09:00,400 --> 00:09:03,490
pipeline config and then you apply it

00:09:02,200 --> 00:09:05,530
and everything's great and then you look

00:09:03,490 --> 00:09:07,480
at it and you're like wait that's not

00:09:05,530 --> 00:09:09,430
right

00:09:07,480 --> 00:09:11,530
I wanted to configure things before I

00:09:09,430 --> 00:09:15,520
ran the tests not in parallel with the

00:09:11,530 --> 00:09:17,620
tests yeah so when you copy and paste

00:09:15,520 --> 00:09:20,440
things like you know I actually edit

00:09:17,620 --> 00:09:22,600
them to don't just copy paste you can

00:09:20,440 --> 00:09:24,310
you can look at your pipeline and you'll

00:09:22,600 --> 00:09:27,100
just see it looks wrong that things are

00:09:24,310 --> 00:09:29,890
like not flowing the way you wanted yeah

00:09:27,100 --> 00:09:31,060
not great but easy to fix you just you

00:09:29,890 --> 00:09:38,590
know go edit your animal and set

00:09:31,060 --> 00:09:40,720
pipeline again you should be able to run

00:09:38,590 --> 00:09:42,880
tasks again and again and again concours

00:09:40,720 --> 00:09:44,980
really helps you a lot with this because

00:09:42,880 --> 00:09:47,680
it runs things in fresh container images

00:09:44,980 --> 00:09:50,170
it's very repeatable but like if your

00:09:47,680 --> 00:09:53,320
tasks have side effects like they push

00:09:50,170 --> 00:09:55,300
to github or something maybe it's not so

00:09:53,320 --> 00:09:57,580
repeatable and you should really like

00:09:55,300 --> 00:09:59,320
make sure that your jobs are item potent

00:09:57,580 --> 00:10:01,930
and so you can run it again and again

00:09:59,320 --> 00:10:03,940
and again and that way you know you can

00:10:01,930 --> 00:10:06,700
just you're not worrying about building

00:10:03,940 --> 00:10:08,320
up state and cruft and if you have state

00:10:06,700 --> 00:10:10,390
that you need to build up that should

00:10:08,320 --> 00:10:12,370
live in resources which we'll talk about

00:10:10,390 --> 00:10:14,380
more in a little bit but those are the

00:10:12,370 --> 00:10:16,300
pipes that flow through your pipeline

00:10:14,380 --> 00:10:20,830
that's where your state should live it

00:10:16,300 --> 00:10:22,390
shouldn't like live in your tasks yeah

00:10:20,830 --> 00:10:24,610
very important that we can run things

00:10:22,390 --> 00:10:27,040
again and again and again so like an

00:10:24,610 --> 00:10:29,110
example of this we actually wrote a task

00:10:27,040 --> 00:10:30,790
that pushed to get because we were using

00:10:29,110 --> 00:10:33,790
git crypt and at the time the git

00:10:30,790 --> 00:10:35,920
resource didn't support get crypt and it

00:10:33,790 --> 00:10:37,120
would like it was usually fine and then

00:10:35,920 --> 00:10:39,100
sometimes something would go slightly

00:10:37,120 --> 00:10:40,750
wrong and like all of our git repos were

00:10:39,100 --> 00:10:43,180
completely garbled and you had to go

00:10:40,750 --> 00:10:44,560
manually unguardable them and so you

00:10:43,180 --> 00:10:46,450
couldn't run the thing again until you

00:10:44,560 --> 00:10:49,690
unguardable the git repos cuz that you

00:10:46,450 --> 00:10:52,300
know you just pushed like encrypted

00:10:49,690 --> 00:10:55,590
nonsense in a way that overrode

00:10:52,300 --> 00:10:57,760
everything with encrypted nonsense so

00:10:55,590 --> 00:10:59,440
thankfully we were able to fix that and

00:10:57,760 --> 00:11:01,780
we made a PR to the git resource and now

00:10:59,440 --> 00:11:04,540
it's ports get crypt but yeah if you

00:11:01,780 --> 00:11:06,190
have state

00:11:04,540 --> 00:11:11,130
you should put that in a resource don't

00:11:06,190 --> 00:11:14,290
put it in the task oh here's another one

00:11:11,130 --> 00:11:17,590
this job actually failed not because of

00:11:14,290 --> 00:11:20,140
anything wrong in the job but because we

00:11:17,590 --> 00:11:22,180
were using an s3 bucket and the s3

00:11:20,140 --> 00:11:23,830
bucket oh actually we were yeah every

00:11:22,180 --> 00:11:27,340
time we ran the test it made a new s3

00:11:23,830 --> 00:11:29,860
bucket as part of the test and then it

00:11:27,340 --> 00:11:31,450
never deleted the s3 bucket and you can

00:11:29,860 --> 00:11:35,530
only have a hundred s3 buckets on an

00:11:31,450 --> 00:11:38,110
account so time number 101 when we ran

00:11:35,530 --> 00:11:39,790
this this test you know we're like oh

00:11:38,110 --> 00:11:40,870
we've made another change of code let's

00:11:39,790 --> 00:11:42,720
just run it and then it'll week failed

00:11:40,870 --> 00:11:45,580
and you know like what went wrong oh

00:11:42,720 --> 00:11:48,400
well we never cleaned up those buckets

00:11:45,580 --> 00:11:54,250
so we added a step now to clean up those

00:11:48,400 --> 00:11:57,700
buckets and now this works yeah so like

00:11:54,250 --> 00:11:59,770
other similar things are sometimes you

00:11:57,700 --> 00:12:02,320
have quotas on things anytime you have a

00:11:59,770 --> 00:12:04,210
quota like how many VMs can you deploy

00:12:02,320 --> 00:12:06,190
in an AZ if you're deploying stuff make

00:12:04,210 --> 00:12:10,060
sure you delete them afterwards because

00:12:06,190 --> 00:12:17,410
otherwise you can run out yeah yeah and

00:12:10,060 --> 00:12:20,050
just automate your cleanup all right on

00:12:17,410 --> 00:12:21,220
to flow more interesting part because

00:12:20,050 --> 00:12:23,140
this is where you glue all things

00:12:21,220 --> 00:12:24,250
together and your pipelines actually

00:12:23,140 --> 00:12:27,160
whoa

00:12:24,250 --> 00:12:29,110
right pipelines went and when

00:12:27,160 --> 00:12:31,300
everything's green everything flows and

00:12:29,110 --> 00:12:32,950
you're happy and you ship products and

00:12:31,300 --> 00:12:40,110
you continuously deliver everything and

00:12:32,950 --> 00:12:40,110
we're in the world of dreams yeah

00:12:44,130 --> 00:12:51,640
yeah but great love it this is actually

00:12:47,770 --> 00:12:53,920
a pipeline that builds some a CLI it has

00:12:51,640 --> 00:12:57,130
some unit tests some integration tests a

00:12:53,920 --> 00:12:58,810
variety of system tests and then it at

00:12:57,130 --> 00:13:04,510
the very end it cuts a release and

00:12:58,810 --> 00:13:06,610
publishes it it's wonderful pipelines

00:13:04,510 --> 00:13:08,950
can also fail and block and nothing

00:13:06,610 --> 00:13:10,600
flows this is great you know if

00:13:08,950 --> 00:13:12,490
something's wrong you don't chip it

00:13:10,600 --> 00:13:15,460
perfect you don't want to publish a new

00:13:12,490 --> 00:13:18,070
version of a thing if it's wrong and so

00:13:15,460 --> 00:13:22,290
you know if something fails yeah it

00:13:18,070 --> 00:13:24,490
fails and it blocks until you fix it and

00:13:22,290 --> 00:13:27,100
the first rule of a pipeline is that

00:13:24,490 --> 00:13:28,960
everything has to pass at every step in

00:13:27,100 --> 00:13:32,710
order to reach the end that's that's why

00:13:28,960 --> 00:13:35,530
it's a pipeline and concours does

00:13:32,710 --> 00:13:40,690
exactly what we tell it to do in the

00:13:35,530 --> 00:13:43,710
definition but uh sometimes sometimes

00:13:40,690 --> 00:13:43,710
you end up with nonsense

00:13:46,020 --> 00:13:49,750
sometimes this often happens because

00:13:47,920 --> 00:13:51,220
pipelines are opinions we have like

00:13:49,750 --> 00:13:53,170
opinions about which tests should run

00:13:51,220 --> 00:13:58,000
when and what tests we should be running

00:13:53,170 --> 00:14:03,010
and sometimes our opinions change so uh

00:13:58,000 --> 00:14:04,630
yeah plumbing here's what the first

00:14:03,010 --> 00:14:09,930
section of that that pipeline I showed

00:14:04,630 --> 00:14:12,850
you looked like about nine months ago

00:14:09,930 --> 00:14:16,360
there was a small change that flowed

00:14:12,850 --> 00:14:19,410
through and our test that ran system

00:14:16,360 --> 00:14:22,390
tests against a Bosch director failed

00:14:19,410 --> 00:14:24,610
and we're like okay and we looked at it

00:14:22,390 --> 00:14:28,960
and we're like well what went wrong well

00:14:24,610 --> 00:14:30,220
there was no Bosch director and so we

00:14:28,960 --> 00:14:36,280
started trying to figure out like

00:14:30,220 --> 00:14:37,870
where'd the Bosch director go well then

00:14:36,280 --> 00:14:40,390
then we looked around we're like oh oh

00:14:37,870 --> 00:14:42,280
oh that's actually quite clever we we

00:14:40,390 --> 00:14:44,440
automated deploying the Bosch director

00:14:42,280 --> 00:14:47,920
that's great we can just click that and

00:14:44,440 --> 00:14:49,930
run it and bring it back but uh it's

00:14:47,920 --> 00:14:52,290
very thankful that early ourselves

00:14:49,930 --> 00:14:54,520
remembered to like automate this but uh

00:14:52,290 --> 00:14:55,450
so we ran that and everything worked

00:14:54,520 --> 00:14:59,470
again it was fine

00:14:55,450 --> 00:15:04,870
but maybe that should have run

00:14:59,470 --> 00:15:06,610
beforehand this is no pipe so the deploy

00:15:04,870 --> 00:15:08,350
Bosch director should have happened

00:15:06,610 --> 00:15:12,130
before we ran the tests against the

00:15:08,350 --> 00:15:14,530
Bosch director and the visual on that is

00:15:12,130 --> 00:15:17,530
that the jobs weren't linked and to fix

00:15:14,530 --> 00:15:19,300
it we just made a resource and we added

00:15:17,530 --> 00:15:21,430
a past constraint and now everything's

00:15:19,300 --> 00:15:24,070
great the Bosch director has to be

00:15:21,430 --> 00:15:31,390
deployed before we run the tests against

00:15:24,070 --> 00:15:33,940
it perfect okay so that's what it looked

00:15:31,390 --> 00:15:36,580
like after we added that past constraint

00:15:33,940 --> 00:15:40,570
now the deploy box director happened

00:15:36,580 --> 00:15:43,540
before the system tests but it's a it's

00:15:40,570 --> 00:15:46,810
a loose dependency that there's a dashed

00:15:43,540 --> 00:15:49,360
line going through not a solid line so

00:15:46,810 --> 00:15:51,670
that means that you know it has to have

00:15:49,360 --> 00:15:57,580
happened already but it doesn't trigger

00:15:51,670 --> 00:16:01,000
it and then we started thinking a little

00:15:57,580 --> 00:16:05,170
more like hmm that's right and it turns

00:16:01,000 --> 00:16:08,080
out that the test releases are actually

00:16:05,170 --> 00:16:09,730
a prerequisite for the system tests but

00:16:08,080 --> 00:16:11,950
right now when we make changes those

00:16:09,730 --> 00:16:14,950
test releases it didn't trigger and so

00:16:11,950 --> 00:16:17,680
we could actually cut a release without

00:16:14,950 --> 00:16:21,550
testing everything which is not great we

00:16:17,680 --> 00:16:23,920
were missing builds so we had to add a

00:16:21,550 --> 00:16:26,800
trigger there to make sure it triggered

00:16:23,920 --> 00:16:31,330
automatically on the previous job so now

00:16:26,800 --> 00:16:33,160
it's a solid line all right fans so

00:16:31,330 --> 00:16:35,140
sometimes you have lots and lots and

00:16:33,160 --> 00:16:36,810
lots of tests and things fan out and fan

00:16:35,140 --> 00:16:41,410
and complicated

00:16:36,810 --> 00:16:43,390
so here is another pipeline I don't know

00:16:41,410 --> 00:16:45,400
how well you can see that but you know

00:16:43,390 --> 00:16:46,930
there's all these tests that run in

00:16:45,400 --> 00:16:49,780
parallel and everything fans out and

00:16:46,930 --> 00:16:51,400
goes all over the place it's got a bunch

00:16:49,780 --> 00:16:52,780
of integration tests between all sorts

00:16:51,400 --> 00:16:57,340
of different components that we had to

00:16:52,780 --> 00:16:59,830
integrate with and one day we added a

00:16:57,340 --> 00:17:01,720
new integration and we copy the system

00:16:59,830 --> 00:17:05,070
tests and the config and all the new

00:17:01,720 --> 00:17:05,070
tests passed and everything was fine

00:17:12,660 --> 00:17:20,949
but uh we forgot to fan in so one day

00:17:17,980 --> 00:17:22,390
that job failed but the pipeline was

00:17:20,949 --> 00:17:24,520
still green we're like what what what

00:17:22,390 --> 00:17:26,589
happened so we could have cut a a

00:17:24,520 --> 00:17:28,810
release that failed these new tests

00:17:26,589 --> 00:17:30,040
thankfully like we also visually inspect

00:17:28,810 --> 00:17:33,400
the pipeline before we cut it release

00:17:30,040 --> 00:17:37,590
and it was red and were like nope so we

00:17:33,400 --> 00:17:37,590
fixed this but yeah you need to fan in

00:17:40,110 --> 00:17:44,530
so this is an incomplete fan in and so a

00:17:43,000 --> 00:17:47,410
vision that fails the test could be

00:17:44,530 --> 00:17:49,540
delivered and the lines were just

00:17:47,410 --> 00:17:51,010
inconsistent you saw those there's lines

00:17:49,540 --> 00:17:51,550
flowing down into the void they went

00:17:51,010 --> 00:17:54,760
nowhere

00:17:51,550 --> 00:17:57,610
and the treatment was to just add a past

00:17:54,760 --> 00:18:01,450
constraint and now those lines fan in

00:17:57,610 --> 00:18:03,790
and everything's great but here here we

00:18:01,450 --> 00:18:05,470
have another one now there's even more

00:18:03,790 --> 00:18:07,390
like we've zoomed in more and you can

00:18:05,470 --> 00:18:09,070
see that there's just lines everywhere

00:18:07,390 --> 00:18:12,850
flowing all over the place everything

00:18:09,070 --> 00:18:14,290
depends on everything and actually not

00:18:12,850 --> 00:18:15,970
everything difference on everything but

00:18:14,290 --> 00:18:18,460
we had wired everything to everything

00:18:15,970 --> 00:18:20,290
and so it just kant's anytime anything

00:18:18,460 --> 00:18:23,080
changed like let's say you know we made

00:18:20,290 --> 00:18:24,760
a change to Azure integration well we

00:18:23,080 --> 00:18:28,060
were all we'd also run the tests against

00:18:24,760 --> 00:18:29,590
GCP even though those tests didn't have

00:18:28,060 --> 00:18:32,110
anything to do with GCP and we hadn't

00:18:29,590 --> 00:18:36,160
changed the GCP code we were over

00:18:32,110 --> 00:18:40,810
testing so uh actually we needed to

00:18:36,160 --> 00:18:42,850
remove some of those lines yeah so

00:18:40,810 --> 00:18:45,790
really you should like minimize the

00:18:42,850 --> 00:18:47,140
number of past constraints only have the

00:18:45,790 --> 00:18:48,670
ones that you actually need the things

00:18:47,140 --> 00:18:49,780
that you depend on should be past

00:18:48,670 --> 00:18:51,160
constraints but the things that you

00:18:49,780 --> 00:18:55,540
don't depend on don't need to be past

00:18:51,160 --> 00:18:58,150
constraints yeah and the visual is just

00:18:55,540 --> 00:18:59,710
like you know that that mess of of pipes

00:18:58,150 --> 00:19:01,590
going everywhere and you're like I can't

00:18:59,710 --> 00:19:05,260
see anything

00:19:01,590 --> 00:19:10,600
yeah maybe maybe check if you really

00:19:05,260 --> 00:19:12,190
need all those lines all right let's

00:19:10,600 --> 00:19:14,910
talk about the resources that are

00:19:12,190 --> 00:19:14,910
flowing through things

00:19:15,720 --> 00:19:22,630
so the you know the nice pipes that we

00:19:18,550 --> 00:19:25,630
have this pipeline builds a docker image

00:19:22,630 --> 00:19:30,190
and tests it and promotes it everything

00:19:25,630 --> 00:19:34,600
looks good right let's look at what

00:19:30,190 --> 00:19:36,970
flows through the pipeline it's actually

00:19:34,600 --> 00:19:39,550
the repo with the docker file that flows

00:19:36,970 --> 00:19:42,610
through the pipeline perfectly it seems

00:19:39,550 --> 00:19:43,960
fairly reasonable but what about the

00:19:42,610 --> 00:19:45,100
candidate that it builds because we

00:19:43,960 --> 00:19:51,330
built the candidate and tested the

00:19:45,100 --> 00:19:55,300
candidate where'd that go so you know

00:19:51,330 --> 00:19:57,929
how does it promote the candidate if it

00:19:55,300 --> 00:19:59,890
if it just doesn't have it anymore

00:19:57,929 --> 00:20:04,510
well what it was doing was who would

00:19:59,890 --> 00:20:07,110
build the image and then it would test

00:20:04,510 --> 00:20:10,270
it and then it would build it again

00:20:07,110 --> 00:20:12,370
great that that image of course has

00:20:10,270 --> 00:20:13,870
unpinned versions in it so like if you

00:20:12,370 --> 00:20:17,440
know someone else changed a version

00:20:13,870 --> 00:20:22,120
number like we could we we have no idea

00:20:17,440 --> 00:20:23,860
if that docker image still works we

00:20:22,120 --> 00:20:25,660
don't think we actually managed to kind

00:20:23,860 --> 00:20:30,429
of docker image with this problem but

00:20:25,660 --> 00:20:33,580
you know we had to fix that and so now

00:20:30,429 --> 00:20:37,090
it's the docker image the candidate

00:20:33,580 --> 00:20:40,360
flows through and so we build it we test

00:20:37,090 --> 00:20:41,980
it and then now we promote it and so we

00:20:40,360 --> 00:20:45,700
just add a tag to the release candidate

00:20:41,980 --> 00:20:51,309
and make it actually the release and so

00:20:45,700 --> 00:20:53,770
we're not building it twice I think we

00:20:51,309 --> 00:20:56,050
just noticed it we we didn't run into

00:20:53,770 --> 00:20:58,929
any issues we were just like this seems

00:20:56,050 --> 00:21:00,880
wrong at some point you know someone was

00:20:58,929 --> 00:21:02,950
like trying to add another thing to the

00:21:00,880 --> 00:21:07,000
docker file and then like notice that it

00:21:02,950 --> 00:21:08,950
the pipeline just didn't seem right so

00:21:07,000 --> 00:21:12,340
we build the image and then we test it

00:21:08,950 --> 00:21:15,730
and we promote it this is the wrong

00:21:12,340 --> 00:21:18,340
resource flowing through which resource

00:21:15,730 --> 00:21:20,580
flows through is tricky and important

00:21:18,340 --> 00:21:22,720
and can cause very subtle issues like

00:21:20,580 --> 00:21:26,200
shipping a thing that you didn't test

00:21:22,720 --> 00:21:27,760
you know not great so make sure you get

00:21:26,200 --> 00:21:30,120
the right thing flowing through your

00:21:27,760 --> 00:21:30,120
pipelines

00:21:30,490 --> 00:21:35,050
here's another pipeline it has three

00:21:32,860 --> 00:21:38,320
roads that are all the same so it

00:21:35,050 --> 00:21:40,030
deploys a Cloud Foundry runs the

00:21:38,320 --> 00:21:41,350
disaster recovery acceptance tests

00:21:40,030 --> 00:21:44,230
against it and then deletes the Cloud

00:21:41,350 --> 00:21:46,510
Foundry and there's you know three

00:21:44,230 --> 00:21:48,580
different versions one is just running

00:21:46,510 --> 00:21:51,160
normal threats one is running drets with

00:21:48,580 --> 00:21:53,770
hard mode drets just like backs up a

00:21:51,160 --> 00:21:55,690
Cloud Foundry changes all the things

00:21:53,770 --> 00:21:57,640
restores it and checks that everything

00:21:55,690 --> 00:21:59,920
is back to its original state

00:21:57,640 --> 00:22:01,690
drats with destroy deletes the entire

00:21:59,920 --> 00:22:03,190
Cloud Foundry brings up a new one and

00:22:01,690 --> 00:22:05,230
then shoves the state into the new one

00:22:03,190 --> 00:22:08,170
checks it that works too and then

00:22:05,230 --> 00:22:12,540
there's a PR flow for when people make

00:22:08,170 --> 00:22:13,930
PRS to the test suite to test those so

00:22:12,540 --> 00:22:17,140
it's great

00:22:13,930 --> 00:22:19,630
so we deploy this step we deploy the

00:22:17,140 --> 00:22:20,950
cloud foundry you run the tests and then

00:22:19,630 --> 00:22:26,380
we delete the cloud foundry everything's

00:22:20,950 --> 00:22:28,060
great and we knew only one of these jobs

00:22:26,380 --> 00:22:31,180
could run at a time so each of these

00:22:28,060 --> 00:22:34,240
trails is in a cereal group but one day

00:22:31,180 --> 00:22:35,590
the system tests failed and the reason

00:22:34,240 --> 00:22:39,790
was that the jobs triggered in the wrong

00:22:35,590 --> 00:22:41,230
sequence someone pushed two changes one

00:22:39,790 --> 00:22:47,710
after the other and let's replay what

00:22:41,230 --> 00:22:52,390
happened so it deployed it tested it

00:22:47,710 --> 00:22:55,210
deployed again it deleted and then tried

00:22:52,390 --> 00:22:57,250
to run the test because cereal groups

00:22:55,210 --> 00:23:01,480
just enforced that one thing runs at a

00:22:57,250 --> 00:23:03,520
time they don't enforce the order and so

00:23:01,480 --> 00:23:05,640
the test just had no chance of passing

00:23:03,520 --> 00:23:09,180
because the deployment had been deleted

00:23:05,640 --> 00:23:11,920
so this is actually a missing resource

00:23:09,180 --> 00:23:13,690
there is state in this system which is

00:23:11,920 --> 00:23:14,770
the fact that there's an external

00:23:13,690 --> 00:23:16,210
environment with a Cloud Foundry

00:23:14,770 --> 00:23:21,580
deployed on it and that was just not

00:23:16,210 --> 00:23:23,350
represented at all in the system and so

00:23:21,580 --> 00:23:26,260
you need to add a resource to represent

00:23:23,350 --> 00:23:28,840
that state and thankfully concourse has

00:23:26,260 --> 00:23:31,210
a resource to do this it's called the

00:23:28,840 --> 00:23:33,190
pool resource it's built in and it just

00:23:31,210 --> 00:23:34,510
is a thing that lets you represent some

00:23:33,190 --> 00:23:38,520
state that's not contained in your

00:23:34,510 --> 00:23:38,520
system that's great

00:23:38,950 --> 00:23:45,530
all right so let's go over what we

00:23:42,950 --> 00:23:47,420
talked about so there were all sorts of

00:23:45,530 --> 00:23:52,850
pipeline antipatterns they're build anti

00:23:47,420 --> 00:23:55,610
patterns and flow anti patterns and all

00:23:52,850 --> 00:23:57,290
of these things are important and fixing

00:23:55,610 --> 00:23:58,820
all these things can make your system

00:23:57,290 --> 00:24:01,460
work better and your pipelines happier

00:23:58,820 --> 00:24:05,140
and that ensure that you don't ship a

00:24:01,460 --> 00:24:05,140
product that doesn't meet your standards

00:24:05,410 --> 00:24:10,610
that's all all of our all of the

00:24:08,780 --> 00:24:12,410
platform recovery pipelines and

00:24:10,610 --> 00:24:15,110
concourse are all open source you can go

00:24:12,410 --> 00:24:17,810
look at them they're on github and the

00:24:15,110 --> 00:24:19,520
concourse is publicly accessible sort of

00:24:17,810 --> 00:24:21,860
I mean you can see it you can't do

00:24:19,520 --> 00:24:26,960
anything to it obviously but you can see

00:24:21,860 --> 00:24:29,110
it it's all online so thank you for

00:24:26,960 --> 00:24:29,110
listening

00:24:29,420 --> 00:24:32,289

YouTube URL: https://www.youtube.com/watch?v=FEHzcgr11Ao


