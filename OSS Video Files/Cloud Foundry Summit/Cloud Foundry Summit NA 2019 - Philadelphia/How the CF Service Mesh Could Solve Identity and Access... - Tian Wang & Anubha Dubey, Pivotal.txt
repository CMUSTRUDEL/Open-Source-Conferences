Title: How the CF Service Mesh Could Solve Identity and Access... - Tian Wang & Anubha Dubey, Pivotal
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	How the CF Service Mesh Could Solve Identity and Access Management for your Workloads - Tian Wang & Anubha Dubey, Pivotal

As CF integrates the Envoy proxy and the Istio control plane, one of the core areas of interest has been providing security policies for workloads across CFAR and CFCR. Identity and Access Management (IAM) is a key area, mixing end user single sign-on, service-to-service authentication/authorization, and control plane identity concerns. These policies cut across many layers, with much previously implemented as generic boilerplate code from language-specific libraries.

Learn how we plan to change this paradigm and allow you to declare codeless language-agnostic policies the platform will use to provide IAM as a service so you can focus on writing features, not infrastructure.

About Anubha Dubey
Anubha is a Sr. Product Designer at Pivotal working on security and identity design with the User Account and Authentication (UAA) team for open source Cloud Foundry and the Pivotal Single Sign-on service. Before Pivotal, she held the position of UX Designer at Cisco on both cloud and on-premise security and networking products. She has been creating solutions for the enterprise and advertising industries for over five years translating user behaviors into products by structuring the design process to the culture of each companies.

About Tian Wang
Tian Wang is the Senior Product Manager for App and Workload Identity at Pivotal. He works closely with the identity team for UAA (User Account and Authentication Service) on Open Source Cloud Foundry, with the CF Routing and Networking teams on Istio and Envoy, and leads the Pivotal SSO (Single Sign-On) Service. Prior to joining Pivotal, he worked as a security consultant for identity and access management, assisting Global and Fortune 500 companies with their identity strategies, roadmaps, and implementations. He holds a Bachelors of Business Administration and Bachelors of Computer Science from the University of California, Berkeley. Most recently he spoke at Cloud Foundry Summit Europe 2017 about identity and access management use cases.

https://www.cloudfoundry.org/
Captions: 
	00:00:00,210 --> 00:00:05,250
good afternoon everyone thank you for

00:00:02,929 --> 00:00:07,140
coming to our talk I didn't leave it

00:00:05,250 --> 00:00:10,410
this you in the Cloud Foundry service

00:00:07,140 --> 00:00:11,880
mesh so today we're gonna be going

00:00:10,410 --> 00:00:13,380
through a quick introduction of who we

00:00:11,880 --> 00:00:15,330
are talking a little bit about the

00:00:13,380 --> 00:00:18,029
landscape and challenges of security and

00:00:15,330 --> 00:00:19,770
identity talk a little bit about you

00:00:18,029 --> 00:00:22,560
know explaining what is do and the

00:00:19,770 --> 00:00:24,300
service mesh really are I'll talk a

00:00:22,560 --> 00:00:26,160
little bit about why we think the sto

00:00:24,300 --> 00:00:28,560
and the service fish are good for

00:00:26,160 --> 00:00:29,849
identity use cases and finally talk a

00:00:28,560 --> 00:00:31,859
little bit about what we're doing within

00:00:29,849 --> 00:00:35,790
cloud foundry and follow that on with

00:00:31,859 --> 00:00:37,320
some QA so my name is Tian Wang I'm the

00:00:35,790 --> 00:00:40,430
senior product manager over the

00:00:37,320 --> 00:00:42,329
application and identity workload

00:00:40,430 --> 00:00:44,219
application and workload identity

00:00:42,329 --> 00:00:47,070
problem space as well as the pivotal

00:00:44,219 --> 00:00:49,170
single sign-on service I'm a newbie

00:00:47,070 --> 00:00:51,539
I'm a senior product designer on cloud

00:00:49,170 --> 00:00:57,180
foundry identity team today's

00:00:51,539 --> 00:00:59,670
conversation and today's conversation is

00:00:57,180 --> 00:01:02,190
going to be addressing challenges of

00:00:59,670 --> 00:01:05,189
securities at scale across all of your

00:01:02,190 --> 00:01:07,590
applications we'll be talking about the

00:01:05,189 --> 00:01:10,830
concept of authentication which is

00:01:07,590 --> 00:01:13,950
verifying the process of who you are and

00:01:10,830 --> 00:01:16,950
the authorization which is the process

00:01:13,950 --> 00:01:19,710
of verifying what you have access to and

00:01:16,950 --> 00:01:22,320
we will cover how the implementation of

00:01:19,710 --> 00:01:25,740
these two contexts these two concepts

00:01:22,320 --> 00:01:28,829
varies in context of end-user identities

00:01:25,740 --> 00:01:31,979
or simply put as human identity for

00:01:28,829 --> 00:01:34,520
example my twitter username is my

00:01:31,979 --> 00:01:37,619
identity to log into Twitter application

00:01:34,520 --> 00:01:40,170
the other context would be application

00:01:37,619 --> 00:01:42,630
identity we are one application needs to

00:01:40,170 --> 00:01:47,340
verify itself in order to communicate

00:01:42,630 --> 00:01:49,950
with other application and will also be

00:01:47,340 --> 00:01:52,619
broadly talking in the context of the

00:01:49,950 --> 00:01:54,899
move from monoliths to micro service

00:01:52,619 --> 00:01:56,729
based architecture and in this kind of

00:01:54,899 --> 00:01:58,920
move you're really seeing what used to

00:01:56,729 --> 00:02:01,380
be security for functions within the

00:01:58,920 --> 00:02:04,320
same compute space move into how do we

00:02:01,380 --> 00:02:06,390
do security for network calls from micro

00:02:04,320 --> 00:02:08,160
service to micro service and that means

00:02:06,390 --> 00:02:11,009
that a lot of the protocols that used to

00:02:08,160 --> 00:02:13,319
exist in the past no longer really

00:02:11,009 --> 00:02:13,980
function as well between these two

00:02:13,319 --> 00:02:17,400
separate my

00:02:13,980 --> 00:02:18,599
crow services and new protocols that

00:02:17,400 --> 00:02:21,659
offered things in the space of

00:02:18,599 --> 00:02:26,430
Federation kind of fit better into the

00:02:21,659 --> 00:02:28,409
new context so what does that look like

00:02:26,430 --> 00:02:30,150
then today for a lot of application

00:02:28,409 --> 00:02:32,580
developers building identity for their

00:02:30,150 --> 00:02:34,319
apps well for end user authentication

00:02:32,580 --> 00:02:37,200
authorization then there's protocols

00:02:34,319 --> 00:02:39,810
like LDAP sam'l or Roth and open ID

00:02:37,200 --> 00:02:41,849
connect and you typically implement this

00:02:39,810 --> 00:02:44,610
then by you know pulling out some kind

00:02:41,849 --> 00:02:46,410
of library using some kind of gateway if

00:02:44,610 --> 00:02:49,739
you're really brave maybe you'll go and

00:02:46,410 --> 00:02:51,629
try to code that yourself and what about

00:02:49,739 --> 00:02:53,549
application identity then what does that

00:02:51,629 --> 00:02:55,140
really look like when two applications

00:02:53,549 --> 00:02:57,239
talking to each other really need to

00:02:55,140 --> 00:02:59,940
kind of signal who they are

00:02:57,239 --> 00:03:03,000
well the most common approach that was

00:02:59,940 --> 00:03:04,709
done in the past was nothing but some

00:03:03,000 --> 00:03:06,599
people might want to check that security

00:03:04,709 --> 00:03:08,700
box and implement basic auth between

00:03:06,599 --> 00:03:10,950
those two applications and if you're

00:03:08,700 --> 00:03:12,900
really brave you could try to add search

00:03:10,950 --> 00:03:15,480
to your applications and then have them

00:03:12,900 --> 00:03:17,459
do mutual TLS to each other but that

00:03:15,480 --> 00:03:21,660
might implement a lot of overhead and

00:03:17,459 --> 00:03:23,579
become kind of a management nightmare so

00:03:21,660 --> 00:03:26,940
building these protocols comes with its

00:03:23,579 --> 00:03:29,430
own challenges for instance non-uniform

00:03:26,940 --> 00:03:32,370
code across different applications a lot

00:03:29,430 --> 00:03:34,650
of manual code writing for application

00:03:32,370 --> 00:03:37,500
developers to secure their application

00:03:34,650 --> 00:03:39,750
and that can lead to making more

00:03:37,500 --> 00:03:43,560
mistakes is killing this approach

00:03:39,750 --> 00:03:46,410
requires expecting your application

00:03:43,560 --> 00:03:49,650
developers to become security experts

00:03:46,410 --> 00:03:52,970
and wanting them to learn all protocols

00:03:49,650 --> 00:03:55,260
languages frameworks which are out there

00:03:52,970 --> 00:03:58,319
patches and updates for your

00:03:55,260 --> 00:04:01,079
applications may require downtime and as

00:03:58,319 --> 00:04:03,959
often patches need changes in code base

00:04:01,079 --> 00:04:06,540
and that can be hard to do if you have a

00:04:03,959 --> 00:04:08,669
lower visibility what's being done in

00:04:06,540 --> 00:04:10,739
application code base it makes a

00:04:08,669 --> 00:04:15,510
nightmare because you cannot find that

00:04:10,739 --> 00:04:17,579
part of the code so gateway helps with a

00:04:15,510 --> 00:04:21,239
lot of previous challenges but being a

00:04:17,579 --> 00:04:23,889
centralized approach it doesn't explain

00:04:21,239 --> 00:04:27,819
that what happens after the ad

00:04:23,889 --> 00:04:31,000
how traffic talks to the application how

00:04:27,819 --> 00:04:34,719
it gets secured so it this approach

00:04:31,000 --> 00:04:38,800
varies a lot based on your choice of

00:04:34,719 --> 00:04:41,050
gateway and the platform but that's not

00:04:38,800 --> 00:04:44,259
all there are some other concerns we

00:04:41,050 --> 00:04:47,020
heard from enterprises that they are

00:04:44,259 --> 00:04:49,120
identity management teams can't keep up

00:04:47,020 --> 00:04:51,879
with the load of application integration

00:04:49,120 --> 00:04:54,280
which they need to manage application

00:04:51,879 --> 00:04:57,759
developers are going and building their

00:04:54,280 --> 00:04:59,289
own identity providers and because they

00:04:57,759 --> 00:05:03,129
don't know what's going on with their

00:04:59,289 --> 00:05:05,860
centralized system also authorization is

00:05:03,129 --> 00:05:08,699
highly customizable per application and

00:05:05,860 --> 00:05:11,020
that creates a confusion Oh what

00:05:08,699 --> 00:05:15,479
authorization level is required for my

00:05:11,020 --> 00:05:17,889
application and not the least one

00:05:15,479 --> 00:05:20,979
constantly changing regulatory

00:05:17,889 --> 00:05:24,460
requirements which cost application

00:05:20,979 --> 00:05:26,529
developers to ask oh how do I go and

00:05:24,460 --> 00:05:31,900
secure my application to work what

00:05:26,529 --> 00:05:33,370
compliance do I need now so we talked a

00:05:31,900 --> 00:05:35,259
lot about kind of what are the

00:05:33,370 --> 00:05:38,080
challenges that you could be facing for

00:05:35,259 --> 00:05:40,509
security and identity at scale now let's

00:05:38,080 --> 00:05:42,009
move into kind of what is is dealing

00:05:40,509 --> 00:05:44,229
what is that surface mesh you know

00:05:42,009 --> 00:05:46,199
what's this hyped up topic that is on

00:05:44,229 --> 00:05:49,270
the top of everyone's mouth these days

00:05:46,199 --> 00:05:51,039
and that starts with really the basic

00:05:49,270 --> 00:05:53,889
concept of a service mesh starts at a

00:05:51,039 --> 00:05:55,810
sidecar and a sidecar is a proxy that

00:05:53,889 --> 00:05:58,629
manages all inbound and outbound traffic

00:05:55,810 --> 00:06:00,849
from your application within the pod or

00:05:58,629 --> 00:06:02,560
container where the application is

00:06:00,849 --> 00:06:04,599
running so that allows it to kind of

00:06:02,560 --> 00:06:07,409
scale up and down a little bit as you're

00:06:04,599 --> 00:06:11,229
deploying application instances and the

00:06:07,409 --> 00:06:13,089
proxy of choice for is do is envoy this

00:06:11,229 --> 00:06:17,259
is an open source component written in

00:06:13,089 --> 00:06:21,669
c++ and envoys are used heavily within

00:06:17,259 --> 00:06:24,789
sto when every application has a sidecar

00:06:21,669 --> 00:06:27,370
you get the concept of a service mesh so

00:06:24,789 --> 00:06:28,690
now basically all of these sidecars are

00:06:27,370 --> 00:06:30,729
intercepting traffic for their

00:06:28,690 --> 00:06:34,419
corresponding apps and talking to each

00:06:30,729 --> 00:06:37,120
other and the service mesh itself can

00:06:34,419 --> 00:06:37,689
come with a gateway typically called the

00:06:37,120 --> 00:06:40,059
ingress key

00:06:37,689 --> 00:06:41,830
way that manages all inbound and

00:06:40,059 --> 00:06:43,959
outbound traffic to the service mesh

00:06:41,830 --> 00:06:46,529
itself so in essence you can think of

00:06:43,959 --> 00:06:49,569
this as a sidecar for the service mesh

00:06:46,529 --> 00:06:52,239
and on top of that you have a control

00:06:49,569 --> 00:06:54,339
plane that is managing the data plane of

00:06:52,239 --> 00:06:56,169
all of the side cars and distributing

00:06:54,339 --> 00:06:58,179
policies collecting telemetry and

00:06:56,169 --> 00:07:00,519
managing certificates and that's

00:06:58,179 --> 00:07:02,199
essentially what is do is write a

00:07:00,519 --> 00:07:04,689
combination of a data plane and a

00:07:02,199 --> 00:07:07,329
control plane that's layering on top of

00:07:04,689 --> 00:07:09,669
all your applications and SDO comes with

00:07:07,329 --> 00:07:11,860
many components of its own besides the

00:07:09,669 --> 00:07:14,379
Envoy side card that we talked about it

00:07:11,860 --> 00:07:16,689
comes with gallium pilot to help manage

00:07:14,379 --> 00:07:18,759
configs it comes with mixer to help

00:07:16,689 --> 00:07:20,169
manage telemetry and extensions and it

00:07:18,759 --> 00:07:23,949
comes with a citadel to help manage

00:07:20,169 --> 00:07:28,539
certificates so that's basically sto in

00:07:23,949 --> 00:07:31,360
the open source so now why though would

00:07:28,539 --> 00:07:33,189
we take a look at using Sto and the

00:07:31,360 --> 00:07:35,769
service special for identity use cases

00:07:33,189 --> 00:07:38,439
and that really comes back to the story

00:07:35,769 --> 00:07:40,089
of application development so in the

00:07:38,439 --> 00:07:41,949
early beginnings when you're trying to

00:07:40,089 --> 00:07:44,349
build authentication authorization for

00:07:41,949 --> 00:07:46,209
your application you might say hey I

00:07:44,349 --> 00:07:48,969
need to build this as part of the code

00:07:46,209 --> 00:07:50,679
of my application and I might go and try

00:07:48,969 --> 00:07:52,419
to write that myself and figure out how

00:07:50,679 --> 00:07:55,239
to do it but then a bunch of smart

00:07:52,419 --> 00:07:57,189
people figured out well I can find open

00:07:55,239 --> 00:07:58,929
source libraries that have experts that

00:07:57,189 --> 00:08:01,089
are writing these for me but the

00:07:58,929 --> 00:08:02,499
challenges there were really do I have

00:08:01,089 --> 00:08:04,269
one for the language that I'm choosing

00:08:02,499 --> 00:08:05,739
to write if someone else uses a

00:08:04,269 --> 00:08:08,409
different language do they have to find

00:08:05,739 --> 00:08:11,019
a different language library and then

00:08:08,409 --> 00:08:12,759
how do I start using that and I still

00:08:11,019 --> 00:08:14,529
have to do things in my code to really

00:08:12,759 --> 00:08:16,539
figure out how to initialize this

00:08:14,529 --> 00:08:20,709
library and start using that for my

00:08:16,539 --> 00:08:22,479
application so then people started

00:08:20,709 --> 00:08:24,489
looking at can i externalise that from

00:08:22,479 --> 00:08:26,139
my application so that you know

00:08:24,489 --> 00:08:28,509
regardless of what application i'm

00:08:26,139 --> 00:08:31,089
running can it kind of happen outside of

00:08:28,509 --> 00:08:32,800
my app now the questions there become

00:08:31,089 --> 00:08:35,050
how do i route the traffic through this

00:08:32,800 --> 00:08:36,819
proxy to my application where is this

00:08:35,050 --> 00:08:39,189
going to run how I'm going to configure

00:08:36,819 --> 00:08:40,990
it so there's a lot of confusion there

00:08:39,189 --> 00:08:44,050
as well but it's definitely a model that

00:08:40,990 --> 00:08:46,980
goes back many many decades in terms of

00:08:44,050 --> 00:08:50,110
external proxies for your applications

00:08:46,980 --> 00:08:51,430
and now we come to kind of then that

00:08:50,110 --> 00:08:53,860
whole sidecar thing

00:08:51,430 --> 00:08:56,260
because if this proxy is sitting with

00:08:53,860 --> 00:08:58,540
your application what will happen then

00:08:56,260 --> 00:09:01,420
is basically all traffic being routed to

00:08:58,540 --> 00:09:03,880
your app can pass through this proxy

00:09:01,420 --> 00:09:05,800
that's implementing your logic and you

00:09:03,880 --> 00:09:07,930
can have a central control plane that's

00:09:05,800 --> 00:09:09,910
sending those policies to this sidecar

00:09:07,930 --> 00:09:11,800
in order to enforce the corresponding

00:09:09,910 --> 00:09:14,320
policies that are required for your

00:09:11,800 --> 00:09:16,600
application so this vastly simplifies

00:09:14,320 --> 00:09:22,510
the deployment model and still lets you

00:09:16,600 --> 00:09:24,850
get the benefits of that proxy model so

00:09:22,510 --> 00:09:27,610
let's say now I want to actually add oh

00:09:24,850 --> 00:09:29,620
I D see logic you know acquire a token

00:09:27,610 --> 00:09:32,710
validate the token well if I send that

00:09:29,620 --> 00:09:35,440
policy to my sidecar and traffic inbound

00:09:32,710 --> 00:09:37,840
passes through this proxy I can enforce

00:09:35,440 --> 00:09:39,580
all of that identity logic and I didn't

00:09:37,840 --> 00:09:43,870
have to add anything to my application

00:09:39,580 --> 00:09:46,330
to make that happen and when you start

00:09:43,870 --> 00:09:48,730
looking across microservices then this

00:09:46,330 --> 00:09:51,220
really starts kind of showing its value

00:09:48,730 --> 00:09:53,080
because every application has a

00:09:51,220 --> 00:09:54,550
corresponding sidecar that traffic is

00:09:53,080 --> 00:09:56,470
being passed through and you've got a

00:09:54,550 --> 00:09:58,060
central complaint or control plane

00:09:56,470 --> 00:09:58,720
sending policies to all of these

00:09:58,060 --> 00:10:01,840
sidecars

00:09:58,720 --> 00:10:04,240
so now you can implement consistent

00:10:01,840 --> 00:10:10,750
identity logic at kind of every layer of

00:10:04,240 --> 00:10:13,540
your micro services and then let's move

00:10:10,750 --> 00:10:15,760
on to mutual TLS and certificate

00:10:13,540 --> 00:10:18,340
management so it's do itself can

00:10:15,760 --> 00:10:19,720
distribute certificates as well to those

00:10:18,340 --> 00:10:22,960
sign cards that are sitting alongside

00:10:19,720 --> 00:10:24,820
your applications so this is actually

00:10:22,960 --> 00:10:26,260
complementary with end user

00:10:24,820 --> 00:10:28,510
authentication that we talked about

00:10:26,260 --> 00:10:31,000
before because one of them passes

00:10:28,510 --> 00:10:33,430
through the data alongside the requests

00:10:31,000 --> 00:10:36,340
but this one is saying I can also

00:10:33,430 --> 00:10:38,560
encrypt the channels such that my data

00:10:36,340 --> 00:10:41,380
is also secure when I'm passing through

00:10:38,560 --> 00:10:42,310
the two applications so now you can have

00:10:41,380 --> 00:10:44,890
end-user

00:10:42,310 --> 00:10:49,470
identity and application to application

00:10:44,890 --> 00:10:52,270
identity and lastly of course we can't

00:10:49,470 --> 00:10:54,880
underestimate the observability features

00:10:52,270 --> 00:10:56,980
of Sto itself because you've got this

00:10:54,880 --> 00:10:58,510
sidecar that's able to see traffic

00:10:56,980 --> 00:11:00,400
coming in to your application and

00:10:58,510 --> 00:11:02,440
traffic leaving your application and

00:11:00,400 --> 00:11:04,660
it's reporting that back to the central

00:11:02,440 --> 00:11:05,550
control plane so you'll be able to see

00:11:04,660 --> 00:11:06,750
what's going

00:11:05,550 --> 00:11:09,060
across all of your different

00:11:06,750 --> 00:11:10,890
applications and you'll also be able to

00:11:09,060 --> 00:11:13,290
see what policies are being configured

00:11:10,890 --> 00:11:14,790
on each of your side cars so that you

00:11:13,290 --> 00:11:16,830
can know kind of like what's the

00:11:14,790 --> 00:11:21,810
security model that's being enforced at

00:11:16,830 --> 00:11:23,610
each of your apps so now let's talk

00:11:21,810 --> 00:11:26,730
about what we're doing then within Cloud

00:11:23,610 --> 00:11:27,510
Foundry well if you went to the keynotes

00:11:26,730 --> 00:11:28,920
yesterday

00:11:27,510 --> 00:11:32,130
you probably already know a little bit

00:11:28,920 --> 00:11:34,650
of this so when today when UCF push your

00:11:32,130 --> 00:11:38,150
application into cloud foundry it's

00:11:34,650 --> 00:11:40,589
already coming with an envoy sidecar

00:11:38,150 --> 00:11:44,279
there's already an sto control plane

00:11:40,589 --> 00:11:46,230
that's somewhat available I believe and

00:11:44,279 --> 00:11:48,000
routing Han can already take advantage

00:11:46,230 --> 00:11:50,820
of this through things like weighted

00:11:48,000 --> 00:11:52,589
routing so if you saw you ease

00:11:50,820 --> 00:11:55,080
presentation of weighted routing demo

00:11:52,589 --> 00:11:57,720
that is using sto with the corresponding

00:11:55,080 --> 00:11:59,940
on voice so the idea here then is the

00:11:57,720 --> 00:12:02,400
platform will make that available for

00:11:59,940 --> 00:12:04,080
all of your applications now that being

00:12:02,400 --> 00:12:06,029
said this is my understanding of what's

00:12:04,080 --> 00:12:08,279
going on for the most up-to-date

00:12:06,029 --> 00:12:10,080
information ask the routing networking

00:12:08,279 --> 00:12:19,080
team they'll be able to provide a much

00:12:10,080 --> 00:12:21,960
more precise answer sto in NY service

00:12:19,080 --> 00:12:24,270
mash and before we get into what we are

00:12:21,960 --> 00:12:26,580
doing with this view I want to touch

00:12:24,270 --> 00:12:29,220
upon who are we we are pivotal

00:12:26,580 --> 00:12:32,670
applications single sign-on team our

00:12:29,220 --> 00:12:35,339
service powered by UA we are persona

00:12:32,670 --> 00:12:38,790
driven if we have a persona driven

00:12:35,339 --> 00:12:41,790
approach we deliver value on top of open

00:12:38,790 --> 00:12:45,540
source components so application SSO

00:12:41,790 --> 00:12:48,570
allows applications on the PCF platform

00:12:45,540 --> 00:12:51,420
to indicate securely with their

00:12:48,570 --> 00:12:56,700
enterprise identity providers like octa

00:12:51,420 --> 00:12:59,130
ping etc operators uses SSO to configure

00:12:56,700 --> 00:13:01,320
their enterprise identity providers and

00:12:59,130 --> 00:13:03,830
make them available for their

00:13:01,320 --> 00:13:07,200
application developers to use

00:13:03,830 --> 00:13:10,320
application developers comes in and

00:13:07,200 --> 00:13:13,370
utilize self-service capabilities to

00:13:10,320 --> 00:13:17,280
create application security policies and

00:13:13,370 --> 00:13:18,879
utilize lo touch integration of spring

00:13:17,280 --> 00:13:21,790
boot and

00:13:18,879 --> 00:13:25,660
to auto-configure their application this

00:13:21,790 --> 00:13:28,269
approach allows this approach provides

00:13:25,660 --> 00:13:30,970
speed and security by allowing

00:13:28,269 --> 00:13:33,339
application developers to focus on

00:13:30,970 --> 00:13:36,579
delivering business outcomes by

00:13:33,339 --> 00:13:44,529
abstracting away attend an odd Z to the

00:13:36,579 --> 00:13:45,939
platform but the steel toe and steel toe

00:13:44,529 --> 00:13:48,670
in spring boot are not the only

00:13:45,939 --> 00:13:51,939
frameworks where which applications are

00:13:48,670 --> 00:13:54,370
using so how this service work with

00:13:51,939 --> 00:13:58,449
other in with other frameworks and how

00:13:54,370 --> 00:13:59,860
can we make it language agnostic so a

00:13:58,449 --> 00:14:01,749
lot of what we're trying to do here goes

00:13:59,860 --> 00:14:03,370
back to pivotal mission of you know how

00:14:01,749 --> 00:14:05,529
do we transform the way the world build

00:14:03,370 --> 00:14:07,420
software and within our team we really

00:14:05,529 --> 00:14:09,160
asked ourselves then what can we do to

00:14:07,420 --> 00:14:12,699
help transform how enterprises build

00:14:09,160 --> 00:14:14,319
identity into their software and that

00:14:12,699 --> 00:14:16,930
goes back into what we're working with

00:14:14,319 --> 00:14:20,829
the ISTE o open source community on in

00:14:16,930 --> 00:14:22,930
terms of envoy and sto policies this is

00:14:20,829 --> 00:14:25,689
a collaboration with the is do security

00:14:22,930 --> 00:14:28,779
working group as well as a collaborator

00:14:25,689 --> 00:14:30,339
from tallest out of London and what

00:14:28,779 --> 00:14:33,250
we're looking to do today is essentially

00:14:30,339 --> 00:14:35,019
say when a request is coming in to your

00:14:33,250 --> 00:14:38,139
application and it's trying to route

00:14:35,019 --> 00:14:40,290
there the ingress gateway proxy can

00:14:38,139 --> 00:14:42,790
enforce a policy that says are you

00:14:40,290 --> 00:14:44,920
authenticated or not and if you're not

00:14:42,790 --> 00:14:47,290
authenticated let's go ahead and send

00:14:44,920 --> 00:14:48,819
you to an identity provider for open ID

00:14:47,290 --> 00:14:51,759
connect and authorization server

00:14:48,819 --> 00:14:54,220
essentially to say can you go ahead and

00:14:51,759 --> 00:14:58,089
login authenticate and also be

00:14:54,220 --> 00:15:00,009
authorized so we use the open source

00:14:58,089 --> 00:15:02,350
cloud foundry user account and

00:15:00,009 --> 00:15:04,809
authentication component which also acts

00:15:02,350 --> 00:15:07,149
as an identity proxy so if you have

00:15:04,809 --> 00:15:08,949
downstream LDAP directories or you're

00:15:07,149 --> 00:15:10,660
using sam'l to connect for directories

00:15:08,949 --> 00:15:13,600
or if you're actually just connecting to

00:15:10,660 --> 00:15:15,999
other open ID connect providers through

00:15:13,600 --> 00:15:19,350
you AAA then your user can go ahead and

00:15:15,999 --> 00:15:22,899
log in with their enterprise account and

00:15:19,350 --> 00:15:25,300
once that happens you know the proxy can

00:15:22,899 --> 00:15:27,429
take care of all of that OAuth dance and

00:15:25,300 --> 00:15:30,429
send that token downstream to your

00:15:27,429 --> 00:15:31,570
application where that proxy sidecar

00:15:30,429 --> 00:15:34,089
itself can help

00:15:31,570 --> 00:15:36,670
continue that security part of this flow

00:15:34,089 --> 00:15:39,430
and say do I have the proper validated

00:15:36,670 --> 00:15:42,519
shots do I have proper you know claims

00:15:39,430 --> 00:15:44,170
such as issuers and also do

00:15:42,519 --> 00:15:46,480
authorization on the things like whether

00:15:44,170 --> 00:15:49,509
it's scopes groups external values

00:15:46,480 --> 00:15:51,579
custom claims what do I need to

00:15:49,509 --> 00:15:55,269
authenticate and authorize a user to

00:15:51,579 --> 00:15:55,899
access this application and it doesn't

00:15:55,269 --> 00:15:57,399
stop there

00:15:55,899 --> 00:15:58,779
you know you can go ahead and send this

00:15:57,399 --> 00:16:01,360
downstream as well to other applications

00:15:58,779 --> 00:16:04,600
who can enforce similar proxies or

00:16:01,360 --> 00:16:07,120
policies at the proxy layer and possibly

00:16:04,600 --> 00:16:09,490
as well on different token values so one

00:16:07,120 --> 00:16:11,620
thing be sto OSS community is looking at

00:16:09,490 --> 00:16:14,949
is to say can we also swap out for

00:16:11,620 --> 00:16:16,720
request context tokens that vary based

00:16:14,949 --> 00:16:18,670
upon kind of which applications are

00:16:16,720 --> 00:16:21,220
calling which applications to offer you

00:16:18,670 --> 00:16:22,660
additional security beyond just an OAuth

00:16:21,220 --> 00:16:25,930
token to prevent things like

00:16:22,660 --> 00:16:28,269
impersonation and of course this is all

00:16:25,930 --> 00:16:29,949
happening over a mutual TLS so we're not

00:16:28,269 --> 00:16:32,589
really worried about channel security

00:16:29,949 --> 00:16:34,810
the idea is that you know the platform

00:16:32,589 --> 00:16:37,959
can implement that so you really don't

00:16:34,810 --> 00:16:40,600
have to then worry about traffic and how

00:16:37,959 --> 00:16:42,220
that route is being encrypted and lastly

00:16:40,600 --> 00:16:45,430
of course since this is all built on top

00:16:42,220 --> 00:16:46,779
of open source sto you'll be able to

00:16:45,430 --> 00:16:52,720
leverage these types of things whether

00:16:46,779 --> 00:16:58,990
you're using CFAR CF CR or native so

00:16:52,720 --> 00:17:02,290
let's go ahead and do a demo so I'm

00:16:58,990 --> 00:17:05,470
gonna be using the book info demo that's

00:17:02,290 --> 00:17:07,740
typical in the SEO community and you can

00:17:05,470 --> 00:17:15,520
see right now that it's unauthenticated

00:17:07,740 --> 00:17:18,549
what I will do is and I am up I should

00:17:15,520 --> 00:17:24,100
make this bigger shouldn't Li okay I see

00:17:18,549 --> 00:17:27,400
that first I'm just gonna go ahead and

00:17:24,100 --> 00:17:29,260
enable authentication on this

00:17:27,400 --> 00:17:32,320
application so that it's no longer an

00:17:29,260 --> 00:17:33,909
authenticated endpoint and it's going to

00:17:32,320 --> 00:17:38,380
take a few seconds for this policy to

00:17:33,909 --> 00:17:41,380
take effect but up took effect right

00:17:38,380 --> 00:17:43,450
away nice so now you can see I'm no

00:17:41,380 --> 00:17:45,220
longer allowed to just access that book

00:17:43,450 --> 00:17:47,170
and thought application anymore

00:17:45,220 --> 00:17:49,510
so this is enough for an API but this is

00:17:47,170 --> 00:17:51,190
not enough for a web application so what

00:17:49,510 --> 00:17:54,490
am I going to have to do I'm probably

00:17:51,190 --> 00:17:57,550
gonna have to tell it go ahead and let

00:17:54,490 --> 00:17:58,810
me go login to somewhere and gain access

00:17:57,550 --> 00:18:01,450
to this application

00:17:58,810 --> 00:18:05,830
so I'm going to let it take effect a

00:18:01,450 --> 00:18:10,030
little bit while the policy applies now

00:18:05,830 --> 00:18:12,850
the idea here will be that I'll be

00:18:10,030 --> 00:18:15,580
forced to go login so this is a you a a

00:18:12,850 --> 00:18:17,710
that we've set up and it's acting as the

00:18:15,580 --> 00:18:19,420
authorization server for my application

00:18:17,710 --> 00:18:24,040
and I'm gonna go ahead and log in

00:18:19,420 --> 00:18:26,650
through my enterprise account which is

00:18:24,040 --> 00:18:29,470
going to also enforce any enterprise

00:18:26,650 --> 00:18:31,990
policies that I have at my identity

00:18:29,470 --> 00:18:42,400
provider so I'm going to be prompted for

00:18:31,990 --> 00:18:44,470
MFA if I can type correctly so let's see

00:18:42,400 --> 00:18:49,480
and please don't steal my one-time

00:18:44,470 --> 00:18:52,780
passcode and you can see that I've gone

00:18:49,480 --> 00:18:56,080
ahead and logged in but now if I go back

00:18:52,780 --> 00:18:59,920
to my application over here you might

00:18:56,080 --> 00:19:04,080
have saw earlier so it is protected now

00:18:59,920 --> 00:19:04,080
and you might have seen you know that

00:19:06,540 --> 00:19:10,140
trying to get past this

00:19:15,070 --> 00:19:18,950
this is not letting me past who would

00:19:17,929 --> 00:19:20,089
have thought I would have a problem with

00:19:18,950 --> 00:19:22,039
that

00:19:20,089 --> 00:19:23,719
so it might have seen like the Facebook

00:19:22,039 --> 00:19:26,299
option maybe I don't want you know

00:19:23,719 --> 00:19:28,129
people being able to log in from just

00:19:26,299 --> 00:19:31,759
anywhere maybe I want to enforce an

00:19:28,129 --> 00:19:37,279
authorization policy as well so I can go

00:19:31,759 --> 00:19:41,119
ahead and apply a different policy so

00:19:37,279 --> 00:19:44,779
that like my original user is still able

00:19:41,119 --> 00:19:47,419
to access the application but if I were

00:19:44,779 --> 00:19:50,450
to come back let's say as a different

00:19:47,419 --> 00:19:52,549
kind of user the policy would have taken

00:19:50,450 --> 00:19:56,450
effect eventually but I think it didn't

00:19:52,549 --> 00:20:11,749
take effect yet so I'm just gonna clear

00:19:56,450 --> 00:20:12,109
my cookies and that wasn't supposed to

00:20:11,749 --> 00:20:19,700
happen

00:20:12,109 --> 00:20:21,169
but now you'll see that you know it

00:20:19,700 --> 00:20:24,889
started kind of preventing me from

00:20:21,169 --> 00:20:27,109
accessing this application so the idea

00:20:24,889 --> 00:20:29,959
here is of course that all of these

00:20:27,109 --> 00:20:32,299
policies can be used and applied to your

00:20:29,959 --> 00:20:34,669
applications so that you know you could

00:20:32,299 --> 00:20:36,379
go ahead and adjust the policies but

00:20:34,669 --> 00:20:38,269
then eventually kind of settle on a

00:20:36,379 --> 00:20:45,469
fixed policy that you'll want to apply

00:20:38,269 --> 00:20:48,529
to your application we didn't just go

00:20:45,469 --> 00:20:50,989
and make this demo based on will

00:20:48,529 --> 00:20:53,539
technology out there we took a lot of

00:20:50,989 --> 00:20:55,639
steps before we get to this point we

00:20:53,539 --> 00:20:58,309
wanted to understand what enterprise

00:20:55,639 --> 00:21:00,559
users are doing in this space we

00:20:58,309 --> 00:21:03,249
conducted research with cloud foundry

00:21:00,559 --> 00:21:06,289
and users across different industries

00:21:03,249 --> 00:21:09,469
the goal of that research to understand

00:21:06,289 --> 00:21:12,469
roles responsibilities and workforce

00:21:09,469 --> 00:21:14,899
workflows of how companies organized

00:21:12,469 --> 00:21:17,479
their application security policies

00:21:14,899 --> 00:21:20,719
today and how good they envisioned that

00:21:17,479 --> 00:21:22,610
who would manage these policies in

00:21:20,719 --> 00:21:26,630
future

00:21:22,610 --> 00:21:29,150
some of our learnings from those

00:21:26,630 --> 00:21:32,870
conversations were people are already

00:21:29,150 --> 00:21:37,340
moving towards or an open idle connect

00:21:32,870 --> 00:21:39,950
they prefer having proxy approach cycle

00:21:37,340 --> 00:21:42,770
proxy approach / gateway they are

00:21:39,950 --> 00:21:45,500
already building proxies using open

00:21:42,770 --> 00:21:47,870
source comfort components so we saw that

00:21:45,500 --> 00:21:50,090
ok there is a desire people are building

00:21:47,870 --> 00:21:53,780
it but there were other use cases which

00:21:50,090 --> 00:21:56,840
emerge with it Enterprise we're asking

00:21:53,780 --> 00:21:59,180
some enterprise were saying like ok we

00:21:56,840 --> 00:22:04,100
don't want our operators to have a lot

00:21:59,180 --> 00:22:06,020
of control over our policy some wanted

00:22:04,100 --> 00:22:08,360
their developers to have less controls

00:22:06,020 --> 00:22:10,850
so a lot of policy a lot of use cases

00:22:08,360 --> 00:22:12,530
are emerged around security policies

00:22:10,850 --> 00:22:15,350
that we need to have a flexibility

00:22:12,530 --> 00:22:17,600
around it but these are not the only use

00:22:15,350 --> 00:22:20,000
cases which would be out there so we are

00:22:17,600 --> 00:22:25,220
still working towards it to make it more

00:22:20,000 --> 00:22:28,430
valuable for your applications so with

00:22:25,220 --> 00:22:31,490
that cloud foundry is looking to help

00:22:28,430 --> 00:22:33,770
you build secure identity across your

00:22:31,490 --> 00:22:36,050
production great workloads as part of

00:22:33,770 --> 00:22:41,060
the platform in new and innovative ways

00:22:36,050 --> 00:22:42,980
with is you and the service mesh and a

00:22:41,060 --> 00:22:44,360
lot of this is still ongoing in the open

00:22:42,980 --> 00:22:47,750
source space so you know we're always

00:22:44,360 --> 00:22:49,520
welcoming collaborators either user

00:22:47,750 --> 00:22:51,620
account an authentication component

00:22:49,520 --> 00:22:53,690
backends a lot of the protocol logic

00:22:51,620 --> 00:22:55,880
that exists in this space we're also

00:22:53,690 --> 00:22:59,330
working with the sto community so this

00:22:55,880 --> 00:23:00,740
is a link to our sto proposal and we're

00:22:59,330 --> 00:23:02,210
collaborating with the security working

00:23:00,740 --> 00:23:04,190
group and a collaborator out of tallest

00:23:02,210 --> 00:23:07,070
to make this happen you can find us on

00:23:04,190 --> 00:23:09,320
cf slack and sto or sto slack at OU IDC

00:23:07,070 --> 00:23:11,390
proposal or talk about us on the SDO

00:23:09,320 --> 00:23:13,400
discussed channel and if you want more

00:23:11,390 --> 00:23:15,230
technical details about what's happening

00:23:13,400 --> 00:23:17,030
under the surface of these policies and

00:23:15,230 --> 00:23:19,220
what's happening at the sto kubernetes

00:23:17,030 --> 00:23:21,830
layer feel free to take a look for the

00:23:19,220 --> 00:23:23,720
service mesh day talk that camera Mauro

00:23:21,830 --> 00:23:26,300
and I gave as service mesh day last

00:23:23,720 --> 00:23:30,080
Friday the videos are not out yet but

00:23:26,300 --> 00:23:33,630
they should be up soon and with that

00:23:30,080 --> 00:23:38,880
thank you for attending this talk well

00:23:33,630 --> 00:23:38,880

YouTube URL: https://www.youtube.com/watch?v=lOUV_YeBrZk


