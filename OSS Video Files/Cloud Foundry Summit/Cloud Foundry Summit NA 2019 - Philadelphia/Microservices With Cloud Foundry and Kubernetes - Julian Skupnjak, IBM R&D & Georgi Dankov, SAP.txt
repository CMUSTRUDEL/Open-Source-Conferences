Title: Microservices With Cloud Foundry and Kubernetes - Julian Skupnjak, IBM R&D & Georgi Dankov, SAP
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	Microservices With Cloud Foundry and Kubernetes - Julian Skupnjak, IBM R&D & Georgi Dankov, SAP

Using the full power of Cloud Foundry and Kubernetes to create your services... wouldnâ€™t that be awesome? With Eirini, you can use the great CF push experience and interact with Kubernetes directly at the same time. This opens up some really interesting possibility for using microservices than span both CF and Kubernetes. Come to our talk to explore the full potential of both platforms combined. Transformers unite! Get your black belt in deploying and combining CF apps with native Kubernetes apps.

Participants will learn:

- how to debug combined apps
- how to bind services to you apps using Cloud Foundry Services and Kubernetes
- how to access loggs with both, CF and Kubernetes
- how to monitor CF and Kubernetes apps
- how to implement Continuous Deployment with the combination of both platforms

About Georgi Dankov
SAP

About Julian Skupnjak
Julian Skupnjak (Herr Julz) is a Software Engineer at IBM Cloud and part of Cloud Foundry's Eirini development team. During his career at IBM Cloud he worked on IBM's Cloud Foundry production system in different roles, but mostly as DevOps engineer at the internal delivery team. During that time he developed multiple OpenSource tools that are used inside and outside IBM. Recently, Julian gave talks about Eirini and Serverless Computing at Cloud Foundry Summit NA and EU. In his free time he spends time playing the piano or swims laps to clear his head.

https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:06,240
all right hello everyone this talk would

00:00:03,629 --> 00:00:08,970
be primarily about space rockets and

00:00:06,240 --> 00:00:10,559
incidentally about how you can use both

00:00:08,970 --> 00:00:13,160
Cloud Foundry kubernetes to deploy your

00:00:10,559 --> 00:00:16,260
micro services the Hori

00:00:13,160 --> 00:00:17,940
I'm Georgie and I'm working at ACP and

00:00:16,260 --> 00:00:20,880
this is juice or you might know him as

00:00:17,940 --> 00:00:23,220
hell juice and he is an IBM Oh

00:00:20,880 --> 00:00:25,130
it was a common thing between us is that

00:00:23,220 --> 00:00:27,599
we're both working on the enemy project

00:00:25,130 --> 00:00:29,570
which makes us proud thirteen years or

00:00:27,599 --> 00:00:32,399
alien notes if that's your thing

00:00:29,570 --> 00:00:34,410
so this talk will be in three parts

00:00:32,399 --> 00:00:36,120
first we'll talk about why is it

00:00:34,410 --> 00:00:36,480
important why should you care about all

00:00:36,120 --> 00:00:38,910
this

00:00:36,480 --> 00:00:41,309
and then we'll talk about what new

00:00:38,910 --> 00:00:44,610
possibilities this we have in front of

00:00:41,309 --> 00:00:47,399
us and at the end we'll get our hands

00:00:44,610 --> 00:00:50,160
dirty doing some interesting things for

00:00:47,399 --> 00:00:52,500
you but first let's talk about rockets

00:00:50,160 --> 00:00:53,789
and probably the first thing that comes

00:00:52,500 --> 00:00:56,510
into your mind when we talk about

00:00:53,789 --> 00:00:59,430
rockets in software context is of course

00:00:56,510 --> 00:01:01,829
startups right that's pretty hot topic

00:00:59,430 --> 00:01:03,149
nowadays and but actually what are some

00:01:01,829 --> 00:01:06,570
of the most important things for

00:01:03,149 --> 00:01:08,400
startups succeed and that's obviously a

00:01:06,570 --> 00:01:10,170
loaded question because there are many

00:01:08,400 --> 00:01:12,150
things to consider like having a clear

00:01:10,170 --> 00:01:13,890
future having a clear vision of the

00:01:12,150 --> 00:01:16,470
future of your company having a

00:01:13,890 --> 00:01:18,990
competent team funding marketing and

00:01:16,470 --> 00:01:22,560
many many many more but they would like

00:01:18,990 --> 00:01:25,860
to just talk about one thing and this is

00:01:22,560 --> 00:01:28,140
speed in other words that striving to

00:01:25,860 --> 00:01:30,090
minimize the time to market it for your

00:01:28,140 --> 00:01:31,799
product and this is the lane the length

00:01:30,090 --> 00:01:34,140
of time it takes from a product being

00:01:31,799 --> 00:01:36,090
conceived until it's being available for

00:01:34,140 --> 00:01:39,390
sale and here's the thing it doesn't

00:01:36,090 --> 00:01:41,220
matter how great or innovative your

00:01:39,390 --> 00:01:43,460
product is if you cannot get it to

00:01:41,220 --> 00:01:47,119
market before your competition does

00:01:43,460 --> 00:01:50,040
innovation in speed go hand in hand if

00:01:47,119 --> 00:01:52,500
if you cannot master the latter then

00:01:50,040 --> 00:01:55,740
your arrivals will be racing ahead with

00:01:52,500 --> 00:01:57,930
new digital marketing products so then

00:01:55,740 --> 00:02:00,420
the question is how do we get to market

00:01:57,930 --> 00:02:02,759
before our competition errs and of

00:02:00,420 --> 00:02:04,649
course here there are many answers there

00:02:02,759 --> 00:02:06,750
are many possible answers but one of the

00:02:04,649 --> 00:02:09,000
key ones is by choosing the right

00:02:06,750 --> 00:02:11,790
technology and it's important to

00:02:09,000 --> 00:02:13,260
separate which technology will help you

00:02:11,790 --> 00:02:15,239
in the growth of your business

00:02:13,260 --> 00:02:18,420
from these that will just eventually end

00:02:15,239 --> 00:02:20,340
up being another toy in the toolbox and

00:02:18,420 --> 00:02:21,930
you should always try to choose a

00:02:20,340 --> 00:02:24,450
technology that lets you focus on your

00:02:21,930 --> 00:02:27,319
core business not on the technology

00:02:24,450 --> 00:02:29,819
itself and when it comes to choosing

00:02:27,319 --> 00:02:32,430
there are two main considerations in

00:02:29,819 --> 00:02:34,379
this case you have simplicity which is

00:02:32,430 --> 00:02:37,680
provides great stuff like fast

00:02:34,379 --> 00:02:39,900
development and have flexibility which

00:02:37,680 --> 00:02:42,450
is all about giving you the chances the

00:02:39,900 --> 00:02:45,720
options the fruit the freedom to do

00:02:42,450 --> 00:02:47,040
whatever you want to do and usually the

00:02:45,720 --> 00:02:49,799
choices cost like this you choose

00:02:47,040 --> 00:02:51,720
simplicity or flexibility or you choose

00:02:49,799 --> 00:02:54,389
flexibility but then you have a lot of

00:02:51,720 --> 00:02:55,650
complexity to do it and you probably

00:02:54,389 --> 00:02:57,359
know where we're going with this because

00:02:55,650 --> 00:03:00,120
there's a pretty obvious example that

00:02:57,359 --> 00:03:01,799
can be given here and that's we all know

00:03:00,120 --> 00:03:03,840
Cloud Foundry stands for this simplicity

00:03:01,799 --> 00:03:07,260
for this great user experience in this

00:03:03,840 --> 00:03:09,329
fast development and kubernetes has a

00:03:07,260 --> 00:03:11,069
lot more flexibility but then there are

00:03:09,329 --> 00:03:14,940
sort of complexity to do with all the

00:03:11,069 --> 00:03:16,920
times so the dicks possible the next

00:03:14,940 --> 00:03:18,810
logical question I guess just which one

00:03:16,920 --> 00:03:22,290
should you choose which technology is

00:03:18,810 --> 00:03:24,120
better and this is not at all that aims

00:03:22,290 --> 00:03:26,879
to provide an answer to the vs question

00:03:24,120 --> 00:03:29,010
but how about an idea why don't we

00:03:26,879 --> 00:03:31,799
instead dictate the two rocks together

00:03:29,010 --> 00:03:34,260
and that way we can just use the

00:03:31,799 --> 00:03:36,810
combined power of both and can raise

00:03:34,260 --> 00:03:38,609
heads of everyone else and that's of

00:03:36,810 --> 00:03:40,980
course you can maintain both of them

00:03:38,609 --> 00:03:43,349
efficiently at the same time and if

00:03:40,980 --> 00:03:46,769
you're able to make them stay on the

00:03:43,349 --> 00:03:52,620
same course but can't we do better than

00:03:46,769 --> 00:03:54,720
that juice yes we can do better

00:03:52,620 --> 00:03:57,659
definitely I think we can do better with

00:03:54,720 --> 00:04:00,000
this amazing spaceship that has ducked

00:03:57,659 --> 00:04:03,299
like both other rockets like kubernetes

00:04:00,000 --> 00:04:06,780
and so foundry and has some additional

00:04:03,299 --> 00:04:09,299
power and the spaceship was built by two

00:04:06,780 --> 00:04:12,810
projects in the Cloud Foundry foundation

00:04:09,299 --> 00:04:15,180
it's to incubating projects one is CF

00:04:12,810 --> 00:04:18,019
continued ization which is basically

00:04:15,180 --> 00:04:21,450
container rising all the Cloud Foundry

00:04:18,019 --> 00:04:23,729
control plane to containers and you can

00:04:21,450 --> 00:04:26,340
now use some shirts deployed on top of

00:04:23,729 --> 00:04:27,150
your kubernetes and the other project is

00:04:26,340 --> 00:04:31,290
arena

00:04:27,150 --> 00:04:33,930
which makes now your continuous trader

00:04:31,290 --> 00:04:36,810
swappable with kubernetes and now you

00:04:33,930 --> 00:04:39,000
can deploy all your travel

00:04:36,810 --> 00:04:41,340
reapplications as native kubernetes soft

00:04:39,000 --> 00:04:43,680
objects and that brings really good

00:04:41,340 --> 00:04:46,320
benefits like the first thing is you

00:04:43,680 --> 00:04:48,000
have one technology stack so it's one

00:04:46,320 --> 00:04:50,190
technology stack you have to care if you

00:04:48,000 --> 00:04:52,530
need to operate you have one set of

00:04:50,190 --> 00:04:54,870
tooling you don't need to operate bars

00:04:52,530 --> 00:04:57,990
anymore in Diego everything is Cuban

00:04:54,870 --> 00:05:00,050
ideas and you can run on every cloud you

00:04:57,990 --> 00:05:03,510
can start from digitalocean

00:05:00,050 --> 00:05:05,699
IBM cloud provides kubernetes even

00:05:03,510 --> 00:05:07,860
Amazon provides Combinator so you can

00:05:05,699 --> 00:05:10,580
deploy Cloud Foundry everywhere and it's

00:05:07,860 --> 00:05:14,300
really an important thing as a start-up

00:05:10,580 --> 00:05:18,870
so but the most important thing here is

00:05:14,300 --> 00:05:20,250
that the that you have a coordinators

00:05:18,870 --> 00:05:22,919
native implementation of cloud foundry

00:05:20,250 --> 00:05:24,990
and you have this native kubernetes

00:05:22,919 --> 00:05:27,300
objects so all your cloud foundry apps

00:05:24,990 --> 00:05:30,090
are native kubernetes objects and now

00:05:27,300 --> 00:05:32,940
this brings like really new

00:05:30,090 --> 00:05:36,810
opportunities like you can see if push

00:05:32,940 --> 00:05:39,360
your application to the kubernetes

00:05:36,810 --> 00:05:41,310
cluster and you can still use coop CTL

00:05:39,360 --> 00:05:43,409
to directly interact with your

00:05:41,310 --> 00:05:45,690
kubernetes cluster and push also apps

00:05:43,409 --> 00:05:47,430
that way and they all end up in the same

00:05:45,690 --> 00:05:49,520
network and I can't say hello to each

00:05:47,430 --> 00:05:54,150
other they can reach each other

00:05:49,520 --> 00:05:58,080
which is really cool so we prepared an

00:05:54,150 --> 00:06:01,110
application which is called feed Delphia

00:05:58,080 --> 00:06:04,070
it's a photo feat kind of thing like

00:06:01,110 --> 00:06:07,199
Instagram where it can upload photos and

00:06:04,070 --> 00:06:12,780
yeah will like quickly demonstrate it

00:06:07,199 --> 00:06:16,560
let's quote to the browser which is here

00:06:12,780 --> 00:06:21,060
so this is how it's looking like let me

00:06:16,560 --> 00:06:23,250
just make just a little bit bigger all

00:06:21,060 --> 00:06:27,150
right so we already uploaded some photos

00:06:23,250 --> 00:06:31,349
from the conference from Philly and from

00:06:27,150 --> 00:06:34,139
our team dinner yesterday and what you

00:06:31,349 --> 00:06:36,270
can do is like you basically press here

00:06:34,139 --> 00:06:39,719
on upload photo you can choose some

00:06:36,270 --> 00:06:41,110
photo that you want to upload you give

00:06:39,719 --> 00:06:47,010
it a title

00:06:41,110 --> 00:06:52,300
like summit and author who uploaded the

00:06:47,010 --> 00:06:55,030
picture so that's myself and I don't

00:06:52,300 --> 00:06:57,370
have like so we need to refresh the page

00:06:55,030 --> 00:06:59,710
basically and there we go

00:06:57,370 --> 00:07:03,790
the pictures there so this is what we

00:06:59,710 --> 00:07:05,950
are going to deploy today and but how

00:07:03,790 --> 00:07:10,900
does the micro service like just

00:07:05,950 --> 00:07:13,060
something that yoga will tell you so as

00:07:10,900 --> 00:07:16,150
you said we deployed this up a set of

00:07:13,060 --> 00:07:18,510
micro services in fact to have three

00:07:16,150 --> 00:07:21,670
components we have a web user interface

00:07:18,510 --> 00:07:23,740
back-end API in the database that stores

00:07:21,670 --> 00:07:25,660
our images and the first two components

00:07:23,740 --> 00:07:28,090
the user interface is the API a pretty

00:07:25,660 --> 00:07:30,220
standard so we can just see if pushed in

00:07:28,090 --> 00:07:33,070
with Cloud Foundry but for the database

00:07:30,220 --> 00:07:36,340
we chose to deploy it directly by

00:07:33,070 --> 00:07:38,260
kubernetes and a valid use case for that

00:07:36,340 --> 00:07:39,910
would be for example if you want to use

00:07:38,260 --> 00:07:41,830
them if you have a requirement to use a

00:07:39,910 --> 00:07:44,620
custom implementation of your datastore

00:07:41,830 --> 00:07:46,030
that will be probably better provided as

00:07:44,620 --> 00:07:49,720
an independent container of the public

00:07:46,030 --> 00:07:52,480
benitez and also our app spans multiple

00:07:49,720 --> 00:07:54,940
namespaces and since we're using a Denis

00:07:52,480 --> 00:07:56,680
Denis currently deploys to just one in

00:07:54,940 --> 00:07:59,530
space that's why the first two apps end

00:07:56,680 --> 00:08:01,090
up on the same place and as far as the

00:07:59,530 --> 00:08:02,560
database is concerned we can deploy it

00:08:01,090 --> 00:08:04,480
to whatever we want

00:08:02,560 --> 00:08:07,210
in this case we just create some in a

00:08:04,480 --> 00:08:10,330
space just for separation reasons and

00:08:07,210 --> 00:08:13,800
for communication the web user interface

00:08:10,330 --> 00:08:16,990
and the api communicate through HTTP and

00:08:13,800 --> 00:08:20,560
the api connects to the database through

00:08:16,990 --> 00:08:22,570
a tcp port and this the for TCP port of

00:08:20,560 --> 00:08:25,750
the my SQL database which is what we use

00:08:22,570 --> 00:08:27,790
and this is something that it's not

00:08:25,750 --> 00:08:31,240
usually done with just vanilla call

00:08:27,790 --> 00:08:35,290
foundry applications so let's actually

00:08:31,240 --> 00:08:40,290
start doing stuff for you all right

00:08:35,290 --> 00:08:44,170
let's get our hands actually dirty so

00:08:40,290 --> 00:08:47,350
just quickly go to the terminal and

00:08:44,170 --> 00:08:49,750
first like explain the setup so on the

00:08:47,350 --> 00:08:52,720
left side you see you'll see everything

00:08:49,750 --> 00:08:54,640
that we do with Cloud Foundry and on the

00:08:52,720 --> 00:08:54,940
right side of the terminal you will see

00:08:54,640 --> 00:08:57,160
our

00:08:54,940 --> 00:09:01,180
thing that we do with coop CTL in the

00:08:57,160 --> 00:09:03,730
left pane you will see the I watch on CF

00:09:01,180 --> 00:09:06,100
apps and on the other side you will see

00:09:03,730 --> 00:09:07,630
the reflection on kubernetes like you

00:09:06,100 --> 00:09:09,940
see what's going on in the back end and

00:09:07,630 --> 00:09:12,760
you will see the apps appearing in the

00:09:09,940 --> 00:09:14,530
in the club cluster so this basically I

00:09:12,760 --> 00:09:16,960
watched on coop CTL plots in the arena

00:09:14,530 --> 00:09:21,400
namespace and we already pre-installed

00:09:16,960 --> 00:09:27,040
the web interface and you can actually

00:09:21,400 --> 00:09:29,530
see that the application is here's D

00:09:27,040 --> 00:09:32,460
like the CF representation and on the

00:09:29,530 --> 00:09:35,140
right side there is the kubernetes

00:09:32,460 --> 00:09:39,400
representation of that app so let's open

00:09:35,140 --> 00:09:41,350
this feed oh it's ready open perfect so

00:09:39,400 --> 00:09:43,750
but it should be the same yeah so it's

00:09:41,350 --> 00:09:46,480
basically empty and this is exactly what

00:09:43,750 --> 00:09:49,270
we expect because we don't have any

00:09:46,480 --> 00:09:53,380
back-end yet right and if we inspect

00:09:49,270 --> 00:09:57,880
this front-end and let's go to the

00:09:53,380 --> 00:10:01,540
console will see yeah status 404 not

00:09:57,880 --> 00:10:04,300
found because we try to connect to the

00:10:01,540 --> 00:10:06,960
feed API which is not deployed yet and

00:10:04,300 --> 00:10:09,910
of course it cannot get anything great

00:10:06,960 --> 00:10:12,520
so we're going to do is we want to

00:10:09,910 --> 00:10:15,690
deploy the API so let's we are here

00:10:12,520 --> 00:10:18,640
actually the philadelphia repository

00:10:15,690 --> 00:10:21,490
it's available on github everything is

00:10:18,640 --> 00:10:24,700
like well-documented and we'll also I'll

00:10:21,490 --> 00:10:25,330
tell the link at the end and you can try

00:10:24,700 --> 00:10:29,830
it yourself

00:10:25,330 --> 00:10:32,490
to deploy it actually afterwards so yeah

00:10:29,830 --> 00:10:36,460
in the Philadelphia we have the API

00:10:32,490 --> 00:10:40,120
directory and this is just an go

00:10:36,460 --> 00:10:43,450
application and we have a manifest there

00:10:40,120 --> 00:10:45,580
and we can just CF push and it will

00:10:43,450 --> 00:10:47,950
deploy it and while this is deploying

00:10:45,580 --> 00:10:52,690
you know all the CF push procedure I

00:10:47,950 --> 00:10:58,360
guess we can take a quick look at coop

00:10:52,690 --> 00:11:04,030
CTL get parts in the SDF namespace this

00:10:58,360 --> 00:11:06,370
is oh yeah thanks in the suf namespace

00:11:04,030 --> 00:11:09,210
this is where all Cloud Foundry is

00:11:06,370 --> 00:11:11,970
deployed including E

00:11:09,210 --> 00:11:14,970
and the bid service it takes a little

00:11:11,970 --> 00:11:17,880
bit longer today probably because our

00:11:14,970 --> 00:11:21,660
clusters in London and we are far away

00:11:17,880 --> 00:11:25,020
from there who knows so there it is

00:11:21,660 --> 00:11:28,860
great asset this is what you would see

00:11:25,020 --> 00:11:31,100
you when you call boss we amps but you

00:11:28,860 --> 00:11:34,350
see also a bit service here and irony

00:11:31,100 --> 00:11:38,850
the bit service is actually the master

00:11:34,350 --> 00:11:43,980
of the blobs and it has on docker

00:11:38,850 --> 00:11:48,210
registry API that provides you a just a

00:11:43,980 --> 00:11:50,640
pull part of a docker registry and it

00:11:48,210 --> 00:11:52,500
actually so it really tells kubernetes

00:11:50,640 --> 00:11:55,320
actually where it can't pull stamp the

00:11:52,500 --> 00:11:58,170
image from and this is then provided by

00:11:55,320 --> 00:12:00,270
the bit service so it gives you

00:11:58,170 --> 00:12:04,230
basically the OCI representation of your

00:12:00,270 --> 00:12:08,040
droplets great so the staging is done

00:12:04,230 --> 00:12:09,930
and they have failed oh my god so i'm

00:12:08,040 --> 00:12:12,510
pretty sure you know why it's failing

00:12:09,930 --> 00:12:15,840
I don't so I want to debug and see

00:12:12,510 --> 00:12:21,890
what's going on so let's take a look at

00:12:15,840 --> 00:12:27,450
the locks of this app VD by recent locks

00:12:21,890 --> 00:12:30,540
cool I should get some locks ha so red

00:12:27,450 --> 00:12:33,360
lines this is always like a good sign

00:12:30,540 --> 00:12:37,260
into something failed index out of range

00:12:33,360 --> 00:12:42,350
and the main main go 52 so let's take a

00:12:37,260 --> 00:12:47,850
look what's going on there many go 52

00:12:42,350 --> 00:12:52,890
boom alright so yeah we use eunnarae and

00:12:47,850 --> 00:12:57,600
we want to access the zero index sent it

00:12:52,890 --> 00:12:59,790
seems like this array is empty and it's

00:12:57,600 --> 00:13:02,940
on the object we kept and we kept this

00:12:59,790 --> 00:13:06,120
we kept services and we kept services

00:13:02,940 --> 00:13:10,500
users user provided so yeah of course we

00:13:06,120 --> 00:13:15,060
want to bind our API to the database

00:13:10,500 --> 00:13:19,560
that is not existing yet right so of

00:13:15,060 --> 00:13:22,680
course it should be like an empty object

00:13:19,560 --> 00:13:26,240
in the application so because

00:13:22,680 --> 00:13:31,290
things provided by that we kept services

00:13:26,240 --> 00:13:34,380
so let's take a look at the application

00:13:31,290 --> 00:13:38,279
that is failing which is feed API we can

00:13:34,380 --> 00:13:40,230
perfectly see here using the name and of

00:13:38,279 --> 00:13:42,200
course they're just two apps and one is

00:13:40,230 --> 00:13:45,600
crashing so we know which one it is

00:13:42,200 --> 00:13:51,089
let's quickly use coop CTL to describe

00:13:45,600 --> 00:13:53,750
it just cry put this one in namespace

00:13:51,089 --> 00:13:57,060
Rini let's see what's going on there

00:13:53,750 --> 00:13:58,920
let's make that bigger and let's

00:13:57,060 --> 00:14:01,890
actually see what's going on there so

00:13:58,920 --> 00:14:04,950
cool namespace arena this is my app

00:14:01,890 --> 00:14:06,060
here's some labels some information like

00:14:04,950 --> 00:14:09,750
the gyd

00:14:06,060 --> 00:14:14,120
and I'm interested in the environment

00:14:09,750 --> 00:14:20,240
variables because of the wicked services

00:14:14,120 --> 00:14:22,910
is it there so we kept application I'm

00:14:20,240 --> 00:14:28,500
[Music]

00:14:22,910 --> 00:14:31,140
here ha so it's empty as expected so I

00:14:28,500 --> 00:14:33,270
think we need to fix that gurgi near the

00:14:31,140 --> 00:14:37,980
database masters so could you deploy the

00:14:33,270 --> 00:14:40,740
database part please so we need to

00:14:37,980 --> 00:14:42,720
install a database in kubernetes and in

00:14:40,740 --> 00:14:45,330
this case we'll just install a standard

00:14:42,720 --> 00:14:47,450
nice go and probably the easiest way to

00:14:45,330 --> 00:14:50,459
do that increment this is by using

00:14:47,450 --> 00:14:53,130
Chrome and Hume is just a package

00:14:50,459 --> 00:14:55,950
manager for kubernetes manages packages

00:14:53,130 --> 00:14:58,200
of pre-configured finished resources

00:14:55,950 --> 00:15:00,330
that are called charts and we can also

00:14:58,200 --> 00:15:03,390
also search for jobs and in this case

00:15:00,330 --> 00:15:05,070
we're just interesting in MySQL and we

00:15:03,390 --> 00:15:07,800
see that we have a lot of options but

00:15:05,070 --> 00:15:10,950
the one we want to use is the first one

00:15:07,800 --> 00:15:13,230
which is the classic my skill so how do

00:15:10,950 --> 00:15:16,230
you install it we have a script here and

00:15:13,230 --> 00:15:17,790
all this script is doing is just calling

00:15:16,230 --> 00:15:21,300
one command this is Herman stall and

00:15:17,790 --> 00:15:23,040
that command has the name of the chart

00:15:21,300 --> 00:15:24,720
that we wanna install and has some

00:15:23,040 --> 00:15:26,100
information like for example what will

00:15:24,720 --> 00:15:28,110
be the name of the deployment in our

00:15:26,100 --> 00:15:30,240
cluster in which namespace one install

00:15:28,110 --> 00:15:32,339
it and what will be the name of the

00:15:30,240 --> 00:15:33,590
database that will be created for us

00:15:32,339 --> 00:15:36,740
automatically

00:15:33,590 --> 00:15:39,560
so if you run that what this will do is

00:15:36,740 --> 00:15:42,410
it will go to a chart repository that

00:15:39,560 --> 00:15:44,810
contains the my skew chart and it will

00:15:42,410 --> 00:15:46,820
automatically pull that in and it will

00:15:44,810 --> 00:15:50,240
apply it in the cluster and since we

00:15:46,820 --> 00:15:52,790
said we want to deploy it in the field

00:15:50,240 --> 00:15:55,400
DB in namespace we can get the pots

00:15:52,790 --> 00:15:59,540
there and see if it actually did

00:15:55,400 --> 00:16:01,070
anything and yeah as you can see we have

00:15:59,540 --> 00:16:03,050
a pot which is already running and it

00:16:01,070 --> 00:16:06,410
was deployed 20 seconds ago so that

00:16:03,050 --> 00:16:08,420
seems legit so now we have a running

00:16:06,410 --> 00:16:11,240
database but the next thing is how can

00:16:08,420 --> 00:16:13,880
we authenticate to it and by default

00:16:11,240 --> 00:16:15,890
this home chart creates a root user with

00:16:13,880 --> 00:16:18,200
a randomly generated password and this

00:16:15,890 --> 00:16:20,420
password is stored in a quality secret

00:16:18,200 --> 00:16:21,800
which we can easily get and then find

00:16:20,420 --> 00:16:25,880
the right password and then decode it

00:16:21,800 --> 00:16:27,529
and then use it or we can just do you

00:16:25,880 --> 00:16:29,320
can just be pure problems and just copy

00:16:27,529 --> 00:16:32,270
this thing that they provided for us and

00:16:29,320 --> 00:16:34,850
that will do everything for us so if we

00:16:32,270 --> 00:16:36,740
take all that volume available we see

00:16:34,850 --> 00:16:38,060
that we have a password but this will

00:16:36,740 --> 00:16:40,520
have some kind of thing we don't know it

00:16:38,060 --> 00:16:44,150
so if it's a password yet but you can

00:16:40,520 --> 00:16:46,970
verify that we can actually SSH the bot

00:16:44,150 --> 00:16:49,339
that's running the database and you can

00:16:46,970 --> 00:16:53,660
manually indicate there just see if it's

00:16:49,339 --> 00:16:56,530
the right one so if we do that and we

00:16:53,660 --> 00:16:56,530
seen cerini

00:17:05,100 --> 00:17:12,230
probably so if a linen closet doesn't

00:17:08,940 --> 00:17:14,850
support CFS stage but we can still use

00:17:12,230 --> 00:17:15,240
qpl exact which is basically the same

00:17:14,850 --> 00:17:19,579
thing

00:17:15,240 --> 00:17:27,959
and if it ever loads we should see that

00:17:19,579 --> 00:17:30,720
what oh of course I'm stupid

00:17:27,959 --> 00:17:34,410
I should be getting the pots in the feed

00:17:30,720 --> 00:17:36,210
be namespace and I should yeah take the

00:17:34,410 --> 00:17:44,190
pots which is actually in database not

00:17:36,210 --> 00:17:48,570
the API so now it should work and we're

00:17:44,190 --> 00:17:51,360
in the pot now we can just use MySQL HP

00:17:48,570 --> 00:17:54,180
and we can copy the password that we got

00:17:51,360 --> 00:17:56,700
from the environment variable entering

00:17:54,180 --> 00:17:58,950
so that worked and just verify that this

00:17:56,700 --> 00:18:00,930
is the database that we need if we show

00:17:58,950 --> 00:18:03,030
databases we we see that we have the

00:18:00,930 --> 00:18:05,850
video of your database that we specify

00:18:03,030 --> 00:18:07,710
it when we install the home job so now

00:18:05,850 --> 00:18:09,450
we can you have a running database we

00:18:07,710 --> 00:18:11,040
can not indicate to it but we need to

00:18:09,450 --> 00:18:12,960
expose it if you wanna use it as a user

00:18:11,040 --> 00:18:15,570
provided service on the co-founder site

00:18:12,960 --> 00:18:18,510
and there are many ways to expose it in

00:18:15,570 --> 00:18:20,880
kubernetes probably the easiest and most

00:18:18,510 --> 00:18:23,790
straightforward one is to use keep still

00:18:20,880 --> 00:18:25,560
expose with the node port type and what

00:18:23,790 --> 00:18:28,650
this will do is it will create a service

00:18:25,560 --> 00:18:31,560
in the VDB namespace and it will open a

00:18:28,650 --> 00:18:34,620
port in the covariance node and all

00:18:31,560 --> 00:18:37,950
requests that port will be forwarded to

00:18:34,620 --> 00:18:41,160
the to our database and in order to see

00:18:37,950 --> 00:18:43,050
which port was open for us because we

00:18:41,160 --> 00:18:45,300
cannot choose it we can list all

00:18:43,050 --> 00:18:46,800
services and the first record under the

00:18:45,300 --> 00:18:49,740
port's column you can see that we have

00:18:46,800 --> 00:18:52,350
we mop the mask your port to the three

00:18:49,740 --> 00:18:55,080
zero one two eight two dot

00:18:52,350 --> 00:18:57,330
so now we have everything we need in

00:18:55,080 --> 00:19:00,600
order to connect database and we can

00:18:57,330 --> 00:19:04,020
create a CF user provided service and we

00:19:00,600 --> 00:19:06,810
just provide a JSON here and that jason

00:19:04,020 --> 00:19:09,900
has everything we need in order to

00:19:06,810 --> 00:19:11,590
connect the database first password and

00:19:09,900 --> 00:19:15,889
the password we have in

00:19:11,590 --> 00:19:20,779
my skill did passwords so you can just

00:19:15,889 --> 00:19:24,049
copy that database address is this isn't

00:19:20,779 --> 00:19:25,850
the IP of the note and we can just paste

00:19:24,049 --> 00:19:30,109
the right port which we got from the

00:19:25,850 --> 00:19:31,759
services and the DB name is video fear

00:19:30,109 --> 00:19:34,489
which is what we specified when we

00:19:31,759 --> 00:19:37,340
installed the chart so this grid the

00:19:34,489 --> 00:19:40,580
service on the co-founder side and in

00:19:37,340 --> 00:19:44,119
order to bind it to our app we need to

00:19:40,580 --> 00:19:50,419
use the bind of the unbind the bind

00:19:44,119 --> 00:19:54,649
service command right in that's that way

00:19:50,419 --> 00:19:58,249
we bind the photo based service to our

00:19:54,649 --> 00:20:00,679
feet API app but in order to get the

00:19:58,249 --> 00:20:03,019
updates in our app we have to restage it

00:20:00,679 --> 00:20:05,049
and that will basically delete

00:20:03,019 --> 00:20:08,809
everything in the convenience cluster

00:20:05,049 --> 00:20:10,970
that has the feed API name and after

00:20:08,809 --> 00:20:13,249
that it will create again and it will

00:20:10,970 --> 00:20:14,989
create with the new environment

00:20:13,249 --> 00:20:17,989
variables with everything you need in

00:20:14,989 --> 00:20:19,849
order to connect to the database and you

00:20:17,989 --> 00:20:22,909
might be wondering why don't we just use

00:20:19,849 --> 00:20:25,309
service brokers and yeah you can I mean

00:20:22,909 --> 00:20:27,590
it with we're not saying that you should

00:20:25,309 --> 00:20:29,090
use that way all the time it's just a

00:20:27,590 --> 00:20:30,979
different approach that you can use

00:20:29,090 --> 00:20:32,809
maybe you don't know how to write

00:20:30,979 --> 00:20:34,220
service brokers or maybe you just don't

00:20:32,809 --> 00:20:36,049
have the time to research it

00:20:34,220 --> 00:20:40,549
or maybe just you just want to quickly

00:20:36,049 --> 00:20:43,570
just try out something and that way you

00:20:40,549 --> 00:20:45,559
can easily do it it's much faster than

00:20:43,570 --> 00:20:56,019
handling all the service broker things

00:20:45,559 --> 00:20:59,149
and this should be staged soon yeah so

00:20:56,019 --> 00:21:02,509
it's almost done and after it's done

00:20:59,149 --> 00:21:06,340
we'll see that the variable will be the

00:21:02,509 --> 00:21:12,919
correct one and we have the app which is

00:21:06,340 --> 00:21:17,029
creating and soon should be running yep

00:21:12,919 --> 00:21:21,649
nice alright so now we can use the same

00:21:17,029 --> 00:21:23,480
URL in the browser and twisty to still

00:21:21,649 --> 00:21:24,970
see that we don't have anything but

00:21:23,480 --> 00:21:28,609
let's actually try uploading something

00:21:24,970 --> 00:21:38,570
and let's see if it works so it's

00:21:28,609 --> 00:21:40,129
loading image and as you can see it's

00:21:38,570 --> 00:21:43,970
there it's supported it's in the

00:21:40,129 --> 00:21:46,460
database right so let's quickly talk

00:21:43,970 --> 00:21:48,230
about monitoring and usually what caught

00:21:46,460 --> 00:21:49,879
foundry would have found out something

00:21:48,230 --> 00:21:53,210
like that which you can use to monitor

00:21:49,879 --> 00:21:54,950
all your apps but in this case we don't

00:21:53,210 --> 00:21:56,779
actually deploy all the apps through

00:21:54,950 --> 00:21:58,909
Cloud Foundry so far it doesn't know

00:21:56,779 --> 00:22:01,429
about a database for example so what can

00:21:58,909 --> 00:22:03,349
you do in that case and since we're

00:22:01,429 --> 00:22:05,989
using a Dini all of the apps end up in

00:22:03,349 --> 00:22:09,080
kubernetes cluster anyway so we can just

00:22:05,989 --> 00:22:11,539
use a monitoring solution that just uses

00:22:09,080 --> 00:22:14,859
the kubernetes resources or tracks the

00:22:11,539 --> 00:22:17,330
cabinet spots and one such thing is

00:22:14,859 --> 00:22:19,639
parameters called prometheus there's a

00:22:17,330 --> 00:22:22,549
huge art for it and we already

00:22:19,639 --> 00:22:26,239
pre-installed it because it takes a lot

00:22:22,549 --> 00:22:29,700
of time to install it and we can show it

00:22:26,239 --> 00:22:31,489
here in the prometheus namespace

00:22:29,700 --> 00:22:33,440
[Music]

00:22:31,489 --> 00:22:35,599
it has a lot of components so it takes a

00:22:33,440 --> 00:22:39,230
bit of time to get installed and we have

00:22:35,599 --> 00:22:40,909
it set up in advance and we use local

00:22:39,230 --> 00:22:45,289
port forwarding in order to be able to

00:22:40,909 --> 00:22:48,589
access it from our local machine and it

00:22:45,289 --> 00:22:53,139
should be on port 99 right and here you

00:22:48,589 --> 00:22:57,710
can write queries for example cube bot

00:22:53,139 --> 00:23:00,139
rate it and this will show you some

00:22:57,710 --> 00:23:02,720
graph information about the creation of

00:23:00,139 --> 00:23:06,769
the pots and you have some visual things

00:23:02,720 --> 00:23:09,820
here maybe you can understand and we can

00:23:06,769 --> 00:23:13,519
also specify a complete pot if you wanna

00:23:09,820 --> 00:23:17,389
that we wanna monitor and let's just get

00:23:13,519 --> 00:23:19,989
the one that we just deployed just a

00:23:17,389 --> 00:23:19,989
feet API

00:23:20,960 --> 00:23:28,490
and yeah it appears and that doesn't

00:23:24,660 --> 00:23:32,850
look that great it's kind of static and

00:23:28,490 --> 00:23:34,830
visually that helpful so you can deploy

00:23:32,850 --> 00:23:38,310
grifone on top of that and graph anna

00:23:34,830 --> 00:23:41,040
has built-in support for Prometheus and

00:23:38,310 --> 00:23:43,290
you that way you can monitor your apps

00:23:41,040 --> 00:23:44,670
that are running on kubernetes that are

00:23:43,290 --> 00:23:49,370
bought Cloud Foundry and Native

00:23:44,670 --> 00:23:56,010
communities are convinced ups so

00:23:49,370 --> 00:23:59,160
summarized all right so in summary so

00:23:56,010 --> 00:24:00,860
what did we do we deployed a micro

00:23:59,160 --> 00:24:05,970
service architecture of that feat

00:24:00,860 --> 00:24:09,090
Delphia app two of those micro servers

00:24:05,970 --> 00:24:13,460
were deployed by C F and we deployed the

00:24:09,090 --> 00:24:17,520
database using coop CTL and we used

00:24:13,460 --> 00:24:20,760
cloud foundry user services to actually

00:24:17,520 --> 00:24:23,300
bind the API part with the database in

00:24:20,760 --> 00:24:25,590
order that we can like store all the

00:24:23,300 --> 00:24:30,060
photos into the database and also get

00:24:25,590 --> 00:24:32,190
them from the database and yeah and we

00:24:30,060 --> 00:24:34,620
also show like you can use cloth

00:24:32,190 --> 00:24:36,960
boundary native monitoring approaches

00:24:34,620 --> 00:24:39,840
like Prometheus which is actually part

00:24:36,960 --> 00:24:44,910
of the cloud native computing foundation

00:24:39,840 --> 00:24:46,410
so it's and you can actually if you like

00:24:44,910 --> 00:24:53,820
deployment up graph on earth we have

00:24:46,410 --> 00:24:58,920
like updated to monitoring charts yeah

00:24:53,820 --> 00:25:02,010
so why to choose between flexibility and

00:24:58,920 --> 00:25:04,140
simplicity if you can have both you can

00:25:02,010 --> 00:25:07,170
have flexibility you can have simplicity

00:25:04,140 --> 00:25:09,510
with araignee and CF containerization

00:25:07,170 --> 00:25:12,690
you have a unified operator user

00:25:09,510 --> 00:25:16,020
experience and you have overall reduced

00:25:12,690 --> 00:25:19,560
costs because you don't have to operate

00:25:16,020 --> 00:25:23,010
both above deployed CF and kubernetes

00:25:19,560 --> 00:25:23,610
and with that we first be first on the

00:25:23,010 --> 00:25:25,170
market

00:25:23,610 --> 00:25:28,170
choose the reading and CF

00:25:25,170 --> 00:25:31,740
containerization and with that that's

00:25:28,170 --> 00:25:33,810
all we have for today there's a quirk

00:25:31,740 --> 00:25:37,470
owed to our Philadelphia

00:25:33,810 --> 00:25:41,640
education and there's also the URL it's

00:25:37,470 --> 00:25:45,390
just every needed CF with that your will

00:25:41,640 --> 00:25:48,270
land directly in the feet and you can

00:25:45,390 --> 00:25:50,850
upload some photos from the summit and

00:25:48,270 --> 00:25:53,100
we will make the pictures available some

00:25:50,850 --> 00:25:55,800
when after summit and you could just

00:25:53,100 --> 00:25:59,850
reach out at us in the Erie need F

00:25:55,800 --> 00:26:03,510
channel on Cloud Foundry slack and yeah

00:25:59,850 --> 00:26:06,650
I think we have a little bit time for

00:26:03,510 --> 00:26:09,180
questions left they had two minutes so

00:26:06,650 --> 00:26:11,450
if there are any questions feel free to

00:26:09,180 --> 00:26:11,450

YouTube URL: https://www.youtube.com/watch?v=B2AII9RkPRk


