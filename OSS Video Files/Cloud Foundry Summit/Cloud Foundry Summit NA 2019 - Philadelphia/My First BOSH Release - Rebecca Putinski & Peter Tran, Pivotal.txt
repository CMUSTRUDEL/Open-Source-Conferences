Title: My First BOSH Release - Rebecca Putinski & Peter Tran, Pivotal
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	My First BOSH Release - Rebecca Putinski & Peter Tran, Pivotal

BOSH is a tool that unifies release engineering, deployment, and lifecycle management of small and large-scale cloud software by enabling operators deploy software over hundreds of VMs. But how do you get started with packaging your product so it can be deployed, versioned, and managed by BOSH? With BOSH releases, of course! A BOSH release is a versioned collection of configuration properties and templates, start-up scripts, source code, binary artifacts, and everything else required to build and deploy software in a reproducible way. In this talk, we will take you through the process of bringing a new BOSH release to life. We will demonstrate how to create a new release with dependencies and source code, and youâ€™ll learn about the lifecycle hooks BOSH provides for release authors.

About Peter Tran
Peter is a senior software engineer at Pivotal Cloud Foundry. For the last two years, he worked on packaging data services like Greenplum and GemFire for Cloud Foundry app developers and is currently a core contributor to GemFire. He has extensive experience building usable BOSH releases containing complex software, release engineering, and continuous delivery. As part of the Pivotal Cloud Cache engineering leadership team, Peter helped deliver a cloud-native GemFire distribution that was more reliable and safer, quicker and easier to upgrade. Application teams are able to stay up to date with GemFire quarterly which was unheard of before Pivotal Cloud Cache

About Rebecca Putinski
Rebecca works at Pivotal Cloud Foundry on the BOSH Core team in Toronto. She has been working in the Pivotal Cloud Foundry and open source Cloud Foundry ecosystem for several years, and has extensive experience with packaging distributed databases into BOSH releases. Rebecca enjoys going outside, and baking delicious things in her spare time.

https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:06,029
hi we're gonna get started now welcome

00:00:03,870 --> 00:00:11,910
to the talk we're going to go through

00:00:06,029 --> 00:00:13,410
creating a first Bosch release today but

00:00:11,910 --> 00:00:15,929
first we'll introduce ourselves I'm

00:00:13,410 --> 00:00:18,420
Rebecca on the left there I've been on

00:00:15,929 --> 00:00:20,279
the Bosch team for just over a year and

00:00:18,420 --> 00:00:24,480
I'm a core contributor and I work out of

00:00:20,279 --> 00:00:26,760
the Toronto office with pivotal hi I'm

00:00:24,480 --> 00:00:29,130
Peter I also work in the Toronto office

00:00:26,760 --> 00:00:30,960
at pivotal I work on gem fire which is

00:00:29,130 --> 00:00:38,309
also known as Apache geode and I've been

00:00:30,960 --> 00:00:39,629
using Bosch for up to three years so a

00:00:38,309 --> 00:00:41,820
quick overview our our session today

00:00:39,629 --> 00:00:44,370
we're gonna do start off with a short

00:00:41,820 --> 00:00:46,710
review of what Bosch is and what Bosch

00:00:44,370 --> 00:00:48,059
deployment is we're gonna mostly be

00:00:46,710 --> 00:00:50,039
talking about the building blocks of a

00:00:48,059 --> 00:00:52,199
Bosch release at the very end we're

00:00:50,039 --> 00:00:54,690
gonna end it off with a Bosch deployment

00:00:52,199 --> 00:00:56,809
and a couple other interesting Bosch

00:00:54,690 --> 00:00:59,520
features that you can take advantage of

00:00:56,809 --> 00:01:03,840
so can I get a show of hands who here

00:00:59,520 --> 00:01:05,519
has a NEBOSH deployment before ok almost

00:01:03,840 --> 00:01:09,689
half the room almost the whole room ok

00:01:05,519 --> 00:01:11,790
cool for those of you who haven't we're

00:01:09,689 --> 00:01:14,760
gonna go over what a Bosch appointment

00:01:11,790 --> 00:01:17,580
is but first what is Bosh Bosh is a

00:01:14,760 --> 00:01:19,860
project that unifies release engineering

00:01:17,580 --> 00:01:23,070
deployment lifecycle management of small

00:01:19,860 --> 00:01:25,680
and large scale cloud software so let's

00:01:23,070 --> 00:01:27,960
unpack this a little bit the first part

00:01:25,680 --> 00:01:29,790
is release engineering which is the

00:01:27,960 --> 00:01:31,170
practice of gathering the software that

00:01:29,790 --> 00:01:33,570
you want to make available for people's

00:01:31,170 --> 00:01:35,070
people to consume the second part of it

00:01:33,570 --> 00:01:37,740
is deployment so now that you've

00:01:35,070 --> 00:01:39,479
gathered your software how do you put it

00:01:37,740 --> 00:01:42,840
somewhere so people can start using it

00:01:39,479 --> 00:01:44,700
and lastly lifecycle management how do

00:01:42,840 --> 00:01:46,740
you once you have your software in a

00:01:44,700 --> 00:01:48,360
place where people can access it how do

00:01:46,740 --> 00:01:50,909
you start it how do you stop it

00:01:48,360 --> 00:01:52,140
how do you upgrade it and throw this

00:01:50,909 --> 00:01:55,380
presentation we're going to go through

00:01:52,140 --> 00:01:57,180
each one of these components so a Bosch

00:01:55,380 --> 00:01:59,759
deployment starts off with the Bosch

00:01:57,180 --> 00:02:03,000
director which is just a VM running

00:01:59,759 --> 00:02:05,460
Bosch software and it has a special

00:02:03,000 --> 00:02:09,450
ability to create VMs it's connected to

00:02:05,460 --> 00:02:13,260
a CPI a cloud provider interface like

00:02:09,450 --> 00:02:14,220
Google or Amazon or OpenStack and it

00:02:13,260 --> 00:02:16,320
creates VMs

00:02:14,220 --> 00:02:19,590
and when does that we call those bosch

00:02:16,320 --> 00:02:22,080
deployments so one or a set of VMs is a

00:02:19,590 --> 00:02:24,440
Bosch deployment you need to tell Bosch

00:02:22,080 --> 00:02:27,120
what you'll be running on these VMs and

00:02:24,440 --> 00:02:29,430
there's two parts to that the first part

00:02:27,120 --> 00:02:31,710
is your code so what you want to make

00:02:29,430 --> 00:02:33,360
available on your deployment and we'd

00:02:31,710 --> 00:02:35,070
like to call that the Bosch release

00:02:33,360 --> 00:02:37,590
which is what today's whole talk will be

00:02:35,070 --> 00:02:40,950
focused on the second part of this is

00:02:37,590 --> 00:02:43,680
the OS and we call that the Bosch stem

00:02:40,950 --> 00:02:46,280
cell and to create a deployment you need

00:02:43,680 --> 00:02:49,560
these pieces you take your Bosch release

00:02:46,280 --> 00:02:52,320
wash them so you upload it to your boss

00:02:49,560 --> 00:02:54,810
director and it takes that and creates a

00:02:52,320 --> 00:02:57,990
Bosch appointment in that you have your

00:02:54,810 --> 00:03:03,000
code running on the OS running on one or

00:02:57,990 --> 00:03:05,760
a set of VMs to do to help with all of

00:03:03,000 --> 00:03:08,670
this we have the Bosch CLI it will

00:03:05,760 --> 00:03:11,580
manage the movement of software and as

00:03:08,670 --> 00:03:13,110
you see today it also does scaffolding

00:03:11,580 --> 00:03:15,600
so throughout the presentation we'll use

00:03:13,110 --> 00:03:19,170
the Bosch CLI to help us scaffold out

00:03:15,600 --> 00:03:20,880
all the pieces we need for Bosch so a

00:03:19,170 --> 00:03:24,150
quick overview of the building blocks of

00:03:20,880 --> 00:03:26,220
Bosch release we have blobs like binary

00:03:24,150 --> 00:03:28,950
large objects you have your source code

00:03:26,220 --> 00:03:31,260
you have packages and lastly you have

00:03:28,950 --> 00:03:33,480
jobs and with all of these four pieces

00:03:31,260 --> 00:03:40,260
you have a complete Bosch release that

00:03:33,480 --> 00:03:42,690
is possible to deploy hey thanks Peter

00:03:40,260 --> 00:03:44,940
for bringing us through how basic Bosch

00:03:42,690 --> 00:03:46,650
works so of course with any kind of

00:03:44,940 --> 00:03:48,269
one-on-one talk where we make a thing

00:03:46,650 --> 00:03:50,730
for the first time we'll go with hello

00:03:48,269 --> 00:03:54,420
world so what we'll do is we'll make a

00:03:50,730 --> 00:03:55,530
new Bosch release called hello world so

00:03:54,420 --> 00:03:57,930
we'll create a directory for the

00:03:55,530 --> 00:04:00,930
contents and get into it and they will

00:03:57,930 --> 00:04:02,459
initialize the release so this is a what

00:04:00,930 --> 00:04:04,650
Peter mentioned where the CLI is used

00:04:02,459 --> 00:04:06,269
for scaffolding as well so you can say

00:04:04,650 --> 00:04:07,890
Bosch and nit release and this will

00:04:06,269 --> 00:04:11,730
create a bit of structure to this

00:04:07,890 --> 00:04:13,769
directory with some files so blobs

00:04:11,730 --> 00:04:16,260
packages and source those things Peter

00:04:13,769 --> 00:04:20,250
just mentioned how do those come into

00:04:16,260 --> 00:04:22,320
play so blobs is what is in a release

00:04:20,250 --> 00:04:24,600
and they're usually the binary large

00:04:22,320 --> 00:04:26,820
objects that are used for runtime or

00:04:24,600 --> 00:04:27,910
compilation dependencies these are

00:04:26,820 --> 00:04:30,130
things that are referenced

00:04:27,910 --> 00:04:31,540
they're not necessarily checked in to

00:04:30,130 --> 00:04:35,260
release they're not really part of your

00:04:31,540 --> 00:04:36,880
so source code source code though is

00:04:35,260 --> 00:04:38,650
your code so this is the code that

00:04:36,880 --> 00:04:40,960
you're interested in getting into a

00:04:38,650 --> 00:04:45,370
deployment making available to your

00:04:40,960 --> 00:04:47,770
users and packages wrap around source

00:04:45,370 --> 00:04:51,070
code and blobs to instruct Bosh's how to

00:04:47,770 --> 00:04:53,530
install or compile or just manage those

00:04:51,070 --> 00:04:57,220
pieces of code and this is the interface

00:04:53,530 --> 00:05:00,220
that you use to make your make your

00:04:57,220 --> 00:05:01,810
release deployable so first let's add

00:05:00,220 --> 00:05:04,840
some source code this will go in the

00:05:01,810 --> 00:05:07,750
source directory for us we're just going

00:05:04,840 --> 00:05:10,090
to make a tiny server in golang which

00:05:07,750 --> 00:05:12,880
responds with the word hyo every time

00:05:10,090 --> 00:05:14,290
you send any request to it I just kind

00:05:12,880 --> 00:05:17,980
of want him to move away from hello so

00:05:14,290 --> 00:05:19,960
I'm gonna use yo instead so now we're

00:05:17,980 --> 00:05:21,940
building up our release on the left here

00:05:19,960 --> 00:05:24,070
we'll show the file structure you'll be

00:05:21,940 --> 00:05:26,230
building and on the right is our kind of

00:05:24,070 --> 00:05:28,960
visual representation so so far we have

00:05:26,230 --> 00:05:33,850
this hello Co which is our tiny little

00:05:28,960 --> 00:05:36,160
golang server okay so we mentioned blobs

00:05:33,850 --> 00:05:37,720
before these are referenced things that

00:05:36,160 --> 00:05:39,130
you would include in a release but

00:05:37,720 --> 00:05:41,350
they're not necessarily part of your

00:05:39,130 --> 00:05:44,290
source code these are used to compile

00:05:41,350 --> 00:05:46,030
your source code or maybe it's a program

00:05:44,290 --> 00:05:48,370
like my sequel you're putting in a

00:05:46,030 --> 00:05:51,960
release so for us we're gonna configure

00:05:48,370 --> 00:05:54,100
a small blob store what we would call

00:05:51,960 --> 00:05:56,500
something that stores these blobs on

00:05:54,100 --> 00:05:58,990
disk for temporary purposes for release

00:05:56,500 --> 00:06:01,660
development we're gonna configure one on

00:05:58,990 --> 00:06:04,860
disk today but you can also use s3 for

00:06:01,660 --> 00:06:07,690
when you want to publish these releases

00:06:04,860 --> 00:06:09,490
so why are we doing this at all and it's

00:06:07,690 --> 00:06:11,530
because we want to add a compilation to

00:06:09,490 --> 00:06:13,120
pendency if you've written any code in

00:06:11,530 --> 00:06:16,330
going before you know you need to

00:06:13,120 --> 00:06:19,200
compile this how are we gonna do that so

00:06:16,330 --> 00:06:21,910
we'll add a package which will be

00:06:19,200 --> 00:06:24,580
dependency for a source compilation so

00:06:21,910 --> 00:06:27,730
add golang as a dependency on our

00:06:24,580 --> 00:06:31,120
release this package will reference a

00:06:27,730 --> 00:06:34,660
blob so that looks like this we're going

00:06:31,120 --> 00:06:36,580
to clone a predefined package that the

00:06:34,660 --> 00:06:37,180
Boche team has put together for you

00:06:36,580 --> 00:06:40,120
already

00:06:37,180 --> 00:06:41,139
so we'll clone the Boche packages golang

00:06:40,120 --> 00:06:44,050
release

00:06:41,139 --> 00:06:46,120
we'll get into our own release we're

00:06:44,050 --> 00:06:48,220
building and we'll say Bosch vendor

00:06:46,120 --> 00:06:50,500
package this will add that golang

00:06:48,220 --> 00:06:56,080
package as a dependency for us to use

00:06:50,500 --> 00:06:58,300
later so now in addition to our our

00:06:56,080 --> 00:07:00,490
source file we also have this package

00:06:58,300 --> 00:07:02,710
we've added so this is still within our

00:07:00,490 --> 00:07:05,560
release and it's just a component of our

00:07:02,710 --> 00:07:10,449
release and that package references this

00:07:05,560 --> 00:07:12,340
blob that we're going to use later so

00:07:10,449 --> 00:07:14,440
now that we've got a dependency here

00:07:12,340 --> 00:07:16,389
that we'll eventually use we need

00:07:14,440 --> 00:07:18,280
another package for our source code and

00:07:16,389 --> 00:07:20,440
this is so we can tell Bosch how to

00:07:18,280 --> 00:07:23,800
actually compile and build the source

00:07:20,440 --> 00:07:26,560
code so we can run it later again we'll

00:07:23,800 --> 00:07:29,080
use the CLI to scaffold this package out

00:07:26,560 --> 00:07:33,400
we can say boss generate package and

00:07:29,080 --> 00:07:35,319
we'll call this hello server okay so now

00:07:33,400 --> 00:07:37,719
we have two packages that we're dealing

00:07:35,319 --> 00:07:40,029
with we have the hello server package I

00:07:37,719 --> 00:07:44,830
just made and we have that other golang

00:07:40,029 --> 00:07:47,919
one the one below it still part of

00:07:44,830 --> 00:07:50,529
packaging with bosch is to specify and

00:07:47,919 --> 00:07:52,509
define how to actually work with your

00:07:50,529 --> 00:07:56,830
source code so part of this

00:07:52,509 --> 00:07:58,629
specification we'll call will give our

00:07:56,830 --> 00:08:01,629
package a name which is hello server

00:07:58,629 --> 00:08:04,000
which we already scaffolded and we'll

00:08:01,629 --> 00:08:06,969
say that this package depends on another

00:08:04,000 --> 00:08:09,339
so our package depends on the golang

00:08:06,969 --> 00:08:13,150
package we already added so now we'll be

00:08:09,339 --> 00:08:16,150
able to use this package while building

00:08:13,150 --> 00:08:17,949
our source code and for our package

00:08:16,150 --> 00:08:20,979
we're interested in the files in the

00:08:17,949 --> 00:08:23,259
source directory that end and dot go so

00:08:20,979 --> 00:08:26,699
you can use this glob pattern in many

00:08:23,259 --> 00:08:29,620
different ways for your source code too

00:08:26,699 --> 00:08:31,900
so now we've built up a little bit more

00:08:29,620 --> 00:08:34,240
of our package we defined a dependency

00:08:31,900 --> 00:08:36,490
between the golang package and our

00:08:34,240 --> 00:08:41,050
source package and we've added this spec

00:08:36,490 --> 00:08:42,729
file which is the purple ok so i've

00:08:41,050 --> 00:08:44,649
talked about building source code so

00:08:42,729 --> 00:08:46,810
let's finally get to that how do we do

00:08:44,649 --> 00:08:48,820
that we we're not going to fill out this

00:08:46,810 --> 00:08:50,589
file called packaging which is to

00:08:48,820 --> 00:08:52,779
actually build our source

00:08:50,589 --> 00:08:54,340
first we'll reference that golang

00:08:52,779 --> 00:08:56,440
package I keep talking about

00:08:54,340 --> 00:08:59,260
so this we can just reference the

00:08:56,440 --> 00:09:01,300
package and that golang package has a

00:08:59,260 --> 00:09:03,060
few special tools that the bosch team

00:09:01,300 --> 00:09:05,920
has put together which gives a nice

00:09:03,060 --> 00:09:08,500
compilation environment which allows us

00:09:05,920 --> 00:09:11,950
to simply say go build so now we have

00:09:08,500 --> 00:09:13,690
our art binary and that ends up just

00:09:11,950 --> 00:09:15,880
being in the same directory so now we're

00:09:13,690 --> 00:09:19,120
gonna copy this to a well-defined

00:09:15,880 --> 00:09:22,180
location that Bosch gives us for later

00:09:19,120 --> 00:09:28,030
reference so we'll be able to touch our

00:09:22,180 --> 00:09:30,580
binary here and tell it to run so as

00:09:28,030 --> 00:09:32,620
part of our source package now or our

00:09:30,580 --> 00:09:34,270
package that we're building to actually

00:09:32,620 --> 00:09:36,760
compile our source code we have the spec

00:09:34,270 --> 00:09:37,770
and packaging file now so we're almost

00:09:36,760 --> 00:09:40,210
done

00:09:37,770 --> 00:09:42,490
well great that's really nice and stuff

00:09:40,210 --> 00:09:44,500
but now with these this package how do

00:09:42,490 --> 00:09:47,110
we actually run it we're actually we've

00:09:44,500 --> 00:09:52,600
got a compiled it's there but how do we

00:09:47,110 --> 00:09:54,370
run it so this is where jobs come in so

00:09:52,600 --> 00:09:56,170
the packages we're responsible for

00:09:54,370 --> 00:09:58,900
making our source code and our blobs

00:09:56,170 --> 00:10:01,270
available to the release and as the jobs

00:09:58,900 --> 00:10:03,970
responsibility to control how to run

00:10:01,270 --> 00:10:05,260
them so jobs in terms of packages and

00:10:03,970 --> 00:10:08,290
they're responsible for handling

00:10:05,260 --> 00:10:10,660
requests like start and stop and if

00:10:08,290 --> 00:10:14,290
you've ever run a go app or a node app

00:10:10,660 --> 00:10:16,840
you run node app tjs or go run whatever

00:10:14,290 --> 00:10:19,090
and this is where that's specified it's

00:10:16,840 --> 00:10:22,600
the how of how to run the code that's

00:10:19,090 --> 00:10:24,730
sitting in your Bosh release it also

00:10:22,600 --> 00:10:26,460
relax reacts to other lifecycle events

00:10:24,730 --> 00:10:29,650
i've only mentioned start for now

00:10:26,460 --> 00:10:31,300
there's stop and there's a whole list of

00:10:29,650 --> 00:10:34,980
other ones that we'll go over in the end

00:10:31,300 --> 00:10:38,050
before hello world will keep with start

00:10:34,980 --> 00:10:41,620
so to create our job we can use the boss

00:10:38,050 --> 00:10:44,800
CLI as well run boss generate job yo so

00:10:41,620 --> 00:10:49,810
our jobs called yo and it creates a set

00:10:44,800 --> 00:10:52,840
of familiar files under the jobs

00:10:49,810 --> 00:10:55,300
directory under the EO directory let's

00:10:52,840 --> 00:10:57,790
take a look at spec for now the spec is

00:10:55,300 --> 00:10:59,920
similar to patching packaging spec it's

00:10:57,790 --> 00:11:02,140
short for our specification it has a

00:10:59,920 --> 00:11:04,510
name we'll call it yo has templates

00:11:02,140 --> 00:11:06,790
which is our scripts that handle the

00:11:04,510 --> 00:11:08,529
start and stop that I mentioned it has

00:11:06,790 --> 00:11:11,470
the list of packages

00:11:08,529 --> 00:11:14,139
this job needs and he's going to use and

00:11:11,470 --> 00:11:15,310
lastly it has a set of properties we're

00:11:14,139 --> 00:11:17,529
gonna leave that empty for now because

00:11:15,310 --> 00:11:20,019
we don't need anything but again Rebecca

00:11:17,529 --> 00:11:24,100
will go over what kind of fun things you

00:11:20,019 --> 00:11:26,139
can put in there at the end so now that

00:11:24,100 --> 00:11:28,029
we have our spec file there's two other

00:11:26,139 --> 00:11:37,269
files that we need before this job is

00:11:28,029 --> 00:11:39,850
complete okay so we've defined our job

00:11:37,269 --> 00:11:41,889
but we need a little bit more in order

00:11:39,850 --> 00:11:45,009
to run our package still so we'll get

00:11:41,889 --> 00:11:47,350
into job process control so what I mean

00:11:45,009 --> 00:11:49,509
by that is on the VM when you're running

00:11:47,350 --> 00:11:52,540
your Bosch release we'll need a way to

00:11:49,509 --> 00:11:56,110
start it stop it and monitor it in case

00:11:52,540 --> 00:11:58,870
it starts failing so boss uses Monnett

00:11:56,110 --> 00:12:02,050
to accomplish this on the vm for local

00:11:58,870 --> 00:12:04,600
processes and then our scripts that

00:12:02,050 --> 00:12:07,059
we've defined earlier in our templates

00:12:04,600 --> 00:12:10,509
are used as the start and stop program

00:12:07,059 --> 00:12:13,269
form on it later on when we deploy this

00:12:10,509 --> 00:12:15,370
release what actually happens is the

00:12:13,269 --> 00:12:16,959
director issues a start command to

00:12:15,370 --> 00:12:19,240
monitor and then mana twill actually

00:12:16,959 --> 00:12:24,339
start your job through the control

00:12:19,240 --> 00:12:26,350
script we already defined so we've got

00:12:24,339 --> 00:12:31,360
the spec file now and this modern file

00:12:26,350 --> 00:12:33,279
we have filled out continuing a job

00:12:31,360 --> 00:12:35,170
process control what does that script

00:12:33,279 --> 00:12:37,540
look like to actually control our

00:12:35,170 --> 00:12:41,800
package so this is where we connect the

00:12:37,540 --> 00:12:44,379
job to running our package so for my

00:12:41,800 --> 00:12:47,259
control script here I have start and I

00:12:44,379 --> 00:12:50,439
have stop first start we just kind of

00:12:47,259 --> 00:12:53,949
echo the pit or the process identifier

00:12:50,439 --> 00:12:55,990
of this shell script and then we're

00:12:53,949 --> 00:12:58,329
actually going to now run our hello

00:12:55,990 --> 00:13:01,269
binary so the VAR be got packages hello

00:12:58,329 --> 00:13:02,740
server hello here the exec will actually

00:13:01,269 --> 00:13:05,499
start running our binary that we

00:13:02,740 --> 00:13:07,420
compiled earlier for stop we'll just

00:13:05,499 --> 00:13:12,610
simply kill it off and remove that pit

00:13:07,420 --> 00:13:14,829
file now we have these three files that

00:13:12,610 --> 00:13:17,920
are defining our job and this is how you

00:13:14,829 --> 00:13:20,710
now we'll run the package this control

00:13:17,920 --> 00:13:25,420
script is the one that controls our

00:13:20,710 --> 00:13:27,520
package running okay that's actually all

00:13:25,420 --> 00:13:29,980
it is to build this first release seem

00:13:27,520 --> 00:13:32,020
kind of like a lot but it's a not too

00:13:29,980 --> 00:13:34,330
bad if you go through with us so now our

00:13:32,020 --> 00:13:41,830
release is ready how do we actually

00:13:34,330 --> 00:13:43,270
deploy it so again we're gonna use a

00:13:41,830 --> 00:13:45,190
Bosch CLI to help us but instead of

00:13:43,270 --> 00:13:47,560
scaffolding we're gonna use it to move

00:13:45,190 --> 00:13:49,150
files around so we can start with the

00:13:47,560 --> 00:13:51,820
Bosch crate release and it can takes a

00:13:49,150 --> 00:13:53,590
snapshot of what you have so far you run

00:13:51,820 --> 00:13:55,960
a Bosch upload release and it moves that

00:13:53,590 --> 00:13:59,230
on to the Bosch director so going back

00:13:55,960 --> 00:14:00,790
to our Bosch deployment diagram we have

00:13:59,230 --> 00:14:02,560
the what that you put onto the Bosch

00:14:00,790 --> 00:14:04,240
director and it takes it and creates a

00:14:02,560 --> 00:14:07,000
deployment out of it one thing that I

00:14:04,240 --> 00:14:10,240
left out of this diagram is the how and

00:14:07,000 --> 00:14:11,470
we call that the Bosch manifest in the

00:14:10,240 --> 00:14:14,320
Bosch manifest is where you specify

00:14:11,470 --> 00:14:15,970
things like VM size the number of VMs

00:14:14,320 --> 00:14:18,160
you want to use some networking

00:14:15,970 --> 00:14:19,750
information and that's the how and

00:14:18,160 --> 00:14:24,310
usually written or it has to be written

00:14:19,750 --> 00:14:26,520
in yamo so for our hello world we all

00:14:24,310 --> 00:14:28,750
have this simple llamo file has a name

00:14:26,520 --> 00:14:32,680
specifies what releases you'll be using

00:14:28,750 --> 00:14:35,410
will we be using cold it specifies the

00:14:32,680 --> 00:14:38,020
jobs you'll be running the last line

00:14:35,410 --> 00:14:39,310
here specifies instances so this is one

00:14:38,020 --> 00:14:41,740
of the cool features with Bosch you can

00:14:39,310 --> 00:14:44,080
configure things really easily to scale

00:14:41,740 --> 00:14:48,280
this up to like 10 servers if you wanted

00:14:44,080 --> 00:14:50,650
to so now that we have the what and the

00:14:48,280 --> 00:14:54,880
how we're able to create our Bosch

00:14:50,650 --> 00:14:56,140
deployment by yearning Bosch deploy so

00:14:54,880 --> 00:14:59,170
what's happening when you deploy Bosch

00:14:56,140 --> 00:15:01,690
so since we define our packages through

00:14:59,170 --> 00:15:04,300
or we have our blobs and source code

00:15:01,690 --> 00:15:06,850
defined through packages Bosch puts that

00:15:04,300 --> 00:15:07,420
on your VM and because we defined our

00:15:06,850 --> 00:15:11,830
jobs

00:15:07,420 --> 00:15:14,170
Bosch will start a job and when the

00:15:11,830 --> 00:15:15,610
start command issued which is happens by

00:15:14,170 --> 00:15:17,410
default when you do boss-employee is

00:15:15,610 --> 00:15:20,380
actually able to start running your

00:15:17,410 --> 00:15:25,750
process and that is a Bosch deployment

00:15:20,380 --> 00:15:29,490
with all the pieces in there did you

00:15:25,750 --> 00:15:29,490
guys get that photo okay

00:15:31,750 --> 00:15:36,620
okay so now we have our very first

00:15:34,670 --> 00:15:39,259
release deployed and if you were to

00:15:36,620 --> 00:15:41,509
actually send a request so that VMI

00:15:39,259 --> 00:15:44,269
would reply back with yo it does work I

00:15:41,509 --> 00:15:46,129
did try it it really works there's a lot

00:15:44,269 --> 00:15:48,769
more that you can do with Bosch releases

00:15:46,129 --> 00:15:51,019
in the scope of a deployment so go

00:15:48,769 --> 00:15:52,670
through some of that now first of all

00:15:51,019 --> 00:15:55,310
you can actually deploy this release on

00:15:52,670 --> 00:15:57,560
any supported cloud now this release as

00:15:55,310 --> 00:16:00,019
you may have noticed in the what of that

00:15:57,560 --> 00:16:02,149
diagram Peter was showing it's a very

00:16:00,019 --> 00:16:06,230
portable piece of software now you can

00:16:02,149 --> 00:16:08,420
deploy this on any supported cloud you

00:16:06,230 --> 00:16:11,569
can also share information between jobs

00:16:08,420 --> 00:16:13,579
of separate releases with something

00:16:11,569 --> 00:16:15,649
called Bosh links so you can share

00:16:13,579 --> 00:16:18,350
things like maybe credentials between a

00:16:15,649 --> 00:16:20,360
database server and a web server without

00:16:18,350 --> 00:16:24,170
actually entering any credentials in

00:16:20,360 --> 00:16:26,209
your manifest at all one thing that can

00:16:24,170 --> 00:16:29,269
speed up deployments if you know you'll

00:16:26,209 --> 00:16:30,980
be deploying over the same operating

00:16:29,269 --> 00:16:33,230
system is you can pre compile your

00:16:30,980 --> 00:16:36,980
release for that operating system so

00:16:33,230 --> 00:16:38,870
deployments become faster another thing

00:16:36,980 --> 00:16:42,139
you can do is using the Bosh process

00:16:38,870 --> 00:16:48,589
manager or bpm you can containerize your

00:16:42,139 --> 00:16:51,380
jobs and add some isolation in addition

00:16:48,589 --> 00:16:52,880
to that you can react to more lifecycle

00:16:51,380 --> 00:16:55,579
events during the deployment process

00:16:52,880 --> 00:16:58,639
with more templates we went over a start

00:16:55,579 --> 00:17:01,639
today and stopped but you can do more so

00:16:58,639 --> 00:17:03,800
during the deployment process the Bosh

00:17:01,639 --> 00:17:06,079
director issues a few more lifecycle

00:17:03,800 --> 00:17:08,630
events to the job and you can optionally

00:17:06,079 --> 00:17:09,260
fill out templates for these if you so

00:17:08,630 --> 00:17:12,470
desire

00:17:09,260 --> 00:17:14,659
so one such a life cycle event is pre

00:17:12,470 --> 00:17:16,730
start so you might want to use this to

00:17:14,659 --> 00:17:18,589
create some directories or maybe gem

00:17:16,730 --> 00:17:20,990
install or something like that to

00:17:18,589 --> 00:17:24,289
prepare your software for running even

00:17:20,990 --> 00:17:27,260
more and then in your templates side on

00:17:24,289 --> 00:17:30,230
the left here you can define a pre start

00:17:27,260 --> 00:17:32,870
script these have to be well named well

00:17:30,230 --> 00:17:35,390
defined so on the left side here

00:17:32,870 --> 00:17:37,669
pre-star SH you could name that anything

00:17:35,390 --> 00:17:40,419
you want but on the right side that has

00:17:37,669 --> 00:17:43,149
to be well defined and that's in our

00:17:40,419 --> 00:17:45,580
Asian pages there's a few more lifecycle

00:17:43,149 --> 00:17:47,440
events as well you can react you post

00:17:45,580 --> 00:17:49,330
start pose deployed drain and post-op

00:17:47,440 --> 00:17:52,269
there's a new one coming as well called

00:17:49,330 --> 00:17:54,340
pre stop and this gives you better

00:17:52,269 --> 00:17:59,109
control over your software when you run

00:17:54,340 --> 00:18:01,450
it that's the end of our session so

00:17:59,109 --> 00:18:03,730
thank you very much for coming out if

00:18:01,450 --> 00:18:05,499
you have any questions at all join us on

00:18:03,730 --> 00:18:06,929
slack at anytime if you have any

00:18:05,499 --> 00:18:09,340
questions right now about this session

00:18:06,929 --> 00:18:10,779
we'd be happy to help on the side we

00:18:09,340 --> 00:18:13,269
find that's a little better for those

00:18:10,779 --> 00:18:15,700
kinds of questions and the documentation

00:18:13,269 --> 00:18:17,440
pages on the right here are a great

00:18:15,700 --> 00:18:21,149
resource for building your release

00:18:17,440 --> 00:18:21,149

YouTube URL: https://www.youtube.com/watch?v=pXbHepMNhZY


