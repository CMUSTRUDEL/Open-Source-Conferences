Title: How to Deploy Your First App on Cloud Foundry
Publication date: 2017-05-19
Playlist: Cloud Foundry 101
Description: 
	Want to deploy a Java app to the cloud? Here are a few easy steps to get your app on Cloud Foundry for those who havenâ€™t worked with the Cloud Foundry platform. Although in this example we'll deploy a Java app, deploying an app in any other programming language works in a very similar way. https://www.cloudfoundry.org/get-started/
Captions: 
	00:00:03,560 --> 00:00:08,250
hello my name is Steve wall and I'm a

00:00:06,090 --> 00:00:10,469
senior cloud architect with the ECS team

00:00:08,250 --> 00:00:14,219
today I'll show you how to deploy an

00:00:10,469 --> 00:00:15,750
application to cloud foundry there are a

00:00:14,219 --> 00:00:17,790
couple of prerequisites for this

00:00:15,750 --> 00:00:20,640
demonstration the first thing you'll

00:00:17,790 --> 00:00:24,600
need is the cloud foundry CLI you can

00:00:20,640 --> 00:00:29,400
get that at docs cloud foundry org slash

00:00:24,600 --> 00:00:33,390
CF CLI slash install - go - CLI dot

00:00:29,400 --> 00:00:36,720
html' once installed you access the

00:00:33,390 --> 00:00:47,339
command line via CF I'll show you the

00:00:36,720 --> 00:00:48,890
version I'm using it is 6.25 so the

00:00:47,339 --> 00:00:53,309
first thing you're going to want to do

00:00:48,890 --> 00:00:55,400
is set the API for your cloud foundry

00:00:53,309 --> 00:00:58,860
foundation in which you have an account

00:00:55,400 --> 00:01:01,229
so here's the URL to the cloud foundry

00:00:58,860 --> 00:01:04,379
on which I have an account we're using

00:01:01,229 --> 00:01:07,350
the command line interface which can be

00:01:04,379 --> 00:01:11,310
used with pretty much any cloud foundry

00:01:07,350 --> 00:01:12,840
installation so you don't have to worry

00:01:11,310 --> 00:01:14,670
about the various different service

00:01:12,840 --> 00:01:17,550
providers or if this is installed

00:01:14,670 --> 00:01:20,250
locally the command line interface is

00:01:17,550 --> 00:01:26,700
good for all of them so you can see I

00:01:20,250 --> 00:01:29,330
targeted my cloud foundry API here now I

00:01:26,700 --> 00:01:29,330
have to login

00:01:34,880 --> 00:01:40,140
Cloud Foundry is structured with

00:01:37,109 --> 00:01:42,569
organizations in our case the

00:01:40,140 --> 00:01:44,880
organization is ECS team and within

00:01:42,569 --> 00:01:47,130
those organizations are different spaces

00:01:44,880 --> 00:01:49,890
the spaces are where you deploy your

00:01:47,130 --> 00:01:52,829
applications so I'll choose my space

00:01:49,890 --> 00:01:54,869
here when you get an account set up you

00:01:52,829 --> 00:01:57,659
should be set up within an organization

00:01:54,869 --> 00:02:01,950
and be given a space within that

00:01:57,659 --> 00:02:04,909
organization so now you can see that I'm

00:02:01,950 --> 00:02:08,849
targeted at an instance of Cloud Foundry

00:02:04,909 --> 00:02:14,329
with my user in the ECS team

00:02:08,849 --> 00:02:17,400
organization and in the s wall space so

00:02:14,329 --> 00:02:19,260
within this space I'll be deploying my

00:02:17,400 --> 00:02:21,930
application so I'll show you right now

00:02:19,260 --> 00:02:25,319
that there are no applications deployed

00:02:21,930 --> 00:02:27,930
to this space so let's get busy

00:02:25,319 --> 00:02:31,829
deploying an application so I've created

00:02:27,930 --> 00:02:32,760
a very simple application for this

00:02:31,829 --> 00:02:35,700
presentation

00:02:32,760 --> 00:02:37,650
it's a java application and if you're

00:02:35,700 --> 00:02:40,410
going to be doing java in cloud foundry

00:02:37,650 --> 00:02:43,680
you have to use spring boot it just

00:02:40,410 --> 00:02:50,280
makes sense so here's my spring boot

00:02:43,680 --> 00:02:53,760
application very small main here and I

00:02:50,280 --> 00:02:56,099
have one controller and it just says

00:02:53,760 --> 00:02:59,190
greetings from spring boot so this is a

00:02:56,099 --> 00:03:02,250
maven application so let's build that

00:02:59,190 --> 00:03:04,500
application right now this is a maven

00:03:02,250 --> 00:03:11,310
project so I'll just use the standard

00:03:04,500 --> 00:03:14,370
maven clean package this will build a

00:03:11,310 --> 00:03:18,329
jar and that jar is what we will deploy

00:03:14,370 --> 00:03:20,099
to cloud foundry before I deploy to

00:03:18,329 --> 00:03:23,819
cloud foundry one thing I like to do is

00:03:20,099 --> 00:03:27,599
start another terminal that I'm going to

00:03:23,819 --> 00:03:30,680
use to tail the logs of our application

00:03:27,599 --> 00:03:34,109
while it's starting up in cloud foundry

00:03:30,680 --> 00:03:36,959
so the first command you're gonna want

00:03:34,109 --> 00:03:39,030
to use is CF push so this actually

00:03:36,959 --> 00:03:41,489
deploys your application to cloud

00:03:39,030 --> 00:03:43,969
foundry so CF push then you give your

00:03:41,489 --> 00:03:49,379
application a name so we'll call the

00:03:43,969 --> 00:03:51,810
hello CF demo and this will be the host

00:03:49,379 --> 00:03:54,659
name of your application the domain name

00:03:51,810 --> 00:03:57,209
for your app will be given by your Cloud

00:03:54,659 --> 00:04:00,090
Foundry foundation so you gotta point it

00:03:57,209 --> 00:04:03,359
to the artifact that you want to deploy

00:04:00,090 --> 00:04:07,620
as well so our artifact is in the target

00:04:03,359 --> 00:04:09,540
directory and it is a jar so now I'm

00:04:07,620 --> 00:04:12,239
deploying the application to Cloud

00:04:09,540 --> 00:04:15,450
Foundry and you can see it give gave us

00:04:12,239 --> 00:04:18,750
a route here using the host name and

00:04:15,450 --> 00:04:25,080
then in this particular case the domain

00:04:18,750 --> 00:04:27,150
is CF Apps dot IL so let's see if it

00:04:25,080 --> 00:04:29,490
knows our apps there so it's deploying

00:04:27,150 --> 00:04:32,220
our application right now so now what we

00:04:29,490 --> 00:04:37,289
can do is tale the logs associated with

00:04:32,220 --> 00:04:40,190
our application let's grab that I'll

00:04:37,289 --> 00:04:40,190
just type it in

00:04:43,050 --> 00:04:49,259
and we'll start seeing the logs come out

00:04:45,539 --> 00:04:58,560
here as echoed also in the CF push up

00:04:49,259 --> 00:05:01,919
here so you can see it realized it was a

00:04:58,560 --> 00:05:05,490
java application it's downloading the

00:05:01,919 --> 00:05:08,430
open JDK it's calculating the memory

00:05:05,490 --> 00:05:12,360
settings it's downloading the spring

00:05:08,430 --> 00:05:15,180
auto configuration so these that's some

00:05:12,360 --> 00:05:16,830
spring magic that happens under the

00:05:15,180 --> 00:05:19,319
covers and takes care a lot of the

00:05:16,830 --> 00:05:21,870
plumbing for us and now our application

00:05:19,319 --> 00:05:23,430
is starting up this is really the log

00:05:21,870 --> 00:05:25,919
information that I was most interested

00:05:23,430 --> 00:05:28,409
in that doesn't come up when you do the

00:05:25,919 --> 00:05:32,069
CF push command CF push command just

00:05:28,409 --> 00:05:34,289
says your instance is starting and our

00:05:32,069 --> 00:05:36,949
application has successfully started up

00:05:34,289 --> 00:05:43,500
you can see it gave it one gig of memory

00:05:36,949 --> 00:05:46,650
and 137 Meg of disk of one gig we are

00:05:43,500 --> 00:05:51,620
using right now so now when we look at

00:05:46,650 --> 00:05:54,180
our CF app we see our application here

00:05:51,620 --> 00:05:58,949
if we want to see more information on

00:05:54,180 --> 00:06:02,360
our application you use the CF app

00:05:58,949 --> 00:06:04,469
command with our application name and

00:06:02,360 --> 00:06:07,110
this will give the status of our

00:06:04,469 --> 00:06:09,599
application so it shows you what CPU is

00:06:07,110 --> 00:06:12,870
being used the memory being used it's

00:06:09,599 --> 00:06:19,050
state so now we can hit our application

00:06:12,870 --> 00:06:24,060
so let's go ahead and type that into our

00:06:19,050 --> 00:06:31,500
browser so we called our application

00:06:24,060 --> 00:06:31,860
hello CF demo dot c f ab CO and there we

00:06:31,500 --> 00:06:33,719
go

00:06:31,860 --> 00:06:35,940
greetings from spring boot so we have

00:06:33,719 --> 00:06:40,349
deployed our first application to spring

00:06:35,940 --> 00:06:42,779
or to Cloud Foundry so now you see how

00:06:40,349 --> 00:06:44,699
easy Cloud Foundry makes it to deploy an

00:06:42,779 --> 00:06:46,650
application that is accessible through

00:06:44,699 --> 00:06:48,870
the internet it was just a few easy

00:06:46,650 --> 00:06:51,300
steps let's review those the first thing

00:06:48,870 --> 00:06:55,830
you did was download the Cloud Foundry

00:06:51,300 --> 00:06:57,930
CLI and then target

00:06:55,830 --> 00:07:01,460
the Cloud Foundry installation on which

00:06:57,930 --> 00:07:07,680
you had an account and then after that

00:07:01,460 --> 00:07:12,030
we pushed our application and we pulled

00:07:07,680 --> 00:07:14,539
up another command window to log see the

00:07:12,030 --> 00:07:16,639
logs of our applications starting up and

00:07:14,539 --> 00:07:19,259
it was that simple

00:07:16,639 --> 00:07:21,389
now this application is really trivial

00:07:19,259 --> 00:07:25,050
all it does at the moment is does says

00:07:21,389 --> 00:07:26,280
greetings from spring boot now we want

00:07:25,050 --> 00:07:27,840
to do something a little bit more

00:07:26,280 --> 00:07:29,400
interesting for any type of real

00:07:27,840 --> 00:07:31,039
application you're going to need some

00:07:29,400 --> 00:07:35,400
type of persistence store

00:07:31,039 --> 00:07:38,669
so each Cloud Foundry installation has

00:07:35,400 --> 00:07:41,430
its own marketplace in which it provides

00:07:38,669 --> 00:07:46,169
services to the user so to see what

00:07:41,430 --> 00:07:51,810
services are available you run the CF

00:07:46,169 --> 00:07:53,430
marketplace command and right now it's

00:07:51,810 --> 00:07:54,690
getting various services that are

00:07:53,430 --> 00:07:57,030
offered by this Cloud Foundry

00:07:54,690 --> 00:07:58,800
installation this will vary depending on

00:07:57,030 --> 00:08:01,289
the Cloud Foundry installation which you

00:07:58,800 --> 00:08:03,300
have an account so here you can see all

00:08:01,289 --> 00:08:08,789
the various services that are available

00:08:03,300 --> 00:08:11,639
to you as a developer let's see which

00:08:08,789 --> 00:08:13,800
one we want to use we want to go and use

00:08:11,639 --> 00:08:17,130
Redis there's the Redis cloud right

00:08:13,800 --> 00:08:19,349
there so what we're going to do is we

00:08:17,130 --> 00:08:21,840
are gonna spin up a Redis service for

00:08:19,349 --> 00:08:23,819
our application so the first thing we're

00:08:21,840 --> 00:08:27,599
going to want to do is create the Redis

00:08:23,819 --> 00:08:31,050
service with the various services are

00:08:27,599 --> 00:08:34,079
there are associated plans so our

00:08:31,050 --> 00:08:36,870
service which is the Redis cloud has

00:08:34,079 --> 00:08:39,479
these various plans on it so to get a

00:08:36,870 --> 00:08:43,200
better description on what those plans

00:08:39,479 --> 00:08:45,630
mean you can use the marketplace command

00:08:43,200 --> 00:08:46,890
and specify the specific service and

00:08:45,630 --> 00:08:50,790
then it'll go into a little bit more

00:08:46,890 --> 00:08:53,490
detail so what this is telling us here

00:08:50,790 --> 00:08:55,860
is that all of the plans are paid plans

00:08:53,490 --> 00:08:58,550
except for the bottom plane here which

00:08:55,860 --> 00:09:01,079
is a free plan now these plans are

00:08:58,550 --> 00:09:03,329
differentiated based on the space that

00:09:01,079 --> 00:09:04,770
it gives you in the persistence store so

00:09:03,329 --> 00:09:05,250
we're going to want to use the free plan

00:09:04,770 --> 00:09:08,430
for this

00:09:05,250 --> 00:09:09,780
demo that'll be adequate so the first

00:09:08,430 --> 00:09:12,630
thing we're gonna want to do is create

00:09:09,780 --> 00:09:15,660
that service in our space making the

00:09:12,630 --> 00:09:18,900
service available to our applications so

00:09:15,660 --> 00:09:21,210
that's the create service command and to

00:09:18,900 --> 00:09:23,610
see the various parameters available to

00:09:21,210 --> 00:09:25,440
any command just hit a return and it'll

00:09:23,610 --> 00:09:28,320
show you the usage information right

00:09:25,440 --> 00:09:34,050
there so we'll leave a CF create service

00:09:28,320 --> 00:09:37,080
our plan is the Redis cloud we were

00:09:34,050 --> 00:09:39,630
gonna want to use a 30 megabit which is

00:09:37,080 --> 00:09:44,430
the free plan and we're gonna call this

00:09:39,630 --> 00:09:46,200
service demo Redis so now a Redis

00:09:44,430 --> 00:09:48,750
service is being created in our space

00:09:46,200 --> 00:09:53,520
making it available to our applications

00:09:48,750 --> 00:09:56,280
so now if we do a sea of services we can

00:09:53,520 --> 00:09:59,550
see that there is demo Redis available

00:09:56,280 --> 00:10:02,510
we used by our applications now our

00:09:59,550 --> 00:10:06,810
application we're gonna have to enhance

00:10:02,510 --> 00:10:08,940
to make use of the Redis service so

00:10:06,810 --> 00:10:10,560
let's get some Redis code in our

00:10:08,940 --> 00:10:12,600
application so the first thing we're

00:10:10,560 --> 00:10:17,430
going to want to do is add this

00:10:12,600 --> 00:10:19,800
dependency to our palm which I've

00:10:17,430 --> 00:10:22,860
already done so we got the spring boot

00:10:19,800 --> 00:10:24,930
starter data Redis so that's going to

00:10:22,860 --> 00:10:27,150
put some Redis hooks into the

00:10:24,930 --> 00:10:29,910
application for us now we're going to

00:10:27,150 --> 00:10:32,880
want to make use of that within our

00:10:29,910 --> 00:10:37,800
controller so we're gonna wanna auto

00:10:32,880 --> 00:10:40,490
wire the Redis template into our

00:10:37,800 --> 00:10:40,490
controller

00:10:44,770 --> 00:10:58,370
put that in here let's get some

00:10:52,640 --> 00:11:05,510
formatting on it go ahead and get our

00:10:58,370 --> 00:11:08,060
imports down so the spring Redis

00:11:05,510 --> 00:11:10,010
template is gonna be automatically

00:11:08,060 --> 00:11:16,330
created based on what we add it to our

00:11:10,010 --> 00:11:16,330
palm and then we'll make a method here

00:11:16,960 --> 00:11:24,320
that will make use of our Redis template

00:11:22,090 --> 00:11:33,400
let's put that over here in our

00:11:24,320 --> 00:11:38,900
controller go and get our imports down

00:11:33,400 --> 00:11:43,640
and we're ready to go now we'll want to

00:11:38,900 --> 00:11:46,060
rebuild our application using our main

00:11:43,640 --> 00:11:46,060
command

00:11:46,180 --> 00:11:52,400
so this will get our Redis enhancement

00:11:49,700 --> 00:11:56,050
into our application now we'll deploy

00:11:52,400 --> 00:12:01,610
that up to cloud foundry

00:11:56,050 --> 00:12:04,430
he's an RC of push but this time I'm

00:12:01,610 --> 00:12:06,110
gonna put the nose start flag here

00:12:04,430 --> 00:12:09,950
because I don't want the application to

00:12:06,110 --> 00:12:11,840
start I want to find the service the

00:12:09,950 --> 00:12:15,680
Redis service that we've created to our

00:12:11,840 --> 00:12:18,080
application so if it started up it would

00:12:15,680 --> 00:12:19,730
start without that service bound or

00:12:18,080 --> 00:12:22,370
applications and then it would have some

00:12:19,730 --> 00:12:24,230
problems so let's let our application

00:12:22,370 --> 00:12:29,780
get uploaded into cloud foundry and then

00:12:24,230 --> 00:12:32,090
we'll bind the service alright so what's

00:12:29,780 --> 00:12:35,390
up there so we'll use the CF pine

00:12:32,090 --> 00:12:41,690
service command

00:12:35,390 --> 00:12:46,940
so it's CF find service our application

00:12:41,690 --> 00:12:51,980
name which is hello CF demo our service

00:12:46,940 --> 00:12:54,040
is demo Redis and that should do it for

00:12:51,980 --> 00:12:56,990
us

00:12:54,040 --> 00:12:59,510
okay so now the service is bound you'll

00:12:56,990 --> 00:13:01,700
notice here it says you see a free stage

00:12:59,510 --> 00:13:03,620
that would be if the application was

00:13:01,700 --> 00:13:05,210
already started so we haven't started

00:13:03,620 --> 00:13:07,839
the application so I'm just going to

00:13:05,210 --> 00:13:07,839
start it now

00:13:17,570 --> 00:13:24,710
so we can see over in this window here

00:13:19,700 --> 00:13:31,400
my applications logs once it begins to

00:13:24,710 --> 00:13:33,500
start up all right and it's ready to go

00:13:31,400 --> 00:13:35,240
so now the Redis service will be

00:13:33,500 --> 00:13:40,850
available to us so let's go ahead and

00:13:35,240 --> 00:13:43,010
hit that so that's this right here and

00:13:40,850 --> 00:13:45,380
you can see the counter is at zero now

00:13:43,010 --> 00:13:51,380
and then I'll start incrementing up

00:13:45,380 --> 00:13:54,740
every time I hit it so to show that the

00:13:51,380 --> 00:14:04,490
counter is stored in a persistent Redis

00:13:54,740 --> 00:14:06,800
database let's stop the application so

00:14:04,490 --> 00:14:09,620
we stop the application and we hit it

00:14:06,800 --> 00:14:11,750
again and we get the 404 because the

00:14:09,620 --> 00:14:13,640
application isn't running all right

00:14:11,750 --> 00:14:20,600
we'll start the application back up

00:14:13,640 --> 00:14:25,280
again come back over here see it's

00:14:20,600 --> 00:14:28,310
starting up again okay so the

00:14:25,280 --> 00:14:32,120
application started up again and now

00:14:28,310 --> 00:14:34,670
we're at five so you can see that our

00:14:32,120 --> 00:14:38,750
application was connected to a Redis

00:14:34,670 --> 00:14:40,790
datastore and is making use of that up

00:14:38,750 --> 00:14:42,560
to this point you've seen how easy it is

00:14:40,790 --> 00:14:45,020
to deploy an application to Cloud

00:14:42,560 --> 00:14:47,360
Foundry attached to some persistent

00:14:45,020 --> 00:14:50,000
store and make it as accessible through

00:14:47,360 --> 00:14:53,300
the internet now I'm going to show you

00:14:50,000 --> 00:14:55,670
how Cloud Foundry provides elasticity

00:14:53,300 --> 00:14:57,640
for your application that is the ability

00:14:55,670 --> 00:15:00,350
to scale your application up when

00:14:57,640 --> 00:15:03,560
experience is load and the scale it back

00:15:00,350 --> 00:15:06,890
down when the load goes away so to do

00:15:03,560 --> 00:15:09,860
this let's add another method into our

00:15:06,890 --> 00:15:14,750
controller and I call this the spin

00:15:09,860 --> 00:15:19,880
method so when this method is hit it'll

00:15:14,750 --> 00:15:22,900
just spin so let's copy this over into

00:15:19,880 --> 00:15:22,900
our application

00:15:26,069 --> 00:15:40,449
okay save this off when we build our

00:15:30,699 --> 00:15:43,809
application and now we'll deploy it back

00:15:40,449 --> 00:15:46,079
out to Cloud Foundry using the C of push

00:15:43,809 --> 00:15:46,079
command

00:15:57,930 --> 00:16:04,449
so we can look over here in the log

00:16:00,279 --> 00:16:15,160
window again see when our application is

00:16:04,449 --> 00:16:21,449
starting back up okay it has started

00:16:15,160 --> 00:16:21,449
back up so I've created a script here

00:16:21,600 --> 00:16:29,800
that will hit the spin endpoint a number

00:16:27,550 --> 00:16:32,939
of times to put load on the system so

00:16:29,800 --> 00:16:32,939
let's just hit it once

00:16:40,160 --> 00:16:51,629
you change the end point on that so you

00:16:49,620 --> 00:16:55,459
can see it's spinning now and go ahead

00:16:51,629 --> 00:16:55,459
and change that script real quick

00:16:58,040 --> 00:17:04,530
so we'll start putting load on the

00:17:00,300 --> 00:17:06,809
system using this spin command and I'll

00:17:04,530 --> 00:17:09,750
do it several times so let's do one here

00:17:06,809 --> 00:17:13,549
in the background start up another

00:17:09,750 --> 00:17:16,730
window so we can check on the load

00:17:13,549 --> 00:17:21,390
that's being put onto our application

00:17:16,730 --> 00:17:28,679
now if you recall you can do that using

00:17:21,390 --> 00:17:38,030
the CF app commands so CF app hello CF

00:17:28,679 --> 00:17:40,409
demo ok so that shows that we are 53%

00:17:38,030 --> 00:17:43,740
usage right now which is starting to get

00:17:40,409 --> 00:17:46,799
up there pretty high so now we're gonna

00:17:43,740 --> 00:17:48,480
exercise the elasticity capability that

00:17:46,799 --> 00:17:51,270
cloud foundry provides you so I'm going

00:17:48,480 --> 00:17:53,510
to scale my application I want to scale

00:17:51,270 --> 00:17:57,419
my application

00:17:53,510 --> 00:18:00,000
let's do go up to five instances so now

00:17:57,419 --> 00:18:01,980
it's starting up more instance of more

00:18:00,000 --> 00:18:05,549
instances of the application to handle

00:18:01,980 --> 00:18:12,980
the load so let's just go ahead and do

00:18:05,549 --> 00:18:19,370
all true do CF app hello CF demo and

00:18:12,980 --> 00:18:21,929
then let's sleep a couple of seconds

00:18:19,370 --> 00:18:25,740
there so let's get a loop going with the

00:18:21,929 --> 00:18:27,659
CF app command so as you can see we have

00:18:25,740 --> 00:18:30,240
instances starting up a couple of them

00:18:27,659 --> 00:18:33,710
are already running and now these will

00:18:30,240 --> 00:18:36,690
start to be able to take on some load

00:18:33,710 --> 00:18:38,700
from the one instance that was getting

00:18:36,690 --> 00:18:40,679
all of the load so as you can see one of

00:18:38,700 --> 00:18:43,049
the instances has already started taking

00:18:40,679 --> 00:18:45,870
low so let's go ahead and let's hit the

00:18:43,049 --> 00:18:48,350
spin again so that we can keep load

00:18:45,870 --> 00:18:51,840
going on our system

00:18:48,350 --> 00:18:55,110
let's do a few of those so that we can

00:18:51,840 --> 00:18:59,940
simulate high load going against our

00:18:55,110 --> 00:19:01,559
application now you'll notice down here

00:18:59,940 --> 00:19:04,400
in the log I know it's scrolling by

00:19:01,559 --> 00:19:09,090
pretty fast but you'll see web zero to

00:19:04,400 --> 00:19:12,000
four so all of these instances logs are

00:19:09,090 --> 00:19:14,340
aggregated into one view through the CF

00:19:12,000 --> 00:19:16,260
logs command so you can see the various

00:19:14,340 --> 00:19:17,790
instances are starting to take on load

00:19:16,260 --> 00:19:20,520
we have one instance here that hasn't

00:19:17,790 --> 00:19:23,429
taken on any load yet usually it gets

00:19:20,520 --> 00:19:25,679
distributed over time takes a little bit

00:19:23,429 --> 00:19:28,770
sometimes to distribute load over all of

00:19:25,679 --> 00:19:31,110
the instances but you can see that all

00:19:28,770 --> 00:19:33,480
of the instances are taking on load

00:19:31,110 --> 00:19:36,270
right now so let's go ahead and let's

00:19:33,480 --> 00:19:39,179
kill some of that load ok I've killed

00:19:36,270 --> 00:19:40,950
all of the load that was going at the

00:19:39,179 --> 00:19:43,830
system so we should start seeing the

00:19:40,950 --> 00:19:46,200
load go down now there's probably still

00:19:43,830 --> 00:19:49,410
a few commands that are having to run

00:19:46,200 --> 00:19:52,140
out so we can see we've got one instance

00:19:49,410 --> 00:19:54,030
instance one now is it's zero percent

00:19:52,140 --> 00:19:56,610
load and now all the other instances

00:19:54,030 --> 00:19:58,830
loads went down so when load goes down

00:19:56,610 --> 00:20:01,080
then you want to release those resources

00:19:58,830 --> 00:20:04,380
so that you're not paying for many more

00:20:01,080 --> 00:20:09,920
and with Cloud Foundry it's as easy as

00:20:04,380 --> 00:20:12,450
scale and then your application name and

00:20:09,920 --> 00:20:14,040
then the number of instances you want to

00:20:12,450 --> 00:20:16,650
scale back to so it looks like two

00:20:14,040 --> 00:20:18,960
instances are still taking load you can

00:20:16,650 --> 00:20:22,820
see this one's at 60 this one's at 39 so

00:20:18,960 --> 00:20:22,820
we'll just scale back to two instances

00:20:23,059 --> 00:20:28,040
you can kind of see over here in the log

00:20:25,440 --> 00:20:32,910
it's destroying some containers and

00:20:28,040 --> 00:20:34,740
we're back down to two instances and we

00:20:32,910 --> 00:20:38,220
really only have one instance taking

00:20:34,740 --> 00:20:41,000
load at the moment so let's just go down

00:20:38,220 --> 00:20:41,000
to one instance

00:20:42,940 --> 00:20:49,130
and now you can see only one instance is

00:20:46,400 --> 00:20:52,280
running and it looks like it's finishing

00:20:49,130 --> 00:20:54,290
up with some load so that completes the

00:20:52,280 --> 00:20:56,049
demonstration on how to deploy your

00:20:54,290 --> 00:20:59,540
first application to Cloud Foundry

00:20:56,049 --> 00:21:02,030
attach it to persistence store put some

00:20:59,540 --> 00:21:04,040
load on it scale it up to handle the

00:21:02,030 --> 00:21:06,280
load and then when the load is taken

00:21:04,040 --> 00:21:09,230
away scale it back down

00:21:06,280 --> 00:21:11,240
this demo showed you the very basics of

00:21:09,230 --> 00:21:13,370
interacting with cloud foundry there's

00:21:11,240 --> 00:21:16,280
much more to learn and I wish you well

00:21:13,370 --> 00:21:20,530
on your journey from the ECS team this

00:21:16,280 --> 00:21:20,530

YouTube URL: https://www.youtube.com/watch?v=UWeIxJcaUbQ


