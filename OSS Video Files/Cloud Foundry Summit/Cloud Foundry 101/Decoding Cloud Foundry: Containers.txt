Title: Decoding Cloud Foundry: Containers
Publication date: 2016-03-28
Playlist: Cloud Foundry 101
Description: 
	Cut through the buzzwords and get to the core of what makes Cloud Foundry the industry standard for Cloud Apps.
Captions: 
	00:00:00,000 --> 00:00:04,920
I'm going to explain the principles

00:00:01,920 --> 00:00:06,600
around containers some of the challenges

00:00:04,920 --> 00:00:09,840
and misconceptions with containers and

00:00:06,600 --> 00:00:11,580
how they relate to Cloud Foundry in

00:00:09,840 --> 00:00:14,330
recent years there's been rapid growth

00:00:11,580 --> 00:00:16,289
in container based technologies

00:00:14,330 --> 00:00:19,890
containers give you a way of leveraging

00:00:16,289 --> 00:00:22,500
a slice of a virtual machine in a secure

00:00:19,890 --> 00:00:24,720
way it achieves this through leveraging

00:00:22,500 --> 00:00:27,869
operating system features to control

00:00:24,720 --> 00:00:31,170
resources and isolate and secure the

00:00:27,869 --> 00:00:33,300
relevant processes both VMS in the

00:00:31,170 --> 00:00:35,190
container space are rapidly evolving and

00:00:33,300 --> 00:00:38,129
in some ways these spaces are merging

00:00:35,190 --> 00:00:39,899
together but the reason why containers

00:00:38,129 --> 00:00:41,850
have become so popular is that

00:00:39,899 --> 00:00:44,670
historically at least they've had three

00:00:41,850 --> 00:00:46,680
distinct advantages over traditional VMs

00:00:44,670 --> 00:00:49,039
the first is speed and efficiency

00:00:46,680 --> 00:00:51,360
because they're super quick to create

00:00:49,039 --> 00:00:53,250
the second is greater resource

00:00:51,360 --> 00:00:55,680
consolidation especially if you're over

00:00:53,250 --> 00:00:57,329
committing your resources and finally

00:00:55,680 --> 00:00:59,699
they give you application portability

00:00:57,329 --> 00:01:01,559
because you can package up all of your

00:00:59,699 --> 00:01:06,060
application dependencies into a single

00:01:01,559 --> 00:01:09,630
binary image containers of best thought

00:01:06,060 --> 00:01:12,270
of as having two key elements the first

00:01:09,630 --> 00:01:14,520
is the file system this is the thing you

00:01:12,270 --> 00:01:16,470
actually run be at a prebuilt docker

00:01:14,520 --> 00:01:19,950
image or Cloud Foundry built droplet

00:01:16,470 --> 00:01:22,320
plus a stack this packaged executable

00:01:19,950 --> 00:01:24,600
encapsulates your application and all of

00:01:22,320 --> 00:01:28,740
its dependencies so it can be run

00:01:24,600 --> 00:01:30,119
repeatedly in different environments the

00:01:28,740 --> 00:01:31,829
second element is the container

00:01:30,119 --> 00:01:32,549
management component or the container

00:01:31,829 --> 00:01:35,189
back-end

00:01:32,549 --> 00:01:37,500
there are various pieces that comprise

00:01:35,189 --> 00:01:39,810
this and both the technology and

00:01:37,500 --> 00:01:42,509
terminology tend to be implementation

00:01:39,810 --> 00:01:45,030
specific but no matter what technology

00:01:42,509 --> 00:01:46,770
you use this piece is the part

00:01:45,030 --> 00:01:50,070
responsible for building and running

00:01:46,770 --> 00:01:52,320
your isolated processes now that term

00:01:50,070 --> 00:01:54,950
isolated processes brings us to the

00:01:52,320 --> 00:01:58,079
first misconception with containers and

00:01:54,950 --> 00:02:00,600
that is at least in the linux world

00:01:58,079 --> 00:02:01,369
there's no such thing as a literal

00:02:00,600 --> 00:02:04,500
container

00:02:01,369 --> 00:02:07,799
containers or logical descriptions they

00:02:04,500 --> 00:02:09,959
are not a literal entity what you get is

00:02:07,799 --> 00:02:12,480
some walls some resource limits and some

00:02:09,959 --> 00:02:13,040
namespace isolation they really just

00:02:12,480 --> 00:02:14,629
kernel

00:02:13,040 --> 00:02:16,790
teachers and how those kernel features

00:02:14,629 --> 00:02:20,030
get orchestrated is down to an

00:02:16,790 --> 00:02:22,250
implementation detail and this term

00:02:20,030 --> 00:02:24,560
implementation detail brings us to a

00:02:22,250 --> 00:02:26,269
very important second misconception with

00:02:24,560 --> 00:02:28,370
containers and that is the

00:02:26,269 --> 00:02:31,909
implementation detail matters in reality

00:02:28,370 --> 00:02:34,129
it does not matter what do I mean by

00:02:31,909 --> 00:02:36,319
that well when you think about the file

00:02:34,129 --> 00:02:38,180
system there are definitely some pros

00:02:36,319 --> 00:02:39,889
and cons between using a pre-book docker

00:02:38,180 --> 00:02:42,709
image or allowing Cloud Foundry to build

00:02:39,889 --> 00:02:44,569
your droplet but the key thing is it's

00:02:42,709 --> 00:02:46,189
not an either-or decision providing you

00:02:44,569 --> 00:02:48,769
build your application or your docker

00:02:46,189 --> 00:02:50,900
image in a cloud native way that it

00:02:48,769 --> 00:02:52,790
here's to those platform opinions the

00:02:50,900 --> 00:02:55,579
choice is yours Cloud Foundry can handle

00:02:52,790 --> 00:02:57,590
both the interesting thing for me is

00:02:55,579 --> 00:03:00,769
about the level of abstraction the Cloud

00:02:57,590 --> 00:03:03,500
Foundry provides Cloud Foundry focuses

00:03:00,769 --> 00:03:04,549
on your applications containers just let

00:03:03,500 --> 00:03:06,980
me know where they're just an

00:03:04,549 --> 00:03:08,480
implementation detail and developers

00:03:06,980 --> 00:03:11,090
should be focusing on the business logic

00:03:08,480 --> 00:03:15,260
of their applications not on process

00:03:11,090 --> 00:03:17,419
isolation on what file system to use the

00:03:15,260 --> 00:03:19,220
final misconception with containers is

00:03:17,419 --> 00:03:22,579
all you need to ship with velocity is

00:03:19,220 --> 00:03:24,620
containers the reality is containers

00:03:22,579 --> 00:03:26,120
alone they're not enough whether you

00:03:24,620 --> 00:03:27,919
build it yourself or whether you use a

00:03:26,120 --> 00:03:31,370
pre-built platform you still need all

00:03:27,919 --> 00:03:33,440
those platform capabilities like user

00:03:31,370 --> 00:03:35,269
management resiliency aggregators

00:03:33,440 --> 00:03:39,379
streaming of logs and metrics all those

00:03:35,269 --> 00:03:40,790
good things a platform provides so what

00:03:39,379 --> 00:03:41,590
the containers look like in cloud

00:03:40,790 --> 00:03:43,729
foundry

00:03:41,590 --> 00:03:45,889
well as I've mentioned with the file

00:03:43,729 --> 00:03:48,290
system you can use a docker image or you

00:03:45,889 --> 00:03:49,879
can do a CF push of your application and

00:03:48,290 --> 00:03:52,310
allow Cloud Foundry to build you that

00:03:49,879 --> 00:03:54,440
droplet and on the back-end piece of

00:03:52,310 --> 00:03:56,659
management component Cloud Foundry is

00:03:54,440 --> 00:03:58,639
standardizing on run see along with

00:03:56,659 --> 00:04:01,220
docker and rocket now I stand by what I

00:03:58,639 --> 00:04:02,629
said the backend technology providing it

00:04:01,220 --> 00:04:04,879
does what it says and it runs your

00:04:02,629 --> 00:04:06,769
processes in a secure and isolated way

00:04:04,879 --> 00:04:09,019
it really shouldn't matter but I do

00:04:06,769 --> 00:04:11,120
think it's important they were all

00:04:09,019 --> 00:04:13,340
standardizing on an open community we're

00:04:11,120 --> 00:04:14,629
all investing in the same project for

00:04:13,340 --> 00:04:16,190
the good of the community rather than

00:04:14,629 --> 00:04:18,820
reinventing the wheel ourselves that's a

00:04:16,190 --> 00:04:18,820

YouTube URL: https://www.youtube.com/watch?v=CaU77aCxI3Y


