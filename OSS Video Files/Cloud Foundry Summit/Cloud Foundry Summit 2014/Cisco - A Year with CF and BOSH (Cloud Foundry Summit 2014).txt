Title: Cisco - A Year with CF and BOSH (Cloud Foundry Summit 2014)
Publication date: 2014-07-03
Playlist: Cloud Foundry Summit 2014
Description: 
	Matt Johnson & Troy Astle from Cisco present a year with CF and BOSH.
Captions: 
	00:00:00,930 --> 00:00:04,220
[Music]

00:00:08,210 --> 00:00:13,230
hey guys hey guys thanks for having us

00:00:11,519 --> 00:00:14,969
we've been given the opportunity to come

00:00:13,230 --> 00:00:17,160
up here today and talk to you about our

00:00:14,969 --> 00:00:19,650
first year using Cloud Foundry and Bosch

00:00:17,160 --> 00:00:21,570
and pretty much automating yourself out

00:00:19,650 --> 00:00:26,279
of a job which is fine because

00:00:21,570 --> 00:00:28,230
everybody's hiring so who are we we're

00:00:26,279 --> 00:00:29,720
from Cisco we're based in London and

00:00:28,230 --> 00:00:32,610
we're trying to give people nice things

00:00:29,720 --> 00:00:34,380
basically our team is responsible for

00:00:32,610 --> 00:00:36,630
building a foundation platform for

00:00:34,380 --> 00:00:40,230
delivering upcoming Cisco web services

00:00:36,630 --> 00:00:41,309
so in the beginning a year ago when we

00:00:40,230 --> 00:00:45,149
started playing with Cloud Foundry

00:00:41,309 --> 00:00:46,469
playing really was the optimum word we

00:00:45,149 --> 00:00:47,579
already knew we wanted to use Cloud

00:00:46,469 --> 00:00:50,489
Foundry because we done

00:00:47,579 --> 00:00:53,070
as you heard 60 pages of due diligence

00:00:50,489 --> 00:00:55,590
on past solutions but getting to the

00:00:53,070 --> 00:00:56,879
point where we had a working close Andry

00:00:55,590 --> 00:00:58,500
and gaining confidence in that

00:00:56,879 --> 00:01:01,109
deployment was the next part of the

00:00:58,500 --> 00:01:02,760
puzzle we spent a lot of time deploying

00:01:01,109 --> 00:01:05,339
by a trial and error we spent a lot of

00:01:02,760 --> 00:01:07,229
time learning through debugging we

00:01:05,339 --> 00:01:09,180
tripped up massively on all the Cloud

00:01:07,229 --> 00:01:10,500
Foundry v1 documentation that was still

00:01:09,180 --> 00:01:13,320
floating around the internet with like

00:01:10,500 --> 00:01:16,020
no context and most of our success

00:01:13,320 --> 00:01:17,490
actually came from borrowing manifest

00:01:16,020 --> 00:01:19,380
from the internet we just scoured the

00:01:17,490 --> 00:01:22,020
internet for pieces of yam all that kind

00:01:19,380 --> 00:01:23,759
of looks like they might possibly be a

00:01:22,020 --> 00:01:25,200
Cloud Foundry deployment manifest and

00:01:23,759 --> 00:01:27,689
throwing them a large deployment and

00:01:25,200 --> 00:01:30,840
seeing what stuck so lots of manual work

00:01:27,689 --> 00:01:33,000
there at the beginning and this quote

00:01:30,840 --> 00:01:34,799
from dr. Nick from Stark and Wayne

00:01:33,000 --> 00:01:36,720
summed it up last year at the platform

00:01:34,799 --> 00:01:38,520
CAF conference which was I've got a

00:01:36,720 --> 00:01:39,540
running Cloud Foundry system and if

00:01:38,520 --> 00:01:42,020
you've ever tried to do this yourself

00:01:39,540 --> 00:01:44,490
you may never have got to this point

00:01:42,020 --> 00:01:47,220
which really resonated with those kind

00:01:44,490 --> 00:01:48,270
of twelve months ago so those of you

00:01:47,220 --> 00:01:49,740
from the community will know that you

00:01:48,270 --> 00:01:52,439
can't invoke the name of dr. Nick

00:01:49,740 --> 00:01:57,450
without mentioning Bosh and so we've had

00:01:52,439 --> 00:01:58,770
an interesting the bush is an

00:01:57,450 --> 00:02:00,659
interesting thing in that there is a

00:01:58,770 --> 00:02:02,880
weird learning curve with Bosh in that

00:02:00,659 --> 00:02:04,890
you arrive at it and a1 and say well why

00:02:02,880 --> 00:02:06,149
do I need Bosh I already know chef I

00:02:04,890 --> 00:02:06,869
already know puppet I already know

00:02:06,149 --> 00:02:08,789
cfengine

00:02:06,869 --> 00:02:10,649
why should I learn another automation

00:02:08,789 --> 00:02:12,390
tool and so then you spend the next two

00:02:10,649 --> 00:02:13,080
weeks going off an automating Cloud

00:02:12,390 --> 00:02:15,120
Foundry we

00:02:13,080 --> 00:02:18,450
your favorite automation tool you then

00:02:15,120 --> 00:02:20,010
come back after two weeks of success and

00:02:18,450 --> 00:02:21,450
then you give Bosch a real try and you

00:02:20,010 --> 00:02:23,280
spend a couple days that it takes to

00:02:21,450 --> 00:02:25,350
learn the basic concepts of Bosch and

00:02:23,280 --> 00:02:26,940
deploy a Cloud Foundry through Bosch a

00:02:25,350 --> 00:02:28,950
couple days later you've got it working

00:02:26,940 --> 00:02:30,840
you look great because you've managed to

00:02:28,950 --> 00:02:31,800
deploy this distributed system and then

00:02:30,840 --> 00:02:33,600
all of a sudden you're drinking the

00:02:31,800 --> 00:02:34,980
kool-aid oh this is awesome I got to get

00:02:33,600 --> 00:02:36,120
me some more Bosch and then you go out

00:02:34,980 --> 00:02:37,440
to the community and you find the

00:02:36,120 --> 00:02:39,390
community Bosch releases four other

00:02:37,440 --> 00:02:40,770
tools and you start building everything

00:02:39,390 --> 00:02:42,540
you want to deploy your house with Bosch

00:02:40,770 --> 00:02:44,970
it's a really really useful tool and

00:02:42,540 --> 00:02:46,950
then you drink too much of the kool-aid

00:02:44,970 --> 00:02:49,260
and you start thinking what if Bosch was

00:02:46,950 --> 00:02:50,670
better I could change Bosch and then

00:02:49,260 --> 00:02:52,670
perhaps you have a colleague who starts

00:02:50,670 --> 00:02:55,709
making pull requests against Bosch CPI's

00:02:52,670 --> 00:02:56,940
breaking the build and getting taught by

00:02:55,709 --> 00:02:59,370
the Bosch team about the value of

00:02:56,940 --> 00:03:00,540
test-driven development it's also a

00:02:59,370 --> 00:03:02,790
really nice way of putting it

00:03:00,540 --> 00:03:03,780
share today I think was anyway things

00:03:02,790 --> 00:03:05,100
have gotten a lot better in the last

00:03:03,780 --> 00:03:07,920
year Matt was saying some of the

00:03:05,100 --> 00:03:09,630
problems we had earlier and pivotal took

00:03:07,920 --> 00:03:11,790
over the Cloud Foundry community pretty

00:03:09,630 --> 00:03:13,980
much a year ago and we should be really

00:03:11,790 --> 00:03:16,560
proud of how far we've come in a year

00:03:13,980 --> 00:03:18,810
it's a massive change from a year ago to

00:03:16,560 --> 00:03:20,640
today we have fortnightly open source

00:03:18,810 --> 00:03:22,590
releases that are consumable pretty much

00:03:20,640 --> 00:03:24,540
every release there are public Bosch

00:03:22,590 --> 00:03:26,489
stem cells that actually work to deploy

00:03:24,540 --> 00:03:28,320
those releases on top of there's new

00:03:26,489 --> 00:03:30,360
great tooling like spiff for deploying

00:03:28,320 --> 00:03:32,070
Cloud Foundry there's community support

00:03:30,360 --> 00:03:33,870
through both the V cap def mailing list

00:03:32,070 --> 00:03:36,209
and the community pair who work on

00:03:33,870 --> 00:03:38,010
github pull requests and issues to merge

00:03:36,209 --> 00:03:40,050
your changes into Cloud Foundry and

00:03:38,010 --> 00:03:42,239
there are sample manifests that you can

00:03:40,050 --> 00:03:43,590
actually deploy this thing with so all

00:03:42,239 --> 00:03:45,720
of this help got us to a point

00:03:43,590 --> 00:03:48,480
internally at Cisco we were able to

00:03:45,720 --> 00:03:50,400
deploy a good developer facing beta and

00:03:48,480 --> 00:03:52,110
then we had the interesting problem of

00:03:50,400 --> 00:03:53,459
having enough support from the

00:03:52,110 --> 00:03:54,720
developers that we had more Cloud

00:03:53,459 --> 00:03:59,190
Foundry installations and we could

00:03:54,720 --> 00:04:01,140
manually manage so having too many cloud

00:03:59,190 --> 00:04:03,810
boundaries to manage is a nice problem

00:04:01,140 --> 00:04:06,120
to have but it's still a problem and we

00:04:03,810 --> 00:04:10,200
realized we wanted to be able to deploy

00:04:06,120 --> 00:04:13,350
test and upgrade CF through Jenkins why

00:04:10,200 --> 00:04:15,299
Jenkins we already used Jenkins we know

00:04:13,350 --> 00:04:17,400
Jenkins Jenkins is a nice polite

00:04:15,299 --> 00:04:19,979
friendly guy we didn't feel there was

00:04:17,400 --> 00:04:22,260
any need for layering any more tools on

00:04:19,979 --> 00:04:24,570
top of what we're trying to do and so we

00:04:22,260 --> 00:04:26,560
kicked off a project named C 3 C I and

00:04:24,570 --> 00:04:28,690
it was joint work between

00:04:26,560 --> 00:04:31,210
and some awesome guys at Clos credo in

00:04:28,690 --> 00:04:33,460
the UK you could probably guess where

00:04:31,210 --> 00:04:36,040
the three C's in the name came from

00:04:33,460 --> 00:04:37,150
so Clos credo it was really good we

00:04:36,040 --> 00:04:38,770
found them because they already had a

00:04:37,150 --> 00:04:41,380
lot of experience running Cloud Foundry

00:04:38,770 --> 00:04:44,950
v2 in production and they'd also done

00:04:41,380 --> 00:04:46,690
work with deployment tool chains of open

00:04:44,950 --> 00:04:48,400
source cloud foundry so we wouldn't have

00:04:46,690 --> 00:04:50,410
got anywhere near as far as we have as

00:04:48,400 --> 00:04:51,840
quickly without kind of standing on the

00:04:50,410 --> 00:04:54,520
shoulders of giants

00:04:51,840 --> 00:04:56,620
so being developers we are fundamentally

00:04:54,520 --> 00:04:58,330
lazy so we didn't want to build anything

00:04:56,620 --> 00:05:00,310
new we wanted to take as much as we

00:04:58,330 --> 00:05:02,350
could from the community releases and

00:05:00,310 --> 00:05:04,540
build out tooling with things that

00:05:02,350 --> 00:05:06,070
already exists so we took Bosh

00:05:04,540 --> 00:05:08,650
we took the community Jenkins releases

00:05:06,070 --> 00:05:10,150
we took spife we took the net tests we

00:05:08,650 --> 00:05:11,770
wrote a little bit of Ruby and a little

00:05:10,150 --> 00:05:13,360
bit of bash and sort of weaved it

00:05:11,770 --> 00:05:16,000
together into a pipeline that we can

00:05:13,360 --> 00:05:17,650
deploy a Cloud Foundry three Jenkins so

00:05:16,000 --> 00:05:19,240
our current pipeline that we're using to

00:05:17,650 --> 00:05:21,580
deploy all of our cloud foundry installs

00:05:19,240 --> 00:05:23,260
has three stages there's the deploy

00:05:21,580 --> 00:05:25,000
phase where we take the environment

00:05:23,260 --> 00:05:27,040
specific metadata along with our core

00:05:25,000 --> 00:05:28,660
Cloud Foundry deployments we merge them

00:05:27,040 --> 00:05:31,270
together using spiff and we deploy that

00:05:28,660 --> 00:05:33,970
on top of OpenStack using Bosh we then

00:05:31,270 --> 00:05:35,560
run the tests that pivotal publish to

00:05:33,970 --> 00:05:37,720
validate that our Cloud Foundry installs

00:05:35,560 --> 00:05:39,040
are good and then we have a small layer

00:05:37,720 --> 00:05:41,500
of testing on top of that to make sure

00:05:39,040 --> 00:05:43,150
the customizations that we deploy on top

00:05:41,500 --> 00:05:46,780
of cloud connery are both present and

00:05:43,150 --> 00:05:49,090
functional and once we're in this

00:05:46,780 --> 00:05:50,470
situation with kind of Jenkins being at

00:05:49,090 --> 00:05:51,640
the heart of everything and all our kind

00:05:50,470 --> 00:05:53,410
of configuration for different

00:05:51,640 --> 00:05:55,360
environments and get we have this really

00:05:53,410 --> 00:05:57,669
good situation where we have consistency

00:05:55,360 --> 00:05:59,650
of our kind of or beta or production

00:05:57,669 --> 00:06:00,880
environments but without locking down

00:05:59,650 --> 00:06:03,430
developers who are actually trying to

00:06:00,880 --> 00:06:05,229
improve our past and add new features

00:06:03,430 --> 00:06:08,320
maybe they're hacking on some of the

00:06:05,229 --> 00:06:09,970
upstream features from the open source

00:06:08,320 --> 00:06:13,380
cloud foundry repos because all you need

00:06:09,970 --> 00:06:16,390
to do is branch if you branch you like

00:06:13,380 --> 00:06:20,140
if you branch you can then just tell us

00:06:16,390 --> 00:06:22,270
C 3 CI Bosh there Jenkins release which

00:06:20,140 --> 00:06:24,640
branch you want it to be Authority for

00:06:22,270 --> 00:06:26,440
you do a Bosh deploy that brings up a

00:06:24,640 --> 00:06:28,300
jenkins pre-populated with all of the

00:06:26,440 --> 00:06:31,060
jobs for deploying and testing a Cloud

00:06:28,300 --> 00:06:36,880
Foundry but based off your specific

00:06:31,060 --> 00:06:38,979
branch of configuration so why we're

00:06:36,880 --> 00:06:40,300
still here and this stuff does work we

00:06:38,979 --> 00:06:43,120
use it in production

00:06:40,300 --> 00:06:46,000
see 3ci is life for us it has saved us

00:06:43,120 --> 00:06:47,860
days probably weeks of time manually

00:06:46,000 --> 00:06:51,820
testing and verifying and deploying

00:06:47,860 --> 00:06:53,800
multiple Cloud Foundry situations but we

00:06:51,820 --> 00:06:55,510
can't go home yet there's still kind of

00:06:53,800 --> 00:06:58,030
lots of other things we need to worry

00:06:55,510 --> 00:07:01,000
about scalable monitoring persistent log

00:06:58,030 --> 00:07:03,310
storage custom services and brokers and

00:07:01,000 --> 00:07:04,570
also scaling out like how do we do a lot

00:07:03,310 --> 00:07:06,790
of the network stuff that was talked

00:07:04,570 --> 00:07:08,590
about in the VMware Talk you know how do

00:07:06,790 --> 00:07:10,090
we kind of make this appear as one

00:07:08,590 --> 00:07:11,410
global namespace even though we have

00:07:10,090 --> 00:07:13,690
multiple different Cloud Foundry

00:07:11,410 --> 00:07:15,790
installations on top of that we still

00:07:13,690 --> 00:07:17,320
need to share the love you know there's

00:07:15,790 --> 00:07:19,180
no point as being the bottleneck on

00:07:17,320 --> 00:07:21,160
these technologies like Bosch within our

00:07:19,180 --> 00:07:22,750
teams we need to kind of promote this

00:07:21,160 --> 00:07:24,040
kind of information to developers and

00:07:22,750 --> 00:07:27,160
whoever's going to be operating Bosch

00:07:24,040 --> 00:07:29,290
long term so yeah we we can't go to the

00:07:27,160 --> 00:07:32,710
pub just yet but that's all we've got

00:07:29,290 --> 00:07:34,540
time for I hope you guys found this

00:07:32,710 --> 00:07:36,600
interesting I hope that maybe it gives

00:07:34,540 --> 00:07:39,100
people slightly newer to Cloud Foundry

00:07:36,600 --> 00:07:40,630
some ideas on getting more serious with

00:07:39,100 --> 00:07:42,280
cloud foundry in your environment and

00:07:40,630 --> 00:07:43,780
how you might take the next step our

00:07:42,280 --> 00:07:46,300
contact details are there reach out to

00:07:43,780 --> 00:07:48,310
us on Twitter email all of our codes on

00:07:46,300 --> 00:07:49,510
github at the link below it would be

00:07:48,310 --> 00:07:51,610
really interesting to hear what you guys

00:07:49,510 --> 00:07:53,100
are doing in the deployment space thank

00:07:51,610 --> 00:07:55,270
you

00:07:53,100 --> 00:07:58,560
[Applause]

00:07:55,270 --> 00:07:58,560

YouTube URL: https://www.youtube.com/watch?v=2e0XgGevKhg


