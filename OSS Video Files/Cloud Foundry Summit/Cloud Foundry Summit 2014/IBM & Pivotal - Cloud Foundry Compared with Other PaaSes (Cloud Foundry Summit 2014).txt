Title: IBM & Pivotal - Cloud Foundry Compared with Other PaaSes (Cloud Foundry Summit 2014)
Publication date: 2014-07-30
Playlist: Cloud Foundry Summit 2014
Description: 
	Business track breakout session presented by Michael Maximilien, Chief Architect PaaS Innovation, IBM Cloud Labs and James Bayer, Director of Product Management, Cloud Foundry, Pivotal.
Captions: 
	00:00:00,930 --> 00:00:04,220
[Music]

00:00:08,000 --> 00:00:13,620
I'm Michel Maximilian I go by Max and

00:00:11,929 --> 00:00:17,190
this is my calling

00:00:13,620 --> 00:00:20,689
James on pivotal hello and today we're

00:00:17,190 --> 00:00:23,100
going to talk about comparison of pass

00:00:20,689 --> 00:00:24,630
2014 and I'll explain to you why it's

00:00:23,100 --> 00:00:27,810
00:00:24,630 --> 00:00:29,880
and also it's it it it feels a lot like

00:00:27,810 --> 00:00:31,830
this you know James and I when we were

00:00:29,880 --> 00:00:34,079
doing this we were trying to figure out

00:00:31,830 --> 00:00:35,489
a way to kind of compare different paths

00:00:34,079 --> 00:00:37,290
because obviously it's a topic of

00:00:35,489 --> 00:00:39,870
interest I don't think all of you are

00:00:37,290 --> 00:00:41,460
here to just see James and I and it sort

00:00:39,870 --> 00:00:43,200
of feels like this right because you're

00:00:41,460 --> 00:00:45,570
sort of comparing to things that are not

00:00:43,200 --> 00:00:50,390
necessarily equal but then you feel like

00:00:45,570 --> 00:00:55,440
they should be so let's jump into it and

00:00:50,390 --> 00:00:57,270
see what we have so very briefly the

00:00:55,440 --> 00:01:00,629
agenda is going to be split between

00:00:57,270 --> 00:01:03,180
James and I but I'll start and then

00:01:00,629 --> 00:01:05,339
he'll take over and get you to the end

00:01:03,180 --> 00:01:07,229
but basically I'll give you an idea of

00:01:05,339 --> 00:01:09,750
what the background of this quirt

00:01:07,229 --> 00:01:12,689
started this whole idea of trying to

00:01:09,750 --> 00:01:14,040
compare the past and also the

00:01:12,689 --> 00:01:17,070
methodology because I think that's

00:01:14,040 --> 00:01:19,680
important I came from a research

00:01:17,070 --> 00:01:22,110
background and I'm keen to making sure

00:01:19,680 --> 00:01:25,920
that you understand the limitations of

00:01:22,110 --> 00:01:28,110
this then James is going to take you to

00:01:25,920 --> 00:01:30,240
some of the insights and also really

00:01:28,110 --> 00:01:33,150
cool quality of experience test case

00:01:30,240 --> 00:01:36,689
that he did for this there are also

00:01:33,150 --> 00:01:40,320
potential next steps so first thing is

00:01:36,689 --> 00:01:42,450
that I was working at IBM research for a

00:01:40,320 --> 00:01:46,229
long time before getting this new job

00:01:42,450 --> 00:01:48,810
with working for Angel and Alex and it

00:01:46,229 --> 00:01:51,509
so this is based on initial research

00:01:48,810 --> 00:01:53,759
that we tried to do in 2010 where when

00:01:51,509 --> 00:01:56,670
cloud and certainly paths were very new

00:01:53,759 --> 00:01:59,189
and part of the idea is to try to

00:01:56,670 --> 00:02:00,630
compare them to not only make decision

00:01:59,189 --> 00:02:04,280
but also to improve different other

00:02:00,630 --> 00:02:07,020
paths that we have and of course today

00:02:04,280 --> 00:02:09,300
what you what you see is the paths that

00:02:07,020 --> 00:02:10,830
we sort of see are the leading ones and

00:02:09,300 --> 00:02:13,110
of course God foundry is part of it but

00:02:10,830 --> 00:02:16,140
the rest that you're going to see your

00:02:13,110 --> 00:02:18,540
like Microsoft Azure Google App Engine

00:02:16,140 --> 00:02:21,720
which got you know sort of ramped up

00:02:18,540 --> 00:02:23,610
recently and EWS but specifically

00:02:21,720 --> 00:02:25,050
Beanstalk and of course the services

00:02:23,610 --> 00:02:25,940
that are around it you woke who and

00:02:25,050 --> 00:02:29,390
openshift

00:02:25,940 --> 00:02:32,970
and significantly was revised with

00:02:29,390 --> 00:02:35,670
pivotal health and attorney James this

00:02:32,970 --> 00:02:38,280
year so first thing is what are the

00:02:35,670 --> 00:02:40,350
limitations because this is important

00:02:38,280 --> 00:02:42,120
coming from a scientific background I

00:02:40,350 --> 00:02:45,630
want to tell you that this is not a

00:02:42,120 --> 00:02:48,450
scientific comparison but there's value

00:02:45,630 --> 00:02:50,330
into it and maybe we can make it more

00:02:48,450 --> 00:02:52,980
scientific but it's not scientific but

00:02:50,330 --> 00:02:55,200
what does it tries to do so of course

00:02:52,980 --> 00:02:58,530
what are the challenges right so you

00:02:55,200 --> 00:03:00,780
think you're gonna compare past a lot of

00:02:58,530 --> 00:03:02,970
it is trying to not only compare

00:03:00,780 --> 00:03:05,070
features that you see but also features

00:03:02,970 --> 00:03:07,770
that people advertise and a lot of times

00:03:05,070 --> 00:03:10,800
the reality may not match what's being

00:03:07,770 --> 00:03:12,450
advertised there is no way to just have

00:03:10,800 --> 00:03:14,310
a measuring stick and in every feature

00:03:12,450 --> 00:03:16,380
you just measure it right so it's a

00:03:14,310 --> 00:03:18,570
little bit more subjective and then you

00:03:16,380 --> 00:03:19,830
get the signal and noise problem so

00:03:18,570 --> 00:03:20,880
you're measuring a lot of things on the

00:03:19,830 --> 00:03:23,640
Internet

00:03:20,880 --> 00:03:25,470
unless you have a fair amount of

00:03:23,640 --> 00:03:28,470
statistical sampling it's gonna be very

00:03:25,470 --> 00:03:30,150
hard to differentiate the two so there

00:03:28,470 --> 00:03:34,100
is significant challenge when you try to

00:03:30,150 --> 00:03:36,480
compare things that are on the web so

00:03:34,100 --> 00:03:39,540
disappointed the method that we took is

00:03:36,480 --> 00:03:41,070
not scientific so they're important that

00:03:39,540 --> 00:03:44,459
you understand this and it's potentially

00:03:41,070 --> 00:03:47,190
bias also obviously James and I are

00:03:44,459 --> 00:03:49,830
working you know he works at pivotal I

00:03:47,190 --> 00:03:53,100
work at IBM and we're all deep into

00:03:49,830 --> 00:03:56,820
Cloud Foundry so we are certainly to

00:03:53,100 --> 00:03:59,190
some extent bats however we try to be as

00:03:56,820 --> 00:04:02,160
much as we could objective and hopefully

00:03:59,190 --> 00:04:04,230
that will show and then finally the real

00:04:02,160 --> 00:04:06,750
value is and providing potentially what

00:04:04,230 --> 00:04:10,019
could be a framework so that you can do

00:04:06,750 --> 00:04:12,209
your own analysis and maybe as a group

00:04:10,019 --> 00:04:15,810
we can also do an analysis that would be

00:04:12,209 --> 00:04:17,790
valuable so another aspect also is to

00:04:15,810 --> 00:04:20,370
measure the quality of experience which

00:04:17,790 --> 00:04:21,660
means as a developer if you put yourself

00:04:20,370 --> 00:04:24,240
in a shoe of developer if you're not

00:04:21,660 --> 00:04:26,530
developing what is the experience when

00:04:24,240 --> 00:04:28,389
you try to use a particular path

00:04:26,530 --> 00:04:31,629
and I think James is gonna take us

00:04:28,389 --> 00:04:35,889
through what he did doing exactly this

00:04:31,629 --> 00:04:37,930
test case so first thing is what's the

00:04:35,889 --> 00:04:41,590
overview of the comparison so first

00:04:37,930 --> 00:04:43,479
thing we scaled from something like 35

00:04:41,590 --> 00:04:46,300
different features when we were when we

00:04:43,479 --> 00:04:49,539
first did this at IBM - about 50 with

00:04:46,300 --> 00:04:52,300
Jim selves and what we did also is to

00:04:49,539 --> 00:04:55,180
divide those 50 different feature points

00:04:52,300 --> 00:04:57,069
into eight groups in the groups or

00:04:55,180 --> 00:04:58,810
things like workloads tooling so we kind

00:04:57,069 --> 00:05:00,400
of grouped the different features for

00:04:58,810 --> 00:05:03,250
each one of those groups together and

00:05:00,400 --> 00:05:05,020
then integration service SLA these data

00:05:03,250 --> 00:05:07,090
stores programming model management and

00:05:05,020 --> 00:05:09,580
miscellaneous so things that don't fit

00:05:07,090 --> 00:05:11,830
you just kind of group them together and

00:05:09,580 --> 00:05:13,479
then another thing we did is if there

00:05:11,830 --> 00:05:15,520
was a feature that was supported all

00:05:13,479 --> 00:05:19,180
across the board we kind of removed it

00:05:15,520 --> 00:05:21,129
because it sort of assumed and in some

00:05:19,180 --> 00:05:23,080
cases if it wasn't reported at all and

00:05:21,129 --> 00:05:25,449
we removed it because it's just quite

00:05:23,080 --> 00:05:29,889
not there yet and some features are kind

00:05:25,449 --> 00:05:32,229
of in the middle and of course how do we

00:05:29,889 --> 00:05:34,389
measure it where we asked a question to

00:05:32,229 --> 00:05:37,599
what extent for that particular feature

00:05:34,389 --> 00:05:38,800
a particular path supports it and of

00:05:37,599 --> 00:05:40,360
course to answer that question it's

00:05:38,800 --> 00:05:42,550
based on experience based on what we

00:05:40,360 --> 00:05:47,050
read from the web and then what we can

00:05:42,550 --> 00:05:48,789
try and we have four values zero meaning

00:05:47,050 --> 00:05:52,120
that that feature is not supported at

00:05:48,789 --> 00:05:54,729
all one is that it's a basic support for

00:05:52,120 --> 00:05:57,490
it two is that it has strong support for

00:05:54,729 --> 00:05:59,199
it and then three its a leader so it's

00:05:57,490 --> 00:06:02,440
not only strong but it's also leading

00:05:59,199 --> 00:06:04,389
the space this path space alright so

00:06:02,440 --> 00:06:07,360
without further ado let's go to the

00:06:04,389 --> 00:06:09,370
first group so first group is workload

00:06:07,360 --> 00:06:12,370
and tooling what you see is kind of a

00:06:09,370 --> 00:06:14,889
map in the highlights or the parts where

00:06:12,370 --> 00:06:18,129
the feature is highly supported and then

00:06:14,889 --> 00:06:21,310
the lighter shade is where it's not

00:06:18,129 --> 00:06:23,110
supported and from there one of the

00:06:21,310 --> 00:06:25,900
things that you can see is that web tool

00:06:23,110 --> 00:06:27,879
as a workload so we found like analysis

00:06:25,900 --> 00:06:30,669
workload transaction workload media web

00:06:27,879 --> 00:06:32,529
to a move-out seems to be a course -

00:06:30,669 --> 00:06:35,709
board which you sort of expect but

00:06:32,529 --> 00:06:37,599
mobile is increasing another thing that

00:06:35,709 --> 00:06:39,670
we can kind of talk see from this is

00:06:37,599 --> 00:06:42,910
that the open source

00:06:39,670 --> 00:06:45,340
clouds which is the first we groups so

00:06:42,910 --> 00:06:47,200
the first groups on the top or the

00:06:45,340 --> 00:06:49,330
open-source and at the bottom or the

00:06:47,200 --> 00:06:51,130
proprietary ones you can see that they

00:06:49,330 --> 00:06:55,270
have very strong support for tooling at

00:06:51,130 --> 00:06:58,990
least from our experience the next group

00:06:55,270 --> 00:07:02,410
is integration services and SLA this is

00:06:58,990 --> 00:07:05,530
an area where we think and we try to be

00:07:02,410 --> 00:07:07,270
so I see people like Chris pointing hey

00:07:05,530 --> 00:07:09,790
why did you scrape me through you or

00:07:07,270 --> 00:07:12,100
something or to I mean we try to be as

00:07:09,790 --> 00:07:14,380
much as we could objective I mean James

00:07:12,100 --> 00:07:16,420
I know corrected me a few times when I

00:07:14,380 --> 00:07:19,390
gave Cloud Foundry more credit than I

00:07:16,420 --> 00:07:22,210
should so we scaled it down to make sure

00:07:19,390 --> 00:07:24,970
that we were trying to be objective as

00:07:22,210 --> 00:07:26,770
much as we could but here in SLA this is

00:07:24,970 --> 00:07:28,930
an area of research at least when I was

00:07:26,770 --> 00:07:30,700
in IBM research I was interested in so

00:07:28,930 --> 00:07:33,100
things for instance like does the cloud

00:07:30,700 --> 00:07:36,370
give you credit if it goes down and if

00:07:33,100 --> 00:07:38,860
it advertised nine nine seven nine well

00:07:36,370 --> 00:07:41,050
it turns out Amazon Amazon and Microsoft

00:07:38,860 --> 00:07:44,080
or the only one doing this right now

00:07:41,050 --> 00:07:45,700
so they actually advertise a certain

00:07:44,080 --> 00:07:48,880
availability and they will credit you

00:07:45,700 --> 00:07:51,400
thank Google in Google also does that to

00:07:48,880 --> 00:07:54,190
some extent less but they do it we don't

00:07:51,400 --> 00:07:57,130
do it yet I mean so maybe that's a place

00:07:54,190 --> 00:07:58,960
for improvement so the idea is that I

00:07:57,130 --> 00:08:01,870
was trying to find colors where the

00:07:58,960 --> 00:08:03,340
highlights the the heat of the map so

00:08:01,870 --> 00:08:06,670
the threes and the zeroes are

00:08:03,340 --> 00:08:09,280
highlighted but also integration

00:08:06,670 --> 00:08:11,260
services have a set of colors versus SLA

00:08:09,280 --> 00:08:13,060
guaranteed as another set of colors and

00:08:11,260 --> 00:08:15,090
you can see in the SLA guaranteed

00:08:13,060 --> 00:08:17,800
there's a fair amount of threes because

00:08:15,090 --> 00:08:19,120
people are essentially supporting a lot

00:08:17,800 --> 00:08:21,160
of those features those are the kind of

00:08:19,120 --> 00:08:24,280
features that when you go to a pass you

00:08:21,160 --> 00:08:25,990
want right availability and so on okay

00:08:24,280 --> 00:08:29,320
moving along because I want to make sure

00:08:25,990 --> 00:08:31,540
James has time to cover his tests you

00:08:29,320 --> 00:08:34,030
know you his data store and programming

00:08:31,540 --> 00:08:35,979
model so this is an area where open

00:08:34,030 --> 00:08:36,700
source pass is certainly very very

00:08:35,979 --> 00:08:38,110
strong

00:08:36,700 --> 00:08:40,870
I mean Cloud Foundry certainly a leader

00:08:38,110 --> 00:08:42,880
there you work who as well where they

00:08:40,870 --> 00:08:47,710
support multiple frameworks and multiple

00:08:42,880 --> 00:08:49,270
languages and then AWS has a very strong

00:08:47,710 --> 00:08:50,770
maturity model when it comes to

00:08:49,270 --> 00:08:52,090
something like supporting different

00:08:50,770 --> 00:08:55,780
kinds of databases

00:08:52,090 --> 00:08:57,910
now because a lot of the paths have

00:08:55,780 --> 00:09:00,220
marketplaces where you can add a service

00:08:57,910 --> 00:09:02,170
to add a database this could also mean

00:09:00,220 --> 00:09:05,010
that eventually a lot of these becomes

00:09:02,170 --> 00:09:06,910
no future no differentiation

00:09:05,010 --> 00:09:09,460
differentiators because different

00:09:06,910 --> 00:09:13,240
services will be available alright two

00:09:09,460 --> 00:09:16,090
more management this is of course very

00:09:13,240 --> 00:09:17,590
important for pass as a pass user what

00:09:16,090 --> 00:09:20,260
you're looking for is a system that can

00:09:17,590 --> 00:09:23,230
sort of auto manage self-manage itself

00:09:20,260 --> 00:09:25,270
and this is an area where auto scaling

00:09:23,230 --> 00:09:27,940
maybe eventually when it starts becoming

00:09:25,270 --> 00:09:30,070
supported of course you know to what

00:09:27,940 --> 00:09:32,200
extent that's the question most of the

00:09:30,070 --> 00:09:35,050
paths support some amount of that right

00:09:32,200 --> 00:09:37,030
now you know open ship has announced a

00:09:35,050 --> 00:09:39,730
lot of features around this so that's

00:09:37,030 --> 00:09:41,620
great for them and then also when you

00:09:39,730 --> 00:09:44,170
look at monitoring most of the paths

00:09:41,620 --> 00:09:46,510
essentially allow you to hook up to a

00:09:44,170 --> 00:09:50,830
paid monitoring service okay the final

00:09:46,510 --> 00:09:54,250
slide for me is sort of a grab all so

00:09:50,830 --> 00:09:56,740
miscellaneous where things fit clearly

00:09:54,250 --> 00:09:59,530
the open source paths are strong when it

00:09:56,740 --> 00:10:04,150
comes to open features as you would

00:09:59,530 --> 00:10:06,670
expect and AWS and azure very strong

00:10:04,150 --> 00:10:10,030
when it comes to supporting integration

00:10:06,670 --> 00:10:11,110
would back up and load balancing and and

00:10:10,030 --> 00:10:15,490
things of that nature

00:10:11,110 --> 00:10:17,800
so with that let me switch over to pass

00:10:15,490 --> 00:10:19,030
it to my colleague James and he's going

00:10:17,800 --> 00:10:22,180
to talk to you about his quality of

00:10:19,030 --> 00:10:24,190
experience thanks max sure so this was a

00:10:22,180 --> 00:10:26,200
kind of an interesting idea of Animax it

00:10:24,190 --> 00:10:28,300
approached me about the talk because my

00:10:26,200 --> 00:10:31,470
intuition was to approach this from a

00:10:28,300 --> 00:10:34,360
user experience and Max had this great

00:10:31,470 --> 00:10:38,860
matrix that he had done years ago and

00:10:34,360 --> 00:10:41,710
basically refreshed it for 2014 but the

00:10:38,860 --> 00:10:43,570
approach I took was there's a lot of

00:10:41,710 --> 00:10:45,820
different slices and dices but what does

00:10:43,570 --> 00:10:47,590
it feel like subjectively to take a

00:10:45,820 --> 00:10:50,710
scenario that's popular and used the

00:10:47,590 --> 00:10:52,120
platform so that's what I did and we

00:10:50,710 --> 00:10:53,560
learned something recently been Hale who

00:10:52,120 --> 00:10:57,640
did the Java build pack talked earlier

00:10:53,560 --> 00:11:01,330
today he did some analysis against our

00:10:57,640 --> 00:11:03,130
our publicly run pivotal web services

00:11:01,330 --> 00:11:05,170
which we call run pebble i/o also

00:11:03,130 --> 00:11:05,860
sometimes and we looked at all the

00:11:05,170 --> 00:11:07,750
applications

00:11:05,860 --> 00:11:09,760
that we have in there that when you push

00:11:07,750 --> 00:11:10,930
an application the platform the build

00:11:09,760 --> 00:11:13,149
pack tells you what kind of build pack

00:11:10,930 --> 00:11:15,130
it is to Java to ravine node whatever

00:11:13,149 --> 00:11:17,110
and it saves it in the database so we

00:11:15,130 --> 00:11:19,029
gave Ben a database dump and he said hey

00:11:17,110 --> 00:11:20,230
Ben figure out what what kind of

00:11:19,029 --> 00:11:21,910
applications people are pushing our

00:11:20,230 --> 00:11:23,350
platform and it turns out there's

00:11:21,910 --> 00:11:25,060
somewhere around sixty seventy percent

00:11:23,350 --> 00:11:26,950
of the applications or job applications

00:11:25,060 --> 00:11:28,990
and a lot of them use relational

00:11:26,950 --> 00:11:31,510
database so that's a scenario I picked

00:11:28,990 --> 00:11:34,180
as a Java developer what's it like for

00:11:31,510 --> 00:11:36,100
me a day in the life to use one of these

00:11:34,180 --> 00:11:39,700
platforms push an application there

00:11:36,100 --> 00:11:40,899
scale it update it what is that what

00:11:39,700 --> 00:11:42,399
does that look like what if I have a

00:11:40,899 --> 00:11:44,589
problem with my app does it heal itself

00:11:42,399 --> 00:11:46,149
those are the kinds of situations that I

00:11:44,589 --> 00:11:48,370
I wanted to put myself there and just

00:11:46,149 --> 00:11:49,720
like a day-to-day situation so we looked

00:11:48,370 --> 00:11:54,490
at open chef that use open shipped

00:11:49,720 --> 00:11:57,220
online use Heroku Amazon Beanstalk and a

00:11:54,490 --> 00:11:59,890
couple other services like RDS just go

00:11:57,220 --> 00:12:03,670
along with that Google App Engine and a

00:11:59,890 --> 00:12:05,050
cloud storage or Google Cloud sequel but

00:12:03,670 --> 00:12:07,120
you give a zero so if you had a little

00:12:05,050 --> 00:12:10,720
mistake there okay those are probably be

00:12:07,120 --> 00:12:13,449
a three and Microsoft Azure and those

00:12:10,720 --> 00:12:15,010
valuated four and a half of those I

00:12:13,449 --> 00:12:16,240
didn't quite finish assure but I got a

00:12:15,010 --> 00:12:18,130
pretty good idea and then Cloud Foundry

00:12:16,240 --> 00:12:19,829
as well running a pebble web services so

00:12:18,130 --> 00:12:24,459
let's take a look at each one of those

00:12:19,829 --> 00:12:26,949
so with with Beanstalk it is incredibly

00:12:24,459 --> 00:12:28,420
well integrated with all of their micro

00:12:26,949 --> 00:12:30,010
features I think a lot of people realize

00:12:28,420 --> 00:12:32,320
this when you see the the birthday cake

00:12:30,010 --> 00:12:33,790
diagrams of ec2 and s3 that they started

00:12:32,320 --> 00:12:36,070
with and all the sudden they added RDS

00:12:33,790 --> 00:12:38,769
the elastic load balancer they're bad at

00:12:36,070 --> 00:12:39,850
s3 dynamo they put all these things

00:12:38,769 --> 00:12:42,519
together when you use something like

00:12:39,850 --> 00:12:44,380
Beanstalk it's automating a lot of those

00:12:42,519 --> 00:12:46,350
things together they they hook in things

00:12:44,380 --> 00:12:48,760
like the metrics and monitoring with

00:12:46,350 --> 00:12:51,970
simple notification services they have

00:12:48,760 --> 00:12:54,459
auto scaling groups there so it really

00:12:51,970 --> 00:12:55,930
reduces the is friction if you just show

00:12:54,459 --> 00:12:57,610
up on Amazon you're gonna be pretty

00:12:55,930 --> 00:12:58,600
overwhelmed but if you if you've never

00:12:57,610 --> 00:13:00,399
used it before but if you show up

00:12:58,600 --> 00:13:02,170
Beanstalk it's pretty straightforward

00:13:00,399 --> 00:13:03,399
even as a Java developer you can show up

00:13:02,170 --> 00:13:05,680
with your war file and get going and

00:13:03,399 --> 00:13:06,730
they have incredible out-of-the-box

00:13:05,680 --> 00:13:08,709
monitoring you get these beautiful

00:13:06,730 --> 00:13:11,079
charts and graphs just right away out of

00:13:08,709 --> 00:13:13,360
the box what they didn't do so well is

00:13:11,079 --> 00:13:15,550
responsiveness so they were by far the

00:13:13,360 --> 00:13:16,899
slowest platform it took me about 15

00:13:15,550 --> 00:13:18,630
minutes to spin up my application with

00:13:16,899 --> 00:13:21,240
one container or you know one

00:13:18,630 --> 00:13:23,280
and a database so that was a that was I

00:13:21,240 --> 00:13:25,200
was pretty it stood out and didn't

00:13:23,280 --> 00:13:27,000
really feel like the other platforms

00:13:25,200 --> 00:13:30,390
they they treat different frameworks

00:13:27,000 --> 00:13:31,890
different ways so when you use nodejs it

00:13:30,390 --> 00:13:33,600
feels different than when you're using

00:13:31,890 --> 00:13:35,370
Java cuz I think you check things in

00:13:33,600 --> 00:13:36,870
with git and with Java you upload more

00:13:35,370 --> 00:13:39,510
files so it's like it doesn't really

00:13:36,870 --> 00:13:42,210
feel like it's the same platform when

00:13:39,510 --> 00:13:43,800
you're using different languages you

00:13:42,210 --> 00:13:44,820
have to understand even though they hide

00:13:43,800 --> 00:13:46,200
as many as you can

00:13:44,820 --> 00:13:47,580
they try and wizard eyes a lot of things

00:13:46,200 --> 00:13:50,250
you have to understand a lot of AWS

00:13:47,580 --> 00:13:55,020
concepts and the extensibility of the

00:13:50,250 --> 00:13:57,420
platform is it's very closed Google App

00:13:55,020 --> 00:13:59,400
Engine they did a really nice job just

00:13:57,420 --> 00:14:01,590
like Amazon of really deeply integrating

00:13:59,400 --> 00:14:03,480
in with all of their other services so

00:14:01,590 --> 00:14:06,060
really nice load balancing really nice

00:14:03,480 --> 00:14:08,910
cloud sequel integration and they have

00:14:06,060 --> 00:14:10,320
even better than Amazon integration into

00:14:08,910 --> 00:14:12,030
their web services so when they do

00:14:10,320 --> 00:14:13,710
things like if you want to do searches

00:14:12,030 --> 00:14:15,630
and maps and things that were you you

00:14:13,710 --> 00:14:17,220
have to pay as a developer to use these

00:14:15,630 --> 00:14:19,590
features of Google they've made that

00:14:17,220 --> 00:14:21,930
first-class integration in with Google

00:14:19,590 --> 00:14:23,820
App Engine they have really nice events

00:14:21,930 --> 00:14:26,040
and runtimes what they didn't do very

00:14:23,820 --> 00:14:28,470
well and this is my this is one of the

00:14:26,040 --> 00:14:30,480
first passes I ever tried way back when

00:14:28,470 --> 00:14:32,430
they first announced it I became

00:14:30,480 --> 00:14:33,900
frustrated that they didn't have they

00:14:32,430 --> 00:14:35,790
took away some things for me as a Java

00:14:33,900 --> 00:14:37,530
developer I couldn't have my own threads

00:14:35,790 --> 00:14:39,000
I couldn't use a relational database

00:14:37,530 --> 00:14:39,990
that was when they first came out and

00:14:39,000 --> 00:14:42,060
they've take away a lot of those

00:14:39,990 --> 00:14:43,410
restrictions but even in reviewing this

00:14:42,060 --> 00:14:45,630
documentation in the last few days they

00:14:43,410 --> 00:14:49,350
still like for example wants you to use

00:14:45,630 --> 00:14:50,700
their Google sequel driver and you have

00:14:49,350 --> 00:14:52,740
to insert the database connection

00:14:50,700 --> 00:14:54,240
yourself manually in your code about

00:14:52,740 --> 00:14:56,250
where that database is so they they

00:14:54,240 --> 00:14:58,380
still have some some kind of nuances

00:14:56,250 --> 00:15:02,000
that that take away things from a normal

00:14:58,380 --> 00:15:04,320
Java experience from a Java developer

00:15:02,000 --> 00:15:05,760
you can't really customize the container

00:15:04,320 --> 00:15:07,080
too well and you weren't able to debug

00:15:05,760 --> 00:15:08,040
it those those are some things that were

00:15:07,080 --> 00:15:10,230
frustrating

00:15:08,040 --> 00:15:11,940
I sure was the one I didn't get to

00:15:10,230 --> 00:15:13,260
finish all the way but they had a lot of

00:15:11,940 --> 00:15:14,790
options for frameworks they did a really

00:15:13,260 --> 00:15:17,280
nice job in their web experience in

00:15:14,790 --> 00:15:20,910
getting you started it felt a little bit

00:15:17,280 --> 00:15:22,590
more like like a virtual machine kind of

00:15:20,910 --> 00:15:24,170
orchestration on their websites and that

00:15:22,590 --> 00:15:26,850
was their quick getting started option

00:15:24,170 --> 00:15:28,320
and they're they're deploying to Windows

00:15:26,850 --> 00:15:30,690
which is different not quite what I

00:15:28,320 --> 00:15:32,010
expected I mean you should say maybe I'm

00:15:30,690 --> 00:15:33,870
naive but

00:15:32,010 --> 00:15:36,030
I've been hearing all this marketing

00:15:33,870 --> 00:15:37,920
from Microsoft about how though this is

00:15:36,030 --> 00:15:40,050
a generalize but then they push onto

00:15:37,920 --> 00:15:42,360
Windows right away and I was expecting

00:15:40,050 --> 00:15:44,400
to be able to have to have that be the

00:15:42,360 --> 00:15:45,900
more of a default option the SCM

00:15:44,400 --> 00:15:47,880
integrations were best-in-class by far

00:15:45,900 --> 00:15:49,710
the best I'd seen for for being able to

00:15:47,880 --> 00:15:51,120
onboard an app you can you could do all

00:15:49,710 --> 00:15:53,190
kinds of things like send it to Dropbox

00:15:51,120 --> 00:15:55,800
so you could all kinds of different

00:15:53,190 --> 00:16:01,140
options for forgetting that the plot the

00:15:55,800 --> 00:16:02,760
app onto the platform openshift they

00:16:01,140 --> 00:16:04,440
they're pretty interesting because

00:16:02,760 --> 00:16:05,730
they're the ones that's most often

00:16:04,440 --> 00:16:08,040
compared with Cloud Foundry because

00:16:05,730 --> 00:16:12,120
we're both launched around the same time

00:16:08,040 --> 00:16:13,890
for both open-source and the thing I

00:16:12,120 --> 00:16:14,250
found about open ship that I really

00:16:13,890 --> 00:16:16,650
liked

00:16:14,250 --> 00:16:18,360
they had best-in-class by far above any

00:16:16,650 --> 00:16:20,400
of the other other ones as well that

00:16:18,360 --> 00:16:22,050
I've looked at the SSH and port

00:16:20,400 --> 00:16:24,180
forwarding features were just really

00:16:22,050 --> 00:16:25,200
nice because I could go directly into

00:16:24,180 --> 00:16:27,090
the container right away and see

00:16:25,200 --> 00:16:28,890
problems I could port forward things on

00:16:27,090 --> 00:16:32,040
to my local virtual machine just with

00:16:28,890 --> 00:16:34,590
one command so I could just like set the

00:16:32,040 --> 00:16:37,920
tachi debugger or send traffic to the to

00:16:34,590 --> 00:16:40,200
the remote containers really easily the

00:16:37,920 --> 00:16:42,840
having SCM and CI directly integrated

00:16:40,200 --> 00:16:44,910
were pretty nice capabilities but

00:16:42,840 --> 00:16:46,140
there's a lot of not so things you know

00:16:44,910 --> 00:16:48,150
not so well things I didn't like about

00:16:46,140 --> 00:16:50,250
about open chef trying it from a user

00:16:48,150 --> 00:16:51,570
experience the the things were a lot of

00:16:50,250 --> 00:16:54,000
things were out of date it defaulted to

00:16:51,570 --> 00:16:55,740
Java 6 for example and the versions of

00:16:54,000 --> 00:16:57,330
things were old I found it hard and

00:16:55,740 --> 00:16:58,860
confusing to choose which cartridge to

00:16:57,330 --> 00:17:00,570
use because unlike Cloud Foundry that

00:16:58,860 --> 00:17:02,370
does auto detection you have to be

00:17:00,570 --> 00:17:04,920
explicit about what cartridge you want

00:17:02,370 --> 00:17:06,449
the platform to run and there's a lot of

00:17:04,920 --> 00:17:08,910
options to choose from even within the

00:17:06,449 --> 00:17:10,380
Java ecosystem between Tomcat this

00:17:08,910 --> 00:17:14,310
version on Tomcat that version of Tomcat

00:17:10,380 --> 00:17:16,140
JBoss 6 wildfly JBoss 7 so choosing the

00:17:14,310 --> 00:17:18,900
right one became kind of overwhelming

00:17:16,140 --> 00:17:20,459
and a little confusing didn't have some

00:17:18,900 --> 00:17:23,850
things that I would expect for for

00:17:20,459 --> 00:17:25,740
health management and you know killing

00:17:23,850 --> 00:17:28,020
an application it didn't come back so

00:17:25,740 --> 00:17:31,050
you're forced to to manage that yourself

00:17:28,020 --> 00:17:33,120
your own availability scaling up and

00:17:31,050 --> 00:17:34,740
only happened one instance at a time so

00:17:33,120 --> 00:17:36,450
like the the the scaling scenario I use

00:17:34,740 --> 00:17:37,710
I say scale up to five instances of my

00:17:36,450 --> 00:17:39,630
application I couldn't do that without

00:17:37,710 --> 00:17:42,150
doing it one at a time and it took about

00:17:39,630 --> 00:17:44,700
two minutes to get there in doing a

00:17:42,150 --> 00:17:45,299
netstat - a you see all the host traffic

00:17:44,700 --> 00:17:47,039
for all

00:17:45,299 --> 00:17:49,860
other containers on that host which I

00:17:47,039 --> 00:17:51,330
found really kind of disconcerting if I

00:17:49,860 --> 00:17:52,710
was wanted to be secure on my platform

00:17:51,330 --> 00:17:54,360
and knowing that other people could see

00:17:52,710 --> 00:17:57,330
my network traffic at least my source

00:17:54,360 --> 00:17:59,399
and destination and that the war file

00:17:57,330 --> 00:18:05,129
support was was limited there as well

00:17:59,399 --> 00:18:07,529
I think Heroku has absolutely the best

00:18:05,129 --> 00:18:10,710
user experience from that the tooling

00:18:07,529 --> 00:18:13,889
the tool team they put together in terms

00:18:10,710 --> 00:18:15,659
of just the polish around not only their

00:18:13,889 --> 00:18:17,789
web presence and then also their

00:18:15,659 --> 00:18:19,289
documentation and the way they document

00:18:17,789 --> 00:18:21,570
the api's and then the way put the the

00:18:19,289 --> 00:18:23,279
CLI commands together they have some

00:18:21,570 --> 00:18:25,499
features that other people don't have

00:18:23,279 --> 00:18:28,350
for things like the Heroku run command

00:18:25,499 --> 00:18:31,679
pipeline stats and logs the marketplaces

00:18:28,350 --> 00:18:32,999
is really well filled out and they just

00:18:31,679 --> 00:18:34,950
use some other really nice things so

00:18:32,999 --> 00:18:36,119
like when you update your application

00:18:34,950 --> 00:18:37,460
you restart it you're gonna have a brief

00:18:36,119 --> 00:18:40,289
amount of downtime typically if you're

00:18:37,460 --> 00:18:41,759
gonna kill your application and they

00:18:40,289 --> 00:18:43,350
know that your applications restarting

00:18:41,759 --> 00:18:44,789
and they'll hold inbound requests at the

00:18:43,350 --> 00:18:46,230
router waiting for your app to come back

00:18:44,789 --> 00:18:48,629
up again it's really nice user feature

00:18:46,230 --> 00:18:50,039
that you get for free on their platform

00:18:48,629 --> 00:18:52,230
and they do things like I'm pausing your

00:18:50,039 --> 00:18:55,649
app for you and hold the request at the

00:18:52,230 --> 00:18:57,359
router Jabez just seems like a second or

00:18:55,649 --> 00:18:58,950
third class citizen or Heroku the things

00:18:57,359 --> 00:19:00,480
that there were out of date they didn't

00:18:58,950 --> 00:19:02,220
really have war support built in as a

00:19:00,480 --> 00:19:03,779
default I heard from Romney vas that

00:19:02,220 --> 00:19:05,249
they have a plug-in that that you can

00:19:03,779 --> 00:19:06,840
use if you're willing to use Java six

00:19:05,249 --> 00:19:08,519
but that's not really something that

00:19:06,840 --> 00:19:11,429
people want to do anymore

00:19:08,519 --> 00:19:13,529
you have to use get so you don't get to

00:19:11,429 --> 00:19:16,679
use other other choices there and their

00:19:13,529 --> 00:19:19,139
team support is pretty limited compared

00:19:16,679 --> 00:19:22,230
to the other platforms so what did claw

00:19:19,139 --> 00:19:24,509
pound redo well in in this and this kind

00:19:22,230 --> 00:19:26,159
of test I really found and I was I was

00:19:24,509 --> 00:19:27,419
kind of surprised to find this that the

00:19:26,159 --> 00:19:28,679
job of supporting Cloud Runner is

00:19:27,419 --> 00:19:31,379
absolutely best-in-class

00:19:28,679 --> 00:19:33,299
and you can kind of see this from the

00:19:31,379 --> 00:19:34,739
containers that we support the Java it

00:19:33,299 --> 00:19:36,590
all really starts at the Java build pack

00:19:34,739 --> 00:19:39,529
having such excellent support so

00:19:36,590 --> 00:19:42,359
everything in the whether it's the JDK

00:19:39,529 --> 00:19:43,679
whether it's the version of Tomcat

00:19:42,359 --> 00:19:45,480
that's in there or all the dependencies

00:19:43,679 --> 00:19:47,489
that Ben was listing earlier they're all

00:19:45,480 --> 00:19:49,200
updated almost every every single week

00:19:47,489 --> 00:19:51,090
and that's incredible because as a

00:19:49,200 --> 00:19:52,799
developer you're always getting them the

00:19:51,090 --> 00:19:53,909
modern stuff you're doing I was some of

00:19:52,799 --> 00:19:55,590
these other platforms I had to downgrade

00:19:53,909 --> 00:19:58,300
the version of maven I was using because

00:19:55,590 --> 00:20:00,820
they're only on maven 3-0 and

00:19:58,300 --> 00:20:02,440
things down from to make it 3-2 and

00:20:00,820 --> 00:20:04,210
Cloud Foundry really scaled and

00:20:02,440 --> 00:20:05,680
responded quickly compared to some of

00:20:04,210 --> 00:20:07,270
the other platforms that I was using the

00:20:05,680 --> 00:20:09,190
logs were definitely a big strength

00:20:07,270 --> 00:20:11,500
blogger Gator made a big difference when

00:20:09,190 --> 00:20:13,420
it was introduced about six or seven

00:20:11,500 --> 00:20:15,250
months ago probably eight nine months

00:20:13,420 --> 00:20:17,080
ago when I got kind of introduced and

00:20:15,250 --> 00:20:18,670
then stronger over them that following

00:20:17,080 --> 00:20:20,290
months and now six months later I just

00:20:18,670 --> 00:20:21,730
take it for granted but when you use

00:20:20,290 --> 00:20:23,470
these other platforms you don't see that

00:20:21,730 --> 00:20:26,020
a lot they lot of them want you to SSH

00:20:23,470 --> 00:20:27,880
in to every single container and pull

00:20:26,020 --> 00:20:30,100
the log files out individually that's

00:20:27,880 --> 00:20:31,390
really a pain and the way that Cloud

00:20:30,100 --> 00:20:32,320
Foundry deals with services is so

00:20:31,390 --> 00:20:34,390
elegant compared to these other

00:20:32,320 --> 00:20:38,260
platforms like I was just shocked that

00:20:34,390 --> 00:20:40,900
Google made me go find my database URL

00:20:38,260 --> 00:20:42,190
and construct it manually insert it into

00:20:40,900 --> 00:20:43,780
my code and instead of give me an

00:20:42,190 --> 00:20:46,030
environment variable I just that just

00:20:43,780 --> 00:20:48,250
seems so strange to me after using cloud

00:20:46,030 --> 00:20:51,160
foundry services things that we need to

00:20:48,250 --> 00:20:52,840
work on after doing this tour I really

00:20:51,160 --> 00:20:54,490
feel come like hey I get jealous like

00:20:52,840 --> 00:20:57,790
that platform that's that feature I want

00:20:54,490 --> 00:21:01,540
it as a user we need to make it better

00:20:57,790 --> 00:21:02,890
to have shell access to the containers

00:21:01,540 --> 00:21:05,050
to be able to look inside see what's

00:21:02,890 --> 00:21:06,610
going on there are some workarounds you

00:21:05,050 --> 00:21:07,810
can do we talked about them on vcap dev

00:21:06,610 --> 00:21:09,610
in the last couple weeks to do things

00:21:07,810 --> 00:21:12,610
like a tea mug session with this thing

00:21:09,610 --> 00:21:14,620
called teammate the spirit of that kind

00:21:12,610 --> 00:21:16,620
of capability of being able to shell in

00:21:14,620 --> 00:21:19,600
is something we definitely need to do

00:21:16,620 --> 00:21:21,160
and have much better SCM and CI

00:21:19,600 --> 00:21:23,590
integrations that we do baked into the

00:21:21,160 --> 00:21:25,240
platform we certainly use it that way

00:21:23,590 --> 00:21:26,860
when we're building Cloud Foundry you

00:21:25,240 --> 00:21:28,960
put things in through a CI pipeline that

00:21:26,860 --> 00:21:30,460
starts with source control but we want

00:21:28,960 --> 00:21:32,170
to definitely make that a better

00:21:30,460 --> 00:21:34,390
first-class experience in the platform

00:21:32,170 --> 00:21:36,030
itself instead of making our users have

00:21:34,390 --> 00:21:38,320
to have to do that themselves

00:21:36,030 --> 00:21:40,060
providing metrics is really nice so when

00:21:38,320 --> 00:21:42,340
when you see that in Beanstalk and when

00:21:40,060 --> 00:21:44,950
you see Heroku put those log metrics in

00:21:42,340 --> 00:21:46,660
there for you right in your log file of

00:21:44,950 --> 00:21:49,420
what your application metrics are you

00:21:46,660 --> 00:21:50,620
want that as a feature and so we need to

00:21:49,420 --> 00:21:51,820
do that too the good news is we're

00:21:50,620 --> 00:21:53,530
working on that so come to my roadmap

00:21:51,820 --> 00:21:56,170
presentation tomorrow and hear about

00:21:53,530 --> 00:21:57,550
that and then the zero downtime updates

00:21:56,170 --> 00:21:59,050
are something that was really nice and

00:21:57,550 --> 00:22:01,150
some of the other the platform so and

00:21:59,050 --> 00:22:02,260
things like Heroku does when they're

00:22:01,150 --> 00:22:03,670
you're restarting their app and they

00:22:02,260 --> 00:22:04,870
they hold your request at the router or

00:22:03,670 --> 00:22:07,510
when you're updating your application

00:22:04,870 --> 00:22:08,620
and they do it one instance at a time so

00:22:07,510 --> 00:22:09,700
you don't have to orchestrate it

00:22:08,620 --> 00:22:11,140
yourself you can do that with

00:22:09,700 --> 00:22:13,390
orchestration today with cloud found

00:22:11,140 --> 00:22:14,860
you deploy a a version of your app and

00:22:13,390 --> 00:22:16,810
deploy B version of your app at the same

00:22:14,860 --> 00:22:18,100
time in the Rope move the traffic over

00:22:16,810 --> 00:22:19,660
but you have to do some scripting for

00:22:18,100 --> 00:22:22,720
that and so to make it a first-class

00:22:19,660 --> 00:22:24,280
feature so as you can see like the my

00:22:22,720 --> 00:22:25,990
approach is much more subjective and

00:22:24,280 --> 00:22:29,080
about using using the platform and then

00:22:25,990 --> 00:22:30,640
and then Max is much more giving it a

00:22:29,080 --> 00:22:32,220
scorecard across a whole range of

00:22:30,640 --> 00:22:34,690
features and hopefully you got a feel

00:22:32,220 --> 00:22:36,610
for the differences here and I'll turn

00:22:34,690 --> 00:22:38,710
it back over to Trevor the sum it up

00:22:36,610 --> 00:22:41,260
yeah well finish quickly so basically

00:22:38,710 --> 00:22:42,760
it's hard to D do this kind of

00:22:41,260 --> 00:22:45,490
comparison there's obviously a lot of

00:22:42,760 --> 00:22:48,810
interest because you're here but it's

00:22:45,490 --> 00:22:51,550
hard to do it but there's value so maybe

00:22:48,810 --> 00:22:54,400
at some point we can we can look what to

00:22:51,550 --> 00:22:56,770
do a lot of those features eventually

00:22:54,400 --> 00:22:58,810
become supported and all of them having

00:22:56,770 --> 00:23:00,880
done this multiple times over the years

00:22:58,810 --> 00:23:02,860
what I've seen is there was dominant

00:23:00,880 --> 00:23:04,540
paths and then they kind of copy on each

00:23:02,860 --> 00:23:06,120
other so this is the kind of thing

00:23:04,540 --> 00:23:08,710
that's ongoing

00:23:06,120 --> 00:23:11,050
AWS at this point it certainly very

00:23:08,710 --> 00:23:14,140
mature it makes sense you know

00:23:11,050 --> 00:23:16,180
to some extent it brings a question

00:23:14,140 --> 00:23:18,370
should we build like a bench mount a

00:23:16,180 --> 00:23:19,810
benchmark for pass some people have

00:23:18,370 --> 00:23:21,630
talked about performance benchmark but

00:23:19,810 --> 00:23:23,860
some kind of a benchmark for features

00:23:21,630 --> 00:23:25,960
and then of course it would be things

00:23:23,860 --> 00:23:27,970
like having common set of apps allowing

00:23:25,960 --> 00:23:30,250
these apps to be tested openly so that

00:23:27,970 --> 00:23:31,270
you get multiple feedback that may be

00:23:30,250 --> 00:23:32,800
something we can do

00:23:31,270 --> 00:23:34,480
so I need a spreadsheet we could make it

00:23:32,800 --> 00:23:36,520
open source so that other people could

00:23:34,480 --> 00:23:39,420
contribute to the data so we could have

00:23:36,520 --> 00:23:42,250
more better statistical sampling of it

00:23:39,420 --> 00:23:44,590
crowdsourcing the ratings in involving

00:23:42,250 --> 00:23:47,680
other people such as yourself right and

00:23:44,590 --> 00:23:50,950
iterate over this so next steps very

00:23:47,680 --> 00:23:54,670
briefly socializing this the quality of

00:23:50,950 --> 00:23:57,340
experience you know scenario that James

00:23:54,670 --> 00:23:59,200
went who you know having this be

00:23:57,340 --> 00:24:00,670
something that other people could go

00:23:59,200 --> 00:24:04,000
through so that we could get other

00:24:00,670 --> 00:24:06,220
quality of experience I do plan on

00:24:04,000 --> 00:24:07,630
publishing my the the matrix that I made

00:24:06,220 --> 00:24:09,850
in the notes yeah will do this and to do

00:24:07,630 --> 00:24:12,250
this present everything else so with

00:24:09,850 --> 00:24:14,260
that that we thank you and I think we

00:24:12,250 --> 00:24:16,090
may have one or two minutes for

00:24:14,260 --> 00:24:18,750
questions okay there's a bunch over

00:24:16,090 --> 00:24:18,750
there Wow

00:24:19,600 --> 00:24:26,279
cost No

00:24:21,539 --> 00:24:29,309
partly because you know I guess we just

00:24:26,279 --> 00:24:31,289
didn't get to it but also it varies a

00:24:29,309 --> 00:24:32,669
lot like Amazon changes their costs all

00:24:31,289 --> 00:24:34,409
the time but this is a good point I mean

00:24:32,669 --> 00:24:37,139
we could probably do it at one point in

00:24:34,409 --> 00:24:41,129
time these auto costs come here in the

00:24:37,139 --> 00:24:42,809
back yeah so the comment is looking at

00:24:41,129 --> 00:24:44,429
other dimensions which besides just the

00:24:42,809 --> 00:24:45,629
feature matrix or developer user

00:24:44,429 --> 00:24:47,279
experience what about the operator

00:24:45,629 --> 00:24:49,499
experience being able to update the

00:24:47,279 --> 00:24:50,789
platforms and evolve them over time it's

00:24:49,499 --> 00:24:54,059
good thank you

00:24:50,789 --> 00:24:55,950
anything from this idea so the question

00:24:54,059 --> 00:24:59,399
is whether or not we did an effort to

00:24:55,950 --> 00:25:02,249
look at the security aspects we did have

00:24:59,399 --> 00:25:04,859
this and this and what we found is that

00:25:02,249 --> 00:25:08,129
it's an area none of the past platform

00:25:04,859 --> 00:25:11,729
right now or sort of dominating most of

00:25:08,129 --> 00:25:15,470
them are very basic I know at IBM for a

00:25:11,729 --> 00:25:19,409
lot of our cloud platforms we looked at

00:25:15,470 --> 00:25:21,239
having automated agents that go to and

00:25:19,409 --> 00:25:23,970
then run a series of tests for security

00:25:21,239 --> 00:25:26,249
looking at ports looking up none of them

00:25:23,970 --> 00:25:28,349
do this and I don't know if we're doing

00:25:26,249 --> 00:25:31,739
this yet on bluemix but that's certainly

00:25:28,349 --> 00:25:33,599
an opportunity maybe last questions yeah

00:25:31,739 --> 00:25:36,960
the question is about interoperability

00:25:33,599 --> 00:25:38,849
of each passes from using them I can

00:25:36,960 --> 00:25:41,759
tell you that they're very enough inter

00:25:38,849 --> 00:25:45,450
not interoperable almost every single

00:25:41,759 --> 00:25:47,099
pass has a different like if I I'll show

00:25:45,450 --> 00:25:48,450
you I'm when I published the the the

00:25:47,099 --> 00:25:50,340
spreadsheet I can I ask a simple

00:25:48,450 --> 00:25:51,779
question can I bring a war file to the

00:25:50,340 --> 00:25:53,399
pass like how do you onboard your

00:25:51,779 --> 00:25:55,679
application almost every single one was

00:25:53,399 --> 00:25:57,749
different some force use get some of

00:25:55,679 --> 00:25:59,999
them make you use maven and get together

00:25:57,749 --> 00:26:01,619
some of them you can bring the war file

00:25:59,999 --> 00:26:03,960
but end up through the web interface but

00:26:01,619 --> 00:26:06,299
not through a CLI yeah so there's it's

00:26:03,960 --> 00:26:09,299
very fragmented on how you get on now

00:26:06,299 --> 00:26:11,519
there have been some some people

00:26:09,299 --> 00:26:13,379
interested in things like camp which is

00:26:11,519 --> 00:26:15,899
an oasis standard of people trying to be

00:26:13,379 --> 00:26:18,470
in common platform API so these kinds of

00:26:15,899 --> 00:26:20,999
things I'm not so sure that that's that

00:26:18,470 --> 00:26:23,999
that great of an effort either and

00:26:20,999 --> 00:26:25,499
because if you think about the

00:26:23,999 --> 00:26:27,149
application like what I really like

00:26:25,499 --> 00:26:29,190
about the platform is bringing a war

00:26:27,149 --> 00:26:31,859
file that's as a job that's my that's my

00:26:29,190 --> 00:26:34,809
unit of currency I created a war file go

00:26:31,859 --> 00:26:36,610
run it and that's the in

00:26:34,809 --> 00:26:38,499
outside of that all these things are

00:26:36,610 --> 00:26:39,909
very different so I think there's a

00:26:38,499 --> 00:26:42,129
constrained set of things you might want

00:26:39,909 --> 00:26:44,110
to be the same but then the platforms

00:26:42,129 --> 00:26:46,720
are so different about how they scale

00:26:44,110 --> 00:26:50,230
how they whether they use containers or

00:26:46,720 --> 00:26:51,850
VMs and there's what kind of load

00:26:50,230 --> 00:26:53,889
balancing they use that they're just how

00:26:51,850 --> 00:26:56,200
they bind to services it would be very

00:26:53,889 --> 00:26:58,899
difficult to come up with an

00:26:56,200 --> 00:27:01,470
interoperable thing that worked across

00:26:58,899 --> 00:27:01,470
all of them

00:27:01,550 --> 00:27:04,839

YouTube URL: https://www.youtube.com/watch?v=k3TazUmv7Fg


