Title: Elisabeth Hendrickson - Using PaaS for Continuous Delivery (Cloud Foundry Summit 2014)
Publication date: 2014-07-30
Playlist: Cloud Foundry Summit 2014
Description: 
	Technical track breakout session presented by Elisabeth Hendrickson, Pivotal.

With continuous delivery, you release frequently and with very little, or no, manual intervention. That requires three things: fully automated tests; a continuous integration server that executes those tests and can promote successful deployments; and an automated deployment mechanism with zero downtime. PaaS's are a perfect fit for this. Cloud Foundry makes zero-downtime automated deployments straightforward. Further, cloud-based CI services such as Cloudbees work well with Cloud Foundry. In this talk, Elisabeth explains how to achieve continuous delivery with Cloud Foundry using one of our own applications (docs.cloudfoundry.org) as an example.
Captions: 
	00:00:00,930 --> 00:00:04,220
[Music]

00:00:08,690 --> 00:00:17,640
Cloud Foundry is perfect for continuous

00:00:11,160 --> 00:00:19,800
delivery furthermore the hard part about

00:00:17,640 --> 00:00:21,660
continuous delivery probably is not your

00:00:19,800 --> 00:00:23,699
deployment infrastructure anyway that

00:00:21,660 --> 00:00:26,910
said Cloud Foundry is perfect for

00:00:23,699 --> 00:00:28,349
continuous delivery so before we talk

00:00:26,910 --> 00:00:30,179
about continuous delivery let's talk

00:00:28,349 --> 00:00:32,610
very briefly about continuous

00:00:30,179 --> 00:00:33,780
integration partly because when I talk

00:00:32,610 --> 00:00:36,239
to people about continuous integration

00:00:33,780 --> 00:00:37,770
and say you know talk to me about

00:00:36,239 --> 00:00:41,910
continuous integration they immediately

00:00:37,770 --> 00:00:43,379
say oh yeah Jenkins know that the

00:00:41,910 --> 00:00:45,300
Jenkins part is actually the most boring

00:00:43,379 --> 00:00:47,520
part of it you could do this with a

00:00:45,300 --> 00:00:49,379
bunch of cron screw cron jobs and shell

00:00:47,520 --> 00:00:51,360
scripts what's really interesting about

00:00:49,379 --> 00:00:52,500
continuous integration is that you've

00:00:51,360 --> 00:00:54,870
got a bunch of developers who are

00:00:52,500 --> 00:00:56,640
contributing stuff and with every single

00:00:54,870 --> 00:00:58,980
contribution first of all before they

00:00:56,640 --> 00:01:00,270
check in they're doing a local merge to

00:00:58,980 --> 00:01:02,399
make sure that everything's can then

00:01:00,270 --> 00:01:08,580
running the unit tests we have tests

00:01:02,399 --> 00:01:10,080
right people tests well good good yeah

00:01:08,580 --> 00:01:12,960
you're just not enthusiastic cuz you're

00:01:10,080 --> 00:01:15,180
thinking beer me in between yeah anyway

00:01:12,960 --> 00:01:17,610
so they run all the local tests make

00:01:15,180 --> 00:01:19,950
sure everything is working well before

00:01:17,610 --> 00:01:21,780
it even checks in then they check in and

00:01:19,950 --> 00:01:23,640
then Jenkins or pick your favorite

00:01:21,780 --> 00:01:25,920
flavor of continuous integration takes

00:01:23,640 --> 00:01:27,750
over and runs the build and makes sure

00:01:25,920 --> 00:01:29,640
that everything is green that is

00:01:27,750 --> 00:01:32,040
continuous integration by Martin fellers

00:01:29,640 --> 00:01:33,750
definition the thing about continuous

00:01:32,040 --> 00:01:35,670
integration is that Jenkins is not the

00:01:33,750 --> 00:01:37,259
hard part the hard part is the culture

00:01:35,670 --> 00:01:38,400
change that goes with that because if

00:01:37,259 --> 00:01:40,950
you've got a bunch of people throwing

00:01:38,400 --> 00:01:42,720
stuff in and they say it worked on my

00:01:40,950 --> 00:01:44,700
machine and the fact that that build is

00:01:42,720 --> 00:01:46,350
red not my problem then you're gonna

00:01:44,700 --> 00:01:47,670
have a problem with your organization

00:01:46,350 --> 00:01:49,829
and in fact I see a lot of organizations

00:01:47,670 --> 00:01:51,840
where they have a separate QA department

00:01:49,829 --> 00:01:55,350
that wrote a whole bunch of end of a

00:01:51,840 --> 00:01:57,689
bunch of system tests automated system

00:01:55,350 --> 00:02:00,000
tests that the development team feels no

00:01:57,689 --> 00:02:02,340
sense of ownership over whatsoever and

00:02:00,000 --> 00:02:04,079
those tests start failing and the build

00:02:02,340 --> 00:02:07,079
is technically red and it will stay that

00:02:04,079 --> 00:02:08,759
way for months because nobody cares that

00:02:07,079 --> 00:02:10,530
the people who wrote those tests don't

00:02:08,759 --> 00:02:11,940
have the power to fix it and the people

00:02:10,530 --> 00:02:13,410
who do have the power to fix it don't

00:02:11,940 --> 00:02:15,450
think that those tests are valid

00:02:13,410 --> 00:02:17,010
so the biggest problem with continuous

00:02:15,450 --> 00:02:19,200
integration is going to be the culture

00:02:17,010 --> 00:02:21,780
change now let's talk about continuous

00:02:19,200 --> 00:02:23,400
delivery you're laughing because you

00:02:21,780 --> 00:02:25,680
experienced this I don't actually know

00:02:23,400 --> 00:02:27,390
you so I'm not saying this because I

00:02:25,680 --> 00:02:30,990
know him I'm saying this because I

00:02:27,390 --> 00:02:32,940
recognize that laughs all right so let's

00:02:30,990 --> 00:02:35,370
talk about continuous delivery hint it

00:02:32,940 --> 00:02:37,850
is not just a whole bunch of see I just

00:02:35,370 --> 00:02:40,590
like CI isn't just a Jenkins server

00:02:37,850 --> 00:02:41,880
continuous delivery by Jess humbles

00:02:40,590 --> 00:02:43,320
definition and he's the guy who wrote

00:02:41,880 --> 00:02:45,090
the book so I'm gonna go by his

00:02:43,320 --> 00:02:47,520
definition it means that your software

00:02:45,090 --> 00:02:49,800
is production ready from day one you

00:02:47,520 --> 00:02:52,200
could theoretically put this thing in

00:02:49,800 --> 00:02:53,910
production right now it's now a business

00:02:52,200 --> 00:02:55,830
decision about whether or not you're

00:02:53,910 --> 00:02:56,970
going to and the way you know that you

00:02:55,830 --> 00:02:58,890
could put it in production right now

00:02:56,970 --> 00:03:01,440
isn't because there's some theoretical

00:02:58,890 --> 00:03:02,760
notion of done or done done is because

00:03:01,440 --> 00:03:06,000
you actually put it in something that

00:03:02,760 --> 00:03:08,820
looks like production all the time so

00:03:06,000 --> 00:03:10,800
that's continuous delivery you have some

00:03:08,820 --> 00:03:12,300
preconditions before you can get there

00:03:10,800 --> 00:03:14,190
first of all you're gonna have to have

00:03:12,300 --> 00:03:16,890
fully automated unit integration system

00:03:14,190 --> 00:03:18,720
tests with the associated sense of

00:03:16,890 --> 00:03:20,400
ownership and people believe that those

00:03:18,720 --> 00:03:22,290
tests actually test useful things and

00:03:20,400 --> 00:03:25,020
none of this nonsense about known

00:03:22,290 --> 00:03:27,150
failures do any of you have tests where

00:03:25,020 --> 00:03:31,950
you have known failures they fail and

00:03:27,150 --> 00:03:33,090
you oh yeah that yeah none of that you

00:03:31,950 --> 00:03:34,500
do need to have your continuous

00:03:33,090 --> 00:03:35,910
integration infrastructure stood up

00:03:34,500 --> 00:03:37,470
whatever that is that it looks like I

00:03:35,910 --> 00:03:39,780
don't actually care if you use Jenkins I

00:03:37,470 --> 00:03:42,090
where we're using go CD and we're really

00:03:39,780 --> 00:03:43,560
happy with go CD kind something we're

00:03:42,090 --> 00:03:47,190
also using Jenkins raising lots of

00:03:43,560 --> 00:03:48,990
things so anyway you also need to have

00:03:47,190 --> 00:03:52,410
scripted automated deployments yes we're

00:03:48,990 --> 00:03:54,690
Cloud Foundry comes in the last one the

00:03:52,410 --> 00:03:57,000
last one David's got it right awesome

00:03:54,690 --> 00:03:58,260
now so you're gonna go from having a

00:03:57,000 --> 00:03:59,880
single build to having an entire

00:03:58,260 --> 00:04:01,410
pipeline with continuous delivery

00:03:59,880 --> 00:04:03,900
because you're not gonna have a separate

00:04:01,410 --> 00:04:06,209
phase during which some QA people take

00:04:03,900 --> 00:04:07,560
over and do a bunch of stuff so you're

00:04:06,209 --> 00:04:09,959
gonna need to have that entire pipeline

00:04:07,560 --> 00:04:12,480
and if any one and just like with our CI

00:04:09,959 --> 00:04:15,090
if any one of those thousands of tests

00:04:12,480 --> 00:04:16,709
went red with your CD if any one of

00:04:15,090 --> 00:04:18,780
those things goes red and you're gonna

00:04:16,709 --> 00:04:20,070
have entire like fanouts to test in all

00:04:18,780 --> 00:04:21,359
of the different infrastructures that

00:04:20,070 --> 00:04:24,150
you need to test in or all the different

00:04:21,359 --> 00:04:26,280
can conditions that need to test in if

00:04:24,150 --> 00:04:27,050
any of those things go red if any one of

00:04:26,280 --> 00:04:28,819
those tests go

00:04:27,050 --> 00:04:31,639
red and anyway want for those in those

00:04:28,819 --> 00:04:32,960
various configurations then your

00:04:31,639 --> 00:04:34,490
pipeline is blocked and you're gonna

00:04:32,960 --> 00:04:36,319
need to clear it which means that you

00:04:34,490 --> 00:04:38,120
have to have the culture in place that

00:04:36,319 --> 00:04:41,449
says Oh something is red I'm going to

00:04:38,120 --> 00:04:42,979
clear it so culture changes overcoming

00:04:41,449 --> 00:04:44,569
resistance I hear these kinds of things

00:04:42,979 --> 00:04:46,310
all the time why would we even bother

00:04:44,569 --> 00:04:50,319
our customers don't want this stuff that

00:04:46,310 --> 00:04:52,639
fast that one drives me nuts

00:04:50,319 --> 00:04:54,979
Automation is expensive this sounds

00:04:52,639 --> 00:04:57,319
really hard what do you mean there is no

00:04:54,979 --> 00:04:58,970
QA phase isn't there at the manual

00:04:57,319 --> 00:05:00,289
regression tests what do you mean you're

00:04:58,970 --> 00:05:03,139
doing away with those you must not

00:05:00,289 --> 00:05:06,530
believe in quality yeah I love that one

00:05:03,139 --> 00:05:07,909
too as though that assure is quality is

00:05:06,530 --> 00:05:10,039
anybody actually ever seen a really

00:05:07,909 --> 00:05:14,479
really long manual regression phase a

00:05:10,039 --> 00:05:16,550
sure quality no anybody any really we'll

00:05:14,479 --> 00:05:19,330
talk after because I'm gonna suggest

00:05:16,550 --> 00:05:23,240
that you're confusing despite in because

00:05:19,330 --> 00:05:25,069
anyway so not fair for me to pick on you

00:05:23,240 --> 00:05:29,560
I don't know you either I'm really sorry

00:05:25,069 --> 00:05:32,240
moving on change is super hard however

00:05:29,560 --> 00:05:34,159
each one of those excuses has a really

00:05:32,240 --> 00:05:35,719
good reason why it's not a valid excuse

00:05:34,159 --> 00:05:37,370
and I'm happy to talk with anybody at

00:05:35,719 --> 00:05:40,190
length because I live eat breathe and

00:05:37,370 --> 00:05:41,240
sleep this stuff so I would say catch me

00:05:40,190 --> 00:05:43,759
during the rest of the conference but

00:05:41,240 --> 00:05:45,800
this is kind of it isn't it right catch

00:05:43,759 --> 00:05:48,380
me on Twitter I'm at test obsessed so

00:05:45,800 --> 00:05:50,060
moving on the actual reason for this

00:05:48,380 --> 00:05:52,400
talk continuous delivery with Cloud

00:05:50,060 --> 00:05:54,740
Foundry and why is Cloud Foundry perfect

00:05:52,400 --> 00:05:57,590
for this well remember that automated

00:05:54,740 --> 00:05:59,479
deploy thing Cloud Foundry has some

00:05:57,590 --> 00:06:01,610
super cool features that enable that

00:05:59,479 --> 00:06:03,379
automated deploy stuff to work really

00:06:01,610 --> 00:06:04,550
well for your continuous delivery

00:06:03,379 --> 00:06:07,819
environment

00:06:04,550 --> 00:06:10,129
first of all same exact code different

00:06:07,819 --> 00:06:12,500
space now there's a little caveat here

00:06:10,129 --> 00:06:14,000
because I'm not in marketing and so I'm

00:06:12,500 --> 00:06:16,400
not just gonna sort of say oh look

00:06:14,000 --> 00:06:18,590
promotion we don't actually have a

00:06:16,400 --> 00:06:20,599
promotion feature yet it's kind of in

00:06:18,590 --> 00:06:23,150
that application category that James

00:06:20,599 --> 00:06:25,639
Bear talked about in the roadmap session

00:06:23,150 --> 00:06:28,039
however you can make it look like we

00:06:25,639 --> 00:06:30,050
have a promotion feature by scripting CF

00:06:28,039 --> 00:06:32,659
the CF command line tool especially the

00:06:30,050 --> 00:06:34,969
version 6 go based version of the the CF

00:06:32,659 --> 00:06:37,580
command line tool super amenable to

00:06:34,969 --> 00:06:38,810
scripting so you can script it to

00:06:37,580 --> 00:06:40,400
basically have something that looks

00:06:38,810 --> 00:06:43,370
remarkably like promotion

00:06:40,400 --> 00:06:46,729
from your deployment phase in your build

00:06:43,370 --> 00:06:48,259
pipeline yeah the guy who's the PM for

00:06:46,729 --> 00:06:51,190
the CF tool by the way is looking at me

00:06:48,259 --> 00:06:55,310
and just grinning as I say that hi Scott

00:06:51,190 --> 00:06:56,509
right ii awesomely cool feature that

00:06:55,310 --> 00:06:58,970
comes with a little itty-bitty teeny i

00:06:56,509 --> 00:07:00,620
tiny asterisk as james bear talked about

00:06:58,970 --> 00:07:02,330
in the roadmap session we don't

00:07:00,620 --> 00:07:04,550
currently have a feature that's called

00:07:02,330 --> 00:07:06,800
blue green deploys however you can

00:07:04,550 --> 00:07:09,350
totally do blue green deploys with cloud

00:07:06,800 --> 00:07:12,350
foundry because we have this it's in the

00:07:09,350 --> 00:07:14,270
documentation and contact me on twitter

00:07:12,350 --> 00:07:16,370
at test obsessed if you have any trouble

00:07:14,270 --> 00:07:18,229
finding it actually if you just google

00:07:16,370 --> 00:07:21,320
blue green deploy cloud foundry you'll

00:07:18,229 --> 00:07:23,000
totally find it an entire set of steps

00:07:21,320 --> 00:07:25,010
about here's how you do a blue-green

00:07:23,000 --> 00:07:26,930
deployment with cloud foundry so that

00:07:25,010 --> 00:07:28,400
you end up with zero downtime to your

00:07:26,930 --> 00:07:30,050
users if you're doing continuous

00:07:28,400 --> 00:07:31,370
delivery you want to be deploying lots

00:07:30,050 --> 00:07:32,690
and lots and if you're deploying lots

00:07:31,370 --> 00:07:34,310
and lots and every single time you

00:07:32,690 --> 00:07:36,590
deploy there's a nonzero probability

00:07:34,310 --> 00:07:39,440
that you have just dropped sessions or

00:07:36,590 --> 00:07:41,810
like killed your users that would be sad

00:07:39,440 --> 00:07:44,449
they will be very sad about that

00:07:41,810 --> 00:07:46,310
so instead if you if you do a blue green

00:07:44,449 --> 00:07:47,750
deploy then they will be happy because

00:07:46,310 --> 00:07:49,310
they won't even notice the fact that

00:07:47,750 --> 00:07:50,599
you've been upgrading the code out from

00:07:49,310 --> 00:07:53,210
under them until you change the entire

00:07:50,599 --> 00:07:57,320
user interface don't do that to them so

00:07:53,210 --> 00:08:00,110
moving on I did want to mention our own

00:07:57,320 --> 00:08:03,080
example internally I also run that so

00:08:00,110 --> 00:08:05,210
you know I with the squirrel I totally

00:08:03,080 --> 00:08:06,889
forgot to do the intro and explain who

00:08:05,210 --> 00:08:09,050
the heck I am I'm the director of

00:08:06,889 --> 00:08:11,930
quality engineering for cloud foundry

00:08:09,050 --> 00:08:13,820
happy to talk about how we do build

00:08:11,930 --> 00:08:16,849
quality into our products at any time

00:08:13,820 --> 00:08:19,699
with anybody as part of that I run the

00:08:16,849 --> 00:08:23,300
docs team all of our Doc's run as apps

00:08:19,699 --> 00:08:24,830
on cloud foundry so we do continuous

00:08:23,300 --> 00:08:27,830
integration and continuous deployment

00:08:24,830 --> 00:08:30,050
for our documentation as an application

00:08:27,830 --> 00:08:32,060
so it's a great little use case because

00:08:30,050 --> 00:08:33,440
we're using our own stuff to deploy

00:08:32,060 --> 00:08:35,289
something that's very much production

00:08:33,440 --> 00:08:38,120
and that we very very much care about

00:08:35,289 --> 00:08:39,380
all of our documentation is modular we

00:08:38,120 --> 00:08:41,870
have a whole bunch of little git

00:08:39,380 --> 00:08:43,430
repositories for good reasons that I'll

00:08:41,870 --> 00:08:45,050
explain some other time when I'm not

00:08:43,430 --> 00:08:48,890
standing between you and beverage of

00:08:45,050 --> 00:08:51,560
choice but as soon as a writer checks in

00:08:48,890 --> 00:08:54,209
a change to any of those that those

00:08:51,560 --> 00:08:55,980
modules it kicks off three to five

00:08:54,209 --> 00:08:57,569
builds because we have to publish three

00:08:55,980 --> 00:09:00,179
different versions of our documentation

00:08:57,569 --> 00:09:03,179
and those three different builds that

00:09:00,179 --> 00:09:05,699
kick off it might sound weird to build

00:09:03,179 --> 00:09:07,800
Docs well maybe it doesn't depending on

00:09:05,699 --> 00:09:10,230
how much experience you've had with with

00:09:07,800 --> 00:09:12,059
building Docs but in our case what we

00:09:10,230 --> 00:09:15,240
need to do is assemble an entire docked

00:09:12,059 --> 00:09:16,470
set and publish that and in doing that

00:09:15,240 --> 00:09:19,439
we want to make sure we have no broken

00:09:16,470 --> 00:09:21,029
links so our tests aren't tests of the

00:09:19,439 --> 00:09:23,459
application which is just a little

00:09:21,029 --> 00:09:27,029
Sinatra thing serving up static content

00:09:23,459 --> 00:09:29,329
our tests are to do link checking so our

00:09:27,029 --> 00:09:32,129
little build pipeline for our production

00:09:29,329 --> 00:09:34,740
documentation involves check-in

00:09:32,129 --> 00:09:37,499
something to the to one of the modules

00:09:34,740 --> 00:09:39,269
for the documentation that kicks off the

00:09:37,499 --> 00:09:40,860
builds that assembles everything checks

00:09:39,269 --> 00:09:44,009
all of the links then deploys to our

00:09:40,860 --> 00:09:45,839
staging site where we can do a review so

00:09:44,009 --> 00:09:48,509
that people can look at it and then we

00:09:45,839 --> 00:09:50,519
can automatically very very quickly I

00:09:48,509 --> 00:09:52,110
turn that into something that's that's

00:09:50,519 --> 00:09:53,730
live on the site which means that we're

00:09:52,110 --> 00:09:56,519
actually updating our it's our

00:09:53,730 --> 00:09:58,740
documentation sites at least once a week

00:09:56,519 --> 00:09:59,730
frequently more often than that yeah

00:09:58,740 --> 00:10:01,559
once a week sounds like it's not

00:09:59,730 --> 00:10:03,860
continuous but it is continuous because

00:10:01,559 --> 00:10:07,079
we could do it at a moment's notice so

00:10:03,860 --> 00:10:08,610
that's my example you might be wondering

00:10:07,079 --> 00:10:10,589
things like well what about all of those

00:10:08,610 --> 00:10:12,059
automated test Cloud Foundry totally

00:10:10,589 --> 00:10:13,589
can't help you there because thinking is

00:10:12,059 --> 00:10:21,530
still required and there still are no

00:10:13,589 --> 00:10:26,620
magic bullets it is six we're done

00:10:21,530 --> 00:10:29,909
[Applause]

00:10:26,620 --> 00:10:29,909

YouTube URL: https://www.youtube.com/watch?v=7y5kEqQ29AA


