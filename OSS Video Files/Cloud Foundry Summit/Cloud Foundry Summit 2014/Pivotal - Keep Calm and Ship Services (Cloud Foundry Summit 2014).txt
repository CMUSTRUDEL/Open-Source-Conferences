Title: Pivotal - Keep Calm and Ship Services (Cloud Foundry Summit 2014)
Publication date: 2014-07-07
Playlist: Cloud Foundry Summit 2014
Description: 
	Chris Brown, Pivotal
Tammer Saleh, Director of Product, Cloud Foundry Services, Pivotal

The secret in building a world-class platform like Cloud Foundry is in providing a library of production ready, enterprise-grade data services. Learn from our experiences in applying the Pivotal process to building next generation data services.

- Find out which services Pivotal chose to focus on for 2014 and why.
- Hear the tradeoffs between the different tenancy strategies for shared services.
- Learn the three keys to mapping Cloud Foundry service concepts to a brand new service.
- Discover why we migrated our service brokers from Ruby to Go, and architecture we chose.
- See how we applied agile to the data realm, defining MVP and building value at every step.
Captions: 
	00:00:00,930 --> 00:00:04,220
[Music]

00:00:08,599 --> 00:00:14,910
looks like people who've come in and out

00:00:11,190 --> 00:00:16,890
so this presentation about to give is

00:00:14,910 --> 00:00:18,600
called keep calm and ship services

00:00:16,890 --> 00:00:20,010
because it was the first title we came

00:00:18,600 --> 00:00:20,779
up with and we didn't bother to change

00:00:20,010 --> 00:00:25,140
it

00:00:20,779 --> 00:00:27,060
my name is Tamara and this is Chris we

00:00:25,140 --> 00:00:30,029
both work in the London office

00:00:27,060 --> 00:00:32,279
we work for pivotal I'm director of

00:00:30,029 --> 00:00:34,020
product for pivotal CF services in

00:00:32,279 --> 00:00:38,820
London and Chris is my anchor for the

00:00:34,020 --> 00:00:41,000
development team what we're gonna talk

00:00:38,820 --> 00:00:43,469
to you today about is basically

00:00:41,000 --> 00:00:45,600
everything about all the services that

00:00:43,469 --> 00:00:49,410
we're building in pivotal Cloud Foundry

00:00:45,600 --> 00:00:50,789
and some of the challenges we face and

00:00:49,410 --> 00:00:53,699
how we build those services some of the

00:00:50,789 --> 00:00:56,670
patterns we've come up with specifically

00:00:53,699 --> 00:00:59,219
about tenancy and things like that we're

00:00:56,670 --> 00:01:01,920
also going to give some overview of the

00:00:59,219 --> 00:01:03,180
Bosch and Cloud Foundry architecture for

00:01:01,920 --> 00:01:05,400
some of you this is we kind of redundant

00:01:03,180 --> 00:01:07,310
and also we're going to talk about the

00:01:05,400 --> 00:01:09,540
services API and how that works

00:01:07,310 --> 00:01:11,549
we're going to try and move fast because

00:01:09,540 --> 00:01:13,320
everything's been pushed out a little

00:01:11,549 --> 00:01:17,189
bit when we know that you guys are gonna

00:01:13,320 --> 00:01:19,650
want your breaks I do alright so let's

00:01:17,189 --> 00:01:22,670
get started I believe you've got the

00:01:19,650 --> 00:01:25,920
first two sections yep okay one hear me

00:01:22,670 --> 00:01:28,140
awesome so won't be helpful first is to

00:01:25,920 --> 00:01:30,000
maybe go over a quick overview of what

00:01:28,140 --> 00:01:33,119
runtime and watch looks like what

00:01:30,000 --> 00:01:36,299
service is next to it so we start off

00:01:33,119 --> 00:01:38,490
with the infrastructure and then first

00:01:36,299 --> 00:01:41,759
it's vSphere we operated finally next to

00:01:38,490 --> 00:01:43,770
it which deployed gosh the runtime goes

00:01:41,759 --> 00:01:46,320
in top of Bosh the bit we care about in

00:01:43,770 --> 00:01:48,450
runtime for services account control

00:01:46,320 --> 00:01:51,420
it's really the only bit we we talk to

00:01:48,450 --> 00:01:54,750
and then for us the services go next

00:01:51,420 --> 00:01:58,009
next to it on to the posh again and then

00:01:54,750 --> 00:01:58,009
our concert goes on top

00:01:58,200 --> 00:02:02,399
so there we showed that you can deploy

00:02:00,600 --> 00:02:04,520
it with Bosh but there you could do in a

00:02:02,399 --> 00:02:06,540
few ways

00:02:04,520 --> 00:02:08,509
the first way to deploy service is

00:02:06,540 --> 00:02:12,319
actually on the cloud you runtime itself

00:02:08,509 --> 00:02:14,420
this brings a number of benefits the

00:02:12,319 --> 00:02:17,599
keeps everything stateless which is a

00:02:14,420 --> 00:02:18,950
benefit in and of itself but because

00:02:17,599 --> 00:02:21,349
you're in services you're dealing with

00:02:18,950 --> 00:02:23,749
the state and you really want one source

00:02:21,349 --> 00:02:24,980
of truth for that state you don't want

00:02:23,749 --> 00:02:26,859
to if you want to check if the user

00:02:24,980 --> 00:02:30,200
exists you don't want to check that your

00:02:26,859 --> 00:02:32,409
the users in your list of created users

00:02:30,200 --> 00:02:37,909
you should just see if the user is in

00:02:32,409 --> 00:02:39,859
service by a get rid of state you also

00:02:37,909 --> 00:02:42,400
have the advantage that you can scale on

00:02:39,859 --> 00:02:45,230
the 500 runtime

00:02:42,400 --> 00:02:47,599
this isn't maybe so important for

00:02:45,230 --> 00:02:49,069
brokers again because they're not

00:02:47,599 --> 00:02:51,760
they're not proxying all the traffic to

00:02:49,069 --> 00:02:54,469
your services but it's just nice to have

00:02:51,760 --> 00:02:56,599
but the real advantage is that you get

00:02:54,469 --> 00:02:59,620
low bouncing high availability so you're

00:02:56,599 --> 00:03:02,719
able to do keep the broker up all times

00:02:59,620 --> 00:03:06,650
without having to manage a switching

00:03:02,719 --> 00:03:08,750
switching the routes and another key

00:03:06,650 --> 00:03:10,760
advantage is that all the credentials

00:03:08,750 --> 00:03:13,099
will come over back from the broker and

00:03:10,760 --> 00:03:15,379
so it's important to have that SSL there

00:03:13,099 --> 00:03:18,829
and so if your clowned you set up with

00:03:15,379 --> 00:03:20,810
ssl then you get it all for free and

00:03:18,829 --> 00:03:23,000
also it's ideal for when you're actually

00:03:20,810 --> 00:03:24,530
being a literal broker and talking with

00:03:23,000 --> 00:03:27,379
the external service so if your notes

00:03:24,530 --> 00:03:29,299
aren't deployed with Bosh then he's done

00:03:27,379 --> 00:03:31,220
to do with both releases at all for

00:03:29,299 --> 00:03:33,349
example if you've got a dedicated DBA

00:03:31,220 --> 00:03:35,509
team that's managing your say Oracle

00:03:33,349 --> 00:03:37,579
cluster then this is an ideal pattern

00:03:35,509 --> 00:03:40,129
for deploying the service broker that

00:03:37,579 --> 00:03:42,939
will hand that Oracle cluster out to the

00:03:40,129 --> 00:03:45,709
application developers and the runtime

00:03:42,939 --> 00:03:47,209
and so another way to deploy them is

00:03:45,709 --> 00:03:48,680
proportion this is how how we do at the

00:03:47,209 --> 00:03:50,810
moment

00:03:48,680 --> 00:03:52,459
what advantage of this gives you is if

00:03:50,810 --> 00:03:54,919
you're already having to deploy your

00:03:52,459 --> 00:03:56,150
nodes with Bosh then the brokers

00:03:54,919 --> 00:03:57,169
probably actually with the simplest part

00:03:56,150 --> 00:03:59,060
of that deployment so you're not really

00:03:57,169 --> 00:04:02,540
getting much more complexity by just

00:03:59,060 --> 00:04:04,159
putting the Brooklyn wash as well if

00:04:02,540 --> 00:04:05,810
your broker does need to store

00:04:04,159 --> 00:04:08,509
information on the file system like paid

00:04:05,810 --> 00:04:10,069
files or configuration files then you

00:04:08,509 --> 00:04:12,139
really only have you have to use Bosh

00:04:10,069 --> 00:04:13,430
because all the storage inside Cloud

00:04:12,139 --> 00:04:14,060
Foundry is gonna be ephemeral and you're

00:04:13,430 --> 00:04:18,729
gonna lose it

00:04:14,060 --> 00:04:21,349
I also gives you increased flexibility

00:04:18,729 --> 00:04:22,610
we're running on boss you you have VM

00:04:21,349 --> 00:04:25,599
did you start processes you can really

00:04:22,610 --> 00:04:25,599
do whatever you want inside there

00:04:26,870 --> 00:04:33,060
so Bosch a fuse ops manager and use

00:04:31,050 --> 00:04:35,820
products in their boss releases are a

00:04:33,060 --> 00:04:40,470
first-class citizen inside there and be

00:04:35,820 --> 00:04:42,150
much easier there however in a knob

00:04:40,470 --> 00:04:43,740
times you're one point to use new

00:04:42,150 --> 00:04:46,250
feature called errands which you could

00:04:43,740 --> 00:04:48,330
then you could push ups with bag instead

00:04:46,250 --> 00:04:52,950
but the problem we bought is there's a

00:04:48,330 --> 00:04:54,120
high barrier to entry so you go back to

00:04:52,950 --> 00:04:57,180
town I want to talk about the source of

00:04:54,120 --> 00:04:59,520
the API thank you very much alright so

00:04:57,180 --> 00:05:02,280
let's talk about the services API and

00:04:59,520 --> 00:05:05,430
how how services are provisioned and

00:05:02,280 --> 00:05:07,650
used inside cloud foundry I've got these

00:05:05,430 --> 00:05:09,380
nifty little diagrams so down here you

00:05:07,650 --> 00:05:11,820
can see again the operations manager

00:05:09,380 --> 00:05:13,910
which is deployed bosh on top of the

00:05:11,820 --> 00:05:19,650
infrastructure we've got a running

00:05:13,910 --> 00:05:21,450
runtime sitting next to it over here

00:05:19,650 --> 00:05:22,980
we've deployed a service there's a

00:05:21,450 --> 00:05:24,780
completely separate deployment it's not

00:05:22,980 --> 00:05:27,000
part of runtime it's not inside of it

00:05:24,780 --> 00:05:28,440
but it does have a service broker

00:05:27,000 --> 00:05:31,050
so here we're kind of illustrating the

00:05:28,440 --> 00:05:32,220
Boche deployed service broker pattern so

00:05:31,050 --> 00:05:35,400
the service broker is sitting inside

00:05:32,220 --> 00:05:39,120
that deployment and it's been registered

00:05:35,400 --> 00:05:41,870
with the cloud controller so there's

00:05:39,120 --> 00:05:45,510
only there's a very few number of

00:05:41,870 --> 00:05:47,610
actions that can take place between the

00:05:45,510 --> 00:05:50,130
cloud controller and the service broker

00:05:47,610 --> 00:05:51,990
and we're showing up at the top the

00:05:50,130 --> 00:05:55,040
command that you type to kick off each

00:05:51,990 --> 00:05:58,260
one so when you run CF Marketplace

00:05:55,040 --> 00:06:00,870
effectively is when the cloud controller

00:05:58,260 --> 00:06:03,330
asked the service broker for its catalog

00:06:00,870 --> 00:06:05,280
and the service worker responds with a

00:06:03,330 --> 00:06:06,300
bunch of metadata describing okay here's

00:06:05,280 --> 00:06:08,370
what I've got to offer here are the

00:06:06,300 --> 00:06:10,200
various plans I might be offering

00:06:08,370 --> 00:06:12,990
multiple services but for now we just

00:06:10,200 --> 00:06:15,420
care about the one and then apologies

00:06:12,990 --> 00:06:16,590
for the hard to read picture but that

00:06:15,420 --> 00:06:18,630
that's kind of showing that all this

00:06:16,590 --> 00:06:21,960
information basically gets exposed right

00:06:18,630 --> 00:06:24,390
back into the console as well as the

00:06:21,960 --> 00:06:28,140
return value from CF Marketplace on the

00:06:24,390 --> 00:06:29,940
command line so now you know what

00:06:28,140 --> 00:06:31,980
services are available you know what

00:06:29,940 --> 00:06:33,570
plan is available so you're going to go

00:06:31,980 --> 00:06:34,490
ahead and create one so create service

00:06:33,570 --> 00:06:36,979
foo right

00:06:34,490 --> 00:06:40,910
the plan name as well so what that does

00:06:36,979 --> 00:06:42,620
is kicks off a provision request from

00:06:40,910 --> 00:06:44,360
cloud controller to the service broker

00:06:42,620 --> 00:06:47,539
and now you can see this little blue

00:06:44,360 --> 00:06:48,800
node showed up inside the service nodes

00:06:47,539 --> 00:06:53,030
and that represents the service that

00:06:48,800 --> 00:06:54,740
we've just provisioned next we're going

00:06:53,030 --> 00:06:57,610
to bind that service to my application

00:06:54,740 --> 00:07:00,949
so once you kicked off that command

00:06:57,610 --> 00:07:02,449
again it kicks off a binding request to

00:07:00,949 --> 00:07:04,310
the service broker which returns the

00:07:02,449 --> 00:07:06,229
binding information to cloud controller

00:07:04,310 --> 00:07:08,300
a little hard to read down there

00:07:06,229 --> 00:07:11,180
apologize but basically it's just some

00:07:08,300 --> 00:07:12,710
JSON that describes the username and

00:07:11,180 --> 00:07:15,470
password credentials and exactly where

00:07:12,710 --> 00:07:17,960
the service is and then that's handed

00:07:15,470 --> 00:07:20,090
off to the application now from that

00:07:17,960 --> 00:07:22,610
point on and this is a very important

00:07:20,090 --> 00:07:25,039
fact about the the service broker API

00:07:22,610 --> 00:07:27,289
and why we renamed it from the service

00:07:25,039 --> 00:07:28,610
gateway from that point on the

00:07:27,289 --> 00:07:30,110
application talks directly to the

00:07:28,610 --> 00:07:32,360
service it already knows where the

00:07:30,110 --> 00:07:33,860
service is and knows the credentials so

00:07:32,360 --> 00:07:36,289
we're not going to get in the way we're

00:07:33,860 --> 00:07:38,360
not gonna cause any issues with uptime

00:07:36,289 --> 00:07:40,240
it's also why the service broker itself

00:07:38,360 --> 00:07:43,240
doesn't really have to scale very high

00:07:40,240 --> 00:07:46,810
service brokers only used during the

00:07:43,240 --> 00:07:52,190
instance creation and the binding aspect

00:07:46,810 --> 00:07:55,310
pretty rare actually so here's the

00:07:52,190 --> 00:07:56,690
overview again of those five API

00:07:55,310 --> 00:07:58,820
endpoints this is one of the simplest

00:07:56,690 --> 00:08:01,009
API is ever I've ever worked on our

00:07:58,820 --> 00:08:03,949
scene we don't even support the full

00:08:01,009 --> 00:08:05,900
range of HTTP verbs who all here is

00:08:03,949 --> 00:08:10,520
familiar with restful api so there's

00:08:05,900 --> 00:08:11,930
your hand if you are not alright

00:08:10,520 --> 00:08:13,940
everybody's good so we don't even

00:08:11,930 --> 00:08:15,620
support all the verbs on all these most

00:08:13,940 --> 00:08:18,050
of them just support put and delete and

00:08:15,620 --> 00:08:22,969
catalog only supports get so it's a very

00:08:18,050 --> 00:08:25,490
simple API alright I believe you're

00:08:22,969 --> 00:08:26,419
going to talk about vocabulary yeah so

00:08:25,490 --> 00:08:28,009
it's pretty helpful this point to

00:08:26,419 --> 00:08:30,319
explain some of the terms that we use

00:08:28,009 --> 00:08:33,260
when building a service broker there are

00:08:30,319 --> 00:08:36,229
four main ones is a service which is the

00:08:33,260 --> 00:08:37,459
top-level logical this like a service

00:08:36,229 --> 00:08:40,159
broker can advertise a number of

00:08:37,459 --> 00:08:42,039
services this is probably mapped to the

00:08:40,159 --> 00:08:44,990
different kinds of technologies you use

00:08:42,039 --> 00:08:46,579
the plan is your chance to vary the

00:08:44,990 --> 00:08:47,480
service offerings you have so you can

00:08:46,579 --> 00:08:49,190
change the capacity

00:08:47,480 --> 00:08:51,920
or the performance or another attribute

00:08:49,190 --> 00:08:54,680
about the service the instance is what

00:08:51,920 --> 00:08:59,300
the user gets when they type CF crate

00:08:54,680 --> 00:09:00,340
service they this can mean a number of

00:08:59,300 --> 00:09:02,510
things which we'll go into in a minute

00:09:00,340 --> 00:09:08,150
and then the binding is the relation

00:09:02,510 --> 00:09:11,150
between an app and a service so if the

00:09:08,150 --> 00:09:13,010
tip is to really be explicit about even

00:09:11,150 --> 00:09:14,870
your codon and conversation about which

00:09:13,010 --> 00:09:17,060
one you mean because depending on who's

00:09:14,870 --> 00:09:18,560
asking all of these could be a service

00:09:17,060 --> 00:09:20,600
you end up with calling everything a

00:09:18,560 --> 00:09:22,340
service so like service could be a

00:09:20,600 --> 00:09:24,320
service from the users point of view

00:09:22,340 --> 00:09:25,490
their instance is their service and from

00:09:24,320 --> 00:09:28,250
the apps point of view the binding is a

00:09:25,490 --> 00:09:31,730
service and so if I could the CF CLI

00:09:28,250 --> 00:09:33,680
that makes it worse by calling it was a

00:09:31,730 --> 00:09:36,440
create service as opposed to create

00:09:33,680 --> 00:09:37,730
instance so something we've done in code

00:09:36,440 --> 00:09:39,590
and also in conversation is make sure

00:09:37,730 --> 00:09:42,040
that we use the full name each time to

00:09:39,590 --> 00:09:42,040
make sure is

00:09:42,680 --> 00:09:47,090
so mentioned earlier the instance can be

00:09:44,180 --> 00:09:51,140
a number of things depending on

00:09:47,090 --> 00:09:52,700
depending on the service so it's may be

00:09:51,140 --> 00:09:55,040
benefits to go into the detail about

00:09:52,700 --> 00:09:59,780
what walk-in it's it's coming and this

00:09:55,040 --> 00:10:02,000
is in the context of my sequel so you

00:09:59,780 --> 00:10:03,910
could have an instance be a database

00:10:02,000 --> 00:10:08,660
created inside an existing my sequel

00:10:03,910 --> 00:10:12,590
cluster and then the user gets just that

00:10:08,660 --> 00:10:14,480
database this is be applicable from

00:10:12,590 --> 00:10:16,750
every testing and development but it's

00:10:14,480 --> 00:10:18,950
you'd be you're very susceptible to

00:10:16,750 --> 00:10:20,930
noisy neighbors and if someone else does

00:10:18,950 --> 00:10:25,580
thrash in the box then you know you're

00:10:20,930 --> 00:10:29,360
gonna feel that you could give everyone

00:10:25,580 --> 00:10:31,970
an entire VM when when they ask for a

00:10:29,360 --> 00:10:34,970
service but at the moment there's a

00:10:31,970 --> 00:10:36,320
timeout on how long you're allowed to

00:10:34,970 --> 00:10:37,400
take the provision of service and

00:10:36,320 --> 00:10:39,740
depending on you ever shot you you may

00:10:37,400 --> 00:10:43,940
hit that timeout so it's best to have

00:10:39,740 --> 00:10:47,360
like a pool ready to go it's the most

00:10:43,940 --> 00:10:54,490
expensive but it's this is you're not

00:10:47,360 --> 00:10:54,490
going to have any resource problems here

00:10:54,730 --> 00:11:03,820
you could go step further and have each

00:10:57,610 --> 00:11:07,420
each instance be a cluster of VMs where

00:11:03,820 --> 00:11:09,310
you have a leader in the follower this

00:11:07,420 --> 00:11:13,630
gets harder you have to handle the

00:11:09,310 --> 00:11:16,720
failover but it's possible you could

00:11:13,630 --> 00:11:21,570
have a single VM and then start a new my

00:11:16,720 --> 00:11:25,260
sequel server for each instance this

00:11:21,570 --> 00:11:27,850
again good for maybe development but as

00:11:25,260 --> 00:11:31,390
it's all in the same box you might get

00:11:27,850 --> 00:11:33,910
some contention problems or what you

00:11:31,390 --> 00:11:35,200
could do is start using like a cluster

00:11:33,910 --> 00:11:37,600
schedule like these Austin starts

00:11:35,200 --> 00:11:40,420
spreading out they'll work across a

00:11:37,600 --> 00:11:45,100
cluster this allows you to provision

00:11:40,420 --> 00:11:50,320
quickly and also I get the benefits of

00:11:45,100 --> 00:11:51,310
having high availability up until now we

00:11:50,320 --> 00:11:53,140
still had all these problems that

00:11:51,310 --> 00:11:56,200
introduced on the same box interview

00:11:53,140 --> 00:11:57,490
with each other but then if you put

00:11:56,200 --> 00:11:59,020
everything inside containers you're able

00:11:57,490 --> 00:12:01,750
with a warden are darker and you're able

00:11:59,020 --> 00:12:03,610
to limit the CPU memory disk and network

00:12:01,750 --> 00:12:05,620
utilization so you're really able to

00:12:03,610 --> 00:12:09,750
like stop them interviewing with each

00:12:05,620 --> 00:12:12,760
other up until now all these have been

00:12:09,750 --> 00:12:14,350
describing a database that's empty but

00:12:12,760 --> 00:12:15,580
there's nothing stopping you from when

00:12:14,350 --> 00:12:16,750
you create a service having a database

00:12:15,580 --> 00:12:18,760
that it already has

00:12:16,750 --> 00:12:20,350
you know read-only they sit in there or

00:12:18,760 --> 00:12:22,630
write data we have a sandbox for each

00:12:20,350 --> 00:12:25,180
developer they can play around or

00:12:22,630 --> 00:12:27,580
sometimes provision could do nothing in

00:12:25,180 --> 00:12:28,900
the data sense and it just creates an

00:12:27,580 --> 00:12:31,840
account in an external service or

00:12:28,900 --> 00:12:33,160
something like that how about the time

00:12:31,840 --> 00:12:35,080
we talk about the services of building

00:12:33,160 --> 00:12:36,880
in 2014 all right so let's start talking

00:12:35,080 --> 00:12:38,290
about the focuses that we've had on

00:12:36,880 --> 00:12:40,900
exactly which services we think are

00:12:38,290 --> 00:12:43,170
important for 2014 some of these we've

00:12:40,900 --> 00:12:45,670
already actually released externally as

00:12:43,170 --> 00:12:47,170
development level plans some of them are

00:12:45,670 --> 00:12:48,400
still on the roadmap but we expect to

00:12:47,170 --> 00:12:54,130
have all these done by the end of the

00:12:48,400 --> 00:12:57,040
year okay so the first one is my

00:12:54,130 --> 00:12:59,530
personal favorite data service which is

00:12:57,040 --> 00:13:04,630
Redis somebody famously called the Redis

00:12:59,530 --> 00:13:06,610
the ak-47 of databases which I love the

00:13:04,630 --> 00:13:07,990
current instant all these slides are

00:13:06,610 --> 00:13:09,250
going to describe what we're currently

00:13:07,990 --> 00:13:11,130
offering with these and they're all

00:13:09,250 --> 00:13:14,380
eventually going to migrate to either

00:13:11,130 --> 00:13:16,899
dedicated clustered VMs or dedicated

00:13:14,380 --> 00:13:18,279
clustered containerized processes is the

00:13:16,899 --> 00:13:19,630
direction of moving for all these for

00:13:18,279 --> 00:13:22,720
the production level of these services

00:13:19,630 --> 00:13:23,920
but like I said this is very nascent MVP

00:13:22,720 --> 00:13:29,529
we're very agile

00:13:23,920 --> 00:13:32,080
so right now Redis is when you request

00:13:29,529 --> 00:13:33,970
an instance of the Redis service the the

00:13:32,080 --> 00:13:36,339
broker spins up your own Redis process

00:13:33,970 --> 00:13:39,279
and that's what you get you get your own

00:13:36,339 --> 00:13:42,399
not yet containerize but it will be and

00:13:39,279 --> 00:13:45,330
check out that animation the next one is

00:13:42,399 --> 00:13:48,190
neo4j the world's leading graph database

00:13:45,330 --> 00:13:51,820
again this is very similar where each

00:13:48,190 --> 00:13:54,040
instance is a separate neo4j process for

00:13:51,820 --> 00:13:55,990
all the third-party services where we

00:13:54,040 --> 00:13:59,290
don't you know kind of quote quote own

00:13:55,990 --> 00:14:03,100
the data service itself unlike Redis

00:13:59,290 --> 00:14:05,680
where you know we the person who the

00:14:03,100 --> 00:14:07,330
maintain of Redis is on our payroll for

00:14:05,680 --> 00:14:08,950
all the rest these services we've got

00:14:07,330 --> 00:14:11,020
specific go to market partners that were

00:14:08,950 --> 00:14:13,899
either already in contract with or

00:14:11,020 --> 00:14:16,990
talking to and you know legal stiff

00:14:13,899 --> 00:14:18,970
takes forever right so for neo4j of

00:14:16,990 --> 00:14:22,800
course we've got neo who's going to be

00:14:18,970 --> 00:14:24,820
going to market with us more animation

00:14:22,800 --> 00:14:27,459
elasticsearch distributed real-time

00:14:24,820 --> 00:14:29,440
search and analytics engine each

00:14:27,459 --> 00:14:31,870
instance is a single index so this is

00:14:29,440 --> 00:14:34,120
the multi tenant approach each index

00:14:31,870 --> 00:14:35,770
each instance is a single index from the

00:14:34,120 --> 00:14:38,860
shared cluster and our partner for that

00:14:35,770 --> 00:14:39,850
is elastic search of course if you're

00:14:38,860 --> 00:14:43,329
trying to take photographs you have to

00:14:39,850 --> 00:14:44,770
be faster MongoDB simple and fast no

00:14:43,329 --> 00:14:47,320
sequel database everybody knows

00:14:44,770 --> 00:14:48,880
right each instance is a single database

00:14:47,320 --> 00:14:51,190
again multi tenant from the shared

00:14:48,880 --> 00:14:55,149
cluster and our partner is MongoDB for

00:14:51,190 --> 00:14:57,550
that we've got memcache high-performance

00:14:55,149 --> 00:15:01,450
memory object cache each instance is a

00:14:57,550 --> 00:15:03,279
separate memcache process and by the way

00:15:01,450 --> 00:15:05,260
they have no good logo online I don't

00:15:03,279 --> 00:15:07,329
know why but they just don't good hire a

00:15:05,260 --> 00:15:09,790
designer Cassandra the highly

00:15:07,329 --> 00:15:12,040
distributed bright heavy kV or kind of

00:15:09,790 --> 00:15:13,839
column store it's a weird thing five

00:15:12,040 --> 00:15:15,940
dimensional or six dimensional key space

00:15:13,839 --> 00:15:18,010
you know if you guys know that each

00:15:15,940 --> 00:15:19,720
instance is a cassandra key space in the

00:15:18,010 --> 00:15:21,530
shared cluster and our partner for that

00:15:19,720 --> 00:15:23,750
is data stacks

00:15:21,530 --> 00:15:28,070
I love this quote when I was researching

00:15:23,750 --> 00:15:29,330
Cassandra a while back this was a study

00:15:28,070 --> 00:15:31,400
done by the University of Toronto in

00:15:29,330 --> 00:15:32,830
2012 in terms of scalability there's a

00:15:31,400 --> 00:15:33,950
clear winner throughout our experience

00:15:32,830 --> 00:15:35,030
experiments

00:15:33,950 --> 00:15:36,830
Cassandra achieves the highest

00:15:35,030 --> 00:15:38,570
throughput for the maximum number of

00:15:36,830 --> 00:15:43,520
nodes in all experiments

00:15:38,570 --> 00:15:47,420
that's pretty ringing endorsement we've

00:15:43,520 --> 00:15:48,140
also got Maria DB contrast could be

00:15:47,420 --> 00:15:51,740
better on that

00:15:48,140 --> 00:15:54,350
Maria DB is a my sequel replacement and

00:15:51,740 --> 00:15:57,470
when you pair that up with Galera which

00:15:54,350 --> 00:16:00,410
is an H a proxy for for Maria DB you've

00:15:57,470 --> 00:16:02,600
got a full eh-eh my sequel replacement

00:16:00,410 --> 00:16:04,310
database it's kind of the new hotness so

00:16:02,600 --> 00:16:05,330
if you're already using my sequel and

00:16:04,310 --> 00:16:08,560
you don't know about Maria you might

00:16:05,330 --> 00:16:11,240
want to research it each instance is

00:16:08,560 --> 00:16:12,980
Maria DB database inside the shared

00:16:11,240 --> 00:16:15,320
cluster so again a multi-tenant

00:16:12,980 --> 00:16:18,470
solution there and our partner for that

00:16:15,320 --> 00:16:20,450
is Sky sequel we've got of course

00:16:18,470 --> 00:16:22,850
pivotal HD the enterprise hadoop

00:16:20,450 --> 00:16:25,550
distribution each instance in pivotal HD

00:16:22,850 --> 00:16:29,270
is a cluster of dedicated VMs kind of

00:16:25,550 --> 00:16:32,930
crazy so so PhD is the one who actually

00:16:29,270 --> 00:16:34,460
has a pool of hot VM is ready to go when

00:16:32,930 --> 00:16:36,440
you request an instance it grabs a

00:16:34,460 --> 00:16:38,660
couple of those through its own Bosh

00:16:36,440 --> 00:16:42,470
that it deploys so Bosh and Bosh and

00:16:38,660 --> 00:16:44,660
Bosh inception and hands you those so

00:16:42,470 --> 00:16:47,180
this that makes a lot of sense for PhD

00:16:44,660 --> 00:16:49,310
right you need a lot of performance and

00:16:47,180 --> 00:16:53,750
cost is not so much the issue in terms

00:16:49,310 --> 00:16:57,160
of data center cost and then what else

00:16:53,750 --> 00:17:00,260
oh yeah react css3 compatible blobstore

00:16:57,160 --> 00:17:02,300
again this is a multi-tenant solution

00:17:00,260 --> 00:17:04,910
where each instance handed out to the

00:17:02,300 --> 00:17:07,010
application developer is a single bucket

00:17:04,910 --> 00:17:08,570
in that shared react CS cluster and

00:17:07,010 --> 00:17:13,550
we're go to market partner for that it's

00:17:08,570 --> 00:17:15,770
gonna be bash oh yeah yeah yeah I saw

00:17:13,550 --> 00:17:17,360
animation there right so anyways you can

00:17:15,770 --> 00:17:20,060
see here that what we're trying to do is

00:17:17,360 --> 00:17:22,370
find the right partners and the right

00:17:20,060 --> 00:17:27,560
technologies to make this pantheon this

00:17:22,370 --> 00:17:31,430
kind of nicely distributed map of sequel

00:17:27,560 --> 00:17:34,340
and no sequel relational non-relational

00:17:31,430 --> 00:17:35,780
data technologies we want to make sure

00:17:34,340 --> 00:17:37,670
that when you're deploying your app to

00:17:35,780 --> 00:17:39,020
Cloud Foundry you have everything there

00:17:37,670 --> 00:17:40,610
to choose from right that's the whole

00:17:39,020 --> 00:17:42,560
point is to enable that kind of agility

00:17:40,610 --> 00:17:43,880
where you can just quickly just it's

00:17:42,560 --> 00:17:48,440
like a candy store you get whatever you

00:17:43,880 --> 00:17:49,790
want all right and then I'm going to

00:17:48,440 --> 00:17:54,110
talk about some of the challenges we

00:17:49,790 --> 00:17:55,370
face because I'm overly honest one big

00:17:54,110 --> 00:17:57,050
challenge that we face when we're

00:17:55,370 --> 00:18:01,490
looking at building all these data data

00:17:57,050 --> 00:18:05,060
sets excuse me is that it's not our data

00:18:01,490 --> 00:18:07,100
right and it is data so it's drastically

00:18:05,060 --> 00:18:08,600
important it might not actually be it

00:18:07,100 --> 00:18:10,040
might be just crappy data but we have no

00:18:08,600 --> 00:18:12,350
idea so we have to assume that

00:18:10,040 --> 00:18:13,910
everything that goes into our Data

00:18:12,350 --> 00:18:18,790
Services is the most important data in

00:18:13,910 --> 00:18:23,020
the world so we end up prioritizing

00:18:18,790 --> 00:18:25,250
durability and reliability over

00:18:23,020 --> 00:18:27,770
performance and sometimes over cost

00:18:25,250 --> 00:18:29,210
right it's always great to be high

00:18:27,770 --> 00:18:32,360
performance and it's always great to try

00:18:29,210 --> 00:18:33,500
and achieve that at a low cost point but

00:18:32,360 --> 00:18:35,990
it's much more important to make sure

00:18:33,500 --> 00:18:37,760
that your you know your collection of

00:18:35,990 --> 00:18:44,480
Buffy episodes doesn't get lost

00:18:37,760 --> 00:18:47,150
right also when you're building when

00:18:44,480 --> 00:18:49,970
you've got a an army of DBAs for

00:18:47,150 --> 00:18:52,160
maintaining your data sets your

00:18:49,970 --> 00:18:53,780
databases it's easy for them to tune

00:18:52,160 --> 00:18:55,490
them for your exact workload I mean if

00:18:53,780 --> 00:18:56,630
your Twitter you know exactly what your

00:18:55,490 --> 00:18:58,460
workload looks like and it's very

00:18:56,630 --> 00:19:03,260
different than other workloads so it's

00:18:58,460 --> 00:19:04,970
very easy for you to to to tune your

00:19:03,260 --> 00:19:07,520
data sets your databases so that they're

00:19:04,970 --> 00:19:09,680
going to work performing in that exact

00:19:07,520 --> 00:19:11,480
situation we don't really have that

00:19:09,680 --> 00:19:14,930
luxury because we're building something

00:19:11,480 --> 00:19:17,480
that works for everybody now luckily the

00:19:14,930 --> 00:19:20,090
cloud foundry services API has that

00:19:17,480 --> 00:19:21,830
concept of plans a lot of people think

00:19:20,090 --> 00:19:23,030
of plans as a linear progression which

00:19:21,830 --> 00:19:23,960
is bigger and bigger and bigger but

00:19:23,030 --> 00:19:28,220
that's not actually how you should think

00:19:23,960 --> 00:19:30,320
of them they are a small set of of

00:19:28,220 --> 00:19:33,080
options inside each data service you can

00:19:30,320 --> 00:19:34,760
have a plan for a write heavy workload

00:19:33,080 --> 00:19:37,820
or read heavy workload or something like

00:19:34,760 --> 00:19:39,290
that within the one service offering so

00:19:37,820 --> 00:19:40,850
that's something that we plan on

00:19:39,290 --> 00:19:43,190
leveraging in the future is we get more

00:19:40,850 --> 00:19:44,720
feedback from the customers saying

00:19:43,190 --> 00:19:46,390
that's one kind of workload and it's

00:19:44,720 --> 00:19:50,180
just really not working the way you know

00:19:46,390 --> 00:19:52,040
the way that your thing is configured by

00:19:50,180 --> 00:19:55,010
the way this background image is I love

00:19:52,040 --> 00:19:58,910
this is anybody recognize this raise

00:19:55,010 --> 00:20:02,690
your hand okay this is a poster you can

00:19:58,910 --> 00:20:06,770
buy online that is a scale image of

00:20:02,690 --> 00:20:10,070
every drone in existence with metadata

00:20:06,770 --> 00:20:12,170
on there in the forms of skulls and

00:20:10,070 --> 00:20:14,660
crossbones and things like that to tape

00:20:12,170 --> 00:20:16,970
it's a friendly drone or not and what

00:20:14,660 --> 00:20:18,920
country it comes from on the other side

00:20:16,970 --> 00:20:26,030
of that paper is reflective sheet so you

00:20:18,920 --> 00:20:27,980
can hide from the drone what versus how

00:20:26,030 --> 00:20:30,560
so little no in fact I used to be an

00:20:27,980 --> 00:20:34,540
engineer I still codes sometimes it's

00:20:30,560 --> 00:20:37,640
very difficult as a p.m. on this project

00:20:34,540 --> 00:20:40,670
not to tell the engineers that they must

00:20:37,640 --> 00:20:42,710
use docker right not to not to say that

00:20:40,670 --> 00:20:45,620
kind of stuff not to get down in the

00:20:42,710 --> 00:20:47,390
weeds and pivotal especially labs and

00:20:45,620 --> 00:20:50,000
that culture has been brought into all a

00:20:47,390 --> 00:20:51,860
pivotal very strict and healthy

00:20:50,000 --> 00:20:55,550
delineation between the what versus the

00:20:51,860 --> 00:20:57,350
how right so I as the PM get to say well

00:20:55,550 --> 00:20:59,090
I want these things done exactly I don't

00:20:57,350 --> 00:21:00,980
want them done in this order and he gets

00:20:59,090 --> 00:21:03,890
to say okay well we're gonna use go or

00:21:00,980 --> 00:21:05,660
whatever we want to use and also this

00:21:03,890 --> 00:21:06,230
one's gonna take three months I don't

00:21:05,660 --> 00:21:08,870
care what you say

00:21:06,230 --> 00:21:11,180
right so the what versus the how and

00:21:08,870 --> 00:21:12,620
when we're dealing with such a highly

00:21:11,180 --> 00:21:14,510
technical product and this is not just

00:21:12,620 --> 00:21:16,130
for services honestly this is for all of

00:21:14,510 --> 00:21:18,500
Cloud Foundry it's a little more

00:21:16,130 --> 00:21:22,550
challenging to make that work so we have

00:21:18,500 --> 00:21:24,260
boxing matches it's good part of that

00:21:22,550 --> 00:21:27,440
was that we did end up doing a go

00:21:24,260 --> 00:21:30,080
rewrite for a lot of the brokers again

00:21:27,440 --> 00:21:32,270
not so much for performance because it's

00:21:30,080 --> 00:21:34,930
not so important that the brokers be

00:21:32,270 --> 00:21:37,880
high-performing but more for the ease of

00:21:34,930 --> 00:21:40,790
the ease of deployment and consistency

00:21:37,880 --> 00:21:43,720
across the rest of the pivotal CF and a

00:21:40,790 --> 00:21:46,280
lot of the Cloud Foundry products were

00:21:43,720 --> 00:21:48,260
finding the Ruby is great for

00:21:46,280 --> 00:21:50,810
prototyping and Ruby is great for a lot

00:21:48,260 --> 00:21:52,430
of less performant aspects it's

00:21:50,810 --> 00:21:55,120
certainly wonderful for our console and

00:21:52,430 --> 00:21:57,250
things like that but in terms of

00:21:55,120 --> 00:21:58,690
cloud level performance especially when

00:21:57,250 --> 00:22:01,510
was going to be deployed on Prem and we

00:21:58,690 --> 00:22:04,000
had very little idea of how much scale

00:22:01,510 --> 00:22:06,010
it's gonna have to undergo and we're not

00:22:04,000 --> 00:22:09,820
gonna be there to babysit something like

00:22:06,010 --> 00:22:11,710
doe is a huge it's hugely helpful for us

00:22:09,820 --> 00:22:16,750
and something we can really gain a lot

00:22:11,710 --> 00:22:21,190
by leveraging that the infrastructure

00:22:16,750 --> 00:22:23,559
feedback loop is slow so this was really

00:22:21,190 --> 00:22:26,470
about when we were doing our testing and

00:22:23,559 --> 00:22:28,330
development feedback against AWS how

00:22:26,470 --> 00:22:32,170
many people here have worked directly

00:22:28,330 --> 00:22:33,850
with the AWS API all right how many

00:22:32,170 --> 00:22:35,530
people here are happy with its

00:22:33,850 --> 00:22:39,250
performance when provisioning instances

00:22:35,530 --> 00:22:41,590
I once I used to be the director of

00:22:39,250 --> 00:22:42,640
engineering for Engine Yard when I was

00:22:41,590 --> 00:22:44,770
over there

00:22:42,640 --> 00:22:46,090
I have worked there finally maybe two

00:22:44,770 --> 00:22:48,910
years just like that towards the end of

00:22:46,090 --> 00:22:52,630
my tenure I'm not joking an instance

00:22:48,910 --> 00:22:54,280
came back under our account before then

00:22:52,630 --> 00:22:55,840
it had been deleted before I ever got

00:22:54,280 --> 00:22:57,160
there I don't know we looked into who we

00:22:55,840 --> 00:22:58,270
call a database or like what is this we

00:22:57,160 --> 00:22:59,650
have an instance that we don't recognize

00:22:58,270 --> 00:23:01,120
and they they looked into the history

00:22:59,650 --> 00:23:02,860
and they're like oh you deleted that

00:23:01,120 --> 00:23:07,540
instance but it didn't the delete didn't

00:23:02,860 --> 00:23:12,190
work so it came back to two years ago

00:23:07,540 --> 00:23:13,960
right exactly durability that's good so

00:23:12,190 --> 00:23:15,400
anyways this has been mitigated mostly

00:23:13,960 --> 00:23:17,770
by Bosh light Bosh light has been a

00:23:15,400 --> 00:23:20,080
godsend for the developers so Bosh light

00:23:17,770 --> 00:23:22,480
if you don't know is basically a vagrant

00:23:20,080 --> 00:23:24,130
VM that's running all of the Bosh

00:23:22,480 --> 00:23:28,360
or sorry all the cloud foundry

00:23:24,130 --> 00:23:30,880
components in containers I believe a

00:23:28,360 --> 00:23:34,210
warden containers right so that's really

00:23:30,880 --> 00:23:37,290
helped out with a feedback loop we're

00:23:34,210 --> 00:23:41,200
building in London alone we are building

00:23:37,290 --> 00:23:44,980
seven different data products and we

00:23:41,200 --> 00:23:47,890
have four pairs so I'm sure you can

00:23:44,980 --> 00:23:51,220
imagine that maintaining seven tracks

00:23:47,890 --> 00:23:55,080
amongst four pairs is a challenge to

00:23:51,220 --> 00:23:57,610
that end we are hiring in London uh-huh

00:23:55,080 --> 00:24:01,450
not just devs with PMS as well because

00:23:57,610 --> 00:24:04,600
I'm also a bottleneck but a lot of it is

00:24:01,450 --> 00:24:06,610
a lot of it is about finding

00:24:04,600 --> 00:24:08,470
commonalities especially in the broker

00:24:06,610 --> 00:24:09,010
code and in the way we deployed these

00:24:08,470 --> 00:24:10,210
services

00:24:09,010 --> 00:24:11,740
and those patterns that were talked

00:24:10,210 --> 00:24:13,450
about earlier if we can find those

00:24:11,740 --> 00:24:14,830
commonalities we end up just stamping

00:24:13,450 --> 00:24:16,990
them out cookie cutter ring em and it

00:24:14,830 --> 00:24:19,600
works really well and of course also

00:24:16,990 --> 00:24:21,580
partnering with those partners like data

00:24:19,600 --> 00:24:23,559
stacks who really understand the

00:24:21,580 --> 00:24:25,630
underlying data technology so they can

00:24:23,559 --> 00:24:27,040
advise us and help us with producing

00:24:25,630 --> 00:24:31,900
something that's turnkey and we'll keep

00:24:27,040 --> 00:24:33,760
running something else is also key is if

00:24:31,900 --> 00:24:34,900
you with so many products you have to

00:24:33,760 --> 00:24:36,220
you have to automate things there's not

00:24:34,900 --> 00:24:38,770
enough hours in the day to do it all so

00:24:36,220 --> 00:24:40,450
we Li heavily on a pipeline we make a

00:24:38,770 --> 00:24:42,130
change and it just goes through and

00:24:40,450 --> 00:24:47,020
eventually yelling we got a big product

00:24:42,130 --> 00:24:48,429
on the other end yeah so speaking of

00:24:47,020 --> 00:24:48,850
that pipeline and products out the other

00:24:48,429 --> 00:24:51,880
end

00:24:48,850 --> 00:24:53,919
I my history is in web development so

00:24:51,880 --> 00:24:57,190
the very concept of having to ship a

00:24:53,919 --> 00:24:59,980
release is and to and it just rubbed you

00:24:57,190 --> 00:25:02,140
the wrong way but this is the reality of

00:24:59,980 --> 00:25:04,419
on-premise solutions so we do have

00:25:02,140 --> 00:25:05,950
shrink wrap schedules now pivotal is a

00:25:04,419 --> 00:25:07,570
very agile organization so it's not

00:25:05,950 --> 00:25:09,820
nearly as bad as you might imagine it's

00:25:07,570 --> 00:25:11,410
simply that every so often we say well

00:25:09,820 --> 00:25:13,270
here's the features we've got and let's

00:25:11,410 --> 00:25:15,940
wrap them up and stamp a version number

00:25:13,270 --> 00:25:17,980
on it right that being said we still

00:25:15,940 --> 00:25:20,140
have to worry about migration paths for

00:25:17,980 --> 00:25:22,059
users right we can't make major changes

00:25:20,140 --> 00:25:23,350
without thinking okay what's gonna

00:25:22,059 --> 00:25:26,230
happen if the user tries to get from

00:25:23,350 --> 00:25:30,040
point A to point C right so there's some

00:25:26,230 --> 00:25:34,830
challenges in there so it's a

00:25:30,040 --> 00:25:37,390
challenging problem that we face but

00:25:34,830 --> 00:25:39,220
it's very important to us we believe

00:25:37,390 --> 00:25:42,549
very firmly that services are the key

00:25:39,220 --> 00:25:44,040
for the success of pivotal CF especially

00:25:42,549 --> 00:25:48,299
with the latest containerization

00:25:44,040 --> 00:25:51,490
products the public perception is that

00:25:48,299 --> 00:25:53,380
platforms are becoming almost a

00:25:51,490 --> 00:25:55,750
commodity I have a feeling especially

00:25:53,380 --> 00:25:58,120
with the big docker movement that soon

00:25:55,750 --> 00:25:59,380
people will realize that simply having a

00:25:58,120 --> 00:26:02,230
container is not nearly the same as

00:25:59,380 --> 00:26:04,090
having a platform but the most important

00:26:02,230 --> 00:26:05,530
aspect of a platform is the data

00:26:04,090 --> 00:26:08,320
services that you can provide underneath

00:26:05,530 --> 00:26:10,809
again it's about enabling agility so

00:26:08,320 --> 00:26:12,549
that your developers when they when they

00:26:10,809 --> 00:26:13,809
want to try something out all they have

00:26:12,549 --> 00:26:15,460
to do is click on it and now they're

00:26:13,809 --> 00:26:17,559
good to go that kind of thing has never

00:26:15,460 --> 00:26:18,790
existed before and if it happened when I

00:26:17,559 --> 00:26:21,700
was a developer I would have had a much

00:26:18,790 --> 00:26:22,540
different career but this is the most

00:26:21,700 --> 00:26:23,830
important thing to

00:26:22,540 --> 00:26:27,850
so it's something that we're putting so

00:26:23,830 --> 00:26:29,470
much thought and so much energy into and

00:26:27,850 --> 00:26:30,850
again I wanted to make sure this

00:26:29,470 --> 00:26:33,520
happened quick so you guys can get your

00:26:30,850 --> 00:26:38,560
break I don't know if we have time for

00:26:33,520 --> 00:26:40,750
crack questions anyone yell it out we

00:26:38,560 --> 00:26:41,860
also want to thank fog credo who is in

00:26:40,750 --> 00:26:43,660
London and they've been helping us out

00:26:41,860 --> 00:26:45,040
with the service development

00:26:43,660 --> 00:26:48,250
Cassandra experts on their team

00:26:45,040 --> 00:26:49,960
certainly bashed experts great guys so

00:26:48,250 --> 00:27:04,120
one two three any questions raise your

00:26:49,960 --> 00:27:05,440
hands one question yes all these

00:27:04,120 --> 00:27:09,460
services are geared towards on firm

00:27:05,440 --> 00:27:19,510
deployments using PCF are there

00:27:09,460 --> 00:27:21,370
questions that's we're not in charge of

00:27:19,510 --> 00:27:25,060
the API we're in charge of the services

00:27:21,370 --> 00:27:26,410
that's his fault all right I'm gonna

00:27:25,060 --> 00:27:28,990
call it if you guys want to ask us any

00:27:26,410 --> 00:27:30,050
questions you can find us outside thank

00:27:28,990 --> 00:27:32,880
you

00:27:30,050 --> 00:27:36,169
[Applause]

00:27:32,880 --> 00:27:36,169

YouTube URL: https://www.youtube.com/watch?v=wQeY9tqjalk


