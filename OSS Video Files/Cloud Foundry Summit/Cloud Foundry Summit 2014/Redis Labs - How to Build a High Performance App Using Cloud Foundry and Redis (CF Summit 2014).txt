Title: Redis Labs - How to Build a High Performance App Using Cloud Foundry and Redis (CF Summit 2014)
Publication date: 2014-07-24
Playlist: Cloud Foundry Summit 2014
Description: 
	Technical track breakout session presented by Yiftach Shoolman, CTO and Co-Founder, Redis Labs.

Why Redis? Redis is one of the top 3 databases chosen by developers. Redis is the fastest database available today has many attractive data types and commands for powering modern applications. In this session, you will learn:

-Why companies like Twitter, Pinterest, and GitHub rely on Redis as a critical infrastructure component.
-How to leverage Redis for real time analytics, social app functionality, job management, geo-search, and many other use cases.
-How to utilize Cloud Foundry's PaaS offering to build and maintain an infinitely scalable, highly available, top performing, and fully managed Redis database to power your application.
Captions: 
	00:00:00,930 --> 00:00:04,220
[Music]

00:00:07,570 --> 00:00:10,800
[Music]

00:00:17,230 --> 00:01:18,049
so the cloud platform is as you would go

00:01:14,359 --> 00:01:22,670
get flowers as well as over and all

00:01:18,049 --> 00:01:25,459
these other services are you ever

00:01:22,670 --> 00:01:28,429
provide many others by the way we have

00:01:25,459 --> 00:01:31,009
focused only on Redis memcache we've

00:01:28,429 --> 00:01:33,529
only trusted for the pain medication

00:01:31,009 --> 00:01:37,399
goodness so we've used our density on

00:01:33,529 --> 00:01:40,880
the scene which was is so if you make a

00:01:37,399 --> 00:01:43,939
sphere to see what's wrong is - okay our

00:01:40,880 --> 00:01:47,590
open licence will be very soon and today

00:01:43,939 --> 00:01:47,590
we are going to

00:01:49,880 --> 00:01:57,560
oh is it the first things that they do

00:01:55,130 --> 00:02:04,490
in order to previous class today's must

00:01:57,560 --> 00:02:06,619
be good if we fix the minute so I'll

00:02:04,490 --> 00:02:11,810
give you some stories about ready see

00:02:06,619 --> 00:02:16,430
who uses the whiteness yeah I have the

00:02:11,810 --> 00:02:18,110
manifest that you showed me okay where

00:02:16,430 --> 00:02:20,300
this is the newest database newest

00:02:18,110 --> 00:02:22,489
newest no secret that means everything

00:02:20,300 --> 00:02:24,110
is self from rah is faster than any

00:02:22,489 --> 00:02:27,650
other database will show you much more

00:02:24,110 --> 00:02:33,380
very soon it's among the three top

00:02:27,650 --> 00:02:37,550
twisted database this is the key value

00:02:33,380 --> 00:02:40,030
but the value is not just alone you can

00:02:37,550 --> 00:02:44,450
use many titles value such as ashes

00:02:40,030 --> 00:02:47,900
strings these sorted sets and guitars

00:02:44,450 --> 00:02:51,080
something like 150 commands you can also

00:02:47,900 --> 00:02:53,060
create your own commands so it's very

00:02:51,080 --> 00:02:59,709
very attractive because its own use

00:02:53,060 --> 00:02:59,709
cases dynamic community in very logics

00:03:00,310 --> 00:03:04,670
these are the main reason why people are

00:03:02,780 --> 00:03:07,549
using Venice today when you create a new

00:03:04,670 --> 00:03:09,769
application you have to have hundred

00:03:07,549 --> 00:03:11,780
millisecond

00:03:09,769 --> 00:03:14,379
if you cut the little claim is your

00:03:11,780 --> 00:03:18,500
averages is 50 millisecond latency you

00:03:14,379 --> 00:03:21,110
left with only 50 millisecond to process

00:03:18,500 --> 00:03:22,519
the request of your and you need to

00:03:21,110 --> 00:03:24,799
access with people that will be better

00:03:22,519 --> 00:03:28,849
place so in order to do that you must

00:03:24,799 --> 00:03:34,629
have a database processing mystically

00:03:28,849 --> 00:03:38,200
this there is only one database ladies

00:03:34,629 --> 00:03:42,109
this is a vengeance of you be opening WS

00:03:38,200 --> 00:03:45,349
simple key bodies to simple request at

00:03:42,109 --> 00:03:47,690
the button of course my sequel 92 waste

00:03:45,349 --> 00:03:50,840
per second over hundred millisecond

00:03:47,690 --> 00:03:52,519
latency Z comes all the other know

00:03:50,840 --> 00:03:55,159
sequence that the resistant opus

00:03:52,519 --> 00:03:59,209
Cassandra with 12,000 meters per seconds

00:03:55,159 --> 00:04:02,510
about 50 millisecond latency then on the

00:03:59,209 --> 00:04:06,200
relational database data in memory which

00:04:02,510 --> 00:04:09,500
is only be hemisphere Hana and many

00:04:06,200 --> 00:04:13,669
others it is about 20k requests per

00:04:09,500 --> 00:04:16,310
second between 10 and 15 we second if

00:04:13,669 --> 00:04:20,180
you see the Couchbase implementations

00:04:16,310 --> 00:04:23,060
memcache is about 45 operations per

00:04:20,180 --> 00:04:25,460
seconds for the 5k operations per second

00:04:23,060 --> 00:04:28,849
per second in the same focus nutrition

00:04:25,460 --> 00:04:31,250
that is suddenly suddenly this is second

00:04:28,849 --> 00:04:34,220
vacancy anything came requests per

00:04:31,250 --> 00:04:36,169
second and if you pipeline ladies by

00:04:34,220 --> 00:04:38,780
blood means that he was sending requests

00:04:36,169 --> 00:04:41,840
without waiting to the response and then

00:04:38,780 --> 00:04:45,400
under a person in a batch and the

00:04:41,840 --> 00:04:46,790
release has less Kazakh switches you get

00:04:45,400 --> 00:04:52,820
00:04:46,790 --> 00:04:56,510
it means these are the verticals that we

00:04:52,820 --> 00:04:59,990
see so she loves one another as new

00:04:56,510 --> 00:05:02,830
gaming finances services but sell so

00:04:59,990 --> 00:05:05,450
many of those these are the major one

00:05:02,830 --> 00:05:08,180
these are the use cases most of our

00:05:05,450 --> 00:05:12,860
users are using it timelines followers

00:05:08,180 --> 00:05:15,380
Keshi just messaging usage you the

00:05:12,860 --> 00:05:18,110
board's job management analytics and

00:05:15,380 --> 00:05:22,280
many hundreds just to show you a few

00:05:18,110 --> 00:05:25,990
notable use cases of red this pointed

00:05:22,280 --> 00:05:29,860
users release for every single timeline

00:05:25,990 --> 00:05:33,830
there are multi terabyte in memories

00:05:29,860 --> 00:05:36,590
300,000 read the Christmas second five

00:05:33,830 --> 00:05:42,130
thousand multiplied by N and M is the

00:05:36,590 --> 00:05:47,020
number of followers can write specific

00:05:42,130 --> 00:05:51,140
with the Chinese use many scholars

00:05:47,020 --> 00:05:54,380
counting the worst cash in top 10 last

00:05:51,140 --> 00:05:58,160
indexes have over 20 terabyte in memory

00:05:54,380 --> 00:06:01,730
six million weeks per second 600,000

00:05:58,160 --> 00:06:06,430
rights to see pictures with Nabisco

00:06:01,730 --> 00:06:09,470
project rough herr neusel and boil more

00:06:06,430 --> 00:06:12,650
stock overflow losses release for free

00:06:09,470 --> 00:06:17,660
level of catch local cache site cash

00:06:12,650 --> 00:06:21,970
globally github user this too much use

00:06:17,660 --> 00:06:26,270
the repositories to several names

00:06:21,970 --> 00:06:28,880
HipChat to know where user which users

00:06:26,270 --> 00:06:33,980
in which boom this is very interesting

00:06:28,880 --> 00:06:35,050
you pause so uses to know what the users

00:06:33,980 --> 00:06:37,769
want to see

00:06:35,050 --> 00:06:42,479
[Laughter]

00:06:37,769 --> 00:06:44,519
snapchat is using Redis for full video

00:06:42,479 --> 00:06:53,829
messages

00:06:44,519 --> 00:06:56,649
five instances so why registers so your

00:06:53,829 --> 00:07:00,009
service choose us because we provide

00:06:56,649 --> 00:07:02,409
infinite seamless inventories as you

00:07:00,009 --> 00:07:09,299
probably know the open source is limited

00:07:02,409 --> 00:07:12,399
basic business yes there is a better way

00:07:09,299 --> 00:07:14,679
but it still limited once the Redis

00:07:12,399 --> 00:07:16,509
cluster will be available you won't be

00:07:14,679 --> 00:07:19,619
able to do all the commands across all

00:07:16,509 --> 00:07:22,959
shots this is something that our system

00:07:19,619 --> 00:07:26,259
second series to high availability we

00:07:22,959 --> 00:07:28,479
provide in memory replication inside and

00:07:26,259 --> 00:07:31,899
across data center and very stern across

00:07:28,479 --> 00:07:35,979
regions the choice is that over the last

00:07:31,899 --> 00:07:41,649
two years we managed to survive over 100

00:07:35,979 --> 00:07:44,829
not very advanced five or six total

00:07:41,649 --> 00:07:48,479
outages of data centers without losing a

00:07:44,829 --> 00:07:51,189
single byte offensively is actually

00:07:48,479 --> 00:07:54,399
stable to performance as you have seen

00:07:51,189 --> 00:07:57,909
where this is very fast but the other is

00:07:54,399 --> 00:08:01,059
very sensitive to virtually by over the

00:07:57,909 --> 00:08:02,979
cloud environments so we managed to

00:08:01,059 --> 00:08:05,679
overcome this and we managed to overcome

00:08:02,979 --> 00:08:08,469
a noisy neighbor friend phenomena in

00:08:05,679 --> 00:08:10,659
weak instances and able to migrate your

00:08:08,469 --> 00:08:13,539
shard of course instances what if you

00:08:10,659 --> 00:08:16,979
wrote last but not least once you

00:08:13,539 --> 00:08:19,989
created a resistance on our service

00:08:16,979 --> 00:08:22,029
everything is transparent we do have a

00:08:19,989 --> 00:08:23,199
single endpoint you don't need to deal

00:08:22,029 --> 00:08:25,870
with clusters

00:08:23,199 --> 00:08:29,170
nodes

00:08:25,870 --> 00:08:32,860
system just work look at the metrics and

00:08:29,170 --> 00:08:34,990
make sure everything works good we

00:08:32,860 --> 00:08:38,200
listed over 20 men years in this

00:08:34,990 --> 00:08:42,190
technology we are 15 expertise expand

00:08:38,200 --> 00:08:46,000
our team and this is in a nutshell what

00:08:42,190 --> 00:09:15,640
you do so before starting the demo let

00:08:46,000 --> 00:09:17,230
me explain you what I did before so

00:09:15,640 --> 00:09:21,820
let's take questions but first let me

00:09:17,230 --> 00:09:23,290
let me explain you our cluster works we

00:09:21,820 --> 00:09:27,180
first create zones

00:09:23,290 --> 00:09:31,180
these are unrelated to the Redis and

00:09:27,180 --> 00:09:34,600
then you can create as many greatest as

00:09:31,180 --> 00:09:40,120
one over this one in these nodes you can

00:09:34,600 --> 00:09:44,470
create a single application and if you

00:09:40,120 --> 00:09:47,710
create boundaries the truth is that on

00:09:44,470 --> 00:09:50,970
our service we can manage over 200

00:09:47,710 --> 00:09:53,970
charts on a single node without

00:09:50,970 --> 00:09:53,970
performance

00:09:54,510 --> 00:10:00,899
just my good shots between hood or I'll

00:09:57,930 --> 00:10:05,790
enjoy it if needed but you can truly do

00:10:00,899 --> 00:10:07,980
an over provision so just create at

00:10:05,790 --> 00:10:11,310
least three nodes because we want more

00:10:07,980 --> 00:10:13,769
and then you use the prepaid as many as

00:10:11,310 --> 00:10:20,100
databases you want and if you reach the

00:10:13,769 --> 00:10:25,880
sub position to get an abyss so where we

00:10:20,100 --> 00:10:25,880
are any questions so far

00:10:29,029 --> 00:10:32,029
yeah

00:10:35,330 --> 00:10:52,580
just what is the name your uncle does

00:10:40,080 --> 00:10:52,580
everything I forgot that was coverings

00:10:55,070 --> 00:11:02,160
so they're going to your space this is

00:10:59,970 --> 00:11:06,300
the puzzle that they're going to release

00:11:02,160 --> 00:11:11,070
as part of their infrastructure and

00:11:06,300 --> 00:11:13,410
maybe selfies with stuff so knows and

00:11:11,070 --> 00:11:15,800
the other question is for the demo we'll

00:11:13,410 --> 00:11:15,800
start

00:11:23,340 --> 00:11:31,350
okay so the way it works as I mentioned

00:11:27,810 --> 00:11:34,210
we are approximate Apollo already

00:11:31,350 --> 00:11:36,700
services so once you deploy pilatus we

00:11:34,210 --> 00:11:39,310
start with a single shot was start

00:11:36,700 --> 00:11:42,340
growing weary shall get in the Allison

00:11:39,310 --> 00:11:43,750
because you are accessing to a proxy you

00:11:42,340 --> 00:11:48,550
don't see what happens

00:11:43,750 --> 00:11:51,640
the Edison okay our proxy makes users on

00:11:48,550 --> 00:11:54,450
the request go to be right shots and you

00:11:51,640 --> 00:11:58,300
can use a regular school to configure it

00:11:54,450 --> 00:12:01,180
or whatever we wanted to make sure that

00:11:58,300 --> 00:12:03,520
the keys that are going to be processed

00:12:01,180 --> 00:12:11,230
to kill them I'm going to get the same

00:12:03,520 --> 00:12:14,880
shot okay so this is the way it works so

00:12:11,230 --> 00:12:14,880
the last one is stopping now

00:12:20,649 --> 00:12:29,059
okay syriza you're you know there is a

00:12:24,290 --> 00:12:35,049
huge pot wash 100 it's finished

00:12:29,059 --> 00:12:35,049
and as you can see bush yes

00:12:35,480 --> 00:12:44,059
so it's a three notes cluster here but I

00:12:40,189 --> 00:12:48,350
just created this is a micro Porsche

00:12:44,059 --> 00:12:50,649
environment again we always on number of

00:12:48,350 --> 00:12:50,649
roads

00:13:08,940 --> 00:13:16,480
okay so we can still out once the

00:13:13,870 --> 00:13:23,200
clusters period you are big wine that is

00:13:16,480 --> 00:13:27,279
not working with you can see the freedom

00:13:23,200 --> 00:13:43,240
faster and then as the 90 miniature you

00:13:27,279 --> 00:13:48,959
go and create the same here this is

00:13:43,240 --> 00:13:57,279
going to be one keep and it's got it see

00:13:48,959 --> 00:14:01,589
Sammy then say okay now let's send the

00:13:57,279 --> 00:14:01,589
addition of a broker

00:14:09,640 --> 00:14:16,010
by the way this UI is for the IT manager

00:14:12,980 --> 00:14:18,830
is not what the users okay using us

00:14:16,010 --> 00:14:23,530
another you exit that we're showing few

00:14:18,830 --> 00:14:23,530
minutes once created

00:14:41,290 --> 00:14:54,970
and creating the common trope and let's

00:14:48,130 --> 00:14:58,230
make our Flint public so if you're not a

00:14:54,970 --> 00:14:58,230
member on the USS

00:15:11,100 --> 00:15:16,490
so miss : we'll make the plans that I

00:15:13,380 --> 00:15:16,490
just created earlier

00:15:40,850 --> 00:15:46,309
okay and now what I need to do is to

00:15:44,269 --> 00:15:53,499
look at the marketplace and see the

00:15:46,309 --> 00:15:58,239
places that created okay you can see it

00:15:53,499 --> 00:15:58,239
now let's create a service which means

00:16:01,209 --> 00:16:10,069
so we need to go back to the database is

00:16:07,220 --> 00:16:13,459
between repenting for one do you have

00:16:10,069 --> 00:16:25,489
any idea why because this is this

00:16:13,459 --> 00:16:29,289
environment runs over later so few more

00:16:25,489 --> 00:16:29,289
seconds this is tiny things

00:16:41,320 --> 00:16:48,750
meanwhile Walden Hindu is - - bye mr.

00:16:46,030 --> 00:16:51,610
the necklace this okay it's active now

00:16:48,750 --> 00:16:54,940
let's my mr. barista service this

00:16:51,610 --> 00:16:58,720
service is called Troy redness so it

00:16:54,940 --> 00:17:01,330
went to an application this called and

00:16:58,720 --> 00:17:07,060
this application in order to do the

00:17:01,330 --> 00:17:10,570
binding to take place okay and meanwhile

00:17:07,060 --> 00:17:12,699
I came on some will be someone isn't

00:17:10,570 --> 00:17:17,800
some requests over this to scale first

00:17:12,699 --> 00:17:20,470
ladies this is what the users see by the

00:17:17,800 --> 00:17:23,530
way as the ninety manager I was able to

00:17:20,470 --> 00:17:24,280
assist own to be using speed this is

00:17:23,530 --> 00:17:27,880
what he sees

00:17:24,280 --> 00:17:30,640
I haven't yet studies and dated meet but

00:17:27,880 --> 00:17:32,790
this is the use of database this is the

00:17:30,640 --> 00:17:32,790
end

00:18:03,419 --> 00:18:07,350
they brought me Network because they did

00:18:05,830 --> 00:18:10,470
not sit at my school

00:18:07,350 --> 00:18:27,610
anyway let's write to run the Detroit

00:18:10,470 --> 00:18:52,919
suffocation simple way this example says

00:18:27,610 --> 00:18:52,919
H works here he this is it

00:18:55,260 --> 00:19:00,400
by the way we are very proud of this

00:18:58,210 --> 00:19:02,350
spring because include very many metrics

00:19:00,400 --> 00:19:04,690
that you need bands that you can look at

00:19:02,350 --> 00:19:06,610
the Redis and you can compare between

00:19:04,690 --> 00:19:08,919
different metrics for instance I would

00:19:06,610 --> 00:19:10,540
like to see the weight per second with

00:19:08,919 --> 00:19:14,280
the right decisions

00:19:10,540 --> 00:19:18,580
ok so these two screen here I can

00:19:14,280 --> 00:19:24,940
compare the used with a memory limit or

00:19:18,580 --> 00:19:26,919
with the number of keys etc etcetera so

00:19:24,940 --> 00:19:29,830
this is it this is how to use ready so

00:19:26,919 --> 00:19:32,460
McLeod from the board and again this is

00:19:29,830 --> 00:19:32,460
what the user sees

00:19:35,879 --> 00:19:42,229
you a human Dennis Lieberman if you have

00:19:39,629 --> 00:19:42,229
a question

00:19:43,090 --> 00:19:50,739
[Applause]

00:19:47,450 --> 00:19:50,739

YouTube URL: https://www.youtube.com/watch?v=MHykb5tOOLw


