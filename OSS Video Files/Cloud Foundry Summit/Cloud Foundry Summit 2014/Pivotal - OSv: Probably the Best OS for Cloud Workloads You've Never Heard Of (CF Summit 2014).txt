Title: Pivotal - OSv: Probably the Best OS for Cloud Workloads You've Never Heard Of (CF Summit 2014)
Publication date: 2014-07-22
Playlist: Cloud Foundry Summit 2014
Description: 
	Technical track breakout session presented by Roman Shaposhnik, Sr. Manager of Hadoop at Pivotal. 

OSv is the revolutionary new open source technology that combines the power of virtualization and micro-services architecture. This combination allows unmodified applications deployed in a virtualized environment to outperform bare-metal deployments. Yes. You've heard it right: for the first time ever we can stop asking the question of how much performance would I lose if I virtualize. OSv lets you ask a different question: how much would my application gain in performance if I virtualize it. This talk will start by looking into the architecture of OSv and the kind of optimizations it makes possible for native, unmodified applications. We will then focus on JVM-specific optimizations and specifically on speedups available to big data management distributed applications. Finally, we will look into the relationship between OSv and Docker and how that layering can help make OSv a secret sauce for turbo-charging Cloud Foundry application deployments.
Captions: 
	00:00:00,930 --> 00:00:04,220
[Music]

00:00:08,240 --> 00:00:12,000
Soho thanks for coming to this

00:00:10,830 --> 00:00:16,500
presentation

00:00:12,000 --> 00:00:18,300
my name is Roman today I will be talking

00:00:16,500 --> 00:00:22,070
to you about you know about two things

00:00:18,300 --> 00:00:25,470
all of their lives of every month where

00:00:22,070 --> 00:00:28,050
but most of them are pretty low level it

00:00:25,470 --> 00:00:29,670
is in fact I talk about probably in

00:00:28,050 --> 00:00:32,430
making something like polymer is go

00:00:29,670 --> 00:00:36,440
slowly how do we use the tentacles so

00:00:32,430 --> 00:00:38,430
this is a plumbing solution to my

00:00:36,440 --> 00:00:40,290
qualifications channel before actually

00:00:38,430 --> 00:00:41,790
beginning will consist of having a

00:00:40,290 --> 00:00:43,829
single passion delivers Colonel Boyd

00:00:41,790 --> 00:00:46,079
immuno hailing from the plan my pivot is

00:00:43,829 --> 00:00:51,030
my fully prepared to discuss any kind of

00:00:46,079 --> 00:00:53,539
operating system controls so what we all

00:00:51,030 --> 00:00:53,539
love that

00:00:57,530 --> 00:01:05,399
well I think they said this is the kind

00:00:59,820 --> 00:01:07,470
of highway but seriously I mean if you

00:01:05,399 --> 00:01:09,210
think about the houses also precisely

00:01:07,470 --> 00:01:11,939
because it lets us more worried about

00:01:09,210 --> 00:01:13,830
the mattress country instead of you know

00:01:11,939 --> 00:01:15,689
trying to figure out you know what needs

00:01:13,830 --> 00:01:17,369
to be starting with my data center area

00:01:15,689 --> 00:01:18,899
you know probably need to configure a

00:01:17,369 --> 00:01:20,610
bunch of things you know what wanted

00:01:18,899 --> 00:01:23,340
recipes do I need to use well I do is

00:01:20,610 --> 00:01:25,500
just you know see a brochure and so yeah

00:01:23,340 --> 00:01:32,549
make sure that the whole bunch of things

00:01:25,500 --> 00:01:36,289
happen behind the scenes you know right

00:01:32,549 --> 00:01:38,880
you know what I know is that my movie

00:01:36,289 --> 00:01:42,600
can talk to these machines and the right

00:01:38,880 --> 00:01:44,899
things happen but what is directly well

00:01:42,600 --> 00:01:47,759
the right thing is you know application

00:01:44,899 --> 00:01:50,369
application you get less than on to a

00:01:47,759 --> 00:01:52,380
datacenter they get instantiated and

00:01:50,369 --> 00:01:53,909
they start coordinating with each other

00:01:52,380 --> 00:01:56,280
and you know some kind of a useful

00:01:53,909 --> 00:01:57,479
service emergency and this one well

00:01:56,280 --> 00:02:00,630
agree with the others matters with

00:01:57,479 --> 00:02:02,000
humongous they list services but what

00:02:00,630 --> 00:02:05,910
about this big one

00:02:02,000 --> 00:02:09,269
so I also come from the backgrounds of

00:02:05,910 --> 00:02:11,879
big data managers you know solar system

00:02:09,269 --> 00:02:15,360
community and the way reduce they pool

00:02:11,879 --> 00:02:19,319
in that ecosystem is basically we have

00:02:15,360 --> 00:02:22,379
friend that stayed away so it is very

00:02:19,319 --> 00:02:25,769
similar to what we all use with boundary

00:02:22,379 --> 00:02:27,120
but within one interesting aspect so at

00:02:25,769 --> 00:02:28,849
the very bottom of everything whatever

00:02:27,120 --> 00:02:31,709
days you know State for management

00:02:28,849 --> 00:02:34,500
substrate for HDFS which is actually

00:02:31,709 --> 00:02:36,510
consisting of individual services you

00:02:34,500 --> 00:02:38,730
know providing storage capabilities to

00:02:36,510 --> 00:02:40,170
the substrate and by the way this

00:02:38,730 --> 00:02:42,750
services actually happen

00:02:40,170 --> 00:02:44,970
big ones so this is an example of

00:02:42,750 --> 00:02:46,319
priming something like HP HP HP not for

00:02:44,970 --> 00:02:47,880
those of you not familiar with business

00:02:46,319 --> 00:02:49,430
you know you can think of it as MongoDB

00:02:47,880 --> 00:02:51,569
in the weaker system

00:02:49,430 --> 00:02:54,030
HBase would run on the typical data

00:02:51,569 --> 00:02:56,550
center is sort of similar to how a CF

00:02:54,030 --> 00:02:59,220
Bush would you know result in whole

00:02:56,550 --> 00:03:00,900
bunch of activity in the data center but

00:02:59,220 --> 00:03:02,790
they are the difference being the

00:03:00,900 --> 00:03:04,410
services that I'm running on every

00:03:02,790 --> 00:03:06,330
single level are essentially the

00:03:04,410 --> 00:03:07,800
servicing doing two things so first of

00:03:06,330 --> 00:03:10,230
all there is a service in abstraction

00:03:07,800 --> 00:03:12,390
way directed edge storage and making it

00:03:10,230 --> 00:03:15,060
part of this whole substrate rates you

00:03:12,390 --> 00:03:17,670
know HDFS but then there is also a

00:03:15,060 --> 00:03:19,260
service that takes things that now

00:03:17,670 --> 00:03:23,790
reside in that substrate called

00:03:19,260 --> 00:03:26,340
individual regions for HBase and you

00:03:23,790 --> 00:03:28,560
know serve them up so what happens to

00:03:26,340 --> 00:03:30,180
the you know one of the notes of it well

00:03:28,560 --> 00:03:32,370
if one 10 ounce feel that the

00:03:30,180 --> 00:03:33,989
coordination service that also happens

00:03:32,370 --> 00:03:36,269
to run the same distance the basically

00:03:33,989 --> 00:03:38,250
it detects that the note has failed

00:03:36,269 --> 00:03:40,830
rebalance in the whole cluster and by

00:03:38,250 --> 00:03:42,930
the way because HDFS is fully replicated

00:03:40,830 --> 00:03:45,239
we're not actually losing any data and

00:03:42,930 --> 00:03:47,070
by the way all these little blocks of

00:03:45,239 --> 00:03:49,019
regions that we need to swarm are they

00:03:47,070 --> 00:03:52,019
still in HDFS so the only thing that we

00:03:49,019 --> 00:03:55,620
need to do is we balance what service is

00:03:52,019 --> 00:03:58,980
now serving mana and if the know we

00:03:55,620 --> 00:04:01,769
haven't spoken back in an interesting

00:03:58,980 --> 00:04:04,770
bit of HDFS magic happens that works you

00:04:01,769 --> 00:04:07,230
really lose the disk

00:04:04,770 --> 00:04:08,940
straight so bits will be blasted onto

00:04:07,230 --> 00:04:11,160
that disk in the replication will give

00:04:08,940 --> 00:04:12,810
you but from a standpoint of the

00:04:11,160 --> 00:04:15,150
services again the service basically

00:04:12,810 --> 00:04:16,920
comes up it has tech orientation service

00:04:15,150 --> 00:04:19,350
whatever what they need to do give me

00:04:16,920 --> 00:04:25,710
some work and starts doing that work so

00:04:19,350 --> 00:04:28,970
this to me is both CF push and services

00:04:25,710 --> 00:04:31,470
and I'm actually pull this the

00:04:28,970 --> 00:04:32,760
microscope uses based deployments so

00:04:31,470 --> 00:04:34,140
people talking about micro services

00:04:32,760 --> 00:04:35,880
whether it is whether it is to me this

00:04:34,140 --> 00:04:37,760
is what it is so we have a bunch of

00:04:35,880 --> 00:04:39,540
things that have lasted only two

00:04:37,760 --> 00:04:41,610
individual homes in your datacenter

00:04:39,540 --> 00:04:43,200
those things happen to be received and

00:04:41,610 --> 00:04:45,060
in a sense that if you can walk the

00:04:43,200 --> 00:04:46,260
whole system doesn't go down and in fact

00:04:45,060 --> 00:04:48,180
if you listen to some of the Netflix

00:04:46,260 --> 00:04:49,620
presentations they actually do that in

00:04:48,180 --> 00:04:51,390
their production data centers so they

00:04:49,620 --> 00:04:53,520
get chaos monkey just wrap them to

00:04:51,390 --> 00:04:55,770
killing their services to make sure that

00:04:53,520 --> 00:04:57,270
you know if their hardware failure

00:04:55,770 --> 00:04:59,160
happens you know their system still

00:04:57,270 --> 00:05:00,990
keeps operating so these to me is the

00:04:59,160 --> 00:05:03,980
definition of micro service doesn't

00:05:00,990 --> 00:05:03,980
matter what everybody else is saying

00:05:06,260 --> 00:05:10,440
would something like this right so

00:05:08,940 --> 00:05:12,840
obviously there is a whole bunch of

00:05:10,440 --> 00:05:15,000
magic orchestration magic that happens

00:05:12,840 --> 00:05:16,530
to make sure that these individuals

00:05:15,000 --> 00:05:19,800
business or functionality get blessed

00:05:16,530 --> 00:05:22,470
among the nodes in the mixer so that is

00:05:19,800 --> 00:05:24,180
the bit that we will not be so there's a

00:05:22,470 --> 00:05:26,400
whole lot of interesting stuff happening

00:05:24,180 --> 00:05:28,080
in the orchestration web but yet they

00:05:26,400 --> 00:05:30,330
are like today what I'm interested in is

00:05:28,080 --> 00:05:31,650
once the rubber hits the road once there

00:05:30,330 --> 00:05:34,170
is something that needs to be executed

00:05:31,650 --> 00:05:37,260
on each individual know what happens

00:05:34,170 --> 00:05:38,400
then so let's zoom in right you know

00:05:37,260 --> 00:05:41,690
let's take

00:05:38,400 --> 00:05:43,710
and try to figure out how to best

00:05:41,690 --> 00:05:46,290
execute a particular bit of

00:05:43,710 --> 00:05:48,030
functionality of the individual so what

00:05:46,290 --> 00:05:54,540
is the matter vehicle to my groceries

00:05:48,030 --> 00:05:58,440
well service we manage looks something

00:05:54,540 --> 00:05:59,760
like this so there is obvious this one

00:05:58,440 --> 00:06:02,190
of an application layer with a micro

00:05:59,760 --> 00:06:04,130
service police typically happens to be a

00:06:02,190 --> 00:06:06,300
microscope so maybe it's your childhood

00:06:04,130 --> 00:06:08,250
then there is some kind of virtual

00:06:06,300 --> 00:06:10,530
machine and I don't really mean you know

00:06:08,250 --> 00:06:12,060
necessarily JVM or anything like that it

00:06:10,530 --> 00:06:13,590
can be just a virtual machine that's we

00:06:12,060 --> 00:06:15,210
long interprets you know the code that

00:06:13,590 --> 00:06:16,770
request on to the micro service it could

00:06:15,210 --> 00:06:18,300
be just a configuration or tradition so

00:06:16,770 --> 00:06:19,860
if you have a configuration you know

00:06:18,300 --> 00:06:21,780
subsystem think of it as a virtual

00:06:19,860 --> 00:06:24,660
machine then there's a whole bunch of

00:06:21,780 --> 00:06:26,340
stuff and then there's hardware so let's

00:06:24,660 --> 00:06:27,900
take a look at what this stuff is well

00:06:26,340 --> 00:06:31,440
this stuff is actually very annoying so

00:06:27,900 --> 00:06:33,060
what this stuff is it's what we need for

00:06:31,440 --> 00:06:35,010
the virtual machine to connect back to

00:06:33,060 --> 00:06:36,750
the bare metal because it just so

00:06:35,010 --> 00:06:38,100
happens that we've been conditioned the

00:06:36,750 --> 00:06:40,169
you know you can't feel the route of

00:06:38,100 --> 00:06:43,830
attribution there matter and it's pretty

00:06:40,169 --> 00:06:46,260
much impossible so we have to some kind

00:06:43,830 --> 00:06:48,330
of workaround in the Linux kernel we can

00:06:46,260 --> 00:06:51,740
have to basically manage a whole bunch

00:06:48,330 --> 00:06:56,070
of packages in the West image because

00:06:51,740 --> 00:06:58,460
dependencies carefully we have to use

00:06:56,070 --> 00:07:01,020
something like popular staff or maybe

00:06:58,460 --> 00:07:04,680
you know some of the traditional to

00:07:01,020 --> 00:07:06,510
actually manage those images and finally

00:07:04,680 --> 00:07:08,010
we come up with this huge be an image

00:07:06,510 --> 00:07:09,599
that is actually pretty involved here so

00:07:08,010 --> 00:07:12,870
it's really difficult to lug it around

00:07:09,599 --> 00:07:15,750
the datacenter and the question that I

00:07:12,870 --> 00:07:19,349
ask is like is there a better way so to

00:07:15,750 --> 00:07:21,060
me this is actually a way better way if

00:07:19,349 --> 00:07:23,280
any of you in these points are just

00:07:21,060 --> 00:07:25,260
coming from another exciting conference

00:07:23,280 --> 00:07:28,199
called docker Kong hold your thought I

00:07:25,260 --> 00:07:30,539
have a slide to talk about what near and

00:07:28,199 --> 00:07:31,500
dear to you you know what I'm talking

00:07:30,539 --> 00:07:34,590
about there's actually a lot more

00:07:31,500 --> 00:07:36,120
although it looks quite a bit later so

00:07:34,590 --> 00:07:38,760
what I'm talking about here it is that

00:07:36,120 --> 00:07:40,470
well why don't we actually reduce the

00:07:38,760 --> 00:07:42,990
amount of stuff that we have to

00:07:40,470 --> 00:07:44,910
the nature to a parameter so what could

00:07:42,990 --> 00:07:46,650
be there Berman well ultimately what I

00:07:44,910 --> 00:07:54,990
really want to do is I don't for not

00:07:46,650 --> 00:07:56,700
changing my Vera we have a hospice right

00:07:54,990 --> 00:07:58,440
so why don't we then use virtualization

00:07:56,700 --> 00:08:01,440
techniques to actually accomplish that

00:07:58,440 --> 00:08:03,060
but in a guest sort of VM page so it's

00:08:01,440 --> 00:08:05,220
not only using the language or you know

00:08:03,060 --> 00:08:07,170
container that there's a full-fledged

00:08:05,220 --> 00:08:09,450
operating system shares for a single

00:08:07,170 --> 00:08:12,690
purpose of writing JVM why not create

00:08:09,450 --> 00:08:16,410
just enough you know blue to tie GBM

00:08:12,690 --> 00:08:17,880
back to the convert is a good analogy is

00:08:16,410 --> 00:08:18,360
like well that will be like deep sea

00:08:17,880 --> 00:08:21,750
forever

00:08:18,360 --> 00:08:23,400
that is exactly what it is so hardware

00:08:21,750 --> 00:08:25,170
then you have something with hardware

00:08:23,400 --> 00:08:27,660
virtualization assistance you know

00:08:25,170 --> 00:08:30,240
solution being same KVM vehicle

00:08:27,660 --> 00:08:31,800
VirtualBox you name it then you have

00:08:30,240 --> 00:08:33,539
utilize hardware that is essentially

00:08:31,800 --> 00:08:35,729
given to the image to the entire image

00:08:33,539 --> 00:08:39,330
on your application and then your

00:08:35,729 --> 00:08:41,550
application right now is there any

00:08:39,330 --> 00:08:42,450
problem with that we will actually try

00:08:41,550 --> 00:08:44,940
to figure that out

00:08:42,450 --> 00:08:46,830
but before we do let me give you a

00:08:44,940 --> 00:08:49,140
little bit of terminology here that I

00:08:46,830 --> 00:08:51,120
found useful when I was trying to figure

00:08:49,140 --> 00:08:54,000
out what this by the way this stuff is

00:08:51,120 --> 00:08:55,980
pretty recent in the sense that I kind

00:08:54,000 --> 00:08:58,350
of gave up on operating system design

00:08:55,980 --> 00:08:59,790
operating system research after all pipe

00:08:58,350 --> 00:09:01,140
you know things to declare their

00:08:59,790 --> 00:09:02,580
operating system researching system

00:09:01,140 --> 00:09:04,230
research in general is irrelevant and

00:09:02,580 --> 00:09:08,640
I'm like here on your end I was like I

00:09:04,230 --> 00:09:09,839
should stop paying attention bunch of

00:09:08,640 --> 00:09:12,210
interesting things have happened

00:09:09,839 --> 00:09:14,670
we actually have nonfluent because my

00:09:12,210 --> 00:09:17,040
professor taught me about micro kernels

00:09:14,670 --> 00:09:19,530
versus monolithic current and that was a

00:09:17,040 --> 00:09:22,530
17-8 you know with Linux like we all

00:09:19,530 --> 00:09:22,819
know who and then just so happens the

00:09:22,530 --> 00:09:25,100
five

00:09:22,819 --> 00:09:26,720
yes sir you know forgot some naturally X

00:09:25,100 --> 00:09:27,889
eternal sonata kernels but those though

00:09:26,720 --> 00:09:30,499
those don't matter

00:09:27,889 --> 00:09:32,389
trust me well that's true though is you

00:09:30,499 --> 00:09:34,220
become some immigrants so what are these

00:09:32,389 --> 00:09:36,549
so here he comes

00:09:34,220 --> 00:09:39,679
basically to the best of my knowledge

00:09:36,549 --> 00:09:45,109
can be traced back to the paper that

00:09:39,679 --> 00:09:46,399
came out I believe is M group you know

00:09:45,109 --> 00:09:48,289
roughly speaking so there is a

00:09:46,399 --> 00:09:49,459
University of Cambridge that doesn't

00:09:48,289 --> 00:09:51,379
matter of research and there's like a

00:09:49,459 --> 00:09:54,079
virtual central that just does stuff

00:09:51,379 --> 00:09:56,660
with them so at some point you know they

00:09:54,079 --> 00:09:58,459
did this interesting paper of Miraj yes

00:09:56,660 --> 00:10:00,499
that I kindly recommend everybody read

00:09:58,459 --> 00:10:02,539
called unicorns library operating

00:10:00,499 --> 00:10:04,729
systems for the club it came out in 2013

00:10:02,539 --> 00:10:07,069
and to me and actually define sort of

00:10:04,729 --> 00:10:09,769
this space of like wow I didn't know

00:10:07,069 --> 00:10:11,779
there is possible what a basically

00:10:09,769 --> 00:10:13,399
define is a library operating system you

00:10:11,779 --> 00:10:15,859
know a novel concept that instead of

00:10:13,399 --> 00:10:18,889
using a kernel that multiplexes between

00:10:15,859 --> 00:10:22,819
different processes basically serving as

00:10:18,889 --> 00:10:25,429
a arbitrator or hardware resources and

00:10:22,819 --> 00:10:28,579
processes they're like well we actually

00:10:25,429 --> 00:10:30,499
have library that is kind of like a

00:10:28,579 --> 00:10:32,299
kernel but in support of just a single

00:10:30,499 --> 00:10:34,809
application so there's absolutely no of

00:10:32,299 --> 00:10:37,429
multiplexing between you know different

00:10:34,809 --> 00:10:39,319
user space you know processes just a

00:10:37,429 --> 00:10:43,399
single process saying every spaces and

00:10:39,319 --> 00:10:45,829
everything very interesting indeed any

00:10:43,399 --> 00:10:48,949
kernels is another such idea that sort

00:10:45,829 --> 00:10:51,949
of came out roughly at the same time if

00:10:48,949 --> 00:10:53,629
any kernel is not even any kind of a

00:10:51,949 --> 00:10:57,079
tournament it's actually a programming

00:10:53,629 --> 00:10:59,029
discipline it's how you read it if you

00:10:57,079 --> 00:11:01,669
write in a certain way that you can call

00:10:59,029 --> 00:11:04,369
the tournament entry so limit well for

00:11:01,669 --> 00:11:06,639
example to top the very person anything

00:11:04,369 --> 00:11:08,239
it is difficult so the only

00:11:06,639 --> 00:11:10,669
implementation of the native chrome

00:11:08,239 --> 00:11:11,850
today happens to be in that BSD but I

00:11:10,669 --> 00:11:15,569
can't recommend

00:11:11,850 --> 00:11:17,370
this thesis by any country which defines

00:11:15,569 --> 00:11:19,829
how to ride a car especially that you

00:11:17,370 --> 00:11:21,449
can reuse implementations for all the

00:11:19,829 --> 00:11:22,889
bits and pieces that comprise more in

00:11:21,449 --> 00:11:24,990
common so you can extract let's

00:11:22,889 --> 00:11:26,550
anticipate a piston and plug it into an

00:11:24,990 --> 00:11:31,440
application without changing it

00:11:26,550 --> 00:11:34,079
imagining so the bits of the terminology

00:11:31,440 --> 00:11:35,880
setup let's actually look at something

00:11:34,079 --> 00:11:37,769
that is truly exciting because you know

00:11:35,880 --> 00:11:39,779
all the stuff that i've talked about so

00:11:37,769 --> 00:11:41,880
far is research right here it's nice and

00:11:39,779 --> 00:11:44,250
lengthy and you know generates papers

00:11:41,880 --> 00:11:46,380
and ideas you know provide Stingers but

00:11:44,250 --> 00:11:48,779
at the end of the day I am a technology

00:11:46,380 --> 00:11:50,730
so I want to run something and I would

00:11:48,779 --> 00:11:53,130
like that something to be maybe better

00:11:50,730 --> 00:11:54,750
for me so I rather have something that

00:11:53,130 --> 00:11:56,819
people are actually seriously

00:11:54,750 --> 00:12:00,149
considering for product reviews and it

00:11:56,819 --> 00:12:01,500
wasn't until I would say last year that

00:12:00,149 --> 00:12:02,910
I was like whoa there's nothing

00:12:01,500 --> 00:12:04,769
happening in that space that would be

00:12:02,910 --> 00:12:06,410
products is a shuffle these ideas and I

00:12:04,769 --> 00:12:10,199
think it was last year when I first met

00:12:06,410 --> 00:12:12,630
guys behind this project walkways so

00:12:10,199 --> 00:12:14,519
they form a cloud your system and you

00:12:12,630 --> 00:12:16,829
know two of them are present here's the

00:12:14,519 --> 00:12:19,110
door you're sitting right here and Dom

00:12:16,829 --> 00:12:20,970
is sitting right there and if you have

00:12:19,110 --> 00:12:23,089
any questions you know that I depend me

00:12:20,970 --> 00:12:29,519
for they're way better people to answer

00:12:23,089 --> 00:12:31,230
I'll just give you the only but they are

00:12:29,519 --> 00:12:32,910
there you know they are the group that

00:12:31,230 --> 00:12:34,500
is actually standing behind way to me

00:12:32,910 --> 00:12:36,960
and they actually the company the stands

00:12:34,500 --> 00:12:38,490
behind really and that is very different

00:12:36,960 --> 00:12:40,380
the previous attempts of doing something

00:12:38,490 --> 00:12:42,570
like this so let's very quickly look

00:12:40,380 --> 00:12:45,170
into what boys bees and why it's so

00:12:42,570 --> 00:12:48,089
relevant to microservices architecture

00:12:45,170 --> 00:12:50,850
so I'm not sure over the door with a

00:12:48,089 --> 00:12:52,440
green but if I were to explain OSB in a

00:12:50,850 --> 00:12:54,620
single sentence I would actually say

00:12:52,440 --> 00:12:56,970
there's a unique kernel for POSIX like

00:12:54,620 --> 00:12:58,260
applications and then there's the best

00:12:56,970 --> 00:13:01,020
suited for the memory management

00:12:58,260 --> 00:13:04,050
applications I will explain why it makes

00:13:01,020 --> 00:13:06,180
sense at least to me but that's way so

00:13:04,050 --> 00:13:07,920
it it is actually also because some of

00:13:06,180 --> 00:13:09,630
the big data currently features because

00:13:07,920 --> 00:13:11,610
you know if you look into how a suite is

00:13:09,630 --> 00:13:13,350
often implemented and by the way ways V

00:13:11,610 --> 00:13:15,420
is not the derivative is any existing

00:13:13,350 --> 00:13:17,070
kernel so it's not the Linux derivative

00:13:15,420 --> 00:13:20,670
it's not a BS derivative is a written

00:13:17,070 --> 00:13:22,560
from scratch you know bunch of code but

00:13:20,670 --> 00:13:24,570
they also leverage some of the existing

00:13:22,560 --> 00:13:26,520
technology for example ZFS for file

00:13:24,570 --> 00:13:28,770
system management and the way that it

00:13:26,520 --> 00:13:30,450
leverages EMS is internally schleich

00:13:28,770 --> 00:13:32,010
because they don't actually be

00:13:30,450 --> 00:13:33,779
implementing it as you know the way they

00:13:32,010 --> 00:13:35,250
learn it for example Christ they

00:13:33,779 --> 00:13:37,470
actually leverage change from

00:13:35,250 --> 00:13:40,470
opensolaris

00:13:37,470 --> 00:13:42,870
and he's kind of like a cool import that

00:13:40,470 --> 00:13:44,730
is very much any journalism nature so

00:13:42,870 --> 00:13:47,250
they're trying not to get into you know

00:13:44,730 --> 00:13:49,320
like managed ETFs kids themselves so it

00:13:47,250 --> 00:13:50,850
runs on top of KTM 7 virtual box and

00:13:49,320 --> 00:13:53,130
we're in fact is running you know right

00:13:50,850 --> 00:13:55,500
now and will run on my box right here

00:13:53,130 --> 00:13:57,690
and to the cosplayer said looks like

00:13:55,500 --> 00:13:59,700
just a regular application you're given

00:13:57,690 --> 00:14:03,900
a sort of LinkedIn which removes just

00:13:59,700 --> 00:14:12,750
like an application so from the paper

00:14:03,900 --> 00:14:14,070
that's Claudius guys next week so next

00:14:12,750 --> 00:14:16,170
week there is a paper coming out which

00:14:14,070 --> 00:14:17,790
again I highly recommend ok

00:14:16,170 --> 00:14:19,350
but I almost given a preview of a

00:14:17,790 --> 00:14:20,190
neighbor so here's the stuff I stole

00:14:19,350 --> 00:14:23,579
from it

00:14:20,190 --> 00:14:26,250
certain things always be manifested what

00:14:23,579 --> 00:14:28,170
do we want from something like race if

00:14:26,250 --> 00:14:29,639
you only want the surrounding limit

00:14:28,170 --> 00:14:31,259
applications because we really don't

00:14:29,639 --> 00:14:33,899
want developers to we architect their

00:14:31,259 --> 00:14:36,029
applications we actually wanted to run

00:14:33,899 --> 00:14:38,279
faster and this is an amazing to me

00:14:36,029 --> 00:14:39,990
because this is a virtualization

00:14:38,279 --> 00:14:41,220
basically and the typical question you

00:14:39,990 --> 00:14:43,199
asked about virtualization based

00:14:41,220 --> 00:14:45,000
solutions like how much smaller would it

00:14:43,199 --> 00:14:48,660
run this thing actually was faster I

00:14:45,000 --> 00:14:51,089
will explain why so the time essentially

00:14:48,660 --> 00:14:54,000
about the same as exact time so starting

00:14:51,089 --> 00:14:56,040
an IV image would be completely we want

00:14:54,000 --> 00:14:57,540
to just start any TV of energy right you

00:14:56,040 --> 00:14:59,790
know all the same cost

00:14:57,540 --> 00:15:01,230
explore API nice because it gets kind of

00:14:59,790 --> 00:15:02,490
caustics it's a little bit constraint so

00:15:01,230 --> 00:15:03,600
if we can you know we think those

00:15:02,490 --> 00:15:06,779
constraints you know we can get

00:15:03,600 --> 00:15:09,509
additional deforms and stay away so it's

00:15:06,779 --> 00:15:12,389
amazingly a very open open source you

00:15:09,509 --> 00:15:13,980
know community very welcoming one you

00:15:12,389 --> 00:15:15,300
know very actors involved in my onliest

00:15:13,980 --> 00:15:17,699
you know all the development happens

00:15:15,300 --> 00:15:19,560
when you become I could not have been

00:15:17,699 --> 00:15:23,130
here as you know sort of these state of

00:15:19,560 --> 00:15:25,230
the community again I totally my my job

00:15:23,130 --> 00:15:28,709
is a professional presentation you know

00:15:25,230 --> 00:15:29,880
I typically brag about always be is

00:15:28,709 --> 00:15:32,220
actually a really good open source

00:15:29,880 --> 00:15:33,959
project but forget about all of these

00:15:32,220 --> 00:15:36,060
you know that's actually what I say

00:15:33,959 --> 00:15:37,860
so what's inside essentially you get an

00:15:36,060 --> 00:15:40,470
image and that image think of it

00:15:37,860 --> 00:15:42,200
aesthetically team we almost technically

00:15:40,470 --> 00:15:44,240
view on UNIX is right you know

00:15:42,200 --> 00:15:45,200
dynamically getting bits and pieces on

00:15:44,240 --> 00:15:47,390
the file system

00:15:45,200 --> 00:15:49,220
you basically have a link phase take one

00:15:47,390 --> 00:15:50,690
that saying it's a thesis put it into a

00:15:49,220 --> 00:15:52,520
single image and that is now a

00:15:50,690 --> 00:15:54,410
completely independent from anything

00:15:52,520 --> 00:15:56,060
else on your file system image there's

00:15:54,410 --> 00:15:58,670
kind of conceptual around sort of from

00:15:56,060 --> 00:16:00,830
the a Linux kernel something like that

00:15:58,670 --> 00:16:02,630
happening here as well but instead of

00:16:00,830 --> 00:16:04,220
linking and initiate happens to be an

00:16:02,630 --> 00:16:06,770
executable full-text you're actually

00:16:04,220 --> 00:16:08,930
looking at image that happens to be an

00:16:06,770 --> 00:16:10,280
executable for King VM or any kind of

00:16:08,930 --> 00:16:12,860
you know virtualization solution it's a

00:16:10,280 --> 00:16:15,050
full-fledged sort of like 400s kind of

00:16:12,860 --> 00:16:17,480
an image so inside animation

00:16:15,050 --> 00:16:20,240
you're basically NFC cosmos kernel code

00:16:17,480 --> 00:16:22,430
and it's pretty amazing you know what

00:16:20,240 --> 00:16:24,470
boys it doesn't seem possible like if it

00:16:22,430 --> 00:16:26,540
was last week I definitely recommend you

00:16:24,470 --> 00:16:31,220
take a look at it but then they would do

00:16:26,540 --> 00:16:33,140
all everything you know you curl your

00:16:31,220 --> 00:16:35,390
application all of your libraries

00:16:33,140 --> 00:16:37,430
everything since I love is saying every

00:16:35,390 --> 00:16:39,830
space so it's a huge every space think

00:16:37,430 --> 00:16:40,670
of it as a single you know page that

00:16:39,830 --> 00:16:42,350
everything is in there

00:16:40,670 --> 00:16:44,230
right you know and by the way of course

00:16:42,350 --> 00:16:46,250
it means if you do point arithmetic

00:16:44,230 --> 00:16:47,840
incorrectly you can totally kill the

00:16:46,250 --> 00:16:50,000
colonel but it doesn't feel a member

00:16:47,840 --> 00:16:51,890
because you know pearl is per

00:16:50,000 --> 00:16:53,300
application so if you kill the colonel

00:16:51,890 --> 00:16:55,160
what add effectively means is just your

00:16:53,300 --> 00:16:59,330
application for them well that happens

00:16:55,160 --> 00:17:01,960
to an application compactified again for

00:16:59,330 --> 00:17:05,390
managing block storage and from energy

00:17:01,960 --> 00:17:07,730
networking there are layers OCFS

00:17:05,390 --> 00:17:10,579
physical walk anticipate this technician

00:17:07,730 --> 00:17:11,539
didn't get into the details that I

00:17:10,579 --> 00:17:13,609
implemented

00:17:11,539 --> 00:17:15,529
TFS is leverage participate is the

00:17:13,609 --> 00:17:17,119
sentiment from French the actual

00:17:15,529 --> 00:17:18,859
hardware devices from your host

00:17:17,119 --> 00:17:20,419
operating system are being given to the

00:17:18,859 --> 00:17:25,069
guest operating system through the magic

00:17:20,419 --> 00:17:26,539
of rhodium which is pretty deformed so

00:17:25,069 --> 00:17:28,639
it's not like your angulating everything

00:17:26,539 --> 00:17:30,350
you are actually getting quite a bit of

00:17:28,639 --> 00:17:32,359
leverage from the assisted

00:17:30,350 --> 00:17:33,229
virtualization and there is a bunch of

00:17:32,359 --> 00:17:35,269
threads that's it

00:17:33,229 --> 00:17:36,379
just a bunch of some of the kernel

00:17:35,269 --> 00:17:37,580
threads some of them it gives the

00:17:36,379 --> 00:17:40,039
threads there's absolutely no

00:17:37,580 --> 00:17:43,159
distinction between threads is that the

00:17:40,039 --> 00:17:45,109
good thing is you were system fault you

00:17:43,159 --> 00:17:46,879
know the the dreaded system hole that we

00:17:45,109 --> 00:17:48,769
would have been optimizing for now

00:17:46,879 --> 00:17:51,739
becomes a memory there's absolutely no

00:17:48,769 --> 00:17:53,299
cost because in sustain every space in

00:17:51,739 --> 00:17:54,529
there's quite an interesting sort of set

00:17:53,299 --> 00:17:55,970
of optimizations were probably can

00:17:54,529 --> 00:17:59,200
leverage some of the user space threats

00:17:55,970 --> 00:18:02,690
to do typically a sort of kernel level

00:17:59,200 --> 00:18:04,729
you know work but that's that's

00:18:02,690 --> 00:18:06,759
essentially what you give them when you

00:18:04,729 --> 00:18:09,799
compile and Link and voice we change

00:18:06,759 --> 00:18:12,499
then we give that image to QM or you

00:18:09,799 --> 00:18:15,080
know Suzanne so thingy having shift

00:18:12,499 --> 00:18:17,090
schedules with on your CPU and at that

00:18:15,080 --> 00:18:18,889
point that image has full access to all

00:18:17,090 --> 00:18:19,549
of the CPU capabilities and that's

00:18:18,889 --> 00:18:21,679
actually pretty good

00:18:19,549 --> 00:18:23,989
you know quite powerful because at that

00:18:21,679 --> 00:18:26,149
point it can use anything that the CPU

00:18:23,989 --> 00:18:27,739
has without any regard of whether they

00:18:26,149 --> 00:18:30,229
divorced the kernel space or a user

00:18:27,739 --> 00:18:31,460
space so let's say mmm you so mu is

00:18:30,229 --> 00:18:33,080
typically reserved for their operating

00:18:31,460 --> 00:18:34,759
systems you know to manage page tables

00:18:33,080 --> 00:18:36,169
it was not sure you can actually

00:18:34,759 --> 00:18:38,659
leverage it in your application and

00:18:36,169 --> 00:18:44,059
again I will show you how we suggest

00:18:38,659 --> 00:18:45,289
leveraging its optimizing child but with

00:18:44,059 --> 00:18:48,169
all the smoothness is there like

00:18:45,289 --> 00:18:50,029
absolutely nothing you cannot do

00:18:48,169 --> 00:18:52,099
there's actually a few things so first

00:18:50,029 --> 00:18:54,710
of all because it's a single Beauty

00:18:52,099 --> 00:18:56,509
kernel then absolutely no for cloud

00:18:54,710 --> 00:18:57,310
right because there is no such concept

00:18:56,509 --> 00:18:59,020
as for

00:18:57,310 --> 00:19:01,210
there is no processes right here it's a

00:18:59,020 --> 00:19:04,210
single process I believe that there are

00:19:01,210 --> 00:19:06,910
some you know ideas about implementing

00:19:04,210 --> 00:19:09,280
for outside of the hypervisor but again

00:19:06,910 --> 00:19:12,160
I'm not sure whether that has any type

00:19:09,280 --> 00:19:15,070
of things yet but today is a fair

00:19:12,160 --> 00:19:17,140
restrict no 40 not process isolation

00:19:15,070 --> 00:19:18,700
because there are no processes so all of

00:19:17,140 --> 00:19:20,380
your process is essentially threads

00:19:18,700 --> 00:19:22,450
right in a blink that's that's the

00:19:20,380 --> 00:19:24,790
concept that there are answer and you

00:19:22,450 --> 00:19:26,530
know this is the least amount of drivers

00:19:24,790 --> 00:19:28,000
device drivers to ever have so because

00:19:26,530 --> 00:19:30,040
you know ultimately what you want out of

00:19:28,000 --> 00:19:32,590
your hostiles is to be a glorified

00:19:30,040 --> 00:19:33,850
device driver for your hardware and then

00:19:32,590 --> 00:19:38,650
everything that's application-specific

00:19:33,850 --> 00:19:39,730
you do in the USB so with all this

00:19:38,650 --> 00:19:41,560
excitement

00:19:39,730 --> 00:19:43,810
you know what's what's what's the

00:19:41,560 --> 00:19:45,670
performance implications well like I

00:19:43,810 --> 00:19:48,070
said quite amazingly the performance

00:19:45,670 --> 00:19:50,260
actually improves so network intensive

00:19:48,070 --> 00:19:52,180
applications are modifying applications

00:19:50,260 --> 00:19:54,700
and again you can actually run an

00:19:52,180 --> 00:19:57,090
unmodified application by static linking

00:19:54,700 --> 00:20:01,210
it inside of this you know voice leakage

00:19:57,090 --> 00:20:02,890
there is one slight catch because

00:20:01,210 --> 00:20:04,600
everything is not for the dynamic linker

00:20:02,890 --> 00:20:06,160
if your application needs to be built as

00:20:04,600 --> 00:20:07,570
a shared object and it needs to have an

00:20:06,160 --> 00:20:09,460
entry point so I supposed to just you

00:20:07,570 --> 00:20:13,630
know because that you know health with

00:20:09,460 --> 00:20:16,990
you know like maybe but if you do that

00:20:13,630 --> 00:20:19,840
on my application you get you know 25

00:20:16,990 --> 00:20:23,410
perform this game from we should only

00:20:19,840 --> 00:20:25,810
put measured on my PhD and 3/4 or you

00:20:23,410 --> 00:20:26,850
know sort of CC was passed in a java

00:20:25,810 --> 00:20:29,320
application

00:20:26,850 --> 00:20:31,330
47% even decrease electricity which is

00:20:29,320 --> 00:20:33,850
again nothing to actually do a season

00:20:31,330 --> 00:20:35,320
for more six idea I use you know if you

00:20:33,850 --> 00:20:38,790
are actually moving to rewrite some of

00:20:35,320 --> 00:20:41,389
your application the fastest increase

00:20:38,790 --> 00:20:44,559
all the compute intensive

00:20:41,389 --> 00:20:47,450
your mileage may vary because obviously

00:20:44,559 --> 00:20:50,029
you are constrained by the hypervisor

00:20:47,450 --> 00:20:53,029
rights and if all the transportation

00:20:50,029 --> 00:20:54,379
doesn't compute I don't think you could

00:20:53,029 --> 00:20:55,940
expect any kind of performance

00:20:54,379 --> 00:20:57,739
improvements from just about anything

00:20:55,940 --> 00:21:00,529
it's like it's essentially written CPUs

00:20:57,739 --> 00:21:02,329
I guess but let's actually very quickly

00:21:00,529 --> 00:21:06,200
just give you a bunch of previews right

00:21:02,329 --> 00:21:08,539
you know most of this is pretty deep so

00:21:06,200 --> 00:21:09,649
like I can talk you know from maybe 5-10

00:21:08,539 --> 00:21:13,969
minutes about you know each of these

00:21:09,649 --> 00:21:16,159
lives and or even more but let me just

00:21:13,969 --> 00:21:18,349
very quickly explain to you where this

00:21:16,159 --> 00:21:21,709
performance improvement action so on the

00:21:18,349 --> 00:21:25,539
networking side the biggest reason that

00:21:21,709 --> 00:21:28,639
we see those numbers is the OSB has a

00:21:25,539 --> 00:21:30,229
TCP MP spend that is fully optimized for

00:21:28,639 --> 00:21:33,229
running just a single application in the

00:21:30,229 --> 00:21:36,109
same airspace in fact they were one of

00:21:33,229 --> 00:21:38,719
the sort of few people to implement baby

00:21:36,109 --> 00:21:40,459
vamp Jacobson's in that challenge which

00:21:38,719 --> 00:21:42,829
is essentially pretty simple idea you

00:21:40,459 --> 00:21:44,269
know if you look in a typical tcp/ip

00:21:42,829 --> 00:21:46,039
stack architecture in an operating

00:21:44,269 --> 00:21:48,589
system designed to make you basically

00:21:46,039 --> 00:21:50,570
have you know package traversing it in

00:21:48,589 --> 00:21:51,859
two directions you know all the time so

00:21:50,570 --> 00:21:53,629
there is one direction from the

00:21:51,859 --> 00:21:55,339
application side you know how to talk

00:21:53,629 --> 00:21:57,139
your application can calm you know send

00:21:55,339 --> 00:21:59,239
and receive and then we'll stuff goes

00:21:57,139 --> 00:22:01,279
down you know to the level of interface

00:21:59,239 --> 00:22:03,259
that word interface but then there is

00:22:01,279 --> 00:22:04,909
also you know interrupts period from the

00:22:03,259 --> 00:22:07,159
interface itself so like packets are

00:22:04,909 --> 00:22:08,839
arriving and you know the tcp/ip stack

00:22:07,159 --> 00:22:10,729
needs to be in the business of

00:22:08,839 --> 00:22:13,279
processing those pads so you basically

00:22:10,729 --> 00:22:14,899
have low key because you know it uses

00:22:13,279 --> 00:22:17,119
condom structuring at every single level

00:22:14,899 --> 00:22:19,940
so like all this you know calls are

00:22:17,119 --> 00:22:22,700
completely sort of pop we interact with

00:22:19,940 --> 00:22:24,020
each other if you implement channels

00:22:22,700 --> 00:22:25,400
channel size actually you get

00:22:24,020 --> 00:22:27,380
and you basically create a particular

00:22:25,400 --> 00:22:29,990
channel that is specific to the type of

00:22:27,380 --> 00:22:31,760
a packet and you start just shuffling

00:22:29,990 --> 00:22:33,770
them the better to the application first

00:22:31,760 --> 00:22:36,020
of all you're just looking so all of a

00:22:33,770 --> 00:22:37,460
sudden you just essentially look at a

00:22:36,020 --> 00:22:39,380
single place rather than a multiple

00:22:37,460 --> 00:22:41,870
basic but second of all which was

00:22:39,380 --> 00:22:43,100
amazing to me because you'll not reduce

00:22:41,870 --> 00:22:45,740
the amount of processing that's

00:22:43,100 --> 00:22:47,900
happening your packets because a higher

00:22:45,740 --> 00:22:53,210
chance would actually a higher chance of

00:22:47,900 --> 00:22:55,730
not being lost from D cash or UCP so

00:22:53,210 --> 00:22:58,850
basically the way the idea is you know

00:22:55,730 --> 00:23:01,370
you get a frame from the link and by the

00:22:58,850 --> 00:23:03,520
virtual wiring it you know and doing

00:23:01,370 --> 00:23:05,750
some initial processing in it you know

00:23:03,520 --> 00:23:08,090
the thing that ends up in did you catch

00:23:05,750 --> 00:23:09,440
and because it's so quick you know to

00:23:08,090 --> 00:23:10,940
traverse that stack in the other

00:23:09,440 --> 00:23:12,410
direction the things that doesn't

00:23:10,940 --> 00:23:14,809
actually leave the declared from your

00:23:12,410 --> 00:23:16,580
CPU so what the application is about to

00:23:14,809 --> 00:23:19,550
actually process that there is no cash

00:23:16,580 --> 00:23:23,870
so that's another reason there's quite a

00:23:19,550 --> 00:23:24,679
bit of different optimization is you

00:23:23,870 --> 00:23:26,570
know if you think about memory

00:23:24,679 --> 00:23:28,220
management for typical UNIX well you

00:23:26,570 --> 00:23:29,900
have the worst memory that is you know

00:23:28,220 --> 00:23:31,580
segregated between different processes

00:23:29,900 --> 00:23:35,480
within each process maintenance Jamie

00:23:31,580 --> 00:23:37,130
answer is guest so he okay so with wavy

00:23:35,480 --> 00:23:38,540
I mean the first thing that has come on

00:23:37,130 --> 00:23:39,920
it is like well now it's a single

00:23:38,540 --> 00:23:42,020
process so all of the memories were

00:23:39,920 --> 00:23:43,250
belongs to one single process but

00:23:42,020 --> 00:23:45,800
they're very clean treat that they do

00:23:43,250 --> 00:23:48,080
that is well that they're if what we

00:23:45,800 --> 00:23:49,880
view rock all that your honor is JDM

00:23:48,080 --> 00:23:52,730
let's actually completely flip the

00:23:49,880 --> 00:23:54,650
relationship between the two it's called

00:23:52,730 --> 00:23:56,570
JVM Mulvaney so unless I truly

00:23:54,650 --> 00:23:59,660
completely flip the relationship and say

00:23:56,570 --> 00:24:02,300
all of your memory from novel buildings

00:23:59,660 --> 00:24:03,350
to the JVM but an operating system has

00:24:02,300 --> 00:24:06,080
an option of creating an object

00:24:03,350 --> 00:24:08,090
essentially a completely opaque object

00:24:06,080 --> 00:24:09,480
that all the Jillian knows about there

00:24:08,090 --> 00:24:12,059
is a reference to the object has

00:24:09,480 --> 00:24:13,919
we collected and their point operating

00:24:12,059 --> 00:24:15,960
system tickers again remembering single

00:24:13,919 --> 00:24:17,190
address space very cold and their point

00:24:15,960 --> 00:24:18,480
is the operating system can actually

00:24:17,190 --> 00:24:20,490
reduce the memory assigned to that

00:24:18,480 --> 00:24:22,230
object for whatever purpose it needs so

00:24:20,490 --> 00:24:24,299
these completely relationship between

00:24:22,230 --> 00:24:26,360
the memory management inside of it wrong

00:24:24,299 --> 00:24:28,799
memory management sort of in your

00:24:26,360 --> 00:24:29,669
application all of the memory belongs to

00:24:28,799 --> 00:24:32,700
the application

00:24:29,669 --> 00:24:34,350
no more xmx it's just from time to time

00:24:32,700 --> 00:24:37,410
an operating system was essentially more

00:24:34,350 --> 00:24:39,690
basic pieces of the memory

00:24:37,410 --> 00:24:41,910
another cool thing that goes back to the

00:24:39,690 --> 00:24:44,460
exact talking about cpu capability is

00:24:41,910 --> 00:24:48,150
not available to the application what

00:24:44,460 --> 00:24:50,700
happens when a reference in Java changes

00:24:48,150 --> 00:24:54,690
well if you have object one that has a

00:24:50,700 --> 00:24:57,000
reference object you even basically

00:24:54,690 --> 00:24:58,559
erase that reference what you protected

00:24:57,000 --> 00:25:01,500
the time you wanna find a bit of memory

00:24:58,559 --> 00:25:03,600
that belongs to object one and at that

00:25:01,500 --> 00:25:05,460
point unless you actually tracking it

00:25:03,600 --> 00:25:07,320
through her prior system is there is no

00:25:05,460 --> 00:25:10,110
way for a garbage collector to know that

00:25:07,320 --> 00:25:12,330
things will change but if you can use

00:25:10,110 --> 00:25:14,070
any view that is typically reserved for

00:25:12,330 --> 00:25:16,320
managing pages in the operating system

00:25:14,070 --> 00:25:18,299
you can actually traffic because now it

00:25:16,320 --> 00:25:19,770
becomes a hardware event so anything

00:25:18,299 --> 00:25:21,750
that's written into the project gets

00:25:19,770 --> 00:25:23,549
trapped and at that point you have a way

00:25:21,750 --> 00:25:25,110
of actually tracking what gets changed

00:25:23,549 --> 00:25:27,720
so the garbage collector has an

00:25:25,110 --> 00:25:29,250
assistance from a table that essentially

00:25:27,720 --> 00:25:35,040
tracks notifications through the

00:25:29,250 --> 00:25:36,770
hardware to the relevance I have five

00:25:35,040 --> 00:25:39,600
minutes left

00:25:36,770 --> 00:25:41,160
there's way more cool stuff but I have

00:25:39,600 --> 00:25:43,350
to talk about door because not talking

00:25:41,160 --> 00:25:48,929
about doctor this week would put me in a

00:25:43,350 --> 00:25:50,490
very awkward situation this is exactly

00:25:48,929 --> 00:25:52,770
the same picture I show you when I

00:25:50,490 --> 00:25:53,429
introduce for a sweet but there if you

00:25:52,770 --> 00:25:55,200
changed right

00:25:53,429 --> 00:25:57,390
and now this picture actually would not

00:25:55,200 --> 00:25:58,370
represent go so you still having a

00:25:57,390 --> 00:26:01,070
booster

00:25:58,370 --> 00:26:03,590
Francisco and you see you have your you

00:26:01,070 --> 00:26:07,220
know virtual issue and whatnot but this

00:26:03,590 --> 00:26:09,740
man the sort of hardware-assisted

00:26:07,220 --> 00:26:11,360
virtualization layer in D Gillum you now

00:26:09,740 --> 00:26:14,480
have a contrary kernel

00:26:11,360 --> 00:26:16,549
so all containers on docker on a single

00:26:14,480 --> 00:26:17,600
host essentially share the capabilities

00:26:16,549 --> 00:26:19,789
of the same kernel

00:26:17,600 --> 00:26:21,860
just like voice me me to share these

00:26:19,789 --> 00:26:24,470
sort of virtualization capabilities so

00:26:21,860 --> 00:26:26,029
if you know that Acadia now on top of

00:26:24,470 --> 00:26:28,330
the chair of kernel what doctor does

00:26:26,029 --> 00:26:30,500
doctor basically provides you a layer of

00:26:28,330 --> 00:26:33,080
essentially change file system and

00:26:30,500 --> 00:26:34,970
virtualized network you know that sort

00:26:33,080 --> 00:26:37,399
of thing but then it's kind of like

00:26:34,970 --> 00:26:39,950
exactly the same you basically have a

00:26:37,399 --> 00:26:41,630
static related image but that static

00:26:39,950 --> 00:26:44,240
link amount happens not at the level of

00:26:41,630 --> 00:26:45,529
sort of an application itself but at the

00:26:44,240 --> 00:26:49,490
level of all the bits and pieces that

00:26:45,529 --> 00:26:50,990
have to exist in the fastest is it

00:26:49,490 --> 00:26:54,520
Wheatley just like where speak is a

00:26:50,990 --> 00:26:54,520
different what is no Kerr

00:26:57,880 --> 00:27:04,460
anyway anybody has any other suggestions

00:27:00,799 --> 00:27:14,360
what is the what is the over to you

00:27:04,460 --> 00:27:15,860
because like yes do I planted man tell

00:27:14,360 --> 00:27:18,919
me to implement because that is exactly

00:27:15,860 --> 00:27:21,740
right that is exactly what it is docker

00:27:18,919 --> 00:27:23,570
is not Loomis containers in fact dr.

00:27:21,740 --> 00:27:25,450
leverages Linux containers to accomplish

00:27:23,570 --> 00:27:27,919
exactly what this gentleman said to

00:27:25,450 --> 00:27:31,299
achieve a standardized packaging and

00:27:27,919 --> 00:27:31,299
distribution infrastructure

00:27:41,330 --> 00:27:47,249
exactly and the reason it's not like all

00:27:44,369 --> 00:27:49,649
the input of the way careful puppet is

00:27:47,249 --> 00:27:52,200
this socially driven imagery so I

00:27:49,649 --> 00:27:54,090
started with puppet ravenica in 2006 and

00:27:52,200 --> 00:27:56,129
the whole promise of puppet oversee

00:27:54,090 --> 00:27:57,960
attention back then was that we would

00:27:56,129 --> 00:28:00,840
all have this wonderful community of

00:27:57,960 --> 00:28:02,279
recipes shared by everybody so your

00:28:00,840 --> 00:28:03,929
recipes would be applicable to my

00:28:02,279 --> 00:28:05,669
environment viruses would be applicable

00:28:03,929 --> 00:28:07,470
to our environment we'll build on each

00:28:05,669 --> 00:28:09,389
other's recipes that will be this

00:28:07,470 --> 00:28:12,389
awesome language that would let us you

00:28:09,389 --> 00:28:14,279
know safely extend classes now that

00:28:12,389 --> 00:28:16,710
happen again not that it could happen

00:28:14,279 --> 00:28:18,749
just not a bit coming and this is the

00:28:16,710 --> 00:28:20,940
quintessential sort of point of a

00:28:18,749 --> 00:28:23,999
talking don't care essentially enables

00:28:20,940 --> 00:28:27,389
the same thing that gives up in English

00:28:23,999 --> 00:28:31,470
and it's no coincidence that index of

00:28:27,389 --> 00:28:33,359
coconut is really able to come in or at

00:28:31,470 --> 00:28:35,609
least it might be itself so whatever you

00:28:33,359 --> 00:28:36,989
do book reviews actually pulling off or

00:28:35,609 --> 00:28:38,820
by traffic images that have the people

00:28:36,989 --> 00:28:40,409
created just like when you do you know

00:28:38,820 --> 00:28:41,940
forking github project you're pulling

00:28:40,409 --> 00:28:43,739
off wonderful that other people created

00:28:41,940 --> 00:28:45,090
and in theory can think that the doctor

00:28:43,739 --> 00:28:47,909
does is that it actually doesn't

00:28:45,090 --> 00:28:49,830
disclose to you that internal sort of

00:28:47,909 --> 00:28:51,600
packaging format of how these images

00:28:49,830 --> 00:28:54,330
depend on each other and I will explain

00:28:51,600 --> 00:28:56,970
why it's important politically but maybe

00:28:54,330 --> 00:28:58,739
before I go into that let me actually

00:28:56,970 --> 00:29:00,480
address one more question that people

00:28:58,739 --> 00:29:02,759
typically ask me when I talk about wispy

00:29:00,480 --> 00:29:05,309
so especially in the context of JDM

00:29:02,759 --> 00:29:06,779
which we can that we had a couple of

00:29:05,309 --> 00:29:10,139
companies Detroit writing changes on

00:29:06,779 --> 00:29:11,340
their level even by this wouldn't we

00:29:10,139 --> 00:29:13,200
have you know a couple of companies that

00:29:11,340 --> 00:29:15,480
try to you know get across an X across

00:29:13,200 --> 00:29:18,869
all the same so why is it different

00:29:15,480 --> 00:29:21,840
today three things and I play that you

00:29:18,869 --> 00:29:23,489
know these are the key things they may

00:29:21,840 --> 00:29:25,499
be others between either the three

00:29:23,489 --> 00:29:27,269
things so first of all good arrived at a

00:29:25,499 --> 00:29:28,289
point when Intel hardware is fully

00:29:27,269 --> 00:29:30,690
capable of hardware-assisted

00:29:28,289 --> 00:29:31,360
virtualization the same way that all

00:29:30,690 --> 00:29:33,190
IBM's

00:29:31,360 --> 00:29:35,110
used to be capable of like the way back

00:29:33,190 --> 00:29:37,630
when and we all left and that we didn't

00:29:35,110 --> 00:29:42,220
appreciate that now we get a little know

00:29:37,630 --> 00:29:45,549
we all have elastic infrastructure we're

00:29:42,220 --> 00:29:48,250
against regulations right what I do by

00:29:45,549 --> 00:29:50,860
that is we now have conditions of

00:29:48,250 --> 00:29:52,720
developers that micro-services agree so

00:29:50,860 --> 00:29:55,179
something like you know an application

00:29:52,720 --> 00:29:56,980
that is spread to bajillion different

00:29:55,179 --> 00:29:58,420
pieces that need to be projected into a

00:29:56,980 --> 00:30:00,700
datacenter is our reality

00:29:58,420 --> 00:30:02,950
we actually need tools to help us manage

00:30:00,700 --> 00:30:04,870
those types of applications and finally

00:30:02,950 --> 00:30:06,640
we work well for it so we actually have

00:30:04,870 --> 00:30:08,740
an implementation of something that can

00:30:06,640 --> 00:30:10,570
map into that sort of application

00:30:08,740 --> 00:30:12,040
infrastructure - it's partially social

00:30:10,570 --> 00:30:17,230
it's partially technological something

00:30:12,040 --> 00:30:18,850
was done to this visit and with that let

00:30:17,230 --> 00:30:22,480
me actually give you my vision of

00:30:18,850 --> 00:30:25,600
elastic next generation data so my

00:30:22,480 --> 00:30:27,730
beautiful vision for that is rows and

00:30:25,600 --> 00:30:29,200
rows and rows of commodity hardware like

00:30:27,730 --> 00:30:30,820
things that I complete that we play is

00:30:29,200 --> 00:30:33,130
just reading out to France and by the

00:30:30,820 --> 00:30:36,429
way everything is ranked provisioned so

00:30:33,130 --> 00:30:38,049
instead of buying one you or to you or

00:30:36,429 --> 00:30:39,640
three you servers and trying to figure

00:30:38,049 --> 00:30:41,500
out how much can you revive within there

00:30:39,640 --> 00:30:42,940
how much CPU power do I put in there how

00:30:41,500 --> 00:30:45,010
much storage do I put in there I

00:30:42,940 --> 00:30:47,230
basically have a rack that I can plug

00:30:45,010 --> 00:30:49,330
drives in I have the regular I can blog

00:30:47,230 --> 00:30:55,360
you know CPU car zoom I can read that I

00:30:49,330 --> 00:30:57,610
can plug my flesh blah blah all this

00:30:55,360 --> 00:30:59,799
there is a commodity just enough for us

00:30:57,610 --> 00:31:02,890
that source is a glorified device primer

00:30:59,799 --> 00:31:04,480
it has no state at this book you know

00:31:02,890 --> 00:31:06,820
not much real estate of it's all pretty

00:31:04,480 --> 00:31:09,250
much doing and today which we have good

00:31:06,820 --> 00:31:10,840
examples of such projects you know so

00:31:09,250 --> 00:31:13,059
for West I kind of recommend you know

00:31:10,840 --> 00:31:15,610
looking at it and smart words which

00:31:13,059 --> 00:31:18,220
doesn't swing agents florists I exactly

00:31:15,610 --> 00:31:20,440
so something that would let me and just

00:31:18,220 --> 00:31:22,840
manage the partner get out of the way

00:31:20,440 --> 00:31:25,179
and get everything else done via

00:31:22,840 --> 00:31:27,220
container solutions so what are you from

00:31:25,179 --> 00:31:30,700
my chest halfway from there man let me

00:31:27,220 --> 00:31:32,950
do either talker or ways B once I have

00:31:30,700 --> 00:31:35,270
had actually one daughter to be doctor

00:31:32,950 --> 00:31:37,610
plus plus I went over to do

00:31:35,270 --> 00:31:39,950
what it's meant for it's actually being

00:31:37,610 --> 00:31:42,500
this unified packaging socially driven

00:31:39,950 --> 00:31:45,980
you know shared infrastructure for

00:31:42,500 --> 00:31:48,020
images but the back end I would like to

00:31:45,980 --> 00:31:49,910
be able to plug it into whatever I meant

00:31:48,020 --> 00:31:51,500
so to they contribute all this force

00:31:49,910 --> 00:31:52,910
Linux containers and that's good but

00:31:51,500 --> 00:31:54,230
there's absolutely no reason when the

00:31:52,910 --> 00:31:55,790
same concept shouldn't be applied to

00:31:54,230 --> 00:31:58,250
waste because Quay sweets and like I

00:31:55,790 --> 00:31:59,870
showed you it's very much the same it's

00:31:58,250 --> 00:32:02,330
just you know different combination of

00:31:59,870 --> 00:32:04,760
the same building blocks but if I'm a

00:32:02,330 --> 00:32:07,160
doctor and I am doing you know dr. RAM

00:32:04,760 --> 00:32:08,809
and that image happens to have a bit of

00:32:07,160 --> 00:32:10,309
metadata that describes of that image

00:32:08,809 --> 00:32:13,940
actually that was to be a noisy image

00:32:10,309 --> 00:32:16,490
why should I care and then of course we

00:32:13,940 --> 00:32:18,410
move to have a github for sharing micro

00:32:16,490 --> 00:32:20,900
services just like we have been given

00:32:18,410 --> 00:32:22,340
for shared source code we actually need

00:32:20,900 --> 00:32:23,780
to have a github architecture for

00:32:22,340 --> 00:32:25,580
sharing all the bits and pieces of

00:32:23,780 --> 00:32:27,260
functionality that again you know other

00:32:25,580 --> 00:32:29,570
than chef kind of posters will be able

00:32:27,260 --> 00:32:31,550
to do but they couldn't deliver now we

00:32:29,570 --> 00:32:33,590
actually have an option of doing this

00:32:31,550 --> 00:32:37,460
via containers and so these static

00:32:33,590 --> 00:32:40,220
loading images and finally it will let

00:32:37,460 --> 00:32:55,040
us kill them I feel like this is the

00:32:40,220 --> 00:32:57,020
worst ever seriously what I know from my

00:32:55,040 --> 00:32:59,720
80 from my that I want to maintain my

00:32:57,020 --> 00:33:01,940
bare ass I want them to just make sure

00:32:59,720 --> 00:33:03,440
that my core best ones and then I can

00:33:01,940 --> 00:33:05,240
make maps we have a very predictable

00:33:03,440 --> 00:33:06,679
environment because anything can be

00:33:05,240 --> 00:33:09,590
replicated everything is packaged

00:33:06,679 --> 00:33:12,350
unpredictable containers and the tools

00:33:09,590 --> 00:33:15,860
of never really talk and if you have a

00:33:12,350 --> 00:33:17,480
next heartbleed bug you all see a nice

00:33:15,860 --> 00:33:20,360
little in fact that because there is no

00:33:17,480 --> 00:33:22,420
SSL installed on their forwards like why

00:33:20,360 --> 00:33:24,200
would it be there

00:33:22,420 --> 00:33:25,250
you're the networks of course are

00:33:24,200 --> 00:33:26,780
attracted but that's their business

00:33:25,250 --> 00:33:30,260
because they can fix whatever they go to

00:33:26,780 --> 00:33:33,230
fail they're basically make a snow

00:33:30,260 --> 00:33:35,090
flakes nothing is ever smells like we

00:33:33,230 --> 00:33:37,360
need to get to it very

00:33:35,090 --> 00:33:39,679
fixable provisioning model and I think

00:33:37,360 --> 00:33:41,480
microservices deflective architecture is

00:33:39,679 --> 00:33:43,610
pretty much it so if they're quickly

00:33:41,480 --> 00:33:44,870
gave you being so far for voice the

00:33:43,610 --> 00:33:46,519
waste we - by the way of very young

00:33:44,870 --> 00:33:50,960
projects we get like year and a half

00:33:46,519 --> 00:33:52,039
against the lifespan so Expo with

00:33:50,960 --> 00:33:54,259
memcache be you know there are

00:33:52,039 --> 00:33:56,389
successful results Apache Cassandra you

00:33:54,259 --> 00:33:59,360
get pretty successful Redis that's what

00:33:56,389 --> 00:34:01,669
the club is guys have done so I have

00:33:59,360 --> 00:34:03,230
done a little bit of experimenting with

00:34:01,669 --> 00:34:05,779
a new ecosystem so I have you know take

00:34:03,230 --> 00:34:07,700
notes if zookeeper we lost thing is and

00:34:05,779 --> 00:34:09,139
I'm actually like 20 have the five you

00:34:07,700 --> 00:34:10,909
know constantly to actually do some game

00:34:09,139 --> 00:34:12,829
for performance benchmarks but I show

00:34:10,909 --> 00:34:15,440
you speaking of which I'm actually

00:34:12,829 --> 00:34:20,210
pirate so if any of this is exciting to

00:34:15,440 --> 00:34:22,399
you and speaking of which even if you

00:34:20,210 --> 00:34:29,240
don't try to me as its page deployed

00:34:22,399 --> 00:34:30,649
well where do we need your help it's

00:34:29,240 --> 00:34:33,500
always horse right you know just join

00:34:30,649 --> 00:34:35,060
you know start posting on github you

00:34:33,500 --> 00:34:38,649
know start sending out for requests and

00:34:35,060 --> 00:34:40,760
just you know to keep you thinking

00:34:38,649 --> 00:34:42,139
proper integration you know things that

00:34:40,760 --> 00:34:45,169
are really super exciting to me

00:34:42,139 --> 00:34:46,819
recklessly can I do CF push go per

00:34:45,169 --> 00:34:48,859
container it would be awesome if I could

00:34:46,819 --> 00:34:53,750
there is absolutely no reason I think

00:34:48,859 --> 00:34:55,940
there is no reason why she should then

00:34:53,750 --> 00:34:59,540
don't great images be kind of like this

00:34:55,940 --> 00:35:01,400
intermediate you know representation for

00:34:59,540 --> 00:35:02,930
the don't packs because again you know

00:35:01,400 --> 00:35:05,240
the problem with bill packs at least I

00:35:02,930 --> 00:35:06,859
can you know some time ago is like well

00:35:05,240 --> 00:35:08,660
the bill microns within the whole bunch

00:35:06,859 --> 00:35:10,040
of things happen like my application

00:35:08,660 --> 00:35:10,740
wants confirmed into something but I

00:35:10,040 --> 00:35:12,510
don't

00:35:10,740 --> 00:35:14,250
that's something that they don't quite

00:35:12,510 --> 00:35:16,170
know how to replicate that's nothing

00:35:14,250 --> 00:35:18,300
so if we can actually use Volker sort of

00:35:16,170 --> 00:35:21,750
this year you know micro-services image

00:35:18,300 --> 00:35:23,130
repository as a background for build

00:35:21,750 --> 00:35:25,560
packs maybe that's a good idea I don't

00:35:23,130 --> 00:35:27,000
know you tell me two levels can't really

00:35:25,560 --> 00:35:29,400
need to do be assisted I mean that's how

00:35:27,000 --> 00:35:30,750
Google serve approach there that list

00:35:29,400 --> 00:35:32,400
for the second generation architecture

00:35:30,750 --> 00:35:36,470
so you can have you know this micro

00:35:32,400 --> 00:35:37,680
services container or voice be based

00:35:36,470 --> 00:35:39,359
units

00:35:37,680 --> 00:35:40,740
you basically stand them up and all of a

00:35:39,359 --> 00:35:44,640
sudden you have your own into clusters

00:35:40,740 --> 00:35:47,150
so it does related and I guess I have a

00:35:44,640 --> 00:35:47,150
power five

00:35:57,760 --> 00:36:00,839
[Music]

00:36:05,300 --> 00:36:07,900
yes

00:36:13,609 --> 00:36:16,880
13 years

00:36:18,290 --> 00:36:22,040
right so the question is you know why

00:36:20,030 --> 00:36:23,510
did I until I say much about all that

00:36:22,040 --> 00:36:25,100
stuff so to the open stage will

00:36:23,510 --> 00:36:26,900
obviously still exist right you know

00:36:25,100 --> 00:36:28,430
what I'm talking about is the data

00:36:26,900 --> 00:36:31,160
center will realize for the micro

00:36:28,430 --> 00:36:32,960
services based avoidance there will be a

00:36:31,160 --> 00:36:34,760
classified occasions just like there's a

00:36:32,960 --> 00:36:35,930
classic replications that be still the

00:36:34,760 --> 00:36:38,030
if you look very classical

00:36:35,930 --> 00:36:40,910
virtualization for so like you know came

00:36:38,030 --> 00:36:43,160
where you know well know or vocalizing

00:36:40,910 --> 00:36:44,540
you know Windows XP arrays it looks like

00:36:43,160 --> 00:36:47,150
if you still knew that I mean that has

00:36:44,540 --> 00:36:48,710
to be associated with it so OpenStack

00:36:47,150 --> 00:36:50,090
cloud stack those kinds of technologies

00:36:48,710 --> 00:36:52,220
will remain at the level of

00:36:50,090 --> 00:36:57,590
infrastructure of the service but my

00:36:52,220 --> 00:37:00,290
belief is that we as community above the

00:36:57,590 --> 00:37:01,880
player so that would be still test for

00:37:00,290 --> 00:37:04,520
which infrastructure services absolutely

00:37:01,880 --> 00:37:06,470
correct interview but most of the time

00:37:04,520 --> 00:37:08,510
the next generation applications that we

00:37:06,470 --> 00:37:10,100
develop will actually form the micro

00:37:08,510 --> 00:37:13,330
services at one corner where

00:37:10,100 --> 00:37:13,330
infrastructure doesn't actually

00:37:15,310 --> 00:37:18,980
orchestration where and like I said at

00:37:17,480 --> 00:37:20,720
the beginning of the presentation that

00:37:18,980 --> 00:37:23,540
is completely missing from you know this

00:37:20,720 --> 00:37:26,300
fall I actually hope that that would end

00:37:23,540 --> 00:37:27,890
up being foundry natively but if there

00:37:26,300 --> 00:37:30,850
are bits and pieces of course natural

00:37:27,890 --> 00:37:33,140
OpenStack listen to that that maybe -

00:37:30,850 --> 00:37:35,720
what I'm trying to say it is at that

00:37:33,140 --> 00:37:38,000
point you can basically giving a pass

00:37:35,720 --> 00:37:38,690
and the thing that you actually run on

00:37:38,000 --> 00:37:40,730
your datacenter

00:37:38,690 --> 00:37:43,040
so your datacenter starts to work like

00:37:40,730 --> 00:37:46,550
that where it's today you know in the

00:37:43,040 --> 00:37:48,230
Accenture actually good this still looks

00:37:46,550 --> 00:37:50,830
like infrastructure is raised and I

00:37:48,230 --> 00:37:50,830
think you know that

00:37:57,040 --> 00:38:01,000
any emotion temperature

00:38:05,280 --> 00:38:08,820
yes I'll multi-party supports go the

00:38:07,230 --> 00:38:11,190
question is what hardware supported so

00:38:08,820 --> 00:38:13,370
it's definitely the x86 all supported

00:38:11,190 --> 00:38:16,380
supported so you can have friends be

00:38:13,370 --> 00:38:16,770
scheduling some of as many ports as you

00:38:16,380 --> 00:38:18,660
want

00:38:16,770 --> 00:38:21,330
I believe that there is support to arm

00:38:18,660 --> 00:38:22,980
in the works so hard we will be

00:38:21,330 --> 00:38:26,430
supporting creator soon hopefully again

00:38:22,980 --> 00:38:27,570
for the source project driving but I

00:38:26,430 --> 00:38:30,380
don't know if there's any other

00:38:27,570 --> 00:38:30,380
protection so

00:38:50,380 --> 00:38:57,380
I can't even that kind of an old friend

00:38:55,070 --> 00:39:00,620
of mine plate she is old he happens to

00:38:57,380 --> 00:39:02,360
be ocean who he used to work at idea you

00:39:00,620 --> 00:39:05,380
know what I talked to him about they

00:39:02,360 --> 00:39:05,380
stopped his like their kids

00:39:11,520 --> 00:39:17,969
[Applause]

00:39:14,680 --> 00:39:17,969

YouTube URL: https://www.youtube.com/watch?v=OGmKVtvfOaQ


