Title: Migrating from BOSH and VMs to Kubernetes using KubeCF and cf-operator - Richard Johnson, IBM Cloud
Publication date: 2020-10-26
Playlist: Cloud Foundry Summit Europe 2020
Description: 
	Migrating from BOSH and VMs to Kubernetes using KubeCF and cf-operator - Richard Johnson, IBM Cloud

This session will explore the challenges and details on how to seamlessly migrate from a BOSH and a Virtual Machine based platform, to Kubernetes, using the KubeCF and cf-operator projects. This includes transitioning extremely large numbers of customer applications in a seamless zero-downtime way. This session will discuss some of the operational comparisons and changes when converting from a BOSH based operational environment to a Kubernetes platform. It will also describe the hybrid approaches that IBM is developing to allow for an incremental migration of some of the world's largest Cloud Foundry environments.

In this session, Richard Johnson, STSM, Site Reliability Engineer Lead, IBM Cloud, walk through the struggles and successes of evolving the underlying infrastructure of the the worlds largest Cloud Foundry installations, with zero user impact or awareness.
Captions: 
	00:00:00,160 --> 00:00:03,280
hello and welcome to this cloud foundry

00:00:02,720 --> 00:00:06,960
summit

00:00:03,280 --> 00:00:07,440
session what i'll be talking about is

00:00:06,960 --> 00:00:10,480
how

00:00:07,440 --> 00:00:12,480
ibm is trying to migrate our bosch

00:00:10,480 --> 00:00:14,639
cloud foundry environment from boston

00:00:12,480 --> 00:00:15,200
via virtual machines to kubernetes and

00:00:14,639 --> 00:00:16,880
would

00:00:15,200 --> 00:00:19,840
show how we're using cube cf and cf

00:00:16,880 --> 00:00:19,840
operator to do that

00:00:20,560 --> 00:00:23,840
so when we look at this one of the

00:00:22,720 --> 00:00:25,680
things to thinking

00:00:23,840 --> 00:00:27,519
about is what is a starting point that

00:00:25,680 --> 00:00:28,880
we're trying to work from so what i'm

00:00:27,519 --> 00:00:31,199
trying to accomplish is to

00:00:28,880 --> 00:00:33,239
start from our existing cloud foundry

00:00:31,199 --> 00:00:36,480
system that's been around since uh

00:00:33,239 --> 00:00:38,640
2014 previously branded as bluemix

00:00:36,480 --> 00:00:39,920
and you know that's a very successful

00:00:38,640 --> 00:00:42,559
system for us

00:00:39,920 --> 00:00:44,000
it's been millions of users and

00:00:42,559 --> 00:00:46,320
applications over the years

00:00:44,000 --> 00:00:47,440
it's global we federate multiple regions

00:00:46,320 --> 00:00:50,879
together

00:00:47,440 --> 00:00:53,360
we have slas of 99.99

00:00:50,879 --> 00:00:54,640
and above for multi-region and we've

00:00:53,360 --> 00:00:56,320
been achieving those for

00:00:54,640 --> 00:00:57,920
years now which we're proud of but of

00:00:56,320 --> 00:00:58,320
course that means that you know it's a

00:00:57,920 --> 00:01:00,399
lot

00:00:58,320 --> 00:01:02,000
that we have to try to maintain and

00:01:00,399 --> 00:01:04,239
migrate

00:01:02,000 --> 00:01:05,600
where these existing systems are fully

00:01:04,239 --> 00:01:07,920
based on bosch

00:01:05,600 --> 00:01:09,520
and they use the ibm cloud classic

00:01:07,920 --> 00:01:11,119
virtual machine

00:01:09,520 --> 00:01:12,960
layer um for the infrastructure

00:01:11,119 --> 00:01:13,600
underneath that now we're trying to

00:01:12,960 --> 00:01:17,200
migrate

00:01:13,600 --> 00:01:20,320
all of that to ibm cloud's virtual

00:01:17,200 --> 00:01:22,320
vpc um infrastructure the new

00:01:20,320 --> 00:01:23,520
uh capabilities that we have in ibm

00:01:22,320 --> 00:01:25,200
cloud there

00:01:23,520 --> 00:01:26,560
and that means completely new

00:01:25,200 --> 00:01:28,080
infrastructure layer

00:01:26,560 --> 00:01:30,000
and then we're trying to make sure that

00:01:28,080 --> 00:01:31,439
we well we are trying to replace virtual

00:01:30,000 --> 00:01:33,200
machines with kubernetes and we're

00:01:31,439 --> 00:01:34,320
trying to replace bosch with kubernetes

00:01:33,200 --> 00:01:36,320
so

00:01:34,320 --> 00:01:38,479
a lot to do and we're going to do this

00:01:36,320 --> 00:01:41,280
uh with cube cf and cf operator and i'm

00:01:38,479 --> 00:01:43,520
going to talk to you about how

00:01:41,280 --> 00:01:44,960
so first of all just a little bit about

00:01:43,520 --> 00:01:47,280
those two projects there's two

00:01:44,960 --> 00:01:50,000
incubation projects in the cloud foundry

00:01:47,280 --> 00:01:51,119
um open source community so we've got

00:01:50,000 --> 00:01:53,200
qcf

00:01:51,119 --> 00:01:54,560
which is you know there's lots to it but

00:01:53,200 --> 00:01:56,320
it's essentially it gives us the

00:01:54,560 --> 00:01:59,680
replacement for the virtual machine

00:01:56,320 --> 00:02:02,320
and bosch packaging layer so

00:01:59,680 --> 00:02:03,920
it moves us to container images ready

00:02:02,320 --> 00:02:07,439
for kubernetes

00:02:03,920 --> 00:02:10,640
and then um in combination with the cf

00:02:07,439 --> 00:02:13,599
operator so this is layered

00:02:10,640 --> 00:02:16,000
on top of kubernetes as crds custom

00:02:13,599 --> 00:02:19,440
resource definitions that gives us

00:02:16,000 --> 00:02:22,160
the ability to manage

00:02:19,440 --> 00:02:24,080
the cube cf layer and so this the whole

00:02:22,160 --> 00:02:26,319
system is um

00:02:24,080 --> 00:02:28,239
you know it's taking care of looking at

00:02:26,319 --> 00:02:29,200
all of the deployment configurations and

00:02:28,239 --> 00:02:33,680
making that

00:02:29,200 --> 00:02:37,280
real on a kubernetes um platform

00:02:33,680 --> 00:02:39,519
so those are those two projects

00:02:37,280 --> 00:02:41,920
what we did initially was we took those

00:02:39,519 --> 00:02:43,440
that cube cf and cf operator projects

00:02:41,920 --> 00:02:46,160
and we said okay well

00:02:43,440 --> 00:02:48,239
let's see if we can get um one of our

00:02:46,160 --> 00:02:49,360
existing systems up and running on this

00:02:48,239 --> 00:02:51,760
so we took

00:02:49,360 --> 00:02:54,239
one of our test staging environments and

00:02:51,760 --> 00:02:56,319
we took copies of the data layers

00:02:54,239 --> 00:02:58,480
so that means of course we copied ccdb

00:02:56,319 --> 00:03:00,239
uadb diego locket

00:02:58,480 --> 00:03:02,800
and also the droplets so we took the

00:03:00,239 --> 00:03:05,120
whole blob store as well and

00:03:02,800 --> 00:03:06,400
copied all those and then we stood up a

00:03:05,120 --> 00:03:08,480
qcf system

00:03:06,400 --> 00:03:09,599
and configured it to point to those data

00:03:08,480 --> 00:03:11,599
copies

00:03:09,599 --> 00:03:13,920
and uh we were really successful it was

00:03:11,599 --> 00:03:17,120
great the system came online and we

00:03:13,920 --> 00:03:19,360
saw successful startup of um all the

00:03:17,120 --> 00:03:22,720
applications as you'd expect because

00:03:19,360 --> 00:03:25,920
diego um you know bbs saw those

00:03:22,720 --> 00:03:28,239
applications and it was able to

00:03:25,920 --> 00:03:29,040
pull the droplets from the blog store

00:03:28,239 --> 00:03:30,480
and

00:03:29,040 --> 00:03:32,159
stand all the applications up and get

00:03:30,480 --> 00:03:34,480
them running that was great

00:03:32,159 --> 00:03:36,560
however um you know posed a lot of

00:03:34,480 --> 00:03:38,720
questions to us right first of all

00:03:36,560 --> 00:03:40,319
that was very disruptive right it took a

00:03:38,720 --> 00:03:42,640
down time of that system

00:03:40,319 --> 00:03:44,080
to take it um the original system

00:03:42,640 --> 00:03:45,040
offline and then bring the new system

00:03:44,080 --> 00:03:46,560
back up again

00:03:45,040 --> 00:03:48,560
and especially at the scales that we

00:03:46,560 --> 00:03:51,120
have you know it'll take a long time for

00:03:48,560 --> 00:03:52,879
bbs and diego to work through you know

00:03:51,120 --> 00:03:55,360
such a large number of applications and

00:03:52,879 --> 00:03:57,360
bring them back online

00:03:55,360 --> 00:03:58,799
um you know it wasn't incremental right

00:03:57,360 --> 00:04:00,080
so there's a cost issue because you

00:03:58,799 --> 00:04:02,000
literally have to stand up

00:04:00,080 --> 00:04:04,000
a second environment that's the same

00:04:02,000 --> 00:04:06,319
size as your original environment

00:04:04,000 --> 00:04:07,920
so you're incurring double costs until

00:04:06,319 --> 00:04:08,480
you've completely shut one down and

00:04:07,920 --> 00:04:10,400
brought and

00:04:08,480 --> 00:04:12,000
got the other one back up and running

00:04:10,400 --> 00:04:14,080
and perhaps like the biggest

00:04:12,000 --> 00:04:15,439
issue of all beyond the obvious

00:04:14,080 --> 00:04:17,680
disruption one was just

00:04:15,439 --> 00:04:19,600
the risk right we don't know for sure

00:04:17,680 --> 00:04:21,600
that the scale that we are at

00:04:19,600 --> 00:04:24,000
that we would successfully bring up the

00:04:21,600 --> 00:04:25,520
qcf side there's no incremental approach

00:04:24,000 --> 00:04:28,800
here

00:04:25,520 --> 00:04:30,240
so um as we thought about this we

00:04:28,800 --> 00:04:33,040
thought you know these are this is good

00:04:30,240 --> 00:04:35,440
but we've got to think further

00:04:33,040 --> 00:04:37,040
the other thing uh we were looking at is

00:04:35,440 --> 00:04:39,360
you know related to this is scale

00:04:37,040 --> 00:04:41,120
overall so we're thinking about how

00:04:39,360 --> 00:04:42,800
you know we we have such large

00:04:41,120 --> 00:04:44,639
environments across multiple geographies

00:04:42,800 --> 00:04:46,320
and cities data centers availability

00:04:44,639 --> 00:04:48,960
zones that

00:04:46,320 --> 00:04:50,720
putting that um at least large amounts

00:04:48,960 --> 00:04:51,360
of that into single clusters like cube

00:04:50,720 --> 00:04:54,639
cf

00:04:51,360 --> 00:04:56,720
as um was originally would be

00:04:54,639 --> 00:04:57,680
very problematic for us um we don't

00:04:56,720 --> 00:04:59,040
think that

00:04:57,680 --> 00:05:00,960
we could necessarily get that amount of

00:04:59,040 --> 00:05:02,320
scale from a kubernetes cluster and even

00:05:00,960 --> 00:05:04,800
if we could the

00:05:02,320 --> 00:05:06,639
logistics of managing it in a single

00:05:04,800 --> 00:05:09,919
cluster were not appealing great i mean

00:05:06,639 --> 00:05:11,600
even on the bosch side we split our

00:05:09,919 --> 00:05:12,639
environments into multiple deployments

00:05:11,600 --> 00:05:13,759
so we have like separate bosch

00:05:12,639 --> 00:05:16,960
deployments for different

00:05:13,759 --> 00:05:18,560
availability zones shards of cells

00:05:16,960 --> 00:05:20,479
um so you know we wanted to make sure

00:05:18,560 --> 00:05:22,479
that we could have multi-clustering to

00:05:20,479 --> 00:05:25,199
to do this so the community work was

00:05:22,479 --> 00:05:28,479
done around qcf to enhance the

00:05:25,199 --> 00:05:30,400
this with multi-cluster capability so

00:05:28,479 --> 00:05:31,840
you know for example you can split the

00:05:30,400 --> 00:05:33,759
uh control plane

00:05:31,840 --> 00:05:35,360
components free um so basically

00:05:33,759 --> 00:05:38,800
everything that's not a cell

00:05:35,360 --> 00:05:41,360
from the diego cells and um

00:05:38,800 --> 00:05:41,840
you know run those in a separate cluster

00:05:41,360 --> 00:05:44,160
um

00:05:41,840 --> 00:05:45,919
and you know that work was done and uh

00:05:44,160 --> 00:05:47,360
it's a successful so we're able to build

00:05:45,919 --> 00:05:48,639
upon that and you know there's quite a

00:05:47,360 --> 00:05:51,280
lot of challenges in that like

00:05:48,639 --> 00:05:52,000
you know networking becomes more complex

00:05:51,280 --> 00:05:53,520
and we've done some

00:05:52,000 --> 00:05:55,280
work on top of what's been done already

00:05:53,520 --> 00:05:57,919
in there to

00:05:55,280 --> 00:05:59,759
figure out more dynamic addressability

00:05:57,919 --> 00:06:02,000
and service discovery so i'll talk a

00:05:59,759 --> 00:06:04,319
little bit later about some dns

00:06:02,000 --> 00:06:06,880
work especially that we've done to allow

00:06:04,319 --> 00:06:09,759
multiple clusters to talk to one another

00:06:06,880 --> 00:06:09,759
and in fact beyond that

00:06:10,720 --> 00:06:15,600
um you know the other thing as well as

00:06:13,199 --> 00:06:19,840
the scale is you know back on the

00:06:15,600 --> 00:06:21,680
the limitations of the big bang approach

00:06:19,840 --> 00:06:24,080
we needed to think about like

00:06:21,680 --> 00:06:26,000
you know ultimately we've got to do

00:06:24,080 --> 00:06:27,199
something which is zero downtown time

00:06:26,000 --> 00:06:30,080
and zero or as close

00:06:27,199 --> 00:06:32,400
to zero as possible risk right and so

00:06:30,080 --> 00:06:34,720
with it we're actually talking about the

00:06:32,400 --> 00:06:35,840
you know the metaphor is that um be like

00:06:34,720 --> 00:06:39,199
changing the car

00:06:35,840 --> 00:06:42,080
tires during the race um you know with

00:06:39,199 --> 00:06:44,319
no risk or limited risk so

00:06:42,080 --> 00:06:45,840
um what it means is you know we need to

00:06:44,319 --> 00:06:46,960
find a way to be non-disruptive

00:06:45,840 --> 00:06:48,720
incremental

00:06:46,960 --> 00:06:51,440
and reversible in this and so we created

00:06:48,720 --> 00:06:52,960
this thing that we call the hybrid

00:06:51,440 --> 00:06:54,479
you know that's what i'm going to spend

00:06:52,960 --> 00:06:56,720
the rest of my time really sort of

00:06:54,479 --> 00:06:58,800
focusing on and describing to you is

00:06:56,720 --> 00:07:00,319
how do we do this hybrid what does that

00:06:58,800 --> 00:07:01,919
mean and what is it so

00:07:00,319 --> 00:07:03,520
you know first of all it it is a

00:07:01,919 --> 00:07:05,440
coexistence and

00:07:03,520 --> 00:07:07,680
and basically a federation of both a

00:07:05,440 --> 00:07:09,039
bosch system and a cube cs system

00:07:07,680 --> 00:07:10,800
working together

00:07:09,039 --> 00:07:12,560
right because a big bang is basically

00:07:10,800 --> 00:07:14,960
zero percent um

00:07:12,560 --> 00:07:17,120
cube cf and 100 bosch and then suddenly

00:07:14,960 --> 00:07:18,560
it flips over to 100 keeps you from zero

00:07:17,120 --> 00:07:20,479
percent bosh

00:07:18,560 --> 00:07:21,599
with this hybrid approach what it allows

00:07:20,479 --> 00:07:24,560
us to do is to start

00:07:21,599 --> 00:07:26,319
blending the two together and and it

00:07:24,560 --> 00:07:28,000
allows us to do you know an incremental

00:07:26,319 --> 00:07:30,000
approach on that

00:07:28,000 --> 00:07:31,680
that we could even reverse so we could

00:07:30,000 --> 00:07:33,120
go from like ninety percent

00:07:31,680 --> 00:07:34,639
a hundred percent pressure initially to

00:07:33,120 --> 00:07:35,199
ninety percent and then ten percent cube

00:07:34,639 --> 00:07:37,360
cf

00:07:35,199 --> 00:07:38,960
and you know eventually move that to

00:07:37,360 --> 00:07:40,800
fifty fifty and then

00:07:38,960 --> 00:07:42,319
ten ninety and eventually zero to a

00:07:40,800 --> 00:07:44,400
hundred percent split

00:07:42,319 --> 00:07:46,080
back um on the other side with qcf

00:07:44,400 --> 00:07:47,599
taking over

00:07:46,080 --> 00:07:49,599
and being able to go back right so if we

00:07:47,599 --> 00:07:50,720
encounter any problems maybe we hit some

00:07:49,599 --> 00:07:52,560
scale issues or

00:07:50,720 --> 00:07:54,400
operational issues that are not as

00:07:52,560 --> 00:07:56,240
expected then

00:07:54,400 --> 00:07:59,039
we can you know dial that percentage

00:07:56,240 --> 00:08:01,199
back again so the way that we

00:07:59,039 --> 00:08:03,520
you know the the real critical piece of

00:08:01,199 --> 00:08:05,440
this design as we thought about was that

00:08:03,520 --> 00:08:07,599
um instead of trying to think of things

00:08:05,440 --> 00:08:09,680
like how to split the data and you know

00:08:07,599 --> 00:08:11,120
maybe move some applications to one side

00:08:09,680 --> 00:08:12,960
with a different ccdb

00:08:11,120 --> 00:08:14,319
or something like that we thought no we

00:08:12,960 --> 00:08:17,599
can have a federated

00:08:14,319 --> 00:08:19,680
overall aggregated system and let diego

00:08:17,599 --> 00:08:20,720
right do the scheduling so what we would

00:08:19,680 --> 00:08:23,360
have what we

00:08:20,720 --> 00:08:24,400
are aiming to have is a federated system

00:08:23,360 --> 00:08:26,400
where diego

00:08:24,400 --> 00:08:28,240
has got cells on the bosch side and

00:08:26,400 --> 00:08:28,960
cells on the cubesat side and it can

00:08:28,240 --> 00:08:33,839
schedule to

00:08:28,960 --> 00:08:35,200
each of them and so as we naturally

00:08:33,839 --> 00:08:37,360
decrease the number of cells on the

00:08:35,200 --> 00:08:38,479
bosch side and increment them on the

00:08:37,360 --> 00:08:41,279
cube cf side

00:08:38,479 --> 00:08:43,519
the scheduler will just re you know

00:08:41,279 --> 00:08:46,720
replace the applications re

00:08:43,519 --> 00:08:48,720
or new auctions will favor the you know

00:08:46,720 --> 00:08:51,440
the distribution simply of the cells

00:08:48,720 --> 00:08:52,320
um and it and it's great because it

00:08:51,440 --> 00:08:55,839
becomes a much

00:08:52,320 --> 00:09:00,000
cleaner way to do migration

00:08:55,839 --> 00:09:02,399
and in an incremental reversible fashion

00:09:00,000 --> 00:09:03,600
so let me let me show a diagram that

00:09:02,399 --> 00:09:05,680
tries to convey this

00:09:03,600 --> 00:09:07,360
um so yeah you know it's quite a busy

00:09:05,680 --> 00:09:08,720
diagram i simplified it a fair amount

00:09:07,360 --> 00:09:10,399
but there's still quite a lot to unpack

00:09:08,720 --> 00:09:13,279
here so

00:09:10,399 --> 00:09:14,560
let me see if i can describe it so on

00:09:13,279 --> 00:09:17,360
the left you've got

00:09:14,560 --> 00:09:19,279
the bosch environment so i frame that in

00:09:17,360 --> 00:09:20,160
blue and on the right you've got the qcf

00:09:19,279 --> 00:09:22,000
environment

00:09:20,160 --> 00:09:23,440
and the hybrid is the overall

00:09:22,000 --> 00:09:24,720
combination of all of this working

00:09:23,440 --> 00:09:26,320
together

00:09:24,720 --> 00:09:28,560
so let's let's look a bit more so on the

00:09:26,320 --> 00:09:32,080
left you've got these three

00:09:28,560 --> 00:09:33,920
uh vertical um availability zones i've

00:09:32,080 --> 00:09:35,920
got with a red border around them

00:09:33,920 --> 00:09:37,200
so that just shows you that um in our

00:09:35,920 --> 00:09:40,320
bosch systems you know we

00:09:37,200 --> 00:09:42,640
we do use multi data center three azs um

00:09:40,320 --> 00:09:43,839
and we split a third of everything into

00:09:42,640 --> 00:09:45,440
each of them so

00:09:43,839 --> 00:09:47,120
a third of the cell footprints in each

00:09:45,440 --> 00:09:49,519
cell and a third of the

00:09:47,120 --> 00:09:52,480
cappy api nodes you know a third of the

00:09:49,519 --> 00:09:52,480
uaa et cetera

00:09:53,120 --> 00:09:57,279
and then we've got an external database

00:09:55,440 --> 00:10:00,399
at the lower of the diagram so we use

00:09:57,279 --> 00:10:00,720
postgres clustering outside of bosch but

00:10:00,399 --> 00:10:02,399
it's

00:10:00,720 --> 00:10:05,440
you know network addressed from those

00:10:02,399 --> 00:10:09,200
bosch vms on the left

00:10:05,440 --> 00:10:11,760
and um on the right hand side you've got

00:10:09,200 --> 00:10:12,959
the cube cf system where instead of

00:10:11,760 --> 00:10:14,640
having the same

00:10:12,959 --> 00:10:17,120
quite the same availability zones you

00:10:14,640 --> 00:10:19,600
still have the concept of zones right so

00:10:17,120 --> 00:10:20,880
um in the top of the cube cs side i've

00:10:19,600 --> 00:10:22,320
got the control plane

00:10:20,880 --> 00:10:24,320
so you've got all the non-cell

00:10:22,320 --> 00:10:26,480
components and we're looking at probably

00:10:24,320 --> 00:10:28,000
having those in a single cluster but

00:10:26,480 --> 00:10:30,560
even within that cluster there will be

00:10:28,000 --> 00:10:33,120
azs and different regionals

00:10:30,560 --> 00:10:35,279
and you know data center splits as to

00:10:33,120 --> 00:10:38,240
where each node is but

00:10:35,279 --> 00:10:39,760
the um so the so there's somewhat of a

00:10:38,240 --> 00:10:41,040
mapping right as you see from the left

00:10:39,760 --> 00:10:42,720
side to the right side and the other

00:10:41,040 --> 00:10:44,399
thing is on this diagram i hope it was

00:10:42,720 --> 00:10:48,480
clear is i i've shown

00:10:44,399 --> 00:10:50,800
basically a mid migration picture here

00:10:48,480 --> 00:10:52,640
which is why you've got like bits and

00:10:50,800 --> 00:10:54,640
pieces of the control plane on the left

00:10:52,640 --> 00:10:55,760
and bits and pieces of it on the right

00:10:54,640 --> 00:10:58,240
so that's the other thing not only are

00:10:55,760 --> 00:10:59,600
we looking to do incremental on the data

00:10:58,240 --> 00:11:01,040
plane and with the cells like i talked

00:10:59,600 --> 00:11:02,480
about before with diego

00:11:01,040 --> 00:11:04,880
but we also want to manage each of the

00:11:02,480 --> 00:11:06,800
control plane components in the same way

00:11:04,880 --> 00:11:08,240
right we don't want a big bang take you

00:11:06,800 --> 00:11:10,000
know we have large clusters right with

00:11:08,240 --> 00:11:11,839
lots and lots of nodes right our doppler

00:11:10,000 --> 00:11:14,240
footprint is huge for example and

00:11:11,839 --> 00:11:15,680
we don't want to just like turn them all

00:11:14,240 --> 00:11:16,480
off on one side and turn one and the

00:11:15,680 --> 00:11:18,959
other and

00:11:16,480 --> 00:11:20,720
incur outages of the you know api and

00:11:18,959 --> 00:11:22,640
control point components either

00:11:20,720 --> 00:11:24,320
so again we want to do like incremental

00:11:22,640 --> 00:11:26,079
things where we start to

00:11:24,320 --> 00:11:27,920
reduce the number of nodes of each type

00:11:26,079 --> 00:11:29,040
on the left and increase the number of

00:11:27,920 --> 00:11:30,959
nodes on the right

00:11:29,040 --> 00:11:32,160
so this picture is trying to show that

00:11:30,959 --> 00:11:33,600
like midway through

00:11:32,160 --> 00:11:35,680
doing this this is what it might look

00:11:33,600 --> 00:11:37,279
like where some of the nodes are still

00:11:35,680 --> 00:11:40,000
on the blush side and some of them

00:11:37,279 --> 00:11:41,279
have also been positioned into the

00:11:40,000 --> 00:11:42,560
cubesat side and

00:11:41,279 --> 00:11:43,839
in some cases maybe they've gone

00:11:42,560 --> 00:11:44,399
completely from the bosch side and

00:11:43,839 --> 00:11:45,600
eventually

00:11:44,399 --> 00:11:47,600
of course they'll all have gone from

00:11:45,600 --> 00:11:51,519
there

00:11:47,600 --> 00:11:53,600
um in addition to those

00:11:51,519 --> 00:11:55,120
um kind of left and right descriptions

00:11:53,600 --> 00:11:56,079
of the boston cube cf that i've just

00:11:55,120 --> 00:11:59,279
given there's some

00:11:56,079 --> 00:12:00,079
some critical capabilities to make all

00:11:59,279 --> 00:12:02,399
this work right

00:12:00,079 --> 00:12:03,440
so first one of them is the network in

00:12:02,399 --> 00:12:06,800
the middle

00:12:03,440 --> 00:12:08,800
so the network it requires um vpn

00:12:06,800 --> 00:12:10,880
tunnels it requires a lot of calco

00:12:08,800 --> 00:12:13,440
configuration to be able to talk across

00:12:10,880 --> 00:12:15,040
these infrastructures and also firewall

00:12:13,440 --> 00:12:17,360
configurations

00:12:15,040 --> 00:12:19,040
um even between clusters on the keepsafe

00:12:17,360 --> 00:12:21,120
side a lot of calico work we have to do

00:12:19,040 --> 00:12:23,360
to make that happen

00:12:21,120 --> 00:12:24,560
the second thing i want to stress here

00:12:23,360 --> 00:12:26,320
is that

00:12:24,560 --> 00:12:29,120
and and this is kind of almost like the

00:12:26,320 --> 00:12:32,800
secret source of what we've done so far

00:12:29,120 --> 00:12:35,839
is we've built a federated dns solution

00:12:32,800 --> 00:12:37,760
um or emerged dns solution

00:12:35,839 --> 00:12:39,440
and that's really the magic that allows

00:12:37,760 --> 00:12:42,320
the qcf and the bosch cf

00:12:39,440 --> 00:12:44,160
systems the bosch and the qcs systems to

00:12:42,320 --> 00:12:44,959
work together as one because it is the

00:12:44,160 --> 00:12:48,079
place where

00:12:44,959 --> 00:12:49,839
the unification happens so

00:12:48,079 --> 00:12:52,399
that merged dns at the top is actually

00:12:49,839 --> 00:12:54,880
talking to the dns of both sides

00:12:52,399 --> 00:12:56,560
and so the bosch dns and bosch side and

00:12:54,880 --> 00:12:58,240
oh yeah they call it bosch dns as well

00:12:56,560 --> 00:12:58,880
on the qcs side it's talking to both of

00:12:58,240 --> 00:13:00,399
them

00:12:58,880 --> 00:13:02,000
and federating the results together so

00:13:00,399 --> 00:13:04,839
for example if a cell

00:13:02,000 --> 00:13:06,240
looks up let's say

00:13:04,839 --> 00:13:09,040
bbs.service.cf.internal

00:13:06,240 --> 00:13:11,040
as a name that merge dns result will

00:13:09,040 --> 00:13:12,560
reply back with the ip addresses of

00:13:11,040 --> 00:13:14,800
wherever we have

00:13:12,560 --> 00:13:16,880
bbs running at the time so if we've got

00:13:14,800 --> 00:13:18,639
nodes on both sides you'll get ips from

00:13:16,880 --> 00:13:21,200
both sides if we've moved fully to cube

00:13:18,639 --> 00:13:23,920
cf you'd only get cube cfps

00:13:21,200 --> 00:13:25,360
and so it's dns where everything's

00:13:23,920 --> 00:13:27,360
coming together and it's the one place

00:13:25,360 --> 00:13:29,200
that kind of knows about both sides and

00:13:27,360 --> 00:13:30,800
that's how

00:13:29,200 --> 00:13:33,440
the system works is because the

00:13:30,800 --> 00:13:35,120
discovery is all done through there

00:13:33,440 --> 00:13:37,200
and there's a lot of detail on that but

00:13:35,120 --> 00:13:37,680
um that's the magic and then it's where

00:13:37,200 --> 00:13:39,519
we have

00:13:37,680 --> 00:13:42,639
invested a lot of work and you know it's

00:13:39,519 --> 00:13:44,639
still ongoing to do that

00:13:42,639 --> 00:13:46,079
okay so let me wrap up by just kind of

00:13:44,639 --> 00:13:48,560
thinking a little bit about some final

00:13:46,079 --> 00:13:50,399
thoughts on operations right so

00:13:48,560 --> 00:13:52,480
you know keep cf pretty much mimics

00:13:50,399 --> 00:13:53,040
bosch so that's great um we can take the

00:13:52,480 --> 00:13:55,680
bosch

00:13:53,040 --> 00:13:57,279
approach and we can do things that are

00:13:55,680 --> 00:13:59,040
similar to the manifest but it's not the

00:13:57,279 --> 00:14:00,079
same right it's a facade that's the same

00:13:59,040 --> 00:14:01,199
but you get onto it

00:14:00,079 --> 00:14:03,360
there's quite a lot of detail so it's

00:14:01,199 --> 00:14:04,800
already a learning curve but where we

00:14:03,360 --> 00:14:06,399
really see the big differences is a

00:14:04,800 --> 00:14:07,920
runtime rate because the operations at

00:14:06,399 --> 00:14:10,800
runtime require you to know the whole

00:14:07,920 --> 00:14:12,320
kubernetes stack cf operator cube cf

00:14:10,800 --> 00:14:14,320
there's a lot of things replaced right

00:14:12,320 --> 00:14:15,199
no bosh you've got helm you've got no

00:14:14,320 --> 00:14:16,880
monet you've got

00:14:15,199 --> 00:14:18,639
probes and health checks you know lots

00:14:16,880 --> 00:14:20,720
of stuff changing

00:14:18,639 --> 00:14:22,480
but we think that we will come out of it

00:14:20,720 --> 00:14:24,160
eventually with a benefit we think

00:14:22,480 --> 00:14:26,240
kubernetes as a technology will be a

00:14:24,160 --> 00:14:28,399
better layer to run directly onto

00:14:26,240 --> 00:14:30,320
and we also you know have synergies with

00:14:28,399 --> 00:14:32,000
other ibm cloud services that run on

00:14:30,320 --> 00:14:34,639
kubernetes and the efficiencies of

00:14:32,000 --> 00:14:37,040
operations that that will give

00:14:34,639 --> 00:14:38,079
so you know a long way to go um we're

00:14:37,040 --> 00:14:40,000
still uh

00:14:38,079 --> 00:14:41,920
prototyping and working through this but

00:14:40,000 --> 00:14:45,760
uh i enjoyed sharing that with you today

00:14:41,920 --> 00:14:49,199
thank you so i have a question from

00:14:45,760 --> 00:14:50,399
andy hunt about uh the merged dns that

00:14:49,199 --> 00:14:51,680
we did and whether we've written about

00:14:50,399 --> 00:14:54,800
that anywhere so

00:14:51,680 --> 00:14:56,560
um not in a in a significant amount of

00:14:54,800 --> 00:14:59,839
detail no but i think we could

00:14:56,560 --> 00:15:01,839
easily not do that um it's not

00:14:59,839 --> 00:15:03,199
especially complex really it's just

00:15:01,839 --> 00:15:06,160
taking

00:15:03,199 --> 00:15:09,120
um is it's a component that has a

00:15:06,160 --> 00:15:12,720
connectivity to both the bosch system

00:15:09,120 --> 00:15:16,399
and the cube cf system and it is

00:15:12,720 --> 00:15:18,000
um basically just recursing results

00:15:16,399 --> 00:15:19,440
from both for merging the results set

00:15:18,000 --> 00:15:22,800
together so

00:15:19,440 --> 00:15:23,760
um it's pretty much just a vanilla core

00:15:22,800 --> 00:15:28,800
dns

00:15:23,760 --> 00:15:28,800
with a configuration to accomplish that

00:15:29,279 --> 00:15:41,839
yeah let me know if you ever need more

00:15:30,720 --> 00:15:41,839
detail question about that

00:15:42,079 --> 00:15:49,040
so um the other question i see here

00:15:45,440 --> 00:15:50,560
is um the question about the data

00:15:49,040 --> 00:15:53,680
integration

00:15:50,560 --> 00:15:55,680
so for the data integration we didn't um

00:15:53,680 --> 00:15:56,880
change or touch the data itself in any

00:15:55,680 --> 00:16:00,800
way all we're doing

00:15:56,880 --> 00:16:03,360
is just putting connectivity in place so

00:16:00,800 --> 00:16:05,120
you know our bosch vms can connect to

00:16:03,360 --> 00:16:09,279
our postgres databases

00:16:05,120 --> 00:16:12,160
for you know diego database uaa db ccdb

00:16:09,279 --> 00:16:14,000
locket and then we just set up so that

00:16:12,160 --> 00:16:16,720
the cube cf

00:16:14,000 --> 00:16:17,600
pods can connect to the same databases

00:16:16,720 --> 00:16:19,120
so they have

00:16:17,600 --> 00:16:21,519
the same configuration with the same

00:16:19,120 --> 00:16:24,240
postgres urls and

00:16:21,519 --> 00:16:25,759
credentials and that's all it is it's

00:16:24,240 --> 00:16:29,040
not uh it's not anything

00:16:25,759 --> 00:16:31,519
other than just giving the same database

00:16:29,040 --> 00:16:37,839
access to both the qcf system and the

00:16:31,519 --> 00:16:37,839
bosch system

00:16:50,560 --> 00:16:56,959
so i see another question uh how do we

00:16:53,440 --> 00:17:00,720
bring in the services marketplace so

00:16:56,959 --> 00:17:02,560
um we think that just you know the cf

00:17:00,720 --> 00:17:05,760
services is just going to come along

00:17:02,560 --> 00:17:08,000
with it so it's the same ccdb

00:17:05,760 --> 00:17:09,600
that's being used so we still have all

00:17:08,000 --> 00:17:10,799
of our service broker definitions

00:17:09,600 --> 00:17:13,839
services

00:17:10,799 --> 00:17:16,400
instances um all of that marketplace

00:17:13,839 --> 00:17:18,240
will come along

00:17:16,400 --> 00:17:19,439
you know specifically for ibm we kind of

00:17:18,240 --> 00:17:21,439
um

00:17:19,439 --> 00:17:22,720
went away from the cf marketplace in

00:17:21,439 --> 00:17:25,120
favor of a more

00:17:22,720 --> 00:17:26,799
generic service catalog in ibm cloud but

00:17:25,120 --> 00:17:28,160
the cf marketplace still does exist and

00:17:26,799 --> 00:17:30,320
you can still do cloud foundry service

00:17:28,160 --> 00:17:33,840
bindings and we expect to continue that

00:17:30,320 --> 00:17:33,840
with keep cf

00:17:39,919 --> 00:17:43,280
see any other questions

00:17:43,840 --> 00:17:50,559
uh so chen denzel you asked uh

00:17:48,080 --> 00:17:52,799
about whether the customer will have a

00:17:50,559 --> 00:17:55,840
choice on which side they run

00:17:52,799 --> 00:17:57,440
so we don't expect so um

00:17:55,840 --> 00:17:59,360
in the goal here would be that it would

00:17:57,440 --> 00:18:00,400
be seamless and also the goal is that we

00:17:59,360 --> 00:18:03,520
eventually migrate

00:18:00,400 --> 00:18:06,960
the whole thing over um

00:18:03,520 --> 00:18:07,679
and it and not so probably just from a

00:18:06,960 --> 00:18:09,679
go to market

00:18:07,679 --> 00:18:11,120
point of view we don't see a reason to

00:18:09,679 --> 00:18:12,480
want to offer that and

00:18:11,120 --> 00:18:14,559
it kind of works counter to what we're

00:18:12,480 --> 00:18:15,039
trying to do if people are being able to

00:18:14,559 --> 00:18:17,120
stop

00:18:15,039 --> 00:18:18,480
the migration but from a technical point

00:18:17,120 --> 00:18:20,000
of view it's kind of the same right what

00:18:18,480 --> 00:18:21,760
we've done is we've just got one big

00:18:20,000 --> 00:18:24,559
diego system and it doesn't

00:18:21,760 --> 00:18:25,440
have any identifiers to i mean we could

00:18:24,559 --> 00:18:27,280
do something maybe

00:18:25,440 --> 00:18:29,039
you know overlay something like

00:18:27,280 --> 00:18:30,320
isolation segments or something to try

00:18:29,039 --> 00:18:31,440
to control it but the way it is at the

00:18:30,320 --> 00:18:33,360
moment is that

00:18:31,440 --> 00:18:35,120
everything's just an application in an

00:18:33,360 --> 00:18:37,840
lrp from diego's point of view and it

00:18:35,120 --> 00:18:40,000
can just schedule it over onto any cell

00:18:37,840 --> 00:18:40,880
so with the cells on the qcf side of the

00:18:40,000 --> 00:18:43,840
cells on the

00:18:40,880 --> 00:18:44,960
bosch original side diego doesn't know

00:18:43,840 --> 00:18:46,960
or care it's just

00:18:44,960 --> 00:18:48,400
saying hey i've got this many cells in

00:18:46,960 --> 00:18:50,160
this many apps and i need to schedule

00:18:48,400 --> 00:18:52,720
and distribute them

00:18:50,160 --> 00:18:53,919
so just from a diego point of view we

00:18:52,720 --> 00:18:55,280
don't we haven't

00:18:53,919 --> 00:18:57,120
considered even trying to put such a

00:18:55,280 --> 00:18:58,160
control layer and neither we want diego

00:18:57,120 --> 00:19:00,080
to just treat it all

00:18:58,160 --> 00:19:02,080
as you know one big set of cells and

00:19:00,080 --> 00:19:05,760
just honor our

00:19:02,080 --> 00:19:05,760
az definitions and nothing more

00:19:07,120 --> 00:19:14,320
see any other questions

00:19:11,360 --> 00:19:14,720
so i think we're up on time in the q a

00:19:14,320 --> 00:19:16,160
i'd

00:19:14,720 --> 00:19:18,559
be very happy to hear directly from

00:19:16,160 --> 00:19:21,679
anyone who's got any other questions um

00:19:18,559 --> 00:19:24,160
you know um there's obviously the cloud

00:19:21,679 --> 00:19:26,160
foundry community slack we we're in

00:19:24,160 --> 00:19:29,039
there you can reach us so we

00:19:26,160 --> 00:19:30,400
chat a little bit in the qcf dev channel

00:19:29,039 --> 00:19:32,480
among others

00:19:30,400 --> 00:19:33,440
so if you prefer to reach out over slack

00:19:32,480 --> 00:19:35,679
go ahead and do that

00:19:33,440 --> 00:19:36,880
that'd be great to hear from people all

00:19:35,679 --> 00:19:39,880
right thank you

00:19:36,880 --> 00:19:42,880
thanks for the questions thanks for

00:19:39,880 --> 00:19:42,880

YouTube URL: https://www.youtube.com/watch?v=MEqn0g2DA6o


