Title: Deep Dive: CF API on K8s - Piyali Banerjee & Michael Gresham, Vmware
Publication date: 2020-10-26
Playlist: Cloud Foundry Summit Europe 2020
Description: 
	Deep Dive: CF API on K8s - Piyali Banerjee & Michael Gresham, Vmware

What happens when the strengths of Cloud Foundry and Kubernetes are combined? A radically enhanced experience for developers and operators. This talk provides an overview of the work the CF API team (CAPI) has done over the past year to evolve the Cloud Foundry API to work natively with Kubernetes. Piyali will cover how the CF API server and related components are organized in the cluster, and how major workflows supported by the CF API (i.e.: app staging, stack updates, deployment) works in a system without BOSH and Diego through some exciting demos! Mike (CAPI PM) will share what CAPIâ€™s roadmap will look like for the rest of 2020.
Captions: 
	00:00:00,160 --> 00:00:07,279
hi everyone uh welcome to the cf api

00:00:03,600 --> 00:00:08,480
on kate's talk uh i'm mike gresham i'm

00:00:07,279 --> 00:00:13,440
the product manager

00:00:08,480 --> 00:00:15,360
for the cf api on kate's team at vmware

00:00:13,440 --> 00:00:18,320
and i'm pioli and i'm an engineer on the

00:00:15,360 --> 00:00:18,320
same team at vmware

00:00:21,520 --> 00:00:29,760
so today pialli is going to

00:00:24,960 --> 00:00:32,480
give an overview of capycate's release

00:00:29,760 --> 00:00:34,480
and then she's going to talk about some

00:00:32,480 --> 00:00:38,160
key features and differences

00:00:34,480 --> 00:00:41,120
in uh cappy on kate's

00:00:38,160 --> 00:00:41,920
i'm going to review the road map and

00:00:41,120 --> 00:00:45,039
we'll end

00:00:41,920 --> 00:00:48,320
with some useful resources so

00:00:45,039 --> 00:00:51,120
hands over to pialy great thank you mike

00:00:48,320 --> 00:00:53,199
for the overview so now let's dive into

00:00:51,120 --> 00:00:55,440
an overview of what you get out of the

00:00:53,199 --> 00:00:58,320
box for cappy case release

00:00:55,440 --> 00:01:00,160
so most of the cf api components that

00:00:58,320 --> 00:01:00,559
you know and love such as the cf api

00:01:00,160 --> 00:01:03,440
server

00:01:00,559 --> 00:01:05,600
cf-api worker the deployment updater and

00:01:03,440 --> 00:01:07,439
the clock are all components that run in

00:01:05,600 --> 00:01:10,560
their own kubernetes pods

00:01:07,439 --> 00:01:12,799
in the cf system namespace

00:01:10,560 --> 00:01:14,560
there are also some new components the

00:01:12,799 --> 00:01:17,200
cf api controllers and

00:01:14,560 --> 00:01:18,479
the register buddy we will get into what

00:01:17,200 --> 00:01:21,520
these components are for

00:01:18,479 --> 00:01:21,520
in the future slides

00:01:22,640 --> 00:01:26,720
now first let's talk about what's

00:01:24,080 --> 00:01:28,560
different in the cf push workflow

00:01:26,720 --> 00:01:30,479
now while the final final user

00:01:28,560 --> 00:01:32,560
experience is definitely the same

00:01:30,479 --> 00:01:34,159
between the cf on bosch and diego world

00:01:32,560 --> 00:01:36,400
and cf for cates

00:01:34,159 --> 00:01:37,439
the implementation and the way cf push

00:01:36,400 --> 00:01:40,880
works is different

00:01:37,439 --> 00:01:43,439
in cf for kate's so the cf push workflow

00:01:40,880 --> 00:01:45,840
can essentially be divided into two main

00:01:43,439 --> 00:01:47,680
phases or two main parts the staging

00:01:45,840 --> 00:01:50,799
part and the deployment part

00:01:47,680 --> 00:01:53,200
so first let's talk about staging

00:01:50,799 --> 00:01:54,560
staging in the cf on bosch and diego

00:01:53,200 --> 00:01:58,159
world worked with

00:01:54,560 --> 00:02:01,439
cappy desiring a staging task to diego

00:01:58,159 --> 00:02:03,040
and the staging task included

00:02:01,439 --> 00:02:05,200
things such as the build pack and

00:02:03,040 --> 00:02:07,119
package url from the blob store so that

00:02:05,200 --> 00:02:08,879
the diego cell would know

00:02:07,119 --> 00:02:10,800
where to pull this information from in

00:02:08,879 --> 00:02:12,959
order to actually build the app

00:02:10,800 --> 00:02:15,120
and the actual staging happened in a

00:02:12,959 --> 00:02:18,640
garden container in a diego cell

00:02:15,120 --> 00:02:19,440
in diego now in a diego less cf for

00:02:18,640 --> 00:02:21,840
kate's world

00:02:19,440 --> 00:02:23,760
how does staging occur there is this new

00:02:21,840 --> 00:02:24,879
component that cappy is interacting with

00:02:23,760 --> 00:02:27,520
called kpac

00:02:24,879 --> 00:02:28,800
which is a kubernetes native container

00:02:27,520 --> 00:02:31,760
build service

00:02:28,800 --> 00:02:32,560
and capex primary purpose in this flow

00:02:31,760 --> 00:02:35,040
is to

00:02:32,560 --> 00:02:37,280
use cloud native build packs in order to

00:02:35,040 --> 00:02:39,599
build runnable app images

00:02:37,280 --> 00:02:40,480
so cappy provides an image custom

00:02:39,599 --> 00:02:43,120
resource

00:02:40,480 --> 00:02:45,280
to kpak and then kpac automatically

00:02:43,120 --> 00:02:47,360
builds the app and places the image in a

00:02:45,280 --> 00:02:49,040
configured app image registry

00:02:47,360 --> 00:02:52,160
we'll definitely be going through this

00:02:49,040 --> 00:02:54,400
process in more detail in the next slide

00:02:52,160 --> 00:02:55,440
now after staging the next major phase

00:02:54,400 --> 00:02:58,159
in cf push is

00:02:55,440 --> 00:02:59,840
deployment so how deployment worked in

00:02:58,159 --> 00:03:02,319
cf on boston diego

00:02:59,840 --> 00:03:04,000
is that cappy would desire an lrp or

00:03:02,319 --> 00:03:05,760
long running process similar to how it

00:03:04,000 --> 00:03:06,480
desired a staging task in the staging

00:03:05,760 --> 00:03:09,280
flow

00:03:06,480 --> 00:03:11,519
and diego would take the lrp which

00:03:09,280 --> 00:03:12,319
includes the droplet download url for

00:03:11,519 --> 00:03:14,560
example

00:03:12,319 --> 00:03:16,640
as well as various settings such as how

00:03:14,560 --> 00:03:20,080
many instances of the app is desired

00:03:16,640 --> 00:03:20,480
and cpu and memory limits and the diego

00:03:20,080 --> 00:03:23,440
cell

00:03:20,480 --> 00:03:24,640
garden container would actually host

00:03:23,440 --> 00:03:26,720
this running app

00:03:24,640 --> 00:03:27,840
and would make sure that number of

00:03:26,720 --> 00:03:29,440
instances are the same

00:03:27,840 --> 00:03:30,879
as desired and that everything is

00:03:29,440 --> 00:03:32,959
running smoothly

00:03:30,879 --> 00:03:35,519
in cf for kate since we don't have diego

00:03:32,959 --> 00:03:38,879
anymore where do these app instances run

00:03:35,519 --> 00:03:41,360
so similar to the cf on bosch and diego

00:03:38,879 --> 00:03:43,840
flow cappy sends the desired lrp request

00:03:41,360 --> 00:03:47,120
to irene instead of to diego

00:03:43,840 --> 00:03:48,480
and irini then spins up a staple set

00:03:47,120 --> 00:03:51,519
with all of the information that's in

00:03:48,480 --> 00:03:52,319
the lrp and this kubernetes stateful set

00:03:51,519 --> 00:03:54,879
manages

00:03:52,319 --> 00:03:57,040
several pods and these pods there's one

00:03:54,879 --> 00:03:58,959
pod for each app instance that's running

00:03:57,040 --> 00:04:01,360
for the app

00:03:58,959 --> 00:04:02,080
and one thing that you might note is

00:04:01,360 --> 00:04:05,040
that

00:04:02,080 --> 00:04:07,439
the blob store from the cf on bosch and

00:04:05,040 --> 00:04:08,319
diego which used to hold the build packs

00:04:07,439 --> 00:04:10,239
and the packages

00:04:08,319 --> 00:04:12,080
droplets and resource cache are now

00:04:10,239 --> 00:04:13,120
replaced by a blob store that only has

00:04:12,080 --> 00:04:15,280
resource cache

00:04:13,120 --> 00:04:17,040
as well as a package registry we'll go

00:04:15,280 --> 00:04:19,759
over that in more detail as well in the

00:04:17,040 --> 00:04:19,759
following slide

00:04:20,479 --> 00:04:24,479
so now let's deep dive into the staging

00:04:23,040 --> 00:04:25,520
workflow that we touched upon in the

00:04:24,479 --> 00:04:29,840
previous slide

00:04:25,520 --> 00:04:31,919
with kpac the first phase is that cappy

00:04:29,840 --> 00:04:35,040
sets up the build process

00:04:31,919 --> 00:04:36,639
and by this first after the post v3

00:04:35,040 --> 00:04:38,720
builds and point is hit

00:04:36,639 --> 00:04:41,199
cappy actually does a couple things it

00:04:38,720 --> 00:04:43,120
first creates an image custom resource

00:04:41,199 --> 00:04:44,400
an image custom resource includes the

00:04:43,120 --> 00:04:46,960
app metadata

00:04:44,400 --> 00:04:49,199
as well as the app source code location

00:04:46,960 --> 00:04:51,600
and also a custom builder

00:04:49,199 --> 00:04:53,440
and the custom builder is essentially a

00:04:51,600 --> 00:04:56,400
collection of cloud native build packs

00:04:53,440 --> 00:04:59,520
that are required to run the app so

00:04:56,400 --> 00:05:03,039
all of this information is

00:04:59,520 --> 00:05:06,320
used by kpac in order to actually

00:05:03,039 --> 00:05:08,479
build the app so the next phase is that

00:05:06,320 --> 00:05:10,880
kpac builds the oci image for the app

00:05:08,479 --> 00:05:12,479
and places it in the app image registry

00:05:10,880 --> 00:05:14,160
we touched upon this a little bit in the

00:05:12,479 --> 00:05:16,000
previous slide but i'll go into detail

00:05:14,160 --> 00:05:17,440
as to what kpac is actually doing to

00:05:16,000 --> 00:05:19,759
make this possible

00:05:17,440 --> 00:05:21,280
so the kpac has various controllers for

00:05:19,759 --> 00:05:23,360
each of their resources

00:05:21,280 --> 00:05:25,199
and the image controller for kpac

00:05:23,360 --> 00:05:27,360
notices that there is a new

00:05:25,199 --> 00:05:28,960
image custom resource that can be built

00:05:27,360 --> 00:05:31,440
in the previous phase

00:05:28,960 --> 00:05:32,720
so the image controller creates a build

00:05:31,440 --> 00:05:34,479
custom resource

00:05:32,720 --> 00:05:36,479
and this build custom resource includes

00:05:34,479 --> 00:05:38,000
similar information the metadata source

00:05:36,479 --> 00:05:40,720
code custom builder

00:05:38,000 --> 00:05:41,520
and the build controller notices that

00:05:40,720 --> 00:05:44,560
there's a new

00:05:41,520 --> 00:05:47,600
build custom resource and spins up a new

00:05:44,560 --> 00:05:49,520
pod a build pod and this build pod

00:05:47,600 --> 00:05:50,880
is what actually does the action of

00:05:49,520 --> 00:05:53,199
building the app

00:05:50,880 --> 00:05:54,800
and packages the source code and cnbs

00:05:53,199 --> 00:05:57,840
into an oci image

00:05:54,800 --> 00:06:00,160
that can be run from a container and the

00:05:57,840 --> 00:06:02,160
build pod also sends this final oci

00:06:00,160 --> 00:06:03,440
image to the app image registry that was

00:06:02,160 --> 00:06:06,880
configured

00:06:03,440 --> 00:06:09,360
after the buildpod the build pod

00:06:06,880 --> 00:06:11,919
successfully builds the oci image

00:06:09,360 --> 00:06:13,840
it updates the build custom resource

00:06:11,919 --> 00:06:16,880
with a status successful

00:06:13,840 --> 00:06:21,440
that this build is complete and the oci

00:06:16,880 --> 00:06:24,160
image is in the app image registry

00:06:21,440 --> 00:06:26,080
so phase three is how does kpac then

00:06:24,160 --> 00:06:27,440
communicate with cappy that the build

00:06:26,080 --> 00:06:29,759
has been complete

00:06:27,440 --> 00:06:31,280
and that capi can continue with the cf

00:06:29,759 --> 00:06:32,960
push workflow

00:06:31,280 --> 00:06:35,120
so phase three is the build process

00:06:32,960 --> 00:06:36,000
completes with app's oci image reference

00:06:35,120 --> 00:06:39,120
being recorded

00:06:36,000 --> 00:06:41,039
in ccdb which sets up for the following

00:06:39,120 --> 00:06:42,800
cf push steps

00:06:41,039 --> 00:06:44,880
and how this works is we have a new

00:06:42,800 --> 00:06:47,680
component as i discussed in the overview

00:06:44,880 --> 00:06:49,680
the cf api controllers the cf-api

00:06:47,680 --> 00:06:50,319
controller is essentially a collection

00:06:49,680 --> 00:06:52,479
of

00:06:50,319 --> 00:06:54,720
watchers you can think of it as that

00:06:52,479 --> 00:06:57,039
watches various k-pac resources and

00:06:54,720 --> 00:06:59,280
performs actions depending on the events

00:06:57,039 --> 00:07:02,160
that are being done on these resources

00:06:59,280 --> 00:07:02,720
so we have a new build controller which

00:07:02,160 --> 00:07:05,039
watches

00:07:02,720 --> 00:07:06,400
for various status updates in the build

00:07:05,039 --> 00:07:09,039
custom resource

00:07:06,400 --> 00:07:10,479
and once the build controller sees that

00:07:09,039 --> 00:07:12,880
the build has this

00:07:10,479 --> 00:07:13,759
succeeded and true condition in the

00:07:12,880 --> 00:07:16,000
status

00:07:13,759 --> 00:07:17,680
the build controller then informs capi

00:07:16,000 --> 00:07:20,319
that the build was successful

00:07:17,680 --> 00:07:20,960
and sends the final built oci image

00:07:20,319 --> 00:07:23,520
reference

00:07:20,960 --> 00:07:25,840
back to cappy and this image reference

00:07:23,520 --> 00:07:28,960
is then recorded into ccdb

00:07:25,840 --> 00:07:30,560
in the droplet so now the droplet and

00:07:28,960 --> 00:07:31,919
there was an empty droplet that was

00:07:30,560 --> 00:07:34,160
created in phase one

00:07:31,919 --> 00:07:36,319
the empty droplet is populated with this

00:07:34,160 --> 00:07:38,080
final oci image reference

00:07:36,319 --> 00:07:39,840
so essentially phase three is about

00:07:38,080 --> 00:07:44,720
bookkeeping and this concludes the

00:07:39,840 --> 00:07:47,360
staging process in kpac next i'll walk

00:07:44,720 --> 00:07:50,080
into a new functionality in capi which

00:07:47,360 --> 00:07:50,639
is performing stack updates in cf for

00:07:50,080 --> 00:07:52,400
kate's

00:07:50,639 --> 00:07:54,000
previously this workflow was taken care

00:07:52,400 --> 00:07:57,120
of by diego

00:07:54,000 --> 00:07:58,800
but now cappy is involved

00:07:57,120 --> 00:08:00,479
in making sure that these stack updates

00:07:58,800 --> 00:08:01,599
can happen so that if there is a minor

00:08:00,479 --> 00:08:04,800
stack update

00:08:01,599 --> 00:08:06,319
the operator can easily perform a stack

00:08:04,800 --> 00:08:08,080
update without having to wait for a new

00:08:06,319 --> 00:08:10,639
copy release

00:08:08,080 --> 00:08:11,199
so in this flow first after the platform

00:08:10,639 --> 00:08:14,240
operator

00:08:11,199 --> 00:08:16,960
updates the stack using coupe control

00:08:14,240 --> 00:08:17,440
phase one is kpac automatically rebases

00:08:16,960 --> 00:08:21,039
the app

00:08:17,440 --> 00:08:23,120
image and how this works is kpak rebases

00:08:21,039 --> 00:08:24,800
the app image and there is a new

00:08:23,120 --> 00:08:26,160
image reference at the end of that

00:08:24,800 --> 00:08:30,000
staging process

00:08:26,160 --> 00:08:32,719
in the app image registry then capec

00:08:30,000 --> 00:08:34,640
updates the corresponding image custom

00:08:32,719 --> 00:08:37,360
resource that cappy has built

00:08:34,640 --> 00:08:38,560
when the app was first pushed and

00:08:37,360 --> 00:08:42,080
updates this with

00:08:38,560 --> 00:08:44,240
the latest image of the rebased image

00:08:42,080 --> 00:08:46,320
and also with a latest build reason of

00:08:44,240 --> 00:08:49,519
stack this latest build reason will be

00:08:46,320 --> 00:08:49,519
important for the next phase

00:08:49,760 --> 00:08:53,920
the next phase which is phase two is the

00:08:51,519 --> 00:08:55,360
cf api controllers auto deploy the

00:08:53,920 --> 00:08:56,959
rebased image

00:08:55,360 --> 00:08:58,800
so there is an image controller in the

00:08:56,959 --> 00:08:59,680
cf api controllers in the previous slide

00:08:58,800 --> 00:09:00,399
we were talking about the build

00:08:59,680 --> 00:09:01,680
controller

00:09:00,399 --> 00:09:03,920
but now we'll talk about the image

00:09:01,680 --> 00:09:04,399
controller so the image controller sees

00:09:03,920 --> 00:09:07,120
that

00:09:04,399 --> 00:09:08,480
the app's image has been updated with a

00:09:07,120 --> 00:09:11,120
new image reference

00:09:08,480 --> 00:09:12,880
and it also sees that this image has

00:09:11,120 --> 00:09:14,160
been built with the latest build reason

00:09:12,880 --> 00:09:15,839
of stack

00:09:14,160 --> 00:09:17,200
with this information the image

00:09:15,839 --> 00:09:19,440
controller then

00:09:17,200 --> 00:09:22,000
patches the app's stateful set as you

00:09:19,440 --> 00:09:23,680
recall irene spun up a staple set for

00:09:22,000 --> 00:09:25,839
this app previously when this app was

00:09:23,680 --> 00:09:26,720
first pushed so the image controller

00:09:25,839 --> 00:09:28,880
updates

00:09:26,720 --> 00:09:30,000
that stateful set with the new image

00:09:28,880 --> 00:09:33,279
reference

00:09:30,000 --> 00:09:36,080
and the and the new image reference now

00:09:33,279 --> 00:09:37,200
includes the new stack and with the

00:09:36,080 --> 00:09:39,360
kubernetes

00:09:37,200 --> 00:09:41,440
rolling update strategy for the stateful

00:09:39,360 --> 00:09:44,000
set the pods get rolled out one at a

00:09:41,440 --> 00:09:46,160
time with this new image reference

00:09:44,000 --> 00:09:48,000
and this definitely leverages the

00:09:46,160 --> 00:09:51,120
kubernetes rolling update and

00:09:48,000 --> 00:09:52,880
kubernetes stateful sets and basically

00:09:51,120 --> 00:09:54,720
it is a very hands-off approach

00:09:52,880 --> 00:09:56,560
and very automated approach in

00:09:54,720 --> 00:09:58,880
performing the stack update

00:09:56,560 --> 00:09:59,600
the final step is that the cf-api

00:09:58,880 --> 00:10:01,839
controllers

00:09:59,600 --> 00:10:02,800
also does the similar bookkeeping to

00:10:01,839 --> 00:10:04,560
cctv

00:10:02,800 --> 00:10:06,720
to make sure that the droplet for the

00:10:04,560 --> 00:10:08,959
app is updated with this new stack as

00:10:06,720 --> 00:10:10,720
well

00:10:08,959 --> 00:10:12,480
and there's also going to be a lightning

00:10:10,720 --> 00:10:15,360
talk demo by me and

00:10:12,480 --> 00:10:16,399
the pm of the release integration team

00:10:15,360 --> 00:10:19,040
paul boren

00:10:16,399 --> 00:10:19,600
at 2 40 so please come and join us for a

00:10:19,040 --> 00:10:23,600
demo

00:10:19,600 --> 00:10:23,600
of this very new functionality

00:10:24,640 --> 00:10:27,680
and final feature i'll talk about is the

00:10:26,560 --> 00:10:29,519
blob store

00:10:27,680 --> 00:10:30,959
so as you've noticed before the blob

00:10:29,519 --> 00:10:32,640
store is definitely

00:10:30,959 --> 00:10:34,079
looking very different in the cf for

00:10:32,640 --> 00:10:35,600
kate's world so

00:10:34,079 --> 00:10:37,680
let's dive into that a little bit in the

00:10:35,600 --> 00:10:38,399
cf on bosch diego world what was in the

00:10:37,680 --> 00:10:41,200
blob store

00:10:38,399 --> 00:10:42,959
build packs packages droplets as well as

00:10:41,200 --> 00:10:44,640
a resource cache which is primarily used

00:10:42,959 --> 00:10:46,480
for resource matching

00:10:44,640 --> 00:10:47,920
there were some pain points associated

00:10:46,480 --> 00:10:51,279
with the blob store in

00:10:47,920 --> 00:10:54,320
cf on boston diego first there was

00:10:51,279 --> 00:10:56,240
the s3 compatibility requirement then

00:10:54,320 --> 00:10:57,839
there were some blob store specific

00:10:56,240 --> 00:10:59,600
issues that were pretty difficult to

00:10:57,839 --> 00:11:03,279
debug from time to time

00:10:59,600 --> 00:11:05,040
and the logic to handle the cappy to

00:11:03,279 --> 00:11:05,839
blob store interactions was pretty

00:11:05,040 --> 00:11:08,720
complex

00:11:05,839 --> 00:11:10,959
in ccng resulting in numerous edge cases

00:11:08,720 --> 00:11:12,959
which were pretty challenging to handle

00:11:10,959 --> 00:11:14,800
so in cf for kate's what's in the blob

00:11:12,959 --> 00:11:16,480
store only the resource

00:11:14,800 --> 00:11:19,040
cache which is used for resource

00:11:16,480 --> 00:11:21,040
matching and but what happens with the

00:11:19,040 --> 00:11:23,920
build packs packages and droplets

00:11:21,040 --> 00:11:25,680
so for build packs we use custom

00:11:23,920 --> 00:11:27,440
builders in cf for case and custom

00:11:25,680 --> 00:11:28,399
builders is essentially a collection of

00:11:27,440 --> 00:11:30,320
cnbs

00:11:28,399 --> 00:11:33,120
and the image for the custom builders is

00:11:30,320 --> 00:11:35,279
stored in a configured app registry

00:11:33,120 --> 00:11:37,519
and for packages there's actually a new

00:11:35,279 --> 00:11:40,079
component that i first showed

00:11:37,519 --> 00:11:42,480
in the overview of cabbie kate's release

00:11:40,079 --> 00:11:45,040
which is called the registry buddy

00:11:42,480 --> 00:11:47,600
and this registry buddy is co-located in

00:11:45,040 --> 00:11:48,160
both the cf api server pod as well as

00:11:47,600 --> 00:11:51,360
the cf

00:11:48,160 --> 00:11:53,839
api worker pod and essentially

00:11:51,360 --> 00:11:56,160
handles everything from converting the

00:11:53,839 --> 00:11:56,720
source code to a zip file and then to an

00:11:56,160 --> 00:11:59,440
image

00:11:56,720 --> 00:12:01,920
and storing this final package image in

00:11:59,440 --> 00:12:04,399
a configured package registry

00:12:01,920 --> 00:12:06,480
now this package registry is an optional

00:12:04,399 --> 00:12:09,680
component you can optionally store this

00:12:06,480 --> 00:12:12,720
in the blob store if you prefer and also

00:12:09,680 --> 00:12:15,440
both private and public registries are

00:12:12,720 --> 00:12:16,800
accepted so for droplets we don't have a

00:12:15,440 --> 00:12:19,920
droplet image per se

00:12:16,800 --> 00:12:20,880
because and the full apps oci image is

00:12:19,920 --> 00:12:23,279
essentially

00:12:20,880 --> 00:12:25,200
the same thing as a droplet which is the

00:12:23,279 --> 00:12:26,880
app source code and the build packs

00:12:25,200 --> 00:12:28,320
but additionally has the stack

00:12:26,880 --> 00:12:30,720
information as well

00:12:28,320 --> 00:12:32,800
so the app's oci image as we discussed

00:12:30,720 --> 00:12:36,320
previously is built by kpac and stored

00:12:32,800 --> 00:12:36,320
in the configured app registry

00:12:36,959 --> 00:12:41,279
so now turning over to mike for the

00:12:38,560 --> 00:12:41,279
roadmap review

00:12:41,519 --> 00:12:44,959
thanks a lot pialli for all of that

00:12:43,360 --> 00:12:48,560
detailed and

00:12:44,959 --> 00:12:51,680
super uh informational deep dive

00:12:48,560 --> 00:12:55,200
on uh the differences in c

00:12:51,680 --> 00:12:56,240
for kate's so really quickly i'm going

00:12:55,200 --> 00:12:59,200
to talk about

00:12:56,240 --> 00:12:59,680
what's on our roadmap so the first thing

00:12:59,200 --> 00:13:02,480
is

00:12:59,680 --> 00:13:03,200
pragmatic parity which basically means

00:13:02,480 --> 00:13:06,399
that we

00:13:03,200 --> 00:13:09,440
want to you know achieve parity with

00:13:06,399 --> 00:13:12,880
uh the existing cappy on

00:13:09,440 --> 00:13:14,800
uh vm's capyon diego product

00:13:12,880 --> 00:13:16,160
and we also want to keep in mind that a

00:13:14,800 --> 00:13:18,480
lot of things are going to be different

00:13:16,160 --> 00:13:19,040
now that we're on kate's so we want to

00:13:18,480 --> 00:13:21,440
have

00:13:19,040 --> 00:13:22,959
parity where it makes sense a great

00:13:21,440 --> 00:13:24,000
example of this is that build pack

00:13:22,959 --> 00:13:27,680
administration

00:13:24,000 --> 00:13:31,279
will now be done outside of cappy

00:13:27,680 --> 00:13:34,399
when when working with capyan cates

00:13:31,279 --> 00:13:37,279
the next thing is we want to surface uh

00:13:34,399 --> 00:13:38,720
kate's in capi and there's a lot of

00:13:37,279 --> 00:13:40,800
interesting information

00:13:38,720 --> 00:13:42,000
in the underlying kate's infrastructure

00:13:40,800 --> 00:13:44,480
and apis

00:13:42,000 --> 00:13:45,040
and we want to figure out what will be

00:13:44,480 --> 00:13:48,079
useful

00:13:45,040 --> 00:13:50,560
and surface that in capi

00:13:48,079 --> 00:13:52,000
great example uh piali was just talking

00:13:50,560 --> 00:13:55,440
about stack updates

00:13:52,000 --> 00:13:58,800
and so uh we'll be surfacing information

00:13:55,440 --> 00:14:02,480
about the stack uh in in the

00:13:58,800 --> 00:14:05,279
apis looking at applications

00:14:02,480 --> 00:14:07,120
um and finally i just want to mention

00:14:05,279 --> 00:14:08,079
that we're always open to feedback we

00:14:07,120 --> 00:14:09,600
want to hear

00:14:08,079 --> 00:14:11,279
you know what you think will be

00:14:09,600 --> 00:14:13,199
interesting um

00:14:11,279 --> 00:14:15,680
about who about cappy running on

00:14:13,199 --> 00:14:17,040
kubernetes and we want to hear

00:14:15,680 --> 00:14:18,800
you know what things you're excited

00:14:17,040 --> 00:14:22,399
about what can we

00:14:18,800 --> 00:14:22,399
look into prioritizing

00:14:25,519 --> 00:14:30,160
and finally speaking of you know

00:14:28,480 --> 00:14:31,839
questions and feedback

00:14:30,160 --> 00:14:33,440
uh here are all the different ways you

00:14:31,839 --> 00:14:36,959
can reach out to us

00:14:33,440 --> 00:14:40,240
our github repos our slack channel

00:14:36,959 --> 00:14:43,360
we are the cf api on kubernetes team

00:14:40,240 --> 00:14:45,279
um and uh

00:14:43,360 --> 00:14:46,959
the slack channel you can find us in is

00:14:45,279 --> 00:14:49,120
cappy kate's release

00:14:46,959 --> 00:14:50,079
uh and our interrupt will work in both

00:14:49,120 --> 00:14:53,440
the cappy and

00:14:50,079 --> 00:14:54,880
cappy kate's release channels um so you

00:14:53,440 --> 00:14:56,639
can add interrupt

00:14:54,880 --> 00:14:58,000
and then our channel name and the

00:14:56,639 --> 00:15:00,160
interrupt will work in either one of

00:14:58,000 --> 00:15:01,920
those places on the cloud foundry slack

00:15:00,160 --> 00:15:03,519
uh there's also contact information here

00:15:01,920 --> 00:15:06,560
for the release integration team

00:15:03,519 --> 00:15:07,760
as well as our github repos and please

00:15:06,560 --> 00:15:10,560
please please join us

00:15:07,760 --> 00:15:13,440
for our office hours uh which will be

00:15:10,560 --> 00:15:17,120
from 2 40 to 3 p.m

00:15:13,440 --> 00:15:19,360
cest so we'll look forward to seeing you

00:15:17,120 --> 00:15:19,360
there

00:15:20,399 --> 00:15:23,199
thanks everyone

00:15:24,959 --> 00:15:29,199
thank you for joining us okay

00:15:29,360 --> 00:15:33,920
okay so the first question in the q a

00:15:32,720 --> 00:15:37,839
that we got

00:15:33,920 --> 00:15:39,519
was will cf ssh still work in the new cf

00:15:37,839 --> 00:15:42,959
for kate's world

00:15:39,519 --> 00:15:45,040
um it doesn't currently work but

00:15:42,959 --> 00:15:46,320
mike has said that there's a roadmap for

00:15:45,040 --> 00:15:49,759
it yeah

00:15:46,320 --> 00:15:52,320
i think the plan is for cfssh to work

00:15:49,759 --> 00:15:55,839
in ncf for kids but it does not

00:15:52,320 --> 00:15:55,839
currently work right now

00:15:57,279 --> 00:16:01,120
then i believe there's also a question

00:15:59,440 --> 00:16:04,000
in the chat

00:16:01,120 --> 00:16:05,040
are there plans to provide a registry in

00:16:04,000 --> 00:16:07,360
cf for cates

00:16:05,040 --> 00:16:09,839
or will it always require an external

00:16:07,360 --> 00:16:09,839
registry

00:16:14,340 --> 00:16:17,820
[Music]

00:16:20,839 --> 00:16:23,839
um

00:16:25,600 --> 00:16:28,079
is this

00:16:29,600 --> 00:16:35,839
i'm actually not sure

00:16:32,800 --> 00:16:38,880
like what kind of registry

00:16:35,839 --> 00:16:41,600
this yeah it's different the app or the

00:16:38,880 --> 00:16:41,600
package right

00:16:46,800 --> 00:16:50,880
let me also type that follow-up question

00:16:49,120 --> 00:16:53,920
out in case

00:16:50,880 --> 00:16:57,279
uh reuben missed it

00:16:53,920 --> 00:16:57,279
i'll start a thread ruben on your

00:17:02,839 --> 00:17:05,839
question

00:17:17,600 --> 00:17:23,679
okay reuben added his question to the q

00:17:21,199 --> 00:17:23,679
a as well

00:17:28,960 --> 00:17:32,240
yeah so there are two types of

00:17:31,280 --> 00:17:34,080
registries

00:17:32,240 --> 00:17:35,360
in cf for kate's right now for more

00:17:34,080 --> 00:17:37,039
context around what the difference

00:17:35,360 --> 00:17:37,600
between the app and the package registry

00:17:37,039 --> 00:17:40,960
is

00:17:37,600 --> 00:17:43,840
so the app registry uh

00:17:40,960 --> 00:17:44,559
holds all the oci images for the full

00:17:43,840 --> 00:17:46,640
app

00:17:44,559 --> 00:17:48,880
um and for the full like runable app and

00:17:46,640 --> 00:17:49,200
the package registry holds the images

00:17:48,880 --> 00:17:51,919
for

00:17:49,200 --> 00:17:54,400
just the source code for the apps so

00:17:51,919 --> 00:17:57,440
right now both of those are

00:17:54,400 --> 00:18:00,480
configurable and right now

00:17:57,440 --> 00:18:03,520
cf for kate's does not include

00:18:00,480 --> 00:18:05,120
a registry by default

00:18:03,520 --> 00:18:08,880
um and you can figure a register

00:18:05,120 --> 00:18:08,880
yourself um

00:18:09,200 --> 00:18:13,360
and it seems like you are saying that

00:18:11,440 --> 00:18:16,080
that she doesn't think there's any

00:18:13,360 --> 00:18:29,840
plans to have it packaged in and i i

00:18:16,080 --> 00:18:29,840
would agree with that

00:18:55,679 --> 00:19:02,240
can you repeat the cf ssh answer um

00:18:59,200 --> 00:19:02,640
yes so for cfssh it does not currently

00:19:02,240 --> 00:19:05,360
work

00:19:02,640 --> 00:19:06,480
but we will probably have plans for it

00:19:05,360 --> 00:19:11,840
to work

00:19:06,480 --> 00:19:11,840
in cf for kids in the future

00:19:41,280 --> 00:19:46,480
um and also for cfssh we're always

00:19:44,720 --> 00:19:48,000
trying to gather feedback on like which

00:19:46,480 --> 00:19:49,840
features are important

00:19:48,000 --> 00:19:52,400
to work on or implement in the near

00:19:49,840 --> 00:19:55,520
future so definitely open up an issue

00:19:52,400 --> 00:19:58,000
on tabby case release or ccng about it

00:19:55,520 --> 00:20:01,919
and that will really help us track

00:19:58,000 --> 00:20:01,919
how important this feature is

00:20:04,880 --> 00:20:08,400
can i configure a custom repo as my app

00:20:07,600 --> 00:20:12,000
registry

00:20:08,400 --> 00:20:14,960
question from nand um

00:20:12,000 --> 00:20:20,159
yes you can app registry is configurable

00:20:14,960 --> 00:20:21,520
in cf for kids

00:20:20,159 --> 00:20:35,840
and it can be either a private or a

00:20:21,520 --> 00:20:35,840
public registry

00:20:56,559 --> 00:21:03,840
yes yes you can use external harbor as

00:21:00,840 --> 00:21:03,840
well

00:21:08,159 --> 00:21:11,360
actually currently we're working on

00:21:10,080 --> 00:21:14,320
adding even more support

00:21:11,360 --> 00:21:15,440
for hardware registries with deleting

00:21:14,320 --> 00:21:17,840
packages

00:21:15,440 --> 00:21:18,559
so it'll there will be a lot of

00:21:17,840 --> 00:21:30,000
functionality

00:21:18,559 --> 00:21:32,960
and support for that

00:21:30,000 --> 00:21:34,000
also the cf for kate's github page has

00:21:32,960 --> 00:21:37,520
some really good

00:21:34,000 --> 00:21:39,520
uh details and docs on how to exactly

00:21:37,520 --> 00:21:40,559
configure it and there's also a new cf

00:21:39,520 --> 00:21:43,600
for kate's

00:21:40,559 --> 00:21:59,840
dot io website that you can go to which

00:21:43,600 --> 00:21:59,840
is very detailed and awesome

00:22:11,919 --> 00:22:15,200
um ruben to answer your question in the

00:22:14,559 --> 00:22:16,880
chat

00:22:15,200 --> 00:22:18,880
for with my app do you mean a custom

00:22:16,880 --> 00:22:21,679
repo per app um i

00:22:18,880 --> 00:22:22,400
i read the announced question as a

00:22:21,679 --> 00:22:27,120
custom

00:22:22,400 --> 00:22:29,120
registry for the app registry um

00:22:27,120 --> 00:22:41,840
i i might correct me if i'm wrong though

00:22:29,120 --> 00:22:41,840
in my understanding of that

00:22:48,960 --> 00:22:52,320
believe we are at time actually for our

00:22:50,960 --> 00:22:54,320
q a session but

00:22:52,320 --> 00:23:09,840
happy to stay for another few minutes if

00:22:54,320 --> 00:23:09,840
anyone has any other questions

00:23:41,360 --> 00:23:44,720
so reuben has asked in the chat just

00:23:43,360 --> 00:23:46,960
wanted to clarify because

00:23:44,720 --> 00:23:49,200
it is a platform setting not something

00:23:46,960 --> 00:23:50,960
an end user has control over

00:23:49,200 --> 00:23:52,559
yes this is something that the platform

00:23:50,960 --> 00:24:05,840
operator would have control over when

00:23:52,559 --> 00:24:05,840
they're setting up cf for kids

00:24:29,600 --> 00:24:33,760
okay if this doesn't seem there's any

00:24:32,400 --> 00:24:34,240
further questions and we're a few

00:24:33,760 --> 00:24:37,520
minutes

00:24:34,240 --> 00:24:40,559
over um i guess we can go ahead and

00:24:37,520 --> 00:24:42,080
stop this q a session but if you do have

00:24:40,559 --> 00:24:44,480
more questions or

00:24:42,080 --> 00:24:46,960
issues or feedback or anything please

00:24:44,480 --> 00:24:50,080
reach out to us on cloud foundry slack

00:24:46,960 --> 00:24:51,919
in the cappy kate's release channel and

00:24:50,080 --> 00:24:54,080
we are we'll be happy to help you out

00:24:51,919 --> 00:24:54,080
there

00:24:54,960 --> 00:25:01,279
i think we have uh office hours a little

00:24:58,159 --> 00:25:05,039
later today as well

00:25:01,279 --> 00:25:05,039
in about an hour

00:25:05,679 --> 00:25:07,919
yep

00:25:11,520 --> 00:25:18,200
cool alrighty thanks everyone

00:25:14,640 --> 00:25:21,200
thank you have a good rest of your

00:25:18,200 --> 00:25:21,200

YouTube URL: https://www.youtube.com/watch?v=B07SCix65FE


