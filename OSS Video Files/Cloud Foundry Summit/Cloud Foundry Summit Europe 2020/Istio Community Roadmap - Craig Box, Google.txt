Title: Istio Community Roadmap - Craig Box, Google
Publication date: 2020-10-26
Playlist: Cloud Foundry Summit Europe 2020
Description: 
	Istio Community Roadmap - Craig Box, Google
Captions: 
	00:00:00,320 --> 00:00:04,000
hi and thanks for coming along to the

00:00:02,399 --> 00:00:06,720
session today

00:00:04,000 --> 00:00:07,759
in 2018 the cloud foundry community

00:00:06,720 --> 00:00:09,280
picked istio

00:00:07,759 --> 00:00:10,960
for traffic routing and its new

00:00:09,280 --> 00:00:12,480
kubernetes runtime

00:00:10,960 --> 00:00:14,240
i'm here to tell you about a few things

00:00:12,480 --> 00:00:16,160
we've been working on since then

00:00:14,240 --> 00:00:18,880
and how we see the project improving in

00:00:16,160 --> 00:00:21,119
the next few quarters

00:00:18,880 --> 00:00:23,359
my name is craig box and i work on the

00:00:21,119 --> 00:00:26,080
istio team at google cloud

00:00:23,359 --> 00:00:28,080
i joined google in 2004 and one of my

00:00:26,080 --> 00:00:30,160
first work trips was to seattle

00:00:28,080 --> 00:00:31,679
where i heard about this project 7 thing

00:00:30,160 --> 00:00:33,440
that we were working on

00:00:31,679 --> 00:00:35,040
i've been involved in kubernetes and

00:00:33,440 --> 00:00:37,840
cloud native ever since

00:00:35,040 --> 00:00:38,719
helping our customers field sales teams

00:00:37,840 --> 00:00:41,040
developers

00:00:38,719 --> 00:00:43,200
and the open source community i've been

00:00:41,040 --> 00:00:45,200
working on istio full time this year

00:00:43,200 --> 00:00:47,200
as well as continuing to host the weekly

00:00:45,200 --> 00:00:49,039
kubernetes podcast from google

00:00:47,200 --> 00:00:50,800
which i encourage you to check out if

00:00:49,039 --> 00:00:54,320
you're interested in keeping up to date

00:00:50,800 --> 00:00:55,840
with the cloud native ecosystem

00:00:54,320 --> 00:00:58,239
to start with i'd like to give an

00:00:55,840 --> 00:01:00,320
overview of the way we run the project

00:00:58,239 --> 00:01:01,520
i should provide the usual disclaimer

00:01:00,320 --> 00:01:02,640
open source projects

00:01:01,520 --> 00:01:04,559
serve at the pleasure of their

00:01:02,640 --> 00:01:06,159
contributors and this has been a very

00:01:04,559 --> 00:01:08,479
difficult year for everyone

00:01:06,159 --> 00:01:10,159
around the world this talk will give you

00:01:08,479 --> 00:01:11,439
an idea about some directions the

00:01:10,159 --> 00:01:14,000
project is pushing in

00:01:11,439 --> 00:01:14,960
but we haven't yet built a formal 2021

00:01:14,000 --> 00:01:16,560
roadmap

00:01:14,960 --> 00:01:18,640
what we're planning to do is a lot of

00:01:16,560 --> 00:01:20,880
work on fit and finish of the work we

00:01:18,640 --> 00:01:23,439
started in 2020

00:01:20,880 --> 00:01:25,119
roadmaps are very bottom up in sdo so if

00:01:23,439 --> 00:01:26,799
we're missing something that you need

00:01:25,119 --> 00:01:29,759
then please get involved with one of the

00:01:26,799 --> 00:01:31,520
working groups and propose it

00:01:29,759 --> 00:01:33,280
this year we've had some changes to the

00:01:31,520 --> 00:01:34,960
governance of the project

00:01:33,280 --> 00:01:36,880
you may have seen the news a few months

00:01:34,960 --> 00:01:39,759
ago about the open usage

00:01:36,880 --> 00:01:40,640
commons this is an entity that google

00:01:39,759 --> 00:01:43,360
bootstrapped

00:01:40,640 --> 00:01:44,399
to be independent steward of open source

00:01:43,360 --> 00:01:46,399
trademarks

00:01:44,399 --> 00:01:47,920
including the word istio and its

00:01:46,399 --> 00:01:49,680
sailboat logo

00:01:47,920 --> 00:01:52,159
this gives assurance to projects like

00:01:49,680 --> 00:01:54,320
cloud foundry that build on sdo

00:01:52,159 --> 00:01:55,360
and vendors who make istio available as

00:01:54,320 --> 00:01:57,840
a service

00:01:55,360 --> 00:02:00,159
that the trademark is free and fair to

00:01:57,840 --> 00:02:00,159
use

00:02:01,520 --> 00:02:04,880
we also made some changes to the project

00:02:03,520 --> 00:02:06,079
governance this year

00:02:04,880 --> 00:02:08,080
there are two groups that are

00:02:06,079 --> 00:02:08,879
responsible for aspects of the istio

00:02:08,080 --> 00:02:10,959
project

00:02:08,879 --> 00:02:12,640
the steering committee and the technical

00:02:10,959 --> 00:02:15,599
oversight committee

00:02:12,640 --> 00:02:17,599
steering handles administrative advocacy

00:02:15,599 --> 00:02:19,680
marketing and governance functions

00:02:17,599 --> 00:02:21,680
such as running events and administering

00:02:19,680 --> 00:02:23,760
our code of conduct

00:02:21,680 --> 00:02:25,760
as the project continues to grow we're

00:02:23,760 --> 00:02:28,560
looking into establishing subcommittees

00:02:25,760 --> 00:02:28,560
in these areas

00:02:28,879 --> 00:02:32,640
steering was created to allow the

00:02:30,800 --> 00:02:34,560
technical oversight committee to stay

00:02:32,640 --> 00:02:37,840
focused on the technical and design

00:02:34,560 --> 00:02:37,840
aspects of the project

00:02:37,920 --> 00:02:42,400
the two groups are staffed differently

00:02:40,480 --> 00:02:44,239
toc is formed of individuals who have

00:02:42,400 --> 00:02:46,480
demonstrated leadership in the project

00:02:44,239 --> 00:02:48,319
through participation in working groups

00:02:46,480 --> 00:02:49,040
where the bulk of project decisions are

00:02:48,319 --> 00:02:51,920
made

00:02:49,040 --> 00:02:53,840
and then serving as working group leads

00:02:51,920 --> 00:02:55,120
if a member moves company they retain

00:02:53,840 --> 00:02:57,040
their seat

00:02:55,120 --> 00:03:00,720
there are seven members on toc

00:02:57,040 --> 00:03:00,720
representing four different companies

00:03:02,159 --> 00:03:05,519
steering was originally formed of

00:03:03,680 --> 00:03:06,239
companies who have invested in the istio

00:03:05,519 --> 00:03:08,800
project

00:03:06,239 --> 00:03:10,400
proportional to their contribution we

00:03:08,800 --> 00:03:11,920
still think this is an important thing

00:03:10,400 --> 00:03:13,680
for a project to have

00:03:11,920 --> 00:03:16,239
to provide direction from those who are

00:03:13,680 --> 00:03:18,159
invested most in the project's success

00:03:16,239 --> 00:03:19,840
but to this we've added elected

00:03:18,159 --> 00:03:22,000
community members

00:03:19,840 --> 00:03:24,000
we now have a 13-member steering

00:03:22,000 --> 00:03:27,519
representing seven different companies

00:03:24,000 --> 00:03:27,519
and i am a member of that group

00:03:28,480 --> 00:03:32,480
similar to sigs in kubernetes product

00:03:30,959 --> 00:03:34,959
and engineering work in sdo

00:03:32,480 --> 00:03:35,519
is done in working groups we currently

00:03:34,959 --> 00:03:37,920
have eight

00:03:35,519 --> 00:03:38,640
such groups networking policy and

00:03:37,920 --> 00:03:40,480
telemetry

00:03:38,640 --> 00:03:42,560
and security are the three core

00:03:40,480 --> 00:03:44,319
functions of a service mesh

00:03:42,560 --> 00:03:46,480
the other groups cut across all these

00:03:44,319 --> 00:03:48,480
functions with environments handling

00:03:46,480 --> 00:03:49,280
installation and integration with user

00:03:48,480 --> 00:03:51,200
workloads

00:03:49,280 --> 00:03:55,280
and service discovery systems so

00:03:51,200 --> 00:03:55,280
possibly the most relevant to this group

00:03:56,319 --> 00:04:01,040
sdo went 1.0 in july 2018

00:03:59,519 --> 00:04:02,799
which was the signal that we thought the

00:04:01,040 --> 00:04:03,840
project was ready for serious production

00:04:02,799 --> 00:04:05,519
use

00:04:03,840 --> 00:04:06,959
in fact we know that some people had

00:04:05,519 --> 00:04:09,120
been using it in production since

00:04:06,959 --> 00:04:11,280
version 0.2

00:04:09,120 --> 00:04:12,560
what that emphasizes to me is that this

00:04:11,280 --> 00:04:14,720
video was effectively

00:04:12,560 --> 00:04:15,840
feature complete right from its earliest

00:04:14,720 --> 00:04:17,519
stages

00:04:15,840 --> 00:04:19,440
it was able to come out of the gate

00:04:17,519 --> 00:04:21,440
fully formed so to speak

00:04:19,440 --> 00:04:23,600
because it built on the internal api

00:04:21,440 --> 00:04:25,840
infrastructure at google cloud

00:04:23,600 --> 00:04:27,360
the amalgamate project from ibm which

00:04:25,840 --> 00:04:29,520
was an early service mesh

00:04:27,360 --> 00:04:31,280
focused on traffic management and the

00:04:29,520 --> 00:04:34,479
high performance envoy proxy

00:04:31,280 --> 00:04:36,880
battle tested at lyft of course no plan

00:04:34,479 --> 00:04:39,199
survives contact with enterprise users

00:04:36,880 --> 00:04:40,639
1.0 had performance and scalability

00:04:39,199 --> 00:04:42,800
issues and it took a bunch of

00:04:40,639 --> 00:04:46,240
re-engineering and a 9-month gap

00:04:42,800 --> 00:04:47,840
to get 1.1 out in march 2019

00:04:46,240 --> 00:04:49,440
since then the project has maintained a

00:04:47,840 --> 00:04:50,479
quarterly release cycle and we're

00:04:49,440 --> 00:04:54,960
looking to do the same

00:04:50,479 --> 00:04:56,639
into 2021. now just a moment ago i said

00:04:54,960 --> 00:04:58,800
that the core functionality was all

00:04:56,639 --> 00:05:00,560
present at 0.2

00:04:58,800 --> 00:05:02,960
some products build a proof of concept

00:05:00,560 --> 00:05:04,479
of one feature get it production ready

00:05:02,960 --> 00:05:06,720
and then add a proof of concept of

00:05:04,479 --> 00:05:08,880
another feature and so on

00:05:06,720 --> 00:05:10,720
istio had all of its major functionality

00:05:08,880 --> 00:05:12,320
in place at the beginning

00:05:10,720 --> 00:05:14,880
of course not all these ideas were

00:05:12,320 --> 00:05:16,479
perfect not all of the apis were final

00:05:14,880 --> 00:05:18,320
and not all of the implementations

00:05:16,479 --> 00:05:20,320
worked at scale

00:05:18,320 --> 00:05:21,680
since then we've largely been focused on

00:05:20,320 --> 00:05:24,320
iterative improvement

00:05:21,680 --> 00:05:25,360
with a couple of tentpole changes let's

00:05:24,320 --> 00:05:29,680
have a look at those

00:05:25,360 --> 00:05:29,680
starting with extensibility

00:05:30,479 --> 00:05:33,520
istio provided for extensibility from

00:05:32,800 --> 00:05:35,440
day one

00:05:33,520 --> 00:05:36,560
implemented by a component called the

00:05:35,440 --> 00:05:38,720
mixer

00:05:36,560 --> 00:05:39,840
mixer allowed custom adapters to act as

00:05:38,720 --> 00:05:42,080
an intermediary

00:05:39,840 --> 00:05:43,680
between the data plane and policy or

00:05:42,080 --> 00:05:45,840
telemetry back-ends

00:05:43,680 --> 00:05:48,400
it added overhead to requests because it

00:05:45,840 --> 00:05:50,240
required extensions to be out of process

00:05:48,400 --> 00:05:52,880
and that overhead was a problem for many

00:05:50,240 --> 00:05:54,320
of our users to get the performance we

00:05:52,880 --> 00:05:56,639
wanted we needed to move that

00:05:54,320 --> 00:05:58,639
functionality into the proxy

00:05:56,639 --> 00:06:00,319
first we built new authentication and

00:05:58,639 --> 00:06:02,000
authorization apis

00:06:00,319 --> 00:06:04,000
which are implemented directly in the

00:06:02,000 --> 00:06:05,919
envoy proxy server

00:06:04,000 --> 00:06:08,319
this means that for common use cases

00:06:05,919 --> 00:06:10,479
like rbac or checking jots

00:06:08,319 --> 00:06:12,240
that you can express in the api you

00:06:10,479 --> 00:06:12,560
don't need to call out to the mixer to

00:06:12,240 --> 00:06:15,919
check

00:06:12,560 --> 00:06:17,919
each request next we built support for

00:06:15,919 --> 00:06:18,960
exporting istio's metrics to common

00:06:17,919 --> 00:06:21,440
services

00:06:18,960 --> 00:06:22,800
most notably prometheus as extensions to

00:06:21,440 --> 00:06:24,639
envoy

00:06:22,800 --> 00:06:27,600
by removing mixer we were able to get

00:06:24,639 --> 00:06:30,080
substantial decreases in latency

00:06:27,600 --> 00:06:32,000
the green line on this graph was p99

00:06:30,080 --> 00:06:33,520
latency when running with both client

00:06:32,000 --> 00:06:35,440
and server proxies

00:06:33,520 --> 00:06:37,759
the purple line is the same setup

00:06:35,440 --> 00:06:39,360
without using mixer

00:06:37,759 --> 00:06:41,039
we still need to provide a way for

00:06:39,360 --> 00:06:42,880
people to extend sdo

00:06:41,039 --> 00:06:46,880
to connect their own access control

00:06:42,880 --> 00:06:48,319
systems quota or auth systems

00:06:46,880 --> 00:06:50,960
we've achieved that by building a

00:06:48,319 --> 00:06:53,199
webassembly runtime into envoy

00:06:50,960 --> 00:06:54,319
webassembly or wasm is a portable

00:06:53,199 --> 00:06:56,319
bytecode format

00:06:54,319 --> 00:06:59,039
for executing code written in multiple

00:06:56,319 --> 00:07:00,880
languages and near native speed

00:06:59,039 --> 00:07:02,960
it is a well-supported client-side

00:07:00,880 --> 00:07:04,880
technology and that gave us confidence

00:07:02,960 --> 00:07:06,319
in making a strategic bet on it on the

00:07:04,880 --> 00:07:08,160
server side

00:07:06,319 --> 00:07:11,120
our implementation uses the runtime

00:07:08,160 --> 00:07:13,199
built into chrome's v8 javascript engine

00:07:11,120 --> 00:07:14,720
but the spec allows running in others

00:07:13,199 --> 00:07:16,639
including null runtime

00:07:14,720 --> 00:07:18,479
which compiles the extension natively

00:07:16,639 --> 00:07:20,880
into envoy

00:07:18,479 --> 00:07:22,479
we built a generic abi for embedding

00:07:20,880 --> 00:07:24,240
webassembly in proxies

00:07:22,479 --> 00:07:26,639
which means compiled extensions will

00:07:24,240 --> 00:07:28,720
work across different versions of envoy

00:07:26,639 --> 00:07:31,199
or even other proxies should they choose

00:07:28,720 --> 00:07:33,440
to implement the api

00:07:31,199 --> 00:07:35,039
for developers we've built sdks for

00:07:33,440 --> 00:07:38,160
extension development

00:07:35,039 --> 00:07:40,000
we started by targeting c plus rust

00:07:38,160 --> 00:07:42,800
and a javascript derivative called

00:07:40,000 --> 00:07:44,479
assemblyscript

00:07:42,800 --> 00:07:46,000
we've been working on this for almost

00:07:44,479 --> 00:07:48,000
two years in the fork of

00:07:46,000 --> 00:07:50,240
envoy which is what we've shipped with

00:07:48,000 --> 00:07:52,080
istio during that time

00:07:50,240 --> 00:07:54,240
some very good news this month

00:07:52,080 --> 00:07:55,199
webassembly support has landed upstream

00:07:54,240 --> 00:07:56,879
in envoy

00:07:55,199 --> 00:07:58,960
and with the ability to move any

00:07:56,879 --> 00:08:00,080
remaining custom envoy code into

00:07:58,960 --> 00:08:02,479
extensions

00:08:00,080 --> 00:08:03,440
will soon be able to ship upstream envoy

00:08:02,479 --> 00:08:07,599
with istio

00:08:03,440 --> 00:08:07,599
and no longer need to maintain a fork

00:08:08,479 --> 00:08:12,000
the second major change for the year was

00:08:10,400 --> 00:08:15,280
around how we package and run our

00:08:12,000 --> 00:08:15,280
control plane binaries

00:08:17,039 --> 00:08:20,800
in the original architecture we

00:08:18,639 --> 00:08:22,720
separated the concerns of our operators

00:08:20,800 --> 00:08:23,840
by taking the functions that make up the

00:08:22,720 --> 00:08:25,680
control plane

00:08:23,840 --> 00:08:27,440
and running them as separate

00:08:25,680 --> 00:08:29,039
microservices

00:08:27,440 --> 00:08:31,120
this was motivated by google's

00:08:29,039 --> 00:08:32,000
experience running a service like this

00:08:31,120 --> 00:08:34,000
at scale

00:08:32,000 --> 00:08:35,839
but it made it hard for our users to

00:08:34,000 --> 00:08:38,320
coordinate or upgrade

00:08:35,839 --> 00:08:39,599
in the most common use case where people

00:08:38,320 --> 00:08:42,560
were only running one

00:08:39,599 --> 00:08:43,200
of each service first we removed the

00:08:42,560 --> 00:08:46,640
mixer

00:08:43,200 --> 00:08:48,640
as we've discussed and then

00:08:46,640 --> 00:08:50,160
we took all the rest of the components

00:08:48,640 --> 00:08:53,200
and consolidated them down

00:08:50,160 --> 00:08:54,000
into one service some people have said

00:08:53,200 --> 00:08:56,640
that this is going

00:08:54,000 --> 00:08:58,640
from microservices back to a monolith

00:08:56,640 --> 00:09:01,440
but we still think of sdod

00:08:58,640 --> 00:09:03,040
the new binary as a microservice one

00:09:01,440 --> 00:09:04,959
that's still architected so you can

00:09:03,040 --> 00:09:09,839
replace its internal components with

00:09:04,959 --> 00:09:09,839
external systems should you need to

00:09:10,000 --> 00:09:13,920
the move to sdod was just one change

00:09:12,399 --> 00:09:14,880
motivated by the wish to make

00:09:13,920 --> 00:09:17,600
installation

00:09:14,880 --> 00:09:19,040
upgrade and operation of istio orders of

00:09:17,600 --> 00:09:21,040
magnitude easier

00:09:19,040 --> 00:09:23,760
coordinated by our environment's working

00:09:21,040 --> 00:09:24,640
group it used to be very complicated to

00:09:23,760 --> 00:09:26,080
install

00:09:24,640 --> 00:09:28,560
not least because there were so many

00:09:26,080 --> 00:09:30,640
components and configuration options for

00:09:28,560 --> 00:09:30,640
it

00:09:30,720 --> 00:09:35,120
generating helm values files was complex

00:09:33,600 --> 00:09:37,200
so we moved to a crd

00:09:35,120 --> 00:09:39,519
called istio operator which you can

00:09:37,200 --> 00:09:42,000
install in one of two ways

00:09:39,519 --> 00:09:42,800
you can use sdo ctl install to create

00:09:42,000 --> 00:09:44,240
the mesh

00:09:42,800 --> 00:09:45,839
or you can run a controller that

00:09:44,240 --> 00:09:48,399
consumes that same resource

00:09:45,839 --> 00:09:49,839
and runs in your cluster which method

00:09:48,399 --> 00:09:51,440
you use depends on whether you want to

00:09:49,839 --> 00:09:54,320
have the administrative credentials

00:09:51,440 --> 00:09:56,160
required inside or outside the cluster

00:09:54,320 --> 00:09:57,600
for that reason we recommend the former

00:09:56,160 --> 00:09:59,839
method

00:09:57,600 --> 00:10:01,519
people also want pure helm support and

00:09:59,839 --> 00:10:02,560
there are some unsupported methods to

00:10:01,519 --> 00:10:05,120
use it today

00:10:02,560 --> 00:10:07,360
from the old helm 2 chart days but we're

00:10:05,120 --> 00:10:12,000
adding official helm 3 support

00:10:07,360 --> 00:10:13,839
scheduled for the upcoming 1.8 release

00:10:12,000 --> 00:10:15,519
this simpler model has made upgrading

00:10:13,839 --> 00:10:17,600
easier and safer

00:10:15,519 --> 00:10:19,360
for example you can canary your control

00:10:17,600 --> 00:10:20,320
planes by deploying a new version of

00:10:19,360 --> 00:10:23,680
sdod

00:10:20,320 --> 00:10:23,680
alongside an old one

00:10:27,839 --> 00:10:31,279
we've also had a major recent focus on

00:10:30,320 --> 00:10:33,440
extending a mesh

00:10:31,279 --> 00:10:34,640
outside a single cluster both with

00:10:33,440 --> 00:10:36,320
multiple clusters

00:10:34,640 --> 00:10:39,680
and services that aren't running in

00:10:36,320 --> 00:10:41,120
kubernetes usually on a virtual machine

00:10:39,680 --> 00:10:43,760
there are many different ways you could

00:10:41,120 --> 00:10:45,200
do multi-cluster clusters on the same or

00:10:43,760 --> 00:10:46,880
separate networks

00:10:45,200 --> 00:10:49,200
each cluster having its own control

00:10:46,880 --> 00:10:51,120
plane or one control plane supporting

00:10:49,200 --> 00:10:52,880
multiple clusters

00:10:51,120 --> 00:10:54,720
by simplifying the control plane and

00:10:52,880 --> 00:10:56,399
improving our installation methods

00:10:54,720 --> 00:10:58,240
we've been able to consolidate our

00:10:56,399 --> 00:10:58,880
instructions and have drastically

00:10:58,240 --> 00:11:01,200
simplified

00:10:58,880 --> 00:11:02,800
multi-cluster in the upcoming 1.8

00:11:01,200 --> 00:11:05,200
release

00:11:02,800 --> 00:11:06,320
likewise we want managing a workload

00:11:05,200 --> 00:11:08,320
that's on vm

00:11:06,320 --> 00:11:11,040
to be as easy as just installing the

00:11:08,320 --> 00:11:11,040
proxy on it

00:11:11,279 --> 00:11:15,120
earlier this year we introduced a new

00:11:13,120 --> 00:11:16,560
api that lets you refer to workloads

00:11:15,120 --> 00:11:18,160
that are running on vms

00:11:16,560 --> 00:11:19,920
which makes it easier to migrate

00:11:18,160 --> 00:11:22,000
workloads between vms and your

00:11:19,920 --> 00:11:23,680
kubernetes environment

00:11:22,000 --> 00:11:25,760
you could add entries to our service

00:11:23,680 --> 00:11:26,560
registry by creating a service entry

00:11:25,760 --> 00:11:28,800
object

00:11:26,560 --> 00:11:30,399
which listed the ip addresses of vms

00:11:28,800 --> 00:11:33,040
that implemented it

00:11:30,399 --> 00:11:35,200
it was possible but complicated to route

00:11:33,040 --> 00:11:36,160
traffic to pods and to vms at the same

00:11:35,200 --> 00:11:38,079
time

00:11:36,160 --> 00:11:40,320
more so if you wanted to add side cars

00:11:38,079 --> 00:11:43,200
to those vms as you onboarded them

00:11:40,320 --> 00:11:44,959
onto the mesh we didn't have an object

00:11:43,200 --> 00:11:46,160
which lets you set the properties of a

00:11:44,959 --> 00:11:48,240
vm sidecar

00:11:46,160 --> 00:11:50,240
or respond to life cycle changes or

00:11:48,240 --> 00:11:52,959
health checks where an address was not

00:11:50,240 --> 00:11:56,000
ready to serve

00:11:52,959 --> 00:11:58,240
we added a new object to help here a

00:11:56,000 --> 00:12:00,160
workload entry allows you to describe

00:11:58,240 --> 00:12:01,600
non-kubernetes endpoints that you want

00:12:00,160 --> 00:12:04,480
to add to the mesh

00:12:01,600 --> 00:12:06,880
and then treat them the same as a pod it

00:12:04,480 --> 00:12:08,079
makes it easier to enable mutual tls

00:12:06,880 --> 00:12:11,200
between workloads

00:12:08,079 --> 00:12:13,440
containerized or not now you can use a

00:12:11,200 --> 00:12:14,880
single service entry to refer to pods

00:12:13,440 --> 00:12:17,120
and workload entries

00:12:14,880 --> 00:12:19,440
using the same label selector logic you

00:12:17,120 --> 00:12:20,959
do for pods alone

00:12:19,440 --> 00:12:23,279
we're working hard to make it possible

00:12:20,959 --> 00:12:25,279
to have vms and pods coexist

00:12:23,279 --> 00:12:28,160
without any configuration needed to

00:12:25,279 --> 00:12:28,160
bridge them together

00:12:28,720 --> 00:12:33,360
the vm case poses another problem how do

00:12:31,680 --> 00:12:34,959
you have your vm be aware of the

00:12:33,360 --> 00:12:36,240
services that are running in the rest of

00:12:34,959 --> 00:12:38,240
your mesh

00:12:36,240 --> 00:12:40,000
vms don't pick up the entries we create

00:12:38,240 --> 00:12:42,160
in kubernetes as dns

00:12:40,000 --> 00:12:44,480
and it's not necessarily secure to use

00:12:42,160 --> 00:12:47,680
that dns from outside the cluster

00:12:44,480 --> 00:12:51,839
so in 1.8 we're introducing smart dns

00:12:47,680 --> 00:12:52,399
proxy this will reduce load on your dns

00:12:51,839 --> 00:12:54,639
servers

00:12:52,399 --> 00:12:56,480
give you faster resolution and allow you

00:12:54,639 --> 00:12:58,959
to access services from vms

00:12:56,480 --> 00:13:00,079
without having to expose the cube dns to

00:12:58,959 --> 00:13:01,360
them

00:13:00,079 --> 00:13:03,519
you can also use it to resolve

00:13:01,360 --> 00:13:05,680
kubernetes services on any cluster

00:13:03,519 --> 00:13:09,920
in any namespace without the need to

00:13:05,680 --> 00:13:09,920
create stub services in every cluster

00:13:10,480 --> 00:13:14,800
let's look at an overview of what our

00:13:12,160 --> 00:13:16,800
other working groups are progressing on

00:13:14,800 --> 00:13:18,079
the policies and telemetries team has

00:13:16,800 --> 00:13:19,760
two focuses

00:13:18,079 --> 00:13:21,519
they want to make it easy to manage the

00:13:19,760 --> 00:13:23,680
telemetry coming from your

00:13:21,519 --> 00:13:25,920
applications and use that to make

00:13:23,680 --> 00:13:28,399
decisions about traffic management

00:13:25,920 --> 00:13:29,040
or scaling that can be fed back into the

00:13:28,399 --> 00:13:31,920
system

00:13:29,040 --> 00:13:32,880
underneath at a lower level you also

00:13:31,920 --> 00:13:35,600
need the ability

00:13:32,880 --> 00:13:37,200
to monitor the istio components and work

00:13:35,600 --> 00:13:38,160
continues to improve the ease of

00:13:37,200 --> 00:13:41,199
understanding

00:13:38,160 --> 00:13:41,199
of the mesh itself

00:13:43,120 --> 00:13:47,040
with the new extensibility model that we

00:13:45,120 --> 00:13:48,000
mentioned before we're allowing people

00:13:47,040 --> 00:13:50,639
to easily add

00:13:48,000 --> 00:13:52,320
new behavior to istio we're helping the

00:13:50,639 --> 00:13:54,079
community of people who have already

00:13:52,320 --> 00:13:55,360
built third party extensions with the

00:13:54,079 --> 00:13:57,360
mixer api

00:13:55,360 --> 00:13:58,959
to port them to run as webassembly

00:13:57,360 --> 00:14:00,639
inside the proxy

00:13:58,959 --> 00:14:02,399
we're also working with the community

00:14:00,639 --> 00:14:03,600
around webassembly to support a

00:14:02,399 --> 00:14:06,720
distribution method

00:14:03,600 --> 00:14:09,360
for first and third party services

00:14:06,720 --> 00:14:10,800
for example solo.io have built a

00:14:09,360 --> 00:14:12,880
webassembly hub

00:14:10,800 --> 00:14:14,800
in the vein of the docker hub and we

00:14:12,880 --> 00:14:16,639
expect to see more support for artifact

00:14:14,800 --> 00:14:17,279
management tools for webassembly

00:14:16,639 --> 00:14:20,639
packages

00:14:17,279 --> 00:14:20,639
over the next 12 months

00:14:22,000 --> 00:14:26,399
security remains a high priority for

00:14:24,000 --> 00:14:28,320
istio the service mesh feature set lets

00:14:26,399 --> 00:14:29,040
you move firewalling away from the edge

00:14:28,320 --> 00:14:31,040
and secure

00:14:29,040 --> 00:14:32,079
every workload so we're excited to

00:14:31,040 --> 00:14:35,360
continue to improve

00:14:32,079 --> 00:14:37,360
istio's security posture recent changes

00:14:35,360 --> 00:14:38,880
have included moving to envoy's secret

00:14:37,360 --> 00:14:40,320
distribution service

00:14:38,880 --> 00:14:42,320
instead of mounting services through

00:14:40,320 --> 00:14:44,399
kubernetes volumes which makes them

00:14:42,320 --> 00:14:46,639
easier to rotate

00:14:44,399 --> 00:14:48,959
in 1.8 we're also supporting integrating

00:14:46,639 --> 00:14:51,440
custom certificate issuers with istio

00:14:48,959 --> 00:14:53,279
where they issue a certificate to sdod

00:14:51,440 --> 00:14:54,800
which then acts as a registration

00:14:53,279 --> 00:14:56,639
authority

00:14:54,800 --> 00:14:58,320
this release also adds a mechanism to

00:14:56,639 --> 00:15:00,560
securely integrate a vm

00:14:58,320 --> 00:15:02,160
into a mesh by provisioning the mesh

00:15:00,560 --> 00:15:04,399
identity for the vm

00:15:02,160 --> 00:15:05,360
based on that vm's platform-specific

00:15:04,399 --> 00:15:09,519
identity

00:15:05,360 --> 00:15:09,519
especially suited to cloud instances

00:15:09,839 --> 00:15:13,120
our user experience working group has

00:15:11,680 --> 00:15:15,680
done some great work

00:15:13,120 --> 00:15:16,160
they drive development in istio ctl so

00:15:15,680 --> 00:15:17,760
before

00:15:16,160 --> 00:15:20,000
installing a mesh you can validate your

00:15:17,760 --> 00:15:21,920
configuration as well as understanding

00:15:20,000 --> 00:15:24,880
how the configuration is sent around the

00:15:21,920 --> 00:15:26,560
proxy servers that make up the mesh

00:15:24,880 --> 00:15:28,240
they are working hard on troubleshooting

00:15:26,560 --> 00:15:29,839
because there are necessarily a lot of

00:15:28,240 --> 00:15:31,600
moving parts in the mesh

00:15:29,839 --> 00:15:33,040
and we want to be able to quickly count

00:15:31,600 --> 00:15:34,560
things in and out

00:15:33,040 --> 00:15:36,959
in the event of an application

00:15:34,560 --> 00:15:39,120
misbehaving

00:15:36,959 --> 00:15:41,360
in the near term all functionality

00:15:39,120 --> 00:15:43,600
currently exposed by istio ctl

00:15:41,360 --> 00:15:45,680
will also be accessible via documented

00:15:43,600 --> 00:15:47,519
and supported apis

00:15:45,680 --> 00:15:49,839
this will allow integrations beyond the

00:15:47,519 --> 00:15:52,560
go ecosystem and provide tight contracts

00:15:49,839 --> 00:15:54,399
for testing each release

00:15:52,560 --> 00:15:56,320
likewise the documentation group is

00:15:54,399 --> 00:15:56,880
aiming to help administrators and mesh

00:15:56,320 --> 00:15:58,720
users

00:15:56,880 --> 00:16:00,480
by not only making it easier to learn

00:15:58,720 --> 00:16:02,959
how to get started with istio

00:16:00,480 --> 00:16:05,440
but how to perform those day two tasks

00:16:02,959 --> 00:16:07,279
and how to debug the mesh

00:16:05,440 --> 00:16:08,880
this is an area where the power of sdo

00:16:07,279 --> 00:16:09,759
has traditionally been shown to people

00:16:08,880 --> 00:16:12,320
very early

00:16:09,759 --> 00:16:14,079
and thus confused with complexity we

00:16:12,320 --> 00:16:16,320
want to make the easy things easy

00:16:14,079 --> 00:16:17,199
and the hard things possible but this is

00:16:16,320 --> 00:16:19,199
an area where

00:16:17,199 --> 00:16:20,399
lack of experience in the product is a

00:16:19,199 --> 00:16:21,920
net benefit

00:16:20,399 --> 00:16:23,440
so if anyone out there wants to get

00:16:21,920 --> 00:16:24,480
involved in improving sdo's

00:16:23,440 --> 00:16:26,160
documentation

00:16:24,480 --> 00:16:28,800
the project is always looking for more

00:16:26,160 --> 00:16:28,800
contributors

00:16:29,759 --> 00:16:33,360
a thread running through all these

00:16:31,279 --> 00:16:34,000
improvements is the idea of the right

00:16:33,360 --> 00:16:36,639
tools

00:16:34,000 --> 00:16:37,920
documentation and api for the right use

00:16:36,639 --> 00:16:39,680
cases

00:16:37,920 --> 00:16:41,680
when you're running a mesh at scale

00:16:39,680 --> 00:16:44,880
you're likely to have application teams

00:16:41,680 --> 00:16:46,480
security teams network teams etc

00:16:44,880 --> 00:16:49,279
it's important to be able to expose

00:16:46,480 --> 00:16:52,079
controls to those groups that make sense

00:16:49,279 --> 00:16:53,680
for example the istio apis separate

00:16:52,079 --> 00:16:55,519
gateway configuration

00:16:53,680 --> 00:16:57,759
which is usually controlled by a network

00:16:55,519 --> 00:16:59,440
administrator from options the service

00:16:57,759 --> 00:17:00,560
owner might want to configure based on

00:16:59,440 --> 00:17:03,040
how they would like people to

00:17:00,560 --> 00:17:04,959
communicate with their service

00:17:03,040 --> 00:17:07,280
those parameters like load balancer

00:17:04,959 --> 00:17:09,439
algorithms and connection pool settings

00:17:07,280 --> 00:17:11,039
are set on the destination rule object

00:17:09,439 --> 00:17:12,319
which can be managed by the service

00:17:11,039 --> 00:17:14,400
owner

00:17:12,319 --> 00:17:15,600
sdo is designed to work well even in the

00:17:14,400 --> 00:17:17,439
default use case

00:17:15,600 --> 00:17:19,280
and so if you don't need to customize

00:17:17,439 --> 00:17:21,039
anything about your traffic control

00:17:19,280 --> 00:17:23,679
you don't need to create destination

00:17:21,039 --> 00:17:25,360
rule objects

00:17:23,679 --> 00:17:28,079
we're excited to see the work happening

00:17:25,360 --> 00:17:31,200
in kubernetes around the service apis

00:17:28,079 --> 00:17:33,280
a new v2 of ingress if you will which

00:17:31,200 --> 00:17:35,360
has taken lessons from the traffic apis

00:17:33,280 --> 00:17:36,799
inside istio as well as from other

00:17:35,360 --> 00:17:39,039
projects

00:17:36,799 --> 00:17:40,960
these are experimental apis so we

00:17:39,039 --> 00:17:42,720
introduced experimental support for them

00:17:40,960 --> 00:17:44,160
in istio 1.6

00:17:42,720 --> 00:17:47,280
so you can get a feel for what it might

00:17:44,160 --> 00:17:49,280
be like to use them

00:17:47,280 --> 00:17:50,400
in closing while we don't have a formal

00:17:49,280 --> 00:17:52,400
roadmap as such

00:17:50,400 --> 00:17:54,240
you can get an idea of what would go on

00:17:52,400 --> 00:17:55,840
it by looking at our planning docs for

00:17:54,240 --> 00:17:58,559
00:17:55,840 --> 00:17:59,679
in 2009 apple put up a slide at the

00:17:58,559 --> 00:18:01,679
developer conference

00:17:59,679 --> 00:18:03,679
touting that their new snow leopard os

00:18:01,679 --> 00:18:05,360
had no new features

00:18:03,679 --> 00:18:07,120
we have a good foundation to have a snow

00:18:05,360 --> 00:18:09,120
leopard year of our own

00:18:07,120 --> 00:18:10,640
we have a lot of alpha and beta features

00:18:09,120 --> 00:18:12,320
to get to stable

00:18:10,640 --> 00:18:14,640
a lot of production users who give us

00:18:12,320 --> 00:18:16,320
direction on rough edges they hit

00:18:14,640 --> 00:18:18,240
and a partner community such as

00:18:16,320 --> 00:18:19,120
yourselves who are building on top of

00:18:18,240 --> 00:18:20,960
sdo

00:18:19,120 --> 00:18:22,559
our goal is to help everyone get a

00:18:20,960 --> 00:18:24,400
stable environment

00:18:22,559 --> 00:18:25,679
continue to work with our users to

00:18:24,400 --> 00:18:29,039
remove blockers

00:18:25,679 --> 00:18:30,720
and smooth rough edges

00:18:29,039 --> 00:18:32,320
if you'd like to get involved please

00:18:30,720 --> 00:18:32,960
check out the community section of our

00:18:32,320 --> 00:18:34,799
website

00:18:32,960 --> 00:18:36,240
where there are links to slack our

00:18:34,799 --> 00:18:39,679
discussion forums

00:18:36,240 --> 00:18:42,480
github and more you can find both myself

00:18:39,679 --> 00:18:44,960
and the istio project on twitter thank

00:18:42,480 --> 00:18:47,280
you very much for your time

00:18:44,960 --> 00:18:48,960
hi i assume i'm live right now it's very

00:18:47,280 --> 00:18:50,480
hard to tell i don't have any

00:18:48,960 --> 00:18:52,160
visual feedback but thank you very much

00:18:50,480 --> 00:18:53,520
if you did watch the talk and i have a

00:18:52,160 --> 00:18:54,640
little window here where i can see any

00:18:53,520 --> 00:18:56,080
messages

00:18:54,640 --> 00:18:57,520
so if you'd like to send some if you

00:18:56,080 --> 00:18:58,720
have any questions i'll be around for a

00:18:57,520 --> 00:18:59,840
couple of minutes and would love to

00:18:58,720 --> 00:19:04,320
answer them

00:18:59,840 --> 00:19:04,320
if not we can talk about this cup of tea

00:19:05,440 --> 00:19:08,320
i'd like to take a moment to thank the

00:19:06,880 --> 00:19:09,679
cloud foundry community for actually

00:19:08,320 --> 00:19:11,679
having their european event in a

00:19:09,679 --> 00:19:13,919
european time zone

00:19:11,679 --> 00:19:15,679
very refreshing normally it's quite

00:19:13,919 --> 00:19:16,880
early in the american day

00:19:15,679 --> 00:19:18,000
and people look at me and saying what

00:19:16,880 --> 00:19:19,120
are you doing having a cup of tea say

00:19:18,000 --> 00:19:20,559
well that's just tough

00:19:19,120 --> 00:19:22,720
say you can have a beer at whatever time

00:19:20,559 --> 00:19:24,799
you want but at the end of

00:19:22,720 --> 00:19:27,679
the one's work day is the start of

00:19:24,799 --> 00:19:27,679
somebody else's

00:19:31,120 --> 00:19:34,720
could someone just drop something in the

00:19:32,640 --> 00:19:39,840
chat to at least let me know if

00:19:34,720 --> 00:19:39,840
they can see and hear me

00:19:57,679 --> 00:20:07,840
not promising

00:20:08,240 --> 00:20:12,640
there we go perfect thank you very much

00:20:10,799 --> 00:20:14,159
troy

00:20:12,640 --> 00:20:16,799
now my question to you is do you have a

00:20:14,159 --> 00:20:16,799
question for me

00:20:19,200 --> 00:20:22,559
any general feedback on the presentation

00:20:20,960 --> 00:20:24,480
is welcome

00:20:22,559 --> 00:20:25,679
anyone saying i love listening to you

00:20:24,480 --> 00:20:26,320
i'm going to go subscribe to your

00:20:25,679 --> 00:20:29,200
podcast

00:20:26,320 --> 00:20:29,200
that's also welcome

00:20:32,720 --> 00:20:36,559
this is an earl grey tea anyone has a

00:20:34,720 --> 00:20:39,520
suggestion of favorite flavors feel free

00:20:36,559 --> 00:20:39,520
to throw that in the chat as well

00:20:42,559 --> 00:20:46,159
are we all very excited for cf for

00:20:44,640 --> 00:20:48,720
kate's 1.0

00:20:46,159 --> 00:20:51,039
great release me about the name a lot of

00:20:48,720 --> 00:20:51,039
letters

00:21:00,640 --> 00:21:03,840
i think even i guess when i would create

00:21:02,880 --> 00:21:17,840
questions

00:21:03,840 --> 00:21:17,840
uh let's give that a go

00:21:25,919 --> 00:21:29,520
yes i think i understood the difference

00:21:27,360 --> 00:21:31,840
between cube cf and kf

00:21:29,520 --> 00:21:34,880
c c f for case at one point but you're

00:21:31,840 --> 00:21:34,880
never 100 sure

00:21:34,960 --> 00:21:38,320
all right we do have a real question

00:21:37,039 --> 00:21:40,400
here a vague question what is the

00:21:38,320 --> 00:21:41,600
relationship between sdo and the service

00:21:40,400 --> 00:21:44,240
mesh interface project

00:21:41,600 --> 00:21:45,919
does sdo fully implemented the answer is

00:21:44,240 --> 00:21:48,159
istio does not implement the service

00:21:45,919 --> 00:21:49,440
mesh interface at all it is an external

00:21:48,159 --> 00:21:51,919
proposed standard

00:21:49,440 --> 00:21:52,640
to be honest we've not seen uptake we've

00:21:51,919 --> 00:21:54,799
not seen people

00:21:52,640 --> 00:21:56,880
asking us for it there is an adapter

00:21:54,799 --> 00:21:58,480
that was written by one of the teams

00:21:56,880 --> 00:22:00,720
contracted out by one of the teams who

00:21:58,480 --> 00:22:01,520
created smi to a european company to

00:22:00,720 --> 00:22:03,919
build

00:22:01,520 --> 00:22:05,840
so it is possible to configure istio

00:22:03,919 --> 00:22:07,840
using this adapter and the smi

00:22:05,840 --> 00:22:09,679
but i have no concept of how up-to-date

00:22:07,840 --> 00:22:11,520
that is whether that's kept up to date

00:22:09,679 --> 00:22:13,440
and to be honest we think that the istio

00:22:11,520 --> 00:22:15,280
api is built at the right level as i

00:22:13,440 --> 00:22:17,120
said in the presentation

00:22:15,280 --> 00:22:18,640
and the smi is likely to end up being

00:22:17,120 --> 00:22:20,799
the lowest common denominator where it

00:22:18,640 --> 00:22:23,440
will try and implement things

00:22:20,799 --> 00:22:25,760
that apply to multiple service meshes

00:22:23,440 --> 00:22:27,600
and not give you the best opportunity to

00:22:25,760 --> 00:22:28,799
use the functionality built into the one

00:22:27,600 --> 00:22:31,760
that you're using

00:22:28,799 --> 00:22:33,200
it's also tough because i want to say

00:22:31,760 --> 00:22:34,640
nine out of ten service mesh products

00:22:33,200 --> 00:22:36,320
use envoy as their engine

00:22:34,640 --> 00:22:38,559
lickety is the main holdout they have

00:22:36,320 --> 00:22:40,080
their own proxy written in rust

00:22:38,559 --> 00:22:42,080
and so there will be some things which

00:22:40,080 --> 00:22:44,720
you can express in

00:22:42,080 --> 00:22:47,120
smi that will be presumably reasonably

00:22:44,720 --> 00:22:48,159
envoy specific and it will be hard to

00:22:47,120 --> 00:22:50,640
assume that you'll get the same

00:22:48,159 --> 00:22:51,440
functionality out of that similar to for

00:22:50,640 --> 00:22:53,520
example the

00:22:51,440 --> 00:22:55,440
apis between kubernetes and mesos and so

00:22:53,520 --> 00:22:57,120
on or even going back to vms

00:22:55,440 --> 00:22:59,600
things like scalar and things that tried

00:22:57,120 --> 00:23:01,760
to abstract away the difference between

00:22:59,600 --> 00:23:03,039
different cloud providers we don't see

00:23:01,760 --> 00:23:09,840
that any of them really picked up a lot

00:23:03,039 --> 00:23:09,840
of traction over time

00:23:18,640 --> 00:23:21,600
it still seems i'm the only person who

00:23:20,080 --> 00:23:23,360
can use the q a feature here but the

00:23:21,600 --> 00:23:24,799
correct answer is earl grey is the best

00:23:23,360 --> 00:23:27,200
flavor of tea if anyone was paying

00:23:24,799 --> 00:23:27,200
attention

00:23:27,760 --> 00:23:31,280
lovely all right well i will wrap this

00:23:29,440 --> 00:23:33,440
up now if anyone has any questions i'm

00:23:31,280 --> 00:23:35,440
at craigbox on twitter and i'm

00:23:33,440 --> 00:23:37,840
very happy to answer going on thank you

00:23:35,440 --> 00:23:37,840

YouTube URL: https://www.youtube.com/watch?v=CzCqbq0bMis


