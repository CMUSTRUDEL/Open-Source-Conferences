Title: Deep Dive: `cf push` Comes to Kubernetes: Introducing cf-for-k8s 1.0 - Paul Warren, Vmware
Publication date: 2020-10-26
Playlist: Cloud Foundry Summit Europe 2020
Description: 
	Deep Dive: `cf push` Comes to Kubernetes: Introducing cf-for-k8s 1.0 - Paul Warren, Vmware

Cloud Foundry recently launched the much-awaited Cloud Foundry for Kubernetes (cf-for-k8s) 1.0 release. The cf-for-k8s project is aimed at simplifying the development and deployment of cloud-native apps on Kubernetes. In this talk, we will discuss the challenges app developers face in working with Kubernetes, and provide an introduction to Cloud Foundry and “cf push.” We’ll also explore the benefits of abstraction interfaces for app developers, how it leverages popular projects from the Kubernetes ecosystem, and a walkthrough of how to get started. By the end of this session, attendees will be able to understand the general architecture of cf-for-k8s, the benefits of using cf-for-k8s atop Kubernetes, and the project roadmap.
Captions: 
	00:00:00,080 --> 00:00:06,480
okay let's make a start hello folks

00:00:03,199 --> 00:00:07,279
um welcome to my presentation on cf for

00:00:06,480 --> 00:00:10,320
kate's

00:00:07,279 --> 00:00:14,480
1.0 as you may know by now

00:00:10,320 --> 00:00:17,840
uh we hit this amazing milestone

00:00:14,480 --> 00:00:22,160
this week and i'm delighted to be here

00:00:17,840 --> 00:00:22,160
talking to you about that today

00:00:24,800 --> 00:00:28,720
so standard disclaimer before we start

00:00:26,960 --> 00:00:30,480
this presentation is intended for

00:00:28,720 --> 00:00:33,200
educational purposes only

00:00:30,480 --> 00:00:34,640
uh everything in here is to the best of

00:00:33,200 --> 00:00:37,840
my knowledge

00:00:34,640 --> 00:00:40,879
accurate but if you do find

00:00:37,840 --> 00:00:42,079
uh some discrepancies then um they

00:00:40,879 --> 00:00:45,840
weren't intentional and

00:00:42,079 --> 00:00:48,559
i apologize in advance

00:00:45,840 --> 00:00:49,280
so who's speaking today well my name is

00:00:48,559 --> 00:00:53,039
paul warren

00:00:49,280 --> 00:00:55,760
and i work for vmware and i have had

00:00:53,039 --> 00:00:56,960
the pleasure of working with cloud

00:00:55,760 --> 00:01:00,719
foundry for about

00:00:56,960 --> 00:01:03,680
five years i first started on uaa

00:01:00,719 --> 00:01:04,960
because i'm a java guy and at the time i

00:01:03,680 --> 00:01:08,320
also worked for emc

00:01:04,960 --> 00:01:10,640
so i helped propose and laterally

00:01:08,320 --> 00:01:12,320
implement the volume services feature

00:01:10,640 --> 00:01:13,840
that we know in cloud foundry

00:01:12,320 --> 00:01:15,520
and i stuck around on that team for

00:01:13,840 --> 00:01:18,240
quite a while in fact

00:01:15,520 --> 00:01:19,040
and then i rotated on to release

00:01:18,240 --> 00:01:22,320
engineering

00:01:19,040 --> 00:01:25,520
initially as an engineer and then

00:01:22,320 --> 00:01:26,799
subsequently as product manager and

00:01:25,520 --> 00:01:29,360
therefore

00:01:26,799 --> 00:01:30,320
i am currently responsible for a cf

00:01:29,360 --> 00:01:32,720
deployment product

00:01:30,320 --> 00:01:33,680
and for cf4 case that we're talking to

00:01:32,720 --> 00:01:36,320
you

00:01:33,680 --> 00:01:36,320
about today

00:01:37,439 --> 00:01:41,520
so my agenda well i don't really have

00:01:39,920 --> 00:01:42,079
one we're kind of going to go on a

00:01:41,520 --> 00:01:44,320
journey

00:01:42,079 --> 00:01:45,840
and look at the development workflow

00:01:44,320 --> 00:01:48,560
from the perspective of

00:01:45,840 --> 00:01:49,600
uh someone using kubernetes directly and

00:01:48,560 --> 00:01:52,640
someone using

00:01:49,600 --> 00:01:55,840
cloud foundry directly

00:01:52,640 --> 00:01:55,840
so let's make a start

00:01:56,799 --> 00:02:01,360
let's start with kubernetes an open

00:01:59,200 --> 00:02:03,680
source container orchestration system

00:02:01,360 --> 00:02:04,560
has become the de facto standard and key

00:02:03,680 --> 00:02:06,799
enabler

00:02:04,560 --> 00:02:08,479
for cloud native applications and the

00:02:06,799 --> 00:02:11,440
way they are architected

00:02:08,479 --> 00:02:12,319
composed deployed and managed

00:02:11,440 --> 00:02:14,720
enterprises

00:02:12,319 --> 00:02:16,080
are using kubernetes to create modern

00:02:14,720 --> 00:02:18,560
architectures

00:02:16,080 --> 00:02:21,840
composed of microservices that scale

00:02:18,560 --> 00:02:24,400
massively and seamlessly

00:02:21,840 --> 00:02:24,879
is great it's amazing in fact making

00:02:24,400 --> 00:02:27,120
what

00:02:24,879 --> 00:02:28,239
what was once very difficult now very

00:02:27,120 --> 00:02:30,959
possible

00:02:28,239 --> 00:02:31,920
it is in essence an entire ecosystem of

00:02:30,959 --> 00:02:35,200
tools

00:02:31,920 --> 00:02:37,440
networking load balancing object storage

00:02:35,200 --> 00:02:39,040
compute and memory allocation and

00:02:37,440 --> 00:02:40,640
scheduling

00:02:39,040 --> 00:02:42,160
all working in concert to make the

00:02:40,640 --> 00:02:44,160
difficult possible

00:02:42,160 --> 00:02:45,360
but operating and using this set of

00:02:44,160 --> 00:02:47,599
interconnected tools

00:02:45,360 --> 00:02:49,920
particularly in production settings is

00:02:47,599 --> 00:02:50,720
hard and much as we would like it there

00:02:49,920 --> 00:02:53,040
is no such

00:02:50,720 --> 00:02:54,400
thing as a self-tuning self-healing

00:02:53,040 --> 00:02:57,599
self-administering

00:02:54,400 --> 00:02:59,440
kubernetes cluster so unders so to

00:02:57,599 --> 00:03:00,560
understand just some of the complexities

00:02:59,440 --> 00:03:02,640
of kubernetes

00:03:00,560 --> 00:03:03,680
and conversely the benefits of cloud

00:03:02,640 --> 00:03:05,280
foundry

00:03:03,680 --> 00:03:07,360
let's take ourselves on a journey

00:03:05,280 --> 00:03:08,239
comparing contrasting a developer's

00:03:07,360 --> 00:03:11,360
experience

00:03:08,239 --> 00:03:13,360
with both a quick note

00:03:11,360 --> 00:03:15,599
as we walk through this presentation i

00:03:13,360 --> 00:03:18,239
may present some workflows as those of

00:03:15,599 --> 00:03:20,080
the developer using kubernetes to the

00:03:18,239 --> 00:03:20,720
best of my knowledge these workflows are

00:03:20,080 --> 00:03:22,720
accurate

00:03:20,720 --> 00:03:24,720
and do need to be performed but not

00:03:22,720 --> 00:03:26,640
necessarily by the developer

00:03:24,720 --> 00:03:32,080
this was done to hopefully improve the

00:03:26,640 --> 00:03:35,200
flow of the presentation

00:03:32,080 --> 00:03:36,640
but first let's make a quick pick stop

00:03:35,200 --> 00:03:38,720
to take a look at the differences

00:03:36,640 --> 00:03:41,920
between the deployment experience

00:03:38,720 --> 00:03:46,560
of cfocates and cfvms let's look at it

00:03:41,920 --> 00:03:48,159
from the platform operator's perspective

00:03:46,560 --> 00:03:50,159
when we're deploying cloud foundry on

00:03:48,159 --> 00:03:51,120
vms we use a tool called bosch

00:03:50,159 --> 00:03:54,000
bootloader

00:03:51,120 --> 00:03:54,720
which is bubble for short we bubble

00:03:54,000 --> 00:03:56,480
ourselves up

00:03:54,720 --> 00:03:59,040
some infrastructure on the cloud of our

00:03:56,480 --> 00:04:01,280
choice and a boss director

00:03:59,040 --> 00:04:02,959
this usually takes between 30 minutes

00:04:01,280 --> 00:04:04,799
and an hour

00:04:02,959 --> 00:04:06,959
whilst that's happening we can get clone

00:04:04,799 --> 00:04:08,720
the cf deployment repository

00:04:06,959 --> 00:04:10,720
this contains all the files need to

00:04:08,720 --> 00:04:12,959
deploy at cloud foundry

00:04:10,720 --> 00:04:14,000
it also comes with a set of ops files

00:04:12,959 --> 00:04:15,680
that you can

00:04:14,000 --> 00:04:17,120
apply to your deployment if you would

00:04:15,680 --> 00:04:19,600
like to change the shape of that

00:04:17,120 --> 00:04:21,840
deployment

00:04:19,600 --> 00:04:22,960
we may also need to provide some of our

00:04:21,840 --> 00:04:25,120
own

00:04:22,960 --> 00:04:27,360
we collect these ops files together and

00:04:25,120 --> 00:04:30,320
we do a bosch deploy with them

00:04:27,360 --> 00:04:31,840
we wait a further one to two hours at

00:04:30,320 --> 00:04:34,000
the end of which we'll have a cloud

00:04:31,840 --> 00:04:36,080
foundry deployed on a bunch of vms

00:04:34,000 --> 00:04:37,440
so total time there is about an hour and

00:04:36,080 --> 00:04:40,400
a half to three hours

00:04:37,440 --> 00:04:44,240
depending on the size of your deployment

00:04:40,400 --> 00:04:46,080
now compare that to sear for case

00:04:44,240 --> 00:04:48,160
where we need to first create ourselves

00:04:46,080 --> 00:04:50,800
a kubernetes cluster

00:04:48,160 --> 00:04:52,400
and my experience on gcp anyway that

00:04:50,800 --> 00:04:54,080
usually takes between five and ten

00:04:52,400 --> 00:04:56,720
minutes for a

00:04:54,080 --> 00:04:57,520
reasonable size cluster whilst that's

00:04:56,720 --> 00:04:59,120
happening

00:04:57,520 --> 00:05:00,560
we can git clone the cfocate's

00:04:59,120 --> 00:05:02,720
repository

00:05:00,560 --> 00:05:04,720
now with cfocates we made the decision

00:05:02,720 --> 00:05:06,560
not to provide any ops files

00:05:04,720 --> 00:05:07,759
instead you need to create yourself an

00:05:06,560 --> 00:05:09,680
installation file

00:05:07,759 --> 00:05:12,000
with all of the properties set to the

00:05:09,680 --> 00:05:13,600
values you want

00:05:12,000 --> 00:05:15,360
to create the shape of the deployment

00:05:13,600 --> 00:05:17,520
that you would like

00:05:15,360 --> 00:05:19,280
once we've created our install file we

00:05:17,520 --> 00:05:21,120
can then do a cap deploy

00:05:19,280 --> 00:05:23,600
which is the new bosch deploy and we'll

00:05:21,120 --> 00:05:26,720
talk a little bit about cap in a minute

00:05:23,600 --> 00:05:27,840
we wait a further 5 to 10 minutes for a

00:05:26,720 --> 00:05:30,880
total time of

00:05:27,840 --> 00:05:32,400
about 20 minutes at the end of which

00:05:30,880 --> 00:05:34,320
we'll have a cloud foundry installed on

00:05:32,400 --> 00:05:35,919
the kubernetes cluster

00:05:34,320 --> 00:05:38,160
i think you will agree that we see

00:05:35,919 --> 00:05:39,759
dramatic improvements here

00:05:38,160 --> 00:05:41,919
within the component teams within the

00:05:39,759 --> 00:05:43,600
foundation we were very excited

00:05:41,919 --> 00:05:45,120
when we first started seeing these sorts

00:05:43,600 --> 00:05:47,039
of times a budge

00:05:45,120 --> 00:05:48,160
i remember countless messages being

00:05:47,039 --> 00:05:49,680
posted to slack

00:05:48,160 --> 00:05:51,440
when the next person that hadn't

00:05:49,680 --> 00:05:53,280
installed cfocates before

00:05:51,440 --> 00:05:54,960
did so for their first time and were

00:05:53,280 --> 00:05:57,600
blown away by how quick it was

00:05:54,960 --> 00:05:59,440
it was very exciting time and this is

00:05:57,600 --> 00:06:01,520
important to note that those timings are

00:05:59,440 --> 00:06:03,520
for a first product install too

00:06:01,520 --> 00:06:05,520
an upgrade is dramatically quicker than

00:06:03,520 --> 00:06:08,400
this so let's actually have a look at

00:06:05,520 --> 00:06:08,400
that for ourselves

00:06:15,520 --> 00:06:21,120
so we're in um the cfocates repository

00:06:18,800 --> 00:06:25,039
that i've i've get cloned here

00:06:21,120 --> 00:06:27,680
um ahead of time and

00:06:25,039 --> 00:06:28,319
the first thing and so the top window is

00:06:27,680 --> 00:06:30,639
my

00:06:28,319 --> 00:06:32,000
is my cli and the bottom window is

00:06:30,639 --> 00:06:33,919
canines

00:06:32,000 --> 00:06:35,759
which is a really cool tool for

00:06:33,919 --> 00:06:37,360
navigating kubernetes clusters and we're

00:06:35,759 --> 00:06:39,600
just going to flick between the two and

00:06:37,360 --> 00:06:40,720
see things happening as the deployment

00:06:39,600 --> 00:06:43,199
progresses

00:06:40,720 --> 00:06:45,840
so the first thing we said we need to do

00:06:43,199 --> 00:06:48,319
was create an installation file

00:06:45,840 --> 00:06:49,919
now in the hack directory of cfo gates

00:06:48,319 --> 00:06:51,680
there's a generate value script

00:06:49,919 --> 00:06:52,960
which we use all the time and you're

00:06:51,680 --> 00:06:54,720
free to use too

00:06:52,960 --> 00:06:57,039
that will generate you this uh

00:06:54,720 --> 00:06:58,880
installation file pretty much

00:06:57,039 --> 00:07:00,639
it takes two parameters the first

00:06:58,880 --> 00:07:02,400
parameter dash d

00:07:00,639 --> 00:07:04,000
indicates the domain that you wish to

00:07:02,400 --> 00:07:06,160
associate with your

00:07:04,000 --> 00:07:08,160
deployment and this is mandatory you

00:07:06,160 --> 00:07:11,039
need to supply this

00:07:08,160 --> 00:07:12,479
second parameter dash g is pointing to

00:07:11,039 --> 00:07:16,000
the keys for a

00:07:12,479 --> 00:07:17,520
google container registry now uh

00:07:16,000 --> 00:07:20,080
this is for convenience for us because

00:07:17,520 --> 00:07:22,639
we deploy on gcp for the most part

00:07:20,080 --> 00:07:23,440
um this is optional you do not need to

00:07:22,639 --> 00:07:25,759
supply this

00:07:23,440 --> 00:07:27,759
but cfocates is a bring your own app

00:07:25,759 --> 00:07:30,880
registry so if you don't

00:07:27,759 --> 00:07:32,960
point to a gcr then you need to

00:07:30,880 --> 00:07:34,800
go in after this is generated and add

00:07:32,960 --> 00:07:38,080
some app credential registry

00:07:34,800 --> 00:07:40,319
uh credentials uh following um

00:07:38,080 --> 00:07:41,919
the docs will show you how to do that

00:07:40,319 --> 00:07:45,039
i'm not going to run this because

00:07:41,919 --> 00:07:46,639
i did it ahead of time i'm not going to

00:07:45,039 --> 00:07:48,639
show it either because it's got real

00:07:46,639 --> 00:07:49,840
certificates and so on and so forth in

00:07:48,639 --> 00:07:52,720
it so you have to

00:07:49,840 --> 00:07:54,800
believe me so we can move on to the cap

00:07:52,720 --> 00:07:57,039
deploy

00:07:54,800 --> 00:07:58,240
and first thing we'll notice here is

00:07:57,039 --> 00:08:00,800
actually there's two commands

00:07:58,240 --> 00:08:01,680
um there's a ytt command and a cap

00:08:00,800 --> 00:08:04,160
command

00:08:01,680 --> 00:08:04,720
so both of these tools come from carvel

00:08:04,160 --> 00:08:08,319
which is

00:08:04,720 --> 00:08:12,720
formerly known as k14s uh and it's a

00:08:08,319 --> 00:08:14,400
you know a set of tools that help you uh

00:08:12,720 --> 00:08:15,840
build and install applications onto

00:08:14,400 --> 00:08:18,240
kubernetes

00:08:15,840 --> 00:08:19,919
so the ytt is run first and we're

00:08:18,240 --> 00:08:22,960
supplying there's two parameters

00:08:19,919 --> 00:08:23,759
the first dash af config is actually

00:08:22,960 --> 00:08:26,479
pointing to

00:08:23,759 --> 00:08:28,160
the config directory in the cfocate's

00:08:26,479 --> 00:08:29,919
repository here

00:08:28,160 --> 00:08:31,759
and that is a set of templated

00:08:29,919 --> 00:08:34,399
kubernetes yaml

00:08:31,759 --> 00:08:36,640
the second parameter the second dash f

00:08:34,399 --> 00:08:40,080
is the installation file that we created

00:08:36,640 --> 00:08:41,760
with the hack generate value script and

00:08:40,080 --> 00:08:43,519
essentially what happens here is ytt

00:08:41,760 --> 00:08:46,560
takes the uh the

00:08:43,519 --> 00:08:48,240
the installation values uh from the

00:08:46,560 --> 00:08:50,000
installation values file and it kind of

00:08:48,240 --> 00:08:51,839
injects them into the kubernetes

00:08:50,000 --> 00:08:52,880
templates to make them real kubernetes

00:08:51,839 --> 00:08:54,480
ammo

00:08:52,880 --> 00:08:56,000
and it kind of renders all that out to

00:08:54,480 --> 00:08:59,200
standard out

00:08:56,000 --> 00:09:00,800
which kind of pipes it onto the second

00:08:59,200 --> 00:09:02,000
command that gets run which is the cap

00:09:00,800 --> 00:09:03,920
deploy

00:09:02,000 --> 00:09:05,760
and so that takes all this kubernetes

00:09:03,920 --> 00:09:08,160
renders kubernetes yaml

00:09:05,760 --> 00:09:09,760
and we're telling it here to take all

00:09:08,160 --> 00:09:11,040
that and deploy it into the kubernetes

00:09:09,760 --> 00:09:13,040
cluster that we're attached to

00:09:11,040 --> 00:09:14,320
and call that deployment cf which is

00:09:13,040 --> 00:09:16,640
what the dash acf

00:09:14,320 --> 00:09:18,959
argument is all about so i'm going to go

00:09:16,640 --> 00:09:21,920
ahead and run this

00:09:18,959 --> 00:09:23,600
and what's happening now is it's the

00:09:21,920 --> 00:09:24,399
same command you do this cap to boy

00:09:23,600 --> 00:09:26,399
command

00:09:24,399 --> 00:09:27,600
for a first product install and for an

00:09:26,399 --> 00:09:30,240
upgrade so

00:09:27,600 --> 00:09:32,080
obviously cap goes away here and it it

00:09:30,240 --> 00:09:33,440
compares the the rendered diameter

00:09:32,080 --> 00:09:35,839
you've given it

00:09:33,440 --> 00:09:37,279
against what's out there in the cluster

00:09:35,839 --> 00:09:38,959
and figures out what it needs to

00:09:37,279 --> 00:09:40,880
you know create what it needs to update

00:09:38,959 --> 00:09:43,040
when it needs to delete

00:09:40,880 --> 00:09:44,399
but in this case it's a first product

00:09:43,040 --> 00:09:46,880
install so

00:09:44,399 --> 00:09:48,240
um everything is set to create you can

00:09:46,880 --> 00:09:50,320
see there's a big

00:09:48,240 --> 00:09:52,240
long list of things and it's quite

00:09:50,320 --> 00:09:53,920
interesting to read

00:09:52,240 --> 00:09:55,519
so i encourage you to look at that so

00:09:53,920 --> 00:09:57,040
i'm just going to hit yes here

00:09:55,519 --> 00:09:58,560
now in the bottom window you can see

00:09:57,040 --> 00:10:00,160
we're looking at namespaces and

00:09:58,560 --> 00:10:01,040
immediately you can start to see some

00:10:00,160 --> 00:10:03,680
action

00:10:01,040 --> 00:10:05,440
so cap is moving ahead with the

00:10:03,680 --> 00:10:06,399
deployment and deploying a bunch of name

00:10:05,440 --> 00:10:08,560
spaces

00:10:06,399 --> 00:10:09,760
so i'll just call some of these out cf

00:10:08,560 --> 00:10:11,920
workloads

00:10:09,760 --> 00:10:13,600
is uh where your workloads will

00:10:11,920 --> 00:10:16,720
ultimately run

00:10:13,600 --> 00:10:18,160
cf workload staging is the uh the

00:10:16,720 --> 00:10:20,640
staging area for your

00:10:18,160 --> 00:10:21,279
um for your images uh on the way to them

00:10:20,640 --> 00:10:24,560
being

00:10:21,279 --> 00:10:27,120
uh real apps that run on the cluster

00:10:24,560 --> 00:10:28,320
uh we've got a blob store and a db

00:10:27,120 --> 00:10:29,839
namespace there

00:10:28,320 --> 00:10:31,600
if you don't provide your own we'll

00:10:29,839 --> 00:10:35,920
we'll deploy uh some

00:10:31,600 --> 00:10:37,760
single instance on the cluster for you

00:10:35,920 --> 00:10:39,360
cf system is where most of the system

00:10:37,760 --> 00:10:41,920
components run

00:10:39,360 --> 00:10:44,160
and then we've also got kpac which is

00:10:41,920 --> 00:10:47,519
our kind of source to image system

00:10:44,160 --> 00:10:49,040
so let's dive into cf system have a look

00:10:47,519 --> 00:10:50,880
at the pods in there and you can see

00:10:49,040 --> 00:10:52,320
there's a bunch of things going on that

00:10:50,880 --> 00:10:53,839
are all different colors

00:10:52,320 --> 00:10:55,839
uh and this is kind of if you're seeing

00:10:53,839 --> 00:10:57,920
kubernetes at work here so it's an

00:10:55,839 --> 00:10:59,760
eventually consistent thing so what

00:10:57,920 --> 00:11:01,680
cap's kind of done is

00:10:59,760 --> 00:11:03,120
thrown everything at kubernetes and it's

00:11:01,680 --> 00:11:05,360
all happening at once and

00:11:03,120 --> 00:11:06,640
eventually it will converge and become

00:11:05,360 --> 00:11:08,480
good

00:11:06,640 --> 00:11:10,959
so that basically is the deployment and

00:11:08,480 --> 00:11:15,040
it will take around 10 minutes so we'll

00:11:10,959 --> 00:11:18,560
we'll check back in with that later

00:11:15,040 --> 00:11:18,560
all right moving on

00:11:19,200 --> 00:11:22,320
so let's have a look look at the

00:11:20,320 --> 00:11:25,680
architecture real quick um

00:11:22,320 --> 00:11:26,399
as you can see with cfocates the system

00:11:25,680 --> 00:11:28,480
components

00:11:26,399 --> 00:11:29,519
and the application workloads that are

00:11:28,480 --> 00:11:31,600
cf pushed by

00:11:29,519 --> 00:11:33,760
developers all end up running on the

00:11:31,600 --> 00:11:36,079
kubernetes cluster

00:11:33,760 --> 00:11:37,760
to those that are familiar with cf as we

00:11:36,079 --> 00:11:38,880
cast our eyes over the architectural

00:11:37,760 --> 00:11:42,000
diagram here

00:11:38,880 --> 00:11:44,360
we see lots of familiar names but all

00:11:42,000 --> 00:11:46,000
components have undergone either a

00:11:44,360 --> 00:11:48,399
containerization effort

00:11:46,000 --> 00:11:50,320
to make them kubernetes native the cloud

00:11:48,399 --> 00:11:51,760
controller and uaa being two good

00:11:50,320 --> 00:11:53,360
examples of this

00:11:51,760 --> 00:11:55,519
or they've undergone a complete

00:11:53,360 --> 00:11:56,959
re-architecture and of particular note

00:11:55,519 --> 00:11:59,920
here are the networking

00:11:56,959 --> 00:12:02,720
logging and metrics components that are

00:11:59,920 --> 00:12:05,360
now lean heavily on cncf projects

00:12:02,720 --> 00:12:07,440
such as istio envoy fluentd and

00:12:05,360 --> 00:12:09,760
prometheus

00:12:07,440 --> 00:12:11,839
finally some components are completely

00:12:09,760 --> 00:12:14,399
new those being kpak

00:12:11,839 --> 00:12:15,360
competit pacquetto or cloud native build

00:12:14,399 --> 00:12:19,200
packs

00:12:15,360 --> 00:12:21,200
and irini excuse me

00:12:19,200 --> 00:12:24,160
we'll touch upon as many of these as we

00:12:21,200 --> 00:12:27,440
can as we move through our presentation

00:12:24,160 --> 00:12:31,839
now some components you

00:12:27,440 --> 00:12:31,839
have to bring with you excuse me

00:12:32,240 --> 00:12:35,040
excuse me

00:12:36,240 --> 00:12:40,720
trying to get my mouse situated here now

00:12:39,279 --> 00:12:41,120
some components you have to bring with

00:12:40,720 --> 00:12:43,120
you

00:12:41,120 --> 00:12:44,639
uh those being a load balancer and app

00:12:43,120 --> 00:12:46,720
registry

00:12:44,639 --> 00:12:47,760
others you can bring your own if you

00:12:46,720 --> 00:12:50,320
would like

00:12:47,760 --> 00:12:52,480
cfocates is configurable to use an

00:12:50,320 --> 00:12:54,399
external database and blob store

00:12:52,480 --> 00:12:56,160
but it will create its own single

00:12:54,399 --> 00:12:57,839
instance deployments of proquest

00:12:56,160 --> 00:12:59,120
and minio on the cluster if you don't

00:12:57,839 --> 00:13:00,560
and we saw that happening in our

00:12:59,120 --> 00:13:03,440
deployment just now

00:13:00,560 --> 00:13:05,360
so batteries are included here we are

00:13:03,440 --> 00:13:06,000
really trying to make cf accessible this

00:13:05,360 --> 00:13:08,000
time around

00:13:06,000 --> 00:13:09,600
and actually one of the things i would

00:13:08,000 --> 00:13:12,000
like to look at is

00:13:09,600 --> 00:13:13,760
is doing the same for an app registry as

00:13:12,000 --> 00:13:15,839
well so you don't necessarily have to

00:13:13,760 --> 00:13:18,560
bring that

00:13:15,839 --> 00:13:20,000
now as we touched upon cfocates is

00:13:18,560 --> 00:13:22,240
deployed with an entirely

00:13:20,000 --> 00:13:23,519
new tool chain called carvel formerly

00:13:22,240 --> 00:13:25,920
k-14s

00:13:23,519 --> 00:13:26,880
and carvel provides a set of reliable

00:13:25,920 --> 00:13:29,680
single purpose

00:13:26,880 --> 00:13:31,519
composable tools that add in your the

00:13:29,680 --> 00:13:32,959
aid in your application building

00:13:31,519 --> 00:13:34,800
configuration and deployment to

00:13:32,959 --> 00:13:35,680
kubernetes we think you're really going

00:13:34,800 --> 00:13:39,120
to enjoy these

00:13:35,680 --> 00:13:39,120
we've enjoyed using them so far

00:13:41,120 --> 00:13:45,680
okay so let's start our journey uh back

00:13:44,480 --> 00:13:47,360
to our comparison

00:13:45,680 --> 00:13:49,839
we have a couple of developers

00:13:47,360 --> 00:13:53,040
kubernetes kevin and cloud foundry cody

00:13:49,839 --> 00:13:53,600
with k of course and they've been hard

00:13:53,040 --> 00:13:55,600
at work

00:13:53,600 --> 00:13:57,199
on an mvp of their application and

00:13:55,600 --> 00:14:00,160
they're ready to deploy it

00:13:57,199 --> 00:14:02,560
let's take a look at their experiences

00:14:00,160 --> 00:14:04,480
kevin who's using kubernetes directly

00:14:02,560 --> 00:14:06,639
needs to create himself for deployment

00:14:04,480 --> 00:14:08,240
he chooses a replica set so he creates

00:14:06,639 --> 00:14:10,160
replica set yammer

00:14:08,240 --> 00:14:12,480
he messes with this yama a bit to get it

00:14:10,160 --> 00:14:13,920
right your mileage may vary here

00:14:12,480 --> 00:14:16,240
depending on how familiar you are with

00:14:13,920 --> 00:14:18,160
the kubernetes api

00:14:16,240 --> 00:14:20,320
he realizes as part of this that he

00:14:18,160 --> 00:14:21,760
needs to contain an image

00:14:20,320 --> 00:14:23,680
if he needs a container image then he

00:14:21,760 --> 00:14:24,480
also needs to contain a registry to host

00:14:23,680 --> 00:14:26,399
that image

00:14:24,480 --> 00:14:27,600
so he procures access to a container

00:14:26,399 --> 00:14:30,399
registry

00:14:27,600 --> 00:14:32,800
he built his app to put in the image he

00:14:30,399 --> 00:14:35,519
creates his image with a docker file

00:14:32,800 --> 00:14:38,399
he docker builds tags and pushes that to

00:14:35,519 --> 00:14:40,639
a container registry

00:14:38,399 --> 00:14:41,760
that gives him a reference to the image

00:14:40,639 --> 00:14:43,920
which he then puts

00:14:41,760 --> 00:14:45,680
in his replicas at yaml and finally he

00:14:43,920 --> 00:14:47,440
can coop cuddle apply that to get his

00:14:45,680 --> 00:14:49,279
deployment

00:14:47,440 --> 00:14:51,040
from a kubernetes perspective there's a

00:14:49,279 --> 00:14:53,279
lot of steps here

00:14:51,040 --> 00:14:54,720
most of which can be automated of course

00:14:53,279 --> 00:14:56,399
but let's bear in mind

00:14:54,720 --> 00:14:59,120
that we are not the only development

00:14:56,399 --> 00:15:00,800
team our organization has many

00:14:59,120 --> 00:15:02,720
each team needs to go through this

00:15:00,800 --> 00:15:04,160
process for their applications and their

00:15:02,720 --> 00:15:06,639
services

00:15:04,160 --> 00:15:08,639
now when we compare this to cf gates

00:15:06,639 --> 00:15:09,199
where the developer simply has to change

00:15:08,639 --> 00:15:11,440
into

00:15:09,199 --> 00:15:12,800
the directory that contains his source

00:15:11,440 --> 00:15:17,600
code and run

00:15:12,800 --> 00:15:17,600
cf push so let's take a look at that

00:15:24,959 --> 00:15:31,839
okay so our deployment is completed here

00:15:28,240 --> 00:15:34,240
9 53 it's finished and

00:15:31,839 --> 00:15:41,839
let's see i forgot to time this but we

00:15:34,240 --> 00:15:41,839
can whiz up here real quick

00:15:41,920 --> 00:15:46,720
yeah there we go 9 46 so uh about seven

00:15:45,279 --> 00:15:50,320
minutes i think

00:15:46,720 --> 00:15:52,399
uh and we're done um so great so now i

00:15:50,320 --> 00:15:55,600
need to uh target the api

00:15:52,399 --> 00:15:57,440
um so i templated this command because i

00:15:55,600 --> 00:15:58,720
deploy cfgates a bunch of times to a

00:15:57,440 --> 00:16:00,079
bunch of different clusters i've done

00:15:58,720 --> 00:16:02,480
this for my own

00:16:00,079 --> 00:16:04,639
uh benefit but all i'm doing here is

00:16:02,480 --> 00:16:05,680
targeting the api obviously and then i'm

00:16:04,639 --> 00:16:08,079
authenticating

00:16:05,680 --> 00:16:09,519
grabbing the admin password out of the

00:16:08,079 --> 00:16:11,920
input values file that we created

00:16:09,519 --> 00:16:11,920
earlier

00:16:16,320 --> 00:16:20,880
and then obviously we need to target an

00:16:19,440 --> 00:16:23,839
awk so i'm just going to target the

00:16:20,880 --> 00:16:23,839
system org for

00:16:24,639 --> 00:16:27,920
ease and i'm going to create myself a

00:16:26,320 --> 00:16:30,639
space

00:16:27,920 --> 00:16:30,639
called s

00:16:31,120 --> 00:16:35,680
and then i'm going to re-target the org

00:16:33,759 --> 00:16:38,639
to put myself in that space and when i'm

00:16:35,680 --> 00:16:42,079
in that i can then change into the

00:16:38,639 --> 00:16:43,440
famous spring music directory and i can

00:16:42,079 --> 00:16:48,160
simply run

00:16:43,440 --> 00:16:50,560
cf push and

00:16:48,160 --> 00:16:51,759
off that will go and of course what's

00:16:50,560 --> 00:16:53,759
going to happen here is it's going to

00:16:51,759 --> 00:16:55,600
load all the application bits up to

00:16:53,759 --> 00:16:57,600
uh the cloud controller is going to put

00:16:55,600 --> 00:16:59,120
them in app registry and then it's going

00:16:57,600 --> 00:17:00,320
to do all of the source to image stuff

00:16:59,120 --> 00:17:03,440
and then schedule that

00:17:00,320 --> 00:17:04,959
to run in cf workloads namespace we'll

00:17:03,440 --> 00:17:07,839
come back and have a look at that

00:17:04,959 --> 00:17:07,839
a little bit later

00:17:10,240 --> 00:17:14,959
moving on okay so

00:17:15,039 --> 00:17:20,400
um kubernetes and kubernetes kevin had

00:17:18,079 --> 00:17:23,679
to do a whole bunch of stuff there

00:17:20,400 --> 00:17:25,600
um as you can see and uh cody actually

00:17:23,679 --> 00:17:27,520
just had to run cf push which we've done

00:17:25,600 --> 00:17:29,840
ourselves so there's a lot of magic

00:17:27,520 --> 00:17:34,400
going on so how does that happen

00:17:29,840 --> 00:17:37,679
uh well it happens with

00:17:34,400 --> 00:17:39,679
i've lost my presenter notes here

00:17:37,679 --> 00:17:41,120
there we go i've got my presenter notes

00:17:39,679 --> 00:17:44,480
back so cf

00:17:41,120 --> 00:17:46,720
integrates a new component called kpac

00:17:44,480 --> 00:17:48,080
which is the open source component of

00:17:46,720 --> 00:17:51,120
the tanzu build service

00:17:48,080 --> 00:17:52,559
from vmware which in turn uses cloud

00:17:51,120 --> 00:17:55,360
native build packs

00:17:52,559 --> 00:17:57,200
which you can find under buildpacks.io

00:17:55,360 --> 00:17:57,919
to orchestrate the source to image

00:17:57,200 --> 00:18:00,000
process

00:17:57,919 --> 00:18:01,120
whereby it detects your application's

00:18:00,000 --> 00:18:03,039
language

00:18:01,120 --> 00:18:04,960
builds and combines that with the

00:18:03,039 --> 00:18:07,440
relevant runtime components

00:18:04,960 --> 00:18:09,280
a java application server in our example

00:18:07,440 --> 00:18:11,679
for example

00:18:09,280 --> 00:18:12,880
builds the product of this into an image

00:18:11,679 --> 00:18:14,640
and uploads that

00:18:12,880 --> 00:18:17,600
to the container registry that you

00:18:14,640 --> 00:18:19,280
provided to the deployment

00:18:17,600 --> 00:18:21,039
a further capability that this

00:18:19,280 --> 00:18:22,799
integration provides

00:18:21,039 --> 00:18:24,320
for is the management of the base

00:18:22,799 --> 00:18:26,960
runtime of these images

00:18:24,320 --> 00:18:28,080
the os that they were built from to

00:18:26,960 --> 00:18:30,000
illustrate this point

00:18:28,080 --> 00:18:32,320
perhaps let me ask how kevin would deal

00:18:30,000 --> 00:18:34,720
with an os vulnerability

00:18:32,320 --> 00:18:35,600
not too difficult i suppose he'd rebuild

00:18:34,720 --> 00:18:38,080
the image from

00:18:35,600 --> 00:18:40,160
a base os image with the fix and

00:18:38,080 --> 00:18:42,080
redeploy his application

00:18:40,160 --> 00:18:43,679
not to labor an earlier point but how

00:18:42,080 --> 00:18:45,760
does your organization manage this

00:18:43,679 --> 00:18:47,840
across all of your development teams

00:18:45,760 --> 00:18:48,799
especially if there are slas that your

00:18:47,840 --> 00:18:52,080
organization

00:18:48,799 --> 00:18:54,080
needs to fulfill for its customers

00:18:52,080 --> 00:18:56,480
cloud native build packs gives the

00:18:54,080 --> 00:18:58,640
platform operator of cfocates

00:18:56,480 --> 00:19:00,240
the ability to patch the base runtime

00:18:58,640 --> 00:19:01,360
image of all currently pushed

00:19:00,240 --> 00:19:04,000
applications

00:19:01,360 --> 00:19:05,840
and of course of any that will be pushed

00:19:04,000 --> 00:19:08,240
with a single command

00:19:05,840 --> 00:19:09,919
with cfocates the operator doesn't have

00:19:08,240 --> 00:19:11,280
to coordinate with each and every

00:19:09,919 --> 00:19:13,200
development team

00:19:11,280 --> 00:19:15,120
they don't even have to wait for a new

00:19:13,200 --> 00:19:17,520
release of cfocates

00:19:15,120 --> 00:19:19,120
as soon as cmb releases a new runtime

00:19:17,520 --> 00:19:21,520
image you can apply that

00:19:19,120 --> 00:19:23,440
with a single command to your deployment

00:19:21,520 --> 00:19:25,440
and it will update everything

00:19:23,440 --> 00:19:27,919
pretty neat and a great value out of the

00:19:25,440 --> 00:19:27,919
platform

00:19:31,120 --> 00:19:34,640
furthermore if we compare the

00:19:32,880 --> 00:19:36,480
capabilities of cmb

00:19:34,640 --> 00:19:38,000
to the current set of competitors out

00:19:36,480 --> 00:19:39,760
there we see that that

00:19:38,000 --> 00:19:41,760
is far and away the most superior

00:19:39,760 --> 00:19:42,320
offering out there and you get all this

00:19:41,760 --> 00:19:45,039
free

00:19:42,320 --> 00:19:45,039
cf for gates

00:19:50,320 --> 00:19:55,039
so kpac and cmbs handle the source to

00:19:53,440 --> 00:19:57,679
image side of things

00:19:55,039 --> 00:19:59,039
a third new component called irene

00:19:57,679 --> 00:20:01,600
handles the scheduling

00:19:59,039 --> 00:20:02,559
so let's take a brief look at that

00:20:01,600 --> 00:20:04,480
project irini

00:20:02,559 --> 00:20:06,000
is an incubating effort within the cloud

00:20:04,480 --> 00:20:08,080
foundry foundation

00:20:06,000 --> 00:20:09,440
enabling plugable scheduling for cloud

00:20:08,080 --> 00:20:11,760
foundry

00:20:09,440 --> 00:20:14,080
essentially it provides a scheduler

00:20:11,760 --> 00:20:16,799
abstraction that we call the opi

00:20:14,080 --> 00:20:18,960
or orchestrator provider interface an

00:20:16,799 --> 00:20:21,360
implementation of that interface

00:20:18,960 --> 00:20:22,400
called arini that knows how to schedule

00:20:21,360 --> 00:20:25,520
applications

00:20:22,400 --> 00:20:28,480
and tasks onto a kubernetes cluster

00:20:25,520 --> 00:20:29,360
now we retrofitted the opi to the cloud

00:20:28,480 --> 00:20:31,280
controller

00:20:29,360 --> 00:20:33,200
so the cloud controller now coordinates

00:20:31,280 --> 00:20:36,400
with the scheduler via this interface

00:20:33,200 --> 00:20:37,520
to place its workloads when asked by the

00:20:36,400 --> 00:20:40,080
cloud controller

00:20:37,520 --> 00:20:41,039
irini combines the image previously

00:20:40,080 --> 00:20:44,080
built by kpac

00:20:41,039 --> 00:20:46,240
using cmbs with additional metadata

00:20:44,080 --> 00:20:47,120
such as the services that need to be

00:20:46,240 --> 00:20:49,440
bound

00:20:47,120 --> 00:20:52,320
into a properly configured stateful set

00:20:49,440 --> 00:20:54,880
in the cf workloads namespace

00:20:52,320 --> 00:21:01,919
and all of this replaces diego cloud

00:20:54,880 --> 00:21:04,000
foundry's original container scheduler

00:21:01,919 --> 00:21:07,360
so our app is deployed

00:21:04,000 --> 00:21:08,720
let's test it kubernetes kevin opens a

00:21:07,360 --> 00:21:10,799
browser

00:21:08,720 --> 00:21:12,480
he realizes that he needs to set up

00:21:10,799 --> 00:21:13,919
ingress because you don't get that for

00:21:12,480 --> 00:21:16,159
free with kubernetes

00:21:13,919 --> 00:21:18,559
so he creates himself a service resource

00:21:16,159 --> 00:21:21,679
of type load balancer

00:21:18,559 --> 00:21:23,280
cue cuddle applies that he waits for the

00:21:21,679 --> 00:21:26,159
service to be ready

00:21:23,280 --> 00:21:28,159
and gets the load balancer ip he then

00:21:26,159 --> 00:21:29,520
goes and updates his dns with that load

00:21:28,159 --> 00:21:33,559
balancer ip

00:21:29,520 --> 00:21:35,600
finally he's able to visit http

00:21:33,559 --> 00:21:37,919
myapp.mydomain.com which point he

00:21:35,600 --> 00:21:41,520
realizes he forgot to set up tls

00:21:37,919 --> 00:21:41,520
and he bookmarks this for later

00:21:41,679 --> 00:21:45,200
kevin has to perform a fair number of

00:21:43,280 --> 00:21:47,440
steps again fortunately

00:21:45,200 --> 00:21:49,280
these are one time only steps but there

00:21:47,440 --> 00:21:50,640
are most definitely variations on the

00:21:49,280 --> 00:21:52,640
theme here because not all

00:21:50,640 --> 00:21:54,480
infrastructures are created equal

00:21:52,640 --> 00:21:56,840
and there's also a bunch of different

00:21:54,480 --> 00:21:58,080
ways to get traffic into your kubernetes

00:21:56,840 --> 00:21:59,679
cluster

00:21:58,080 --> 00:22:01,600
additionally app routing is being

00:21:59,679 --> 00:22:03,120
handled per application here

00:22:01,600 --> 00:22:05,520
and scale this approach up to your

00:22:03,120 --> 00:22:08,960
organization again and you have a lot of

00:22:05,520 --> 00:22:10,400
load balances cfo gates handles routing

00:22:08,960 --> 00:22:12,559
as part of the push

00:22:10,400 --> 00:22:14,480
our integration with istio automatically

00:22:12,559 --> 00:22:16,080
creates a route for your application

00:22:14,480 --> 00:22:18,960
that leverages the platform's load

00:22:16,080 --> 00:22:20,960
balancer dns and certificates

00:22:18,960 --> 00:22:23,120
so let's go back and check on our

00:22:20,960 --> 00:22:27,840
deployment see where it's at and have a

00:22:23,120 --> 00:22:27,840
look at that

00:22:28,159 --> 00:22:35,360
and we can see we have deployed

00:22:32,000 --> 00:22:37,679
so i can go ahead and grab

00:22:35,360 --> 00:22:38,799
the url here and perhaps before we'll

00:22:37,679 --> 00:22:41,840
look at that

00:22:38,799 --> 00:22:43,760
we'll go back to our namespaces here and

00:22:41,840 --> 00:22:44,640
we'll head over to the cf workloads

00:22:43,760 --> 00:22:47,120
namespace

00:22:44,640 --> 00:22:49,360
and you can see there's a cf i'm sorry a

00:22:47,120 --> 00:22:51,200
spring music pod here and this is backed

00:22:49,360 --> 00:22:51,840
by a stateful set and this is actually

00:22:51,200 --> 00:22:54,000
the

00:22:51,840 --> 00:22:55,520
spring music app running and i can dive

00:22:54,000 --> 00:22:57,520
into this a little bit

00:22:55,520 --> 00:22:58,640
have a look at the logs and you can see

00:22:57,520 --> 00:23:01,440
it looks

00:22:58,640 --> 00:23:02,000
it looks pretty springy to me so that

00:23:01,440 --> 00:23:06,480
looks good

00:23:02,000 --> 00:23:06,480
so perhaps let's open a browser

00:23:07,120 --> 00:23:10,480
that was my last go let's open a browser

00:23:09,600 --> 00:23:13,039
here

00:23:10,480 --> 00:23:14,880
and punch in the spring music uh the

00:23:13,039 --> 00:23:18,080
route

00:23:14,880 --> 00:23:19,440
and hey presto uh we enter the spring

00:23:18,080 --> 00:23:22,240
music application and

00:23:19,440 --> 00:23:23,360
as i mentioned earlier we reused dns and

00:23:22,240 --> 00:23:24,640
and certificates

00:23:23,360 --> 00:23:26,880
so if you have a look at the certificate

00:23:24,640 --> 00:23:28,400
here you can see you know we've

00:23:26,880 --> 00:23:30,400
made a deployment here with real

00:23:28,400 --> 00:23:31,919
certificates and this is a real valid

00:23:30,400 --> 00:23:34,880
certificate here

00:23:31,919 --> 00:23:36,159
uh when we try and access the app so

00:23:34,880 --> 00:23:38,400
cool

00:23:36,159 --> 00:23:39,440
all looks good we get uh ingress for

00:23:38,400 --> 00:23:43,279
free

00:23:39,440 --> 00:23:43,279
so let's return to the presentation

00:23:43,840 --> 00:23:46,960
and move on let's have a quick look at

00:23:46,640 --> 00:23:50,400
uh

00:23:46,960 --> 00:23:53,840
istio and i've lost my

00:23:50,400 --> 00:23:53,840
slide presenter notes again

00:23:56,640 --> 00:24:00,400
okay presenter notes back sorry about

00:23:58,240 --> 00:24:01,520
that uh so let's have a look at istio uh

00:24:00,400 --> 00:24:03,600
how does that work

00:24:01,520 --> 00:24:04,880
well we re-architected our networking

00:24:03,600 --> 00:24:08,480
stack onto

00:24:04,880 --> 00:24:10,320
the cncf projects of istio and envoy

00:24:08,480 --> 00:24:12,240
as you have seen our integration

00:24:10,320 --> 00:24:13,679
automatically maps a route for every

00:24:12,240 --> 00:24:16,559
application that you push

00:24:13,679 --> 00:24:17,279
but it does more besides that it also

00:24:16,559 --> 00:24:19,279
encrypts

00:24:17,279 --> 00:24:21,679
all east-west traffic between our system

00:24:19,279 --> 00:24:23,120
components with automatically rotating

00:24:21,679 --> 00:24:24,000
certificates that you don't have to

00:24:23,120 --> 00:24:26,799
worry about

00:24:24,000 --> 00:24:28,000
so it's secure by default and unlike

00:24:26,799 --> 00:24:30,080
kubernetes

00:24:28,000 --> 00:24:32,159
where traffic between pods is open by

00:24:30,080 --> 00:24:35,760
default and typically not what you want

00:24:32,159 --> 00:24:38,240
especially in a multi-tenant cluster

00:24:35,760 --> 00:24:40,799
cfocates creates network policies to

00:24:38,240 --> 00:24:42,799
deny traffic between pods and namespaces

00:24:40,799 --> 00:24:47,840
outside of the ones it knows about so

00:24:42,799 --> 00:24:47,840
again it's secure by default

00:24:50,720 --> 00:24:55,120
so moving on that might have been more

00:24:52,960 --> 00:24:57,360
work that kevin was expected and that's

00:24:55,120 --> 00:24:59,520
all time away from coding for him

00:24:57,360 --> 00:25:01,440
but cody hasn't had to worry about any

00:24:59,520 --> 00:25:01,760
of these concerns and it was was able to

00:25:01,440 --> 00:25:04,400
get

00:25:01,760 --> 00:25:06,640
straight back to it the very next thing

00:25:04,400 --> 00:25:07,760
that the mvp needs is a database of

00:25:06,640 --> 00:25:09,200
course

00:25:07,760 --> 00:25:11,279
but kevin is not deterred by his

00:25:09,200 --> 00:25:12,240
experience so far he really wants to use

00:25:11,279 --> 00:25:14,159
kubernetes

00:25:12,240 --> 00:25:16,559
so he is going to have a go at deploying

00:25:14,159 --> 00:25:19,760
the database on cluster

00:25:16,559 --> 00:25:21,600
so he finds a suitable db helm chart

00:25:19,760 --> 00:25:23,440
he realizes that a database needs

00:25:21,600 --> 00:25:25,840
persistent volumes

00:25:23,440 --> 00:25:27,200
he installs or gets access to a sand

00:25:25,840 --> 00:25:29,360
more likely

00:25:27,200 --> 00:25:30,720
realizes that he needs the csi plugins

00:25:29,360 --> 00:25:32,799
for that san

00:25:30,720 --> 00:25:34,480
installed into his kubernetes cluster so

00:25:32,799 --> 00:25:35,840
he figures out how to do that and does

00:25:34,480 --> 00:25:37,760
it

00:25:35,840 --> 00:25:40,640
and finally he's able to help install

00:25:37,760 --> 00:25:43,200
the db chart and he has a database

00:25:40,640 --> 00:25:45,279
but he's been thinking and he realizes

00:25:43,200 --> 00:25:47,679
that databases usually need dedicated

00:25:45,279 --> 00:25:49,679
hardware or strong slos at least

00:25:47,679 --> 00:25:51,919
and he realizes that databases are

00:25:49,679 --> 00:25:54,080
basically hard to run at scale

00:25:51,919 --> 00:25:55,039
so here helmund installs the db chart

00:25:54,080 --> 00:25:58,960
and he deploys

00:25:55,039 --> 00:25:58,960
a cloud provided offering instead

00:25:59,520 --> 00:26:03,919
as it always has done on the other hand

00:26:01,760 --> 00:26:04,799
cloud foundry offers a marketplace of

00:26:03,919 --> 00:26:06,960
services

00:26:04,799 --> 00:26:08,799
from which users can provision reserved

00:26:06,960 --> 00:26:11,360
resources on demand

00:26:08,799 --> 00:26:13,120
examples of resources services provide

00:26:11,360 --> 00:26:14,320
include databases on a shared or

00:26:13,120 --> 00:26:17,360
dedicated server

00:26:14,320 --> 00:26:19,200
as in our example acquiring a database

00:26:17,360 --> 00:26:21,039
is as easy as create service

00:26:19,200 --> 00:26:23,360
and connecting that to your application

00:26:21,039 --> 00:26:25,039
is as easy as buying service

00:26:23,360 --> 00:26:28,000
especially when combined with the many

00:26:25,039 --> 00:26:29,919
app connector libraries that exist

00:26:28,000 --> 00:26:31,200
but in kubernetes you have a lot of

00:26:29,919 --> 00:26:34,320
decision making today

00:26:31,200 --> 00:26:35,440
to do to this day running databases on

00:26:34,320 --> 00:26:38,240
cluster remains

00:26:35,440 --> 00:26:41,840
a very hotly debated topic you may well

00:26:38,240 --> 00:26:41,840
be better with a cloud database

00:26:46,559 --> 00:26:50,960
now fortunately for kevin and cody the

00:26:48,799 --> 00:26:53,760
app is gaining some traction

00:26:50,960 --> 00:26:55,200
so they have scaled it to five instances

00:26:53,760 --> 00:26:56,400
but some of their users are now

00:26:55,200 --> 00:27:00,159
reporting problems

00:26:56,400 --> 00:27:03,279
so kevin and cody need to debug

00:27:00,159 --> 00:27:04,080
kevin dives in with a coupe cuddle logs

00:27:03,279 --> 00:27:05,679
dash c

00:27:04,080 --> 00:27:08,320
and tries to grab the logs from one

00:27:05,679 --> 00:27:10,240
container he realizes that he has no

00:27:08,320 --> 00:27:12,159
idea which container the users

00:27:10,240 --> 00:27:13,919
would have been using when they

00:27:12,159 --> 00:27:15,760
experience this problem

00:27:13,919 --> 00:27:17,840
so he attempts to search the copious

00:27:15,760 --> 00:27:20,480
logs for each container in turn

00:27:17,840 --> 00:27:22,320
he decides there must be a better way

00:27:20,480 --> 00:27:23,520
thinking about it he decides he can

00:27:22,320 --> 00:27:25,840
label his pods

00:27:23,520 --> 00:27:26,880
in his replica set so he goes ahead and

00:27:25,840 --> 00:27:29,440
does that

00:27:26,880 --> 00:27:30,640
waits for the problem to manifest itself

00:27:29,440 --> 00:27:32,559
again and when it does

00:27:30,640 --> 00:27:34,799
he does a coup cut or logs but this time

00:27:32,559 --> 00:27:36,480
with a dash l and the label

00:27:34,799 --> 00:27:38,480
and he is presented with the logs from

00:27:36,480 --> 00:27:39,200
all containers now this is better but

00:27:38,480 --> 00:27:41,039
it's still sub

00:27:39,200 --> 00:27:43,360
optimal if you need to do complicated

00:27:41,039 --> 00:27:46,240
debugging so he starts to investigate a

00:27:43,360 --> 00:27:48,240
log management integration

00:27:46,240 --> 00:27:50,000
ultimately if you are using kubernetes

00:27:48,240 --> 00:27:51,760
cluster directly then you will sooner

00:27:50,000 --> 00:27:53,440
rather than later need to install some

00:27:51,760 --> 00:27:55,279
log management solution

00:27:53,440 --> 00:27:57,919
this means picking one and that's no

00:27:55,279 --> 00:28:01,279
small task there are many out there

00:27:57,919 --> 00:28:01,679
splunk logstash graylog fluentd collect

00:28:01,279 --> 00:28:04,799
the

00:28:01,679 --> 00:28:07,039
file beat prometheus kafka elk i could

00:28:04,799 --> 00:28:08,640
go on

00:28:07,039 --> 00:28:11,679
once you've picked one you then need to

00:28:08,640 --> 00:28:13,760
deploy and successfully operate this

00:28:11,679 --> 00:28:16,640
with cfocates logging has been

00:28:13,760 --> 00:28:18,559
completely re-architected onto fluentd

00:28:16,640 --> 00:28:20,720
so not only have we made the choice for

00:28:18,559 --> 00:28:22,799
you but we deploy operate and

00:28:20,720 --> 00:28:24,640
integrate that into the platform

00:28:22,799 --> 00:28:25,679
allowing you to get a single view of

00:28:24,640 --> 00:28:27,520
your logs across

00:28:25,679 --> 00:28:30,559
all containers no matter how many

00:28:27,520 --> 00:28:34,159
instances you have scaled to we'll see

00:28:30,559 --> 00:28:36,320
with a single cf logs command moreover

00:28:34,159 --> 00:28:38,480
you can also t app blocks to your

00:28:36,320 --> 00:28:41,520
organization's log management suite

00:28:38,480 --> 00:28:41,520
as and when you need to

00:28:41,840 --> 00:28:47,200
and with metrics it's a similar story

00:28:44,799 --> 00:28:49,520
setting resource requests and limits is

00:28:47,200 --> 00:28:51,440
very very important in kubernetes to

00:28:49,520 --> 00:28:53,440
allow the scheduler to do the best job

00:28:51,440 --> 00:28:55,760
possible with the resources available

00:28:53,440 --> 00:28:58,000
to your cluster and therefore with your

00:28:55,760 --> 00:29:00,000
hard-earned dollars

00:28:58,000 --> 00:29:01,200
when using kubernetes directly in a

00:29:00,000 --> 00:29:03,600
multi-dev team

00:29:01,200 --> 00:29:05,840
setting you are competing for resources

00:29:03,600 --> 00:29:08,480
with all of the other dev teams

00:29:05,840 --> 00:29:09,760
not setting anything is not an option as

00:29:08,480 --> 00:29:12,159
that puts your app

00:29:09,760 --> 00:29:14,080
first in the queue of pods for eviction

00:29:12,159 --> 00:29:16,320
when things get tight

00:29:14,080 --> 00:29:17,919
so at some point sooner rather than

00:29:16,320 --> 00:29:19,440
later you will need to consider your

00:29:17,919 --> 00:29:21,360
applications metrics

00:29:19,440 --> 00:29:23,440
not to mention those of your cluster as

00:29:21,360 --> 00:29:25,600
well as your log management

00:29:23,440 --> 00:29:27,520
that means you need a metric solution

00:29:25,600 --> 00:29:30,159
alongside your logging solution

00:29:27,520 --> 00:29:32,159
and again you can go the diy route or

00:29:30,159 --> 00:29:33,840
you can use cfocates with its built-in

00:29:32,159 --> 00:29:36,880
prometheus integration

00:29:33,840 --> 00:29:37,279
and i urge you to attend the metrics

00:29:36,880 --> 00:29:39,440
team

00:29:37,279 --> 00:29:43,440
up and running with prometheus in cf for

00:29:39,440 --> 00:29:43,440
kate's talk for more information on that

00:29:45,279 --> 00:29:49,679
so hopefully by now we are realizing

00:29:47,440 --> 00:29:50,480
that kubernetes is harder than it first

00:29:49,679 --> 00:29:52,240
looks

00:29:50,480 --> 00:29:55,039
and we've really only just scratched the

00:29:52,240 --> 00:29:57,360
surface to be honest with you

00:29:55,039 --> 00:29:58,480
if they really want to run a kubernetes

00:29:57,360 --> 00:30:00,720
cluster in production

00:29:58,480 --> 00:30:03,279
serving multiple development teams then

00:30:00,720 --> 00:30:05,520
kevin still has a lot of work to do

00:30:03,279 --> 00:30:06,480
kubernetes just doesn't come configured

00:30:05,520 --> 00:30:09,200
for this

00:30:06,480 --> 00:30:10,720
kevin would also need to consider

00:30:09,200 --> 00:30:12,960
namespace isolation

00:30:10,720 --> 00:30:16,159
using network policies so that teams

00:30:12,960 --> 00:30:18,320
have access to their namespaces only

00:30:16,159 --> 00:30:19,520
resource limits with limit ranges and

00:30:18,320 --> 00:30:22,000
resource quotas

00:30:19,520 --> 00:30:24,640
so that teams don't starve other teams

00:30:22,000 --> 00:30:26,159
or in fact the cluster out

00:30:24,640 --> 00:30:28,720
he'd need to consider security

00:30:26,159 --> 00:30:29,600
limitations with pod security policies

00:30:28,720 --> 00:30:32,240
and pod

00:30:29,600 --> 00:30:34,080
security contacts should teams be able

00:30:32,240 --> 00:30:36,480
to deploy containers that run as root

00:30:34,080 --> 00:30:38,159
for example

00:30:36,480 --> 00:30:40,480
you would need to consider network

00:30:38,159 --> 00:30:42,960
policy isolation so that teams

00:30:40,480 --> 00:30:43,919
own deployments can communicate but not

00:30:42,960 --> 00:30:47,120
with other teams

00:30:43,919 --> 00:30:49,600
deployments and possibly he would also

00:30:47,120 --> 00:30:51,279
also need to consider node isolation

00:30:49,600 --> 00:30:54,480
with node affinity and

00:30:51,279 --> 00:30:56,480
anti-affinity giving priority to

00:30:54,480 --> 00:30:58,720
certain teams deployments that need

00:30:56,480 --> 00:30:59,760
access to special hardware available on

00:30:58,720 --> 00:31:02,399
certain nodes

00:30:59,760 --> 00:31:05,840
whilst keeping other teams deployments

00:31:02,399 --> 00:31:05,840
away from those nodes

00:31:06,480 --> 00:31:12,559
alternatively cfocates organizes tenants

00:31:10,080 --> 00:31:14,799
around an augs and spaces model with

00:31:12,559 --> 00:31:17,200
role-based access control

00:31:14,799 --> 00:31:19,039
now whilst these constructs don't map

00:31:17,200 --> 00:31:20,720
down onto the underlying kubernetes

00:31:19,039 --> 00:31:22,559
cluster just yet

00:31:20,720 --> 00:31:24,399
something we will continue to evaluate

00:31:22,559 --> 00:31:26,960
and improve moving forwards

00:31:24,399 --> 00:31:29,120
this does work out of the box and many

00:31:26,960 --> 00:31:31,279
organizations have used it successfully

00:31:29,120 --> 00:31:34,240
to support multi-team development within

00:31:31,279 --> 00:31:34,240
their enterprises

00:31:36,960 --> 00:31:41,120
so if you're an operator already

00:31:39,440 --> 00:31:43,519
familiar with cf

00:31:41,120 --> 00:31:44,159
give it a go and see how quickly it now

00:31:43,519 --> 00:31:46,640
deploys

00:31:44,159 --> 00:31:48,720
and upgrades we think you'll be really

00:31:46,640 --> 00:31:50,640
pleasantly surprised

00:31:48,720 --> 00:31:53,279
if you're a developer already familiar

00:31:50,640 --> 00:31:54,640
with cf give it a go and you'll see that

00:31:53,279 --> 00:31:57,440
it is the same cf

00:31:54,640 --> 00:31:59,039
that you've been used to importantly it

00:31:57,440 --> 00:32:01,919
is the same cli

00:31:59,039 --> 00:32:04,159
it is still cf push which means your ci

00:32:01,919 --> 00:32:06,320
cd should largely be unaffected by the

00:32:04,159 --> 00:32:08,720
switch

00:32:06,320 --> 00:32:10,880
if you are completely new to cf give it

00:32:08,720 --> 00:32:14,559
a go and experience the famous

00:32:10,880 --> 00:32:16,240
cf push for yourself cfocates now

00:32:14,559 --> 00:32:18,880
installs on the laptop

00:32:16,240 --> 00:32:19,440
with our tutorial you can go from zero

00:32:18,880 --> 00:32:21,760
to push

00:32:19,440 --> 00:32:25,200
in under 30 minutes there really is no

00:32:21,760 --> 00:32:25,200
reason not to give it a go

00:32:26,080 --> 00:32:30,240
so for each one oh a huge milestone for

00:32:29,760 --> 00:32:32,640
us

00:32:30,240 --> 00:32:34,159
but are we done well absolutely not

00:32:32,640 --> 00:32:35,440
there are still lots of things we want

00:32:34,159 --> 00:32:38,399
to do

00:32:35,440 --> 00:32:39,360
in no particular order at the moment

00:32:38,399 --> 00:32:42,000
scaling is an

00:32:39,360 --> 00:32:43,200
exercise left to the operator we provide

00:32:42,000 --> 00:32:45,919
documentation

00:32:43,200 --> 00:32:48,080
and luckily in ytt we have a tool that

00:32:45,919 --> 00:32:50,720
allows for this customization

00:32:48,080 --> 00:32:52,559
but moving forward we will to we want to

00:32:50,720 --> 00:32:53,760
explore the various scaling interfaces

00:32:52,559 --> 00:32:57,360
that are now possible

00:32:53,760 --> 00:32:59,039
and offer the most suitable one to you

00:32:57,360 --> 00:33:00,799
we would also like to move secret

00:32:59,039 --> 00:33:02,960
managements onto the platform

00:33:00,799 --> 00:33:05,360
so that it isn't an out of the box

00:33:02,960 --> 00:33:08,399
activity like it is today

00:33:05,360 --> 00:33:10,000
and a note on that there are also some

00:33:08,399 --> 00:33:11,600
secrets that we can't rotate

00:33:10,000 --> 00:33:13,120
right now so please check our

00:33:11,600 --> 00:33:17,360
documentation and issues

00:33:13,120 --> 00:33:19,519
for details now with cf deployment

00:33:17,360 --> 00:33:22,480
we had a concept or we have a concept i

00:33:19,519 --> 00:33:24,720
should say of stem cells and releases

00:33:22,480 --> 00:33:27,120
this allowed us to respond to cves very

00:33:24,720 --> 00:33:29,279
quickly by patching all system vms with

00:33:27,120 --> 00:33:31,840
a single bosch deploy command

00:33:29,279 --> 00:33:32,799
however in this new brave world that we

00:33:31,840 --> 00:33:35,600
find ourselves in

00:33:32,799 --> 00:33:37,360
we don't have stem cells but we are

00:33:35,600 --> 00:33:38,640
still committed to providing you with

00:33:37,360 --> 00:33:40,799
the same slos

00:33:38,640 --> 00:33:42,240
in this regard and image management is

00:33:40,799 --> 00:33:44,240
the track of work that you

00:33:42,240 --> 00:33:46,640
we are undertaking to provide the

00:33:44,240 --> 00:33:49,279
ability to rebase system images

00:33:46,640 --> 00:33:50,399
onto new base os images as and when the

00:33:49,279 --> 00:33:51,840
need arises

00:33:50,399 --> 00:33:54,240
so please look out for that in our

00:33:51,840 --> 00:33:56,000
github project

00:33:54,240 --> 00:33:57,519
we want to continue to embody the

00:33:56,000 --> 00:34:00,000
community's opinions

00:33:57,519 --> 00:34:02,159
and best practices on operating a

00:34:00,000 --> 00:34:04,640
multi-tenant kubernetes cluster

00:34:02,159 --> 00:34:06,720
by distilling these into the product

00:34:04,640 --> 00:34:09,359
that is cfocates

00:34:06,720 --> 00:34:11,839
and of course we want to continue to

00:34:09,359 --> 00:34:13,760
create a more componentized open and

00:34:11,839 --> 00:34:16,079
extensible platform

00:34:13,760 --> 00:34:17,839
and as you will see moving forwards some

00:34:16,079 --> 00:34:20,560
of our components will become

00:34:17,839 --> 00:34:21,760
more plugable allowing the operator the

00:34:20,560 --> 00:34:23,760
freedom of choice

00:34:21,760 --> 00:34:26,079
to plug in the technologies that they

00:34:23,760 --> 00:34:26,079
prefer

00:34:27,440 --> 00:34:31,760
so how can you find out more if there

00:34:30,000 --> 00:34:33,839
are some things you have some questions

00:34:31,760 --> 00:34:34,960
here that i didn't cover during this

00:34:33,839 --> 00:34:37,839
presentation

00:34:34,960 --> 00:34:38,879
well you can please go check out our

00:34:37,839 --> 00:34:40,159
github repo

00:34:38,879 --> 00:34:42,320
if you're deploying you'll need to get

00:34:40,159 --> 00:34:45,679
clone it anyway that's

00:34:42,320 --> 00:34:48,800
github.com cloudfoundry cf

00:34:45,679 --> 00:34:49,280
for cates and we also have i'm delighted

00:34:48,800 --> 00:34:52,480
to say

00:34:49,280 --> 00:34:55,440
a brand new uh website cf-4 dash

00:34:52,480 --> 00:34:56,960
kates dot io we've got some great

00:34:55,440 --> 00:34:58,720
information on there and lots and lots

00:34:56,960 --> 00:35:02,000
of docs

00:34:58,720 --> 00:35:04,480
so please go check that out

00:35:02,000 --> 00:35:06,560
if you still have questions that aren't

00:35:04,480 --> 00:35:07,119
answered then uh how can you get hold of

00:35:06,560 --> 00:35:09,520
us

00:35:07,119 --> 00:35:10,960
well come find us in the cloud foundry

00:35:09,520 --> 00:35:13,359
slack workspace

00:35:10,960 --> 00:35:14,640
uh cfocate slack channel or the release

00:35:13,359 --> 00:35:16,240
integration slack channel

00:35:14,640 --> 00:35:17,920
both will work you'll get to the same

00:35:16,240 --> 00:35:20,400
team

00:35:17,920 --> 00:35:22,320
if you have issues then please raise

00:35:20,400 --> 00:35:23,839
them against our github repo

00:35:22,320 --> 00:35:26,240
and if you would like to contribute

00:35:23,839 --> 00:35:29,119
yourself

00:35:26,240 --> 00:35:31,119
we have a con contribution guide in our

00:35:29,119 --> 00:35:34,720
docs uh please go read it

00:35:31,119 --> 00:35:37,359
and please have a go at pr's we love p.s

00:35:34,720 --> 00:35:37,920
and just so you're aware we will be

00:35:37,359 --> 00:35:40,400
making

00:35:37,920 --> 00:35:41,920
you know relevant announcements via the

00:35:40,400 --> 00:35:43,760
cf dev mailing list

00:35:41,920 --> 00:35:46,400
so please sign up for that and we'll

00:35:43,760 --> 00:35:49,040
also put those out on the cfocateslac

00:35:46,400 --> 00:35:49,040
slack channel

00:35:50,720 --> 00:35:56,000
okay and finally then so cfocates

00:35:53,839 --> 00:35:58,240
uh i think you've seen provides useful

00:35:56,000 --> 00:35:59,760
abstractions on top of kubernetes

00:35:58,240 --> 00:36:02,560
allowing you to make the most of your

00:35:59,760 --> 00:36:04,880
clusters saving you time and money

00:36:02,560 --> 00:36:06,240
we are constantly folding the hard work

00:36:04,880 --> 00:36:09,280
combined knowledge

00:36:06,240 --> 00:36:10,960
learnings best practices from the entire

00:36:09,280 --> 00:36:13,119
cloud foundry community

00:36:10,960 --> 00:36:15,040
into the cf for gage product an

00:36:13,119 --> 00:36:16,079
opinionated developer and operator

00:36:15,040 --> 00:36:19,040
platform

00:36:16,079 --> 00:36:20,320
built for kubernetes built for your org

00:36:19,040 --> 00:36:22,880
built for you

00:36:20,320 --> 00:36:24,320
the tagline has never been more true

00:36:22,880 --> 00:36:26,880
here is my app

00:36:24,320 --> 00:36:28,400
run it in the cloud for me i do not care

00:36:26,880 --> 00:36:34,400
how

00:36:28,400 --> 00:36:34,400

YouTube URL: https://www.youtube.com/watch?v=tXhpjOS_XJo


