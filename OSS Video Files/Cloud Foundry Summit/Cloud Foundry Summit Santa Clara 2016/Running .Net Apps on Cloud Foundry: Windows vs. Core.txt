Title: Running .Net Apps on Cloud Foundry: Windows vs. Core
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Running .Net Apps on Cloud Foundry: Windows vs. Core - Zach Brown, Pivotal & Rita Zhang, Microsoft

You’re an operator responsible for running tens or hundreds of .Net apps  in production. Or maybe you're a developer who loves .Net. You’ve heard  that Diego introduced support for running .Net apps on a Windows stack,  but you also know that there’s a buildpack that supports .Net Core apps  running on Linux.   What is the best way to run your .Net apps on Cloud  Foundry?  In this talk we’ll share our experience pushing and running a .Net  application to a Diego cell running Windows 2012 r2, as well as pushing  and running the same application on Linux using the community ASP.Net 5  buildpack.
Captions: 
	00:00:00,030 --> 00:00:10,620
all right well we are here today to talk

00:00:03,899 --> 00:00:12,780
about running net on Cloud Foundry my

00:00:10,620 --> 00:00:15,990
name is Zack brown I work on the pivotal

00:00:12,780 --> 00:00:17,750
Cloud Foundry project at pivotal and I'm

00:00:15,990 --> 00:00:25,080
reading

00:00:17,750 --> 00:00:27,359
Microsoft so let's dive right in so I

00:00:25,080 --> 00:00:30,150
know a lot of you guys actually came by

00:00:27,359 --> 00:00:32,279
at our booth in the exhibit hall and I

00:00:30,150 --> 00:00:34,680
also talked to some of you guys like

00:00:32,279 --> 00:00:36,989
just running around and we get a lot of

00:00:34,680 --> 00:00:39,600
questions from customers asking so

00:00:36,989 --> 00:00:41,700
dotnet is great Cloud Foundry is great

00:00:39,600 --> 00:00:42,450
how do I actually run my dotnet

00:00:41,700 --> 00:00:44,700
applications

00:00:42,450 --> 00:00:47,820
well this session is specifically to

00:00:44,700 --> 00:00:50,190
address that and as an open source

00:00:47,820 --> 00:00:53,460
engineer I work a lot with different

00:00:50,190 --> 00:00:56,070
open-source platforms like Cloud Foundry

00:00:53,460 --> 00:00:58,469
and what I find interesting is a lot of

00:00:56,070 --> 00:01:01,530
them are great but Cloud Foundry is the

00:00:58,469 --> 00:01:04,530
one of the very few platform that

00:01:01,530 --> 00:01:08,189
actually supports dotnet applications so

00:01:04,530 --> 00:01:11,549
for an enterprise like yourself you

00:01:08,189 --> 00:01:14,130
probably have the traditional dinah

00:01:11,549 --> 00:01:18,180
applications that you have in your other

00:01:14,130 --> 00:01:19,650
organization but you may also have sorry

00:01:18,180 --> 00:01:24,210
how many of you guys have heard of

00:01:19,650 --> 00:01:26,130
dinette core oh great awesome so yeah so

00:01:24,210 --> 00:01:29,180
now that we have dotnet core your

00:01:26,130 --> 00:01:31,950
developers can develop dama applications

00:01:29,180 --> 00:01:33,900
deployed across different platforms so

00:01:31,950 --> 00:01:36,810
you can run down at core applications on

00:01:33,900 --> 00:01:39,740
Windows you can run them on Linux and

00:01:36,810 --> 00:01:42,210
Mac so with these two different paths

00:01:39,740 --> 00:01:44,520
what we're doing here is basically

00:01:42,210 --> 00:01:47,780
explain to you guys that there are two

00:01:44,520 --> 00:01:51,990
paths for you one is with the Windows

00:01:47,780 --> 00:01:54,060
2000 2012 r2 stack and that basically

00:01:51,990 --> 00:01:57,149
supports your traditional dinah

00:01:54,060 --> 00:01:59,670
applications and your and this came out

00:01:57,149 --> 00:02:03,210
back in November 2015 so we've been

00:01:59,670 --> 00:02:05,280
running this for a little while and it

00:02:03,210 --> 00:02:06,700
basically supports any applications that

00:02:05,280 --> 00:02:09,920
is running done

00:02:06,700 --> 00:02:12,830
3.5 and above and what is nice about

00:02:09,920 --> 00:02:15,410
this also is if you have an existing

00:02:12,830 --> 00:02:18,140
class on your cluster all you need to do

00:02:15,410 --> 00:02:21,319
is add Diego support and you'll be able

00:02:18,140 --> 00:02:23,420
to push this application to a Windows

00:02:21,319 --> 00:02:25,700
know that you add to your Cloud Foundry

00:02:23,420 --> 00:02:27,260
cluster and will actually have a demo at

00:02:25,700 --> 00:02:29,269
the end of this session so you guys can

00:02:27,260 --> 00:02:32,150
see what it's like to actually do that

00:02:29,269 --> 00:02:34,099
and when you do this your application

00:02:32,150 --> 00:02:37,000
then it gets pushed to garden windows

00:02:34,099 --> 00:02:40,100
and Zach will talk about the different

00:02:37,000 --> 00:02:43,549
containers that that we leverage for

00:02:40,100 --> 00:02:46,220
this and last but not least we also have

00:02:43,549 --> 00:02:49,010
some nice focus folks at pivotal who are

00:02:46,220 --> 00:02:51,950
currently working on Bosch windows and

00:02:49,010 --> 00:02:54,890
that is currently under way so if you

00:02:51,950 --> 00:02:57,140
are running dotnet core applications the

00:02:54,890 --> 00:02:59,510
way to do it today is no different from

00:02:57,140 --> 00:03:02,780
any other applications because it just

00:02:59,510 --> 00:03:05,269
works on Linux so what you do again you

00:03:02,780 --> 00:03:07,280
push the application like any other you

00:03:05,269 --> 00:03:11,570
know Java application or go application

00:03:07,280 --> 00:03:14,570
and you push it with the asp.net 5 bill

00:03:11,570 --> 00:03:17,540
pack and that is also available in the

00:03:14,570 --> 00:03:21,650
stack in the in the site later we'll

00:03:17,540 --> 00:03:24,200
also show you guys a link to that so so

00:03:21,650 --> 00:03:26,780
that's a two different paths and to

00:03:24,200 --> 00:03:29,269
summarize this so this is a comparison

00:03:26,780 --> 00:03:31,250
matrix for you and again if you're

00:03:29,269 --> 00:03:34,609
running the dotnet traditional data

00:03:31,250 --> 00:03:38,690
application you you can do this with CF

00:03:34,609 --> 00:03:41,239
in your CF cluster running Diego and you

00:03:38,690 --> 00:03:43,850
can use the binary Bill pack to actually

00:03:41,239 --> 00:03:45,380
push your application but one thing you

00:03:43,850 --> 00:03:47,540
need to know is that you your

00:03:45,380 --> 00:03:49,970
application needs to be compiled so the

00:03:47,540 --> 00:03:52,160
actual binary of your application is the

00:03:49,970 --> 00:03:54,850
actual thing that gets pushed down to

00:03:52,160 --> 00:03:58,760
Windows and again this supports anything

00:03:54,850 --> 00:04:01,370
dotnet 3.5 and above and is running in

00:03:58,760 --> 00:04:03,590
the garden window container and of

00:04:01,370 --> 00:04:06,680
course as a developer your development

00:04:03,590 --> 00:04:09,920
environment is Windows now again for

00:04:06,680 --> 00:04:12,709
the.net core folks who just been playing

00:04:09,920 --> 00:04:14,910
with our C 2 and so if you're doing that

00:04:12,709 --> 00:04:19,860
you can actually run in

00:04:14,910 --> 00:04:21,780
çf cluster whether it's diego or da so

00:04:19,860 --> 00:04:24,270
with this again you can leverage the

00:04:21,780 --> 00:04:26,100
asp.net 5 bill pack which is on github

00:04:24,270 --> 00:04:28,740
so you guys can just download it and

00:04:26,100 --> 00:04:30,390
push our application with it and again

00:04:28,740 --> 00:04:32,280
this is this for this particular

00:04:30,390 --> 00:04:35,640
application you will be using the

00:04:32,280 --> 00:04:37,530
Guardian Linux container and as a

00:04:35,640 --> 00:04:40,110
developer of course we if your

00:04:37,530 --> 00:04:45,510
development environment is anything from

00:04:40,110 --> 00:04:46,710
Windows to Mac to Linux great well I'm

00:04:45,510 --> 00:04:48,780
gonna talk a little bit about the

00:04:46,710 --> 00:04:51,630
differences between a garden windows in

00:04:48,780 --> 00:04:53,610
a garden Linux container basically

00:04:51,630 --> 00:04:56,940
garden is an API that implements

00:04:53,610 --> 00:04:58,710
containerization leveraging primitives

00:04:56,940 --> 00:05:01,860
that are made available by the operating

00:04:58,710 --> 00:05:04,020
system so while windows provides some

00:05:01,860 --> 00:05:05,760
similar primitives to what are available

00:05:04,020 --> 00:05:08,070
in Linux they're not identical and

00:05:05,760 --> 00:05:13,680
therefore the behavior of the container

00:05:08,070 --> 00:05:15,510
varies a little bit too so in Linux

00:05:13,680 --> 00:05:19,440
we're able to take advantage of things

00:05:15,510 --> 00:05:22,560
like namespaces disk quotas etc to

00:05:19,440 --> 00:05:26,150
provide that isolation there are some

00:05:22,560 --> 00:05:28,110
some benefits to it for example every

00:05:26,150 --> 00:05:30,780
every container that's running on a

00:05:28,110 --> 00:05:37,470
Linux based host has access to all the

00:05:30,780 --> 00:05:39,330
different ports so on Windows we use a

00:05:37,470 --> 00:05:41,550
few different primitives that are made

00:05:39,330 --> 00:05:42,900
available by Windows to try to come as

00:05:41,550 --> 00:05:46,169
close to that in functionality as

00:05:42,900 --> 00:05:48,450
possible for a filesystem isolation we

00:05:46,169 --> 00:05:50,790
actually create a temporary user account

00:05:48,450 --> 00:05:53,250
for each container that's running on a

00:05:50,790 --> 00:05:55,650
Windows host and then we enforce

00:05:53,250 --> 00:05:58,800
filesystem isolation via access control

00:05:55,650 --> 00:06:00,630
lists so one thing that you want to know

00:05:58,800 --> 00:06:02,640
if you are deploying an application onto

00:06:00,630 --> 00:06:04,380
a Windows host is that any files that

00:06:02,640 --> 00:06:07,169
you write to the C container Iser

00:06:04,380 --> 00:06:09,630
directory are private to your container

00:06:07,169 --> 00:06:11,820
but unlike linux which provides an

00:06:09,630 --> 00:06:13,890
individual route FS for every container

00:06:11,820 --> 00:06:16,050
there are shared parts of that

00:06:13,890 --> 00:06:18,540
filesystem so if you were to write files

00:06:16,050 --> 00:06:20,490
with sensitive information for example

00:06:18,540 --> 00:06:24,630
out into some other directory then they

00:06:20,490 --> 00:06:27,690
could be visible to other containers in

00:06:24,630 --> 00:06:28,330
terms of network isolation applications

00:06:27,690 --> 00:06:31,120
by

00:06:28,330 --> 00:06:34,030
directly to the external IP of the VM of

00:06:31,120 --> 00:06:36,370
that Windows cell and if you want to do

00:06:34,030 --> 00:06:38,860
port mapping there's some extra steps

00:06:36,370 --> 00:06:41,110
involved in making that work there's

00:06:38,860 --> 00:06:42,789
actually a link to a great blog article

00:06:41,110 --> 00:06:44,080
at the bottom of the slide that provides

00:06:42,789 --> 00:06:47,710
a lot of detail around that if you're

00:06:44,080 --> 00:06:51,190
interested and then as it comes to

00:06:47,710 --> 00:06:54,759
memory usage we use the Windows job

00:06:51,190 --> 00:06:57,430
object primitive to to allocate memory

00:06:54,759 --> 00:07:00,819
to specific containers so job object

00:06:57,430 --> 00:07:03,639
gives you a handle on an entire process

00:07:00,819 --> 00:07:05,889
tree making it easy to control that and

00:07:03,639 --> 00:07:10,090
try entire process tree to to kill it

00:07:05,889 --> 00:07:12,009
for example and the memory enforcement

00:07:10,090 --> 00:07:15,300
in Windows is not quite as strict as it

00:07:12,009 --> 00:07:17,710
is in Linux so we've implemented another

00:07:15,300 --> 00:07:19,360
sort of side feature here called the

00:07:17,710 --> 00:07:22,300
guard he makes sure you don't break out

00:07:19,360 --> 00:07:25,780
of the jail so the guard looks and makes

00:07:22,300 --> 00:07:27,460
sure that no one actually met is able to

00:07:25,780 --> 00:07:29,830
map memory outside of their allocated

00:07:27,460 --> 00:07:31,479
memory and if and if that happens inside

00:07:29,830 --> 00:07:33,639
of a container then that process is

00:07:31,479 --> 00:07:35,740
killed it also watches out for any

00:07:33,639 --> 00:07:39,099
process that tries to spawn outside of

00:07:35,740 --> 00:07:42,190
the process tree of the job object so

00:07:39,099 --> 00:07:44,349
inside of each job object there we use a

00:07:42,190 --> 00:07:46,900
host of all web core so that you have

00:07:44,349 --> 00:07:49,449
your effectively your own individual I

00:07:46,900 --> 00:07:51,639
is that you're able to run your

00:07:49,449 --> 00:07:53,289
application in which gives you a greater

00:07:51,639 --> 00:07:55,479
degree of isolation that will you have

00:07:53,289 --> 00:08:03,129
today if you're running on a shared is

00:07:55,479 --> 00:08:04,840
server so just a brief touch point on

00:08:03,129 --> 00:08:08,319
some of the things that are supported

00:08:04,840 --> 00:08:09,849
today in core that or that are not yet

00:08:08,319 --> 00:08:14,020
supported in core that are supported in

00:08:09,849 --> 00:08:17,800
4.6 so in asp.net core there's full

00:08:14,020 --> 00:08:20,770
support for web api for asp.net MVC but

00:08:17,800 --> 00:08:22,719
there's no web forms yet this is as of

00:08:20,770 --> 00:08:25,240
rc1 although i believe that's true in

00:08:22,719 --> 00:08:30,129
our c 2 as well there's also no support

00:08:25,240 --> 00:08:31,960
for signal R whereas the asp.net 4.6

00:08:30,129 --> 00:08:34,839
framework you've got a battle-tested

00:08:31,960 --> 00:08:36,699
harden framework that's benefited

00:08:34,839 --> 00:08:38,919
benefitted from years of testing and

00:08:36,699 --> 00:08:40,790
improvement and supports all of the

00:08:38,919 --> 00:08:43,070
above

00:08:40,790 --> 00:08:46,460
so the question is when do you choose

00:08:43,070 --> 00:08:49,490
which so if you're building a Greenfield

00:08:46,460 --> 00:08:51,860
application I like to recommend trying a

00:08:49,490 --> 00:08:54,170
core first approach try to accomplish

00:08:51,860 --> 00:08:55,550
what you're doing in core it represents

00:08:54,170 --> 00:08:57,530
the future it gives you a tremendous

00:08:55,550 --> 00:09:00,800
amount of flexibility in terms of

00:08:57,530 --> 00:09:02,690
running your workloads on Linux however

00:09:00,800 --> 00:09:05,090
if you're Reap lat forming or migrating

00:09:02,690 --> 00:09:07,960
an existing application you're probably

00:09:05,090 --> 00:09:10,400
going to end up using asp.net 4x

00:09:07,960 --> 00:09:11,930
ultimately the dependencies and

00:09:10,400 --> 00:09:17,210
framework requirements are going to

00:09:11,930 --> 00:09:20,540
dictate your choice here I'd like to

00:09:17,210 --> 00:09:23,690
give just call out a few items that

00:09:20,540 --> 00:09:25,370
maybe not super cloud friendly that if

00:09:23,690 --> 00:09:27,410
you've got in existing applications that

00:09:25,370 --> 00:09:31,130
you're trying to forklift or migrate

00:09:27,410 --> 00:09:32,510
over that you'll want to address so for

00:09:31,130 --> 00:09:35,900
example reading and writing to the

00:09:32,510 --> 00:09:38,840
registry or to local disk those are

00:09:35,900 --> 00:09:40,880
cloud anti-patterns using integrated

00:09:38,840 --> 00:09:43,310
windows authentication it's very

00:09:40,880 --> 00:09:47,390
possible to replace this with cloud

00:09:43,310 --> 00:09:49,400
foundries you a a pivotal CF has a

00:09:47,390 --> 00:09:51,830
function called single sign-on that

00:09:49,400 --> 00:09:53,690
allows you to do single sign-on directly

00:09:51,830 --> 00:09:55,790
into your application and both of these

00:09:53,690 --> 00:09:59,060
are able to use ad FS as an

00:09:55,790 --> 00:10:02,360
authentication provider in process

00:09:59,060 --> 00:10:04,190
session state is also a no-no Cloud

00:10:02,360 --> 00:10:06,590
Foundry does support sticky sessions

00:10:04,190 --> 00:10:08,420
which in some cases is useful for a

00:10:06,590 --> 00:10:11,420
workaround but again it's not considered

00:10:08,420 --> 00:10:13,070
a cloud best practice so ideally you

00:10:11,420 --> 00:10:15,710
would replace your in process session

00:10:13,070 --> 00:10:19,940
state with an out of process session

00:10:15,710 --> 00:10:24,130
State store such as Redis in-memory key

00:10:19,940 --> 00:10:26,750
value store or sequel server database

00:10:24,130 --> 00:10:29,360
environment specific config in your web

00:10:26,750 --> 00:10:30,500
config this is a common way to manage

00:10:29,360 --> 00:10:34,010
multiple environments with different

00:10:30,500 --> 00:10:36,230
configuration and Windows ideally in the

00:10:34,010 --> 00:10:38,480
Cloud Foundry world your external izing

00:10:36,230 --> 00:10:41,480
your configuration into environment

00:10:38,480 --> 00:10:42,860
variables you can also use a config

00:10:41,480 --> 00:10:47,300
server like the spring cloud

00:10:42,860 --> 00:10:49,340
configuration server and lastly when you

00:10:47,300 --> 00:10:52,070
push on application as Rita just

00:10:49,340 --> 00:10:54,560
mentioned to the windows stack that

00:10:52,070 --> 00:10:58,550
application needs to be binding

00:10:54,560 --> 00:11:02,110
compiled artifact so there's no

00:10:58,550 --> 00:11:04,189
possibility of also deploying

00:11:02,110 --> 00:11:07,879
dependencies that need to be installed

00:11:04,189 --> 00:11:10,970
via an msi at the same time i've heard

00:11:07,879 --> 00:11:12,920
from some customers that the way that

00:11:10,970 --> 00:11:16,819
they've gotten around some of these

00:11:12,920 --> 00:11:18,800
things is to well for example in the

00:11:16,819 --> 00:11:21,050
case of using something like an

00:11:18,800 --> 00:11:23,389
application performance monitoring agent

00:11:21,050 --> 00:11:25,610
that needs to be installed in every VM

00:11:23,389 --> 00:11:28,309
that they're able to do that at the time

00:11:25,610 --> 00:11:29,990
that the VM is provisioned rather than

00:11:28,309 --> 00:11:33,110
the time that the application is pushed

00:11:29,990 --> 00:11:35,779
the key is to have uniformity across all

00:11:33,110 --> 00:11:38,110
of your windows cells because we're

00:11:35,779 --> 00:11:41,389
treating Windows servers in this case as

00:11:38,110 --> 00:11:44,930
ephemeral as your linux servers and not

00:11:41,389 --> 00:11:48,699
as well as the adage goes we treat them

00:11:44,930 --> 00:11:48,699
as cattle not as pets

00:11:49,420 --> 00:11:53,180
all right so Reed is going to talk to us

00:11:52,100 --> 00:11:57,499
a little bit about deploying an

00:11:53,180 --> 00:12:01,279
application to Cloud Foundry so we're

00:11:57,499 --> 00:12:03,290
gonna go through two demos but before I

00:12:01,279 --> 00:12:05,480
jump into that I kind of want to explain

00:12:03,290 --> 00:12:07,970
what's happening in the demo that I'm

00:12:05,480 --> 00:12:10,579
gonna show later so as we talked about

00:12:07,970 --> 00:12:12,949
deploying a traditional dotnet

00:12:10,579 --> 00:12:15,860
application to Windows what is happening

00:12:12,949 --> 00:12:18,170
is as you can see this is the CF command

00:12:15,860 --> 00:12:20,209
that you will use to push the actual

00:12:18,170 --> 00:12:22,819
application it's no different than you

00:12:20,209 --> 00:12:24,740
know any other cff applications you push

00:12:22,819 --> 00:12:28,339
but the difference here is as you can

00:12:24,740 --> 00:12:31,579
see is - us Windows 2000 - r2 so that

00:12:28,339 --> 00:12:34,339
essentially tells Cloud Foundry hey I'm

00:12:31,579 --> 00:12:37,639
a Windows application please use the

00:12:34,339 --> 00:12:40,819
window stack not the Linux one and the -

00:12:37,639 --> 00:12:43,279
be binary Bill pack is basically telling

00:12:40,819 --> 00:12:45,290
Cloud Foundry use a binary Bill pack to

00:12:43,279 --> 00:12:47,290
deploy the application so what's

00:12:45,290 --> 00:12:50,269
happening is when you make this request

00:12:47,290 --> 00:12:52,189
cloud cloud foundry takes a request and

00:12:50,269 --> 00:12:54,499
the auctioneer will say hey it looks

00:12:52,189 --> 00:12:56,629
like you're trying to push a Windows

00:12:54,499 --> 00:13:00,319
application then it talks to all the

00:12:56,629 --> 00:13:02,720
reps across the cluster and and then the

00:13:00,319 --> 00:13:05,470
windows rep says hey I'm the windows

00:13:02,720 --> 00:13:07,570
it's all over here and

00:13:05,470 --> 00:13:09,730
then auctioneer says okay let me drop

00:13:07,570 --> 00:13:15,370
this chocolate over and in the Windows

00:13:09,730 --> 00:13:17,920
VM so now that was the traditional

00:13:15,370 --> 00:13:21,310
dotnet application now when you're doing

00:13:17,920 --> 00:13:23,790
a dotnet core application this is really

00:13:21,310 --> 00:13:26,620
very very similar to any other dotnet

00:13:23,790 --> 00:13:30,100
sorry any other application you're

00:13:26,620 --> 00:13:34,000
pushing weathers Java or goal or or

00:13:30,100 --> 00:13:36,310
nodejs so again you have the dash S

00:13:34,000 --> 00:13:38,590
option but you don't actually need it so

00:13:36,310 --> 00:13:42,310
because by default you're always using

00:13:38,590 --> 00:13:44,830
the Linux stack and but dash B then

00:13:42,310 --> 00:13:48,160
you're telling Cloud Foundry hey use the

00:13:44,830 --> 00:13:50,380
asp.net 5 bill pack and that is where

00:13:48,160 --> 00:13:53,140
you provide the github URL to the actual

00:13:50,380 --> 00:13:55,450
bill pack and once you do this then

00:13:53,140 --> 00:13:57,000
Cloud Foundry again auctioneer says hey

00:13:55,450 --> 00:14:00,550
it looks like you're trying to push a

00:13:57,000 --> 00:14:04,600
Linux application then it looks across

00:14:00,550 --> 00:14:06,460
its cells and tries to find the cell

00:14:04,600 --> 00:14:08,560
with the most resource for that

00:14:06,460 --> 00:14:14,110
particular application and then it drops

00:14:08,560 --> 00:14:18,430
into one of the Linux cells cool so

00:14:14,110 --> 00:14:21,580
that's so let's come back to maybe the

00:14:18,430 --> 00:14:25,810
actual demo so maybe first I want to

00:14:21,580 --> 00:14:28,450
kind of quickly show like what what are

00:14:25,810 --> 00:14:32,880
the commands that you will run if you

00:14:28,450 --> 00:14:36,040
were to run the actual windows.net

00:14:32,880 --> 00:14:41,280
traditional dotnet app to at window cell

00:14:36,040 --> 00:14:41,280
so this is you guys see No okay

00:14:44,010 --> 00:14:47,010
good

00:14:50,710 --> 00:14:56,800
all right good yes okay thank you

00:14:54,460 --> 00:14:58,300
so again it's it's basically what we

00:14:56,800 --> 00:15:00,640
talked about but this is the actual

00:14:58,300 --> 00:15:02,740
command Utah CF this is my application

00:15:00,640 --> 00:15:04,839
this is how much memory I need and

00:15:02,740 --> 00:15:10,990
that's the window stack to deploy to you

00:15:04,839 --> 00:15:16,330
and that's the github URL to the the

00:15:10,990 --> 00:15:20,320
bill pack and once that's done then you

00:15:16,330 --> 00:15:24,209
basically says say ok enable Diego

00:15:20,320 --> 00:15:35,040
because as I said before the oh my god

00:15:24,209 --> 00:15:37,720
I'm sorry about this this is the actual

00:15:35,040 --> 00:15:39,910
command that you actually enable Diego

00:15:37,720 --> 00:15:43,120
for this particular application and once

00:15:39,910 --> 00:15:47,740
that's done then you just say ok start

00:15:43,120 --> 00:15:50,050
this application in in Cloud Foundry so

00:15:47,740 --> 00:15:54,820
let me come back to the actual

00:15:50,050 --> 00:15:59,890
application so what so this is the I

00:15:54,820 --> 00:16:01,720
mean this is basically deployed on this

00:15:59,890 --> 00:16:04,839
is the actual application that I was

00:16:01,720 --> 00:16:07,180
just showing so this is the this

00:16:04,839 --> 00:16:11,920
particular application is running on a

00:16:07,180 --> 00:16:13,330
sure using the Bosh CPI so I in a minute

00:16:11,920 --> 00:16:15,880
I'm also gonna show you guys like what

00:16:13,330 --> 00:16:17,200
the actual VM the cluster looks like but

00:16:15,880 --> 00:16:19,630
essentially when you deploy this

00:16:17,200 --> 00:16:22,450
application this is just a sample app

00:16:19,630 --> 00:16:24,100
and we have research to this as well at

00:16:22,450 --> 00:16:26,650
the end so you guys can take a look at

00:16:24,100 --> 00:16:28,630
it but basically as you can see this is

00:16:26,650 --> 00:16:30,970
specifying what is the actual

00:16:28,630 --> 00:16:35,020
application instance for this

00:16:30,970 --> 00:16:37,000
application and and as you can see it's

00:16:35,020 --> 00:16:40,089
also telling us the environment

00:16:37,000 --> 00:16:42,370
information for this window cell and

00:16:40,089 --> 00:16:46,209
what's interesting is also that it tells

00:16:42,370 --> 00:16:49,510
us what is the what is the private IP of

00:16:46,209 --> 00:16:51,970
this Windows node and the application is

00:16:49,510 --> 00:16:53,730
actually running on this port and of

00:16:51,970 --> 00:16:59,350
course as you can see this is all the

00:16:53,730 --> 00:17:03,490
specific windows specific information so

00:16:59,350 --> 00:17:09,350
as I mentioned earlier the

00:17:03,490 --> 00:17:14,960
sorry about this when you deploy this

00:17:09,350 --> 00:17:18,590
cluster using the using the Bosch CPI

00:17:14,960 --> 00:17:25,790
for Azure what is happening is you

00:17:18,590 --> 00:17:28,970
actually get a cluster of notes and as

00:17:25,790 --> 00:17:32,240
you can see here this is our windows for

00:17:28,970 --> 00:17:38,150
Diego cell that we have added to our

00:17:32,240 --> 00:17:41,810
cluster so in so also if you want to see

00:17:38,150 --> 00:17:43,430
how to do this we have a github repo for

00:17:41,810 --> 00:17:45,530
this so you guys can follow the

00:17:43,430 --> 00:17:48,170
instructions to actually push your

00:17:45,530 --> 00:17:50,120
dotnet application and this actually

00:17:48,170 --> 00:17:53,930
walks you through how to provision the

00:17:50,120 --> 00:17:58,970
resources on Azure and how to add the

00:17:53,930 --> 00:18:03,410
specific Windows VM to your cluster okay

00:17:58,970 --> 00:18:06,320
so that was that was the dotnet one

00:18:03,410 --> 00:18:10,400
their traditional dotnet one now coming

00:18:06,320 --> 00:18:13,190
back to this is the application this is

00:18:10,400 --> 00:18:17,720
the actual command that you will use to

00:18:13,190 --> 00:18:20,530
deploy the asp.net core application and

00:18:17,720 --> 00:18:23,500
as you can see here is actually running

00:18:20,530 --> 00:18:29,270
this is actually running in the cluster

00:18:23,500 --> 00:18:33,470
and the specific application is pretty

00:18:29,270 --> 00:18:37,700
simple it's just running on this CF and

00:18:33,470 --> 00:18:40,520
s is like close hello from asp.net 4 so

00:18:37,700 --> 00:18:42,700
it's pretty simple but you guys get the

00:18:40,520 --> 00:18:42,700
point

00:18:42,930 --> 00:18:46,150
[Music]

00:18:51,559 --> 00:18:56,360
cool one simple CF push command and you

00:18:54,379 --> 00:18:59,480
can push down eight core applications to

00:18:56,360 --> 00:19:03,200
Linux you can push Windows applications

00:18:59,480 --> 00:19:05,600
to a window stack it's very powerful so

00:19:03,200 --> 00:19:07,820
a couple things that we're excited to

00:19:05,600 --> 00:19:11,240
talk about that are coming soon so

00:19:07,820 --> 00:19:14,480
dotnet core 1.0 GA has been announced

00:19:11,240 --> 00:19:17,149
for early summer that's something we're

00:19:14,480 --> 00:19:20,509
all looking forward to a supported

00:19:17,149 --> 00:19:23,149
asp.net core build pack so currently

00:19:20,509 --> 00:19:27,350
there is a community provided build pack

00:19:23,149 --> 00:19:29,539
I think it's written by IBM it it's it's

00:19:27,350 --> 00:19:31,490
out there it's called asp.net 5 build

00:19:29,539 --> 00:19:33,590
pack in fact we provide some links to it

00:19:31,490 --> 00:19:35,990
in the slide deck so that you can play

00:19:33,590 --> 00:19:38,029
with it yourselves but I know that

00:19:35,990 --> 00:19:39,889
pivotal is looking at pulling that in

00:19:38,029 --> 00:19:44,139
and making it supported as a part of

00:19:39,889 --> 00:19:47,059
pivotal cloud foundry next bosh windows

00:19:44,139 --> 00:19:48,320
wash windows is something that as I

00:19:47,059 --> 00:19:49,009
mentioned before it's currently in

00:19:48,320 --> 00:19:52,159
flight

00:19:49,009 --> 00:19:55,340
it's a project to allow those windows

00:19:52,159 --> 00:19:58,460
VMs to be provisioned automatically by

00:19:55,340 --> 00:20:00,470
bosh itself as the rest of your CF

00:19:58,460 --> 00:20:03,159
cluster is instead of having to

00:20:00,470 --> 00:20:05,659
provision them manually outside of

00:20:03,159 --> 00:20:09,619
outside of the cloud foundry and then

00:20:05,659 --> 00:20:11,509
attach them into the cluster and lastly

00:20:09,619 --> 00:20:15,169
there's this exciting project called

00:20:11,509 --> 00:20:18,529
steel-toe which provides access to

00:20:15,169 --> 00:20:21,350
spring cloud servers from dotnet clients

00:20:18,529 --> 00:20:23,389
so for example we were talking about

00:20:21,350 --> 00:20:26,240
ways to manage config inside of your

00:20:23,389 --> 00:20:28,999
dotnet application this allows you to

00:20:26,240 --> 00:20:31,220
consume a spring cloud configuration

00:20:28,999 --> 00:20:33,499
server and it makes it available inside

00:20:31,220 --> 00:20:36,350
of dotnet as a configuration provider

00:20:33,499 --> 00:20:38,330
you're also able to consume the vcap

00:20:36,350 --> 00:20:41,840
environment variables etc using that

00:20:38,330 --> 00:20:43,610
same methodology there are some some

00:20:41,840 --> 00:20:45,499
other pieces that are are currently in

00:20:43,610 --> 00:20:47,779
flight there as well like a Eureka

00:20:45,499 --> 00:20:50,749
Eureka client that's available for a

00:20:47,779 --> 00:20:53,330
dotnet as well so this is an open source

00:20:50,749 --> 00:20:55,759
project there are some pieces of it that

00:20:53,330 --> 00:20:58,039
are available and that are working today

00:20:55,759 --> 00:20:59,809
so so please feel free to go out here

00:20:58,039 --> 00:21:03,700
and play with it if you're interested

00:20:59,809 --> 00:21:07,910
we welcome pull requests so

00:21:03,700 --> 00:21:10,100
yes lastly here's a few more resources

00:21:07,910 --> 00:21:12,050
on some of the topics that we covered

00:21:10,100 --> 00:21:13,490
today and these slides will be

00:21:12,050 --> 00:21:18,350
distributed so that you'll be able to

00:21:13,490 --> 00:21:33,200
access these URLs and that brings us to

00:21:18,350 --> 00:21:40,060
Q&A okay I think it was in the back came

00:21:33,200 --> 00:21:43,370
up first I'm sorry say it again

00:21:40,060 --> 00:21:44,900
when is it going to be released I think

00:21:43,370 --> 00:21:45,590
I heard it was this weekend or something

00:21:44,900 --> 00:21:48,110
right

00:21:45,590 --> 00:21:50,210
just joking just joking I don't have a

00:21:48,110 --> 00:21:51,950
date on that I know that it's something

00:21:50,210 --> 00:21:53,630
that they're currently working on but

00:21:51,950 --> 00:21:56,330
there are some significant challenges

00:21:53,630 --> 00:21:59,140
that are of the non-technical kind that

00:21:56,330 --> 00:21:59,140
they're trying to overcome

00:22:00,160 --> 00:22:04,320
exactly right up here in the front

00:22:11,730 --> 00:22:16,690
that's correct

00:22:14,460 --> 00:22:18,910
let's let's be clear though that this

00:22:16,690 --> 00:22:20,470
manual process is the same process that

00:22:18,910 --> 00:22:23,800
you go through today if you're

00:22:20,470 --> 00:22:26,650
installing any Windows VM in your

00:22:23,800 --> 00:22:28,480
environment and and it provides you the

00:22:26,650 --> 00:22:30,510
ability to have a lot of control over

00:22:28,480 --> 00:22:33,400
what goes into that Windows image

00:22:30,510 --> 00:22:36,070
whereas if you're using a already baked

00:22:33,400 --> 00:22:39,300
stem cell then you you know you may not

00:22:36,070 --> 00:22:39,300
have that same level of control

00:22:47,490 --> 00:22:58,090
are you talking about containers how

00:22:56,260 --> 00:23:12,850
long it will be before it's secure for a

00:22:58,090 --> 00:23:14,970
multi-tenant environment in the back

00:23:12,850 --> 00:23:14,970
again

00:23:19,110 --> 00:23:24,929
it's I don't know if I'd call it an

00:23:22,500 --> 00:23:27,390
extension it's a new project but it

00:23:24,929 --> 00:23:34,679
leverages all of those spring cloud

00:23:27,390 --> 00:23:42,059
servers so yes it's related any other

00:23:34,679 --> 00:23:45,289
questions all right well if that's it

00:23:42,059 --> 00:23:45,289

YouTube URL: https://www.youtube.com/watch?v=u88AYbPqSEY


