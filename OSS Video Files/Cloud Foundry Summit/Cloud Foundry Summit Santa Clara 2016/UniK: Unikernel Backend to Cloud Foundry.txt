Title: UniK: Unikernel Backend to Cloud Foundry
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Unikernel – an executable image that can run natively on a hypervisor without the need for a separate operating system – are rapidly gaining momentum. To integrate unikernels into the echo-system, cloud-computing platforms as a service are required to provide unikernels with the same services they provide for containers. Here we present Unik, an orchestration system for unikernels. Unik handles the compilation of libraries and applications for running on AWS, manages their scheduling, and ensures their health. To provide the user with a seamless PaaS experience, Unik is integrated as a backend to Cloud Foundry runtime. In the session we will cover: an overview of Unikernel, UniK and the integration with Cloud Foundry followed by a demo. 

Idit Levine
EMC
CTO
Cambridge, MA
Idit Levine is the CTO for cloud management division at EMC and a member of its global CTO office. Her passion and expertise are focused on Management and Orchestration (M&O) over the entire stack and on microservice, cloud native apps and Platform as a Service. Idit’s fascination with the cloud sprouted when she joined DynamicOps (vCAC, now part of VMware) as one of its first employees. She subsequently took part in developing the new-generation public cloud of Verizon Terremark, and served as an acting-CTO at Intigua, a startup company that focuses on container and management technology.
Captions: 
	00:00:00,000 --> 00:00:03,360
hi everybody thank you for coming for my

00:00:02,820 --> 00:00:05,970
talk

00:00:03,360 --> 00:00:10,380
my name is he did Levin and I'm working

00:00:05,970 --> 00:00:14,849
in emc in the city office I'm also the

00:00:10,380 --> 00:00:17,430
CTO of EMC Cambridge dojo club Hungary

00:00:14,849 --> 00:00:19,590
and I wanted to share with you a very

00:00:17,430 --> 00:00:22,050
cool project that we did called project

00:00:19,590 --> 00:00:24,570
unique that was an advanced development

00:00:22,050 --> 00:00:26,730
that means two more developer kind of

00:00:24,570 --> 00:00:29,689
like spin up I will feel that this is

00:00:26,730 --> 00:00:31,830
very cool we wanted to share with you so

00:00:29,689 --> 00:00:35,219
first let's start talking about the

00:00:31,830 --> 00:00:36,780
motivation why did we do this so if

00:00:35,219 --> 00:00:38,640
you're looking around you see the stock

00:00:36,780 --> 00:00:40,890
this is the stock due today most of the

00:00:38,640 --> 00:00:43,079
enterprises using specific leave they're

00:00:40,890 --> 00:00:44,850
using Cloud Foundry right so there is

00:00:43,079 --> 00:00:47,100
the hardware there is the hardware

00:00:44,850 --> 00:00:50,399
drivers then on top of it there is

00:00:47,100 --> 00:00:52,710
usually a hypervisor there is virtual

00:00:50,399 --> 00:00:55,739
hard drive and then you have the OS

00:00:52,710 --> 00:00:59,039
kernel then want to operate the system

00:00:55,739 --> 00:01:03,270
you have also the OS user Pro L sorry

00:00:59,039 --> 00:01:05,040
the OS user processes right then would

00:01:03,270 --> 00:01:08,369
that basically separate your processes

00:01:05,040 --> 00:01:10,920
on top of it your talker right the kind

00:01:08,369 --> 00:01:12,630
of doing the same thing and then on top

00:01:10,920 --> 00:01:15,090
of it you have the shell libraries

00:01:12,630 --> 00:01:17,220
you're putting it inside your docket

00:01:15,090 --> 00:01:19,619
container then you have a language one

00:01:17,220 --> 00:01:22,350
time your application and your

00:01:19,619 --> 00:01:24,060
application can think all of this all

00:01:22,350 --> 00:01:26,430
this huge stack is what you're running

00:01:24,060 --> 00:01:28,409
every time that you want to run the

00:01:26,430 --> 00:01:32,009
question is why do we need all this

00:01:28,409 --> 00:01:34,170
stuff and what is important to us to

00:01:32,009 --> 00:01:36,210
recognize is that the only reason we

00:01:34,170 --> 00:01:38,880
actually need all this stack is because

00:01:36,210 --> 00:01:41,430
we want to run a single application with

00:01:38,880 --> 00:01:43,170
a single user on a single server that's

00:01:41,430 --> 00:01:45,360
all we really want to achieve and we

00:01:43,170 --> 00:01:47,280
have all this youth stack right with all

00:01:45,360 --> 00:01:48,990
those there and if you're looking at

00:01:47,280 --> 00:01:51,540
this layer there is a lot of redundancy

00:01:48,990 --> 00:01:54,000
for instance isolation is a great

00:01:51,540 --> 00:01:56,759
example you are guys so the physical

00:01:54,000 --> 00:01:58,680
isolation on the hardware right then you

00:01:56,759 --> 00:02:01,710
have the I traversal itself who isolate

00:01:58,680 --> 00:02:03,600
the VM you have the OS use user

00:02:01,710 --> 00:02:05,790
processes who separate the processes

00:02:03,600 --> 00:02:07,740
then you have docker runtime basically

00:02:05,790 --> 00:02:09,950
doing the same thing then you have your

00:02:07,740 --> 00:02:12,780
application or separate your users right

00:02:09,950 --> 00:02:13,810
so a lot a lot of we done the CN n

00:02:12,780 --> 00:02:16,550
efficient

00:02:13,810 --> 00:02:17,660
so now let's look at the caramel one

00:02:16,550 --> 00:02:20,270
second and see if there is any

00:02:17,660 --> 00:02:21,920
complexity there and if we're looking at

00:02:20,270 --> 00:02:25,250
the camera we see that most of the

00:02:21,920 --> 00:02:27,770
complexity is coming from the one target

00:02:25,250 --> 00:02:29,690
that the kernel she do which is protect

00:02:27,770 --> 00:02:31,820
right it should protect application for

00:02:29,690 --> 00:02:33,890
implication should protect user from

00:02:31,820 --> 00:02:36,020
user and it should protect application

00:02:33,890 --> 00:02:37,930
from user right so this is basically one

00:02:36,020 --> 00:02:42,380
of the main job for the kernel the

00:02:37,930 --> 00:02:44,750
question is that's really needed like

00:02:42,380 --> 00:02:47,540
that was very very make sense on the

00:02:44,750 --> 00:02:50,420
fifty and sixty when we bought this huge

00:02:47,540 --> 00:02:53,030
computer was very expensive and as a

00:02:50,420 --> 00:02:54,590
business use case we decided that we

00:02:53,030 --> 00:02:56,840
cannot afford ourselves by this huge

00:02:54,590 --> 00:02:59,270
computer of based one for application

00:02:56,840 --> 00:03:01,700
and therefore what we did we had to

00:02:59,270 --> 00:03:03,890
share it right and because it costs a

00:03:01,700 --> 00:03:05,780
lot of money and but today we're not

00:03:03,890 --> 00:03:07,910
doing it right today that's not the

00:03:05,780 --> 00:03:12,050
model today you can actually run a very

00:03:07,910 --> 00:03:13,310
small computer VM with what you need if

00:03:12,050 --> 00:03:15,110
you're looking at the micro services

00:03:13,310 --> 00:03:18,500
architecture and there is a lot of

00:03:15,110 --> 00:03:20,510
duplication the clinic's kind of already

00:03:18,500 --> 00:03:24,230
did for us if you're looking at library

00:03:20,510 --> 00:03:25,850
like it it it's like a etc' you will see

00:03:24,230 --> 00:03:28,370
that basically what Cora is doing with

00:03:25,850 --> 00:03:30,110
that CD it's kind of like a like just in

00:03:28,370 --> 00:03:31,610
distributed way but there is a lot of

00:03:30,110 --> 00:03:33,830
stuff that the operators I'm actually

00:03:31,610 --> 00:03:37,730
already giving us and we duplicated on

00:03:33,830 --> 00:03:39,350
the Microsoft service architecture and

00:03:37,730 --> 00:03:40,640
if we're looking at other inefficiency

00:03:39,350 --> 00:03:42,500
if we're looking at something like the

00:03:40,640 --> 00:03:44,570
kernel and we're looking at the driver

00:03:42,500 --> 00:03:45,890
that running inside the kernel will be

00:03:44,570 --> 00:03:48,140
surprised to discover that there is a

00:03:45,890 --> 00:03:50,390
floppy driver there I didn't see a lot

00:03:48,140 --> 00:03:51,799
of time flop we actually driver attached

00:03:50,390 --> 00:03:53,329
to your machine but you still have the

00:03:51,799 --> 00:03:55,579
bit and byte on your computer

00:03:53,329 --> 00:03:56,860
same thing for USB you're running on the

00:03:55,579 --> 00:03:59,720
Amazon on AWS

00:03:56,860 --> 00:04:02,690
you can't even get the machine you still

00:03:59,720 --> 00:04:05,320
have the USB our driver so a lot of

00:04:02,690 --> 00:04:08,750
unnecessary stuff running on your laptop

00:04:05,320 --> 00:04:10,700
constantly now or on your laptop or on

00:04:08,750 --> 00:04:12,850
your infrastructure and what is

00:04:10,700 --> 00:04:15,620
important to say is that every other

00:04:12,850 --> 00:04:18,950
company the trying to attack this today

00:04:15,620 --> 00:04:21,620
like Horace for instance they try to

00:04:18,950 --> 00:04:23,470
attack the the operating system destroy

00:04:21,620 --> 00:04:24,940
they never touch the unicorn are they

00:04:23,470 --> 00:04:26,110
kernel itself which means that in the

00:04:24,940 --> 00:04:28,360
camera you still have a lot of

00:04:26,110 --> 00:04:32,050
unnecessary code and if you're looking

00:04:28,360 --> 00:04:33,310
at the update per object model today so

00:04:32,050 --> 00:04:34,510
when you're doing gay I don't know if

00:04:33,310 --> 00:04:37,000
you're running Fedora and you're doing

00:04:34,510 --> 00:04:37,570
yam or if you're running the boon doing

00:04:37,000 --> 00:04:39,460
you're doing getup

00:04:37,570 --> 00:04:41,470
you're getting a lot of stuff to your

00:04:39,460 --> 00:04:42,550
computer I don't know if you really know

00:04:41,470 --> 00:04:44,620
what you're getting but a lot of the

00:04:42,550 --> 00:04:46,030
stuff probably are not necessary you're

00:04:44,620 --> 00:04:48,760
still getting in and paying for the

00:04:46,030 --> 00:04:52,210
storage and for all this some bit and

00:04:48,760 --> 00:04:54,010
byte running so cio probably will

00:04:52,210 --> 00:04:55,510
appreciate this light because also in

00:04:54,010 --> 00:04:59,470
the security there is quite a lot of

00:04:55,510 --> 00:05:01,420
forum because the kernel is so big and

00:04:59,470 --> 00:05:03,700
the operating system is so bad the

00:05:01,420 --> 00:05:06,850
surface of attack is huge right I mean I

00:05:03,700 --> 00:05:08,710
can think about a lot of component that

00:05:06,850 --> 00:05:11,830
I can actually use in order to attack

00:05:08,710 --> 00:05:14,050
those operate the system and when you're

00:05:11,830 --> 00:05:16,690
looking at Linux which is a very popular

00:05:14,050 --> 00:05:19,240
operating system there is a lot of

00:05:16,690 --> 00:05:21,010
explosive targeting in it versus the

00:05:19,240 --> 00:05:22,780
hypervisor people are less target

00:05:21,010 --> 00:05:24,400
because it's usually behind the internet

00:05:22,780 --> 00:05:27,760
right you cannot expose it to the

00:05:24,400 --> 00:05:30,370
Internet and the last security problem

00:05:27,760 --> 00:05:32,440
that I notice is the micro services

00:05:30,370 --> 00:05:34,210
architects you're sharing a lot of stuff

00:05:32,440 --> 00:05:35,770
right you sharing the Karen are you

00:05:34,210 --> 00:05:37,210
sharing the memory you sharing the file

00:05:35,770 --> 00:05:39,460
system we're sharing the hardware and

00:05:37,210 --> 00:05:42,160
quite a lot of stuff and the only thing

00:05:39,460 --> 00:05:44,500
that actually protected is extension

00:05:42,160 --> 00:05:47,760
like sigil pay kernel extension Lexi

00:05:44,500 --> 00:05:50,830
group so again it's not very needy right

00:05:47,760 --> 00:05:53,320
so let's not go and second a little bit

00:05:50,830 --> 00:05:55,570
more about the Linux kernel this is an

00:05:53,320 --> 00:05:56,890
example for how many technologies you

00:05:55,570 --> 00:05:59,800
need to know in order to actually

00:05:56,890 --> 00:06:02,050
maintain the Linux kernel it's going on

00:05:59,800 --> 00:06:03,820
and on and I will argue that there is

00:06:02,050 --> 00:06:08,290
not a lot of war of people in the water

00:06:03,820 --> 00:06:11,110
actually capable of doing it so very

00:06:08,290 --> 00:06:15,729
complicated if you're looking at the

00:06:11,110 --> 00:06:17,890
source line of code this is like my

00:06:15,729 --> 00:06:19,900
estimation I think that a small

00:06:17,890 --> 00:06:22,360
application is around 10k line of code

00:06:19,900 --> 00:06:23,979
this is what usually we like to say if

00:06:22,360 --> 00:06:26,790
you're looking at medium and large it's

00:06:23,979 --> 00:06:29,470
probably around 100 K line line of code

00:06:26,790 --> 00:06:31,930
when you're looking at a big one huge

00:06:29,470 --> 00:06:35,260
the team is actually maintained probably

00:06:31,930 --> 00:06:36,650
1 million lines of code this is the only

00:06:35,260 --> 00:06:39,259
the kernel

00:06:36,650 --> 00:06:41,870
of the MINIX 22 million lines of code

00:06:39,259 --> 00:06:47,690
right if you're looking at the DB

00:06:41,870 --> 00:06:50,120
ondestroy 419 lines of code this is huge

00:06:47,690 --> 00:06:54,169
there is no you know it's very hard to

00:06:50,120 --> 00:06:56,810
maintain tons of technical DEP and it's

00:06:54,169 --> 00:06:59,090
just very hard to reason about right so

00:06:56,810 --> 00:07:01,759
this is basically the you know the ratio

00:06:59,090 --> 00:07:05,030
between the line of code of the unica of

00:07:01,759 --> 00:07:06,380
their kernel and this job so the

00:07:05,030 --> 00:07:08,360
question is how did we get that right I

00:07:06,380 --> 00:07:10,760
mean I just described you tons of

00:07:08,360 --> 00:07:13,310
inefficiency that we're running every

00:07:10,760 --> 00:07:15,050
day in your infrastructure and what I

00:07:13,310 --> 00:07:17,030
came with is that it's probably

00:07:15,050 --> 00:07:19,460
irregular you know it's an evolution

00:07:17,030 --> 00:07:20,690
right we started with a big computer we

00:07:19,460 --> 00:07:22,910
went all the way to the personal

00:07:20,690 --> 00:07:26,000
computer all the way to you know to your

00:07:22,910 --> 00:07:28,430
make in your Android and the only thing

00:07:26,000 --> 00:07:30,710
that corn between all of this is

00:07:28,430 --> 00:07:34,849
basically UNIX right it supported us all

00:07:30,710 --> 00:07:37,160
the way sorry so basically so what can

00:07:34,849 --> 00:07:39,500
Linux run on anything right

00:07:37,160 --> 00:07:41,599
what can run on Linux anything I can

00:07:39,500 --> 00:07:43,460
seriously take right now the last give

00:07:41,599 --> 00:07:46,460
me a boon to this job

00:07:43,460 --> 00:07:48,169
run it on my 10 years Pentium one left

00:07:46,460 --> 00:07:51,500
it's just going to work right I don't

00:07:48,169 --> 00:07:53,030
need to do anything out of the box so we

00:07:51,500 --> 00:07:54,650
made it trade-off right

00:07:53,030 --> 00:07:56,539
we made a trade-off as a community we

00:07:54,650 --> 00:08:00,289
decided that it's more important to us

00:07:56,539 --> 00:08:04,880
to to support compatibility versus

00:08:00,289 --> 00:08:06,650
efficiency right so we make it work

00:08:04,880 --> 00:08:08,840
right i mean we are running it in your

00:08:06,650 --> 00:08:10,909
data center it's quite very you know

00:08:08,840 --> 00:08:12,680
it's performer ball there is google and

00:08:10,909 --> 00:08:16,039
all of the world and they're running

00:08:12,680 --> 00:08:18,860
very efficiency but it's not right the

00:08:16,039 --> 00:08:20,960
architecture is one and what i offer

00:08:18,860 --> 00:08:22,220
right now is that let's make it right

00:08:20,960 --> 00:08:25,639
and i'm fully after it let's make it

00:08:22,220 --> 00:08:28,729
fast so what i suggest is to use unique

00:08:25,639 --> 00:08:31,310
kernel and so let's talk a little bit

00:08:28,729 --> 00:08:33,200
about unique kernel so the traditional

00:08:31,310 --> 00:08:35,150
approach today when you're running you

00:08:33,200 --> 00:08:36,740
of the kernel itself and then you have

00:08:35,150 --> 00:08:38,930
all the libraries on top of it in your

00:08:36,740 --> 00:08:39,800
application this is the stuff that

00:08:38,930 --> 00:08:41,300
you're getting no matter which

00:08:39,800 --> 00:08:42,860
application you're running it's always

00:08:41,300 --> 00:08:44,860
look the same this is in your portal

00:08:42,860 --> 00:08:48,040
system and that's what you're running

00:08:44,860 --> 00:08:50,360
question is do I really need that and

00:08:48,040 --> 00:08:51,889
you don't really right

00:08:50,360 --> 00:08:54,290
you only need what your application

00:08:51,889 --> 00:08:57,259
actually consume so the unicameral

00:08:54,290 --> 00:09:01,220
reports saying let us take just the

00:08:57,259 --> 00:09:02,989
white triangle that really need in order

00:09:01,220 --> 00:09:04,999
to run our application so you're not

00:09:02,989 --> 00:09:06,259
going to have the full colonel you're

00:09:04,999 --> 00:09:07,790
not going to have the driver that you

00:09:06,259 --> 00:09:09,470
donate you're only going to have the

00:09:07,790 --> 00:09:15,079
driver that you actually need in order

00:09:09,470 --> 00:09:16,730
to run this you can so this is sounds

00:09:15,079 --> 00:09:19,369
like a magic how does it actually work

00:09:16,730 --> 00:09:22,249
right so what we're doing is we're

00:09:19,369 --> 00:09:23,869
taking your application called binaries

00:09:22,249 --> 00:09:25,819
right you're taking your config you're

00:09:23,869 --> 00:09:27,679
taking your dependency you're taking

00:09:25,819 --> 00:09:29,149
your wrong time like which one time that

00:09:27,679 --> 00:09:31,339
you need to support your application and

00:09:29,149 --> 00:09:33,259
you're taking your virtual drivers and

00:09:31,339 --> 00:09:36,019
you're putting all of this in some

00:09:33,259 --> 00:09:37,639
packaging tool right that the unicorn

00:09:36,019 --> 00:09:40,100
are like Oh system already creating for

00:09:37,639 --> 00:09:41,720
us there is a few of them and then

00:09:40,100 --> 00:09:43,189
resolve it's just a unique kernel and

00:09:41,720 --> 00:09:45,769
your ago it's basically a bootable image

00:09:43,189 --> 00:09:48,679
right so it can run either an eye

00:09:45,769 --> 00:09:50,809
provider Oh bare-metal right because

00:09:48,679 --> 00:09:54,079
it's basically a bootable image so if

00:09:50,809 --> 00:09:56,600
it's running on hypervisor it's it's its

00:09:54,079 --> 00:09:58,489
own machine or it's a real VM everything

00:09:56,600 --> 00:09:59,869
that we already knows about hypervisor

00:09:58,489 --> 00:10:01,879
will work here right if you want to

00:09:59,869 --> 00:10:03,529
vmotion it if you know all of these

00:10:01,879 --> 00:10:05,389
things is going to work because it's

00:10:03,529 --> 00:10:07,100
running on an eye provider but

00:10:05,389 --> 00:10:09,110
unicameral will have their own network

00:10:07,100 --> 00:10:11,809
stack they have their own virtual memory

00:10:09,110 --> 00:10:15,379
and they contain and hopefully immutable

00:10:11,809 --> 00:10:17,929
that's what we hope so what did we do

00:10:15,379 --> 00:10:20,059
here this is the stack we just remove

00:10:17,929 --> 00:10:21,709
everything that we donated right very

00:10:20,059 --> 00:10:25,669
simple it just remove what we donate

00:10:21,709 --> 00:10:29,299
much easy to reason about less layers

00:10:25,669 --> 00:10:31,129
and so on so I just summarize what is

00:10:29,299 --> 00:10:32,689
the advantage of your new kernel so the

00:10:31,129 --> 00:10:35,299
first time the first thing is that there

00:10:32,689 --> 00:10:36,980
is no other user the only user that

00:10:35,299 --> 00:10:39,829
you're you know there is no multi-user

00:10:36,980 --> 00:10:41,989
support you can add a multi support for

00:10:39,829 --> 00:10:44,360
application but it's not going to be

00:10:41,989 --> 00:10:46,040
when you log into your machine right no

00:10:44,360 --> 00:10:47,929
permission check and this is kind of

00:10:46,040 --> 00:10:49,819
like key because now you don't need to

00:10:47,929 --> 00:10:51,679
do also a context switch and you're

00:10:49,819 --> 00:10:53,629
running on actually ring zero which

00:10:51,679 --> 00:10:54,919
means that you act the on kernel mode

00:10:53,629 --> 00:10:57,230
which means that you can actually

00:10:54,919 --> 00:10:59,539
utilize 100% of your hardware your

00:10:57,230 --> 00:11:01,309
application is doesn't need to switch

00:10:59,539 --> 00:11:02,760
between the kernel mode to the user mode

00:11:01,309 --> 00:11:05,990
it's just running in the kernel

00:11:02,760 --> 00:11:08,190
much quicker much more performance

00:11:05,990 --> 00:11:11,279
isolation only in the virtual hardware

00:11:08,190 --> 00:11:13,620
you only sharing hardware which is very

00:11:11,279 --> 00:11:17,279
very important right now if we're

00:11:13,620 --> 00:11:18,810
talking about sizes the minimum virtual

00:11:17,279 --> 00:11:20,699
machine that you're taking today with an

00:11:18,810 --> 00:11:22,380
operating system it's probably one gig

00:11:20,699 --> 00:11:24,120
this is what usually people working with

00:11:22,380 --> 00:11:24,839
right the minimum before you put in your

00:11:24,120 --> 00:11:27,600
application

00:11:24,839 --> 00:11:29,610
the only kernel is case right so I mean

00:11:27,600 --> 00:11:30,930
if you put in basically the size of the

00:11:29,610 --> 00:11:32,790
unica and this is the size of your

00:11:30,930 --> 00:11:36,209
application right because it's very very

00:11:32,790 --> 00:11:38,610
tiny and because there is not a lot of

00:11:36,209 --> 00:11:41,490
line of code not 22 millions the only

00:11:38,610 --> 00:11:43,290
like thousand so it's very quick to boot

00:11:41,490 --> 00:11:45,000
up right it's not a lot of line to

00:11:43,290 --> 00:11:46,649
actually good so the booting time the

00:11:45,000 --> 00:11:49,290
performance time is as quick as

00:11:46,649 --> 00:11:50,970
container at least right if not more and

00:11:49,290 --> 00:11:52,769
the last thing is that the type the

00:11:50,970 --> 00:11:54,449
surface of attack it's very very tiny

00:11:52,769 --> 00:11:56,730
because if you think about it there's

00:11:54,449 --> 00:11:58,260
not a lot lot to attack you don't have a

00:11:56,730 --> 00:12:00,060
cessation to this machine how can you

00:11:58,260 --> 00:12:03,690
attack a machine that it's very you know

00:12:00,060 --> 00:12:07,079
it's almost impossible to to log into it

00:12:03,690 --> 00:12:09,269
and but it's not only that the surface

00:12:07,079 --> 00:12:12,660
of attack is tiny it's also just a

00:12:09,269 --> 00:12:14,519
customer book which means the unica will

00:12:12,660 --> 00:12:15,779
look differently between different

00:12:14,519 --> 00:12:17,730
applications so if I have an application

00:12:15,779 --> 00:12:19,319
that running on this unique kernel the

00:12:17,730 --> 00:12:22,019
libraries will be different than another

00:12:19,319 --> 00:12:24,329
application so even if it was very very

00:12:22,019 --> 00:12:25,949
you know smart and managed to attack

00:12:24,329 --> 00:12:27,269
this application I will not be able to

00:12:25,949 --> 00:12:30,930
do that all the different one so it's

00:12:27,269 --> 00:12:33,990
very castable so last slide about

00:12:30,930 --> 00:12:37,440
unicameral basically there is to type in

00:12:33,990 --> 00:12:39,690
the ecosystem today there is the fourth

00:12:37,440 --> 00:12:42,000
compatibility which is basically the

00:12:39,690 --> 00:12:43,560
language specific so it's very

00:12:42,000 --> 00:12:45,690
performant all but it will work only

00:12:43,560 --> 00:12:48,569
with a specific language a good example

00:12:45,690 --> 00:12:50,670
will be doctor just a quirk in the

00:12:48,569 --> 00:12:53,010
beginning of their a company called you

00:12:50,670 --> 00:12:55,260
Nakano system they are focusing on

00:12:53,010 --> 00:12:57,480
something called Mirage AOS Mirage OS

00:12:55,260 --> 00:12:59,100
only support or comma as a language so

00:12:57,480 --> 00:13:01,529
if you don't have to write a comma

00:12:59,100 --> 00:13:03,990
your fuel come from Cambridge was a UK

00:13:01,529 --> 00:13:05,970
you're basically capable of running that

00:13:03,990 --> 00:13:09,089
and get a very very killer performance

00:13:05,970 --> 00:13:10,769
but most of us don't write your ELCA

00:13:09,089 --> 00:13:12,660
o'connell or at least didn't use it

00:13:10,769 --> 00:13:14,339
until now and therefore we're going to

00:13:12,660 --> 00:13:16,560
use the other one which is the posse

00:13:14,339 --> 00:13:18,300
compliance so parsec is basic

00:13:16,560 --> 00:13:20,400
API of the operating system and

00:13:18,300 --> 00:13:22,350
therefore it's supporting more most of

00:13:20,400 --> 00:13:26,190
the language that we know today so you

00:13:22,350 --> 00:13:28,170
can run CDC let's go no js' will be

00:13:26,190 --> 00:13:31,110
Python and name it it's going to work

00:13:28,170 --> 00:13:33,360
right so what did we do right because

00:13:31,110 --> 00:13:36,630
all I described right now it's only what

00:13:33,360 --> 00:13:39,390
is the motivation when I saw this I said

00:13:36,630 --> 00:13:42,029
to myself why not everybody using unique

00:13:39,390 --> 00:13:44,640
karma it's just very very good and what

00:13:42,029 --> 00:13:46,589
I realize is that the reason people not

00:13:44,640 --> 00:13:48,240
using it because it's very hard right

00:13:46,589 --> 00:13:50,070
you need to take your driver and you

00:13:48,240 --> 00:13:52,320
need to understand how it's working very

00:13:50,070 --> 00:13:53,730
complicated to work with and if you

00:13:52,320 --> 00:13:55,800
think about it this is exactly what

00:13:53,730 --> 00:13:57,660
doctor did to a Linux container Linux

00:13:55,800 --> 00:13:59,580
container was there for a long time but

00:13:57,660 --> 00:14:01,440
they couldn't actually be used because

00:13:59,580 --> 00:14:03,980
it was very hard for the developer to

00:14:01,440 --> 00:14:06,630
understand what's going on there what

00:14:03,980 --> 00:14:09,120
madoka did they make it very easy to use

00:14:06,630 --> 00:14:10,710
so what we did is exactly the same thing

00:14:09,120 --> 00:14:14,430
for unicameral basically creating a

00:14:10,710 --> 00:14:16,140
command-line REST API tool that make it

00:14:14,430 --> 00:14:18,000
very easy for you it's abstract from you

00:14:16,140 --> 00:14:20,400
all this mess you just pushing your

00:14:18,000 --> 00:14:20,760
application and we taking care of the

00:14:20,400 --> 00:14:25,260
rest

00:14:20,760 --> 00:14:27,780
so it's called unique a so how does

00:14:25,260 --> 00:14:30,900
unique work very simple right very like

00:14:27,780 --> 00:14:33,120
docker so unique daemon will stay at

00:14:30,900 --> 00:14:34,980
your environment usually mainly it will

00:14:33,120 --> 00:14:37,290
set up the daemon itself right of the

00:14:34,980 --> 00:14:38,880
unique and if you're running and you

00:14:37,290 --> 00:14:41,310
don't have your into your infrastructure

00:14:38,880 --> 00:14:43,170
DNS we also spinning up a new unique

00:14:41,310 --> 00:14:45,630
kernel actually which is very cool

00:14:43,170 --> 00:14:47,250
because it's 300 Meg that actually will

00:14:45,630 --> 00:14:51,330
give DNS to you so if you're running on

00:14:47,250 --> 00:14:53,580
something like vSphere and then you just

00:14:51,330 --> 00:14:56,070
build your application your unique

00:14:53,580 --> 00:14:57,780
kernel then you can attach volumes and

00:14:56,070 --> 00:15:01,290
then you can just run it very very

00:14:57,780 --> 00:15:03,000
simple to use so for my opinion this is

00:15:01,290 --> 00:15:05,100
the most important slide that I hope

00:15:03,000 --> 00:15:07,020
that you will take from here is the fact

00:15:05,100 --> 00:15:08,730
that people I I believe that we work

00:15:07,020 --> 00:15:12,180
very very small about making a decision

00:15:08,730 --> 00:15:14,670
about how to architect unit and because

00:15:12,180 --> 00:15:16,290
this echo system is very very new we

00:15:14,670 --> 00:15:18,270
didn't know what we'll catch we didn't

00:15:16,290 --> 00:15:19,980
want to bet on one unit kernel type and

00:15:18,270 --> 00:15:21,630
we didn't want to bet on one cloud and

00:15:19,980 --> 00:15:23,880
we didn't want to bet on processors we

00:15:21,630 --> 00:15:26,010
just wanted it to be very very pluggable

00:15:23,880 --> 00:15:28,110
so what we did we make unique very not

00:15:26,010 --> 00:15:28,970
opinionated so today if you wanted to

00:15:28,110 --> 00:15:30,709
add you know

00:15:28,970 --> 00:15:32,600
of the box with supporting rompere know

00:15:30,709 --> 00:15:36,110
which from my opinion the best unicorn

00:15:32,600 --> 00:15:38,290
on today there is a barrage OS which as

00:15:36,110 --> 00:15:40,279
I said is language specific and OS 3

00:15:38,290 --> 00:15:42,529
specifically very important if you're

00:15:40,279 --> 00:15:45,139
running Java so we're supporting all of

00:15:42,529 --> 00:15:48,290
those right but there is more and we

00:15:45,139 --> 00:15:50,750
invited the community to help us create

00:15:48,290 --> 00:15:53,720
a compiler for them right in term of

00:15:50,750 --> 00:15:56,779
cloud provider out of the box AWS the

00:15:53,720 --> 00:15:59,750
first one we did then we added all the

00:15:56,779 --> 00:16:03,819
vSphere so supporting vSphere and it's

00:15:59,750 --> 00:16:08,449
supporting foot on the new the new a

00:16:03,819 --> 00:16:10,250
platform on X scale of VMware we also so

00:16:08,449 --> 00:16:11,930
I want you to be at the ability to run

00:16:10,250 --> 00:16:13,490
it on your laptop because we think it's

00:16:11,930 --> 00:16:16,009
very cool so we're supporting right now

00:16:13,490 --> 00:16:18,350
VirtualBox we're going to add a cue in

00:16:16,009 --> 00:16:19,670
KVM very soon so basically what we're

00:16:18,350 --> 00:16:21,290
trying to do is cover most of the

00:16:19,670 --> 00:16:23,660
ecosystem that you can run it whenever

00:16:21,290 --> 00:16:26,439
you would like and we are also working

00:16:23,660 --> 00:16:28,699
on OpenStack as we speak actually and

00:16:26,439 --> 00:16:31,279
the other thing is that we didn't want

00:16:28,699 --> 00:16:34,279
to be only into specifics because my

00:16:31,279 --> 00:16:35,750
belief is that the big use case for

00:16:34,279 --> 00:16:38,689
unicameral will be in the Internet of

00:16:35,750 --> 00:16:40,339
Things he people can argue about if it's

00:16:38,689 --> 00:16:41,930
suitable for cloudy as if it's too

00:16:40,339 --> 00:16:43,699
mature but no one will argue that this

00:16:41,930 --> 00:16:46,189
is the best treat for Internet of Things

00:16:43,699 --> 00:16:47,870
and for a few reason one of them very

00:16:46,189 --> 00:16:50,029
small footprint right there it's not

00:16:47,870 --> 00:16:52,339
hanging a lot of storage second of all

00:16:50,029 --> 00:16:54,649
very performant ball and third one very

00:16:52,339 --> 00:16:56,809
secure so like the third quality I think

00:16:54,649 --> 00:16:59,149
this is like perfect fit for unit for an

00:16:56,809 --> 00:17:01,370
internet of thing and this is why we

00:16:59,149 --> 00:17:04,130
decided to support arm as well to show

00:17:01,370 --> 00:17:07,400
that this is can run on those embedded

00:17:04,130 --> 00:17:09,169
devices but we wanted to make it easy

00:17:07,400 --> 00:17:13,039
for you to run so but we're working on

00:17:09,169 --> 00:17:14,419
it right now is unique up not always the

00:17:13,039 --> 00:17:15,919
guys who actually building the unica

00:17:14,419 --> 00:17:17,329
would be the one that running it so we

00:17:15,919 --> 00:17:20,539
want to make sure that you can pull and

00:17:17,329 --> 00:17:25,970
push and also to make an easier

00:17:20,539 --> 00:17:27,589
experience to try and and ok so we

00:17:25,970 --> 00:17:29,690
didn't stop there because we know how

00:17:27,589 --> 00:17:32,150
the community really really like docker

00:17:29,690 --> 00:17:33,919
API so it was very important to us that

00:17:32,150 --> 00:17:37,130
it were not going to be very hard to

00:17:33,919 --> 00:17:39,649
adopt so we did we basically teach you

00:17:37,130 --> 00:17:41,570
knew how to speak docker API so today

00:17:39,649 --> 00:17:42,500
you can just use the - aged flag in

00:17:41,570 --> 00:17:45,259
docker

00:17:42,500 --> 00:17:47,419
target Damon of unique instead of darker

00:17:45,259 --> 00:17:50,210
and then you basically can do dr. Ron

00:17:47,419 --> 00:17:51,379
doc you build up your PS dr. RM it's

00:17:50,210 --> 00:17:52,759
just going to work for you out of the

00:17:51,379 --> 00:17:54,559
box so you don't need to change any

00:17:52,759 --> 00:17:59,360
script that you had before it's going to

00:17:54,559 --> 00:18:02,240
work but our main target has the city of

00:17:59,360 --> 00:18:04,190
emc dojo was to integrate it with Cloud

00:18:02,240 --> 00:18:06,889
Foundry because we feel that that's will

00:18:04,190 --> 00:18:09,500
be the best experience for the user so

00:18:06,889 --> 00:18:11,870
what we did is exactly that today if you

00:18:09,500 --> 00:18:14,330
run in Cloud Foundry you can run it on a

00:18:11,870 --> 00:18:16,220
regular a you know if you're pushing it

00:18:14,330 --> 00:18:18,559
it will go to the old architecture of

00:18:16,220 --> 00:18:20,389
boundary if you pushing it with an able

00:18:18,559 --> 00:18:22,909
yellow flag it's going to go to the

00:18:20,389 --> 00:18:24,379
Diego new architecture if you're doing

00:18:22,909 --> 00:18:25,850
right now enable your NIC it's going to

00:18:24,379 --> 00:18:28,580
go and run your new colonel so the same

00:18:25,850 --> 00:18:30,909
application you can do push to Iago

00:18:28,580 --> 00:18:43,389
or push to unicameral it's going to work

00:18:30,909 --> 00:18:43,389
demo let's let's see them so okay

00:18:44,370 --> 00:18:49,650
hey you see that yeah okay so the first

00:18:48,570 --> 00:18:52,200
thing that we will do is we will do

00:18:49,650 --> 00:18:54,659
unique Q that will tell us what is the

00:18:52,200 --> 00:18:57,240
unique honor that I already compiled so

00:18:54,659 --> 00:18:58,799
what is it what are unique on when after

00:18:57,240 --> 00:19:00,299
an compiled your nickel I'm getting it

00:18:58,799 --> 00:19:01,950
depends where I'm running but what I'm

00:19:00,299 --> 00:19:04,200
getting is a bootable image if I'm

00:19:01,950 --> 00:19:07,380
running an AWS so we'll get an ami if

00:19:04,200 --> 00:19:10,590
I'm running on a on a VMware we'll get a

00:19:07,380 --> 00:19:12,929
VM decay okay so basically what you see

00:19:10,590 --> 00:19:14,309
is that before that I had a application

00:19:12,929 --> 00:19:16,409
that I murdered that day that I built

00:19:14,309 --> 00:19:18,659
already now what we're going to do is

00:19:16,409 --> 00:19:20,549
unique PS that we tell me what I'm

00:19:18,659 --> 00:19:22,770
running already so as you see I'm not

00:19:20,549 --> 00:19:26,870
running anything so let's just go and

00:19:22,770 --> 00:19:30,240
want something real quick so unique one

00:19:26,870 --> 00:19:38,880
and the name of the application that's

00:19:30,240 --> 00:19:40,649
simple right so they're specifically

00:19:38,880 --> 00:19:42,649
running on AWS and as you see I have a

00:19:40,649 --> 00:19:45,330
unicameral running so that's quick right

00:19:42,649 --> 00:19:54,270
if we're going to go just to see that

00:19:45,330 --> 00:19:57,200
let's do unique PS let's grab the IP go

00:19:54,270 --> 00:19:57,200
to a website

00:20:05,850 --> 00:20:12,880
and as you see we have very stupid

00:20:09,520 --> 00:20:14,710
static go website running who ever know

00:20:12,880 --> 00:20:16,540
me know that I'm really adored Steve

00:20:14,710 --> 00:20:18,550
Jobs so every demo that I have will be

00:20:16,540 --> 00:20:21,370
with Steve job so as you see we have

00:20:18,550 --> 00:20:23,710
Steve Jobs running right so that's cool

00:20:21,370 --> 00:20:27,900
was very very simple but now let's build

00:20:23,710 --> 00:20:36,010
one ok so again it's very simple

00:20:27,900 --> 00:20:47,320
Nick push let's give it a name I'm not

00:20:36,010 --> 00:20:48,220
on the first place one second just want

00:20:47,320 --> 00:20:50,400
to make sure that I'm going to right

00:20:48,220 --> 00:20:50,400
place

00:21:03,290 --> 00:21:09,530
mmm example out

00:21:16,390 --> 00:21:23,710
okay so now let's run it now they think

00:21:19,870 --> 00:21:30,160
that I'm doing is unique one eight you

00:21:23,710 --> 00:21:33,460
push and I'm giving it a name let's give

00:21:30,160 --> 00:21:34,720
it CF and I'm running it and what you

00:21:33,460 --> 00:21:36,580
will see right now that it's starting

00:21:34,720 --> 00:21:38,920
building they even account that's will

00:21:36,580 --> 00:21:43,720
take a sec so let's go for the meantime

00:21:38,920 --> 00:21:49,450
and look at the club found everyone its

00:21:43,720 --> 00:21:53,380
creation so what you see is I have a

00:21:49,450 --> 00:21:55,690
Cloud Foundry here pull it up so we have

00:21:53,380 --> 00:21:58,630
no application running right can you see

00:21:55,690 --> 00:22:00,070
it good do you want me to okay so we

00:21:58,630 --> 00:22:01,240
don't have application running what

00:22:00,070 --> 00:22:02,980
we're going to do right now is go ahead

00:22:01,240 --> 00:22:06,429
and push an application let's see that

00:22:02,980 --> 00:22:10,960
just rights so the only thing that I

00:22:06,429 --> 00:22:12,520
need to do is CF push so see what I'm

00:22:10,960 --> 00:22:14,169
doing here and there is CF push I'm not

00:22:12,520 --> 00:22:16,360
starting the application and then I'm

00:22:14,169 --> 00:22:18,429
enabling unique and giving the endpoint

00:22:16,360 --> 00:22:20,049
of your neck and I'm starting it right

00:22:18,429 --> 00:22:22,059
so this is basically what I'm going to

00:22:20,049 --> 00:22:24,309
do what you will see right now is that

00:22:22,059 --> 00:22:27,340
it will go it will build it using the

00:22:24,309 --> 00:22:33,130
built back to take a minute let's

00:22:27,340 --> 00:22:34,510
continue to look at it so as you see

00:22:33,130 --> 00:22:35,950
it's running all the build back it will

00:22:34,510 --> 00:22:37,870
take the build back of the unica know

00:22:35,950 --> 00:22:40,419
that we build it's going to support

00:22:37,870 --> 00:22:44,890
everything that Cloud Foundry supported

00:22:40,419 --> 00:22:46,660
a logs if you need them you know the

00:22:44,890 --> 00:22:48,309
router everything out of the box will

00:22:46,660 --> 00:22:52,559
work for you right so as you see it will

00:22:48,309 --> 00:22:55,780
work right now so while it's doing it

00:22:52,559 --> 00:22:57,580
what I would suggest is that let's go

00:22:55,780 --> 00:23:00,280
one second back and see a little bit

00:22:57,580 --> 00:23:02,020
more demos while it's working so as I

00:23:00,280 --> 00:23:04,780
said to you they think that I believe is

00:23:02,020 --> 00:23:07,809
that Internet of Things will be a killer

00:23:04,780 --> 00:23:09,630
use case and we decided and instead of

00:23:07,809 --> 00:23:12,669
wait for that to happen we should do it

00:23:09,630 --> 00:23:14,320
so the future is are to create when we

00:23:12,669 --> 00:23:17,260
did here we basically took a Raspberry

00:23:14,320 --> 00:23:19,270
Pi and we attached it to another

00:23:17,260 --> 00:23:21,340
Raspberry Pi that actually debugging the

00:23:19,270 --> 00:23:22,630
Raspberry Pi and we were the first

00:23:21,340 --> 00:23:24,429
people in the world that actually run

00:23:22,630 --> 00:23:27,400
you only care of RAM kernel on a

00:23:24,429 --> 00:23:28,640
Raspberry Pi as you see how this is are

00:23:27,400 --> 00:23:31,220
working on it there is the

00:23:28,640 --> 00:23:33,049
gdb that actually debugging it and

00:23:31,220 --> 00:23:35,299
that's exactly how we did that so what I

00:23:33,049 --> 00:23:37,910
want to show you for the meantime is a

00:23:35,299 --> 00:23:39,410
quick demo of how we did that and what

00:23:37,910 --> 00:23:42,320
I'm going to do right now will ask

00:23:39,410 --> 00:23:44,450
unique to push unique Allen to a

00:23:42,320 --> 00:23:46,730
Raspberry Pi that will talk to the

00:23:44,450 --> 00:23:49,730
toaster and will make us toast because I

00:23:46,730 --> 00:23:50,090
skipped breakfast okay so I'm gonna do

00:23:49,730 --> 00:23:53,240
that

00:23:50,090 --> 00:23:54,710
it's do it real quick just verify that

00:23:53,240 --> 00:23:57,230
you see so this is still building like

00:23:54,710 --> 00:23:59,660
the application this one is already

00:23:57,230 --> 00:24:02,630
ready so if we will go it now just quick

00:23:59,660 --> 00:24:06,940
I will show you this before we're moving

00:24:02,630 --> 00:24:06,940
so if we're doing unique here right now

00:24:07,150 --> 00:24:15,110
you will see that application it's

00:24:11,600 --> 00:24:17,030
probably waking up yeah you see CF that

00:24:15,110 --> 00:24:19,820
we just built so now we have the kind of

00:24:17,030 --> 00:24:21,799
the unicameral we can do again CF now if

00:24:19,820 --> 00:24:25,610
we want to do logs just before we doing

00:24:21,799 --> 00:24:29,600
this so say if you want to do you can do

00:24:25,610 --> 00:24:32,620
your NIC logs the name of the PS not

00:24:29,600 --> 00:24:39,980
running so what's first two unique PS

00:24:32,620 --> 00:24:44,480
and then unique logs putting the unit

00:24:39,980 --> 00:24:47,330
kernel name and value can see this is

00:24:44,480 --> 00:24:48,590
the actual putting of the of the

00:24:47,330 --> 00:24:50,000
unicameral now you need to understand

00:24:48,590 --> 00:24:53,390
you only camera is actually running it's

00:24:50,000 --> 00:24:54,830
it's the kernel itself running inside

00:24:53,390 --> 00:24:56,419
and your application inside the kernel

00:24:54,830 --> 00:24:58,460
right it's kind of a crap together so as

00:24:56,419 --> 00:25:00,140
you see it's actually putting up your PK

00:24:58,460 --> 00:25:02,240
you know the operating system and then

00:25:00,140 --> 00:25:03,260
it will boot up your application okay so

00:25:02,240 --> 00:25:06,130
now let's do this

00:25:03,260 --> 00:25:09,520
in order to do that to switch network

00:25:06,130 --> 00:25:09,520
the second

00:25:20,150 --> 00:25:23,200
okay buddy

00:25:27,799 --> 00:25:36,629
okay switching all right Karen I'm

00:25:34,230 --> 00:25:44,749
connecting to the network we are going

00:25:36,629 --> 00:25:44,749
to run this real quick website

00:25:55,880 --> 00:26:02,440
okay so you see right now but you work

00:26:05,260 --> 00:26:08,390
okay so this is basically the website

00:26:07,789 --> 00:26:10,190
that I built

00:26:08,390 --> 00:26:12,860
now what I will do right now is I'm

00:26:10,190 --> 00:26:15,080
going to plug in everything and I'm

00:26:12,860 --> 00:26:17,809
going to click oh I forgot to put the

00:26:15,080 --> 00:26:20,919
toaster though so I have bread all right

00:26:17,809 --> 00:26:25,100
I'm going to put it in the toaster

00:26:20,919 --> 00:26:27,860
close it as you can see it's closed not

00:26:25,100 --> 00:26:35,740
working the Raspberry Pi is attached and

00:26:27,860 --> 00:26:40,490
then it's just asked unique okay so now

00:26:35,740 --> 00:26:43,220
soon unfold it will start working so

00:26:40,490 --> 00:26:44,480
again what's happening is we put a

00:26:43,220 --> 00:26:46,010
u-boot I don't know if you know what it

00:26:44,480 --> 00:26:48,289
is but it's basically Bhutan Network on

00:26:46,010 --> 00:26:49,429
the Raspberry Pi which waking up is

00:26:48,289 --> 00:26:51,770
going to make it said do I have

00:26:49,429 --> 00:26:53,299
something to run taking all the

00:26:51,770 --> 00:26:56,840
unicameral it's putting it on the

00:26:53,299 --> 00:26:59,510
Raspberry Pi or should switch this

00:26:56,840 --> 00:27:01,400
switch is going to open the dish so now

00:26:59,510 --> 00:27:06,159
that you see is that it started it and

00:27:01,400 --> 00:27:08,929
this one is working right so let it work

00:27:06,159 --> 00:27:11,539
and then the last thing let's just see

00:27:08,929 --> 00:27:16,270
what's going on with culinary let's go

00:27:11,539 --> 00:27:16,270
back to no network

00:27:20,670 --> 00:27:23,840
don't so

00:27:25,900 --> 00:27:34,710
let's do yes we have one application

00:27:32,500 --> 00:27:37,180
running hopefully it will work

00:27:34,710 --> 00:27:46,510
we didn't fail because it looks bad it's

00:27:37,180 --> 00:27:47,650
maybe because I switch Network and so as

00:27:46,510 --> 00:27:49,840
you see this is this card finally

00:27:47,650 --> 00:27:54,700
running Steve Jobs different Steve Jobs

00:27:49,840 --> 00:27:58,179
and now what we can do a quick because I

00:27:54,700 --> 00:28:02,280
know I'm out of time let's go and scale

00:27:58,179 --> 00:28:02,280
this application work quick so I'm doing

00:28:02,670 --> 00:28:10,809
see if scale right it's scaling it to

00:28:06,940 --> 00:28:13,450
tree so now I have three instance of

00:28:10,809 --> 00:28:19,630
three unicameral running right in cloud

00:28:13,450 --> 00:28:23,380
foundry let's go quick today let's go

00:28:19,630 --> 00:28:25,300
here to unique and do your Nick vs what

00:28:23,380 --> 00:28:27,070
you see is that there is for click for

00:28:25,300 --> 00:28:28,450
unique Allen running the first one is

00:28:27,070 --> 00:28:30,730
the unique and the demo that we did the

00:28:28,450 --> 00:28:32,710
first one then there is three example

00:28:30,730 --> 00:28:34,630
app right now we're going to do we're

00:28:32,710 --> 00:28:39,730
going to kill it from unique so I'm

00:28:34,630 --> 00:28:41,260
basically doing unique a REM and just

00:28:39,730 --> 00:28:48,520
choosing one of them doesn't really

00:28:41,260 --> 00:28:49,690
matter which so what you will see now

00:28:48,520 --> 00:28:52,300
and what I want to show you is that

00:28:49,690 --> 00:28:54,580
basically what will happen is that cloud

00:28:52,300 --> 00:28:56,050
funny will just add a new one right

00:28:54,580 --> 00:29:00,850
because it just lost one of the unique

00:28:56,050 --> 00:29:03,550
and so you're looking right now this one

00:29:00,850 --> 00:29:04,500
is shutting down and will soon call

00:29:03,550 --> 00:29:08,160
Connery

00:29:04,500 --> 00:29:08,160
whether that's a new one

00:29:19,730 --> 00:29:24,070
so until that's working any question no

00:29:26,620 --> 00:29:35,240
yes I forgot to say that yeah and we did

00:29:30,200 --> 00:29:38,330
open source it so you can go to the get

00:29:35,240 --> 00:29:45,049
up we really like open source so you can

00:29:38,330 --> 00:29:51,529
go to the get up of us one of them just

00:29:45,049 --> 00:29:52,880
a bit yeah so we can go here it's open

00:29:51,529 --> 00:29:56,450
sources you see the community actually

00:29:52,880 --> 00:29:58,340
really dig in already 299 stars great

00:29:56,450 --> 00:30:00,559
traffic's people are coming people are

00:29:58,340 --> 00:30:01,880
cloning people are watching so the

00:30:00,559 --> 00:30:03,590
community actually really really dig

00:30:01,880 --> 00:30:06,260
into it and I will suggest that you will

00:30:03,590 --> 00:30:08,330
do the same there is a very very easy

00:30:06,260 --> 00:30:09,950
kick style we did everything so so

00:30:08,330 --> 00:30:13,059
simple like it's docker and it's running

00:30:09,950 --> 00:30:16,029
so really like goat right let's see if

00:30:13,059 --> 00:30:18,110
Diego actually got it I don't know

00:30:16,029 --> 00:30:20,360
recover okay

00:30:18,110 --> 00:30:23,090
oh yeah you see Circe so I'm still I

00:30:20,360 --> 00:30:25,190
have one shutting down application three

00:30:23,090 --> 00:30:26,419
new one right look basically have three

00:30:25,190 --> 00:30:29,600
instances that are what I asked for

00:30:26,419 --> 00:30:32,029
culinary and the last thing because I

00:30:29,600 --> 00:30:33,850
think we are done is that you can see

00:30:32,029 --> 00:30:36,710
that the toaster is actually working

00:30:33,850 --> 00:30:44,179
we can eat that's it I mean do you have

00:30:36,710 --> 00:30:48,769
any other questions different from

00:30:44,179 --> 00:30:50,419
microkernel so I cook another been

00:30:48,769 --> 00:30:53,870
around for a while at me for a long time

00:30:50,419 --> 00:30:56,510
so yeah I mean let me take you with you

00:30:53,870 --> 00:30:59,599
offline okay I will answer that do you

00:30:56,510 --> 00:30:59,599
[Music]

00:31:02,659 --> 00:31:16,110
yes it says the thing is that what I'm

00:31:14,340 --> 00:31:18,269
doing is I'm running unicameral instead

00:31:16,110 --> 00:31:20,580
of container the only limitation is that

00:31:18,269 --> 00:31:22,110
this is as you say it's one user so

00:31:20,580 --> 00:31:23,519
which means that they cannot torque

00:31:22,110 --> 00:31:25,279
that's the only limitation that I have

00:31:23,519 --> 00:31:29,389
on the platform itself right so

00:31:25,279 --> 00:31:29,389
plication that you fork in will not work

00:31:30,169 --> 00:31:33,840
yes I mean this is a regular Club

00:31:32,460 --> 00:31:35,549
founder in this drawer right the only

00:31:33,840 --> 00:31:36,960
thing that I did is I basically created

00:31:35,549 --> 00:31:38,399
the backend so when I'm running it

00:31:36,960 --> 00:31:42,259
instead of running continents will run

00:31:38,399 --> 00:31:46,409
on your nikana okay I have a question

00:31:42,259 --> 00:31:49,260
you know that set think we're late

00:31:46,409 --> 00:31:52,490
ok so thank you guys

00:31:49,260 --> 00:31:52,490

YouTube URL: https://www.youtube.com/watch?v=UC6p_xo1Rt4


