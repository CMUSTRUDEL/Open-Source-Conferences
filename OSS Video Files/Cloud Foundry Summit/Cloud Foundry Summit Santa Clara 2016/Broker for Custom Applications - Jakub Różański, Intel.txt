Title: Broker for Custom Applications - Jakub Różański, Intel
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	TAP (Trusted analytics Platform - https://github.com/trustedanalytics) is open-source software, optimized for performance and security, that accelerates the creation of cloud-native applications driven by Big Data analytics. This integrated platform simplifies solution development and delivers value from data faster by providing a collaborative, flexible environment for advanced analytics in public and private clouds. It’s built on top of Cloud Foundry and Hadoop stack. 

Fundamental goal of TAP is to integrate many different solutions related to data analysis as a reusable services available on the platform. Although, implementing separate broker for every single service is time consuming so. As a result TAP introduced a tool called Application-Broker (https://github.com/trustedanalytics/application-broker). It is a generic solution that makes it easy to create new applications in service-like manner in the Cloud Foundry Marketplace and provisioning these applications with appropriate configuration and dealing with their dependencies. Using application-broker allows to make a reusable service out of a simple application within one click of a developer’s mouse. 

Jakub Różański
Intel Technology Poland
Software Engineer
Jakub works as Software Developer at Intel Technology Poland (Gdansk). His responsibilities include implementing backend services in various technologies (Golang, python, Java+Spring and more). Currently, he is involved in development of Trusted Analytics Platform, where he strive to master his Golang programming skills. Although he has no prior conference speaking experience, he can boast of winning 8th edition of golang-challenge (conducted by Google). He has given several technical talks for Intel teammates, also. Jakub is passionate about creating well-tested and clean software solutions.
YouTube URL: https://www.youtube.com/watch?v=eeJkSFiudkk


