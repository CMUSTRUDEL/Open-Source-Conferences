Title: Cloud Foundry: The Gaps - John Wetherill, BNY Mellon
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	BNY Mellon, the oldest bank in the US and one of the most influential financial institutions in the world, has made a firm commitment to Cloud Foundry as a key component of our cloud technology stack. The reasoning is clear: we are a financial institution focusing on financial problems, and don't want to be in business of building infrastructure and platform software, instead wanting to take advantage of open-source community-driven software so we can focus on our business challenges. 

Cloud Foundry meets several of our requirements for a highly-available, flexible, secure, and scalable platform , but it's not a panacea and has some gaps that we are forced to fill using other technologies. Specifically these gaps include support for non-http workloads, service discovery, multi-datacenter orchestration and failover support, application grouping (assembly) concepts, OS support, and more. 

This technical session will focus on many of these gaps that the open source Cloud Foundry platform currently doesn't cover, and will present in depth the solutions, including other open source software technologies, that we are building to fill those gaps, to deliver a flexible and reliable platform that fosters modern cloud practices including microservices, containerization, and continuous delivery. 

Developers, DevOps, sys-admins, and IT decision makers in any industry will benefit from the lessons we've learned. 

John Wetherill
Principal Architect
BNY Mellon
John Wetherill, Principal Architect at BNY Mellon's Innovation Center in Palo Alto, spent much of his career designing and building software at a handful of startups, at Sun Microsystems, NeXT Inc., and in the smart grid and energy space. His biggest passion is for tools, languages, processes, and systems that improve developer productivity and quality of life. 

John has spent the last four years immersed in Cloud Foundry, and continues to focus on cloud technologies including PaaS, microservices, and containerization. At BNY Mellon he is helping drive the adoption of Cloud Foundry and related technologies across the bank.
Captions: 
	00:00:00,060 --> 00:00:07,160
good afternoon and welcome this session

00:00:03,360 --> 00:00:09,630
is entitled Cloud Foundry the gaps and

00:00:07,160 --> 00:00:11,820
my name's John Weatherall I'm an

00:00:09,630 --> 00:00:15,570
architect to cloud architected bien Y

00:00:11,820 --> 00:00:18,510
Bank of New York Mellon and a little bit

00:00:15,570 --> 00:00:20,520
of background kind of what brought me to

00:00:18,510 --> 00:00:25,340
this basically what brought me to this

00:00:20,520 --> 00:00:27,300
talk so I've had a year career in

00:00:25,340 --> 00:00:30,150
developed software development and

00:00:27,300 --> 00:00:33,840
delivery the last four years I spent it

00:00:30,150 --> 00:00:36,180
at active state building our cloud

00:00:33,840 --> 00:00:39,540
foundry basepaths helping build it and

00:00:36,180 --> 00:00:42,360
basically deliver it the path is called

00:00:39,540 --> 00:00:45,390
staccato and it was a really interesting

00:00:42,360 --> 00:00:48,300
role and I from the viewpoint of a cloud

00:00:45,390 --> 00:00:50,039
foundry vendor visiting a lot of large

00:00:48,300 --> 00:00:53,070
enterprises around the around the world

00:00:50,039 --> 00:00:54,300
around the country anyway and seeing

00:00:53,070 --> 00:00:56,579
what their problems that they were

00:00:54,300 --> 00:00:58,590
facing were you know seeing the problems

00:00:56,579 --> 00:01:00,359
they were encountering trying to

00:00:58,590 --> 00:01:04,229
deceitful II and rapidly deliver

00:01:00,359 --> 00:01:06,450
software and and and the barriers that

00:01:04,229 --> 00:01:08,640
they were seeing and and not just in

00:01:06,450 --> 00:01:10,380
general software delivery and then with

00:01:08,640 --> 00:01:12,479
Platt with the platform's they're

00:01:10,380 --> 00:01:14,670
looking at including cloud foundry and

00:01:12,479 --> 00:01:16,920
including staccato so I had this

00:01:14,670 --> 00:01:18,869
viewpoint of seeing all these companies

00:01:16,920 --> 00:01:21,540
from the viewpoint of an external vendor

00:01:18,869 --> 00:01:23,790
and getting a lot of you know very

00:01:21,540 --> 00:01:28,229
informative descriptions of the problems

00:01:23,790 --> 00:01:30,810
that they're facing and I've since moved

00:01:28,229 --> 00:01:34,020
on from the staccato project and I

00:01:30,810 --> 00:01:38,340
joined BNY Mellon six months ago working

00:01:34,020 --> 00:01:40,259
on the past team and it's now I get to

00:01:38,340 --> 00:01:42,060
see the world from like the other end of

00:01:40,259 --> 00:01:43,799
the telescope so instead of from the

00:01:42,060 --> 00:01:45,360
external you know a long distance view

00:01:43,799 --> 00:01:48,149
of a vendor I'm now seeing it from the

00:01:45,360 --> 00:01:50,159
inside and first of all it's it's

00:01:48,149 --> 00:01:51,720
affirming a lot of what I've discovered

00:01:50,159 --> 00:01:53,159
over the last four years talking to

00:01:51,720 --> 00:01:56,040
these big enterprises yeah they get

00:01:53,159 --> 00:01:58,049
these same exact problems and but what

00:01:56,040 --> 00:02:00,270
it also is doing is really from the

00:01:58,049 --> 00:02:02,850
external I didn't really see the depth

00:02:00,270 --> 00:02:05,280
and the how difficult some of these

00:02:02,850 --> 00:02:08,030
problems were to solve and I'm I'm

00:02:05,280 --> 00:02:12,520
seeing it firsthand from the inside and

00:02:08,030 --> 00:02:15,640
so what this talk is about or what we're

00:02:12,520 --> 00:02:17,710
focus on is our work with cloud foundry

00:02:15,640 --> 00:02:19,570
at BNY Mellon where a Gold Sponsor of

00:02:17,710 --> 00:02:22,500
cloud foundry the cloud foundry

00:02:19,570 --> 00:02:30,490
foundation we have brought it into our

00:02:22,500 --> 00:02:32,530
shop and so the work with that and it's

00:02:30,490 --> 00:02:34,510
basically framing this with we have been

00:02:32,530 --> 00:02:38,560
building a past for several years for

00:02:34,510 --> 00:02:40,330
almost 15 years and so how that relates

00:02:38,560 --> 00:02:41,890
to the cloud foundry and everything that

00:02:40,330 --> 00:02:44,950
we're doing so that's kind of a

00:02:41,890 --> 00:02:47,080
background as far as PNY mellon goes

00:02:44,950 --> 00:02:49,200
we're we've been around for a long long

00:02:47,080 --> 00:02:51,880
time one of the oldest established

00:02:49,200 --> 00:02:55,540
companies in the banks in the country

00:02:51,880 --> 00:02:59,170
and we handle massive massive amounts of

00:02:55,540 --> 00:03:03,610
of you know funds and finances currency

00:02:59,170 --> 00:03:05,980
etc I am slightly embarrassed to say

00:03:03,610 --> 00:03:07,720
that before I started interviewing with

00:03:05,980 --> 00:03:11,730
this company I hadn't really heard of

00:03:07,720 --> 00:03:14,050
them and yet it's actually it's a very

00:03:11,730 --> 00:03:15,580
important financial institution

00:03:14,050 --> 00:03:17,290
institution in the world as you can see

00:03:15,580 --> 00:03:19,810
with these numbers twenty nine point one

00:03:17,290 --> 00:03:22,540
trillion in assets under custody one

00:03:19,810 --> 00:03:24,820
point you know lots of money lots of

00:03:22,540 --> 00:03:27,730
assets going around we have 13,000

00:03:24,820 --> 00:03:30,250
people in IT and as I mentioned earlier

00:03:27,730 --> 00:03:33,640
we've been working hard on cloud

00:03:30,250 --> 00:03:36,100
software we we've been building a past

00:03:33,640 --> 00:03:38,820
for 15 years we've been building micro

00:03:36,100 --> 00:03:42,190
services long before micro services were

00:03:38,820 --> 00:03:44,920
kind of the latest trend we're a Java

00:03:42,190 --> 00:03:46,870
shop mostly for the most part so we've

00:03:44,920 --> 00:03:51,870
been working hard on all this stuff and

00:03:46,870 --> 00:03:51,870
we have built our own paths

00:03:51,900 --> 00:03:58,120
just working oh I see it's a build me

00:03:56,410 --> 00:03:59,650
I'll let this cycle through because I

00:03:58,120 --> 00:04:01,420
don't need it to do the build thing so

00:03:59,650 --> 00:04:07,450
we have this platform called the Nexen

00:04:01,420 --> 00:04:09,220
platform which is our platform for soft

00:04:07,450 --> 00:04:12,900
cloud software delivery including the

00:04:09,220 --> 00:04:15,520
the paths itself including analytics and

00:04:12,900 --> 00:04:20,239
digital information I think I just blew

00:04:15,520 --> 00:04:23,780
past this thing my apologies

00:04:20,239 --> 00:04:26,479
let's try this i over clicked it and

00:04:23,780 --> 00:04:29,180
this platform itself we've been working

00:04:26,479 --> 00:04:31,220
on it for several years and we're on the

00:04:29,180 --> 00:04:33,560
third generation of it now it has had

00:04:31,220 --> 00:04:36,590
profound impact on our ability to

00:04:33,560 --> 00:04:38,150
deliver software and I'm just very

00:04:36,590 --> 00:04:42,139
carefully stepping through the slide so

00:04:38,150 --> 00:04:43,789
I don't go too far and it's it's the

00:04:42,139 --> 00:04:46,210
entire platform for our whole software

00:04:43,789 --> 00:04:49,280
delivery system and we have incorporated

00:04:46,210 --> 00:04:52,130
Cloud Foundry as basically as a POC at

00:04:49,280 --> 00:04:56,330
evaluation into this passage we'll see

00:04:52,130 --> 00:04:58,190
shortly so I didn't realize that they

00:04:56,330 --> 00:05:02,419
had provided me as these as bills it's

00:04:58,190 --> 00:05:04,310
okay but the point of this slide here

00:05:02,419 --> 00:05:06,199
and we'll get into the meat of this

00:05:04,310 --> 00:05:08,599
thing shortly the point of this slide

00:05:06,199 --> 00:05:10,820
here is to show how we have advanced

00:05:08,599 --> 00:05:14,240
over the years from our ability to

00:05:10,820 --> 00:05:16,610
provision and deliver software taking a

00:05:14,240 --> 00:05:18,319
long period of time to a much shorter

00:05:16,610 --> 00:05:20,150
period of time so back in the old days

00:05:18,319 --> 00:05:22,729
it would take two to four weeks for

00:05:20,150 --> 00:05:26,780
setup and for same on 4 to 12 weeks for

00:05:22,729 --> 00:05:28,690
testing and QA see 12 to 16 4 to 16

00:05:26,780 --> 00:05:31,669
weeks to get things out into production

00:05:28,690 --> 00:05:33,620
and that's part of the dev cycle and

00:05:31,669 --> 00:05:36,530
we've got most of that down to a single

00:05:33,620 --> 00:05:38,840
day so and that's the the speed-up that

00:05:36,530 --> 00:05:40,190
you can expect when we're moving into

00:05:38,840 --> 00:05:42,500
the modern era but there's some

00:05:40,190 --> 00:05:44,810
incredible challenges we have as a bank

00:05:42,500 --> 00:05:49,550
to try to get there and that's some part

00:05:44,810 --> 00:05:51,860
of what I'd like to cover today so yeah

00:05:49,550 --> 00:05:53,870
let's move right into that so this is

00:05:51,860 --> 00:05:55,400
this is huge and by the way when I was

00:05:53,870 --> 00:05:56,960
visiting all these companies all over

00:05:55,400 --> 00:05:59,210
you know a lot of the word banks and

00:05:56,960 --> 00:06:01,190
financial institutions and I I swore to

00:05:59,210 --> 00:06:02,840
myself I'd never worked there because of

00:06:01,190 --> 00:06:07,909
all these restrictions that they have

00:06:02,840 --> 00:06:10,120
imposed on them and I found it working

00:06:07,909 --> 00:06:12,650
looking at BNY Mellon they're they're

00:06:10,120 --> 00:06:14,360
aware of a lot of these constraints and

00:06:12,650 --> 00:06:16,759
these these challenges but they're

00:06:14,360 --> 00:06:18,949
actively getting past them and that's

00:06:16,759 --> 00:06:22,130
what we'll look at here so it's a fine a

00:06:18,949 --> 00:06:24,949
huge financial industry company in in a

00:06:22,130 --> 00:06:26,810
very highly regulated industry we have

00:06:24,949 --> 00:06:28,760
massive amounts of transactions going

00:06:26,810 --> 00:06:31,159
through our system very high volume very

00:06:28,760 --> 00:06:33,169
high amount high number of transactions

00:06:31,159 --> 00:06:34,220
and to the point where if something

00:06:33,169 --> 00:06:36,350
fails it could

00:06:34,220 --> 00:06:38,300
potentially affect the economy of the

00:06:36,350 --> 00:06:40,010
country right it's that much so

00:06:38,300 --> 00:06:42,170
obviously high availability is

00:06:40,010 --> 00:06:44,450
absolutely essential for our operations

00:06:42,170 --> 00:06:46,340
we have multiple data centers across the

00:06:44,450 --> 00:06:47,960
planet they need to be they need to stay

00:06:46,340 --> 00:06:50,090
up we need to understand disaster

00:06:47,960 --> 00:06:52,610
recovery obviously security is very

00:06:50,090 --> 00:06:55,040
important and we've been around for a

00:06:52,610 --> 00:06:57,350
long time we have a lot of old cold cold

00:06:55,040 --> 00:06:58,850
cold old applications legacy apps you

00:06:57,350 --> 00:07:01,400
know vintage apps as they said this

00:06:58,850 --> 00:07:03,260
morning and more more modern stuff that

00:07:01,400 --> 00:07:05,510
we have to deal with have to work with

00:07:03,260 --> 00:07:07,640
different hardware architectures

00:07:05,510 --> 00:07:09,830
software architectures all the things

00:07:07,640 --> 00:07:11,360
you would expect integration with

00:07:09,830 --> 00:07:14,030
vendors and partners all these things

00:07:11,360 --> 00:07:16,790
are huge challenges and just a little

00:07:14,030 --> 00:07:18,470
bit about the regulations audits are

00:07:16,790 --> 00:07:20,150
huge everything that we do has to be

00:07:18,470 --> 00:07:21,830
audited I'm trying to just paint a

00:07:20,150 --> 00:07:24,170
contrast here between what it's like at

00:07:21,830 --> 00:07:26,120
this financial institution versus at a

00:07:24,170 --> 00:07:28,580
you know a start-up that's working with

00:07:26,120 --> 00:07:31,880
with logs or data or something like that

00:07:28,580 --> 00:07:34,400
these constraints have significant

00:07:31,880 --> 00:07:36,830
effect so having everything has to be

00:07:34,400 --> 00:07:39,020
auditable and trackable and secret

00:07:36,830 --> 00:07:41,150
delivery and secret management has to be

00:07:39,020 --> 00:07:43,940
very carefully controlled and never

00:07:41,150 --> 00:07:46,010
getting in the wrong hands every step of

00:07:43,940 --> 00:07:49,220
every process has to be reproducible

00:07:46,010 --> 00:07:51,140
precisely as it was pre produced so

00:07:49,220 --> 00:07:52,940
every image that's built every artifact

00:07:51,140 --> 00:07:54,680
that's built has to be tracked and

00:07:52,940 --> 00:07:58,640
reproduced obviously fraud to track

00:07:54,680 --> 00:08:01,669
detection many of these things are they

00:07:58,640 --> 00:08:04,070
have huge impact on how we are able to

00:08:01,669 --> 00:08:08,150
deliver software here's one example is

00:08:04,070 --> 00:08:11,810
separation of duties by regulation the

00:08:08,150 --> 00:08:13,430
coders must not deploy to production so

00:08:11,810 --> 00:08:15,200
if you're a coder you can't deploy if

00:08:13,430 --> 00:08:18,400
you're a deployer you can't code there's

00:08:15,200 --> 00:08:21,410
that strict separation which you know

00:08:18,400 --> 00:08:24,950
kind of gets in a way a little ways of

00:08:21,410 --> 00:08:27,350
the DevOps concept right but but this is

00:08:24,950 --> 00:08:29,840
by regulation and and that fact that one

00:08:27,350 --> 00:08:31,760
little fact has significant impact on

00:08:29,840 --> 00:08:34,270
our whole delet development lifecycle

00:08:31,760 --> 00:08:36,919
including on our paths that we've built

00:08:34,270 --> 00:08:38,330
so I'm going to skip through some of

00:08:36,919 --> 00:08:40,370
these because I don't have a lot of time

00:08:38,330 --> 00:08:42,080
I want to make sure I get into the the

00:08:40,370 --> 00:08:44,060
Cloud Foundry part but some of the

00:08:42,080 --> 00:08:46,310
additional challenge is just the massive

00:08:44,060 --> 00:08:47,900
amounts of data we have running through

00:08:46,310 --> 00:08:50,990
we are global we have

00:08:47,900 --> 00:08:54,110
to be up 24 by 7 SLA is to deal with all

00:08:50,990 --> 00:08:56,570
over the place we just can't be done and

00:08:54,110 --> 00:08:59,630
I do want to say a little bit about dr

00:08:56,570 --> 00:09:02,330
so without a doubt Bank of New York

00:08:59,630 --> 00:09:04,610
Mellon understands disaster recovery

00:09:02,330 --> 00:09:06,860
we've been through some basically the

00:09:04,610 --> 00:09:08,480
worst possible thing you can happen have

00:09:06,860 --> 00:09:10,790
happened to a data center we have had

00:09:08,480 --> 00:09:12,830
happen to a data center about 15 years

00:09:10,790 --> 00:09:14,840
ago and we had to deal with that so

00:09:12,830 --> 00:09:18,380
there's many people that I work with

00:09:14,840 --> 00:09:20,810
that are experts at what D are really

00:09:18,380 --> 00:09:22,160
means and how we can recover from it so

00:09:20,810 --> 00:09:24,320
there's a lot of things that that has to

00:09:22,160 --> 00:09:25,880
be incorporated into our entire platform

00:09:24,320 --> 00:09:27,770
at all times you have to keep keep on

00:09:25,880 --> 00:09:30,970
top of that we also have to validate

00:09:27,770 --> 00:09:35,150
this we have to prove to the regulatory

00:09:30,970 --> 00:09:37,490
regulatory bodies that we can recover

00:09:35,150 --> 00:09:40,340
from a disaster and it's kind of

00:09:37,490 --> 00:09:43,520
interesting um it turns out it's easier

00:09:40,340 --> 00:09:46,280
to go through it a real dr event than it

00:09:43,520 --> 00:09:47,990
is to test for a dr event because if you

00:09:46,280 --> 00:09:49,460
have to test for a dr event you actually

00:09:47,990 --> 00:09:51,950
have to keep all your existing stuff

00:09:49,460 --> 00:09:53,360
going and then gradually move it over to

00:09:51,950 --> 00:09:56,630
and you know somehow move it over to

00:09:53,360 --> 00:09:58,790
another data center whereas with the

00:09:56,630 --> 00:10:00,860
real dr event you don't have to worry

00:09:58,790 --> 00:10:02,210
about you know gradually bleeding off

00:10:00,860 --> 00:10:04,760
process these are things I thought it

00:10:02,210 --> 00:10:08,330
just it's down it's gone right so we

00:10:04,760 --> 00:10:10,370
have to prove that periodically and make

00:10:08,330 --> 00:10:14,900
sure we can simulate failure failover

00:10:10,370 --> 00:10:16,640
accurately there's a lot of stuff

00:10:14,900 --> 00:10:18,530
regarding security but again I'm

00:10:16,640 --> 00:10:24,890
sensitive time so let's let's talk about

00:10:18,530 --> 00:10:26,420
some of the challenges the and as a

00:10:24,890 --> 00:10:28,100
company we're doing all the things that

00:10:26,420 --> 00:10:30,320
you hear about at a conference like this

00:10:28,100 --> 00:10:33,170
micro services and we are we are doing

00:10:30,320 --> 00:10:35,900
devops to the ability that we can based

00:10:33,170 --> 00:10:36,440
on the the regulations containerization

00:10:35,900 --> 00:10:39,170
docker

00:10:36,440 --> 00:10:41,750
you know that kind of stuff all the

00:10:39,170 --> 00:10:44,690
things we we are heavily into open

00:10:41,750 --> 00:10:47,240
source open source makes a lot of sense

00:10:44,690 --> 00:10:49,340
for a number of reasons and we're very

00:10:47,240 --> 00:10:51,850
sensitive about getting locked into a

00:10:49,340 --> 00:10:54,950
specific solution or a specific vendor

00:10:51,850 --> 00:10:56,690
but are there many advantages of open or

00:10:54,950 --> 00:10:59,720
open source and we're we're actively

00:10:56,690 --> 00:11:01,220
taking advantage of all the open source

00:10:59,720 --> 00:11:02,839
or many of the open source project

00:11:01,220 --> 00:11:05,870
that you've heard of including Cloud

00:11:02,839 --> 00:11:10,279
Foundry so some of the strategies we

00:11:05,870 --> 00:11:11,870
follow to try to get here pass itself as

00:11:10,279 --> 00:11:14,930
I say we've been building a pass for all

00:11:11,870 --> 00:11:16,100
these years and I'll talk a little bit

00:11:14,930 --> 00:11:20,870
about that and how it relates to

00:11:16,100 --> 00:11:22,550
confound me so Cloud Foundry we are as I

00:11:20,870 --> 00:11:25,069
say were as I said we're a gold member

00:11:22,550 --> 00:11:28,100
of the Cloud Foundry foundation and we

00:11:25,069 --> 00:11:29,839
have incorporated Cloud Foundry into our

00:11:28,100 --> 00:11:32,120
paths again we're using the open-source

00:11:29,839 --> 00:11:33,740
version we're taking advantage of a lot

00:11:32,120 --> 00:11:35,689
of its features for monitoring and log

00:11:33,740 --> 00:11:37,459
aggregation and the self-service

00:11:35,689 --> 00:11:39,529
on-demand cloud stuff you would expect

00:11:37,459 --> 00:11:41,899
to give to allow our developers to

00:11:39,529 --> 00:11:43,970
rapidly provision an application

00:11:41,899 --> 00:11:47,199
auto-scaling all this stuff can come to

00:11:43,970 --> 00:11:49,759
expect with cloud foundry another

00:11:47,199 --> 00:11:51,920
valuable point is it's a hybrid cloud

00:11:49,759 --> 00:11:54,050
ability to support hybrid clouds quite

00:11:51,920 --> 00:11:56,509
easily ok so let's get into the meat of

00:11:54,050 --> 00:11:59,540
this that was kind of the background I

00:11:56,509 --> 00:12:02,870
think I've got 20 minutes left so um

00:11:59,540 --> 00:12:04,970
there's a lot of gaps that we found

00:12:02,870 --> 00:12:06,350
there's several gaps we have found with

00:12:04,970 --> 00:12:09,139
cloud foundry that we've had to work

00:12:06,350 --> 00:12:11,809
around or had to meet and I'm gonna

00:12:09,139 --> 00:12:13,730
cover these relatively briefly I want to

00:12:11,809 --> 00:12:16,519
set the stage though that this this is

00:12:13,730 --> 00:12:18,110
not a defects of cloud foundry talk by

00:12:16,519 --> 00:12:20,480
any stretch there's no way that any

00:12:18,110 --> 00:12:23,959
product or application could meet any

00:12:20,480 --> 00:12:26,149
everybody's needs at all times and as I

00:12:23,959 --> 00:12:28,490
say we've been building paths for 15

00:12:26,149 --> 00:12:30,769
years and we have all our specific

00:12:28,490 --> 00:12:33,079
requirements and we do things the way we

00:12:30,769 --> 00:12:34,939
do them so we can't just drop in and

00:12:33,079 --> 00:12:37,339
replace all our stuff with a brand-new

00:12:34,939 --> 00:12:38,689
technology and have it work and so what

00:12:37,339 --> 00:12:40,819
we've done is we spent a lot of time

00:12:38,689 --> 00:12:42,860
analyzing and evaluating what cloud

00:12:40,819 --> 00:12:44,689
foundry does and how it fits into our

00:12:42,860 --> 00:12:46,579
existing platform and what I'm going to

00:12:44,689 --> 00:12:48,290
cover in this talk and the remainder of

00:12:46,579 --> 00:12:50,689
this talk is some of the gaps between

00:12:48,290 --> 00:12:52,730
cloud foundry and our paths and how we

00:12:50,689 --> 00:12:54,199
filled them up so and there's I think

00:12:52,730 --> 00:12:58,819
there's three slides here with some of

00:12:54,199 --> 00:13:00,709
the high level gaps and I'll blast

00:12:58,819 --> 00:13:02,660
through those while I dive into each one

00:13:00,709 --> 00:13:05,180
in just a little bit of detail first of

00:13:02,660 --> 00:13:09,350
all is OS certifications so a lot of our

00:13:05,180 --> 00:13:12,290
products must be by by regulations they

00:13:09,350 --> 00:13:14,940
must run on certain specific operating

00:13:12,290 --> 00:13:16,020
systems and so we found bringing

00:13:14,940 --> 00:13:17,670
howdy that was a little bit of a

00:13:16,020 --> 00:13:19,830
challenge because because it wasn't

00:13:17,670 --> 00:13:22,890
certified to run on some of these os's

00:13:19,830 --> 00:13:24,420
so we don't have a choice about this we

00:13:22,890 --> 00:13:27,420
have specific apps that must run on

00:13:24,420 --> 00:13:30,960
specific OSS and then as an organization

00:13:27,420 --> 00:13:34,050
we certify a set a fairly small set of

00:13:30,960 --> 00:13:35,670
OS as we can use internally so that was

00:13:34,050 --> 00:13:37,110
definitely a constraint we have to work

00:13:35,670 --> 00:13:38,340
around and I'll get around shortly how

00:13:37,110 --> 00:13:42,380
that how that happens

00:13:38,340 --> 00:13:44,610
I mentioned disaster recovery and I

00:13:42,380 --> 00:13:46,470
realize cloud fodder is making great

00:13:44,610 --> 00:13:48,870
strides in all of these areas by the way

00:13:46,470 --> 00:13:50,550
this is our kind of how we've been in

00:13:48,870 --> 00:13:53,580
the last few months looking at things as

00:13:50,550 --> 00:13:55,620
they were but having a use case for

00:13:53,580 --> 00:13:58,290
Cloud Foundry sorry a use case for

00:13:55,620 --> 00:14:00,480
disaster recovery that can handle an

00:13:58,290 --> 00:14:03,180
instant loss of a data center and

00:14:00,480 --> 00:14:05,940
failing over to a secondary data center

00:14:03,180 --> 00:14:09,210
we have to have a very precise way to

00:14:05,940 --> 00:14:11,760
describe that and make it happen I had

00:14:09,210 --> 00:14:13,890
obviously the the whole multi data

00:14:11,760 --> 00:14:16,500
center operation has to be very seamless

00:14:13,890 --> 00:14:18,720
so it's like if you maybe heard of uber

00:14:16,500 --> 00:14:20,850
Neddy's it's like the uber kubernetes

00:14:18,720 --> 00:14:23,310
thing you kind of need something like

00:14:20,850 --> 00:14:25,440
that with our paths and we have built

00:14:23,310 --> 00:14:27,480
that with our paths and that's Cloud

00:14:25,440 --> 00:14:29,490
Foundry is sliding sliding into that so

00:14:27,480 --> 00:14:31,140
we need a single control plane so we can

00:14:29,490 --> 00:14:32,850
manage all the pieces of this whether

00:14:31,140 --> 00:14:34,710
it's the applications of the services

00:14:32,850 --> 00:14:37,500
across multiple availability zones

00:14:34,710 --> 00:14:39,240
across multiple data centers across

00:14:37,500 --> 00:14:42,900
multiple clouds for that matter even a

00:14:39,240 --> 00:14:44,310
private versus public cloud and another

00:14:42,900 --> 00:14:46,500
challenge of that is there's all this

00:14:44,310 --> 00:14:48,270
vendor integration so we use vendor

00:14:46,500 --> 00:14:49,920
products for monitoring and for logging

00:14:48,270 --> 00:14:53,460
and for load balancing and all these

00:14:49,920 --> 00:14:54,960
other other facets of the paths and we

00:14:53,460 --> 00:14:57,000
have to integrate with all of this and

00:14:54,960 --> 00:15:01,260
it's no mean feat to take care of all

00:14:57,000 --> 00:15:05,339
that Network and application issues I

00:15:01,260 --> 00:15:08,339
guess so that basically there has to be

00:15:05,339 --> 00:15:10,380
ways to describe how different app

00:15:08,339 --> 00:15:12,180
instances and services and containers if

00:15:10,380 --> 00:15:14,910
you will can communicate to each other

00:15:12,180 --> 00:15:17,430
or cannot communicate to others so I

00:15:14,910 --> 00:15:20,160
want to make sure that this webbed here

00:15:17,430 --> 00:15:22,410
you know Ruby on Rails thingamajig can

00:15:20,160 --> 00:15:24,720
talk to this Java tier but can't talk to

00:15:22,410 --> 00:15:26,430
this database tier that's just a very

00:15:24,720 --> 00:15:27,640
trivial example but it gets much more

00:15:26,430 --> 00:15:29,290
interesting when you have

00:15:27,640 --> 00:15:31,330
you know fleets of microservices

00:15:29,290 --> 00:15:33,610
operating throughout your network how to

00:15:31,330 --> 00:15:35,440
control the access between all these

00:15:33,610 --> 00:15:37,420
different components or for that matter

00:15:35,440 --> 00:15:40,690
how to enable it how can I get from here

00:15:37,420 --> 00:15:43,350
to here so there's a lot of complexity

00:15:40,690 --> 00:15:46,150
involved in isolating isolating networks

00:15:43,350 --> 00:15:49,390
and then we have this whole ecosystem

00:15:46,150 --> 00:15:51,700
where I'm for us alright containers the

00:15:49,390 --> 00:15:53,740
the whole container concepts so docker

00:15:51,700 --> 00:15:55,810
is you know obviously I'm Cloud Foundry

00:15:53,740 --> 00:15:57,100
is actively working with supporting

00:15:55,810 --> 00:15:59,260
docker

00:15:57,100 --> 00:16:02,560
which is really cool and we were able to

00:15:59,260 --> 00:16:04,150
use that to great use a few months ago

00:16:02,560 --> 00:16:06,610
but there's some limitations that we

00:16:04,150 --> 00:16:09,340
found that we we had to overcome for

00:16:06,610 --> 00:16:11,290
example um I don't know if it's changed

00:16:09,340 --> 00:16:12,970
yet but when we were on it a couple of

00:16:11,290 --> 00:16:15,520
months ago it's very difficult to have

00:16:12,970 --> 00:16:17,380
Cloud Foundry pull a docker image yet

00:16:15,520 --> 00:16:19,900
this is with Diego obviously to pull a

00:16:17,380 --> 00:16:21,880
docker image from some random like let's

00:16:19,900 --> 00:16:24,490
say internal secure registry as opposed

00:16:21,880 --> 00:16:27,250
to having to go out to the docker to the

00:16:24,490 --> 00:16:30,430
hub so that was the challenge that we we

00:16:27,250 --> 00:16:32,800
had trouble getting past or taking an

00:16:30,430 --> 00:16:34,900
existing container that has requirements

00:16:32,800 --> 00:16:36,910
for volumes and figure out how to get

00:16:34,900 --> 00:16:40,120
that to work inside of cloud foundry as

00:16:36,910 --> 00:16:42,100
a docker container inside of Diego a lot

00:16:40,120 --> 00:16:49,440
of challenges we we had trying to get

00:16:42,100 --> 00:16:49,440
get past that like

00:16:50,310 --> 00:16:57,130
check okay and docker has some nice

00:16:54,699 --> 00:16:59,410
features like dr. Campos the ability to

00:16:57,130 --> 00:17:01,480
describe multiple components of an

00:16:59,410 --> 00:17:03,519
application in a single descriptor and

00:17:01,480 --> 00:17:05,290
deploy the whole thing is one unit which

00:17:03,519 --> 00:17:07,329
is which was pretty nice so we have our

00:17:05,290 --> 00:17:08,980
own version of that we've had it for

00:17:07,329 --> 00:17:10,059
years we have our own descriptors that

00:17:08,980 --> 00:17:13,480
describe apps I'll get into that a

00:17:10,059 --> 00:17:15,370
little bit more detail so these are some

00:17:13,480 --> 00:17:17,079
of the things that the doctor and the

00:17:15,370 --> 00:17:20,049
containerization support that we had to

00:17:17,079 --> 00:17:21,819
work around or had to deal with a little

00:17:20,049 --> 00:17:24,250
bit about bill packs so very powerful

00:17:21,819 --> 00:17:25,900
concept you can take an arbitrary op and

00:17:24,250 --> 00:17:28,030
Cloud Foundry will understand it and

00:17:25,900 --> 00:17:29,860
provision a container for you based on

00:17:28,030 --> 00:17:32,950
on what your application is built from

00:17:29,860 --> 00:17:34,780
but we found that so very powerful but

00:17:32,950 --> 00:17:36,880
then if we needed to customize it at all

00:17:34,780 --> 00:17:38,860
we had to you know download this built

00:17:36,880 --> 00:17:40,990
pack code which is several thousand

00:17:38,860 --> 00:17:43,270
lines of Ruby code and we're we're a

00:17:40,990 --> 00:17:46,059
Java shop so suddenly we have to have

00:17:43,270 --> 00:17:47,620
Ruby expertise on board to understand

00:17:46,059 --> 00:17:49,750
what is inside this bill pack and how to

00:17:47,620 --> 00:17:51,669
maintain it and then issues like can we

00:17:49,750 --> 00:17:54,400
contribute that upstream our changes is

00:17:51,669 --> 00:17:57,460
it is it relevant things like that so it

00:17:54,400 --> 00:17:59,080
the build pack issue is just it was I'm

00:17:57,460 --> 00:18:00,940
still struggling I'd love to talk to

00:17:59,080 --> 00:18:03,040
people about how how you get around that

00:18:00,940 --> 00:18:06,159
issue of bill packs complexity and the

00:18:03,040 --> 00:18:08,200
massive code base to deal with it what

00:18:06,159 --> 00:18:11,650
what I've done in the past is just taken

00:18:08,200 --> 00:18:13,179
a you know if I need to do something

00:18:11,650 --> 00:18:15,190
really simple like Java and Tomcat and

00:18:13,179 --> 00:18:17,890
some specific customization like

00:18:15,190 --> 00:18:19,659
injecting some security thing you almost

00:18:17,890 --> 00:18:21,400
can just bypass the whole bill pack

00:18:19,659 --> 00:18:23,320
order the Java bill Pat can use a bash

00:18:21,400 --> 00:18:24,790
script like 20 lines of bash to do the

00:18:23,320 --> 00:18:27,840
same thing but I don't know if that's

00:18:24,790 --> 00:18:31,210
the recommended way anyway another thing

00:18:27,840 --> 00:18:34,470
so a lot of work is being done today for

00:18:31,210 --> 00:18:37,750
the you know the TCP router etc allowing

00:18:34,470 --> 00:18:41,950
non HTTP and on HTTP traffic to be

00:18:37,750 --> 00:18:43,360
routed through Cloud Foundry and you

00:18:41,950 --> 00:18:45,070
know back in the staccato days when I

00:18:43,360 --> 00:18:46,570
was with staccato we'd been working on

00:18:45,070 --> 00:18:49,059
that for a few years now it's been

00:18:46,570 --> 00:18:51,220
working quite well but with with this

00:18:49,059 --> 00:18:52,990
latest venture that was a limitation

00:18:51,220 --> 00:18:55,030
where we want to make sure we can deploy

00:18:52,990 --> 00:18:57,669
any workload whether it's HTTP or not

00:18:55,030 --> 00:19:01,000
and have it correctly routed to by the

00:18:57,669 --> 00:19:03,340
paths and you know ideally on our paths

00:19:01,000 --> 00:19:05,860
should support UDP as well

00:19:03,340 --> 00:19:08,170
and I'm not sure what the status I

00:19:05,860 --> 00:19:10,690
haven't checked usually of the weather

00:19:08,170 --> 00:19:14,080
the TCP router is if there's also a UDP

00:19:10,690 --> 00:19:15,340
router underway but our pass is having

00:19:14,080 --> 00:19:18,760
to deal with that outside of Cloud

00:19:15,340 --> 00:19:22,500
Foundry okay i'm assemblies is pretty

00:19:18,760 --> 00:19:25,620
interesting so i need to be able to take

00:19:22,500 --> 00:19:28,630
to describe a complex application

00:19:25,620 --> 00:19:30,760
topology with a single descriptor and

00:19:28,630 --> 00:19:32,230
again if you've used doctors so doctor

00:19:30,760 --> 00:19:33,880
compose is a really good example where

00:19:32,230 --> 00:19:35,770
you can have a multi-tier app or micro

00:19:33,880 --> 00:19:37,990
services base app with multiple

00:19:35,770 --> 00:19:40,330
components multiple services that makes

00:19:37,990 --> 00:19:42,520
up and describe them in a descriptor and

00:19:40,330 --> 00:19:45,730
then use docker compose to provision the

00:19:42,520 --> 00:19:47,530
whole thing as a single entity and these

00:19:45,730 --> 00:19:48,760
partitions for us they can include all

00:19:47,530 --> 00:19:51,360
sorts of things whether it's vendor

00:19:48,760 --> 00:19:54,070
software or standard 12 factor

00:19:51,360 --> 00:19:59,650
applications and services or a lot of

00:19:54,070 --> 00:20:01,030
our legacy apps cron jobs services that

00:19:59,650 --> 00:20:03,910
need to be up all the time all this

00:20:01,030 --> 00:20:06,190
stuff needs to be wired together

00:20:03,910 --> 00:20:08,440
described and wired together and and we

00:20:06,190 --> 00:20:09,730
use assemblies for that so twelve factor

00:20:08,440 --> 00:20:11,860
apps you know Cloud Foundry is really

00:20:09,730 --> 00:20:14,380
good at good at that and but that that's

00:20:11,860 --> 00:20:15,880
kind of the the easy part twelve factor

00:20:14,380 --> 00:20:17,980
apps there's stateless and they have

00:20:15,880 --> 00:20:19,120
standard ways to log and configuration

00:20:17,980 --> 00:20:20,920
and source code manage and all that

00:20:19,120 --> 00:20:23,170
stuff but we have all these other

00:20:20,920 --> 00:20:26,200
applications all these you can call them

00:20:23,170 --> 00:20:27,370
legacy apps but not necessarily legacy

00:20:26,200 --> 00:20:30,130
they're just not cloud native

00:20:27,370 --> 00:20:31,690
applications I guess and all of these

00:20:30,130 --> 00:20:34,750
apps need all this stuff the automation

00:20:31,690 --> 00:20:36,070
and versioning and scaling up and

00:20:34,750 --> 00:20:38,470
scaling down we need to be able to do

00:20:36,070 --> 00:20:41,230
that effectively for any category of

00:20:38,470 --> 00:20:45,520
application not just a web-based app or

00:20:41,230 --> 00:20:47,110
a 12 tier a 12 factor application so

00:20:45,520 --> 00:20:49,210
what we need is to be able to manage

00:20:47,110 --> 00:20:50,740
this from a single abstraction and we

00:20:49,210 --> 00:20:52,630
have what we call an assembly which is

00:20:50,740 --> 00:20:54,400
like a docker compose file which

00:20:52,630 --> 00:20:56,110
describes all the components of this

00:20:54,400 --> 00:20:59,230
application in a single place and then

00:20:56,110 --> 00:21:02,950
we can provision it this entire thing as

00:20:59,230 --> 00:21:04,960
a single entity things like dependency

00:21:02,950 --> 00:21:06,490
management on how can I get the latest

00:21:04,960 --> 00:21:08,980
version make sure it's the latest

00:21:06,490 --> 00:21:13,960
version of a service is tied to to a

00:21:08,980 --> 00:21:16,570
specific application I'll say a little

00:21:13,960 --> 00:21:17,170
bit more about that is you know micro

00:21:16,570 --> 00:21:19,060
services has

00:21:17,170 --> 00:21:20,890
great promise obviously ability to

00:21:19,060 --> 00:21:23,050
version your all your services

00:21:20,890 --> 00:21:25,600
independently but on certain

00:21:23,050 --> 00:21:28,480
applications with with very high

00:21:25,600 --> 00:21:30,250
requirements of veil ability where you

00:21:28,480 --> 00:21:32,080
know there's penalties incurred if your

00:21:30,250 --> 00:21:34,750
if your app is down for a minute lots of

00:21:32,080 --> 00:21:36,280
money penalties involved it's maybe a

00:21:34,750 --> 00:21:38,730
little too risky just to allow that

00:21:36,280 --> 00:21:42,250
micro service to evolve on its own right

00:21:38,730 --> 00:21:44,500
and so instead you have to be able to

00:21:42,250 --> 00:21:48,970
say while this application requires this

00:21:44,500 --> 00:21:50,530
micro Service version X Y Z I was gonna

00:21:48,970 --> 00:21:54,100
say that I should say Z since I'm in

00:21:50,530 --> 00:21:56,590
this country I want to be able to tie

00:21:54,100 --> 00:21:57,850
each application to specific versions of

00:21:56,590 --> 00:21:59,590
everything and that's what an assembly

00:21:57,850 --> 00:22:02,320
can be used for it's a this is my entire

00:21:59,590 --> 00:22:04,120
complex application and I can deploy it

00:22:02,320 --> 00:22:07,000
as a unit I conversion it as a unit I

00:22:04,120 --> 00:22:09,880
can roll it back as a unit so that's how

00:22:07,000 --> 00:22:11,680
something that we we have had to build

00:22:09,880 --> 00:22:13,360
outside of the power of Cloud Foundry

00:22:11,680 --> 00:22:15,940
and we've that's what we've been doing

00:22:13,360 --> 00:22:18,340
for several years another thing we need

00:22:15,940 --> 00:22:22,000
to look at is is like affinity or

00:22:18,340 --> 00:22:24,580
location awareness so if we have you

00:22:22,000 --> 00:22:26,590
know for many workloads and applications

00:22:24,580 --> 00:22:29,290
you need to have the data and the

00:22:26,590 --> 00:22:31,570
processing close together and Hadoop is

00:22:29,290 --> 00:22:34,330
a good example of that but at the

00:22:31,570 --> 00:22:36,970
ability to - I don't know partition your

00:22:34,330 --> 00:22:39,070
in to all your resources so that certain

00:22:36,970 --> 00:22:41,830
workloads get targeted at those

00:22:39,070 --> 00:22:44,080
resources hot cold storage so I might

00:22:41,830 --> 00:22:47,530
have this you know petabytes of storage

00:22:44,080 --> 00:22:49,150
that has very very long time to access

00:22:47,530 --> 00:22:50,950
it and then I have my smaller memory

00:22:49,150 --> 00:22:52,060
pool which is instant access and I need

00:22:50,950 --> 00:22:55,870
to be able to say you go over there and

00:22:52,060 --> 00:22:57,670
you go over there and we we need to be

00:22:55,870 --> 00:22:59,500
able to use our paths to say all this

00:22:57,670 --> 00:23:01,360
stuff so specify all these all these

00:22:59,500 --> 00:23:05,590
constraints same with specialized

00:23:01,360 --> 00:23:07,390
hardware GPUs and FPGAs etc our paths

00:23:05,590 --> 00:23:10,570
needs to be able to handle all this

00:23:07,390 --> 00:23:11,980
stuff shared local file system again I

00:23:10,570 --> 00:23:15,490
understand this is coming with cloud

00:23:11,980 --> 00:23:18,130
foundry if it's not already here but

00:23:15,490 --> 00:23:19,480
many of the apps that we do deploy we

00:23:18,130 --> 00:23:21,730
need to have the ability to share

00:23:19,480 --> 00:23:23,560
multiple multiple instances of the

00:23:21,730 --> 00:23:25,840
operating across the pads need to be

00:23:23,560 --> 00:23:27,580
able to share a filesystem easily and we

00:23:25,840 --> 00:23:28,750
need to be able to specify this in the

00:23:27,580 --> 00:23:32,530
descriptor or the assembly

00:23:28,750 --> 00:23:34,870
scripter pardon me

00:23:32,530 --> 00:23:37,600
single sign-on authentication so we have

00:23:34,870 --> 00:23:39,250
just huge infrastructure in place to

00:23:37,600 --> 00:23:40,660
deal with this and that says here lots

00:23:39,250 --> 00:23:42,700
of customers it means there's lots of

00:23:40,660 --> 00:23:44,710
people within and outside of the NY

00:23:42,700 --> 00:23:46,390
Mellon it will be authenticating to our

00:23:44,710 --> 00:23:48,400
systems in the powers is what's

00:23:46,390 --> 00:23:50,250
deploying these systems so it has to

00:23:48,400 --> 00:23:52,240
have some understanding of an

00:23:50,250 --> 00:23:55,510
integration with all these different

00:23:52,240 --> 00:23:57,040
authentication mechanisms so very

00:23:55,510 --> 00:23:58,720
complex and there's some that are very

00:23:57,040 --> 00:24:03,330
challenging to do so we have to do a lot

00:23:58,720 --> 00:24:05,620
of work on that third parties customers

00:24:03,330 --> 00:24:08,200
our whole stack whether it's ancient

00:24:05,620 --> 00:24:10,090
hardware or brand-new software and

00:24:08,200 --> 00:24:13,780
hardware has to be able to deal with all

00:24:10,090 --> 00:24:19,330
this ok secrets is an interesting topic

00:24:13,780 --> 00:24:21,580
as well how's my time ok um secret

00:24:19,330 --> 00:24:23,740
management is regulated and I've been a

00:24:21,580 --> 00:24:26,290
time companies in the past and I'm sure

00:24:23,740 --> 00:24:28,330
there's many many companies but whereas

00:24:26,290 --> 00:24:31,330
if I was a clever and malicious

00:24:28,330 --> 00:24:33,850
developer I could easily get into a

00:24:31,330 --> 00:24:35,500
database and look at things or even

00:24:33,850 --> 00:24:39,070
change things if I knew what I was doing

00:24:35,500 --> 00:24:41,470
I've I've been there and you know

00:24:39,070 --> 00:24:43,720
there's there's ways to get around that

00:24:41,470 --> 00:24:45,490
but we have to be just very precise on

00:24:43,720 --> 00:24:48,100
how we control secrets and making sure

00:24:45,490 --> 00:24:50,050
that secrets don't get in ever can never

00:24:48,100 --> 00:24:52,390
possibly get into the wrong hands so

00:24:50,050 --> 00:24:54,520
developers and deploy is just can never

00:24:52,390 --> 00:24:56,830
have an access access to a secret that

00:24:54,520 --> 00:24:59,470
provides access to some trusted or

00:24:56,830 --> 00:25:02,710
needing to be trusted resource some

00:24:59,470 --> 00:25:05,440
sensitive resource ok exposing secrets

00:25:02,710 --> 00:25:07,420
via the environment is kind of risky so

00:25:05,440 --> 00:25:09,670
we're looking at sophisticated secrets

00:25:07,420 --> 00:25:11,740
management techniques to get past that

00:25:09,670 --> 00:25:14,500
and just to say a little bit about trust

00:25:11,740 --> 00:25:17,020
on you know it's it might be it might

00:25:14,500 --> 00:25:19,090
seem to be a good thing to trust our

00:25:17,020 --> 00:25:21,160
developers you know Trust developers in

00:25:19,090 --> 00:25:22,480
general but in fact that's not a good

00:25:21,160 --> 00:25:26,110
thing and it's nothing about the

00:25:22,480 --> 00:25:29,980
developers myself as a developer I do

00:25:26,110 --> 00:25:32,740
not want to be burdened with the trust

00:25:29,980 --> 00:25:34,690
of secrets I never want to have a secret

00:25:32,740 --> 00:25:36,820
because if I have that secret and

00:25:34,690 --> 00:25:39,310
something happens you know suddenly I'm

00:25:36,820 --> 00:25:41,220
kind of I'm in I'm in there somehow

00:25:39,310 --> 00:25:43,020
whereas if I never had

00:25:41,220 --> 00:25:45,750
secret never even kind came close to it

00:25:43,020 --> 00:25:48,000
that I can do all my work so the pass

00:25:45,750 --> 00:25:49,200
has to be able to allow me to provision

00:25:48,000 --> 00:25:51,690
everything I need to and run everything

00:25:49,200 --> 00:25:54,360
I need to but without me ever getting my

00:25:51,690 --> 00:25:58,020
hands on that secret any part any

00:25:54,360 --> 00:26:00,690
portion of the whole sdlc and so we have

00:25:58,020 --> 00:26:03,929
to very carefully bake that into our

00:26:00,690 --> 00:26:07,890
paths it's just a fundamental tenet for

00:26:03,929 --> 00:26:09,480
the past okay so that's a few of the

00:26:07,890 --> 00:26:11,220
gaps with cloud foundry but as I said

00:26:09,480 --> 00:26:13,620
this isn't a cloud foundry bashing talk

00:26:11,220 --> 00:26:16,260
by any stretch there's a lot of really

00:26:13,620 --> 00:26:17,580
good things about cloud foundry and I'll

00:26:16,260 --> 00:26:19,830
just wrap up my talk by just covering

00:26:17,580 --> 00:26:21,510
these and briefly and I'm sure many of

00:26:19,830 --> 00:26:23,700
the talks here cover all of this stuff

00:26:21,510 --> 00:26:25,710
too but it's a very strong community as

00:26:23,700 --> 00:26:27,000
is evidenced by this by this conference

00:26:25,710 --> 00:26:30,240
and by how things have been going for

00:26:27,000 --> 00:26:31,650
the last three or four years here and we

00:26:30,240 --> 00:26:33,929
are using the open-source cloud foundry

00:26:31,650 --> 00:26:36,750
which gives us a lot of power as you can

00:26:33,929 --> 00:26:38,400
imagine really good for twelve factor

00:26:36,750 --> 00:26:40,590
apps really good for micro services

00:26:38,400 --> 00:26:42,720
really helped us with our hybrid cloud

00:26:40,590 --> 00:26:44,039
initiatives so we can take our apps and

00:26:42,720 --> 00:26:45,990
have them deployed across multiple

00:26:44,039 --> 00:26:49,530
clouds both internal and external

00:26:45,990 --> 00:26:51,690
you know jury AWS that kind of thing so

00:26:49,530 --> 00:26:54,270
that's the same point here it did allow

00:26:51,690 --> 00:26:55,260
us to do some pocs with docker there

00:26:54,270 --> 00:26:57,210
were as I said there were some

00:26:55,260 --> 00:26:59,159
limitations but we were able to really

00:26:57,210 --> 00:27:01,370
quickly provision docker containers into

00:26:59,159 --> 00:27:04,650
our paths using our cloud foundry

00:27:01,370 --> 00:27:06,840
integration many of the developers

00:27:04,650 --> 00:27:08,070
in-house that used cloud used our paths

00:27:06,840 --> 00:27:10,799
that had the cloud foundry and

00:27:08,070 --> 00:27:13,710
incorporation we're we're just pleased

00:27:10,799 --> 00:27:15,720
to put it mildly of how simple it is

00:27:13,710 --> 00:27:17,159
to provision apps when when you have

00:27:15,720 --> 00:27:20,490
cloud foundry taking care of all the

00:27:17,159 --> 00:27:21,570
heavy lifting the service broker car

00:27:20,490 --> 00:27:24,450
party service broker whole

00:27:21,570 --> 00:27:26,010
infrastructure we've been using that URL

00:27:24,450 --> 00:27:29,059
provisioning is really nice if you know

00:27:26,010 --> 00:27:31,500
the wildcard DNS well Cloud Foundry URL

00:27:29,059 --> 00:27:33,539
mechanisms it's really nice to for a

00:27:31,500 --> 00:27:37,320
developer to provision an app and that

00:27:33,539 --> 00:27:37,530
URL is instantly available that's a huge

00:27:37,320 --> 00:27:42,120
thing

00:27:37,530 --> 00:27:44,190
the logging this standard Cloud Foundry

00:27:42,120 --> 00:27:45,809
pitch which I'm really good at by the

00:27:44,190 --> 00:27:47,909
way I've done it for many years but I'm

00:27:45,809 --> 00:27:51,000
the logging the polymorphism ability to

00:27:47,909 --> 00:27:52,890
support multiple languages the security

00:27:51,000 --> 00:27:54,710
groups it has for isolating workloads

00:27:52,890 --> 00:27:56,600
and basically creating Network

00:27:54,710 --> 00:27:59,059
between between or partitioning networks

00:27:56,600 --> 00:28:01,549
between workloads the open source one we

00:27:59,059 --> 00:28:05,029
had no vendor lock-in and we had we had

00:28:01,549 --> 00:28:07,010
clouds so yeah no specific is tie is

00:28:05,029 --> 00:28:09,830
really that as far as from the from the

00:28:07,010 --> 00:28:11,899
higher level and it really helped with

00:28:09,830 --> 00:28:14,000
the separation of concerns who does what

00:28:11,899 --> 00:28:17,779
I'm out of time so I'm rushing a little

00:28:14,000 --> 00:28:20,899
bit yeah so there's a lot of things that

00:28:17,779 --> 00:28:22,340
cloud foundry did very well for us but

00:28:20,899 --> 00:28:24,350
we are continuing to use our existing

00:28:22,340 --> 00:28:26,179
paths because we have built it to

00:28:24,350 --> 00:28:28,610
support all these things I discussed at

00:28:26,179 --> 00:28:30,590
the beginning of this talk cloud foundry

00:28:28,610 --> 00:28:32,960
is a past component so when you push it

00:28:30,590 --> 00:28:35,330
up to our path it might in certain

00:28:32,960 --> 00:28:39,080
circumstances will push that will just

00:28:35,330 --> 00:28:40,460
pass it through to cloud foundry but you

00:28:39,080 --> 00:28:42,350
know so we'd be a single cloud foundry

00:28:40,460 --> 00:28:44,840
instance running across these data

00:28:42,350 --> 00:28:47,240
centers as opposed to kind of an uber

00:28:44,840 --> 00:28:49,940
thing that's where our pass comes in but

00:28:47,240 --> 00:28:52,220
it does very well with things it does it

00:28:49,940 --> 00:28:53,840
does Cloud Foundry deals with all the

00:28:52,220 --> 00:28:55,880
things that it's good at very well

00:28:53,840 --> 00:28:58,789
obviously and we are able to leverage

00:28:55,880 --> 00:29:00,440
that do I have a yeah so greatly

00:28:58,789 --> 00:29:02,510
simplified app deployment the

00:29:00,440 --> 00:29:04,309
descriptors are so much simpler as well

00:29:02,510 --> 00:29:06,140
so are out descriptors if we use Cloud

00:29:04,309 --> 00:29:08,630
Foundry for certain classes of apps we

00:29:06,140 --> 00:29:10,820
can simplify the descriptors and and the

00:29:08,630 --> 00:29:12,590
specification of those much faster to

00:29:10,820 --> 00:29:14,419
bring a developer on board to figure out

00:29:12,590 --> 00:29:16,610
how to provision an app to the paths to

00:29:14,419 --> 00:29:20,000
the cloud the URL provisioning I

00:29:16,610 --> 00:29:23,390
mentioned docker POC you know we can do

00:29:20,000 --> 00:29:28,159
some docker work with with Diego and the

00:29:23,390 --> 00:29:29,630
hybrid cloud so that's kind of the front

00:29:28,159 --> 00:29:32,179
of my talk I don't have time for

00:29:29,630 --> 00:29:33,950
questions unfortunately I will take it

00:29:32,179 --> 00:29:35,600
just a second to say that um we have a

00:29:33,950 --> 00:29:37,460
bunch of innovation centers around the

00:29:35,600 --> 00:29:40,309
globe doing some very innovative things

00:29:37,460 --> 00:29:42,500
and we are hiring and it's a very cool

00:29:40,309 --> 00:29:43,549
place to work so yeah I just I wanted to

00:29:42,500 --> 00:29:45,320
put that in there I mean if you're

00:29:43,549 --> 00:29:48,640
interested and go to this URL or come

00:29:45,320 --> 00:29:51,710
talk to me it's incredible the

00:29:48,640 --> 00:29:54,110
initiative to innovate is coming from

00:29:51,710 --> 00:29:55,429
the top and from across the organization

00:29:54,110 --> 00:29:57,740
and we're doing some incredible things

00:29:55,429 --> 00:30:01,490
I'll plug we are there's a panel

00:29:57,740 --> 00:30:04,580
discussion at 4:55 today for 450 I guess

00:30:01,490 --> 00:30:05,690
in ballroom B and it's finance and cloud

00:30:04,580 --> 00:30:06,110
basically is what we're going to talk

00:30:05,690 --> 00:30:07,970
we've got

00:30:06,110 --> 00:30:10,040
half-dozen people or so to discuss

00:30:07,970 --> 00:30:14,200
finance and clouds so come to that and

00:30:10,040 --> 00:30:14,200

YouTube URL: https://www.youtube.com/watch?v=HXp9_Y2rWCo


