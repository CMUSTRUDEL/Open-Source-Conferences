Title: Warner Music Group's Journey from Private to Public Cloud - Adam Chesterton & Renat Khasanshyn
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Ever wanted to know what it takes to stop a multi-data center roll out (MPLS-backed, pick-any-hardware, Cloud Foundry + Data Lakes) mid way, and begin an “all in” move to public cloud? 

The vision of composable enterprise at Warner Music Group lives on, with Cloud Foundry being the backbone of application factory churning out cloud-native applications using a swarm of microservices, paving the way for all-digital revenue sources. 
In this session, you will join us in the journey we are taking all the way from managed private cloud running Cloud Foundry and data services, to rethinking the economics of composable enterprise, to running on multiple availability zones at AWS. 

At the end of the journey, attendees will find themselves holding a 5-point lists of patterns and antipatterns, a practical 10-point tip sheet, and a sample “one pager” reference deployment architecture of highly available Cloud Foundry and surrounding data lakes on AWS. 

Adam Chesterton
Adam Chesterton is a Director of Engineering at Warner Music Group, where he is responsible for all things Cloud Foundry. Prior to WMG, Adam was Development Manager with Reuters. Prior to Reuters, Adam was Enterprise Analyst with GE Consumer Products.

Renat Khasanshyn
Renat Khasanshyn is CEO of Altoros and Venture Partner at Runa Capital. Renat's primary focus is bringing “software assembly lines” and "data lakes" into organizations through training, deployment and integration of solutions offered by the Cloud Foundry ecosystem. Renat is an active member of the Cloud Foundry Foundation Advisory Board and a frequent speaker at Cloud Foundry events. In the past, Renat has been selected as a finalist for the Emerging Executive of the Year award by the Massachusetts Technology Leadership Council and once won an IBM Business Mashup Challenge.
Captions: 
	00:00:00,030 --> 00:00:07,290
all right guys doing great great all

00:00:04,440 --> 00:00:11,190
right thank you very much everyone for

00:00:07,290 --> 00:00:12,780
coming here and I hope that you have an

00:00:11,190 --> 00:00:16,230
amazing day it's a great show for

00:00:12,780 --> 00:00:18,510
everyone and let me introduce Adam

00:00:16,230 --> 00:00:21,180
Chesterton director of engineering at

00:00:18,510 --> 00:00:24,269
the wari Music Group and I'm Renaud

00:00:21,180 --> 00:00:25,710
consumption without words and today

00:00:24,269 --> 00:00:30,960
we're going to share with you a journey

00:00:25,710 --> 00:00:32,399
that Adam myself and our teams some of

00:00:30,960 --> 00:00:35,790
you are here thank you very much we

00:00:32,399 --> 00:00:39,000
shared together and these lessons

00:00:35,790 --> 00:00:42,920
learned we would love to to share with

00:00:39,000 --> 00:00:45,629
you so thank you very much and thank you

00:00:42,920 --> 00:00:48,410
yes so basically we're going to talk

00:00:45,629 --> 00:00:50,730
today about one of music's group's

00:00:48,410 --> 00:00:53,250
recent paths over the last 12 months a

00:00:50,730 --> 00:00:54,930
few things have changed based on our

00:00:53,250 --> 00:00:57,750
cloud sort of strategy and we sort of

00:00:54,930 --> 00:00:59,460
came and adopted the public clouds so

00:00:57,750 --> 00:01:04,049
that's why I'm here to talk to you today

00:00:59,460 --> 00:01:06,360
about so to get started and I want to do

00:01:04,049 --> 00:01:07,380
is actually cast back 12 months from

00:01:06,360 --> 00:01:11,580
where we are today

00:01:07,380 --> 00:01:13,890
so from wmg Spain we were very early

00:01:11,580 --> 00:01:17,600
adopters of Cloud Foundry we've

00:01:13,890 --> 00:01:21,119
essentially been using it since 2011

00:01:17,600 --> 00:01:23,759
2012 we were at a point that we were

00:01:21,119 --> 00:01:27,330
like three years mature we use in the

00:01:23,759 --> 00:01:29,400
community version and I think we're

00:01:27,330 --> 00:01:31,409
still one of the largest organizations

00:01:29,400 --> 00:01:36,560
using the community version for

00:01:31,409 --> 00:01:39,540
production workloads today so basically

00:01:36,560 --> 00:01:41,939
growing about that 12 months so we

00:01:39,540 --> 00:01:45,000
basically we we were using multiple

00:01:41,939 --> 00:01:47,100
cloud providers some private some public

00:01:45,000 --> 00:01:49,890
we actually had a total 5 different

00:01:47,100 --> 00:01:51,509
providers we were using and by this

00:01:49,890 --> 00:01:53,490
point we had multiple business

00:01:51,509 --> 00:01:57,689
applications which were running on the

00:01:53,490 --> 00:02:01,350
platform using actual business sensitive

00:01:57,689 --> 00:02:03,329
workloads but then something happen and

00:02:01,350 --> 00:02:05,700
we sort of hit that sort of moment where

00:02:03,329 --> 00:02:08,849
we were in a really really crowded sort

00:02:05,700 --> 00:02:11,310
of space and we were rather than using

00:02:08,849 --> 00:02:13,350
multi cloud in terms of providers we

00:02:11,310 --> 00:02:16,610
sort of had like this hybrid

00:02:13,350 --> 00:02:18,690
cloud environmental sort of approach and

00:02:16,610 --> 00:02:21,180
the question we sort of asked ourselves

00:02:18,690 --> 00:02:24,330
is will we use in the cloud in the right

00:02:21,180 --> 00:02:27,060
way so we technically had our lower

00:02:24,330 --> 00:02:30,270
environments development and QA and

00:02:27,060 --> 00:02:33,060
testing in the public clouds and then in

00:02:30,270 --> 00:02:35,340
the private cloud we had our staging

00:02:33,060 --> 00:02:38,010
production and type environments across

00:02:35,340 --> 00:02:40,200
multiple different providers so we had

00:02:38,010 --> 00:02:44,580
actually managed to crack the way to

00:02:40,200 --> 00:02:46,950
rapidly build test deploy code into

00:02:44,580 --> 00:02:49,140
Cloud Foundry but then we actually

00:02:46,950 --> 00:02:50,970
started to experience some other issues

00:02:49,140 --> 00:02:56,970
and I'll ever and I'll talk about a few

00:02:50,970 --> 00:03:00,440
of those yeah great so when we first

00:02:56,970 --> 00:03:03,930
started getting the workloads to

00:03:00,440 --> 00:03:07,770
OpenStack based environment which was

00:03:03,930 --> 00:03:10,020
what managed OpenStack provider we

00:03:07,770 --> 00:03:13,800
suddenly realized that the environment

00:03:10,020 --> 00:03:17,310
is not as reliable as we hoped it would

00:03:13,800 --> 00:03:21,870
be and one of the biggest issue we we

00:03:17,310 --> 00:03:24,950
faced early on was the inconsistency of

00:03:21,870 --> 00:03:28,710
the OpenStack API when it comes to

00:03:24,950 --> 00:03:31,410
giving the boss the virtual machines the

00:03:28,710 --> 00:03:33,090
pool of resources to later then deploy

00:03:31,410 --> 00:03:36,660
the cloud foundry away and some of the

00:03:33,090 --> 00:03:39,690
bush components so sometimes we would

00:03:36,660 --> 00:03:41,070
request let's say 10 VMs most of the

00:03:39,690 --> 00:03:42,870
time would get all 10 but sometimes

00:03:41,070 --> 00:03:44,820
would get two or nothing at all

00:03:42,870 --> 00:03:48,060
so you would be wondering like what's

00:03:44,820 --> 00:03:52,800
going on so we try to get the answer

00:03:48,060 --> 00:03:55,260
ourselves and unfortunately the everyone

00:03:52,800 --> 00:03:58,770
in the game it was back in 2013

00:03:55,260 --> 00:04:01,860
early 14 when we started getting this

00:03:58,770 --> 00:04:05,040
environment stood up with the OpenStack

00:04:01,860 --> 00:04:08,250
provider every one of you knows who if

00:04:05,040 --> 00:04:11,310
you dealt with OpenStack it came a long

00:04:08,250 --> 00:04:13,800
way when it comes to maturity so back in

00:04:11,310 --> 00:04:16,410
2013 you can figure out how big a

00:04:13,800 --> 00:04:18,989
maturity of it was so we were having

00:04:16,410 --> 00:04:21,440
issues with the environment just like

00:04:18,989 --> 00:04:24,690
pretty much everybody else and

00:04:21,440 --> 00:04:26,590
unfortunately because the we hope that

00:04:24,690 --> 00:04:30,010
the managed provider would

00:04:26,590 --> 00:04:31,750
take care of that problem themselves but

00:04:30,010 --> 00:04:35,110
seems like no one had access to the

00:04:31,750 --> 00:04:38,410
proper logs ask them everybody right so

00:04:35,110 --> 00:04:42,550
we all were confused and we had to stand

00:04:38,410 --> 00:04:45,760
up the environment quickly so because of

00:04:42,550 --> 00:04:49,330
the uncertainty when it comes to getting

00:04:45,760 --> 00:04:55,510
those VMs from from OpenStack we face

00:04:49,330 --> 00:04:58,510
those issues early on then when we were

00:04:55,510 --> 00:05:00,940
actually able to get the the environment

00:04:58,510 --> 00:05:03,820
up and running we put provision Bush

00:05:00,940 --> 00:05:06,700
first and we would provision the Kofun

00:05:03,820 --> 00:05:10,590
we would would wash and everything seems

00:05:06,700 --> 00:05:15,400
perfect until we would get the timeouts

00:05:10,590 --> 00:05:17,620
unexpectedly out of nowhere and the

00:05:15,400 --> 00:05:21,330
problem was not just as much as oh yeah

00:05:17,620 --> 00:05:24,940
we get it time well stuff happens right

00:05:21,330 --> 00:05:26,740
the problem was that if you go back to

00:05:24,940 --> 00:05:29,590
what Adam said that remember we were

00:05:26,740 --> 00:05:33,039
coming from just the AWS only

00:05:29,590 --> 00:05:35,710
environment and for for us the OpenStack

00:05:33,039 --> 00:05:38,830
did these two regions that were going

00:05:35,710 --> 00:05:40,660
into OpenStack they were supposed to be

00:05:38,830 --> 00:05:42,099
the production the staging and

00:05:40,660 --> 00:05:44,320
production environments where the

00:05:42,099 --> 00:05:47,050
developers supposed to be using the lead

00:05:44,320 --> 00:05:49,750
the dev test environment NWS and then we

00:05:47,050 --> 00:05:52,630
would bring the applications from FWS

00:05:49,750 --> 00:05:56,440
into staging and then production the key

00:05:52,630 --> 00:05:58,360
problem that we had is that this these

00:05:56,440 --> 00:06:00,550
errors that the prime of the reason why

00:05:58,360 --> 00:06:04,690
we had those errors they did these

00:06:00,550 --> 00:06:06,430
timeouts it was it had to it had to do

00:06:04,690 --> 00:06:10,000
with the OpenStack itself it was a

00:06:06,430 --> 00:06:12,880
common issue that many operators of

00:06:10,000 --> 00:06:15,130
OpenStack at a time faced ultimately it

00:06:12,880 --> 00:06:17,770
was fixed by just with the next release

00:06:15,130 --> 00:06:19,690
of OpenStack and instead of trying to

00:06:17,770 --> 00:06:21,460
like patch it right well it was patched

00:06:19,690 --> 00:06:24,070
first but then the next release came out

00:06:21,460 --> 00:06:27,070
issues disappeared the key problem we

00:06:24,070 --> 00:06:29,710
had was not not the fact that we had

00:06:27,070 --> 00:06:32,289
issues you always have them the problem

00:06:29,710 --> 00:06:35,140
we experienced was that we could not get

00:06:32,289 --> 00:06:37,479
consistent results we're not testing the

00:06:35,140 --> 00:06:38,470
same thing because we we thought well

00:06:37,479 --> 00:06:41,320
funny would give us

00:06:38,470 --> 00:06:43,210
Oh like environments are now the same we

00:06:41,320 --> 00:06:45,870
can go from one cloud to another the

00:06:43,210 --> 00:06:49,360
reality was a little bit different so

00:06:45,870 --> 00:06:53,560
all these outside factors contributed to

00:06:49,360 --> 00:06:57,400
one key point where we could not

00:06:53,560 --> 00:06:59,730
guarantee a certain time of the week or

00:06:57,400 --> 00:07:03,160
day or in the future we would actually

00:06:59,730 --> 00:07:05,550
be ready for production deployment so

00:07:03,160 --> 00:07:08,170
all of these issues were ultimately

00:07:05,550 --> 00:07:11,620
resulted in the situations where we're

00:07:08,170 --> 00:07:14,680
like hey guys we can probably do it but

00:07:11,620 --> 00:07:18,790
we cannot promise anything so and that's

00:07:14,680 --> 00:07:22,270
what happened where the end users those

00:07:18,790 --> 00:07:24,220
business lines of business those

00:07:22,270 --> 00:07:26,410
developer groups that were bringing

00:07:24,220 --> 00:07:28,120
their applications and expected to have

00:07:26,410 --> 00:07:30,250
a reliable environment that they could

00:07:28,120 --> 00:07:32,650
go with production with they were like

00:07:30,250 --> 00:07:34,419
what's going on guys can you really give

00:07:32,650 --> 00:07:38,610
us something can you promise anything

00:07:34,419 --> 00:07:40,660
and with those completely unreliable

00:07:38,610 --> 00:07:42,490
unpredictable situations we could not

00:07:40,660 --> 00:07:46,510
promise everything and then obviously it

00:07:42,490 --> 00:07:48,490
wasn't good so oh thank you so yeah so

00:07:46,510 --> 00:07:50,230
we basically we did a big pause and a

00:07:48,490 --> 00:07:53,500
big sort of a reset and sort of took a

00:07:50,230 --> 00:07:55,120
look at the sort of strategy we had as

00:07:53,500 --> 00:07:57,970
renova sort of saying it was becoming

00:07:55,120 --> 00:08:02,290
hard to predict the unknown this whole

00:07:57,970 --> 00:08:04,990
hybrid environment cloud situation we

00:08:02,290 --> 00:08:06,970
were sort of in was basically impacting

00:08:04,990 --> 00:08:09,190
as we were sort of setting out deadlines

00:08:06,970 --> 00:08:10,720
for business and the new applications

00:08:09,190 --> 00:08:13,180
and for new projects that we were on

00:08:10,720 --> 00:08:14,919
boarding onto Cloud Foundry so do you

00:08:13,180 --> 00:08:17,080
take that sort of that area where you

00:08:14,919 --> 00:08:19,000
become over cautious in terms of your

00:08:17,080 --> 00:08:21,460
deliverables which really goes away

00:08:19,000 --> 00:08:23,350
against their the the power of what

00:08:21,460 --> 00:08:25,660
Cloud Foundry can do in terms of rapid

00:08:23,350 --> 00:08:28,120
deployment we or do you basically take a

00:08:25,660 --> 00:08:29,919
risk and think hey you know what it may

00:08:28,120 --> 00:08:32,919
be smooth it may not be and then you

00:08:29,919 --> 00:08:35,380
come into a very sticky situation with

00:08:32,919 --> 00:08:38,229
the business stakeholders so we actually

00:08:35,380 --> 00:08:39,849
found it wasn't code or anything that

00:08:38,229 --> 00:08:42,580
was causing us problems it was these

00:08:39,849 --> 00:08:44,200
external factors and look at this player

00:08:42,580 --> 00:08:46,450
at this point we basically had a

00:08:44,200 --> 00:08:48,040
platform that was three years mature and

00:08:46,450 --> 00:08:51,130
these sorts of things we shouldn't

00:08:48,040 --> 00:08:52,270
really be having we would talk with our

00:08:51,130 --> 00:08:55,360
vendors and

00:08:52,270 --> 00:08:57,250
we were using five every time we would

00:08:55,360 --> 00:08:59,110
have one of these sorts of issues and

00:08:57,250 --> 00:09:01,030
the recommendation that we kept coming

00:08:59,110 --> 00:09:04,420
back to us as we did the post-mortems

00:09:01,030 --> 00:09:07,540
was look you guys need to go one way or

00:09:04,420 --> 00:09:09,400
the other is and we basically didn't

00:09:07,540 --> 00:09:12,610
really have a compelling reason to stay

00:09:09,400 --> 00:09:14,620
with the model that we did so we took

00:09:12,610 --> 00:09:18,580
this pause and I reset and sort of think

00:09:14,620 --> 00:09:20,830
about our strategy that we had and then

00:09:18,580 --> 00:09:24,190
looking back over the last three years

00:09:20,830 --> 00:09:25,840
as we grew and as we expanded our actual

00:09:24,190 --> 00:09:28,720
Cloud Foundry presence within water

00:09:25,840 --> 00:09:30,850
music we actually retook a look at and

00:09:28,720 --> 00:09:34,780
saw how much the public cloud had

00:09:30,850 --> 00:09:37,380
actually evolved and adapted things such

00:09:34,780 --> 00:09:41,050
as like in terms of security reliability

00:09:37,380 --> 00:09:42,850
one of the things and and wmg years came

00:09:41,050 --> 00:09:46,120
to this conference multiple times and

00:09:42,850 --> 00:09:48,160
spoken about our cloud vision and one of

00:09:46,120 --> 00:09:50,920
the things that the reason we built the

00:09:48,160 --> 00:09:53,110
platform that we did was we expected the

00:09:50,920 --> 00:09:55,870
price of compute and disk space to

00:09:53,110 --> 00:09:58,080
decrease over time and with the with the

00:09:55,870 --> 00:10:00,460
price wars between the multiple public

00:09:58,080 --> 00:10:02,860
cloud providers that's exactly what

00:10:00,460 --> 00:10:05,020
happened but one thing we did start to

00:10:02,860 --> 00:10:07,180
see was the reliability side of the

00:10:05,020 --> 00:10:10,930
public cloud actually started to

00:10:07,180 --> 00:10:15,250
increase and because we had this hybrid

00:10:10,930 --> 00:10:18,040
cloud environment we started seeing from

00:10:15,250 --> 00:10:22,240
our lower environments have very similar

00:10:18,040 --> 00:10:26,260
if not comparable uptime to our managed

00:10:22,240 --> 00:10:28,510
private cloud providers which going back

00:10:26,260 --> 00:10:30,340
three or four years was just not the

00:10:28,510 --> 00:10:32,860
case

00:10:30,340 --> 00:10:34,510
so we basically went and we did a

00:10:32,860 --> 00:10:39,430
comparison you want to talk through some

00:10:34,510 --> 00:10:44,470
of this if we didn't oh yeah so first of

00:10:39,430 --> 00:10:46,570
all the the challenges that we had we're

00:10:44,470 --> 00:10:49,180
not just what they just described

00:10:46,570 --> 00:10:52,510
remember we're talking back about like

00:10:49,180 --> 00:10:54,430
this whole story started in 2013 right

00:10:52,510 --> 00:10:55,600
when just like how many of you guys

00:10:54,430 --> 00:10:57,820
actually I have a question how many of

00:10:55,600 --> 00:11:01,270
you attended the 2013 event right here

00:10:57,820 --> 00:11:04,570
in in in this very building the first

00:11:01,270 --> 00:11:05,480
call foundry so see any sorry a quite a

00:11:04,570 --> 00:11:09,560
few

00:11:05,480 --> 00:11:12,829
so if you remember we had one of the

00:11:09,560 --> 00:11:15,140
great early visionaries and evangelists

00:11:12,829 --> 00:11:18,500
of foundry Jonathan Moria for a music

00:11:15,140 --> 00:11:21,410
group fried he was very passionate about

00:11:18,500 --> 00:11:23,959
making coffe Andre worked to make the

00:11:21,410 --> 00:11:28,510
composable enterprise and and get the

00:11:23,959 --> 00:11:31,610
agility into an organization so we faced

00:11:28,510 --> 00:11:34,250
not just issues we're talking about with

00:11:31,610 --> 00:11:38,089
OpenStack we also were coming off from

00:11:34,250 --> 00:11:40,250
California 1.0 and we've had like we had

00:11:38,089 --> 00:11:42,920
a bunch of components that were

00:11:40,250 --> 00:11:46,940
customized like a sheep proxy router and

00:11:42,920 --> 00:11:51,410
it was like a a bunch of stuff like it

00:11:46,940 --> 00:11:55,339
became a snowball so and then add five

00:11:51,410 --> 00:11:59,000
six cloud providers to it you have many

00:11:55,339 --> 00:12:01,310
more problems than you have hands so we

00:11:59,000 --> 00:12:05,810
were at the situation where we wanted to

00:12:01,310 --> 00:12:11,180
simplify the the risk areas kind of our

00:12:05,810 --> 00:12:13,640
risk profile and that's why coming back

00:12:11,180 --> 00:12:16,070
to an environment that would be reliable

00:12:13,640 --> 00:12:19,010
that would allow ask the team

00:12:16,070 --> 00:12:22,010
responsible for cloth laundry to to

00:12:19,010 --> 00:12:25,040
promise to the business user that yes

00:12:22,010 --> 00:12:27,550
that is the date and instead stay behind

00:12:25,040 --> 00:12:30,380
it and that was one of the key benefits

00:12:27,550 --> 00:12:33,850
that we were seeking the reliability and

00:12:30,380 --> 00:12:38,510
be able to stay true to our promises so

00:12:33,850 --> 00:12:41,300
with with the public cloud side that so

00:12:38,510 --> 00:12:43,250
now we we we sat back we looked we

00:12:41,300 --> 00:12:45,500
looked we did the comparisons we did the

00:12:43,250 --> 00:12:47,390
sort of thing we took this on board and

00:12:45,500 --> 00:12:51,079
we came to the conclusion that we wanted

00:12:47,390 --> 00:12:53,870
to go public cloud all the way and that

00:12:51,079 --> 00:12:55,910
was not as simple as what we thought as

00:12:53,870 --> 00:12:58,370
I'd mentioned a couple times we already

00:12:55,910 --> 00:13:00,620
had infrastructure there but we didn't

00:12:58,370 --> 00:13:02,120
really want to just take what we had in

00:13:00,620 --> 00:13:04,459
the public cloud and just move it

00:13:02,120 --> 00:13:07,040
straight into sort of the exact same

00:13:04,459 --> 00:13:08,600
model that we had we're three years

00:13:07,040 --> 00:13:10,160
mature at this point and we wanted to

00:13:08,600 --> 00:13:12,320
take advantage of some of the changes

00:13:10,160 --> 00:13:15,760
and enhancements that's happened within

00:13:12,320 --> 00:13:19,230
the public cloud so what did we do next

00:13:15,760 --> 00:13:21,660
we actually went out and

00:13:19,230 --> 00:13:23,700
we wanted to we spoke with AWS

00:13:21,660 --> 00:13:26,310
architects and talked about ways how we

00:13:23,700 --> 00:13:29,280
could take advantage of things like VP

00:13:26,310 --> 00:13:32,010
czl B's direct connects multi

00:13:29,280 --> 00:13:34,320
availability zones and how we could

00:13:32,010 --> 00:13:36,360
actually provide a model for all of our

00:13:34,320 --> 00:13:38,580
environments and basically look to

00:13:36,360 --> 00:13:41,280
rebuild everything from scratch so

00:13:38,580 --> 00:13:44,550
automation for us was actually extremely

00:13:41,280 --> 00:13:46,230
important so we worked and worked very

00:13:44,550 --> 00:13:49,290
hard to actually get things like

00:13:46,230 --> 00:13:51,420
CloudFormation to build out a sort of a

00:13:49,290 --> 00:13:53,460
foundation of Cloud Foundry and then

00:13:51,420 --> 00:13:55,800
basically using Bosh on top of there in

00:13:53,460 --> 00:13:57,750
order to deploy the applications and do

00:13:55,800 --> 00:14:01,470
that across all of the environments that

00:13:57,750 --> 00:14:03,060
we had security was of course a really

00:14:01,470 --> 00:14:05,280
really big factor and there's been so

00:14:03,060 --> 00:14:06,900
much enhancements in the security sort

00:14:05,280 --> 00:14:10,320
of remit of the public cloud over the

00:14:06,900 --> 00:14:12,780
last few years so we got a bunch of our

00:14:10,320 --> 00:14:14,760
colleagues when to reinvent last year

00:14:12,780 --> 00:14:17,280
with the purpose of actually trying to

00:14:14,760 --> 00:14:19,440
find partners to help us with this

00:14:17,280 --> 00:14:21,210
challenge and I think one of the things

00:14:19,440 --> 00:14:23,190
that sort of came out that's very clear

00:14:21,210 --> 00:14:25,770
there are a lot of people in the space

00:14:23,190 --> 00:14:27,570
this is a real problem out there in

00:14:25,770 --> 00:14:29,550
terms of people need help in terms of

00:14:27,570 --> 00:14:33,150
like if I take something on my own and

00:14:29,550 --> 00:14:35,400
go down the public cloud route I I need

00:14:33,150 --> 00:14:38,310
help if I go to a managed service I get

00:14:35,400 --> 00:14:40,680
all that as part of the cost I get so

00:14:38,310 --> 00:14:43,470
it's a popular trend and we basically

00:14:40,680 --> 00:14:45,060
went and listened aligned ourselves with

00:14:43,470 --> 00:14:47,430
the right partner that we needed that

00:14:45,060 --> 00:14:50,400
fitted the business and operating model

00:14:47,430 --> 00:14:51,990
that we had also another thing that was

00:14:50,400 --> 00:14:54,600
very important to us was actually the

00:14:51,990 --> 00:14:57,300
upgrade path of cloud foundry we're very

00:14:54,600 --> 00:15:00,120
excited about Diego we wanted to move to

00:14:57,300 --> 00:15:02,970
that and actually building up resiliency

00:15:00,120 --> 00:15:04,770
within cloud foundry which was something

00:15:02,970 --> 00:15:08,220
we really had to do to move into this

00:15:04,770 --> 00:15:09,900
multi availability zone model and we

00:15:08,220 --> 00:15:11,730
wanted to make sure that we actually had

00:15:09,900 --> 00:15:13,710
a path that we could stay in line with

00:15:11,730 --> 00:15:16,680
upgrades and take advantage of some of

00:15:13,710 --> 00:15:19,980
the great stuff that's coming up so this

00:15:16,680 --> 00:15:22,470
whole entire project kicked off around

00:15:19,980 --> 00:15:25,170
at the beginning of last summer and we

00:15:22,470 --> 00:15:29,370
actually fully completed it in February

00:15:25,170 --> 00:15:32,450
this year so a couple of the lessons

00:15:29,370 --> 00:15:35,550
learned you did yeah

00:15:32,450 --> 00:15:39,360
well first of all being able to promise

00:15:35,550 --> 00:15:41,880
to the lines of businesses when they can

00:15:39,360 --> 00:15:43,560
get their applications into the

00:15:41,880 --> 00:15:45,860
environments and what kind of service

00:15:43,560 --> 00:15:48,690
levels that they can expect is a

00:15:45,860 --> 00:15:54,720
gigantic advantage if you are operating

00:15:48,690 --> 00:15:58,440
with multiple consumers and and the

00:15:54,720 --> 00:16:02,820
price that as a result we were willing

00:15:58,440 --> 00:16:04,800
to pay for having that that expectations

00:16:02,820 --> 00:16:07,500
on availability on reliability about

00:16:04,800 --> 00:16:09,360
what we can promise is actually was much

00:16:07,500 --> 00:16:12,029
higher that we were willing to pay

00:16:09,360 --> 00:16:13,800
individual right initially with that all

00:16:12,029 --> 00:16:16,520
we're gonna call firing and they take

00:16:13,800 --> 00:16:21,959
care of it but it wasn't the case so

00:16:16,520 --> 00:16:24,330
controlling costs was also an issue Adam

00:16:21,959 --> 00:16:27,300
didn't speak on this but I can just add

00:16:24,330 --> 00:16:30,180
a little bit that we are not gonna stop

00:16:27,300 --> 00:16:33,540
here we're also looking into some very

00:16:30,180 --> 00:16:36,839
seemingly cool ways to control cost when

00:16:33,540 --> 00:16:40,350
it comes to public cloud we even go all

00:16:36,839 --> 00:16:42,420
the way to even look at the the spot

00:16:40,350 --> 00:16:45,060
instances how we can use them for some

00:16:42,420 --> 00:16:48,200
of the DA working and but now back to

00:16:45,060 --> 00:16:50,850
Adam for the cross what we actually did

00:16:48,200 --> 00:16:53,040
absolutely I mean like cost is of course

00:16:50,850 --> 00:16:54,959
very important by coming from a music

00:16:53,040 --> 00:16:59,120
company the music industry is just not

00:16:54,959 --> 00:17:01,650
what it was 10 20 30 plus years ago so

00:16:59,120 --> 00:17:03,690
glucose is actually a really important

00:17:01,650 --> 00:17:05,970
factor to us because every dollar we're

00:17:03,690 --> 00:17:08,959
spending is a dollar we're not spending

00:17:05,970 --> 00:17:13,350
on artisan are finding new artists

00:17:08,959 --> 00:17:15,059
marketing and we have a commitment back

00:17:13,350 --> 00:17:17,429
to the company to make sure that we're

00:17:15,059 --> 00:17:19,500
spending the company's money in the

00:17:17,429 --> 00:17:21,300
right way so one of the things we

00:17:19,500 --> 00:17:22,980
learned especially during the migrations

00:17:21,300 --> 00:17:25,770
I think we really really factored in

00:17:22,980 --> 00:17:27,390
place was when you're spinning up new

00:17:25,770 --> 00:17:28,860
environments you're gonna run for a

00:17:27,390 --> 00:17:31,950
period of time of parallel

00:17:28,860 --> 00:17:36,210
infrastructure up there and in terms of

00:17:31,950 --> 00:17:38,130
really excellent planning and testing we

00:17:36,210 --> 00:17:40,860
actually minimize the amount of time

00:17:38,130 --> 00:17:43,140
that we had both environments up we had

00:17:40,860 --> 00:17:44,880
them up we had the ability to test spun

00:17:43,140 --> 00:17:46,920
things down spun things back

00:17:44,880 --> 00:17:49,350
and it allowed us to really manage our

00:17:46,920 --> 00:17:51,360
costs so that we weren't running with

00:17:49,350 --> 00:17:54,540
basically two production environments

00:17:51,360 --> 00:17:56,340
for a considerable amount of time and

00:17:54,540 --> 00:17:58,350
also we've talked a lot especially after

00:17:56,340 --> 00:18:00,650
the migration in terms of utilizing

00:17:58,350 --> 00:18:04,140
things such as reserved instances and

00:18:00,650 --> 00:18:08,250
for those services and that are

00:18:04,140 --> 00:18:11,910
basically up 24 by 7 5 or 7 days a week

00:18:08,250 --> 00:18:13,590
is a case of like taking the reserved

00:18:11,910 --> 00:18:16,050
instance approach helps us to easily

00:18:13,590 --> 00:18:18,480
save forty to sixty percent based on on

00:18:16,050 --> 00:18:23,450
two-man pricing but one of the beauties

00:18:18,480 --> 00:18:26,280
of both Cloud Foundry and using the AWS

00:18:23,450 --> 00:18:29,550
economics is a case of I can basically

00:18:26,280 --> 00:18:32,360
have all my de A's as reserved instances

00:18:29,550 --> 00:18:35,280
and if I need more capacity I can spend

00:18:32,360 --> 00:18:37,530
another de a up very very quickly on

00:18:35,280 --> 00:18:40,200
demand I'm not committed on paying as I

00:18:37,530 --> 00:18:43,350
go but if I find I don't need to recover

00:18:40,200 --> 00:18:45,180
that capacity if actually it's the case

00:18:43,350 --> 00:18:47,310
that they do need to as I'm boarding

00:18:45,180 --> 00:18:49,650
more applications if I'm finding in the

00:18:47,310 --> 00:18:51,600
long term I do need this capacity I can

00:18:49,650 --> 00:18:54,300
just convert that immediately to

00:18:51,600 --> 00:18:56,520
reserved instance pricing and I get

00:18:54,300 --> 00:18:58,590
those benefits is from from an

00:18:56,520 --> 00:19:00,990
accounting thing it it means that we can

00:18:58,590 --> 00:19:04,680
be very creative and actually make sure

00:19:00,990 --> 00:19:07,410
that we're spending money well so from a

00:19:04,680 --> 00:19:09,510
wmg perspective this whole initiative

00:19:07,410 --> 00:19:11,820
that we had and it was a good nine

00:19:09,510 --> 00:19:14,790
months sort of initiative was what was

00:19:11,820 --> 00:19:16,380
the immediate benefits back and for us

00:19:14,790 --> 00:19:18,150
one of the big things is we actually

00:19:16,380 --> 00:19:21,570
accomplished what we actually wanted to

00:19:18,150 --> 00:19:24,240
do by moving solely into the public

00:19:21,570 --> 00:19:26,370
cloud we've actually removed this this

00:19:24,240 --> 00:19:28,620
whole random unknowns that kept

00:19:26,370 --> 00:19:29,970
happening it actually means that when

00:19:28,620 --> 00:19:32,010
we're talking with the business and

00:19:29,970 --> 00:19:36,120
setting expectations we can be

00:19:32,010 --> 00:19:37,890
significantly more more accurate one of

00:19:36,120 --> 00:19:40,650
the best lesson learns that from the

00:19:37,890 --> 00:19:42,570
actual entire project as well as we

00:19:40,650 --> 00:19:45,000
actually migrated with absolutely no

00:19:42,570 --> 00:19:46,290
disruption to the business users or

00:19:45,000 --> 00:19:48,840
applications it was extremely

00:19:46,290 --> 00:19:51,750
transparent to them and that was mainly

00:19:48,840 --> 00:19:54,480
down to the planning the testing the UAT

00:19:51,750 --> 00:19:54,990
and actually testing the migration

00:19:54,480 --> 00:19:57,690
multiple

00:19:54,990 --> 00:20:00,720
times before we actually performed it so

00:19:57,690 --> 00:20:03,620
we didn't disrupt SaaS or anything

00:20:00,720 --> 00:20:06,540
around those lines and for the end users

00:20:03,620 --> 00:20:08,190
performances is the same we have the

00:20:06,540 --> 00:20:11,010
author metrics we've done all that sort

00:20:08,190 --> 00:20:13,170
of testing in place and in some ways the

00:20:11,010 --> 00:20:15,470
SLA is actually improved because we can

00:20:13,170 --> 00:20:17,550
now give better commitments so when

00:20:15,470 --> 00:20:19,620
business users come to us and want

00:20:17,550 --> 00:20:21,540
functionality we've got a much better

00:20:19,620 --> 00:20:27,929
sense of the whole end-to-end of what

00:20:21,540 --> 00:20:31,140
happens so a few lessons we learned on

00:20:27,929 --> 00:20:33,720
the elasticity and is that apparently

00:20:31,140 --> 00:20:37,440
public cloud is not as elastic as you

00:20:33,720 --> 00:20:39,720
may think of it so what we experienced

00:20:37,440 --> 00:20:42,440
is that when if let's say you need X

00:20:39,720 --> 00:20:46,440
number of instances of a certain type

00:20:42,440 --> 00:20:48,720
things like it may seem like AWS is like

00:20:46,440 --> 00:20:51,480
infinite pool of resources but when you

00:20:48,720 --> 00:20:55,320
cannot get them even like what's going

00:20:51,480 --> 00:20:58,550
on and the reality is that it's not as

00:20:55,320 --> 00:21:02,040
elastic as you might think it is because

00:20:58,550 --> 00:21:05,179
if you are using instances of a certain

00:21:02,040 --> 00:21:08,490
type and you need a lot of them

00:21:05,179 --> 00:21:12,900
sometimes you may need to talk to folks

00:21:08,490 --> 00:21:15,360
at AWS to make sure it's there if it's

00:21:12,900 --> 00:21:17,700
gonna be they're pretty reserved and so

00:21:15,360 --> 00:21:20,820
on and so forth and what we learn is

00:21:17,700 --> 00:21:23,120
that if your workloads are not subject

00:21:20,820 --> 00:21:26,640
to extreme sparks

00:21:23,120 --> 00:21:29,070
sometimes the elasticity you get in the

00:21:26,640 --> 00:21:30,900
managed private cloud that's managed by

00:21:29,070 --> 00:21:34,290
the vendor it may be as the last

00:21:30,900 --> 00:21:36,870
thickness you want right and so unless

00:21:34,290 --> 00:21:39,510
you you were flexible in terms of the

00:21:36,870 --> 00:21:44,760
types of instances you are using keep

00:21:39,510 --> 00:21:48,150
keep that in mind and overall we we we

00:21:44,760 --> 00:21:52,860
find it really great to work with public

00:21:48,150 --> 00:21:56,100
cloud provider such as AWS however what

00:21:52,860 --> 00:21:59,460
we find is that some of the services

00:21:56,100 --> 00:22:03,570
that might be some of the services look

00:21:59,460 --> 00:22:05,760
extremely tempting to end-users and they

00:22:03,570 --> 00:22:07,550
start looking at them and what we learn

00:22:05,760 --> 00:22:09,080
is that sometimes there

00:22:07,550 --> 00:22:13,460
production-grade because they might be

00:22:09,080 --> 00:22:15,710
very new so what I wanted to maybe Adam

00:22:13,460 --> 00:22:17,390
can you show absolutely this I mean a

00:22:15,710 --> 00:22:19,010
couple of examples that we sort of had

00:22:17,390 --> 00:22:21,430
here especially around the elasticity

00:22:19,010 --> 00:22:23,990
especially if you don't have reserved

00:22:21,430 --> 00:22:25,700
instances when you're in the the private

00:22:23,990 --> 00:22:28,430
clouds you can have as much elasticity

00:22:25,700 --> 00:22:29,600
as you pay for in the public lab one of

00:22:28,430 --> 00:22:31,370
the things that we learn very quickly

00:22:29,600 --> 00:22:33,170
was and especially if you start talking

00:22:31,370 --> 00:22:35,360
about things like spot instances and

00:22:33,170 --> 00:22:37,700
other things if you're buying on demand

00:22:35,360 --> 00:22:40,820
and you have a very specific instance

00:22:37,700 --> 00:22:42,620
like that you're after you you you

00:22:40,820 --> 00:22:43,280
cannot guarantee that that is always

00:22:42,620 --> 00:22:45,230
going to be there

00:22:43,280 --> 00:22:46,880
AWS may come round to me and say hey I

00:22:45,230 --> 00:22:49,250
do not have it in this region but I

00:22:46,880 --> 00:22:50,720
could throw you it somewhere else so I

00:22:49,250 --> 00:22:52,640
guess one thing for the sort of future

00:22:50,720 --> 00:22:55,070
as you're building applications and

00:22:52,640 --> 00:22:57,320
going down that sort of model and in

00:22:55,070 --> 00:23:00,260
terms of trying to be flexible in terms

00:22:57,320 --> 00:23:02,060
of the instance types you're using and

00:23:00,260 --> 00:23:04,340
if you do need a guarantee if you have a

00:23:02,060 --> 00:23:06,860
process that you run every night and you

00:23:04,340 --> 00:23:08,870
need x value build the applications to

00:23:06,860 --> 00:23:14,200
either scale based on the instance type

00:23:08,870 --> 00:23:17,210
and size that you get back so yeah and

00:23:14,200 --> 00:23:19,940
for those of you who would like to dig

00:23:17,210 --> 00:23:21,620
much deeper into the details and get

00:23:19,940 --> 00:23:22,700
some of the lessons luring that you can

00:23:21,620 --> 00:23:25,520
take home

00:23:22,700 --> 00:23:27,110
we have prepared a hangout can we get a

00:23:25,520 --> 00:23:30,560
few copies right there and I'll actually

00:23:27,110 --> 00:23:34,760
help distribute them so we put together

00:23:30,560 --> 00:23:38,450
a lot of resources here essentially it's

00:23:34,760 --> 00:23:40,580
a reference architecture for something

00:23:38,450 --> 00:23:43,640
as simple as east and west

00:23:40,580 --> 00:23:48,680
AWS regions and you have laFonda in each

00:23:43,640 --> 00:23:51,530
we have the de patterns and anti

00:23:48,680 --> 00:23:53,840
patterns the five of each five patterns

00:23:51,530 --> 00:23:56,240
and five anti patterns and we also

00:23:53,840 --> 00:24:00,590
prepared a list over what it seems like

00:23:56,240 --> 00:24:02,900
ten keeps in several categories that's

00:24:00,590 --> 00:24:05,960
so ten different problems and there are

00:24:02,900 --> 00:24:11,090
ten suggested solutions so we hope that

00:24:05,960 --> 00:24:15,680
you will enjoy reading about this and if

00:24:11,090 --> 00:24:18,500
you if some of you may use it in your

00:24:15,680 --> 00:24:20,430
real work will be extremely happy to

00:24:18,500 --> 00:24:23,280
help some of you

00:24:20,430 --> 00:24:26,370
pass around the knowledge and overall

00:24:23,280 --> 00:24:28,080
thank you very much for using club funny

00:24:26,370 --> 00:24:30,960
because all together we're very strong

00:24:28,080 --> 00:24:32,970
and hopefully we will have many more key

00:24:30,960 --> 00:24:36,540
studies in the in the coming years on

00:24:32,970 --> 00:24:38,580
different use cases of core Ponzi right

00:24:36,540 --> 00:24:40,800
and thank you and and with that I'm

00:24:38,580 --> 00:24:48,660
alternate I have a tiny questions anyone

00:24:40,800 --> 00:24:50,940
may have four do you feel confident than

00:24:48,660 --> 00:24:54,120
if you decided to move from AWS to Azure

00:24:50,940 --> 00:24:55,590
to wherever that you'd be able to do

00:24:54,120 --> 00:24:56,850
that and what kind of time frame do you

00:24:55,590 --> 00:24:58,230
think that you'd be up against yeah I

00:24:56,850 --> 00:25:01,920
think that's actually a really really

00:24:58,230 --> 00:25:04,140
great for crack questions so as I sort

00:25:01,920 --> 00:25:06,270
of I've sent say essentially over the

00:25:04,140 --> 00:25:09,030
course of the last few years has been

00:25:06,270 --> 00:25:11,400
rapid change across all the public class

00:25:09,030 --> 00:25:12,570
sorry I didn't want to pacifically name

00:25:11,400 --> 00:25:14,880
ones we're using eight of us

00:25:12,570 --> 00:25:18,060
environments I think was cleared between

00:25:14,880 --> 00:25:19,440
Google and as your is that there's a lot

00:25:18,060 --> 00:25:22,440
of competition and they're trying to

00:25:19,440 --> 00:25:25,020
keep level of that's helping on price

00:25:22,440 --> 00:25:27,090
but it's also comparable and so you take

00:25:25,020 --> 00:25:29,580
something like as your which has very

00:25:27,090 --> 00:25:34,200
much adopted Cloud Foundry there as well

00:25:29,580 --> 00:25:35,610
with running on the AWS model we did had

00:25:34,200 --> 00:25:38,750
to spend a lot of time working with

00:25:35,610 --> 00:25:40,980
CloudFormation and the AWS tool sets and

00:25:38,750 --> 00:25:43,440
the the sort of thing I would sort of

00:25:40,980 --> 00:25:45,090
look at is is a case of like there's

00:25:43,440 --> 00:25:47,880
lots of options out there so if we

00:25:45,090 --> 00:25:49,890
wanted to go down that sort of path we

00:25:47,880 --> 00:25:51,660
absolutely could I think it's sort of

00:25:49,890 --> 00:25:53,970
the same sort of challenges that I put

00:25:51,660 --> 00:25:55,890
on the learning things around security

00:25:53,970 --> 00:25:58,410
is probably still one of the the biggest

00:25:55,890 --> 00:26:00,330
sort of areas and they do things

00:25:58,410 --> 00:26:03,450
slightly different have different terms

00:26:00,330 --> 00:26:06,570
but we could take the model and move

00:26:03,450 --> 00:26:10,050
there if we so wished so one of the

00:26:06,570 --> 00:26:13,350
keeps in the operating keeps when public

00:26:10,050 --> 00:26:16,550
private clouds in fact is is a number

00:26:13,350 --> 00:26:18,960
number nine which is a provision with

00:26:16,550 --> 00:26:22,740
infrastructure service native service so

00:26:18,960 --> 00:26:25,890
we prepared the environments in Natal us

00:26:22,740 --> 00:26:28,830
with confirmations so that and it seems

00:26:25,890 --> 00:26:32,430
to become like a like a normal practice

00:26:28,830 --> 00:26:33,840
nowadays compared to just a couple of

00:26:32,430 --> 00:26:35,970
years ago where

00:26:33,840 --> 00:26:37,980
you would try to use borscht for that

00:26:35,970 --> 00:26:40,529
right and so now we've kind of prepared

00:26:37,980 --> 00:26:43,549
the environments and then bush goes to

00:26:40,529 --> 00:26:48,230
work right so that's tip number nine and

00:26:43,549 --> 00:26:52,020
ditch I would add to this is that the

00:26:48,230 --> 00:26:56,039
the differences in the not just

00:26:52,020 --> 00:27:00,120
performance but also the some of the

00:26:56,039 --> 00:27:02,159
like storage service object store like

00:27:00,120 --> 00:27:03,990
you may have some dependencies that not

00:27:02,159 --> 00:27:06,870
necessarily in the cloth hungry space

00:27:03,990 --> 00:27:09,179
but where you may want to cross-check

00:27:06,870 --> 00:27:11,279
what do you use and this what we

00:27:09,179 --> 00:27:13,320
experienced is that it's very tempting

00:27:11,279 --> 00:27:17,250
for some developer teams to start using

00:27:13,320 --> 00:27:20,250
a new service from AWS Adam you you said

00:27:17,250 --> 00:27:22,350
the other day that it wasn't very do you

00:27:20,250 --> 00:27:24,179
remember yeah we're so we had a

00:27:22,350 --> 00:27:25,350
situation coming out of reinvent this

00:27:24,179 --> 00:27:27,539
year so one of the great things about

00:27:25,350 --> 00:27:30,600
AWS is they had lots of native services

00:27:27,539 --> 00:27:32,330
and I took a lot with the account teams

00:27:30,600 --> 00:27:35,220
that we have there and as a developer

00:27:32,330 --> 00:27:37,649
you you sort of get like stuff when it's

00:27:35,220 --> 00:27:39,630
ready to rock and roll maybe not as

00:27:37,649 --> 00:27:42,120
ready for prime time as we perhaps head

00:27:39,630 --> 00:27:45,539
so one example coming out of reinvent

00:27:42,120 --> 00:27:48,059
was around schema migrations and

00:27:45,539 --> 00:27:49,409
essentially we had a developer who

00:27:48,059 --> 00:27:51,510
basically they announced this feature

00:27:49,409 --> 00:27:54,169
that you could basically import database

00:27:51,510 --> 00:27:56,270
schemas from Oracle into Postgres

00:27:54,169 --> 00:27:59,130
developer way and he tried it out

00:27:56,270 --> 00:28:01,320
instantly ran into a problem so he's

00:27:59,130 --> 00:28:04,350
there googling and everything looking

00:28:01,320 --> 00:28:05,700
around and then sort of came to and came

00:28:04,350 --> 00:28:08,340
up it's like this is really strange I

00:28:05,700 --> 00:28:10,409
can't find anything and actually the the

00:28:08,340 --> 00:28:12,450
the when Tim was like you you do know

00:28:10,409 --> 00:28:14,250
that this was only like it like 12 hours

00:28:12,450 --> 00:28:17,460
ago no one knew that this thing existed

00:28:14,250 --> 00:28:19,679
so there is a notion like you can be

00:28:17,460 --> 00:28:23,370
early adopters with AWS and they think

00:28:19,679 --> 00:28:26,610
especially the native services as a

00:28:23,370 --> 00:28:28,260
developer you absolutely should one of

00:28:26,610 --> 00:28:29,580
the things I've talked about internally

00:28:28,260 --> 00:28:33,000
and Warner is you look at things like

00:28:29,580 --> 00:28:35,760
lambda from when it was announced what

00:28:33,000 --> 00:28:37,350
just over 18 months ago to to what they

00:28:35,760 --> 00:28:39,380
were actually announcing in terms of

00:28:37,350 --> 00:28:42,840
feature sets every and then last year so

00:28:39,380 --> 00:28:45,510
and there's definitely something we're

00:28:42,840 --> 00:28:46,550
looking at so but you've got to resist

00:28:45,510 --> 00:28:51,890
the temptation to

00:28:46,550 --> 00:28:54,430
just dive straight in I think any other

00:28:51,890 --> 00:28:54,430
questions

00:29:05,580 --> 00:29:14,160
you just say just say just one more time

00:29:08,530 --> 00:29:14,160
sorry yep

00:29:17,200 --> 00:29:21,200
yeah it was what it was one of the

00:29:19,460 --> 00:29:23,330
things we looked at especially as we

00:29:21,200 --> 00:29:24,830
were sort of as we were sort of Gary

00:29:23,330 --> 00:29:26,990
inbound path and looking at the public

00:29:24,830 --> 00:29:29,600
lab that we had experience of building

00:29:26,990 --> 00:29:31,490
it ourselves and at the time we were

00:29:29,600 --> 00:29:33,049
very comfortable and I think like some

00:29:31,490 --> 00:29:34,940
of the tool sets that things like

00:29:33,049 --> 00:29:37,190
Microsoft have put in place with Visio

00:29:34,940 --> 00:29:39,470
that God announced recently will

00:29:37,190 --> 00:29:41,090
definitely help in that area and we're

00:29:39,470 --> 00:29:42,919
lucky because we've used a lot of

00:29:41,090 --> 00:29:46,190
support from a Taurus to sort of help us

00:29:42,919 --> 00:29:48,320
so at the moment we've always been we've

00:29:46,190 --> 00:29:50,960
felt capable in-house of dealing with

00:29:48,320 --> 00:29:52,850
that but I think it's really great of

00:29:50,960 --> 00:29:55,820
the adoption and the tool sets out there

00:29:52,850 --> 00:29:57,530
to make it much easier for people so it

00:29:55,820 --> 00:29:59,480
was one of the things that we looked at

00:29:57,530 --> 00:30:01,010
but that wasn't one of the individual

00:29:59,480 --> 00:30:05,240
problems that we have but it's a real

00:30:01,010 --> 00:30:06,770
problem out there thank you so I noticed

00:30:05,240 --> 00:30:09,799
in your reference architecture that you

00:30:06,770 --> 00:30:11,960
just handed out that you have like an

00:30:09,799 --> 00:30:13,490
example of like you SES and us West and

00:30:11,960 --> 00:30:16,130
it says in there are two separate Cloud

00:30:13,490 --> 00:30:18,830
Foundry deployments what's the developer

00:30:16,130 --> 00:30:20,780
experience like to deploy to those is

00:30:18,830 --> 00:30:23,450
that a single because that handled is a

00:30:20,780 --> 00:30:26,059
single CF push or is that two targeted

00:30:23,450 --> 00:30:28,669
CF pushes and and how does that work so

00:30:26,059 --> 00:30:30,980
what we have at the moment so yes so the

00:30:28,669 --> 00:30:32,720
the architecture which is sort of an

00:30:30,980 --> 00:30:35,900
example of the sort of the path that

00:30:32,720 --> 00:30:38,870
we're sort of go into the answer is yes

00:30:35,900 --> 00:30:41,270
we essentially at the moment is highly

00:30:38,870 --> 00:30:44,630
around multiple availability zones with

00:30:41,270 --> 00:30:46,100
a multiple regions coming later but it's

00:30:44,630 --> 00:30:48,350
been a sort of modeled that we've been

00:30:46,100 --> 00:30:51,080
thinking about is like what's that sort

00:30:48,350 --> 00:30:53,059
of scenario two scenarios that you sort

00:30:51,080 --> 00:30:55,190
of pick out one is what happens if I

00:30:53,059 --> 00:30:57,559
lose an entire veil abilities and then

00:30:55,190 --> 00:30:59,150
potentially half my infrastructure in

00:30:57,559 --> 00:31:01,429
terms of making sure that the platform

00:30:59,150 --> 00:31:03,470
itself doesn't start doing crazy things

00:31:01,429 --> 00:31:05,539
about spinning up lots of things and

00:31:03,470 --> 00:31:08,150
being unsure what's happening and in

00:31:05,539 --> 00:31:10,010
terms of the deployments though between

00:31:08,150 --> 00:31:12,740
the model that we sort of have is it

00:31:10,010 --> 00:31:14,390
would be the single push and go out

00:31:12,740 --> 00:31:17,740
that's the model that we're we're

00:31:14,390 --> 00:31:17,740
working through at the moment

00:31:20,040 --> 00:31:28,400
any other questions brilliant thank you

00:31:25,530 --> 00:31:28,400

YouTube URL: https://www.youtube.com/watch?v=htr1CxyZk0c


