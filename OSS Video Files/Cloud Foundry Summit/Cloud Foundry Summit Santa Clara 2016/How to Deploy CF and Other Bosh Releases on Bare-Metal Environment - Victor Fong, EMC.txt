Title: How to Deploy CF and Other Bosh Releases on Bare-Metal Environment - Victor Fong, EMC
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	For years, CF users have been asking for the functionality to deploy Cloud Foundry on bare metal machines. With the new RackHD CPI, Bosh is now empowered to provision bare-metal machines, deploy software on them, and monitor the health of deployments. 

The RackHD CPI bridges the communication between Bosh (http://bosh.io) and EMC OSS RackHD (http://github.com/RackHD). RackHD is a technology stack that enables automated hardware management and orchestration. To Bosh, the RackHD CPI behaves just like any other Cloud Provider Interface. Internally, the RackHD CPI uses RackHD to manage, provision, and deploy software on bare machines. 

Victor Fong
EMC
EMC Cloud Platform Team, Dev. Lead for the Cambridge Cloud Foundry Dojo. Working on the Rack HD CPI.
Captions: 
	00:00:00,030 --> 00:00:03,899
thank you very much for coming to my

00:00:01,589 --> 00:00:06,509
session in this session I will talk

00:00:03,899 --> 00:00:08,189
about the wreckage DCPI and how to use

00:00:06,509 --> 00:00:10,920
Bosch on top of bare metal machines

00:00:08,189 --> 00:00:13,230
right so the agenda today is I am going

00:00:10,920 --> 00:00:16,260
to give a very brief overview of Bosch

00:00:13,230 --> 00:00:18,240
and the wreckage DCPI and describe the

00:00:16,260 --> 00:00:21,119
use case that is supposed to satisfied

00:00:18,240 --> 00:00:24,779
and then I will describe how it works

00:00:21,119 --> 00:00:26,400
and show a video demo of that so before

00:00:24,779 --> 00:00:29,039
we begin I would like to say a couple

00:00:26,400 --> 00:00:31,619
words about myself so my name is Victor

00:00:29,039 --> 00:00:33,360
Fong I come from the EMC Cloud Foundry

00:00:31,619 --> 00:00:36,360
dojo which is located in Cambridge

00:00:33,360 --> 00:00:39,120
Massachusetts so we have two teams right

00:00:36,360 --> 00:00:41,160
our first team is in San Francisco and

00:00:39,120 --> 00:00:43,410
they work very closely with pivotal in

00:00:41,160 --> 00:00:46,110
the pivotable office on Howard Street in

00:00:43,410 --> 00:00:50,010
the past they have contributed into you

00:00:46,110 --> 00:00:53,489
a a go router cloud controller

00:00:50,010 --> 00:00:56,610
CLI Bosh water infrastructure and very

00:00:53,489 --> 00:00:58,160
recently Diego persistence and then we

00:00:56,610 --> 00:01:01,260
have a team in Cambridge as well and

00:00:58,160 --> 00:01:03,690
each engineer in this Cambridge team has

00:01:01,260 --> 00:01:06,299
been through the six weeks dojo program

00:01:03,690 --> 00:01:08,159
in San Francisco and after we learn

00:01:06,299 --> 00:01:10,470
everything we want to replicate what we

00:01:08,159 --> 00:01:12,450
have in San Francisco into Cambridge and

00:01:10,470 --> 00:01:14,159
the reason why we want to do that is

00:01:12,450 --> 00:01:16,439
because we want to improve cloud foundry

00:01:14,159 --> 00:01:18,540
as a platform and the way that we want

00:01:16,439 --> 00:01:21,119
to do it is by having a lot of smart

00:01:18,540 --> 00:01:22,590
people to come contribute into Cal

00:01:21,119 --> 00:01:26,159
foundry so that's why I just told your

00:01:22,590 --> 00:01:27,119
setup we have a block site for the emc

00:01:26,159 --> 00:01:30,570
dojo

00:01:27,119 --> 00:01:31,770
it's called dojo pmc calm and feel free

00:01:30,570 --> 00:01:34,619
to check it out we have a lot of

00:01:31,770 --> 00:01:36,720
exciting news and also a lot of very

00:01:34,619 --> 00:01:39,600
useful documentation and tutorials and

00:01:36,720 --> 00:01:42,930
examples that you can use and lastly my

00:01:39,600 --> 00:01:44,130
true icon is vector cave pong feel free

00:01:42,930 --> 00:01:45,810
to follow me on Twitter if you're

00:01:44,130 --> 00:01:48,899
interesting the work that I will be

00:01:45,810 --> 00:01:51,060
doing in the future and also after this

00:01:48,899 --> 00:01:53,490
talk I will treat out the locations to

00:01:51,060 --> 00:01:56,130
the documentation and also the tutorial

00:01:53,490 --> 00:01:57,659
and the examples that I have used

00:01:56,130 --> 00:01:59,670
throughout this talk so feel free to

00:01:57,659 --> 00:02:04,920
follow me and then and follow me for

00:01:59,670 --> 00:02:09,599
that so as I said before the Rakesh DCPI

00:02:04,920 --> 00:02:11,069
is developed in the canvas dojo so after

00:02:09,599 --> 00:02:12,840
going through the dojo program in

00:02:11,069 --> 00:02:13,620
pivotal the most important thing that we

00:02:12,840 --> 00:02:15,690
have learned

00:02:13,620 --> 00:02:18,360
is the development methodology right

00:02:15,690 --> 00:02:19,890
which is pair programming test-driven

00:02:18,360 --> 00:02:22,560
development and also continuous

00:02:19,890 --> 00:02:24,750
integration and we try to follow all of

00:02:22,560 --> 00:02:25,709
those guidelines when we develop the

00:02:24,750 --> 00:02:27,870
Rakesh DCPI

00:02:25,709 --> 00:02:29,940
we believe that - head is better than

00:02:27,870 --> 00:02:32,250
one so we are constantly doing

00:02:29,940 --> 00:02:34,019
pair programming environment where two

00:02:32,250 --> 00:02:35,819
engineers are sitting together in the

00:02:34,019 --> 00:02:38,250
same workstations trying to solve the

00:02:35,819 --> 00:02:40,950
same problem at the same time and

00:02:38,250 --> 00:02:43,230
through constant rotation each engineer

00:02:40,950 --> 00:02:46,709
in Syal team we get contacts to entire

00:02:43,230 --> 00:02:48,810
project not only just a small piece of

00:02:46,709 --> 00:02:50,430
you know context where in the

00:02:48,810 --> 00:02:53,400
traditional team that you might be in

00:02:50,430 --> 00:02:56,129
right so and then we practice

00:02:53,400 --> 00:02:57,090
test-driven development where it's very

00:02:56,129 --> 00:03:00,750
different from the traditional

00:02:57,090 --> 00:03:02,909
development driven testing so we will

00:03:00,750 --> 00:03:05,579
first write the test - the expected

00:03:02,909 --> 00:03:08,280
behavior execute has to get a breath

00:03:05,579 --> 00:03:10,290
state but at that point since we have

00:03:08,280 --> 00:03:11,940
not changed the behavior like the rest

00:03:10,290 --> 00:03:13,519
day is a good failure right so once we

00:03:11,940 --> 00:03:15,840
get a good failure we would change the

00:03:13,519 --> 00:03:17,609
behavior by changing implementation and

00:03:15,840 --> 00:03:20,549
then we would get a green stay at that

00:03:17,609 --> 00:03:22,470
point and this cycle is happening every

00:03:20,549 --> 00:03:24,450
day throughout the course of the

00:03:22,470 --> 00:03:26,609
development and at the end we will get a

00:03:24,450 --> 00:03:28,739
very comprehensive set of test bits

00:03:26,609 --> 00:03:31,440
right and our code base would be very

00:03:28,739 --> 00:03:32,790
high in test coverage and we use of

00:03:31,440 --> 00:03:35,250
those tests in our continuous

00:03:32,790 --> 00:03:37,950
integration pipeline so as you can see

00:03:35,250 --> 00:03:39,989
there are five stage in our pipeline so

00:03:37,950 --> 00:03:42,359
the first stage is the unit tests and

00:03:39,989 --> 00:03:44,819
integration tests and that excuse very

00:03:42,359 --> 00:03:49,590
quickly and the second stage is the

00:03:44,819 --> 00:03:52,680
lifecycle test which is redeploying the

00:03:49,590 --> 00:03:54,660
CPI directly without the passed here and

00:03:52,680 --> 00:03:57,599
we you know it has to be try to invoke

00:03:54,660 --> 00:03:58,769
the CPI functionalities directly and see

00:03:57,599 --> 00:04:02,730
if we can get back to expect the

00:03:58,769 --> 00:04:07,470
behavior after that finish in a two

00:04:02,730 --> 00:04:09,120
minutes then we will deploy the Bosch

00:04:07,470 --> 00:04:11,280
director on the third stage in this

00:04:09,120 --> 00:04:13,379
stage we get the latest release of Bosch

00:04:11,280 --> 00:04:15,389
director and we get the latest release

00:04:13,379 --> 00:04:18,269
of the rock HD CPI and we combine that

00:04:15,389 --> 00:04:19,410
together into a deployment and after

00:04:18,269 --> 00:04:21,750
that stage is finished we have a

00:04:19,410 --> 00:04:23,490
functional wreckage the director that we

00:04:21,750 --> 00:04:24,910
can execute the Polish acceptance test

00:04:23,490 --> 00:04:27,940
on

00:04:24,910 --> 00:04:29,860
so the Porsche acceptance test has to

00:04:27,940 --> 00:04:32,080
pass both it has to stem cells right so

00:04:29,860 --> 00:04:33,760
it has the open-toe stem cell and also

00:04:32,080 --> 00:04:35,380
Santo s stem cell that's why the fourth

00:04:33,760 --> 00:04:37,630
stage is broken down into two parts and

00:04:35,380 --> 00:04:40,300
then lastly after the acceptance test is

00:04:37,630 --> 00:04:42,610
finished we can actually deploy that by

00:04:40,300 --> 00:04:46,000
attacking a version in our github

00:04:42,610 --> 00:04:48,610
account so that our user can use release

00:04:46,000 --> 00:04:53,740
with confidence that you know the code

00:04:48,610 --> 00:04:55,780
have been tested for Olli I would not

00:04:53,740 --> 00:04:57,100
pretend to be an expert of Bosch I mean

00:04:55,780 --> 00:05:00,760
the whole Bosch team is sitting right

00:04:57,100 --> 00:05:03,640
there so my brain is probably laughing

00:05:00,760 --> 00:05:05,320
at me at the right now anyway

00:05:03,640 --> 00:05:07,680
but I will say a few words for those

00:05:05,320 --> 00:05:10,630
people who are not familiar with Bosch

00:05:07,680 --> 00:05:13,120
so Bosch is a - to automate deployment

00:05:10,630 --> 00:05:14,860
and do health monitoring and upgrading

00:05:13,120 --> 00:05:17,890
and scaling and cleaning up in a

00:05:14,860 --> 00:05:19,720
production environment right so in a

00:05:17,890 --> 00:05:21,430
production environment if any of the

00:05:19,720 --> 00:05:22,150
Machine goes down or if software is

00:05:21,430 --> 00:05:25,750
malfunctioning

00:05:22,150 --> 00:05:28,210
then Porsche would detect that and spawn

00:05:25,750 --> 00:05:30,550
up a new machine and deploy software on

00:05:28,210 --> 00:05:33,280
that machine so that your environment is

00:05:30,550 --> 00:05:35,650
highly variable right so it's also a

00:05:33,280 --> 00:05:38,710
very good to foresee ICD because you can

00:05:35,650 --> 00:05:40,420
just upload a new release to the Bosch

00:05:38,710 --> 00:05:42,310
director and then the Bosch director

00:05:40,420 --> 00:05:45,730
would take damage in one at a time to

00:05:42,310 --> 00:05:47,950
deploy your new software for you right

00:05:45,730 --> 00:05:49,720
and Bosch has actually no idea what

00:05:47,950 --> 00:05:51,940
infrastructure is talking to you of that

00:05:49,720 --> 00:05:55,090
is abstract out by a cloud provider

00:05:51,940 --> 00:05:57,520
interface also known as CPI so the CPI

00:05:55,090 --> 00:06:01,090
is responsible for communicating with

00:05:57,520 --> 00:06:03,550
the infrastructure here and in this case

00:06:01,090 --> 00:06:06,130
that brings us to into the rec HD CPI

00:06:03,550 --> 00:06:09,370
which talks directly to the bare metal

00:06:06,130 --> 00:06:11,230
machines so it will allow the user to

00:06:09,370 --> 00:06:13,390
have full use of the Parramatta machine

00:06:11,230 --> 00:06:15,790
without the virtualization tier right so

00:06:13,390 --> 00:06:17,770
it provides the same capability of Bosch

00:06:15,790 --> 00:06:19,090
on bare metal machines including you

00:06:17,770 --> 00:06:21,190
know deployment health monitoring

00:06:19,090 --> 00:06:23,800
upgrading scaling and cleaning up and

00:06:21,190 --> 00:06:26,560
it's also a great - to do see ICD for

00:06:23,800 --> 00:06:29,740
bare metal machines so that two main use

00:06:26,560 --> 00:06:32,230
case for this the first use case is of

00:06:29,740 --> 00:06:34,900
course to execute existing Bosch

00:06:32,230 --> 00:06:36,580
releases on bare metal right so what

00:06:34,900 --> 00:06:37,660
does that do for us it will eliminate

00:06:36,580 --> 00:06:39,310
the virtualization

00:06:37,660 --> 00:06:40,870
here so that's definitely one last thing

00:06:39,310 --> 00:06:42,840
for you guys to buy if you have to pay

00:06:40,870 --> 00:06:45,520
for the license for virtualization and

00:06:42,840 --> 00:06:48,850
it's also one last thing to deploy and

00:06:45,520 --> 00:06:51,130
to maintain the scale to to upgrade so

00:06:48,850 --> 00:06:55,920
in a production environment it will save

00:06:51,130 --> 00:06:58,420
you time and also effort so and also

00:06:55,920 --> 00:07:00,190
your software I will now be running the

00:06:58,420 --> 00:07:02,530
rack being on physical hardware

00:07:00,190 --> 00:07:04,180
instead of virtualized Hardware meaning

00:07:02,530 --> 00:07:05,620
that it should get additional

00:07:04,180 --> 00:07:07,750
performance because it's using real

00:07:05,620 --> 00:07:09,490
hardware and at the same time your

00:07:07,750 --> 00:07:10,990
machine would not have to run the

00:07:09,490 --> 00:07:13,120
virtualization here meaning that you can

00:07:10,990 --> 00:07:17,260
save in memory and also in computing

00:07:13,120 --> 00:07:19,060
power for those and the second use case

00:07:17,260 --> 00:07:21,850
is actually a more interesting use case

00:07:19,060 --> 00:07:24,310
in my mind so in the past Porsche has

00:07:21,850 --> 00:07:27,070
been very good with everything above the

00:07:24,310 --> 00:07:30,040
virtualization tier and so it would you

00:07:27,070 --> 00:07:33,070
know create VMs and deploy like OS and

00:07:30,040 --> 00:07:36,520
software on top of the WM right but what

00:07:33,070 --> 00:07:38,470
if now we can use posh to automate the

00:07:36,520 --> 00:07:42,460
deployment for the underlined here as

00:07:38,470 --> 00:07:46,240
well so that will bring us into almost

00:07:42,460 --> 00:07:49,150
fully automated data center the lab

00:07:46,240 --> 00:07:50,620
working solutions already software

00:07:49,150 --> 00:07:52,450
defined the notion of software-defined

00:07:50,620 --> 00:07:54,490
data center has come out a couple of

00:07:52,450 --> 00:07:56,500
years ago and existing solutions already

00:07:54,490 --> 00:07:58,720
exists out in the market for those

00:07:56,500 --> 00:08:00,580
software right and once we have software

00:07:58,720 --> 00:08:03,550
it's totally possible to automate all

00:08:00,580 --> 00:08:05,560
that so imagine if you can have a data

00:08:03,550 --> 00:08:08,320
center and where you can just plug in

00:08:05,560 --> 00:08:10,510
physical machines into power and basic

00:08:08,320 --> 00:08:12,190
networking and after that there's a

00:08:10,510 --> 00:08:13,480
magic button for you to click and then

00:08:12,190 --> 00:08:14,860
it will deploy all the networking

00:08:13,480 --> 00:08:17,620
structure for you instead of all the

00:08:14,860 --> 00:08:18,669
routing and firewalls and then the next

00:08:17,620 --> 00:08:22,060
step of course is to serve

00:08:18,669 --> 00:08:23,650
software-defined storage right so their

00:08:22,060 --> 00:08:27,130
existing software-defined storage out

00:08:23,650 --> 00:08:31,240
there including EMC Isilon and scale io

00:08:27,130 --> 00:08:33,340
right so all of those so you have a

00:08:31,240 --> 00:08:35,169
match upon to deploy all of that into

00:08:33,340 --> 00:08:37,419
every single fiscal note in your data

00:08:35,169 --> 00:08:39,820
center and if one of those knows goes

00:08:37,419 --> 00:08:42,789
down Porsche is going to spawn up a new

00:08:39,820 --> 00:08:45,190
machine for you right and then the

00:08:42,789 --> 00:08:47,560
software-defined storage would then be

00:08:45,190 --> 00:08:50,620
responsible to replicate itself across

00:08:47,560 --> 00:08:51,100
all the other nodes and no balance

00:08:50,620 --> 00:08:52,600
itself so

00:08:51,100 --> 00:08:55,149
that all the data is persistence and

00:08:52,600 --> 00:08:57,399
also have a redundancy later right and

00:08:55,149 --> 00:08:58,660
then last but not least you know

00:08:57,399 --> 00:09:01,540
virtualization is definitely so great

00:08:58,660 --> 00:09:04,990
defined right so imagine if you have a

00:09:01,540 --> 00:09:07,600
yes XII OpenStack and you can hit the

00:09:04,990 --> 00:09:10,449
easy button and have posh deploy all of

00:09:07,600 --> 00:09:13,149
those for you onto a lot of physical

00:09:10,449 --> 00:09:14,440
servers and if a machine goes down at in

00:09:13,149 --> 00:09:16,690
the middle of the night you will not

00:09:14,440 --> 00:09:18,850
even have to be awake to solve the

00:09:16,690 --> 00:09:20,980
problem right Bosh is going to create

00:09:18,850 --> 00:09:24,060
the machine installed the exact same

00:09:20,980 --> 00:09:26,910
software for you and then you know

00:09:24,060 --> 00:09:30,579
[Music]

00:09:26,910 --> 00:09:33,699
anyway and then if you have to upgrade

00:09:30,579 --> 00:09:36,610
any of those software then your posh can

00:09:33,699 --> 00:09:38,440
be the CI cd2 for you as well right so

00:09:36,610 --> 00:09:40,149
let's say if you have to upgrade cio

00:09:38,440 --> 00:09:43,000
then you know posh with tech down

00:09:40,149 --> 00:09:45,160
machine install cio for you and bring it

00:09:43,000 --> 00:09:46,690
back up right so and we do it one at a

00:09:45,160 --> 00:09:48,519
time so that your tailor server will be

00:09:46,690 --> 00:09:52,029
highly a variable while you're doing the

00:09:48,519 --> 00:09:54,250
CI CD so that's a major benefit so

00:09:52,029 --> 00:09:56,439
that's all very good right and wreckage

00:09:54,250 --> 00:09:58,810
the CPI will open it all to that

00:09:56,439 --> 00:09:59,769
automated data center but how does it

00:09:58,810 --> 00:10:03,490
really work

00:09:59,769 --> 00:10:05,670
so in in the background the RAC HDCP I

00:10:03,490 --> 00:10:08,350
use a technology called rack HD it's

00:10:05,670 --> 00:10:11,709
open source technology created by EMC

00:10:08,350 --> 00:10:14,380
code in the past it has been a MC

00:10:11,709 --> 00:10:16,420
protocol on rack and it has just been

00:10:14,380 --> 00:10:18,130
open source in the beginning of this

00:10:16,420 --> 00:10:19,509
year and you can you know obtain the

00:10:18,130 --> 00:10:23,529
release and the source code from github

00:10:19,509 --> 00:10:26,649
slash wreckage D so registry provides

00:10:23,529 --> 00:10:28,300
functionality or for automating you know

00:10:26,649 --> 00:10:31,420
hardware management and orchestration

00:10:28,300 --> 00:10:35,350
and it done is done so by having like a

00:10:31,420 --> 00:10:38,529
server client-server model over a

00:10:35,350 --> 00:10:40,810
RESTful API and the wreckage TCP I would

00:10:38,529 --> 00:10:43,389
use this API to tell wreckage T what to

00:10:40,810 --> 00:10:45,670
do and it would and then we just carry

00:10:43,389 --> 00:10:48,250
out our tasks through customizable

00:10:45,670 --> 00:10:50,110
workflow so a terrible example workflows

00:10:48,250 --> 00:10:52,660
right for example you can try to have

00:10:50,110 --> 00:10:54,550
read actually upgrade your firmware for

00:10:52,660 --> 00:10:56,529
your existing bare metal machines or it

00:10:54,550 --> 00:10:58,990
can upload install a security patches

00:10:56,529 --> 00:11:01,620
and you can provision new machines for

00:10:58,990 --> 00:11:01,620
you right

00:11:01,760 --> 00:11:05,960
so to explain what it looks like we have

00:11:03,830 --> 00:11:08,510
a very simple environment here with just

00:11:05,960 --> 00:11:10,280
a simple network switch right in the

00:11:08,510 --> 00:11:12,650
beginning we will have a functional rack

00:11:10,280 --> 00:11:17,330
XT server and three bare metal machines

00:11:12,650 --> 00:11:19,160
attached to them so as you turn on the

00:11:17,330 --> 00:11:21,500
machines the machines with a nose pixie

00:11:19,160 --> 00:11:23,420
signal right and wreckage D would pick

00:11:21,500 --> 00:11:27,260
up that signal and store the metadata of

00:11:23,420 --> 00:11:29,240
those notes into its database and after

00:11:27,260 --> 00:11:31,910
that wreckage D would then be fully

00:11:29,240 --> 00:11:33,770
functional and ready for your input so

00:11:31,910 --> 00:11:36,140
at this point a user can come in and

00:11:33,770 --> 00:11:38,150
he'll wreckage D to install putting two

00:11:36,140 --> 00:11:41,900
or no one and wreckage D will be able to

00:11:38,150 --> 00:11:45,680
do that right so how does Porsche come

00:11:41,900 --> 00:11:47,930
in in this case so let's say if we have

00:11:45,680 --> 00:11:51,740
the same environment with wreckage

00:11:47,930 --> 00:11:53,480
t.server and physical notes as the notes

00:11:51,740 --> 00:11:54,830
I know Pixies single the wreckage tea

00:11:53,480 --> 00:11:57,170
server will pick that up and store that

00:11:54,830 --> 00:11:59,240
into its database and now the user can

00:11:57,170 --> 00:12:01,100
come in and say bas-reliefs right and

00:11:59,240 --> 00:12:03,140
that would create Bosch directory

00:12:01,100 --> 00:12:05,270
somewhere you can totally install the

00:12:03,140 --> 00:12:06,950
boss director in some of the notes but

00:12:05,270 --> 00:12:08,930
let's just say that you know posh

00:12:06,950 --> 00:12:11,480
director is installed somewhere else but

00:12:08,930 --> 00:12:13,850
it's attached to the same network right

00:12:11,480 --> 00:12:17,510
so at this point the user can upload

00:12:13,850 --> 00:12:19,970
stem cells and a stem cell would be able

00:12:17,510 --> 00:12:21,650
to the Polish director and the CPI will

00:12:19,970 --> 00:12:24,020
also be responsible for uploading the

00:12:21,650 --> 00:12:26,330
stem cell into the wreckage D server so

00:12:24,020 --> 00:12:29,410
that the image is also persisted in the

00:12:26,330 --> 00:12:32,090
wreckage D server and now the user can

00:12:29,410 --> 00:12:34,220
upload a release for example if they

00:12:32,090 --> 00:12:37,250
want to stop install Redis into one of

00:12:34,220 --> 00:12:39,500
the computers they can upload the

00:12:37,250 --> 00:12:42,050
registry DS right and then at this point

00:12:39,500 --> 00:12:46,310
the user would be able to do a Porsche

00:12:42,050 --> 00:12:48,620
deploy so the boss director would then

00:12:46,310 --> 00:12:50,600
tell the wreckage the server to install

00:12:48,620 --> 00:12:53,710
the image on one of the machines right

00:12:50,600 --> 00:12:56,510
and as soon as the image is put up the

00:12:53,710 --> 00:12:58,850
Porsche agent running inside image will

00:12:56,510 --> 00:13:01,010
attempt to communicate with the boss

00:12:58,850 --> 00:13:03,200
director and the Boche director at this

00:13:01,010 --> 00:13:05,510
point will tell it to install riders on

00:13:03,200 --> 00:13:07,370
the computer so after this the

00:13:05,510 --> 00:13:09,080
deployment is finished and the Redis

00:13:07,370 --> 00:13:12,020
server is functional on the bare metal

00:13:09,080 --> 00:13:13,440
machine right so at runtime what happen

00:13:12,020 --> 00:13:15,120
if that

00:13:13,440 --> 00:13:16,589
brandishing goes down for whatever

00:13:15,120 --> 00:13:18,540
reason whether it's a hardware failure

00:13:16,589 --> 00:13:21,420
or software failure right

00:13:18,540 --> 00:13:23,339
Bosh would detect that because it keeps

00:13:21,420 --> 00:13:25,470
a constant heartbeat with the agent and

00:13:23,339 --> 00:13:27,690
if that happy toes away then Porsche is

00:13:25,470 --> 00:13:29,670
going to assume that the the machine is

00:13:27,690 --> 00:13:32,910
bang and then it would try to recreate

00:13:29,670 --> 00:13:35,610
new machine this Rex erection psycho is

00:13:32,910 --> 00:13:38,519
created by telling rec HD to install the

00:13:35,610 --> 00:13:41,779
image on one of the nodes again and then

00:13:38,519 --> 00:13:44,759
as soon as the image is booted up the

00:13:41,779 --> 00:13:46,170
double agent inside that image is going

00:13:44,759 --> 00:13:47,850
to communicate the Porsche director

00:13:46,170 --> 00:13:50,670
again and the Bosch director is going to

00:13:47,850 --> 00:13:54,300
tear it to install Redis right so what

00:13:50,670 --> 00:13:57,389
happens if the user wants to upgrade

00:13:54,300 --> 00:14:00,569
every DS so the user can just upload a

00:13:57,389 --> 00:14:02,819
little release to the Bosh director and

00:14:00,569 --> 00:14:05,910
then the partial director will tell rec

00:14:02,819 --> 00:14:08,399
HD to deep ovation and then the bracket

00:14:05,910 --> 00:14:10,319
actually posh deploy and then the record

00:14:08,399 --> 00:14:13,620
see server would then remove everything

00:14:10,319 --> 00:14:16,230
on the note and then the boss director

00:14:13,620 --> 00:14:18,720
would again tell record C server to

00:14:16,230 --> 00:14:21,300
install the new stem cell into the node

00:14:18,720 --> 00:14:22,680
and then after that the new version of

00:14:21,300 --> 00:14:26,459
the release will be installed on the

00:14:22,680 --> 00:14:31,819
node so this is how Bosh can achieve C

00:14:26,459 --> 00:14:33,899
ICT in a bare metal environment so

00:14:31,819 --> 00:14:35,519
that's all very good right but how do we

00:14:33,899 --> 00:14:38,819
run Cloud Foundry in a bare metal

00:14:35,519 --> 00:14:40,740
environment so their free choice here

00:14:38,819 --> 00:14:43,050
and I'm going to describe each one of

00:14:40,740 --> 00:14:45,480
them right so the first choice is to

00:14:43,050 --> 00:14:48,389
deploy each component of calaf Andriy

00:14:45,480 --> 00:14:50,699
into its own parameter machine right so

00:14:48,389 --> 00:14:53,009
meaning that you know go router would

00:14:50,699 --> 00:14:54,149
have its own machine the carbon shoulder

00:14:53,009 --> 00:14:55,529
with as its own machine

00:14:54,149 --> 00:14:59,130
you know the UA a would have its own

00:14:55,529 --> 00:15:01,259
machine right but then that would not be

00:14:59,130 --> 00:15:02,880
making a very good use of your hardware

00:15:01,259 --> 00:15:04,470
because your release might not be

00:15:02,880 --> 00:15:08,579
archived might not have enough traffic

00:15:04,470 --> 00:15:11,670
or we quite like the necessary consuming

00:15:08,579 --> 00:15:13,889
powerful for your machine right so in

00:15:11,670 --> 00:15:15,720
that case is really a race of hardware

00:15:13,889 --> 00:15:19,379
if you want to install each component

00:15:15,720 --> 00:15:21,930
into into a computer and another option

00:15:19,379 --> 00:15:23,790
the second option is to co-locate a lot

00:15:21,930 --> 00:15:25,900
of those components into one machine and

00:15:23,790 --> 00:15:28,060
you can certainly do that but

00:15:25,900 --> 00:15:32,470
and in that case you would lose out on

00:15:28,060 --> 00:15:35,740
the resource segregation off about you

00:15:32,470 --> 00:15:39,160
over for to you by the virtualization

00:15:35,740 --> 00:15:42,010
tier right so that you know if one

00:15:39,160 --> 00:15:44,260
component is consuming a lot of resource

00:15:42,010 --> 00:15:46,360
all the other components running in the

00:15:44,260 --> 00:15:49,210
physical machine would be starving and

00:15:46,360 --> 00:15:51,480
also if one of those component fails

00:15:49,210 --> 00:15:53,440
then posh would redeploy the whole

00:15:51,480 --> 00:15:56,820
machine for you so it's not very

00:15:53,440 --> 00:16:00,100
efficient in that case so the best case

00:15:56,820 --> 00:16:02,680
is to do a hybrid environment with a

00:16:00,100 --> 00:16:04,570
virtualization environment and also a

00:16:02,680 --> 00:16:06,760
bare-metal environment is because the

00:16:04,570 --> 00:16:09,070
computing unit in hell foundry is also

00:16:06,760 --> 00:16:12,310
managing containers right so whether

00:16:09,070 --> 00:16:14,140
it's de a runner or Diego cells they are

00:16:12,310 --> 00:16:16,990
just managing a container environment

00:16:14,140 --> 00:16:18,250
for you and if we were to run those

00:16:16,990 --> 00:16:19,990
components in a virtualization

00:16:18,250 --> 00:16:22,630
environment is two tiers of

00:16:19,990 --> 00:16:24,400
virtualization right you would first

00:16:22,630 --> 00:16:26,440
have a virtualization tier provided by

00:16:24,400 --> 00:16:28,480
infrastructure as a service and then the

00:16:26,440 --> 00:16:31,990
Diego cell or the de runner itself would

00:16:28,480 --> 00:16:34,300
generate we generate the the container

00:16:31,990 --> 00:16:35,080
runtime for you so that's not very

00:16:34,300 --> 00:16:37,900
efficient right

00:16:35,080 --> 00:16:40,420
so the best-case scenario is that we can

00:16:37,900 --> 00:16:42,340
put those computing units on bare metal

00:16:40,420 --> 00:16:44,440
machine but at the same time have the

00:16:42,340 --> 00:16:47,620
rest of the component in a virtualized

00:16:44,440 --> 00:16:50,230
mission in a virtualized environment so

00:16:47,620 --> 00:16:52,390
this is what I have set out to do right

00:16:50,230 --> 00:16:55,270
so in the beginning we have two networks

00:16:52,390 --> 00:16:57,790
and we have three nodes connected to the

00:16:55,270 --> 00:17:00,190
private network the network on the

00:16:57,790 --> 00:17:02,170
bottom is the public network right so at

00:17:00,190 --> 00:17:04,660
this point we have the rack XD server

00:17:02,170 --> 00:17:06,910
ready and we can deploy a beast fare

00:17:04,660 --> 00:17:09,640
Bosch director and this vSphere boss

00:17:06,910 --> 00:17:11,470
director can be used to deploy a Cloud

00:17:09,640 --> 00:17:14,740
Foundry deployment in your reach very

00:17:11,470 --> 00:17:16,480
environment right so at this point the

00:17:14,740 --> 00:17:19,950
Cloud Foundry should be fully functional

00:17:16,480 --> 00:17:22,420
and you can push applications to this

00:17:19,950 --> 00:17:23,890
but then you know the containers will be

00:17:22,420 --> 00:17:25,510
managing the virtualized machine inside

00:17:23,890 --> 00:17:27,730
the vSphere environment so at this point

00:17:25,510 --> 00:17:29,830
we can create a wreckage the boss

00:17:27,730 --> 00:17:32,470
director and this Bosch director should

00:17:29,830 --> 00:17:34,270
be able to talk to the rack HD server

00:17:32,470 --> 00:17:36,850
because they are all sitting in the same

00:17:34,270 --> 00:17:39,340
network right and after that the boss

00:17:36,850 --> 00:17:41,500
director would be able to deploy runners

00:17:39,340 --> 00:17:43,390
into the bare metal machines and since

00:17:41,500 --> 00:17:44,590
they are on the same network they will

00:17:43,390 --> 00:17:47,860
be able to communicate with the Cloud

00:17:44,590 --> 00:17:49,360
Foundry and then confound we would use

00:17:47,860 --> 00:17:53,650
the computing power from those runners

00:17:49,360 --> 00:17:55,740
into to execute the calendar

00:17:53,650 --> 00:17:59,560
applications that you want to run right

00:17:55,740 --> 00:18:02,410
so this is our environment it's just a

00:17:59,560 --> 00:18:05,520
very tiny box so we call this the orange

00:18:02,410 --> 00:18:08,230
box and it has 10 intel notes on it

00:18:05,520 --> 00:18:12,610
internally also have a switch so each of

00:18:08,230 --> 00:18:14,920
those 10 intel notes can be used as an

00:18:12,610 --> 00:18:16,930
unknown bare metal machine it's not very

00:18:14,920 --> 00:18:18,790
powerful but it is you know something to

00:18:16,930 --> 00:18:22,120
test with right

00:18:18,790 --> 00:18:24,340
so just to recap the breakage DCPI

00:18:22,120 --> 00:18:26,680
is an open source project and it's a

00:18:24,340 --> 00:18:29,470
combined effort between the CF

00:18:26,680 --> 00:18:34,450
foundation and pivotal and also EMC in

00:18:29,470 --> 00:18:36,450
fact KD miles flew over to Cambridge for

00:18:34,450 --> 00:18:39,430
two weeks to get help us get started and

00:18:36,450 --> 00:18:42,340
Dmitry the PM of Bosch is actually the

00:18:39,430 --> 00:18:44,590
PM of this project as well and this

00:18:42,340 --> 00:18:47,800
project is open sourced you can find on

00:18:44,590 --> 00:18:51,190
github.com cloud foundry incubator under

00:18:47,800 --> 00:18:54,220
posh rackety CPI release and the purpose

00:18:51,190 --> 00:18:56,470
of this CPI is to bridge posh with bare

00:18:54,220 --> 00:18:59,440
metal machines by using rock HD right so

00:18:56,470 --> 00:19:02,770
and also support open to and Santo s

00:18:59,440 --> 00:19:04,750
stem cell it provides CI cd4 parameter

00:19:02,770 --> 00:19:06,520
machines and I think one day we would

00:19:04,750 --> 00:19:09,850
have a fully automated data center by

00:19:06,520 --> 00:19:13,480
using Porsche and what's coming soon is

00:19:09,850 --> 00:19:15,400
that my team is also working on a

00:19:13,480 --> 00:19:17,830
project called Diego persistence it

00:19:15,400 --> 00:19:20,050
would allow California applications to

00:19:17,830 --> 00:19:24,520
talk to a persistence tier I think Ted

00:19:20,050 --> 00:19:26,710
and Paul and has already talked about

00:19:24,520 --> 00:19:28,900
that in the previous talk and also Brian

00:19:26,710 --> 00:19:30,880
Gallagher will be showing a live demo of

00:19:28,900 --> 00:19:34,330
this in his keynote tomorrow so please

00:19:30,880 --> 00:19:38,440
watch out for that so with that let's

00:19:34,330 --> 00:19:39,850
move on to a live demo not a lifetime

00:19:38,440 --> 00:19:41,650
video demo I really want to show a live

00:19:39,850 --> 00:19:43,330
demo but then my environment the orange

00:19:41,650 --> 00:19:47,530
box is actually stuck behind the EMC

00:19:43,330 --> 00:19:50,110
five or so all I can do is just record a

00:19:47,530 --> 00:19:52,240
video I guess so before we begin we have

00:19:50,110 --> 00:19:52,850
two notes I only turn on two notes in

00:19:52,240 --> 00:19:56,210
the orange bar

00:19:52,850 --> 00:19:59,809
and this to nose communicating with rock

00:19:56,210 --> 00:20:01,490
HD food AMT protocol and the status of

00:19:59,809 --> 00:20:03,710
both of those nose are carrying a

00:20:01,490 --> 00:20:06,440
variable right meaning that they're

00:20:03,710 --> 00:20:09,500
ready to be used so at this point I

00:20:06,440 --> 00:20:11,870
already have a culinary environment

00:20:09,500 --> 00:20:14,149
installed in my vSphere so I am just

00:20:11,870 --> 00:20:15,710
going to target to the vSphere

00:20:14,149 --> 00:20:18,440
environment and show you guys what I

00:20:15,710 --> 00:20:23,210
have just entering username password at

00:20:18,440 --> 00:20:25,190
this point and then the command is Bosch

00:20:23,210 --> 00:20:29,629
BMS and that should show me all the

00:20:25,190 --> 00:20:31,909
deployments so the first one is the rack

00:20:29,629 --> 00:20:34,850
XD Bosch director it's actually also

00:20:31,909 --> 00:20:37,429
running in the vSphere environment right

00:20:34,850 --> 00:20:39,769
and then the second deployment is the

00:20:37,429 --> 00:20:41,360
Cloud Foundry deployment look at how

00:20:39,769 --> 00:20:45,080
simple it is right it doesn't even have

00:20:41,360 --> 00:20:47,779
a runner and the last one is the con

00:20:45,080 --> 00:20:49,970
cost that I run the pipeline in so let's

00:20:47,779 --> 00:20:58,879
not talk about that but this is the

00:20:49,970 --> 00:21:01,070
Cloud Foundry environment so now I am

00:20:58,879 --> 00:21:03,500
going to Bosch target to my rack HD

00:21:01,070 --> 00:21:06,769
Bosch director which is also running on

00:21:03,500 --> 00:21:09,649
vSphere as you saw right so I am able to

00:21:06,769 --> 00:21:13,279
log into it and at this point I wanted

00:21:09,649 --> 00:21:15,429
to do Bosch VMs to show you guys that I

00:21:13,279 --> 00:21:20,000
have nothing running in that environment

00:21:15,429 --> 00:21:22,730
and then I move over to my manifest and

00:21:20,000 --> 00:21:24,429
I changed the runner instance number to

00:21:22,730 --> 00:21:28,580
00:21:24,429 --> 00:21:32,539
and then now I can do a Bosch deploy on

00:21:28,580 --> 00:21:35,240
that rack HD Bosch director actually and

00:21:32,539 --> 00:21:39,190
I have to set the deployment file first

00:21:35,240 --> 00:21:39,190
and then I can do a Bosch deploy

00:21:46,940 --> 00:21:51,049
alright so borscht is smart enough to

00:21:48,739 --> 00:21:53,330
know that I am changing the number of

00:21:51,049 --> 00:22:01,999
instance from stereo to one and just

00:21:53,330 --> 00:22:03,919
asking me firm so here is so now

00:22:01,999 --> 00:22:05,809
at this can at this time the CPI is

00:22:03,919 --> 00:22:07,729
already talking to the rock XD server

00:22:05,809 --> 00:22:10,460
and the wreckage D server is running a

00:22:07,729 --> 00:22:13,099
resource old workflow on the first node

00:22:10,460 --> 00:22:16,340
so the reserve rockfall will just act as

00:22:13,099 --> 00:22:18,229
like it would tell the other nodes

00:22:16,340 --> 00:22:20,059
I would tell the other users that this

00:22:18,229 --> 00:22:21,590
know is being taken so you can see that

00:22:20,059 --> 00:22:23,929
the status has been changed to reserve

00:22:21,590 --> 00:22:27,559
and now is running the provision

00:22:23,929 --> 00:22:30,200
workflow meaning that the stem cell is

00:22:27,559 --> 00:22:32,090
being deployed to the node and the CID

00:22:30,200 --> 00:22:35,590
is given by the barge director - you

00:22:32,090 --> 00:22:40,129
needn't uniquely identify the the node

00:22:35,590 --> 00:22:43,309
so after that is just deploying right

00:22:40,129 --> 00:22:45,919
now and then it should be coming back up

00:22:43,309 --> 00:22:47,029
- so the agent at this point should be

00:22:45,919 --> 00:22:48,799
working and talking to the barge

00:22:47,029 --> 00:22:51,649
director and then installing the

00:22:48,799 --> 00:22:54,820
software so at this point the runner

00:22:51,649 --> 00:22:54,820
should be fully functional

00:23:00,100 --> 00:23:05,929
alright so the next part is to do a CF

00:23:03,529 --> 00:23:10,039
push I have a very simple snack game

00:23:05,929 --> 00:23:14,150
written in html5 it's just using the

00:23:10,039 --> 00:23:15,620
nginx static bill pack and if you want

00:23:14,150 --> 00:23:18,320
to push all application you can feel

00:23:15,620 --> 00:23:21,350
free to combine to the EMC proof and you

00:23:18,320 --> 00:23:23,090
can will help you push your first y CF

00:23:21,350 --> 00:23:24,860
application if you have not done so in

00:23:23,090 --> 00:23:28,309
the past so at this point is just

00:23:24,860 --> 00:23:30,559
creating the container so the containers

00:23:28,309 --> 00:23:34,880
now I've been running and is running in

00:23:30,559 --> 00:23:42,679
the wreckage the environment just

00:23:34,880 --> 00:23:44,570
copying the link right so at this point

00:23:42,679 --> 00:23:46,789
that contain the container is being

00:23:44,570 --> 00:23:49,460
created in I mean has been created in

00:23:46,789 --> 00:23:57,080
the orange box and now I'm ready to

00:23:49,460 --> 00:23:58,610
scale this application out into five so

00:23:57,080 --> 00:24:01,720
I just want to take a look at you know

00:23:58,610 --> 00:24:01,720
the runtime environment

00:24:09,669 --> 00:24:14,169
right so you can see that all of those

00:24:11,649 --> 00:24:17,019
five instants are not running in the

00:24:14,169 --> 00:24:18,729
orange box but I really want to see

00:24:17,019 --> 00:24:20,469
what's the limit of my hardware so I

00:24:18,729 --> 00:24:25,049
want to scale out two more instances

00:24:20,469 --> 00:24:28,479
right so I tried turdy at this point and

00:24:25,049 --> 00:24:30,570
we can see that just doing something

00:24:28,479 --> 00:24:31,809
while we're starting the containers

00:24:30,570 --> 00:24:34,570
right

00:24:31,809 --> 00:24:38,109
but it seems like thirty might not be

00:24:34,570 --> 00:24:40,690
enough to you know see the limit of my

00:24:38,109 --> 00:24:45,519
hopper so I think I'm gonna scare out

00:24:40,690 --> 00:24:47,379
you more so now I scale out to 40 and I

00:24:45,519 --> 00:24:55,690
think finally we're gonna see some

00:24:47,379 --> 00:24:57,429
failure right so one of the one note in

00:24:55,690 --> 00:25:00,179
the orange box would be powerful enough

00:24:57,429 --> 00:25:03,759
to run 31 instance of this application

00:25:00,179 --> 00:25:05,440
so now I can go into my manifest and

00:25:03,759 --> 00:25:09,959
change the number of instance from one

00:25:05,440 --> 00:25:09,959
to two and do a partially poor again

00:25:14,350 --> 00:25:19,950
and then you're partial smart enough to

00:25:17,919 --> 00:25:22,179
know that I have changed from one to two

00:25:19,950 --> 00:25:25,149
right and then it's just going to repeat

00:25:22,179 --> 00:25:27,009
the whole thing by running the we sort

00:25:25,149 --> 00:25:29,470
of know workflow and to change the

00:25:27,009 --> 00:25:38,740
status of the of the note in the

00:25:29,470 --> 00:25:40,539
wreckage the environment and then it's

00:25:38,740 --> 00:25:43,000
doing provision now which is putting the

00:25:40,539 --> 00:25:45,490
stem cell on top of the the physical

00:25:43,000 --> 00:25:47,860
machine right and after that Porsche is

00:25:45,490 --> 00:25:51,549
going to give it a CID to uniquely

00:25:47,860 --> 00:25:54,370
identify it and then after the machine

00:25:51,549 --> 00:25:56,200
is put up with the new image the posh

00:25:54,370 --> 00:25:58,029
asian would be communicating with the

00:25:56,200 --> 00:26:02,039
posh director to install the new harbour

00:25:58,029 --> 00:26:04,720
the new software which is the runner

00:26:02,039 --> 00:26:06,990
right so at this point is installing the

00:26:04,720 --> 00:26:06,990
job

00:26:12,640 --> 00:26:18,020
right so at this point the second

00:26:16,190 --> 00:26:22,280
runners too should also be up and

00:26:18,020 --> 00:26:24,200
running and I should be able to look at

00:26:22,280 --> 00:26:26,920
the status and scale out to more

00:26:24,200 --> 00:26:26,920
instance I guess

00:26:32,000 --> 00:26:37,550
all right so if I do CF app to look at

00:26:35,690 --> 00:26:39,470
the status all the jobs that were

00:26:37,550 --> 00:26:47,720
failing before should now be running

00:26:39,470 --> 00:26:50,420
right so one crashed but the rest are

00:26:47,720 --> 00:27:01,550
running and then now I can scale it out

00:26:50,420 --> 00:27:08,990
to more instance so 50 for example and

00:27:01,550 --> 00:27:11,630
then look in the status right so it

00:27:08,990 --> 00:27:15,590
might not be enough to test out the

00:27:11,630 --> 00:27:17,030
limitation of my harbor and I just want

00:27:15,590 --> 00:27:18,350
to see if that game is still functional

00:27:17,030 --> 00:27:25,340
right so at this point is still

00:27:18,350 --> 00:27:29,840
functional so now I scale it out to

00:27:25,340 --> 00:27:31,700
actually looking at the status again see

00:27:29,840 --> 00:27:33,710
that the job that crash last time is

00:27:31,700 --> 00:27:35,990
already resurrected by Cloud Foundry and

00:27:33,710 --> 00:27:41,350
now I'm ready to scare it out to more

00:27:35,990 --> 00:27:41,350
instance I think like 70 maybe yep

00:27:52,660 --> 00:27:57,910
yeah so now at this point I can come to

00:27:55,660 --> 00:28:00,520
a conclusion that my each month my note

00:27:57,910 --> 00:28:02,470
can take care of 31 jobs and with two

00:28:00,520 --> 00:28:04,840
jobs combined I actually have 32 jobs

00:28:02,470 --> 00:28:07,000
running at the same time and you know

00:28:04,840 --> 00:28:08,500
the rest is just not being started

00:28:07,000 --> 00:28:11,950
because I don't have enough computing

00:28:08,500 --> 00:28:14,560
power to to use them and anyway so that

00:28:11,950 --> 00:28:15,970
is the end of my talk I understand it's

00:28:14,560 --> 00:28:18,460
lunchtime already and you guys muchy

00:28:15,970 --> 00:28:20,650
hungry so feel free to take off thank

00:28:18,460 --> 00:28:21,420
you very much for coming to my session

00:28:20,650 --> 00:28:27,359
and

00:28:21,420 --> 00:28:27,359

YouTube URL: https://www.youtube.com/watch?v=B0aQ2kpxZRk


