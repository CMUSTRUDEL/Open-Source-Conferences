Title: Keynote: Cloud Native Transformation - The Journey Begins Here! - Ken Owens, Cisco
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Keynote: Cloud Native Transformation - The Journey Begins Here! - Ken Owens, CTO of Cloud Infrastructure Services, Cisco

Developers are driving the market for cloud consumption and leading each industry into the new era of software defined disruption. There are no longer questions about elastic and flexible agile development as the way to innovate and reduce time to market for businesses. However, current cloud solutions do not enable application development platforms natively or provide the ability to create applications that are cloud native with elastic services. In addition, businesses are moving to application development architectures leveraging microservices, which are becoming more strategic to their business strategy. When making the decision to build and operate an application in a cloud platform, microservices become central to your application architecture and strategy.  

This presentation will describe the Cloud Foundry contributions that address current devops challenges, the data platform that is required to support the business analytics, and the build, deploy, and run, including application monitoring and advanced user plane network enhancements.

The overall architecture of the combined contributions will be described with a customer use case.

Ken Owens 
CTO
Cisco
Greater St. Louis Area
Ken Owens is Chief Technology Officer, Cloud Infrastructure Services at Cisco. Ken is responsible for creating and communicating technical/scientific vision and strategy for Cloud Infrastructure Services (CIS) business. He brings a compelling view of technology trends in enterprise IT (e.g., infrastructure, computing, SaaS, virtualization, and cloud) and evangelizes the technology roadmap for the business. Before joining Cisco in 2014, Ken spent over 7 years at Savvis as the Chief Scientist, CTO, and VP Security and Virtualization Technologies. Prior assignments include 5 years as a network security architect at A.G. Edwards & Sons, Inc., and Edward Jones brokerage firms in St. Louis, Mo, and 10 years in the design and architecture of communications systems and components for Erlang Technologies, Tellabs, and Wiltel. Ken holds bachelor’s and master’s degrees in electrical engineering from Missouri University of Science and Technology.
Captions: 
	00:00:00,210 --> 00:00:03,629
for coming today I hope you've had a

00:00:01,380 --> 00:00:05,040
great great day and I know I've had a

00:00:03,629 --> 00:00:07,259
great day and enjoy Cloud Foundry

00:00:05,040 --> 00:00:09,660
stomach quite a bit so I want to kind of

00:00:07,259 --> 00:00:11,070
talk a little bit today sort of like the

00:00:09,660 --> 00:00:13,620
black holes discussion right what is

00:00:11,070 --> 00:00:15,030
this cloud native transformation mean to

00:00:13,620 --> 00:00:18,660
you right trying to put a little bit of

00:00:15,030 --> 00:00:22,529
like actual you know science behind how

00:00:18,660 --> 00:00:24,630
we're gonna get there sort of thinking

00:00:22,529 --> 00:00:26,609
about the cloud native and you got to

00:00:24,630 --> 00:00:28,019
kind of start with what does it mean

00:00:26,609 --> 00:00:30,090
right what how do you define cloud

00:00:28,019 --> 00:00:31,380
native talk about some of the you know

00:00:30,090 --> 00:00:32,790
for those of us who've been on this

00:00:31,380 --> 00:00:35,399
journey for some time what are the

00:00:32,790 --> 00:00:37,140
lessons that we've learned and I guess

00:00:35,399 --> 00:00:39,090
more importantly like what does that

00:00:37,140 --> 00:00:40,410
mean going forward right how do we take

00:00:39,090 --> 00:00:42,660
what we've learned and what we know

00:00:40,410 --> 00:00:44,550
today and move forward with that and

00:00:42,660 --> 00:00:46,559
then something I want kind of announced

00:00:44,550 --> 00:00:48,510
as exciting is some work that we've been

00:00:46,559 --> 00:00:51,629
doing with with mezzos and with the

00:00:48,510 --> 00:00:53,370
Cloud Foundry community and so what is

00:00:51,629 --> 00:00:54,930
cloud native cognitive is is simply

00:00:53,370 --> 00:00:56,850
defined by these three different areas

00:00:54,930 --> 00:00:59,760
right you have sort of container

00:00:56,850 --> 00:01:02,760
packaged so it's sort of how do you take

00:00:59,760 --> 00:01:05,519
an application and and look at making it

00:01:02,760 --> 00:01:07,260
sort of a subset of components how do

00:01:05,519 --> 00:01:10,560
you break that that that application

00:01:07,260 --> 00:01:13,170
into smaller pieces it's sort of the

00:01:10,560 --> 00:01:15,180
orchestration and dynamic management of

00:01:13,170 --> 00:01:16,619
that application so you have to one

00:01:15,180 --> 00:01:18,509
thing is having container packaged the

00:01:16,619 --> 00:01:20,189
next thing is orchestration and and the

00:01:18,509 --> 00:01:23,040
management of that in a dynamic

00:01:20,189 --> 00:01:24,990
environment and I think the last thing

00:01:23,040 --> 00:01:27,170
which gets overlooked a lot is it's this

00:01:24,990 --> 00:01:29,670
whole new sort of application

00:01:27,170 --> 00:01:32,040
architecture architecture application

00:01:29,670 --> 00:01:34,430
design pattern that is microservices

00:01:32,040 --> 00:01:36,720
enabled how do you take an application

00:01:34,430 --> 00:01:38,310
architecture and break it into the

00:01:36,720 --> 00:01:42,180
smaller components that you think can

00:01:38,310 --> 00:01:44,430
make containerized right so the third of

00:01:42,180 --> 00:01:45,990
the three areas that I that we think

00:01:44,430 --> 00:01:48,840
about when we talk about cloud native in

00:01:45,990 --> 00:01:50,130
the industry when you think about those

00:01:48,840 --> 00:01:52,590
three things do you think about the

00:01:50,130 --> 00:01:54,689
people in your in your organization your

00:01:52,590 --> 00:01:57,000
pricing well we've had a hard time just

00:01:54,689 --> 00:01:59,939
moving the cloud much less moving to you

00:01:57,000 --> 00:02:02,430
know this all microservices model I

00:01:59,939 --> 00:02:04,020
think it's important to realize that you

00:02:02,430 --> 00:02:06,540
have to work with you people help your

00:02:04,020 --> 00:02:09,690
people understand and these are like a

00:02:06,540 --> 00:02:11,940
employees developers and operators and

00:02:09,690 --> 00:02:14,040
DevOps team's help them understand what

00:02:11,940 --> 00:02:16,530
this means to them right

00:02:14,040 --> 00:02:18,569
you can't just use the term magic you

00:02:16,530 --> 00:02:19,859
know magically microservices fixes all

00:02:18,569 --> 00:02:26,400
of these problems right you still have a

00:02:19,859 --> 00:02:27,569
lot of of organizational legacy ways of

00:02:26,400 --> 00:02:28,980
doing your business that you have to

00:02:27,569 --> 00:02:30,180
look at you don't have to change all of

00:02:28,980 --> 00:02:32,790
them but you have to sort of look at

00:02:30,180 --> 00:02:36,209
which one to make sense to change versus

00:02:32,790 --> 00:02:38,189
which ones do not you also have like a

00:02:36,209 --> 00:02:41,879
lot of process areas to think about

00:02:38,189 --> 00:02:43,889
right and so this whole like SDLC

00:02:41,879 --> 00:02:46,709
process and this whole move towards

00:02:43,889 --> 00:02:50,129
agile development is great but it does

00:02:46,709 --> 00:02:52,379
come with a little bit of like a new

00:02:50,129 --> 00:02:54,060
methodology around how do you develop

00:02:52,379 --> 00:02:57,540
your code how do you manage to maintain

00:02:54,060 --> 00:02:59,299
your code how do you then deploy that in

00:02:57,540 --> 00:03:01,319
a you know a lot of different

00:02:59,299 --> 00:03:02,819
environments so it's I mean think about

00:03:01,319 --> 00:03:04,829
cloud you're not looking at just your

00:03:02,819 --> 00:03:06,810
own internal data centers anymore you're

00:03:04,829 --> 00:03:08,819
thinking about other environments as

00:03:06,810 --> 00:03:11,400
well typically and so how you kind of

00:03:08,819 --> 00:03:12,989
manage weave deployments across multiple

00:03:11,400 --> 00:03:15,389
environments once were infrastructure is

00:03:12,989 --> 00:03:17,730
how do you operate that that service

00:03:15,389 --> 00:03:21,540
across multiple environments how do you

00:03:17,730 --> 00:03:23,459
update it how do you men maintain sort

00:03:21,540 --> 00:03:25,049
of your your software differentiation

00:03:23,459 --> 00:03:27,560
when you're kind of deploying this

00:03:25,049 --> 00:03:31,470
service out into the the public Internet

00:03:27,560 --> 00:03:33,090
and there's this whole problem of it

00:03:31,470 --> 00:03:35,400
looks fine when I was developing and why

00:03:33,090 --> 00:03:38,549
isn't it working in in production right

00:03:35,400 --> 00:03:42,540
and so a lot of what we've seen in this

00:03:38,549 --> 00:03:44,609
process is that development is much more

00:03:42,540 --> 00:03:46,169
complicated now than it was before we've

00:03:44,609 --> 00:03:47,970
done a great job as an industry I think

00:03:46,169 --> 00:03:48,479
especially from an infrastructure side

00:03:47,970 --> 00:03:50,729
of things

00:03:48,479 --> 00:03:53,280
we made the infrastructure really simple

00:03:50,729 --> 00:03:55,079
really fast to get you of bm's or get

00:03:53,280 --> 00:03:57,810
your your containers right um it's very

00:03:55,079 --> 00:03:59,729
simple or to do this but you pushed all

00:03:57,810 --> 00:04:01,349
that complexity now to the developer and

00:03:59,729 --> 00:04:03,209
you ask a developer to make these hard

00:04:01,349 --> 00:04:06,030
choices about which how much CPU they

00:04:03,209 --> 00:04:07,560
need how much memory they need where

00:04:06,030 --> 00:04:09,329
they wanted to point that application so

00:04:07,560 --> 00:04:10,590
you kind of pushed we as an industry I

00:04:09,329 --> 00:04:13,409
think we kind of pushed the problem up

00:04:10,590 --> 00:04:15,599
to the to the software level and that's

00:04:13,409 --> 00:04:17,849
where like a lot of times you see this

00:04:15,599 --> 00:04:19,349
issue of it worked fine when I was you

00:04:17,849 --> 00:04:21,449
know testing on my laptop but why

00:04:19,349 --> 00:04:23,070
doesn't it work in production and the

00:04:21,449 --> 00:04:25,169
thing I've noticed with cloud native

00:04:23,070 --> 00:04:26,610
development is that it always works

00:04:25,169 --> 00:04:28,380
great when it works but when it doesn't

00:04:26,610 --> 00:04:29,520
it's very difficult to trouble

00:04:28,380 --> 00:04:33,570
that's a problem I think it's an

00:04:29,520 --> 00:04:35,820
industry we can solve for sure there's

00:04:33,570 --> 00:04:39,150
also obviously technology pieces as well

00:04:35,820 --> 00:04:40,380
right and so every everything in this in

00:04:39,150 --> 00:04:42,870
our industry has a lot of Technology

00:04:40,380 --> 00:04:44,130
pieces and so when you think about your

00:04:42,870 --> 00:04:46,350
data centers and how they're

00:04:44,130 --> 00:04:47,400
transforming always right you want to

00:04:46,350 --> 00:04:50,490
sort of think about something I call

00:04:47,400 --> 00:04:52,740
hybrid DevOps which is you're in a

00:04:50,490 --> 00:04:53,970
current state there's a future state

00:04:52,740 --> 00:04:56,820
you're going to always want to get to

00:04:53,970 --> 00:04:58,530
kind of building a continuous pipeline

00:04:56,820 --> 00:05:00,210
of going from where you're at to the

00:04:58,530 --> 00:05:02,370
future is something you should probably

00:05:00,210 --> 00:05:04,770
invest in now right instead of always

00:05:02,370 --> 00:05:06,660
having the next gen something let's

00:05:04,770 --> 00:05:09,060
create a platform that has sort of

00:05:06,660 --> 00:05:12,510
next-gen built into it so as next-gen

00:05:09,060 --> 00:05:14,400
comes around it's just a new service or

00:05:12,510 --> 00:05:16,200
a new capability that just shows up and

00:05:14,400 --> 00:05:18,000
you're in u.s. DLC you don't have to

00:05:16,200 --> 00:05:21,150
think about how do I involve this new

00:05:18,000 --> 00:05:22,890
platform the other thing that I think is

00:05:21,150 --> 00:05:25,230
interesting is this combination of

00:05:22,890 --> 00:05:27,800
infrastructure right and so when we talk

00:05:25,230 --> 00:05:29,970
about multiple clouds and hybrid cloud

00:05:27,800 --> 00:05:32,400
now you're asking basically your

00:05:29,970 --> 00:05:33,930
developers to not only understand how to

00:05:32,400 --> 00:05:35,970
write the application in a way that

00:05:33,930 --> 00:05:37,950
differentiates your business but they

00:05:35,970 --> 00:05:40,830
also have to now understand the api's of

00:05:37,950 --> 00:05:43,830
any sort of external cloud site they

00:05:40,830 --> 00:05:44,880
deploy into and so now they've in

00:05:43,830 --> 00:05:46,740
addition to making sure their

00:05:44,880 --> 00:05:48,600
application is helping your business

00:05:46,740 --> 00:05:50,670
grow and differentiating in your

00:05:48,600 --> 00:05:52,560
business they now have to understand how

00:05:50,670 --> 00:05:54,810
all these other cloud providers api's

00:05:52,560 --> 00:05:57,420
will support them and anytime there's a

00:05:54,810 --> 00:05:59,100
change to those api's guess whose job it

00:05:57,420 --> 00:06:01,170
is to figure that out to develop it

00:05:59,100 --> 00:06:03,960
right and so you just complicated their

00:06:01,170 --> 00:06:05,880
job again by saying hey go use this

00:06:03,960 --> 00:06:08,250
cloud provider they're great and they're

00:06:05,880 --> 00:06:10,050
like oh that's great but I don't know

00:06:08,250 --> 00:06:13,170
that that epi and I have to learn that

00:06:10,050 --> 00:06:14,460
API right and if you know if a provider

00:06:13,170 --> 00:06:15,830
comes along and says hey we'll give you

00:06:14,460 --> 00:06:17,250
a great deal or switch over to our cloud

00:06:15,830 --> 00:06:19,110
guess what

00:06:17,250 --> 00:06:21,210
it's again the developers job to figure

00:06:19,110 --> 00:06:23,370
out how to write to that API again right

00:06:21,210 --> 00:06:25,050
and they don't they might say they're

00:06:23,370 --> 00:06:27,300
compatible but they're really not so

00:06:25,050 --> 00:06:30,570
that's just kind of a trick there to

00:06:27,300 --> 00:06:33,030
remember from a technology standpoint so

00:06:30,570 --> 00:06:35,130
what are some of the lessons that that

00:06:33,030 --> 00:06:36,900
we as a community are learning not just

00:06:35,130 --> 00:06:38,310
not just the Cisco customers I work with

00:06:36,900 --> 00:06:40,360
but being in the community I've worked

00:06:38,310 --> 00:06:42,759
with a lot of different

00:06:40,360 --> 00:06:45,879
customers from different areas and so I

00:06:42,759 --> 00:06:49,210
think the first one is whatever you're

00:06:45,879 --> 00:06:50,830
doing from a deployment mat model have

00:06:49,210 --> 00:06:52,599
you orchestrating that deployment needs

00:06:50,830 --> 00:06:55,180
to be part of your test process right

00:06:52,599 --> 00:06:56,319
there's the sort of this new this new

00:06:55,180 --> 00:06:58,479
problem that we didn't really quite

00:06:56,319 --> 00:07:00,370
understand until recently that instead

00:06:58,479 --> 00:07:01,990
of it being it worked on my machine

00:07:00,370 --> 00:07:03,520
it's an OP problem now it's sort of like

00:07:01,990 --> 00:07:04,900
what orchestrated on my machine why

00:07:03,520 --> 00:07:08,680
doesn't it work in that environment

00:07:04,900 --> 00:07:11,590
right and so the more that you can take

00:07:08,680 --> 00:07:13,389
your your orchestration components that

00:07:11,590 --> 00:07:15,219
you leverage for deployments into

00:07:13,389 --> 00:07:17,740
whatever environment you deploy into and

00:07:15,219 --> 00:07:19,419
make that part of your build process and

00:07:17,740 --> 00:07:21,129
your testing of that build process I

00:07:19,419 --> 00:07:24,520
think the better off you are at solving

00:07:21,129 --> 00:07:26,889
this problem the other problem that

00:07:24,520 --> 00:07:30,719
we've we kind of looked at it at least

00:07:26,889 --> 00:07:32,469
from a Cisco standpoint is this entire

00:07:30,719 --> 00:07:34,419
infrastructure thing I mentioned before

00:07:32,469 --> 00:07:36,370
with we made it really easy for

00:07:34,419 --> 00:07:38,379
infrastructure we made it more difficult

00:07:36,370 --> 00:07:39,759
for the developers how do we sort of

00:07:38,379 --> 00:07:41,500
help the developer now how do we think

00:07:39,759 --> 00:07:44,020
more about the software develop it and

00:07:41,500 --> 00:07:46,810
make it easier for them to deploy their

00:07:44,020 --> 00:07:49,089
application make it easier to integrate

00:07:46,810 --> 00:07:50,620
with how they develop and so kind of

00:07:49,089 --> 00:07:52,569
this whole like as you build your

00:07:50,620 --> 00:07:54,250
application let the developer write in

00:07:52,569 --> 00:07:55,750
the programs that they like to write in

00:07:54,250 --> 00:07:58,000
right so a good example of that is Cloud

00:07:55,750 --> 00:07:59,710
Foundry is a very popular framework so

00:07:58,000 --> 00:08:01,629
why not allow the developer to develop

00:07:59,710 --> 00:08:04,150
in Cloud Foundry focus on their

00:08:01,629 --> 00:08:06,190
application and then separate the deploy

00:08:04,150 --> 00:08:08,020
from that piece so that you can then

00:08:06,190 --> 00:08:10,150
have a choice of places to deploy to

00:08:08,020 --> 00:08:12,580
that you've already sort of made sure

00:08:10,150 --> 00:08:14,469
that those api's work with that

00:08:12,580 --> 00:08:15,699
infrastructure deployment model right so

00:08:14,469 --> 00:08:17,050
you don't have to ask the developer to

00:08:15,699 --> 00:08:19,360
go figure out those infrastructure

00:08:17,050 --> 00:08:22,029
components and then give a single

00:08:19,360 --> 00:08:23,680
interface for that developer to look at

00:08:22,029 --> 00:08:25,750
that application running across those

00:08:23,680 --> 00:08:29,020
multiple hybrid clouds and understand

00:08:25,750 --> 00:08:30,490
how it's going to run there's there's

00:08:29,020 --> 00:08:32,860
this whole like aspect of how do you

00:08:30,490 --> 00:08:34,899
solve for this code issue right as you

00:08:32,860 --> 00:08:36,190
write your code and test it you want to

00:08:34,899 --> 00:08:39,219
kind of make sure that everything is

00:08:36,190 --> 00:08:40,899
working together the way you you know

00:08:39,219 --> 00:08:42,490
kind of take a big monolithic

00:08:40,899 --> 00:08:44,199
application and breaking into smaller

00:08:42,490 --> 00:08:46,420
components is important in this

00:08:44,199 --> 00:08:48,430
conversation because if you are going to

00:08:46,420 --> 00:08:49,990
think about applications in terms of

00:08:48,430 --> 00:08:52,540
smaller services and how those services

00:08:49,990 --> 00:08:52,940
interact it's important to consider it

00:08:52,540 --> 00:08:55,400
first

00:08:52,940 --> 00:08:57,920
how do I break that apart do i how many

00:08:55,400 --> 00:08:59,090
services do i need and there's a new

00:08:57,920 --> 00:09:01,490
term that we've been starting to use

00:08:59,090 --> 00:09:03,080
called nano services right you don't

00:09:01,490 --> 00:09:05,150
want to create a bunch of nano services

00:09:03,080 --> 00:09:08,060
where you're making individual component

00:09:05,150 --> 00:09:09,290
level calls to do like one function

00:09:08,060 --> 00:09:11,510
right you want to kind of break your

00:09:09,290 --> 00:09:14,150
your software into small enough chunks

00:09:11,510 --> 00:09:15,590
that you can execute them at a level of

00:09:14,150 --> 00:09:18,020
abstraction that doesn't require you to

00:09:15,590 --> 00:09:21,680
make individual calls to each individual

00:09:18,020 --> 00:09:24,080
component you also want to kind of

00:09:21,680 --> 00:09:25,490
understand how to control where these

00:09:24,080 --> 00:09:27,440
clouds would be and deploy to some

00:09:25,490 --> 00:09:29,750
extent right in this this is one of

00:09:27,440 --> 00:09:31,940
those like you know kind of debatable

00:09:29,750 --> 00:09:34,220
areas but you know I think there's still

00:09:31,940 --> 00:09:37,040
a desire for having policy and having an

00:09:34,220 --> 00:09:38,600
ability to kind of control compliance

00:09:37,040 --> 00:09:40,610
and governance type of areas and

00:09:38,600 --> 00:09:42,050
security components within that

00:09:40,610 --> 00:09:44,150
infrastructure and it in those

00:09:42,050 --> 00:09:45,350
deployments and so having the ability to

00:09:44,150 --> 00:09:47,870
sort of control that I think it's still

00:09:45,350 --> 00:09:49,960
important in this discussion and being

00:09:47,870 --> 00:09:52,760
to really make sure that that visibility

00:09:49,960 --> 00:09:54,770
extends across the entire spectrum right

00:09:52,760 --> 00:09:56,540
because today it's very difficult to

00:09:54,770 --> 00:09:59,120
isolate a problem because you have to

00:09:56,540 --> 00:10:01,190
login to four or five different consoles

00:09:59,120 --> 00:10:02,750
and maybe one of those consoles will

00:10:01,190 --> 00:10:05,390
tell you what the problem is but in most

00:10:02,750 --> 00:10:07,520
cases it's a combination of issues that

00:10:05,390 --> 00:10:11,750
that caused the problem and it's hard to

00:10:07,520 --> 00:10:13,340
isolate those so this is kind of tying

00:10:11,750 --> 00:10:15,050
back to the previous conversation right

00:10:13,340 --> 00:10:16,580
I think Einstein had a lot of great

00:10:15,050 --> 00:10:18,680
ideas but this is probably the best one

00:10:16,580 --> 00:10:20,450
right that when you're doing this it's

00:10:18,680 --> 00:10:22,880
such a complicated environment today

00:10:20,450 --> 00:10:24,770
let's make it simpler right let's try to

00:10:22,880 --> 00:10:26,980
make this a lot easier to do and I think

00:10:24,770 --> 00:10:28,910
when you look at cloud native

00:10:26,980 --> 00:10:30,560
architectures that's trying to get to

00:10:28,910 --> 00:10:32,750
that that discussion where we make

00:10:30,560 --> 00:10:34,670
things simpler in the end it may seem

00:10:32,750 --> 00:10:36,200
complicated if you get underneath the

00:10:34,670 --> 00:10:39,860
covers but it shouldn't seem as simple

00:10:36,200 --> 00:10:42,800
as possible the other thing is you know

00:10:39,860 --> 00:10:44,750
you don't want to have too much of a of

00:10:42,800 --> 00:10:47,450
a hierarchy within your organization so

00:10:44,750 --> 00:10:48,950
that you sort of you know cause you of

00:10:47,450 --> 00:10:51,110
your projects to fail because you just

00:10:48,950 --> 00:10:53,390
have too many different layers of

00:10:51,110 --> 00:10:56,150
individuals and processes and tooling

00:10:53,390 --> 00:10:58,940
that has to be gone through and so a big

00:10:56,150 --> 00:11:00,350
part of this is don't forget to look at

00:10:58,940 --> 00:11:02,240
your organization how you structure your

00:11:00,350 --> 00:11:05,920
teams how you structure your projects

00:11:02,240 --> 00:11:09,970
how you structure your your development

00:11:05,920 --> 00:11:11,620
projects and frameworks and then the

00:11:09,970 --> 00:11:14,730
last lesson those through this whole

00:11:11,620 --> 00:11:18,149
composition thing making these services

00:11:14,730 --> 00:11:20,019
as we usable as possible and as

00:11:18,149 --> 00:11:22,240
self-contained as possible is really

00:11:20,019 --> 00:11:24,040
important but don't forget that there's

00:11:22,240 --> 00:11:25,899
still linkages between these these

00:11:24,040 --> 00:11:27,339
services right and you it might be a

00:11:25,899 --> 00:11:28,810
loose coupling but there's still a

00:11:27,339 --> 00:11:32,110
coupling there they're not not lose

00:11:28,810 --> 00:11:33,640
track of and so that's sort of the like

00:11:32,110 --> 00:11:36,060
the lessons we've learned along the way

00:11:33,640 --> 00:11:38,649
and they're still learning I should say

00:11:36,060 --> 00:11:40,149
and so then what when we talk about next

00:11:38,649 --> 00:11:42,130
is sort of what what I've been working

00:11:40,149 --> 00:11:44,230
on at Cisco is creating a mezzos

00:11:42,130 --> 00:11:47,980
framework to support all the cloud

00:11:44,230 --> 00:11:49,690
native services and it's kind of common

00:11:47,980 --> 00:11:51,160
and containerize what i'm like trying to

00:11:49,690 --> 00:11:53,290
containerized cloud founders what we're

00:11:51,160 --> 00:11:54,519
trying to do I'm working with the

00:11:53,290 --> 00:11:57,820
foundation right now to sort of get

00:11:54,519 --> 00:11:59,740
certification for this work but the idea

00:11:57,820 --> 00:12:02,260
was sort of taking each of the different

00:11:59,740 --> 00:12:03,910
CF components and putting them inside a

00:12:02,260 --> 00:12:05,140
framework and we're demoing this in our

00:12:03,910 --> 00:12:07,660
booth if you want to come down and see

00:12:05,140 --> 00:12:10,990
it tomorrow but all the different

00:12:07,660 --> 00:12:13,660
aspects of of a Cloud Foundry deployment

00:12:10,990 --> 00:12:16,180
you can leverage with then Maysles

00:12:13,660 --> 00:12:18,040
framework and then what we did was would

00:12:16,180 --> 00:12:20,649
kind of tie it into the pipeline of

00:12:18,040 --> 00:12:23,980
course so as new capabilities come out

00:12:20,649 --> 00:12:26,440
we get we picked them up and we you know

00:12:23,980 --> 00:12:28,089
create the relevant framework changes

00:12:26,440 --> 00:12:31,630
and highlight those changes in the in

00:12:28,089 --> 00:12:33,790
the pipeline and then the the other

00:12:31,630 --> 00:12:35,890
thing is a lot of administration has

00:12:33,790 --> 00:12:37,660
been done in a lot of enterprises to

00:12:35,890 --> 00:12:39,940
take Cloud Foundry and kind of leverage

00:12:37,660 --> 00:12:41,740
the authentication mechanisms so we want

00:12:39,940 --> 00:12:45,910
to make sure we supported that as

00:12:41,740 --> 00:12:47,170
seamlessly as possible so good student

00:12:45,910 --> 00:12:49,899
learning more about any of these

00:12:47,170 --> 00:12:52,779
projects we have a couple of sites you

00:12:49,899 --> 00:12:55,779
can go look at matt rely oh this is an

00:12:52,779 --> 00:12:58,260
open source project that cisco started

00:12:55,779 --> 00:13:01,390
but it's a large community now it's

00:12:58,260 --> 00:13:03,160
definitely not I think I have like eight

00:13:01,390 --> 00:13:04,930
developers on it but there's like 70

00:13:03,160 --> 00:13:08,190
developers working on the project so it

00:13:04,930 --> 00:13:11,589
was definitely not a Cisco only project

00:13:08,190 --> 00:13:13,300
but the whole point of a mantle was sort

00:13:11,589 --> 00:13:15,100
of taking the Best of Breed open source

00:13:13,300 --> 00:13:19,070
components and bringing them together

00:13:15,100 --> 00:13:21,440
and making it easier and simpler to run

00:13:19,070 --> 00:13:22,790
services and and just whole new

00:13:21,440 --> 00:13:24,230
infrastructure that we're calling micro

00:13:22,790 --> 00:13:27,890
services infrastructure I'm making this

00:13:24,230 --> 00:13:30,140
whole cloud native model a lot easier we

00:13:27,890 --> 00:13:32,000
also have a developer experience to kind

00:13:30,140 --> 00:13:33,560
of go along with this it sort of looks

00:13:32,000 --> 00:13:38,420
at that problem I mentioned earlier of

00:13:33,560 --> 00:13:40,190
trying to solve this developer making it

00:13:38,420 --> 00:13:41,810
easier for developers to build and

00:13:40,190 --> 00:13:42,860
deploy and run their applications

00:13:41,810 --> 00:13:44,360
without having to worry about the

00:13:42,860 --> 00:13:46,850
underlying complexities of the

00:13:44,360 --> 00:13:50,150
infrastructure and so that's at Cisco

00:13:46,850 --> 00:13:54,140
ship calm and sorry the souping Cisco

00:13:50,150 --> 00:13:56,600
ship dot IO and then so those are sort

00:13:54,140 --> 00:13:58,610
of the two big projects we have the the

00:13:56,600 --> 00:14:00,770
work we're doing and in cloud foundry

00:13:58,610 --> 00:14:03,710
terrorizing a foundry as part of that

00:14:00,770 --> 00:14:07,660
mantle IO site so you can look at that

00:14:03,710 --> 00:14:09,830
code if you want and so in summary the

00:14:07,660 --> 00:14:12,020
clowny the transformation is something

00:14:09,830 --> 00:14:14,060
that is occurring in most places already

00:14:12,020 --> 00:14:15,380
most of you guys are here because you're

00:14:14,060 --> 00:14:17,360
part of that already so there's no

00:14:15,380 --> 00:14:18,980
reason for me to make it you know more

00:14:17,360 --> 00:14:20,600
obvious than this is happening you can

00:14:18,980 --> 00:14:24,290
look around and see other people here so

00:14:20,600 --> 00:14:25,340
we know it's happening there are the

00:14:24,290 --> 00:14:27,500
things you need to think about with your

00:14:25,340 --> 00:14:29,210
people and and your organization on how

00:14:27,500 --> 00:14:32,590
you look at that there are things in the

00:14:29,210 --> 00:14:34,730
process and and making sure that your

00:14:32,590 --> 00:14:36,410
orchestration is happening as part of

00:14:34,730 --> 00:14:40,430
your development process versus and

00:14:36,410 --> 00:14:42,260
after the fact thing and there's a lot

00:14:40,430 --> 00:14:44,000
of lessons to be learned on sort of how

00:14:42,260 --> 00:14:45,650
do you adopt new technologies and make

00:14:44,000 --> 00:14:49,070
this more continuous from the beginning

00:14:45,650 --> 00:14:50,870
and then the interesting you've hinted

00:14:49,070 --> 00:14:52,310
in the look on the meso stuff we're

00:14:50,870 --> 00:14:54,680
doing I'm also trying to do the same

00:14:52,310 --> 00:14:57,050
thing with kubernetes and so my goal is

00:14:54,680 --> 00:14:59,120
to sort of make it an open platform that

00:14:57,050 --> 00:15:00,500
allows a lot of different choice for the

00:14:59,120 --> 00:15:02,480
developer and for the infrastructure

00:15:00,500 --> 00:15:04,400
admins and so that's sort of what we're

00:15:02,480 --> 00:15:06,260
working on and thank you very much for

00:15:04,400 --> 00:15:10,620
your time

00:15:06,260 --> 00:15:10,620

YouTube URL: https://www.youtube.com/watch?v=kizoD2mZpVw


