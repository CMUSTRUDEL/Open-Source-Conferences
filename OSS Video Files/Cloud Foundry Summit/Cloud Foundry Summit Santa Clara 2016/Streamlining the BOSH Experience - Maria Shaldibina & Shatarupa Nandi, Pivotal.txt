Title: Streamlining the BOSH Experience - Maria Shaldibina & Shatarupa Nandi, Pivotal
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	BOSH has proven to be a go-to tool for managing Cloud Foundry and other complex service installations. But when infrastructure grows and number of deployments increases significantly new challenges arise: how easy is it to configure each deployment and connect them together, or how can deployment operators quickly understand requirements specified by software they are deploying. BOSH has made lots of progress in the past year to solve challenges of large multi-deployment installations. 

In this talk core BOSH contributors will introduce recently released BOSH features and improvements with the aim of lowering the barrier to entry to deploying software with BOSH. Service broker authors, distributed software developers, release and operations engineers will be provided with new tools to compose and share cluster topologies. 

Maria and Rupa will also talk about the development process: driving features with a comprehensive test suite (including fuzz and load tests), overcoming friction in a well-established open-source codebase, extending functionality while maintaining backwards compatibility and enabling recovery from misconfigurations while migrating to new functionality. 

Shatarupa Nandi
Software Engineer, Pivotal, Inc.
Rupa is a consultant at Pivotal Labs. Rupa has developed various data services running on CF (such as Pivotal Hadoop for PCF, Pivotal Gemfire for PCF and others) and is currently a developer on the BOSH team. Rupa enjoys using CF to build distributed data services and exploring problems involving persistence, networking and service discovery in the cloud.

Maria Shaldibina
Software Engineer, Pivotal
Maria is a software engineer at Pivotal, currently anchoring the BOSH team at Pivotal. She started working on Cloud Foundry four years ago at VMware, since then she worked on different parts of Cloud Foundry, such as staging and running applications, and for the past two years she has been working on BOSH - infrastructure agnostic tool that is used by Cloud Foundry for release engineering and deployment automation.
Captions: 
	00:00:00,030 --> 00:00:06,569
hello everyone welcome to the talk

00:00:03,449 --> 00:00:08,910
streamlining the boss experience my name

00:00:06,569 --> 00:00:11,940
is Maria shell Divina I'm a software

00:00:08,910 --> 00:00:13,679
engineer at pivotal I've been I've been

00:00:11,940 --> 00:00:17,010
working on cloud foundry for four years

00:00:13,679 --> 00:00:19,550
and primarily on Bosch and now I'm

00:00:17,010 --> 00:00:23,279
working on concourse

00:00:19,550 --> 00:00:25,080
hi I'm Rupa I'm also a software engineer

00:00:23,279 --> 00:00:26,939
at pivotal I've been working on Bosch

00:00:25,080 --> 00:00:30,029
for close to a year now and before that

00:00:26,939 --> 00:00:31,710
for the past couple of years I've been

00:00:30,029 --> 00:00:33,329
working on pushing apps on Cloud Foundry

00:00:31,710 --> 00:00:35,790
writing service brokers on Cloud Foundry

00:00:33,329 --> 00:00:37,860
and using Cloud Foundry so today we're

00:00:35,790 --> 00:00:39,899
gonna talk to you about streamlining the

00:00:37,860 --> 00:00:41,700
boss experience in which we're gonna

00:00:39,899 --> 00:00:44,789
talk a bit about some of the features we

00:00:41,700 --> 00:00:47,010
worked on for the past year and a little

00:00:44,789 --> 00:00:49,289
bit about what motivated us to work on

00:00:47,010 --> 00:00:52,289
those we'll also talk a little bit about

00:00:49,289 --> 00:00:54,030
our testing to tell you about why you

00:00:52,289 --> 00:00:58,559
should be having a lot of confidence in

00:00:54,030 --> 00:01:01,199
these features so why were we doing some

00:00:58,559 --> 00:01:02,910
of this work for the past year we have

00:01:01,199 --> 00:01:07,619
an incredible community here at Bosch

00:01:02,910 --> 00:01:09,210
and we got a lot of feedback about how

00:01:07,619 --> 00:01:11,430
people were using Bosch and what they'd

00:01:09,210 --> 00:01:13,740
like to see on Bosch specifically one of

00:01:11,430 --> 00:01:17,610
the things we heard was there was a lot

00:01:13,740 --> 00:01:20,509
of Yama and the sciama was kind of hard

00:01:17,610 --> 00:01:22,470
to manage also put in with bad

00:01:20,509 --> 00:01:25,080
networking and put in with bad

00:01:22,470 --> 00:01:26,759
availability zones this made it that

00:01:25,080 --> 00:01:29,909
they made it so that there was a lot of

00:01:26,759 --> 00:01:32,729
duplicate Yama second thing we heard was

00:01:29,909 --> 00:01:35,130
you wanted to use Bosch for bus

00:01:32,729 --> 00:01:38,430
production use cases and you wanted to

00:01:35,130 --> 00:01:41,880
see Bosch be ready for handling some of

00:01:38,430 --> 00:01:44,549
that at pivotal as we were using Bosch

00:01:41,880 --> 00:01:46,560
for deploying dynamic services we

00:01:44,549 --> 00:01:49,020
noticed also that there wasn't really a

00:01:46,560 --> 00:01:50,820
great way to share properties between

00:01:49,020 --> 00:01:53,189
deployments and to share networks

00:01:50,820 --> 00:01:54,720
between deployments so these were some

00:01:53,189 --> 00:01:56,700
of the things that we wanted to address

00:01:54,720 --> 00:01:58,500
for the past year and this is what this

00:01:56,700 --> 00:02:02,240
talk is going to be about and telling

00:01:58,500 --> 00:02:02,240
you how we address some of that on Bosch

00:02:03,049 --> 00:02:08,759
so let's start by looking one at one of

00:02:06,119 --> 00:02:11,520
the biggest pain points that used to be

00:02:08,759 --> 00:02:15,090
in Bosch which is infrastructure in

00:02:11,520 --> 00:02:17,430
for configuration managing IP

00:02:15,090 --> 00:02:20,340
allocations used to be a big headache

00:02:17,430 --> 00:02:22,590
for deployment operators if you ever

00:02:20,340 --> 00:02:24,540
manage deployments with Bosch you know

00:02:22,590 --> 00:02:27,870
every time you want to scale up the

00:02:24,540 --> 00:02:31,740
number of instances or introduced a new

00:02:27,870 --> 00:02:35,040
job you need to make sure we use IPS

00:02:31,740 --> 00:02:39,500
that are already used by existing VMs

00:02:35,040 --> 00:02:41,760
and if you introduce a new deployment

00:02:39,500 --> 00:02:45,000
you need to make sure it's not gonna

00:02:41,760 --> 00:02:47,970
reuse IPs that other deployments are

00:02:45,000 --> 00:02:49,820
using so sometimes you even had to go

00:02:47,970 --> 00:02:52,950
back and update your existing

00:02:49,820 --> 00:02:56,670
deployments with the reserved IP pool of

00:02:52,950 --> 00:03:00,780
your new deployment so operators Alec

00:02:56,670 --> 00:03:04,830
surgeons had to slice out IP pools for

00:03:00,780 --> 00:03:07,740
different deployments also since all

00:03:04,830 --> 00:03:10,140
infrastructure properties were spread

00:03:07,740 --> 00:03:13,110
out across different deployment

00:03:10,140 --> 00:03:15,510
manifests whenever you wanted to update

00:03:13,110 --> 00:03:19,410
your infrastructure property you had you

00:03:15,510 --> 00:03:24,290
had to go over all your deployments and

00:03:19,410 --> 00:03:29,420
update them to keep them in sync so

00:03:24,290 --> 00:03:31,770
introducing cloud config cloud config is

00:03:29,420 --> 00:03:33,600
infrastructure specific configurations

00:03:31,770 --> 00:03:36,840
that your director is configured with

00:03:33,600 --> 00:03:41,850
and it is shared by all deployments that

00:03:36,840 --> 00:03:43,620
are managed by that director once

00:03:41,850 --> 00:03:46,560
directory is configured with cloud

00:03:43,620 --> 00:03:49,830
config bore starts taking care of IP

00:03:46,560 --> 00:03:52,440
allocations for you so you don't have to

00:03:49,830 --> 00:03:56,310
worry about what IPS are currently in

00:03:52,440 --> 00:03:58,770
use since all the networks will be

00:03:56,310 --> 00:04:02,010
shared across deployment the boss will

00:03:58,770 --> 00:04:04,440
know what IP is a currently in use and

00:04:02,010 --> 00:04:08,520
what IP it can allocate to the next

00:04:04,440 --> 00:04:11,280
instance also that allows two separate

00:04:08,520 --> 00:04:14,160
responsibilities between deployment

00:04:11,280 --> 00:04:17,100
operators and infrastructure operators

00:04:14,160 --> 00:04:19,380
so now deployment operators can focus on

00:04:17,100 --> 00:04:23,770
their deployment layout and don't worry

00:04:19,380 --> 00:04:26,410
about infrastructure specific properties

00:04:23,770 --> 00:04:29,530
so let's take a look what constitutes

00:04:26,410 --> 00:04:32,470
cloud config this is how a deployment

00:04:29,530 --> 00:04:36,069
manifests used to look like it contains

00:04:32,470 --> 00:04:38,560
some deployment information lists of

00:04:36,069 --> 00:04:41,560
releases that deployment will use it

00:04:38,560 --> 00:04:46,120
listed some networks with cloud specific

00:04:41,560 --> 00:04:49,020
properties and listed resource pools

00:04:46,120 --> 00:04:52,000
which are basically types of VMs that

00:04:49,020 --> 00:04:55,990
deployment can use and it also had some

00:04:52,000 --> 00:04:59,530
cloud specific properties and referenced

00:04:55,990 --> 00:05:01,780
some stem-cell in them also disk pool

00:04:59,530 --> 00:05:05,940
section listed types of disks that you

00:05:01,780 --> 00:05:08,949
can provision in your cloud provider and

00:05:05,940 --> 00:05:12,039
compilation sections defined how both

00:05:08,949 --> 00:05:14,289
should compile the packages and what

00:05:12,039 --> 00:05:16,840
type of VM it should use to compile it

00:05:14,289 --> 00:05:21,490
usually it's the most CPU efficient VM

00:05:16,840 --> 00:05:23,229
type an update section defines how to

00:05:21,490 --> 00:05:28,389
perform a rolling update of your

00:05:23,229 --> 00:05:30,909
deployment and jobs define what to

00:05:28,389 --> 00:05:37,930
install and how your deployment should

00:05:30,909 --> 00:05:40,180
look like so what is cloud config clouds

00:05:37,930 --> 00:05:42,340
graphic is basically that it's your

00:05:40,180 --> 00:05:46,210
infrastructure specific properties now

00:05:42,340 --> 00:05:48,490
in one place and it defines types of

00:05:46,210 --> 00:05:51,690
resources that your deployments can use

00:05:48,490 --> 00:05:54,550
like networks types of VMs disk types

00:05:51,690 --> 00:05:56,409
compilation so that leaves your

00:05:54,550 --> 00:06:01,180
deployment manifest focused on your

00:05:56,409 --> 00:06:03,099
deployment layout and potentially it

00:06:01,180 --> 00:06:06,569
makes it easier to migrate a deployment

00:06:03,099 --> 00:06:09,969
manifest to different infrastructures

00:06:06,569 --> 00:06:13,900
also notice that resource pools were

00:06:09,969 --> 00:06:17,169
renamed to VM types and this was renamed

00:06:13,900 --> 00:06:20,259
to disk types and stem cells were split

00:06:17,169 --> 00:06:24,060
out to deploy manifest because different

00:06:20,259 --> 00:06:24,060
deployments can use different stem cells

00:06:24,120 --> 00:06:29,430
so the way you configure your director

00:06:26,830 --> 00:06:32,409
with cloud can configure on this command

00:06:29,430 --> 00:06:35,620
now once the director is configured with

00:06:32,409 --> 00:06:36,610
the cloud configuration director will

00:06:35,620 --> 00:06:40,030
virtual

00:06:36,610 --> 00:06:42,879
start allocating IP IP is for you and

00:06:40,030 --> 00:06:46,180
you don't have to worry about IP

00:06:42,879 --> 00:06:47,710
allocation from that point once your

00:06:46,180 --> 00:06:51,129
directory is configured with client can

00:06:47,710 --> 00:06:54,250
see your deployments that already

00:06:51,129 --> 00:06:57,310
deployed will still behave as it used to

00:06:54,250 --> 00:07:00,219
be but they will start using cloud

00:06:57,310 --> 00:07:06,310
configuration whenever you redeploy them

00:07:00,219 --> 00:07:08,650
one on the next deploy with cloud

00:07:06,310 --> 00:07:11,319
configure deploy manifests we will look

00:07:08,650 --> 00:07:13,689
a little bit different as you can see it

00:07:11,319 --> 00:07:16,509
is much smaller it doesn't have any

00:07:13,689 --> 00:07:20,830
cloud configuration unit the stem cells

00:07:16,509 --> 00:07:23,139
section is a new section and now you can

00:07:20,830 --> 00:07:26,110
reference themselves by operating system

00:07:23,139 --> 00:07:31,180
image name instead of using specific

00:07:26,110 --> 00:07:34,830
name of the stem cell also notice that

00:07:31,180 --> 00:07:38,080
jobs were renamed to instance groups and

00:07:34,830 --> 00:07:40,690
jobs used to be an overloaded term in

00:07:38,080 --> 00:07:43,719
Bosch every time we're talking about

00:07:40,690 --> 00:07:45,430
jobs we had to clarify what jobs are

00:07:43,719 --> 00:07:48,339
you're talking about is this release job

00:07:45,430 --> 00:07:51,460
or deployment job so now this confusion

00:07:48,339 --> 00:07:54,900
is resolved now jobs are release jobs

00:07:51,460 --> 00:08:02,860
and templates already name to jobs and

00:07:54,900 --> 00:08:06,009
jobs were in name two instance groups so

00:08:02,860 --> 00:08:09,310
we know very well that Bosch is good at

00:08:06,009 --> 00:08:12,279
deploying Cloud Foundry however if

00:08:09,310 --> 00:08:15,069
you've tried to deploy any clustered

00:08:12,279 --> 00:08:17,020
software with Bosch and you are often in

00:08:15,069 --> 00:08:18,400
this situation where you have a master

00:08:17,020 --> 00:08:21,580
node and you have a couple of slave

00:08:18,400 --> 00:08:23,740
nodes trying to find the master node how

00:08:21,580 --> 00:08:26,770
do you do this some people were doing

00:08:23,740 --> 00:08:29,110
this with static IPS but that meant you

00:08:26,770 --> 00:08:32,130
have hard-coded IPS in your manifest

00:08:29,110 --> 00:08:34,810
llamó which made it harder to manage

00:08:32,130 --> 00:08:36,969
also even if you could do that for a

00:08:34,810 --> 00:08:39,459
single deployment what if you had a web

00:08:36,969 --> 00:08:42,659
server that now dependent on this would

00:08:39,459 --> 00:08:45,490
you hard-code static IPS for your

00:08:42,659 --> 00:08:47,780
different deployment in the manifest of

00:08:45,490 --> 00:08:51,770
your web server but

00:08:47,780 --> 00:08:53,600
awkward some people were using H a

00:08:51,770 --> 00:08:56,050
configuration servers for this so

00:08:53,600 --> 00:08:59,740
something like @ CD or zookeeper but

00:08:56,050 --> 00:09:02,390
that added more points of failure and

00:08:59,740 --> 00:09:05,560
there was also the spoof solution but

00:09:02,390 --> 00:09:05,560
I'm not gonna talk about that

00:09:05,680 --> 00:09:12,830
so now introducing links links provides

00:09:10,520 --> 00:09:16,550
a way for these authors to very

00:09:12,830 --> 00:09:18,590
concisely state what you provide as a

00:09:16,550 --> 00:09:21,950
release and what you can see a messy

00:09:18,590 --> 00:09:23,960
release this makes the public API a

00:09:21,950 --> 00:09:25,700
fairly is very clear and you can now

00:09:23,960 --> 00:09:27,470
depend on other things without having to

00:09:25,700 --> 00:09:29,660
specify implementation details like

00:09:27,470 --> 00:09:33,080
exact IPS or exact properties that you

00:09:29,660 --> 00:09:35,330
depend on it also makes it really easy

00:09:33,080 --> 00:09:38,390
for the deployment operator because they

00:09:35,330 --> 00:09:41,000
now can only see what release what each

00:09:38,390 --> 00:09:44,360
job consumes and what each job provides

00:09:41,000 --> 00:09:46,480
as opposed to specifying duplicate

00:09:44,360 --> 00:09:49,480
properties across each section and

00:09:46,480 --> 00:09:53,660
specifying particular IPS for each job

00:09:49,480 --> 00:09:55,940
as a release author you also have access

00:09:53,660 --> 00:09:59,060
to other things that our link provides

00:09:55,940 --> 00:10:00,320
you in your release templates so for

00:09:59,060 --> 00:10:03,920
example over here

00:10:00,320 --> 00:10:07,400
this release author is consuming name ID

00:10:03,920 --> 00:10:09,680
and address from primary DB this also

00:10:07,400 --> 00:10:11,510
reduces the amount of llamó because you

00:10:09,680 --> 00:10:14,030
no longer need to duplicate all these

00:10:11,510 --> 00:10:15,920
properties across all jobs in your

00:10:14,030 --> 00:10:18,890
manifest you can now just specify a

00:10:15,920 --> 00:10:22,460
dependency on a link a good success

00:10:18,890 --> 00:10:24,680
story for links is Concours used to use

00:10:22,460 --> 00:10:27,620
a lot of static IPS and their deployment

00:10:24,680 --> 00:10:29,780
but now their deployment manifest is

00:10:27,620 --> 00:10:35,839
completely for your static IPS and is

00:10:29,780 --> 00:10:38,150
only using links so another feature that

00:10:35,839 --> 00:10:42,410
was equal that was introduced its

00:10:38,150 --> 00:10:43,820
availability zones if you ever had to

00:10:42,410 --> 00:10:46,820
spread your instances across

00:10:43,820 --> 00:10:49,730
availability zones in bosh you know how

00:10:46,820 --> 00:10:51,740
awkward it used to be basically you had

00:10:49,730 --> 00:10:54,050
to duplicate some sections of your

00:10:51,740 --> 00:10:58,220
deployment manifest like networks

00:10:54,050 --> 00:11:00,470
resource pools instances and give them

00:10:58,220 --> 00:11:03,950
different names like Z 1 and z

00:11:00,470 --> 00:11:06,370
- and the only property that's gonna be

00:11:03,950 --> 00:11:11,930
different there is their availability

00:11:06,370 --> 00:11:14,120
zone cloud property so now I will go to

00:11:11,930 --> 00:11:17,450
zones are first class citizens and wash

00:11:14,120 --> 00:11:19,640
so that what that means is that you can

00:11:17,450 --> 00:11:22,040
list availability zones in your cloud

00:11:19,640 --> 00:11:25,430
config and you can reference them in

00:11:22,040 --> 00:11:27,730
your instance groups and boss will take

00:11:25,430 --> 00:11:30,260
care of automatically rebalancing

00:11:27,730 --> 00:11:30,860
instances across those availability

00:11:30,260 --> 00:11:33,050
zones

00:11:30,860 --> 00:11:36,610
whenever you scale up the number of

00:11:33,050 --> 00:11:40,600
instances or scale down bars will

00:11:36,610 --> 00:11:45,620
automatically balance those instances

00:11:40,600 --> 00:11:48,710
also we plan on adding a feature to

00:11:45,620 --> 00:11:51,710
manage your availability zone State so

00:11:48,710 --> 00:11:54,410
you can turn off a you availability zone

00:11:51,710 --> 00:11:57,230
and Bosch will distribute instances in

00:11:54,410 --> 00:12:00,650
that availability zone across remaining

00:11:57,230 --> 00:12:03,230
availability zones so how does it look

00:12:00,650 --> 00:12:05,000
like you specify the list of

00:12:03,230 --> 00:12:07,000
availability zones with their cloud

00:12:05,000 --> 00:12:10,250
properties in the cloud config and then

00:12:07,000 --> 00:12:13,640
you reference them in your instance

00:12:10,250 --> 00:12:17,690
group so as you can see there is no

00:12:13,640 --> 00:12:22,610
duplication it's much smaller and looks

00:12:17,690 --> 00:12:25,220
much nicer in case if you already have

00:12:22,610 --> 00:12:27,380
an existing deployment that used

00:12:25,220 --> 00:12:31,460
availability zones before this feature

00:12:27,380 --> 00:12:33,590
was introduced you can migrate to two

00:12:31,460 --> 00:12:36,650
availability zones by using migrated

00:12:33,590 --> 00:12:41,000
from property and basically what it does

00:12:36,650 --> 00:12:44,420
it merges your instance groups into one

00:12:41,000 --> 00:12:47,690
and Bosch will take care of preserving

00:12:44,420 --> 00:12:51,700
existing instances renaming them and

00:12:47,690 --> 00:12:51,700
assigning availability zones to them

00:12:52,089 --> 00:12:59,270
usually release offers would like to

00:12:55,339 --> 00:13:03,470
know what node is being deployed first

00:12:59,270 --> 00:13:07,370
so that they can run some set up like

00:13:03,470 --> 00:13:10,160
database migrations and they used to

00:13:07,370 --> 00:13:11,370
rely on instance index to figure that

00:13:10,160 --> 00:13:15,089
out

00:13:11,370 --> 00:13:18,300
and you can imagine how complicated that

00:13:15,089 --> 00:13:19,920
looked like if you had those instances

00:13:18,300 --> 00:13:22,440
that was spread across availability

00:13:19,920 --> 00:13:25,020
zones because you had multiple instances

00:13:22,440 --> 00:13:28,170
of index zero well you should not rely

00:13:25,020 --> 00:13:31,020
on indexes anymore and instead you

00:13:28,170 --> 00:13:34,890
should use this bootstrap property which

00:13:31,020 --> 00:13:38,490
was introduced and that will tell

00:13:34,890 --> 00:13:43,170
release that the note that's being

00:13:38,490 --> 00:13:45,060
deployed is the first note and you can

00:13:43,170 --> 00:13:48,420
put that in your release configuration

00:13:45,060 --> 00:13:54,990
file templates to run some set up like

00:13:48,420 --> 00:13:57,570
database migrations so as we introduced

00:13:54,990 --> 00:14:01,980
a lot of these new features we noticed

00:13:57,570 --> 00:14:04,589
that the boss director was doing a lot a

00:14:01,980 --> 00:14:06,960
lot more than it was doing before and we

00:14:04,589 --> 00:14:10,050
wanted to make sure that we were

00:14:06,960 --> 00:14:14,130
constantly testing it as as much as we

00:14:10,050 --> 00:14:16,740
could so keeping in mind that it was now

00:14:14,130 --> 00:14:19,650
responsible for IP allocations we wanted

00:14:16,740 --> 00:14:21,660
to introduce a set of load tests load

00:14:19,650 --> 00:14:24,390
tests that as we have it currently

00:14:21,660 --> 00:14:27,029
deploy a hundred deployments in parallel

00:14:24,390 --> 00:14:29,010
and they try to catch race conditions

00:14:27,029 --> 00:14:31,709
specifically read/write race conditions

00:14:29,010 --> 00:14:33,959
around IP allocation to ensure that when

00:14:31,709 --> 00:14:36,930
we are allocating IP is really extra

00:14:33,959 --> 00:14:40,170
cautious and there is no IP conflicts

00:14:36,930 --> 00:14:42,480
that happen the other thing we

00:14:40,170 --> 00:14:44,130
introduced was first tests and what we

00:14:42,480 --> 00:14:46,860
wanted to do with this is we wanted to

00:14:44,130 --> 00:14:49,020
introduce some extra Tory testing into

00:14:46,860 --> 00:14:51,150
our process so on top of the unit

00:14:49,020 --> 00:14:53,370
testing and integration testing and

00:14:51,150 --> 00:14:57,570
test-driven development we wanted to

00:14:53,370 --> 00:15:01,260
simulate a user using Easy's and trying

00:14:57,570 --> 00:15:04,260
to rebalance across aziz in a very

00:15:01,260 --> 00:15:05,910
random fashion so we were trying to

00:15:04,260 --> 00:15:07,950
force edge cases and make sure that

00:15:05,910 --> 00:15:11,120
Bosch director behaved in the way that

00:15:07,950 --> 00:15:13,890
you expected to even after strange

00:15:11,120 --> 00:15:16,380
rebalancing or making sure that your

00:15:13,890 --> 00:15:19,700
data was always safe and did not get

00:15:16,380 --> 00:15:22,470
detached from the deployment even after

00:15:19,700 --> 00:15:24,420
it was rebalance or different IPS were

00:15:22,470 --> 00:15:26,269
allocated to it

00:15:24,420 --> 00:15:28,769
we hope at load and first test we've

00:15:26,269 --> 00:15:30,959
tested the system to the extreme and

00:15:28,769 --> 00:15:36,149
that what we've released is really ready

00:15:30,959 --> 00:15:38,790
for production use however there are

00:15:36,149 --> 00:15:42,300
always accidents that unfortunately do

00:15:38,790 --> 00:15:44,490
happen and in this case the one thing we

00:15:42,300 --> 00:15:47,160
really wanted to be clear with is that

00:15:44,490 --> 00:15:50,579
we never lose any data we all love our

00:15:47,160 --> 00:15:53,029
data and it's very precious to us so we

00:15:50,579 --> 00:15:56,070
introduced the idea of orphaned disks

00:15:53,029 --> 00:15:58,889
orphan disks introduces a form of soft

00:15:56,070 --> 00:16:01,949
deletion of persistent disks to Bosch

00:15:58,889 --> 00:16:04,380
this means that if you're persistent

00:16:01,949 --> 00:16:06,720
this gets detached from your deployment

00:16:04,380 --> 00:16:08,550
either due to an accidental delete or

00:16:06,720 --> 00:16:13,139
due to rebalancing it's still always

00:16:08,550 --> 00:16:16,110
kept around for five days so you can do

00:16:13,139 --> 00:16:18,449
Bosch disks orphans and notice over here

00:16:16,110 --> 00:16:20,639
it'll list out all the disks that were

00:16:18,449 --> 00:16:24,209
often than what time they've been orphan

00:16:20,639 --> 00:16:27,149
that you can then easily do a Bosch

00:16:24,209 --> 00:16:30,750
attach disk and reattach the volume to

00:16:27,149 --> 00:16:33,870
your deployment this also makes sure

00:16:30,750 --> 00:16:37,019
that in case in the meanwhile the

00:16:33,870 --> 00:16:38,880
instance group did have a disk attached

00:16:37,019 --> 00:16:40,680
to it or the deployment did have a disk

00:16:38,880 --> 00:16:43,410
attached to it that disk is now orphaned

00:16:40,680 --> 00:16:47,339
so you're never in a state where you're

00:16:43,410 --> 00:16:50,730
losing any data another feature that we

00:16:47,339 --> 00:16:53,779
introduced to kind of make data loss

00:16:50,730 --> 00:16:56,699
even harder is Bosch backup and restore

00:16:53,779 --> 00:17:00,470
with Bosch backup you can backup the

00:16:56,699 --> 00:17:03,480
director database and restore it again

00:17:00,470 --> 00:17:05,520
at your convenience

00:17:03,480 --> 00:17:08,480
we intend for this feature to be used

00:17:05,520 --> 00:17:10,679
continuously or for you to do it before

00:17:08,480 --> 00:17:16,799
when you're being extra cautious before

00:17:10,679 --> 00:17:20,160
a particular upgrade so release offers

00:17:16,799 --> 00:17:22,470
can affect their deployment lifecycle by

00:17:20,160 --> 00:17:26,549
implementing callbacks to certain

00:17:22,470 --> 00:17:28,919
deployment events as you know we have a

00:17:26,549 --> 00:17:31,950
drain hook that release offers can

00:17:28,919 --> 00:17:35,539
include energies and Bosch will call

00:17:31,950 --> 00:17:37,909
that before stopping the job and

00:17:35,539 --> 00:17:40,549
basically notifies job that it's about

00:17:37,909 --> 00:17:43,309
to shut down it should stop accepting

00:17:40,549 --> 00:17:46,789
new requests and it should process all

00:17:43,309 --> 00:17:49,940
currently executing request and we

00:17:46,789 --> 00:17:52,460
introduce now new hooks after the job is

00:17:49,940 --> 00:17:55,809
installed and before it started

00:17:52,460 --> 00:17:59,659
job will call a priest start script and

00:17:55,809 --> 00:18:03,350
this is a good place to include your

00:17:59,659 --> 00:18:07,249
setup scripts like database migrations

00:18:03,350 --> 00:18:12,009
and you can use that bootstrap property

00:18:07,249 --> 00:18:14,629
to figure out if this is the first node

00:18:12,009 --> 00:18:18,049
so Bosch will run it before the job is

00:18:14,629 --> 00:18:21,649
started after the job is started it will

00:18:18,049 --> 00:18:23,389
run a post start script and then after

00:18:21,649 --> 00:18:28,009
deploy is finished it will run a post

00:18:23,389 --> 00:18:31,539
deploy on every node these are the good

00:18:28,009 --> 00:18:36,340
places to put some logic to notify

00:18:31,539 --> 00:18:36,340
services about completed operation

00:18:38,499 --> 00:18:43,789
another piece of feedback that we heard

00:18:41,330 --> 00:18:46,009
kind of in line with reducing Yama was

00:18:43,789 --> 00:18:48,379
that there is some software or some jobs

00:18:46,009 --> 00:18:51,889
that need to run on every single VM on

00:18:48,379 --> 00:18:55,429
every single deployment this could be

00:18:51,889 --> 00:18:58,190
something like security software or log

00:18:55,429 --> 00:19:01,099
forwarding software but it's tedious to

00:18:58,190 --> 00:19:02,509
have to put it in every single manifest

00:19:01,099 --> 00:19:05,479
file you have that leads to a lot more

00:19:02,509 --> 00:19:07,190
llamó it's also difficult to manage

00:19:05,479 --> 00:19:08,359
release versions for each of these

00:19:07,190 --> 00:19:11,539
software if you have to do it

00:19:08,359 --> 00:19:13,369
individually per manifest file to

00:19:11,539 --> 00:19:15,559
address some of that we introduced

00:19:13,369 --> 00:19:18,889
add-ons and the runtime config

00:19:15,559 --> 00:19:21,109
the runtime config is another Yama file

00:19:18,889 --> 00:19:24,320
but it's only one file and it doesn't

00:19:21,109 --> 00:19:27,649
duplicate your jobs so here you can have

00:19:24,320 --> 00:19:31,609
releases for example here we use log

00:19:27,649 --> 00:19:34,129
rotate and antivirus and if you add an

00:19:31,609 --> 00:19:37,250
add-on which is just like the job

00:19:34,129 --> 00:19:39,110
section to your runtime config the neck

00:19:37,250 --> 00:19:41,390
time that you watch deploy that

00:19:39,110 --> 00:19:43,760
particular deployment will have all the

00:19:41,390 --> 00:19:46,700
jobs that are specified for the run time

00:19:43,760 --> 00:19:49,780
can figure that director so it's pretty

00:19:46,700 --> 00:19:52,730
easy to use you update runtime config

00:19:49,780 --> 00:19:55,190
until the next time you deploy you're

00:19:52,730 --> 00:19:58,150
not going to end up with all these jobs

00:19:55,190 --> 00:20:00,890
on your deployment so it won't affect

00:19:58,150 --> 00:20:03,010
existing deployments however the next

00:20:00,890 --> 00:20:09,440
time you do deploy you'll end up with

00:20:03,010 --> 00:20:12,680
new jobs on every deployment to

00:20:09,440 --> 00:20:14,750
reiterate everything every feature that

00:20:12,680 --> 00:20:18,680
we introduced here is backwards

00:20:14,750 --> 00:20:22,310
compatible and you can opt into each of

00:20:18,680 --> 00:20:24,800
them gradually so you can update your

00:20:22,310 --> 00:20:27,190
director to start using cloud config and

00:20:24,800 --> 00:20:32,060
from that point director will start

00:20:27,190 --> 00:20:33,980
managing IP allocations for you then you

00:20:32,060 --> 00:20:36,290
can remove those cloud properties from

00:20:33,980 --> 00:20:39,140
your manifest you can migrate your

00:20:36,290 --> 00:20:42,560
deployments to availability zones you

00:20:39,140 --> 00:20:44,510
can start using deployment hooks you can

00:20:42,560 --> 00:20:47,690
remove all the jobs that you have to

00:20:44,510 --> 00:20:49,400
specify in all the packages that you

00:20:47,690 --> 00:20:52,520
have to include in every job into

00:20:49,400 --> 00:20:55,970
add-ons and that will minimize your

00:20:52,520 --> 00:20:59,330
deployment manifest so while we were

00:20:55,970 --> 00:21:01,160
developing all these features we want to

00:20:59,330 --> 00:21:03,800
make sure that we don't break any

00:21:01,160 --> 00:21:06,620
existing functionality so we set up

00:21:03,800 --> 00:21:10,370
separate CI pipelines for new features

00:21:06,620 --> 00:21:12,970
and existing functionality and it is

00:21:10,370 --> 00:21:16,700
easy to do so with concourse

00:21:12,970 --> 00:21:19,790
concourse is a CI system that is used by

00:21:16,700 --> 00:21:22,220
every team in cloud funding and it's a

00:21:19,790 --> 00:21:27,740
revolutionary CI system which simplifies

00:21:22,220 --> 00:21:29,900
our lives a lot so as we spoke about to

00:21:27,740 --> 00:21:31,670
these great features that we worked on

00:21:29,900 --> 00:21:33,380
for the past year that we know you're

00:21:31,670 --> 00:21:35,390
gonna try out when you leave from CF

00:21:33,380 --> 00:21:37,190
summit we also wanted to give you a

00:21:35,390 --> 00:21:39,230
glimpse into what's coming up for the

00:21:37,190 --> 00:21:42,710
next year and what this talk is gonna be

00:21:39,230 --> 00:21:44,630
about next year so one of the things

00:21:42,710 --> 00:21:48,010
we're working on is stem cell hardening

00:21:44,630 --> 00:21:51,610
keeping in mind using Bosch for doing

00:21:48,010 --> 00:21:55,030
more robust production use cases we are

00:21:51,610 --> 00:21:59,020
working on making Bosch stem cell come

00:21:55,030 --> 00:22:00,730
closer to complying with stig and CIS

00:21:59,020 --> 00:22:02,070
benchmarks that's something to look

00:22:00,730 --> 00:22:04,930
forward to

00:22:02,070 --> 00:22:08,560
we've introduced a Bosch events command

00:22:04,930 --> 00:22:10,540
which provides fine-grained audit trail

00:22:08,560 --> 00:22:12,490
for what happened to particular

00:22:10,540 --> 00:22:15,580
deployments so you'll now be able to see

00:22:12,490 --> 00:22:17,590
things like who created the VM when was

00:22:15,580 --> 00:22:21,040
it created and you'll be able to view

00:22:17,590 --> 00:22:22,630
that all with Bosch events last year we

00:22:21,040 --> 00:22:25,120
spoke a little bit about integrating

00:22:22,630 --> 00:22:28,000
Bosch with you AAA and we've added more

00:22:25,120 --> 00:22:30,580
announcements to that so for example now

00:22:28,000 --> 00:22:32,890
service brokers can specify UA scopes

00:22:30,580 --> 00:22:36,840
and limit visibility to only see

00:22:32,890 --> 00:22:39,040
deployments made by them keeping in mind

00:22:36,840 --> 00:22:41,290
some of the feedback we've been getting

00:22:39,040 --> 00:22:43,390
for dynamic service provisioning we want

00:22:41,290 --> 00:22:44,740
to work on a solution for high

00:22:43,390 --> 00:22:49,120
availability ns

00:22:44,740 --> 00:22:51,130
and finally we're gonna keep on trying

00:22:49,120 --> 00:22:53,830
to simplify manifests and trying to make

00:22:51,130 --> 00:22:56,080
less and less yeah Mel for you so an

00:22:53,830 --> 00:22:58,570
example of this is we're going to try to

00:22:56,080 --> 00:23:00,790
provide sane defaults for things we

00:22:58,570 --> 00:23:03,040
already do this with links so links by

00:23:00,790 --> 00:23:05,140
default are matched up based on their

00:23:03,040 --> 00:23:06,670
type so you don't have to specify much

00:23:05,140 --> 00:23:08,140
when you're wiring up links and we're

00:23:06,670 --> 00:23:10,840
looking for other ways in which we can

00:23:08,140 --> 00:23:12,190
introduce more defaulting behavior tml

00:23:10,840 --> 00:23:18,430
so you have two right you don't have to

00:23:12,190 --> 00:23:20,050
write as much GMO all right so we looked

00:23:18,430 --> 00:23:22,810
at some of the features that were

00:23:20,050 --> 00:23:25,450
introduced in bosch in the past year you

00:23:22,810 --> 00:23:27,550
can learn about them more at Bosch ion

00:23:25,450 --> 00:23:31,690
which is a great source of both

00:23:27,550 --> 00:23:34,780
documentation also it's open source go

00:23:31,690 --> 00:23:37,620
to our github repo and if you feel

00:23:34,780 --> 00:23:42,030
contributing please start contributing

00:23:37,620 --> 00:23:44,710
join our slack channel and start

00:23:42,030 --> 00:23:49,720
conversation about anything about Bosch

00:23:44,710 --> 00:23:52,350
and we have some time for questions but

00:23:49,720 --> 00:23:54,940
you can come and talk to us anytime

00:23:52,350 --> 00:23:59,290
during the assignment there's a Bosch

00:23:54,940 --> 00:24:02,110
team here come tyler shoots

00:23:59,290 --> 00:24:06,220
Demitri Colleen was the mastermind

00:24:02,110 --> 00:24:10,230
behind all these features so I think we

00:24:06,220 --> 00:24:10,230
have five six minutes for questions

00:24:37,000 --> 00:24:44,080
so the clouds can seek that that's in

00:24:41,710 --> 00:24:46,750
the director your deployments will use

00:24:44,080 --> 00:24:49,659
the clouds can seek at that point of

00:24:46,750 --> 00:24:52,090
time then then they were deployed so if

00:24:49,659 --> 00:24:55,750
you're gonna do like cloud check and

00:24:52,090 --> 00:24:57,730
other deployment flows they will use

00:24:55,750 --> 00:25:00,370
cloud you can seek at that point of time

00:24:57,730 --> 00:25:02,549
and you can safely update your cloud can

00:25:00,370 --> 00:25:06,549
sitting in a while until you decide to

00:25:02,549 --> 00:25:08,409
deploy deployment again at that point it

00:25:06,549 --> 00:25:10,860
will start using your version of cloud

00:25:08,409 --> 00:25:10,860
config

00:25:21,830 --> 00:25:28,289
yes so all these features are available

00:25:24,330 --> 00:25:30,240
now and if you updated your director in

00:25:28,289 --> 00:25:32,850
the past six months you probably have

00:25:30,240 --> 00:25:34,379
all these features already and you can

00:25:32,850 --> 00:25:38,690
gradually switch to them

00:25:34,379 --> 00:25:42,240
at your convenience and grab the latest

00:25:38,690 --> 00:25:46,129
Portuguese version from Bosch IO website

00:25:42,240 --> 00:25:46,129
and you will get all these features

00:26:17,880 --> 00:26:24,550
now with cloud config it will use one

00:26:21,130 --> 00:26:28,800
compilation for your infrastructure so

00:26:24,550 --> 00:26:31,510
usually it's like the most CPU efficient

00:26:28,800 --> 00:26:57,070
type of VM that you will use for

00:26:31,510 --> 00:26:59,500
compilation of your packages basically

00:26:57,070 --> 00:27:01,420
it will use the one compilation config

00:26:59,500 --> 00:27:03,870
for all the deployments that manage by

00:27:01,420 --> 00:27:03,870
director

00:27:08,540 --> 00:27:14,080
every team voice of these things into

00:27:10,790 --> 00:27:14,080
the templates of a privacy

00:27:18,940 --> 00:27:25,119
yeah so summary visas switched already

00:27:22,269 --> 00:27:28,029
to these new features like concourse

00:27:25,119 --> 00:27:31,450
releases using all these like links and

00:27:28,029 --> 00:27:34,389
other things and C F 3ds is gradually

00:27:31,450 --> 00:27:39,220
switching to that it was like spike that

00:27:34,389 --> 00:27:43,450
was done and that minimized deployments

00:27:39,220 --> 00:27:45,789
manifest a lot but also you can continue

00:27:43,450 --> 00:27:48,519
so all of these features including links

00:27:45,789 --> 00:27:50,919
it doesn't have to be all moved over in

00:27:48,519 --> 00:27:52,960
one sweep so you can continue to use non

00:27:50,919 --> 00:28:02,109
links releases and links releases with

00:27:52,960 --> 00:28:04,149
the same director you can continue to

00:28:02,109 --> 00:28:04,989
use your old-style manifests and

00:28:04,149 --> 00:28:07,659
old-style

00:28:04,989 --> 00:28:10,179
releases everything once you add a cloud

00:28:07,659 --> 00:28:12,340
config the next time that you do a Bosch

00:28:10,179 --> 00:28:13,599
deploy it will last you to change your

00:28:12,340 --> 00:28:15,609
manifest but for all existing

00:28:13,599 --> 00:28:18,659
deployments until you update them

00:28:15,609 --> 00:28:18,659
they'll continue to function

00:28:35,610 --> 00:28:40,059
they're just like boss releases so

00:28:38,620 --> 00:28:42,250
you'll have to upload the release to a

00:28:40,059 --> 00:28:44,529
director and then instead of specifying

00:28:42,250 --> 00:28:59,500
it in a manifest you specify it on your

00:28:44,529 --> 00:29:03,879
runtime config I know we typically try

00:28:59,500 --> 00:29:06,340
to maintain it for next six months is

00:29:03,879 --> 00:29:21,970
what our PM tells us right don't quote

00:29:06,340 --> 00:29:25,330
me on that okay I guess that's it we

00:29:21,970 --> 00:29:28,590
have one minute but no questions so

00:29:25,330 --> 00:29:28,590
thank you everyone for your attention

00:29:33,180 --> 00:29:35,459

YouTube URL: https://www.youtube.com/watch?v=I9mnSy2-jMk


