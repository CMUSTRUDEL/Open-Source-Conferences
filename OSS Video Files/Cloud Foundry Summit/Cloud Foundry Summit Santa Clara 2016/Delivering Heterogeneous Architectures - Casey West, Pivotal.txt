Title: Delivering Heterogeneous Architectures - Casey West, Pivotal
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Middleware lock-in is over. In a world of lightweight, containerized workloads the need to standardize on a commong middleware is no more. With Cloud Foundry's buildpack ecosystem the need to manage middleware yourself is further nonexistant. This is truly exciting as is eliminates the operational overhead of using the right tool for the right job. Cloud Foundry, with officially supported and open source buildpacks, supports more than 50 programming languages, frameworks, an runtime environments. This rich ecosystem empowers your engineers to explore new tools and environments without burdening your operators with the need to learn, manage, and maintain new runtime environments. 

What even is a buildpack? How are they managed? How are they used? How do I make my own? In this talk we'll answer all those questions. 

We'll dissect a buildpack and examine its internals. Learn how Cloud Foundry builds containers for your applications in its staging environment. Learn how operators deploy, enable, and upgrade buildpacks. we'll expore the separation of responsibility Cloud Foundry offers to empower operations to control the runtime environmnents carefully whilst providing maximum flexibility to engineering safely. Learn how to specify buildpacks when deploying applications, and how to manage runtime upgrades and security fixes with minimal developer disruption. Finally, learn how to write a custom buildpack for specialized runtime environments. 

Cloud Foundry will run almost any cloud-native application in almost any runtime environment. We may never support COBOL, but after this talk you'll see how Cloud Foundry support's the rest of your heterogeneous architecture. 

Casey West
Working in Internet infrastructure, web app security, and design taught Casey to be a paranoid, UX-oriented, problem solving Internet plumber; his earliest contributions to Perl live to this day on your Mac. Casey’s speaking and writing ranges from open source communities and culture to technical architecture and automation tips and tricks. Casey West wears the mantle of Principal Technologist focused on Pivotal’s Cloud Foundry Platform and lives in Pittsburgh raising three sarcastic children.
Captions: 
	00:00:00,030 --> 00:00:06,899
hi everyone how was lunch doing okay

00:00:03,720 --> 00:00:10,080
yeah ready is your brains energized are

00:00:06,899 --> 00:00:12,330
we good someone told me that room B here

00:00:10,080 --> 00:00:13,920
is where like all the there's been a

00:00:12,330 --> 00:00:16,920
bunch of exciting talks here today here

00:00:13,920 --> 00:00:18,900
in her and B so I hope that I hope that

00:00:16,920 --> 00:00:21,230
we'll have some fun here so this is

00:00:18,900 --> 00:00:23,400
about delivering heterogeneous

00:00:21,230 --> 00:00:25,350
architectures obviously we're at the

00:00:23,400 --> 00:00:26,580
Cloud Foundry summit so we're gonna talk

00:00:25,350 --> 00:00:30,269
about how Cloud Foundry makes this

00:00:26,580 --> 00:00:31,920
possible and even fun hopefully how

00:00:30,269 --> 00:00:34,200
Cloud Foundry makes it possible and fun

00:00:31,920 --> 00:00:35,700
without anyone from IT or operations

00:00:34,200 --> 00:00:36,960
losing their minds when you tell them

00:00:35,700 --> 00:00:39,840
you want to try out a new programming

00:00:36,960 --> 00:00:43,520
language which I'm sure no one here has

00:00:39,840 --> 00:00:45,510
ever ever tried before so I am curious

00:00:43,520 --> 00:00:47,760
how many folks here can say with

00:00:45,510 --> 00:00:49,530
certainty that in your production

00:00:47,760 --> 00:00:53,850
environment you are only running one

00:00:49,530 --> 00:00:56,969
programming language right now one

00:00:53,850 --> 00:00:59,100
person two people maybe okay and then

00:00:56,969 --> 00:01:00,870
how about how about two two programming

00:00:59,100 --> 00:01:03,739
language running something important in

00:01:00,870 --> 00:01:05,939
your production infrastructure three for

00:01:03,739 --> 00:01:10,770
angularjs counts as a programming

00:01:05,939 --> 00:01:15,420
language so anyone five ten there we go

00:01:10,770 --> 00:01:17,939
okay so a handful every time you

00:01:15,420 --> 00:01:20,250
introduce a new environment you

00:01:17,939 --> 00:01:21,420
introduce the need to manage that

00:01:20,250 --> 00:01:24,270
environment and have some understanding

00:01:21,420 --> 00:01:25,830
about how to do it and that's where a

00:01:24,270 --> 00:01:27,060
lot of pain can come in but I think

00:01:25,830 --> 00:01:28,560
that's where cloth boundaries

00:01:27,060 --> 00:01:31,770
architecture and specifically the way

00:01:28,560 --> 00:01:33,210
that build packs work end up saving us

00:01:31,770 --> 00:01:35,009
from a huge amount of that pain and

00:01:33,210 --> 00:01:37,049
saving us from a huge amount of what

00:01:35,009 --> 00:01:38,700
would otherwise be manual labor it's not

00:01:37,049 --> 00:01:40,259
just about the pain and the labor of

00:01:38,700 --> 00:01:42,360
managing those environments though it's

00:01:40,259 --> 00:01:45,720
also about making sure that you have

00:01:42,360 --> 00:01:47,909
flexibility and freedom so I'm gonna try

00:01:45,720 --> 00:01:50,369
and show you why Cloud Foundry provides

00:01:47,909 --> 00:01:52,590
that flexibility and freedom and we'll

00:01:50,369 --> 00:01:55,320
see we'll see how that plays out a

00:01:52,590 --> 00:01:56,460
couple of important things though maybe

00:01:55,320 --> 00:02:00,450
even more important than that

00:01:56,460 --> 00:02:04,979
who's on Twitter anybody have the

00:02:00,450 --> 00:02:06,600
Twitter it's 2016 now so maybe if you

00:02:04,979 --> 00:02:07,770
have the Twitter you can follow me if

00:02:06,600 --> 00:02:09,119
you disagree with things I have to say

00:02:07,770 --> 00:02:11,580
that's cool you should post it on

00:02:09,119 --> 00:02:13,830
Twitter I'll retweet it we'll see how

00:02:11,580 --> 00:02:15,930
that plays out for you

00:02:13,830 --> 00:02:17,400
if you disagree more vehemently this is

00:02:15,930 --> 00:02:19,620
my personal email address and you can

00:02:17,400 --> 00:02:21,420
email me I have anyone's into writing

00:02:19,620 --> 00:02:24,390
screeds this is your opportunity

00:02:21,420 --> 00:02:26,490
I make no guarantees about how quickly

00:02:24,390 --> 00:02:28,620
that screed will make it from my email

00:02:26,490 --> 00:02:32,520
to Twitter but you can give it a shot if

00:02:28,620 --> 00:02:34,470
you want to I write things on the web at

00:02:32,520 --> 00:02:36,450
KC West Calm it's also a place to find

00:02:34,470 --> 00:02:38,730
other ways to reach me maybe if Twitter

00:02:36,450 --> 00:02:42,000
is to new of a technology for you and

00:02:38,730 --> 00:02:43,530
email is to old maybe LinkedIn is

00:02:42,000 --> 00:02:46,890
somewhere in the middle and you can find

00:02:43,530 --> 00:02:48,150
find me there if you want to if you're

00:02:46,890 --> 00:02:49,590
really on the bleeding edge I suppose

00:02:48,150 --> 00:02:53,450
you could you could probably follow me

00:02:49,590 --> 00:02:54,780
on Instagram or something if you want

00:02:53,450 --> 00:02:57,090
what's that

00:02:54,780 --> 00:03:01,620
what's my slack channel I that is

00:02:57,090 --> 00:03:03,090
private sir yeah it's like slack Cloud

00:03:01,620 --> 00:03:05,310
Foundry org you can totally find me

00:03:03,090 --> 00:03:07,290
there actually and then I work at this

00:03:05,310 --> 00:03:08,580
company called pivotal they allow me to

00:03:07,290 --> 00:03:09,569
fly around the world and get talks like

00:03:08,580 --> 00:03:11,400
this I appreciate that

00:03:09,569 --> 00:03:13,440
hopefully you appreciate that and

00:03:11,400 --> 00:03:16,739
because of that this is my appreciation

00:03:13,440 --> 00:03:20,400
bullet point for our pivotal thank you

00:03:16,739 --> 00:03:22,079
pivotal so heterogeneous architectures

00:03:20,400 --> 00:03:23,670
are real by show of hands we sort of

00:03:22,079 --> 00:03:25,680
demonstrated this today I believe I had

00:03:23,670 --> 00:03:27,900
one actual hand raised when I said who's

00:03:25,680 --> 00:03:30,959
running one programming language most of

00:03:27,900 --> 00:03:32,790
the organizations that I talked to when

00:03:30,959 --> 00:03:34,860
they only run one or two programming

00:03:32,790 --> 00:03:35,910
languages or one or two runtime

00:03:34,860 --> 00:03:39,510
environments it's because they feel

00:03:35,910 --> 00:03:42,380
stuck they got into this you know rabbit

00:03:39,510 --> 00:03:46,530
hole with with Java and a specific

00:03:42,380 --> 00:03:48,060
application server or with net on

00:03:46,530 --> 00:03:49,530
Windows and then they feel like

00:03:48,060 --> 00:03:50,730
everything has to be that way because

00:03:49,530 --> 00:03:52,440
that's the thing we know how to manage

00:03:50,730 --> 00:03:55,170
and that makes sense if you have to

00:03:52,440 --> 00:03:55,500
manage it all yourself but hopefully you

00:03:55,170 --> 00:03:57,359
don't

00:03:55,500 --> 00:04:00,239
and hopefully you want freedom of choice

00:03:57,359 --> 00:04:01,650
and you have that opportunity also you

00:04:00,239 --> 00:04:03,420
know not everything's done that in Java

00:04:01,650 --> 00:04:09,120
right so like who's rockin some Ruby

00:04:03,420 --> 00:04:13,790
right now or some Python or some PHP or

00:04:09,120 --> 00:04:20,160
some Perl and there we go or some rust

00:04:13,790 --> 00:04:21,299
now go yeah all right etc etc yeah so

00:04:20,160 --> 00:04:22,289
you know you want you want freedom of

00:04:21,299 --> 00:04:23,400
choice you want to be able to use the

00:04:22,289 --> 00:04:25,800
right tool for the right job right so

00:04:23,400 --> 00:04:27,660
how do you do that how do you do that in

00:04:25,800 --> 00:04:29,130
an operationally mature way

00:04:27,660 --> 00:04:30,990
especially you know in a production

00:04:29,130 --> 00:04:32,310
environment where you need you need some

00:04:30,990 --> 00:04:34,200
guarantees and you need some consistency

00:04:32,310 --> 00:04:36,810
so I think I think club Thunder has an

00:04:34,200 --> 00:04:38,400
answer and and even if you're not doing

00:04:36,810 --> 00:04:40,580
it now I'm here to tell you that

00:04:38,400 --> 00:04:43,820
heterogeneous architectures are possible

00:04:40,580 --> 00:04:46,640
and we'll see how and because of that I

00:04:43,820 --> 00:04:50,100
believe that we are now at an age where

00:04:46,640 --> 00:04:50,970
middleware lock-in is dead you don't

00:04:50,100 --> 00:04:53,070
have to be stuck on a specific

00:04:50,970 --> 00:04:56,520
environment specific runtime tied to a

00:04:53,070 --> 00:04:57,720
specific web application server you

00:04:56,520 --> 00:05:00,000
don't have to you don't have to do that

00:04:57,720 --> 00:05:03,600
anymore right so if you take nothing

00:05:00,000 --> 00:05:05,550
else away from this talk take away the

00:05:03,600 --> 00:05:07,650
fact that you are free from middleware

00:05:05,550 --> 00:05:09,510
lock-in if you choose to be and you're

00:05:07,650 --> 00:05:11,220
here at a conference working with some

00:05:09,510 --> 00:05:14,370
cool technology that makes this

00:05:11,220 --> 00:05:18,210
particularly possible right so you don't

00:05:14,370 --> 00:05:21,840
have to be stuck anymore so thank you

00:05:18,210 --> 00:05:23,130
build packs so I want to ask a question

00:05:21,840 --> 00:05:24,720
I know I'm here at cloud wonder summit

00:05:23,130 --> 00:05:27,090
but you know I'm sometimes I'm surprised

00:05:24,720 --> 00:05:31,410
how many people interact with Cloud

00:05:27,090 --> 00:05:36,000
Foundry actually right now okay most

00:05:31,410 --> 00:05:40,260
everyone so have you pushed an app yeah

00:05:36,000 --> 00:05:42,750
cool or like 20 amps you know that's

00:05:40,260 --> 00:05:44,700
cool and then have any of you looked

00:05:42,750 --> 00:05:46,440
into how the build packs work so who

00:05:44,700 --> 00:05:48,600
would say like you know how build packs

00:05:46,440 --> 00:05:51,770
work right so just a handful of folks so

00:05:48,600 --> 00:05:54,300
the build pack is sort of your magic

00:05:51,770 --> 00:05:58,920
secret to how when you push an app it

00:05:54,300 --> 00:06:00,330
just works like uncie made this amazing

00:05:58,920 --> 00:06:03,990
haiku that's really cool haiku that

00:06:00,330 --> 00:06:05,910
really resonates that here's my source

00:06:03,990 --> 00:06:08,130
code run it in the cloud for me I do not

00:06:05,910 --> 00:06:11,820
care how well that I do not care how

00:06:08,130 --> 00:06:13,470
part is a privilege that you only have

00:06:11,820 --> 00:06:15,540
if you have a really good environment to

00:06:13,470 --> 00:06:17,820
run your applications in and the build

00:06:15,540 --> 00:06:20,460
packs are that secret sauce to I do not

00:06:17,820 --> 00:06:23,010
care how right so if you if you like

00:06:20,460 --> 00:06:24,270
that idea and and most of us are working

00:06:23,010 --> 00:06:26,160
with Cloud Foundry so I suspect that you

00:06:24,270 --> 00:06:28,080
do like that idea that I do not care how

00:06:26,160 --> 00:06:29,220
part is really magical because you can

00:06:28,080 --> 00:06:30,570
go on with life and you can care about

00:06:29,220 --> 00:06:34,410
only the things that are important to

00:06:30,570 --> 00:06:36,480
you so build packs create immutable

00:06:34,410 --> 00:06:39,350
containers that will run consistent with

00:06:36,480 --> 00:06:41,369
consistent operational characteristics

00:06:39,350 --> 00:06:43,839
all right this is super

00:06:41,369 --> 00:06:46,169
right in an age where folks are super

00:06:43,839 --> 00:06:48,610
excited about containers and we are to

00:06:46,169 --> 00:06:50,800
the Cloud Foundry ecosystem has been

00:06:48,610 --> 00:06:52,270
running them for a long time and build

00:06:50,800 --> 00:06:54,099
packs help us create these containers

00:06:52,270 --> 00:06:55,389
and then when we run them they have

00:06:54,099 --> 00:06:57,849
consistent operational characteristics

00:06:55,389 --> 00:06:59,649
that's absolutely critical to having a

00:06:57,849 --> 00:07:01,719
heterogeneous architecture that is easy

00:06:59,649 --> 00:07:04,809
to manage rather than one that is hard

00:07:01,719 --> 00:07:06,159
to manage so how does it work let's just

00:07:04,809 --> 00:07:07,619
sort of break this down so build packs

00:07:06,159 --> 00:07:10,029
require inputs so to build that

00:07:07,619 --> 00:07:12,399
immutable container you need an

00:07:10,029 --> 00:07:13,539
application who here knows what that

00:07:12,399 --> 00:07:16,360
mean so I probably don't have to like

00:07:13,539 --> 00:07:17,830
explain that anymore I'm using hand

00:07:16,360 --> 00:07:20,800
based participation to keep everybody

00:07:17,830 --> 00:07:22,539
awake yeah okay so I probably don't have

00:07:20,800 --> 00:07:24,639
to dig into what an application is right

00:07:22,539 --> 00:07:27,879
now right and then you need a manifest

00:07:24,639 --> 00:07:30,759
diamo so we know what that is right yeah

00:07:27,879 --> 00:07:33,129
so here's basic manifest mo so you've

00:07:30,759 --> 00:07:35,319
got your killer app that thing that's

00:07:33,129 --> 00:07:37,089
gonna make you tons of money maybe you

00:07:35,319 --> 00:07:38,709
have a path like if you're in the dog

00:07:37,089 --> 00:07:40,240
Java ecosystem and you're building jars

00:07:38,709 --> 00:07:41,259
maybe you have a consistent path you're

00:07:40,240 --> 00:07:42,939
probably gonna provide this on the

00:07:41,259 --> 00:07:43,930
command line you can provide it in the

00:07:42,939 --> 00:07:45,610
manifest if you want to and then you

00:07:43,930 --> 00:07:47,379
might specify a build pack you don't

00:07:45,610 --> 00:07:50,309
always have to but sometimes you might

00:07:47,379 --> 00:07:52,899
so super basic probably the most basic

00:07:50,309 --> 00:07:54,759
manifests that you can make in order to

00:07:52,899 --> 00:07:56,319
apply your application to Cloud Foundry

00:07:54,759 --> 00:07:58,479
but these are the inputs right so you've

00:07:56,319 --> 00:08:00,729
got an application and a manifest yeah

00:07:58,479 --> 00:08:02,949
Mille those are your inputs to the

00:08:00,729 --> 00:08:06,809
system and then what is a build pack a

00:08:02,949 --> 00:08:08,889
build pack there are three basic steps

00:08:06,809 --> 00:08:10,330
right so if you look at the directory

00:08:08,889 --> 00:08:11,469
structure of your most basic build pack

00:08:10,330 --> 00:08:14,139
this is literally it

00:08:11,469 --> 00:08:16,269
each of these are scripts we can be

00:08:14,139 --> 00:08:17,979
written in bash or Ruby you know or

00:08:16,269 --> 00:08:19,839
other languages whatever you want but

00:08:17,979 --> 00:08:22,719
you've got to compile a detect and a

00:08:19,839 --> 00:08:24,909
release and that's it

00:08:22,719 --> 00:08:28,050
zero directories three files that's a

00:08:24,909 --> 00:08:31,509
build pack so if it was a mystery before

00:08:28,050 --> 00:08:32,860
this basic structure sort of demystifies

00:08:31,509 --> 00:08:34,959
it and it's not that much but we should

00:08:32,860 --> 00:08:36,459
look into it a little bit further what

00:08:34,959 --> 00:08:40,019
happens here that this is not actually

00:08:36,459 --> 00:08:43,149
the the steps the step is first detect

00:08:40,019 --> 00:08:44,730
should I run this application so bill

00:08:43,149 --> 00:08:47,399
pack wants to make a reasonable

00:08:44,730 --> 00:08:49,720
assumption that if it's going to try to

00:08:47,399 --> 00:08:51,610
create a container in order to run an

00:08:49,720 --> 00:08:53,199
application it wants to make the make

00:08:51,610 --> 00:08:54,610
the decision as easy as possible to say

00:08:53,199 --> 00:08:57,040
should I do this or not right

00:08:54,610 --> 00:08:59,440
so should I should I run this app and

00:08:57,040 --> 00:09:01,480
then compile we'll create a droplet a

00:08:59,440 --> 00:09:02,770
droplet is what we call a container who

00:09:01,480 --> 00:09:05,980
knows about this concept of droplets

00:09:02,770 --> 00:09:08,650
right so at least in the in the sort of

00:09:05,980 --> 00:09:12,810
native and and consistent Cloud Foundry

00:09:08,650 --> 00:09:16,090
world a droplet is our container and

00:09:12,810 --> 00:09:18,520
then release is the third phase where

00:09:16,090 --> 00:09:19,990
we'll provide and it's optional to

00:09:18,520 --> 00:09:22,630
provide it but we'll provide some basic

00:09:19,990 --> 00:09:24,700
metadata for running instances of our

00:09:22,630 --> 00:09:26,350
application so this could be the default

00:09:24,700 --> 00:09:28,660
way that we spin up an instance of an

00:09:26,350 --> 00:09:29,980
application or maybe some environment

00:09:28,660 --> 00:09:33,850
variables or flags that we're gonna

00:09:29,980 --> 00:09:36,100
specify for for a JVM or some other

00:09:33,850 --> 00:09:38,170
runtime environment so these are the

00:09:36,100 --> 00:09:39,640
three phases to building a container to

00:09:38,170 --> 00:09:40,960
make it run on Cloud Foundry and the

00:09:39,640 --> 00:09:42,460
build pack is responsible for making

00:09:40,960 --> 00:09:45,520
this happen so we can dig into it even

00:09:42,460 --> 00:09:47,320
further let's take the case of Ruby we

00:09:45,520 --> 00:09:49,480
can sort of deconstruct this this is a

00:09:47,320 --> 00:09:51,430
I've removed some some stuff here in

00:09:49,480 --> 00:09:54,490
order to make it fit nicely on a slide

00:09:51,430 --> 00:09:56,740
and I think it fits pretty well but

00:09:54,490 --> 00:09:59,500
basically in the Ruby ecosystem there's

00:09:56,740 --> 00:10:01,030
a file called a gem file that is used as

00:09:59,500 --> 00:10:02,470
a best practice to determine the

00:10:01,030 --> 00:10:05,620
libraries that we want to install and

00:10:02,470 --> 00:10:07,810
run for this application so if one

00:10:05,620 --> 00:10:09,970
exists then we have detected that we can

00:10:07,810 --> 00:10:11,770
run this application using this build

00:10:09,970 --> 00:10:15,370
pack right so the root this is a ruby

00:10:11,770 --> 00:10:17,380
app if it doesn't then we say no and of

00:10:15,370 --> 00:10:19,840
course in UNIX land you exit zero for

00:10:17,380 --> 00:10:22,180
it's good and you exit one or any other

00:10:19,840 --> 00:10:25,480
thing for it's bad because that totally

00:10:22,180 --> 00:10:28,000
makes sense right but we've been doing

00:10:25,480 --> 00:10:31,950
it that way for more than 30 years so we

00:10:28,000 --> 00:10:31,950
will almost certainly keep doing that

00:10:32,580 --> 00:10:38,200
and then we compile so compiling the

00:10:36,130 --> 00:10:40,690
abstract is responsible for a couple of

00:10:38,200 --> 00:10:42,250
things but primarily it wants to create

00:10:40,690 --> 00:10:44,500
the root filesystem so what is a

00:10:42,250 --> 00:10:45,790
container write who knows what a

00:10:44,500 --> 00:10:48,780
container is like you definitely know

00:10:45,790 --> 00:10:51,220
it's not it's not a cute whale

00:10:48,780 --> 00:10:54,250
necessarily although that is a type of a

00:10:51,220 --> 00:10:57,070
container so a container is you know

00:10:54,250 --> 00:10:58,750
root filesystem an isolated filesystem

00:10:57,070 --> 00:11:00,370
wrapped in some metadata that explains

00:10:58,750 --> 00:11:01,750
to the kernel how it should treat

00:11:00,370 --> 00:11:03,850
processes that are run within that

00:11:01,750 --> 00:11:05,230
isolated environment so we need to make

00:11:03,850 --> 00:11:06,730
that filesystem and that's one of the

00:11:05,230 --> 00:11:07,900
primary responsibilities of the build

00:11:06,730 --> 00:11:09,370
pack and one of

00:11:07,900 --> 00:11:11,560
the primary responsibilities of the

00:11:09,370 --> 00:11:14,410
compile phase so it starts with a root

00:11:11,560 --> 00:11:17,260
filesystem a very sparse Linux file

00:11:14,410 --> 00:11:18,970
system typically and then we put a

00:11:17,260 --> 00:11:20,650
runtime environment on top of that file

00:11:18,970 --> 00:11:22,150
system and that runtime environment will

00:11:20,650 --> 00:11:24,220
be dependent on which build pack we're

00:11:22,150 --> 00:11:26,620
building so in the Ruby world we're

00:11:24,220 --> 00:11:29,980
going to put a Ruby interpreter and

00:11:26,620 --> 00:11:31,510
we're going to run gem install to make

00:11:29,980 --> 00:11:33,280
sure our all our libraries are there in

00:11:31,510 --> 00:11:36,070
the Java ecosystem we will make sure

00:11:33,280 --> 00:11:37,780
there's a JVM and the Python ecosystem

00:11:36,070 --> 00:11:39,730
we'll make sure a Python exists in if

00:11:37,780 --> 00:11:41,170
you're trying to deploy a static site

00:11:39,730 --> 00:11:44,710
we'll make sure that nginx is there

00:11:41,170 --> 00:11:47,500
right to be able to serve that site and

00:11:44,710 --> 00:11:49,720
then you put your app in that filesystem

00:11:47,500 --> 00:11:52,570
as well that's the responsibility of the

00:11:49,720 --> 00:11:54,370
build packs compile phase and then

00:11:52,570 --> 00:11:57,850
because it wants to actually create a

00:11:54,370 --> 00:11:59,260
droplet what the stager environment that

00:11:57,850 --> 00:12:01,090
interacts with the build pack does is it

00:11:59,260 --> 00:12:03,460
wraps it in that metadata which is often

00:12:01,090 --> 00:12:06,520
supplied by metadata yamo and then

00:12:03,460 --> 00:12:08,230
whatever sort of defaults you've

00:12:06,520 --> 00:12:10,300
specified for running application

00:12:08,230 --> 00:12:12,880
instances in your in your instance of

00:12:10,300 --> 00:12:15,460
the platform and now we have a container

00:12:12,880 --> 00:12:17,080
right and of course in Cloud Foundry we

00:12:15,460 --> 00:12:21,850
call that a droplet so if we were taking

00:12:17,080 --> 00:12:25,780
this Ruby example a ruby app droplet

00:12:21,850 --> 00:12:29,530
would be your ruby app with Ruby and the

00:12:25,780 --> 00:12:31,870
gems that you've specified and C F Linux

00:12:29,530 --> 00:12:33,880
FS 2 as the typical root filesystem

00:12:31,870 --> 00:12:37,150
although that's pluggable and you might

00:12:33,880 --> 00:12:38,710
do something else so that's that's what

00:12:37,150 --> 00:12:40,270
it is and and I like this because it's a

00:12:38,710 --> 00:12:42,130
square and a square like gives me this

00:12:40,270 --> 00:12:43,960
this warm fuzzy feeling that it's

00:12:42,130 --> 00:12:45,820
interoperable with other squares and and

00:12:43,960 --> 00:12:46,870
that's and that ends up what being what

00:12:45,820 --> 00:12:50,320
you get out of this is that you have

00:12:46,870 --> 00:12:52,330
this really consistent interface this is

00:12:50,320 --> 00:12:55,660
my Ruby app and it is a square and

00:12:52,330 --> 00:12:56,950
that's fine but I might not just want to

00:12:55,660 --> 00:13:02,020
do Ruby apps I might want to do other

00:12:56,950 --> 00:13:04,890
things but with this square we can then

00:13:02,020 --> 00:13:08,800
release it so this is the release phase

00:13:04,890 --> 00:13:12,700
where we might specify some basic

00:13:08,800 --> 00:13:16,600
default default information for how to

00:13:12,700 --> 00:13:18,610
run this application on Cloud Foundry so

00:13:16,600 --> 00:13:20,320
in this case again this is a basic batch

00:13:18,610 --> 00:13:21,850
script that emits yellow this time so

00:13:20,320 --> 00:13:23,950
the cloud foundry

00:13:21,850 --> 00:13:26,020
club founder will run this in order to

00:13:23,950 --> 00:13:27,970
determine the properties that it should

00:13:26,020 --> 00:13:31,240
apply to this application when it runs

00:13:27,970 --> 00:13:32,980
it could it can also emit nothing so

00:13:31,240 --> 00:13:35,470
maybe you don't have any specific ideas

00:13:32,980 --> 00:13:37,390
but but interestingly typically you you

00:13:35,470 --> 00:13:39,130
do have to have the really script there

00:13:37,390 --> 00:13:42,360
even if it doesn't do a whole lot which

00:13:39,130 --> 00:13:44,380
is a minor divergence from build packs

00:13:42,360 --> 00:13:46,149
other home

00:13:44,380 --> 00:13:47,980
Heroku which which allows you to get

00:13:46,149 --> 00:13:50,290
away without a release script if you

00:13:47,980 --> 00:13:54,040
don't want one minor technical detail

00:13:50,290 --> 00:13:55,660
there but in any case then UCF push in

00:13:54,040 --> 00:13:57,940
your app is deployed so with an app and

00:13:55,660 --> 00:13:59,709
a manifest and build packs and the

00:13:57,940 --> 00:14:01,660
stager in Cloud Foundry then we have

00:13:59,709 --> 00:14:04,029
droplets and those droplets are

00:14:01,660 --> 00:14:05,890
immutable artifacts with consistent

00:14:04,029 --> 00:14:07,450
operational characteristics so the way

00:14:05,890 --> 00:14:09,339
that you manage them spin them up spin

00:14:07,450 --> 00:14:10,510
them down create them destroy them it's

00:14:09,339 --> 00:14:12,270
all the same regardless of the

00:14:10,510 --> 00:14:14,980
environment that you're running on right

00:14:12,270 --> 00:14:16,360
or the sorry regardless of the framework

00:14:14,980 --> 00:14:19,709
or the the language that you've chosen

00:14:16,360 --> 00:14:21,910
to run your applications which is great

00:14:19,709 --> 00:14:23,350
so when you want to deploy and you want

00:14:21,910 --> 00:14:25,149
to run a few instances of your Ruby up

00:14:23,350 --> 00:14:27,640
no big deal you run a few instances they

00:14:25,149 --> 00:14:29,320
all tend to operate the same way they

00:14:27,640 --> 00:14:30,730
all are the same shape they're all this

00:14:29,320 --> 00:14:32,890
box right you've crammed whatever you've

00:14:30,730 --> 00:14:34,209
got into this box and that's good and

00:14:32,890 --> 00:14:35,620
that's sort of the glory of the

00:14:34,209 --> 00:14:37,510
container model but what's beautiful

00:14:35,620 --> 00:14:39,279
about the build pack model so you have

00:14:37,510 --> 00:14:42,250
an incredibly consistent method for

00:14:39,279 --> 00:14:47,260
building these containers right so

00:14:42,250 --> 00:14:48,730
that's what's great about that so what

00:14:47,260 --> 00:14:52,899
if you want to deploy more apps well you

00:14:48,730 --> 00:14:54,520
can do that as well so let's say we have

00:14:52,899 --> 00:14:56,709
our Ruby app well let's say that it's

00:14:54,520 --> 00:14:58,329
sort of a back office app you know we

00:14:56,709 --> 00:14:59,890
used rails and we're able to make you

00:14:58,329 --> 00:15:01,779
know some really good crud forms to

00:14:59,890 --> 00:15:03,250
interact with some data and we've sort

00:15:01,779 --> 00:15:06,910
of built up a little CRM system or

00:15:03,250 --> 00:15:08,829
something that's great say that we've

00:15:06,910 --> 00:15:12,579
got Java for an API you know we're using

00:15:08,829 --> 00:15:14,589
I you know I like spring boot and I like

00:15:12,579 --> 00:15:17,620
all the goodies that I get out of that I

00:15:14,589 --> 00:15:19,959
like the JVM because it keeps my out

00:15:17,620 --> 00:15:21,910
pretty fast and so I'll use Java for my

00:15:19,959 --> 00:15:23,829
API and then you know I'm gonna write my

00:15:21,910 --> 00:15:24,880
UI in angular because everyone else was

00:15:23,829 --> 00:15:28,300
writing it in angular

00:15:24,880 --> 00:15:31,270
even though I like emblem or ember

00:15:28,300 --> 00:15:34,890
jeaious rather better but I can't find

00:15:31,270 --> 00:15:36,300
any ember j/s developers and

00:15:34,890 --> 00:15:38,670
so I've got these apps right so what do

00:15:36,300 --> 00:15:40,200
you do there well if we remember that

00:15:38,670 --> 00:15:41,310
build packs created mutable containers

00:15:40,200 --> 00:15:44,340
that will run with consistent

00:15:41,310 --> 00:15:47,280
operational characteristics then build

00:15:44,340 --> 00:15:48,840
packs to the rescue this is by the way

00:15:47,280 --> 00:15:50,730
usually when you when you when you

00:15:48,840 --> 00:15:53,760
present this opportunity or this

00:15:50,730 --> 00:15:55,140
situation to your I to your operations

00:15:53,760 --> 00:15:57,150
team and you don't have something like

00:15:55,140 --> 00:15:59,880
Cloud Foundry this is when people really

00:15:57,150 --> 00:16:01,440
start sending their hair on fire because

00:15:59,880 --> 00:16:04,050
they figured out how to build the golden

00:16:01,440 --> 00:16:05,760
images for you know their Ruby app and

00:16:04,050 --> 00:16:07,050
they know how to run those and manage

00:16:05,760 --> 00:16:08,760
those but now you're asking them to

00:16:07,050 --> 00:16:09,720
build two completely new environments

00:16:08,760 --> 00:16:11,610
that they're not really that familiar

00:16:09,720 --> 00:16:13,020
with they're not really sure how they're

00:16:11,610 --> 00:16:14,220
gonna operate or what their

00:16:13,020 --> 00:16:16,290
characteristics are gonna be whenever

00:16:14,220 --> 00:16:18,450
you're running your application that's

00:16:16,290 --> 00:16:19,740
the old world and the new world we have

00:16:18,450 --> 00:16:20,640
cloud foundry and with build backs is

00:16:19,740 --> 00:16:22,440
that you don't have to worry about that

00:16:20,640 --> 00:16:24,330
much very much anymore because the build

00:16:22,440 --> 00:16:25,950
packs will take care of a consistent

00:16:24,330 --> 00:16:28,680
environment and cloud foundry provides

00:16:25,950 --> 00:16:32,820
the promises of resiliency as the

00:16:28,680 --> 00:16:35,790
platform itself so that's not bad so

00:16:32,820 --> 00:16:37,220
what now though well just deploy so

00:16:35,790 --> 00:16:41,190
let's say we've already got our Ruby app

00:16:37,220 --> 00:16:42,960
we have a few instances of that they all

00:16:41,190 --> 00:16:44,310
look the same on the outside they all

00:16:42,960 --> 00:16:46,970
have similar characteristics they have

00:16:44,310 --> 00:16:49,530
similar interfaces similar inputs so

00:16:46,970 --> 00:16:51,990
then we can just spin up our Java apps

00:16:49,530 --> 00:16:53,910
and our angular apps without really

00:16:51,990 --> 00:16:56,370
having to worry about it and how do we

00:16:53,910 --> 00:16:58,200
do that with CF push and the build packs

00:16:56,370 --> 00:17:01,140
go through the process that we

00:16:58,200 --> 00:17:03,000
identified earlier of detect compile and

00:17:01,140 --> 00:17:04,590
release in order to make sure that we

00:17:03,000 --> 00:17:06,690
have a consistent environment to run an

00:17:04,590 --> 00:17:08,160
application regardless of the language

00:17:06,690 --> 00:17:11,010
or the framework that it's written to

00:17:08,160 --> 00:17:15,300
support right so that's that's good news

00:17:11,010 --> 00:17:17,640
I feel good about that does that feel

00:17:15,300 --> 00:17:20,340
good to you like this consistency and

00:17:17,640 --> 00:17:22,680
reliability ring a bell for things we

00:17:20,340 --> 00:17:24,960
want yeah I see some nods some people

00:17:22,680 --> 00:17:30,930
are like I don't want that I like

00:17:24,960 --> 00:17:33,960
exciting infrastructure dynamic

00:17:30,930 --> 00:17:35,370
infrastructure yeah the words exciting

00:17:33,960 --> 00:17:38,400
and infrastructure should never be in

00:17:35,370 --> 00:17:45,150
the same sentence in a positive way just

00:17:38,400 --> 00:17:47,010
heads up I like consistency so bill

00:17:45,150 --> 00:17:48,480
packs that are supported by the open

00:17:47,010 --> 00:17:49,620
source community and

00:17:48,480 --> 00:17:52,590
reported as the open source distribution

00:17:49,620 --> 00:17:57,169
of Cloud Foundry Java Ruby node Go

00:17:52,590 --> 00:17:59,309
Python PHP static sites and raw binaries

00:17:57,169 --> 00:18:01,320
as long as you build an application

00:17:59,309 --> 00:18:02,940
that's meant to run in the cloud and

00:18:01,320 --> 00:18:05,250
it's in one of these languages that

00:18:02,940 --> 00:18:07,320
support it out-of-the-box the beautiful

00:18:05,250 --> 00:18:09,090
thing is that this is open source there

00:18:07,320 --> 00:18:11,309
are about 40 more build packs for

00:18:09,090 --> 00:18:14,730
runtimes and environments that aren't on

00:18:11,309 --> 00:18:15,840
this list many of the vendors that are

00:18:14,730 --> 00:18:17,610
here today who provide their own

00:18:15,840 --> 00:18:19,460
versions or implementations on top of

00:18:17,610 --> 00:18:23,790
the core cloud foundry have their own

00:18:19,460 --> 00:18:25,410
that's great too so so looking at this

00:18:23,790 --> 00:18:28,679
list though just of what's supported by

00:18:25,410 --> 00:18:29,880
the open source community from security

00:18:28,679 --> 00:18:33,150
patches that are that are happening

00:18:29,880 --> 00:18:35,730
constantly and upgrades upgrades to the

00:18:33,150 --> 00:18:38,070
latest versions like does this satisfy

00:18:35,730 --> 00:18:41,250
needs of anybody in this room like is

00:18:38,070 --> 00:18:43,020
this good like for a production today so

00:18:41,250 --> 00:18:44,880
everybody running is anyone running any

00:18:43,020 --> 00:18:48,720
of these application environments in

00:18:44,880 --> 00:18:49,860
production today yeah ok and then you

00:18:48,720 --> 00:18:51,000
know if you're only running one of them

00:18:49,860 --> 00:18:52,890
maybe you want to run some more maybe

00:18:51,000 --> 00:18:54,660
you want to try out go like you go talk

00:18:52,890 --> 00:18:56,370
to our super excited go friend over here

00:18:54,660 --> 00:18:57,929
in the front row and you're like well we

00:18:56,370 --> 00:18:59,220
got to try some go well how do you do

00:18:57,929 --> 00:19:02,970
that well build packs are your answer

00:18:59,220 --> 00:19:04,380
you can start to have creativity so you

00:19:02,970 --> 00:19:05,940
know if you're if you're using command

00:19:04,380 --> 00:19:07,440
line to interact with with a cloud

00:19:05,940 --> 00:19:08,700
foundry instance you can type CF build

00:19:07,440 --> 00:19:11,490
packs and see what build packs are

00:19:08,700 --> 00:19:14,340
installed by default on your instance of

00:19:11,490 --> 00:19:15,960
cloud foundry I got this from PCF dev

00:19:14,340 --> 00:19:17,220
which is a lightweight sort of cloud

00:19:15,960 --> 00:19:20,640
foundry in a box that you can use for

00:19:17,220 --> 00:19:22,950
local development and local testing this

00:19:20,640 --> 00:19:24,900
is what you get out of the box they have

00:19:22,950 --> 00:19:26,250
priorities the priorities are important

00:19:24,900 --> 00:19:28,380
because if you don't specify a build

00:19:26,250 --> 00:19:30,000
pack explicitly then it will go through

00:19:28,380 --> 00:19:31,770
the detect phase for each of these build

00:19:30,000 --> 00:19:34,559
packs in order and it will start with

00:19:31,770 --> 00:19:36,150
Java and move down the stack so if you

00:19:34,559 --> 00:19:36,480
build an application and you just deploy

00:19:36,150 --> 00:19:38,220
it

00:19:36,480 --> 00:19:39,780
each of these build packs will attempt

00:19:38,220 --> 00:19:41,490
to detect whether or not it should be

00:19:39,780 --> 00:19:44,010
responsible for building or for running

00:19:41,490 --> 00:19:46,320
this site or this application you can

00:19:44,010 --> 00:19:47,850
also you'll find grain operator control

00:19:46,320 --> 00:19:50,309
over whether or not they're enabled for

00:19:47,850 --> 00:19:53,370
use or whether or not they're locked and

00:19:50,309 --> 00:19:55,110
of course they are versioned and and get

00:19:53,370 --> 00:19:56,700
released that way and so as an operator

00:19:55,110 --> 00:19:58,470
you can control and manage which build

00:19:56,700 --> 00:20:02,250
packs are part of your default system

00:19:58,470 --> 00:20:04,170
which is great you can also specify as

00:20:02,250 --> 00:20:06,060
developer if you have the capability you

00:20:04,170 --> 00:20:06,750
can specify build packs that aren't

00:20:06,060 --> 00:20:09,450
listed here

00:20:06,750 --> 00:20:11,490
so I mentioned rust earlier I'm sort of

00:20:09,450 --> 00:20:13,650
playing around with rust I'm not a rust

00:20:11,490 --> 00:20:15,000
expert but if I want rust to work on

00:20:13,650 --> 00:20:17,550
Cloud Foundry like how do I make that

00:20:15,000 --> 00:20:18,870
happen right well that's the beauty of

00:20:17,550 --> 00:20:22,710
the of open source there's an open

00:20:18,870 --> 00:20:24,450
source build pack for rust you can see

00:20:22,710 --> 00:20:26,070
that it's not listed here but in my

00:20:24,450 --> 00:20:28,080
engineering organization I at least want

00:20:26,070 --> 00:20:29,990
them folks to be able to try new

00:20:28,080 --> 00:20:32,400
solutions and new technologies

00:20:29,990 --> 00:20:34,440
independent of what is supported in

00:20:32,400 --> 00:20:35,790
production and then if a good tool or a

00:20:34,440 --> 00:20:36,900
good piece of software comes along I

00:20:35,790 --> 00:20:38,820
want to be able to enable it in

00:20:36,900 --> 00:20:40,800
production as well and again the build

00:20:38,820 --> 00:20:44,790
packs are what let you have fine-grained

00:20:40,800 --> 00:20:46,890
control of that so what about multiple

00:20:44,790 --> 00:20:48,660
apps from one repo so if you've got a

00:20:46,890 --> 00:20:51,960
heterogeneous architecture but maybe

00:20:48,660 --> 00:20:55,290
they're sort of all in one repository or

00:20:51,960 --> 00:20:57,720
you might use sub modules in order to

00:20:55,290 --> 00:20:59,790
collect a collection of software in

00:20:57,720 --> 00:21:01,170
order to make a larger distribution the

00:20:59,790 --> 00:21:02,730
nice thing is that you can do that too

00:21:01,170 --> 00:21:05,340
this is where the manifests really kick

00:21:02,730 --> 00:21:07,260
in and help you out so we're used to

00:21:05,340 --> 00:21:09,210
using manifests to specify one

00:21:07,260 --> 00:21:10,860
application but I don't know if you

00:21:09,210 --> 00:21:12,930
would know that you can specify multiple

00:21:10,860 --> 00:21:14,700
applications so if you've got a Java app

00:21:12,930 --> 00:21:16,470
but all of your static assets are under

00:21:14,700 --> 00:21:19,710
resources which is a very typical

00:21:16,470 --> 00:21:23,820
pattern maybe you'll deploy resources as

00:21:19,710 --> 00:21:25,560
a static site for your UI right here and

00:21:23,820 --> 00:21:28,290
you can specify things like instances

00:21:25,560 --> 00:21:32,160
and a bunch of other stuff you could

00:21:28,290 --> 00:21:33,930
specify Java by targeting a specific jar

00:21:32,160 --> 00:21:35,490
that you've built and maybe you've got

00:21:33,930 --> 00:21:37,290
your Ruby app in there as well or you've

00:21:35,490 --> 00:21:38,250
got it provided by a sub module but

00:21:37,290 --> 00:21:40,170
what's nice is that you can have one

00:21:38,250 --> 00:21:42,690
manifest and if you want to deploy all

00:21:40,170 --> 00:21:44,880
of these applications which is similar

00:21:42,690 --> 00:21:46,380
in a way to the way that a docker

00:21:44,880 --> 00:21:48,810
compose works in the docker you co

00:21:46,380 --> 00:21:51,690
system you can just type CF push and

00:21:48,810 --> 00:21:53,670
it'll deploy all those apps if you only

00:21:51,690 --> 00:21:55,830
want to revive one like so you made some

00:21:53,670 --> 00:21:57,870
color changes to the UI you can type CF

00:21:55,830 --> 00:21:59,550
push UI and it'll only deploy that one

00:21:57,870 --> 00:22:00,990
despite the fact you have multiple

00:21:59,550 --> 00:22:02,910
applications specified in your manifest

00:22:00,990 --> 00:22:05,610
but it's kind of nice to be able to have

00:22:02,910 --> 00:22:06,780
a master manifest for for your

00:22:05,610 --> 00:22:08,490
architecture for your particular project

00:22:06,780 --> 00:22:10,860
your particular application that's kind

00:22:08,490 --> 00:22:14,580
of cool and then you just see a push not

00:22:10,860 --> 00:22:16,390
too bad so what about custom built packs

00:22:14,580 --> 00:22:18,130
though so I mentioned

00:22:16,390 --> 00:22:20,860
well let's say I've got this thrust

00:22:18,130 --> 00:22:22,450
application this is a very basic rust

00:22:20,860 --> 00:22:24,340
app that's using the iron framework

00:22:22,450 --> 00:22:26,980
which provides restful api so it allows

00:22:24,340 --> 00:22:28,780
you to build using but it emits a small

00:22:26,980 --> 00:22:30,610
web server unless you build restful api

00:22:28,780 --> 00:22:32,620
so one of the things you can see here

00:22:30,610 --> 00:22:34,510
that's happening is that when we get a

00:22:32,620 --> 00:22:36,370
new request we will inspect the

00:22:34,510 --> 00:22:38,410
environment variables CF instance index

00:22:36,370 --> 00:22:41,470
to see which application instance this

00:22:38,410 --> 00:22:45,900
is and then it'll wrap that up in a JSON

00:22:41,470 --> 00:22:48,040
payload and emit that as a JSON object

00:22:45,900 --> 00:22:49,210
that's pretty cool it'll bind to the

00:22:48,040 --> 00:22:51,280
port that is specified on the

00:22:49,210 --> 00:22:53,200
environment so this is a 12 factor of

00:22:51,280 --> 00:22:55,660
rest app which is cool but rust very

00:22:53,200 --> 00:22:58,560
much like NGO requires you to compile it

00:22:55,660 --> 00:23:00,670
and then you've got this portable binary

00:22:58,560 --> 00:23:03,400
so what would it look like to try and

00:23:00,670 --> 00:23:04,780
make this run on Cloud Foundry and this

00:23:03,400 --> 00:23:06,700
is a significant because you may have

00:23:04,780 --> 00:23:08,200
very specific environments for your

00:23:06,700 --> 00:23:09,790
applications but you still want to try

00:23:08,200 --> 00:23:12,070
and run them on Cloud Foundry and if it

00:23:09,790 --> 00:23:13,510
is a 12 factor app or a cloud native app

00:23:12,070 --> 00:23:15,550
you should be able to do that so here's

00:23:13,510 --> 00:23:18,280
a 12 factor rust app not typically

00:23:15,550 --> 00:23:22,180
supported on Cloud Foundry so let's

00:23:18,280 --> 00:23:23,800
build a build pack let's detect whether

00:23:22,180 --> 00:23:25,810
or not this is a rust app rust use

00:23:23,800 --> 00:23:27,790
escargots the way that Ruby uses gem

00:23:25,810 --> 00:23:29,680
file so this is how we specify

00:23:27,790 --> 00:23:32,320
underlying dependencies so if we have a

00:23:29,680 --> 00:23:35,740
cargo file then it's a rust app if not

00:23:32,320 --> 00:23:37,570
it's not and will pass and then we need

00:23:35,740 --> 00:23:39,970
to compile well we'll get multi rust

00:23:37,570 --> 00:23:43,060
which is a way to get easily get a rust

00:23:39,970 --> 00:23:45,430
compiler similar to things like RBE and

00:23:43,060 --> 00:23:46,840
v or other tools that allow you to

00:23:45,430 --> 00:23:49,840
switch between versions of underlying

00:23:46,840 --> 00:23:53,290
BMS we'll compile our application once

00:23:49,840 --> 00:23:54,700
we have rust and then we'll cache cache

00:23:53,290 --> 00:23:56,440
some artifacts out of that so that

00:23:54,700 --> 00:23:59,440
future compiles are a little faster

00:23:56,440 --> 00:24:03,100
that's helpful so that's our compile

00:23:59,440 --> 00:24:04,630
phase this will lay down rust on the on

00:24:03,100 --> 00:24:07,300
the lightweight root filesystem provided

00:24:04,630 --> 00:24:09,340
to us by the stager environment and then

00:24:07,300 --> 00:24:11,470
it'll compile our app and put our app in

00:24:09,340 --> 00:24:14,250
that container as well and now we have a

00:24:11,470 --> 00:24:16,330
root filesystem for our application for

00:24:14,250 --> 00:24:18,730
release I'm gonna specify that the

00:24:16,330 --> 00:24:20,680
default way to run an application in

00:24:18,730 --> 00:24:22,600
rust is cargo run which is true

00:24:20,680 --> 00:24:25,480
thankfully that's very helpful to my

00:24:22,600 --> 00:24:27,190
case that that's true so that way

00:24:25,480 --> 00:24:29,299
whenever I try to run this application I

00:24:27,190 --> 00:24:31,730
don't have to specify a run command

00:24:29,299 --> 00:24:33,379
it'll just assume cargo run but if I

00:24:31,730 --> 00:24:36,249
wanted to specify a run command in my

00:24:33,379 --> 00:24:38,720
manifest I could override that and

00:24:36,249 --> 00:24:41,659
here's the basic manifest so I've got an

00:24:38,720 --> 00:24:45,379
application name and I put this bill

00:24:41,659 --> 00:24:47,239
pack on github it's actually I had to

00:24:45,379 --> 00:24:51,289
fork it from the the Heroku build pack

00:24:47,239 --> 00:24:52,759
but but this is legit and and I'm just

00:24:51,289 --> 00:24:54,320
gonna specify my build pack from there

00:24:52,759 --> 00:24:57,259
and caught foundry when it tries to

00:24:54,320 --> 00:24:59,360
stage my application we'll go to go to

00:24:57,259 --> 00:25:00,739
github get this build pack and then use

00:24:59,360 --> 00:25:03,139
this build pack to build this container

00:25:00,739 --> 00:25:06,789
then I'll have a rust container so that

00:25:03,139 --> 00:25:08,960
was super simple to detect compile and

00:25:06,789 --> 00:25:10,820
release an application this is my

00:25:08,960 --> 00:25:13,100
manifest I showed you the app before and

00:25:10,820 --> 00:25:14,720
that's that and I deploy it with CF push

00:25:13,100 --> 00:25:19,249
and then I've got rust running on Cloud

00:25:14,720 --> 00:25:21,529
Foundry right so that's pretty cool and

00:25:19,249 --> 00:25:23,779
the open source community is really neat

00:25:21,529 --> 00:25:26,480
so you know I come from an old-school

00:25:23,779 --> 00:25:27,739
Perl background so I like to deploy Perl

00:25:26,480 --> 00:25:31,159
apps to Cloud Foundry from time to time

00:25:27,739 --> 00:25:32,659
it really freaks people out but I come

00:25:31,159 --> 00:25:35,509
from old-school enough that I remember

00:25:32,659 --> 00:25:37,669
the first meeting at OSCON in 2001 I

00:25:35,509 --> 00:25:38,749
think where they were like hey you know

00:25:37,669 --> 00:25:41,090
it would be good for the Perl community

00:25:38,749 --> 00:25:42,919
to make Perl 6 and then they finally

00:25:41,090 --> 00:25:44,539
released it last year in December so

00:25:42,919 --> 00:25:46,549
there's a there's a programming language

00:25:44,539 --> 00:25:49,820
called Perl 6 it only took 15 years no

00:25:46,549 --> 00:25:51,080
big deal and I can run Perl 6 on cloud

00:25:49,820 --> 00:25:53,119
foundry too because there's a build pack

00:25:51,080 --> 00:25:54,409
for that and there's a web application

00:25:53,119 --> 00:25:56,600
framework and that's pretty neat too

00:25:54,409 --> 00:25:59,179
right and those are future future

00:25:56,600 --> 00:26:00,950
leaning languages but the fact that like

00:25:59,179 --> 00:26:02,480
rust is gaining massive popularity it

00:26:00,950 --> 00:26:04,190
has huge backing from Mozilla and I can

00:26:02,480 --> 00:26:06,080
run it on Cloud Foundry means I can at

00:26:04,190 --> 00:26:08,029
least explore its viability for my

00:26:06,080 --> 00:26:10,309
business problems right so this is

00:26:08,029 --> 00:26:11,509
really what what build packs allow and

00:26:10,309 --> 00:26:13,369
what Cloud Foundry allows and why I

00:26:11,509 --> 00:26:15,590
think heterogeneous architectures

00:26:13,369 --> 00:26:17,539
because they are real Cloud Foundry is

00:26:15,590 --> 00:26:20,480
the place to run them so you get the

00:26:17,539 --> 00:26:23,149
freedom to be creative you get the

00:26:20,480 --> 00:26:25,509
freedom to use the right tech and you

00:26:23,149 --> 00:26:33,549
get the freedom to do the right thing

00:26:25,509 --> 00:26:33,549
freedom free free

00:26:33,600 --> 00:26:40,150
so there are some references it's always

00:26:38,140 --> 00:26:41,380
good to read the source code to the

00:26:40,150 --> 00:26:42,370
build packs you should know the software

00:26:41,380 --> 00:26:43,750
you're running but it's really

00:26:42,370 --> 00:26:46,600
fascinating to see how this is done

00:26:43,750 --> 00:26:48,130
especially an incredibly reliable way so

00:26:46,600 --> 00:26:50,470
what I showed you of the Ruby build pack

00:26:48,130 --> 00:26:52,200
was a very stripped-down version but if

00:26:50,470 --> 00:26:55,210
you go check it out it's it's quite

00:26:52,200 --> 00:26:56,440
quite serious it's always good to read

00:26:55,210 --> 00:26:58,440
up on what you can and cannot do with

00:26:56,440 --> 00:27:01,150
manifests most of that you can do with

00:26:58,440 --> 00:27:02,350
with command-line utilities as well but

00:27:01,150 --> 00:27:05,980
it's super important to know what's

00:27:02,350 --> 00:27:07,270
there and of course the documentation on

00:27:05,980 --> 00:27:09,309
build packs will steer you in the right

00:27:07,270 --> 00:27:10,480
direction if you find yourself in the

00:27:09,309 --> 00:27:14,679
circumstance where you need to build a

00:27:10,480 --> 00:27:16,480
custom one which is a-ok so that's my

00:27:14,679 --> 00:27:17,890
twitter handle again casey west and we

00:27:16,480 --> 00:27:18,970
can be friends that's what that top-line

00:27:17,890 --> 00:27:20,679
is about we can be friends on the

00:27:18,970 --> 00:27:22,300
internet you can also be friends in real

00:27:20,679 --> 00:27:24,790
life that's what the beer emoji is for

00:27:22,300 --> 00:27:26,950
we can drink those beers if you want i

00:27:24,790 --> 00:27:29,950
mean not literally those beers cuz their

00:27:26,950 --> 00:27:31,410
emoji so you're kind of silly for

00:27:29,950 --> 00:27:33,960
suggesting that but we can definitely

00:27:31,410 --> 00:27:37,120
hang out and that would be fine with me

00:27:33,960 --> 00:27:38,890
we have one minute for questions maybe

00:27:37,120 --> 00:27:40,870
i'll take one question here and then

00:27:38,890 --> 00:27:43,230
more in the hall but thank you for your

00:27:40,870 --> 00:27:46,230
time I hope that hope this was good

00:27:43,230 --> 00:27:46,230

YouTube URL: https://www.youtube.com/watch?v=VjkNOS2YwLo


