Title: Building Spring Applications on Cloud Foundry
Publication date: 2014-05-06
Playlist: SpringOne 2GX
Description: 
	Recorded at SpringOne2GX 2013 in Santa Clara, CA.
Speaker: Josh Long and Andy Piper
Let's face it, the cloud is here to stay. The cloud's potential can seem sometimes overwhelming, but it doesn't have to if you use Spring. Spring - and the various Spring projects - already embrace the architecture characteristics that make for great, cloud-centric applications in any environment. While Spring works well on any cloud platform, it enjoys a special place in the sun on Cloud Foundry, the open source PaaS from Pivotal.

In this talk, join Andy Piper as he introduces how to build Spring applications that work well in the cloud and on Cloud Foundry in particular. We'll cover how to consume services with Spring on Cloud Foundry, how to scale out using RabbitMQ and Spring Integration, how to use standalone processes and RabbitMQ for better batch processing, and discuss strategies for exposing and consuming services in a RESTful service-based cloud architecture.
Learn more about spring and Cloud Foundy at 
http://docs.cloudfoundry.com/docs/using/deploying-apps/jvm/index.html
Captions: 
	00:00:11,380 --> 00:00:16,120
thank you for joining us this morning

00:00:12,520 --> 00:00:17,680
welcome to spring one can I just I just

00:00:16,120 --> 00:00:20,320
introduce us first of all my name is

00:00:17,680 --> 00:00:21,970
Andy Pieper and my role at pivotal is

00:00:20,320 --> 00:00:26,230
the developer advocate for the Cloud

00:00:21,970 --> 00:00:27,790
Foundry platform there I am so I've been

00:00:26,230 --> 00:00:30,520
doing this for a couple of years now I

00:00:27,790 --> 00:00:32,590
will hold my hands up and say I love

00:00:30,520 --> 00:00:35,260
spring I love the keynote last night but

00:00:32,590 --> 00:00:37,809
I'm not a spring expert I know many of

00:00:35,260 --> 00:00:41,890
you are some of you may not be this man

00:00:37,809 --> 00:00:43,989
here you may know is Josh long and he's

00:00:41,890 --> 00:00:46,059
my counterpart in the spring team he's

00:00:43,989 --> 00:00:47,350
the spring developer advocate and he's

00:00:46,059 --> 00:00:48,970
written lots and lots of cool stuff and

00:00:47,350 --> 00:00:51,250
he'll be speaking to you and actually

00:00:48,970 --> 00:00:55,690
showing you some code after I've done

00:00:51,250 --> 00:00:58,600
the hand wavy cloudy stuff yeah yeah

00:00:55,690 --> 00:01:00,280
this is how we work so also just in case

00:00:58,600 --> 00:01:02,739
you're kind of going developer advocate

00:01:00,280 --> 00:01:04,989
what the heck you're right so so this is

00:01:02,739 --> 00:01:07,000
what we do right developer advocates

00:01:04,989 --> 00:01:09,400
some some some companies I have

00:01:07,000 --> 00:01:10,750
developer evangelists right and that's

00:01:09,400 --> 00:01:12,040
great because they kind of stand you

00:01:10,750 --> 00:01:14,799
know they come and lay their hands on

00:01:12,040 --> 00:01:17,170
you and then you believe right so what

00:01:14,799 --> 00:01:18,700
Josh and I do and my colleagues and in

00:01:17,170 --> 00:01:20,049
the developer relations team every

00:01:18,700 --> 00:01:21,969
developer advocate said what we are is

00:01:20,049 --> 00:01:23,500
you're advocates right so if you have

00:01:21,969 --> 00:01:25,930
questions who you think our stuff sucks

00:01:23,500 --> 00:01:27,430
then we listen and we go back and beat

00:01:25,930 --> 00:01:29,109
up the engineering team and tell Adrian

00:01:27,430 --> 00:01:31,630
that they're doing a really bad job okay

00:01:29,109 --> 00:01:33,369
so also of course we are here to

00:01:31,630 --> 00:01:35,140
advocate that our stuff is really cool

00:01:33,369 --> 00:01:36,780
okay and we'd love you to believe that

00:01:35,140 --> 00:01:40,960
but we hope to convince you through

00:01:36,780 --> 00:01:44,200
demonstration and and what merit yes I

00:01:40,960 --> 00:01:45,759
focus in marriage just then okay it

00:01:44,200 --> 00:01:49,060
could be difficult to marry all of them

00:01:45,759 --> 00:01:50,500
that was right okay so I love my job by

00:01:49,060 --> 00:01:52,299
the way I think it's an awesome thing to

00:01:50,500 --> 00:02:00,609
be doing so what we're going to cover in

00:01:52,299 --> 00:02:02,560
the next 90 minutes 90 minutes Wow so

00:02:00,609 --> 00:02:04,600
we're gonna do a quick overview to those

00:02:02,560 --> 00:02:06,759
of you that have never heard of cloud

00:02:04,600 --> 00:02:07,840
foundry at all or those of you that had

00:02:06,759 --> 00:02:10,509
never heard of it before last night's

00:02:07,840 --> 00:02:11,800
keynote or or you know I don't want to

00:02:10,509 --> 00:02:12,850
spend lots of time in it cuz I know that

00:02:11,800 --> 00:02:13,900
some of you will have been to the last

00:02:12,850 --> 00:02:17,440
couple of spring ones where we have

00:02:13,900 --> 00:02:19,060
talked about it but importantly I also

00:02:17,440 --> 00:02:21,040
want to talk about what's new since the

00:02:19,060 --> 00:02:24,370
last time we were all together in DC

00:02:21,040 --> 00:02:25,290
last year right because a lot has

00:02:24,370 --> 00:02:27,689
changed with the cloud

00:02:25,290 --> 00:02:29,730
platform I also want to talk about this

00:02:27,689 --> 00:02:32,459
thing run dock pivotal dot IO which is

00:02:29,730 --> 00:02:35,069
pivotal implementation of a public cloud

00:02:32,459 --> 00:02:36,569
based on Cloud Foundry and will talk

00:02:35,069 --> 00:02:38,459
about the new Java build pack for Cloud

00:02:36,569 --> 00:02:41,310
Foundry as well which is extremely cool

00:02:38,459 --> 00:02:42,540
built by our spring team and then we're

00:02:41,310 --> 00:02:44,099
gonna do lots of demos because it's you

00:02:42,540 --> 00:02:46,079
know it's it's spring one and that's

00:02:44,099 --> 00:02:48,450
what we do right we show code we do live

00:02:46,079 --> 00:02:50,000
demos sometimes we screw up and fix

00:02:48,450 --> 00:02:53,250
things in front of you and we hopefully

00:02:50,000 --> 00:02:55,799
don't look too bad is that is that okay

00:02:53,250 --> 00:02:57,540
for everyone as an agenda people happy

00:02:55,799 --> 00:03:00,269
without getting a few nods okay let's

00:02:57,540 --> 00:03:02,430
let's see importantly do you know

00:03:00,269 --> 00:03:03,989
remember that we're here to help so you

00:03:02,430 --> 00:03:05,700
know if you've got questions and then do

00:03:03,989 --> 00:03:09,000
shout out who was at the keynote last

00:03:05,700 --> 00:03:10,859
night almost everyone it wasn't actually

00:03:09,000 --> 00:03:16,560
he wasn't at the keynote last night okay

00:03:10,859 --> 00:03:18,120
a couple of people so um who loved

00:03:16,560 --> 00:03:19,980
Christine's literally switching the need

00:03:18,120 --> 00:03:21,000
of the switch on spring by Olaf they

00:03:19,980 --> 00:03:23,849
live there huh

00:03:21,000 --> 00:03:25,530
Adrian was a third hand up there Annie

00:03:23,849 --> 00:03:26,760
and you know he was joking that people

00:03:25,530 --> 00:03:28,439
were telling him not to do it people

00:03:26,760 --> 00:03:30,690
were literally telling him please don't

00:03:28,439 --> 00:03:32,639
do this live in the middle of anyway so

00:03:30,690 --> 00:03:34,859
it's lovely isn't it and unless my

00:03:32,639 --> 00:03:36,840
friends is built in spring and it runs

00:03:34,859 --> 00:03:38,069
on Cloud Foundry as you would have seen

00:03:36,840 --> 00:03:40,260
last night at the keynote and we'll go

00:03:38,069 --> 00:03:42,810
through some of some of that as we go

00:03:40,260 --> 00:03:44,489
through this morning it's really nice

00:03:42,810 --> 00:03:46,049
site and we really love it and we hope

00:03:44,489 --> 00:03:47,609
you will as well and engage with us

00:03:46,049 --> 00:03:51,030
through it let's just remind ourselves

00:03:47,609 --> 00:03:53,430
why we're here and what spring is okay

00:03:51,030 --> 00:03:54,629
so spring really is giving us a lot of

00:03:53,430 --> 00:03:57,180
flexibility especially with the new

00:03:54,629 --> 00:03:59,069
spring I a platform we're giving you a

00:03:57,180 --> 00:04:01,680
lot of choice as well really important

00:03:59,069 --> 00:04:03,269
here so as you can see on the top left

00:04:01,680 --> 00:04:04,290
of this slide I've got Cloud Foundry but

00:04:03,269 --> 00:04:06,239
I've also got some of our competitors

00:04:04,290 --> 00:04:08,159
because spring is not dependent on Cloud

00:04:06,239 --> 00:04:09,870
Foundry it can run on all kinds of

00:04:08,159 --> 00:04:12,389
infrastructure clouds or platform clouds

00:04:09,870 --> 00:04:14,269
and of course we play nicely with other

00:04:12,389 --> 00:04:16,139
Java frameworks and runtimes

00:04:14,269 --> 00:04:18,449
we've got some really cool nice

00:04:16,139 --> 00:04:20,430
front-end technology and of course you

00:04:18,449 --> 00:04:22,440
know spring data spring x2 you will hear

00:04:20,430 --> 00:04:25,590
a lot more about today is all about

00:04:22,440 --> 00:04:28,830
enabling workloads on all kinds of

00:04:25,590 --> 00:04:30,810
different data backends so we're about

00:04:28,830 --> 00:04:33,900
choice we're about flexibility we're

00:04:30,810 --> 00:04:38,770
about enabling you guys to get your your

00:04:33,900 --> 00:04:40,210
apps into production very quickly so

00:04:38,770 --> 00:04:43,479
another show of hands just because I'm

00:04:40,210 --> 00:04:45,060
curious who was here for platform the

00:04:43,479 --> 00:04:47,379
Cloud Foundry conference this weekend

00:04:45,060 --> 00:04:48,819
okay about thirty percent of the folks

00:04:47,379 --> 00:04:49,750
okay so I guess you guys are going to be

00:04:48,819 --> 00:04:51,039
the ones that I don't really need to

00:04:49,750 --> 00:04:53,229
self a founder II will talk too much

00:04:51,039 --> 00:04:55,449
about cloud foundry too so forgive me

00:04:53,229 --> 00:04:56,830
that there will be in the next twenty

00:04:55,449 --> 00:05:00,690
minutes and start some basics about

00:04:56,830 --> 00:05:04,840
cloud foundry who's using cloud foundry

00:05:00,690 --> 00:05:06,720
new people who tried cloud foundry last

00:05:04,840 --> 00:05:09,400
year but hasn't haven't touched it since

00:05:06,720 --> 00:05:10,449
few more hands okay good so I'm

00:05:09,400 --> 00:05:12,190
hopefully gonna give you some

00:05:10,449 --> 00:05:13,479
information about what we've done in

00:05:12,190 --> 00:05:16,449
cloud foundry in the last year that

00:05:13,479 --> 00:05:18,220
makes it even more awesome and in

00:05:16,449 --> 00:05:22,210
particular some of the stuff about the

00:05:18,220 --> 00:05:24,159
new Java built pack all right so I'm

00:05:22,210 --> 00:05:26,139
gonna again forgive me we're going to do

00:05:24,159 --> 00:05:27,970
a very quick 101 on cloud foundry it's

00:05:26,139 --> 00:05:29,560
not gonna be too detailed we've got some

00:05:27,970 --> 00:05:31,449
additional talks in this room all day

00:05:29,560 --> 00:05:33,069
today we have a track of talks about

00:05:31,449 --> 00:05:35,169
cloud foundry including how you can

00:05:33,069 --> 00:05:36,940
build your own if you want to and how

00:05:35,169 --> 00:05:38,710
you can extend it some of my colleagues

00:05:36,940 --> 00:05:40,389
will be here talking about those things

00:05:38,710 --> 00:05:43,000
so Paul Maritz

00:05:40,389 --> 00:05:44,620
last night and Adrienne talked about you

00:05:43,000 --> 00:05:46,840
know the pivotal family of products and

00:05:44,620 --> 00:05:48,880
why we spun out from these two companies

00:05:46,840 --> 00:05:51,090
EMC and VMware and why we've bought this

00:05:48,880 --> 00:05:54,729
particular collection of technologies

00:05:51,090 --> 00:05:57,069
cloud foundry spring rabbitmq Redis

00:05:54,729 --> 00:05:58,960
green plant pivotal HD gem possibly

00:05:57,069 --> 00:06:00,400
sounds like this huge load of stuff but

00:05:58,960 --> 00:06:02,979
actually it works really nicely together

00:06:00,400 --> 00:06:06,159
and we're doing a lot to make that work

00:06:02,979 --> 00:06:09,219
so when we think about pivotal what we

00:06:06,159 --> 00:06:10,750
do here we have a data fabric which is

00:06:09,219 --> 00:06:12,880
represented by things like the greenplum

00:06:10,750 --> 00:06:15,460
database pivotal HD

00:06:12,880 --> 00:06:17,979
we've got cloud fabric count foundry

00:06:15,460 --> 00:06:19,539
that's really that the cool thing that

00:06:17,979 --> 00:06:22,300
all of our other products consists on

00:06:19,539 --> 00:06:24,400
and then the application fabric which is

00:06:22,300 --> 00:06:26,139
in this chart on the same box with with

00:06:24,400 --> 00:06:28,180
the spring platform and rabbitmq and so

00:06:26,139 --> 00:06:30,069
on and we're really bringing these

00:06:28,180 --> 00:06:31,539
things together to you know enable

00:06:30,069 --> 00:06:34,180
people to work much more productively

00:06:31,539 --> 00:06:37,120
and you would have heard pivotal labs

00:06:34,180 --> 00:06:38,860
last night talking about how quickly

00:06:37,120 --> 00:06:41,409
they were able to deliver that spring

00:06:38,860 --> 00:06:43,750
i/o website using that collection of

00:06:41,409 --> 00:06:46,270
technologies that hasn't really told you

00:06:43,750 --> 00:06:48,460
what Cloud Foundry is about foundries

00:06:46,270 --> 00:06:49,800
our platform as a service and Palmer

00:06:48,460 --> 00:06:52,600
it's last night talked about

00:06:49,800 --> 00:06:55,740
infrastructure as a service base

00:06:52,600 --> 00:06:57,940
cloud technology vmware vsphere AWS ec2

00:06:55,740 --> 00:07:00,940
those kind of things is what he calls

00:06:57,940 --> 00:07:03,970
the new hardware right when we were

00:07:00,940 --> 00:07:06,010
looking at technologies that we had but

00:07:03,970 --> 00:07:07,900
VMware when we were there you know we

00:07:06,010 --> 00:07:08,640
were in the application space we kind of

00:07:07,900 --> 00:07:10,540
thought you know what

00:07:08,640 --> 00:07:12,100
infrastructure clouds and virtualization

00:07:10,540 --> 00:07:14,790
it's kind of a done deal right

00:07:12,100 --> 00:07:16,750
it's a solved problem there's a lot of

00:07:14,790 --> 00:07:18,700
companies out there and platforms out

00:07:16,750 --> 00:07:20,260
there OpenStack and AWS and vSphere and

00:07:18,700 --> 00:07:22,120
they're all good right they're all

00:07:20,260 --> 00:07:25,300
good enough or extremely good and really

00:07:22,120 --> 00:07:26,860
cool and you know what we wanted to do

00:07:25,300 --> 00:07:29,350
was deliver an operating system for

00:07:26,860 --> 00:07:30,970
applications on top of that so that's

00:07:29,350 --> 00:07:32,620
the platform as a service space and

00:07:30,970 --> 00:07:34,990
really what we're looking to do is

00:07:32,620 --> 00:07:37,540
enable you to forget about the virtual

00:07:34,990 --> 00:07:39,580
machine as a developer all right all you

00:07:37,540 --> 00:07:41,530
really probably want to care about is

00:07:39,580 --> 00:07:43,060
writing your code you don't want to be

00:07:41,530 --> 00:07:45,100
doing a load of automation around

00:07:43,060 --> 00:07:47,590
installing a virtual machine installing

00:07:45,100 --> 00:07:49,300
the packages you need and then working

00:07:47,590 --> 00:07:51,820
on how to scalar applications within

00:07:49,300 --> 00:07:54,070
those virtual machines the application

00:07:51,820 --> 00:07:56,650
is the new unit of scale and currents it

00:07:54,070 --> 00:07:57,970
here right and in fact when you scale

00:07:56,650 --> 00:07:59,410
your applications on cloud boundary it

00:07:57,970 --> 00:08:01,060
doesn't matter to you don't ever know

00:07:59,410 --> 00:08:02,620
whether it's running on one or more

00:08:01,060 --> 00:08:04,450
virtual machines with different

00:08:02,620 --> 00:08:06,310
instances you might have all of the

00:08:04,450 --> 00:08:08,440
instances running inside one you might

00:08:06,310 --> 00:08:09,970
have them distributed among many but

00:08:08,440 --> 00:08:12,100
Cloud Foundry just handles that for you

00:08:09,970 --> 00:08:14,170
and the routier enables you to to do

00:08:12,100 --> 00:08:15,730
that platform as-a-service is an

00:08:14,170 --> 00:08:18,310
abstraction layer sits on top of

00:08:15,730 --> 00:08:21,310
infrastructure in particular with Cloud

00:08:18,310 --> 00:08:23,230
Foundry we are agnostic to the

00:08:21,310 --> 00:08:24,520
infrastructure underneath we can run on

00:08:23,230 --> 00:08:26,740
vmware because that's what we came from

00:08:24,520 --> 00:08:29,020
on vSphere yeah that's what we started

00:08:26,740 --> 00:08:30,970
with last year if you were at Spring one

00:08:29,020 --> 00:08:32,919
and you played with Cloud Foundry calm

00:08:30,970 --> 00:08:35,349
which is what we we had then as a hosted

00:08:32,919 --> 00:08:36,669
service what you're actually doing was

00:08:35,349 --> 00:08:38,950
deploying your application to a data

00:08:36,669 --> 00:08:41,800
center somewhere in Las Vegas I think

00:08:38,950 --> 00:08:44,350
running on vSphere because we were

00:08:41,800 --> 00:08:46,780
VMware right and then at the beginning

00:08:44,350 --> 00:08:48,460
of the year we came out of VMware and we

00:08:46,780 --> 00:08:50,950
looked at the fact that you know we

00:08:48,460 --> 00:08:54,400
needed to run Cloud Foundry somewhere

00:08:50,950 --> 00:08:55,780
and we decided to run it on AWS and I

00:08:54,400 --> 00:08:56,950
think that sends quite a strong message

00:08:55,780 --> 00:08:58,420
to say well actually you know what

00:08:56,950 --> 00:09:00,760
although we came from VMware we are

00:08:58,420 --> 00:09:03,220
independent and we do have the choice

00:09:00,760 --> 00:09:04,540
and flexibility and today my colleagues

00:09:03,220 --> 00:09:06,430
and I were working a lot with customers

00:09:04,540 --> 00:09:08,500
it was so very very interested in

00:09:06,430 --> 00:09:10,240
the OpenStack technology so we are

00:09:08,500 --> 00:09:12,399
abstracting away that infrastructure

00:09:10,240 --> 00:09:15,160
layer I've mentioned already that the

00:09:12,399 --> 00:09:16,300
application is your unit of deployment

00:09:15,160 --> 00:09:18,390
that's what we think about it's what we

00:09:16,300 --> 00:09:20,410
care about and I will show you an

00:09:18,390 --> 00:09:22,330
architecture diagram in a moment that

00:09:20,410 --> 00:09:24,730
shows you kind of some of the internals

00:09:22,330 --> 00:09:26,890
I'm not going to spend alone on it but

00:09:24,730 --> 00:09:28,740
fundamentally all of that infrastructure

00:09:26,890 --> 00:09:31,450
all of those components we've built

00:09:28,740 --> 00:09:34,360
exist to support the ability for you to

00:09:31,450 --> 00:09:39,220
deploy and scale application we still

00:09:34,360 --> 00:09:41,529
have the separation between application

00:09:39,220 --> 00:09:44,500
developers and operations right quite

00:09:41,529 --> 00:09:45,730
often I talk to companies where you know

00:09:44,500 --> 00:09:47,320
their operation to see me going what

00:09:45,730 --> 00:09:49,690
what is all this DevOps people we don't

00:09:47,320 --> 00:09:52,570
want the developers to have too much

00:09:49,690 --> 00:09:54,250
control in operations but fundamentally

00:09:52,570 --> 00:09:56,140
there are still people that need to

00:09:54,250 --> 00:09:59,260
understand how the infrastructure

00:09:56,140 --> 00:10:00,670
operates and what they can do is just

00:09:59,260 --> 00:10:02,670
deliver the platform and enable the

00:10:00,670 --> 00:10:04,630
developers to deliver the application

00:10:02,670 --> 00:10:06,730
I'm sure many of you have seen

00:10:04,630 --> 00:10:09,010
deployment diagrams or project diagrams

00:10:06,730 --> 00:10:10,300
like this and these are you know this

00:10:09,010 --> 00:10:12,520
this isn't this isn't an untypical

00:10:10,300 --> 00:10:14,830
deployment diagram even when we're doing

00:10:12,520 --> 00:10:16,390
agile right we still have we still put

00:10:14,830 --> 00:10:17,890
processes and gates and things in place

00:10:16,390 --> 00:10:19,180
and of course quality control and

00:10:17,890 --> 00:10:21,100
testing and all those things are

00:10:19,180 --> 00:10:24,130
important but we really want to go from

00:10:21,100 --> 00:10:25,990
you know the 18 months or whatever to

00:10:24,130 --> 00:10:27,910
get a new application in production so

00:10:25,990 --> 00:10:30,130
actually a couple of sets of steps of

00:10:27,910 --> 00:10:32,740
set start again

00:10:30,130 --> 00:10:36,970
couple of step sets of steps that's a

00:10:32,740 --> 00:10:40,150
untwisted I invented for myself so on

00:10:36,970 --> 00:10:41,620
the left-hand side of this chart we've

00:10:40,150 --> 00:10:42,820
got some commands and what those

00:10:41,620 --> 00:10:45,459
commands are doing and this is

00:10:42,820 --> 00:10:47,020
abbreviated is actually building a cloud

00:10:45,459 --> 00:10:48,279
okay it's assuming we have an

00:10:47,020 --> 00:10:50,650
infrastructure we've got an open snack

00:10:48,279 --> 00:10:52,870
or vSphere farm in the in the

00:10:50,650 --> 00:10:55,060
organization and then we use our tool

00:10:52,870 --> 00:10:57,430
which is called Cal foundry Bosch we can

00:10:55,060 --> 00:10:59,170
figure it we provision it and then when

00:10:57,430 --> 00:11:01,000
we decide actually we need more more

00:10:59,170 --> 00:11:02,980
machines virtual machines more resources

00:11:01,000 --> 00:11:04,930
we can run another command just very

00:11:02,980 --> 00:11:06,880
quickly to add capacity and typically

00:11:04,930 --> 00:11:09,550
that can take you know maybe two to four

00:11:06,880 --> 00:11:13,390
hours we recently redeployed our entire

00:11:09,550 --> 00:11:15,670
public cloud foundry on pivotal to

00:11:13,390 --> 00:11:16,779
Amazon in a couple of alley literally an

00:11:15,670 --> 00:11:18,640
hour and a half and redeployed

00:11:16,779 --> 00:11:20,150
everybody's applications because there

00:11:18,640 --> 00:11:22,760
was an Amazon outage we needed to move

00:11:20,150 --> 00:11:25,790
you availabilities ain't from a

00:11:22,760 --> 00:11:27,110
developer perspective what you do and if

00:11:25,790 --> 00:11:28,940
you're using the command line we you

00:11:27,110 --> 00:11:30,200
don't have to we have other tools we're

00:11:28,940 --> 00:11:32,180
going to point at an instance of the

00:11:30,200 --> 00:11:34,040
cloud you're gonna then just take our

00:11:32,180 --> 00:11:36,740
application and push it or deploy it to

00:11:34,040 --> 00:11:38,090
the the cloud and then we might decide

00:11:36,740 --> 00:11:39,920
well actually you know this I think this

00:11:38,090 --> 00:11:41,560
application requires services it

00:11:39,920 --> 00:11:44,840
requires a database it requires

00:11:41,560 --> 00:11:46,910
messaging it requires access to center

00:11:44,840 --> 00:11:50,210
it requires monitoring through New Relic

00:11:46,910 --> 00:11:52,340
and we can simply create an instance and

00:11:50,210 --> 00:11:54,140
bind to those instances together I'll

00:11:52,340 --> 00:11:55,430
actually show you our command line when

00:11:54,140 --> 00:11:57,710
I get to demos in a moment and we'll

00:11:55,430 --> 00:11:59,270
talk a little bit about that there is it

00:11:57,710 --> 00:12:01,220
yeah dodge is quite right these these

00:11:59,270 --> 00:12:03,980
developer commands are run through a

00:12:01,220 --> 00:12:05,870
ruby gem called CF we'll talk about that

00:12:03,980 --> 00:12:07,130
more in a moment finally this last

00:12:05,870 --> 00:12:09,950
command is really cool because if you've

00:12:07,130 --> 00:12:12,680
been sitting at home writing some cool

00:12:09,950 --> 00:12:15,050
new app using spring Android and you've

00:12:12,680 --> 00:12:16,220
deployed it to the Play Store and you've

00:12:15,050 --> 00:12:18,400
told some of your friends and it's gone

00:12:16,220 --> 00:12:20,600
viral and all of a sudden you need like

00:12:18,400 --> 00:12:22,400
massive backends because you know you're

00:12:20,600 --> 00:12:23,870
getting hit far too quickly well all we

00:12:22,400 --> 00:12:26,270
need to do rather than like say oh

00:12:23,870 --> 00:12:27,830
mm-hmm I'm on Amazon ec2 and I'm gonna

00:12:26,270 --> 00:12:29,990
need to install a load more Amazon ec2

00:12:27,830 --> 00:12:32,000
virtual machines and then I'm gonna need

00:12:29,990 --> 00:12:33,770
to install spring and then I'm gonna

00:12:32,000 --> 00:12:36,950
need to install the den you know we just

00:12:33,770 --> 00:12:39,080
take scale app name and add instances

00:12:36,950 --> 00:12:40,850
and we have more instances and Cloud

00:12:39,080 --> 00:12:43,190
Foundry because it's not spinning up a

00:12:40,850 --> 00:12:45,650
whole new VM for application it's

00:12:43,190 --> 00:12:47,270
actually using a container can do that

00:12:45,650 --> 00:12:48,950
in less than a second it can add

00:12:47,270 --> 00:12:54,440
instances depending on the size of your

00:12:48,950 --> 00:12:55,460
application it's extremely fast when I

00:12:54,440 --> 00:12:56,840
talked about spring right at the

00:12:55,460 --> 00:12:57,860
beginning in spring i/o and the fact

00:12:56,840 --> 00:12:59,210
that it can run in these different

00:12:57,860 --> 00:13:02,540
environments with these different

00:12:59,210 --> 00:13:04,490
runtimes and and services and databases

00:13:02,540 --> 00:13:06,170
and so on the absolute same thing

00:13:04,490 --> 00:13:09,500
applies to Cloud Foundry we believe

00:13:06,170 --> 00:13:11,270
strongly in choice so how do we do this

00:13:09,500 --> 00:13:12,950
well first of all we say well you know

00:13:11,270 --> 00:13:14,570
whilst we're here this morning talking

00:13:12,950 --> 00:13:19,990
about spring you might want to write

00:13:14,570 --> 00:13:22,120
your application in a dominant or um or

00:13:19,990 --> 00:13:25,670
other thing that's right you make you

00:13:22,120 --> 00:13:26,330
yeah we don't control you you're free

00:13:25,670 --> 00:13:28,460
okay

00:13:26,330 --> 00:13:30,680
so how we do that in Cloud Foundry is

00:13:28,460 --> 00:13:32,780
through something called build packs and

00:13:30,680 --> 00:13:33,470
I'll show you talk about our Java Bill

00:13:32,780 --> 00:13:36,170
packing ammo

00:13:33,470 --> 00:13:38,210
so that enables you to use the runtime

00:13:36,170 --> 00:13:40,610
that you need for your application so if

00:13:38,210 --> 00:13:43,940
you have written an application in the

00:13:40,610 --> 00:13:45,410
languor some crazy mad Haskell or R or

00:13:43,940 --> 00:13:47,390
something then you can install that

00:13:45,410 --> 00:13:49,370
runtime as you deploy your application

00:13:47,390 --> 00:13:50,450
last year if you were here last year I

00:13:49,370 --> 00:13:52,520
would have been standing on stage saying

00:13:50,450 --> 00:13:55,390
yes Cloud Foundry is awesome and you can

00:13:52,520 --> 00:13:58,670
run your apps in Java or Ruby or node

00:13:55,390 --> 00:14:00,650
and then I would talk about something

00:13:58,670 --> 00:14:02,830
else but what we've done in version 2 of

00:14:00,650 --> 00:14:06,530
Cloud Foundry is we've added support for

00:14:02,830 --> 00:14:08,270
additional pluggable runtime what we've

00:14:06,530 --> 00:14:10,670
done on the services side if I again if

00:14:08,270 --> 00:14:12,470
I was here last year I would have said

00:14:10,670 --> 00:14:15,140
well you can use any database you like

00:14:12,470 --> 00:14:17,990
as long as it's my sequel Postgres

00:14:15,140 --> 00:14:19,760
Redis or RabbitMQ which aren't databases

00:14:17,990 --> 00:14:21,440
are notebook anyway those are the five

00:14:19,760 --> 00:14:22,970
data services we support what we've done

00:14:21,440 --> 00:14:25,750
with services is we've enabled you to

00:14:22,970 --> 00:14:28,040
plug in any service you like on our

00:14:25,750 --> 00:14:29,120
pivitol instance of Cloud Foundry we

00:14:28,040 --> 00:14:30,920
have a marketplace with lots of

00:14:29,120 --> 00:14:33,530
different vendors that you can very

00:14:30,920 --> 00:14:36,200
quickly plug in if you run Cloud Foundry

00:14:33,530 --> 00:14:37,730
in you're in business then you can

00:14:36,200 --> 00:14:39,800
provide your own services maybe you have

00:14:37,730 --> 00:14:41,720
an Oracle farm already and we can create

00:14:39,800 --> 00:14:43,520
a connection out of that and enable your

00:14:41,720 --> 00:14:47,480
application developers to use it very

00:14:43,520 --> 00:14:49,280
very quickly again very important I keep

00:14:47,480 --> 00:14:50,360
hammering this home the important thing

00:14:49,280 --> 00:14:52,280
here is that we're not no longer

00:14:50,360 --> 00:14:54,080
building these massive stacks that go

00:14:52,280 --> 00:14:56,240
from the infrastructure upwards all the

00:14:54,080 --> 00:15:00,140
way to the app we are literally making

00:14:56,240 --> 00:15:02,600
the applications much more portable and

00:15:00,140 --> 00:15:05,000
in fact not only that we can run them on

00:15:02,600 --> 00:15:10,550
two completely different infrastructures

00:15:05,000 --> 00:15:13,310
in the UK this year we have a bot abite

00:15:10,550 --> 00:15:16,100
to yearly charity drive called comic

00:15:13,310 --> 00:15:17,660
relief this is one of these telethon you

00:15:16,100 --> 00:15:19,730
know comedy things where people phone in

00:15:17,660 --> 00:15:22,070
or use their mobile to pledge donations

00:15:19,730 --> 00:15:24,620
for charity and that's kind of a

00:15:22,070 --> 00:15:26,480
critical application it's only required

00:15:24,620 --> 00:15:28,160
once every two years and it's only

00:15:26,480 --> 00:15:30,200
really required to be up and running for

00:15:28,160 --> 00:15:31,610
about nine hours but if anything goes

00:15:30,200 --> 00:15:33,560
wrong in that nine hours then they've

00:15:31,610 --> 00:15:36,550
lost the ability to take you know

00:15:33,560 --> 00:15:40,730
donations and and lost their core

00:15:36,550 --> 00:15:43,670
business or ability to operate my

00:15:40,730 --> 00:15:45,260
opportunity correct so what they did was

00:15:43,670 --> 00:15:47,010
they put Cloud Foundry

00:15:45,260 --> 00:15:50,040
on a vSphere data center in Lund

00:15:47,010 --> 00:15:51,510
and they also used Amazon in the US so

00:15:50,040 --> 00:15:52,980
that even if Amazon went down we could

00:15:51,510 --> 00:15:54,510
use vSphere even if these Phil went down

00:15:52,980 --> 00:15:57,000
we could use Amazon we have that

00:15:54,510 --> 00:15:58,770
geographical availability as well but

00:15:57,000 --> 00:16:00,030
the key point here was they didn't have

00:15:58,770 --> 00:16:01,740
to change your applications in any way

00:16:00,030 --> 00:16:03,570
and they can operate them in using

00:16:01,740 --> 00:16:05,820
exactly the same set of tools and

00:16:03,570 --> 00:16:08,070
commands the you know the the

00:16:05,820 --> 00:16:09,420
application developers were not even

00:16:08,070 --> 00:16:10,380
aware or did not need to be aware that

00:16:09,420 --> 00:16:14,460
they were running on two completely

00:16:10,380 --> 00:16:16,140
definitely researchers really nice that

00:16:14,460 --> 00:16:17,960
we don't have to make any changes to

00:16:16,140 --> 00:16:20,970
applications Josh will show you that

00:16:17,960 --> 00:16:23,940
shortly this year pivotal will have a

00:16:20,970 --> 00:16:25,610
packaged commercial product of kal

00:16:23,940 --> 00:16:27,900
pounder you can buy from us if you like

00:16:25,610 --> 00:16:30,060
and run on vSphere in your data center

00:16:27,900 --> 00:16:31,920
we also have this new run dot pivotal

00:16:30,060 --> 00:16:34,650
dot IO platform which is where the new

00:16:31,920 --> 00:16:36,780
spring IO website is working and we also

00:16:34,650 --> 00:16:39,330
have other partners around the world who

00:16:36,780 --> 00:16:41,460
are deploying Cloud Foundry and again

00:16:39,330 --> 00:16:45,030
giving you that choice so I'm from

00:16:41,460 --> 00:16:48,420
Europe our run dot pivotal tie the IO

00:16:45,030 --> 00:16:50,520
runs on Amazon in the US if I wanted to

00:16:48,420 --> 00:16:52,020
deploy to a European base pass I could

00:16:50,520 --> 00:16:54,390
choose one like a company called any

00:16:52,020 --> 00:16:55,890
nines here you'll actually run again on

00:16:54,390 --> 00:16:57,810
vSphere it doesn't matter to me that the

00:16:55,890 --> 00:17:00,720
point is they have a cloud available I

00:16:57,810 --> 00:17:02,550
can use the same tools I can change my

00:17:00,720 --> 00:17:05,040
target that I'm pointing my up with my

00:17:02,550 --> 00:17:08,280
application push to and just go ahead

00:17:05,040 --> 00:17:09,540
and use them and finally say you either

00:17:08,280 --> 00:17:11,130
you don't believe in this cloud thing at

00:17:09,540 --> 00:17:12,660
all or you just don't want you're not

00:17:11,130 --> 00:17:14,459
connected or you want to run something

00:17:12,660 --> 00:17:16,280
locally then we can actually run the

00:17:14,459 --> 00:17:18,300
entire cloud foundry component stack

00:17:16,280 --> 00:17:20,430
inside a virtual machine on your local

00:17:18,300 --> 00:17:21,810
machine on your local laptop now in

00:17:20,430 --> 00:17:23,760
previous years we offered this through

00:17:21,810 --> 00:17:25,050
something called micro Cloud Foundry and

00:17:23,760 --> 00:17:26,310
if you'd go on the Cloud Foundry website

00:17:25,050 --> 00:17:28,350
today they're still a link to that that

00:17:26,310 --> 00:17:29,820
we haven't updated it recently so what

00:17:28,350 --> 00:17:31,830
we're actually now doing is working with

00:17:29,820 --> 00:17:34,560
other partners and there are two open

00:17:31,830 --> 00:17:36,600
source projects one of them is called

00:17:34,560 --> 00:17:39,330
the vagrant installer if you're familiar

00:17:36,600 --> 00:17:40,890
with vagrant it's a way of spinning up

00:17:39,330 --> 00:17:42,330
virtual machines and just provisioning

00:17:40,890 --> 00:17:43,830
them locally and installing everything

00:17:42,330 --> 00:17:45,510
you need through an inner automated

00:17:43,830 --> 00:17:47,520
fashion so there's a vagrant installer

00:17:45,510 --> 00:17:49,200
that will build you a local Cloud

00:17:47,520 --> 00:17:51,090
Foundry instance in an in a virtual

00:17:49,200 --> 00:17:52,920
machine and you could run that on either

00:17:51,090 --> 00:17:55,380
VMware or you could run it on VirtualBox

00:17:52,920 --> 00:17:59,280
or whatever you choose there's also

00:17:55,380 --> 00:18:00,630
another one from NTT out of Japan which

00:17:59,280 --> 00:18:02,940
is a full

00:18:00,630 --> 00:18:05,310
Bausch deployed version of Cloud Foundry

00:18:02,940 --> 00:18:06,570
inside a virtual machine so you can run

00:18:05,310 --> 00:18:08,940
those locally you can test your app

00:18:06,570 --> 00:18:10,680
locally if you want to with exactly the

00:18:08,940 --> 00:18:12,810
same look and feel that you would have

00:18:10,680 --> 00:18:15,570
on a public cloud or a private cloud and

00:18:12,810 --> 00:18:19,290
then you can deploy when you're ready to

00:18:15,570 --> 00:18:21,810
into a production environment okay so

00:18:19,290 --> 00:18:23,280
that's kind of my level set introduction

00:18:21,810 --> 00:18:24,600
this is what Cloud Foundry is all about

00:18:23,280 --> 00:18:28,020
how are people doing with that

00:18:24,600 --> 00:18:34,640
description any any kind of questions

00:18:28,020 --> 00:18:34,640
about what we're trying to do here hi

00:18:40,020 --> 00:18:49,740
what pounder how production-ready is

00:18:41,820 --> 00:18:51,870
Cloud Foundry yeah so the question is

00:18:49,740 --> 00:18:54,300
can I describe how production ready

00:18:51,870 --> 00:18:57,480
Cloud Foundry is how production ready to

00:18:54,300 --> 00:19:00,840
private product has product is and and

00:18:57,480 --> 00:19:02,280
the services so sure so we have

00:19:00,840 --> 00:19:03,630
customers around the world running Cloud

00:19:02,280 --> 00:19:06,210
Foundry in production today I haven't

00:19:03,630 --> 00:19:08,130
gone and put a slide in this deck with

00:19:06,210 --> 00:19:10,530
lots of logos but what I was coming to

00:19:08,130 --> 00:19:12,000
talk about as such today we've just had

00:19:10,530 --> 00:19:14,670
the platform conference this weekend and

00:19:12,000 --> 00:19:17,490
we had you know lots of them racket sent

00:19:14,670 --> 00:19:19,530
out of Japan a couple of companies out

00:19:17,490 --> 00:19:20,910
of China I do the the China search

00:19:19,530 --> 00:19:23,100
engine is running the billion page views

00:19:20,910 --> 00:19:26,670
a day their advertising platform through

00:19:23,100 --> 00:19:28,340
Cloud Foundry we've got we've got many

00:19:26,670 --> 00:19:32,100
customers doing this in production today

00:19:28,340 --> 00:19:33,060
run dot pivotal dot IO it's entirely up

00:19:32,100 --> 00:19:35,910
to you whether you want to run

00:19:33,060 --> 00:19:37,800
production workloads there as I will

00:19:35,910 --> 00:19:40,980
show you in a moment what we have today

00:19:37,800 --> 00:19:42,630
is a 60 day free trial for users and we

00:19:40,980 --> 00:19:44,550
will then have billing it will be like

00:19:42,630 --> 00:19:46,770
something like Heroku with a with a

00:19:44,550 --> 00:19:48,660
credit card and we'll have different

00:19:46,770 --> 00:19:50,490
tiers and quality of service today

00:19:48,660 --> 00:19:53,160
everything on cloud foundry on Randall

00:19:50,490 --> 00:19:55,380
pivotal the i/o is services with a free

00:19:53,160 --> 00:19:56,970
tier and those free tiers may be limited

00:19:55,380 --> 00:19:58,770
in size let's say I don't know 20 gigs

00:19:56,970 --> 00:20:01,080
of data storage with something you'd

00:19:58,770 --> 00:20:03,030
have to look at the plans the third

00:20:01,080 --> 00:20:04,980
question was about the private pass

00:20:03,030 --> 00:20:08,760
product and pivotal will launch

00:20:04,980 --> 00:20:10,800
something this year or will put code

00:20:08,760 --> 00:20:12,270
name pivotal one which will contain a

00:20:10,800 --> 00:20:14,550
number of components including Cloud

00:20:12,270 --> 00:20:15,870
Foundry but that is not

00:20:14,550 --> 00:20:18,930
virtually available today although we

00:20:15,870 --> 00:20:24,660
are working with companies on our beta

00:20:18,930 --> 00:20:27,290
program already thanks alright so yeah

00:20:24,660 --> 00:20:27,290
another question hi

00:20:34,020 --> 00:20:40,140
so spring to IO is one of them right

00:20:38,180 --> 00:20:42,450
absolutely I mean we've obviously been

00:20:40,140 --> 00:20:45,360
developing an effort for a while in

00:20:42,450 --> 00:20:47,400
private so no I don't because at the

00:20:45,360 --> 00:20:49,350
moment for the broad number of

00:20:47,400 --> 00:20:51,570
developers it's a it's a it's a free

00:20:49,350 --> 00:20:54,960
trial period so after that we'll see who

00:20:51,570 --> 00:20:58,650
comes on board say that so that's where

00:20:54,960 --> 00:21:01,080
we are no worries so what to do since

00:20:58,650 --> 00:21:05,030
this time last year when we were up in

00:21:01,080 --> 00:21:06,870
Washington well everything actually

00:21:05,030 --> 00:21:08,900
literally it's a whole new world I was

00:21:06,870 --> 00:21:13,620
I've been sat with Josh working with him

00:21:08,900 --> 00:21:16,290
no no don't take I'm really good about

00:21:13,620 --> 00:21:21,090
that song on like one of the singing

00:21:16,290 --> 00:21:22,310
game sing star kind of space sorry so

00:21:21,090 --> 00:21:24,480
I've literally been sat with Josh

00:21:22,310 --> 00:21:28,110
recently working with him preparing this

00:21:24,480 --> 00:21:30,690
and Josh bless him in some as a simple

00:21:28,110 --> 00:21:32,580
guy it's true he likes his coffee and he

00:21:30,690 --> 00:21:34,440
you know he's been really i'm spring it

00:21:32,580 --> 00:21:35,850
as you've heard last night the spring

00:21:34,440 --> 00:21:37,950
team has been super busy

00:21:35,850 --> 00:21:39,570
i've been seeing you know the blog

00:21:37,950 --> 00:21:41,550
update all the new milestone releases

00:21:39,570 --> 00:21:43,800
we've been you know charging towards

00:21:41,550 --> 00:21:46,770
last night's reveal of spring io and the

00:21:43,800 --> 00:21:48,360
website so josh has been really busy and

00:21:46,770 --> 00:21:50,550
hasn't spent a whole lot of time with

00:21:48,360 --> 00:21:51,600
cloud foundry lately so i kind of had to

00:21:50,550 --> 00:21:53,550
hold his hand through some of the

00:21:51,600 --> 00:21:55,650
changes there's there's been a lot

00:21:53,550 --> 00:21:57,000
that's happened since last year so if

00:21:55,650 --> 00:21:58,170
you have looked at cloud foundry before

00:21:57,000 --> 00:21:59,970
and you haven't looked at it i donate

00:21:58,170 --> 00:22:02,220
for three or four months then there's

00:21:59,970 --> 00:22:03,750
some mind-blowing new cool stuff so the

00:22:02,220 --> 00:22:06,060
first thing is that we now are out what

00:22:03,750 --> 00:22:08,330
we call version two or fit it was

00:22:06,060 --> 00:22:11,190
formerly codename kind of next-gen ng

00:22:08,330 --> 00:22:12,360
and what that brings with it is a number

00:22:11,190 --> 00:22:14,310
of really important and very cool

00:22:12,360 --> 00:22:16,590
features one of them is kind of

00:22:14,310 --> 00:22:18,060
important if you work in a team so we

00:22:16,590 --> 00:22:19,530
have something called organizations and

00:22:18,060 --> 00:22:20,940
spaces and you saw that if you were at

00:22:19,530 --> 00:22:22,920
the keynote last night very briefly and

00:22:20,940 --> 00:22:25,980
I'll show it off again in a moment what

00:22:22,920 --> 00:22:27,540
that enables is going from the model

00:22:25,980 --> 00:22:28,290
that we had last year when you signed up

00:22:27,540 --> 00:22:30,270
you had an account

00:22:28,290 --> 00:22:33,330
you had a quota it was entirely related

00:22:30,270 --> 00:22:34,590
to you as an individual and then if you

00:22:33,330 --> 00:22:36,000
wanted anybody else to operate your

00:22:34,590 --> 00:22:39,450
application or stop oh sorry you had to

00:22:36,000 --> 00:22:41,490
give him your password not so secure so

00:22:39,450 --> 00:22:43,260
what we have now is an entirely immune

00:22:41,490 --> 00:22:45,050
model that enables teams to collaborate

00:22:43,260 --> 00:22:48,420
through something called organizations

00:22:45,050 --> 00:22:50,070
organizations can have many members and

00:22:48,420 --> 00:22:52,200
can have different quotas and

00:22:50,070 --> 00:22:54,210
permissions and I can give Josh access

00:22:52,200 --> 00:22:56,010
to my my organization but not let in

00:22:54,210 --> 00:22:57,560
delete or source or stuff we'll start my

00:22:56,010 --> 00:22:59,370
apps just view them and so on

00:22:57,560 --> 00:23:00,750
so that's really important the other

00:22:59,370 --> 00:23:03,210
thing we have in there is spaces and

00:23:00,750 --> 00:23:05,430
spaces are a way of actually segregating

00:23:03,210 --> 00:23:07,380
applications between environments so we

00:23:05,430 --> 00:23:08,580
have for example and you can call them

00:23:07,380 --> 00:23:09,870
anything you like but we have for

00:23:08,580 --> 00:23:12,090
example development and staging in

00:23:09,870 --> 00:23:13,530
production and then we can move our

00:23:12,090 --> 00:23:16,950
applications between those different

00:23:13,530 --> 00:23:19,290
environments and we actually scope the

00:23:16,950 --> 00:23:22,320
services with those in those spaces as

00:23:19,290 --> 00:23:24,120
well so our production database isn't

00:23:22,320 --> 00:23:27,840
visible to applications in our staging

00:23:24,120 --> 00:23:28,860
space we've rewritten a lot of the

00:23:27,840 --> 00:23:30,540
components but one of the really

00:23:28,860 --> 00:23:32,340
important ones who probably rewritten is

00:23:30,540 --> 00:23:34,350
the router which sits on the front of

00:23:32,340 --> 00:23:35,730
Cloud Foundry and the reach has been

00:23:34,350 --> 00:23:37,710
completely rewritten since this time

00:23:35,730 --> 00:23:42,330
last year we originally implemented it

00:23:37,710 --> 00:23:43,620
using a lure plug-in to nginx and what

00:23:42,330 --> 00:23:44,880
we've now done is we kind of said well

00:23:43,620 --> 00:23:46,650
you know that's live that gives us all

00:23:44,880 --> 00:23:49,200
the limitations of nginx nginx is

00:23:46,650 --> 00:23:52,140
awesome but up until relatively recently

00:23:49,200 --> 00:23:54,750
sort of about 11 months ago it didn't

00:23:52,140 --> 00:23:57,330
have any WebSocket support so we rewrote

00:23:54,750 --> 00:24:00,450
the router and we rewrote it fully in a

00:23:57,330 --> 00:24:02,610
language called go and because go is

00:24:00,450 --> 00:24:05,550
kind of a cool language actually and

00:24:02,610 --> 00:24:07,020
it's built for concurrency we've

00:24:05,550 --> 00:24:08,070
actually got four times performance

00:24:07,020 --> 00:24:09,780
improvement we're not going through like

00:24:08,070 --> 00:24:11,760
a plug-in interface into the nginx from

00:24:09,780 --> 00:24:13,080
lower and stuff fall times performance

00:24:11,760 --> 00:24:15,360
improvement just on the front end and

00:24:13,080 --> 00:24:16,980
its ability to route review requests and

00:24:15,360 --> 00:24:19,740
and this is something that makes my

00:24:16,980 --> 00:24:22,160
friend here very happy sorry I'm getting

00:24:19,740 --> 00:24:24,540
a bit too close to him this morning

00:24:22,160 --> 00:24:26,570
WebSockets okay and we saw that when

00:24:24,540 --> 00:24:29,610
Dave SIA showed off his app yesterday

00:24:26,570 --> 00:24:30,750
with spring boot so we now have full

00:24:29,610 --> 00:24:32,760
support for WebSocket and that's going

00:24:30,750 --> 00:24:36,660
to work brilliantly with the new support

00:24:32,760 --> 00:24:40,530
ins in the spring framework for new DEA

00:24:36,660 --> 00:24:42,330
s well what a DEA s well DEA S stand for

00:24:40,530 --> 00:24:44,970
droplet execution

00:24:42,330 --> 00:24:48,600
and these are the containers where your

00:24:44,970 --> 00:24:50,430
applications run on Cloud Foundry so

00:24:48,600 --> 00:24:52,070
what we've done since last year was

00:24:50,430 --> 00:24:54,090
we've completely rewritten the DEA

00:24:52,070 --> 00:24:55,710
previously we had a separate component

00:24:54,090 --> 00:24:57,750
called a stager when you push your

00:24:55,710 --> 00:24:59,880
application it was responsible going off

00:24:57,750 --> 00:25:01,530
and working out what bits were need and

00:24:59,880 --> 00:25:03,240
then transferring it to the drop the

00:25:01,530 --> 00:25:04,740
execution agent what we've done is we've

00:25:03,240 --> 00:25:07,470
collapsed those two concepts so the

00:25:04,740 --> 00:25:09,150
stator is now built into the DEA and

00:25:07,470 --> 00:25:12,240
we've also given its support for bill

00:25:09,150 --> 00:25:14,340
packs now I mentioned previously that

00:25:12,240 --> 00:25:16,410
bill packs give you this ability for

00:25:14,340 --> 00:25:18,660
pluggable runtimes but what's really

00:25:16,410 --> 00:25:22,410
cool about bill packs is that we've

00:25:18,660 --> 00:25:23,730
shared the specification with one of the

00:25:22,410 --> 00:25:26,520
other platforms and service providers

00:25:23,730 --> 00:25:28,890
Heroku so Heroku is a closed source it's

00:25:26,520 --> 00:25:30,870
owned by Salesforce now very very cool

00:25:28,890 --> 00:25:32,190
platform very very nice they've actually

00:25:30,870 --> 00:25:36,300
just launched a new website this morning

00:25:32,190 --> 00:25:37,650
as well which looks really nice but what

00:25:36,300 --> 00:25:39,900
they did it while ago they started off

00:25:37,650 --> 00:25:41,370
as a ruby based pass and they decided

00:25:39,900 --> 00:25:44,070
they wanted to be able to add runtimes

00:25:41,370 --> 00:25:46,230
more recently so they created this

00:25:44,070 --> 00:25:48,900
builds built pack specification they

00:25:46,230 --> 00:25:50,610
made it open source as the open source

00:25:48,900 --> 00:25:53,640
community does lots of people went and

00:25:50,610 --> 00:25:55,110
made build packs to support their - to

00:25:53,640 --> 00:25:57,750
scratch their favorite itch what I want

00:25:55,110 --> 00:25:58,980
- I want to run time for a Haskell

00:25:57,750 --> 00:26:01,440
application I don't know I keep going

00:25:58,980 --> 00:26:06,690
back to that but no Haskell seems to be

00:26:01,440 --> 00:26:11,100
the way forward in my opinion that's

00:26:06,690 --> 00:26:12,180
read oh no you're right ok so um the

00:26:11,100 --> 00:26:13,680
nice thing is we can take any of those

00:26:12,180 --> 00:26:15,300
bill packs that were built for Heroku

00:26:13,680 --> 00:26:16,590
and we can run them on Cloud Foundry so

00:26:15,300 --> 00:26:19,650
if you've got an application today that

00:26:16,590 --> 00:26:21,960
runs on Heroku it's pretty trivially

00:26:19,650 --> 00:26:23,610
easy to support - Cloud Foundry there

00:26:21,960 --> 00:26:25,650
are one or two differences between the

00:26:23,610 --> 00:26:27,300
way that we implement the bill packs but

00:26:25,650 --> 00:26:29,580
broadly speaking you can now bring any

00:26:27,300 --> 00:26:32,550
application that runs on Heroku onto

00:26:29,580 --> 00:26:35,160
Cloud Foundry that's massively increased

00:26:32,550 --> 00:26:36,870
you know our scope this time last year

00:26:35,160 --> 00:26:38,550
we had three language runtimes and

00:26:36,870 --> 00:26:40,860
frameworks and if you wanted to add any

00:26:38,550 --> 00:26:42,900
others you had to fork the entire Cloud

00:26:40,860 --> 00:26:45,450
Foundry codebase build the support in

00:26:42,900 --> 00:26:46,830
and then by the way I don't try and

00:26:45,450 --> 00:26:48,150
submit it back to us and last year we

00:26:46,830 --> 00:26:50,700
weren't so good at dealing with pull

00:26:48,150 --> 00:26:52,440
requests or build your own Cloud Foundry

00:26:50,700 --> 00:26:54,090
and run it there so if you wanted to run

00:26:52,440 --> 00:26:55,830
a PHP app you needed to go to one of our

00:26:54,090 --> 00:26:58,409
partners who had specific

00:26:55,830 --> 00:27:00,299
built-in PHP support now you can run on

00:26:58,409 --> 00:27:03,360
any cloud foundry instance with any

00:27:00,299 --> 00:27:05,309
runtime you want with a build pack the

00:27:03,360 --> 00:27:06,630
last thing I think it kind of relates is

00:27:05,309 --> 00:27:09,299
the Ville packs about extensibility

00:27:06,630 --> 00:27:13,019
isn't we've now kind of reworked our

00:27:09,299 --> 00:27:15,480
services support very very often if I

00:27:13,019 --> 00:27:16,559
was talking to a company that was

00:27:15,480 --> 00:27:18,539
interested in implementing their own

00:27:16,559 --> 00:27:20,730
private platform as a service they would

00:27:18,539 --> 00:27:23,970
want to say to me hey well how can we

00:27:20,730 --> 00:27:25,289
connect to our collapse what we've now

00:27:23,970 --> 00:27:27,510
got is something called user provided

00:27:25,289 --> 00:27:30,570
services so we have the ability to plug

00:27:27,510 --> 00:27:32,340
in those existing data services it was

00:27:30,570 --> 00:27:33,809
really it's really hard given the the

00:27:32,340 --> 00:27:36,539
massive variety of data services

00:27:33,809 --> 00:27:38,429
available but ask to know how to host

00:27:36,539 --> 00:27:40,740
and scale all of them properly

00:27:38,429 --> 00:27:43,830
right so it's much better for us to say

00:27:40,740 --> 00:27:45,960
hey you know Oracle or Labs or

00:27:43,830 --> 00:27:47,760
whoever you are you know how to scale

00:27:45,960 --> 00:27:49,529
your own technology we'll leave you to

00:27:47,760 --> 00:27:51,269
do that we're happy to connect to you

00:27:49,529 --> 00:27:53,250
through your interfaces but you know

00:27:51,269 --> 00:27:55,350
what you should go ahead and do that

00:27:53,250 --> 00:27:57,090
yourselves and we also have on a run

00:27:55,350 --> 00:27:59,330
pivotal i/o platform the marketplace

00:27:57,090 --> 00:28:02,340
which I will show you in just a moment

00:27:59,330 --> 00:28:03,990
very very quick architecture diagram

00:28:02,340 --> 00:28:06,090
before we start showing some code and

00:28:03,990 --> 00:28:07,980
doing some demos this is kind of the

00:28:06,090 --> 00:28:10,620
component tree of the cloud foundry and

00:28:07,980 --> 00:28:12,210
honestly my hope is that has spring

00:28:10,620 --> 00:28:14,850
developers none of you really need to

00:28:12,210 --> 00:28:17,519
know this ok but this is kind of what it

00:28:14,850 --> 00:28:20,700
is it's it's a set of loosely coupled

00:28:17,519 --> 00:28:22,740
components addressable over HTTP REST

00:28:20,700 --> 00:28:24,269
connections that talk to one another I

00:28:22,740 --> 00:28:26,490
haven't drawn the entire flow of

00:28:24,269 --> 00:28:28,500
everything here but we have the router

00:28:26,490 --> 00:28:30,179
at the front we have it something called

00:28:28,500 --> 00:28:32,190
the cloud controller is what which which

00:28:30,179 --> 00:28:32,940
is what you talk to when you run your

00:28:32,190 --> 00:28:35,220
Cloud Foundry

00:28:32,940 --> 00:28:38,070
admin commands on the command line or in

00:28:35,220 --> 00:28:39,510
through STS we have a security service

00:28:38,070 --> 00:28:42,000
could be you a a which is written in the

00:28:39,510 --> 00:28:44,580
spring by the way we have the da's which

00:28:42,000 --> 00:28:46,190
is where the applications run and at the

00:28:44,580 --> 00:28:49,500
bottom we've got this thing called Bosh

00:28:46,190 --> 00:28:52,080
so Bosh is actually our installer and

00:28:49,500 --> 00:28:54,090
our abstraction layer for talking to the

00:28:52,080 --> 00:28:56,730
infrastructure it lets us say you know

00:28:54,090 --> 00:28:59,519
what I want to use ATMs over there

00:28:56,730 --> 00:29:03,419
I want Cloud Controller 3 execution

00:28:59,519 --> 00:29:05,610
engines a health manager go go ahead

00:29:03,419 --> 00:29:07,080
install it for me now and then it will

00:29:05,610 --> 00:29:08,580
spin up and take a few hours but that's

00:29:07,080 --> 00:29:10,030
what that's the command that does that

00:29:08,580 --> 00:29:12,830
for us

00:29:10,030 --> 00:29:14,030
okay so enough talking from me for now

00:29:12,830 --> 00:29:16,070
although I will do a little bit of

00:29:14,030 --> 00:29:19,600
talking as I actually spin up this demo

00:29:16,070 --> 00:29:23,480
I was going to show you very quickly

00:29:19,600 --> 00:29:25,390
what the new platform looks like see

00:29:23,480 --> 00:29:41,060
what josh has open in his browser

00:29:25,390 --> 00:29:42,260
nothing embarrassing yet okay alright so

00:29:41,060 --> 00:29:43,670
I'm just gonna give you a tour of what

00:29:42,260 --> 00:29:44,750
the Cloud Foundry I'm user interface

00:29:43,670 --> 00:29:46,340
except by the way we didn't have this

00:29:44,750 --> 00:29:48,020
last year either so we have a whole new

00:29:46,340 --> 00:29:49,400
web console that you can actually kind

00:29:48,020 --> 00:29:50,450
of see and work out what's going on

00:29:49,400 --> 00:29:52,400
which i think is really nice I'm just

00:29:50,450 --> 00:29:55,070
going to login go ahead and log into my

00:29:52,400 --> 00:29:59,060
account on the cloud if you are here and

00:29:55,070 --> 00:30:01,280
you want to get a an account then we

00:29:59,060 --> 00:30:03,170
have the hoodie Pusha thorne again so if

00:30:01,280 --> 00:30:06,020
you've never got the nice cool brown

00:30:03,170 --> 00:30:10,060
cool warm warm but kind of you know

00:30:06,020 --> 00:30:12,230
stylistically cool brown brown brown

00:30:10,060 --> 00:30:14,030
pre-shape yak hoodie then then you can

00:30:12,230 --> 00:30:15,080
get one of those by signing up if you

00:30:14,030 --> 00:30:16,850
click on create an account

00:30:15,080 --> 00:30:18,830
I believe the code is spring one I'll

00:30:16,850 --> 00:30:20,330
need to double check that what's my

00:30:18,830 --> 00:30:24,980
password I was that thing isn't it quite

00:30:20,330 --> 00:30:26,510
scary okay so we're looking into the

00:30:24,980 --> 00:30:28,850
console and let's have a quick look I've

00:30:26,510 --> 00:30:30,230
got I'm going to at the top here we've

00:30:28,850 --> 00:30:32,240
got I'm just gonna get rid of this free

00:30:30,230 --> 00:30:33,860
trial message at the top here we've got

00:30:32,240 --> 00:30:35,090
a drop-down which lets me choose with an

00:30:33,860 --> 00:30:36,500
organization so I've got two

00:30:35,090 --> 00:30:39,020
organizations one is my managers

00:30:36,500 --> 00:30:40,430
organization you can see on the right

00:30:39,020 --> 00:30:42,110
hand side here all the different users I

00:30:40,430 --> 00:30:43,580
could go and I could probably go and

00:30:42,110 --> 00:30:44,990
edit this and remove Scott Frederick's

00:30:43,580 --> 00:30:47,330
permissions on everything which would be

00:30:44,990 --> 00:30:49,820
really funny for his demo later or I

00:30:47,330 --> 00:30:50,960
could I kind of go ahead and switch to

00:30:49,820 --> 00:30:53,240
my own organization so I don't

00:30:50,960 --> 00:30:55,010
accidentally delete Scott from pivot or

00:30:53,240 --> 00:30:57,080
that would be upsetting it's all of us

00:30:55,010 --> 00:31:00,260
so my demo my app look at my

00:30:57,080 --> 00:31:01,520
organization I called it a piper - org

00:31:00,260 --> 00:31:03,380
that's really I thought I felt like that

00:31:01,520 --> 00:31:06,100
was original you know it really

00:31:03,380 --> 00:31:06,100
expressed Who I am

00:31:07,330 --> 00:31:12,200
yeah yeah I'm and across you see on this

00:31:10,520 --> 00:31:12,980
bar here I've got these app spaces so

00:31:12,200 --> 00:31:14,900
I've got development

00:31:12,980 --> 00:31:16,220
I've got production or a staging and

00:31:14,900 --> 00:31:17,750
again I can just click between and I

00:31:16,220 --> 00:31:20,120
actually got no apps in my staging space

00:31:17,750 --> 00:31:21,800
right now I can add them so these are

00:31:20,120 --> 00:31:22,640
these are effectively just labels that

00:31:21,800 --> 00:31:25,310
let me part

00:31:22,640 --> 00:31:27,020
tician my environment into into separate

00:31:25,310 --> 00:31:28,640
sections you'll see though that as well

00:31:27,020 --> 00:31:30,740
as apps in staging it says no apps in

00:31:28,640 --> 00:31:32,990
this app space it says no services so

00:31:30,740 --> 00:31:35,540
again I mentioned earlier but when we

00:31:32,990 --> 00:31:37,520
create these spaces we are scoping our

00:31:35,540 --> 00:31:40,220
applications and our services to those

00:31:37,520 --> 00:31:42,350
spaces so if we have a database that you

00:31:40,220 --> 00:31:44,360
know mark contains test data then we're

00:31:42,350 --> 00:31:45,950
going to scope that to our let's say

00:31:44,360 --> 00:31:47,780
that developmental staging environment

00:31:45,950 --> 00:31:49,100
not to our production environment let me

00:31:47,780 --> 00:31:51,800
go back to development and just step

00:31:49,100 --> 00:31:53,500
through some of these apps and just give

00:31:51,800 --> 00:31:59,930
you an idea of what we have here

00:31:53,500 --> 00:32:01,190
apparently I'm a fan of PHP you so one

00:31:59,930 --> 00:32:02,450
of the apps here in fact is quite

00:32:01,190 --> 00:32:06,650
interesting this bottom app here which

00:32:02,450 --> 00:32:08,690
Twi CF this is actually a blog this is

00:32:06,650 --> 00:32:11,000
our this week in Cloud Foundry blog so

00:32:08,690 --> 00:32:12,230
if I just click through to it I didn't

00:32:11,000 --> 00:32:13,700
follow the link to the app itself but

00:32:12,230 --> 00:32:14,870
I'll click through here and I can see

00:32:13,700 --> 00:32:16,700
that it's running which is good because

00:32:14,870 --> 00:32:18,020
it means my blog is available I've got

00:32:16,700 --> 00:32:20,810
two instances running which is good

00:32:18,020 --> 00:32:23,300
because if we as the operators of run

00:32:20,810 --> 00:32:25,220
pivotal need to move your app for

00:32:23,300 --> 00:32:26,360
operational reasons then we'll always do

00:32:25,220 --> 00:32:28,760
it in such a way that one of your

00:32:26,360 --> 00:32:30,260
instances will always be available so by

00:32:28,760 --> 00:32:32,510
having two app instances there it means

00:32:30,260 --> 00:32:34,220
I've got some availability I know what

00:32:32,510 --> 00:32:35,690
memory is available it doesn't tell me

00:32:34,220 --> 00:32:38,150
what runtime using on this particular

00:32:35,690 --> 00:32:41,000
console I happen to know this is a ruby

00:32:38,150 --> 00:32:43,280
app it's written in is an application

00:32:41,000 --> 00:32:44,870
called octo press which is a very

00:32:43,280 --> 00:32:47,870
lightweight way of publishing a blog

00:32:44,870 --> 00:32:49,700
using markdown this app requires no

00:32:47,870 --> 00:32:50,930
services I can see my two instances the

00:32:49,700 --> 00:32:54,650
other interesting thing here they look

00:32:50,930 --> 00:32:56,150
is these URLs so by default every app

00:32:54,650 --> 00:32:58,870
that we deployed to run dot pivotal IO

00:32:56,150 --> 00:33:01,720
gets a dot C F apps to IO subdomain

00:32:58,870 --> 00:33:03,920
top-level domain

00:33:01,720 --> 00:33:05,360
I've actually mapped my own domain

00:33:03,920 --> 00:33:07,820
because I'd like my blog to be available

00:33:05,360 --> 00:33:09,080
right this week in CF com hey this is

00:33:07,820 --> 00:33:11,030
this week in Cloud Foundry you should

00:33:09,080 --> 00:33:12,800
read it it's not quite as cool as this

00:33:11,030 --> 00:33:14,360
week in spring primarily because I

00:33:12,800 --> 00:33:15,830
haven't yet got to the point where I

00:33:14,360 --> 00:33:17,750
publish it on the same day every week

00:33:15,830 --> 00:33:19,430
and some weeks I don't publish it at all

00:33:17,750 --> 00:33:21,200
because I'm traveling too much but John

00:33:19,430 --> 00:33:23,000
learning everything I know from Josh I

00:33:21,200 --> 00:33:24,680
was inspired by Josh's this week in

00:33:23,000 --> 00:33:27,020
spring this week in cloud boundaries

00:33:24,680 --> 00:33:31,040
there for your pleasure delight and

00:33:27,020 --> 00:33:32,420
information so again last year we didn't

00:33:31,040 --> 00:33:33,860
have custom domains we kept saying to

00:33:32,420 --> 00:33:35,740
everyone yes custom domains are coming

00:33:33,860 --> 00:33:37,090
hey guys they're here

00:33:35,740 --> 00:33:42,220
you can do that now you can run your app

00:33:37,090 --> 00:33:44,290
on your own domain yay go us alright so

00:33:42,220 --> 00:33:45,790
that was oh the other really important

00:33:44,290 --> 00:33:47,080
thing an Emer is at the background he'll

00:33:45,790 --> 00:33:51,309
be very upset if I don't talk about this

00:33:47,080 --> 00:33:52,780
is is our marketplace so we can go

00:33:51,309 --> 00:33:54,160
through to our marketplace and thanks to

00:33:52,780 --> 00:33:57,010
the hard work of people like the

00:33:54,160 --> 00:33:58,929
gentleman by the door we've got a group

00:33:57,010 --> 00:34:01,210
of great partners who really know how to

00:33:58,929 --> 00:34:03,100
make these services work how to scale

00:34:01,210 --> 00:34:05,380
them in production we've got for example

00:34:03,100 --> 00:34:06,640
elephant sequel down here we've got

00:34:05,380 --> 00:34:09,820
Redis cloud

00:34:06,640 --> 00:34:12,100
we've got lab once again right if

00:34:09,820 --> 00:34:14,619
I if I want to run a cluster of

00:34:12,100 --> 00:34:16,360
data servers inside cloud foundry I need

00:34:14,619 --> 00:34:18,159
to know how to operate that it's much

00:34:16,360 --> 00:34:19,960
easier for me to say you know what

00:34:18,159 --> 00:34:21,610
I just want to click through here plan

00:34:19,960 --> 00:34:23,169
options now at the moment as I mentioned

00:34:21,610 --> 00:34:24,429
all of these have a free plan and they

00:34:23,169 --> 00:34:26,740
haven't got their paid plans available

00:34:24,429 --> 00:34:29,379
yet I know that I'll be running in their

00:34:26,740 --> 00:34:30,580
sandbox with nearly 500 mega storage I

00:34:29,379 --> 00:34:32,320
get backups there

00:34:30,580 --> 00:34:34,929
I've got continuous monitoring available

00:34:32,320 --> 00:34:38,679
if I select this plan I can go ahead and

00:34:34,929 --> 00:34:39,850
create a new instance I can assign

00:34:38,679 --> 00:34:41,560
it to a space again that's going to

00:34:39,850 --> 00:34:43,090
scope it's a visibility to that space

00:34:41,560 --> 00:34:45,399
and then I could bind it to an

00:34:43,090 --> 00:34:47,980
application that's running I'm not going

00:34:45,399 --> 00:34:49,450
to do that right now I am going to do

00:34:47,980 --> 00:34:55,869
one thing before I switch back to the

00:34:49,450 --> 00:34:57,340
slide deck how are people feeling with

00:34:55,869 --> 00:34:58,530
looking at that console you following

00:34:57,340 --> 00:35:02,170
what I'm showing you

00:34:58,530 --> 00:35:03,580
yeah anytime you've got any time you've

00:35:02,170 --> 00:35:05,440
got questions during the week by the way

00:35:03,580 --> 00:35:07,450
then we will be hanging around in the

00:35:05,440 --> 00:35:08,770
demo lounge also on the mezzanine here

00:35:07,450 --> 00:35:10,090
you'll see that there's kind of little

00:35:08,770 --> 00:35:11,859
circles have been bags with flags

00:35:10,090 --> 00:35:14,530
there's a kind of areas where we'll have

00:35:11,859 --> 00:35:16,030
pivotal people to come and help you some

00:35:14,530 --> 00:35:18,190
of us have got player boundary t-shirts

00:35:16,030 --> 00:35:20,170
some of us are wearing spring or other

00:35:18,190 --> 00:35:22,450
t-shirts on so you should be - identify

00:35:20,170 --> 00:35:25,890
us but be come and talk to us and we can

00:35:22,450 --> 00:35:25,890
walk you through any of this stuff hi

00:35:27,090 --> 00:35:31,030
yeah the the relationship to application

00:35:29,710 --> 00:35:33,400
services that's a great question let me

00:35:31,030 --> 00:35:34,930
show you which of these so I'm going to

00:35:33,400 --> 00:35:38,980
click through to this one tiny tiny tiny

00:35:34,930 --> 00:35:40,660
tiny has a service bound to it and it's

00:35:38,980 --> 00:35:42,190
an elephant's equal service so what I'm

00:35:40,660 --> 00:35:44,410
saying here is tiny tiny is application

00:35:42,190 --> 00:35:48,040
I happen to know it's a PHP application

00:35:44,410 --> 00:35:49,020
and that application actually requires a

00:35:48,040 --> 00:35:52,890
database

00:35:49,020 --> 00:35:55,800
so I found a post res database to it so

00:35:52,890 --> 00:35:58,440
all I'm doing here is we're saying you

00:35:55,800 --> 00:36:00,470
know I as a developer need to access

00:35:58,440 --> 00:36:02,730
data in my application whether that's um

00:36:00,470 --> 00:36:05,190
seek or no sequel database whether

00:36:02,730 --> 00:36:06,570
that's something like New Relic that's

00:36:05,190 --> 00:36:08,310
actually externally monitoring me that

00:36:06,570 --> 00:36:11,250
once we want to have a plugin for in my

00:36:08,310 --> 00:36:13,380
application an important point to note

00:36:11,250 --> 00:36:15,810
is that there is not necessarily a

00:36:13,380 --> 00:36:17,700
one-to-one relationship right so I can

00:36:15,810 --> 00:36:19,560
bind multiple applications to the same

00:36:17,700 --> 00:36:21,600
service that's kind of important when

00:36:19,560 --> 00:36:23,940
we're talking about like Message Queuing

00:36:21,600 --> 00:36:26,010
right so we want to be passing AMQP

00:36:23,940 --> 00:36:27,750
messages on rabbit and Q then we might

00:36:26,010 --> 00:36:29,670
want multiple applications to be looking

00:36:27,750 --> 00:36:31,740
at the same message broker so we can do

00:36:29,670 --> 00:36:33,690
that message passing and actually

00:36:31,740 --> 00:36:35,369
orchestrate our applications

00:36:33,690 --> 00:36:36,930
it also means we can decompose our

00:36:35,369 --> 00:36:39,720
applications right we can have modules

00:36:36,930 --> 00:36:41,130
that are written in a language language

00:36:39,720 --> 00:36:43,800
and framework maybe we have one written

00:36:41,130 --> 00:36:46,800
in groovy one written in Java one

00:36:43,800 --> 00:36:48,810
written in Ruby for whatever reason and

00:36:46,800 --> 00:36:52,710
they can all interoperate either very

00:36:48,810 --> 00:36:54,150
HTTP your messaging does that help great

00:36:52,710 --> 00:37:00,119
I'm going to show you some more with

00:36:54,150 --> 00:37:01,350
services as we go through absolutely

00:37:00,119 --> 00:37:02,760
there again yeah we can we can have

00:37:01,350 --> 00:37:05,430
multiple services Pro so that was my

00:37:02,760 --> 00:37:06,840
first kind of just walkthrough of what

00:37:05,430 --> 00:37:08,850
we have available and run up people to

00:37:06,840 --> 00:37:11,040
the i/o what I want to do now is talk

00:37:08,850 --> 00:37:14,100
about what we're all here for which is

00:37:11,040 --> 00:37:16,920
spring and Java because when we first

00:37:14,100 --> 00:37:19,170
launched run dot pivoted Ohio what we

00:37:16,920 --> 00:37:21,900
did was we said you know what we we need

00:37:19,170 --> 00:37:23,460
to provide the same experience that our

00:37:21,900 --> 00:37:26,520
users from the previous version both

00:37:23,460 --> 00:37:28,260
version one expected and that was a node

00:37:26,520 --> 00:37:32,490
runtime for JavaScript apps of Ruby

00:37:28,260 --> 00:37:34,440
runtime and a java runtime and we said

00:37:32,490 --> 00:37:35,700
well you know with these bill packs we

00:37:34,440 --> 00:37:40,220
borrowed them from a hurry ok let's go

00:37:35,700 --> 00:37:41,340
grab her his bill packs they work so we

00:37:40,220 --> 00:37:45,900
relaxed

00:37:41,340 --> 00:37:47,010
deep breath so so we forked the Heroku

00:37:45,900 --> 00:37:48,090
bill packs and we took them and we

00:37:47,010 --> 00:37:49,740
entered order without boundary and they

00:37:48,090 --> 00:37:52,440
worked which is what we expected what we

00:37:49,740 --> 00:37:55,050
hopes and gave you guys a relatively

00:37:52,440 --> 00:37:58,140
good experience but then what we did was

00:37:55,050 --> 00:38:01,050
we set the the walking God in human form

00:37:58,140 --> 00:38:02,520
that has been Hale on the problem ok how

00:38:01,050 --> 00:38:05,040
many people here know been of

00:38:02,520 --> 00:38:07,110
then speak before right so unfortunately

00:38:05,040 --> 00:38:08,550
unfortunately Josh and I wanted to be at

00:38:07,110 --> 00:38:10,500
his talk which is on right now but we

00:38:08,550 --> 00:38:12,120
have to company this one so he gave a

00:38:10,500 --> 00:38:13,650
great demo at our platform conference

00:38:12,120 --> 00:38:15,870
this weekend live demo of the Java build

00:38:13,650 --> 00:38:17,610
pack so the spring team have fully

00:38:15,870 --> 00:38:19,170
rewritten the Java build pack so it gets

00:38:17,610 --> 00:38:21,480
you getting everything you expect from

00:38:19,170 --> 00:38:24,120
the spring team right super cool super

00:38:21,480 --> 00:38:26,910
simple just works highly configurable

00:38:24,120 --> 00:38:28,500
highly extensible right so we have a

00:38:26,910 --> 00:38:30,660
choice of containers in there and of

00:38:28,500 --> 00:38:32,730
course we're ready for spring i/o right

00:38:30,660 --> 00:38:34,620
so we've got support for you know the

00:38:32,730 --> 00:38:37,260
web container we've got support for

00:38:34,620 --> 00:38:39,090
rails and play and groovy and so on we

00:38:37,260 --> 00:38:40,770
also have support for what Dave SIA

00:38:39,090 --> 00:38:43,740
showed off last night which is the

00:38:40,770 --> 00:38:45,840
spring boot and Java main loader right

00:38:43,740 --> 00:38:48,060
there when he says up last night he's

00:38:45,840 --> 00:38:50,220
been waiting to set an ableist spring

00:38:48,060 --> 00:38:52,530
out but you could just write a static

00:38:50,220 --> 00:38:55,470
main method in so we have the the Java

00:38:52,530 --> 00:38:56,460
main Runner in there as well it's highly

00:38:55,470 --> 00:38:59,970
configurable it's got some great

00:38:56,460 --> 00:39:02,070
documentation if you go to blog book

00:38:59,970 --> 00:39:03,510
Cloud Foundry com scroll back about

00:39:02,070 --> 00:39:05,370
three entries I think cuz we've had a

00:39:03,510 --> 00:39:07,050
load of news this week there's a there's

00:39:05,370 --> 00:39:09,480
a blog post from Ben about how they have

00:39:07,050 --> 00:39:10,920
a team build this they built it in

00:39:09,480 --> 00:39:12,780
association with the Cloud Foundry team

00:39:10,920 --> 00:39:14,340
obviously they that came in paired with

00:39:12,780 --> 00:39:18,000
us in pivotal labs in San Francisco

00:39:14,340 --> 00:39:20,130
worked very very closely with us and

00:39:18,000 --> 00:39:22,620
also the documentation on github is

00:39:20,130 --> 00:39:25,440
excellent really nice and broken down if

00:39:22,620 --> 00:39:26,790
you want to add additional runtimes and

00:39:25,440 --> 00:39:29,160
other people have already forked it and

00:39:26,790 --> 00:39:30,720
if you want to for some reason go ahead

00:39:29,160 --> 00:39:33,240
and use drop wizard or Jonas or or

00:39:30,720 --> 00:39:35,160
something like that as your container

00:39:33,240 --> 00:39:37,470
then you can find it someone that's

00:39:35,160 --> 00:39:39,660
already done that for you so there's the

00:39:37,470 --> 00:39:42,180
blog and blog entry from from Ben and

00:39:39,660 --> 00:39:45,390
there's the github repo there to go take

00:39:42,180 --> 00:39:48,120
a look at and again I'm going to come

00:39:45,390 --> 00:39:50,130
back to this this this theme that we

00:39:48,120 --> 00:39:51,900
have of choice right we're actually

00:39:50,130 --> 00:39:53,700
partnering very closely with a number of

00:39:51,900 --> 00:39:55,920
companies on the open sourced our

00:39:53,700 --> 00:39:58,260
foundry project one of the big ones is

00:39:55,920 --> 00:39:59,550
IBM they've recently joined us primarily

00:39:58,260 --> 00:40:01,410
because they've doubled down on

00:39:59,550 --> 00:40:03,030
OpenStack as their enterprise cloud of

00:40:01,410 --> 00:40:05,400
choice so they've said hey you know what

00:40:03,030 --> 00:40:06,990
they looked around at the other platform

00:40:05,400 --> 00:40:08,640
players and the in the market and they

00:40:06,990 --> 00:40:09,840
said you know what Cloud Foundry seems

00:40:08,640 --> 00:40:13,530
to be going in the right direction we're

00:40:09,840 --> 00:40:14,010
going to go with them if you wish would

00:40:13,530 --> 00:40:14,760
you like

00:40:14,010 --> 00:40:17,550
yeah

00:40:14,760 --> 00:40:18,630
I just want to put this out here what

00:40:17,550 --> 00:40:20,820
he's saying is very important I

00:40:18,630 --> 00:40:23,850
personally have had what i will call IBM

00:40:20,820 --> 00:40:25,560
Tourette's I have been able to say nice

00:40:23,850 --> 00:40:27,869
things but I being just physically am i

00:40:25,560 --> 00:40:29,850
capable of it but then they did this I

00:40:27,869 --> 00:40:32,150
mean they actually worked very very very

00:40:29,850 --> 00:40:35,820
hard and a very very cool open-source

00:40:32,150 --> 00:40:37,380
Liberty compliant built back and it

00:40:35,820 --> 00:40:40,170
really works beautifully exactly very

00:40:37,380 --> 00:40:43,380
small in scope so that brain I think not

00:40:40,170 --> 00:40:45,119
the IBM you guys may know this is really

00:40:43,380 --> 00:40:48,270
awesome stuff but if you get a chance to

00:40:45,119 --> 00:40:49,680
check it out please do I really um again

00:40:48,270 --> 00:40:52,200
I'm going to just refer back to our

00:40:49,680 --> 00:40:54,359
platform conference this weekend rob me

00:40:52,200 --> 00:40:55,530
the head of pivotal labs was David

00:40:54,359 --> 00:40:58,020
closing address and was talking about

00:40:55,530 --> 00:41:00,000
I'm just gonna repeat Rob's story it's

00:40:58,020 --> 00:41:01,859
not my story into Rob's story and I feel

00:41:00,000 --> 00:41:03,270
slightly guilty about stealing it but he

00:41:01,859 --> 00:41:04,619
said that he grew up when he grew up he

00:41:03,270 --> 00:41:07,170
grew up in an IBM family

00:41:04,619 --> 00:41:09,810
he works you know his dad was with IBM

00:41:07,170 --> 00:41:12,210
storage for a long time and when EMC

00:41:09,810 --> 00:41:13,230
came along he felt that you know his dad

00:41:12,210 --> 00:41:16,080
would could call them a fierce

00:41:13,230 --> 00:41:18,240
competitor no you know EMC really kind

00:41:16,080 --> 00:41:21,750
of upturned you know the storage market

00:41:18,240 --> 00:41:24,390
in the 90s for IBM and then Rob went off

00:41:21,750 --> 00:41:28,830
and set up pivotal labs and then he'll

00:41:24,390 --> 00:41:31,170
have to go to quite by EMC awkward but

00:41:28,830 --> 00:41:32,520
anyway what he closed off by saying you

00:41:31,170 --> 00:41:34,980
know look hey we've got these guys from

00:41:32,520 --> 00:41:36,750
IBM working with us now both on both on

00:41:34,980 --> 00:41:38,580
Cloud Foundry both on you know

00:41:36,750 --> 00:41:39,840
collaborating with us on things like on

00:41:38,580 --> 00:41:42,510
a website build pack for Cloud Foundry

00:41:39,840 --> 00:41:44,369
and he said what we're doing with this

00:41:42,510 --> 00:41:46,830
new pivotal organization with Cloud

00:41:44,369 --> 00:41:48,570
Foundry with with spring is is not

00:41:46,830 --> 00:41:50,369
fiercely competing it's fierce

00:41:48,570 --> 00:41:51,780
collaboration and I really love that

00:41:50,369 --> 00:41:54,600
little sound soundbite he left us with

00:41:51,780 --> 00:41:56,850
early yesterday so IBM literally a

00:41:54,600 --> 00:41:58,740
couple of days ago open source

00:41:56,850 --> 00:42:01,859
contributed a bill pack for their

00:41:58,740 --> 00:42:03,090
WebSphere Liberty runtime so if Webster

00:42:01,859 --> 00:42:09,180
is your poison

00:42:03,090 --> 00:42:10,859
then go good go do all right I just I

00:42:09,180 --> 00:42:14,460
just thought that was a kind of

00:42:10,859 --> 00:42:15,930
Tourette's type thing yeah okay

00:42:14,460 --> 00:42:17,840
anyway that's some let's take another

00:42:15,930 --> 00:42:21,510
look at some doing some stuff right

00:42:17,840 --> 00:42:23,040
because that is what we are here for so

00:42:21,510 --> 00:42:24,859
I've got two apps to show you this

00:42:23,040 --> 00:42:26,820
morning

00:42:24,859 --> 00:42:28,589
come on applause applause yeah it's a

00:42:26,820 --> 00:42:31,659
very good idea let's make this a lot

00:42:28,589 --> 00:42:34,229
how's that doing yeah

00:42:31,659 --> 00:42:36,339
good I'm doing my best with it I think

00:42:34,229 --> 00:42:50,949
just about doing let's see if I can make

00:42:36,339 --> 00:42:52,209
me I think all right so am i looked in

00:42:50,949 --> 00:42:53,259
at first of all I'm gonna do I'm gonna

00:42:52,209 --> 00:42:54,639
do a bunch of stuff with a command line

00:42:53,259 --> 00:42:56,589
and then you're just gonna take a for me

00:42:54,639 --> 00:42:57,849
and che some cool stuff some actual code

00:42:56,589 --> 00:43:01,239
and what you can do this spring and

00:42:57,849 --> 00:43:03,579
semester stuff as well so let me remind

00:43:01,239 --> 00:43:04,899
myself around I'm so first thing to

00:43:03,579 --> 00:43:06,519
mention is we have this tool which is a

00:43:04,899 --> 00:43:08,469
command a command line tool called CA

00:43:06,519 --> 00:43:10,299
and Joshua is absolutely right to point

00:43:08,469 --> 00:43:11,589
out that it's a ruby gem so if you want

00:43:10,299 --> 00:43:13,359
to use this tool first of all you need a

00:43:11,589 --> 00:43:15,189
decent installation of Ruby on your

00:43:13,359 --> 00:43:16,659
machine and then you can simply type gem

00:43:15,189 --> 00:43:17,379
install C app and it will pull down all

00:43:16,659 --> 00:43:19,599
the stuff for you

00:43:17,379 --> 00:43:21,999
we also announced this weekend that we

00:43:19,599 --> 00:43:23,559
are in the process of rewriting this so

00:43:21,999 --> 00:43:25,269
that it'll be a statically linked binary

00:43:23,559 --> 00:43:27,489
written in go so you won't have to

00:43:25,269 --> 00:43:29,319
install the Ruby stuff but right now we

00:43:27,489 --> 00:43:32,529
are running with a ruby version of C R

00:43:29,319 --> 00:43:34,509
so I'm just going to type CF target and

00:43:32,529 --> 00:43:36,639
what CF target will do is go ahead and

00:43:34,509 --> 00:43:39,459
tell me which Cloud Foundry instance I'm

00:43:36,639 --> 00:43:41,229
pointing at and also who I'm logged in

00:43:39,459 --> 00:43:43,539
as and what organization I'm space I'm

00:43:41,229 --> 00:43:46,629
talking to you so here we go I'm logged

00:43:43,539 --> 00:43:48,759
into the pivotal cloud API don't run

00:43:46,629 --> 00:43:50,019
down pivotal to IO mentioning that we're

00:43:48,759 --> 00:43:52,299
using version 2 o clock foundry that's

00:43:50,019 --> 00:43:54,609
good I'm logged in as me that's also

00:43:52,299 --> 00:43:56,589
excellent I'm targeting the staging

00:43:54,609 --> 00:43:58,869
space and I'm working in my bosses

00:43:56,589 --> 00:44:00,399
organization right now if I type CF apps

00:43:58,869 --> 00:44:02,049
it's going to tell me what applications

00:44:00,399 --> 00:44:04,119
are available already running there and

00:44:02,049 --> 00:44:05,109
lots of them so one of the things I'm

00:44:04,119 --> 00:44:06,429
going to do is go ahead and delete them

00:44:05,109 --> 00:44:08,859
because otherwise it's going to look a

00:44:06,429 --> 00:44:11,769
bit like I'm trying to pull the wool

00:44:08,859 --> 00:44:13,149
over your eyes so let's do CF delete the

00:44:11,769 --> 00:44:23,529
ones I want to actually show you today

00:44:13,149 --> 00:44:25,179
spring music time I'm boots web UI you

00:44:23,529 --> 00:44:37,059
want to do any tap-dancing or anything

00:44:25,179 --> 00:44:42,059
one of those all right well it gets rid

00:44:37,059 --> 00:44:42,059
of those yes delete them all please

00:44:44,730 --> 00:44:48,040
so what I'm going to do is I'm going to

00:44:46,420 --> 00:44:49,090
lit I'm going to deploy two applications

00:44:48,040 --> 00:44:50,290
one of them is going to be an

00:44:49,090 --> 00:44:52,060
application that you can find in our

00:44:50,290 --> 00:44:54,280
github repository it's under the

00:44:52,060 --> 00:44:56,140
organization Cloud Foundry - sample so

00:44:54,280 --> 00:44:56,950
if you go to github.com forward slash

00:44:56,140 --> 00:44:59,680
cloud foundry

00:44:56,950 --> 00:45:00,700
- samples we have some some example apps

00:44:59,680 --> 00:45:03,310
in there they're not all spring

00:45:00,700 --> 00:45:06,220
applications but this one is it's called

00:45:03,310 --> 00:45:10,300
spring music I'm not going to delete the

00:45:06,220 --> 00:45:10,660
databases right now written by that man

00:45:10,300 --> 00:45:12,670
over there

00:45:10,660 --> 00:45:14,260
I believe mr. Scott Frederick so if you

00:45:12,670 --> 00:45:15,700
if you see the spring music app and you

00:45:14,260 --> 00:45:18,220
think oh my god I could build a business

00:45:15,700 --> 00:45:19,660
on that I need to talk to that guy go

00:45:18,220 --> 00:45:23,350
talk to Scott he'll be happy to accept

00:45:19,660 --> 00:45:25,090
your stock options and once I've done

00:45:23,350 --> 00:45:26,650
that I'm going to show you the super

00:45:25,090 --> 00:45:29,320
cool stuff we're doing with spring foods

00:45:26,650 --> 00:45:30,610
so I just got rid of those applications

00:45:29,320 --> 00:45:32,110
so I don't have them running on Cloud

00:45:30,610 --> 00:45:34,300
Foundry anymore that's a good good move

00:45:32,110 --> 00:45:36,730
even let's go into spring music so

00:45:34,300 --> 00:45:39,160
spring music is written with different

00:45:36,730 --> 00:45:40,330
profiles in mind so it's gonna it's

00:45:39,160 --> 00:45:41,500
gonna do some stuff with the database

00:45:40,330 --> 00:45:43,450
I've already built it by the way I've

00:45:41,500 --> 00:45:45,130
already done Gradle W assemble so I have

00:45:43,450 --> 00:45:48,850
a jar file like a wolf R that I can

00:45:45,130 --> 00:45:50,350
deploy and also we have something here

00:45:48,850 --> 00:45:52,870
called a manifest file but look at this

00:45:50,350 --> 00:45:55,810
manifest file this is basically a Cloud

00:45:52,870 --> 00:45:57,910
Foundry deployment descriptor it is not

00:45:55,810 --> 00:45:59,020
required that you have one of these when

00:45:57,910 --> 00:46:01,570
you deploy an application the Cloud

00:45:59,020 --> 00:46:03,700
Foundry the first time you type CF push

00:46:01,570 --> 00:46:06,010
it will ask you a bunch of questions

00:46:03,700 --> 00:46:07,240
you respond to those questions it will

00:46:06,010 --> 00:46:08,830
then say do you want to save that and

00:46:07,240 --> 00:46:11,710
you say yes and it will save this little

00:46:08,830 --> 00:46:14,110
file the reason I have this file pre

00:46:11,710 --> 00:46:16,000
saved is not to particularly to save

00:46:14,110 --> 00:46:17,440
myself answering all the questions it

00:46:16,000 --> 00:46:19,240
has it's because we have this kind of

00:46:17,440 --> 00:46:21,490
cool little thing in here so we have

00:46:19,240 --> 00:46:23,230
them on the host line this is the line

00:46:21,490 --> 00:46:25,360
which is going to define what the host

00:46:23,230 --> 00:46:28,020
name of my application will be what we

00:46:25,360 --> 00:46:30,640
have here is this Dollar random word

00:46:28,020 --> 00:46:34,060
decorator and what that's going to do is

00:46:30,640 --> 00:46:35,920
actually generate a small random set of

00:46:34,060 --> 00:46:37,390
characters so that I know that my host

00:46:35,920 --> 00:46:40,540
name is unique when I push the cloud

00:46:37,390 --> 00:46:43,060
boundary if we all push spring - music -

00:46:40,540 --> 00:46:45,220
- CF app to the i/o it's not going to

00:46:43,060 --> 00:46:46,420
work one of one of it will work for one

00:46:45,220 --> 00:46:48,640
person then and everyone else it will

00:46:46,420 --> 00:46:50,290
say hey that routes already defined for

00:46:48,640 --> 00:46:52,090
someone so you've got to choose another

00:46:50,290 --> 00:46:53,500
name so that's just a really nice little

00:46:52,090 --> 00:46:54,880
thing that we you can do with a manifest

00:46:53,500 --> 00:46:56,609
file with

00:46:54,880 --> 00:46:59,589
it's all documented on the Cloud Foundry

00:46:56,609 --> 00:47:01,359
documentation site that's going to allow

00:46:59,589 --> 00:47:05,380
us to push this out so let me go ahead

00:47:01,359 --> 00:47:06,759
and push it and it's saying it's picked

00:47:05,380 --> 00:47:08,289
up that that's that manifest file

00:47:06,759 --> 00:47:11,049
already it's created the application

00:47:08,289 --> 00:47:13,750
spring music that's my name locally for

00:47:11,049 --> 00:47:16,210
it but it's also created this route and

00:47:13,750 --> 00:47:19,869
here we go with the random characters DF

00:47:16,210 --> 00:47:21,759
585 la right so it's is bound that route

00:47:19,869 --> 00:47:24,160
on the router and that's actually

00:47:21,759 --> 00:47:25,299
uploading the application what's going

00:47:24,160 --> 00:47:27,190
to happen here is it's going to take my

00:47:25,299 --> 00:47:29,619
war file it's going to upload it to

00:47:27,190 --> 00:47:31,779
Cloud Foundry find a de aid is is F is

00:47:29,619 --> 00:47:33,190
empty at the moment install all the

00:47:31,779 --> 00:47:34,660
spring pieces it needs to run this

00:47:33,190 --> 00:47:37,180
application you should see that in a

00:47:34,660 --> 00:47:41,529
moment I hope as it prepares to start

00:47:37,180 --> 00:48:00,940
we'll see it download the JDK grab the

00:47:41,529 --> 00:48:02,200
open JDK yeah so what the java bill

00:48:00,940 --> 00:48:03,819
paxton at this point is it saying hey

00:48:02,200 --> 00:48:05,529
kind of what kind of application is this

00:48:03,819 --> 00:48:07,630
because i can package your kinds of java

00:48:05,529 --> 00:48:09,190
wraps spring apps right so what it's

00:48:07,630 --> 00:48:10,480
doing is it's saying okay well I know

00:48:09,190 --> 00:48:13,660
this is a war file so it's going to be a

00:48:10,480 --> 00:48:14,920
web app um if it was a spring boot out

00:48:13,660 --> 00:48:16,450
which I'll show you in a moment it will

00:48:14,920 --> 00:48:20,490
work out that it's a spring boot app and

00:48:16,450 --> 00:48:27,089
it will install the java main runner

00:48:20,490 --> 00:48:27,089
yeah the da

00:48:30,240 --> 00:48:34,690
yeah so actually thank you that's a

00:48:32,769 --> 00:48:37,599
great question so what granularity can

00:48:34,690 --> 00:48:38,470
the DA go to when it discovers works out

00:48:37,599 --> 00:48:41,650
what kind of app but we're deploying

00:48:38,470 --> 00:48:43,990
right okay so um this is all documented

00:48:41,650 --> 00:48:45,220
in the Java build pack documentation but

00:48:43,990 --> 00:48:46,420
essentially what it's doing is it's

00:48:45,220 --> 00:48:48,069
going through a series of steps to

00:48:46,420 --> 00:48:51,900
determine whether you have for example a

00:48:48,069 --> 00:48:55,029
manifest ml file or a web directory or

00:48:51,900 --> 00:48:57,309
class files or you know it will do some

00:48:55,029 --> 00:48:58,630
discovery so the the the spring team

00:48:57,309 --> 00:49:01,299
have done quite a bit of work on

00:48:58,630 --> 00:49:04,839
actually trying to help the the build

00:49:01,299 --> 00:49:07,869
pack have some intelligence there there

00:49:04,839 --> 00:49:08,170
we go has started good it's actually

00:49:07,869 --> 00:49:10,780
listed

00:49:08,170 --> 00:49:12,579
in the documentation the kind of series

00:49:10,780 --> 00:49:13,720
of think checks it will do to work out

00:49:12,579 --> 00:49:15,940
what kind of framework you're running

00:49:13,720 --> 00:49:17,770
you can override it so you can actually

00:49:15,940 --> 00:49:20,260
say you know what although I've got a

00:49:17,770 --> 00:49:22,809
web in directory don't don't assume that

00:49:20,260 --> 00:49:25,000
this is a web app actually it's a boot

00:49:22,809 --> 00:49:26,559
app or whatever you can actually

00:49:25,000 --> 00:49:28,140
configure it visit again it's documented

00:49:26,559 --> 00:49:38,170
in there how that's done

00:49:28,140 --> 00:49:40,359
so yeah hi yes are we uploading the

00:49:38,170 --> 00:49:41,710
dependencies right so we're getting

00:49:40,359 --> 00:49:43,089
stuffing you should actually see that

00:49:41,710 --> 00:49:45,280
it's I'm getting stuff from an s3 bucket

00:49:43,089 --> 00:49:47,440
here so getting stuff from a local cache

00:49:45,280 --> 00:49:49,000
it's also installed just just a quickly

00:49:47,440 --> 00:49:51,430
step through this it's installed a

00:49:49,000 --> 00:49:52,630
something called Auto reconfiguration

00:49:51,430 --> 00:49:54,430
and which Josh will talk about in a

00:49:52,630 --> 00:49:55,750
little bit it's also installed Tomcats

00:49:54,430 --> 00:49:58,630
it note at least Tom kept to run a war

00:49:55,750 --> 00:50:00,790
file and and some additional build pack

00:49:58,630 --> 00:50:07,770
Tomcat support there so we do that the

00:50:00,790 --> 00:50:10,420
first time so we've uploaded when we did

00:50:07,770 --> 00:50:12,190
when we uploaded the pack that package

00:50:10,420 --> 00:50:13,270
no we're not now that's that's okay so

00:50:12,190 --> 00:50:15,040
we're not uploading some source code

00:50:13,270 --> 00:50:17,170
this is this is something that confused

00:50:15,040 --> 00:50:19,450
somebody on Twitter recently although

00:50:17,170 --> 00:50:21,130
it's called a build pack we're not doing

00:50:19,450 --> 00:50:22,750
the build on the server side so I said

00:50:21,130 --> 00:50:28,079
I'd already done the Gradle W assemble

00:50:22,750 --> 00:50:28,079
on my laptop before I push the wall farm

00:50:28,500 --> 00:50:32,740
it's something it's because the Bill

00:50:30,790 --> 00:50:53,500
pack terminology came from Heroku in

00:50:32,740 --> 00:50:54,940
some ways right so let's just let's just

00:50:53,500 --> 00:50:56,170
prove this is available now I mentioned

00:50:54,940 --> 00:51:09,190
this this app has a load of different

00:50:56,170 --> 00:51:10,299
profiles spring music the beauty that is

00:51:09,190 --> 00:51:12,670
spring the spring means ago

00:51:10,299 --> 00:51:15,160
it's it's a set of albums now this is

00:51:12,670 --> 00:51:17,619
because I didn't give it a database when

00:51:15,160 --> 00:51:19,780
I uploaded it I didn't say by the way

00:51:17,619 --> 00:51:21,940
you should bind to a database it's

00:51:19,780 --> 00:51:23,589
already installed itself with the

00:51:21,940 --> 00:51:24,819
right profile so you'll see that at the

00:51:23,589 --> 00:51:26,770
top here it's saying I'm using the cloud

00:51:24,819 --> 00:51:27,940
profile which enables me to run Cloud

00:51:26,770 --> 00:51:29,710
Foundry and I'm using the 'memory

00:51:27,940 --> 00:51:32,020
profile so all of this stuff is just

00:51:29,710 --> 00:51:33,460
coming from an in-memory cache so if I

00:51:32,020 --> 00:51:35,770
delete stuff and then I restart the

00:51:33,460 --> 00:51:37,240
application it's going to come back it's

00:51:35,770 --> 00:51:38,560
going to be repopulated from the memory

00:51:37,240 --> 00:51:40,420
cache you see that where it says

00:51:38,560 --> 00:51:42,130
services here it's not listing any

00:51:40,420 --> 00:51:44,500
services I'm not bound to any databases

00:51:42,130 --> 00:51:48,099
at all ok but I can do some nice things

00:51:44,500 --> 00:51:51,550
like kind of sorting my record

00:51:48,099 --> 00:51:53,710
collection differently and so on so

00:51:51,550 --> 00:51:55,329
simpler source code is available in the

00:51:53,710 --> 00:52:00,910
cloud foundry samples repo so you can go

00:51:55,329 --> 00:52:02,890
take a look at it what Scott what is

00:52:00,910 --> 00:52:03,670
this look at this formatting come on

00:52:02,890 --> 00:52:07,319
come on

00:52:03,670 --> 00:52:09,609
responsive responsive design D okay um

00:52:07,319 --> 00:52:11,230
alright so if anybody wants to help

00:52:09,609 --> 00:52:12,250
Scott with this is design then go fork

00:52:11,230 --> 00:52:13,750
the repo and send us a pull request

00:52:12,250 --> 00:52:16,540
that'll be great

00:52:13,750 --> 00:52:18,040
right so I've deployed spring music and

00:52:16,540 --> 00:52:22,690
I deployed it let's remind myself into

00:52:18,040 --> 00:52:30,579
the J waters org and it's the staging

00:52:22,690 --> 00:52:32,829
space and I can find spring music okay

00:52:30,579 --> 00:52:34,869
so I got one instance running but no

00:52:32,829 --> 00:52:37,119
services so you know what I'm gonna like

00:52:34,869 --> 00:52:38,790
some services I look at database and I

00:52:37,119 --> 00:52:41,470
would like to monitor it using New Relic

00:52:38,790 --> 00:52:45,099
so let's go I've got a new relic service

00:52:41,470 --> 00:52:46,750
already created so let's bind that and

00:52:45,099 --> 00:52:47,980
the service is successfully bound I can

00:52:46,750 --> 00:52:51,089
see that that's there and I'm going to

00:52:47,980 --> 00:52:53,650
also find an elephant sequel database I

00:52:51,089 --> 00:52:55,329
wish I'd named these more sensibly so I

00:52:53,650 --> 00:52:59,829
could remember whether I was using them

00:52:55,329 --> 00:53:03,970
already actually I can't be using them

00:52:59,829 --> 00:53:07,180
already so let's do that now when I

00:53:03,970 --> 00:53:08,980
restart this I have to restart it for

00:53:07,180 --> 00:53:11,410
those changes to be picked up it's going

00:53:08,980 --> 00:53:13,390
to take longer to start so if you sat

00:53:11,410 --> 00:53:14,680
there going oh gosh what's gone wrong it

00:53:13,390 --> 00:53:16,000
will take longer to start in two reasons

00:53:14,680 --> 00:53:17,770
for that one of them is it needs to

00:53:16,000 --> 00:53:19,270
install the new relic agent and you'll

00:53:17,770 --> 00:53:21,490
see that happen the other thing is that

00:53:19,270 --> 00:53:23,109
it's now going to connect to an elephant

00:53:21,490 --> 00:53:25,089
sequel database which is some in another

00:53:23,109 --> 00:53:28,869
cloud somewhere all right so let's go

00:53:25,089 --> 00:53:31,319
off and just quickly restart my spring

00:53:28,869 --> 00:53:31,319
music app

00:53:33,610 --> 00:53:37,490
looking at the same manifest file we

00:53:36,230 --> 00:53:39,110
haven't made any changes the manifest

00:53:37,490 --> 00:53:41,510
file but on the server side we have

00:53:39,110 --> 00:53:43,070
added some services but it is going to

00:53:41,510 --> 00:53:45,140
have to restage it Miskin specs of this

00:53:43,070 --> 00:53:46,280
gentleman's point so it's going to have

00:53:45,140 --> 00:53:47,630
to is although it's got the build pack

00:53:46,280 --> 00:53:49,340
cache which is where the application is

00:53:47,630 --> 00:53:52,160
already downloaded it is now having to

00:53:49,340 --> 00:53:53,720
install fresh the new relic agent

00:53:52,160 --> 00:53:54,800
because it's detected that we're using a

00:53:53,720 --> 00:53:58,790
new relic hi

00:53:54,800 --> 00:54:00,950
I could have restart for the web

00:53:58,790 --> 00:54:02,300
absolutely I'm sorry I I'm aiming in my

00:54:00,950 --> 00:54:03,980
bit of a demo to do stuff on the command

00:54:02,300 --> 00:54:04,940
line and Josh with new stuff in SES but

00:54:03,980 --> 00:54:07,480
I could have done that on the web you're

00:54:04,940 --> 00:54:07,480
right absolutely

00:54:08,170 --> 00:54:11,390
the other thing is by doing at the

00:54:10,100 --> 00:54:13,220
command line I get to show you the fact

00:54:11,390 --> 00:54:14,960
that hey look this is cool it knows it's

00:54:13,220 --> 00:54:23,330
got a new relic service bound it's

00:54:14,960 --> 00:54:24,260
installing the agent for us yep so we're

00:54:23,330 --> 00:54:27,140
running hurrah

00:54:24,260 --> 00:54:31,310
let's go over and refresh our spring

00:54:27,140 --> 00:54:33,050
music app and up here if I click on this

00:54:31,310 --> 00:54:34,670
again we now we're using an our DBMS

00:54:33,050 --> 00:54:39,230
profile so we know that we've found to

00:54:34,670 --> 00:54:42,020
an our DBMS we know that the this guy's

00:54:39,230 --> 00:54:44,590
a professional what can I say always

00:54:42,020 --> 00:54:46,910
work with Joshua long is Gigi's genius

00:54:44,590 --> 00:54:48,140
so we've got a new relic service and a

00:54:46,910 --> 00:54:50,180
lot of sequence that secret service

00:54:48,140 --> 00:54:51,170
there so in fact now if I did change

00:54:50,180 --> 00:54:52,940
things and I didn't show you this before

00:54:51,170 --> 00:55:02,360
if I did decide that I wanted to delete

00:54:52,940 --> 00:55:04,610
the nirvana from my collection okay well

00:55:02,360 --> 00:55:07,100
okay maybe maybe the e-team wasn't such

00:55:04,610 --> 00:55:08,480
a great idea but i did that so what was

00:55:07,100 --> 00:55:09,500
it going to show you I was going to show

00:55:08,480 --> 00:55:19,660
you the fact this is now bouncing you

00:55:09,500 --> 00:55:21,970
relic yeah silly that's one as well

00:55:19,660 --> 00:55:24,020
let's get back to my stage in space

00:55:21,970 --> 00:55:26,890
something went wrong I'm guessing

00:55:24,020 --> 00:55:26,890
there's Network issues

00:55:27,710 --> 00:55:37,310
shocking huh never happens mr. previous

00:55:35,540 --> 00:55:44,320
produced alone it's not running a

00:55:37,310 --> 00:55:44,320
network issues huh I didn't huh

00:55:45,369 --> 00:55:58,989
potentially I see I can't

00:55:53,279 --> 00:56:00,670
but that's relatively conclusive and

00:55:58,989 --> 00:56:12,479
switch to spring one TGX instead and see

00:56:00,670 --> 00:56:12,479
if that's any minute okay

00:56:12,660 --> 00:56:20,410
Joshua's iPhone look at that poor I'll

00:56:15,160 --> 00:56:22,479
still picked a little thing like demos

00:56:20,410 --> 00:56:23,890
why do we do like damaged spring one

00:56:22,479 --> 00:56:25,630
that's really silly why can't we record

00:56:23,890 --> 00:56:50,920
things it's because Adrian says we

00:56:25,630 --> 00:56:53,410
always have to do live demos it's an

00:56:50,920 --> 00:56:56,950
excellent question I'm gonna blame him

00:56:53,410 --> 00:57:26,670
anyway um I'm gonna stop and restart I'm

00:56:56,950 --> 00:57:26,670
not sure yes yeah yes

00:57:36,500 --> 00:57:39,380
oh right so in the manner when that

00:57:37,940 --> 00:57:41,630
manifest file if I wanted to deploy it

00:57:39,380 --> 00:57:43,369
directly and and bind it to a service

00:57:41,630 --> 00:57:45,740
then in the manifest file I could have

00:57:43,369 --> 00:57:46,700
included those settings or if I'd not

00:57:45,740 --> 00:57:48,050
had a manifest file I could have

00:57:46,700 --> 00:57:49,400
deployed it can answer all the questions

00:57:48,050 --> 00:57:50,900
and it would ask me do you want a

00:57:49,400 --> 00:57:52,580
service and I could say yes please

00:57:50,900 --> 00:57:54,320
and it would say what services will give

00:57:52,580 --> 00:57:55,430
me a list of all the ones available and

00:57:54,320 --> 00:57:56,630
I would say I'd like elephants equal

00:57:55,430 --> 00:57:58,970
please and it will bind it for me so I

00:57:56,630 --> 00:58:00,560
absolutely I'm just doing this to show

00:57:58,970 --> 00:58:03,140
you that this is a spring app that with

00:58:00,560 --> 00:58:04,400
zero convicts erode changes has picked

00:58:03,140 --> 00:58:06,590
up that there are now services available

00:58:04,400 --> 00:58:07,960
I may not be able to finish this

00:58:06,590 --> 00:58:11,150
particular part of the demo right now

00:58:07,960 --> 00:58:14,800
I'm guessing and I may be about to go

00:58:11,150 --> 00:58:14,800
move onto the spring boot up instead

00:58:20,980 --> 00:58:31,070
right it's my alternative runtimes if

00:58:29,480 --> 00:58:32,720
you if you want it for example use a

00:58:31,070 --> 00:58:33,650
different revision of the Tomcat if you

00:58:32,720 --> 00:58:35,270
want use a different container all

00:58:33,650 --> 00:58:37,040
together you can fork the built back and

00:58:35,270 --> 00:58:39,470
then plug that in yourself you don't

00:58:37,040 --> 00:58:41,390
have to get it accepted by us or

00:58:39,470 --> 00:58:42,380
anything that you just you can actually

00:58:41,390 --> 00:58:44,839
specify it when you're uploading an

00:58:42,380 --> 00:58:47,210
application and so you get the ability

00:58:44,839 --> 00:58:49,820
to for example when Tomcat 8 the

00:58:47,210 --> 00:58:51,680
gloriously awesome hero the revolution

00:58:49,820 --> 00:58:53,060
that is Tomica date when that debuts you

00:58:51,680 --> 00:58:55,220
can just move to that if you like

00:58:53,060 --> 00:59:03,940
without waiting for us to update our

00:58:55,220 --> 00:59:06,940
stuff on the side come on target just 10

00:59:03,940 --> 00:59:06,940
awkward

00:59:12,890 --> 00:59:22,400
yeah okay so the gentleman in the front

00:59:20,509 --> 00:59:28,630
reminds us that the spring one code does

00:59:22,400 --> 00:59:31,999
doesn't need work if you wait thank you

00:59:28,630 --> 00:59:33,680
right so yeah so so if you want to get a

00:59:31,999 --> 00:59:36,140
free account now then if you go to the

00:59:33,680 --> 00:59:37,160
web page use the invitation code spring

00:59:36,140 --> 00:59:39,410
1 all in lowercase

00:59:37,160 --> 00:59:40,549
then you'll automatically be approved so

00:59:39,410 --> 00:59:43,460
what I'm going to do I'm sorry about the

00:59:40,549 --> 00:59:44,900
previous one I was going to show you the

00:59:43,460 --> 00:59:46,489
New Relic stuff working and it does work

00:59:44,900 --> 00:59:49,640
I promise I had it working last last

00:59:46,489 --> 00:59:51,529
week I'm hoping that the network is

00:59:49,640 --> 00:59:53,509
sufficiently recovered I'm gonna push a

00:59:51,529 --> 00:59:55,309
spring beat app instead so what did you

00:59:53,509 --> 00:59:57,589
pin spring boot out I'd never use spring

00:59:55,309 --> 00:59:59,059
but I've I know Dave sire very well I've

00:59:57,589 --> 01:00:00,650
been looking it's following spring boot

00:59:59,059 --> 01:00:03,170
as I mentioned at the beginning I'm a

01:00:00,650 --> 01:00:05,749
I'm a relatively spring newbie right I

01:00:03,170 --> 01:00:08,180
work for IB IBM for 10 years and I I

01:00:05,749 --> 01:00:11,180
know that other stuff but I'm not quite

01:00:08,180 --> 01:00:12,890
so springy as you guys so I was really

01:00:11,180 --> 01:00:14,299
excited by spring boot and the concept

01:00:12,890 --> 01:00:16,730
of spring group the ability to really

01:00:14,299 --> 01:00:19,309
quickly get started within you know as

01:00:16,730 --> 01:00:20,420
they said last night an opinion and then

01:00:19,309 --> 01:00:21,769
have that get out of the way and just

01:00:20,420 --> 01:00:25,640
get you help you to get started and

01:00:21,769 --> 01:00:27,859
build out so I thought the I cloned I

01:00:25,640 --> 01:00:31,460
should say the spring boot repository on

01:00:27,859 --> 01:00:33,140
github downloaded it there's inside

01:00:31,460 --> 01:00:34,849
there's a directory called spring boot

01:00:33,140 --> 01:00:36,499
sample so I went in there there's a load

01:00:34,849 --> 01:00:38,089
of different samples and what I've got

01:00:36,499 --> 01:00:41,119
here is a simple one which is going to

01:00:38,089 --> 01:00:43,489
use the time leaf UI framework so it's

01:00:41,119 --> 01:00:44,900
going to put up a nice web interface for

01:00:43,489 --> 01:00:48,039
me and you'll see that it's actually

01:00:44,900 --> 01:00:50,960
built a when I when I did am a maven

01:00:48,039 --> 01:01:05,630
package on it installed on it it created

01:00:50,960 --> 01:01:08,180
a jar file for me it's a big fat jar

01:01:05,630 --> 01:01:09,890
check that out that's a big job yeah so

01:01:08,180 --> 01:01:11,660
spring boot again because we're using

01:01:09,890 --> 01:01:13,339
the Java main runner up now it's putting

01:01:11,660 --> 01:01:14,749
all the dependencies in the jar so that

01:01:13,339 --> 01:01:16,489
it's going to be a standalone a bit of a

01:01:14,749 --> 01:01:18,079
thing that can run start up its own

01:01:16,489 --> 01:01:18,739
embedded web server and run on the

01:01:18,079 --> 01:01:21,550
server side

01:01:18,739 --> 01:01:25,520
so now of cause I did confirm

01:01:21,550 --> 01:01:27,650
right right so I'm going to I'm going to

01:01:25,520 --> 01:01:29,330
say if push this one instead and this

01:01:27,650 --> 01:01:30,140
time I haven't got a manifest file here

01:01:29,330 --> 01:01:31,609
so it's going to ask me some questions

01:01:30,140 --> 01:01:36,050
so what I want to call this let's call

01:01:31,609 --> 01:02:23,599
it time demo but I have pointed it at

01:01:36,050 --> 01:02:25,070
the the jar file itself by the way if

01:02:23,599 --> 01:02:25,880
you want me to show you that the stuff I

01:02:25,070 --> 01:02:27,440
was going to show you in the spring

01:02:25,880 --> 01:02:29,270
music I've just stopped because I want

01:02:27,440 --> 01:02:31,550
to move on and get Josh to his thing

01:02:29,270 --> 01:02:32,450
come see me tomorrow almost all tomorrow

01:02:31,550 --> 01:02:34,670
morning I'm going to be in the demo

01:02:32,450 --> 01:02:35,900
lounge at the end of the hallway so I'm

01:02:34,670 --> 01:02:37,099
happy to go through that with you and

01:02:35,900 --> 01:02:39,290
show you that it really does work and

01:02:37,099 --> 01:02:42,109
I'm not just a big fat liar on stage

01:02:39,290 --> 01:02:43,609
waving my hands around so um okay I'm

01:02:42,109 --> 01:02:45,650
just deployed this this one doesn't need

01:02:43,609 --> 01:02:47,450
any service is it again if you can if

01:02:45,650 --> 01:02:49,760
you can see the text I answered a couple

01:02:47,450 --> 01:02:51,800
of questions and it's created a rout of

01:02:49,760 --> 01:02:53,990
the actual you know DNS root for me it's

01:02:51,800 --> 01:02:56,359
bound it to mine to the board ready to

01:02:53,990 --> 01:02:57,890
bind that to the app and it's now asking

01:02:56,359 --> 01:02:59,330
me do I want any services I don't have

01:02:57,890 --> 01:03:01,010
any database service required for this

01:02:59,330 --> 01:03:04,609
one it's a standalone web app with no

01:03:01,010 --> 01:03:06,050
data so I just say no it's then going to

01:03:04,609 --> 01:03:07,550
say do you want to take any of your

01:03:06,050 --> 01:03:09,859
existing services and bind them to the

01:03:07,550 --> 01:03:11,420
application this is or each time it's

01:03:09,859 --> 01:03:14,020
doing this it's doing rest calls to the

01:03:11,420 --> 01:03:17,119
cloud controller and again we're kind of

01:03:14,020 --> 01:03:19,580
kind of subject to Josh's 3G connection

01:03:17,119 --> 01:03:19,930
right now LTE connection wow wow look at

01:03:19,580 --> 01:03:23,180
you

01:03:19,930 --> 01:03:24,290
gosh right I'm gonna save that anyway

01:03:23,180 --> 01:03:25,700
and that's gonna create that manifest

01:03:24,290 --> 01:03:29,119
file just in case I wanted to look at it

01:03:25,700 --> 01:03:31,160
later and it's gonna go ahead and do

01:03:29,119 --> 01:03:33,589
that push again during which I'm going

01:03:31,160 --> 01:03:35,830
to do jazz hands I should have all my

01:03:33,589 --> 01:03:41,980
tap dancing shoes

01:03:35,830 --> 01:03:41,980
question over here hi yes

01:03:43,750 --> 01:03:48,830
so right great question do I see that

01:03:47,090 --> 01:03:50,600
manifest being a template in large

01:03:48,830 --> 01:03:52,670
organizations the manifests are actually

01:03:50,600 --> 01:03:54,770
very sophisticated you can do several

01:03:52,670 --> 01:03:57,590
things of manifest I'm sure I've showed

01:03:54,770 --> 01:04:00,110
you a really simple one but manifest can

01:03:57,590 --> 01:04:01,970
also contain service information they

01:04:00,110 --> 01:04:04,430
can also do those randomization type

01:04:01,970 --> 01:04:05,990
things with placeholders they can also

01:04:04,430 --> 01:04:07,190
contain environment variables if you

01:04:05,990 --> 01:04:10,160
need environment variables for your app

01:04:07,190 --> 01:04:13,070
to be defined on the cloud side you can

01:04:10,160 --> 01:04:15,710
have multi-part manifest so I can say

01:04:13,070 --> 01:04:18,140
you know what I've got three

01:04:15,710 --> 01:04:19,460
applications that for my applicable

01:04:18,140 --> 01:04:21,560
three components it for my application

01:04:19,460 --> 01:04:22,880
and I used that example earlier where I

01:04:21,560 --> 01:04:23,990
said one might be reading groovy and one

01:04:22,880 --> 01:04:26,060
might be written in Java and one have

01:04:23,990 --> 01:04:27,380
you written node or something so I can

01:04:26,060 --> 01:04:29,480
actually have a manifest file that

01:04:27,380 --> 01:04:31,670
defines how to deploy that entire set of

01:04:29,480 --> 01:04:34,010
components that need to talk to one

01:04:31,670 --> 01:04:36,530
another so there's documentation about

01:04:34,010 --> 01:04:40,370
this on the Cloud Foundry website Cloud

01:04:36,530 --> 01:04:42,410
Foundry calm and absolutely I mean I see

01:04:40,370 --> 01:04:44,120
this is something that teams would share

01:04:42,410 --> 01:04:46,970
between environments you obviously make

01:04:44,120 --> 01:04:48,020
some edits but it's our way of enabling

01:04:46,970 --> 01:04:49,820
that I mean you don't want to be going

01:04:48,020 --> 01:04:51,470
through all of those questions every

01:04:49,820 --> 01:04:53,570
time right and again I mean you saw a

01:04:51,470 --> 01:04:55,490
question up there about memory sizes you

01:04:53,570 --> 01:04:58,870
know maybe in my test environment I

01:04:55,490 --> 01:05:09,920
might have a smaller memory capacity

01:04:58,870 --> 01:05:11,810
there was available to me yeah what was

01:05:09,920 --> 01:05:13,580
it a hundred and sixteen mega think well

01:05:11,810 --> 01:05:17,240
I just I did it I did an ad I sell old

01:05:13,580 --> 01:05:18,770
on it didn't I the jar here was what is

01:05:17,240 --> 01:05:20,440
the eleven or hundred sixteen I know but

01:05:18,770 --> 01:05:28,490
my math is terrible

01:05:20,440 --> 01:05:31,190
well okay sorry yeah time leaf tea hym e

01:05:28,490 --> 01:05:35,330
leaf that's what this app is using if it

01:05:31,190 --> 01:05:36,530
ever uploads they may not do you want to

01:05:35,330 --> 01:05:40,520
do you want to do some other slides and

01:05:36,530 --> 01:05:43,040
meantime I'm gonna I'm gonna at this

01:05:40,520 --> 01:05:48,220
point hand you over to my very

01:05:43,040 --> 01:05:48,220
attractive very intelligent colleague

01:05:48,650 --> 01:05:54,290
Yeah right I should give you this ring

01:05:50,720 --> 01:05:56,570
any wise people want to hear you oh I'll

01:05:54,290 --> 01:05:58,790
take us home we've got 15 minutes in

01:05:56,570 --> 01:06:11,690
which to cover 50 slides hold on to your

01:05:58,790 --> 01:06:14,450
seats right then thank you um so he Andy

01:06:11,690 --> 01:06:18,140
was absolutely correct in saying that

01:06:14,450 --> 01:06:19,370
andrea has changed a lot since the last

01:06:18,140 --> 01:06:22,820
revision

01:06:19,370 --> 01:06:25,490
I think the ng appellation is very very

01:06:22,820 --> 01:06:27,050
apt it's a definitely epic it's

01:06:25,490 --> 01:06:30,380
definitely bigger better badder faster

01:06:27,050 --> 01:06:32,690
you know do you guys remember the first

01:06:30,380 --> 01:06:34,880
Star Trek and then they could the new

01:06:32,690 --> 01:06:36,680
one and they added ng to it and you

01:06:34,880 --> 01:06:38,510
thought well that's a bit you know

01:06:36,680 --> 01:06:39,920
that's a bit of days just I mean it

01:06:38,510 --> 01:06:41,270
can't be that good they have a great

01:06:39,920 --> 01:06:43,280
theme song but it can't be that good and

01:06:41,270 --> 01:06:45,290
then it was actually that good is better

01:06:43,280 --> 01:06:47,000
even it was next generation good that's

01:06:45,290 --> 01:06:49,460
why this is an epic name change it

01:06:47,000 --> 01:06:51,710
really is a whole world of better but

01:06:49,460 --> 01:06:53,150
from their spring perspective you guys

01:06:51,710 --> 01:06:55,970
don't have to change too much when you

01:06:53,150 --> 01:06:57,740
build applications for it we've done a

01:06:55,970 --> 01:06:58,970
lot to make sure that's fairly simple

01:06:57,740 --> 01:07:00,740
for you guys to move move your

01:06:58,970 --> 01:07:02,480
applications to Condry if you've done it

01:07:00,740 --> 01:07:05,090
before then this will feel if you've

01:07:02,480 --> 01:07:07,820
programmed it before using the content

01:07:05,090 --> 01:07:11,480
API this will feel very familiar let's

01:07:07,820 --> 01:07:12,710
go ahead and revisit deployment how many

01:07:11,480 --> 01:07:17,090
of you by a show of hands

01:07:12,710 --> 01:07:19,340
use Eclipse me too by the way Bob I just

01:07:17,090 --> 01:07:20,600
want to make sure so while I love the

01:07:19,340 --> 01:07:21,980
command line and the command lines a

01:07:20,600 --> 01:07:25,700
great place to be if you like that kind

01:07:21,980 --> 01:07:27,200
of thing I'm a you know I find myself I

01:07:25,700 --> 01:07:29,030
can't see myself more civilized I like

01:07:27,200 --> 01:07:31,070
to remain inside my IDE and get things

01:07:29,030 --> 01:07:33,740
done as opposed to just going around

01:07:31,070 --> 01:07:35,330
with command commands on the command

01:07:33,740 --> 01:07:37,810
line so I'm gonna go ahead and use the

01:07:35,330 --> 01:07:40,550
recently very very recently updated

01:07:37,810 --> 01:07:43,880
Eclipse integration for high foundry

01:07:40,550 --> 01:07:45,740
I've got it loaded here so um let's see

01:07:43,880 --> 01:07:47,900
what we can do I need an application

01:07:45,740 --> 01:07:49,160
what do you recommend let me try to

01:07:47,900 --> 01:07:57,950
bring music to that and it works a

01:07:49,160 --> 01:08:00,950
little Scott okay okay he's convinced me

01:07:57,950 --> 01:08:03,300
he twisted my arm

01:08:00,950 --> 01:08:11,450
let's try the network it's exact I'm

01:08:03,300 --> 01:08:11,450
gonna go back to sorry anyway

01:08:17,839 --> 01:08:21,639
that's not that one over that section

01:08:28,779 --> 01:08:44,509
what demos in here right so we should

01:08:39,460 --> 01:08:47,960
kill this guy like Oh tortures me to do

01:08:44,509 --> 01:08:55,609
so okay so here we are we have the

01:08:47,960 --> 01:09:01,159
freshly built spring music example we'll

01:08:55,609 --> 01:09:02,929
go ahead and do that now okay it's good

01:09:01,159 --> 01:09:15,139
so okay well go ahead and import this

01:09:02,929 --> 01:09:20,230
inside of STS important I think what

01:09:15,139 --> 01:09:20,230
they move the Gradle support - thank you

01:09:20,349 --> 01:09:27,759
- are you guys - Annie no Gradle so

01:09:26,089 --> 01:09:38,210
let's try something else

01:09:27,759 --> 01:09:41,539
yeah all that deploy hey system projects

01:09:38,210 --> 01:09:57,710
you know what's going yeah no I'm gonna

01:09:41,539 --> 01:10:01,309
go ahead like so I would love to it sure

01:09:57,710 --> 01:10:05,030
where's the existing project want to try

01:10:01,309 --> 01:10:05,599
that one could be fun and note that you

01:10:05,030 --> 01:10:07,820
don't think so

01:10:05,599 --> 01:10:15,889
is there an easy way to get this in

01:10:07,820 --> 01:10:18,820
there thank you this worked yesterday

01:10:15,889 --> 01:10:24,650
then we updated I changed my STS and

01:10:18,820 --> 01:10:25,449
yeah we are okay so Gradle there it is

01:10:24,650 --> 01:10:28,750
yes

01:10:25,449 --> 01:10:28,750
wait for it

01:10:36,469 --> 01:10:46,620
clearly not enough coffee damn I so

01:10:45,270 --> 01:10:48,150
let's take a look at the code in the

01:10:46,620 --> 01:10:51,480
interim because that's sort of what I

01:10:48,150 --> 01:10:53,820
want to show you anyway we're going to

01:10:51,480 --> 01:10:57,090
use this because we can the code itself

01:10:53,820 --> 01:10:59,400
is fairly typical spring MVC you know

01:10:57,090 --> 01:11:00,780
nothing particularly fancy about it it

01:10:59,400 --> 01:11:03,360
happened to use profiles how many of

01:11:00,780 --> 01:11:05,340
you've used springs profiles feature

01:11:03,360 --> 01:11:07,110
introduced in spring three one some two

01:11:05,340 --> 01:11:09,360
years ago the idea here is you have the

01:11:07,110 --> 01:11:12,000
ability to tag groups of different beans

01:11:09,360 --> 01:11:14,190
and I'd nm say okay this set of beans

01:11:12,000 --> 01:11:15,929
should be activated and run in this

01:11:14,190 --> 01:11:18,030
environment and you can specify that

01:11:15,929 --> 01:11:19,410
environment that profile through a

01:11:18,030 --> 01:11:20,790
myriad of ways you can specify it as a

01:11:19,410 --> 01:11:23,160
command line attribute you can specify

01:11:20,790 --> 01:11:27,360
it programmatically on the application

01:11:23,160 --> 01:11:29,790
context environment objects or you know

01:11:27,360 --> 01:11:32,370
you can just let the default one kick in

01:11:29,790 --> 01:11:34,110
confound rate will support the cloud

01:11:32,370 --> 01:11:36,600
environment so if you have a if you have

01:11:34,110 --> 01:11:38,670
a profile set tagged cloud just two

01:11:36,600 --> 01:11:42,179
quotes you know quote cloud that will

01:11:38,670 --> 01:11:44,370
get run as well for you so we have here

01:11:42,179 --> 01:11:46,679
a lot of different profiles okay so this

01:11:44,370 --> 01:11:49,770
is otherwise it's just a regular spring

01:11:46,679 --> 01:11:52,280
application here's our this is the

01:11:49,770 --> 01:11:54,270
programmatic equipment of web that XML

01:11:52,280 --> 01:11:56,969
you know I don't know if you've seen

01:11:54,270 --> 01:11:58,440
that before and we need our services the

01:11:56,969 --> 01:11:59,969
services are whether the the rubber

01:11:58,440 --> 01:12:02,040
meets the road right this is otherwise

01:11:59,969 --> 01:12:03,330
an unchanged spring application all we

01:12:02,040 --> 01:12:04,500
want to do is take advantage of the fact

01:12:03,330 --> 01:12:05,940
that we're running in compounding

01:12:04,500 --> 01:12:09,410
leverage those services if they're

01:12:05,940 --> 01:12:17,730
available so for example it you'll see

01:12:09,410 --> 01:12:19,920
we have lots of different profiles here

01:12:17,730 --> 01:12:22,020
and then the example that we saw earlier

01:12:19,920 --> 01:12:23,910
as Andy deployed it we switched the

01:12:22,020 --> 01:12:27,390
profile live isn't that drop-down and

01:12:23,910 --> 01:12:28,890
that triggered the you know using of

01:12:27,390 --> 01:12:30,719
difference when we redeployed it it

01:12:28,890 --> 01:12:33,860
showed the profile it was active and we

01:12:30,719 --> 01:12:36,270
can see which services were being bound

01:12:33,860 --> 01:12:41,390
there's an autocomplete configuration

01:12:36,270 --> 01:12:41,390
the easiest way yes

01:12:43,100 --> 01:12:51,900
so okay the easiest way to get an

01:12:49,980 --> 01:12:52,920
application up and running on a cloud

01:12:51,900 --> 01:12:54,450
foundry that's based on spring is just

01:12:52,920 --> 01:12:56,040
to let Auto reconfiguration do its magic

01:12:54,450 --> 01:12:58,610
it'll detect that you have a data source

01:12:56,040 --> 01:13:02,250
or some sort of service type that is a

01:12:58,610 --> 01:13:03,930
the client interface for a service that

01:13:02,250 --> 01:13:06,210
you have bound your application on the

01:13:03,930 --> 01:13:07,950
server side on the cloud and if we have

01:13:06,210 --> 01:13:09,630
support for the specific specific type

01:13:07,950 --> 01:13:11,610
of service which at this point consists

01:13:09,630 --> 01:13:15,060
of things like my sequel post quiz

01:13:11,610 --> 01:13:16,890
ratamacue Redis etc at MongoDB we will

01:13:15,060 --> 01:13:18,900
provide that our echo will replace

01:13:16,890 --> 01:13:20,700
dynamically the reference that you have

01:13:18,900 --> 01:13:22,260
configured in your bean context with the

01:13:20,700 --> 01:13:26,070
reference that points to the services as

01:13:22,260 --> 01:13:29,280
deployed on Cloud Foundry if however you

01:13:26,070 --> 01:13:31,320
want to exercise more control on how

01:13:29,280 --> 01:13:34,440
these services are configured you could

01:13:31,320 --> 01:13:35,700
of course of course just parts this

01:13:34,440 --> 01:13:39,660
environment variable this is easy right

01:13:35,700 --> 01:13:41,970
we all parts and when json api is in our

01:13:39,660 --> 01:13:44,580
sleep right i I just this morning I did

01:13:41,970 --> 01:13:46,920
this you know for a mental exercise but

01:13:44,580 --> 01:13:50,300
I wouldn't recommend it again we can do

01:13:46,920 --> 01:13:52,710
better so there's a there's an amazing

01:13:50,300 --> 01:13:54,000
API you can use add it to your maven

01:13:52,710 --> 01:13:56,970
dependency or Gradle dependencies it's

01:13:54,000 --> 01:13:58,500
called the Cloud Foundry runtime my hero

01:13:56,970 --> 01:14:00,900
I'm not standing there in the back is

01:13:58,500 --> 01:14:04,980
the lead ninja behind that so if you

01:14:00,900 --> 01:14:06,270
have questions and prays tell him if you

01:14:04,980 --> 01:14:11,130
have complaints

01:14:06,270 --> 01:14:12,870
tell Scott okay so this API all it does

01:14:11,130 --> 01:14:14,580
is it hides a lot of that JSON

01:14:12,870 --> 01:14:17,130
environment variable munging that we

01:14:14,580 --> 01:14:19,110
could do ourselves and dynamically sort

01:14:17,130 --> 01:14:21,330
of inflate services for you on your on

01:14:19,110 --> 01:14:22,470
behalf of i'm be on your behalf right

01:14:21,330 --> 01:14:24,810
it looks at these environment variables

01:14:22,470 --> 01:14:26,280
grabs a username the password the port

01:14:24,810 --> 01:14:29,520
and all that stuff and creates a data

01:14:26,280 --> 01:14:32,940
source or a manga instance or a Redis

01:14:29,520 --> 01:14:34,260
connection etc once you've got that

01:14:32,940 --> 01:14:36,120
conviron meant object from the class

01:14:34,260 --> 01:14:36,900
path using it is fairly simple well it's

01:14:36,120 --> 01:14:38,820
dead simple actually

01:14:36,900 --> 01:14:40,020
you just instantiate an instance and

01:14:38,820 --> 01:14:42,690
then you can interrogate it you can ask

01:14:40,020 --> 01:14:44,670
questions like for example where am i

01:14:42,690 --> 01:14:46,920
running how much how many instances are

01:14:44,670 --> 01:14:53,340
there what's the URI of the of the cloud

01:14:46,920 --> 01:14:55,890
that I'm using etc let's see another way

01:14:53,340 --> 01:14:58,350
to so you can actually use that kind

01:14:55,890 --> 01:15:00,630
you know encode using Java configuration

01:14:58,350 --> 01:15:04,290
instantiate service or creative service

01:15:00,630 --> 01:15:05,640
you can also use the cloud namespace the

01:15:04,290 --> 01:15:07,470
cloud namespace provides support for

01:15:05,640 --> 01:15:09,180
doing this using the spring XML

01:15:07,470 --> 01:15:10,980
configuration format just show up and

01:15:09,180 --> 01:15:13,380
tell me if you guys are using XML three

01:15:10,980 --> 01:15:17,310
of spring applications is fine of course

01:15:13,380 --> 01:15:21,390
on me to Java configuration okay so

01:15:17,310 --> 01:15:23,090
we've got you both covered the namespace

01:15:21,390 --> 01:15:26,310
itself provides the ability to

01:15:23,090 --> 01:15:27,780
dynamically inflate services for you so

01:15:26,310 --> 01:15:30,270
it'll look at what you've got configured

01:15:27,780 --> 01:15:31,560
in the cloud and then provide beans for

01:15:30,270 --> 01:15:34,410
you that you can inject using at auto

01:15:31,560 --> 01:15:35,820
wired or at inject you know just by type

01:15:34,410 --> 01:15:36,900
right so you don't have to know about

01:15:35,820 --> 01:15:40,170
the beans are you think it'll just do it

01:15:36,900 --> 01:15:44,550
dynamically or you can take more control

01:15:40,170 --> 01:15:46,110
again you know and actually tailor how

01:15:44,550 --> 01:15:48,120
each type of service is created so if

01:15:46,110 --> 01:15:49,650
we're here for example I'm saying I want

01:15:48,120 --> 01:15:50,880
to create I want to reference the

01:15:49,650 --> 01:15:51,900
service that I've bound for a data

01:15:50,880 --> 01:15:53,250
source and I want to be able to make

01:15:51,900 --> 01:15:55,740
that available and use that my

01:15:53,250 --> 01:15:57,750
configuration here when I use the cop :

01:15:55,740 --> 01:15:59,730
datasource element I'm saying you know

01:15:57,750 --> 01:16:00,840
make this a reference to the data source

01:15:59,730 --> 01:16:03,270
that I want to be able to inject and

01:16:00,840 --> 01:16:05,730
manipulate in my spring application and

01:16:03,270 --> 01:16:07,680
then I can do so as normal here for

01:16:05,730 --> 01:16:09,630
example I'm referencing the data source

01:16:07,680 --> 01:16:11,880
and my local container and any manager

01:16:09,630 --> 01:16:14,010
factory bean for JP a support inside of

01:16:11,880 --> 01:16:18,630
spring I can override certain

01:16:14,010 --> 01:16:21,000
characteristics of course another sort

01:16:18,630 --> 01:16:23,430
of lower level way to work is to

01:16:21,000 --> 01:16:25,890
actually get access to the various

01:16:23,430 --> 01:16:27,660
properties that the content of runtime

01:16:25,890 --> 01:16:29,700
API makes available in the spring

01:16:27,660 --> 01:16:32,400
environment abstraction again these

01:16:29,700 --> 01:16:33,510
properties essentially just contributes

01:16:32,400 --> 01:16:35,040
another property source it's just

01:16:33,510 --> 01:16:37,110
another place for those those are

01:16:35,040 --> 01:16:38,520
environment variables do you may be made

01:16:37,110 --> 01:16:40,290
available the reason you might want to

01:16:38,520 --> 01:16:42,600
do this for example is if you don't like

01:16:40,290 --> 01:16:44,610
the defaults okay so perhaps you don't

01:16:42,600 --> 01:16:46,530
want to let the the runtime give you a

01:16:44,610 --> 01:16:47,880
data source instance perhaps you want to

01:16:46,530 --> 01:16:49,290
just tender it yourself and override the

01:16:47,880 --> 01:16:50,850
connection pool and change whatever else

01:16:49,290 --> 01:16:52,080
do you want so you need access to things

01:16:50,850 --> 01:16:55,440
like the user name and the password and

01:16:52,080 --> 01:16:57,270
so on this is still leagues better than

01:16:55,440 --> 01:16:59,310
actually just lunging and parsing that

01:16:57,270 --> 01:17:00,540
environment variable so here I'm using

01:16:59,310 --> 01:17:02,610
it to create a different connection pool

01:17:00,540 --> 01:17:07,230
you know I've admitted to the code for

01:17:02,610 --> 01:17:09,770
brevity as I mentioned all this hinges

01:17:07,230 --> 01:17:11,900
on the environment abstraction again

01:17:09,770 --> 01:17:16,610
in spring three one we're using it from

01:17:11,900 --> 01:17:19,910
code I mean from data configuration see

01:17:16,610 --> 01:17:21,200
I mentioned profiles we've talked that

01:17:19,910 --> 01:17:22,940
profiles a couple different times the

01:17:21,200 --> 01:17:25,160
value here is that you have the ability

01:17:22,940 --> 01:17:27,770
to isolate configuration for different

01:17:25,160 --> 01:17:31,700
types of runtimes in your you know in

01:17:27,770 --> 01:17:32,900
these little scoped profiled beams right

01:17:31,700 --> 01:17:35,030
so for example I might have one set of

01:17:32,900 --> 01:17:36,680
configuration for like cloud one for QA

01:17:35,030 --> 01:17:57,470
one for dead one for testing one for

01:17:36,680 --> 01:17:59,360
this that and the rest right um to

01:17:57,470 --> 01:18:00,670
programmatically create a service I want

01:17:59,360 --> 01:18:03,110
to show you guys this this is the actual

01:18:00,670 --> 01:18:03,920
this is the service creator this is the

01:18:03,110 --> 01:18:05,900
idea is here you get the cloud

01:18:03,920 --> 01:18:08,870
environment you query the environment

01:18:05,900 --> 01:18:10,370
for any type of service one of the

01:18:08,870 --> 01:18:12,920
services types that we know about so for

01:18:10,370 --> 01:18:14,570
example I wanted I want to discover what

01:18:12,920 --> 01:18:16,580
relational databases are bound to my

01:18:14,570 --> 01:18:19,670
application and in particular I want to

01:18:16,580 --> 01:18:22,190
retrieve a reference to the relational

01:18:19,670 --> 01:18:24,350
database named my sequel service that

01:18:22,190 --> 01:18:27,140
will specifically pluck that particular

01:18:24,350 --> 01:18:29,090
service and provide a our DBMS service

01:18:27,140 --> 01:18:32,360
info object which I can then feed to my

01:18:29,090 --> 01:18:34,880
our DBMS service creator and inflate if

01:18:32,360 --> 01:18:36,620
you will a data source so while this is

01:18:34,880 --> 01:18:38,360
easy to use inside of Java configuration

01:18:36,620 --> 01:18:39,920
you could of course just use this in any

01:18:38,360 --> 01:18:42,230
regular job application it isn't

01:18:39,920 --> 01:18:44,260
specific to spring okay questions on

01:18:42,230 --> 01:18:44,260
that

01:18:52,360 --> 01:19:03,200
well let's see what we've got

01:18:54,290 --> 01:19:04,370
actually boy that's heavy how many of

01:19:03,200 --> 01:19:11,300
you guys using the latest in grades 2

01:19:04,370 --> 01:19:13,220
STS the the new 3 to series is markedly

01:19:11,300 --> 01:19:16,810
faster than the 300 series so if you

01:19:13,220 --> 01:19:21,700
haven't upgraded do there we are

01:19:16,810 --> 01:19:21,700
okay yes sir

01:19:24,870 --> 01:20:24,430
you are entering well I do um the other

01:20:23,320 --> 01:20:26,350
thing you need to do if you have a fresh

01:20:24,430 --> 01:20:28,600
install of STS besides installing the

01:20:26,350 --> 01:20:30,000
beta plug-in which I've just done you

01:20:28,600 --> 01:20:32,020
need to set up a cloud foundry

01:20:30,000 --> 01:20:33,280
instance right we have a connector

01:20:32,020 --> 01:20:35,950
that's just been freshly updated as I

01:20:33,280 --> 01:20:37,420
say I'm not going to repeat the process

01:20:35,950 --> 01:20:40,510
but if you were to do it you would go to

01:20:37,420 --> 01:20:41,590
the new server panel there choose

01:20:40,510 --> 01:20:43,180
pivotal and then choose Cloud Foundry

01:20:41,590 --> 01:20:44,710
and there there there and you can

01:20:43,180 --> 01:20:46,540
configure your connection information

01:20:44,710 --> 01:20:47,680
right you're basically doing the same

01:20:46,540 --> 01:20:50,950
thing we did in the command line you're

01:20:47,680 --> 01:20:53,950
doing the CF target and see if login so

01:20:50,950 --> 01:20:56,950
cancel this once you have this

01:20:53,950 --> 01:20:59,200
integration enabled you can just double

01:20:56,950 --> 01:21:00,670
click on this guy and sort of inspect

01:20:59,200 --> 01:21:02,470
the deployed applications just as you

01:21:00,670 --> 01:21:04,870
might using the web web console of the

01:21:02,470 --> 01:21:06,700
command line you can also look at the

01:21:04,870 --> 01:21:08,830
configured applications and the services

01:21:06,700 --> 01:21:10,600
that are bound to those applications so

01:21:08,830 --> 01:21:13,600
for example here I've selected spring

01:21:10,600 --> 01:21:15,970
music and here I can see the two

01:21:13,600 --> 01:21:16,810
services bound to that instance and I

01:21:15,970 --> 01:21:19,600
can see the status of the application

01:21:16,810 --> 01:21:21,760
and the map URLs and everything else we

01:21:19,600 --> 01:21:25,230
will delete this guy is it running it

01:21:21,760 --> 01:21:25,230
knows that money couldn't be brewing

01:21:25,470 --> 01:21:31,110
what sort of sorcery is that do we can I

01:21:28,660 --> 01:21:31,110
kill that thing

01:21:31,340 --> 01:21:40,060
oh thank you

01:21:34,970 --> 01:21:45,860
stop this Gary clasp your fingers folks

01:21:40,060 --> 01:21:47,540
four minutes to the finish line tension

01:21:45,860 --> 01:21:55,760
you could cut with but with a knife you

01:21:47,540 --> 01:21:57,830
know now the cloud pattern eBay for

01:21:55,760 --> 01:21:59,480
eclipse was meant specifically for

01:21:57,830 --> 01:22:02,600
people like me who don't do well before

01:21:59,480 --> 01:22:04,190
you know noon without enough coffee

01:22:02,600 --> 01:22:06,620
so it's Dragon drool friendly alright

01:22:04,190 --> 01:22:08,450
just take your existing application I'm

01:22:06,620 --> 01:22:09,890
gonna not delete my existing services

01:22:08,450 --> 01:22:13,520
because I want to just rebind to those I

01:22:09,890 --> 01:22:15,620
don't want to do we set that up okay so

01:22:13,520 --> 01:22:17,060
I'm gonna take my spring music

01:22:15,620 --> 01:22:18,520
application drag and drill onto the

01:22:17,060 --> 01:22:21,530
cloud for a cloud foundry connector

01:22:18,520 --> 01:22:23,450
it'll prompt me to specify information

01:22:21,530 --> 01:22:24,260
about the actual application stuff I

01:22:23,450 --> 01:22:28,610
would specify in the command line

01:22:24,260 --> 01:22:30,080
otherwise I'm going to hit next wait for

01:22:28,610 --> 01:22:32,180
it to interact with everything it's

01:22:30,080 --> 01:22:38,540
pre-configured that for me which

01:22:32,180 --> 01:22:48,890
services were they enough time for than

01:22:38,540 --> 01:22:50,660
your eloquent finish this is what the

01:22:48,890 --> 01:22:52,640
awkwardness sits in while this go you

01:22:50,660 --> 01:22:55,850
know chugs along questions since we have

01:22:52,640 --> 01:22:59,590
a few minutes any questions comments

01:22:55,850 --> 01:22:59,590
feedback Tomatoes oh yeah hi

01:23:29,340 --> 01:23:36,130
actually yeah yeah it's a great question

01:23:34,480 --> 01:23:37,030
so how can we how can we tune the Java

01:23:36,130 --> 01:23:38,380
parameters and so on

01:23:37,030 --> 01:23:40,510
so there's two there's two things you

01:23:38,380 --> 01:23:42,340
can do that so as I mentioned Cloud

01:23:40,510 --> 01:23:43,780
Foundry has an environment and just

01:23:42,340 --> 01:23:45,520
showed you that that horrible bit of

01:23:43,780 --> 01:23:47,650
JSON which said to recap application and

01:23:45,520 --> 01:23:50,590
so on and that was extracted from what

01:23:47,650 --> 01:23:53,290
ends up on the the droplet execution

01:23:50,590 --> 01:23:55,690
agents environment on the server side so

01:23:53,290 --> 01:23:57,040
we can actually do with the CF tool the

01:23:55,690 --> 01:24:00,190
command line is the sign environment

01:23:57,040 --> 01:24:01,660
variables if we needed to do that the

01:24:00,190 --> 01:24:03,340
other thing you can do in terms of

01:24:01,660 --> 01:24:04,450
configuring the Java build pack if you

01:24:03,340 --> 01:24:06,990
go into the Java build pack

01:24:04,450 --> 01:24:09,550
documentation on github you can actually

01:24:06,990 --> 01:24:11,890
fine-tune things like JVM parameters and

01:24:09,550 --> 01:24:12,850
so on in there okay so I've been in his

01:24:11,890 --> 01:24:14,890
team have done a great job of

01:24:12,850 --> 01:24:17,200
documenting how to actually take the

01:24:14,890 --> 01:24:19,150
Java bill pack modify its configuration

01:24:17,200 --> 01:24:20,530
and parameters and then redeploy your

01:24:19,150 --> 01:24:28,300
application so those are the two ways

01:24:20,530 --> 01:24:30,040
you could do that these are a way of

01:24:28,300 --> 01:24:32,130
installing profilers well New Relic is

01:24:30,040 --> 01:24:35,470
one of those right so New Relic is a

01:24:32,130 --> 01:24:37,840
we've actually included their client jar

01:24:35,470 --> 01:24:40,870
or they're connected jar went so when we

01:24:37,840 --> 01:24:41,830
bind to New Relic it is sent to start

01:24:40,870 --> 01:24:45,760
sending information to New Relic

01:24:41,830 --> 01:24:47,380
straightaway yeah so again that would be

01:24:45,760 --> 01:24:48,820
something that you could if you look at

01:24:47,380 --> 01:24:50,230
the Java build pack Fork a foundry

01:24:48,820 --> 01:24:51,700
documentation there are infamous

01:24:50,230 --> 01:24:53,290
information about that in there about

01:24:51,700 --> 01:24:55,780
how to extend it with your own jars and

01:24:53,290 --> 01:24:58,000
additions of like profiling tools and

01:24:55,780 --> 01:25:00,490
others and again

01:24:58,000 --> 01:25:02,290
Bend's of being on stage parallel with

01:25:00,490 --> 01:25:03,250
us but he's around here a week and he'll

01:25:02,290 --> 01:25:06,220
be really happy to talk to you about

01:25:03,250 --> 01:25:08,940
that kinda stuff thanks dude I think

01:25:06,220 --> 01:25:08,940
we're going to run out of time

01:25:27,110 --> 01:25:31,829
you can't directly like drag-and-drop

01:25:29,789 --> 01:25:33,119
between spaces right now that's

01:25:31,829 --> 01:25:35,269
something we might add in the future but

01:25:33,119 --> 01:25:39,059
you can certainly deploy to a difference

01:25:35,269 --> 01:25:40,889
retarget a different space right I just

01:25:39,059 --> 01:25:42,420
what a first of all apologize at a

01:25:40,889 --> 01:25:44,699
couple of our demo didn't work entirely

01:25:42,420 --> 01:25:46,349
I'm again happy to walk you through

01:25:44,699 --> 01:25:48,059
things in the demo lounge this week if

01:25:46,349 --> 01:25:49,400
you come and find me I also want to

01:25:48,059 --> 01:25:55,920
mention I'm just going to double check

01:25:49,400 --> 01:25:58,079
that the next the next talk in here

01:25:55,920 --> 01:26:01,709
which will be at Cloud Foundry one as I

01:25:58,079 --> 01:26:03,900
try and navigate the is build your own

01:26:01,709 --> 01:26:05,610
very build your very own private cloud

01:26:03,900 --> 01:26:06,630
foundry with my colleague Matt Stein so

01:26:05,610 --> 01:26:08,429
if you want to learn more about that

01:26:06,630 --> 01:26:10,409
come back in here at 10:30 we've got a

01:26:08,429 --> 01:26:12,030
half hour break now but thank you very

01:26:10,409 --> 01:26:14,690
much for your attention and good morning

01:26:12,030 --> 01:26:14,690
ladies and gentlemen

01:26:21,380 --> 01:26:23,440

YouTube URL: https://www.youtube.com/watch?v=W69nmjyDNls


