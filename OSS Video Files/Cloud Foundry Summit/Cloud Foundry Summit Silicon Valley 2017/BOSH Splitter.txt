Title: BOSH Splitter
Publication date: 2017-06-21
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	BOSH Splitter - Chris Weibel, Stark & Wayne & Balajee Nagarajan, GE Digital    

As Cloud Foundry operators, we want to provide a seamless experience to our end-users, while keeping Cloud Foundry itself up to date and scaled appropriately. While BOSH is a powerful tool for managing such complexity, those deployments can become unwieldy. Large deployments that involve hundreds, or even thousands of instances run into problems of scale, especially during upgrades.

Drawing on their experience keeping GE's Cloud Foundry - based Predix platform running and up to date, BOSH Splitter was created - a tool that helps split large-scale deployments into easier to manage bites. This tool allows you to split out a BOSH job in an existing deployment into its own manifest, without having to manage multiple deployment repos for the same environment. For example: In a large production environment, you might have 500 or more servers, most of these being runners or cells split across a few availability zones. These can be easily split out into their own deployment manifests and maintained while continuing to leverage your existing templates. You can then schedule your upgrade windows one availability zone at a time if desired, or implement whatever paradigm befits your organization.

Learn how Balajee, Chris and the rest of the team have successfully used BOSH Splitter to make Diego Cell stemcell upgrades much more bearable, and how you can use it in your own large-scale deployments today.

The tool and additional information can be found here: https://github.com/cloudfoundry-community/bosh-splitter

Balajee Nagarajan
Balajee Nagarajan is a Sr Engineering Manager at Predix Cloud Engineering team at GE Digital, responsible for building, maintaining and providing TLC for the application and container runtime environments for Predix, a job that gives him the joys of maintaining very large BOSH deployments. Before joining GE Digital, Balajee was part of the Avi Networks team building next gen Cloud Load balancers and responsible for bootstrapping their QA/Operations and Support teams. He has spent time attending/speaking at various meetups in SF and East bay.

Chris Weibel
Stark & Wayne, LLC
Cloud Engineer
Niagara Falls, NY

Chris Weibel is a Engineer Team Lead at Stark & Wayne and has worked on several projects including SHIELD & RDPG. The last two years have been spent helping deploy and maintain Cloud Foundry for GE Predix. A former DBA, SAN administrator and developer in the regulated banking, utilities and health care industries he has focused on discovering what DevOps needs to make their lives easier from several perspectives. He is a regular meetup speaker at Buffalo Lab's Database Seminars.
Captions: 
	00:00:00,030 --> 00:00:05,730
well ladies and gentlemen welcome to

00:00:01,770 --> 00:00:07,290
Bosch splitter see this is the part

00:00:05,730 --> 00:00:09,830
where I had a line in here there was

00:00:07,290 --> 00:00:13,349
gonna be applause and gravy

00:00:09,830 --> 00:00:15,590
yeah confetti no Mac and fatty that's

00:00:13,349 --> 00:00:18,119
that's not very green

00:00:15,590 --> 00:00:20,390
now I'm doctor Nick I don't have my own

00:00:18,119 --> 00:00:23,460
theme music when I walk in

00:00:20,390 --> 00:00:26,099
so actually we should switch sides

00:00:23,460 --> 00:00:28,859
because I'm Chris Weibull work at the

00:00:26,099 --> 00:00:33,270
end engineering team lead over at Stark

00:00:28,859 --> 00:00:34,920
and Wayne tomorrow I'm Balaji Nagarajan

00:00:33,270 --> 00:00:38,480
director software engineering at GE

00:00:34,920 --> 00:00:38,480
Digital working on critics

00:00:39,800 --> 00:00:44,969
what is Bosh splitter I'm sure you guys

00:00:42,329 --> 00:00:47,730
are waiting to know that so everybody is

00:00:44,969 --> 00:00:49,620
familiar with Bosh or at least sometimes

00:00:47,730 --> 00:00:54,480
somewhat remove gosh

00:00:49,620 --> 00:00:56,520
IgE we have many California deployments

00:00:54,480 --> 00:00:59,489
in production we have quite a handful of

00:00:56,520 --> 00:01:01,469
them and as our journey with cloud

00:00:59,489 --> 00:01:03,780
foundry grows what we found out that

00:01:01,469 --> 00:01:07,380
managing a single large deployment of

00:01:03,780 --> 00:01:09,780
boundary is no joke especially when we

00:01:07,380 --> 00:01:11,820
throw in the practices and policies that

00:01:09,780 --> 00:01:13,290
we have our G and which is very

00:01:11,820 --> 00:01:15,450
typically with any large company that

00:01:13,290 --> 00:01:18,990
you have where you have rigorous change

00:01:15,450 --> 00:01:20,759
control and change windows doing a

00:01:18,990 --> 00:01:24,000
change a single change through Bosh

00:01:20,759 --> 00:01:26,400
starts taking ours days and probably

00:01:24,000 --> 00:01:29,729
some times a week and given that

00:01:26,400 --> 00:01:31,740
particular problem what we we were

00:01:29,729 --> 00:01:33,750
facing with was if we started a

00:01:31,740 --> 00:01:35,490
stem-cell change on a Friday evening

00:01:33,750 --> 00:01:37,590
because some someone decided that

00:01:35,490 --> 00:01:39,900
changes are good on Friday evenings but

00:01:37,590 --> 00:01:42,090
I don't know who these people are but a

00:01:39,900 --> 00:01:43,500
change that starts on Friday evening

00:01:42,090 --> 00:01:46,310
typically takes it all the way to the

00:01:43,500 --> 00:01:49,409
Monday morning and anybody who has done

00:01:46,310 --> 00:01:51,509
production roll ups know that when you

00:01:49,409 --> 00:01:54,390
start a change like that it's a it's a

00:01:51,509 --> 00:01:57,299
it's a no starter for one and given how

00:01:54,390 --> 00:01:58,890
Bosch works it is so hard for us to stop

00:01:57,299 --> 00:02:00,270
that change to do if there is a

00:01:58,890 --> 00:02:02,189
production outrage in between if you

00:02:00,270 --> 00:02:05,119
want to fix something else in between it

00:02:02,189 --> 00:02:07,829
is such a hard thing to do which was our

00:02:05,119 --> 00:02:10,459
reason behind going down this path of

00:02:07,829 --> 00:02:10,459
Bosch theater

00:02:11,849 --> 00:02:17,920
the use case essentially presents itself

00:02:14,409 --> 00:02:21,280
as where given our requirements that we

00:02:17,920 --> 00:02:24,340
have we wanted to write a tool around

00:02:21,280 --> 00:02:25,840
boss of that given how we build our

00:02:24,340 --> 00:02:28,269
manifest given how we build our own

00:02:25,840 --> 00:02:30,459
templates and given how a repo is

00:02:28,269 --> 00:02:32,200
managed with git and conkers without

00:02:30,459 --> 00:02:35,110
doing too much of plumbing we wanted to

00:02:32,200 --> 00:02:38,079
break down a single manifest into a more

00:02:35,110 --> 00:02:40,530
manageable deployment so that every

00:02:38,079 --> 00:02:43,090
deployment can be started on

00:02:40,530 --> 00:02:45,069
independently of the other one and we

00:02:43,090 --> 00:02:47,829
could start and stop each deployment at

00:02:45,069 --> 00:02:51,220
a meaningful are meaningful pace this

00:02:47,829 --> 00:02:53,260
gives us the flexibility of doing some

00:02:51,220 --> 00:02:55,690
sort of an a/b deployment or Canaries

00:02:53,260 --> 00:02:57,909
and we can have stem-cell changes where

00:02:55,690 --> 00:02:59,620
you can leave a particular runners in

00:02:57,909 --> 00:03:01,690
one stem cell while others are enrolled

00:02:59,620 --> 00:03:04,530
essential as you propagate a change

00:03:01,690 --> 00:03:07,150
through meaningful working hours as well

00:03:04,530 --> 00:03:10,389
and I just want to reiterate something

00:03:07,150 --> 00:03:13,870
the biology said some of us actually

00:03:10,389 --> 00:03:15,579
wind up doing the production deploys and

00:03:13,870 --> 00:03:18,280
being able to break those up into eight

00:03:15,579 --> 00:03:20,410
hour windows so that you can just

00:03:18,280 --> 00:03:23,530
without having to hit control-c on Bosh

00:03:20,410 --> 00:03:25,690
and stop your deploy and a nice happy

00:03:23,530 --> 00:03:26,709
place that makes everybody happy so then

00:03:25,690 --> 00:03:28,510
you can just keep going on Monday

00:03:26,709 --> 00:03:29,889
morning make sure to change control

00:03:28,510 --> 00:03:32,889
board much happier that you're able to

00:03:29,889 --> 00:03:34,660
control this little beasty for your stem

00:03:32,889 --> 00:03:37,269
cell upgrades or a/b testing or whatever

00:03:34,660 --> 00:03:38,949
it is that you want to do and this

00:03:37,269 --> 00:03:41,049
actually came out of one of one time

00:03:38,949 --> 00:03:43,239
when we were actually doing a change was

00:03:41,049 --> 00:03:46,359
a stem cell rollout we were going

00:03:43,239 --> 00:03:48,669
through a deployment of close to 600 VMs

00:03:46,359 --> 00:03:51,970
there was a production out page where we

00:03:48,669 --> 00:03:53,590
actually had to go scale one of the Rana

00:03:51,970 --> 00:03:55,840
groups we could not do anything other

00:03:53,590 --> 00:03:57,849
than control see the deployment reward

00:03:55,840 --> 00:04:00,669
do some major surgery revert the changes

00:03:57,849 --> 00:04:02,709
and then just for adding a bunch of VMs

00:04:00,669 --> 00:04:04,659
in one run run a group we gotta go do

00:04:02,709 --> 00:04:08,970
that that was one of the genesis of why

00:04:04,659 --> 00:04:11,530
we went down this particular tool so

00:04:08,970 --> 00:04:13,829
this is a late add to the slide deck

00:04:11,530 --> 00:04:16,630
here that doesn't even have a slide

00:04:13,829 --> 00:04:17,949
biology and I both have children so we

00:04:16,630 --> 00:04:21,640
wind up with random things that are

00:04:17,949 --> 00:04:23,990
inserted into our book bags thank you

00:04:21,640 --> 00:04:26,660
this is everybody else Cloud Foundry

00:04:23,990 --> 00:04:29,240
deployment this is our Cloud Foundry

00:04:26,660 --> 00:04:30,560
deployment it's much bigger it requires

00:04:29,240 --> 00:04:32,780
a lot more to keep it afloat

00:04:30,560 --> 00:04:34,490
that's where tools like Bosch splitter

00:04:32,780 --> 00:04:35,990
and and some of the other things that we

00:04:34,490 --> 00:04:37,640
won't be showing you today but feel free

00:04:35,990 --> 00:04:40,010
feel free to stop by and ask us

00:04:37,640 --> 00:04:42,260
questions on how to maintain big duck

00:04:40,010 --> 00:04:49,010
versus little duck and I think our

00:04:42,260 --> 00:04:50,530
children for for giving us these so how

00:04:49,010 --> 00:04:55,160
does it work

00:04:50,530 --> 00:04:57,050
Bosch splitter couple bits and pieces

00:04:55,160 --> 00:04:59,450
that we need to understand before we can

00:04:57,050 --> 00:05:01,670
really dig into this one for boss

00:04:59,450 --> 00:05:03,950
splitter our goal was to make sure that

00:05:01,670 --> 00:05:06,500
we could continue to use the templating

00:05:03,950 --> 00:05:09,230
that everybody is used to whether it's

00:05:06,500 --> 00:05:11,000
the templating inside of CF release or

00:05:09,230 --> 00:05:13,100
its Genesis or whatever your templating

00:05:11,000 --> 00:05:14,470
tool happens to be we don't want you to

00:05:13,100 --> 00:05:17,060
change any of that

00:05:14,470 --> 00:05:19,670
what it is is a post process that will

00:05:17,060 --> 00:05:21,590
take your big deployment manifest and

00:05:19,670 --> 00:05:23,570
carve it up into small or deployment

00:05:21,590 --> 00:05:27,590
manifests that are easier to manage for

00:05:23,570 --> 00:05:30,590
whatever your reason is so we have a

00:05:27,590 --> 00:05:32,720
makefile that's going to help us do that

00:05:30,590 --> 00:05:34,070
where I'm going to specify what the jobs

00:05:32,720 --> 00:05:36,380
are that I want to split out of the main

00:05:34,070 --> 00:05:38,420
big deployment manifest and I'm going to

00:05:36,380 --> 00:05:41,140
wind up with something that's called

00:05:38,420 --> 00:05:44,180
core and something that's called split

00:05:41,140 --> 00:05:46,250
so before you see core on all the rest

00:05:44,180 --> 00:05:48,800
of the slides what core is is your

00:05:46,250 --> 00:05:51,080
original deployment manifest with the

00:05:48,800 --> 00:05:52,610
one job in it or multiple jobs in it

00:05:51,080 --> 00:05:54,920
that you would like split out into its

00:05:52,610 --> 00:05:56,690
own separate deployment manifest but I

00:05:54,920 --> 00:06:00,470
still want to use all the templates that

00:05:56,690 --> 00:06:02,750
I already have what the splits are is

00:06:00,470 --> 00:06:04,310
that one job or more jobs that you

00:06:02,750 --> 00:06:08,960
wanted split out from your main

00:06:04,310 --> 00:06:11,060
deployment I wind up with two deployment

00:06:08,960 --> 00:06:12,890
manifests and then I deploy them just

00:06:11,060 --> 00:06:14,330
like I always had with any other

00:06:12,890 --> 00:06:16,040
deployment manifest that we have out

00:06:14,330 --> 00:06:18,500
there so we're reading out rewriting

00:06:16,040 --> 00:06:22,780
Basch we're not rewriting any of your

00:06:18,500 --> 00:06:26,630
templates so our traditional way of

00:06:22,780 --> 00:06:28,750
generating a CF deployment manifest sure

00:06:26,630 --> 00:06:30,680
everybody's done this before right ok

00:06:28,750 --> 00:06:32,510
you're gonna start out with a series of

00:06:30,680 --> 00:06:34,480
templates in CF release or so you have

00:06:32,510 --> 00:06:36,910
deployment or see if whatever comes

00:06:34,480 --> 00:06:38,590
this week you're gonna make your big

00:06:36,910 --> 00:06:40,210
giant deployment manifest

00:06:38,590 --> 00:06:42,070
you're gonna deploy that deployment

00:06:40,210 --> 00:06:45,220
manifest in our example here we have a

00:06:42,070 --> 00:06:48,820
very simple one we have three jobs XY

00:06:45,220 --> 00:06:51,640
and Z 3 x instances 3 y instances and

00:06:48,820 --> 00:06:56,650
jobs see is this huge one with six

00:06:51,640 --> 00:06:59,470
instances let's pretend that job Z is

00:06:56,650 --> 00:07:00,850
our a cell group or a group of runners

00:06:59,470 --> 00:07:03,580
and I would like to maintain those

00:07:00,850 --> 00:07:04,990
separate for stem cell upgrades are for

00:07:03,580 --> 00:07:09,130
a/b testing or whatever it is that I

00:07:04,990 --> 00:07:11,320
want to do this is what the life cycle

00:07:09,130 --> 00:07:12,700
looks like using Bosch splitter again

00:07:11,320 --> 00:07:15,370
we're going to use the same templates we

00:07:12,700 --> 00:07:17,110
always have we're gonna generate our

00:07:15,370 --> 00:07:18,670
deployment manifest but at the end of

00:07:17,110 --> 00:07:21,190
that we're just gonna run a little split

00:07:18,670 --> 00:07:23,980
which will split it out into two

00:07:21,190 --> 00:07:26,770
deployment manifests the first one like

00:07:23,980 --> 00:07:29,650
I mentioned before would be Cordy Amal

00:07:26,770 --> 00:07:32,770
and what that represents back from our

00:07:29,650 --> 00:07:35,830
example once we deploy it is job's X and

00:07:32,770 --> 00:07:38,200
jobs wide the three instances still and

00:07:35,830 --> 00:07:39,340
then we were going to split out job Z so

00:07:38,200 --> 00:07:41,830
I'm gonna have a separate deployment

00:07:39,340 --> 00:07:44,320
manifest for that xn yeah can't talk

00:07:41,830 --> 00:07:46,150
again source from the original

00:07:44,320 --> 00:07:48,490
deployment manifests I'm sorry the

00:07:46,150 --> 00:07:50,590
templates that we already had will

00:07:48,490 --> 00:07:56,350
deploy that and I get my six instances

00:07:50,590 --> 00:07:58,750
of Job z if you didn't follow that

00:07:56,350 --> 00:08:01,240
flowchart let me try to explain this in

00:07:58,750 --> 00:08:03,060
a slightly different fashion what we

00:08:01,240 --> 00:08:06,580
have here on the left is the original

00:08:03,060 --> 00:08:08,200
deployment manifest that we had if I was

00:08:06,580 --> 00:08:09,550
not using Bosch splitter that would have

00:08:08,200 --> 00:08:11,410
been the deployment manifest it would

00:08:09,550 --> 00:08:13,660
have used so there was the three jobs in

00:08:11,410 --> 00:08:15,850
there with all the properties and

00:08:13,660 --> 00:08:17,020
networks and releases and all sorts of

00:08:15,850 --> 00:08:20,500
fun stuff that's in a deployment

00:08:17,020 --> 00:08:23,890
manifest the next to represent hey I

00:08:20,500 --> 00:08:25,830
split out job Z so the Corps has

00:08:23,890 --> 00:08:28,090
everything except for a job Z in it

00:08:25,830 --> 00:08:29,830
there's a strikethrough there that just

00:08:28,090 --> 00:08:31,060
shows you these are the pieces that I

00:08:29,830 --> 00:08:34,360
actually aren't in this deployment

00:08:31,060 --> 00:08:36,250
manifest the one on the far right

00:08:34,360 --> 00:08:39,580
represents the split job which is just

00:08:36,250 --> 00:08:43,110
job Z in a important thing to see here

00:08:39,580 --> 00:08:45,460
is is that the properties the network

00:08:43,110 --> 00:08:47,440
sorry the properties the network's the

00:08:45,460 --> 00:08:49,360
resource pools etc are all

00:08:47,440 --> 00:08:52,360
the same amongst all three of them we're

00:08:49,360 --> 00:08:58,980
not trying to reinvent how Bosch is

00:08:52,360 --> 00:09:03,010
going to deploy any of this so demo time

00:08:58,980 --> 00:09:05,560
is if you do this in Barstow that

00:09:03,010 --> 00:09:13,480
manifest would look much smaller the

00:09:05,560 --> 00:09:15,600
only one so before i sexually start

00:09:13,480 --> 00:09:17,860
showing the individual pieces that demo

00:09:15,600 --> 00:09:20,320
want to let you know that what we're

00:09:17,860 --> 00:09:25,510
using here is the templating inside of

00:09:20,320 --> 00:09:27,250
CF release as a version 260 that I

00:09:25,510 --> 00:09:29,050
really didn't do much else to it other

00:09:27,250 --> 00:09:32,170
than just created it using the existing

00:09:29,050 --> 00:09:35,040
templates that were there so this repo

00:09:32,170 --> 00:09:38,020
here takes that boss flight manifest and

00:09:35,040 --> 00:09:41,080
I've got a very simple make file that I

00:09:38,020 --> 00:09:43,210
created this make file there's two

00:09:41,080 --> 00:09:46,330
important bits of information in it the

00:09:43,210 --> 00:09:48,550
first one is is where is the amyl file

00:09:46,330 --> 00:09:49,870
that I created with my templates so in

00:09:48,550 --> 00:09:51,700
this case I've got a subfolder called

00:09:49,870 --> 00:09:54,730
manifest and inside of that because I

00:09:51,700 --> 00:09:56,050
let creativity on naming anything we

00:09:54,730 --> 00:09:59,080
have a file called manifest yeah no

00:09:56,050 --> 00:10:02,380
that's my deployment manifest for CF the

00:09:59,080 --> 00:10:04,210
next line in this this is the list of

00:10:02,380 --> 00:10:07,510
jobs that I would like split out into

00:10:04,210 --> 00:10:09,820
their own deployment manifests so

00:10:07,510 --> 00:10:12,250
anything that isn't in this list is

00:10:09,820 --> 00:10:14,140
going to wind up in court amel anything

00:10:12,250 --> 00:10:16,060
that is in this list it's going to get

00:10:14,140 --> 00:10:18,760
its own deployment manifest file

00:10:16,060 --> 00:10:21,220
generated for it that only has run or z1

00:10:18,760 --> 00:10:27,040
in it or only has run or z2 in it from a

00:10:21,220 --> 00:10:28,630
from a jobs perspective so now for the

00:10:27,040 --> 00:10:32,470
magic because that's what we were paid

00:10:28,630 --> 00:10:35,650
to do and that's why you are all here so

00:10:32,470 --> 00:10:38,160
we're gonna run make split am i clear

00:10:35,650 --> 00:10:38,160
did not work

00:10:41,140 --> 00:10:47,390
magic thank you

00:10:46,010 --> 00:10:54,230
all right let's see what that actually

00:10:47,390 --> 00:10:55,430
did so Adam because everybody has to

00:10:54,230 --> 00:10:58,370
have an editor and this is the one I'm

00:10:55,430 --> 00:10:59,600
using you'll notice that there are three

00:10:58,370 --> 00:11:01,610
additional files in here

00:10:59,600 --> 00:11:07,310
there's our core file and our three

00:11:01,610 --> 00:11:09,110
split files with Adam since the manifest

00:11:07,310 --> 00:11:12,019
camel file is not green it was not

00:11:09,110 --> 00:11:14,209
changed in any way so the main point of

00:11:12,019 --> 00:11:15,769
this is the original manifest IMO file

00:11:14,209 --> 00:11:17,209
that we created with our template

00:11:15,769 --> 00:11:19,010
we're not making any changes to it

00:11:17,209 --> 00:11:20,930
whatsoever so if I needed to revert if I

00:11:19,010 --> 00:11:21,260
need to roll back something has gone

00:11:20,930 --> 00:11:23,180
wrong

00:11:21,260 --> 00:11:24,980
epically with Bosh splitter I've still

00:11:23,180 --> 00:11:29,930
got my original deployment manifest that

00:11:24,980 --> 00:11:31,100
I can use for rolling back so we're

00:11:29,930 --> 00:11:33,769
gonna take a look at cord out yeah well

00:11:31,100 --> 00:11:36,350
here real quick what you'll find is

00:11:33,769 --> 00:11:38,120
while there are references to run or z1

00:11:36,350 --> 00:11:40,130
in here because I've got resource pools

00:11:38,120 --> 00:11:43,519
and network definitions in here there is

00:11:40,130 --> 00:11:45,020
no job for runner z1 anymore in here if

00:11:43,519 --> 00:11:48,740
I look at one of the split jaws

00:11:45,020 --> 00:11:51,170
specifically for runner z1 the only

00:11:48,740 --> 00:11:54,890
thing that's in here is one job for

00:11:51,170 --> 00:11:56,620
runner z1 there are no other jobs in

00:11:54,890 --> 00:11:59,020
here that's it

00:11:56,620 --> 00:12:03,589
so when we go through and we deploy

00:11:59,020 --> 00:12:05,240
these files Bosch light please work

00:12:03,589 --> 00:12:07,750
Bosch light please work Bosch light

00:12:05,240 --> 00:12:07,750
police work

00:12:09,690 --> 00:12:18,300
got dark core not Hamill deploy again

00:12:16,380 --> 00:12:20,819
nothing special here other than hitting

00:12:18,300 --> 00:12:24,240
yes we're gonna go through and we're

00:12:20,819 --> 00:12:26,430
gonna do going we're going to deploy the

00:12:24,240 --> 00:12:29,190
core file which is gonna have all the

00:12:26,430 --> 00:12:31,740
cloud foundry components - runners e1

00:12:29,190 --> 00:12:35,730
and runners e2 I cheated

00:12:31,740 --> 00:12:37,410
I've already deployed this so we also

00:12:35,730 --> 00:12:39,660
show the same thing I'll show you the

00:12:37,410 --> 00:12:41,730
split real quick even though we I will

00:12:39,660 --> 00:12:46,860
cheat and tell you that it is a no op as

00:12:41,730 --> 00:12:55,050
well - en operation would have been good

00:12:46,860 --> 00:12:57,800
if I do a bosch deployments wow it looks

00:12:55,050 --> 00:12:57,800
terrible on that -

00:13:00,680 --> 00:13:06,140
we have three deployments in here Bosch

00:13:03,330 --> 00:13:08,520
sees this as three distinct deployments

00:13:06,140 --> 00:13:10,080
CF worden which is the name of my

00:13:08,520 --> 00:13:11,550
deployment manifest because again I

00:13:10,080 --> 00:13:15,899
didn't change the names of anything

00:13:11,550 --> 00:13:17,839
inside of the CF releases script that

00:13:15,899 --> 00:13:20,940
deployment is always called CF worden

00:13:17,839 --> 00:13:23,660
the runners e1 and runners e2 version of

00:13:20,940 --> 00:13:26,250
this were automatically named for me

00:13:23,660 --> 00:13:27,240
inside of the split script you want to

00:13:26,250 --> 00:13:29,220
come up with a different naming

00:13:27,240 --> 00:13:30,899
convention you're welcome to do so this

00:13:29,220 --> 00:13:37,200
is just the one that's provided you by

00:13:30,899 --> 00:13:39,450
default so if I look at Bosch VMs which

00:13:37,200 --> 00:13:41,790
this look really big really awesome on a

00:13:39,450 --> 00:13:44,220
different screen I've got all of my

00:13:41,790 --> 00:13:47,550
Cloud Foundry deployment or all my Cloud

00:13:44,220 --> 00:13:49,830
Foundry IBM's +1 for runners e1 I got my

00:13:47,550 --> 00:13:51,660
runner in here and runners e2 I've got

00:13:49,830 --> 00:13:53,959
two runners over here just to show you

00:13:51,660 --> 00:13:57,870
how you have nothing up my sleeves and

00:13:53,959 --> 00:14:01,170
to prove that this really works we have

00:13:57,870 --> 00:14:02,790
an app already deployed this is CFM I

00:14:01,170 --> 00:14:05,550
don't know who wrote this dr. NIC if it

00:14:02,790 --> 00:14:09,630
was you it is an awesome tool that I use

00:14:05,550 --> 00:14:11,400
just about daily to debug things but to

00:14:09,630 --> 00:14:13,709
show you that you actually have a

00:14:11,400 --> 00:14:16,110
working Cloud Foundry deployment split

00:14:13,709 --> 00:14:18,450
across multiple deployments inside of

00:14:16,110 --> 00:14:21,480
Bosh tada app works even though the

00:14:18,450 --> 00:14:26,300
runners aren't inside of the core cloud

00:14:21,480 --> 00:14:27,770
foundry deployment pauses for applause

00:14:26,300 --> 00:14:32,000
thank you

00:14:27,770 --> 00:14:34,520
[Applause]

00:14:32,000 --> 00:14:47,120
now I need to mess with this and switch

00:14:34,520 --> 00:14:51,860
back to that demo time is over so the

00:14:47,120 --> 00:14:56,510
split script is located on a compounder

00:14:51,860 --> 00:14:57,380
community repo before there's a mad dash

00:14:56,510 --> 00:14:58,880
to write this down

00:14:57,380 --> 00:15:00,260
it's hoping there was a mad dash to

00:14:58,880 --> 00:15:02,210
write this down this slide deck that

00:15:00,260 --> 00:15:04,490
you've seen here is actually uploaded to

00:15:02,210 --> 00:15:09,170
the CF summit site for this particular

00:15:04,490 --> 00:15:10,790
talk so you can pull it down later on at

00:15:09,170 --> 00:15:20,890
this point I'm gonna open it up to any

00:15:10,790 --> 00:15:20,890
questions anybody might have sir

00:15:31,160 --> 00:15:34,700
so what he's asking the slide to was our

00:15:33,050 --> 00:15:35,660
use case why were we doing this again

00:15:34,700 --> 00:15:41,630
and I'm just gonna give this to mr.

00:15:35,660 --> 00:15:43,130
biology so the biggest use case why we

00:15:41,630 --> 00:15:45,590
are doing this is typically our

00:15:43,130 --> 00:15:48,710
deployment is pretty huge we have like a

00:15:45,590 --> 00:15:51,110
500 600 VM deployment and when you roll

00:15:48,710 --> 00:15:53,740
a stem cell across that if you say max

00:15:51,110 --> 00:15:56,540
in flight is four that takes three days

00:15:53,740 --> 00:15:58,820
the problem with that is if you have a

00:15:56,540 --> 00:16:00,800
if you have to pause it to do something

00:15:58,820 --> 00:16:02,900
else in between that's that's impossible

00:16:00,800 --> 00:16:04,340
you gotta control see it you got to go

00:16:02,900 --> 00:16:06,500
undo everything that you've done so far

00:16:04,340 --> 00:16:08,000
and then you got to do some major shows

00:16:06,500 --> 00:16:10,010
you to get back to watch to do whatever

00:16:08,000 --> 00:16:12,020
you want so what we've done in our

00:16:10,010 --> 00:16:14,600
deployments is - we've split our entire

00:16:12,020 --> 00:16:16,430
12 foundry into multiple splits so you

00:16:14,600 --> 00:16:19,340
you have a we have a split of all of our

00:16:16,430 --> 00:16:21,560
core components into one manifest and we

00:16:19,340 --> 00:16:23,780
have runner per availability zone in two

00:16:21,560 --> 00:16:24,890
different for example today we're

00:16:23,780 --> 00:16:26,870
afternoon we're talking about splitting

00:16:24,890 --> 00:16:28,880
Nats out of into horn split so that

00:16:26,870 --> 00:16:31,010
driver touch Nats if you really don't

00:16:28,880 --> 00:16:33,170
need a touch dance that's the biggest

00:16:31,010 --> 00:16:35,830
use case that we have for this

00:16:33,170 --> 00:16:38,420
particular tool and the other thing is

00:16:35,830 --> 00:16:40,700
you don't really need to run a change

00:16:38,420 --> 00:16:42,380
for that long if you if you are for

00:16:40,700 --> 00:16:44,270
example if we have maintenance windows

00:16:42,380 --> 00:16:46,460
where they say start your change and

00:16:44,270 --> 00:16:47,630
stop it during normal business hours so

00:16:46,460 --> 00:16:56,210
that you're our new base your weekends

00:16:47,630 --> 00:16:57,710
this is what we do for that so what I

00:16:56,210 --> 00:17:00,740
pulled up on the screen here is actually

00:16:57,710 --> 00:17:02,630
a concourse deployment that we have that

00:17:00,740 --> 00:17:05,620
we've actually got the individual Diego

00:17:02,630 --> 00:17:08,720
cells that are split out into their own

00:17:05,620 --> 00:17:10,910
concourse jobs here so there's if I were

00:17:08,720 --> 00:17:12,620
to do a Bosch deployments against this I

00:17:10,910 --> 00:17:13,880
would actually see five deployments that

00:17:12,620 --> 00:17:16,970
are associated with this particular

00:17:13,880 --> 00:17:19,570
cloud foundry what this allows us to do

00:17:16,970 --> 00:17:21,590
is if I've got to change window that

00:17:19,570 --> 00:17:23,990
that looks much better on my screen

00:17:21,590 --> 00:17:26,420
sorry if I've got to change window that

00:17:23,990 --> 00:17:31,760
only allows me to do deployments for

00:17:26,420 --> 00:17:33,770
eight hours for a stem-cell upgrade the

00:17:31,760 --> 00:17:35,750
way that we have these scaled out is I

00:17:33,770 --> 00:17:37,100
know I have enough cells that are in

00:17:35,750 --> 00:17:39,350
each one of these groups that it'll be

00:17:37,100 --> 00:17:42,260
about eight hours for me to upgrade

00:17:39,350 --> 00:17:43,760
each one of these so if I need more

00:17:42,260 --> 00:17:45,230
capacity out there I'll actually create

00:17:43,760 --> 00:17:47,990
a new cell group just so that I can

00:17:45,230 --> 00:17:51,860
leverage the the split tool that we have

00:17:47,990 --> 00:17:54,200
here so that I can do a Monday through

00:17:51,860 --> 00:17:57,320
Friday deploy from 9:00 a.m. to 5:00

00:17:54,200 --> 00:17:59,900
p.m. instead of starting at Monday

00:17:57,320 --> 00:18:02,380
morning and then watching paint dry for

00:17:59,900 --> 00:18:06,890
72 hours straight while I'm doing a

00:18:02,380 --> 00:18:13,460
stem-cell upgrade we should win awards

00:18:06,890 --> 00:18:16,159
for watching paint dry so the only other

00:18:13,460 --> 00:18:19,010
part I had on this if there aren't any

00:18:16,159 --> 00:18:22,549
more questions there is a question and

00:18:19,010 --> 00:18:28,880
there is a question it's fun to watch

00:18:22,549 --> 00:18:31,610
Brian run thank you so in case if

00:18:28,880 --> 00:18:38,659
there's a use case to do a run split for

00:18:31,610 --> 00:18:40,880
example can you spruce it so you don't

00:18:38,659 --> 00:18:43,940
need to unscrews do you when you run

00:18:40,880 --> 00:18:45,620
when he ran the split the original man

00:18:43,940 --> 00:18:47,450
if his left ourselves so what you get

00:18:45,620 --> 00:18:50,210
out of it is three split files but your

00:18:47,450 --> 00:18:59,210
split file is still there I thought you

00:18:50,210 --> 00:19:02,750
had like the core and there is a core to

00:18:59,210 --> 00:19:04,340
this so inside of here I'm gonna leave

00:19:02,750 --> 00:19:06,620
the original manifest I am will file

00:19:04,340 --> 00:19:09,200
alone and I'm actually not using that as

00:19:06,620 --> 00:19:11,059
part of my deployment process so it sits

00:19:09,200 --> 00:19:12,679
there as an artifact that I can

00:19:11,059 --> 00:19:15,740
reference back when I'm actually

00:19:12,679 --> 00:19:20,090
deploying is Cory amel in the to split

00:19:15,740 --> 00:19:21,740
files so the other thing is this funny

00:19:20,090 --> 00:19:25,090
you mentioned spruce versus actually the

00:19:21,740 --> 00:19:27,980
magic that glues all of this together so

00:19:25,090 --> 00:19:31,539
this is as much of a talk as hey here's

00:19:27,980 --> 00:19:33,620
a cool little tool to do this as much as

00:19:31,539 --> 00:19:36,140
biology had a problem

00:19:33,620 --> 00:19:38,630
I've got spruce I've got templates I've

00:19:36,140 --> 00:19:41,330
got concours how do I solve that problem

00:19:38,630 --> 00:19:43,789
and spruce is the thing that really

00:19:41,330 --> 00:19:49,789
makes all of this work without it I'm

00:19:43,789 --> 00:19:58,119
dead in the water to be honest so

00:19:49,789 --> 00:19:58,119
you awesome sir

00:20:01,960 --> 00:20:08,710
so for the most part if you're using

00:20:06,369 --> 00:20:12,190
cloud config not an issue is just going

00:20:08,710 --> 00:20:15,220
to carve it up under the the old Bosch

00:20:12,190 --> 00:20:18,039
one style deployments that was where I

00:20:15,220 --> 00:20:19,629
did cheat just a little bit because the

00:20:18,039 --> 00:20:21,610
static IP is what I've actually done is

00:20:19,629 --> 00:20:23,649
I've created different network blocks

00:20:21,610 --> 00:20:26,379
that would be specifically associated

00:20:23,649 --> 00:20:27,580
with say Seoul the cells are a bad

00:20:26,379 --> 00:20:29,740
example because they're not statically I

00:20:27,580 --> 00:20:32,710
peed but say we statically IP at the

00:20:29,740 --> 00:20:35,440
cells I have a separate network block

00:20:32,710 --> 00:20:37,389
for cell z1 and cell z2 that I define

00:20:35,440 --> 00:20:38,649
and I carve up ahead of time so yes

00:20:37,389 --> 00:20:41,470
there is a little bit cheating that we

00:20:38,649 --> 00:20:44,440
do if you use an old Bosch one style

00:20:41,470 --> 00:20:46,779
manifest but and if you download this

00:20:44,440 --> 00:20:48,190
github repo you'll see that's actually

00:20:46,779 --> 00:20:49,990
what I did is I've got the separate

00:20:48,190 --> 00:20:52,690
Network block forerunner z1 and runner Z

00:20:49,990 --> 00:20:57,570
- just because Bosch lights goofy with

00:20:52,690 --> 00:20:57,570
the networking sir

00:21:01,000 --> 00:21:04,000
yes

00:21:21,240 --> 00:21:27,570
sure so we're using this primarily we're

00:21:26,279 --> 00:21:31,289
using this in production right now for

00:21:27,570 --> 00:21:33,179
for sales and for for runners I haven't

00:21:31,289 --> 00:21:34,620
tried to take more complex things that

00:21:33,179 --> 00:21:37,830
are going to use the the Bosch links

00:21:34,620 --> 00:21:40,020
like that and try to do it it's a great

00:21:37,830 --> 00:21:48,860
question I wish I had a better answer

00:21:40,020 --> 00:21:53,370
for you to be honest between them yeah

00:21:48,860 --> 00:21:55,350
hi lon Brian's coming up behind you so

00:21:53,370 --> 00:21:56,700
we can just split just match the

00:21:55,350 --> 00:21:58,500
deployment name and add more features

00:21:56,700 --> 00:21:59,610
that it's just something that they've

00:21:58,500 --> 00:22:01,740
never used before right

00:21:59,610 --> 00:22:05,190
yeah it's haven't gotten that far so if

00:22:01,740 --> 00:22:06,330
you know at the end of the day in that

00:22:05,190 --> 00:22:08,340
you're gonna reference a deployment

00:22:06,330 --> 00:22:10,140
that's gonna be split out you actually

00:22:08,340 --> 00:22:11,399
know what the name of that deployment is

00:22:10,140 --> 00:22:12,899
going to be at the end because you're

00:22:11,399 --> 00:22:15,059
controlling the algorithm on what your

00:22:12,899 --> 00:22:20,429
deployment is named so yes that is how

00:22:15,059 --> 00:22:22,169
you you could account for that but it's

00:22:20,429 --> 00:22:25,380
not that complex of a tool truthfully

00:22:22,169 --> 00:22:29,700
it's about five lines of a song but it's

00:22:25,380 --> 00:22:31,380
it's a it it's again because spruce does

00:22:29,700 --> 00:22:33,450
all the heavy lifting forests that I

00:22:31,380 --> 00:22:42,289
basically just have to tell spruce to go

00:22:33,450 --> 00:22:42,289
do this thing for me anyone else fire

00:22:59,590 --> 00:23:02,309
right

00:23:17,380 --> 00:23:21,850
no because I'm gonna let Bosch do that

00:23:19,450 --> 00:23:24,130
for me what I am gonna do though is if I

00:23:21,850 --> 00:23:26,650
want to control and say I can do 100

00:23:24,130 --> 00:23:28,660
runners a day I am actually gonna come

00:23:26,650 --> 00:23:30,910
up with multiple jobs they were not

00:23:28,660 --> 00:23:32,919
gonna be called z1 or z2 or z3 anymore

00:23:30,910 --> 00:23:34,330
but I am gonna call it runner 1 I'm

00:23:32,919 --> 00:23:35,770
gonna give it a hundred runner two is

00:23:34,330 --> 00:23:37,150
gonna get a hundred I'll let Bosch

00:23:35,770 --> 00:23:39,220
figure out where it's actually going to

00:23:37,150 --> 00:23:41,110
stick those individual but the main

00:23:39,220 --> 00:23:47,350
point of this was was for the change

00:23:41,110 --> 00:23:49,299
control if we have yeah yeah I would

00:23:47,350 --> 00:23:51,460
like to visit my children my children do

00:23:49,299 --> 00:23:53,230
like me still so at the end I would like

00:23:51,460 --> 00:23:54,669
to cleanly break this at the end of the

00:23:53,230 --> 00:23:58,030
day and if I've got to do artificial

00:23:54,669 --> 00:24:00,370
things like group a hundred runners at a

00:23:58,030 --> 00:24:01,690
time and a job called runner one that's

00:24:00,370 --> 00:24:06,960
what I'm gonna do so I can go home at

00:24:01,690 --> 00:24:09,309
night so anyone else

00:24:06,960 --> 00:24:13,419
it's been fun I didn't anticipate this

00:24:09,309 --> 00:24:15,490
many questions what's next

00:24:13,419 --> 00:24:16,750
one probably thing that I can think of

00:24:15,490 --> 00:24:19,240
is when you go look at a Bosch

00:24:16,750 --> 00:24:22,150
deployments you see you used to see one

00:24:19,240 --> 00:24:24,370
no you see twenty we should probably

00:24:22,150 --> 00:24:26,559
think about how to make a logical

00:24:24,370 --> 00:24:29,100
representation of how each one is linked

00:24:26,559 --> 00:24:29,100
into the other one

00:24:33,179 --> 00:24:37,259
and Neely is gonna ask this I wrote it

00:24:35,159 --> 00:24:38,999
down and the pipeline's also showing the

00:24:37,259 --> 00:24:41,489
world yeah same thing with a pipeline so

00:24:38,999 --> 00:24:44,219
how do you give a logical view of a job

00:24:41,489 --> 00:24:45,839
that's being split into one or more how

00:24:44,219 --> 00:24:47,219
do you link everything together to give

00:24:45,839 --> 00:24:51,869
you a logical representation of what's

00:24:47,219 --> 00:24:53,369
going on last little bit here so

00:24:51,869 --> 00:24:55,589
actually when we did put this in a

00:24:53,369 --> 00:24:57,179
series of Concours pipelines one of the

00:24:55,589 --> 00:24:59,369
first things that we had to do after we

00:24:57,179 --> 00:25:01,019
were finished with that was the all view

00:24:59,369 --> 00:25:03,239
we couldn't do that anymore because

00:25:01,019 --> 00:25:05,159
unless you had a fork fork a screen on

00:25:03,239 --> 00:25:07,889
something about that big you couldn't

00:25:05,159 --> 00:25:09,960
read any of the blocks anymore so there

00:25:07,889 --> 00:25:15,539
is when you when you have the individual

00:25:09,960 --> 00:25:17,909
Concours jobs I can juggle here and so

00:25:15,539 --> 00:25:21,960
this is just one environment I didn't

00:25:17,909 --> 00:25:24,899
get the top of it so we can see here

00:25:21,960 --> 00:25:26,999
that core dot ya mole is the one on the

00:25:24,899 --> 00:25:28,609
Left even doesn't even though it doesn't

00:25:26,999 --> 00:25:31,710
say core that's a good point

00:25:28,609 --> 00:25:33,450
and the individual cell splits are on

00:25:31,710 --> 00:25:36,149
the right hand side I've got four groups

00:25:33,450 --> 00:25:38,399
of these now plus my core I've now got

00:25:36,149 --> 00:25:40,349
five blocks that I got to go through in

00:25:38,399 --> 00:25:43,320
order to do a stem cell upgrade for a

00:25:40,349 --> 00:25:45,509
whole environment this is great you get

00:25:43,320 --> 00:25:49,229
20 environments that went from having 20

00:25:45,509 --> 00:25:51,570
blocks total to now 100 blocks plus all

00:25:49,229 --> 00:25:55,139
the other stuff in between a little bit

00:25:51,570 --> 00:25:56,489
you got to do for concourse but you know

00:25:55,139 --> 00:25:57,839
that's something we we don't have an

00:25:56,489 --> 00:26:03,859
answer to yet but we're looking for

00:25:57,839 --> 00:26:03,859
input on it anyone else

00:26:06,980 --> 00:26:13,380
dr. NIC anything thank you very much

00:26:12,780 --> 00:26:18,859
everyone

00:26:13,380 --> 00:26:18,859

YouTube URL: https://www.youtube.com/watch?v=nOX8hh2rch8


