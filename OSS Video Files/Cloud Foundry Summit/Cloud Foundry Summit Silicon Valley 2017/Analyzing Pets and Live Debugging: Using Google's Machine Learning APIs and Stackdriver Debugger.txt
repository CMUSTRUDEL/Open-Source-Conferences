Title: Analyzing Pets and Live Debugging: Using Google's Machine Learning APIs and Stackdriver Debugger
Publication date: 2017-06-22
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	Analyzing Pets and Live Debugging: Using Google's Machine Learning APIs and Stackdriver Debugger [I] - Colleen Briant, Google    

Learn how to use Google’s industry-leading machine learning technology and live debug production applications in one fell swoop! In this session we’ll explore some of the different apis and options that Google has for your machine learning needs, and then live demo using these apis and debugging a production application using the Stackdriver Debugger integration in the Java buildpack for Cloud Foundry.

Colleen Briant
Software Engineer, Google
Colleen is a Software Engineer at Google. She keeps Cloud Foundry developers and operators on the cutting edge of Google Services with the GCP Service Broker and other open source integrations. She has previously spoken at Cloud Foundry Summit Europe.
Captions: 
	00:00:00,000 --> 00:00:07,080
hi I'm Colleen I'm from Google I've been

00:00:04,799 --> 00:00:10,349
with Google for one year and one day

00:00:07,080 --> 00:00:12,360
exactly yesterday was my anniversary and

00:00:10,349 --> 00:00:14,839
I work on a team that does open source

00:00:12,360 --> 00:00:17,539
integrations with Google cloud platform

00:00:14,839 --> 00:00:19,529
so today we're gonna talk about

00:00:17,539 --> 00:00:21,570
integrating machine learning and

00:00:19,529 --> 00:00:24,750
stackdriver with cloud foundry

00:00:21,570 --> 00:00:27,150
I'm Mikey bolts I work at pivotal and I

00:00:24,750 --> 00:00:29,279
work with is V partners to integrate

00:00:27,150 --> 00:00:38,160
their services into pivotal cloud

00:00:29,279 --> 00:00:40,230
foundry I'm done so we'll start with the

00:00:38,160 --> 00:00:42,510
big picture here so I'll work right to

00:00:40,230 --> 00:00:44,430
last we have Google cloud platform which

00:00:42,510 --> 00:00:47,670
has all these great services will

00:00:44,430 --> 00:00:49,980
highlight the cloud storage the machine

00:00:47,670 --> 00:00:52,230
learning vision API and the stack driver

00:00:49,980 --> 00:00:54,600
debugger to do live production debugging

00:00:52,230 --> 00:00:56,670
today there are also several other

00:00:54,600 --> 00:00:59,300
services these are all exposed through

00:00:56,670 --> 00:01:01,890
the Google cloud platform service broker

00:00:59,300 --> 00:01:04,049
so you can use standard Cloud Foundry

00:01:01,890 --> 00:01:07,560
service bindings to use these services

00:01:04,049 --> 00:01:09,030
directly from your applications so we

00:01:07,560 --> 00:01:10,200
have great services and you're gonna

00:01:09,030 --> 00:01:13,650
make some great apps and we're gonna

00:01:10,200 --> 00:01:15,960
have a lot of happy users so I'm gonna

00:01:13,650 --> 00:01:18,689
start with kind of walking through some

00:01:15,960 --> 00:01:20,580
of the other machine learning api's that

00:01:18,689 --> 00:01:22,740
are available so the Translate API

00:01:20,580 --> 00:01:25,430
probably a lot of you are familiar with

00:01:22,740 --> 00:01:28,290
that takes either plain text or HTML

00:01:25,430 --> 00:01:30,720
documents and translates them to a

00:01:28,290 --> 00:01:33,210
variety of different languages so a

00:01:30,720 --> 00:01:35,549
possible use case for that would be just

00:01:33,210 --> 00:01:39,869
translating your own website so just

00:01:35,549 --> 00:01:42,720
uploading your HTML pages run them

00:01:39,869 --> 00:01:47,820
through the API and out pops a globally

00:01:42,720 --> 00:01:50,909
accessible website the natural language

00:01:47,820 --> 00:01:54,240
API does entity detection as well as

00:01:50,909 --> 00:01:56,549
sentiment analysis so something you

00:01:54,240 --> 00:01:59,189
could use this for at your own company

00:01:56,549 --> 00:02:01,619
would be to process customer views pick

00:01:59,189 --> 00:02:04,439
out ones that are especially positive

00:02:01,619 --> 00:02:08,970
and try to highlight those phrases in

00:02:04,439 --> 00:02:13,830
your next marketing campaign speech API

00:02:08,970 --> 00:02:17,280
takes an audio file and translates it to

00:02:13,830 --> 00:02:19,440
of plaintext it can also recognize what

00:02:17,280 --> 00:02:21,630
language the user is speaking in so a

00:02:19,440 --> 00:02:25,050
cool application for this might be say

00:02:21,630 --> 00:02:28,500
you have a phone system that you route

00:02:25,050 --> 00:02:30,360
to for customer support and you maybe

00:02:28,500 --> 00:02:32,580
detect that your user is really

00:02:30,360 --> 00:02:34,620
struggling to use the system

00:02:32,580 --> 00:02:37,410
maybe the reason is they are trying to

00:02:34,620 --> 00:02:40,920
speak a language that your system is not

00:02:37,410 --> 00:02:42,750
in so you take a little audio sample run

00:02:40,920 --> 00:02:44,730
it through the API and try to route them

00:02:42,750 --> 00:02:50,010
to an agent that can this is them in

00:02:44,730 --> 00:02:52,920
their native tongue our newest API is

00:02:50,010 --> 00:02:56,310
the video intelligence API we'll show

00:02:52,920 --> 00:02:59,490
you a little demo of that in a bit but

00:02:56,310 --> 00:03:04,230
that takes a video file and analyzes it

00:02:59,490 --> 00:03:06,450
for content so if you are taking a video

00:03:04,230 --> 00:03:08,660
of your kids little league game or

00:03:06,450 --> 00:03:11,700
something it'll tell you which sections

00:03:08,660 --> 00:03:14,390
are actually part of the game and which

00:03:11,700 --> 00:03:19,200
sections you turn to record your wife's

00:03:14,390 --> 00:03:21,930
reaction to that home run a potential

00:03:19,200 --> 00:03:25,110
business use case could be holding a

00:03:21,930 --> 00:03:27,360
competition for your users you can let

00:03:25,110 --> 00:03:30,270
them upload videos interacting with your

00:03:27,360 --> 00:03:32,550
product and running that through the API

00:03:30,270 --> 00:03:35,640
to pick out where in this video are they

00:03:32,550 --> 00:03:37,500
actually showcasing the product collect

00:03:35,640 --> 00:03:42,870
those snippets and and then use them

00:03:37,500 --> 00:03:45,140
later and the vision API is the one that

00:03:42,870 --> 00:03:47,430
is integrated into our application today

00:03:45,140 --> 00:03:51,650
so the vision API is a bunch of cool

00:03:47,430 --> 00:03:55,640
functionality including text OCR and

00:03:51,650 --> 00:03:58,500
palette recognition detection of whether

00:03:55,640 --> 00:04:02,370
an image is likely to contain adult

00:03:58,500 --> 00:04:06,239
content or violence one cool thing you

00:04:02,370 --> 00:04:10,019
can maybe do if you were a retailer like

00:04:06,239 --> 00:04:12,420
furniture retailer upload pictures your

00:04:10,019 --> 00:04:14,760
customers of products that they already

00:04:12,420 --> 00:04:17,040
have and you could use the pallet

00:04:14,760 --> 00:04:22,380
detection to try to find similar pieces

00:04:17,040 --> 00:04:24,419
that you had to suggest back to them so

00:04:22,380 --> 00:04:26,880
obviously each of these api's are really

00:04:24,419 --> 00:04:27,240
cool in their own but combinations are

00:04:26,880 --> 00:04:30,600
kind of

00:04:27,240 --> 00:04:33,780
we're the true power shines through so

00:04:30,600 --> 00:04:35,789
for example running an image through the

00:04:33,780 --> 00:04:38,039
vision API to get the text out and then

00:04:35,789 --> 00:04:41,039
running the text through the Translate

00:04:38,039 --> 00:04:47,250
API I'm pretty sure is how the Google

00:04:41,039 --> 00:04:50,310
Translate app works or maybe you could

00:04:47,250 --> 00:04:53,099
run customer voicemails through the

00:04:50,310 --> 00:04:56,250
speech API and then through the natural

00:04:53,099 --> 00:04:58,800
language API to kind of gather a general

00:04:56,250 --> 00:05:01,190
sentiment on is this customer happy and

00:04:58,800 --> 00:05:03,780
we can just record their their kudos or

00:05:01,190 --> 00:05:06,180
does this guy need a callback from

00:05:03,780 --> 00:05:08,900
somebody who's very patient and willing

00:05:06,180 --> 00:05:08,900
to help him out

00:05:11,330 --> 00:05:18,840
another idea I thought was pretty cool

00:05:13,979 --> 00:05:20,550
is if you control Twitter for tweets

00:05:18,840 --> 00:05:25,380
that are related to your product and

00:05:20,550 --> 00:05:27,289
then run the natural language API on the

00:05:25,380 --> 00:05:30,150
tweet the text of the tweet get

00:05:27,289 --> 00:05:32,460
sentiment analysis and then run the

00:05:30,150 --> 00:05:34,919
image through the vision API to make

00:05:32,460 --> 00:05:37,560
sure that it's safe for work it's an

00:05:34,919 --> 00:05:40,050
easy way to come up with things that are

00:05:37,560 --> 00:05:41,909
marketable and positive towards your

00:05:40,050 --> 00:05:48,930
company you can use in your next

00:05:41,909 --> 00:05:51,210
marketing campaign as a kind of added

00:05:48,930 --> 00:05:53,729
bonus we're gonna showcase these

00:05:51,210 --> 00:05:57,120
stackdriver debugger in this talk so

00:05:53,729 --> 00:05:59,400
stackdriver does logging metrics

00:05:57,120 --> 00:06:02,610
debugging and trace the logging and

00:05:59,400 --> 00:06:05,759
metrics functionality are available to

00:06:02,610 --> 00:06:08,520
Cloud Foundry through the nozzle that's

00:06:05,759 --> 00:06:10,500
open source right now and also available

00:06:08,520 --> 00:06:13,590
on pit net if you're a pivotal Cloud

00:06:10,500 --> 00:06:15,750
Foundry user today we're going to be

00:06:13,590 --> 00:06:21,169
showcasing the debug functionality that

00:06:15,750 --> 00:06:23,520
is built into the Java build pack and

00:06:21,169 --> 00:06:25,409
kind of touched on this already but

00:06:23,520 --> 00:06:28,800
these services are all integrated

00:06:25,409 --> 00:06:31,800
through the service broker as well as a

00:06:28,800 --> 00:06:33,330
bunch of others and I'll just plug right

00:06:31,800 --> 00:06:35,849
now if some of these other services

00:06:33,330 --> 00:06:39,719
interest you in particular I think

00:06:35,849 --> 00:06:41,270
bigquery and spanner are going to be

00:06:39,719 --> 00:06:43,849
talked about in this four

00:06:41,270 --> 00:06:46,190
in the next couple hours so just stick

00:06:43,849 --> 00:06:47,840
around after this talk and get all of

00:06:46,190 --> 00:06:52,280
the Google Data Service knowledge you

00:06:47,840 --> 00:06:54,349
need all right so here's a picture of

00:06:52,280 --> 00:06:57,410
the application that we're going to demo

00:06:54,349 --> 00:06:59,810
now what it does is it goes and scrapes

00:06:57,410 --> 00:07:02,210
the subreddit aw which has pictures of

00:06:59,810 --> 00:07:05,020
cute puppies and kitties and hamsters

00:07:02,210 --> 00:07:07,220
and sweaters and stuff like that it

00:07:05,020 --> 00:07:09,590
pulls them down off of Reddit sticks

00:07:07,220 --> 00:07:11,889
them in Google Cloud storage and runs

00:07:09,590 --> 00:07:16,669
the machine learning vision API on them

00:07:11,889 --> 00:07:19,069
it saves the top tag or the top label

00:07:16,669 --> 00:07:21,310
that the vision API returns and presents

00:07:19,069 --> 00:07:25,460
that to the user along with the picture

00:07:21,310 --> 00:07:27,169
as Colleen mentioned will also have a

00:07:25,460 --> 00:07:28,580
stack driver demo in there to show a

00:07:27,169 --> 00:07:33,340
live production debugging on this

00:07:28,580 --> 00:07:35,780
application so if we look now we have no

00:07:33,340 --> 00:07:44,030
smoke and mirrors here we had no nothing

00:07:35,780 --> 00:07:48,440
in our in our storage bucket yet lost

00:07:44,030 --> 00:07:50,780
connection I was supposed to already be

00:07:48,440 --> 00:07:54,770
SSH into this VM and I forgot about it

00:07:50,780 --> 00:07:56,300
until just now I like to throw my key

00:07:54,770 --> 00:08:02,690
some curveballs just keep him on his

00:07:56,300 --> 00:08:05,479
toes all right here we are so we have

00:08:02,690 --> 00:08:08,270
the application up already pushed to

00:08:05,479 --> 00:08:10,969
Cloud Foundry there are no services

00:08:08,270 --> 00:08:13,490
bound to it at this point unless calling

00:08:10,969 --> 00:08:16,659
threw another curveball nope all right

00:08:13,490 --> 00:08:18,949
so we're gonna go ahead and create a an

00:08:16,659 --> 00:08:23,389
instance of the Google cloud storage

00:08:18,949 --> 00:08:26,120
service and so this is just you know

00:08:23,389 --> 00:08:31,930
standard Cloud Foundry cuf create

00:08:26,120 --> 00:08:31,930
service and we pass in the bucket name

00:08:33,039 --> 00:08:36,520
how can you zoom

00:08:45,899 --> 00:08:50,500
all right so when we create service we

00:08:48,490 --> 00:08:54,550
pass in the bucket name that it will

00:08:50,500 --> 00:08:56,350
create and then we bind that service to

00:08:54,550 --> 00:08:59,920
our application using the standard CF

00:08:56,350 --> 00:09:03,730
bind service and along with the bind

00:08:59,920 --> 00:09:06,790
service we include a a role so that we

00:09:03,730 --> 00:09:14,259
can both create in read the images out

00:09:06,790 --> 00:09:16,600
of the bucket all right we'll also

00:09:14,259 --> 00:09:19,839
create an instance of the stackdriver

00:09:16,600 --> 00:09:26,220
debugger and attach that to the app in

00:09:19,839 --> 00:09:35,290
the the same way and stackdriver

00:09:26,220 --> 00:09:38,560
the yeah this is a live demo this

00:09:35,290 --> 00:09:41,680
stackdriver is integrated through the

00:09:38,560 --> 00:09:44,579
Java build pack and I here that support

00:09:41,680 --> 00:09:48,939
will soon be coming for Python and

00:09:44,579 --> 00:09:50,709
go-going so you'll be able to do all the

00:09:48,939 --> 00:09:53,050
stackdriver goodness on more

00:09:50,709 --> 00:09:56,529
applications so restage the application

00:09:53,050 --> 00:09:57,819
to run it back through the back through

00:09:56,529 --> 00:10:03,699
the Java build path with the stack

00:09:57,819 --> 00:10:05,559
driver information that service bound so

00:10:03,699 --> 00:10:11,170
in the meantime we wanted to show you

00:10:05,559 --> 00:10:13,360
the video intelligence API so this video

00:10:11,170 --> 00:10:15,819
you can actually try out for yourself go

00:10:13,360 --> 00:10:18,790
to cloud.google.com slash video -

00:10:15,819 --> 00:10:22,149
intelligence this is the animals video

00:10:18,790 --> 00:10:25,059
in keeping with our theme so this video

00:10:22,149 --> 00:10:28,569
it's minute 38 seconds long and it took

00:10:25,059 --> 00:10:30,879
about 15 seconds to process we got out

00:10:28,569 --> 00:10:33,970
all of these labels and the cool thing

00:10:30,879 --> 00:10:37,170
is here they shot labels so you'll see

00:10:33,970 --> 00:10:41,220
these change as the shots change

00:10:37,170 --> 00:10:45,250
identifying exactly what is in the shot

00:10:41,220 --> 00:10:47,709
and then if you come to the API you'll

00:10:45,250 --> 00:10:51,459
get this same information with these

00:10:47,709 --> 00:10:52,329
time offsets and that as well as the

00:10:51,459 --> 00:10:56,759
confidence enter

00:10:52,329 --> 00:11:00,519
about what exactly is in the shot so

00:10:56,759 --> 00:11:02,670
pretty cool stuff I bet what restaged by

00:11:00,519 --> 00:11:02,670
now

00:11:02,730 --> 00:11:07,630
almost

00:11:04,410 --> 00:11:07,630
[Music]

00:11:17,300 --> 00:11:21,920
this one takes a few seconds to startup

00:11:20,089 --> 00:11:27,680
because it needs to run through Java

00:11:21,920 --> 00:11:31,330
build back cool so now we'll go to the

00:11:27,680 --> 00:11:34,339
live application we'll see that there is

00:11:31,330 --> 00:11:39,110
there are no images there yet I did no

00:11:34,339 --> 00:11:42,380
smoke and mirrors here we'll add in

00:11:39,110 --> 00:11:43,940
stackdriver now we'll add pulling the

00:11:42,380 --> 00:11:45,769
code from github we can see that the

00:11:43,940 --> 00:11:47,990
creating the service instance in cloud

00:11:45,769 --> 00:11:51,110
foundry lets us get to our application

00:11:47,990 --> 00:11:52,339
here and stackdriver we can import the

00:11:51,110 --> 00:11:55,329
source code for the application directly

00:11:52,339 --> 00:11:58,490
from github this is an open source

00:11:55,329 --> 00:12:01,550
example that comes along with the GCP

00:11:58,490 --> 00:12:03,380
service broker which is all open source

00:12:01,550 --> 00:12:04,430
repository so this is an example in

00:12:03,380 --> 00:12:07,880
there if you want to look at the code

00:12:04,430 --> 00:12:11,240
for yourself we'll put a breakpoint in

00:12:07,880 --> 00:12:18,950
inside the endpoint that goes out to

00:12:11,240 --> 00:12:22,579
Reddit to do the image scraping and

00:12:18,950 --> 00:12:24,200
that's it very simple a few easy steps

00:12:22,579 --> 00:12:26,899
you get to see your source code so your

00:12:24,200 --> 00:12:28,970
breakpoint wherever you like it all

00:12:26,899 --> 00:12:31,010
right so now we'll hit that endpoint to

00:12:28,970 --> 00:12:33,260
go do this great from reddit and we can

00:12:31,010 --> 00:12:37,329
see that the information pops right in

00:12:33,260 --> 00:12:40,970
here we can browse the local variables

00:12:37,329 --> 00:12:43,339
from from that breakpoint so we can dig

00:12:40,970 --> 00:12:46,550
down here and see images that are coming

00:12:43,339 --> 00:12:48,860
out of the the reddit scrape we also get

00:12:46,550 --> 00:12:52,730
a stack trace so you can see where your

00:12:48,860 --> 00:12:58,430
code was exactly right in your live

00:12:52,730 --> 00:13:00,680
production system and another cool

00:12:58,430 --> 00:13:02,690
feature is these snapshots are actually

00:13:00,680 --> 00:13:06,260
shareable so I can just copy this URL

00:13:02,690 --> 00:13:08,149
and paste it in another window or send

00:13:06,260 --> 00:13:09,430
it to another developer who understands

00:13:08,149 --> 00:13:12,470
the code better than I do

00:13:09,430 --> 00:13:16,250
and they're gonna get this same snapshot

00:13:12,470 --> 00:13:24,199
with the same local variables and stock

00:13:16,250 --> 00:13:25,520
trees available to them alright so then

00:13:24,199 --> 00:13:27,079
we'll come back to the application and

00:13:25,520 --> 00:13:28,970
go to the main page again where there is

00:13:27,079 --> 00:13:31,190
nothing there before and now we see that

00:13:28,970 --> 00:13:33,170
we have all the all the

00:13:31,190 --> 00:13:36,020
puppies and seals and whatever else is

00:13:33,170 --> 00:13:40,310
on reddit right now with the labels from

00:13:36,020 --> 00:13:43,220
the the vision API as well we'll go

00:13:40,310 --> 00:13:45,860
ahead and take a look at the storage

00:13:43,220 --> 00:13:47,930
bucket so we can see the images in there

00:13:45,860 --> 00:13:51,230
and we'll pull one down to show the some

00:13:47,930 --> 00:13:59,180
more details that the vision API pulls

00:13:51,230 --> 00:14:01,310
out of there so you can try this for

00:13:59,180 --> 00:14:03,470
yourself as well it's available on the

00:14:01,310 --> 00:14:09,920
GCP website you can just drag your image

00:14:03,470 --> 00:14:11,840
right in there alright so it runs the

00:14:09,920 --> 00:14:14,900
vision API we see the other labels the

00:14:11,840 --> 00:14:16,730
top one was was dog and has several

00:14:14,900 --> 00:14:19,730
labels there that it came up with for

00:14:16,730 --> 00:14:21,620
that image it can do a reverse image

00:14:19,730 --> 00:14:33,470
search so you can see where else on the

00:14:21,620 --> 00:14:37,730
web this image is being used once happen

00:14:33,470 --> 00:14:39,440
to all be Google searches but we have

00:14:37,730 --> 00:14:43,100
gotten we got a result this morning like

00:14:39,440 --> 00:14:44,300
from Pinterest or Twitter so just so

00:14:43,100 --> 00:14:53,270
that you know it's not restricted to

00:14:44,300 --> 00:14:56,870
Google searches we get the color palette

00:14:53,270 --> 00:14:59,420
that came out of the image we get the

00:14:56,870 --> 00:15:01,790
safe safe Nisour work and you know

00:14:59,420 --> 00:15:02,990
violence and things like that you can

00:15:01,790 --> 00:15:05,270
make sure that it's an appropriate image

00:15:02,990 --> 00:15:08,030
and then all this information is also

00:15:05,270 --> 00:15:12,530
available through the API in this JSON

00:15:08,030 --> 00:15:14,960
format that we see here and so when I

00:15:12,530 --> 00:15:17,450
was playing around with this remember I

00:15:14,960 --> 00:15:19,640
said that the vision API can do text

00:15:17,450 --> 00:15:21,380
recognition as well so I actually

00:15:19,640 --> 00:15:24,589
thought I'd be fun to run this

00:15:21,380 --> 00:15:35,140
particular image through the API just to

00:15:24,589 --> 00:15:39,650
just to be sure so that's this guy and

00:15:35,140 --> 00:15:43,490
indeed it does pick up the text Sun and

00:15:39,650 --> 00:15:45,050
sailboat it creates a guest at a

00:15:43,490 --> 00:15:47,149
document layout for you so

00:15:45,050 --> 00:15:50,570
it's identifying that these words are in

00:15:47,149 --> 00:15:53,330
distinct paragraphs as well as the the

00:15:50,570 --> 00:15:55,899
same information that you were getting

00:15:53,330 --> 00:15:55,899
before

00:16:02,770 --> 00:16:09,940
yet and so as Mikey mentioned this code

00:16:06,220 --> 00:16:12,430
is publicly available through the GCP

00:16:09,940 --> 00:16:14,709
service broker repo so feel free to

00:16:12,430 --> 00:16:15,399
download it and play around with it

00:16:14,709 --> 00:16:19,839
yourself

00:16:15,399 --> 00:16:22,060
and then I think other than that it's

00:16:19,839 --> 00:16:25,450
kind of all we had to show you so if you

00:16:22,060 --> 00:16:29,080
have any questions feel free to ask us

00:16:25,450 --> 00:16:32,080
now or after the fact and also I'll do

00:16:29,080 --> 00:16:35,080
one more plug if you found this at all

00:16:32,080 --> 00:16:37,440
interesting and all of your friends went

00:16:35,080 --> 00:16:40,990
to the Kubo talk that's at the same time

00:16:37,440 --> 00:16:44,950
we're doing this demo again tomorrow in

00:16:40,990 --> 00:16:47,290
the demo theater and the foundry at 1:40

00:16:44,950 --> 00:16:57,450
I think something like that

00:16:47,290 --> 00:16:57,450
cool thank you any questions

00:17:06,680 --> 00:17:10,250
stackdriver Oh

00:17:12,270 --> 00:17:18,569
stackdriver the question was gonna be

00:17:15,770 --> 00:17:22,470
the question is could you is it possible

00:17:18,569 --> 00:17:28,410
to at a non-public repository to the

00:17:22,470 --> 00:17:33,840
stackdriver code import yes so local

00:17:28,410 --> 00:17:37,260
files and then if you yeah any any other

00:17:33,840 --> 00:17:40,470
services that you use but so probably

00:17:37,260 --> 00:17:43,140
for you for on-prem either the source

00:17:40,470 --> 00:18:02,940
code capture or local files is gonna be

00:17:43,140 --> 00:18:04,650
the easiest way so the question was is

00:18:02,940 --> 00:18:07,170
there an iamb role that could get you

00:18:04,650 --> 00:18:10,679
project view only writes along with

00:18:07,170 --> 00:18:15,720
stackdriver view rights and the answer

00:18:10,679 --> 00:18:18,210
is I believe so um so the stackdriver

00:18:15,720 --> 00:18:21,030
debugger does have what's called a

00:18:18,210 --> 00:18:22,770
custom role I didn't show assigning that

00:18:21,030 --> 00:18:27,390
here because it's defaulted and the

00:18:22,770 --> 00:18:29,790
service broker but just so giving a user

00:18:27,390 --> 00:18:32,160
that custom role as well as just a

00:18:29,790 --> 00:18:39,830
project viewer should be a sufficient

00:18:32,160 --> 00:18:39,830
for that are there any other questions

00:18:50,370 --> 00:18:56,309
so so it the request still go through as

00:18:53,640 --> 00:18:58,529
we saw it doesn't actually stop like a

00:18:56,309 --> 00:19:00,390
debugger breakpoint what but it just

00:18:58,529 --> 00:19:17,640
captures all that information and and

00:19:00,390 --> 00:19:19,679
pulls it into spectra so sorry the is

00:19:17,640 --> 00:19:26,370
your question also about stackdriver or

00:19:19,679 --> 00:19:28,080
is about the yeah yeah so that those the

00:19:26,370 --> 00:19:31,590
same is the first question if you're

00:19:28,080 --> 00:19:34,080
using on-prem you can select your source

00:19:31,590 --> 00:19:44,669
through local files or through this

00:19:34,080 --> 00:19:46,289
source code capture if your application

00:19:44,669 --> 00:19:48,539
is not running on Google cloud platform

00:19:46,289 --> 00:19:52,320
can you still use stackdriver

00:19:48,539 --> 00:19:54,659
oh if your applications not running yeah

00:19:52,320 --> 00:19:56,880
I believe so you just need the the

00:19:54,659 --> 00:20:00,240
project create you need a project

00:19:56,880 --> 00:20:02,580
created in Google Cloud but again

00:20:00,240 --> 00:20:04,409
because this this the stackdriver

00:20:02,580 --> 00:20:05,909
integration is built into the build pack

00:20:04,409 --> 00:20:09,210
and the service broker both of which are

00:20:05,909 --> 00:20:13,610
cloud at agnostic you should be totally

00:20:09,210 --> 00:20:13,610
fine on any any service provider

00:20:22,509 --> 00:20:26,360
performance impacts that's a fantastic

00:20:24,769 --> 00:20:31,090
question that honestly I don't know the

00:20:26,360 --> 00:20:36,649
answer to it's streaming data basically

00:20:31,090 --> 00:20:42,139
so I want to say that it shouldn't be

00:20:36,649 --> 00:20:44,559
too big of an impact but then do you

00:20:42,139 --> 00:20:44,559
have an answer

00:21:24,710 --> 00:21:29,899
anybody else awesome well thank you for

00:21:29,390 --> 00:21:31,700
coming

00:21:29,899 --> 00:21:34,100
like I said stick around if you're

00:21:31,700 --> 00:21:36,230
interested in any of the other Google

00:21:34,100 --> 00:21:36,590
data services and we'll be here to talk

00:21:36,230 --> 00:21:38,700
to you

00:21:36,590 --> 00:21:41,459
Thanks thank you

00:21:38,700 --> 00:21:41,459

YouTube URL: https://www.youtube.com/watch?v=YB7zd6IRA-U


