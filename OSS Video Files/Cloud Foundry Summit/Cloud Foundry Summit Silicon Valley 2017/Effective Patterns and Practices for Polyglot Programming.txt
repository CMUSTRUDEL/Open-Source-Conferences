Title: Effective Patterns and Practices for Polyglot Programming
Publication date: 2017-06-22
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	Effective Patterns and Practices for Polyglot Programming [A] - Martin Kreibe, ECS Team    

Polyglot programming is not just using multiple programming languages, it also involves multiple frameworks and multiple services.


Whether we choose it or not, as technologies evolve, polyglot programming is already there in every corporate environment. Best thing to do is to understand it better and make the right decisions to choose the right programming language/framework/service based on the problem at hand. 

We will look at 
• What is polyglot programming? 
• Risks of polyglot programming? What are the trade-offs?
• What are the patterns and anti-patterns you need to watch out for when you are using it? 

Martin Kreibe
ECS Team
Sr Cloud Architect
Denver, CO
Martin is a Senior Cloud Architect who is constantly striving to improve application and business processes. He has worked in a variety of fields, from manufacturing to finance to startups, and an on countless greenfield and modernization projects. When leading and advising teams, Martin always has an eye on the current and future needs of the user and business. As a natural polyglot, Martin has constantly switched from C++, C#, Java, Golang and JavaScript to suit the application, needs of the team and the speed to market.
Captions: 
	00:00:00,030 --> 00:00:04,560
anyways thank you for surviving

00:00:01,949 --> 00:00:06,720
throughout today looks like there's more

00:00:04,560 --> 00:00:11,070
than I was expecting I was expecting

00:00:06,720 --> 00:00:12,840
like two people here that's cool anyway

00:00:11,070 --> 00:00:14,759
first thing I wanted to say is I want to

00:00:12,840 --> 00:00:20,640
thank my co-presenter who's actually not

00:00:14,759 --> 00:00:22,380
here she she ended up being somewhere

00:00:20,640 --> 00:00:25,109
else in another continent so that was

00:00:22,380 --> 00:00:27,840
interesting so this was actually her

00:00:25,109 --> 00:00:32,730
idea and her brainchild but I'll try to

00:00:27,840 --> 00:00:36,239
keep it in her spirits so anyway to

00:00:32,730 --> 00:00:38,969
myself I'm actually a bilingual person I

00:00:36,239 --> 00:00:41,790
look around and I actually see a lot of

00:00:38,969 --> 00:00:46,230
bilingual people or trilingual or how

00:00:41,790 --> 00:00:48,329
many lingual people were where I tend to

00:00:46,230 --> 00:00:51,510
do work and I think that that's a really

00:00:48,329 --> 00:00:54,360
big valuable asset that we have because

00:00:51,510 --> 00:00:57,449
it changes your perspective right I also

00:00:54,360 --> 00:01:00,780
know a lot of computer languages from

00:00:57,449 --> 00:01:03,930
ADA to XML like really everything in

00:01:00,780 --> 00:01:07,680
between and I think that's valuable for

00:01:03,930 --> 00:01:09,930
any developer to have and I actually did

00:01:07,680 --> 00:01:12,090
invent a language which I would say that

00:01:09,930 --> 00:01:15,600
everyone should try to do but it's

00:01:12,090 --> 00:01:19,530
really a tough thing and if you're going

00:01:15,600 --> 00:01:23,640
to do it good on you but it's a it's a

00:01:19,530 --> 00:01:27,600
very challenging effort all right so

00:01:23,640 --> 00:01:29,340
what is a polyglot a polyglot is

00:01:27,600 --> 00:01:31,619
somebody who can master multiple

00:01:29,340 --> 00:01:33,750
languages and it's really somebody who

00:01:31,619 --> 00:01:35,610
can kind of dive in from one language in

00:01:33,750 --> 00:01:38,189
one perspective into another perspective

00:01:35,610 --> 00:01:41,100
and it doesn't really just mean

00:01:38,189 --> 00:01:42,869
programming languages it really also

00:01:41,100 --> 00:01:45,600
means things like back-end services

00:01:42,869 --> 00:01:48,750
right so if you have a sequel server or

00:01:45,600 --> 00:01:50,549
a Redis cache or something you know what

00:01:48,750 --> 00:01:53,970
that means and you actually have a

00:01:50,549 --> 00:01:55,560
perspective of why is this important or

00:01:53,970 --> 00:01:57,360
not important

00:01:55,560 --> 00:01:59,729
the other thing is that's weird about

00:01:57,360 --> 00:02:01,860
programming languages is if if anyone if

00:01:59,729 --> 00:02:03,810
you have taken any comp side courses

00:02:01,860 --> 00:02:05,009
when it comes to language theory you

00:02:03,810 --> 00:02:06,780
know that one language is actually

00:02:05,009 --> 00:02:09,770
equivalent to any other languages as

00:02:06,780 --> 00:02:13,620
long as it has some sort of constraints

00:02:09,770 --> 00:02:13,800
and in general the programming language

00:02:13,620 --> 00:02:15,660
is

00:02:13,800 --> 00:02:17,640
that we deal with really do follow these

00:02:15,660 --> 00:02:20,040
rules so it's kind of strange that we

00:02:17,640 --> 00:02:22,590
kind of intuitively know that this is a

00:02:20,040 --> 00:02:23,820
possibility but we don't utilize it we

00:02:22,590 --> 00:02:26,760
don't go out there and actually try to

00:02:23,820 --> 00:02:28,980
make it so that people you know we don't

00:02:26,760 --> 00:02:32,640
force Java developers to do dotnet

00:02:28,980 --> 00:02:34,470
things and why is that it's it's pretty

00:02:32,640 --> 00:02:39,180
interesting but I think that it there's

00:02:34,470 --> 00:02:43,080
definitely power in that so why do we do

00:02:39,180 --> 00:02:44,940
polyglot or why is it important again

00:02:43,080 --> 00:02:47,190
it's the different perspectives the

00:02:44,940 --> 00:02:51,840
different systems that are involved I

00:02:47,190 --> 00:02:54,120
find that it's it's a better a better

00:02:51,840 --> 00:02:56,250
use of our intellectual capacity when we

00:02:54,120 --> 00:03:00,240
can actually find a maybe this is better

00:02:56,250 --> 00:03:01,410
done in one language versus another and

00:03:00,240 --> 00:03:03,360
it's it's a good way to actually

00:03:01,410 --> 00:03:05,580
communicate between your own teams right

00:03:03,360 --> 00:03:07,020
so if you have a Java developer or

00:03:05,580 --> 00:03:08,640
dotnet developer you might have

00:03:07,020 --> 00:03:11,780
different perspectives on how to talk to

00:03:08,640 --> 00:03:15,210
them if you are a angularjs developer

00:03:11,780 --> 00:03:17,070
and having at least a glancing

00:03:15,210 --> 00:03:19,440
understanding of what those people are

00:03:17,070 --> 00:03:21,420
trying to do and what they're capable or

00:03:19,440 --> 00:03:27,080
their systems are capable of doing is

00:03:21,420 --> 00:03:29,520
pretty valuable all right different

00:03:27,080 --> 00:03:31,160
perspectives so this is kind of the

00:03:29,520 --> 00:03:33,720
interesting thing I've seen so many

00:03:31,160 --> 00:03:35,100
organizations that have leadership at

00:03:33,720 --> 00:03:39,000
the top that say you know what we need

00:03:35,100 --> 00:03:40,770
Java developers and that's kind of an

00:03:39,000 --> 00:03:43,140
interesting topic to me because I don't

00:03:40,770 --> 00:03:45,360
think I look at a developer and say you

00:03:43,140 --> 00:03:46,850
know what you're better at a Java being

00:03:45,360 --> 00:03:49,470
in Java developer than a.net developer

00:03:46,850 --> 00:03:51,030
it's kind of an arbitrary conversation

00:03:49,470 --> 00:03:53,730
and I don't think that the business

00:03:51,030 --> 00:03:56,250
leadership should necessarily be driving

00:03:53,730 --> 00:03:58,170
hey I just want this platform or just

00:03:56,250 --> 00:03:59,850
want this because it means that you

00:03:58,170 --> 00:04:03,239
can't really adopt a change from that

00:03:59,850 --> 00:04:06,420
top level if you're a developer I don't

00:04:03,239 --> 00:04:09,930
know I don't even think that you can be

00:04:06,420 --> 00:04:11,670
a non polyglot especially now maybe if

00:04:09,930 --> 00:04:13,560
you're a COBOL developer doing mainframe

00:04:11,670 --> 00:04:18,269
stuff but that's kind of a dying breed

00:04:13,560 --> 00:04:20,930
right now and architects I see it all

00:04:18,269 --> 00:04:24,260
the time these really beautiful drawings

00:04:20,930 --> 00:04:26,280
actually saw it from our room sponsored

00:04:24,260 --> 00:04:27,560
yesterday in their keynote this

00:04:26,280 --> 00:04:29,389
beautiful drawing of

00:04:27,560 --> 00:04:31,040
all these nice little boxes of how

00:04:29,389 --> 00:04:33,470
everything's supposed to interact and

00:04:31,040 --> 00:04:36,380
it's really strange because I never see

00:04:33,470 --> 00:04:38,060
software that's that beautiful I I see

00:04:36,380 --> 00:04:41,630
software that's kind of cobbled together

00:04:38,060 --> 00:04:43,790
and kind of you know it works we want to

00:04:41,630 --> 00:04:46,970
make it better and I think that the

00:04:43,790 --> 00:04:48,950
architects really are you know kind of

00:04:46,970 --> 00:04:51,770
fooling us when they go out there and

00:04:48,950 --> 00:04:54,470
say this is how the system is going to

00:04:51,770 --> 00:04:56,480
work because it never comes out that way

00:04:54,470 --> 00:04:59,300
it's it's never a recipe we're not

00:04:56,480 --> 00:05:01,160
making cakes here we don't take a recipe

00:04:59,300 --> 00:05:03,290
and just make the same thing over and

00:05:01,160 --> 00:05:06,650
over again we have to change and adapt

00:05:03,290 --> 00:05:10,360
depending on our business needs the last

00:05:06,650 --> 00:05:14,360
thing is is the operators seem to be a

00:05:10,360 --> 00:05:15,889
forgotten entity within polyglot right

00:05:14,360 --> 00:05:17,900
these these are the people that run this

00:05:15,889 --> 00:05:19,610
application day to day if you're not

00:05:17,900 --> 00:05:22,490
going up to them and saying hey by the

00:05:19,610 --> 00:05:25,940
way I'm writing this Java application

00:05:22,490 --> 00:05:27,800
and I would like it to do XYZ you know

00:05:25,940 --> 00:05:30,530
maybe the operators don't know what that

00:05:27,800 --> 00:05:32,870
means or maybe you know it's exotic to

00:05:30,530 --> 00:05:35,289
them and you should bring them in so you

00:05:32,870 --> 00:05:38,840
know when you're thinking about a

00:05:35,289 --> 00:05:41,229
language to use think about those those

00:05:38,840 --> 00:05:44,570
guys too

00:05:41,229 --> 00:05:46,789
so who here is a polyglot already right

00:05:44,570 --> 00:05:48,860
who thinks they are well in

00:05:46,789 --> 00:05:52,340
congratulations right we're all we're

00:05:48,860 --> 00:05:54,740
done here what are we doing here the

00:05:52,340 --> 00:05:57,080
point is is that we are we should

00:05:54,740 --> 00:05:59,000
realize that we are polyglots we always

00:05:57,080 --> 00:06:00,770
have sequel databases or some other

00:05:59,000 --> 00:06:03,039
exotic database that has a different

00:06:00,770 --> 00:06:04,850
language or a CSS stylesheet or

00:06:03,039 --> 00:06:06,919
something that's in a different language

00:06:04,850 --> 00:06:09,169
and that's good once you start realizing

00:06:06,919 --> 00:06:10,400
that they these are different things

00:06:09,169 --> 00:06:13,039
that's good

00:06:10,400 --> 00:06:14,780
well let's break it down so we got this

00:06:13,039 --> 00:06:20,000
application right this is a simple

00:06:14,780 --> 00:06:22,760
application has an angular front-end may

00:06:20,000 --> 00:06:26,150
be a spring boot for the business layer

00:06:22,760 --> 00:06:28,729
and to facilitate all this we've got

00:06:26,150 --> 00:06:30,830
bash something to facilitate that but

00:06:28,729 --> 00:06:32,510
you know we're actually not done we

00:06:30,830 --> 00:06:35,539
can't go out there and say hey we got a

00:06:32,510 --> 00:06:37,669
polyglot system here because we also

00:06:35,539 --> 00:06:39,650
have other services underneath right

00:06:37,669 --> 00:06:41,180
we've got our data services with sequel

00:06:39,650 --> 00:06:43,340
maybe it's got a JSON

00:06:41,180 --> 00:06:44,960
store or something like that and then

00:06:43,340 --> 00:06:46,730
the infrastructure you know we're a

00:06:44,960 --> 00:06:49,340
cloud foundry so let's talk about Basha

00:06:46,730 --> 00:06:52,820
a little bit so we might have other

00:06:49,340 --> 00:06:56,540
infrastructure needs then we also have

00:06:52,820 --> 00:07:00,050
these things like CI DC CI CD pipelines

00:06:56,540 --> 00:07:02,890
and maybe it's got build system there so

00:07:00,050 --> 00:07:06,380
it's using maven so we actually have

00:07:02,890 --> 00:07:09,350
really a whole diverse set of languages

00:07:06,380 --> 00:07:11,180
that we are using every day and they're

00:07:09,350 --> 00:07:15,080
all different they all do different

00:07:11,180 --> 00:07:17,420
weird things and we we want to make sure

00:07:15,080 --> 00:07:21,830
that we're enabling our developers to

00:07:17,420 --> 00:07:25,220
have the freedom to do that so again

00:07:21,830 --> 00:07:27,760
here we have multiple layers it gets it

00:07:25,220 --> 00:07:30,020
can get messy pretty quickly

00:07:27,760 --> 00:07:32,030
so why do we use different languages

00:07:30,020 --> 00:07:34,310
well we use them for obvious reasons

00:07:32,030 --> 00:07:37,250
right they're different they do

00:07:34,310 --> 00:07:39,520
different things so it's better to use

00:07:37,250 --> 00:07:42,200
things that are in certain domains

00:07:39,520 --> 00:07:44,350
versus other domains right we want to do

00:07:42,200 --> 00:07:48,080
a machine learning algorithm in our

00:07:44,350 --> 00:07:50,210
verses and JavaScript seems intuitive

00:07:48,080 --> 00:07:52,880
right well I don't want to go out there

00:07:50,210 --> 00:07:55,490
and make an octave website that just

00:07:52,880 --> 00:07:57,020
seems arbitrary and wrong these

00:07:55,490 --> 00:08:00,140
languages were developed for very

00:07:57,020 --> 00:08:02,660
specific use cases and if we use them

00:08:00,140 --> 00:08:04,460
correctly they're incredibly powerful if

00:08:02,660 --> 00:08:07,370
we don't use them correctly with them we

00:08:04,460 --> 00:08:09,080
get the spaghetti mess of stuff that

00:08:07,370 --> 00:08:13,220
we're not really satisfied with and we

00:08:09,080 --> 00:08:15,200
cart kind of go around in circles but we

00:08:13,220 --> 00:08:16,850
can also make any language better than

00:08:15,200 --> 00:08:20,960
another one right so the classic example

00:08:16,850 --> 00:08:24,170
here is C++ if anyone uses C++ who uses

00:08:20,960 --> 00:08:27,980
boost probably anyone who does anything

00:08:24,170 --> 00:08:29,660
in production right but you know this

00:08:27,980 --> 00:08:31,880
whole thing of programming is actually

00:08:29,660 --> 00:08:34,280
fairly new to humanity it's only like a

00:08:31,880 --> 00:08:36,350
50 year a hundred year endeavor for us

00:08:34,280 --> 00:08:40,400
so we're still as humans still pretty

00:08:36,350 --> 00:08:41,780
new at this and the future is unknown at

00:08:40,400 --> 00:08:43,880
this point in time you know we have

00:08:41,780 --> 00:08:45,740
machine learning coming up maybe we'll

00:08:43,880 --> 00:08:48,080
create a machine learning language

00:08:45,740 --> 00:08:50,630
coming up there and as a developer you'd

00:08:48,080 --> 00:08:52,550
be like excited but then fearful of it

00:08:50,630 --> 00:08:53,170
but we have to make sure that we're

00:08:52,550 --> 00:08:56,620
prepared for

00:08:53,170 --> 00:09:01,570
that and that's a it's going to be

00:08:56,620 --> 00:09:04,570
interesting so let's talk a little bit

00:09:01,570 --> 00:09:06,339
about how do different languages

00:09:04,570 --> 00:09:08,920
interact right and it's kind of obvious

00:09:06,339 --> 00:09:11,800
you know we all kind of realize this we

00:09:08,920 --> 00:09:14,320
use rest services and whatnot and we use

00:09:11,800 --> 00:09:16,959
those interfaces as the conduits to

00:09:14,320 --> 00:09:19,480
change these are.this contracts that we

00:09:16,959 --> 00:09:23,529
negotiate between ourselves that go out

00:09:19,480 --> 00:09:24,910
there and say this is how my system is

00:09:23,529 --> 00:09:27,160
going to interact with the world and

00:09:24,910 --> 00:09:29,560
it's really important and it's so

00:09:27,160 --> 00:09:31,120
trivial at the same time right we go out

00:09:29,560 --> 00:09:34,720
there and we say hey this is how my

00:09:31,120 --> 00:09:36,730
services are but we don't talk about how

00:09:34,720 --> 00:09:37,930
the client is going to or we might talk

00:09:36,730 --> 00:09:40,149
about how the client is going to

00:09:37,930 --> 00:09:41,920
interact with it but we don't understand

00:09:40,149 --> 00:09:43,389
necessarily all the clients that are

00:09:41,920 --> 00:09:45,699
going to interact with the system we

00:09:43,389 --> 00:09:48,730
just say ok here's one here's another

00:09:45,699 --> 00:09:52,389
and then we force people to go through

00:09:48,730 --> 00:09:53,860
that one channel and that's ok but it's

00:09:52,389 --> 00:09:58,329
not always the answer

00:09:53,860 --> 00:10:00,430
right so let's talk about when you want

00:09:58,329 --> 00:10:02,279
to change something right so imagine you

00:10:00,430 --> 00:10:05,050
have a bug with your interface itself

00:10:02,279 --> 00:10:07,029
right we want to do this thing called an

00:10:05,050 --> 00:10:09,339
any corruption layer right so any

00:10:07,029 --> 00:10:13,540
corruption layer is just basically a

00:10:09,339 --> 00:10:15,190
layer to help you change right so the

00:10:13,540 --> 00:10:16,899
first thing we do within an e corruption

00:10:15,190 --> 00:10:19,000
layer is we go out there and we we put

00:10:16,899 --> 00:10:20,800
something in between this right and both

00:10:19,000 --> 00:10:21,370
sides can understand how this thing

00:10:20,800 --> 00:10:24,579
works

00:10:21,370 --> 00:10:26,170
so it's you know your interface is going

00:10:24,579 --> 00:10:28,300
in the same and it's coming out the same

00:10:26,170 --> 00:10:30,760
just like it was before but you put that

00:10:28,300 --> 00:10:33,399
layer in there this is where interfaces

00:10:30,760 --> 00:10:35,279
really can help you out because the next

00:10:33,399 --> 00:10:38,410
thing you can do is start routing your

00:10:35,279 --> 00:10:40,600
calls into another place right into

00:10:38,410 --> 00:10:44,529
maybe an upgraded version of your

00:10:40,600 --> 00:10:46,750
application and it seems again so

00:10:44,529 --> 00:10:49,060
intuitive but people don't use the power

00:10:46,750 --> 00:10:50,920
of you know Cloud Foundry or these other

00:10:49,060 --> 00:10:53,440
applications to actually create that

00:10:50,920 --> 00:10:56,500
shim and then we can go out there and

00:10:53,440 --> 00:11:00,279
get rid of that any corruption layer and

00:10:56,500 --> 00:11:02,079
just connect to the other services so

00:11:00,279 --> 00:11:05,860
this allows us to actually go out there

00:11:02,079 --> 00:11:06,940
and do massive changes to something that

00:11:05,860 --> 00:11:11,170
we used to say

00:11:06,940 --> 00:11:12,700
steadfast unmoving unchanging we can

00:11:11,170 --> 00:11:14,080
actually go out there and change it

00:11:12,700 --> 00:11:18,490
which is something that a lot of

00:11:14,080 --> 00:11:20,590
companies feel are paralyzing them so

00:11:18,490 --> 00:11:23,470
you know that's one pattern that's

00:11:20,590 --> 00:11:29,110
really been effective and I think it's

00:11:23,470 --> 00:11:31,450
been underutilized a lot of places the

00:11:29,110 --> 00:11:33,730
other thing is is breaking up a monolith

00:11:31,450 --> 00:11:37,090
this is probably everybody's done this a

00:11:33,730 --> 00:11:40,000
billion times right but okay we're in a

00:11:37,090 --> 00:11:42,640
polyglot talk here how do we break up a

00:11:40,000 --> 00:11:44,500
monolith and why it is polyglot even

00:11:42,640 --> 00:11:46,660
matter in this conversation right and

00:11:44,500 --> 00:11:48,160
the thing is is what we can do is we can

00:11:46,660 --> 00:11:49,480
find the actual heart of this

00:11:48,160 --> 00:11:51,910
application and I've done this at a

00:11:49,480 --> 00:11:53,980
client site where I've figured out okay

00:11:51,910 --> 00:11:55,180
this is the central piece this is the

00:11:53,980 --> 00:11:57,760
thing that connects everything together

00:11:55,180 --> 00:11:59,980
and you really rip out the heart of this

00:11:57,760 --> 00:12:02,680
thing and change the language it sounds

00:11:59,980 --> 00:12:05,110
weird but it's very empowering to do

00:12:02,680 --> 00:12:08,230
because what that does is it basically

00:12:05,110 --> 00:12:10,090
takes this core feature changes the

00:12:08,230 --> 00:12:12,970
languages and now everybody has to

00:12:10,090 --> 00:12:14,860
figure out what to do right and it seems

00:12:12,970 --> 00:12:17,590
weird but it's a very big catalyst for

00:12:14,860 --> 00:12:19,360
change so what we have is we eventually

00:12:17,590 --> 00:12:21,850
go out there and we take that heart out

00:12:19,360 --> 00:12:24,310
and then we can start fragmenting out

00:12:21,850 --> 00:12:27,880
those little pieces in whatever language

00:12:24,310 --> 00:12:31,170
we choose right so in my particular case

00:12:27,880 --> 00:12:34,630
I I took a dotnet application and

00:12:31,170 --> 00:12:38,920
changed that heart into golang very

00:12:34,630 --> 00:12:40,900
exotic thing for that company and it it

00:12:38,920 --> 00:12:42,910
was the catalyst to change in fact I

00:12:40,900 --> 00:12:44,320
talked to them today and they said yeah

00:12:42,910 --> 00:12:46,030
you know what this thing is actually

00:12:44,320 --> 00:12:52,750
moving forward a lot faster than we were

00:12:46,030 --> 00:12:55,120
expecting so being a polyglot all it is

00:12:52,750 --> 00:12:56,460
is it gives you more tools in your

00:12:55,120 --> 00:13:00,100
toolbox

00:12:56,460 --> 00:13:02,050
and make sure that you're make sure that

00:13:00,100 --> 00:13:03,820
you're understanding and conveying your

00:13:02,050 --> 00:13:05,560
point a little bit better because you

00:13:03,820 --> 00:13:09,150
have a perspective of maybe somebody

00:13:05,560 --> 00:13:11,680
else's understanding of the world and

00:13:09,150 --> 00:13:14,140
quite honestly with the pace of change

00:13:11,680 --> 00:13:17,020
in pace of technology it can allow you

00:13:14,140 --> 00:13:20,170
to pick and choose the things that make

00:13:17,020 --> 00:13:25,209
sense for you that enable you to move

00:13:20,170 --> 00:13:26,620
and with that because I'm blowing

00:13:25,209 --> 00:13:29,589
through these pretty questions quickly

00:13:26,620 --> 00:13:34,089
adds it that's all I got so if there's

00:13:29,589 --> 00:13:43,509
any questions feel free I have a

00:13:34,089 --> 00:13:54,490
microphone oh here you go

00:13:43,509 --> 00:13:56,680
any questions sort of thing do you

00:13:54,490 --> 00:13:59,259
suggest that a big legacy monolithic

00:13:56,680 --> 00:14:01,060
application it should be it should be

00:13:59,259 --> 00:14:02,740
translated into multiple type of

00:14:01,060 --> 00:14:04,839
languages means the part of it didn't go

00:14:02,740 --> 00:14:07,750
like part of 15 note here's part of it

00:14:04,839 --> 00:14:11,170
in Java easy - is it pragmatic and

00:14:07,750 --> 00:14:13,089
really giving values that sort of thing

00:14:11,170 --> 00:14:15,610
okay so the question really comes down

00:14:13,089 --> 00:14:18,040
to is is what I suggest doing this right

00:14:15,610 --> 00:14:20,380
like this and the answer is for me in

00:14:18,040 --> 00:14:22,000
this particular case yes the team was

00:14:20,380 --> 00:14:23,589
first of all energized because they were

00:14:22,000 --> 00:14:25,990
learning something new so that's really

00:14:23,589 --> 00:14:28,630
like the human aspect of it right

00:14:25,990 --> 00:14:31,990
the second aspect of it is is we were

00:14:28,630 --> 00:14:35,139
converting something from IBM BPM which

00:14:31,990 --> 00:14:38,589
is a very massive application and we

00:14:35,139 --> 00:14:40,810
took out the actual workflow engine part

00:14:38,589 --> 00:14:43,569
of that and made just our own custom

00:14:40,810 --> 00:14:45,699
thing to do that so that's the

00:14:43,569 --> 00:14:47,139
background of what we did and we used

00:14:45,699 --> 00:14:49,290
golang because we could actually get

00:14:47,139 --> 00:14:52,870
that up and running into Cloud Foundry

00:14:49,290 --> 00:14:56,949
within two weeks we could get that court

00:14:52,870 --> 00:14:58,839
done that said you know do I think that

00:14:56,949 --> 00:15:01,240
we should always just change languages

00:14:58,839 --> 00:15:03,130
no I think you it's we have to be

00:15:01,240 --> 00:15:05,380
pragmatic there right we have to go out

00:15:03,130 --> 00:15:07,810
there and say do does the team have both

00:15:05,380 --> 00:15:11,050
the energy and the discipline to do it

00:15:07,810 --> 00:15:12,420
right is it a fit is this a nodejs

00:15:11,050 --> 00:15:16,620
application doing machine learning

00:15:12,420 --> 00:15:19,569
probably not a good fit but in general I

00:15:16,620 --> 00:15:21,370
would say yeah like shake it up a little

00:15:19,569 --> 00:15:23,639
bit you know if you can get the team to

00:15:21,370 --> 00:15:23,639
do it

00:15:24,930 --> 00:15:29,490
a synchronous system portion which you

00:15:27,540 --> 00:15:31,410
can revert from the a synchronicity of

00:15:29,490 --> 00:15:33,600
the code and then some other portion

00:15:31,410 --> 00:15:35,730
which has very complicated logic so

00:15:33,600 --> 00:15:37,980
retain it in Java and other portion

00:15:35,730 --> 00:15:40,470
which might benefit from asynchronous

00:15:37,980 --> 00:15:41,820
address call converted to node.js and

00:15:40,470 --> 00:15:43,649
that sort of thing breaking it down and

00:15:41,820 --> 00:15:46,200
that's absolutely use the right tool for

00:15:43,649 --> 00:15:47,670
the right job right so you know when you

00:15:46,200 --> 00:15:51,149
only have a hammer everything looks like

00:15:47,670 --> 00:15:54,420
a nail so I'm telling you yeah if you

00:15:51,149 --> 00:15:57,029
have something that fits more of a you

00:15:54,420 --> 00:16:00,089
know front-end aspect of it definitely

00:15:57,029 --> 00:16:03,000
consider node that's a perfect example

00:16:00,089 --> 00:16:05,880
but that requires a very high level of

00:16:03,000 --> 00:16:07,410
maturity of the architects and some sort

00:16:05,880 --> 00:16:10,200
of hands-on architect which who knows

00:16:07,410 --> 00:16:11,730
the different language and their actual

00:16:10,200 --> 00:16:14,100
benefits and that sort of thing

00:16:11,730 --> 00:16:16,170
absolutely you can't do this with people

00:16:14,100 --> 00:16:17,490
like novices right out of school like

00:16:16,170 --> 00:16:21,450
you have to go out there and have some

00:16:17,490 --> 00:16:22,830
competence in it that said when you even

00:16:21,450 --> 00:16:25,260
if you don't have competence at least

00:16:22,830 --> 00:16:27,600
have the discipline to do it right the

00:16:25,260 --> 00:16:29,790
biggest problem I have is that we we try

00:16:27,600 --> 00:16:33,630
to adapt too quickly sometimes and

00:16:29,790 --> 00:16:40,350
that's great but if you kind of lose

00:16:33,630 --> 00:16:42,589
your way about you that's a problem in

00:16:40,350 --> 00:16:42,589
the back

00:16:48,080 --> 00:16:54,240
so I understand the concept of polyglot

00:16:50,700 --> 00:16:57,380
but but having but in an enterprise

00:16:54,240 --> 00:16:59,940
having too many people who know

00:16:57,380 --> 00:17:03,650
different languages you know it didn't

00:16:59,940 --> 00:17:07,290
become sort of a management nightmare

00:17:03,650 --> 00:17:09,089
why not you know you just put api's over

00:17:07,290 --> 00:17:10,770
what we have so that we have a

00:17:09,089 --> 00:17:14,640
standardized way to access the systems

00:17:10,770 --> 00:17:16,860
that the enterprise Aldi has ok so if I

00:17:14,640 --> 00:17:18,480
understand the question is is becomes a

00:17:16,860 --> 00:17:21,000
management nightmare just to have the

00:17:18,480 --> 00:17:22,680
various different languages I actually

00:17:21,000 --> 00:17:24,510
would disagree right we have a lot of

00:17:22,680 --> 00:17:28,319
different reports that we generate for

00:17:24,510 --> 00:17:30,480
various applications or various parts of

00:17:28,319 --> 00:17:31,920
the company it really comes down to

00:17:30,480 --> 00:17:35,310
using the right tool for the right job

00:17:31,920 --> 00:17:36,660
if you're a very like very crud oriented

00:17:35,310 --> 00:17:39,390
organization where you have just

00:17:36,660 --> 00:17:40,920
database transactions doing that you

00:17:39,390 --> 00:17:43,920
might not have a very diverse background

00:17:40,920 --> 00:17:47,520
in various different languages it might

00:17:43,920 --> 00:17:49,830
not make sense but to go out there and

00:17:47,520 --> 00:17:52,050
not enable you to have tools and lock

00:17:49,830 --> 00:17:53,640
you into one platform versus the other I

00:17:52,050 --> 00:17:55,230
think you're you're putting the

00:17:53,640 --> 00:17:56,700
organisation at risk right because

00:17:55,230 --> 00:17:59,580
there's two aspects of it there's the

00:17:56,700 --> 00:18:02,160
human aspect of it which is can I find

00:17:59,580 --> 00:18:03,630
Java developers to do this right and if

00:18:02,160 --> 00:18:05,220
you go in the marketplace you might not

00:18:03,630 --> 00:18:08,100
be able to find those people right

00:18:05,220 --> 00:18:12,060
finding a COBOL developer is pretty hard

00:18:08,100 --> 00:18:14,700
task nowadays but that said all right

00:18:12,060 --> 00:18:17,670
you know you want to somewhat

00:18:14,700 --> 00:18:20,910
standardized but let the developers be

00:18:17,670 --> 00:18:22,740
free to choose whatever they in their

00:18:20,910 --> 00:18:25,470
professional opinion they believe is the

00:18:22,740 --> 00:18:27,930
right way to go but if you look at it in

00:18:25,470 --> 00:18:29,760
a different way companies didn't have

00:18:27,930 --> 00:18:32,880
multiple projects happen yet model at

00:18:29,760 --> 00:18:35,580
the same time and there may be multiple

00:18:32,880 --> 00:18:38,820
projects who need the same resources who

00:18:35,580 --> 00:18:42,150
know a certain tool that would create a

00:18:38,820 --> 00:18:43,440
bottleneck within an enterprise so and

00:18:42,150 --> 00:18:45,930
that would actually slow down the

00:18:43,440 --> 00:18:48,180
enterprise considerably then giving the

00:18:45,930 --> 00:18:50,400
benefits so and so what my point was

00:18:48,180 --> 00:18:52,470
that maybe having an API or or what we

00:18:50,400 --> 00:18:54,930
have at least if the standardized way to

00:18:52,470 --> 00:18:56,280
interact with the system and even say

00:18:54,930 --> 00:18:59,490
two years down the line if the system

00:18:56,280 --> 00:19:00,350
goes away that API in that API needn't

00:18:59,490 --> 00:19:01,910
change

00:19:00,350 --> 00:19:04,730
does its is it provides you with the

00:19:01,910 --> 00:19:08,870
Tonto model to access us as a certain

00:19:04,730 --> 00:19:11,120
system yeah so all of the rules for like

00:19:08,870 --> 00:19:13,820
doing micro services and doing specific

00:19:11,120 --> 00:19:16,010
things they still apply right it's just

00:19:13,820 --> 00:19:18,140
what is that what is the language that

00:19:16,010 --> 00:19:20,059
that API is built-in right that's really

00:19:18,140 --> 00:19:24,650
what we're kind of talking about we're

00:19:20,059 --> 00:19:27,620
not talking about you know that having

00:19:24,650 --> 00:19:30,020
the resources to build something is a

00:19:27,620 --> 00:19:31,760
much different conversation than going

00:19:30,020 --> 00:19:34,340
out there and saying what is it built-in

00:19:31,760 --> 00:19:36,590
right if you don't have the resources to

00:19:34,340 --> 00:19:39,140
build applications or maintain them the

00:19:36,590 --> 00:19:41,360
way they are then that's a risk right

00:19:39,140 --> 00:19:43,159
having it so that your developers can

00:19:41,360 --> 00:19:45,559
jump into this code line or this code

00:19:43,159 --> 00:19:48,710
line or this code line is how to

00:19:45,559 --> 00:19:50,360
mitigate that risk so as a developer I

00:19:48,710 --> 00:19:52,250
would say or a company I would say I

00:19:50,360 --> 00:19:54,559
would want all of my developers to be a

00:19:52,250 --> 00:19:55,820
little bit more polyglot versus going

00:19:54,559 --> 00:19:58,730
out there and saying hey you know what

00:19:55,820 --> 00:20:01,429
I've got this API that's Java based sure

00:19:58,730 --> 00:20:04,669
it might be screaming fast and perfect

00:20:01,429 --> 00:20:06,409
for the application but polyglot isn't

00:20:04,669 --> 00:20:09,020
just about the one application it's

00:20:06,409 --> 00:20:11,090
about the entire ecosystem and can you

00:20:09,020 --> 00:20:13,940
Kate get those resources and shift them

00:20:11,090 --> 00:20:20,600
and move those humans to to fulfill

00:20:13,940 --> 00:20:24,169
those tasks I have a question on like

00:20:20,600 --> 00:20:26,659
how DevOps should be handling this

00:20:24,169 --> 00:20:30,260
situation because I can give an example

00:20:26,659 --> 00:20:32,000
like we were breaking down a monolith

00:20:30,260 --> 00:20:34,970
and we were trying to do one of the

00:20:32,000 --> 00:20:37,340
component in go and DevOps came back and

00:20:34,970 --> 00:20:40,400
said hey you cannot do go we cannot you

00:20:37,340 --> 00:20:42,470
cannot maintain go programs or go

00:20:40,400 --> 00:20:46,520
applications we can only do springboard

00:20:42,470 --> 00:20:50,390
and node so how do we handle this kind

00:20:46,520 --> 00:20:52,220
of a situation in the enterprise I'm

00:20:50,390 --> 00:20:54,590
actually if I could speak to that one

00:20:52,220 --> 00:20:56,630
one of the things that as we've seen

00:20:54,590 --> 00:20:58,850
from cloud foundry now for the last

00:20:56,630 --> 00:21:01,370
three and a half years or so is a

00:20:58,850 --> 00:21:03,440
powerful agent of both freedom for the

00:21:01,370 --> 00:21:05,299
developers but also governance for the

00:21:03,440 --> 00:21:07,760
organization are the language build

00:21:05,299 --> 00:21:09,620
packs inside of cloud foundry and so

00:21:07,760 --> 00:21:11,720
what what several of my large enterprise

00:21:09,620 --> 00:21:12,300
customers have done have said hey we're

00:21:11,720 --> 00:21:14,490
gonna

00:21:12,300 --> 00:21:15,780
poor both from DevOps all the way up

00:21:14,490 --> 00:21:19,530
through release management and

00:21:15,780 --> 00:21:21,690
production this subset of languages so

00:21:19,530 --> 00:21:24,000
long as they have a build pack that's

00:21:21,690 --> 00:21:27,240
got governance around that and then

00:21:24,000 --> 00:21:29,670
because of the standardized behavior

00:21:27,240 --> 00:21:31,470
both in from the developer experience

00:21:29,670 --> 00:21:33,960
and for the operations side then that

00:21:31,470 --> 00:21:36,050
gives organizations both you know the

00:21:33,960 --> 00:21:38,280
enterprise architects as well as the

00:21:36,050 --> 00:21:39,720
operations folks a comfort level that

00:21:38,280 --> 00:21:41,310
this is a built back is just a

00:21:39,720 --> 00:21:44,100
governance set of dependencies for a

00:21:41,310 --> 00:21:45,300
particular language framework and so you

00:21:44,100 --> 00:21:46,560
know rather than kind of throw in the

00:21:45,300 --> 00:21:48,660
door open and saying well you can do

00:21:46,560 --> 00:21:50,370
anything anytime what we're really doing

00:21:48,660 --> 00:21:54,030
is using the constructs of the Cloud

00:21:50,370 --> 00:21:55,800
Foundry platform to be an instrument of

00:21:54,030 --> 00:21:57,750
governance now we typically discourage

00:21:55,800 --> 00:21:59,820
clients from tinkering with the build

00:21:57,750 --> 00:22:01,740
packs other than you know using

00:21:59,820 --> 00:22:03,300
configuration parameters to inject you

00:22:01,740 --> 00:22:05,700
know enterprise-e kinds of things in

00:22:03,300 --> 00:22:07,590
there but at the same time you know as

00:22:05,700 --> 00:22:09,150
long as they're using that then you get

00:22:07,590 --> 00:22:09,960
a lot of value on the governance side

00:22:09,150 --> 00:22:11,760
that you were talking about which is

00:22:09,960 --> 00:22:14,220
important but from a developer

00:22:11,760 --> 00:22:16,200
experience side you've given them a

00:22:14,220 --> 00:22:18,120
broader toolbox but a very consistent

00:22:16,200 --> 00:22:19,770
experience in terms of how they interact

00:22:18,120 --> 00:22:21,840
so I don't know if that's helpful or not

00:22:19,770 --> 00:22:23,520
but you know what that sound well I've

00:22:21,840 --> 00:22:24,840
seen several of my large customers so

00:22:23,520 --> 00:22:26,790
they don't say well you can do anything

00:22:24,840 --> 00:22:28,200
if you can go find you know some

00:22:26,790 --> 00:22:30,330
language that no one's ever heard of you

00:22:28,200 --> 00:22:32,340
can do that too that's not realistic and

00:22:30,330 --> 00:22:33,780
that's not what we see however you know

00:22:32,340 --> 00:22:36,000
in a cloud foundry environment at least

00:22:33,780 --> 00:22:38,250
we have seen hey we're gonna do these

00:22:36,000 --> 00:22:40,080
three four five kind of enterprise

00:22:38,250 --> 00:22:42,540
languages that are all supported in the

00:22:40,080 --> 00:22:45,210
foundation and we're gonna pay attention

00:22:42,540 --> 00:22:47,160
to the build pack itself and what goes

00:22:45,210 --> 00:22:48,960
in there so that we understand how to

00:22:47,160 --> 00:22:51,420
vendor dependencies and how to manage

00:22:48,960 --> 00:22:53,520
what's what's under there so yeah and

00:22:51,420 --> 00:22:55,290
the other thing to attack on to that is

00:22:53,520 --> 00:22:57,480
you know I did bring up the fact that

00:22:55,290 --> 00:23:00,120
operators are stakeholders right so

00:22:57,480 --> 00:23:01,650
that's a big problem with you know a lot

00:23:00,120 --> 00:23:03,540
of organizations right now they don't

00:23:01,650 --> 00:23:06,000
necessarily think they think the

00:23:03,540 --> 00:23:08,670
developer is King and that the

00:23:06,000 --> 00:23:11,370
operations people are just another wing

00:23:08,670 --> 00:23:13,170
of the organization and that's not the

00:23:11,370 --> 00:23:15,450
point right like the thing is is like

00:23:13,170 --> 00:23:16,500
you said DevOps is about the operation

00:23:15,450 --> 00:23:18,540
side of the house too

00:23:16,500 --> 00:23:20,010
so there's a negotiation that has to

00:23:18,540 --> 00:23:22,590
happen right if the operations people

00:23:20,010 --> 00:23:24,450
aren't competent or they're not willing

00:23:22,590 --> 00:23:25,950
to do something in a

00:23:24,450 --> 00:23:27,990
different language well that's a

00:23:25,950 --> 00:23:30,780
different set of opportunities to either

00:23:27,990 --> 00:23:33,180
learn or to you know maybe that's not

00:23:30,780 --> 00:23:34,890
the right tool for them the whole point

00:23:33,180 --> 00:23:36,870
is is operations as part of this as well

00:23:34,890 --> 00:23:40,380
right we can't just go out there and say

00:23:36,870 --> 00:23:42,450
ok you know we're only doing dotnet it's

00:23:40,380 --> 00:23:43,830
the only thing to do and go forward

00:23:42,450 --> 00:23:46,740
because I think you're gonna have

00:23:43,830 --> 00:23:48,390
problems again with operations with

00:23:46,740 --> 00:23:50,040
personnel in general finding those

00:23:48,390 --> 00:23:53,010
people making sure that they're

00:23:50,040 --> 00:23:54,570
competent but if they can swing in and

00:23:53,010 --> 00:23:57,390
out of one language versus to the other

00:23:54,570 --> 00:23:59,640
nobody's really scared it's just the way

00:23:57,390 --> 00:24:02,790
it's gonna be and I think that's

00:23:59,640 --> 00:24:10,710
powerful good we have time for a couple

00:24:02,790 --> 00:24:12,570
more questions anyone else so just my

00:24:10,710 --> 00:24:14,340
perspective to kind of add to yours I

00:24:12,570 --> 00:24:15,660
think with DevOps one of the challenges

00:24:14,340 --> 00:24:18,390
as a lot of companies think the DevOps

00:24:15,660 --> 00:24:19,620
is a team and not a mindset yeah and I

00:24:18,390 --> 00:24:21,270
think in a cloud native world

00:24:19,620 --> 00:24:23,460
the development team actually would own

00:24:21,270 --> 00:24:25,290
the operational responsibility for that

00:24:23,460 --> 00:24:26,730
application cradle to grave which means

00:24:25,290 --> 00:24:29,490
you're getting the pages at night not

00:24:26,730 --> 00:24:30,960
the ops team so I think that solves part

00:24:29,490 --> 00:24:32,520
of the problem however if you're if

00:24:30,960 --> 00:24:35,280
you're structuring your company is set

00:24:32,520 --> 00:24:36,750
up where you do have a DevOps team then

00:24:35,280 --> 00:24:38,400
it would be the responsibility of that

00:24:36,750 --> 00:24:40,770
product owner or development team to

00:24:38,400 --> 00:24:42,840
actually either train or embed an

00:24:40,770 --> 00:24:45,180
individual with that language skill set

00:24:42,840 --> 00:24:46,440
into the DevOps team so that's kind of

00:24:45,180 --> 00:24:48,570
how I would tackle it and how we tackle

00:24:46,440 --> 00:24:50,790
it at our company but but it is it is a

00:24:48,570 --> 00:24:54,420
concern in terms of your statement about

00:24:50,790 --> 00:24:56,580
the polygon programmer from a systems

00:24:54,420 --> 00:24:58,530
background I know having somebody with

00:24:56,580 --> 00:25:01,740
multiple disciplines and multiple sets

00:24:58,530 --> 00:25:03,120
is extremely powerful it allows you to

00:25:01,740 --> 00:25:04,620
see things differently in different ways

00:25:03,120 --> 00:25:06,240
and I think from a programming

00:25:04,620 --> 00:25:08,340
perspective if you know three to five

00:25:06,240 --> 00:25:10,380
programming languages you're you're just

00:25:08,340 --> 00:25:12,240
amazing so you would want to keep

00:25:10,380 --> 00:25:14,600
pushing that boundary of learning and

00:25:12,240 --> 00:25:17,760
pushing new languages because you know

00:25:14,600 --> 00:25:20,460
not one language rules them all right so

00:25:17,760 --> 00:25:22,380
one it can't write like if we think

00:25:20,460 --> 00:25:24,390
about it it's like we could

00:25:22,380 --> 00:25:27,000
mathematically prove that you can't yeah

00:25:24,390 --> 00:25:29,010
you can't you can't possibly create the

00:25:27,000 --> 00:25:31,380
perfect language it's just not going to

00:25:29,010 --> 00:25:33,150
happen because what my definition of

00:25:31,380 --> 00:25:34,770
perfection is in that language can

00:25:33,150 --> 00:25:35,860
easily be changed you know by your

00:25:34,770 --> 00:25:39,549
definition

00:25:35,860 --> 00:25:42,820
so it's uh it's powerful to learn have

00:25:39,549 --> 00:25:46,570
these different perspectives thanks some

00:25:42,820 --> 00:25:48,159
great questions anyone else all right

00:25:46,570 --> 00:25:48,820
well thanks a lot for coming and have a

00:25:48,159 --> 00:25:51,600
great evening

00:25:48,820 --> 00:25:51,600

YouTube URL: https://www.youtube.com/watch?v=vdfSSsKvY3Q


