Title: Build Enterprise Apps Using CF Instance on Your Laptop!
Publication date: 2017-06-22
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	Build Enterprise Apps Using CF Instance on Your Laptop! [B] - Sanjay Patil, SAP    

Most enterprise applications depend upon a powerful underlying database engine for data storage and data intensive business logic. On top of it, it is common to use languages like Java for business services and JavaScript for sleek user experience. It is also highly desirable to develop, debug and test such polyglot applications locally before deploying them in the Cloud.

This session will demonstrate (with working code) some best practices for:
- Using Cloud Foundry for implementing micro-services architecture for all application layers (including database driven micro-services) 
- Developing and testing polyglot applications with a local Cloud Foundry instance on your laptop and deploying the very same application code to Cloud

Sanjay
SAP
Product Manager, SAP Cloud Platform
Sanjay Patil is a Product Manager of SAP Cloud Platform, a certified Cloud Foundry PaaS solution. With his passion and decade-long experience with Open Standard technologies, Sanjay has been closely involved in creation and launch of the Cloud Foundry Foundation. He has delivered talks on Cloud Foundry at previous Cloud Foundry Summit as well as other developer conferences such as SAP TechEd.
Captions: 
	00:00:00,060 --> 00:00:07,560
hey good afternoon everyone it's a

00:00:03,510 --> 00:00:10,260
little cold in here and this is nice

00:00:07,560 --> 00:00:11,969
afternoon and we are just meeting after

00:00:10,260 --> 00:00:13,769
the break I saw a lot of people on the

00:00:11,969 --> 00:00:17,039
show floor still busy chatting and

00:00:13,769 --> 00:00:21,420
sipping coffee I'm very happy you made

00:00:17,039 --> 00:00:22,949
it here and today together with my

00:00:21,420 --> 00:00:25,710
colleague Shailesh we're going to talk

00:00:22,949 --> 00:00:28,349
about a very interesting topic so the

00:00:25,710 --> 00:00:30,029
topic is how do I build enterprise

00:00:28,349 --> 00:00:34,110
applications using cloud foundry

00:00:30,029 --> 00:00:37,200
instance on my laptop so as we all know

00:00:34,110 --> 00:00:41,010
cloud foundry is mainly intended to

00:00:37,200 --> 00:00:43,350
simplify the developers job right how do

00:00:41,010 --> 00:00:46,200
I get my application quickly built and

00:00:43,350 --> 00:00:48,539
pushed to cloud foundry instance running

00:00:46,200 --> 00:00:51,899
variable that is in the cloud right

00:00:48,539 --> 00:00:53,219
so let me actually start getting into

00:00:51,899 --> 00:01:03,539
the presentation we have a lot of

00:00:53,219 --> 00:01:07,350
material to cover not this slide okay so

00:01:03,539 --> 00:01:09,260
for so we saw cloud foundry instance

00:01:07,350 --> 00:01:13,049
could be used in three different ways

00:01:09,260 --> 00:01:14,220
one is just to get familiarized how does

00:01:13,049 --> 00:01:17,430
cloud foundry work

00:01:14,220 --> 00:01:19,200
what is the platform behavior where I'm

00:01:17,430 --> 00:01:22,140
interacting with the platform as a

00:01:19,200 --> 00:01:24,090
developer what is my interface for the

00:01:22,140 --> 00:01:26,390
platform right the command-line

00:01:24,090 --> 00:01:28,880
interface for pushing an application

00:01:26,390 --> 00:01:31,409
browsing the various different services

00:01:28,880 --> 00:01:33,960
creating a new service binding an app to

00:01:31,409 --> 00:01:35,610
the service all of that good stuff so I

00:01:33,960 --> 00:01:38,369
want to get familiarized with that and

00:01:35,610 --> 00:01:40,290
if I have an easy way to do that like a

00:01:38,369 --> 00:01:41,040
cloud foundry instance running on my

00:01:40,290 --> 00:01:43,439
laptop

00:01:41,040 --> 00:01:45,180
you know nothing better than that and if

00:01:43,439 --> 00:01:48,299
the instance if the instance on my

00:01:45,180 --> 00:01:50,250
laptop is also capable of providing

00:01:48,299 --> 00:01:53,159
different services that are needed for

00:01:50,250 --> 00:01:55,470
enterprise applications like a powerful

00:01:53,159 --> 00:01:59,159
database different kind of services

00:01:55,470 --> 00:02:02,640
predictive geospatial text processing

00:01:59,159 --> 00:02:03,810
even better right so that's what we have

00:02:02,640 --> 00:02:07,590
here number one

00:02:03,810 --> 00:02:09,780
secondly now as we all know the real

00:02:07,590 --> 00:02:12,330
enterprise applications are not built by

00:02:09,780 --> 00:02:13,340
one developer on laptop obviously ideas

00:02:12,330 --> 00:02:15,379
can emerge from one

00:02:13,340 --> 00:02:17,690
person's mind and you might get started

00:02:15,379 --> 00:02:19,129
with a really good skeleton code but

00:02:17,690 --> 00:02:21,470
then you need a collaborative

00:02:19,129 --> 00:02:23,030
environment for different people in a

00:02:21,470 --> 00:02:26,870
team working together building the app

00:02:23,030 --> 00:02:29,000
so now if we take an instance on premise

00:02:26,870 --> 00:02:31,790
just to make it easier for development

00:02:29,000 --> 00:02:34,340
why not and then once your app is ready

00:02:31,790 --> 00:02:36,470
then you can push it to the Cloud

00:02:34,340 --> 00:02:38,060
Foundry instance in the cloud we're not

00:02:36,470 --> 00:02:40,099
saying this is the recommended method

00:02:38,060 --> 00:02:42,110
this is the recommended methodology from

00:02:40,099 --> 00:02:44,180
ACP that we should follow this and this

00:02:42,110 --> 00:02:46,250
is the best practice but we find this

00:02:44,180 --> 00:02:47,269
quite useful in many cases and we

00:02:46,250 --> 00:02:52,579
thought this is something worth sharing

00:02:47,269 --> 00:02:54,620
with the community here so what what is

00:02:52,579 --> 00:02:58,250
this car found the instance on my laptop

00:02:54,620 --> 00:02:59,500
right so how many of you heard of s AP

00:02:58,250 --> 00:03:04,700
Hana

00:02:59,500 --> 00:03:07,640
cool good so few years ago ASAP

00:03:04,700 --> 00:03:10,489
revolution Allies revolutionized the

00:03:07,640 --> 00:03:14,090
entire data management the way how we

00:03:10,489 --> 00:03:17,510
build applications it combined database

00:03:14,090 --> 00:03:19,160
that handles acid transactions with the

00:03:17,510 --> 00:03:21,440
same database now handling your

00:03:19,160 --> 00:03:23,750
analytical queries you don't need to

00:03:21,440 --> 00:03:25,519
have these data instances separate you

00:03:23,750 --> 00:03:29,510
don't need to create whole warehouse

00:03:25,519 --> 00:03:31,940
saying down some time and then process

00:03:29,510 --> 00:03:35,329
analytical queries you can run you can

00:03:31,940 --> 00:03:36,739
do all of those transactional systems

00:03:35,329 --> 00:03:38,959
you can run your transactional systems

00:03:36,739 --> 00:03:40,609
and you can run your queries on the same

00:03:38,959 --> 00:03:42,560
data so that's simplified a lot of

00:03:40,609 --> 00:03:43,700
things so I'm glad many of you heard so

00:03:42,560 --> 00:03:46,220
I just wanted to mention couple

00:03:43,700 --> 00:03:49,099
sentences about that because that is a

00:03:46,220 --> 00:03:50,540
topic on its own so we thought that the

00:03:49,099 --> 00:03:52,489
Cloud Foundry instance on the laptop

00:03:50,540 --> 00:03:54,950
should definitely have a higher instance

00:03:52,489 --> 00:03:57,470
running now Hana takes care of your data

00:03:54,950 --> 00:03:58,870
management it has very powerful engines

00:03:57,470 --> 00:04:03,019
like graph engine text processing

00:03:58,870 --> 00:04:05,870
predictive geospatial but oftentimes you

00:04:03,019 --> 00:04:07,970
need small app app server sitting on top

00:04:05,870 --> 00:04:09,889
of it that can take care of for example

00:04:07,970 --> 00:04:11,780
user experience management user

00:04:09,889 --> 00:04:13,880
interface that can take care of making

00:04:11,780 --> 00:04:17,599
some call-outs that have to go to some

00:04:13,880 --> 00:04:20,299
other system so historically we started

00:04:17,599 --> 00:04:22,190
with having a small JavaScript engine

00:04:20,299 --> 00:04:25,280
running right next to the Hana system

00:04:22,190 --> 00:04:26,840
but then we slowly realized that many of

00:04:25,280 --> 00:04:29,330
the developers want to use

00:04:26,840 --> 00:04:31,190
just Hana but maybe Java maybe some

00:04:29,330 --> 00:04:34,070
other language in all of that still

00:04:31,190 --> 00:04:36,680
sitting close to the Hana database so

00:04:34,070 --> 00:04:39,290
that is where we found out that Cloud

00:04:36,680 --> 00:04:41,150
Foundry architecture is applicable not

00:04:39,290 --> 00:04:44,090
just to the cloud platform in the cloud

00:04:41,150 --> 00:04:46,550
but for this app server that is running

00:04:44,090 --> 00:04:48,800
right next to the Hana system and that

00:04:46,550 --> 00:04:50,900
can now support this multiple runtimes

00:04:48,800 --> 00:04:53,570
so what you see here on the slide are

00:04:50,900 --> 00:04:58,070
basically you have the Hana system as

00:04:53,570 --> 00:05:00,080
the platform and then we got a couple

00:04:58,070 --> 00:05:03,950
versions of Java Script for historical

00:05:00,080 --> 00:05:06,350
reasons really and then you have a Java

00:05:03,950 --> 00:05:08,510
runtime and then you can add any other

00:05:06,350 --> 00:05:10,300
runtime that you want it to and all of

00:05:08,510 --> 00:05:13,490
this is utilizing the Cloud Foundry

00:05:10,300 --> 00:05:17,120
blueprint underneath and then we have on

00:05:13,490 --> 00:05:19,220
top application router which is a web

00:05:17,120 --> 00:05:20,930
application that does more than just

00:05:19,220 --> 00:05:23,360
being a web application and serving

00:05:20,930 --> 00:05:25,850
static HTML it becomes your front-end

00:05:23,360 --> 00:05:28,130
router so that it can serve the static

00:05:25,850 --> 00:05:30,710
content as well as route any incoming

00:05:28,130 --> 00:05:32,419
requests to the different runtimes so

00:05:30,710 --> 00:05:34,610
that's the overall architecture I think

00:05:32,419 --> 00:05:36,830
this should be familiar to many of the

00:05:34,610 --> 00:05:39,289
Cloud Foundry developers that you need

00:05:36,830 --> 00:05:40,729
different runtimes for handling your

00:05:39,289 --> 00:05:43,310
application code written in different

00:05:40,729 --> 00:05:45,530
languages and powerful backing services

00:05:43,310 --> 00:05:49,550
in this architecture the backing service

00:05:45,530 --> 00:05:52,310
happened happens to be Hana so this is

00:05:49,550 --> 00:05:54,530
now showing how the blueprint is exactly

00:05:52,310 --> 00:05:57,139
same for the on-premise system and in

00:05:54,530 --> 00:05:59,389
cloud system so now on prim system you

00:05:57,139 --> 00:06:01,310
got Don Prem server the physical

00:05:59,389 --> 00:06:03,229
hardware and things and then you have

00:06:01,310 --> 00:06:05,120
all of this platform services needed

00:06:03,229 --> 00:06:07,789
logging monitoring job scheduling and

00:06:05,120 --> 00:06:09,979
things then we have the runtimes static

00:06:07,789 --> 00:06:12,410
HTML Java and o2 bring your own language

00:06:09,979 --> 00:06:14,990
then we have the backing services HDI

00:06:12,410 --> 00:06:17,780
container a pro tour on top serving two

00:06:14,990 --> 00:06:20,780
different user interfaces mobile or

00:06:17,780 --> 00:06:22,880
desktop right and UA is handling user

00:06:20,780 --> 00:06:24,950
account and authentication if you look

00:06:22,880 --> 00:06:27,620
at the cloud version it's very similar

00:06:24,950 --> 00:06:29,990
architecture in addition to backing

00:06:27,620 --> 00:06:32,150
service being just Hana now you can

00:06:29,990 --> 00:06:33,979
access also the other typical backing

00:06:32,150 --> 00:06:35,870
services that Cloud Foundry developers

00:06:33,979 --> 00:06:36,969
would be used to like MongoDB possibly

00:06:35,870 --> 00:06:39,650
sequel

00:06:36,969 --> 00:06:40,700
the red is rabbitmq and you can also

00:06:39,650 --> 00:06:43,040
obviously add

00:06:40,700 --> 00:06:46,370
more services as well and interestingly

00:06:43,040 --> 00:06:48,350
a CP cloud platform runs on different

00:06:46,370 --> 00:06:51,380
infrastructure as a service providers

00:06:48,350 --> 00:06:54,590
today it runs on Amazon Web Services it

00:06:51,380 --> 00:06:56,630
also as as GA for production purposes it

00:06:54,590 --> 00:06:59,030
also runs on Microsoft as a beta

00:06:56,630 --> 00:07:01,100
offering and we are soon to support

00:06:59,030 --> 00:07:03,710
Google cloud platform as well so it is

00:07:01,100 --> 00:07:06,350
not just a option that you take and run

00:07:03,710 --> 00:07:08,180
but actual cloud platform from ACP runs

00:07:06,350 --> 00:07:10,460
on these different infrastructures today

00:07:08,180 --> 00:07:13,460
so it's a fully managed cloud solution

00:07:10,460 --> 00:07:17,120
for amis ap so besides that's thus

00:07:13,460 --> 00:07:18,680
besides my main points over here so the

00:07:17,120 --> 00:07:21,470
point is you have exactly same cloud

00:07:18,680 --> 00:07:24,620
foundry architecture supported on Prime

00:07:21,470 --> 00:07:27,260
and in cloud so with that I would really

00:07:24,620 --> 00:07:30,170
want to directly jump into a demo of

00:07:27,260 --> 00:07:32,000
what we can do with these things so what

00:07:30,170 --> 00:07:35,390
I wanted to show is maybe start with

00:07:32,000 --> 00:07:37,760
building a static HTML page and then

00:07:35,390 --> 00:07:41,060
directly get into the database create a

00:07:37,760 --> 00:07:43,370
small data model and then once you have

00:07:41,060 --> 00:07:45,830
a data model and if I wanted to build a

00:07:43,370 --> 00:07:48,620
user interface you would need some logic

00:07:45,830 --> 00:07:50,750
in between and in Hana then we have

00:07:48,620 --> 00:07:53,660
multiple ways to build logic on top of

00:07:50,750 --> 00:07:55,580
that we have support for building stored

00:07:53,660 --> 00:07:58,220
procedures in which you can build a lot

00:07:55,580 --> 00:08:00,980
of procedural code but if the scenario

00:07:58,220 --> 00:08:02,390
requires analytical processing where you

00:08:00,980 --> 00:08:05,540
don't necessarily need to write a lot of

00:08:02,390 --> 00:08:07,790
code but you still need a way to filter

00:08:05,540 --> 00:08:09,650
the data aggregate the data basically

00:08:07,790 --> 00:08:11,630
analytical views and we have nice

00:08:09,650 --> 00:08:13,340
analytical modeling tools that are fully

00:08:11,630 --> 00:08:16,700
integrated with the same tooling and

00:08:13,340 --> 00:08:18,800
then once you have all of that data and

00:08:16,700 --> 00:08:20,660
the logic sitting on top in the database

00:08:18,800 --> 00:08:23,030
now you want to expose it to the world

00:08:20,660 --> 00:08:25,850
now it is say P we have standardized on

00:08:23,030 --> 00:08:27,770
a standard for exposing functionality

00:08:25,850 --> 00:08:29,270
and data called as OD des how many of

00:08:27,770 --> 00:08:31,790
you heard of our data as a standard

00:08:29,270 --> 00:08:34,220
excellent so Oneida is really the

00:08:31,790 --> 00:08:37,150
standard right now for accessing data

00:08:34,220 --> 00:08:39,770
and functionality so we then would need

00:08:37,150 --> 00:08:41,300
OTA provisioning system that will take

00:08:39,770 --> 00:08:43,280
this functionality in the database and

00:08:41,300 --> 00:08:46,160
make it available as I would eat a

00:08:43,280 --> 00:08:48,710
service and then finally we can link

00:08:46,160 --> 00:08:50,720
back that Oh data into this static page

00:08:48,710 --> 00:08:52,580
that we would start with and make that

00:08:50,720 --> 00:08:54,170
page as dynamic so that's just the

00:08:52,580 --> 00:08:58,220
general

00:08:54,170 --> 00:09:00,440
scheme for this demo here obviously made

00:08:58,220 --> 00:09:04,100
the demo God's be with me let's see how

00:09:00,440 --> 00:09:05,420
that goes so yes so that's the general

00:09:04,100 --> 00:09:07,040
idea this should give us an idea of the

00:09:05,420 --> 00:09:07,850
overall technological stack and my

00:09:07,040 --> 00:09:10,010
colleague

00:09:07,850 --> 00:09:12,589
Shailesh would then come and show how

00:09:10,010 --> 00:09:13,970
this is not just a technological

00:09:12,589 --> 00:09:16,490
platform for us to play with

00:09:13,970 --> 00:09:19,310
but ACP is actually building enterprise

00:09:16,490 --> 00:09:21,410
applications on the same stack using the

00:09:19,310 --> 00:09:23,959
same model and really sitting in cloud

00:09:21,410 --> 00:09:26,240
he's an architect in the IOT living out

00:09:23,959 --> 00:09:28,279
of organization and they're building

00:09:26,240 --> 00:09:32,360
really cool enterprise applications on

00:09:28,279 --> 00:09:36,860
the same stack so that being said let me

00:09:32,360 --> 00:09:41,510
shift gears ok so so I have a VM running

00:09:36,860 --> 00:09:44,089
here which is running basically the Hana

00:09:41,510 --> 00:09:45,740
Express Edition so the Hana system I

00:09:44,089 --> 00:09:47,540
talked about comes in a version called

00:09:45,740 --> 00:09:50,240
as Hana Express Edition I thought I had

00:09:47,540 --> 00:09:51,889
a browser here with the download page

00:09:50,240 --> 00:09:53,570
but you can easily google Hana Express

00:09:51,889 --> 00:09:55,730
Edition you'll get a link to download it

00:09:53,570 --> 00:09:57,920
and you can run it on or on your laptop

00:09:55,730 --> 00:10:04,250
so that's what I'm running here and then

00:09:57,920 --> 00:10:09,589
I use a simple web interface then oh oh

00:10:04,250 --> 00:10:16,930
oh you're not seeing my screen so I

00:10:09,589 --> 00:10:16,930
think it was basically only showing

00:10:29,100 --> 00:10:33,020
well display

00:10:39,270 --> 00:10:58,180
Shailesh gonna look for the gentleman

00:10:42,040 --> 00:11:06,670
who is helping out with the displays can

00:10:58,180 --> 00:11:17,340
you just duplicate it yeah try that

00:11:06,670 --> 00:11:20,440
first okay cool thank you have you know

00:11:17,340 --> 00:11:22,150
okay so let's see this works now okay so

00:11:20,440 --> 00:11:24,400
what I was doing basically is I have a

00:11:22,150 --> 00:11:27,700
VM on my laptop that is running Hana

00:11:24,400 --> 00:11:31,210
explanation oh then I would use a simple

00:11:27,700 --> 00:11:32,860
web-based interface to access the Hana

00:11:31,210 --> 00:11:36,370
explicit Edition running on my system

00:11:32,860 --> 00:11:38,770
and do the things that I just said we

00:11:36,370 --> 00:11:40,570
would we can do it over here so one of

00:11:38,770 --> 00:11:42,100
the things we would do so in the

00:11:40,570 --> 00:11:44,440
interest of time I'm gonna build a few

00:11:42,100 --> 00:11:46,390
things and use some of the pre deployed

00:11:44,440 --> 00:11:48,940
things so that you can get a feel of

00:11:46,390 --> 00:11:51,100
what's going on over here so for example

00:11:48,940 --> 00:11:55,750
what I would do is create a new project

00:11:51,100 --> 00:11:57,910
right here and we have what a specific

00:11:55,750 --> 00:12:00,580
type of project here that is pre-loaded

00:11:57,910 --> 00:12:02,440
as multi target application now what is

00:12:00,580 --> 00:12:04,180
multi target application at the CP we

00:12:02,440 --> 00:12:05,800
got very used to this terminology so

00:12:04,180 --> 00:12:08,200
often times I forget that I need to

00:12:05,800 --> 00:12:11,560
explain that we call it MTA multi target

00:12:08,200 --> 00:12:13,390
application architecture it essentially

00:12:11,560 --> 00:12:15,880
stands for an application having

00:12:13,390 --> 00:12:17,440
different components written in

00:12:15,880 --> 00:12:19,480
different languages this track is about

00:12:17,440 --> 00:12:20,830
polyglot applications remember so you

00:12:19,480 --> 00:12:23,620
might have different components written

00:12:20,830 --> 00:12:25,270
in different languages so when you look

00:12:23,620 --> 00:12:26,650
at the application although there are

00:12:25,270 --> 00:12:28,090
parts written in different languages

00:12:26,650 --> 00:12:30,160
with their different target runtimes

00:12:28,090 --> 00:12:32,200
some of the components may actually be

00:12:30,160 --> 00:12:34,060
running in database some running in

00:12:32,200 --> 00:12:37,510
JavaScript and Java and so and so forth

00:12:34,060 --> 00:12:40,330
you would want to manage this MTA as a

00:12:37,510 --> 00:12:42,490
package for its end-to-end lifecycle as

00:12:40,330 --> 00:12:44,800
a single application so unless we have

00:12:42,490 --> 00:12:47,680
this notion of MTA as part of your

00:12:44,800 --> 00:12:49,300
design right from the beginning it gets

00:12:47,680 --> 00:12:49,769
very difficult later you might end up

00:12:49,300 --> 00:12:51,269
deploying

00:12:49,769 --> 00:12:52,889
cool application but when you want to

00:12:51,269 --> 00:12:54,329
say when you want to find out what is

00:12:52,889 --> 00:12:56,730
your application where it is running it

00:12:54,329 --> 00:12:59,429
gets extremely hard so MTA meets that

00:12:56,730 --> 00:13:01,589
need ah so I'm creating a new

00:12:59,429 --> 00:13:06,600
application let me call it as CF summit

00:13:01,589 --> 00:13:09,209
for example so I'm creating this

00:13:06,600 --> 00:13:10,829
application in a space now this C this

00:13:09,209 --> 00:13:12,509
terminology should be familiar to cloud

00:13:10,829 --> 00:13:14,759
foundry developers is an organization

00:13:12,509 --> 00:13:17,879
and a space that every developer works

00:13:14,759 --> 00:13:22,619
in and that's what we're using here so I

00:13:17,879 --> 00:13:24,600
create an app and there is now a new

00:13:22,619 --> 00:13:26,910
project created from your hero now

00:13:24,600 --> 00:13:29,610
within that I can very easily and

00:13:26,910 --> 00:13:31,319
quickly create for example an H DB model

00:13:29,610 --> 00:13:37,459
module which essentially stands for

00:13:31,319 --> 00:13:37,459
database module let's call it as DB and

00:13:37,639 --> 00:13:45,439
let's accept the defaults and let us do

00:13:43,019 --> 00:13:48,749
some data modeling here

00:13:45,439 --> 00:13:51,749
ok so within the DB module let me close

00:13:48,749 --> 00:13:56,429
the other windows that have been open so

00:13:51,749 --> 00:13:59,009
here I can now create for example a new

00:13:56,429 --> 00:14:02,160
serious artifact now in the interest of

00:13:59,009 --> 00:14:04,379
time let me quickly say one word about

00:14:02,160 --> 00:14:07,290
serious serious is an abstraction layer

00:14:04,379 --> 00:14:10,259
on top of database so that you have the

00:14:07,290 --> 00:14:12,449
entire view on the data objects in a

00:14:10,259 --> 00:14:16,290
more human readable form so it's an

00:14:12,449 --> 00:14:20,459
abstraction over the detail database so

00:14:16,290 --> 00:14:23,819
let me use a text editor so here now we

00:14:20,459 --> 00:14:26,459
got a sea of data as our context within

00:14:23,819 --> 00:14:30,959
that let me create a couple of I'm

00:14:26,459 --> 00:14:36,839
actually not able to edit here so let me

00:14:30,959 --> 00:14:39,179
pick two entities here so very simple

00:14:36,839 --> 00:14:40,949
and this is I'm if you browse for our

00:14:39,179 --> 00:14:43,019
Han Express Edition download and follow

00:14:40,949 --> 00:14:44,579
the tutorial it's a very simple example

00:14:43,019 --> 00:14:46,439
that has been described there I'm using

00:14:44,579 --> 00:14:49,049
the same for so that you also get

00:14:46,439 --> 00:14:51,720
familiar with that so basically there

00:14:49,049 --> 00:14:53,369
are two entities world and country every

00:14:51,720 --> 00:14:55,019
country belongs to a certain continent

00:14:53,369 --> 00:14:57,660
and there's a simple module that has

00:14:55,019 --> 00:15:02,279
been represented here now I save that

00:14:57,660 --> 00:15:03,360
and if I now go back to my module and

00:15:02,279 --> 00:15:05,339
build it

00:15:03,360 --> 00:15:07,320
this automatically creates all those

00:15:05,339 --> 00:15:09,600
tables in the database so you don't need

00:15:07,320 --> 00:15:12,329
to worry about what's my database user

00:15:09,600 --> 00:15:14,160
does it have the right access what is my

00:15:12,329 --> 00:15:17,190
schema does it have the right isolation

00:15:14,160 --> 00:15:18,720
am i stepping into some other areas so

00:15:17,190 --> 00:15:22,260
all of that is taken care for you here

00:15:18,720 --> 00:15:24,300
or here likewise over here then I can

00:15:22,260 --> 00:15:27,089
create the stored procedure on top so

00:15:24,300 --> 00:15:29,250
let's quickly do that the analytical

00:15:27,089 --> 00:15:32,160
view whereby then you can say I want to

00:15:29,250 --> 00:15:34,350
access only countries in a certain

00:15:32,160 --> 00:15:37,290
continent so that would be another

00:15:34,350 --> 00:15:39,390
simple thing to do so I would create new

00:15:37,290 --> 00:15:40,589
calculation view for example how many of

00:15:39,390 --> 00:15:42,690
you are familiar with the term

00:15:40,589 --> 00:15:44,640
calculation view sometimes I wonder if

00:15:42,690 --> 00:15:47,760
it's si P only term basically it's an

00:15:44,640 --> 00:15:50,370
analytical view so let me call it as a

00:15:47,760 --> 00:15:54,769
my view and select the default as a

00:15:50,370 --> 00:15:57,029
category so this allows me now to model

00:15:54,769 --> 00:15:59,430
creating the analytical view so I got a

00:15:57,029 --> 00:16:02,579
bunch of tables I can say give me only

00:15:59,430 --> 00:16:04,200
this data from this table and I want to

00:16:02,579 --> 00:16:06,029
have an analytical view which will take

00:16:04,200 --> 00:16:08,790
certain parameter and expose certain

00:16:06,029 --> 00:16:10,949
data externally so this is going to be

00:16:08,790 --> 00:16:13,920
very simple analytical view so let me

00:16:10,949 --> 00:16:17,699
just create one projection on certain

00:16:13,920 --> 00:16:19,649
table normally the projection on top

00:16:17,699 --> 00:16:21,720
would be used to take a look at

00:16:19,649 --> 00:16:24,269
different projections of different table

00:16:21,720 --> 00:16:26,610
and aggregate that into something to be

00:16:24,269 --> 00:16:28,320
surfaced at the top level but over here

00:16:26,610 --> 00:16:32,130
we are going to have a simple projection

00:16:28,320 --> 00:16:33,930
where I would then add let's say some

00:16:32,130 --> 00:16:35,550
data from one of the tables so I'm

00:16:33,930 --> 00:16:38,880
searching for what tables do we have

00:16:35,550 --> 00:16:43,500
over here let's pick the country table

00:16:38,880 --> 00:16:52,350
here and then let me take all of the

00:16:43,500 --> 00:16:54,899
columns as output from this table okay

00:16:52,350 --> 00:16:58,079
all right good and then I can quickly

00:16:54,899 --> 00:17:02,459
write a filter here to say I want to

00:16:58,079 --> 00:17:06,959
select only the countries in the

00:17:02,459 --> 00:17:09,030
continent of Europe okay and then I can

00:17:06,959 --> 00:17:11,280
go to the top level the aggregation

00:17:09,030 --> 00:17:13,949
which is now looking at the projection

00:17:11,280 --> 00:17:15,959
from the bottom level and then I'm going

00:17:13,949 --> 00:17:17,789
to connect that to the output

00:17:15,959 --> 00:17:19,589
and that's about it so this created a

00:17:17,789 --> 00:17:21,119
simple analytical view from the two

00:17:19,589 --> 00:17:23,789
tables obviously this doesn't do a whole

00:17:21,119 --> 00:17:27,659
lot but hopefully this gives an idea now

00:17:23,789 --> 00:17:30,269
then I save this data model and go back

00:17:27,659 --> 00:17:32,090
and I can build and this will take care

00:17:30,269 --> 00:17:35,070
of creating this analytical view as well

00:17:32,090 --> 00:17:36,600
so there are various different steps

00:17:35,070 --> 00:17:38,249
then you might go through and let me

00:17:36,600 --> 00:17:42,629
quickly show you how simple it would be

00:17:38,249 --> 00:17:45,360
to by picking another project here which

00:17:42,629 --> 00:17:48,299
I created just before I walked up stage

00:17:45,360 --> 00:17:50,309
here so I likewise just like how I

00:17:48,299 --> 00:17:53,399
created created a database module I

00:17:50,309 --> 00:17:54,990
would create a node.js module here we

00:17:53,399 --> 00:17:57,269
can debug that but don't worry about

00:17:54,990 --> 00:17:59,909
that at the moment so I will create a

00:17:57,269 --> 00:18:02,580
JavaScript module and within that by

00:17:59,909 --> 00:18:05,309
simply creating a new file with an

00:18:02,580 --> 00:18:07,919
extension called xso data I would be

00:18:05,309 --> 00:18:09,659
able to expose the analytical view that

00:18:07,919 --> 00:18:13,470
I just created as a wood heater service

00:18:09,659 --> 00:18:16,169
and once I have that then I would create

00:18:13,470 --> 00:18:18,749
for example a web module and then within

00:18:16,169 --> 00:18:21,869
the web module I can very simply use the

00:18:18,749 --> 00:18:23,999
OData JavaScript API to access that

00:18:21,869 --> 00:18:26,129
auditor service which is being

00:18:23,999 --> 00:18:28,169
provisioned by a node.js based runtime

00:18:26,129 --> 00:18:30,600
which is basically exposing the

00:18:28,169 --> 00:18:32,970
analytical view in the database so we

00:18:30,600 --> 00:18:34,619
got covered creation of data in the

00:18:32,970 --> 00:18:36,779
database writing a story

00:18:34,619 --> 00:18:39,200
analytical view on top of that using

00:18:36,779 --> 00:18:43,019
node.js to expose it as a data service

00:18:39,200 --> 00:18:45,389
consuming it from a web interface so if

00:18:43,019 --> 00:18:47,659
all these steps if we go through all

00:18:45,389 --> 00:18:49,830
these steps then this is the final

00:18:47,659 --> 00:18:51,779
output that you would see over here

00:18:49,830 --> 00:18:54,419
which is basically listing the different

00:18:51,779 --> 00:18:57,690
countries in on the continent how are we

00:18:54,419 --> 00:19:00,799
on time yeah so basically I hope this

00:18:57,690 --> 00:19:03,480
gives you a good picture of what are the

00:19:00,799 --> 00:19:05,309
different parts of the architecture and

00:19:03,480 --> 00:19:06,899
at this time I would like to hand it

00:19:05,309 --> 00:19:09,029
over to Shailesh who is going to show

00:19:06,899 --> 00:19:10,799
act how we are using this architecture

00:19:09,029 --> 00:19:13,129
to build enterprise applications at a

00:19:10,799 --> 00:19:13,129
Seabee

00:19:17,760 --> 00:19:21,270
you need the link

00:19:39,220 --> 00:19:42,279
[Music]

00:19:45,750 --> 00:19:51,820
thanks a lot Sanjay so hi so I'm working

00:19:49,780 --> 00:19:54,130
as an architect in application called

00:19:51,820 --> 00:19:57,130
connected goods so connected goods is

00:19:54,130 --> 00:19:59,440
basically a and IOT application under

00:19:57,130 --> 00:20:02,020
leonardo portfolio it allows you to

00:19:59,440 --> 00:20:05,110
monitor coolers vending machines and

00:20:02,020 --> 00:20:07,840
other kind of devices which keep sensor

00:20:05,110 --> 00:20:09,610
data and then we try to merge the sensor

00:20:07,840 --> 00:20:11,290
data with the business data so for

00:20:09,610 --> 00:20:12,669
example is if there if there is a

00:20:11,290 --> 00:20:14,260
vending machine and wending machine is

00:20:12,669 --> 00:20:16,750
sending the temperature and the door is

00:20:14,260 --> 00:20:18,490
open for too long and then we have we

00:20:16,750 --> 00:20:19,809
can create an alerts to the service

00:20:18,490 --> 00:20:22,540
engineer saying that there is something

00:20:19,809 --> 00:20:24,460
wrong with the machine or we can manage

00:20:22,540 --> 00:20:26,679
we can also merge the transactional data

00:20:24,460 --> 00:20:30,490
for example there is a cooler and cooler

00:20:26,679 --> 00:20:32,169
cooler we can merge the correlate the

00:20:30,490 --> 00:20:34,030
door openings with the number of items

00:20:32,169 --> 00:20:36,429
sold and the transactional data have

00:20:34,030 --> 00:20:39,940
come from the other business systems

00:20:36,429 --> 00:20:41,650
like a CPR business so just a quick

00:20:39,940 --> 00:20:43,690
lumps of connected goods so connected

00:20:41,650 --> 00:20:46,390
goods is a application built on cloud

00:20:43,690 --> 00:20:49,960
foundry using couple of micro services

00:20:46,390 --> 00:20:51,309
and we have rules the simple example of

00:20:49,960 --> 00:20:52,679
rule is if the temperature of the

00:20:51,309 --> 00:20:55,059
machine is greater than some threshold

00:20:52,679 --> 00:20:59,350
then you want to create an alerts or

00:20:55,059 --> 00:21:01,980
notify the service engineer and also we

00:20:59,350 --> 00:21:04,360
want to monitor for example here is the

00:21:01,980 --> 00:21:07,230
application where we are monitoring the

00:21:04,360 --> 00:21:10,450
vending machines and some of the coolers

00:21:07,230 --> 00:21:12,580
for example and then I will click on one

00:21:10,450 --> 00:21:15,460
of the cooler to see how this cooler is

00:21:12,580 --> 00:21:18,010
behaving right now and it will show me

00:21:15,460 --> 00:21:20,169
the real-time data about the temperature

00:21:18,010 --> 00:21:23,429
the number of times the door was open

00:21:20,169 --> 00:21:27,760
where the square is located and all the

00:21:23,429 --> 00:21:30,100
analytical details and then this cooler

00:21:27,760 --> 00:21:32,200
also can be how we can configure some

00:21:30,100 --> 00:21:37,059
rules from these coolers to make sure

00:21:32,200 --> 00:21:38,679
this cooler behaves as normal so and

00:21:37,059 --> 00:21:40,600
there are couple of micro services that

00:21:38,679 --> 00:21:43,510
we have here for example rules

00:21:40,600 --> 00:21:48,130
geospatial for tracing the

00:21:43,510 --> 00:21:50,350
the location of the cooler and also some

00:21:48,130 --> 00:21:52,150
master data like are also some other

00:21:50,350 --> 00:21:55,660
third-party data which we wants to bring

00:21:52,150 --> 00:21:58,420
as a part of the application so going

00:21:55,660 --> 00:22:01,740
back into the quickly of architecture

00:21:58,420 --> 00:22:01,740
slide on how connected

00:22:22,820 --> 00:22:42,480
has some problem with okay yeah so we

00:22:39,870 --> 00:22:44,880
have as Sanjay explained briefly I MTA

00:22:42,480 --> 00:22:46,350
architecture so basically here you see

00:22:44,880 --> 00:22:47,910
there are a bunch of micro-services

00:22:46,350 --> 00:22:49,680
these are some of the micro services

00:22:47,910 --> 00:22:51,840
which are noted here there is a user

00:22:49,680 --> 00:22:54,690
interface on the top which is html5

00:22:51,840 --> 00:22:57,450
application embedded in and served by a

00:22:54,690 --> 00:22:59,790
node.js module and we have a proto which

00:22:57,450 --> 00:23:01,350
is a part of an or takes care of routing

00:22:59,790 --> 00:23:03,810
the request to an appropriate micro

00:23:01,350 --> 00:23:07,230
services based on the URL pattern or

00:23:03,810 --> 00:23:10,200
based on certain regular expressions

00:23:07,230 --> 00:23:12,030
that you can put in the URL and then on

00:23:10,200 --> 00:23:14,460
the Cloud Foundry side we are using Hana

00:23:12,030 --> 00:23:17,790
as a backing service we also have spark

00:23:14,460 --> 00:23:20,190
for big data and also ua a for the

00:23:17,790 --> 00:23:22,530
authentication and authorization so this

00:23:20,190 --> 00:23:27,480
all these are provided by also by the XS

00:23:22,530 --> 00:23:31,200
there the Onyx is a and now I will go

00:23:27,480 --> 00:23:32,880
back to the code actually to how we have

00:23:31,200 --> 00:23:35,720
developed this application using the

00:23:32,880 --> 00:23:35,720
ASAP

00:23:42,290 --> 00:23:46,650
so going back to the run time so

00:23:44,820 --> 00:23:48,090
basically I just show you on the Cloud

00:23:46,650 --> 00:23:50,720
Foundry times this is a running

00:23:48,090 --> 00:23:53,190
application in Cloud Foundry asipi cloud

00:23:50,720 --> 00:23:55,800
so these are some of the micro services

00:23:53,190 --> 00:23:57,510
that are we are running and one of the

00:23:55,800 --> 00:23:59,040
advantage that Cloud Foundry brings us

00:23:57,510 --> 00:24:01,590
is that we can scale each of these

00:23:59,040 --> 00:24:03,900
services based on the traffic or based

00:24:01,590 --> 00:24:05,970
on the demand for example if you have

00:24:03,900 --> 00:24:07,950
getting lot of data from the sensor

00:24:05,970 --> 00:24:09,870
provider we can easily scale the

00:24:07,950 --> 00:24:11,790
ingestion layer so that we can handle

00:24:09,870 --> 00:24:16,110
too much traffic and same for each of

00:24:11,790 --> 00:24:18,120
the other micro services now going back

00:24:16,110 --> 00:24:22,410
to the development environment so here I

00:24:18,120 --> 00:24:24,630
have I have I have I'm using V by D and

00:24:22,410 --> 00:24:26,550
one of the advantage that we have idea

00:24:24,630 --> 00:24:28,950
brings me is that I can develop this app

00:24:26,550 --> 00:24:30,360
locally without without having the

00:24:28,950 --> 00:24:33,240
hassle of pushing every time to Cloud

00:24:30,360 --> 00:24:36,060
Foundry so basically I am going to some

00:24:33,240 --> 00:24:38,430
of the services for example I can go

00:24:36,060 --> 00:24:40,560
into the geospatial service and here you

00:24:38,430 --> 00:24:43,890
see this is just a REST API using Java

00:24:40,560 --> 00:24:45,990
and that is exposing creating a fence

00:24:43,890 --> 00:24:47,760
and whenever the device goes out of a

00:24:45,990 --> 00:24:51,060
friend's I want to get an alert or I

00:24:47,760 --> 00:24:53,070
want to send a notification so there are

00:24:51,060 --> 00:24:55,380
a bunch of other services using Java and

00:24:53,070 --> 00:24:57,540
node.js and that that brings us the

00:24:55,380 --> 00:25:00,210
power of both different platforms and

00:24:57,540 --> 00:25:03,330
different languages here and then I go

00:25:00,210 --> 00:25:05,760
back to one of the serious artifacts

00:25:03,330 --> 00:25:09,150
about the same service we have I am

00:25:05,760 --> 00:25:11,880
showing the very simple easy to create a

00:25:09,150 --> 00:25:13,290
data model so a developer can just go

00:25:11,880 --> 00:25:15,780
and create a data model using

00:25:13,290 --> 00:25:18,810
drag-and-drop options here and once this

00:25:15,780 --> 00:25:23,250
is already this EDS can be deployed on

00:25:18,810 --> 00:25:26,280
to either xsa HANA local system or to

00:25:23,250 --> 00:25:29,160
the cloud similarly here I am showing

00:25:26,280 --> 00:25:31,530
just for the device data we are having

00:25:29,160 --> 00:25:33,120
the data modeling and some of the

00:25:31,530 --> 00:25:35,820
analytical business case for example

00:25:33,120 --> 00:25:38,130
some geo spatial analytics are know we

00:25:35,820 --> 00:25:40,500
are already can use the calculation view

00:25:38,130 --> 00:25:43,710
here it's example of a business logic is

00:25:40,500 --> 00:25:45,690
shown where we are basically getting the

00:25:43,710 --> 00:25:47,820
data from multiple different tables and

00:25:45,690 --> 00:25:50,180
we are doing a complex joints and

00:25:47,820 --> 00:25:52,620
aggregations and then finally

00:25:50,180 --> 00:25:54,120
provisioning it through data so the UI

00:25:52,620 --> 00:26:02,010
can display the so data

00:25:54,120 --> 00:26:03,990
back wonder you are now I can quickly go

00:26:02,010 --> 00:26:05,580
into the so one of the another another

00:26:03,990 --> 00:26:07,770
advantage that we're by D brings men

00:26:05,580 --> 00:26:09,630
working on the team is that it has

00:26:07,770 --> 00:26:11,850
out-of-the-box integration with the gig

00:26:09,630 --> 00:26:14,220
so for example I have changed any file

00:26:11,850 --> 00:26:17,159
here I can check in right from here and

00:26:14,220 --> 00:26:20,940
there and and then I can also check out

00:26:17,159 --> 00:26:22,679
from any gate branch so once you are

00:26:20,940 --> 00:26:25,169
happy with the changes you can run this

00:26:22,679 --> 00:26:27,720
application locally using hanoks place

00:26:25,169 --> 00:26:30,240
or honda hana that is running in premise

00:26:27,720 --> 00:26:32,340
and what do i do now to deploy in cloud

00:26:30,240 --> 00:26:34,409
foundry so basically one of the things

00:26:32,340 --> 00:26:37,860
this brings is that we have written a

00:26:34,409 --> 00:26:41,220
cloud foundry CLI plugin to deploy this

00:26:37,860 --> 00:26:44,159
MTA so when i say export after this it

00:26:41,220 --> 00:26:46,169
will generate MTA and the MTA is

00:26:44,159 --> 00:26:49,919
basically looks something like a archive

00:26:46,169 --> 00:26:53,429
and then i can take this MTA and i can

00:26:49,919 --> 00:26:56,100
download it to my local system on the

00:26:53,429 --> 00:26:59,880
command prompt and then i can go to my

00:26:56,100 --> 00:27:02,010
cloud foundry the cloud foundry CLI and

00:26:59,880 --> 00:27:07,890
i can use as it command called c of

00:27:02,010 --> 00:27:10,230
deploy and and i can just deploy the tar

00:27:07,890 --> 00:27:12,240
file em tar file so this will take care

00:27:10,230 --> 00:27:14,429
of creating the database into the cloud

00:27:12,240 --> 00:27:16,049
foundry also it will create it will

00:27:14,429 --> 00:27:19,590
deploy all the services into the cloud

00:27:16,049 --> 00:27:23,220
400 landscape and also i can i can also

00:27:19,590 --> 00:27:25,649
have option of using the yamen file to

00:27:23,220 --> 00:27:27,120
change the host names and also change

00:27:25,649 --> 00:27:29,309
the memory and although so this is an

00:27:27,120 --> 00:27:31,380
example of the yamen file that we are

00:27:29,309 --> 00:27:33,419
using and this is also shows you how we

00:27:31,380 --> 00:27:36,320
are binding to the different services on

00:27:33,419 --> 00:27:36,320
the backing services

00:27:37,270 --> 00:27:40,270
yeah

00:27:49,940 --> 00:27:55,370
so that basically brings to conclusion

00:27:53,430 --> 00:27:58,020
what we wanted to present just to recap

00:27:55,370 --> 00:28:00,660
Cloud Foundry is really meant to

00:27:58,020 --> 00:28:03,060
simplify a developer's task to create an

00:28:00,660 --> 00:28:04,770
application without worrying about what

00:28:03,060 --> 00:28:06,660
are the different runtimes involved what

00:28:04,770 --> 00:28:09,000
versions of which library has to be

00:28:06,660 --> 00:28:11,760
running where how they are connected

00:28:09,000 --> 00:28:14,040
together how do they scale so and in

00:28:11,760 --> 00:28:16,410
order to bring this benefit in a really

00:28:14,040 --> 00:28:18,210
really simple form for a developer now

00:28:16,410 --> 00:28:20,340
we got three ways in which you can use

00:28:18,210 --> 00:28:21,750
the benefit of Cloud Foundry have a

00:28:20,340 --> 00:28:24,570
cloud foundry instance running on your

00:28:21,750 --> 00:28:26,850
laptop with very powerful Hana

00:28:24,570 --> 00:28:28,560
and other backing services available so

00:28:26,850 --> 00:28:30,000
you can get a feel of how to use cloud

00:28:28,560 --> 00:28:31,920
found interface build enterprise

00:28:30,000 --> 00:28:33,930
applications so that is mainly to learn

00:28:31,920 --> 00:28:36,090
and experiment now then you can have a

00:28:33,930 --> 00:28:38,070
team and collaboratively using tooling

00:28:36,090 --> 00:28:39,480
like github and others you can build

00:28:38,070 --> 00:28:41,130
that application and when you are

00:28:39,480 --> 00:28:44,370
totally happy to push it to production

00:28:41,130 --> 00:28:47,130
then you can use the same interface CF

00:28:44,370 --> 00:28:48,960
push or CF deploy and have that

00:28:47,130 --> 00:28:50,640
application deployed in the cloud so

00:28:48,960 --> 00:28:53,820
there's overall model and what we have

00:28:50,640 --> 00:28:56,190
shown you here is still a slice of the

00:28:53,820 --> 00:28:58,560
overall cloud platform asipi cloud

00:28:56,190 --> 00:29:02,070
platform then includes plethora of other

00:28:58,560 --> 00:29:03,660
services for analytics mobility there's

00:29:02,070 --> 00:29:07,710
an entire suite for integration

00:29:03,660 --> 00:29:09,480
requirements collaboration jam and then

00:29:07,710 --> 00:29:11,760
obviously can add your own runtimes and

00:29:09,480 --> 00:29:13,560
add your own services and all of this is

00:29:11,760 --> 00:29:16,020
available in a multi cloud setting on

00:29:13,560 --> 00:29:18,360
different is options that you have today

00:29:16,020 --> 00:29:20,280
and obviously it's also running in ACP

00:29:18,360 --> 00:29:21,990
data center so that's that's the whole

00:29:20,280 --> 00:29:23,490
story I hope this gives you a general

00:29:21,990 --> 00:29:24,930
idea of what is CP is doing with cloud

00:29:23,490 --> 00:29:27,120
foundry and how we all made it super

00:29:24,930 --> 00:29:29,580
easy for you to get started so if you

00:29:27,120 --> 00:29:32,940
want to get started today it's really

00:29:29,580 --> 00:29:35,220
easy you can browse for Google for Hana

00:29:32,940 --> 00:29:37,320
Express Edition with that you can get a

00:29:35,220 --> 00:29:40,230
Hana system running on your laptop and

00:29:37,320 --> 00:29:43,140
then you can also get a trial version of

00:29:40,230 --> 00:29:45,750
ACP cloud platform so cloud platform DCP

00:29:43,140 --> 00:29:47,640
comm there you can sign up for a trial

00:29:45,750 --> 00:29:49,950
account and it's a perpetual trial

00:29:47,640 --> 00:29:51,540
account and within three minutes we

00:29:49,950 --> 00:29:53,730
think that you should be able to have a

00:29:51,540 --> 00:29:55,650
CF push code and deploy a useful

00:29:53,730 --> 00:29:57,710
application so that's pretty much what

00:29:55,650 --> 00:30:00,180
we wanted to conclude with

00:29:57,710 --> 00:30:01,680
we basically wanted to display our email

00:30:00,180 --> 00:30:03,570
address but anybody who is interested

00:30:01,680 --> 00:30:07,640
can obviously stop by or look up for our

00:30:03,570 --> 00:30:09,860
contacts online thank you for being here

00:30:07,640 --> 00:30:13,500
[Applause]

00:30:09,860 --> 00:30:22,830
and of course if there any questions you

00:30:13,500 --> 00:30:27,060
can still yep so two things Hana Express

00:30:22,830 --> 00:30:29,610
Edition is the downloadable Hana system

00:30:27,060 --> 00:30:32,580
that you can play with right that's for

00:30:29,610 --> 00:30:36,780
local instance cloud platform da TCP

00:30:32,580 --> 00:30:39,180
comm is sa piece cut foundry based cloud

00:30:36,780 --> 00:30:41,970
platform running in various different is

00:30:39,180 --> 00:30:43,220
options so cloud platform da TCP calm

00:30:41,970 --> 00:30:46,350
yep

00:30:43,220 --> 00:30:48,540
any other last question I think we have

00:30:46,350 --> 00:30:50,160
one more presentation after this so we

00:30:48,540 --> 00:30:51,210
can obviously continue the conversation

00:30:50,160 --> 00:30:55,130
offstage as well

00:30:51,210 --> 00:30:55,130

YouTube URL: https://www.youtube.com/watch?v=JwDRK_7GuB4


