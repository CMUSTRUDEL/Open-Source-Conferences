Title: Monetizing Your Applications Using Cloud Foundry Abacus and Billing Engines
Publication date: 2017-06-22
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	Monetizing Your Applications Using Cloud Foundry Abacus and Billing Engines [I] - Pankaj Kumar, SAP    

This session will demonstrate how CF Abacus is used for metering your applications. Based on this we can monetize on various attributes like API Calls, Resources consumed etc. This session will include an end to end scenario of enabling metering for an existing application. Followed by pushing the metered data into a rating and billing system there by triggering an invoice to the customer. The demo will use the knowledge and experience we have gathered at SAP in monetizing some of our cloud solutions using Cloud Foundry.

Pankaj Kumar
Product Manager, SAP
Pankaj Kumar is a product manager for SAP Cloud Platform where he focuses on commercialization aspects of the various platform resources and services. He has been a speaker at various Industry events like SAP TechEd, ASUG etc.

Nick Milani
VP Strategy & Solution Managment, SAP
Bucket list: Neural implants, holodeck, space travel, 488 Spider, Drum with AC/DC, DJ at Berghain. MBA, BSc (Software Engineering). Australia - France - USA
Captions: 
	00:00:00,060 --> 00:00:06,180
hello everyone hope everybody is having

00:00:02,580 --> 00:00:08,820
a good summit so far with the fidgets

00:00:06,180 --> 00:00:10,200
spinners and beer mugs what in swag but

00:00:08,820 --> 00:00:11,820
what more do you want from a tech

00:00:10,200 --> 00:00:16,139
conference right this fidgets finish

00:00:11,820 --> 00:00:18,000
yeah you see them yet find out on the

00:00:16,139 --> 00:00:20,039
booth crawl alright welcome to our

00:00:18,000 --> 00:00:23,100
session on monetizing your applications

00:00:20,039 --> 00:00:25,740
using CF abacus and billing engines

00:00:23,100 --> 00:00:29,060
I am Pankaj Kumar part of SME cloud

00:00:25,740 --> 00:00:32,460
platform I'm joined by my colleague Nick

00:00:29,060 --> 00:00:34,800
hi Nick Milani VP of strategy and social

00:00:32,460 --> 00:00:36,510
management for the s AP Haris revenue

00:00:34,800 --> 00:00:39,930
solutions which consists of harvest

00:00:36,510 --> 00:00:42,710
billing and high price revenue cloud so

00:00:39,930 --> 00:00:46,530
this session is all about converting

00:00:42,710 --> 00:00:48,480
api's or bits to dollars right or if our

00:00:46,530 --> 00:00:51,289
Bitcoin friends or etherium friends have

00:00:48,480 --> 00:00:53,730
their way bits to bits bits of bitcoins

00:00:51,289 --> 00:00:57,180
when Nick and I were planning for this

00:00:53,730 --> 00:00:59,640
session and we came up well like what

00:00:57,180 --> 00:01:03,300
should we use to monetize our API I mean

00:00:59,640 --> 00:01:05,040
if we look at it's really easy to give

00:01:03,300 --> 00:01:09,000
like hello world examples or we could

00:01:05,040 --> 00:01:11,070
have chosen something like monetizing

00:01:09,000 --> 00:01:14,580
storage or monetizing compute which is

00:01:11,070 --> 00:01:16,470
really Cloud Foundry is about or we we

00:01:14,580 --> 00:01:19,619
are from s AP the enterprise company we

00:01:16,470 --> 00:01:22,590
could have chosen monetizing create

00:01:19,619 --> 00:01:24,540
sales order or hire employees but that's

00:01:22,590 --> 00:01:26,939
that's kinda you know ok we do that for

00:01:24,540 --> 00:01:31,259
work so let's take and if you have

00:01:26,939 --> 00:01:33,090
attended a be Karen's session yesterday

00:01:31,259 --> 00:01:35,970
she talked about the number four point

00:01:33,090 --> 00:01:39,570
was think big so we went with sci-fi as

00:01:35,970 --> 00:01:41,700
a theme of our monetizing api's there's

00:01:39,570 --> 00:01:44,850
this really beautiful if you like sci-fi

00:01:41,700 --> 00:01:50,340
a sitcom called the expanse anybody has

00:01:44,850 --> 00:01:53,659
seen it it's a it's it's it's a very set

00:01:50,340 --> 00:01:55,380
up in the to 200 years from now where

00:01:53,659 --> 00:01:56,579
interplanetary okay we didn't go

00:01:55,380 --> 00:02:00,960
intergalactic we just went

00:01:56,579 --> 00:02:06,060
interplanetary travel is easy and so our

00:02:00,960 --> 00:02:08,250
setup is that I am ship captain ship of

00:02:06,060 --> 00:02:11,310
an interplanetary ship and then I need

00:02:08,250 --> 00:02:13,370
to use or an API is from let's say a

00:02:11,310 --> 00:02:15,379
travel organization we

00:02:13,370 --> 00:02:19,129
I let's say I'm going from Earth to Mars

00:02:15,379 --> 00:02:22,610
and I need to reserve our space trip or

00:02:19,129 --> 00:02:25,480
I want to get pricing maybe you know

00:02:22,610 --> 00:02:29,000
there are surge pricing involved where

00:02:25,480 --> 00:02:32,030
if I do certain ways maybe stop at

00:02:29,000 --> 00:02:33,709
asteroid in the middle the pricing is

00:02:32,030 --> 00:02:35,569
different so there's another API that we

00:02:33,709 --> 00:02:39,319
want to monetize and then there are

00:02:35,569 --> 00:02:41,989
space ship API like get imagery that the

00:02:39,319 --> 00:02:43,700
spaceship is using so those are the API

00:02:41,989 --> 00:02:45,349
is that we will monetize and that's

00:02:43,700 --> 00:02:49,040
that's the background we will be working

00:02:45,349 --> 00:02:52,549
on to set up further context oh I'll

00:02:49,040 --> 00:02:55,480
have Nick speak on thanks bug cache and

00:02:52,549 --> 00:02:58,700
I love the I love this set up for this

00:02:55,480 --> 00:03:01,340
so I you know API is everywhere

00:02:58,700 --> 00:03:02,870
everything is a service and we are 200

00:03:01,340 --> 00:03:04,519
years in the future here but all of us

00:03:02,870 --> 00:03:06,440
are trying to make this reality now as

00:03:04,519 --> 00:03:08,900
you know but in this ecosystem that

00:03:06,440 --> 00:03:10,220
Pankaj described there are a number of

00:03:08,900 --> 00:03:11,599
different actors and for the purpose of

00:03:10,220 --> 00:03:13,549
this talk we've identified three major

00:03:11,599 --> 00:03:15,379
groups here so have your platform

00:03:13,549 --> 00:03:18,139
providers right these are the guys with

00:03:15,379 --> 00:03:19,609
the big spaceship quite ironic there's a

00:03:18,139 --> 00:03:20,870
big guy with a big platform down the

00:03:19,609 --> 00:03:22,220
road there that's already working out of

00:03:20,870 --> 00:03:22,819
a spaceship so maybe this is not so

00:03:22,220 --> 00:03:25,430
futuristic

00:03:22,819 --> 00:03:27,769
anyway but these guys have services and

00:03:25,430 --> 00:03:30,980
products on their platform they charge n

00:03:27,769 --> 00:03:32,629
customers and you know they're they're

00:03:30,980 --> 00:03:34,910
the central point offering all these

00:03:32,629 --> 00:03:36,950
different types of services also in this

00:03:34,910 --> 00:03:39,109
ecosystem you have external developers

00:03:36,950 --> 00:03:40,430
right they're the guys that are the

00:03:39,109 --> 00:03:42,349
platform providers are trying to get on

00:03:40,430 --> 00:03:44,449
onto their platform they're selling

00:03:42,349 --> 00:03:46,160
things as well or via the platform I

00:03:44,449 --> 00:03:47,629
mean when it comes to market services

00:03:46,160 --> 00:03:49,400
and this is one of the things we're

00:03:47,629 --> 00:03:50,780
focusing on today they may have to

00:03:49,400 --> 00:03:52,370
actually pay for some other services

00:03:50,780 --> 00:03:55,459
they're using from other teams or other

00:03:52,370 --> 00:03:58,250
groups thirdly and perhaps most

00:03:55,459 --> 00:04:00,500
importantly one we've seen internally at

00:03:58,250 --> 00:04:02,720
sa P here already is that there's an

00:04:00,500 --> 00:04:04,489
internal development component as soon

00:04:02,720 --> 00:04:06,470
as you have this garden of micro

00:04:04,489 --> 00:04:08,299
services you need to find a way to keep

00:04:06,470 --> 00:04:10,940
all the different actors in the

00:04:08,299 --> 00:04:11,900
ecosystem adequately compensated and it

00:04:10,940 --> 00:04:14,419
could be monetary it could be

00:04:11,900 --> 00:04:15,500
non-monetary right but either any in the

00:04:14,419 --> 00:04:17,209
end they're all going to have their own

00:04:15,500 --> 00:04:18,739
different objectives and KPIs and then

00:04:17,209 --> 00:04:21,109
it's going to be neatly

00:04:18,739 --> 00:04:25,330
they're going to need to be adequately

00:04:21,109 --> 00:04:25,330
compensated for this ecosystem to work

00:04:25,500 --> 00:04:28,740
we are seeing some examples of this out

00:04:27,540 --> 00:04:30,150
there already perhaps some of you have

00:04:28,740 --> 00:04:32,460
already seen them I mean Netflix have

00:04:30,150 --> 00:04:34,110
talked a lot about their micro service

00:04:32,460 --> 00:04:35,580
journey and some of the challenges they

00:04:34,110 --> 00:04:36,930
face particularly when it comes to

00:04:35,580 --> 00:04:38,820
dealing with micro servers created by

00:04:36,930 --> 00:04:40,680
many different groups at Twitter I have

00:04:38,820 --> 00:04:42,120
some great content out there too they

00:04:40,680 --> 00:04:44,040
actually went out and specifically build

00:04:42,120 --> 00:04:45,390
a system for the chargeback mechanisms

00:04:44,040 --> 00:04:48,090
is a really great presentation we've got

00:04:45,390 --> 00:04:49,800
link they're very very detailed but one

00:04:48,090 --> 00:04:51,990
I've had I guess hands-on experience

00:04:49,800 --> 00:04:54,120
with we is that sa P when we launched

00:04:51,990 --> 00:04:56,460
our harvest as a service platform which

00:04:54,120 --> 00:04:58,260
is our micro service marketplace based

00:04:56,460 --> 00:05:01,230
on the SPL platform it's all Cloud

00:04:58,260 --> 00:05:02,820
Foundry underneath and we have hundreds

00:05:01,230 --> 00:05:04,380
of development teams at s ap right and

00:05:02,820 --> 00:05:06,900
we needed to figure out a way to

00:05:04,380 --> 00:05:14,190
adequately compensate all of them and

00:05:06,900 --> 00:05:16,050
it's it's not so simple right so so what

00:05:14,190 --> 00:05:18,600
we are going to use for this is CF

00:05:16,050 --> 00:05:20,900
abacus I hope anybody uses C of abacus

00:05:18,600 --> 00:05:25,200
or contributes code to it over here

00:05:20,900 --> 00:05:27,660
okay so CF abacus is it's a building

00:05:25,200 --> 00:05:30,540
it's a metering and aggregation engine

00:05:27,660 --> 00:05:34,710
so when when you have an application

00:05:30,540 --> 00:05:36,660
that needs to be metered so maybe you

00:05:34,710 --> 00:05:40,140
are calling certain API is maybe you

00:05:36,660 --> 00:05:41,940
want to store how much this how much of

00:05:40,140 --> 00:05:44,700
the compute has been used or how much of

00:05:41,940 --> 00:05:48,360
the persistent storage has been used

00:05:44,700 --> 00:05:49,830
then you can measure that using CF

00:05:48,360 --> 00:05:52,290
abacus you essentially send certain

00:05:49,830 --> 00:05:54,960
calls to see of abacus so it's a really

00:05:52,290 --> 00:05:58,110
neat solution that that has been

00:05:54,960 --> 00:06:00,570
developed in an open source way IBM and

00:05:58,110 --> 00:06:04,979
sa P has contributed quite a lot of code

00:06:00,570 --> 00:06:07,310
to it it's a set of about six micro

00:06:04,979 --> 00:06:10,110
services one for metering one for

00:06:07,310 --> 00:06:13,200
collecting collect as a collector then

00:06:10,110 --> 00:06:17,340
accumulation and aggregation but why is

00:06:13,200 --> 00:06:19,260
CF abacus important if you you follow

00:06:17,340 --> 00:06:22,110
Cloud Foundry there is Bosh so Bosh is

00:06:19,260 --> 00:06:23,910
famous for helping you with day one and

00:06:22,110 --> 00:06:27,900
day two problems day one problem being

00:06:23,910 --> 00:06:30,300
how to get the system deployed properly

00:06:27,900 --> 00:06:33,450
with all the dependencies and then day 2

00:06:30,300 --> 00:06:35,430
keeping it live so I call it CF abacus

00:06:33,450 --> 00:06:38,460
as that solving the day 30 problem

00:06:35,430 --> 00:06:38,910
meaning I need to build my customers

00:06:38,460 --> 00:06:41,670
maybe

00:06:38,910 --> 00:06:43,680
these are external customers like ASAP

00:06:41,670 --> 00:06:45,840
operates the platform IBM has their

00:06:43,680 --> 00:06:47,760
platform Google AWS so they need to

00:06:45,840 --> 00:06:50,430
build their customers at the end of the

00:06:47,760 --> 00:06:53,400
month or quarter so that's the de 30

00:06:50,430 --> 00:06:55,200
problem it could also be that let's say

00:06:53,400 --> 00:06:57,630
you are comcast comcast at agreed

00:06:55,200 --> 00:07:01,140
sassing yesterday your Comcast and then

00:06:57,630 --> 00:07:04,230
a lot of internal teams are using your

00:07:01,140 --> 00:07:07,170
api's or you're using your applications

00:07:04,230 --> 00:07:09,300
and you want to charge back that

00:07:07,170 --> 00:07:12,030
internal allocation so that's those are

00:07:09,300 --> 00:07:15,300
the problems where CF abacus will come

00:07:12,030 --> 00:07:20,880
in to meter api's and various basic

00:07:15,300 --> 00:07:22,410
primitives what CFM occurs has certain

00:07:20,880 --> 00:07:24,630
limitation and these were the

00:07:22,410 --> 00:07:26,190
constraints that they design the system

00:07:24,630 --> 00:07:29,490
with that it's not an invoicing or

00:07:26,190 --> 00:07:31,290
billing system that you cannot send an

00:07:29,490 --> 00:07:33,150
invoice to a customer for internal

00:07:31,290 --> 00:07:36,410
allocation is fine like Comcast charging

00:07:33,150 --> 00:07:40,110
their internal developers or internal

00:07:36,410 --> 00:07:43,260
organizations but when it's a.s.a.p or

00:07:40,110 --> 00:07:44,610
Google or AWS or you know or pivotal

00:07:43,260 --> 00:07:48,230
they need to send invoices to their

00:07:44,610 --> 00:07:50,490
customers so that part is not covered by

00:07:48,230 --> 00:07:55,169
CF abacus so then there are these

00:07:50,490 --> 00:07:57,180
billing engines and we do our own dog

00:07:55,169 --> 00:07:59,550
food recipe so we have a commercial

00:07:57,180 --> 00:08:01,680
solution called revenue cloud which is

00:07:59,550 --> 00:08:04,530
kind of the cloud native baby of our

00:08:01,680 --> 00:08:07,350
much bigger solution called hybrid

00:08:04,530 --> 00:08:10,919
billing so we use revenue cloud and we I

00:08:07,350 --> 00:08:14,250
will demonstrate revenue cloud in our

00:08:10,919 --> 00:08:17,010
demo so one thing we need to understand

00:08:14,250 --> 00:08:19,380
the difference between let's say when we

00:08:17,010 --> 00:08:21,540
are doing Cloud Foundry like scenarios

00:08:19,380 --> 00:08:23,730
subscription billing usage billing and

00:08:21,540 --> 00:08:26,070
when you buy let's say a product from

00:08:23,730 --> 00:08:27,630
Amazon there the difference is the

00:08:26,070 --> 00:08:30,570
continued relationship when I buy

00:08:27,630 --> 00:08:32,400
something from Costco I buy and the

00:08:30,570 --> 00:08:35,400
transaction is over at that time right

00:08:32,400 --> 00:08:39,750
that's the buying a discrete product in

00:08:35,400 --> 00:08:41,729
case of when I have when I buy a

00:08:39,750 --> 00:08:43,469
subscription from a provider and

00:08:41,729 --> 00:08:45,780
subscriptions are not new I mean

00:08:43,469 --> 00:08:47,880
everybody has had newspaper

00:08:45,780 --> 00:08:50,850
subscriptions I guess from the time of

00:08:47,880 --> 00:08:52,209
Gutenberg probably but so subscription

00:08:50,850 --> 00:08:53,740
is not new but

00:08:52,209 --> 00:08:55,509
subscriptions are different from buying

00:08:53,740 --> 00:08:58,240
discrete products in the sense that you

00:08:55,509 --> 00:09:00,759
have a continued relationship that the

00:08:58,240 --> 00:09:02,079
as you you go along with the

00:09:00,759 --> 00:09:04,660
relationship you keep paying for the

00:09:02,079 --> 00:09:06,550
product so there's the concept of

00:09:04,660 --> 00:09:08,889
continued relationship that's not there

00:09:06,550 --> 00:09:11,379
in abacus it's a it's it's there in

00:09:08,889 --> 00:09:16,179
billing engines or revenue cloud and

00:09:11,379 --> 00:09:18,879
then CF abacus acts as a calculator it's

00:09:16,179 --> 00:09:21,369
a big calculator like it it it does not

00:09:18,879 --> 00:09:24,490
have a state in that sense that I did

00:09:21,369 --> 00:09:27,249
this transaction and now I need to move

00:09:24,490 --> 00:09:29,860
to another transaction it will it will

00:09:27,249 --> 00:09:32,230
price the transaction like I am going to

00:09:29,860 --> 00:09:35,290
do this API and this is how much it's

00:09:32,230 --> 00:09:37,179
going to charge but what about all the

00:09:35,290 --> 00:09:39,759
different kinds of API is that I call

00:09:37,179 --> 00:09:41,589
and now I need a consolidated invoice or

00:09:39,759 --> 00:09:44,980
a bill at the end of the month so that's

00:09:41,589 --> 00:09:47,519
those were the constraint around with CF

00:09:44,980 --> 00:09:49,600
abacus was designed it is metering

00:09:47,519 --> 00:09:51,279
accumulation and aggregation it's not

00:09:49,600 --> 00:09:53,529
billing engine so that's what revenue

00:09:51,279 --> 00:09:58,179
cloud provides so we have two sites CF

00:09:53,529 --> 00:09:59,980
abacus and revenue cloud if we look at

00:09:58,179 --> 00:10:01,299
what this architecture looks like what

00:09:59,980 --> 00:10:02,679
we have is a very simple

00:10:01,299 --> 00:10:04,439
I guess fairly standard billing

00:10:02,679 --> 00:10:06,639
architecture where you have a user

00:10:04,439 --> 00:10:07,899
consuming services on the end and it

00:10:06,639 --> 00:10:10,119
could could be users it could be

00:10:07,899 --> 00:10:12,699
applications could be anything it goes

00:10:10,119 --> 00:10:15,129
up in the cloud and then is meted by see

00:10:12,699 --> 00:10:17,129
if abacus in this case then after that

00:10:15,129 --> 00:10:19,959
the billing engine kicks in right and

00:10:17,129 --> 00:10:21,970
it's calculating things it knows the

00:10:19,959 --> 00:10:23,559
contract terms the pricing all those

00:10:21,970 --> 00:10:25,360
type of things and of course then it had

00:10:23,559 --> 00:10:26,499
you know creates the correspondence with

00:10:25,360 --> 00:10:28,600
the customer

00:10:26,499 --> 00:10:30,759
charges credit cards other payment

00:10:28,600 --> 00:10:32,439
methods whatever it is also follows up

00:10:30,759 --> 00:10:33,600
if they decide not to pay a can't pay or

00:10:32,439 --> 00:10:36,040
things like that

00:10:33,600 --> 00:10:37,209
what's perhaps different here in this

00:10:36,040 --> 00:10:38,199
type of ecosystem with all these

00:10:37,209 --> 00:10:39,459
different parties is in the building

00:10:38,199 --> 00:10:41,589
engines doing a lot of different things

00:10:39,459 --> 00:10:43,569
it's taking a single transaction in and

00:10:41,589 --> 00:10:44,949
potentially creating five or ten

00:10:43,569 --> 00:10:47,619
transactions behind depending on who

00:10:44,949 --> 00:10:48,910
needs to get paid what based on what the

00:10:47,619 --> 00:10:50,170
end user is doing and they don't

00:10:48,910 --> 00:10:51,699
necessarily see that part at all

00:10:50,170 --> 00:10:55,660
happened behind it's all managed behind

00:10:51,699 --> 00:10:57,639
the scenes so to solve this we decided

00:10:55,660 --> 00:11:01,209
to build a new solution based on how

00:10:57,639 --> 00:11:02,490
clownery cloud platform on micro

00:11:01,209 --> 00:11:04,899
services it was a very tough decision

00:11:02,490 --> 00:11:06,070
ASAP we're you know we've been around a

00:11:04,899 --> 00:11:07,690
long time we have a lot

00:11:06,070 --> 00:11:10,180
of assets in this space already but we

00:11:07,690 --> 00:11:12,250
decided we needed to sort of make this

00:11:10,180 --> 00:11:14,410
sort of dramatic shift to get to where

00:11:12,250 --> 00:11:18,040
we need to be and to lay the ground that

00:11:14,410 --> 00:11:20,020
the foundation and we also relooked at

00:11:18,040 --> 00:11:22,300
what the scope means in in you know in

00:11:20,020 --> 00:11:24,400
this era for for a billing solution we

00:11:22,300 --> 00:11:26,320
decided on the quote to cash scope so

00:11:24,400 --> 00:11:28,480
it's everything from auto-configuration

00:11:26,320 --> 00:11:30,310
so when we're talking about api's and

00:11:28,480 --> 00:11:32,380
you know subscribing to api's or buying

00:11:30,310 --> 00:11:35,020
api's it's quite basic but consider the

00:11:32,380 --> 00:11:38,260
fact that many of our customers bundling

00:11:35,020 --> 00:11:39,730
physical products digital products api's

00:11:38,260 --> 00:11:40,960
themselves all things together and we

00:11:39,730 --> 00:11:42,430
have to manage the pricing and the

00:11:40,960 --> 00:11:43,750
discounting and the rebates and all

00:11:42,430 --> 00:11:46,270
those type of things together so that's

00:11:43,750 --> 00:11:48,430
the quoting process quite complex also

00:11:46,270 --> 00:11:50,590
the order management right so activating

00:11:48,430 --> 00:11:52,330
things in provisioning system sitting up

00:11:50,590 --> 00:11:54,190
tenants what depending on whatever is

00:11:52,330 --> 00:11:55,090
being sold is obviously a lot of other

00:11:54,190 --> 00:11:57,280
things that need to happen they're

00:11:55,090 --> 00:11:58,720
shipping out physical goods in some

00:11:57,280 --> 00:12:00,520
cases and then of course all the

00:11:58,720 --> 00:12:02,950
downstream billing processes which we're

00:12:00,520 --> 00:12:04,480
focusing on in enterprise scenarios

00:12:02,950 --> 00:12:06,670
there's also a lot of integration to

00:12:04,480 --> 00:12:08,080
other other systems so we've got a few

00:12:06,670 --> 00:12:11,410
examples on the screen it's not an

00:12:08,080 --> 00:12:13,630
exhaustive list commerce interfaces so

00:12:11,410 --> 00:12:15,910
commerce system so to allow customers

00:12:13,630 --> 00:12:17,650
where it's b2b or b2c to go and buy and

00:12:15,910 --> 00:12:20,200
subscribe to your services like any

00:12:17,650 --> 00:12:21,730
marketplace as one example I'll say

00:12:20,200 --> 00:12:24,700
Mississippi we do a lot of b2b as well

00:12:21,730 --> 00:12:26,410
so we need to cook into CRM so when our

00:12:24,700 --> 00:12:29,260
direct sales go out there and and do

00:12:26,410 --> 00:12:31,000
business service reps and also back-end

00:12:29,260 --> 00:12:33,160
system so if you are sending out

00:12:31,000 --> 00:12:34,360
physical products you do need to you

00:12:33,160 --> 00:12:36,010
know connect into your fulfillment

00:12:34,360 --> 00:12:37,780
systems and of course finance right

00:12:36,010 --> 00:12:39,370
because not much in the enterprise gets

00:12:37,780 --> 00:12:44,080
past the CFO unless you have a nice

00:12:39,370 --> 00:12:46,690
story so we designed this to cater to a

00:12:44,080 --> 00:12:48,460
broad base of our customer so I'm trying

00:12:46,690 --> 00:12:49,780
to build something for thousands of our

00:12:48,460 --> 00:12:51,970
customers not just you know a

00:12:49,780 --> 00:12:54,180
single-digit number you can go out and

00:12:51,970 --> 00:12:56,440
build this thing for your cust

00:12:54,180 --> 00:12:57,640
specific problem and like Twitter and

00:12:56,440 --> 00:12:58,720
some others have gone out and done that

00:12:57,640 --> 00:13:00,970
what we're trying to do is build

00:12:58,720 --> 00:13:03,010
something more generic they can be

00:13:00,970 --> 00:13:04,780
applicable to many of our customers what

00:13:03,010 --> 00:13:07,000
do we go to marketing 25 industries now

00:13:04,780 --> 00:13:08,680
I don't know I always lose count but you

00:13:07,000 --> 00:13:12,700
know trying to build this for a very

00:13:08,680 --> 00:13:16,330
broad base of customers alright so now

00:13:12,700 --> 00:13:18,230
let's the demo time so the way we have

00:13:16,330 --> 00:13:21,320
structured the demo is that I have

00:13:18,230 --> 00:13:23,420
abacus running locally on my notebook I

00:13:21,320 --> 00:13:26,329
could have run it in the you know in in

00:13:23,420 --> 00:13:29,810
a Cloud Foundry instance I will generate

00:13:26,329 --> 00:13:32,089
certain usages meaning some some

00:13:29,810 --> 00:13:34,790
applications are calling certain api's

00:13:32,089 --> 00:13:38,779
so I will generate that in postman and

00:13:34,790 --> 00:13:41,170
send it to CFA because from there it

00:13:38,779 --> 00:13:45,769
will be picked by some kind of a

00:13:41,170 --> 00:13:47,690
integration platform and that usage will

00:13:45,769 --> 00:13:50,180
be picked at the end of the month or

00:13:47,690 --> 00:13:52,310
whatever frequency we define and send to

00:13:50,180 --> 00:13:55,130
revenue cloud and in the revenue cloud

00:13:52,310 --> 00:13:58,339
we have the concept of the customer and

00:13:55,130 --> 00:14:09,680
generation of invoices so let's let's go

00:13:58,339 --> 00:14:12,589
the demo gods are smiling today so that

00:14:09,680 --> 00:14:14,839
means so see if epic abacus is really

00:14:12,589 --> 00:14:16,790
really small I mean in the sense that

00:14:14,839 --> 00:14:18,800
you can run it in a small footprint or a

00:14:16,790 --> 00:14:21,410
larger footprint and it can scale in

00:14:18,800 --> 00:14:25,370
large profiles so what I have over here

00:14:21,410 --> 00:14:27,350
is just a clone of CF repository CF

00:14:25,370 --> 00:14:31,339
abacus repository from here I mean all I

00:14:27,350 --> 00:14:34,130
did was get clone and then I've already

00:14:31,339 --> 00:14:36,050
done the dependency install over here so

00:14:34,130 --> 00:14:38,500
you don't have to see it downloading the

00:14:36,050 --> 00:14:43,010
internet but now I can just say NPM

00:14:38,500 --> 00:14:45,980
start and it starts all the six micro

00:14:43,010 --> 00:14:48,339
services that CF abacus has one for

00:14:45,980 --> 00:14:50,510
metering one for collection one for

00:14:48,339 --> 00:14:57,290
accumulation etcetera so now that it

00:14:50,510 --> 00:15:00,019
started let's send some usage so in real

00:14:57,290 --> 00:15:02,480
life this usage will be sent by your

00:15:00,019 --> 00:15:06,199
applications like your application is

00:15:02,480 --> 00:15:08,089
either calling this API or it creates if

00:15:06,199 --> 00:15:09,290
you do it's synchronous then it will be

00:15:08,089 --> 00:15:13,880
a blocking call so your application

00:15:09,290 --> 00:15:15,920
might stay there for some milliseconds

00:15:13,880 --> 00:15:19,730
if you want to make it really scalable

00:15:15,920 --> 00:15:21,889
then you put these metering API calls in

00:15:19,730 --> 00:15:26,260
some kind of a queue so that your

00:15:21,889 --> 00:15:31,790
application keeps going on I have these

00:15:26,260 --> 00:15:41,150
case it's a little small so let me

00:15:31,790 --> 00:15:50,300
put into the current time in this so

00:15:41,150 --> 00:15:52,660
when did the transaction happen in

00:15:50,300 --> 00:15:52,660
milliseconds

00:15:58,850 --> 00:16:03,529
you can see certain things like which

00:16:00,800 --> 00:16:06,139
which identify the call which

00:16:03,529 --> 00:16:08,240
organization is calling this and what

00:16:06,139 --> 00:16:11,389
kind of a resource it is what kind of

00:16:08,240 --> 00:16:13,370
plan it is and then the three API is

00:16:11,389 --> 00:16:17,540
that I talked earlier that I am going to

00:16:13,370 --> 00:16:21,380
call three API calls with quantity ten

00:16:17,540 --> 00:16:23,240
for reserve than 100 for query the

00:16:21,380 --> 00:16:27,740
pricing API calls and then another

00:16:23,240 --> 00:16:33,699
hundred for imagery okay so when I sent

00:16:27,740 --> 00:16:38,389
this it it creates a usage record inside

00:16:33,699 --> 00:16:40,029
abacuses persistent storage in in

00:16:38,389 --> 00:16:42,620
production you typically use MongoDB

00:16:40,029 --> 00:16:45,350
over here I'm using something called

00:16:42,620 --> 00:16:49,370
pouch server which is similar concept

00:16:45,350 --> 00:16:51,800
and if I go over here and see so I just

00:16:49,370 --> 00:16:53,690
sent one right I can see there is one

00:16:51,800 --> 00:16:57,350
record so for example I can send like

00:16:53,690 --> 00:17:06,679
two more and this will update and so

00:16:57,350 --> 00:17:08,780
let's say I'll just do this so that's

00:17:06,679 --> 00:17:14,380
another so there's a second usage being

00:17:08,780 --> 00:17:17,240
sent and just for fun let's and one more

00:17:14,380 --> 00:17:19,100
I'm changing the time the transaction is

00:17:17,240 --> 00:17:21,770
happening because if I send it with the

00:17:19,100 --> 00:17:23,000
same time the abacus has a logic where

00:17:21,770 --> 00:17:25,329
it will say it's a duplicate usage

00:17:23,000 --> 00:17:25,329
record

00:17:30,980 --> 00:17:35,360
see I try to send the third usage again

00:17:33,440 --> 00:17:40,250
and it's a duplicate record so let's see

00:17:35,360 --> 00:17:43,040
if I got all the three usages over here

00:17:40,250 --> 00:17:47,630
you can see it's 4/4 one was a duplicate

00:17:43,040 --> 00:17:50,060
which will not be counted ok so now we

00:17:47,630 --> 00:17:52,760
have this usage sitting in our metering

00:17:50,060 --> 00:17:55,010
engine which is CF abacus now we need to

00:17:52,760 --> 00:17:56,690
actually send it as a so that it

00:17:55,010 --> 00:17:59,000
generates analyze this could keep

00:17:56,690 --> 00:18:01,640
happening over the month right let's

00:17:59,000 --> 00:18:05,780
login into revenue cloud now which is

00:18:01,640 --> 00:18:09,830
our production instance so I go to

00:18:05,780 --> 00:18:12,100
revenue cloud or si P and again the we

00:18:09,830 --> 00:18:14,120
are sa P we use our own dog food

00:18:12,100 --> 00:18:16,100
actually this is not occurred this is a

00:18:14,120 --> 00:18:16,970
production application Champaign

00:18:16,100 --> 00:18:24,650
Champaign

00:18:16,970 --> 00:18:30,170
ok better so let's let me show you a

00:18:24,650 --> 00:18:33,170
little bit what's over here so the same

00:18:30,170 --> 00:18:36,680
API is that I had so I we as an let's

00:18:33,170 --> 00:18:38,570
say this travel agency or travel

00:18:36,680 --> 00:18:43,430
organization operates in two markets

00:18:38,570 --> 00:18:46,400
which is us West and us East I have

00:18:43,430 --> 00:18:48,290
these red player the rate elements over

00:18:46,400 --> 00:18:51,110
here so remember there were three api's

00:18:48,290 --> 00:18:54,050
that we are trying to monetize all those

00:18:51,110 --> 00:18:59,980
are set up as attributes to be measured

00:18:54,050 --> 00:18:59,980
on revenue cloud itself alright and I

00:19:00,220 --> 00:19:06,800
can't sell this as a product so what I

00:19:03,590 --> 00:19:09,560
do is I actually create a product so you

00:19:06,800 --> 00:19:11,540
can see over here that there is this

00:19:09,560 --> 00:19:13,100
product called space trip basic this is

00:19:11,540 --> 00:19:16,790
what is sold so think of this as a

00:19:13,100 --> 00:19:19,580
package that that is being sold and I

00:19:16,790 --> 00:19:21,470
can even look at details like yeah I'm

00:19:19,580 --> 00:19:25,700
gonna charge first time any customer

00:19:21,470 --> 00:19:28,910
signs up I'll charge $5 and then these

00:19:25,700 --> 00:19:32,060
are the various attributes in in like

00:19:28,910 --> 00:19:35,150
pricing for example reserved space API

00:19:32,060 --> 00:19:37,820
10 API calls are included the block size

00:19:35,150 --> 00:19:39,560
is one I could include in increase block

00:19:37,820 --> 00:19:43,530
size to hundred or thousand or whatever

00:19:39,560 --> 00:19:47,250
and then here's the pricing in USD

00:19:43,530 --> 00:19:49,440
is something in CF abacus you can do it

00:19:47,250 --> 00:19:51,630
at a primitive level but when you are

00:19:49,440 --> 00:19:56,130
talking with let's say the business side

00:19:51,630 --> 00:19:57,810
of guys they like this kind of UI let's

00:19:56,130 --> 00:19:59,660
so that's the product that I'm going to

00:19:57,810 --> 00:20:04,740
sell so who do I sell my product to I

00:19:59,660 --> 00:20:09,090
sell it to customers so I will sell this

00:20:04,740 --> 00:20:11,460
customer to this guy James Holden all

00:20:09,090 --> 00:20:16,440
right this guy's the protagonist or the

00:20:11,460 --> 00:20:25,860
hero in that expanse so anyway so James

00:20:16,440 --> 00:20:26,940
Holden so when I sell this it becomes so

00:20:25,860 --> 00:20:30,450
these are the things that I've already

00:20:26,940 --> 00:20:32,340
set up and it becomes a subscription so

00:20:30,450 --> 00:20:35,520
this is where I have already sold this

00:20:32,340 --> 00:20:39,510
product to James Holden and it is here

00:20:35,520 --> 00:20:44,250
that I see that yay this is the stuff

00:20:39,510 --> 00:20:47,060
that I have sold so now let's so all of

00:20:44,250 --> 00:20:50,420
our back-end data is set up this all the

00:20:47,060 --> 00:20:58,050
accounting stuff is already set up now I

00:20:50,420 --> 00:21:06,780
will again do these calls from here if I

00:20:58,050 --> 00:21:10,440
can find my like that so now what has

00:21:06,780 --> 00:21:14,390
happened is that I have metered the

00:21:10,440 --> 00:21:16,620
usage in CF abacus I need to send it to

00:21:14,390 --> 00:21:18,180
revenue clouds so that we can generate a

00:21:16,620 --> 00:21:20,430
bill right that's that's what we are

00:21:18,180 --> 00:21:24,120
interested in that we need to send this

00:21:20,430 --> 00:21:28,140
so typically you would do this

00:21:24,120 --> 00:21:29,730
Roth to authentication where it's it

00:21:28,140 --> 00:21:31,740
generates some kind of a credential so

00:21:29,730 --> 00:21:33,570
that I can send my API calls in a secure

00:21:31,740 --> 00:21:39,040
way I already did

00:21:33,570 --> 00:21:44,480
at 11:30 because the token is valid for

00:21:39,040 --> 00:21:47,660
one hour so I will do the first so this

00:21:44,480 --> 00:21:54,650
is the first call that I'm doing and if

00:21:47,660 --> 00:21:55,820
you look over here so this is abacus to

00:21:54,650 --> 00:21:57,590
Remini clear down yeah

00:21:55,820 --> 00:22:01,160
abacus to revenue cloud so this is the

00:21:57,590 --> 00:22:04,130
call and I'm making right now so

00:22:01,160 --> 00:22:07,850
remember they were three times I made

00:22:04,130 --> 00:22:13,760
that call so this is 10 10 10 30 and I

00:22:07,850 --> 00:22:16,580
sent this and it it gets created so all

00:22:13,760 --> 00:22:18,020
in real life this will happen using some

00:22:16,580 --> 00:22:20,840
kind of our integration tool so I'm

00:22:18,020 --> 00:22:25,460
doing it over here so I sent my calls

00:22:20,840 --> 00:22:30,290
for reserving the trip now I'll send 300

00:22:25,460 --> 00:22:34,280
quantity for this which is the space

00:22:30,290 --> 00:22:37,570
price so that's being sent and another

00:22:34,280 --> 00:22:42,770
one is the last call is get space

00:22:37,570 --> 00:22:46,160
imagery and again that's also 300 so I

00:22:42,770 --> 00:22:49,160
sent there and now hopefully what has

00:22:46,160 --> 00:22:51,200
happened is that this all these three

00:22:49,160 --> 00:22:53,540
different API calls have been created as

00:22:51,200 --> 00:22:55,700
a billing document that can be sent to

00:22:53,540 --> 00:22:57,440
the customer actually invoice is sent to

00:22:55,700 --> 00:23:00,020
the customer so there are a lot of

00:22:57,440 --> 00:23:04,310
downstream processes I will not bore you

00:23:00,020 --> 00:23:12,980
with that let's go back to our system

00:23:04,310 --> 00:23:15,620
over here so billing data and I see that

00:23:12,980 --> 00:23:20,900
there is something done on June our

00:23:15,620 --> 00:23:27,380
customer was James Holden and you can

00:23:20,900 --> 00:23:29,300
see that in this there are 10 calls for

00:23:27,380 --> 00:23:33,340
reserved space API and then you will see

00:23:29,300 --> 00:23:37,010
that it's only $20 the call was $1 up

00:23:33,340 --> 00:23:39,590
API call but it's only $20 in the final

00:23:37,010 --> 00:23:42,710
bill because 10 calls were already

00:23:39,590 --> 00:23:44,660
included in the in the space trip

00:23:42,710 --> 00:23:47,440
product that I bought for the others for

00:23:44,660 --> 00:23:49,670
example over here only

00:23:47,440 --> 00:23:51,840
nothing is included over here so you can

00:23:49,670 --> 00:23:56,570
see that this is probably a 3

00:23:51,840 --> 00:23:59,970
call and then or more than that but it's

00:23:56,570 --> 00:24:02,400
300 multiplied by some number so 30 USD

00:23:59,970 --> 00:24:05,850
and then over here 10 was included so

00:24:02,400 --> 00:24:08,400
290 so all of this is accumulated as a

00:24:05,850 --> 00:24:09,720
one single number 50 to 90 that we can

00:24:08,400 --> 00:24:12,090
send to the customer so that's what

00:24:09,720 --> 00:24:14,820
happens that's your day 30 problem being

00:24:12,090 --> 00:24:18,690
solved by using CF abacus and then

00:24:14,820 --> 00:24:30,090
sending it to revenue cloud any

00:24:18,690 --> 00:24:43,980
questions okay if if no questions then I

00:24:30,090 --> 00:24:48,630
would let's go back so check check CF

00:24:43,980 --> 00:24:50,460
abacus it's a pretty cool project it's

00:24:48,630 --> 00:24:52,950
not just for Cloud Foundry by the way

00:24:50,460 --> 00:24:54,539
it's you can measure whatever you want I

00:24:52,950 --> 00:24:59,039
mean it could be anything that you are

00:24:54,539 --> 00:25:01,470
doing inside I have seen on if you read

00:24:59,039 --> 00:25:04,649
hacker news is a lot of discussion going

00:25:01,470 --> 00:25:06,840
on over there in various a sketch and

00:25:04,649 --> 00:25:08,669
post where they talk about hey I got

00:25:06,840 --> 00:25:10,890
this giant bill from Amazon or whoever

00:25:08,669 --> 00:25:12,330
and I want to allocate you can do those

00:25:10,890 --> 00:25:15,270
kind of thing you get a giant bill from

00:25:12,330 --> 00:25:18,299
somebody and you want to validate it you

00:25:15,270 --> 00:25:20,460
can use EF abacus for that on the

00:25:18,299 --> 00:25:21,960
buildings on the invoicing side there is

00:25:20,460 --> 00:25:24,750
REM new cloud there are other solutions

00:25:21,960 --> 00:25:27,929
so with these you can monetize your

00:25:24,750 --> 00:25:30,390
api's or apps any concluding thought

00:25:27,929 --> 00:25:33,149
from you yeah what we showed today was a

00:25:30,390 --> 00:25:35,549
very fairly simple b2c example we didn't

00:25:33,149 --> 00:25:37,409
yet show because revenue curve version

00:25:35,549 --> 00:25:39,570
one doesn't yet do it we didn't yet show

00:25:37,409 --> 00:25:40,890
that very complex ecosystem and where we

00:25:39,570 --> 00:25:41,820
would configure the way the different

00:25:40,890 --> 00:25:43,320
fees get split up

00:25:41,820 --> 00:25:44,250
we do currently do it with our Hybris

00:25:43,320 --> 00:25:46,200
billing and we are bringing that

00:25:44,250 --> 00:25:47,820
capability to revenue cloud so and it's

00:25:46,200 --> 00:25:49,740
very exciting that platform model is

00:25:47,820 --> 00:25:53,130
applicable to so many of our customers

00:25:49,740 --> 00:25:54,360
now so yeah thanks for your time yep

00:25:53,130 --> 00:25:56,929
thank you for your time we have one more

00:25:54,360 --> 00:25:56,929
question down there

00:25:57,180 --> 00:26:16,950
a lot of we are doing it it's not it's

00:26:14,190 --> 00:26:19,080
internal use only we haven't yet brought

00:26:16,950 --> 00:26:23,820
it to the public release of revenue

00:26:19,080 --> 00:26:25,620
cloud yeah but it was like priority it

00:26:23,820 --> 00:26:26,910
was a very top five priority for the

00:26:25,620 --> 00:26:30,300
internal development they recognized

00:26:26,910 --> 00:26:31,860
luckily for us the issue quite quickly

00:26:30,300 --> 00:26:33,840
without us having to prompt them because

00:26:31,860 --> 00:26:36,890
it's quite obvious for this ecosystem

00:26:33,840 --> 00:26:36,890
work you need to have that in place

00:26:50,370 --> 00:26:57,820
it it has so it has to come from the top

00:26:54,970 --> 00:27:01,090
the chargeback model I mean if you go

00:26:57,820 --> 00:27:03,910
from the you know I'm a I'm a platform

00:27:01,090 --> 00:27:05,710
operator for my internal folks and then

00:27:03,910 --> 00:27:07,690
I go to like hey you guys are using this

00:27:05,710 --> 00:27:10,120
much pay me this or the internal

00:27:07,690 --> 00:27:13,320
allocations right it doesn't work from

00:27:10,120 --> 00:27:15,820
the bottom up it's always has to be like

00:27:13,320 --> 00:27:18,340
senior VP of the platform talks with a

00:27:15,820 --> 00:27:19,950
senior VP of apps saying hey you guys

00:27:18,340 --> 00:27:22,780
have been using platform now you know

00:27:19,950 --> 00:27:26,950
now it's no longer a skunkworks project

00:27:22,780 --> 00:27:28,720
start paying yeah in short yes I think

00:27:26,950 --> 00:27:30,670
internal even if its internal funny

00:27:28,720 --> 00:27:33,940
money I think for many companies that's

00:27:30,670 --> 00:27:35,440
been a long-standing opaque kind of

00:27:33,940 --> 00:27:37,540
process and this makes it very

00:27:35,440 --> 00:27:39,280
transparent so yeah there is some level

00:27:37,540 --> 00:27:40,840
of transparency and also if I'm building

00:27:39,280 --> 00:27:43,750
an app and this is the problem we face a

00:27:40,840 --> 00:27:45,070
lot I need to know what my cost is going

00:27:43,750 --> 00:27:46,750
to be because it affects my floor price

00:27:45,070 --> 00:27:48,300
it affects my go to market and my

00:27:46,750 --> 00:27:51,880
pricing and all those type of things so

00:27:48,300 --> 00:28:01,660
there is a path to getting maturity

00:27:51,880 --> 00:28:04,690
around that whole thing I would say it's

00:28:01,660 --> 00:28:08,460
it has affected in the sense that what

00:28:04,690 --> 00:28:12,550
is the most effective way to do it

00:28:08,460 --> 00:28:14,740
should I can I use VMs which are

00:28:12,550 --> 00:28:18,910
expensive to operate or should I try to

00:28:14,740 --> 00:28:21,400
allocate more compute into containers so

00:28:18,910 --> 00:28:23,410
it when you start seeing if I make a

00:28:21,400 --> 00:28:27,600
call or if I do this this cost me this

00:28:23,410 --> 00:28:27,600
then you start taking those decisions

00:28:27,810 --> 00:28:33,390
yeah I mean the opportunity here is that

00:28:31,180 --> 00:28:35,470
you prevent your development from

00:28:33,390 --> 00:28:36,820
multiple groups developing the same

00:28:35,470 --> 00:28:37,870
thing over and over right and this is

00:28:36,820 --> 00:28:39,970
the opportunity here but you need to

00:28:37,870 --> 00:28:41,590
make that ecosystem work and it's it's

00:28:39,970 --> 00:28:43,180
ongoing I wouldn't say we've solved all

00:28:41,590 --> 00:28:44,200
the issues there but thank I should

00:28:43,180 --> 00:28:46,450
write it has got to come from the top

00:28:44,200 --> 00:28:48,100
and you've got to think about it up

00:28:46,450 --> 00:28:49,510
front so some companies are building

00:28:48,100 --> 00:28:51,340
their own thing what we're doing for

00:28:49,510 --> 00:28:54,550
revenue cloud and it's not just for API

00:28:51,340 --> 00:28:56,050
monetization is for any SAS or any

00:28:54,550 --> 00:28:57,460
product you want we're trying to solve

00:28:56,050 --> 00:28:58,540
those problems for a broad base of our

00:28:57,460 --> 00:29:02,100
customers because

00:28:58,540 --> 00:29:04,810
been through it we've seen it firsthand

00:29:02,100 --> 00:29:06,450
we're out of time all right thank you

00:29:04,810 --> 00:29:10,559
thanks everyone thank you

00:29:06,450 --> 00:29:10,559

YouTube URL: https://www.youtube.com/watch?v=7ONnOcm8KGM


