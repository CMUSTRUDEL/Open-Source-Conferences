Title: TrueRec.io: A Blockchain Project Running on Cloud Foundry
Publication date: 2017-06-22
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	TrueRec.io: A Blockchain Project Running on Cloud Foundry [B] - Nethaji Tummuru, Michael Kunzmann & Mario Ponce, SAP    

We all have gone through the process of hiring or applying for a job. In most cases, it's very tedious to verify a candidate's credentials (academic, employment, professional records), and even more to prove one’s own credentials. After the job offer, the bureaucracy starts. One of the most time-consuming processes is background checks to verify the applicant’s identity, education and employment history. How can a recruiter trust a resume the moment he receives it? How can resume records be notarized and verified in a blink of an eye with bullet-proof confidence? Is it possible to empower applicants to provide pre-verified records and still allow them the ownership of their information? TrueRec solves all these problems by utilizing Blockchain , Machine Learning all built on Cloud Foundry.

In this talk, we will discuss about the building blocks , blockchain architecture and cloud foundry components that we have leveraged.

Michael Kunzmann
SAP
Lead Platform Engineer
My name is Michael Kunzmann and I am the lead Software Platform Engineer of the truerec.io platform. My work focus is in designing, architecting and building the truerec.io platform. I have worked in various Cloud Foundry projects before and currently working on delivering one of the first SAP blockchain pilot products.

Mario Ponce
SAP Labs
Senior Architect
San Francisco Bay Area
Facebook Message LinkedIn Connect
Mario is a Senior Developer working for SAP Labs from the Innovation Center Network Team architecting and developing cloud native applications with Cloud Foundry. Currently developing truerec.io leveraging Ethereum blockchain and computer vision algorithms. Speaker at SAP conferences.

Nethaji Tummuru
SAP Labs
Director of Product development
Palo Alto
Nethaji, is responsible for bringing ideas to market. He has expertise in engineering and product management. He has a strong engineering background with focus on building scalable cloud-native applications. Have strong technical expertise in Cloud, big data, and in-memory platforms. He is currently focused on driving the team in building blockchain distributed applications.
Captions: 
	00:00:00,030 --> 00:00:04,799
hi welcome everyone my name is Natasha

00:00:02,760 --> 00:00:07,170
tomorrow and today I have my colleague

00:00:04,799 --> 00:00:09,389
Michael Kunzman and Mario Ponce a and

00:00:07,170 --> 00:00:11,910
for the next half hour what we're going

00:00:09,389 --> 00:00:14,400
to be doing is sort of taking you giving

00:00:11,910 --> 00:00:16,830
you an overview of the solution and also

00:00:14,400 --> 00:00:18,779
taking you to the journey of how we went

00:00:16,830 --> 00:00:21,060
about building this application right

00:00:18,779 --> 00:00:23,130
from building everything on AWS and

00:00:21,060 --> 00:00:25,230
rendering containers by ourselves to

00:00:23,130 --> 00:00:27,269
where we are currently with sort of more

00:00:25,230 --> 00:00:29,880
hybrid approach of having most of it

00:00:27,269 --> 00:00:31,859
running on Cloud Foundry and bits of

00:00:29,880 --> 00:00:33,210
these are running on AWS and the end

00:00:31,859 --> 00:00:35,700
state of where we want to be with

00:00:33,210 --> 00:00:37,710
everything sort of lying on Cloud

00:00:35,700 --> 00:00:39,149
Foundry so what we will not be covering

00:00:37,710 --> 00:00:41,610
in the session today is sort of

00:00:39,149 --> 00:00:44,520
explaining the intricacies of blockchain

00:00:41,610 --> 00:00:45,780
and how it sort of works but you know

00:00:44,520 --> 00:00:47,910
most of you probably have heard about

00:00:45,780 --> 00:00:49,469
blockchain and you heard a bird blocks

00:00:47,910 --> 00:00:51,899
in being this you know global

00:00:49,469 --> 00:00:54,090
distributed database and sort of you

00:00:51,899 --> 00:00:57,930
heard about it being the network of

00:00:54,090 --> 00:00:59,160
computers that you can transact but you

00:00:57,930 --> 00:01:01,590
know for the most people sort of think

00:00:59,160 --> 00:01:03,570
about blockchain as this global

00:01:01,590 --> 00:01:06,299
immutable distributed database that sort

00:01:03,570 --> 00:01:08,610
of keeps a record of growing transaction

00:01:06,299 --> 00:01:10,200
and that sort of opens up a whole new

00:01:08,610 --> 00:01:12,420
paradigm of application that could be

00:01:10,200 --> 00:01:13,799
built and one such application that we

00:01:12,420 --> 00:01:16,799
kind of built on this is called true

00:01:13,799 --> 00:01:19,770
rack and I'll sort of explain more on

00:01:16,799 --> 00:01:23,610
what it is and the World Economic Forum

00:01:19,770 --> 00:01:27,270
predicted that 10% of the global GDP by

00:01:23,610 --> 00:01:29,939
year 2027 would be stored on blockchain

00:01:27,270 --> 00:01:31,770
so we all use Internet we sort of that's

00:01:29,939 --> 00:01:33,840
kind of what we you know pretty much are

00:01:31,770 --> 00:01:36,329
on the most part so think about if

00:01:33,840 --> 00:01:38,220
Internet is information is what is being

00:01:36,329 --> 00:01:40,049
stored on Internet blockchain is

00:01:38,220 --> 00:01:41,460
internet of value that's where all the

00:01:40,049 --> 00:01:43,530
commerce is going to happen that's where

00:01:41,460 --> 00:01:48,030
a lot of transactions is going to be

00:01:43,530 --> 00:01:51,299
performed so what is to exoteric is this

00:01:48,030 --> 00:01:53,670
secure digital wallet for identity

00:01:51,299 --> 00:01:56,759
economic and employment credentials all

00:01:53,670 --> 00:02:00,270
being built on blockchain so why does it

00:01:56,759 --> 00:02:02,340
matter so I'm sure you know most of the

00:02:00,270 --> 00:02:03,930
people that we are here have gone

00:02:02,340 --> 00:02:06,450
through the process of applying for a

00:02:03,930 --> 00:02:08,580
job or even hired someone you know how

00:02:06,450 --> 00:02:10,349
do you make sure that the detail that

00:02:08,580 --> 00:02:12,780
were furnished and the self-declared

00:02:10,349 --> 00:02:13,530
profiles such as resume or social

00:02:12,780 --> 00:02:16,200
profile

00:02:13,530 --> 00:02:19,110
are valid you know you know it sort of

00:02:16,200 --> 00:02:21,450
takes an enormous amount of time and

00:02:19,110 --> 00:02:23,250
effort to verify someone's credentials

00:02:21,450 --> 00:02:24,959
but also sort of prove anyone's

00:02:23,250 --> 00:02:26,480
credentials and then we mean by

00:02:24,959 --> 00:02:29,550
credentials we start up talking about

00:02:26,480 --> 00:02:31,410
someone's identity to you know economic

00:02:29,550 --> 00:02:34,290
so where he kind of studied to wait

00:02:31,410 --> 00:02:37,020
ready kind of what and it it's it's a

00:02:34,290 --> 00:02:38,370
tedious effort and you know once a

00:02:37,020 --> 00:02:40,410
person is hired that's when the actual

00:02:38,370 --> 00:02:42,750
bureaucracy starts because companies

00:02:40,410 --> 00:02:43,830
want to be compliant at least in US so

00:02:42,750 --> 00:02:46,950
they kind of work with third-party

00:02:43,830 --> 00:02:49,140
agencies to do this whole verification

00:02:46,950 --> 00:02:50,700
and that takes forever and in some cases

00:02:49,140 --> 00:02:53,190
putting a lot of pressure on the people

00:02:50,700 --> 00:02:56,040
that were involved in the process so why

00:02:53,190 --> 00:02:57,959
does it take so long for to verify

00:02:56,040 --> 00:02:59,730
anyone's credentials this is kind of

00:02:57,959 --> 00:03:02,069
very high level view about current

00:02:59,730 --> 00:03:04,440
process on how the hiring works I just

00:03:02,069 --> 00:03:06,690
want to focus on the three main actors

00:03:04,440 --> 00:03:08,640
which is the job applicant the company

00:03:06,690 --> 00:03:11,010
and the third party agency so once the

00:03:08,640 --> 00:03:12,989
person is hired companies tend to use

00:03:11,010 --> 00:03:14,819
you know third party agencies to

00:03:12,989 --> 00:03:16,470
actually do the verification and it's

00:03:14,819 --> 00:03:18,720
not that they have all the details so

00:03:16,470 --> 00:03:19,920
they need to go and work with you know

00:03:18,720 --> 00:03:22,739
all sorts of institutions like

00:03:19,920 --> 00:03:25,049
universities the garments and you know

00:03:22,739 --> 00:03:27,900
farmer employers and oftentimes this is

00:03:25,049 --> 00:03:30,680
pretty manual and tedious process and it

00:03:27,900 --> 00:03:35,370
that kind of adds up to all the delays

00:03:30,680 --> 00:03:38,459
that's that's being caused so how about

00:03:35,370 --> 00:03:40,680
like wouldn't it be cool if we empower

00:03:38,459 --> 00:03:42,329
individuals to carry all his credentials

00:03:40,680 --> 00:03:44,760
in one wallet where he'll be able to

00:03:42,329 --> 00:03:46,500
independently prove the validity of

00:03:44,760 --> 00:03:47,940
those without having to you know reach

00:03:46,500 --> 00:03:49,829
out to all these institutions like

00:03:47,940 --> 00:03:52,380
proving my driver's to carrying my

00:03:49,829 --> 00:03:54,450
digital driver's license to carrying all

00:03:52,380 --> 00:03:56,280
my employment records and education

00:03:54,450 --> 00:03:58,680
records or micro certificates in one

00:03:56,280 --> 00:04:01,140
central place that I can prove you know

00:03:58,680 --> 00:04:03,780
without having to my anyone my employers

00:04:01,140 --> 00:04:05,280
calling my past institutions wouldn't it

00:04:03,780 --> 00:04:07,260
be cool if you know the recruit that

00:04:05,280 --> 00:04:09,810
sort of you know guess this resume and

00:04:07,260 --> 00:04:11,160
then can verify instantaneously if all

00:04:09,810 --> 00:04:13,829
the details that are furnished and the

00:04:11,160 --> 00:04:15,630
resume are actually valid or not can

00:04:13,829 --> 00:04:17,880
they can the records in the resume be

00:04:15,630 --> 00:04:19,769
you know verified instantaneously can

00:04:17,880 --> 00:04:22,740
they be notarized and can they be

00:04:19,769 --> 00:04:24,419
verified with the bulletproof confidence

00:04:22,740 --> 00:04:27,389
that they were not actually you know

00:04:24,419 --> 00:04:29,490
modified and that's kind of what all

00:04:27,389 --> 00:04:31,439
Trek is supposed to provide and that's

00:04:29,490 --> 00:04:33,030
kind of what we were kind of aiming this

00:04:31,439 --> 00:04:35,430
application would do and this is all

00:04:33,030 --> 00:04:39,449
built with blocks in machine learning

00:04:35,430 --> 00:04:41,490
and built on top of port phone tree so

00:04:39,449 --> 00:04:43,529
let's quickly go through a solution and

00:04:41,490 --> 00:04:47,069
how it sort of looks so essentially

00:04:43,529 --> 00:04:48,990
toric is this decentralized credential

00:04:47,069 --> 00:04:50,990
issuing and verification network that

00:04:48,990 --> 00:04:53,729
guarantees authenticity and

00:04:50,990 --> 00:04:57,180
significantly simplifies the process of

00:04:53,729 --> 00:04:58,729
issuing and verifying credentials so let

00:04:57,180 --> 00:05:01,680
me walk to the process on how it works

00:04:58,729 --> 00:05:03,569
so every institution that's part of the

00:05:01,680 --> 00:05:06,539
network would be able to issue current

00:05:03,569 --> 00:05:08,669
source and it could be anything from the

00:05:06,539 --> 00:05:11,310
diplomas to you know the digital

00:05:08,669 --> 00:05:13,409
identities to your employment records or

00:05:11,310 --> 00:05:14,969
it could be like even micro certificates

00:05:13,409 --> 00:05:18,090
and pay-to-play records so all of this

00:05:14,969 --> 00:05:20,189
could be issued on on the network and

00:05:18,090 --> 00:05:22,050
all of this would be issued directly to

00:05:20,189 --> 00:05:23,759
that to the individual so this is not

00:05:22,050 --> 00:05:25,199
stored in a central database where

00:05:23,759 --> 00:05:27,029
that's how the traditional applicants

00:05:25,199 --> 00:05:29,849
are built built so everything will be

00:05:27,029 --> 00:05:32,639
owned by the candidate and the beauty of

00:05:29,849 --> 00:05:34,979
this is only the fingerprints or the

00:05:32,639 --> 00:05:36,990
hash values of those certificates would

00:05:34,979 --> 00:05:40,379
be stored on blockchain so and why

00:05:36,990 --> 00:05:42,240
because you can we just spoke because

00:05:40,379 --> 00:05:44,159
blockchain is this global database and

00:05:42,240 --> 00:05:45,680
we don't want to expose that to everyone

00:05:44,159 --> 00:05:47,849
in the world to see all my information

00:05:45,680 --> 00:05:50,339
but at the same time we want to make

00:05:47,849 --> 00:05:52,349
sure that we can go back and prove those

00:05:50,339 --> 00:05:54,120
records existed at a point in time and

00:05:52,349 --> 00:05:56,610
validate if those are not actually

00:05:54,120 --> 00:05:58,939
tampered and that's why we only store a

00:05:56,610 --> 00:06:01,770
fingerprint of those on the blockchain

00:05:58,939 --> 00:06:03,300
so similarly you know any conditions

00:06:01,770 --> 00:06:05,849
could be issued and all of this would be

00:06:03,300 --> 00:06:08,370
stored and in the individual's digital

00:06:05,849 --> 00:06:11,270
wallet and all the other fingerprints

00:06:08,370 --> 00:06:14,399
would be stored on the on the blockchain

00:06:11,270 --> 00:06:16,319
at any point when when the candidate

00:06:14,399 --> 00:06:18,689
want to prove his credentials to any

00:06:16,319 --> 00:06:20,669
institutions he can select the details

00:06:18,689 --> 00:06:22,979
that were relevant in that context and

00:06:20,669 --> 00:06:25,139
and then and then pass it on to a

00:06:22,979 --> 00:06:27,089
potential verify so the verifier gets a

00:06:25,139 --> 00:06:30,419
link with that the candidate has shared

00:06:27,089 --> 00:06:32,370
and and when she opens the link the the

00:06:30,419 --> 00:06:34,020
recomputation of hash has happened and

00:06:32,370 --> 00:06:35,879
then they get compared against

00:06:34,020 --> 00:06:38,190
blockchain so that way we can make sure

00:06:35,879 --> 00:06:40,770
that those credentials that were issued

00:06:38,190 --> 00:06:42,330
what not tampered we know who it was

00:06:40,770 --> 00:06:45,300
issued from and whom it was issued to

00:06:42,330 --> 00:06:46,830
and we also know that at what point it

00:06:45,300 --> 00:06:50,610
was issued and because there's no one

00:06:46,830 --> 00:06:52,979
because blockchain is immutable no one

00:06:50,610 --> 00:06:54,840
or no central institution controls it

00:06:52,979 --> 00:06:57,090
there's no way that someone could modify

00:06:54,840 --> 00:06:59,190
it so that kind of provides so in

00:06:57,090 --> 00:07:01,410
essence we're using blockchain as as an

00:06:59,190 --> 00:07:07,050
anchor proof to make sure nothing is

00:07:01,410 --> 00:07:08,789
actually modified here so quickly

00:07:07,050 --> 00:07:11,460
walking through how the solution could

00:07:08,789 --> 00:07:13,139
potentially so on the left side you

00:07:11,460 --> 00:07:16,139
imagine we have this hypothetical

00:07:13,139 --> 00:07:18,360
situation where we have a university

00:07:16,139 --> 00:07:20,970
that's issuing Kinesis the student could

00:07:18,360 --> 00:07:23,130
log into the student portal request for

00:07:20,970 --> 00:07:24,930
his credential to be issued the document

00:07:23,130 --> 00:07:26,220
would be sent to the candidate the

00:07:24,930 --> 00:07:29,639
fingerprints would be registered to the

00:07:26,220 --> 00:07:31,409
blockchain student would open his mobile

00:07:29,639 --> 00:07:34,490
wallet and then he goes through this

00:07:31,409 --> 00:07:36,150
whole identity validation and we apply

00:07:34,490 --> 00:07:38,190
computer vision and machine learning

00:07:36,150 --> 00:07:40,289
techniques to make sure the person is

00:07:38,190 --> 00:07:43,050
who who is claiming to be and once he

00:07:40,289 --> 00:07:45,690
kind of establishes his identity he gets

00:07:43,050 --> 00:07:47,460
into the app he imports the file that we

00:07:45,690 --> 00:07:50,009
that was issued by the by the

00:07:47,460 --> 00:07:51,810
institution and that's the central place

00:07:50,009 --> 00:07:53,370
so he wants all the records in one

00:07:51,810 --> 00:07:55,289
central place and that sort of becomes

00:07:53,370 --> 00:07:57,449
his repository of all his credentials

00:07:55,289 --> 00:08:00,090
from his identity to employment records

00:07:57,449 --> 00:08:01,860
to education and at any point he wants

00:08:00,090 --> 00:08:03,599
to prove those details he can then

00:08:01,860 --> 00:08:05,460
select the details that he want to send

00:08:03,599 --> 00:08:07,380
to a production already fired and then

00:08:05,460 --> 00:08:09,810
pass it on and the verified would get a

00:08:07,380 --> 00:08:11,610
link that's what you see on on the right

00:08:09,810 --> 00:08:13,259
side there and when she went the

00:08:11,610 --> 00:08:15,810
verifier opens it up then the

00:08:13,259 --> 00:08:18,000
recomputation of hashes happen and and

00:08:15,810 --> 00:08:19,650
then the validity to make sure those

00:08:18,000 --> 00:08:24,210
cuttings are valid or not would happen

00:08:19,650 --> 00:08:26,909
behind the scenes so quickly wrapping up

00:08:24,210 --> 00:08:29,099
just kind of how the data flow happens

00:08:26,909 --> 00:08:30,960
so I mentioned we have three main actors

00:08:29,099 --> 00:08:33,060
in this process which is one is the

00:08:30,960 --> 00:08:35,820
assumed institution the student itself

00:08:33,060 --> 00:08:38,339
and the Prudential verifier then when

00:08:35,820 --> 00:08:41,010
the records are being issued the actual

00:08:38,339 --> 00:08:42,539
data which is the obtained data which is

00:08:41,010 --> 00:08:44,700
the actual credentials the clear text

00:08:42,539 --> 00:08:46,910
document is sent to the candidate itself

00:08:44,700 --> 00:08:49,050
in a special file called profile and

00:08:46,910 --> 00:08:50,760
fingerprints of those documents which is

00:08:49,050 --> 00:08:52,949
the unchained data which actually gets

00:08:50,760 --> 00:08:53,490
stored on blockchain is written to the

00:08:52,949 --> 00:08:55,170
blockchain

00:08:53,490 --> 00:08:57,570
using ET diem gateway which is the

00:08:55,170 --> 00:08:59,040
component that we sort of the the rapid

00:08:57,570 --> 00:09:01,680
that we built on top of aetherium and

00:08:59,040 --> 00:09:03,510
and all this data would be stored on the

00:09:01,680 --> 00:09:05,550
mobile wallet and when the candidate

00:09:03,510 --> 00:09:06,899
actually sends it he generates a link

00:09:05,550 --> 00:09:08,640
which kind of creates a temporary

00:09:06,899 --> 00:09:09,600
storage for the data that's stored on

00:09:08,640 --> 00:09:11,790
the mobile phone

00:09:09,600 --> 00:09:14,070
and the link gets sent to a verifier and

00:09:11,790 --> 00:09:15,600
when the verifier opens a link the

00:09:14,070 --> 00:09:19,050
decomposition of hash has happened and

00:09:15,600 --> 00:09:20,820
then they go back and check against the

00:09:19,050 --> 00:09:22,649
blockchain to make sure none of things

00:09:20,820 --> 00:09:24,660
have been changed so this is kind of the

00:09:22,649 --> 00:09:26,459
high level flow on how it works

00:09:24,660 --> 00:09:28,260
I'll now pass it on to my colleagues

00:09:26,459 --> 00:09:30,350
they'll kind of dive a little bit more

00:09:28,260 --> 00:09:32,850
deeper into the technical architecture

00:09:30,350 --> 00:09:34,980
and sort of talking to the journey on

00:09:32,850 --> 00:09:36,690
where we started and sort of where we

00:09:34,980 --> 00:09:45,330
are right now and kind of explain more

00:09:36,690 --> 00:09:47,279
details how the application works right

00:09:45,330 --> 00:09:49,350
hello how many of you are developers

00:09:47,279 --> 00:09:52,350
here awesome

00:09:49,350 --> 00:09:54,600
so my name is Mario and my clique Mitch

00:09:52,350 --> 00:09:57,330
here we're gonna dip dive a little bit

00:09:54,600 --> 00:09:59,310
on the architecture and the components

00:09:57,330 --> 00:10:04,050
that we actually use to build this

00:09:59,310 --> 00:10:06,149
platform so I will start describe in the

00:10:04,050 --> 00:10:08,190
journey so when we actually started

00:10:06,149 --> 00:10:10,770
develop this application we were

00:10:08,190 --> 00:10:14,760
exploring how the blockchain works and

00:10:10,770 --> 00:10:17,910
how we will actually offer the service

00:10:14,760 --> 00:10:19,950
and how we'll integrate the pieces so we

00:10:17,910 --> 00:10:23,279
were started with a lot of docker

00:10:19,950 --> 00:10:27,779
containers and put in some pieces and in

00:10:23,279 --> 00:10:30,450
each container and at some point when we

00:10:27,779 --> 00:10:33,620
were developing we realized that we were

00:10:30,450 --> 00:10:36,029
investing a lot of time actually

00:10:33,620 --> 00:10:39,209
containerized in each each application

00:10:36,029 --> 00:10:42,660
and the most of those components were

00:10:39,209 --> 00:10:48,990
actually like nodejs applications or

00:10:42,660 --> 00:10:51,120
Python Ruby on Rails and and we needed

00:10:48,990 --> 00:10:54,810
some some basic support for databases

00:10:51,120 --> 00:10:56,700
like MongoDB to store metadata and we

00:10:54,810 --> 00:10:58,560
said okay and maybe we need just a

00:10:56,700 --> 00:11:00,779
platform where we just pushed

00:10:58,560 --> 00:11:04,840
applications instead of investing time

00:11:00,779 --> 00:11:06,730
in creating those containers and we will

00:11:04,840 --> 00:11:11,590
use containers only for the parts that

00:11:06,730 --> 00:11:13,870
are strictly needed so front from the

00:11:11,590 --> 00:11:15,820
slide here you have on the left side

00:11:13,870 --> 00:11:20,650
that trooper client but is a small

00:11:15,820 --> 00:11:23,830
nodejs piece of software that the that

00:11:20,650 --> 00:11:25,839
the issuer has the private key then

00:11:23,830 --> 00:11:27,339
let's say that this is a university so

00:11:25,839 --> 00:11:30,820
university will have the private key

00:11:27,339 --> 00:11:33,670
they will encrypt the certificates and

00:11:30,820 --> 00:11:36,610
then they will submit that through our

00:11:33,670 --> 00:11:40,420
platform and then we will pass it on to

00:11:36,610 --> 00:11:42,640
the e3d on blockchain so I want to

00:11:40,420 --> 00:11:45,640
mention that we are only like a proxy

00:11:42,640 --> 00:11:47,589
application we are not storing the

00:11:45,640 --> 00:11:50,770
documents at any point so we're just

00:11:47,589 --> 00:11:56,980
passing onto the blockchain and then in

00:11:50,770 --> 00:11:59,200
return we send the candidate in this

00:11:56,980 --> 00:12:01,900
case the the beneficiary of this

00:11:59,200 --> 00:12:05,890
certificate a small file that he will

00:12:01,900 --> 00:12:08,380
share with any potential verifier ok so

00:12:05,890 --> 00:12:10,390
then as I said from the containers we

00:12:08,380 --> 00:12:13,089
decided that we needed platforms and

00:12:10,390 --> 00:12:16,990
that's where Cloud Foundry was a natural

00:12:13,089 --> 00:12:19,420
choice for us and we started pushing

00:12:16,990 --> 00:12:22,960
applications inside Cloud Foundry so

00:12:19,420 --> 00:12:26,530
here again we have the through direct

00:12:22,960 --> 00:12:28,870
client component on the left and the

00:12:26,530 --> 00:12:30,850
first trip for the transaction is that

00:12:28,870 --> 00:12:33,190
we are receiving it and sending it to

00:12:30,850 --> 00:12:36,850
each your API that runs on no js' that's

00:12:33,190 --> 00:12:38,890
a application in cyclo foundry and this

00:12:36,850 --> 00:12:42,060
actually gave us the opportunity to

00:12:38,890 --> 00:12:45,190
scale up because we introduced

00:12:42,060 --> 00:12:48,190
components like rabbitmq there so we

00:12:45,190 --> 00:12:51,250
have like worker queues and able to

00:12:48,190 --> 00:12:53,830
distribute the workload and we'll left

00:12:51,250 --> 00:12:56,020
the etherion call client on the AWS

00:12:53,830 --> 00:12:59,050
because that was the part that we still

00:12:56,020 --> 00:13:01,029
it needed container for that part so and

00:12:59,050 --> 00:13:02,529
our next step is actually we kind of

00:13:01,029 --> 00:13:05,730
moved that to Cloud Foundry but for now

00:13:02,529 --> 00:13:08,170
is that still running on AWS and then

00:13:05,730 --> 00:13:10,510
the second part where the candidate

00:13:08,170 --> 00:13:13,360
wants to share that with with the

00:13:10,510 --> 00:13:16,480
verifier then we also have an API there

00:13:13,360 --> 00:13:17,870
and we match with some metadata that we

00:13:16,480 --> 00:13:22,940
previously store on

00:13:17,870 --> 00:13:27,740
and that is sent to the to the verifier

00:13:22,940 --> 00:13:30,080
so so what this gave us is as developer

00:13:27,740 --> 00:13:33,070
the flexibility I was just taken our

00:13:30,080 --> 00:13:35,180
apps and push into the platform so that

00:13:33,070 --> 00:13:38,780
give us more time to focus on

00:13:35,180 --> 00:13:42,260
development and not working too much on

00:13:38,780 --> 00:13:45,200
containers and my colleague Mitch here

00:13:42,260 --> 00:13:49,340
will deep dive on other pieces of the

00:13:45,200 --> 00:13:51,200
architecture Thank You Mario all right

00:13:49,340 --> 00:13:53,210
so I will dive a little bit more into

00:13:51,200 --> 00:13:56,600
detail and also like why we made certain

00:13:53,210 --> 00:13:58,340
design decisions so traditionally if you

00:13:56,600 --> 00:14:00,770
develop a proxy application especially

00:13:58,340 --> 00:14:03,200
like a distributed application on top of

00:14:00,770 --> 00:14:05,180
the theorem like the typical approach is

00:14:03,200 --> 00:14:07,100
that you would simply run your own block

00:14:05,180 --> 00:14:11,000
to node on your local device basically

00:14:07,100 --> 00:14:14,720
and hook a web application up to the RPC

00:14:11,000 --> 00:14:18,860
API that that blockchain knows the IAM

00:14:14,720 --> 00:14:20,870
node would expose however like you run

00:14:18,860 --> 00:14:22,700
into the same old on-premise problems

00:14:20,870 --> 00:14:24,590
again because you need to operate that

00:14:22,700 --> 00:14:27,080
actually so that means like the issuer

00:14:24,590 --> 00:14:29,050
would need to operate this this

00:14:27,080 --> 00:14:32,150
blockchain node and especially in our

00:14:29,050 --> 00:14:35,510
project we experience that there's like

00:14:32,150 --> 00:14:38,240
a lot more like complexity of running a

00:14:35,510 --> 00:14:41,960
blockchain node then just running like

00:14:38,240 --> 00:14:45,500
or like running a ye let's say a web

00:14:41,960 --> 00:14:47,990
server one big problem was storage

00:14:45,500 --> 00:14:49,760
because basically whenever you join a

00:14:47,990 --> 00:14:51,380
proxy Network usually you need to

00:14:49,760 --> 00:14:52,970
download the whole blockchain and I

00:14:51,380 --> 00:14:54,740
don't know how it is currently with

00:14:52,970 --> 00:14:56,690
Bitcoin for instance like there's I

00:14:54,740 --> 00:14:58,130
think 70 or 80 gigabytes of the

00:14:56,690 --> 00:14:59,600
blockchain so basically if you want to

00:14:58,130 --> 00:15:03,350
participate in the blockchain network

00:14:59,600 --> 00:15:05,300
you need to first plan for to two days

00:15:03,350 --> 00:15:07,310
to like sand up with the whole network

00:15:05,300 --> 00:15:11,300
to download the whole distributed

00:15:07,310 --> 00:15:12,920
history of transactions and so we are

00:15:11,300 --> 00:15:14,540
sorry currently doing that project with

00:15:12,920 --> 00:15:18,110
one of our online learning platforms

00:15:14,540 --> 00:15:20,630
opensap to deliver first solution in a

00:15:18,110 --> 00:15:22,670
small circle of users and basically for

00:15:20,630 --> 00:15:25,160
them they said like yeah it's like for

00:15:22,670 --> 00:15:28,160
us like it's too much of an operational

00:15:25,160 --> 00:15:30,980
burden and also what we have experiences

00:15:28,160 --> 00:15:34,070
like whatever what actually also happens

00:15:30,980 --> 00:15:37,220
time that sometimes if let's say there's

00:15:34,070 --> 00:15:39,980
a data corruption in our local in our

00:15:37,220 --> 00:15:41,120
local notes then we had to kind of

00:15:39,980 --> 00:15:43,490
recover from that and other would

00:15:41,120 --> 00:15:45,440
typically mean okay we need to resync on

00:15:43,490 --> 00:15:48,139
the whole blockchain again so basically

00:15:45,440 --> 00:15:50,930
our task was basically to kind of

00:15:48,139 --> 00:15:53,360
provide like like to take a lot of

00:15:50,930 --> 00:15:56,360
operational burden from like issues like

00:15:53,360 --> 00:15:59,810
credential issuers and kind of take the

00:15:56,360 --> 00:16:02,540
storage part out basically and still but

00:15:59,810 --> 00:16:04,880
still maintaining the the attributes of

00:16:02,540 --> 00:16:10,490
the blockchain being a distributed

00:16:04,880 --> 00:16:12,230
distributed network where different

00:16:10,490 --> 00:16:14,389
institutions organizations have an

00:16:12,230 --> 00:16:15,829
identity established and can issue in

00:16:14,389 --> 00:16:18,050
signed transactions with their private

00:16:15,829 --> 00:16:21,320
key so that's why we built kind of our

00:16:18,050 --> 00:16:23,480
own little light blocks your node which

00:16:21,320 --> 00:16:25,610
is called the Trek line and all it does

00:16:23,480 --> 00:16:28,459
and all it can do is nothing else than

00:16:25,610 --> 00:16:30,139
just signing transactions and basically

00:16:28,459 --> 00:16:33,860
what we do all these signed transactions

00:16:30,139 --> 00:16:36,110
it's basically basically just a just a

00:16:33,860 --> 00:16:38,569
hex string that we just push into our

00:16:36,110 --> 00:16:41,180
platform and we just use or essential

00:16:38,569 --> 00:16:42,889
blockchain node to broadcast this sign

00:16:41,180 --> 00:16:46,459
transaction out into the network so

00:16:42,889 --> 00:16:47,870
therefore still the transaction cannot

00:16:46,459 --> 00:16:51,220
still be temperate because it's signed

00:16:47,870 --> 00:16:54,170
by the year by the issuer and still like

00:16:51,220 --> 00:16:56,779
the whole storage problem is solved

00:16:54,170 --> 00:16:58,819
because we we kind of manage the whole

00:16:56,779 --> 00:17:01,010
operations for the for the blockchain we

00:16:58,819 --> 00:17:04,490
have redundancy basically in our

00:17:01,010 --> 00:17:06,860
platform yeah so another thing

00:17:04,490 --> 00:17:10,870
interesting thing that we had to solve

00:17:06,860 --> 00:17:14,209
is like the whole deployment aspect so

00:17:10,870 --> 00:17:15,829
traditionally like if you deploy like if

00:17:14,209 --> 00:17:17,990
you follow like all these hello world

00:17:15,829 --> 00:17:19,579
examples and you do nothing else and as

00:17:17,990 --> 00:17:21,079
you see if push basically on your

00:17:19,579 --> 00:17:23,750
command line and the application runs

00:17:21,079 --> 00:17:26,240
however whenever you deploy an

00:17:23,750 --> 00:17:28,960
application you have a short downtime so

00:17:26,240 --> 00:17:32,059
especially for those issuer API so the

00:17:28,960 --> 00:17:33,470
restful api is exposed to the to the

00:17:32,059 --> 00:17:35,450
issuer client they need to be highly

00:17:33,470 --> 00:17:36,620
available so whenever we need we need to

00:17:35,450 --> 00:17:38,750
fix it back or something

00:17:36,620 --> 00:17:40,820
that API needs to be highly available so

00:17:38,750 --> 00:17:43,100
for that we introduced a zero downtime

00:17:40,820 --> 00:17:44,110
zero downtime deployment and for that we

00:17:43,100 --> 00:17:46,120
are using

00:17:44,110 --> 00:17:48,190
in deployment so I'm not sure how many

00:17:46,120 --> 00:17:50,260
people are familiar with poop in

00:17:48,190 --> 00:17:52,990
deployment basically the idea is that

00:17:50,260 --> 00:17:56,799
for every app on Cloud Foundry you have

00:17:52,990 --> 00:17:58,750
a instance that you one tech blue and

00:17:56,799 --> 00:18:00,760
then our you tech it's green and

00:17:58,750 --> 00:18:02,950
basically all you do like on an update

00:18:00,760 --> 00:18:04,809
is switch between them you switch the

00:18:02,950 --> 00:18:06,610
routes between those applications so

00:18:04,809 --> 00:18:10,090
that's what we are using in our

00:18:06,610 --> 00:18:12,429
deployment so for that because the

00:18:10,090 --> 00:18:14,260
crowdfunding client does not support

00:18:12,429 --> 00:18:16,660
that out of the box so we have to write

00:18:14,260 --> 00:18:18,970
our own shell scripts for that that

00:18:16,660 --> 00:18:24,220
we're just executing with our on-premise

00:18:18,970 --> 00:18:28,890
Travis CI exactly so not an interesting

00:18:24,220 --> 00:18:31,809
thing is also that we rely heavily on

00:18:28,890 --> 00:18:33,220
RabbitMQ so especially like when we so

00:18:31,809 --> 00:18:35,860
we have you see like a lot of different

00:18:33,220 --> 00:18:39,100
services you see the issuer API you see

00:18:35,860 --> 00:18:41,980
the sharing API we have an email micro

00:18:39,100 --> 00:18:43,660
service and basically we use rapid mq to

00:18:41,980 --> 00:18:45,970
hook everything like everything is

00:18:43,660 --> 00:18:48,070
happening platform we basically do that

00:18:45,970 --> 00:18:49,900
heavily message based so that means like

00:18:48,070 --> 00:18:54,820
whenever we broadcast the transaction

00:18:49,900 --> 00:18:56,650
into the platform as you can see here we

00:18:54,820 --> 00:18:59,980
kind of put it into a queue basically

00:18:56,650 --> 00:19:02,559
and have kind of a transaction bonus or

00:18:59,980 --> 00:19:05,260
picking up the transaction podcasting it

00:19:02,559 --> 00:19:06,610
into the platform and monitoring that

00:19:05,260 --> 00:19:07,510
transaction so that means like if

00:19:06,610 --> 00:19:09,910
something goes wrong with the

00:19:07,510 --> 00:19:11,260
transactions we can notify back and say

00:19:09,910 --> 00:19:14,140
hey there's something wrong with us in

00:19:11,260 --> 00:19:15,730
section please check on that or once the

00:19:14,140 --> 00:19:17,980
transaction has been confirmed which

00:19:15,730 --> 00:19:19,480
actually can take up to one minute for

00:19:17,980 --> 00:19:23,169
the transaction to beacon to be

00:19:19,480 --> 00:19:27,460
confirmed the money's for we'll watch

00:19:23,169 --> 00:19:28,960
for that and will then broadcast back to

00:19:27,460 --> 00:19:31,390
the ready room Hugh hey we need to send

00:19:28,960 --> 00:19:33,040
the document to the applicant to the

00:19:31,390 --> 00:19:35,530
eights with the actual credential owner

00:19:33,040 --> 00:19:38,830
and we use basically in this case Amazon

00:19:35,530 --> 00:19:43,210
SES for that also another thing another

00:19:38,830 --> 00:19:46,630
issue that we had especially with golf

00:19:43,210 --> 00:19:49,090
only was called phone out of the box

00:19:46,630 --> 00:19:50,679
doesn't support something like API rate

00:19:49,090 --> 00:19:54,309
limits and stuff so for that we still

00:19:50,679 --> 00:19:57,570
had to use AWS API gateway and also for

00:19:54,309 --> 00:19:57,570
CDN we still had to use

00:19:57,790 --> 00:20:02,480
MSM cloud fund so this is currently

00:20:01,400 --> 00:20:04,100
where we're at right now but there's

00:20:02,480 --> 00:20:04,670
also a lot of things that we plan to do

00:20:04,100 --> 00:20:07,130
I mean

00:20:04,670 --> 00:20:08,750
tragg still like very so it's a pilot

00:20:07,130 --> 00:20:12,350
project we're still learning a lot of

00:20:08,750 --> 00:20:15,080
things we we have a lot of plans on what

00:20:12,350 --> 00:20:17,000
we want to change so still it's not

00:20:15,080 --> 00:20:19,280
really nice that's the holy theorem

00:20:17,000 --> 00:20:21,260
stuff has to run so currently we run it

00:20:19,280 --> 00:20:24,830
on msn ECS and with some container

00:20:21,260 --> 00:20:26,960
services and there's like a lot of gap

00:20:24,830 --> 00:20:28,880
between because like we need to make

00:20:26,960 --> 00:20:30,470
sure that everything is secure like a

00:20:28,880 --> 00:20:33,490
whole communication between closed phone

00:20:30,470 --> 00:20:37,280
ASAP cloud platform and msn container

00:20:33,490 --> 00:20:38,780
Emmerson container services so we had to

00:20:37,280 --> 00:20:42,650
introduce like a lot of security

00:20:38,780 --> 00:20:44,900
mechanisms in between so our idea is

00:20:42,650 --> 00:20:48,020
like like in the end everything should

00:20:44,900 --> 00:20:50,150
kind of running Cloud Foundry so

00:20:48,020 --> 00:20:52,460
currently you can still run like

00:20:50,150 --> 00:20:54,260
binaries in current like and

00:20:52,460 --> 00:20:56,060
containerize them in cart from the apps

00:20:54,260 --> 00:20:59,270
but still there's like lots of storage

00:20:56,060 --> 00:21:02,060
issues because blockchain notes take a

00:20:59,270 --> 00:21:04,490
lot of like filesystem storage and so

00:21:02,060 --> 00:21:06,230
that's why we kind of just used ECS for

00:21:04,490 --> 00:21:10,400
that but we are planning on

00:21:06,230 --> 00:21:12,470
transitioning that into into cloud

00:21:10,400 --> 00:21:14,810
forming use sa piece services for that

00:21:12,470 --> 00:21:18,140
and also what we also plan to use in the

00:21:14,810 --> 00:21:21,770
future is a mess ASAP API gateway for

00:21:18,140 --> 00:21:24,170
that yes

00:21:21,770 --> 00:21:34,870
all right so do we have any questions so

00:21:24,170 --> 00:21:34,870
far ok there's one question

00:21:41,650 --> 00:21:47,810
hmm hmm yes so basically um basically

00:21:45,770 --> 00:21:49,670
what would happen like so initially if

00:21:47,810 --> 00:21:52,910
you start using if you start using the

00:21:49,670 --> 00:21:55,550
system you would typically download this

00:21:52,910 --> 00:21:58,370
nodejs client actually so it's a it's

00:21:55,550 --> 00:22:00,080
actually a small web service that people

00:21:58,370 --> 00:22:04,070
can integrate into their platform so in

00:22:00,080 --> 00:22:05,960
our case opensap they use this client

00:22:04,070 --> 00:22:08,120
that integrated into their existing Ruby

00:22:05,960 --> 00:22:10,070
on Rails platform and with that client

00:22:08,120 --> 00:22:12,890
has capabilities to generate that key

00:22:10,070 --> 00:22:15,290
basically and for that they would

00:22:12,890 --> 00:22:16,580
establish the identity on the ethereal

00:22:15,290 --> 00:22:20,750
network

00:22:16,580 --> 00:22:23,330
so whenever basically a user basically

00:22:20,750 --> 00:22:25,520
on the platform clicks hey I want this

00:22:23,330 --> 00:22:27,050
certificate of this course that I

00:22:25,520 --> 00:22:30,230
completed I want this to be on

00:22:27,050 --> 00:22:33,950
blockchain the click on a button and in

00:22:30,230 --> 00:22:36,590
the background the micro servers would

00:22:33,950 --> 00:22:39,680
collect the document what hash it would

00:22:36,590 --> 00:22:41,540
bring it what can create like or so we

00:22:39,680 --> 00:22:44,240
have to find or JSON structure for that

00:22:41,540 --> 00:22:46,280
which actually follows an open open

00:22:44,240 --> 00:22:49,820
standard we actually use Mozilla open

00:22:46,280 --> 00:22:53,810
badges for that and basically that data

00:22:49,820 --> 00:22:57,710
gets busy hashed it gets written into a

00:22:53,810 --> 00:23:00,290
transaction and this Trent action will

00:22:57,710 --> 00:23:03,320
actually become signed by the issuer by

00:23:00,290 --> 00:23:05,390
their private key and from there it is

00:23:03,320 --> 00:23:07,280
always can always be associated and

00:23:05,390 --> 00:23:09,710
verified ok this transaction has been

00:23:07,280 --> 00:23:13,340
signed by this person and we pros cast

00:23:09,710 --> 00:23:15,290
it into the blockchain network and the

00:23:13,340 --> 00:23:17,780
blockchain network will do a lot of

00:23:15,290 --> 00:23:19,640
checks it will confirm there's a lot of

00:23:17,780 --> 00:23:21,830
like boxing specific stuff that need to

00:23:19,640 --> 00:23:24,710
be confirmed like gasps prize and like

00:23:21,830 --> 00:23:26,030
okay to actually provide like a high

00:23:24,710 --> 00:23:29,090
enough transaction fee and stuff like

00:23:26,030 --> 00:23:32,530
that it will also validate the signature

00:23:29,090 --> 00:23:35,900
and stuff like that and eventually this

00:23:32,530 --> 00:23:37,280
this transaction will be but this goes a

00:23:35,900 --> 00:23:39,170
little bit more into blockchain so I

00:23:37,280 --> 00:23:41,210
think for that I for people who are not

00:23:39,170 --> 00:23:42,890
like familiar whole like the whole trust

00:23:41,210 --> 00:23:44,210
system with blockchain itself works I

00:23:42,890 --> 00:23:46,700
would recommend looking further into

00:23:44,210 --> 00:23:48,710
that but basically the transaction at

00:23:46,700 --> 00:23:51,230
some point by the network

00:23:48,710 --> 00:23:53,059
it's written into a block which then at

00:23:51,230 --> 00:23:54,890
some point it's confirmed by all those

00:23:53,059 --> 00:23:57,440
nodes so basically all those nodes in

00:23:54,890 --> 00:24:00,620
the network they use a so-called

00:23:57,440 --> 00:24:02,179
consensus mechanism to agree on okay

00:24:00,620 --> 00:24:04,700
like okay so this is actually what we're

00:24:02,179 --> 00:24:05,990
gonna write now so and basically once it

00:24:04,700 --> 00:24:07,149
is written there it will stay there

00:24:05,990 --> 00:24:10,549
forever

00:24:07,149 --> 00:24:12,679
however for with if you'll be using

00:24:10,549 --> 00:24:16,730
so-called smart contract functionality

00:24:12,679 --> 00:24:19,580
so that means we also actually don't

00:24:16,730 --> 00:24:21,440
just allow issuers to write things to

00:24:19,580 --> 00:24:23,120
the blockchain because if we just write

00:24:21,440 --> 00:24:24,860
things to the blockchain then why don't

00:24:23,120 --> 00:24:26,929
we just use like something like PDF

00:24:24,860 --> 00:24:28,549
signed PDFs or something like that so

00:24:26,929 --> 00:24:31,399
actually the whole strength of

00:24:28,549 --> 00:24:33,799
blockchain is that you have a history of

00:24:31,399 --> 00:24:35,210
transactions so what we imagine in the

00:24:33,799 --> 00:24:37,520
future is and actually what we currently

00:24:35,210 --> 00:24:39,980
implemented is that you can also revoke

00:24:37,520 --> 00:24:42,200
a transaction and the smart contract

00:24:39,980 --> 00:24:43,960
which is kind of like a object

00:24:42,200 --> 00:24:47,000
containing the whole all the

00:24:43,960 --> 00:24:50,169
certificates basically on the blockchain

00:24:47,000 --> 00:24:53,059
will verify that only or make sure that

00:24:50,169 --> 00:24:56,419
only the issuer can actually revoke a

00:24:53,059 --> 00:24:58,850
transaction later on yeah and in the

00:24:56,419 --> 00:25:01,190
future we also plan stuff like okay like

00:24:58,850 --> 00:25:03,230
expiring certificates and certificates

00:25:01,190 --> 00:25:05,450
that can be renewed and stuff like that

00:25:03,230 --> 00:25:07,010
and all that stuff is commonly like hard

00:25:05,450 --> 00:25:19,820
to handle if you want to do it like in a

00:25:07,010 --> 00:25:23,330
central or traditional way it's a

00:25:19,820 --> 00:25:26,240
service yeah so so currently it's

00:25:23,330 --> 00:25:28,669
available like part of the I think it's

00:25:26,240 --> 00:25:29,899
the imagine IOT course and is a peer so

00:25:28,669 --> 00:25:31,460
it actually it's not available yet it

00:25:29,899 --> 00:25:33,940
will be available soon we are still

00:25:31,460 --> 00:25:37,100
working very hard on getting this out

00:25:33,940 --> 00:25:40,640
basically it's a service that we provide

00:25:37,100 --> 00:25:42,350
to SP customers basically or actually

00:25:40,640 --> 00:25:46,100
any people who participate in that

00:25:42,350 --> 00:25:47,720
course and then for like issuers we

00:25:46,100 --> 00:25:50,600
provide kind of a live real it's

00:25:47,720 --> 00:25:52,340
actually implement and p.m. module that

00:25:50,600 --> 00:25:55,159
you can install globally it's and you

00:25:52,340 --> 00:25:58,659
can just start it with from the command

00:25:55,159 --> 00:25:58,659
line and just run it in your platform

00:26:01,550 --> 00:26:06,080
yeah exactly it's a parallel application

00:26:03,260 --> 00:26:16,190
yeah it's some kind of in pilot and lab

00:26:06,080 --> 00:26:17,420
environment some testing as we said

00:26:16,190 --> 00:26:19,130
which is still in the pilot phase so we

00:26:17,420 --> 00:26:20,840
going to look at the scalability aspects

00:26:19,130 --> 00:26:22,550
and high availability I mean it the

00:26:20,840 --> 00:26:23,780
blocked in itself is pretty much though

00:26:22,550 --> 00:26:25,520
it's very promising it's still very

00:26:23,780 --> 00:26:27,200
nascent so we want to make sure it's

00:26:25,520 --> 00:26:29,809
stable anything that comes out of a zip

00:26:27,200 --> 00:26:31,250
it has to be highly reliable so we going

00:26:29,809 --> 00:26:36,140
to make sure of that and then probably

00:26:31,250 --> 00:26:40,179
look into commercialization aspects by

00:26:36,140 --> 00:26:40,179
chayote touch IOT

00:26:40,360 --> 00:26:46,970
yeah exactly yeah I mean there's also

00:26:45,200 --> 00:26:48,800
there's a lot of commercial or possible

00:26:46,970 --> 00:26:51,020
commercial commercialization aspects

00:26:48,800 --> 00:26:53,090
that we have looked into but currently

00:26:51,020 --> 00:26:54,710
we just want to focus on this small

00:26:53,090 --> 00:26:56,420
thing making the platform stable and

00:26:54,710 --> 00:26:57,679
then from there or see okay like how can

00:26:56,420 --> 00:27:08,059
we scale from there so there was also

00:26:57,679 --> 00:27:10,670
question over there that's a very good

00:27:08,059 --> 00:27:11,900
question and that's a that's a problem

00:27:10,670 --> 00:27:15,350
that we are currently facing at the

00:27:11,900 --> 00:27:17,540
moment so right now what we do we have a

00:27:15,350 --> 00:27:19,520
limited set of issues so basic currently

00:27:17,540 --> 00:27:22,070
we pay them so we provide them with the

00:27:19,520 --> 00:27:24,340
ether or with the cryptocurrency to be

00:27:22,070 --> 00:27:26,630
able to issue those transactions so

00:27:24,340 --> 00:27:29,270
there's a lot of things that need to be

00:27:26,630 --> 00:27:30,890
figured out so but part in this pilot I

00:27:29,270 --> 00:27:33,440
think this is like a currently viable

00:27:30,890 --> 00:27:34,640
way for us to do it from I mean we're

00:27:33,440 --> 00:27:35,480
still looking into the business model

00:27:34,640 --> 00:27:36,890
aspect of it

00:27:35,480 --> 00:27:39,620
but technically when we kind of

00:27:36,890 --> 00:27:41,240
evaluated this project in US alone

00:27:39,620 --> 00:27:44,270
there's like 60 million checks that

00:27:41,240 --> 00:27:46,700
happen every year and at on average it

00:27:44,270 --> 00:27:48,080
costs for like 30 40 bucks per check so

00:27:46,700 --> 00:27:50,179
this is there's definitely lot of money

00:27:48,080 --> 00:27:52,100
in it but how do we commercialize who

00:27:50,179 --> 00:27:53,690
pays for it it still something in

00:27:52,100 --> 00:27:56,030
work-in-progress we want to make sure

00:27:53,690 --> 00:27:58,760
the platform itself can scale and then

00:27:56,030 --> 00:28:00,660
sort of put the hooks into monetization

00:27:58,760 --> 00:28:06,840
aspects

00:28:00,660 --> 00:28:10,940
yeah yes correct

00:28:06,840 --> 00:28:13,230
yeah there's also like a lot of like I

00:28:10,940 --> 00:28:14,760
mean there's also like private

00:28:13,230 --> 00:28:16,320
blockchains and stuff but we really see

00:28:14,760 --> 00:28:18,300
like for this project this has to be on

00:28:16,320 --> 00:28:19,740
a public blockchain because the more

00:28:18,300 --> 00:28:21,360
nodes on the network participate

00:28:19,740 --> 00:28:24,870
participate the more trustworthy and

00:28:21,360 --> 00:28:26,880
stable the network is so that's we have

00:28:24,870 --> 00:28:29,580
a lot of options there's like there was

00:28:26,880 --> 00:28:32,130
a Bitcoin we have a we have a little bit

00:28:29,580 --> 00:28:34,290
coin if your things like multi-chain and

00:28:32,130 --> 00:28:37,290
stuff and like the only things where we

00:28:34,290 --> 00:28:39,000
see like what is really like truly

00:28:37,290 --> 00:28:41,010
blockchain in our opinion is something

00:28:39,000 --> 00:28:43,200
like Bitcoin or if it's like really

00:28:41,010 --> 00:28:45,780
publicly and transparent network

00:28:43,200 --> 00:28:47,010
basically where a lot of different use

00:28:45,780 --> 00:28:49,350
cases are implemented and a lot of

00:28:47,010 --> 00:28:51,600
different people have interest in the

00:28:49,350 --> 00:28:54,780
platform to be running so that's why we

00:28:51,600 --> 00:28:57,660
at the moment could have committed three

00:28:54,780 --> 00:29:00,930
theorem and for us as of right now we

00:28:57,660 --> 00:29:04,500
had we have made really good experience

00:29:00,930 --> 00:29:06,150
because if theorem itself also exposes

00:29:04,500 --> 00:29:08,490
like really is a sophisticated API is

00:29:06,150 --> 00:29:10,050
especially like with the whole smart

00:29:08,490 --> 00:29:13,370
contract functionality so this is very

00:29:10,050 --> 00:29:13,370
very beneficial for us

00:29:19,250 --> 00:29:26,070
so with hyper ledger basically the idea

00:29:23,160 --> 00:29:28,320
is that you would create your own like

00:29:26,070 --> 00:29:31,650
blocking Network so that would happen to

00:29:28,320 --> 00:29:33,690
be like if you run a business network of

00:29:31,650 --> 00:29:36,300
like Main Street for instance like we

00:29:33,690 --> 00:29:38,220
have a supply chain stuff like that

00:29:36,300 --> 00:29:40,170
and in there like the typical use case

00:29:38,220 --> 00:29:41,910
would be like you want to create your

00:29:40,170 --> 00:29:44,490
own network and also hyper ledger it

00:29:41,910 --> 00:29:46,140
solves a lot of more more problems for

00:29:44,490 --> 00:29:48,300
instance like encryption of the actual

00:29:46,140 --> 00:29:52,140
data so the data is actually not visible

00:29:48,300 --> 00:29:54,900
to all the nodes we are so we are also

00:29:52,140 --> 00:29:58,020
kind of related to the team who works

00:29:54,900 --> 00:30:01,680
with hyper ledger for now we have

00:29:58,020 --> 00:30:03,780
evaluated hume and we have made we have

00:30:01,680 --> 00:30:07,890
made a really good experience with hume

00:30:03,780 --> 00:30:12,210
so far and kind of the reason why not

00:30:07,890 --> 00:30:14,070
high pressure is there is no like like

00:30:12,210 --> 00:30:16,590
the one hyper legend network right

00:30:14,070 --> 00:30:18,360
so and also especially like if you if we

00:30:16,590 --> 00:30:20,760
want to develop like a product at this

00:30:18,360 --> 00:30:22,500
point with like a higher trust

00:30:20,760 --> 00:30:26,100
worthiness I think that's why we decided

00:30:22,500 --> 00:30:31,130
to go for a public one instance that

00:30:26,100 --> 00:30:31,130
were crazy yes

00:30:38,920 --> 00:30:45,070
so yeah so only in the so only at two

00:30:43,120 --> 00:30:48,700
stages the first stage would be during

00:30:45,070 --> 00:30:50,380
the issuing process because like the

00:30:48,700 --> 00:30:52,080
transaction needs some time to be

00:30:50,380 --> 00:30:54,880
confirmed on the blockchain and for that

00:30:52,080 --> 00:30:56,410
we cache the certificate in the MongoDB

00:30:54,880 --> 00:30:57,670
and after we send all the email with the

00:30:56,410 --> 00:30:59,890
leaders from the from the database

00:30:57,670 --> 00:31:02,080
basically then in the second stage when

00:30:59,890 --> 00:31:04,720
the user actually decides by himself to

00:31:02,080 --> 00:31:06,750
share this is good like and store it on

00:31:04,720 --> 00:31:09,610
our platform and hence generate a link

00:31:06,750 --> 00:31:11,950
so this would be the second time what we

00:31:09,610 --> 00:31:13,720
also implementing right now is kind of a

00:31:11,950 --> 00:31:16,540
self-destruction mechanism so basically

00:31:13,720 --> 00:31:18,910
the certificate or the or basically the

00:31:16,540 --> 00:31:20,800
user can say okay I only want this link

00:31:18,910 --> 00:31:22,630
available to be available for let's say

00:31:20,800 --> 00:31:25,390
48 hours and then after that this videos

00:31:22,630 --> 00:31:30,750
come so our aim is truly like that like

00:31:25,390 --> 00:31:30,750
the user kind of owns the data basically

00:31:30,900 --> 00:31:34,180
thank you all I think we're sort of

00:31:32,710 --> 00:31:36,420
running out our time here we're more

00:31:34,180 --> 00:31:40,050
than happy to take any questions offline

00:31:36,420 --> 00:31:40,050

YouTube URL: https://www.youtube.com/watch?v=1_xW3o4PvQE


