Title: Challenges in Migrating Legacy .NET Apps into PCF - Krystian Czepiel, Grape UP
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	Challenges in Migrating Legacy .NET Apps into PCF - Krystian Czepiel, Grape UP

12 years old .net framework application migrated to pivotal cloud foundry? Yeah, why not?
The main idea for this talk is to show the audience how we created fully automated continuous integration and continuous delivery pipelines using concourse and PCF for legacy .net application. We will go through all big choices that we had to make at the beginning and all challenges that we faced while working on that project.
We start off by briefly describing migration requirements and preconditions.
In the main part of the presentation, we focus on work that needs to be done to setup pipeline. In this part, we discuss the following topics:
·       Toolset decision (TFS vs Concourse)
·       Build process
·       Integration environment deploy
·       Acceptance tests execution
·       Package delivery
You will be left with a ready solution for most common issues and choices that you will have to make during your own migration process.

About Krystian Czepiel
Krystian, a .NET Cloud Native Team Leader at Grape Up enthusiastic about the cloud and .NET technologies. By utilizing the latest solutions such as Cloud Foundry, he works in collaboration with clients and business partners on software development projects.
Captions: 
	00:00:00,199 --> 00:00:08,490
okay so first some fire accident on

00:00:05,130 --> 00:00:09,210
sment we probably saw it several times

00:00:08,490 --> 00:00:15,990
today

00:00:09,210 --> 00:00:19,260
fires out there so I will go okay mm in

00:00:15,990 --> 00:00:22,410
grating SP dotnet legacy large

00:00:19,260 --> 00:00:24,570
application is a big challenge and most

00:00:22,410 --> 00:00:28,529
of the companies and developers are

00:00:24,570 --> 00:00:30,720
afraid of facing wave so today I will go

00:00:28,529 --> 00:00:33,630
with you step by step by step through

00:00:30,720 --> 00:00:36,120
that process and showing you and show

00:00:33,630 --> 00:00:40,829
you my way to do that my presentation

00:00:36,120 --> 00:00:44,520
have two goals first of all is showed

00:00:40,829 --> 00:00:47,489
emigration that I did like few months

00:00:44,520 --> 00:00:50,489
ago and show you that it is possible and

00:00:47,489 --> 00:00:53,550
it is not so hard to do and it is

00:00:50,489 --> 00:00:57,420
nothing to afraid with second goal is to

00:00:53,550 --> 00:01:01,289
show you all knowledge the dialer during

00:00:57,420 --> 00:01:03,809
that process but firstly I would like to

00:01:01,289 --> 00:01:06,390
introduce myself I'm dotnet geek i

00:01:03,809 --> 00:01:09,330
working with dotnet from more than

00:01:06,390 --> 00:01:12,869
eleven years and last few years i spent

00:01:09,330 --> 00:01:18,110
in a cloud i working in grey path and i

00:01:12,869 --> 00:01:20,220
helping our clients to do the digital

00:01:18,110 --> 00:01:25,470
transformation and called go to the

00:01:20,220 --> 00:01:28,500
cloud before I start I would like to ask

00:01:25,470 --> 00:01:32,509
a few questions first one is who of you

00:01:28,500 --> 00:01:36,030
can call yourself a dotnet developer

00:01:32,509 --> 00:01:40,920
okay so that's good and second one who

00:01:36,030 --> 00:01:42,290
have you ever make the CF push okay so

00:01:40,920 --> 00:01:45,710
not so bad

00:01:42,290 --> 00:01:48,049
okay unlike the other epic other

00:01:45,710 --> 00:01:51,590
presentation that you saw today

00:01:48,049 --> 00:01:54,840
Wilfork forget about dotnet core for are

00:01:51,590 --> 00:01:59,399
that core don't exist as I would like to

00:01:54,840 --> 00:02:02,490
show you that even and even old legacy

00:01:59,399 --> 00:02:05,969
don't let framework application even web

00:02:02,490 --> 00:02:10,709
form application is is good to be in the

00:02:05,969 --> 00:02:14,220
cloud and it is and it give you a lot of

00:02:10,709 --> 00:02:18,030
benefit and there is nothing nothing

00:02:14,220 --> 00:02:21,900
with doing that and unfortunately we

00:02:18,030 --> 00:02:26,580
couldn't use containers as application

00:02:21,900 --> 00:02:28,260
as Windows Server 2012 that this most of

00:02:26,580 --> 00:02:30,300
this application is using now and

00:02:28,260 --> 00:02:33,570
because of some dependency we couldn't

00:02:30,300 --> 00:02:35,820
use the 2016 or we afraid that our

00:02:33,570 --> 00:02:39,060
application will not work correctly in

00:02:35,820 --> 00:02:42,840
2016 and is not not supporting it but

00:02:39,060 --> 00:02:47,730
still Cloud Foundry allow us to start

00:02:42,840 --> 00:02:49,200
that application ok first when we going

00:02:47,730 --> 00:02:52,680
through the migration process we would

00:02:49,200 --> 00:02:56,910
we need to make some goals and decide to

00:02:52,680 --> 00:02:59,130
do some goals our was we have three

00:02:56,910 --> 00:03:01,800
milestones first one was continuous

00:02:59,130 --> 00:03:04,709
integrations we would like to implement

00:03:01,800 --> 00:03:07,080
in our application full pipeline I'm

00:03:04,709 --> 00:03:10,920
starting from building application

00:03:07,080 --> 00:03:13,740
second run some unit tests the last the

00:03:10,920 --> 00:03:16,410
next one was focused on the Cloud

00:03:13,740 --> 00:03:18,630
Foundry so we would like to deploy our

00:03:16,410 --> 00:03:22,860
application dynamically to the our Cloud

00:03:18,630 --> 00:03:24,810
Foundry environment and using that Cloud

00:03:22,860 --> 00:03:28,080
Foundry environment would like to start

00:03:24,810 --> 00:03:31,290
some acceptin tests based on it second

00:03:28,080 --> 00:03:33,269
milestone is allow a log

00:03:31,290 --> 00:03:37,650
pipeline to create our release a

00:03:33,269 --> 00:03:40,739
reusable package then by one-click the

00:03:37,650 --> 00:03:43,140
best solution give the operator way to

00:03:40,739 --> 00:03:48,750
deploy it to an environment that he

00:03:43,140 --> 00:03:53,880
won't you 80 QA and production the last

00:03:48,750 --> 00:03:56,040
goal was to allow operator 2 to go to

00:03:53,880 --> 00:04:01,650
the production in easy way and ensure

00:03:56,040 --> 00:04:04,769
that all all issues that would be found

00:04:01,650 --> 00:04:06,480
there will be easy to roll back so we

00:04:04,769 --> 00:04:09,600
got a requirement that we should have

00:04:06,480 --> 00:04:14,880
green blue green deployment and also pre

00:04:09,600 --> 00:04:18,900
prod environment as you see we our goals

00:04:14,880 --> 00:04:22,979
were not so so hard to do and we don't

00:04:18,900 --> 00:04:27,120
force to make all 12 factors in our

00:04:22,979 --> 00:04:29,669
application as we would like to average

00:04:27,120 --> 00:04:31,500
huge refactoring that will be needed

00:04:29,669 --> 00:04:34,500
when we would like to go to the core

00:04:31,500 --> 00:04:37,820
especially with application with that

00:04:34,500 --> 00:04:40,460
type of application first of all we also

00:04:37,820 --> 00:04:43,470
go through the existing process

00:04:40,460 --> 00:04:47,910
unfortunately nothing could be reused as

00:04:43,470 --> 00:04:51,180
this like I see the smiles on your on

00:04:47,910 --> 00:04:53,760
your faces I like it this standard on

00:04:51,180 --> 00:04:56,820
that type of application so all all

00:04:53,760 --> 00:05:00,300
steps till now were fooling for full

00:04:56,820 --> 00:05:03,690
manual manual builds on developer

00:05:00,300 --> 00:05:05,850
machines then developers just move this

00:05:03,690 --> 00:05:09,960
application manually to some dev

00:05:05,850 --> 00:05:12,360
environment sometimes not sometimes it

00:05:09,960 --> 00:05:15,540
goes to QA again manually and even

00:05:12,360 --> 00:05:18,570
deployment to production services were

00:05:15,540 --> 00:05:21,289
also manual even that it was vertically

00:05:18,570 --> 00:05:25,320
scaled there were free instances all

00:05:21,289 --> 00:05:28,020
have all steps were manual so now let's

00:05:25,320 --> 00:05:32,010
go through the application application

00:05:28,020 --> 00:05:35,210
is a teenager is 12 years old

00:05:32,010 --> 00:05:40,460
written in asp.net webforms

00:05:35,210 --> 00:05:42,870
some code is date back to dotnet 1.1

00:05:40,460 --> 00:05:47,310
application required to have installed

00:05:42,870 --> 00:05:49,650
on the machines some custom providers in

00:05:47,310 --> 00:05:56,340
that cases it was Oracle Crystal Reports

00:05:49,650 --> 00:05:59,400
and some custom are having to our hopes

00:05:56,340 --> 00:06:02,820
that that this will be session less was

00:05:59,400 --> 00:06:05,700
of course go away as application use

00:06:02,820 --> 00:06:08,280
database to store the session so yeah we

00:06:05,700 --> 00:06:11,430
can vertically scale application but we

00:06:08,280 --> 00:06:15,750
still have the the we could have issue

00:06:11,430 --> 00:06:18,770
with database and the last issue that we

00:06:15,750 --> 00:06:22,110
found the bigger the biggest one was the

00:06:18,770 --> 00:06:24,690
usage of Active Directory as in the

00:06:22,110 --> 00:06:27,200
solution we have several application and

00:06:24,690 --> 00:06:31,320
one over the internal one was using

00:06:27,200 --> 00:06:34,800
Windows identity also this was not all

00:06:31,320 --> 00:06:36,599
issues we have another smaller like for

00:06:34,800 --> 00:06:39,719
example some of the third parties web

00:06:36,599 --> 00:06:41,360
services used mutual authentication and

00:06:39,719 --> 00:06:43,790
required

00:06:41,360 --> 00:06:46,010
certificates even with private keys

00:06:43,790 --> 00:06:49,450
installed on this machine on in the

00:06:46,010 --> 00:06:51,410
local store so as you can imagine

00:06:49,450 --> 00:06:53,690
someone could say that these

00:06:51,410 --> 00:06:57,350
applications are able to go to the cloud

00:06:53,690 --> 00:07:01,610
but I don't agree it go to the cloud

00:06:57,350 --> 00:07:02,150
with really only small small refactoring

00:07:01,610 --> 00:07:05,180
needed

00:07:02,150 --> 00:07:08,150
ok as we already know the process that

00:07:05,180 --> 00:07:10,490
we did that we start with as we know the

00:07:08,150 --> 00:07:13,450
application and we can start migration

00:07:10,490 --> 00:07:19,880
process but to do that first we need to

00:07:13,450 --> 00:07:24,620
choice C ICD tool based on some internal

00:07:19,880 --> 00:07:26,960
policies and some license stuff we we

00:07:24,620 --> 00:07:30,230
have only two to choose first one was on

00:07:26,960 --> 00:07:33,050
premise T of on-premise TFS and second

00:07:30,230 --> 00:07:36,710
one was conkers we talked about TFS and

00:07:33,050 --> 00:07:39,080
who thinking about it we have we know

00:07:36,710 --> 00:07:42,020
that it have few advantages and some

00:07:39,080 --> 00:07:45,440
disadvantages the most important from

00:07:42,020 --> 00:07:48,280
our perspective advantage was integrated

00:07:45,440 --> 00:07:51,010
work tracker integrated nougat and

00:07:48,280 --> 00:07:53,900
Active Directory Integration so

00:07:51,010 --> 00:07:56,150
everything what developer know till now

00:07:53,900 --> 00:07:59,540
can be reused but the biggest

00:07:56,150 --> 00:08:03,680
disadvantage for the TFS on premise is

00:07:59,540 --> 00:08:06,290
lack of C ICD process written as a code

00:08:03,680 --> 00:08:09,380
or script or anything that could be

00:08:06,290 --> 00:08:12,310
stored in Syme in git or anywhere else

00:08:09,380 --> 00:08:15,830
and that could be reused

00:08:12,310 --> 00:08:18,650
good information for everyone is that V

00:08:15,830 --> 00:08:21,560
STS the online version of TFS have

00:08:18,650 --> 00:08:23,930
already dead support so there is a

00:08:21,560 --> 00:08:26,150
pretty good hope that soon even

00:08:23,930 --> 00:08:28,490
on-premise version will have it of

00:08:26,150 --> 00:08:31,880
course it was released three months ago

00:08:28,490 --> 00:08:33,740
so you know everyone need to test it and

00:08:31,880 --> 00:08:37,550
check what the first have the first

00:08:33,740 --> 00:08:41,390
version words but the there is still

00:08:37,550 --> 00:08:43,130
some how we talked about conquers it

00:08:41,390 --> 00:08:45,440
have totally different advantages and

00:08:43,130 --> 00:08:48,500
totally different than that we know from

00:08:45,440 --> 00:08:51,820
the TFS but from our perspective it

00:08:48,500 --> 00:08:54,860
provides a very similar functionality

00:08:51,820 --> 00:08:57,920
first advantage of using concourse a

00:08:54,860 --> 00:09:00,680
a docker so based of using the

00:08:57,920 --> 00:09:03,110
containers we are able to we are sure

00:09:00,680 --> 00:09:08,060
that our builds are in new table and

00:09:03,110 --> 00:09:12,860
each build is in totally new container

00:09:08,060 --> 00:09:14,329
made a second second very very important

00:09:12,860 --> 00:09:17,000
from our perspective is current count

00:09:14,329 --> 00:09:20,110
from the litigation for crown founder

00:09:17,000 --> 00:09:23,990
there is made special resource inside

00:09:20,110 --> 00:09:26,769
the conquer that we can use we could do

00:09:23,990 --> 00:09:29,420
not need to create any custom powershell

00:09:26,769 --> 00:09:32,149
scripts to put our application the

00:09:29,420 --> 00:09:36,170
integration is very smooth we can also

00:09:32,149 --> 00:09:38,209
use the same type of authentication as

00:09:36,170 --> 00:09:39,380
we have in cloud foundry for example

00:09:38,209 --> 00:09:43,190
open out

00:09:39,380 --> 00:09:46,910
unlike TFS it allow us to use my multi

00:09:43,190 --> 00:09:50,750
resources and trigger the application if

00:09:46,910 --> 00:09:52,940
any of them change so we can have our

00:09:50,750 --> 00:09:55,310
source code in different grid the

00:09:52,940 --> 00:09:58,190
pipeline's definition in different one

00:09:55,310 --> 00:10:00,709
and also for example some some other

00:09:58,190 --> 00:10:04,339
build scripts in the in the next one so

00:10:00,709 --> 00:10:07,610
we can do that in TFS we are not able to

00:10:04,339 --> 00:10:14,110
do that even in the VST s that one that

00:10:07,610 --> 00:10:18,709
unlike version and asked the biggest one

00:10:14,110 --> 00:10:22,040
compared to the TFS advantage is CSC ICD

00:10:18,709 --> 00:10:24,620
definition it is written now in the ammo

00:10:22,040 --> 00:10:27,709
at this definition are very nice are

00:10:24,620 --> 00:10:29,899
very easy to compare and to maintain the

00:10:27,709 --> 00:10:32,690
biggest disadvantage and this time is

00:10:29,899 --> 00:10:35,570
not integrated Mugur and not created new

00:10:32,690 --> 00:10:39,320
god resources so every time when we will

00:10:35,570 --> 00:10:41,240
push our application to the for example

00:10:39,320 --> 00:10:44,990
to new get after builded we are not able

00:10:41,240 --> 00:10:46,699
in concourse to observe it and trigger

00:10:44,990 --> 00:10:48,740
the next time plan for example

00:10:46,699 --> 00:10:52,399
deployment time plan when we have next

00:10:48,740 --> 00:10:55,220
version there after because they're all

00:10:52,399 --> 00:10:59,180
all pros and cons we decided to use

00:10:55,220 --> 00:11:01,190
concourse try that after small POC we

00:10:59,180 --> 00:11:05,329
check that in easy way we are able to

00:11:01,190 --> 00:11:07,579
use maven to store to start to use to

00:11:05,329 --> 00:11:08,150
use maven to store for example in nexus

00:11:07,579 --> 00:11:15,110
or

00:11:08,150 --> 00:11:19,190
inside that DFS our our V versions okay

00:11:15,110 --> 00:11:22,270
so as we have already all tools and all

00:11:19,190 --> 00:11:27,200
processes and all our migration path

00:11:22,270 --> 00:11:29,510
chosen we can start migration so first

00:11:27,200 --> 00:11:33,920
thing that we need to do if we talk

00:11:29,510 --> 00:11:38,050
about dotnet SP SP net workforce

00:11:33,920 --> 00:11:40,670
application and Windows 2012 is

00:11:38,050 --> 00:11:43,040
configure our virtual machines

00:11:40,670 --> 00:11:44,110
unfortunately we have not docker so we

00:11:43,040 --> 00:11:46,340
can do it

00:11:44,110 --> 00:11:48,770
automatic dynamically when we deploy

00:11:46,340 --> 00:11:51,320
application we need to install some

00:11:48,770 --> 00:11:54,080
power some stuff inside the virtual

00:11:51,320 --> 00:11:58,610
machines in case of conkers it was of

00:11:54,080 --> 00:12:00,580
course a mess build web deploy and some

00:11:58,610 --> 00:12:03,710
custom tools that we are using like

00:12:00,580 --> 00:12:06,650
crystal crystal crystal report Oracle

00:12:03,710 --> 00:12:09,170
Oracle data provider and any other

00:12:06,650 --> 00:12:13,970
custom tools up required by application

00:12:09,170 --> 00:12:16,700
we needed also install iis and Google

00:12:13,970 --> 00:12:21,290
Chrome but after I will talk later about

00:12:16,700 --> 00:12:23,350
it more in case of PCF first of all our

00:12:21,290 --> 00:12:25,940
victim on machine needed to have only

00:12:23,350 --> 00:12:30,140
this custom tool that is required by the

00:12:25,940 --> 00:12:32,900
application okay so everything is

00:12:30,140 --> 00:12:34,460
prepared so we can execute CF push but

00:12:32,900 --> 00:12:38,470
before we doing it we need to build

00:12:34,460 --> 00:12:41,150
application like it is also common in

00:12:38,470 --> 00:12:45,380
all the application we were not able to

00:12:41,150 --> 00:12:47,600
even easily build it as conkers required

00:12:45,380 --> 00:12:51,430
that application will build on totally

00:12:47,600 --> 00:12:53,900
clean machine without any specific

00:12:51,430 --> 00:12:57,410
configuration our application of course

00:12:53,900 --> 00:12:59,720
requires that the others are in some

00:12:57,410 --> 00:13:01,660
exact folder so all developers machines

00:12:59,720 --> 00:13:04,250
are set up in that way it is

00:13:01,660 --> 00:13:06,620
unacceptable in case of concur so it

00:13:04,250 --> 00:13:10,070
need to be totally clean up after

00:13:06,620 --> 00:13:13,580
already clean up the next thing that we

00:13:10,070 --> 00:13:15,770
need to handle is using a different

00:13:13,580 --> 00:13:19,640
version of MS builds in our solution we

00:13:15,770 --> 00:13:21,430
need to use it and Microsoft you need to

00:13:19,640 --> 00:13:24,600
save a didn't show off

00:13:21,430 --> 00:13:27,310
because if we even installed msbuild

00:13:24,600 --> 00:13:29,230
everywhere it could the MS build will be

00:13:27,310 --> 00:13:33,279
with different paths there is no like

00:13:29,230 --> 00:13:36,130
store that show us the path to different

00:13:33,279 --> 00:13:39,339
version of ms built so we did very small

00:13:36,130 --> 00:13:41,350
work around set up own custom variables

00:13:39,339 --> 00:13:43,630
custom environment variables in the

00:13:41,350 --> 00:13:45,240
inside concourse so we were able to easy

00:13:43,630 --> 00:13:48,220
to manage it

00:13:45,240 --> 00:13:51,339
after we push this application the first

00:13:48,220 --> 00:13:55,510
issue that we solved that it warm up

00:13:51,339 --> 00:13:59,010
very very very long so our acceptance

00:13:55,510 --> 00:14:03,100
tests were gives us a lot of issues and

00:13:59,010 --> 00:14:05,380
also our vertical scale was very hard to

00:14:03,100 --> 00:14:08,200
do as it was not smooth because even

00:14:05,380 --> 00:14:10,660
we've got some instance now we get like

00:14:08,200 --> 00:14:13,000
timeouts or even two minutes response

00:14:10,660 --> 00:14:16,930
because of the warm ups so we needed to

00:14:13,000 --> 00:14:20,350
so we decided to pre compare all espy

00:14:16,930 --> 00:14:22,960
dotnet I chose to do that on in concours

00:14:20,350 --> 00:14:25,420
we needed is letters it worked like that

00:14:22,960 --> 00:14:26,430
as we as you probably know so we

00:14:25,420 --> 00:14:29,370
installed it

00:14:26,430 --> 00:14:31,990
the next issue that we found after that

00:14:29,370 --> 00:14:34,390
you need to remember that precompilation

00:14:31,990 --> 00:14:37,839
orphanage will go through all asp.net

00:14:34,390 --> 00:14:40,240
pages even that one that are blocked by

00:14:37,839 --> 00:14:42,880
feature toggles or were implemented ten

00:14:40,240 --> 00:14:46,060
years ago and are not not anymore used

00:14:42,880 --> 00:14:48,339
all of them need to work so again some

00:14:46,060 --> 00:14:49,779
cleanup but you know it was like half a

00:14:48,339 --> 00:14:55,209
day or something like that so this is a

00:14:49,779 --> 00:14:59,470
big deal okay so our application is

00:14:55,209 --> 00:15:02,050
builded we are we are fine with with we

00:14:59,470 --> 00:15:05,910
are in the point that we can upload it

00:15:02,050 --> 00:15:10,360
to our path in clan founder to run a

00:15:05,910 --> 00:15:15,070
legacy asp.net application we use HW c

00:15:10,360 --> 00:15:19,390
built back this build back is using is

00:15:15,070 --> 00:15:23,080
using self hosted web KPI that there are

00:15:19,390 --> 00:15:30,160
own i is when you run more on that EXA

00:15:23,080 --> 00:15:32,410
and run your single application so so so

00:15:30,160 --> 00:15:33,980
we are able to use it in that way i will

00:15:32,410 --> 00:15:39,080
i will let you know more

00:15:33,980 --> 00:15:41,420
in few moments about it so to push

00:15:39,080 --> 00:15:43,850
application to our CF we need also to

00:15:41,420 --> 00:15:46,970
have the AML files with some definition

00:15:43,850 --> 00:15:48,620
about the routing URLs a lot of stuff of

00:15:46,970 --> 00:15:50,990
course we don't want to hardcore

00:15:48,620 --> 00:15:53,390
disciplic this this type of files in our

00:15:50,990 --> 00:15:56,180
source source code so we would like to

00:15:53,390 --> 00:15:59,050
make it dynamically based on some

00:15:56,180 --> 00:16:02,300
environment variables unfortunately

00:15:59,050 --> 00:16:05,030
there is only one powerful module that

00:16:02,300 --> 00:16:07,790
support us with that but after one day

00:16:05,030 --> 00:16:09,890
test we saw that it do not give us a

00:16:07,790 --> 00:16:12,890
sufficient functionality that we need

00:16:09,890 --> 00:16:15,490
and a mode that is produced as not in

00:16:12,890 --> 00:16:18,470
good shape so we decided to use Python

00:16:15,490 --> 00:16:19,970
again we need to install it on conkers

00:16:18,470 --> 00:16:22,670
if you would like to use only Windows

00:16:19,970 --> 00:16:24,380
machines in some cases we can use

00:16:22,670 --> 00:16:27,170
horizontally new machine so in that

00:16:24,380 --> 00:16:29,960
cases we can we can use it okay so we

00:16:27,170 --> 00:16:35,030
have already the manifest prepare we

00:16:29,960 --> 00:16:39,740
have our new files so we can we could

00:16:35,030 --> 00:16:43,490
deploy it to VCF integration between

00:16:39,740 --> 00:16:45,470
Concourse and Cloud Foundry so in so

00:16:43,490 --> 00:16:47,240
good way that there was no any issues

00:16:45,470 --> 00:16:51,980
that another application was push out

00:16:47,240 --> 00:16:54,670
and start working but unfortunately it

00:16:51,980 --> 00:16:58,730
started working we start some manual

00:16:54,670 --> 00:17:01,660
tests and we found some issues several

00:16:58,730 --> 00:17:06,320
so this was not so bad as we as we were

00:17:01,660 --> 00:17:09,290
thinking at the beginning now at this

00:17:06,320 --> 00:17:12,770
slide I showing that I think that most

00:17:09,290 --> 00:17:16,550
important issues issues that I think all

00:17:12,770 --> 00:17:18,950
application that you will push the cloud

00:17:16,550 --> 00:17:22,850
funder that are web forms that you will

00:17:18,950 --> 00:17:25,430
have a first issue was when we have

00:17:22,850 --> 00:17:29,330
several instances in case for example

00:17:25,430 --> 00:17:30,950
two and our post bacc go to the

00:17:29,330 --> 00:17:32,840
different instance than the previous one

00:17:30,950 --> 00:17:35,210
because we don't have sticky session we

00:17:32,840 --> 00:17:37,280
don't know we don't want a first issue

00:17:35,210 --> 00:17:39,260
that we saw that viewstate couldn't be

00:17:37,280 --> 00:17:41,180
decrypted and couldn't be decrypted

00:17:39,260 --> 00:17:42,320
because we are using different machine

00:17:41,180 --> 00:17:45,590
case okay

00:17:42,320 --> 00:17:47,450
neat workaround set set machine key in

00:17:45,590 --> 00:17:50,539
the owner application level there is no

00:17:47,450 --> 00:17:52,789
way to do different work around it next

00:17:50,539 --> 00:17:57,700
issue was with request context you need

00:17:52,789 --> 00:18:02,360
to know that Rooter that is used by

00:17:57,700 --> 00:18:05,360
Cloud Foundry mess-up it quite sink

00:18:02,360 --> 00:18:08,510
significantly for example all parts will

00:18:05,360 --> 00:18:10,970
be totally different all i PS will be

00:18:08,510 --> 00:18:12,380
totally different so all our redirects

00:18:10,970 --> 00:18:15,559
that we have for example in our

00:18:12,380 --> 00:18:17,779
application aspect of that type that we

00:18:15,559 --> 00:18:20,389
are also sometimes using will have

00:18:17,779 --> 00:18:22,460
totally wrong wrong URLs so we need to

00:18:20,389 --> 00:18:25,370
remember that oh all the usages of it

00:18:22,460 --> 00:18:27,679
need to be refactor next thing is store

00:18:25,370 --> 00:18:30,649
location for example for certificates

00:18:27,679 --> 00:18:32,840
every place and in your application that

00:18:30,649 --> 00:18:35,269
you are using the local machines need

00:18:32,840 --> 00:18:38,299
not be changed best to current user

00:18:35,269 --> 00:18:42,110
because it is enough as when Cloud

00:18:38,299 --> 00:18:45,649
Foundry starting new new new new

00:18:42,110 --> 00:18:48,519
instance create in case of Windows 2012

00:18:45,649 --> 00:18:51,320
virtual container that there's nothing

00:18:48,519 --> 00:18:53,750
nothing more than the new user just

00:18:51,320 --> 00:18:55,850
create totally new user so we are sure

00:18:53,750 --> 00:18:57,320
that these users are immutable so next

00:18:55,850 --> 00:18:59,539
time when we start applications will be

00:18:57,320 --> 00:19:02,570
totally new users so if we install our

00:18:59,539 --> 00:19:05,389
certificate with some registry entries

00:19:02,570 --> 00:19:08,090
anything that our application required

00:19:05,389 --> 00:19:11,360
in context of the user we can easily use

00:19:08,090 --> 00:19:14,870
that the next one was the biggest one

00:19:11,360 --> 00:19:17,600
this one we spend a lot of time of that

00:19:14,870 --> 00:19:20,240
and unfortunately there is no way to

00:19:17,600 --> 00:19:27,950
work around it we couldn't use Windows

00:19:20,240 --> 00:19:31,370
identity in in 1204 us it was the good

00:19:27,950 --> 00:19:32,960
decision from the PIO that there is no

00:19:31,370 --> 00:19:35,059
problem of that because this is own

00:19:32,960 --> 00:19:38,690
internal application and only a mean use

00:19:35,059 --> 00:19:41,630
it so we can change it to forms

00:19:38,690 --> 00:19:44,899
authentication and writing the custom

00:19:41,630 --> 00:19:48,529
code we just hit this this active

00:19:44,899 --> 00:19:53,299
directory via alda provider and ask and

00:19:48,529 --> 00:19:55,309
ask for all data then next thing is the

00:19:53,299 --> 00:19:56,330
customer management and health imprinted

00:19:55,309 --> 00:19:57,230
I will do not say that this is

00:19:56,330 --> 00:20:00,350
refactoring

00:19:57,230 --> 00:20:01,280
because this is not something that we

00:20:00,350 --> 00:20:03,620
need to change in

00:20:01,280 --> 00:20:06,380
application but if you would like to

00:20:03,620 --> 00:20:08,330
have an application from foundering we

00:20:06,380 --> 00:20:10,610
need to remember that there is no way to

00:20:08,330 --> 00:20:12,230
contact to that server for example you

00:20:10,610 --> 00:20:14,720
would like to debug any issue in our

00:20:12,230 --> 00:20:16,820
application there is there are limited

00:20:14,720 --> 00:20:21,200
ways so we need to create discussed on

00:20:16,820 --> 00:20:24,200
pages by asam we can create them library

00:20:21,200 --> 00:20:27,200
rest I rest endpoints like it was shown

00:20:24,200 --> 00:20:30,020
on the previous previous previous

00:20:27,200 --> 00:20:32,150
presentation only think that you need to

00:20:30,020 --> 00:20:34,670
remember is that if you will have any

00:20:32,150 --> 00:20:39,440
issues in three things in three places

00:20:34,670 --> 00:20:42,050
like web configs global effects and any

00:20:39,440 --> 00:20:44,630
handlers you are not able to debug your

00:20:42,050 --> 00:20:46,640
application in manage points it at all

00:20:44,630 --> 00:20:50,480
because this management will do not

00:20:46,640 --> 00:20:53,060
start at all in that case so all the

00:20:50,480 --> 00:20:56,030
bugging in web.config need to be done in

00:20:53,060 --> 00:20:58,790
different way okay

00:20:56,030 --> 00:21:02,090
next part as we have already application

00:20:58,790 --> 00:21:05,330
started tested in manually was the

00:21:02,090 --> 00:21:08,960
acceptin test i need to say that i was

00:21:05,330 --> 00:21:10,910
very surprised that there was no any big

00:21:08,960 --> 00:21:14,420
issues with selenium running on

00:21:10,910 --> 00:21:17,570
concourse and connecting with a speed on

00:21:14,420 --> 00:21:21,410
that web form application only very to

00:21:17,570 --> 00:21:25,780
small issues was first selenium done

00:21:21,410 --> 00:21:29,510
like update panels I think no one right

00:21:25,780 --> 00:21:31,280
second one some the latest version of

00:21:29,510 --> 00:21:35,270
headless mode that we are using in

00:21:31,280 --> 00:21:38,120
concrete we are forced to it's not able

00:21:35,270 --> 00:21:40,160
to deal with our check box I don't know

00:21:38,120 --> 00:21:42,080
why but it don't like there is

00:21:40,160 --> 00:21:44,120
workaround just simply send some

00:21:42,080 --> 00:21:47,000
spacebar or something like that it will

00:21:44,120 --> 00:21:49,910
work and also selenium was the reason

00:21:47,000 --> 00:21:53,720
why we we needed to install Chrome

00:21:49,910 --> 00:21:55,820
inside inside conkers because we were

00:21:53,720 --> 00:21:59,630
using chrome headless mode so chrome

00:21:55,820 --> 00:22:02,300
need to be there okay

00:21:59,630 --> 00:22:04,640
so we have first milestone right the

00:22:02,300 --> 00:22:07,460
application is working in PCF on the dev

00:22:04,640 --> 00:22:12,170
environment it person accept and test it

00:22:07,460 --> 00:22:14,570
also pass some manual tests but this is

00:22:12,170 --> 00:22:15,330
not our final goal as we would like to

00:22:14,570 --> 00:22:20,759
have a peek

00:22:15,330 --> 00:22:23,100
that could be published to the several

00:22:20,759 --> 00:22:26,369
type of the servers so we need to ensure

00:22:23,100 --> 00:22:29,700
that our configuration will be removed

00:22:26,369 --> 00:22:32,039
from the source code and in a speed web

00:22:29,700 --> 00:22:35,090
forms we have web config file that

00:22:32,039 --> 00:22:37,320
contains everything that we talked about

00:22:35,090 --> 00:22:40,440
configurations so there was a two way

00:22:37,320 --> 00:22:43,049
first massive massive application

00:22:40,440 --> 00:22:45,389
refactoring and for example change all

00:22:43,049 --> 00:22:48,629
the settings read all settings from

00:22:45,389 --> 00:22:50,879
environment variables inside the global

00:22:48,629 --> 00:22:52,950
assets for example and change and change

00:22:50,879 --> 00:22:56,489
these values it required some

00:22:52,950 --> 00:22:58,649
refactoring but also in some cases it is

00:22:56,489 --> 00:23:01,619
even not possible because you need to

00:22:58,649 --> 00:23:04,369
remember that you are not able to change

00:23:01,619 --> 00:23:06,450
for example adult session object

00:23:04,369 --> 00:23:07,499
configuration session in global assembly

00:23:06,450 --> 00:23:09,149
because it will rest at their

00:23:07,499 --> 00:23:11,190
application and you can have a loop you

00:23:09,149 --> 00:23:13,859
can have a lot of issues all the same is

00:23:11,190 --> 00:23:18,239
with certificates if I need to be set up

00:23:13,859 --> 00:23:21,629
before you start your application so we

00:23:18,239 --> 00:23:24,090
decided to use custom builds back custom

00:23:21,629 --> 00:23:27,059
built bike is nothing custom built back

00:23:24,090 --> 00:23:29,149
to prepare our application before our

00:23:27,059 --> 00:23:31,440
application is started and prepare our

00:23:29,149 --> 00:23:34,619
we let's say let's call it virtual

00:23:31,440 --> 00:23:38,909
container so create so prepare our user

00:23:34,619 --> 00:23:41,299
to work with our application our custom

00:23:38,909 --> 00:23:44,600
builder was nothing more than set of

00:23:41,299 --> 00:23:49,559
PowerShell scripts that we ran when

00:23:44,600 --> 00:23:53,940
before hwc started so we use so we got

00:23:49,559 --> 00:23:56,700
just a WC built back and customized it

00:23:53,940 --> 00:23:59,070
to the Sun some code so first of all we

00:23:56,700 --> 00:24:01,440
needed to prepare the configuration

00:23:59,070 --> 00:24:04,049
first we read it from the environment

00:24:01,440 --> 00:24:07,489
variables when we download some files

00:24:04,049 --> 00:24:13,139
from the get like certificates like

00:24:07,489 --> 00:24:15,659
transfer like xdt files the XML document

00:24:13,139 --> 00:24:18,600
transformation that we use to setup

00:24:15,659 --> 00:24:21,119
correctly our web config so still web

00:24:18,600 --> 00:24:23,820
config was there in application but it

00:24:21,119 --> 00:24:26,399
was totally empty and everything that

00:24:23,820 --> 00:24:27,840
need to be need to be there was done by

00:24:26,399 --> 00:24:30,419
PowerShell and exit

00:24:27,840 --> 00:24:33,600
scripts so so application could use that

00:24:30,419 --> 00:24:37,049
next thing was install or certificate in

00:24:33,600 --> 00:24:40,320
in user storage and next one to do not

00:24:37,049 --> 00:24:42,960
refractor application a lot because it

00:24:40,320 --> 00:24:45,720
was this application was using local

00:24:42,960 --> 00:24:49,140
local file system like probably most of

00:24:45,720 --> 00:24:51,809
the estimate legacy application so in

00:24:49,140 --> 00:24:55,409
that cases the easy version was just to

00:24:51,809 --> 00:25:00,539
create network drive in context of user

00:24:55,409 --> 00:25:03,330
while during the our builds back start

00:25:00,539 --> 00:25:06,090
and then just change the path to this

00:25:03,330 --> 00:25:08,399
network drive for SP dotnet there is no

00:25:06,090 --> 00:25:11,159
any differences if there's local file

00:25:08,399 --> 00:25:13,200
system or this not network drives and

00:25:11,159 --> 00:25:15,360
also we do not need any credentials in

00:25:13,200 --> 00:25:17,640
the application anything there because

00:25:15,360 --> 00:25:20,880
everything will be done by PowerShell

00:25:17,640 --> 00:25:24,870
scripts and with this few workarounds we

00:25:20,880 --> 00:25:26,970
were able to separate our application

00:25:24,870 --> 00:25:29,820
source code and our configuration so we

00:25:26,970 --> 00:25:34,049
can go to the next part of the of the

00:25:29,820 --> 00:25:36,029
transformation on our migration so to do

00:25:34,049 --> 00:25:37,830
the release there was only a few small

00:25:36,029 --> 00:25:40,500
steps to do first one was correct

00:25:37,830 --> 00:25:43,710
versioning in case of concourse there is

00:25:40,500 --> 00:25:47,010
way to use the default bumps you need

00:25:43,710 --> 00:25:50,549
also only to remember that to connect it

00:25:47,010 --> 00:25:52,919
with the for example your assembly

00:25:50,549 --> 00:25:55,320
information you are again need to have

00:25:52,919 --> 00:25:58,010
some nice PowerShell script that will

00:25:55,320 --> 00:26:00,960
change it or will change your msbuild

00:25:58,010 --> 00:26:03,960
script for versioning of using semantic

00:26:00,960 --> 00:26:06,480
versioning and also we needed to produce

00:26:03,960 --> 00:26:09,090
some smoke test the production one that

00:26:06,480 --> 00:26:12,480
could be even ran on the production

00:26:09,090 --> 00:26:15,090
environment and the last last part was

00:26:12,480 --> 00:26:17,039
create scripts for blue/green deployment

00:26:15,090 --> 00:26:20,610
that will change our environment

00:26:17,039 --> 00:26:22,799
variables and our routines to the

00:26:20,610 --> 00:26:24,390
correct server if we we know that

00:26:22,799 --> 00:26:29,760
previous one is working or not

00:26:24,390 --> 00:26:31,850
if the if it's not working okay so the

00:26:29,760 --> 00:26:33,990
true that yeah application isn't grated

00:26:31,850 --> 00:26:36,390
application is working on several

00:26:33,990 --> 00:26:39,299
environments we can set up as many

00:26:36,390 --> 00:26:41,520
environment we want we can have as many

00:26:39,299 --> 00:26:44,040
instances and as we want

00:26:41,520 --> 00:26:48,900
and everything working in Cloud Foundry

00:26:44,040 --> 00:26:51,000
but we couldn't say that it's it's cloud

00:26:48,900 --> 00:26:56,179
negative application there is a lot more

00:26:51,000 --> 00:26:59,040
to do best to have all 12 12 factors but

00:26:56,179 --> 00:27:00,990
even if we don't want to have 12 factor

00:26:59,040 --> 00:27:02,990
there is still some part that we can

00:27:00,990 --> 00:27:06,900
very easily to do in case of asp.net

00:27:02,990 --> 00:27:09,300
applications it is log and telemetry we

00:27:06,900 --> 00:27:11,840
can use graph an application inside or

00:27:09,300 --> 00:27:15,090
any any tool that you know and you lack

00:27:11,840 --> 00:27:17,640
there is good to think to add sooner to

00:27:15,090 --> 00:27:22,170
the application to the X cloud to the

00:27:17,640 --> 00:27:24,420
CIC be also splitting the big solution

00:27:22,170 --> 00:27:27,440
that we have it was not so big because

00:27:24,420 --> 00:27:29,880
only 17 projects different that have

00:27:27,440 --> 00:27:32,460
dependency to each other but splitting

00:27:29,880 --> 00:27:35,880
at the multiple solution using new get

00:27:32,460 --> 00:27:39,120
to have it totally dependency as very

00:27:35,880 --> 00:27:40,230
important and why because in it true you

00:27:39,120 --> 00:27:42,000
need to know but if you have

00:27:40,230 --> 00:27:45,570
automatically deployment if you will

00:27:42,000 --> 00:27:47,340
have continuous delivery that if you

00:27:45,570 --> 00:27:48,780
make any code change you would like to

00:27:47,340 --> 00:27:51,450
deploy this application if you have

00:27:48,780 --> 00:27:54,330
situation that you have five six seven

00:27:51,450 --> 00:27:57,870
applications in your solution and you

00:27:54,330 --> 00:28:00,990
make change in one of them you you don't

00:27:57,870 --> 00:28:03,450
want to deploy all of them in the same

00:28:00,990 --> 00:28:08,400
time so it should be done by new get

00:28:03,450 --> 00:28:10,920
dependencies also the total minimum and

00:28:08,400 --> 00:28:13,590
I don't say that it is ultimate solution

00:28:10,920 --> 00:28:17,190
but total minimal is move your session

00:28:13,590 --> 00:28:20,550
from database for example to the Redis

00:28:17,190 --> 00:28:22,940
it will make it like twice faster the

00:28:20,550 --> 00:28:26,580
delight has the things the latest

00:28:22,940 --> 00:28:29,340
statistics show showed that and for all

00:28:26,580 --> 00:28:31,679
new features make this feature totally

00:28:29,340 --> 00:28:35,490
session less I put this feature in

00:28:31,679 --> 00:28:37,920
separate micro services and of course if

00:28:35,490 --> 00:28:40,140
you have budget if you have time start a

00:28:37,920 --> 00:28:46,200
factoring previous application but we

00:28:40,140 --> 00:28:48,450
know how how it looks like okay so thank

00:28:46,200 --> 00:28:50,940
you very much to came here I know where

00:28:48,450 --> 00:28:53,280
this is very light for you and you're

00:28:50,940 --> 00:28:54,630
probably very tired if you have any

00:28:53,280 --> 00:28:58,650
questions I will

00:28:54,630 --> 00:29:01,110
happy to answer it now if if also if you

00:28:58,650 --> 00:29:03,810
would like to talk to me later or

00:29:01,110 --> 00:29:06,050
tomorrow you can find me at the gripper

00:29:03,810 --> 00:29:06,050
bowl

00:29:06,840 --> 00:29:13,050

YouTube URL: https://www.youtube.com/watch?v=tD5Dd379olk


