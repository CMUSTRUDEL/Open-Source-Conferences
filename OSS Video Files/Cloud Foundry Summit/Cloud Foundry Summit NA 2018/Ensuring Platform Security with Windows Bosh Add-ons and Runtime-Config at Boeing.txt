Title: Ensuring Platform Security with Windows Bosh Add-ons and Runtime-Config at Boeing
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	Ensuring Platform Security with Windows Bosh Add-ons and Runtime-Config at Boeing - James Coppock & Sheryl Maris, Boeing

We did it! InfoSec said “Not a chance you’re deploying Ubuntu and Windows on Pivotal Cloud Foundry unless you meet our highly stringent requirements!”. We were told – “You must implement virus protection and reporting; you must monitor about 100ish security controls, check them daily, and report anomalies daily; you must force multi-factor authentication for the opsman UI and SSH connections to opsman, and you must not allow direct access to any servers – all access must come from only the load balancers and go-routers”. What? Really? Um, okay, I see we have no choice.

Under immense time pressure, we found a way. We added some fairly simple Bosh Add-ons to the runtime config and applied via Concourse to all of our foundations. How easy was that?
Maybe your InfoSec team is as hard as ours (pretty likely). If you’re an operations/infradev person focused on security and want to learn an eloquent and technically simple way to meet their requirements, please come by and hear from our off-the-wall team.  Cooperating daily with our InfoSec lead E.J., our stressed out Service Manager Brad was, well, stressed out. Our tech leads, James and Sheryl saved the day (with the help of our Pivots of course).

You’ll walk away learning some simple custom Bosh Add-ons applied via Runtime Config that met InfoSec’s tough requirements. Probably similar requirements at almost any company I would hazard a guess.  We would love to talk to you anytime about our journey. We have implemented Windows on PCF quite successfully (how did we do this with the MS licensing restrictions?) and are hosting .NET Framework applications and .NET Core on Linux, we plan to implement Windows 2016 Core this year, Developers use SteelToe for the .NET Core and Framework applications to take advantage of Spring framework, we use SAML federation via PingFed to our Active Directory, Multi-Factor Authentication via smart card for Opsman, and probably a hundred other interesting topics.

Attend this talk to learn some simple, custom BOSH add-ons applied via Runtime Config saved the day, using Concourse to deploy to all foundations.

About Sheryl Maris
"Before starting with Boeing, Sheryl was in the customer service industry, never finding the challenges she thrived for. A single mother of 2, she went back to college in 2006 earning three degrees. Sheryl now thrives for the challenges she encounters as a core member of the PCF Core Team at Boeing. She has learned and implemented technologies such as Concourse pipelines and Fly CLI , Bosh, CF CLI, Operations and Application manager, vSphere, Minio S3 blob store, GIT, just to name a few. She created the first Concourse Installation pipeline used at Boeing, which fully automates the installation of a base foundation. She teamed with the PCF Core Team and Security to implement security requirements within the Runtime config. Sheryl truly enjoys developing new IT skills, enhancing leadership attributes, and increasing her responsibilities by taking on the most difficult assignments and focuses on making her Boeing customers successful.

I truly encourage other women (and men) to get involved in PCF. It’s really not that hard. I have nothing but good things to say about how Pivotal helped us deploy CF, how my team and our Pivots helped me learn through pairing, how it was so easy to pick this up. This technology is truly transformative for any company. Maybe that’s the secret to CF; it’s pretty easy to learn and implement, but so powerful once in place. I truly enjoy spending time with my family, hiking with my dog Spenser, and anything spicy!"
Captions: 
	00:00:00,030 --> 00:00:07,379
okay so oh this guy right here is not

00:00:03,629 --> 00:00:10,260
here Mike is going to be my my James

00:00:07,379 --> 00:00:16,020
topic today your fallback little shorter

00:00:10,260 --> 00:00:18,240
little Balder hey so you are oh yeah and

00:00:16,020 --> 00:00:22,080
I'm Cheryl masse most of everybody in

00:00:18,240 --> 00:00:27,859
here knows me but I am the operations

00:00:22,080 --> 00:00:30,300
for Boeing and mike is our Alturas

00:00:27,859 --> 00:00:33,600
helper I came in as part of a pivotal

00:00:30,300 --> 00:00:37,320
project to help provision PCF and

00:00:33,600 --> 00:00:42,450
operationalize it so standing in for

00:00:37,320 --> 00:00:44,789
James go ahead okay so if you come to

00:00:42,450 --> 00:00:47,610
Boeing and you want to be a part of our

00:00:44,789 --> 00:00:50,280
team you get to pair in these awesome

00:00:47,610 --> 00:00:58,020
pairing stations best pairing station in

00:00:50,280 --> 00:01:00,239
the world and this is a we had to work

00:00:58,020 --> 00:01:04,019
really closely with our security team

00:01:00,239 --> 00:01:07,200
and EJ was always honest you can't use a

00:01:04,019 --> 00:01:15,030
bunt to you and James the security focal

00:01:07,200 --> 00:01:17,460
so yeah AJ security and so he was asking

00:01:15,030 --> 00:01:19,920
about all the controls and multi-factor

00:01:17,460 --> 00:01:24,740
and how are you gonna get all this done

00:01:19,920 --> 00:01:30,479
and we ended up pairing like this a lot

00:01:24,740 --> 00:01:32,340
dj2 get her honest ly with Boeing being

00:01:30,479 --> 00:01:35,040
a government supplier and being and

00:01:32,340 --> 00:01:36,960
commercial you know aerospace and and

00:01:35,040 --> 00:01:39,420
satellites and so on security and

00:01:36,960 --> 00:01:42,000
compliance is a huge concern obviously

00:01:39,420 --> 00:01:44,340
so we spent quite a bit of time working

00:01:42,000 --> 00:01:46,049
hand in hand with security which is huge

00:01:44,340 --> 00:01:49,259
when you're provisioning the product and

00:01:46,049 --> 00:01:51,450
trying to get the platform and into the

00:01:49,259 --> 00:01:53,369
enterprise right to work closely with

00:01:51,450 --> 00:01:56,340
enterprise and security and compliance

00:01:53,369 --> 00:01:58,890
it's key so the obviously he had some

00:01:56,340 --> 00:02:03,180
concerns a boon to was not a standard

00:01:58,890 --> 00:02:07,860
within Boeing rights in tosn unix's

00:02:03,180 --> 00:02:09,869
right right security controls obviously

00:02:07,860 --> 00:02:12,840
it they have some if can we go back a

00:02:09,869 --> 00:02:13,770
slide boeing has some standardized

00:02:12,840 --> 00:02:16,320
security controls

00:02:13,770 --> 00:02:17,810
on UNIX systems they they minimize and

00:02:16,320 --> 00:02:19,770
harden them and then they have their own

00:02:17,810 --> 00:02:22,620
security controls they like to put on

00:02:19,770 --> 00:02:24,300
top of that right multi-factor

00:02:22,620 --> 00:02:25,350
authentication of course is key with

00:02:24,300 --> 00:02:27,150
them but with them blowing they're

00:02:25,350 --> 00:02:30,320
trying to go password lists or they are

00:02:27,150 --> 00:02:33,780
they are password lists in many places

00:02:30,320 --> 00:02:36,210
right and direct access of course goes

00:02:33,780 --> 00:02:39,510
along with the whole security concern

00:02:36,210 --> 00:02:41,070
even though the hosts are exposed for a

00:02:39,510 --> 00:02:43,880
number of reasons on the internet they

00:02:41,070 --> 00:02:46,230
you still cannot access them directly so

00:02:43,880 --> 00:02:53,100
we'll talk about how we kind of address

00:02:46,230 --> 00:02:55,590
some of these concerns and this is how I

00:02:53,100 --> 00:02:58,470
did it we did add some advanced to our

00:02:55,590 --> 00:03:01,110
runtime config and for each security

00:02:58,470 --> 00:03:03,620
finding we added a section to the

00:03:01,110 --> 00:03:06,060
runtime right and so what we see these

00:03:03,620 --> 00:03:07,830
bonus concerns are not uncommon we see

00:03:06,060 --> 00:03:10,260
this throughout the industry right a lot

00:03:07,830 --> 00:03:12,710
of customers as well as naturally go

00:03:10,260 --> 00:03:15,270
down the how do i patch the OS how do I

00:03:12,710 --> 00:03:18,270
harden it minimize it just like I would

00:03:15,270 --> 00:03:19,890
with all my other deployed systems so

00:03:18,270 --> 00:03:21,810
you're the natural tendency is to try to

00:03:19,890 --> 00:03:25,980
create your own stem cell or your own OS

00:03:21,810 --> 00:03:29,430
image which is highly advised against

00:03:25,980 --> 00:03:31,230
it's it's a bad practice so the way to

00:03:29,430 --> 00:03:33,990
do that is to create what are called

00:03:31,230 --> 00:03:36,600
Bosch add-ons which are Bosch releases

00:03:33,990 --> 00:03:40,050
which can go on all vm's or selectively

00:03:36,600 --> 00:03:44,040
go on subsets of VMs for example we can

00:03:40,050 --> 00:03:46,500
say that Windows specific code only goes

00:03:44,040 --> 00:03:48,720
on to Windows virtual machines for

00:03:46,500 --> 00:03:50,670
example so we we addressed a lot of

00:03:48,720 --> 00:03:54,660
these security concerns by creating a

00:03:50,670 --> 00:03:59,360
number of Boston ons to address Boeing's

00:03:54,660 --> 00:04:02,130
unique security requirements such as

00:03:59,360 --> 00:04:03,540
obviously most places have a legal text

00:04:02,130 --> 00:04:06,720
and they want to put on hosts when you

00:04:03,540 --> 00:04:08,940
if you were to access a host via SSH

00:04:06,720 --> 00:04:11,100
session present a legal banner you know

00:04:08,940 --> 00:04:16,049
all activities monitored subject to

00:04:11,100 --> 00:04:18,000
whatever you know d6 DCI X is a Boeing

00:04:16,049 --> 00:04:21,209
specific set of security controls that

00:04:18,000 --> 00:04:25,140
we ported from existing UNIX systems

00:04:21,209 --> 00:04:27,090
over to to Linux systems likewise

00:04:25,140 --> 00:04:30,180
there's a windows-based

00:04:27,090 --> 00:04:34,800
version of that as well we did a custom

00:04:30,180 --> 00:04:36,800
add-on there for bowing radically

00:04:34,800 --> 00:04:39,840
different than the Linux version

00:04:36,800 --> 00:04:42,320
antivirus it's common thing on Windows

00:04:39,840 --> 00:04:44,520
not so common on Linux the solution

00:04:42,320 --> 00:04:47,880
typically out of pivotal and others is

00:04:44,520 --> 00:04:49,580
to use clam AV which is real popular in

00:04:47,880 --> 00:04:51,990
the ecosystem however claim may be

00:04:49,580 --> 00:04:54,750
suffers from the lack of a centralized

00:04:51,990 --> 00:04:57,590
console since no centralized management

00:04:54,750 --> 00:05:00,570
and reporting is what it lacks so we

00:04:57,590 --> 00:05:03,690
created a custom Bosch release for

00:05:00,570 --> 00:05:08,880
McAfee Antivirus or V cell buyer scan

00:05:03,690 --> 00:05:11,100
Enterprise Linux I believe which hosts

00:05:08,880 --> 00:05:12,479
its own challenges for sure and then

00:05:11,100 --> 00:05:14,780
this one is actually this one's my

00:05:12,479 --> 00:05:18,330
favorite iptables release here this is

00:05:14,780 --> 00:05:20,880
it's not I don't believe we open sourced

00:05:18,330 --> 00:05:25,410
it we should consider it though now this

00:05:20,880 --> 00:05:27,720
this allows us to address the unique

00:05:25,410 --> 00:05:30,449
concerns of access at the network level

00:05:27,720 --> 00:05:32,340
so the hosts being exposed so maybe

00:05:30,449 --> 00:05:34,620
getting ahead of myself the hosts being

00:05:32,340 --> 00:05:36,389
exposed on the network presented a

00:05:34,620 --> 00:05:39,180
problem they're not an on a none routed

00:05:36,389 --> 00:05:41,460
Network here like it's best practice but

00:05:39,180 --> 00:05:44,099
instead we put host-based firewalls on

00:05:41,460 --> 00:05:46,680
all the systems to say don't allow any

00:05:44,099 --> 00:05:49,830
connections from anywhere outside of

00:05:46,680 --> 00:05:52,229
yourself so the the PCF network blocks

00:05:49,830 --> 00:05:53,520
all the hosts within their can can talk

00:05:52,229 --> 00:05:55,620
to each other but other than that

00:05:53,520 --> 00:05:57,300
nothing can talk to it except for the

00:05:55,620 --> 00:05:58,500
load balancers so obviously you want

00:05:57,300 --> 00:06:00,690
traffic to come in from the load

00:05:58,500 --> 00:06:02,669
balancers to your go routers to the

00:06:00,690 --> 00:06:04,410
routing tier we allowed that obviously

00:06:02,669 --> 00:06:06,950
and then we allowed traffic from the

00:06:04,410 --> 00:06:11,130
management hosts the jump boxes

00:06:06,950 --> 00:06:12,810
effectively creating you know I said an

00:06:11,130 --> 00:06:14,880
isolated network without the isolated

00:06:12,810 --> 00:06:18,500
Network and we had to do that because we

00:06:14,880 --> 00:06:20,760
didn't have NSX or any software based

00:06:18,500 --> 00:06:27,810
software-defined Network there at the

00:06:20,760 --> 00:06:30,599
time we're still using it today and then

00:06:27,810 --> 00:06:35,430
as far as Windows we worked very closely

00:06:30,599 --> 00:06:39,130
with our security team he paired with

00:06:35,430 --> 00:06:42,610
them too we had to get the McAfee client

00:06:39,130 --> 00:06:47,680
working in our new environment right and

00:06:42,610 --> 00:06:48,160
that's where also Mike helped us you did

00:06:47,680 --> 00:06:50,470
that

00:06:48,160 --> 00:06:52,180
yeah unfortunately on a vSphere

00:06:50,470 --> 00:06:53,980
environment right you have to create

00:06:52,180 --> 00:06:55,480
your own stem cells which kind of goes

00:06:53,980 --> 00:06:58,900
against what I was saying about creating

00:06:55,480 --> 00:07:01,270
your own and you know Windows image or

00:06:58,900 --> 00:07:02,980
your own OS image but it is it just is

00:07:01,270 --> 00:07:04,840
what it is on vSphere if you were to go

00:07:02,980 --> 00:07:08,200
out on AWS or is your or anywhere else

00:07:04,840 --> 00:07:10,210
you get those stem cells for free you

00:07:08,200 --> 00:07:12,310
don't have to go through that the task

00:07:10,210 --> 00:07:14,380
of creating them yourself but

00:07:12,310 --> 00:07:17,830
fortunately what did work out nicely is

00:07:14,380 --> 00:07:20,140
it does are the Boeing stem cell that we

00:07:17,830 --> 00:07:22,090
used already had Mac if he baked in

00:07:20,140 --> 00:07:26,260
right but it did not play nicely with

00:07:22,090 --> 00:07:28,690
Cloud Foundry in particular scanning the

00:07:26,260 --> 00:07:31,960
staging area or the the droplet area the

00:07:28,690 --> 00:07:33,700
droplet cache on the Windows stem cells

00:07:31,960 --> 00:07:36,250
proved problematic so there was a bit

00:07:33,700 --> 00:07:38,290
quite a bit of back and forth they're

00:07:36,250 --> 00:07:40,510
just debugging and working actually

00:07:38,290 --> 00:07:45,100
closely with makuhita to figure out the

00:07:40,510 --> 00:07:46,270
problems yeah so in the end we ended up

00:07:45,100 --> 00:07:48,640
just having to exclude a bunch of

00:07:46,270 --> 00:07:50,250
folders var vcap this and that and

00:07:48,640 --> 00:07:52,690
whatever to actually get it to work

00:07:50,250 --> 00:07:56,230
which you could argue probably reduces

00:07:52,690 --> 00:07:58,410
the effectiveness obviously the

00:07:56,230 --> 00:08:02,740
antivirus and may cause some issues

00:07:58,410 --> 00:08:06,670
that's nice yeah so that was the window

00:08:02,740 --> 00:08:08,680
side on the Linux side however we we

00:08:06,670 --> 00:08:11,830
created a Bosch release to pull down the

00:08:08,680 --> 00:08:14,080
the McAfee Antivirus bits and do an

00:08:11,830 --> 00:08:16,990
install remember we weren't allowed to

00:08:14,080 --> 00:08:20,470
use about you and we had to get that

00:08:16,990 --> 00:08:21,790
pulled into Boeing oh yeah yeah yeah so

00:08:20,470 --> 00:08:23,200
we had to work closely with security and

00:08:21,790 --> 00:08:25,570
compliance to get a boon to push through

00:08:23,200 --> 00:08:27,280
and as a matter of fact the a lot of the

00:08:25,570 --> 00:08:29,710
concerns that were there around the

00:08:27,280 --> 00:08:32,830
hardening of the OS minimizing it were

00:08:29,710 --> 00:08:34,690
not only addressed by the stem cell

00:08:32,830 --> 00:08:37,210
creation process from the community

00:08:34,690 --> 00:08:38,560
actually went above and beyond and and

00:08:37,210 --> 00:08:40,719
it's what we see it a lot of customers

00:08:38,560 --> 00:08:42,580
actually is that they say they look at

00:08:40,719 --> 00:08:45,520
the stem cell hardening repo and the

00:08:42,580 --> 00:08:47,020
documentation they say wow this is even

00:08:45,520 --> 00:08:48,600
more than what we thought like we're

00:08:47,020 --> 00:08:51,670
gonna start incorporating some of this

00:08:48,600 --> 00:08:56,140
community goodness and to our own custom

00:08:51,670 --> 00:08:59,050
which is pretty great yeah and then in

00:08:56,140 --> 00:09:01,330
terms of the Cheryl don't let me take

00:08:59,050 --> 00:09:04,180
all your your son don't be still all

00:09:01,330 --> 00:09:07,330
your Thunder here oh wow I'm reading so

00:09:04,180 --> 00:09:10,660
okay I would say though on the on the

00:09:07,330 --> 00:09:14,950
Linux side the McAfee Antivirus is

00:09:10,660 --> 00:09:18,790
challenging to say the least we found

00:09:14,950 --> 00:09:21,820
that you can and do the install and you

00:09:18,790 --> 00:09:23,980
can pull down the initial definitions

00:09:21,820 --> 00:09:27,420
from an enterprise policy server an EPO

00:09:23,980 --> 00:09:31,720
server but you cannot reboot to the VM

00:09:27,420 --> 00:09:32,890
so if there are any issues and you you

00:09:31,720 --> 00:09:34,120
know if you do like a Bosch that's a

00:09:32,890 --> 00:09:37,060
sage to get in there and you think all

00:09:34,120 --> 00:09:41,080
just reboot the VM no harm no foul right

00:09:37,060 --> 00:09:42,670
it's clustered or you know H a it we

00:09:41,080 --> 00:09:45,430
found that it just doesn't come back

00:09:42,670 --> 00:09:46,840
McAfee Pro for whatever reason the

00:09:45,430 --> 00:09:48,970
version of McAfee that's used there

00:09:46,840 --> 00:09:51,340
McAfee Antivirus it's completely hangs

00:09:48,970 --> 00:09:53,800
the VM so I was a hard lesson learned

00:09:51,340 --> 00:09:54,940
actually I thought it was a teleport

00:09:53,800 --> 00:09:58,120
yeah I'm sorry

00:09:54,940 --> 00:10:00,400
as I was stealing the port before oh

00:09:58,120 --> 00:10:02,860
there's that as well yeah well so to

00:10:00,400 --> 00:10:04,360
finish out this thing go we ended up

00:10:02,860 --> 00:10:05,920
having to just say recreate bosch

00:10:04,360 --> 00:10:07,390
recreate the vm just if you're having

00:10:05,920 --> 00:10:10,330
problems and there's something crazy

00:10:07,390 --> 00:10:15,790
wrong with it just you know it's a

00:10:10,330 --> 00:10:18,490
reproducible environment yeah so and

00:10:15,790 --> 00:10:21,490
actually yeah we do repave x' every

00:10:18,490 --> 00:10:23,830
every week there which security loves

00:10:21,490 --> 00:10:25,780
anyway everybody loves it and the cool

00:10:23,830 --> 00:10:27,940
thing about repave that often is you

00:10:25,780 --> 00:10:29,890
effectively test tested your ability to

00:10:27,940 --> 00:10:31,870
recreate the environment for whatever

00:10:29,890 --> 00:10:34,000
reason a disaster or whatever you can

00:10:31,870 --> 00:10:35,080
say so he says well what's your level of

00:10:34,000 --> 00:10:37,270
confidence that you can recreate the

00:10:35,080 --> 00:10:39,700
environment well we did it at least 52

00:10:37,270 --> 00:10:43,330
times last year sure we can do it again

00:10:39,700 --> 00:10:44,860
right I have works nicely and then to

00:10:43,330 --> 00:10:47,230
Cheryl's point another issue that we ran

00:10:44,860 --> 00:10:49,690
into with McAfee unfortunately in this

00:10:47,230 --> 00:10:52,300
is actually I've heard of this with

00:10:49,690 --> 00:10:56,650
another product as well is stealing

00:10:52,300 --> 00:10:58,360
ports so when McAfee would come up it

00:10:56,650 --> 00:10:59,890
spins up its own web server it would

00:10:58,360 --> 00:11:01,870
steal port 80 I wouldn't say eighty

00:10:59,890 --> 00:11:03,400
eight eight or something like that which

00:11:01,870 --> 00:11:05,500
was also hard-coded in one

00:11:03,400 --> 00:11:08,230
boss releases for another product it

00:11:05,500 --> 00:11:09,670
wasn't my sequel something or another so

00:11:08,230 --> 00:11:11,350
we ended up having to and it turns out

00:11:09,670 --> 00:11:13,720
the McAfee port was not used within

00:11:11,350 --> 00:11:16,720
Boeing so what we did was we in the

00:11:13,720 --> 00:11:19,630
Installer we put in a timeout we printed

00:11:16,720 --> 00:11:21,520
delay a timer in there for like 10

00:11:19,630 --> 00:11:23,440
minutes or something like that to give

00:11:21,520 --> 00:11:25,600
the other processes on the box time to

00:11:23,440 --> 00:11:27,339
come up and claim that port so then when

00:11:25,600 --> 00:11:31,240
McAfee tried to go claim it it was a

00:11:27,339 --> 00:11:35,110
port in use and it failed it was a is a

00:11:31,240 --> 00:11:39,220
hack but it worked we learned from that

00:11:35,110 --> 00:11:40,900
one on the nexus upgrade to you yeah so

00:11:39,220 --> 00:11:43,839
several challenges around McAfee

00:11:40,900 --> 00:11:46,330
Antivirus but it is what it is if it's

00:11:43,839 --> 00:11:46,810
required you know in the enterprise then

00:11:46,330 --> 00:11:51,700
so be it

00:11:46,810 --> 00:11:55,660
right sorry we're reading through

00:11:51,700 --> 00:12:02,050
because my other half was really the

00:11:55,660 --> 00:12:04,779
ones doing all these yeah but so what do

00:12:02,050 --> 00:12:08,500
we added security controls the players

00:12:04,779 --> 00:12:13,900
kind of it was I'm sorry go ahead please

00:12:08,500 --> 00:12:16,110
oh same bracket speak up to yeah so the

00:12:13,900 --> 00:12:20,560
custom security controls on windows

00:12:16,110 --> 00:12:22,839
because PCF is a cloud foundry sorry or

00:12:20,560 --> 00:12:25,900
Bosch created VMs it said it's a dynamic

00:12:22,839 --> 00:12:27,970
very dynamic environment it kind of

00:12:25,900 --> 00:12:30,220
changes things in terms of a lot of

00:12:27,970 --> 00:12:32,500
companies want to spin up a vm have it

00:12:30,220 --> 00:12:35,080
register with a system like a system of

00:12:32,500 --> 00:12:38,110
record here's my IP address and the apps

00:12:35,080 --> 00:12:40,209
running on it and so on but in a bosch

00:12:38,110 --> 00:12:41,350
controlled environments we don't really

00:12:40,209 --> 00:12:44,140
have that luxury right it's a very

00:12:41,350 --> 00:12:45,700
dynamic environment and that kind of the

00:12:44,140 --> 00:12:47,709
challenges with that flowed through to

00:12:45,700 --> 00:12:49,180
this this all the security component as

00:12:47,709 --> 00:12:52,270
well as custom security controls on

00:12:49,180 --> 00:12:55,660
windows so rather than having a fairly

00:12:52,270 --> 00:12:57,400
static VM with the security controls on

00:12:55,660 --> 00:12:58,990
it that's known it's here it's run these

00:12:57,400 --> 00:13:01,420
at runs these apps and it can check in

00:12:58,990 --> 00:13:05,140
frequently for run it scans and report

00:13:01,420 --> 00:13:09,250
well we had to do is instead very simply

00:13:05,140 --> 00:13:11,140
create a an API client to say instead of

00:13:09,250 --> 00:13:13,270
having the security server reach out to

00:13:11,140 --> 00:13:14,950
me and connect to me I'm gonna reach out

00:13:13,270 --> 00:13:17,490
to it and that was actually a very

00:13:14,950 --> 00:13:19,569
simple thing to do in PowerShell

00:13:17,490 --> 00:13:20,829
simple enough where I'm not a powershell

00:13:19,569 --> 00:13:22,839
developer and i was able to whip it out

00:13:20,829 --> 00:13:24,550
and nothing flat

00:13:22,839 --> 00:13:28,119
very straightforward actually and we

00:13:24,550 --> 00:13:30,069
just did that as a bosch add-on simple

00:13:28,119 --> 00:13:34,029
powershell to make an API call with its

00:13:30,069 --> 00:13:36,699
a rest call with its IP address and a

00:13:34,029 --> 00:13:38,649
few other things and then exit 0 at the

00:13:36,699 --> 00:13:41,259
end of the powershell and it works like

00:13:38,649 --> 00:13:43,029
a champ and as part of that we also in

00:13:41,259 --> 00:13:47,230
powershell command super cool command

00:13:43,029 --> 00:13:50,050
let to create scheduled tasks so then we

00:13:47,230 --> 00:13:52,949
we have it do its one thing one time and

00:13:50,050 --> 00:13:55,689
then schedule a security run every day

00:13:52,949 --> 00:13:59,920
did initiate that API call that rest

00:13:55,689 --> 00:14:01,509
call so it was a surprisingly nice and

00:13:59,920 --> 00:14:06,249
easy experience for a unix guy to do

00:14:01,509 --> 00:14:07,959
this on windows yeah really i think the

00:14:06,249 --> 00:14:12,399
the key lesson for me out of that or

00:14:07,959 --> 00:14:13,959
thing i learned was that that doing all

00:14:12,399 --> 00:14:15,850
the stuff through powershell is actually

00:14:13,959 --> 00:14:20,230
super easy and the dotnet framework SAR

00:14:15,850 --> 00:14:22,600
fantastic and really creating a windows

00:14:20,230 --> 00:14:23,589
bosch add-on versus a linux wash add-on

00:14:22,600 --> 00:14:25,389
there's really not a whole lot of

00:14:23,589 --> 00:14:32,410
difference it's just it's just the

00:14:25,389 --> 00:14:34,629
script language honestly yeah yeah and

00:14:32,410 --> 00:14:37,240
so this we touched on earlier this is

00:14:34,629 --> 00:14:41,920
again that boeing specific the security

00:14:37,240 --> 00:14:45,689
controls we just ported it from from

00:14:41,920 --> 00:14:48,970
unix to linux which is super easy you

00:14:45,689 --> 00:14:53,740
know the thing that was interesting

00:14:48,970 --> 00:14:55,600
though we we took some extra we took

00:14:53,740 --> 00:14:58,029
extra care with things in VAR v cap we

00:14:55,600 --> 00:14:59,620
remount some file systems and was

00:14:58,029 --> 00:15:02,410
different permissions and so on to

00:14:59,620 --> 00:15:03,639
address some unique boeing concerns and

00:15:02,410 --> 00:15:06,519
of course anytime you're mucking around

00:15:03,639 --> 00:15:08,259
in VAR v cap end up breaking things if

00:15:06,519 --> 00:15:10,019
you're chicken to get at the OS level so

00:15:08,259 --> 00:15:13,049
we went through several iterations of

00:15:10,019 --> 00:15:17,439
trying to figure out why things broke

00:15:13,049 --> 00:15:20,350
you know in particular there is an su ID

00:15:17,439 --> 00:15:24,309
executable under VAR v cap that has to

00:15:20,350 --> 00:15:26,350
run its console its provides the service

00:15:24,309 --> 00:15:28,990
discovery and it turns out if you

00:15:26,350 --> 00:15:30,880
remount VAR v cap without su ID say

00:15:28,990 --> 00:15:35,139
don't allow any su ID

00:15:30,880 --> 00:15:38,290
our root executables under that path you

00:15:35,139 --> 00:15:42,519
brake service resolution name resolution

00:15:38,290 --> 00:15:45,750
any a breakable platform so that was

00:15:42,519 --> 00:15:51,459
surprisingly fairly easy to find though

00:15:45,750 --> 00:15:54,880
it's a fun troubleshooting yeah let's

00:15:51,459 --> 00:15:57,100
see this is we already talked about this

00:15:54,880 --> 00:15:59,319
this is that super easy powershell

00:15:57,100 --> 00:16:02,110
script it makes a rest call and also

00:15:59,319 --> 00:16:03,910
schedules a task again it was just a

00:16:02,110 --> 00:16:05,529
matter of learning powershell versus

00:16:03,910 --> 00:16:11,319
bash or something like that

00:16:05,529 --> 00:16:21,490
piece of cake this is backwards you did

00:16:11,319 --> 00:16:23,110
i think and so this one this is again we

00:16:21,490 --> 00:16:25,389
talked about the host-based firewalls

00:16:23,110 --> 00:16:27,639
which is actually even if you have even

00:16:25,389 --> 00:16:29,470
if your network is unrouted or are using

00:16:27,639 --> 00:16:31,300
a software-defined network I think this

00:16:29,470 --> 00:16:34,959
is still a good idea I'd love to see

00:16:31,300 --> 00:16:38,110
this in the stem cells you know just for

00:16:34,959 --> 00:16:39,610
defense and depth strategy and ok so you

00:16:38,110 --> 00:16:41,920
have a firewall at the edge of the

00:16:39,610 --> 00:16:44,709
network maybe we got some DM based stuff

00:16:41,920 --> 00:16:46,990
at the I as maybe even in the OS itself

00:16:44,709 --> 00:16:49,600
maybe I should even try to protect

00:16:46,990 --> 00:16:53,649
itself defense-in-depth I think it's not

00:16:49,600 --> 00:16:55,959
a bad idea in general then it also

00:16:53,649 --> 00:16:58,029
allowed us to do some custom like this

00:16:55,959 --> 00:17:00,310
custom access control list entry for the

00:16:58,029 --> 00:17:02,889
for the jump box one of the problems

00:17:00,310 --> 00:17:05,520
that we had or challenges we had is that

00:17:02,889 --> 00:17:08,319
boeing wants multi-factor authentication

00:17:05,520 --> 00:17:11,770
however multi-factor authentication into

00:17:08,319 --> 00:17:14,169
ops manager pivotal z' GUI on top of

00:17:11,770 --> 00:17:15,339
bosch so it doesn't exist or did not at

00:17:14,169 --> 00:17:17,890
the time i don't think it does even

00:17:15,339 --> 00:17:19,270
still so the way we address that it was

00:17:17,890 --> 00:17:21,939
you've said okay well then we just don't

00:17:19,270 --> 00:17:26,049
let anybody into ops manager directly

00:17:21,939 --> 00:17:27,429
right so we had tied it into to their

00:17:26,049 --> 00:17:29,919
enterprises authentication system but

00:17:27,429 --> 00:17:32,380
then that meant anybody from anywhere

00:17:29,919 --> 00:17:35,409
could log into that thing to ops manager

00:17:32,380 --> 00:17:38,169
so how we address that was we went back

00:17:35,409 --> 00:17:40,240
to an enterprise supported image windows

00:17:38,169 --> 00:17:42,850
with all of its security controls and

00:17:40,240 --> 00:17:44,260
domain joined goodness all that and we

00:17:42,850 --> 00:17:44,710
said okay that's going to be our entry

00:17:44,260 --> 00:17:46,510
point

00:17:44,710 --> 00:17:48,940
from an administrative perspective into

00:17:46,510 --> 00:17:51,820
the platform right so we can get to

00:17:48,940 --> 00:17:55,240
there assuming you're an admin and then

00:17:51,820 --> 00:17:58,750
and then only from that host can we then

00:17:55,240 --> 00:18:00,250
go to ops manager via SSH or via web and

00:17:58,750 --> 00:18:02,410
so that kind of really locked it down

00:18:00,250 --> 00:18:04,540
and addressed that concern but then a

00:18:02,410 --> 00:18:05,200
key piece of that to us to be sure to

00:18:04,540 --> 00:18:07,720
allow it

00:18:05,200 --> 00:18:09,580
not only from that data centers windows

00:18:07,720 --> 00:18:11,050
jump box but from the others because

00:18:09,580 --> 00:18:13,090
what happens if that Windows jump box

00:18:11,050 --> 00:18:15,400
goes down for patching or whatever

00:18:13,090 --> 00:18:16,540
reason he's kind of a fallback plan you

00:18:15,400 --> 00:18:27,520
want to be able to get in from somewhere

00:18:16,540 --> 00:18:29,260
else this is the same thing the

00:18:27,520 --> 00:18:31,000
interesting thing here right you are

00:18:29,260 --> 00:18:34,060
pointing this out earlier is the git

00:18:31,000 --> 00:18:35,950
repository so we for those iptables

00:18:34,060 --> 00:18:38,080
rules or the host-based firewall rules

00:18:35,950 --> 00:18:40,060
we store those and get so as an

00:18:38,080 --> 00:18:42,220
administrator rather than having to

00:18:40,060 --> 00:18:43,270
modify a Bosh release which can be

00:18:42,220 --> 00:18:45,340
challenging it's not for the faint of

00:18:43,270 --> 00:18:48,370
heart we've stored those rules and get

00:18:45,340 --> 00:18:50,890
and when the system comes up and pulls

00:18:48,370 --> 00:18:53,320
them it has a set of base rules kind of

00:18:50,890 --> 00:18:56,350
basic stuff but any customizations you

00:18:53,320 --> 00:19:00,310
can pull in from get dynamically and

00:18:56,350 --> 00:19:03,070
then you have a nice you know history of

00:19:00,310 --> 00:19:08,760
who changed what and that's always nice

00:19:03,070 --> 00:19:08,760
yeah kept tender changing stuff for us

00:19:09,690 --> 00:19:26,470
all right and here's our pipelines we

00:19:23,770 --> 00:19:29,890
use runtime config on these and actually

00:19:26,470 --> 00:19:34,270
andrew is during Charlotte right now

00:19:29,890 --> 00:19:36,310
he's our Automator and when we get to

00:19:34,270 --> 00:19:37,920
the questions and answers might want to

00:19:36,310 --> 00:19:42,070
ask him a few questions

00:19:37,920 --> 00:19:44,170
so this addresses how do we actually get

00:19:42,070 --> 00:19:46,600
these bits on the servers right and so

00:19:44,170 --> 00:19:48,460
it's via Bosh release in via what's

00:19:46,600 --> 00:19:49,270
called a runtime config obviously I

00:19:48,460 --> 00:19:51,280
don't know if anything everybody's

00:19:49,270 --> 00:19:54,250
familiar with that but a runtime config

00:19:51,280 --> 00:19:56,080
simply defines the Bosh releases that

00:19:54,250 --> 00:19:57,880
you wish to go on all of your VMs

00:19:56,080 --> 00:19:58,450
instead of having to say okay for Diego

00:19:57,880 --> 00:20:00,970
cells

00:19:58,450 --> 00:20:02,769
put this boss releases for go routers

00:20:00,970 --> 00:20:04,359
put these Bosch releases if you have a

00:20:02,769 --> 00:20:06,220
common Bosch release that you want to go

00:20:04,359 --> 00:20:08,799
everywhere you put it in this run time

00:20:06,220 --> 00:20:11,769
config it's just centralizes that that

00:20:08,799 --> 00:20:13,179
configuration and so but then of course

00:20:11,769 --> 00:20:15,669
you have to push that run time can

00:20:13,179 --> 00:20:18,999
figure out you have to deploy you you

00:20:15,669 --> 00:20:21,309
push that out to your Bosch director and

00:20:18,999 --> 00:20:23,999
so we maintain those or Boeing maintains

00:20:21,309 --> 00:20:26,950
those those run time configs and get and

00:20:23,999 --> 00:20:29,919
pushes them out with a concours pipeline

00:20:26,950 --> 00:20:32,769
it's I think it's that straightforward

00:20:29,919 --> 00:20:40,149
of course is our friend

00:20:32,769 --> 00:20:44,039
Oh any questions so this started out

00:20:40,149 --> 00:20:44,039
with all four of those people in there

00:20:47,519 --> 00:21:03,549
yeah that's correct

00:21:01,330 --> 00:21:07,480
yep there was some unique security

00:21:03,549 --> 00:21:10,919
requirements within Boeing if I can't

00:21:07,480 --> 00:21:13,330
say much more than that but yeah they'd

00:21:10,919 --> 00:21:15,669
yes basically yes we just wanted to

00:21:13,330 --> 00:21:17,889
limit all ingress traffic so that only

00:21:15,669 --> 00:21:19,809
the VMS within Cloud Foundry could talk

00:21:17,889 --> 00:21:22,239
to those talked to themselves typically

00:21:19,809 --> 00:21:24,039
you know you rely on you would create an

00:21:22,239 --> 00:21:28,419
isolated Network a completely unwound

00:21:24,039 --> 00:21:29,859
admit maybe through NSX or through true

00:21:28,419 --> 00:21:32,710
firewalling or just disconnected

00:21:29,859 --> 00:21:35,200
completely you know at the VMware level

00:21:32,710 --> 00:21:36,489
we did didn't have that luxury so we

00:21:35,200 --> 00:21:38,619
created our own solution which I think

00:21:36,489 --> 00:21:40,269
actually because a defense-in-depth

00:21:38,619 --> 00:21:44,070
I think it actually could be used

00:21:40,269 --> 00:21:44,070
elsewhere yeah

00:21:50,890 --> 00:21:54,049
[Music]

00:21:58,610 --> 00:22:13,799
can you repeat that question please so

00:22:07,740 --> 00:22:17,159
with we have an svr and a CP that we

00:22:13,799 --> 00:22:19,580
have to be compliant with internal

00:22:17,159 --> 00:22:27,690
internal documentation yep yeah

00:22:19,580 --> 00:22:30,659
standards yeah which is is a lot yeah I

00:22:27,690 --> 00:22:32,850
would say hundreds of pages of internal

00:22:30,659 --> 00:22:36,990
compliance stuff driven by government

00:22:32,850 --> 00:22:39,690
and other needs right so there was a lot

00:22:36,990 --> 00:22:40,890
of upfront diagramming and and pulling

00:22:39,690 --> 00:22:44,850
all the parts and trying to understand

00:22:40,890 --> 00:22:46,649
the traffic flows the security team in

00:22:44,850 --> 00:22:49,590
particular wanted to know every traffic

00:22:46,649 --> 00:22:51,000
flow between every component and it

00:22:49,590 --> 00:22:54,620
quickly became apparent that we needed

00:22:51,000 --> 00:22:54,620
to really lock this thing down

00:23:12,340 --> 00:23:46,310
yeah yeah and a lot hours of work trying

00:23:17,360 --> 00:23:48,140
to yeah but to make a lot some of the

00:23:46,310 --> 00:23:49,610
team's happy we had to deal with ok the

00:23:48,140 --> 00:23:51,590
dynamic nature this thing where is he

00:23:49,610 --> 00:23:52,640
used to spinning up the server putting

00:23:51,590 --> 00:23:54,740
all this time into it and the care and

00:23:52,640 --> 00:23:56,150
feeding of it and now it's completely

00:23:54,740 --> 00:23:57,620
dynamic it's gonna come up on a

00:23:56,150 --> 00:23:59,330
different IP address with some random

00:23:57,620 --> 00:24:01,280
hosting a seemingly random hostname you

00:23:59,330 --> 00:24:03,890
know and so we had to do things like

00:24:01,280 --> 00:24:05,720
okay negotiate we'll make instead of you

00:24:03,890 --> 00:24:07,220
contacting us the server will reach out

00:24:05,720 --> 00:24:10,250
to you well issue an API call to you

00:24:07,220 --> 00:24:13,010
tell you Here I am you know and I belong

00:24:10,250 --> 00:24:14,630
to the PCF project or whatever yeah

00:24:13,010 --> 00:24:17,030
there's quite a bit of that kind of

00:24:14,630 --> 00:24:18,520
stuff and then also we also had to do

00:24:17,030 --> 00:24:21,560
some integration with the team that

00:24:18,520 --> 00:24:25,220
inventories the VMS from the the VM

00:24:21,560 --> 00:24:26,840
level so we started we queried vSphere

00:24:25,220 --> 00:24:29,120
in this case the vSphere API to get a

00:24:26,840 --> 00:24:37,490
list of the VMS periodically and send

00:24:29,120 --> 00:24:41,120
that off to the to the system which

00:24:37,490 --> 00:24:43,250
doesn't always get updated correctly

00:24:41,120 --> 00:24:45,700
because that's you know and that's one

00:24:43,250 --> 00:24:48,920
of those things that you ongoing fixing

00:24:45,700 --> 00:24:51,860
this is telling us that we have servers

00:24:48,920 --> 00:24:54,860
vm's that were there last week today

00:24:51,860 --> 00:24:57,380
they're already gone yeah since you

00:24:54,860 --> 00:24:58,790
repay them every week right at one time

00:24:57,380 --> 00:25:00,410
the purging wasn't happening properly

00:24:58,790 --> 00:25:02,770
and it said like you had thousands and

00:25:00,410 --> 00:25:02,770
thousands

00:25:13,180 --> 00:25:29,300
December was entered into an ecosystem

00:25:26,900 --> 00:25:31,430
where they would record what the beams

00:25:29,300 --> 00:25:33,410
purpose was and all of its compliance

00:25:31,430 --> 00:25:35,030
issues and all these things and it's

00:25:33,410 --> 00:25:36,620
it's a traditional system we've had for

00:25:35,030 --> 00:25:38,510
around around for a while and we were

00:25:36,620 --> 00:25:41,500
always worried is it gonna be able to

00:25:38,510 --> 00:25:43,340
keep up with us and then our VMware guys

00:25:41,500 --> 00:25:45,440
check some box

00:25:43,340 --> 00:25:48,560
I forgot what wanted you but they check

00:25:45,440 --> 00:25:52,250
some box and it started to balance the

00:25:48,560 --> 00:25:55,010
VMS from one host to another while Cloud

00:25:52,250 --> 00:25:58,010
Foundry was trying to balance hosts from

00:25:55,010 --> 00:26:01,720
one to another and so we ended up I got

00:25:58,010 --> 00:26:04,280
an email that said that we had like

00:26:01,720 --> 00:26:06,440
10,000 repaved because I was getting an

00:26:04,280 --> 00:26:09,260
email say hey cool we got 200 repaved

00:26:06,440 --> 00:26:12,260
cuz there's 200 VL since you have 10,000

00:26:09,260 --> 00:26:14,360
of them it's like what in and and and

00:26:12,260 --> 00:26:16,370
that was repaid that means also 10,000

00:26:14,360 --> 00:26:18,800
recreates you know I mean delete and

00:26:16,370 --> 00:26:21,650
recreates and that means that was 20,000

00:26:18,800 --> 00:26:24,320
entries and exits out of that ecosystem

00:26:21,650 --> 00:26:27,980
and it worked and they didn't even know

00:26:24,320 --> 00:26:29,840
it they're like yeah yeah Bosh is

00:26:27,980 --> 00:26:32,330
fighting the other ecosystems the other

00:26:29,840 --> 00:26:35,540
vm systems it worked but we're running

00:26:32,330 --> 00:26:41,900
out of space right yeah 13 hugs it was

00:26:35,540 --> 00:26:48,020
pretty cool anyway multiple how many

00:26:41,900 --> 00:26:49,110
levels are there in at aramis sooo we're

00:26:48,020 --> 00:26:51,700
at the spongy level

00:26:49,110 --> 00:26:54,839
[Laughter]

00:26:51,700 --> 00:26:54,839
[Music]

00:26:57,950 --> 00:27:01,039
[Music]

00:27:08,029 --> 00:27:48,169
no no it Oh John yeah any more questions

00:27:36,440 --> 00:27:51,980
yeah about Cisco ACI application centric

00:27:48,169 --> 00:27:55,860
infrastructure you know right from

00:27:51,980 --> 00:27:58,649
regular NSX switch mode to ACN mode

00:27:55,860 --> 00:28:00,779
where you can actually you know any bill

00:27:58,649 --> 00:28:03,450
the network you can build the network

00:28:00,779 --> 00:28:07,559
you can ice segregate the network based

00:28:03,450 --> 00:28:09,559
on in our applications so how can we

00:28:07,559 --> 00:28:16,129
integrate that kind of network

00:28:09,559 --> 00:28:16,129
architecture into this architecture

00:28:17,000 --> 00:28:21,210
you know I'm not quite sure I haven't

00:28:19,170 --> 00:28:23,160
used that maybe Sean do you have any any

00:28:21,210 --> 00:28:24,390
thoughts Sara we could sync up we can

00:28:23,160 --> 00:28:26,730
maybe get you connected with somebody

00:28:24,390 --> 00:28:29,060
who might know you have any thoughts

00:28:26,730 --> 00:28:29,060
Sean

00:29:13,669 --> 00:29:17,359
yeah yeah we already have that at the

00:29:16,129 --> 00:29:19,879
application level with micro

00:29:17,359 --> 00:29:21,829
segmentation within Cloud Foundry right

00:29:19,879 --> 00:29:51,619
so but the next level would be to do it

00:29:21,829 --> 00:29:54,009
at the service level as well great

00:29:51,619 --> 00:29:54,009
question

00:30:18,980 --> 00:30:26,070
do we have any more questions no I will

00:30:24,360 --> 00:30:30,080
finish passing out some contraband

00:30:26,070 --> 00:30:34,450
stickers Thank You Shawn

00:30:30,080 --> 00:30:34,450

YouTube URL: https://www.youtube.com/watch?v=3kgNSZggCUM


