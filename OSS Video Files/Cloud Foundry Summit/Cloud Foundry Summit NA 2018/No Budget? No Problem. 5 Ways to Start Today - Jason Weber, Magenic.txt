Title: No Budget? No Problem. 5 Ways to Start Today - Jason Weber, Magenic
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	No Budget? No Problem. 5 Ways to Start Today - Jason Weber, Magenic

 This session may be of interest if 3 things are true. One, you have a legacy (possibly massive) .NET-based monolithic application that your business relies on. Two, you would like to modernize this application and/or make it cloud-native but currently lack the budget to do so. Three, you wonder if there is anything you can do today to get a head start on this non-trivial effort.

Good news, the answer is “yes!” In this session you’ll learn 5 concrete and incremental changes you can begin today that will help you gain that head start in place. Why do next year what you can begin next week?

This session is geared towards decision makers and managers with a technical background. In addition to the checklist, you'll also see a few concrete examples (code) that illustrate the main points discussed. 

About Jason Weber
Jason is a seasoned consultant with over 20 years experience creating business value with Microsoft technology. His experience spans a variety of industries and operating environments.
With a professional focus on the technical leadership of cloud- and web-based projects, Jason has led several of Magenic’s most significant engagements. Recently, Jason has worked with Pivotal's Application Transformation practice to help customers with .NET-based application portfolios achieve the benefits of cloud-native architecture and culture.

Jason has spoken at numerous conferences and events including AIM New England, Code Mastery, Microsoft Technology Center, national web casts for Magenic, and various Microsoft user groups.
Captions: 
	00:00:00,860 --> 00:00:05,310
my name is Jason Weber I'm a principal

00:00:03,120 --> 00:00:07,890
lead consultant with Magette ik and the

00:00:05,310 --> 00:00:09,230
session came about from my experience in

00:00:07,890 --> 00:00:12,450
the experience of my colleagues

00:00:09,230 --> 00:00:15,660
performing a number of migrations into

00:00:12,450 --> 00:00:21,210
the cloud cloud foundry and other paths

00:00:15,660 --> 00:00:23,340
or platform-as-a-service solutions have

00:00:21,210 --> 00:00:24,900
our obligatory fire announcement I

00:00:23,340 --> 00:00:26,670
suspect you've already seen this a few

00:00:24,900 --> 00:00:29,060
times today so I won't read it verbatim

00:00:26,670 --> 00:00:30,480
but you know look around find the exits

00:00:29,060 --> 00:00:32,820
the exits

00:00:30,480 --> 00:00:34,350
get out from out you can get to outside

00:00:32,820 --> 00:00:36,960
and of course I have every confidence

00:00:34,350 --> 00:00:38,790
that everyone here is gonna be nice and

00:00:36,960 --> 00:00:47,390
polite to the public safety folks in the

00:00:38,790 --> 00:00:51,300
event of a fire so that's interesting

00:00:47,390 --> 00:01:01,430
whatever happens don't be that guy or

00:00:51,300 --> 00:01:03,899
gal okay so there's no necessary reason

00:01:01,430 --> 00:01:06,930
that a legacy migration of a dotnet

00:01:03,899 --> 00:01:09,720
framework app as big as it may be needs

00:01:06,930 --> 00:01:13,729
to happen as a big bang a giant exercise

00:01:09,720 --> 00:01:16,259
all at once after cloud foundry lands

00:01:13,729 --> 00:01:19,189
that's an okay way to do it if that's

00:01:16,259 --> 00:01:23,250
what you want but it's not the only way

00:01:19,189 --> 00:01:24,960
there are things you can do before you

00:01:23,250 --> 00:01:27,180
have access to the platform you can do

00:01:24,960 --> 00:01:28,740
these things in place and you're running

00:01:27,180 --> 00:01:30,900
an application keep the lights on

00:01:28,740 --> 00:01:33,030
keep the application going and improve

00:01:30,900 --> 00:01:34,799
the quality of that application well at

00:01:33,030 --> 00:01:36,780
the same time making progress towards

00:01:34,799 --> 00:01:39,689
your eventual migration or potentially

00:01:36,780 --> 00:01:42,840
your replac forming goals and there's

00:01:39,689 --> 00:01:44,820
some benefits to this approach so you

00:01:42,840 --> 00:01:46,619
get a head start on uncovering all the

00:01:44,820 --> 00:01:48,450
things you didn't know you're gonna

00:01:46,619 --> 00:01:50,009
learn about the application you're gonna

00:01:48,450 --> 00:01:51,630
burn learn about the process that's

00:01:50,009 --> 00:01:53,759
going to benefit the people involved and

00:01:51,630 --> 00:01:55,530
it's also a good risk mitigation

00:01:53,759 --> 00:01:57,000
strategy the sooner you know about a

00:01:55,530 --> 00:01:59,030
challenge the sooner you can begin to

00:01:57,000 --> 00:02:00,840
address it factored in your planning and

00:01:59,030 --> 00:02:05,280
frankly you know you'll get better

00:02:00,840 --> 00:02:09,300
estimates the sooner you start so we're

00:02:05,280 --> 00:02:12,900
gonna cover that what we're not going to

00:02:09,300 --> 00:02:13,770
cover well so today we're gonna go over

00:02:12,900 --> 00:02:16,230
in the next 20

00:02:13,770 --> 00:02:20,760
it's roughly a framework for thinking

00:02:16,230 --> 00:02:23,040
about migration this is broad sense will

00:02:20,760 --> 00:02:25,020
cover a pre-flight checklist some things

00:02:23,040 --> 00:02:27,330
we should go through prior to actually

00:02:25,020 --> 00:02:30,570
beginning one of these endeavors we have

00:02:27,330 --> 00:02:31,740
the five ways of improving things and

00:02:30,570 --> 00:02:34,940
making progress on your migration

00:02:31,740 --> 00:02:39,230
migration goals and then we'll wrap up

00:02:34,940 --> 00:02:42,780
and there will be code as promised

00:02:39,230 --> 00:02:44,850
so before we start given the the

00:02:42,780 --> 00:02:46,080
audience I want to make sure that some

00:02:44,850 --> 00:02:48,600
of the terms I'm using are gonna be

00:02:46,080 --> 00:02:50,700
clear so lots of these I'm sure you've

00:02:48,600 --> 00:02:51,960
already heard today and perhaps you know

00:02:50,700 --> 00:02:54,570
before the session before this

00:02:51,960 --> 00:02:58,020
conference migration lift and shift

00:02:54,570 --> 00:03:00,120
forklift migrations cloud ready for our

00:02:58,020 --> 00:03:01,110
purposes these all mean essentially the

00:03:00,120 --> 00:03:03,810
same thing you're gonna take an

00:03:01,110 --> 00:03:06,240
application and with roughly speaking

00:03:03,810 --> 00:03:09,000
minimal changes just pick it up and move

00:03:06,240 --> 00:03:10,080
it into cloud foundry that's one set of

00:03:09,000 --> 00:03:12,030
goals that's what we're going to be

00:03:10,080 --> 00:03:15,600
talking about today how to get closer to

00:03:12,030 --> 00:03:21,510
that the next two are different in

00:03:15,600 --> 00:03:23,970
important ways so cloud native or reap

00:03:21,510 --> 00:03:25,709
lat forming these are typically much

00:03:23,970 --> 00:03:27,330
more significant efforts if you're

00:03:25,709 --> 00:03:30,570
starting with a legacy dotnet framework

00:03:27,330 --> 00:03:31,590
application a big one to get there to

00:03:30,570 --> 00:03:33,390
the point where you're taking full

00:03:31,590 --> 00:03:36,030
advantage of the Cloud Foundry platform

00:03:33,390 --> 00:03:38,430
lots more effort architectural

00:03:36,030 --> 00:03:41,340
refactorings all kinds of things going

00:03:38,430 --> 00:03:43,440
on that is not what we're gonna be

00:03:41,340 --> 00:03:45,570
talking about today although the good

00:03:43,440 --> 00:03:47,850
news is the progress you make towards

00:03:45,570 --> 00:03:50,280
that first goal that smaller goal can

00:03:47,850 --> 00:03:51,030
help you in some cases meet the larger

00:03:50,280 --> 00:03:55,440
goal as well

00:03:51,030 --> 00:03:57,240
so no loss and then lastly I'll be

00:03:55,440 --> 00:03:59,459
distinguishing today between barriers to

00:03:57,240 --> 00:04:01,170
scale meaning these are things that are

00:03:59,459 --> 00:04:04,020
going to inhibit your application from

00:04:01,170 --> 00:04:05,750
scaling out versus barriers to migration

00:04:04,020 --> 00:04:08,100
these are things that we have to tackle

00:04:05,750 --> 00:04:12,440
must do is if you will in order to

00:04:08,100 --> 00:04:12,440
actually migrate a legacy application

00:04:12,890 --> 00:04:17,250
now by show of hands I'm curious how

00:04:15,959 --> 00:04:19,109
many folks in the audience today have

00:04:17,250 --> 00:04:22,250
heard of the so-called twelve factor app

00:04:19,109 --> 00:04:24,270
or twelve factor application all right

00:04:22,250 --> 00:04:26,520
that's good

00:04:24,270 --> 00:04:28,740
so for those of you who haven't this is

00:04:26,520 --> 00:04:30,449
a way of thinking about software you

00:04:28,740 --> 00:04:32,639
could say it's an architectural a set of

00:04:30,449 --> 00:04:34,650
architectural patterns for developing

00:04:32,639 --> 00:04:36,150
code that runs in cloud foundry you

00:04:34,650 --> 00:04:38,280
could also say it's a way of thinking

00:04:36,150 --> 00:04:41,940
about an existing application and

00:04:38,280 --> 00:04:44,610
measuring its suitability to run in the

00:04:41,940 --> 00:04:45,840
cloud and cloud foundry so we don't have

00:04:44,610 --> 00:04:48,720
time to go through all 12 of these today

00:04:45,840 --> 00:04:50,940
and that's okay because it turns out is

00:04:48,720 --> 00:04:53,039
for our purposes to migrate a legacy

00:04:50,940 --> 00:04:56,069
application some of these are more

00:04:53,039 --> 00:04:57,900
important than others in the purists may

00:04:56,069 --> 00:04:59,849
push back on this and that's fine we can

00:04:57,900 --> 00:05:02,789
have a conversation afterwards if you're

00:04:59,849 --> 00:05:06,919
interested but we're going to focus on

00:05:02,789 --> 00:05:11,009
these three today dependencies

00:05:06,919 --> 00:05:14,000
configuration and logging these three

00:05:11,009 --> 00:05:17,009
must be addressed in some fashion

00:05:14,000 --> 00:05:19,139
historically must be addressed in order

00:05:17,009 --> 00:05:21,630
to migrate in an application a legacy

00:05:19,139 --> 00:05:23,940
dotnet application a framework app into

00:05:21,630 --> 00:05:26,400
cloud foundry there's a little bit of an

00:05:23,940 --> 00:05:29,130
asterisk here because in late March as

00:05:26,400 --> 00:05:33,060
you may be aware pivotal released PCF

00:05:29,130 --> 00:05:35,370
2.1 and that release actually relaxes

00:05:33,060 --> 00:05:37,289
some of the constraints on what you can

00:05:35,370 --> 00:05:39,240
do what you need to do in essence to

00:05:37,289 --> 00:05:40,889
take that legacy application that dotnet

00:05:39,240 --> 00:05:43,800
framework app and run it in the cloud

00:05:40,889 --> 00:05:46,830
now this is still important to be aware

00:05:43,800 --> 00:05:48,120
of though because in many respects if

00:05:46,830 --> 00:05:49,620
you don't do these things you're not

00:05:48,120 --> 00:05:52,320
going to be able to take full advantage

00:05:49,620 --> 00:05:54,030
of that migration so it's not like you

00:05:52,320 --> 00:05:55,500
don't need to do these things but

00:05:54,030 --> 00:05:59,370
technically some of these aren't really

00:05:55,500 --> 00:06:00,419
must do is any longer while we're doing

00:05:59,370 --> 00:06:04,020
this we're going to keep our eye on

00:06:00,419 --> 00:06:06,449
three other of the 12 factors now these

00:06:04,020 --> 00:06:08,699
are a little bit different based on my

00:06:06,449 --> 00:06:10,789
experience these are the three factors

00:06:08,699 --> 00:06:13,139
that often introduce barriers to scale

00:06:10,789 --> 00:06:16,110
so we don't actually need to solve for

00:06:13,139 --> 00:06:17,759
this in order to achieve a migration but

00:06:16,110 --> 00:06:19,139
we're gonna keep our eye on these as we

00:06:17,759 --> 00:06:21,330
go at least that's what I'd recommend

00:06:19,139 --> 00:06:23,729
and there may be some low-hanging fruit

00:06:21,330 --> 00:06:26,990
here that you can pluck along the way so

00:06:23,729 --> 00:06:30,330
these are nice to haves so out of 12

00:06:26,990 --> 00:06:33,150
that gets us our framework a 3+3

00:06:30,330 --> 00:06:35,310
framework if you will and this is going

00:06:33,150 --> 00:06:38,630
to be the theoretical basis that'll

00:06:35,310 --> 00:06:38,630
guide our efforts

00:06:39,450 --> 00:06:44,740
one of the one of the ways to prevent

00:06:41,800 --> 00:06:49,030
bad outcomes in life in many endeavors

00:06:44,740 --> 00:06:51,190
not just migrations is to plan and to do

00:06:49,030 --> 00:06:53,290
a little bit of analysis before you

00:06:51,190 --> 00:06:54,970
start some people may take that as anti

00:06:53,290 --> 00:06:56,590
agile but really if you read carefully

00:06:54,970 --> 00:06:58,060
the agile folks would say you'd do the

00:06:56,590 --> 00:07:01,360
right amount of planning and no more

00:06:58,060 --> 00:07:02,980
which I agree with completely by the way

00:07:01,360 --> 00:07:05,770
this is Auto polo and it turns out this

00:07:02,980 --> 00:07:10,330
has a history in Massachusetts so kudos

00:07:05,770 --> 00:07:13,300
to the local crowd so here's a

00:07:10,330 --> 00:07:14,680
pre-flight checklist if this is

00:07:13,300 --> 00:07:17,139
something that you're interested in if

00:07:14,680 --> 00:07:18,639
you have a big application a legacy

00:07:17,139 --> 00:07:21,820
framework application you're interested

00:07:18,639 --> 00:07:25,150
in migrating I'd recommend these five

00:07:21,820 --> 00:07:29,830
steps first so the first thing you want

00:07:25,150 --> 00:07:31,240
to do is find a technical smiie someone

00:07:29,830 --> 00:07:34,720
who knows the application really well

00:07:31,240 --> 00:07:36,280
ideally you do the best you can if this

00:07:34,720 --> 00:07:39,070
person knows the businesses well that's

00:07:36,280 --> 00:07:41,590
even better but that's for our purposes

00:07:39,070 --> 00:07:45,910
for technical migration that's actually

00:07:41,590 --> 00:07:47,260
secondary if we can find a person like

00:07:45,910 --> 00:07:48,850
this listen that person is not always

00:07:47,260 --> 00:07:50,710
available if you don't have that person

00:07:48,850 --> 00:07:52,750
this exercise are going to become a

00:07:50,710 --> 00:07:55,030
giant archaeology expedition the code

00:07:52,750 --> 00:07:56,470
equivalent thereof but if you do have

00:07:55,030 --> 00:07:59,470
this person they can help us with the

00:07:56,470 --> 00:08:01,840
next four steps and that is coming to

00:07:59,470 --> 00:08:04,780
grips with our dependencies external

00:08:01,840 --> 00:08:09,669
dependencies system dependencies as well

00:08:04,780 --> 00:08:12,160
as shared State so single Tunes are one

00:08:09,669 --> 00:08:15,039
example other shared state could be you

00:08:12,160 --> 00:08:17,590
know you name it in most legacy

00:08:15,039 --> 00:08:19,330
applications there is a lot of shared

00:08:17,590 --> 00:08:22,270
state as opposed to most modern

00:08:19,330 --> 00:08:24,400
applications there's very little depends

00:08:22,270 --> 00:08:25,870
you may discover there's a little or a

00:08:24,400 --> 00:08:31,389
lot of shared state depending on who

00:08:25,870 --> 00:08:34,539
wrote it in when so dependencies and

00:08:31,389 --> 00:08:37,000
shared state so having a large family

00:08:34,539 --> 00:08:39,610
with lots of dependents can bring a

00:08:37,000 --> 00:08:42,310
person much joy in life but the same is

00:08:39,610 --> 00:08:45,520
not true in software software with lots

00:08:42,310 --> 00:08:47,770
of dependencies is painful in migrating

00:08:45,520 --> 00:08:49,720
that software is hard because if you're

00:08:47,770 --> 00:08:50,890
not aware of these dependencies they can

00:08:49,720 --> 00:08:52,690
really trip you out

00:08:50,890 --> 00:08:54,550
so before we actually engage in

00:08:52,690 --> 00:08:56,140
migration activities I strongly

00:08:54,550 --> 00:08:57,430
recommend that we put together a list of

00:08:56,140 --> 00:08:59,709
all the dependencies for a particular

00:08:57,430 --> 00:09:01,360
application and this is these are

00:08:59,709 --> 00:09:04,870
examples of some of the things we're

00:09:01,360 --> 00:09:06,970
talking about so again you know PCF 2.1

00:09:04,870 --> 00:09:08,769
makes this a little bit easier on us but

00:09:06,970 --> 00:09:10,029
we should still do this for numerous

00:09:08,769 --> 00:09:13,269
reasons that will become clear a little

00:09:10,029 --> 00:09:15,610
bit later on so using the registry using

00:09:13,269 --> 00:09:17,740
the global assembly cache file system

00:09:15,610 --> 00:09:20,170
usage session state all these things you

00:09:17,740 --> 00:09:22,180
want to be aware of because we may or

00:09:20,170 --> 00:09:24,339
may not be able to use them as is and

00:09:22,180 --> 00:09:26,050
these sorts of things may need some

00:09:24,339 --> 00:09:28,510
changing before we're able to really

00:09:26,050 --> 00:09:35,410
succeed succeed in migrating to the

00:09:28,510 --> 00:09:39,250
cloud shared state is another one of

00:09:35,410 --> 00:09:41,050
these challenges for us so everything is

00:09:39,250 --> 00:09:43,560
easy shared state wise when you're a

00:09:41,050 --> 00:09:45,880
single process running on a single box

00:09:43,560 --> 00:09:47,529
but one of the reasons we move to the

00:09:45,880 --> 00:09:51,279
cloud is to be able to scale out and

00:09:47,529 --> 00:09:53,260
shared state is the bane of scaling out

00:09:51,279 --> 00:09:55,839
so just as with our dependencies we'll

00:09:53,260 --> 00:09:57,610
want to create a list of all the

00:09:55,839 --> 00:09:59,740
different forms of shared state can be

00:09:57,610 --> 00:10:02,170
physical shared state meaning using a

00:09:59,740 --> 00:10:03,550
cache I'm using a database which is

00:10:02,170 --> 00:10:05,380
connected and that's okay

00:10:03,550 --> 00:10:07,000
it could be logical shared State it

00:10:05,380 --> 00:10:09,100
could be Singleton's in the code it was

00:10:07,000 --> 00:10:10,870
a pretty popular pattern in the 90s so

00:10:09,100 --> 00:10:15,149
depending on when your application was

00:10:10,870 --> 00:10:15,149
written this could be very significant I

00:10:17,339 --> 00:10:21,820
have to say I put this as number one

00:10:20,560 --> 00:10:23,610
because actually think this is one of

00:10:21,820 --> 00:10:26,079
the most important things you can do

00:10:23,610 --> 00:10:27,190
from a practical standpoint in terms of

00:10:26,079 --> 00:10:28,570
really succeeding if you're in an

00:10:27,190 --> 00:10:31,089
organization with a high tolerance for

00:10:28,570 --> 00:10:34,540
failure it can skip it and nobody likes

00:10:31,089 --> 00:10:36,760
this nobody enjoys doing this but it's

00:10:34,540 --> 00:10:38,290
pretty important so if we if we've done

00:10:36,760 --> 00:10:41,019
this if we've gotten our list together

00:10:38,290 --> 00:10:43,329
then we can do a little bit of a kind of

00:10:41,019 --> 00:10:46,540
a quick assessment and say alright are

00:10:43,329 --> 00:10:48,100
we ready to do this or not so here's how

00:10:46,540 --> 00:10:50,709
we can assess whether we're ready or not

00:10:48,100 --> 00:10:52,630
do we have that's me or is this going to

00:10:50,709 --> 00:10:54,040
be one of those slog through the code

00:10:52,630 --> 00:10:56,529
where we just don't know what we don't

00:10:54,040 --> 00:10:59,079
know and therefore we can't estimate how

00:10:56,529 --> 00:11:01,270
long this is going to take does this me

00:10:59,079 --> 00:11:03,700
agree with the rest of the team overall

00:11:01,270 --> 00:11:06,460
in terms of how much effort this is

00:11:03,700 --> 00:11:08,470
if there's a big mismatch it's worth

00:11:06,460 --> 00:11:10,060
having a conversation about that some

00:11:08,470 --> 00:11:11,260
people are the just those negative

00:11:10,060 --> 00:11:12,520
people and everything's always a

00:11:11,260 --> 00:11:15,490
disaster and I'm gonna take a million

00:11:12,520 --> 00:11:16,810
years okay but you know sometimes

00:11:15,490 --> 00:11:18,310
there's some valid concerns you really

00:11:16,810 --> 00:11:22,390
want to hear those folks out they know a

00:11:18,310 --> 00:11:24,940
lot in many cases how do we feel about

00:11:22,390 --> 00:11:26,650
our lists you know does the level of

00:11:24,940 --> 00:11:29,830
completeness of our list match with our

00:11:26,650 --> 00:11:31,900
organizational tolerance for risk is it

00:11:29,830 --> 00:11:33,220
good enough do we understand our

00:11:31,900 --> 00:11:35,050
limitations so we figured out which

00:11:33,220 --> 00:11:37,900
parts we can succeed within which parts

00:11:35,050 --> 00:11:39,970
we can because in many organizations you

00:11:37,900 --> 00:11:42,160
say it's a migration three conversations

00:11:39,970 --> 00:11:43,870
later it's the CIO talking to someone

00:11:42,160 --> 00:11:45,190
and it's you know much more than a

00:11:43,870 --> 00:11:48,040
migration so it helps to communicate

00:11:45,190 --> 00:11:49,330
very precisely and then of course are we

00:11:48,040 --> 00:11:50,800
comfortable with whatever benefits we

00:11:49,330 --> 00:11:54,010
expect to get having gone through this

00:11:50,800 --> 00:11:56,050
exercise this is a good way to to kind

00:11:54,010 --> 00:12:01,210
of have that check point and rationalize

00:11:56,050 --> 00:12:03,100
the effort great so we've gone through

00:12:01,210 --> 00:12:05,620
that exercise we we think we're good to

00:12:03,100 --> 00:12:07,420
go so the good news is you've already

00:12:05,620 --> 00:12:09,460
done one of the five things the five

00:12:07,420 --> 00:12:12,340
ways it was the creation of those lists

00:12:09,460 --> 00:12:14,440
and doing your due diligence and if you

00:12:12,340 --> 00:12:18,120
feel cheated I've got a number six at

00:12:14,440 --> 00:12:18,120
the end that will make that one up

00:12:18,210 --> 00:12:23,680
so here's way number two that we can

00:12:20,920 --> 00:12:24,970
start again this is in place in the

00:12:23,680 --> 00:12:29,200
current environment with the current

00:12:24,970 --> 00:12:31,330
application many legacy applications are

00:12:29,200 --> 00:12:33,930
running on older versions of.net and

00:12:31,330 --> 00:12:36,630
that's generally speaking not that great

00:12:33,930 --> 00:12:39,400
if you're on four or five - or later

00:12:36,630 --> 00:12:41,680
you're more or less supported you know

00:12:39,400 --> 00:12:42,970
Microsoft supports that version but if

00:12:41,680 --> 00:12:44,770
you're running on four or five one or

00:12:42,970 --> 00:12:47,020
earlier technically you're out of

00:12:44,770 --> 00:12:50,050
support so this is a great thing to do

00:12:47,020 --> 00:12:51,040
whether you're migrating or not now

00:12:50,050 --> 00:12:53,080
depending on where you're coming from

00:12:51,040 --> 00:12:54,640
there can be subtle differences in the

00:12:53,080 --> 00:12:57,610
CLR versioning that can cause some

00:12:54,640 --> 00:12:58,930
problems so this isn't a slam dunk it's

00:12:57,610 --> 00:13:01,030
pretty easy to do I'm not I'm sure

00:12:58,930 --> 00:13:02,530
everyone in the room probably who has a

00:13:01,030 --> 00:13:04,060
technical background and knows what's

00:13:02,530 --> 00:13:07,000
involved so I'm not going to go in the

00:13:04,060 --> 00:13:08,650
details on this one but you know it's

00:13:07,000 --> 00:13:09,880
worth noting that you can't assume it's

00:13:08,650 --> 00:13:11,110
going to work and so plan accordingly

00:13:09,880 --> 00:13:14,740
maybe set up a VM

00:13:11,110 --> 00:13:16,740
try to duplicate the environment upgrade

00:13:14,740 --> 00:13:19,020
in place see what happens

00:13:16,740 --> 00:13:21,120
you know test it out testing is probably

00:13:19,020 --> 00:13:22,260
the most important step here and if

00:13:21,120 --> 00:13:23,100
you've got automated testing that's

00:13:22,260 --> 00:13:27,029
fantastic

00:13:23,100 --> 00:13:28,320
if not you can maybe solicit help from

00:13:27,029 --> 00:13:31,620
other parts of the organization to test

00:13:28,320 --> 00:13:34,740
it out generally speaking this is a can

00:13:31,620 --> 00:13:36,300
do or can't do occasionally there are

00:13:34,740 --> 00:13:38,100
some gotchas but for the most part this

00:13:36,300 --> 00:13:40,350
is fairly straightforward and you know

00:13:38,100 --> 00:13:42,540
reasonably quickly if it's gonna work

00:13:40,350 --> 00:13:44,190
for you or not and if it's not going to

00:13:42,540 --> 00:13:46,490
work for you this is a much bigger red

00:13:44,190 --> 00:13:48,750
flag from an organizational perspective

00:13:46,490 --> 00:13:50,550
these earlier versions present security

00:13:48,750 --> 00:13:52,950
risks and depending on what your

00:13:50,550 --> 00:13:55,500
application does could be a pretty big

00:13:52,950 --> 00:13:58,350
deal the other thing i want to mention

00:13:55,500 --> 00:14:00,959
in regard to versioning is that although

00:13:58,350 --> 00:14:04,080
it doesn't apply in the in place case

00:14:00,959 --> 00:14:05,790
that i'm discussing today once you have

00:14:04,080 --> 00:14:09,180
your application and you're ready to

00:14:05,790 --> 00:14:11,100
migrate as you start moving forward once

00:14:09,180 --> 00:14:13,529
you get into cloud foundry odds are good

00:14:11,100 --> 00:14:15,839
if it's a dotnet application that you'll

00:14:13,529 --> 00:14:19,200
want to take a look at steel-toe so this

00:14:15,839 --> 00:14:21,510
is essentially a look ahead steel-toe is

00:14:19,200 --> 00:14:25,140
a fantastic implementation

00:14:21,510 --> 00:14:26,760
reimplementation of spring boot and even

00:14:25,140 --> 00:14:28,200
if you don't use the whole thing there's

00:14:26,760 --> 00:14:30,810
lots of pieces that can be pulled out

00:14:28,200 --> 00:14:32,579
separately it's hard to imagine you do a

00:14:30,810 --> 00:14:34,800
migration into Cloud Foundry and not be

00:14:32,579 --> 00:14:36,810
able to with you given dotnet of course

00:14:34,800 --> 00:14:38,700
and not be able to use at least one or

00:14:36,810 --> 00:14:41,130
two parts of this and it's well-written

00:14:38,700 --> 00:14:42,990
it's all good the reason I mentioned it

00:14:41,130 --> 00:14:45,149
here is that depending on when you'd go

00:14:42,990 --> 00:14:47,850
through this you may discover that

00:14:45,149 --> 00:14:49,680
there's some version dependencies so for

00:14:47,850 --> 00:14:52,560
example back in December steel-toe

00:14:49,680 --> 00:14:54,630
supported for six one but not for seven

00:14:52,560 --> 00:14:56,610
yet so it's just a timing thing it does

00:14:54,630 --> 00:14:59,190
now the new releases telltale works the

00:14:56,610 --> 00:15:05,459
for seven so that's really just a timing

00:14:59,190 --> 00:15:08,430
thing here's way number three we can do

00:15:05,459 --> 00:15:11,640
this in place externalize our

00:15:08,430 --> 00:15:13,410
configuration and this actually bumps

00:15:11,640 --> 00:15:16,160
into some of the other twelve the twelve

00:15:13,410 --> 00:15:18,839
factors but the gist of this is that

00:15:16,160 --> 00:15:20,310
when you're running in the cloud you

00:15:18,839 --> 00:15:21,660
don't want to do what you may be doing

00:15:20,310 --> 00:15:24,450
on-premise so how do you do

00:15:21,660 --> 00:15:26,370
configuration today well lots of debt

00:15:24,450 --> 00:15:29,500
and that apps have configuration files

00:15:26,370 --> 00:15:31,390
app config web config

00:15:29,500 --> 00:15:35,290
and those by and large will continue to

00:15:31,390 --> 00:15:36,310
work but it's not ideal for a variety of

00:15:35,290 --> 00:15:38,050
reasons when you're operating in a

00:15:36,310 --> 00:15:41,260
containerized environment changing

00:15:38,050 --> 00:15:43,900
config is via files at least is not what

00:15:41,260 --> 00:15:48,820
you want to do so what we would like to

00:15:43,900 --> 00:15:51,520
do instead is figure out a way that we

00:15:48,820 --> 00:15:53,710
could inject our configuration via

00:15:51,520 --> 00:15:56,620
environment variables which is a pattern

00:15:53,710 --> 00:15:58,750
you see in Cloud Foundry and we want to

00:15:56,620 --> 00:16:00,790
do this we want to enable this without

00:15:58,750 --> 00:16:02,560
breaking our application today because

00:16:00,790 --> 00:16:05,320
it's running in place on systems we need

00:16:02,560 --> 00:16:08,140
to keep the lights on what we're gonna

00:16:05,320 --> 00:16:11,320
do what I propose is you define a new

00:16:08,140 --> 00:16:13,690
interface c-sharp or whatever language

00:16:11,320 --> 00:16:16,020
you're using you implement that

00:16:13,690 --> 00:16:17,980
interface using the current data source

00:16:16,020 --> 00:16:19,450
right you already got the code so

00:16:17,980 --> 00:16:21,130
whatever you're doing today you just put

00:16:19,450 --> 00:16:24,580
that in the implementation you've just

00:16:21,130 --> 00:16:27,160
added an interface then you can refactor

00:16:24,580 --> 00:16:29,470
your app logic to use that interface for

00:16:27,160 --> 00:16:30,880
the purpose of getting config so instead

00:16:29,470 --> 00:16:32,740
of calling configuration manager you're

00:16:30,880 --> 00:16:34,720
just calling your own you know a method

00:16:32,740 --> 00:16:36,910
on you that new interface you've created

00:16:34,720 --> 00:16:39,580
and I'll show this in a minute test it

00:16:36,910 --> 00:16:40,720
out then you can implement that

00:16:39,580 --> 00:16:42,790
interface and back it up with

00:16:40,720 --> 00:16:45,160
environment variables and that will

00:16:42,790 --> 00:16:46,720
allow you to overlay the value of

00:16:45,160 --> 00:16:48,880
environment variables on top of your

00:16:46,720 --> 00:16:50,890
files or not use your files at all if

00:16:48,880 --> 00:16:53,530
you prefer and then of course test it

00:16:50,890 --> 00:16:55,770
always test is like backups backups are

00:16:53,530 --> 00:16:59,500
easy it's when you try to restore that

00:16:55,770 --> 00:17:01,089
you learn whether they work or not so

00:16:59,500 --> 00:17:06,160
here's what that can look like in real

00:17:01,089 --> 00:17:09,550
code terms this first block here is a

00:17:06,160 --> 00:17:10,959
demo key this is a pretty conventional

00:17:09,550 --> 00:17:13,000
approach for getting a piece of

00:17:10,959 --> 00:17:14,860
information out of configuration using

00:17:13,000 --> 00:17:20,110
configuration manager from app settings

00:17:14,860 --> 00:17:21,910
or web config the second block here I'm

00:17:20,110 --> 00:17:24,910
not sure if I can hit this with the

00:17:21,910 --> 00:17:27,010
pointers that show up not really so here

00:17:24,910 --> 00:17:30,670
what we're doing this is the logic for

00:17:27,010 --> 00:17:31,870
how to pull a piece of configuration

00:17:30,670 --> 00:17:34,510
information out of the environment

00:17:31,870 --> 00:17:35,650
variables and what you want to do as

00:17:34,510 --> 00:17:38,590
we've showed here you see the

00:17:35,650 --> 00:17:39,820
application config prefix so the

00:17:38,590 --> 00:17:42,760
environment variables are a global

00:17:39,820 --> 00:17:43,650
namespace essentially who knows what

00:17:42,760 --> 00:17:45,660
other

00:17:43,650 --> 00:17:47,220
processes or anything else has been

00:17:45,660 --> 00:17:49,560
installed on a particular host is gonna

00:17:47,220 --> 00:17:51,660
put in there so you might have a name

00:17:49,560 --> 00:17:53,040
just as you do in web configure you have

00:17:51,660 --> 00:17:54,480
a key name and then the value that

00:17:53,040 --> 00:17:55,770
you're pulling out you're going to want

00:17:54,480 --> 00:17:57,060
to do that here but what I'd recommend

00:17:55,770 --> 00:17:59,670
is that you establish some sort of

00:17:57,060 --> 00:18:01,740
unique prefix so that common names don't

00:17:59,670 --> 00:18:04,050
collide in that global native space with

00:18:01,740 --> 00:18:06,120
other environment variables an example

00:18:04,050 --> 00:18:07,920
would be path path is already set on

00:18:06,120 --> 00:18:11,870
every Windows machine you can't use path

00:18:07,920 --> 00:18:15,900
use a prefix path you're good to go

00:18:11,870 --> 00:18:20,220
so that's the code for that now in terms

00:18:15,900 --> 00:18:24,600
of making this essentially a pass

00:18:20,220 --> 00:18:26,960
through this is an implementation that

00:18:24,600 --> 00:18:30,150
does both of the things I just described

00:18:26,960 --> 00:18:32,220
right what we would do here is we add

00:18:30,150 --> 00:18:35,610
first pull the value out of the

00:18:32,220 --> 00:18:36,450
configuration file I'm assuming that you

00:18:35,610 --> 00:18:38,250
know we're not going to make any changes

00:18:36,450 --> 00:18:40,560
to those because that's not part of what

00:18:38,250 --> 00:18:43,380
we're trying to do here and then we

00:18:40,560 --> 00:18:45,030
would overlay as I mentioned the value

00:18:43,380 --> 00:18:47,280
from the environment variable on top of

00:18:45,030 --> 00:18:48,930
that so you can deploy as you have it

00:18:47,280 --> 00:18:49,980
today in the event that you get to the

00:18:48,930 --> 00:18:51,690
point where you can migrate to Cloud

00:18:49,980 --> 00:18:54,690
Foundry you can literally take the set

00:18:51,690 --> 00:18:57,060
of assets you've got push them in the

00:18:54,690 --> 00:18:59,850
config file goes with them and then even

00:18:57,060 --> 00:19:00,810
you can add configuration at runtime via

00:18:59,850 --> 00:19:03,570
the environment variables and just

00:19:00,810 --> 00:19:06,440
overlay on top or you can just use

00:19:03,570 --> 00:19:06,440
environment variables

00:19:12,500 --> 00:19:17,690
this is an example of the interface I

00:19:14,750 --> 00:19:21,110
mentioned it's pretty straightforward

00:19:17,690 --> 00:19:23,960
you don't need a lot a key a read method

00:19:21,110 --> 00:19:25,520
and then implementation this is

00:19:23,960 --> 00:19:26,390
literally the implementation using the

00:19:25,520 --> 00:19:29,480
previous method

00:19:26,390 --> 00:19:31,580
it's a one-liner so the amount of the

00:19:29,480 --> 00:19:33,440
actual amount of code change that's

00:19:31,580 --> 00:19:35,870
necessary to it to implement this is

00:19:33,440 --> 00:19:37,820
quite low and this gives us the ability

00:19:35,870 --> 00:19:39,440
to then configure our application via

00:19:37,820 --> 00:19:40,520
the environment variables which is

00:19:39,440 --> 00:19:43,070
something you're absolutely going to

00:19:40,520 --> 00:19:44,780
want to do in Cloud Foundry this is

00:19:43,070 --> 00:19:46,790
something you can do today without

00:19:44,780 --> 00:19:53,780
turning the lights off it's very

00:19:46,790 --> 00:19:57,010
straight forward way number four is to

00:19:53,780 --> 00:19:59,150
come to grips with logging in the cloud

00:19:57,010 --> 00:20:01,700
so this is something that's going to

00:19:59,150 --> 00:20:03,340
come up in any platform as a service

00:20:01,700 --> 00:20:05,780
environment Cloud Foundry or otherwise

00:20:03,340 --> 00:20:08,540
if you have an application running on a

00:20:05,780 --> 00:20:09,830
server on premise you can remote in RDP

00:20:08,540 --> 00:20:12,920
if there's a problem figure out what's

00:20:09,830 --> 00:20:17,810
going on reboot it restart it and the

00:20:12,920 --> 00:20:22,070
cloud is a little bit different so it

00:20:17,810 --> 00:20:24,830
becomes more important to have for lack

00:20:22,070 --> 00:20:26,840
of a better way to put it good logs logs

00:20:24,830 --> 00:20:28,250
that are going to give the information

00:20:26,840 --> 00:20:30,380
that's required by the different

00:20:28,250 --> 00:20:32,140
audiences it might use them and I find

00:20:30,380 --> 00:20:34,970
it helpful when thinking about logging

00:20:32,140 --> 00:20:36,980
to keep in mind that sometimes some

00:20:34,970 --> 00:20:38,810
audiences use logs for things other than

00:20:36,980 --> 00:20:41,750
strictly speaking logging such as

00:20:38,810 --> 00:20:43,400
monitoring so you may have operations

00:20:41,750 --> 00:20:45,320
folks who are interested in the current

00:20:43,400 --> 00:20:47,810
state of the system you may have

00:20:45,320 --> 00:20:49,580
business analysts or business owners for

00:20:47,810 --> 00:20:51,650
a particular application who are

00:20:49,580 --> 00:20:53,360
interested in you know transactional

00:20:51,650 --> 00:20:54,560
stuff how many transactions per minute

00:20:53,360 --> 00:20:56,000
are we running through the system how

00:20:54,560 --> 00:20:57,920
many transactions are completing how

00:20:56,000 --> 00:21:00,620
many shopping carts are getting left you

00:20:57,920 --> 00:21:02,510
know unbought etc and of course you have

00:21:00,620 --> 00:21:03,710
a development team and they're probably

00:21:02,510 --> 00:21:10,490
going to be looking at the logs when

00:21:03,710 --> 00:21:13,750
there's a problem debugging etc so to

00:21:10,490 --> 00:21:13,750
address logging in the cloud

00:21:15,380 --> 00:21:20,660
we can adopt a very similar approach to

00:21:17,299 --> 00:21:24,950
what we just did and this actually sits

00:21:20,660 --> 00:21:25,520
on top of the configuration so in cloud

00:21:24,950 --> 00:21:28,910
foundry

00:21:25,520 --> 00:21:30,830
there's a log regatta it's called and if

00:21:28,910 --> 00:21:34,190
you omit your logging information to

00:21:30,830 --> 00:21:36,190
stand it out it will pull it in and make

00:21:34,190 --> 00:21:38,870
it available through numerous mechanisms

00:21:36,190 --> 00:21:40,549
now a legacy application is probably

00:21:38,870 --> 00:21:42,049
writing its log information into into

00:21:40,549 --> 00:21:44,419
files on the database or maybe you're

00:21:42,049 --> 00:21:46,570
using a third party service that's fine

00:21:44,419 --> 00:21:49,159
you can keep doing that

00:21:46,570 --> 00:21:50,900
just as we injected a little bit of

00:21:49,159 --> 00:21:52,370
extra functionality to get configuration

00:21:50,900 --> 00:21:54,679
turned on we can do the same thing with

00:21:52,370 --> 00:21:58,940
logging these are the steps will define

00:21:54,679 --> 00:22:01,010
a new interface should mention I as a

00:21:58,940 --> 00:22:02,840
consultant I've had the luck good

00:22:01,010 --> 00:22:04,669
fortune to work on numerous applications

00:22:02,840 --> 00:22:06,440
and numerous environments and one of the

00:22:04,669 --> 00:22:07,850
things I've learned doing this is that

00:22:06,440 --> 00:22:09,440
lots of different organizations have

00:22:07,850 --> 00:22:11,690
different ideas about how to do logging

00:22:09,440 --> 00:22:14,210
I think there's a lot of different

00:22:11,690 --> 00:22:15,530
frameworks out there so when we're

00:22:14,210 --> 00:22:17,240
aiming for Cloud Foundry we're gonna

00:22:15,530 --> 00:22:21,140
want to try and line up with standards

00:22:17,240 --> 00:22:21,799
and the six log levels that I'll show

00:22:21,140 --> 00:22:24,080
you in a minute

00:22:21,799 --> 00:22:26,360
are based on the Microsoft standard and

00:22:24,080 --> 00:22:28,130
they represent a framework to work with

00:22:26,360 --> 00:22:31,460
in I think it's a good one we might want

00:22:28,130 --> 00:22:33,230
to follow that so we're gonna implement

00:22:31,460 --> 00:22:34,730
an interface we're gonna continue

00:22:33,230 --> 00:22:37,490
writing to whatever you're doing right

00:22:34,730 --> 00:22:40,360
now for logging but we're also going to

00:22:37,490 --> 00:22:42,919
write to standard out then we'll

00:22:40,360 --> 00:22:45,260
refactor the app logic to use our new

00:22:42,919 --> 00:22:47,179
interface just as we do with config very

00:22:45,260 --> 00:22:50,780
similar and of course we'll test as we

00:22:47,179 --> 00:22:54,230
go now in terms of getting logging or

00:22:50,780 --> 00:22:56,900
Akane we actually have some tool tools

00:22:54,230 --> 00:22:59,090
you can pull from the Microsoft

00:22:56,900 --> 00:23:00,590
extensions libraries are very easy to

00:22:59,090 --> 00:23:02,809
get via new Ghat these are the two

00:23:00,590 --> 00:23:06,169
you'll need to do this at least to do

00:23:02,809 --> 00:23:07,240
the version I'm going to show today and

00:23:06,169 --> 00:23:12,260
in terms of the actual implementation

00:23:07,240 --> 00:23:13,669
it's as simple so the approach is

00:23:12,260 --> 00:23:15,320
different depending on whether you have

00:23:13,669 --> 00:23:18,740
for example a web service a web

00:23:15,320 --> 00:23:21,620
application or you know stateful process

00:23:18,740 --> 00:23:24,049
windows service you name it but in

00:23:21,620 --> 00:23:26,809
general the steps are the same so in

00:23:24,049 --> 00:23:28,460
this example we use the Microsoft

00:23:26,809 --> 00:23:29,029
dependency injection the Microsoft

00:23:28,460 --> 00:23:31,339
extension

00:23:29,029 --> 00:23:35,059
to create a new service collection which

00:23:31,339 --> 00:23:36,619
is a dependency injection class and then

00:23:35,059 --> 00:23:39,469
then you notice the next line is

00:23:36,619 --> 00:23:41,329
configure services so this is taking a

00:23:39,469 --> 00:23:43,279
page from dotnet core actually we'll

00:23:41,329 --> 00:23:44,299
write our own this is a pattern it

00:23:43,279 --> 00:23:46,939
should be pretty familiar if you're

00:23:44,299 --> 00:23:48,439
familiar with dotnet core then we build

00:23:46,939 --> 00:23:50,179
a service provider and then we can use

00:23:48,439 --> 00:23:56,419
that service provider to get an instance

00:23:50,179 --> 00:23:57,889
of our logging interface and this is our

00:23:56,419 --> 00:23:59,419
own configure services that we've

00:23:57,889 --> 00:24:01,399
written for this purpose it's very

00:23:59,419 --> 00:24:02,959
straightforward we're just gonna say

00:24:01,399 --> 00:24:04,069
we're gonna use the extension method

00:24:02,959 --> 00:24:05,839
that the logging framework makes

00:24:04,069 --> 00:24:08,329
available to us this is Microsoft's

00:24:05,839 --> 00:24:10,429
framework right we'll say add console

00:24:08,329 --> 00:24:11,539
that'll get us our standard out when we

00:24:10,429 --> 00:24:13,369
when we log something it'll

00:24:11,539 --> 00:24:15,969
automatically be put to standard out and

00:24:13,369 --> 00:24:18,559
we can also set a minimum logging level

00:24:15,969 --> 00:24:21,109
and we may or may not want trace turned

00:24:18,559 --> 00:24:23,749
on most of the time typically you would

00:24:21,109 --> 00:24:26,449
not do this you would not run your trace

00:24:23,749 --> 00:24:28,399
logs all the time you could make this

00:24:26,449 --> 00:24:30,169
configurable as well you might choose to

00:24:28,399 --> 00:24:32,479
drive your logging level based on an

00:24:30,169 --> 00:24:34,909
external variable you can change in the

00:24:32,479 --> 00:24:40,159
environment which is something a

00:24:34,909 --> 00:24:42,819
steel-toe can do for you so here's an

00:24:40,159 --> 00:24:45,409
example of the Microsoft's logging

00:24:42,819 --> 00:24:49,369
interface just a set of very simple

00:24:45,409 --> 00:24:49,849
messages the six levels and this is what

00:24:49,369 --> 00:24:51,379
it looks like

00:24:49,849 --> 00:24:52,849
on the console if you're a developer

00:24:51,379 --> 00:24:55,099
this is probably what you'll see if

00:24:52,849 --> 00:24:57,139
you're to run that program a couple

00:24:55,099 --> 00:24:58,759
things to note here because some of

00:24:57,139 --> 00:25:00,909
these you may notice it may be obvious

00:24:58,759 --> 00:25:02,989
to you that a lot of these are related

00:25:00,909 --> 00:25:04,489
configurations related to logging and

00:25:02,989 --> 00:25:10,149
we're gonna talk in a minute about air

00:25:04,489 --> 00:25:12,409
handling all very interrelated topics so

00:25:10,149 --> 00:25:14,149
there's a separate presentation I think

00:25:12,409 --> 00:25:18,529
we could do in terms of proper air

00:25:14,149 --> 00:25:20,989
handling the thing to be aware of is in

00:25:18,529 --> 00:25:23,209
the enterprise it's very common to see a

00:25:20,989 --> 00:25:24,249
desire to just keep the process up no

00:25:23,209 --> 00:25:27,349
matter what

00:25:24,249 --> 00:25:28,939
in Cloud Foundry not so much you're

00:25:27,349 --> 00:25:31,519
gonna let your processes die if they can

00:25:28,939 --> 00:25:33,649
become in corrupted or if a bad error

00:25:31,519 --> 00:25:34,819
occurs because the runtime is going to

00:25:33,649 --> 00:25:37,759
start up a new one for you

00:25:34,819 --> 00:25:39,829
it's much safer you can't do that in

00:25:37,759 --> 00:25:41,239
place this is again a case where you

00:25:39,829 --> 00:25:42,560
might want to inject the switch via

00:25:41,239 --> 00:25:45,440
configuration

00:25:42,560 --> 00:25:47,330
that'll allow your windows service for

00:25:45,440 --> 00:25:49,370
example to die gracefully if there is a

00:25:47,330 --> 00:25:51,580
big problem which would be a critical

00:25:49,370 --> 00:25:55,040
event in the log I would hope or a

00:25:51,580 --> 00:25:57,020
failure would be an exception so we'll

00:25:55,040 --> 00:25:58,820
let it die in the cloud we might try and

00:25:57,020 --> 00:26:01,430
keep it up again as long as it's on

00:25:58,820 --> 00:26:04,160
premise because our goal is to do all

00:26:01,430 --> 00:26:05,360
these things in place so nothing changes

00:26:04,160 --> 00:26:10,040
today you're just getting ready and

00:26:05,360 --> 00:26:12,500
making progress when it comes to

00:26:10,040 --> 00:26:14,300
configuring the logging this can get a

00:26:12,500 --> 00:26:15,980
little tricky so there's a couple links

00:26:14,300 --> 00:26:17,090
here in this presentation if specially

00:26:15,980 --> 00:26:20,080
if you're using one of the older

00:26:17,090 --> 00:26:24,170
versions of the CLR dotnet framework

00:26:20,080 --> 00:26:25,970
these are worth a read given 25 minutes

00:26:24,170 --> 00:26:28,130
we don't I don't have time to go into

00:26:25,970 --> 00:26:30,500
all the details but these are good

00:26:28,130 --> 00:26:31,910
resources for that I can assure you if

00:26:30,500 --> 00:26:32,930
you're having problems and you want to

00:26:31,910 --> 00:26:35,390
throw up your hands to say it doesn't

00:26:32,930 --> 00:26:37,420
work I've done it I've done it on all

00:26:35,390 --> 00:26:40,670
these versions it absolutely does work

00:26:37,420 --> 00:26:44,270
and if anyone has a problem you can feel

00:26:40,670 --> 00:26:45,950
free to send me an email try to point

00:26:44,270 --> 00:26:50,930
you in the right direction which brings

00:26:45,950 --> 00:26:52,670
us to number five error handling so we

00:26:50,930 --> 00:26:54,560
just talked about how in the cloud we're

00:26:52,670 --> 00:26:56,600
gonna let processes die that become

00:26:54,560 --> 00:26:58,430
corrupt because they'll get restarted

00:26:56,600 --> 00:27:01,160
for us Cloud Foundry is going to help us

00:26:58,430 --> 00:27:03,590
out that way this is a great opportunity

00:27:01,160 --> 00:27:05,630
to go through that legacy application

00:27:03,590 --> 00:27:08,150
the bigger the better I guess

00:27:05,630 --> 00:27:11,060
and take a look at how air handling is

00:27:08,150 --> 00:27:13,790
being implemented there are well-defined

00:27:11,060 --> 00:27:16,580
best practices and worst practices by

00:27:13,790 --> 00:27:18,680
Microsoft for what to do around air

00:27:16,580 --> 00:27:21,650
handling the one I'm showing here in the

00:27:18,680 --> 00:27:24,110
top left as a consultant I don't often

00:27:21,650 --> 00:27:26,780
get to say never do this the answer is

00:27:24,110 --> 00:27:28,700
usually it depends to most complex

00:27:26,780 --> 00:27:32,510
questions but this is almost always

00:27:28,700 --> 00:27:37,250
wrong more than 99% at a time you don't

00:27:32,510 --> 00:27:39,830
want to do this so in addition to the

00:27:37,250 --> 00:27:42,350
Microsoft best practices guidelines my

00:27:39,830 --> 00:27:44,720
personal favorite reference is the CLR

00:27:42,350 --> 00:27:46,760
via c-sharp it's a pretty thick book by

00:27:44,720 --> 00:27:48,530
Jeff Richter there's a couple chapters

00:27:46,760 --> 00:27:53,810
that relate to this absolutely fantastic

00:27:48,530 --> 00:27:56,060
highly recommend in each of these things

00:27:53,810 --> 00:27:56,420
if done properly I think it is fair to

00:27:56,060 --> 00:27:58,700
say

00:27:56,420 --> 00:28:02,320
we'll improve the quality of that

00:27:58,700 --> 00:28:02,320
application the quality of the codebase

00:28:03,190 --> 00:28:08,150
all right if you felt cheated by number

00:28:06,200 --> 00:28:09,910
one the dependencies she said that

00:28:08,150 --> 00:28:12,680
wasn't really a way to improve things

00:28:09,910 --> 00:28:13,580
you know that's planning it's management

00:28:12,680 --> 00:28:15,860
I don't like that

00:28:13,580 --> 00:28:18,710
well here's number six this is for the

00:28:15,860 --> 00:28:21,440
overachievers you've already got that

00:28:18,710 --> 00:28:23,660
list of dependencies so if you really

00:28:21,440 --> 00:28:26,510
want to get ahead pick a few of those

00:28:23,660 --> 00:28:28,100
and try and D couple from them try and

00:28:26,510 --> 00:28:30,200
get some of those assets into new get

00:28:28,100 --> 00:28:33,710
for example whether you host it publicly

00:28:30,200 --> 00:28:36,920
or privately try and work on that build

00:28:33,710 --> 00:28:39,020
pipeline having put put that dependency

00:28:36,920 --> 00:28:41,920
list together you're half way here now

00:28:39,020 --> 00:28:41,920
it's just a question of implementation

00:28:42,070 --> 00:28:47,300
so if you can do this you pick something

00:28:44,840 --> 00:28:49,160
easy about something simple migrated to

00:28:47,300 --> 00:28:50,600
dependency could be a gackt library

00:28:49,160 --> 00:28:53,570
preferably something you control

00:28:50,600 --> 00:28:56,300
typically the easiest ones get it into

00:28:53,570 --> 00:28:59,480
new GATT update the references test it

00:28:56,300 --> 00:29:05,570
out can you build it does it pull you're

00:28:59,480 --> 00:29:08,720
one step closer all right I think we're

00:29:05,570 --> 00:29:13,640
at time and I think we've hit all of our

00:29:08,720 --> 00:29:15,950
marks we covered a framework we talked

00:29:13,640 --> 00:29:17,810
about the pre-flight checklist we went

00:29:15,950 --> 00:29:21,710
over the five ways you can improve the

00:29:17,810 --> 00:29:24,020
application in place today and those

00:29:21,710 --> 00:29:25,400
five to recap again are the addressing

00:29:24,020 --> 00:29:28,250
dependencies putting those lists

00:29:25,400 --> 00:29:29,720
together updating to a reasonable and

00:29:28,250 --> 00:29:32,230
responsible version the dotnet framework

00:29:29,720 --> 00:29:34,970
if you're not already there

00:29:32,230 --> 00:29:37,570
adding configurability typically the

00:29:34,970 --> 00:29:40,070
environment variables to begin with

00:29:37,570 --> 00:29:43,340
addressing logging improving your

00:29:40,070 --> 00:29:46,580
logging and getting it to to standard

00:29:43,340 --> 00:29:51,410
out as a first step and addressing error

00:29:46,580 --> 00:29:52,490
handling those are our five so thank you

00:29:51,410 --> 00:29:54,140
very much for your time today

00:29:52,490 --> 00:29:56,210
I appreciate it if you have any

00:29:54,140 --> 00:29:59,420
questions I'll be at the magenta glue

00:29:56,210 --> 00:30:01,040
think that's 128 and I believe we're

00:29:59,420 --> 00:30:03,320
trying really hard to give someone in

00:30:01,040 --> 00:30:06,530
the audience a Raspberry Pi on the way

00:30:03,320 --> 00:30:12,979
out so thank you

00:30:06,530 --> 00:30:12,979

YouTube URL: https://www.youtube.com/watch?v=Ghf0dVcbowU


