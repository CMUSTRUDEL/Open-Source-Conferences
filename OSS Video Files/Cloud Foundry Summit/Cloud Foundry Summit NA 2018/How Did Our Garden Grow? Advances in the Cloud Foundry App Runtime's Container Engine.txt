Title: How Did Our Garden Grow? Advances in the Cloud Foundry App Runtime's Container Engine
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	How Did Our Garden Grow? Advances in the Cloud Foundry App Runtime's Container Engine - Julian Friedman, IBM

 Garden (the Cloud Foundry App Runtime's container engine, optimised for PaaS workloads) has had some incredibly cool upgrades in the past year. From massive security upgrades -- the ability to run without root, a first in the container ecosystem for a production runtime -- to experimenting with big performance and UX changes by exploiting layered images rather than untarring droplets to the new "Garden Peas" feature enabling sidecar containers for Cloud Foundry, this has been a very exciting year. This talk will cover everything operators and developers need to know about the runtime at the heart of Cloud Foundry.

As well as introducing the new features, the talk will explain how operators can interact with the runtime container bundles generated by Garden to debug, extend and operate the platform.
Captions: 
	00:00:00,089 --> 00:00:04,350
there's technically a minute to go but I

00:00:02,100 --> 00:00:08,639
can tell people are excited to learn

00:00:04,350 --> 00:00:10,500
about garden and I'm keen to get started

00:00:08,639 --> 00:00:12,110
before anyone realizes that this is a

00:00:10,500 --> 00:00:18,949
garden project uh Blaine tries to escape

00:00:12,110 --> 00:00:23,119
by then let's get going so I I rewatched

00:00:18,949 --> 00:00:27,240
never we watch your old talks I

00:00:23,119 --> 00:00:29,519
rewatched the garden updates from last

00:00:27,240 --> 00:00:31,260
year and it starts with me moaning for

00:00:29,519 --> 00:00:33,899
about five minutes about how I couldn't

00:00:31,260 --> 00:00:36,540
think of a funny title for a god up they

00:00:33,899 --> 00:00:41,340
talk and I can say that I've at least

00:00:36,540 --> 00:00:43,590
solved that problem this time this is to

00:00:41,340 --> 00:00:46,289
talk about how our garden grew its

00:00:43,590 --> 00:00:49,200
garden put its update talk I'm dr. Jules

00:00:46,289 --> 00:00:51,059
I work for IBM I would saw the first

00:00:49,200 --> 00:00:53,940
dojo herb because no one is tall this

00:00:51,059 --> 00:00:55,800
klodin humphreys counts and i am the

00:00:53,940 --> 00:01:01,050
project leader for garden and autoscaler

00:00:55,800 --> 00:01:02,910
this is how to escape i really love that

00:01:01,050 --> 00:01:04,409
they have a law that you have to tell

00:01:02,910 --> 00:01:07,350
people how to escape from presentations

00:01:04,409 --> 00:01:10,439
in boston like it clearly

00:01:07,350 --> 00:01:12,299
also we watched my talk so there's still

00:01:10,439 --> 00:01:14,790
kiss in three parts we're going to talk

00:01:12,299 --> 00:01:16,560
about what this garden thing is some

00:01:14,790 --> 00:01:18,270
cool stuff we've done this year and

00:01:16,560 --> 00:01:19,920
stuff for planning next she's probably

00:01:18,270 --> 00:01:24,479
not surprising for a project update

00:01:19,920 --> 00:01:25,830
track so what is garden well let's go

00:01:24,479 --> 00:01:28,259
back to the beginning I'm going to tell

00:01:25,830 --> 00:01:30,540
you a story all good talks should

00:01:28,259 --> 00:01:32,400
involve a story in the beginning there

00:01:30,540 --> 00:01:35,729
was jar files what I call ghetto

00:01:32,400 --> 00:01:39,479
containers they were right once run

00:01:35,729 --> 00:01:40,710
anywhere and everything was good but it

00:01:39,479 --> 00:01:41,970
wasn't quite good there was some

00:01:40,710 --> 00:01:45,750
problems with them that they didn't work

00:01:41,970 --> 00:01:47,369
so we were like we need some other stuff

00:01:45,750 --> 00:01:51,290
to make these containers work we need

00:01:47,369 --> 00:01:54,360
isolation so that the dependencies are

00:01:51,290 --> 00:01:56,100
isolated so that your things actually

00:01:54,360 --> 00:01:57,570
went anywhere we need to look like if

00:01:56,100 --> 00:02:00,090
you have all this stuff so we invented

00:01:57,570 --> 00:02:03,030
these namespaces things but you might

00:02:00,090 --> 00:02:05,640
have heard of reinvented these C groups

00:02:03,030 --> 00:02:06,899
things that you might have heard of and

00:02:05,640 --> 00:02:08,910
then they were wrapped in this thing

00:02:06,899 --> 00:02:11,760
called LXE which was a wrapper for these

00:02:08,910 --> 00:02:13,240
kernel things and then we created this

00:02:11,760 --> 00:02:16,060
worden thing which was a wrapper

00:02:13,240 --> 00:02:19,330
that and then we got rid of the galaxy

00:02:16,060 --> 00:02:23,380
thing worden became garden because go

00:02:19,330 --> 00:02:25,060
and we split it into an API

00:02:23,380 --> 00:02:27,070
implementation that was actually a good

00:02:25,060 --> 00:02:28,450
move so you had the garden API and then

00:02:27,070 --> 00:02:36,400
you had how we actually implemented

00:02:28,450 --> 00:02:41,350
garden and then docker a disturbance in

00:02:36,400 --> 00:02:42,370
the force so what did docker have that

00:02:41,350 --> 00:02:43,810
these things didn't have what was this

00:02:42,370 --> 00:02:45,850
said this whole docker thing that

00:02:43,810 --> 00:02:48,490
suddenly happened and changed everything

00:02:45,850 --> 00:02:49,660
I think docker did do two things which

00:02:48,490 --> 00:02:52,060
were really different from what we were

00:02:49,660 --> 00:02:55,420
doing before and those things one was

00:02:52,060 --> 00:02:57,340
encapsulation so encapsulation which is

00:02:55,420 --> 00:02:59,620
really this idea of containers as

00:02:57,340 --> 00:03:01,510
opposed to Linux containers this idea

00:02:59,620 --> 00:03:02,530
that I could take this shippable unit

00:03:01,510 --> 00:03:04,360
and move it around

00:03:02,530 --> 00:03:08,860
it would look the same in these other

00:03:04,360 --> 00:03:13,570
places that was really really new and

00:03:08,860 --> 00:03:16,540
interesting and also much I think no but

00:03:13,570 --> 00:03:18,910
I had to say it right also user

00:03:16,540 --> 00:03:21,820
experience they genuinely figured out a

00:03:18,910 --> 00:03:24,100
UX for these low-level namespaces and C

00:03:21,820 --> 00:03:27,400
groups and water and and Alex C that was

00:03:24,100 --> 00:03:28,900
really good to use so goods that people

00:03:27,400 --> 00:03:30,580
like you know I could manage these

00:03:28,900 --> 00:03:35,200
containers myself I don't need all this

00:03:30,580 --> 00:03:37,540
stuff right it was pretty good and it

00:03:35,200 --> 00:03:38,920
was so good that it people started

00:03:37,540 --> 00:03:42,870
saying this things are standard if you

00:03:38,920 --> 00:03:45,520
don't use docker you're not standard

00:03:42,870 --> 00:03:47,830
I've got such a compelling argument that

00:03:45,520 --> 00:03:51,940
this good-looking folk fellow with their

00:03:47,830 --> 00:03:53,520
British accents in about 2015 suggested

00:03:51,940 --> 00:03:55,840
that we might want to run Cloud Foundry

00:03:53,520 --> 00:03:58,330
on docker and have like a docker

00:03:55,840 --> 00:04:02,620
back-end for garden did we do that

00:03:58,330 --> 00:04:04,390
no why for a few reasons firstly it was

00:04:02,620 --> 00:04:05,650
too big this docker thing was too big

00:04:04,390 --> 00:04:08,290
too comp case we don't want to maintain

00:04:05,650 --> 00:04:09,790
this whole thing second it had too many

00:04:08,290 --> 00:04:12,400
opinions like we were going to have to

00:04:09,790 --> 00:04:14,140
fight against this thing that was both a

00:04:12,400 --> 00:04:16,450
container engine and do user experience

00:04:14,140 --> 00:04:18,040
for containers and thirdly wasn't really

00:04:16,450 --> 00:04:19,299
a standard right it wasn't this and at

00:04:18,040 --> 00:04:21,330
that point so we didn't have that much

00:04:19,299 --> 00:04:23,080
control over it and so we didn't do it

00:04:21,330 --> 00:04:25,200
what happened next

00:04:23,080 --> 00:04:29,780
Oh see I run seas

00:04:25,200 --> 00:04:32,220
manners yay standards hmm

00:04:29,780 --> 00:04:34,650
and actually that is actually really

00:04:32,220 --> 00:04:37,200
good so we created some standards in the

00:04:34,650 --> 00:04:39,720
industry around containers who's the OCI

00:04:37,200 --> 00:04:42,510
standards so a container for container

00:04:39,720 --> 00:04:43,800
runtimes and shippable images and a

00:04:42,510 --> 00:04:44,510
little implementation that was pulled

00:04:43,800 --> 00:04:49,080
out of docker

00:04:44,510 --> 00:04:50,940
which called land sea which is in terms

00:04:49,080 --> 00:04:52,500
of these things not that bad a name but

00:04:50,940 --> 00:04:55,260
that's because of how bad everything

00:04:52,500 --> 00:04:59,340
else is wait till we get to contain nerd

00:04:55,260 --> 00:05:02,580
later and we like to share some code so

00:04:59,340 --> 00:05:04,770
we were like this is great this is great

00:05:02,580 --> 00:05:06,870
this Runcie thing is exactly what we

00:05:04,770 --> 00:05:08,670
want is small it's not opinionated we

00:05:06,870 --> 00:05:09,990
don't to maintain all this stuff and we

00:05:08,670 --> 00:05:12,030
can share some code and it really is a

00:05:09,990 --> 00:05:14,250
standard brilliant we need to go and use

00:05:12,030 --> 00:05:18,060
that and that started what I call the

00:05:14,250 --> 00:05:21,210
year of glue when we were like okay how

00:05:18,060 --> 00:05:22,740
can we use all this stuff together how

00:05:21,210 --> 00:05:24,240
can we get rid of some of the stuff that

00:05:22,740 --> 00:05:26,640
we've been doing that was custom get

00:05:24,240 --> 00:05:29,280
this thing in there what were the

00:05:26,640 --> 00:05:31,680
results of that they were pretty good I

00:05:29,280 --> 00:05:36,540
want to say how long it took me to

00:05:31,680 --> 00:05:39,510
delete the gnome face from that I was

00:05:36,540 --> 00:05:41,160
expecting more happiness about that

00:05:39,510 --> 00:05:43,290
image there's no there's no known

00:05:41,160 --> 00:05:47,280
there's like 400 rounded black reticles

00:05:43,290 --> 00:05:48,870
in the keynote for this so what we ended

00:05:47,280 --> 00:05:51,240
up with was really quite nice because we

00:05:48,870 --> 00:05:53,430
split the imputation of garden and the

00:05:51,240 --> 00:05:56,130
implementation the garden API stayed the

00:05:53,430 --> 00:05:57,570
same and we were able to have this one

00:05:56,130 --> 00:05:59,730
okay but just manage these standard

00:05:57,570 --> 00:06:03,540
bundles and use the standard tool to run

00:05:59,730 --> 00:06:08,730
it so that takes you to about the start

00:06:03,540 --> 00:06:11,520
of last year so glue and span this is

00:06:08,730 --> 00:06:13,770
great but what's garden for now right

00:06:11,520 --> 00:06:16,200
right if we're just wrapping this Runcie

00:06:13,770 --> 00:06:17,130
thing what's the garden team for what

00:06:16,200 --> 00:06:22,020
does it do

00:06:17,130 --> 00:06:25,290
are we an empty hat well I think we'd be

00:06:22,020 --> 00:06:27,090
three things we're we're glue because

00:06:25,290 --> 00:06:29,160
actually that's not a bad thing gluing

00:06:27,090 --> 00:06:31,350
the rest of the system to the low-level

00:06:29,160 --> 00:06:33,420
stupid stuff is the thing that someone

00:06:31,350 --> 00:06:36,800
needs to do and keeping that abstracted

00:06:33,420 --> 00:06:36,800
is not a bad idea at all

00:06:38,400 --> 00:06:41,760
the second thing is we make sure there

00:06:39,870 --> 00:06:43,380
are secure defaults because unlike the

00:06:41,760 --> 00:06:45,510
upstream technologies we have to worry

00:06:43,380 --> 00:06:47,940
about multi-tenant work clothes which

00:06:45,510 --> 00:06:50,550
are much more difficult and much more

00:06:47,940 --> 00:06:51,600
problematic so we like the security to

00:06:50,550 --> 00:06:54,720
be there out-of-the-box and

00:06:51,600 --> 00:06:56,430
pre-configured and without options that

00:06:54,720 --> 00:06:58,470
you have to remember to pull to make it

00:06:56,430 --> 00:07:01,350
secure it's secure and you can't really

00:06:58,470 --> 00:07:02,940
disable the security and thirdly we're

00:07:01,350 --> 00:07:05,700
about exploiting containers technology

00:07:02,940 --> 00:07:08,430
in the rest of the stack so this stuff

00:07:05,700 --> 00:07:10,530
is cool we're hiding it if we're gonna

00:07:08,430 --> 00:07:11,790
hide it we don't hide it too well we

00:07:10,530 --> 00:07:15,419
want to make sure that it actually gets

00:07:11,790 --> 00:07:16,860
used above what God and does so that's

00:07:15,419 --> 00:07:18,570
gone it's glue it's secure defaults

00:07:16,860 --> 00:07:20,250
exploiting container tech and now in an

00:07:18,570 --> 00:07:22,770
effort to prove that I'm not lying

00:07:20,250 --> 00:07:27,750
cool new stuff for each of the bullet

00:07:22,770 --> 00:07:29,960
points in turn huh yeah so we've got

00:07:27,750 --> 00:07:32,640
glue which is the new Sai cars work

00:07:29,960 --> 00:07:35,040
secure defaults which is the route this

00:07:32,640 --> 00:07:39,389
work and container tech which is okay

00:07:35,040 --> 00:07:41,660
bill packs let's go glue so glue is all

00:07:39,389 --> 00:07:44,220
about garden peace what a garden peace

00:07:41,660 --> 00:07:46,290
to understand God and peace you have to

00:07:44,220 --> 00:07:49,140
understand about pods and pods this

00:07:46,290 --> 00:07:51,330
concept that kubernetes popularized

00:07:49,140 --> 00:07:54,060
they're a collection of containers that

00:07:51,330 --> 00:07:55,979
share some namespaces so they're contain

00:07:54,060 --> 00:07:58,200
images of shippable images they're

00:07:55,979 --> 00:08:00,150
encapsulated and isolated but not

00:07:58,200 --> 00:08:03,090
completely they share some stuff like

00:08:00,150 --> 00:08:04,410
for example the network why would Klaus

00:08:03,090 --> 00:08:05,970
found through want something like that

00:08:04,410 --> 00:08:08,669
it turns out we actually quite a few use

00:08:05,970 --> 00:08:11,729
cases for things like that things like

00:08:08,669 --> 00:08:13,470
health checks that we want to run in the

00:08:11,729 --> 00:08:15,000
container but we don't want to affect

00:08:13,470 --> 00:08:16,680
the containers memory limits or be

00:08:15,000 --> 00:08:19,979
affected by the containers memory limits

00:08:16,680 --> 00:08:21,570
the new envoy proxies the I think you

00:08:19,979 --> 00:08:24,450
might have heard about that sit in your

00:08:21,570 --> 00:08:28,440
container and proxy requests do SSL for

00:08:24,450 --> 00:08:31,080
you CF SSH other stuff the important

00:08:28,440 --> 00:08:34,740
thing is why it's called that the reason

00:08:31,080 --> 00:08:36,900
it's called garden peas is pods are a

00:08:34,740 --> 00:08:38,789
collection of docker containers or

00:08:36,900 --> 00:08:42,589
whales that's why they're called pods

00:08:38,789 --> 00:08:44,760
because as pod is a collection

00:08:42,589 --> 00:08:49,080
does anyone see where I'm going here a

00:08:44,760 --> 00:08:50,660
pod is a collection of whales what is a

00:08:49,080 --> 00:08:53,300
pod a collection of in a gun

00:08:50,660 --> 00:08:56,720
in a garden a part is of course a

00:08:53,300 --> 00:09:01,540
collection of peas so pop contains peas

00:08:56,720 --> 00:09:03,319
garden peas you may grow now okay

00:09:01,540 --> 00:09:05,509
let's you the most important part the

00:09:03,319 --> 00:09:08,839
feature there is an important difference

00:09:05,509 --> 00:09:10,819
between peas in garden and this pod

00:09:08,839 --> 00:09:12,350
concept which is you don't have to think

00:09:10,819 --> 00:09:14,990
about the Cloud Foundry does all this

00:09:12,350 --> 00:09:16,250
stuff this is just low-level tech and

00:09:14,990 --> 00:09:19,160
we're just gluing the clarifying

00:09:16,250 --> 00:09:20,779
experience to this stuff that's gone the

00:09:19,160 --> 00:09:22,250
piece I want to talk about security

00:09:20,779 --> 00:09:22,970
falls and some really cool stuff that

00:09:22,250 --> 00:09:25,250
we've been doing

00:09:22,970 --> 00:09:27,589
it's called rootless modes out of the

00:09:25,250 --> 00:09:31,130
box garden turns all the security visit

00:09:27,589 --> 00:09:33,079
can turn on on for your containers but

00:09:31,130 --> 00:09:35,750
there's a bit of a problem when you see

00:09:33,079 --> 00:09:37,699
a door that's really really secure where

00:09:35,750 --> 00:09:40,370
do you start thinking if you're awful

00:09:37,699 --> 00:09:42,529
like me you start think about the wall

00:09:40,370 --> 00:09:44,449
right when you've really secured the

00:09:42,529 --> 00:09:47,089
door the walls starts to look attractive

00:09:44,449 --> 00:09:49,029
and we turn on a lot of things in fact

00:09:47,089 --> 00:09:51,949
we've secured the crapper the containers

00:09:49,029 --> 00:09:53,360
but our actual garden server is starting

00:09:51,949 --> 00:09:54,680
to look a bit risky right because to

00:09:53,360 --> 00:09:57,259
deal with this stuff we have to run as

00:09:54,680 --> 00:09:58,819
routes so even though all the containers

00:09:57,259 --> 00:10:01,670
very secured we're running this is

00:09:58,819 --> 00:10:04,269
highly privileged user and at this point

00:10:01,670 --> 00:10:07,009
that starts to sound like a problem so

00:10:04,269 --> 00:10:08,300
how do we fix that we're going to secure

00:10:07,009 --> 00:10:09,980
that as well we're going to secure the

00:10:08,300 --> 00:10:13,100
garden server and run as an unprivileged

00:10:09,980 --> 00:10:14,870
user instead there's way more details

00:10:13,100 --> 00:10:17,060
about that in an awesome talk that

00:10:14,870 --> 00:10:18,500
straight after this one by this man

00:10:17,060 --> 00:10:21,639
William Martin so I'm not going to talk

00:10:18,500 --> 00:10:24,439
about that way more but it's awesome

00:10:21,639 --> 00:10:27,829
third exploit and contain effect Oh so

00:10:24,439 --> 00:10:29,600
bill packs son normally in Cloud Foundry

00:10:27,829 --> 00:10:30,889
when you run stuff you take this droplet

00:10:29,600 --> 00:10:33,110
object which is a tar file and you

00:10:30,889 --> 00:10:35,990
stream it in this container and then you

00:10:33,110 --> 00:10:38,480
on Tariq inside a container that sucks

00:10:35,990 --> 00:10:40,100
its CPU intensive doesn't really cache

00:10:38,480 --> 00:10:41,899
very well and you have to pay for all

00:10:40,100 --> 00:10:44,000
the container technology when you're

00:10:41,899 --> 00:10:46,459
untiring this stuff so you've got a disk

00:10:44,000 --> 00:10:48,680
quotas and layered file systems walking

00:10:46,459 --> 00:10:51,139
to instead it turns out the docker

00:10:48,680 --> 00:10:52,850
community in particular have this great

00:10:51,139 --> 00:10:55,490
solution layered file systems and

00:10:52,850 --> 00:10:57,680
contain images where you can have some

00:10:55,490 --> 00:10:59,779
shared layers and some different layers

00:10:57,680 --> 00:11:01,850
and a format for describing them and

00:10:59,779 --> 00:11:03,410
that's the other one of those OCI

00:11:01,850 --> 00:11:05,060
standards that we talked about earlier

00:11:03,410 --> 00:11:06,860
is the image standard

00:11:05,060 --> 00:11:08,870
and if you think about it the top layer

00:11:06,860 --> 00:11:10,850
which is just at our file it's an awful

00:11:08,870 --> 00:11:12,700
lot like a droplet the bottom layers

00:11:10,850 --> 00:11:15,350
look an awful lot like a root filesystem

00:11:12,700 --> 00:11:17,120
so why don't we just do that why don't

00:11:15,350 --> 00:11:19,520
we just convert the droplet into a layer

00:11:17,120 --> 00:11:21,410
have the root filesystem be a layer and

00:11:19,520 --> 00:11:23,090
then we can build that all up do it in a

00:11:21,410 --> 00:11:26,750
mount and you don't have to pay for the

00:11:23,090 --> 00:11:28,730
CPU stuff that's OCI build packs and

00:11:26,750 --> 00:11:30,490
that would seem like a lot of cool stuff

00:11:28,730 --> 00:11:33,440
but one more thing

00:11:30,490 --> 00:11:35,570
it also all works on windows now which

00:11:33,440 --> 00:11:37,970
is pretty cool because it's all based on

00:11:35,570 --> 00:11:40,250
standards now because it's all glued to

00:11:37,970 --> 00:11:42,590
some low level technologies the exact

00:11:40,250 --> 00:11:45,710
same code now powers the windows Cloud

00:11:42,590 --> 00:11:47,840
Foundry stuff just instead of run see it

00:11:45,710 --> 00:11:49,790
has a plugin called wind see maybe wince

00:11:47,840 --> 00:11:54,040
I don't know if it's not already it

00:11:49,790 --> 00:11:57,650
should be so that's the cool new stuff

00:11:54,040 --> 00:11:59,570
it's quite good glue actually what's

00:11:57,650 --> 00:12:01,670
next is two things I want to talk about

00:11:59,570 --> 00:12:02,320
quickly the first is container D or

00:12:01,670 --> 00:12:04,400
container

00:12:02,320 --> 00:12:08,390
depending on how you feel about people

00:12:04,400 --> 00:12:10,610
who work on containers the second is CPU

00:12:08,390 --> 00:12:12,650
metrics and sharing just largely about

00:12:10,610 --> 00:12:14,390
me saying that what we currently have

00:12:12,650 --> 00:12:15,110
sucks and then hoping someone has a

00:12:14,390 --> 00:12:17,840
better idea

00:12:15,110 --> 00:12:19,220
so container D if you think about garden

00:12:17,840 --> 00:12:21,080
it's been a long history of deleting

00:12:19,220 --> 00:12:23,450
bits of ourselves and moving up the

00:12:21,080 --> 00:12:24,800
stack and reusing code and that's good

00:12:23,450 --> 00:12:26,660
what do we do next

00:12:24,800 --> 00:12:30,860
there's this container D thing we'd like

00:12:26,660 --> 00:12:32,060
to use that why are we doing this why do

00:12:30,860 --> 00:12:35,720
you want to pull this container D

00:12:32,060 --> 00:12:37,250
project in so it's a bit more of the

00:12:35,720 --> 00:12:39,550
code from the community that we can use

00:12:37,250 --> 00:12:42,980
right so we're already using run C

00:12:39,550 --> 00:12:44,120
container D is more of the dock oedema

00:12:42,980 --> 00:12:46,640
that's been pulled out into an

00:12:44,120 --> 00:12:48,290
unappealing aidid's piece of code it's

00:12:46,640 --> 00:12:50,480
really nice we can share that it opens

00:12:48,290 --> 00:12:52,340
up some nice deployment scenarios the

00:12:50,480 --> 00:12:54,290
thing I really like is none of the rest

00:12:52,340 --> 00:12:56,330
of Cloud Foundry needs to care you get

00:12:54,290 --> 00:12:58,700
to use the nice operator tooling that

00:12:56,330 --> 00:12:59,690
you're used to in CSer and see if AR

00:12:58,700 --> 00:13:01,790
because it's going to use the same

00:12:59,690 --> 00:13:04,040
container tech but Cloud Foundry just

00:13:01,790 --> 00:13:07,970
works and we can just pull that out it's

00:13:04,040 --> 00:13:12,890
pretty good C view metrics basically

00:13:07,970 --> 00:13:18,610
they suck we've known that CPU metrics

00:13:12,890 --> 00:13:18,610
in Cloud Foundry suck for age

00:13:18,660 --> 00:13:22,530
I thought I was feeling a bit mad

00:13:20,360 --> 00:13:24,060
because I kept saying they suck and

00:13:22,530 --> 00:13:25,650
people kept pointing out that no one

00:13:24,060 --> 00:13:27,000
seems to be complaining so why would we

00:13:25,650 --> 00:13:28,620
do anything about it

00:13:27,000 --> 00:13:32,460
now everyone seems to have noticed

00:13:28,620 --> 00:13:34,470
they've sat at the same time so in the

00:13:32,460 --> 00:13:36,510
last month approximately everyone in

00:13:34,470 --> 00:13:41,280
this room has told me that they suck and

00:13:36,510 --> 00:13:42,990
I said I know what's the problem with

00:13:41,280 --> 00:13:45,360
CPU metrics the problem basically is

00:13:42,990 --> 00:13:48,870
that there's no really great way of

00:13:45,360 --> 00:13:49,590
doing CPU metrics given how we do CPU in

00:13:48,870 --> 00:13:52,800
Cloud Foundry

00:13:49,590 --> 00:13:54,420
at the moment so at the moment the way

00:13:52,800 --> 00:13:58,500
we do see for you sharing it's really

00:13:54,420 --> 00:14:00,630
hard to know what your CPU is a

00:13:58,500 --> 00:14:02,100
percentage off because it changes all

00:14:00,630 --> 00:14:05,610
the time the amount of your app can have

00:14:02,100 --> 00:14:07,560
depending on what lands on the host all

00:14:05,610 --> 00:14:09,780
of the possible solutions to this are

00:14:07,560 --> 00:14:14,400
bad but we did really well we picked the

00:14:09,780 --> 00:14:16,470
worst like there's some rough solutions

00:14:14,400 --> 00:14:17,820
that I could think might work I think

00:14:16,470 --> 00:14:21,000
one of the things we should probably do

00:14:17,820 --> 00:14:22,350
is stop lying by using percentages if we

00:14:21,000 --> 00:14:24,120
don't have something that's a percentage

00:14:22,350 --> 00:14:26,940
I think we might just have to have a

00:14:24,120 --> 00:14:30,000
different number like absolute CPU usage

00:14:26,940 --> 00:14:31,290
how many milliseconds you've used maybe

00:14:30,000 --> 00:14:34,950
you could even build on that I don't

00:14:31,290 --> 00:14:36,720
know but definitely what we're doing and

00:14:34,950 --> 00:14:38,550
I think the reason it's so bad at the

00:14:36,720 --> 00:14:40,650
moment might also be because the actual

00:14:38,550 --> 00:14:42,600
sharing is bad so the reason we can't do

00:14:40,650 --> 00:14:44,310
good metrics is because we don't have a

00:14:42,600 --> 00:14:47,160
really great model of sharing in the CPU

00:14:44,310 --> 00:14:50,070
in the first place so at the moment we

00:14:47,160 --> 00:14:52,620
do sharing by saying well if your app is

00:14:50,070 --> 00:14:55,380
64 Meg and this person is at a 64 Meg

00:14:52,620 --> 00:14:57,510
you both get the same amount of CPU if

00:14:55,380 --> 00:15:00,330
another persons that come up comes along

00:14:57,510 --> 00:15:01,680
you all get 1/3 of the CPU that's great

00:15:00,330 --> 00:15:04,380
but it means the amount of CPU have

00:15:01,680 --> 00:15:06,090
changes all the time and you as a user

00:15:04,380 --> 00:15:09,750
can't predict while when that would

00:15:06,090 --> 00:15:12,810
happen which isn't great so maybe we can

00:15:09,750 --> 00:15:14,970
do something like have a CPU maximum

00:15:12,810 --> 00:15:16,950
that actually allows you to have a burst

00:15:14,970 --> 00:15:19,590
capacity or something like that

00:15:16,950 --> 00:15:21,180
but at the moment we're just very open

00:15:19,590 --> 00:15:24,360
to feedback about what might make sense

00:15:21,180 --> 00:15:25,620
for people the first step in solving a

00:15:24,360 --> 00:15:28,830
problem is admitting you have a problem

00:15:25,620 --> 00:15:30,720
and we have a problem with CPU metrics

00:15:28,830 --> 00:15:34,240
so

00:15:30,720 --> 00:15:36,459
yeah we'd really appreciate people's

00:15:34,240 --> 00:15:38,050
ideas and thoughts and experiences and

00:15:36,459 --> 00:15:38,980
just people telling us that yeah this is

00:15:38,050 --> 00:15:40,079
a problem for you and something we

00:15:38,980 --> 00:15:43,060
should welcome

00:15:40,079 --> 00:15:45,490
so that is around it

00:15:43,060 --> 00:15:47,309
what is garden glue it's secure defaults

00:15:45,490 --> 00:15:50,350
and it's exploiting container technology

00:15:47,309 --> 00:15:53,050
we've done some pretty cool stuff this

00:15:50,350 --> 00:15:56,709
year between thinking of really funny

00:15:53,050 --> 00:15:59,529
names for things some really big

00:15:56,709 --> 00:16:01,499
security advancements and some nice

00:15:59,529 --> 00:16:03,910
performance improvements in the platform

00:16:01,499 --> 00:16:05,309
and I think we have a couple of pretty

00:16:03,910 --> 00:16:10,389
cool things they're going to deliver

00:16:05,309 --> 00:16:12,339
some even more deletion and also some

00:16:10,389 --> 00:16:14,920
nice benefits to people so with that

00:16:12,339 --> 00:16:16,320
thank you very much we have tons of time

00:16:14,920 --> 00:16:17,699
for questions

00:16:16,320 --> 00:16:20,710
[Music]

00:16:17,699 --> 00:16:28,179
any questions

00:16:20,710 --> 00:16:28,179
[Applause]

00:16:42,240 --> 00:16:45,240
hmm

00:16:51,980 --> 00:16:57,990
yeah so so the question is with the OCI

00:16:55,890 --> 00:16:59,790
buildpack stuff is this going to affect

00:16:57,990 --> 00:17:01,500
the user interface' our users going to

00:16:59,790 --> 00:17:03,990
be able to get some new features from

00:17:01,500 --> 00:17:05,760
the OCI buildpack stuff so the first

00:17:03,990 --> 00:17:07,650
pass of Au Sable packs we just did it as

00:17:05,760 --> 00:17:10,860
a performance improvement and a

00:17:07,650 --> 00:17:12,960
simplification there are some nice

00:17:10,860 --> 00:17:15,930
things you could imagine happening give

00:17:12,960 --> 00:17:18,180
them with creating OCI images from the

00:17:15,930 --> 00:17:20,180
droplets you might be able to do some

00:17:18,180 --> 00:17:23,400
nicer workflows around

00:17:20,180 --> 00:17:25,560
converting code into containers but also

00:17:23,400 --> 00:17:29,850
around interoperability with other

00:17:25,560 --> 00:17:33,030
systems so if you are at the talk

00:17:29,850 --> 00:17:35,040
earlier about the worst name thing I've

00:17:33,030 --> 00:17:37,590
ever done which is saying a lot which is

00:17:35,040 --> 00:17:40,290
a cloud kubernetes back-end for cloud

00:17:37,590 --> 00:17:43,080
foundry which we called cube with a C

00:17:40,290 --> 00:17:45,030
which is impossible to say out loud if

00:17:43,080 --> 00:17:47,790
you add the cube with the C talk earlier

00:17:45,030 --> 00:17:50,610
this is actually based on the OCI build

00:17:47,790 --> 00:17:52,290
pack stuff so what we do is we use the

00:17:50,610 --> 00:17:55,200
OCA build pack stuff to create a

00:17:52,290 --> 00:17:57,900
registry and the registry serves images

00:17:55,200 --> 00:17:59,880
so standard container images based on

00:17:57,900 --> 00:18:02,370
your droplet and that's what we give to

00:17:59,880 --> 00:18:06,120
kubernetes so what that means is you can

00:18:02,370 --> 00:18:08,730
do a staged convert your code into

00:18:06,120 --> 00:18:10,680
droplets and then actually get a

00:18:08,730 --> 00:18:13,290
container image and you can run that

00:18:10,680 --> 00:18:15,480
anywhere for example kubernetes so

00:18:13,290 --> 00:18:19,350
that's one example of a piece of

00:18:15,480 --> 00:18:21,270
interoperability that opens up at the

00:18:19,350 --> 00:18:23,280
moment we've just done that as formal

00:18:21,270 --> 00:18:24,540
simplicity and simplicity but you can

00:18:23,280 --> 00:18:29,150
imagine that there's maybe some

00:18:24,540 --> 00:18:29,150
possibilities that we could look at next

00:18:45,950 --> 00:18:52,230
so at the moment so the current status

00:18:49,020 --> 00:18:55,590
is the the sort of MVP is done so the

00:18:52,230 --> 00:18:57,990
MVP is done in toby transparence we just

00:18:55,590 --> 00:19:00,330
create the OCA image on the fly at the

00:18:57,990 --> 00:19:02,610
moment in garden so before creating an

00:19:00,330 --> 00:19:06,539
image we just create a no CI image and

00:19:02,610 --> 00:19:09,659
pull it down and great in the future it

00:19:06,539 --> 00:19:10,980
would be very nice to pull that up so

00:19:09,659 --> 00:19:12,419
that the decision about how to create

00:19:10,980 --> 00:19:14,610
that image happens up in cloud

00:19:12,419 --> 00:19:16,230
controller and becomes a kind of policy

00:19:14,610 --> 00:19:18,950
decision instead of a scheduling

00:19:16,230 --> 00:19:21,960
decision but we haven't worked on that

00:19:18,950 --> 00:19:25,590
yet although like I say that's exactly

00:19:21,960 --> 00:19:28,679
how the cube or the C stuff works right

00:19:25,590 --> 00:19:30,600
we we did that refactor for the cube of

00:19:28,679 --> 00:19:33,270
the C stuff then that's what allows us

00:19:30,600 --> 00:19:35,640
then to just give the a go images so it

00:19:33,270 --> 00:19:38,549
means that kubernetes images so in the

00:19:35,640 --> 00:19:41,580
cube stuff we don't need to have sort of

00:19:38,549 --> 00:19:43,110
machinery for untiring stuff and all

00:19:41,580 --> 00:19:45,360
that kind of thing you just have an

00:19:43,110 --> 00:19:47,159
image which we've created a deployment

00:19:45,360 --> 00:19:49,260
object in communities with the image and

00:19:47,159 --> 00:19:53,510
it just works even though we created

00:19:49,260 --> 00:19:53,510
that image on the fly from a droplet

00:19:54,710 --> 00:19:58,590
anyone else for anything else if anyone

00:19:57,480 --> 00:19:59,789
else does have anything else really

00:19:58,590 --> 00:20:02,510
should have come to the office hours

00:19:59,789 --> 00:20:02,510
that were just before

00:20:08,870 --> 00:20:19,679
yes we are always open to pull requests

00:20:16,169 --> 00:20:20,850
and especially for key pictures I one

00:20:19,679 --> 00:20:22,700
thing I didn't mention in this talk

00:20:20,850 --> 00:20:25,830
because it feels like inside baseball

00:20:22,700 --> 00:20:29,279
and I went to my first baseball game on

00:20:25,830 --> 00:20:30,929
Sunday after I've written the talk is

00:20:29,279 --> 00:20:32,669
that we merged the two teams so used to

00:20:30,929 --> 00:20:35,730
be a separate group team and a garden

00:20:32,669 --> 00:20:38,700
team and we've now merged those back

00:20:35,730 --> 00:20:41,130
together but I'm not sure why anyone

00:20:38,700 --> 00:20:43,890
would care but we did so the group repo

00:20:41,130 --> 00:20:46,470
is is now just you just get that in

00:20:43,890 --> 00:20:51,299
garden they's always like the day a

00:20:46,470 --> 00:20:56,350
picture anyone else for anything else or

00:20:51,299 --> 00:21:01,990
were people like to get coffee coffee

00:20:56,350 --> 00:21:01,990

YouTube URL: https://www.youtube.com/watch?v=mb5VDJ_ZpvU


