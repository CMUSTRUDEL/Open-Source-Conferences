Title: State of .NET - Scott Hunter, Microsoft
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	State of .NET - Scott Hunter, Microsoft

Join Scott Hunter, Director of Program Management for .NET, as he talks about the current state and future of .NET for the enterprise. 

About Scott Hunter
Scott Hunter is the Director of Program Management for .NET. This includes the .NET Framework, .NET Core, ASP.NET, Visual Studio Tooling and much more.
Captions: 
	00:00:00,030 --> 00:00:08,690
okay hello welcome to the state of da

00:00:05,130 --> 00:00:12,000
net contrary to popular belief

00:00:08,690 --> 00:00:14,429
unfortunately I am not Scott hunter my

00:00:12,000 --> 00:00:16,890
name is Glenn Condren Scott wanted to be

00:00:14,429 --> 00:00:18,680
here today he is the director of program

00:00:16,890 --> 00:00:21,539
management for da net her Microsoft

00:00:18,680 --> 00:00:24,359
unfortunately he had an emergency at the

00:00:21,539 --> 00:00:26,430
last minute he was in the airport ready

00:00:24,359 --> 00:00:29,240
to come here and he had to and he had to

00:00:26,430 --> 00:00:34,550
leave and so I am going to do my best to

00:00:29,240 --> 00:00:38,969
fill his shoes and present in his stead

00:00:34,550 --> 00:00:42,780
hopefully we'll be able to do it as well

00:00:38,969 --> 00:00:52,530
as he would have so that is my name and

00:00:42,780 --> 00:00:53,730
my title we plug this in because not

00:00:52,530 --> 00:00:55,140
plugging in a laptop is always a

00:00:53,730 --> 00:00:57,930
terrible idea regardless of how long

00:00:55,140 --> 00:00:59,219
your talk is gonna be so I believe I was

00:00:57,930 --> 00:01:00,809
told that this has to be somewhere in

00:00:59,219 --> 00:01:02,100
every slide deck every day of every

00:01:00,809 --> 00:01:03,989
presentation that you're ever gonna see

00:01:02,100 --> 00:01:06,000
please be aware that there are fire

00:01:03,989 --> 00:01:14,570
exits and what can we and all of those

00:01:06,000 --> 00:01:14,570
things now let's talk about da net so

00:01:14,630 --> 00:01:20,009
dotnet what we're trying to what we want

00:01:18,060 --> 00:01:23,280
to don't need to be is and what it is is

00:01:20,009 --> 00:01:25,049
a platform to build anything desktop

00:01:23,280 --> 00:01:27,930
applications web applications cloud

00:01:25,049 --> 00:01:29,400
mobile gaming IOT AI like all of these

00:01:27,930 --> 00:01:31,500
workloads are things that we care about

00:01:29,400 --> 00:01:34,439
are things that you can do and things

00:01:31,500 --> 00:01:36,750
that people have been doing right we've

00:01:34,439 --> 00:01:38,040
been making investments for years lots

00:01:36,750 --> 00:01:40,320
of years and there's some slides later

00:01:38,040 --> 00:01:43,950
that talk about how old how long don't

00:01:40,320 --> 00:01:46,829
it's actually been doing this and what

00:01:43,950 --> 00:01:51,570
we've been trying to build is a unified

00:01:46,829 --> 00:01:55,740
platform designed to allow you to write

00:01:51,570 --> 00:01:57,659
code and similar code idiomatic code to

00:01:55,740 --> 00:02:00,450
do any of those workloads that you care

00:01:57,659 --> 00:02:02,219
about so that means it up the top here

00:02:00,450 --> 00:02:03,869
in this diagram you have each of the

00:02:02,219 --> 00:02:06,270
like each of the the workloads the

00:02:03,869 --> 00:02:09,060
application programming models and then

00:02:06,270 --> 00:02:11,250
you have a layer of class libraries net

00:02:09,060 --> 00:02:12,450
standard class libraries so the standard

00:02:11,250 --> 00:02:12,930
is new I'm gonna talk a little bit about

00:02:12,450 --> 00:02:13,410
it

00:02:12,930 --> 00:02:14,730
hopefully my

00:02:13,410 --> 00:02:17,790
sure everybody understands what it is

00:02:14,730 --> 00:02:20,370
but imagine net standard as the way that

00:02:17,790 --> 00:02:23,550
you get the same jsonparser

00:02:20,370 --> 00:02:27,960
on your I Oh T device as you do on your

00:02:23,550 --> 00:02:29,370
you know cloud application right so the

00:02:27,960 --> 00:02:31,350
shortest the shortest description

00:02:29,370 --> 00:02:32,700
understanding of net standard is if

00:02:31,350 --> 00:02:35,520
you're making a class library making

00:02:32,700 --> 00:02:36,960
that standard pick one and you pick the

00:02:35,520 --> 00:02:38,040
one that lets you run wherever you want

00:02:36,960 --> 00:02:39,870
we'll talk about it a bit more in a

00:02:38,040 --> 00:02:41,490
minute then underpinning all of those

00:02:39,870 --> 00:02:43,620
libraries is a bunch of infrastructure

00:02:41,490 --> 00:02:45,420
there's a so you get the same languages

00:02:43,620 --> 00:02:48,420
across all of this stack yeah C sharp F

00:02:45,420 --> 00:02:49,890
sharp VB as well as the 20 or other

00:02:48,420 --> 00:02:52,800
languages that can compile to yl

00:02:49,890 --> 00:02:54,330
theoretically right you have a you have

00:02:52,800 --> 00:02:57,960
a common set of compiler infrastructure

00:02:54,330 --> 00:03:01,020
and runtime components and then on the

00:02:57,960 --> 00:03:02,370
side you have a common tools right you

00:03:01,020 --> 00:03:03,810
can use Visual Studio for all of these

00:03:02,370 --> 00:03:05,220
things you can use Visual Studio for Mac

00:03:03,810 --> 00:03:07,860
you can use Visual Studio for code you

00:03:05,220 --> 00:03:11,070
can use the CLI right try to be a

00:03:07,860 --> 00:03:12,960
unified one unified world that's what

00:03:11,070 --> 00:03:14,520
we're trying to get to with varying

00:03:12,960 --> 00:03:18,750
degrees of success for those of you who

00:03:14,520 --> 00:03:22,230
have been following us for a while so

00:03:18,750 --> 00:03:27,150
dotnet standard tries to allow you to

00:03:22,230 --> 00:03:29,880
share code but also share binaries like

00:03:27,150 --> 00:03:31,580
literally the same thing across all of

00:03:29,880 --> 00:03:35,040
these workloads that we've cared about

00:03:31,580 --> 00:03:38,490
it's a formal specification of dotnet ap

00:03:35,040 --> 00:03:39,690
is how many of you are developers or at

00:03:38,490 --> 00:03:41,250
least would have identified as a

00:03:39,690 --> 00:03:44,239
developer before you evolved into your

00:03:41,250 --> 00:03:47,370
current glorious managerial form

00:03:44,239 --> 00:03:49,530
fantastic pretty much everybody so the

00:03:47,370 --> 00:03:50,760
great analogy the easiest analogy for

00:03:49,530 --> 00:03:54,239
the dotnet standard is that it's an

00:03:50,760 --> 00:03:56,820
interface it is an interface for a set

00:03:54,239 --> 00:03:58,980
of API is that existing net and there

00:03:56,820 --> 00:04:01,410
are various dotnet implementations that

00:03:58,980 --> 00:04:03,090
can implement that interface so don't

00:04:01,410 --> 00:04:04,350
knock implements I wonder some

00:04:03,090 --> 00:04:06,900
versions of the dotnet standard

00:04:04,350 --> 00:04:08,730
interface dotnet framework to implement

00:04:06,900 --> 00:04:11,580
some of them mono implement some of them

00:04:08,730 --> 00:04:12,750
and so on and so forth and so what you

00:04:11,580 --> 00:04:14,700
do with that standard there is a

00:04:12,750 --> 00:04:16,590
document online if you search for net

00:04:14,700 --> 00:04:18,810
standard in Modoc stop microsoft comm

00:04:16,590 --> 00:04:20,880
and there's a big table he has versions

00:04:18,810 --> 00:04:23,190
of net standard across the top it has

00:04:20,880 --> 00:04:25,950
all of the different kind of runtimes

00:04:23,190 --> 00:04:27,360
down one side you try and pick which box

00:04:25,950 --> 00:04:28,949
you want to fall in peak which

00:04:27,360 --> 00:04:30,509
forms you want to try and support and

00:04:28,949 --> 00:04:32,849
you pick in that standard version that

00:04:30,509 --> 00:04:35,009
works and then you target it and that

00:04:32,849 --> 00:04:36,539
will control what surface area you see

00:04:35,009 --> 00:04:39,240
in Visual Studio when you're trying to

00:04:36,539 --> 00:04:40,560
write code you won't see a P is that I

00:04:39,240 --> 00:04:42,930
think if they don't work on one of the

00:04:40,560 --> 00:04:44,310
platforms you want to target right and

00:04:42,930 --> 00:04:45,719
then if you do really need an API you

00:04:44,310 --> 00:04:47,400
know it exists well that's when you'll

00:04:45,719 --> 00:04:50,789
need to start writing platform specific

00:04:47,400 --> 00:04:52,889
parts Forks of your code right so that's

00:04:50,789 --> 00:04:55,080
how we're trying to let you write a

00:04:52,889 --> 00:04:56,879
single class library a single binary to

00:04:55,080 --> 00:04:58,500
run across any workload that you want if

00:04:56,879 --> 00:05:00,210
you were trying to write up the Amal

00:04:58,500 --> 00:05:03,659
Pazza because it's not a cloud

00:05:00,210 --> 00:05:05,159
application unless does Gamal then you

00:05:03,659 --> 00:05:06,810
would try you want to try and target in

00:05:05,159 --> 00:05:08,840
that standard version that works on all

00:05:06,810 --> 00:05:11,639
the platforms you care about for cloud

00:05:08,840 --> 00:05:13,110
right or maybe your Yammer parser maybe

00:05:11,639 --> 00:05:14,819
you believe that yeah more should be

00:05:13,110 --> 00:05:16,199
like the only configuration file format

00:05:14,819 --> 00:05:18,030
that exists anywhere in the world in

00:05:16,199 --> 00:05:20,069
which case you wanted to work everywhere

00:05:18,030 --> 00:05:21,779
in all of those right you want people to

00:05:20,069 --> 00:05:28,020
say that AI is an AI unless it's got

00:05:21,779 --> 00:05:29,879
some yam all right make sense cool so

00:05:28,020 --> 00:05:33,060
let's talk about the API is in that

00:05:29,879 --> 00:05:35,580
standard 2.0 there's a few versions of

00:05:33,060 --> 00:05:37,620
the net standard we basically retro

00:05:35,580 --> 00:05:39,090
actively version the net standard out so

00:05:37,620 --> 00:05:39,719
when we shipped net standard as a

00:05:39,090 --> 00:05:40,919
concept

00:05:39,719 --> 00:05:43,469
there were several versions of it

00:05:40,919 --> 00:05:47,729
already representing all the history of

00:05:43,469 --> 00:05:49,440
net okay then we ship this 201 which is

00:05:47,729 --> 00:05:51,389
a new one which had far more surface

00:05:49,440 --> 00:05:53,699
area than the than the previous versions

00:05:51,389 --> 00:05:55,919
so these are kind of some categories and

00:05:53,699 --> 00:05:58,349
Catlin types of API is data XML

00:05:55,919 --> 00:05:59,669
serialization networking alright all

00:05:58,349 --> 00:06:01,949
stuff that you've probably used or

00:05:59,669 --> 00:06:03,060
thought about in the past and there's

00:06:01,949 --> 00:06:04,860
some interesting things in here because

00:06:03,060 --> 00:06:06,389
there's stuff in here that we never had

00:06:04,860 --> 00:06:07,909
in the earlier versions of net standard

00:06:06,389 --> 00:06:12,060
of course people that were porting code

00:06:07,909 --> 00:06:13,110
to some pain so for those of you and

00:06:12,060 --> 00:06:14,849
here's a link to the doc for the dead

00:06:13,110 --> 00:06:16,349
standard for those of you who have tried

00:06:14,849 --> 00:06:18,180
to port how many of you had tried to

00:06:16,349 --> 00:06:20,159
port full framework applications over

00:06:18,180 --> 00:06:22,529
there done at core at some point so a

00:06:20,159 --> 00:06:24,930
few of you yeah and did you hit api's

00:06:22,529 --> 00:06:27,629
missing was a pre - oh and you hit like

00:06:24,930 --> 00:06:28,740
my code calls X API and it doesn't exist

00:06:27,629 --> 00:06:29,729
and I don't know what to do and I can't

00:06:28,740 --> 00:06:32,779
do this there's a few people nodding

00:06:29,729 --> 00:06:35,159
with it with nest ender 2.0 there's

00:06:32,779 --> 00:06:36,680
20,000 more api's than there were in the

00:06:35,159 --> 00:06:40,439
previous versions of nest standard

00:06:36,680 --> 00:06:42,699
significantly easier to take care

00:06:40,439 --> 00:06:45,429
don't our framework code and have it run

00:06:42,699 --> 00:06:48,999
on and have it become that standard to

00:06:45,429 --> 00:06:51,610
compliant we actually downloaded every

00:06:48,999 --> 00:06:54,519
NuGet package on new get and opened them

00:06:51,610 --> 00:06:55,959
and it's action the assembly and looked

00:06:54,519 --> 00:06:57,459
at all of the API is that they called

00:06:55,959 --> 00:06:58,839
and checked whether they happy eyes that

00:06:57,459 --> 00:07:00,969
they were calling was in that standard

00:06:58,839 --> 00:07:02,529
seventy percent of them were so seventy

00:07:00,969 --> 00:07:05,319
percent of all things on new get gorg

00:07:02,529 --> 00:07:07,479
will just work with nest and a 2.0 the

00:07:05,319 --> 00:07:09,159
rest of them have some AP is that we

00:07:07,479 --> 00:07:12,279
haven't yet made part of the standard

00:07:09,159 --> 00:07:13,779
for whatever reasons right please don't

00:07:12,279 --> 00:07:16,269
write the code that downloads all of new

00:07:13,779 --> 00:07:17,739
get you it's very very very very

00:07:16,269 --> 00:07:22,149
demanding on new get service and we

00:07:17,739 --> 00:07:23,979
found out so this was our diagram

00:07:22,149 --> 00:07:26,879
earlier this is the world this is all of

00:07:23,979 --> 00:07:30,849
your net all of this unified platform

00:07:26,879 --> 00:07:36,239
let's talk let's focus a little bit on

00:07:30,849 --> 00:07:39,939
to the donate core part of this again so

00:07:36,239 --> 00:07:43,959
dotnet core is cross-platform

00:07:39,939 --> 00:07:46,089
open-source implementation of dotnet so

00:07:43,959 --> 00:07:48,749
it implements versions of the donor

00:07:46,089 --> 00:07:52,959
standard that we just talked about right

00:07:48,749 --> 00:07:55,089
and is suited and kind of targeted at

00:07:52,959 --> 00:07:59,860
cloud native cross-platform

00:07:55,089 --> 00:08:01,269
IOT AI right however the very beginning

00:07:59,860 --> 00:08:02,529
for those of you who may be a bit

00:08:01,269 --> 00:08:04,029
following on we've gotten that core for

00:08:02,529 --> 00:08:07,239
a long time it really kind of started

00:08:04,029 --> 00:08:09,339
out with a with say web and cloud right

00:08:07,239 --> 00:08:11,829
like was very targeted and which been

00:08:09,339 --> 00:08:13,389
slowly kind of building out to more and

00:08:11,829 --> 00:08:15,159
more of these workloads at the top as

00:08:13,389 --> 00:08:16,419
we've been progressing and working and

00:08:15,159 --> 00:08:19,929
doing more things and things become

00:08:16,419 --> 00:08:22,509
important but it and it is built upon

00:08:19,929 --> 00:08:23,860
the same set of common libraries as

00:08:22,509 --> 00:08:25,779
everybody else the same runtime

00:08:23,860 --> 00:08:33,159
components the same compilers the same

00:08:25,779 --> 00:08:36,149
the same languages right and it has been

00:08:33,159 --> 00:08:40,750
growing so this slide is a little bit

00:08:36,149 --> 00:08:42,759
old I believe since we shipped since we

00:08:40,750 --> 00:08:44,670
shipped as of February 2018

00:08:42,759 --> 00:08:47,559
this is I'm looking at my notes again

00:08:44,670 --> 00:08:50,529
with just the web work load of don't net

00:08:47,559 --> 00:08:53,259
core so just people making web the web

00:08:50,529 --> 00:08:53,620
parts of it there's half of there was

00:08:53,259 --> 00:08:56,320
half

00:08:53,620 --> 00:08:57,910
million active net developer active done

00:08:56,320 --> 00:09:00,100
their core developers people making web

00:08:57,910 --> 00:09:02,470
passwords on their core and there is

00:09:00,100 --> 00:09:05,860
double figure percentage month over

00:09:02,470 --> 00:09:08,440
month growth since we ship to o in

00:09:05,860 --> 00:09:12,250
August so it grows by more than 10

00:09:08,440 --> 00:09:13,690
percent every month that number I think

00:09:12,250 --> 00:09:16,480
the last time I looked at this data it

00:09:13,690 --> 00:09:17,980
was min the mid 700 thousandth and we

00:09:16,480 --> 00:09:20,200
expect will hit will be more than a

00:09:17,980 --> 00:09:22,600
million individual developers using

00:09:20,200 --> 00:09:25,990
Donna core before the kind of the end of

00:09:22,600 --> 00:09:27,880
the year the active here means you'll be

00:09:25,990 --> 00:09:29,440
doing it more than once you have to have

00:09:27,880 --> 00:09:30,940
gone and like created a project and then

00:09:29,440 --> 00:09:32,470
like gone and opened it again later

00:09:30,940 --> 00:09:33,670
not just like created a project and then

00:09:32,470 --> 00:09:36,550
deleted it you that doesn't count in

00:09:33,670 --> 00:09:37,690
this number the number gets much bigger

00:09:36,550 --> 00:09:39,420
if you count everybody who's just

00:09:37,690 --> 00:09:43,870
created a project like it's millions

00:09:39,420 --> 00:09:45,880
okay so loud there we're so we're fairly

00:09:43,870 --> 00:09:48,220
confident that and at the same time as

00:09:45,880 --> 00:09:50,560
this this we're talking about done their

00:09:48,220 --> 00:09:51,850
core here but I believe the design their

00:09:50,560 --> 00:09:54,430
framework numbers we're kind of growing

00:09:51,850 --> 00:09:56,020
as well not as such a large right but

00:09:54,430 --> 00:09:58,420
they're growing like in general is

00:09:56,020 --> 00:10:00,970
growing and dot the core very very fast

00:09:58,420 --> 00:10:04,480
and part of that reason maybe because it

00:10:00,970 --> 00:10:05,950
is very very fast so this is data

00:10:04,480 --> 00:10:09,490
collected from our tech and power

00:10:05,950 --> 00:10:10,660
benchmarks it shows the plain text these

00:10:09,490 --> 00:10:12,700
numbers I believe is specifically from

00:10:10,660 --> 00:10:15,940
the plain text benchmark which benchmark

00:10:12,700 --> 00:10:19,150
which is how fast can the server return

00:10:15,940 --> 00:10:20,440
text from a request effectively all

00:10:19,150 --> 00:10:22,630
right what is the like what optimal

00:10:20,440 --> 00:10:23,890
thing you can write to get text back so

00:10:22,630 --> 00:10:26,470
it's not even doing anything there's no

00:10:23,890 --> 00:10:28,450
data there's nothing right this is just

00:10:26,470 --> 00:10:31,420
what overhead does the minimal amount of

00:10:28,450 --> 00:10:33,279
your framework give you right because

00:10:31,420 --> 00:10:34,870
the hollow of this number is the less

00:10:33,279 --> 00:10:36,790
room you've got once you put data access

00:10:34,870 --> 00:10:37,959
in here this thing like tanks right at

00:10:36,790 --> 00:10:39,430
for everybody because now you're doing

00:10:37,959 --> 00:10:43,390
Network calls every request and things

00:10:39,430 --> 00:10:45,400
like that right so the last round we had

00:10:43,390 --> 00:10:47,740
this is roughly where out where a 1.71

00:10:45,400 --> 00:10:51,459
million requests per second on asp.net

00:10:47,740 --> 00:10:55,029
core the node sample is zero point four

00:10:51,459 --> 00:10:57,220
three million Java servlet is 0.96

00:10:55,029 --> 00:11:00,750
we're not the fastest in here there's a

00:10:57,220 --> 00:11:03,280
few things that are faster than us but

00:11:00,750 --> 00:11:05,170
this example here from Raygun is kind of

00:11:03,280 --> 00:11:06,550
telling right so with the same size

00:11:05,170 --> 00:11:08,589
server they

00:11:06,550 --> 00:11:12,519
go from a thousand requests a second per

00:11:08,589 --> 00:11:15,040
node with no js' to 20,000 requests per

00:11:12,519 --> 00:11:19,360
second with donek or with the same set

00:11:15,040 --> 00:11:20,649
of infrastructure and you can go check

00:11:19,360 --> 00:11:22,149
out if you go check out the dotnet

00:11:20,649 --> 00:11:23,529
button you can go check out the tech and

00:11:22,149 --> 00:11:26,140
power benchmarks and look at all this

00:11:23,529 --> 00:11:28,329
data and we believe that we've done that

00:11:26,140 --> 00:11:31,209
call 2.1 we're probably going to be

00:11:28,329 --> 00:11:33,670
about 15% faster again

00:11:31,209 --> 00:11:35,560
in fact these notes come from coming

00:11:33,670 --> 00:11:37,570
from Scott hunter in all caps says we

00:11:35,560 --> 00:11:40,329
will be the fastest mainstream web stack

00:11:37,570 --> 00:11:42,190
on the planet and that is the kind of

00:11:40,329 --> 00:11:43,779
motivating factor that the mandate that

00:11:42,190 --> 00:11:46,209
is being that has been coming down like

00:11:43,779 --> 00:11:48,010
we want to be the fastest real stack

00:11:46,209 --> 00:11:50,890
that you can use right there's always

00:11:48,010 --> 00:11:52,420
going to be like someone's like twe that

00:11:50,890 --> 00:11:56,160
no one really uses that is super fast

00:11:52,420 --> 00:11:58,540
and rittany assembly or something and

00:11:56,160 --> 00:11:59,950
maybe they move they may they may they

00:11:58,540 --> 00:12:01,810
may always exist but we want to be the

00:11:59,950 --> 00:12:03,790
real a real framework that people really

00:12:01,810 --> 00:12:05,380
use for real things today we want to be

00:12:03,790 --> 00:12:08,290
the fastest one of those that's what

00:12:05,380 --> 00:12:09,430
we're trying to do and we'll see

00:12:08,290 --> 00:12:10,630
there'll be a fair amount of stuff in

00:12:09,430 --> 00:12:12,550
this deck that we're talk about about

00:12:10,630 --> 00:12:16,589
how successful we are that and the sorts

00:12:12,550 --> 00:12:18,430
of things we're doing so in this slide

00:12:16,589 --> 00:12:21,220
we're gonna - we're talking about a

00:12:18,430 --> 00:12:22,510
bunch of the work that we have one of

00:12:21,220 --> 00:12:27,940
the interesting things actually with

00:12:22,510 --> 00:12:29,950
that Tekken power benchmark we had a the

00:12:27,940 --> 00:12:31,990
Tekken Power Team so there's this quote

00:12:29,950 --> 00:12:33,550
here which said we're one of the most

00:12:31,990 --> 00:12:35,770
interesting web development platforms

00:12:33,550 --> 00:12:37,600
from the Tekken Power Team it's part of

00:12:35,770 --> 00:12:38,920
that statement they said in round 11 the

00:12:37,600 --> 00:12:40,630
way Tekken power works is they do a

00:12:38,920 --> 00:12:42,220
round and then some months later they'll

00:12:40,630 --> 00:12:43,720
do another round everybody updates all

00:12:42,220 --> 00:12:46,750
their stuff to their latest thing right

00:12:43,720 --> 00:12:49,290
so there's rounds in round 11 they were

00:12:46,750 --> 00:12:53,050
on Linux with mono Don that framework

00:12:49,290 --> 00:12:57,730
then asp.net could do 2120 requests a

00:12:53,050 --> 00:13:00,430
second by round 13 with asp net core we

00:12:57,730 --> 00:13:02,920
did 1.8 million requests per second

00:13:00,430 --> 00:13:04,540
which is about an eighty-five thousand

00:13:02,920 --> 00:13:05,920
nine hundred percent increase in

00:13:04,540 --> 00:13:07,930
requests per second performance

00:13:05,920 --> 00:13:13,240
improvement right eight hundred fifty

00:13:07,930 --> 00:13:14,620
nine times kind of roughly and we a lot

00:13:13,240 --> 00:13:15,940
of work to make that happen so here's

00:13:14,620 --> 00:13:20,440
some examples of some of the stuff we're

00:13:15,940 --> 00:13:22,270
doing in core FX we now have into this

00:13:20,440 --> 00:13:24,340
one specific stuff in gray so this is

00:13:22,270 --> 00:13:28,150
this is on top of that quote that I just

00:13:24,340 --> 00:13:30,130
talked about we have new ways of getting

00:13:28,150 --> 00:13:31,930
fast safer faster memory access with

00:13:30,130 --> 00:13:34,810
span of T in memory of T and friends

00:13:31,930 --> 00:13:38,890
these are ways to do allocation less

00:13:34,810 --> 00:13:41,770
like less allocation e operations over

00:13:38,890 --> 00:13:44,320
data so imagine the example I like to

00:13:41,770 --> 00:13:46,210
give here imagine the data comes in your

00:13:44,320 --> 00:13:48,190
request data comes in alright we're

00:13:46,210 --> 00:13:50,950
gonna go make a HTTP context like a type

00:13:48,190 --> 00:13:53,680
representing this request every time we

00:13:50,950 --> 00:13:55,600
like make a string there's an allocation

00:13:53,680 --> 00:13:57,850
great that's using some amount of memory

00:13:55,600 --> 00:14:00,550
if we make 50 strings as 50 strings

00:13:57,850 --> 00:14:02,230
worth of memory if we make 50 strings

00:14:00,550 --> 00:14:03,820
and then they go away after you a short

00:14:02,230 --> 00:14:05,130
request eventually the garbage collector

00:14:03,820 --> 00:14:07,270
has to come along and clean those up

00:14:05,130 --> 00:14:10,570
every time the garbage collector runs

00:14:07,270 --> 00:14:14,050
everything stops if you're going to do

00:14:10,570 --> 00:14:16,480
two million requests a second then a

00:14:14,050 --> 00:14:18,370
nanosecond a millisecond of time in

00:14:16,480 --> 00:14:20,380
garbage collection is actually a

00:14:18,370 --> 00:14:23,680
significant number of requests that you

00:14:20,380 --> 00:14:26,230
can no longer handle so we at our layer

00:14:23,680 --> 00:14:28,390
of the stack are trying to remove as

00:14:26,230 --> 00:14:30,310
many allocations as possible so we don't

00:14:28,390 --> 00:14:31,960
use up as much as it may we use as

00:14:30,310 --> 00:14:34,360
little memory as possible to avoid

00:14:31,960 --> 00:14:36,130
garbage collection to avoid like large

00:14:34,360 --> 00:14:37,720
processes running to make which

00:14:36,130 --> 00:14:39,520
submitting turn also makes us

00:14:37,720 --> 00:14:41,920
significantly faster from a request per

00:14:39,520 --> 00:14:43,150
second standpoint which then gives you a

00:14:41,920 --> 00:14:45,840
really big ceiling to be able to

00:14:43,150 --> 00:14:48,160
allocate to your heart's content right

00:14:45,840 --> 00:14:51,910
that's okay there's a lot of

00:14:48,160 --> 00:14:54,940
improvements and there is this profile

00:14:51,910 --> 00:14:57,460
guided optimization which lets you let

00:14:54,940 --> 00:15:01,390
you use better optimized native code so

00:14:57,460 --> 00:15:02,940
there's a blog post let me talk about

00:15:01,390 --> 00:15:06,700
some of this there's a great blog post

00:15:02,940 --> 00:15:08,710
you guys should go look at it's here at

00:15:06,700 --> 00:15:12,100
on the dotnet blog if you search for

00:15:08,710 --> 00:15:15,310
performance and Donette core 2.1 so this

00:15:12,100 --> 00:15:17,230
this is an example this is a sample

00:15:15,310 --> 00:15:21,220
application that makes lots of outgoing

00:15:17,230 --> 00:15:22,080
HTTP requests all right I can't see oh

00:15:21,220 --> 00:15:25,390
I'm sorry

00:15:22,080 --> 00:15:30,339
quite a while you can't see because it's

00:15:25,390 --> 00:15:34,050
extended that seems a suboptimal all

00:15:30,339 --> 00:15:39,940
right so this is showing

00:15:34,050 --> 00:15:42,070
outgoing HTTP so in dotnet core 2.0 this

00:15:39,940 --> 00:15:43,810
makes lots and lots of outgoing HTTP

00:15:42,070 --> 00:15:47,680
course is what this benchmark is doing

00:15:43,810 --> 00:15:49,060
right so we've done the core 2.0 this I

00:15:47,680 --> 00:15:53,830
don't remember how many requests he's

00:15:49,060 --> 00:15:56,620
making like thousands several hundreds

00:15:53,830 --> 00:15:59,200
of hundreds of concurrent requests so on

00:15:56,620 --> 00:16:01,180
he in.net core 2.0 this took on average

00:15:59,200 --> 00:16:04,240
a couple of hundred milliseconds there

00:16:01,180 --> 00:16:05,890
was twelve hundred and two like 1250 gen

00:16:04,240 --> 00:16:06,490
zero garbage collections and three

00:16:05,890 --> 00:16:09,280
hundred and twelve

00:16:06,490 --> 00:16:11,710
gen one garbage collections right on oh

00:16:09,280 --> 00:16:14,230
sorry oh the this the gens zero and Jim

00:16:11,710 --> 00:16:17,410
one so it's right into point one that

00:16:14,230 --> 00:16:20,860
drops to 17 milliseconds right for the

00:16:17,410 --> 00:16:23,350
same amount of going HTTP and there is

00:16:20,860 --> 00:16:24,670
no gen one like none of the memory moved

00:16:23,350 --> 00:16:26,050
over to Jim one which will take a longer

00:16:24,670 --> 00:16:29,950
before I guess garbage collected right

00:16:26,050 --> 00:16:31,840
there's a bunch of if you start going

00:16:29,950 --> 00:16:33,940
through here these are just massive

00:16:31,840 --> 00:16:35,770
amounts of micro benchmarks right string

00:16:33,940 --> 00:16:37,720
dot equals got faster and allocates less

00:16:35,770 --> 00:16:39,820
stringbuilder got faster and allocates

00:16:37,720 --> 00:16:41,920
less we generate better assembly code

00:16:39,820 --> 00:16:45,550
from various different ways of doing for

00:16:41,920 --> 00:16:48,130
different from various examples any of

00:16:45,550 --> 00:16:50,440
you who want to like geek out and say

00:16:48,130 --> 00:16:51,610
like hey this stuff is really cool and

00:16:50,440 --> 00:16:53,530
look at all these like nanosecond

00:16:51,610 --> 00:16:55,510
improvements across the entire stack

00:16:53,530 --> 00:16:57,970
this is a great blog post to go and read

00:16:55,510 --> 00:16:59,620
and think about and a lot of these like

00:16:57,970 --> 00:17:02,500
a lot of the jet improvements for

00:16:59,620 --> 00:17:04,180
example you kind of get pretty much

00:17:02,500 --> 00:17:06,220
wherever you are right like a lot of

00:17:04,180 --> 00:17:08,290
those improvements you get across that

00:17:06,220 --> 00:17:09,670
unified stack we talked about all the

00:17:08,290 --> 00:17:11,260
parts that are common you get a lot of

00:17:09,670 --> 00:17:12,970
these improvements and I'll just start

00:17:11,260 --> 00:17:15,030
happening right string dot equals will

00:17:12,970 --> 00:17:18,720
just suddenly be faster in the future

00:17:15,030 --> 00:17:20,770
right and a lot of that is because we

00:17:18,720 --> 00:17:22,510
some of that at least is because we've

00:17:20,770 --> 00:17:23,949
introduced these new like span memory of

00:17:22,510 --> 00:17:27,160
T things and then we build all of our

00:17:23,949 --> 00:17:29,080
all of our modify our own ap is to then

00:17:27,160 --> 00:17:30,430
use them so they allocate less memory so

00:17:29,080 --> 00:17:32,890
they cost less garbage collections so

00:17:30,430 --> 00:17:34,630
you get more speed right or you know we

00:17:32,890 --> 00:17:36,880
get the JIT to make more efficient you

00:17:34,630 --> 00:17:38,860
know more efficient code from yours and

00:17:36,880 --> 00:17:40,210
then it becomes faster right like lots

00:17:38,860 --> 00:17:42,840
and lots of various ways that blog post

00:17:40,210 --> 00:17:46,000
details the wall it's kind of amazing

00:17:42,840 --> 00:17:47,270
so these are our themes for Donaire core

00:17:46,000 --> 00:17:49,520
2.1

00:17:47,270 --> 00:17:51,260
better build performance we want to

00:17:49,520 --> 00:17:53,480
close just gaps you know you spin a core

00:17:51,260 --> 00:17:54,559
and EF just make them better things that

00:17:53,480 --> 00:17:56,840
we should have done that we haven't done

00:17:54,559 --> 00:17:58,429
obvious stuff prove some compatibility

00:17:56,840 --> 00:18:00,770
we've done it framework we have some

00:17:58,429 --> 00:18:02,600
gdpr and security work there's some

00:18:00,770 --> 00:18:05,990
micro services and as yet kind of focus

00:18:02,600 --> 00:18:07,669
T features and better basically faster

00:18:05,990 --> 00:18:10,039
internal engineering system is just like

00:18:07,669 --> 00:18:11,240
we had to do stuff to make a stable to

00:18:10,039 --> 00:18:12,529
build better to be able to get you build

00:18:11,240 --> 00:18:15,740
faster things like that it's the

00:18:12,529 --> 00:18:17,929
internal kind of tasks work there's a

00:18:15,740 --> 00:18:20,799
link here to the previews have any of

00:18:17,929 --> 00:18:23,240
you tried don't they call 2.1 previews a

00:18:20,799 --> 00:18:26,299
couple of you only yeah great

00:18:23,240 --> 00:18:28,520
try the preview for me tell me if it

00:18:26,299 --> 00:18:30,529
works more importantly if you try the

00:18:28,520 --> 00:18:32,149
preview and you cannot get it to work

00:18:30,529 --> 00:18:33,919
for some reason or you hit some point

00:18:32,149 --> 00:18:34,909
where you're like I hate you Microsoft

00:18:33,919 --> 00:18:37,340
like this is too hard

00:18:34,909 --> 00:18:40,000
go make an issue for that to put it on

00:18:37,340 --> 00:18:43,070
the home repo tell us about it

00:18:40,000 --> 00:18:44,840
our previews are only valuable if you

00:18:43,070 --> 00:18:45,980
people are trying them and telling us

00:18:44,840 --> 00:18:49,130
what we're doing right and telling us

00:18:45,980 --> 00:18:51,500
what we're doing wrong if it gets to an

00:18:49,130 --> 00:18:53,480
IC and an RT m and then you try it and

00:18:51,500 --> 00:18:54,919
you go all this API this new API is dumb

00:18:53,480 --> 00:18:57,980
it doesn't do it what I want and we're

00:18:54,919 --> 00:19:00,620
like oh yeah we haven't thought about

00:18:57,980 --> 00:19:03,679
that but it's too late now or something

00:19:00,620 --> 00:19:05,090
like that right the easiest and best way

00:19:03,679 --> 00:19:06,620
you can make sure that all of our new

00:19:05,090 --> 00:19:08,570
stuff is suitable for you is to try it

00:19:06,620 --> 00:19:10,250
early and tell us and let us try and

00:19:08,570 --> 00:19:13,720
respond to that feedback and we need as

00:19:10,250 --> 00:19:18,500
much of it as we can get talk to us more

00:19:13,720 --> 00:19:20,570
if you can't so let's talk about build

00:19:18,500 --> 00:19:24,230
and tooling in to build improvement this

00:19:20,570 --> 00:19:26,720
is the purple big bar is Donetsk or 2.0

00:19:24,230 --> 00:19:27,890
the blue bar is the 2.1 preview and the

00:19:26,720 --> 00:19:31,399
green bar is what we think it'll be in

00:19:27,890 --> 00:19:33,200
2.1 RTM the web small is just like a

00:19:31,399 --> 00:19:35,330
fairly small like new like 20 web

00:19:33,200 --> 00:19:37,070
application just file new web large is

00:19:35,330 --> 00:19:38,919
trying to simulate a big real kind of

00:19:37,070 --> 00:19:42,350
web application doing lots of stuff

00:19:38,919 --> 00:19:44,330
that's sixty nine point nine is in I

00:19:42,350 --> 00:19:47,149
believe this is in seconds yeah time in

00:19:44,330 --> 00:19:51,529
seconds so web large in 2.0 took 70

00:19:47,149 --> 00:19:53,570
seconds to build when there was no

00:19:51,529 --> 00:19:56,330
incremental build so presumably this is

00:19:53,570 --> 00:19:58,370
build with no changes made right and

00:19:56,330 --> 00:20:00,880
then down to twenty two point five in

00:19:58,370 --> 00:20:03,580
preview one and then down to

00:20:00,880 --> 00:20:06,630
point eight in green faster and faster

00:20:03,580 --> 00:20:10,060
and faster as fast as we can make it

00:20:06,630 --> 00:20:12,940
then here is kind of a big laundry list

00:20:10,060 --> 00:20:14,230
of stuff things that we're doing some of

00:20:12,940 --> 00:20:16,120
this stuff is really important

00:20:14,230 --> 00:20:18,340
span of T and memory of T we kind of

00:20:16,120 --> 00:20:19,600
talked about this tensor of T starting

00:20:18,340 --> 00:20:22,090
to build in to build a I have two

00:20:19,600 --> 00:20:23,740
concepts into the into the framework we

00:20:22,090 --> 00:20:26,980
have windows compatibility packs where

00:20:23,740 --> 00:20:28,990
it's like Oh compatibility packs are

00:20:26,980 --> 00:20:32,410
basically packages you can install that

00:20:28,990 --> 00:20:34,870
give you more of the api's you had on

00:20:32,410 --> 00:20:37,120
destined net framework they'll only

00:20:34,870 --> 00:20:38,980
typically only work on Windows so it

00:20:37,120 --> 00:20:40,780
lets you like take a dotnet core apps

00:20:38,980 --> 00:20:42,580
I'm okay with it only working on Windows

00:20:40,780 --> 00:20:43,330
because I need these API is too poor I'm

00:20:42,580 --> 00:20:45,160
just going to install these

00:20:43,330 --> 00:20:46,570
compatibility packs and get them so that

00:20:45,160 --> 00:20:48,280
I can so that I can keep working right

00:20:46,570 --> 00:20:49,930
they're not part of core Core because

00:20:48,280 --> 00:20:53,410
core has to be cross-platform right like

00:20:49,930 --> 00:20:55,090
you those things have to happen sockets

00:20:53,410 --> 00:20:58,360
high in high-performance networking in

00:20:55,090 --> 00:21:00,130
in kestrel so kestrel historically

00:20:58,360 --> 00:21:02,560
kestrel is our web server the thing that

00:21:00,130 --> 00:21:04,660
accepts requests and does its job it was

00:21:02,560 --> 00:21:07,950
built on libuv we're doing a lot of work

00:21:04,660 --> 00:21:10,630
in getting it to work on sockets and

00:21:07,950 --> 00:21:14,020
actually getting faster when using

00:21:10,630 --> 00:21:17,890
sockets than what it was using libuv so

00:21:14,020 --> 00:21:19,540
that'll be I think HTTP client is that

00:21:17,890 --> 00:21:21,610
outgoing HTTP that we showed earlier

00:21:19,540 --> 00:21:24,490
where it was significantly faster

00:21:21,610 --> 00:21:26,890
that's roughly ten times faster to make

00:21:24,490 --> 00:21:28,990
HTTP calls from your application to some

00:21:26,890 --> 00:21:30,970
other HTTP endpoint and what we did

00:21:28,990 --> 00:21:33,340
there is HTTP client is effectively a

00:21:30,970 --> 00:21:35,770
thin wrapper over a native code like

00:21:33,340 --> 00:21:40,080
HTTP on Windows and Lib curl on Linux

00:21:35,770 --> 00:21:42,790
and we replace that with all c-sharp and

00:21:40,080 --> 00:21:45,190
calling just system API is I just wrote

00:21:42,790 --> 00:21:46,720
it in dotnet and it's now ten times

00:21:45,190 --> 00:21:51,610
faster than what it was when it was

00:21:46,720 --> 00:21:53,500
provoking into HTTP and Lib curl which

00:21:51,610 --> 00:21:54,850
is great and then we did some more

00:21:53,500 --> 00:21:56,710
crypto work we're gonna be starting to

00:21:54,850 --> 00:21:58,000
do get package signing we did some

00:21:56,710 --> 00:22:00,130
foreground work when you get a package

00:21:58,000 --> 00:22:02,470
signing minor version role Ford is

00:22:00,130 --> 00:22:06,130
interesting this will be like the

00:22:02,470 --> 00:22:08,800
ability to if if you install 2.1 on a

00:22:06,130 --> 00:22:11,530
server and then later on remove 2.0 the

00:22:08,800 --> 00:22:13,450
2.0 apps will start working on 2.1 if

00:22:11,530 --> 00:22:14,080
there's no 2.0 if you leave 2.0 it'll

00:22:13,450 --> 00:22:15,850
stay running on

00:22:14,080 --> 00:22:18,490
we know right so it gives you an ability

00:22:15,850 --> 00:22:20,440
kind of as an ops level to just kind of

00:22:18,490 --> 00:22:21,940
force people to roll forward if it's

00:22:20,440 --> 00:22:25,750
gonna work without necessarily really

00:22:21,940 --> 00:22:27,040
point people like as your app service

00:22:25,750 --> 00:22:28,690
care about that a lot because they want

00:22:27,040 --> 00:22:30,970
to kind of keep the versions installed

00:22:28,690 --> 00:22:32,650
on the machine low whilst while still by

00:22:30,970 --> 00:22:34,270
not breaking applications ideally right

00:22:32,650 --> 00:22:36,250
so once they get to the end of support

00:22:34,270 --> 00:22:37,090
of - oh they can install 2.1

00:22:36,250 --> 00:22:38,920
applications won't necessarily

00:22:37,090 --> 00:22:40,150
immediately break at least not every

00:22:38,920 --> 00:22:42,730
application in the world which is what

00:22:40,150 --> 00:22:46,980
would have happened and this framework

00:22:42,730 --> 00:22:49,120
concept for asp net core in the sdk

00:22:46,980 --> 00:22:50,410
historically we always shipped we ship a

00:22:49,120 --> 00:22:52,000
spinet core and don't that korres

00:22:50,410 --> 00:22:54,400
packages on you get all you pick the

00:22:52,000 --> 00:22:56,410
packages you want it's super compelling

00:22:54,400 --> 00:22:58,300
story right it's like I find one XML

00:22:56,410 --> 00:23:00,040
let's add the XML thing if I want like

00:22:58,300 --> 00:23:02,110
Yammer I'll add the Amal thing if I want

00:23:00,040 --> 00:23:03,610
this thing I want that thing it's great

00:23:02,110 --> 00:23:04,600
right you pick what you want you only

00:23:03,610 --> 00:23:06,460
pay for what you want everything's

00:23:04,600 --> 00:23:08,440
amazing except when you have to reason

00:23:06,460 --> 00:23:09,850
about the 3,000 packages that make up

00:23:08,440 --> 00:23:11,770
the dotnet ecosystem and decide which

00:23:09,850 --> 00:23:13,300
ones you want that points tastic become

00:23:11,770 --> 00:23:16,810
a little bit overwhelming for most

00:23:13,300 --> 00:23:19,270
people so what we're trying to end it's

00:23:16,810 --> 00:23:20,320
super slowly download them right talking

00:23:19,270 --> 00:23:22,510
to my friends back in Australia

00:23:20,320 --> 00:23:23,950
Australia Internet you may not know this

00:23:22,510 --> 00:23:26,230
Australian Internet is implemented by

00:23:23,950 --> 00:23:27,580
printing out TCP packets taping them to

00:23:26,230 --> 00:23:30,270
the back of turtles and then sending

00:23:27,580 --> 00:23:30,270
them to America

00:23:31,050 --> 00:23:35,020
although I think recently they upgraded

00:23:33,400 --> 00:23:36,400
so now they use sharks to make sure the

00:23:35,020 --> 00:23:39,160
internet in Australia is as dangerous as

00:23:36,400 --> 00:23:40,810
everything else but when you're in a

00:23:39,160 --> 00:23:42,790
country like that and you need to do a

00:23:40,810 --> 00:23:44,350
package restore and download a few

00:23:42,790 --> 00:23:46,060
hundred packages that can take a really

00:23:44,350 --> 00:23:48,490
long time and it just significantly

00:23:46,060 --> 00:23:50,260
impacts your experience so we have been

00:23:48,490 --> 00:23:51,700
for several versions trying to get to

00:23:50,260 --> 00:23:53,260
the point of like giving you what we

00:23:51,700 --> 00:23:56,100
know you probably want all the time

00:23:53,260 --> 00:23:58,690
without you having to think about it and

00:23:56,100 --> 00:24:00,130
also trying to give you choice to like

00:23:58,690 --> 00:24:01,660
choose what you want to get pay for play

00:24:00,130 --> 00:24:03,370
and playing around with these ideas to

00:24:01,660 --> 00:24:04,930
try and get you to that point because

00:24:03,370 --> 00:24:07,240
ideally what you kind of want to do is

00:24:04,930 --> 00:24:08,980
say I want to one go and then make it

00:24:07,240 --> 00:24:10,390
like as optimized as you can don't do

00:24:08,980 --> 00:24:11,710
stuff don't do pulling stuff that I'm

00:24:10,390 --> 00:24:13,180
not going to use things like that right

00:24:11,710 --> 00:24:15,760
that's what we're trying to get to by

00:24:13,180 --> 00:24:17,380
making asp.net and more of an SDK a

00:24:15,760 --> 00:24:18,670
shared framework it'll just be installed

00:24:17,380 --> 00:24:20,080
when you install dotnet it'll be

00:24:18,670 --> 00:24:22,720
optimized for the machine at a time

00:24:20,080 --> 00:24:24,820
right and away you go

00:24:22,720 --> 00:24:26,320
as well as giving you the option of

00:24:24,820 --> 00:24:27,890
doing things like standalone where you

00:24:26,320 --> 00:24:30,110
carry the CLR with you and

00:24:27,890 --> 00:24:32,000
individual packages and letting you have

00:24:30,110 --> 00:24:33,860
all the choices and making this nice

00:24:32,000 --> 00:24:36,140
happy path where most of the time you

00:24:33,860 --> 00:24:37,310
just say I want a 2.1 make it fast make

00:24:36,140 --> 00:24:38,630
a good go I don't care

00:24:37,310 --> 00:24:43,310
hundred megabytes doesn't worry me I'll

00:24:38,630 --> 00:24:45,680
install it right and then there's a

00:24:43,310 --> 00:24:47,710
bunch of done s CLI improvements in all

00:24:45,680 --> 00:24:50,480
the provements we started to talk about

00:24:47,710 --> 00:24:52,040
global tools is a very cool feature so

00:24:50,480 --> 00:24:54,020
this is for any of you who views node

00:24:52,040 --> 00:24:56,120
how many of you use node probably a few

00:24:54,020 --> 00:24:59,030
of us pursue this is kind of MPM install

00:24:56,120 --> 00:25:00,680
- G for dotnet so you can build a dotnet

00:24:59,030 --> 00:25:02,090
core command like console application

00:25:00,680 --> 00:25:03,500
you could publish it to NuGet and then

00:25:02,090 --> 00:25:04,880
you can do dotnet install and then it'll

00:25:03,500 --> 00:25:06,920
be on your command line on your path and

00:25:04,880 --> 00:25:08,930
you can go run it right that's what

00:25:06,920 --> 00:25:12,260
that's what this kind of is lets us ship

00:25:08,930 --> 00:25:13,850
kind of more more tools faster lets you

00:25:12,260 --> 00:25:15,680
shoot more tools faster it's kind of

00:25:13,850 --> 00:25:17,570
good a standalone app servicing is

00:25:15,680 --> 00:25:19,130
interesting how many of you are familiar

00:25:17,570 --> 00:25:21,350
with standalone there's a concept in

00:25:19,130 --> 00:25:23,690
their core a few of you me a couple like

00:25:21,350 --> 00:25:25,780
one or two okay standalone dinah core

00:25:23,690 --> 00:25:27,920
applications that you take the CLR

00:25:25,780 --> 00:25:30,290
absolutely everything you need to run an

00:25:27,920 --> 00:25:32,300
application put into the deployer so

00:25:30,290 --> 00:25:35,480
when you go publish you get a folder it

00:25:32,300 --> 00:25:37,580
has the CLR in it it has everything you

00:25:35,480 --> 00:25:39,110
need to run your application within that

00:25:37,580 --> 00:25:40,430
folder with nothing installed on the

00:25:39,110 --> 00:25:42,860
machine as long as you're on a version

00:25:40,430 --> 00:25:44,450
of Windows or Linux is supported by the

00:25:42,860 --> 00:25:46,640
actual runtime right it puts everything

00:25:44,450 --> 00:25:48,200
in that directory and then you run it's

00:25:46,640 --> 00:25:50,360
isolated forever right

00:25:48,200 --> 00:25:51,710
that's great everybody thinks that's

00:25:50,360 --> 00:25:52,970
great but they need to play that to a

00:25:51,710 --> 00:25:54,530
server and you're like well it would be

00:25:52,970 --> 00:25:56,600
nice though now I've got ten standalone

00:25:54,530 --> 00:25:58,910
applications kind of nice to roll them

00:25:56,600 --> 00:26:01,040
all over the 2.0 point X because there's

00:25:58,910 --> 00:26:02,270
this security vulnerability l1 and then

00:26:01,040 --> 00:26:04,490
we're like well it's standalone go

00:26:02,270 --> 00:26:05,800
redeploy them all right that's what you

00:26:04,490 --> 00:26:08,720
asked for

00:26:05,800 --> 00:26:11,630
so now we're trying to build in support

00:26:08,720 --> 00:26:13,610
for those people to say okay yeah we did

00:26:11,630 --> 00:26:14,720
kind of one stand alone we also kind of

00:26:13,610 --> 00:26:17,480
want to patch them all at the same time

00:26:14,720 --> 00:26:22,610
can we kind of like have both and so

00:26:17,480 --> 00:26:24,830
that's what we'll try and do and then

00:26:22,610 --> 00:26:27,170
asp.net core 2.1 we've been working on

00:26:24,830 --> 00:26:28,520
signal ah we make it by default when you

00:26:27,170 --> 00:26:29,600
do file move for now it's been a core

00:26:28,520 --> 00:26:32,480
application it now

00:26:29,600 --> 00:26:33,980
sets up HTTP on your dev machine and

00:26:32,480 --> 00:26:37,760
trusts assert so it's like doing it

00:26:33,980 --> 00:26:39,680
doing HTTP you can turn it off when you

00:26:37,760 --> 00:26:41,360
do file new gdpr compliance you how many

00:26:39,680 --> 00:26:41,630
of you have to deal with gdpr compliance

00:26:41,360 --> 00:26:42,830
and

00:26:41,630 --> 00:26:45,380
there in the recent in recent history

00:26:42,830 --> 00:26:47,810
few of you if you do file new in asp net

00:26:45,380 --> 00:26:49,610
cornell it automatically has it has the

00:26:47,810 --> 00:26:51,500
banner saying hey we're gonna use

00:26:49,610 --> 00:26:52,490
cookies click okay it has the

00:26:51,500 --> 00:26:54,050
configuration for you to be able to

00:26:52,490 --> 00:26:56,180
choose to choose when who you show that

00:26:54,050 --> 00:26:58,490
to and how to configure that and you let

00:26:56,180 --> 00:27:00,350
you like customize the UI to fit so it's

00:26:58,490 --> 00:27:02,390
just kind of pre setup for you to be

00:27:00,350 --> 00:27:03,260
able to handle the gdpr compliance for

00:27:02,390 --> 00:27:07,280
those of you that don't know anything

00:27:03,260 --> 00:27:09,200
about it well done basically you need

00:27:07,280 --> 00:27:10,520
it's the it's the it's it's the banner

00:27:09,200 --> 00:27:12,260
you've probably seen a bunch of times

00:27:10,520 --> 00:27:17,210
saying hey we're using cookies is that

00:27:12,260 --> 00:27:19,100
okay right we've made a bunch of better

00:27:17,210 --> 00:27:21,020
a lot of improvements for web api

00:27:19,100 --> 00:27:21,620
conventions con sense of a web of an api

00:27:21,020 --> 00:27:23,090
controller

00:27:21,620 --> 00:27:25,340
to get better kind of default api

00:27:23,090 --> 00:27:26,990
experiences essentially to be a client

00:27:25,340 --> 00:27:28,580
factory Ryan and I are going to talk

00:27:26,990 --> 00:27:30,470
about HTTP client factory a fair bit

00:27:28,580 --> 00:27:33,530
later on in our asp net core deep dive I

00:27:30,470 --> 00:27:35,030
think it's on Friday as a lot of good

00:27:33,530 --> 00:27:37,520
micro service connection resiliency

00:27:35,030 --> 00:27:39,920
stuff you can get with air over HTTP and

00:27:37,520 --> 00:27:41,570
then if any of you are using is we're

00:27:39,920 --> 00:27:45,410
working on a new in proc hosting model

00:27:41,570 --> 00:27:47,060
for IAS where instead of today is is

00:27:45,410 --> 00:27:49,190
just a proxy and it just has its debt

00:27:47,060 --> 00:27:51,860
asp net core runs as its own process and

00:27:49,190 --> 00:27:53,420
it's just affords requests we're gonna

00:27:51,860 --> 00:27:54,920
have a mode where you can either run

00:27:53,420 --> 00:27:56,720
that way or run in proc and when you're

00:27:54,920 --> 00:27:58,280
in proc you get roughly like six times

00:27:56,720 --> 00:27:59,840
the power parfum provement because

00:27:58,280 --> 00:28:04,820
you're not doing that like 40 across

00:27:59,840 --> 00:28:07,280
Africa across procs and then raising

00:28:04,820 --> 00:28:09,410
improvements NBC improvements build time

00:28:07,280 --> 00:28:11,180
razor improvements you as a UI as a

00:28:09,410 --> 00:28:12,740
library if any of you have gone and

00:28:11,180 --> 00:28:14,360
opened up the authentication controller

00:28:12,740 --> 00:28:16,160
code in your solution and then just go

00:28:14,360 --> 00:28:19,580
on my guide in my I as the goggles they

00:28:16,160 --> 00:28:23,630
do nothing we just move that into a

00:28:19,580 --> 00:28:25,880
class library it'll be fine which'll

00:28:23,630 --> 00:28:30,440
actually the the thing here is you can

00:28:25,880 --> 00:28:32,630
put your razor UI into a package add

00:28:30,440 --> 00:28:35,510
that package to your application then

00:28:32,630 --> 00:28:37,520
have it appear right and Hanan gosh it's

00:28:35,510 --> 00:28:40,220
kind of customize it so we used it for

00:28:37,520 --> 00:28:41,660
off so you just add the off packages and

00:28:40,220 --> 00:28:42,770
then you just get a login screen because

00:28:41,660 --> 00:28:43,760
all the login screen looks the same

00:28:42,770 --> 00:28:45,380
everywhere right you get some

00:28:43,760 --> 00:28:47,480
customizations and tweak it but

00:28:45,380 --> 00:28:48,710
otherwise it's always an auth screen if

00:28:47,480 --> 00:28:50,060
you don't want it great don't use it but

00:28:48,710 --> 00:28:51,260
if you're think einde of looks like what

00:28:50,060 --> 00:28:52,310
the one in our package is great you

00:28:51,260 --> 00:28:53,600
never have to think about it again you

00:28:52,310 --> 00:28:55,460
just add a package ref and away you go

00:28:53,600 --> 00:28:57,830
if any of you people are in charge of

00:28:55,460 --> 00:28:59,480
like owning the like XUI for all of the

00:28:57,830 --> 00:29:01,220
applications in your organization that

00:28:59,480 --> 00:29:04,159
do the thing that's probably something

00:29:01,220 --> 00:29:05,539
that you want to check out right if

00:29:04,159 --> 00:29:10,159
you're in charge with owning the footer

00:29:05,539 --> 00:29:10,899
or whatever and then we're porting the

00:29:10,159 --> 00:29:13,429
webhooks

00:29:10,899 --> 00:29:14,720
libraries that exist today over to core

00:29:13,429 --> 00:29:15,980
to make sure they all work and have a

00:29:14,720 --> 00:29:18,980
good idiomatic a Hispanic core

00:29:15,980 --> 00:29:21,770
experience and then AEF does a bunch of

00:29:18,980 --> 00:29:22,880
stuff I worked on the EF team I don't

00:29:21,770 --> 00:29:25,940
even know what half of these things are

00:29:22,880 --> 00:29:28,100
but they sound great lazy loading is

00:29:25,940 --> 00:29:30,230
good so lazy loading is where you say

00:29:28,100 --> 00:29:32,990
like get me all users and then when you

00:29:30,230 --> 00:29:35,450
start trying to get the something that

00:29:32,990 --> 00:29:37,549
users have addresses I don't know that

00:29:35,450 --> 00:29:38,929
was a bad analogy

00:29:37,549 --> 00:29:40,340
when you start dotting through your

00:29:38,929 --> 00:29:41,779
domain model when you've grabbed your

00:29:40,340 --> 00:29:43,690
entity back from any framework any

00:29:41,779 --> 00:29:45,799
frameworks in RM if you haven't used it

00:29:43,690 --> 00:29:47,710
it'll just automatically start executing

00:29:45,799 --> 00:29:50,510
queries to go fetch them on demand

00:29:47,710 --> 00:29:51,950
previous to now you've had to explicitly

00:29:50,510 --> 00:29:53,480
say which ones you wanted when you were

00:29:51,950 --> 00:29:55,039
doing the initial query some people hate

00:29:53,480 --> 00:29:57,470
that with the passion of a thousand suns

00:29:55,039 --> 00:29:58,730
some people like it and say that lazy

00:29:57,470 --> 00:30:02,179
loading is the worst thing in the world

00:29:58,730 --> 00:30:03,679
so pick your camp link group by

00:30:02,179 --> 00:30:05,330
translation is interesting the way F

00:30:03,679 --> 00:30:07,520
Corps works is it takes your link

00:30:05,330 --> 00:30:09,140
expression tree translates it to sequel

00:30:07,520 --> 00:30:11,140
or whatever the language is you're

00:30:09,140 --> 00:30:13,880
trying to do execute it on the server

00:30:11,140 --> 00:30:15,260
then anything that comes the query will

00:30:13,880 --> 00:30:16,700
come back and any of the link that it

00:30:15,260 --> 00:30:21,020
couldn't translate to sequel you'll run

00:30:16,700 --> 00:30:22,820
in cut in line right so being able to

00:30:21,020 --> 00:30:24,440
translate group buyers into into the

00:30:22,820 --> 00:30:25,640
language of the server means that it you

00:30:24,440 --> 00:30:27,529
get bit more efficient group buyers

00:30:25,640 --> 00:30:29,000
right and then over time they do more

00:30:27,529 --> 00:30:31,039
and more translation to the server and

00:30:29,000 --> 00:30:32,570
things get more efficient but you never

00:30:31,039 --> 00:30:36,710
see you never care because you're just

00:30:32,570 --> 00:30:38,210
doing a link query and it just works the

00:30:36,710 --> 00:30:39,559
last one there was super interesting I'm

00:30:38,210 --> 00:30:41,000
pretty sure I told someone last night

00:30:39,559 --> 00:30:42,980
that that wasn't a thing yet and I was

00:30:41,000 --> 00:30:45,130
totally a dirty rotten liar which is

00:30:42,980 --> 00:30:47,000
using any framework to talk to cosmos TV

00:30:45,130 --> 00:30:50,870
it's great I think it might have been

00:30:47,000 --> 00:30:52,520
you so you should check that out if

00:30:50,870 --> 00:30:56,529
you're interested in using cosmos DB

00:30:52,520 --> 00:30:59,960
against like a domain model and now as

00:30:56,529 --> 00:31:02,179
he's a pretty common theme with all of

00:30:59,960 --> 00:31:07,549
our with all the talks at Cloud Foundry

00:31:02,179 --> 00:31:09,000
in a Cloud Foundry comp contributions so

00:31:07,549 --> 00:31:13,600
these

00:31:09,000 --> 00:31:15,550
all of the places in the world where we

00:31:13,600 --> 00:31:21,120
have accepted contributions from the

00:31:15,550 --> 00:31:21,120
community it's pretty good right

00:31:21,540 --> 00:31:26,890
thousands of people from all over the

00:31:23,500 --> 00:31:28,240
world Samsung is embracing done that

00:31:26,890 --> 00:31:30,840
because it is a completely open-source

00:31:28,240 --> 00:31:30,840
project

00:31:31,150 --> 00:31:35,620
been from Illyrio ad games if you've

00:31:33,940 --> 00:31:37,090
ever seen some of the perf if you ever

00:31:35,620 --> 00:31:38,830
what if you ever tried to watch perfect

00:31:37,090 --> 00:31:40,210
Ekans coming into core FX you've

00:31:38,830 --> 00:31:42,490
probably seen Ben's name floating around

00:31:40,210 --> 00:31:44,530
he's building this building a game with

00:31:42,490 --> 00:31:46,270
Illyrio games he's using dotnet core and

00:31:44,530 --> 00:31:48,280
so every time he finds anything that's

00:31:46,270 --> 00:31:51,250
remotely slow he goes and fixes it and

00:31:48,280 --> 00:31:54,000
he sends its PR and we check it in and

00:31:51,250 --> 00:31:59,140
it makes things faster and that's great

00:31:54,000 --> 00:32:01,150
so because dar net is completely

00:31:59,140 --> 00:32:06,520
open-source projects there's more than

00:32:01,150 --> 00:32:08,770
19,000 contributors from 3700 companies

00:32:06,520 --> 00:32:10,810
all contributing to down their core and

00:32:08,770 --> 00:32:12,340
related open our liked on that core kind

00:32:10,810 --> 00:32:15,160
of ecosystem of open source projects

00:32:12,340 --> 00:32:16,780
more than half over half of the

00:32:15,160 --> 00:32:18,040
contributions are coming from outside of

00:32:16,780 --> 00:32:21,280
Microsoft and just checking some of my

00:32:18,040 --> 00:32:23,200
notes here and I think in this case

00:32:21,280 --> 00:32:24,880
contributor means you doesn't

00:32:23,200 --> 00:32:26,650
necessarily mean you sent code it may

00:32:24,880 --> 00:32:28,330
just be participating in github issues

00:32:26,650 --> 00:32:32,230
like just going and making an issue

00:32:28,330 --> 00:32:34,210
making a good bug report is amazing yeah

00:32:32,230 --> 00:32:37,090
so I worked on entity framework six

00:32:34,210 --> 00:32:39,120
which was the first version of full

00:32:37,090 --> 00:32:41,860
entity framework that was open source

00:32:39,120 --> 00:32:42,910
very lots of people internally were kind

00:32:41,860 --> 00:32:44,560
of looking at us it was one of the very

00:32:42,910 --> 00:32:47,650
early things we did kind of as open

00:32:44,560 --> 00:32:49,270
source and so I all got the question a

00:32:47,650 --> 00:32:50,440
fair few times what is this biggest

00:32:49,270 --> 00:32:52,210
difference once you're out when you're

00:32:50,440 --> 00:32:53,470
now open so I personally never worked

00:32:52,210 --> 00:32:55,060
I've never worked on close to our

00:32:53,470 --> 00:32:56,290
software in my like seven years of

00:32:55,060 --> 00:32:59,830
working at Microsoft I've only ever

00:32:56,290 --> 00:33:01,930
worked on open source and the answer at

00:32:59,830 --> 00:33:04,870
the time was our bug reports are now

00:33:01,930 --> 00:33:07,210
three hundred times better because

00:33:04,870 --> 00:33:08,920
everybody goes and looks before they

00:33:07,210 --> 00:33:11,260
submit a bug report so now our bugs are

00:33:08,920 --> 00:33:13,300
amazing we have these bugs that say like

00:33:11,260 --> 00:33:15,090
this line of code is broken and we're

00:33:13,300 --> 00:33:18,760
like yeah it doesn't look working thanks

00:33:15,090 --> 00:33:20,260
right as opposed to like hey I click

00:33:18,760 --> 00:33:22,840
this button and like this thing moves

00:33:20,260 --> 00:33:25,660
and we're like okay let's go find out

00:33:22,840 --> 00:33:27,730
why that is alright so this so

00:33:25,660 --> 00:33:30,310
contributing by just making good issues

00:33:27,730 --> 00:33:32,560
it's still contributing right you don't

00:33:30,310 --> 00:33:34,270
have to be sending us pull requests and

00:33:32,560 --> 00:33:36,640
building our code and doing stuff just

00:33:34,270 --> 00:33:38,470
talk to us tell us about your scenarios

00:33:36,640 --> 00:33:40,150
tell us that the previews don't work

00:33:38,470 --> 00:33:41,680
tell us that we don't know how to write

00:33:40,150 --> 00:33:47,200
a Linux installer and you guys dumb

00:33:41,680 --> 00:33:50,110
whatever all right tell us about your

00:33:47,200 --> 00:33:51,640
crazy like ridiculous legacy thing but a

00:33:50,110 --> 00:33:54,940
COBOL that you're trying to integrate

00:33:51,640 --> 00:33:58,630
with all right sounds great okay so

00:33:54,940 --> 00:34:03,670
continuing the open source theme there

00:33:58,630 --> 00:34:05,010
was a there was a the Jim's Emlyn the

00:34:03,670 --> 00:34:07,360
executive directory of Linux Foundation

00:34:05,010 --> 00:34:09,879
there are tens of millions of open

00:34:07,360 --> 00:34:12,639
source projects investing the ones with

00:34:09,879 --> 00:34:17,679
a sustainable ecosystem and Darnell is

00:34:12,639 --> 00:34:19,720
one of those this is from 2017 the cloud

00:34:17,679 --> 00:34:23,139
native foundation released analysis and

00:34:19,720 --> 00:34:25,810
our analysis of the top 30 highest

00:34:23,139 --> 00:34:27,340
velocity open-source projects today and

00:34:25,810 --> 00:34:30,399
the one with a arrow pointing at it is

00:34:27,340 --> 00:34:33,310
Darnell all right the ones at the top

00:34:30,399 --> 00:34:34,690
right or like Linux kernel and chromium

00:34:33,310 --> 00:34:38,919
and stuff like that kubernetes is that

00:34:34,690 --> 00:34:41,200
green bubble up there the number of

00:34:38,919 --> 00:34:43,179
authors is the size of the bubble the

00:34:41,200 --> 00:34:45,909
further it is to the right the more

00:34:43,179 --> 00:34:48,580
comets commits it has the further up it

00:34:45,909 --> 00:34:50,770
is is the number of like PRS and issues

00:34:48,580 --> 00:34:52,659
and stuff so then further up that way

00:34:50,770 --> 00:34:54,460
you go the more kind of healthy you like

00:34:52,659 --> 00:34:56,679
this stuff happening is commits there's

00:34:54,460 --> 00:34:59,110
pre ours as issues it's basically the

00:34:56,679 --> 00:35:00,610
way that you read that that flow Cloud

00:34:59,110 --> 00:35:02,790
Foundry is over here has like way more

00:35:00,610 --> 00:35:10,730
commits not as many issues and PRS

00:35:02,790 --> 00:35:13,130
things like that make sense cool

00:35:10,730 --> 00:35:16,430
so let's talk about don''t open source

00:35:13,130 --> 00:35:19,670
journey way back in the beginnings in

00:35:16,430 --> 00:35:22,070
the before times in 2001 there was a

00:35:19,670 --> 00:35:26,240
comma 335 or any of you involved in

00:35:22,070 --> 00:35:27,890
dotnet at that time yeah yeah okay so

00:35:26,240 --> 00:35:29,589
the bunch of you guys are old old-school

00:35:27,890 --> 00:35:32,150
Don that guys ran just great

00:35:29,589 --> 00:35:34,730
then we released our ECMO was kind of

00:35:32,150 --> 00:35:36,650
the standard for you know the the common

00:35:34,730 --> 00:35:38,060
language infrastructure the thing that

00:35:36,650 --> 00:35:40,670
all the dotnet language is compiled to

00:35:38,060 --> 00:35:43,280
and then we have dotnet 1.0 for Windows

00:35:40,670 --> 00:35:44,839
released in 2002 about the same time the

00:35:43,280 --> 00:35:47,270
mono project began as an open source

00:35:44,839 --> 00:35:49,520
project which was the ACMA spec said

00:35:47,270 --> 00:35:50,690
that the CLI should be able to run on

00:35:49,520 --> 00:35:52,070
other operating systems and

00:35:50,690 --> 00:35:53,780
infrastructure and ships like we work

00:35:52,070 --> 00:35:56,510
with Intel on it and people like that

00:35:53,780 --> 00:35:59,839
but we only shipped one for Windows as

00:35:56,510 --> 00:36:02,390
we will Microsoft time right and so

00:35:59,839 --> 00:36:07,520
mano-a-mano was started to try and bring

00:36:02,390 --> 00:36:09,170
that to other places around 2008 ASP MVC

00:36:07,520 --> 00:36:11,240
web development stack released on

00:36:09,170 --> 00:36:13,760
CodePlex has open source it was kind of

00:36:11,240 --> 00:36:15,770
a big deal at the time I want to say

00:36:13,760 --> 00:36:17,450
that this 2008 date is when we were

00:36:15,770 --> 00:36:19,460
still kind of doing over the wall open

00:36:17,450 --> 00:36:21,230
source it was like the source was there

00:36:19,460 --> 00:36:22,760
but he was like copied and pasted from

00:36:21,230 --> 00:36:24,260
an internal repository we weren't

00:36:22,760 --> 00:36:26,270
actually developing in the open we were

00:36:24,260 --> 00:36:28,550
just like making the sauce available to

00:36:26,270 --> 00:36:30,560
like browse and raise issues from and

00:36:28,550 --> 00:36:34,190
then we kind of evolved over time to

00:36:30,560 --> 00:36:36,109
being from that into actually community

00:36:34,190 --> 00:36:38,750
developing in the open so basically

00:36:36,109 --> 00:36:40,780
between these 2008 and 2014 two days I

00:36:38,750 --> 00:36:43,040
want to say that's true

00:36:40,780 --> 00:36:44,270
and then the EF became open source

00:36:43,040 --> 00:36:45,740
somewhere in there and various other

00:36:44,270 --> 00:36:47,740
things started to happen the job Domino

00:36:45,740 --> 00:36:52,280
started to fall I guess you could say

00:36:47,740 --> 00:36:54,230
and then in 2014 my notes here say that

00:36:52,280 --> 00:36:56,810
in 2014 hell freezes over and pig

00:36:54,230 --> 00:36:58,970
started to fly and micros and

00:36:56,810 --> 00:37:00,859
Microsoft's BUILD conference and is the

00:36:58,970 --> 00:37:04,220
father of c-sharp released Rosalind the

00:37:00,859 --> 00:37:08,150
open source c-sharp compile a c-sharp VB

00:37:04,220 --> 00:37:10,130
like donna compiler called Rozlyn then

00:37:08,150 --> 00:37:13,369
in november dot net core project begins

00:37:10,130 --> 00:37:14,750
in the open done that community starts

00:37:13,369 --> 00:37:16,910
to get excited on that cause cloud

00:37:14,750 --> 00:37:18,290
native it's fast it's open it's all

00:37:16,910 --> 00:37:21,230
these cool things I've wanted for so

00:37:18,290 --> 00:37:22,510
long all right you can start saying

00:37:21,230 --> 00:37:25,540
things like hyper scale

00:37:22,510 --> 00:37:26,490
because it was cool to say and then in

00:37:25,540 --> 00:37:30,610
00:37:26,490 --> 00:37:34,210
mono came home and we gave Miguel a big

00:37:30,610 --> 00:37:39,310
hug and we bought xamarin and Miguel

00:37:34,210 --> 00:37:41,050
joined us a dev dev and he's officially

00:37:39,310 --> 00:37:43,570
supported and contributed to by

00:37:41,050 --> 00:37:45,040
Microsoft and the Microsoft community

00:37:43,570 --> 00:37:46,720
condom business and the mono community

00:37:45,040 --> 00:37:51,220
all came together and it was glorious

00:37:46,720 --> 00:37:54,970
and then it also at the same time want

00:37:51,220 --> 00:37:57,130
to join the dotnet foundation and in

00:37:54,970 --> 00:37:59,470
August 2017 dotnet core 2 was released

00:37:57,130 --> 00:38:01,630
and it was after August 2017 where we

00:37:59,470 --> 00:38:03,520
started to see that like more than 10%

00:38:01,630 --> 00:38:05,290
growth every month of people who were

00:38:03,520 --> 00:38:06,760
using dotnet core every day liked it

00:38:05,290 --> 00:38:11,080
more than a few time more than once and

00:38:06,760 --> 00:38:12,880
twice right and what is this dotnet

00:38:11,080 --> 00:38:15,010
foundation thing well the donate

00:38:12,880 --> 00:38:16,720
foundation is our center of gravity for

00:38:15,010 --> 00:38:19,810
all of our open source and ecosystem

00:38:16,720 --> 00:38:21,550
have done net right it provides support

00:38:19,810 --> 00:38:22,990
if you want to if you're gonna go make

00:38:21,550 --> 00:38:24,910
an open-source dot in that project and

00:38:22,990 --> 00:38:26,770
you want to get like a cert to sign the

00:38:24,910 --> 00:38:28,720
assembler to like authentic code sign

00:38:26,770 --> 00:38:30,400
the assemblies and make sure you do a

00:38:28,720 --> 00:38:31,900
new get rice and all those sorts of

00:38:30,400 --> 00:38:33,370
things make sure your guidance for your

00:38:31,900 --> 00:38:34,810
open source project is appropriate

00:38:33,370 --> 00:38:39,400
Donaire Foundation will help you with

00:38:34,810 --> 00:38:41,680
that and with all those things right it

00:38:39,400 --> 00:38:44,440
has more than 60 projects hundreds of

00:38:41,680 --> 00:38:46,090
repositories under its stewardship it

00:38:44,440 --> 00:38:48,250
provides protection support services

00:38:46,090 --> 00:38:49,840
best practices all of those things

00:38:48,250 --> 00:38:51,250
spreading of knowledge introduction to

00:38:49,840 --> 00:38:53,290
other members of the donor foundation

00:38:51,250 --> 00:38:55,750
and it includes a bunch of really cool

00:38:53,290 --> 00:38:58,570
things like if you notice at the very

00:38:55,750 --> 00:38:59,830
top there's a little white piece of text

00:38:58,570 --> 00:39:08,800
at the very top of that slide that says

00:38:59,830 --> 00:39:11,620
steel toe so like steel toe and so is

00:39:08,800 --> 00:39:13,270
everybody here who here is not familiar

00:39:11,620 --> 00:39:15,210
with steel toe let's try it that way so

00:39:13,270 --> 00:39:17,620
you only not know what steel toe is

00:39:15,210 --> 00:39:18,520
excellent very well done for being

00:39:17,620 --> 00:39:19,960
honest and telling me you don't know

00:39:18,520 --> 00:39:21,760
what steel toe is there's a bunch of

00:39:19,960 --> 00:39:22,870
other people there you got no idea but

00:39:21,760 --> 00:39:24,750
they're like I'm gonna put my hand up

00:39:22,870 --> 00:39:30,310
I'm not gonna be first

00:39:24,750 --> 00:39:32,790
so steel toe is about taking your donate

00:39:30,310 --> 00:39:34,660
core and your dotnet application and

00:39:32,790 --> 00:39:35,710
giving you the immigrant integration

00:39:34,660 --> 00:39:38,140
with

00:39:35,710 --> 00:39:41,530
you know hat history with spring cloud

00:39:38,140 --> 00:39:42,700
config server with Eureka with giving

00:39:41,530 --> 00:39:44,559
you distributed over just a bit of

00:39:42,700 --> 00:39:47,410
tracing with open census there's the mm

00:39:44,559 --> 00:39:49,480
talk later on today later on with with

00:39:47,410 --> 00:39:51,220
David Tillman well he's gonna be showing

00:39:49,480 --> 00:39:53,260
open census and distributed tracing and

00:39:51,220 --> 00:39:54,970
you know this gives you it gives you

00:39:53,260 --> 00:39:57,760
configurable health endpoints like a

00:39:54,970 --> 00:40:01,119
caller actuators in sin and spring booth

00:39:57,760 --> 00:40:03,430
right it's it gives you if you're gonna

00:40:01,119 --> 00:40:04,900
take your asp.net application and you're

00:40:03,430 --> 00:40:08,410
gonna put it on Cloud Foundry ad

00:40:04,900 --> 00:40:10,900
steel-toe then go deploy it and your

00:40:08,410 --> 00:40:12,460
experience will be better that gives you

00:40:10,900 --> 00:40:13,780
all of the integration points and all

00:40:12,460 --> 00:40:19,270
the implements all of the things that

00:40:13,780 --> 00:40:21,760
you would want right and then dotnet on

00:40:19,270 --> 00:40:23,470
cloud foundry dotnet works pretty damn

00:40:21,760 --> 00:40:26,109
good on Cloud Foundry even without Steel

00:40:23,470 --> 00:40:29,680
Toe you go file new you zoo CF push

00:40:26,109 --> 00:40:31,420
it'll run out of the box right the

00:40:29,680 --> 00:40:32,500
dotnet core build packers in by default

00:40:31,420 --> 00:40:33,970
I'm pretty sure I've never had to

00:40:32,500 --> 00:40:35,380
install one except for when I was trying

00:40:33,970 --> 00:40:38,619
to do crazy preview stuff and had to

00:40:35,380 --> 00:40:40,240
build a myself and it automatically

00:40:38,619 --> 00:40:42,430
container Rises your workloads you can

00:40:40,240 --> 00:40:45,130
SSH into like that app over there that

00:40:42,430 --> 00:40:47,500
one that's read for some reason right

00:40:45,130 --> 00:40:49,780
and you use the same debugging and tools

00:40:47,500 --> 00:40:52,589
once again we've had that slide at the

00:40:49,780 --> 00:40:55,119
beginning that unified stack right

00:40:52,589 --> 00:40:57,730
command tool in common libraries common

00:40:55,119 --> 00:41:00,040
things right I want you to be able to

00:40:57,730 --> 00:41:01,660
have a familiar programming experience

00:41:00,040 --> 00:41:03,520
in a familiar tooling experience

00:41:01,660 --> 00:41:05,980
building any type of application that

00:41:03,520 --> 00:41:09,220
you want to build and deploy especially

00:41:05,980 --> 00:41:11,079
deploy to the cloud so you open up

00:41:09,220 --> 00:41:12,220
visual studio you start developing code

00:41:11,079 --> 00:41:13,720
it should feel the same if you're gonna

00:41:12,220 --> 00:41:14,859
deploy a cloud foundry same if you're

00:41:13,720 --> 00:41:18,280
going to go somewhere else everything's

00:41:14,859 --> 00:41:19,869
the same in the far future you know if

00:41:18,280 --> 00:41:22,359
we start doing other things like do you

00:41:19,869 --> 00:41:24,339
like G RPC and things like that same

00:41:22,359 --> 00:41:25,660
thing we want you to be able to write it

00:41:24,339 --> 00:41:27,010
on that application that is a Donette

00:41:25,660 --> 00:41:28,990
application that feels like a doughnut

00:41:27,010 --> 00:41:32,200
application deploy the Cloud Foundry

00:41:28,990 --> 00:41:34,079
deploy it to anywhere and it feels the

00:41:32,200 --> 00:41:37,329
same and it feels good integrates well

00:41:34,079 --> 00:41:40,660
that's my goal as the PM in charge of

00:41:37,329 --> 00:41:42,549
services in da net right I want the best

00:41:40,660 --> 00:41:45,490
API and cloud native experience we can

00:41:42,549 --> 00:41:47,230
get and we've talked a lot about dotnet

00:41:45,490 --> 00:41:49,360
core but this is also done that

00:41:47,230 --> 00:41:50,590
framework web forms W

00:41:49,360 --> 00:41:53,350
you have things like that with the new

00:41:50,590 --> 00:41:55,090
windows stem cell Cloud Foundry stuff

00:41:53,350 --> 00:41:56,760
that you can do now you've got to deploy

00:41:55,090 --> 00:42:00,370
all of those as well

00:41:56,760 --> 00:42:02,260
and then for those of you who are

00:42:00,370 --> 00:42:04,450
building trying to move into the world

00:42:02,260 --> 00:42:06,790
of we have a lot of people especially in

00:42:04,450 --> 00:42:09,010
donate lands who are who come to us and

00:42:06,790 --> 00:42:12,900
say for the love of God just tell me how

00:42:09,010 --> 00:42:15,820
to do a micro service please come on

00:42:12,900 --> 00:42:18,700
tell me tell me what it means tell me

00:42:15,820 --> 00:42:22,840
what Micro means there are five lines of

00:42:18,700 --> 00:42:27,130
code definitely right someone laughed

00:42:22,840 --> 00:42:28,890
thanks so the in this dotnet

00:42:27,130 --> 00:42:31,390
architecture guides are is an ongoing

00:42:28,890 --> 00:42:33,820
set of work for us to say okay we'll

00:42:31,390 --> 00:42:35,830
tell you will tell you something we'll

00:42:33,820 --> 00:42:37,390
give you as much help as we can we'll

00:42:35,830 --> 00:42:39,820
give you at least we'll give you at

00:42:37,390 --> 00:42:41,890
least like some of the pars like here's

00:42:39,820 --> 00:42:44,080
path a it's fine path B it's fine

00:42:41,890 --> 00:42:46,570
Farsi it's fine you can pick one at

00:42:44,080 --> 00:42:47,740
least try and give you that and we try

00:42:46,570 --> 00:42:49,050
and give you a lot of guidance there's a

00:42:47,740 --> 00:42:51,040
lot of very common guidance right

00:42:49,050 --> 00:42:52,510
connection resiliency if you're building

00:42:51,040 --> 00:42:54,220
an architecture that has seven different

00:42:52,510 --> 00:42:55,600
processes all talking to each other you

00:42:54,220 --> 00:42:56,830
need you have resilient connections

00:42:55,600 --> 00:42:58,840
we're talking to those things that could

00:42:56,830 --> 00:43:00,160
happen is common and the problems we've

00:42:58,840 --> 00:43:01,600
reached our logic the problems with

00:43:00,160 --> 00:43:03,880
exponential back-off exponential

00:43:01,600 --> 00:43:06,010
back-off with junior in high volume like

00:43:03,880 --> 00:43:07,810
through pi throughput scenarios that all

00:43:06,010 --> 00:43:08,860
these sorts of things is that we're

00:43:07,810 --> 00:43:12,910
trying to provide more and more

00:43:08,860 --> 00:43:14,650
dedicated guidance including and best

00:43:12,910 --> 00:43:17,290
practices with like community reviewed

00:43:14,650 --> 00:43:21,340
and peer reviewed books for example this

00:43:17,290 --> 00:43:23,530
free ebook it's like it's it's 250 pages

00:43:21,340 --> 00:43:26,290
the amount of information you that makes

00:43:23,530 --> 00:43:27,610
us seem like a thousand it's just it's

00:43:26,290 --> 00:43:29,950
there's lots of there's lots of pretty

00:43:27,610 --> 00:43:32,230
good stuff in there it's focused on I'm

00:43:29,950 --> 00:43:33,880
just doc and contain Erised stuff so the

00:43:32,230 --> 00:43:35,320
samples are all like docker compose up

00:43:33,880 --> 00:43:37,630
and you've got a full flak app running

00:43:35,320 --> 00:43:39,190
that you can experiment with but the

00:43:37,630 --> 00:43:41,200
vast majority the information isn't

00:43:39,190 --> 00:43:42,640
really as we've so many things it's not

00:43:41,200 --> 00:43:44,200
really about docker dock is kind of a

00:43:42,640 --> 00:43:46,300
packaging if almost an implementation

00:43:44,200 --> 00:43:48,370
detail to offer for a lot of extent

00:43:46,300 --> 00:43:51,340
intents and purposes a lot of what

00:43:48,370 --> 00:43:53,590
you're talking about is okay I've I've

00:43:51,340 --> 00:43:56,170
got my I've got my I've got my shopping

00:43:53,590 --> 00:43:58,420
cart in this example I have my I have my

00:43:56,170 --> 00:44:00,460
basket micro service and my ordering

00:43:58,420 --> 00:44:02,770
micros and my catalog micro service

00:44:00,460 --> 00:44:04,060
basket has a price catalog has a

00:44:02,770 --> 00:44:05,860
price they're both different concepts

00:44:04,060 --> 00:44:07,420
the price of the thing when added to my

00:44:05,860 --> 00:44:09,370
basket is different to the price of the

00:44:07,420 --> 00:44:12,820
thing when it's in my catalogue but if

00:44:09,370 --> 00:44:14,230
it changes in my catalog and my UI in my

00:44:12,820 --> 00:44:15,730
shopping cart probably want to tell you

00:44:14,230 --> 00:44:17,170
that right like if you're in Amazon if

00:44:15,730 --> 00:44:18,910
you go to the shopping cart it says hey

00:44:17,170 --> 00:44:19,930
last since you added this to your basket

00:44:18,910 --> 00:44:21,220
the price changed

00:44:19,930 --> 00:44:22,720
you'd implement that rule how do you

00:44:21,220 --> 00:44:24,550
implement that date is in two different

00:44:22,720 --> 00:44:27,040
services do you call both services from

00:44:24,550 --> 00:44:29,640
your UI does the does the cow does the

00:44:27,040 --> 00:44:31,990
cart service talk to the catalog service

00:44:29,640 --> 00:44:34,020
do you live do you do like an event in

00:44:31,990 --> 00:44:37,180
backplane message do you think Kefka

00:44:34,020 --> 00:44:38,440
like what do you want to do this book

00:44:37,180 --> 00:44:40,780
these things talk about all those sorts

00:44:38,440 --> 00:44:44,110
of things some of you are going yeah man

00:44:40,780 --> 00:44:45,340
I have that problem that's great you

00:44:44,110 --> 00:44:47,950
should read this book or come talk to me

00:44:45,340 --> 00:44:50,770
or something could it be great and this

00:44:47,950 --> 00:44:52,510
repo eShop on containers has an app we

00:44:50,770 --> 00:44:55,270
took like a shopping the shopping demo

00:44:52,510 --> 00:44:56,500
it's got three different UI stacks it

00:44:55,270 --> 00:44:58,270
has and it has four or five different

00:44:56,500 --> 00:44:59,830
services all the services it's all by

00:44:58,270 --> 00:45:00,970
that but they're all kind of implemented

00:44:59,830 --> 00:45:03,010
slightly differently some of them are

00:45:00,970 --> 00:45:05,680
doing like hardcore DDD others are kind

00:45:03,010 --> 00:45:07,690
of very simple crud ones got Redis one's

00:45:05,680 --> 00:45:09,580
got sequel server you know they use some

00:45:07,690 --> 00:45:11,080
message cues like they solve this in at

00:45:09,580 --> 00:45:12,490
least this is at least our way of

00:45:11,080 --> 00:45:13,870
solving a lot of the problems that you

00:45:12,490 --> 00:45:15,310
have with micro services Internet core

00:45:13,870 --> 00:45:18,250
let's go check that out if you're in

00:45:15,310 --> 00:45:20,050
that world and then another common

00:45:18,250 --> 00:45:21,580
common ask outside of the lack for the

00:45:20,050 --> 00:45:25,390
love of God tell me how to do a micro

00:45:21,580 --> 00:45:27,070
service is tell me so I really want to

00:45:25,390 --> 00:45:29,350
use dotnet cord on that cause amazing

00:45:27,070 --> 00:45:31,930
like it's so fast I really want to try

00:45:29,350 --> 00:45:33,310
it I love it because because we did a

00:45:31,930 --> 00:45:38,950
good job of making developers love our

00:45:33,310 --> 00:45:40,810
stuff but you know my manager guy he's

00:45:38,950 --> 00:45:41,260
not so keen I'm betting on this new

00:45:40,810 --> 00:45:44,190
thing

00:45:41,260 --> 00:45:46,630
he's been around he doesn't believe you

00:45:44,190 --> 00:45:47,890
tell us who are all the cool people who

00:45:46,630 --> 00:45:51,340
are using this that's gonna make my boss

00:45:47,890 --> 00:45:53,800
one and used on that core too so here's

00:45:51,340 --> 00:45:55,780
a bunch of cool links with customer use

00:45:53,800 --> 00:45:57,250
with customer stories people who are

00:45:55,780 --> 00:46:00,840
using down their core successfully in

00:45:57,250 --> 00:46:06,280
production I had various levels of scale

00:46:00,840 --> 00:46:08,200
$0.10 gedcom like what sort of lots some

00:46:06,280 --> 00:46:09,310
of these people running you know tens

00:46:08,200 --> 00:46:13,480
and hundreds of thousands of

00:46:09,310 --> 00:46:16,300
transactions stack overflow runs 5.7

00:46:13,480 --> 00:46:18,940
million page views a day

00:46:16,300 --> 00:46:22,330
on around eight or nine servers using

00:46:18,940 --> 00:46:24,610
dinette framework they haven't they

00:46:22,330 --> 00:46:26,860
haven't moved it on their core yet just

00:46:24,610 --> 00:46:28,720
highly optimized done that framework

00:46:26,860 --> 00:46:30,700
like there's lots of good case studies

00:46:28,720 --> 00:46:32,200
there for you to go check out read about

00:46:30,700 --> 00:46:33,670
their success stories read about what

00:46:32,200 --> 00:46:35,680
they what they did if you're interested

00:46:33,670 --> 00:46:37,240
especially if you're like tossing up

00:46:35,680 --> 00:46:38,740
about whether you should try out don't

00:46:37,240 --> 00:46:40,330
their core or true tryouts and don't

00:46:38,740 --> 00:46:41,470
that stuff and you want to read about

00:46:40,330 --> 00:46:43,690
some other companies that have done the

00:46:41,470 --> 00:46:45,070
same thing go check these out it's a

00:46:43,690 --> 00:46:49,060
common question if you were thinking

00:46:45,070 --> 00:46:52,030
about it go and ask and that's about it

00:46:49,060 --> 00:46:54,280
for me 29 minutes and 50 seconds I am

00:46:52,030 --> 00:47:02,500
amazing because I had 30 minutes thank

00:46:54,280 --> 00:47:04,840
you very much for listening I'm gonna be

00:47:02,500 --> 00:47:06,340
here all week myself and Ryan who both

00:47:04,840 --> 00:47:09,040
work on the dinette server team he's

00:47:06,340 --> 00:47:11,230
waving right now come talk to us tell us

00:47:09,040 --> 00:47:13,090
how great or terrible we are and let us

00:47:11,230 --> 00:47:14,200
know how you're using our staff if

00:47:13,090 --> 00:47:16,530
you're using it we always like to hear

00:47:14,200 --> 00:47:16,530

YouTube URL: https://www.youtube.com/watch?v=hMP9zqra4QI


