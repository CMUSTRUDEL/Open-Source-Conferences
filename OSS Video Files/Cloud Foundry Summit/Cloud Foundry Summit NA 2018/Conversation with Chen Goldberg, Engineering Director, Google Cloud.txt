Title: Conversation with Chen Goldberg, Engineering Director, Google Cloud
Publication date: 2018-04-19
Playlist: Cloud Foundry Summit NA 2018
Description: 
	Conversation with Chen Goldberg, Engineering Director, Google Cloud

About Chen Goldberg
Chen Goldberg is a technology leader with 18+ years of experience leading engineering teams. In her current role as Engineering Director, she leads Google Kubernetes Engine (GKE) and the OSS Kubernetes and Istio projects teams in Google Cloud. Her team is committed to enable open cloud and ensuring Kubernetes success is sustainable. Chen lives in Sunnyvale, California with her husband and 3 kids. Outside of work she enjoys hiking and making desserts.
Captions: 
	00:00:00,000 --> 00:00:05,790
up next I would like to invite my dear

00:00:03,120 --> 00:00:07,950
friend hen Goldberg to join us from

00:00:05,790 --> 00:00:10,980
Google hen is the head of engineering

00:00:07,950 --> 00:00:12,690
for Google kubernetes engine amongst

00:00:10,980 --> 00:00:14,700
many other things and I'm however come

00:00:12,690 --> 00:00:16,619
out and talk about kubernetes and

00:00:14,700 --> 00:00:28,830
another project she's really interested

00:00:16,619 --> 00:00:30,150
in come on out hen thank you so happy to

00:00:28,830 --> 00:00:31,619
be here thank you for inviting me

00:00:30,150 --> 00:00:35,870
welcome to Boston

00:00:31,619 --> 00:00:38,520
it takes us coming to Boston to hang out

00:00:35,870 --> 00:00:40,739
we are so thrilled to have you join us

00:00:38,520 --> 00:00:42,960
today and obviously interoperability

00:00:40,739 --> 00:00:46,649
plays a big role in what we're talking

00:00:42,960 --> 00:00:48,270
about this year and kubernetes but I

00:00:46,649 --> 00:00:49,649
want to talk a little bit about the work

00:00:48,270 --> 00:00:51,390
you're doing running the engineering

00:00:49,649 --> 00:00:53,660
team for kubernetes but also some of the

00:00:51,390 --> 00:00:56,280
other open source work that you're doing

00:00:53,660 --> 00:00:58,469
so for me everything starts with the

00:00:56,280 --> 00:01:00,510
users right people here sitting in the

00:00:58,469 --> 00:01:03,870
audience Google users and really on

00:01:00,510 --> 00:01:05,880
sending their pain and you started

00:01:03,870 --> 00:01:08,640
talking about it that today our world is

00:01:05,880 --> 00:01:09,840
much more complex and work we have much

00:01:08,640 --> 00:01:12,330
more work to do and this is worth

00:01:09,840 --> 00:01:14,549
something like Cloud Foundry really

00:01:12,330 --> 00:01:16,799
helps us to deliver things quicker and

00:01:14,549 --> 00:01:21,780
improve our agility and velocity and we

00:01:16,799 --> 00:01:23,340
all care about that and my team and

00:01:21,780 --> 00:01:25,140
definitely with kubernetes and I think

00:01:23,340 --> 00:01:27,720
we're seeing about in Google is the

00:01:25,140 --> 00:01:30,240
question can we broaden that all the

00:01:27,720 --> 00:01:31,650
workers that we cannot modernize and I

00:01:30,240 --> 00:01:32,880
think the answer to that is no we can

00:01:31,650 --> 00:01:35,460
modernize everything it's about

00:01:32,880 --> 00:01:37,829
trade-offs it's about decision we talked

00:01:35,460 --> 00:01:40,579
about control before so how can we

00:01:37,829 --> 00:01:43,140
balance between flexibility and

00:01:40,579 --> 00:01:45,000
consistency and this is something I've

00:01:43,140 --> 00:01:47,329
talked about in cube con how I think

00:01:45,000 --> 00:01:49,530
kubernetes is doing a good job balancing

00:01:47,329 --> 00:01:52,320
between the two and allowing you to

00:01:49,530 --> 00:01:54,540
achieve that velocity in more workloads

00:01:52,320 --> 00:01:56,420
like stateful workloads that are really

00:01:54,540 --> 00:01:58,619
complementary to Cloud Foundry

00:01:56,420 --> 00:02:02,430
absolutely and we're we're obviously big

00:01:58,619 --> 00:02:05,399
fans of kubernetes you also run the

00:02:02,430 --> 00:02:08,069
ischial engineering team yes it is

00:02:05,399 --> 00:02:11,760
absolutely and dear to our hearts it is

00:02:08,069 --> 00:02:14,220
it is it's it's it's another standard

00:02:11,760 --> 00:02:16,800
that we hope that will be a

00:02:14,220 --> 00:02:18,510
and adopted by more technologies in the

00:02:16,800 --> 00:02:20,700
cloud native technologies and I think

00:02:18,510 --> 00:02:22,950
that also speaks about some of the

00:02:20,700 --> 00:02:24,960
principles and values that you'll find

00:02:22,950 --> 00:02:27,540
the kubernetes community and Cloud

00:02:24,960 --> 00:02:29,130
Foundry and also Google share between

00:02:27,540 --> 00:02:30,840
the project so the first thing is of

00:02:29,130 --> 00:02:33,570
course working in open source

00:02:30,840 --> 00:02:36,270
technologies we care about Portability

00:02:33,570 --> 00:02:38,130
and again this all ties back to to the

00:02:36,270 --> 00:02:40,140
users - to everybody - our pain we wanna

00:02:38,130 --> 00:02:41,430
run our systems everywhere we want to

00:02:40,140 --> 00:02:43,890
make sure that we are not being locked

00:02:41,430 --> 00:02:45,630
in and this is where we open

00:02:43,890 --> 00:02:47,280
collaboration right you also mentioned

00:02:45,630 --> 00:02:50,430
that that that's really a lot of value

00:02:47,280 --> 00:02:53,430
of open source the second thing is

00:02:50,430 --> 00:02:55,860
extensibility where you can extend and

00:02:53,430 --> 00:02:58,560
build on top of the technology and the

00:02:55,860 --> 00:03:01,740
last one I want to highlight is open

00:02:58,560 --> 00:03:03,420
standards so Google and Cloud Foundry

00:03:01,740 --> 00:03:06,150
and kuba rise community has been working

00:03:03,420 --> 00:03:08,000
on several open standards recently so

00:03:06,150 --> 00:03:11,790
you mentioned a OCI

00:03:08,000 --> 00:03:15,390
CSI clouds container storage interface

00:03:11,790 --> 00:03:19,140
that when beta in Cuba is 1.10 just a

00:03:15,390 --> 00:03:21,660
couple of months ago and by having those

00:03:19,140 --> 00:03:23,250
open standards and extensibility in open

00:03:21,660 --> 00:03:26,070
source this is where we can build those

00:03:23,250 --> 00:03:28,650
composable systems and really allow us

00:03:26,070 --> 00:03:31,050
to modernize and mix-and-match different

00:03:28,650 --> 00:03:34,290
framework different languages different

00:03:31,050 --> 00:03:37,110
platforms and before going to AC I want

00:03:34,290 --> 00:03:39,150
to announce that I really think that

00:03:37,110 --> 00:03:40,680
anyone on any Cloud Foundry user if they

00:03:39,150 --> 00:03:42,810
will come to Google cloud platform they

00:03:40,680 --> 00:03:44,430
will feel like home okay because all of

00:03:42,810 --> 00:03:47,070
those principles are things that we all

00:03:44,430 --> 00:03:49,380
live based on and I'm happy to announce

00:03:47,070 --> 00:03:52,080
that and next week we will make our

00:03:49,380 --> 00:03:55,440
managed service broker based on the open

00:03:52,080 --> 00:03:58,709
source broker API beta and we'll make it

00:03:55,440 --> 00:04:00,390
very easy to consume any GCP service

00:03:58,709 --> 00:04:01,769
starting with things like bigquery and

00:04:00,390 --> 00:04:04,380
Google cloud pub/sub

00:04:01,769 --> 00:04:06,230
from any kubernetes cluster but also it

00:04:04,380 --> 00:04:08,280
supports Cloud Foundry right so

00:04:06,230 --> 00:04:10,709
supporting this into probability that we

00:04:08,280 --> 00:04:11,910
talked about by open standards and when

00:04:10,709 --> 00:04:13,140
I think about that I mean we've we've

00:04:11,910 --> 00:04:14,970
thrown out a lot of things or talked

00:04:13,140 --> 00:04:18,090
about open service broker api and

00:04:14,970 --> 00:04:19,650
kubernetes initio but you know how are

00:04:18,090 --> 00:04:21,510
they all combining like what's the point

00:04:19,650 --> 00:04:23,669
I think it's where we keep coming back

00:04:21,510 --> 00:04:25,650
to as the services and extensibility to

00:04:23,669 --> 00:04:27,550
your point so you know where do you see

00:04:25,650 --> 00:04:30,530
those things coming together and your

00:04:27,550 --> 00:04:34,450
this is very clear comes to play this is

00:04:30,530 --> 00:04:36,650
a great way a great segue for East year

00:04:34,450 --> 00:04:38,890
so we talked about modernization that it

00:04:36,650 --> 00:04:41,750
can happen on different platforms so

00:04:38,890 --> 00:04:44,630
East EO is creating an obstruction in

00:04:41,750 --> 00:04:46,490
decouples the service management from

00:04:44,630 --> 00:04:49,910
decoded cell that built services so

00:04:46,490 --> 00:04:52,790
think of how you can achieve consistency

00:04:49,910 --> 00:04:56,000
for example with control traffic control

00:04:52,790 --> 00:04:58,370
a authentication for example with a

00:04:56,000 --> 00:04:59,900
telemetry observability into the

00:04:58,370 --> 00:05:01,730
services regardless of where those

00:04:59,900 --> 00:05:04,910
services are being deployed or being

00:05:01,730 --> 00:05:07,400
built on whatever platform and its say

00:05:04,910 --> 00:05:09,320
of course based on an invoice and the

00:05:07,400 --> 00:05:12,140
proxy by lift again leveraging open

00:05:09,320 --> 00:05:15,230
source technologies and I feel bad that

00:05:12,140 --> 00:05:19,070
by building that framework we can

00:05:15,230 --> 00:05:21,260
continue and allow flexibility but

00:05:19,070 --> 00:05:22,880
without compromising the consistency so

00:05:21,260 --> 00:05:25,310
if for example you want to apply a new

00:05:22,880 --> 00:05:27,050
policy you can do it simultaneously on

00:05:25,310 --> 00:05:28,550
all the services regardless of what

00:05:27,050 --> 00:05:30,290
platform it can be a cloud foundry

00:05:28,550 --> 00:05:33,020
service a kubernetes service a Google

00:05:30,290 --> 00:05:35,390
container kubernetes engine service or

00:05:33,020 --> 00:05:37,070
just their VM which is super powerful

00:05:35,390 --> 00:05:38,510
because at the end of the day it's

00:05:37,070 --> 00:05:40,880
really going to be about services and

00:05:38,510 --> 00:05:43,940
the availability of those services yes

00:05:40,880 --> 00:05:45,380
thank you which is exciting so we're and

00:05:43,940 --> 00:05:47,120
actually want a quick question because

00:05:45,380 --> 00:05:50,780
we've thrown around a lot of these

00:05:47,120 --> 00:05:57,470
technology terms does everyone here know

00:05:50,780 --> 00:06:00,260
what ich do actually is maybe you can

00:05:57,470 --> 00:06:02,060
give like a quick overview of what ich

00:06:00,260 --> 00:06:04,220
do actually is I think it's a pretty new

00:06:02,060 --> 00:06:05,750
term to the cloud foundry community and

00:06:04,220 --> 00:06:09,620
I know that's still not 100 yet but it

00:06:05,750 --> 00:06:11,890
would be good primer on what hto is so I

00:06:09,620 --> 00:06:14,660
would also tweet afterwards a great talk

00:06:11,890 --> 00:06:18,320
but one of the packages I think makes a

00:06:14,660 --> 00:06:20,120
great job explaining estion but in

00:06:18,320 --> 00:06:22,430
essence it's really decoupling the

00:06:20,120 --> 00:06:24,230
service management or operation of the

00:06:22,430 --> 00:06:26,510
services from the code itself so we're

00:06:24,230 --> 00:06:28,370
actually putting proxies everywhere in

00:06:26,510 --> 00:06:31,010
front of the service and while it gives

00:06:28,370 --> 00:06:34,730
us it gives a consistent layer to manage

00:06:31,010 --> 00:06:38,560
and it manage the traffic for example so

00:06:34,730 --> 00:06:41,260
it gives you control observability and

00:06:38,560 --> 00:06:43,720
security layer on top of those services

00:06:41,260 --> 00:06:45,640
and what we see from users right so this

00:06:43,720 --> 00:06:47,860
might seem like a very big change for

00:06:45,640 --> 00:06:50,080
you but what we see users doing the

00:06:47,860 --> 00:06:53,470
choosing pieces of the eesti or

00:06:50,080 --> 00:06:55,000
framework for their own use case so if

00:06:53,470 --> 00:06:56,940
you really care about telemetry and you

00:06:55,000 --> 00:06:59,470
want to make sure that you have all the

00:06:56,940 --> 00:07:01,570
metrics coming from all your services

00:06:59,470 --> 00:07:04,150
then you can use easier for that or if

00:07:01,570 --> 00:07:05,740
you care about insuring policies or

00:07:04,150 --> 00:07:07,210
traffic management for example then you

00:07:05,740 --> 00:07:10,480
can choose other things with these do

00:07:07,210 --> 00:07:12,220
that's awesome well I for one I'm really

00:07:10,480 --> 00:07:15,340
excited about what's to come with this

00:07:12,220 --> 00:07:17,170
Geo in kubernetes in 2018 and beyond and

00:07:15,340 --> 00:07:18,640
we're so thrilled to have you join us

00:07:17,170 --> 00:07:20,710
and talk a lot more about that with our

00:07:18,640 --> 00:07:21,470
community thank you so much and thank

00:07:20,710 --> 00:07:29,049
you very much

00:07:21,470 --> 00:07:29,049

YouTube URL: https://www.youtube.com/watch?v=hjnC3955Nf0


