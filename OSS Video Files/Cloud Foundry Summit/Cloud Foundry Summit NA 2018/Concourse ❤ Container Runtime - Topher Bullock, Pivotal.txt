Title: Concourse ❤ Container Runtime - Topher Bullock, Pivotal
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	Concourse ❤ Container Runtime - Topher Bullock, Pivotal

Concourse has become an indispensable CI/CD tool in the Cloud Foundry community and has been widely adopted to deploy CF on any infrastructure using BOSH, as well as deploy applications to the CF Application Runtime.The Concourse team is excited at the announcement of CF's new Container Runtime and the more granular control and management of containers it provides.

The new Container Runtime provides new opportunities for CF developers to deploy containerized workloads, and Concourse will be there to help the CF community deploy and manage those workloads... continuously!

Topher - the anchor of the core Concourse team at Pivotal - will cover how Concourse can help users deploy new containerized workloads to the Cloud Foundry Container Runtime and present new features on the roadmap aimed at capitalizing on this amazing new capability in the platform.

About Topher Bullock
Topher is a senior software engineer at Pivotal and is based out of the Toronto, Canada office. On the Pivotal Cloud R&D team he has experience working on distributed systems, infrastructure automation, Concourse, Cloud Foundry, Service Broker APIs, and Mobile Apps. Topher was recently selected as one of Canada's Software Developer Top 30 Under 30.
Captions: 
	00:00:00,450 --> 00:00:05,549
I'm Topher I'm on the Congress team at

00:00:02,820 --> 00:00:08,519
pivotal and I'm gonna talk about

00:00:05,549 --> 00:00:09,960
concourse and the container in time if

00:00:08,519 --> 00:00:13,290
you came to the keynotes this morning

00:00:09,960 --> 00:00:18,029
and you didn't sleep in you would have

00:00:13,290 --> 00:00:21,600
seen me demo basically concourse using

00:00:18,029 --> 00:00:24,269
kubernetes instead of scheduling

00:00:21,600 --> 00:00:26,970
containers in garden running pods and

00:00:24,269 --> 00:00:29,910
kubernetes Ike I just want to go over a

00:00:26,970 --> 00:00:31,199
little bit of like how I got to this and

00:00:29,910 --> 00:00:32,880
I like through the slide I was like yeah

00:00:31,199 --> 00:00:34,920
that's cool it's like we're like taking

00:00:32,880 --> 00:00:36,780
a great path in the product direction of

00:00:34,920 --> 00:00:38,340
concourse and we're like really like

00:00:36,780 --> 00:00:42,870
following the best fast really it's more

00:00:38,340 --> 00:00:45,660
like we're we're like seeing this fuzzy

00:00:42,870 --> 00:00:47,600
path and then we're figuring out the

00:00:45,660 --> 00:00:50,940
best way to like follow that path and

00:00:47,600 --> 00:00:53,340
figuring out sort of how to coexist

00:00:50,940 --> 00:00:55,020
much like Cloud Foundry is the talk

00:00:53,340 --> 00:00:56,489
before was talking about like why do I

00:00:55,020 --> 00:00:58,170
need kubernetes when I have cloud family

00:00:56,489 --> 00:00:59,910
already so like much like Cloud Foundry

00:00:58,170 --> 00:01:01,109
we're kind of figuring out now that like

00:00:59,910 --> 00:01:04,470
everyone's starting to use kubernetes

00:01:01,109 --> 00:01:06,150
we're really on this path to figure out

00:01:04,470 --> 00:01:08,369
like what's going on with kubernetes and

00:01:06,150 --> 00:01:10,710
like how developers are using it how

00:01:08,369 --> 00:01:11,880
people are using it with Concours so you

00:01:10,710 --> 00:01:16,049
might be asking like why are you looking

00:01:11,880 --> 00:01:19,460
at this now slides are like very slow to

00:01:16,049 --> 00:01:21,540
switch so we're changing a lot of things

00:01:19,460 --> 00:01:22,979
we're always changing things we're

00:01:21,540 --> 00:01:25,380
always kind of finding the best way to

00:01:22,979 --> 00:01:26,939
interact with the community finding the

00:01:25,380 --> 00:01:29,400
best way to serve the needs of the

00:01:26,939 --> 00:01:31,829
community so we're changing a lot of

00:01:29,400 --> 00:01:33,479
things in Turley with Concours as well

00:01:31,829 --> 00:01:35,790
as sort of how we interface with people

00:01:33,479 --> 00:01:37,680
in the community so we're changing how

00:01:35,790 --> 00:01:40,350
we document and support different

00:01:37,680 --> 00:01:43,049
deployments of Concours previously our

00:01:40,350 --> 00:01:45,329
Docs were very focused on here is how

00:01:43,049 --> 00:01:48,140
you Bosch deploy Concours and there's

00:01:45,329 --> 00:01:52,590
also binaries and docker images but you

00:01:48,140 --> 00:01:53,729
can figure out how to use those so we're

00:01:52,590 --> 00:01:56,250
kind of changing the way that we're

00:01:53,729 --> 00:01:59,549
documenting and supporting all that

00:01:56,250 --> 00:02:01,770
stuff and reworking some of the wording

00:01:59,549 --> 00:02:03,450
on our Docs to better support those

00:02:01,770 --> 00:02:05,310
different deployments we're also

00:02:03,450 --> 00:02:07,590
changing how workers register with a

00:02:05,310 --> 00:02:10,110
concourse cluster and we're also

00:02:07,590 --> 00:02:12,270
changing how volumes and containers on

00:02:10,110 --> 00:02:14,420
workers or garbage collected so go a

00:02:12,270 --> 00:02:16,440
little bit more into these things

00:02:14,420 --> 00:02:17,610
so this is blog posts that I'm kind of

00:02:16,440 --> 00:02:19,590
referencing a little bit when we're

00:02:17,610 --> 00:02:20,850
talking about it's like renewed focus of

00:02:19,590 --> 00:02:22,680
like how we interact with the community

00:02:20,850 --> 00:02:25,760
and how things are deployed

00:02:22,680 --> 00:02:28,200
Alex put a really good blog post about

00:02:25,760 --> 00:02:32,340
kind of the new website and also how

00:02:28,200 --> 00:02:34,080
we're changing the way that the docs

00:02:32,340 --> 00:02:35,850
talk about deploying so we're really

00:02:34,080 --> 00:02:37,860
focused on like simplifying the

00:02:35,850 --> 00:02:40,860
deployment and then moving all of the

00:02:37,860 --> 00:02:41,910
specific documentation it's not just the

00:02:40,860 --> 00:02:43,440
binaries here's how you're on the

00:02:41,910 --> 00:02:46,670
binaries we're moving all the specific

00:02:43,440 --> 00:02:48,810
documentation to separate github repos

00:02:46,670 --> 00:02:50,640
so that if you're interested in Bosch

00:02:48,810 --> 00:02:52,830
deployment you can go to the concours

00:02:50,640 --> 00:02:53,790
Bosch deployment repo and look there and

00:02:52,830 --> 00:02:55,080
you don't have to like read through the

00:02:53,790 --> 00:02:56,670
docs and find like we're in the docs do

00:02:55,080 --> 00:02:59,430
I do this and like it's become a really

00:02:56,670 --> 00:03:01,640
common thing for you know Bosch releases

00:02:59,430 --> 00:03:04,530
to have a deployment what kind of a

00:03:01,640 --> 00:03:06,000
hand-in-hand deployment repo that kind

00:03:04,530 --> 00:03:07,790
of has all the different scenarios for

00:03:06,000 --> 00:03:10,350
how you might want to deploy that thing

00:03:07,790 --> 00:03:12,060
we're also kind of focusing on the

00:03:10,350 --> 00:03:13,980
Concours docker repo and improving that

00:03:12,060 --> 00:03:15,570
as well and the big thing that we're

00:03:13,980 --> 00:03:18,540
focusing on is the Congress helm chart

00:03:15,570 --> 00:03:19,830
kind of related to kubernetes there's

00:03:18,540 --> 00:03:24,390
been a lot of great work in the

00:03:19,830 --> 00:03:26,100
community on this home shot and there's

00:03:24,390 --> 00:03:28,080
been a lot of great people out there

00:03:26,100 --> 00:03:30,860
working away on improving this helm

00:03:28,080 --> 00:03:35,270
chart it's out there it's in the stable

00:03:30,860 --> 00:03:38,010
directory in the kubernetes choice repo

00:03:35,270 --> 00:03:39,920
shadows a little trend in their former

00:03:38,010 --> 00:03:43,050
pivot who's been working away on that

00:03:39,920 --> 00:03:44,730
lots of great work from them and a lot

00:03:43,050 --> 00:03:47,280
of other great contributors who don't

00:03:44,730 --> 00:03:50,550
show up on the first page so I don't

00:03:47,280 --> 00:03:51,660
remember I'm sorry so we're taking all

00:03:50,550 --> 00:03:52,440
the great work on this helmet chart

00:03:51,660 --> 00:03:55,620
where people have been like really

00:03:52,440 --> 00:03:57,870
focusing on how to deploy kubernetes in

00:03:55,620 --> 00:04:00,540
a really reproducible way and we're

00:03:57,870 --> 00:04:02,070
bringing that into our main pipeline so

00:04:00,540 --> 00:04:03,600
this is our big like main testing

00:04:02,070 --> 00:04:05,610
pipeline for Concours this is how we

00:04:03,600 --> 00:04:07,140
like test releases for Concours we're

00:04:05,610 --> 00:04:08,610
bringing that into our pipeline we're

00:04:07,140 --> 00:04:10,670
putting the Concours stamp of approval

00:04:08,610 --> 00:04:13,080
on this helmet chart we're testing it

00:04:10,670 --> 00:04:15,180
this really doesn't show up well all

00:04:13,080 --> 00:04:18,450
those logos are blue blue logos man

00:04:15,180 --> 00:04:19,709
they're everywhere so we're putting our

00:04:18,450 --> 00:04:20,940
stamp of approval on this thing or

00:04:19,709 --> 00:04:21,979
saying we've tested this with this

00:04:20,940 --> 00:04:24,890
release of concourse

00:04:21,979 --> 00:04:27,000
so we're really going to focus on that

00:04:24,890 --> 00:04:27,630
and the next points are gonna relate it

00:04:27,000 --> 00:04:31,110
into the sea

00:04:27,630 --> 00:04:35,390
of the conference running at scale we've

00:04:31,110 --> 00:04:37,980
been running concourse at a big scale

00:04:35,390 --> 00:04:40,110
referencing more blog posts I wrote this

00:04:37,980 --> 00:04:42,570
post on our wings environment which is a

00:04:40,110 --> 00:04:45,990
huge scale concourse deployment that we

00:04:42,570 --> 00:04:52,040
use for teams within pivotal we have

00:04:45,990 --> 00:04:55,140
around 25 workers and 380 C's and a

00:04:52,040 --> 00:04:56,970
whole lot of teams using it I can't even

00:04:55,140 --> 00:05:00,600
remember the number of teams 75 teams

00:04:56,970 --> 00:05:03,120
thanks James and we built these sli

00:05:00,600 --> 00:05:06,570
dashboards and in the process of kind of

00:05:03,120 --> 00:05:08,580
running this giant concourse we've seen

00:05:06,570 --> 00:05:09,930
a lot of skill of scalability issues

00:05:08,580 --> 00:05:13,080
with the way that garbage collection

00:05:09,930 --> 00:05:14,820
happens so we're changing the way that

00:05:13,080 --> 00:05:17,400
garbage collection works and this seems

00:05:14,820 --> 00:05:19,710
like totally tangental to how this fits

00:05:17,400 --> 00:05:23,310
in with the theme of Carini's but I'll

00:05:19,710 --> 00:05:25,350
get there so currently GC is kind of

00:05:23,310 --> 00:05:28,440
centralized on an individual ATC and

00:05:25,350 --> 00:05:30,870
then that AGC will go out to all of the

00:05:28,440 --> 00:05:33,120
workers and remove anything it doesn't

00:05:30,870 --> 00:05:34,560
need so a build has finished I don't

00:05:33,120 --> 00:05:35,670
need this container anymore all the

00:05:34,560 --> 00:05:37,470
stuff that was running in there could

00:05:35,670 --> 00:05:38,730
just go away this build has gone green

00:05:37,470 --> 00:05:40,110
you don't need to worry about it anymore

00:05:38,730 --> 00:05:42,420
it's an old build that happened a long

00:05:40,110 --> 00:05:46,200
time ago it's gone green

00:05:42,420 --> 00:05:48,210
so we're looking more at distributing

00:05:46,200 --> 00:05:50,340
this work across the cluster instead of

00:05:48,210 --> 00:05:52,260
having this all happen on one ATC having

00:05:50,340 --> 00:05:54,540
it all reach out we're distributing work

00:05:52,260 --> 00:05:55,350
so let me kind of dig a little bit more

00:05:54,540 --> 00:05:57,690
into how this works

00:05:55,350 --> 00:05:59,190
so clearly the way that works is the AGC

00:05:57,690 --> 00:06:00,330
looks in the database that like all of

00:05:59,190 --> 00:06:02,340
the builds that have happened and all

00:06:00,330 --> 00:06:03,900
the volumes and containers related to

00:06:02,340 --> 00:06:05,730
them and it goes out to the worker and

00:06:03,900 --> 00:06:10,560
starts just telling it to delete things

00:06:05,730 --> 00:06:12,120
and then eventually that worker removes

00:06:10,560 --> 00:06:13,800
those containers or volumes these are

00:06:12,120 --> 00:06:15,060
just abstract representations of things

00:06:13,800 --> 00:06:19,740
don't take this is like a literal

00:06:15,060 --> 00:06:21,840
diagram of how anything works so with

00:06:19,740 --> 00:06:23,940
centralized GC and a large pool of

00:06:21,840 --> 00:06:25,950
workers the AGC talks to the database

00:06:23,940 --> 00:06:27,600
then it has to go and reach out to all

00:06:25,950 --> 00:06:29,610
these workers and delete all of these

00:06:27,600 --> 00:06:32,130
resources and when you have a very large

00:06:29,610 --> 00:06:36,450
cluster of Concours this can get really

00:06:32,130 --> 00:06:38,250
bad really quickly imagine this with 30

00:06:36,450 --> 00:06:41,310
workers on the screen and the amount of

00:06:38,250 --> 00:06:43,650
crazy red lines that I didn't want to

00:06:41,310 --> 00:06:46,800
draw in Google slides because it was

00:06:43,650 --> 00:06:48,270
hard to even draw this many so we're

00:06:46,800 --> 00:06:53,040
changing this we're kind of distributing

00:06:48,270 --> 00:06:54,780
the GC to the workers themselves so all

00:06:53,040 --> 00:06:57,740
the workers there will be this repr

00:06:54,780 --> 00:07:00,570
component just baked into the binary x'

00:06:57,740 --> 00:07:02,310
that goes out and talks to the ADC the

00:07:00,570 --> 00:07:03,930
AGC looks at the database when the

00:07:02,310 --> 00:07:06,120
Reapers like okay I'll leave these

00:07:03,930 --> 00:07:08,160
things locally on this worker so we're

00:07:06,120 --> 00:07:11,310
reducing the amount of communication

00:07:08,160 --> 00:07:13,950
that has to happen from the ATC to the

00:07:11,310 --> 00:07:16,380
event individual workers so the workers

00:07:13,950 --> 00:07:17,850
now just have these one single line

00:07:16,380 --> 00:07:19,830
which already happens when they're

00:07:17,850 --> 00:07:22,200
registering with the cluster so they can

00:07:19,830 --> 00:07:23,970
keep this state up-to-date so the ATC

00:07:22,200 --> 00:07:26,190
really now just needs to care about

00:07:23,970 --> 00:07:27,330
what's in the database and the workers

00:07:26,190 --> 00:07:32,850
are responsible for cleaning up that

00:07:27,330 --> 00:07:34,230
work so this really fits well with kind

00:07:32,850 --> 00:07:38,550
of the thoughts around kubernetes and

00:07:34,230 --> 00:07:40,890
moving things kind of implementing more

00:07:38,550 --> 00:07:42,620
support for kubernetes because now we

00:07:40,890 --> 00:07:44,700
don't need to really worry about

00:07:42,620 --> 00:07:46,590
distributing this work across this giant

00:07:44,700 --> 00:07:47,850
cluster the workers just phone home

00:07:46,590 --> 00:07:49,410
which they're already doing when they

00:07:47,850 --> 00:07:51,480
register with the concourse cluster and

00:07:49,410 --> 00:07:53,940
deal with that GC locally so there's

00:07:51,480 --> 00:07:56,280
less chatter going around and this big

00:07:53,940 --> 00:07:59,580
like basically DDoS of health workers

00:07:56,280 --> 00:08:03,330
that happens we're also changing worker

00:07:59,580 --> 00:08:05,550
registration so other people is he talks

00:08:03,330 --> 00:08:08,040
about Congress really likes Bosch

00:08:05,550 --> 00:08:09,780
it was our main like way of talking

00:08:08,040 --> 00:08:14,790
about deploying Concours in our

00:08:09,780 --> 00:08:16,800
documentation and as such we kind of

00:08:14,790 --> 00:08:18,930
built a lot of really good logic into

00:08:16,800 --> 00:08:20,850
the Bosch release so there's this ground

00:08:18,930 --> 00:08:24,080
crew job that deals with registering

00:08:20,850 --> 00:08:26,910
Bosch deployed concourse workers and

00:08:24,080 --> 00:08:29,400
when you do a Bosch deploy and say this

00:08:26,910 --> 00:08:31,410
is gonna scale down and remove one of

00:08:29,400 --> 00:08:35,520
your workers the worker that's getting

00:08:31,410 --> 00:08:37,500
removed will stop registering and then

00:08:35,520 --> 00:08:40,200
it will start draining so there's this

00:08:37,500 --> 00:08:41,520
drain script that runs that basically

00:08:40,200 --> 00:08:43,530
looks at garden and baggage claim and

00:08:41,520 --> 00:08:44,940
waits for any of the jobs that it's

00:08:43,530 --> 00:08:46,830
still running to go away so that it

00:08:44,940 --> 00:08:49,740
knows that it can safely like take

00:08:46,830 --> 00:08:51,810
itself out of the cluster and retire and

00:08:49,740 --> 00:08:55,180
this is all baked into the Bosch release

00:08:51,810 --> 00:08:58,020
and this is not supported previously

00:08:55,180 --> 00:09:00,010
on any of the binaries on kubernetes on

00:08:58,020 --> 00:09:01,720
basically anything that packages the

00:09:00,010 --> 00:09:05,500
binaries into a container so docker as

00:09:01,720 --> 00:09:08,529
well so we're kind of looking at all of

00:09:05,500 --> 00:09:14,140
this logic as like one big component now

00:09:08,529 --> 00:09:18,070
and shrinking it down into a go library

00:09:14,140 --> 00:09:19,750
just where did I go it's actually not

00:09:18,070 --> 00:09:23,680
worker dog oh it's just worker but it's

00:09:19,750 --> 00:09:25,510
a compile go binary anyways the binaries

00:09:23,680 --> 00:09:27,940
are more powerful now so we're baking

00:09:25,510 --> 00:09:32,170
all this logic into a shared goal I brer

00:09:27,940 --> 00:09:34,270
that's used by the binaries and I didn't

00:09:32,170 --> 00:09:36,520
finish the rest of this slide and docker

00:09:34,270 --> 00:09:40,750
and kubernetes so anything that packages

00:09:36,520 --> 00:09:42,459
the binaries also is getting this logic

00:09:40,750 --> 00:09:44,170
now for free we've taken all of this

00:09:42,459 --> 00:09:46,420
logic that was previously baked into the

00:09:44,170 --> 00:09:48,610
Bosh release and moved it into a shared

00:09:46,420 --> 00:09:50,589
binary so now we can leverage all of

00:09:48,610 --> 00:09:52,480
that within kubernetes and within docker

00:09:50,589 --> 00:09:54,670
and within kind of any way that you want

00:09:52,480 --> 00:09:58,080
to deploy it that's not polish so that's

00:09:54,670 --> 00:10:00,610
great now did the freedom friday

00:09:58,080 --> 00:10:04,660
experimentation that i showcased this

00:10:00,610 --> 00:10:06,339
morning so i had this idea of like an

00:10:04,660 --> 00:10:08,830
Orchestrator for Concours kind of

00:10:06,339 --> 00:10:10,779
supporting different components that

00:10:08,830 --> 00:10:13,420
could be used to schedule these

00:10:10,779 --> 00:10:14,980
containerized workloads for Concours so

00:10:13,420 --> 00:10:16,630
like I've got my concours build that's

00:10:14,980 --> 00:10:19,990
running and I want to like use the

00:10:16,630 --> 00:10:23,010
container runtime to execute my code to

00:10:19,990 --> 00:10:27,430
create containers and actually run my

00:10:23,010 --> 00:10:30,279
tests inside of it and I want to kind of

00:10:27,430 --> 00:10:31,959
move towards this new world of like the

00:10:30,279 --> 00:10:34,450
CF container runtime so cool right now

00:10:31,959 --> 00:10:37,630
everyone's talking about it here I don't

00:10:34,450 --> 00:10:40,060
want to use it currently we use garden

00:10:37,630 --> 00:10:41,380
and a lot of people kind of come to us

00:10:40,060 --> 00:10:43,630
and they say oh Cooper Nettie's is cool

00:10:41,380 --> 00:10:45,190
now and cloud foundry has a container

00:10:43,630 --> 00:10:46,540
runtime why don't you use it so I was

00:10:45,190 --> 00:10:49,470
like alright I'm gonna look into this

00:10:46,540 --> 00:10:51,399
I'm gonna see what that would look like

00:10:49,470 --> 00:10:53,020
so I looked at kubernetes and that's

00:10:51,399 --> 00:10:55,450
like ah kun Eddy's already supports jobs

00:10:53,020 --> 00:10:58,360
I've got my conquerors job that I want

00:10:55,450 --> 00:10:59,829
to like get into kubernetes but like

00:10:58,360 --> 00:11:04,150
kubernetes already has this thing called

00:10:59,829 --> 00:11:06,160
job so what's a job in kubernetes this

00:11:04,150 --> 00:11:08,110
is a giant quote basically a job runs

00:11:06,160 --> 00:11:08,980
something to completion it's very

00:11:08,110 --> 00:11:10,360
similar to what

00:11:08,980 --> 00:11:11,920
you would want from Concours from a test

00:11:10,360 --> 00:11:13,720
server you want to run through all your

00:11:11,920 --> 00:11:15,100
tests and have them exit at some point

00:11:13,720 --> 00:11:18,519
and then you get an exit status and

00:11:15,100 --> 00:11:20,230
you're good to go so this is basically a

00:11:18,519 --> 00:11:22,149
workload that you can schedule inside of

00:11:20,230 --> 00:11:23,800
kubernetes that will go out and create

00:11:22,149 --> 00:11:25,420
pods and containers for you and figure

00:11:23,800 --> 00:11:25,930
out which node is scheduled on all that

00:11:25,420 --> 00:11:27,910
fun stuff

00:11:25,930 --> 00:11:29,649
you just tell it what container image

00:11:27,910 --> 00:11:31,750
you want what volumes you want to bound

00:11:29,649 --> 00:11:34,240
into it say your get repo and all of

00:11:31,750 --> 00:11:35,800
your source code and everything and then

00:11:34,240 --> 00:11:38,769
what command you want to run your test

00:11:35,800 --> 00:11:45,160
command so I kind of got to work looking

00:11:38,769 --> 00:11:46,839
at here's my task definition my yeah

00:11:45,160 --> 00:11:50,139
mole here's more Enterprise yeah animal

00:11:46,839 --> 00:11:52,560
for you that I would define for a

00:11:50,139 --> 00:11:56,529
concourse job that just goes out and

00:11:52,560 --> 00:12:01,290
runs the unit tests for booklet open

00:11:56,529 --> 00:12:03,610
source documentation language of science

00:12:01,290 --> 00:12:06,970
and basically take all of those things

00:12:03,610 --> 00:12:08,220
and convert it over into what a job spec

00:12:06,970 --> 00:12:12,399
would be and this is like a giant

00:12:08,220 --> 00:12:18,459
representation of one big job step job

00:12:12,399 --> 00:12:21,930
spec rather so slicing it up and kind of

00:12:18,459 --> 00:12:21,930
talking about individual parts of that

00:12:22,050 --> 00:12:26,649
I'm using route if s you are you are I

00:12:24,550 --> 00:12:29,639
here instead of imagery source for ease

00:12:26,649 --> 00:12:31,779
of use basically ease of hacking this in

00:12:29,639 --> 00:12:34,600
but I know I want to create a container

00:12:31,779 --> 00:12:36,459
that's using the docker image going so I

00:12:34,600 --> 00:12:38,649
know in my job spec I need to define a

00:12:36,459 --> 00:12:40,420
container that has that image I also

00:12:38,649 --> 00:12:43,420
know that I'm mounting in the source

00:12:40,420 --> 00:12:46,000
code for booklet and concourse inputs

00:12:43,420 --> 00:12:48,010
are basically giving a directory from

00:12:46,000 --> 00:12:49,540
some resource that's just a get of that

00:12:48,010 --> 00:12:51,519
resource just download all of the bits

00:12:49,540 --> 00:12:55,480
of that resource and store it in this

00:12:51,519 --> 00:12:57,519
path inside of the test tasks container

00:12:55,480 --> 00:12:58,839
so I know that I want to mount some

00:12:57,519 --> 00:13:01,300
volume in there and I'll just give it

00:12:58,839 --> 00:13:04,269
some good and track it inside of my pod

00:13:01,300 --> 00:13:06,310
and I need to mount that volume inside

00:13:04,269 --> 00:13:11,050
of my job spec as well inside of the pod

00:13:06,310 --> 00:13:12,850
that's in my job and then the run path

00:13:11,050 --> 00:13:14,680
is just the command that I want to run

00:13:12,850 --> 00:13:17,050
inside of that container so it's sort of

00:13:14,680 --> 00:13:19,240
starting to like build up this spec for

00:13:17,050 --> 00:13:21,220
a cooler Nettie's job just by like

00:13:19,240 --> 00:13:22,329
picking off pieces that are already

00:13:21,220 --> 00:13:25,179
expressed

00:13:22,329 --> 00:13:27,970
in the concourse um oh and this is where

00:13:25,179 --> 00:13:30,129
it gets a little bit interesting so to

00:13:27,970 --> 00:13:33,009
get those inputs from somewhere the way

00:13:30,129 --> 00:13:34,899
that it works now is that concourse goes

00:13:33,009 --> 00:13:37,660
out to this thing called baggage claim

00:13:34,899 --> 00:13:40,660
which is basically our big server for

00:13:37,660 --> 00:13:42,670
directories it's a little bit more

00:13:40,660 --> 00:13:44,170
complicated that it uses special file

00:13:42,670 --> 00:13:45,819
systems underneath to make coffee on

00:13:44,170 --> 00:13:48,759
write volumes but you can just think of

00:13:45,819 --> 00:13:50,379
it as a server for directories I can

00:13:48,759 --> 00:13:52,089
make an API call and give it some good

00:13:50,379 --> 00:13:53,529
and I can get a directory and just

00:13:52,089 --> 00:13:55,480
download the bits into this container

00:13:53,529 --> 00:13:57,910
and garden lets us mount those

00:13:55,480 --> 00:14:00,699
containers into it or not those volumes

00:13:57,910 --> 00:14:02,259
into the containers directly but with

00:14:00,699 --> 00:14:03,970
kubernetes kind of moving these baggage

00:14:02,259 --> 00:14:05,589
playing volumes around became a little

00:14:03,970 --> 00:14:08,170
bit weird because I had to worry about

00:14:05,589 --> 00:14:10,269
Oh what node is it running on I'm not as

00:14:08,170 --> 00:14:12,100
close to like scheduling this thing on

00:14:10,269 --> 00:14:14,559
this specific garden host or the

00:14:12,100 --> 00:14:16,360
specific kubernetes host I need to like

00:14:14,559 --> 00:14:18,939
leave it up to the scheduler to kind of

00:14:16,360 --> 00:14:20,860
figure this out but kubernetes has these

00:14:18,939 --> 00:14:24,850
cool things called init containers so I

00:14:20,860 --> 00:14:26,679
was able to actually say hopefully

00:14:24,850 --> 00:14:28,360
create this special image called

00:14:26,679 --> 00:14:30,309
conveyor which basically just talks to

00:14:28,360 --> 00:14:31,959
baggage claim that's deployed inside of

00:14:30,309 --> 00:14:34,809
kubernetes that gives me this like

00:14:31,959 --> 00:14:36,369
volume server inside of kubernetes it's

00:14:34,809 --> 00:14:40,179
a total hack job but it worked for the

00:14:36,369 --> 00:14:42,009
demo kubernetes also has volumes and

00:14:40,179 --> 00:14:43,209
this is one of kind of the big open

00:14:42,009 --> 00:14:45,939
questions for me is how to better

00:14:43,209 --> 00:14:47,949
leverage volumes inside of kubernetes to

00:14:45,939 --> 00:14:50,350
avoid having this weird in a container

00:14:47,949 --> 00:14:51,759
that like talks out to baggage claim and

00:14:50,350 --> 00:14:55,899
kind of make everything more centralized

00:14:51,759 --> 00:14:57,369
inside of my crew Nettie's cluster so

00:14:55,899 --> 00:14:59,199
there's this weird baggage claim kind of

00:14:57,369 --> 00:15:01,660
off to the right side here hidden behind

00:14:59,199 --> 00:15:03,669
it's actually really effectively hidden

00:15:01,660 --> 00:15:05,169
behind the curtain here just this arrow

00:15:03,669 --> 00:15:07,809
just kind of points into the curtain so

00:15:05,169 --> 00:15:09,489
it's great so this was kind of like the

00:15:07,809 --> 00:15:11,230
hidden parts of that demo this morning

00:15:09,489 --> 00:15:13,660
we're like there's this weird bit where

00:15:11,230 --> 00:15:15,730
the stateful set just has a baggage

00:15:13,660 --> 00:15:17,649
claim server running on it and volumes

00:15:15,730 --> 00:15:19,980
get kind of shifted around between this

00:15:17,649 --> 00:15:22,419
thing and stored into a volume

00:15:19,980 --> 00:15:27,220
kubernetes volume that is attached to

00:15:22,419 --> 00:15:28,629
that baggage claim server so basically

00:15:27,220 --> 00:15:33,269
the idea with the concourse Orchestrator

00:15:28,629 --> 00:15:36,160
is to have the ATC implement this very

00:15:33,269 --> 00:15:39,110
honed interface that

00:15:36,160 --> 00:15:40,579
expresses all the things that the ATC

00:15:39,110 --> 00:15:42,290
might eventually want something to

00:15:40,579 --> 00:15:44,329
create a container for and then

00:15:42,290 --> 00:15:46,579
generalize that so the first step was

00:15:44,329 --> 00:15:51,829
related Generale generalize it for a

00:15:46,579 --> 00:15:53,930
whole cluster of garden hosts and move

00:15:51,829 --> 00:15:56,420
all of that logic within the ATC over

00:15:53,930 --> 00:15:58,100
there and then move it into this thing

00:15:56,420 --> 00:16:01,249
that implements the orchestrator

00:15:58,100 --> 00:16:03,290
interface for garden and then just take

00:16:01,249 --> 00:16:04,670
the stubbed-out empty interface and just

00:16:03,290 --> 00:16:09,110
start throwing all of this kubernetes

00:16:04,670 --> 00:16:11,839
stuff into it but as I kind of did that

00:16:09,110 --> 00:16:13,279
I was like where am I going with this

00:16:11,839 --> 00:16:15,529
where are we going with this

00:16:13,279 --> 00:16:18,439
this is like very hacked a project

00:16:15,529 --> 00:16:19,639
approach to getting this in and I kind

00:16:18,439 --> 00:16:21,740
of came out with more questions than

00:16:19,639 --> 00:16:24,589
answers there's a lot of questions about

00:16:21,740 --> 00:16:25,639
our kubernetes jobs really the thing

00:16:24,589 --> 00:16:27,620
that I want to be using for this

00:16:25,639 --> 00:16:29,389
everyone keeps saying custom resource

00:16:27,620 --> 00:16:31,850
definitions and like I should make my

00:16:29,389 --> 00:16:33,709
own controller for scheduling all this

00:16:31,850 --> 00:16:35,420
stuff but there's like some very special

00:16:33,709 --> 00:16:37,189
concourse e things that the AGC knows

00:16:35,420 --> 00:16:38,749
that then the controller would also need

00:16:37,189 --> 00:16:41,269
to know so then there's more questions

00:16:38,749 --> 00:16:42,980
there there's the volume management

00:16:41,269 --> 00:16:45,110
question should I be using persistent

00:16:42,980 --> 00:16:46,790
volumes inside of kubernetes to store

00:16:45,110 --> 00:16:48,550
all this stuff inside the cluster itself

00:16:46,790 --> 00:16:52,309
instead of this weird baggage claim

00:16:48,550 --> 00:16:54,680
deployed inside of kubernetes an image

00:16:52,309 --> 00:16:56,209
resource support I kind of glossed over

00:16:54,680 --> 00:16:58,939
this a little bit but I was using just

00:16:56,209 --> 00:17:01,100
the straight route FS URI which in our

00:16:58,939 --> 00:17:02,990
Docs we actually tell people you

00:17:01,100 --> 00:17:05,360
shouldn't use and you should use imagery

00:17:02,990 --> 00:17:07,459
source because it's kind of versioned in

00:17:05,360 --> 00:17:10,100
the same way that all of your pipeline

00:17:07,459 --> 00:17:11,539
resources are but there's a lot of tools

00:17:10,100 --> 00:17:15,260
in ordering to kind of support building

00:17:11,539 --> 00:17:17,809
images inside of kubernetes so that's

00:17:15,260 --> 00:17:23,750
where the RFC comes in this is just a

00:17:17,809 --> 00:17:26,839
big request for comments for everyone to

00:17:23,750 --> 00:17:29,720
kind of collect together and tell me all

00:17:26,839 --> 00:17:33,610
the things I did wrong

00:17:29,720 --> 00:17:36,049
and this kind of goes over more in depth

00:17:33,610 --> 00:17:41,270
more than I could possibly fit into this

00:17:36,049 --> 00:17:42,919
talk the details of kind of specific

00:17:41,270 --> 00:17:44,299
terminology that's weird like oh there's

00:17:42,919 --> 00:17:45,980
kubernetes volumes and there's by

00:17:44,299 --> 00:17:47,200
achieving volumes and like kind of

00:17:45,980 --> 00:17:48,940
clarifying how

00:17:47,200 --> 00:17:51,490
talk about implementing this inside of

00:17:48,940 --> 00:17:54,700
concourse and summary of some of the

00:17:51,490 --> 00:17:56,919
proposed changes and a giant list of

00:17:54,700 --> 00:17:58,630
open questions and kind of caveats about

00:17:56,919 --> 00:18:00,309
like how do we actually implement this

00:17:58,630 --> 00:18:03,519
how do we do this in a very calm Corsi

00:18:00,309 --> 00:18:05,049
way so that we do it the right way and

00:18:03,519 --> 00:18:08,529
that we also leave it open to support

00:18:05,049 --> 00:18:09,899
other container backends in the future

00:18:08,529 --> 00:18:12,519
there might be something other than

00:18:09,899 --> 00:18:14,740
kubernetes in garden that people might

00:18:12,519 --> 00:18:16,149
want to use or even people implementing

00:18:14,740 --> 00:18:17,350
their own schedulers so maybe they want

00:18:16,149 --> 00:18:18,789
to use garden but they want to kind of

00:18:17,350 --> 00:18:19,990
change the way that things are scheduled

00:18:18,789 --> 00:18:20,950
on garden they have all these garden

00:18:19,990 --> 00:18:25,210
hosts that they're managing themselves

00:18:20,950 --> 00:18:27,309
and they have a bit more needs out of

00:18:25,210 --> 00:18:28,510
the scheduler but it's not necessarily

00:18:27,309 --> 00:18:31,830
something that needs to be inside of a

00:18:28,510 --> 00:18:35,590
concourse proper so yeah just a lot of

00:18:31,830 --> 00:18:37,090
open questions and then I have this

00:18:35,590 --> 00:18:38,830
shameless plug for spring one there's a

00:18:37,090 --> 00:18:40,960
attendee discount if you want to go to

00:18:38,830 --> 00:18:55,419
that I'll be there talking about

00:18:40,960 --> 00:19:02,289
concourse stuff that's really questions

00:18:55,419 --> 00:19:06,070
yeah basically the amount of people who

00:19:02,289 --> 00:19:09,279
are using kubernetes the own people not

00:19:06,070 --> 00:19:11,950
only from like the pool of pivotal

00:19:09,279 --> 00:19:13,210
customers being kind of a project

00:19:11,950 --> 00:19:15,760
sponsored by pivotal we're really close

00:19:13,210 --> 00:19:17,580
with like people who are pivotal

00:19:15,760 --> 00:19:20,399
customers who are using PKS our

00:19:17,580 --> 00:19:23,559
distribution of the container runtime

00:19:20,399 --> 00:19:25,389
but also just random people in the open

00:19:23,559 --> 00:19:27,820
source community who are like I'm using

00:19:25,389 --> 00:19:30,220
the helm chart and it's great are you

00:19:27,820 --> 00:19:31,840
guys gonna officially support it are you

00:19:30,220 --> 00:19:34,000
gonna support like what have you thought

00:19:31,840 --> 00:19:35,679
about running kubernetes runtime and

00:19:34,000 --> 00:19:37,779
like having it scheduled pods instead of

00:19:35,679 --> 00:19:39,399
garden containers so basically just

00:19:37,779 --> 00:19:41,529
enough people asking about it that I was

00:19:39,399 --> 00:19:49,380
like all right okay I'm gonna go do it

00:19:41,529 --> 00:19:49,380
and their questions

00:19:53,830 --> 00:19:59,000
so the hope is that once the RFC kind of

00:19:57,140 --> 00:20:00,860
gets enough traction and we kind of like

00:19:59,000 --> 00:20:03,350
stabilize the discussion around it and

00:20:00,860 --> 00:20:04,940
we come to like a consensus within the

00:20:03,350 --> 00:20:07,280
Concours community that eventually we

00:20:04,940 --> 00:20:08,750
can move towards supporting this and I

00:20:07,280 --> 00:20:10,490
guess the one big thing that I didn't

00:20:08,750 --> 00:20:13,580
talk about too much was the amount of

00:20:10,490 --> 00:20:16,450
stuff that I learned just building the

00:20:13,580 --> 00:20:19,960
top half of this or branch here of like

00:20:16,450 --> 00:20:22,970
refactoring concourse itself to support

00:20:19,960 --> 00:20:25,520
this interface actually drew out a lot

00:20:22,970 --> 00:20:27,020
of things where we could improve the way

00:20:25,520 --> 00:20:29,840
that we schedule things in garden itself

00:20:27,020 --> 00:20:32,120
and sort of cleaning up the interface

00:20:29,840 --> 00:20:35,210
within concours I think would also help

00:20:32,120 --> 00:20:38,120
us to get more contributors and get

00:20:35,210 --> 00:20:40,670
people to contribute back to the way

00:20:38,120 --> 00:20:42,980
that we perform all these operations

00:20:40,670 --> 00:20:45,559
because there's a lot of things that are

00:20:42,980 --> 00:20:46,970
really in timed with within the code

00:20:45,559 --> 00:20:48,260
where we're storing things in the

00:20:46,970 --> 00:20:50,030
database and then we're also like

00:20:48,260 --> 00:20:51,559
there's like objects that deal with the

00:20:50,030 --> 00:20:53,150
database and with garden and they're

00:20:51,559 --> 00:20:56,360
kind of just like mashed together and

00:20:53,150 --> 00:20:58,280
it's just like do all the things so like

00:20:56,360 --> 00:20:59,990
cleaning up this interface is a really

00:20:58,280 --> 00:21:02,540
good exercise for us and I think that's

00:20:59,990 --> 00:21:05,000
kind of gonna be the path for us to get

00:21:02,540 --> 00:21:07,330
more people contributing to concourse

00:21:05,000 --> 00:21:07,330
itself

00:21:32,860 --> 00:21:40,809
yeah I think the big thing is having a

00:21:37,200 --> 00:21:44,769
scheduler that is more mature than

00:21:40,809 --> 00:21:47,950
concourse is own scheduler we've really

00:21:44,769 --> 00:21:51,130
tried to kind of make the the selection

00:21:47,950 --> 00:21:53,350
of a specific garden host something

00:21:51,130 --> 00:21:55,029
that's really efficient for specific

00:21:53,350 --> 00:21:57,460
scenarios then we also just have a

00:21:55,029 --> 00:22:00,669
random option where we just pick

00:21:57,460 --> 00:22:03,549
whatever one who will support it so

00:22:00,669 --> 00:22:04,960
having like a more mature scheduler is

00:22:03,549 --> 00:22:06,909
something that's really gonna be useful

00:22:04,960 --> 00:22:07,779
because a lot of times and this is

00:22:06,909 --> 00:22:10,630
something we're gonna have to actually

00:22:07,779 --> 00:22:12,340
start implementing ourselves is managing

00:22:10,630 --> 00:22:14,019
the resources on those specific garden

00:22:12,340 --> 00:22:16,389
house and like we're basically gonna be

00:22:14,019 --> 00:22:19,330
implementing Cooper phase it it feels

00:22:16,389 --> 00:22:21,730
like inside of concourse so it kind of

00:22:19,330 --> 00:22:23,620
loses us to look at this as like okay

00:22:21,730 --> 00:22:25,510
lots of people are using it can we

00:22:23,620 --> 00:22:28,720
leverage this kind of more mature

00:22:25,510 --> 00:22:31,360
container scheduler to improve the way

00:22:28,720 --> 00:22:34,470
that it runs on kubernetes and the

00:22:31,360 --> 00:22:38,260
containers in containers is also really

00:22:34,470 --> 00:22:39,549
it trips to blow up a lot and people run

00:22:38,260 --> 00:22:43,059
into a lot of problems with like nested

00:22:39,549 --> 00:22:46,960
overlay file systems actually the Helton

00:22:43,059 --> 00:22:48,940
chart by default now is using the naive

00:22:46,960 --> 00:22:50,190
driver for baggage claim so I glossed

00:22:48,940 --> 00:22:52,419
over baggage claim a little bit

00:22:50,190 --> 00:22:56,470
basically the underlying file system

00:22:52,419 --> 00:22:59,080
drivers can be overlay FS or butter FS

00:22:56,470 --> 00:23:00,340
or just like used whatever the file

00:22:59,080 --> 00:23:02,860
system is just throw stuff in

00:23:00,340 --> 00:23:04,480
directories don't worry about it and

00:23:02,860 --> 00:23:06,580
that removes all ability to make

00:23:04,480 --> 00:23:12,100
copy-on-write volumes which are

00:23:06,580 --> 00:23:15,940
basically how to describe it without

00:23:12,100 --> 00:23:21,309
just saying coffee on right basically it

00:23:15,940 --> 00:23:23,500
lets us mount volumes that are a copy of

00:23:21,309 --> 00:23:26,740
the original resource cache so when you

00:23:23,500 --> 00:23:28,269
go and download your git repo we cache

00:23:26,740 --> 00:23:30,250
that volume and then when you're

00:23:28,269 --> 00:23:30,789
inputting it into a task and doing stuff

00:23:30,250 --> 00:23:33,309
with it

00:23:30,789 --> 00:23:38,230
we don't mutate the original cache so

00:23:33,309 --> 00:23:41,020
right now the helm chart for Concours

00:23:38,230 --> 00:23:43,120
defaults to naive so it just copies the

00:23:41,020 --> 00:23:45,340
directory over it's literally just a

00:23:43,120 --> 00:23:46,680
copy instead of this fancy dancy

00:23:45,340 --> 00:23:51,210
copy-on-write minimal

00:23:46,680 --> 00:23:54,020
definitive vows so yeah lots of

00:23:51,210 --> 00:23:54,020
considerations there

00:23:58,990 --> 00:24:02,280
cool I'll be around if anyone else has

00:24:01,090 --> 00:24:07,760
questions

00:24:02,280 --> 00:24:07,760

YouTube URL: https://www.youtube.com/watch?v=NrYIt2cQZkg


