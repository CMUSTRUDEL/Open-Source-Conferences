Title: SaaSB - One Broker to Rule Them All - Christian Brinker, evoila
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	SaaSB - One Broker to Rule Them All - Christian Brinker, evoila

 At the foot of mount coal there was forged a service broker. One Broker to rule them all. For the hackathon at the CF Summit Europe 2017 the fellowship of the broker came together to bring Cloud Foundry a service broker to enable access to the marketplace for all of the apps deployed to Cloud Foundry.

Cloud Foundry helps developers to deploy their applications in a fast and easy manner. Thereby one of the key benefits is usage of services from the marketplace. But one problem remains. The high isolation between platform users leads to a lack of interaction points between them. Either sharing solutions between departments in private clouds or monetizing your applications in public clouds is well support.

But why not providing your apps through the marketplace to other platform users? This addresses the winning team of the CF Summit Europe 2017 hackathon with their Software-as-a-Service-Broker. A service broker allowing the platform provider to enable offerings of apps in the marketplace. Normally this needs the development of a new service broker for each kind of app. The SaaSB even enables for a pay-as-you-go selling of the apps via the platform provider.

“One Broker to rule them all,
One Broker to find them;
One Broker to bring them to all
and in Cloud Foundry bind them.” 

About Christian Brinker
As long-standing member of the evoila Automation and Technology team and Automation Engineer Christian Brinker is well experienced in the automation of cloud environments. His focus is the development of software architectures in customized XaaS solutions.

He developed many solutions in and for the Cloud Foundry ecosystem, like service brokers or complex billing systems for Cloud Foundry and OpenStack.

On the CF Summit Europe 2016 and 2017 he presented his teams work on a service broker framework. At the CF Summit Europe 2017 he was track co-chair of the cloud & microservices track and his team won the hackathon. He is also ambassador of the Cloud Foundry foundation. Additionally he gained broad experience as a data scientist resulting in publications and presentations on international conferences.

Christian Brinker works at an agile, German-based cloud engineering and consulting company. The evoila GmbH develops cloud strategies and engineers tools for cloud enablement and improvement. Their customers are small companies, global players and the public sector.
Captions: 
	00:00:00,000 --> 00:00:05,759
okay welcome everybody Cristiano I can

00:00:03,750 --> 00:00:10,380
talk about what we call soft as a

00:00:05,759 --> 00:00:12,710
service broker and at the start we want

00:00:10,380 --> 00:00:14,969
to talk about the California marketplace

00:00:12,710 --> 00:00:18,600
currently if you look in the marketplace

00:00:14,969 --> 00:00:26,029
there's typically around nine to fifteen

00:00:18,600 --> 00:00:30,300
data services present in many cases less

00:00:26,029 --> 00:00:31,470
but la foundry is about getting the best

00:00:30,300 --> 00:00:33,660
developer experience

00:00:31,470 --> 00:00:38,329
so all these developers creating new

00:00:33,660 --> 00:00:40,910
micro services and often they do they

00:00:38,329 --> 00:00:43,410
didn't know that somebody has already

00:00:40,910 --> 00:00:45,989
created micro services they're currently

00:00:43,410 --> 00:00:54,180
working on so they do this over and over

00:00:45,989 --> 00:00:57,300
creating redundant micro services so we

00:00:54,180 --> 00:00:59,010
thought we could create a transform this

00:00:57,300 --> 00:01:00,989
marketplace so something like a stock

00:00:59,010 --> 00:01:03,000
exchange

00:01:00,989 --> 00:01:08,250
where all these micro services could

00:01:03,000 --> 00:01:11,610
reducer and you couldn't get rid of the

00:01:08,250 --> 00:01:16,049
services kaveri so you can improve the

00:01:11,610 --> 00:01:20,040
developer experience again because you

00:01:16,049 --> 00:01:33,780
don't have to repeat the work somebody

00:01:20,040 --> 00:01:36,869
else already did so last year battle at

00:01:33,780 --> 00:01:39,119
the CF summer europe we created this

00:01:36,869 --> 00:01:43,560
software as a service broker as part of

00:01:39,119 --> 00:01:47,329
the hackathon three through pillar of

00:01:43,560 --> 00:01:52,189
our company as to christian miller and

00:01:47,329 --> 00:01:58,680
constantine keys from fox bargain

00:01:52,189 --> 00:02:01,229
financial services and we want yeah

00:01:58,680 --> 00:02:04,140
what's the idea behind this and what did

00:02:01,229 --> 00:02:05,520
we do normally you could say access to

00:02:04,140 --> 00:02:08,940
the marketplace for that we have the

00:02:05,520 --> 00:02:11,220
service brokers but if you're looking in

00:02:08,940 --> 00:02:13,740
big companies like for example fox wagon

00:02:11,220 --> 00:02:16,260
and you often have this problem that

00:02:13,740 --> 00:02:19,560
and we have a lot bunch of developers

00:02:16,260 --> 00:02:22,530
not coming from cloud native development

00:02:19,560 --> 00:02:24,870
not coming from micro services so they

00:02:22,530 --> 00:02:27,480
are struggle with getting their new

00:02:24,870 --> 00:02:31,130
development things to be micro services

00:02:27,480 --> 00:02:35,340
they are not cloud ready software to be

00:02:31,130 --> 00:02:38,340
to be available and so there's a lot of

00:02:35,340 --> 00:02:41,490
effort in transforming the IT

00:02:38,340 --> 00:02:45,060
inside of these big enterprise companies

00:02:41,490 --> 00:02:47,310
and so they they bring up their the

00:02:45,060 --> 00:02:50,880
cloud they bring up their apps to the to

00:02:47,310 --> 00:02:53,040
the marketer to the - that's platform

00:02:50,880 --> 00:02:55,770
and often they have these regulations at

00:02:53,040 --> 00:02:58,500
the start and where they have to put

00:02:55,770 --> 00:02:59,940
ultimate things and not for all the

00:02:58,500 --> 00:03:02,070
things they need there is a service

00:02:59,940 --> 00:03:04,410
broker and making a service broker takes

00:03:02,070 --> 00:03:07,080
time in there it has to be adjusted

00:03:04,410 --> 00:03:08,970
there has to be done stuff in in the

00:03:07,080 --> 00:03:10,980
later on it has to be maintenance and

00:03:08,970 --> 00:03:15,260
you have to know about the open service

00:03:10,980 --> 00:03:18,390
broker API so this is another type of

00:03:15,260 --> 00:03:21,570
knowledge you have to do have and if you

00:03:18,390 --> 00:03:24,060
have if you look at some service broker

00:03:21,570 --> 00:03:27,270
and their life cycle and you see that

00:03:24,060 --> 00:03:30,000
it's not that easily I'm done and our

00:03:27,270 --> 00:03:32,490
idea was to make it easier to get these

00:03:30,000 --> 00:03:36,120
services they do first in the

00:03:32,490 --> 00:03:38,280
marketplace to be available beforehand

00:03:36,120 --> 00:03:41,240
you have to have for each of the the

00:03:38,280 --> 00:03:44,360
smaller things you have to adjust to be

00:03:41,240 --> 00:03:46,860
to be there a service broker and

00:03:44,360 --> 00:03:49,410
distinct one for each service because

00:03:46,860 --> 00:03:51,300
you do not know if this thing this

00:03:49,410 --> 00:03:53,250
little micro service you do is something

00:03:51,300 --> 00:03:54,900
other people need but you have to make

00:03:53,250 --> 00:03:56,280
it transparent in this big company

00:03:54,900 --> 00:03:58,410
because you do not know the other

00:03:56,280 --> 00:03:59,880
developers the other developer teams

00:03:58,410 --> 00:04:02,640
because you do not know what they're

00:03:59,880 --> 00:04:06,090
doing but maybe you have shared

00:04:02,640 --> 00:04:08,700
interests so we need this workflow you

00:04:06,090 --> 00:04:10,290
have to share with the others and if you

00:04:08,700 --> 00:04:12,750
look at service broker what is it doing

00:04:10,290 --> 00:04:17,010
um you're in developer you're developing

00:04:12,750 --> 00:04:20,190
an app and you're trying to do you make

00:04:17,010 --> 00:04:22,710
it available in the marketplace so you

00:04:20,190 --> 00:04:25,890
try to use a service what you go do is

00:04:22,710 --> 00:04:27,450
use just yell I'm for example connect to

00:04:25,890 --> 00:04:29,730
the cloud controller

00:04:27,450 --> 00:04:31,770
and they're asked in the market look in

00:04:29,730 --> 00:04:33,360
the marketplace what they are and ask

00:04:31,770 --> 00:04:35,340
for some service create a service

00:04:33,360 --> 00:04:37,230
instance then the cart controller goes

00:04:35,340 --> 00:04:39,390
to this awesome thing called service

00:04:37,230 --> 00:04:42,570
broker and asked and can you do that for

00:04:39,390 --> 00:04:44,280
me I don't know what it is do it for me

00:04:42,570 --> 00:04:47,100
I need some it service instance for some

00:04:44,280 --> 00:04:48,690
guy and then it creates the service

00:04:47,100 --> 00:04:52,410
broker knows how to create this service

00:04:48,690 --> 00:04:54,870
so it's kind of an adapter to the domain

00:04:52,410 --> 00:04:56,610
knowledge of that service and you get

00:04:54,870 --> 00:04:58,830
the service instance back and get

00:04:56,610 --> 00:05:00,900
credentials maybe if you make a have a

00:04:58,830 --> 00:05:03,420
bindable service for your application so

00:05:00,900 --> 00:05:05,130
you get created dangerous insert it in

00:05:03,420 --> 00:05:07,380
your environment of your application

00:05:05,130 --> 00:05:09,060
container and then your application can

00:05:07,380 --> 00:05:14,040
use these credentials to access the

00:05:09,060 --> 00:05:15,600
service but what does that mean if you

00:05:14,040 --> 00:05:18,480
have two applications in your cloud

00:05:15,600 --> 00:05:21,240
foundry which have to be connected how

00:05:18,480 --> 00:05:23,220
can you do that and our idea was then to

00:05:21,240 --> 00:05:27,050
create a service broker for that where

00:05:23,220 --> 00:05:29,310
you can register other applications to

00:05:27,050 --> 00:05:31,770
normally you have to have domain

00:05:29,310 --> 00:05:33,840
knowledge for that but we do not know in

00:05:31,770 --> 00:05:36,990
our idea what these other applications

00:05:33,840 --> 00:05:38,850
are so we have known to my knowledge we

00:05:36,990 --> 00:05:42,420
only know that we want to have this

00:05:38,850 --> 00:05:46,830
application in the marketplace so what

00:05:42,420 --> 00:05:49,830
was our first idea we did was to offer

00:05:46,830 --> 00:05:52,710
some service in the marketplace with

00:05:49,830 --> 00:05:54,960
which if you create an service instance

00:05:52,710 --> 00:05:58,590
of it you get the access through the

00:05:54,960 --> 00:06:01,200
service marketplace so creating the

00:05:58,590 --> 00:06:03,030
service instance means to create the

00:06:01,200 --> 00:06:05,570
representation of your application in

00:06:03,030 --> 00:06:07,890
the marketplace so you book it in your

00:06:05,570 --> 00:06:09,600
applications space of the application

00:06:07,890 --> 00:06:14,340
you want to offer in the battle place

00:06:09,600 --> 00:06:16,290
and give there in some additional

00:06:14,340 --> 00:06:18,890
information about the service name which

00:06:16,290 --> 00:06:22,710
should be in the service marketplace

00:06:18,890 --> 00:06:25,740
some name of the service plants you want

00:06:22,710 --> 00:06:29,880
to offer things like descriptions and

00:06:25,740 --> 00:06:33,540
some other little custom properties you

00:06:29,880 --> 00:06:35,160
have to add and afterwards the cloud

00:06:33,540 --> 00:06:38,010
provider can update the service broker

00:06:35,160 --> 00:06:40,080
and this has to be done because there is

00:06:38,010 --> 00:06:41,230
no refetch point for the cloud

00:06:40,080 --> 00:06:42,820
controller to

00:06:41,230 --> 00:06:44,620
get to know that there is a change in

00:06:42,820 --> 00:06:47,800
the service catalog of service broker at

00:06:44,620 --> 00:06:49,570
the moment and this is a little bit of a

00:06:47,800 --> 00:06:55,750
lack I think in the open service broker

00:06:49,570 --> 00:06:57,880
API and then the the callback is then

00:06:55,750 --> 00:07:02,110
that the platform provider can update

00:06:57,880 --> 00:07:05,020
the service brokers catalog so and can

00:07:02,110 --> 00:07:08,830
then enable which persons should be able

00:07:05,020 --> 00:07:10,690
to see the services of the new services

00:07:08,830 --> 00:07:13,330
provided now by the service by all

00:07:10,690 --> 00:07:15,460
service broker so the new instance we

00:07:13,330 --> 00:07:18,030
created is now part of the market player

00:07:15,460 --> 00:07:21,450
of that offering of our service broker

00:07:18,030 --> 00:07:24,370
and you can use the default changes of

00:07:21,450 --> 00:07:26,520
making the service accessible only to a

00:07:24,370 --> 00:07:30,070
few organizations in your Cloud Foundry

00:07:26,520 --> 00:07:32,950
deployment or all and afterwards you can

00:07:30,070 --> 00:07:34,600
and you have this new representation the

00:07:32,950 --> 00:07:37,840
marketplace the new services new service

00:07:34,600 --> 00:07:41,470
plans and each other of the organization

00:07:37,840 --> 00:07:43,810
users you can see that can also create a

00:07:41,470 --> 00:07:45,670
service instance of it which means that

00:07:43,810 --> 00:07:49,480
they create the connection to your

00:07:45,670 --> 00:07:53,100
service which is only a representation

00:07:49,480 --> 00:07:55,840
at the moment and if you then bind your

00:07:53,100 --> 00:07:58,240
application to the you want to provide

00:07:55,840 --> 00:08:01,660
to your service instance in that space

00:07:58,240 --> 00:08:05,020
where this provider is deployed at the

00:08:01,660 --> 00:08:08,260
moment the application route is now

00:08:05,020 --> 00:08:11,140
added inside of that service instance in

00:08:08,260 --> 00:08:12,880
the service of offering and we in the

00:08:11,140 --> 00:08:15,790
draft we did and the hackathon we also

00:08:12,880 --> 00:08:18,640
provided some basic shared credentials

00:08:15,790 --> 00:08:21,190
so all users had the same credentials to

00:08:18,640 --> 00:08:25,510
connect so it was only like a gatekeeper

00:08:21,190 --> 00:08:27,880
so only knowing the domain address would

00:08:25,510 --> 00:08:30,940
not make it able to to address it

00:08:27,880 --> 00:08:36,190
directly and because we did it in one

00:08:30,940 --> 00:08:38,410
day and binding then the new app the

00:08:36,190 --> 00:08:41,710
created service instance in the consumer

00:08:38,410 --> 00:08:43,630
the consumer space meant you get this

00:08:41,710 --> 00:08:45,640
application route of the provided app

00:08:43,630 --> 00:08:53,650
inside of the Year environment variable

00:08:45,640 --> 00:08:58,210
with the username and the password so

00:08:53,650 --> 00:09:00,670
if you look at the at the were player of

00:08:58,210 --> 00:09:02,470
your usage you see the first thing you

00:09:00,670 --> 00:09:04,690
do is when you want to provide an

00:09:02,470 --> 00:09:06,760
application it's like if you do it with

00:09:04,690 --> 00:09:08,860
your service you create a service broker

00:09:06,760 --> 00:09:10,839
which we did with our service broker and

00:09:08,860 --> 00:09:12,550
then it's in the marketplace the new

00:09:10,839 --> 00:09:15,040
step here is that you have this

00:09:12,550 --> 00:09:18,279
updatable workflow if there's a new

00:09:15,040 --> 00:09:20,650
offering then creating after you create

00:09:18,279 --> 00:09:22,390
a service and you want and deleting this

00:09:20,650 --> 00:09:27,010
service means removing your app from the

00:09:22,390 --> 00:09:31,080
marketplace after all and mining service

00:09:27,010 --> 00:09:34,210
is what I said stated earlier afterwards

00:09:31,080 --> 00:09:37,029
after the hackathon we talked about it a

00:09:34,210 --> 00:09:39,760
lot we had other thing thoughts in mind

00:09:37,029 --> 00:09:42,460
we discussed it and we seen that this

00:09:39,760 --> 00:09:46,029
simple approach is not the end of the

00:09:42,460 --> 00:09:48,550
the of that story because there are

00:09:46,029 --> 00:09:51,760
several different problems first of all

00:09:48,550 --> 00:09:55,300
a service broker is some crucial thing

00:09:51,760 --> 00:09:57,430
because it has some very the O's open

00:09:55,300 --> 00:10:01,180
service broker API is a very good

00:09:57,430 --> 00:10:03,279
concept of handling services that's the

00:10:01,180 --> 00:10:06,670
reason other platforms like kubernetes

00:10:03,279 --> 00:10:09,640
now adopted it because it is able to

00:10:06,670 --> 00:10:13,000
provide your some kind of adapter to

00:10:09,640 --> 00:10:15,100
that services domain knowledge and when

00:10:13,000 --> 00:10:20,830
you look at service bindings this is

00:10:15,100 --> 00:10:22,990
even more crucial but I will state other

00:10:20,830 --> 00:10:25,240
problems before and now and first

00:10:22,990 --> 00:10:27,700
problem we see is the service usage yeah

00:10:25,240 --> 00:10:30,130
that's app this is micro service it's

00:10:27,700 --> 00:10:32,260
brand-new it is added to the marketplace

00:10:30,130 --> 00:10:36,580
and it's only something in your company

00:10:32,260 --> 00:10:38,200
is available but the other users of the

00:10:36,580 --> 00:10:41,380
marketplace don't know how to use that

00:10:38,200 --> 00:10:44,230
API because it's something that team

00:10:41,380 --> 00:10:45,640
they are did you now have a transparent

00:10:44,230 --> 00:10:47,410
in the company that there is sound

00:10:45,640 --> 00:10:49,510
saying and you have a little bit

00:10:47,410 --> 00:10:52,270
description the marketplace but how to

00:10:49,510 --> 00:10:54,490
use it now so the API definition the

00:10:52,270 --> 00:10:57,550
documentation is needed to the for the

00:10:54,490 --> 00:11:00,250
usage so things like enforcing a

00:10:57,550 --> 00:11:02,500
documentation Juraj on service

00:11:00,250 --> 00:11:05,290
registration is something which has to

00:11:02,500 --> 00:11:07,690
be a thought about so maybe create when

00:11:05,290 --> 00:11:10,000
you create the offering service in

00:11:07,690 --> 00:11:14,050
for your application you want to offer

00:11:10,000 --> 00:11:17,589
and you have to have and filled which is

00:11:14,050 --> 00:11:19,930
not optional but required to place and

00:11:17,589 --> 00:11:25,060
documentation your I available for the

00:11:19,930 --> 00:11:27,550
users of Cloud Foundry so they can get

00:11:25,060 --> 00:11:29,829
from the description in the marketplace

00:11:27,550 --> 00:11:32,110
to that link and see the documentation

00:11:29,829 --> 00:11:34,019
how to use that service if they bind one

00:11:32,110 --> 00:11:37,240
instance before they buy it because

00:11:34,019 --> 00:11:39,820
through one benefit of this approach we

00:11:37,240 --> 00:11:43,720
use is that if you have some kind of

00:11:39,820 --> 00:11:45,610
service or mechanism for billing your

00:11:43,720 --> 00:11:47,829
service instances in the marketplace you

00:11:45,610 --> 00:11:51,700
can build both the offering service

00:11:47,829 --> 00:11:55,480
instance as and as the consuming service

00:11:51,700 --> 00:11:57,100
instance both differently and one other

00:11:55,480 --> 00:11:59,440
thing which is very important for that

00:11:57,100 --> 00:12:01,839
things here is if you have a REST API

00:11:59,440 --> 00:12:04,620
think about hey Diaz because hey Diaz

00:12:01,839 --> 00:12:08,740
brings you the benefit of being able to

00:12:04,620 --> 00:12:11,380
go through that API explore it and know

00:12:08,740 --> 00:12:14,020
how to use it and that's a real benefit

00:12:11,380 --> 00:12:16,149
in this thing but we know the

00:12:14,020 --> 00:12:18,010
enforcement documentation does not mean

00:12:16,149 --> 00:12:21,149
that you have good documentation and

00:12:18,010 --> 00:12:23,260
then that it is enough it's small I can

00:12:21,149 --> 00:12:26,950
think about you have to have a

00:12:23,260 --> 00:12:30,040
documentation thing here we propose the

00:12:26,950 --> 00:12:32,350
next thing is the app binding I talked

00:12:30,040 --> 00:12:35,620
about a little bit what does it mean if

00:12:32,350 --> 00:12:38,620
you look at actual services like my

00:12:35,620 --> 00:12:41,140
sequel you know what means to create a

00:12:38,620 --> 00:12:43,089
service instance is in a shell for

00:12:41,140 --> 00:12:45,790
example in a ship my sequel cluster

00:12:43,089 --> 00:12:48,040
creating a database creating bindings

00:12:45,790 --> 00:12:51,660
means creating users for that database

00:12:48,040 --> 00:12:54,370
in that cluster but if you have an app

00:12:51,660 --> 00:12:56,829
microservice reach is not something

00:12:54,370 --> 00:12:59,529
standardized not well known what does it

00:12:56,829 --> 00:13:02,699
mean to create a user or credentials for

00:12:59,529 --> 00:13:06,250
it so this is some kind of special

00:13:02,699 --> 00:13:08,769
domain knowledge of that service and our

00:13:06,250 --> 00:13:10,870
service broker cannot know about that so

00:13:08,769 --> 00:13:14,920
we have only two solutions to that and

00:13:10,870 --> 00:13:18,310
first of all there is the possibility to

00:13:14,920 --> 00:13:20,160
have some standardized binding API in

00:13:18,310 --> 00:13:22,490
that application available

00:13:20,160 --> 00:13:26,430
the service broker which would mean we

00:13:22,490 --> 00:13:30,629
reinterred partly the service broker API

00:13:26,430 --> 00:13:32,910
so if you come to that place that you

00:13:30,629 --> 00:13:36,870
need that think about making a service

00:13:32,910 --> 00:13:39,029
broker it's much more easier maybe the

00:13:36,870 --> 00:13:41,370
other solution is to have some central

00:13:39,029 --> 00:13:45,290
SSL inside of your Cloud Foundry

00:13:41,370 --> 00:13:52,379
deployment if you create a service

00:13:45,290 --> 00:13:55,639
instance means that you create which for

00:13:52,379 --> 00:13:59,129
your offering you create the an

00:13:55,639 --> 00:14:01,769
information for the SSL which grants

00:13:59,129 --> 00:14:04,949
have to be stated to users which have to

00:14:01,769 --> 00:14:09,120
be able to use that and the other thing

00:14:04,949 --> 00:14:12,689
is that if you create a binding you

00:14:09,120 --> 00:14:15,180
create a user in that SSL where you can

00:14:12,689 --> 00:14:17,790
add the grant or you have an existing

00:14:15,180 --> 00:14:19,470
user and add these grants to it this can

00:14:17,790 --> 00:14:21,990
be done by our service broker because

00:14:19,470 --> 00:14:24,660
this SSL is something you can

00:14:21,990 --> 00:14:27,060
standardize you can have a standardized

00:14:24,660 --> 00:14:29,069
way to interact only the name of the of

00:14:27,060 --> 00:14:31,709
the grants of the list on which grants

00:14:29,069 --> 00:14:33,600
are added is new and then the

00:14:31,709 --> 00:14:34,920
application has only to have the

00:14:33,600 --> 00:14:37,740
knowledge about how to use this

00:14:34,920 --> 00:14:40,170
standardized centralized SSL one this is

00:14:37,740 --> 00:14:45,959
the same for all applications so this is

00:14:40,170 --> 00:14:48,600
something that can be done when you

00:14:45,959 --> 00:14:51,149
think of data services you often have a

00:14:48,600 --> 00:14:53,930
different differentiation between shared

00:14:51,149 --> 00:14:57,480
instances and dedicated incisors sharp

00:14:53,930 --> 00:14:59,670
meaning you're getting only a database

00:14:57,480 --> 00:15:01,529
on an existing cluster whether it is a

00:14:59,670 --> 00:15:04,130
cluster a shared between multiple

00:15:01,529 --> 00:15:06,990
service instances and a dedicated

00:15:04,130 --> 00:15:09,029
instance means you're getting a new

00:15:06,990 --> 00:15:12,750
database cluster every time you are

00:15:09,029 --> 00:15:17,340
creating a new service and so on but

00:15:12,750 --> 00:15:18,620
sharing an app comes with new problems

00:15:17,340 --> 00:15:22,920
[Music]

00:15:18,620 --> 00:15:26,279
one is you know having more load on your

00:15:22,920 --> 00:15:29,610
app which means you need to scale it you

00:15:26,279 --> 00:15:33,209
might need to scale it there are many

00:15:29,610 --> 00:15:33,840
possibilities one for once our service

00:15:33,209 --> 00:15:36,930
broker

00:15:33,840 --> 00:15:39,540
the app or you could use autoscaler to

00:15:36,930 --> 00:15:43,700
scale your app but in some instances

00:15:39,540 --> 00:15:46,410
this is not enough if you're having an

00:15:43,700 --> 00:15:50,040
macro service that relies heavily on

00:15:46,410 --> 00:15:52,830
data services to store some state you

00:15:50,040 --> 00:15:54,810
now maybe need to scale up the status

00:15:52,830 --> 00:15:57,270
service as well get a bigger cluster I

00:15:54,810 --> 00:16:02,310
get mad keep my storage for your

00:15:57,270 --> 00:16:04,770
database and so you have a much bigger

00:16:02,310 --> 00:16:09,839
problem which we are currently not know

00:16:04,770 --> 00:16:12,300
how to solve maybe you can see that then

00:16:09,839 --> 00:16:14,490
you're managing this service so the team

00:16:12,300 --> 00:16:16,890
providing the app has to be like a

00:16:14,490 --> 00:16:20,070
managed service provider so they have to

00:16:16,890 --> 00:16:22,320
look after that but there is no general

00:16:20,070 --> 00:16:24,120
concept for it even if you have service

00:16:22,320 --> 00:16:27,029
brokers you're you're here with that

00:16:24,120 --> 00:16:30,360
problem now you shift that that problems

00:16:27,029 --> 00:16:33,300
you normally solve in your platform to

00:16:30,360 --> 00:16:39,240
providing team to the application

00:16:33,300 --> 00:16:42,900
providers and with instances would mean

00:16:39,240 --> 00:16:45,810
we deploy a new app to CF so we our

00:16:42,900 --> 00:16:48,150
service program needs to CF push an

00:16:45,810 --> 00:16:52,230
existing application our clone the

00:16:48,150 --> 00:16:56,010
trouble at our on the container but this

00:16:52,230 --> 00:16:58,740
comes also with a bunch of problems we

00:16:56,010 --> 00:17:00,690
need to maybe we need to worry about the

00:16:58,740 --> 00:17:04,709
state of the app so we need also to

00:17:00,690 --> 00:17:07,319
create new data services we need to

00:17:04,709 --> 00:17:10,230
think about backup and restore and what

00:17:07,319 --> 00:17:14,610
happens is the original app developer

00:17:10,230 --> 00:17:16,500
deploys an update for this app these are

00:17:14,610 --> 00:17:19,740
all things our software as a service

00:17:16,500 --> 00:17:22,130
program would need to handle which would

00:17:19,740 --> 00:17:25,589
make basically make it and meter

00:17:22,130 --> 00:17:27,900
Orchestrator so we decided to to scrap

00:17:25,589 --> 00:17:32,040
this idea altogether and only go with

00:17:27,900 --> 00:17:35,700
Shatan sources and the last problem is

00:17:32,040 --> 00:17:38,810
about Ethel ace who owns this service

00:17:35,700 --> 00:17:41,490
who who cares about the service

00:17:38,810 --> 00:17:45,900
currently you have an app developer and

00:17:41,490 --> 00:17:48,050
he's pushing his app and maintaining his

00:17:45,900 --> 00:17:50,820
app but he's not

00:17:48,050 --> 00:17:54,570
guaranteeing you a naptime

00:17:50,820 --> 00:17:57,000
not as a service maybe he's caring about

00:17:54,570 --> 00:18:00,720
the app time for himself but not for

00:17:57,000 --> 00:18:03,930
everybody else so who owns the service

00:18:00,720 --> 00:18:08,280
and who's liable if it goes down and my

00:18:03,930 --> 00:18:11,220
app goes with it who needed who can I

00:18:08,280 --> 00:18:13,890
contact ever need support and where can

00:18:11,220 --> 00:18:19,650
I find any more information about how to

00:18:13,890 --> 00:18:24,930
use a service and maybe the roadmap of

00:18:19,650 --> 00:18:26,430
upcoming features or feature requests we

00:18:24,930 --> 00:18:29,550
have two solutions for that as well

00:18:26,430 --> 00:18:32,210
the first one is so same as for the

00:18:29,550 --> 00:18:34,290
service usage and forcing the API

00:18:32,210 --> 00:18:36,180
documentation and enforcing

00:18:34,290 --> 00:18:41,970
documentation for other services as well

00:18:36,180 --> 00:18:45,180
and also adding custom property on the

00:18:41,970 --> 00:18:48,030
service or registration for the contact

00:18:45,180 --> 00:18:50,840
to the owner of the service which we can

00:18:48,030 --> 00:18:53,460
display in the marketplace description

00:18:50,840 --> 00:18:57,150
yeah the problem as wise would be that

00:18:53,460 --> 00:18:59,310
each user of some offering in the

00:18:57,150 --> 00:19:01,380
marketplace which is proven provided by

00:18:59,310 --> 00:19:03,180
our service broker would go to the

00:19:01,380 --> 00:19:05,160
platform team and say hey your service

00:19:03,180 --> 00:19:08,520
is not working and then they have to say

00:19:05,160 --> 00:19:10,500
yeah but it's not from us contact with

00:19:08,520 --> 00:19:12,390
these people so you have the thumb troop

00:19:10,500 --> 00:19:14,970
route there which is really not very

00:19:12,390 --> 00:19:17,070
necessary if you can contact make the

00:19:14,970 --> 00:19:20,280
direct contact and also if you can make

00:19:17,070 --> 00:19:22,770
the SLA visible to the user hey it's not

00:19:20,280 --> 00:19:25,260
that production ready now yeah that's

00:19:22,770 --> 00:19:27,390
important think to to communicate there

00:19:25,260 --> 00:19:29,430
is something but we need time to make it

00:19:27,390 --> 00:19:31,710
production ready or you if you're

00:19:29,430 --> 00:19:34,110
interested you can you try it and if if

00:19:31,710 --> 00:19:40,470
you're more into it we can make a

00:19:34,110 --> 00:19:43,170
service broker out of it and our code is

00:19:40,470 --> 00:19:48,410
on github we hope for contributions from

00:19:43,170 --> 00:19:51,000
you for back fixes stocks we not

00:19:48,410 --> 00:19:54,060
produced all those features we talked

00:19:51,000 --> 00:19:55,620
about now because there was this big

00:19:54,060 --> 00:19:57,720
discussion where we had to look into

00:19:55,620 --> 00:19:59,460
what is really needed what's the

00:19:57,720 --> 00:20:00,840
feedback of your community and that

00:19:59,460 --> 00:20:04,140
could be your best contribute

00:20:00,840 --> 00:20:07,470
to us talk with us bringing your ideas

00:20:04,140 --> 00:20:11,010
about it what do you think is worthwhile

00:20:07,470 --> 00:20:13,350
to follow up what this what could we

00:20:11,010 --> 00:20:14,789
skip and what's your opinion about it

00:20:13,350 --> 00:20:16,919
and I would hope for the questions

00:20:14,789 --> 00:20:21,299
answers to be your first possibility to

00:20:16,919 --> 00:20:23,909
contribute to us so this was our talk if

00:20:21,299 --> 00:20:27,630
you want to contact us you can reach us

00:20:23,909 --> 00:20:29,669
here or on the github and now here

00:20:27,630 --> 00:20:36,870
directly if you want you and we're

00:20:29,669 --> 00:20:41,429
around until tomorrow thank you any

00:20:36,870 --> 00:20:54,330
questions or some things you want to

00:20:41,429 --> 00:20:55,890
contribute to us say to us I was just

00:20:54,330 --> 00:20:57,470
wondering if credit hub solves the

00:20:55,890 --> 00:21:01,950
credentials problem you mentioned

00:20:57,470 --> 00:21:04,409
earlier now it will not because the

00:21:01,950 --> 00:21:06,210
problem is we do not know how to create

00:21:04,409 --> 00:21:08,940
the credentials if you do not know how

00:21:06,210 --> 00:21:10,529
to you how the application does that so

00:21:08,940 --> 00:21:14,039
that's the big problem we do not know

00:21:10,529 --> 00:21:15,840
the domain of the of what is the user of

00:21:14,039 --> 00:21:17,399
what our credentials in the service if

00:21:15,840 --> 00:21:20,190
you look at Redis for example you have

00:21:17,399 --> 00:21:22,890
new user you only have that secret if

00:21:20,190 --> 00:21:25,950
you look at my sequel you have widely

00:21:22,890 --> 00:21:28,890
more complex system of user and things

00:21:25,950 --> 00:21:32,070
and if you look with shared and

00:21:28,890 --> 00:21:34,440
dedicated services and some service

00:21:32,070 --> 00:21:36,330
instance some user of over shared

00:21:34,440 --> 00:21:38,820
instance means something very different

00:21:36,330 --> 00:21:41,490
than with a dedicated one if you have

00:21:38,820 --> 00:21:44,460
dedicated cluster for example this could

00:21:41,490 --> 00:21:46,770
be some administrative user or some only

00:21:44,460 --> 00:21:49,890
some user who is able to connect to some

00:21:46,770 --> 00:21:52,200
database and so on so it's cascading

00:21:49,890 --> 00:21:57,080
there the service broker you can manage

00:21:52,200 --> 00:22:01,230
this because you can specify the special

00:21:57,080 --> 00:22:02,820
interaction between the user and and the

00:22:01,230 --> 00:22:04,590
service because you have this adapter

00:22:02,820 --> 00:22:07,789
logic and which we cannot provide

00:22:04,590 --> 00:22:11,059
because we do not know what is needed

00:22:07,789 --> 00:22:11,059
other quest

00:22:18,510 --> 00:22:24,220
then thank you for your attendance and

00:22:22,170 --> 00:22:27,450
hopefully we will hear from you

00:22:24,220 --> 00:22:27,450

YouTube URL: https://www.youtube.com/watch?v=DPGg3vNB3L8


