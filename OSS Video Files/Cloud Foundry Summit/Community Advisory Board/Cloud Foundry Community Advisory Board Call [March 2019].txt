Title: Cloud Foundry Community Advisory Board Call [March 2019]
Publication date: 2019-03-20
Playlist: Community Advisory Board
Description: 
	1. YTT: The YAML Templating Tool that simplifies complex configuration management [1] by Dmitriy Kalinin (Pivotal) and Nima Kaviani (IBM)
2. CF Weighted Routing with Istio and Future Road Map [2] by Shubha Anjur Tupil and team from Pivotal

Agenda here: https://docs.google.com/document/d/1SCOlAquyUmNM-AQnekCOXiwhLs6gveTxAcduvDcW_xI/edit#heading=h.mewn94q54hla
Captions: 
	00:00:01,730 --> 00:00:10,380
hopefully actually or recording and see

00:00:06,540 --> 00:00:12,420
it sweet alright so as I was saying we

00:00:10,380 --> 00:00:15,360
have a packed agenda we usually start

00:00:12,420 --> 00:00:17,130
with at foundry foundation and no

00:00:15,360 --> 00:00:20,609
spoilers here so she can give us an

00:00:17,130 --> 00:00:25,590
update on the meeting that's coming a

00:00:20,609 --> 00:00:27,390
big big conference yeah yep I don't have

00:00:25,590 --> 00:00:29,039
a whole lot of updates I mean I put in

00:00:27,390 --> 00:00:31,920
everything in the document I think there

00:00:29,039 --> 00:00:35,399
are the stations are 808 or something so

00:00:31,920 --> 00:00:36,930
they're going really well any questions

00:00:35,399 --> 00:00:38,600
or anything I put in all the email

00:00:36,930 --> 00:00:41,190
addresses of the folks that you need to

00:00:38,600 --> 00:00:42,989
you need to reach out do for any event

00:00:41,190 --> 00:00:45,090
related question or if you have a

00:00:42,989 --> 00:00:48,210
speaking slot and you have any questions

00:00:45,090 --> 00:00:51,180
or adjustments that need to be made for

00:00:48,210 --> 00:00:53,579
any EU summit related questions please

00:00:51,180 --> 00:00:55,230
hold off we will have a lot of updates

00:00:53,579 --> 00:00:59,129
or announcements that we will share at

00:00:55,230 --> 00:01:01,199
Philadelphia so all your you submit

00:00:59,129 --> 00:01:03,059
questions just hold up until we're done

00:01:01,199 --> 00:01:05,070
with Philly but other than that I don't

00:01:03,059 --> 00:01:09,060
have a whole lot of updates I'm small in

00:01:05,070 --> 00:01:10,590
Philly except but I guess the important

00:01:09,060 --> 00:01:15,990
thing to also mention is that we now

00:01:10,590 --> 00:01:18,900
have a contributor they write that

00:01:15,990 --> 00:01:20,580
Spooner is organizing so everybody just

00:01:18,900 --> 00:01:23,670
called probably is a contributor so you

00:01:20,580 --> 00:01:25,020
should try to join us right yeah I see

00:01:23,670 --> 00:01:27,630
most of the names here on the

00:01:25,020 --> 00:01:30,329
contributor summit registration so if

00:01:27,630 --> 00:01:31,770
you are if you have not updated your

00:01:30,329 --> 00:01:33,869
registration you can go back your

00:01:31,770 --> 00:01:35,939
registration modify to add user data

00:01:33,869 --> 00:01:38,090
I mean contributor summit on to your

00:01:35,939 --> 00:01:41,369
registration as a zero dollar add-on

00:01:38,090 --> 00:01:44,159
just please do it and even if you don't

00:01:41,369 --> 00:01:47,700
and if you show up there people we will

00:01:44,159 --> 00:01:49,320
not say you're not allowed so ideally it

00:01:47,700 --> 00:01:51,090
will help us with the room setup and

00:01:49,320 --> 00:01:54,180
everything so it will it would help if

00:01:51,090 --> 00:01:55,079
you sign up right now sweet thank you

00:01:54,180 --> 00:01:59,840
alright

00:01:55,079 --> 00:02:04,770
any quick question about feelings

00:01:59,840 --> 00:02:06,840
remember you called you a mute no all

00:02:04,770 --> 00:02:10,470
right so see everybody in Philadelphia

00:02:06,840 --> 00:02:13,410
excellent thank you so now so I think I

00:02:10,470 --> 00:02:15,360
know Erika's years for runtime but you

00:02:13,410 --> 00:02:18,330
if you want to jump in at some point to

00:02:15,360 --> 00:02:20,520
Eric maybe you can give us some of the

00:02:18,330 --> 00:02:23,730
highlights that you're added yeah I'll

00:02:20,520 --> 00:02:27,330
cover a few quick items but there's in

00:02:23,730 --> 00:02:29,640
filming the dock to a few things to note

00:02:27,330 --> 00:02:31,620
CLI released a new version a few weeks

00:02:29,640 --> 00:02:32,970
ago they now support multi service

00:02:31,620 --> 00:02:35,340
registration so you can have service

00:02:32,970 --> 00:02:38,670
instances with the same name with

00:02:35,340 --> 00:02:40,620
different brokers Cappy is finishing up

00:02:38,670 --> 00:02:44,580
a bunch of their work on a provisions

00:02:40,620 --> 00:02:47,040
and they're planning to get started with

00:02:44,580 --> 00:02:49,380
an initial effort on attaching sidecar

00:02:47,040 --> 00:02:50,340
processes to your applications so

00:02:49,380 --> 00:02:53,400
there's been a bunch of design

00:02:50,340 --> 00:02:54,810
discussion around that there's been a

00:02:53,400 --> 00:02:56,250
lot of good discussion on the mailing

00:02:54,810 --> 00:02:57,450
list about this but lager gaiters

00:02:56,250 --> 00:02:59,370
finally settle on a six-month

00:02:57,450 --> 00:03:01,230
deprecation window for the firehose end

00:02:59,370 --> 00:03:03,690
point and they're planning on doing some

00:03:01,230 --> 00:03:06,000
work to help existing projects migrate

00:03:03,690 --> 00:03:08,970
to the new river slug proxy and log

00:03:06,000 --> 00:03:12,360
cache features that are replacing all

00:03:08,970 --> 00:03:14,070
the old view one logger Gator stuff will

00:03:12,360 --> 00:03:16,350
hear a bunch of exciting stuff about

00:03:14,070 --> 00:03:19,020
networking later Thank You Mitya but

00:03:16,350 --> 00:03:22,130
some updates from the networking program

00:03:19,020 --> 00:03:24,810
they've completed work on client-side

00:03:22,130 --> 00:03:26,010
transparent load balancing for internal

00:03:24,810 --> 00:03:29,160
wraps that also includes things like

00:03:26,010 --> 00:03:31,500
transparent retries and they're working

00:03:29,160 --> 00:03:33,410
now on transparent mutual TLS between

00:03:31,500 --> 00:03:36,510
Athens and SUSE on the container network

00:03:33,410 --> 00:03:39,990
so people interested in security I think

00:03:36,510 --> 00:03:42,360
are very excited about that and then I

00:03:39,990 --> 00:03:44,970
know Gardens continuing to their track

00:03:42,360 --> 00:03:47,720
of work on better reporting for CPU

00:03:44,970 --> 00:03:50,220
usage and CPU entitlement expectations

00:03:47,720 --> 00:03:51,870
and they're continuing to improve their

00:03:50,220 --> 00:03:54,390
integration with container D as the

00:03:51,870 --> 00:04:01,170
level above run C and the garden

00:03:54,390 --> 00:04:04,620
container engine so those review runtime

00:04:01,170 --> 00:04:20,700
highlights X don't think you're any

00:04:04,620 --> 00:04:23,280
questions one person from Bosch is is

00:04:20,700 --> 00:04:26,780
there somebody from Bosch that can give

00:04:23,280 --> 00:04:26,780
us kind of highlights

00:04:28,680 --> 00:04:34,130
so we release 268 seven dot oh we've

00:04:31,920 --> 00:04:36,780
been trying to release more frequently

00:04:34,130 --> 00:04:38,970
there's a variety of smaller things in

00:04:36,780 --> 00:04:41,340
there most interestingly are some speed

00:04:38,970 --> 00:04:43,490
ups to templating and variables so

00:04:41,340 --> 00:04:46,470
hopefully deploys are a little faster

00:04:43,490 --> 00:04:48,330
we're also starting to experiment with

00:04:46,470 --> 00:04:50,669
adding in a new life cycle hook which is

00:04:48,330 --> 00:04:51,780
called pre stop which should hopefully

00:04:50,669 --> 00:04:54,840
provide some more information so

00:04:51,780 --> 00:04:57,780
clustered services can better determine

00:04:54,840 --> 00:04:59,490
what sort of procedure is going to

00:04:57,780 --> 00:05:03,240
happen to that instance in VM after the

00:04:59,490 --> 00:05:05,850
fact we've also been moving static IPS

00:05:03,240 --> 00:05:07,290
into cloud configs instead of being

00:05:05,850 --> 00:05:08,850
statically assigned in deployment

00:05:07,290 --> 00:05:11,070
manifests which should help with

00:05:08,850 --> 00:05:14,340
on-demand services being deployed that

00:05:11,070 --> 00:05:16,430
native public IP and then Monday I sent

00:05:14,340 --> 00:05:47,460
out an email we're hoping to remove

00:05:16,430 --> 00:05:50,850
support and clean up all right cool so

00:05:47,460 --> 00:05:52,830
let me get to extensions quickly so one

00:05:50,850 --> 00:05:56,180
key announcement for extensions is that

00:05:52,830 --> 00:05:59,789
the app autoscaler project has graduated

00:05:56,180 --> 00:06:02,130
so what that means is that now it's it's

00:05:59,789 --> 00:06:04,410
not under that foundry

00:06:02,130 --> 00:06:07,500
incubator but now it will be under

00:06:04,410 --> 00:06:09,270
foundry organization on github so that's

00:06:07,500 --> 00:06:11,370
the key thing but it also is that kind

00:06:09,270 --> 00:06:13,590
of a testament that of the fact that

00:06:11,370 --> 00:06:16,830
it's it's pretty much being adopted

00:06:13,590 --> 00:06:20,729
children yet IBM but also of course the

00:06:16,830 --> 00:06:25,710
different approach that that I've used

00:06:20,729 --> 00:06:29,490
it in if you've never looked at apps or

00:06:25,710 --> 00:06:34,800
a scalar I invite you to come to the I

00:06:29,490 --> 00:06:38,190
guess presentation the other key thing

00:06:34,800 --> 00:06:39,220
to mention is that Stratus as version

00:06:38,190 --> 00:06:42,610
2.3

00:06:39,220 --> 00:06:44,200
you two CVEs and that's important that

00:06:42,610 --> 00:06:48,400
are fixed in there so if you're using

00:06:44,200 --> 00:06:50,950
Stratus you should definitely update to

00:06:48,400 --> 00:06:54,540
get that and then also they are adding

00:06:50,950 --> 00:06:58,000
user provided service support the other

00:06:54,540 --> 00:07:00,280
quick highlight is the brachot project

00:06:58,000 --> 00:07:02,560
they're having more habitat for support

00:07:00,280 --> 00:07:05,260
so we stop there see if there's any

00:07:02,560 --> 00:07:10,390
question for extensions otherwise we'll

00:07:05,260 --> 00:07:13,570
probably go to to the talks any

00:07:10,390 --> 00:07:22,930
questions okay cool our extension

00:07:13,570 --> 00:07:27,970
meeting happens on Monday ok so cool we

00:07:22,930 --> 00:07:30,910
have quite exciting I mean the goal is

00:07:27,970 --> 00:07:42,240
the first with Mema and the any of IBM

00:07:30,910 --> 00:07:47,680
and stop them you know present so guys

00:07:42,240 --> 00:07:50,500
ticket you have 20 minutes even 25

00:07:47,680 --> 00:07:51,970
minutes if you need because it's you

00:07:50,500 --> 00:07:52,210
guys gonna need all this and then of

00:07:51,970 --> 00:07:56,530
course

00:07:52,210 --> 00:07:59,860
let's give five questions so if you want

00:07:56,530 --> 00:08:04,330
to share your screen all right you guys

00:07:59,860 --> 00:08:07,780
hear me okay all right yeah I'm a little

00:08:04,330 --> 00:08:11,830
bit sick so courtesy of Max and Nemo

00:08:07,780 --> 00:08:20,260
actually might might have to break a few

00:08:11,830 --> 00:08:22,390
times so I guess yeah so new man I have

00:08:20,260 --> 00:08:25,150
recently open storage this project

00:08:22,390 --> 00:08:27,520
called the ytt it stands for llamó

00:08:25,150 --> 00:08:31,270
templating tool and I know how you all

00:08:27,520 --> 00:08:36,039
love ya know so we thought we'll present

00:08:31,270 --> 00:08:38,620
this to to this group and see if it

00:08:36,039 --> 00:08:40,479
might be useful to you all you know

00:08:38,620 --> 00:08:43,150
maybe there's some suggestions and

00:08:40,479 --> 00:08:46,390
feedback and whatnot so the kind of a

00:08:43,150 --> 00:08:48,610
zoom out for a second you know why do

00:08:46,390 --> 00:08:51,089
you make this tool and what this too is

00:08:48,610 --> 00:08:52,500
trying to solve right so as y'all aware

00:08:51,089 --> 00:08:55,589
you know

00:08:52,500 --> 00:08:59,399
maybe it was a few years ago one year

00:08:55,589 --> 00:09:03,810
ago we added ops files to Bosch and

00:08:59,399 --> 00:09:06,660
Hobbs files mechanism was meant to allow

00:09:03,810 --> 00:09:10,829
people to customize I am kind of a

00:09:06,660 --> 00:09:13,050
rebase stuff on top of you know some

00:09:10,829 --> 00:09:16,050
existing manifests that people ship with

00:09:13,050 --> 00:09:17,160
for Bosch right now the ops files are

00:09:16,050 --> 00:09:18,720
generic right so it doesn't necessarily

00:09:17,160 --> 00:09:22,740
just have to be bashed could be anything

00:09:18,720 --> 00:09:25,980
right but primarily these people have

00:09:22,740 --> 00:09:29,160
used it to customize their boss right

00:09:25,980 --> 00:09:33,029
that's right now the challenge with that

00:09:29,160 --> 00:09:34,500
is that you know some people they don't

00:09:33,029 --> 00:09:35,970
necessarily want to customize what they

00:09:34,500 --> 00:09:38,819
want to do is they want to ship some

00:09:35,970 --> 00:09:40,439
base level configuration and then let

00:09:38,819 --> 00:09:42,449
other people customize it right so

00:09:40,439 --> 00:09:46,850
there's really actually two categories

00:09:42,449 --> 00:09:50,040
of people that you know are involved

00:09:46,850 --> 00:09:52,199
what I call those I guess people are

00:09:50,040 --> 00:09:54,870
providers the people who provide the

00:09:52,199 --> 00:09:56,250
served my defense and then there's the

00:09:54,870 --> 00:09:58,949
other set of people who are the

00:09:56,250 --> 00:10:01,620
consumers of this manifest and who like

00:09:58,949 --> 00:10:05,040
to customize things right and currently

00:10:01,620 --> 00:10:07,500
as you're probably aware we use ops

00:10:05,040 --> 00:10:11,370
files for both of these categories right

00:10:07,500 --> 00:10:14,550
CM deployment producers are the ones

00:10:11,370 --> 00:10:16,439
that are using ops files to provide some

00:10:14,550 --> 00:10:19,110
basic functionality and then there's

00:10:16,439 --> 00:10:20,579
also whoever consumes CM deployment also

00:10:19,110 --> 00:10:23,250
adds in their own ops files like let's

00:10:20,579 --> 00:10:27,779
say PWS folks to customize all that

00:10:23,250 --> 00:10:30,089
stuff now it works ok you know if the

00:10:27,779 --> 00:10:31,500
size is not that large of all this

00:10:30,089 --> 00:10:32,970
manifests not in terms of length of the

00:10:31,500 --> 00:10:36,059
file but rather just a number of

00:10:32,970 --> 00:10:41,459
configurations but it definitely starts

00:10:36,059 --> 00:10:44,970
to fail slowly as you get to larger and

00:10:41,459 --> 00:10:46,259
larger configuration sizes right so you

00:10:44,970 --> 00:10:48,889
know she has deployment again as an

00:10:46,259 --> 00:10:51,660
example it's kind of challenging to

00:10:48,889 --> 00:10:54,180
support some of those things they're

00:10:51,660 --> 00:10:58,009
provided there's potentially some

00:10:54,180 --> 00:11:00,990
confusion to what users are meant to

00:10:58,009 --> 00:11:04,000
select for the ROPS files and whatnot so

00:11:00,990 --> 00:11:07,590
the they

00:11:04,000 --> 00:11:09,910
experience you know could be better so

00:11:07,590 --> 00:11:14,260
this hopefully kinda sets up some the

00:11:09,910 --> 00:11:15,940
background here so the way that some of

00:11:14,260 --> 00:11:19,380
the other communities out there have

00:11:15,940 --> 00:11:24,010
solved this kind of a problem is by

00:11:19,380 --> 00:11:25,780
having to two separate tools to to deal

00:11:24,010 --> 00:11:27,280
with this kind of a problem right so if

00:11:25,780 --> 00:11:29,950
you look at kubernetes community for

00:11:27,280 --> 00:11:32,890
example they have helm and helm uses go

00:11:29,950 --> 00:11:35,170
templating to you know to allow the

00:11:32,890 --> 00:11:37,300
providers to customize you know to offer

00:11:35,170 --> 00:11:39,400
a set of options right and then if you

00:11:37,300 --> 00:11:42,010
look at you know people who consume them

00:11:39,400 --> 00:11:45,940
they ultimately can potentially use and

00:11:42,010 --> 00:11:48,250
know customize let's say with a k2 you

00:11:45,940 --> 00:11:51,370
know augment the configuration that it

00:11:48,250 --> 00:11:53,440
provides right so you know that that

00:11:51,370 --> 00:11:56,440
kind of works out great but then you run

00:11:53,440 --> 00:11:59,380
into this you know famous problem of hey

00:11:56,440 --> 00:12:00,640
you shouldn't be templating over text

00:11:59,380 --> 00:12:02,590
because really what you want to be

00:12:00,640 --> 00:12:04,510
templating is over llamó structures

00:12:02,590 --> 00:12:07,570
right and the challenges with templating

00:12:04,510 --> 00:12:09,970
our text is that you really get into

00:12:07,570 --> 00:12:12,160
some nasty kind of situations of you

00:12:09,970 --> 00:12:14,740
know trying to figure out how to invent

00:12:12,160 --> 00:12:18,010
stuff how to escape stuff how did all

00:12:14,740 --> 00:12:19,810
this kind of a basic ml things but

00:12:18,010 --> 00:12:22,570
there's really a lot of friction to do

00:12:19,810 --> 00:12:24,700
it because you're not really working

00:12:22,570 --> 00:12:27,670
with llamó you're working with text for

00:12:24,700 --> 00:12:30,070
it so you know if you look at some of

00:12:27,670 --> 00:12:32,680
these templating engines like ginger you

00:12:30,070 --> 00:12:34,470
know go template there is other ones you

00:12:32,680 --> 00:12:38,890
always run into this kind of problem

00:12:34,470 --> 00:12:43,440
so what new main I kind of a ended up

00:12:38,890 --> 00:12:46,600
making is this tool that doesn't really

00:12:43,440 --> 00:12:48,820
doesn't really deal with text but rather

00:12:46,600 --> 00:12:50,500
it deals with llamó structures right and

00:12:48,820 --> 00:12:52,630
when I say amo structures I mean it

00:12:50,500 --> 00:12:55,150
actually deals with you know arrays Maps

00:12:52,630 --> 00:12:58,270
you know llamó documents and whatnot

00:12:55,150 --> 00:13:01,360
right so that's the that's the kind of a

00:12:58,270 --> 00:13:03,690
background for this tool we wanted we

00:13:01,360 --> 00:13:06,430
wanted to embrace some of the templating

00:13:03,690 --> 00:13:08,589
you know solutions that other you know

00:13:06,430 --> 00:13:12,209
communities have embraced as well but we

00:13:08,589 --> 00:13:15,310
wanted our templating to be more usable

00:13:12,209 --> 00:13:17,560
you know have less ways to screw up

00:13:15,310 --> 00:13:19,570
accidentally and hopefully

00:13:17,560 --> 00:13:22,060
get rid of the unnecessary you know

00:13:19,570 --> 00:13:24,130
crazy escaping things and what are the

00:13:22,060 --> 00:13:26,950
things you have to do right so that's

00:13:24,130 --> 00:13:29,880
where ytt tools comes in now in the

00:13:26,950 --> 00:13:33,310
front of ops files

00:13:29,880 --> 00:13:35,370
you know ops files provide a syntax

00:13:33,310 --> 00:13:38,620
right that allows you to specify

00:13:35,370 --> 00:13:41,650
different paths within a document right

00:13:38,620 --> 00:13:43,210
and typically you know you probably all

00:13:41,650 --> 00:13:46,270
seen it right there's a you know a type

00:13:43,210 --> 00:13:47,830
of ops operation a path for the

00:13:46,270 --> 00:13:48,790
operation and maybe optional values

00:13:47,830 --> 00:13:51,730
right

00:13:48,790 --> 00:13:53,380
the challenge with that approach is that

00:13:51,730 --> 00:13:55,450
a lot of people have to have in their

00:13:53,380 --> 00:13:57,880
head kind of a figure out what is the

00:13:55,450 --> 00:13:59,320
path to the to the structure rate how

00:13:57,880 --> 00:14:01,300
does it actually look and translate it

00:13:59,320 --> 00:14:04,720
into something right translate it into

00:14:01,300 --> 00:14:08,680
the you know adjacent path I guess

00:14:04,720 --> 00:14:12,070
format now that all works out great but

00:14:08,680 --> 00:14:15,360
I think you can argue that there might

00:14:12,070 --> 00:14:17,800
be more natural way of kind of doing so

00:14:15,360 --> 00:14:19,930
ygt also tries to solve this problem as

00:14:17,800 --> 00:14:23,650
well by providing alternative to ops

00:14:19,930 --> 00:14:25,410
files which we call overlays that allow

00:14:23,650 --> 00:14:29,380
you to do this ops file like

00:14:25,410 --> 00:14:31,210
configurations but they don't require

00:14:29,380 --> 00:14:34,450
you to kind of translate it to a

00:14:31,210 --> 00:14:38,290
different format from the former of the

00:14:34,450 --> 00:14:39,990
document so yeah so that's kind of the

00:14:38,290 --> 00:14:43,870
background all of this I don't know if

00:14:39,990 --> 00:14:46,420
since since we're a fairly small group

00:14:43,870 --> 00:14:48,400
if anyone has questions or or anything

00:14:46,420 --> 00:14:52,900
you know just oh sure are you going to

00:14:48,400 --> 00:14:55,540
show it to us yes absolutely well I yeah

00:14:52,900 --> 00:14:59,110
you said you're not into slides anymore

00:14:55,540 --> 00:15:01,960
so I have literally zero slides all

00:14:59,110 --> 00:15:06,400
right any other questions yes approach

00:15:01,960 --> 00:15:11,320
similar to like spiff and spruce ah

00:15:06,400 --> 00:15:16,240
yes or no so so sniffing spruce what

00:15:11,320 --> 00:15:18,370
they have done before is they they used

00:15:16,240 --> 00:15:20,980
the llamo structure however they

00:15:18,370 --> 00:15:23,200
actually and maybe that's that's not

00:15:20,980 --> 00:15:25,750
necessarily a good word to pick but

00:15:23,200 --> 00:15:29,620
they've polluted the llamo structure

00:15:25,750 --> 00:15:31,310
with their own kind of a operational

00:15:29,620 --> 00:15:33,470
content right

00:15:31,310 --> 00:15:37,970
now for example to give you an example

00:15:33,470 --> 00:15:39,320
you know if if you had if you wanted to

00:15:37,970 --> 00:15:42,200
insert something in the middle of an

00:15:39,320 --> 00:15:43,460
array that knowledge that you have to

00:15:42,200 --> 00:15:44,480
insert something in the middle of array

00:15:43,460 --> 00:15:47,270
has to go somewhere

00:15:44,480 --> 00:15:49,430
right so both sniffing spruce they kind

00:15:47,270 --> 00:15:52,610
of inserted that knowledge into the

00:15:49,430 --> 00:15:54,470
Yamanote directly right so ytt offers a

00:15:52,610 --> 00:15:56,720
slightly different approach and

00:15:54,470 --> 00:16:01,250
hopefully it's a well it's an approach

00:15:56,720 --> 00:16:06,200
that people appreciate but we'll see try

00:16:01,250 --> 00:16:09,320
any any other things I think I think I

00:16:06,200 --> 00:16:11,270
just want to add is that one thing that

00:16:09,320 --> 00:16:14,800
is important about ytt is that the

00:16:11,270 --> 00:16:18,800
instructions or the metadata is added as

00:16:14,800 --> 00:16:20,420
comments in a document and that makes

00:16:18,800 --> 00:16:23,090
the entire yeah my own structure to

00:16:20,420 --> 00:16:26,330
remain valid through that you know the

00:16:23,090 --> 00:16:28,280
whole templating process and that's

00:16:26,330 --> 00:16:33,530
probably where you know what it is

00:16:28,280 --> 00:16:36,310
different from spit and write so

00:16:33,530 --> 00:16:39,640
hopefully everyone can see my screen

00:16:36,310 --> 00:16:39,640
this is a

00:16:40,910 --> 00:16:47,269
this is a home page I guess for ITT and

00:16:45,290 --> 00:16:50,329
it lists a few features and whatnot off

00:16:47,269 --> 00:16:52,040
of this tool but that's the boring stuff

00:16:50,329 --> 00:16:55,430
the more interesting stuff is this

00:16:52,040 --> 00:16:57,440
interactive playground that shows you

00:16:55,430 --> 00:17:00,410
know what it would look like you know to

00:16:57,440 --> 00:17:04,520
have some input in your you know llamo

00:17:00,410 --> 00:17:06,770
and then what the ydt tool produces so

00:17:04,520 --> 00:17:10,610
to give you a little bit of a

00:17:06,770 --> 00:17:12,470
walkthrough and to kind of a show what

00:17:10,610 --> 00:17:13,880
we're talking about what what you Steven

00:17:12,470 --> 00:17:18,589
mentioned about comments and whatnot

00:17:13,880 --> 00:17:21,140
right we we have this few examples I and

00:17:18,589 --> 00:17:23,000
I guess I'll start with a well let's

00:17:21,140 --> 00:17:27,100
start with this one over here oh what's

00:17:23,000 --> 00:17:27,100
that was the most basic one right so

00:17:27,870 --> 00:17:34,050
part of this tool there is a language

00:17:31,440 --> 00:17:35,910
the language is called star lark it's a

00:17:34,050 --> 00:17:37,800
language that's used by Buzzle tool from

00:17:35,910 --> 00:17:40,650
Google Google also maintains the

00:17:37,800 --> 00:17:44,460
language itself it's a language that's

00:17:40,650 --> 00:17:45,990
designed to be very useful to people who

00:17:44,460 --> 00:17:47,640
deal with a lot of configuration and

00:17:45,990 --> 00:17:49,710
useful in the sense that it doesn't have

00:17:47,640 --> 00:17:51,600
a lot of features but it has some of the

00:17:49,710 --> 00:17:53,100
features that make it a pleasant

00:17:51,600 --> 00:17:55,920
language to use when you're dealing with

00:17:53,100 --> 00:17:57,780
stuff in templating world instead of

00:17:55,920 --> 00:17:59,850
something like a go template dialect

00:17:57,780 --> 00:18:02,190
that it's not quite a language I mean

00:17:59,850 --> 00:18:04,760
it's a type of language but it's not

00:18:02,190 --> 00:18:08,370
necessarily friendly to use language so

00:18:04,760 --> 00:18:12,030
to kind of jump right in over here this

00:18:08,370 --> 00:18:15,030
language is pythonic as it's not a

00:18:12,030 --> 00:18:16,620
direct subset but it's it's very very

00:18:15,030 --> 00:18:18,750
similar to Python so if you're familiar

00:18:16,620 --> 00:18:22,320
with Python should be should be familiar

00:18:18,750 --> 00:18:23,850
with this as well but so as you can see

00:18:22,320 --> 00:18:28,620
over here we have a key value over here

00:18:23,850 --> 00:18:30,510
right in llamó and qiyam is Nils but the

00:18:28,620 --> 00:18:31,920
value of it isn't specified in llamó

00:18:30,510 --> 00:18:35,340
directly it's specified through a

00:18:31,920 --> 00:18:38,790
comment right and as you can see over

00:18:35,340 --> 00:18:40,559
here you know when ytt renders this

00:18:38,790 --> 00:18:43,590
content right it actually knows that

00:18:40,559 --> 00:18:45,630
none is know right so it's actually

00:18:43,590 --> 00:18:48,030
translating whatever the language you

00:18:45,630 --> 00:18:50,400
know data structure or data value is

00:18:48,030 --> 00:18:52,470
into whatever the proper llamo right so

00:18:50,400 --> 00:18:55,980
to give another example of here if we

00:18:52,470 --> 00:18:58,590
change this to 1 2 3 right then it is

00:18:55,980 --> 00:19:00,390
actually 1 2 3 right now if we kind of

00:18:58,590 --> 00:19:01,980
get deeper into this right there's you

00:19:00,390 --> 00:19:04,140
know let's say string right and string

00:19:01,980 --> 00:19:06,690
is you know just double Cori thing but

00:19:04,140 --> 00:19:09,210
because we're using llamo serialization

00:19:06,690 --> 00:19:11,580
right actually in this example of you

00:19:09,210 --> 00:19:13,830
read even shows you right if we throw in

00:19:11,580 --> 00:19:15,840
a pound over there right if you weren't

00:19:13,830 --> 00:19:17,100
just using proper llamo civilization

00:19:15,840 --> 00:19:19,110
right you'll probably have a challenge

00:19:17,100 --> 00:19:21,059
escaping this right because pound would

00:19:19,110 --> 00:19:23,700
imply that it's a comment right however

00:19:21,059 --> 00:19:25,080
ytt again is working with the yellow

00:19:23,700 --> 00:19:28,230
structure it's not really working with

00:19:25,080 --> 00:19:31,290
text so it is using this you know yeah

00:19:28,230 --> 00:19:33,330
most realization facilities so the the

00:19:31,290 --> 00:19:36,480
value gets properly escaped into single

00:19:33,330 --> 00:19:38,310
quotes by the way I think someone maybe

00:19:36,480 --> 00:19:40,620
commented on something in the chat or

00:19:38,310 --> 00:19:42,350
something I can see the chat so there

00:19:40,620 --> 00:19:45,590
you go max just pointed

00:19:42,350 --> 00:19:47,659
all right so does that make sense so far

00:19:45,590 --> 00:19:49,820
so of course you can get a you know

00:19:47,659 --> 00:19:51,860
fairly complicated things going on over

00:19:49,820 --> 00:19:53,720
here like for example maps and you know

00:19:51,860 --> 00:19:56,149
arrays of maps and all kinds of other

00:19:53,720 --> 00:19:58,009
things right and all of this is just you

00:19:56,149 --> 00:19:59,990
know if you're familiar with go at the

00:19:58,009 --> 00:20:02,720
end of it it eventually just says you

00:19:59,990 --> 00:20:05,200
know llamo and marshal our llamo marshal

00:20:02,720 --> 00:20:07,580
and it spits out all that stuff right

00:20:05,200 --> 00:20:09,470
one actually one interesting aspect of

00:20:07,580 --> 00:20:12,470
this tool so which is somewhat unique to

00:20:09,470 --> 00:20:15,080
it since other tools don't really do it

00:20:12,470 --> 00:20:16,789
I think it actually keeps the order of

00:20:15,080 --> 00:20:20,629
your keys and the same in the same way

00:20:16,789 --> 00:20:23,299
so hopefully it makes some of this kind

00:20:20,629 --> 00:20:24,710
of a you know input-output comparison a

00:20:23,299 --> 00:20:27,830
little bit easier because all the keys

00:20:24,710 --> 00:20:29,690
don't jump around though I think there

00:20:27,830 --> 00:20:33,320
might be an option I think that so

00:20:29,690 --> 00:20:34,759
that's a basic example so this example

00:20:33,320 --> 00:20:38,059
kind of demonstrates that we're using

00:20:34,759 --> 00:20:40,490
power of llamo and power of a you know

00:20:38,059 --> 00:20:42,110
proper programming language so we can

00:20:40,490 --> 00:20:45,080
get into something fancier like for

00:20:42,110 --> 00:20:46,549
example defining variables right by the

00:20:45,080 --> 00:20:48,440
way you all can go to this website it's

00:20:46,549 --> 00:20:51,850
all you know it's interactive so again

00:20:48,440 --> 00:20:55,039
yeah play with it shouldn't be a problem

00:20:51,850 --> 00:20:56,840
but so here's an example of a variable

00:20:55,039 --> 00:20:59,960
right variables no different from any

00:20:56,840 --> 00:21:01,250
other you know language just assign it

00:20:59,960 --> 00:21:03,740
and good to go

00:21:01,250 --> 00:21:05,679
they are mutable I guess so it's not you

00:21:03,740 --> 00:21:08,690
know you can reassign it to a new value

00:21:05,679 --> 00:21:11,210
it's kind of a judgment call in terms of

00:21:08,690 --> 00:21:13,669
whether we should go out or not so this

00:21:11,210 --> 00:21:16,639
is not really a functional tool English

00:21:13,669 --> 00:21:17,509
right but you know we'll see what

00:21:16,639 --> 00:21:19,940
happens with it

00:21:17,509 --> 00:21:22,669
all right so variables are pretty boring

00:21:19,940 --> 00:21:25,759
let's go into an if conditional so an if

00:21:22,669 --> 00:21:29,539
conditional get things going in a more

00:21:25,759 --> 00:21:32,750
interesting way so as you can see over

00:21:29,539 --> 00:21:34,309
here we have a if that says you know if

00:21:32,750 --> 00:21:36,620
true I guess it's always gonna execute

00:21:34,309 --> 00:21:40,429
to true right and it wraps this key

00:21:36,620 --> 00:21:41,990
value pair right and you know if I go in

00:21:40,429 --> 00:21:43,580
and throw in some more key values pairs

00:21:41,990 --> 00:21:46,370
over here like for example you know I

00:21:43,580 --> 00:21:50,059
don't know Z over here right now both of

00:21:46,370 --> 00:21:51,980
these guys sure and so this is this is

00:21:50,059 --> 00:21:54,889
something that kind of a gets into the

00:21:51,980 --> 00:21:56,720
closer to what you know some of this

00:21:54,889 --> 00:21:59,330
other templating languages

00:21:56,720 --> 00:22:02,840
they provide right is ability for you to

00:21:59,330 --> 00:22:05,240
have a way to customize this output

00:22:02,840 --> 00:22:06,650
based on some conditionals right that's

00:22:05,240 --> 00:22:08,330
ultimately whether the power of this

00:22:06,650 --> 00:22:10,039
templating comes in over ops files right

00:22:08,330 --> 00:22:11,059
is that ops false and really that you

00:22:10,039 --> 00:22:14,809
know they don't really allow you to

00:22:11,059 --> 00:22:20,870
express some more complex ideas I guess

00:22:14,809 --> 00:22:22,250
as as a little bit of code so ytt given

00:22:20,870 --> 00:22:23,740
that it works with the mo structure

00:22:22,250 --> 00:22:28,970
actually gives you a little bit of sugar

00:22:23,740 --> 00:22:30,710
around how to deal with yellow so as you

00:22:28,970 --> 00:22:33,200
can see over here you know in this

00:22:30,710 --> 00:22:35,630
example I have if true and so I am

00:22:33,200 --> 00:22:38,299
closing over multiple elements but if

00:22:35,630 --> 00:22:39,650
you do have a one element since we

00:22:38,299 --> 00:22:42,500
wanted to get a little bit fancy over

00:22:39,650 --> 00:22:45,200
here you can use this special I guess

00:22:42,500 --> 00:22:47,480
keyword each slash end so it only

00:22:45,200 --> 00:22:49,820
applies to this next node right and it's

00:22:47,480 --> 00:22:51,350
not again textual right is if you wanna

00:22:49,820 --> 00:22:52,970
you know if you have something like this

00:22:51,350 --> 00:22:56,059
right this continues to work right

00:22:52,970 --> 00:22:59,299
because the entire node key one be map

00:22:56,059 --> 00:23:00,530
item is is the entire site right and you

00:22:59,299 --> 00:23:03,470
know of course if you turn into false

00:23:00,530 --> 00:23:06,080
then it will disappear so that's kind of

00:23:03,470 --> 00:23:08,440
that you know you can nest them you can

00:23:06,080 --> 00:23:11,330
use some variables and whatnot you know

00:23:08,440 --> 00:23:13,970
nothing that you know nothing should be

00:23:11,330 --> 00:23:17,210
too surprising here same thing kind of

00:23:13,970 --> 00:23:21,010
happens for for loops so for loops

00:23:17,210 --> 00:23:23,830
you know you again for end you wrap them

00:23:21,010 --> 00:23:25,669
pythonic way of doing all these things

00:23:23,830 --> 00:23:27,200
you know you can get fancy with

00:23:25,669 --> 00:23:29,120
continues and breaks if you really want

00:23:27,200 --> 00:23:30,650
to I mean we're not necessarily trying

00:23:29,120 --> 00:23:33,470
to encourage people to get fancy with

00:23:30,650 --> 00:23:37,010
anything right but occasionally you do

00:23:33,470 --> 00:23:40,940
need a power of a for loop in your

00:23:37,010 --> 00:23:45,890
template so that's you know that's there

00:23:40,940 --> 00:23:47,179
for you to use all right so then this is

00:23:45,890 --> 00:23:51,080
where kind of we get into more

00:23:47,179 --> 00:23:53,150
interesting things functions right so

00:23:51,080 --> 00:23:55,460
one of the challenges who is kind of

00:23:53,150 --> 00:23:57,080
dealing with a lot of structure right

00:23:55,460 --> 00:23:59,150
whether it be Gamal or whatever it is

00:23:57,080 --> 00:24:00,230
you may want to decide to break your up

00:23:59,150 --> 00:24:04,340
a little bit make it more manageable

00:24:00,230 --> 00:24:07,610
somehow right and one way to do so with

00:24:04,340 --> 00:24:09,559
ytt is to wrap certain structures in

00:24:07,610 --> 00:24:09,960
functions and maybe even move those

00:24:09,559 --> 00:24:11,820
funky

00:24:09,960 --> 00:24:15,750
in two different files right like you

00:24:11,820 --> 00:24:17,730
know module right so an example of here

00:24:15,750 --> 00:24:19,770
right is that we have a we have a

00:24:17,730 --> 00:24:22,110
function called samyama that you know

00:24:19,770 --> 00:24:23,970
has a few map item keys you know the

00:24:22,110 --> 00:24:25,980
keys could be as complex as you want and

00:24:23,970 --> 00:24:27,750
I would just you know say the value of

00:24:25,980 --> 00:24:31,070
the ml keys there is the result of this

00:24:27,750 --> 00:24:35,490
function so you just you know outputs as

00:24:31,070 --> 00:24:37,409
as one would expect now functions are

00:24:35,490 --> 00:24:39,000
you know they can be parameter I

00:24:37,409 --> 00:24:41,220
straight so if I throw in over here you

00:24:39,000 --> 00:24:43,409
know available a you know I turn one two

00:24:41,220 --> 00:24:45,720
three or down here for whatever reason I

00:24:43,409 --> 00:24:47,159
want to use a over here right all your

00:24:45,720 --> 00:24:48,899
parameters are getting passed to and

00:24:47,159 --> 00:24:51,840
whatnot in you know since this is

00:24:48,899 --> 00:24:55,020
pythonic you can use keyword arguments

00:24:51,840 --> 00:24:57,929
to maybe more be more descriptive but

00:24:55,020 --> 00:25:00,390
yeah nothing too surprising but suddenly

00:24:57,929 --> 00:25:02,429
you can break up some of the larger yeah

00:25:00,390 --> 00:25:04,289
else maybe for example in abortions you

00:25:02,429 --> 00:25:06,000
have a lot of different you know jobs

00:25:04,289 --> 00:25:07,380
inside instance group so what you may

00:25:06,000 --> 00:25:08,940
whether he use right because you can

00:25:07,380 --> 00:25:11,510
call function multiple times about that

00:25:08,940 --> 00:25:15,029
and so it gets a little bit interesting

00:25:11,510 --> 00:25:16,950
and as I was saying just earlier you can

00:25:15,029 --> 00:25:19,289
pull that out into a separate file so

00:25:16,950 --> 00:25:21,539
for example in this example removed some

00:25:19,289 --> 00:25:23,669
of those functions into functions that

00:25:21,539 --> 00:25:25,860
leave that llamo and then just calling

00:25:23,669 --> 00:25:28,950
it you do have to import them explicitly

00:25:25,860 --> 00:25:32,789
we are fairly specific about that I

00:25:28,950 --> 00:25:35,190
guess here's a very gun player and you

00:25:32,789 --> 00:25:37,740
know and you're able to kind of reuse

00:25:35,190 --> 00:25:44,490
them right what's what's also cool kind

00:25:37,740 --> 00:25:46,289
of about this right is the these files

00:25:44,490 --> 00:25:48,450
right are entirely kind of a

00:25:46,289 --> 00:25:49,980
self-contained right I mean I guess if

00:25:48,450 --> 00:25:51,659
they keep on referencing other files

00:25:49,980 --> 00:25:54,149
then it's really a collection of files

00:25:51,659 --> 00:25:56,309
that self attained right but this kind

00:25:54,149 --> 00:25:59,640
of starts tying into an idea of you know

00:25:56,309 --> 00:26:01,679
shipping libraries that may be of use to

00:25:59,640 --> 00:26:03,390
people right so for example I've been

00:26:01,679 --> 00:26:05,190
playing with a lot of kubernetes

00:26:03,390 --> 00:26:08,039
recently so I've been kind of a toying

00:26:05,190 --> 00:26:09,740
around with this kubernetes library I am

00:26:08,039 --> 00:26:12,179
a kubernetes library really just

00:26:09,740 --> 00:26:14,340
provides you with a set of files that

00:26:12,179 --> 00:26:17,010
provide some functions that will produce

00:26:14,340 --> 00:26:19,049
you several objects right and so for

00:26:17,010 --> 00:26:21,419
example you wanna say I want a basic

00:26:19,049 --> 00:26:23,490
application and those set of objects

00:26:21,419 --> 00:26:26,159
suddenly get turned into

00:26:23,490 --> 00:26:27,809
I don't know a deployment service you

00:26:26,159 --> 00:26:32,480
know horizontal put out to scale and

00:26:27,809 --> 00:26:35,580
what right so you can't build up

00:26:32,480 --> 00:26:37,590
abstractions with this kind of a you

00:26:35,580 --> 00:26:39,270
know with this kind of facilities and

00:26:37,590 --> 00:26:40,890
you know it really depends on what kind

00:26:39,270 --> 00:26:43,049
of obstructions you looking for it so

00:26:40,890 --> 00:26:46,789
you can make it very useful or you can

00:26:43,049 --> 00:26:49,110
make this very annoying right to use

00:26:46,789 --> 00:26:56,880
pause for a second over here any any

00:26:49,110 --> 00:27:00,559
questions so far in the comments all

00:26:56,880 --> 00:27:00,559
right I'll continue so

00:27:00,760 --> 00:27:05,590
you know now that we know about all

00:27:02,590 --> 00:27:07,420
these conditionals and whatnot you you

00:27:05,590 --> 00:27:08,290
do want to provide some kind of input

00:27:07,420 --> 00:27:11,350
from the user

00:27:08,290 --> 00:27:13,090
eventually right - to these templates

00:27:11,350 --> 00:27:15,670
right to actually do something useful

00:27:13,090 --> 00:27:18,730
right so for example and CF deployment

00:27:15,670 --> 00:27:20,800
you know we have lots of ops files that

00:27:18,730 --> 00:27:22,510
try to signify particular features right

00:27:20,800 --> 00:27:24,850
like we enabled in those functionality

00:27:22,510 --> 00:27:26,680
or I don't know disabled at sea or

00:27:24,850 --> 00:27:28,150
something like that right so a lot of

00:27:26,680 --> 00:27:29,560
that stuff I really boolean's and some

00:27:28,150 --> 00:27:31,450
of those boolean actually interact with

00:27:29,560 --> 00:27:34,750
each other item in different ways right

00:27:31,450 --> 00:27:36,700
so the idea there is that you know

00:27:34,750 --> 00:27:38,890
instead of having this instead of kind

00:27:36,700 --> 00:27:41,830
of putting the burden on the user to

00:27:38,890 --> 00:27:43,390
deal with this kind of a matrix or

00:27:41,830 --> 00:27:45,340
figuring out what to enable what to

00:27:43,390 --> 00:27:48,040
disable kind of thing you as a provider

00:27:45,340 --> 00:27:51,130
if you're using templating should be

00:27:48,040 --> 00:27:53,110
able to capture that in a more you know

00:27:51,130 --> 00:27:54,880
natural way for the user right so a user

00:27:53,110 --> 00:27:57,010
as you can imagine could be providing

00:27:54,880 --> 00:27:59,620
over here let's say dingos true or

00:27:57,010 --> 00:28:02,260
something like that right and you know I

00:27:59,620 --> 00:28:04,570
don't know yet CG Falls or some like

00:28:02,260 --> 00:28:06,310
that and as part of your template you

00:28:04,570 --> 00:28:10,060
could actually be accessing those values

00:28:06,310 --> 00:28:12,130
right now this annotation mobile call

00:28:10,060 --> 00:28:15,760
annotations are anything that touches

00:28:12,130 --> 00:28:17,290
upon that signifies that this chunk of

00:28:15,760 --> 00:28:19,660
the animal is not part of a sample but

00:28:17,290 --> 00:28:21,010
rather an input from the user and you

00:28:19,660 --> 00:28:23,170
can access that through this data

00:28:21,010 --> 00:28:25,600
library that was shipped as part of ytt

00:28:23,170 --> 00:28:28,840
in this data library library allows you

00:28:25,600 --> 00:28:31,180
to access these values directly off of

00:28:28,840 --> 00:28:33,430
it and and actually do something right

00:28:31,180 --> 00:28:36,550
so you can stigma and conditionals or or

00:28:33,430 --> 00:28:39,880
do all kinds of things I guess while I

00:28:36,550 --> 00:28:42,630
talked about input one kind of a cool

00:28:39,880 --> 00:28:45,970
aspect about this and this is really a

00:28:42,630 --> 00:28:48,940
benefit of using a fairly well

00:28:45,970 --> 00:28:52,930
established project Starlog from Google

00:28:48,940 --> 00:28:55,750
is that you really get to control all of

00:28:52,930 --> 00:28:58,090
the inputs into this you know into this

00:28:55,750 --> 00:29:00,970
language and what I mean by that is for

00:28:58,090 --> 00:29:04,870
example currently ytt and probably in

00:29:00,970 --> 00:29:06,580
future as well doesn't have a concept of

00:29:04,870 --> 00:29:09,880
time for example right there's no way to

00:29:06,580 --> 00:29:11,560
say like time that now right there's

00:29:09,880 --> 00:29:13,539
also no network access or file system

00:29:11,560 --> 00:29:16,330
access right the only a

00:29:13,539 --> 00:29:19,029
to files for example is true this load

00:29:16,330 --> 00:29:21,340
facilities that we expose right so the

00:29:19,029 --> 00:29:26,559
the entire interpreter is kind of locked

00:29:21,340 --> 00:29:30,039
down to my fairly paranoid believes so

00:29:26,559 --> 00:29:33,489
it's it's kind of a it's an interesting

00:29:30,039 --> 00:29:35,259
advantage of of this kind of a tool

00:29:33,489 --> 00:29:36,970
versus you know you want could imagine

00:29:35,259 --> 00:29:38,889
right like why use this tool versus

00:29:36,970 --> 00:29:40,179
using like a language right Ruby or

00:29:38,889 --> 00:29:42,820
something like that right to write all

00:29:40,179 --> 00:29:44,499
your configuration file right well one

00:29:42,820 --> 00:29:46,090
aspect to it right is you know when

00:29:44,499 --> 00:29:47,440
you're running some Ruby code right you

00:29:46,090 --> 00:29:49,149
don't necessarily know what exactly it's

00:29:47,440 --> 00:29:50,619
doing right so it becomes very hard to

00:29:49,149 --> 00:29:52,840
share some of those things right you

00:29:50,619 --> 00:29:55,090
don't necessarily wanna download some

00:29:52,840 --> 00:29:56,830
random thing from the internet that

00:29:55,090 --> 00:30:00,399
installs you something and then you know

00:29:56,830 --> 00:30:03,729
see it stole your credentials with ytt

00:30:00,399 --> 00:30:05,710
for example given that it's using star

00:30:03,729 --> 00:30:09,759
lark and given that it's configuring it

00:30:05,710 --> 00:30:11,710
to be very in very conservative ways you

00:30:09,759 --> 00:30:14,049
know there's no way to for example send

00:30:11,710 --> 00:30:15,129
some data over the network to outside

00:30:14,049 --> 00:30:18,190
right because there is no network

00:30:15,129 --> 00:30:21,639
facilities or there is no way to read

00:30:18,190 --> 00:30:24,759
the file that the user of ytt didn't

00:30:21,639 --> 00:30:26,649
allow in into this environment so that's

00:30:24,759 --> 00:30:31,259
kind of an interesting security aspect

00:30:26,649 --> 00:30:31,259
of this tool but max am i doing on time

00:30:31,810 --> 00:30:37,340
you're fine probably at some point like

00:30:35,120 --> 00:30:39,820
you could skip some of the simple ones

00:30:37,340 --> 00:30:43,280
and get to more interesting like yeah

00:30:39,820 --> 00:30:46,850
yeah well I'm about to jump to say

00:30:43,280 --> 00:30:51,200
anyway so this this was data values you

00:30:46,850 --> 00:30:53,180
know an input facility you know helps

00:30:51,200 --> 00:30:53,690
out was actually bringing input from the

00:30:53,180 --> 00:30:57,680
outside

00:30:53,690 --> 00:31:00,230
alright so kind of a jumping into idea

00:30:57,680 --> 00:31:02,600
more quick question is you say that

00:31:00,230 --> 00:31:05,120
what were you showing the playground but

00:31:02,600 --> 00:31:07,700
the two comes with a CLI that people can

00:31:05,120 --> 00:31:14,560
actually use and interact with and input

00:31:07,700 --> 00:31:17,630
in there yes and do you guys have a no

00:31:14,560 --> 00:31:20,270
but it's it's a single binary written in

00:31:17,630 --> 00:31:22,760
go so anyone can you know download it

00:31:20,270 --> 00:31:24,320
and use it to their eyes desires or by a

00:31:22,760 --> 00:31:27,200
very very good point right this is not

00:31:24,320 --> 00:31:28,550
just an online thing it's a it's a

00:31:27,200 --> 00:31:31,220
binary that you just download off of

00:31:28,550 --> 00:31:37,750
github releases and and you use it any

00:31:31,220 --> 00:31:39,010
way you want to use it yeah so

00:31:37,750 --> 00:31:43,420
you know now that we know some of these

00:31:39,010 --> 00:31:46,750
basics of what's provided you know there

00:31:43,420 --> 00:31:48,130
isn't really much beyond that in terms

00:31:46,750 --> 00:31:50,320
of you know what people doing with

00:31:48,130 --> 00:31:52,180
templates are actually you know at last

00:31:50,320 --> 00:31:53,890
two weeks ago or so hours for example

00:31:52,180 --> 00:31:55,750
working with Chris Deuter to kind of

00:31:53,890 --> 00:31:57,070
play around ways like what would CF

00:31:55,750 --> 00:31:59,260
deployment look like if one would use

00:31:57,070 --> 00:32:01,210
something like this right and I will

00:31:59,260 --> 00:32:03,130
obviously CF deployments tree large rate

00:32:01,210 --> 00:32:06,430
so that's not something that's gonna

00:32:03,130 --> 00:32:10,630
just happen even if it ever does happen

00:32:06,430 --> 00:32:12,670
but what what's interesting you kind of

00:32:10,630 --> 00:32:14,680
a you know once you start dealing with a

00:32:12,670 --> 00:32:16,120
lot of configuration you kind of start

00:32:14,680 --> 00:32:20,650
thinking about some of the abstractions

00:32:16,120 --> 00:32:22,300
right and maybe to give you a little bit

00:32:20,650 --> 00:32:26,830
of taste of what those abstractions

00:32:22,300 --> 00:32:28,540
would look like if you go to you know

00:32:26,830 --> 00:32:31,230
they'll give up organizations that holds

00:32:28,540 --> 00:32:33,820
ytt there is a thing called Kate's limb

00:32:31,230 --> 00:32:37,450
and unfortunately I'm a bush example of

00:32:33,820 --> 00:32:39,880
how that would look like but you know

00:32:37,450 --> 00:32:42,880
one could imagine right that you pull up

00:32:39,880 --> 00:32:45,910
a library that's from this repo right

00:32:42,880 --> 00:32:48,220
and all you say to deploy a kubernetes

00:32:45,910 --> 00:32:50,050
application right is something like this

00:32:48,220 --> 00:32:52,450
where you have you know please make me

00:32:50,050 --> 00:32:53,920
an app that has some name and there's

00:32:52,450 --> 00:32:56,590
some basic configuration of this

00:32:53,920 --> 00:33:00,160
particular image and arguments and then

00:32:56,590 --> 00:33:00,730
I you know configure port and that's

00:33:00,160 --> 00:33:03,370
pretty much it

00:33:00,730 --> 00:33:04,360
and now there's some other boilerplate

00:33:03,370 --> 00:33:07,810
going on over here with this for

00:33:04,360 --> 00:33:10,540
template replace but that's not too

00:33:07,810 --> 00:33:14,200
interesting but the gist of this is that

00:33:10,540 --> 00:33:16,000
this ultimately produces a chunk of

00:33:14,200 --> 00:33:18,340
llamo rate that kubernetes is actually

00:33:16,000 --> 00:33:20,320
very happy to deploy and configure all

00:33:18,340 --> 00:33:21,640
kind of together right so that kind of a

00:33:20,320 --> 00:33:25,630
bring some of these things together

00:33:21,640 --> 00:33:28,570
right and as you can see over here you

00:33:25,630 --> 00:33:31,270
know we don't actually allow you to

00:33:28,570 --> 00:33:34,360
configure much else beyond this three or

00:33:31,270 --> 00:33:36,040
so things now that

00:33:34,360 --> 00:33:38,290
raise the question well if you can only

00:33:36,040 --> 00:33:40,810
set the name you can set the image and

00:33:38,290 --> 00:33:43,000
arguments and you can set the port what

00:33:40,810 --> 00:33:44,860
about all the other garbage that I

00:33:43,000 --> 00:33:46,360
typically want to set maybe like I don't

00:33:44,860 --> 00:33:47,860
know you know in kubernetes there's all

00:33:46,360 --> 00:33:50,230
kinds of fancy other flags right that

00:33:47,860 --> 00:33:52,150
you you're able to set right so how do i

00:33:50,230 --> 00:33:57,820
how do I actually configure all of that

00:33:52,150 --> 00:34:00,250
stuff you know beyond this right now the

00:33:57,820 --> 00:34:01,990
most easy approach right is that I keep

00:34:00,250 --> 00:34:03,520
on adding stuff to this library until

00:34:01,990 --> 00:34:07,510
everyone is happy right

00:34:03,520 --> 00:34:09,370
but that's gonna turn very very bad

00:34:07,510 --> 00:34:11,080
quickly right because then it would be

00:34:09,370 --> 00:34:12,550
pretty much exactly all of the

00:34:11,080 --> 00:34:14,050
configuration that kubernetes provides

00:34:12,550 --> 00:34:17,380
let's say right we would have to be here

00:34:14,050 --> 00:34:19,720
right so this goes back to the notion of

00:34:17,380 --> 00:34:24,520
ops files right is you wanna allow your

00:34:19,720 --> 00:34:27,910
users to customize whatever is given to

00:34:24,520 --> 00:34:30,730
them right but you wanna you want them

00:34:27,910 --> 00:34:33,820
to customize without you having to worry

00:34:30,730 --> 00:34:35,620
about how they customize it right so you

00:34:33,820 --> 00:34:37,150
want to kind of D couple their

00:34:35,620 --> 00:34:40,030
customizations from whatever the

00:34:37,150 --> 00:34:42,190
interface you provide right so this is

00:34:40,030 --> 00:34:45,340
where this feature called overlay comes

00:34:42,190 --> 00:34:50,530
in I don't know if I have a full-blown

00:34:45,340 --> 00:34:53,230
example over here yes I do but actually

00:34:50,530 --> 00:34:55,510
you know what let me uh let me pop open

00:34:53,230 --> 00:35:02,710
a different example actually over here

00:34:55,510 --> 00:35:03,970
oh let's see there good example here yes

00:35:02,710 --> 00:35:08,170
there's kind of a just an example of

00:35:03,970 --> 00:35:11,380
here so overlays actually allow you to

00:35:08,170 --> 00:35:14,260
do what ops files do but at a more

00:35:11,380 --> 00:35:15,850
granular in a more granular manner

00:35:14,260 --> 00:35:18,880
because they understand how to deal with

00:35:15,850 --> 00:35:21,490
documents or llamó files that contain

00:35:18,880 --> 00:35:23,940
multiple documents but they also are a

00:35:21,490 --> 00:35:26,860
little bit more paranoid in terms of how

00:35:23,940 --> 00:35:28,570
how it's searching the the llamó

00:35:26,860 --> 00:35:32,560
structure and finding whatever it needs

00:35:28,570 --> 00:35:33,550
to find so to give a basic example over

00:35:32,560 --> 00:35:35,980
here right so imagine you have this

00:35:33,550 --> 00:35:39,550
document right so it's some kind of

00:35:35,980 --> 00:35:43,000
object doesn't matter what it is but for

00:35:39,550 --> 00:35:47,109
whatever reason you wanna remove this

00:35:43,000 --> 00:35:48,880
particular you know annotation right now

00:35:47,109 --> 00:35:50,289
in ops file world right of course you'll

00:35:48,880 --> 00:35:51,609
have to figure out okay well the path

00:35:50,289 --> 00:35:53,229
for this is going to be metadata

00:35:51,609 --> 00:35:55,509
annotations and then this thing over

00:35:53,229 --> 00:35:57,430
here right and as people familiar with

00:35:55,509 --> 00:35:58,900
ops files also note that you know

00:35:57,430 --> 00:36:00,849
because there's a slash in the value you

00:35:58,900 --> 00:36:04,450
have to escape it in a particular way in

00:36:00,849 --> 00:36:06,369
in this path so it doesn't get it's not

00:36:04,450 --> 00:36:11,559
that pretty or as pretty as one could

00:36:06,369 --> 00:36:14,249
hope however in this new way of doing it

00:36:11,559 --> 00:36:17,229
overlays what you do is you define a

00:36:14,249 --> 00:36:18,489
different file or different llamo I mean

00:36:17,229 --> 00:36:21,759
or I guess you can just technically

00:36:18,489 --> 00:36:24,339
stick it in it there as well that has a

00:36:21,759 --> 00:36:25,779
few annotations attached to the objects

00:36:24,339 --> 00:36:27,900
so I think that's the first time I'm

00:36:25,779 --> 00:36:30,450
actually showing you guys an annotation

00:36:27,900 --> 00:36:33,130
attached to the document or chief rate

00:36:30,450 --> 00:36:35,890
so what this says right is that says

00:36:33,130 --> 00:36:40,049
find me a document that contains

00:36:35,890 --> 00:36:42,640
metadata named example ingress one

00:36:40,049 --> 00:36:44,650
content right so there's different ways

00:36:42,640 --> 00:36:46,930
how to much things and one of the

00:36:44,650 --> 00:36:49,239
built-in kind of a selectors is is the

00:36:46,930 --> 00:36:51,759
way to just say you know does some other

00:36:49,239 --> 00:36:54,099
object contain this meaning object will

00:36:51,759 --> 00:36:55,719
subset right and so you know in our

00:36:54,099 --> 00:36:57,430
example of here it will find this object

00:36:55,719 --> 00:37:00,759
you won't find this object right because

00:36:57,430 --> 00:37:02,799
the name is different and ultimately

00:37:00,759 --> 00:37:04,779
then you just all you have to do is you

00:37:02,799 --> 00:37:06,999
just dump the same structure at metadata

00:37:04,779 --> 00:37:09,130
annotations you know let's say this

00:37:06,999 --> 00:37:10,509
thing right and then you again annotate

00:37:09,130 --> 00:37:11,559
what you actually want to do is this

00:37:10,509 --> 00:37:13,089
particular thing right so in this

00:37:11,559 --> 00:37:16,719
particular case we're saying when I

00:37:13,089 --> 00:37:19,269
remove this annotation right and by

00:37:16,719 --> 00:37:21,069
default map items get mapped or get

00:37:19,269 --> 00:37:22,719
matched by their name right so of course

00:37:21,069 --> 00:37:24,069
you'll find this guide and I will remove

00:37:22,719 --> 00:37:27,809
it so that's actually going to be the

00:37:24,069 --> 00:37:30,339
outcome of this row now maybe a more

00:37:27,809 --> 00:37:32,799
fully featured example here is you know

00:37:30,339 --> 00:37:34,329
let's find the ingress to and insert

00:37:32,799 --> 00:37:36,339
some things right so here we're saying

00:37:34,329 --> 00:37:40,059
it's okay to insert these two new things

00:37:36,339 --> 00:37:42,910
and some of the I guess facilities over

00:37:40,059 --> 00:37:47,259
here is trying to be somewhat protective

00:37:42,910 --> 00:37:50,499
so for example if I remove if I remove

00:37:47,259 --> 00:37:53,199
this annotation over here I will

00:37:50,499 --> 00:37:57,640
actually something across so if if I

00:37:53,199 --> 00:37:58,869
remove this over here nope that's not

00:37:57,640 --> 00:38:00,699
the one what you don't want to show

00:37:58,869 --> 00:38:02,920
right so

00:38:00,699 --> 00:38:04,959
I guess it won't be it won't be actually

00:38:02,920 --> 00:38:07,329
easily shown here in this example but

00:38:04,959 --> 00:38:09,699
the idea here is that we actually have

00:38:07,329 --> 00:38:13,690
to explicitly say that this item is

00:38:09,699 --> 00:38:15,789
missing and it's missing in the original

00:38:13,690 --> 00:38:18,279
document right to avoid accidentally

00:38:15,789 --> 00:38:19,989
overwriting kind of certain things right

00:38:18,279 --> 00:38:22,690
so the idea behind this is just like how

00:38:19,989 --> 00:38:24,489
ops files are by default they expect the

00:38:22,690 --> 00:38:25,479
keys to be in the documents right and

00:38:24,489 --> 00:38:27,609
sometimes you have to put in some

00:38:25,479 --> 00:38:29,079
question marks overlays are quite

00:38:27,609 --> 00:38:31,779
similar in that but they go a little bit

00:38:29,079 --> 00:38:33,309
even further and are fairly explicit

00:38:31,779 --> 00:38:34,869
about some of the content that you're

00:38:33,309 --> 00:38:37,479
inserting now some of those features you

00:38:34,869 --> 00:38:41,170
can turn off and turn on so to customize

00:38:37,479 --> 00:38:43,329
it kind of alright but the gist of it is

00:38:41,170 --> 00:38:45,369
that it tries to help you avoid

00:38:43,329 --> 00:38:47,650
accidentally making typos and all kinds

00:38:45,369 --> 00:38:49,449
of other things or maybe you know

00:38:47,650 --> 00:38:50,430
accidentally inserting things in wrong

00:38:49,449 --> 00:38:52,959
places

00:38:50,430 --> 00:38:54,609
so that's kind of the gist of overlays

00:38:52,959 --> 00:38:56,769
right so we kind of went from the

00:38:54,609 --> 00:38:58,630
templating world into this world over

00:38:56,769 --> 00:39:00,309
here now overlays could be used by the

00:38:58,630 --> 00:39:01,900
people who are writing templates but

00:39:00,309 --> 00:39:03,579
they also could be used by the people

00:39:01,900 --> 00:39:05,440
who are consuming the templates right

00:39:03,579 --> 00:39:07,779
once they temple sized all their stuff

00:39:05,440 --> 00:39:13,059
or once they rendered all the templates

00:39:07,779 --> 00:39:14,920
right but yeah the gist of it is that in

00:39:13,059 --> 00:39:16,630
Waikiki kind of tries to cover both of

00:39:14,920 --> 00:39:19,239
these audiences and we think that

00:39:16,630 --> 00:39:21,640
providing templating facilities is is

00:39:19,239 --> 00:39:23,589
better for providers and then providing

00:39:21,640 --> 00:39:24,789
overlaid facility is better for people

00:39:23,589 --> 00:39:27,279
who actually customized the

00:39:24,789 --> 00:39:30,190
configuration so max is saying that I

00:39:27,279 --> 00:39:33,900
have a little bit of time left does

00:39:30,190 --> 00:39:37,739
anyone have any questions any any

00:39:33,900 --> 00:39:37,739
discussion topics or anything like that

00:39:42,650 --> 00:39:47,220
so I don't see anything on the chat we

00:39:45,180 --> 00:39:52,530
probably need to go to the to the next

00:39:47,220 --> 00:39:54,480
talk I think let me say to everybody I

00:39:52,530 --> 00:39:56,520
mean I think personally that this has a

00:39:54,480 --> 00:40:00,810
chance to revolutionize the way you do

00:39:56,520 --> 00:40:04,110
yamo Demetri is not gonna say that but I

00:40:00,810 --> 00:40:07,950
know he's thinking that aneema this is

00:40:04,110 --> 00:40:09,930
this is awesome I think you know you

00:40:07,950 --> 00:40:12,600
you all should try it because basically

00:40:09,930 --> 00:40:13,950
you know now you can actually write real

00:40:12,600 --> 00:40:15,720
programming language and you can

00:40:13,950 --> 00:40:17,850
annotate and it just changes things

00:40:15,720 --> 00:40:19,980
there's so many directions on this so I

00:40:17,850 --> 00:40:23,450
don't know is there a final word that's

00:40:19,980 --> 00:40:25,190
gonna say Demetri or Nina to tell people

00:40:23,450 --> 00:40:28,080
what to expect

00:40:25,190 --> 00:40:30,480
well thank you for listening and you

00:40:28,080 --> 00:40:32,910
know feel free to find us on Cloud

00:40:30,480 --> 00:40:35,430
Foundry slack or you know or email or

00:40:32,910 --> 00:40:38,850
get up and we're happy to discuss

00:40:35,430 --> 00:40:42,090
anything yeah I and look for more

00:40:38,850 --> 00:40:46,250
actually I'm trying to keep up with

00:40:42,090 --> 00:40:49,530
these guys you'll see anyway all right

00:40:46,250 --> 00:40:56,100
so feel free to reach out to them so the

00:40:49,530 --> 00:41:00,990
next talk I guess pivotal also and she's

00:40:56,100 --> 00:41:06,540
gonna talk to us about integrating they

00:41:00,990 --> 00:41:11,550
have really cool stuff to show us yeah

00:41:06,540 --> 00:41:13,830
I'm gonna yeah so we have a couple of

00:41:11,550 --> 00:41:16,230
people from the networking team here and

00:41:13,830 --> 00:41:18,060
we have nip tails engineer and and also

00:41:16,230 --> 00:41:19,740
clear who's joining us as product

00:41:18,060 --> 00:41:21,660
manager so I'll actually hand it over to

00:41:19,740 --> 00:41:23,670
Nate here she'll do the demo I'm not

00:41:21,660 --> 00:41:25,350
gonna talk much

00:41:23,670 --> 00:41:27,920
yeah but I'll be around to answer

00:41:25,350 --> 00:41:27,920
questions

00:41:29,480 --> 00:41:37,849
hello we don't see your perfect okay

00:41:34,750 --> 00:41:40,480
yeah so I'm gonna demo weighted routing

00:41:37,849 --> 00:41:45,020
which is one of the first features of

00:41:40,480 --> 00:41:46,970
sto integrated with Cloud Foundry the is

00:41:45,020 --> 00:41:49,880
do networking tier is deployed

00:41:46,970 --> 00:41:52,220
side-by-side with what already exists so

00:41:49,880 --> 00:41:55,369
when you include sto in your deployment

00:41:52,220 --> 00:41:57,680
it adds an sto domain tier CF domains

00:41:55,369 --> 00:42:00,500
and if you push apps to the isseo

00:41:57,680 --> 00:42:04,310
domains then you can leverage sto

00:42:00,500 --> 00:42:06,500
features like weighted routing so the

00:42:04,310 --> 00:42:09,650
use case for weighted routing

00:42:06,500 --> 00:42:14,810
specifically is like a be testing or

00:42:09,650 --> 00:42:17,000
canary releases or gradual rollouts so

00:42:14,810 --> 00:42:20,000
you can have like a specific amount of

00:42:17,000 --> 00:42:24,700
traffic to each version of your app so

00:42:20,000 --> 00:42:24,700
yeah cool I'm gonna share my screen

00:42:29,890 --> 00:42:39,650
okay yeah we see it and I guess people

00:42:33,470 --> 00:42:43,609
can pinch to see it yep okay yeah so

00:42:39,650 --> 00:42:49,280
this starting state here is that I have

00:42:43,609 --> 00:42:51,800
a Dora version one two played with with

00:42:49,280 --> 00:42:57,260
a route and door aversion to doesn't

00:42:51,800 --> 00:43:07,609
have a route yet so if I if I forever

00:42:57,260 --> 00:43:16,070
curl this route you'll always see it

00:43:07,609 --> 00:43:25,460
hitting version one cool and if we look

00:43:16,070 --> 00:43:30,290
at the route mappings you can see that

00:43:25,460 --> 00:43:34,339
every wait huh every route has a wait

00:43:30,290 --> 00:43:37,790
now associated with it so the wait for

00:43:34,339 --> 00:43:39,770
by default is gonna be one so the way

00:43:37,790 --> 00:43:42,530
for the one route that we have is one

00:43:39,770 --> 00:43:45,650
right now so we want to roll out version

00:43:42,530 --> 00:43:47,300
two of this app it'll also get a weight

00:43:45,650 --> 00:43:49,550
of one which is the default which would

00:43:47,300 --> 00:43:51,530
mean 50% of the traffic would go to

00:43:49,550 --> 00:43:54,710
version 1 and 50 percent would go to

00:43:51,530 --> 00:43:57,349
version 2 let's say we don't want that

00:43:54,710 --> 00:43:59,000
so we want to make more of our traffic

00:43:57,349 --> 00:44:05,420
goat abrasion 1 because we're not

00:43:59,000 --> 00:44:08,210
confident okay so we can do that by

00:44:05,420 --> 00:44:11,569
doing CF update route wait for Dora

00:44:08,210 --> 00:44:19,260
version 1 and making the weight 9 this

00:44:11,569 --> 00:44:23,850
is just the CF CLI plug-in cool so

00:44:19,260 --> 00:44:27,320
check that it got that value cool so the

00:44:23,850 --> 00:44:27,320
weight has been updated to nine

00:44:27,970 --> 00:44:38,240
um all right so now let's set up a route

00:44:33,740 --> 00:44:40,580
for version 2 and as we just talked

00:44:38,240 --> 00:44:44,390
about the default weight will be 1 so

00:44:40,580 --> 00:44:48,290
the weight for version 1 is 9 the weight

00:44:44,390 --> 00:44:51,020
for version 2 is 1 so that means 90% of

00:44:48,290 --> 00:44:52,700
traffic should go to version 1 and 10

00:44:51,020 --> 00:44:57,950
percent of traffic should go to version

00:44:52,700 --> 00:45:01,099
2 we can see that again in route

00:44:57,950 --> 00:45:06,589
mappings one of the routes has weight 1

00:45:01,099 --> 00:45:08,990
and the other one has weight 9 it'll

00:45:06,589 --> 00:45:16,040
actually take a sec for this to start

00:45:08,990 --> 00:45:20,839
working because it it's hitting a copy

00:45:16,040 --> 00:45:23,359
end point and then for the SEO

00:45:20,839 --> 00:45:29,000
components like copilot and pilot to

00:45:23,359 --> 00:45:35,210
sync it up with the router that polling

00:45:29,000 --> 00:45:38,599
interval is every 30 seconds so we

00:45:35,210 --> 00:45:44,420
should soon start to see that 10% of the

00:45:38,599 --> 00:45:47,869
traffic goes to version 2 yeah so mostly

00:45:44,420 --> 00:45:56,720
ones with a couple of version twos

00:45:47,869 --> 00:46:11,720
sprinkled in there you can see there's a

00:45:56,720 --> 00:46:13,700
going up here yeah okay and then if you

00:46:11,720 --> 00:46:17,630
want to now switch over most of the

00:46:13,700 --> 00:46:20,930
traffic to version one to version two

00:46:17,630 --> 00:46:26,210
you can update version one to have a

00:46:20,930 --> 00:46:30,770
weight of 25 of day version 2 to have a

00:46:26,210 --> 00:46:34,480
weight of 75 then now we should see most

00:46:30,770 --> 00:46:34,480
of the requests go to version 2

00:46:37,310 --> 00:46:42,290
soon in like 30 seconds

00:46:57,190 --> 00:47:04,490
okay so now like about three quarters of

00:47:02,300 --> 00:47:10,580
the requests are going to version two

00:47:04,490 --> 00:47:14,320
and a quarter integration like alright

00:47:10,580 --> 00:47:14,320
that's all that's all I got

00:47:16,780 --> 00:47:27,500
does anyone have any questions about

00:47:20,500 --> 00:47:40,700
this stuff I guess an obvious question

00:47:27,500 --> 00:47:42,110
is if you yeah so we're only supporting

00:47:40,700 --> 00:47:44,120
numerically so the way it has to be

00:47:42,110 --> 00:47:47,480
between one and one twenty eight and we

00:47:44,120 --> 00:47:49,250
are supporting the way it calculates is

00:47:47,480 --> 00:47:52,640
there's a numerator and the denominator

00:47:49,250 --> 00:47:54,680
so your weights could add up to more

00:47:52,640 --> 00:47:56,510
than 100 but yeah we like if you have

00:47:54,680 --> 00:48:00,350
more than hundred apps that are mapped

00:47:56,510 --> 00:48:01,760
to the same route be probably like I

00:48:00,350 --> 00:48:03,680
don't think that's going to work because

00:48:01,760 --> 00:48:05,480
we do in support fraction it's in fact

00:48:03,680 --> 00:48:15,050
it's to doesn't support fractional waves

00:48:05,480 --> 00:48:16,580
right now the weight that you know they

00:48:15,050 --> 00:48:18,290
don't have to add up to because it's a

00:48:16,580 --> 00:48:20,180
numerator and denominator right so it's

00:48:18,290 --> 00:48:22,250
like it can be anywhere between 1 and

00:48:20,180 --> 00:48:24,650
128 and it's basically like whatever

00:48:22,250 --> 00:48:27,560
let's say app 1 has a weight of 1

00:48:24,650 --> 00:48:29,870
absolutely as a weight of you know 1 we

00:48:27,560 --> 00:48:32,510
do a 1 upon 1 plus 1 right so it's a 1

00:48:29,870 --> 00:48:35,270
upon 2 and 1 upon 2 so it doesn't have

00:48:32,510 --> 00:48:49,820
to add up to 100 actually I think some

00:48:35,270 --> 00:48:56,180
people call that proportional yeah and

00:48:49,820 --> 00:48:59,800
this comes and yeah it's actually been

00:48:56,180 --> 00:49:01,690
around in the legend of CF deployment

00:48:59,800 --> 00:49:03,850
and you have st orally is we have

00:49:01,690 --> 00:49:07,510
instructions and how you can install

00:49:03,850 --> 00:49:09,880
these tod leaves only the CSC li plugin

00:49:07,510 --> 00:49:13,030
is you know where otherwise it's been

00:49:09,880 --> 00:49:14,590
there for a while in these charities and

00:49:13,030 --> 00:49:18,880
we had instructions on how you can set

00:49:14,590 --> 00:49:21,160
it up once you have also i should

00:49:18,880 --> 00:49:23,440
mention that we do hope to actually

00:49:21,160 --> 00:49:24,820
support percentage weights but given

00:49:23,440 --> 00:49:27,010
like that there are some cap e

00:49:24,820 --> 00:49:30,580
limitations we just choose to do numeric

00:49:27,010 --> 00:49:32,770
weights first this might be a little bit

00:49:30,580 --> 00:49:38,130
of chopping but with this feature does

00:49:32,770 --> 00:49:41,620
that mean that a recommended approach to

00:49:38,130 --> 00:49:44,710
doing production like deploys in CF is

00:49:41,620 --> 00:49:45,970
to use this feature versus i think there

00:49:44,710 --> 00:49:48,730
is another feature called blue-green

00:49:45,970 --> 00:49:50,320
deploys right alright so i think the

00:49:48,730 --> 00:49:53,170
feedback we've heard in general is that

00:49:50,320 --> 00:49:55,390
blue team deploys are two basic and most

00:49:53,170 --> 00:49:57,850
customers find it like doesn't meet

00:49:55,390 --> 00:50:00,130
their needs because it's really like

00:49:57,850 --> 00:50:02,740
okay you create another app you map it

00:50:00,130 --> 00:50:06,730
and then you switch over at some point

00:50:02,740 --> 00:50:09,940
but this is not production ready yet

00:50:06,730 --> 00:50:11,920
it's still experimental so we don't

00:50:09,940 --> 00:50:14,470
think this will be the recommended

00:50:11,920 --> 00:50:16,600
approach to switch over apps right away

00:50:14,470 --> 00:50:19,120
until we are able to get it to a place

00:50:16,600 --> 00:50:22,960
where it is part of you know mainstream

00:50:19,120 --> 00:50:26,560
it's out of data yeah

00:50:22,960 --> 00:50:28,900
so as mithya mentioned in her demo like

00:50:26,560 --> 00:50:30,610
you we are right now recommending it as

00:50:28,900 --> 00:50:32,560
a parallel routing the troll plane so

00:50:30,610 --> 00:50:34,960
you have another domain which is mapped

00:50:32,560 --> 00:50:36,760
to the sto router and only apps that are

00:50:34,960 --> 00:50:40,980
mapped to that domain actually you can

00:50:36,760 --> 00:50:43,420
use weighted routing so it's not exactly

00:50:40,980 --> 00:50:45,160
we went with that approach so that we

00:50:43,420 --> 00:50:47,050
can at least start by pushing out

00:50:45,160 --> 00:50:48,790
features and have customers use it and

00:50:47,050 --> 00:50:50,860
start getting feedback and we are taking

00:50:48,790 --> 00:50:52,720
the approach of releasing some of these

00:50:50,860 --> 00:50:54,340
features which are not currently

00:50:52,720 --> 00:50:55,960
supported in the current routing control

00:50:54,340 --> 00:51:00,130
plane like weighted routing and we are

00:50:55,960 --> 00:51:02,500
also now working on app to app MPLS and

00:51:00,130 --> 00:51:04,120
and and new features the container

00:51:02,500 --> 00:51:05,980
networking which don't exist in the

00:51:04,120 --> 00:51:08,140
current container networking layers and

00:51:05,980 --> 00:51:10,600
our hope is that we will be able to this

00:51:08,140 --> 00:51:13,000
is sort of like here we are exposing

00:51:10,600 --> 00:51:14,109
these new features so customers can can

00:51:13,000 --> 00:51:16,089
use them and give us p

00:51:14,109 --> 00:51:17,739
and it will hopefully create some amount

00:51:16,089 --> 00:51:19,690
of interest in this new routing to you

00:51:17,739 --> 00:51:21,519
otherwise if he had just worked towards

00:51:19,690 --> 00:51:23,410
parity it might have been very tough for

00:51:21,519 --> 00:51:30,999
us to convince people to actually use it

00:51:23,410 --> 00:51:34,180
at all just quite quick as the the the

00:51:30,999 --> 00:51:35,769
East EO portion plus the N word portion

00:51:34,180 --> 00:51:37,210
this also applies to the app to app

00:51:35,769 --> 00:51:41,980
communication right the the weighted

00:51:37,210 --> 00:51:44,230
routing not yet yeah

00:51:41,980 --> 00:51:45,369
we haven't tested it actually it might

00:51:44,230 --> 00:51:47,559
just work

00:51:45,369 --> 00:51:48,489
I haven't tested it I think it might

00:51:47,559 --> 00:51:50,710
just work

00:51:48,489 --> 00:51:53,259
we are focused on my client side load

00:51:50,710 --> 00:51:55,269
balancing retries and timeouts and M TLS

00:51:53,259 --> 00:51:56,619
for app to app communication first and I

00:51:55,269 --> 00:51:58,690
think we do routing should work we

00:51:56,619 --> 00:52:01,119
haven't tried it I could try it and tell

00:51:58,690 --> 00:52:04,109
you I've tried it it does work but we

00:52:01,119 --> 00:52:04,109
don't make any promises

00:52:05,580 --> 00:52:12,850
sounds like that was a promise that it's

00:52:08,500 --> 00:52:16,510
gonna work try it Dmitri

00:52:12,850 --> 00:52:20,770
any other questions I think I see

00:52:16,510 --> 00:52:22,780
somebody on the chat what are some of

00:52:20,770 --> 00:52:30,460
the challenges to making this production

00:52:22,780 --> 00:52:30,760
ready yeah I know sitting right next to

00:52:30,460 --> 00:52:35,410
me

00:52:30,760 --> 00:52:38,470
but scale is one of the issues right so

00:52:35,410 --> 00:52:42,190
we've tested external rods to 20,000

00:52:38,470 --> 00:52:45,730
routes and 20,000 apps but we haven't

00:52:42,190 --> 00:52:47,890
tested it to like 250 thousand yet the

00:52:45,730 --> 00:52:51,220
other issue I can see is just parity

00:52:47,890 --> 00:52:53,260
right like we cannot like we cannot make

00:52:51,220 --> 00:52:56,800
this production ready until it's maybe

00:52:53,260 --> 00:52:59,440
at parity with the go router but that's

00:52:56,800 --> 00:53:01,840
something maybe we should that's an

00:52:59,440 --> 00:53:05,580
assumption we should check but I think

00:53:01,840 --> 00:53:05,580
scale is definitely one of those issues

00:53:07,890 --> 00:53:15,280
I mean we're doing good on time we have

00:53:11,230 --> 00:53:17,650
five minutes now but I guess maybe one

00:53:15,280 --> 00:53:19,960
thing Chuba is can you talk about like

00:53:17,650 --> 00:53:23,140
your wood map in terms of what's coming

00:53:19,960 --> 00:53:24,960
next in terms of your your leveraging of

00:53:23,140 --> 00:53:29,110
these geo and what people should expect

00:53:24,960 --> 00:53:31,180
besides getting it yeah so I think one

00:53:29,110 --> 00:53:33,520
of the big one of the next things we

00:53:31,180 --> 00:53:35,290
should come pretty soon as support for

00:53:33,520 --> 00:53:37,150
dynamically you configured sidecars

00:53:35,290 --> 00:53:39,580
supporting like client side load

00:53:37,150 --> 00:53:42,760
balancing tree trials and timeouts for

00:53:39,580 --> 00:53:45,160
app to app communication and transparent

00:53:42,760 --> 00:53:48,790
MPLS for app to app communication and

00:53:45,160 --> 00:53:52,120
then we'd be focused on M TLS for from

00:53:48,790 --> 00:53:54,100
the edge envoy to the sidecar envoys and

00:53:52,120 --> 00:53:56,950
I think we will work on scale and

00:53:54,100 --> 00:53:59,740
parallel and then I think once we have

00:53:56,950 --> 00:54:01,390
those things we are still trying to

00:53:59,740 --> 00:54:03,250
figure out our roadmap but I think we

00:54:01,390 --> 00:54:05,410
will start working on a lot of the core

00:54:03,250 --> 00:54:07,870
outer parity features right we need to

00:54:05,410 --> 00:54:09,550
get to parity at some point to be able

00:54:07,870 --> 00:54:11,380
to deprecate the core router and

00:54:09,550 --> 00:54:13,330
actually start using this and that's

00:54:11,380 --> 00:54:14,890
still a very long timeline because we

00:54:13,330 --> 00:54:17,710
will have to give the community a long

00:54:14,890 --> 00:54:19,570
enough transition window but we have

00:54:17,710 --> 00:54:21,820
start working on parity from the go

00:54:19,570 --> 00:54:24,300
router to this so things like isolation

00:54:21,820 --> 00:54:26,589
segments route services sticky sessions

00:54:24,300 --> 00:54:29,710
supporting you know multiple domains

00:54:26,589 --> 00:54:32,290
custom context paths we don't do any of

00:54:29,710 --> 00:54:34,630
that right now in this right so there's

00:54:32,290 --> 00:54:37,330
a long list of go router parity features

00:54:34,630 --> 00:54:39,970
that we need to get to and I I've you

00:54:37,330 --> 00:54:41,830
scale as also being one of them because

00:54:39,970 --> 00:54:45,580
the go router today like has been proven

00:54:41,830 --> 00:54:46,960
at scale and is being used at scale so I

00:54:45,580 --> 00:54:48,760
think there will be a long list of

00:54:46,960 --> 00:54:51,310
parity features that you'll have to work

00:54:48,760 --> 00:55:10,510
on before we can deprecated the go

00:54:51,310 --> 00:55:12,970
router and the TCP router but you listed

00:55:10,510 --> 00:55:14,560
a lot of really cool stuff I mean let me

00:55:12,970 --> 00:55:18,670
ask you a business this is what this

00:55:14,560 --> 00:55:25,450
year right thank 2019 I cannot promise

00:55:18,670 --> 00:55:27,400
that it even so I think when I started

00:55:25,450 --> 00:55:29,470
on the routing team about a year and a

00:55:27,400 --> 00:55:32,230
half ago one of the questions we asked

00:55:29,470 --> 00:55:34,660
was like what does it mean to parity

00:55:32,230 --> 00:55:36,099
with like what all what are all the

00:55:34,660 --> 00:55:37,780
things that good outer supports right

00:55:36,099 --> 00:55:40,210
because the go router actually has been

00:55:37,780 --> 00:55:41,770
in existence for six and a half years or

00:55:40,210 --> 00:55:45,010
something and it came to us from B and

00:55:41,770 --> 00:55:47,260
there so we actually went in and dug in

00:55:45,010 --> 00:55:48,940
long list of things that the go router

00:55:47,260 --> 00:55:50,650
supports which I don't think is an

00:55:48,940 --> 00:55:53,500
exhaustive list of everything the go

00:55:50,650 --> 00:55:56,109
router supports so I like I cannot

00:55:53,500 --> 00:55:59,650
promise parity by the end of this year

00:55:56,109 --> 00:56:05,380
so yeah like I don't have a timeline I

00:55:59,650 --> 00:56:07,240
think it's a long ish timeline at least

00:56:05,380 --> 00:56:10,000
you know get familiar with it and

00:56:07,240 --> 00:56:13,030
hopefully they are comfortable to start

00:56:10,000 --> 00:56:15,310
using absolutely I think that is our

00:56:13,030 --> 00:56:17,050
intent with trying to release this an an

00:56:15,310 --> 00:56:19,359
intramental way right we don't want to

00:56:17,050 --> 00:56:22,750
beat all the way to like you know we

00:56:19,359 --> 00:56:24,460
have parity till we even like have like

00:56:22,750 --> 00:56:26,650
a few features out and we will keep

00:56:24,460 --> 00:56:27,940
releasing features incrementally on this

00:56:26,650 --> 00:56:29,859
routing the troll plane and we are

00:56:27,940 --> 00:56:31,260
hoping that eventually it will reach a

00:56:29,859 --> 00:56:35,790
place where some customers

00:56:31,260 --> 00:56:39,300
actually use it enough sounds like June

00:56:35,790 --> 00:56:40,590
July something like that Amen you're not

00:56:39,300 --> 00:56:45,180
a PM anymore that's why you're giving

00:56:40,590 --> 00:56:49,020
dates yeah Demetri we welcome you to

00:56:45,180 --> 00:56:53,880
work with ya I can help us figure out

00:56:49,020 --> 00:56:56,730
the days okay well this was very

00:56:53,880 --> 00:57:00,570
exciting I mean obviously you know if

00:56:56,730 --> 00:57:04,170
you're interested in SEO check it out I

00:57:00,570 --> 00:57:06,420
give everybody back I think two minutes

00:57:04,170 --> 00:57:07,970
of their time since I don't see any

00:57:06,420 --> 00:57:13,020
questions last chance

00:57:07,970 --> 00:57:16,760
nope all right I'll see everybody in Oh

00:57:13,020 --> 00:57:20,160
there is a chat hold on let's see I

00:57:16,760 --> 00:57:22,500
guess we talked about this the future

00:57:20,160 --> 00:57:25,110
stated 429 you know ready so that

00:57:22,500 --> 00:57:27,360
covered it but I will see everybody in

00:57:25,110 --> 00:57:28,920
Philadelphia come to Philadelphia there

00:57:27,360 --> 00:57:34,010
are great cheesesteaks

00:57:28,920 --> 00:57:34,010

YouTube URL: https://www.youtube.com/watch?v=AOEXSjIvDms


