Title: Cloud Foundry Community Advisory Board Call [June 2020]
Publication date: 2020-06-17
Playlist: Community Advisory Board
Description: 
	Agenda: https://docs.google.com/document/d/1SCOlAquyUmNM-AQnekCOXiwhLs6gveTxAcduvDcW_xI/edit?usp=sharing
Captions: 
	00:00:00,030 --> 00:00:06,600
okay good morning or evening everybody

00:00:03,629 --> 00:00:09,900
welcome to the cab call for this month I

00:00:06,600 --> 00:00:12,780
am guest emceeing today as Troy at a

00:00:09,900 --> 00:00:15,529
conflict although Troy's on audio for

00:00:12,780 --> 00:00:17,789
the beginning of this call and I try and

00:00:15,529 --> 00:00:20,760
congratulations on your new your new

00:00:17,789 --> 00:00:21,090
role as extensions PMC lead thanks very

00:00:20,760 --> 00:00:22,410
much

00:00:21,090 --> 00:00:24,330
I won't have an update today though I'm

00:00:22,410 --> 00:00:27,240
afraid that's that's quite all right

00:00:24,330 --> 00:00:30,840
quite all right yeah I'll reach out to

00:00:27,240 --> 00:00:34,950
you this week and we can talk about that

00:00:30,840 --> 00:00:36,719
and getting getting stuff on there so

00:00:34,950 --> 00:00:39,149
cab call

00:00:36,719 --> 00:00:41,600
we've got summit next week probably

00:00:39,149 --> 00:00:43,620
starting off with the cff highlights

00:00:41,600 --> 00:00:45,210
something next week you probably all

00:00:43,620 --> 00:00:48,840
know about this it's very exciting

00:00:45,210 --> 00:00:51,539
these schedule is up looks like we've

00:00:48,840 --> 00:00:53,640
got some great breakout sessions we also

00:00:51,539 --> 00:00:55,050
have afternoon hands-on labs which we

00:00:53,640 --> 00:00:56,579
added a little bit later in the schedule

00:00:55,050 --> 00:00:58,559
if you haven't taken a look at those I

00:00:56,579 --> 00:01:00,690
highly recommend it

00:00:58,559 --> 00:01:02,010
we've got some I'll briefly talk about

00:01:00,690 --> 00:01:05,100
those because I don't think that's been

00:01:02,010 --> 00:01:07,650
discussed here yet but we've got some

00:01:05,100 --> 00:01:09,390
some great labs we've got a CF for

00:01:07,650 --> 00:01:13,710
Kate's deployment lab we've got a coop

00:01:09,390 --> 00:01:18,180
CF deployment lab we've got a lab from

00:01:13,710 --> 00:01:20,310
the CLI team on new features in v7 which

00:01:18,180 --> 00:01:23,100
should be should be pretty pretty

00:01:20,310 --> 00:01:25,650
awesome and then Steve Payne Burke will

00:01:23,100 --> 00:01:29,939
be running through try cloud foundry for

00:01:25,650 --> 00:01:31,610
for total newbies so it nice nice

00:01:29,939 --> 00:01:34,110
little curriculum oh and then of course

00:01:31,610 --> 00:01:36,390
project glue on from Stark and Wayne

00:01:34,110 --> 00:01:40,740
which you'll be seeing a presentation on

00:01:36,390 --> 00:01:44,369
during this call James you're good to go

00:01:40,740 --> 00:01:46,110
for that today I'm sure you are cool

00:01:44,369 --> 00:01:48,090
if you anyone have any questions about

00:01:46,110 --> 00:01:50,759
summit obviously I can answer questions

00:01:48,090 --> 00:01:51,899
about the labs I if I can't necessarily

00:01:50,759 --> 00:01:53,189
answer all of your questions about

00:01:51,899 --> 00:01:54,270
summit because this is the first time

00:01:53,189 --> 00:01:56,189
we've done into that like this but

00:01:54,270 --> 00:01:58,610
anyone have any questions or thoughts on

00:01:56,189 --> 00:01:58,610
summit

00:01:59,610 --> 00:02:07,509
I'm assuming folks can register right up

00:02:04,180 --> 00:02:10,479
until the event starts yes you I assumed

00:02:07,509 --> 00:02:12,400
that as well yes I don't think that's

00:02:10,479 --> 00:02:15,130
gated at any point I assume you can sign

00:02:12,400 --> 00:02:16,270
up an hour into the event I can I'll

00:02:15,130 --> 00:02:19,410
double-check that though because that

00:02:16,270 --> 00:02:21,459
seems so as good to ask questions early

00:02:19,410 --> 00:02:24,069
and of course if anyone does have

00:02:21,459 --> 00:02:26,950
questions that pop up just reach out in

00:02:24,069 --> 00:02:29,470
the summit slack channel in kleinereise

00:02:26,950 --> 00:02:31,510
luck and hopefully we can get all of

00:02:29,470 --> 00:02:34,150
your questions answered there first time

00:02:31,510 --> 00:02:35,800
doing a virtual event of course so you

00:02:34,150 --> 00:02:37,660
know it'll be interesting but I'm

00:02:35,800 --> 00:02:39,040
looking forward to it not as much as I

00:02:37,660 --> 00:02:41,140
would if we were all gonna be hanging

00:02:39,040 --> 00:02:45,519
out in Austin or some other locale but

00:02:41,140 --> 00:02:47,500
it should be good with that that's all

00:02:45,519 --> 00:02:50,769
we've got from the cff so I will move on

00:02:47,500 --> 00:02:52,780
to PNC project highlights Eric you want

00:02:50,769 --> 00:02:55,569
to talk about some things happen in the

00:02:52,780 --> 00:02:56,650
app runtime PMC yeah happy to dress just

00:02:55,569 --> 00:03:00,310
to cover some highlights from the past

00:02:56,650 --> 00:03:04,690
month or so we've had new releases from

00:03:00,310 --> 00:03:06,790
both of the teams that are getting the

00:03:04,690 --> 00:03:10,000
app runtime deployed onto kate's

00:03:06,790 --> 00:03:11,650
Relan says release version 0.3 of c

00:03:10,000 --> 00:03:13,600
affricates I know they have some

00:03:11,650 --> 00:03:14,980
improvements to upgradability and

00:03:13,600 --> 00:03:16,959
configurability I think at this point

00:03:14,980 --> 00:03:20,320
now you can bring your own certs for

00:03:16,959 --> 00:03:21,549
ingress gateways and that and then qcf

00:03:20,320 --> 00:03:23,920
has released

00:03:21,549 --> 00:03:26,860
I think latest version is 2 to 2 there

00:03:23,920 --> 00:03:28,780
and I know they've been getting some bug

00:03:26,860 --> 00:03:32,519
fixes into that and they're also focused

00:03:28,780 --> 00:03:35,290
now on incorporating the UAA's

00:03:32,519 --> 00:03:38,410
deployment artifacts tickets as part of

00:03:35,290 --> 00:03:41,890
that set of resources one thing also

00:03:38,410 --> 00:03:43,600
that's coming up is in fact I think Josh

00:03:41,890 --> 00:03:46,030
Collins just posted to see f2f about

00:03:43,600 --> 00:03:49,450
this but the CLI team is just about to

00:03:46,030 --> 00:03:51,160
release the first GA of the v7 CLI so

00:03:49,450 --> 00:03:53,560
they had some details there about how

00:03:51,160 --> 00:03:55,540
the transition for things like the

00:03:53,560 --> 00:03:59,290
homebrew taps for distributing that and

00:03:55,540 --> 00:04:02,350
what people can expect there some other

00:03:59,290 --> 00:04:05,079
component team highlights AIP team is I

00:04:02,350 --> 00:04:06,640
think just finishing up work on kind of

00:04:05,079 --> 00:04:08,890
the next phase of their integration of K

00:04:06,640 --> 00:04:11,440
pack so this is going to allow them to

00:04:08,890 --> 00:04:12,620
integrate the aikido build packs as more

00:04:11,440 --> 00:04:15,140
granular build packs

00:04:12,620 --> 00:04:18,440
and to see affricates as part of that

00:04:15,140 --> 00:04:20,989
set of bill pact resources on a little

00:04:18,440 --> 00:04:22,669
bit more the meta front we've had some

00:04:20,989 --> 00:04:26,000
new leadership come into the UA a team

00:04:22,669 --> 00:04:28,580
and they're currently reevaluating the

00:04:26,000 --> 00:04:31,010
roadmap and how they can deal with more

00:04:28,580 --> 00:04:34,400
open in terms of collaboration on that

00:04:31,010 --> 00:04:35,389
and on development so I think the mostly

00:04:34,400 --> 00:04:37,970
been working with some of the folks from

00:04:35,389 --> 00:04:40,970
sa key that have also been strong

00:04:37,970 --> 00:04:43,430
collaborators on that project to drive

00:04:40,970 --> 00:04:45,889
that forward a couple other highlights

00:04:43,430 --> 00:04:49,040
I'd mentioned that ireenie is containing

00:04:45,889 --> 00:04:50,870
on getting apt tasks to run that's still

00:04:49,040 --> 00:04:53,360
in flight but they've also been

00:04:50,870 --> 00:04:56,060
exploring some initial CRD

00:04:53,360 --> 00:04:59,300
representations of the arena api

00:04:56,060 --> 00:05:01,150
contents so figuring out how that might

00:04:59,300 --> 00:05:06,440
work and move more to the domain model

00:05:01,150 --> 00:05:10,510
for CF frigates and keep CF into the

00:05:06,440 --> 00:05:13,250
case API itself a couple of the things

00:05:10,510 --> 00:05:16,370
networking team is also finishing up

00:05:13,250 --> 00:05:18,560
some of their work to represent Route

00:05:16,370 --> 00:05:19,610
entities as CR DS and they've also been

00:05:18,560 --> 00:05:23,870
working to incorporate the latest

00:05:19,610 --> 00:05:26,000
version of sta 1.6 and then finally the

00:05:23,870 --> 00:05:30,380
logging metrics team they've identified

00:05:26,000 --> 00:05:32,750
I think subsea spore Minh sub log cache

00:05:30,380 --> 00:05:36,590
and so they're working to resolve some

00:05:32,750 --> 00:05:38,200
of those so you know as always happy to

00:05:36,590 --> 00:05:40,700
field questions about these and

00:05:38,200 --> 00:05:43,400
everyone's always welcome to drop in to

00:05:40,700 --> 00:05:45,940
the a front I'm KMC meetings to talk to

00:05:43,400 --> 00:05:49,430
the leads or to engage that months like

00:05:45,940 --> 00:05:51,050
air are you also we have any updates

00:05:49,430 --> 00:05:54,500
from the Boche team or is a different

00:05:51,050 --> 00:06:01,840
person that would be Marco as the EMC

00:05:54,500 --> 00:06:05,230
lead for that okay

00:06:01,840 --> 00:06:07,060
and we've already covered the big news

00:06:05,230 --> 00:06:09,000
on extensions which is Troy's taking

00:06:07,060 --> 00:06:13,930
over as the new CF extensions PMC lead

00:06:09,000 --> 00:06:15,300
and I do know about the Stratus release

00:06:13,930 --> 00:06:17,950
a few days ago

00:06:15,300 --> 00:06:19,390
three-two-one mostly just bug fixes

00:06:17,950 --> 00:06:22,780
that's looking really good

00:06:19,390 --> 00:06:25,150
cool awesome well there is ostensibly an

00:06:22,780 --> 00:06:27,040
extensions pmc meeting by the way on

00:06:25,150 --> 00:06:29,200
Monday Troy we can talk about whether or

00:06:27,040 --> 00:06:31,600
not you want to hold that or defer that

00:06:29,200 --> 00:06:31,960
a month well no I think we can go right

00:06:31,600 --> 00:06:33,610
ahead

00:06:31,960 --> 00:06:36,100
that sounds great we can talk about some

00:06:33,610 --> 00:06:37,600
housecleaning and things that dr. max

00:06:36,100 --> 00:06:38,980
and I planned on getting done and we

00:06:37,600 --> 00:06:40,810
haven't really gotten around to you so

00:06:38,980 --> 00:06:44,020
there's probably some projects that can

00:06:40,810 --> 00:06:49,660
be can be moved to the Attic there by

00:06:44,020 --> 00:06:51,820
Monday awesome thanks okay anyone else

00:06:49,660 --> 00:06:53,400
have any topics of discussion they want

00:06:51,820 --> 00:06:55,330
to jump into before we hand this over to

00:06:53,400 --> 00:06:58,390
James and Stark and Wayne

00:06:55,330 --> 00:07:00,550
the one question I got is do we know

00:06:58,390 --> 00:07:03,880
what's happening with stem cells after

00:07:00,550 --> 00:07:07,960
April 20-21 because that's when the

00:07:03,880 --> 00:07:11,290
furnace time so that's just expires

00:07:07,960 --> 00:07:16,020
basically right so is there any plans

00:07:11,290 --> 00:07:16,020
for the next version of stem cells I

00:07:17,160 --> 00:07:27,700
understand the there's posting a while

00:07:22,330 --> 00:07:30,280
back probably from Roopa asking for

00:07:27,700 --> 00:07:33,300
interested folks in the foundation to

00:07:30,280 --> 00:07:37,600
collaborate on what's that next thing

00:07:33,300 --> 00:07:42,180
they're still looking for for additional

00:07:37,600 --> 00:07:46,419
help and interested than that okay

00:07:42,180 --> 00:07:49,990
I'll see if I can dig up the link to the

00:07:46,419 --> 00:07:54,490
email posts that that describes that all

00:07:49,990 --> 00:07:56,620
right thank you great thank you

00:07:54,490 --> 00:07:58,720
all right well without further ado then

00:07:56,620 --> 00:07:59,979
we'll hand over the reins to James and

00:07:58,720 --> 00:08:02,590
he can take us through this new project

00:07:59,979 --> 00:08:03,940
gluon which is seemingly very cool I've

00:08:02,590 --> 00:08:05,380
watched I've read through the blog post

00:08:03,940 --> 00:08:09,700
and watched that video once but he can

00:08:05,380 --> 00:08:10,410
tell you a lot about that well hello

00:08:09,700 --> 00:08:12,639
everybody

00:08:10,410 --> 00:08:15,460
everybody hear me

00:08:12,639 --> 00:08:17,199
just a bomb all right so if you don't

00:08:15,460 --> 00:08:18,729
know me my name is James Hunt I'm the

00:08:17,199 --> 00:08:21,520
director of R&D here at Stark and Wayne

00:08:18,729 --> 00:08:22,810
which means I basically ask questions

00:08:21,520 --> 00:08:25,539
and then write code to answer those

00:08:22,810 --> 00:08:28,029
questions all day every day dream job

00:08:25,539 --> 00:08:30,999
super glad to have it one of the

00:08:28,029 --> 00:08:34,990
questions that was asked about a month

00:08:30,999 --> 00:08:36,430
ago was we're talking just water-cooler

00:08:34,990 --> 00:08:39,610
virtual chat

00:08:36,430 --> 00:08:41,560
why can't kubernetes deploy VMs right

00:08:39,610 --> 00:08:43,419
and we weren't talking about cloud

00:08:41,560 --> 00:08:45,699
provider for scaling clusters or

00:08:43,419 --> 00:08:47,860
anything that's currently under taken by

00:08:45,699 --> 00:08:50,560
the SIG's for kubernetes but it was more

00:08:47,860 --> 00:08:53,709
of if I have a Cloud Foundry right now

00:08:50,560 --> 00:08:55,120
where I deploy it via Bosh that means I

00:08:53,709 --> 00:08:56,740
have a separate set of tooling if I'm

00:08:55,120 --> 00:08:58,839
trying to move forward with kubernetes

00:08:56,740 --> 00:09:00,880
and we got into the technical details of

00:08:58,839 --> 00:09:03,310
operators and custom resource

00:09:00,880 --> 00:09:06,160
definitions and it kind of occurred to

00:09:03,310 --> 00:09:08,500
us that hey we could just have a

00:09:06,160 --> 00:09:10,870
kubernetes controller that runs Bosh

00:09:08,500 --> 00:09:13,120
commands and translates boss or

00:09:10,870 --> 00:09:16,120
kubernetes C RDS or custom resources

00:09:13,120 --> 00:09:18,640
into all the things we expect from a

00:09:16,120 --> 00:09:21,399
Bosh based deployment paradigm and that

00:09:18,640 --> 00:09:23,110
might be yet another way of tying the

00:09:21,399 --> 00:09:25,570
ecosystems together right so you've got

00:09:23,110 --> 00:09:27,790
a rainy which is let's run CF

00:09:25,570 --> 00:09:31,029
applications on kubernetes you've got

00:09:27,790 --> 00:09:33,070
cube CF which is let's take existing box

00:09:31,029 --> 00:09:34,449
releases and run those on top of

00:09:33,070 --> 00:09:36,610
kubernetes for the purpose of running

00:09:34,449 --> 00:09:38,320
Cloud Foundry atop kubernetes and you

00:09:36,610 --> 00:09:41,050
have CF for Cades which is let's pick up

00:09:38,320 --> 00:09:43,449
the application e bits and put those on

00:09:41,050 --> 00:09:45,970
kubernetes and what gluon is is the

00:09:43,449 --> 00:09:48,579
opposite approach of let's have

00:09:45,970 --> 00:09:50,980
kubernetes run our bar stuff to tide us

00:09:48,579 --> 00:09:55,149
over until such a point as we can make

00:09:50,980 --> 00:09:57,220
the jump fully over to kubernetes native

00:09:55,149 --> 00:10:01,959
technologies like CF for cakes cube CF

00:09:57,220 --> 00:10:03,370
and Irina so I've got I've got the

00:10:01,959 --> 00:10:06,100
slides from the video and we do have a

00:10:03,370 --> 00:10:09,940
video and I put together where I go

00:10:06,100 --> 00:10:11,829
through a more in-depth demo if you go

00:10:09,940 --> 00:10:13,810
to star can wyndcomm slash glue on this

00:10:11,829 --> 00:10:16,480
is kind of the landing page for the

00:10:13,810 --> 00:10:18,339
whole open-source thing kind of gives

00:10:16,480 --> 00:10:20,170
you a teaser of what we're trying to do

00:10:18,339 --> 00:10:22,390
and what the idea was and then a link

00:10:20,170 --> 00:10:23,529
off to the video but we don't have time

00:10:22,390 --> 00:10:25,160
to watch this video and I wouldn't

00:10:23,529 --> 00:10:27,470
subject you to that

00:10:25,160 --> 00:10:28,730
without your consent so instead I'm

00:10:27,470 --> 00:10:31,190
gonna just kind of quickly run through

00:10:28,730 --> 00:10:32,990
the slides just to get an overview of

00:10:31,190 --> 00:10:35,120
the architecture of how this thing is

00:10:32,990 --> 00:10:37,339
put together and then we'll take a look

00:10:35,120 --> 00:10:39,949
at a Bosch that I deployed this morning

00:10:37,339 --> 00:10:43,040
into my Buffalo base of yeah vSphere lab

00:10:39,949 --> 00:10:45,050
and then we'll deploy something small on

00:10:43,040 --> 00:10:50,750
top of it that won't take three hours to

00:10:45,050 --> 00:10:52,730
to kick out so as I said the the premise

00:10:50,750 --> 00:10:56,300
of gluon is what if we could cheap

00:10:52,730 --> 00:10:57,829
Bechtel instead of Bosch and by that I

00:10:56,300 --> 00:10:59,209
mean let's have unified tooling for

00:10:57,829 --> 00:11:00,769
managing all of our infrastructure

00:10:59,209 --> 00:11:04,730
whether that's containerized whether

00:11:00,769 --> 00:11:06,079
it's vm bound or or what-have-you and to

00:11:04,730 --> 00:11:08,240
that end we have to create some new

00:11:06,079 --> 00:11:09,819
custom resource types the first custom

00:11:08,240 --> 00:11:14,089
resource type is a Bosch deployment

00:11:09,819 --> 00:11:16,430
these are all namespaced under gluons

00:11:14,089 --> 00:11:18,110
circling comm so the Bosch deployment

00:11:16,430 --> 00:11:19,790
for this resource type does not conflict

00:11:18,110 --> 00:11:22,550
with the Bosch deployment from cube CF

00:11:19,790 --> 00:11:24,649
one of the powers of version 2 API is

00:11:22,550 --> 00:11:26,449
inside of kubernetes so you can run both

00:11:24,649 --> 00:11:29,120
at the same time on the same cluster

00:11:26,449 --> 00:11:31,430
without any conflicts a box deployment

00:11:29,120 --> 00:11:33,560
is modeled as what kind of star -

00:11:31,430 --> 00:11:36,050
deployment are we deploying what ops

00:11:33,560 --> 00:11:37,759
files and what VARs are we specifying

00:11:36,050 --> 00:11:40,490
for those ops files and for that base

00:11:37,759 --> 00:11:42,230
deployment the resource itself and the

00:11:40,490 --> 00:11:45,019
controller manages the state and the

00:11:42,230 --> 00:11:47,180
VARs store things that we currently kind

00:11:45,019 --> 00:11:49,040
of defer to the operator to say hey I

00:11:47,180 --> 00:11:51,350
generated a bunch of certs and some

00:11:49,040 --> 00:11:53,329
passwords and some other things you need

00:11:51,350 --> 00:11:55,670
to put these safely securely somewhere

00:11:53,329 --> 00:11:59,139
we actually just shove those back into

00:11:55,670 --> 00:12:01,610
kubernetes after the deployment is done

00:11:59,139 --> 00:12:04,819
the next resource type is a bar stem

00:12:01,610 --> 00:12:07,519
cell which models what OS conversion and

00:12:04,819 --> 00:12:09,529
what director is this bound for when you

00:12:07,519 --> 00:12:12,410
create a bar stem cell if all of the

00:12:09,529 --> 00:12:13,790
dependencies are satisfied the gluon

00:12:12,410 --> 00:12:16,579
controller will go out and do an upload

00:12:13,790 --> 00:12:20,439
stem cell downloading verifying sha ones

00:12:16,579 --> 00:12:24,110
and all that fun stuff inside of a job

00:12:20,439 --> 00:12:26,420
and finally we have a boss config which

00:12:24,110 --> 00:12:31,399
rolls up the cloud and runtime configs

00:12:26,420 --> 00:12:35,360
and lets us supply basically the whole

00:12:31,399 --> 00:12:37,100
of our boss configuration landscape in

00:12:35,360 --> 00:12:38,980
terms that kubernetes api eyes can

00:12:37,100 --> 00:12:43,360
understand and then glue on

00:12:38,980 --> 00:12:45,610
and lead back into Bosch commands this

00:12:43,360 --> 00:12:47,889
is declarative as opposed to imperative

00:12:45,610 --> 00:12:49,510
whereas right now if you're deploying

00:12:47,889 --> 00:12:51,370
Bosch based infrastructure there's a lot

00:12:49,510 --> 00:12:53,529
of do this then wait then when that's

00:12:51,370 --> 00:12:54,940
done do this and wait and for God's

00:12:53,529 --> 00:12:57,220
sakes don't do the second set twice

00:12:54,940 --> 00:13:00,089
because it will fail the second time so

00:12:57,220 --> 00:13:02,350
it's not independent it impotent it is

00:13:00,089 --> 00:13:04,209
imperative this is all declarative and

00:13:02,350 --> 00:13:07,029
impotent it's managed for you so it

00:13:04,209 --> 00:13:08,589
keeps track of your VARs that you've

00:13:07,029 --> 00:13:11,889
specified for your deployments it keeps

00:13:08,589 --> 00:13:13,660
track of who's where and the chain for

00:13:11,889 --> 00:13:15,970
example in the video demo I actually

00:13:13,660 --> 00:13:18,519
applied all of the configure once and

00:13:15,970 --> 00:13:19,990
the gluon controller says ah so I have a

00:13:18,519 --> 00:13:21,880
deployment for the Bosch director I have

00:13:19,990 --> 00:13:23,500
a deployment for Cloud Foundry I have a

00:13:21,880 --> 00:13:26,709
stem cell and I have a cloud config and

00:13:23,500 --> 00:13:29,050
a runtime config and it figures out the

00:13:26,709 --> 00:13:32,529
order of operations for all of those

00:13:29,050 --> 00:13:33,690
things to happen by saying essentially

00:13:32,529 --> 00:13:35,709
there are implicit and explicit

00:13:33,690 --> 00:13:38,380
dependencies and we'll see both of those

00:13:35,709 --> 00:13:39,910
as we get into the yeah muls it all

00:13:38,380 --> 00:13:42,490
starts with the actual Bosch director

00:13:39,910 --> 00:13:44,139
Bosch deployments of demo Bosch the stem

00:13:42,490 --> 00:13:46,269
cell can't get uploaded until the

00:13:44,139 --> 00:13:48,010
director is up the cloud configured

00:13:46,269 --> 00:13:50,139
runtime configs also can't be applied

00:13:48,010 --> 00:13:52,300
until the director HTTP endpoint is

00:13:50,139 --> 00:13:54,250
available and we can't really start the

00:13:52,300 --> 00:13:56,500
deployment of whatever we're deploying

00:13:54,250 --> 00:14:01,269
on top of that director until all of

00:13:56,500 --> 00:14:03,940
those dependencies are met and and the

00:14:01,269 --> 00:14:06,670
idea is rather than burden operators

00:14:03,940 --> 00:14:08,920
with that dependency graph that list of

00:14:06,670 --> 00:14:10,120
what needs to go when and what order we

00:14:08,920 --> 00:14:12,040
have the knowledge and the information

00:14:10,120 --> 00:14:13,930
at our fingertips to figure that out so

00:14:12,040 --> 00:14:17,800
let's just let the gluon controller do

00:14:13,930 --> 00:14:19,389
that for us the rest of this is just

00:14:17,800 --> 00:14:22,050
going through the yamo which I would

00:14:19,389 --> 00:14:28,990
like to instead walk you through by hand

00:14:22,050 --> 00:14:34,360
in an actual shell session so I can get

00:14:28,990 --> 00:14:37,389
soom out of the way if we take a look

00:14:34,360 --> 00:14:39,279
we'll start with our director so the

00:14:37,389 --> 00:14:41,910
director yeah mol this is actually the

00:14:39,279 --> 00:14:45,100
most complicated we're gonna see today

00:14:41,910 --> 00:14:46,600
it's a bunch of different things all

00:14:45,100 --> 00:14:48,339
kind of mashed together so we're gonna

00:14:46,600 --> 00:14:50,649
start with a config map and this is how

00:14:48,339 --> 00:14:52,440
we specify our virus files so if you're

00:14:50,649 --> 00:14:55,980
used to doing a box create end

00:14:52,440 --> 00:14:58,320
- V this - me that - me etc you can now

00:14:55,980 --> 00:15:01,140
put those variables in either config

00:14:58,320 --> 00:15:03,150
maps or secrets so this is a config map

00:15:01,140 --> 00:15:05,940
that lists out all of the quote-unquote

00:15:03,150 --> 00:15:07,890
public information that I can show you

00:15:05,940 --> 00:15:11,730
on a recorded and sent to the internet

00:15:07,890 --> 00:15:13,620
video talk about our Buffalo lab things

00:15:11,730 --> 00:15:15,870
like we're inside a V Center am i

00:15:13,620 --> 00:15:17,640
deploying what's the networking look

00:15:15,870 --> 00:15:21,630
like where do I want to store all these

00:15:17,640 --> 00:15:23,850
assets inside of the V Center and this

00:15:21,630 --> 00:15:25,830
is something that because that we'll see

00:15:23,850 --> 00:15:28,080
when we get into the VARs you can reuse

00:15:25,830 --> 00:15:30,510
these config maps across multiple Bosch

00:15:28,080 --> 00:15:32,160
directors or other deployments if you

00:15:30,510 --> 00:15:34,650
have lots of deployments that are the

00:15:32,160 --> 00:15:36,950
same you can extract the common

00:15:34,650 --> 00:15:39,180
information the common VARs out of

00:15:36,950 --> 00:15:41,250
individual scripts and put them in one

00:15:39,180 --> 00:15:44,400
config map and then we'll map them back

00:15:41,250 --> 00:15:46,560
in on the Boche deployment side which is

00:15:44,400 --> 00:15:50,070
right here so the boss deployment repo

00:15:46,560 --> 00:15:51,720
are kind this is by the way a v1 alpha

00:15:50,070 --> 00:15:54,140
we're still playing with this this is

00:15:51,720 --> 00:15:56,550
subject to change at a moment's notice

00:15:54,140 --> 00:15:59,100
the boss deployment represents our boss

00:15:56,550 --> 00:16:01,680
deployment surprisingly enough the name

00:15:59,100 --> 00:16:03,210
will be the name that we reference it in

00:16:01,680 --> 00:16:05,100
other parts of the system so I'm gonna

00:16:03,210 --> 00:16:07,080
create a Bosch director called cab one

00:16:05,100 --> 00:16:08,880
I'm gonna give it some arbitrary labels

00:16:07,080 --> 00:16:11,820
so I can find it with my kubernetes

00:16:08,880 --> 00:16:15,360
inventory and then diving deep into the

00:16:11,820 --> 00:16:17,460
spec we specify where are we pulling our

00:16:15,360 --> 00:16:20,280
deployment yells from so this is

00:16:17,460 --> 00:16:23,850
upstream official Bosch deployment which

00:16:20,280 --> 00:16:27,570
branch tag or commit --is-- do you want

00:16:23,850 --> 00:16:29,670
to deploy this more useful for CF

00:16:27,570 --> 00:16:30,840
deployment where they tag versions so

00:16:29,670 --> 00:16:34,410
you can say I want to do version

00:16:30,840 --> 00:16:36,330
whatever XYZ or if in the Box case if

00:16:34,410 --> 00:16:38,370
you want a tag to commit IDs you can do

00:16:36,330 --> 00:16:39,930
that as well and then the entry point is

00:16:38,370 --> 00:16:41,430
what's the first Yamma you're going to

00:16:39,930 --> 00:16:43,530
give Bosch create and if you were doing

00:16:41,430 --> 00:16:45,930
this manually so if a box deployments

00:16:43,530 --> 00:16:48,750
Bosch that yamo for CF deployment its CF

00:16:45,930 --> 00:16:51,600
- deployment yeah mo and this model by

00:16:48,750 --> 00:16:55,190
specifying this stuff externally allows

00:16:51,600 --> 00:16:57,390
us to build other - deployment

00:16:55,190 --> 00:16:59,850
configurations and put them on github or

00:16:57,390 --> 00:17:02,400
bitbucket or anywhere else and and pull

00:16:59,850 --> 00:17:04,880
those down next up is the list of ops

00:17:02,400 --> 00:17:06,589
files I'm going to throw as - OH

00:17:04,880 --> 00:17:09,020
arguments to my boss create Enver my

00:17:06,589 --> 00:17:12,140
boss deploy because I'm on vSphere I'm

00:17:09,020 --> 00:17:14,000
gonna activate the vSphere cpi-m oh I'm

00:17:12,140 --> 00:17:17,360
not gonna throw you a a orc red hub on

00:17:14,000 --> 00:17:19,400
here mostly out of interest in speed and

00:17:17,360 --> 00:17:22,880
then we get into VARs which is where we

00:17:19,400 --> 00:17:25,100
start mapping things back in from all

00:17:22,880 --> 00:17:27,020
the disparate locations so we saw the

00:17:25,100 --> 00:17:29,049
cab demo boss config map that had all of

00:17:27,020 --> 00:17:33,470
our V Center stuff we also have a secret

00:17:29,049 --> 00:17:36,230
this is my my creds secret for getting

00:17:33,470 --> 00:17:38,330
into vSphere V Center as my deployer

00:17:36,230 --> 00:17:39,890
user which again because this is a

00:17:38,330 --> 00:17:43,610
recorded call I'm not going to show you

00:17:39,890 --> 00:17:46,280
but we map just the user key and

00:17:43,610 --> 00:17:48,919
password key from this secret in the

00:17:46,280 --> 00:17:50,600
current namespace into the VAR v Center

00:17:48,919 --> 00:17:53,179
underscore user and V Center underscore

00:17:50,600 --> 00:17:55,220
password this will override anything

00:17:53,179 --> 00:17:57,020
that's specified in config map and you

00:17:55,220 --> 00:18:01,070
can specify as many of these as you want

00:17:57,020 --> 00:18:05,750
so if we wanted I could do this I'm

00:18:01,070 --> 00:18:09,770
thinking big map name all Bosh's I could

00:18:05,750 --> 00:18:13,220
say config map let's grab these

00:18:09,770 --> 00:18:15,260
fear-based Bosh's etc and then I can

00:18:13,220 --> 00:18:17,510
kind of hierarchically roll out my

00:18:15,260 --> 00:18:19,159
config with overrides at the various

00:18:17,510 --> 00:18:21,260
levels so the vSphere based boss's

00:18:19,159 --> 00:18:23,240
config map might have all of the

00:18:21,260 --> 00:18:25,400
information about my buffalo lab vSphere

00:18:23,240 --> 00:18:27,799
environment and then cab demo boss is

00:18:25,400 --> 00:18:30,860
only going to specify things specific to

00:18:27,799 --> 00:18:32,690
this boss director this pattern we use

00:18:30,860 --> 00:18:34,970
it a lot in the our Genesis deployment

00:18:32,690 --> 00:18:36,860
product I works fairly well it gives us

00:18:34,970 --> 00:18:39,860
a lot of flexibility and we've kind of

00:18:36,860 --> 00:18:42,230
mapped that over into gluon finally you

00:18:39,860 --> 00:18:43,549
can just override individuals so if you

00:18:42,230 --> 00:18:46,490
don't want to bother with a config map

00:18:43,549 --> 00:18:49,070
or a secret you can just embed a literal

00:18:46,490 --> 00:18:52,940
this will be - the internal IP equals

00:18:49,070 --> 00:18:54,770
ten dot 128 that's 16 dot 2 or 1 and

00:18:52,940 --> 00:18:58,400
that will overwrite anything that has

00:18:54,770 --> 00:19:01,340
come before when we apply this which I

00:18:58,400 --> 00:19:07,250
applied this this morning we look at our

00:19:01,340 --> 00:19:09,150
boss deployments we have cab 1 and if I

00:19:07,250 --> 00:19:12,780
describe that

00:19:09,150 --> 00:19:16,000
when you'll see all of the information

00:19:12,780 --> 00:19:18,070
pretty much that was in the mo file that

00:19:16,000 --> 00:19:19,510
in turn when the gluon controller sees a

00:19:18,070 --> 00:19:21,700
new boss deployment that it's never

00:19:19,510 --> 00:19:23,620
dealt with before it turns around and it

00:19:21,700 --> 00:19:26,700
creates a job and a bunch of other

00:19:23,620 --> 00:19:30,370
actually a fair amount of other things

00:19:26,700 --> 00:19:33,190
namely it creates this deploy whatever

00:19:30,370 --> 00:19:39,490
the name was boss and if we describe

00:19:33,190 --> 00:19:41,770
that we have a whole bunch of stuff

00:19:39,490 --> 00:19:44,590
happening in the environment we have a

00:19:41,770 --> 00:19:47,350
state file or a state persistent volume

00:19:44,590 --> 00:19:49,240
claim for the boss create and state that

00:19:47,350 --> 00:19:52,840
JSON file so that we can keep track of

00:19:49,240 --> 00:19:57,370
VMC IDs and stem-cell information we

00:19:52,840 --> 00:20:01,210
also have a fair amount of other secrets

00:19:57,370 --> 00:20:04,150
in fact let's just do OK again cm our

00:20:01,210 --> 00:20:06,400
caps one state and our cab demo much

00:20:04,150 --> 00:20:08,919
that's old cab one state will actually

00:20:06,400 --> 00:20:10,419
hold the state file that's from the PVC

00:20:08,919 --> 00:20:12,549
so that we can pull it back later if we

00:20:10,419 --> 00:20:14,410
accidentally delete the PVC but the real

00:20:12,549 --> 00:20:16,990
meat of it is going to be in that job so

00:20:14,410 --> 00:20:20,770
if we look at the jobs and then we look

00:20:16,990 --> 00:20:22,630
at the pods the job this is we're now

00:20:20,770 --> 00:20:24,640
into standard kubernetes territory a job

00:20:22,630 --> 00:20:26,950
just creates palms according to a

00:20:24,640 --> 00:20:29,470
certain number of maximum attempts to

00:20:26,950 --> 00:20:31,270
retry and it's the what the gluon

00:20:29,470 --> 00:20:34,000
controller is doing is providing all of

00:20:31,270 --> 00:20:36,910
the shell logic inside of an image and

00:20:34,000 --> 00:20:39,990
all of the configuration wiring so that

00:20:36,910 --> 00:20:46,480
when we look at this and we do it a logs

00:20:39,990 --> 00:20:48,640
we have less we have what is basically a

00:20:46,480 --> 00:20:50,340
box create end command so here we're

00:20:48,640 --> 00:20:53,169
saying boss create and if we're gonna do

00:20:50,340 --> 00:20:56,040
box - yamo with the state file into our

00:20:53,169 --> 00:20:58,330
volume of our store also into our volume

00:20:56,040 --> 00:21:00,220
and then we're pulling all of our

00:20:58,330 --> 00:21:01,750
variables from the environment variables

00:21:00,220 --> 00:21:06,070
that are prefixed with glue on that's

00:21:01,750 --> 00:21:07,929
really just a implementation detail but

00:21:06,070 --> 00:21:11,620
as you can see we go through this is

00:21:07,929 --> 00:21:13,900
stock output from a Bosch create end we

00:21:11,620 --> 00:21:15,669
do our deploy we spin up our VM we wait

00:21:13,900 --> 00:21:17,860
for the agent we compile the compile we

00:21:15,669 --> 00:21:20,140
compile the compile and then we're all

00:21:17,860 --> 00:21:22,370
done and the last bit that's specific to

00:21:20,140 --> 00:21:24,540
us the gluon is holding that

00:21:22,370 --> 00:21:26,700
information out of the state file and

00:21:24,540 --> 00:21:30,450
out of the VAR store and stuffing it in

00:21:26,700 --> 00:21:32,880
kubernetes things specifically a config

00:21:30,450 --> 00:21:37,049
map called cab one state and a secrets

00:21:32,880 --> 00:21:39,630
called cab one secrets what that cab one

00:21:37,049 --> 00:21:43,580
secret is going to show us is all of our

00:21:39,630 --> 00:21:46,049
all the interesting information about

00:21:43,580 --> 00:21:50,669
how do we access this what are the

00:21:46,049 --> 00:21:52,650
what's the CA sir what's the yeah the CA

00:21:50,669 --> 00:21:54,000
cert what's the URL the user name and

00:21:52,650 --> 00:21:56,340
the password that were generated by

00:21:54,000 --> 00:21:59,340
Bosch create and configure server

00:21:56,340 --> 00:22:03,630
implementation and we can use that in a

00:21:59,340 --> 00:22:06,059
custom CLI that I wrote called gluon

00:22:03,630 --> 00:22:08,309
where you pass it the name of the

00:22:06,059 --> 00:22:10,200
director which causes it to use the

00:22:08,309 --> 00:22:12,179
currently targeted cube config with

00:22:10,200 --> 00:22:15,660
Quebec tile to go pull those four

00:22:12,179 --> 00:22:18,809
information pieces and when we run it it

00:22:15,660 --> 00:22:21,840
will connect up to that Bosch director

00:22:18,809 --> 00:22:24,179
and so basically let me run Bosch

00:22:21,840 --> 00:22:31,470
commands so I can take a look at depths

00:22:24,179 --> 00:22:36,480
I can take a look at cloud configs i I

00:22:31,470 --> 00:22:38,940
can take a look at stem cells and if I

00:22:36,480 --> 00:22:40,770
if I stopped here I would have the

00:22:38,940 --> 00:22:42,960
ability with kubernetes to deploy by

00:22:40,770 --> 00:22:45,210
Bosch directors and then use them from

00:22:42,960 --> 00:22:47,429
Bosch but what I can stop there because

00:22:45,210 --> 00:22:52,260
we're gonna look at our cloud config

00:22:47,429 --> 00:22:53,700
yamo which is a fairly thin wrapper we

00:22:52,260 --> 00:22:55,470
say this is the cloud config and we're

00:22:53,700 --> 00:22:57,570
going to put it on the cab one and then

00:22:55,470 --> 00:23:00,179
everything from line 11 on down is just

00:22:57,570 --> 00:23:02,850
a gamal cloud config that I shoved into

00:23:00,179 --> 00:23:05,580
the kubernetes yamo as a stream so the

00:23:02,850 --> 00:23:08,520
pipe makes it a multi-line string this

00:23:05,580 --> 00:23:11,880
will also turn into a job inside of

00:23:08,520 --> 00:23:14,429
kubernetes and it will have a dependency

00:23:11,880 --> 00:23:15,330
on that cab one boss director so if we

00:23:14,429 --> 00:23:22,790
look at jobs

00:23:15,330 --> 00:23:22,790
we have an update cloud config that oh

00:23:23,360 --> 00:23:30,230
that's not that one

00:23:30,559 --> 00:23:34,230
if there's no output because update

00:23:33,029 --> 00:23:36,929
cloud config doesn't generally do that

00:23:34,230 --> 00:23:39,870
we also have stem cells all right so if

00:23:36,929 --> 00:23:41,490
we look at stem cell the stem cell is

00:23:39,870 --> 00:23:43,679
just the things you would give to an

00:23:41,490 --> 00:23:45,720
upload stem cell what director it's

00:23:43,679 --> 00:23:47,100
bound for the URL the SHA the name the

00:23:45,720 --> 00:23:49,230
version and then we give it a name

00:23:47,100 --> 00:23:50,700
inside of kubernetes for dependency

00:23:49,230 --> 00:23:54,299
reasons and because you have to name

00:23:50,700 --> 00:23:57,000
things indicates that in turn as you

00:23:54,299 --> 00:24:01,559
might have guessed creates a job and if

00:23:57,000 --> 00:24:05,309
we look at the pod for the upload v6 21

00:24:01,559 --> 00:24:11,220
that's seven for stem cell and I did

00:24:05,309 --> 00:24:13,740
that again you'll see this is just

00:24:11,220 --> 00:24:17,970
standard Bosch running an upload stem

00:24:13,740 --> 00:24:19,440
cell and then finally the once we have a

00:24:17,970 --> 00:24:21,690
boss director once we have stem cell

00:24:19,440 --> 00:24:23,909
once you have cloud and optionally a

00:24:21,690 --> 00:24:27,600
runtime config we can create another

00:24:23,909 --> 00:24:30,600
boss deployment that uses our cab one

00:24:27,600 --> 00:24:33,419
director but with a different boss

00:24:30,600 --> 00:24:34,769
deployment repo this is box deployment

00:24:33,419 --> 00:24:36,419
which is something I spun up on github

00:24:34,769 --> 00:24:38,880
it deploys nothing

00:24:36,419 --> 00:24:41,399
it gives me VMs it's great for demos

00:24:38,880 --> 00:24:43,380
because it doesn't compile packages and

00:24:41,399 --> 00:24:44,760
I've got a couple of ops files so you're

00:24:43,380 --> 00:24:47,309
using the same that's isomorphic

00:24:44,760 --> 00:24:48,990
interface but it's the same tooling

00:24:47,309 --> 00:24:50,100
you're used to it's the same yamo format

00:24:48,990 --> 00:24:52,620
for the most part but now we're

00:24:50,100 --> 00:24:55,139
expressing it in terms of boss and this

00:24:52,620 --> 00:24:57,480
will this has an explicit dependency it

00:24:55,139 --> 00:24:59,909
will depend on the stem cell called this

00:24:57,480 --> 00:25:02,070
and the config called that before the

00:24:59,909 --> 00:25:04,350
gluon controller will actually attempt

00:25:02,070 --> 00:25:05,940
to deploy this which means I can take

00:25:04,350 --> 00:25:07,740
the four things we've looked at the

00:25:05,940 --> 00:25:09,750
director the stem cell the cloud config

00:25:07,740 --> 00:25:10,500
and this deployment and I can apply them

00:25:09,750 --> 00:25:12,419
all at once

00:25:10,500 --> 00:25:14,940
and then go off and do something else

00:25:12,419 --> 00:25:16,710
and let gluon figure out the order do

00:25:14,940 --> 00:25:19,889
the right thing babysit the jobs

00:25:16,710 --> 00:25:22,049
pull the creds out a side effect is

00:25:19,889 --> 00:25:23,610
because we have all the creds to talk to

00:25:22,049 --> 00:25:25,649
the boss director and we know that that

00:25:23,610 --> 00:25:28,049
boss director is called cab one that's

00:25:25,649 --> 00:25:30,149
where gluon will pull the creds when it

00:25:28,049 --> 00:25:32,130
goes to do the boss deploy it will

00:25:30,149 --> 00:25:33,929
actually mount the secret into the

00:25:32,130 --> 00:25:36,690
container that's gonna do the job run

00:25:33,929 --> 00:25:38,190
and then I never actually have to know

00:25:36,690 --> 00:25:40,320
what my passwords are they're all

00:25:38,190 --> 00:25:42,179
managed in kubernetes if I don't want

00:25:40,320 --> 00:25:42,900
like I can go looking right I can go

00:25:42,179 --> 00:25:46,440
okay

00:25:42,900 --> 00:25:51,390
secret I can base64 decode those those

00:25:46,440 --> 00:25:52,830
values but I don't have to so that's the

00:25:51,390 --> 00:25:55,650
architecture and that's how the the

00:25:52,830 --> 00:26:00,720
inner thing works does anyone have any

00:25:55,650 --> 00:26:05,040
questions or thoughts or interests or

00:26:00,720 --> 00:26:08,370
good God why did you do this I'll have

00:26:05,040 --> 00:26:10,680
that one why did you do this well so

00:26:08,370 --> 00:26:12,990
Troy I'm in R&D so I have to do both R

00:26:10,680 --> 00:26:18,930
and D and sometimes I don't have any

00:26:12,990 --> 00:26:21,600
ideas the main reason I did this was C

00:26:18,930 --> 00:26:23,550
effort aids is coming Irina is here cube

00:26:21,600 --> 00:26:26,130
CF is getting better every day

00:26:23,550 --> 00:26:28,350
but we have a lot of people we talked to

00:26:26,130 --> 00:26:31,290
who still want to run cloud foundry on

00:26:28,350 --> 00:26:34,230
VMs and will for a fair amount of time

00:26:31,290 --> 00:26:36,030
as long as there's support and one of

00:26:34,230 --> 00:26:37,920
the things that this architecture allows

00:26:36,030 --> 00:26:41,160
them to do is to move forward with the

00:26:37,920 --> 00:26:42,900
kubernetes native strategy while still

00:26:41,160 --> 00:26:45,180
maintaining their legacy Bosch

00:26:42,900 --> 00:26:48,030
environments our legacy VM based cloud

00:26:45,180 --> 00:26:50,240
foundries with additional automation

00:26:48,030 --> 00:26:52,680
that you get from being able to create a

00:26:50,240 --> 00:26:55,830
declarative version of your Bosch

00:26:52,680 --> 00:26:59,850
infrastructure I've seen too many ad hoc

00:26:55,830 --> 00:27:03,060
bespoke custom plugin bait or pipelines

00:26:59,850 --> 00:27:05,100
that do the Bosch rollouts the stem cell

00:27:03,060 --> 00:27:08,070
uploads the config management from git

00:27:05,100 --> 00:27:09,930
and all that this gives us a tested

00:27:08,070 --> 00:27:12,480
control plane via the kubernetes api in

00:27:09,930 --> 00:27:14,700
an operator to do the heavy lifting of

00:27:12,480 --> 00:27:16,650
most of that and then just plunk in if

00:27:14,700 --> 00:27:19,290
you want to upload new stem cells every

00:27:16,650 --> 00:27:21,180
time they pop now all you have to do if

00:27:19,290 --> 00:27:23,610
you've got the machinery that looks at

00:27:21,180 --> 00:27:26,850
bosch dot io and pull stuff down you can

00:27:23,610 --> 00:27:28,740
look at and just create these stem cell

00:27:26,850 --> 00:27:30,750
things mechanically apply them to the

00:27:28,740 --> 00:27:33,060
Cades cluster and then be done let the

00:27:30,750 --> 00:27:38,430
kubernetes Machinery handle the rest of

00:27:33,060 --> 00:27:41,280
it and as I mentioned the secrets are

00:27:38,430 --> 00:27:44,250
pivotal to figuring out how to talk to

00:27:41,280 --> 00:27:46,680
things but the secrets can be they don't

00:27:44,250 --> 00:27:48,570
have to come from glue on right you can

00:27:46,680 --> 00:27:51,120
just put the user name/password see a

00:27:48,570 --> 00:27:52,860
cert and endpoint URL in a secret and

00:27:51,120 --> 00:27:56,230
then start using it from the gluon

00:27:52,860 --> 00:27:58,870
controller even if that was deployed via

00:27:56,230 --> 00:28:02,169
create and four years ago or god forbid

00:27:58,870 --> 00:28:04,299
mikromasch seven years ago if you if you

00:28:02,169 --> 00:28:05,950
have the creds you can kind of adopt

00:28:04,299 --> 00:28:09,450
gluon and move forward

00:28:05,950 --> 00:28:12,010
and gain all that automation experience

00:28:09,450 --> 00:28:15,130
awesome thanks I can see it being really

00:28:12,010 --> 00:28:18,760
useful for about releases of database

00:28:15,130 --> 00:28:21,520
services mm-hmm yeah cuz like you could

00:28:18,760 --> 00:28:23,559
build a helmet art that instead of

00:28:21,520 --> 00:28:24,880
ending up as containers inside the

00:28:23,559 --> 00:28:27,460
cluster that you deployed that counter

00:28:24,880 --> 00:28:33,429
to it just spins a Bosch director and

00:28:27,460 --> 00:28:37,510
then pushes more stuff you could use

00:28:33,429 --> 00:28:42,100
kind to bootstrap Kubo with this right

00:28:37,510 --> 00:28:45,190
you could yep in fact I did the the demo

00:28:42,100 --> 00:28:46,840
that this is is in kind it's just

00:28:45,190 --> 00:28:48,850
running on my local box in the docker

00:28:46,840 --> 00:28:52,299
Damon and it's hitting of vSphere that's

00:28:48,850 --> 00:28:55,150
on a VPN the gluon hands-on lab will be

00:28:52,299 --> 00:28:57,340
doing the latter half of this exerciser

00:28:55,150 --> 00:28:58,990
we actually start with a Bosch director

00:28:57,340 --> 00:29:00,690
and we apply cloud config and stem cells

00:28:58,990 --> 00:29:03,730
and then do some deployments of things

00:29:00,690 --> 00:29:05,260
to try and as we also look into what the

00:29:03,730 --> 00:29:08,260
manager is doing and how the controller

00:29:05,260 --> 00:29:11,620
works but that's all on GCP so we use

00:29:08,260 --> 00:29:13,900
the gke to run glue on to then bootstrap

00:29:11,620 --> 00:29:17,679
our boss director into GCPs compute

00:29:13,900 --> 00:29:20,470
engine which was pretty nifty you don't

00:29:17,679 --> 00:29:23,230
need any storage class for this right uh

00:29:20,470 --> 00:29:24,669
you do because the boss well you do if

00:29:23,230 --> 00:29:26,260
you're gonna have bosch do the bosch

00:29:24,669 --> 00:29:28,990
create end stuff if you're gonna do the

00:29:26,260 --> 00:29:31,600
from nothing implement of something we

00:29:28,990 --> 00:29:34,120
do need a PVC we need a storage class to

00:29:31,600 --> 00:29:37,299
fulfill the PVC we make for the state

00:29:34,120 --> 00:29:38,980
file in the theory we don't have to do

00:29:37,299 --> 00:29:40,840
that that was a design decision and if

00:29:38,980 --> 00:29:44,020
that becomes problematic we might change

00:29:40,840 --> 00:29:47,260
that I just wanted to have a if the pod

00:29:44,020 --> 00:29:49,419
died and it has died repeatedly because

00:29:47,260 --> 00:29:52,090
of bad configuration other things that

00:29:49,419 --> 00:29:53,799
PVC the PB behind it sticks around so

00:29:52,090 --> 00:30:00,160
that you don't lose track of the VM you

00:29:53,799 --> 00:30:02,830
have created in a previous job if you

00:30:00,160 --> 00:30:05,020
could make it so that you don't need the

00:30:02,830 --> 00:30:09,300
PVC anymore

00:30:05,020 --> 00:30:09,300
you could have like this transferable

00:30:09,360 --> 00:30:16,480
set of CR DS right that you can just

00:30:12,550 --> 00:30:19,660
keep control get and then keep control

00:30:16,480 --> 00:30:22,050
apply and kind of like a Bosch director

00:30:19,660 --> 00:30:25,000
to go of sorts

00:30:22,050 --> 00:30:26,470
yeah like we asked the question and

00:30:25,000 --> 00:30:28,570
thought it was silly and then answered

00:30:26,470 --> 00:30:30,460
it him and a whole bug we then spent the

00:30:28,570 --> 00:30:32,260
next Chris Weibull and I spent the next

00:30:30,460 --> 00:30:34,150
like two days just throwing out random

00:30:32,260 --> 00:30:38,470
things like now that we have this we can

00:30:34,150 --> 00:30:41,110
do this this this this and this it's one

00:30:38,470 --> 00:30:45,850
of those it's a small tool but it's a

00:30:41,110 --> 00:30:49,500
very sharp tool yeah I think I'm a

00:30:45,850 --> 00:30:49,500
little biased because I wrote it but

00:30:51,780 --> 00:30:57,580
anyway like I said the video out there

00:30:55,060 --> 00:31:00,100
is me for half an hour or more rambling

00:30:57,580 --> 00:31:01,810
more detailed there's a funny part about

00:31:00,100 --> 00:31:04,750
28 minutes in if you can make it that

00:31:01,810 --> 00:31:08,800
long this is on github it is open source

00:31:04,750 --> 00:31:10,630
it is MIT I just finished putting up or

00:31:08,800 --> 00:31:13,360
will be putting up hope that we're there

00:31:10,630 --> 00:31:15,550
the installation instructions I'm trying

00:31:13,360 --> 00:31:18,070
to figure out what we need to do for dev

00:31:15,550 --> 00:31:19,480
and other things so if this is

00:31:18,070 --> 00:31:21,940
interesting to you take it for a spin

00:31:19,480 --> 00:31:26,440
let us know in the github issues or find

00:31:21,940 --> 00:31:34,540
somebody in slack on CF I'm Jay hunt you

00:31:26,440 --> 00:31:36,940
can DM me if you want yeah awesome thank

00:31:34,540 --> 00:31:40,710
you James yeah super cool projects

00:31:36,940 --> 00:31:43,960
looking forward to the lab next week and

00:31:40,710 --> 00:31:48,130
yeah any other questions or comments

00:31:43,960 --> 00:31:50,860
before you wrap this up whoa

00:31:48,130 --> 00:31:52,630
all right well thank you all for joining

00:31:50,860 --> 00:31:53,800
looking forward to seeing you all at

00:31:52,630 --> 00:31:55,720
Summit next week

00:31:53,800 --> 00:31:58,060
please go register please go check out

00:31:55,720 --> 00:32:01,360
the schedule particularly the hands-on

00:31:58,060 --> 00:32:08,130
labs and see you then

00:32:01,360 --> 00:32:08,130

YouTube URL: https://www.youtube.com/watch?v=dAr1PhmcKAg


