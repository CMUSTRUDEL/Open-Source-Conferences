Title: Cloud Foundry Community Advisory Board [May 2017]
Publication date: 2017-05-18
Playlist: Community Advisory Board
Description: 
	Video from the monthly Cloud Foundry Community Advisory Board (CAB) meeting. Learn more at https://www.cloudfoundry.org/.

Agenda:

Calendar
Now every 3rd Wed of the month (see above)

Tooling for the call
See Zoom info above in and the #CAB Slack channel

CFF update
CF Summit North America in Santa Clara, CA - June 2017
Certification beta is now open to take exam (lower cost before summit)
You can also take the certification at Summit
Hackathon
CF Summit Europe in Basel, Switzerland

Projects updates
Runtime PMC
Porting Garden runC onto Windows
OCI buildpack proposal - initial stories started
BOSH
DNS v2 work is continuing
Support for BBR
Extensions
Managing new proposal input: BBR and Kubo

Community projects
Project Unik by Idit Levine (formerly of EMC)
BOSH Backup Restore (BBR) by Therese Stowell (Pivotal)
Kubo (Kubernetes + BOSH) by Eric Johnson (Google)
Captions: 
	00:00:00,030 --> 00:00:04,799
I know and this is a heavy I'm gonna

00:00:02,820 --> 00:00:06,330
skip out before the ends because I'm

00:00:04,799 --> 00:00:08,610
supposed to be somewhere at 9:00 but

00:00:06,330 --> 00:00:10,950
it's only down the street you've got

00:00:08,610 --> 00:00:13,139
like a lot of stuff yeah it depends on

00:00:10,950 --> 00:00:15,929
what you want to see you ain't like so

00:00:13,139 --> 00:00:25,140
you did we'll start with my dick unique

00:00:15,929 --> 00:00:26,789
and we're gonna get just realize it it's

00:00:25,140 --> 00:00:28,890
like a whole like oh yeah people are

00:00:26,789 --> 00:00:32,059
gonna start doing it I think my boy said

00:00:28,890 --> 00:00:34,980
about chunky you don't have to do that

00:00:32,059 --> 00:00:37,219
if Cho could do one seam right let's let

00:00:34,980 --> 00:00:41,510
you through I can't argue with that one

00:00:37,219 --> 00:00:41,510
there's a lot of wrong things already

00:00:42,469 --> 00:00:53,340
he's done a lot about those lines said

00:00:45,660 --> 00:01:01,410
he'd bring back you make Mary green we

00:00:53,340 --> 00:01:03,449
got chip in there Roger so I have so you

00:01:01,410 --> 00:01:04,920
we usually give people a couple more

00:01:03,449 --> 00:01:07,799
minutes for people that are trying to

00:01:04,920 --> 00:01:17,759
join right this minute and then we'll

00:01:07,799 --> 00:01:20,970
get started today are not doing this

00:01:17,759 --> 00:01:23,070
meeting and it's like them it's off site

00:01:20,970 --> 00:01:24,509
but it's like just a tweak and it's

00:01:23,070 --> 00:01:28,950
supposed to be some away what slightly

00:01:24,509 --> 00:01:31,590
changed yes it is more exciting because

00:01:28,950 --> 00:01:34,200
you he can't make it here so she might

00:01:31,590 --> 00:01:36,930
call I think you probably closed try

00:01:34,200 --> 00:01:39,030
that and I'm like right landscape I

00:01:36,930 --> 00:01:41,340
wouldn't miss a copy okay I appreciate

00:01:39,030 --> 00:01:46,890
that we should you being here let's

00:01:41,340 --> 00:01:48,899
recall yeah we got away into okay so

00:01:46,890 --> 00:01:51,329
just a couple more minutes we'll get

00:01:48,899 --> 00:01:53,960
started let's say one more minute we

00:01:51,329 --> 00:01:53,960
have a packed agenda

00:02:03,890 --> 00:02:09,360
hey dr. max just make it make it true

00:02:06,390 --> 00:02:20,819
you can hear me okay yes indeed thank

00:02:09,360 --> 00:02:24,650
you super so we're waiting we'll start

00:02:20,819 --> 00:02:27,810
at 8:02 or so I'm sending an email to

00:02:24,650 --> 00:02:30,150
Erik and theorized just make sure they

00:02:27,810 --> 00:02:35,250
might actually be there audition I'm

00:02:30,150 --> 00:02:38,400
here all right Terrace thank you all

00:02:35,250 --> 00:02:40,260
right Mary Johnson oh okay beautiful so

00:02:38,400 --> 00:02:43,739
we have at least the speakers here and

00:02:40,260 --> 00:02:47,519
so that means we can get started at 8:02

00:02:43,739 --> 00:02:48,410
and then we have waiting yes all right

00:02:47,519 --> 00:02:59,640
thank you

00:02:48,410 --> 00:03:04,410
so let me close the door so this is a

00:02:59,640 --> 00:03:11,730
closed-door meeting it's actually funny

00:03:04,410 --> 00:03:13,709
we are to ID Emerson at pivotal now it's

00:03:11,730 --> 00:03:16,310
great tippy-toe is fantastic as you know

00:03:13,709 --> 00:03:19,349
we have hours to be here so that's cool

00:03:16,310 --> 00:03:24,569
okay so we have a packed agenda it's

00:03:19,349 --> 00:03:28,380
really fantastic to have we three great

00:03:24,569 --> 00:03:30,510
talks I think by people that are trying

00:03:28,380 --> 00:03:32,989
to improve the community so we're gonna

00:03:30,510 --> 00:03:37,349
try to get to them as fast as possible

00:03:32,989 --> 00:03:40,230
but as we usually do we get a quick

00:03:37,349 --> 00:03:42,810
update from the foundation and then

00:03:40,230 --> 00:03:44,430
maybe some highlights from projects and

00:03:42,810 --> 00:03:48,840
then we'll just go straight to the

00:03:44,430 --> 00:03:53,940
presentations a timing that is part of

00:03:48,840 --> 00:03:57,480
the wash to me so I do everything so

00:03:53,940 --> 00:03:59,549
with that said maybe chip you can update

00:03:57,480 --> 00:04:02,639
us from the foundation I want to mention

00:03:59,549 --> 00:04:06,780
the hackathon unless Samaras is there so

00:04:02,639 --> 00:04:08,299
chip you can give us an idea like get us

00:04:06,780 --> 00:04:10,829
excited for Santa Clara

00:04:08,299 --> 00:04:12,510
well how about I actually talk really

00:04:10,829 --> 00:04:15,090
fast so that we can get to the

00:04:12,510 --> 00:04:15,719
interesting projects yeah Santa Clara's

00:04:15,090 --> 00:04:16,160
coming folks

00:04:15,719 --> 00:04:17,570
June

00:04:16,160 --> 00:04:20,120
13th if you haven't registered you

00:04:17,570 --> 00:04:21,800
should contributors the the codes but on

00:04:20,120 --> 00:04:24,200
the mailing list

00:04:21,800 --> 00:04:27,020
anybody that's that's sponsoring you

00:04:24,200 --> 00:04:28,880
know talk to your your events team to

00:04:27,020 --> 00:04:32,780
get those codes and otherwise just get

00:04:28,880 --> 00:04:35,060
yourself registered we've we've got a

00:04:32,780 --> 00:04:37,790
little bit of news that we we had opened

00:04:35,060 --> 00:04:40,600
up the claw foundry certified developer

00:04:37,790 --> 00:04:43,430
program for a pool of beta candidates

00:04:40,600 --> 00:04:45,560
that that's all done we've we know what

00:04:43,430 --> 00:04:48,050
the passing score is so for those that

00:04:45,560 --> 00:04:50,180
participated in the beta thank you we'll

00:04:48,050 --> 00:04:53,240
be coming back to you with with either a

00:04:50,180 --> 00:04:55,540
congratulations you're now in the select

00:04:53,240 --> 00:04:58,400
few cloud foundry certified developers

00:04:55,540 --> 00:05:03,500
or here's another code give it another

00:04:58,400 --> 00:05:06,320
shot at so we're very thankful for their

00:05:03,500 --> 00:05:09,530
help through that process and we've

00:05:06,320 --> 00:05:11,800
actually we we had received about three

00:05:09,530 --> 00:05:14,330
hundred applicants for the beta

00:05:11,800 --> 00:05:16,250
so we've anybody that had applied for

00:05:14,330 --> 00:05:19,310
the beta that didn't didn't make it into

00:05:16,250 --> 00:05:22,450
that group you all have a code that's

00:05:19,310 --> 00:05:26,300
that should get you access to the exam

00:05:22,450 --> 00:05:28,340
at actually you know below our cost so

00:05:26,300 --> 00:05:30,800
this will be really limited and you have

00:05:28,340 --> 00:05:32,660
to get registered before summit don't

00:05:30,800 --> 00:05:35,090
forget we're also offering cert at

00:05:32,660 --> 00:05:38,510
summit there's really great training

00:05:35,090 --> 00:05:40,700
stuff going on the first day so if

00:05:38,510 --> 00:05:42,710
you're new to community or maybe

00:05:40,700 --> 00:05:43,340
something like concourse parks your

00:05:42,710 --> 00:05:47,840
interests

00:05:43,340 --> 00:05:49,850
take a look at that and yeah then

00:05:47,840 --> 00:05:50,870
there's a hackathon which I think it's

00:05:49,850 --> 00:05:53,750
going to be amazing

00:05:50,870 --> 00:05:56,060
we already have a good number of people

00:05:53,750 --> 00:05:59,360
registered for the hackathons so maybe

00:05:56,060 --> 00:06:01,610
dr. max you want to just do quick quick

00:05:59,360 --> 00:06:03,500
view on that yeah take you a ticket chip

00:06:01,610 --> 00:06:07,010
so one of the things so Tim iris is

00:06:03,500 --> 00:06:08,990
helping run that out kind of emceeing

00:06:07,010 --> 00:06:10,669
part of it and one of the things we're

00:06:08,990 --> 00:06:13,700
trying to do for the hackathon is to

00:06:10,669 --> 00:06:17,630
allow everybody to be part of it so that

00:06:13,700 --> 00:06:20,060
means well you can't actually so this is

00:06:17,630 --> 00:06:22,040
the cool part the first day we'll have

00:06:20,060 --> 00:06:24,320
like a couple hours to introduce and

00:06:22,040 --> 00:06:26,270
kind of give people ideas of what we are

00:06:24,320 --> 00:06:29,630
looking for enjoy and then the hack

00:06:26,270 --> 00:06:32,270
starts so that means if you go to

00:06:29,630 --> 00:06:34,040
presentation in your board you have your

00:06:32,270 --> 00:06:36,350
laptop keep hacking you know what I mean

00:06:34,040 --> 00:06:38,990
so basically the hackathon is during the

00:06:36,350 --> 00:06:40,130
two days and then we'll be selecting so

00:06:38,990 --> 00:06:43,130
there'll be a date where you come and

00:06:40,130 --> 00:06:44,630
you say okay this is my hat and then so

00:06:43,130 --> 00:06:46,820
you can keep going to the conference are

00:06:44,630 --> 00:06:49,970
you just submitted and then once we

00:06:46,820 --> 00:06:51,320
select you know I think I'm I don't know

00:06:49,970 --> 00:06:53,150
exactly I don't want to say exactly the

00:06:51,320 --> 00:06:55,850
is it top five or top three but anyways

00:06:53,150 --> 00:07:00,490
we'll select a few that will get a

00:06:55,850 --> 00:07:03,470
chance to present during Abi's you know

00:07:00,490 --> 00:07:05,570
keynote so you get essentially visible

00:07:03,470 --> 00:07:07,760
time to and then out of those

00:07:05,570 --> 00:07:11,420
presentation will select the winners and

00:07:07,760 --> 00:07:16,550
there'll be significant prompts so how

00:07:11,420 --> 00:07:21,670
significant robots go ahead you know

00:07:16,550 --> 00:07:24,530
better than me robots robots okay cool

00:07:21,670 --> 00:07:28,640
still a wide range so that could be it

00:07:24,530 --> 00:07:33,320
could be a great know there's this first

00:07:28,640 --> 00:07:35,120
second and third like transformers well

00:07:33,320 --> 00:07:37,430
there is for a second in third place man

00:07:35,120 --> 00:07:41,720
so so you know maybe first place will be

00:07:37,430 --> 00:07:43,370
a transformer AC yeah so basically that

00:07:41,720 --> 00:07:44,660
means anybody can participate we're not

00:07:43,370 --> 00:07:47,630
trying to tell you go to a presentation

00:07:44,660 --> 00:07:52,370
and not watch but if you go there and

00:07:47,630 --> 00:07:56,510
you board and knock right so that's

00:07:52,370 --> 00:07:58,190
that's the opportunity right so so

00:07:56,510 --> 00:08:00,110
that's that's the hackathon one thing I

00:07:58,190 --> 00:08:05,390
want to remind everybody is that the

00:08:00,110 --> 00:08:08,000
call is being recorded so watch your

00:08:05,390 --> 00:08:14,030
language now that I'm saying this

00:08:08,000 --> 00:08:18,020
YouTube but just say is Queen's English

00:08:14,030 --> 00:08:21,170
by definition yeah you saw a million if

00:08:18,020 --> 00:08:24,320
I say it's not bad so for people who

00:08:21,170 --> 00:08:27,980
don't know Jews runs many things in half

00:08:24,320 --> 00:08:31,730
foundry including Gordon or Oren C is

00:08:27,980 --> 00:08:35,390
the brain behind well I'm one of the one

00:08:31,730 --> 00:08:36,979
of the small of the ranks behind well so

00:08:35,390 --> 00:08:39,140
that's that's what a hackathon so

00:08:36,979 --> 00:08:40,580
definitely encourage everybody in your

00:08:39,140 --> 00:08:43,550
organization to points the Spade it

00:08:40,580 --> 00:08:45,709
should be fun and hopefully someday

00:08:43,550 --> 00:08:49,160
out of it will be interesting for the

00:08:45,709 --> 00:08:55,820
family for the community so that's it

00:08:49,160 --> 00:08:58,310
any questions about cff or comments no

00:08:55,820 --> 00:09:01,490
okay so they one more thing about the

00:08:58,310 --> 00:09:03,680
summit is that there is a summit for you

00:09:01,490 --> 00:09:07,760
one that's coming and it's gonna be in

00:09:03,680 --> 00:09:11,540
Basel Switzerland really nice city have

00:09:07,760 --> 00:09:13,490
been there actually this year and I

00:09:11,540 --> 00:09:16,670
should be exciting our Swiss column is

00:09:13,490 --> 00:09:18,680
essentially helping running with the

00:09:16,670 --> 00:09:20,990
foundation so if you've never been to

00:09:18,680 --> 00:09:25,850
Switzerland this is your chance to think

00:09:20,990 --> 00:09:27,560
about that cool alright so and so since

00:09:25,850 --> 00:09:29,120
there are no question I want to make

00:09:27,560 --> 00:09:31,459
sure we give enough time to do

00:09:29,120 --> 00:09:34,640
presenters they're all here so we'll go

00:09:31,459 --> 00:09:36,560
with each product in terms of like the

00:09:34,640 --> 00:09:40,870
core PMC's if you have something to

00:09:36,560 --> 00:09:43,940
highlight let me know I don't know if

00:09:40,870 --> 00:09:47,260
Zach or anybody from the runtime PNC

00:09:43,940 --> 00:09:53,899
wants to highlight something for you

00:09:47,260 --> 00:09:55,730
you wanna highlight anything well so

00:09:53,899 --> 00:09:57,500
there's a couple of kind of cool things

00:09:55,730 --> 00:09:59,779
going in garden and I'll highlight each

00:09:57,500 --> 00:10:05,779
other the first thing is we just started

00:09:59,779 --> 00:10:08,270
work to port garden onto windows so this

00:10:05,779 --> 00:10:10,640
is sort of the next generation of garden

00:10:08,270 --> 00:10:12,770
windows work and before there is sort of

00:10:10,640 --> 00:10:14,570
his custom implementation with the

00:10:12,770 --> 00:10:17,420
garden API on Windows it didn't really

00:10:14,570 --> 00:10:21,079
use containers we're now moving the same

00:10:17,420 --> 00:10:23,320
garden that we use on minutes over to

00:10:21,079 --> 00:10:26,029
Windows I mean it's just going to use a

00:10:23,320 --> 00:10:27,860
Windows OCI binary instead of the runs

00:10:26,029 --> 00:10:30,350
feed binary use on Linux but then shell

00:10:27,860 --> 00:10:33,949
the top-level things and hopefully

00:10:30,350 --> 00:10:37,850
that's pretty cool and if anyone saw the

00:10:33,949 --> 00:10:39,430
OCI build pack proposed I love a good at

00:10:37,850 --> 00:10:41,810
CS stomachs

00:10:39,430 --> 00:10:43,100
we're certainly not definitely going on

00:10:41,810 --> 00:10:45,110
the whole path back there's a whole lot

00:10:43,100 --> 00:10:46,610
of ocean to boil in that proposal yeah

00:10:45,110 --> 00:10:48,529
but the garden team has started doing

00:10:46,610 --> 00:10:51,800
the first couple of stories along that

00:10:48,529 --> 00:10:53,810
path so we've started to exploit

00:10:51,800 --> 00:10:55,610
filesystem layers to improve performance

00:10:53,810 --> 00:10:57,350
of bill packs so instead of them just

00:10:55,610 --> 00:10:59,180
being using the docker flow

00:10:57,350 --> 00:11:01,000
we're now trying to see where we can use

00:10:59,180 --> 00:11:04,760
some of that stuff so instead of

00:11:01,000 --> 00:11:07,040
untiring droplets I'm into the running

00:11:04,760 --> 00:11:10,580
container we're going to pre great file

00:11:07,040 --> 00:11:13,520
system layers and then create container

00:11:10,580 --> 00:11:16,400
on top of them so hopefully that cuts a

00:11:13,520 --> 00:11:18,710
lot of time out of the process if you've

00:11:16,400 --> 00:11:23,000
got a big JVM and we maybe not going to

00:11:18,710 --> 00:11:24,860
have to keep Ontario Atari and then the

00:11:23,000 --> 00:11:27,050
first couple of steps first home in the

00:11:24,860 --> 00:11:28,940
water down online I think those are some

00:11:27,050 --> 00:11:31,730
pretty interesting things and god yeah

00:11:28,940 --> 00:11:34,730
very exciting and I think the OCI built

00:11:31,730 --> 00:11:36,050
by proposal they're still the proposal

00:11:34,730 --> 00:11:37,520
is up for comment so if you have

00:11:36,050 --> 00:11:38,900
comments they're going with the

00:11:37,520 --> 00:11:41,840
proposals up for comments and the

00:11:38,900 --> 00:11:44,960
current state is we kind of there's

00:11:41,840 --> 00:11:47,990
about seven or eight kind of epic like

00:11:44,960 --> 00:11:49,940
stories in that proposal and we're just

00:11:47,990 --> 00:11:52,250
at the moment touching our foots in the

00:11:49,940 --> 00:11:54,560
water by being the first couple and sort

00:11:52,250 --> 00:11:56,480
of get a feel for get some of the early

00:11:54,560 --> 00:12:00,020
benefits are low-hanging fruit and then

00:11:56,480 --> 00:12:01,430
see how much we can motivate some of the

00:12:00,020 --> 00:12:03,800
latest stories by seeing how much the

00:12:01,430 --> 00:12:06,770
benefit is and how hard is and but we're

00:12:03,800 --> 00:12:09,440
very welcoming of feedback of people

00:12:06,770 --> 00:12:11,600
saying yeah we'd love the other stories

00:12:09,440 --> 00:12:15,230
or no we don't care about the other

00:12:11,600 --> 00:12:17,720
stories but mostly the first one o think

00:12:15,230 --> 00:12:19,850
your drills if you have questions this

00:12:17,720 --> 00:12:22,670
is the time let me also ask if anybody

00:12:19,850 --> 00:12:25,190
else from runtime wants to chime in with

00:12:22,670 --> 00:12:31,879
any highlights

00:12:25,190 --> 00:12:33,490
oh okay so maybe let me see if de metrio

00:12:31,879 --> 00:12:36,980
here

00:12:33,490 --> 00:12:39,560
you must be unmuted few here I'll give

00:12:36,980 --> 00:12:41,689
the highlight for him if he's not so I

00:12:39,560 --> 00:12:44,180
actually joined the Bosch team for the

00:12:41,689 --> 00:12:44,569
past two weeks and last time he's here

00:12:44,180 --> 00:12:47,360
too

00:12:44,569 --> 00:12:49,129
I'll mention two things that were he's

00:12:47,360 --> 00:12:54,129
been focusing on Dmitri has been getting

00:12:49,129 --> 00:12:57,560
the team to get the Bosch DNS version -

00:12:54,129 --> 00:13:02,360
so this is if you don't know what that

00:12:57,560 --> 00:13:04,250
is you may want to look into you know I

00:13:02,360 --> 00:13:06,199
think Dimitri as a Bosch notes on this

00:13:04,250 --> 00:13:09,560
but essentially it's gonna allow us to

00:13:06,199 --> 00:13:12,579
remove power DNS and it also allows us

00:13:09,560 --> 00:13:16,069
to remove console as a consequence in

00:13:12,579 --> 00:13:18,199
Diego so this is a broad set of work

00:13:16,069 --> 00:13:19,550
that should make it a little bit easier

00:13:18,199 --> 00:13:23,029
so this system has been working hard on

00:13:19,550 --> 00:13:25,730
this and then also just mention here as

00:13:23,029 --> 00:13:27,319
well mentioned the VBR so Bosch is

00:13:25,730 --> 00:13:30,529
affording the DVR so that's another

00:13:27,319 --> 00:13:32,959
piece of work that's going on so that's

00:13:30,529 --> 00:13:34,430
that and then for extensions I'll just

00:13:32,959 --> 00:13:37,970
say that you know we have three

00:13:34,430 --> 00:13:40,310
presentations that essentially sort of

00:13:37,970 --> 00:13:42,230
helps show that some of the things I

00:13:40,310 --> 00:13:45,079
were in a pipeline so if you have a

00:13:42,230 --> 00:13:48,319
question about that then you know we're

00:13:45,079 --> 00:13:50,480
trying to put some structure around

00:13:48,319 --> 00:13:53,689
extensions but also make sure that we

00:13:50,480 --> 00:13:55,339
invite people so that's a consequence of

00:13:53,689 --> 00:13:58,880
the this meeting Burnsville giving

00:13:55,339 --> 00:14:02,380
people a chance to so let me see if

00:13:58,880 --> 00:14:05,750
there's any questions if there is none

00:14:02,380 --> 00:14:08,630
you you remember your new automatically

00:14:05,750 --> 00:14:17,630
so you might need to unmute okay I don't

00:14:08,630 --> 00:14:21,230
see anybody chiming so awesome so I'm

00:14:17,630 --> 00:14:24,319
sharing the screen okay yeah yes we can

00:14:21,230 --> 00:14:26,149
see us so I'm going to do it very very

00:14:24,319 --> 00:14:28,490
quick this is like a one-hour talk and

00:14:26,149 --> 00:14:31,069
ask you still so I'm going to run I

00:14:28,490 --> 00:14:34,189
don't know we already saw some of the

00:14:31,069 --> 00:14:37,250
presentation so I'm going to jump real

00:14:34,189 --> 00:14:41,000
quick between them hopefully convince

00:14:37,250 --> 00:14:43,639
you okay so so when you're running today

00:14:41,000 --> 00:14:45,769
Cloud Foundry the Blessed flavor usually

00:14:43,639 --> 00:14:50,389
you're running it on home winter and

00:14:45,769 --> 00:14:53,059
we're doing a lot a lot of effort to

00:14:50,389 --> 00:14:55,970
make the container verse very am and so

00:14:53,059 --> 00:14:58,069
where is a secure but actually you're

00:14:55,970 --> 00:15:00,079
still having the problem which is the

00:14:58,069 --> 00:15:01,189
operating system is not really secure so

00:15:00,079 --> 00:15:02,929
if you're running going we're going to

00:15:01,189 --> 00:15:04,790
you basically running that on that kind

00:15:02,929 --> 00:15:08,179
of stuff right every time that you're

00:15:04,790 --> 00:15:10,250
running it so if we look in a day

00:15:08,179 --> 00:15:14,209
they'll burn to destroy itself or any

00:15:10,250 --> 00:15:15,889
little kind of for that sake you will

00:15:14,209 --> 00:15:17,689
see that it's very very complex and

00:15:15,889 --> 00:15:19,339
because it's very very complex it's

00:15:17,689 --> 00:15:23,000
because it's trying to do quite a lot of

00:15:19,339 --> 00:15:25,490
stuff and it's trying to manage the

00:15:23,000 --> 00:15:27,740
drivers any the memory management and

00:15:25,490 --> 00:15:29,779
they protect your processes and so on

00:15:27,740 --> 00:15:33,319
and that making a lot a lot of sense

00:15:29,779 --> 00:15:35,660
when they actually started the UNIX

00:15:33,319 --> 00:15:37,100
operating system and that's the problem

00:15:35,660 --> 00:15:39,230
that they're trying to solve is time

00:15:37,100 --> 00:15:41,750
sharing because back on the day they

00:15:39,230 --> 00:15:43,490
build this huge mainframe was very

00:15:41,750 --> 00:15:46,519
expensive to run one application

00:15:43,490 --> 00:15:48,199
therefore they needed all of it they

00:15:46,519 --> 00:15:50,540
needed a way to share it automatically

00:15:48,199 --> 00:15:52,790
but again this is not what we're doing

00:15:50,540 --> 00:15:55,819
today today we can actually spin up an

00:15:52,790 --> 00:15:58,639
instance and it will be a unique for an

00:15:55,819 --> 00:16:01,699
application there is a lot of

00:15:58,639 --> 00:16:04,790
unnecessary component on the pointer for

00:16:01,699 --> 00:16:08,029
instance this show today they're still

00:16:04,790 --> 00:16:10,279
the floppy driver running there if

00:16:08,029 --> 00:16:12,040
you're running on the cloud you still

00:16:10,279 --> 00:16:15,339
the USB driver

00:16:12,040 --> 00:16:17,889
which mean a lot of company that really

00:16:15,339 --> 00:16:19,120
is not needed are still included in your

00:16:17,889 --> 00:16:20,800
operating system when you're running

00:16:19,120 --> 00:16:22,870
again you're just trying to run your

00:16:20,800 --> 00:16:25,120
application in Cloud Foundry but you're

00:16:22,870 --> 00:16:27,070
actually getting all these things behind

00:16:25,120 --> 00:16:29,470
the scene that you are not aware or

00:16:27,070 --> 00:16:31,209
maybe you are in terms of memory

00:16:29,470 --> 00:16:35,380
management again the purpose of the

00:16:31,209 --> 00:16:36,970
operating system is to protect the idea

00:16:35,380 --> 00:16:38,829
is that if you have two processes we

00:16:36,970 --> 00:16:41,079
need to make sure that you are not

00:16:38,829 --> 00:16:43,000
writing to the memory of my process and

00:16:41,079 --> 00:16:45,550
also if your process is doing something

00:16:43,000 --> 00:16:47,649
very bad to the osted self it's not

00:16:45,550 --> 00:16:49,269
taking the us down because then that

00:16:47,649 --> 00:16:52,180
means that you also took my process

00:16:49,269 --> 00:16:53,589
right so that's the main purpose but

00:16:52,180 --> 00:16:55,120
again when we're running today we're

00:16:53,589 --> 00:16:58,480
basically running one process usually

00:16:55,120 --> 00:17:00,639
and therefore there is no really need to

00:16:58,480 --> 00:17:03,399
protect between the processes and

00:17:00,639 --> 00:17:06,010
between the user and all this over at

00:17:03,399 --> 00:17:10,209
creating us a lot of complexity and a

00:17:06,010 --> 00:17:13,120
lot of vulnerability a it context we

00:17:10,209 --> 00:17:14,980
each and and and you know multi address

00:17:13,120 --> 00:17:18,459
space and so on there is so much

00:17:14,980 --> 00:17:20,110
unnecessary they aim management layer

00:17:18,459 --> 00:17:23,679
there because we're only running one

00:17:20,110 --> 00:17:26,439
process right now I mean if I just

00:17:23,679 --> 00:17:29,320
described that they're stuck it's very

00:17:26,439 --> 00:17:31,990
very very very big that means that also

00:17:29,320 --> 00:17:34,120
there is a lot of surface of attacked is

00:17:31,990 --> 00:17:36,700
huge and if the surface if attack to

00:17:34,120 --> 00:17:39,970
view it you can actually penetrate from

00:17:36,700 --> 00:17:41,919
a lot of things the last big attack that

00:17:39,970 --> 00:17:45,070
was in the US so I think it's actually

00:17:41,919 --> 00:17:47,429
was all over the world was that an open

00:17:45,070 --> 00:17:49,870
source project called Mir I actually

00:17:47,429 --> 00:17:51,760
it's an open source so the architects

00:17:49,870 --> 00:17:54,580
like created a community to take the

00:17:51,760 --> 00:17:56,770
internet down and what happened there is

00:17:54,580 --> 00:17:59,380
that they basically went to all them

00:17:56,770 --> 00:18:00,880
them the Internet of Things devices and

00:17:59,380 --> 00:18:03,070
those Internet of Things device is

00:18:00,880 --> 00:18:04,780
actually running they operate the system

00:18:03,070 --> 00:18:08,140
and therefore there was telling it there

00:18:04,780 --> 00:18:10,809
so no one no one care about the talent

00:18:08,140 --> 00:18:12,490
because that's not what basically you

00:18:10,809 --> 00:18:14,380
know they secured application itself but

00:18:12,490 --> 00:18:16,659
never dealt no operating system and

00:18:14,380 --> 00:18:19,299
therefore what happened they they kind

00:18:16,659 --> 00:18:21,460
of like took over and BOTS basically

00:18:19,299 --> 00:18:23,710
created an army of Spartan to paint on

00:18:21,460 --> 00:18:25,420
it down so that's something that could

00:18:23,710 --> 00:18:26,740
happen also in

00:18:25,420 --> 00:18:28,360
if you're running Cloud Foundry and

00:18:26,740 --> 00:18:30,370
someone is penetrated they were going to

00:18:28,360 --> 00:18:32,590
do boon to itself right it doesn't

00:18:30,370 --> 00:18:35,200
matter out secures the container itself

00:18:32,590 --> 00:18:37,720
Oh awesome Cloud Foundry is what is

00:18:35,200 --> 00:18:41,290
important is that people can penetrate

00:18:37,720 --> 00:18:42,730
um okay Aaron basically again it's a

00:18:41,290 --> 00:18:44,380
one-hour talk but basically I'm

00:18:42,730 --> 00:18:46,780
explaining about complicated the Linux

00:18:44,380 --> 00:18:49,210
operating system is how many line

00:18:46,780 --> 00:18:54,520
degrees and again I run with it because

00:18:49,210 --> 00:18:58,810
I don't think we have the time so sorry

00:18:54,520 --> 00:19:02,500
I described a lot of inefficiency very

00:18:58,810 --> 00:19:04,150
quick but I did so the question is how

00:19:02,500 --> 00:19:06,610
we get there and it's quite simple right

00:19:04,150 --> 00:19:08,200
you basically it's evolution we started

00:19:06,610 --> 00:19:09,790
all the way for the mainframe until

00:19:08,200 --> 00:19:14,790
today what we basically running

00:19:09,790 --> 00:19:17,830
everywhere is the Linux kernel again now

00:19:14,790 --> 00:19:20,350
leaders can run everywhere and it can

00:19:17,830 --> 00:19:22,770
run anything and because it's a multi

00:19:20,350 --> 00:19:25,570
process it would be multi-purpose

00:19:22,770 --> 00:19:28,000
operating system there was a lot of

00:19:25,570 --> 00:19:30,040
unnecessary data there so for instance I

00:19:28,000 --> 00:19:33,070
can actually take the last destroyed do

00:19:30,040 --> 00:19:35,860
want to run it on pentium one it's still

00:19:33,070 --> 00:19:38,770
going to work right I'd only to okay so

00:19:35,860 --> 00:19:40,990
again we make a decision that it's more

00:19:38,770 --> 00:19:44,200
important to us to support compatibility

00:19:40,990 --> 00:19:47,500
versus efficiency in the last docket

00:19:44,200 --> 00:19:51,580
corner so Lamoni introduces the notion

00:19:47,500 --> 00:19:53,740
of linux kit so what is Linux gates I

00:19:51,580 --> 00:19:55,630
will give you a quick explanation of

00:19:53,740 --> 00:19:57,640
what it is but that is that you probably

00:19:55,630 --> 00:20:02,590
familiar with the operating system like

00:19:57,640 --> 00:20:04,600
Cola ass or Ranchero s AO photon OS and

00:20:02,590 --> 00:20:06,460
so on and so on and the purpose is that

00:20:04,600 --> 00:20:09,430
you take it off at the system you're

00:20:06,460 --> 00:20:11,800
still using the Linux kernel and you're

00:20:09,430 --> 00:20:13,750
putting and but you you kind of like

00:20:11,800 --> 00:20:15,490
cleaning up the destroy itself and

00:20:13,750 --> 00:20:18,400
putting okay only what you need in order

00:20:15,490 --> 00:20:20,770
to run a container that's great but

00:20:18,400 --> 00:20:23,740
you're getting it out of the box so if

00:20:20,770 --> 00:20:25,600
you want the chorus getting it built but

00:20:23,740 --> 00:20:27,340
you know skip is is basically a way to

00:20:25,600 --> 00:20:29,080
build something like that to build an

00:20:27,340 --> 00:20:32,920
operating system that will be purpose

00:20:29,080 --> 00:20:35,950
for what you need so by the way a lot of

00:20:32,920 --> 00:20:38,350
the design actually that is is taking

00:20:35,950 --> 00:20:39,190
from unique and basically what you do

00:20:38,350 --> 00:20:41,020
and you you

00:20:39,190 --> 00:20:44,520
get in a container and creating the

00:20:41,020 --> 00:20:44,520
operating system is there any question

00:20:46,530 --> 00:20:53,200
okay so that's the New York State and

00:20:50,520 --> 00:20:55,210
eunuch colonel has a very similar

00:20:53,200 --> 00:20:57,640
project it's kind of like the team in

00:20:55,210 --> 00:20:59,320
Cambridge in charge of the eunuch and

00:20:57,640 --> 00:21:02,080
Allah the one who actually did an ox kid

00:20:59,320 --> 00:21:04,570
and the purpose is the same thing it's

00:21:02,080 --> 00:21:06,240
basically the same today every time

00:21:04,570 --> 00:21:08,620
you're running it operate the system

00:21:06,240 --> 00:21:10,660
application you're always running the

00:21:08,620 --> 00:21:12,940
kernel and on top of the kernel you're

00:21:10,660 --> 00:21:15,370
putting on the iOS libraries always

00:21:12,940 --> 00:21:17,350
right this is even and on top of it

00:21:15,370 --> 00:21:19,510
you're putting in a application no

00:21:17,350 --> 00:21:21,790
matter how many application you're still

00:21:19,510 --> 00:21:24,250
running all the stack on the operating

00:21:21,790 --> 00:21:26,020
system so what what what unicorn is

00:21:24,250 --> 00:21:28,660
doing they said what if we will take

00:21:26,020 --> 00:21:31,860
only the application and we basically

00:21:28,660 --> 00:21:34,090
will take only the parts from the OS

00:21:31,860 --> 00:21:36,190
libraries and the kernel that needed to

00:21:34,090 --> 00:21:37,480
support this application so for instance

00:21:36,190 --> 00:21:38,950
if your application is doesn't need

00:21:37,480 --> 00:21:40,390
network you're going not going to have

00:21:38,950 --> 00:21:43,150
the driver of the network or any

00:21:40,390 --> 00:21:44,920
libraries that will light it it looks

00:21:43,150 --> 00:21:47,070
something like that right only the black

00:21:44,920 --> 00:21:49,480
part is going to be kind of like

00:21:47,070 --> 00:21:51,340
packaged together with your application

00:21:49,480 --> 00:21:54,460
it's time for wrapping your application

00:21:51,340 --> 00:21:58,690
and and that's it that's basically a

00:21:54,460 --> 00:22:01,300
bootable image and now in order to make

00:21:58,690 --> 00:22:03,340
it even simpler we didn't we make these

00:22:01,300 --> 00:22:04,720
design choice the community making eMac

00:22:03,340 --> 00:22:06,430
design choice and the design choices

00:22:04,720 --> 00:22:08,950
that we are only going to support one

00:22:06,430 --> 00:22:11,170
process every one user because if you

00:22:08,950 --> 00:22:12,670
doing that not a lot of the complexity

00:22:11,170 --> 00:22:14,620
of context switching of memory

00:22:12,670 --> 00:22:16,660
management of protection ring are not

00:22:14,620 --> 00:22:18,400
relevant so we can remove it there is no

00:22:16,660 --> 00:22:20,530
need to do all the time permission check

00:22:18,400 --> 00:22:23,890
because there is no Monda

00:22:20,530 --> 00:22:25,960
and so on so now we can actually take

00:22:23,890 --> 00:22:30,100
something like it went to destroy that

00:22:25,960 --> 00:22:32,080
it's a minimum one gig side and reduce

00:22:30,100 --> 00:22:35,950
it dramatically to something like men's

00:22:32,080 --> 00:22:38,430
oh you know Oh even case so so that's

00:22:35,950 --> 00:22:41,050
the ID how to make it I'm not going to

00:22:38,430 --> 00:22:43,300
and we don't have time basically there

00:22:41,050 --> 00:22:45,220
is some packaging tool that using the

00:22:43,300 --> 00:22:47,440
linkage and know how to take what it's

00:22:45,220 --> 00:22:50,970
need basically the compiler and

00:22:47,440 --> 00:22:53,020
basically wrap it there as a images um

00:22:50,970 --> 00:22:55,240
and in what we did

00:22:53,020 --> 00:22:57,160
reduce all of this right so basically

00:22:55,240 --> 00:22:59,290
there it is right now that all this

00:22:57,160 --> 00:23:01,180
middle layer we should operate the

00:22:59,290 --> 00:23:02,890
system that you donated and so on it's

00:23:01,180 --> 00:23:04,720
kind of like move aside

00:23:02,890 --> 00:23:09,460
and that means that you have less code

00:23:04,720 --> 00:23:10,810
fewer bags and easy to reason about so

00:23:09,460 --> 00:23:12,670
it looks something like that right

00:23:10,810 --> 00:23:14,200
basically this is a stack code we had

00:23:12,670 --> 00:23:16,510
before and right now basically you're

00:23:14,200 --> 00:23:18,160
running a nitro visor you can run also

00:23:16,510 --> 00:23:20,410
in bare metal it just does not really

00:23:18,160 --> 00:23:22,300
make sense because it's very small so

00:23:20,410 --> 00:23:24,160
you don't want to actually take all the

00:23:22,300 --> 00:23:27,010
Machine and put this application on it

00:23:24,160 --> 00:23:31,450
but are you using an eye professor

00:23:27,010 --> 00:23:33,790
usually and and people will come and ask

00:23:31,450 --> 00:23:37,420
so what if we will take the container

00:23:33,790 --> 00:23:39,760
and put it on bare metal and and this is

00:23:37,420 --> 00:23:41,560
a good question but the problem with

00:23:39,760 --> 00:23:44,950
that approach is that the operating

00:23:41,560 --> 00:23:47,230
system did the Linux was never intend to

00:23:44,950 --> 00:23:51,040
serve as multi-application

00:23:47,230 --> 00:23:52,780
as servers and therefore they they're

00:23:51,040 --> 00:23:55,030
not going to leverage something like

00:23:52,780 --> 00:23:57,430
they how about isolation did giving from

00:23:55,030 --> 00:24:00,310
the hypervisor we tend to do that from

00:23:57,430 --> 00:24:01,750
you know get-go so it would be less

00:24:00,310 --> 00:24:05,170
secure right so it's basically very

00:24:01,750 --> 00:24:07,960
simple and that's the difference between

00:24:05,170 --> 00:24:09,550
running container to a VM right it's

00:24:07,960 --> 00:24:13,960
much more secure because it's leveraging

00:24:09,550 --> 00:24:16,000
the CPU I iodization things like like

00:24:13,960 --> 00:24:20,320
Intel has clear containers which do use

00:24:16,000 --> 00:24:22,870
hardware it's just there's nothing

00:24:20,320 --> 00:24:25,570
fundamental about limits or containers

00:24:22,870 --> 00:24:27,130
that says you can't use that CPU

00:24:25,570 --> 00:24:29,110
instruction right it's the CPU

00:24:27,130 --> 00:24:30,550
instruction you can just mean that you

00:24:29,110 --> 00:24:34,900
will need to rebuild all the operating

00:24:30,550 --> 00:24:36,430
system for that but it may be simply the

00:24:34,900 --> 00:24:39,250
rebuilding or medications as you need

00:24:36,430 --> 00:24:40,960
condoms that's true so so it's all

00:24:39,250 --> 00:24:42,580
trade-off right the question is what is

00:24:40,960 --> 00:24:45,670
easier and what it may give you more

00:24:42,580 --> 00:24:48,160
benefit and it's a good question to I

00:24:45,670 --> 00:24:49,780
said I don't know this answer I'm

00:24:48,160 --> 00:24:53,620
telling to think that unique and would

00:24:49,780 --> 00:24:55,750
be you know a bit better but you know

00:24:53,620 --> 00:25:00,310
downloader right

00:24:55,750 --> 00:25:02,830
in terms of advantage so no permission

00:25:00,310 --> 00:25:05,830
check so you utilize one percent of the

00:25:02,830 --> 00:25:06,850
of the hardware for a for the actually

00:25:05,830 --> 00:25:08,950
application again

00:25:06,850 --> 00:25:12,250
choices we don't walk we click on their

00:25:08,950 --> 00:25:14,260
and son um isolation basically

00:25:12,250 --> 00:25:16,420
micro-services is sharing a lot of stuff

00:25:14,260 --> 00:25:17,920
assuring the memory the filesystem you

00:25:16,420 --> 00:25:20,110
know there is a lot of advantage with

00:25:17,920 --> 00:25:22,000
that but also you know disadvantage

00:25:20,110 --> 00:25:24,390
which is it's lesson you know you're

00:25:22,000 --> 00:25:27,340
still sharing a lot so it's a secure um

00:25:24,390 --> 00:25:29,350
in terms of site so we talking about the

00:25:27,340 --> 00:25:31,690
difference between one gig you know

00:25:29,350 --> 00:25:34,450
minimum of one Giga decides when you

00:25:31,690 --> 00:25:36,280
look in the regular operating system to

00:25:34,450 --> 00:25:38,680
case right basically the size of the

00:25:36,280 --> 00:25:41,350
application is the size of the unica and

00:25:38,680 --> 00:25:43,210
the short time is the boot time is

00:25:41,350 --> 00:25:45,100
really quick and that's will be very

00:25:43,210 --> 00:25:47,790
interesting to something like several s

00:25:45,100 --> 00:25:51,070
because if you're looking today people

00:25:47,790 --> 00:25:53,290
reusing container for for basically

00:25:51,070 --> 00:25:55,720
creating a hot container for service and

00:25:53,290 --> 00:25:57,880
the reason they do that is because it's

00:25:55,720 --> 00:25:59,860
taking time to boot with unique I know

00:25:57,880 --> 00:26:03,460
the boot time is much quicker so we can

00:25:59,860 --> 00:26:05,590
leverage that and and and and the

00:26:03,460 --> 00:26:07,480
surface of attack is tiny but it's also

00:26:05,590 --> 00:26:09,730
custom and this is this is very

00:26:07,480 --> 00:26:11,140
important if you manage to penetrate to

00:26:09,730 --> 00:26:14,080
one of them you will not be able to

00:26:11,140 --> 00:26:17,860
manage to penetrate to the others

00:26:14,080 --> 00:26:19,390
oo it is not easily and and the last

00:26:17,860 --> 00:26:21,370
thing is that I really really put

00:26:19,390 --> 00:26:23,530
unicameral is the right approach and the

00:26:21,370 --> 00:26:27,640
reason I hope also the right approach

00:26:23,530 --> 00:26:30,820
it's a Endon or or because I'm sorry

00:26:27,640 --> 00:26:32,080
it's alright because I'm what we're

00:26:30,820 --> 00:26:33,820
trying to build right now is an

00:26:32,080 --> 00:26:35,620
immutable infrastructure right this is

00:26:33,820 --> 00:26:37,750
what we pitching all the time we wanna

00:26:35,620 --> 00:26:39,610
build an immutable infrastructure and

00:26:37,750 --> 00:26:42,310
that's a really mutable infrastructure

00:26:39,610 --> 00:26:44,200
you cannot ssh to the machine you cannot

00:26:42,310 --> 00:26:45,760
that put some patch it's actually a

00:26:44,200 --> 00:26:47,800
really beautiful infrastructure and

00:26:45,760 --> 00:26:50,770
that's what i feel that this is a feat

00:26:47,800 --> 00:26:54,130
for microservices architecture and I

00:26:50,770 --> 00:26:55,840
mean promote performance but again I'm

00:26:54,130 --> 00:26:58,090
not going to go into details you can see

00:26:55,840 --> 00:27:01,240
this online the performance are much

00:26:58,090 --> 00:27:03,610
better this is an example of Cassandra

00:27:01,240 --> 00:27:10,420
running going on a 10 times better in

00:27:03,610 --> 00:27:13,420
terms of faith sorry compared to yes so

00:27:10,420 --> 00:27:15,910
was a company called Claudius what they

00:27:13,420 --> 00:27:18,450
did they took Cassandra and they put it

00:27:15,910 --> 00:27:20,800
on unicorn of specifically on OS v and

00:27:18,450 --> 00:27:23,770
and basically

00:27:20,800 --> 00:27:26,920
took the regular Quesada running on a VM

00:27:23,770 --> 00:27:29,110
and it you can Cassandra their own

00:27:26,920 --> 00:27:31,090
Cassandra running on unicorn and they

00:27:29,110 --> 00:27:32,830
did this benchmark is funny if it's

00:27:31,090 --> 00:27:35,650
comparing plus the V animal versus a

00:27:32,830 --> 00:27:39,790
competitor is CDM

00:27:35,650 --> 00:27:41,230
but I think I mean talking about a trip

00:27:39,790 --> 00:27:44,590
boots right here

00:27:41,230 --> 00:27:45,250
so I mean I know I guess what I'm saying

00:27:44,590 --> 00:27:47,740
was I know

00:27:45,250 --> 00:27:49,390
unicorns are faster at the ends my

00:27:47,740 --> 00:27:51,010
question is what's the overhead versus a

00:27:49,390 --> 00:27:54,250
container which is just the process

00:27:51,010 --> 00:27:57,610
there's no virtualization at all but you

00:27:54,250 --> 00:27:59,350
still eventually need to run on a VM

00:27:57,610 --> 00:28:01,240
well it oh so you've got to book your

00:27:59,350 --> 00:28:03,340
house right your bare metal house right

00:28:01,240 --> 00:28:05,350
and now you can do two things you can

00:28:03,340 --> 00:28:07,570
either run containers there's another

00:28:05,350 --> 00:28:10,330
virtualization right well we can win

00:28:07,570 --> 00:28:12,120
únicos in some sort of hypervisor and my

00:28:10,330 --> 00:28:15,510
question is what's the I know that

00:28:12,120 --> 00:28:18,550
unicorns are faster than using a hold vm

00:28:15,510 --> 00:28:20,560
but how do they compare to a container

00:28:18,550 --> 00:28:30,220
which is really that the question here

00:28:20,560 --> 00:28:31,600
because we don't run the ends right in

00:28:30,220 --> 00:28:33,670
this proposal what you're what you're

00:28:31,600 --> 00:28:35,080
swapping out is not the VM right because

00:28:33,670 --> 00:28:40,090
they need to be in the Box layer not

00:28:35,080 --> 00:28:41,920
that I am sorry for that

00:28:40,090 --> 00:28:44,740
I don't forget that it you have about

00:28:41,920 --> 00:28:46,900
four minutes yes so let's go flex but I

00:28:44,740 --> 00:28:48,220
will show you in a second so anyway the

00:28:46,900 --> 00:28:50,350
only thing what we did with unique is

00:28:48,220 --> 00:28:53,440
basically created doctor kind of like a

00:28:50,350 --> 00:28:55,900
doctor command line for a unique kernel

00:28:53,440 --> 00:28:57,340
um it's very very simple to use and I

00:28:55,900 --> 00:28:59,020
don't have time so I will not show you

00:28:57,340 --> 00:29:02,620
demos but it's basically you're building

00:28:59,020 --> 00:29:05,080
it it is a VM and therefore you'd need

00:29:02,620 --> 00:29:06,790
to tell me where you want to run because

00:29:05,080 --> 00:29:08,260
we need to compile the drivers and then

00:29:06,790 --> 00:29:09,490
basically we're running it for you so

00:29:08,260 --> 00:29:11,680
when you're doing run you actually

00:29:09,490 --> 00:29:14,170
running it for you okay

00:29:11,680 --> 00:29:14,800
we're supporting all of this unique

00:29:14,170 --> 00:29:19,750
kernel

00:29:14,800 --> 00:29:21,940
all of this and cloud provider and but

00:29:19,750 --> 00:29:25,230
but but but you kind of like pink on a

00:29:21,940 --> 00:29:28,330
point because basically I'm kind of like

00:29:25,230 --> 00:29:30,100
transferring them both the unicorn the

00:29:28,330 --> 00:29:33,040
unicorn

00:29:30,100 --> 00:29:34,450
for you blue transfer the container and

00:29:33,040 --> 00:29:38,559
the

00:29:34,450 --> 00:29:41,200
the server itself the VM I don't have

00:29:38,559 --> 00:29:42,730
time to do it there more I will talk one

00:29:41,200 --> 00:29:44,499
second will quick about the integration

00:29:42,730 --> 00:29:46,989
that we did so we didn't do the right

00:29:44,499 --> 00:29:48,929
integration mainly because of time the

00:29:46,989 --> 00:29:51,369
right integration should be on the

00:29:48,929 --> 00:29:52,779
garden right basically all the purpose

00:29:51,369 --> 00:29:54,730
of garden is the fact that it can

00:29:52,779 --> 00:29:58,509
support different container I think that

00:29:54,730 --> 00:30:01,570
it can also support different única like

00:29:58,509 --> 00:30:03,340
basically VMs per se now one thing that

00:30:01,570 --> 00:30:07,119
is very important you actually know that

00:30:03,340 --> 00:30:10,119
so today when you're running your your

00:30:07,119 --> 00:30:12,399
infrastructure first you need to somehow

00:30:10,119 --> 00:30:14,470
manage the VM right and that's done in

00:30:12,399 --> 00:30:18,509
the Bosch layer right so budgets

00:30:14,470 --> 00:30:18,509
basically manage managing your VM and

00:30:19,169 --> 00:30:26,950
yes fair enough ok ah but but you need

00:30:24,609 --> 00:30:28,570
to run something to put the container on

00:30:26,950 --> 00:30:30,100
top of it then you need to manage that

00:30:28,570 --> 00:30:32,080
and I don't think that you need to do

00:30:30,100 --> 00:30:33,519
you need to basically have something

00:30:32,080 --> 00:30:36,159
like a lot found area kubernetes or

00:30:33,519 --> 00:30:38,080
whatever to actually manage their the

00:30:36,159 --> 00:30:39,580
container itself that means that you

00:30:38,080 --> 00:30:41,529
have two different to two minutes the

00:30:39,580 --> 00:30:43,600
same the same you know the

00:30:41,529 --> 00:30:46,149
infrastructure which is not the easiest

00:30:43,600 --> 00:30:48,989
way to do with your internal the idea is

00:30:46,149 --> 00:30:51,429
that the application is the VM and

00:30:48,989 --> 00:30:54,100
therefore basically you spinning it

00:30:51,429 --> 00:30:56,109
holding on demand so basically in that

00:30:54,100 --> 00:30:59,559
point when someone actually said I want

00:30:56,109 --> 00:31:00,909
this application be spinning a VM which

00:30:59,559 --> 00:31:02,889
means that you're not managing them

00:31:00,909 --> 00:31:06,460
separately you basically manage them as

00:31:02,889 --> 00:31:08,019
an one entity which one basically Cloud

00:31:06,460 --> 00:31:12,700
Foundry will be the one is managing that

00:31:08,019 --> 00:31:14,679
does that make any sense yeah I would so

00:31:12,700 --> 00:31:16,889
what thing to want to do a time check

00:31:14,679 --> 00:31:19,210
you have about two minutes left

00:31:16,889 --> 00:31:21,970
Jules is definitely the person you want

00:31:19,210 --> 00:31:24,429
to talk to you at at the summit you guys

00:31:21,970 --> 00:31:25,749
need to do chat but just want to make

00:31:24,429 --> 00:31:26,139
sure that we get a chance for you to

00:31:25,749 --> 00:31:28,960
finish

00:31:26,139 --> 00:31:30,669
you did okay yeah I mean I can show you

00:31:28,960 --> 00:31:32,590
a demo what I wanted to show you is also

00:31:30,669 --> 00:31:34,419
these things because I feel this is this

00:31:32,590 --> 00:31:36,820
is kind of like started from unicameral

00:31:34,419 --> 00:31:39,999
but right now it also makes sense to run

00:31:36,820 --> 00:31:43,029
it as in you know with the cloth honoree

00:31:39,999 --> 00:31:44,710
generally is basically a debugger so in

00:31:43,029 --> 00:31:46,119
the beginning it was a debugger for uni

00:31:44,710 --> 00:31:48,429
kernel but now is a debugger for

00:31:46,119 --> 00:31:49,929
microservices period and

00:31:48,429 --> 00:31:52,539
what we created is a project called

00:31:49,929 --> 00:31:55,240
squash and the IDB squash is that you

00:31:52,539 --> 00:31:56,619
basically you know today when you debug

00:31:55,240 --> 00:31:59,080
your micro-service application usually

00:31:56,619 --> 00:32:00,639
looking at log you you printing and look

00:31:59,080 --> 00:32:02,230
at the log and the idea with this

00:32:00,639 --> 00:32:04,149
project is that we don't think that you

00:32:02,230 --> 00:32:06,220
should do that but we do think is that

00:32:04,149 --> 00:32:08,200
you need to attach the value and kind of

00:32:06,220 --> 00:32:10,210
like we created a distributed debugger

00:32:08,200 --> 00:32:12,399
so there is that squash no our to

00:32:10,210 --> 00:32:14,259
integrate with all this platform like a

00:32:12,399 --> 00:32:15,789
magic okay I mean you can look at the

00:32:14,259 --> 00:32:18,309
code but it's basically doing a lot of

00:32:15,789 --> 00:32:19,840
magic and on the other side is basically

00:32:18,309 --> 00:32:22,629
you can plug in whatever debugger you

00:32:19,840 --> 00:32:26,649
want so we're using right now gdb and

00:32:22,629 --> 00:32:28,720
dlv but you can have your favorite and

00:32:26,649 --> 00:32:31,240
because we're using the debuggers you

00:32:28,720 --> 00:32:33,669
can actually attach it to getting for

00:32:31,240 --> 00:32:35,799
free supports for every idea that you

00:32:33,669 --> 00:32:37,950
want and what you're basically doing is

00:32:35,799 --> 00:32:40,450
looking at the code putting a breakpoint

00:32:37,950 --> 00:32:42,460
deploying hit of Cloud Foundry and then

00:32:40,450 --> 00:32:44,169
you actually can debug it you know you

00:32:42,460 --> 00:32:45,610
the breakpoint is kind of forgetting you

00:32:44,169 --> 00:32:48,730
see all the stock you see all the stock

00:32:45,610 --> 00:32:50,440
of all the application basically so it's

00:32:48,730 --> 00:32:55,119
a microservices debugger which I feel

00:32:50,440 --> 00:32:57,220
will be very very useful okay thank you

00:32:55,119 --> 00:32:59,889
let's see if there's like one question

00:32:57,220 --> 00:33:01,480
that's from you from anybody else just

00:32:59,889 --> 00:33:04,179
to give a chance if somebody has a

00:33:01,480 --> 00:33:05,830
burning question no I just wanted to say

00:33:04,179 --> 00:33:07,690
that also unique is going to support a

00:33:05,830 --> 00:33:08,860
Knox kit because in the end of the day

00:33:07,690 --> 00:33:11,320
we don't care if it's unique an

00:33:08,860 --> 00:33:13,690
operating system what we want to give is

00:33:11,320 --> 00:33:16,600
their developer the ability to build

00:33:13,690 --> 00:33:20,080
very easy their code inside operating

00:33:16,600 --> 00:33:24,990
system I'm do support Linux team is

00:33:20,080 --> 00:33:27,730
there a project page for unique itself

00:33:24,990 --> 00:33:29,580
so I mean what I wanted to show you is

00:33:27,730 --> 00:33:33,399
that it's actually a very very popular

00:33:29,580 --> 00:33:37,389
project you thinking about uniquely

00:33:33,399 --> 00:33:42,460
you're talking about both ok so we show

00:33:37,389 --> 00:33:45,220
you so so so squash one sec so unique

00:33:42,460 --> 00:33:47,730
itself a very very popular project that

00:33:45,220 --> 00:33:50,350
it's already exist on a the Gita and

00:33:47,730 --> 00:33:52,029
does you see people are storing it

00:33:50,350 --> 00:33:53,259
people are watching it the graph is

00:33:52,029 --> 00:33:55,960
going like if you're looking at the

00:33:53,259 --> 00:33:57,429
traffic people are cloning it people are

00:33:55,960 --> 00:33:59,799
walking it it's actually very very

00:33:57,429 --> 00:34:02,370
popular project so I would suggest you

00:33:59,799 --> 00:34:06,520
to look at it and squash itself

00:34:02,370 --> 00:34:09,580
once again it's not an open-source

00:34:06,520 --> 00:34:14,320
project until the opening to pick me but

00:34:09,580 --> 00:34:18,310
I will open it probably beginning of

00:34:14,320 --> 00:34:20,169
next week but it will be open so you

00:34:18,310 --> 00:34:23,500
will be able to go there go to the pack

00:34:20,169 --> 00:34:24,909
head go to the platform for instance

00:34:23,500 --> 00:34:27,159
look at Cloud Foundry and see the

00:34:24,909 --> 00:34:29,320
integration there and so on coupang that

00:34:27,159 --> 00:34:31,510
is for instance we use the kree we also

00:34:29,320 --> 00:34:33,820
doing some magic there with the fact

00:34:31,510 --> 00:34:35,500
that we wanted to be able to debug your

00:34:33,820 --> 00:34:37,540
micro service from the beginning

00:34:35,500 --> 00:34:39,970
so we're basically using exactly

00:34:37,540 --> 00:34:42,310
basically deploying the file we call it

00:34:39,970 --> 00:34:43,750
up that basically is the process and

00:34:42,310 --> 00:34:46,750
then when it's attached to the debugger

00:34:43,750 --> 00:34:50,169
we we we switch the process so basically

00:34:46,750 --> 00:34:52,419
we using exact function okay thank you

00:34:50,169 --> 00:34:55,389
thank you so maybe here as if you want

00:34:52,419 --> 00:34:57,000
to start setting up the one thing I will

00:34:55,389 --> 00:35:00,760
say is I mean first thing is thank you a

00:34:57,000 --> 00:35:03,970
great presentation I I really like I

00:35:00,760 --> 00:35:05,380
mean one of my goal and you know if you

00:35:03,970 --> 00:35:08,950
have feedback on this that you know is

00:35:05,380 --> 00:35:10,900
to question assumptions you know when

00:35:08,950 --> 00:35:13,000
you look at cloud foundry it's great but

00:35:10,900 --> 00:35:15,190
where are we making assumptions that we

00:35:13,000 --> 00:35:17,650
can question and I think idiot is

00:35:15,190 --> 00:35:20,380
essentially doing that and usually huge

00:35:17,650 --> 00:35:21,850
advancement for science in general has

00:35:20,380 --> 00:35:24,670
been that I mean if you look at any

00:35:21,850 --> 00:35:26,619
questions sunshine about Newton and he

00:35:24,670 --> 00:35:28,630
made you jealous I'm not comparing it to

00:35:26,619 --> 00:35:31,180
this but come you know questioning

00:35:28,630 --> 00:35:33,100
assumption is extremely important so

00:35:31,180 --> 00:35:35,080
thinking you did for doing this okay so

00:35:33,100 --> 00:35:38,710
if there is you can take it now you have

00:35:35,080 --> 00:35:47,859
15 minutes you have to share your screen

00:35:38,710 --> 00:35:49,690
oh well thank you so I'll give you a

00:35:47,859 --> 00:35:52,210
five minutes check and in a one minute

00:35:49,690 --> 00:35:53,619
check so when you see me raising those

00:35:52,210 --> 00:35:55,720
little pink cards that's what it is okay

00:35:53,619 --> 00:35:57,670
we can see your screen so go ahead to

00:35:55,720 --> 00:36:00,340
rest please oh yeah hi thanks everybody

00:35:57,670 --> 00:36:02,080
I'm a product manager at pivotal I'd

00:36:00,340 --> 00:36:02,650
like to talk to you about Bosch backup

00:36:02,080 --> 00:36:05,350
and restore

00:36:02,650 --> 00:36:07,270
so backup addressed its backup and

00:36:05,350 --> 00:36:10,300
restore for Bosch deployments and

00:36:07,270 --> 00:36:14,410
Forbush directors and the way it works

00:36:10,300 --> 00:36:15,700
is that Bosch the bbr America VR defines

00:36:14,410 --> 00:36:20,260
a contract with release

00:36:15,700 --> 00:36:22,720
authors the binary bbr orchestrates the

00:36:20,260 --> 00:36:27,520
backup and the release authors implement

00:36:22,720 --> 00:36:30,910
backup and restore so it's a new model

00:36:27,520 --> 00:36:34,089
for us of how about how backup and

00:36:30,910 --> 00:36:35,950
restore works in that responsibility for

00:36:34,089 --> 00:36:39,369
writing and maintaining the scripts it's

00:36:35,950 --> 00:36:41,770
with the release author so that means

00:36:39,369 --> 00:36:43,599
that the scripts are the backup and

00:36:41,770 --> 00:36:46,089
restore functionality is tightly bound

00:36:43,599 --> 00:36:51,309
with the release so it doesn't get out

00:36:46,089 --> 00:36:54,270
of sync and then if need be the release

00:36:51,309 --> 00:36:58,569
author can do things to make their

00:36:54,270 --> 00:37:01,000
release more backup able so it sets out

00:36:58,569 --> 00:37:04,150
a contract with release authors to call

00:37:01,000 --> 00:37:06,460
specific scripts in a specific order so

00:37:04,150 --> 00:37:08,440
it will call lock first then it will

00:37:06,460 --> 00:37:11,589
call backup and then it will call unlock

00:37:08,440 --> 00:37:14,380
and there the binary itself bbr will

00:37:11,589 --> 00:37:21,549
call the scripts and move the backup

00:37:14,380 --> 00:37:24,549
artifacts so here is a sample deployment

00:37:21,549 --> 00:37:26,819
with a sample flow so EPR sits on a jump

00:37:24,549 --> 00:37:31,390
box the operator types B be our backup

00:37:26,819 --> 00:37:34,059
deployment B be our will SSH into the

00:37:31,390 --> 00:37:36,910
deployment identify what scripts are

00:37:34,059 --> 00:37:39,339
implemented on what job and then it will

00:37:36,910 --> 00:37:43,089
call all of the scripts of a particular

00:37:39,339 --> 00:37:45,400
type across all of it all of the jobs so

00:37:43,089 --> 00:37:47,770
it will call pre backup block across all

00:37:45,400 --> 00:37:49,599
of the jobs before it calls back up and

00:37:47,770 --> 00:37:51,760
then it will call backup across all of

00:37:49,599 --> 00:37:54,970
the jobs and then it will call post

00:37:51,760 --> 00:37:57,190
backup unlock and then after that the

00:37:54,970 --> 00:37:59,920
scripts are called it will then transfer

00:37:57,190 --> 00:38:02,890
artifacts from the deployment back to

00:37:59,920 --> 00:38:07,270
the jump box and then it's the operators

00:38:02,890 --> 00:38:09,430
responsibility to manage those artifacts

00:38:07,270 --> 00:38:12,880
and also to do things like scheduling

00:38:09,430 --> 00:38:18,040
and in encrypting artifacts and things

00:38:12,880 --> 00:38:20,290
like that so I suppose the the point of

00:38:18,040 --> 00:38:25,650
this is that the thing that we are doing

00:38:20,290 --> 00:38:28,869
we are taking care of the very center of

00:38:25,650 --> 00:38:31,269
backup and restore so we're not looking

00:38:28,869 --> 00:38:35,019
at moving artifacts around managing

00:38:31,269 --> 00:38:42,759
artifacts doing scheduling you know

00:38:35,019 --> 00:38:46,630
there's no UX beside the the CLI so here

00:38:42,759 --> 00:38:50,049
is an example of how it would look like

00:38:46,630 --> 00:38:52,539
to back up Cloud Foundry so you call

00:38:50,049 --> 00:38:55,180
backup on the director and Cloud Foundry

00:38:52,539 --> 00:38:59,529
and then it does this is just a more

00:38:55,180 --> 00:39:02,619
specific version of that other diagram

00:38:59,529 --> 00:39:04,599
so you can see that what we're what

00:39:02,619 --> 00:39:07,920
we're do what we'll do first is with it

00:39:04,599 --> 00:39:10,749
we'll take down the Cloud Foundry API

00:39:07,920 --> 00:39:13,359
within the pre backup lock script so

00:39:10,749 --> 00:39:16,779
that we don't mutate state during the

00:39:13,359 --> 00:39:19,930
backup then we will call a backup of the

00:39:16,779 --> 00:39:24,099
Boche of Bosh which will backup Postgres

00:39:19,930 --> 00:39:26,229
and the blobstore ua a cred hub my

00:39:24,099 --> 00:39:29,890
sequel and the blobstore

00:39:26,229 --> 00:39:32,619
in cloud foundry and then we will call

00:39:29,890 --> 00:39:34,329
unlock and then after that all the

00:39:32,619 --> 00:39:36,670
artifacts will get transferred from the

00:39:34,329 --> 00:39:39,999
deployments to the jump box so it's a

00:39:36,670 --> 00:39:45,670
way to take consistent backups of a

00:39:39,999 --> 00:39:48,450
distributed system so next up we would

00:39:45,670 --> 00:39:51,099
we'd like to open source the framework

00:39:48,450 --> 00:39:53,469
we want to work with release authors to

00:39:51,099 --> 00:39:57,099
increase adoption so talking to them

00:39:53,469 --> 00:39:59,529
about how the contract works so because

00:39:57,099 --> 00:40:01,839
obviously the scripts have to be part of

00:39:59,529 --> 00:40:04,660
a release in order for bbr to work

00:40:01,839 --> 00:40:07,479
against a release we're looking at

00:40:04,660 --> 00:40:11,109
optimizations like calling although the

00:40:07,479 --> 00:40:13,589
backup scripts in parallel other other

00:40:11,109 --> 00:40:16,960
improved communication orchestration

00:40:13,589 --> 00:40:19,690
looking at providing bbr as a library or

00:40:16,960 --> 00:40:22,900
an API and then looking at things like

00:40:19,690 --> 00:40:25,469
pluggable artifact destinations like s3

00:40:22,900 --> 00:40:25,469
for example

00:40:25,839 --> 00:40:32,229
um so I should which shall I give you a

00:40:28,900 --> 00:40:34,329
demo now yes you have five minutes so

00:40:32,229 --> 00:40:37,959
you can you can use part of it for demo

00:40:34,329 --> 00:40:40,299
if you wanted yeah sure all right if you

00:40:37,959 --> 00:40:41,829
guys have question get ready we'll try

00:40:40,299 --> 00:40:45,009
to have a couple minutes for questions

00:40:41,829 --> 00:40:47,289
to hang I say I'm alright it's gonna

00:40:45,009 --> 00:40:55,839
take me yeah we still see your screen so

00:40:47,289 --> 00:41:02,319
yeah now I've completely lost I'm stuck

00:40:55,839 --> 00:41:05,910
actually all right now I'm really

00:41:02,319 --> 00:41:05,910
completely stuck I don't know how to do

00:41:07,349 --> 00:41:12,189
you wanna just the questions that what

00:41:09,759 --> 00:41:14,949
maybe sure I'll take questions sorry

00:41:12,189 --> 00:41:16,569
yeah so any questions I have one

00:41:14,949 --> 00:41:19,569
question but let me see if there's you

00:41:16,569 --> 00:41:22,660
have you accounted for whether the

00:41:19,569 --> 00:41:26,589
release takes care of the storage and

00:41:22,660 --> 00:41:32,049
they can signal this fact to the VBR

00:41:26,589 --> 00:41:35,319
subsystem yeah so it could be that the

00:41:32,049 --> 00:41:39,519
like you took meant like an external s3

00:41:35,319 --> 00:41:40,959
for example for example maybe it stores

00:41:39,519 --> 00:41:42,759
it in the other and you have no idea

00:41:40,959 --> 00:41:44,920
where it is but it stored it and it's

00:41:42,759 --> 00:41:48,069
taking care of it and VBR is just saying

00:41:44,920 --> 00:41:50,529
backup restore yeah you so you could

00:41:48,069 --> 00:41:54,489
that's that works so the backup script

00:41:50,529 --> 00:41:56,529
could perform the external backup

00:41:54,489 --> 00:41:59,439
written return success and then on

00:41:56,529 --> 00:42:02,380
restore it would know how to retrieve

00:41:59,439 --> 00:42:04,859
that data and put it back that's that's

00:42:02,380 --> 00:42:04,859
not a problem

00:42:07,469 --> 00:42:12,880
are there more questions I cannot figure

00:42:09,910 --> 00:42:15,959
out how to um yeah I don't know worry

00:42:12,880 --> 00:42:18,429
about it I mean we I mean I know this

00:42:15,959 --> 00:42:19,900
virus releases of incidentally

00:42:18,429 --> 00:42:24,029
integrating support for this so this is

00:42:19,900 --> 00:42:28,359
this is real we know that store a backup

00:42:24,029 --> 00:42:31,029
backup restore your desktop so what

00:42:28,359 --> 00:42:36,579
question for you the res is as part of

00:42:31,029 --> 00:42:39,740
this flow I imagine that there are do

00:42:36,579 --> 00:42:42,440
you imagine if I have five different

00:42:39,740 --> 00:42:45,230
is including the director of course and

00:42:42,440 --> 00:42:48,110
so on that they'll be those backups so

00:42:45,230 --> 00:42:50,630
happening in parallel and you will

00:42:48,110 --> 00:42:52,580
orchestrate you know essentially getting

00:42:50,630 --> 00:42:55,130
a snapshot for the entire platform or

00:42:52,580 --> 00:42:58,760
you see it as your backup we store each

00:42:55,130 --> 00:43:00,710
one independently and they they they are

00:42:58,760 --> 00:43:03,290
sort of separated so the director is

00:43:00,710 --> 00:43:05,450
separate from my you know release and if

00:43:03,290 --> 00:43:07,640
I have all the releases everything is

00:43:05,450 --> 00:43:09,440
completely separated it's one comment

00:43:07,640 --> 00:43:12,080
for each or is there like an

00:43:09,440 --> 00:43:15,200
orchestration for the whole thing so it

00:43:12,080 --> 00:43:19,400
you can do you can backup all the things

00:43:15,200 --> 00:43:21,200
at once so you can for example backup

00:43:19,400 --> 00:43:25,190
cloud foundry and bashed at the same

00:43:21,200 --> 00:43:28,400
time by going be be our backup CAF

00:43:25,190 --> 00:43:30,619
comment director it depends on how

00:43:28,400 --> 00:43:35,090
sensitive you are to downtime because

00:43:30,619 --> 00:43:37,340
when you lock when you call lock for a

00:43:35,090 --> 00:43:40,340
cloud foundry it takes down the Cloud

00:43:37,340 --> 00:43:42,140
Foundry API so if you have a long period

00:43:40,340 --> 00:43:44,330
where you need if you're very sensitive

00:43:42,140 --> 00:43:46,430
to engineers not being able to see

00:43:44,330 --> 00:43:48,859
f.push then you might not want to do

00:43:46,430 --> 00:43:50,570
that but it's completely possible and we

00:43:48,859 --> 00:43:54,170
will but but the other point is that we

00:43:50,570 --> 00:43:57,280
will be looking at optimizations to make

00:43:54,170 --> 00:44:00,260
backups absolutely as quick as possible

00:43:57,280 --> 00:44:03,290
so you know even things like dis

00:44:00,260 --> 00:44:05,320
snapshotting so that the downtime is

00:44:03,290 --> 00:44:05,320
minimized

00:44:09,430 --> 00:44:21,500
that would be like online like I'm sorry

00:44:16,790 --> 00:44:23,810
say that again actually like there's

00:44:21,500 --> 00:44:25,460
mics equal or Postgres or like online

00:44:23,810 --> 00:44:31,460
backup so that you can take the backup

00:44:25,460 --> 00:44:34,010
without taking on the API yes the issue

00:44:31,460 --> 00:44:36,440
is consistency so so in my sequel you

00:44:34,010 --> 00:44:38,780
can you don't have to call lock but if

00:44:36,440 --> 00:44:41,119
you want for example your service

00:44:38,780 --> 00:44:44,840
bindings for my sequel B my sequel to be

00:44:41,119 --> 00:44:46,730
consistent with what's in ccdb you have

00:44:44,840 --> 00:44:51,800
to lock the CF API while you're taking

00:44:46,730 --> 00:44:53,780
the my sequel backup I see I see a guy I

00:44:51,800 --> 00:44:56,870
guess I guess why I'm having a

00:44:53,780 --> 00:44:58,760
like it feels like the the feature

00:44:56,870 --> 00:45:02,450
that's hiding here is I want to be able

00:44:58,760 --> 00:45:03,770
to back up a cloud foundry ideally I

00:45:02,450 --> 00:45:04,880
want to back up a car foundry without

00:45:03,770 --> 00:45:06,860
taking offline

00:45:04,880 --> 00:45:08,660
it feels like one way of doing that is

00:45:06,860 --> 00:45:11,990
if I found Jupiter's transactional and

00:45:08,660 --> 00:45:14,540
how it wrote as the database and then

00:45:11,990 --> 00:45:17,030
you wouldn't need to take it out if you

00:45:14,540 --> 00:45:19,400
could just use you online backup that's

00:45:17,030 --> 00:45:22,220
true yeah no this is so this is like the

00:45:19,400 --> 00:45:25,930
first step and in the future we'd like

00:45:22,220 --> 00:45:29,750
to move possibly to backing up like

00:45:25,930 --> 00:45:33,440
exporting instead of backing up so maybe

00:45:29,750 --> 00:45:37,730
thinks it's like an event stream but for

00:45:33,440 --> 00:45:40,730
now this is this is where we are my

00:45:37,730 --> 00:45:44,240
impression is that what PBR does is

00:45:40,730 --> 00:45:47,090
gives the structure and then as 30 said

00:45:44,240 --> 00:45:48,740
'let's then up to the release author to

00:45:47,090 --> 00:45:52,630
decide which portions of that structure

00:45:48,740 --> 00:45:56,360
to use so it seems quite plausible that

00:45:52,630 --> 00:45:58,490
the teams working on the elements of

00:45:56,360 --> 00:46:02,150
cloud foundries that would be relevant

00:45:58,490 --> 00:46:06,230
might look at how they iterate what they

00:46:02,150 --> 00:46:09,680
store such that they use just the pieces

00:46:06,230 --> 00:46:10,450
of the vbr that they need that's exactly

00:46:09,680 --> 00:46:12,740
right

00:46:10,450 --> 00:46:13,160
okay thank you thank you for this

00:46:12,740 --> 00:46:16,310
question

00:46:13,160 --> 00:46:17,600
Logan and Jules thank you to rise for

00:46:16,310 --> 00:46:20,360
presenting appreciate that

00:46:17,600 --> 00:46:24,020
okay so last but not least first time

00:46:20,360 --> 00:46:27,500
joining us is Eric Johnson from Google

00:46:24,020 --> 00:46:29,180
and he's gonna be talking about kubu

00:46:27,500 --> 00:46:37,340
which is kind of an interesting project

00:46:29,180 --> 00:46:40,610
that marries fans here Eric take it away

00:46:37,340 --> 00:46:42,920
you yes

00:46:40,610 --> 00:46:49,760
okay you see if I can do the screen

00:46:42,920 --> 00:46:55,190
thing so Esther kuba kuba I don't have a

00:46:49,760 --> 00:46:56,180
demo that's great fine no it works okay

00:46:55,190 --> 00:46:59,390
so we can see your screen

00:46:56,180 --> 00:47:00,770
Eric great okay great so first of all I

00:46:59,390 --> 00:47:01,610
want to apologize that you have to

00:47:00,770 --> 00:47:04,040
listen to me

00:47:01,610 --> 00:47:06,590
alejandro couldn't make it today so I'm

00:47:04,040 --> 00:47:06,930
just kind of filling in for him but this

00:47:06,590 --> 00:47:09,800
is a

00:47:06,930 --> 00:47:13,710
joint project between Google and pivotal

00:47:09,800 --> 00:47:15,720
Constantine is also on the call he's

00:47:13,710 --> 00:47:18,390
been one of the core engineers he's the

00:47:15,720 --> 00:47:21,960
anchor on the project right now so kind

00:47:18,390 --> 00:47:23,130
of diving right in so consumers right

00:47:21,960 --> 00:47:25,380
they have a lot of choices out there

00:47:23,130 --> 00:47:28,920
right now for things like safe functions

00:47:25,380 --> 00:47:30,990
as this functions absent Rick system is

00:47:28,920 --> 00:47:34,530
like with Cloud Foundry container

00:47:30,990 --> 00:47:36,089
orchestrations like with kubernetes and

00:47:34,530 --> 00:47:37,170
then of course there's data services and

00:47:36,089 --> 00:47:39,990
a lot of this stuff sits on top of

00:47:37,170 --> 00:47:41,640
infrastructure and I'm assuming

00:47:39,990 --> 00:47:43,950
everybody here is very familiar with the

00:47:41,640 --> 00:47:46,020
concept of Bosh to manage your

00:47:43,950 --> 00:47:47,730
infrastructure does a great job

00:47:46,020 --> 00:47:50,220
obviously for a lot of different things

00:47:47,730 --> 00:47:52,980
out there including Cloud Foundry and so

00:47:50,220 --> 00:47:54,780
today the project du jour is to talk

00:47:52,980 --> 00:48:00,210
about how we can do that with kubernetes

00:47:54,780 --> 00:48:02,490
as well so I think infrastructure

00:48:00,210 --> 00:48:05,190
challenges with kubernetes so if anybody

00:48:02,490 --> 00:48:07,980
has player spent any time looking at

00:48:05,190 --> 00:48:12,089
kubernetes it solves a lot of problems

00:48:07,980 --> 00:48:15,119
in terms of managing applications does

00:48:12,089 --> 00:48:16,530
that a lot with docker docker images and

00:48:15,119 --> 00:48:18,240
it doesn't orchestrations of those

00:48:16,530 --> 00:48:19,170
workloads there's a lot of constructs in

00:48:18,240 --> 00:48:21,210
there if you played around with

00:48:19,170 --> 00:48:24,470
kubernetes to get kind of up to speed

00:48:21,210 --> 00:48:27,210
with in terms of being able to manage

00:48:24,470 --> 00:48:30,720
fault tolerant applications within the

00:48:27,210 --> 00:48:32,400
kubernetes cluster itself but kubernetes

00:48:30,720 --> 00:48:33,660
on its own doesn't really pay any

00:48:32,400 --> 00:48:36,900
attention to the infrastructure

00:48:33,660 --> 00:48:40,170
underneath it so while you may have an

00:48:36,900 --> 00:48:42,540
application that can handle some fault

00:48:40,170 --> 00:48:43,710
tolerance because of kubernetes if you

00:48:42,540 --> 00:48:45,290
were to lose say a virtual machine

00:48:43,710 --> 00:48:47,400
running on your cloud provider

00:48:45,290 --> 00:48:51,270
kubernetes does not take care of that

00:48:47,400 --> 00:48:53,010
for you out of the box so this is where

00:48:51,270 --> 00:48:55,319
we look at Bosch to kind of come in and

00:48:53,010 --> 00:48:59,339
solve some of these problems for us with

00:48:55,319 --> 00:49:00,660
for kubernetes so one of the things I

00:48:59,339 --> 00:49:02,849
think that we're looking at doing as far

00:49:00,660 --> 00:49:04,650
as where we want to take the project is

00:49:02,849 --> 00:49:07,520
provide a little bit more high

00:49:04,650 --> 00:49:10,319
availability of the kubernetes

00:49:07,520 --> 00:49:12,869
constructs the masters as well as the

00:49:10,319 --> 00:49:16,440
worker nodes and then the sed

00:49:12,869 --> 00:49:19,020
nodes that sit alongside that

00:49:16,440 --> 00:49:22,770
scaling is another where area where we

00:49:19,020 --> 00:49:24,270
can help kubernetes so a lot of times

00:49:22,770 --> 00:49:25,440
today I think if you're running

00:49:24,270 --> 00:49:28,109
kubernetes depending on the

00:49:25,440 --> 00:49:29,790
infrastructure provider you provision a

00:49:28,109 --> 00:49:32,609
cluster you define a certain set of

00:49:29,790 --> 00:49:35,430
nodes if you want to scale beyond those

00:49:32,609 --> 00:49:37,349
nodes you're kind of stuck so we can

00:49:35,430 --> 00:49:41,400
leverage the power of Bosch there as

00:49:37,349 --> 00:49:42,540
well to provide scaling of those for

00:49:41,400 --> 00:49:44,070
those of you are obviously very familiar

00:49:42,540 --> 00:49:46,140
with Bosch it already takes care of

00:49:44,070 --> 00:49:48,000
things like health checks with a

00:49:46,140 --> 00:49:52,170
resurrector so it can bring back nodes

00:49:48,000 --> 00:49:54,990
that fail and then obviously upgrades as

00:49:52,170 --> 00:49:56,430
well so Bosch is a great great tool for

00:49:54,990 --> 00:49:58,920
being able to do rolling updates across

00:49:56,430 --> 00:50:01,650
your infrastructure and so that's

00:49:58,920 --> 00:50:03,180
another area where we can where

00:50:01,650 --> 00:50:07,650
kubernetes will be able to benefit is

00:50:03,180 --> 00:50:10,380
through upgrades so I've just sort of

00:50:07,650 --> 00:50:13,260
evolution I think everybody is very

00:50:10,380 --> 00:50:16,200
familiar with Google's board at least

00:50:13,260 --> 00:50:20,010
conceptually how we run containers

00:50:16,200 --> 00:50:24,089
internally that was some of the concepts

00:50:20,010 --> 00:50:25,680
there were led into Bosch and then what

00:50:24,089 --> 00:50:31,099
we're doing now obviously with Bosch and

00:50:25,680 --> 00:50:31,099
kubernetes leading to the project takubo

00:50:31,310 --> 00:50:37,290
so we talked a little bit about this on

00:50:33,480 --> 00:50:40,170
a previous slide so Kubo today right

00:50:37,290 --> 00:50:42,720
it's a Bosch and the Kubo release will

00:50:40,170 --> 00:50:45,930
be a great way for installing kubernetes

00:50:42,720 --> 00:50:51,990
as well as managing the operation of the

00:50:45,930 --> 00:50:54,599
kubernetes cluster so like I was just

00:50:51,990 --> 00:50:56,670
saying day one activities right so how

00:50:54,599 --> 00:50:58,619
do you install Bosch or sorry how do you

00:50:56,670 --> 00:51:00,060
install kubernetes there's obviously

00:50:58,619 --> 00:51:00,599
many ways out there that you can do that

00:51:00,060 --> 00:51:02,819
today

00:51:00,599 --> 00:51:04,349
so Bosch will provide yet another way of

00:51:02,819 --> 00:51:06,270
installing kubernetes but I think that

00:51:04,349 --> 00:51:09,060
the most important part of this is

00:51:06,270 --> 00:51:10,380
obviously the day two activities so

00:51:09,060 --> 00:51:12,990
you've got your cluster up and running

00:51:10,380 --> 00:51:14,790
how do you manage the BMS how you scale

00:51:12,990 --> 00:51:17,550
how you do upgrades of kubernetes and

00:51:14,790 --> 00:51:19,680
then obviously adding capabilities for

00:51:17,550 --> 00:51:24,089
high availability high availability and

00:51:19,680 --> 00:51:27,599
multi AZ's when we originally started

00:51:24,089 --> 00:51:29,790
with the project with pivotal a lot of

00:51:27,599 --> 00:51:31,590
this was to make

00:51:29,790 --> 00:51:34,890
kubernetes available to clog battery

00:51:31,590 --> 00:51:37,410
applications so the evolution of the

00:51:34,890 --> 00:51:39,900
project I think when we started this was

00:51:37,410 --> 00:51:42,770
to obviously have a kubernetes cluster

00:51:39,900 --> 00:51:46,980
that was managed by Bosch

00:51:42,770 --> 00:51:48,870
but then sit kind of alongside of cloud

00:51:46,980 --> 00:51:52,530
foundry that's also managed by Bosch

00:51:48,870 --> 00:51:54,540
and so as applications would be set up

00:51:52,530 --> 00:51:57,480
in kubernetes we would propagate that

00:51:54,540 --> 00:52:01,650
information over to the Cloud Foundry

00:51:57,480 --> 00:52:04,440
system what we're looking at doing as

00:52:01,650 --> 00:52:07,170
far as the proposal to get into Cloud

00:52:04,440 --> 00:52:08,640
Foundry foundation is to kind of

00:52:07,170 --> 00:52:11,010
backpedal a little bit away from that

00:52:08,640 --> 00:52:12,780
coupling with Cloud Foundry and look at

00:52:11,010 --> 00:52:16,920
creating just the standalone Bosch

00:52:12,780 --> 00:52:19,740
release for kubernetes and then pivotal

00:52:16,920 --> 00:52:22,560
will be continuing to make that

00:52:19,740 --> 00:52:24,660
available as a product through an

00:52:22,560 --> 00:52:26,460
on-demand service broker that will still

00:52:24,660 --> 00:52:28,080
work well with Cloud Foundry but we'll

00:52:26,460 --> 00:52:34,260
be able to kind of have the best of both

00:52:28,080 --> 00:52:37,620
worlds there so roadmap it was just last

00:52:34,260 --> 00:52:39,690
week the team here at Google was meeting

00:52:37,620 --> 00:52:40,920
with the rest of the team in New York

00:52:39,690 --> 00:52:43,430
and we kind of talked about where we

00:52:40,920 --> 00:52:45,570
want to go with the project including

00:52:43,430 --> 00:52:48,390
making a little bit more open source

00:52:45,570 --> 00:52:50,760
friendly where the kubernetes community

00:52:48,390 --> 00:52:52,800
could become more involved in this as

00:52:50,760 --> 00:52:56,670
well as the Bosch and Cloud Foundry

00:52:52,800 --> 00:52:58,110
ecosystem so I think that where we're

00:52:56,670 --> 00:53:00,120
going to start focusing a lot of our

00:52:58,110 --> 00:53:01,980
efforts as far as the Bosch release

00:53:00,120 --> 00:53:04,910
codes would be for kubernetes parity

00:53:01,980 --> 00:53:07,980
that would be upstream support so the

00:53:04,910 --> 00:53:11,070
kind of the core part of the next phase

00:53:07,980 --> 00:53:12,930
of the project would be to make it easy

00:53:11,070 --> 00:53:14,460
for folks within the kubernetes

00:53:12,930 --> 00:53:17,970
community that want to get started with

00:53:14,460 --> 00:53:20,880
this to not require say a Cloud Foundry

00:53:17,970 --> 00:53:22,560
installation to be sitting nearby so

00:53:20,880 --> 00:53:26,010
we'll kind of D couple that and create a

00:53:22,560 --> 00:53:29,280
standalone Bosch release for kubernetes

00:53:26,010 --> 00:53:31,290
and support things like persistent

00:53:29,280 --> 00:53:35,820
volumes and other things like that that

00:53:31,290 --> 00:53:36,960
we haven't really tackled yet so we

00:53:35,820 --> 00:53:39,750
talked a little bit about that here in

00:53:36,960 --> 00:53:42,270
the slide networking persistence adding

00:53:39,750 --> 00:53:43,680
high availability support so multi

00:53:42,270 --> 00:53:45,869
master configurations

00:53:43,680 --> 00:53:47,880
for kubernetes sitting behind

00:53:45,869 --> 00:53:50,609
infrastructure load balancing or

00:53:47,880 --> 00:53:52,290
separate load balancers this is not

00:53:50,609 --> 00:53:54,690
something that kubernetes has out of the

00:53:52,290 --> 00:53:57,329
box but relies basically on the

00:53:54,690 --> 00:53:59,220
infrastructure configuration for

00:53:57,329 --> 00:54:01,680
kubernetes in terms of how to provide

00:53:59,220 --> 00:54:03,990
that load balance capability for multi

00:54:01,680 --> 00:54:08,329
masters and we can do a lot of that with

00:54:03,990 --> 00:54:11,010
Bosch sitting with the infrastructure

00:54:08,329 --> 00:54:14,700
we're also looking at where kubernetes

00:54:11,010 --> 00:54:16,349
is headed in general upstream one of the

00:54:14,700 --> 00:54:18,329
places that they're investigating is

00:54:16,349 --> 00:54:21,119
moving towards more of a self-hosted

00:54:18,329 --> 00:54:23,940
model so instead of having a separate

00:54:21,119 --> 00:54:25,530
@cd cluster on its own set of the ends

00:54:23,940 --> 00:54:29,700
they're actually looking at how do you

00:54:25,530 --> 00:54:31,410
bootstrap the sed capabilities inside of

00:54:29,700 --> 00:54:33,599
kubernetes and so kubernetes itself

00:54:31,410 --> 00:54:38,280
becomes the management platform for the

00:54:33,599 --> 00:54:39,869
SED cluster and so what we can do moving

00:54:38,280 --> 00:54:42,260
forward with the Bosch release is to

00:54:39,869 --> 00:54:44,400
start aligning in that direction as well

00:54:42,260 --> 00:54:45,990
and then of course you know we can rely

00:54:44,400 --> 00:54:48,450
on the fact that that box already

00:54:45,990 --> 00:54:50,220
supports multiple cloud providers I'm

00:54:48,450 --> 00:54:52,260
slightly biased towards Google but it's

00:54:50,220 --> 00:54:57,390
great to for customers to be able to

00:54:52,260 --> 00:54:59,730
have a multi-storey so here's a

00:54:57,390 --> 00:55:02,430
high-level architecture diagram for the

00:54:59,730 --> 00:55:04,260
standalone open source version this is

00:55:02,430 --> 00:55:07,140
where we're headed as far as the cloud

00:55:04,260 --> 00:55:08,490
foundry foundation CF experiment what we

00:55:07,140 --> 00:55:10,349
want to be able to do is obviously just

00:55:08,490 --> 00:55:12,990
have Bosch manage the kubernetes cluster

00:55:10,349 --> 00:55:16,380
and so the diagram shows you know the

00:55:12,990 --> 00:55:19,619
sed nodes multiple multiple multiple

00:55:16,380 --> 00:55:22,069
multiple masters as well as a set of

00:55:19,619 --> 00:55:22,069
workers

00:55:23,620 --> 00:55:28,430
the Kubo architecture with Cloud Foundry

00:55:26,450 --> 00:55:34,370
this is sort of where the project sits

00:55:28,430 --> 00:55:36,410
today so as services are brought up in

00:55:34,370 --> 00:55:38,540
kubernetes the team that worked on

00:55:36,410 --> 00:55:40,940
propagating that information over into

00:55:38,540 --> 00:55:44,360
cloud foundry as well so they're using

00:55:40,940 --> 00:55:46,040
route sync and an API route register

00:55:44,360 --> 00:55:46,700
that feeds that information over into

00:55:46,040 --> 00:55:49,700
Cloud Foundry

00:55:46,700 --> 00:55:51,560
and then through networking Cloud

00:55:49,700 --> 00:55:54,980
Foundry at or kubernetes apps are

00:55:51,560 --> 00:55:56,690
surfaced through Cloud Foundry so you're

00:55:54,980 --> 00:55:58,790
actually going through the go router to

00:55:56,690 --> 00:56:02,750
be able to talk over to the kubernetes

00:55:58,790 --> 00:56:05,180
cluster so with this new kind of

00:56:02,750 --> 00:56:07,730
direction of the project we'll have sort

00:56:05,180 --> 00:56:10,310
of the standalone bas-reliefs that will

00:56:07,730 --> 00:56:12,620
become an artifact for this product that

00:56:10,310 --> 00:56:14,690
coupe cloud foundry and pivotal will

00:56:12,620 --> 00:56:20,840
continue to develop with the on-demand

00:56:14,690 --> 00:56:24,470
service broker so question what does

00:56:20,840 --> 00:56:25,610
this mean to club hungry obviously so

00:56:24,470 --> 00:56:27,980
Cloud Foundry is a great place for

00:56:25,610 --> 00:56:31,180
running a lot of apps there are probably

00:56:27,980 --> 00:56:33,530
certain cases where you may have

00:56:31,180 --> 00:56:35,270
requirements for your applications where

00:56:33,530 --> 00:56:38,330
Cloud Foundry isn't necessarily a great

00:56:35,270 --> 00:56:40,250
fit kubernetes could be a solution for

00:56:38,330 --> 00:56:43,670
that so I think what this does is that

00:56:40,250 --> 00:56:45,590
this allows users to be able to look at

00:56:43,670 --> 00:56:47,240
kubernetes as a way of deploying some of

00:56:45,590 --> 00:56:49,310
their application workloads as well as

00:56:47,240 --> 00:56:50,450
on top of Cloud Foundry and then through

00:56:49,310 --> 00:56:52,850
the work that pivotal is going to

00:56:50,450 --> 00:56:55,730
continue doing be able to make those

00:56:52,850 --> 00:56:58,130
apps available to each other through

00:56:55,730 --> 00:57:00,860
probably even the open service broker

00:56:58,130 --> 00:57:02,870
API those are future forward-looking

00:57:00,860 --> 00:57:07,730
kind of places that we want to see the

00:57:02,870 --> 00:57:09,920
project go you ventually and so the

00:57:07,730 --> 00:57:11,930
pivotal of Google kind of partnership on

00:57:09,920 --> 00:57:14,300
this Google's been working closely with

00:57:11,930 --> 00:57:16,760
Cloud Foundry ecosystem over the last

00:57:14,300 --> 00:57:18,320
year I want to say to build out

00:57:16,760 --> 00:57:21,950
capabilities for running Cloud Foundry

00:57:18,320 --> 00:57:23,570
on top of GCP and have developed a good

00:57:21,950 --> 00:57:25,910
relationship with pivotal along the way

00:57:23,570 --> 00:57:27,320
and this is just sort of a natural

00:57:25,910 --> 00:57:29,900
extension of where we were going with

00:57:27,320 --> 00:57:33,050
the work and I think it's great for

00:57:29,900 --> 00:57:35,210
users to be able to access both

00:57:33,050 --> 00:57:36,079
kubernetes and Cloud Foundry through the

00:57:35,210 --> 00:57:38,539
infrastructure

00:57:36,079 --> 00:57:40,880
of choice which would be Bosch so we're

00:57:38,539 --> 00:57:44,269
really excited about the opportunity to

00:57:40,880 --> 00:57:45,679
work with pivotal on this and bring a

00:57:44,269 --> 00:57:47,569
little bit of that magic over into the

00:57:45,679 --> 00:57:50,299
kubernetes community too I think they'll

00:57:47,569 --> 00:57:53,359
be appreciative of Bosch as they get

00:57:50,299 --> 00:57:57,910
more exposure to this I think that's the

00:57:53,359 --> 00:58:02,719
last slide how could you take questions

00:57:57,910 --> 00:58:04,369
yeah excellent thank you Eric overview

00:58:02,719 --> 00:58:06,549
so we have about two minutes for

00:58:04,369 --> 00:58:08,929
questions anybody

00:58:06,549 --> 00:58:10,670
yeah well wondering what the function or

00:58:08,929 --> 00:58:12,219
what the role of power doing that's was

00:58:10,670 --> 00:58:14,359
in the current setup

00:58:12,219 --> 00:58:20,809
now can you repeat the question the role

00:58:14,359 --> 00:58:24,579
of white power DNS oh yeah so we're

00:58:20,809 --> 00:58:27,589
actually looking at using the new bosch

00:58:24,579 --> 00:58:30,170
DNS capabilities that was talked about

00:58:27,589 --> 00:58:32,900
actually earlier in this so we're not

00:58:30,170 --> 00:58:36,319
using a vanilla Bosch director currently

00:58:32,900 --> 00:58:38,150
we are looking at sort of somewhere the

00:58:36,319 --> 00:58:40,009
direction of wash director is going with

00:58:38,150 --> 00:58:41,689
things like red hub and pulling in the

00:58:40,009 --> 00:58:42,769
DIA that's capabilities into that so

00:58:41,689 --> 00:58:45,439
those would probably be things that

00:58:42,769 --> 00:58:51,339
we'll continue to leverage and not rely

00:58:45,439 --> 00:58:56,349
so much just on power DNS correct Thanks

00:58:51,339 --> 00:58:56,349
well any other questions

00:58:59,970 --> 00:59:05,910
nobody okay well thank you very much

00:59:02,610 --> 00:59:08,250
Eric and everybody for joining of course

00:59:05,910 --> 00:59:09,380
next month we have the summit so see you

00:59:08,250 --> 00:59:15,410
all there

00:59:09,380 --> 00:59:15,410

YouTube URL: https://www.youtube.com/watch?v=GVFHmlSsYFY


