Title: Cloud Foundry Community Advisory Board Call [February 2021]
Publication date: 2021-02-22
Playlist: Community Advisory Board
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:04,240
you want to record already recording

00:00:02,000 --> 00:00:06,319
great uh well welcome everybody to the

00:00:04,240 --> 00:00:08,480
february 16th

00:00:06,319 --> 00:00:10,639
cap call um i'm filling in for troy

00:00:08,480 --> 00:00:13,599
today um

00:00:10,639 --> 00:00:14,559
a couple of minor updates uh from the

00:00:13,599 --> 00:00:16,240
cff

00:00:14,559 --> 00:00:17,920
uh we've got a exciting hands-on lab

00:00:16,240 --> 00:00:20,880
next week um

00:00:17,920 --> 00:00:21,359
from stark and wayne um james hunt is

00:00:20,880 --> 00:00:24,560
gonna be

00:00:21,359 --> 00:00:26,480
leading us through uh how to how to

00:00:24,560 --> 00:00:28,320
cf protect and how to shield your data

00:00:26,480 --> 00:00:30,160
um i've already gone through that lab

00:00:28,320 --> 00:00:32,960
it's pretty pretty interesting so

00:00:30,160 --> 00:00:33,840
you can check that out next tuesday at

00:00:32,960 --> 00:00:36,399
10 a.m

00:00:33,840 --> 00:00:36,399
pacific

00:00:37,280 --> 00:00:40,879
there i don't have any real details to

00:00:38,879 --> 00:00:43,120
share but i will say that there is a

00:00:40,879 --> 00:00:44,239
tentative plans are shaping up for a

00:00:43,120 --> 00:00:47,280
virtual event

00:00:44,239 --> 00:00:48,399
sometime in june or july um have more

00:00:47,280 --> 00:00:50,480
details

00:00:48,399 --> 00:00:52,399
next month or the month after the latest

00:00:50,480 --> 00:00:55,680
but that that's

00:00:52,399 --> 00:00:57,280
dates are being floated around and um

00:00:55,680 --> 00:00:59,039
and yeah should have a little bit more

00:00:57,280 --> 00:00:59,840
information than that non-information i

00:00:59,039 --> 00:01:02,160
just gave you

00:00:59,840 --> 00:01:03,840
in another month or two um also the

00:01:02,160 --> 00:01:05,600
technical governance meetings um

00:01:03,840 --> 00:01:07,520
on friday mornings uh seem making pretty

00:01:05,600 --> 00:01:10,479
good progress that's in the uh

00:01:07,520 --> 00:01:13,840
github community github uh cloud foundry

00:01:10,479 --> 00:01:13,840
slash community uh

00:01:13,920 --> 00:01:17,520
if you wanna check into that a little

00:01:16,240 --> 00:01:19,040
bit um

00:01:17,520 --> 00:01:20,640
eric might also be able to add some

00:01:19,040 --> 00:01:23,439
context there um

00:01:20,640 --> 00:01:24,240
that's what i've got from cff and pmc

00:01:23,439 --> 00:01:26,640
updates

00:01:24,240 --> 00:01:27,759
um eric uh you have some app runtime

00:01:26,640 --> 00:01:29,280
updates for us

00:01:27,759 --> 00:01:31,759
yeah sure i've got a few highlights to

00:01:29,280 --> 00:01:33,520
share there uh so release integration uh

00:01:31,759 --> 00:01:35,040
continued with regular releases of cf

00:01:33,520 --> 00:01:37,360
deployment i know they

00:01:35,040 --> 00:01:38,159
had a bump to major version 16 uh

00:01:37,360 --> 00:01:40,320
because of uh

00:01:38,159 --> 00:01:42,720
interface change related to uh some stem

00:01:40,320 --> 00:01:44,720
cells stem cell specification

00:01:42,720 --> 00:01:45,759
uh on some of the add-ons and then

00:01:44,720 --> 00:01:47,840
they've also released

00:01:45,759 --> 00:01:50,159
a major version of cf for gates again

00:01:47,840 --> 00:01:53,119
because of a minor but breaking change

00:01:50,159 --> 00:01:54,399
in the interface there and qcf has also

00:01:53,119 --> 00:01:56,320
continued uh

00:01:54,399 --> 00:01:58,079
their regular releases i know i think

00:01:56,320 --> 00:02:01,920
their latest is 217.12

00:01:58,079 --> 00:02:04,560
with some bump dependencies and then um

00:02:01,920 --> 00:02:05,600
i know that uh clock controller team and

00:02:04,560 --> 00:02:08,000
services api

00:02:05,600 --> 00:02:08,879
uh have continued marching through those

00:02:08,000 --> 00:02:11,520
remaining

00:02:08,879 --> 00:02:13,120
b3 endpoints i think they might be done

00:02:11,520 --> 00:02:14,400
with services at this point but i don't

00:02:13,120 --> 00:02:15,760
want to make any promises without

00:02:14,400 --> 00:02:18,480
confirmation so

00:02:15,760 --> 00:02:18,480
maybe we can get a

00:02:19,120 --> 00:02:22,239
confirmation update from them uh pretty

00:02:21,120 --> 00:02:23,920
soon

00:02:22,239 --> 00:02:25,599
and then irene is doing a bunch of

00:02:23,920 --> 00:02:28,560
really interesting work um

00:02:25,599 --> 00:02:30,000
they've released another major version

00:02:28,560 --> 00:02:31,599
of their component release

00:02:30,000 --> 00:02:33,040
where they've moved entirely to config

00:02:31,599 --> 00:02:34,319
maps for configuration instead of

00:02:33,040 --> 00:02:36,400
templates

00:02:34,319 --> 00:02:38,160
so that's uh resolving any of the

00:02:36,400 --> 00:02:39,760
templating controversy that we've had

00:02:38,160 --> 00:02:41,519
at that component later they also did a

00:02:39,760 --> 00:02:43,519
little spike around

00:02:41,519 --> 00:02:44,720
um taking the existing cf build packs

00:02:43,519 --> 00:02:46,879
and shimming them in

00:02:44,720 --> 00:02:47,840
as cloud native build packs so that kpac

00:02:46,879 --> 00:02:49,840
could run them

00:02:47,840 --> 00:02:51,519
uh with fewer incompatibilities from the

00:02:49,840 --> 00:02:53,519
potato build packs

00:02:51,519 --> 00:02:54,720
and then they they also had an inception

00:02:53,519 --> 00:02:58,080
on the team

00:02:54,720 --> 00:02:59,760
and are looking at taking some of the

00:02:58,080 --> 00:03:02,400
initial work that they did

00:02:59,760 --> 00:03:05,280
with a crd representation of their

00:03:02,400 --> 00:03:08,640
long-running process

00:03:05,280 --> 00:03:10,400
entity and using that more consistently

00:03:08,640 --> 00:03:11,599
throughout the internal apis so i think

00:03:10,400 --> 00:03:11,920
they're planning to move forward with

00:03:11,599 --> 00:03:14,640
that

00:03:11,920 --> 00:03:14,640
in the next few weeks

00:03:15,120 --> 00:03:22,159
cool thank you um eric

00:03:18,800 --> 00:03:24,400
the question yeah what's the status on

00:03:22,159 --> 00:03:25,680
bionic stem cells becoming getting out

00:03:24,400 --> 00:03:27,280
of data

00:03:25,680 --> 00:03:29,519
um i know that there are some

00:03:27,280 --> 00:03:33,120
discussions that have been going on

00:03:29,519 --> 00:03:36,159
uh with uh with vmware and sap and ibm

00:03:33,120 --> 00:03:37,599
uh about uh getting that moving forward

00:03:36,159 --> 00:03:41,280
more definitively

00:03:37,599 --> 00:03:44,000
so um some of that is still in flux

00:03:41,280 --> 00:03:45,280
um but uh i think i think we'll be

00:03:44,000 --> 00:03:47,840
seeing more forward movement on that

00:03:45,280 --> 00:03:47,840
pretty soon

00:03:48,239 --> 00:03:53,439
eric i have one question um with v3 now

00:03:52,000 --> 00:03:55,360
basically finished will there be an

00:03:53,439 --> 00:03:59,200
announcement when the

00:03:55,360 --> 00:04:03,439
v2 clock start starting to tick

00:03:59,200 --> 00:04:05,360
i would expect an update on that yeah

00:04:03,439 --> 00:04:07,599
so i'll i'll confirm with the other

00:04:05,360 --> 00:04:10,159
folks that are deeper into the details

00:04:07,599 --> 00:04:10,159
okay thanks

00:04:13,200 --> 00:04:17,360
all right uh do we have anyone from the

00:04:14,720 --> 00:04:17,360
bosch pmc

00:04:19,199 --> 00:04:22,720
okay um i do know there was another

00:04:21,519 --> 00:04:25,759
there was a bosch release

00:04:22,720 --> 00:04:29,040
just a week ago uh 271.5

00:04:25,759 --> 00:04:31,280
um bosch is largely in maintenance uh

00:04:29,040 --> 00:04:33,360
but uh you know work is still being done

00:04:31,280 --> 00:04:35,919
um

00:04:33,360 --> 00:04:36,800
so leave it at that um anyone from

00:04:35,919 --> 00:04:40,840
extensions

00:04:36,800 --> 00:04:42,320
uh richard i see there any updates on

00:04:40,840 --> 00:04:45,120
stratos uh

00:04:42,320 --> 00:04:46,639
no i was just here to um to to witness

00:04:45,120 --> 00:04:47,919
basically stuff i think we

00:04:46,639 --> 00:04:50,560
should have a bit thin at the moment so

00:04:47,919 --> 00:04:53,680
um yeah all right no problem

00:04:50,560 --> 00:04:55,199
um all right um if there's

00:04:53,680 --> 00:04:57,280
any other agenda items people want to

00:04:55,199 --> 00:05:01,280
chat now would be the time we do have um

00:04:57,280 --> 00:05:04,800
guillain-barre from orange here to

00:05:01,280 --> 00:05:07,680
present a proposal uh on cf marketplace

00:05:04,800 --> 00:05:08,880
um so any other anything else anyone

00:05:07,680 --> 00:05:11,840
want to talk about before we

00:05:08,880 --> 00:05:11,840
jump into that

00:05:12,080 --> 00:05:15,600
okay uh guillaume take it away looking

00:05:14,160 --> 00:05:17,199
forward to this presentation uh it looks

00:05:15,600 --> 00:05:19,759
pretty interesting

00:05:17,199 --> 00:05:20,639
great thanks thanks for can you see my

00:05:19,759 --> 00:05:24,639
screen

00:05:20,639 --> 00:05:26,800
yes you should see slides yes

00:05:24,639 --> 00:05:27,680
um so yeah i was keen to share some of

00:05:26,800 --> 00:05:30,720
our work

00:05:27,680 --> 00:05:31,440
and uh yes or feeling that marketplace

00:05:30,720 --> 00:05:33,520
is still

00:05:31,440 --> 00:05:35,360
a key differentiator for cloud foundry

00:05:33,520 --> 00:05:38,880
and share some of our use cases

00:05:35,360 --> 00:05:40,720
around this and so i

00:05:38,880 --> 00:05:42,400
i split this presentation into three

00:05:40,720 --> 00:05:45,440
parts um

00:05:42,400 --> 00:05:47,199
maybe just a status about the usual

00:05:45,440 --> 00:05:50,240
primary use case

00:05:47,199 --> 00:05:51,840
for cloud foundry marketplace which is

00:05:50,240 --> 00:05:53,600
consuming manage manage service from

00:05:51,840 --> 00:05:56,639
application workloads

00:05:53,600 --> 00:05:57,280
and comparing making a status on their

00:05:56,639 --> 00:05:59,199
strength

00:05:57,280 --> 00:06:00,880
and limitation from my point of view and

00:05:59,199 --> 00:06:04,400
maybe looking at

00:06:00,880 --> 00:06:05,680
open source alternatives and a pvc i've

00:06:04,400 --> 00:06:08,880
been running on

00:06:05,680 --> 00:06:12,240
which is providing a web ui to consume

00:06:08,880 --> 00:06:14,639
osb marketplace from kubernetes

00:06:12,240 --> 00:06:16,639
wrapping osb as m charts so i'll be

00:06:14,639 --> 00:06:18,479
sharing some of these screenshots

00:06:16,639 --> 00:06:20,400
and in the second part i'd like to share

00:06:18,479 --> 00:06:21,680
some additional use cases that were

00:06:20,400 --> 00:06:23,600
valuable to range

00:06:21,680 --> 00:06:25,199
and like to hear whether they are also

00:06:23,600 --> 00:06:27,280
valuable to

00:06:25,199 --> 00:06:29,919
other enterprise in the cloud foundry

00:06:27,280 --> 00:06:32,800
community and in the market

00:06:29,919 --> 00:06:34,800
one is using cloud foundry to implement

00:06:32,800 --> 00:06:36,080
a way to share marketplace among

00:06:34,800 --> 00:06:39,520
multiple platforms

00:06:36,080 --> 00:06:42,160
that quite similar to the asap

00:06:39,520 --> 00:06:44,160
perry pre-service manager or to vmware

00:06:42,160 --> 00:06:46,080
ism independent service manager

00:06:44,160 --> 00:06:47,759
with a different approach and using

00:06:46,080 --> 00:06:49,360
cloud foundry for doing that most of the

00:06:47,759 --> 00:06:51,680
platform record system

00:06:49,360 --> 00:06:53,599
and another use case is to use cloud

00:06:51,680 --> 00:06:56,720
foundry as a

00:06:53,599 --> 00:06:57,199
unified onboarding tool so this is more

00:06:56,720 --> 00:06:59,520
of

00:06:57,199 --> 00:07:01,120
out and screenshots for now and not yet

00:06:59,520 --> 00:07:02,000
implementation but i'm looking forward

00:07:01,120 --> 00:07:05,360
to

00:07:02,000 --> 00:07:05,919
touring feedback and um and and whether

00:07:05,360 --> 00:07:08,960
that's a

00:07:05,919 --> 00:07:11,360
fits similar needs and the conclusion

00:07:08,960 --> 00:07:12,000
discussion i'd like to to to have with

00:07:11,360 --> 00:07:14,639
you guys

00:07:12,000 --> 00:07:16,880
um is um how is the cloud foundry

00:07:14,639 --> 00:07:21,520
marketplace going

00:07:16,880 --> 00:07:24,720
in terms of new features how can this be

00:07:21,520 --> 00:07:30,000
fueled by serving enterprise

00:07:24,720 --> 00:07:32,400
use cases in this conclusion

00:07:30,000 --> 00:07:33,919
so let's start with the the first part

00:07:32,400 --> 00:07:36,720
um

00:07:33,919 --> 00:07:38,240
and so yes for the primary use case of

00:07:36,720 --> 00:07:39,280
consuming manage service for map

00:07:38,240 --> 00:07:41,919
workloads

00:07:39,280 --> 00:07:44,160
um just to remind us for us of the

00:07:41,919 --> 00:07:46,080
different use case that

00:07:44,160 --> 00:07:48,800
different steps in the user experience

00:07:46,080 --> 00:07:51,360
so discovering discovering offers

00:07:48,800 --> 00:07:53,199
service definition the service plan and

00:07:51,360 --> 00:07:55,759
their metadata such as costs

00:07:53,199 --> 00:07:57,680
support rails and so forth and as well

00:07:55,759 --> 00:07:59,520
managing service plan visibility within

00:07:57,680 --> 00:08:02,160
orgs

00:07:59,520 --> 00:08:03,520
and then provision the service usually

00:08:02,160 --> 00:08:06,639
with params

00:08:03,520 --> 00:08:08,960
being able to access a web dashboard

00:08:06,639 --> 00:08:09,840
for those managed service using single

00:08:08,960 --> 00:08:13,360
sign-on

00:08:09,840 --> 00:08:16,720
and as well authorization

00:08:13,360 --> 00:08:17,919
uh using the uh deuteronization endpoint

00:08:16,720 --> 00:08:20,160
from a c api

00:08:17,919 --> 00:08:21,360
that provides a way for service provider

00:08:20,160 --> 00:08:23,599
to know whether

00:08:21,360 --> 00:08:25,520
the user has read or manage access to

00:08:23,599 --> 00:08:28,800
the service instance

00:08:25,520 --> 00:08:29,520
and that there's quotas managing quotas

00:08:28,800 --> 00:08:33,200
to this uh

00:08:29,520 --> 00:08:34,800
to provision to consume this service um

00:08:33,200 --> 00:08:37,440
the ability for the service user to

00:08:34,800 --> 00:08:39,599
upgrade a plan to do maintenance upgrade

00:08:37,440 --> 00:08:40,800
that we call maintenance info and to

00:08:39,599 --> 00:08:43,760
share service instance

00:08:40,800 --> 00:08:45,279
um within these platforms among multiple

00:08:43,760 --> 00:08:48,720
space

00:08:45,279 --> 00:08:50,880
and then there is bind to to access this

00:08:48,720 --> 00:08:52,880
the service instance by the by the

00:08:50,880 --> 00:08:53,279
application usually credential but there

00:08:52,880 --> 00:08:56,880
was

00:08:53,279 --> 00:08:59,839
root and this lock and by then provision

00:08:56,880 --> 00:09:01,040
and to me um the ux is just it's just

00:08:59,839 --> 00:09:03,120
great it's simple

00:09:01,040 --> 00:09:04,720
uh it's consistent across services and

00:09:03,120 --> 00:09:05,600
that made the great success within your

00:09:04,720 --> 00:09:07,760
range

00:09:05,600 --> 00:09:09,040
and and i think as well for in the

00:09:07,760 --> 00:09:12,399
community

00:09:09,040 --> 00:09:15,200
on the limitations um

00:09:12,399 --> 00:09:16,959
the things that are still waiting uh

00:09:15,200 --> 00:09:19,440
from my point of view

00:09:16,959 --> 00:09:21,680
the ability to send annotations that are

00:09:19,440 --> 00:09:25,040
set on crosstalk entities

00:09:21,680 --> 00:09:26,720
service instance bind apps space and

00:09:25,040 --> 00:09:27,279
orgs to service brokers so they can make

00:09:26,720 --> 00:09:30,000
useful

00:09:27,279 --> 00:09:30,640
stuff with those annotations a first

00:09:30,000 --> 00:09:34,839
class

00:09:30,640 --> 00:09:36,959
ux to consume service logs and service

00:09:34,839 --> 00:09:40,560
metrics

00:09:36,959 --> 00:09:42,320
also first class ux to perform backup

00:09:40,560 --> 00:09:45,600
and restore

00:09:42,320 --> 00:09:48,080
um being able to do service

00:09:45,600 --> 00:09:49,120
composition and that uh there are some

00:09:48,080 --> 00:09:51,600
aged cages

00:09:49,120 --> 00:09:52,720
and that that that do need this

00:09:51,600 --> 00:09:55,519
composition

00:09:52,720 --> 00:09:56,880
and maybe things like um being able to

00:09:55,519 --> 00:09:59,040
stop and start

00:09:56,880 --> 00:10:00,399
iber net and resume service especially

00:09:59,040 --> 00:10:02,800
for cost saving

00:10:00,399 --> 00:10:05,040
would be quite important but overall the

00:10:02,800 --> 00:10:07,839
primary use case i think for me is still

00:10:05,040 --> 00:10:09,760
very a very important strength to the

00:10:07,839 --> 00:10:12,000
platform ecosystem

00:10:09,760 --> 00:10:14,000
so what are the alternatives from my

00:10:12,000 --> 00:10:17,519
point of view

00:10:14,000 --> 00:10:20,880
in the open source community

00:10:17,519 --> 00:10:23,600
um the first one is a first class

00:10:20,880 --> 00:10:25,200
to be on a discussion resources uh with

00:10:23,600 --> 00:10:27,839
two type of packaging either

00:10:25,200 --> 00:10:28,560
operator styles packaging such as

00:10:27,839 --> 00:10:31,279
operator live

00:10:28,560 --> 00:10:33,120
my life cycle management or lm or maybe

00:10:31,279 --> 00:10:36,800
unsharp packaging

00:10:33,120 --> 00:10:38,880
another one might be tougher modules

00:10:36,800 --> 00:10:41,279
mileage service most managed service are

00:10:38,880 --> 00:10:42,399
include on public cloud after for

00:10:41,279 --> 00:10:45,200
modules

00:10:42,399 --> 00:10:46,079
and they can be maybe wrapped as a

00:10:45,200 --> 00:10:48,240
customer resource

00:10:46,079 --> 00:10:50,560
and there's an interesting project that

00:10:48,240 --> 00:10:54,800
that provides a terraform operator for

00:10:50,560 --> 00:10:57,920
hotel for modules and another one is

00:10:54,800 --> 00:11:00,640
consume service catalog consumed

00:10:57,920 --> 00:11:01,600
osb marketplace through kubernetes

00:11:00,640 --> 00:11:04,000
client

00:11:01,600 --> 00:11:04,640
kubernetes service catalog either

00:11:04,000 --> 00:11:08,079
through

00:11:04,640 --> 00:11:11,360
custom resource or it's

00:11:08,079 --> 00:11:15,200
hcli service catalog cli

00:11:11,360 --> 00:11:17,200
or web ui um so that's limitation as

00:11:15,200 --> 00:11:20,240
well and i'll get back in next slide

00:11:17,200 --> 00:11:20,880
and we we try to work on uh to find a

00:11:20,240 --> 00:11:23,600
web ui

00:11:20,880 --> 00:11:24,480
to to consume service catalog in the

00:11:23,600 --> 00:11:28,240
kubernetes

00:11:24,480 --> 00:11:31,040
ecosystem there used to be cube apps but

00:11:28,240 --> 00:11:32,720
it was removed and so we were missing we

00:11:31,040 --> 00:11:33,279
were discussing with the stratos team as

00:11:32,720 --> 00:11:36,720
well

00:11:33,279 --> 00:11:38,160
on the opportunity to provide one and so

00:11:36,720 --> 00:11:41,839
we experimented with

00:11:38,160 --> 00:11:43,519
generating m chart facade automatically

00:11:41,839 --> 00:11:44,800
for each service broker to consume so

00:11:43,519 --> 00:11:48,320
i'll be sharing some of this

00:11:44,800 --> 00:11:50,240
poc now

00:11:48,320 --> 00:11:51,600
so yeah the goal is to provide a web ux

00:11:50,240 --> 00:11:55,120
to consume

00:11:51,600 --> 00:11:57,440
the usb api offerings in kubernetes

00:11:55,120 --> 00:11:58,959
and the use case i've prototyped so far

00:11:57,440 --> 00:12:02,160
is discovery

00:11:58,959 --> 00:12:04,959
provisioning and

00:12:02,160 --> 00:12:05,600
i have still some some work done to be

00:12:04,959 --> 00:12:09,040
done with

00:12:05,600 --> 00:12:11,440
for binding and update

00:12:09,040 --> 00:12:12,240
and so discovery they would be learning

00:12:11,440 --> 00:12:15,279
more about

00:12:12,240 --> 00:12:17,600
the availability offers the metadata

00:12:15,279 --> 00:12:18,560
uh and the provisioning will will get

00:12:17,600 --> 00:12:22,639
completion

00:12:18,560 --> 00:12:24,560
um and for the available service plan

00:12:22,639 --> 00:12:25,839
uh completion and waveform for service

00:12:24,560 --> 00:12:27,600
parameters

00:12:25,839 --> 00:12:29,519
and as well a way to access dashboard

00:12:27,600 --> 00:12:32,160
urls

00:12:29,519 --> 00:12:34,320
um and so the way i've prototyped this

00:12:32,160 --> 00:12:38,079
so far is to

00:12:34,320 --> 00:12:40,560
to generate the same chart from the usb

00:12:38,079 --> 00:12:42,720
catalog dynamically

00:12:40,560 --> 00:12:44,880
and the generated n-sharp provision then

00:12:42,720 --> 00:12:46,880
service catalog custom resources service

00:12:44,880 --> 00:12:50,079
instance and service binding

00:12:46,880 --> 00:12:51,600
and will as well query the kubernetes

00:12:50,079 --> 00:12:54,240
inventory

00:12:51,600 --> 00:12:56,560
to look up the dashboards in the status

00:12:54,240 --> 00:12:58,480
of the service instance custom resource

00:12:56,560 --> 00:13:00,480
by the way those slides i shared those

00:12:58,480 --> 00:13:02,560
slides in the

00:13:00,480 --> 00:13:03,839
in the google talk of the cab if you

00:13:02,560 --> 00:13:06,880
want to have access to them

00:13:03,839 --> 00:13:10,160
and click

00:13:06,880 --> 00:13:11,040
on the different things so how does this

00:13:10,160 --> 00:13:14,079
look

00:13:11,040 --> 00:13:15,519
i made the experiment into ranger ui but

00:13:14,079 --> 00:13:17,760
they would work the same in any

00:13:15,519 --> 00:13:19,360
kubernetes ui that supports them shops

00:13:17,760 --> 00:13:22,560
such as cube apps and i think most of

00:13:19,360 --> 00:13:24,560
them do support twin charts

00:13:22,560 --> 00:13:26,320
so this is an example of our lab

00:13:24,560 --> 00:13:29,040
environment where i have

00:13:26,320 --> 00:13:30,320
a mix of fake brokers and real brokers

00:13:29,040 --> 00:13:31,920
but just to give an idea of the

00:13:30,320 --> 00:13:33,760
discovery ux

00:13:31,920 --> 00:13:35,600
so and i think on this one we don't have

00:13:33,760 --> 00:13:38,320
icons i have icons

00:13:35,600 --> 00:13:40,240
working with uh with another ui open

00:13:38,320 --> 00:13:43,680
shift i believe

00:13:40,240 --> 00:13:45,440
um so when we look at a an n chart

00:13:43,680 --> 00:13:46,720
this readme is automatically generated

00:13:45,440 --> 00:13:49,360
with the icon

00:13:46,720 --> 00:13:50,720
and the metadata from the osb cataloging

00:13:49,360 --> 00:13:53,519
points

00:13:50,720 --> 00:13:54,399
including the service plans the

00:13:53,519 --> 00:13:58,000
providers

00:13:54,399 --> 00:13:58,560
the support tutorials and the service

00:13:58,000 --> 00:14:01,040
plan

00:13:58,560 --> 00:14:02,959
is interesting to get the pricing which

00:14:01,040 --> 00:14:04,320
is available the additional details

00:14:02,959 --> 00:14:07,519
bullets

00:14:04,320 --> 00:14:08,560
and as well i mapped the maintenance

00:14:07,519 --> 00:14:13,920
info

00:14:08,560 --> 00:14:16,320
to the service plan as well to display

00:14:13,920 --> 00:14:16,959
and when the user has finished reading

00:14:16,320 --> 00:14:20,480
the readme

00:14:16,959 --> 00:14:22,639
it can go through the generated forms

00:14:20,480 --> 00:14:24,000
for selecting the values in the m chart

00:14:22,639 --> 00:14:25,680
and one is a service plan

00:14:24,000 --> 00:14:27,680
so you get prompt select one of the

00:14:25,680 --> 00:14:32,639
service plan available

00:14:27,680 --> 00:14:36,079
for this zsb service instance

00:14:32,639 --> 00:14:39,199
the readme points to full details and

00:14:36,079 --> 00:14:42,079
if there would be additional parameters

00:14:39,199 --> 00:14:43,040
the json schema available in the service

00:14:42,079 --> 00:14:46,240
in the

00:14:43,040 --> 00:14:47,600
catalog endpoint of osb would be used to

00:14:46,240 --> 00:14:49,760
generate forms as well

00:14:47,600 --> 00:14:51,440
to prompt the user to select um to to

00:14:49,760 --> 00:14:52,800
fill in the required service instance

00:14:51,440 --> 00:14:54,240
parameters

00:14:52,800 --> 00:14:56,320
and eventually there would be service

00:14:54,240 --> 00:14:59,040
binding in the same screen

00:14:56,320 --> 00:15:01,760
to allow the user to uh to create one or

00:14:59,040 --> 00:15:01,760
more bindings

00:15:01,839 --> 00:15:07,519
and once the m chart is created

00:15:04,959 --> 00:15:09,279
the release notes element there is no

00:15:07,519 --> 00:15:13,360
template of the m chart

00:15:09,279 --> 00:15:15,519
is querying the kubernetes inventory

00:15:13,360 --> 00:15:17,680
to find the service instance custom

00:15:15,519 --> 00:15:20,240
resource that was instantiated

00:15:17,680 --> 00:15:21,040
and to look up its status and this

00:15:20,240 --> 00:15:23,760
dashboard

00:15:21,040 --> 00:15:24,800
element in the status and so it displays

00:15:23,760 --> 00:15:29,360
the dashboard

00:15:24,800 --> 00:15:32,000
url there currently this requires

00:15:29,360 --> 00:15:33,759
at least in ranger and i need to check

00:15:32,000 --> 00:15:36,480
in the other uis

00:15:33,759 --> 00:15:38,800
this requires upgrading gm chart because

00:15:36,480 --> 00:15:41,920
the release note template is rendered

00:15:38,800 --> 00:15:44,880
at the installation time at that

00:15:41,920 --> 00:15:47,040
an installation time the service

00:15:44,880 --> 00:15:49,440
instance resource is not yet populated

00:15:47,040 --> 00:15:50,320
so the lookup into kubernetes

00:15:49,440 --> 00:15:53,360
inventories

00:15:50,320 --> 00:15:55,920
is still missing

00:15:53,360 --> 00:15:57,920
and so uh if we look at the resources

00:15:55,920 --> 00:16:00,480
that this m chart has instantiated

00:15:57,920 --> 00:16:01,839
uh it's just a service instance uh from

00:16:00,480 --> 00:16:03,519
service catalog

00:16:01,839 --> 00:16:06,639
and eventually there would be one or

00:16:03,519 --> 00:16:09,680
more service binding

00:16:06,639 --> 00:16:12,959
um so yeah we we plan to go deeper and

00:16:09,680 --> 00:16:15,360
to complete um our automation on this

00:16:12,959 --> 00:16:16,079
generation and yes we'd be happy to get

00:16:15,360 --> 00:16:18,399
feedback

00:16:16,079 --> 00:16:21,519
uh and suggestions on that on the repo

00:16:18,399 --> 00:16:24,480
or any question afterwards

00:16:21,519 --> 00:16:26,160
and so i tried um so getting back to

00:16:24,480 --> 00:16:28,399
comparison about alternatives i was

00:16:26,160 --> 00:16:30,000
listing different alternatives for

00:16:28,399 --> 00:16:31,839
uh to cloud foundry marketplace for

00:16:30,000 --> 00:16:34,720
different use cases so i

00:16:31,839 --> 00:16:36,000
i tried to think uh how do they compare

00:16:34,720 --> 00:16:39,279
really for different

00:16:36,000 --> 00:16:39,839
those different use cases and i won't go

00:16:39,279 --> 00:16:41,920
into

00:16:39,839 --> 00:16:45,519
each cell because it would take too long

00:16:41,920 --> 00:16:45,519
just to give an idea of a color map

00:16:45,839 --> 00:16:50,000
the cloud foundry marketplace is mostly

00:16:47,519 --> 00:16:52,560
green with i think great ux

00:16:50,000 --> 00:16:53,279
um for for all of the supported use

00:16:52,560 --> 00:16:54,639
cases

00:16:53,279 --> 00:16:57,519
there are some stuff that are not yet

00:16:54,639 --> 00:16:58,079
supported uh the concept of uh i was

00:16:57,519 --> 00:17:00,079
showing

00:16:58,079 --> 00:17:01,279
is uh using the service catalog custom

00:17:00,079 --> 00:17:04,799
resources

00:17:01,279 --> 00:17:08,240
using the help facade such as usb to

00:17:04,799 --> 00:17:09,120
helm poc i was showing with service

00:17:08,240 --> 00:17:11,439
catalog ui

00:17:09,120 --> 00:17:14,640
and you we see that i think there's many

00:17:11,439 --> 00:17:14,640
yellow and some red

00:17:14,880 --> 00:17:19,120
and the other approaches i think are

00:17:17,839 --> 00:17:22,959
okay for some

00:17:19,120 --> 00:17:25,360
and uh and are really good for

00:17:22,959 --> 00:17:26,240
some others such as service composition

00:17:25,360 --> 00:17:30,720
but have

00:17:26,240 --> 00:17:30,720
also as of also weaknesses for others

00:17:31,679 --> 00:17:34,799
so yeah my conclusion my personal

00:17:33,360 --> 00:17:36,799
feeling that yes cloud from the

00:17:34,799 --> 00:17:38,559
marketplace for its primary use case of

00:17:36,799 --> 00:17:40,080
consuming managed service

00:17:38,559 --> 00:17:42,320
from application workloads is still

00:17:40,080 --> 00:17:44,559
unrevolt um

00:17:42,320 --> 00:17:46,720
and i'd like to share with you beyond

00:17:44,559 --> 00:17:47,840
this primary use case i'd like to share

00:17:46,720 --> 00:17:49,760
some other

00:17:47,840 --> 00:17:50,960
use case that were valuable to ranch and

00:17:49,760 --> 00:17:54,320
i'd like to know whether they're

00:17:50,960 --> 00:17:56,640
valuable to the to the community

00:17:54,320 --> 00:17:57,360
and to the enterprise market so there's

00:17:56,640 --> 00:17:59,840
two of them

00:17:57,360 --> 00:18:03,120
i was mentioning sharing marketplace

00:17:59,840 --> 00:18:03,120
among multiple platforms

00:18:03,440 --> 00:18:08,640
so sharing a marketplace between

00:18:06,799 --> 00:18:10,559
different cloud foundry installations

00:18:08,640 --> 00:18:12,559
different kubernetes clusters

00:18:10,559 --> 00:18:15,440
potentially provision on demand

00:18:12,559 --> 00:18:15,919
and i estimate so we we worked on this

00:18:15,440 --> 00:18:18,559
um

00:18:15,919 --> 00:18:19,600
osb cmdb project which is similar in

00:18:18,559 --> 00:18:22,720
scope

00:18:19,600 --> 00:18:23,919
and then the asap periple service

00:18:22,720 --> 00:18:27,200
manager and um

00:18:23,919 --> 00:18:27,840
and vmware ism we you have a full slide

00:18:27,200 --> 00:18:30,320
back

00:18:27,840 --> 00:18:32,480
which i think is 50 slides over there

00:18:30,320 --> 00:18:34,880
which i was planning to

00:18:32,480 --> 00:18:37,039
trying to share at the last two platform

00:18:34,880 --> 00:18:38,640
resumes but my talk proposal were

00:18:37,039 --> 00:18:41,360
were not accepted unfortunately so i'll

00:18:38,640 --> 00:18:43,520
try again but basically the idea is to

00:18:41,360 --> 00:18:45,520
use cloud foundry as a database

00:18:43,520 --> 00:18:47,120
and a specialized database the database

00:18:45,520 --> 00:18:49,520
that manage

00:18:47,120 --> 00:18:50,400
service instance service binding and

00:18:49,520 --> 00:18:53,600
service offering

00:18:50,400 --> 00:18:54,320
so i'll detail that and the second use

00:18:53,600 --> 00:18:57,360
case

00:18:54,320 --> 00:18:58,080
is which is more faults it's not just a

00:18:57,360 --> 00:19:02,000
project

00:18:58,080 --> 00:19:04,880
um it's um it's it's using cloud foundry

00:19:02,000 --> 00:19:07,919
as an identity and access management

00:19:04,880 --> 00:19:10,880
um component of the shelf to support

00:19:07,919 --> 00:19:12,320
a use case that we have which is to to

00:19:10,880 --> 00:19:15,200
provide a unified onboarding

00:19:12,320 --> 00:19:16,640
for teams that need to access multiple

00:19:15,200 --> 00:19:19,280
cloud offerings

00:19:16,640 --> 00:19:22,000
and sometimes we have apps that needs

00:19:19,280 --> 00:19:26,080
not only cloud foundry but as well

00:19:22,000 --> 00:19:28,160
kubernetes and maybe is and some other

00:19:26,080 --> 00:19:29,520
platforms and instead of having them

00:19:28,160 --> 00:19:32,559
declare the members

00:19:29,520 --> 00:19:35,600
and do their onboarding again and again

00:19:32,559 --> 00:19:36,080
in in web uis that are costly to develop

00:19:35,600 --> 00:19:38,000
and

00:19:36,080 --> 00:19:39,600
maintain we are thinking maybe we can

00:19:38,000 --> 00:19:43,280
use cloud foundry for that

00:19:39,600 --> 00:19:43,840
and basically to map um cloud foundry im

00:19:43,280 --> 00:19:47,520
structure

00:19:43,840 --> 00:19:48,960
workspace with the members and services

00:19:47,520 --> 00:19:52,240
to map that

00:19:48,960 --> 00:19:55,440
into using apis

00:19:52,240 --> 00:19:57,840
uh in into onboardings um

00:19:55,440 --> 00:19:59,360
of uh kubernetes is offers and even

00:19:57,840 --> 00:20:01,120
cloud foundry

00:19:59,360 --> 00:20:02,880
so maybe let's start with the first one

00:20:01,120 --> 00:20:04,840
um the usb mdb

00:20:02,880 --> 00:20:06,799
uh sharing marketplace among multiple

00:20:04,840 --> 00:20:10,640
platforms

00:20:06,799 --> 00:20:12,799
um so it's it's a bit of a of a deja vu

00:20:10,640 --> 00:20:15,120
for people that know about periple

00:20:12,799 --> 00:20:16,080
and ism but i'll share that again maybe

00:20:15,120 --> 00:20:17,360
for those

00:20:16,080 --> 00:20:20,240
that do not know and there are some

00:20:17,360 --> 00:20:22,640
difference in terms of use cases as well

00:20:20,240 --> 00:20:23,520
so we have multiple we might we have a

00:20:22,640 --> 00:20:26,240
marketplace

00:20:23,520 --> 00:20:27,600
um which might be on-prem or maybe

00:20:26,240 --> 00:20:30,080
public

00:20:27,600 --> 00:20:31,679
and as we grow a number of platforms uh

00:20:30,080 --> 00:20:32,640
we could have multiple cloud-foundry

00:20:31,679 --> 00:20:35,919
platforms

00:20:32,640 --> 00:20:38,159
uh deployments maybe because of

00:20:35,919 --> 00:20:39,840
geography maybe because of security

00:20:38,159 --> 00:20:42,640
isolation of

00:20:39,840 --> 00:20:42,960
our legal restrictions as we grow number

00:20:42,640 --> 00:20:45,000
of

00:20:42,960 --> 00:20:46,320
platform rate foundations and

00:20:45,000 --> 00:20:49,760
recumbentless

00:20:46,320 --> 00:20:50,960
instances maybe on demands as well as is

00:20:49,760 --> 00:20:54,159
is tonight

00:20:50,960 --> 00:20:55,840
it's hard to keep a consistent um

00:20:54,159 --> 00:20:56,799
consumption by all those clients of the

00:20:55,840 --> 00:20:58,400
marketplace

00:20:56,799 --> 00:21:00,240
so we need some kind of international

00:20:58,400 --> 00:21:03,280
inventory and control in between

00:21:00,240 --> 00:21:06,559
that we can act upon so in in this next

00:21:03,280 --> 00:21:09,039
slide why why do we need an inventory

00:21:06,559 --> 00:21:09,760
um when we add a new service broker we

00:21:09,039 --> 00:21:12,559
want

00:21:09,760 --> 00:21:13,600
it to be consumable from all our client

00:21:12,559 --> 00:21:15,120
platforms

00:21:13,600 --> 00:21:17,679
so we need a consistent marketplace

00:21:15,120 --> 00:21:19,360
among those different platforms

00:21:17,679 --> 00:21:20,799
and from a service provider point of

00:21:19,360 --> 00:21:22,640
view

00:21:20,799 --> 00:21:24,640
as well we want to have a consistent and

00:21:22,640 --> 00:21:28,559
comprehensive view of consumption by

00:21:24,640 --> 00:21:30,559
all uh all the client platforms

00:21:28,559 --> 00:21:31,679
and more generally we want some kind of

00:21:30,559 --> 00:21:34,880
a

00:21:31,679 --> 00:21:36,080
command operability for all clients and

00:21:34,880 --> 00:21:39,440
brokers so

00:21:36,080 --> 00:21:41,360
we need a common inventory with the

00:21:39,440 --> 00:21:42,559
access be able to access the usage

00:21:41,360 --> 00:21:44,880
history

00:21:42,559 --> 00:21:47,760
we need to be able to trust um calls

00:21:44,880 --> 00:21:50,080
from client platforms

00:21:47,760 --> 00:21:51,520
from consumer users for apps and to

00:21:50,080 --> 00:21:53,440
store those metadata

00:21:51,520 --> 00:21:55,600
and avoid implementing this logic in

00:21:53,440 --> 00:21:58,799
each service broker

00:21:55,600 --> 00:22:02,559
to be able to log usb api calls received

00:21:58,799 --> 00:22:06,320
and in addition we need control um

00:22:02,559 --> 00:22:08,159
so one is to unify the usb calls

00:22:06,320 --> 00:22:09,600
received by service brokers from

00:22:08,159 --> 00:22:12,080
different platforms

00:22:09,600 --> 00:22:12,640
um there's different profile into the

00:22:12,080 --> 00:22:15,760
usb

00:22:12,640 --> 00:22:17,360
api and the cloudform repo file is this

00:22:15,760 --> 00:22:20,240
thing from kubernetes

00:22:17,360 --> 00:22:22,799
profile in particular the kubernetes has

00:22:20,240 --> 00:22:25,039
the specificity of um

00:22:22,799 --> 00:22:26,240
in its reconciliation loop

00:22:25,039 --> 00:22:28,000
implementation

00:22:26,240 --> 00:22:30,480
of applying an eventual consistency

00:22:28,000 --> 00:22:32,480
pattern which is uh costly to implement

00:22:30,480 --> 00:22:36,000
in service broker they need to handle

00:22:32,480 --> 00:22:37,840
concurrent calls um and determine

00:22:36,000 --> 00:22:39,200
which one has made has been remarried

00:22:37,840 --> 00:22:42,720
first so

00:22:39,200 --> 00:22:44,320
osb shield service broker authors

00:22:42,720 --> 00:22:46,240
from this implementation service broker

00:22:44,320 --> 00:22:49,440
office only received

00:22:46,240 --> 00:22:51,520
cloud foundry profile calls

00:22:49,440 --> 00:22:53,360
and the kubernetes forms would be

00:22:51,520 --> 00:22:56,320
automatically translated into

00:22:53,360 --> 00:22:56,320
croton recalls

00:22:57,039 --> 00:23:03,039
service providers need to control which

00:23:00,240 --> 00:23:04,559
client is consuming the service plan so

00:23:03,039 --> 00:23:06,640
the service plan visibility

00:23:04,559 --> 00:23:09,200
use case set limit and quotas when they

00:23:06,640 --> 00:23:12,320
run out of capacity for examples

00:23:09,200 --> 00:23:15,200
and this is as well a good a good area

00:23:12,320 --> 00:23:17,840
we think to implement future features

00:23:15,200 --> 00:23:21,120
that we are thinking of

00:23:17,840 --> 00:23:22,159
implemented and things like doing soft

00:23:21,120 --> 00:23:25,360
delete and undelete

00:23:22,159 --> 00:23:27,360
of service instance in central place

00:23:25,360 --> 00:23:28,400
and to do service instance and service

00:23:27,360 --> 00:23:30,720
binding sharing

00:23:28,400 --> 00:23:31,440
but between distant client platforms for

00:23:30,720 --> 00:23:34,720
example share

00:23:31,440 --> 00:23:36,400
kafka cluster between the kubernetes

00:23:34,720 --> 00:23:38,400
instance and a cloud foundry instance to

00:23:36,400 --> 00:23:40,880
be able to share messages

00:23:38,400 --> 00:23:43,679
um and potentially doing recharging as

00:23:40,880 --> 00:23:46,320
well and stuff like that

00:23:43,679 --> 00:23:47,679
so how does it look and what are the

00:23:46,320 --> 00:23:50,960
different factors that

00:23:47,679 --> 00:23:53,919
are supported into the system so

00:23:50,960 --> 00:23:55,679
we have a usual application developer

00:23:53,919 --> 00:23:57,279
that uses platform to host this

00:23:55,679 --> 00:23:59,360
application workload

00:23:57,279 --> 00:24:00,880
and use this native api and web uis to

00:23:59,360 --> 00:24:02,000
provision managed service no change for

00:24:00,880 --> 00:24:04,240
him

00:24:02,000 --> 00:24:05,039
we have service providers so service

00:24:04,240 --> 00:24:08,320
provider

00:24:05,039 --> 00:24:11,120
uh register into the central component

00:24:08,320 --> 00:24:12,880
their new broker they manage the service

00:24:11,120 --> 00:24:14,159
offering visibility they manage their

00:24:12,880 --> 00:24:16,480
quotas

00:24:14,159 --> 00:24:18,000
and they can as well look up the content

00:24:16,480 --> 00:24:19,600
of the inventory uh

00:24:18,000 --> 00:24:21,120
list service instance and service

00:24:19,600 --> 00:24:23,360
binding that were provisioned

00:24:21,120 --> 00:24:25,279
access the metadata to know which

00:24:23,360 --> 00:24:28,720
platform it was which client

00:24:25,279 --> 00:24:30,159
um which tenant it was within it

00:24:28,720 --> 00:24:32,159
it can be a namespace can be a

00:24:30,159 --> 00:24:35,600
platfordry or arkspace

00:24:32,159 --> 00:24:35,600
application instance id

00:24:36,400 --> 00:24:39,919
you might want to get analytics

00:24:38,000 --> 00:24:44,720
dashboards about consumption of its

00:24:39,919 --> 00:24:46,880
services maybe alerts if there is a

00:24:44,720 --> 00:24:48,080
loop an uncontrolled loop that created a

00:24:46,880 --> 00:24:51,760
thousand

00:24:48,080 --> 00:24:54,320
dedicated cluster in his um

00:24:51,760 --> 00:24:56,000
in a faulty ci cd and maybe as well

00:24:54,320 --> 00:24:58,159
receive alerts when there is something

00:24:56,000 --> 00:24:59,520
wrong happening so these central

00:24:58,159 --> 00:25:02,880
components come with its

00:24:59,520 --> 00:25:03,760
cli it's web ui it's analytics web ui

00:25:02,880 --> 00:25:06,080
it's

00:25:03,760 --> 00:25:07,440
monitoring analytics so a whole lot of

00:25:06,080 --> 00:25:10,080
ecosystem

00:25:07,440 --> 00:25:11,120
and basically it receive usb calls from

00:25:10,080 --> 00:25:12,960
client platforms

00:25:11,120 --> 00:25:14,559
and translate that into usb calls for

00:25:12,960 --> 00:25:16,559
brokers

00:25:14,559 --> 00:25:17,840
and it gets an inventory of everything

00:25:16,559 --> 00:25:19,679
that was provisioned

00:25:17,840 --> 00:25:21,440
and uh it might use this inventory to

00:25:19,679 --> 00:25:24,000
export it to corporate smdb

00:25:21,440 --> 00:25:24,799
or somewhere else and when we were

00:25:24,000 --> 00:25:28,320
thinking about

00:25:24,799 --> 00:25:31,279
implementing this because um

00:25:28,320 --> 00:25:31,840
perry play was not shooting on it um and

00:25:31,279 --> 00:25:33,760
i have

00:25:31,840 --> 00:25:36,320
an issue a public issue that describes a

00:25:33,760 --> 00:25:39,520
reason on the on page of the repo

00:25:36,320 --> 00:25:40,720
and the ism was made a close source um

00:25:39,520 --> 00:25:42,640
when we were considering how to

00:25:40,720 --> 00:25:45,840
implement we are thinking well

00:25:42,640 --> 00:25:48,320
do we start with just a plain database

00:25:45,840 --> 00:25:50,320
for managing service instance service

00:25:48,320 --> 00:25:53,600
binding service offering

00:25:50,320 --> 00:25:55,360
and we have to re-implement all this

00:25:53,600 --> 00:25:57,440
tooling ecosystem tooling

00:25:55,360 --> 00:25:58,720
or can we use a specialized database and

00:25:57,440 --> 00:26:00,240
we are thinking

00:25:58,720 --> 00:26:01,919
what cloud foundry is a specialized

00:26:00,240 --> 00:26:05,200
database it manages

00:26:01,919 --> 00:26:06,640
service instance service keys service

00:26:05,200 --> 00:26:09,200
offering and service plan can we just

00:26:06,640 --> 00:26:11,600
use cloud foundry as a database

00:26:09,200 --> 00:26:12,880
and then we will be able to use its

00:26:11,600 --> 00:26:16,640
tooling cli

00:26:12,880 --> 00:26:18,960
its web ui uh the existing analytics

00:26:16,640 --> 00:26:20,400
that we have database analytics for

00:26:18,960 --> 00:26:23,679
creating the cloud foundry

00:26:20,400 --> 00:26:25,919
content as well as the promoters

00:26:23,679 --> 00:26:27,840
exporters and the graphene dashboards

00:26:25,919 --> 00:26:29,279
for monitoring services can we use all

00:26:27,840 --> 00:26:30,960
this ecosystem

00:26:29,279 --> 00:26:34,320
to access the specialized database and

00:26:30,960 --> 00:26:36,559
maintain our inventory of services

00:26:34,320 --> 00:26:38,480
and so basically that's that's what we

00:26:36,559 --> 00:26:41,760
we do the um

00:26:38,480 --> 00:26:45,279
usb service broker translate

00:26:41,760 --> 00:26:48,400
usb calls into cloud foundry um

00:26:45,279 --> 00:26:51,679
service api calls from copy

00:26:48,400 --> 00:26:52,960
and then cloud foundry cloud controller

00:26:51,679 --> 00:26:54,960
translate those

00:26:52,960 --> 00:26:56,240
cappy calls into sb calls to service

00:26:54,960 --> 00:26:58,080
brokers

00:26:56,240 --> 00:27:00,080
so there's basically a thin layer of

00:26:58,080 --> 00:27:02,240
translation between

00:27:00,080 --> 00:27:05,200
usb calls and marketplace calls so let's

00:27:02,240 --> 00:27:07,039
look at that a bit more details

00:27:05,200 --> 00:27:10,000
when a client platform asks for the

00:27:07,039 --> 00:27:12,480
inventory the catalog endpoint

00:27:10,000 --> 00:27:13,360
the broker i just look up the

00:27:12,480 --> 00:27:15,520
marketplace

00:27:13,360 --> 00:27:17,200
uh into the inventory uh into the

00:27:15,520 --> 00:27:18,880
database into cloud foundry which was

00:27:17,200 --> 00:27:21,440
provisioned previously using the

00:27:18,880 --> 00:27:23,520
native platform resource cf create

00:27:21,440 --> 00:27:26,960
service broker

00:27:23,520 --> 00:27:27,760
when a user asked to provision a service

00:27:26,960 --> 00:27:30,640
instance

00:27:27,760 --> 00:27:33,039
the broker translate that into a space

00:27:30,640 --> 00:27:34,559
creation a dynamic display creation

00:27:33,039 --> 00:27:36,640
then the creation of a service instance

00:27:34,559 --> 00:27:38,240
and then it adds some metadata

00:27:36,640 --> 00:27:40,320
into the service instance to be able to

00:27:38,240 --> 00:27:43,520
track origin

00:27:40,320 --> 00:27:45,279
when the user asked to do a service

00:27:43,520 --> 00:27:47,120
binding to its platform which translate

00:27:45,279 --> 00:27:49,840
into this usb calls

00:27:47,120 --> 00:27:51,520
this is translating into the creation

00:27:49,840 --> 00:27:55,840
service key

00:27:51,520 --> 00:27:59,120
and so how does the cmdb looks like

00:27:55,840 --> 00:28:02,159
content we choose to have one org

00:27:59,120 --> 00:28:05,360
pair osb client so in the example i had

00:28:02,159 --> 00:28:06,960
two claim platforms cf1 cf2 and two

00:28:05,360 --> 00:28:08,240
kubernetes platforms so i would have

00:28:06,960 --> 00:28:09,919
four orgs

00:28:08,240 --> 00:28:12,880
in each org we have one space per

00:28:09,919 --> 00:28:15,600
service definition so in this example

00:28:12,880 --> 00:28:17,360
i have cassandra my sequel and this

00:28:15,600 --> 00:28:20,480
dummy space

00:28:17,360 --> 00:28:23,360
and then um for each uh

00:28:20,480 --> 00:28:24,799
service instance that are created by uh

00:28:23,360 --> 00:28:27,120
requested by user

00:28:24,799 --> 00:28:28,799
we have a that we call broker service

00:28:27,120 --> 00:28:29,600
instance we have a backing service

00:28:28,799 --> 00:28:32,399
instance

00:28:29,600 --> 00:28:34,240
there and then for each service key one

00:28:32,399 --> 00:28:37,520
for each service binding requested by

00:28:34,240 --> 00:28:37,520
the user we have a service key

00:28:38,080 --> 00:28:42,240
um so yeah there's more details in the

00:28:40,799 --> 00:28:46,799
slide deck of the

00:28:42,240 --> 00:28:50,960
using of the community ecosystem

00:28:46,799 --> 00:28:52,240
so stratos to to look at the content of

00:28:50,960 --> 00:28:55,760
the inventory

00:28:52,240 --> 00:28:59,840
and the promoters dashboards

00:28:55,760 --> 00:28:59,840
graphene dashboards to to look at

00:28:59,919 --> 00:29:05,600
the rate of consumption of marketplace

00:29:03,600 --> 00:29:07,440
alerts when a service instance is

00:29:05,600 --> 00:29:11,360
failing ccli

00:29:07,440 --> 00:29:13,440
and cli script to to do some analytics

00:29:11,360 --> 00:29:16,480
on the content of the database so

00:29:13,440 --> 00:29:19,760
there's more detail in the flow deck

00:29:16,480 --> 00:29:21,279
and our map is public and as well we

00:29:19,760 --> 00:29:25,200
were wondering whether there

00:29:21,279 --> 00:29:28,080
is interest in the community that

00:29:25,200 --> 00:29:29,039
this project gets incubating into the ph

00:29:28,080 --> 00:29:32,640
and

00:29:29,039 --> 00:29:35,200
the extension pmc so we

00:29:32,640 --> 00:29:36,799
we are happy to uh to move out the repo

00:29:35,200 --> 00:29:39,279
if it makes sense and if there is

00:29:36,799 --> 00:29:39,279
interest

00:29:39,360 --> 00:29:47,600
um and uh so i'd like to go to

00:29:43,520 --> 00:29:49,760
now uh to go to second part

00:29:47,600 --> 00:29:53,120
uh beyond the primary use case of

00:29:49,760 --> 00:29:53,120
consuming managed service

00:29:53,200 --> 00:29:59,679
by my application workloads

00:29:57,279 --> 00:30:02,240
it was the case of going through unified

00:29:59,679 --> 00:30:02,240
onboarding

00:30:04,880 --> 00:30:11,200
so in this other usage

00:30:08,399 --> 00:30:12,240
of um a secondary usage of cloud foundry

00:30:11,200 --> 00:30:15,840
we use

00:30:12,240 --> 00:30:19,279
cloud foundry as an ia and so

00:30:15,840 --> 00:30:20,240
this is an overview of how the user

00:30:19,279 --> 00:30:22,799
experience

00:30:20,240 --> 00:30:24,159
for projects that need to consume

00:30:22,799 --> 00:30:26,880
multiple platforms

00:30:24,159 --> 00:30:29,120
maybe uh to onboard on different cloud

00:30:26,880 --> 00:30:31,279
foundry platform deployments

00:30:29,120 --> 00:30:32,559
and maybe as well on kubernetes because

00:30:31,279 --> 00:30:35,840
the application

00:30:32,559 --> 00:30:37,520
is not eligible only uh on the on cloud

00:30:35,840 --> 00:30:41,039
foundry it needs to you need

00:30:37,520 --> 00:30:42,960
some kubernetes

00:30:41,039 --> 00:30:44,799
support as well maybe some is support as

00:30:42,960 --> 00:30:46,880
well we have some applications that

00:30:44,799 --> 00:30:47,840
that need multiple platforms to fulfill

00:30:46,880 --> 00:30:51,679
that

00:30:47,840 --> 00:30:53,279
diverse needs and they don't want to

00:30:51,679 --> 00:30:55,840
to declare their numbers into each

00:30:53,279 --> 00:30:58,960
platform and to do their onboarding

00:30:55,840 --> 00:31:00,240
multiple times so in this scenario they

00:30:58,960 --> 00:31:03,120
would

00:31:00,240 --> 00:31:04,480
create a project declare their members

00:31:03,120 --> 00:31:07,600
and then the

00:31:04,480 --> 00:31:09,840
project members would be automatically

00:31:07,600 --> 00:31:11,360
available when they ask for platform

00:31:09,840 --> 00:31:14,159
movement

00:31:11,360 --> 00:31:15,519
of kubernetes cloud foundry or is when

00:31:14,159 --> 00:31:16,960
they create a platform tenant

00:31:15,519 --> 00:31:19,120
the project members will be

00:31:16,960 --> 00:31:21,039
automatically created and updated

00:31:19,120 --> 00:31:23,760
and then from each platform they can

00:31:21,039 --> 00:31:26,720
consume the marketplace

00:31:23,760 --> 00:31:29,279
as they usually do still having the

00:31:26,720 --> 00:31:31,440
centralized cmdb

00:31:29,279 --> 00:31:33,200
keeping an inventory so those platform

00:31:31,440 --> 00:31:33,840
can be public or private we keep a

00:31:33,200 --> 00:31:37,120
central

00:31:33,840 --> 00:31:38,799
unified inventory of our all project

00:31:37,120 --> 00:31:40,159
subscription to platforms

00:31:38,799 --> 00:31:42,799
and as well are all project

00:31:40,159 --> 00:31:43,360
subscriptions to service provider being

00:31:42,799 --> 00:31:46,960
public

00:31:43,360 --> 00:31:50,240
or private so let's look at how

00:31:46,960 --> 00:31:52,880
how this um how this would appear

00:31:50,240 --> 00:31:55,200
uh using uh stratos and stratos in cloud

00:31:52,880 --> 00:31:59,420
foundry community um

00:31:55,200 --> 00:32:01,440
project so the project manager

00:31:59,420 --> 00:32:03,600
[Music]

00:32:01,440 --> 00:32:05,600
arrives on stratos and discovers an

00:32:03,600 --> 00:32:08,240
onboarding offers

00:32:05,600 --> 00:32:09,919
to decline its project and his members

00:32:08,240 --> 00:32:13,440
and there's multiple plans

00:32:09,919 --> 00:32:16,640
in this onboarding office it can declare

00:32:13,440 --> 00:32:19,679
that you just want to do a self training

00:32:16,640 --> 00:32:21,279
and a self training is maybe limited to

00:32:19,679 --> 00:32:24,320
a single user

00:32:21,279 --> 00:32:27,200
it has limited quota

00:32:24,320 --> 00:32:28,559
i can declare an experiment if he's

00:32:27,200 --> 00:32:29,279
declaring an experiment then he can

00:32:28,559 --> 00:32:32,159
invite

00:32:29,279 --> 00:32:33,440
uh teammates to share his clocks of

00:32:32,159 --> 00:32:37,360
script

00:32:33,440 --> 00:32:39,120
or it can declare a real project and so

00:32:37,360 --> 00:32:40,559
in this case this is subject to internal

00:32:39,120 --> 00:32:42,080
recharging you need to provide a

00:32:40,559 --> 00:32:45,200
recharging code

00:32:42,080 --> 00:32:48,799
then there's maybe unlimited number of

00:32:45,200 --> 00:32:52,320
of members and there is

00:32:48,799 --> 00:32:55,519
maybe the default

00:32:52,320 --> 00:32:59,679
pattern of separating fraud

00:32:55,519 --> 00:33:02,240
non-profit they have mqa members

00:32:59,679 --> 00:33:04,080
and maybe even might think of having

00:33:02,240 --> 00:33:06,960
different

00:33:04,080 --> 00:33:08,399
leases duration leases for subscription

00:33:06,960 --> 00:33:10,720
we see the pattern that

00:33:08,399 --> 00:33:12,720
many times people on board for

00:33:10,720 --> 00:33:14,880
experiment of self training but forget

00:33:12,720 --> 00:33:18,720
to close those resources and so these

00:33:14,880 --> 00:33:18,720
resources end up consuming a lot of

00:33:20,080 --> 00:33:23,600
physical physical compute resources and

00:33:22,880 --> 00:33:27,039
this

00:33:23,600 --> 00:33:29,679
create environmental issues

00:33:27,039 --> 00:33:31,279
and financial costs so adding automated

00:33:29,679 --> 00:33:34,880
lists for the different project would be

00:33:31,279 --> 00:33:38,399
would be nice as well so

00:33:34,880 --> 00:33:40,880
the user end up into an org

00:33:38,399 --> 00:33:42,399
so let's use cloud foundry thinking can

00:33:40,880 --> 00:33:45,679
we use cloud foundry

00:33:42,399 --> 00:33:47,519
im as a way to declass this project and

00:33:45,679 --> 00:33:48,640
so the project manager or the project

00:33:47,519 --> 00:33:52,240
members

00:33:48,640 --> 00:33:55,760
adapts into a default arc of a space

00:33:52,240 --> 00:33:57,519
by its name that's my internal name

00:33:55,760 --> 00:33:59,919
and then it choose which plan so in this

00:33:57,519 --> 00:34:01,919
case declares an official project

00:33:59,919 --> 00:34:03,679
the name of each project and potentially

00:34:01,919 --> 00:34:06,720
service parameters such as recharging

00:34:03,679 --> 00:34:08,159
codes and other stuff

00:34:06,720 --> 00:34:09,440
and so that's the service instance in

00:34:08,159 --> 00:34:10,639
the marketplace so that's the way

00:34:09,440 --> 00:34:15,520
declared this project

00:34:10,639 --> 00:34:15,520
so the dashboard brings the user to

00:34:16,399 --> 00:34:22,800
to the org created had

00:34:19,599 --> 00:34:25,280
selected that's a real project so

00:34:22,800 --> 00:34:26,079
it has created the service instance has

00:34:25,280 --> 00:34:29,760
created

00:34:26,079 --> 00:34:30,399
into a cloud foundry an org and multiple

00:34:29,760 --> 00:34:33,599
space

00:34:30,399 --> 00:34:35,440
one space for development teams

00:34:33,599 --> 00:34:37,599
another space for qa and also space for

00:34:35,440 --> 00:34:40,560
prod and

00:34:37,599 --> 00:34:42,879
using cloud foundry ui using stratos he

00:34:40,560 --> 00:34:44,480
would then add users

00:34:42,879 --> 00:34:48,399
its project members to the different

00:34:44,480 --> 00:34:50,240
space and basically provision the aim

00:34:48,399 --> 00:34:51,599
so in this case i think it's adding

00:34:50,240 --> 00:34:54,480
appear and

00:34:51,599 --> 00:34:55,599
gear to those different space with

00:34:54,480 --> 00:34:59,280
different roles

00:34:55,599 --> 00:34:59,280
being developers auditor manager

00:35:00,480 --> 00:35:05,280
and so it might as well choose in

00:35:03,280 --> 00:35:07,040
addition to the official project

00:35:05,280 --> 00:35:08,800
to work on an experiment so we create a

00:35:07,040 --> 00:35:10,560
second uh

00:35:08,800 --> 00:35:12,640
service instance for an experiment he's

00:35:10,560 --> 00:35:16,480
working on as a side project

00:35:12,640 --> 00:35:19,040
and maybe another one for self training

00:35:16,480 --> 00:35:20,000
so basically the yeah using the

00:35:19,040 --> 00:35:23,520
marketplace

00:35:20,000 --> 00:35:24,960
uh provision provision into into cloud

00:35:23,520 --> 00:35:27,599
foundry

00:35:24,960 --> 00:35:29,599
uh the different uh elements that are

00:35:27,599 --> 00:35:33,599
then used to

00:35:29,599 --> 00:35:34,240
to onboard users so we've seen the first

00:35:33,599 --> 00:35:37,280
part

00:35:34,240 --> 00:35:41,200
creation of project setup on members

00:35:37,280 --> 00:35:43,920
now we look at how to how to create

00:35:41,200 --> 00:35:44,560
platforms into the different tenants so

00:35:43,920 --> 00:35:47,359
the user

00:35:44,560 --> 00:35:48,880
um needs now to provision the cloud from

00:35:47,359 --> 00:35:52,079
retirement on organo space

00:35:48,880 --> 00:35:55,119
or provision a kubernetes settlement

00:35:52,079 --> 00:35:55,680
might be on-prem or public uh or closer

00:35:55,119 --> 00:35:59,520
or

00:35:55,680 --> 00:36:02,640
last term so how does it look

00:35:59,520 --> 00:36:06,240
um so within its uh

00:36:02,640 --> 00:36:08,640
organ space any space member can now

00:36:06,240 --> 00:36:09,680
have access to a list of services

00:36:08,640 --> 00:36:11,280
service offerings

00:36:09,680 --> 00:36:13,680
which corresponds to the different

00:36:11,280 --> 00:36:17,680
service cloud service offerings

00:36:13,680 --> 00:36:18,400
so in this case we have a cloud foundry

00:36:17,680 --> 00:36:20,960
organization

00:36:18,400 --> 00:36:23,839
that's our internal name for cloud

00:36:20,960 --> 00:36:23,839
foundry instances

00:36:24,880 --> 00:36:30,240
in this example that's a

00:36:28,000 --> 00:36:32,240
kubernetes student a namespace and we

00:36:30,240 --> 00:36:35,119
have

00:36:32,240 --> 00:36:37,760
is as well so let's take the example of

00:36:35,119 --> 00:36:39,839
a cloudfund retirement

00:36:37,760 --> 00:36:42,480
in our case we have multiple cloud

00:36:39,839 --> 00:36:46,800
foundry deployments one player az

00:36:42,480 --> 00:36:49,920
for specific reasons internal reasons

00:36:46,800 --> 00:36:50,640
and the user can choose to onboard on

00:36:49,920 --> 00:36:54,640
1az

00:36:50,640 --> 00:36:57,440
2az or multiple easy already available

00:36:54,640 --> 00:36:58,560
and then it choose for which team this

00:36:57,440 --> 00:37:01,040
subscription is for

00:36:58,560 --> 00:37:01,920
for the dev team create team or pro team

00:37:01,040 --> 00:37:03,440
so in which

00:37:01,920 --> 00:37:05,359
in which space if he's a member of all

00:37:03,440 --> 00:37:09,520
of them

00:37:05,359 --> 00:37:13,119
and enter so the service broker

00:37:09,520 --> 00:37:15,760
that supports this service offering

00:37:13,119 --> 00:37:17,920
would provision into cloud foundry and

00:37:15,760 --> 00:37:21,040
the proper org

00:37:17,920 --> 00:37:23,599
and and the the user

00:37:21,040 --> 00:37:25,760
associated to that so the way we're

00:37:23,599 --> 00:37:28,800
thinking of implementing this

00:37:25,760 --> 00:37:30,800
is using the uh cloud service broker

00:37:28,800 --> 00:37:32,960
which was contributed by google and is

00:37:30,800 --> 00:37:34,400
now maintained by uh by vmware and the

00:37:32,960 --> 00:37:35,440
cloud from the community and which is

00:37:34,400 --> 00:37:37,839
awesome

00:37:35,440 --> 00:37:38,960
and to use the clothing ray uh telephone

00:37:37,839 --> 00:37:42,320
provider as well i

00:37:38,960 --> 00:37:42,800
provide some details so the way it would

00:37:42,320 --> 00:37:46,160
work

00:37:42,800 --> 00:37:48,880
is that the service broker would look up

00:37:46,160 --> 00:37:50,000
uh where it was called from and look up

00:37:48,880 --> 00:37:53,520
the tip numbers

00:37:50,000 --> 00:37:56,880
um into the the calling space

00:37:53,520 --> 00:38:00,160
and provision those users uh

00:37:56,880 --> 00:38:01,520
into the created.org and so the

00:38:00,160 --> 00:38:04,240
dashboard brings to

00:38:01,520 --> 00:38:05,520
the cloud buffering our case or cloud

00:38:04,240 --> 00:38:08,640
foundry

00:38:05,520 --> 00:38:10,160
instance and the member provisions can

00:38:08,640 --> 00:38:12,720
log in using sso

00:38:10,160 --> 00:38:15,119
and i've already held their their rules

00:38:12,720 --> 00:38:15,119
aside

00:38:16,839 --> 00:38:22,960
um so that's an example of multiple

00:38:19,920 --> 00:38:25,119
uh subscription made

00:38:22,960 --> 00:38:26,480
so user they provision multiple platform

00:38:25,119 --> 00:38:28,800
resubscription

00:38:26,480 --> 00:38:30,640
multiple kubernetes subscription and

00:38:28,800 --> 00:38:33,839
they can log into each one into a

00:38:30,640 --> 00:38:33,839
central space

00:38:35,680 --> 00:38:41,760
so that was the part about oddboarding

00:38:39,520 --> 00:38:42,960
and then once they're on board from each

00:38:41,760 --> 00:38:44,400
platform they can consume the

00:38:42,960 --> 00:38:48,079
marketplace

00:38:44,400 --> 00:38:49,520
using their native platform ui

00:38:48,079 --> 00:38:51,520
so cloud foundry marketplace for

00:38:49,520 --> 00:38:54,480
cluttery and service catalog

00:38:51,520 --> 00:38:56,480
for example into kubernetes still

00:38:54,480 --> 00:39:01,839
keeping a centralized

00:38:56,480 --> 00:39:01,839
inventory and control for all activities

00:39:02,640 --> 00:39:10,240
um so the way

00:39:05,680 --> 00:39:10,240
i'm continuing uh how to implement this

00:39:10,960 --> 00:39:14,560
so on the left we have the opposition

00:39:13,280 --> 00:39:17,119
platforms

00:39:14,560 --> 00:39:19,520
um so it might be um cloud foundry

00:39:17,119 --> 00:39:22,240
kubernetes or is

00:39:19,520 --> 00:39:23,040
uh so let's that's easy for for cloud

00:39:22,240 --> 00:39:24,720
foundry

00:39:23,040 --> 00:39:27,520
they consume the marketplace from from

00:39:24,720 --> 00:39:32,079
stratos or from

00:39:27,520 --> 00:39:35,520
the ui and then cloud foundry has a

00:39:32,079 --> 00:39:37,470
nosb client which goes to the ocmdb

00:39:35,520 --> 00:39:38,800
and then from this

00:39:37,470 --> 00:39:41,920
[Music]

00:39:38,800 --> 00:39:44,079
they can consume service broker for data

00:39:41,920 --> 00:39:47,440
services

00:39:44,079 --> 00:39:50,560
um so we see similar

00:39:47,440 --> 00:39:52,720
ways for kubernetes i was mentioning

00:39:50,560 --> 00:39:56,560
with between

00:39:52,720 --> 00:40:00,340
so the uncharted ui for for sb

00:39:56,560 --> 00:40:02,560
we're working for is as well

00:40:00,340 --> 00:40:06,079
[Music]

00:40:02,560 --> 00:40:07,599
some of our team use vmware realized

00:40:06,079 --> 00:40:09,680
automation theory some other user

00:40:07,599 --> 00:40:10,960
openstack reasons

00:40:09,680 --> 00:40:12,960
are considering for example using

00:40:10,960 --> 00:40:15,359
stratos ui

00:40:12,960 --> 00:40:18,160
for having them consuming the cloud

00:40:15,359 --> 00:40:20,000
foundry marketplace

00:40:18,160 --> 00:40:21,839
we are also considering generating

00:40:20,000 --> 00:40:25,520
automatically

00:40:21,839 --> 00:40:29,280
in the same way that osb2m vr tiles

00:40:25,520 --> 00:40:31,680
and maybe always open stack horizon ui

00:40:29,280 --> 00:40:32,319
for having native marketplace

00:40:31,680 --> 00:40:37,280
consumption

00:40:32,319 --> 00:40:40,400
into uh into v-ray and to into openstack

00:40:37,280 --> 00:40:42,240
for the first on-boarding case um

00:40:40,400 --> 00:40:45,200
that was showing creating level project

00:40:42,240 --> 00:40:48,079
and then onboarding platforms

00:40:45,200 --> 00:40:50,160
um the user would end up into stratos

00:40:48,079 --> 00:40:52,560
discover service offering

00:40:50,160 --> 00:40:53,440
and this service offering would be

00:40:52,560 --> 00:40:56,560
supported

00:40:53,440 --> 00:40:58,640
by the different on on service

00:40:56,560 --> 00:41:00,880
on onboard service onboarding service

00:40:58,640 --> 00:41:02,640
broker sorry

00:41:00,880 --> 00:41:04,640
and so we are considering using the

00:41:02,640 --> 00:41:06,079
cloud service broker with the telephone

00:41:04,640 --> 00:41:08,960
service provider

00:41:06,079 --> 00:41:10,640
and um the cloud service broker supports

00:41:08,960 --> 00:41:12,960
this concept of broker pack that's the

00:41:10,640 --> 00:41:14,880
name for calling terraform modules

00:41:12,960 --> 00:41:16,240
and so basically there was one module

00:41:14,880 --> 00:41:19,599
that would instantiate

00:41:16,240 --> 00:41:21,119
an org and a dev qa and plot space

00:41:19,599 --> 00:41:23,839
in the example for the service plan

00:41:21,119 --> 00:41:27,359
project that was uh i was showing

00:41:23,839 --> 00:41:29,920
um and

00:41:27,359 --> 00:41:32,000
and this terraform module should also

00:41:29,920 --> 00:41:33,680
use data sources

00:41:32,000 --> 00:41:35,119
data source is a way to look up an

00:41:33,680 --> 00:41:38,480
existing object uh

00:41:35,119 --> 00:41:41,440
into a real world and

00:41:38,480 --> 00:41:41,760
the data source would just look up the

00:41:41,440 --> 00:41:43,839
um

00:41:41,760 --> 00:41:46,960
[Music]

00:41:43,839 --> 00:41:48,240
the context of the osb calls the context

00:41:46,960 --> 00:41:51,599
being

00:41:48,240 --> 00:41:54,240
which space apps and org

00:41:51,599 --> 00:41:55,640
the service instance was created so when

00:41:54,240 --> 00:41:56,800
a user

00:41:55,640 --> 00:42:00,160
[Music]

00:41:56,800 --> 00:42:03,280
has created a project and then ask

00:42:00,160 --> 00:42:06,160
to create a kubernetes subscription

00:42:03,280 --> 00:42:07,040
the service broker knows that it was

00:42:06,160 --> 00:42:11,200
asked from

00:42:07,040 --> 00:42:13,920
the production space of this project

00:42:11,200 --> 00:42:14,560
and so it can use a data source to to

00:42:13,920 --> 00:42:17,599
look up

00:42:14,560 --> 00:42:20,079
the members of the space and so to

00:42:17,599 --> 00:42:22,640
provision into combat test namespace

00:42:20,079 --> 00:42:24,400
and the users that are member of the

00:42:22,640 --> 00:42:27,119
space and to update that

00:42:24,400 --> 00:42:27,119
correspondingly

00:42:28,000 --> 00:42:34,000
um some i'm about done for for the

00:42:31,040 --> 00:42:37,119
second part which was um

00:42:34,000 --> 00:42:38,960
thoughts for now uh and yeah i'm quite

00:42:37,119 --> 00:42:40,560
interested to hear whether whether there

00:42:38,960 --> 00:42:44,720
is similar needs

00:42:40,560 --> 00:42:48,160
um into other enterprise

00:42:44,720 --> 00:42:49,839
and that comes uh to my a bit conclusion

00:42:48,160 --> 00:42:53,040
and discussion i'd like to have uh

00:42:49,839 --> 00:42:55,280
with you guys um and

00:42:53,040 --> 00:42:57,200
to my my feeling is that um platform

00:42:55,280 --> 00:43:00,079
remarketplace and the usb

00:42:57,200 --> 00:43:01,119
ecosystem provides strong value to range

00:43:00,079 --> 00:43:03,040
and

00:43:01,119 --> 00:43:06,560
and i'd like to mention that it's also

00:43:03,040 --> 00:43:10,160
the case to the enterprise market

00:43:06,560 --> 00:43:14,160
and there's still quite a bit of work

00:43:10,160 --> 00:43:16,640
on those components uh to to support um

00:43:14,160 --> 00:43:18,400
advanced use case uh and to source

00:43:16,640 --> 00:43:20,800
supports enterprise use case

00:43:18,400 --> 00:43:23,359
so i was mentioning for example the um

00:43:20,800 --> 00:43:26,640
sending annotations to

00:43:23,359 --> 00:43:29,839
service brokers um there is

00:43:26,640 --> 00:43:30,720
maintenance into stratos for enhanced

00:43:29,839 --> 00:43:33,839
experience of

00:43:30,720 --> 00:43:37,119
the platform remarketplace as well as v3

00:43:33,839 --> 00:43:38,160
um the cf java client is great is that a

00:43:37,119 --> 00:43:40,720
great asset

00:43:38,160 --> 00:43:42,880
that allows to develop service broker

00:43:40,720 --> 00:43:43,520
that that talks to plot hundreds such as

00:43:42,880 --> 00:43:46,240
for

00:43:43,520 --> 00:43:47,359
usb same db vitreous report is being

00:43:46,240 --> 00:43:49,599
contributed as well

00:43:47,359 --> 00:43:51,920
uh and thanks again for from vmware and

00:43:49,599 --> 00:43:54,880
sap for those great contributions

00:43:51,920 --> 00:43:55,680
um cloud service broker is uh is awesome

00:43:54,880 --> 00:43:59,040
um

00:43:55,680 --> 00:44:01,440
there are many as well opportunities to

00:43:59,040 --> 00:44:02,960
serve this enterprise use case uh with

00:44:01,440 --> 00:44:05,200
additional use cases

00:44:02,960 --> 00:44:06,640
uh such as support for dashboards

00:44:05,200 --> 00:44:07,920
currently

00:44:06,640 --> 00:44:10,079
cloud service broker doesn't support

00:44:07,920 --> 00:44:13,280
dashboards and i i think

00:44:10,079 --> 00:44:17,040
i'll share another presentation

00:44:13,280 --> 00:44:20,720
uh detailing um uh

00:44:17,040 --> 00:44:24,000
detailing one use case i was missing

00:44:20,720 --> 00:44:28,000
is um once a user

00:44:24,000 --> 00:44:30,800
created a data subscription say a gcp

00:44:28,000 --> 00:44:31,760
a cloud service a cloud sql service

00:44:30,800 --> 00:44:34,960
instance

00:44:31,760 --> 00:44:38,079
and that he needs to access

00:44:34,960 --> 00:44:41,359
gcp console to access log metrics

00:44:38,079 --> 00:44:43,359
alerts or backups currently

00:44:41,359 --> 00:44:46,319
from cloud foundry identity it has no

00:44:43,359 --> 00:44:49,880
way to get into a gcp console

00:44:46,319 --> 00:44:51,680
so the idea is to find a way so that

00:44:49,880 --> 00:44:56,160
[Music]

00:44:51,680 --> 00:44:59,760
the either cmdb or the

00:44:56,160 --> 00:45:02,160
service broker would set up into

00:44:59,760 --> 00:45:04,480
the service provider i am let's take the

00:45:02,160 --> 00:45:06,240
example of gcpim

00:45:04,480 --> 00:45:08,079
the different user and role so that the

00:45:06,240 --> 00:45:10,720
user can natively then access

00:45:08,079 --> 00:45:11,359
the console with restricted permission

00:45:10,720 --> 00:45:14,560
so that's

00:45:11,359 --> 00:45:18,880
a subject may be of another presentation

00:45:14,560 --> 00:45:22,400
where i detail some of that

00:45:18,880 --> 00:45:25,440
um yeah this ecosystem is strong as well

00:45:22,400 --> 00:45:26,720
because of the kubernetes client service

00:45:25,440 --> 00:45:29,760
catalog

00:45:26,720 --> 00:45:33,119
maybe a ui is missing so i'm i'd like to

00:45:29,760 --> 00:45:33,760
get feedback on whether this uh usb20 is

00:45:33,119 --> 00:45:36,480
interested

00:45:33,760 --> 00:45:38,000
interesting to the community and as well

00:45:36,480 --> 00:45:39,599
it's strong because of the service

00:45:38,000 --> 00:45:41,280
brokers that

00:45:39,599 --> 00:45:44,079
that provides a way to provision

00:45:41,280 --> 00:45:46,800
kubernetes resources

00:45:44,079 --> 00:45:47,520
so there's a sap service service fabric

00:45:46,800 --> 00:45:49,760
broker

00:45:47,520 --> 00:45:50,720
uh which i do need to test um there's a

00:45:49,760 --> 00:45:53,280
cloud service broker

00:45:50,720 --> 00:45:55,280
uh that looks very promising as well uh

00:45:53,280 --> 00:45:56,240
using telephone providers kubernetes

00:45:55,280 --> 00:45:58,319
alpha

00:45:56,240 --> 00:45:59,760
enables custom resources to be

00:45:58,319 --> 00:46:02,880
provisioned

00:45:59,760 --> 00:46:05,920
still alpha as its name

00:46:02,880 --> 00:46:06,880
indicates so we do need to test that and

00:46:05,920 --> 00:46:10,000
there is the

00:46:06,880 --> 00:46:13,359
kubernetes provider and there was a

00:46:10,000 --> 00:46:17,119
great example contributed by the

00:46:13,359 --> 00:46:19,920
cloud.gov team um gsa

00:46:17,119 --> 00:46:20,800
eks brokeback example which is um very

00:46:19,920 --> 00:46:23,040
promising

00:46:20,800 --> 00:46:24,880
so the end provider as well and there

00:46:23,040 --> 00:46:28,480
was an issue provided

00:46:24,880 --> 00:46:29,839
by gsa team as well on that

00:46:28,480 --> 00:46:33,680
there's many brokers that look

00:46:29,839 --> 00:46:33,680
supremizing as well maybe others

00:46:34,240 --> 00:46:41,040
and so yes the discussion and question

00:46:37,920 --> 00:46:43,920
i was keen to to receive was

00:46:41,040 --> 00:46:44,480
to those use cases that i was sharing

00:46:43,920 --> 00:46:48,800
that they would

00:46:44,480 --> 00:46:48,800
also apply to us to enterprise customers

00:46:49,520 --> 00:46:54,160
is there a way that platon redundant

00:46:51,680 --> 00:46:56,160
stream vendors

00:46:54,160 --> 00:46:58,079
could leverage the marketplace to serve

00:46:56,160 --> 00:47:01,040
those enterprise customers

00:46:58,079 --> 00:47:01,040
advanced use case

00:47:02,720 --> 00:47:06,000
yeah advanced use cases and would that

00:47:04,800 --> 00:47:08,880
be a way as well to

00:47:06,000 --> 00:47:10,640
help maintaining this ecosystem that i

00:47:08,880 --> 00:47:13,119
think is still differentiating from the

00:47:10,640 --> 00:47:14,160
ecosystem but gradually uh is getting

00:47:13,119 --> 00:47:17,680
competition

00:47:14,160 --> 00:47:20,720
um and so is is

00:47:17,680 --> 00:47:22,800
probably threatened um by uh

00:47:20,720 --> 00:47:24,400
by investment made into uh into the

00:47:22,800 --> 00:47:27,440
kubernetes ecosystem

00:47:24,400 --> 00:47:29,440
um so yes

00:47:27,440 --> 00:47:31,119
that's the discussion maybe we can move

00:47:29,440 --> 00:47:34,640
to more

00:47:31,119 --> 00:47:36,800
uh discussion qa q a

00:47:34,640 --> 00:47:40,240
i'm done with with slides for now and

00:47:36,800 --> 00:47:40,240
yeah i'd like to get your feedback

00:47:45,040 --> 00:47:49,920
can you steal me yeah thanks kim that

00:47:48,240 --> 00:47:51,920
was fantastic

00:47:49,920 --> 00:47:52,960
yeah definitely interested to hear what

00:47:51,920 --> 00:47:56,079
the community has to say

00:47:52,960 --> 00:47:56,079
um are there any questions

00:48:01,760 --> 00:48:06,240
um well got a fairly small audience here

00:48:04,640 --> 00:48:09,280
today but um i think

00:48:06,240 --> 00:48:10,400
uh the very least you should um post

00:48:09,280 --> 00:48:12,400
this in cf dev

00:48:10,400 --> 00:48:14,640
uh trying to reach out to my community

00:48:12,400 --> 00:48:17,040
and um and see what kind of

00:48:14,640 --> 00:48:17,839
uh response that gets and yeah we can

00:48:17,040 --> 00:48:19,680
talk

00:48:17,839 --> 00:48:20,880
how to move forward with this but yeah

00:48:19,680 --> 00:48:22,480
it looks really interesting

00:48:20,880 --> 00:48:23,920
i'm also very excited about the cloud

00:48:22,480 --> 00:48:27,680
service broker project

00:48:23,920 --> 00:48:29,839
um so yeah uh is

00:48:27,680 --> 00:48:31,760
i guess um yeah cf dev would probably be

00:48:29,839 --> 00:48:34,640
the best place to move forward with this

00:48:31,760 --> 00:48:35,440
um um slide deck if you can post that in

00:48:34,640 --> 00:48:37,280
the cab channel

00:48:35,440 --> 00:48:38,559
um and or cf dev i think that would be

00:48:37,280 --> 00:48:41,119
useful um

00:48:38,559 --> 00:48:42,319
but yeah thanks so much yes sir nicest

00:48:41,119 --> 00:48:45,700
thank you very much and i see there was

00:48:42,319 --> 00:48:47,760
discussion on the chat i had missed

00:48:45,700 --> 00:48:51,280
[Music]

00:48:47,760 --> 00:48:52,319
yes norm say that the ec enterprise

00:48:51,280 --> 00:48:55,839
usage

00:48:52,319 --> 00:48:58,400
uh same from wing

00:48:55,839 --> 00:48:59,280
and yes i'll follow up as well with um

00:48:58,400 --> 00:49:02,319
with troy

00:48:59,280 --> 00:49:04,480
on the pmc extension for incubation if

00:49:02,319 --> 00:49:07,440
there is interest in incubating

00:49:04,480 --> 00:49:08,319
your project and yes if there is i'm

00:49:07,440 --> 00:49:10,559
happy to

00:49:08,319 --> 00:49:12,079
to get offline feedback maybe from

00:49:10,559 --> 00:49:15,200
service teams

00:49:12,079 --> 00:49:15,200
cloud service teams as well

00:49:16,400 --> 00:49:22,000
and thank you very much for your

00:49:17,440 --> 00:49:22,000
attention thank you dm that's great

00:49:22,160 --> 00:49:26,319
yeah i just wanted to add uh chris that

00:49:24,559 --> 00:49:28,400
i was

00:49:26,319 --> 00:49:29,760
very interested in the cloud service

00:49:28,400 --> 00:49:31,599
broker

00:49:29,760 --> 00:49:33,280
aspect as well and see if there's any

00:49:31,599 --> 00:49:36,240
overlap there or

00:49:33,280 --> 00:49:37,119
um if there's some lessons that we can

00:49:36,240 --> 00:49:40,319
pull out of this

00:49:37,119 --> 00:49:42,559
and thank you for the presentation yeah

00:49:40,319 --> 00:49:44,400
i'll i'll reach out to you probably

00:49:42,559 --> 00:49:47,280
outside of the call and

00:49:44,400 --> 00:49:47,680
get some more info on those aspects that

00:49:47,280 --> 00:49:51,040
i

00:49:47,680 --> 00:49:54,240
i just mentioned great thank you

00:49:51,040 --> 00:49:54,240
pleasure yeah please

00:49:57,280 --> 00:50:00,880
all right well um i think that about

00:49:59,359 --> 00:50:01,599
concludes it we'll give everyone a few

00:50:00,880 --> 00:50:03,760
minutes back

00:50:01,599 --> 00:50:04,720
um but thanks everyone for joining and

00:50:03,760 --> 00:50:07,839
um

00:50:04,720 --> 00:50:12,960
yeah uh guillaume thanks again um

00:50:07,839 --> 00:50:18,000
and we'll all talk next month

00:50:12,960 --> 00:50:18,000

YouTube URL: https://www.youtube.com/watch?v=mStbfSaQEPk


