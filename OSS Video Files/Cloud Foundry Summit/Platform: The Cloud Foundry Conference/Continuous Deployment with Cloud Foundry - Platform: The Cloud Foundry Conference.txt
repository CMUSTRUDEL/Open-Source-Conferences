Title: Continuous Deployment with Cloud Foundry - Platform: The Cloud Foundry Conference
Publication date: 2013-11-22
Playlist: Platform: The Cloud Foundry Conference
Description: 
	Continuous Deployment with Cloud Foundry (Lightning Talk)
Julian Fischer, CEO, Anynines
Platform: The Cloud Foundry Conference (http://www.platformcf.com) September 8-9, 2013
Captions: 
	00:00:00,870 --> 00:00:03,979
[Music]

00:00:07,510 --> 00:00:11,519
[Music]

00:00:08,870 --> 00:00:16,199
this talk is about continuous deployment

00:00:11,519 --> 00:00:18,060
with a Cloud Foundry well actually the

00:00:16,199 --> 00:00:20,279
problem we're actually encountering

00:00:18,060 --> 00:00:23,550
sometimes is that it's Friday evening

00:00:20,279 --> 00:00:25,230
you want to deploy the last deploy the

00:00:23,550 --> 00:00:27,000
last release before going to your

00:00:25,230 --> 00:00:29,460
weekend but what happens is in the

00:00:27,000 --> 00:00:33,360
internal server error in there when many

00:00:29,460 --> 00:00:35,280
means today to actually prevent that one

00:00:33,360 --> 00:00:37,380
of them is having a good test suite

00:00:35,280 --> 00:00:40,579
another one is having a continuous

00:00:37,380 --> 00:00:42,960
integration server and even more like

00:00:40,579 --> 00:00:45,930
and even more you could have a

00:00:42,960 --> 00:00:47,850
continuous deployment so the question is

00:00:45,930 --> 00:00:50,760
how we can actually do that how can we

00:00:47,850 --> 00:00:54,149
achieve continuous delivery with Cloud

00:00:50,760 --> 00:00:56,129
Foundry well it actually goes down to

00:00:54,149 --> 00:00:59,280
never forget to run your tests of course

00:00:56,129 --> 00:01:02,820
and never to deploy anything that hasn't

00:00:59,280 --> 00:01:05,519
you know yeah succeeded in testing and

00:01:02,820 --> 00:01:08,100
never deploy this something that failed

00:01:05,519 --> 00:01:10,350
in testing to your server so it's easy

00:01:08,100 --> 00:01:13,229
like that in the end what you want to

00:01:10,350 --> 00:01:15,990
have is people just pushing code to a

00:01:13,229 --> 00:01:17,759
repository being tested automatically

00:01:15,990 --> 00:01:20,939
and then deploy to your production

00:01:17,759 --> 00:01:22,979
system also automatically and in case

00:01:20,939 --> 00:01:25,080
you really managed to do that I'm pretty

00:01:22,979 --> 00:01:28,080
sure your test suite is all setup your

00:01:25,080 --> 00:01:29,790
deployment process is simple so we're

00:01:28,080 --> 00:01:31,710
actually aiming to do that and we've

00:01:29,790 --> 00:01:34,619
already seen here this wonderful

00:01:31,710 --> 00:01:39,090
conference some talks about how to

00:01:34,619 --> 00:01:41,340
achieve continuous delivery but I mean

00:01:39,090 --> 00:01:45,720
it's not that much a problem of

00:01:41,340 --> 00:01:48,329
automatic test execution today nor it is

00:01:45,720 --> 00:01:51,180
to do single click deployments but how

00:01:48,329 --> 00:01:55,460
to integrate that how to really achieve

00:01:51,180 --> 00:01:59,399
a product a continuous delivery chain

00:01:55,460 --> 00:02:02,070
that's very easy I've spoken to many

00:01:59,399 --> 00:02:04,640
companies you know on conferences and

00:02:02,070 --> 00:02:06,840
every every single company with a

00:02:04,640 --> 00:02:11,009
continuous delivery process in place

00:02:06,840 --> 00:02:13,590
it's really gaining a lot from it but

00:02:11,009 --> 00:02:15,599
many don't so why why not I

00:02:13,590 --> 00:02:18,239
personally think it should be very easy

00:02:15,599 --> 00:02:21,690
to set up a continuous delivery chain

00:02:18,239 --> 00:02:23,400
and I can tell you maybe it should be

00:02:21,690 --> 00:02:25,440
that symbol that it is just hard to

00:02:23,400 --> 00:02:28,830
argue not to do it so how could we

00:02:25,440 --> 00:02:31,170
actually achieve this and I can tell you

00:02:28,830 --> 00:02:33,030
today that there is a way to do that

00:02:31,170 --> 00:02:35,970
it's very easy especially for smaller

00:02:33,030 --> 00:02:37,980
projects and smaller teams that it is

00:02:35,970 --> 00:02:41,250
using Cloud Foundry along with github

00:02:37,980 --> 00:02:42,750
and Travis CI so the Travis guys they

00:02:41,250 --> 00:02:45,239
are actually co-located within our

00:02:42,750 --> 00:02:49,590
Berlin office they've just recently

00:02:45,239 --> 00:02:52,049
integrated Cloud Foundry to be part of

00:02:49,590 --> 00:02:57,360
their continuous delivery and continuous

00:02:52,049 --> 00:03:00,150
deployment feature so all we have to do

00:02:57,360 --> 00:03:03,030
to make this possible is to push our app

00:03:00,150 --> 00:03:04,140
it's at least one time manually creating

00:03:03,030 --> 00:03:06,690
manifest llaman

00:03:04,140 --> 00:03:09,150
and store it to our repository so it's

00:03:06,690 --> 00:03:11,640
good to have you app run me once to

00:03:09,150 --> 00:03:16,220
actually know that the manifest or Yama

00:03:11,640 --> 00:03:18,600
is all set up and then you want to go to

00:03:16,220 --> 00:03:21,390
configure Travis which goes down to

00:03:18,600 --> 00:03:23,450
creating a Travis Yammer file you are

00:03:21,390 --> 00:03:26,040
telling how to run your tests and

00:03:23,450 --> 00:03:29,280
activate your github Travis hook so

00:03:26,040 --> 00:03:31,170
github actually is notifying Travis that

00:03:29,280 --> 00:03:33,900
your code has changed in order to run

00:03:31,170 --> 00:03:36,319
your test so once you actually have

00:03:33,900 --> 00:03:39,390
activated Travis all you have to do is

00:03:36,319 --> 00:03:41,430
using the Travis command of the Travis

00:03:39,390 --> 00:03:44,069
gem to set up cloud found it will

00:03:41,430 --> 00:03:45,900
actually trigger you ask you some

00:03:44,069 --> 00:03:47,970
questions like what your targets you

00:03:45,900 --> 00:03:50,459
want to deploy to what's your user name

00:03:47,970 --> 00:03:53,310
and what's your password password is

00:03:50,459 --> 00:03:55,040
going to be stored encrypted in Travis

00:03:53,310 --> 00:03:58,590
Yama file so you can be safe with that

00:03:55,040 --> 00:04:00,690
and in the end you end up having an

00:03:58,590 --> 00:04:02,880
enhanced Travis Yama file including some

00:04:00,690 --> 00:04:05,459
deployment information and along with

00:04:02,880 --> 00:04:07,769
this your manifest file and euro posit

00:04:05,459 --> 00:04:09,989
Ori and your Travis configuration all

00:04:07,769 --> 00:04:12,569
you have to do is push your code against

00:04:09,989 --> 00:04:14,790
github and it will run your tests

00:04:12,569 --> 00:04:19,019
automatically and then deploy to Cloud

00:04:14,790 --> 00:04:21,930
Foundry which is very very cool it the

00:04:19,019 --> 00:04:24,510
lock output of Travis will tell you

00:04:21,930 --> 00:04:26,970
about the success or failure about of

00:04:24,510 --> 00:04:30,150
your deployment and your test run

00:04:26,970 --> 00:04:32,070
so I would I think this will make a lot

00:04:30,150 --> 00:04:36,750
of people happy as it's really easy to

00:04:32,070 --> 00:04:39,090
set up especially or actually in the end

00:04:36,750 --> 00:04:43,020
you can try this out on your on your own

00:04:39,090 --> 00:04:45,570
there's a tutorial at at any 9s comm

00:04:43,020 --> 00:04:49,700
that walks through step by step using

00:04:45,570 --> 00:04:52,920
example exemplary code how to actually

00:04:49,700 --> 00:04:55,530
set this up so it's a simple Sinatra app

00:04:52,920 --> 00:04:59,790
which does not really come with a test

00:04:55,530 --> 00:05:02,400
suite but a Travis configuration as well

00:04:59,790 --> 00:05:05,340
as a manifest y mo so all you have to do

00:05:02,400 --> 00:05:07,260
is fork this code apply it and

00:05:05,340 --> 00:05:10,080
configured using that it's using your

00:05:07,260 --> 00:05:12,180
Cloud Foundry credentials and within ten

00:05:10,080 --> 00:05:15,360
minutes you have a continuously delivery

00:05:12,180 --> 00:05:18,120
process in place so I'd be really happy

00:05:15,360 --> 00:05:20,730
for you guys to try this out it's any 9s

00:05:18,120 --> 00:05:23,040
comm go to the block you find a tutorial

00:05:20,730 --> 00:05:25,140
I'd be happy to receive feedback and

00:05:23,040 --> 00:05:28,320
it's good chance to say thank you for

00:05:25,140 --> 00:05:30,720
Travis CI taking care of this very very

00:05:28,320 --> 00:05:33,350
nice feature so thank you very much and

00:05:30,720 --> 00:05:33,350
have fun with it

00:05:39,340 --> 00:05:48,329

YouTube URL: https://www.youtube.com/watch?v=nqsEP789kY8


