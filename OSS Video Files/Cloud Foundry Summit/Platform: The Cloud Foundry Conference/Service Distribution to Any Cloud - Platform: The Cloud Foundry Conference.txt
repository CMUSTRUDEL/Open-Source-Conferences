Title: Service Distribution to Any Cloud - Platform: The Cloud Foundry Conference
Publication date: 2013-11-22
Playlist: Platform: The Cloud Foundry Conference
Description: 
	Service Distribution to Any Cloud (Lightning Talk)
Mark Geene & Vineet Joshi, Cloud Elements
Platform: The Cloud Foundry Conference (http://www.platformcf.com) September 8-9, 2013
Captions: 
	00:00:00,870 --> 00:00:03,979
[Music]

00:00:06,109 --> 00:00:11,820
hi I'm mark Jeannie CEO cloud elements

00:00:09,389 --> 00:00:13,410
and M Vanitas okay the CTO of Glo denim

00:00:11,820 --> 00:00:15,870
and so vineet and I are going to share

00:00:13,410 --> 00:00:18,869
with you lessons we've learned in

00:00:15,870 --> 00:00:22,590
distributing our cloud service to dozens

00:00:18,869 --> 00:00:24,960
of private public and hybrid clouds by

00:00:22,590 --> 00:00:26,640
using Cloud Foundry so first just a

00:00:24,960 --> 00:00:29,730
little bit about us as a company

00:00:26,640 --> 00:00:32,070
so cloud elements we're a cloud services

00:00:29,730 --> 00:00:34,620
integrator that combines consulting

00:00:32,070 --> 00:00:36,690
services with technology to accelerate

00:00:34,620 --> 00:00:40,200
the development of cloud applications

00:00:36,690 --> 00:00:43,410
and how we do that is our technology is

00:00:40,200 --> 00:00:46,350
essentially a API integration layer that

00:00:43,410 --> 00:00:49,050
sits on top of cloud foundry that helps

00:00:46,350 --> 00:00:51,390
developers integrate cloud services into

00:00:49,050 --> 00:00:53,070
their applications and a fraction of the

00:00:51,390 --> 00:00:55,649
time that it normally takes a typical

00:00:53,070 --> 00:00:58,230
cloud application may use six to ten

00:00:55,649 --> 00:01:02,460
cloud services such as sun grid dropbox

00:00:58,230 --> 00:01:04,350
Twilio authorize.net and each of those

00:01:02,460 --> 00:01:05,909
are glued into the application they take

00:01:04,350 --> 00:01:09,680
time to integrate monitor and maintain

00:01:05,909 --> 00:01:12,510
what we do is we've built a preset of

00:01:09,680 --> 00:01:15,119
integrations that make it far easier to

00:01:12,510 --> 00:01:18,119
integrate those and monitor manage those

00:01:15,119 --> 00:01:20,610
in your application and one of the

00:01:18,119 --> 00:01:22,860
unique things that we do is we take a

00:01:20,610 --> 00:01:24,390
hub approach so essentially if your

00:01:22,860 --> 00:01:26,549
application needs to integrate two

00:01:24,390 --> 00:01:29,610
leading document services you can write

00:01:26,549 --> 00:01:30,780
to one api that then connects to and

00:01:29,610 --> 00:01:33,720
then we do all the work in the backend

00:01:30,780 --> 00:01:35,490
to connect to all those other services

00:01:33,720 --> 00:01:37,590
we do the same thing for CRM customer

00:01:35,490 --> 00:01:40,380
services systems payment services

00:01:37,590 --> 00:01:42,930
excetera so again really with the focus

00:01:40,380 --> 00:01:47,030
of reducing that time to to build these

00:01:42,930 --> 00:01:49,530
integrations but our customers are

00:01:47,030 --> 00:01:52,560
enterprises they're independent software

00:01:49,530 --> 00:01:55,470
vendors SAS companies that want to

00:01:52,560 --> 00:01:57,719
deploy our technology in their clouds so

00:01:55,470 --> 00:02:00,210
our challenge has been to be able to

00:01:57,719 --> 00:02:03,560
build this solution and efficiently

00:02:00,210 --> 00:02:05,610
deploy it to dozens of different cloud

00:02:03,560 --> 00:02:07,940
environments none of which we have

00:02:05,610 --> 00:02:10,590
control over and then also the

00:02:07,940 --> 00:02:12,510
technology stack in every one of our

00:02:10,590 --> 00:02:13,590
customers is very different right so not

00:02:12,510 --> 00:02:15,180
just from the

00:02:13,590 --> 00:02:18,150
different runtimes but different

00:02:15,180 --> 00:02:20,489
containers and even from within a given

00:02:18,150 --> 00:02:23,160
run time let's say if you're taking Java

00:02:20,489 --> 00:02:25,440
for example some of our customers are

00:02:23,160 --> 00:02:29,310
using Tomcat and some are using WebLogic

00:02:25,440 --> 00:02:31,440
WebSphere whatever so getting one set of

00:02:29,310 --> 00:02:34,530
services of one application deployed

00:02:31,440 --> 00:02:36,660
into that different plethora of runtimes

00:02:34,530 --> 00:02:39,360
becomes a management and deployment

00:02:36,660 --> 00:02:42,260
nightmare so hence we decided that we

00:02:39,360 --> 00:02:45,000
needed a path and we basically needed

00:02:42,260 --> 00:02:46,470
something in between to make our

00:02:45,000 --> 00:02:47,700
deployments more efficient

00:02:46,470 --> 00:02:50,400
yeah we were spending farm which too

00:02:47,700 --> 00:02:52,230
much time doing those deployments so we

00:02:50,400 --> 00:02:54,000
moved to this path centric what we call

00:02:52,230 --> 00:02:56,569
path centric design where we designed

00:02:54,000 --> 00:02:59,489
our application to the paths first and

00:02:56,569 --> 00:03:01,920
in eliminated dependencies on the

00:02:59,489 --> 00:03:04,760
infrastructure right and so also our

00:03:01,920 --> 00:03:07,830
customers you know again as Mark said

00:03:04,760 --> 00:03:09,930
are deployed on various cloud so some of

00:03:07,830 --> 00:03:13,830
them have their own data centers some

00:03:09,930 --> 00:03:16,860
running vSphere or vCloud director etc a

00:03:13,830 --> 00:03:18,480
lot of them are in Amazon Rackspace of

00:03:16,860 --> 00:03:23,250
our idea different public clouds right

00:03:18,480 --> 00:03:25,290
so what we adhered to is as a strict

00:03:23,250 --> 00:03:27,720
separation between the infrastructure

00:03:25,290 --> 00:03:30,630
tier and the platform right so we

00:03:27,720 --> 00:03:32,760
ensured that nothing we did in our

00:03:30,630 --> 00:03:34,440
elements as well as you know integrating

00:03:32,760 --> 00:03:37,829
those elements into our customers

00:03:34,440 --> 00:03:41,370
applications was using any of the

00:03:37,829 --> 00:03:44,340
infrastructure tier api is or services

00:03:41,370 --> 00:03:46,889
but only using platform tier api's and

00:03:44,340 --> 00:03:49,220
services so an example being anchoring

00:03:46,889 --> 00:03:51,690
to runtimes available in the platform

00:03:49,220 --> 00:03:54,420
and then the custom services well yeah

00:03:51,690 --> 00:03:57,120
and sure the other thing was initially

00:03:54,420 --> 00:03:58,950
we were deploying on all our elements

00:03:57,120 --> 00:04:01,950
bundled in one application and as one of

00:03:58,950 --> 00:04:04,709
the previous speakers had mentioned we

00:04:01,950 --> 00:04:08,280
realized that breaking that into smaller

00:04:04,709 --> 00:04:11,940
components and smaller services allowed

00:04:08,280 --> 00:04:13,920
us not only to deploy those and manage

00:04:11,940 --> 00:04:16,350
those more independently but allowed

00:04:13,920 --> 00:04:18,539
Cloud Foundry as well the pass as well

00:04:16,350 --> 00:04:20,639
to you know for us to spin up new

00:04:18,539 --> 00:04:22,620
instances of different services versus

00:04:20,639 --> 00:04:25,080
having to spin up instances of that

00:04:22,620 --> 00:04:27,210
whole application every time it became a

00:04:25,080 --> 00:04:30,240
much easier proposition as well as

00:04:27,210 --> 00:04:33,030
less resource a consuming proposition to

00:04:30,240 --> 00:04:35,550
break it down into smaller components so

00:04:33,030 --> 00:04:38,160
what we decided to do is to break it

00:04:35,550 --> 00:04:40,889
down and start building custom services

00:04:38,160 --> 00:04:43,470
within the Cloud Foundry stack so that

00:04:40,889 --> 00:04:46,319
we could then deploy our elements as we

00:04:43,470 --> 00:04:50,069
chose to add our customers is in their

00:04:46,319 --> 00:04:52,229
clouds basically so so we'll share seven

00:04:50,069 --> 00:04:53,720
best practices for essentially what

00:04:52,229 --> 00:04:57,630
we've learned through distributing

00:04:53,720 --> 00:04:59,130
services our cloud service to dozens of

00:04:57,630 --> 00:05:01,530
different clouds using cloud pounds yeah

00:04:59,130 --> 00:05:04,229
so again one of the key things was to

00:05:01,530 --> 00:05:06,750
make it where when you design your

00:05:04,229 --> 00:05:09,449
services or components or even for your

00:05:06,750 --> 00:05:11,340
example your applications to use a very

00:05:09,449 --> 00:05:13,310
service oriented architecture and use

00:05:11,340 --> 00:05:16,800
you know rest as kind of the de-facto

00:05:13,310 --> 00:05:19,520
API standard and not use you know soap

00:05:16,800 --> 00:05:23,430
or something heavyweight of that nature

00:05:19,520 --> 00:05:25,020
we experienced that sticking to runtimes

00:05:23,430 --> 00:05:26,789
available you know the whole core

00:05:25,020 --> 00:05:29,729
compatible Cloud Foundry cool compatible

00:05:26,789 --> 00:05:31,620
was very helpful for us because a lot of

00:05:29,729 --> 00:05:33,900
our customers wanted runtimes that did

00:05:31,620 --> 00:05:36,509
not were not core compatible then fit

00:05:33,900 --> 00:05:39,090
into that format and we always advised

00:05:36,509 --> 00:05:40,740
to use a runtime that is a core

00:05:39,090 --> 00:05:42,930
compatible cloud foundry run time

00:05:40,740 --> 00:05:45,389
because again upgrading and things like

00:05:42,930 --> 00:05:47,639
that it made it just easier to pick from

00:05:45,389 --> 00:05:51,380
within the available services within

00:05:47,639 --> 00:05:55,949
cloud foundry and then again reiterating

00:05:51,380 --> 00:05:58,289
using a API that's directly provided by

00:05:55,949 --> 00:05:59,880
the infrastructure provider will just

00:05:58,289 --> 00:06:02,009
destroy the portability of your

00:05:59,880 --> 00:06:04,560
application so completely avoid doing

00:06:02,009 --> 00:06:07,830
that use what's what the pass provides

00:06:04,560 --> 00:06:10,199
one thing I experience and this again

00:06:07,830 --> 00:06:13,050
applies to our elements is to try and

00:06:10,199 --> 00:06:15,120
make the service as stateless as

00:06:13,050 --> 00:06:19,020
possible though the minute you're using

00:06:15,120 --> 00:06:21,780
non-standard services to maintain state

00:06:19,020 --> 00:06:24,570
makes it harder for the platform to

00:06:21,780 --> 00:06:26,520
manage instances and scale your services

00:06:24,570 --> 00:06:29,070
up and down so keep your services as

00:06:26,520 --> 00:06:32,699
toothless as you can when building those

00:06:29,070 --> 00:06:36,589
into the platform and then the other

00:06:32,699 --> 00:06:40,229
thing is we of the authentication so for

00:06:36,589 --> 00:06:40,950
security initially we were doing some

00:06:40,229 --> 00:06:44,580
custom thing

00:06:40,950 --> 00:06:47,160
but then we leveraged the or - Oh from

00:06:44,580 --> 00:06:49,260
the Cloud Foundry you a provider and

00:06:47,160 --> 00:06:51,090
that has been really nice because it

00:06:49,260 --> 00:06:53,550
took not only made our code a lot

00:06:51,090 --> 00:06:55,080
simpler but also made it more

00:06:53,550 --> 00:06:57,690
standardized and now you know with the

00:06:55,080 --> 00:07:00,060
new you a change is coming we don't have

00:06:57,690 --> 00:07:02,580
to worry about kind of porting our

00:07:00,060 --> 00:07:06,780
services over to a different technology

00:07:02,580 --> 00:07:10,470
or anything like that then initially we

00:07:06,780 --> 00:07:13,980
were using vcap like a lot of people way

00:07:10,470 --> 00:07:17,070
back but we are in the currently in the

00:07:13,980 --> 00:07:20,850
process of using Bosh across all our

00:07:17,070 --> 00:07:23,040
customer deployments so basically in

00:07:20,850 --> 00:07:25,440
using standard stem cells were available

00:07:23,040 --> 00:07:27,660
but also seeing if we can build our own

00:07:25,440 --> 00:07:30,210
custom stem cells for some of our custom

00:07:27,660 --> 00:07:31,920
deployments but but we are going to

00:07:30,210 --> 00:07:33,780
standardize on Bosch I think that's the

00:07:31,920 --> 00:07:37,130
way forward as well from a Cloud Foundry

00:07:33,780 --> 00:07:39,270
perspective and so again you know

00:07:37,130 --> 00:07:42,030
leverage cloud foundry to build your

00:07:39,270 --> 00:07:44,220
services it becomes much easier not only

00:07:42,030 --> 00:07:45,600
to build them as service components but

00:07:44,220 --> 00:07:48,360
also distribute them through the

00:07:45,600 --> 00:07:52,380
marketplace and then get them on private

00:07:48,360 --> 00:07:54,360
cloud installations so by doing all this

00:07:52,380 --> 00:07:57,210
we were able to actually reduce our

00:07:54,360 --> 00:07:58,920
development spend by 30 percent across

00:07:57,210 --> 00:08:01,530
our entire development really virtually

00:07:58,920 --> 00:08:03,390
eliminate all these distribution aspects

00:08:01,530 --> 00:08:05,970
that we were spending money on and take

00:08:03,390 --> 00:08:08,820
it down to two hours versus days and

00:08:05,970 --> 00:08:10,560
weeks that it took previously so yeah

00:08:08,820 --> 00:08:12,330
we're excited about the the gains we've

00:08:10,560 --> 00:08:14,990
gained as a company and the benefits

00:08:12,330 --> 00:08:18,189
from using cloud foundry thanks

00:08:14,990 --> 00:08:18,189
[Music]

00:08:21,470 --> 00:08:27,760

YouTube URL: https://www.youtube.com/watch?v=lxiZYQMZG-w


