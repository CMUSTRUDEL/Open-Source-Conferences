Title: On the Fly Service Deployment by a Service Broker Using Heat Orchestration Templates
Publication date: 2017-05-16
Playlist: Cloud Foundry Day at OpenStack Summit 2017
Description: 
	Applications that are deployed to the Cloud Foundry platform often rely on external services like databases to provide their functionality. The performance and reliability of these services are therefore key elements in the user experience of the app. Cluster deployments of these services within OpenStack are the preferred way to accomplish these goals. However the manual deployment and removal of these services can be cumbersome and error prone. To circumvent these flaws the service broker itse
Captions: 
	00:00:02,980 --> 00:00:10,129
welcome back from the lunch I hope you

00:00:05,930 --> 00:00:12,559
rested a little bit sorry for the

00:00:10,129 --> 00:00:16,009
delayed we have some technical issues

00:00:12,559 --> 00:00:22,669
with the size of the slides but we

00:00:16,009 --> 00:00:24,800
started over it if you're looking for

00:00:22,669 --> 00:00:29,059
the Cloud Foundry day you right here at

00:00:24,800 --> 00:00:32,840
the bright spot my name is Christian

00:00:29,059 --> 00:00:36,109
Branca and I'm presenting you sales

00:00:32,840 --> 00:00:41,149
brokers compare combined combined with

00:00:36,109 --> 00:00:44,329
heat extraction team templates so who

00:00:41,149 --> 00:00:50,149
hasn't heard about Cloud Foundry until

00:00:44,329 --> 00:00:58,550
now one person who has experienced more

00:00:50,149 --> 00:01:03,710
or less some month with it okay what are

00:00:58,550 --> 00:01:06,439
you talking about looking at some

00:01:03,710 --> 00:01:10,040
software developer who wants to deploy

00:01:06,439 --> 00:01:14,060
an application like our cool friend Bob

00:01:10,040 --> 00:01:17,840
here he has this cool app he wants to

00:01:14,060 --> 00:01:20,180
deploy and then he has the question

00:01:17,840 --> 00:01:23,360
where should I put my application for to

00:01:20,180 --> 00:01:27,049
so it's accessible to his customers or

00:01:23,360 --> 00:01:29,869
something so he thinks about it and

00:01:27,049 --> 00:01:32,570
decides to use cloud Ronnie what's Cloud

00:01:29,869 --> 00:01:36,530
Foundry Cloud Foundry is an container

00:01:32,570 --> 00:01:38,180
based application platform organizing

00:01:36,530 --> 00:01:40,670
application life cycles

00:01:38,180 --> 00:01:43,490
speed up the development process so you

00:01:40,670 --> 00:01:46,969
can easily get your application started

00:01:43,490 --> 00:01:49,340
rapid prototyping staging and so on

00:01:46,969 --> 00:01:53,270
standard is that by standardizing your

00:01:49,340 --> 00:01:56,509
runtime environment and by that and if

00:01:53,270 --> 00:02:00,350
you are able to produce cloud native

00:01:56,509 --> 00:02:02,539
applications um you can easily scale

00:02:00,350 --> 00:02:07,000
your applications if you have more

00:02:02,539 --> 00:02:09,710
demand so if you look at cloud foundry

00:02:07,000 --> 00:02:12,380
what does it provide us it's scaling

00:02:09,710 --> 00:02:14,540
your application easily because if you

00:02:12,380 --> 00:02:15,090
won't have not more demand of your

00:02:14,540 --> 00:02:17,250
application

00:02:15,090 --> 00:02:21,200
you deploy more containers more

00:02:17,250 --> 00:02:28,610
application instances you can easily

00:02:21,200 --> 00:02:28,610
achieve staging by nearly or completely

00:02:29,000 --> 00:02:35,879
completely mirrored staging and

00:02:33,239 --> 00:02:38,310
production environment and also you get

00:02:35,879 --> 00:02:42,569
something like routing you get your

00:02:38,310 --> 00:02:45,349
domain registered you can easily get

00:02:42,569 --> 00:02:48,390
your application accessible by that and

00:02:45,349 --> 00:02:51,569
you don't have to bother where to put

00:02:48,390 --> 00:02:52,950
your your access you can easily ask your

00:02:51,569 --> 00:02:56,700
environment for it

00:02:52,950 --> 00:03:01,260
organizing it but what what where is the

00:02:56,700 --> 00:03:03,090
the problem the problem is here yeah

00:03:01,260 --> 00:03:07,230
this cool cloud native application

00:03:03,090 --> 00:03:09,209
completely stateless easy to scale but

00:03:07,230 --> 00:03:13,290
then you have this this active friend

00:03:09,209 --> 00:03:15,599
it's called your database this problem

00:03:13,290 --> 00:03:18,599
with this database is it's not cloud

00:03:15,599 --> 00:03:22,160
native so you have problems providing it

00:03:18,599 --> 00:03:25,230
as application on Cloud Foundry and

00:03:22,160 --> 00:03:29,250
that's because it's holding your data

00:03:25,230 --> 00:03:33,180
and cloud foundry has this mechanism

00:03:29,250 --> 00:03:36,590
called service broker which is able to

00:03:33,180 --> 00:03:40,849
mind this gap because this application

00:03:36,590 --> 00:03:43,380
needs some this this database needs some

00:03:40,849 --> 00:03:46,500
environment which is more near the

00:03:43,380 --> 00:03:48,560
infrastructure layer because it has to

00:03:46,500 --> 00:03:53,090
be a cared of the persistent storage

00:03:48,560 --> 00:03:56,340
because it has to be a little bit

00:03:53,090 --> 00:03:58,340
orchestrated and there are batch jobs

00:03:56,340 --> 00:04:05,099
running and such things

00:03:58,340 --> 00:04:07,560
so in Cloud Foundry F an API introduced

00:04:05,099 --> 00:04:09,389
inside the cloud controller which is

00:04:07,560 --> 00:04:15,599
organizing all the stuff here on the

00:04:09,389 --> 00:04:18,840
left side and also being able to

00:04:15,599 --> 00:04:20,639
introduce things like the database but

00:04:18,840 --> 00:04:22,979
it's much more with what you can do you

00:04:20,639 --> 00:04:25,020
can nearly all things you need for your

00:04:22,979 --> 00:04:27,180
application provide by a service broker

00:04:25,020 --> 00:04:29,840
like log aggregation

00:04:27,180 --> 00:04:32,639
or introducing firewall rules

00:04:29,840 --> 00:04:35,430
introducing matches q message queues

00:04:32,639 --> 00:04:43,979
load balancer management are much much

00:04:35,430 --> 00:04:46,110
more on how is it going look back at our

00:04:43,979 --> 00:04:48,090
ID we have them application and we have

00:04:46,110 --> 00:04:52,460
a service and the service lives in some

00:04:48,090 --> 00:04:52,460
service source whatever that is and

00:04:53,360 --> 00:04:59,100
what's introducing Cloud Foundry this

00:04:55,620 --> 00:05:03,120
mechanism you get at the Cloud Foundry a

00:04:59,100 --> 00:05:06,479
platform asking for access to some

00:05:03,120 --> 00:05:09,030
service then the platform asks your

00:05:06,479 --> 00:05:16,430
service broker and he's getting you that

00:05:09,030 --> 00:05:21,120
for your application for instance

00:05:16,430 --> 00:05:24,449
getting your database but what it's

00:05:21,120 --> 00:05:27,060
about what different kinds of services

00:05:24,449 --> 00:05:29,430
are there if you look at this this group

00:05:27,060 --> 00:05:31,260
you have four chance you've managed

00:05:29,430 --> 00:05:33,690
services which are organized through the

00:05:31,260 --> 00:05:36,120
platforms through the marketplace or you

00:05:33,690 --> 00:05:39,750
want to provide as apps or something you

00:05:36,120 --> 00:05:41,760
have two other apps you can behind them

00:05:39,750 --> 00:05:44,370
like a database to an application or you

00:05:41,760 --> 00:05:47,250
have something more abstract you want

00:05:44,370 --> 00:05:51,060
only to manage but not to bind to an

00:05:47,250 --> 00:05:55,080
application if something which is

00:05:51,060 --> 00:05:57,930
includes interaction with your with your

00:05:55,080 --> 00:05:59,970
routing with your transport layer or

00:05:57,930 --> 00:06:03,509
something you have something like

00:05:59,970 --> 00:06:07,849
draining of the SIS logs and organizing

00:06:03,509 --> 00:06:13,229
of volumes and all that of that is

00:06:07,849 --> 00:06:18,960
organized using this is organized using

00:06:13,229 --> 00:06:21,479
some kind of interaction you all create

00:06:18,960 --> 00:06:25,560
a service broker by introducing a new

00:06:21,479 --> 00:06:27,270
URL to your cloud controller it's

00:06:25,560 --> 00:06:29,880
fetching the catalog from the service

00:06:27,270 --> 00:06:33,960
broker yet he is knowing what services

00:06:29,880 --> 00:06:36,180
are provided by the service broker the

00:06:33,960 --> 00:06:37,800
if you go to your marketplace of your

00:06:36,180 --> 00:06:40,169
Cloud Foundry platform you can see

00:06:37,800 --> 00:06:40,860
what's provided by the service brokers

00:06:40,169 --> 00:06:43,199
they are

00:06:40,860 --> 00:06:45,389
and you can create a service which means

00:06:43,199 --> 00:06:47,189
the cloud controller asks the service

00:06:45,389 --> 00:06:49,969
broker for providing an instance for

00:06:47,189 --> 00:06:54,870
example the service broker decides to

00:06:49,969 --> 00:06:57,270
install a new MySQL server then if you

00:06:54,870 --> 00:07:00,330
want to bind your your application

00:06:57,270 --> 00:07:02,520
against the service instance your cloud

00:07:00,330 --> 00:07:05,460
controller asks for binding which means

00:07:02,520 --> 00:07:08,069
he gets a new user on the database he

00:07:05,460 --> 00:07:09,479
gets your password and provides it to

00:07:08,069 --> 00:07:12,000
your application as an environment

00:07:09,479 --> 00:07:14,520
environment variable so as a developer

00:07:12,000 --> 00:07:17,610
you don't have to care about how to

00:07:14,520 --> 00:07:20,219
connect your application to your to your

00:07:17,610 --> 00:07:23,699
database it's done by the platform you

00:07:20,219 --> 00:07:26,870
don't have to interact actively getting

00:07:23,699 --> 00:07:31,080
oh what was the user name for my

00:07:26,870 --> 00:07:33,330
application there on that database don't

00:07:31,080 --> 00:07:34,379
care you say connect to this database

00:07:33,330 --> 00:07:37,500
that's it

00:07:34,379 --> 00:07:39,719
the rest is done by the platform you

00:07:37,500 --> 00:07:43,620
only name the database instance you want

00:07:39,719 --> 00:07:46,440
to connect you and also you can delete

00:07:43,620 --> 00:07:48,839
this credentials and remove the instance

00:07:46,440 --> 00:07:53,879
so the whole lifecycle of your services

00:07:48,839 --> 00:07:56,940
is organized through this API and it's

00:07:53,879 --> 00:08:00,659
like a can lock of API calls REST API

00:07:56,940 --> 00:08:02,879
cause which is now called the open

00:08:00,659 --> 00:08:04,710
service broker APR because the Cloud

00:08:02,879 --> 00:08:08,520
Foundry Foundation and the kubernetes

00:08:04,710 --> 00:08:10,860
foundation got together and said why the

00:08:08,520 --> 00:08:13,860
hell should we organize this for each

00:08:10,860 --> 00:08:16,500
platform on itself services are

00:08:13,860 --> 00:08:18,919
something we have to provide for all

00:08:16,500 --> 00:08:21,779
applications running in kubernetes

00:08:18,919 --> 00:08:24,659
applications running on Cloud Foundry so

00:08:21,779 --> 00:08:27,360
we should have in a multi cloud system

00:08:24,659 --> 00:08:29,460
should have some central common

00:08:27,360 --> 00:08:31,979
knowledge about how to get a service

00:08:29,460 --> 00:08:34,589
whatever it is even if it's a

00:08:31,979 --> 00:08:36,510
application running on side of Cloud

00:08:34,589 --> 00:08:44,339
Foundry provided back to other

00:08:36,510 --> 00:08:46,800
applications so what does it mean if we

00:08:44,339 --> 00:08:49,620
have a for example going back to your

00:08:46,800 --> 00:08:53,819
idea of the database we may have an

00:08:49,620 --> 00:08:54,720
existing cluster a DBMS installed inside

00:08:53,819 --> 00:08:57,480
our

00:08:54,720 --> 00:09:01,230
system now we want to provide it back to

00:08:57,480 --> 00:09:04,290
our to our applications so we provide a

00:09:01,230 --> 00:09:07,579
service broker organizing the access to

00:09:04,290 --> 00:09:10,259
the database DBMS may be organizing in

00:09:07,579 --> 00:09:13,620
creation of databases inside the

00:09:10,259 --> 00:09:16,500
existing DBMS or maybe we want to deploy

00:09:13,620 --> 00:09:19,980
a virtual machine with a new

00:09:16,500 --> 00:09:22,319
installation of a DBMS system as a test

00:09:19,980 --> 00:09:26,220
instance for our developers so they

00:09:22,319 --> 00:09:28,560
don't crash on the existing DBMS system

00:09:26,220 --> 00:09:32,610
we use for production or maybe we have

00:09:28,560 --> 00:09:35,220
this heavy load application which uses a

00:09:32,610 --> 00:09:40,110
really really big big bay in a database

00:09:35,220 --> 00:09:43,889
and which has to be aah a so we provide

00:09:40,110 --> 00:09:47,180
a personal cluster for this application

00:09:43,889 --> 00:09:49,920
which has to be there if you need it you

00:09:47,180 --> 00:09:51,269
we want to speed up the deployment of

00:09:49,920 --> 00:09:53,100
our production environment

00:09:51,269 --> 00:09:56,160
this has to be automated so we have to

00:09:53,100 --> 00:10:03,439
get fast a new cluster for it for

00:09:56,160 --> 00:10:06,449
example so rest api service broke

00:10:03,439 --> 00:10:09,410
management of clusters seems to be a

00:10:06,449 --> 00:10:13,500
little hard stuff if you want your

00:10:09,410 --> 00:10:17,730
something like in MySQL database or in

00:10:13,500 --> 00:10:19,980
Postgres cask where there is in the

00:10:17,730 --> 00:10:22,889
Cloud Foundry community several projects

00:10:19,980 --> 00:10:24,629
organizing the development of open

00:10:22,889 --> 00:10:28,379
source implementations of service

00:10:24,629 --> 00:10:32,279
brokers and there are two main lines

00:10:28,379 --> 00:10:35,879
here it's the the go framework and here

00:10:32,279 --> 00:10:38,430
we have a Java framework and there is

00:10:35,879 --> 00:10:41,220
the idea behind these two project is

00:10:38,430 --> 00:10:43,199
that not everyone who wants to get a

00:10:41,220 --> 00:10:48,059
service broker for organizing his stuff

00:10:43,199 --> 00:10:50,189
needs to re-implement all that here I'm

00:10:48,059 --> 00:10:53,279
talking a little bit about our Java

00:10:50,189 --> 00:10:55,709
framework we started to use a girl

00:10:53,279 --> 00:10:58,829
sitting in around exactly thinking about

00:10:55,709 --> 00:11:01,399
that at that time everyone implemented

00:10:58,829 --> 00:11:04,410
its own service broker from scratch

00:11:01,399 --> 00:11:06,000
reimplemented the whole API the whole

00:11:04,410 --> 00:11:09,000
lifecycle management

00:11:06,000 --> 00:11:11,310
every time you if he wanted to people

00:11:09,000 --> 00:11:14,759
there was a MySQL service broker written

00:11:11,310 --> 00:11:17,100
in Java and then someone said oh let's

00:11:14,759 --> 00:11:18,990
do it MongoDB service broker so you re

00:11:17,100 --> 00:11:22,889
implemented how all this the whole staff

00:11:18,990 --> 00:11:25,949
and at that time we said no there has to

00:11:22,889 --> 00:11:28,649
be framework for that and we implemented

00:11:25,949 --> 00:11:31,740
is using a java runtime environment a

00:11:28,649 --> 00:11:34,829
1.8 as microservice standalone server

00:11:31,740 --> 00:11:39,839
and cloud native application using

00:11:34,829 --> 00:11:45,930
spring boot I hope you can see it from

00:11:39,839 --> 00:11:48,540
the colors of the Beamer if you look our

00:11:45,930 --> 00:11:51,779
framework or what it's blue you don't

00:11:48,540 --> 00:11:53,939
have to re-implement the only thing you

00:11:51,779 --> 00:11:57,540
have to care about is what does it mean

00:11:53,939 --> 00:12:01,310
for MySQL if I have a new instance what

00:11:57,540 --> 00:12:04,680
does it mean for MySQL if I create a new

00:12:01,310 --> 00:12:06,540
binding what does it mean yeah here we

00:12:04,680 --> 00:12:10,350
create for example if you are looking at

00:12:06,540 --> 00:12:16,500
an existing service here that means I

00:12:10,350 --> 00:12:22,199
create a database in the DM DBMS for

00:12:16,500 --> 00:12:26,629
five lines of JDBC code or SQL code you

00:12:22,199 --> 00:12:30,269
have to run for create the database some

00:12:26,629 --> 00:12:33,870
some configurations like the code and

00:12:30,269 --> 00:12:38,339
the codec some if you want to what

00:12:33,870 --> 00:12:40,829
collation do you want and so on and here

00:12:38,339 --> 00:12:45,959
service binding means creating a user

00:12:40,829 --> 00:12:50,399
providing with a correct role roughly

00:12:45,959 --> 00:12:52,740
spoke the whole rest you can reuse from

00:12:50,399 --> 00:12:55,620
the framework so if you want to use a

00:12:52,740 --> 00:12:58,860
get a MongoDB service broker you only

00:12:55,620 --> 00:13:02,610
exchange these parts here the rest stays

00:12:58,860 --> 00:13:05,490
the same while you're talking here is

00:13:02,610 --> 00:13:07,860
now we want to run our service broke on

00:13:05,490 --> 00:13:13,110
a Cloud Foundry platform on side of

00:13:07,860 --> 00:13:14,970
OpenStack so why do not really use our

00:13:13,110 --> 00:13:17,250
service broker to orchestrate our

00:13:14,970 --> 00:13:20,490
OpenStack platform for providing us with

00:13:17,250 --> 00:13:22,590
the VMS and so on on the installation on

00:13:20,490 --> 00:13:25,950
side of it

00:13:22,590 --> 00:13:29,600
for example one use case one of our

00:13:25,950 --> 00:13:32,610
customers where clerk consulting company

00:13:29,600 --> 00:13:35,190
has this stack of OpenStack on site

00:13:32,610 --> 00:13:37,980
Cloud Foundry installations call they

00:13:35,190 --> 00:13:41,240
call them mesh cloud our German based

00:13:37,980 --> 00:13:44,700
European based service provider for

00:13:41,240 --> 00:13:49,920
public cloud and they have this idea of

00:13:44,700 --> 00:13:53,850
several tinier and smaller cloud

00:13:49,920 --> 00:13:56,850
providers and companies with with

00:13:53,850 --> 00:13:58,950
private clouds won't connect them all

00:13:56,850 --> 00:14:01,050
running with OpenStack and cloud foundry

00:13:58,950 --> 00:14:06,270
and have a layer on it so you want

00:14:01,050 --> 00:14:10,320
something like a service catalog from

00:14:06,270 --> 00:14:14,010
one to the other with a seamless catalog

00:14:10,320 --> 00:14:16,170
on it but underneath the deployment is

00:14:14,010 --> 00:14:19,650
different because they differ also in

00:14:16,170 --> 00:14:21,000
the under in the platform underneath so

00:14:19,650 --> 00:14:23,280
you have the problem that you have to

00:14:21,000 --> 00:14:27,870
look there and there so what we

00:14:23,280 --> 00:14:31,020
introduced is a configure able service

00:14:27,870 --> 00:14:32,880
catalog you provide your application

00:14:31,020 --> 00:14:34,800
your service broker you deploy on side

00:14:32,880 --> 00:14:37,530
of your Cloud Foundry installation at

00:14:34,800 --> 00:14:40,020
some provider as a application inside

00:14:37,530 --> 00:14:42,450
Cloud Foundry with the description which

00:14:40,020 --> 00:14:47,730
services he was should introduce to the

00:14:42,450 --> 00:14:50,760
platform and then you can introduce some

00:14:47,730 --> 00:14:54,170
meteor information metadata for the

00:14:50,760 --> 00:14:58,080
configuration how to deploy and then

00:14:54,170 --> 00:15:06,490
maybe introduce a existing service bro

00:14:58,080 --> 00:15:09,850
existing cluster for management so bad

00:15:06,490 --> 00:15:13,990
when it comes to OpenStack you want also

00:15:09,850 --> 00:15:17,410
to orchestrate the things you want to do

00:15:13,990 --> 00:15:20,860
a cluster on its own you want to say now

00:15:17,410 --> 00:15:24,310
I want this big cluster turnouts MySQL

00:15:20,860 --> 00:15:28,060
some kind of configuration I have this

00:15:24,310 --> 00:15:29,770
idea in mind what it should be so you

00:15:28,060 --> 00:15:31,899
came to the point where you have to say

00:15:29,770 --> 00:15:36,490
I have to have a blueprint for it and

00:15:31,899 --> 00:15:38,290
here you can say maybe it's MySQL class

00:15:36,490 --> 00:15:41,800
over here that we call back the right

00:15:38,290 --> 00:15:43,870
thing here or the personal cluster the

00:15:41,800 --> 00:15:45,790
existing class is easy so you can also

00:15:43,870 --> 00:15:49,690
connect your app with a service broker

00:15:45,790 --> 00:15:53,709
you can get nearly every kind of service

00:15:49,690 --> 00:15:57,459
broker you find open-source but that

00:15:53,709 --> 00:16:01,500
doesn't go that easy so what do we do we

00:15:57,459 --> 00:16:04,390
use heat heat is for the people here I

00:16:01,500 --> 00:16:07,029
think it's not not something you for the

00:16:04,390 --> 00:16:10,180
ones who is heat is an orchestration

00:16:07,029 --> 00:16:13,200
suite inside of OpenStack which uses

00:16:10,180 --> 00:16:16,020
templating for organizing resources

00:16:13,200 --> 00:16:19,990
inside of OpenStack so you can easily

00:16:16,020 --> 00:16:22,900
have a blueprint about I want this VM I

00:16:19,990 --> 00:16:25,870
wanted with this network I want to have

00:16:22,900 --> 00:16:30,400
it a floating IP and so on and then I

00:16:25,870 --> 00:16:34,480
want to install this script on it and by

00:16:30,400 --> 00:16:36,670
that you can easily define kinds of

00:16:34,480 --> 00:16:40,480
service blueprints you want to provide

00:16:36,670 --> 00:16:43,120
to your customers this would be like

00:16:40,480 --> 00:16:44,650
look like here you have on the on the

00:16:43,120 --> 00:16:47,080
top side you have the description of

00:16:44,650 --> 00:16:50,680
parameters you hand in from the service

00:16:47,080 --> 00:16:52,900
broker to the heat template then you

00:16:50,680 --> 00:16:55,959
introduce your resource block where you

00:16:52,900 --> 00:16:59,350
define servers where you define an

00:16:55,959 --> 00:17:01,089
installation scripts maybe and on side

00:16:59,350 --> 00:17:03,120
then you define something like

00:17:01,089 --> 00:17:08,679
persistent volumes for your databases

00:17:03,120 --> 00:17:12,850
and then you believe deployed to your to

00:17:08,679 --> 00:17:15,100
your OpenStack installation and if we go

00:17:12,850 --> 00:17:19,589
back it's this part of your deploy

00:17:15,100 --> 00:17:26,120
deployment process but that's some

00:17:19,589 --> 00:17:29,640
kind of default default domain problem

00:17:26,120 --> 00:17:35,640
maybe something more fancy if we go back

00:17:29,640 --> 00:17:38,520
here let's say I have an custom domain

00:17:35,640 --> 00:17:42,600
for my application which is my

00:17:38,520 --> 00:17:46,289
application org and I want to be

00:17:42,600 --> 00:17:49,710
providing it to some public cloud and I

00:17:46,289 --> 00:17:53,000
want to have HTTPS with still s

00:17:49,710 --> 00:17:55,620
termination on the load balancer side if

00:17:53,000 --> 00:17:58,260
I go to a public cloud I have the

00:17:55,620 --> 00:18:03,809
problem that I have to provide my server

00:17:58,260 --> 00:18:07,830
my my public cloud provider with access

00:18:03,809 --> 00:18:13,740
to my certificate because if you want to

00:18:07,830 --> 00:18:16,649
terminate a one slide back I'm going to

00:18:13,740 --> 00:18:18,000
fast so you have to your user going

00:18:16,649 --> 00:18:19,860
through the cloud formally to your

00:18:18,000 --> 00:18:23,820
application which is hosted in the

00:18:19,860 --> 00:18:25,980
private network if you look back and the

00:18:23,820 --> 00:18:27,990
network traffic is looking like this you

00:18:25,980 --> 00:18:29,520
go to the load balancer beforehand of

00:18:27,990 --> 00:18:33,320
your Cloud Foundry installation then you

00:18:29,520 --> 00:18:36,450
have some go router using the routing

00:18:33,320 --> 00:18:40,409
using the domain management I talked

00:18:36,450 --> 00:18:42,890
about earlier and there are two

00:18:40,409 --> 00:18:46,830
possibilities you can have the TLS

00:18:42,890 --> 00:18:49,350
termination on side of your load

00:18:46,830 --> 00:18:52,260
balancer which is part of the law is

00:18:49,350 --> 00:18:54,390
there installed and afterwards is done a

00:18:52,260 --> 00:18:55,980
new HTTP connection from the load

00:18:54,390 --> 00:19:00,960
balance to the application why is it

00:18:55,980 --> 00:19:02,730
needed because here we are scaling here

00:19:00,960 --> 00:19:04,679
don't have this one virtual machine

00:19:02,730 --> 00:19:07,039
installed where you have this

00:19:04,679 --> 00:19:09,600
application and you know the IP address

00:19:07,039 --> 00:19:11,909
because you scale you maybe have here

00:19:09,600 --> 00:19:13,620
hundreds or thousands of application

00:19:11,909 --> 00:19:15,480
instances on different nodes with

00:19:13,620 --> 00:19:18,600
different IP addresses but they're

00:19:15,480 --> 00:19:22,399
organized with the same Internet address

00:19:18,600 --> 00:19:26,130
so you catch up here the connection

00:19:22,399 --> 00:19:29,520
terminate the TLS and make a new HTTP

00:19:26,130 --> 00:19:33,240
connection right you the to the

00:19:29,520 --> 00:19:35,850
application instance one variation of is

00:19:33,240 --> 00:19:39,120
is to nomination at the go router which

00:19:35,850 --> 00:19:41,790
is widely more common in case you have

00:19:39,120 --> 00:19:49,710
more distance using the original

00:19:41,790 --> 00:19:53,970
certificate but we said we don't we want

00:19:49,710 --> 00:19:55,410
to use our personal certificate here we

00:19:53,970 --> 00:19:59,190
want to provide it to the prover

00:19:55,410 --> 00:20:03,720
to the cloud provider a year to be

00:19:59,190 --> 00:20:06,920
installed on side of the router if

00:20:03,720 --> 00:20:09,080
you're more into it how to deploy

00:20:06,920 --> 00:20:11,280
certificates yeah it's not that simple

00:20:09,080 --> 00:20:13,080
that you have because you can only

00:20:11,280 --> 00:20:16,440
install one certificate here and you

00:20:13,080 --> 00:20:20,460
have to use a combination then that it's

00:20:16,440 --> 00:20:23,520
all also working there but roughly

00:20:20,460 --> 00:20:25,620
spoken you it's the excess years at the

00:20:23,520 --> 00:20:29,840
cloud provider here's access to your to

00:20:25,620 --> 00:20:33,210
your certificate and can manage it

00:20:29,840 --> 00:20:34,800
but you don't want that because why the

00:20:33,210 --> 00:20:39,230
hell should that cloud provider have

00:20:34,800 --> 00:20:43,290
access to your SSH HTTP SSL certificate

00:20:39,230 --> 00:20:46,100
so what you can what we are working to

00:20:43,290 --> 00:20:51,600
add was the cloud service broker

00:20:46,100 --> 00:20:55,010
providing you and access of this

00:20:51,600 --> 00:20:59,070
termination process and you have this

00:20:55,010 --> 00:21:02,490
desire this blueprint description in the

00:20:59,070 --> 00:21:04,710
internet about Barbican with Elbaz for

00:21:02,490 --> 00:21:06,870
OpenStack so you can you have Barbican

00:21:04,710 --> 00:21:10,470
which is a security store a secure store

00:21:06,870 --> 00:21:13,170
in OpenStack which can manage Security's

00:21:10,470 --> 00:21:16,050
a credentials and such things

00:21:13,170 --> 00:21:19,800
certificates and make them accessible

00:21:16,050 --> 00:21:22,380
for applications but does not hand over

00:21:19,800 --> 00:21:26,670
the ownership of it because the

00:21:22,380 --> 00:21:30,330
application comes asks for with some

00:21:26,670 --> 00:21:35,250
secret if it can use it then the

00:21:30,330 --> 00:21:37,830
Barbican store allows it and it's

00:21:35,250 --> 00:21:39,330
providing it back and this is combined

00:21:37,830 --> 00:21:42,360
able with the Elba's with the load

00:21:39,330 --> 00:21:45,330
balancer as a service and what we we've

00:21:42,360 --> 00:21:46,539
done is that we can produce this

00:21:45,330 --> 00:21:50,979
combination

00:21:46,539 --> 00:21:57,879
in with the heat template so you go calm

00:21:50,979 --> 00:22:01,869
and the user gives puts is certificate

00:21:57,879 --> 00:22:05,320
in baroque install secure store and from

00:22:01,869 --> 00:22:08,289
that container the elbas is deployed

00:22:05,320 --> 00:22:11,589
which is using this certificate the

00:22:08,289 --> 00:22:14,649
cloud provider has non direct access to

00:22:11,589 --> 00:22:16,539
the certificate you cannot manage it you

00:22:14,649 --> 00:22:20,759
can it copy it you can use it for

00:22:16,539 --> 00:22:23,859
something else but only with the Elba's

00:22:20,759 --> 00:22:27,309
so it's secured that the cloud provider

00:22:23,859 --> 00:22:29,679
if the if you delete that container

00:22:27,309 --> 00:22:33,279
isn't able to do something nasty with it

00:22:29,679 --> 00:22:38,859
with it so it's in your control to

00:22:33,279 --> 00:22:42,339
organize your certificate and if you're

00:22:38,859 --> 00:22:46,929
going back here what we have to do we

00:22:42,339 --> 00:22:52,569
exchange these parts so we introduce and

00:22:46,929 --> 00:22:56,440
say ok it's something different for for

00:22:52,569 --> 00:22:58,479
reusing that parts of the count we have

00:22:56,440 --> 00:23:02,579
not MySQL to install but we have to

00:22:58,479 --> 00:23:05,559
organize some elbas deployment and some

00:23:02,579 --> 00:23:07,479
real some attachment of the barbecue

00:23:05,559 --> 00:23:11,909
right Barbican store which we can

00:23:07,479 --> 00:23:16,329
provide with with properties from here

00:23:11,909 --> 00:23:18,369
so what's the effort ok you open snake

00:23:16,329 --> 00:23:20,829
installation has to support needs

00:23:18,369 --> 00:23:24,639
support for Elba's and Barbican you need

00:23:20,829 --> 00:23:27,099
heat you have to implement some hand

00:23:24,639 --> 00:23:30,399
over mechanism of the container ID if

00:23:27,099 --> 00:23:32,440
Barbican which smell or or less defining

00:23:30,399 --> 00:23:35,499
that the property has to be handed over

00:23:32,440 --> 00:23:40,419
to you the heat template which is nearly

00:23:35,499 --> 00:23:43,779
already there you have to implement the

00:23:40,419 --> 00:23:47,019
public IP IP expose 'l fro for the

00:23:43,779 --> 00:23:50,440
elbows and which is part of the heat

00:23:47,019 --> 00:23:53,019
template define service and service plan

00:23:50,440 --> 00:23:56,739
for the marketplace we get the service

00:23:53,019 --> 00:24:00,930
broker so it test access to your heat to

00:23:56,739 --> 00:24:04,770
your heat api and deploy it

00:24:00,930 --> 00:24:08,260
the upload for the customer is much less

00:24:04,770 --> 00:24:10,650
he goes to your horizon or your with

00:24:08,260 --> 00:24:13,630
this OpenStack CLI at the OpenStack

00:24:10,650 --> 00:24:17,200
uploads the certificate to Barbican

00:24:13,630 --> 00:24:19,090
container creates a service instance and

00:24:17,200 --> 00:24:23,770
by that providing the idea of the

00:24:19,090 --> 00:24:26,800
Barbican store and make a DNS entry

00:24:23,770 --> 00:24:31,630
somewhere pointing to the IP of the load

00:24:26,800 --> 00:24:33,700
balancer and what's the most effort in

00:24:31,630 --> 00:24:37,660
the soul chain because we use a

00:24:33,700 --> 00:24:42,190
framework for it it's producing the heat

00:24:37,660 --> 00:24:46,600
template which people using heat more

00:24:42,190 --> 00:24:49,240
often now it's not that big deal easily

00:24:46,600 --> 00:24:51,520
done you don't even have to use a

00:24:49,240 --> 00:24:55,270
software developer for it because most

00:24:51,520 --> 00:24:58,330
ops people know how to use heat and so

00:24:55,270 --> 00:25:00,640
you can fear speed-up providing

00:24:58,330 --> 00:25:03,760
additional services of different kinds

00:25:00,640 --> 00:25:07,600
to your platform so you can speed up

00:25:03,760 --> 00:25:10,300
things you don't have to have some group

00:25:07,600 --> 00:25:13,090
of software developers in some Bureau

00:25:10,300 --> 00:25:15,760
somewhere producing you every new

00:25:13,090 --> 00:25:17,860
service broker which is kind with this

00:25:15,760 --> 00:25:22,030
with a framework like this you can

00:25:17,860 --> 00:25:24,570
easily speed up by having this this

00:25:22,030 --> 00:25:28,360
heavy load of software development

00:25:24,570 --> 00:25:31,060
already done only some twitches and then

00:25:28,360 --> 00:25:33,280
you can think about the problem itself

00:25:31,060 --> 00:25:37,690
about the service and how to you manage

00:25:33,280 --> 00:25:39,820
it and because we're open-source like

00:25:37,690 --> 00:25:42,670
most things in the cloud foundry for

00:25:39,820 --> 00:25:45,280
earned and Foundation and we're happy

00:25:42,670 --> 00:25:48,340
for contribution we happy for if you

00:25:45,280 --> 00:25:51,790
want to open-source your own service

00:25:48,340 --> 00:25:55,360
broker if you want to bring in in our

00:25:51,790 --> 00:25:58,000
framework yourself if you have bug fixes

00:25:55,360 --> 00:26:01,240
if you want to help us providing our

00:25:58,000 --> 00:26:03,940
documentation if you have tips for us we

00:26:01,240 --> 00:26:06,300
are happy for it you can find us on

00:26:03,940 --> 00:26:06,300
github

00:26:08,430 --> 00:26:14,070
don't if you go to a we are at our

00:26:11,580 --> 00:26:15,870
companies our github page avala and then

00:26:14,070 --> 00:26:19,880
CF service broker Cloud Foundry service

00:26:15,870 --> 00:26:23,910
broker we're actually in contact with

00:26:19,880 --> 00:26:26,160
over Steve Greenberg we hope to get into

00:26:23,910 --> 00:26:30,060
contact with the original Java service

00:26:26,160 --> 00:26:32,340
broker team which made this original

00:26:30,060 --> 00:26:37,010
blueprint and sales broker so we can get

00:26:32,340 --> 00:26:40,920
it back on the on the incubator on the

00:26:37,010 --> 00:26:45,590
Cloud Foundry foundation thing project

00:26:40,920 --> 00:26:50,970
so we get one codebase back don't divide

00:26:45,590 --> 00:26:54,920
positive sum game thing if you have

00:26:50,970 --> 00:26:54,920
questions don't hesitate to contact us

00:26:55,280 --> 00:27:04,350
my email address or general email

00:26:58,410 --> 00:27:06,000
address our company's github account if

00:27:04,350 --> 00:27:08,340
you have any questions please use the

00:27:06,000 --> 00:27:11,310
microphones on the left on the right

00:27:08,340 --> 00:27:14,750
side so because we're recording so the

00:27:11,310 --> 00:27:14,750
people get it too

00:27:17,070 --> 00:27:22,950
[Applause]

00:27:43,450 --> 00:27:49,510
hi thanks for the presentation just

00:27:46,950 --> 00:27:52,120
wondering if we have minutes left I

00:27:49,510 --> 00:27:59,710
don't know yeah well II I think yes you

00:27:52,120 --> 00:28:03,520
could show us some some code mean like

00:27:59,710 --> 00:28:06,940
the ML code or whatever you use to do

00:28:03,520 --> 00:28:09,370
this example deployment that you worship

00:28:06,940 --> 00:28:11,890
I'm not asking for a demonstration but

00:28:09,370 --> 00:28:16,060
to show us a little bit inna with

00:28:11,890 --> 00:28:17,680
actually recycle code to see how is cop

00:28:16,060 --> 00:28:21,210
would be actually implemented more or

00:28:17,680 --> 00:28:24,330
less in a rough general manner

00:28:21,210 --> 00:28:24,330
thank you

00:28:38,560 --> 00:28:46,150
so if you go to the webpage you have

00:28:43,120 --> 00:28:47,620
this you find only the documentation of

00:28:46,150 --> 00:28:51,010
the project because we've spread it

00:28:47,620 --> 00:28:54,340
about several repositories and there's

00:28:51,010 --> 00:28:56,020
in the topics list the repositories page

00:28:54,340 --> 00:28:58,600
where you can find the different

00:28:56,020 --> 00:29:00,340
repositories with a declaration which

00:28:58,600 --> 00:29:09,390
part they're covering from the framework

00:29:00,340 --> 00:29:13,450
and if we jump right to the winner bead

00:29:09,390 --> 00:29:17,290
we're the link the bat power na dead

00:29:13,450 --> 00:29:28,950
link that's bad I have to talk about

00:29:17,290 --> 00:29:28,950
with the guys so let's jump

00:29:32,410 --> 00:29:39,530
where

00:29:34,560 --> 00:29:39,530
and they really dad that

00:29:47,360 --> 00:30:04,909
so the main trick yeah sure so because

00:30:02,600 --> 00:30:09,129
we have spring boot we have this the

00:30:04,909 --> 00:30:12,259
spin mechanism so we can provide several

00:30:09,129 --> 00:30:16,519
connections to OpenStack on parallel

00:30:12,259 --> 00:30:18,470
ready to trick a little bit so we can so

00:30:16,519 --> 00:30:21,230
your customers of your service broker

00:30:18,470 --> 00:30:23,720
can create service instances in parallel

00:30:21,230 --> 00:30:25,460
without interfering often with you when

00:30:23,720 --> 00:30:28,509
you have some database drivers or

00:30:25,460 --> 00:30:31,879
something and you have the problem that

00:30:28,509 --> 00:30:34,730
with JDBC or something these standard

00:30:31,879 --> 00:30:38,869
clients use a connection to one database

00:30:34,730 --> 00:30:40,700
only and so we have to trick this here a

00:30:38,869 --> 00:30:49,659
little bit so we can connect two

00:30:40,700 --> 00:30:49,659
different directions we organize it yeah

00:30:51,340 --> 00:30:56,509
sorry I think is blaming myself very

00:30:53,690 --> 00:30:58,789
badly this is the actual code of the

00:30:56,509 --> 00:31:01,480
server broker right I was wondering

00:30:58,789 --> 00:31:06,230
example of how to use it

00:31:01,480 --> 00:31:08,179
yeah the yamen files yeah well you have

00:31:06,230 --> 00:31:11,989
that would be I wanted to show something

00:31:08,179 --> 00:31:14,799
here and then jump jump there yeah so we

00:31:11,989 --> 00:31:17,779
have this this area this factory

00:31:14,799 --> 00:31:23,840
organizing stacks the deployment of

00:31:17,779 --> 00:31:27,050
stacks jump back

00:31:23,840 --> 00:31:27,050
[Music]

00:31:29,440 --> 00:31:36,190
if you want to introduce a new service

00:31:32,080 --> 00:31:39,760
broker ma'am we have this these

00:31:36,190 --> 00:31:43,350
different interfaces you've seen on the

00:31:39,760 --> 00:31:46,720
blue slides for providing in

00:31:43,350 --> 00:31:49,120
implementations like new like the

00:31:46,720 --> 00:31:53,830
OpenStack platform service or the the

00:31:49,120 --> 00:31:59,140
MySQL deployment service and there we

00:31:53,830 --> 00:32:09,460
have this trick with stack handlers this

00:31:59,140 --> 00:32:13,960
is the raw interface there which are

00:32:09,460 --> 00:32:16,150
able to organize things like image

00:32:13,960 --> 00:32:21,030
management or something we want to

00:32:16,150 --> 00:32:25,090
provide and need more or less organizing

00:32:21,030 --> 00:32:27,250
reconfiguration of some map of of

00:32:25,090 --> 00:32:31,570
properties we hand over to the heat

00:32:27,250 --> 00:32:34,030
template so you can easily organize

00:32:31,570 --> 00:32:37,840
which which images should they are which

00:32:34,030 --> 00:32:41,230
key pair and so on which is starting

00:32:37,840 --> 00:32:43,240
with the providing of the of the user to

00:32:41,230 --> 00:32:46,120
the service to the cloud control of

00:32:43,240 --> 00:32:48,340
Cloud Foundry the your want which

00:32:46,120 --> 00:32:51,460
parameters you want to introduce from

00:32:48,340 --> 00:32:53,950
their Cloud Foundry you put them to the

00:32:51,460 --> 00:32:56,770
service broker through the API a calls

00:32:53,950 --> 00:32:59,200
then they are enriched with general

00:32:56,770 --> 00:33:01,570
parameters from the configuration they

00:32:59,200 --> 00:33:04,420
are enriched with things we introduced

00:33:01,570 --> 00:33:06,610
in the service plants we enrich it with

00:33:04,420 --> 00:33:08,710
platform specific configuration like

00:33:06,610 --> 00:33:12,510
OpenStack or something what does it mean

00:33:08,710 --> 00:33:15,070
for OpenStack like a standard default

00:33:12,510 --> 00:33:17,500
image ID or something we want to use

00:33:15,070 --> 00:33:21,460
which is part of our property list and

00:33:17,500 --> 00:33:24,220
then you get a stack of a map of big big

00:33:21,460 --> 00:33:27,430
map of properties and then we go they

00:33:24,220 --> 00:33:31,150
are in same good if we want to provide a

00:33:27,430 --> 00:33:36,130
service we have to organize standard

00:33:31,150 --> 00:33:38,830
access to two ports because the list of

00:33:36,130 --> 00:33:43,150
our IP addresses if we do not use and

00:33:38,830 --> 00:33:46,180
DNS has to be stable so if we run a

00:33:43,150 --> 00:33:49,120
kill some servers they must remain so we

00:33:46,180 --> 00:33:51,970
have a stack only for organizing ports

00:33:49,120 --> 00:33:54,520
maybe then we have something like

00:33:51,970 --> 00:33:59,230
persistent volumes we which want to keep

00:33:54,520 --> 00:34:02,140
if they if the service are are killed

00:33:59,230 --> 00:34:04,750
and new instantiated so we have a stack

00:34:02,140 --> 00:34:07,360
organizing volumes and then we have some

00:34:04,750 --> 00:34:10,919
central stack organizing the deployment

00:34:07,360 --> 00:34:13,000
of of our VMs may be as nested stack

00:34:10,919 --> 00:34:16,330
organizing different kinds of servers

00:34:13,000 --> 00:34:21,669
which is then put is provided by this

00:34:16,330 --> 00:34:23,980
original to other stacks getting the the

00:34:21,669 --> 00:34:27,429
properties from that from the port list

00:34:23,980 --> 00:34:30,750
and from that volumes using some

00:34:27,429 --> 00:34:33,040
software deployment installing

00:34:30,750 --> 00:34:39,550
organizing some volume attachments and

00:34:33,040 --> 00:34:44,350
so on slides got down and then you get a

00:34:39,550 --> 00:34:48,250
stack complete of a cluster I have had

00:34:44,350 --> 00:34:56,670
to tell about that because you see

00:34:48,250 --> 00:34:59,980
several several templates later on so

00:34:56,670 --> 00:35:03,010
but if you want to have it easy for test

00:34:59,980 --> 00:35:05,470
deployment you don't care about extra

00:35:03,010 --> 00:35:11,490
ports extra volume attachment and such

00:35:05,470 --> 00:35:15,720
on I can show you an easy and easy

00:35:11,490 --> 00:35:15,720
example here on the on the repository

00:35:16,140 --> 00:35:22,060
which is not that good code because we

00:35:19,000 --> 00:35:25,390
are actually a moving some code per base

00:35:22,060 --> 00:35:28,150
part so you don't have all on line here

00:35:25,390 --> 00:35:32,100
if you have more deep interest in it

00:35:28,150 --> 00:35:34,720
contact us we can provide you with it

00:35:32,100 --> 00:35:36,670
we're reorganizing our infrastructure

00:35:34,720 --> 00:35:41,460
that's because of the the dead links in

00:35:36,670 --> 00:35:45,040
the documentation and maybe we have some

00:35:41,460 --> 00:35:48,190
you see here for example the providing

00:35:45,040 --> 00:35:52,530
of the parameters which we got of out of

00:35:48,190 --> 00:35:52,530
our Java code provided and

00:35:53,570 --> 00:36:02,030
and coach organizing our service for

00:35:58,040 --> 00:36:06,800
example using here it's not the the

00:36:02,030 --> 00:36:11,750
software deployment groups about a some

00:36:06,800 --> 00:36:15,860
kind of script we download into into the

00:36:11,750 --> 00:36:18,800
server which is I say it's some change

00:36:15,860 --> 00:36:20,990
of the code base here and some volume

00:36:18,800 --> 00:36:23,180
attachment in volume and like I said

00:36:20,990 --> 00:36:26,090
this is a test for a test server they

00:36:23,180 --> 00:36:28,100
are not a cluster here it's only for for

00:36:26,090 --> 00:36:30,290
test purposes where if you want to have

00:36:28,100 --> 00:36:36,740
a test server so we didn't put that much

00:36:30,290 --> 00:36:40,760
effort in that deployment in this kind

00:36:36,740 --> 00:36:45,320
of it's a post-grad so it's only here

00:36:40,760 --> 00:36:50,270
for an example because we have other

00:36:45,320 --> 00:36:52,580
code bases for example for more like in

00:36:50,270 --> 00:36:55,640
rabbitmq cluster deploy organizing

00:36:52,580 --> 00:36:57,800
service broker which organizes RabbitMQ

00:36:55,640 --> 00:36:58,960
which has its own code bases or its own

00:36:57,800 --> 00:37:03,940
[Music]

00:36:58,960 --> 00:37:08,230
templates and so on what's interesting

00:37:03,940 --> 00:37:08,230
we talked about the red parts

00:37:19,190 --> 00:37:28,709
organizing a binding management in for

00:37:25,559 --> 00:37:33,209
evident queue it's more or less some

00:37:28,709 --> 00:37:35,039
organizing of the of the axis of the

00:37:33,209 --> 00:37:39,109
management with a super user account of

00:37:35,039 --> 00:37:42,569
the RabbitMQ cluster it's not that much

00:37:39,109 --> 00:37:47,239
lines of code and the most of it you

00:37:42,569 --> 00:37:50,339
have because the standard the default

00:37:47,239 --> 00:37:52,979
default frameworks for organizing the

00:37:50,339 --> 00:37:55,289
connection don't think about connecting

00:37:52,979 --> 00:37:56,719
with the one application against several

00:37:55,289 --> 00:37:59,430
clusters or several installations

00:37:56,719 --> 00:38:01,890
because they think oh yeah it's every

00:37:59,430 --> 00:38:03,569
time the same cluster and the most

00:38:01,890 --> 00:38:06,420
biggest problem when you're writing

00:38:03,569 --> 00:38:08,099
service broker is about thinking if we

00:38:06,420 --> 00:38:11,539
haven't this one single cluster we're

00:38:08,099 --> 00:38:16,349
organizing we have to think about

00:38:11,539 --> 00:38:18,180
multi-tenant in parallel connections to

00:38:16,349 --> 00:38:21,119
several clusters at the same time with

00:38:18,180 --> 00:38:24,059
different credentials and there it gets

00:38:21,119 --> 00:38:26,489
tricky yeah

00:38:24,059 --> 00:38:29,009
at the time now if you have more

00:38:26,489 --> 00:38:31,670
interested if we can talk down the floor

00:38:29,009 --> 00:38:31,670

YouTube URL: https://www.youtube.com/watch?v=-zlDJUT5ur8


