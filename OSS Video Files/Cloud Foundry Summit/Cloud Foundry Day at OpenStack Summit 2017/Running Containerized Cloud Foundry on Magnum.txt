Title: Running Containerized Cloud Foundry on Magnum
Publication date: 2017-05-16
Playlist: Cloud Foundry Day at OpenStack Summit 2017
Description: 
	In this talk we will demonstrate running a containerized Cloud Foundry system on top of OpenStack Magnum (using Kubernetes). We will talk about our experience containerizing Cloud Foundry and how it was made to work on Magnum, as well as running on other Kubernetes systems. We will be sharing interesting improvements and present the challenges of keeping highly available systems online and up-to-date.
Captions: 
	00:00:02,929 --> 00:00:09,990
welcome everyone to Cloud Foundry day at

00:00:05,970 --> 00:00:12,240
the OpenStack summit today I'm going to

00:00:09,990 --> 00:00:12,870
be talking about containerized cloud

00:00:12,240 --> 00:00:16,830
foundry

00:00:12,870 --> 00:00:19,170
on Magnum and it's going to be mostly

00:00:16,830 --> 00:00:20,789
about container izing cloud foundry then

00:00:19,170 --> 00:00:23,970
about getting that particularly onto

00:00:20,789 --> 00:00:26,939
Magnum my name is Jeff Hobbs I'm a

00:00:23,970 --> 00:00:29,340
director of engineering in Sousa cloud

00:00:26,939 --> 00:00:33,619
platforms area specifically focusing on

00:00:29,340 --> 00:00:33,619
cloud foundry and container technologies

00:00:33,710 --> 00:00:37,230
so a little bit about what we'll be

00:00:36,059 --> 00:00:39,899
going over one

00:00:37,230 --> 00:00:42,300
why are we here then just about

00:00:39,899 --> 00:00:44,309
container izing cloud foundry using it

00:00:42,300 --> 00:00:46,260
as a magnum as a base then putting the

00:00:44,309 --> 00:00:47,670
cloud foundry on top that I'll talk a

00:00:46,260 --> 00:00:51,020
little bit about where our current state

00:00:47,670 --> 00:00:53,789
is and what we'll be doing in the future

00:00:51,020 --> 00:00:57,780
I've set it up so I can talk mostly

00:00:53,789 --> 00:01:00,180
through this there's about 35 slides and

00:00:57,780 --> 00:01:02,910
then I've got a can demo that we'll get

00:01:00,180 --> 00:01:05,369
to because unfortunately the

00:01:02,910 --> 00:01:08,369
front-to-back it doesn't all happen in

00:01:05,369 --> 00:01:13,409
in the five minutes I I claimed that a

00:01:08,369 --> 00:01:15,600
tick earlier today so first you know why

00:01:13,409 --> 00:01:19,520
are we here everyone's looking at this a

00:01:15,600 --> 00:01:22,380
lot of people are working on their their

00:01:19,520 --> 00:01:25,619
application and environment transition

00:01:22,380 --> 00:01:28,350
from regular data center stuff out to

00:01:25,619 --> 00:01:31,409
the cloud and their apps moving from

00:01:28,350 --> 00:01:34,229
physical servers to VMs to containers

00:01:31,409 --> 00:01:37,740
and all of this is in the long-term

00:01:34,229 --> 00:01:43,560
hopefully about micro services and

00:01:37,740 --> 00:01:44,130
improved development process and I'm at

00:01:43,560 --> 00:01:46,320
Sousa

00:01:44,130 --> 00:01:48,030
where does Sousa fit into this I'll note

00:01:46,320 --> 00:01:50,520
that you know we'll we'll talk about the

00:01:48,030 --> 00:01:53,250
whole idea here we're really only

00:01:50,520 --> 00:01:55,380
talking about the top right corner where

00:01:53,250 --> 00:01:57,659
it says cloud foundry but all of these

00:01:55,380 --> 00:02:00,119
are elements of the Sousa stack all of

00:01:57,659 --> 00:02:03,630
these are open source so all of these

00:02:00,119 --> 00:02:06,659
elements you can play with you know

00:02:03,630 --> 00:02:08,100
right now if you want and I'll be

00:02:06,659 --> 00:02:12,410
talking a little bit more about some of

00:02:08,100 --> 00:02:12,410
them as they touch into cloud foundry

00:02:12,760 --> 00:02:19,629
container izing the obligatory container

00:02:15,610 --> 00:02:24,040
picture so first off who here actually

00:02:19,629 --> 00:02:31,060
runs a cloud foundry installation at you

00:02:24,040 --> 00:02:35,549
know at any level yeah so most so cloud

00:02:31,060 --> 00:02:39,489
foundry is usually deployed using Bosch

00:02:35,549 --> 00:02:41,950
and you know in a very simplistic way

00:02:39,489 --> 00:02:43,629
Bosch is a tool chain that tells you

00:02:41,950 --> 00:02:45,160
basically how to organize all the code

00:02:43,629 --> 00:02:48,549
for your software so that it can be

00:02:45,160 --> 00:02:54,400
easily deployed the specific aspect

00:02:48,549 --> 00:02:57,129
though is it deploys two VMs where you

00:02:54,400 --> 00:02:59,579
know you look at Cloud Foundry and ever

00:02:57,129 --> 00:03:02,079
since it's very version one

00:02:59,579 --> 00:03:04,090
instantiation it had a pretty clear

00:03:02,079 --> 00:03:05,920
delineation of what the processes were

00:03:04,090 --> 00:03:08,230
in fact many of them you could argue

00:03:05,920 --> 00:03:10,930
we're almost written in a nice twelve

00:03:08,230 --> 00:03:13,030
factor way yet still the standard way in

00:03:10,930 --> 00:03:15,370
which deployments happen for Cloud

00:03:13,030 --> 00:03:20,829
Foundry is always to this VM

00:03:15,370 --> 00:03:24,370
infrastructure and we wanted to deploy

00:03:20,829 --> 00:03:27,819
stuff to kubernetes so that's we wrote

00:03:24,370 --> 00:03:31,540
this tool called Fissel and it basically

00:03:27,819 --> 00:03:34,329
converts all these boss things in the VM

00:03:31,540 --> 00:03:36,880
centric a Bosch stuff into container

00:03:34,329 --> 00:03:40,599
specific implementation so that it can

00:03:36,880 --> 00:03:42,160
be run on kubernetes and which means you

00:03:40,599 --> 00:03:44,440
know Fissel knows how to automatically

00:03:42,160 --> 00:03:47,230
compile configure and run all of Cloud

00:03:44,440 --> 00:03:48,639
Foundry the nice side effect of using

00:03:47,230 --> 00:03:50,260
Fissel is that it gives you the

00:03:48,639 --> 00:03:53,349
mechanisms to make your deployment

00:03:50,260 --> 00:03:55,269
easier also for the end-user and allows

00:03:53,349 --> 00:03:58,599
you to deliver all these compiled bits

00:03:55,269 --> 00:04:00,459
in the form of images in a much more

00:03:58,599 --> 00:04:03,370
ready to run fashion and we'll talk a

00:04:00,459 --> 00:04:05,859
little bit about more about that so you

00:04:03,370 --> 00:04:08,049
know you're allowed to filter to what

00:04:05,859 --> 00:04:09,819
the user can really configure rather

00:04:08,049 --> 00:04:11,739
than the hundreds of things that Bosch

00:04:09,819 --> 00:04:13,959
gives you that some of these bits are

00:04:11,739 --> 00:04:17,919
very important to twiddle and others you

00:04:13,959 --> 00:04:21,419
shouldn't touch and the images ended up

00:04:17,919 --> 00:04:24,130
being configured in after Fissel

00:04:21,419 --> 00:04:26,300
configured just using environment

00:04:24,130 --> 00:04:30,979
variables like a twelve factor Apple

00:04:26,300 --> 00:04:32,810
be so the other aspect of it is

00:04:30,979 --> 00:04:34,250
everything that's done here is done in a

00:04:32,810 --> 00:04:37,849
way that maintains the Cloud Foundry

00:04:34,250 --> 00:04:41,659
Foundation certification and you know I

00:04:37,849 --> 00:04:44,090
note that you fish oil above the Bosch

00:04:41,659 --> 00:04:45,770
disintegrator and a lot of people looked

00:04:44,090 --> 00:04:49,400
at it that's kind of anti Bosch well

00:04:45,770 --> 00:04:52,909
it's not really it's an alternative that

00:04:49,400 --> 00:04:56,900
actually builds off of a certain state

00:04:52,909 --> 00:04:59,449
in the Bosch lifecycle the configuration

00:04:56,900 --> 00:05:02,030
life cycle and you know stops where it

00:04:59,449 --> 00:05:05,719
starts to think VMs and breaks it apart

00:05:02,030 --> 00:05:07,639
to think in in containers and it would

00:05:05,719 --> 00:05:09,500
be great to bring that further back but

00:05:07,639 --> 00:05:13,849
I'll just talk more really about where

00:05:09,500 --> 00:05:14,719
we are now so first off why can't we

00:05:13,849 --> 00:05:17,360
just use Bosch

00:05:14,719 --> 00:05:19,550
well Bosch is about virtual machines and

00:05:17,360 --> 00:05:22,759
that's not what we're we're targeting

00:05:19,550 --> 00:05:24,080
you know as as you kind of look around

00:05:22,759 --> 00:05:25,699
and you look around at the interest

00:05:24,080 --> 00:05:29,330
level of other people at the the

00:05:25,699 --> 00:05:31,370
conference you see that containers are

00:05:29,330 --> 00:05:32,990
are more and more interesting and more

00:05:31,370 --> 00:05:37,069
and more important and we wanted

00:05:32,990 --> 00:05:37,880
something for containers and container

00:05:37,069 --> 00:05:39,500
based workloads

00:05:37,880 --> 00:05:42,919
there's nothing about cloud foundry

00:05:39,500 --> 00:05:46,310
itself that prevents you from operating

00:05:42,919 --> 00:05:51,020
it in a containerized control plane but

00:05:46,310 --> 00:05:53,990
Bosch does not operate that way and also

00:05:51,020 --> 00:05:58,909
for science because you know we like to

00:05:53,990 --> 00:06:02,029
play with things so let's get into what

00:05:58,909 --> 00:06:07,310
what it is in teasing all these bits

00:06:02,029 --> 00:06:09,949
apart so first of all it's about it's

00:06:07,310 --> 00:06:11,870
about separating all the things over

00:06:09,949 --> 00:06:14,360
time you know Cloud Foundry which

00:06:11,870 --> 00:06:17,719
existed before bashed it then sort of

00:06:14,360 --> 00:06:20,300
Cloud Foundry was chef deployed and then

00:06:17,719 --> 00:06:23,990
sort of Bosch came into being and they

00:06:20,300 --> 00:06:25,520
became very tightly coupled cloud

00:06:23,990 --> 00:06:27,139
foundry components are generally

00:06:25,520 --> 00:06:29,930
composable and have well-defined

00:06:27,139 --> 00:06:32,389
boundaries and api's but ironically the

00:06:29,930 --> 00:06:34,250
those lines between Bosch and cloud

00:06:32,389 --> 00:06:36,650
foundry become blurred over time as

00:06:34,250 --> 00:06:39,550
people have become dependent on using

00:06:36,650 --> 00:06:43,220
gosh for the deployment of Cloud Foundry

00:06:39,550 --> 00:06:47,930
and the other aspect is that you know

00:06:43,220 --> 00:06:53,410
these the ER B templates and monitor

00:06:47,930 --> 00:06:56,509
have become embedded a lot into the the

00:06:53,410 --> 00:06:59,570
entire deployment aspect of a Cloud

00:06:56,509 --> 00:07:02,690
Foundry system and you know we don't

00:06:59,570 --> 00:07:04,340
like Ruby stuff sitting over in and

00:07:02,690 --> 00:07:07,310
through the code that has to be used and

00:07:04,340 --> 00:07:09,139
the CRB templates also contain control

00:07:07,310 --> 00:07:10,460
scripts which are basically equivalent

00:07:09,139 --> 00:07:12,800
to Cloud Foundry

00:07:10,460 --> 00:07:16,729
templatized code which are based on

00:07:12,800 --> 00:07:18,979
those bosh primitives they're not always

00:07:16,729 --> 00:07:21,800
cleanly the most cleanly written logic

00:07:18,979 --> 00:07:24,979
and even some of those class definitions

00:07:21,800 --> 00:07:28,370
inside Ruby that you know seeped in to

00:07:24,979 --> 00:07:29,990
the templates over time so you know

00:07:28,370 --> 00:07:31,580
you've all of a sudden kind of

00:07:29,990 --> 00:07:33,500
intertwined way too much about

00:07:31,580 --> 00:07:35,960
deployment and just Cloud Foundry itself

00:07:33,500 --> 00:07:37,789
that didn't necessarily that does it

00:07:35,960 --> 00:07:42,169
does not necessarily need to be there as

00:07:37,789 --> 00:07:45,620
we can see as we will show this also

00:07:42,169 --> 00:07:49,280
makes porting to other systems difficult

00:07:45,620 --> 00:07:51,020
now that is a is a debatable set we're

00:07:49,280 --> 00:07:53,770
looking at it at containers and saying

00:07:51,020 --> 00:07:56,120
the containers have become more portable

00:07:53,770 --> 00:07:58,630
but really we're bringing things up just

00:07:56,120 --> 00:08:01,729
abstracting it to another higher level

00:07:58,630 --> 00:08:03,740
and the fact that mana the only service

00:08:01,729 --> 00:08:07,030
daemon that you can use is undesirable

00:08:03,740 --> 00:08:10,000
and it's a piece that we haven't quite

00:08:07,030 --> 00:08:12,979
completely teased out of the system yet

00:08:10,000 --> 00:08:18,770
ideally you would do that in a truly

00:08:12,979 --> 00:08:22,010
containerized set up so first off what

00:08:18,770 --> 00:08:25,280
is in the container we're basically

00:08:22,010 --> 00:08:29,419
starting from an Ubuntu 1404 docker

00:08:25,280 --> 00:08:32,120
image and I say this ironically knowing

00:08:29,419 --> 00:08:35,360
that I am wearing the green shirt we

00:08:32,120 --> 00:08:38,450
actually do it from other from souza

00:08:35,360 --> 00:08:40,969
images as well but the current certified

00:08:38,450 --> 00:08:43,849
system is is a Blinn - based from Cloud

00:08:40,969 --> 00:08:46,070
Foundry heritage then you basically

00:08:43,849 --> 00:08:48,680
create your stem cell-like layer on top

00:08:46,070 --> 00:08:50,700
of it this is very similar to exactly

00:08:48,680 --> 00:08:52,980
the way that that bought

00:08:50,700 --> 00:08:55,500
operating but at this point then the

00:08:52,980 --> 00:08:58,650
adding of the packages and jobs happens

00:08:55,500 --> 00:09:01,560
and an entry point where we've now

00:08:58,650 --> 00:09:03,680
separated out has anyone actually dealt

00:09:01,560 --> 00:09:08,240
with Bosch at the template level I've

00:09:03,680 --> 00:09:11,220
been on for yeah you're all lucky where

00:09:08,240 --> 00:09:12,840
we after then you know separate those

00:09:11,220 --> 00:09:15,930
things which happen at a compile time

00:09:12,840 --> 00:09:21,480
and which happen at the particular run

00:09:15,930 --> 00:09:23,160
time and then you can take what is in

00:09:21,480 --> 00:09:27,870
that container and decide to deploy it

00:09:23,160 --> 00:09:30,440
wherever you want get a little more

00:09:27,870 --> 00:09:35,700
about the building the world so

00:09:30,440 --> 00:09:38,910
basically for this again we've taken a

00:09:35,700 --> 00:09:40,980
certain step all the bosch templates to

00:09:38,910 --> 00:09:45,780
the the bosch template releases are done

00:09:40,980 --> 00:09:47,550
and we then take what's happens at build

00:09:45,780 --> 00:09:49,290
time and separate it from certain

00:09:47,550 --> 00:09:52,290
runtime aspects these are actually

00:09:49,290 --> 00:09:55,140
already separated in the bosch llamo

00:09:52,290 --> 00:09:57,900
files where certain things happen at

00:09:55,140 --> 00:10:00,390
certain parts of the the lifecycle of

00:09:57,900 --> 00:10:02,580
the system and we've taken the parts

00:10:00,390 --> 00:10:04,710
that happen that need to happen at

00:10:02,580 --> 00:10:07,620
runtime and some of the compile time

00:10:04,710 --> 00:10:11,430
stuff and just move that forward into

00:10:07,620 --> 00:10:14,190
container only operation so basically

00:10:11,430 --> 00:10:16,500
all the compilation is already done when

00:10:14,190 --> 00:10:20,130
you're ready to run the system in our

00:10:16,500 --> 00:10:23,310
case it's because it's in the container

00:10:20,130 --> 00:10:25,440
contrary to Bosh which happens when you

00:10:23,310 --> 00:10:29,340
use your Bosh director to do your

00:10:25,440 --> 00:10:31,610
deployments also this is all happening

00:10:29,340 --> 00:10:34,110
parallel because we're leveraging

00:10:31,610 --> 00:10:36,750
containers and go to compile everything

00:10:34,110 --> 00:10:38,940
with pretty much all of the cores on

00:10:36,750 --> 00:10:46,920
your machine for the creation of these

00:10:38,940 --> 00:10:48,900
containers and the the it builds in

00:10:46,920 --> 00:10:51,450
again all of the compilation

00:10:48,900 --> 00:10:54,420
dependencies directly into the container

00:10:51,450 --> 00:10:57,150
so those pieces of a Bosh system which

00:10:54,420 --> 00:10:59,340
say hey you have to do this that and the

00:10:57,150 --> 00:11:01,650
other we're kind of doing the same thing

00:10:59,340 --> 00:11:02,490
except accepting rather than the VM

00:11:01,650 --> 00:11:06,959
we're

00:11:02,490 --> 00:11:09,510
our removing some aspects and it's

00:11:06,959 --> 00:11:11,300
really not that many you know it's not

00:11:09,510 --> 00:11:14,040
that far from being VM to being

00:11:11,300 --> 00:11:17,339
container-based aside from a few key

00:11:14,040 --> 00:11:21,540
assumptions and we're just making those

00:11:17,339 --> 00:11:21,930
separations occur so that we can have it

00:11:21,540 --> 00:11:23,670
all

00:11:21,930 --> 00:11:26,100
cleanly separated compilation when

00:11:23,670 --> 00:11:27,690
you're compiling in runtime for when

00:11:26,100 --> 00:11:32,130
you're actually starting up each

00:11:27,690 --> 00:11:33,779
container instance and basically adding

00:11:32,130 --> 00:11:36,450
in a lot of smart detection of those

00:11:33,779 --> 00:11:39,270
various dependencies so even if several

00:11:36,450 --> 00:11:40,830
Bosch releases with a lot of jobs have

00:11:39,270 --> 00:11:42,529
to have a lot of jobs that you don't

00:11:40,830 --> 00:11:44,850
care exactly how they're specified

00:11:42,529 --> 00:11:46,800
fissile will correctly only build the

00:11:44,850 --> 00:11:51,270
things that are required for that

00:11:46,800 --> 00:11:52,589
particular role manifest sometimes you

00:11:51,270 --> 00:11:54,930
know some of these other dependencies

00:11:52,589 --> 00:11:58,050
that don't actually get run in that

00:11:54,930 --> 00:12:00,209
particular vm / container end up in

00:11:58,050 --> 00:12:03,120
there and fissile is actually doing a

00:12:00,209 --> 00:12:04,950
true dependency check to see okay I'm

00:12:03,120 --> 00:12:07,920
only going to work on the things which

00:12:04,950 --> 00:12:10,620
are important to the jobs again the that

00:12:07,920 --> 00:12:13,010
I would say processes but it's not

00:12:10,620 --> 00:12:15,480
broken down to single processes but to

00:12:13,010 --> 00:12:19,820
kind of multiple processes that define

00:12:15,480 --> 00:12:19,820
the job of a Cloud Foundry component

00:12:23,720 --> 00:12:31,019
so then before the next is going into

00:12:28,410 --> 00:12:34,230
the assembly line where you have the

00:12:31,019 --> 00:12:35,610
role manifest basically before detailing

00:12:34,230 --> 00:12:39,959
what all the configuration looks like

00:12:35,610 --> 00:12:41,970
let's talk about all that input so again

00:12:39,959 --> 00:12:45,600
as I mentioned before we are taking

00:12:41,970 --> 00:12:48,680
things from the Bosch release manifest

00:12:45,600 --> 00:12:51,870
format this is the same format that then

00:12:48,680 --> 00:12:55,860
Bosch takes as input and sets out to

00:12:51,870 --> 00:12:58,950
deploy and manage life cycles in it's in

00:12:55,860 --> 00:13:02,370
VMs we're taking that and then running

00:12:58,950 --> 00:13:05,279
it through Fissel which will then do the

00:13:02,370 --> 00:13:07,140
modifications necessary to say not VMs

00:13:05,279 --> 00:13:09,959
containers because then we put the

00:13:07,140 --> 00:13:12,899
container on the shelf and pull it off

00:13:09,959 --> 00:13:16,140
the shelf when we want to do our actual

00:13:12,899 --> 00:13:18,540
cluster creation so you could say we're

00:13:16,140 --> 00:13:21,810
kind of creating a an extra intermediate

00:13:18,540 --> 00:13:25,860
step but that extra intermediate step is

00:13:21,810 --> 00:13:28,920
is more pre ready to run with a lot of

00:13:25,860 --> 00:13:31,589
these assumptions that Bosch is asking

00:13:28,920 --> 00:13:34,649
you to either define or or not touch but

00:13:31,589 --> 00:13:38,690
leaving in there to confuse you with the

00:13:34,649 --> 00:13:41,399
opinions to be already ready for for use

00:13:38,690 --> 00:13:43,890
so you know again different Bosch

00:13:41,399 --> 00:13:45,959
releases this allows us to be we were

00:13:43,890 --> 00:13:48,149
building things off of the standard CF

00:13:45,959 --> 00:13:51,589
release format now we're moving to

00:13:48,149 --> 00:13:55,560
what's the newer CF deployment and these

00:13:51,589 --> 00:13:57,120
exist in in multiple release forms so

00:13:55,560 --> 00:13:58,920
that you know you can have a routing

00:13:57,120 --> 00:14:01,500
release and you might have a different

00:13:58,920 --> 00:14:04,829
garden release depending on how you're

00:14:01,500 --> 00:14:06,540
doing your Diego etc I just represent

00:14:04,829 --> 00:14:08,670
some of the composable architecture

00:14:06,540 --> 00:14:12,089
that's behind the scenes for cloud

00:14:08,670 --> 00:14:16,740
foundry is remains composable in this in

00:14:12,089 --> 00:14:18,630
this setup all that gets run through the

00:14:16,740 --> 00:14:21,410
soil as I said and then you get the

00:14:18,630 --> 00:14:21,410
docker images

00:14:22,870 --> 00:14:28,540
so a little bit more about the

00:14:24,580 --> 00:14:34,060
configuration and so it looks legible

00:14:28,540 --> 00:14:36,190
there so the role manifest this contains

00:14:34,060 --> 00:14:40,120
a list of all the docker images that

00:14:36,190 --> 00:14:43,630
that we want to build you can co-locate

00:14:40,120 --> 00:14:46,210
more than one job on a docker image and

00:14:43,630 --> 00:14:50,410
I'll talk about why we might do that in

00:14:46,210 --> 00:14:53,080
a second ideally again a job is a single

00:14:50,410 --> 00:14:55,870
or collection of processes that might

00:14:53,080 --> 00:14:58,990
run on a VM here we're running them on a

00:14:55,870 --> 00:15:01,330
container it is not single process you

00:14:58,990 --> 00:15:04,570
know it's unfortunately gone away from

00:15:01,330 --> 00:15:07,750
being pure 12 factor but this is kind of

00:15:04,570 --> 00:15:10,750
a step potentially in that direction for

00:15:07,750 --> 00:15:14,020
for cloud foundry component definition

00:15:10,750 --> 00:15:17,470
and so you can call that gave more than

00:15:14,020 --> 00:15:19,570
one job on an image or from different

00:15:17,470 --> 00:15:22,030
boss releases even and in the

00:15:19,570 --> 00:15:23,440
configurations section we transform

00:15:22,030 --> 00:15:26,680
those environment variables to the

00:15:23,440 --> 00:15:28,330
necessary Bosch properties so again the

00:15:26,680 --> 00:15:31,330
environment will feed into the container

00:15:28,330 --> 00:15:33,730
that at runtime only defines the

00:15:31,330 --> 00:15:37,570
necessary runtime boss properties you

00:15:33,730 --> 00:15:39,400
need for those jobs and the opinions

00:15:37,570 --> 00:15:41,350
files are essentially Bosch deployment

00:15:39,400 --> 00:15:44,020
manifests with only the properties

00:15:41,350 --> 00:15:46,570
section and they contain basically the

00:15:44,020 --> 00:15:48,190
defaults for all of the things that for

00:15:46,570 --> 00:15:54,520
example a customer would never need to

00:15:48,190 --> 00:15:56,320
touch the dark opinions that you know

00:15:54,520 --> 00:15:59,440
shown in the bottom right corner is

00:15:56,320 --> 00:16:01,390
basically a fail-safe where we're using

00:15:59,440 --> 00:16:04,360
it to insert and make sure that it

00:16:01,390 --> 00:16:08,790
actually erases the defaults on anything

00:16:04,360 --> 00:16:11,770
that may exist on the on the system and

00:16:08,790 --> 00:16:15,450
you know then this is basically how it

00:16:11,770 --> 00:16:18,190
operates you end up in the running and

00:16:15,450 --> 00:16:21,070
it executes the hooks scripts hooks

00:16:18,190 --> 00:16:24,580
scripts coming from the the Bosh side of

00:16:21,070 --> 00:16:30,510
things that you know need to execute a

00:16:24,580 --> 00:16:34,360
runtime configured it's a basically a

00:16:30,510 --> 00:16:36,070
sub-project of Fissel that takes that

00:16:34,360 --> 00:16:40,360
processes all those templates

00:16:36,070 --> 00:16:42,610
and turns what are a lot of extra

00:16:40,360 --> 00:16:45,970
properties into only the properties you

00:16:42,610 --> 00:16:49,180
care about plus the environment variable

00:16:45,970 --> 00:16:50,589
management that should be so all of the

00:16:49,180 --> 00:16:52,389
brought all of the pieces that you care

00:16:50,589 --> 00:16:53,589
about plus the environment variables

00:16:52,389 --> 00:16:55,810
which should be the only things you

00:16:53,589 --> 00:16:58,750
really do care about and makes the

00:16:55,810 --> 00:17:01,000
runtime environment configured

00:16:58,750 --> 00:17:05,280
configured and ready so then it starts

00:17:01,000 --> 00:17:07,510
syslog and cron and then monit I

00:17:05,280 --> 00:17:10,419
mentioned before you know we'd like to

00:17:07,510 --> 00:17:13,209
get bonded out of this system you know

00:17:10,419 --> 00:17:17,410
you could rely really on the container

00:17:13,209 --> 00:17:20,559
level management of you know readiness

00:17:17,410 --> 00:17:22,750
and things like that but that would

00:17:20,559 --> 00:17:25,660
actually then you'd have to change

00:17:22,750 --> 00:17:27,130
around the orchestration or fully change

00:17:25,660 --> 00:17:29,679
the assumptions of being able to run in

00:17:27,130 --> 00:17:36,610
bare metal VMs and that's obviously a

00:17:29,679 --> 00:17:38,890
larger discussion so I mentioned this

00:17:36,610 --> 00:17:42,400
already around config in but sort of

00:17:38,890 --> 00:17:44,890
configuration one of the common

00:17:42,400 --> 00:17:48,870
complaints in in Cloud Foundry is is

00:17:44,890 --> 00:17:52,360
just how difficult it is to set it up

00:17:48,870 --> 00:17:55,390
there used to be simpler ways then kind

00:17:52,360 --> 00:17:57,070
of Cloud Foundry grew and grew and you

00:17:55,390 --> 00:17:59,620
know you now you can't barely get a

00:17:57,070 --> 00:18:02,919
system except for having 20 VMs and and

00:17:59,620 --> 00:18:05,549
60 gigabytes of memory and that is you

00:18:02,919 --> 00:18:10,330
know there there is bosch light for some

00:18:05,549 --> 00:18:12,549
simplistic version of it but the there

00:18:10,330 --> 00:18:15,100
is a lot of configuration going on there

00:18:12,549 --> 00:18:17,860
so the Bosch manifests are large and

00:18:15,100 --> 00:18:19,210
troublesome to deal with and I think

00:18:17,860 --> 00:18:21,880
that they're not really the most

00:18:19,210 --> 00:18:23,890
user-friendly it you know the the

00:18:21,880 --> 00:18:26,260
community would do itself a little bit

00:18:23,890 --> 00:18:30,400
of effort to you know take some of these

00:18:26,260 --> 00:18:32,890
efforts and hopefully separate out what

00:18:30,400 --> 00:18:34,540
are its kind of like what we're trying

00:18:32,890 --> 00:18:37,000
to do is you have you ever worked in one

00:18:34,540 --> 00:18:38,710
of those properties dialogues and they

00:18:37,000 --> 00:18:40,270
have the Advanced Settings you know you

00:18:38,710 --> 00:18:42,070
maybe only have two or three things that

00:18:40,270 --> 00:18:45,340
you really care about and then there's

00:18:42,070 --> 00:18:47,169
the expert mode that's what we're trying

00:18:45,340 --> 00:18:49,330
to do with this system because there's

00:18:47,169 --> 00:18:49,810
very few things that you really need to

00:18:49,330 --> 00:18:52,300
touch

00:18:49,810 --> 00:18:54,400
fact I'd say less than 10% of the Bosch

00:18:52,300 --> 00:18:57,850
yamo properties that you could be faced

00:18:54,400 --> 00:19:00,330
with are actually ones that the end-user

00:18:57,850 --> 00:19:03,970
customers generally need to touch and

00:19:00,330 --> 00:19:06,640
probably it's less than than 3% you

00:19:03,970 --> 00:19:11,140
could do four very simple dev level set

00:19:06,640 --> 00:19:12,700
ups so config in exists there to

00:19:11,140 --> 00:19:16,390
basically augment the the whole Bosch

00:19:12,700 --> 00:19:17,620
template setup and you know provide you

00:19:16,390 --> 00:19:20,110
know for other sources of how to draw

00:19:17,620 --> 00:19:22,270
that configuration together from all of

00:19:20,110 --> 00:19:28,360
that giant JSON payload and the

00:19:22,270 --> 00:19:30,130
environment variables together and we

00:19:28,360 --> 00:19:35,490
use some boost - templates to eliminate

00:19:30,130 --> 00:19:40,210
some of that configuration complexity a

00:19:35,490 --> 00:19:42,160
little bit on the configuration so we

00:19:40,210 --> 00:19:45,250
looked at there's two ways you know the

00:19:42,160 --> 00:19:47,620
layered dynamic and layered static the

00:19:45,250 --> 00:19:49,630
in the dynamic sense well we could have

00:19:47,620 --> 00:19:51,850
had a console key space and it could had

00:19:49,630 --> 00:19:54,040
all this stuff in there

00:19:51,850 --> 00:19:57,370
there's a lot of problems but mostly

00:19:54,040 --> 00:19:59,200
being slow to run and it's you might

00:19:57,370 --> 00:20:00,280
have to restart it's not necessarily as

00:19:59,200 --> 00:20:03,190
dynamic as you think

00:20:00,280 --> 00:20:06,550
and then it's requiring yet another key

00:20:03,190 --> 00:20:08,680
value raft process and when you've set

00:20:06,550 --> 00:20:11,440
these up plenty of times you know that

00:20:08,680 --> 00:20:13,390
those underlying pieces like console and

00:20:11,440 --> 00:20:16,420
@cd or probably some of the most

00:20:13,390 --> 00:20:17,770
complicated pieces to make sure that in

00:20:16,420 --> 00:20:19,030
your distributed management and

00:20:17,770 --> 00:20:21,310
everything are setup right and

00:20:19,030 --> 00:20:23,710
everything on top of that just tries to

00:20:21,310 --> 00:20:26,710
work so we tried to remove that by

00:20:23,710 --> 00:20:28,810
focusing more on a layered static and

00:20:26,710 --> 00:20:30,850
using environment variables for the user

00:20:28,810 --> 00:20:33,370
values and having everything else

00:20:30,850 --> 00:20:37,180
essentially pre computed and stored in

00:20:33,370 --> 00:20:39,670
each container so the only kind of

00:20:37,180 --> 00:20:42,190
negative of this is that if you find Oh

00:20:39,670 --> 00:20:46,420
will I actually did really need one of

00:20:42,190 --> 00:20:49,420
those other values then you do have to

00:20:46,420 --> 00:20:51,310
go through actually modify facade to say

00:20:49,420 --> 00:20:54,040
oh no or config in to say I need to make

00:20:51,310 --> 00:20:55,420
sure that this one is user exposed so I

00:20:54,040 --> 00:20:57,640
can set it in an environment variable

00:20:55,420 --> 00:21:00,850
and then you end up rebuilding the world

00:20:57,640 --> 00:21:02,470
however in bosch you do the same thing

00:21:00,850 --> 00:21:08,169
and you rebuild much lower

00:21:02,470 --> 00:21:15,640
when you have to do that so all that

00:21:08,169 --> 00:21:18,549
said we have the pull requests and they

00:21:15,640 --> 00:21:20,830
really focus on and you know this is

00:21:18,549 --> 00:21:25,080
them and more but they really only focus

00:21:20,830 --> 00:21:27,520
on a few areas DNS lookup changes

00:21:25,080 --> 00:21:30,130
hard-coded values that kind of were

00:21:27,520 --> 00:21:32,919
these subtle Bosch isms and you know

00:21:30,130 --> 00:21:35,440
touching /proc without restraint which

00:21:32,919 --> 00:21:38,919
is a vm thing and something you wouldn't

00:21:35,440 --> 00:21:41,770
do in containers and we pretty much made

00:21:38,919 --> 00:21:45,610
and most of these are all accepted for

00:21:41,770 --> 00:21:51,730
removing these vm assumptions and

00:21:45,610 --> 00:21:53,650
dependencies from the system and so you

00:21:51,730 --> 00:21:56,080
know for the most part a lot of this

00:21:53,650 --> 00:22:02,980
stuff is ready to see some of those

00:21:56,080 --> 00:22:07,210
changes move forward and so we talked

00:22:02,980 --> 00:22:08,980
about so you know you can see the

00:22:07,210 --> 00:22:13,230
fissile project it's actually open

00:22:08,980 --> 00:22:16,659
source it's on the Sousa github there's

00:22:13,230 --> 00:22:20,080
another side project of this called CF

00:22:16,659 --> 00:22:22,210
solo and I mentioned before that you

00:22:20,080 --> 00:22:25,330
could actually co-locate more than one

00:22:22,210 --> 00:22:28,630
job in a container and this is basically

00:22:25,330 --> 00:22:31,150
taking fissile to the extreme of doing

00:22:28,630 --> 00:22:34,150
all of the configuration changes the

00:22:31,150 --> 00:22:36,490
Bosch configuration simplification but

00:22:34,150 --> 00:22:40,419
co-locating all of those jobs onto one

00:22:36,490 --> 00:22:42,820
single docker container and that's what

00:22:40,419 --> 00:22:45,549
the that's CF solo does yeah it's one

00:22:42,820 --> 00:22:48,370
really fat container but it's it's much

00:22:45,549 --> 00:22:53,380
thinner than all of the VMS that you

00:22:48,370 --> 00:22:58,150
might otherwise see and that's what CF

00:22:53,380 --> 00:23:02,470
solo represents however it's not just

00:22:58,150 --> 00:23:05,020
about the container side he were at the

00:23:02,470 --> 00:23:11,289
OpenStack conference so let's enter

00:23:05,020 --> 00:23:13,600
OpenStack and Magnum so as you saw most

00:23:11,289 --> 00:23:15,430
of the stuff before let's just pay well

00:23:13,600 --> 00:23:17,050
let's get to containers

00:23:15,430 --> 00:23:20,260
and I could run that actually on a

00:23:17,050 --> 00:23:22,780
machine that only had you know docker

00:23:20,260 --> 00:23:25,210
daemon running and you know kind of

00:23:22,780 --> 00:23:26,950
simple obviously it's not going to get

00:23:25,210 --> 00:23:29,500
me anywhere into some sort of production

00:23:26,950 --> 00:23:31,090
scale so we've been looking mostly at

00:23:29,500 --> 00:23:33,010
kubernetes I mentioned before that's

00:23:31,090 --> 00:23:36,070
what our target was and that's what

00:23:33,010 --> 00:23:38,560
we're trying from you know a kind of a

00:23:36,070 --> 00:23:40,090
corporate perspective to to raise it up

00:23:38,560 --> 00:23:42,280
so that cloud foundry could be retarget

00:23:40,090 --> 00:23:46,950
Abul in that sense and Magnum is one of

00:23:42,280 --> 00:23:50,680
those areas so really how does it work

00:23:46,950 --> 00:23:53,650
well you get a little duct tape and you

00:23:50,680 --> 00:23:56,280
get a little baling wire and then you're

00:23:53,650 --> 00:23:59,710
going to have a system that works

00:23:56,280 --> 00:24:03,870
because it's not always that easy it

00:23:59,710 --> 00:24:07,510
seems so first off what do we start with

00:24:03,870 --> 00:24:10,810
OpenStack or OpenStack base is souza

00:24:07,510 --> 00:24:14,170
OpenStack cloud seven Isuzu which

00:24:10,810 --> 00:24:16,210
actually has Magnum as one of the core

00:24:14,170 --> 00:24:17,980
components I'm not going to go too much

00:24:16,210 --> 00:24:20,470
into that one if you want to see more

00:24:17,980 --> 00:24:23,350
about that I believe there's other talks

00:24:20,470 --> 00:24:25,810
going on in fact I know there's other

00:24:23,350 --> 00:24:28,210
talks going on this week from the guys

00:24:25,810 --> 00:24:31,180
who on the ONRR OpenStack cloud side on

00:24:28,210 --> 00:24:33,070
that it is based on upstream Newton case

00:24:31,180 --> 00:24:35,140
you're curious and does include the

00:24:33,070 --> 00:24:38,380
kubernetes of service the kubernetes

00:24:35,140 --> 00:24:46,330
here used in this demonstration is 1/5 3

00:24:38,380 --> 00:24:50,530
and the docker was 112 so then enter

00:24:46,330 --> 00:24:52,900
Magnum and I say this all in about in a

00:24:50,530 --> 00:24:54,280
few slides to make it look easy it's not

00:24:52,900 --> 00:24:56,650
quite as easy because I'll get to the

00:24:54,280 --> 00:24:59,020
quirks in a little bit but basically we

00:24:56,650 --> 00:25:02,560
using a magnum heat template with some

00:24:59,020 --> 00:25:03,400
DNS server added onto it it's important

00:25:02,560 --> 00:25:06,280
that you choose the appropriate

00:25:03,400 --> 00:25:08,500
OpenStack flavor and the darker volume

00:25:06,280 --> 00:25:13,900
size so that you know your your cluster

00:25:08,500 --> 00:25:16,690
you know and can adjust as necessary and

00:25:13,900 --> 00:25:23,100
this little command is pretty much all

00:25:16,690 --> 00:25:25,240
we used on top of a stock sock 7 system

00:25:23,100 --> 00:25:27,490
with there's a couple of other things

00:25:25,240 --> 00:25:28,650
that preceded that command one you want

00:25:27,490 --> 00:25:31,350
to grab your

00:25:28,650 --> 00:25:32,670
you're souza linux enterprise or you

00:25:31,350 --> 00:25:35,970
pick your other one but something that

00:25:32,670 --> 00:25:39,000
has a kubernetes enabled image uploaded

00:25:35,970 --> 00:25:40,350
to glance so glance image ad bla bla bla

00:25:39,000 --> 00:25:43,710
bla bla

00:25:40,350 --> 00:25:45,480
the Elbaz side is not strictly necessary

00:25:43,710 --> 00:25:48,630
but if you're going to do anything with

00:25:45,480 --> 00:25:51,740
public IP exposure then you'll need that

00:25:48,630 --> 00:25:55,559
and then make their requisite local DNS

00:25:51,740 --> 00:25:58,350
Corrections and that is then the command

00:25:55,559 --> 00:26:01,200
which would kick it off from essentially

00:25:58,350 --> 00:26:06,750
the this is creating that that cluster

00:26:01,200 --> 00:26:10,830
template so we've created a template now

00:26:06,750 --> 00:26:12,420
let's create a kubernetes cluster so you

00:26:10,830 --> 00:26:14,360
choose that previously created cluster

00:26:12,420 --> 00:26:17,370
template that was in the previous slide

00:26:14,360 --> 00:26:21,090
which was whatever name I gave it

00:26:17,370 --> 00:26:23,520
already forgotten and and then you give

00:26:21,090 --> 00:26:25,440
it a number of master nodes and kind of

00:26:23,520 --> 00:26:26,520
adjust this command as necessary it's

00:26:25,440 --> 00:26:29,700
the command line version

00:26:26,520 --> 00:26:36,300
I'll show you through a demo in in a

00:26:29,700 --> 00:26:39,750
second so I make it sound like it's that

00:26:36,300 --> 00:26:42,720
easy well it gets to be that easy after

00:26:39,750 --> 00:26:45,300
you get to after you rebuild your

00:26:42,720 --> 00:26:47,250
cluster about ten times figuring out

00:26:45,300 --> 00:26:52,230
what you didn't do correctly along the

00:26:47,250 --> 00:26:54,800
way so we did have to do that ourselves

00:26:52,230 --> 00:26:57,830
some of these were kernel options fixes

00:26:54,800 --> 00:27:00,420
mostly because in cloud foundry

00:26:57,830 --> 00:27:02,130
depending on what you're doing certain

00:27:00,420 --> 00:27:03,929
things are sensitive to what's available

00:27:02,130 --> 00:27:05,520
in the kernel so we had to make sure

00:27:03,929 --> 00:27:08,070
that we were setting everything up right

00:27:05,520 --> 00:27:11,160
we had chosen the wrong flavor for core

00:27:08,070 --> 00:27:14,040
nodes because we needed a larger root

00:27:11,160 --> 00:27:17,550
volume or rather we need good volume

00:27:14,040 --> 00:27:19,530
management and we just chose to use

00:27:17,550 --> 00:27:21,960
something with faster core disk rather

00:27:19,530 --> 00:27:24,450
than slow volumes now this is not a

00:27:21,960 --> 00:27:26,550
statement on you know what OpenStack

00:27:24,450 --> 00:27:28,590
configurations you may need it happens

00:27:26,550 --> 00:27:31,710
to do mostly with we were doing this

00:27:28,590 --> 00:27:34,320
with kind of desks so machines sitting

00:27:31,710 --> 00:27:35,970
under desks not next connected to leave

00:27:34,320 --> 00:27:39,690
things like fiber channel arrays and all

00:27:35,970 --> 00:27:41,360
sorts of lovely other stuff you could

00:27:39,690 --> 00:27:46,460
use volume management if it

00:27:41,360 --> 00:27:48,559
had the right level of ions in it we did

00:27:46,460 --> 00:27:52,370
also stick with device mapper we were

00:27:48,559 --> 00:27:55,220
trying to use overlay FS but again it

00:27:52,370 --> 00:27:58,160
the configurations were not available to

00:27:55,220 --> 00:28:01,880
us in the particular OpenStack setups

00:27:58,160 --> 00:28:05,080
that we were restricted hardware that we

00:28:01,880 --> 00:28:07,760
were using for the OpenStack setups

00:28:05,080 --> 00:28:10,520
another thing is that in this particular

00:28:07,760 --> 00:28:13,010
case Magnum isn't really configuring

00:28:10,520 --> 00:28:14,840
flannel correctly for ED CD and it

00:28:13,010 --> 00:28:17,990
didn't do the the master right for

00:28:14,840 --> 00:28:20,660
cubelets you know we had to change some

00:28:17,990 --> 00:28:24,020
stuff in the etsy kubernetes d and c

00:28:20,660 --> 00:28:26,059
kubernetes configs to address this so

00:28:24,020 --> 00:28:28,280
while it might have worked and you would

00:28:26,059 --> 00:28:30,919
have said if you use Magnum and says I

00:28:28,280 --> 00:28:35,419
am kind of ready it wasn't ready for

00:28:30,919 --> 00:28:37,610
Cloud Foundry which is itself sort of a

00:28:35,419 --> 00:28:40,610
large and complex workload Ronning to

00:28:37,610 --> 00:28:43,070
run its own distributed configuration

00:28:40,610 --> 00:28:44,450
management other stuff on top

00:28:43,070 --> 00:28:47,480
we also required the host path

00:28:44,450 --> 00:28:49,730
provisioner because cinder again was not

00:28:47,480 --> 00:28:51,980
attaching again I were pretty sure this

00:28:49,730 --> 00:28:53,900
was mostly limited to our hardware if

00:28:51,980 --> 00:28:57,320
anyone would like to loan us some more

00:28:53,900 --> 00:29:02,000
hardware then I'm sure we get around all

00:28:57,320 --> 00:29:03,710
these problems kubernetes dns

00:29:02,000 --> 00:29:06,169
configuration changes also had to be

00:29:03,710 --> 00:29:08,150
added for a service network because we

00:29:06,169 --> 00:29:09,830
needed a service network for the monster

00:29:08,150 --> 00:29:15,230
service we were about to drop on top of

00:29:09,830 --> 00:29:16,760
it and the one other thing is TLS wasn't

00:29:15,230 --> 00:29:18,140
configured and this was all our fault

00:29:16,760 --> 00:29:19,910
because we're using self-signed cert s--

00:29:18,140 --> 00:29:26,390
and we didn't want to have to deal with

00:29:19,910 --> 00:29:28,520
all that that stuff so I'm going to say

00:29:26,390 --> 00:29:31,010
sprinkle key basalt here that's actually

00:29:28,520 --> 00:29:33,549
it's showing it working but I'm going to

00:29:31,010 --> 00:29:33,549
jump now to

00:29:38,599 --> 00:29:42,940
that did not show where I thought I was

00:29:40,459 --> 00:29:42,940
going to show

00:29:49,040 --> 00:29:59,970
this is a time compressed demo and not

00:29:58,620 --> 00:30:02,220
mirroring my screen here so I'm going to

00:29:59,970 --> 00:30:03,540
look this way sorry so basically this is

00:30:02,220 --> 00:30:05,280
the setting up the cube on OpenStack

00:30:03,540 --> 00:30:07,020
you're going through the creation of the

00:30:05,280 --> 00:30:09,780
cluster template as I mentioned before

00:30:07,020 --> 00:30:12,120
this is the command line which showed in

00:30:09,780 --> 00:30:14,370
the slide this is about picking your

00:30:12,120 --> 00:30:16,290
image flavor picking a key pair all the

00:30:14,370 --> 00:30:21,420
usual stuff you can actually all do this

00:30:16,290 --> 00:30:24,390
from the sock seven interface and it's

00:30:21,420 --> 00:30:25,650
going to let me get that overly jump

00:30:24,390 --> 00:30:27,930
that out of the way so we've created the

00:30:25,650 --> 00:30:29,810
cluster type and it's showing that there

00:30:27,930 --> 00:30:32,340
it is created I guess I said this was a

00:30:29,810 --> 00:30:34,740
it's not that complicated as you're

00:30:32,340 --> 00:30:38,100
going through all this the link to the

00:30:34,740 --> 00:30:39,840
YouTube there is there that you can kind

00:30:38,100 --> 00:30:41,340
of pause and go through it but again

00:30:39,840 --> 00:30:42,660
this is the creating of the cluster that

00:30:41,340 --> 00:30:46,410
was the second command line that I

00:30:42,660 --> 00:30:49,110
showed we pick a couple of nodes and I'm

00:30:46,410 --> 00:30:50,610
basically compressing like we were

00:30:49,110 --> 00:30:52,800
trying to do this as a live demo but

00:30:50,610 --> 00:30:56,010
then realize that that was not going to

00:30:52,800 --> 00:30:57,540
happen so also especially the time it

00:30:56,010 --> 00:30:59,130
takes to download all the images that

00:30:57,540 --> 00:31:02,700
you when you go through building this

00:30:59,130 --> 00:31:04,320
but we're showing the that was the

00:31:02,700 --> 00:31:06,120
cluster creation and we have our

00:31:04,320 --> 00:31:10,440
kubernetes that was set up on a three

00:31:06,120 --> 00:31:17,010
nodes so okay three node kubernetes and

00:31:10,440 --> 00:31:18,960
they're now ready and so next we're

00:31:17,010 --> 00:31:20,880
going to basically go into the the dns

00:31:18,960 --> 00:31:23,610
as i mentioned this is just some of

00:31:20,880 --> 00:31:26,850
those weird configuration items God have

00:31:23,610 --> 00:31:29,930
DNS working you know is one of those

00:31:26,850 --> 00:31:32,510
quirks and especially between the

00:31:29,930 --> 00:31:34,160
configurations expected between

00:31:32,510 --> 00:31:37,440
OpenStack itself

00:31:34,160 --> 00:31:39,060
kubernetes and Cloud Foundry you have to

00:31:37,440 --> 00:31:41,760
make them all consistent and they all

00:31:39,060 --> 00:31:45,360
kind of disagree on where that might the

00:31:41,760 --> 00:31:47,250
dns configs might say by default so here

00:31:45,360 --> 00:31:51,370
we're just basically setting up exposing

00:31:47,250 --> 00:31:52,850
our port so we can set up the cube - and

00:31:51,370 --> 00:31:57,020
[Music]

00:31:52,850 --> 00:32:05,559
then we have a tunnel to get us going

00:31:57,020 --> 00:32:17,230
pretty fast now let's pause that and

00:32:05,559 --> 00:32:22,040
back to the slides and let's talk about

00:32:17,230 --> 00:32:24,800
the Cloud Foundry piece so Cloud Foundry

00:32:22,040 --> 00:32:28,429
on top so I basically compressed what

00:32:24,800 --> 00:32:30,380
was probably about it's kind of 20 to 30

00:32:28,429 --> 00:32:32,090
minutes of getting you know in the

00:32:30,380 --> 00:32:34,700
system that has to get the images and

00:32:32,090 --> 00:32:37,580
and then it runs everything up to the

00:32:34,700 --> 00:32:39,590
stable ready state and I took a pause

00:32:37,580 --> 00:32:42,050
and we're going to say okay well now we

00:32:39,590 --> 00:32:45,280
need Cloud Foundry Cloud Foundry is

00:32:42,050 --> 00:32:49,760
itself quite a large and complex system

00:32:45,280 --> 00:32:51,850
but aside from going through and

00:32:49,760 --> 00:32:56,360
learning what some of those other

00:32:51,850 --> 00:32:58,490
configuration quirks were the the two

00:32:56,360 --> 00:33:01,910
minutes compressed there does represent

00:32:58,490 --> 00:33:04,130
a Oh you know I've gotten set up and I

00:33:01,910 --> 00:33:06,290
now have a kubernetes cluster that is

00:33:04,130 --> 00:33:10,010
ready to take Cloud Foundry without any

00:33:06,290 --> 00:33:15,500
other confusion or sleight of hand going

00:33:10,010 --> 00:33:18,860
on so most of the things were related to

00:33:15,500 --> 00:33:20,480
service discovery in DNS the there's

00:33:18,860 --> 00:33:23,890
this assumption for cluster dot local

00:33:20,480 --> 00:33:26,570
being your default discovery domain and

00:33:23,890 --> 00:33:28,370
but Magnum imposes something else and

00:33:26,570 --> 00:33:31,640
then you know who are you going to

00:33:28,370 --> 00:33:33,620
impose the configuration on at this

00:33:31,640 --> 00:33:35,990
point we're kind of adjusting things by

00:33:33,620 --> 00:33:38,690
hand in Yama files I think if you were

00:33:35,990 --> 00:33:42,350
to harden this you would make sure to

00:33:38,690 --> 00:33:44,420
really focus on a better kind of

00:33:42,350 --> 00:33:47,450
end-to-end configuration control for

00:33:44,420 --> 00:33:48,800
these things there was also some cube

00:33:47,450 --> 00:33:52,490
root Nettie's namespace assumptions that

00:33:48,800 --> 00:33:54,200
we had to change and and it basically

00:33:52,490 --> 00:33:57,700
represented more stuff that we needed to

00:33:54,200 --> 00:34:00,110
make configurable so going back to here

00:33:57,700 --> 00:34:07,940
let's get into that what does that Cloud

00:34:00,110 --> 00:34:10,870
Foundry set up and first we're going to

00:34:07,940 --> 00:34:15,760
set up the UA a for those you know know

00:34:10,870 --> 00:34:17,290
Foundry it's kind of in an automated

00:34:15,760 --> 00:34:18,580
configuration this might all look like

00:34:17,290 --> 00:34:20,470
it's one step but you really have to

00:34:18,580 --> 00:34:23,560
have your user off and authentication

00:34:20,470 --> 00:34:26,980
all set up and making sure that it's

00:34:23,560 --> 00:34:28,720
talking to the right things from a

00:34:26,980 --> 00:34:31,060
service discovery perspective first you

00:34:28,720 --> 00:34:32,590
have to have you a a knowing that's

00:34:31,060 --> 00:34:35,590
talking to the right services and then

00:34:32,590 --> 00:34:38,950
Cloud Foundry will need to find that as

00:34:35,590 --> 00:34:42,370
its first piece so here we are setting

00:34:38,950 --> 00:34:44,200
now up UA a and as you see the time

00:34:42,370 --> 00:34:45,970
clicking away at the top which is why

00:34:44,200 --> 00:34:49,420
we've compressed this it does take a

00:34:45,970 --> 00:34:51,580
little bit to get that all up and it

00:34:49,420 --> 00:34:56,350
showed about five minutes now basically

00:34:51,580 --> 00:34:58,300
is going to we knew what our we knew

00:34:56,350 --> 00:35:00,780
what our internal IP was now we need to

00:34:58,300 --> 00:35:03,190
expose that and this is basically the

00:35:00,780 --> 00:35:05,500
dependency chain that you get through

00:35:03,190 --> 00:35:08,530
again this could be completely automated

00:35:05,500 --> 00:35:10,540
as it has been before but now we are

00:35:08,530 --> 00:35:13,420
showing that it's up and it's working we

00:35:10,540 --> 00:35:15,790
were able to ping it so now we have UA a

00:35:13,420 --> 00:35:18,670
we can go in and distribute the or

00:35:15,790 --> 00:35:21,090
deploy the rest of Cloud Foundry create

00:35:18,670 --> 00:35:24,060
the namespace for it in kubernetes and

00:35:21,090 --> 00:35:26,410
then we're basically have this

00:35:24,060 --> 00:35:29,050
configuration file which is all the

00:35:26,410 --> 00:35:30,490
Fissel generated configuration and that

00:35:29,050 --> 00:35:32,380
was pretty much it

00:35:30,490 --> 00:35:35,290
again this is slightly compressed in in

00:35:32,380 --> 00:35:36,430
time and that its operating but this is

00:35:35,290 --> 00:35:40,900
also assuming that you've already

00:35:36,430 --> 00:35:44,500
downloaded the images and so that

00:35:40,900 --> 00:35:46,180
because there's probably 30 gigabytes

00:35:44,500 --> 00:35:48,220
worth of images across these things

00:35:46,180 --> 00:35:50,650
there's a lot of layer sharing if you

00:35:48,220 --> 00:35:54,970
happen to do a write but it can take a

00:35:50,650 --> 00:35:56,440
while to download and basically we're

00:35:54,970 --> 00:35:59,740
seeing that the readiness probes and

00:35:56,440 --> 00:36:03,730
liveliness probes are are being used

00:35:59,740 --> 00:36:05,530
properly in the system of and it's all

00:36:03,730 --> 00:36:08,850
then getting setup everything from you

00:36:05,530 --> 00:36:11,950
know API is they ago the routing and the

00:36:08,850 --> 00:36:14,080
other bits are all on there takes about

00:36:11,950 --> 00:36:20,410
again five minutes till they've all come

00:36:14,080 --> 00:36:22,700
to ready state and that's done so now

00:36:20,410 --> 00:36:24,680
everything post deployments done

00:36:22,700 --> 00:36:26,960
and we're going to expose it this is

00:36:24,680 --> 00:36:30,530
locally so we've got to go ahead and get

00:36:26,960 --> 00:36:34,160
the the right IP address going to look

00:36:30,530 --> 00:36:35,900
at the dashboard and again this is the

00:36:34,160 --> 00:36:38,840
the kubernetes dashboard that was set up

00:36:35,900 --> 00:36:40,760
via earlier and just running all on

00:36:38,840 --> 00:36:52,880
magnum now we see everything that's

00:36:40,760 --> 00:36:54,230
running and done and just like so now

00:36:52,880 --> 00:36:56,960
it's going to look inside a container

00:36:54,230 --> 00:37:02,030
just to see okay this is actually a

00:36:56,960 --> 00:37:05,560
Diego so running and we can see that

00:37:02,030 --> 00:37:08,750
everything is is is operating properly

00:37:05,560 --> 00:37:10,720
then the next thing is well okay now

00:37:08,750 --> 00:37:15,470
we've got that was that was kind of it

00:37:10,720 --> 00:37:19,160
and again it's only time compressed

00:37:15,470 --> 00:37:20,810
there was no cheating going on you can

00:37:19,160 --> 00:37:23,840
run those things straight from those

00:37:20,810 --> 00:37:25,970
docker containers we only had to make

00:37:23,840 --> 00:37:28,790
some slight changes on the ones that

00:37:25,970 --> 00:37:33,140
we'd had published before for some of

00:37:28,790 --> 00:37:35,930
these magnum quirks and then you can go

00:37:33,140 --> 00:37:43,580
ahead and deploy something on this cloud

00:37:35,930 --> 00:37:46,820
foundry and so let's use it we're going

00:37:43,580 --> 00:37:53,450
to target the the system so on our CF

00:37:46,820 --> 00:37:54,680
solo setup and okay we are actually

00:37:53,450 --> 00:37:57,700
pointing to the right thing that was

00:37:54,680 --> 00:38:00,350
what that was call was doing login and

00:37:57,700 --> 00:38:02,750
create our orgs this is all the usual

00:38:00,350 --> 00:38:05,500
cloud foundry stuff nothing nothing

00:38:02,750 --> 00:38:09,410
nothing too interesting here we're only

00:38:05,500 --> 00:38:12,770
more pointing out that we're now pushing

00:38:09,410 --> 00:38:17,240
both the docker app and as well as a

00:38:12,770 --> 00:38:24,410
build pack oriented app so this is the

00:38:17,240 --> 00:38:26,470
usual cloud foundry stuff and waiting

00:38:24,410 --> 00:38:31,220
waiting the usual cloud foundry push and

00:38:26,470 --> 00:38:36,580
everything's running so that's pretty

00:38:31,220 --> 00:38:36,580
much it saying that it works

00:38:38,530 --> 00:38:51,869
[Music]

00:38:40,670 --> 00:38:53,960
now back to the slides so where are we

00:38:51,869 --> 00:38:58,079
currently the current working state

00:38:53,960 --> 00:39:00,720
Magnum duh we saw that we also have this

00:38:58,079 --> 00:39:04,740
running on Google container engine mini

00:39:00,720 --> 00:39:06,119
cube hypercube and Souza CASP if you

00:39:04,740 --> 00:39:08,150
might not heard about that that's a

00:39:06,119 --> 00:39:10,619
relatively recent project from Souza

00:39:08,150 --> 00:39:14,010
container as a service platform its

00:39:10,619 --> 00:39:16,440
kubernetes and although instead of so

00:39:14,010 --> 00:39:19,200
the Sousa OpenStack cloud and Magnum

00:39:16,440 --> 00:39:20,849
running on that there is Susak ASP which

00:39:19,200 --> 00:39:24,559
is a kubernetes system that can do for

00:39:20,849 --> 00:39:27,210
example pure bare metal kubernetes our

00:39:24,559 --> 00:39:33,050
intention is basically to be running on

00:39:27,210 --> 00:39:35,520
any kubernetes system 1 5 or up a

00:39:33,050 --> 00:39:37,829
one-note that for those of you who may

00:39:35,520 --> 00:39:40,049
be playing with cloud foundry in general

00:39:37,829 --> 00:39:42,599
we did have to make some changes we're

00:39:40,049 --> 00:39:45,089
using the Groot FS which is not

00:39:42,599 --> 00:39:48,059
currently a mainline feature it's an

00:39:45,089 --> 00:39:50,520
extra optional feature but it's the one

00:39:48,059 --> 00:39:53,760
that allows you to avoid using a u FS in

00:39:50,520 --> 00:39:55,619
your system and this is very important

00:39:53,760 --> 00:39:58,559
aspect of being able to run on other

00:39:55,619 --> 00:40:00,480
kubernetes where you can't touch the

00:39:58,559 --> 00:40:02,790
kernel where because you would have to

00:40:00,480 --> 00:40:07,790
otherwise install the AFS kernel mod to

00:40:02,790 --> 00:40:13,079
allow that the garuda FS is an effort

00:40:07,790 --> 00:40:17,760
from the core team to use other things

00:40:13,079 --> 00:40:19,140
over layer or butter FS and and overlay

00:40:17,760 --> 00:40:24,240
wasn't working for us but the butter FS

00:40:19,140 --> 00:40:25,920
was yeah and the hypercube we've only

00:40:24,240 --> 00:40:27,119
deprecated that effort because it seems

00:40:25,920 --> 00:40:32,579
that mini cube seems to be better

00:40:27,119 --> 00:40:34,130
supported inside the community so a bit

00:40:32,579 --> 00:40:37,349
about the current development state

00:40:34,130 --> 00:40:41,400
grood FS again to alleviate the the au

00:40:37,349 --> 00:40:43,140
FS current CF requirement and service

00:40:41,400 --> 00:40:45,650
discovery configuration improvements

00:40:43,140 --> 00:40:48,700
that we had to make inside the system

00:40:45,650 --> 00:40:50,650
that we are now sort of pushing

00:40:48,700 --> 00:40:53,349
right into the the facade config in

00:40:50,650 --> 00:40:56,589
level and also that kind of touches on

00:40:53,349 --> 00:40:58,180
how you're setting up your kubernetes we

00:40:56,589 --> 00:41:00,490
do want to be leveraging more kubernetes

00:40:58,180 --> 00:41:03,310
features so the ones that are not

00:41:00,490 --> 00:41:07,390
italicized are the ones the first four

00:41:03,310 --> 00:41:10,780
are already in use at sub level so this

00:41:07,390 --> 00:41:13,240
is another advantage from going to the

00:41:10,780 --> 00:41:15,369
containers and container platforms for

00:41:13,240 --> 00:41:17,200
running Cloud Foundry on is that we're

00:41:15,369 --> 00:41:19,329
able to use things like readiness and

00:41:17,200 --> 00:41:21,010
liveness probes ideally we'd be able to

00:41:19,329 --> 00:41:23,470
get rid of the whole use of mana tan and

00:41:21,010 --> 00:41:27,130
further reduce some of the the

00:41:23,470 --> 00:41:28,599
overweight naquadria over time by

00:41:27,130 --> 00:41:32,710
leveraging some of these external

00:41:28,599 --> 00:41:35,109
platform features stateful sets because

00:41:32,710 --> 00:41:37,900
they're very important part of Cloud

00:41:35,109 --> 00:41:41,140
Foundry there is state involved the

00:41:37,900 --> 00:41:43,060
deployments of kubernetes storage cuban

00:41:41,140 --> 00:41:45,280
eddie storage classes the three things

00:41:43,060 --> 00:41:47,980
that we're not using that we want to be

00:41:45,280 --> 00:41:50,290
in the future are the concept of

00:41:47,980 --> 00:41:52,329
critical pods so that you know you could

00:41:50,290 --> 00:41:57,310
be tagging certain things for higher

00:41:52,329 --> 00:41:58,810
level of importance pod affinity because

00:41:57,310 --> 00:42:00,490
it can be very important to make sure

00:41:58,810 --> 00:42:02,550
you know some of your routing stuff

00:42:00,490 --> 00:42:05,349
doesn't get confused with some of your

00:42:02,550 --> 00:42:08,440
CPU bound stuff and and just to

00:42:05,349 --> 00:42:12,210
generally assert that and more of the

00:42:08,440 --> 00:42:16,180
network security sandboxing in addition

00:42:12,210 --> 00:42:17,500
helm is something that we're looking at

00:42:16,180 --> 00:42:18,970
we've been playing around with charts

00:42:17,500 --> 00:42:24,160
and have some things deploying via

00:42:18,970 --> 00:42:27,810
charts but not the entire system it's a

00:42:24,160 --> 00:42:30,609
little more about where we go from here

00:42:27,810 --> 00:42:33,010
many you know Sousa has been extending

00:42:30,609 --> 00:42:34,569
its community presence and basically

00:42:33,010 --> 00:42:36,940
growing contribution in many other

00:42:34,569 --> 00:42:39,490
open-source communities it's obviously

00:42:36,940 --> 00:42:42,930
long been in the Linux community is the

00:42:39,490 --> 00:42:46,180
first Enterprise Linux offering and

00:42:42,930 --> 00:42:47,680
followed up in OpenStack but it recently

00:42:46,180 --> 00:42:49,810
joined the Cloud Foundry foundation

00:42:47,680 --> 00:42:52,060
board and just just last December and

00:42:49,810 --> 00:42:56,290
the cloud native computing foundation

00:42:52,060 --> 00:42:57,280
just a couple of months ago and if

00:42:56,290 --> 00:42:59,079
you're interested in the kubernetes

00:42:57,280 --> 00:43:01,540
efforts as I mentioned that's in the

00:42:59,079 --> 00:43:02,320
Sousa cast product which is already

00:43:01,540 --> 00:43:08,080
currently and

00:43:02,320 --> 00:43:09,700
Alpha Beta Beta now and basically

00:43:08,080 --> 00:43:12,280
founding members of other new projects

00:43:09,700 --> 00:43:16,570
so this is Sousa branching out to other

00:43:12,280 --> 00:43:18,520
areas so I mentioned this slide before

00:43:16,570 --> 00:43:20,500
and I said how you can catch all of this

00:43:18,520 --> 00:43:22,500
stuff and see where it is well a

00:43:20,500 --> 00:43:24,880
highlight Cloud Foundry again because

00:43:22,500 --> 00:43:30,400
that's the one piece you're not going to

00:43:24,880 --> 00:43:32,410
find everything for today and whereas

00:43:30,400 --> 00:43:36,070
everything else is full open you can

00:43:32,410 --> 00:43:40,150
find it where as release stuff why is

00:43:36,070 --> 00:43:43,180
that for those weren't aware the the

00:43:40,150 --> 00:43:45,400
source code assets and team such as

00:43:43,180 --> 00:43:49,930
myself we're just recently acquired from

00:43:45,400 --> 00:43:52,660
from HPE staccato group so I'm I'm one

00:43:49,930 --> 00:43:57,220
month shy one day shy of two months that

00:43:52,660 --> 00:43:59,680
at Sousa and while HPE can be great

00:43:57,220 --> 00:44:03,280
about many things open sourcing its

00:43:59,680 --> 00:44:05,770
software is not really one of them but

00:44:03,280 --> 00:44:08,530
Sousa is very much an open open source

00:44:05,770 --> 00:44:10,660
company and we're now going through that

00:44:08,530 --> 00:44:13,690
process with a lot of the stuff that we

00:44:10,660 --> 00:44:15,370
built so staccato was this full

00:44:13,690 --> 00:44:18,160
batteries included platform of

00:44:15,370 --> 00:44:20,500
everything mostly closed source we're

00:44:18,160 --> 00:44:22,690
basically taking the time now to piece

00:44:20,500 --> 00:44:24,520
all these things out so you know

00:44:22,690 --> 00:44:27,820
kubernetes control playing Cloud Foundry

00:44:24,520 --> 00:44:30,160
service manager etc we're splitting all

00:44:27,820 --> 00:44:32,650
these pieces they will all become open

00:44:30,160 --> 00:44:34,900
the first two things actually was that

00:44:32,650 --> 00:44:38,380
you know that fissile and CF solo from

00:44:34,900 --> 00:44:40,450
the Cloud Foundry bits but more will be

00:44:38,380 --> 00:44:42,160
coming in the future so everything you

00:44:40,450 --> 00:44:44,790
see for the most part

00:44:42,160 --> 00:44:47,500
actually is in the fissile and CF solo

00:44:44,790 --> 00:44:50,350
but there will be more coming in the

00:44:47,500 --> 00:44:55,270
very near future and all of it will be

00:44:50,350 --> 00:44:58,270
in the open in terms of the next steps

00:44:55,270 --> 00:44:59,770
for features otherwise it's hardening

00:44:58,270 --> 00:45:02,650
the ability to target any kubernetes

00:44:59,770 --> 00:45:04,300
deployment a lot of this is mostly

00:45:02,650 --> 00:45:07,780
around things like service discovery

00:45:04,300 --> 00:45:11,320
configuration and other setup leveraging

00:45:07,780 --> 00:45:12,880
helm charts throughout as well as other

00:45:11,320 --> 00:45:14,440
extended kubernetes features that I

00:45:12,880 --> 00:45:15,940
mentioned before things like critical

00:45:14,440 --> 00:45:18,369
pods pod affinity and

00:45:15,940 --> 00:45:19,839
and again leveraging more of the new

00:45:18,369 --> 00:45:22,150
Cloud Foundry efforts as well as

00:45:19,839 --> 00:45:25,270
contributing old ones that had been

00:45:22,150 --> 00:45:27,250
developed previously at HPE and act to

00:45:25,270 --> 00:45:28,960
state that just never made their way

00:45:27,250 --> 00:45:31,089
open source things like application

00:45:28,960 --> 00:45:33,510
versioning application single sign-on

00:45:31,089 --> 00:45:37,480
and backup and restore functionality

00:45:33,510 --> 00:45:41,470
that we built over time in my team that

00:45:37,480 --> 00:45:44,410
just never got open sourced and the last

00:45:41,470 --> 00:45:46,270
one is an interesting side project that

00:45:44,410 --> 00:45:49,720
we had along with this which is called

00:45:46,270 --> 00:45:52,030
furnace basically it swaps out Diego for

00:45:49,720 --> 00:45:54,240
direct kubernetes access so that you

00:45:52,030 --> 00:45:56,680
could be running you know why run

00:45:54,240 --> 00:45:59,109
containers in containers that's exactly

00:45:56,680 --> 00:46:01,329
how Diego operates there's and when you

00:45:59,109 --> 00:46:03,690
have an entire container control plane

00:46:01,329 --> 00:46:05,859
underneath you it's not necessary

00:46:03,690 --> 00:46:08,890
basically it's an experiment that we

00:46:05,859 --> 00:46:10,390
proved it's possible but you know right

00:46:08,890 --> 00:46:12,280
now we'll probably want to focus more on

00:46:10,390 --> 00:46:15,069
breaking some of the Bosch isms and

00:46:12,280 --> 00:46:18,520
bringing Cloud Foundry back to be a true

00:46:15,069 --> 00:46:21,190
you know component 12 factor app type

00:46:18,520 --> 00:46:27,430
system and then we'll address some of

00:46:21,190 --> 00:46:27,970
the other aspects and with that I say

00:46:27,430 --> 00:46:33,010
thank you

00:46:27,970 --> 00:46:35,289
we curious on that it's all recorded

00:46:33,010 --> 00:46:41,349
though so she'll be able to catch that

00:46:35,289 --> 00:46:42,849
any time any questions so realize I'm

00:46:41,349 --> 00:46:44,890
spot on time and somebody is going to

00:46:42,849 --> 00:46:46,809
follow so you can always ask me later

00:46:44,890 --> 00:46:49,170
please step up to the mic if you'd like

00:46:46,809 --> 00:46:58,270
to ask a question otherwise I am

00:46:49,170 --> 00:47:01,630
generally around one quick question I

00:46:58,270 --> 00:47:05,079
realize we're holding up some deals so

00:47:01,630 --> 00:47:07,869
you just described a little bit the helm

00:47:05,079 --> 00:47:12,880
aspect of this just amplify that for me

00:47:07,869 --> 00:47:14,829
please so one thing is that if we can

00:47:12,880 --> 00:47:18,670
truly bring Cloud Foundry

00:47:14,829 --> 00:47:21,190
right to that containerized control

00:47:18,670 --> 00:47:24,849
plane Nirvana

00:47:21,190 --> 00:47:26,829
as it were and be easily to install then

00:47:24,849 --> 00:47:29,540
it should be able to install the helm

00:47:26,829 --> 00:47:31,130
chart by itself now the part that

00:47:29,540 --> 00:47:33,770
I haven't gone into well there's this

00:47:31,130 --> 00:47:38,030
entire service ecosystem that can go

00:47:33,770 --> 00:47:39,650
along with Cloud Foundry and that can go

00:47:38,030 --> 00:47:41,630
along with the Cloud Foundry service

00:47:39,650 --> 00:47:44,240
brokers as was mentioned Christians

00:47:41,630 --> 00:47:47,390
talked before and some other things now

00:47:44,240 --> 00:47:50,240
if those are deployed via helm or how

00:47:47,390 --> 00:47:52,970
you interact with those is an entire

00:47:50,240 --> 00:47:54,890
open space and one that we're just

00:47:52,970 --> 00:47:57,200
currently looking into and haven't made

00:47:54,890 --> 00:47:59,390
any kind of hard commitments but we do

00:47:57,200 --> 00:48:02,030
know that helm does seem to be the

00:47:59,390 --> 00:48:04,430
current package manager of choice with

00:48:02,030 --> 00:48:06,590
growing interest inside the kubernetes

00:48:04,430 --> 00:48:08,120
ecosystem so if we're going to work

00:48:06,590 --> 00:48:14,870
there we're going to work with helm as

00:48:08,120 --> 00:48:18,310
well all right thanks I'll let the next

00:48:14,870 --> 00:48:18,310

YouTube URL: https://www.youtube.com/watch?v=8R1HSfVHyGs


