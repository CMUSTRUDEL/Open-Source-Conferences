Title: Providing Service Access with Service Keys Using HAProxy and Floating IPs
Publication date: 2017-05-16
Playlist: Cloud Foundry Day at OpenStack Summit 2017
Description: 
	Service brokers provide a well-proven way to manage services in Cloud Foundry. This way applications can be easily connected to services like databases or message queues. But there are situations where direct access to a service is required. For this scenario Cloud Foundry provides the concept of generating service keys that hold credentials that allow access to a service instance. But what about situations in which the service is deployed in a private network that is only accessible from Cloud
Captions: 
	00:00:03,910 --> 00:00:10,700
welcome back after the break you hear

00:00:08,330 --> 00:00:14,960
correctly right if you want something to

00:00:10,700 --> 00:00:18,170
be about Cloud Foundry I see a little

00:00:14,960 --> 00:00:22,820
change of the people here sitting some

00:00:18,170 --> 00:00:25,099
are the same some are others now I'm

00:00:22,820 --> 00:00:28,179
talking a second time about our service

00:00:25,099 --> 00:00:33,920
broker framework there was another talk

00:00:28,179 --> 00:00:38,510
today at 2 o'clock which has a little

00:00:33,920 --> 00:00:41,420
different kind of focus and some slides

00:00:38,510 --> 00:00:44,300
are the same at the beginning and then

00:00:41,420 --> 00:00:47,329
we're switching over to another theme

00:00:44,300 --> 00:00:51,850
because we start at the same idea from

00:00:47,329 --> 00:00:54,890
from the state my name is Christian

00:00:51,850 --> 00:00:56,629
Brinker I'm from Ebola we are a cloud

00:00:54,890 --> 00:01:00,940
consulting cloud software company from

00:00:56,629 --> 00:01:04,370
Germany Cloud Foundry server member and

00:01:00,940 --> 00:01:08,240
my colleague Sebastian is ill at home I

00:01:04,370 --> 00:01:10,220
hope you get well and what we are

00:01:08,240 --> 00:01:13,040
talking about what I'm talking about now

00:01:10,220 --> 00:01:16,840
is about how to provide access to

00:01:13,040 --> 00:01:20,930
services which are brought to you by

00:01:16,840 --> 00:01:24,080
service broker using a trick with HP a

00:01:20,930 --> 00:01:27,790
proxy and floating at peace what's the

00:01:24,080 --> 00:01:31,250
problem start here the ones who were to

00:01:27,790 --> 00:01:34,010
here at the other session do already

00:01:31,250 --> 00:01:37,760
know this slide with Bob Bob has this

00:01:34,010 --> 00:01:40,580
cool application and Bob wants to put

00:01:37,760 --> 00:01:42,680
this application Cloud Foundry and who

00:01:40,580 --> 00:01:44,960
in the room did not use Cloud Foundry

00:01:42,680 --> 00:01:48,290
already ordered Dustin don't have a clue

00:01:44,960 --> 00:01:50,600
so we can skip the next slides perfectly

00:01:48,290 --> 00:01:54,560
if you're interested in cloud foundry

00:01:50,600 --> 00:01:57,890
and so on you can go back in the video

00:01:54,560 --> 00:02:04,360
from the first talk or one of the others

00:01:57,890 --> 00:02:06,980
here today so Bob wants this database

00:02:04,360 --> 00:02:08,750
access and he gets it with a service

00:02:06,980 --> 00:02:10,369
broker we have heard something about the

00:02:08,750 --> 00:02:12,260
Brooklyn service broker we heard

00:02:10,369 --> 00:02:15,890
something about that our service broker

00:02:12,260 --> 00:02:16,460
framework today and but the service

00:02:15,890 --> 00:02:18,590
yield

00:02:16,460 --> 00:02:21,220
database he works on it with his

00:02:18,590 --> 00:02:26,630
application and then he runs into some

00:02:21,220 --> 00:02:29,500
failure he don't have a clue so he wants

00:02:26,630 --> 00:02:33,800
some access to it on some way to

00:02:29,500 --> 00:02:36,200
directly debug some errors here but

00:02:33,800 --> 00:02:38,780
that's only not only going through

00:02:36,200 --> 00:02:44,540
through databases maybe for all that

00:02:38,780 --> 00:02:47,630
things here on the right he's using so

00:02:44,540 --> 00:02:50,240
if we recall we're from our cloth

00:02:47,630 --> 00:02:52,460
application on Cloud Foundry we have our

00:02:50,240 --> 00:02:54,890
service and it's put there on some

00:02:52,460 --> 00:03:00,110
servicers we have this life cycle

00:02:54,890 --> 00:03:03,410
ongoing between our user Cloud Foundry

00:03:00,110 --> 00:03:10,540
the service broker in this backend like

00:03:03,410 --> 00:03:13,520
Brooklyn or like heat or whatever so

00:03:10,540 --> 00:03:16,640
with this different kind of services

00:03:13,520 --> 00:03:19,580
managed services user provided bindable

00:03:16,640 --> 00:03:22,190
not findable router services syslog

00:03:19,580 --> 00:03:25,220
drains volume services and they all have

00:03:22,190 --> 00:03:27,770
the same interaction so you create a

00:03:25,220 --> 00:03:30,260
service broker if the cuddler gets

00:03:27,770 --> 00:03:32,360
fetched you it can get it accessible in

00:03:30,260 --> 00:03:35,270
the marketplace then you create your

00:03:32,360 --> 00:03:37,490
service instances there and then the

00:03:35,270 --> 00:03:40,130
interesting point is you create service

00:03:37,490 --> 00:03:42,260
bindings for the exes so you get

00:03:40,130 --> 00:03:44,540
credentials back from the service broker

00:03:42,260 --> 00:03:48,410
to the cloud flow controller and the

00:03:44,540 --> 00:03:50,000
application but that's for the

00:03:48,410 --> 00:03:51,620
application it's in the application

00:03:50,000 --> 00:03:55,550
environment if you delete that

00:03:51,620 --> 00:03:57,950
application that information is gone so

00:03:55,550 --> 00:04:01,850
you haven't have no possibility to

00:03:57,950 --> 00:04:06,080
access the database because the exes is

00:04:01,850 --> 00:04:09,320
binded to the application and that's

00:04:06,080 --> 00:04:14,800
only in the network of the application

00:04:09,320 --> 00:04:17,810
we see that later on one little

00:04:14,800 --> 00:04:21,049
advertisement we are having a framework

00:04:17,810 --> 00:04:25,160
for this cool stuff here implementing

00:04:21,049 --> 00:04:27,230
the whole workflow here it's developed

00:04:25,160 --> 00:04:30,130
in Java I've talked about a little bit

00:04:27,230 --> 00:04:30,130
in the other slot

00:04:31,480 --> 00:04:35,600
the blue things are the implemented of

00:04:34,340 --> 00:04:41,150
the framework and the rest you can

00:04:35,600 --> 00:04:44,419
exchange some configuration stuff by

00:04:41,150 --> 00:04:46,280
that here we want to access our service

00:04:44,419 --> 00:04:50,300
that's called in a cloud for me the

00:04:46,280 --> 00:04:52,100
service key management so bob has this

00:04:50,300 --> 00:04:57,260
service and he wants directly access

00:04:52,100 --> 00:05:00,710
with an alt workflow that doesn't work

00:04:57,260 --> 00:05:03,620
so the change is here that bob is the

00:05:00,710 --> 00:05:08,500
one who's getting the access the

00:05:03,620 --> 00:05:11,870
exchange in for Bob is two other

00:05:08,500 --> 00:05:13,940
commands in the CF CLI so he instead of

00:05:11,870 --> 00:05:16,430
creating a service binding he creates a

00:05:13,940 --> 00:05:20,870
service key which he can address a name

00:05:16,430 --> 00:05:23,900
to you which is intensely it's the same

00:05:20,870 --> 00:05:26,110
as he has a service binding it's the

00:05:23,900 --> 00:05:29,210
same object it's the same credentials

00:05:26,110 --> 00:05:31,700
but the use case is a little bit

00:05:29,210 --> 00:05:34,789
different because instead of the

00:05:31,700 --> 00:05:36,410
application being in the in the private

00:05:34,789 --> 00:05:38,900
network where the host and the Cloud

00:05:36,410 --> 00:05:42,350
Foundry environment is and so on

00:05:38,900 --> 00:05:44,930
Bob isn't in that private network so if

00:05:42,350 --> 00:05:46,760
Bob wants direct access to the applet to

00:05:44,930 --> 00:05:49,610
the service instance it has to be in the

00:05:46,760 --> 00:05:55,280
internet accessible which isn't that

00:05:49,610 --> 00:05:57,890
cool stuff so what you really want to do

00:05:55,280 --> 00:06:02,479
is i've to to the workflow here is the

00:05:57,890 --> 00:06:05,270
same like here only a little bit

00:06:02,479 --> 00:06:07,400
different because bob is going into this

00:06:05,270 --> 00:06:10,370
cloud firmly you get to the service

00:06:07,400 --> 00:06:13,370
instance created you get your service

00:06:10,370 --> 00:06:15,979
binding information from here it goes

00:06:13,370 --> 00:06:18,139
it's got back the information that the

00:06:15,979 --> 00:06:19,729
user and so on is created with IP

00:06:18,139 --> 00:06:21,889
address and so on got back to the Cloud

00:06:19,729 --> 00:06:24,710
Foundry and from there on to Bob

00:06:21,889 --> 00:06:27,110
provided and then Bob gets direct access

00:06:24,710 --> 00:06:31,940
part the service instance is in the

00:06:27,110 --> 00:06:34,669
internet so what you want is this yeah

00:06:31,940 --> 00:06:36,860
the service incidence is encapsulated in

00:06:34,669 --> 00:06:40,669
your private network and the service

00:06:36,860 --> 00:06:42,860
broker isn't the private network no one

00:06:40,669 --> 00:06:43,370
can access both from outside from the

00:06:42,860 --> 00:06:46,040
internet

00:06:43,370 --> 00:06:51,110
and bob has only has some interaction

00:06:46,040 --> 00:06:55,550
with it but somehow he has to access the

00:06:51,110 --> 00:07:00,800
database and that's when we got this

00:06:55,550 --> 00:07:04,550
little change here so looks at the first

00:07:00,800 --> 00:07:07,190
place looks a little bit much I hope you

00:07:04,550 --> 00:07:09,500
can read it I see the writing is a

00:07:07,190 --> 00:07:12,949
little bit small

00:07:09,500 --> 00:07:15,139
from bhai from their behind we have

00:07:12,949 --> 00:07:18,830
several components here and the first

00:07:15,139 --> 00:07:21,100
thing is we put a H a proxy into the

00:07:18,830 --> 00:07:25,389
internet because that's something

00:07:21,100 --> 00:07:28,970
well-known many people can have their

00:07:25,389 --> 00:07:33,680
knowledge about the configuration of it

00:07:28,970 --> 00:07:36,620
and you can use it for for scaling

00:07:33,680 --> 00:07:38,780
things you can use it for H high

00:07:36,620 --> 00:07:41,840
availability you can make sanity checks

00:07:38,780 --> 00:07:45,380
and so on and but the problem with the

00:07:41,840 --> 00:07:47,330
edge a proxy here is how does the

00:07:45,380 --> 00:07:50,570
service broker communicate with it

00:07:47,330 --> 00:07:54,500
how can he reconfigure it so we do not

00:07:50,570 --> 00:07:57,500
need one H a proxy per service instance

00:07:54,500 --> 00:08:00,950
so we can use one H a proxy for all our

00:07:57,500 --> 00:08:03,620
services because pop only wants to debug

00:08:00,950 --> 00:08:06,380
he wants do not want to make a large

00:08:03,620 --> 00:08:09,470
impact on the database to run through

00:08:06,380 --> 00:08:14,260
batch jobs or something with big lot but

00:08:09,470 --> 00:08:17,150
but only wants to look after the data so

00:08:14,260 --> 00:08:20,060
one we want to do it with one floating

00:08:17,150 --> 00:08:25,820
IP for the internet and one H a proxy

00:08:20,060 --> 00:08:29,449
for example so we intervie install some

00:08:25,820 --> 00:08:31,610
agent into the H a proxy server because

00:08:29,449 --> 00:08:35,089
the H a proxy at itself doesn't provide

00:08:31,610 --> 00:08:38,570
a rich API for reconfiguration from the

00:08:35,089 --> 00:08:42,080
network so this is a little program

00:08:38,570 --> 00:08:47,450
written in Python which connects to

00:08:42,080 --> 00:08:49,400
Revit mq for the information you have to

00:08:47,450 --> 00:08:54,339
get a new configuration for the H a

00:08:49,400 --> 00:08:56,450
proxy from somewhere and that is done is

00:08:54,339 --> 00:09:00,260
produced by the

00:08:56,450 --> 00:09:02,959
Shh a proxy back and we're out which is

00:09:00,260 --> 00:09:04,760
called by the service broker and when

00:09:02,959 --> 00:09:08,690
you want to service key when the service

00:09:04,760 --> 00:09:10,279
Keys asked for the service broker makes

00:09:08,690 --> 00:09:14,720
this whole thing with the service

00:09:10,279 --> 00:09:17,149
instance a make a user but it looks up

00:09:14,720 --> 00:09:20,570
the IP address from the service instance

00:09:17,149 --> 00:09:22,579
and then you get this information that

00:09:20,570 --> 00:09:25,790
gets the IP address to the edge a proxy

00:09:22,579 --> 00:09:28,540
back-end and saying here I want some

00:09:25,790 --> 00:09:31,399
public accessibility for that IP address

00:09:28,540 --> 00:09:33,649
the H a proxy back-end nails the

00:09:31,399 --> 00:09:36,820
configuration of the H a proxy because

00:09:33,649 --> 00:09:38,930
it started somewhere and then make some

00:09:36,820 --> 00:09:41,089
reconfiguration of it because it's at

00:09:38,930 --> 00:09:45,829
some listener at some port binding off

00:09:41,089 --> 00:09:49,010
for something and gets the H a proxy

00:09:45,829 --> 00:09:51,500
agent to know hey there's a new

00:09:49,010 --> 00:09:56,990
configuration and it gets it from here

00:09:51,500 --> 00:09:59,510
why this complicated setup if we look at

00:09:56,990 --> 00:10:02,510
the production environment we have many

00:09:59,510 --> 00:10:08,269
services with many service brokers maybe

00:10:02,510 --> 00:10:12,680
and where maybe many users on it

00:10:08,269 --> 00:10:16,420
and some users may make different

00:10:12,680 --> 00:10:19,670
accessibility zhh at the same time

00:10:16,420 --> 00:10:23,060
requesting service keys at the same time

00:10:19,670 --> 00:10:25,339
so we have the problem that the H a

00:10:23,060 --> 00:10:29,029
proxy has to be reconfigured from

00:10:25,339 --> 00:10:33,380
different ways or all the same time so

00:10:29,029 --> 00:10:36,010
if we get the information hey agent get

00:10:33,380 --> 00:10:39,170
your new configuration for the H a proxy

00:10:36,010 --> 00:10:41,839
you get the actual one not that one in

00:10:39,170 --> 00:10:45,019
between it gets the state from that

00:10:41,839 --> 00:10:51,319
point of time but does not have to

00:10:45,019 --> 00:10:54,380
expose some external API because the H a

00:10:51,319 --> 00:10:59,029
proxy agent thing here does not expose

00:10:54,380 --> 00:11:02,480
some endpoint outwards so it's there's

00:10:59,029 --> 00:11:05,300
no attack point because all connection

00:11:02,480 --> 00:11:09,940
is done actively by there H a proxy

00:11:05,300 --> 00:11:09,940
agent to the rabbitmq

00:11:10,140 --> 00:11:19,270
what does it mean if we go to our to our

00:11:16,660 --> 00:11:23,080
H a proxy conflict where for example

00:11:19,270 --> 00:11:26,590
some we want to have a cluster of a

00:11:23,080 --> 00:11:30,970
database with renounce we have the

00:11:26,590 --> 00:11:34,540
possibility to to address each node with

00:11:30,970 --> 00:11:37,930
the binding of the public port to our

00:11:34,540 --> 00:11:40,030
private IP address private port so we

00:11:37,930 --> 00:11:43,600
get that three nodes differently

00:11:40,030 --> 00:11:46,480
accessible one set up you will see

00:11:43,600 --> 00:11:48,940
that's not the typical H a proxy

00:11:46,480 --> 00:11:52,300
database configuration you see all over

00:11:48,940 --> 00:12:01,330
the internet because what was our ID

00:11:52,300 --> 00:12:04,930
behind it he wants to debug the cluster

00:12:01,330 --> 00:12:06,880
which means now fail over interesting

00:12:04,930 --> 00:12:09,520
from the connection of the service

00:12:06,880 --> 00:12:12,910
broker but getting to know what that

00:12:09,520 --> 00:12:21,600
that's a single node us so we have to

00:12:12,910 --> 00:12:21,600
provide an access directly to the node

00:12:23,010 --> 00:12:29,230
for that we have to some knowledge about

00:12:26,950 --> 00:12:32,530
the reconfiguration the providing of

00:12:29,230 --> 00:12:36,840
options to that and but we have also

00:12:32,530 --> 00:12:39,940
other setups interests maybe the

00:12:36,840 --> 00:12:42,910
connection to our database is not for

00:12:39,940 --> 00:12:44,530
debug purposes but we have some

00:12:42,910 --> 00:12:46,570
application in some other private

00:12:44,530 --> 00:12:49,690
network which is not directly accessible

00:12:46,570 --> 00:12:52,900
from our Cloud Foundry internal network

00:12:49,690 --> 00:12:57,280
but that application has also to be able

00:12:52,900 --> 00:13:00,250
to connect to that database we have no

00:12:57,280 --> 00:13:03,640
other way but proxying through from one

00:13:00,250 --> 00:13:08,080
network to another because the problem

00:13:03,640 --> 00:13:11,200
is if your applicative you make it by

00:13:08,080 --> 00:13:14,740
router of something you have that wide

00:13:11,200 --> 00:13:19,210
open channel from that network to

00:13:14,740 --> 00:13:20,650
another open for for some results from

00:13:19,210 --> 00:13:22,630
that network to the Cloud Foundry

00:13:20,650 --> 00:13:24,910
environment so maybe that's

00:13:22,630 --> 00:13:27,730
not that kind of coolness you want to do

00:13:24,910 --> 00:13:33,130
to introduce to your production

00:13:27,730 --> 00:13:37,180
environment so you maybe want to only be

00:13:33,130 --> 00:13:40,660
make some fell over configuration of

00:13:37,180 --> 00:13:42,640
your clutter of your H a proxy and buy

00:13:40,660 --> 00:13:46,930
that made it accessible through the

00:13:42,640 --> 00:13:51,010
other network and here maybe introducing

00:13:46,930 --> 00:13:56,080
some access control lists making you

00:13:51,010 --> 00:13:59,830
some IP supper dress constraints so only

00:13:56,080 --> 00:14:02,770
your application note which has your

00:13:59,830 --> 00:14:04,750
application in some OpenStack tenant is

00:14:02,770 --> 00:14:09,640
able to connect to your database and

00:14:04,750 --> 00:14:11,620
nothing else maybe if you you if your

00:14:09,640 --> 00:14:15,790
service you're providing is a some kind

00:14:11,620 --> 00:14:18,850
of HTTP or HTTPS perm service you even

00:14:15,790 --> 00:14:22,030
can control other things like sub

00:14:18,850 --> 00:14:24,310
address path asan make their segregation

00:14:22,030 --> 00:14:27,730
so one if for example if you have a

00:14:24,310 --> 00:14:32,170
lastik search cluster you have as a rest

00:14:27,730 --> 00:14:36,270
endpoint each each separation of data so

00:14:32,170 --> 00:14:42,340
you have your euro document list in your

00:14:36,270 --> 00:14:44,080
view even in some in some collection of

00:14:42,340 --> 00:14:46,300
data you have there and you have another

00:14:44,080 --> 00:14:50,010
one and there are some different rest

00:14:46,300 --> 00:14:54,280
endpoints behind an HTTP endpoint and

00:14:50,010 --> 00:14:56,860
what you might want maybe is making that

00:14:54,280 --> 00:14:58,990
accessible but not the rest you have

00:14:56,860 --> 00:15:01,300
this distinct endpoint you want to be

00:14:58,990 --> 00:15:03,460
accessible and within with this H a

00:15:01,300 --> 00:15:06,700
proxy conflict thing you can make only

00:15:03,460 --> 00:15:09,750
this accessible to the other network so

00:15:06,700 --> 00:15:13,390
you have a really distinct small

00:15:09,750 --> 00:15:17,620
accessible point which is proper which

00:15:13,390 --> 00:15:21,930
is kind of canalized through the router

00:15:17,620 --> 00:15:21,930
through the other network so

00:15:24,350 --> 00:15:40,460
if we jump back we have this to get

00:15:33,410 --> 00:15:44,180
what's the awesome problem here is you

00:15:40,460 --> 00:15:47,540
see one service broker four components

00:15:44,180 --> 00:15:51,790
which have to be introduced to your to

00:15:47,540 --> 00:15:57,310
your stack to your implementation but

00:15:51,790 --> 00:16:00,290
that's the only thing which is which is

00:15:57,310 --> 00:16:03,860
special for that service so you can

00:16:00,290 --> 00:16:06,650
reuse your H a proxy back-end and your H

00:16:03,860 --> 00:16:08,540
a proxy for different service brokers so

00:16:06,650 --> 00:16:11,090
you can have a whole bunch of service

00:16:08,540 --> 00:16:14,150
brokers using the heads of the same H a

00:16:11,090 --> 00:16:18,010
proxy back-end and using the same H I

00:16:14,150 --> 00:16:20,930
proxy so you can manage different

00:16:18,010 --> 00:16:25,520
services going through from another

00:16:20,930 --> 00:16:28,090
network and why that RabbitMQ we see

00:16:25,520 --> 00:16:28,090
later on

00:16:28,390 --> 00:16:33,920
jump back our benefits from that setup

00:16:32,240 --> 00:16:36,680
we have access control lists for

00:16:33,920 --> 00:16:38,660
optimizing your connection protocol for

00:16:36,680 --> 00:16:40,850
several restrictions like a piece up

00:16:38,660 --> 00:16:44,570
nets and so on where it can make sanity

00:16:40,850 --> 00:16:46,970
checks like we've done here this line

00:16:44,570 --> 00:16:49,280
here in that configuration makes clear

00:16:46,970 --> 00:16:51,770
that a connection to the database made

00:16:49,280 --> 00:16:55,060
through the H a proxy is always correct

00:16:51,770 --> 00:16:57,110
because the connection to that node is

00:16:55,060 --> 00:16:59,530
tested before the connections

00:16:57,110 --> 00:17:02,590
established through the H a proxy

00:16:59,530 --> 00:17:05,089
because the H a proxy has some user

00:17:02,590 --> 00:17:06,860
which is a only able to make a

00:17:05,089 --> 00:17:09,829
connection but nothing else to the

00:17:06,860 --> 00:17:12,470
database this has to be introduced to

00:17:09,829 --> 00:17:17,270
your service instance provisioning that

00:17:12,470 --> 00:17:19,699
the role is there but then you have made

00:17:17,270 --> 00:17:22,520
a connection through to the H a proxy

00:17:19,699 --> 00:17:24,709
it's gets sanity check that the node is

00:17:22,520 --> 00:17:27,650
healthy it wants to provide to you and

00:17:24,709 --> 00:17:30,220
then makes you a tunnel through the H a

00:17:27,650 --> 00:17:33,140
proxy to the database node which is

00:17:30,220 --> 00:17:35,590
really they're not some failover

00:17:33,140 --> 00:17:38,230
mechanism needed at the

00:17:35,590 --> 00:17:41,620
at the client because the HJ proxy is a

00:17:38,230 --> 00:17:45,580
fail over a proxy for load balancing

00:17:41,620 --> 00:17:49,900
purposes you have no direct access to

00:17:45,580 --> 00:17:53,830
the database so if you run a for example

00:17:49,900 --> 00:17:57,550
a DDoS attack against the H a proxy IP

00:17:53,830 --> 00:18:00,250
address the database isn't really caring

00:17:57,550 --> 00:18:02,470
about it because if the H a proxy goes

00:18:00,250 --> 00:18:04,840
down the database is healthy the

00:18:02,470 --> 00:18:07,480
application connecting to the H a proxy

00:18:04,840 --> 00:18:10,150
of heresy you Cloud Foundry instance is

00:18:07,480 --> 00:18:12,640
health because it has another IP address

00:18:10,150 --> 00:18:15,820
has other load balancers and so on so

00:18:12,640 --> 00:18:20,040
the complete stack isn't corrupted by

00:18:15,820 --> 00:18:23,080
and DDoS attack against this H a proxy

00:18:20,040 --> 00:18:24,430
you have a sip and that is done because

00:18:23,080 --> 00:18:26,530
you have a separation of the routing

00:18:24,430 --> 00:18:28,360
because the routing through the go route

00:18:26,530 --> 00:18:31,420
a load balancer go router to the

00:18:28,360 --> 00:18:34,270
application to the service is not is a

00:18:31,420 --> 00:18:37,950
completely other route then through the

00:18:34,270 --> 00:18:40,420
H a proxy to the service instances

00:18:37,950 --> 00:18:43,470
failover stretches we talked about load

00:18:40,420 --> 00:18:46,990
balancing you can have more than one

00:18:43,470 --> 00:18:51,100
node behind one a port or a P address

00:18:46,990 --> 00:18:53,110
and also what you can do is limit their

00:18:51,100 --> 00:18:55,690
connections if you provide a service

00:18:53,110 --> 00:18:59,650
which is share with with your service

00:18:55,690 --> 00:19:02,740
broker you may want to limit 8 the

00:18:59,650 --> 00:19:05,050
number of connections so you say you

00:19:02,740 --> 00:19:06,610
have a plan in your in your service

00:19:05,050 --> 00:19:08,560
catalog which only provides 5

00:19:06,610 --> 00:19:12,580
connections at the same time to your

00:19:08,560 --> 00:19:17,410
database because large-scale

00:19:12,580 --> 00:19:19,840
applications using cell 100 application

00:19:17,410 --> 00:19:22,480
instances may should be other treated

00:19:19,840 --> 00:19:26,320
like a service instance which is laying

00:19:22,480 --> 00:19:29,680
low and then they should buy some other

00:19:26,320 --> 00:19:32,050
service instance which which is more

00:19:29,680 --> 00:19:35,350
capable of handling this high traffic

00:19:32,050 --> 00:19:38,530
which is more expensive and you want to

00:19:35,350 --> 00:19:41,170
push your users there not by restriction

00:19:38,530 --> 00:19:43,690
but by encouraging them so use restrict

00:19:41,170 --> 00:19:48,280
the number of connections to the

00:19:43,690 --> 00:19:48,720
database the H a proxy has some ACL rule

00:19:48,280 --> 00:19:50,980
for

00:19:48,720 --> 00:19:54,580
restricting the number of configuration

00:19:50,980 --> 00:19:56,109
so instead of using the H a proxy for

00:19:54,580 --> 00:19:58,359
the service key management you can also

00:19:56,109 --> 00:20:00,940
use it for the normal service binding

00:19:58,359 --> 00:20:03,309
management so the connection from your

00:20:00,940 --> 00:20:06,220
Cloud Foundry from your Cloud Foundry

00:20:03,309 --> 00:20:08,289
deployment of your app through the H a

00:20:06,220 --> 00:20:12,309
proxy to the database cluster can be

00:20:08,289 --> 00:20:14,739
managed by that so you have can use they

00:20:12,309 --> 00:20:16,840
failover mechanisms and so on and you

00:20:14,739 --> 00:20:19,659
can use the limitation of connections

00:20:16,840 --> 00:20:22,929
for providing a smaller service plan

00:20:19,659 --> 00:20:27,580
than may be possible there and as where

00:20:22,929 --> 00:20:29,259
and like I told you connections between

00:20:27,580 --> 00:20:33,249
different private networks are possible

00:20:29,259 --> 00:20:36,489
in your company network so you have a AJ

00:20:33,249 --> 00:20:39,909
proxy using establishing this special

00:20:36,489 --> 00:20:43,769
connection maybe because it's he's in

00:20:39,909 --> 00:20:48,669
both networks but nothing no one other

00:20:43,769 --> 00:20:51,940
so what alternatives are there for

00:20:48,669 --> 00:20:54,730
providing such access from elsewhere you

00:20:51,940 --> 00:20:58,690
have this this trick with CF SSH and

00:20:54,730 --> 00:21:01,269
port forwarding the out boundary if you

00:20:58,690 --> 00:21:04,389
make a if you have user you can log in

00:21:01,269 --> 00:21:07,450
with a CF CLI to the Cloud Foundry you

00:21:04,389 --> 00:21:10,509
can use CF SSH to jump into an

00:21:07,450 --> 00:21:13,330
application container and from there on

00:21:10,509 --> 00:21:17,409
you can use port forwarding without

00:21:13,330 --> 00:21:21,210
having to know about a service some SSH

00:21:17,409 --> 00:21:24,789
key because this is introduced by the

00:21:21,210 --> 00:21:27,489
CLI making an HTTP connection to the

00:21:24,789 --> 00:21:31,529
cosy of cloud foundry controller from

00:21:27,489 --> 00:21:37,090
there on the you have an SSH connection

00:21:31,529 --> 00:21:39,820
but the application a the the connection

00:21:37,090 --> 00:21:41,919
starts with the CF CLI installed if you

00:21:39,820 --> 00:21:46,029
want to connect an application to your

00:21:41,919 --> 00:21:48,009
database which is not home in your Cloud

00:21:46,029 --> 00:21:50,679
Foundry as a Cloud Foundry application

00:21:48,009 --> 00:21:55,509
you don't you have to install a CF CLI

00:21:50,679 --> 00:21:57,429
there all you have to introduce some SSH

00:21:55,509 --> 00:21:59,289
key there which is also installed on

00:21:57,429 --> 00:22:02,140
their service but that's not possible on

00:21:59,289 --> 00:22:07,840
a public cloud so

00:22:02,140 --> 00:22:10,899
there's a some limitation and also some

00:22:07,840 --> 00:22:15,730
there are platform installations they

00:22:10,899 --> 00:22:18,070
regulate the SS a mechanism by disabling

00:22:15,730 --> 00:22:21,250
it because they see there are some

00:22:18,070 --> 00:22:26,769
security issues like I've seen in the

00:22:21,250 --> 00:22:28,809
Volkswagen Group a t cloud and the

00:22:26,769 --> 00:22:33,389
connection you're doing is to localhost

00:22:28,809 --> 00:22:37,179
then from you if you're but that's the

00:22:33,389 --> 00:22:39,850
smallest problem the other possibility

00:22:37,179 --> 00:22:43,630
is having a virtual machine or container

00:22:39,850 --> 00:22:45,909
or something using as a jump-off which

00:22:43,630 --> 00:22:48,850
is more or less the same trick as above

00:22:45,909 --> 00:22:51,519
and from there you get the SSH port for

00:22:48,850 --> 00:22:53,139
awarding thing but there you don't have

00:22:51,519 --> 00:22:56,649
the limitations and so on the

00:22:53,139 --> 00:23:03,210
constraints you can I do are limiting

00:22:56,649 --> 00:23:05,649
the number of connections and so on I

00:23:03,210 --> 00:23:10,210
told you about we come back to the

00:23:05,649 --> 00:23:12,490
rabbitmq here we're working actually on

00:23:10,210 --> 00:23:16,779
scaling the things a little bit up and

00:23:12,490 --> 00:23:22,260
we told about I told you about the thing

00:23:16,779 --> 00:23:22,260
with mail from one network to another

00:23:22,679 --> 00:23:29,769
why not doing something like this you

00:23:26,159 --> 00:23:31,360
have one service broker who wants

00:23:29,769 --> 00:23:37,570
something goes to the service broker

00:23:31,360 --> 00:23:39,850
back-end and then yes he knows okay if

00:23:37,570 --> 00:23:43,419
you want that connection I have to Kurt

00:23:39,850 --> 00:23:45,010
to go to that H a proxy making a

00:23:43,419 --> 00:23:46,389
connection from there to there then from

00:23:45,010 --> 00:23:49,090
there through there and from there to

00:23:46,389 --> 00:23:52,480
there and so you can go through an old

00:23:49,090 --> 00:23:56,950
proxy chain which is in company networks

00:23:52,480 --> 00:23:59,049
really often can be found now or you

00:23:56,950 --> 00:24:01,720
want to do it because you have unveil of

00:23:59,049 --> 00:24:03,730
the system in your H a proxies if tha

00:24:01,720 --> 00:24:05,919
proxies for failover with if one goes

00:24:03,730 --> 00:24:08,889
down the other comes up so you have to

00:24:05,919 --> 00:24:10,750
incorporate both and the last one is

00:24:08,889 --> 00:24:13,630
already there the second one we are

00:24:10,750 --> 00:24:15,700
working on it because it's you need to

00:24:13,630 --> 00:24:17,380
have some management of the proxy

00:24:15,700 --> 00:24:19,510
Chane inside of the service broker

00:24:17,380 --> 00:24:22,899
backend because he has to know it has to

00:24:19,510 --> 00:24:25,899
know what is the proxy chain we want to

00:24:22,899 --> 00:24:29,380
go through so the service broker can ask

00:24:25,899 --> 00:24:36,789
for openly that chain not only OP me

00:24:29,380 --> 00:24:40,240
that that H a proxy like a child it's in

00:24:36,789 --> 00:24:44,070
better we have a frame it's open-source

00:24:40,240 --> 00:24:46,889
framework for developing service brokers

00:24:44,070 --> 00:24:48,700
you can find us in github you can

00:24:46,889 --> 00:24:55,980
contact us we are happy for

00:24:48,700 --> 00:24:58,960
contributions if you need more more

00:24:55,980 --> 00:25:04,690
support on it you can also buy it your

00:24:58,960 --> 00:25:06,940
company but we're also happy for for the

00:25:04,690 --> 00:25:09,070
open-source project here also the edge a

00:25:06,940 --> 00:25:15,250
proxy agent and the edge a proxy backend

00:25:09,070 --> 00:25:17,529
is on github so you can bear get in

00:25:15,250 --> 00:25:21,220
contact with us raising issues back

00:25:17,529 --> 00:25:23,380
fixing making pull requests help us with

00:25:21,220 --> 00:25:24,100
the ducks if you have tips for us Hey

00:25:23,380 --> 00:25:28,299
look at that

00:25:24,100 --> 00:25:32,919
that's a good idea we're happy for it so

00:25:28,299 --> 00:25:37,870
I hope you and got something out of my

00:25:32,919 --> 00:25:39,940
talk and I'm off for questions there are

00:25:37,870 --> 00:25:43,690
two microphones they are because we are

00:25:39,940 --> 00:25:48,820
recording please use it with if you have

00:25:43,690 --> 00:25:51,090
questions now as you can contact us wire

00:25:48,820 --> 00:25:51,090
that

00:25:53,010 --> 00:25:55,070

YouTube URL: https://www.youtube.com/watch?v=gjCq5vvm6PQ


