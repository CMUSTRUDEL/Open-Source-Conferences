Title: The Truth About Interop- Running Cloud Foundry on OpenStack
Publication date: 2017-05-16
Playlist: Cloud Foundry Day at OpenStack Summit 2017
Description: 
	According to the 2016 OpenStack survey, Cloud Foundry is the second most popular workload on OpenStack for managing applications. To ensure that Cloud Foundry runs on different OpenStack distributions and configurations is an important and classic interop example.From the OpenStack side, we see efforts towards interoperability between different OpenStack installations: There are challenges done by the foundation, as live on stage at the Barcelona summit. There is RefStack, defining a set of requ
Captions: 
	00:00:02,310 --> 00:00:08,590
so hello and welcome to this first

00:00:04,990 --> 00:00:11,080
session in the clock foundry 500 days my

00:00:08,590 --> 00:00:14,080
name is Yan I'm working for for sa P in

00:00:11,080 --> 00:00:16,890
the borscht open sexy bi team although

00:00:14,080 --> 00:00:20,350
we're going to work more on boss as well

00:00:16,890 --> 00:00:21,450
and we do deploy Cloud Foundry on

00:00:20,350 --> 00:00:25,390
OpenStack

00:00:21,450 --> 00:00:28,000
at least according to the survey we're

00:00:25,390 --> 00:00:31,770
not the only ones so it's a prominent

00:00:28,000 --> 00:00:35,020
workload like it was the second most

00:00:31,770 --> 00:00:37,300
behind kubernetes like today morning I

00:00:35,020 --> 00:00:39,220
saw that there might be a newer survey

00:00:37,300 --> 00:00:42,100
where it is like second place together

00:00:39,220 --> 00:00:45,360
with open shift but it's a prominent

00:00:42,100 --> 00:00:48,040
workload when cell interoperability is

00:00:45,360 --> 00:00:51,340
important for all those for all those

00:00:48,040 --> 00:00:53,290
users and what I mean when I say

00:00:51,340 --> 00:00:55,750
interoperability is like I have a

00:00:53,290 --> 00:00:58,239
certain workload and I want to run them

00:00:55,750 --> 00:01:02,050
on different openstax be it different

00:00:58,239 --> 00:01:06,310
versions different distributions or even

00:01:02,050 --> 00:01:08,560
just different configuration so what is

00:01:06,310 --> 00:01:12,549
cloud foundry like from the end-user

00:01:08,560 --> 00:01:14,950
point of view it's a rather simple cloud

00:01:12,549 --> 00:01:17,200
application platform you can just push

00:01:14,950 --> 00:01:19,899
your code and it's going to be to be

00:01:17,200 --> 00:01:23,530
running from the other perspective it's

00:01:19,899 --> 00:01:27,249
a rather complex distributed system with

00:01:23,530 --> 00:01:31,840
heterogeneous components that interact

00:01:27,249 --> 00:01:35,170
with each other so this is all managed

00:01:31,840 --> 00:01:39,399
by Bosh in the case of cloud foundry at

00:01:35,170 --> 00:01:42,189
least in most deployments and Bosh is a

00:01:39,399 --> 00:01:45,969
tool to manage distributed systems in

00:01:42,189 --> 00:01:48,279
general like creating the VMS deploying

00:01:45,969 --> 00:01:51,719
the software that should be running

00:01:48,279 --> 00:01:56,619
they're creating disks attaching them to

00:01:51,719 --> 00:01:59,919
the VMS monitoring VMs and resurrecting

00:01:56,619 --> 00:02:04,029
them if they are failing that's all done

00:01:59,919 --> 00:02:05,889
by Bosh and Bosh is multi cloud by

00:02:04,029 --> 00:02:08,560
default so it has a cloud provider

00:02:05,889 --> 00:02:10,509
interface which there are many

00:02:08,560 --> 00:02:14,440
implementations off one of them is the

00:02:10,509 --> 00:02:16,420
the Bosh OpenStack CPI

00:02:14,440 --> 00:02:22,480
and that's exactly what I'm working on

00:02:16,420 --> 00:02:24,000
with my team so as a short wrap-up of

00:02:22,480 --> 00:02:28,720
what I'm going to talk about

00:02:24,000 --> 00:02:30,940
interoperability is hard it's tough not

00:02:28,720 --> 00:02:33,810
only providing it but also verifying

00:02:30,940 --> 00:02:36,820
that things are as you expect them and

00:02:33,810 --> 00:02:40,240
what we see from the OpenStack community

00:02:36,820 --> 00:02:42,520
like the deaf core recommendations refs

00:02:40,240 --> 00:02:44,680
tag is just not enough

00:02:42,520 --> 00:02:46,930
like I mean OpenStack powered platform

00:02:44,680 --> 00:02:49,450
is far from being you can run Cloud

00:02:46,930 --> 00:02:51,160
Foundry there really really far and

00:02:49,450 --> 00:02:54,340
that's why we came up with the Cloud

00:02:51,160 --> 00:02:58,050
Foundry OpenStack validator which is a

00:02:54,340 --> 00:03:02,890
CF specific interoperability test suite

00:02:58,050 --> 00:03:06,070
that tries to use the OpenStack in

00:03:02,890 --> 00:03:09,280
question just as Bosh and the CPI and

00:03:06,070 --> 00:03:11,260
Cloud Foundry would so we create VMs

00:03:09,280 --> 00:03:13,420
with the CPI do all that life cycle

00:03:11,260 --> 00:03:18,610
stuff attaching disks detaching them

00:03:13,420 --> 00:03:20,560
taking snapshots all these operations in

00:03:18,610 --> 00:03:26,290
addition we that there are some more

00:03:20,560 --> 00:03:30,400
requirements like the interconnectivity

00:03:26,290 --> 00:03:33,910
between VMs and it's easy to extend so

00:03:30,400 --> 00:03:36,070
if you have an honorary product that is

00:03:33,910 --> 00:03:37,840
based on open source cloud foundry you

00:03:36,070 --> 00:03:40,990
can you can write extensions for the

00:03:37,840 --> 00:03:42,820
validator so you might ask what's the

00:03:40,990 --> 00:03:44,680
problem right interoperability isn't

00:03:42,820 --> 00:03:47,560
that built into OpenStack there's def

00:03:44,680 --> 00:03:50,170
core recommendations refs tag a test

00:03:47,560 --> 00:03:53,170
suite actually that actually tests these

00:03:50,170 --> 00:03:54,940
recommendations but turns out that at

00:03:53,170 --> 00:03:56,950
least until recently I think there was

00:03:54,940 --> 00:03:59,350
neither neutral nor cinder nor glands

00:03:56,950 --> 00:04:01,660
were were actually a recommendation that

00:03:59,350 --> 00:04:03,760
you needed to get the brand I'm an open

00:04:01,660 --> 00:04:06,280
site powered platform I think that

00:04:03,760 --> 00:04:08,590
changed recently so there is a new JSON

00:04:06,280 --> 00:04:10,660
file in the deaf core repository that

00:04:08,590 --> 00:04:14,470
actually includes some Neutron stuff and

00:04:10,660 --> 00:04:17,049
has some glance and cinder stuff but

00:04:14,470 --> 00:04:20,320
yeah that was not the case until until

00:04:17,049 --> 00:04:21,940
recently the second approach to

00:04:20,320 --> 00:04:23,669
interoperability that we've seen the

00:04:21,940 --> 00:04:27,520
first time on the on the Barcelona

00:04:23,669 --> 00:04:28,360
summit was the interrupt challenge where

00:04:27,520 --> 00:04:30,430
like

00:04:28,360 --> 00:04:33,159
sixteen people were on stage deploying

00:04:30,430 --> 00:04:34,979
the same workload to 16 different

00:04:33,159 --> 00:04:37,900
openstax

00:04:34,979 --> 00:04:40,270
the problem there was it was a rather

00:04:37,900 --> 00:04:43,210
small web application so nothing

00:04:40,270 --> 00:04:45,610
compared to a complex distributed system

00:04:43,210 --> 00:04:52,180
like Cloud Foundry with special

00:04:45,610 --> 00:04:54,849
requirements in this error area and it

00:04:52,180 --> 00:04:57,719
uses a library of Python library called

00:04:54,849 --> 00:04:59,979
shade that actually hides all those into

00:04:57,719 --> 00:05:02,789
all those problems all this

00:04:59,979 --> 00:05:07,569
incompatibilities and interrupt problems

00:05:02,789 --> 00:05:10,509
by having a cloud config that tells the

00:05:07,569 --> 00:05:12,969
library where it has to apply the the

00:05:10,509 --> 00:05:16,349
compatibility switches so it's going to

00:05:12,969 --> 00:05:19,090
work for exactly 16 open stacks and

00:05:16,349 --> 00:05:22,449
that's a big problem I mean you can use

00:05:19,090 --> 00:05:24,039
that for public clouds maybe because

00:05:22,449 --> 00:05:27,669
then there will be a provider of that

00:05:24,039 --> 00:05:31,000
but as soon as you install open snag on

00:05:27,669 --> 00:05:33,610
premise who's going to manage these

00:05:31,000 --> 00:05:37,360
these configuration files

00:05:33,610 --> 00:05:39,550
so in short 16 people doing the same

00:05:37,360 --> 00:05:41,500
workload on 16 open stacks is a really

00:05:39,550 --> 00:05:43,690
good good thing so don't get me wrong

00:05:41,500 --> 00:05:46,150
there this step forward for the

00:05:43,690 --> 00:05:48,129
OpenStack community but it does by no

00:05:46,150 --> 00:05:53,020
means imply that I can run my workload

00:05:48,129 --> 00:05:55,330
on my OpenStack so basically if you

00:05:53,020 --> 00:05:57,930
either deploy Cloud Foundry on OpenStack

00:05:55,330 --> 00:06:01,689
or provide an OpenStack that should run

00:05:57,930 --> 00:06:04,089
Cloud Foundry as a workload that's the

00:06:01,689 --> 00:06:11,379
question that you want to answer try to

00:06:04,089 --> 00:06:13,599
answer does it run on this OpenStack the

00:06:11,379 --> 00:06:16,120
sad reality from from our point of view

00:06:13,599 --> 00:06:17,500
like as the Boche OpenStack CPI team we

00:06:16,120 --> 00:06:20,889
were approached like here's a new

00:06:17,500 --> 00:06:23,259
OpenStack can we run it there and from

00:06:20,889 --> 00:06:25,719
our point of view the sad reality is

00:06:23,259 --> 00:06:27,909
there is no interim there is different

00:06:25,719 --> 00:06:30,370
versions different distributions even

00:06:27,909 --> 00:06:33,759
different configurations can can make

00:06:30,370 --> 00:06:36,399
the things break so for us it meant

00:06:33,759 --> 00:06:39,969
really for each new OpenStack

00:06:36,399 --> 00:06:42,010
installation testing that from the

00:06:39,969 --> 00:06:44,230
ground up which we did by

00:06:42,010 --> 00:06:47,290
actually running our continuous

00:06:44,230 --> 00:06:50,140
integration pipeline against that so it

00:06:47,290 --> 00:06:52,210
meant using terraform to prepare the

00:06:50,140 --> 00:06:55,960
project with network and keys and stuff

00:06:52,210 --> 00:06:57,760
like that then installing Bosh then

00:06:55,960 --> 00:07:00,360
installing conkers which is our CI

00:06:57,760 --> 00:07:03,370
system that is deployed with Bosh and

00:07:00,360 --> 00:07:06,160
I'm setting our pipelines and having

00:07:03,370 --> 00:07:10,260
them run and most often we have them

00:07:06,160 --> 00:07:14,170
fail so it's a long list of manual steps

00:07:10,260 --> 00:07:16,150
each of them can fail for a very it for

00:07:14,170 --> 00:07:19,870
for various reasons of all kinds of

00:07:16,150 --> 00:07:22,300
reasons and it's often hard to see what

00:07:19,870 --> 00:07:26,440
is the actual problem and what is the

00:07:22,300 --> 00:07:29,320
possible fix for that problem and even

00:07:26,440 --> 00:07:31,830
if we were done with that turns out

00:07:29,320 --> 00:07:35,170
there's this little document on

00:07:31,830 --> 00:07:36,700
Cassandra dork that tells you how it's

00:07:35,170 --> 00:07:38,980
not meant to be readable on the slide

00:07:36,700 --> 00:07:43,090
it's just to show that I think it's 18

00:07:38,980 --> 00:07:48,430
pages long what you have to do to test

00:07:43,090 --> 00:07:50,200
if if Cloud Foundry runs so there's

00:07:48,430 --> 00:07:54,460
things like the MS have to be able to

00:07:50,200 --> 00:07:56,470
talk to each other there is like Cloud

00:07:54,460 --> 00:07:59,200
Foundry needs larger disks than you

00:07:56,470 --> 00:08:03,040
might have in a CI environment things

00:07:59,200 --> 00:08:06,070
like that are in that document and it's

00:08:03,040 --> 00:08:08,560
even worse because that document

00:08:06,070 --> 00:08:10,690
actually states well I can tell you that

00:08:08,560 --> 00:08:13,690
it's not going to work but if you've

00:08:10,690 --> 00:08:17,800
really completed all these steps yeah it

00:08:13,690 --> 00:08:21,510
might work it might not you don't really

00:08:17,800 --> 00:08:23,560
really know know that so who are you

00:08:21,510 --> 00:08:31,120
successfully installed Cloud Foundry on

00:08:23,560 --> 00:08:34,599
OpenStack how long did it take huh okay

00:08:31,120 --> 00:08:38,830
yeah I know why you would say it because

00:08:34,599 --> 00:08:40,479
you're not using boss anyway what were

00:08:38,830 --> 00:08:42,750
the arrows looking like were they

00:08:40,479 --> 00:08:42,750
helpful

00:09:00,080 --> 00:09:03,250
so many many

00:09:06,160 --> 00:09:11,089
so that's our experience as well it's

00:09:09,110 --> 00:09:12,759
like it's a long process all of these

00:09:11,089 --> 00:09:15,829
steps will fail because they can fail

00:09:12,759 --> 00:09:17,600
for different reasons you'll have to

00:09:15,829 --> 00:09:19,430
really dig deep and then start over

00:09:17,600 --> 00:09:22,300
again when you found the problem and

00:09:19,430 --> 00:09:25,850
solved it you'll just start over again

00:09:22,300 --> 00:09:27,439
so from our perspective we've seen that

00:09:25,850 --> 00:09:32,509
refs tag and interrupt challenge are

00:09:27,439 --> 00:09:34,100
just not enough say a good project but

00:09:32,509 --> 00:09:48,860
they are no guarantee that Cloud Foundry

00:09:34,100 --> 00:09:50,899
will run I don't know maybe they know

00:09:48,860 --> 00:10:05,320
open set really well or they chose the

00:09:50,899 --> 00:10:07,810
right OpenStack installation okay

00:10:05,320 --> 00:10:09,820
so yeah I don't say that this can't

00:10:07,810 --> 00:10:12,009
happen but like it's not our experience

00:10:09,820 --> 00:10:14,130
so either you have a brilliant OpenStack

00:10:12,009 --> 00:10:16,360
team a brilliant plan foundry team

00:10:14,130 --> 00:10:22,779
whatever maybe I should state that we

00:10:16,360 --> 00:10:25,389
are hiring and anyway so our experience

00:10:22,779 --> 00:10:27,730
is like rustic and airdrop is a good

00:10:25,389 --> 00:10:29,380
thing but it doesn't work for us to

00:10:27,730 --> 00:10:32,199
guarantee that Cloud Foundry is going to

00:10:29,380 --> 00:10:34,660
work so we came up with this as an

00:10:32,199 --> 00:10:36,610
alternative like a small command-line

00:10:34,660 --> 00:10:38,880
application there's some preparation

00:10:36,610 --> 00:10:42,160
work you have to do for the for the

00:10:38,880 --> 00:10:43,990
project for the OpenStack so you need to

00:10:42,160 --> 00:10:46,899
have a project there a network a

00:10:43,990 --> 00:10:50,319
reserved floating IP some stuff but

00:10:46,899 --> 00:10:53,110
that's documented and there is a rather

00:10:50,319 --> 00:10:55,660
small configuration file with about 10

00:10:53,110 --> 00:10:58,500
mandatory values half of them is like

00:10:55,660 --> 00:11:01,509
open sacra dentures Network eyepiece

00:10:58,500 --> 00:11:04,120
things like that it's not a lot and then

00:11:01,509 --> 00:11:06,690
you can just just run it and see if

00:11:04,120 --> 00:11:06,690
everything is fine

00:11:07,529 --> 00:11:13,029
this is like the principle that we apply

00:11:10,750 --> 00:11:17,260
is what I said already in the beginning

00:11:13,029 --> 00:11:21,399
we really use the CPI to to interact

00:11:17,260 --> 00:11:24,339
with OpenStack do the life cycle that

00:11:21,399 --> 00:11:27,670
that Bosch would normally do and in

00:11:24,339 --> 00:11:30,790
addition on on VMs that we that we fire

00:11:27,670 --> 00:11:33,190
up we do some more sophisticated tests

00:11:30,790 --> 00:11:36,519
like can they actually reach each other

00:11:33,190 --> 00:11:40,269
network wise and things like that

00:11:36,519 --> 00:11:42,250
is like the API right rate limit is one

00:11:40,269 --> 00:11:44,380
of the the checkpoints in the in the

00:11:42,250 --> 00:11:46,649
document the documentation how you check

00:11:44,380 --> 00:11:50,620
if the OpenStack is ready to run with

00:11:46,649 --> 00:11:53,800
some pre checks like that work on the

00:11:50,620 --> 00:11:56,800
API level as well like other security

00:11:53,800 --> 00:11:59,410
groups set and things like that

00:11:56,800 --> 00:12:01,720
testing network connectivity of VMs like

00:11:59,410 --> 00:12:04,870
and they reach the internet all all

00:12:01,720 --> 00:12:07,000
kinds of things but now coming to the

00:12:04,870 --> 00:12:09,060
more maybe more interesting point I mean

00:12:07,000 --> 00:12:11,860
seeing that green is really really cool

00:12:09,060 --> 00:12:14,139
we didn't have that often in the first

00:12:11,860 --> 00:12:16,959
run so most of the time we had problems

00:12:14,139 --> 00:12:20,100
so the question is if it goes wrong what

00:12:16,959 --> 00:12:22,600
went wrong how can you fix it

00:12:20,100 --> 00:12:26,560
and so I brought some some example

00:12:22,600 --> 00:12:28,269
outputs in case you have problems so one

00:12:26,560 --> 00:12:30,819
of the things we need to check is Vash

00:12:28,269 --> 00:12:34,690
needs to access VMs is Sh

00:12:30,819 --> 00:12:37,300
that's for talking to their for

00:12:34,690 --> 00:12:40,839
providing boss SSH for you so you can

00:12:37,300 --> 00:12:43,449
SSH into the machines and then we have

00:12:40,839 --> 00:12:45,160
actually two two checks like a small

00:12:43,449 --> 00:12:47,529
pre-check just checking the security

00:12:45,160 --> 00:12:48,910
group so for the easy failure that you

00:12:47,529 --> 00:12:51,880
just don't have a security group

00:12:48,910 --> 00:12:55,810
allowing that traffic but we are then

00:12:51,880 --> 00:12:59,589
ss-18 into vm and actually trying to

00:12:55,810 --> 00:13:01,899
reach another vm on on port 22 doing

00:12:59,589 --> 00:13:06,399
that with nap cut and in case of failure

00:13:01,899 --> 00:13:07,720
just reporting the output this is a bit

00:13:06,399 --> 00:13:09,850
a bit long

00:13:07,720 --> 00:13:13,269
I actually filed a bug on our project

00:13:09,850 --> 00:13:15,430
for that because SSH unfortunately logs

00:13:13,269 --> 00:13:18,490
its warning on error on standard error

00:13:15,430 --> 00:13:20,110
so we printed here we should actually

00:13:18,490 --> 00:13:22,329
get rid of that because we know what's

00:13:20,110 --> 00:13:24,430
what it's going to print but it's the

00:13:22,329 --> 00:13:26,560
net cut side it says it can't connect to

00:13:24,430 --> 00:13:30,430
that VM it's the basic thing that you

00:13:26,560 --> 00:13:33,490
that you see there Cloud Foundry VMs

00:13:30,430 --> 00:13:35,290
have to be able to reach the internet

00:13:33,490 --> 00:13:38,470
like build pags need to download stuff

00:13:35,290 --> 00:13:42,310
from somewhere so we actually do a

00:13:38,470 --> 00:13:43,089
staged check so to say like first we try

00:13:42,310 --> 00:13:45,699
and nslookup

00:13:43,089 --> 00:13:50,079
if dns actually works and that's the

00:13:45,699 --> 00:13:53,740
failure I brought with me so we try to

00:13:50,079 --> 00:13:57,040
reach DNS with the configured service

00:13:53,740 --> 00:14:00,459
and if that fails we provide you with an

00:13:57,040 --> 00:14:02,649
with an error there's another

00:14:00,459 --> 00:14:04,899
unfortunate bug here so that's a little

00:14:02,649 --> 00:14:07,720
bit fake because it's not fixed yet I

00:14:04,899 --> 00:14:09,459
guess unfortunately nslookup blocks its

00:14:07,720 --> 00:14:12,220
error to standard out so we don't print

00:14:09,459 --> 00:14:14,560
it so I actually added the last line

00:14:12,220 --> 00:14:24,610
that says what would nslookup has this

00:14:14,560 --> 00:14:27,730
output what here we have more hard even

00:14:24,610 --> 00:14:29,620
harder one that's like you can believe

00:14:27,730 --> 00:14:30,760
that that distributed systems need to

00:14:29,620 --> 00:14:33,899
agree on time

00:14:30,760 --> 00:14:36,190
so this is something that can go wrong

00:14:33,899 --> 00:14:39,130
after you successfully deployed Cloud

00:14:36,190 --> 00:14:41,350
Foundry because after some time the

00:14:39,130 --> 00:14:44,980
system goes out of sync so that's

00:14:41,350 --> 00:14:48,790
something we have seen because we need

00:14:44,980 --> 00:14:52,149
to use internal NTP service because we

00:14:48,790 --> 00:14:53,740
can't reach out on 53 and so that was

00:14:52,149 --> 00:14:58,810
one of the problems that we've actually

00:14:53,740 --> 00:15:01,149
seen seen life and this is really a hard

00:14:58,810 --> 00:15:03,610
one if that goes wrong figuring out what

00:15:01,149 --> 00:15:08,410
went wrong a couple of weeks ago so to

00:15:03,610 --> 00:15:10,300
say is a is a really tough one so you

00:15:08,410 --> 00:15:13,300
already see a theme I think there's lots

00:15:10,300 --> 00:15:15,399
of network network tests I really hope

00:15:13,300 --> 00:15:17,500
to bring with me the MTU test but that's

00:15:15,399 --> 00:15:19,930
just made it up to the backlog but it's

00:15:17,500 --> 00:15:22,420
not implemented yet so I guess lots of

00:15:19,930 --> 00:15:23,680
you have seen empty.you problems we're

00:15:22,420 --> 00:15:26,889
going to write something that is

00:15:23,680 --> 00:15:28,750
actually trying to to send packages over

00:15:26,889 --> 00:15:31,510
the network and figure out what what the

00:15:28,750 --> 00:15:33,329
MTU is and figure out if it's according

00:15:31,510 --> 00:15:35,880
to the configured one I mean

00:15:33,329 --> 00:15:41,410
recommendation for Cloud Foundry is

00:15:35,880 --> 00:15:43,060
1,500 you could change that in the in

00:15:41,410 --> 00:15:44,800
the validator yomel if you know what

00:15:43,060 --> 00:15:46,269
you're doing because you have to

00:15:44,800 --> 00:15:48,810
configure lots of clever hungary

00:15:46,269 --> 00:15:48,810
components

00:15:56,770 --> 00:16:01,900
you have to actually change OpenStack to

00:15:59,500 --> 00:16:03,940
give you that if you use GRE tunnels or

00:16:01,900 --> 00:16:06,310
something like that you have to increase

00:16:03,940 --> 00:16:08,830
the the packet side on the outside of

00:16:06,310 --> 00:16:12,150
the tunnel to actually have 1500 on the

00:16:08,830 --> 00:16:12,150
VM hmm

00:16:12,600 --> 00:16:18,580
true either one is good but yeah I think

00:16:16,270 --> 00:16:21,400
I would recommend to actually change the

00:16:18,580 --> 00:16:23,500
OpenStack to say like you never know if

00:16:21,400 --> 00:16:25,360
there's a component in there where you

00:16:23,500 --> 00:16:27,610
missed the configuration or that is not

00:16:25,360 --> 00:16:31,660
configurable or whatever so I would

00:16:27,610 --> 00:16:34,150
actually give the the VMs 1500 but you

00:16:31,660 --> 00:16:35,590
can change that and it's not yet

00:16:34,150 --> 00:16:38,080
implemented that's like on top of our

00:16:35,590 --> 00:16:43,290
backlog as one of the next tests that we

00:16:38,080 --> 00:16:45,610
introduced here but it's not not they

00:16:43,290 --> 00:16:48,990
that's another thing that's from the

00:16:45,610 --> 00:16:52,030
from these 18 pages of documentation

00:16:48,990 --> 00:16:54,040
laundry needs large disks one of the

00:16:52,030 --> 00:16:55,720
typical scenarios where you get an error

00:16:54,040 --> 00:16:57,580
there is if you try to deploy cloud

00:16:55,720 --> 00:16:59,110
foundry on def stack because there you

00:16:57,580 --> 00:17:01,840
have to change the configuration to

00:16:59,110 --> 00:17:03,820
really get larger disks so that's why we

00:17:01,840 --> 00:17:06,880
replaced actually that hint there I

00:17:03,820 --> 00:17:10,870
think we had two or three bugs actually

00:17:06,880 --> 00:17:12,010
for that that was yeah and then there

00:17:10,870 --> 00:17:13,660
are other things like the cloud

00:17:12,010 --> 00:17:15,940
controller needs a blob store you might

00:17:13,660 --> 00:17:17,260
use Swift for that and there's a whole

00:17:15,940 --> 00:17:20,740
lot of things that you can do wrong

00:17:17,260 --> 00:17:23,440
there you need to configure an X account

00:17:20,740 --> 00:17:25,750
meter temp your L key if you don't do

00:17:23,440 --> 00:17:28,630
that or use a different one you'll get a

00:17:25,750 --> 00:17:30,640
401 like you see here another reason for

00:17:28,630 --> 00:17:32,620
failure can be that the Swift proxy

00:17:30,640 --> 00:17:35,740
service actually not configured to serve

00:17:32,620 --> 00:17:38,170
the URL that's something else that you

00:17:35,740 --> 00:17:45,610
can you could do wrong if you use that

00:17:38,170 --> 00:17:49,210
as as the blob saw now our promise is

00:17:45,610 --> 00:17:51,700
like if the CF OpenStack validator

00:17:49,210 --> 00:17:54,190
passes you can expect that Cloud Foundry

00:17:51,700 --> 00:17:56,560
can be deployed on that OpenStack if

00:17:54,190 --> 00:17:58,660
that's not the case we I would consider

00:17:56,560 --> 00:18:01,030
that a bug in the validator it should

00:17:58,660 --> 00:18:04,270
actually show you that and if it doesn't

00:18:01,030 --> 00:18:05,800
pass it should give you like output that

00:18:04,270 --> 00:18:07,410
is like actionable feedback

00:18:05,800 --> 00:18:09,180
you should then know what

00:18:07,410 --> 00:18:12,540
should change in your OpenStack which

00:18:09,180 --> 00:18:16,080
you should do differently to make it

00:18:12,540 --> 00:18:18,330
pass if that's not the case open an

00:18:16,080 --> 00:18:21,540
issue on our project for better error

00:18:18,330 --> 00:18:23,460
messages or whatever or things that you

00:18:21,540 --> 00:18:26,070
that you found or if you found if you

00:18:23,460 --> 00:18:28,350
find an open sex system where the

00:18:26,070 --> 00:18:31,080
validator doesn't pass but you can

00:18:28,350 --> 00:18:33,480
deploy Cloud Foundry successfully that's

00:18:31,080 --> 00:18:36,810
just the same that's all issues on our

00:18:33,480 --> 00:18:39,120
side now most of the vendors don't

00:18:36,810 --> 00:18:41,370
really have just open source cloud

00:18:39,120 --> 00:18:44,310
foundry but have products based on open

00:18:41,370 --> 00:18:48,570
source cloud foundry so we made the

00:18:44,310 --> 00:18:51,570
validator extensible so you can rather

00:18:48,570 --> 00:18:54,120
easily plug in extensions to test things

00:18:51,570 --> 00:18:57,140
that are not necessary for open source

00:18:54,120 --> 00:19:00,570
cloud foundry but maybe for your product

00:18:57,140 --> 00:19:02,190
there could be different things the the

00:19:00,570 --> 00:19:04,020
Swift blobstore thing that you've seen

00:19:02,190 --> 00:19:07,650
is actually an extension because you've

00:19:04,020 --> 00:19:10,280
the choice of s3 or Swift so it's an

00:19:07,650 --> 00:19:13,610
optional component an optional component

00:19:10,280 --> 00:19:16,410
other things are we're checking for

00:19:13,610 --> 00:19:18,480
certain flavors to exist and be

00:19:16,410 --> 00:19:20,580
configured in a certain way like our

00:19:18,480 --> 00:19:23,310
product expects it like we use them in

00:19:20,580 --> 00:19:25,710
our manifest our Bosch manifests so they

00:19:23,310 --> 00:19:27,680
should be present we expect certain

00:19:25,710 --> 00:19:29,970
quotas to be in place and we have an

00:19:27,680 --> 00:19:32,460
extension a configurable extension for

00:19:29,970 --> 00:19:34,350
that so you actually give it a file a

00:19:32,460 --> 00:19:36,210
separate file like this is the flavors I

00:19:34,350 --> 00:19:38,760
expect and this is the course that

00:19:36,210 --> 00:19:40,560
should be in that flavor or even

00:19:38,760 --> 00:19:43,410
metadata like if you need hardware

00:19:40,560 --> 00:19:45,630
random randomness you can specify that

00:19:43,410 --> 00:19:48,480
there's actually a flavor that should be

00:19:45,630 --> 00:19:51,810
configured to the hardware randomness in

00:19:48,480 --> 00:19:54,240
place and we have another extension that

00:19:51,810 --> 00:19:57,600
checks accessibility of external

00:19:54,240 --> 00:19:59,820
components so we have our own Enterprise

00:19:57,600 --> 00:20:02,280
github that we need to reach and that

00:19:59,820 --> 00:20:03,630
has to be like it's not in the public so

00:20:02,280 --> 00:20:05,910
it has to be there has to be some

00:20:03,630 --> 00:20:10,380
network configuration so we have an

00:20:05,910 --> 00:20:13,500
extension for that what we are planning

00:20:10,380 --> 00:20:17,010
to do is to cope with non-functional

00:20:13,500 --> 00:20:19,080
requirements like performance like we

00:20:17,010 --> 00:20:20,360
are going to check or I mean this only

00:20:19,080 --> 00:20:22,100
planned we're not

00:20:20,360 --> 00:20:24,020
yet how we're going to do that but

00:20:22,100 --> 00:20:26,240
checking things like disk IO that you

00:20:24,020 --> 00:20:27,679
get and that it's according to what you

00:20:26,240 --> 00:20:32,570
would expect for running your cloud

00:20:27,679 --> 00:20:38,390
foundry or what else is a good a good

00:20:32,570 --> 00:20:40,100
example there's there's security

00:20:38,390 --> 00:20:43,070
recommendations that we're going to

00:20:40,100 --> 00:20:43,640
place in there like if you're using

00:20:43,070 --> 00:20:45,799
Swift

00:20:43,640 --> 00:20:48,799
as a block store you should probably

00:20:45,799 --> 00:20:51,049
have a user that is only allowed to use

00:20:48,799 --> 00:20:52,490
Swift and is not allowed to fire up the

00:20:51,049 --> 00:20:55,760
ends or shut them down

00:20:52,490 --> 00:20:58,580
so we will probably do that as

00:20:55,760 --> 00:21:00,470
extensions so that you can act it's a

00:20:58,580 --> 00:21:02,179
recommendation if you want to do it

00:21:00,470 --> 00:21:05,510
differently than just don't turn on the

00:21:02,179 --> 00:21:08,270
on the extension and you can actually

00:21:05,510 --> 00:21:12,250
write your own extensions we provide an

00:21:08,270 --> 00:21:16,400
API for you like that you can easily

00:21:12,250 --> 00:21:18,410
call the the OpenStack API is the Fogg

00:21:16,400 --> 00:21:22,790
OpenStack that's the Ruby library that

00:21:18,410 --> 00:21:25,970
we use or you could use the CPI to do

00:21:22,790 --> 00:21:28,220
things and we've resource tracking

00:21:25,970 --> 00:21:31,850
implemented so every resource you can

00:21:28,220 --> 00:21:33,919
add resources to the to that tracker so

00:21:31,850 --> 00:21:36,049
after the test run everything is going

00:21:33,919 --> 00:21:38,240
to be cleaned up like VMs that are left

00:21:36,049 --> 00:21:41,900
in place because I don't know the test

00:21:38,240 --> 00:21:44,780
broke before you shut them down we are

00:21:41,900 --> 00:21:47,030
actually going to cope with that so

00:21:44,780 --> 00:21:50,360
there are API is that you can you can

00:21:47,030 --> 00:21:53,030
use to easily create extensions so that

00:21:50,360 --> 00:21:55,370
you get an answer to that question like

00:21:53,030 --> 00:22:01,160
is your Cloud Foundry based product

00:21:55,370 --> 00:22:05,240
running on your customer's OpenStack so

00:22:01,160 --> 00:22:07,280
coming closely to a conclusion we we've

00:22:05,240 --> 00:22:09,740
seen that rafts tagged as the least

00:22:07,280 --> 00:22:14,620
common denominator is not enough for

00:22:09,740 --> 00:22:14,620
guaranteeing that Cloud Foundry runs

00:22:14,770 --> 00:22:21,410
interrupts challenge in its current

00:22:16,820 --> 00:22:23,450
state isn't either and I've shown you a

00:22:21,410 --> 00:22:25,549
tool though that we actually use to get

00:22:23,450 --> 00:22:27,620
an answer to the two questions that are

00:22:25,549 --> 00:22:30,440
that are there like will cloud foundry

00:22:27,620 --> 00:22:32,160
run on my OpenStack will my cloud

00:22:30,440 --> 00:22:38,160
foundry based product

00:22:32,160 --> 00:22:41,510
on my openstack now is that how

00:22:38,160 --> 00:22:43,830
interrupts or into checks should be

00:22:41,510 --> 00:22:46,740
definitely not I mean the way we're

00:22:43,830 --> 00:22:48,750
doing is like try things out catch any

00:22:46,740 --> 00:22:51,720
errors and try to figure out what went

00:22:48,750 --> 00:22:54,000
wrong and provide usable usable feedback

00:22:51,720 --> 00:22:56,100
so that's definitely not the end of the

00:22:54,000 --> 00:22:58,860
story I would rather spend work on

00:22:56,100 --> 00:23:01,080
borscht or on Cloud Foundry other topics

00:22:58,860 --> 00:23:03,840
instead of writing this dis validator

00:23:01,080 --> 00:23:06,030
that was out of necessity and there's a

00:23:03,840 --> 00:23:08,370
there's an interesting project in the

00:23:06,030 --> 00:23:11,550
OpenStack community that's called oak

00:23:08,370 --> 00:23:13,410
tree which is based on the shade library

00:23:11,550 --> 00:23:14,730
that I've talked about like the library

00:23:13,410 --> 00:23:17,160
that's used for the interrupts

00:23:14,730 --> 00:23:24,150
challenges and their goal is to provide

00:23:17,160 --> 00:23:26,880
a Dr PC endpoint and in the end

00:23:24,150 --> 00:23:29,400
something that that actually gets the

00:23:26,880 --> 00:23:31,980
required capabilities from an open stack

00:23:29,400 --> 00:23:33,750
so you could run it just against any

00:23:31,980 --> 00:23:36,750
open stack that provides its

00:23:33,750 --> 00:23:39,240
capabilities and so writing a validator

00:23:36,750 --> 00:23:41,760
life like we've done would be just

00:23:39,240 --> 00:23:45,120
checking does it support creating large

00:23:41,760 --> 00:23:48,150
disks check and all the other things

00:23:45,120 --> 00:23:50,610
like that would not require actual

00:23:48,150 --> 00:23:52,950
testing because they would cope like

00:23:50,610 --> 00:23:55,080
like the shade library now for 16 open

00:23:52,950 --> 00:23:58,170
stacks would actually cope with all

00:23:55,080 --> 00:23:59,700
these interoperability problems so

00:23:58,170 --> 00:24:02,070
that's a really interesting project that

00:23:59,700 --> 00:24:03,690
we're going to follow closely to see

00:24:02,070 --> 00:24:06,540
what how that how that goes because

00:24:03,690 --> 00:24:08,250
because of the G RPC approach we could

00:24:06,540 --> 00:24:09,720
actually use that like generate a Ruby

00:24:08,250 --> 00:24:12,720
client that we can use instead of

00:24:09,720 --> 00:24:15,590
OpenStack or changing fog OpenStack to

00:24:12,720 --> 00:24:19,860
actually use that whatever whatever

00:24:15,590 --> 00:24:21,720
would work there so that's it from my

00:24:19,860 --> 00:24:24,960
side thank you very much for listening

00:24:21,720 --> 00:24:26,490
and now I still some time left for

00:24:24,960 --> 00:24:29,520
listening to questions that you might

00:24:26,490 --> 00:24:31,440
have if you don't get to ask your

00:24:29,520 --> 00:24:35,910
question there's my name my twitter

00:24:31,440 --> 00:24:37,680
handle my github handle and there's the

00:24:35,910 --> 00:24:40,200
two projects that we actually made

00:24:37,680 --> 00:24:43,080
maintain the validator and the OpenStack

00:24:40,200 --> 00:24:45,860
CPI so again thank you and if you have

00:24:43,080 --> 00:24:47,960
questions with two microphones in the

00:24:45,860 --> 00:25:01,399
so that the recording also has the

00:24:47,960 --> 00:25:04,870
questions hi I'm Emily Winkler Foundry

00:25:01,399 --> 00:25:08,269
myself I started learning class at the

00:25:04,870 --> 00:25:11,779
little time I go I find it very

00:25:08,269 --> 00:25:16,010
interesting but there's one question I

00:25:11,779 --> 00:25:18,380
have is that I understand that your

00:25:16,010 --> 00:25:21,919
validator has openness tacky specific

00:25:18,380 --> 00:25:23,990
commands right yeah okay I was wondering

00:25:21,919 --> 00:25:27,190
I mean I find this in this project very

00:25:23,990 --> 00:25:30,080
interesting and I wonder if it could be

00:25:27,190 --> 00:25:32,960
infrastructure and agnostic like saying

00:25:30,080 --> 00:25:35,990
we don't care where we want to deploy

00:25:32,960 --> 00:25:37,360
cloud foundry we want just want to test

00:25:35,990 --> 00:25:42,230
that we have the proper infrastructure

00:25:37,360 --> 00:25:45,860
just an idea yeah I mean we have tests

00:25:42,230 --> 00:25:48,169
that actually use the is api's so that

00:25:45,860 --> 00:25:51,139
would have to be like moved out of the

00:25:48,169 --> 00:25:54,500
core test suite maybe but we use the

00:25:51,139 --> 00:25:57,590
same the same interface to the CPI that

00:25:54,500 --> 00:25:59,990
boss uses so we do shell out to the CPI

00:25:57,590 --> 00:26:01,880
like Bosch does so it should be as easy

00:25:59,990 --> 00:26:04,760
as Bosch can be used against different

00:26:01,880 --> 00:26:06,679
infrastructures it's just we've have not

00:26:04,760 --> 00:26:07,429
yet seen the use case for doing that on

00:26:06,679 --> 00:26:09,769
AWS

00:26:07,429 --> 00:26:12,470
from our perspective AWS is rather

00:26:09,769 --> 00:26:14,750
stable and if Cloud Foundry works there

00:26:12,470 --> 00:26:17,600
it's continued to it's going to continue

00:26:14,750 --> 00:26:22,730
to work there but it could be changed to

00:26:17,600 --> 00:26:24,529
actually allow different CPI yes as I

00:26:22,730 --> 00:26:26,929
said there are some API calls and

00:26:24,529 --> 00:26:29,149
there's an API that gives you access to

00:26:26,929 --> 00:26:32,090
OpenStack so things would have to change

00:26:29,149 --> 00:26:35,090
there and you would probably have to

00:26:32,090 --> 00:26:37,429
provide the api's for that specific is

00:26:35,090 --> 00:26:40,090
that you're going to target any specific

00:26:37,429 --> 00:26:40,090
I as you had in mind

00:26:45,810 --> 00:26:53,160
for example maybe not but maybe

00:26:55,670 --> 00:27:04,940
should be possible here yeah yeah I mean

00:27:02,150 --> 00:27:07,490
I'm actually interested in that myself

00:27:04,940 --> 00:27:09,740
because I've got got a site project to

00:27:07,490 --> 00:27:11,990
create a kubernetes CPI and that would

00:27:09,740 --> 00:27:16,280
be really interesting to actually check

00:27:11,990 --> 00:27:19,310
because that's a similar situation so

00:27:16,280 --> 00:27:21,440
you actually might deploy kubernetes to

00:27:19,310 --> 00:27:24,530
somewhere and might have to check if

00:27:21,440 --> 00:27:27,100
it's configured correctly so yes that's

00:27:24,530 --> 00:27:27,100
a use case

00:27:31,400 --> 00:27:37,460
we have VMware integrated OpenStack

00:27:33,980 --> 00:27:40,330
separate instance and we have pcs PCF

00:27:37,460 --> 00:27:44,420
separate and we are planning to have

00:27:40,330 --> 00:27:46,370
both together so what what would be your

00:27:44,420 --> 00:27:48,350
advice like now can we integrate that or

00:27:46,370 --> 00:27:50,000
can we have both a separate instance and

00:27:48,350 --> 00:27:53,270
applications talking where ours is a

00:27:50,000 --> 00:27:54,860
large distributed applications so I

00:27:53,270 --> 00:27:57,830
would like to know like we are in a

00:27:54,860 --> 00:28:00,640
planning stage yeah I'm not sure I got

00:27:57,830 --> 00:28:04,910
the question correctly we have VMware

00:28:00,640 --> 00:28:07,130
integrated OpenStack and PCF both are

00:28:04,910 --> 00:28:10,130
running separately but the applications

00:28:07,130 --> 00:28:12,980
are talking okay integrated so we are

00:28:10,130 --> 00:28:15,980
thinking about moving PCF into VM very

00:28:12,980 --> 00:28:18,500
integrated OpenStack to run on run lower

00:28:15,980 --> 00:28:21,880
VMware integrated open stack so is that

00:28:18,500 --> 00:28:24,620
advisable to do that have you seen any

00:28:21,880 --> 00:28:26,679
limitations like that I haven't used I

00:28:24,620 --> 00:28:31,630
haven't used that we are mostly running

00:28:26,679 --> 00:28:34,030
souza cloud so we have a dedicated

00:28:31,630 --> 00:28:37,580
OpenStack that is not running on VMware

00:28:34,030 --> 00:28:38,390
but no so I don't really have an advice

00:28:37,580 --> 00:28:40,760
hmm

00:28:38,390 --> 00:28:44,380
it should be possible right if it's if

00:28:40,760 --> 00:28:44,380
it's an open second degradative in there

00:28:53,940 --> 00:28:59,050
yeah sure if you if you're actually

00:28:56,500 --> 00:29:01,600
talking OpenStack API so if you have a

00:28:59,050 --> 00:29:03,970
VM BER that is like playing OpenStack

00:29:01,600 --> 00:29:06,940
and you could just run it the validator

00:29:03,970 --> 00:29:10,510
and see if it's green if not you

00:29:06,940 --> 00:29:12,880
hopefully get good errors that help you

00:29:10,510 --> 00:29:15,040
figuring out what's the problem if not

00:29:12,880 --> 00:29:17,290
as I said open it open an issue because

00:29:15,040 --> 00:29:20,340
that's that would be interesting for us

00:29:17,290 --> 00:29:22,930
as well like things that go wrong and

00:29:20,340 --> 00:29:32,220
how to figure out what exactly went

00:29:22,930 --> 00:29:32,220
wrong sure you were very welcome

00:29:40,720 --> 00:29:47,390
first you should reach to one of the

00:29:43,460 --> 00:29:52,070
microphones probably so that this gets

00:29:47,390 --> 00:29:54,110
recorded sorry the validator is a

00:29:52,070 --> 00:29:55,610
diagnostics tool and known working

00:29:54,110 --> 00:29:58,850
environments that are exhibiting

00:29:55,610 --> 00:30:00,950
problems to try and discover what the

00:29:58,850 --> 00:30:04,490
underlying issue might be now we

00:30:00,950 --> 00:30:06,110
actually run that regularly in our open

00:30:04,490 --> 00:30:07,760
ii environments like we have a CI

00:30:06,110 --> 00:30:10,640
pipeline in all kinds of OpenStack

00:30:07,760 --> 00:30:13,040
environments they are all running I mean

00:30:10,640 --> 00:30:15,020
they have a dedicated project and they

00:30:13,040 --> 00:30:16,640
are they're actually not spinning up so

00:30:15,020 --> 00:30:18,830
many of the em study that should

00:30:16,640 --> 00:30:21,410
shouldn't should be a problem okay so it

00:30:18,830 --> 00:30:23,420
should be so z22 it should be safe to

00:30:21,410 --> 00:30:27,290
run that in a production environment you

00:30:23,420 --> 00:30:29,180
mean yeah yeah we run that on on and

00:30:27,290 --> 00:30:31,870
OpenStack we're customer things are

00:30:29,180 --> 00:30:31,870
running on

00:30:37,049 --> 00:30:43,260
thus Cloud Foundry support native ship

00:30:40,260 --> 00:30:49,309
ta PA for blobstore do we have to have

00:30:43,260 --> 00:30:53,580
any s3 API installed on top of suit as

00:30:49,309 --> 00:30:56,039
far as I remember Cloud Foundry does

00:30:53,580 --> 00:30:58,590
support natives with yeah it does

00:30:56,039 --> 00:31:00,630
because it's it's Bosch that doesn't so

00:30:58,590 --> 00:31:02,580
you can have an s3 compatible Swift as a

00:31:00,630 --> 00:31:04,890
bosch flop store there you don't have

00:31:02,580 --> 00:31:07,020
another chance but that finally does

00:31:04,890 --> 00:31:09,149
support Swift natively yeah actually we

00:31:07,020 --> 00:31:10,679
are installing portals Cloud Foundry on

00:31:09,149 --> 00:31:13,409
top of OpenStack and they are saying

00:31:10,679 --> 00:31:15,870
that they don't support directive kPa

00:31:13,409 --> 00:31:19,950
and local money they say they don't yeah

00:31:15,870 --> 00:31:21,690
the club controller has actually yeah it

00:31:19,950 --> 00:31:25,070
has an implementation for a swift

00:31:21,690 --> 00:31:27,480
blobstore that is using fog ABI so

00:31:25,070 --> 00:31:30,870
because I don't know what's the problem

00:31:27,480 --> 00:31:33,390
here is so s3 is a third body component

00:31:30,870 --> 00:31:36,750
and it's not well integrated to the

00:31:33,390 --> 00:31:38,850
OpenStack foundation and there are some

00:31:36,750 --> 00:31:42,090
support issues regarding installing a

00:31:38,850 --> 00:31:44,580
three AP on top of Swift so is there any

00:31:42,090 --> 00:31:48,809
plan or roadmap that you guys are going

00:31:44,580 --> 00:31:51,870
to directly support of kPa I guess you

00:31:48,809 --> 00:31:53,640
have to ask that question to pivotal

00:31:51,870 --> 00:31:55,860
because as far as I know it's possible

00:31:53,640 --> 00:31:59,399
to use Swift without a compatibility

00:31:55,860 --> 00:32:01,919
layer they are seeing that I mean firfer

00:31:59,399 --> 00:32:04,409
actually sorry for interruption actually

00:32:01,919 --> 00:32:06,570
for writing that that test we checked

00:32:04,409 --> 00:32:08,100
out the cloud controller code to see

00:32:06,570 --> 00:32:10,460
what they are actually doing with Swift

00:32:08,100 --> 00:32:12,149
and they were using it natively using

00:32:10,460 --> 00:32:14,580
fog api's

00:32:12,149 --> 00:32:16,710
because as far as I know the orders

00:32:14,580 --> 00:32:18,480
boundary is completely open source

00:32:16,710 --> 00:32:22,409
they don't modify anything and they're

00:32:18,480 --> 00:32:25,830
directly using the boss CPI I'm not sure

00:32:22,409 --> 00:32:28,140
but I'm just asking I mean as I said if

00:32:25,830 --> 00:32:30,059
that's about the boss blobstore then

00:32:28,140 --> 00:32:31,080
that might be right because Bosch

00:32:30,059 --> 00:32:34,049
doesn't support

00:32:31,080 --> 00:32:35,039
Swift natively but from what I've seen

00:32:34,049 --> 00:32:37,140
in code

00:32:35,039 --> 00:32:39,870
plug the cloud controller should really

00:32:37,140 --> 00:32:50,010
support that it could be both

00:32:39,870 --> 00:32:52,740
store yeah hmm yeah sure

00:32:50,010 --> 00:32:56,610
that's like as far as I know we actually

00:32:52,740 --> 00:32:59,370
use I don't know either

00:32:56,610 --> 00:33:01,980
s3 directly or an s3 compatible Swift

00:32:59,370 --> 00:33:06,090
for a Bosch but we do use Swift as a box

00:33:01,980 --> 00:33:08,360
store for our Cloud Foundry all right

00:33:06,090 --> 00:33:08,360
thank you

00:33:16,750 --> 00:33:21,700
if there are no further questions and

00:33:18,730 --> 00:33:26,719
thank you all again for attending

00:33:21,700 --> 00:33:26,719

YouTube URL: https://www.youtube.com/watch?v=9H5FkqV3LrM


