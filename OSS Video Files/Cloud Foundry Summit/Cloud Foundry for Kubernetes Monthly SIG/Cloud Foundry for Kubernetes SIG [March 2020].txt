Title: Cloud Foundry for Kubernetes SIG [March 2020]
Publication date: 2020-03-03
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:00:03,920 --> 00:00:10,370
Frigga the recording so then officially

00:00:06,920 --> 00:00:13,370
or welcome to this week's cloud foundry

00:00:10,370 --> 00:00:15,980
on kubernetes special interest group

00:00:13,370 --> 00:00:18,310
the topic is Gabe talking about

00:00:15,980 --> 00:00:20,390
container to container networking and

00:00:18,310 --> 00:00:22,190
before the recording started we were

00:00:20,390 --> 00:00:24,529
already in the process of figuring out

00:00:22,190 --> 00:00:26,270
what that might mean in more details and

00:00:24,529 --> 00:00:28,910
I was mentioning that I would be

00:00:26,270 --> 00:00:30,740
interested in like overview of the

00:00:28,910 --> 00:00:33,530
current state of container to container

00:00:30,740 --> 00:00:35,800
networking as it relates to cloud

00:00:33,530 --> 00:00:40,010
foundry on on Cullen ages

00:00:35,800 --> 00:00:43,309
ok I'm Michael maybe an MEP before you

00:00:40,010 --> 00:00:49,430
start Gabe I think we had two or even

00:00:43,309 --> 00:00:51,199
three ideas about what this could mean

00:00:49,430 --> 00:00:55,670
or what what people would want to talk

00:00:51,199 --> 00:01:01,670
about so one was in terms of feet apart

00:00:55,670 --> 00:01:04,670
like is it planned or expected or is

00:01:01,670 --> 00:01:06,619
this even wanted that we do have a

00:01:04,670 --> 00:01:09,439
future parity between container to

00:01:06,619 --> 00:01:12,159
container networking in the CF for Bosh

00:01:09,439 --> 00:01:14,240
and this year for Kate's world the

00:01:12,159 --> 00:01:18,409
application security groups network

00:01:14,240 --> 00:01:23,659
policy is all this stuff um I think the

00:01:18,409 --> 00:01:27,170
second thing that came up was about this

00:01:23,659 --> 00:01:29,899
currently strong requirement for is tio

00:01:27,170 --> 00:01:32,359
being in there like do we want to

00:01:29,899 --> 00:01:36,200
require is here do we want to even

00:01:32,359 --> 00:01:40,189
expose easier functionality to the

00:01:36,200 --> 00:01:41,990
end-user and like how are like have we

00:01:40,189 --> 00:01:43,759
decided on this how are we deciding on

00:01:41,990 --> 00:01:48,979
this like what's the process for for

00:01:43,759 --> 00:01:52,999
this and thirdly I think what came up

00:01:48,979 --> 00:01:57,289
very briefly it was are we or can we

00:01:52,999 --> 00:01:59,749
using can can be using kinetic container

00:01:57,289 --> 00:02:02,389
networking for some kind of migration

00:01:59,749 --> 00:02:06,590
support between CEO for boss and CEO for

00:02:02,389 --> 00:02:08,600
Cades by like saying I have some kind of

00:02:06,590 --> 00:02:10,399
like shared overlay network between the

00:02:08,600 --> 00:02:13,010
two things and I can gradually move

00:02:10,399 --> 00:02:16,310
applications over from one stack to the

00:02:13,010 --> 00:02:17,470
other so I guess these were the three

00:02:16,310 --> 00:02:20,410
things that

00:02:17,470 --> 00:02:22,300
came to mind okay that that makes sense

00:02:20,410 --> 00:02:25,060
I just took some notes on what you said

00:02:22,300 --> 00:02:27,370
feature parity questions specifically is

00:02:25,060 --> 00:02:29,500
cheese networking policies requirements

00:02:27,370 --> 00:02:31,000
for is do currently its strong should we

00:02:29,500 --> 00:02:33,280
try to require it how should we expose

00:02:31,000 --> 00:02:35,800
it if at all what's our decision-making

00:02:33,280 --> 00:02:37,990
process for these things and then is

00:02:35,800 --> 00:02:39,580
there a way to help migrations by taking

00:02:37,990 --> 00:02:42,640
advantage of shared container networking

00:02:39,580 --> 00:02:44,770
stuff um I hope I got everything there

00:02:42,640 --> 00:02:46,090
so like I said I don't have any slides

00:02:44,770 --> 00:02:49,180
but I'm happy to talk through these

00:02:46,090 --> 00:02:52,870
things um let's start with the easiest

00:02:49,180 --> 00:02:58,330
one the feature parity my understanding

00:02:52,870 --> 00:03:00,760
is that we're looking to ship a a thing

00:02:58,330 --> 00:03:03,730
that is production ready that is not yet

00:03:00,760 --> 00:03:05,590
fully feature parity before we get to

00:03:03,730 --> 00:03:07,180
full feature parity so the ordering is

00:03:05,590 --> 00:03:09,340
gonna like right now we're shipping

00:03:07,180 --> 00:03:10,810
alphas of various things then we're

00:03:09,340 --> 00:03:14,170
gonna try to make those production ready

00:03:10,810 --> 00:03:17,560
with a limited feature set and then

00:03:14,170 --> 00:03:19,780
sometime after that we'll get them to

00:03:17,560 --> 00:03:23,980
full feature parity with the cloud

00:03:19,780 --> 00:03:27,120
foundry on Bosch world um does that make

00:03:23,980 --> 00:03:27,120
sense any questions about that

00:03:29,370 --> 00:03:33,430
people

00:03:31,030 --> 00:03:34,780
approach yeah I think we mentioned it

00:03:33,430 --> 00:03:38,170
when I was talking to you other PMC

00:03:34,780 --> 00:03:40,360
called it have you got a list of the

00:03:38,170 --> 00:03:43,600
things that you intentionally will be

00:03:40,360 --> 00:03:49,569
excluding I know we mentioned WebSocket

00:03:43,600 --> 00:03:51,430
was one some other old wait sorry we cut

00:03:49,569 --> 00:03:52,450
you off right there I was not on the PMC

00:03:51,430 --> 00:03:56,440
call you may have been thinking of

00:03:52,450 --> 00:03:57,970
Shannon for a vacation today second of

00:03:56,440 --> 00:04:00,730
all I think WebSocket support is going

00:03:57,970 --> 00:04:03,550
to be in there I don't see any reason

00:04:00,730 --> 00:04:05,920
why we'd be supporting WebSocket and

00:04:03,550 --> 00:04:08,050
third I don't know what that list is I

00:04:05,920 --> 00:04:10,989
can tell you that I can tell you the

00:04:08,050 --> 00:04:12,850
things that would be hard to to make

00:04:10,989 --> 00:04:14,739
feature parity work for and therefore we

00:04:12,850 --> 00:04:16,209
may defer a little bit not to say that

00:04:14,739 --> 00:04:17,200
we wouldn't do it just like they're not

00:04:16,209 --> 00:04:19,239
going to be the first things that we

00:04:17,200 --> 00:04:20,440
invest in some of the things from an

00:04:19,239 --> 00:04:25,450
engineering standpoint that are hard to

00:04:20,440 --> 00:04:28,600
do are per instance routing support

00:04:25,450 --> 00:04:31,120
where when a request contains the

00:04:28,600 --> 00:04:33,550
application instance identifier and a

00:04:31,120 --> 00:04:35,350
special HTTP header the gerado currently

00:04:33,550 --> 00:04:36,810
is able to route that request to a

00:04:35,350 --> 00:04:39,040
particular instance of that application

00:04:36,810 --> 00:04:40,840
it's possible to make that work with

00:04:39,040 --> 00:04:42,370
Envoy but it's not supported as a

00:04:40,840 --> 00:04:43,720
first-class feature using the issue

00:04:42,370 --> 00:04:46,360
control plane that we're currently using

00:04:43,720 --> 00:04:49,750
and so it might take some work to make

00:04:46,360 --> 00:04:51,100
that hit feature parity and so we

00:04:49,750 --> 00:04:52,960
haven't prioritized that for the short

00:04:51,100 --> 00:04:55,210
term another thing that would be hard to

00:04:52,960 --> 00:04:57,610
do from an engineering standpoint is

00:04:55,210 --> 00:05:00,010
route services in the current way that

00:04:57,610 --> 00:05:01,390
they're implemented in the go router the

00:05:00,010 --> 00:05:03,640
concept of having an intermediary

00:05:01,390 --> 00:05:05,080
service between a client and a server is

00:05:03,640 --> 00:05:07,000
definitely something supported like

00:05:05,080 --> 00:05:08,770
first-class within service mesh but the

00:05:07,000 --> 00:05:10,930
particular API surface that they go

00:05:08,770 --> 00:05:14,650
Roderick's like the routing system

00:05:10,930 --> 00:05:16,570
exposes in which there are particular

00:05:14,650 --> 00:05:18,150
headers that have to be set and like

00:05:16,570 --> 00:05:20,650
inspected and then passed back through

00:05:18,150 --> 00:05:22,810
that sort of is bespoke protocol that we

00:05:20,650 --> 00:05:24,729
came up with in Cloud Foundry before any

00:05:22,810 --> 00:05:26,890
of this you know modern service much

00:05:24,729 --> 00:05:28,870
technology existed and so to make

00:05:26,890 --> 00:05:30,729
existing around services work with the

00:05:28,870 --> 00:05:32,860
new platform with the exact same API

00:05:30,729 --> 00:05:34,660
surface like where the route service

00:05:32,860 --> 00:05:35,979
itself wouldn't have to change that

00:05:34,660 --> 00:05:37,030
would also be some work so those are two

00:05:35,979 --> 00:05:38,620
things that I'm aware of that we're

00:05:37,030 --> 00:05:40,330
definitely saying like let's defer

00:05:38,620 --> 00:05:41,530
working on those things until after

00:05:40,330 --> 00:05:44,440
we've gotten like a production grade

00:05:41,530 --> 00:05:45,700
version of the more fundamental

00:05:44,440 --> 00:05:47,620
like routing and container networking

00:05:45,700 --> 00:05:48,760
stuff um not to say that we won't do it

00:05:47,620 --> 00:05:51,520
just like it's not in the short-term

00:05:48,760 --> 00:05:53,140
roadmap that's super helpful that's

00:05:51,520 --> 00:05:55,480
that's available thank you great does

00:05:53,140 --> 00:05:57,400
that mean that fee container

00:05:55,480 --> 00:06:01,360
networking stuff is in the short-term

00:05:57,400 --> 00:06:03,060
roadmap as in like you know CF enable

00:06:01,360 --> 00:06:05,830
access and then the same stuff works

00:06:03,060 --> 00:06:11,140
okay so that's a good question I think

00:06:05,830 --> 00:06:15,190
that one is it's not gonna block us from

00:06:11,140 --> 00:06:17,830
shipping a production grade thing but it

00:06:15,190 --> 00:06:19,960
seems to me like a natural fast follow

00:06:17,830 --> 00:06:21,730
if we don't get to it I see it as like

00:06:19,960 --> 00:06:25,330
right on the border between maybe we'll

00:06:21,730 --> 00:06:27,580
get to it before before there's some you

00:06:25,330 --> 00:06:30,670
know deadline for a production grade

00:06:27,580 --> 00:06:33,820
thing and maybe maybe it comes slips

00:06:30,670 --> 00:06:36,850
after that one one way we're thinking

00:06:33,820 --> 00:06:38,020
about this is that if we want to ship

00:06:36,850 --> 00:06:42,010
something that we call production grade

00:06:38,020 --> 00:06:43,870
and enable users to upgrade from that to

00:06:42,010 --> 00:06:46,240
subsequent you know feature increments

00:06:43,870 --> 00:06:49,450
we don't want to break them once they're

00:06:46,240 --> 00:06:51,970
on the 1.0 thing and doing something

00:06:49,450 --> 00:06:54,190
like moving from wide open network

00:06:51,970 --> 00:06:55,570
policies to a lockdown network policy

00:06:54,190 --> 00:06:58,390
would be a breaking change for those

00:06:55,570 --> 00:07:00,910
users right so I think what we want to

00:06:58,390 --> 00:07:04,000
do is before we call something 1.0 we

00:07:00,910 --> 00:07:06,760
want it to have a default deny all for

00:07:04,000 --> 00:07:10,240
dead worker policy and then the feature

00:07:06,760 --> 00:07:12,580
which is I can set a policy that enables

00:07:10,240 --> 00:07:14,169
a to talk to be basically add a rule to

00:07:12,580 --> 00:07:18,460
the list of allowed rules that's a

00:07:14,169 --> 00:07:20,560
feature that can be added later but we

00:07:18,460 --> 00:07:21,640
don't want people to like start taking

00:07:20,560 --> 00:07:23,530
advantage of all this wide open Network

00:07:21,640 --> 00:07:26,260
stuff and then have an upgrade kill that

00:07:23,530 --> 00:07:28,600
for them that that's that's really good

00:07:26,260 --> 00:07:30,820
though I'm I'm happy to hear that answer

00:07:28,600 --> 00:07:32,380
is that sounds exactly correct I bet

00:07:30,820 --> 00:07:34,540
that that's the feature I hear most

00:07:32,380 --> 00:07:36,100
about but also I also wouldn't want it

00:07:34,540 --> 00:07:38,680
to block anything so it's a good

00:07:36,100 --> 00:07:40,090
compromise great that's very good to

00:07:38,680 --> 00:07:42,970
hear the other people like that opinion

00:07:40,090 --> 00:07:44,770
cuz we we sort of like derived it from

00:07:42,970 --> 00:07:46,090
first principles or like that that's the

00:07:44,770 --> 00:07:47,950
way it should be right um

00:07:46,090 --> 00:07:49,740
wonder if you have any concerns with

00:07:47,950 --> 00:07:52,870
that if either people do please be sure

00:07:49,740 --> 00:07:55,539
nice frequently on the top of people's

00:07:52,870 --> 00:07:57,950
lists just just to check as well as

00:07:55,539 --> 00:07:59,990
enabling the networking policies I think

00:07:57,950 --> 00:08:04,130
we'd also want the service discovery to

00:07:59,990 --> 00:08:05,740
work the same way yeah that makes sense

00:08:04,130 --> 00:08:07,760
and that's actually another area where

00:08:05,740 --> 00:08:10,010
that service discovery is slightly

00:08:07,760 --> 00:08:11,900
different from the way they're in

00:08:10,010 --> 00:08:14,870
kubernetes right the fact that you can

00:08:11,900 --> 00:08:16,190
have a custom domain and so there might

00:08:14,870 --> 00:08:18,620
be a little bit engineering work just to

00:08:16,190 --> 00:08:21,230
make that DNS stuff yeah operate the

00:08:18,620 --> 00:08:23,870
same way with the same domains are you

00:08:21,230 --> 00:08:26,300
planning to Punk some of the some of

00:08:23,870 --> 00:08:33,410
these requirements to the kubernetes eni

00:08:26,300 --> 00:08:34,910
plugin yeah so that gets to I mean so

00:08:33,410 --> 00:08:39,200
DNS isn't something to see my plugin

00:08:34,910 --> 00:08:41,900
handles um but on the container to

00:08:39,200 --> 00:08:44,150
container networking yeah right yeah

00:08:41,900 --> 00:08:46,880
yeah yeah so one of the advantages of

00:08:44,150 --> 00:08:47,960
being onto kubernetes is that um we

00:08:46,880 --> 00:08:49,610
shouldn't have to build our own

00:08:47,960 --> 00:08:51,440
networking stack right we should be able

00:08:49,610 --> 00:08:55,240
to rely on whatever the cluster provides

00:08:51,440 --> 00:08:57,830
so I'm hoping that works um I've heard

00:08:55,240 --> 00:08:59,720
I've talked about this I this idea

00:08:57,830 --> 00:09:01,910
inside of vmware and i've heard a little

00:08:59,720 --> 00:09:03,710
bit like yeah in theory the different

00:09:01,910 --> 00:09:06,250
scene eyes all implement network policy

00:09:03,710 --> 00:09:08,420
the same way but in practice you'll see

00:09:06,250 --> 00:09:10,160
depending on which C&I plugin you're

00:09:08,420 --> 00:09:13,370
using policies have slightly different

00:09:10,160 --> 00:09:14,120
effects and that can like be visible to

00:09:13,370 --> 00:09:17,180
end-users

00:09:14,120 --> 00:09:18,140
um I haven't seen that firsthand but

00:09:17,180 --> 00:09:19,610
I've heard it from the folks who are

00:09:18,140 --> 00:09:23,330
working on the lower level networking

00:09:19,610 --> 00:09:25,520
stuff so hoping I'm hoping we can just

00:09:23,330 --> 00:09:27,200
rely on the the kubernetes network

00:09:25,520 --> 00:09:29,480
policy API and just like have Cloud

00:09:27,200 --> 00:09:30,860
Foundry right those objects and be step

00:09:29,480 --> 00:09:34,520
back and not have to do anything else

00:09:30,860 --> 00:09:34,910
yeah I think that yeah that's that's the

00:09:34,520 --> 00:09:37,640
plan

00:09:34,910 --> 00:09:39,200
and then hopefully that you know with

00:09:37,640 --> 00:09:40,970
that if we find that there are variances

00:09:39,200 --> 00:09:42,500
between the plugins we can make those

00:09:40,970 --> 00:09:45,430
upstream issues in the plugins

00:09:42,500 --> 00:09:47,540
themselves just a bigger system matrix

00:09:45,430 --> 00:09:49,070
yeah exactly it's funny you say that

00:09:47,540 --> 00:09:50,900
that's the thing that some of the VMware

00:09:49,070 --> 00:09:53,870
engineers are working on right now is a

00:09:50,900 --> 00:09:55,340
very automated big test matrix for all

00:09:53,870 --> 00:09:57,800
the various things and they're finding

00:09:55,340 --> 00:09:59,920
that variances when they when I set that

00:09:57,800 --> 00:09:59,920
I'm

00:10:06,780 --> 00:10:13,240
okay so that was a lot on container to

00:10:10,060 --> 00:10:15,880
container I think on aSG's sort of a

00:10:13,240 --> 00:10:20,190
similar story I don't think we're gonna

00:10:15,880 --> 00:10:22,600
have that block the 1.0 but it should be

00:10:20,190 --> 00:10:23,590
straightforward to implement by having

00:10:22,600 --> 00:10:25,720
something that reads from Cloud

00:10:23,590 --> 00:10:28,600
Controller and writes out network policy

00:10:25,720 --> 00:10:31,150
resources maybe we get to that before we

00:10:28,600 --> 00:10:34,210
do container networking policy um I

00:10:31,150 --> 00:10:36,190
think because of the implementation ease

00:10:34,210 --> 00:10:37,360
like I'm tending to order like I'm

00:10:36,190 --> 00:10:39,700
wanting to order things by just like

00:10:37,360 --> 00:10:41,290
what's the simplest thing to do but if

00:10:39,700 --> 00:10:42,940
folks on this call for example feel like

00:10:41,290 --> 00:10:44,230
container networking is actually a

00:10:42,940 --> 00:10:45,310
higher priority than getting a Miss

00:10:44,230 --> 00:10:47,890
trees working

00:10:45,310 --> 00:10:52,030
love to hear that and we can you know

00:10:47,890 --> 00:10:54,910
reconsider priorities they're just

00:10:52,030 --> 00:10:56,710
thinking even about the that kind of

00:10:54,910 --> 00:10:58,930
backwards compatible and progressive

00:10:56,710 --> 00:11:01,420
rollout of features they Anna like there

00:10:58,930 --> 00:11:04,740
would be denial egress from app

00:11:01,420 --> 00:11:07,690
containers and that seems like a

00:11:04,740 --> 00:11:10,720
difficult line that is a very good point

00:11:07,690 --> 00:11:12,420
it's it so for her and initial you see

00:11:10,720 --> 00:11:14,800
like now you talk to your network

00:11:12,420 --> 00:11:16,450
dependency because we haven't

00:11:14,800 --> 00:11:19,930
implemented aSG's and we're doing the

00:11:16,450 --> 00:11:21,940
most conservative rain okay is geez you

00:11:19,930 --> 00:11:26,040
also run into the issue that the entire

00:11:21,940 --> 00:11:26,040
network is exposed to arbitrary code

00:11:28,140 --> 00:11:33,400
sorry could you say a little more about

00:11:30,070 --> 00:11:36,390
that so you don't have a denial without

00:11:33,400 --> 00:11:36,390
aSG's right

00:11:36,630 --> 00:11:40,500
I think that that's what Eric was also

00:11:38,850 --> 00:11:43,560
saying yeah I think you are saying

00:11:40,500 --> 00:11:46,080
something yeah so that's a pretty good

00:11:43,560 --> 00:11:51,210
argument for us to block the 1.0 release

00:11:46,080 --> 00:11:51,600
on having a history support I think so

00:11:51,210 --> 00:11:53,850
too

00:11:51,600 --> 00:11:56,120
okay good I'm glad we talked about this

00:11:53,850 --> 00:11:59,990
that will influence our prioritization

00:11:56,120 --> 00:12:03,060
let me make a note of that right now

00:11:59,990 --> 00:12:05,790
there's a small argument in my head so

00:12:03,060 --> 00:12:07,890
with with container networking there's

00:12:05,790 --> 00:12:08,550
no real way for an operator to do that

00:12:07,890 --> 00:12:10,920
for you

00:12:08,550 --> 00:12:12,630
like manually if you see what I mean you

00:12:10,920 --> 00:12:14,610
know container networking the operator

00:12:12,630 --> 00:12:16,170
is not going to manually go and enable

00:12:14,610 --> 00:12:18,450
the network policies for you each time

00:12:16,170 --> 00:12:21,330
you push an app on the other hand with

00:12:18,450 --> 00:12:22,860
aSG's given that kind of an operator

00:12:21,330 --> 00:12:25,560
level feature that you set for the

00:12:22,860 --> 00:12:27,390
cluster if we actually did say you start

00:12:25,560 --> 00:12:29,640
off blocking everything the operator can

00:12:27,390 --> 00:12:31,350
actually just unblock those set those

00:12:29,640 --> 00:12:32,700
network policies manually even if we

00:12:31,350 --> 00:12:34,470
don't have a translation for there

00:12:32,700 --> 00:12:36,030
exists that's a really good point yeah I

00:12:34,470 --> 00:12:39,060
think we've been imagining this sort of

00:12:36,030 --> 00:12:41,040
like operator user interface which is

00:12:39,060 --> 00:12:42,900
hey it's default denial but if you're an

00:12:41,040 --> 00:12:44,400
operator you have cuckoo idol access go

00:12:42,900 --> 00:12:46,170
ahead write whatever policies you want

00:12:44,400 --> 00:12:48,690
by the way here's the conventions we're

00:12:46,170 --> 00:12:49,980
using for labels on pods so you can know

00:12:48,690 --> 00:12:52,950
what kind of policies you might want to

00:12:49,980 --> 00:12:55,560
write right in an ideal world we have

00:12:52,950 --> 00:12:57,810
the operator out by I don't actually

00:12:55,560 --> 00:13:03,420
think it would be a kind of you can't

00:12:57,810 --> 00:13:05,310
upgrade from that think yeah okay so we

00:13:03,420 --> 00:13:07,440
could find we could we could see reasons

00:13:05,310 --> 00:13:09,030
to have this not block CA and document

00:13:07,440 --> 00:13:13,800
said document like as an operator here's

00:13:09,030 --> 00:13:14,940
what you do what you do yeah okay cool I

00:13:13,800 --> 00:13:16,950
think it's still think it makes sense

00:13:14,940 --> 00:13:18,390
for us to probably prioritize this so

00:13:16,950 --> 00:13:19,830
ultimately as long as we're talking

00:13:18,390 --> 00:13:21,360
about priorities I want to share like

00:13:19,830 --> 00:13:22,770
what we're I mean it's it's in our

00:13:21,360 --> 00:13:26,640
public backlog but I want to share the

00:13:22,770 --> 00:13:29,820
ordering that I think we have we've

00:13:26,640 --> 00:13:32,670
thought through which is that we want to

00:13:29,820 --> 00:13:35,820
see scale operate like we want to see

00:13:32,670 --> 00:13:39,030
see scale at about a thousand routes and

00:13:35,820 --> 00:13:40,830
maybe 2,000 app instances and then we

00:13:39,030 --> 00:13:44,200
want to see upgrade ability of all the

00:13:40,830 --> 00:13:46,690
system components and stuff like that

00:13:44,200 --> 00:13:51,660
so those are like that that plus the

00:13:46,690 --> 00:13:53,740
ingress HTTP and HTTPS and you know TLS

00:13:51,660 --> 00:13:55,089
termination with operator provided

00:13:53,740 --> 00:13:56,230
certificates those are sort of the core

00:13:55,089 --> 00:13:59,230
features that we're thinking about for

00:13:56,230 --> 00:14:02,290
for GA we've also we're gonna be getting

00:13:59,230 --> 00:14:05,320
access logs working I think currently in

00:14:02,290 --> 00:14:08,199
the CF for Kate's in a release

00:14:05,320 --> 00:14:10,449
integration artifact access logs work

00:14:08,199 --> 00:14:14,860
but they dump like all of the Envoy

00:14:10,449 --> 00:14:16,240
accesed logs to actually help more than

00:14:14,860 --> 00:14:17,529
that just like tons of Envoy logs and

00:14:16,240 --> 00:14:20,290
it's it's noisy and so they're working

00:14:17,529 --> 00:14:22,209
through like how to fix that but

00:14:20,290 --> 00:14:23,980
basically like what what level of Envoy

00:14:22,209 --> 00:14:26,370
logs is appropriate in the application

00:14:23,980 --> 00:14:26,370
log stream

00:14:26,830 --> 00:14:32,350
if people have like things that they

00:14:28,780 --> 00:14:34,360
feel like aren't on that list that maybe

00:14:32,350 --> 00:14:37,360
should be I'd love to hear about that

00:14:34,360 --> 00:14:40,270
too this might not be on the roadmap or

00:14:37,360 --> 00:14:46,020
maybe a little far out the interaction

00:14:40,270 --> 00:14:49,750
with the application autoscaler metrics

00:14:46,020 --> 00:14:52,060
like throughput connection requests will

00:14:49,750 --> 00:14:54,610
they be able to get those in the same

00:14:52,060 --> 00:14:57,940
format or they do they need to make some

00:14:54,610 --> 00:14:58,930
changes that's a good question I know

00:14:57,940 --> 00:15:01,600
nothing about that

00:14:58,930 --> 00:15:04,780
I'm not even sure how the application

00:15:01,600 --> 00:15:07,320
autoscaler collects metrics today I know

00:15:04,780 --> 00:15:09,340
that there's a there's a team that does

00:15:07,320 --> 00:15:11,560
logging in metrics for Cloud Foundry

00:15:09,340 --> 00:15:15,490
they might be the better people to ask

00:15:11,560 --> 00:15:18,100
about that question I could imagine that

00:15:15,490 --> 00:15:20,080
at the network later like with the ether

00:15:18,100 --> 00:15:22,830
with the router are these metrics that

00:15:20,080 --> 00:15:24,210
are emitted by the go Rider today

00:15:22,830 --> 00:15:26,510
not sure where they get them actually

00:15:24,210 --> 00:15:29,490
guy I don't think I just sounds like

00:15:26,510 --> 00:15:33,080
kind of sounds like the HTTP start and

00:15:29,490 --> 00:15:36,660
stop or oh yeah okay that they go router

00:15:33,080 --> 00:15:38,280
limits on I think a per app basis cool

00:15:36,660 --> 00:15:43,980
okay yeah that's definitely something in

00:15:38,280 --> 00:15:46,710
our wheelhouse yeah let me look into

00:15:43,980 --> 00:15:49,850
where we're on metrics I'm not sure if

00:15:46,710 --> 00:15:49,850
we provide eyes that yet

00:15:52,070 --> 00:15:56,600
one question I have I guess is if we

00:15:55,310 --> 00:15:58,010
were to publish metrics but they had

00:15:56,600 --> 00:16:00,350
slightly different format from the ones

00:15:58,010 --> 00:16:06,230
that are coming from Cloud Foundry for

00:16:00,350 --> 00:16:08,180
Bosch would that be okay I have to talk

00:16:06,230 --> 00:16:14,750
to the autoscaler team okay

00:16:08,180 --> 00:16:16,370
the I mean for I think for this I'm not

00:16:14,750 --> 00:16:17,840
sure if we show any of that in Stratis

00:16:16,370 --> 00:16:19,700
I'm just sort of thinking about all the

00:16:17,840 --> 00:16:22,250
things that touches and in my district

00:16:19,700 --> 00:16:24,710
and a powder scale is the one that that

00:16:22,250 --> 00:16:27,320
jumps out in the film again that's not

00:16:24,710 --> 00:16:29,180
my team so I have to find out yeah

00:16:27,320 --> 00:16:30,260
that's a good point yeah I think we're

00:16:29,180 --> 00:16:32,270
like one of the things we're going

00:16:30,260 --> 00:16:33,920
through is like what's the surface area

00:16:32,270 --> 00:16:36,080
that we're trying to like maintain

00:16:33,920 --> 00:16:39,110
exactly you know api compatibility and

00:16:36,080 --> 00:16:42,530
what things can slip a little bit so for

00:16:39,110 --> 00:16:43,760
example like access logs were gonna let

00:16:42,530 --> 00:16:46,040
we're gonna have those things change

00:16:43,760 --> 00:16:47,540
they were printed in a like space

00:16:46,040 --> 00:16:49,610
delimited format that was kind of weird

00:16:47,540 --> 00:16:52,040
and vaguely reminiscent of apache and

00:16:49,610 --> 00:16:57,710
now they're gonna be like json formatted

00:16:52,040 --> 00:16:59,510
system log lines um and um but obviously

00:16:57,710 --> 00:17:02,570
like you know the CF CLI is gonna stay

00:16:59,510 --> 00:17:04,520
the same and application security groups

00:17:02,570 --> 00:17:08,060
are going to be the same JSON as before

00:17:04,520 --> 00:17:09,410
um so if you like on the metric side

00:17:08,060 --> 00:17:11,150
like we're generally feeling like

00:17:09,410 --> 00:17:12,709
operator facing things can change and

00:17:11,150 --> 00:17:13,760
developer facing things cannot and

00:17:12,709 --> 00:17:16,550
that's the rule that I think we're

00:17:13,760 --> 00:17:19,640
following stuff like metrics format as

00:17:16,550 --> 00:17:22,880
consumed by another component like

00:17:19,640 --> 00:17:25,430
autoscaler that's a little fuzzy for me

00:17:22,880 --> 00:17:27,020
like maybe it should be okay to make

00:17:25,430 --> 00:17:28,580
that a component change a little bit

00:17:27,020 --> 00:17:31,430
maybe they have a feature flag like

00:17:28,580 --> 00:17:33,770
which system am i running against but if

00:17:31,430 --> 00:17:35,210
it's really important that that not be

00:17:33,770 --> 00:17:39,370
the case and it would be the same like

00:17:35,210 --> 00:17:40,840
little let's talk about it yeah

00:17:39,370 --> 00:17:43,660
that that's all snow falling into that

00:17:40,840 --> 00:17:46,780
log creator domain I know Adam Hebner

00:17:43,660 --> 00:17:50,610
has been working on some of the metric

00:17:46,780 --> 00:17:54,600
egress aspects of that specifically and

00:17:50,610 --> 00:17:57,670
so that's also likely a good question

00:17:54,600 --> 00:18:00,910
for him and that group of aggregator

00:17:57,670 --> 00:18:03,309
folks should be in general they've been

00:18:00,910 --> 00:18:05,559
enthusiastic about prometheus as at

00:18:03,309 --> 00:18:07,450
least an API to consume these kinds of

00:18:05,559 --> 00:18:08,890
metrics so that may be a natural

00:18:07,450 --> 00:18:13,809
direction to take all of these

00:18:08,890 --> 00:18:15,850
interactions and regardless on the topic

00:18:13,809 --> 00:18:17,920
of autoscaler there's another one key

00:18:15,850 --> 00:18:19,630
thing which is at the moment this is

00:18:17,920 --> 00:18:24,429
actually a boss deployment and so I

00:18:19,630 --> 00:18:26,320
guess like apart from changing or kind

00:18:24,429 --> 00:18:27,880
of consuming a different metric format I

00:18:26,320 --> 00:18:29,320
guess we also need to have a

00:18:27,880 --> 00:18:32,260
conversation around how that actually

00:18:29,320 --> 00:18:35,110
translates over to kubernetes phase what

00:18:32,260 --> 00:18:38,230
I think we happen to have some

00:18:35,110 --> 00:18:41,670
contributors to that project so I guess

00:18:38,230 --> 00:18:41,670
I'll take connection on that one

00:18:44,650 --> 00:18:50,050
I think IBM has has some contributors

00:18:47,740 --> 00:18:52,650
there as well but I don't know if Julian

00:18:50,050 --> 00:18:52,650
talks to them

00:18:52,910 --> 00:19:01,700
I try to avoid contact with humans Mike

00:18:57,800 --> 00:19:03,740
and I can have a look I probably did

00:19:01,700 --> 00:19:05,950
they tend to work in the same department

00:19:03,740 --> 00:19:05,950
miss me

00:19:07,310 --> 00:19:13,970
all right so that was about 20 minutes

00:19:10,850 --> 00:19:15,500
on feature parity stuff I had down to

00:19:13,970 --> 00:19:17,270
other kind of like high-level topics

00:19:15,500 --> 00:19:20,330
from the market mentioned one of them

00:19:17,270 --> 00:19:22,880
was about sto and our current dependency

00:19:20,330 --> 00:19:24,290
on it exposing it to users yes or no and

00:19:22,880 --> 00:19:26,180
what's our decision-making process

00:19:24,290 --> 00:19:30,560
around that does that seem like a

00:19:26,180 --> 00:19:31,970
natural thing to move on to you any

00:19:30,560 --> 00:19:35,180
other questions on feature parity before

00:19:31,970 --> 00:19:38,750
I go there we can always come back all

00:19:35,180 --> 00:19:41,030
right so yeah currently we are using is

00:19:38,750 --> 00:19:43,250
do to provide ingress we also recently

00:19:41,030 --> 00:19:46,220
started using sto to provide automatic

00:19:43,250 --> 00:19:50,240
mutual TLS between all system components

00:19:46,220 --> 00:19:52,400
and all workloads this is in C F for

00:19:50,240 --> 00:19:55,190
kubernetes yeah it's amazing right

00:19:52,400 --> 00:19:56,330
aren't we they were so excited it's only

00:19:55,190 --> 00:19:58,340
the thing that people have been asking

00:19:56,330 --> 00:20:00,140
of us for like years and years and years

00:19:58,340 --> 00:20:01,790
and we haven't actually gotten working

00:20:00,140 --> 00:20:05,510
yet but now it's working on kubernetes

00:20:01,790 --> 00:20:08,660
so that's huge and this is one of the

00:20:05,510 --> 00:20:11,240
things that I expect will make this deal

00:20:08,660 --> 00:20:12,500
a little bit sticky I think we could

00:20:11,240 --> 00:20:14,270
imagine replacing that kind of

00:20:12,500 --> 00:20:17,240
functionality maybe using link or D or

00:20:14,270 --> 00:20:20,060
using some other service mesh technology

00:20:17,240 --> 00:20:25,010
that manages the sidecar per workload

00:20:20,060 --> 00:20:26,750
and I'm definitely interested in

00:20:25,010 --> 00:20:28,640
exploring like whether whether there's

00:20:26,750 --> 00:20:30,140
something like we could swap out one for

00:20:28,640 --> 00:20:32,290
another I know like maybe just to start

00:20:30,140 --> 00:20:34,510
with like yes there's a lot of

00:20:32,290 --> 00:20:38,450
uncertainty around the governance of Sto

00:20:34,510 --> 00:20:39,680
and that is that's everyone in the

00:20:38,450 --> 00:20:40,640
open-source community it's definitely

00:20:39,680 --> 00:20:44,450
something that people in VMware

00:20:40,640 --> 00:20:47,690
leadership are paying attention to at

00:20:44,450 --> 00:20:50,210
this point from like the networking side

00:20:47,690 --> 00:20:52,220
we haven't had any trouble getting what

00:20:50,210 --> 00:20:54,680
we need from Sto from like it's not we

00:20:52,220 --> 00:20:56,810
haven't found that Google main you know

00:20:54,680 --> 00:20:59,240
Google ID maintainer ship of it to be a

00:20:56,810 --> 00:21:01,400
problem at all mostly because it's been

00:20:59,240 --> 00:21:03,020
like lightyears ahead of us in terms of

00:21:01,400 --> 00:21:06,140
its capabilities like I still has had

00:21:03,020 --> 00:21:07,850
stuff working that we want to adopt and

00:21:06,140 --> 00:21:11,180
they've had that stuff working for you

00:21:07,850 --> 00:21:14,420
know often 12 to 18 months ahead of

00:21:11,180 --> 00:21:15,560
where were were able to adopt it maybe

00:21:14,420 --> 00:21:16,700
at some point we'll catch up and we'll

00:21:15,560 --> 00:21:17,900
start finding we want to make this

00:21:16,700 --> 00:21:19,970
feature request on then the SDO

00:21:17,900 --> 00:21:20,840
community is like no and it's for some

00:21:19,970 --> 00:21:22,400
strange Google

00:21:20,840 --> 00:21:26,240
reven political reasons but that hasn't

00:21:22,400 --> 00:21:27,919
been our observation right now yeah drop

00:21:26,240 --> 00:21:31,279
the obvious buzzword and just have

00:21:27,919 --> 00:21:33,919
interest but um this this SMI service

00:21:31,279 --> 00:21:38,150
machine interface thing this supposed to

00:21:33,919 --> 00:21:43,100
abstracts across them yeah

00:21:38,150 --> 00:21:46,190
discuss okay I looked at SMI back when

00:21:43,100 --> 00:21:49,039
it came out and it seemed like a good

00:21:46,190 --> 00:21:53,350
idea that's about as much as I know

00:21:49,039 --> 00:21:56,240
about SMI I guess what I'm wondering is

00:21:53,350 --> 00:21:57,710
does it provide the abstractions

00:21:56,240 --> 00:21:59,720
maybe the answer is we just don't know

00:21:57,710 --> 00:22:02,480
but I mean if it like was already a

00:21:59,720 --> 00:22:04,159
ready-made abstraction that we could use

00:22:02,480 --> 00:22:06,980
that it said it's rightly SEO and they

00:22:04,159 --> 00:22:12,620
make blah blah blah blah yeah that makes

00:22:06,980 --> 00:22:14,120
sense I think there are like this is

00:22:12,620 --> 00:22:17,059
really unfair but like there are three

00:22:14,120 --> 00:22:18,770
buckets there's like ingress and fancy

00:22:17,059 --> 00:22:19,940
ingress which like could maybe take

00:22:18,770 --> 00:22:21,380
advantage of the kubernetes ingress

00:22:19,940 --> 00:22:23,510
object or eventually a kubernetes

00:22:21,380 --> 00:22:28,929
ingress v2 project which is like this

00:22:23,510 --> 00:22:33,020
thing that's in incue bation and there's

00:22:28,929 --> 00:22:34,610
the service mesh

00:22:33,020 --> 00:22:36,350
interface like as a potential

00:22:34,610 --> 00:22:37,820
abstraction and then there's also just

00:22:36,350 --> 00:22:39,320
like ambient stuff that shouldn't

00:22:37,820 --> 00:22:40,790
require any user configuration like for

00:22:39,320 --> 00:22:42,230
example MPLS everywhere like you

00:22:40,790 --> 00:22:45,050
shouldn't need an abstraction you should

00:22:42,230 --> 00:22:46,700
just be able to like say pay service

00:22:45,050 --> 00:22:48,380
mesh whatever you're doing just like do

00:22:46,700 --> 00:22:50,060
the that do that thing where you make

00:22:48,380 --> 00:22:50,630
everything empty less that would be

00:22:50,060 --> 00:22:53,840
ideal

00:22:50,630 --> 00:22:55,250
um and so like for the for the MT less

00:22:53,840 --> 00:22:58,280
everywhere thing I don't think we even

00:22:55,250 --> 00:23:00,200
need an abstraction and for the ingress

00:22:58,280 --> 00:23:04,130
thing I'm hoping it's like ingress v2 we

00:23:00,200 --> 00:23:09,680
can we can evolve towards for although

00:23:04,130 --> 00:23:10,700
like I don't know I guess I'm yeah I

00:23:09,680 --> 00:23:12,170
don't have anything intelligent to say

00:23:10,700 --> 00:23:13,400
about this I'm sorry yes service mesh

00:23:12,170 --> 00:23:17,990
interface maybe we should look at that

00:23:13,400 --> 00:23:20,620
oh yeah I just asked because the person

00:23:17,990 --> 00:23:24,950
which was I'm not yeah all that like

00:23:20,620 --> 00:23:27,140
clear words because so dudes I actually

00:23:24,950 --> 00:23:30,140
asked the very same question in an email

00:23:27,140 --> 00:23:33,350
to to Shannon and I think like the the

00:23:30,140 --> 00:23:38,780
short summary of his reply is yeah no

00:23:33,350 --> 00:23:40,430
not yet really I guess I mean the only

00:23:38,780 --> 00:23:42,620
like user-facing thing I can imagine

00:23:40,430 --> 00:23:44,180
that like would be a slight concern is I

00:23:42,620 --> 00:23:46,850
do think for the kind of Cloud Foundry

00:23:44,180 --> 00:23:48,380
use case it's super nice if it could be

00:23:46,850 --> 00:23:49,760
lightweight and running your laptop you

00:23:48,380 --> 00:23:54,890
know like that that would be really nice

00:23:49,760 --> 00:23:59,480
misty Oh SCO burns a lot of memory and

00:23:54,890 --> 00:24:02,810
CPU even on my 64 gigabyte you know 16

00:23:59,480 --> 00:24:04,850
inch Mac yeah so I think like this is

00:24:02,810 --> 00:24:06,500
maybe is gets to the question of like um

00:24:04,850 --> 00:24:08,270
like so they answer the first question

00:24:06,500 --> 00:24:10,190
with like should we require it like I

00:24:08,270 --> 00:24:11,270
don't care like it's doing some useful

00:24:10,190 --> 00:24:12,980
stuff for us right now

00:24:11,270 --> 00:24:15,350
if we find other technology that can do

00:24:12,980 --> 00:24:16,970
the same stuff great let's consider

00:24:15,350 --> 00:24:19,610
swapping it out or making an optional

00:24:16,970 --> 00:24:21,710
and like I don't have a dog in that

00:24:19,610 --> 00:24:23,960
fight on the exposure to end users

00:24:21,710 --> 00:24:25,360
question like that's real like so the

00:24:23,960 --> 00:24:27,500
way we've been thinking about this is

00:24:25,360 --> 00:24:30,350
we're not giving up developers coupe

00:24:27,500 --> 00:24:31,790
cuddle access right um and so they

00:24:30,350 --> 00:24:33,770
shouldn't be directly accessing this do

00:24:31,790 --> 00:24:35,330
api's either I think there were some

00:24:33,770 --> 00:24:37,850
there were some talk like Shannon got

00:24:35,330 --> 00:24:39,950
excited maybe a year ago about like oh

00:24:37,850 --> 00:24:41,690
wait what if we embedded stom all into

00:24:39,950 --> 00:24:45,380
the Cloud Foundry application manifest

00:24:41,690 --> 00:24:46,360
or something like that and we didn't go

00:24:45,380 --> 00:24:50,500
in that direction I'm

00:24:46,360 --> 00:24:52,180
we didn't like um so I think but I think

00:24:50,500 --> 00:24:53,500
as an operator or like just like as an

00:24:52,180 --> 00:24:55,450
operator house coop cuddle axis and I'll

00:24:53,500 --> 00:24:57,700
probably be doing configuring community

00:24:55,450 --> 00:24:59,350
secrets and you know communities network

00:24:57,700 --> 00:25:01,150
policies and stuff like that they may

00:24:59,350 --> 00:25:03,760
find themselves like touching bits of

00:25:01,150 --> 00:25:06,670
the surface mesh implementation in order

00:25:03,760 --> 00:25:09,130
to like do their operator things and I

00:25:06,670 --> 00:25:12,790
feel like that's natural and then if we

00:25:09,130 --> 00:25:14,140
can abstract that by using SMI maybe

00:25:12,790 --> 00:25:16,360
that's a win right like maybe we can

00:25:14,140 --> 00:25:18,220
tell them like the CMO will work against

00:25:16,360 --> 00:25:19,630
anything that's SMI compatible and it

00:25:18,220 --> 00:25:24,790
you know you could use linker G you

00:25:19,630 --> 00:25:27,340
could use this do and so I think right

00:25:24,790 --> 00:25:31,680
now like the documentation pages for see

00:25:27,340 --> 00:25:34,230
if for kubernetes the only things that

00:25:31,680 --> 00:25:36,670
that our operator facing in there are

00:25:34,230 --> 00:25:39,490
maybe like the certificate management

00:25:36,670 --> 00:25:40,600
things like if you wanted to although I

00:25:39,490 --> 00:25:42,670
think even there it's just right a

00:25:40,600 --> 00:25:44,380
kubernetes secret and maybe it's like

00:25:42,670 --> 00:25:45,940
reference that secret name from within

00:25:44,380 --> 00:25:47,590
your is do gateway so I think maybe

00:25:45,940 --> 00:25:50,470
that's the place where they they talk to

00:25:47,590 --> 00:25:52,790
their to this do we could consider

00:25:50,470 --> 00:25:55,250
trying to hide that

00:25:52,790 --> 00:25:58,360
I don't see any downsides to doing that

00:25:55,250 --> 00:25:58,360
other than like maidens cost

00:26:01,539 --> 00:26:06,639
I had some other point but I forgotten

00:26:04,059 --> 00:26:10,200
it any any questions about the sort of

00:26:06,639 --> 00:26:12,180
exposing it to users topic

00:26:10,200 --> 00:26:14,190
let's try to not let cop developers see

00:26:12,180 --> 00:26:15,630
the sto and like if the operators touch

00:26:14,190 --> 00:26:16,830
it here and they're like maybe that's

00:26:15,630 --> 00:26:22,670
some rough edges that we can consider

00:26:16,830 --> 00:26:22,670
hiding with an interface seems fine

00:26:27,170 --> 00:26:32,310
all right so decision making process

00:26:30,180 --> 00:26:33,630
around that stuff gosh I wish we had a

00:26:32,310 --> 00:26:34,950
formal decision-making process I think

00:26:33,630 --> 00:26:39,470
our decision making processes let's use

00:26:34,950 --> 00:26:39,470
this thing it seems to work and if I

00:26:39,530 --> 00:26:42,750
don't know I guess I outlined at the

00:26:41,340 --> 00:26:45,020
principle of like don't expose it to

00:26:42,750 --> 00:26:48,270
end-users just yet

00:26:45,020 --> 00:26:51,900
that's our decision-making process it

00:26:48,270 --> 00:26:53,280
like do people have decisions they want

00:26:51,900 --> 00:26:54,890
us to make differently or like I don't

00:26:53,280 --> 00:26:56,640
know either

00:26:54,890 --> 00:27:02,360
I'm not really sure what to say about

00:26:56,640 --> 00:27:05,760
this one don't know I need to drop off

00:27:02,360 --> 00:27:08,820
but I was going to make a plug before I

00:27:05,760 --> 00:27:10,920
drop off like I'd love more people to

00:27:08,820 --> 00:27:13,260
contribute to the space if you have

00:27:10,920 --> 00:27:16,890
people who would like to participate and

00:27:13,260 --> 00:27:18,740
help shape you know or more contributors

00:27:16,890 --> 00:27:21,420
in this space would be helpful for

00:27:18,740 --> 00:27:24,000
accelerating the timeline and wander and

00:27:21,420 --> 00:27:25,280
making us more confident in our ability

00:27:24,000 --> 00:27:27,810
to do these things

00:27:25,280 --> 00:27:30,300
yeah I think that we've that's great

00:27:27,810 --> 00:27:32,250
thanks Julie there's been like separable

00:27:30,300 --> 00:27:34,230
chunks of work that I could imagine um

00:27:32,250 --> 00:27:38,610
splitting off especially even to like a

00:27:34,230 --> 00:27:41,940
base team for example or a Vancouver BC

00:27:38,610 --> 00:27:48,140
base team intent receive you there any

00:27:41,940 --> 00:27:48,140
no but yeah like stuff around like

00:27:48,620 --> 00:27:53,400
application security groups and see it

00:27:51,120 --> 00:27:56,910
see to see network policy both probably

00:27:53,400 --> 00:27:58,470
standalone from the current like routing

00:27:56,910 --> 00:27:59,610
control planes stuff that either one of

00:27:58,470 --> 00:28:02,400
those things could be built as a

00:27:59,610 --> 00:28:04,920
standalone component that reads from the

00:28:02,400 --> 00:28:06,750
relevant source of truth the copy or the

00:28:04,920 --> 00:28:07,410
network policy server and then turns

00:28:06,750 --> 00:28:09,120
around and writes

00:28:07,410 --> 00:28:10,230
companies Network policy objects and

00:28:09,120 --> 00:28:12,180
like those two things could probably be

00:28:10,230 --> 00:28:13,380
built in parallel by teams that don't

00:28:12,180 --> 00:28:14,520
even talk to each other and they would

00:28:13,380 --> 00:28:17,790
still end up working at the end of the

00:28:14,520 --> 00:28:19,620
day so that's an opportunity for sure

00:28:17,790 --> 00:28:21,780
especially if people feel like they want

00:28:19,620 --> 00:28:24,150
to accelerate timelines under those like

00:28:21,780 --> 00:28:26,640
Network policy things

00:28:24,150 --> 00:28:29,400
think actually I think is possible we

00:28:26,640 --> 00:28:34,770
have some European slack for track of

00:28:29,400 --> 00:28:36,720
work PB pending on how we shift

00:28:34,770 --> 00:28:39,060
resources between like gardening Iranian

00:28:36,720 --> 00:28:43,920
stuff but it might be that that makes

00:28:39,060 --> 00:28:46,080
more sense than other priorities it's

00:28:43,920 --> 00:28:47,730
worth the conversation maybe okay cool

00:28:46,080 --> 00:28:50,880
yeah if folks like go back and talk

00:28:47,730 --> 00:28:53,520
about it and then like weed back out to

00:28:50,880 --> 00:28:57,870
me and Shannon and slack and I that way

00:28:53,520 --> 00:29:02,700
we can talk about what to do next as as

00:28:57,870 --> 00:29:04,440
far as the question about like the

00:29:02,700 --> 00:29:06,450
decision-making process and what things

00:29:04,440 --> 00:29:08,100
to exposes interfaces versus potentially

00:29:06,450 --> 00:29:14,100
directly that's also fair game for

00:29:08,100 --> 00:29:15,480
Shannon yeah and like he's on vacation

00:29:14,100 --> 00:29:17,040
for like the next two weeks so don't

00:29:15,480 --> 00:29:18,570
expect me to reply and maybe you like

00:29:17,040 --> 00:29:21,150
include me on the message too just so I

00:29:18,570 --> 00:29:22,470
can put on my imaginary Shane and how

00:29:21,150 --> 00:29:26,190
it'd be like I'm pretty sure he would

00:29:22,470 --> 00:29:29,150
say and there's other folks in product

00:29:26,190 --> 00:29:29,150
who are trying to cover for Emily

00:29:29,750 --> 00:29:34,050
all right y'all need to imaginary

00:29:31,740 --> 00:29:39,450
Shannon masks yeah I mean cost it's

00:29:34,050 --> 00:29:42,980
pretty helpful with Shannon say and then

00:29:39,450 --> 00:29:45,420
I just automatically make mistake anyway

00:29:42,980 --> 00:29:52,290
now I realize the Gabe was wearing a

00:29:45,420 --> 00:29:54,120
mask yesterday oh okay so the third

00:29:52,290 --> 00:29:55,530
thing that is on here which is super

00:29:54,120 --> 00:29:58,590
interesting is the idea of using

00:29:55,530 --> 00:30:01,410
container networking for migration you

00:29:58,590 --> 00:30:02,910
know I hadn't thought about that

00:30:01,410 --> 00:30:06,450
until someone just brought it up so

00:30:02,910 --> 00:30:08,070
maybe I don't know someone want to talk

00:30:06,450 --> 00:30:12,180
at us for a minute or two about how you

00:30:08,070 --> 00:30:13,770
see that working I think I think this

00:30:12,180 --> 00:30:15,720
might be there because I misread the

00:30:13,770 --> 00:30:17,700
topic and thought that's what he was

00:30:15,720 --> 00:30:21,900
suggesting and thereby accidentally

00:30:17,700 --> 00:30:24,960
invented the idea so yeah I don't know

00:30:21,900 --> 00:30:28,680
like to say to some obvious right we've

00:30:24,960 --> 00:30:33,090
got lots of people on big Bosh based CF

00:30:28,680 --> 00:30:35,340
clusters and we'd like to get off into

00:30:33,090 --> 00:30:37,650
the brave new world of sto based

00:30:35,340 --> 00:30:40,740
networking and stuff

00:30:37,650 --> 00:30:43,380
and one of the big things that stands in

00:30:40,740 --> 00:30:46,620
the way is how do you network that right

00:30:43,380 --> 00:30:49,050
like ideally we put these two things

00:30:46,620 --> 00:30:52,170
separately and say hey to CF push your

00:30:49,050 --> 00:30:58,380
apps to the new place but I mean what

00:30:52,170 --> 00:30:59,940
breaks is networking and sto I mean

00:30:58,380 --> 00:31:01,830
people with are these really great the

00:30:59,940 --> 00:31:05,310
sisty o stuff and service meshes because

00:31:01,830 --> 00:31:08,400
they sort of span your existing legacy

00:31:05,310 --> 00:31:10,950
bla bla and then I'd know everything

00:31:08,400 --> 00:31:15,380
goes blurry and I pass out in my head

00:31:10,950 --> 00:31:19,470
but I kind of thought maybe there's some

00:31:15,380 --> 00:31:22,530
some magic that could make things yeah

00:31:19,470 --> 00:31:26,330
okay that's good enough yeah there is

00:31:22,530 --> 00:31:28,830
magic and it it will make you go and

00:31:26,330 --> 00:31:32,160
it's just like drinking alcohol that's

00:31:28,830 --> 00:31:33,480
too strong it's the methanol in that

00:31:32,160 --> 00:31:40,440
game if that's the thing that makes you

00:31:33,480 --> 00:31:42,300
go blind right okay yeah so like even

00:31:40,440 --> 00:31:44,310
any I should say even link Rd is moving

00:31:42,300 --> 00:31:47,760
in this direction of like put gateways

00:31:44,310 --> 00:31:50,400
on every cluster and then have them have

00:31:47,760 --> 00:31:51,750
clients speak mutual TLS with an S and I

00:31:50,400 --> 00:31:56,880
header when it connects out to the

00:31:51,750 --> 00:31:59,010
Gateway and that way you can basically

00:31:56,880 --> 00:32:00,450
build this it's not a VPN but it sure

00:31:59,010 --> 00:32:05,850
looks like a VPN and it operates at

00:32:00,450 --> 00:32:07,020
layer 4 so right yeah we the networks

00:32:05,850 --> 00:32:09,180
don't have to be connected at layer 3

00:32:07,020 --> 00:32:11,640
that's the point that's like that's the

00:32:09,180 --> 00:32:13,500
thing I wanted so the the rough the

00:32:11,640 --> 00:32:16,200
rough completely crazy intuition but

00:32:13,500 --> 00:32:19,130
like we already have sto cycles and all

00:32:16,200 --> 00:32:21,840
the apps you know as Bosch based CF and

00:32:19,130 --> 00:32:24,780
you know step 2 question mark question

00:32:21,840 --> 00:32:26,730
mark question mark step 3 migration the

00:32:24,780 --> 00:32:28,110
let me clear there on voice I cars not

00:32:26,730 --> 00:32:30,060
sto side cars that's an important

00:32:28,110 --> 00:32:32,970
distinction fine

00:32:30,060 --> 00:32:34,650
yeah because because they're like one of

00:32:32,970 --> 00:32:37,140
the things that made it challenging to

00:32:34,650 --> 00:32:38,880
develop in the Bosch Diego world one of

00:32:37,140 --> 00:32:40,860
the things that slowed us down honestly

00:32:38,880 --> 00:32:42,740
was that those side cars were like

00:32:40,860 --> 00:32:46,050
deeply under the control of Diego and

00:32:42,740 --> 00:32:48,120
the process of like keeping everything

00:32:46,050 --> 00:32:49,530
alive and like satisfying the use cases

00:32:48,120 --> 00:32:51,180
that Diego had for those envoys while

00:32:49,530 --> 00:32:51,840
also putting them under the control of

00:32:51,180 --> 00:32:55,860
Ischia

00:32:51,840 --> 00:32:57,840
um and like that was quite a fan like

00:32:55,860 --> 00:32:59,370
that was quite a I don't know what the

00:32:57,840 --> 00:33:04,020
word is there's an analogy for doing

00:32:59,370 --> 00:33:07,140
that and it's hard yeah magic trick

00:33:04,020 --> 00:33:12,150
Patrick pulling the carpet out from

00:33:07,140 --> 00:33:16,710
underneath the camel I don't know but

00:33:12,150 --> 00:33:19,770
yeah like that said yes I think that the

00:33:16,710 --> 00:33:21,570
on the migration side I haven't been

00:33:19,770 --> 00:33:24,600
involved in the most recent discussions

00:33:21,570 --> 00:33:26,450
in the in VMware I should probably get

00:33:24,600 --> 00:33:28,590
back into that stuff because I think

00:33:26,450 --> 00:33:31,560
container to container traffic across

00:33:28,590 --> 00:33:32,580
different clusters totally work and you

00:33:31,560 --> 00:33:33,960
should be able to make that work even

00:33:32,580 --> 00:33:38,370
when the clusters aren't different layer

00:33:33,960 --> 00:33:41,130
three networks and I think maybe one

00:33:38,370 --> 00:33:42,960
thing would be like if if if you're like

00:33:41,130 --> 00:33:44,340
making use of the existing container to

00:33:42,960 --> 00:33:46,620
container networking like service

00:33:44,340 --> 00:33:49,320
discovery for example you can use that

00:33:46,620 --> 00:33:51,090
DNS as a as a hook and you can say well

00:33:49,320 --> 00:33:54,390
it was returning only IP addresses

00:33:51,090 --> 00:33:57,270
inside the Bosh Diego cluster now it's

00:33:54,390 --> 00:34:01,230
gonna start returning this external

00:33:57,270 --> 00:34:03,750
gateway or maybe returning the address

00:34:01,230 --> 00:34:06,240
of a of an egress gateway that's inside

00:34:03,750 --> 00:34:08,220
the Diego cluster and can accept like

00:34:06,240 --> 00:34:11,610
these maybe unencrypted plaintext

00:34:08,220 --> 00:34:13,730
connections over a TCP socket and then

00:34:11,610 --> 00:34:17,790
like encrypt them inside of an S and I

00:34:13,730 --> 00:34:19,020
TLS stream send them over to some

00:34:17,790 --> 00:34:21,690
kubernetes base cluster that has an

00:34:19,020 --> 00:34:23,310
ingress gateway and then it'll connect

00:34:21,690 --> 00:34:24,420
over and then the and you know the

00:34:23,310 --> 00:34:26,670
applications won't see the difference

00:34:24,420 --> 00:34:30,180
except maybe another couple hops in

00:34:26,670 --> 00:34:36,660
terms of latency right right yeah that'd

00:34:30,180 --> 00:34:39,200
be pretty slick to get that going yeah

00:34:36,660 --> 00:34:42,120
yeah so what's the sorry go ahead

00:34:39,200 --> 00:34:44,970
no no Karen Karen just gonna ask

00:34:42,120 --> 00:34:46,470
questions like how urgent is this and

00:34:44,970 --> 00:34:48,450
can we is there somebody who has like a

00:34:46,470 --> 00:34:50,850
burning use case for it right now and we

00:34:48,450 --> 00:34:58,350
can you know talk through in more detail

00:34:50,850 --> 00:35:00,420
I mean yeah I mean in the short term I'm

00:34:58,350 --> 00:35:01,980
kind of um oh yeah I'm on board with the

00:35:00,420 --> 00:35:03,210
general short-term idea of the most

00:35:01,980 --> 00:35:06,180
important thing is to ship something

00:35:03,210 --> 00:35:08,710
that works and get one point out

00:35:06,180 --> 00:35:10,660
but I mean there's an obvious I mean

00:35:08,710 --> 00:35:12,670
it's kind of like when we move das to

00:35:10,660 --> 00:35:14,589
Diego right and the longer you try and

00:35:12,670 --> 00:35:17,319
keep two systems in flight the more pain

00:35:14,589 --> 00:35:18,819
and problems you have and it would be

00:35:17,319 --> 00:35:21,869
really nice to get everything onto the

00:35:18,819 --> 00:35:25,299
new world and we have some big hairy

00:35:21,869 --> 00:35:27,549
existing clusters and and existing users

00:35:25,299 --> 00:35:30,760
right like we just have a lot of people

00:35:27,549 --> 00:35:36,400
on both big clusters and small private

00:35:30,760 --> 00:35:40,059
clusters who we would like to get on to

00:35:36,400 --> 00:35:41,380
you know CFO gates but if the only way

00:35:40,059 --> 00:35:43,660
to get let's see if Akane's is like

00:35:41,380 --> 00:35:46,510
holding their hand with every single

00:35:43,660 --> 00:35:50,079
application it's gonna be really painful

00:35:46,510 --> 00:35:58,059
and expensive and hard to even justify

00:35:50,079 --> 00:36:00,640
to an extent generic tool that just

00:35:58,059 --> 00:36:04,900
allows you to migrate from one CF to

00:36:00,640 --> 00:36:06,549
another right the thing that this is

00:36:04,900 --> 00:36:08,530
like so like in my head I was like well

00:36:06,549 --> 00:36:09,849
okay look the easiest thing the Simpson

00:36:08,530 --> 00:36:12,160
that could work don't even bother having

00:36:09,849 --> 00:36:14,619
like migration don't have one cloud

00:36:12,160 --> 00:36:16,089
controller just push just have builded

00:36:14,619 --> 00:36:17,680
client-side tool to push it for place

00:36:16,089 --> 00:36:19,599
you know that but the thing that kills

00:36:17,680 --> 00:36:21,490
you is networking right it's all very

00:36:19,599 --> 00:36:24,520
well but if you've got containers to

00:36:21,490 --> 00:36:28,270
contain a networking I mean everything

00:36:24,520 --> 00:36:29,770
breaks in the middle of that yeah under

00:36:28,270 --> 00:36:31,180
the expectation that the the front-end

00:36:29,770 --> 00:36:32,619
app that you push sure you've got

00:36:31,180 --> 00:36:34,480
another copy of the front-end on the new

00:36:32,619 --> 00:36:36,549
cluster but it's backends aren't in its

00:36:34,480 --> 00:36:38,109
cluster and so it tries to connect to

00:36:36,549 --> 00:36:40,480
its back-end application and that's not

00:36:38,109 --> 00:36:42,400
there yet so there's going to be some

00:36:40,480 --> 00:36:44,170
transition state I mean unless you can

00:36:42,400 --> 00:36:46,420
sequence everything exactly so that you

00:36:44,170 --> 00:36:48,250
were like follow the dependency tree in

00:36:46,420 --> 00:36:51,160
Reverse and you always push the most

00:36:48,250 --> 00:36:52,990
back-end ish back-end app first I think

00:36:51,160 --> 00:36:55,390
if you query the cloud controller you

00:36:52,990 --> 00:36:56,530
could you get all that information so

00:36:55,390 --> 00:36:58,390
the dependency graph between

00:36:56,530 --> 00:37:00,540
applications isn't stored as a

00:36:58,390 --> 00:37:03,910
first-class thing in cloud controller

00:37:00,540 --> 00:37:07,569
but you have the rules right okay I mean

00:37:03,910 --> 00:37:09,819
can you deduce him that's actually

00:37:07,569 --> 00:37:12,099
guaranteed to be a directed graph like

00:37:09,819 --> 00:37:15,819
it's fit yeah the arrows are directed

00:37:12,099 --> 00:37:17,290
but there may be cycles right what why

00:37:15,819 --> 00:37:18,520
ever it's called like a tree versus a

00:37:17,290 --> 00:37:21,070
graph or whatever by

00:37:18,520 --> 00:37:23,860
like it's a sickly necessarily question

00:37:21,070 --> 00:37:25,420
right yeah it may be sick it may be a

00:37:23,860 --> 00:37:27,460
cyclic directed graph which isn't gonna

00:37:25,420 --> 00:37:29,320
help us yeah that's that's the word I

00:37:27,460 --> 00:37:30,550
was going for cyclic yeah if it's got a

00:37:29,320 --> 00:37:34,390
cycle you're toast

00:37:30,550 --> 00:37:36,370
but I mean even even so right assume you

00:37:34,390 --> 00:37:40,840
have all this information from the

00:37:36,370 --> 00:37:42,730
system and if you can't what I'm trying

00:37:40,840 --> 00:37:44,560
to say is you do the best you can with

00:37:42,730 --> 00:37:46,570
that information and that should still

00:37:44,560 --> 00:37:53,090
be better than anything else we build

00:37:46,570 --> 00:37:55,590
right I mean but I mean let me kind of

00:37:53,090 --> 00:37:58,870
[Music]

00:37:55,590 --> 00:38:00,460
like it's like migrating a binary thing

00:37:58,870 --> 00:38:05,200
like either it works or it doesn't

00:38:00,460 --> 00:38:06,490
I mean so things to working right so let

00:38:05,200 --> 00:38:09,400
me just put it like this right so let's

00:38:06,490 --> 00:38:11,680
they say I've got two apps to CF apps

00:38:09,400 --> 00:38:15,070
right and they both use container

00:38:11,680 --> 00:38:18,700
networking to talk to each other how do

00:38:15,070 --> 00:38:20,560
I move them right like how do i what do

00:38:18,700 --> 00:38:23,420
I do

00:38:20,560 --> 00:38:26,210
it's the simplest case right and now now

00:38:23,420 --> 00:38:29,990
do that with like a hundreds customer

00:38:26,210 --> 00:38:33,550
applications so in my head you you

00:38:29,990 --> 00:38:36,550
replay the commands that developer

00:38:33,550 --> 00:38:39,950
entered when they first pushed the apps

00:38:36,550 --> 00:38:45,410
so the apps restage so you get the code

00:38:39,950 --> 00:38:47,810
you get the the service bindings and you

00:38:45,410 --> 00:38:50,000
get the networking settings

00:38:47,810 --> 00:38:53,450
you essentially replay that you should

00:38:50,000 --> 00:38:55,070
be able to do that to be clear my

00:38:53,450 --> 00:39:05,300
constraint here is I don't want to have

00:38:55,070 --> 00:39:07,070
an outage okay I mean but that you you

00:39:05,300 --> 00:39:09,290
should still be able to do that sort of

00:39:07,070 --> 00:39:10,910
like blue green if you have to running

00:39:09,290 --> 00:39:12,980
that but that's the problem you can't

00:39:10,910 --> 00:39:14,810
blue green because in the middle of your

00:39:12,980 --> 00:39:18,050
blue green you don't have networking

00:39:14,810 --> 00:39:21,140
between the teeth Oh your old app is

00:39:18,050 --> 00:39:23,330
still online right but it's online it's

00:39:21,140 --> 00:39:25,700
not never accessible to your new app so

00:39:23,330 --> 00:39:27,830
your green console to your blue and so

00:39:25,700 --> 00:39:28,960
your blue is become green if that makes

00:39:27,830 --> 00:39:32,870
any sense

00:39:28,960 --> 00:39:35,720
so let's say serious question is this is

00:39:32,870 --> 00:39:37,730
this going to be a solvable problem this

00:39:35,720 --> 00:39:38,990
or is this worth the incredible effort

00:39:37,730 --> 00:39:41,960
that it's going to take well wait a

00:39:38,990 --> 00:39:43,910
second let's let's what like the network

00:39:41,960 --> 00:39:48,050
connectivity between the clusters should

00:39:43,910 --> 00:39:51,200
make this a lot more tractable right you

00:39:48,050 --> 00:39:53,780
push another point yeah you push some I

00:39:51,200 --> 00:39:54,950
mean like yeah you push another copy of

00:39:53,780 --> 00:39:57,170
one of the running apps to the new

00:39:54,950 --> 00:40:00,070
cluster it can reach the other apps

00:39:57,170 --> 00:40:02,720
because DNS and policy allows that and

00:40:00,070 --> 00:40:04,700
then it starts working and then you

00:40:02,720 --> 00:40:07,340
delete it from the old cluster and then

00:40:04,700 --> 00:40:09,170
repeat right right there there's that's

00:40:07,340 --> 00:40:11,180
exactly where this topic that was the

00:40:09,170 --> 00:40:15,200
core of this topic right like if if we

00:40:11,180 --> 00:40:18,410
could have all this have the access work

00:40:15,200 --> 00:40:20,780
between CF on Porsche and CF on Kate's

00:40:18,410 --> 00:40:22,910
then yeah you just blue-green everything

00:40:20,780 --> 00:40:27,290
over and you're done right you're all

00:40:22,910 --> 00:40:29,930
client-side it just otherwise is harder

00:40:27,290 --> 00:40:32,450
I mean in the past we started to build

00:40:29,930 --> 00:40:33,390
something in that direction we were just

00:40:32,450 --> 00:40:35,730
connecting to

00:40:33,390 --> 00:40:38,039
Bausch p.m. is not applications so maybe

00:40:35,730 --> 00:40:39,660
that's like we we missed the hardest

00:40:38,039 --> 00:40:41,430
part which is like getting to the

00:40:39,660 --> 00:40:44,489
invoice that are next to the

00:40:41,430 --> 00:40:45,749
applications all right I mean if you go

00:40:44,489 --> 00:40:47,549
through the go recess right like if

00:40:45,749 --> 00:40:50,009
everything still went to go there's no

00:40:47,549 --> 00:40:51,960
like container container access it's a

00:40:50,009 --> 00:40:53,400
tiny Z I mean honestly otherwise that

00:40:51,960 --> 00:40:55,259
you just put a low balance with in front

00:40:53,400 --> 00:40:56,999
of the whole thing and failover from one

00:40:55,259 --> 00:40:59,099
cluster to another right here so you've

00:40:56,999 --> 00:41:00,630
basically done right it's just I don't

00:40:59,099 --> 00:41:02,579
know how to do that with like two

00:41:00,630 --> 00:41:04,650
separate clusters where you can talk

00:41:02,579 --> 00:41:06,900
behind the Garuda can't like put a load

00:41:04,650 --> 00:41:08,249
balancer from yeah and to like elaborate

00:41:06,900 --> 00:41:10,559
on that fail everything like we'd been

00:41:08,249 --> 00:41:12,509
imagining so the earlier part of this

00:41:10,559 --> 00:41:15,329
conversation I had been in inside of

00:41:12,509 --> 00:41:18,930
VMware was like you you actually

00:41:15,329 --> 00:41:20,670
published the list of routes from one of

00:41:18,930 --> 00:41:22,259
the clusters to the other so that the

00:41:20,670 --> 00:41:23,789
like front-end load balancer can

00:41:22,259 --> 00:41:26,190
actually be like a go router or an envoy

00:41:23,789 --> 00:41:27,630
that knows what routes are live on what

00:41:26,190 --> 00:41:30,119
cluster and so can route traffic

00:41:27,630 --> 00:41:34,380
directly to the right place

00:41:30,119 --> 00:41:35,759
and so if it but if there should be an

00:41:34,380 --> 00:41:38,819
analogous thing for internal routes

00:41:35,759 --> 00:41:40,589
right like if I know what internal

00:41:38,819 --> 00:41:41,940
routes are reachable on this other

00:41:40,589 --> 00:41:46,230
cluster and which ones are reachable

00:41:41,940 --> 00:41:48,569
here then I can do like transparently to

00:41:46,230 --> 00:41:49,859
any client I can decide to shunt

00:41:48,569 --> 00:41:52,880
something out of the traffic over there

00:41:49,859 --> 00:41:55,799
right and and and that's what I think I

00:41:52,880 --> 00:41:57,359
accidentally invented but I'm wondering

00:41:55,799 --> 00:41:58,529
if it's actually possible if you see

00:41:57,359 --> 00:42:00,059
what I means that that's what this all

00:41:58,529 --> 00:42:01,799
oh it sounds yeah it's definitely

00:42:00,059 --> 00:42:03,569
possible it's just a bunch of control

00:42:01,799 --> 00:42:05,220
plane like get the data from here over

00:42:03,569 --> 00:42:06,269
there and like program the right sto

00:42:05,220 --> 00:42:08,009
stuff so this is actually where it's

00:42:06,269 --> 00:42:09,569
Tio's or service let me serve as much

00:42:08,009 --> 00:42:09,930
interface maybe can help us get there

00:42:09,569 --> 00:42:11,789
too

00:42:09,930 --> 00:42:14,609
could be really helpful as we can you

00:42:11,789 --> 00:42:16,710
can set locality based failover policies

00:42:14,609 --> 00:42:19,289
and say if there's a back-end for this

00:42:16,710 --> 00:42:21,450
route in the local cluster prefer it if

00:42:19,289 --> 00:42:22,829
not fall over failover to this other

00:42:21,450 --> 00:42:25,650
cluster and that's like a first-class

00:42:22,829 --> 00:42:30,089
supported thing and we could use that

00:42:25,650 --> 00:42:32,249
all over the place right and I believe

00:42:30,089 --> 00:42:34,349
the use case that Gabe was talking about

00:42:32,249 --> 00:42:37,680
it's actually today is supported through

00:42:34,349 --> 00:42:39,239
a series of configurations in steel you

00:42:37,680 --> 00:42:44,970
could actually do them across multiple

00:42:39,239 --> 00:42:46,140
clusters yeah definitely Josh right

00:42:44,970 --> 00:42:47,350
because the buffer doesn't really have

00:42:46,140 --> 00:42:50,500
this do is Kate was saying

00:42:47,350 --> 00:42:52,120
right we could if you can sort make that

00:42:50,500 --> 00:42:53,500
work because once you got that then on

00:42:52,120 --> 00:42:55,270
the client side you could really just

00:42:53,500 --> 00:42:56,830
basically kind of like do you like like

00:42:55,270 --> 00:42:58,030
pulled pull down the drop blood push it

00:42:56,830 --> 00:43:00,340
slim you class there and you could kind

00:42:58,030 --> 00:43:02,860
of scrape the rest yeah so I think in

00:43:00,340 --> 00:43:06,160
the sort of trick to make it work on

00:43:02,860 --> 00:43:08,410
Diego and Bosch would be you wouldn't

00:43:06,160 --> 00:43:09,940
have client side side car proxies that

00:43:08,410 --> 00:43:12,400
are programmable by Ostia the on voice

00:43:09,940 --> 00:43:13,870
in the Diego containers are not client

00:43:12,400 --> 00:43:16,360
side proxies they're only server side

00:43:13,870 --> 00:43:18,520
proxies but you can deploy an egress

00:43:16,360 --> 00:43:19,600
gateway inside the Diego cluster like

00:43:18,520 --> 00:43:21,220
this would be a little bit of a feature

00:43:19,600 --> 00:43:22,690
work but like you you could effectively

00:43:21,220 --> 00:43:24,040
deploy another app inside the Diego

00:43:22,690 --> 00:43:26,380
cluster which functions as an egress

00:43:24,040 --> 00:43:28,300
gateway and then map your internal

00:43:26,380 --> 00:43:30,400
routes so that instead of pointing to

00:43:28,300 --> 00:43:32,410
the real back-end they go to that egress

00:43:30,400 --> 00:43:34,000
gateway an egress gateway knows how I'm

00:43:32,410 --> 00:43:36,520
receiving traffic from this client I'm

00:43:34,000 --> 00:43:38,200
going to you know follow this failover

00:43:36,520 --> 00:43:40,750
policy and it could that actually that

00:43:38,200 --> 00:43:42,970
egress gateway might itself be an sto

00:43:40,750 --> 00:43:44,770
managed Envoy proxy like you could

00:43:42,970 --> 00:43:48,070
deploy on my proxy to Cloud Foundry

00:43:44,770 --> 00:43:50,710
Diego have it run managed by sto and

00:43:48,070 --> 00:43:51,910
treat it like an egress gateway and like

00:43:50,710 --> 00:43:52,690
there's going to be some details to sort

00:43:51,910 --> 00:43:56,710
out but I think that fundamentally

00:43:52,690 --> 00:43:58,810
that'll work interesting so you can see

00:43:56,710 --> 00:44:02,650
if pusher your sto egress gateway to

00:43:58,810 --> 00:44:04,300
your Diego cluster and that would be now

00:44:02,650 --> 00:44:05,800
that would be an application developer

00:44:04,300 --> 00:44:07,930
ish workflow I mean the operator could

00:44:05,800 --> 00:44:11,770
run into we could also make something

00:44:07,930 --> 00:44:12,970
that was more like well yeah I I don't

00:44:11,770 --> 00:44:14,590
know like whether the workflow should be

00:44:12,970 --> 00:44:16,840
initiated by the application developer

00:44:14,590 --> 00:44:18,520
you know like press this button in your

00:44:16,840 --> 00:44:20,260
GUI and it's gonna go deploy this egress

00:44:18,520 --> 00:44:22,960
gateway into your space and you know

00:44:20,260 --> 00:44:25,990
rewire your internal routes and stuff or

00:44:22,960 --> 00:44:30,100
if it's like the platform does this in a

00:44:25,990 --> 00:44:31,480
way that's I you know it makes me

00:44:30,100 --> 00:44:32,620
nervous to do this all at once like I

00:44:31,480 --> 00:44:34,780
don't want to just pull a bit yeah

00:44:32,620 --> 00:44:37,540
that's exactly what I was thinking okay

00:44:34,780 --> 00:44:39,310
I mean eventually my t's lever right

00:44:37,540 --> 00:44:42,490
there's some point you need to turn the

00:44:39,310 --> 00:44:44,350
whole thing off but I'd want to run a

00:44:42,490 --> 00:44:46,150
quite a few things individually before I

00:44:44,350 --> 00:44:47,890
everybody that lever yeah so I feel like

00:44:46,150 --> 00:44:50,470
we've got to find a way to stage this

00:44:47,890 --> 00:44:52,170
where it like maybe it's a developer

00:44:50,470 --> 00:44:55,450
maybe it's an operator who says like

00:44:52,170 --> 00:44:57,040
this app or the space worth of apps you

00:44:55,450 --> 00:45:00,859
know run them through the gauntlet and

00:44:57,040 --> 00:45:04,790
you know see if things work

00:45:00,859 --> 00:45:07,160
could we maybe schedule some work even

00:45:04,790 --> 00:45:10,069
[Music]

00:45:07,160 --> 00:45:12,480
where you don't want zero downtime

00:45:10,069 --> 00:45:15,420
perhaps that should be a much easier

00:45:12,480 --> 00:45:17,789
problem to solve at first if you don't

00:45:15,420 --> 00:45:19,859
care about downtime then don't even

00:45:17,789 --> 00:45:23,190
migrate just push your apps to the new

00:45:19,859 --> 00:45:25,200
cluster right like you could even just

00:45:23,190 --> 00:45:28,190
like make a copy of the cloud controller

00:45:25,200 --> 00:45:32,280
database and stand it up over here right

00:45:28,190 --> 00:45:33,720
yeah but you still need your in a case

00:45:32,280 --> 00:45:36,329
where only half of your apps gonna be

00:45:33,720 --> 00:45:38,250
migrated you still need to be able to

00:45:36,329 --> 00:45:40,710
migrate half of your apps right if

00:45:38,250 --> 00:45:42,990
unique it like I've I've done the

00:45:40,710 --> 00:45:44,970
retooling on a pay and you stuck at B

00:45:42,990 --> 00:45:47,640
but @b still has to run a Diego because

00:45:44,970 --> 00:45:49,740
I don't know what the new new world is

00:45:47,640 --> 00:45:52,700
missing a feature or something database

00:45:49,740 --> 00:45:55,250
might be the same old one might be mine

00:45:52,700 --> 00:45:58,020
Postgres or the other way around

00:45:55,250 --> 00:45:58,920
blobstore same thing yeah but that's

00:45:58,020 --> 00:46:00,930
pretty fun like if you're making

00:45:58,920 --> 00:46:03,440
application code changes that's kind of

00:46:00,930 --> 00:46:07,200
different from migrating a unchanged app

00:46:03,440 --> 00:46:10,650
ccdb can be either Postgres or my sequel

00:46:07,200 --> 00:46:13,740
oh okay same for the blobster your old

00:46:10,650 --> 00:46:15,960
blobster could be s3 new blob there

00:46:13,740 --> 00:46:17,490
could be something else okay all right

00:46:15,960 --> 00:46:21,359
well if yeah I think that's a little out

00:46:17,490 --> 00:46:26,490
of my wheelhouse and like I kind of

00:46:21,359 --> 00:46:30,480
wonder if like if the if the size of the

00:46:26,490 --> 00:46:32,819
problem space merits the further and if

00:46:30,480 --> 00:46:37,380
so if it's the right metaphor because I

00:46:32,819 --> 00:46:41,430
could kind of imagine like doing a app

00:46:37,380 --> 00:46:42,779
by app proxy approach to where where you

00:46:41,430 --> 00:46:44,789
know you want to have a Bluegreen

00:46:42,779 --> 00:46:49,710
upgrade see a Bluegreen upgrade between

00:46:44,789 --> 00:46:53,490
the real app and the proxy that talks to

00:46:49,710 --> 00:46:54,900
the other foundation which might give

00:46:53,490 --> 00:46:59,670
you a little bit more granularity and a

00:46:54,900 --> 00:47:02,069
little bit more control but and might be

00:46:59,670 --> 00:47:05,700
a little bit less coordination because

00:47:02,069 --> 00:47:07,890
we wouldn't be responsible for kind of

00:47:05,700 --> 00:47:10,609
inferring all of the metadata about who

00:47:07,890 --> 00:47:10,609
could talk to who

00:47:12,680 --> 00:47:17,970
so probably along those lines I think I

00:47:15,869 --> 00:47:21,930
saw document once where there were also

00:47:17,970 --> 00:47:24,030
some like multi cluster cases described

00:47:21,930 --> 00:47:26,130
but also the K is where you would like

00:47:24,030 --> 00:47:28,530
update from one coronate his minor

00:47:26,130 --> 00:47:30,960
version to another one so I'm kind of

00:47:28,530 --> 00:47:33,480
wondering if there's parts that could be

00:47:30,960 --> 00:47:35,490
useful but like from from what we just

00:47:33,480 --> 00:47:46,560
discussed also in in these types of

00:47:35,490 --> 00:47:48,570
cases yes yeah I think one one question

00:47:46,560 --> 00:47:52,710
I have in the kubernetes world is to

00:47:48,570 --> 00:47:54,600
people imagine that their kubernetes if

00:47:52,710 --> 00:47:56,400
they if they want cross cluster in the

00:47:54,600 --> 00:47:58,500
in the kubernetes world do they imagine

00:47:56,400 --> 00:48:01,200
all the pods can reach each other over

00:47:58,500 --> 00:48:03,990
the same like IP network or would there

00:48:01,200 --> 00:48:09,900
be like in that boundary around each

00:48:03,990 --> 00:48:11,700
cluster because the the multi cluster

00:48:09,900 --> 00:48:13,500
kubernetes thing gets a lot simpler if

00:48:11,700 --> 00:48:15,450
you're just like well there's a hundred

00:48:13,500 --> 00:48:16,920
kubernetes clusters but all the pods are

00:48:15,450 --> 00:48:18,390
numbered out of the same IP space and

00:48:16,920 --> 00:48:25,710
they're all they can all reach each

00:48:18,390 --> 00:48:28,380
other right okay yeah that wasn't my

00:48:25,710 --> 00:48:29,430
working assumption either yeah you're

00:48:28,380 --> 00:48:31,680
right that's making everything way

00:48:29,430 --> 00:48:33,540
easier but as far as I know you either

00:48:31,680 --> 00:48:37,800
need to be VMware which is good for some

00:48:33,540 --> 00:48:39,090
or a GK and otherwise is very hard okay

00:48:37,800 --> 00:48:40,950
yeah that's I mean for what it's worth

00:48:39,090 --> 00:48:42,510
it's not even like you know VMware

00:48:40,950 --> 00:48:43,590
customers a lot of them are not using

00:48:42,510 --> 00:48:44,940
that kind of software-defined network

00:48:43,590 --> 00:48:47,100
writer

00:48:44,940 --> 00:48:49,050
so yeah I've also been an operating the

00:48:47,100 --> 00:48:51,480
assumption that like you can't just

00:48:49,050 --> 00:48:53,190
assume away not then that is going to be

00:48:51,480 --> 00:48:54,390
there and you have to live with it and

00:48:53,190 --> 00:48:55,619
so then the reason I'm asking that

00:48:54,390 --> 00:48:56,940
question is because I think it pushes us

00:48:55,619 --> 00:48:59,040
to a very similar model we were just

00:48:56,940 --> 00:49:01,440
talking about which is an investigate

00:48:59,040 --> 00:49:03,330
way on each cluster you may not need the

00:49:01,440 --> 00:49:04,859
egress gateway of every workload has a

00:49:03,330 --> 00:49:08,130
sidecar because that thing can do

00:49:04,859 --> 00:49:11,119
client-side failover and such but it's a

00:49:08,130 --> 00:49:16,619
very similar network topology right

00:49:11,119 --> 00:49:18,300
right right yeah I mean like I say it's

00:49:16,619 --> 00:49:21,090
not like the immediate consents of that

00:49:18,300 --> 00:49:23,970
but I mean isn't

00:49:21,090 --> 00:49:27,060
the longer term is the more kind of hard

00:49:23,970 --> 00:49:30,720
we gets as a thing to migrate people and

00:49:27,060 --> 00:49:32,250
you know let's just say the quite thing

00:49:30,720 --> 00:49:34,230
I'll add one of the big advantages CF

00:49:32,250 --> 00:49:36,210
has versus all of the various other

00:49:34,230 --> 00:49:39,270
things in this space it's got a ton of

00:49:36,210 --> 00:49:42,120
existing big customers using it so

00:49:39,270 --> 00:49:44,760
getting them onto the new thing in a

00:49:42,120 --> 00:49:47,400
painless ways is a pretty important

00:49:44,760 --> 00:49:50,090
thing yeah one thing that I was pushing

00:49:47,400 --> 00:49:52,770
for inside of VMware it was like

00:49:50,090 --> 00:49:54,360
treating the migration thing is like we

00:49:52,770 --> 00:49:56,940
should start doing this early as opposed

00:49:54,360 --> 00:49:57,870
to like putting it off because you're

00:49:56,940 --> 00:49:59,520
not gonna really know that you're

00:49:57,870 --> 00:50:01,020
kubernetes thing runs well in production

00:49:59,520 --> 00:50:06,510
until you migrate production workloads

00:50:01,020 --> 00:50:07,680
to it so yeah right like if you don't

00:50:06,510 --> 00:50:08,790
get people using it you're not gonna get

00:50:07,680 --> 00:50:13,050
the right feedback to make it good

00:50:08,790 --> 00:50:15,150
design there plus the longer we have to

00:50:13,050 --> 00:50:20,370
support stuff more expensive is because

00:50:15,150 --> 00:50:22,500
we have to keep supporting at some point

00:50:20,370 --> 00:50:24,540
we've got a bionic stem cell versus

00:50:22,500 --> 00:50:27,870
Zinio stem cell issue right like CEO

00:50:24,540 --> 00:50:29,900
goes out of support in a year and if you

00:50:27,870 --> 00:50:32,400
don't get people migrated before then

00:50:29,900 --> 00:50:37,170
you've got pretty expensive transition

00:50:32,400 --> 00:50:40,110
on your hands yeah yeah I see it the

00:50:37,170 --> 00:50:42,320
same way I wish were I wish you a merry

00:50:40,110 --> 00:50:42,320
Christams

00:50:42,330 --> 00:50:52,140
I think maybe there's similar sentiment

00:50:45,560 --> 00:50:57,930
okay full minutes about coronavirus

00:50:52,140 --> 00:51:00,030
working off the brexit rent chip in for

00:50:57,930 --> 00:51:01,680
having made absolutely no useful

00:51:00,030 --> 00:51:03,540
contribution for the entire meeting and

00:51:01,680 --> 00:51:06,510
mr beginning of it just on the

00:51:03,540 --> 00:51:09,840
coronavirus thing does anyone know how

00:51:06,510 --> 00:51:13,710
many of you are verboten from going to

00:51:09,840 --> 00:51:18,270
cube comm i gather vmware have a travel

00:51:13,710 --> 00:51:21,270
ban i haven't seen any official banning

00:51:18,270 --> 00:51:26,790
from IBM yet but i've self banned I'm

00:51:21,270 --> 00:51:28,770
certainly not gonna be friends at Google

00:51:26,790 --> 00:51:30,300
and VMware that there is an official

00:51:28,770 --> 00:51:33,750
travel ban and I think it'd be a murder

00:51:30,300 --> 00:51:35,760
is probably

00:51:33,750 --> 00:51:38,640
on a need only kind of travel

00:51:35,760 --> 00:51:40,109
requirement that Google has I mean given

00:51:38,640 --> 00:51:42,090
that they have converted their upcoming

00:51:40,109 --> 00:51:45,359
Google next to a virtual event right

00:51:42,090 --> 00:51:46,650
make sense to hear from them right I

00:51:45,359 --> 00:51:49,080
mean I I don't know what's gonna happen

00:51:46,650 --> 00:51:51,990
but I did see that there was a case

00:51:49,080 --> 00:51:56,250
reported in Amsterdam like today so I

00:51:51,990 --> 00:51:58,230
don't know before we continue any

00:51:56,250 --> 00:52:01,010
further do you want me to stop the

00:51:58,230 --> 00:52:03,750
recording are we good to go

00:52:01,010 --> 00:52:05,250
well you I mean definitely record the

00:52:03,750 --> 00:52:08,900
coronavirus stuff first oh you know I

00:52:05,250 --> 00:52:08,900
think I think I think I feel good

00:52:09,380 --> 00:52:14,670
generators if they exist we'll want to

00:52:11,640 --> 00:52:25,230
hit no I'm just saying before this goes

00:52:14,670 --> 00:52:27,599
into a brexit conversation because we're

00:52:25,230 --> 00:52:30,869
good to go as far as the recording is

00:52:27,599 --> 00:52:33,330
concerned I just wanted to remind

00:52:30,869 --> 00:52:35,310
everyone on the call as well I mentioned

00:52:33,330 --> 00:52:37,410
in the chat but please do note that us

00:52:35,310 --> 00:52:40,349
daylight savings will begin this Sunday

00:52:37,410 --> 00:52:43,500
so please note the time difference I'll

00:52:40,349 --> 00:52:46,680
drop a message in slack before the next

00:52:43,500 --> 00:52:49,260
one to make sure that the European folks

00:52:46,680 --> 00:52:53,880
are joining what is it early late I

00:52:49,260 --> 00:52:58,320
still can't figure out how the Sun is

00:52:53,880 --> 00:53:02,160
moving around no cue but I'll figure it

00:52:58,320 --> 00:53:03,210
out with it rises in the east and it

00:53:02,160 --> 00:53:09,180
goes down in the West

00:53:03,210 --> 00:53:10,640
well that far I can call it all right I

00:53:09,180 --> 00:53:13,640
will stop the recording Matt thank you

00:53:10,640 --> 00:53:13,640

YouTube URL: https://www.youtube.com/watch?v=HJC_y-FP0FU


