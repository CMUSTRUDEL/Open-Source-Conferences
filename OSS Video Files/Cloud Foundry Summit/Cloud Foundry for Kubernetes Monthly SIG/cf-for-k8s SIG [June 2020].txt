Title: cf-for-k8s SIG [June 2020]
Publication date: 2020-06-23
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:00:00,319 --> 00:00:07,400
well here we go so efficient Thanks

00:00:04,560 --> 00:00:09,510
so official welcome to this week's

00:00:07,400 --> 00:00:11,910
foundry who when it is especially

00:00:09,510 --> 00:00:14,929
interested call I think this one has a

00:00:11,910 --> 00:00:17,279
bit of a history attached to it you

00:00:14,929 --> 00:00:19,770
might have realized that we had to

00:00:17,279 --> 00:00:22,710
cancel actually the last two calls and

00:00:19,770 --> 00:00:25,680
this was I would say partially due to

00:00:22,710 --> 00:00:28,080
question round like what did people

00:00:25,680 --> 00:00:30,599
actually vote for and they said they

00:00:28,080 --> 00:00:32,579
wanted to get an ireenie update that was

00:00:30,599 --> 00:00:36,540
one part of the question and then I

00:00:32,579 --> 00:00:38,879
think that kind of went in a couple of

00:00:36,540 --> 00:00:40,950
directions so I think we ultimately

00:00:38,879 --> 00:00:43,829
settled on people want to hear about

00:00:40,950 --> 00:00:46,140
ireenie internals but they also might

00:00:43,829 --> 00:00:49,710
want to hear about how arena is being

00:00:46,140 --> 00:00:52,260
used in both keeps EF as well as CF for

00:00:49,710 --> 00:00:56,550
K so I think like for this call as well

00:00:52,260 --> 00:01:00,000
as DD upcoming two calls to be verified

00:00:56,550 --> 00:01:02,699
the DD upcoming two calls but but like

00:01:00,000 --> 00:01:05,850
the plan is to essentially start with

00:01:02,699 --> 00:01:08,220
ireenie itself which thankfully house

00:01:05,850 --> 00:01:10,890
has a reach it to do and then for the

00:01:08,220 --> 00:01:13,740
next - I guess we'll look into getting

00:01:10,890 --> 00:01:17,040
an update for CF on on Kate's on

00:01:13,740 --> 00:01:19,950
contacting in contact with SCI on that

00:01:17,040 --> 00:01:22,500
one and then from from the ireenie sorry

00:01:19,950 --> 00:01:24,840
form from the cube CF team we have two

00:01:22,500 --> 00:01:28,320
colleagues from from suzer who are going

00:01:24,840 --> 00:01:30,180
to talk about specific topics in the

00:01:28,320 --> 00:01:34,530
area of cube CF which probably also

00:01:30,180 --> 00:01:38,729
makes sense in like the brother CF phone

00:01:34,530 --> 00:01:40,500
on kubernetes space so that being the

00:01:38,729 --> 00:01:43,049
intro I would actually hand over to

00:01:40,500 --> 00:01:46,530
couch okay okay - as I said talk about

00:01:43,049 --> 00:01:49,560
like I really specific so I think people

00:01:46,530 --> 00:01:52,170
in in the poll basically says they also

00:01:49,560 --> 00:01:55,259
want to hear like what what the ireenie

00:01:52,170 --> 00:01:57,689
team has has learned during by building

00:01:55,259 --> 00:01:59,460
ireenie itself cetera cetera but I

00:01:57,689 --> 00:02:03,409
understood you know again is also going

00:01:59,460 --> 00:02:06,509
to do a demo so over to you Gary okay

00:02:03,409 --> 00:02:08,369
yeah thank you first of all can anyone

00:02:06,509 --> 00:02:11,250
hear me good because I always have

00:02:08,369 --> 00:02:15,030
trouble with this at Cisco

00:02:11,250 --> 00:02:16,530
Thanks burnt yeah yes I don't have any

00:02:15,030 --> 00:02:19,079
slides prepared I'm just gonna share my

00:02:16,530 --> 00:02:21,060
screen do a quick demo and guess and I

00:02:19,079 --> 00:02:23,010
guess who just have a like you're in a

00:02:21,060 --> 00:02:25,170
session afterwards I'll also talk about

00:02:23,010 --> 00:02:27,390
our current work like interesting things

00:02:25,170 --> 00:02:31,610
that we're doing at the moment and

00:02:27,390 --> 00:02:34,440
things that we'll like we hope come soon

00:02:31,610 --> 00:02:39,379
so I hope it's interesting for everyone

00:02:34,440 --> 00:02:39,379
let me try and share my console

00:02:43,810 --> 00:02:49,600
cheering yes it

00:02:50,680 --> 00:02:58,490
alright ok so I don't know like how

00:02:55,910 --> 00:03:00,920
familiar with irony Harini is the next

00:02:58,490 --> 00:03:04,310
generation runtime for call foundry to

00:03:00,920 --> 00:03:07,760
like basically our goal is to be a

00:03:04,310 --> 00:03:10,640
feature parity with diego but to run on

00:03:07,760 --> 00:03:13,250
two varieties so basically it's fairly

00:03:10,640 --> 00:03:15,650
similar the gwelf controller is our main

00:03:13,250 --> 00:03:18,470
consumer in the CF world it's going to

00:03:15,650 --> 00:03:21,500
like whenever someone does a CF push the

00:03:18,470 --> 00:03:24,170
gold controller will go out to arena via

00:03:21,500 --> 00:03:27,020
HTTP and then arena will make the app

00:03:24,170 --> 00:03:32,170
run on Cuban ranges and I'm going to

00:03:27,020 --> 00:03:36,050
demo that right now I have targeted a

00:03:32,170 --> 00:03:39,620
cluster here it's okay now one of our

00:03:36,050 --> 00:03:45,459
def clusters with a fairly like latest

00:03:39,620 --> 00:03:50,900
and greatest arena version and this is

00:03:45,459 --> 00:03:52,790
deployed a little deployment with CF or

00:03:50,900 --> 00:03:55,130
gates like we we've been working with

00:03:52,790 --> 00:03:57,260
SEF for a long time we've recently moved

00:03:55,130 --> 00:04:00,590
to share four gates in our pipelines and

00:03:57,260 --> 00:04:04,160
we've also tried cube CF this specific

00:04:00,590 --> 00:04:07,160
one is running on cfirkus

00:04:04,160 --> 00:04:09,620
gates as you can see from the like

00:04:07,160 --> 00:04:10,930
layout of the cluster we have the CF

00:04:09,620 --> 00:04:14,239
system namespace

00:04:10,930 --> 00:04:16,940
we're like Iranian the whole of cloud

00:04:14,239 --> 00:04:21,709
foundry lives we have the CF work vaults

00:04:16,940 --> 00:04:26,050
in the staging so split this come over

00:04:21,709 --> 00:04:29,560
here a little bit and do some watch

00:04:26,050 --> 00:04:31,700
commands I'm going to be watching

00:04:29,560 --> 00:04:35,780
specific namespaces like most

00:04:31,700 --> 00:04:40,910
importantly CF workloads where Irina is

00:04:35,780 --> 00:04:42,770
going to be shading the ports and like

00:04:40,910 --> 00:04:48,590
stateful sense equivalent subjects

00:04:42,770 --> 00:04:55,400
backing the application and also I'm

00:04:48,590 --> 00:04:59,330
going to watch the staging pane space

00:04:55,400 --> 00:05:01,210
like on a CF we were also responsible

00:04:59,330 --> 00:05:03,830
the arena team was also responsible for

00:05:01,210 --> 00:05:05,930
spinning up the staging job

00:05:03,830 --> 00:05:10,280
but on several gates were using capac

00:05:05,930 --> 00:05:17,930
but anyway let's watch the thing in

00:05:10,280 --> 00:05:20,960
progress see a for Claud staging watch

00:05:17,930 --> 00:05:24,470
for all resources I'm going to push an

00:05:20,960 --> 00:05:26,300
app that's called catnip this is one of

00:05:24,470 --> 00:05:28,340
the few that a tree is working with

00:05:26,300 --> 00:05:32,240
several gates at this stage because I

00:05:28,340 --> 00:05:33,830
think Ruby is still not done in the gate

00:05:32,240 --> 00:05:36,199
back like they don't have a proper who

00:05:33,830 --> 00:05:40,539
built back so most of our apps not

00:05:36,199 --> 00:05:40,539
really working but this one will do and

00:05:40,930 --> 00:05:52,210
let's push catnip and this should and it

00:05:50,300 --> 00:05:55,099
first creates a service this is not

00:05:52,210 --> 00:05:58,069
something that every need as a but I

00:05:55,099 --> 00:06:01,370
think that working does that but here in

00:05:58,069 --> 00:06:06,530
the lower right you can see that get

00:06:01,370 --> 00:06:07,819
back started a job I bought actually I

00:06:06,530 --> 00:06:12,080
don't know if it's keeper and his job

00:06:07,819 --> 00:06:14,960
this is not responsibility of fiorini so

00:06:12,080 --> 00:06:17,529
we can see it's running it's in it

00:06:14,960 --> 00:06:22,819
containers it's staging the app and

00:06:17,529 --> 00:06:24,949
after after it finishes will we should

00:06:22,819 --> 00:06:26,779
see some objects being created in the

00:06:24,949 --> 00:06:28,940
upper right which is pretty much the

00:06:26,779 --> 00:06:33,440
safe workloads namespace that Irene is

00:06:28,940 --> 00:06:35,719
responsible for so currently Irina can

00:06:33,440 --> 00:06:37,879
shade you workloads primarily in one

00:06:35,719 --> 00:06:40,639
namespace which is the safe for closed

00:06:37,879 --> 00:06:43,460
namespace they renamed space in SEF the

00:06:40,639 --> 00:06:46,029
namespace were apps run all apps from

00:06:43,460 --> 00:06:52,240
all spaces running a single kubernetes

00:06:46,029 --> 00:06:55,759
namespace but we plan these two changes

00:06:52,240 --> 00:06:58,789
as you see in a minute so yeah staging

00:06:55,759 --> 00:07:01,370
is now complete and you can see that it

00:06:58,789 --> 00:07:03,110
really created a stateful set which is

00:07:01,370 --> 00:07:06,740
the kubernetes object backing the app

00:07:03,110 --> 00:07:10,819
and this state was it only in its turn

00:07:06,740 --> 00:07:11,919
created the board which is the one up

00:07:10,819 --> 00:07:17,080
there

00:07:11,919 --> 00:07:22,689
over here this is our app so I can now

00:07:17,080 --> 00:07:25,599
go ahead and scale the app so let's say

00:07:22,689 --> 00:07:26,949
three instances which will again the

00:07:25,599 --> 00:07:30,789
Gaul controller will send an update

00:07:26,949 --> 00:07:35,819
request to Rainey HTTP and it really is

00:07:30,789 --> 00:07:35,819
simply going to update it stateful set

00:07:39,419 --> 00:07:50,050
and it should something didn't age

00:07:45,639 --> 00:07:52,090
didn't change so yeah I had like I was

00:07:50,050 --> 00:07:54,419
in a scroll view so I had paused the

00:07:52,090 --> 00:07:57,789
watch and but yeah you can see like we

00:07:54,419 --> 00:08:00,460
we basically modify the replica count

00:07:57,789 --> 00:08:03,939
and the stage was set and it creates

00:08:00,460 --> 00:08:07,199
three ports what's interesting like I

00:08:03,939 --> 00:08:13,210
can do this again like back to one and

00:08:07,199 --> 00:08:15,219
it's going to set the replica down back

00:08:13,210 --> 00:08:17,529
to two one and it's going to terminate

00:08:15,219 --> 00:08:19,509
two of those stateful sets what's

00:08:17,529 --> 00:08:23,469
interesting about our objects is that

00:08:19,509 --> 00:08:36,550
they have some annotations with like

00:08:23,469 --> 00:08:46,029
application data can quickly show you so

00:08:36,550 --> 00:08:54,820
let's let's look at the stateful set can

00:08:46,029 --> 00:08:56,380
tip something less so you can see it has

00:08:54,820 --> 00:08:58,180
some called foundry data like an

00:08:56,380 --> 00:09:04,949
application ID application name that's

00:08:58,180 --> 00:09:06,960
how we know it's catnip and it has

00:09:04,949 --> 00:09:10,099
replicas counts

00:09:06,960 --> 00:09:10,099
[Music]

00:09:16,470 --> 00:09:23,800
biggest one that's what we update when

00:09:19,120 --> 00:09:26,430
we scale so this is this is pretty much

00:09:23,800 --> 00:09:29,170
like the basics of what really does

00:09:26,430 --> 00:09:30,970
something we're currently doing is also

00:09:29,170 --> 00:09:33,280
like this was the recreation of eller

00:09:30,970 --> 00:09:35,590
piece you might ask what about tasks

00:09:33,280 --> 00:09:37,990
that's something we've been implementing

00:09:35,590 --> 00:09:40,900
for a while it's almost done but I think

00:09:37,990 --> 00:09:43,120
we're waiting on a copy release like

00:09:40,900 --> 00:09:45,340
copy shoot releasing xkp release and it

00:09:43,120 --> 00:09:48,370
will be usable for now it's only

00:09:45,340 --> 00:09:51,690
implementing ireenie I have watched this

00:09:48,370 --> 00:09:54,610
cluster and I'll try to show you what a

00:09:51,690 --> 00:09:56,500
how we run a task because it's you're

00:09:54,610 --> 00:09:58,630
going to see here on the right it will

00:09:56,500 --> 00:10:01,300
result in not you know stateful set but

00:09:58,630 --> 00:10:04,330
in a cube orientation job which is the

00:10:01,300 --> 00:10:07,300
cube object for a one-off so if we try

00:10:04,330 --> 00:10:09,640
to run a task for the oddball catnip

00:10:07,300 --> 00:10:11,740
I'll just run our sleep so that it

00:10:09,640 --> 00:10:14,050
lingers around so we can see it because

00:10:11,740 --> 00:10:18,280
there's no like so far this is the only

00:10:14,050 --> 00:10:20,980
way that we can see then you can see we

00:10:18,280 --> 00:10:25,150
have a job here and it results in

00:10:20,980 --> 00:10:26,830
another pod so it's pretty similar to

00:10:25,150 --> 00:10:30,820
the airflow but we're just creating

00:10:26,830 --> 00:10:33,250
another another object there is also an

00:10:30,820 --> 00:10:35,020
updated with all that like it you can

00:10:33,250 --> 00:10:39,840
correlate between these pods and

00:10:35,020 --> 00:10:46,320
stateful sets and jobs because they have

00:10:39,840 --> 00:10:54,010
the CF specific annotations let's see

00:10:46,320 --> 00:10:57,210
were quotes this is a job the name

00:10:54,010 --> 00:10:57,210
mission think

00:11:02,020 --> 00:11:13,720
it's pretty similar it has the cloud

00:11:08,560 --> 00:11:17,910
foundry upgrade version name all these

00:11:13,720 --> 00:11:20,830
things and here you can see that it's is

00:11:17,910 --> 00:11:25,360
defined the container with a sleep in it

00:11:20,830 --> 00:11:27,459
that's what we requested so this is this

00:11:25,360 --> 00:11:30,130
is actually pretty much what I really

00:11:27,459 --> 00:11:34,450
like is is currently an abstraction

00:11:30,130 --> 00:11:36,339
layer that more or less more or less

00:11:34,450 --> 00:11:40,260
Heights the kubernetes world from coffee

00:11:36,339 --> 00:11:43,450
although that's also about change so

00:11:40,260 --> 00:11:47,860
just take a look at my have some notes

00:11:43,450 --> 00:11:51,120
around here so yeah we're currently

00:11:47,860 --> 00:11:53,500
working on on v3 tasks which are

00:11:51,120 --> 00:11:55,390
finished in the range light almost

00:11:53,500 --> 00:11:59,740
completely but we have to wait for for

00:11:55,390 --> 00:12:01,270
recovery release I said earlier that it

00:11:59,740 --> 00:12:03,970
really is operating in a single

00:12:01,270 --> 00:12:05,709
namespace the rename space with chef

00:12:03,970 --> 00:12:07,600
workloads namespace on the cluster

00:12:05,709 --> 00:12:11,950
that's about to change

00:12:07,600 --> 00:12:14,860
we are about to introduce the capability

00:12:11,950 --> 00:12:15,580
of like CC should be able to specify a

00:12:14,860 --> 00:12:19,330
namespace

00:12:15,580 --> 00:12:22,680
where where we will spin up the jobs and

00:12:19,330 --> 00:12:27,070
stateful sets we're doing this because

00:12:22,680 --> 00:12:28,900
this will let CC and the system like the

00:12:27,070 --> 00:12:31,180
higher-level system of called foundry to

00:12:28,900 --> 00:12:32,709
define what apps should run where

00:12:31,180 --> 00:12:34,810
because currently we might have

00:12:32,709 --> 00:12:36,580
different orgs and spaces but in the end

00:12:34,810 --> 00:12:40,420
all the apps are going to run in the

00:12:36,580 --> 00:12:43,089
same kubernetes namespace and by letting

00:12:40,420 --> 00:12:45,400
people run their workloads in their main

00:12:43,089 --> 00:12:48,520
space is provided with them we can use

00:12:45,400 --> 00:12:51,730
we can better isolate I guess we can

00:12:48,520 --> 00:12:56,410
better isolate the apps brink on gates

00:12:51,730 --> 00:12:59,200
and another another nice thing that

00:12:56,410 --> 00:13:02,440
we're working on is a C or D API because

00:12:59,200 --> 00:13:06,520
currently arena is exposing a REST API

00:13:02,440 --> 00:13:08,829
just simple HTTP server much like Diego

00:13:06,520 --> 00:13:10,600
do I think it was RPC but it's similar

00:13:08,829 --> 00:13:13,089
and then Gulf controller has

00:13:10,600 --> 00:13:15,880
point-to-point communication with with

00:13:13,089 --> 00:13:19,080
irony sending case T requests we want

00:13:15,880 --> 00:13:24,640
expose our own CDs which is pretty cool

00:13:19,080 --> 00:13:27,910
because then we'll have this like we'll

00:13:24,640 --> 00:13:30,340
have more not point to point but message

00:13:27,910 --> 00:13:34,090
like architecture where we define two

00:13:30,340 --> 00:13:37,300
major lr2 major series that will be the

00:13:34,090 --> 00:13:39,400
LLP and the task and by like simply

00:13:37,300 --> 00:13:41,740
creating a young object on cube you can

00:13:39,400 --> 00:13:44,200
tell you need to materialize that in

00:13:41,740 --> 00:13:46,810
this respect is main space and I can

00:13:44,200 --> 00:13:53,020
actually show this to you as well I have

00:13:46,810 --> 00:13:55,450
prepared some like we have already

00:13:53,020 --> 00:13:58,420
partially implemented the one of our

00:13:55,450 --> 00:14:03,370
series the lrpc Rd which you can tell if

00:13:58,420 --> 00:14:06,280
you go on the Gloucester and do I get

00:14:03,370 --> 00:14:09,250
sear these there should be an LLP door

00:14:06,280 --> 00:14:15,550
there a need or something this is our

00:14:09,250 --> 00:14:26,380
eller this our CID we can can try to

00:14:15,550 --> 00:14:28,780
show its schema right one so this object

00:14:26,380 --> 00:14:31,570
is pretty much one to one mapping

00:14:28,780 --> 00:14:33,910
roughly want one mapping of our current

00:14:31,570 --> 00:14:37,270
JSON payload that the call control is

00:14:33,910 --> 00:14:42,030
sending to us it has the cop quit the

00:14:37,270 --> 00:14:48,310
app name resource specifics like disks

00:14:42,030 --> 00:14:50,560
routes and so on we we have the two life

00:14:48,310 --> 00:14:53,830
cycles which is like built back in

00:14:50,560 --> 00:14:56,860
docker life cycles and the most

00:14:53,830 --> 00:15:01,380
interesting part of the resource is its

00:14:56,860 --> 00:15:06,090
status where we will be keeping

00:15:01,380 --> 00:15:08,770
information about all its instances and

00:15:06,090 --> 00:15:13,050
something interesting like when moving

00:15:08,770 --> 00:15:15,430
to sear these will have to rethink some

00:15:13,050 --> 00:15:16,930
some parts of the communication because

00:15:15,430 --> 00:15:20,470
the with the golf controller because

00:15:16,930 --> 00:15:22,720
currently when we are creating a task it

00:15:20,470 --> 00:15:24,250
while controller sends a put request we

00:15:22,720 --> 00:15:26,050
create the task and then when the task

00:15:24,250 --> 00:15:28,510
is done we call back to the quad

00:15:26,050 --> 00:15:29,740
controller this is not going to be

00:15:28,510 --> 00:15:32,200
possible with with

00:15:29,740 --> 00:15:34,750
you like that rather than that this 12

00:15:32,200 --> 00:15:38,740
controller will have to create that CLG

00:15:34,750 --> 00:15:41,560
and watch its status for example it

00:15:38,740 --> 00:15:44,320
might be bending running failed and this

00:15:41,560 --> 00:15:47,860
way we want we want to reach back to the

00:15:44,320 --> 00:15:50,380
CC anymore say at this task filter this

00:15:47,860 --> 00:15:52,030
lrp crash but the 12 controller will

00:15:50,380 --> 00:15:52,750
have a convergence loop or something

00:15:52,030 --> 00:15:55,420
like that

00:15:52,750 --> 00:15:57,270
you'll be watching for our resource and

00:15:55,420 --> 00:15:58,450
we think this will be a way more

00:15:57,270 --> 00:16:01,570
kubernetes

00:15:58,450 --> 00:16:05,530
native way of doing things and way less

00:16:01,570 --> 00:16:09,100
astonishing fool to the community and I

00:16:05,530 --> 00:16:10,990
think this was enough words I'm sure you

00:16:09,100 --> 00:16:14,980
have questions afterwards

00:16:10,990 --> 00:16:17,890
so without further ado let's try and do

00:16:14,980 --> 00:16:21,970
a very basic demo of creating how do we

00:16:17,890 --> 00:16:24,130
push it up with CDs first of all when

00:16:21,970 --> 00:16:26,770
when we're creating when we're grading

00:16:24,130 --> 00:16:29,470
can up with the surgery we were grading

00:16:26,770 --> 00:16:32,920
the CLD the LRP in some specific name

00:16:29,470 --> 00:16:34,630
space and this name space it can be the

00:16:32,920 --> 00:16:36,700
CF or close name space and this is going

00:16:34,630 --> 00:16:38,320
to work but it can be any other name

00:16:36,700 --> 00:16:40,930
space and this is the other thing that I

00:16:38,320 --> 00:16:43,870
mentioned we are trying to give our

00:16:40,930 --> 00:16:47,230
users a way of specifying what's their

00:16:43,870 --> 00:16:50,920
name space but this comes with a bit of

00:16:47,230 --> 00:16:53,860
cost currently the safe worth of the

00:16:50,920 --> 00:16:57,010
space is generated by arena C on chart

00:16:53,860 --> 00:16:59,290
it is there is a service account in

00:16:57,010 --> 00:17:01,600
there there is a role binding both

00:16:59,290 --> 00:17:04,380
security policies created all these

00:17:01,600 --> 00:17:07,030
things are going to have to be done by D

00:17:04,380 --> 00:17:11,350
by the user now because this is their

00:17:07,030 --> 00:17:13,960
namespace so I have prepared a I have

00:17:11,350 --> 00:17:16,480
prepared a llamo with some boilerplate

00:17:13,960 --> 00:17:18,940
like I'm creating a demo namespace I'm

00:17:16,480 --> 00:17:21,490
creating a service account and binding

00:17:18,940 --> 00:17:26,200
it to both security policies pretty

00:17:21,490 --> 00:17:31,030
standard stuff it's letting me run as

00:17:26,200 --> 00:17:32,920
any user use some new IDs and so on so

00:17:31,030 --> 00:17:36,460
this is going to have to be provided by

00:17:32,920 --> 00:17:39,060
a user so let's apply let's keep going

00:17:36,460 --> 00:17:39,060
to apply that

00:17:40,230 --> 00:17:50,529
okay and there we have it our demo

00:17:46,960 --> 00:17:53,260
namespace with all the things in there

00:17:50,529 --> 00:17:55,000
that we're going to need and then we

00:17:53,260 --> 00:18:01,240
have a lllp

00:17:55,000 --> 00:18:03,789
llamo which this is a simple tiny little

00:18:01,240 --> 00:18:06,700
lrp most importantly you can see there's

00:18:03,789 --> 00:18:10,299
going to use a docker lifecycle to run a

00:18:06,700 --> 00:18:12,940
docker image this should also be able to

00:18:10,299 --> 00:18:16,690
work with with a standard like built

00:18:12,940 --> 00:18:19,330
back a life cycle that we that we have

00:18:16,690 --> 00:18:22,090
like we are setting all the good

00:18:19,330 --> 00:18:24,570
versions these are going to be set by

00:18:22,090 --> 00:18:28,000
the ground controller in reality and

00:18:24,570 --> 00:18:32,140
yeah pretty basic most importantly

00:18:28,000 --> 00:18:35,919
number of instances is to know not a lot

00:18:32,140 --> 00:18:37,870
of cool stuff in there yet but let's try

00:18:35,919 --> 00:18:40,450
to apply it and see what's going on let

00:18:37,870 --> 00:18:43,510
me I'd like to need the workloads

00:18:40,450 --> 00:18:48,090
anymore because we don't have we don't

00:18:43,510 --> 00:18:54,070
stage docker images more basically so

00:18:48,090 --> 00:18:55,659
yeah that's to apply but it's important

00:18:54,070 --> 00:18:59,850
we should now apply in the demo

00:18:55,659 --> 00:19:05,159
namespace so keep crypto namespace demo

00:18:59,850 --> 00:19:05,159
apply file LFE

00:19:10,860 --> 00:19:21,920
you don't watch the demonym place on the

00:19:13,740 --> 00:19:21,920
right yeah you're right now just thanks

00:19:25,100 --> 00:19:30,450
and we have quite similarly like quite

00:19:28,350 --> 00:19:34,890
similar to the CF push we have a

00:19:30,450 --> 00:19:36,600
stateful circle its respective to two

00:19:34,890 --> 00:19:38,850
ports unfortunately does the only thing

00:19:36,600 --> 00:19:41,730
I can show you I mean if we edit the

00:19:38,850 --> 00:19:44,430
thing I don't think I don't think we've

00:19:41,730 --> 00:19:45,620
implemented scaling down yet if I did

00:19:44,430 --> 00:19:48,360
there appear nothing will happen

00:19:45,620 --> 00:19:53,400
basically but this is this is how we

00:19:48,360 --> 00:19:56,480
envisioned to to be able to run apps in

00:19:53,400 --> 00:20:00,330
the future I have also prepared a

00:19:56,480 --> 00:20:02,610
service because I have now bypass the

00:20:00,330 --> 00:20:05,340
cloud controller completely which means

00:20:02,610 --> 00:20:08,250
that no one knows about my app there is

00:20:05,340 --> 00:20:12,990
no service no root created for my app so

00:20:08,250 --> 00:20:15,990
I can again in the demo namespace apply

00:20:12,990 --> 00:20:22,700
a small service that's going to make it

00:20:15,990 --> 00:20:22,700
accessible on the internal DNS it's

00:20:24,500 --> 00:20:33,380
exposing the 8080 port on 8080 and it's

00:20:30,270 --> 00:20:37,200
basically bounce to my app via these

00:20:33,380 --> 00:20:40,650
specific quit labels unfortunately this

00:20:37,200 --> 00:20:45,180
is only internal DNA so if I want to hit

00:20:40,650 --> 00:20:47,490
my my my app I need to work on to like

00:20:45,180 --> 00:20:49,350
some port because this is not it's not

00:20:47,490 --> 00:20:52,290
visible outside I don't have an ingress

00:20:49,350 --> 00:21:00,210
on it or anything but you can try like

00:20:52,290 --> 00:21:03,510
in the CF system should be able to go on

00:21:00,210 --> 00:21:05,160
to the support like doesn't really

00:21:03,510 --> 00:21:07,610
matter which one I think this one has

00:21:05,160 --> 00:21:07,610
rush

00:21:15,700 --> 00:21:24,460
put the name of day in a solar cell this

00:21:21,430 --> 00:21:27,250
is the command I need to exec this is

00:21:24,460 --> 00:21:30,270
the you know that I've exposed anything

00:21:27,250 --> 00:21:35,650
I'm not Dora this is one of our desktops

00:21:30,270 --> 00:21:39,010
and yeah this is this is prema

00:21:35,650 --> 00:21:41,440
I can show you our series it might be

00:21:39,010 --> 00:21:43,980
interesting for you I might send you

00:21:41,440 --> 00:21:51,060
those links there is a Google Doc

00:21:43,980 --> 00:21:51,060
talking about some design aspects of our

00:21:51,090 --> 00:22:02,220
series I might need to copy this so this

00:21:58,900 --> 00:22:06,910
doc contains more information about

00:22:02,220 --> 00:22:10,240
series in irony and how we how we intend

00:22:06,910 --> 00:22:14,740
to like to implement all the things that

00:22:10,240 --> 00:22:18,490
we're doing right now like matrix was

00:22:14,740 --> 00:22:23,410
ever going to do about callbacks and so

00:22:18,490 --> 00:22:33,940
on I've got some burning questions to

00:22:23,410 --> 00:22:39,670
ask so let's just let's just go to the

00:22:33,940 --> 00:22:41,710
cue and I'll go with a simple one how

00:22:39,670 --> 00:22:44,410
come you all picked underscores versus

00:22:41,710 --> 00:22:51,310
dashes and the labels and annotations is

00:22:44,410 --> 00:22:53,650
there plan to change that like the app

00:22:51,310 --> 00:22:59,110
and the score gooood versus like app -

00:22:53,650 --> 00:23:01,720
good probably historical I haven't heard

00:22:59,110 --> 00:23:04,860
of plans to change that but I guess if

00:23:01,720 --> 00:23:13,990
that's a I guess open issue that's

00:23:04,860 --> 00:23:16,300
something probably easily do the the I

00:23:13,990 --> 00:23:20,020
guess probably the I already forgot two

00:23:16,300 --> 00:23:23,310
other questions I was going to ask but

00:23:20,020 --> 00:23:25,960
the last question I had on my mind was

00:23:23,310 --> 00:23:30,130
kind of it was a bigger picture of maybe

00:23:25,960 --> 00:23:33,520
in future Cappy being driven by some of

00:23:30,130 --> 00:23:35,020
this year Dee's exposed to the user does

00:23:33,520 --> 00:23:37,750
it actually make sense to keep that

00:23:35,020 --> 00:23:41,380
separation between Cappy and Iranians

00:23:37,750 --> 00:23:44,890
sounds like if Irina is planning to go

00:23:41,380 --> 00:23:47,710
into the CR deal and then you know

00:23:44,890 --> 00:23:49,160
there's a factory day the APF boundaries

00:23:47,710 --> 00:23:51,860
kubernetes

00:23:49,160 --> 00:23:53,660
and so it's not really pluggable anymore

00:23:51,860 --> 00:23:55,130
right it's like it's not as pluggable as

00:23:53,660 --> 00:23:57,650
like the G I go back and right because

00:23:55,130 --> 00:24:00,010
Diego isn't talking via kubernetes yeah

00:23:57,650 --> 00:24:01,970
right so what is the you know given that

00:24:00,010 --> 00:24:04,100
you know maybe this is uneducated

00:24:01,970 --> 00:24:06,250
perspective but from what I understand

00:24:04,100 --> 00:24:09,350
adeney is just spinning up stateful sets

00:24:06,250 --> 00:24:14,780
based on you know the record that cappy

00:24:09,350 --> 00:24:16,520
provides it is there is there actually

00:24:14,780 --> 00:24:19,040
need to have this separation between

00:24:16,520 --> 00:24:20,840
Kathy and Union since Kathy will be

00:24:19,040 --> 00:24:23,420
watching kubernetes api we might as well

00:24:20,840 --> 00:24:26,960
just have kappa credo stateful cells

00:24:23,420 --> 00:24:29,930
directly and you know save the hop yeah

00:24:26,960 --> 00:24:33,050
we've had some discussions like this you

00:24:29,930 --> 00:24:34,760
know like you're right we have this

00:24:33,050 --> 00:24:36,470
point that the world is going flat a

00:24:34,760 --> 00:24:38,870
little bit with kubernetes because from

00:24:36,470 --> 00:24:41,150
this multi tier architecture everything

00:24:38,870 --> 00:24:43,580
pretty much reaches down to the to the

00:24:41,150 --> 00:24:46,910
cube level right it's like a message bus

00:24:43,580 --> 00:24:50,360
where you put seed a series again and of

00:24:46,910 --> 00:24:55,130
like messages so it might as well end up

00:24:50,360 --> 00:24:57,770
being that but I guess it's probably too

00:24:55,130 --> 00:25:04,810
early to say and I guess we'll probably

00:24:57,770 --> 00:25:09,110
see because Kathy has other things to do

00:25:04,810 --> 00:25:12,650
like I don't like keeping the model and

00:25:09,110 --> 00:25:15,320
creating the initiating staging and

00:25:12,650 --> 00:25:18,860
orchestrating all that things I'm not

00:25:15,320 --> 00:25:20,360
sure if combining everything like if if

00:25:18,860 --> 00:25:23,120
copy should be like just one component

00:25:20,360 --> 00:25:24,950
that does almost everything but if you

00:25:23,120 --> 00:25:26,660
have to end up creating those theories

00:25:24,950 --> 00:25:30,110
anywhere right and I'm guessing there

00:25:26,660 --> 00:25:33,230
isn't really you know unless unless we

00:25:30,110 --> 00:25:36,650
have some future plans to make the app

00:25:33,230 --> 00:25:38,680
make up the more complex beyond like a

00:25:36,650 --> 00:25:42,590
stateful Sarason or maybe a deployment

00:25:38,680 --> 00:25:45,290
right it seems like a pretty heavy you

00:25:42,590 --> 00:25:47,480
know it was a necessary abstraction when

00:25:45,290 --> 00:25:49,400
we're trying to let's say make it work

00:25:47,480 --> 00:25:51,080
for kubernetes and non kubernetes right

00:25:49,400 --> 00:25:53,360
but if we are going into the kubernetes

00:25:51,080 --> 00:26:00,600
api land then feels like a pretty heavy

00:25:53,360 --> 00:26:04,770
abstraction to have I mean sorry

00:26:00,600 --> 00:26:07,200
so even if you implement CDs at the cafe

00:26:04,770 --> 00:26:10,110
level you'd still wouldn't implement

00:26:07,200 --> 00:26:13,320
them in Ruby right so you might as well

00:26:10,110 --> 00:26:17,000
just go every kneecap if that's what you

00:26:13,320 --> 00:26:20,100
need right well Cappy holds a lot of

00:26:17,000 --> 00:26:21,810
other stops that is doing right I know I

00:26:20,100 --> 00:26:23,910
don't I don't imagine it going away

00:26:21,810 --> 00:26:28,710
anytime too soon right and so it's

00:26:23,910 --> 00:26:30,330
probably unreasonable to expect that you

00:26:28,710 --> 00:26:32,850
know a lot of the logic that it contains

00:26:30,330 --> 00:26:36,060
will be shifted into it in your right so

00:26:32,850 --> 00:26:38,790
I imagine that whatever it is much

00:26:36,060 --> 00:26:41,730
easier to pile into cabby I I could

00:26:38,790 --> 00:26:43,440
could imagine that like I think what

00:26:41,730 --> 00:26:47,760
you're referring to the dmitriy is that

00:26:43,440 --> 00:26:50,310
like copy letting the user create the

00:26:47,760 --> 00:26:52,230
CRD and then just create another CRD

00:26:50,310 --> 00:26:54,720
that somebody else picks up and that

00:26:52,230 --> 00:26:57,510
creates a community resource or another

00:26:54,720 --> 00:26:59,580
CRD if that is the point that i could

00:26:57,510 --> 00:27:03,390
imagine a world word like copy creates

00:26:59,580 --> 00:27:06,240
an app C or D and there is networking

00:27:03,390 --> 00:27:08,220
picking picking it up to configure the

00:27:06,240 --> 00:27:10,560
network for that app and report as a

00:27:08,220 --> 00:27:11,330
condition when networking is set up that

00:27:10,560 --> 00:27:14,850
ireenie

00:27:11,330 --> 00:27:17,310
uses that same CID picks it up starts

00:27:14,850 --> 00:27:20,610
the stateful sad reports the status and

00:27:17,310 --> 00:27:21,960
copy does other things too I could have

00:27:20,610 --> 00:27:24,600
managed something like that instead of

00:27:21,960 --> 00:27:27,540
having like a whole bunch of C or DS

00:27:24,600 --> 00:27:30,630
like at least one / CF component yeah

00:27:27,540 --> 00:27:33,300
because if Kathy eventually you know

00:27:30,630 --> 00:27:35,730
enables like if it adds the first Class

00:27:33,300 --> 00:27:37,230
C Rd user experience that will be like

00:27:35,730 --> 00:27:39,990
let's say called app or something like

00:27:37,230 --> 00:27:43,110
that right yeah and at that point you

00:27:39,990 --> 00:27:45,270
know how many you know how many CR IDs

00:27:43,110 --> 00:27:47,100
that that actually need to need to

00:27:45,270 --> 00:27:49,320
involve right it depends I could I could

00:27:47,100 --> 00:27:53,580
imagine that it's just one that it's

00:27:49,320 --> 00:27:55,230
just one for that one and that other

00:27:53,580 --> 00:27:58,560
components just pick it up report

00:27:55,230 --> 00:28:00,600
conditions if they are ready but that

00:27:58,560 --> 00:28:02,880
still the copy team doesn't want to own

00:28:00,600 --> 00:28:06,930
a decision like are we using stateful

00:28:02,880 --> 00:28:08,820
sets or deployments or is there is some

00:28:06,930 --> 00:28:10,800
justification for even a middle ground

00:28:08,820 --> 00:28:12,300
because we don't want stateful sets but

00:28:10,800 --> 00:28:14,310
still need something from that

00:28:12,300 --> 00:28:16,400
so all these decisions I'm not

00:28:14,310 --> 00:28:21,600
the copy team actually wants to own them

00:28:16,400 --> 00:28:25,710
so there are things like setting can

00:28:21,600 --> 00:28:27,840
virus like there is a contract in ViCAP

00:28:25,710 --> 00:28:30,270
you want to own that like I mean I'm

00:28:27,840 --> 00:28:32,970
pretty in line with what I just said

00:28:30,270 --> 00:28:35,580
like that's what I've been by saying

00:28:32,970 --> 00:28:37,380
message like architecture it might be

00:28:35,580 --> 00:28:39,090
just one searly although I think it

00:28:37,380 --> 00:28:41,420
might be more than one because it would

00:28:39,090 --> 00:28:45,570
be a hell of a synergy too many details

00:28:41,420 --> 00:28:49,050
why not like why imagine a world where

00:28:45,570 --> 00:28:52,140
CFC like race acidity then copy watches

00:28:49,050 --> 00:28:54,870
that CD does some other see all these

00:28:52,140 --> 00:28:57,270
chain reaction things that we're used to

00:28:54,870 --> 00:28:59,400
seeing in kubernetes like why do you

00:28:57,270 --> 00:29:02,220
need a stateful set when you can just

00:28:59,400 --> 00:29:04,590
create replica set I mean it's adding a

00:29:02,220 --> 00:29:07,860
tiny bit of functionality and that's I

00:29:04,590 --> 00:29:10,650
think that's similar what we're doing

00:29:07,860 --> 00:29:14,730
here with arena copy and so on I don't

00:29:10,650 --> 00:29:17,400
know what the final division of

00:29:14,730 --> 00:29:19,380
components will be but it's an organic

00:29:17,400 --> 00:29:20,820
system I mean something might get merged

00:29:19,380 --> 00:29:23,370
into something something might get

00:29:20,820 --> 00:29:26,280
written and get deleted but I guess it's

00:29:23,370 --> 00:29:28,560
like evolutionary kind of thing that

00:29:26,280 --> 00:29:30,330
there's by the way one thing I really

00:29:28,560 --> 00:29:32,790
wondered about why the two different

00:29:30,330 --> 00:29:36,450
life cycles like ireenie that the lrpc

00:29:32,790 --> 00:29:39,060
rd would not trigger actually Capek to

00:29:36,450 --> 00:29:41,880
stage a bill tag application to an image

00:29:39,060 --> 00:29:46,020
right that that's at least something

00:29:41,880 --> 00:29:49,380
word I'm not sure what the direction

00:29:46,020 --> 00:29:53,190
would be fortunately I'm not too

00:29:49,380 --> 00:29:57,210
familiar with kpac not sure if I can

00:29:53,190 --> 00:29:59,760
fake it now what I meant is like the

00:29:57,210 --> 00:30:02,340
irony CRD should that really be

00:29:59,760 --> 00:30:04,290
concerned about two different life cycle

00:30:02,340 --> 00:30:07,950
types and one of them would actually

00:30:04,290 --> 00:30:09,780
require to build a docker image I don't

00:30:07,950 --> 00:30:12,570
think so I think the docker think will

00:30:09,780 --> 00:30:14,550
become the only yeah okay I mean we're

00:30:12,570 --> 00:30:16,740
currently switching the defaults so

00:30:14,550 --> 00:30:20,100
let's say that dr. think will become the

00:30:16,740 --> 00:30:21,360
primary thing for example cube CF guys I

00:30:20,100 --> 00:30:23,220
think they're still using classic

00:30:21,360 --> 00:30:24,870
staging but I think they want to get rid

00:30:23,220 --> 00:30:27,710
of like bits and all that so I think

00:30:24,870 --> 00:30:31,529
this is the direction

00:30:27,710 --> 00:30:42,090
funny things I got so more question it's

00:30:31,529 --> 00:30:44,269
no one else jumps in good so that a

00:30:42,090 --> 00:30:47,999
question that I remember it was

00:30:44,269 --> 00:30:50,129
regarding tasks this may be a little bit

00:30:47,999 --> 00:30:52,049
down into implementation details but how

00:30:50,129 --> 00:30:53,850
you're planning to deal with the sidecar

00:30:52,049 --> 00:30:56,609
running for like anyway for example

00:30:53,850 --> 00:30:57,690
that's something that you know because

00:30:56,609 --> 00:31:00,539
there is there's going to be some

00:30:57,690 --> 00:31:03,539
lifecycle management to do rate to for

00:31:00,539 --> 00:31:05,340
example let the anyway know that it's

00:31:03,539 --> 00:31:10,169
time to shut down so that the job can

00:31:05,340 --> 00:31:13,460
exit currently we're currently have a

00:31:10,169 --> 00:31:17,070
spike in flight I think we're going to

00:31:13,460 --> 00:31:19,590
pretty much run another like we're going

00:31:17,070 --> 00:31:21,210
to read all the side cars the C's are

00:31:19,590 --> 00:31:26,179
going to pass a sidecar I'm just going

00:31:21,210 --> 00:31:28,649
to spin containers in the same put

00:31:26,179 --> 00:31:32,639
prayer right so how do you control the

00:31:28,649 --> 00:31:35,429
lifecycle of those containers so how do

00:31:32,639 --> 00:31:39,299
you how what what tells the end way that

00:31:35,429 --> 00:31:43,139
it's time to shut down or in other cases

00:31:39,299 --> 00:31:46,049
like what tells the the main task that

00:31:43,139 --> 00:31:49,379
the user is running to wait to not to

00:31:46,049 --> 00:31:51,659
start before the envoi is ready and you

00:31:49,379 --> 00:31:54,960
know is able to I don't know do the

00:31:51,659 --> 00:31:57,779
processing of the connections what what

00:31:54,960 --> 00:32:01,619
does it what does these things currently

00:31:57,779 --> 00:32:05,639
Diego well I think Diego is you know

00:32:01,619 --> 00:32:07,739
because the model in Diego is very how

00:32:05,639 --> 00:32:09,629
you call it specialized right now I'm

00:32:07,739 --> 00:32:12,419
imagining that they're doing all kinds

00:32:09,629 --> 00:32:14,399
of my orchestration themselves right so

00:32:12,419 --> 00:32:17,639
they spin up and boy wait for it to

00:32:14,399 --> 00:32:19,259
start over ever then run the thing then

00:32:17,639 --> 00:32:21,840
when the thing is done then it probably

00:32:19,259 --> 00:32:23,279
kills off my rate which is not

00:32:21,840 --> 00:32:25,200
necessarily something that you could be

00:32:23,279 --> 00:32:26,690
doing with the pod without trying to put

00:32:25,200 --> 00:32:31,470
like some some shims around

00:32:26,690 --> 00:32:34,559
user-provided tests alright if this is

00:32:31,470 --> 00:32:37,049
not something that you'll have I guess

00:32:34,559 --> 00:32:39,869
it might be a bit too early I think we

00:32:37,049 --> 00:32:41,270
might get back with that when we wrap up

00:32:39,869 --> 00:32:42,890
this bike

00:32:41,270 --> 00:32:44,419
yeah I'm definitely curious they're more

00:32:42,890 --> 00:32:48,380
discussion about it since various

00:32:44,419 --> 00:32:50,539
projects out there it might be useful to

00:32:48,380 --> 00:32:51,230
have some discussion because we're not

00:32:50,539 --> 00:32:55,370
too

00:32:51,230 --> 00:32:57,590
we're not too sure about all the

00:32:55,370 --> 00:32:59,720
different you know different use cases

00:32:57,590 --> 00:33:02,240
we have with sidecars it's a bit fuzzy

00:32:59,720 --> 00:33:05,240
for for us so it might we might reach

00:33:02,240 --> 00:33:07,760
reach out for like you have some

00:33:05,240 --> 00:33:10,370
questions I mean definitely ask in the

00:33:07,760 --> 00:33:15,529
channel because it might give us some

00:33:10,370 --> 00:33:18,620
ideas yeah I was like I was mostly

00:33:15,529 --> 00:33:20,270
interested in the invoice ID card said

00:33:18,620 --> 00:33:21,770
that you know the task can be doing

00:33:20,270 --> 00:33:23,960
useful things and talking to the

00:33:21,770 --> 00:33:26,179
applications or whatever that can be

00:33:23,960 --> 00:33:31,669
secured somehow I didn't have anything

00:33:26,179 --> 00:33:34,610
else in mind for sidecars but that add

00:33:31,669 --> 00:33:36,799
another separates question / note I have

00:33:34,610 --> 00:33:39,260
as I notice that the lrp contained M

00:33:36,799 --> 00:33:41,960
section and M section I imagine would

00:33:39,260 --> 00:33:45,470
hold some sensitive data are you all

00:33:41,960 --> 00:33:49,760
planning to make it referenceable to a

00:33:45,470 --> 00:33:53,750
secret thought about that but maybe

00:33:49,760 --> 00:33:56,570
maybe it's a good idea it's fairly

00:33:53,750 --> 00:33:58,909
experimental the whole the whole CD

00:33:56,570 --> 00:34:02,390
thing but I guess we might run into

00:33:58,909 --> 00:34:10,970
things like that but no we haven't

00:34:02,390 --> 00:34:14,270
haven't considered yet but yeah cool

00:34:10,970 --> 00:34:16,369
thanks yeah for for the side cards I

00:34:14,270 --> 00:34:18,859
guess you might want to ask in China

00:34:16,369 --> 00:34:20,480
because other people's might have more

00:34:18,859 --> 00:34:24,220
knowledge or opinions and if not we

00:34:20,480 --> 00:34:24,220
might just have a discussion there

00:34:24,399 --> 00:34:29,800
something else that we're working on

00:34:26,839 --> 00:34:32,510
currently is redefining the whole

00:34:29,800 --> 00:34:35,629
surface area for arena because you know

00:34:32,510 --> 00:34:37,849
it we're currently releasing a film

00:34:35,629 --> 00:34:39,889
chart and we're pretty close to

00:34:37,849 --> 00:34:44,720
deprecating that if not deprecated that

00:34:39,889 --> 00:34:47,990
already we want to start shipping just a

00:34:44,720 --> 00:34:50,780
static set of GMOs with a config map so

00:34:47,990 --> 00:34:53,450
basically in order to deploy Rini it

00:34:50,780 --> 00:34:55,929
will be way easier you'll be able to

00:34:53,450 --> 00:34:58,550
just keep go to apply

00:34:55,929 --> 00:35:00,770
of course you have to provide some

00:34:58,550 --> 00:35:03,410
secrets like for example the cloud

00:35:00,770 --> 00:35:05,030
controller secrets the key and the

00:35:03,410 --> 00:35:08,570
served in the CA and things like that

00:35:05,030 --> 00:35:11,930
will need to be provided by convention

00:35:08,570 --> 00:35:13,490
rather than templating and in the config

00:35:11,930 --> 00:35:16,850
map you'll be able to tweak all sorts of

00:35:13,490 --> 00:35:19,430
useful things and this will make it we

00:35:16,850 --> 00:35:23,060
think very easy for people to just like

00:35:19,430 --> 00:35:25,850
try the thing out and of course it

00:35:23,060 --> 00:35:30,140
doesn't it doesn't make like using quite

00:35:25,850 --> 00:35:32,860
a teacup he'll and other things the

00:35:30,140 --> 00:35:36,710
question like I think cube CFR currently

00:35:32,860 --> 00:35:38,690
using the help chart so yeah

00:35:36,710 --> 00:35:42,650
this is something we're quite excited

00:35:38,690 --> 00:35:45,590
about as well and I'm interested in in

00:35:42,650 --> 00:35:48,740
what you'll think about this direction

00:35:45,590 --> 00:35:53,320
like is there someone who thinks that's

00:35:48,740 --> 00:35:59,300
wrong or who thinks that it will like

00:35:53,320 --> 00:36:00,770
break something there's one point from

00:35:59,300 --> 00:36:02,660
earlier that I wanted to go back to

00:36:00,770 --> 00:36:03,650
super quick sorry it's not a direct

00:36:02,660 --> 00:36:06,980
response to your question about

00:36:03,650 --> 00:36:11,570
packaging but it relates to Dimitri's

00:36:06,980 --> 00:36:13,130
question about the formats of labels

00:36:11,570 --> 00:36:16,280
coming through and like the pods and the

00:36:13,130 --> 00:36:18,350
stateful sets and whatnot this is

00:36:16,280 --> 00:36:19,670
something I think by the way product

00:36:18,350 --> 00:36:21,320
manager on the logging side of things

00:36:19,670 --> 00:36:23,480
uncie F for Kate's for a little bit of

00:36:21,320 --> 00:36:24,980
context we care about some of that meta

00:36:23,480 --> 00:36:27,410
data to make sure that information is

00:36:24,980 --> 00:36:30,080
correctly annotated as it goes through

00:36:27,410 --> 00:36:32,600
our own logging system and we would be

00:36:30,080 --> 00:36:36,080
very interested I can oh if the format

00:36:32,600 --> 00:36:37,970
of that changed being able to update

00:36:36,080 --> 00:36:39,680
things on our end and be able to react

00:36:37,970 --> 00:36:40,160
to any of those changes coming in from

00:36:39,680 --> 00:36:43,370
ireenie

00:36:40,160 --> 00:36:45,920
is there any good place for us to track

00:36:43,370 --> 00:36:47,960
these sort of changes like release notes

00:36:45,920 --> 00:36:49,550
a set of architectural decision records

00:36:47,960 --> 00:36:53,470
it's like what's the best way for us to

00:36:49,550 --> 00:36:53,470
be in the know if these things change

00:36:54,730 --> 00:37:02,350
yes yeah well I don't think we have ever

00:36:59,630 --> 00:37:02,350
changed

00:37:04,770 --> 00:37:09,060
may I suppose like if you agree that

00:37:06,660 --> 00:37:11,160
this is the right one it's for the very

00:37:09,060 --> 00:37:13,920
specific problem then just open a github

00:37:11,160 --> 00:37:15,780
issue to change the annotations to

00:37:13,920 --> 00:37:19,340
contain dashes instead of underscores

00:37:15,780 --> 00:37:24,930
then you will be informed by get yes

00:37:19,340 --> 00:37:26,970
whenever I thought I thought it was more

00:37:24,930 --> 00:37:29,160
about how to find out if something

00:37:26,970 --> 00:37:31,650
changes right because for us we don't

00:37:29,160 --> 00:37:34,530
have a strong opinion about the format

00:37:31,650 --> 00:37:36,090
of these like like there's community

00:37:34,530 --> 00:37:37,770
conventions I think that Dimitri is

00:37:36,090 --> 00:37:41,310
hinting at the like so they contain

00:37:37,770 --> 00:37:43,080
underscores - is anything we just care

00:37:41,310 --> 00:37:44,490
what they are right and if they change

00:37:43,080 --> 00:37:46,650
you know in order to kind of match with

00:37:44,490 --> 00:37:48,690
those conventions then just having some

00:37:46,650 --> 00:37:51,420
way to stay up to date on that or other

00:37:48,690 --> 00:37:52,740
relevant changes like for instance we

00:37:51,420 --> 00:37:54,480
might have some dependency on the name

00:37:52,740 --> 00:37:57,930
of like container names coming from

00:37:54,480 --> 00:38:00,120
ireenie and things like that well yeah

00:37:57,930 --> 00:38:03,630
I'm afraid this is like too low a level

00:38:00,120 --> 00:38:05,160
to put in release notes and I think as

00:38:03,630 --> 00:38:09,720
of today I don't think there is such a

00:38:05,160 --> 00:38:11,550
place I guess you should just I don't

00:38:09,720 --> 00:38:13,560
know like you keep in touch with the

00:38:11,550 --> 00:38:16,410
team or like if you discover I guess you

00:38:13,560 --> 00:38:18,540
should just discover those today I guess

00:38:16,410 --> 00:38:21,270
that's what you're probably doing in the

00:38:18,540 --> 00:38:25,050
future though when we're going to sear

00:38:21,270 --> 00:38:27,510
these I would imagine that they'll be

00:38:25,050 --> 00:38:30,240
carry or carried over from the CD and

00:38:27,510 --> 00:38:32,940
the CD will be the API so I guess it

00:38:30,240 --> 00:38:35,990
will be in the readme and it would be it

00:38:32,940 --> 00:38:39,260
would be quite visible I would imagine I

00:38:35,990 --> 00:38:41,670
mean that's just my personal opinion I

00:38:39,260 --> 00:38:48,120
haven't had such discussions in the team

00:38:41,670 --> 00:38:51,480
for sure that's something I imagine yeah

00:38:48,120 --> 00:38:56,130
I would add to that is that a lot of

00:38:51,480 --> 00:38:58,710
times the the metadata passed in labels

00:38:56,130 --> 00:39:01,500
and annotations right is part of your

00:38:58,710 --> 00:39:03,930
API so even when you all move over to

00:39:01,500 --> 00:39:05,660
CDs you know there are patterns with

00:39:03,930 --> 00:39:09,030
indicates community right where like

00:39:05,660 --> 00:39:11,250
it's expected that the pods show up with

00:39:09,030 --> 00:39:14,790
particular you know labels right and so

00:39:11,250 --> 00:39:16,590
if I would actually argue that this kind

00:39:14,790 --> 00:39:18,360
of thing should be included in the

00:39:16,590 --> 00:39:21,420
release notes because you

00:39:18,360 --> 00:39:23,280
the external contract you know with the

00:39:21,420 --> 00:39:25,410
user this is something that you all

00:39:23,280 --> 00:39:27,210
expect other people to use right

00:39:25,410 --> 00:39:29,550
and that's fair because even with

00:39:27,210 --> 00:39:32,310
serious it's like you have an input and

00:39:29,550 --> 00:39:35,670
an output it becomes like a function so

00:39:32,310 --> 00:39:38,550
I need I think one particular exalts

00:39:35,670 --> 00:39:41,310
sorry to interrupt you Georgie go ahead

00:39:38,550 --> 00:39:43,530
um I think one particular pattern here

00:39:41,310 --> 00:39:45,480
that there's a lot of similarity these

00:39:43,530 --> 00:39:48,660
kind of questions is having to do with

00:39:45,480 --> 00:39:50,330
say the format and labels on metrics

00:39:48,660 --> 00:39:52,760
coming out of these various components

00:39:50,330 --> 00:39:53,910
that's something that you know there can

00:39:52,760 --> 00:39:55,680
gradually

00:39:53,910 --> 00:39:58,230
accrete a number of downstream

00:39:55,680 --> 00:39:59,730
dependencies on and so it's often asked

00:39:58,230 --> 00:40:02,880
that like hey you're gonna change the

00:39:59,730 --> 00:40:04,470
name of this metric or the label of this

00:40:02,880 --> 00:40:06,870
other metric like just letting folks

00:40:04,470 --> 00:40:08,460
know so they have time to adjust I think

00:40:06,870 --> 00:40:10,410
that's kind of the situation we're in

00:40:08,460 --> 00:40:19,710
consuming some of these annotations with

00:40:10,410 --> 00:40:22,920
a blogging system so what what would be

00:40:19,710 --> 00:40:25,140
useful for you then like do you want to

00:40:22,920 --> 00:40:27,600
find changes to these in the relief not

00:40:25,140 --> 00:40:29,130
is that enough or do you want to find a

00:40:27,600 --> 00:40:35,340
section in the reader how do you imagine

00:40:29,130 --> 00:40:37,020
I think I just asked you if there are

00:40:35,340 --> 00:40:39,270
changes that are coming downstream to

00:40:37,020 --> 00:40:40,620
parts these annotations or labels that

00:40:39,270 --> 00:40:42,510
feel relevant to mention that in the

00:40:40,620 --> 00:40:43,860
release notes don't help us out a lot

00:40:42,510 --> 00:40:45,330
just so we don't have to be like oh man

00:40:43,860 --> 00:40:47,420
ireenie version this shipped and now

00:40:45,330 --> 00:40:53,690
things are broken and we don't know why

00:40:47,420 --> 00:40:56,940
yeah or just in general

00:40:53,690 --> 00:40:58,590
mostly labels and annotations on the

00:40:56,940 --> 00:41:01,830
objects coming out of irony would be the

00:40:58,590 --> 00:41:04,830
ask here okay specific positive most

00:41:01,830 --> 00:41:05,280
yeah both stay for sets jobs they're

00:41:04,830 --> 00:41:07,500
like

00:41:05,280 --> 00:41:10,530
pods are I mean the most important for

00:41:07,500 --> 00:41:12,210
us it's I don't think we would probably

00:41:10,530 --> 00:41:13,950
be the only people in these situations

00:41:12,210 --> 00:41:15,810
like making some decisions based on

00:41:13,950 --> 00:41:17,070
these but for us annotations and labels

00:41:15,810 --> 00:41:20,490
on pods will be the thing we would ask

00:41:17,070 --> 00:41:22,620
for notifications on but did did we

00:41:20,490 --> 00:41:27,300
change these things I don't remember

00:41:22,620 --> 00:41:29,760
like us changing that a lot I don't know

00:41:27,300 --> 00:41:32,100
if there have been some added recently

00:41:29,760 --> 00:41:33,750
due to requests there might be some

00:41:32,100 --> 00:41:35,670
change in the future depending on kind

00:41:33,750 --> 00:41:37,620
of sort of things dimitri mentioned just

00:41:35,670 --> 00:41:39,990
wanting to make sure there's a way for

00:41:37,620 --> 00:41:42,390
us to stay I'm sure I'm just trying to

00:41:39,990 --> 00:41:44,670
get a better idea for the problem so

00:41:42,390 --> 00:41:47,010
basically promise that you didn't find

00:41:44,670 --> 00:41:49,830
the ones that we added as part of the

00:41:47,010 --> 00:41:51,840
release notes well it's it's that we

00:41:49,830 --> 00:41:53,850
have a dependency on the name and form

00:41:51,840 --> 00:41:55,230
of those annotations like for kind of

00:41:53,850 --> 00:41:58,260
functionality rather than just user

00:41:55,230 --> 00:42:01,470
visibility so wanting to make sure that

00:41:58,260 --> 00:42:03,000
we would know if they did change because

00:42:01,470 --> 00:42:04,170
I think shouldn't be a bunch of a

00:42:03,000 --> 00:42:07,100
problem right because it's backwards

00:42:04,170 --> 00:42:12,840
compatible generally right yeah just

00:42:07,100 --> 00:42:14,940
yeah all right we can keep this in mind

00:42:12,840 --> 00:42:19,800
I'm just trying to figure out what

00:42:14,940 --> 00:42:21,180
exactly we did no no it nothing the

00:42:19,800 --> 00:42:24,590
ground just something I'm asking you to

00:42:21,180 --> 00:42:26,490
keep in mind for the future sure sure

00:42:24,590 --> 00:42:30,630
maybe the rephrase it

00:42:26,490 --> 00:42:33,480
I think what's being asked is to the API

00:42:30,630 --> 00:42:35,640
contract for annotations and labels more

00:42:33,480 --> 00:42:37,440
explicit with certain backwards

00:42:35,640 --> 00:42:45,180
comparability guarantees and

00:42:37,440 --> 00:42:47,480
discoverability of that contract maybe

00:42:45,180 --> 00:42:52,140
maybe even in the readme maybe we should

00:42:47,480 --> 00:42:54,960
like examples like I don't know should

00:42:52,140 --> 00:42:57,890
kind of quote what annotations and

00:42:54,960 --> 00:42:57,890
labels we put on these things

00:42:59,660 --> 00:43:04,200
compatibility I think this was

00:43:02,310 --> 00:43:06,930
definitely on our our minds we've been

00:43:04,200 --> 00:43:09,660
mainly adding but yeah maybe we can post

00:43:06,930 --> 00:43:16,620
them in the readme and change like give

00:43:09,660 --> 00:43:21,750
them up-to-date or I'll tell the PM I

00:43:16,620 --> 00:43:26,220
guess about this request excellent thank

00:43:21,750 --> 00:43:28,920
you very much think something sure any

00:43:26,220 --> 00:43:30,450
comments about the helm less deployment

00:43:28,920 --> 00:43:36,240
think like you've got to apply these

00:43:30,450 --> 00:43:38,910
yeah most with a config map I like the

00:43:36,240 --> 00:43:41,430
idea like I like that like that the the

00:43:38,910 --> 00:43:44,000
time Jules mentioned it in the industry

00:43:41,430 --> 00:43:45,809
call that this is how he imagines it

00:43:44,000 --> 00:43:50,279
like some house

00:43:45,809 --> 00:43:52,650
like templating similarly to using mocks

00:43:50,279 --> 00:43:55,650
in tests like when you start using mocks

00:43:52,650 --> 00:43:57,839
and tests nobody using you can get out

00:43:55,650 --> 00:43:59,549
of the smoking hell and similarly with

00:43:57,839 --> 00:44:02,400
templating right once you start

00:43:59,549 --> 00:44:03,900
templating all the upper layers need to

00:44:02,400 --> 00:44:05,880
use that templating and if you just

00:44:03,900 --> 00:44:09,239
provide that the upper layers can do

00:44:05,880 --> 00:44:10,469
whatever they want like it's an old idea

00:44:09,239 --> 00:44:12,719
this convention over configuration

00:44:10,469 --> 00:44:14,609
they'll definitely be some convention

00:44:12,719 --> 00:44:17,519
introduced because there's no way around

00:44:14,609 --> 00:44:19,759
that but I guess given that we have

00:44:17,519 --> 00:44:23,729
serious and a config map is more likely

00:44:19,759 --> 00:44:25,769
something like a fluid CD like any

00:44:23,729 --> 00:44:28,380
surgery you want and we can we can watch

00:44:25,769 --> 00:44:30,529
that and reflect those changes or this

00:44:28,380 --> 00:44:33,779
can be our main configuration point

00:44:30,529 --> 00:44:36,779
quite I think it will make our lives

00:44:33,779 --> 00:44:39,979
easier definitely and if it's not burden

00:44:36,779 --> 00:44:39,979
for our users to be great

00:44:41,910 --> 00:44:53,069
there is also a document not a document

00:44:49,380 --> 00:44:57,839
but yeah basically a pre shaped version

00:44:53,069 --> 00:45:00,779
of what this static deponent might look

00:44:57,839 --> 00:45:04,349
like the poster coughing about just

00:45:00,779 --> 00:45:16,469
paste this in the chat you could also

00:45:04,349 --> 00:45:19,319
send me like hmm thanks thanks I'll send

00:45:16,469 --> 00:45:22,400
it to links one about our current

00:45:19,319 --> 00:45:25,709
initial like proposition for the CD API

00:45:22,400 --> 00:45:27,119
tasks and LR piece and one about the Elm

00:45:25,709 --> 00:45:29,459
glass deployment because I think these

00:45:27,119 --> 00:45:32,160
are important topics and people might

00:45:29,459 --> 00:45:34,170
want to have a deeper look just to

00:45:32,160 --> 00:45:36,900
disclaimer these are just initial things

00:45:34,170 --> 00:45:38,819
nothing set in stone there so definitely

00:45:36,900 --> 00:45:44,539
a comment and get feedback like

00:45:38,819 --> 00:45:49,199
Charlotte Channel and so on one question

00:45:44,539 --> 00:45:52,289
so if you don't provide ham shots

00:45:49,199 --> 00:45:56,249
anymore how do people know what they

00:45:52,289 --> 00:45:58,090
have to put in the secrets the that you

00:45:56,249 --> 00:46:01,870
need to create right because

00:45:58,090 --> 00:46:03,550
I mean ahem chart some it's just a bunch

00:46:01,870 --> 00:46:06,580
of template's right you can ignore it

00:46:03,550 --> 00:46:08,350
and you can write the objects on your

00:46:06,580 --> 00:46:10,090
own it serves a little bit as

00:46:08,350 --> 00:46:12,610
documentation if you don't want to use

00:46:10,090 --> 00:46:14,950
it so now you don't even do the ham

00:46:12,610 --> 00:46:17,650
chart which I can understand it's kind

00:46:14,950 --> 00:46:19,900
of it's a user facing thing and if you

00:46:17,650 --> 00:46:24,280
want to concentrate on your software it

00:46:19,900 --> 00:46:26,590
can be a nuisance to keep it right and

00:46:24,280 --> 00:46:28,630
to provide it to users but now you don't

00:46:26,590 --> 00:46:31,300
have to hand shot anymore so you have to

00:46:28,630 --> 00:46:34,030
document um what has to go into these

00:46:31,300 --> 00:46:37,300
manually created conflicts and secrets

00:46:34,030 --> 00:46:40,120
and certificates that sound some like a

00:46:37,300 --> 00:46:44,760
lot more work then you know just putting

00:46:40,120 --> 00:46:47,230
some files on the template directory

00:46:44,760 --> 00:46:49,120
well it will be it will be just some

00:46:47,230 --> 00:46:52,150
convention we hope that it will not be

00:46:49,120 --> 00:46:55,420
that much like things like the smoke of

00:46:52,150 --> 00:46:57,120
got the cloud controller certificates

00:46:55,420 --> 00:46:59,970
you'll probably anyway need to specify

00:46:57,120 --> 00:47:05,200
in the values files in the column so we

00:46:59,970 --> 00:47:07,960
hope it won't be that bad for the

00:47:05,200 --> 00:47:12,040
end-user plus I mean every anyone can

00:47:07,960 --> 00:47:14,770
write their own template it's not you

00:47:12,040 --> 00:47:18,340
know it's not forbidden to do that you

00:47:14,770 --> 00:47:20,560
can just like take our deployment you

00:47:18,340 --> 00:47:23,770
also parameterize them if that's more

00:47:20,560 --> 00:47:28,270
convenient for you but we think it will

00:47:23,770 --> 00:47:30,150
generally make it easier actually it

00:47:28,270 --> 00:47:32,770
will be definitely already documented

00:47:30,150 --> 00:47:36,010
this will be kind of the contract now

00:47:32,770 --> 00:47:38,830
that we don't have templates the input

00:47:36,010 --> 00:47:40,210
parameters will be documented I think it

00:47:38,830 --> 00:47:42,970
will be mainly secrets if you're

00:47:40,210 --> 00:47:45,430
interested take a look at the dock when

00:47:42,970 --> 00:47:50,320
burn sends the links if you have some

00:47:45,430 --> 00:47:52,690
specific worries just just write a

00:47:50,320 --> 00:47:54,400
comment in the talk or like I think it's

00:47:52,690 --> 00:47:56,290
a github readme this particular one but

00:47:54,400 --> 00:47:59,260
you can always write in the channel will

00:47:56,290 --> 00:48:02,220
be will be glad to like we will have to

00:47:59,260 --> 00:48:02,220
have a discussion about this

00:48:05,400 --> 00:48:16,000
okay so as we only have two minutes

00:48:13,030 --> 00:48:18,580
maybe one last question for me any plans

00:48:16,000 --> 00:48:20,850
still on getting rid of the stateful

00:48:18,580 --> 00:48:20,850
sets

00:48:21,330 --> 00:48:28,420
that's a tough one actually delighted to

00:48:25,090 --> 00:48:31,360
just just out doing just deployments but

00:48:28,420 --> 00:48:34,480
I think there are people we have had

00:48:31,360 --> 00:48:37,590
some issues about people doing some

00:48:34,480 --> 00:48:41,590
migrations who really want to have

00:48:37,590 --> 00:48:42,610
instance ordering which seems like it

00:48:41,590 --> 00:48:45,010
was a wrong idea

00:48:42,610 --> 00:48:48,550
because I don't know like how do you

00:48:45,010 --> 00:48:50,230
guarantee that instance one didn't get

00:48:48,550 --> 00:48:52,590
recreated and stuff like that I mean

00:48:50,230 --> 00:48:55,150
it's kind of dumb to be talking about

00:48:52,590 --> 00:48:57,850
instance you want to when you're talking

00:48:55,150 --> 00:48:59,920
about a cloud but people are depending

00:48:57,850 --> 00:49:04,660
on these these have been documented the

00:48:59,920 --> 00:49:08,200
CF Docs there is a there are some in

00:49:04,660 --> 00:49:10,240
VARs people depend on and not only

00:49:08,200 --> 00:49:12,130
people will also tools like cloud

00:49:10,240 --> 00:49:14,740
connectors for spring and stuff like

00:49:12,130 --> 00:49:17,950
that it will be kind of a pain to get

00:49:14,740 --> 00:49:20,800
rid of these so for now I think we're

00:49:17,950 --> 00:49:24,820
more on the side of keeping those for a

00:49:20,800 --> 00:49:27,130
backwards compatible depend do people

00:49:24,820 --> 00:49:29,920
depend on these environment variables or

00:49:27,130 --> 00:49:31,960
do they really depend on in which order

00:49:29,920 --> 00:49:35,040
things are rolled out because that's in

00:49:31,960 --> 00:49:39,130
Reverse with stateful sense well

00:49:35,040 --> 00:49:42,040
honestly I don't quite know but there

00:49:39,130 --> 00:49:47,020
are as I may as I mentioned these cloud

00:49:42,040 --> 00:49:49,530
connectors which lookup those virus and

00:49:47,020 --> 00:49:52,180
it's it's quite annoying because

00:49:49,530 --> 00:49:55,510
kubernetes injects like the stateful set

00:49:52,180 --> 00:49:59,410
controller injects the name of the of

00:49:55,510 --> 00:50:00,940
the boat like your ID - number but it

00:49:59,410 --> 00:50:03,100
doesn't give you the number separately

00:50:00,940 --> 00:50:05,230
so it's kind of a pain - to support

00:50:03,100 --> 00:50:08,710
those use cases but given that there's

00:50:05,230 --> 00:50:11,290
been issues we don't think it would be

00:50:08,710 --> 00:50:14,500
nice like drop that yet

00:50:11,290 --> 00:50:18,040
maybe we can deprecated that and to like

00:50:14,500 --> 00:50:19,660
let people you know let people adopt

00:50:18,040 --> 00:50:21,250
stop using them and then we can drop but

00:50:19,660 --> 00:50:22,980
I don't think it's something we can drop

00:50:21,250 --> 00:50:28,810
right now

00:50:22,980 --> 00:50:31,720
make sense Thanks and I think we're at

00:50:28,810 --> 00:50:35,130
the top of the hour so I would say thank

00:50:31,720 --> 00:50:38,020
you very much to to be okay for demo and

00:50:35,130 --> 00:50:40,690
answering all the questions that came up

00:50:38,020 --> 00:50:43,780
I guess if there's more questions you

00:50:40,690 --> 00:50:44,500
know how how to fight the folks let's

00:50:43,780 --> 00:50:46,890
check ireenie

00:50:44,500 --> 00:50:49,480
slack channel i I guess is the main

00:50:46,890 --> 00:50:52,720
channel too to give additional feedback

00:50:49,480 --> 00:50:54,640
and with that I'd say thank you very

00:50:52,720 --> 00:51:01,770
much to everybody for attending and

00:50:54,640 --> 00:51:01,770

YouTube URL: https://www.youtube.com/watch?v=1zD3qQ1neiY


