Title: Cloud Foundry for Kubernetes SIG [July 2020]
Publication date: 2020-07-22
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:00:42,840 --> 00:00:45,840
my

00:01:55,759 --> 00:01:58,240
right there

00:02:04,000 --> 00:02:11,039
can anybody hear me hey yes

00:02:07,119 --> 00:02:14,160
hey good morning good morning

00:02:11,039 --> 00:02:17,520
and we have scion hi good morning

00:02:14,160 --> 00:02:19,040
how's it going good thanks

00:02:17,520 --> 00:02:21,599
[Applause]

00:02:19,040 --> 00:02:22,800
um and we have quite a few folks already

00:02:21,599 --> 00:02:25,120
joined

00:02:22,800 --> 00:02:27,520
so probably we'll wait another minute or

00:02:25,120 --> 00:02:37,840
so and then get started

00:02:27,520 --> 00:02:37,840
this sounds great okay

00:02:48,840 --> 00:02:51,840
so

00:03:04,159 --> 00:03:08,400
i hear your your typing going on site

00:03:09,840 --> 00:03:13,200
i have a intentionally bought a very

00:03:11,680 --> 00:03:15,120
annoying keyboard that makes a lot of

00:03:13,200 --> 00:03:18,640
noise

00:03:15,120 --> 00:03:21,920
which my wife does not prefer so

00:03:18,640 --> 00:03:23,280
i should buy something quieter

00:03:21,920 --> 00:03:25,200
and then we can use some machine

00:03:23,280 --> 00:03:28,480
learning to derive what

00:03:25,200 --> 00:03:28,480
psy is actually typing

00:03:31,280 --> 00:03:36,640
very scary okay for past

00:03:34,640 --> 00:03:37,920
i guess we should get started quite a

00:03:36,640 --> 00:03:40,959
few folks on

00:03:37,920 --> 00:03:41,519
on the call today thanks everybody for

00:03:40,959 --> 00:03:44,720
joining

00:03:41,519 --> 00:03:48,319
um this time we have sai um

00:03:44,720 --> 00:03:50,959
from the relent team and i think by and

00:03:48,319 --> 00:03:53,680
large the topic is cfo kate's but then

00:03:50,959 --> 00:03:54,959
i think so you wanted to talk

00:03:53,680 --> 00:03:58,000
specifically about

00:03:54,959 --> 00:04:00,720
a couple of sub-topics so custom builder

00:03:58,000 --> 00:04:02,400
store and stack not sure if that is

00:04:00,720 --> 00:04:04,560
still the plan of record but i would

00:04:02,400 --> 00:04:07,840
hand it over to you

00:04:04,560 --> 00:04:12,840
yeah so my hope was today to

00:04:07,840 --> 00:04:14,000
talk about two topics i'll try to do it

00:04:12,840 --> 00:04:16,400
in

00:04:14,000 --> 00:04:17,440
about 15 minutes each maybe uh and see

00:04:16,400 --> 00:04:20,959
how it goes

00:04:17,440 --> 00:04:23,600
uh what i'm trying to get to is um

00:04:20,959 --> 00:04:24,479
like create more uh informational

00:04:23,600 --> 00:04:26,880
sessions

00:04:24,479 --> 00:04:27,680
uh so i would love to hear general

00:04:26,880 --> 00:04:30,400
feedback

00:04:27,680 --> 00:04:32,960
from you all you know this is helpful

00:04:30,400 --> 00:04:35,360
and i should do more of this

00:04:32,960 --> 00:04:36,400
maybe it you know separate office hours

00:04:35,360 --> 00:04:38,800
or videos

00:04:36,400 --> 00:04:40,479
but my hope with this session was just

00:04:38,800 --> 00:04:41,600
to talk about the new custom builder

00:04:40,479 --> 00:04:45,680
that we

00:04:41,600 --> 00:04:46,560
that we sort of built for kpac and then

00:04:45,680 --> 00:04:50,639
also

00:04:46,560 --> 00:04:51,840
talk about the upgrade up time checks

00:04:50,639 --> 00:04:54,800
we've been

00:04:51,840 --> 00:04:56,160
doing and how it is helping the

00:04:54,800 --> 00:04:58,560
contributing teams and

00:04:56,160 --> 00:04:59,680
the path towards our to meet our some of

00:04:58,560 --> 00:05:02,080
our upgrades

00:04:59,680 --> 00:05:03,120
and uptime slos so that was my sort of

00:05:02,080 --> 00:05:06,960
very informal

00:05:03,120 --> 00:05:06,960
educational informational session

00:05:07,280 --> 00:05:14,320
sounds good cool so

00:05:10,479 --> 00:05:16,080
uh let me uh is there anyone else who

00:05:14,320 --> 00:05:18,400
has any topics to talk about today or

00:05:16,080 --> 00:05:22,160
am i taking the whole hour just curious

00:05:18,400 --> 00:05:22,160
so i can adjust my content accordingly

00:05:22,240 --> 00:05:26,240
nothing else fixed on the agenda but if

00:05:24,160 --> 00:05:30,240
somebody has a topic that'll be

00:05:26,240 --> 00:05:33,600
okay all right sounds great so let me

00:05:30,240 --> 00:05:35,440
uh adjust my screen um i just wanted to

00:05:33,600 --> 00:05:36,639
advertise on behalf of the the

00:05:35,440 --> 00:05:40,160
networking team

00:05:36,639 --> 00:05:42,479
that um they are attempting

00:05:40,160 --> 00:05:44,320
their first of their bi-weekly office

00:05:42,479 --> 00:05:47,360
hours tomorrow

00:05:44,320 --> 00:05:49,199
um that's 10 a.m

00:05:47,360 --> 00:05:51,840
west coast time not sure what that is

00:05:49,199 --> 00:05:55,039
for other folks

00:05:51,840 --> 00:05:58,880
uh in their time zones but uh

00:05:55,039 --> 00:06:01,199
i'm hopeful that this will be a

00:05:58,880 --> 00:06:03,039
successful first office hour and people

00:06:01,199 --> 00:06:07,840
can get their questions about

00:06:03,039 --> 00:06:07,840
cf kate's networking out there

00:06:09,759 --> 00:06:13,360
yeah that is very exciting yui i that

00:06:12,319 --> 00:06:15,919
was

00:06:13,360 --> 00:06:16,400
you know also my top my mind something

00:06:15,919 --> 00:06:18,080
maybe

00:06:16,400 --> 00:06:20,160
our team can also do because we do

00:06:18,080 --> 00:06:23,680
collect take all of the

00:06:20,160 --> 00:06:24,960
artifacts and from different teams and

00:06:23,680 --> 00:06:27,039
we can discuss a lot

00:06:24,960 --> 00:06:29,360
a lot of things we're doing some really

00:06:27,039 --> 00:06:33,360
cool stuff so

00:06:29,360 --> 00:06:35,840
oh no a chip we've got a billing problem

00:06:33,360 --> 00:06:37,840
you have a billy problem no that's the

00:06:35,840 --> 00:06:41,759
trade wave organization

00:06:37,840 --> 00:06:43,600
secret cabal that belongs to oh

00:06:41,759 --> 00:06:45,440
my bad i don't know what you're talking

00:06:43,600 --> 00:06:49,120
about yeah this is

00:06:45,440 --> 00:06:52,160
my startup before startup um

00:06:49,120 --> 00:06:56,240
i have completely forgotten about it and

00:06:52,160 --> 00:06:58,080
that message now is like numb to me so

00:06:56,240 --> 00:06:59,520
you just like it like a theme it's just

00:06:58,080 --> 00:07:02,160
this beautiful yellow banner

00:06:59,520 --> 00:07:03,520
yeah yeah i'm like what do they get

00:07:02,160 --> 00:07:06,720
blind to that message

00:07:03,520 --> 00:07:09,840
cool uh you can see my my

00:07:06,720 --> 00:07:12,720
uh i'm assuming obviously you can see my

00:07:09,840 --> 00:07:14,160
chrome um right like everyone mm-hmm

00:07:12,720 --> 00:07:17,039
okay cool

00:07:14,160 --> 00:07:18,000
all right so um it's a quick intro to

00:07:17,039 --> 00:07:21,919
custom builder

00:07:18,000 --> 00:07:25,120
um i think we in the past we had a

00:07:21,919 --> 00:07:27,360
default builder that uh we use that

00:07:25,120 --> 00:07:29,280
actually used all of the uh

00:07:27,360 --> 00:07:31,840
contained all of the language bill packs

00:07:29,280 --> 00:07:35,039
so this was the one that

00:07:31,840 --> 00:07:38,639
we used in the past so

00:07:35,039 --> 00:07:41,280
the the challenge with the using uh

00:07:38,639 --> 00:07:42,639
all in one build builder which actually

00:07:41,280 --> 00:07:43,280
contained all of the language build

00:07:42,639 --> 00:07:44,879
packs

00:07:43,280 --> 00:07:46,960
was we didn't have a control on the

00:07:44,879 --> 00:07:48,560
types of language build packs we want to

00:07:46,960 --> 00:07:50,080
use that was one

00:07:48,560 --> 00:07:52,319
and the challenge the other challenge

00:07:50,080 --> 00:07:53,360
was any single language that gets

00:07:52,319 --> 00:07:55,840
updated

00:07:53,360 --> 00:07:56,400
every the whole builder gets updated

00:07:55,840 --> 00:07:59,599
which

00:07:56,400 --> 00:08:01,680
is you know a pain in the ass when

00:07:59,599 --> 00:08:03,039
if you had multiple languages getting

00:08:01,680 --> 00:08:06,319
updated at the same time

00:08:03,039 --> 00:08:07,919
um we'll get consecutive big builder

00:08:06,319 --> 00:08:10,080
images in a row

00:08:07,919 --> 00:08:12,879
so so that's something that we weren't

00:08:10,080 --> 00:08:15,919
happy about and then what we wanted to

00:08:12,879 --> 00:08:17,520
do is sort of expand that into a more

00:08:15,919 --> 00:08:20,479
spelled out build packs

00:08:17,520 --> 00:08:22,240
now i may be talking about store and

00:08:20,479 --> 00:08:23,680
stack maybe not everyone knows what it

00:08:22,240 --> 00:08:25,599
is so let me just talk about how k

00:08:23,680 --> 00:08:27,360
back works for a second before i jump in

00:08:25,599 --> 00:08:30,800
i see some faces that

00:08:27,360 --> 00:08:34,080
are like what is store so um

00:08:30,800 --> 00:08:37,680
kpac the kpac works is

00:08:34,080 --> 00:08:41,200
it uses two parts to build

00:08:37,680 --> 00:08:43,039
an app one is the stack which is the

00:08:41,200 --> 00:08:46,160
underlying base stack which is a

00:08:43,039 --> 00:08:48,080
which is basically a build image which

00:08:46,160 --> 00:08:49,680
contains some of like for example fs

00:08:48,080 --> 00:08:53,120
root fs3

00:08:49,680 --> 00:08:54,000
or fs3 files it will take that base

00:08:53,120 --> 00:08:56,880
image

00:08:54,000 --> 00:08:58,880
and then we'll use the language bill

00:08:56,880 --> 00:09:01,680
packs which i'll show you in a moment

00:08:58,880 --> 00:09:02,560
and builds the app based on that so the

00:09:01,680 --> 00:09:05,440
language

00:09:02,560 --> 00:09:06,640
build packs let's say java python have

00:09:05,440 --> 00:09:09,920
very two distinct

00:09:06,640 --> 00:09:11,839
set of steps one is detect we will try

00:09:09,920 --> 00:09:14,720
to detect if this is the right language

00:09:11,839 --> 00:09:16,240
and then build so if it detects a python

00:09:14,720 --> 00:09:18,399
then the python bill pack

00:09:16,240 --> 00:09:20,320
will take care of that so each language

00:09:18,399 --> 00:09:22,480
build pack goes through a series of

00:09:20,320 --> 00:09:24,240
checks to see if is this something i

00:09:22,480 --> 00:09:27,600
should be building and if it's true

00:09:24,240 --> 00:09:29,360
then it builds it so so the language

00:09:27,600 --> 00:09:32,640
bullpacks go under this

00:09:29,360 --> 00:09:35,440
crd called store which

00:09:32,640 --> 00:09:36,000
lists all of the language bill packs and

00:09:35,440 --> 00:09:37,600
the stack

00:09:36,000 --> 00:09:39,279
is just a stack that is a base image

00:09:37,600 --> 00:09:41,519
that you use to

00:09:39,279 --> 00:09:42,800
build the image and now also the image

00:09:41,519 --> 00:09:46,080
that you use for running

00:09:42,800 --> 00:09:50,160
that image itself so those are the

00:09:46,080 --> 00:09:53,440
two constructs that bill capec uses

00:09:50,160 --> 00:09:57,519
in this case actually the bill pack spec

00:09:53,440 --> 00:10:02,640
that uses to build the app images and

00:09:57,519 --> 00:10:02,640
so custom builder oh okay someone had a

00:10:02,839 --> 00:10:06,320
question

00:10:04,079 --> 00:10:08,079
great what custom builder does is it

00:10:06,320 --> 00:10:11,040
actually stitches them together

00:10:08,079 --> 00:10:12,240
so we'll take the store list of all of

00:10:11,040 --> 00:10:15,760
the languages

00:10:12,240 --> 00:10:17,200
that that it it's possible to build and

00:10:15,760 --> 00:10:20,480
then there is the stack

00:10:17,200 --> 00:10:24,800
which is the underlying stack image

00:10:20,480 --> 00:10:26,160
and then the key part is that the group

00:10:24,800 --> 00:10:28,560
what the group does is really is

00:10:26,160 --> 00:10:31,040
ordering of the order in the group so

00:10:28,560 --> 00:10:32,800
the order tells you in what

00:10:31,040 --> 00:10:34,399
sequence do you want to go through so is

00:10:32,800 --> 00:10:36,720
it java is it note first

00:10:34,399 --> 00:10:38,720
go and a dot net core and then you can

00:10:36,720 --> 00:10:42,000
define any number of

00:10:38,720 --> 00:10:45,279
sort of additional languages you know

00:10:42,000 --> 00:10:48,480
in that group and in that order um

00:10:45,279 --> 00:10:50,399
so why you know this is one of those

00:10:48,480 --> 00:10:52,240
places where the operators actually

00:10:50,399 --> 00:10:53,360
could modify but the way we are

00:10:52,240 --> 00:10:54,720
packaging this is like

00:10:53,360 --> 00:10:58,320
these are the default build packs that

00:10:54,720 --> 00:11:02,399
will package with cfo codes

00:10:58,320 --> 00:11:04,959
so what we did any questions so far

00:11:02,399 --> 00:11:04,959
with this one

00:11:07,279 --> 00:11:13,519
all right so the the key thing about

00:11:10,399 --> 00:11:14,320
the order is that um each of these

00:11:13,519 --> 00:11:18,079
languages

00:11:14,320 --> 00:11:18,640
actually have a sub uh languages or i

00:11:18,079 --> 00:11:21,920
would say

00:11:18,640 --> 00:11:23,360
sub um components such as within java

00:11:21,920 --> 00:11:27,680
you may have tomcat-based

00:11:23,360 --> 00:11:31,120
java app and within say it could be

00:11:27,680 --> 00:11:31,680
maven based build uh maven based app

00:11:31,120 --> 00:11:33,519
building

00:11:31,680 --> 00:11:35,040
so each of these when you see java there

00:11:33,519 --> 00:11:37,839
are many other sub

00:11:35,040 --> 00:11:39,440
par components or language packs to that

00:11:37,839 --> 00:11:41,279
so that because it to understand the

00:11:39,440 --> 00:11:42,160
different flavors in which you can build

00:11:41,279 --> 00:11:45,040
java

00:11:42,160 --> 00:11:47,440
an app so same thing with go to uh there

00:11:45,040 --> 00:11:50,240
may be just a go binary to go

00:11:47,440 --> 00:11:50,959
a web app so each of these will have on

00:11:50,240 --> 00:11:52,880
you know sub

00:11:50,959 --> 00:11:55,040
language packs that will detect if this

00:11:52,880 --> 00:11:58,800
is actually a web app is it a binary

00:11:55,040 --> 00:12:01,040
so on and so forth so if you go to the

00:11:58,800 --> 00:12:03,040
actual pocato bill pack slash java you

00:12:01,040 --> 00:12:06,720
will actually see a list of

00:12:03,040 --> 00:12:09,440
sub packs under each top level language

00:12:06,720 --> 00:12:11,360
and that's the beauty of the kpac packet

00:12:09,440 --> 00:12:13,760
takes care of that it will make sure it

00:12:11,360 --> 00:12:14,560
actually automatically runs through

00:12:13,760 --> 00:12:16,399
those sub

00:12:14,560 --> 00:12:18,880
packs if needed we don't have to spell

00:12:16,399 --> 00:12:22,320
them out here we just spell out the

00:12:18,880 --> 00:12:25,200
the top level language pack

00:12:22,320 --> 00:12:27,360
so so given sort of like these three

00:12:25,200 --> 00:12:28,480
constructs so these are all crds from

00:12:27,360 --> 00:12:31,839
kpac

00:12:28,480 --> 00:12:33,360
um what we did is we spelled them out

00:12:31,839 --> 00:12:36,560
individually so now

00:12:33,360 --> 00:12:38,079
so this was previously just one massive

00:12:36,560 --> 00:12:42,000
monolithic builder

00:12:38,079 --> 00:12:45,120
who went to then create individual

00:12:42,000 --> 00:12:47,519
language packs so the store enumerates

00:12:45,120 --> 00:12:49,040
individual bill packs there are a couple

00:12:47,519 --> 00:12:51,600
of advantages here

00:12:49,040 --> 00:12:52,160
we can now actually update you know

00:12:51,600 --> 00:12:54,160
individual

00:12:52,160 --> 00:12:55,279
build pack when there is a let's say an

00:12:54,160 --> 00:12:57,920
update to that ruby

00:12:55,279 --> 00:12:58,880
this is very similar to how we do in cf

00:12:57,920 --> 00:13:01,279
deployment

00:12:58,880 --> 00:13:02,240
uh where we have individual language

00:13:01,279 --> 00:13:05,680
chain uh you know

00:13:02,240 --> 00:13:07,600
bill pack change and we will update that

00:13:05,680 --> 00:13:10,000
and what's also interesting that as i

00:13:07,600 --> 00:13:11,839
mentioned operators can actually add

00:13:10,000 --> 00:13:13,839
and you know their own build packs to

00:13:11,839 --> 00:13:15,760
this store if they they have a cloud

00:13:13,839 --> 00:13:19,040
native build pack that they want to use

00:13:15,760 --> 00:13:19,600
uh directly into the store uh this uh so

00:13:19,040 --> 00:13:21,519
that's like

00:13:19,600 --> 00:13:22,639
another advantage that they may they

00:13:21,519 --> 00:13:25,839
have when

00:13:22,639 --> 00:13:26,800
when sort of using uh cloud native build

00:13:25,839 --> 00:13:30,240
packs

00:13:26,800 --> 00:13:32,240
um so and i think

00:13:30,240 --> 00:13:34,320
um and i think what's interesting about

00:13:32,240 --> 00:13:36,240
the the custom builder

00:13:34,320 --> 00:13:37,440
as you can see now we have much more

00:13:36,240 --> 00:13:40,639
expanded order

00:13:37,440 --> 00:13:44,079
so instead of the only the few

00:13:40,639 --> 00:13:45,920
you know language packs we have we now

00:13:44,079 --> 00:13:46,720
actually have much more comprehensive

00:13:45,920 --> 00:13:50,160
coverage

00:13:46,720 --> 00:13:54,880
on popular buildback languages

00:13:50,160 --> 00:13:54,880
um any questions so far

00:13:55,760 --> 00:13:59,279
i was just wondering psy from from that

00:13:57,920 --> 00:14:01,040
list like

00:13:59,279 --> 00:14:03,279
what is actually meanwhile the

00:14:01,040 --> 00:14:06,160
difference to cf deployment

00:14:03,279 --> 00:14:07,600
because from looking at it there's

00:14:06,160 --> 00:14:09,199
little that's that's actually missing

00:14:07,600 --> 00:14:11,279
there right

00:14:09,199 --> 00:14:12,800
yeah so i think it's the sort of

00:14:11,279 --> 00:14:13,920
internal implementation is different

00:14:12,800 --> 00:14:16,959
from safe deployment

00:14:13,920 --> 00:14:19,279
to in safe deployment we are using

00:14:16,959 --> 00:14:20,800
sort of the build packs which is a cf to

00:14:19,279 --> 00:14:21,839
you know very cloud founders specific

00:14:20,800 --> 00:14:23,920
build packs

00:14:21,839 --> 00:14:24,959
these are the new build packs called

00:14:23,920 --> 00:14:27,680
pacado right

00:14:24,959 --> 00:14:29,279
right which use a build box actually my

00:14:27,680 --> 00:14:31,440
question was like from the list of

00:14:29,279 --> 00:14:34,000
supported languages and technologies

00:14:31,440 --> 00:14:36,320
that looks fairly comparable to what we

00:14:34,000 --> 00:14:39,040
have in cf deployment so i was wondering

00:14:36,320 --> 00:14:39,680
is this there any major gap just from

00:14:39,040 --> 00:14:43,040
like

00:14:39,680 --> 00:14:45,279
those technologies or yeah

00:14:43,040 --> 00:14:47,440
cf4ks meanwhile complete when it comes

00:14:45,279 --> 00:14:50,240
to to language support

00:14:47,440 --> 00:14:51,760
yeah so we we haven't fully audited um

00:14:50,240 --> 00:14:52,880
side by side just yet because we're

00:14:51,760 --> 00:14:55,360
still sort of working

00:14:52,880 --> 00:14:57,360
with the bill packs team for example the

00:14:55,360 --> 00:15:01,040
bill packs team have

00:14:57,360 --> 00:15:03,040
sort of two sets of

00:15:01,040 --> 00:15:04,320
two phases when they come when it comes

00:15:03,040 --> 00:15:07,120
to releasing

00:15:04,320 --> 00:15:09,120
language packs one is where the first

00:15:07,120 --> 00:15:10,880
phase is any new language

00:15:09,120 --> 00:15:12,560
bill pack has to go through community

00:15:10,880 --> 00:15:15,519
review so you can see that's where

00:15:12,560 --> 00:15:17,519
the pacquiao community is and once that

00:15:15,519 --> 00:15:20,800
language bill pack goes through review

00:15:17,519 --> 00:15:23,920
get gathers feedback it graduates to the

00:15:20,800 --> 00:15:24,720
sort of you know full fully supported

00:15:23,920 --> 00:15:26,320
buildback

00:15:24,720 --> 00:15:29,440
so that's something that we're working

00:15:26,320 --> 00:15:32,639
with them in terms of what is the

00:15:29,440 --> 00:15:34,480
support we would want around around the

00:15:32,639 --> 00:15:36,320
graduated build packs for now we are

00:15:34,480 --> 00:15:36,959
including ruby and python just because

00:15:36,320 --> 00:15:39,600
we want to

00:15:36,959 --> 00:15:41,440
test those with a lot of apps in cats

00:15:39,600 --> 00:15:44,480
and other places that use ruby so

00:15:41,440 --> 00:15:45,519
so we are like you know we try to like

00:15:44,480 --> 00:15:47,759
pull them early

00:15:45,519 --> 00:15:48,959
i imagine when we go one point here we

00:15:47,759 --> 00:15:52,160
would want these to be

00:15:48,959 --> 00:15:53,839
actually graduated bill packs uh

00:15:52,160 --> 00:15:56,399
to be fully supported by the bill pax

00:15:53,839 --> 00:15:58,720
team rather than being in community

00:15:56,399 --> 00:16:00,720
um so that's one um like i said i have

00:15:58,720 --> 00:16:02,720
the one of the areas we want to do fully

00:16:00,720 --> 00:16:04,000
audit is look at the side by side

00:16:02,720 --> 00:16:08,079
comparison i think

00:16:04,000 --> 00:16:09,839
most languages are fully supported here

00:16:08,079 --> 00:16:11,199
but one thing i do want to highlight is

00:16:09,839 --> 00:16:13,920
the structure

00:16:11,199 --> 00:16:14,720
of the apps have changed so what i mean

00:16:13,920 --> 00:16:18,079
by that is

00:16:14,720 --> 00:16:19,440
if you have an app and that worked with

00:16:18,079 --> 00:16:23,600
the

00:16:19,440 --> 00:16:26,240
cf deployment cloud foundry bill packs

00:16:23,600 --> 00:16:26,800
the structure of those have changed in

00:16:26,240 --> 00:16:30,320
the new

00:16:26,800 --> 00:16:33,759
potato bill packs so that is one

00:16:30,320 --> 00:16:35,839
action item that we have as a team to

00:16:33,759 --> 00:16:37,680
document what exactly those changes are

00:16:35,839 --> 00:16:40,880
for both the operators and the

00:16:37,680 --> 00:16:44,320
app developers for example the

00:16:40,880 --> 00:16:47,519
uh the the cf acceptance says the cats

00:16:44,320 --> 00:16:48,399
has number of assets uh with different

00:16:47,519 --> 00:16:51,759
language

00:16:48,399 --> 00:16:55,680
uh you know uh apps so you know we have

00:16:51,759 --> 00:16:56,480
uh php python and we have uh ruby and so

00:16:55,680 --> 00:16:59,040
whatnot

00:16:56,480 --> 00:17:00,959
all of these languages some or most of

00:16:59,040 --> 00:17:02,880
them are actually gonna have to change

00:17:00,959 --> 00:17:04,000
to work you know to to work with the

00:17:02,880 --> 00:17:07,120
potato bill packs

00:17:04,000 --> 00:17:09,199
so this means there is an impact uh for

00:17:07,120 --> 00:17:11,039
someone who wants to migrate from cf

00:17:09,199 --> 00:17:12,640
deployment to c4k8

00:17:11,039 --> 00:17:15,039
that their app would have to go through

00:17:12,640 --> 00:17:17,120
changes in order to work in c4k

00:17:15,039 --> 00:17:19,120
it's not backward compatible i guess

00:17:17,120 --> 00:17:21,039
long story short

00:17:19,120 --> 00:17:22,959
and that is something that we want to

00:17:21,039 --> 00:17:24,799
come ahead and talk about

00:17:22,959 --> 00:17:27,039
at least from a documentation standpoint

00:17:24,799 --> 00:17:30,320
like what do you need to do in order to

00:17:27,039 --> 00:17:31,679
go from cf deployment to cfo gates

00:17:30,320 --> 00:17:33,679
how would you characterize those types

00:17:31,679 --> 00:17:36,559
of changes say just at a a

00:17:33,679 --> 00:17:38,320
very high level is it approach to

00:17:36,559 --> 00:17:38,720
environment variables is it like what's

00:17:38,320 --> 00:17:41,120
the

00:17:38,720 --> 00:17:42,640
what's the premise there so we we have

00:17:41,120 --> 00:17:44,400
to fully audit that so

00:17:42,640 --> 00:17:46,480
that's one thing that we have a explore

00:17:44,400 --> 00:17:49,440
story on the early

00:17:46,480 --> 00:17:49,919
when i had a cursory look at it much of

00:17:49,440 --> 00:17:53,280
this is

00:17:49,919 --> 00:17:56,960
around folder structures and some

00:17:53,280 --> 00:17:59,520
new availability of some specific files

00:17:56,960 --> 00:18:00,559
for the detection to happen i have not

00:17:59,520 --> 00:18:03,039
seen yet

00:18:00,559 --> 00:18:04,880
around there you know environment

00:18:03,039 --> 00:18:06,400
variables issue yes just yet but then

00:18:04,880 --> 00:18:08,400
also we haven't fully

00:18:06,400 --> 00:18:11,200
comprehensively reviewed every asset in

00:18:08,400 --> 00:18:15,039
cats and compare that to

00:18:11,200 --> 00:18:17,200
what's needed in the uh

00:18:15,039 --> 00:18:18,320
yeah okay so that makes sense so that's

00:18:17,200 --> 00:18:21,600
expected

00:18:18,320 --> 00:18:24,720
expected file structure and uh

00:18:21,600 --> 00:18:27,039
the ability to detect yeah

00:18:24,720 --> 00:18:28,799
yeah and we're trying to figure out like

00:18:27,039 --> 00:18:30,320
how can we

00:18:28,799 --> 00:18:32,240
some of the examples that pacquiao bill

00:18:30,320 --> 00:18:35,520
pax has given they

00:18:32,240 --> 00:18:35,520
they have um

00:18:36,080 --> 00:18:40,160
a use of their sort of bill pacquiao

00:18:38,799 --> 00:18:43,840
like how should you be

00:18:40,160 --> 00:18:47,280
how should this app be actually measured

00:18:43,840 --> 00:18:48,480
um how should we detect it so we need to

00:18:47,280 --> 00:18:52,240
be very careful like

00:18:48,480 --> 00:18:55,039
we don't want apps to be you know

00:18:52,240 --> 00:18:56,320
creating build pack base dml to have a

00:18:55,039 --> 00:18:57,679
better detection so

00:18:56,320 --> 00:19:00,480
so there's a trade-off that we have to

00:18:57,679 --> 00:19:01,120
consider uh can they be detected without

00:19:00,480 --> 00:19:04,799
actually

00:19:01,120 --> 00:19:07,840
any um you know uh

00:19:04,799 --> 00:19:09,440
potato specific gamo files

00:19:07,840 --> 00:19:10,960
can they be detected automatically so

00:19:09,440 --> 00:19:13,440
that's one thing that we are actually

00:19:10,960 --> 00:19:15,600
have to explore as well

00:19:13,440 --> 00:19:16,480
does that make sense what i just said

00:19:15,600 --> 00:19:21,039
completely

00:19:16,480 --> 00:19:24,640
okay cool so

00:19:21,039 --> 00:19:25,440
awesome so i think any other questions

00:19:24,640 --> 00:19:28,160
before i

00:19:25,440 --> 00:19:28,160
jump to the next one

00:19:30,480 --> 00:19:34,640
cool um so oh sorry i didn't have a

00:19:34,080 --> 00:19:36,960
question

00:19:34,640 --> 00:19:38,080
like so there are those images that are

00:19:36,960 --> 00:19:40,960
in the

00:19:38,080 --> 00:19:41,679
store and then in the custom builder

00:19:40,960 --> 00:19:45,200
it's

00:19:41,679 --> 00:19:47,360
listing that uh ordering of

00:19:45,200 --> 00:19:48,960
of groups and ids at build packs correct

00:19:47,360 --> 00:19:51,520
you have to implicitly know

00:19:48,960 --> 00:19:52,799
that the images in the store are going

00:19:51,520 --> 00:19:55,280
to relate to

00:19:52,799 --> 00:19:56,480
those build pack ids in the images when

00:19:55,280 --> 00:19:59,760
you're building that list

00:19:56,480 --> 00:20:03,280
yeah so the each of these

00:19:59,760 --> 00:20:06,000
builder language build packs have id

00:20:03,280 --> 00:20:08,000
in them so if i actually expand unpack

00:20:06,000 --> 00:20:11,120
this or crack open this docker image

00:20:08,000 --> 00:20:14,080
they have ids in them so uh

00:20:11,120 --> 00:20:16,480
and those ids sort of re resemble this

00:20:14,080 --> 00:20:20,159
one like pocket or community slash ruby

00:20:16,480 --> 00:20:21,360
so you would have to know the ids when

00:20:20,159 --> 00:20:25,200
you are pulling

00:20:21,360 --> 00:20:27,520
uh a bill pack that actually

00:20:25,200 --> 00:20:28,960
um you know follows the the the

00:20:27,520 --> 00:20:31,440
buildbacks back

00:20:28,960 --> 00:20:32,400
so is that answer your question yeah i

00:20:31,440 --> 00:20:33,919
got it so

00:20:32,400 --> 00:20:35,520
just some implicit knowledge that you

00:20:33,919 --> 00:20:36,400
have to have when you're constructing

00:20:35,520 --> 00:20:38,880
the set of

00:20:36,400 --> 00:20:39,760
correct yeah and you can docker inspect

00:20:38,880 --> 00:20:42,880
that um

00:20:39,760 --> 00:20:46,840
these language build packs

00:20:42,880 --> 00:20:49,840
just because you'll hold one second one

00:20:46,840 --> 00:20:49,840
second

00:20:54,320 --> 00:20:59,200
assume size is running and grabbing it

00:20:55,840 --> 00:21:02,480
build pack to crack up yeah right

00:20:59,200 --> 00:21:04,960
um cool so um what's

00:21:02,480 --> 00:21:05,760
interesting though is that i've i

00:21:04,960 --> 00:21:09,120
thought

00:21:05,760 --> 00:21:12,480
playing with buildpack is that the

00:21:09,120 --> 00:21:15,120
the custom builder is actually a

00:21:12,480 --> 00:21:17,120
image itself so so what kpac actually

00:21:15,120 --> 00:21:18,720
does is it takes all of these images

00:21:17,120 --> 00:21:21,120
takes all of those images and actually

00:21:18,720 --> 00:21:23,200
rebuilds a brand new builder image

00:21:21,120 --> 00:21:24,960
which was you know for me it was

00:21:23,200 --> 00:21:26,480
surprising for not many people it was

00:21:24,960 --> 00:21:29,600
like oh yeah that's obvious but

00:21:26,480 --> 00:21:31,280
it's not for me so it actually creates a

00:21:29,600 --> 00:21:34,000
brand new

00:21:31,280 --> 00:21:34,640
custom cf builder bill pack based on

00:21:34,000 --> 00:21:38,320
this

00:21:34,640 --> 00:21:40,400
spec um which is in

00:21:38,320 --> 00:21:41,679
this case our the the new one which is

00:21:40,400 --> 00:21:44,640
this

00:21:41,679 --> 00:21:46,720
so this is a sort of like culmination of

00:21:44,640 --> 00:21:49,440
the entire stack and store

00:21:46,720 --> 00:21:50,799
and the ordering into one big sort of

00:21:49,440 --> 00:21:53,520
builder itself

00:21:50,799 --> 00:21:54,080
and which you know i actually what i did

00:21:53,520 --> 00:21:58,880
is

00:21:54,080 --> 00:22:01,520
if i uh share my screen with you know

00:21:58,880 --> 00:22:01,520
where is my

00:22:02,640 --> 00:22:08,559
term is actually i

00:22:06,080 --> 00:22:09,679
i actually was able to pull that so this

00:22:08,559 --> 00:22:12,880
is the

00:22:09,679 --> 00:22:15,600
this is the sort of pack inspect that

00:22:12,880 --> 00:22:16,640
cf default builder that i showed you in

00:22:15,600 --> 00:22:20,159
docker hub

00:22:16,640 --> 00:22:20,640
and you can see that it tells you all of

00:22:20,159 --> 00:22:22,960
the

00:22:20,640 --> 00:22:24,240
sort of the stack version i'm using so

00:22:22,960 --> 00:22:26,880
this is a great way to look at

00:22:24,240 --> 00:22:28,640
what is you know what is being used when

00:22:26,880 --> 00:22:30,480
i'm actually building

00:22:28,640 --> 00:22:32,960
an image and these are all of the build

00:22:30,480 --> 00:22:36,080
packs as you saw i only had

00:22:32,960 --> 00:22:37,120
you know java but it expands into like

00:22:36,080 --> 00:22:41,360
jmx

00:22:37,120 --> 00:22:42,880
maven gradle apache tomcat

00:22:41,360 --> 00:22:44,559
you know these are all the sub packs

00:22:42,880 --> 00:22:46,640
within the top level

00:22:44,559 --> 00:22:48,159
language build pack so it's fascinating

00:22:46,640 --> 00:22:49,440
to see all that and then as you can see

00:22:48,159 --> 00:22:51,520
each of these have

00:22:49,440 --> 00:22:52,880
proper detection order which is taken

00:22:51,520 --> 00:22:55,679
directly from that custom

00:22:52,880 --> 00:22:57,120
builder crd that you saw a moment ago

00:22:55,679 --> 00:22:58,400
and then

00:22:57,120 --> 00:23:01,919
these are all again additional

00:22:58,400 --> 00:23:03,840
information that you may want to use

00:23:01,919 --> 00:23:06,000
so that's sort of like you can just dock

00:23:03,840 --> 00:23:08,480
or pull that image and inspect it

00:23:06,000 --> 00:23:10,960
what's interesting though is i took that

00:23:08,480 --> 00:23:14,400
and i i'm using pax cli so pax cli

00:23:10,960 --> 00:23:15,200
is the is the cli to that supports any

00:23:14,400 --> 00:23:18,400
cloud native

00:23:15,200 --> 00:23:20,080
build pack um uh you know

00:23:18,400 --> 00:23:21,520
uh implementation of a cloud native bill

00:23:20,080 --> 00:23:24,080
pack so

00:23:21,520 --> 00:23:24,559
so it uses pack so what i did is i just

00:23:24,080 --> 00:23:27,200
said

00:23:24,559 --> 00:23:29,520
i want to use this build builder that

00:23:27,200 --> 00:23:32,320
was built by kpac using my

00:23:29,520 --> 00:23:33,520
all of the configuration i gave and then

00:23:32,320 --> 00:23:37,280
i try to build an

00:23:33,520 --> 00:23:40,400
app directly just using pac

00:23:37,280 --> 00:23:42,960
in locally on my machine

00:23:40,400 --> 00:23:44,559
so this is like interesting because you

00:23:42,960 --> 00:23:45,360
could potentially see an app developer

00:23:44,559 --> 00:23:48,559
trying to like

00:23:45,360 --> 00:23:51,120
build an app image locally

00:23:48,559 --> 00:23:51,919
to using the custom builder image that

00:23:51,120 --> 00:23:55,039
we just had

00:23:51,919 --> 00:23:57,440
which i put in a sac set default

00:23:55,039 --> 00:23:58,960
to test if it actually works um within

00:23:57,440 --> 00:24:00,960
that so this is like something that

00:23:58,960 --> 00:24:02,159
a workload that did not exist maybe it

00:24:00,960 --> 00:24:05,360
may be something up

00:24:02,159 --> 00:24:06,559
app dealers will try to use but this is

00:24:05,360 --> 00:24:08,320
sort of like debugging

00:24:06,559 --> 00:24:09,919
situations are great like if you don't

00:24:08,320 --> 00:24:12,880
want to debug

00:24:09,919 --> 00:24:15,039
live in a con you know an entire cf4k

00:24:12,880 --> 00:24:17,760
foundation you just want to know if the

00:24:15,039 --> 00:24:19,360
app is actually not loading let's say

00:24:17,760 --> 00:24:20,559
for some reason it didn't restart or

00:24:19,360 --> 00:24:22,640
it's not starting

00:24:20,559 --> 00:24:24,880
this could be one way of debugging that

00:24:22,640 --> 00:24:26,960
locally to like okay let me just

00:24:24,880 --> 00:24:29,840
pack it and run it docker run this app

00:24:26,960 --> 00:24:32,000
and see if it's okay

00:24:29,840 --> 00:24:33,679
and that's something that i you know was

00:24:32,000 --> 00:24:36,880
pretty interesting for me

00:24:33,679 --> 00:24:40,799
when when i ran this one same exact

00:24:36,880 --> 00:24:40,799
line of code just happens to be local

00:24:41,840 --> 00:24:48,720
and then what's other part was okay so i

00:24:44,960 --> 00:24:50,159
i had two sets of custom builder so this

00:24:48,720 --> 00:24:51,520
is assuming let's say i added a new

00:24:50,159 --> 00:24:54,880
language pack so

00:24:51,520 --> 00:24:58,159
it will just update to a new one

00:24:54,880 --> 00:25:01,279
so i had these two sort of versions of

00:24:58,159 --> 00:25:02,159
bill builders and imagine a workflow for

00:25:01,279 --> 00:25:05,279
the operator

00:25:02,159 --> 00:25:06,880
where they actually have a new cv fixed

00:25:05,279 --> 00:25:09,600
in the stack

00:25:06,880 --> 00:25:10,080
and they want that whole thing to be not

00:25:09,600 --> 00:25:12,080
only

00:25:10,080 --> 00:25:13,360
to rebuild all those images but also

00:25:12,080 --> 00:25:15,919
update the

00:25:13,360 --> 00:25:17,039
the uh reroll those apps in you know in

00:25:15,919 --> 00:25:19,360
cfk8s

00:25:17,039 --> 00:25:20,159
so i know cappy's working towards that

00:25:19,360 --> 00:25:21,600
capability

00:25:20,159 --> 00:25:23,600
but i try what i'm trying to show you

00:25:21,600 --> 00:25:26,240
here is that how

00:25:23,600 --> 00:25:27,600
the the builder or in this case the pack

00:25:26,240 --> 00:25:29,919
can actually

00:25:27,600 --> 00:25:31,600
rebase it the app without actually

00:25:29,919 --> 00:25:34,400
rebuilding the whole image itself

00:25:31,600 --> 00:25:35,440
so what i have here is the is the older

00:25:34,400 --> 00:25:37,919
version

00:25:35,440 --> 00:25:40,240
so i set that as a as the default

00:25:37,919 --> 00:25:44,320
builder then i did a build

00:25:40,240 --> 00:25:46,240
and then i reset that to the newest one

00:25:44,320 --> 00:25:49,039
and i did a pack rebase

00:25:46,240 --> 00:25:50,320
and voila it just builds it without

00:25:49,039 --> 00:25:51,919
actually rebuilding the whole image so

00:25:50,320 --> 00:25:55,200
it just rebases it

00:25:51,919 --> 00:25:56,720
uh by just changing the

00:25:55,200 --> 00:25:58,240
i believe the run image i don't know how

00:25:56,720 --> 00:25:59,919
he does it i don't know how it

00:25:58,240 --> 00:26:02,640
changes the layer but it's there's some

00:25:59,919 --> 00:26:04,320
magic of like changing a layer

00:26:02,640 --> 00:26:07,919
and then just keeping the rest of that

00:26:04,320 --> 00:26:10,640
code intact and not rebuilding it

00:26:07,919 --> 00:26:11,360
so anyway so so i thought this is this

00:26:10,640 --> 00:26:14,480
is something that

00:26:11,360 --> 00:26:15,360
will eventually be part of our cfo k its

00:26:14,480 --> 00:26:17,760
workflow

00:26:15,360 --> 00:26:18,480
because this is like the the one half of

00:26:17,760 --> 00:26:20,159
the

00:26:18,480 --> 00:26:21,840
thing where we let's say stack update

00:26:20,159 --> 00:26:23,840
comes in you know

00:26:21,840 --> 00:26:25,200
kpac will take care of you know

00:26:23,840 --> 00:26:27,120
rebuilding those images

00:26:25,200 --> 00:26:28,320
so imagine that 10 apps all of those

00:26:27,120 --> 00:26:30,000
apps will get

00:26:28,320 --> 00:26:31,440
rebuilt or rebased actually that's the

00:26:30,000 --> 00:26:33,840
right framing

00:26:31,440 --> 00:26:34,720
and then you know cappy and irony will

00:26:33,840 --> 00:26:37,679
work together

00:26:34,720 --> 00:26:38,559
to reroll those apps so that the apps

00:26:37,679 --> 00:26:41,679
can

00:26:38,559 --> 00:26:43,840
um they're running with the latest stack

00:26:41,679 --> 00:26:46,240
so that workflow is pretty awesome uh

00:26:43,840 --> 00:26:48,480
for for many reasons

00:26:46,240 --> 00:26:50,400
because now you have patching your apps

00:26:48,480 --> 00:26:53,840
at a

00:26:50,400 --> 00:26:53,840
faster than light i suppose

00:26:58,000 --> 00:27:01,760
cool any questions so far

00:27:02,000 --> 00:27:06,640
so on on this patching of applications

00:27:05,840 --> 00:27:08,720
um what's

00:27:06,640 --> 00:27:09,840
like the general thought there is is

00:27:08,720 --> 00:27:13,200
that something

00:27:09,840 --> 00:27:14,240
that like ultimately administrators of

00:27:13,200 --> 00:27:17,279
the system

00:27:14,240 --> 00:27:19,200
need to decide um or is

00:27:17,279 --> 00:27:21,360
like is there also a choice that

00:27:19,200 --> 00:27:24,240
administrators could take and say

00:27:21,360 --> 00:27:25,120
like i wanna have for new applications

00:27:24,240 --> 00:27:27,760
that are pushed

00:27:25,120 --> 00:27:28,799
a new version of certain or build packs

00:27:27,760 --> 00:27:30,880
but then

00:27:28,799 --> 00:27:34,080
like leave the the existing running

00:27:30,880 --> 00:27:36,240
applications as they are

00:27:34,080 --> 00:27:37,600
that's it still it's nice i think that's

00:27:36,240 --> 00:27:39,919
a good question i i wonder

00:27:37,600 --> 00:27:42,080
why uh because if you have a stack

00:27:39,919 --> 00:27:43,120
update you probably don't want apps to

00:27:42,080 --> 00:27:45,679
be

00:27:43,120 --> 00:27:47,840
you know to be lagging behind i would

00:27:45,679 --> 00:27:49,600
probably want all the apps to be updated

00:27:47,840 --> 00:27:51,679
with the latest stack to

00:27:49,600 --> 00:27:52,960
ensure you know they are passed

00:27:51,679 --> 00:27:56,240
correctly

00:27:52,960 --> 00:27:57,840
um but i think

00:27:56,240 --> 00:27:59,600
not at least the way we are thinking

00:27:57,840 --> 00:28:00,559
about that workflow is just going to be

00:27:59,600 --> 00:28:03,600
all apps

00:28:00,559 --> 00:28:05,200
but you know but maybe in the future

00:28:03,600 --> 00:28:06,720
if there is a enough you know enough

00:28:05,200 --> 00:28:09,360
evidence that

00:28:06,720 --> 00:28:09,840
um maybe we'll figure out a way to i

00:28:09,360 --> 00:28:13,120
think

00:28:09,840 --> 00:28:14,640
psy part of it is uh for for some folks

00:28:13,120 --> 00:28:17,760
that they have policies

00:28:14,640 --> 00:28:20,960
around exactly what is allowed to

00:28:17,760 --> 00:28:23,760
be running in production and so

00:28:20,960 --> 00:28:25,279
even even if it's more secure they'll

00:28:23,760 --> 00:28:26,000
want that to run through pipelines they

00:28:25,279 --> 00:28:30,000
won't

00:28:26,000 --> 00:28:33,440
necessarily want to to update that

00:28:30,000 --> 00:28:34,799
right away um even if it has like abi

00:28:33,440 --> 00:28:38,799
compatibilities and

00:28:34,799 --> 00:28:42,000
we've not noticed any um

00:28:38,799 --> 00:28:42,640
any bad abi compatibility related

00:28:42,000 --> 00:28:44,880
updates

00:28:42,640 --> 00:28:46,320
uh in in the past many years we've been

00:28:44,880 --> 00:28:48,640
running cloud foundry but

00:28:46,320 --> 00:28:50,320
uh even so there are companies that have

00:28:48,640 --> 00:28:53,440
policies around what

00:28:50,320 --> 00:28:55,919
uh what exact bits are allowed to be

00:28:53,440 --> 00:28:57,279
uh serving traffic from a customer

00:28:55,919 --> 00:29:00,399
interesting

00:28:57,279 --> 00:29:01,039
yeah uh ue i think the place to control

00:29:00,399 --> 00:29:04,080
that is

00:29:01,039 --> 00:29:06,559
actually uh the admin of the foundry

00:29:04,080 --> 00:29:07,760
uh would decide when to update so there

00:29:06,559 --> 00:29:10,240
might be an upstream

00:29:07,760 --> 00:29:12,080
release of a new stack and they would

00:29:10,240 --> 00:29:13,360
decide when they want to apply that to

00:29:12,080 --> 00:29:16,559
their foundry and then

00:29:13,360 --> 00:29:19,600
subsequently restage all of the

00:29:16,559 --> 00:29:20,799
apps on it so

00:29:19,600 --> 00:29:22,559
baron did you ask about different

00:29:20,799 --> 00:29:24,320
versions of build packs or stacks i

00:29:22,559 --> 00:29:26,320
dismissed what you said

00:29:24,320 --> 00:29:27,520
a different versions of buildpacks

00:29:26,320 --> 00:29:30,320
actually right yeah

00:29:27,520 --> 00:29:31,840
okay that's also because you could have

00:29:30,320 --> 00:29:35,760
uh multiple versions of

00:29:31,840 --> 00:29:38,960
of the build packs correct

00:29:35,760 --> 00:29:41,360
yeah as long as the ids don't um collide

00:29:38,960 --> 00:29:42,880
collide yeah yeah because i think we've

00:29:41,360 --> 00:29:43,279
we've seen that pattern in the past

00:29:42,880 --> 00:29:44,960
where

00:29:43,279 --> 00:29:47,520
people will intentionally fork build

00:29:44,960 --> 00:29:50,720
packs and you know rename them to

00:29:47,520 --> 00:29:52,159
some pinned version uh again i think

00:29:50,720 --> 00:29:53,200
because of more of those compliance

00:29:52,159 --> 00:29:55,200
restrictions around

00:29:53,200 --> 00:29:56,320
like you know you know we've we vetted

00:29:55,200 --> 00:29:58,080
the

00:29:56,320 --> 00:29:59,279
language version that's coming from this

00:29:58,080 --> 00:30:00,880
version of the build pack but it's

00:29:59,279 --> 00:30:02,000
getting removed in a later one so we

00:30:00,880 --> 00:30:03,919
want to keep that around you know

00:30:02,000 --> 00:30:05,919
even if there are security implications

00:30:03,919 --> 00:30:07,279
so yeah it's but as long as the admin

00:30:05,919 --> 00:30:08,880
still has that control that they have

00:30:07,279 --> 00:30:11,440
with the current

00:30:08,880 --> 00:30:12,640
current build pack functionality like

00:30:11,440 --> 00:30:16,000
you can control the

00:30:12,640 --> 00:30:18,399
order in which their the build packs are

00:30:16,000 --> 00:30:18,399
processed

00:30:18,640 --> 00:30:23,039
i have to check on that as far as i know

00:30:21,440 --> 00:30:25,679
this is

00:30:23,039 --> 00:30:27,679
um managed by kpac but i could i could

00:30:25,679 --> 00:30:29,440
take a look at it

00:30:27,679 --> 00:30:31,279
i'm not too concerned about detect

00:30:29,440 --> 00:30:33,440
because you can always pin

00:30:31,279 --> 00:30:36,480
the specific version of the build pack

00:30:33,440 --> 00:30:38,399
by specifying it in manifest but

00:30:36,480 --> 00:30:40,399
yeah you could are you talking about

00:30:38,399 --> 00:30:42,880
this sort of like

00:30:40,399 --> 00:30:43,440
this sort of detection order where you

00:30:42,880 --> 00:30:45,360
know

00:30:43,440 --> 00:30:47,279
so this is the detection order like we

00:30:45,360 --> 00:30:48,399
will check ruby first and then python

00:30:47,279 --> 00:30:49,919
then java and then

00:30:48,399 --> 00:30:52,480
all the way down to the last one would

00:30:49,919 --> 00:30:54,640
be proc file uh

00:30:52,480 --> 00:30:56,000
and then within ruby there could be you

00:30:54,640 --> 00:30:57,760
know sub packs that have their own

00:30:56,000 --> 00:31:00,080
detection order

00:30:57,760 --> 00:31:02,240
that they want to check and so an admin

00:31:00,080 --> 00:31:04,159
might want to put the newer one first or

00:31:02,240 --> 00:31:05,679
the newer one second so that i don't

00:31:04,159 --> 00:31:06,559
know it depends on what they they want

00:31:05,679 --> 00:31:09,360
to do if we

00:31:06,559 --> 00:31:10,640
just make sure there's a knob still to

00:31:09,360 --> 00:31:13,039
configure the order because i

00:31:10,640 --> 00:31:15,200
i don't know if uh cloud-native build

00:31:13,039 --> 00:31:18,720
packs are sufficiently different that it

00:31:15,200 --> 00:31:21,519
breaks that probably wouldn't i'd

00:31:18,720 --> 00:31:22,720
have to start playing with it even like

00:31:21,519 --> 00:31:26,000
changing this order

00:31:22,720 --> 00:31:28,399
is that what you mean yeah

00:31:26,000 --> 00:31:29,919
like right now uh so i'm not familiar

00:31:28,399 --> 00:31:32,240
with kpac yet but

00:31:29,919 --> 00:31:33,039
um right now you can change the order in

00:31:32,240 --> 00:31:36,640
which the detect

00:31:33,039 --> 00:31:39,279
clips run correct i don't believe um

00:31:36,640 --> 00:31:39,679
uh that that's going to be a problem as

00:31:39,279 --> 00:31:41,679
in

00:31:39,679 --> 00:31:42,799
as in just from a buildback standpoint

00:31:41,679 --> 00:31:44,880
like what would it

00:31:42,799 --> 00:31:46,480
like if you i can rearrange any of these

00:31:44,880 --> 00:31:47,200
and it's just a matter of how long it's

00:31:46,480 --> 00:31:50,000
going to take

00:31:47,200 --> 00:31:51,039
for me to build right so if my

00:31:50,000 --> 00:31:54,399
organization

00:31:51,039 --> 00:31:55,840
is exclusively to java or then i would

00:31:54,399 --> 00:31:56,559
probably want the java to be the first

00:31:55,840 --> 00:31:58,559
order

00:31:56,559 --> 00:32:00,240
and then you know let's say i don't

00:31:58,559 --> 00:32:00,799
never don't use python at all over the

00:32:00,240 --> 00:32:03,360
bottom

00:32:00,799 --> 00:32:04,240
so that way you have a little faster

00:32:03,360 --> 00:32:07,600
detection

00:32:04,240 --> 00:32:09,200
um instead of like having languages that

00:32:07,600 --> 00:32:09,519
don't though you don't use at all as a

00:32:09,200 --> 00:32:12,960
top

00:32:09,519 --> 00:32:16,640
on the top of the order but yeah

00:32:12,960 --> 00:32:18,720
as far as i know that um there is

00:32:16,640 --> 00:32:19,919
uh i have to double check this but i

00:32:18,720 --> 00:32:22,000
don't know if it actually once it

00:32:19,919 --> 00:32:23,519
detects it just exits right away i

00:32:22,000 --> 00:32:27,840
that's my hypothesis but i'll have to

00:32:23,519 --> 00:32:31,200
double check uh oftentimes there may be

00:32:27,840 --> 00:32:32,720
a app that may have that both the text

00:32:31,200 --> 00:32:34,720
may come true and i haven't

00:32:32,720 --> 00:32:36,480
noticed that yet but i heard that so

00:32:34,720 --> 00:32:38,720
something i like to investigate at some

00:32:36,480 --> 00:32:38,720
point

00:32:39,120 --> 00:32:44,000
yeah i guess i'm looking at it from like

00:32:41,519 --> 00:32:47,039
a couple of angles so so first of all

00:32:44,000 --> 00:32:49,120
i think we indeed have seen

00:32:47,039 --> 00:32:51,200
things breaking in in very subtle ways

00:32:49,120 --> 00:32:53,840
with with build pack updates so i guess

00:32:51,200 --> 00:32:54,880
um on our end we want to give developers

00:32:53,840 --> 00:32:57,519
the control of

00:32:54,880 --> 00:32:59,039
when they update like we even tell them

00:32:57,519 --> 00:33:00,880
today that

00:32:59,039 --> 00:33:02,159
they should actually pin the build pack

00:33:00,880 --> 00:33:05,120
version and kind of

00:33:02,159 --> 00:33:05,840
consciously do do an update and yes

00:33:05,120 --> 00:33:08,480
granted

00:33:05,840 --> 00:33:09,919
other companies and organizations might

00:33:08,480 --> 00:33:12,399
have had different uh

00:33:09,919 --> 00:33:13,360
rules there the the other thing is is

00:33:12,399 --> 00:33:16,880
also like

00:33:13,360 --> 00:33:19,360
can people why that approach still

00:33:16,880 --> 00:33:21,039
kind of bring an own build pack like is

00:33:19,360 --> 00:33:24,399
it still supported that you can

00:33:21,039 --> 00:33:26,880
provide a git url and kind of

00:33:24,399 --> 00:33:29,360
stage an application with that url or do

00:33:26,880 --> 00:33:30,640
you now always need to like bring a

00:33:29,360 --> 00:33:33,039
container image and

00:33:30,640 --> 00:33:35,120
are you kind of as a developer still

00:33:33,039 --> 00:33:37,039
able to specify them

00:33:35,120 --> 00:33:39,919
on the location of that container image

00:33:37,039 --> 00:33:42,159
to actually stage an application

00:33:39,919 --> 00:33:44,080
would be like follow-up questions that

00:33:42,159 --> 00:33:46,559
come to my mind

00:33:44,080 --> 00:33:48,000
so just sort of unpack that so one thing

00:33:46,559 --> 00:33:49,360
you mentioned that you would want

00:33:48,000 --> 00:33:52,720
developers to

00:33:49,360 --> 00:33:55,360
have a control on the

00:33:52,720 --> 00:33:57,200
sort of what version of language they

00:33:55,360 --> 00:34:00,000
want to use so that's one yeah

00:33:57,200 --> 00:34:00,960
so control the version is there a reason

00:34:00,000 --> 00:34:04,399
why that should not be

00:34:00,960 --> 00:34:06,240
managed right um so like not come in a

00:34:04,399 --> 00:34:09,040
situation where what they are

00:34:06,240 --> 00:34:10,320
running as you said is like different

00:34:09,040 --> 00:34:13,839
from what they

00:34:10,320 --> 00:34:15,919
see if pushed initially and i think

00:34:13,839 --> 00:34:17,839
that's that's one concern and then the

00:34:15,919 --> 00:34:20,159
second question was

00:34:17,839 --> 00:34:22,079
adding a custom pill pack you said

00:34:20,159 --> 00:34:24,399
providing a url to

00:34:22,079 --> 00:34:25,119
the bill pack source code or the build

00:34:24,399 --> 00:34:27,919
pack image

00:34:25,119 --> 00:34:28,879
or like you so whatever is possible

00:34:27,919 --> 00:34:32,000
actually like today

00:34:28,879 --> 00:34:34,480
people provide the github url to a

00:34:32,000 --> 00:34:36,800
forked build pack for example or they

00:34:34,480 --> 00:34:38,639
provide the github url to like the

00:34:36,800 --> 00:34:39,679
original build pack but then to a

00:34:38,639 --> 00:34:42,639
specific

00:34:39,679 --> 00:34:44,079
uh commit test to to really kind of fix

00:34:42,639 --> 00:34:46,000
that version to

00:34:44,079 --> 00:34:48,480
something that they have tested with and

00:34:46,000 --> 00:34:51,280
i'm kind of wondering if that is still

00:34:48,480 --> 00:34:51,919
possible with with kpec or if like the

00:34:51,280 --> 00:34:54,560
metaphor

00:34:51,919 --> 00:34:56,960
changed and now everything is like

00:34:54,560 --> 00:34:59,680
packaged container images and then

00:34:56,960 --> 00:35:00,800
if developers can still like have a way

00:34:59,680 --> 00:35:04,560
one way or the other

00:35:00,800 --> 00:35:06,880
to kind of bring their own somehow

00:35:04,560 --> 00:35:08,320
yeah those are some good questions um so

00:35:06,880 --> 00:35:10,000
kpac really just

00:35:08,320 --> 00:35:11,760
you know it's underlyingly just like a

00:35:10,000 --> 00:35:13,599
wrap around pack so

00:35:11,760 --> 00:35:14,880
i think these are just like fundamental

00:35:13,599 --> 00:35:17,599
questions around

00:35:14,880 --> 00:35:19,280
like when adding a bill pack would like

00:35:17,599 --> 00:35:19,839
could you just point to a github that

00:35:19,280 --> 00:35:22,560
has

00:35:19,839 --> 00:35:24,480
sort of like you know the structure it

00:35:22,560 --> 00:35:26,240
expects and then it builds images based

00:35:24,480 --> 00:35:27,520
right off that or you can just consume

00:35:26,240 --> 00:35:30,320
an image directly with

00:35:27,520 --> 00:35:31,520
i'm assuming in both cases some pin

00:35:30,320 --> 00:35:34,800
abilities spin to a

00:35:31,520 --> 00:35:36,079
specific version so yeah i will uh

00:35:34,800 --> 00:35:38,079
those are some good questions i'll take

00:35:36,079 --> 00:35:38,560
a look at it um it should be fairly easy

00:35:38,079 --> 00:35:40,560
to

00:35:38,560 --> 00:35:41,839
verify what's interesting is the

00:35:40,560 --> 00:35:45,680
controlling the version

00:35:41,839 --> 00:35:48,880
from uh by the developers and

00:35:45,680 --> 00:35:51,440
i may actually uh check with you on that

00:35:48,880 --> 00:35:58,880
um post this meeting just to understand

00:35:51,440 --> 00:36:01,119
that workflow what that looks like um

00:35:58,880 --> 00:36:02,160
yeah this is great discussion anything

00:36:01,119 --> 00:36:07,520
else that

00:36:02,160 --> 00:36:10,640
um comes to all mine

00:36:07,520 --> 00:36:14,240
and if one area uh one thing i will

00:36:10,640 --> 00:36:17,359
quickly share also is the

00:36:14,240 --> 00:36:21,280
there is sample apps

00:36:17,359 --> 00:36:21,280
which i thought i had it somewhere

00:36:22,320 --> 00:36:27,280
yep so i'll share it in the zoom chat

00:36:25,280 --> 00:36:30,560
here's a quick

00:36:27,280 --> 00:36:32,560
sort of like list of apps that

00:36:30,560 --> 00:36:33,680
the the build packs team has put

00:36:32,560 --> 00:36:37,200
together

00:36:33,680 --> 00:36:39,839
on different apps and um

00:36:37,200 --> 00:36:40,800
in how different sort of like sub

00:36:39,839 --> 00:36:43,040
packages and

00:36:40,800 --> 00:36:44,480
and most of these are very simple uh

00:36:43,040 --> 00:36:48,160
apps and

00:36:44,480 --> 00:36:51,119
um i'll give you like an idea of

00:36:48,160 --> 00:36:52,320
uh how to sort of build unpack so i

00:36:51,119 --> 00:36:55,920
think i mentioned

00:36:52,320 --> 00:36:58,400
earlier as you can see in this php uh

00:36:55,920 --> 00:36:59,200
there's a bill pack yaml so i just need

00:36:58,400 --> 00:37:01,599
to make sure

00:36:59,200 --> 00:37:02,800
understand what this is actually doing

00:37:01,599 --> 00:37:05,920
uh is there something

00:37:02,800 --> 00:37:08,960
specific to php or is it is it something

00:37:05,920 --> 00:37:10,800
that bill pack team introduced um

00:37:08,960 --> 00:37:12,320
so those are some of the uh pros and

00:37:10,800 --> 00:37:13,760
cons that i have to double check on

00:37:12,320 --> 00:37:16,400
but you can all take a look at this when

00:37:13,760 --> 00:37:16,400
you have a chance

00:37:17,760 --> 00:37:25,920
cool um i got about

00:37:21,119 --> 00:37:29,040
what 20 minutes left is that accurate

00:37:25,920 --> 00:37:30,880
you want to take it ty yeah okay um

00:37:29,040 --> 00:37:32,240
i would love you to show some of the new

00:37:30,880 --> 00:37:35,839
things that we have done

00:37:32,240 --> 00:37:38,480
um around the upgrade up time

00:37:35,839 --> 00:37:39,920
is sort of like initiative so one of the

00:37:38,480 --> 00:37:42,400
key outcomes we want to

00:37:39,920 --> 00:37:43,359
achieve is really just stable upgrades

00:37:42,400 --> 00:37:46,720
over time

00:37:43,359 --> 00:37:49,599
and also have meet some of the uptime

00:37:46,720 --> 00:37:50,800
slos that we wanna like we had carry

00:37:49,599 --> 00:37:54,160
over from cf

00:37:50,800 --> 00:37:55,680
deployment and in one way we were trying

00:37:54,160 --> 00:37:57,440
to figure out like what's the

00:37:55,680 --> 00:37:59,280
best way to enforce this because we are

00:37:57,440 --> 00:38:03,440
still not there yet to enforce

00:37:59,280 --> 00:38:07,920
upgrade upgrades in our main pipeline

00:38:03,440 --> 00:38:07,920
so what we are doing now is actually

00:38:08,240 --> 00:38:12,720
enforcing upgrades like any any new

00:38:11,040 --> 00:38:15,680
change or any new

00:38:12,720 --> 00:38:17,200
um input that we get from the

00:38:15,680 --> 00:38:18,240
contributing teams or third-party

00:38:17,200 --> 00:38:20,240
dependencies

00:38:18,240 --> 00:38:21,280
will go through our traditionally pull

00:38:20,240 --> 00:38:24,400
request

00:38:21,280 --> 00:38:25,200
and what will happen there is like if i

00:38:24,400 --> 00:38:29,200
can show you

00:38:25,200 --> 00:38:32,800
one example of that perhaps is we are

00:38:29,200 --> 00:38:35,520
and we are checking for upgrades

00:38:32,800 --> 00:38:36,720
and uptime at the at the source so this

00:38:35,520 --> 00:38:39,760
is probably

00:38:36,720 --> 00:38:42,480
not a good example let me check this one

00:38:39,760 --> 00:38:43,040
and as you can see this is the one of

00:38:42,480 --> 00:38:44,720
that

00:38:43,040 --> 00:38:48,560
sort of checks that we are making right

00:38:44,720 --> 00:38:52,400
now and what this does is really just

00:38:48,560 --> 00:38:56,000
checks and upgrade from the

00:38:52,400 --> 00:38:58,000
from dev branch to the to the pr

00:38:56,000 --> 00:38:59,440
change and then so that's one so it

00:38:58,000 --> 00:39:00,720
makes sure that the upgrade actually is

00:38:59,440 --> 00:39:02,800
successful

00:39:00,720 --> 00:39:03,920
while it's actually checking that it

00:39:02,800 --> 00:39:06,880
also checks

00:39:03,920 --> 00:39:07,760
to make sure that an app that is pushed

00:39:06,880 --> 00:39:09,119
to the

00:39:07,760 --> 00:39:11,040
to the foundation is available

00:39:09,119 --> 00:39:12,400
throughout that upgrade

00:39:11,040 --> 00:39:14,960
to make sure that we don't see any

00:39:12,400 --> 00:39:17,599
downtime with app or

00:39:14,960 --> 00:39:19,599
the push ability of recent logs we put

00:39:17,599 --> 00:39:22,160
in a threshold of zero for app

00:39:19,599 --> 00:39:23,119
so any uh you know that means if for app

00:39:22,160 --> 00:39:27,440
downtime so if

00:39:23,119 --> 00:39:29,520
if even one call fails the pr will fail

00:39:27,440 --> 00:39:31,200
so the reason we did this is this

00:39:29,520 --> 00:39:32,720
provides the quickest feedback to the

00:39:31,200 --> 00:39:35,839
contributing teams

00:39:32,720 --> 00:39:38,240
rather than testing this way you know

00:39:35,839 --> 00:39:41,200
past the in our pipelines which

00:39:38,240 --> 00:39:42,000
may be caused by multiple commits or

00:39:41,200 --> 00:39:44,160
could be

00:39:42,000 --> 00:39:45,440
you know could be caused by a flake so

00:39:44,160 --> 00:39:48,000
so doing this

00:39:45,440 --> 00:39:49,520
this way gives immediate feedback to the

00:39:48,000 --> 00:39:52,320
teams for that specific

00:39:49,520 --> 00:39:53,040
change and they can use that as a

00:39:52,320 --> 00:39:56,000
vehicle

00:39:53,040 --> 00:39:58,160
mechanism to test in there locally and

00:39:56,000 --> 00:40:00,960
see if they can

00:39:58,160 --> 00:40:02,560
you know they can solve this problem you

00:40:00,960 --> 00:40:04,400
know

00:40:02,560 --> 00:40:06,079
make sure that it's upgradable and

00:40:04,400 --> 00:40:08,240
uptime is available

00:40:06,079 --> 00:40:10,400
or if it's a known issue for example

00:40:08,240 --> 00:40:12,000
when we add route controller switch over

00:40:10,400 --> 00:40:14,800
from cf routing to route controllers a

00:40:12,000 --> 00:40:17,440
brand new crds brand new routing systems

00:40:14,800 --> 00:40:18,880
it was bound to break then we would then

00:40:17,440 --> 00:40:22,160
go ahead and merge it because

00:40:18,880 --> 00:40:24,160
it's a planned sort of event where

00:40:22,160 --> 00:40:25,440
we know upgrade and up time will be

00:40:24,160 --> 00:40:27,359
impacted

00:40:25,440 --> 00:40:28,720
uh so this is something that we are

00:40:27,359 --> 00:40:29,520
trying to like make a first class

00:40:28,720 --> 00:40:31,440
citizen

00:40:29,520 --> 00:40:32,960
for upgrades and up times pretty happy

00:40:31,440 --> 00:40:34,400
with this so teams are liking this so

00:40:32,960 --> 00:40:37,440
we're hoping to

00:40:34,400 --> 00:40:40,400
you know employ this

00:40:37,440 --> 00:40:41,119
basically uh at all the inputs we take

00:40:40,400 --> 00:40:44,319
so including

00:40:41,119 --> 00:40:46,800
auto bombs of releases as well

00:40:44,319 --> 00:40:48,319
and when i look at that example of their

00:40:46,800 --> 00:40:50,560
psy i

00:40:48,319 --> 00:40:51,920
am not sure if i understand what has

00:40:50,560 --> 00:40:55,119
failed

00:40:51,920 --> 00:40:56,319
yeah so that is an iteration that we

00:40:55,119 --> 00:40:57,920
have to go through

00:40:56,319 --> 00:40:59,599
so this is the first iteration we came

00:40:57,920 --> 00:41:02,800
up with um

00:40:59,599 --> 00:41:04,960
and so this basically

00:41:02,800 --> 00:41:06,319
um i don't know i have a double check

00:41:04,960 --> 00:41:09,520
this could be a flake

00:41:06,319 --> 00:41:12,400
but there are some better messaging

00:41:09,520 --> 00:41:12,880
of what failed and making sure that we

00:41:12,400 --> 00:41:15,680
don't have

00:41:12,880 --> 00:41:16,480
flakes that reduce or ignore the value

00:41:15,680 --> 00:41:18,640
of this check

00:41:16,480 --> 00:41:19,599
so those are the two things that we want

00:41:18,640 --> 00:41:22,160
to double

00:41:19,599 --> 00:41:22,800
click on uh we just recently launched it

00:41:22,160 --> 00:41:25,680
so

00:41:22,800 --> 00:41:26,480
we're seeing flake for every five pr so

00:41:25,680 --> 00:41:29,440
we'll have to

00:41:26,480 --> 00:41:30,960
figure out why why that's happening um

00:41:29,440 --> 00:41:34,800
but yeah i think it's

00:41:30,960 --> 00:41:36,640
um i don't know why it fell i think it

00:41:34,800 --> 00:41:38,079
the messages got mixed up apparently

00:41:36,640 --> 00:41:41,359
because of this

00:41:38,079 --> 00:41:41,680
but if you look at the uh the actual

00:41:41,359 --> 00:41:43,440
check

00:41:41,680 --> 00:41:45,280
itself it's actually you know upgrade

00:41:43,440 --> 00:41:48,480
and uptime check it actually passed

00:41:45,280 --> 00:41:51,599
so we just have to figure out that don't

00:41:48,480 --> 00:41:53,920
mix and match images so that's a bug

00:41:51,599 --> 00:41:56,160
cool just i love the intention of this

00:41:53,920 --> 00:41:58,560
yeah yeah

00:41:56,160 --> 00:42:00,160
and then we also have like variety of

00:41:58,560 --> 00:42:02,319
other checks as well

00:42:00,160 --> 00:42:03,520
to again give more feedback to the teams

00:42:02,319 --> 00:42:05,920
right at the source

00:42:03,520 --> 00:42:07,839
one of them is we have noticed um

00:42:05,920 --> 00:42:09,839
contributing teams oftentimes would want

00:42:07,839 --> 00:42:12,800
to use a newest version of gates

00:42:09,839 --> 00:42:14,880
which is um which may not be available

00:42:12,800 --> 00:42:16,800
in the current version that we support

00:42:14,880 --> 00:42:18,960
so what we are doing actually now is

00:42:16,800 --> 00:42:20,160
checking on the newest and the oldest

00:42:18,960 --> 00:42:24,000
so that's a window that we want to

00:42:20,160 --> 00:42:24,880
support so like 1.14 to say 1.17 is a

00:42:24,000 --> 00:42:26,480
window

00:42:24,880 --> 00:42:27,920
and someone just comes in and says i

00:42:26,480 --> 00:42:29,520
want to use this new feature

00:42:27,920 --> 00:42:32,160
but it's not available in the oldest

00:42:29,520 --> 00:42:33,200
version so that gives us an opportunity

00:42:32,160 --> 00:42:34,960
to test here

00:42:33,200 --> 00:42:36,480
and then ask questions is it something

00:42:34,960 --> 00:42:40,480
we want to do

00:42:36,480 --> 00:42:42,079
and also there may be some uh

00:42:40,480 --> 00:42:44,720
you know goals for as a team that we

00:42:42,079 --> 00:42:47,359
want to stick to 116 for some time

00:42:44,720 --> 00:42:48,240
and you know this will shield us from

00:42:47,359 --> 00:42:52,480
those sort of like

00:42:48,240 --> 00:42:53,760
random sort of errors that we didn't

00:42:52,480 --> 00:42:55,440
which we may encounter in the main

00:42:53,760 --> 00:42:56,400
pipeline it's hard to debug at that

00:42:55,440 --> 00:42:58,480
point

00:42:56,400 --> 00:43:00,160
um so yeah so this is a good way it's

00:42:58,480 --> 00:43:02,880
like a ui ux way for

00:43:00,160 --> 00:43:05,440
teams to take a look at it um on all the

00:43:02,880 --> 00:43:08,400
checks that we're doing

00:43:05,440 --> 00:43:08,880
would it be too much to ask for a check

00:43:08,400 --> 00:43:12,640
that

00:43:08,880 --> 00:43:17,440
um the pull request still works

00:43:12,640 --> 00:43:21,359
against a very small uh environment

00:43:17,440 --> 00:43:24,480
a small environment as in like um

00:43:21,359 --> 00:43:25,599
like so i understand that um small

00:43:24,480 --> 00:43:29,520
environment as a

00:43:25,599 --> 00:43:32,319
mini cube okay we are

00:43:29,520 --> 00:43:32,640
i believe we are testing these unkind uh

00:43:32,319 --> 00:43:36,240
i'm

00:43:32,640 --> 00:43:38,880
positive we are testing this unkind uh

00:43:36,240 --> 00:43:39,599
not on gke some of these are because of

00:43:38,880 --> 00:43:41,520
the

00:43:39,599 --> 00:43:43,119
because gke does not have like the

00:43:41,520 --> 00:43:45,680
latest versions and we want to

00:43:43,119 --> 00:43:46,640
test against certain versions that the

00:43:45,680 --> 00:43:49,040
providers

00:43:46,640 --> 00:43:50,640
is providers may not have so i believe

00:43:49,040 --> 00:43:55,520
we are using um

00:43:50,640 --> 00:43:58,480
kind on this one

00:43:55,520 --> 00:43:59,119
cool the other thing i wanted to show

00:43:58,480 --> 00:44:03,359
you all

00:43:59,119 --> 00:44:07,119
is the uh on the on the same wayne of

00:44:03,359 --> 00:44:10,160
um upgrades and up times is

00:44:07,119 --> 00:44:10,960
trying to look at long-running

00:44:10,160 --> 00:44:14,800
environments

00:44:10,960 --> 00:44:15,599
so um figuring out a way to run cfo

00:44:14,800 --> 00:44:17,680
gates

00:44:15,599 --> 00:44:19,920
on a long-running environment so we can

00:44:17,680 --> 00:44:23,440
measure how stable it is

00:44:19,920 --> 00:44:26,480
we can also measure its some of the

00:44:23,440 --> 00:44:29,200
upgradeability uh and also

00:44:26,480 --> 00:44:30,720
measure its uptime so we started doing

00:44:29,200 --> 00:44:33,760
this recently

00:44:30,720 --> 00:44:36,640
this is our long lived environment

00:44:33,760 --> 00:44:37,200
and what this is is is basically lives

00:44:36,640 --> 00:44:39,839
at least

00:44:37,200 --> 00:44:40,640
forever now and then we upgrade it

00:44:39,839 --> 00:44:42,160
nightly

00:44:40,640 --> 00:44:44,079
and what we want to measure really is

00:44:42,160 --> 00:44:47,680
like is a foundation stable over

00:44:44,079 --> 00:44:50,000
let's say 30 days and 60 days and

00:44:47,680 --> 00:44:51,440
is every upgrade does it what kind of

00:44:50,000 --> 00:44:53,040
resource

00:44:51,440 --> 00:44:55,200
are there any resource leakages that we

00:44:53,040 --> 00:44:57,440
we haven't seen because every other test

00:44:55,200 --> 00:45:00,480
we do is usually just between

00:44:57,440 --> 00:45:01,040
create a brand new cluster brand new

00:45:00,480 --> 00:45:03,200
foundation

00:45:01,040 --> 00:45:04,880
upgrade to that but this specifically is

00:45:03,200 --> 00:45:07,920
testing resources

00:45:04,880 --> 00:45:10,560
and then also the health of cf and also

00:45:07,920 --> 00:45:13,040
the app availability and we've been

00:45:10,560 --> 00:45:16,960
testing this and pushing this data

00:45:13,040 --> 00:45:19,839
to our uptime reports to pingdom

00:45:16,960 --> 00:45:20,319
and the the measurement we are seeing

00:45:19,839 --> 00:45:23,760
here

00:45:20,319 --> 00:45:26,560
is um oh well very close

00:45:23,760 --> 00:45:27,520
so last how long has this been running

00:45:26,560 --> 00:45:29,839
june 17th

00:45:27,520 --> 00:45:31,839
so about you know decent up time and

00:45:29,839 --> 00:45:35,599
we're upgrading every night

00:45:31,839 --> 00:45:38,079
we saw early you know uptime sort of

00:45:35,599 --> 00:45:40,480
failures but that's around just right on

00:45:38,079 --> 00:45:41,760
the the known breaking changes

00:45:40,480 --> 00:45:44,160
so we're going to continue to measure

00:45:41,760 --> 00:45:46,480
this to get more confidence around

00:45:44,160 --> 00:45:50,400
how the cfoc gates doing overall when it

00:45:46,480 --> 00:45:50,400
comes to credibility and availability

00:45:52,800 --> 00:46:01,839
and then to throw more

00:46:03,680 --> 00:46:11,760
charts at you um we are also

00:46:07,839 --> 00:46:13,839
checking um how

00:46:11,760 --> 00:46:15,280
generally upgrades are doing like what's

00:46:13,839 --> 00:46:18,079
the you know

00:46:15,280 --> 00:46:19,359
upgrade time in minutes http pass rate

00:46:18,079 --> 00:46:22,800
and fail rate

00:46:19,359 --> 00:46:25,680
as you can see um that

00:46:22,800 --> 00:46:26,079
we are seeing an average of three to

00:46:25,680 --> 00:46:29,280
four

00:46:26,079 --> 00:46:32,720
minutes upgrade times so that's pretty

00:46:29,280 --> 00:46:35,520
awesome and then also

00:46:32,720 --> 00:46:36,560
as you can see like some markers on on

00:46:35,520 --> 00:46:39,680
on this date

00:46:36,560 --> 00:46:42,720
we released the 0.40 release and we

00:46:39,680 --> 00:46:44,400
test the upgrade from that point on so

00:46:42,720 --> 00:46:46,960
we're seeing some really great some

00:46:44,400 --> 00:46:50,560
green upgrades at this point

00:46:46,960 --> 00:46:52,400
again this is again to measure over time

00:46:50,560 --> 00:46:54,560
how we are doing with upgrades and

00:46:52,400 --> 00:46:55,680
stability and then use this information

00:46:54,560 --> 00:46:59,040
to

00:46:55,680 --> 00:47:00,319
talk to teams talk to you know different

00:46:59,040 --> 00:47:02,960
stakeholders like

00:47:00,319 --> 00:47:04,560
in this meeting and sort of build

00:47:02,960 --> 00:47:11,359
overall confidence around

00:47:04,560 --> 00:47:16,079
safe grades

00:47:11,359 --> 00:47:16,079
cool that's all i had um

00:47:16,640 --> 00:47:25,839
from for my session today

00:47:19,680 --> 00:47:30,880
any questions to sign

00:47:25,839 --> 00:47:30,880
that's really great ty yes definitely

00:47:32,079 --> 00:47:35,359
yeah as always we are always reviewing

00:47:34,079 --> 00:47:38,720
these things so love

00:47:35,359 --> 00:47:40,240
to get your feedback on you know things

00:47:38,720 --> 00:47:41,359
we may have missed things we will like

00:47:40,240 --> 00:47:43,920
do on an ad

00:47:41,359 --> 00:47:45,440
and thanks you for that feedback i will

00:47:43,920 --> 00:47:47,599
make sure that

00:47:45,440 --> 00:47:49,040
is captured and put in a bug somewhere

00:47:47,599 --> 00:47:52,400
but yeah love to

00:47:49,040 --> 00:47:55,440
i'll take a look at it and let us know

00:47:52,400 --> 00:47:57,760
yeah i wonder um bernd

00:47:55,440 --> 00:48:00,160
sap has always been very helpful with

00:47:57,760 --> 00:48:04,400
scalability testing and so

00:48:00,160 --> 00:48:08,319
i'm curious if if you're if sap is

00:48:04,400 --> 00:48:08,800
thinking about um piggybacking on any of

00:48:08,319 --> 00:48:10,960
these

00:48:08,800 --> 00:48:13,920
these pipelines to to help with the

00:48:10,960 --> 00:48:16,400
scalability aspects

00:48:13,920 --> 00:48:18,319
yeah i think definitely we are

00:48:16,400 --> 00:48:20,960
discussing about it i see that

00:48:18,319 --> 00:48:23,119
jens is also the call i'm not sure where

00:48:20,960 --> 00:48:26,079
we are with our discussions against do

00:48:23,119 --> 00:48:26,079
you have the very latest

00:48:26,720 --> 00:48:33,760
yeah so i think we are in the process of

00:48:30,800 --> 00:48:35,839
setting that up and and hoping that

00:48:33,760 --> 00:48:39,040
regard so we just had to a

00:48:35,839 --> 00:48:41,280
conversation internally from a

00:48:39,040 --> 00:48:43,520
kind of budget point of view right um

00:48:41,280 --> 00:48:46,480
what what we need to to support that

00:48:43,520 --> 00:48:47,040
so um we are good good on that side to

00:48:46,480 --> 00:48:50,640
to go

00:48:47,040 --> 00:48:52,880
right and i think uh yogeshan team

00:48:50,640 --> 00:48:54,079
started with some scalability testing

00:48:52,880 --> 00:48:58,079
around

00:48:54,079 --> 00:49:00,160
routing infrastructure but

00:48:58,079 --> 00:49:02,800
we can for sure also discuss how how to

00:49:00,160 --> 00:49:05,359
extend if if there is need

00:49:02,800 --> 00:49:05,359
to do so

00:49:05,839 --> 00:49:09,359
yeah so definitely scalability is i

00:49:08,079 --> 00:49:14,160
guess as always

00:49:09,359 --> 00:49:14,160
one of our most favorite topics

00:49:14,319 --> 00:49:22,160
yeah i i when i spoke to uh jan and

00:49:18,160 --> 00:49:22,800
rishto last during our regular sink last

00:49:22,160 --> 00:49:25,920
week

00:49:22,800 --> 00:49:29,520
they asked me or they they uh

00:49:25,920 --> 00:49:32,079
were going to introduce me to yogesh

00:49:29,520 --> 00:49:33,920
uh who was going to join our call on on

00:49:32,079 --> 00:49:35,280
our next regular sink to give us some

00:49:33,920 --> 00:49:37,520
updates on the

00:49:35,280 --> 00:49:38,319
um scalability test that they have done

00:49:37,520 --> 00:49:41,839
so far

00:49:38,319 --> 00:49:45,200
um on a cursory sort of uh

00:49:41,839 --> 00:49:47,920
number was that they did a cf push with

00:49:45,200 --> 00:49:49,520
1 000 parallels here push but they don't

00:49:47,920 --> 00:49:51,680
have didn't have results then so yogesh

00:49:49,520 --> 00:49:53,119
will hopefully give us more details on

00:49:51,680 --> 00:49:56,839
some of that so i'm pretty excited to

00:49:53,119 --> 00:49:59,839
hear the outcomes of that

00:49:56,839 --> 00:49:59,839
test

00:50:02,480 --> 00:50:05,920
call y'all okay any more questions to

00:50:05,520 --> 00:50:08,800
say

00:50:05,920 --> 00:50:08,800
before we wrap up

00:50:10,960 --> 00:50:15,119
if not then thank you very much sai that

00:50:13,359 --> 00:50:18,559
was really

00:50:15,119 --> 00:50:21,680
some cool topics and insights on those

00:50:18,559 --> 00:50:25,119
and then i guess for next time

00:50:21,680 --> 00:50:26,000
uh we still have one topic left that was

00:50:25,119 --> 00:50:28,079
kind of

00:50:26,000 --> 00:50:30,319
spun off from from the whole voting

00:50:28,079 --> 00:50:31,440
around people wanted to get an update on

00:50:30,319 --> 00:50:33,520
irene and that

00:50:31,440 --> 00:50:35,280
kind of went crazy and now i guess we

00:50:33,520 --> 00:50:37,040
got a whole lot of very interesting

00:50:35,280 --> 00:50:40,000
fallout presentations

00:50:37,040 --> 00:50:42,160
from that so i'll try and reach out to

00:50:40,000 --> 00:50:43,520
the folks from sousa who had a couple of

00:50:42,160 --> 00:50:47,119
topics to present

00:50:43,520 --> 00:50:50,800
and then hopefully she they can

00:50:47,119 --> 00:50:53,040
make it for for next time so with that

00:50:50,800 --> 00:50:55,119
thanks everybody and hope to see you in

00:50:53,040 --> 00:51:04,000
the next call

00:50:55,119 --> 00:51:04,000

YouTube URL: https://www.youtube.com/watch?v=aT-zgQ0-TXA


