Title: cf-for-k8s Monthly SIG [August 18, 2020]
Publication date: 2020-08-19
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:01:24,840 --> 00:01:27,840
be

00:02:00,960 --> 00:02:06,320
hello all right troy standing in

00:02:04,320 --> 00:02:08,959
for parents who hopefully is having a

00:02:06,320 --> 00:02:11,840
great holiday

00:02:08,959 --> 00:02:13,200
just wait for a few minutes for some

00:02:11,840 --> 00:02:16,239
more people to trickle and i don't know

00:02:13,200 --> 00:02:16,239
what you'd expect today

00:02:18,400 --> 00:02:26,640
welcome all the cloud foundry

00:02:22,800 --> 00:02:36,800
kubernetes sig for tuesday august the

00:02:26,640 --> 00:02:40,160
18th 2020.

00:02:36,800 --> 00:02:40,160
talk amongst yourselves

00:02:45,280 --> 00:02:48,840
i anticipate we'll be a little thin on

00:02:46,959 --> 00:02:53,519
the ground today because of

00:02:48,840 --> 00:02:55,630
kubecon um and because of vacations so

00:02:53,519 --> 00:02:58,879
that's what this week is

00:02:55,630 --> 00:03:02,000
[Laughter]

00:02:58,879 --> 00:03:03,040
as uh tell me shut up as soon as we get

00:03:02,000 --> 00:03:04,480
to the point where you actually want to

00:03:03,040 --> 00:03:05,280
sort of have important stuff has anyone

00:03:04,480 --> 00:03:08,400
here um

00:03:05,280 --> 00:03:12,239
attended qcon online

00:03:08,400 --> 00:03:13,760
alert yeah is it worthwhile we didn't

00:03:12,239 --> 00:03:14,239
bother sponsoring because i was like if

00:03:13,760 --> 00:03:15,440
i can't

00:03:14,239 --> 00:03:17,360
stand in front of people and have a

00:03:15,440 --> 00:03:19,040
conversation with them there's not going

00:03:17,360 --> 00:03:23,760
to be a huge amount of value for us

00:03:19,040 --> 00:03:26,319
but uh have you found it valuable so far

00:03:23,760 --> 00:03:27,760
i i can't speak for the people at sus i

00:03:26,319 --> 00:03:31,120
mean susan went all in

00:03:27,760 --> 00:03:33,200
um and there's a lot of the organization

00:03:31,120 --> 00:03:35,040
that is participating more actively it's

00:03:33,200 --> 00:03:38,319
just really hard from the west coast

00:03:35,040 --> 00:03:40,000
uh as we've seen from various people

00:03:38,319 --> 00:03:43,040
complaining about time zones

00:03:40,000 --> 00:03:45,760
but uh yeah it's just hard i've i

00:03:43,040 --> 00:03:46,319
i will catch a few of the talks um if i

00:03:45,760 --> 00:03:49,599
can

00:03:46,319 --> 00:03:51,360
but yeah the social aspect is going to

00:03:49,599 --> 00:03:52,000
be hard and the conversations are going

00:03:51,360 --> 00:03:55,519
to be harder

00:03:52,000 --> 00:03:58,959
i found um uh i found

00:03:55,519 --> 00:04:01,599
cf summit virtual to be very valuable

00:03:58,959 --> 00:04:03,280
uh but with kubecon being so huge i

00:04:01,599 --> 00:04:05,200
don't know if it would uh

00:04:03,280 --> 00:04:06,720
it would have the same feel because we

00:04:05,200 --> 00:04:08,400
had just a single track and

00:04:06,720 --> 00:04:09,840
we sort of a slightly we're a smaller

00:04:08,400 --> 00:04:11,519
community that knows each other better

00:04:09,840 --> 00:04:14,959
and so we were able to connect but

00:04:11,519 --> 00:04:18,400
uh i i find virtual kubecon

00:04:14,959 --> 00:04:18,400
a bit disorienting to be honest

00:04:18,959 --> 00:04:23,120
i think we'll call this a quorum uh of

00:04:21,919 --> 00:04:26,160
interested parties

00:04:23,120 --> 00:04:28,479
in kubernetes and cloud foundry

00:04:26,160 --> 00:04:29,680
so as i said before welcome to the uh

00:04:28,479 --> 00:04:32,880
kubernetes sig

00:04:29,680 --> 00:04:34,960
uh tuesday august 18th 2020.

00:04:32,880 --> 00:04:36,000
we're already recording so we don't have

00:04:34,960 --> 00:04:39,440
to kick that off

00:04:36,000 --> 00:04:42,160
i would like to uh thank

00:04:39,440 --> 00:04:42,560
uh benjamin fuller for agreeing to talk

00:04:42,160 --> 00:04:45,600
to us

00:04:42,560 --> 00:04:46,160
about logging today and so if you're

00:04:45,600 --> 00:04:49,199
ready

00:04:46,160 --> 00:04:51,840
uh ben i'd be happy to

00:04:49,199 --> 00:04:53,680
just turn this over to you yeah i i

00:04:51,840 --> 00:04:54,880
should be ready or at least as ready as

00:04:53,680 --> 00:04:57,520
i'll ever be

00:04:54,880 --> 00:04:58,240
um let me see if i can share my screen

00:04:57,520 --> 00:05:00,639
here

00:04:58,240 --> 00:05:02,320
so i actually have these i post uh

00:05:00,639 --> 00:05:03,039
posted the slide show and i can do it

00:05:02,320 --> 00:05:06,400
again

00:05:03,039 --> 00:05:08,720
in the chat and it should have um notes

00:05:06,400 --> 00:05:11,280
um to go along with it i believe i

00:05:08,720 --> 00:05:13,680
haven't looked at the um

00:05:11,280 --> 00:05:14,639
the specific file yet too closely except

00:05:13,680 --> 00:05:16,639
for the pdf

00:05:14,639 --> 00:05:18,160
and i don't believe that one has notes

00:05:16,639 --> 00:05:20,080
but the the two

00:05:18,160 --> 00:05:21,440
i would hope that the two other ones do

00:05:20,080 --> 00:05:25,680
have notes

00:05:21,440 --> 00:05:27,840
um so i'm ben i'm ben fuller i'm the uh

00:05:25,680 --> 00:05:29,520
anchor of vlogging egress the formerly

00:05:27,840 --> 00:05:31,199
the logger gator team

00:05:29,520 --> 00:05:32,960
um i just wanted to talk a little bit

00:05:31,199 --> 00:05:36,160
about logging like

00:05:32,960 --> 00:05:38,080
um what was the past uh what or i should

00:05:36,160 --> 00:05:38,720
say what is the present in somewhat in a

00:05:38,080 --> 00:05:42,160
lot of ways

00:05:38,720 --> 00:05:45,280
of uh logging on uh cf

00:05:42,160 --> 00:05:48,240
in terms of like the previous bar

00:05:45,280 --> 00:05:49,919
architecture um what have we learned

00:05:48,240 --> 00:05:50,800
during that period of time and what have

00:05:49,919 --> 00:05:52,720
we created

00:05:50,800 --> 00:05:53,919
and how are we bringing that forward

00:05:52,720 --> 00:05:57,039
into cf

00:05:53,919 --> 00:05:59,440
uh for kate's um

00:05:57,039 --> 00:06:00,639
and so i think first the the first thing

00:05:59,440 --> 00:06:04,000
i want to talk about is

00:06:00,639 --> 00:06:07,440
like um oftentimes it's easy to

00:06:04,000 --> 00:06:08,880
look at one small section of cf and say

00:06:07,440 --> 00:06:11,440
this is what cf is

00:06:08,880 --> 00:06:12,160
and this is who we serve but we actually

00:06:11,440 --> 00:06:15,520
serve

00:06:12,160 --> 00:06:17,919
a lot more than a single uh

00:06:15,520 --> 00:06:19,680
person when we're making cf for logs so

00:06:17,919 --> 00:06:20,080
the the initial people we often think

00:06:19,680 --> 00:06:22,800
about

00:06:20,080 --> 00:06:23,199
is when you cf push an app you want to

00:06:22,800 --> 00:06:25,919
see

00:06:23,199 --> 00:06:27,520
see logs come out and when you call cf

00:06:25,919 --> 00:06:29,759
logs on the command line

00:06:27,520 --> 00:06:30,720
you see locks and this is something that

00:06:29,759 --> 00:06:33,199
um

00:06:30,720 --> 00:06:34,080
is indeed what we do to a larger degree

00:06:33,199 --> 00:06:38,000
um

00:06:34,080 --> 00:06:41,039
but it's not the only subset of people

00:06:38,000 --> 00:06:41,840
we do things for um and one of the other

00:06:41,039 --> 00:06:45,039
big things

00:06:41,840 --> 00:06:48,000
that we do uh is

00:06:45,039 --> 00:06:48,479
uh serve platform managers so people who

00:06:48,000 --> 00:06:51,919
deploy

00:06:48,479 --> 00:06:54,319
cf often want to

00:06:51,919 --> 00:06:56,880
take all of their logs and put it

00:06:54,319 --> 00:07:00,080
somewhere else whether that be

00:06:56,880 --> 00:07:01,520
like a bucket somewhere or an external

00:07:00,080 --> 00:07:03,039
observability tool

00:07:01,520 --> 00:07:04,800
or something else they want to take all

00:07:03,039 --> 00:07:05,840
their logs and you rest it off of the

00:07:04,800 --> 00:07:08,880
platform

00:07:05,840 --> 00:07:13,440
um and this is a use case that uh

00:07:08,880 --> 00:07:16,000
comes up that we hear a lot of uh

00:07:13,440 --> 00:07:17,039
problems for a lot of it comes around uh

00:07:16,000 --> 00:07:19,280
scaling

00:07:17,039 --> 00:07:20,319
a lot of it comes around like making

00:07:19,280 --> 00:07:23,520
sure

00:07:20,319 --> 00:07:25,280
uh that the uh

00:07:23,520 --> 00:07:26,560
platform can integrate with the tool

00:07:25,280 --> 00:07:29,919
that they're using

00:07:26,560 --> 00:07:31,919
um but it's something that we hear come

00:07:29,919 --> 00:07:35,680
up a lot and it's something that uh

00:07:31,919 --> 00:07:38,160
we've had trouble serving in the past um

00:07:35,680 --> 00:07:40,240
and in turn that turn those terms the

00:07:38,160 --> 00:07:41,759
the group that actually wants these logs

00:07:40,240 --> 00:07:45,120
egressed isn't always the

00:07:41,759 --> 00:07:47,440
group that is deploying the cf sometimes

00:07:45,120 --> 00:07:49,599
um you have a large uh group of people

00:07:47,440 --> 00:07:51,680
you have application developers on that

00:07:49,599 --> 00:07:52,720
in that group you have platform managers

00:07:51,680 --> 00:07:54,400
but you also have

00:07:52,720 --> 00:07:56,800
a separate group of people who want to

00:07:54,400 --> 00:07:59,680
ensure that all of the logs either

00:07:56,800 --> 00:08:00,960
go off platform either to make sure that

00:07:59,680 --> 00:08:02,879
application developers have

00:08:00,960 --> 00:08:03,759
observability in some other form besides

00:08:02,879 --> 00:08:06,800
cf logs

00:08:03,759 --> 00:08:09,120
so like a dashboard pane or

00:08:06,800 --> 00:08:10,800
to make sure that logs are retained for

00:08:09,120 --> 00:08:14,400
some sort of compliance reasons either

00:08:10,800 --> 00:08:14,400
for security or for

00:08:14,639 --> 00:08:21,599
legal requirements um

00:08:18,479 --> 00:08:24,800
we also have work with uh partners and

00:08:21,599 --> 00:08:26,879
service teams partners being often

00:08:24,800 --> 00:08:28,479
the kind of groups that observability

00:08:26,879 --> 00:08:30,000
teams work with so

00:08:28,479 --> 00:08:31,919
we're talking about people who develop

00:08:30,000 --> 00:08:35,039
pains and uh

00:08:31,919 --> 00:08:36,719
observability tools to view logs

00:08:35,039 --> 00:08:38,479
and we are also talking about services

00:08:36,719 --> 00:08:41,839
in terms of

00:08:38,479 --> 00:08:44,880
uh like add-ons to the platform

00:08:41,839 --> 00:08:45,920
um uh people who make service brokers

00:08:44,880 --> 00:08:48,160
for cf

00:08:45,920 --> 00:08:49,279
often want to have logs exposed to

00:08:48,160 --> 00:08:51,360
developers as well

00:08:49,279 --> 00:08:52,640
and that's something which people we

00:08:51,360 --> 00:08:54,080
work with to try and make sure those

00:08:52,640 --> 00:08:56,959
logs are exposed

00:08:54,080 --> 00:08:57,920
um and then of course component authors

00:08:56,959 --> 00:09:00,560
other people

00:08:57,920 --> 00:09:02,000
who are making cf um who want to make

00:09:00,560 --> 00:09:05,600
sure their logs

00:09:02,000 --> 00:09:06,240
um see copy logs router logs all sorts

00:09:05,600 --> 00:09:08,720
of things

00:09:06,240 --> 00:09:10,880
get into the live stream as well and are

00:09:08,720 --> 00:09:14,240
visible to application developers

00:09:10,880 --> 00:09:17,519
are sent to external compliance teams

00:09:14,240 --> 00:09:19,839
and are sent to are visible to platform

00:09:17,519 --> 00:09:22,959
managers all these sorts of things

00:09:19,839 --> 00:09:25,040
um and so

00:09:22,959 --> 00:09:26,160
i wanted to briefly take a look at this

00:09:25,040 --> 00:09:28,959
and this is

00:09:26,160 --> 00:09:29,920
this is the current uh architecture for

00:09:28,959 --> 00:09:31,360
logger gator

00:09:29,920 --> 00:09:34,160
i'm not going to get into too much

00:09:31,360 --> 00:09:37,360
detail um in this picture

00:09:34,160 --> 00:09:38,320
um i just wanted to show it briefly to

00:09:37,360 --> 00:09:40,880
say

00:09:38,320 --> 00:09:41,760
this is what it is but it it mostly sums

00:09:40,880 --> 00:09:44,160
to

00:09:41,760 --> 00:09:46,160
we've got a vm we've got a thing that

00:09:44,160 --> 00:09:49,519
wants to emit logs this could be

00:09:46,160 --> 00:09:52,720
diego is a big example of this um

00:09:49,519 --> 00:09:55,200
logs which i say in this case is

00:09:52,720 --> 00:09:56,880
i say stock because it could be metrics

00:09:55,200 --> 00:10:00,080
go to an agent

00:09:56,880 --> 00:10:03,120
those uh things those logs or metrics

00:10:00,080 --> 00:10:05,360
go to other agents um

00:10:03,120 --> 00:10:07,760
those agents send it to bms which

00:10:05,360 --> 00:10:10,240
communicate with other vms

00:10:07,760 --> 00:10:11,600
which are then contacted by some sort of

00:10:10,240 --> 00:10:13,920
external user

00:10:11,600 --> 00:10:15,279
uh and by external it could be within

00:10:13,920 --> 00:10:17,360
the platform it could be outside the

00:10:15,279 --> 00:10:19,600
platform it could be all sorts of things

00:10:17,360 --> 00:10:21,120
um but it's it's some user of the

00:10:19,600 --> 00:10:25,360
logging system in general

00:10:21,120 --> 00:10:28,399
who wants to get the logs um

00:10:25,360 --> 00:10:29,760
and so in general um

00:10:28,399 --> 00:10:32,000
what we've learned or some of the things

00:10:29,760 --> 00:10:34,880
we've learned over the years is that

00:10:32,000 --> 00:10:36,880
aggregation isn't scalable or at least

00:10:34,880 --> 00:10:38,959
uh

00:10:36,880 --> 00:10:40,800
it's difficult to scale in a way that

00:10:38,959 --> 00:10:44,959
isn't very redundant

00:10:40,800 --> 00:10:48,160
um so uh we have dopplers

00:10:44,959 --> 00:10:49,920
in in the original diagram here we have

00:10:48,160 --> 00:10:52,160
doppler's traffic controllers and

00:10:49,920 --> 00:10:56,160
reverse lock proxies

00:10:52,160 --> 00:11:00,000
and um while this is something that

00:10:56,160 --> 00:11:03,200
uh has helped in some ways uh it also

00:11:00,000 --> 00:11:05,839
has run into scaling limitations uh

00:11:03,200 --> 00:11:07,600
and it's something that uh even when

00:11:05,839 --> 00:11:08,959
even though it's so supposed to make it

00:11:07,600 --> 00:11:12,000
easier to

00:11:08,959 --> 00:11:14,720
uh consume from the system

00:11:12,000 --> 00:11:15,279
uh it usually there's usually a separate

00:11:14,720 --> 00:11:18,240
sense

00:11:15,279 --> 00:11:18,959
of like redundant scalability beyond

00:11:18,240 --> 00:11:20,399
that

00:11:18,959 --> 00:11:22,399
um and so one of the things we've been

00:11:20,399 --> 00:11:24,000
working towards is

00:11:22,399 --> 00:11:26,000
uh moving towards agent-based

00:11:24,000 --> 00:11:27,600
architectures we did this with scalable

00:11:26,000 --> 00:11:29,440
syslog and we've done this even more

00:11:27,600 --> 00:11:32,800
with

00:11:29,440 --> 00:11:35,040
these new syslog agents um and this is

00:11:32,800 --> 00:11:38,160
something that has scaled a lot

00:11:35,040 --> 00:11:40,079
higher um as a top level but it's just

00:11:38,160 --> 00:11:43,440
also a lot easier for

00:11:40,079 --> 00:11:46,640
a lot of our customers to scale um

00:11:43,440 --> 00:11:47,920
than the old fire hose patterns um

00:11:46,640 --> 00:11:49,440
people would look at the fire hose and

00:11:47,920 --> 00:11:50,800
they'd be like how much how much

00:11:49,440 --> 00:11:52,560
dopplers do i need how much

00:11:50,800 --> 00:11:54,000
traffic controllers do i need how how

00:11:52,560 --> 00:11:57,440
big should they be

00:11:54,000 --> 00:11:58,320
and um this was always very difficult to

00:11:57,440 --> 00:12:01,440
answer

00:11:58,320 --> 00:12:03,279
whereas um when we're looking at agents

00:12:01,440 --> 00:12:05,200
um it's only about you know how much

00:12:03,279 --> 00:12:07,040
footprint do they consume on a specific

00:12:05,200 --> 00:12:10,399
yum that is producing logs

00:12:07,040 --> 00:12:13,839
and how do i make sure i have a

00:12:10,399 --> 00:12:16,399
ha architecture to receive those logs

00:12:13,839 --> 00:12:18,639
something that you usually need anyways

00:12:16,399 --> 00:12:18,639
to

00:12:19,760 --> 00:12:24,560
service logs into anything substantially

00:12:23,360 --> 00:12:28,720
big

00:12:24,560 --> 00:12:29,120
um something we've also learned is that

00:12:28,720 --> 00:12:30,959
uh

00:12:29,120 --> 00:12:32,639
people have a lot of difficulty working

00:12:30,959 --> 00:12:33,360
with the fire hose because i'm not gonna

00:12:32,639 --> 00:12:36,240
say

00:12:33,360 --> 00:12:38,240
oh shoot uh proprietaries may be a

00:12:36,240 --> 00:12:41,680
little bit of a stretch here um

00:12:38,240 --> 00:12:42,000
but uh the logger gator interface the

00:12:41,680 --> 00:12:45,279
the

00:12:42,000 --> 00:12:46,639
the whether it's the grpc fact of it

00:12:45,279 --> 00:12:49,120
or just the fact that we're talking

00:12:46,639 --> 00:12:50,880
about uh envelopes as a concept

00:12:49,120 --> 00:12:52,480
um is something that's very sticky but

00:12:50,880 --> 00:12:55,519
also like has

00:12:52,480 --> 00:12:58,639
a higher barrier to entry uh than

00:12:55,519 --> 00:12:59,200
a lot of people would like and it often

00:12:58,639 --> 00:13:02,240
leads to

00:12:59,200 --> 00:13:03,519
difficulty changing things um

00:13:02,240 --> 00:13:05,519
because people spend a lot of time

00:13:03,519 --> 00:13:07,600
working on the nozzle and then we

00:13:05,519 --> 00:13:08,720
change things and people aren't too

00:13:07,600 --> 00:13:11,120
happy about it

00:13:08,720 --> 00:13:11,760
um one of the things we've been looking

00:13:11,120 --> 00:13:14,639
and working

00:13:11,760 --> 00:13:14,639
towards a lot is

00:13:16,240 --> 00:13:23,360
moving messages to syslog a lot of

00:13:20,000 --> 00:13:24,399
old sysadmin like patterns follow the

00:13:23,360 --> 00:13:27,600
syslog pattern and

00:13:24,399 --> 00:13:28,399
it's been very successful we've had some

00:13:27,600 --> 00:13:32,560
people using

00:13:28,399 --> 00:13:34,800
http over json it's not as performant as

00:13:32,560 --> 00:13:36,320
syslock but it's it's something that is

00:13:34,800 --> 00:13:38,880
easy to integrate with

00:13:36,320 --> 00:13:40,560
um and it's just something that we've

00:13:38,880 --> 00:13:43,600
been trying to work towards

00:13:40,560 --> 00:13:45,680
making sure our interfaces are uh

00:13:43,600 --> 00:13:48,079
widely adopted the interfaces we choose

00:13:45,680 --> 00:13:50,560
are as widely adopted as possible and

00:13:48,079 --> 00:13:53,920
are as little custom as possible

00:13:50,560 --> 00:13:56,959
um we've learned that um

00:13:53,920 --> 00:13:58,720
people want to filter things so the

00:13:56,959 --> 00:14:00,720
the oldest version i can think of of the

00:13:58,720 --> 00:14:03,279
fire hose you connect

00:14:00,720 --> 00:14:04,079
you say i want everything and you get

00:14:03,279 --> 00:14:07,920
everything

00:14:04,079 --> 00:14:11,519
and there's some a degree of filtering

00:14:07,920 --> 00:14:14,560
but um a lot of

00:14:11,519 --> 00:14:16,000
consuming the the all the the logs of

00:14:14,560 --> 00:14:18,240
the entire platform while it is

00:14:16,000 --> 00:14:19,760
one big use case it isn't necessarily

00:14:18,240 --> 00:14:22,800
always your use case

00:14:19,760 --> 00:14:25,199
um sometimes you want smaller subsets of

00:14:22,800 --> 00:14:26,639
platform uh logging data and that's

00:14:25,199 --> 00:14:28,959
something that

00:14:26,639 --> 00:14:29,680
we haven't as been as good as sometimes

00:14:28,959 --> 00:14:33,920
in the past

00:14:29,680 --> 00:14:33,920
at exposing to people um

00:14:35,199 --> 00:14:40,959
um one thing we've learned as well is

00:14:36,720 --> 00:14:40,959
that blogs and mentors are different

00:14:41,440 --> 00:14:44,480
something that uh one of the big

00:14:43,279 --> 00:14:45,519
problems is that metrics are

00:14:44,480 --> 00:14:48,000
compressible

00:14:45,519 --> 00:14:49,600
and treating them like logs doesn't

00:14:48,000 --> 00:14:51,040
treat them as compressible which often

00:14:49,600 --> 00:14:52,160
leads to a large amount of load going

00:14:51,040 --> 00:14:54,639
through the system

00:14:52,160 --> 00:14:56,480
but we've also learned that as

00:14:54,639 --> 00:14:59,040
prometheus has come through and other

00:14:56,480 --> 00:14:59,760
other tooling has come through there's a

00:14:59,040 --> 00:15:01,600
lot different

00:14:59,760 --> 00:15:03,120
methodology on how to make metrics

00:15:01,600 --> 00:15:05,360
useful that

00:15:03,120 --> 00:15:06,399
you don't get by treating the monk logs

00:15:05,360 --> 00:15:09,760
and that's something you

00:15:06,399 --> 00:15:11,600
would like to do more in the future

00:15:09,760 --> 00:15:14,560
and we want to try and use more open

00:15:11,600 --> 00:15:16,000
source tooling rather than

00:15:14,560 --> 00:15:17,920
building our own tools so we've been

00:15:16,000 --> 00:15:21,680
looking towards fluent fluency

00:15:17,920 --> 00:15:24,320
fluent bit stuff like that to try and

00:15:21,680 --> 00:15:25,440
be able to leverage the open source

00:15:24,320 --> 00:15:28,480
tools to deliver

00:15:25,440 --> 00:15:31,519
cf outcomes um

00:15:28,480 --> 00:15:32,880
rather than always for seeking to

00:15:31,519 --> 00:15:35,040
deliver the outcome as quickly as

00:15:32,880 --> 00:15:36,560
possible

00:15:35,040 --> 00:15:38,720
i think that i hope that's something

00:15:36,560 --> 00:15:40,480
that we start to see

00:15:38,720 --> 00:15:41,839
benefits going through going forward but

00:15:40,480 --> 00:15:45,040
we've also seen this

00:15:41,839 --> 00:15:47,920
in other parts of cf uh as we

00:15:45,040 --> 00:15:49,600
move towards to see up for caves uh even

00:15:47,920 --> 00:15:52,000
moving towards kubernetes is

00:15:49,600 --> 00:15:52,959
kind of one of the outcomes of trying to

00:15:52,000 --> 00:15:56,639
leverage

00:15:52,959 --> 00:15:58,480
more open source products um

00:15:56,639 --> 00:16:00,079
and we've also learned that uh something

00:15:58,480 --> 00:16:01,759
that we've always kind of known is that

00:16:00,079 --> 00:16:03,600
context gives large value

00:16:01,759 --> 00:16:06,000
knowing that hello world exists as a

00:16:03,600 --> 00:16:07,839
lock is has some degree of value

00:16:06,000 --> 00:16:09,040
but it's a lot more valuable to know

00:16:07,839 --> 00:16:13,600
that like my

00:16:09,040 --> 00:16:16,240
application is saying hello world um

00:16:13,600 --> 00:16:17,360
and it belongs to me and it's in this

00:16:16,240 --> 00:16:20,480
place

00:16:17,360 --> 00:16:21,199
um and that's what we've learned over

00:16:20,480 --> 00:16:24,959
the years

00:16:21,199 --> 00:16:27,839
and to oh sorry there's one more point

00:16:24,959 --> 00:16:29,519
um we also want to use this opportunity

00:16:27,839 --> 00:16:31,519
to

00:16:29,519 --> 00:16:33,519
try and take some of this architecture

00:16:31,519 --> 00:16:37,040
that is complicated to

00:16:33,519 --> 00:16:39,759
uh platform users it's complicated to

00:16:37,040 --> 00:16:40,800
people managing uh like building the

00:16:39,759 --> 00:16:43,759
platform

00:16:40,800 --> 00:16:45,600
um and it's all sorts of complicated to

00:16:43,759 --> 00:16:48,800
understand in all sorts of ways and try

00:16:45,600 --> 00:16:50,720
and um look at an interface first

00:16:48,800 --> 00:16:52,160
approach and then try and fulfill that

00:16:50,720 --> 00:16:55,360
interface

00:16:52,160 --> 00:16:56,000
rather than taking all the specifics

00:16:55,360 --> 00:16:59,440
over

00:16:56,000 --> 00:17:02,480
a lot of which are either

00:16:59,440 --> 00:17:05,199
unnecessary or

00:17:02,480 --> 00:17:05,760
built for backward compatibility reasons

00:17:05,199 --> 00:17:10,160
um

00:17:05,760 --> 00:17:10,160
which aren't as prevalent

00:17:11,919 --> 00:17:15,839
um so hopefully we can so one of the

00:17:14,319 --> 00:17:16,160
ways to look at what we're doing right

00:17:15,839 --> 00:17:17,919
now

00:17:16,160 --> 00:17:19,839
is that we have inputs coming into

00:17:17,919 --> 00:17:22,160
fluency and outputs and this is our

00:17:19,839 --> 00:17:24,559
current like architecture diagram

00:17:22,160 --> 00:17:25,600
um things come into fluency we send it

00:17:24,559 --> 00:17:27,199
to outputs and

00:17:25,600 --> 00:17:28,799
right now we only have one output which

00:17:27,199 --> 00:17:31,679
is uh block cache

00:17:28,799 --> 00:17:32,559
um and we only have about two inputs but

00:17:31,679 --> 00:17:34,160
i think

00:17:32,559 --> 00:17:36,559
the big way we want to think about

00:17:34,160 --> 00:17:41,039
logging going forward

00:17:36,559 --> 00:17:44,240
is um as cloud foundry we have a feature

00:17:41,039 --> 00:17:46,160
the feature is drains drains are our

00:17:44,240 --> 00:17:48,080
contact and we would like to expose

00:17:46,160 --> 00:17:51,679
those to the outside world

00:17:48,080 --> 00:17:55,440
and in so much that we expose uh drains

00:17:51,679 --> 00:17:58,799
um we would like to expose interfaces to

00:17:55,440 --> 00:18:01,919
anyone within the platform to

00:17:58,799 --> 00:18:06,000
emit their logs in in a way that uh

00:18:01,919 --> 00:18:10,799
we'll be able to work with cf drains

00:18:06,000 --> 00:18:13,200
um we've been working on getting uh

00:18:10,799 --> 00:18:14,160
logs in that are annotated with the

00:18:13,200 --> 00:18:16,799
correct data

00:18:14,160 --> 00:18:17,679
to and then we'll at some point work to

00:18:16,799 --> 00:18:19,679
make sure those

00:18:17,679 --> 00:18:21,919
uh get sent to various different

00:18:19,679 --> 00:18:26,160
destinations besides like cache but

00:18:21,919 --> 00:18:28,400
like first um and we've been working on

00:18:26,160 --> 00:18:29,360
a the fluid formatted ingress to try and

00:18:28,400 --> 00:18:32,480
work on the

00:18:29,360 --> 00:18:36,720
important use case of um

00:18:32,480 --> 00:18:36,720
injected logs into livestream

00:18:38,080 --> 00:18:42,880
and so there are some things we're

00:18:40,799 --> 00:18:44,799
hoping to work towards in the future

00:18:42,880 --> 00:18:45,919
i there's some vague thoughts of

00:18:44,799 --> 00:18:49,039
platform logs

00:18:45,919 --> 00:18:52,240
in the past platform locks and uh

00:18:49,039 --> 00:18:53,120
uh application locks were served by

00:18:52,240 --> 00:18:54,880
entirely different

00:18:53,120 --> 00:18:56,320
architectures we have syslog release

00:18:54,880 --> 00:19:00,480
that has been

00:18:56,320 --> 00:19:03,440
uh managed by bosch managed by uh

00:19:00,480 --> 00:19:04,559
a syslog team and at some point and at

00:19:03,440 --> 00:19:07,120
some points managed by

00:19:04,559 --> 00:19:08,400
uh the logging team itself and this is

00:19:07,120 --> 00:19:10,080
something that

00:19:08,400 --> 00:19:11,919
uh given that we're now on the same

00:19:10,080 --> 00:19:12,640
architecture on the same level playing

00:19:11,919 --> 00:19:15,039
field

00:19:12,640 --> 00:19:17,200
um with applications it might be useful

00:19:15,039 --> 00:19:18,640
to consider how we can consolidate these

00:19:17,200 --> 00:19:22,720
two to be more consistent

00:19:18,640 --> 00:19:24,000
and more uh more usable for everyone

00:19:22,720 --> 00:19:25,840
but this is something that we haven't

00:19:24,000 --> 00:19:26,880
had a lot of time to work on but let

00:19:25,840 --> 00:19:29,840
alone put

00:19:26,880 --> 00:19:31,600
specific thought into yet um we would

00:19:29,840 --> 00:19:34,799
like to at some point possibly

00:19:31,600 --> 00:19:36,480
could consider more input methods um for

00:19:34,799 --> 00:19:40,080
how we can expose things to

00:19:36,480 --> 00:19:43,520
to uh to components and uh

00:19:40,080 --> 00:19:44,240
services uh especially as people start

00:19:43,520 --> 00:19:46,240
to do

00:19:44,240 --> 00:19:48,480
uh more kubernetes as things like

00:19:46,240 --> 00:19:51,840
produce uh kubernetes events

00:19:48,480 --> 00:19:55,120
if that ends up being the thing and then

00:19:51,840 --> 00:19:57,280
more outputs syslog is somewhat used but

00:19:55,120 --> 00:19:58,240
it's not universally used it would be

00:19:57,280 --> 00:20:00,880
nice to have

00:19:58,240 --> 00:20:03,440
uh a small set of outputs that could

00:20:00,880 --> 00:20:06,720
service as many people as we can

00:20:03,440 --> 00:20:09,200
um and with that i ask if there's any

00:20:06,720 --> 00:20:09,200
questions

00:20:11,919 --> 00:20:16,080
here i have a question but that was

00:20:13,360 --> 00:20:16,080
really great then

00:20:16,320 --> 00:20:22,320
thank you thank you

00:20:20,159 --> 00:20:24,480
um can i ask a question or was there

00:20:22,320 --> 00:20:27,679
already one

00:20:24,480 --> 00:20:30,400
yeah go ahead flat thanks

00:20:27,679 --> 00:20:30,400
so um

00:20:30,799 --> 00:20:37,039
i've been thinking about this uh logging

00:20:34,000 --> 00:20:37,520
that we do with um irene right in the

00:20:37,039 --> 00:20:41,200
picture

00:20:37,520 --> 00:20:45,600
and on kubernetes and um

00:20:41,200 --> 00:20:48,240
i still i i want to ask again uh

00:20:45,600 --> 00:20:49,120
just to make sure that i'm not missing

00:20:48,240 --> 00:20:53,039
anything

00:20:49,120 --> 00:20:53,919
obvious so the logging problem and the

00:20:53,039 --> 00:20:57,039
matrix problem

00:20:53,919 --> 00:21:00,559
is something that's shared

00:20:57,039 --> 00:21:01,039
itself so presumably we want to overlap

00:21:00,559 --> 00:21:03,600
as

00:21:01,039 --> 00:21:04,559
much as we can with what kubernetes is

00:21:03,600 --> 00:21:08,159
doing

00:21:04,559 --> 00:21:11,039
uh under us and try to minimize the

00:21:08,159 --> 00:21:12,159
the amount of new mechanisms we bring in

00:21:11,039 --> 00:21:14,240
right so

00:21:12,159 --> 00:21:17,039
i'm wondering um have you thought about

00:21:14,240 --> 00:21:19,200
that and

00:21:17,039 --> 00:21:20,480
do you think it's absolutely necessary

00:21:19,200 --> 00:21:24,000
that we bring in

00:21:20,480 --> 00:21:26,320
uh something like fluently all the time

00:21:24,000 --> 00:21:31,120
given that in some cases for example on

00:21:26,320 --> 00:21:33,120
gke there's already a fluid there

00:21:31,120 --> 00:21:34,880
that is something i think we've we have

00:21:33,120 --> 00:21:38,159
considered one of the big things

00:21:34,880 --> 00:21:41,280
um even though there is a uh

00:21:38,159 --> 00:21:44,480
a fluency on that comes with some

00:21:41,280 --> 00:21:47,679
uh clusters um it's it's in a lot of

00:21:44,480 --> 00:21:47,679
ways not configured to

00:21:48,000 --> 00:21:51,600
work with the uh or consider the

00:21:50,480 --> 00:21:55,280
architecture of

00:21:51,600 --> 00:21:57,600
cf um one of the big use cases is

00:21:55,280 --> 00:21:59,200
blackhash which does need to get

00:21:57,600 --> 00:22:02,960
application logs

00:21:59,200 --> 00:22:06,000
uh in it to per serve uh cf locks

00:22:02,960 --> 00:22:07,120
um but this is something and this is

00:22:06,000 --> 00:22:09,520
something

00:22:07,120 --> 00:22:10,960
that's been on the top of our minds but

00:22:09,520 --> 00:22:16,400
uh as well

00:22:10,960 --> 00:22:16,400
um trying to take all of the logs

00:22:16,799 --> 00:22:20,000
i i think there's a very cff centric

00:22:19,360 --> 00:22:22,640
lens

00:22:20,000 --> 00:22:24,840
that people want to see their logs in um

00:22:22,640 --> 00:22:28,080
that i think is often not served by

00:22:24,840 --> 00:22:31,520
a generic kubernetes pattern

00:22:28,080 --> 00:22:34,400
um all right so

00:22:31,520 --> 00:22:34,880
the difference that i see with cf logs

00:22:34,400 --> 00:22:37,360
versus

00:22:34,880 --> 00:22:38,480
cube control locks is that cube control

00:22:37,360 --> 00:22:41,919
just gives me

00:22:38,480 --> 00:22:46,159
you know standard air standard out

00:22:41,919 --> 00:22:49,039
and cf logs aggregates uh some stuff

00:22:46,159 --> 00:22:49,679
right it aggregates uh diego cella but

00:22:49,039 --> 00:22:51,919
uh

00:22:49,679 --> 00:22:54,320
cloud controller output right everything

00:22:51,919 --> 00:22:58,320
that's pertinent to my app

00:22:54,320 --> 00:23:00,720
um so you're saying that

00:22:58,320 --> 00:23:03,919
is this the feature that's missing from

00:23:00,720 --> 00:23:03,919
the kubernetes

00:23:04,320 --> 00:23:12,880
the kubernetes layer

00:23:09,840 --> 00:23:15,840
i wouldn't say it's necessarily missing

00:23:12,880 --> 00:23:16,080
from the kubernetes layer it's not like

00:23:15,840 --> 00:23:18,960
i

00:23:16,080 --> 00:23:18,960
i think um

00:23:19,520 --> 00:23:26,880
as far as my understanding goes uh

00:23:23,679 --> 00:23:28,159
while there is a very generic kubernetes

00:23:26,880 --> 00:23:29,679
way to look at logs

00:23:28,159 --> 00:23:31,760
and i think that's valuable in a lot of

00:23:29,679 --> 00:23:34,400
sense

00:23:31,760 --> 00:23:35,600
people often are using cf because they

00:23:34,400 --> 00:23:39,280
don't want to use

00:23:35,600 --> 00:23:40,880
just kubernetes um and well it's a tool

00:23:39,280 --> 00:23:42,480
kubernetes is a great tool for us to

00:23:40,880 --> 00:23:45,760
leverage going forward in

00:23:42,480 --> 00:23:46,559
like to empower cf um i think it's

00:23:45,760 --> 00:23:48,000
something that

00:23:46,559 --> 00:23:50,159
there's a lot of difficulties in just

00:23:48,000 --> 00:23:51,679
looking at it from oh this is a

00:23:50,159 --> 00:23:54,480
kubernetes

00:23:51,679 --> 00:23:55,039
just kubernetes um because of those

00:23:54,480 --> 00:23:59,120
previous

00:23:55,039 --> 00:24:01,600
reasons um i think

00:23:59,120 --> 00:24:02,320
while we're moving i'm i'm sorry i'm

00:24:01,600 --> 00:24:06,480
just look

00:24:02,320 --> 00:24:06,480
give me a sec i think that um

00:24:07,200 --> 00:24:11,520
making sure that we uh both expose logs

00:24:10,799 --> 00:24:13,919
as far as

00:24:11,520 --> 00:24:14,880
uh egress pattern and while that to some

00:24:13,919 --> 00:24:18,799
degree

00:24:14,880 --> 00:24:20,880
exists for gk people often want to have

00:24:18,799 --> 00:24:22,400
or various other uh kubernetes

00:24:20,880 --> 00:24:24,480
architectures people

00:24:22,400 --> 00:24:26,559
often aren't as aware of like where

00:24:24,480 --> 00:24:28,240
that's going or aren't

00:24:26,559 --> 00:24:30,080
as in control at least to my

00:24:28,240 --> 00:24:31,120
understanding of where those logs go and

00:24:30,080 --> 00:24:33,760
that's something that we

00:24:31,120 --> 00:24:34,720
are very aware for at least on some

00:24:33,760 --> 00:24:37,200
subset of

00:24:34,720 --> 00:24:38,000
people using cf absolutely needs to be

00:24:37,200 --> 00:24:41,760
there

00:24:38,000 --> 00:24:44,000
um but i think as well

00:24:41,760 --> 00:24:46,320
the ability when you're deploying your

00:24:44,000 --> 00:24:48,480
own fluency or when you're

00:24:46,320 --> 00:24:49,360
deploying your own logging egress

00:24:48,480 --> 00:24:52,960
pattern

00:24:49,360 --> 00:24:56,159
to very much put that lens

00:24:52,960 --> 00:24:58,799
of cf in front of

00:24:56,159 --> 00:25:00,480
the log data i think provides a lot of

00:24:58,799 --> 00:25:03,840
value that you'd miss

00:25:00,480 --> 00:25:05,679
by just looking at uh

00:25:03,840 --> 00:25:08,480
logs from standard out and saying this

00:25:05,679 --> 00:25:08,480
is what logs are

00:25:09,200 --> 00:25:17,440
logs from standard out on kubernetes

00:25:13,039 --> 00:25:20,320
yeah sorry i i agree with that 100 um

00:25:17,440 --> 00:25:20,960
i i'm not sure if i if i explain my my

00:25:20,320 --> 00:25:24,159
worry

00:25:20,960 --> 00:25:26,720
uh clearly enough um

00:25:24,159 --> 00:25:28,880
yeah i'm just thinking you know there's

00:25:26,720 --> 00:25:30,080
a way to stream logs in kubernetes

00:25:28,880 --> 00:25:31,919
it doesn't feel like we're taking

00:25:30,080 --> 00:25:35,200
advantage of that at all

00:25:31,919 --> 00:25:38,320
um but we're building uh

00:25:35,200 --> 00:25:41,679
a system that's parallel to that

00:25:38,320 --> 00:25:43,279
and you know i assume that

00:25:41,679 --> 00:25:44,799
if if someone is going to deploy cloud

00:25:43,279 --> 00:25:46,880
foundry on kubernetes

00:25:44,799 --> 00:25:48,159
um it might not be the only workload

00:25:46,880 --> 00:25:50,960
that they have

00:25:48,159 --> 00:25:52,799
and they will have tooling uh to consume

00:25:50,960 --> 00:25:55,200
logs and stuff from

00:25:52,799 --> 00:25:57,200
um you know from other stuff that's

00:25:55,200 --> 00:25:59,039
running on kubernetes

00:25:57,200 --> 00:26:02,000
and their apps are also going to be on

00:25:59,039 --> 00:26:02,000
kubernetes so

00:26:02,799 --> 00:26:11,200
i i'm thinking is there uh a way to

00:26:06,320 --> 00:26:13,520
offer all of these capabilities um

00:26:11,200 --> 00:26:16,240
maybe at a at a lower layer not just

00:26:13,520 --> 00:26:16,240
cloud foundry

00:26:18,000 --> 00:26:22,559
and take advantage of what kubernetes

00:26:20,480 --> 00:26:25,360
already has

00:26:22,559 --> 00:26:26,240
for sure um no to provide others with

00:26:25,360 --> 00:26:29,600
some context here

00:26:26,240 --> 00:26:32,159
i just want to interject that um irene x

00:26:29,600 --> 00:26:33,520
uh implements a logging interface for

00:26:32,159 --> 00:26:36,640
cube cf which is

00:26:33,520 --> 00:26:38,400
different right it's not uh

00:26:36,640 --> 00:26:40,320
and it was designed to leverage the

00:26:38,400 --> 00:26:41,919
kubernetes logging infrastructure

00:26:40,320 --> 00:26:44,000
as thoroughly as possible and do as

00:26:41,919 --> 00:26:46,320
little as possible can you

00:26:44,000 --> 00:26:48,960
explain how that is different and how

00:26:46,320 --> 00:26:50,080
you think that might be used vlad

00:26:48,960 --> 00:26:52,559
so i think that might be where this

00:26:50,080 --> 00:26:56,080
question is coming from sure

00:26:52,559 --> 00:26:59,919
so for that ironyx component we just

00:26:56,080 --> 00:27:02,960
left the older logging system in place

00:26:59,919 --> 00:27:05,039
and we removed the logging agent and

00:27:02,960 --> 00:27:06,159
well removed there are no more diego

00:27:05,039 --> 00:27:08,720
cells right so

00:27:06,159 --> 00:27:09,360
instead of having that uh logging agent

00:27:08,720 --> 00:27:12,559
on

00:27:09,360 --> 00:27:13,919
the diego cells uh we wrote an irini x

00:27:12,559 --> 00:27:16,400
component that

00:27:13,919 --> 00:27:17,360
acted as a bridge and acted as a logging

00:27:16,400 --> 00:27:20,640
agent that

00:27:17,360 --> 00:27:21,200
uh sucked in logs from the kubernetes

00:27:20,640 --> 00:27:23,460
api

00:27:21,200 --> 00:27:25,279
and just stream them over to

00:27:23,460 --> 00:27:29,840
[Music]

00:27:25,279 --> 00:27:32,880
doppler i think right is i think doppler

00:27:29,840 --> 00:27:34,320
so it just acts as a bridge it's

00:27:32,880 --> 00:27:36,399
actually called the logger gator any

00:27:34,320 --> 00:27:38,559
longer gator bridge yeah

00:27:36,399 --> 00:27:40,000
did do we lose any of the context we

00:27:38,559 --> 00:27:41,039
were talking about the stuff that is

00:27:40,000 --> 00:27:43,760
important for the

00:27:41,039 --> 00:27:44,480
the cloud foundry lens on the on the

00:27:43,760 --> 00:27:47,760
logs

00:27:44,480 --> 00:27:49,360
or do we inject that is there is that

00:27:47,760 --> 00:27:51,520
information preserved

00:27:49,360 --> 00:27:52,480
yeah so in that setup we don't lose

00:27:51,520 --> 00:27:54,640
anything

00:27:52,480 --> 00:27:56,720
uh everything is preserved but it does

00:27:54,640 --> 00:28:00,320
have drawbacks right it does need

00:27:56,720 --> 00:28:00,320
the entire logger gator system

00:28:00,840 --> 00:28:07,120
that's you know that we i mean

00:28:04,080 --> 00:28:08,480
i agree with the presentation that uh we

00:28:07,120 --> 00:28:10,960
probably want to move away from that

00:28:08,480 --> 00:28:16,080
system in the kubernetes world

00:28:10,960 --> 00:28:18,159
um but yeah

00:28:16,080 --> 00:28:19,279
so given that you're uh streaming for it

00:28:18,159 --> 00:28:21,840
directly from

00:28:19,279 --> 00:28:23,440
the api it doesn't have to be deployed

00:28:21,840 --> 00:28:26,799
on the same cluster as

00:28:23,440 --> 00:28:30,399
uh the workloads are on is what we're

00:28:26,799 --> 00:28:33,200
saying right um

00:28:30,399 --> 00:28:33,520
actually it doesn't that that's true uh

00:28:33,200 --> 00:28:35,919
i

00:28:33,520 --> 00:28:38,000
we haven't tested anything like that but

00:28:35,919 --> 00:28:41,279
um

00:28:38,000 --> 00:28:43,360
i guess that would be true

00:28:41,279 --> 00:28:45,440
but it is in cluster so you deploy that

00:28:43,360 --> 00:28:48,240
component next to everything

00:28:45,440 --> 00:28:49,200
and it just uh watches to see when new

00:28:48,240 --> 00:28:51,760
irene apps

00:28:49,200 --> 00:28:53,520
get deployed and then just stream

00:28:51,760 --> 00:28:57,039
streams logs

00:28:53,520 --> 00:28:59,840
whenever they're needed um

00:28:57,039 --> 00:29:01,039
i think in a lot of ways we think of

00:28:59,840 --> 00:29:03,440
what we've built uh

00:29:01,039 --> 00:29:04,159
on cf4 gates as uh similar to that

00:29:03,440 --> 00:29:07,039
bridge

00:29:04,159 --> 00:29:07,520
um or similar to the concept of that

00:29:07,039 --> 00:29:11,039
bridge

00:29:07,520 --> 00:29:12,960
i think while we haven't used kubernetes

00:29:11,039 --> 00:29:15,039
tail or any of those sorts of things

00:29:12,960 --> 00:29:16,080
uh we've we're specifically more doing

00:29:15,039 --> 00:29:18,399
the more direct

00:29:16,080 --> 00:29:20,320
uh method uh it is something we've

00:29:18,399 --> 00:29:24,159
considered but it's been closer to

00:29:20,320 --> 00:29:26,080
patterns that uh we use development

00:29:24,159 --> 00:29:28,320
have the as the development team have

00:29:26,080 --> 00:29:30,399
have experiences used in the past

00:29:28,320 --> 00:29:32,640
um and so that's the reason for those

00:29:30,399 --> 00:29:34,320
current patterns as they exist right now

00:29:32,640 --> 00:29:36,480
i think if we had more pressure to

00:29:34,320 --> 00:29:38,960
deploy outside the cluster

00:29:36,480 --> 00:29:41,440
uh we might be looking at different

00:29:38,960 --> 00:29:43,840
methods

00:29:41,440 --> 00:29:46,080
dj can i call out your question from the

00:29:43,840 --> 00:29:46,080
chat

00:29:46,159 --> 00:29:51,279
can the output be tied so that cube

00:29:49,200 --> 00:29:55,039
native tools and logging infrastructure

00:29:51,279 --> 00:29:57,600
sees it as well

00:29:55,039 --> 00:29:58,320
does that make sense to people i was

00:29:57,600 --> 00:30:00,559
looking at

00:29:58,320 --> 00:30:02,320
things whilst also listening to the uh

00:30:00,559 --> 00:30:05,200
the conversation but

00:30:02,320 --> 00:30:05,679
i guess that seemed like the logical way

00:30:05,200 --> 00:30:08,159
of

00:30:05,679 --> 00:30:09,919
maybe addressing what vlad was saying of

00:30:08,159 --> 00:30:12,320
being able to pipe stuff both through

00:30:09,919 --> 00:30:14,480
cube's native uh logging infrastructure

00:30:12,320 --> 00:30:15,760
and then having the cf stuff on top

00:30:14,480 --> 00:30:17,760
so that you could get it out in both

00:30:15,760 --> 00:30:18,480
ways if you wanted to and were willing

00:30:17,760 --> 00:30:20,880
to

00:30:18,480 --> 00:30:22,640
take that performance hit i think they

00:30:20,880 --> 00:30:25,120
might be in both places already

00:30:22,640 --> 00:30:26,799
at least in terms of like how we're

00:30:25,120 --> 00:30:29,279
getting things from annotated pods

00:30:26,799 --> 00:30:30,880
they should just always be going to uh

00:30:29,279 --> 00:30:31,919
standard out and still be going to

00:30:30,880 --> 00:30:33,760
standard out

00:30:31,919 --> 00:30:36,159
um the question is probably injected

00:30:33,760 --> 00:30:37,360
logs which might not be instead for that

00:30:36,159 --> 00:30:40,000
but we should be

00:30:37,360 --> 00:30:40,880
we might be able to consider changing

00:30:40,000 --> 00:30:43,120
that pattern

00:30:40,880 --> 00:30:45,840
so all the cf value-add stuff will only

00:30:43,120 --> 00:30:49,279
come through the cf path

00:30:45,840 --> 00:30:51,600
like the the root yeah at the moment yes

00:30:49,279 --> 00:30:52,640
cool thanks i know sort of the pattern

00:30:51,600 --> 00:30:55,039
we've seen also on

00:30:52,640 --> 00:30:56,480
on the metric side is uh you know we've

00:30:55,039 --> 00:30:58,960
kind of i think both the logs and

00:30:56,480 --> 00:31:01,519
metrics we've started from this place of

00:30:58,960 --> 00:31:04,000
uh trying to match the existing app

00:31:01,519 --> 00:31:06,640
developer api so that we can support

00:31:04,000 --> 00:31:08,480
the cfcli and various clients that app

00:31:06,640 --> 00:31:10,480
developers might have

00:31:08,480 --> 00:31:13,279
cf logs being kind of the popular one

00:31:10,480 --> 00:31:16,559
but you know there's other ways to even

00:31:13,279 --> 00:31:18,880
look at logs and metrics using cf

00:31:16,559 --> 00:31:20,720
uh and and that has kind of opened up

00:31:18,880 --> 00:31:21,519
all these other opportunities adjacent

00:31:20,720 --> 00:31:23,360
um where

00:31:21,519 --> 00:31:25,039
we can continue you know we have fluent

00:31:23,360 --> 00:31:26,159
d running we we can provide more

00:31:25,039 --> 00:31:28,320
features from it

00:31:26,159 --> 00:31:29,600
um you know similar we we're kind of

00:31:28,320 --> 00:31:30,799
running into similar things on on the

00:31:29,600 --> 00:31:34,000
metric side where

00:31:30,799 --> 00:31:35,519
uh having matching those apis it doesn't

00:31:34,000 --> 00:31:37,120
exclude you from doing any of the

00:31:35,519 --> 00:31:38,880
kubernetes native things those are all

00:31:37,120 --> 00:31:41,120
still available to you

00:31:38,880 --> 00:31:47,519
but we now have components that can

00:31:41,120 --> 00:31:49,760
provide some operator features as well

00:31:47,519 --> 00:31:49,760
cool

00:31:56,960 --> 00:32:03,120
any other questions this has been

00:32:00,000 --> 00:32:04,880
really really interesting for me um but

00:32:03,120 --> 00:32:08,000
i don't know

00:32:04,880 --> 00:32:09,840
what further questions to ask um

00:32:08,000 --> 00:32:11,039
i suppose we'll make these uh slides

00:32:09,840 --> 00:32:14,399
available for people

00:32:11,039 --> 00:32:16,159
um with the notes as ben mentioned

00:32:14,399 --> 00:32:18,000
i'm not going to try and summarize this

00:32:16,159 --> 00:32:21,919
i'll in the in the

00:32:18,000 --> 00:32:25,760
meeting notes and uh i'll just sort of

00:32:21,919 --> 00:32:25,760
point a reference to the material

00:32:26,720 --> 00:32:31,519
we have time now so we only had one

00:32:29,679 --> 00:32:34,720
presentation for this

00:32:31,519 --> 00:32:35,200
uh this session i would uh advise people

00:32:34,720 --> 00:32:38,960
to check

00:32:35,200 --> 00:32:42,320
the cf4k8 slack poll

00:32:38,960 --> 00:32:44,799
for the next session i think we have

00:32:42,320 --> 00:32:45,440
two items which i don't have in front of

00:32:44,799 --> 00:32:48,720
me

00:32:45,440 --> 00:32:50,159
um for consideration uh but i think the

00:32:48,720 --> 00:32:52,480
coolest one

00:32:50,159 --> 00:32:53,600
is yuri's idea that we should actually

00:32:52,480 --> 00:32:57,039
take a chunk of time

00:32:53,600 --> 00:33:00,240
in the next cf4k8 sig

00:32:57,039 --> 00:33:01,039
uh or kubernetes sig and do a brainstorm

00:33:00,240 --> 00:33:05,600
on topics

00:33:01,039 --> 00:33:09,440
for uh for a few of these meetings out

00:33:05,600 --> 00:33:12,399
so that will i think happen next meeting

00:33:09,440 --> 00:33:13,120
so we'll bring your ideas and uh bring

00:33:12,399 --> 00:33:15,519
your friends

00:33:13,120 --> 00:33:16,399
bring people who you think might have an

00:33:15,519 --> 00:33:18,240
interest in

00:33:16,399 --> 00:33:19,600
steering this conversation or adding to

00:33:18,240 --> 00:33:22,000
this conversation

00:33:19,600 --> 00:33:23,679
and uh and we'll we'll get some ideas

00:33:22,000 --> 00:33:24,880
down for for subsequent meetings so that

00:33:23,679 --> 00:33:27,279
we can

00:33:24,880 --> 00:33:27,919
talk about the future ui uh the other

00:33:27,279 --> 00:33:31,200
topic

00:33:27,919 --> 00:33:35,440
um i suggested was uh perhaps

00:33:31,200 --> 00:33:39,200
having the um cf networking

00:33:35,440 --> 00:33:40,640
team talk about the their app identity

00:33:39,200 --> 00:33:43,360
proposal

00:33:40,640 --> 00:33:44,399
i think um they put out a proposal

00:33:43,360 --> 00:33:45,760
recently and

00:33:44,399 --> 00:33:47,600
thought that might be interesting for

00:33:45,760 --> 00:33:51,039
them to present or

00:33:47,600 --> 00:33:51,039
just for folks to discuss

00:33:51,120 --> 00:33:55,360
and i think there can be uh definitely

00:33:53,039 --> 00:33:57,120
room for that as well um

00:33:55,360 --> 00:33:58,480
in an hour we could probably do both

00:33:57,120 --> 00:34:01,200
things brainstorm

00:33:58,480 --> 00:34:03,440
ideas and hear an overview of that uh

00:34:01,200 --> 00:34:06,559
proposal which definitely needs to be

00:34:03,440 --> 00:34:08,079
talked about um it was great that it's

00:34:06,559 --> 00:34:09,760
i've seen it's gotten a lot of feedback

00:34:08,079 --> 00:34:13,359
on the on the document

00:34:09,760 --> 00:34:15,119
um uh but it looks complex i haven't got

00:34:13,359 --> 00:34:16,320
my head around it uh i don't know if any

00:34:15,119 --> 00:34:21,839
of the others

00:34:16,320 --> 00:34:24,000
uh here have uh reviewed that yet but

00:34:21,839 --> 00:34:25,520
but yeah we'll uh it's likely we'll have

00:34:24,000 --> 00:34:27,520
time for both but

00:34:25,520 --> 00:34:34,879
we'll hand that back off to berent when

00:34:27,520 --> 00:34:38,720
he returns

00:34:34,879 --> 00:34:41,200
any other uh topics of interest or

00:34:38,720 --> 00:34:42,879
urgency to our community that we want to

00:34:41,200 --> 00:34:49,839
bring out while we're here

00:34:42,879 --> 00:34:49,839
i just want to just open the floor

00:34:51,200 --> 00:34:56,240
okay well

00:34:54,320 --> 00:34:57,440
it's been swell thank you so much ben

00:34:56,240 --> 00:35:00,400
for that presentation

00:34:57,440 --> 00:35:01,200
uh thanks for uh questions and comments

00:35:00,400 --> 00:35:04,079
um

00:35:01,200 --> 00:35:04,960
let's go see if we can tune into some

00:35:04,079 --> 00:35:07,440
kubecon

00:35:04,960 --> 00:35:08,480
sessions today in the midst of our other

00:35:07,440 --> 00:35:11,040
stuff

00:35:08,480 --> 00:35:13,440
so thanks very much everyone for coming

00:35:11,040 --> 00:35:17,839
good job feeling enjoy

00:35:13,440 --> 00:35:17,839

YouTube URL: https://www.youtube.com/watch?v=Tjoh2fSM8f0


