Title: Cloud Foundry for Kubernetes SIG [May 18, 2021]
Publication date: 2021-05-19
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:00:07,359 --> 00:00:12,400
i honestly didn't expect us to be the

00:00:09,280 --> 00:00:12,400
only people here right now

00:00:14,000 --> 00:00:17,840
i kind of thought other people would be

00:00:15,519 --> 00:00:20,640
here

00:00:17,840 --> 00:00:22,320
uh i mean i'm assuming other people will

00:00:20,640 --> 00:00:24,480
be here soon i also like how it

00:00:22,320 --> 00:00:30,000
instantly starts recording

00:00:24,480 --> 00:00:32,000
oh wow that'd be on best behavior

00:00:30,000 --> 00:00:33,360
i didn't even get the pop-up saying this

00:00:32,000 --> 00:00:35,920
meeting is being recorded

00:00:33,360 --> 00:00:37,040
yeah i know i didn't either it's sort of

00:00:35,920 --> 00:00:38,719
surprising

00:00:37,040 --> 00:00:41,040
i wouldn't have noticed until you said

00:00:38,719 --> 00:00:41,040
something

00:00:43,520 --> 00:00:47,520
there's a mall in probably germany

00:00:48,399 --> 00:00:51,760
at least the background looked like

00:00:49,760 --> 00:00:54,480
germany huh

00:00:51,760 --> 00:00:57,360
your picture your static picture it

00:00:54,480 --> 00:00:59,039
isn't germany yes

00:00:57,360 --> 00:01:01,680
i couldn't pinpoint where might be

00:00:59,039 --> 00:01:04,320
berlin but it is outside of berlin

00:01:01,680 --> 00:01:05,360
so it's also see wow you have a really

00:01:04,320 --> 00:01:08,159
good eye

00:01:05,360 --> 00:01:09,280
bird rock sure someone's been playing

00:01:08,159 --> 00:01:12,720
geo guesser

00:01:09,280 --> 00:01:14,159
uh well the last time we could travel on

00:01:12,720 --> 00:01:16,799
a cf summit

00:01:14,159 --> 00:01:19,119
um when it was in the netherlands i then

00:01:16,799 --> 00:01:22,240
took two weeks in germany

00:01:19,119 --> 00:01:24,720
so it's the most recent country i

00:01:22,240 --> 00:01:24,720
visited

00:01:25,200 --> 00:01:31,040
hello from germany hey parent

00:01:28,320 --> 00:01:34,400
hello yeah once we get this travel

00:01:31,040 --> 00:01:34,400
started again i want to go back

00:01:34,960 --> 00:01:43,200
a great time me too back to germany

00:01:40,640 --> 00:01:45,360
i mean it wasn't really good for like me

00:01:43,200 --> 00:01:48,399
diet wise because it was a steady

00:01:45,360 --> 00:01:51,360
steady stream of like french rotten

00:01:48,399 --> 00:01:52,079
schnitzel got worse and like various

00:01:51,360 --> 00:01:53,600
beer

00:01:52,079 --> 00:01:55,119
so i'm sure any many medical

00:01:53,600 --> 00:01:57,360
professional would be like yeah don't go

00:01:55,119 --> 00:01:57,360
back

00:01:58,000 --> 00:02:00,399
but man

00:02:02,079 --> 00:02:06,240
yeah i missed those european summits a

00:02:04,000 --> 00:02:09,840
lot that was a nice thing to have at

00:02:06,240 --> 00:02:09,840
least once a year

00:02:13,120 --> 00:02:17,840
soon soon soon 2022

00:02:22,640 --> 00:02:26,959
i guess we should maybe wait another

00:02:24,720 --> 00:02:28,560
minute or so

00:02:26,959 --> 00:02:30,640
to see if there's additional people

00:02:28,560 --> 00:02:33,840
joining

00:02:30,640 --> 00:02:36,959
otherwise eric you suggested the topic

00:02:33,840 --> 00:02:39,440
so yeah i was

00:02:36,959 --> 00:02:41,680
volunteering some of the other folks

00:02:39,440 --> 00:02:41,680
yeah

00:02:43,599 --> 00:02:46,879
yeah um so i know we've been talking

00:02:46,400 --> 00:02:49,200
about

00:02:46,879 --> 00:02:50,720
um the vision for cf on cage stock i

00:02:49,200 --> 00:02:51,760
think we we finished making a pass

00:02:50,720 --> 00:02:53,120
through it so there's

00:02:51,760 --> 00:02:55,440
probably some background work that we

00:02:53,120 --> 00:02:57,040
could be doing to uh resolve some of the

00:02:55,440 --> 00:02:58,480
comments there and capture some of the

00:02:57,040 --> 00:03:00,720
additional context

00:02:58,480 --> 00:03:02,480
uh that we generated um so that it's not

00:03:00,720 --> 00:03:04,239
all hidden in the comments but

00:03:02,480 --> 00:03:06,480
i thought would be at a good stage now

00:03:04,239 --> 00:03:07,920
where uh we could also start talking

00:03:06,480 --> 00:03:10,159
about some potential

00:03:07,920 --> 00:03:11,920
options around uh the architecture and

00:03:10,159 --> 00:03:15,040
how that might fit into

00:03:11,920 --> 00:03:15,760
usage of what we've had in mind um with

00:03:15,040 --> 00:03:18,480
cf for

00:03:15,760 --> 00:03:20,080
uh cf on capes you know and how that

00:03:18,480 --> 00:03:20,720
minor might not align to what's already

00:03:20,080 --> 00:03:25,760
there with

00:03:20,720 --> 00:03:28,799
cf for gates um and sit alongside qcf

00:03:25,760 --> 00:03:30,720
so i know that um some of the uh

00:03:28,799 --> 00:03:32,959
folks that we've got here from vmware

00:03:30,720 --> 00:03:37,040
have been thinking about various options

00:03:32,959 --> 00:03:40,799
and so um you know what whatever they

00:03:37,040 --> 00:03:44,319
think would be useful to illustrate or

00:03:40,799 --> 00:03:44,319
discuss at this point i think would be

00:03:44,840 --> 00:03:47,840
great

00:03:51,760 --> 00:04:00,080
cool yeah so i think

00:03:56,159 --> 00:04:04,480
there's maybe jumping in here

00:04:00,080 --> 00:04:06,239
like sometimes it's hard to

00:04:04,480 --> 00:04:07,840
talk about things without having like

00:04:06,239 --> 00:04:10,000
diagrams or pictures

00:04:07,840 --> 00:04:11,599
um especially when you talk about

00:04:10,000 --> 00:04:15,599
architecture

00:04:11,599 --> 00:04:16,639
um and so i think like one thing that we

00:04:15,599 --> 00:04:19,040
have been thinking of

00:04:16,639 --> 00:04:20,079
like at a high level is you know when we

00:04:19,040 --> 00:04:22,960
think about like

00:04:20,079 --> 00:04:23,440
sort of the work that was being done on

00:04:22,960 --> 00:04:25,759
cf

00:04:23,440 --> 00:04:27,280
for kate's like i think one of the areas

00:04:25,759 --> 00:04:30,080
that we were trying to

00:04:27,280 --> 00:04:31,040
align towards was having more modular

00:04:30,080 --> 00:04:32,720
interfaces

00:04:31,040 --> 00:04:34,479
and that's sort of in line with what

00:04:32,720 --> 00:04:36,240
we've been talking about in the cf

00:04:34,479 --> 00:04:37,919
on kate's vision statement and i think

00:04:36,240 --> 00:04:39,520
like one thing that like instantly comes

00:04:37,919 --> 00:04:43,600
to mind is like what

00:04:39,520 --> 00:04:46,240
the work that was being done around um

00:04:43,600 --> 00:04:48,880
like having route crds and then being

00:04:46,240 --> 00:04:52,400
able to like use that as an interface

00:04:48,880 --> 00:04:54,479
to then like plug in different backing

00:04:52,400 --> 00:04:57,120
implementations for like what you wanted

00:04:54,479 --> 00:05:00,240
your ingress solution to be

00:04:57,120 --> 00:05:01,280
and so i think you know looking at all

00:05:00,240 --> 00:05:04,960
of the different

00:05:01,280 --> 00:05:08,560
um sort of goals in the

00:05:04,960 --> 00:05:10,320
vision dock it's definitely not a

00:05:08,560 --> 00:05:12,120
i think one of the key call-outs is like

00:05:10,320 --> 00:05:14,240
it's not necessarily like a

00:05:12,120 --> 00:05:15,440
one-size-fits-all solution right we want

00:05:14,240 --> 00:05:17,199
to really make it

00:05:15,440 --> 00:05:18,320
so that it's able to be pluggable so if

00:05:17,199 --> 00:05:19,520
you really care about backwards

00:05:18,320 --> 00:05:24,160
compatibility

00:05:19,520 --> 00:05:26,960
oh yeah there we go great

00:05:24,160 --> 00:05:27,600
cool yeah so like i think like here at

00:05:26,960 --> 00:05:31,199
this

00:05:27,600 --> 00:05:32,960
yeah um

00:05:31,199 --> 00:05:34,880
yeah this calls that sort of what what's

00:05:32,960 --> 00:05:36,800
currently here but i think like what's

00:05:34,880 --> 00:05:38,240
not called out necessarily is that level

00:05:36,800 --> 00:05:40,880
deeper of like

00:05:38,240 --> 00:05:41,280
how are we actually using like each of

00:05:40,880 --> 00:05:43,360
these

00:05:41,280 --> 00:05:45,120
different like kate solutions right so

00:05:43,360 --> 00:05:47,440
like how are we actually using istio how

00:05:45,120 --> 00:05:51,440
are we actually using pocato

00:05:47,440 --> 00:05:52,000
um and so i think the key to that really

00:05:51,440 --> 00:05:54,639
is having

00:05:52,000 --> 00:05:56,319
custom resource definitions uh like

00:05:54,639 --> 00:05:59,199
custom resources

00:05:56,319 --> 00:05:59,919
as the interface um to make it so that

00:05:59,199 --> 00:06:03,600
it's more

00:05:59,919 --> 00:06:07,280
plugable of different solutions um

00:06:03,600 --> 00:06:10,720
and i think like particularly

00:06:07,280 --> 00:06:13,280
like we have been thinking about

00:06:10,720 --> 00:06:14,160
like what would that look like for

00:06:13,280 --> 00:06:18,000
example

00:06:14,160 --> 00:06:20,240
like with a cf push like workflow like

00:06:18,000 --> 00:06:21,600
you know what like right now when you do

00:06:20,240 --> 00:06:24,560
a cf push

00:06:21,600 --> 00:06:26,560
you know you get a lot of different like

00:06:24,560 --> 00:06:27,520
you have a lot of different api calls to

00:06:26,560 --> 00:06:29,440
cappy

00:06:27,520 --> 00:06:31,600
um and a lot of different resources are

00:06:29,440 --> 00:06:35,840
created and so like what resources

00:06:31,600 --> 00:06:35,840
would we actually maybe want to map to

00:06:36,080 --> 00:06:45,120
like kubernetes resources and how

00:06:40,000 --> 00:06:45,120
how would that look and so

00:06:45,199 --> 00:06:48,479
i don't know i think you know tim put

00:06:47,840 --> 00:06:51,599
together

00:06:48,479 --> 00:06:54,319
this diagram i don't know tim

00:06:51,599 --> 00:06:55,919
if you want to sort of like go through

00:06:54,319 --> 00:06:59,360
maybe thinking about like

00:06:55,919 --> 00:07:03,280
or showing like the workflow for

00:06:59,360 --> 00:07:05,120
um like one possible approach

00:07:03,280 --> 00:07:07,360
um at like a high level for thinking

00:07:05,120 --> 00:07:11,199
about like custom resources

00:07:07,360 --> 00:07:14,560
um or if you'd like me to go through it

00:07:11,199 --> 00:07:18,639
no i um i can totally go through it um

00:07:14,560 --> 00:07:20,160
here i can uh i'll share my screen um

00:07:18,639 --> 00:07:22,240
actually let me let me pull it to a new

00:07:20,160 --> 00:07:23,680
window so i don't have 100 tabs at the

00:07:22,240 --> 00:07:26,880
top

00:07:23,680 --> 00:07:30,479
all right cool

00:07:26,880 --> 00:07:32,160
can is it sharing

00:07:30,479 --> 00:07:34,479
it doesn't show me the border let me try

00:07:32,160 --> 00:07:34,479
again

00:07:35,280 --> 00:07:42,240
all right this looks better yep

00:07:38,720 --> 00:07:46,080
good cool um yeah so

00:07:42,240 --> 00:07:48,639
this um this little exploration we did

00:07:46,080 --> 00:07:49,360
like combines this like crd interface

00:07:48,639 --> 00:07:52,080
approach

00:07:49,360 --> 00:07:52,400
also with like a thought experiment for

00:07:52,080 --> 00:07:54,160
um

00:07:52,400 --> 00:07:56,000
trying to eliminate the cloud

00:07:54,160 --> 00:07:58,800
controllers database so that we have a

00:07:56,000 --> 00:08:01,759
single source of truth for where we're

00:07:58,800 --> 00:08:02,800
maintaining state so we're we're

00:08:01,759 --> 00:08:06,479
imagining like

00:08:02,800 --> 00:08:09,919
a a lightweight like reimplementation

00:08:06,479 --> 00:08:10,560
of the cfv3 apis that's like backed

00:08:09,919 --> 00:08:13,840
entirely

00:08:10,560 --> 00:08:14,240
by by crds and for simplicity's sake

00:08:13,840 --> 00:08:16,960
we've

00:08:14,240 --> 00:08:17,599
um we've basically made a one-to-one

00:08:16,960 --> 00:08:20,639
mapping

00:08:17,599 --> 00:08:24,160
of custom resource and um

00:08:20,639 --> 00:08:25,280
and cappy api resource just because it

00:08:24,160 --> 00:08:27,440
makes the

00:08:25,280 --> 00:08:30,160
the modeling easier to understand for

00:08:27,440 --> 00:08:35,279
how these might power an endpoint

00:08:30,160 --> 00:08:38,959
um so on on this mirror board we've um

00:08:35,279 --> 00:08:41,440
we start out with a a user using just a

00:08:38,959 --> 00:08:42,880
like vanilla cfcli

00:08:41,440 --> 00:08:44,159
it's it's not aware it's targeting

00:08:42,880 --> 00:08:46,800
something different because we've

00:08:44,159 --> 00:08:49,920
implemented the same api contract

00:08:46,800 --> 00:08:50,480
and it is uh they are pushing in their

00:08:49,920 --> 00:08:54,560
app and

00:08:50,480 --> 00:08:57,120
applying a cf manifest and

00:08:54,560 --> 00:08:57,839
that we have like a manifest controller

00:08:57,120 --> 00:08:59,760
um

00:08:57,839 --> 00:09:01,600
we've we've modeled this as separate

00:08:59,760 --> 00:09:04,160
controllers but in practice it could all

00:09:01,600 --> 00:09:07,040
be a single cf controller with

00:09:04,160 --> 00:09:08,480
multiple reconciler loops that watches

00:09:07,040 --> 00:09:11,600
that manifest and

00:09:08,480 --> 00:09:13,279
breaks down um all the like all the

00:09:11,600 --> 00:09:14,000
pieces of it into separate like route

00:09:13,279 --> 00:09:17,040
crs

00:09:14,000 --> 00:09:20,839
um process crs and

00:09:17,040 --> 00:09:23,040
and app cr and like i said these are all

00:09:20,839 --> 00:09:24,640
like um

00:09:23,040 --> 00:09:26,720
kind of like placeholders like you could

00:09:24,640 --> 00:09:30,000
imagine instead of a process er

00:09:26,720 --> 00:09:30,959
it directly makes an irini l or pcr

00:09:30,000 --> 00:09:32,959
perhaps

00:09:30,959 --> 00:09:34,160
that's that's all like an implementation

00:09:32,959 --> 00:09:37,200
detail but

00:09:34,160 --> 00:09:39,200
hopefully this is like showing a bit of

00:09:37,200 --> 00:09:42,000
how this might work

00:09:39,200 --> 00:09:42,000
and then um

00:09:42,720 --> 00:09:48,560
because the the v3 api calls are

00:09:45,839 --> 00:09:49,680
so granular we kind of have to like jump

00:09:48,560 --> 00:09:53,279
through some hoops

00:09:49,680 --> 00:09:56,399
when we're doing this so like because

00:09:53,279 --> 00:09:58,959
an existing client expects to hit like

00:09:56,399 --> 00:09:59,920
four or five different api endpoints to

00:09:58,959 --> 00:10:02,640
push a package

00:09:59,920 --> 00:10:03,279
and stage an app um having these

00:10:02,640 --> 00:10:05,440
individual

00:10:03,279 --> 00:10:06,800
custom resources for for different

00:10:05,440 --> 00:10:10,880
things like having a

00:10:06,800 --> 00:10:13,920
discrete package cr makes it so that um

00:10:10,880 --> 00:10:18,399
we can like track the same sort of

00:10:13,920 --> 00:10:18,399
of the cycle um

00:10:19,360 --> 00:10:22,959
as the the client might expect so so

00:10:21,839 --> 00:10:26,800
like here

00:10:22,959 --> 00:10:29,200
um the the cli uploads like a zip

00:10:26,800 --> 00:10:30,480
with the package source code as usual

00:10:29,200 --> 00:10:32,320
but then instead of doing like the

00:10:30,480 --> 00:10:33,279
normal like blob store and resource

00:10:32,320 --> 00:10:35,839
matching flow

00:10:33,279 --> 00:10:37,760
that existing cloud controller would do

00:10:35,839 --> 00:10:40,000
it's going to convert it into a zip file

00:10:37,760 --> 00:10:41,920
or it's going to convert it into a

00:10:40,000 --> 00:10:42,399
single layer oci image kind of like we

00:10:41,920 --> 00:10:45,600
do in

00:10:42,399 --> 00:10:47,920
ncf for capes and and track all that on

00:10:45,600 --> 00:10:49,600
on that package cr so that our api can

00:10:47,920 --> 00:10:51,839
convert it back into

00:10:49,600 --> 00:10:52,800
the like the states that the cli might

00:10:51,839 --> 00:10:54,399
expect

00:10:52,800 --> 00:10:55,920
then eventually end up in an image

00:10:54,399 --> 00:10:57,680
registry like

00:10:55,920 --> 00:11:00,320
that part is pretty similar to what goes

00:10:57,680 --> 00:11:03,519
on in cf for kids

00:11:00,320 --> 00:11:06,560
and then um like

00:11:03,519 --> 00:11:09,040
as you can see here we will have build

00:11:06,560 --> 00:11:12,399
resources and droplet resources

00:11:09,040 --> 00:11:15,519
um to power those endpoints and

00:11:12,399 --> 00:11:17,839
these like um

00:11:15,519 --> 00:11:19,760
in this diagram it kind of is similar to

00:11:17,839 --> 00:11:21,839
how how we've done it in cf for kate's

00:11:19,760 --> 00:11:24,160
but you could imagine this being like

00:11:21,839 --> 00:11:25,120
yeah like even another extension point

00:11:24,160 --> 00:11:28,320
where

00:11:25,120 --> 00:11:29,200
um because our our lightweight api only

00:11:28,320 --> 00:11:31,680
cares about

00:11:29,200 --> 00:11:33,120
the direct like build and droplet

00:11:31,680 --> 00:11:35,600
resources like

00:11:33,120 --> 00:11:37,519
you could imagine a more like plugable

00:11:35,600 --> 00:11:41,040
um staging implementation here

00:11:37,519 --> 00:11:44,160
where where you like swap out

00:11:41,040 --> 00:11:45,440
the build controller to create like um

00:11:44,160 --> 00:11:48,160
i'm just throwing out words here but

00:11:45,440 --> 00:11:51,200
like tekton stages or like something

00:11:48,160 --> 00:11:52,480
something else so

00:11:51,200 --> 00:11:54,480
this is where we're trying we're like

00:11:52,480 --> 00:11:58,160
kind of viewing like opportunities

00:11:54,480 --> 00:12:01,519
for um extension points just by granular

00:11:58,160 --> 00:12:01,519
granularizing these a bit

00:12:01,760 --> 00:12:05,360
and um then at the end of the day once

00:12:04,880 --> 00:12:08,880
you

00:12:05,360 --> 00:12:10,720
have a a staged

00:12:08,880 --> 00:12:12,160
droplet or image whatever you want to

00:12:10,720 --> 00:12:14,399
call it these days

00:12:12,160 --> 00:12:17,200
we'll we'll do the bookkeeping update

00:12:14,399 --> 00:12:20,639
the custom resources so that the api

00:12:17,200 --> 00:12:23,200
um shim can return responses that

00:12:20,639 --> 00:12:24,240
uh the clients like cli java client et

00:12:23,200 --> 00:12:28,160
cetera

00:12:24,240 --> 00:12:30,240
expect and uh and it will deploy

00:12:28,160 --> 00:12:31,440
very very similar to how it does in cf

00:12:30,240 --> 00:12:35,279
for case but

00:12:31,440 --> 00:12:37,279
without a database or um a lot of the

00:12:35,279 --> 00:12:39,279
rest of the like constellation of cloud

00:12:37,279 --> 00:12:42,240
controller deployments running

00:12:39,279 --> 00:12:44,720
so like we're hoping that this will be a

00:12:42,240 --> 00:12:46,560
lighter weight and more like

00:12:44,720 --> 00:12:48,240
friendlier implementation for people to

00:12:46,560 --> 00:12:51,360
experiment and stuff

00:12:48,240 --> 00:12:55,200
um yeah so

00:12:51,360 --> 00:12:55,200
i've i've been talking a lot um

00:12:55,440 --> 00:13:00,160
let's let folks ask some questions or

00:12:57,760 --> 00:13:00,160
anything

00:13:02,160 --> 00:13:08,240
i think from from my perspective

00:13:05,200 --> 00:13:10,880
like the whole topic of deep coupling

00:13:08,240 --> 00:13:11,680
via crds makes makes total sense like

00:13:10,880 --> 00:13:13,519
given that

00:13:11,680 --> 00:13:15,040
things are running on kubernetes that

00:13:13,519 --> 00:13:18,560
seems to be

00:13:15,040 --> 00:13:19,680
like the de facto way of building apis

00:13:18,560 --> 00:13:22,880
right and then

00:13:19,680 --> 00:13:23,839
like it's easy to envision how one could

00:13:22,880 --> 00:13:27,279
then

00:13:23,839 --> 00:13:29,200
kind of swap out one implementation of a

00:13:27,279 --> 00:13:30,720
controller that listens to the creation

00:13:29,200 --> 00:13:32,959
of a particular

00:13:30,720 --> 00:13:35,440
custom resource and kind of do something

00:13:32,959 --> 00:13:38,320
very different

00:13:35,440 --> 00:13:38,959
if that is required right so yeah i

00:13:38,320 --> 00:13:42,880
think

00:13:38,959 --> 00:13:42,880
that that's like

00:13:43,279 --> 00:13:47,440
very like a very good way of approaching

00:13:46,880 --> 00:13:49,839
things

00:13:47,440 --> 00:13:51,920
i guess where i don't have a feel is

00:13:49,839 --> 00:13:53,680
what should these objects actually be

00:13:51,920 --> 00:13:56,560
right and i think you spend

00:13:53,680 --> 00:13:58,560
quite some thinking already into like

00:13:56,560 --> 00:14:01,120
what granularity could these be

00:13:58,560 --> 00:14:02,399
how would you kind of represent things

00:14:01,120 --> 00:14:06,160
so this this package

00:14:02,399 --> 00:14:07,519
crd um seems to like like come from from

00:14:06,160 --> 00:14:09,600
that right so

00:14:07,519 --> 00:14:11,680
um and i think that's that's very

00:14:09,600 --> 00:14:14,800
valuable to to actually

00:14:11,680 --> 00:14:16,959
um spend the time thinking through

00:14:14,800 --> 00:14:18,720
through this and kind of coming up with

00:14:16,959 --> 00:14:19,680
suggestions on how those custom

00:14:18,720 --> 00:14:23,920
resources should

00:14:19,680 --> 00:14:27,600
actually be be scoped and

00:14:23,920 --> 00:14:27,920
designed yeah and that's a good point

00:14:27,600 --> 00:14:30,079
like

00:14:27,920 --> 00:14:31,760
um there's there's a lot of complexity

00:14:30,079 --> 00:14:33,760
with the number of these things and

00:14:31,760 --> 00:14:35,920
not all of them are strictly necessary

00:14:33,760 --> 00:14:37,760
like for example you could

00:14:35,920 --> 00:14:39,279
collapse like the build custom resource

00:14:37,760 --> 00:14:40,720
and the droplet custom resource into a

00:14:39,279 --> 00:14:42,240
single one like the droplet could be

00:14:40,720 --> 00:14:43,120
like the actual like the status of that

00:14:42,240 --> 00:14:46,240
resource

00:14:43,120 --> 00:14:47,040
for example um but like others like the

00:14:46,240 --> 00:14:50,320
package

00:14:47,040 --> 00:14:52,320
um at a surface glance they seem like

00:14:50,320 --> 00:14:54,160
they could be unnecessary but like

00:14:52,320 --> 00:14:56,880
over here we've done a deep dive into

00:14:54,160 --> 00:14:57,360
like all the calls like the cli makes

00:14:56,880 --> 00:15:00,000
when it's

00:14:57,360 --> 00:15:00,639
interacting with the package and there's

00:15:00,000 --> 00:15:02,399
like

00:15:00,639 --> 00:15:04,079
so many like polling calls and like

00:15:02,399 --> 00:15:04,480
looking for state of a thing that you

00:15:04,079 --> 00:15:06,720
see

00:15:04,480 --> 00:15:07,600
like yeah having a discrete thing for

00:15:06,720 --> 00:15:11,199
this is actually

00:15:07,600 --> 00:15:14,399
really useful but

00:15:11,199 --> 00:15:18,000
yeah but like i said like this is um

00:15:14,399 --> 00:15:20,160
like for illustration purposes

00:15:18,000 --> 00:15:21,760
i i think as we actually would like

00:15:20,160 --> 00:15:23,519
start to spike or like implement

00:15:21,760 --> 00:15:25,199
something based on this we would find

00:15:23,519 --> 00:15:28,639
opportunities to

00:15:25,199 --> 00:15:30,160
to really like hammer or like like dive

00:15:28,639 --> 00:15:32,240
in on what the right

00:15:30,160 --> 00:15:33,279
abstraction is that can like meet our

00:15:32,240 --> 00:15:37,519
needs but also not

00:15:33,279 --> 00:15:40,240
be like super super complicated um

00:15:37,519 --> 00:15:41,120
because like one other complexity here

00:15:40,240 --> 00:15:43,680
is

00:15:41,120 --> 00:15:44,160
in in cloud controller today like these

00:15:43,680 --> 00:15:46,320
are all

00:15:44,160 --> 00:15:47,199
tracked in a relational database and you

00:15:46,320 --> 00:15:49,199
have like strict

00:15:47,199 --> 00:15:51,839
relationships between them all that's

00:15:49,199 --> 00:15:54,639
easy to work with

00:15:51,839 --> 00:15:55,040
but these all are still related but we

00:15:54,639 --> 00:15:58,399
we

00:15:55,040 --> 00:15:58,720
lose the um the strict like foreign keys

00:15:58,399 --> 00:16:01,279
and

00:15:58,720 --> 00:16:02,880
everything so there probably is some

00:16:01,279 --> 00:16:06,839
value of combining them

00:16:02,880 --> 00:16:09,440
just for atomicity and that sort of

00:16:06,839 --> 00:16:11,839
thing

00:16:09,440 --> 00:16:13,360
and from from your perspective like i

00:16:11,839 --> 00:16:16,800
recall

00:16:13,360 --> 00:16:19,199
discussions around in an ideal world one

00:16:16,800 --> 00:16:21,199
would be able to kind of either use the

00:16:19,199 --> 00:16:24,399
cli or directly

00:16:21,199 --> 00:16:27,440
create and manipulate custom resources

00:16:24,399 --> 00:16:29,759
are some of those like just there

00:16:27,440 --> 00:16:31,360
for that cli use case or do you think

00:16:29,759 --> 00:16:35,120
like everybody would kind of

00:16:31,360 --> 00:16:37,759
create also these custom resource

00:16:35,120 --> 00:16:39,440
type so to speak um if they would

00:16:37,759 --> 00:16:42,720
directly interact with a

00:16:39,440 --> 00:16:46,240
or via the kubernetes cli um

00:16:42,720 --> 00:16:50,240
yeah that's a good a good question

00:16:46,240 --> 00:16:51,839
like my my hope is that um people who

00:16:50,240 --> 00:16:55,120
want to interact directly

00:16:51,839 --> 00:16:57,519
like may use a higher level um

00:16:55,120 --> 00:16:59,839
like resource that we'd have like either

00:16:57,519 --> 00:17:03,040
like an app manifest one or

00:16:59,839 --> 00:17:08,079
or some some equivalent that's

00:17:03,040 --> 00:17:08,079
more along the app side and um

00:17:08,400 --> 00:17:11,679
i don't know it's it's a tricky question

00:17:10,240 --> 00:17:13,600
because if you if you skip

00:17:11,679 --> 00:17:16,000
intermediary resources then you can't

00:17:13,600 --> 00:17:18,160
you may break um

00:17:16,000 --> 00:17:19,439
the api for for users who want to

00:17:18,160 --> 00:17:23,120
interact with that app

00:17:19,439 --> 00:17:26,319
um with traditional cf clients

00:17:23,120 --> 00:17:29,760
so like if you were

00:17:26,319 --> 00:17:31,280
doing pure pure cube cuddle like like cr

00:17:29,760 --> 00:17:33,120
manipulation you could totally probably

00:17:31,280 --> 00:17:36,559
skip like the package and just give it

00:17:33,120 --> 00:17:39,679
an image directly um i like the droplet

00:17:36,559 --> 00:17:41,039
creation state but i am i'm not sure how

00:17:39,679 --> 00:17:43,919
that might

00:17:41,039 --> 00:17:44,480
look for for the api it might be fine it

00:17:43,919 --> 00:17:46,160
like

00:17:44,480 --> 00:17:47,679
because a lot of those resources have

00:17:46,160 --> 00:17:49,280
like built-in like pruning and

00:17:47,679 --> 00:17:52,960
expiration anyway

00:17:49,280 --> 00:17:55,919
in cf today um but

00:17:52,960 --> 00:17:57,200
but yeah getting uh like validation of

00:17:55,919 --> 00:18:00,880
those workflows

00:17:57,200 --> 00:18:04,160
would be totally be useful yeah i think

00:18:00,880 --> 00:18:06,880
like the the nice thing about this diet

00:18:04,160 --> 00:18:09,360
or like about what is highlighted here

00:18:06,880 --> 00:18:11,280
is like by having the custom resources

00:18:09,360 --> 00:18:13,919
as like the source of truth

00:18:11,280 --> 00:18:15,919
like unlike all of the previous like cf

00:18:13,919 --> 00:18:18,480
like cf for kids like

00:18:15,919 --> 00:18:19,280
um and cf on case projects like it

00:18:18,480 --> 00:18:22,880
allows you

00:18:19,280 --> 00:18:25,200
the ability to like directly manipulate

00:18:22,880 --> 00:18:26,960
um these like custom resources if you

00:18:25,200 --> 00:18:30,000
want and have like direct

00:18:26,960 --> 00:18:31,280
cuddle access but i think like to the

00:18:30,000 --> 00:18:33,520
point of like do we

00:18:31,280 --> 00:18:34,559
like there is an open question of like

00:18:33,520 --> 00:18:35,919
what would we

00:18:34,559 --> 00:18:37,840
sort of want to set up as like

00:18:35,919 --> 00:18:40,640
expectations for

00:18:37,840 --> 00:18:42,480
like the user on like what they want to

00:18:40,640 --> 00:18:45,200
manipulate and what they don't

00:18:42,480 --> 00:18:46,640
because i think like also like similarly

00:18:45,200 --> 00:18:47,840
when you look at like a lot of these

00:18:46,640 --> 00:18:51,600
diagrams and like

00:18:47,840 --> 00:18:52,720
we look at like what um like some custom

00:18:51,600 --> 00:18:54,640
resources

00:18:52,720 --> 00:18:56,640
might actually drive the like creation

00:18:54,640 --> 00:18:59,039
or update of like

00:18:56,640 --> 00:19:00,960
other other custom resources like you

00:18:59,039 --> 00:19:03,440
have controllers that

00:19:00,960 --> 00:19:06,080
are like actuating it like updating

00:19:03,440 --> 00:19:08,160
status fields or like information on it

00:19:06,080 --> 00:19:09,280
um like i think you know part of that

00:19:08,160 --> 00:19:10,559
also then is like what is the

00:19:09,280 --> 00:19:14,000
expectation

00:19:10,559 --> 00:19:15,840
on the like on like ownership references

00:19:14,000 --> 00:19:17,679
right like is the controller actually

00:19:15,840 --> 00:19:19,600
owning the update of that object and so

00:19:17,679 --> 00:19:21,600
if somebody tries to go in

00:19:19,600 --> 00:19:25,039
and like manually make a change will

00:19:21,600 --> 00:19:27,039
that be clobbered or not so i think like

00:19:25,039 --> 00:19:28,880
we're going to have to do exploration on

00:19:27,039 --> 00:19:31,600
like what

00:19:28,880 --> 00:19:33,520
what do end users actually want to be

00:19:31,600 --> 00:19:36,880
able to manipulate

00:19:33,520 --> 00:19:39,520
um and like how can we like make it so

00:19:36,880 --> 00:19:42,160
that you know maybe they can use

00:19:39,520 --> 00:19:43,679
the api or the cli to initially set up

00:19:42,160 --> 00:19:45,200
all of their resources

00:19:43,679 --> 00:19:47,360
and then they're like oh i want finer

00:19:45,200 --> 00:19:48,559
grain control is there like a flag or a

00:19:47,360 --> 00:19:50,720
switch where they can say

00:19:48,559 --> 00:19:52,480
this is no longer going to be managed by

00:19:50,720 --> 00:19:56,480
like the cf work

00:19:52,480 --> 00:19:57,600
like by like the cf like workflow and

00:19:56,480 --> 00:19:59,440
instead like i

00:19:57,600 --> 00:20:01,760
i want to go in and like manually do

00:19:59,440 --> 00:20:03,600
some changes and i'm trading off

00:20:01,760 --> 00:20:04,799
now the fact that i don't get all of the

00:20:03,600 --> 00:20:09,760
benefits of like

00:20:04,799 --> 00:20:12,559
this system like um watching out for it

00:20:09,760 --> 00:20:14,080
yeah also in my mind it's probably this

00:20:12,559 --> 00:20:17,280
trade off of like

00:20:14,080 --> 00:20:17,280
do you want to have a

00:20:17,600 --> 00:20:21,280
system that works optimally well with

00:20:20,159 --> 00:20:23,919
like the cli

00:20:21,280 --> 00:20:24,320
or do you want to have a system which

00:20:23,919 --> 00:20:26,880
looks

00:20:24,320 --> 00:20:29,679
and feels nice if you look at it from a

00:20:26,880 --> 00:20:31,520
pure kubernetes perspective right so

00:20:29,679 --> 00:20:33,200
you have to kind of somewhere make that

00:20:31,520 --> 00:20:36,159
trade-off between those those two

00:20:33,200 --> 00:20:36,159
extremes probably

00:20:40,159 --> 00:20:45,600
so just a random

00:20:43,360 --> 00:20:47,120
aside thought in this scenario basically

00:20:45,600 --> 00:20:50,240
everything that used to be

00:20:47,120 --> 00:20:53,600
in ccdb now and ncd

00:20:50,240 --> 00:20:58,080
has some crs is there any

00:20:53,600 --> 00:21:00,960
scenario where ccdb would live on

00:20:58,080 --> 00:21:01,600
as like a caching layer for logging

00:21:00,960 --> 00:21:03,360
metrics

00:21:01,600 --> 00:21:05,039
or something like moving the source of

00:21:03,360 --> 00:21:08,080
truth to etcd

00:21:05,039 --> 00:21:11,039
but does ccd still exist somehow

00:21:08,080 --> 00:21:11,039
or something similar

00:21:11,760 --> 00:21:16,640
i think this is where you get like i

00:21:14,840 --> 00:21:19,039
think

00:21:16,640 --> 00:21:20,720
you could have a world where you could

00:21:19,039 --> 00:21:23,760
have like caching

00:21:20,720 --> 00:21:26,320
but i think that gets that like the

00:21:23,760 --> 00:21:26,799
cost benefit of like how do you actually

00:21:26,320 --> 00:21:29,840
set up

00:21:26,799 --> 00:21:30,480
like cashing like what is what is the

00:21:29,840 --> 00:21:34,559
benefit

00:21:30,480 --> 00:21:37,360
of like um you know keeping a relational

00:21:34,559 --> 00:21:40,000
database around for that like usage

00:21:37,360 --> 00:21:41,919
um versus like yeah like the engineering

00:21:40,000 --> 00:21:44,559
costs to just like make that happen

00:21:41,919 --> 00:21:45,600
and then the sustained like

00:21:44,559 --> 00:21:48,799
implementation

00:21:45,600 --> 00:21:52,880
like cost as well yeah

00:21:48,799 --> 00:21:56,000
makes sense i guess uh maybe the root of

00:21:52,880 --> 00:21:56,720
the more concerned question is uh what

00:21:56,000 --> 00:22:00,080
is the

00:21:56,720 --> 00:22:02,720
difference in a like kubernetes api load

00:22:00,080 --> 00:22:04,960
in the new world versus the current

00:22:02,720 --> 00:22:08,720
world is it wider or heavier

00:22:04,960 --> 00:22:09,520
what do you think it would definitely be

00:22:08,720 --> 00:22:13,440
heavier

00:22:09,520 --> 00:22:17,280
in with this um

00:22:13,440 --> 00:22:20,400
i and an open question

00:22:17,280 --> 00:22:23,520
i have is um

00:22:20,400 --> 00:22:25,360
how how much can we like

00:22:23,520 --> 00:22:26,880
leverage like just like in-memory

00:22:25,360 --> 00:22:30,240
caching on some of these

00:22:26,880 --> 00:22:34,480
controllers to to mitigate that

00:22:30,240 --> 00:22:36,640
um but like but the fact is like we are

00:22:34,480 --> 00:22:38,000
like pushing stuff that used to be in

00:22:36,640 --> 00:22:42,000
like a highly performant

00:22:38,000 --> 00:22:45,120
like like my sequel or postgres onto a

00:22:42,000 --> 00:22:47,679
lcd um

00:22:45,120 --> 00:22:48,559
and it's it's not gonna perform to the

00:22:47,679 --> 00:22:52,840
same scale

00:22:48,559 --> 00:22:55,440
that like like cf or vms used to

00:22:52,840 --> 00:22:58,960
um but

00:22:55,440 --> 00:23:02,400
maybe that's okay like because

00:22:58,960 --> 00:23:04,080
already um like we we've

00:23:02,400 --> 00:23:05,840
observed that like a single kubernetes

00:23:04,080 --> 00:23:07,679
cluster like

00:23:05,840 --> 00:23:09,039
doesn't run the same amount of workloads

00:23:07,679 --> 00:23:12,080
or or anything as

00:23:09,039 --> 00:23:13,760
like how you could scale diego's cells

00:23:12,080 --> 00:23:17,440
to like 300 plus cells

00:23:13,760 --> 00:23:18,080
um and that like various like cluster

00:23:17,440 --> 00:23:20,480
sharding

00:23:18,080 --> 00:23:24,480
approaches and and stuff can be a

00:23:20,480 --> 00:23:24,480
mitigation there as well potentially

00:23:28,640 --> 00:23:31,679
cool thanks for the answer

00:23:35,120 --> 00:23:38,799
tim i i find the idea of having like an

00:23:37,280 --> 00:23:41,679
app manifest cr

00:23:38,799 --> 00:23:43,039
uh really interesting is that a already

00:23:41,679 --> 00:23:44,880
an existing resource

00:23:43,039 --> 00:23:46,159
that cc tracks is part of like the

00:23:44,880 --> 00:23:49,440
server-side manifest

00:23:46,159 --> 00:23:50,640
apply it is a i'd call it like a

00:23:49,440 --> 00:23:55,200
pseudoresource

00:23:50,640 --> 00:23:56,720
so it um you you apply a manifest and

00:23:55,200 --> 00:23:58,000
you can get one back out but there's

00:23:56,720 --> 00:24:01,120
nothing in the database

00:23:58,000 --> 00:24:02,320
um about like called a manifest and it's

00:24:01,120 --> 00:24:04,640
it's just constructed

00:24:02,320 --> 00:24:07,600
constructed by these various other

00:24:04,640 --> 00:24:07,600
tables as needed

00:24:07,919 --> 00:24:11,919
um and it's also like may not be

00:24:10,640 --> 00:24:15,120
strictly necessary

00:24:11,919 --> 00:24:15,919
for like for this design we just felt it

00:24:15,120 --> 00:24:18,960
was interesting

00:24:15,919 --> 00:24:21,919
because it would provide like a one

00:24:18,960 --> 00:24:22,640
one stop cr for someone to like declare

00:24:21,919 --> 00:24:25,679
their app and

00:24:22,640 --> 00:24:28,799
apply it yeah i was thinking that that

00:24:25,679 --> 00:24:28,799
could actually be a nice

00:24:31,360 --> 00:24:34,400
feature that would be user facing for

00:24:33,840 --> 00:24:37,440
people that

00:24:34,400 --> 00:24:47,840
would end up just using uh the crs

00:24:37,440 --> 00:24:47,840
in the case api

00:24:51,520 --> 00:24:54,640
yeah i think like when i had first seen

00:24:54,240 --> 00:24:57,679
this

00:24:54,640 --> 00:24:58,880
i was like why like why would we want it

00:24:57,679 --> 00:25:01,039
at manifest cr

00:24:58,880 --> 00:25:01,919
and like the main call out really was

00:25:01,039 --> 00:25:04,640
like

00:25:01,919 --> 00:25:05,039
oh it does provide like you know that

00:25:04,640 --> 00:25:09,360
nice

00:25:05,039 --> 00:25:11,600
like well it sort of makes this like

00:25:09,360 --> 00:25:12,960
the api like at least like for that call

00:25:11,600 --> 00:25:14,960
could be like very straightforward but

00:25:12,960 --> 00:25:17,760
also creates that nice interface

00:25:14,960 --> 00:25:18,640
for like somebody who maybe is like more

00:25:17,760 --> 00:25:22,320
comfortable

00:25:18,640 --> 00:25:24,320
with like um with like

00:25:22,320 --> 00:25:26,880
core kubernetes concepts to just

00:25:24,320 --> 00:25:30,080
directly go ahead and like

00:25:26,880 --> 00:25:33,600
modify the app manifest cr

00:25:30,080 --> 00:25:35,279
then like feel like they have to use the

00:25:33,600 --> 00:25:38,960
cli

00:25:35,279 --> 00:25:42,720
or api yeah

00:25:38,960 --> 00:25:43,919
like and for me like one of the really

00:25:42,720 --> 00:25:46,559
nice things about it

00:25:43,919 --> 00:25:47,520
is like if you have an existing um cloud

00:25:46,559 --> 00:25:49,440
foundry

00:25:47,520 --> 00:25:51,360
with an existing app deployed but you

00:25:49,440 --> 00:25:52,799
don't know much about how that app is

00:25:51,360 --> 00:25:54,159
configured you can hit the generate

00:25:52,799 --> 00:25:56,400
manifest endpoint

00:25:54,159 --> 00:25:57,919
and it will dump everything out about it

00:25:56,400 --> 00:25:59,360
and like it would be really cool if you

00:25:57,919 --> 00:26:02,240
can just apply that

00:25:59,360 --> 00:26:03,039
or something similar that to directly to

00:26:02,240 --> 00:26:11,840
to one of these

00:26:03,039 --> 00:26:11,840
and see it deploy the same thing

00:26:12,480 --> 00:26:18,080
with the caveat that you may need to um

00:26:16,080 --> 00:26:19,840
still have the source code or download

00:26:18,080 --> 00:26:22,080
the droplet and convert it or something

00:26:19,840 --> 00:26:22,080
but

00:26:23,039 --> 00:26:26,159
yeah that that makes sense i guess there

00:26:24,640 --> 00:26:28,240
there is still that issue of like

00:26:26,159 --> 00:26:29,840
okay where are the bits are they in an

00:26:28,240 --> 00:26:32,559
image are they just about

00:26:29,840 --> 00:26:34,000
in a refill somewhere you know did you

00:26:32,559 --> 00:26:38,559
cram them into this uh

00:26:34,000 --> 00:26:38,960
this uh degenerate oci image yeah if you

00:26:38,559 --> 00:26:40,640
um

00:26:38,960 --> 00:26:42,480
you can imagine like if you have

00:26:40,640 --> 00:26:44,480
permission to get the manifest you can

00:26:42,480 --> 00:26:46,559
you can download the droplet and and

00:26:44,480 --> 00:26:49,679
convert it if you if you wanted to

00:26:46,559 --> 00:26:49,679
yeah that's a good point

00:26:50,799 --> 00:26:54,400
i mean there's always the possibility it

00:26:52,240 --> 00:26:57,840
lives uh re-bone you can have it fetched

00:26:54,400 --> 00:26:57,840
from there and stuff like that too

00:26:59,279 --> 00:27:03,039
sort of like a git ops model for

00:27:01,039 --> 00:27:07,279
deploying yeah absolutely

00:27:03,039 --> 00:27:09,279
a cluster

00:27:07,279 --> 00:27:10,880
so tim in the in the diagram of

00:27:09,279 --> 00:27:12,880
resources that you've got there like

00:27:10,880 --> 00:27:15,360
there's those process crs with

00:27:12,880 --> 00:27:17,120
those maybe like if we were to uh

00:27:15,360 --> 00:27:20,480
actually try to make this

00:27:17,120 --> 00:27:21,760
um get realized and to end today like

00:27:20,480 --> 00:27:23,760
i'm guessing that irene would fit

00:27:21,760 --> 00:27:24,640
underneath that as a way to implement

00:27:23,760 --> 00:27:28,880
that

00:27:24,640 --> 00:27:31,440
yeah um process crs

00:27:28,880 --> 00:27:35,440
this this is a like just a black box for

00:27:31,440 --> 00:27:37,760
application workload crs um

00:27:35,440 --> 00:27:38,559
you with the information contained in

00:27:37,760 --> 00:27:40,240
these three

00:27:38,559 --> 00:27:42,480
um at least with this modeling the app

00:27:40,240 --> 00:27:44,640
the process and the droplet cr you can

00:27:42,480 --> 00:27:47,279
create an ironing lrp you could create

00:27:44,640 --> 00:27:50,799
like a k-native service you can

00:27:47,279 --> 00:27:53,919
do what you want with it um and like

00:27:50,799 --> 00:27:56,159
these uh

00:27:53,919 --> 00:27:57,760
this could be collapsed maybe it's it's

00:27:56,159 --> 00:28:00,080
a little iffier because like

00:27:57,760 --> 00:28:00,880
in ncf an app can have multiple

00:28:00,080 --> 00:28:03,200
processes

00:28:00,880 --> 00:28:04,159
and since those correspond one-to-one

00:28:03,200 --> 00:28:07,840
with

00:28:04,159 --> 00:28:11,120
um lrps and and stuff

00:28:07,840 --> 00:28:12,960
it uh you could combine

00:28:11,120 --> 00:28:15,440
this into a single thing but the the

00:28:12,960 --> 00:28:17,360
bookkeeping gets a little trickier

00:28:15,440 --> 00:28:20,960
and for the sake of just the diagram

00:28:17,360 --> 00:28:20,960
it's it's cleaner if you do it like this

00:28:21,120 --> 00:28:24,559
yeah i think like maybe one interesting

00:28:23,360 --> 00:28:25,840
call out like

00:28:24,559 --> 00:28:27,520
or like what you just called out like

00:28:25,840 --> 00:28:29,440
with this being a black box is really

00:28:27,520 --> 00:28:32,320
important of like

00:28:29,440 --> 00:28:33,120
just because like like the cf process

00:28:32,320 --> 00:28:35,440
controller

00:28:33,120 --> 00:28:37,520
like is something that could be swapped

00:28:35,440 --> 00:28:39,200
out and be creating like any

00:28:37,520 --> 00:28:40,559
could be directly creating like

00:28:39,200 --> 00:28:42,799
resources

00:28:40,559 --> 00:28:44,880
uh or like application workloads um but

00:28:42,799 --> 00:28:45,919
just as easily like you said like could

00:28:44,880 --> 00:28:48,399
be

00:28:45,919 --> 00:28:48,960
like actually creating like an irini lrp

00:28:48,399 --> 00:28:51,120
cr

00:28:48,960 --> 00:28:52,159
and then you have like the irini

00:28:51,120 --> 00:28:54,960
controller

00:28:52,159 --> 00:28:56,880
that is then like you know actuating on

00:28:54,960 --> 00:28:58,000
that and creating either stateful sets

00:28:56,880 --> 00:29:00,320
or deployments

00:28:58,000 --> 00:29:01,919
or you could like instead of have a

00:29:00,320 --> 00:29:03,760
different cf process controller

00:29:01,919 --> 00:29:05,440
that creates like the k native like

00:29:03,760 --> 00:29:06,880
resources and then

00:29:05,440 --> 00:29:08,880
if you have canada deployed on your

00:29:06,880 --> 00:29:11,200
cluster then that could actually

00:29:08,880 --> 00:29:12,000
actually and like create deployments for

00:29:11,200 --> 00:29:14,000
you

00:29:12,000 --> 00:29:16,640
um and so like this black boxes and just

00:29:14,000 --> 00:29:18,799
like a application workloads are created

00:29:16,640 --> 00:29:19,919
but also like could represent like

00:29:18,799 --> 00:29:22,159
additional like

00:29:19,919 --> 00:29:23,120
resources and controllers that help you

00:29:22,159 --> 00:29:27,840
eventually like

00:29:23,120 --> 00:29:27,840
make it to a running workload

00:29:31,120 --> 00:29:37,600
yeah i've mentioned before that that the

00:29:34,480 --> 00:29:40,640
the arena lrp resources are very much

00:29:37,600 --> 00:29:42,720
work in progress right so i think

00:29:40,640 --> 00:29:43,840
we should take that into account uh when

00:29:42,720 --> 00:29:47,120
design is apis

00:29:43,840 --> 00:29:50,080
we can definitely change

00:29:47,120 --> 00:29:51,679
the how how the the lrp resources look

00:29:50,080 --> 00:29:53,279
like to fit

00:29:51,679 --> 00:29:55,039
an interface that looks like this if we

00:29:53,279 --> 00:29:57,760
need to

00:29:55,039 --> 00:29:59,440
uh or the other way around we can use

00:29:57,760 --> 00:30:01,760
the lrp

00:29:59,440 --> 00:30:04,720
the the way the lrp resources look like

00:30:01,760 --> 00:30:06,799
which has been informed from

00:30:04,720 --> 00:30:08,080
basically being it's a one-on-one pot

00:30:06,799 --> 00:30:09,600
more or less of the rest

00:30:08,080 --> 00:30:11,919
resources which have been used for a

00:30:09,600 --> 00:30:13,760
long time so that could be a way to

00:30:11,919 --> 00:30:15,440
request a starting point to give you an

00:30:13,760 --> 00:30:17,279
idea of which information is needed to

00:30:15,440 --> 00:30:20,000
create the process

00:30:17,279 --> 00:30:22,960
but i guess you you you have a process

00:30:20,000 --> 00:30:24,640
model on your side but that

00:30:22,960 --> 00:30:26,559
they must they must be looking quite

00:30:24,640 --> 00:30:26,960
similar because otherwise nothing would

00:30:26,559 --> 00:30:30,080
work

00:30:26,960 --> 00:30:34,000
at the moment yeah

00:30:30,080 --> 00:30:36,799
this one is just for for the

00:30:34,000 --> 00:30:38,720
powering of the apis it's convenient to

00:30:36,799 --> 00:30:39,200
have a discrete process model just

00:30:38,720 --> 00:30:42,240
because

00:30:39,200 --> 00:30:45,200
um that's where the desired like

00:30:42,240 --> 00:30:45,760
start and stop state of an lrp actually

00:30:45,200 --> 00:30:48,880
lives

00:30:45,760 --> 00:30:51,200
on the api um

00:30:48,880 --> 00:30:52,880
because like for an app all of its

00:30:51,200 --> 00:30:56,640
processes can be

00:30:52,880 --> 00:30:59,120
um like mutated independently

00:30:56,640 --> 00:31:00,559
but yeah like you like you both have

00:30:59,120 --> 00:31:02,880
said though like

00:31:00,559 --> 00:31:04,000
the irene the line between this and the

00:31:02,880 --> 00:31:06,559
irony lrp definitely

00:31:04,000 --> 00:31:08,399
gets fuzzy and there there may be value

00:31:06,559 --> 00:31:11,360
in having them be discreet things

00:31:08,399 --> 00:31:13,279
or or combining it and maybe the lrp the

00:31:11,360 --> 00:31:16,559
irony lrp becomes

00:31:13,279 --> 00:31:17,279
like like you have controllers built off

00:31:16,559 --> 00:31:19,120
of that

00:31:17,279 --> 00:31:20,559
and that those can either be the irony

00:31:19,120 --> 00:31:22,880
controller or like

00:31:20,559 --> 00:31:26,159
other ones but it's there's a lot of

00:31:22,880 --> 00:31:26,159
like flexibility here

00:31:28,960 --> 00:31:32,559
right yeah i guess in in terms of the

00:31:30,720 --> 00:31:35,200
the interfaces that we'd been discussing

00:31:32,559 --> 00:31:37,760
in the vision dock like we could still

00:31:35,200 --> 00:31:40,799
end up having like the irony lrp be

00:31:37,760 --> 00:31:43,840
the you know that that interface out

00:31:40,799 --> 00:31:44,399
to the subsystem potentially whereas you

00:31:43,840 --> 00:31:45,919
know these

00:31:44,399 --> 00:31:47,679
these green resources seem like they're

00:31:45,919 --> 00:31:49,279
much more closely aligned to the domain

00:31:47,679 --> 00:31:50,559
model that we've already had in cloud

00:31:49,279 --> 00:31:51,679
controller

00:31:50,559 --> 00:31:54,080
and so they'd be somewhat more

00:31:51,679 --> 00:31:57,840
user-facing um and

00:31:54,080 --> 00:31:59,600
i think to baron's point um

00:31:57,840 --> 00:32:01,279
we could even have a model where end

00:31:59,600 --> 00:32:04,240
users are bypassing

00:32:01,279 --> 00:32:05,760
the cfcli entirely and just manipulating

00:32:04,240 --> 00:32:15,840
even those intermediate

00:32:05,760 --> 00:32:15,840
crs in the gates api

00:32:16,080 --> 00:32:20,960
and the the cloud foundry api to

00:32:18,480 --> 00:32:21,919
kubernetes shim box that's displayed

00:32:20,960 --> 00:32:25,039
here this is

00:32:21,919 --> 00:32:27,279
like essentially that exposes a rest api

00:32:25,039 --> 00:32:29,200
like the same rest api that cloud

00:32:27,279 --> 00:32:31,760
controller exposes and

00:32:29,200 --> 00:32:34,159
then kind of starts generating the the

00:32:31,760 --> 00:32:36,080
various custom resources right

00:32:34,159 --> 00:32:38,000
yeah yeah that's that's it it's

00:32:36,080 --> 00:32:41,120
basically

00:32:38,000 --> 00:32:43,279
a a v3

00:32:41,120 --> 00:32:44,960
another implementation of the v3 api

00:32:43,279 --> 00:32:48,159
that we would

00:32:44,960 --> 00:32:51,120
like build iteratively sorry as

00:32:48,159 --> 00:32:51,760
uh as we need but it's backed completely

00:32:51,120 --> 00:32:57,840
by these

00:32:51,760 --> 00:32:57,840
and um

00:33:02,799 --> 00:33:06,799
i don't know if shim is necessarily the

00:33:04,399 --> 00:33:08,240
right word for it but

00:33:06,799 --> 00:33:11,840
we've struggled to find what the right

00:33:08,240 --> 00:33:11,840
word is for us

00:33:19,279 --> 00:33:22,799
and and just to be clear like we've

00:33:20,799 --> 00:33:24,000
we've had them on kind of just a

00:33:22,799 --> 00:33:26,240
you know we're we're not probably

00:33:24,000 --> 00:33:30,399
picking up the cc code base

00:33:26,240 --> 00:33:33,120
and um manipulating it to produce that

00:33:30,399 --> 00:33:34,720
this is probably just let's let's start

00:33:33,120 --> 00:33:38,240
re-implementing

00:33:34,720 --> 00:33:41,360
uh a subset of uh cc endpoints

00:33:38,240 --> 00:33:44,960
and whatever other services

00:33:41,360 --> 00:33:48,320
we would need yeah yeah i i think my

00:33:44,960 --> 00:33:51,279
my thought is could that work also

00:33:48,320 --> 00:33:53,840
somehow benefit the bosch managed cf

00:33:51,279 --> 00:33:56,720
world

00:33:53,840 --> 00:33:58,559
like one thing which would be probably

00:33:56,720 --> 00:34:01,440
too ambitious would be to say hey

00:33:58,559 --> 00:34:03,440
let's introduce a kubernetes api server

00:34:01,440 --> 00:34:05,360
instead of the ruby based cloud

00:34:03,440 --> 00:34:08,000
controller all right because that would

00:34:05,360 --> 00:34:09,760
kind of probably just trade one very

00:34:08,000 --> 00:34:10,720
huge piece of technology with another

00:34:09,760 --> 00:34:14,800
one but

00:34:10,720 --> 00:34:17,280
like the the pure fact that there is

00:34:14,800 --> 00:34:19,599
like a cloud foundry api or the subset

00:34:17,280 --> 00:34:20,960
of a cloud foundry api could that also

00:34:19,599 --> 00:34:23,200
help in

00:34:20,960 --> 00:34:24,720
kind of slimming down the the bosch

00:34:23,200 --> 00:34:27,679
managed world

00:34:24,720 --> 00:34:28,879
obviously it's not like it it's not just

00:34:27,679 --> 00:34:32,079
a byproduct of

00:34:28,879 --> 00:34:33,440
like this work here but i'm i'm trying

00:34:32,079 --> 00:34:35,359
to to think

00:34:33,440 --> 00:34:39,280
like that at least might might

00:34:35,359 --> 00:34:39,280
contribute to such an activity

00:34:41,359 --> 00:34:44,639
have we decided that this is going to be

00:34:43,599 --> 00:34:48,480
like a brand new

00:34:44,639 --> 00:34:50,079
component uh like

00:34:48,480 --> 00:34:51,839
made of all controllers for all these

00:34:50,079 --> 00:34:55,280
resources i guess so

00:34:51,839 --> 00:34:58,240
this would be distinct from the current

00:34:55,280 --> 00:34:58,240
cloud controller codebase

00:34:58,560 --> 00:35:02,400
i think that's what we're discussing

00:34:59,839 --> 00:35:06,960
right now okay we're just

00:35:02,400 --> 00:35:09,760
thinking about this option right

00:35:06,960 --> 00:35:10,160
um i think like i mean based on you know

00:35:09,760 --> 00:35:12,400
what

00:35:10,160 --> 00:35:15,280
what's what we're presenting right here

00:35:12,400 --> 00:35:17,520
i i at least like

00:35:15,280 --> 00:35:18,880
do you see the benefit in it being

00:35:17,520 --> 00:35:22,320
something

00:35:18,880 --> 00:35:26,320
like new versus the existing

00:35:22,320 --> 00:35:30,560
like cloud controller code base um

00:35:26,320 --> 00:35:31,760
mainly because i know like like i think

00:35:30,560 --> 00:35:34,320
like

00:35:31,760 --> 00:35:35,280
a like there's a question on like you

00:35:34,320 --> 00:35:38,400
know

00:35:35,280 --> 00:35:40,079
like having both the database and custom

00:35:38,400 --> 00:35:42,560
resources like what is the source of

00:35:40,079 --> 00:35:45,920
truth how do you keep that in sync

00:35:42,560 --> 00:35:49,839
um and then i think also

00:35:45,920 --> 00:35:52,400
um when we talk about

00:35:49,839 --> 00:35:54,480
like thinking about what custom

00:35:52,400 --> 00:35:56,400
resources we want to create

00:35:54,480 --> 00:35:58,240
um you know we're starting by thinking

00:35:56,400 --> 00:35:58,640
about like what are all of the objects

00:35:58,240 --> 00:36:00,560
that

00:35:58,640 --> 00:36:02,240
we store in the database today and like

00:36:00,560 --> 00:36:03,359
what are all of these cloud controller

00:36:02,240 --> 00:36:05,280
concepts

00:36:03,359 --> 00:36:07,200
um but it's like i think tim mentioned

00:36:05,280 --> 00:36:08,079
earlier and like we we also discussed

00:36:07,200 --> 00:36:11,359
was like

00:36:08,079 --> 00:36:13,280
how could we maybe slim down the number

00:36:11,359 --> 00:36:15,040
of custom resources we create and like

00:36:13,280 --> 00:36:17,359
what could be combined

00:36:15,040 --> 00:36:18,240
um and what needs to like remain a

00:36:17,359 --> 00:36:20,720
distinct

00:36:18,240 --> 00:36:21,839
resource and so i think that you also

00:36:20,720 --> 00:36:24,160
run into a challenge

00:36:21,839 --> 00:36:26,320
if you try to like evolve the existing

00:36:24,160 --> 00:36:29,440
cloud controller database to support

00:36:26,320 --> 00:36:33,040
both um like

00:36:29,440 --> 00:36:37,359
cf for vms and also um

00:36:33,040 --> 00:36:39,520
like cf on case because like

00:36:37,359 --> 00:36:41,200
like because you know there's an

00:36:39,520 --> 00:36:43,680
expectation on like what

00:36:41,200 --> 00:36:46,000
resources are being created when and if

00:36:43,680 --> 00:36:49,040
you try to start to combine them

00:36:46,000 --> 00:36:53,280
i anticipate you'd run into problems

00:36:49,040 --> 00:36:56,720
um and i think like also just

00:36:53,280 --> 00:37:00,880
generally like

00:36:56,720 --> 00:37:04,560
working on cf4 kates and making changes

00:37:00,880 --> 00:37:06,240
to cloud controller like i think

00:37:04,560 --> 00:37:10,240
engineers on the team have found that to

00:37:06,240 --> 00:37:12,079
be a pain point um

00:37:10,240 --> 00:37:14,320
and so i think from an engineering cost

00:37:12,079 --> 00:37:18,400
perspective as well

00:37:14,320 --> 00:37:20,839
it seems worth creating a new

00:37:18,400 --> 00:37:23,119
component and really opting into

00:37:20,839 --> 00:37:24,320
endpoints instead of like

00:37:23,119 --> 00:37:26,480
and i think this gets to backwards

00:37:24,320 --> 00:37:28,000
compatibility too of like you might get

00:37:26,480 --> 00:37:29,839
these endpoints for free but are they

00:37:28,000 --> 00:37:33,280
actually backwards compatible we don't

00:37:29,839 --> 00:37:33,280
know like we haven't tested it

00:37:34,839 --> 00:37:37,839
uh

00:37:40,320 --> 00:37:44,320
so is there a good understanding of

00:37:42,640 --> 00:37:48,720
which end points this

00:37:44,320 --> 00:37:48,720
this would be like i've i've seen some

00:37:49,119 --> 00:37:54,960
confusion still around like uh what

00:37:52,320 --> 00:37:55,920
what does it mean v3 is complete and

00:37:54,960 --> 00:38:00,880
like does it still

00:37:55,920 --> 00:38:00,880
involve like v2 endpoints and all of

00:38:02,839 --> 00:38:05,839
that

00:38:07,119 --> 00:38:11,680
i'm i'm i'm guessing oh go ahead i was

00:38:10,240 --> 00:38:13,200
just gonna say i think to start we

00:38:11,680 --> 00:38:16,240
definitely start with targeting

00:38:13,200 --> 00:38:19,359
like the v7 cli push workflow

00:38:16,240 --> 00:38:20,320
which is primarily v3 and and any like

00:38:19,359 --> 00:38:23,599
v2s that are

00:38:20,320 --> 00:38:24,960
required for that okay but yeah um

00:38:23,599 --> 00:38:27,359
i'll know eric were you going to say

00:38:24,960 --> 00:38:29,119
more yeah i i was going to say like i i

00:38:27,359 --> 00:38:31,520
thought it made sense to focus on what

00:38:29,119 --> 00:38:34,800
the v7 cli is doing

00:38:31,520 --> 00:38:36,560
um and

00:38:34,800 --> 00:38:38,079
you know as you just mentioned tim

00:38:36,560 --> 00:38:40,560
there's a few places where that's still

00:38:38,079 --> 00:38:43,680
relying on v2 endpoints

00:38:40,560 --> 00:38:44,240
um i'm guessing that's probably not the

00:38:43,680 --> 00:38:46,960
case

00:38:44,240 --> 00:38:48,800
for some of those like app centric

00:38:46,960 --> 00:38:51,280
workflows

00:38:48,800 --> 00:38:52,400
um i kind of expect that to be all

00:38:51,280 --> 00:38:54,560
converted over to

00:38:52,400 --> 00:38:56,000
the v3 endpoints at this point yeah

00:38:54,560 --> 00:38:58,480
maybe some of the services stuff is

00:38:56,000 --> 00:39:00,800
still v2

00:38:58,480 --> 00:39:01,599
yeah that definitely resonates with me i

00:39:00,800 --> 00:39:04,960
think

00:39:01,599 --> 00:39:08,160
it's mostly v3 at this point and

00:39:04,960 --> 00:39:08,800
like the one of the nice things about a

00:39:08,160 --> 00:39:11,920
new

00:39:08,800 --> 00:39:14,960
a new like component though is um

00:39:11,920 --> 00:39:16,160
whether it's v2 or v3 at a certain part

00:39:14,960 --> 00:39:19,280
that's just like what we

00:39:16,160 --> 00:39:22,320
we present um

00:39:19,280 --> 00:39:24,560
and like we we could do like a

00:39:22,320 --> 00:39:25,440
a couple like v2 ones if we if we really

00:39:24,560 --> 00:39:28,320
needed to

00:39:25,440 --> 00:39:29,680
without actually like taking on the

00:39:28,320 --> 00:39:31,200
complexity of

00:39:29,680 --> 00:39:32,800
working with the v2 code base or

00:39:31,200 --> 00:39:35,839
anything because it is new

00:39:32,800 --> 00:39:38,160
so that's that's convenient but like

00:39:35,839 --> 00:39:43,839
i i think we can get pretty pretty far

00:39:38,160 --> 00:39:43,839
without doing any v2 at all

00:39:47,520 --> 00:39:51,119
which which actually brings me to to the

00:39:49,680 --> 00:39:53,440
question of

00:39:51,119 --> 00:39:55,520
obviously there's no such thing as like

00:39:53,440 --> 00:39:56,800
a service or a service binding or

00:39:55,520 --> 00:39:59,839
anything like that

00:39:56,800 --> 00:40:02,400
um at least not that i

00:39:59,839 --> 00:40:04,160
i would have seen it so the goal i guess

00:40:02,400 --> 00:40:06,720
for the initial investigation is

00:40:04,160 --> 00:40:08,000
to quote-unquote just push an app that

00:40:06,720 --> 00:40:11,839
that doesn't have any service

00:40:08,000 --> 00:40:11,839
dependencies right

00:40:12,800 --> 00:40:16,800
or kind of inject those service

00:40:14,720 --> 00:40:19,359
dependencies in in a different

00:40:16,800 --> 00:40:19,359
different way

00:40:19,839 --> 00:40:23,599
yeah like this this doesn't touch on

00:40:21,839 --> 00:40:27,440
that we we have thought of

00:40:23,599 --> 00:40:28,880
about it a little bit um but it's

00:40:27,440 --> 00:40:30,400
i don't know we don't have any good like

00:40:28,880 --> 00:40:30,800
diagrams or anything of what that might

00:40:30,400 --> 00:40:34,160
look

00:40:30,800 --> 00:40:35,680
like uh at the most basic level you

00:40:34,160 --> 00:40:37,839
could imagine that services

00:40:35,680 --> 00:40:40,160
um just get converted into a vcap

00:40:37,839 --> 00:40:40,800
services environment variable block on

00:40:40,160 --> 00:40:43,839
the app

00:40:40,800 --> 00:40:46,319
for um for feature parity but i think

00:40:43,839 --> 00:40:48,720
ideally we'd like to

00:40:46,319 --> 00:40:50,240
like have have an abstraction there like

00:40:48,720 --> 00:40:52,319
either this like kubernetes

00:40:50,240 --> 00:40:53,599
service bindings or cloud native service

00:40:52,319 --> 00:40:56,880
bindings whatever

00:40:53,599 --> 00:40:58,640
that thing is called but but you could

00:40:56,880 --> 00:41:00,400
imagine like an initial

00:40:58,640 --> 00:41:03,119
implementation using the environment

00:41:00,400 --> 00:41:03,119
variables still

00:41:04,960 --> 00:41:09,760
yeah tim i i think that's that's a

00:41:06,400 --> 00:41:13,760
really good point about um

00:41:09,760 --> 00:41:15,920
uh wanting to get to that

00:41:13,760 --> 00:41:17,280
uh level of abstraction that that's

00:41:15,920 --> 00:41:19,920
maybe commensurate with

00:41:17,280 --> 00:41:22,079
what we have in i guess probably the v3

00:41:19,920 --> 00:41:24,240
cc api where those are represented as

00:41:22,079 --> 00:41:25,839
as distinct entities and then you know

00:41:24,240 --> 00:41:27,040
we could keep rejecting them as vcap

00:41:25,839 --> 00:41:30,240
services

00:41:27,040 --> 00:41:32,000
um but i i think also you know as that

00:41:30,240 --> 00:41:33,680
gate's service binding spec has been

00:41:32,000 --> 00:41:35,119
emerging

00:41:33,680 --> 00:41:37,920
that's probably the direction that we

00:41:35,119 --> 00:41:40,800
want to steer everyone towards

00:41:37,920 --> 00:41:40,800
in terms of the

00:41:42,319 --> 00:41:47,359
actual runtime environment of the

00:41:44,800 --> 00:41:51,760
containers and the presentation of those

00:41:47,359 --> 00:41:51,760
service finding pieces of data

00:41:55,440 --> 00:41:59,839
yeah i think we've been focusing like as

00:41:58,640 --> 00:42:01,680
highlighted by like what we've been

00:41:59,839 --> 00:42:02,960
talking about so far in these diagrams

00:42:01,680 --> 00:42:05,280
so much unlike

00:42:02,960 --> 00:42:06,720
the cf push and just like main

00:42:05,280 --> 00:42:10,000
application workflow but

00:42:06,720 --> 00:42:10,720
i think like it's definitely like it's

00:42:10,000 --> 00:42:13,119
definitely

00:42:10,720 --> 00:42:14,240
important to also be thinking about

00:42:13,119 --> 00:42:17,920
services

00:42:14,240 --> 00:42:20,400
since most apps rely on that um

00:42:17,920 --> 00:42:21,359
and so like i think maybe that you know

00:42:20,400 --> 00:42:24,400
that's something

00:42:21,359 --> 00:42:25,440
that can be explored like in parallel to

00:42:24,400 --> 00:42:27,200
like

00:42:25,440 --> 00:42:29,280
you know trying to like really like

00:42:27,200 --> 00:42:31,119
nailing down and like

00:42:29,280 --> 00:42:32,960
you're starting to think about like what

00:42:31,119 --> 00:42:36,880
api endpoints to support

00:42:32,960 --> 00:42:36,880
for the application like workflow

00:42:38,000 --> 00:42:41,760
yeah i wonder if a good starting point

00:42:39,920 --> 00:42:44,480
for that could even be like

00:42:41,760 --> 00:42:46,160
you know um what would even like a

00:42:44,480 --> 00:42:47,440
user-provided service instance and a

00:42:46,160 --> 00:42:48,640
binding to that

00:42:47,440 --> 00:42:51,040
look like then we could probably get

00:42:48,640 --> 00:42:53,040
away without a lot of the complicated

00:42:51,040 --> 00:42:54,640
um machinery that's currently in

00:42:53,040 --> 00:42:57,119
controller that

00:42:54,640 --> 00:42:58,000
interacts with all of the actual service

00:42:57,119 --> 00:43:00,720
instance lifecycle

00:42:58,000 --> 00:43:03,440
management and and get to focus a little

00:43:00,720 --> 00:43:05,200
more nearly on the binding part which is

00:43:03,440 --> 00:43:07,680
going to be probably you know one of the

00:43:05,200 --> 00:43:10,240
most relevant pieces for that developer

00:43:07,680 --> 00:43:10,240
workflow

00:43:11,760 --> 00:43:15,680
and then it would it would you know it

00:43:14,160 --> 00:43:16,720
certainly initially would like give

00:43:15,680 --> 00:43:19,599
people on

00:43:16,720 --> 00:43:21,680
at least an avenue to be binding those

00:43:19,599 --> 00:43:25,359
services in a more structured way

00:43:21,680 --> 00:43:28,560
even if uh the

00:43:25,359 --> 00:43:30,560
cf api tickets shim isn't handling

00:43:28,560 --> 00:43:32,800
the all the rest of the service life

00:43:30,560 --> 00:43:32,800
cycle

00:43:36,400 --> 00:43:41,359
yeah and those services are part of an

00:43:38,880 --> 00:43:43,920
app manifest we have a

00:43:41,359 --> 00:43:45,680
google doc somewhere that has like a

00:43:43,920 --> 00:43:48,319
straw dog implementation of that

00:43:45,680 --> 00:43:50,560
which i i believe they we just had it

00:43:48,319 --> 00:43:52,000
like create um some kubernetes secrets

00:43:50,560 --> 00:43:54,319
that would store the user provided

00:43:52,000 --> 00:43:57,359
service and then

00:43:54,319 --> 00:43:59,680
um they'd have a label or

00:43:57,359 --> 00:44:00,400
some something binding them to to the

00:43:59,680 --> 00:44:02,480
app

00:44:00,400 --> 00:44:04,640
and it like at least conceptually made

00:44:02,480 --> 00:44:08,079
sense but

00:44:04,640 --> 00:44:09,359
um yeah it'll probably work yeah

00:44:08,079 --> 00:44:12,079
it'd be definitely good to have that

00:44:09,359 --> 00:44:12,079
actually drawn out

00:44:19,920 --> 00:44:23,280
well cool this is this has been really

00:44:21,680 --> 00:44:26,800
great um really

00:44:23,280 --> 00:44:28,720
appreciate getting this picture of

00:44:26,800 --> 00:44:29,920
uh what y'all have been thinking about

00:44:28,720 --> 00:44:33,200
for the last little bit

00:44:29,920 --> 00:44:35,760
cool i'm gonna stop sharing now oh i

00:44:33,200 --> 00:44:36,400
was wondering um have had you thought at

00:44:35,760 --> 00:44:39,680
all about like

00:44:36,400 --> 00:44:43,280
um user authentication and tenancy

00:44:39,680 --> 00:44:46,640
um through these different layers yet

00:44:43,280 --> 00:44:49,119
all right i'm gonna share again um

00:44:46,640 --> 00:44:50,240
there's some there's some boxes over

00:44:49,119 --> 00:44:52,240
here

00:44:50,240 --> 00:44:54,000
this part is is definitely a little

00:44:52,240 --> 00:44:56,160
fuzzier

00:44:54,000 --> 00:44:56,160
but

00:44:57,119 --> 00:45:00,720
we're thinking about how we can project

00:44:59,680 --> 00:45:04,560
like the oregon

00:45:00,720 --> 00:45:07,040
and space permissions hierarchy onto

00:45:04,560 --> 00:45:07,839
kubernetes name spaces and and our back

00:45:07,040 --> 00:45:10,640
and

00:45:07,839 --> 00:45:12,400
and potentially other policy mechanisms

00:45:10,640 --> 00:45:15,599
um

00:45:12,400 --> 00:45:18,640
like again a direct like

00:45:15,599 --> 00:45:20,240
api mapping would have like an org and

00:45:18,640 --> 00:45:22,079
potentially a space cr

00:45:20,240 --> 00:45:23,839
and like you could you could build out

00:45:22,079 --> 00:45:27,280
controllers that would look for these

00:45:23,839 --> 00:45:29,280
and and those would

00:45:27,280 --> 00:45:30,480
reconcile them and make the necessary

00:45:29,280 --> 00:45:33,119
name spaces and

00:45:30,480 --> 00:45:34,079
and are back as you assigned user roles

00:45:33,119 --> 00:45:37,520
and stuff

00:45:34,079 --> 00:45:37,839
um but like you could also perhaps just

00:45:37,520 --> 00:45:40,079
like

00:45:37,839 --> 00:45:40,880
leverage namespaces directly and get

00:45:40,079 --> 00:45:43,200
fancy with

00:45:40,880 --> 00:45:44,960
with labels or or use higher

00:45:43,200 --> 00:45:48,720
hierarchical namespaces once

00:45:44,960 --> 00:45:52,400
once that's ready to do to do so um

00:45:48,720 --> 00:45:54,640
we haven't um

00:45:52,400 --> 00:45:56,079
i don't know it would be nice to like

00:45:54,640 --> 00:45:58,400
spike out some of this probably

00:45:56,079 --> 00:45:59,280
and like flesh out this diagram some

00:45:58,400 --> 00:46:01,599
more but this

00:45:59,280 --> 00:46:03,920
this is how we're thinking about that

00:46:01,599 --> 00:46:03,920
problem

00:46:13,040 --> 00:46:16,720
um and and like this the existing our

00:46:15,920 --> 00:46:20,400
back will

00:46:16,720 --> 00:46:22,720
work well for things that um operate

00:46:20,400 --> 00:46:24,160
like like roles that are like okay you

00:46:22,720 --> 00:46:26,800
have full access to like

00:46:24,160 --> 00:46:28,640
this app because it is within a space

00:46:26,800 --> 00:46:30,880
you're a space developer on

00:46:28,640 --> 00:46:32,640
and so if you are like in a name space

00:46:30,880 --> 00:46:33,200
that corresponds with that space and you

00:46:32,640 --> 00:46:35,119
have

00:46:33,200 --> 00:46:36,800
our back that says you can like create

00:46:35,119 --> 00:46:39,520
and update that app like

00:46:36,800 --> 00:46:40,800
that will work fine um it it gets a

00:46:39,520 --> 00:46:44,079
little trickier if there

00:46:40,800 --> 00:46:46,960
are like

00:46:44,079 --> 00:46:48,079
permissions that affect a sub like field

00:46:46,960 --> 00:46:50,319
on a resource

00:46:48,079 --> 00:46:51,920
um one of those that i can think of is

00:46:50,319 --> 00:46:55,119
like app environment variables

00:46:51,920 --> 00:46:56,960
like uh certain roles

00:46:55,119 --> 00:46:59,040
can view everything about an app except

00:46:56,960 --> 00:47:02,480
as environment variables for example

00:46:59,040 --> 00:47:05,280
um so like that either

00:47:02,480 --> 00:47:05,839
could it could still work in this if you

00:47:05,280 --> 00:47:07,599
just like

00:47:05,839 --> 00:47:09,280
modeled that as a separate resource

00:47:07,599 --> 00:47:11,200
maybe or as like

00:47:09,280 --> 00:47:12,480
secrets and you don't have permission to

00:47:11,200 --> 00:47:15,040
view those secrets or

00:47:12,480 --> 00:47:16,800
like um we could use like open policy

00:47:15,040 --> 00:47:20,640
agent or something and

00:47:16,800 --> 00:47:22,839
and get fancier and say i i don't know

00:47:20,640 --> 00:47:24,000
i i think there's there's a lot of

00:47:22,839 --> 00:47:27,440
options

00:47:24,000 --> 00:47:29,440
there but but we

00:47:27,440 --> 00:47:31,680
we at least we at least believe that if

00:47:29,440 --> 00:47:34,319
we can model

00:47:31,680 --> 00:47:35,520
uh get a name space corresponding to a

00:47:34,319 --> 00:47:39,839
cf space then we

00:47:35,520 --> 00:47:39,839
we can do a lot of what we need to do

00:47:42,559 --> 00:47:45,599
cool that's great

00:47:48,240 --> 00:47:51,440
yeah is there such a thing as a mutating

00:47:49,760 --> 00:47:53,200
presentation controller instead of an

00:47:51,440 --> 00:47:56,559
admission controller

00:47:53,200 --> 00:47:56,559
these fields are redacted

00:48:01,040 --> 00:48:04,240
yeah great work

00:48:04,480 --> 00:48:08,400
yeah like to be honest um separating it

00:48:07,680 --> 00:48:10,000
out like

00:48:08,400 --> 00:48:12,319
having your environment variables be a

00:48:10,000 --> 00:48:14,880
secret that's referenced by

00:48:12,319 --> 00:48:16,480
the app is has a lot of benefits too

00:48:14,880 --> 00:48:18,160
just because like

00:48:16,480 --> 00:48:19,680
assuming you set up your secrets right

00:48:18,160 --> 00:48:20,079
such that they're encrypted at rest and

00:48:19,680 --> 00:48:22,160
stuff

00:48:20,079 --> 00:48:23,920
it's probably better you have that in a

00:48:22,160 --> 00:48:24,319
secret and not just floating as part of

00:48:23,920 --> 00:48:28,559
the

00:48:24,319 --> 00:48:30,720
app cr so i i think there's like stuff

00:48:28,559 --> 00:48:32,480
like just by virtue of doing things

00:48:30,720 --> 00:48:34,160
correctly you can then just have your

00:48:32,480 --> 00:48:34,800
rbox say like no you can't view secrets

00:48:34,160 --> 00:48:37,920
here and

00:48:34,800 --> 00:48:37,920
and you're you're good

00:48:40,720 --> 00:48:44,800
yeah i guess that's that maybe even

00:48:42,640 --> 00:48:46,800
gives kind of a

00:48:44,800 --> 00:48:48,160
finer like at least maybe the

00:48:46,800 --> 00:48:50,319
opportunity for a

00:48:48,160 --> 00:48:52,400
finer distinction of granularity about

00:48:50,319 --> 00:48:54,240
like the confidentiality of any of that

00:48:52,400 --> 00:48:55,760
because maybe some of those environment

00:48:54,240 --> 00:48:57,920
variables are genuinely just

00:48:55,760 --> 00:48:59,119
non-sensitive configuration you're like

00:48:57,920 --> 00:49:00,800
you know

00:48:59,119 --> 00:49:02,720
it's actually fine for anyone to see

00:49:00,800 --> 00:49:04,880
this because it doesn't matter it's just

00:49:02,720 --> 00:49:07,040
you know telling how many widgets per

00:49:04,880 --> 00:49:09,440
hour to make or something

00:49:07,040 --> 00:49:10,720
and um but some of those you know i

00:49:09,440 --> 00:49:13,760
think we have seen

00:49:10,720 --> 00:49:15,760
um end up being um

00:49:13,760 --> 00:49:17,280
more confidential configuration whether

00:49:15,760 --> 00:49:20,079
that's you know some sort of

00:49:17,280 --> 00:49:21,520
authentication parameter to a service or

00:49:20,079 --> 00:49:22,640
something like that that still needs to

00:49:21,520 --> 00:49:24,240
be

00:49:22,640 --> 00:49:25,839
encoded as an environment variable

00:49:24,240 --> 00:49:29,359
because it doesn't fit into

00:49:25,839 --> 00:49:31,839
the surface binding model cleanly and so

00:49:29,359 --> 00:49:31,839
yeah that's

00:49:32,480 --> 00:49:37,040
i could see that being an interesting

00:49:35,040 --> 00:49:38,160
kind of representation of that

00:49:37,040 --> 00:49:39,680
that distinction that we've made with

00:49:38,160 --> 00:49:40,960
the cf rules where it's kind of still

00:49:39,680 --> 00:49:42,319
kind of brutal or it's like well you

00:49:40,960 --> 00:49:44,880
don't see any of the environment

00:49:42,319 --> 00:49:47,119
um if you're in this more limited scope

00:49:44,880 --> 00:49:47,119
right

00:49:48,079 --> 00:49:52,079
i mean obviously that could still be

00:49:49,520 --> 00:49:53,839
abused if you have any latitude to put

00:49:52,079 --> 00:49:54,480
just inline environment variables on the

00:49:53,839 --> 00:49:56,640
resource

00:49:54,480 --> 00:49:58,400
people can still put something bad there

00:49:56,640 --> 00:50:01,359
but you could also

00:49:58,400 --> 00:50:02,079
still decide to publish their secret on

00:50:01,359 --> 00:50:04,800
github

00:50:02,079 --> 00:50:13,839
in public and it would be not

00:50:04,800 --> 00:50:13,839
recommended either

00:50:17,200 --> 00:50:22,079
yeah again great stuff i think that's

00:50:20,160 --> 00:50:27,280
that's very valuable too to also share

00:50:22,079 --> 00:50:28,880
it here in this room

00:50:27,280 --> 00:50:30,160
cool yeah uh thanks thanks again for

00:50:28,880 --> 00:50:32,000
sharing and for putting all that

00:50:30,160 --> 00:50:35,839
together to

00:50:32,000 --> 00:50:37,680
give uh give us all an overview

00:50:35,839 --> 00:50:38,880
uh i know we've got a few minutes left

00:50:37,680 --> 00:50:41,359
on this call um

00:50:38,880 --> 00:50:43,520
is there anything else folks wanted to

00:50:41,359 --> 00:50:47,520
bring up in the

00:50:43,520 --> 00:50:47,520
cf 4ks on kate's universe

00:50:47,599 --> 00:50:52,240
i mean maybe like i haven't been able to

00:50:50,400 --> 00:50:53,359
make the last couple of sessions so i

00:50:52,240 --> 00:50:56,240
don't know how we usually

00:50:53,359 --> 00:50:57,920
wrap up these meetings but you know

00:50:56,240 --> 00:51:00,240
maybe

00:50:57,920 --> 00:51:01,920
given like i wouldn't want this to be

00:51:00,240 --> 00:51:04,480
the only like opportunity

00:51:01,920 --> 00:51:05,440
for folks like sort of like be able to

00:51:04,480 --> 00:51:07,839
give feedback or

00:51:05,440 --> 00:51:09,520
share like you know talk about like like

00:51:07,839 --> 00:51:10,160
the technical architecture because

00:51:09,520 --> 00:51:12,960
that's

00:51:10,160 --> 00:51:15,040
highly critical and so i think maybe

00:51:12,960 --> 00:51:17,359
like a question is like what

00:51:15,040 --> 00:51:18,240
what do we think are the next steps to

00:51:17,359 --> 00:51:21,520
be

00:51:18,240 --> 00:51:23,520
you know making sure that we're

00:51:21,520 --> 00:51:25,040
publicizing this getting feedback from

00:51:23,520 --> 00:51:28,800
folks like

00:51:25,040 --> 00:51:31,200
really you know ensuring that we have

00:51:28,800 --> 00:51:33,119
alignment because i think it's been

00:51:31,200 --> 00:51:35,520
really great to get alignment on the

00:51:33,119 --> 00:51:37,040
vision dock but i know sometimes when

00:51:35,520 --> 00:51:38,480
you start to get into the weeds of

00:51:37,040 --> 00:51:40,720
implementation

00:51:38,480 --> 00:51:42,000
um that's when you discover maybe some

00:51:40,720 --> 00:51:45,520
like differences

00:51:42,000 --> 00:51:48,240
in like expectations and so

00:51:45,520 --> 00:51:50,640
maybe like we can talk about like you

00:51:48,240 --> 00:51:53,440
know what we think the next steps are

00:51:50,640 --> 00:51:54,480
so that we get feedback but we also keep

00:51:53,440 --> 00:51:58,319
making progress

00:51:54,480 --> 00:51:58,319
towards the shared vision

00:52:00,400 --> 00:52:04,960
yeah i mean maybe some things that would

00:52:03,200 --> 00:52:06,800
be useful would be

00:52:04,960 --> 00:52:08,000
yeah i know we we were talking pretty

00:52:06,800 --> 00:52:09,200
informally and just going over the

00:52:08,000 --> 00:52:12,640
mirror board

00:52:09,200 --> 00:52:14,640
um i don't know if it'd be reasonable to

00:52:12,640 --> 00:52:16,839
start publishing some things on cf dev

00:52:14,640 --> 00:52:18,640
just for uh wider broadcast and

00:52:16,839 --> 00:52:20,960
commentary

00:52:18,640 --> 00:52:21,839
um maybe that's that's something that we

00:52:20,960 --> 00:52:25,760
could

00:52:21,839 --> 00:52:28,079
discuss over the next week or so um

00:52:25,760 --> 00:52:30,319
because i yeah i think that that is then

00:52:28,079 --> 00:52:32,640
getting to that next level of

00:52:30,319 --> 00:52:33,839
um having some shared artifacts that

00:52:32,640 --> 00:52:37,119
would encourage that

00:52:33,839 --> 00:52:37,119
discussion and then alignment

00:52:39,520 --> 00:52:45,359
maybe as a kind of more

00:52:42,800 --> 00:52:46,160
mid-term topic i'm also kind of putting

00:52:45,359 --> 00:52:48,400
putting

00:52:46,160 --> 00:52:49,280
quite some some hopes in the to be

00:52:48,400 --> 00:52:51,359
established

00:52:49,280 --> 00:52:54,000
technical oversight committee so i think

00:52:51,359 --> 00:52:55,599
like when we

00:52:54,000 --> 00:52:57,599
published the vision document i came

00:52:55,599 --> 00:52:59,520
across people who

00:52:57,599 --> 00:53:01,920
like them basically said where's that

00:52:59,520 --> 00:53:02,800
document i didn't even see it and so

00:53:01,920 --> 00:53:05,920
maybe

00:53:02,800 --> 00:53:06,960
like a more formal process as something

00:53:05,920 --> 00:53:09,760
where

00:53:06,960 --> 00:53:10,319
like things are more visible so so for

00:53:09,760 --> 00:53:12,720
example

00:53:10,319 --> 00:53:14,800
people here were suggesting to say can

00:53:12,720 --> 00:53:17,200
we have something like a github repo

00:53:14,800 --> 00:53:20,000
where we would at least kind of

00:53:17,200 --> 00:53:21,200
open a github issue that then points to

00:53:20,000 --> 00:53:24,079
these documents

00:53:21,200 --> 00:53:27,040
as kind of formal pointer that allows

00:53:24,079 --> 00:53:29,280
people to subscribe to the repository to

00:53:27,040 --> 00:53:31,280
kind of keep informed about latest

00:53:29,280 --> 00:53:33,280
discussions and stages

00:53:31,280 --> 00:53:34,640
so i'm kind of hoping that like via

00:53:33,280 --> 00:53:38,160
establishing the toc

00:53:34,640 --> 00:53:40,240
um such discussions could be also

00:53:38,160 --> 00:53:41,440
kind of tracked more more formally in

00:53:40,240 --> 00:53:43,920
the future

00:53:41,440 --> 00:53:45,200
but obviously like what what eric said

00:53:43,920 --> 00:53:48,559
for now

00:53:45,200 --> 00:53:53,119
um publishing uh the the artifacts by

00:53:48,559 --> 00:53:53,119
cfdef is obviously the right thing to do

00:53:54,000 --> 00:53:57,680
yeah i think that that definitely makes

00:53:55,599 --> 00:53:58,640
sense in terms of uh uh some process

00:53:57,680 --> 00:54:01,599
that

00:53:58,640 --> 00:54:01,920
the forthcoming toc uh should consider

00:54:01,599 --> 00:54:04,640
and

00:54:01,920 --> 00:54:05,520
i think also if if anyone is uh

00:54:04,640 --> 00:54:08,880
interested

00:54:05,520 --> 00:54:12,000
in certainly everyone here should be um

00:54:08,880 --> 00:54:13,359
eligible to vote uh in the toc election

00:54:12,000 --> 00:54:16,160
but if you're interested in

00:54:13,359 --> 00:54:17,119
serving on the toc then uh certainly if

00:54:16,160 --> 00:54:19,920
you're from vmware

00:54:17,119 --> 00:54:20,800
um talk to me and angela and well you

00:54:19,920 --> 00:54:22,960
know

00:54:20,800 --> 00:54:24,400
i think the voting process that we have

00:54:22,960 --> 00:54:25,839
for the toc

00:54:24,400 --> 00:54:27,599
seats doesn't mean that we need to be

00:54:25,839 --> 00:54:29,520
particularly coordinated in

00:54:27,599 --> 00:54:31,440
nominating those but you know we

00:54:29,520 --> 00:54:35,680
probably don't also want to spam

00:54:31,440 --> 00:54:35,680
everyone with like dozens of names

00:54:36,839 --> 00:54:41,599
either

00:54:38,799 --> 00:54:42,319
yeah um i think that sounds like a good

00:54:41,599 --> 00:54:45,680
plan

00:54:42,319 --> 00:54:47,599
of sharing yeah there there is uh

00:54:45,680 --> 00:54:49,119
i think it's been it hasn't been very

00:54:47,599 --> 00:54:50,559
widely publicized but

00:54:49,119 --> 00:54:55,200
i think it's in the cloud foundry org at

00:54:50,559 --> 00:54:57,280
this point there's a cfar-proposals repo

00:54:55,200 --> 00:54:59,119
that people have used occasionally to

00:54:57,280 --> 00:55:02,720
try and track and coordinate

00:54:59,119 --> 00:55:06,000
some proposals via issues

00:55:02,720 --> 00:55:09,200
that are related to the cfap runtime

00:55:06,000 --> 00:55:11,040
i'll drop a link into the chat so

00:55:09,200 --> 00:55:12,480
um that was at least something i wasn't

00:55:11,040 --> 00:55:14,880
aware of so

00:55:12,480 --> 00:55:14,880
oh yeah

00:55:19,040 --> 00:55:25,839
i will drop a link into that in chat

00:55:23,040 --> 00:55:27,040
for the folks here it has it has not

00:55:25,839 --> 00:55:31,040
been heavily used

00:55:27,040 --> 00:55:32,799
uh although i see piali um

00:55:31,040 --> 00:55:35,839
created an issue on it for some of our

00:55:32,799 --> 00:55:35,839
back changes

00:55:38,480 --> 00:55:44,799
i gave it a star so now it's sweet

00:55:41,280 --> 00:55:44,799
thanks popular it's appreciated

00:55:44,960 --> 00:55:50,160
we're well on our way to dominating

00:55:47,280 --> 00:55:52,880
github mindshare

00:55:50,160 --> 00:55:52,880
it's trending

00:55:56,480 --> 00:56:01,680
all right well um yeah sounds

00:55:59,520 --> 00:56:02,799
good for next steps to be starting to

00:56:01,680 --> 00:56:04,880
put more thoughts

00:56:02,799 --> 00:56:07,440
about architectural options down on

00:56:04,880 --> 00:56:09,839
virtual paper and to be circulating them

00:56:07,440 --> 00:56:12,000
yeah so okay i'll point a couple of

00:56:09,839 --> 00:56:15,119
people here at sap

00:56:12,000 --> 00:56:15,680
to the information as well fantastic all

00:56:15,119 --> 00:56:17,200
right well

00:56:15,680 --> 00:56:20,000
again thanks thanks for putting that all

00:56:17,200 --> 00:56:22,480
together really appreciate it

00:56:20,000 --> 00:56:25,280
thanks everyone thank you everybody talk

00:56:22,480 --> 00:56:25,280
to you next time

00:56:28,839 --> 00:56:31,839
bye

00:56:38,400 --> 00:56:40,480

YouTube URL: https://www.youtube.com/watch?v=crHDpClgVCU


