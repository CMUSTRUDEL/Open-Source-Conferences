Title: Cloud Foundry for Kubernetes Monthly SIG [Dec 17, 2019]
Publication date: 2020-01-10
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:00:02,030 --> 00:00:04,090
you

00:00:40,760 --> 00:00:47,720
give her a couple of seconds to push the

00:00:45,410 --> 00:00:50,570
button so okay it's already on

00:00:47,720 --> 00:00:52,970
so then welcome to this kind of

00:00:50,570 --> 00:00:54,910
extraordinary special interest group

00:00:52,970 --> 00:00:58,220
called so we said we wanted to have one

00:00:54,910 --> 00:00:59,210
right away before everybody signs off

00:00:58,220 --> 00:01:02,300
for vacations

00:00:59,210 --> 00:01:05,089
most people sign off for vacations I

00:01:02,300 --> 00:01:06,890
actually like just went through the

00:01:05,089 --> 00:01:10,610
minutes from last time which I think

00:01:06,890 --> 00:01:12,700
again Eric took the burden to listen to

00:01:10,610 --> 00:01:15,290
the call contribute and type

00:01:12,700 --> 00:01:18,430
simultaneously which like still leaves

00:01:15,290 --> 00:01:21,619
me in awe so thank you very much for

00:01:18,430 --> 00:01:24,380
keeping the the minutes there so I guess

00:01:21,619 --> 00:01:27,850
last time we had a me tree showing a ytt

00:01:24,380 --> 00:01:30,320
game oh then I think afterwards

00:01:27,850 --> 00:01:32,750
bringing in the discussion on how what

00:01:30,320 --> 00:01:35,149
we've seen there relates to see of

00:01:32,750 --> 00:01:38,600
operator / course and then I think we

00:01:35,149 --> 00:01:40,430
started the discussion around like which

00:01:38,600 --> 00:01:42,320
quality is do we want to see from a

00:01:40,430 --> 00:01:45,410
cloud foundry on kubernetes in terms of

00:01:42,320 --> 00:01:47,539
day 2 operations secret rotation update

00:01:45,410 --> 00:01:52,190
et cetera et cetera and then I think

00:01:47,539 --> 00:01:54,319
ultimately we ended by by saying that

00:01:52,190 --> 00:01:56,899
the relevant Imam of Sai is about his

00:01:54,319 --> 00:01:59,569
Winnie inception and we wanted to like

00:01:56,899 --> 00:02:01,310
also have this meeting now to kind of

00:01:59,569 --> 00:02:01,550
better understand what was discussed in

00:02:01,310 --> 00:02:04,220
that

00:02:01,550 --> 00:02:07,310
inception and in parallel I think London

00:02:04,220 --> 00:02:09,979
and I wanted to connect to basically see

00:02:07,310 --> 00:02:14,900
how like PDF for long on the pivotal

00:02:09,979 --> 00:02:17,690
side and the effort on the suicide so I

00:02:14,900 --> 00:02:20,030
think that would be like my two minute

00:02:17,690 --> 00:02:23,510
summary of or probably the the last call

00:02:20,030 --> 00:02:27,290
I think this is where I guess we should

00:02:23,510 --> 00:02:29,900
continue discussions ultimately so maybe

00:02:27,290 --> 00:02:32,510
sir I am lucky you can give a summary on

00:02:29,900 --> 00:02:34,690
like your soon come and take it from

00:02:32,510 --> 00:02:34,690
there

00:02:36,580 --> 00:02:41,770
sure

00:02:38,270 --> 00:02:46,430
so Ladin I and few others met yesterday

00:02:41,770 --> 00:02:48,739
yesterday yeah thank you yeah so I think

00:02:46,430 --> 00:02:52,069
we there was like a first intro sort of

00:02:48,739 --> 00:02:54,470
deep dive into cube CF where is that

00:02:52,069 --> 00:02:57,950
where it is right now

00:02:54,470 --> 00:03:00,530
what's in the pipeline one hour was not

00:02:57,950 --> 00:03:04,130
enough they were we had few discussions

00:03:00,530 --> 00:03:07,580
around how this some of the integration

00:03:04,130 --> 00:03:08,600
pipeline could help our teams and then

00:03:07,580 --> 00:03:14,390
also there were some open questions

00:03:08,600 --> 00:03:16,310
around how can we swap you know Kay

00:03:14,390 --> 00:03:17,840
centric components with the debasht

00:03:16,310 --> 00:03:20,480
components right so that was sort of the

00:03:17,840 --> 00:03:22,100
idea like you start with the base keeps

00:03:20,480 --> 00:03:26,270
you is the base and then you can swap

00:03:22,100 --> 00:03:28,550
out with it with Kasich eight centric

00:03:26,270 --> 00:03:31,460
components as they are ready to

00:03:28,550 --> 00:03:37,130
integrate so we plan to have a meeting

00:03:31,460 --> 00:03:38,540
on the January 6th making to you know to

00:03:37,130 --> 00:03:42,980
sort of deep dive into that specific

00:03:38,540 --> 00:03:45,230
part also I'm trying to see where else

00:03:42,980 --> 00:03:46,850
was all about meeting blood is that did

00:03:45,230 --> 00:03:52,430
I summarize what we talked about

00:03:46,850 --> 00:03:54,080
yesterday yeah history ok and and there

00:03:52,430 --> 00:03:56,480
were some interest in the pipelines it

00:03:54,080 --> 00:03:59,330
seems like that could be something we

00:03:56,480 --> 00:04:04,580
could leverage I mean if there's a suit

00:03:59,330 --> 00:04:07,760
question Erin can keep seer be used by

00:04:04,580 --> 00:04:12,080
the teams locally so so so does a good

00:04:07,760 --> 00:04:14,030
segue we had meetings with contributing

00:04:12,080 --> 00:04:17,780
teams cappy's and the networking team

00:04:14,030 --> 00:04:20,450
and so on and the fundamental need what

00:04:17,780 --> 00:04:23,870
we noticed is a local artifact I can

00:04:20,450 --> 00:04:26,690
that I came that they can rapidly

00:04:23,870 --> 00:04:32,720
iterate on locally they wanted a very

00:04:26,690 --> 00:04:34,250
lightweight system because they they're

00:04:32,720 --> 00:04:38,030
not ready yet for to have a full-on

00:04:34,250 --> 00:04:40,000
cat's running or any of the other tests

00:04:38,030 --> 00:04:42,230
or for that matter the whole integration

00:04:40,000 --> 00:04:44,690
there they're not looking to build a CI

00:04:42,230 --> 00:04:45,860
pipeline at this moment right now they

00:04:44,690 --> 00:04:48,980
just want to be able to reiterate

00:04:45,860 --> 00:04:51,770
rapidly and and work directly with other

00:04:48,980 --> 00:04:53,210
teams instead of using in a whole

00:04:51,770 --> 00:04:54,980
integration pipeline like we do today

00:04:53,210 --> 00:04:58,730
with CFD appointment so that's the one

00:04:54,980 --> 00:05:00,500
one thing that we observed so in other

00:04:58,730 --> 00:05:05,990
words similar to Bosch light but on

00:05:00,500 --> 00:05:08,370
cake's basically and we also heard this

00:05:05,990 --> 00:05:11,040
a few teams have struggle with using

00:05:08,370 --> 00:05:13,500
qcf mostly ran performance issues maybe

00:05:11,040 --> 00:05:16,979
there was a resolve but the number of

00:05:13,500 --> 00:05:19,169
cap instances that creates we want to

00:05:16,979 --> 00:05:21,389
plan to explore that as well in the in

00:05:19,169 --> 00:05:24,350
the coming year especially what are the

00:05:21,389 --> 00:05:26,760
use cases that keeps youth can support

00:05:24,350 --> 00:05:28,500
another approach is that like that's one

00:05:26,760 --> 00:05:30,270
approach the other approach that I think

00:05:28,500 --> 00:05:32,900
I mentioned is that can we create a

00:05:30,270 --> 00:05:37,470
smallest artifact it's very minimal

00:05:32,900 --> 00:05:41,250
config for teams that they can iterate

00:05:37,470 --> 00:05:44,220
on locally so this may not be something

00:05:41,250 --> 00:05:46,080
that a community someone who was running

00:05:44,220 --> 00:05:48,389
safe deployment by doing Bosch deploy

00:05:46,080 --> 00:05:50,370
today may not be available for them but

00:05:48,389 --> 00:05:53,010
it's mostly for the teams those who they

00:05:50,370 --> 00:05:55,889
can iterate on it again very much like

00:05:53,010 --> 00:05:58,440
ash like world so those are the those

00:05:55,889 --> 00:06:01,710
are some ones some of the things that we

00:05:58,440 --> 00:06:04,320
explored in the inception I think I

00:06:01,710 --> 00:06:06,210
think we are working towards like is it

00:06:04,320 --> 00:06:07,949
possible to create a smallest artifact

00:06:06,210 --> 00:06:12,840
and the tooling around that for teams to

00:06:07,949 --> 00:06:14,190
unblock locally to so that they can

00:06:12,840 --> 00:06:18,330
iterate locally so that's where we are

00:06:14,190 --> 00:06:19,770
today and then we want to explore you

00:06:18,330 --> 00:06:21,389
know the second step obviously is going

00:06:19,770 --> 00:06:23,610
to be okay what kind of reference five

00:06:21,389 --> 00:06:25,410
points so we could they can use and what

00:06:23,610 --> 00:06:26,970
are the integration pipelines like we do

00:06:25,410 --> 00:06:31,610
today for CF deployment so think about

00:06:26,970 --> 00:06:33,930
that as phases but for now the focus is

00:06:31,610 --> 00:06:37,669
individual teams how can they rapidly

00:06:33,930 --> 00:06:43,050
iterate on a very minimal configuration

00:06:37,669 --> 00:06:48,620
on a mini cube we are looking for that

00:06:43,050 --> 00:06:51,539
to in the sense that local development

00:06:48,620 --> 00:06:55,530
it's been a focus for us for some time

00:06:51,539 --> 00:07:00,300
trying to make it as painless as

00:06:55,530 --> 00:07:02,190
possible to iterate whether it's just

00:07:00,300 --> 00:07:04,889
starting up from scratch you know a

00:07:02,190 --> 00:07:08,570
cluster or replacing the component that

00:07:04,889 --> 00:07:13,020
you're working on right iterative yeah I

00:07:08,570 --> 00:07:15,599
think I think we have ways to improve

00:07:13,020 --> 00:07:18,380
that I think most of the developers

00:07:15,599 --> 00:07:20,950
working on cube CF right now use kind

00:07:18,380 --> 00:07:23,680
kind locally

00:07:20,950 --> 00:07:27,310
there's a quick way to get a kids up and

00:07:23,680 --> 00:07:33,040
running locally and then you deploy cube

00:07:27,310 --> 00:07:35,410
CF but I think there's also something to

00:07:33,040 --> 00:07:37,900
be said about minimizing the cube CF

00:07:35,410 --> 00:07:39,130
that you're deploying locally for

00:07:37,900 --> 00:07:42,220
example you don't need all the build

00:07:39,130 --> 00:07:45,910
packs right every time that you deploy

00:07:42,220 --> 00:07:47,560
so maybe having some controls on exactly

00:07:45,910 --> 00:07:49,710
what do you want to be part of this

00:07:47,560 --> 00:07:58,860
thing that you're deploying every time

00:07:49,710 --> 00:08:01,510
so that could be nice yeah I mean that

00:07:58,860 --> 00:08:04,510
we are about to release the operator

00:08:01,510 --> 00:08:08,920
this week before we go on vacation and

00:08:04,510 --> 00:08:11,530
that for cube CF there's um there's a

00:08:08,920 --> 00:08:13,030
zero point one point zero release that

00:08:11,530 --> 00:08:16,240
we're focused on it's kind of like a

00:08:13,030 --> 00:08:20,500
first artifact the people can start

00:08:16,240 --> 00:08:26,400
playing around with and right after that

00:08:20,500 --> 00:08:27,660
I think a very good focus would be to

00:08:26,400 --> 00:08:31,560
[Music]

00:08:27,660 --> 00:08:34,030
replace the bars release of ireenie with

00:08:31,560 --> 00:08:37,240
the upstream irony hump chart so

00:08:34,030 --> 00:08:40,270
kubernetes native component I think that

00:08:37,240 --> 00:08:42,010
would be a good display of the features

00:08:40,270 --> 00:08:44,380
that I talked about yesterday

00:08:42,010 --> 00:08:47,080
where you can mix and match Bosch and

00:08:44,380 --> 00:08:48,670
non bar stuff and you know it could be a

00:08:47,080 --> 00:08:54,220
success story like if it's really easy

00:08:48,670 --> 00:08:57,550
and again as an Irene developer I can

00:08:54,220 --> 00:08:59,790
iterate on ireenie using cube CF

00:08:57,550 --> 00:09:06,970
hopefully and it makes my life easier I

00:08:59,790 --> 00:09:08,800
think a good selling point glad it's not

00:09:06,970 --> 00:09:11,410
a technical point but it is sort of a

00:09:08,800 --> 00:09:14,620
procedural point I'm not sure everyone

00:09:11,410 --> 00:09:16,930
knows that Susan's intention is to

00:09:14,620 --> 00:09:18,790
donate this to the Fed keep CF to the

00:09:16,930 --> 00:09:22,680
foundation that we've got a timeline for

00:09:18,790 --> 00:09:25,570
this a fairly eyes and as soon as we can

00:09:22,680 --> 00:09:30,010
so then cube CF would be governed by the

00:09:25,570 --> 00:09:32,320
CLA etc and because I get the impression

00:09:30,010 --> 00:09:34,090
that people still think of it as a Sousa

00:09:32,320 --> 00:09:37,570
only project and

00:09:34,090 --> 00:09:39,850
what what work remains to be done before

00:09:37,570 --> 00:09:43,420
we can put this in the Cloud Foundry

00:09:39,850 --> 00:09:47,230
organization on github I think once the

00:09:43,420 --> 00:09:49,150
zero one zero is out just a grep to see

00:09:47,230 --> 00:09:53,860
if there any Susi references in the

00:09:49,150 --> 00:09:58,330
source code and then we just call Chris

00:09:53,860 --> 00:10:02,740
Clark right and and all of the pipelines

00:09:58,330 --> 00:10:04,180
and all of the issue ticket ticketing

00:10:02,740 --> 00:10:08,320
systems are all public right there's

00:10:04,180 --> 00:10:10,480
nothing resistance right okay if we can

00:10:08,320 --> 00:10:12,130
evangelize that through our teams so

00:10:10,480 --> 00:10:13,810
that we can make sure especially I don't

00:10:12,130 --> 00:10:17,380
know Eric if you can make it known that

00:10:13,810 --> 00:10:18,810
that is that's that is this the state

00:10:17,380 --> 00:10:22,150
currently and that's the intention

00:10:18,810 --> 00:10:24,730
because I think that some of the the

00:10:22,150 --> 00:10:26,290
sort of lack of recognition of cube C F

00:10:24,730 --> 00:10:27,790
and and of that it's there for people

00:10:26,290 --> 00:10:29,740
and that it's gonna be something they

00:10:27,790 --> 00:10:31,720
can consume comes from the fact that

00:10:29,740 --> 00:10:34,480
it's sitting in the Sousa org right now

00:10:31,720 --> 00:10:41,680
so just to let everyone know that that's

00:10:34,480 --> 00:10:43,930
that's gonna be changed - thanks thanks

00:10:41,680 --> 00:10:46,990
for the context right yeah I'll remind

00:10:43,930 --> 00:10:49,380
people who may not be aware that that's

00:10:46,990 --> 00:10:51,850
the current state and that's what sisa

00:10:49,380 --> 00:10:54,340
would like to do with it in the

00:10:51,850 --> 00:10:56,190
foundation and and tip tip had

00:10:54,340 --> 00:10:59,800
recommended to me to send something to

00:10:56,190 --> 00:11:02,970
see if dev about that as well which I

00:10:59,800 --> 00:11:02,970
say yes I was

00:11:11,940 --> 00:11:17,190
so I'm sorry I missed last week it

00:11:13,860 --> 00:11:17,870
sounded like a super interesting to put

00:11:17,190 --> 00:11:21,750
it mildly

00:11:17,870 --> 00:11:25,080
session I had to sort of just chat a

00:11:21,750 --> 00:11:26,490
little bit with Marco from s AP and I

00:11:25,080 --> 00:11:31,140
actually because I wasn't familiar with

00:11:26,490 --> 00:11:35,930
ytt I a little bit with Nima kavion II

00:11:31,140 --> 00:11:35,930
because we talked about that before

00:11:35,960 --> 00:11:44,400
technically glad do you see any barrier

00:11:39,270 --> 00:11:46,770
to sort of using ytt templating in cube

00:11:44,400 --> 00:11:48,510
CF at some point like if we if we did

00:11:46,770 --> 00:11:52,440
get collaboration from the teams that

00:11:48,510 --> 00:11:54,120
wanted to use ytt could cube CF still be

00:11:52,440 --> 00:11:58,160
the landing place for those that

00:11:54,120 --> 00:12:03,000
integration yeah I don't see why not

00:11:58,160 --> 00:12:04,530
no reason and likewise cube native just

00:12:03,000 --> 00:12:09,840
straight-up cube llamo if that's

00:12:04,530 --> 00:12:13,500
preferable yes think the cube CF is not

00:12:09,840 --> 00:12:17,070
really opinionated on stuff right now I

00:12:13,500 --> 00:12:19,680
mean it uses basil as a build system but

00:12:17,070 --> 00:12:23,640
basil can build any anything right

00:12:19,680 --> 00:12:26,280
doesn't have to be a home chart I'm more

00:12:23,640 --> 00:12:30,360
concerned the other way around if y TT

00:12:26,280 --> 00:12:33,510
which is an entangled set of templates

00:12:30,360 --> 00:12:43,350
and logic if it can be split if it can

00:12:33,510 --> 00:12:45,510
be consumed Modula I don't actually

00:12:43,350 --> 00:12:48,060
understand that can you explain that a

00:12:45,510 --> 00:12:50,400
little bit more yeah I mean it depends

00:12:48,060 --> 00:12:51,660
on how many on assumption it makes about

00:12:50,400 --> 00:12:55,650
its environment

00:12:51,660 --> 00:13:00,240
maybe you can't slice it to make it to

00:12:55,650 --> 00:13:02,400
use it in another system are there

00:13:00,240 --> 00:13:04,530
specific concerns you have in mind Mario

00:13:02,400 --> 00:13:06,390
I thought it looked highly integrated

00:13:04,530 --> 00:13:10,560
but we didn't see the whole presentation

00:13:06,390 --> 00:13:12,030
after the first half-hour there was a

00:13:10,560 --> 00:13:14,940
lot of logic in there and I'm not sure

00:13:12,030 --> 00:13:16,740
what the scope is is it going to it's

00:13:14,940 --> 00:13:19,079
kind of going to build images and stuff

00:13:16,740 --> 00:13:21,819
like that

00:13:19,079 --> 00:13:24,910
actually I think my understanding of a

00:13:21,819 --> 00:13:27,519
lot of the k14 stool chain is that it's

00:13:24,910 --> 00:13:30,129
intended to be very modular much more so

00:13:27,519 --> 00:13:34,839
than Bosch so ytt is strictly about

00:13:30,129 --> 00:13:37,059
templating and concrete ytt appliance

00:13:34,839 --> 00:13:41,019
right wheel packaging cloud foundry in

00:13:37,059 --> 00:13:43,300
ytt so it depends on how we package it I

00:13:41,019 --> 00:13:45,639
think what you saw was a combination of

00:13:43,300 --> 00:13:48,579
tools yeah last week not just ytt I

00:13:45,639 --> 00:13:51,129
believe what you saw was that all of the

00:13:48,579 --> 00:13:52,990
k14 tools so he was using ytt

00:13:51,129 --> 00:13:54,339
what if he only does templating and

00:13:52,990 --> 00:13:57,759
that's all it does there's absolutely

00:13:54,339 --> 00:14:02,709
nothing in it it has some you can use to

00:13:57,759 --> 00:14:04,870
sort of create in templating language in

00:14:02,709 --> 00:14:07,089
there so as in like hey you know this

00:14:04,870 --> 00:14:08,800
specific blog if this is true at the

00:14:07,089 --> 00:14:11,110
specific block but that's still working

00:14:08,800 --> 00:14:13,480
in the realm of the template what you

00:14:11,110 --> 00:14:16,300
saw probably was cable which is building

00:14:13,480 --> 00:14:21,339
the docker images and then I believe cap

00:14:16,300 --> 00:14:24,370
which is deploying that docker or that

00:14:21,339 --> 00:14:27,819
resource to Kate's cluster so there are

00:14:24,370 --> 00:14:30,999
three different tools I think he did a

00:14:27,819 --> 00:14:35,139
demo last week so ytt in itself is pure

00:14:30,999 --> 00:14:38,350
templating it has absolutely no well no

00:14:35,139 --> 00:14:40,240
recognition of what K is like but they

00:14:38,350 --> 00:14:43,240
were like functions and the templates

00:14:40,240 --> 00:14:45,879
which you have to execute that was just

00:14:43,240 --> 00:14:48,339
he built he showed he was showing the

00:14:45,879 --> 00:14:50,350
capabilities of ytt you could have a

00:14:48,339 --> 00:14:53,620
very simple ytt with just like helm

00:14:50,350 --> 00:14:56,589
where just a placeholder or variable

00:14:53,620 --> 00:14:59,860
substitution and that's it but he went

00:14:56,589 --> 00:15:02,649
on to talk about functions and loops and

00:14:59,860 --> 00:15:05,980
whatnot yeah I think that's where there

00:15:02,649 --> 00:15:09,309
are concerns about people not using CF

00:15:05,980 --> 00:15:11,889
operator came in like the CF operator is

00:15:09,309 --> 00:15:13,209
designed to do lifecycle management of

00:15:11,889 --> 00:15:14,860
Cloud Foundry

00:15:13,209 --> 00:15:17,829
well it's designed to do more than that

00:15:14,860 --> 00:15:21,459
actually but that is the core purpose of

00:15:17,829 --> 00:15:23,649
it and if this logic is you know not

00:15:21,459 --> 00:15:24,459
being used or if those capabilities

00:15:23,649 --> 00:15:26,110
aren't being used

00:15:24,459 --> 00:15:29,679
maybe the component teams are going to

00:15:26,110 --> 00:15:32,170
be building the logic into their into

00:15:29,679 --> 00:15:36,520
their release tooling

00:15:32,170 --> 00:15:38,250
and we've been down this road of trying

00:15:36,520 --> 00:15:40,750
to do it without an operator and I

00:15:38,250 --> 00:15:42,460
that's another thing that I would like

00:15:40,750 --> 00:15:45,790
to evangelize a little bit about and

00:15:42,460 --> 00:15:48,930
maybe I can Mario or glad I could get

00:15:45,790 --> 00:15:51,750
with you that yeah we talked about this

00:15:48,930 --> 00:15:54,760
the need for an operator currently of

00:15:51,750 --> 00:15:57,760
course if the core of Cloud Foundry

00:15:54,760 --> 00:16:00,010
changes right so if the Caffrey team

00:15:57,760 --> 00:16:04,630
changes the clock controller itself and

00:16:00,010 --> 00:16:06,520
the routing layer and etc then you might

00:16:04,630 --> 00:16:10,900
not need an operator in the future right

00:16:06,520 --> 00:16:15,790
that that those components have to

00:16:10,900 --> 00:16:17,680
change to support a Canary's native

00:16:15,790 --> 00:16:20,470
approach where you don't have an active

00:16:17,680 --> 00:16:23,950
operator to manage all the configuration

00:16:20,470 --> 00:16:27,100
and certificates and so on so and that

00:16:23,950 --> 00:16:30,250
that's awesome for the future I think

00:16:27,100 --> 00:16:33,820
like after we get rid of the last boss

00:16:30,250 --> 00:16:37,030
component in qcf that could be the state

00:16:33,820 --> 00:16:41,980
that were left in I wanted to add

00:16:37,030 --> 00:16:45,760
something about helm we've had some

00:16:41,980 --> 00:16:48,400
experience with helm now we've had a

00:16:45,760 --> 00:16:52,930
product being delivered with helm for

00:16:48,400 --> 00:16:56,170
like a couple of years now and I don't

00:16:52,930 --> 00:16:59,380
think we've seen many problems it also

00:16:56,170 --> 00:17:02,890
acts as a delivery channel right helm

00:16:59,380 --> 00:17:07,540
repositories take software to the

00:17:02,890 --> 00:17:17,790
customer and it's also wildly supported

00:17:07,540 --> 00:17:21,730
by the community I've seen a bit of I

00:17:17,790 --> 00:17:25,060
don't know how to say there's been some

00:17:21,730 --> 00:17:26,680
talk against town but I haven't seen any

00:17:25,060 --> 00:17:30,790
concrete evidence especially with some

00:17:26,680 --> 00:17:34,840
three core it's all client-side or

00:17:30,790 --> 00:17:38,140
there's no tiller involved yeah well I

00:17:34,840 --> 00:17:40,030
think I mean I think we thought that

00:17:38,140 --> 00:17:41,740
there there certainly some weaknesses in

00:17:40,030 --> 00:17:44,710
helm that we've we've acknowledged and

00:17:41,740 --> 00:17:46,180
it did you know it did not do and at

00:17:44,710 --> 00:17:48,190
least initially what what

00:17:46,180 --> 00:17:52,450
everything that we hoped that it would

00:17:48,190 --> 00:17:54,130
have we had to do some some fancy things

00:17:52,450 --> 00:17:56,740
to make it work for our customers the

00:17:54,130 --> 00:17:58,510
upgrade path was was difficult and

00:17:56,740 --> 00:18:01,180
required manual intervention yeah

00:17:58,510 --> 00:18:02,980
absence it is it is actually

00:18:01,180 --> 00:18:04,210
intentionally a simple tool and we

00:18:02,980 --> 00:18:06,010
thought it was going to be a little bit

00:18:04,210 --> 00:18:08,410
more complex because weird that's

00:18:06,010 --> 00:18:09,910
exactly the point yeah it's infinitely

00:18:08,410 --> 00:18:11,560
simple and we were trying to do

00:18:09,910 --> 00:18:15,160
something with it that it was not meant

00:18:11,560 --> 00:18:19,720
to do yes and for what it does it does

00:18:15,160 --> 00:18:22,510
quite well I would say yeah and I think

00:18:19,720 --> 00:18:24,040
but but the point is this is why we

00:18:22,510 --> 00:18:26,950
built an operator just because we've

00:18:24,040 --> 00:18:30,700
fought with helm and have a adding

00:18:26,950 --> 00:18:33,280
things to CF to manage lifecycle certain

00:18:30,700 --> 00:18:35,770
components to generate certs to do these

00:18:33,280 --> 00:18:37,480
things that oh we forgot we have to do

00:18:35,770 --> 00:18:38,470
that with with cloud foundry oh we

00:18:37,480 --> 00:18:41,830
forgot we have to do that with cloud

00:18:38,470 --> 00:18:42,820
foundry the and we got to a point and

00:18:41,830 --> 00:18:45,190
the reason we started these

00:18:42,820 --> 00:18:47,680
conversations with IBM and I say P was

00:18:45,190 --> 00:18:49,330
was like okay we do need an operator we

00:18:47,680 --> 00:18:50,890
do need something to handle manage the

00:18:49,330 --> 00:18:54,220
lifecycle in place because we don't

00:18:50,890 --> 00:18:57,070
because we don't have boss and I just

00:18:54,220 --> 00:19:00,460
want that knowledge to be shared with

00:18:57,070 --> 00:19:02,080
all of the CF component teams that are

00:19:00,460 --> 00:19:04,660
going to start building kubernetes

00:19:02,080 --> 00:19:07,510
native stuff I mean in a truly

00:19:04,660 --> 00:19:10,570
kubernetes native component this stuff

00:19:07,510 --> 00:19:13,600
won't be as necessary but to understand

00:19:10,570 --> 00:19:18,660
what is there in the operator to to help

00:19:13,600 --> 00:19:23,140
them get what they have right now into a

00:19:18,660 --> 00:19:27,010
containerized per head let me add just

00:19:23,140 --> 00:19:29,050
one comment on why held against why we

00:19:27,010 --> 00:19:31,480
should try to avoid just using cube CTL

00:19:29,050 --> 00:19:34,650
apply all the time at least from IBM and

00:19:31,480 --> 00:19:36,940
the experience we have now with cube CF

00:19:34,650 --> 00:19:40,240
it allows you to have higher vision on

00:19:36,940 --> 00:19:42,790
the changes you have been applying since

00:19:40,240 --> 00:19:46,030
you deploy cloud foundry troll cube CF

00:19:42,790 --> 00:19:48,880
if you rely only on cube CTL apply you

00:19:46,030 --> 00:19:50,590
don't have actually a clue on what have

00:19:48,880 --> 00:19:55,480
you been changing your co-founder

00:19:50,590 --> 00:19:58,720
instance exactly I noticed my tree is

00:19:55,480 --> 00:20:02,500
joined so maybe we should back up a bit

00:19:58,720 --> 00:20:05,590
I would I would like to like put on a on

00:20:02,500 --> 00:20:07,360
a string here that came through in and

00:20:05,590 --> 00:20:12,130
one of the things that that Troy said

00:20:07,360 --> 00:20:13,900
like you mentioned that the operator you

00:20:12,130 --> 00:20:17,650
have been building for like the last

00:20:13,900 --> 00:20:21,040
year or so was specifically born with

00:20:17,650 --> 00:20:23,590
the thought in mind that he would be

00:20:21,040 --> 00:20:26,890
consuming motion pieces but you would

00:20:23,590 --> 00:20:28,600
not have bought right and I agree in

00:20:26,890 --> 00:20:31,810
order to achieve that and to deploy

00:20:28,600 --> 00:20:34,900
motion eases alternatives you obviously

00:20:31,810 --> 00:20:38,950
need some component doing office job and

00:20:34,900 --> 00:20:41,740
that's like the operators I think what

00:20:38,950 --> 00:20:44,830
we're seeing like currently is more and

00:20:41,740 --> 00:20:49,990
more active portion like real movement

00:20:44,830 --> 00:20:52,900
within the runtime teams move to like to

00:20:49,990 --> 00:20:56,050
move away from exclusively packaging

00:20:52,900 --> 00:21:01,330
their things as Bosch releases and I

00:20:56,050 --> 00:21:03,910
think like my my feeling now from a bit

00:21:01,330 --> 00:21:08,080
more of like an observing position is

00:21:03,910 --> 00:21:12,430
that this leads to now the conflict of

00:21:08,080 --> 00:21:14,440
like one side of people is still saying

00:21:12,430 --> 00:21:17,590
like hey we need this operator because

00:21:14,440 --> 00:21:19,390
like we started from here and this is

00:21:17,590 --> 00:21:20,860
what we like learning and discovering on

00:21:19,390 --> 00:21:24,090
the way and this is how we do it

00:21:20,860 --> 00:21:28,420
currently whereas like the other side of

00:21:24,090 --> 00:21:31,240
of people like has actually moved away

00:21:28,420 --> 00:21:33,910
from the starting premise of why an

00:21:31,240 --> 00:21:36,070
operator in this specific way you build

00:21:33,910 --> 00:21:39,370
it is and and was necessary

00:21:36,070 --> 00:21:43,390
yeah no and I get that and we are

00:21:39,370 --> 00:21:45,130
looking for an end state where we build

00:21:43,390 --> 00:21:48,100
cloud native come the kubernetes native

00:21:45,130 --> 00:21:50,440
components and we don't need Bosch but

00:21:48,100 --> 00:21:52,840
getting there especially for those of us

00:21:50,440 --> 00:21:54,670
I be m and Sousa that already have a

00:21:52,840 --> 00:21:58,750
containerized distribution I already

00:21:54,670 --> 00:22:00,970
have a kubernetes distro to get there

00:21:58,750 --> 00:22:03,970
while we have a world of Bosch releases

00:22:00,970 --> 00:22:07,800
and then at some point presumably

00:22:03,970 --> 00:22:10,750
pivotal cutting over to to kubernetes

00:22:07,800 --> 00:22:12,509
enabled Cloud Foundry we're going to

00:22:10,750 --> 00:22:15,209
have to maintain those Bosch releases up

00:22:12,509 --> 00:22:17,190
to a certain point and as we introduce

00:22:15,209 --> 00:22:18,839
the new the new release process so these

00:22:17,190 --> 00:22:20,869
are going to overlap for some time until

00:22:18,839 --> 00:22:23,399
that until the kubernetes native

00:22:20,869 --> 00:22:25,559
components are ready and so we have to

00:22:23,399 --> 00:22:27,719
be able to swap them in and out and so

00:22:25,559 --> 00:22:32,249
if then new and and yes I agree so if

00:22:27,719 --> 00:22:34,619
the new cube native components do not

00:22:32,249 --> 00:22:36,779
rely on the operator that actually

00:22:34,619 --> 00:22:39,889
should be fine if we can substitute them

00:22:36,779 --> 00:22:43,529
in to a release mechanism like cube CF

00:22:39,889 --> 00:22:46,739
and they don't take advantage of the the

00:22:43,529 --> 00:22:47,969
operator I or if the operator I don't

00:22:46,739 --> 00:22:52,679
know if LED help me out here

00:22:47,969 --> 00:22:55,440
but I think also the operators not

00:22:52,679 --> 00:22:57,959
entirely about just being able to

00:22:55,440 --> 00:23:03,109
consume Bosch releases there's aspects

00:22:57,959 --> 00:23:08,159
of what it does I mean for the complex

00:23:03,109 --> 00:23:10,159
multi micro service environment where

00:23:08,159 --> 00:23:13,769
especially where some aspect of

00:23:10,159 --> 00:23:16,709
statefulness exists you know the data

00:23:13,769 --> 00:23:21,059
associated with the CCTV and such there

00:23:16,709 --> 00:23:24,479
is the way to do it on kubernetes is the

00:23:21,059 --> 00:23:26,190
operator they came into existence for a

00:23:24,479 --> 00:23:34,859
reason for that kind of particular

00:23:26,190 --> 00:23:40,249
reason so even if you unbundle the boss

00:23:34,859 --> 00:23:45,209
aspects you will you may change or

00:23:40,249 --> 00:23:48,209
minimize the operator surface but I

00:23:45,209 --> 00:23:51,779
don't see the complexity of Cloud

00:23:48,209 --> 00:23:54,059
Foundry getting outside of using an

00:23:51,779 --> 00:23:58,649
operator at all in the current state of

00:23:54,059 --> 00:24:00,659
kubernetes and I'm not so sure about

00:23:58,649 --> 00:24:03,509
this I mean last week we have the

00:24:00,659 --> 00:24:05,549
example of FK native I mean further

00:24:03,509 --> 00:24:08,069
there is a Kennedy for ATAR if you want

00:24:05,549 --> 00:24:11,129
that you can also just use cube CT and

00:24:08,069 --> 00:24:15,509
offline it's ok native it's not that

00:24:11,129 --> 00:24:18,809
hard and like right now you're you're

00:24:15,509 --> 00:24:21,629
right there is control the database but

00:24:18,809 --> 00:24:24,599
do we still need that in a possible

00:24:21,629 --> 00:24:26,100
future so you you're suggesting deeply

00:24:24,599 --> 00:24:31,190
the the idea of three

00:24:26,100 --> 00:24:34,020
everything into the wet etsy D approach

00:24:31,190 --> 00:24:36,450
that's the way that you get rid of then

00:24:34,020 --> 00:24:39,140
the operator need right by relying on

00:24:36,450 --> 00:24:42,540
kubernetes to store the data for you

00:24:39,140 --> 00:24:44,280
sure I think even if you don't you can

00:24:42,540 --> 00:24:48,210
still use an operator to manage your

00:24:44,280 --> 00:24:50,310
phosphorous your Maria to be your AWS

00:24:48,210 --> 00:24:52,890
RDS right there is no need for an

00:24:50,310 --> 00:24:55,770
operator to manage all of the stateless

00:24:52,890 --> 00:24:58,230
stuff including the stateful stuff like

00:24:55,770 --> 00:24:59,700
essentially 90% yes I was agreeing but

00:24:58,230 --> 00:25:03,180
the stateful stuff still needs an

00:24:59,700 --> 00:25:06,120
operator now some were getting rid of

00:25:03,180 --> 00:25:08,010
that operator indeed from anything by

00:25:06,120 --> 00:25:10,950
throwing their statefulness right down

00:25:08,010 --> 00:25:12,390
to the kubernetes level I don't know

00:25:10,950 --> 00:25:15,090
that that would actually I doubt

00:25:12,390 --> 00:25:17,220
actually that would scale in a Cloud

00:25:15,090 --> 00:25:19,920
Foundry sense but it might for some

00:25:17,220 --> 00:25:23,310
small pieces so yes the operator has

00:25:19,920 --> 00:25:26,550
more the there's currently more than

00:25:23,310 --> 00:25:29,910
it's necessary in the operator if you

00:25:26,550 --> 00:25:31,320
were to remove the stateless purely

00:25:29,910 --> 00:25:33,930
stateless pieces they could become

00:25:31,320 --> 00:25:36,120
independent but you'll still have an

00:25:33,930 --> 00:25:38,370
operator so now then you can argue about

00:25:36,120 --> 00:25:40,520
well if you're always going to have it

00:25:38,370 --> 00:25:43,620
what you want to architect it as a

00:25:40,520 --> 00:25:45,120
bigger chunk or separate off the pieces

00:25:43,620 --> 00:25:47,460
but they have to be managed together

00:25:45,120 --> 00:25:49,020
anyway which means you're you're

00:25:47,460 --> 00:25:51,720
removing the management somewhere else

00:25:49,020 --> 00:25:56,520
that's a different piece but the current

00:25:51,720 --> 00:25:59,280
architecture that we have in cloud

00:25:56,520 --> 00:26:02,870
foundry does not allow for operation

00:25:59,280 --> 00:26:05,880
without at least one stateful set and

00:26:02,870 --> 00:26:09,780
thus at least one Operator

00:26:05,880 --> 00:26:11,190
and then we can just argue about how big

00:26:09,780 --> 00:26:13,710
or small you want to make the surface

00:26:11,190 --> 00:26:16,050
around it and that's that's perfectly

00:26:13,710 --> 00:26:18,750
fine I think like if you're arguing

00:26:16,050 --> 00:26:21,780
about having an operator for storing

00:26:18,750 --> 00:26:24,390
state I mean there is a bunch of let's

00:26:21,780 --> 00:26:27,630
say Postgres operators idea but you

00:26:24,390 --> 00:26:29,280
don't need to write that yourself thank

00:26:27,630 --> 00:26:33,660
you if that's what you're arguing for

00:26:29,280 --> 00:26:38,610
that's already here what I'm what I'm

00:26:33,660 --> 00:26:41,280
arguing for is not

00:26:38,610 --> 00:26:43,820
I think I've agreed in the past that

00:26:41,280 --> 00:26:47,370
that's the end state that we won't reach

00:26:43,820 --> 00:26:53,130
my question is still why can't we evolve

00:26:47,370 --> 00:26:57,210
in that direction if we have the

00:26:53,130 --> 00:26:59,760
mechanisms to do so why can't we ask the

00:26:57,210 --> 00:27:02,400
component teams to work and integrate

00:26:59,760 --> 00:27:04,830
their work in qcf while maintaining a

00:27:02,400 --> 00:27:07,610
releasable project just like CF

00:27:04,830 --> 00:27:12,950
deployment that works on kubernetes and

00:27:07,610 --> 00:27:16,799
at the end of this effort you'll have a

00:27:12,950 --> 00:27:20,630
cube CF that doesn't need an operator if

00:27:16,799 --> 00:27:23,760
we won't I

00:27:20,630 --> 00:27:26,490
for me there is still a question mark on

00:27:23,760 --> 00:27:29,640
how do we integrate all those components

00:27:26,490 --> 00:27:33,570
like how do we do secret management and

00:27:29,640 --> 00:27:35,820
certificates this is a very complex side

00:27:33,570 --> 00:27:37,740
of deploying Cloud Foundry is to manage

00:27:35,820 --> 00:27:40,620
all those certificates and connect the

00:27:37,740 --> 00:27:42,870
right dots right it's not just about

00:27:40,620 --> 00:27:46,169
deploying oh right I deploy those

00:27:42,870 --> 00:27:49,350
stateless staff and those stateful stuff

00:27:46,169 --> 00:27:52,200
and then they magically work yeah it's a

00:27:49,350 --> 00:27:56,039
bit of naive thinking that it would be

00:27:52,200 --> 00:27:59,820
it would just happen you could use

00:27:56,039 --> 00:28:02,510
something like Castillo so again I think

00:27:59,820 --> 00:28:08,039
the solution should be evolved not

00:28:02,510 --> 00:28:11,000
redesigned from scratch I think that's

00:28:08,039 --> 00:28:11,000
where the disconnect lines

00:28:11,090 --> 00:28:18,240
yeah and it's it's I think routed rooted

00:28:14,309 --> 00:28:20,370
in the in the situation that that where

00:28:18,240 --> 00:28:25,669
we find ourselves in a situation where

00:28:20,370 --> 00:28:27,750
we've got customers running kubernetes

00:28:25,669 --> 00:28:30,000
cloud foundry on kubernetes and we have

00:28:27,750 --> 00:28:32,730
to get them too we have to keep them

00:28:30,000 --> 00:28:35,120
upgradeable in a path from where they

00:28:32,730 --> 00:28:35,120
are right now

00:28:44,860 --> 00:28:52,010
and also I think it would be of great

00:28:49,390 --> 00:28:56,540
benefit to have Cloud Foundry

00:28:52,010 --> 00:29:04,520
installable on kubernetes in this period

00:28:56,540 --> 00:29:07,040
of time right it would it would maybe

00:29:04,520 --> 00:29:09,170
diminish a little people moving away

00:29:07,040 --> 00:29:19,760
from cloth on is it

00:29:09,170 --> 00:29:21,470
there's no CF on queue well I mean I

00:29:19,760 --> 00:29:25,490
think you know the the point we're just

00:29:21,470 --> 00:29:28,160
trying to make is if we can work in

00:29:25,490 --> 00:29:30,590
concert together to move things faster

00:29:28,160 --> 00:29:32,420
and yeah there might be an iterative

00:29:30,590 --> 00:29:37,490
approach and certainly we can argue

00:29:32,420 --> 00:29:41,900
about the scope of the operator or even

00:29:37,490 --> 00:29:44,660
the need of it but if we I like to

00:29:41,900 --> 00:29:46,160
evolve idea what we're looking at with

00:29:44,660 --> 00:29:48,710
what everyone's working on around the

00:29:46,160 --> 00:29:51,170
operators already I'm sort of a major v2

00:29:48,710 --> 00:29:53,660
architecture using some of the newer

00:29:51,170 --> 00:29:55,790
kubernetes stuff we got to keep watching

00:29:53,660 --> 00:30:00,280
you know as kubernetes itself evolves

00:29:55,790 --> 00:30:04,190
and can take advantage of pieces that

00:30:00,280 --> 00:30:08,510
that can happen but I'm I'm more worried

00:30:04,190 --> 00:30:09,980
that oh there's like you know we first

00:30:08,510 --> 00:30:11,270
principles that's always nice to be able

00:30:09,980 --> 00:30:15,980
to look at things and from the first

00:30:11,270 --> 00:30:19,850
principles but that it's maybe not being

00:30:15,980 --> 00:30:22,610
done with realizing okay well there's an

00:30:19,850 --> 00:30:25,070
operator here or there's the this is

00:30:22,610 --> 00:30:27,890
that's like a year-long rewrite rather

00:30:25,070 --> 00:30:31,450
than I heard an assumption of okay we

00:30:27,890 --> 00:30:33,680
can get this done in a few months and

00:30:31,450 --> 00:30:39,160
when we're I really think you're looking

00:30:33,680 --> 00:30:41,900
at a much larger and much more imposed

00:30:39,160 --> 00:30:47,450
revamp of the entire pipeline of what

00:30:41,900 --> 00:30:50,810
has to come out meanwhile we as we did

00:30:47,450 --> 00:30:54,230
here on just before on the the AMA there

00:30:50,810 --> 00:30:57,320
are still like from s AP and other

00:30:54,230 --> 00:30:58,730
these concerns where it's like ah you

00:30:57,320 --> 00:31:00,740
know Cloud Foundry who needs that we

00:30:58,730 --> 00:31:02,799
already have kubernetes right the the

00:31:00,740 --> 00:31:06,379
common misconception of of an either/or

00:31:02,799 --> 00:31:08,840
opinion is still the unfortunate

00:31:06,379 --> 00:31:10,700
prevailing one and that's that's the

00:31:08,840 --> 00:31:13,789
thing that I most want to knock down is

00:31:10,700 --> 00:31:17,539
have this in front of people has the de

00:31:13,789 --> 00:31:23,299
facto way to do applications on top of

00:31:17,539 --> 00:31:26,419
Cloud Foundry which is maybe a good

00:31:23,299 --> 00:31:28,549
point in time to to ask sy to probably

00:31:26,419 --> 00:31:30,590
give kind of a brief summary of the

00:31:28,549 --> 00:31:34,340
inception meeting that happened last

00:31:30,590 --> 00:31:36,619
week Thursday right right like just to

00:31:34,340 --> 00:31:41,749
see what what the Relan team and people

00:31:36,619 --> 00:31:46,490
- this is actually - yeah so I think I

00:31:41,749 --> 00:31:48,409
mentioned that the right now the teams

00:31:46,490 --> 00:31:52,340
that where they are in their journey our

00:31:48,409 --> 00:31:54,019
goal is to iterate rapidly local

00:31:52,340 --> 00:31:59,110
environment so that's why we are focused

00:31:54,019 --> 00:32:01,039
on we asked around

00:31:59,110 --> 00:32:02,629
what sort of integration of we're

00:32:01,039 --> 00:32:04,460
looking at for all of the components

00:32:02,629 --> 00:32:06,200
together they are not there yet so

00:32:04,460 --> 00:32:07,610
they're so working towards individual

00:32:06,200 --> 00:32:11,090
components trying to get things working

00:32:07,610 --> 00:32:13,580
maybe one or two dependencies so what

00:32:11,090 --> 00:32:16,100
we're looking to do is can we come up

00:32:13,580 --> 00:32:19,669
with a very minimal the smallest

00:32:16,100 --> 00:32:21,499
artifact that can unblock them and that

00:32:19,669 --> 00:32:23,570
doesn't mean that that's the final state

00:32:21,499 --> 00:32:26,899
that's just to get them unblocked get

00:32:23,570 --> 00:32:29,509
working on it without any CI pipelines

00:32:26,899 --> 00:32:31,519
and then once they are ready where they

00:32:29,509 --> 00:32:34,610
can start integrating other components

00:32:31,519 --> 00:32:36,679
so for example Cappy only needs UA and

00:32:34,610 --> 00:32:39,499
that's all they're focused on right and

00:32:36,679 --> 00:32:41,480
now looking at our can get networking

00:32:39,499 --> 00:32:43,210
may need Cappy so when we start seeing

00:32:41,480 --> 00:32:46,549
where there are a lot of dependencies

00:32:43,210 --> 00:32:48,320
increase then we can start thinking

00:32:46,549 --> 00:32:51,350
about what kind of pipelines do we need

00:32:48,320 --> 00:32:52,999
what sort of artifact doing the rewrite

00:32:51,350 --> 00:32:54,230
their artifact do we use cube see if

00:32:52,999 --> 00:32:57,019
that's what I think the composition will

00:32:54,230 --> 00:32:59,929
make more sense because then we're

00:32:57,019 --> 00:33:02,029
looking at a full integration from both

00:32:59,929 --> 00:33:04,279
the teams and then the the tail end of

00:33:02,029 --> 00:33:05,690
that which is a which is a CF sort of a

00:33:04,279 --> 00:33:07,210
say of deployment integration that we

00:33:05,690 --> 00:33:10,000
have today

00:33:07,210 --> 00:33:14,620
so that's what I'm thinking and then the

00:33:10,000 --> 00:33:21,100
team is thinking but curious here how

00:33:14,620 --> 00:33:22,900
you all feel about that so I guess from

00:33:21,100 --> 00:33:26,130
from my point of view it would be pretty

00:33:22,900 --> 00:33:29,200
interesting to understand the very rough

00:33:26,130 --> 00:33:31,870
idea of timelines for this whole thing

00:33:29,200 --> 00:33:35,650
are we talking about days weeks months

00:33:31,870 --> 00:33:38,320
years like very very roughly what what

00:33:35,650 --> 00:33:45,400
are we well you missed the decade so

00:33:38,320 --> 00:33:48,990
yeah so I think the goal right now is to

00:33:45,400 --> 00:33:51,010
be iterated within the next month so I

00:33:48,990 --> 00:33:54,429
want to be very careful when I give

00:33:51,010 --> 00:33:56,890
timelines but like I said we want to

00:33:54,429 --> 00:33:59,020
ship something that they could use and

00:33:56,890 --> 00:34:00,940
this is just the target right now is

00:33:59,020 --> 00:34:03,130
just a contributing teams and not

00:34:00,940 --> 00:34:06,179
necessarily for someone who wants a

00:34:03,130 --> 00:34:09,820
player I would see if in the open market

00:34:06,179 --> 00:34:11,560
so so like to build tooling around that

00:34:09,820 --> 00:34:12,820
so it may not be the canonical way of

00:34:11,560 --> 00:34:15,790
the point but it will be something for

00:34:12,820 --> 00:34:17,590
them just started using locally so we're

00:34:15,790 --> 00:34:23,320
hoping to get that out sometime in

00:34:17,590 --> 00:34:25,480
January and there's a holidays now so so

00:34:23,320 --> 00:34:28,270
you know I can queue exactly it's gonna

00:34:25,480 --> 00:34:36,610
be made but but looks like it's gonna be

00:34:28,270 --> 00:34:39,370
somewhere mid to late January so maybe

00:34:36,610 --> 00:34:44,770
something for every like what is your

00:34:39,370 --> 00:34:46,990
idea on when and how will teams be in a

00:34:44,770 --> 00:34:49,240
state where they actually try to care

00:34:46,990 --> 00:34:52,860
about dependencies and of their own

00:34:49,240 --> 00:34:56,740
components yes like an isolated one

00:34:52,860 --> 00:34:58,930
again like I'm not trying to like pin

00:34:56,740 --> 00:35:02,140
you down on an exact date here I just

00:34:58,930 --> 00:35:06,850
wanted to get roughly to a common

00:35:02,140 --> 00:35:10,090
understanding of what well I I think

00:35:06,850 --> 00:35:13,590
given that the core component teams are

00:35:10,090 --> 00:35:18,730
already moving forward with this effort

00:35:13,590 --> 00:35:20,290
that so I don't maybe know the specifics

00:35:18,730 --> 00:35:22,000
of what you have in mind but to

00:35:20,290 --> 00:35:23,500
except that there's a shared artifact

00:35:22,000 --> 00:35:25,330
that the teams can use that's coming

00:35:23,500 --> 00:35:30,220
from relevant and that would effectively

00:35:25,330 --> 00:35:31,870
be integrating those kubernetes focus

00:35:30,220 --> 00:35:33,700
distributions of the components together

00:35:31,870 --> 00:35:41,080
so that they can operate on the same

00:35:33,700 --> 00:35:44,220
cluster what cube CF is well it is but

00:35:41,080 --> 00:35:47,980
it's at least in its current form taking

00:35:44,220 --> 00:35:51,340
Bosh packaged inputs as the primary

00:35:47,980 --> 00:35:52,510
starting point right so we would that

00:35:51,340 --> 00:35:56,290
currently is the only thing available

00:35:52,510 --> 00:35:57,790
but yeah right but if we were to put

00:35:56,290 --> 00:35:59,410
this effort and I think this is the core

00:35:57,790 --> 00:36:05,290
of it we were to put this effort into

00:35:59,410 --> 00:36:08,740
making cube CF able to consume yes

00:36:05,290 --> 00:36:11,410
kubernetes yamo or helm charts or well I

00:36:08,740 --> 00:36:14,400
think how much we can do now so if the

00:36:11,410 --> 00:36:16,990
output is a home chart we can consume it

00:36:14,400 --> 00:36:20,080
we just finished the work for corks

00:36:16,990 --> 00:36:22,080
links which will allow us to mix and

00:36:20,080 --> 00:36:24,940
match components

00:36:22,080 --> 00:36:27,580
that's for exchanging config right

00:36:24,940 --> 00:36:30,970
that's one step further like cubes EF

00:36:27,580 --> 00:36:33,790
can already deploy arbitrary emulator -

00:36:30,970 --> 00:36:35,770
Q - Q Benitez it's just when you want

00:36:33,790 --> 00:36:38,020
the data when you want the certificates

00:36:35,770 --> 00:36:40,870
and the passwords and the IP addresses

00:36:38,020 --> 00:36:43,230
and most names from the post deployment

00:36:40,870 --> 00:36:45,970
manifests then you need the quarks links

00:36:43,230 --> 00:36:47,740
but if you don't need any configuration

00:36:45,970 --> 00:36:49,600
you're doing it by hand for your dev

00:36:47,740 --> 00:36:53,260
teams you don't need anything no it's

00:36:49,600 --> 00:36:58,060
just an generated by basil and we have

00:36:53,260 --> 00:37:00,100
pipelines so we could for example just

00:36:58,060 --> 00:37:02,080
connect with the the component teams and

00:37:00,100 --> 00:37:03,640
they could submit their change or we

00:37:02,080 --> 00:37:09,940
could run those pipelines and see if it

00:37:03,640 --> 00:37:11,800
integrates is that feasible I mean I

00:37:09,940 --> 00:37:14,740
think that's what what I think that's

00:37:11,800 --> 00:37:17,440
what we would like to see yeah I

00:37:14,740 --> 00:37:20,260
actually didn't even think about the raw

00:37:17,440 --> 00:37:21,820
approach where you don't even use the

00:37:20,260 --> 00:37:26,940
quirks links which is actually possible

00:37:21,820 --> 00:37:30,610
right you you just simply don't don't

00:37:26,940 --> 00:37:34,339
don't include the API for example and

00:37:30,610 --> 00:37:36,799
just do a cute control apply

00:37:34,339 --> 00:37:37,939
and that should work too there's no

00:37:36,799 --> 00:37:40,130
reason why I shouldn't

00:37:37,939 --> 00:37:43,689
I was actually thinking about quirks

00:37:40,130 --> 00:37:43,689
links because it would make life easier

00:37:45,219 --> 00:37:50,449
I'm just interested in making life

00:37:47,390 --> 00:37:52,279
easier for size team because we've

00:37:50,449 --> 00:37:54,410
gotten that was that's kind of why I'm

00:37:52,279 --> 00:37:56,839
into this call and like I see this

00:37:54,410 --> 00:37:59,329
duplication of effort and I want to make

00:37:56,839 --> 00:38:02,180
sure we don't do that and like that we

00:37:59,329 --> 00:38:03,769
can help in any way we can in relief in

00:38:02,180 --> 00:38:05,739
reducing the overhead not only so the

00:38:03,769 --> 00:38:09,859
the component teams but precise team

00:38:05,739 --> 00:38:11,869
just by using what we built I think we

00:38:09,859 --> 00:38:14,269
also spoke at some point with the kappa

00:38:11,869 --> 00:38:16,279
team were and they were spiking on how

00:38:14,269 --> 00:38:19,009
can they move their component into a

00:38:16,279 --> 00:38:20,900
cloud native approach and the first

00:38:19,009 --> 00:38:24,049
thing I immediately realize is that they

00:38:20,900 --> 00:38:26,390
had this kind of monster setup in order

00:38:24,049 --> 00:38:29,119
to be able to test a fully integrated

00:38:26,390 --> 00:38:30,529
cloud foundry but you don't need that

00:38:29,119 --> 00:38:33,229
like it's fine that you want to

00:38:30,529 --> 00:38:36,349
concentrate on building this native cure

00:38:33,229 --> 00:38:38,029
nearest approach but it's not sign that

00:38:36,349 --> 00:38:39,439
just spent so much time trying to have

00:38:38,029 --> 00:38:41,779
this monster set up where you have part

00:38:39,439 --> 00:38:43,579
of cloud foundry in VMs and so on where

00:38:41,779 --> 00:38:45,650
you already have something like cube CF

00:38:43,579 --> 00:38:47,869
where you can just provide the proper

00:38:45,650 --> 00:38:50,150
interface if you want to stay with a

00:38:47,869 --> 00:38:54,019
helper for example and the rest will be

00:38:50,150 --> 00:38:56,029
using bush releases in this scenario and

00:38:54,019 --> 00:38:58,819
if we did and if the compositing does

00:38:56,029 --> 00:39:00,859
want to use ytt or some others you know

00:38:58,819 --> 00:39:03,559
some form of templating and the the end

00:39:00,859 --> 00:39:08,900
result is given a TCM oh we can consume

00:39:03,559 --> 00:39:11,449
that as well correct

00:39:08,900 --> 00:39:12,109
I guess tool you accorded a target for

00:39:11,449 --> 00:39:18,469
ydt

00:39:12,109 --> 00:39:20,839
to the basil maybe sorry I was not in

00:39:18,469 --> 00:39:23,749
the last call and I didn't see the

00:39:20,839 --> 00:39:27,349
recording for me I I'm still lacking

00:39:23,749 --> 00:39:31,069
understanding where in which level white

00:39:27,349 --> 00:39:33,679
tea renders those templates and what it

00:39:31,069 --> 00:39:37,219
is rendering and how we would integrate

00:39:33,679 --> 00:39:41,630
with other components like right you got

00:39:37,219 --> 00:39:45,170
copy with your white adhere injury and

00:39:41,630 --> 00:39:48,560
then you got the database us our

00:39:45,170 --> 00:39:52,340
database is not a good example some

00:39:48,560 --> 00:39:55,720
one and that connects to copy ytt is

00:39:52,340 --> 00:39:58,850
client side so think of hum three just

00:39:55,720 --> 00:40:03,110
renders stuff then you pipe that to keep

00:39:58,850 --> 00:40:08,960
control why right which is part of what

00:40:03,110 --> 00:40:13,460
helped us yeah but like I said we don't

00:40:08,960 --> 00:40:16,820
have to decide whether ytt is better or

00:40:13,460 --> 00:40:17,810
helm is better we could we could hack on

00:40:16,820 --> 00:40:26,500
both for a while

00:40:17,810 --> 00:40:28,970
sequels the winner right yeah

00:40:26,500 --> 00:40:31,520
but side this is there's this help at

00:40:28,970 --> 00:40:35,270
all like because we want to help we want

00:40:31,520 --> 00:40:38,570
to make these tools available to the

00:40:35,270 --> 00:40:44,540
component teams so they can use them and

00:40:38,570 --> 00:40:47,540
they can see the results of a of a build

00:40:44,540 --> 00:40:49,010
for instance yeah I think surly we

00:40:47,540 --> 00:40:51,080
talked to yesterday about this and I

00:40:49,010 --> 00:40:53,900
think the first so second meaning that

00:40:51,080 --> 00:40:56,390
we want deep divers I think we scheduled

00:40:53,900 --> 00:40:58,700
for January 6th I think these could be

00:40:56,390 --> 00:41:00,650
two approaches that we can take they

00:40:58,700 --> 00:41:03,080
don't have to you don't have to be

00:41:00,650 --> 00:41:04,430
mutually mutually exclusive right so the

00:41:03,080 --> 00:41:06,710
cube see if it speaks about a whole

00:41:04,430 --> 00:41:09,110
foundation does as a whole CF work and

00:41:06,710 --> 00:41:11,240
then there are some basic needs right

00:41:09,110 --> 00:41:12,980
now that we need to meet so it's just

00:41:11,240 --> 00:41:16,250
about size and complexity and how fast

00:41:12,980 --> 00:41:19,310
they can iterate but I think I think the

00:41:16,250 --> 00:41:22,280
next steps for me sticks just to sort of

00:41:19,310 --> 00:41:24,830
work with you all to see what how maybe

00:41:22,280 --> 00:41:27,440
you use cube CF at the tail end of the

00:41:24,830 --> 00:41:30,950
integration perhaps and still have a

00:41:27,440 --> 00:41:33,260
very small artifact that the teams could

00:41:30,950 --> 00:41:36,770
still use make is you know easier for

00:41:33,260 --> 00:41:39,620
them to integrate but yeah I I

00:41:36,770 --> 00:41:41,920
definitely think we should just like

00:41:39,620 --> 00:41:44,690
keep exploring this part because I think

00:41:41,920 --> 00:41:49,070
I'm I'm concerned about using bash

00:41:44,690 --> 00:41:51,440
releases because of the complexity as

00:41:49,070 --> 00:41:53,090
for debugging especially now they have

00:41:51,440 --> 00:41:55,700
to also understand how CF operator works

00:41:53,090 --> 00:41:58,670
up there things do fail we have seen we

00:41:55,700 --> 00:42:01,310
have noticed that they're trying to get

00:41:58,670 --> 00:42:03,140
things working they're the teams are

00:42:01,310 --> 00:42:06,290
challenges so

00:42:03,140 --> 00:42:09,049
so yeah so all those things cumulatively

00:42:06,290 --> 00:42:11,210
add complexity to to the to the

00:42:09,049 --> 00:42:12,770
integration work but if there are ways

00:42:11,210 --> 00:42:16,309
we can really get that perhaps we can

00:42:12,770 --> 00:42:19,819
explore it yeah and thanks being at one

00:42:16,309 --> 00:42:22,099
of the what are you so hated about sort

00:42:19,819 --> 00:42:27,140
of size and complexity it gets to the

00:42:22,099 --> 00:42:30,770
heart of just remembering that everyone

00:42:27,140 --> 00:42:32,299
you know we have what we're seeing kind

00:42:30,770 --> 00:42:34,160
of here what I'm concerned is that we're

00:42:32,299 --> 00:42:35,630
seeing oh we're just gonna you know we

00:42:34,160 --> 00:42:38,410
do it from scratch wrong kubernetes

00:42:35,630 --> 00:42:40,970
which is what everyone's doing and

00:42:38,410 --> 00:42:45,940
remembering that in cloud foundry there

00:42:40,970 --> 00:42:48,500
is a size and complexity but all of that

00:42:45,940 --> 00:42:51,680
complexity and the internal parts does

00:42:48,500 --> 00:42:53,960
make for a very elegant whole which is

00:42:51,680 --> 00:42:58,299
missing from the other cobbled-together

00:42:53,960 --> 00:43:01,880
kubernetes native solutions so far and

00:42:58,299 --> 00:43:04,760
when we're looking at rebuilding or RER

00:43:01,880 --> 00:43:08,240
connecting for kubernetes native think

00:43:04,760 --> 00:43:10,609
about what not just what oh my local

00:43:08,240 --> 00:43:13,970
team needs to think about but remember

00:43:10,609 --> 00:43:16,430
what the entire project needs to

00:43:13,970 --> 00:43:18,680
eventually deliver with that you know

00:43:16,430 --> 00:43:22,160
integrated serve management managing of

00:43:18,680 --> 00:43:24,980
secrets etc and thinking about ok well

00:43:22,160 --> 00:43:27,650
maybe I'm not going to be able to do it

00:43:24,980 --> 00:43:31,369
all on these mini bits and and still tie

00:43:27,650 --> 00:43:33,650
it together I think that's a good point

00:43:31,369 --> 00:43:36,319
but I also think this is a good time for

00:43:33,650 --> 00:43:38,510
us to think about those project level

00:43:36,319 --> 00:43:40,250
concerns right so search rotation is

00:43:38,510 --> 00:43:41,900
that something kids can do for us are

00:43:40,250 --> 00:43:44,030
there existing solutions that we could

00:43:41,900 --> 00:43:47,960
use then rather than be building it on

00:43:44,030 --> 00:43:49,280
top of it so I think I'm not saying that

00:43:47,960 --> 00:43:53,119
those are the concerns we should ignore

00:43:49,280 --> 00:43:57,230
but I also feel that there are those in

00:43:53,119 --> 00:44:01,210
the case will they do expose or what I

00:43:57,230 --> 00:44:03,680
call solutions that already exist so

00:44:01,210 --> 00:44:06,280
cube CF may hide all of that complexity

00:44:03,680 --> 00:44:09,319
but it is something that we want to

00:44:06,280 --> 00:44:11,150
continue doing likewise Efra there are

00:44:09,319 --> 00:44:13,520
little ways we can actually reuse some

00:44:11,150 --> 00:44:15,470
of the existing best practices I've keep

00:44:13,520 --> 00:44:16,059
Cades offers in the market I think we

00:44:15,470 --> 00:44:19,119
talked about

00:44:16,059 --> 00:44:22,029
if operator and stateful sets in the

00:44:19,119 --> 00:44:24,819
beginning so but yeah I think we are not

00:44:22,029 --> 00:44:27,369
there at least our team is thinking

00:44:24,819 --> 00:44:29,380
about that as a face-to in different

00:44:27,369 --> 00:44:33,910
phases so I start thinking about how the

00:44:29,380 --> 00:44:35,589
such rotation will happen when when we

00:44:33,910 --> 00:44:39,630
want upgrades and and and so on and so

00:44:35,589 --> 00:44:45,160
forth that makes sense

00:44:39,630 --> 00:44:47,499
yeah no indeed it does I mean just and

00:44:45,160 --> 00:44:50,859
and I think that's what we're saying is

00:44:47,499 --> 00:44:55,589
that in the iterative approach it's fair

00:44:50,859 --> 00:44:57,910
to say we should really reconsider what

00:44:55,589 --> 00:45:00,759
needs to be native as well as for

00:44:57,910 --> 00:45:03,130
example bringing in sto to replace a

00:45:00,759 --> 00:45:05,559
bunch of the internal plumbing could

00:45:03,130 --> 00:45:09,670
make things easier as well but then

00:45:05,559 --> 00:45:13,410
we're we're not looking at a small

00:45:09,670 --> 00:45:16,390
revamp it is one that would probably be

00:45:13,410 --> 00:45:25,869
awesome in the end but just it's not a

00:45:16,390 --> 00:45:26,890
small bit work I think that that can

00:45:25,869 --> 00:45:29,619
also get to that question around

00:45:26,890 --> 00:45:32,109
timelines is is it going to be more

00:45:29,619 --> 00:45:34,449
effort and more time to evolve to that

00:45:32,109 --> 00:45:37,449
state to incorporate things like ISTE o

00:45:34,449 --> 00:45:41,529
and K back for as the next generation of

00:45:37,449 --> 00:45:46,709
bill PACs along this trajectory or would

00:45:41,529 --> 00:45:46,709
we be able to get there faster with a

00:45:47,130 --> 00:45:55,019
effectively starting from the ground up

00:45:49,119 --> 00:46:03,609
and tackling that complexity and kind of

00:45:55,019 --> 00:46:05,650
independently I mean I know like the the

00:46:03,609 --> 00:46:08,979
networking team is you know they they've

00:46:05,650 --> 00:46:12,039
already been packaging sto components

00:46:08,979 --> 00:46:14,469
and a new component that connects Cloud

00:46:12,039 --> 00:46:17,619
Controller data to that for ingress

00:46:14,469 --> 00:46:20,170
routing I believe they're looking at

00:46:17,619 --> 00:46:22,929
ways to take advantage of this do

00:46:20,170 --> 00:46:25,029
sidecar functionality to handle some of

00:46:22,929 --> 00:46:29,530
the security concerns between components

00:46:25,029 --> 00:46:31,210
if not between applications and routing

00:46:29,530 --> 00:46:33,550
so I mean maybe that's another

00:46:31,210 --> 00:46:36,100
interesting test case for qcf is could

00:46:33,550 --> 00:46:39,430
that functionality and those component

00:46:36,100 --> 00:46:41,830
changes get integrated smoothly into

00:46:39,430 --> 00:46:44,080
that system yeah and I don't want to

00:46:41,830 --> 00:46:45,580
like it's a good discussion I don't want

00:46:44,080 --> 00:46:48,970
to derail it but noting we only have a

00:46:45,580 --> 00:46:53,080
few minutes left in this is when it

00:46:48,970 --> 00:46:57,850
comes to the SEO stuff and which we're

00:46:53,080 --> 00:47:00,520
very interested in working on is when

00:46:57,850 --> 00:47:02,770
we're going to hit the eventual trade

00:47:00,520 --> 00:47:04,720
offs of oh we're gonna gain this

00:47:02,770 --> 00:47:08,350
functionality or make this easier but oh

00:47:04,720 --> 00:47:10,900
we're going to lose this piece that may

00:47:08,350 --> 00:47:15,460
have been exposed as a CF external like

00:47:10,900 --> 00:47:17,470
CF command line API you know how do we

00:47:15,460 --> 00:47:21,250
make the decision of it's okay to do

00:47:17,470 --> 00:47:27,640
that because that that will those will

00:47:21,250 --> 00:47:30,700
come up also we had an experiment by IBM

00:47:27,640 --> 00:47:34,360
that had integrated sto at the component

00:47:30,700 --> 00:47:40,620
level even in SPF which was much harder

00:47:34,360 --> 00:47:45,180
than it would be in cubes yes where

00:47:40,620 --> 00:47:45,180
component communication happens via SD a

00:47:46,860 --> 00:47:52,900
device that was hard to do with with

00:47:49,750 --> 00:47:55,990
previous SEF yeah yeah

00:47:52,900 --> 00:47:58,320
SEF was not as flexible as cube ZFS cube

00:47:55,990 --> 00:48:02,590
CF has a bunch of integration points

00:47:58,320 --> 00:48:05,440
plus it allows you to write write helm

00:48:02,590 --> 00:48:06,010
by hand if he wanted to write templates

00:48:05,440 --> 00:48:08,950
by hand

00:48:06,010 --> 00:48:11,980
SEF did not allow you to do that at

00:48:08,950 --> 00:48:13,870
least at that stage it didn't everything

00:48:11,980 --> 00:48:16,690
was generated so you had to around some

00:48:13,870 --> 00:48:19,510
stuff in that sense it's way more

00:48:16,690 --> 00:48:22,450
flexible in terms of like we can't add

00:48:19,510 --> 00:48:24,460
more functionality way easier even I

00:48:22,450 --> 00:48:27,850
think we've been discussing how do we

00:48:24,460 --> 00:48:30,250
make the iteration faster for a specific

00:48:27,850 --> 00:48:34,230
team we can create a mechanism for that

00:48:30,250 --> 00:48:34,230
that focuses on development

00:48:37,619 --> 00:48:51,490
yeah we yeah I think we're after the

00:48:42,970 --> 00:48:54,550
same things I wanted same well I think

00:48:51,490 --> 00:48:57,220
the point is that you will have the

00:48:54,550 --> 00:49:00,430
logic somewhere and it doesn't have to

00:48:57,220 --> 00:49:03,220
be in our current operator but it will

00:49:00,430 --> 00:49:06,790
be in another operator or in communities

00:49:03,220 --> 00:49:12,220
and the future of the next version or in

00:49:06,790 --> 00:49:17,050
Capek or somewhere right so yeah I mean

00:49:12,220 --> 00:49:20,410
I don't think we are unhappy if the

00:49:17,050 --> 00:49:22,660
operator that we currently have which

00:49:20,410 --> 00:49:24,790
consists of like I don't know how many

00:49:22,660 --> 00:49:27,280
controllers more than 10 controllers

00:49:24,790 --> 00:49:32,020
well if that gets smaller and we don't

00:49:27,280 --> 00:49:33,640
need it anymore great more than that

00:49:32,020 --> 00:49:35,440
that is that actually the goal we want

00:49:33,640 --> 00:49:36,849
it to wither away the withering away of

00:49:35,440 --> 00:49:39,099
the operator because it is too big and

00:49:36,849 --> 00:49:41,049
complex right now by necessity because

00:49:39,099 --> 00:49:43,569
we're consuming bus releases but the

00:49:41,049 --> 00:49:47,230
goal is you know we use kubernetes

00:49:43,569 --> 00:49:48,880
native features whenever we can but I

00:49:47,230 --> 00:49:51,940
wouldn't be surprised if we have to

00:49:48,880 --> 00:49:54,339
write some of these to Benitez native

00:49:51,940 --> 00:49:58,059
features ourselves like it maybe try to

00:49:54,339 --> 00:50:00,490
upstream them because there's a lot of

00:49:58,059 --> 00:50:05,109
things missing in kubernetes which we

00:50:00,490 --> 00:50:07,150
probably want yeah and this was the

00:50:05,109 --> 00:50:09,490
impetus behind the idea of breaking out

00:50:07,150 --> 00:50:12,750
some of the breaking apart some of the

00:50:09,490 --> 00:50:15,099
operator so that it could be upstream

00:50:12,750 --> 00:50:17,170
does that even happen that didn't really

00:50:15,099 --> 00:50:19,270
happen did it well no I'm not sure if

00:50:17,170 --> 00:50:21,640
this is if these features are useful for

00:50:19,270 --> 00:50:22,559
the broader community we try we would

00:50:21,640 --> 00:50:27,880
keep trying

00:50:22,559 --> 00:50:30,339
when we have to release out but I don't

00:50:27,880 --> 00:50:32,230
want to say it has to be code from that

00:50:30,339 --> 00:50:35,880
operator maybe somebody else is writing

00:50:32,230 --> 00:50:38,890
another one next year I don't know but I

00:50:35,880 --> 00:50:42,420
think we will meet people get to that

00:50:38,890 --> 00:50:42,420
point where we need more logic

00:50:45,000 --> 00:50:54,839
Eric to answer your question earlier

00:50:48,730 --> 00:50:59,950
question which one would be faster I

00:50:54,839 --> 00:51:02,770
think my opinion is that it would be

00:50:59,950 --> 00:51:07,630
faster to use something like cube CF

00:51:02,770 --> 00:51:10,270
because it integrates for you from the

00:51:07,630 --> 00:51:16,299
start we have cats passing right now

00:51:10,270 --> 00:51:19,049
so I just see that as a as a simple way

00:51:16,299 --> 00:51:25,450
to test that everything is working and

00:51:19,049 --> 00:51:28,690
replace things one at a time and again

00:51:25,450 --> 00:51:34,660
have stuff that's working you could have

00:51:28,690 --> 00:51:37,450
a release that has a native UA a at the

00:51:34,660 --> 00:51:39,130
end of January rain and have that

00:51:37,450 --> 00:51:41,680
releasable and have people be able to

00:51:39,130 --> 00:51:44,410
helm install that or Q control apply

00:51:41,680 --> 00:51:47,440
that but but I think the difference

00:51:44,410 --> 00:51:49,779
might be yes that's true and I would I

00:51:47,440 --> 00:51:54,609
would argue you're you're correct if you

00:51:49,779 --> 00:51:58,750
only want to deliver a the 100% existing

00:51:54,609 --> 00:52:00,579
Cloud Foundry experience I think that if

00:51:58,750 --> 00:52:03,819
you're arguing from the point of maybe

00:52:00,579 --> 00:52:06,640
if I really want to replumb for the

00:52:03,819 --> 00:52:10,200
purely kubernetes experience with as

00:52:06,640 --> 00:52:15,490
close to CF but not necessarily

00:52:10,200 --> 00:52:16,930
slavishly exact then you know you you

00:52:15,490 --> 00:52:20,230
could make that argument for the ground

00:52:16,930 --> 00:52:22,240
up but I don't think you but I would

00:52:20,230 --> 00:52:24,760
agree that if you're saying I want to

00:52:22,240 --> 00:52:26,880
get to that hundred percent you the

00:52:24,760 --> 00:52:29,049
ground up would eventually take longer

00:52:26,880 --> 00:52:31,200
so yeah I want to make sure that

00:52:29,049 --> 00:52:34,690
everyone understands that we at Sousa

00:52:31,200 --> 00:52:37,180
know the recognized that there is a

00:52:34,690 --> 00:52:40,809
disincentive to making radical changes

00:52:37,180 --> 00:52:43,950
in the current pass like using CF

00:52:40,809 --> 00:52:46,420
operator to consume Bosch releases

00:52:43,950 --> 00:52:49,150
doesn't force the issue it doesn't rip

00:52:46,420 --> 00:52:54,220
off the band-aid and make people

00:52:49,150 --> 00:52:57,130
reimplemented we know that you know you

00:52:54,220 --> 00:52:57,640
might be able to have some idealized

00:52:57,130 --> 00:53:00,549
view

00:52:57,640 --> 00:53:02,230
kubernetes we you know this opportunity

00:53:00,549 --> 00:53:05,769
to refactor a component to be purely

00:53:02,230 --> 00:53:07,869
kubernetes the push is not as strong if

00:53:05,769 --> 00:53:10,869
we have something like cube CF and CF

00:53:07,869 --> 00:53:13,029
operator that can keep releases coming

00:53:10,869 --> 00:53:14,500
out and can gradually change Cloud

00:53:13,029 --> 00:53:17,380
Foundry into a more kubernetes things

00:53:14,500 --> 00:53:21,130
it's it maybe it doesn't force the issue

00:53:17,380 --> 00:53:23,440
as much but it also it's the only same

00:53:21,130 --> 00:53:25,359
path that I can see to actually keeping

00:53:23,440 --> 00:53:27,250
releases coming out and having some of

00:53:25,359 --> 00:53:29,549
us on cube and some of us not on cube

00:53:27,250 --> 00:53:35,200
and then eventually all of us on cube

00:53:29,549 --> 00:53:36,700
and it's it's just a smoother past for

00:53:35,200 --> 00:53:38,740
me and that's that's why I'm advocating

00:53:36,700 --> 00:53:40,150
it for it so hard I understand and I'm

00:53:38,740 --> 00:53:42,430
trying to channel Jules here because

00:53:40,150 --> 00:53:45,220
he's not here because he does sort of

00:53:42,430 --> 00:53:47,049
want to force the issue with the the

00:53:45,220 --> 00:53:49,779
component teams and and have them

00:53:47,049 --> 00:53:53,589
reconsider how they've built things in

00:53:49,779 --> 00:53:56,170
light of humanities and that is a good

00:53:53,589 --> 00:53:57,880
thing but I think it causes too much

00:53:56,170 --> 00:54:00,730
disruption and it would slow down our

00:53:57,880 --> 00:54:04,269
timeline a lot more so to also answer

00:54:00,730 --> 00:54:06,670
Eric question I think re-implementing

00:54:04,269 --> 00:54:08,410
all the components and and starting from

00:54:06,670 --> 00:54:10,779
scratch on some of these things pushes

00:54:08,410 --> 00:54:13,240
the timeline out a lot further than we

00:54:10,779 --> 00:54:15,640
are are allowed to you know I think that

00:54:13,240 --> 00:54:17,859
the industry would punish cloud foundry

00:54:15,640 --> 00:54:20,589
for for moving too slowly here I

00:54:17,859 --> 00:54:22,690
strongly believe that and if we're as if

00:54:20,589 --> 00:54:26,559
we have something releasable we all have

00:54:22,690 --> 00:54:28,029
something releasable next year that we

00:54:26,559 --> 00:54:29,740
still have the opportunity to make cloud

00:54:28,029 --> 00:54:33,160
foundry relevant in the kubernetes

00:54:29,740 --> 00:54:35,619
community if we wait too long they're

00:54:33,160 --> 00:54:37,269
just gonna ignore us completely that's

00:54:35,619 --> 00:54:39,849
that's why the urgency and that's why

00:54:37,269 --> 00:54:42,250
I'm trying to push cube CF and the

00:54:39,849 --> 00:54:43,930
operator as as a good centralized place

00:54:42,250 --> 00:54:53,230
for us to get all this stuff done

00:54:43,930 --> 00:54:54,819
quicker I had one question I only have

00:54:53,230 --> 00:54:58,049
one minute left so I'm gonna give it

00:54:54,819 --> 00:54:58,049
back say burn and if you had any

00:54:58,730 --> 00:55:04,760
any other topics I guess or next steps

00:55:01,910 --> 00:55:07,190
for this yeah I mean next steps just

00:55:04,760 --> 00:55:09,590
like purely organizationally I think

00:55:07,190 --> 00:55:13,550
like the next regular call would be on

00:55:09,590 --> 00:55:15,710
January 7th if I'm not mistaken I guess

00:55:13,550 --> 00:55:18,290
I would be available but question to the

00:55:15,710 --> 00:55:22,070
round is that like aligning with

00:55:18,290 --> 00:55:26,620
everybody's vacation schedules or like

00:55:22,070 --> 00:55:26,620
should we start a week later than that

00:55:27,700 --> 00:55:38,510
I'm good yeah 7th work Cherie I take

00:55:36,440 --> 00:55:43,430
that as we've continued discussions on

00:55:38,510 --> 00:55:45,860
on the 7 yeah how to come conclude

00:55:43,430 --> 00:55:51,500
they're kind of hard to to summarize the

00:55:45,860 --> 00:55:53,720
discussions they're on so I think

00:55:51,500 --> 00:55:56,630
basically we've continued discussions

00:55:53,720 --> 00:55:59,480
there I still see like two slightly

00:55:56,630 --> 00:56:01,490
different approaches I don't think that

00:55:59,480 --> 00:56:04,730
we really came to like this is what we

00:56:01,490 --> 00:56:06,770
would we jointly want to do so probably

00:56:04,730 --> 00:56:08,540
and let's see what people's interests

00:56:06,770 --> 00:56:11,450
are so I'll come up with another poll

00:56:08,540 --> 00:56:13,690
for next time probably continuing on

00:56:11,450 --> 00:56:15,800
that discussion thread might be

00:56:13,690 --> 00:56:19,250
something interesting one on the other

00:56:15,800 --> 00:56:23,750
hand may decide until then or a has some

00:56:19,250 --> 00:56:28,930
more to to show um let's see um so

00:56:23,750 --> 00:56:28,930
probably continuing in that direction is

00:56:29,080 --> 00:56:35,300
oh go ahead try my takeaway is that we

00:56:33,020 --> 00:56:38,480
on the season team are just gonna do

00:56:35,300 --> 00:56:41,360
some community evangelism on Cube CF

00:56:38,480 --> 00:56:42,830
where it's going how to use it make it

00:56:41,360 --> 00:56:48,650
more attractive for the teams to

00:56:42,830 --> 00:56:51,880
investigate as much as we can that that

00:56:48,650 --> 00:56:51,880
will hopefully help as well

00:56:53,060 --> 00:57:02,369
go ahead Eric oh right I just wanted to

00:56:57,720 --> 00:57:04,680
say also uh to confirm that sorry you

00:57:02,369 --> 00:57:07,670
were gonna dive into more of the cube CF

00:57:04,680 --> 00:57:11,730
and see if operator details on the sixth

00:57:07,670 --> 00:57:14,250
yeah so I think well I don't I would be

00:57:11,730 --> 00:57:15,720
one of my questions I guess if I ask and

00:57:14,250 --> 00:57:18,780
maybe something we can explore in the

00:57:15,720 --> 00:57:22,160
future is what happens if when we swap

00:57:18,780 --> 00:57:24,599
with new releases or Ocasek aid centric

00:57:22,160 --> 00:57:27,599
releases they may not have all the

00:57:24,599 --> 00:57:29,880
capabilities so that means you mean in

00:57:27,599 --> 00:57:32,640
another Fork of cube CF that is on dev

00:57:29,880 --> 00:57:34,890
branch that will in and then they trade

00:57:32,640 --> 00:57:37,970
on it but the old cube chips is still on

00:57:34,890 --> 00:57:40,619
the Bosch releases so it won't be Oh

00:57:37,970 --> 00:57:42,180
easier swapping because not all

00:57:40,619 --> 00:57:44,220
capabilities you'll be available as soon

00:57:42,180 --> 00:57:47,099
as we you know first component is

00:57:44,220 --> 00:57:48,750
releasing alpha it's a good question we

00:57:47,099 --> 00:57:52,050
have these things that we call feature

00:57:48,750 --> 00:57:55,109
flags so like we you switch from Diego

00:57:52,050 --> 00:57:58,710
to ireenie you can switch from Barcia

00:57:55,109 --> 00:58:02,310
ireenie to hell my Rini we don't plan to

00:57:58,710 --> 00:58:04,020
remove the Bosh irony from day one right

00:58:02,310 --> 00:58:05,970
we'll have a feature flag that allows

00:58:04,020 --> 00:58:09,119
you just like what type do you want we

00:58:05,970 --> 00:58:10,920
need deploy yeah I think those are like

00:58:09,119 --> 00:58:14,760
just logistics of you may have to

00:58:10,920 --> 00:58:16,980
explore complexity that could add with

00:58:14,760 --> 00:58:18,930
that with your add so cool oh thank you

00:58:16,980 --> 00:58:20,130
very anywhere that the outcome of that

00:58:18,930 --> 00:58:24,540
discussion might be something we could

00:58:20,130 --> 00:58:26,810
talk about on sevenths well we want

00:58:24,540 --> 00:58:30,180
ireenie to be the first like guinea pig

00:58:26,810 --> 00:58:35,510
they have a hum chart we could consume

00:58:30,180 --> 00:58:36,630
as natively as possible see what happens

00:58:35,510 --> 00:58:40,020
okay

00:58:36,630 --> 00:58:42,060
awesome thanks everybody thank you very

00:58:40,020 --> 00:58:43,800
much for attending this year looking

00:58:42,060 --> 00:58:45,750
forward to continued discussions next

00:58:43,800 --> 00:58:50,030
year happy holidays if you're

00:58:45,750 --> 00:58:50,030
celebrating and see you again in 2020

00:58:53,910 --> 00:58:57,020

YouTube URL: https://www.youtube.com/watch?v=3ueqbfTOPL8


