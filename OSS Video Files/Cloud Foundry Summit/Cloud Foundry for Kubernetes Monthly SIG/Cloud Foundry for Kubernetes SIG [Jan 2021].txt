Title: Cloud Foundry for Kubernetes SIG [Jan 2021]
Publication date: 2021-01-25
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:00:15,920 --> 00:00:18,000
you

00:00:31,199 --> 00:00:33,840
hi philip

00:00:38,000 --> 00:00:41,680
hi hi

00:00:42,239 --> 00:00:45,600
so we are already on recording just in

00:00:44,879 --> 00:00:49,120
case

00:00:45,600 --> 00:00:49,120
i think that gets switched on

00:00:56,840 --> 00:00:59,840
automatically

00:01:13,119 --> 00:01:17,680
and i guess we're a bit early

00:01:17,840 --> 00:01:23,040
yeah i uh usually join meetings early

00:01:22,240 --> 00:01:25,759
and just

00:01:23,040 --> 00:01:27,600
put them unmute so i'm i'm there once

00:01:25,759 --> 00:01:30,560
they start

00:01:27,600 --> 00:01:30,560
if i don't have one

00:01:31,200 --> 00:01:34,720
directly before it so so you don't

00:01:34,240 --> 00:01:36,880
forget

00:01:34,720 --> 00:01:40,079
and then have to join the last seconds

00:01:36,880 --> 00:01:40,079
to be on time

00:01:44,240 --> 00:01:49,280
okay then i guess we can just wait a

00:01:46,560 --> 00:01:55,840
little bit longer on youtube

00:01:49,280 --> 00:01:55,840
without joining

00:04:12,840 --> 00:04:18,160
hello

00:04:15,200 --> 00:04:20,400
hi i mentioned to philip that as always

00:04:18,160 --> 00:04:23,280
we are already on recording

00:04:20,400 --> 00:04:23,280
just to let you know

00:04:25,120 --> 00:04:30,560
in case you want to discuss some sap

00:04:27,520 --> 00:04:30,560
super secret thing

00:04:31,360 --> 00:04:34,960
in that case we should or we shouldn't

00:04:33,120 --> 00:04:37,919
do it

00:04:34,960 --> 00:04:37,919
we shouldn't i guess

00:04:39,840 --> 00:04:43,840
good that you mentioned it

00:04:51,360 --> 00:04:55,440
actually when i've seen the recording on

00:04:53,199 --> 00:05:11,840
the top left of the window i just

00:04:55,440 --> 00:05:11,840
stopped video again and muted myself

00:06:05,039 --> 00:06:08,960
hi eric hey eric

00:06:09,199 --> 00:06:14,479
hey john hey byron hey thanks for

00:06:12,080 --> 00:06:14,479
joining

00:06:19,120 --> 00:06:35,840
small crowd still let's give people a

00:06:22,400 --> 00:06:35,840
couple of more minutes

00:06:42,479 --> 00:06:52,240
hi troy hey troy hi

00:06:48,560 --> 00:06:52,240
good morning for a bit

00:06:53,120 --> 00:06:56,000
brewing coffee

00:06:56,160 --> 00:07:03,840
it's a noisy it's a noisy procedure

00:06:59,840 --> 00:07:03,840
i know

00:07:06,960 --> 00:07:17,840
hey tyler hi hands ah

00:07:10,080 --> 00:07:17,840
this is still connecting audio

00:07:25,280 --> 00:07:32,160
hey hands hi band hey

00:07:34,000 --> 00:07:38,080
let's wait another one two minutes i had

00:07:36,080 --> 00:07:40,880
to install zoom

00:07:38,080 --> 00:07:42,080
of course of course the thing that

00:07:40,880 --> 00:07:44,879
usually happens to me

00:07:42,080 --> 00:07:46,479
is i have zoom installed but then it

00:07:44,879 --> 00:07:49,440
prompts me to install again the

00:07:46,479 --> 00:07:49,440
background plugin

00:07:54,319 --> 00:08:02,240
hey chris

00:07:58,720 --> 00:08:04,000
hey happy new year well yeah actually i

00:08:02,240 --> 00:08:06,800
was just

00:08:04,000 --> 00:08:07,840
thinking about this is the first meeting

00:08:06,800 --> 00:08:13,360
this year so yeah

00:08:07,840 --> 00:08:15,599
happy new year everybody

00:08:13,360 --> 00:08:17,039
talked to a couple of folks before so i

00:08:15,599 --> 00:08:19,840
didn't really

00:08:17,039 --> 00:08:27,840
have it in mind but yeah still january

00:08:19,840 --> 00:08:27,840
as they say

00:08:49,839 --> 00:08:55,839
ah simon hey

00:09:04,640 --> 00:09:09,839
okay so one more minute and then i think

00:09:07,040 --> 00:09:09,839
we should get started

00:09:13,600 --> 00:09:18,399
while we are waiting trying to share my

00:09:20,839 --> 00:09:25,279
screen

00:09:22,560 --> 00:09:27,279
dock still visible for everyone

00:09:25,279 --> 00:09:37,839
everybody

00:09:27,279 --> 00:09:37,839
i can't see it

00:09:45,680 --> 00:09:51,839
i'm usually confused with the preview

00:09:49,120 --> 00:09:51,839
window in zoom

00:09:56,080 --> 00:10:00,880
okay let's get started so yeah again

00:09:58,720 --> 00:10:01,279
happy new year to to everybody welcome

00:10:00,880 --> 00:10:04,480
to

00:10:01,279 --> 00:10:07,920
the first special interest group call

00:10:04,480 --> 00:10:11,519
for cloud foundry on kubernetes um

00:10:07,920 --> 00:10:13,680
this one dates a little bit back in

00:10:11,519 --> 00:10:16,480
into into last year where towards the

00:10:13,680 --> 00:10:19,519
end of the year we had a couple of polls

00:10:16,480 --> 00:10:20,959
and i asked a couple of times regarding

00:10:19,519 --> 00:10:23,680
topic suggestions

00:10:20,959 --> 00:10:24,640
i think the quote unquote only topic

00:10:23,680 --> 00:10:28,480
that

00:10:24,640 --> 00:10:31,200
we came up with was to go through the

00:10:28,480 --> 00:10:32,000
thoughts on cf for kate's use cases

00:10:31,200 --> 00:10:36,079
document that

00:10:32,000 --> 00:10:41,040
i sent via the cfdef mailing list

00:10:36,079 --> 00:10:43,600
i guess maybe mid of december or so

00:10:41,040 --> 00:10:44,640
and received a couple of comments from

00:10:43,600 --> 00:10:47,920
from people

00:10:44,640 --> 00:10:50,800
reading it back then but

00:10:47,920 --> 00:10:52,880
before we dive into that are there any

00:10:50,800 --> 00:10:56,720
additional topics that people

00:10:52,880 --> 00:10:56,720
want to want to cover in in this call

00:10:57,279 --> 00:11:01,839
or is this pretty much the only thing

00:11:00,240 --> 00:11:05,040
that we have

00:11:01,839 --> 00:11:05,040
which is fine i guess

00:11:06,000 --> 00:11:10,000
doesn't seem to be the case so i guess

00:11:08,800 --> 00:11:12,640
the

00:11:10,000 --> 00:11:13,200
at least in sap the usual review starts

00:11:12,640 --> 00:11:16,560
with

00:11:13,200 --> 00:11:19,360
who has read the document and then

00:11:16,560 --> 00:11:20,399
like usually two-thirds of the crowds

00:11:19,360 --> 00:11:23,600
are

00:11:20,399 --> 00:11:25,279
not too outspoken about it um so

00:11:23,600 --> 00:11:26,959
i guess the second question that then

00:11:25,279 --> 00:11:29,600
usually comes is

00:11:26,959 --> 00:11:31,600
how should we go about the document like

00:11:29,600 --> 00:11:32,959
assuming that everybody has read it

00:11:31,600 --> 00:11:35,519
should we just discuss

00:11:32,959 --> 00:11:37,040
or should we rather like step through

00:11:35,519 --> 00:11:40,160
the document again

00:11:37,040 --> 00:11:42,000
and kind of try and recap things and i

00:11:40,160 --> 00:11:43,040
guess usually we end up with doing the

00:11:42,000 --> 00:11:47,680
letter

00:11:43,040 --> 00:11:50,639
um so yeah

00:11:47,680 --> 00:11:50,959
base it on on your preference so um i

00:11:50,639 --> 00:11:52,320
can

00:11:50,959 --> 00:11:54,079
i can definitely walk through the

00:11:52,320 --> 00:11:57,839
document and then we can

00:11:54,079 --> 00:11:57,839
can have a discussion as as we go

00:11:59,279 --> 00:12:02,880
i think that that would be a good good

00:12:01,040 --> 00:12:05,040
way

00:12:02,880 --> 00:12:06,720
okay at least you know sketching out

00:12:05,040 --> 00:12:08,079
sketch it out at high level again for

00:12:06,720 --> 00:12:11,120
those who have not read it

00:12:08,079 --> 00:12:12,959
yeah right so

00:12:11,120 --> 00:12:14,480
so i kind of while while putting

00:12:12,959 --> 00:12:16,399
together the document i

00:12:14,480 --> 00:12:18,800
used a couple of terms and then like

00:12:16,399 --> 00:12:20,959
after i put together the the kind of

00:12:18,800 --> 00:12:22,959
main part of the document i

00:12:20,959 --> 00:12:24,079
started to to kind of extract some of

00:12:22,959 --> 00:12:27,279
those terms into

00:12:24,079 --> 00:12:30,160
into a glossary some of those are

00:12:27,279 --> 00:12:31,600
definitely more obvious so cfocates is

00:12:30,160 --> 00:12:35,440
actually the cfocates

00:12:31,600 --> 00:12:38,480
project in the cloud foundry or cf4vms

00:12:35,440 --> 00:12:41,519
is essentially cf deployment

00:12:38,480 --> 00:12:44,639
um cloud foundry foundation

00:12:41,519 --> 00:12:45,680
is a single instance of cloud foundry

00:12:44,639 --> 00:12:48,240
and then

00:12:45,680 --> 00:12:50,959
i think like the other ones are maybe a

00:12:48,240 --> 00:12:53,279
little bit more

00:12:50,959 --> 00:12:54,320
need a little bit more definition so to

00:12:53,279 --> 00:12:56,160
speak so i

00:12:54,320 --> 00:12:58,079
i came up with the term of a cloud

00:12:56,160 --> 00:13:01,120
foundry operations team

00:12:58,079 --> 00:13:04,399
so essentially uh the the people that

00:13:01,120 --> 00:13:07,680
are operating one or many

00:13:04,399 --> 00:13:10,800
cf foundations from from like a platform

00:13:07,680 --> 00:13:13,360
perspective so they do things like

00:13:10,800 --> 00:13:15,440
provide new ones make sure that these

00:13:13,360 --> 00:13:17,680
are updated et cetera et cetera

00:13:15,440 --> 00:13:18,639
to to kind of distinguish these folks

00:13:17,680 --> 00:13:22,320
from people

00:13:18,639 --> 00:13:25,600
using the the actual platform um

00:13:22,320 --> 00:13:28,480
and then i i kind of

00:13:25,600 --> 00:13:29,920
have the term c of control plane so

00:13:28,480 --> 00:13:32,880
essentially

00:13:29,920 --> 00:13:35,200
all all the core cloud foundry

00:13:32,880 --> 00:13:39,600
components like cloud controller uaa

00:13:35,200 --> 00:13:43,519
etc etc and i think at times i'm also

00:13:39,600 --> 00:13:46,320
using um cf applications as

00:13:43,519 --> 00:13:47,279
kind of the the opposite of that so

00:13:46,320 --> 00:13:50,320
essentially

00:13:47,279 --> 00:13:52,480
payload that gets cf pushed to the

00:13:50,320 --> 00:13:54,720
platform and that that is then run

00:13:52,480 --> 00:13:56,639
and that distinction will become

00:13:54,720 --> 00:13:59,360
important later on because

00:13:56,639 --> 00:14:00,639
today if you deploy cfo gates then

00:13:59,360 --> 00:14:02,720
essentially you get the

00:14:00,639 --> 00:14:04,480
control plane as well as the cloud

00:14:02,720 --> 00:14:06,800
foundry apps

00:14:04,480 --> 00:14:07,839
deployed in in one cluster and part of

00:14:06,800 --> 00:14:10,720
the document

00:14:07,839 --> 00:14:12,160
is talking about ideas of of how to to

00:14:10,720 --> 00:14:15,199
actually separate

00:14:12,160 --> 00:14:18,079
these two entities from from each other

00:14:15,199 --> 00:14:18,959
um and then last but not least like

00:14:18,079 --> 00:14:22,000
separating

00:14:18,959 --> 00:14:24,959
those entities from each other i

00:14:22,000 --> 00:14:26,399
started using the term payload cluster

00:14:24,959 --> 00:14:29,519
to basically say

00:14:26,399 --> 00:14:30,320
this is the cluster where ultimately cf

00:14:29,519 --> 00:14:33,040
applications

00:14:30,320 --> 00:14:35,279
are running and this might not

00:14:33,040 --> 00:14:38,079
necessarily be the same one where the

00:14:35,279 --> 00:14:41,920
cdf control plane is actually one

00:14:38,079 --> 00:14:45,680
so that that's like for terminology

00:14:41,920 --> 00:14:50,240
ultimately and then basically i

00:14:45,680 --> 00:14:50,240
i started by giving a little bit of

00:14:50,880 --> 00:14:57,760
sap do so definitely running

00:14:54,720 --> 00:14:59,680
cf on on vms at large scale

00:14:57,760 --> 00:15:01,040
but then obviously in the future

00:14:59,680 --> 00:15:04,240
envisioning that

00:15:01,040 --> 00:15:07,199
users that use cf on vms today

00:15:04,240 --> 00:15:08,720
um will move over to cf4ks as

00:15:07,199 --> 00:15:11,760
essentially

00:15:08,720 --> 00:15:14,959
over time the the kind of

00:15:11,760 --> 00:15:19,279
evolution of cloud foundry

00:15:14,959 --> 00:15:22,240
natively on on kubernetes um

00:15:19,279 --> 00:15:23,199
and then like we as as a platform

00:15:22,240 --> 00:15:26,480
provider for us

00:15:23,199 --> 00:15:30,560
it means probably moving away from

00:15:26,480 --> 00:15:33,360
managing a few and maybe a few is

00:15:30,560 --> 00:15:34,000
is more than people actually think but a

00:15:33,360 --> 00:15:37,279
few

00:15:34,000 --> 00:15:37,680
cf on vm's deployments that are pretty

00:15:37,279 --> 00:15:40,880
big

00:15:37,680 --> 00:15:45,839
over to running many

00:15:40,880 --> 00:15:49,199
many more for pace deployments

00:15:45,839 --> 00:15:49,839
maybe something like one per stakeholder

00:15:49,199 --> 00:15:52,959
team

00:15:49,839 --> 00:15:56,079
or one per org unit

00:15:52,959 --> 00:15:57,360
to to be decided i i guess and and then

00:15:56,079 --> 00:16:00,480
obviously while

00:15:57,360 --> 00:16:02,079
like for a handful of cf on vm

00:16:00,480 --> 00:16:05,440
deployments

00:16:02,079 --> 00:16:05,920
certain kind of semi-automated steps are

00:16:05,440 --> 00:16:08,320
fine

00:16:05,920 --> 00:16:09,759
um these are probably no longer fine if

00:16:08,320 --> 00:16:11,839
we are talking about

00:16:09,759 --> 00:16:14,000
hundreds or even thousands of of

00:16:11,839 --> 00:16:17,360
cfocade's deployments then

00:16:14,000 --> 00:16:20,839
you essentially um cannot afford doing

00:16:17,360 --> 00:16:22,720
any manual operations activity on these

00:16:20,839 --> 00:16:25,600
systems

00:16:22,720 --> 00:16:26,399
and plus obviously uh there's also that

00:16:25,600 --> 00:16:32,639
comment and

00:16:26,399 --> 00:16:35,199
uh guillaume um put put a question there

00:16:32,639 --> 00:16:36,079
even if we wanted to basically take each

00:16:35,199 --> 00:16:38,560
of our cfo

00:16:36,079 --> 00:16:40,800
vm deployments and transfer it one to

00:16:38,560 --> 00:16:43,199
one over to the kubernetes world

00:16:40,800 --> 00:16:44,880
um there's probably a realization that a

00:16:43,199 --> 00:16:45,920
single kubernetes cluster could not

00:16:44,880 --> 00:16:47,680
scale

00:16:45,920 --> 00:16:50,720
uh to the extent that we were actually

00:16:47,680 --> 00:16:53,040
needed to run our workloads and

00:16:50,720 --> 00:16:55,519
i would say even worse if you then put

00:16:53,040 --> 00:16:56,880
on that kubernetes cluster service mesh

00:16:55,519 --> 00:16:59,120
then probably

00:16:56,880 --> 00:17:00,320
also the service mesh will start being a

00:16:59,120 --> 00:17:04,160
limiting factor

00:17:00,320 --> 00:17:04,480
to the actual growth of that cluster be

00:17:04,160 --> 00:17:06,720
it

00:17:04,480 --> 00:17:08,559
the dynamics that that it brings in so

00:17:06,720 --> 00:17:11,760
see if pushing applications

00:17:08,559 --> 00:17:14,559
routes getting created and being removed

00:17:11,760 --> 00:17:16,799
probably later on plus then also the

00:17:14,559 --> 00:17:19,039
actual payload traffic that

00:17:16,799 --> 00:17:20,240
gets into the cluster and then needs to

00:17:19,039 --> 00:17:23,679
be dispatched to

00:17:20,240 --> 00:17:26,400
the actual cf applications

00:17:23,679 --> 00:17:27,120
so yeah uh that that essentially means

00:17:26,400 --> 00:17:30,400
that

00:17:27,120 --> 00:17:32,880
um we've come to the realization that

00:17:30,400 --> 00:17:33,760
actually for our future cf operations

00:17:32,880 --> 00:17:36,720
model

00:17:33,760 --> 00:17:37,919
we need something that's very close to

00:17:36,720 --> 00:17:40,799
how we

00:17:37,919 --> 00:17:42,080
cf create service things like a database

00:17:40,799 --> 00:17:44,480
today where

00:17:42,080 --> 00:17:45,760
also we have then automation kicking in

00:17:44,480 --> 00:17:48,799
provisioning database

00:17:45,760 --> 00:17:52,160
instances or creating a shard on a

00:17:48,799 --> 00:17:54,559
database instance or however you do it

00:17:52,160 --> 00:17:56,240
and we need something similar for cloud

00:17:54,559 --> 00:17:58,480
foundry where

00:17:56,240 --> 00:18:00,080
via some tooling and automation we

00:17:58,480 --> 00:18:04,320
actually create

00:18:00,080 --> 00:18:04,320
cf foundations as a service

00:18:06,000 --> 00:18:11,919
and then to to to clarify that while

00:18:09,360 --> 00:18:12,720
obviously we need some infrastructure

00:18:11,919 --> 00:18:14,799
that

00:18:12,720 --> 00:18:16,320
kind of manages all these year

00:18:14,799 --> 00:18:18,960
foundations and probably

00:18:16,320 --> 00:18:20,720
that that's that's maybe like an

00:18:18,960 --> 00:18:23,760
additional topic that that we could

00:18:20,720 --> 00:18:25,120
um discuss in in this round at a certain

00:18:23,760 --> 00:18:29,520
point in time

00:18:25,120 --> 00:18:30,160
um this document is is less about how we

00:18:29,520 --> 00:18:32,880
manage

00:18:30,160 --> 00:18:33,919
many of those cf foundations and it's

00:18:32,880 --> 00:18:37,520
also not

00:18:33,919 --> 00:18:40,480
about how concretely we are deploying

00:18:37,520 --> 00:18:41,679
one of these foundations but but it more

00:18:40,480 --> 00:18:44,799
talks about

00:18:41,679 --> 00:18:48,160
like from a structural perspective what

00:18:44,799 --> 00:18:50,400
changes would actually benefit us

00:18:48,160 --> 00:18:51,520
in in terms of being able to manage such

00:18:50,400 --> 00:18:55,520
a fleet of

00:18:51,520 --> 00:18:58,799
uh cf4 for kate's deployments so so not

00:18:55,520 --> 00:19:00,960
like looking at kind of

00:18:58,799 --> 00:19:02,799
single systems that are always single

00:19:00,960 --> 00:19:05,760
cluster and contain

00:19:02,799 --> 00:19:07,600
as i said uh the cf control plane plus

00:19:05,760 --> 00:19:10,880
cloud foundry applications but

00:19:07,600 --> 00:19:11,360
probably um something more sophisticated

00:19:10,880 --> 00:19:15,200
that

00:19:11,360 --> 00:19:16,000
might fit some of our use cases better

00:19:15,200 --> 00:19:18,640
than this

00:19:16,000 --> 00:19:20,960
like single cluster single cfocates

00:19:18,640 --> 00:19:24,640
deployment

00:19:20,960 --> 00:19:27,200
um and then yeah

00:19:24,640 --> 00:19:28,960
we are probably one of the extreme cases

00:19:27,200 --> 00:19:30,720
uh simon and then ibm

00:19:28,960 --> 00:19:32,480
are probably another of the extreme

00:19:30,720 --> 00:19:35,919
cases but even

00:19:32,480 --> 00:19:38,960
for kind of moderately sized cf

00:19:35,919 --> 00:19:42,080
on on vms deployments today

00:19:38,960 --> 00:19:44,240
um probably people will come to a

00:19:42,080 --> 00:19:46,720
realization that

00:19:44,240 --> 00:19:47,520
certain flexibility is is required and

00:19:46,720 --> 00:19:50,559
it's

00:19:47,520 --> 00:19:54,160
maybe not always um like

00:19:50,559 --> 00:19:56,240
the the most optimal use case to have

00:19:54,160 --> 00:19:58,160
very separate cfo cages clusters

00:19:56,240 --> 00:19:59,840
associated to a single kubernetes

00:19:58,160 --> 00:20:03,440
cluster

00:19:59,840 --> 00:20:07,120
um then this section actually

00:20:03,440 --> 00:20:10,080
came um or i introduced that based

00:20:07,120 --> 00:20:11,919
on a question from daniel jones who

00:20:10,080 --> 00:20:14,799
replied to

00:20:11,919 --> 00:20:15,760
my mail via the cfdef mailing list

00:20:14,799 --> 00:20:19,120
pointing

00:20:15,760 --> 00:20:21,039
to to that document and his question was

00:20:19,120 --> 00:20:25,120
was basically

00:20:21,039 --> 00:20:26,880
like how how bad quote-unquote is it now

00:20:25,120 --> 00:20:30,080
for operators to actually

00:20:26,880 --> 00:20:30,799
come from a bosch based world and being

00:20:30,080 --> 00:20:34,000
used to

00:20:30,799 --> 00:20:37,520
to wash ways of managing systems now

00:20:34,000 --> 00:20:38,240
moving over to something completely

00:20:37,520 --> 00:20:42,000
different

00:20:38,240 --> 00:20:44,720
um and basically this

00:20:42,000 --> 00:20:45,919
like bullet point list summarizes my my

00:20:44,720 --> 00:20:48,720
reply

00:20:45,919 --> 00:20:50,400
um so there's definitely that

00:20:48,720 --> 00:20:53,039
distinction between

00:20:50,400 --> 00:20:55,120
operators of a cloud foundry system and

00:20:53,039 --> 00:20:56,080
users of a cloud foundry system at least

00:20:55,120 --> 00:20:59,120
for us

00:20:56,080 --> 00:21:02,640
um providing a a managed service

00:20:59,120 --> 00:21:03,120
and um even within those two groups

00:21:02,640 --> 00:21:05,360
there's

00:21:03,120 --> 00:21:08,400
the subgroups so there's the people that

00:21:05,360 --> 00:21:09,679
are happy with cloud foundry as we have

00:21:08,400 --> 00:21:13,120
it today

00:21:09,679 --> 00:21:13,760
and for them things like just let me

00:21:13,120 --> 00:21:15,840
continue

00:21:13,760 --> 00:21:18,480
doing the workflows that that i run

00:21:15,840 --> 00:21:20,559
today are most important

00:21:18,480 --> 00:21:21,600
i think they're we are also then talking

00:21:20,559 --> 00:21:24,559
about

00:21:21,600 --> 00:21:25,200
like compatibility questions between uh

00:21:24,559 --> 00:21:28,400
cf on

00:21:25,200 --> 00:21:32,080
on vms and and cf4ks um but

00:21:28,400 --> 00:21:34,080
i think like these people

00:21:32,080 --> 00:21:35,679
probably couldn't care less about like

00:21:34,080 --> 00:21:38,080
running the cf

00:21:35,679 --> 00:21:40,400
instance that they are using on vms

00:21:38,080 --> 00:21:43,760
versus on kubernetes clusters

00:21:40,400 --> 00:21:46,640
ultimately um

00:21:43,760 --> 00:21:48,480
then there's people that tried probably

00:21:46,640 --> 00:21:51,360
cloud foundry before but

00:21:48,480 --> 00:21:54,080
felt or found that actually it cannot

00:21:51,360 --> 00:21:56,080
run their scenarios

00:21:54,080 --> 00:21:58,080
and some of those people have what what

00:21:56,080 --> 00:22:01,200
i would call mixed workloads so

00:21:58,080 --> 00:22:03,760
probably they have parts of

00:22:01,200 --> 00:22:04,799
like stateless applications microservice

00:22:03,760 --> 00:22:07,520
architectures

00:22:04,799 --> 00:22:07,840
12-factor applications all of that stuff

00:22:07,520 --> 00:22:10,640
and

00:22:07,840 --> 00:22:13,039
probably they would be able to run that

00:22:10,640 --> 00:22:16,240
part of their overall scenario

00:22:13,039 --> 00:22:18,240
on cloud foundry but then they might

00:22:16,240 --> 00:22:21,360
have additional things

00:22:18,240 --> 00:22:24,080
like they might have a need for an

00:22:21,360 --> 00:22:26,240
additional stateful service and

00:22:24,080 --> 00:22:27,679
maybe the provider of their choice

00:22:26,240 --> 00:22:30,080
doesn't offer that service

00:22:27,679 --> 00:22:32,799
in their service marketplace so they

00:22:30,080 --> 00:22:35,120
need to run that service somewhere

00:22:32,799 --> 00:22:36,960
and then like if if they are looking for

00:22:35,120 --> 00:22:40,559
a place to to run such a state

00:22:36,960 --> 00:22:41,520
full service then depending on where

00:22:40,559 --> 00:22:44,240
they actually run

00:22:41,520 --> 00:22:46,400
kubernetes might be a good place to to

00:22:44,240 --> 00:22:49,200
run that state full service and then

00:22:46,400 --> 00:22:51,200
depending on the ratio of how much

00:22:49,200 --> 00:22:53,200
operations effort is actually for them

00:22:51,200 --> 00:22:54,240
to run these stateful services that they

00:22:53,200 --> 00:22:56,680
manage themselves

00:22:54,240 --> 00:22:58,080
versus how much effort is it to

00:22:56,680 --> 00:23:00,080
[Music]

00:22:58,080 --> 00:23:01,280
maybe even next to it run a separate

00:23:00,080 --> 00:23:04,640
cloud foundry

00:23:01,280 --> 00:23:08,080
instance or like how much

00:23:04,640 --> 00:23:11,679
additional overhead is it to deal with

00:23:08,080 --> 00:23:14,640
cube ctl on on the one hand and then

00:23:11,679 --> 00:23:14,960
push the other hand and kind of trying

00:23:14,640 --> 00:23:18,320
to

00:23:14,960 --> 00:23:20,159
to mix and match those models um

00:23:18,320 --> 00:23:21,840
these people at times come to the

00:23:20,159 --> 00:23:24,320
realization that they also then

00:23:21,840 --> 00:23:27,039
ultimately run their stateless workloads

00:23:24,320 --> 00:23:29,039
on the kubernetes cluster where they run

00:23:27,039 --> 00:23:31,200
their stateful workloads

00:23:29,039 --> 00:23:33,039
i would say essentially if people come

00:23:31,200 --> 00:23:35,760
to that realization then

00:23:33,039 --> 00:23:38,000
at least today with only a vm based

00:23:35,760 --> 00:23:41,360
deployment with quote-unquote lost

00:23:38,000 --> 00:23:43,279
on these people for for

00:23:41,360 --> 00:23:44,480
kind of running their state less

00:23:43,279 --> 00:23:47,120
workloads on

00:23:44,480 --> 00:23:48,960
cloud foundry because there's no no way

00:23:47,120 --> 00:23:51,200
to actually

00:23:48,960 --> 00:23:53,360
like win them over so to speak for for

00:23:51,200 --> 00:23:56,480
the stateless parts

00:23:53,360 --> 00:24:00,320
um and and these people

00:23:56,480 --> 00:24:03,440
and i think that that's even

00:24:00,320 --> 00:24:06,080
like a difficult discussion uh for for

00:24:03,440 --> 00:24:07,440
us these people would probably want to

00:24:06,080 --> 00:24:09,679
have

00:24:07,440 --> 00:24:10,720
like a kubernetes cluster that they

00:24:09,679 --> 00:24:12,720
pretty much control

00:24:10,720 --> 00:24:14,559
themselves and then they want to have a

00:24:12,720 --> 00:24:16,240
way to

00:24:14,559 --> 00:24:18,080
in addition to the stuff that they do

00:24:16,240 --> 00:24:21,600
themselves with that kubernetes cluster

00:24:18,080 --> 00:24:22,159
just also cf push applications to that

00:24:21,600 --> 00:24:26,159
cluster

00:24:22,159 --> 00:24:28,480
and then maybe even have an ability to

00:24:26,159 --> 00:24:30,240
kind of use some kubernetes means to

00:24:28,480 --> 00:24:32,400
further

00:24:30,240 --> 00:24:34,400
tweak those applications and then it

00:24:32,400 --> 00:24:35,120
already or already gets very fluffy

00:24:34,400 --> 00:24:37,840
because then

00:24:35,120 --> 00:24:39,440
ultimately who owns these workloads

00:24:37,840 --> 00:24:41,919
these stateless applications

00:24:39,440 --> 00:24:44,080
is it then still the cloud foundry

00:24:41,919 --> 00:24:46,240
components or

00:24:44,080 --> 00:24:48,000
our cloud foundry components just a

00:24:46,240 --> 00:24:50,159
means to actually

00:24:48,000 --> 00:24:51,360
create kubernetes deployments and then

00:24:50,159 --> 00:24:54,000
afterwards

00:24:51,360 --> 00:24:56,080
those actually move to to the ownership

00:24:54,000 --> 00:24:58,000
of the people running that kubernetes

00:24:56,080 --> 00:25:00,559
cluster

00:24:58,000 --> 00:25:01,039
um so so that's that's probably one

00:25:00,559 --> 00:25:04,000
group

00:25:01,039 --> 00:25:05,760
then uh there's people that actually

00:25:04,000 --> 00:25:08,640
come from a kubernetes

00:25:05,760 --> 00:25:10,559
background and then at least today we we

00:25:08,640 --> 00:25:14,320
oftentimes hear that

00:25:10,559 --> 00:25:16,720
like running cloud foundry on vms looks

00:25:14,320 --> 00:25:18,960
too heavyweight for for them like too

00:25:16,720 --> 00:25:21,279
much resource requirements

00:25:18,960 --> 00:25:23,200
uh the need to to look into bosch as a

00:25:21,279 --> 00:25:24,720
lifecycle management tooling which is

00:25:23,200 --> 00:25:27,279
probably not too well known

00:25:24,720 --> 00:25:28,400
outside the cloud foundry or community

00:25:27,279 --> 00:25:31,120
etc

00:25:28,400 --> 00:25:32,240
so for them it would actually be be good

00:25:31,120 --> 00:25:35,520
to

00:25:32,240 --> 00:25:38,000
have a cloud foundry on kubernetes that

00:25:35,520 --> 00:25:42,000
feels as much as possible

00:25:38,000 --> 00:25:44,799
kubernetes is native and like doesn't

00:25:42,000 --> 00:25:46,480
look like like something else something

00:25:44,799 --> 00:25:49,840
that's that's not coming

00:25:46,480 --> 00:25:52,240
from from a kubernetes ecosystem um

00:25:49,840 --> 00:25:53,120
and then uh the the last one is actually

00:25:52,240 --> 00:25:56,480
something that

00:25:53,120 --> 00:25:59,120
that guillaume added in i'm not

00:25:56,480 --> 00:25:59,760
too familiar with with the use case

00:25:59,120 --> 00:26:03,440
there but

00:25:59,760 --> 00:26:05,520
my understanding is that um like he has

00:26:03,440 --> 00:26:09,120
a used case where

00:26:05,520 --> 00:26:11,679
he's pretty much running

00:26:09,120 --> 00:26:13,120
i would say the service marketplace of

00:26:11,679 --> 00:26:16,480
cloud foundry

00:26:13,120 --> 00:26:19,840
for people and and then um

00:26:16,480 --> 00:26:23,440
like provision services

00:26:19,840 --> 00:26:25,919
via that marketplace for multiple cloud

00:26:23,440 --> 00:26:29,039
foundry deployments

00:26:25,919 --> 00:26:30,080
um i i don't think that that i like very

00:26:29,039 --> 00:26:33,440
well described

00:26:30,080 --> 00:26:36,320
the use case that he has um

00:26:33,440 --> 00:26:38,960
talking to to him a bit more back then

00:26:36,320 --> 00:26:42,559
it kind of sounded like a scenario that

00:26:38,960 --> 00:26:44,240
we also have which is now that we have

00:26:42,559 --> 00:26:46,480
all those cloud foundry

00:26:44,240 --> 00:26:47,679
on kubernetes deployments how do we

00:26:46,480 --> 00:26:49,679
actually

00:26:47,679 --> 00:26:51,679
make sure that the service marketplace

00:26:49,679 --> 00:26:55,039
for each of those deployments

00:26:51,679 --> 00:26:55,919
get gets actually filled and and usually

00:26:55,039 --> 00:26:58,880
you want to fill

00:26:55,919 --> 00:27:00,000
that with like very similar things so

00:26:58,880 --> 00:27:02,400
probably all

00:27:00,000 --> 00:27:04,640
of these deployments want to be able to

00:27:02,400 --> 00:27:06,880
connect to some relational database

00:27:04,640 --> 00:27:08,159
probably all of these deployments want

00:27:06,880 --> 00:27:12,799
to have some message queue

00:27:08,159 --> 00:27:12,799
etc etc so um

00:27:13,039 --> 00:27:17,039
that's definitely a scenario that we

00:27:15,039 --> 00:27:19,600
also have where

00:27:17,039 --> 00:27:21,520
maybe those service marketplaces don't

00:27:19,600 --> 00:27:21,840
exist in isolation similar to how they

00:27:21,520 --> 00:27:25,039
don't

00:27:21,840 --> 00:27:26,000
exist in isolation uh today on a big cf

00:27:25,039 --> 00:27:28,000
on vm's

00:27:26,000 --> 00:27:30,240
deployment but but you want to have some

00:27:28,000 --> 00:27:32,399
means to to essentially

00:27:30,240 --> 00:27:35,440
manage those marketplaces in in a more

00:27:32,399 --> 00:27:38,720
holistic way

00:27:35,440 --> 00:27:43,039
so though those are kind of

00:27:38,720 --> 00:27:44,960
scenarios or personas if if you will

00:27:43,039 --> 00:27:46,399
um and then the rest of the document

00:27:44,960 --> 00:27:50,480
actually talks about

00:27:46,399 --> 00:27:52,559
a couple of some of them

00:27:50,480 --> 00:27:54,640
independent from from each other but

00:27:52,559 --> 00:27:56,799
some of them are actually being

00:27:54,640 --> 00:27:58,720
being connected and the first step that

00:27:56,799 --> 00:28:00,640
i've noted down is to actually

00:27:58,720 --> 00:28:02,960
separate the cloud foundry control plane

00:28:00,640 --> 00:28:05,840
from the cloud foundry applications

00:28:02,960 --> 00:28:06,640
so so essentially establishing what i

00:28:05,840 --> 00:28:09,600
previously

00:28:06,640 --> 00:28:10,399
in the glossary called a a workload

00:28:09,600 --> 00:28:12,640
cluster

00:28:10,399 --> 00:28:13,600
and then having the cloud foundry

00:28:12,640 --> 00:28:15,520
control plane

00:28:13,600 --> 00:28:18,240
running on a different kubernetes

00:28:15,520 --> 00:28:21,039
cluster um the reasoning for for that

00:28:18,240 --> 00:28:24,000
at least for us is to look into these

00:28:21,039 --> 00:28:27,360
scenarios that i mentioned before so

00:28:24,000 --> 00:28:29,200
um people that like anyways want to run

00:28:27,360 --> 00:28:31,360
something on a kubernetes cluster and

00:28:29,200 --> 00:28:32,960
want to have native access to that

00:28:31,360 --> 00:28:35,279
kubernetes cluster

00:28:32,960 --> 00:28:36,320
and if if we do that then obviously

00:28:35,279 --> 00:28:38,399
having

00:28:36,320 --> 00:28:40,159
a cloud foundry control plane running

00:28:38,399 --> 00:28:41,440
there opens up that cloud foundry

00:28:40,159 --> 00:28:44,799
control plane

00:28:41,440 --> 00:28:47,120
for all kinds of manipulation by

00:28:44,799 --> 00:28:48,399
these users of the kubernetes cluster so

00:28:47,120 --> 00:28:51,919
the assumption there is

00:28:48,399 --> 00:28:54,080
they have admin rights they could um if

00:28:51,919 --> 00:28:55,919
if they want delete all the cloud

00:28:54,080 --> 00:28:57,120
foundry control plane components like

00:28:55,919 --> 00:28:59,120
delete the

00:28:57,120 --> 00:29:01,600
entire kubernetes namespace and then

00:28:59,120 --> 00:29:04,480
probably the cloud foundry control plane

00:29:01,600 --> 00:29:04,880
component would be gone for good um and

00:29:04,480 --> 00:29:07,120
we

00:29:04,880 --> 00:29:08,399
as as a provider of a managed service

00:29:07,120 --> 00:29:12,080
obviously

00:29:08,399 --> 00:29:14,559
um wanna provide some kinds of of

00:29:12,080 --> 00:29:15,120
slas for the cloud foundry control plane

00:29:14,559 --> 00:29:17,200
so

00:29:15,120 --> 00:29:18,799
we ideally don't want to have that

00:29:17,200 --> 00:29:20,559
control plane

00:29:18,799 --> 00:29:22,640
visible at least from a kubernetes

00:29:20,559 --> 00:29:25,200
deployment perspective

00:29:22,640 --> 00:29:27,679
to the people that cf push applications

00:29:25,200 --> 00:29:30,080
but rather what we want is

00:29:27,679 --> 00:29:31,840
we want to hand out a cloud foundry api

00:29:30,080 --> 00:29:35,120
end point to these people

00:29:31,840 --> 00:29:38,159
and then ultimately these people

00:29:35,120 --> 00:29:40,000
want to see whatever they see of push

00:29:38,159 --> 00:29:41,600
showing up as additional kubernetes

00:29:40,000 --> 00:29:44,960
workloads on their cluster

00:29:41,600 --> 00:29:46,720
but we want to essentially uh prevent

00:29:44,960 --> 00:29:50,159
them from from manipulating the cloud

00:29:46,720 --> 00:29:50,159
foundry control plane itself

00:29:50,240 --> 00:29:53,279
in addition to that i could also imagine

00:29:52,399 --> 00:29:54,960
that

00:29:53,279 --> 00:29:57,919
they can actually share resources

00:29:54,960 --> 00:29:59,760
between different cf control plans

00:29:57,919 --> 00:30:01,360
like having one single kubernetes

00:29:59,760 --> 00:30:03,679
cluster right it's coming

00:30:01,360 --> 00:30:05,840
yeah that that's coming in in in the

00:30:03,679 --> 00:30:07,039
latest step of the document actually but

00:30:05,840 --> 00:30:09,679
yeah you're right

00:30:07,039 --> 00:30:10,399
that's then something that that that

00:30:09,679 --> 00:30:13,679
comes in top

00:30:10,399 --> 00:30:18,320
there um so

00:30:13,679 --> 00:30:20,960
and then i said in in an ideal world we

00:30:18,320 --> 00:30:22,000
we kind of don't want to have any

00:30:20,960 --> 00:30:24,559
managed assets

00:30:22,000 --> 00:30:25,600
in in that payload cluster instead we

00:30:24,559 --> 00:30:28,000
just want to run

00:30:25,600 --> 00:30:29,919
the cloud foundry applications there

00:30:28,000 --> 00:30:32,720
probably in reality

00:30:29,919 --> 00:30:34,559
on the way how ingress works in

00:30:32,720 --> 00:30:35,120
kubernetes and the way how service

00:30:34,559 --> 00:30:39,279
meshes

00:30:35,120 --> 00:30:41,520
are deployed to kubernetes uh we still

00:30:39,279 --> 00:30:43,360
might want to have something like an

00:30:41,520 --> 00:30:46,799
ingress controller

00:30:43,360 --> 00:30:49,279
a an istio etc etc running

00:30:46,799 --> 00:30:51,520
in in that cluster where also the cloud

00:30:49,279 --> 00:30:54,559
foundry applications are running

00:30:51,520 --> 00:30:58,799
as i said in an ideal world um

00:30:54,559 --> 00:30:59,919
we might want to avoid that but i think

00:30:58,799 --> 00:31:02,799
in reality today

00:30:59,919 --> 00:31:04,240
it's it's essentially unavoidable to to

00:31:02,799 --> 00:31:07,279
have some

00:31:04,240 --> 00:31:09,039
some of the the ingress logic running in

00:31:07,279 --> 00:31:11,679
the cluster that runs the cloud foundry

00:31:09,039 --> 00:31:11,679
applications

00:31:12,000 --> 00:31:18,080
um so so that is one then

00:31:15,039 --> 00:31:21,840
the other one is related to

00:31:18,080 --> 00:31:25,519
to scale and probably also isolation

00:31:21,840 --> 00:31:27,600
amongst other things so having um

00:31:25,519 --> 00:31:29,360
like once we have separated the cloud

00:31:27,600 --> 00:31:31,679
foundry control plane

00:31:29,360 --> 00:31:33,360
cluster from where cloud foundry

00:31:31,679 --> 00:31:35,919
applications are running

00:31:33,360 --> 00:31:36,960
then we envision having something like

00:31:35,919 --> 00:31:39,360
multiple

00:31:36,960 --> 00:31:41,120
kubernetes clusters running fleets of

00:31:39,360 --> 00:31:42,630
cloud foundry applications

00:31:41,120 --> 00:31:45,279
so similar to how we run

00:31:42,630 --> 00:31:47,600
[Music]

00:31:45,279 --> 00:31:48,960
very separated fleets of cloud foundry

00:31:47,600 --> 00:31:50,720
applications using

00:31:48,960 --> 00:31:52,559
isolation segments and therefore

00:31:50,720 --> 00:31:55,200
different sets of

00:31:52,559 --> 00:31:56,399
diego cells having something very

00:31:55,200 --> 00:31:58,240
similar

00:31:56,399 --> 00:32:00,159
on on the kubernetes side of the house

00:31:58,240 --> 00:32:02,880
still being able to use

00:32:00,159 --> 00:32:04,640
one cloud foundry control plane to

00:32:02,880 --> 00:32:07,279
ultimately operate those

00:32:04,640 --> 00:32:09,679
separate clusters and probably similar

00:32:07,279 --> 00:32:11,919
to how isolation segments do it

00:32:09,679 --> 00:32:13,360
um distinguish where cloud foundry

00:32:11,919 --> 00:32:17,360
applications end up

00:32:13,360 --> 00:32:20,399
via cloud foundry orgs and spaces

00:32:17,360 --> 00:32:23,360
um so so that's that's one

00:32:20,399 --> 00:32:24,080
one thing that that we envision and then

00:32:23,360 --> 00:32:26,480
like

00:32:24,080 --> 00:32:28,720
once we are in the scenario where the

00:32:26,480 --> 00:32:30,640
cloud foundry control plane is running

00:32:28,720 --> 00:32:32,559
on a separate kubernetes cluster

00:32:30,640 --> 00:32:33,760
you could again ask the question of like

00:32:32,559 --> 00:32:36,000
like is is that

00:32:33,760 --> 00:32:37,760
there a one-to-one relationship between

00:32:36,000 --> 00:32:40,640
the cloud foundry control plane and the

00:32:37,760 --> 00:32:43,120
kubernetes cluster or can we

00:32:40,640 --> 00:32:44,480
for example for for saving resources

00:32:43,120 --> 00:32:48,240
just now put

00:32:44,480 --> 00:32:49,039
multiple control planes working with

00:32:48,240 --> 00:32:51,440
with different

00:32:49,039 --> 00:32:52,720
payload clusters onto the same

00:32:51,440 --> 00:32:55,279
kubernetes cluster

00:32:52,720 --> 00:32:56,399
so essentially running multiple control

00:32:55,279 --> 00:32:59,279
planes

00:32:56,399 --> 00:33:02,080
next to each other on on the same uh

00:32:59,279 --> 00:33:02,080
kate's cluster

00:33:02,320 --> 00:33:06,799
which like probably then again from an

00:33:05,440 --> 00:33:09,600
operations perspective

00:33:06,799 --> 00:33:10,320
makes certain things easier i mean like

00:33:09,600 --> 00:33:12,880
also that

00:33:10,320 --> 00:33:13,760
definitely will will have its its limits

00:33:12,880 --> 00:33:17,440
so

00:33:13,760 --> 00:33:20,480
um i don't envision us to run all cloud

00:33:17,440 --> 00:33:24,159
foundry control planes of those

00:33:20,480 --> 00:33:26,240
hundreds and thousands of cf4k systems

00:33:24,159 --> 00:33:27,600
on on the very same single kubernetes

00:33:26,240 --> 00:33:29,039
cluster but at least

00:33:27,600 --> 00:33:30,640
there could be some some resource

00:33:29,039 --> 00:33:33,279
sharing there

00:33:30,640 --> 00:33:34,320
um next thing is is actually then having

00:33:33,279 --> 00:33:38,320
an ability and

00:33:34,320 --> 00:33:40,880
that that's mostly unrelated to to the

00:33:38,320 --> 00:33:42,960
previous chapters but having an ability

00:33:40,880 --> 00:33:44,880
to to actually hibernate the cloud

00:33:42,960 --> 00:33:48,480
foundry control plane

00:33:44,880 --> 00:33:51,600
uh the thought there is to that at least

00:33:48,480 --> 00:33:54,799
for us we we have clusters where there's

00:33:51,600 --> 00:33:55,519
quite a lot of cloud foundry rest api

00:33:54,799 --> 00:33:57,120
traffic

00:33:55,519 --> 00:33:59,279
because people are developing their

00:33:57,120 --> 00:34:02,159
applications there but but then there's

00:33:59,279 --> 00:34:04,159
also other clusters where maybe there's

00:34:02,159 --> 00:34:05,600
only limited api

00:34:04,159 --> 00:34:08,240
traffic towards the cloud foundry

00:34:05,600 --> 00:34:09,599
control plane so essentially productive

00:34:08,240 --> 00:34:12,240
clusters where

00:34:09,599 --> 00:34:14,560
updates are happening at specific time

00:34:12,240 --> 00:34:15,440
windows and probably not as frequently

00:34:14,560 --> 00:34:18,240
as

00:34:15,440 --> 00:34:20,240
uh in in the development scenario so so

00:34:18,240 --> 00:34:23,280
in those cases to

00:34:20,240 --> 00:34:24,560
kind of further save some resources one

00:34:23,280 --> 00:34:27,200
could think about

00:34:24,560 --> 00:34:29,200
the ability to essentially hibernate the

00:34:27,200 --> 00:34:32,720
cloud foundry control plane

00:34:29,200 --> 00:34:35,679
and um i think i've talked to

00:34:32,720 --> 00:34:36,079
to the irene team during one of the

00:34:35,679 --> 00:34:38,079
still

00:34:36,079 --> 00:34:40,240
in person cloud foundry summits

00:34:38,079 --> 00:34:43,200
basically asking the question

00:34:40,240 --> 00:34:44,320
like what of the irene infrastructure

00:34:43,200 --> 00:34:47,599
actually

00:34:44,320 --> 00:34:48,000
needs to run to make sure that the cloud

00:34:47,599 --> 00:34:50,240
foundry

00:34:48,000 --> 00:34:51,440
application actually keeps running or if

00:34:50,240 --> 00:34:53,359
it's deployed on

00:34:51,440 --> 00:34:55,200
on a kubernetes cluster and at least

00:34:53,359 --> 00:34:57,200
back then the answer was

00:34:55,200 --> 00:34:58,960
none of it because essentially

00:34:57,200 --> 00:35:02,079
kubernetes itself

00:34:58,960 --> 00:35:04,720
makes sure to help manage the cloud

00:35:02,079 --> 00:35:07,119
foundry application itself so if if

00:35:04,720 --> 00:35:09,440
that's still the case then one could

00:35:07,119 --> 00:35:10,800
indeed think about kind of hibernating

00:35:09,440 --> 00:35:13,599
or shutting down the

00:35:10,800 --> 00:35:15,359
cloud foundry control plane and only

00:35:13,599 --> 00:35:17,040
quote unquote waking it up when it's

00:35:15,359 --> 00:35:20,000
actually required so

00:35:17,040 --> 00:35:21,920
whenever you do a cf push or a cf scale

00:35:20,000 --> 00:35:25,040
or things like that

00:35:21,920 --> 00:35:26,880
um and then obviously in times of

00:35:25,040 --> 00:35:29,520
serverless you could think about

00:35:26,880 --> 00:35:31,040
kind of on demand wake up of the control

00:35:29,520 --> 00:35:33,599
plane so essentially

00:35:31,040 --> 00:35:35,359
only if an api request comes in wake up

00:35:33,599 --> 00:35:39,040
the whole thing which then

00:35:35,359 --> 00:35:41,359
obviously needs to to happen in a couple

00:35:39,040 --> 00:35:43,680
of seconds rather than minutes

00:35:41,359 --> 00:35:46,320
um process that request and then

00:35:43,680 --> 00:35:51,599
shutting down the control plane again

00:35:46,320 --> 00:35:55,040
so kind of an optimization of some sort

00:35:51,599 --> 00:35:58,160
um and then last

00:35:55,040 --> 00:36:00,160
but not least um

00:35:58,160 --> 00:36:01,200
there's also like from a management

00:36:00,160 --> 00:36:03,599
perspective

00:36:01,200 --> 00:36:04,880
at least today that there's this

00:36:03,599 --> 00:36:08,000
stateful thing

00:36:04,880 --> 00:36:10,320
um kind of next to kubernetes being a

00:36:08,000 --> 00:36:12,320
stateful thing and using etcd

00:36:10,320 --> 00:36:14,400
uh when you deploy cfo kates you still

00:36:12,320 --> 00:36:17,040
need your relational database for

00:36:14,400 --> 00:36:18,000
the cloud controller and ua persistency

00:36:17,040 --> 00:36:21,040
so

00:36:18,000 --> 00:36:23,040
in an ideal world one

00:36:21,040 --> 00:36:24,079
would also hope to essentially just

00:36:23,040 --> 00:36:26,079
reuse

00:36:24,079 --> 00:36:27,119
the stateful kubernetes persistency so

00:36:26,079 --> 00:36:29,839
etcd

00:36:27,119 --> 00:36:30,880
for storing the entities that are

00:36:29,839 --> 00:36:32,880
ultimately

00:36:30,880 --> 00:36:34,240
persisted via the cloud foundry control

00:36:32,880 --> 00:36:36,160
plane so

00:36:34,240 --> 00:36:39,119
like all the usual suspects and i think

00:36:36,160 --> 00:36:41,839
we've talked about the topic uh before

00:36:39,119 --> 00:36:41,839
in earlier

00:36:42,400 --> 00:36:48,560
incarnations of the sick call so trying

00:36:45,760 --> 00:36:50,400
to to store cloud foundry entities like

00:36:48,560 --> 00:36:54,160
orgs and spaces and apps

00:36:50,400 --> 00:36:58,560
as custom resources on kubernetes

00:36:54,160 --> 00:36:59,800
ultimately in etcd might relieve us from

00:36:58,560 --> 00:37:02,400
essentially dealing with two

00:36:59,800 --> 00:37:04,400
persistencies so getting rid

00:37:02,400 --> 00:37:08,800
ultimately of the relation of the

00:37:04,400 --> 00:37:11,760
database of cloud foundry itself

00:37:08,800 --> 00:37:12,640
so yeah as i said like like some of

00:37:11,760 --> 00:37:15,680
those

00:37:12,640 --> 00:37:18,560
um chapters are are a bit related

00:37:15,680 --> 00:37:20,960
some some are unrelated some you can

00:37:18,560 --> 00:37:23,680
kind of do in isolations

00:37:20,960 --> 00:37:24,640
isolation others just make sense if if

00:37:23,680 --> 00:37:27,440
you combine them

00:37:24,640 --> 00:37:28,400
and have like a certain logical order of

00:37:27,440 --> 00:37:31,359
steps but

00:37:28,400 --> 00:37:33,440
these um ultimately where were ideas

00:37:31,359 --> 00:37:35,520
that that came to my mind and

00:37:33,440 --> 00:37:37,440
probably i forgot that at the very

00:37:35,520 --> 00:37:40,720
beginning of the document

00:37:37,440 --> 00:37:43,119
all of that is is definitely like

00:37:40,720 --> 00:37:45,280
from a timeline perspective further away

00:37:43,119 --> 00:37:46,320
than probably many other topics that

00:37:45,280 --> 00:37:49,520
people have in mind

00:37:46,320 --> 00:37:53,119
for uh cfo cates but i wanted to

00:37:49,520 --> 00:37:55,520
to actually write these things down to

00:37:53,119 --> 00:37:57,920
hopefully inspire like the thought

00:37:55,520 --> 00:38:01,680
process around those topics and

00:37:57,920 --> 00:38:02,960
if certain like basic decisions are

00:38:01,680 --> 00:38:05,920
taking

00:38:02,960 --> 00:38:07,040
taken or having these items in mind to

00:38:05,920 --> 00:38:10,960
basically say

00:38:07,040 --> 00:38:13,920
do we go left or right because we might

00:38:10,960 --> 00:38:17,520
enable or prevent certain of these

00:38:13,920 --> 00:38:19,920
evolutionary steps from from happening

00:38:17,520 --> 00:38:21,280
um so that was essentially the main part

00:38:19,920 --> 00:38:26,880
of the document then there's

00:38:21,280 --> 00:38:28,000
two um two chapters or two paragraphs of

00:38:26,880 --> 00:38:31,280
side notes

00:38:28,000 --> 00:38:33,119
so um first of all what one is

00:38:31,280 --> 00:38:35,200
about the resource consumption of the

00:38:33,119 --> 00:38:39,280
cloud foundry control plane

00:38:35,200 --> 00:38:41,520
um that that at least

00:38:39,280 --> 00:38:42,800
when i wrote the document was still

00:38:41,520 --> 00:38:46,400
pretty heavyweight even

00:38:42,800 --> 00:38:48,240
for cf for cates i understand that

00:38:46,400 --> 00:38:50,160
like there's more lightweight

00:38:48,240 --> 00:38:52,960
deployments of

00:38:50,160 --> 00:38:54,800
especially the cfocates control plane

00:38:52,960 --> 00:38:59,040
these days where you

00:38:54,800 --> 00:39:00,960
for example don't deploy

00:38:59,040 --> 00:39:04,000
um control plane components in a

00:39:00,960 --> 00:39:05,520
redundant way but just as a singletons

00:39:04,000 --> 00:39:06,960
which is probably fine for some

00:39:05,520 --> 00:39:08,240
scenarios because you still have

00:39:06,960 --> 00:39:12,160
kubernetes

00:39:08,240 --> 00:39:15,760
trying to revive certain components if

00:39:12,160 --> 00:39:17,599
they are falling down so um

00:39:15,760 --> 00:39:19,280
having that in in a more lightweight

00:39:17,599 --> 00:39:22,640
fashion is is definitely

00:39:19,280 --> 00:39:24,960
beneficial also for this kind of

00:39:22,640 --> 00:39:26,079
quote-unquote mass market of hosting

00:39:24,960 --> 00:39:29,119
many many of

00:39:26,079 --> 00:39:29,839
uh cfocate's instances and then last but

00:39:29,119 --> 00:39:32,320
not least

00:39:29,839 --> 00:39:34,560
i mentioned that also during the intro

00:39:32,320 --> 00:39:37,599
compatibility is is definitely

00:39:34,560 --> 00:39:39,760
another topic that's um

00:39:37,599 --> 00:39:41,119
that that needs needs to to

00:39:39,760 --> 00:39:44,160
[Music]

00:39:41,119 --> 00:39:44,960
have focus so that actually we we can

00:39:44,160 --> 00:39:48,560
see

00:39:44,960 --> 00:39:52,000
that move of of people from um using

00:39:48,560 --> 00:39:55,200
uh cf on on vms today over to

00:39:52,000 --> 00:39:57,680
to cf4 gates so

00:39:55,200 --> 00:39:58,560
um not not the real core of of this

00:39:57,680 --> 00:40:00,960
document but

00:39:58,560 --> 00:40:02,000
important ingredients for like an

00:40:00,960 --> 00:40:04,960
overall story

00:40:02,000 --> 00:40:06,079
um moving people over from where they

00:40:04,960 --> 00:40:08,839
are probably today

00:40:06,079 --> 00:40:10,960
over to the kubernetes-based cloud

00:40:08,839 --> 00:40:14,240
formally

00:40:10,960 --> 00:40:16,319
and with that i believe that was

00:40:14,240 --> 00:40:19,119
kind of a summary of the document maybe

00:40:16,319 --> 00:40:19,119
a little bit longer

00:40:20,000 --> 00:40:25,839
any thoughts feedback questions

00:40:32,240 --> 00:40:36,800
first and foremost thank you for putting

00:40:33,920 --> 00:40:39,119
it together because i think

00:40:36,800 --> 00:40:40,319
that has been a very valuable exercise

00:40:39,119 --> 00:40:43,920
already

00:40:40,319 --> 00:40:45,839
um i mean i all the thoughts that i have

00:40:43,920 --> 00:40:47,839
around this i think i already either

00:40:45,839 --> 00:40:48,640
added as comments or we spoke about this

00:40:47,839 --> 00:40:52,800
so this is

00:40:48,640 --> 00:40:56,079
almost almost 100 percent aligned with

00:40:52,800 --> 00:40:58,960
uh you know ibm's thinking on on these

00:40:56,079 --> 00:41:00,160
these particular points um and from that

00:40:58,960 --> 00:41:02,160
perspective

00:41:00,160 --> 00:41:05,599
there is nothing more to add than that

00:41:02,160 --> 00:41:09,280
but what already has been said

00:41:05,599 --> 00:41:11,440
simon it's troy um is the multi-cluster

00:41:09,280 --> 00:41:12,640
approach for workloads similar to the

00:41:11,440 --> 00:41:16,160
work that went on

00:41:12,640 --> 00:41:21,200
um in qcf with diego

00:41:16,160 --> 00:41:23,280
is that the same use case for you guys

00:41:21,200 --> 00:41:24,400
pretty much the same yes i mean the

00:41:23,280 --> 00:41:28,560
point is and i think this is

00:41:24,400 --> 00:41:30,720
like burn said this in the beginning um

00:41:28,560 --> 00:41:32,560
really like although i know every cloud

00:41:30,720 --> 00:41:34,480
vendor basically says hey you can run an

00:41:32,560 --> 00:41:36,160
infinite size kubernetes cluster and we

00:41:34,480 --> 00:41:39,520
all know they're lying right

00:41:36,160 --> 00:41:41,200
so yeah um so there is some kind of a

00:41:39,520 --> 00:41:43,200
an upper limit and whether that upper

00:41:41,200 --> 00:41:45,040
limit is like 200 machines or 300

00:41:43,200 --> 00:41:46,560
machines or 400 machines at the end of

00:41:45,040 --> 00:41:48,960
the day doesn't really matter

00:41:46,560 --> 00:41:49,839
right so if you have to run a deployment

00:41:48,960 --> 00:41:51,520
that ha

00:41:49,839 --> 00:41:53,280
from a capacity requirement just

00:41:51,520 --> 00:41:55,760
requires more than those 400

00:41:53,280 --> 00:41:57,359
machines you just have to split them up

00:41:55,760 --> 00:41:58,000
and and it does really matter if you're

00:41:57,359 --> 00:42:00,160
doing this

00:41:58,000 --> 00:42:01,839
uh through diego in in the coop cf world

00:42:00,160 --> 00:42:02,800
or if you if you have to do it through

00:42:01,839 --> 00:42:05,599
irene in the

00:42:02,800 --> 00:42:07,440
cfrcats world or any other technology so

00:42:05,599 --> 00:42:08,319
so yes the requirement is essentially

00:42:07,440 --> 00:42:10,079
the same

00:42:08,319 --> 00:42:11,920
the way how to drive this i think is

00:42:10,079 --> 00:42:12,800
slightly different but it's the same use

00:42:11,920 --> 00:42:15,520
case

00:42:12,800 --> 00:42:17,040
yeah and is that in that sorry and it's

00:42:15,520 --> 00:42:17,920
just so i can wrap my head around it is

00:42:17,040 --> 00:42:20,720
it in the purview

00:42:17,920 --> 00:42:22,240
of the scheduler like irani or diego or

00:42:20,720 --> 00:42:25,520
is it one level up

00:42:22,240 --> 00:42:29,599
in cappy that allocates

00:42:25,520 --> 00:42:31,680
where the workload's gonna run

00:42:29,599 --> 00:42:33,839
that is essentially that that second

00:42:31,680 --> 00:42:36,160
paragraph here so when when i

00:42:33,839 --> 00:42:38,560
wrote it down i received the feedback

00:42:36,160 --> 00:42:40,240
that like there might be multiple places

00:42:38,560 --> 00:42:43,920
where you could actually do that

00:42:40,240 --> 00:42:46,720
one is definitely within irene kind of

00:42:43,920 --> 00:42:49,760
talking to the kubernetes api directly

00:42:46,720 --> 00:42:53,760
the other one could be in copy um

00:42:49,760 --> 00:42:55,040
and that's like two alternative options

00:42:53,760 --> 00:42:58,880
but but it has

00:42:55,040 --> 00:42:59,520
like it when you look at it technically

00:42:58,880 --> 00:43:01,359
troy

00:42:59,520 --> 00:43:03,520
um it's it's a chicken and egg problem

00:43:01,359 --> 00:43:05,599
right because if you do it in happy

00:43:03,520 --> 00:43:07,359
like just forget about diego for the

00:43:05,599 --> 00:43:09,599
moment just think about irini

00:43:07,359 --> 00:43:11,200
if you do it in cappy um you would then

00:43:09,599 --> 00:43:13,119
have to make sure that kathy can talk to

00:43:11,200 --> 00:43:15,359
multiple irenes because an irene would

00:43:13,119 --> 00:43:16,079
then be cluster scoped so to speak yes

00:43:15,359 --> 00:43:18,079
right

00:43:16,079 --> 00:43:19,920
um and and that might be an

00:43:18,079 --> 00:43:21,440
implementation option if we decide that

00:43:19,920 --> 00:43:24,240
that's the right way to go

00:43:21,440 --> 00:43:26,480
um but on the other hand if you do if

00:43:24,240 --> 00:43:28,480
you have an irini if you do it in irene

00:43:26,480 --> 00:43:30,400
then the i really would be not cluster

00:43:28,480 --> 00:43:32,400
scoped it would be control plane scope

00:43:30,400 --> 00:43:34,079
so to speak but needs to know how to

00:43:32,400 --> 00:43:35,040
talk to multiple backend clusters in

00:43:34,079 --> 00:43:38,480
this day so

00:43:35,040 --> 00:43:40,560
um it's two options and you know

00:43:38,480 --> 00:43:41,680
one has as much advantages over the

00:43:40,560 --> 00:43:45,839
other than

00:43:41,680 --> 00:43:47,920
visa versa depending on use cases we

00:43:45,839 --> 00:43:49,119
actually even might need multiple right

00:43:47,920 --> 00:43:51,200
i mean if you

00:43:49,119 --> 00:43:52,440
if you would use this kind of thing to

00:43:51,200 --> 00:43:56,000
have a

00:43:52,440 --> 00:44:00,880
multi-tenant cf control plane

00:43:56,000 --> 00:44:02,880
um to like share resources in in that

00:44:00,880 --> 00:44:04,160
then you would give the control of where

00:44:02,880 --> 00:44:05,920
to run these things

00:44:04,160 --> 00:44:08,000
some like with isolation segments

00:44:05,920 --> 00:44:08,480
basically somehow to the to the user

00:44:08,000 --> 00:44:10,560
right

00:44:08,480 --> 00:44:11,520
who needs isolation segments they are

00:44:10,560 --> 00:44:13,200
assigned to

00:44:11,520 --> 00:44:15,280
to organizations and the other thing

00:44:13,200 --> 00:44:16,560
would be where this is completely

00:44:15,280 --> 00:44:19,920
transparent where

00:44:16,560 --> 00:44:22,480
some kind of cf control plane just just

00:44:19,920 --> 00:44:23,760
schedules that thing to to where space

00:44:22,480 --> 00:44:26,400
is available

00:44:23,760 --> 00:44:27,599
if you throw isolation segments in there

00:44:26,400 --> 00:44:30,560
the the picture gets

00:44:27,599 --> 00:44:30,880
even more complicated i i agree all

00:44:30,560 --> 00:44:33,839
right

00:44:30,880 --> 00:44:35,599
so um i mean i i think when i answered

00:44:33,839 --> 00:44:37,200
troy's question i wasn't thinking about

00:44:35,599 --> 00:44:38,160
isolation segments in particular i was

00:44:37,200 --> 00:44:40,319
just thinking about

00:44:38,160 --> 00:44:43,359
one huge multi-tenant system with no

00:44:40,319 --> 00:44:43,359
isolation in between

00:44:43,520 --> 00:44:48,079
but isolation segments is the is one of

00:44:46,480 --> 00:44:49,440
the biggest use cases for this right

00:44:48,079 --> 00:44:52,960
when you have tenants that

00:44:49,440 --> 00:44:54,960
want um to have all of their stuff and

00:44:52,960 --> 00:44:57,280
one kubernetes cluster separate from

00:44:54,960 --> 00:44:59,839
everyone else one use case like

00:44:57,280 --> 00:45:01,920
for example when i look at ibm's big

00:44:59,839 --> 00:45:04,720
public deployment and i'm not sure

00:45:01,920 --> 00:45:06,240
about saps one but in ibm's big public

00:45:04,720 --> 00:45:08,079
deployment

00:45:06,240 --> 00:45:09,599
for example we don't offer isolation

00:45:08,079 --> 00:45:10,880
segments today

00:45:09,599 --> 00:45:13,119
and we would still have the same

00:45:10,880 --> 00:45:16,160
requirement simply because the size

00:45:13,119 --> 00:45:19,200
is gonna be you know

00:45:16,160 --> 00:45:20,960
a four digit number of cells today and

00:45:19,200 --> 00:45:22,480
we just cannot squeeze it in one

00:45:20,960 --> 00:45:24,960
cluster independent whether we want to

00:45:22,480 --> 00:45:28,160
isolate a tenant or not

00:45:24,960 --> 00:45:30,880
so yes it is it's it's certainly um

00:45:28,160 --> 00:45:32,319
another isolation segments are certainly

00:45:30,880 --> 00:45:33,920
another use case for having

00:45:32,319 --> 00:45:36,720
such a multi-cluster support but it's

00:45:33,920 --> 00:45:39,920
not the only one

00:45:36,720 --> 00:45:41,920
yeah i mean

00:45:39,920 --> 00:45:43,200
plus obviously like the whole

00:45:41,920 --> 00:45:48,000
conversation around

00:45:43,200 --> 00:45:50,560
how well our workloads actually isolated

00:45:48,000 --> 00:45:51,680
in today's cloud foundry versus how well

00:45:50,560 --> 00:45:53,920
can you isolate

00:45:51,680 --> 00:45:54,960
workloads on kubernetes where i

00:45:53,920 --> 00:45:59,280
frequently

00:45:54,960 --> 00:46:01,359
like have discussions around you have

00:45:59,280 --> 00:46:03,359
requests and limits et cetera et cetera

00:46:01,359 --> 00:46:07,760
and then i usually ask and what about

00:46:03,359 --> 00:46:07,760
network ingress and egress i mean

00:46:08,880 --> 00:46:15,280
cloud on vms right but um

00:46:13,520 --> 00:46:16,720
having that possibility to actually

00:46:15,280 --> 00:46:18,640
isolate things

00:46:16,720 --> 00:46:21,119
from from a network perspective is is

00:46:18,640 --> 00:46:24,240
definitely something that that i feel is

00:46:21,119 --> 00:46:27,760
is lacking like in today's cf as

00:46:24,240 --> 00:46:30,640
well as if you look at um

00:46:27,760 --> 00:46:30,640
deployments today

00:46:32,880 --> 00:46:38,000
are you thinking about um just the

00:46:35,920 --> 00:46:39,440
kind of intrinsic network isolation of

00:46:38,000 --> 00:46:39,920
those workloads like where they might

00:46:39,440 --> 00:46:42,880
all be

00:46:39,920 --> 00:46:44,240
you know intermixed on uh on the same

00:46:42,880 --> 00:46:46,960
network or are you thinking about

00:46:44,240 --> 00:46:46,960
ingress traffic

00:46:47,119 --> 00:46:51,359
well actually actually like

00:46:50,000 --> 00:46:54,079
multi-tenancy on

00:46:51,359 --> 00:46:56,240
on the network right so i like in the

00:46:54,079 --> 00:46:58,800
ideal world you would even

00:46:56,240 --> 00:46:59,680
within a tenant be able to say this cf

00:46:58,800 --> 00:47:02,400
application

00:46:59,680 --> 00:47:03,440
gets this slice of the available network

00:47:02,400 --> 00:47:07,040
but

00:47:03,440 --> 00:47:09,680
like even being able to to shield

00:47:07,040 --> 00:47:10,400
potentially malicious tenants from each

00:47:09,680 --> 00:47:13,119
other

00:47:10,400 --> 00:47:13,920
is i think something that's like

00:47:13,119 --> 00:47:16,319
difficult

00:47:13,920 --> 00:47:16,319
usually

00:47:21,440 --> 00:47:25,920
yeah i guess with with the existing

00:47:23,200 --> 00:47:28,079
isolation segments you know there's

00:47:25,920 --> 00:47:29,359
it's a much more advanced configuration

00:47:28,079 --> 00:47:31,680
but you know we've got

00:47:29,359 --> 00:47:33,359
uh router groups and the ability of

00:47:31,680 --> 00:47:36,240
having even different

00:47:33,359 --> 00:47:38,240
deployments of go routers designated for

00:47:36,240 --> 00:47:41,440
that but i could i could definitely

00:47:38,240 --> 00:47:44,480
see this enabling um

00:47:41,440 --> 00:47:48,000
more of that same kind of topology

00:47:44,480 --> 00:47:50,839
where you'd both have uh workloads and

00:47:48,000 --> 00:47:52,000
uh appropriately configured ingress

00:47:50,839 --> 00:47:54,960
gateways

00:47:52,000 --> 00:47:57,040
uh for that traffic isolated to you know

00:47:54,960 --> 00:47:59,839
one or more kubernetes clusters

00:47:57,040 --> 00:48:01,920
um and i guess i could definitely see

00:47:59,839 --> 00:48:04,000
one of the benefits here being that

00:48:01,920 --> 00:48:06,480
you know a tenant could potentially even

00:48:04,000 --> 00:48:09,760
bring their own kubernetes cluster

00:48:06,480 --> 00:48:11,680
and register it and say hey this can be

00:48:09,760 --> 00:48:12,960
associated with you know this isolation

00:48:11,680 --> 00:48:14,720
segment which the

00:48:12,960 --> 00:48:16,160
administrator and the cf control plane

00:48:14,720 --> 00:48:17,839
is creating

00:48:16,160 --> 00:48:19,680
but then you know something whether

00:48:17,839 --> 00:48:20,000
that's configuration cappy or ireney

00:48:19,680 --> 00:48:23,839
wherever

00:48:20,000 --> 00:48:25,680
the branching point makes sense ends up

00:48:23,839 --> 00:48:27,200
saying all right well you know i'm now

00:48:25,680 --> 00:48:27,760
going to bottom out in this kubernetes

00:48:27,200 --> 00:48:29,839
cluster

00:48:27,760 --> 00:48:31,680
so here's the interface contract you

00:48:29,839 --> 00:48:33,839
know i'm going to make these resources

00:48:31,680 --> 00:48:37,599
in the cluster

00:48:33,839 --> 00:48:39,280
and i'm going to expect maybe that that

00:48:37,599 --> 00:48:41,280
an interest gateway is going to exist

00:48:39,280 --> 00:48:42,400
there or is configurable and dns is

00:48:41,280 --> 00:48:43,119
going to point to that and then it would

00:48:42,400 --> 00:48:44,640
cut that

00:48:43,119 --> 00:48:46,480
that whole control plane out of the data

00:48:44,640 --> 00:48:48,480
plane entirely yeah

00:48:46,480 --> 00:48:50,480
i like the idea of mapping it to uh

00:48:48,480 --> 00:48:53,760
isolation segments actually

00:48:50,480 --> 00:48:55,599
it it seems to be the because we i

00:48:53,760 --> 00:48:57,440
i was also given given in that it's the

00:48:55,599 --> 00:48:59,680
nail that we have uh

00:48:57,440 --> 00:49:01,440
it's kind of that hammer we have you

00:48:59,680 --> 00:49:02,400
know let's let's put those nails in with

00:49:01,440 --> 00:49:04,319
it

00:49:02,400 --> 00:49:05,839
yeah well what i had initially thought

00:49:04,319 --> 00:49:09,119
was they should be

00:49:05,839 --> 00:49:10,800
um uh mapped to namespaces and

00:49:09,119 --> 00:49:12,400
kubernetes

00:49:10,800 --> 00:49:14,160
that was before i started learning about

00:49:12,400 --> 00:49:15,359
some of the size limitations in

00:49:14,160 --> 00:49:18,640
kubernetes that were gonna

00:49:15,359 --> 00:49:19,839
bite us and the porousness of

00:49:18,640 --> 00:49:22,240
not not really the poorestness of

00:49:19,839 --> 00:49:22,640
namespaces but the like ingress is a

00:49:22,240 --> 00:49:25,119
good

00:49:22,640 --> 00:49:26,880
is a good point like an ingress for a

00:49:25,119 --> 00:49:28,960
kubernetes cluster makes sense an

00:49:26,880 --> 00:49:33,119
ingress for a namespace

00:49:28,960 --> 00:49:36,319
makes maybe less sense um so

00:49:33,119 --> 00:49:39,119
yeah would does that sound like a good

00:49:36,319 --> 00:49:39,920
mapping berth you didn't seem keen on

00:49:39,119 --> 00:49:43,599
that

00:49:39,920 --> 00:49:46,559
uh on overloading isolation

00:49:43,599 --> 00:49:48,720
isolation segments no not necessarily i

00:49:46,559 --> 00:49:48,720
mean

00:49:48,880 --> 00:49:52,400
i actually put down here that ideally

00:49:51,680 --> 00:49:54,720
like this

00:49:52,400 --> 00:49:56,079
would be enabled using the isolation

00:49:54,720 --> 00:49:59,599
segment method before

00:49:56,079 --> 00:50:03,440
i should i should read more closely yes

00:49:59,599 --> 00:50:04,160
because like what i like about isolation

00:50:03,440 --> 00:50:06,800
segments

00:50:04,160 --> 00:50:06,800
is that

00:50:07,440 --> 00:50:10,960
you still have a certain amount of

00:50:09,359 --> 00:50:13,760
flexibility right you could

00:50:10,960 --> 00:50:15,440
introduce an isolation segment later on

00:50:13,760 --> 00:50:16,240
and you could kind of move a cloud

00:50:15,440 --> 00:50:18,240
foundry or

00:50:16,240 --> 00:50:19,440
from one isolation segment to another

00:50:18,240 --> 00:50:21,280
one and then

00:50:19,440 --> 00:50:23,440
i'm not entirely sure what would happen

00:50:21,280 --> 00:50:24,559
to existing apps but i believe like that

00:50:23,440 --> 00:50:27,520
would only kick in

00:50:24,559 --> 00:50:29,440
if you see a push the next time if i'm

00:50:27,520 --> 00:50:31,200
not mistaken and that's

00:50:29,440 --> 00:50:34,319
actually quite some some flexibility

00:50:31,200 --> 00:50:34,319
that this would enable

00:50:36,319 --> 00:50:40,000
plus i i also found that i'm not sure

00:50:38,640 --> 00:50:42,880
how recent that

00:50:40,000 --> 00:50:44,880
that feature actually is that like even

00:50:42,880 --> 00:50:48,240
as an organ manager you could

00:50:44,880 --> 00:50:50,319
decide to choose one of the isolation

00:50:48,240 --> 00:50:51,200
segments that's available to you so it's

00:50:50,319 --> 00:50:54,160
not

00:50:51,200 --> 00:50:55,320
an admin only feature to to do that

00:50:54,160 --> 00:50:57,920
assignment

00:50:55,320 --> 00:51:00,400
[Music]

00:50:57,920 --> 00:51:01,680
no i like this but uh it also uh there

00:51:00,400 --> 00:51:05,680
is also the other

00:51:01,680 --> 00:51:06,400
model where um like ibm clouds model

00:51:05,680 --> 00:51:09,280
where

00:51:06,400 --> 00:51:11,040
each tenant gets their own cloud foundry

00:51:09,280 --> 00:51:15,760
um

00:51:11,040 --> 00:51:17,839
and that's sort of the the

00:51:15,760 --> 00:51:19,280
headspace that that stratos built the

00:51:17,839 --> 00:51:20,640
interface on the multi-endpoint

00:51:19,280 --> 00:51:23,119
interface on where

00:51:20,640 --> 00:51:24,960
we envisaged you would be connecting to

00:51:23,119 --> 00:51:28,800
possibly numerous

00:51:24,960 --> 00:51:31,920
um cloud foundry uh api endpoints

00:51:28,800 --> 00:51:33,760
and they might be tied together with uh

00:51:31,920 --> 00:51:35,839
the same uaa or they might be tied

00:51:33,760 --> 00:51:36,960
together in the back end of the uaa with

00:51:35,839 --> 00:51:40,480
the same

00:51:36,960 --> 00:51:43,680
identity provider so there's kind of

00:51:40,480 --> 00:51:43,680
more than one way to do it

00:51:46,640 --> 00:51:51,119
i mean i can imagine that the isolation

00:51:49,359 --> 00:51:53,440
segments is a good way to

00:51:51,119 --> 00:51:54,960
actually allow customers to configure

00:51:53,440 --> 00:51:57,839
stuff like that like eric said

00:51:54,960 --> 00:51:58,800
when they bring a cluster um but i'm not

00:51:57,839 --> 00:52:00,720
sure if we should

00:51:58,800 --> 00:52:02,240
enforce that as the only mechanism

00:52:00,720 --> 00:52:04,720
because that would mean that for

00:52:02,240 --> 00:52:07,920
scaling like i mean imagining somebody

00:52:04,720 --> 00:52:09,680
pushes that many cf apps to a single org

00:52:07,920 --> 00:52:11,119
that they don't fit into a single

00:52:09,680 --> 00:52:13,119
cluster

00:52:11,119 --> 00:52:15,119
that would be a scale boundary that we

00:52:13,119 --> 00:52:16,960
hit that like the customer then has to

00:52:15,119 --> 00:52:20,559
actually introduce a second

00:52:16,960 --> 00:52:22,640
isolation segment instead of

00:52:20,559 --> 00:52:24,640
being transparent in that so i'm not

00:52:22,640 --> 00:52:27,359
sure if we should uh

00:52:24,640 --> 00:52:28,000
put that in in a single place so to say

00:52:27,359 --> 00:52:30,400
like we could

00:52:28,000 --> 00:52:31,280
actually have irini with a rather

00:52:30,400 --> 00:52:34,319
generic

00:52:31,280 --> 00:52:35,520
scheduling mechanism that you can like

00:52:34,319 --> 00:52:38,559
configure

00:52:35,520 --> 00:52:41,119
to actually say something like like do

00:52:38,559 --> 00:52:41,839
um affinities like saying yeah this app

00:52:41,119 --> 00:52:44,559
put that

00:52:41,839 --> 00:52:46,079
like right next to this other one to be

00:52:44,559 --> 00:52:48,240
able to control that decision

00:52:46,079 --> 00:52:49,760
but implement that rather flexibly in

00:52:48,240 --> 00:52:52,640
irene but maybe it's

00:52:49,760 --> 00:52:54,720
maybe it's not worth it because the i i

00:52:52,640 --> 00:52:55,280
mean the limits of kubernetes clusters

00:52:54,720 --> 00:52:57,440
are

00:52:55,280 --> 00:52:59,280
are raising and maybe that's really a

00:52:57,440 --> 00:53:01,359
lot of apps and they

00:52:59,280 --> 00:53:02,800
actually in in practice never end up in

00:53:01,359 --> 00:53:04,960
the same org

00:53:02,800 --> 00:53:06,880
so maybe it's not worth because it does

00:53:04,960 --> 00:53:08,160
add quite a lot of complexity if you

00:53:06,880 --> 00:53:10,800
just do that

00:53:08,160 --> 00:53:14,240
generically as a rather generic

00:53:10,800 --> 00:53:16,400
scheduler in irene

00:53:14,240 --> 00:53:18,319
yeah i think you know with with orgs

00:53:16,400 --> 00:53:20,240
they've got a many to many mapping for

00:53:18,319 --> 00:53:23,760
isolation segments

00:53:20,240 --> 00:53:26,559
and spaces spaces i think are just

00:53:23,760 --> 00:53:28,400
it's um one each space has one assigned

00:53:26,559 --> 00:53:30,720
isolation segment

00:53:28,400 --> 00:53:32,640
and i think it is the case that if that

00:53:30,720 --> 00:53:34,480
is mutable and if you change it

00:53:32,640 --> 00:53:36,000
it gets updated lazily like whenever

00:53:34,480 --> 00:53:38,240
that app gets re-pushed

00:53:36,000 --> 00:53:39,119
it goes into the new segment um although

00:53:38,240 --> 00:53:40,800
that

00:53:39,119 --> 00:53:43,359
may be a little less controlled than you

00:53:40,800 --> 00:53:46,240
might want

00:53:43,359 --> 00:53:46,880
or you know potentially surprising if

00:53:46,240 --> 00:53:48,559
you are

00:53:46,880 --> 00:53:51,920
trying to coordinate with some sort of

00:53:48,559 --> 00:53:51,920
infrastructure change underneath

00:53:52,559 --> 00:53:57,760
so i would you know maybe the that

00:53:55,440 --> 00:53:59,920
biggest constraint at this point is

00:53:57,760 --> 00:54:01,520
the notion that uh uh a space is

00:53:59,920 --> 00:54:02,880
assigned to exactly one isolation

00:54:01,520 --> 00:54:06,559
segment including the

00:54:02,880 --> 00:54:11,839
the default um null isolation segment

00:54:06,559 --> 00:54:11,839
and um that that would be the main

00:54:12,000 --> 00:54:19,119
constraint in terms of flexibility

00:54:15,680 --> 00:54:25,359
in terms of mapping to those

00:54:19,119 --> 00:54:28,000
units of infrastructure

00:54:25,359 --> 00:54:29,760
but yeah i would i mean it well maybe

00:54:28,000 --> 00:54:31,520
maybe we have a few examples of really

00:54:29,760 --> 00:54:34,800
pathological cases where

00:54:31,520 --> 00:54:36,240
um somebody has 10 000 apps in a single

00:54:34,800 --> 00:54:38,880
space

00:54:36,240 --> 00:54:40,240
uh but they may be hitting other scale

00:54:38,880 --> 00:54:41,839
limits in cf

00:54:40,240 --> 00:54:44,079
when they try to do common common

00:54:41,839 --> 00:54:45,839
operations i uh

00:54:44,079 --> 00:54:47,440
i i shuddered to think of just what

00:54:45,839 --> 00:54:50,160
running cf apps would do

00:54:47,440 --> 00:54:50,160
at that point

00:54:51,040 --> 00:54:53,839
true

00:55:02,000 --> 00:55:10,160
okay any more thoughts feedback

00:55:07,520 --> 00:55:10,640
things that um my impression was that

00:55:10,160 --> 00:55:12,480
like

00:55:10,640 --> 00:55:14,079
some of these things seemed kind of

00:55:12,480 --> 00:55:17,359
dependent on each other

00:55:14,079 --> 00:55:18,960
like separating the

00:55:17,359 --> 00:55:20,960
or having the ability at least to

00:55:18,960 --> 00:55:22,960
separate the control plane from the

00:55:20,960 --> 00:55:24,400
the where the cf apps are running on a

00:55:22,960 --> 00:55:25,680
workload cluster

00:55:24,400 --> 00:55:27,440
seemed like maybe a bit of a

00:55:25,680 --> 00:55:29,040
prerequisite to branching out to

00:55:27,440 --> 00:55:31,359
multiple clusters or maybe that would

00:55:29,040 --> 00:55:32,960
that would probably end up being the

00:55:31,359 --> 00:55:35,839
more natural

00:55:32,960 --> 00:55:38,400
sequencing of these things yeah

00:55:35,839 --> 00:55:43,040
definitely as i said so so some of those

00:55:38,400 --> 00:55:43,040
have like a net

00:55:43,839 --> 00:55:48,000
on each other others are rather

00:55:46,640 --> 00:55:49,280
independent right so

00:55:48,000 --> 00:55:51,119
being able to hibernate the control

00:55:49,280 --> 00:55:52,240
plane you could do that even inside a

00:55:51,119 --> 00:55:54,480
single cluster or

00:55:52,240 --> 00:55:56,799
changing the persistency of the control

00:55:54,480 --> 00:56:00,839
plane to use ctcd but the rest yeah

00:55:56,799 --> 00:56:03,839
is definitely like a sequence of things

00:56:00,839 --> 00:56:03,839
probably

00:56:15,119 --> 00:56:19,440
okay any more thoughts feedback

00:56:21,520 --> 00:56:25,520
i guess in that control plane

00:56:23,040 --> 00:56:28,480
consistency your persistency

00:56:25,520 --> 00:56:30,480
well i guess you'd already kind of uh

00:56:28,480 --> 00:56:32,000
mentioned that it would we're assuming

00:56:30,480 --> 00:56:33,280
that this would just be via the

00:56:32,000 --> 00:56:34,799
kubernetes api

00:56:33,280 --> 00:56:36,880
and then you know kubernetes would be

00:56:34,799 --> 00:56:37,599
using ncd as a persistent store so we'd

00:56:36,880 --> 00:56:41,599
get it

00:56:37,599 --> 00:56:43,040
we'd get it transitively um

00:56:41,599 --> 00:56:44,480
yeah that that might be something to

00:56:43,040 --> 00:56:45,920
spell out a little more explicitly that

00:56:44,480 --> 00:56:48,880
we're not saying

00:56:45,920 --> 00:56:50,640
we would have um say cloud controller or

00:56:48,880 --> 00:56:52,400
any other components talking directly to

00:56:50,640 --> 00:56:55,359
fcd

00:56:52,400 --> 00:56:56,319
oh yeah i think that's a very good point

00:56:55,359 --> 00:56:58,079
because i think there are

00:56:56,319 --> 00:57:00,720
still people experimenting with putting

00:56:58,079 --> 00:57:13,839
a relational database beneath the

00:57:00,720 --> 00:57:13,839
kubernetes api instead of lcd

00:57:29,839 --> 00:57:41,839
just gotta implement watch that's the

00:57:31,520 --> 00:57:41,839
hard part

00:57:51,200 --> 00:57:57,839
okay if there's no additional

00:57:54,799 --> 00:57:57,839
comments thoughts

00:57:58,720 --> 00:58:01,440
i think

00:58:03,119 --> 00:58:06,960
can close a little bit earlier even

00:58:05,359 --> 00:58:10,079
though i think

00:58:06,960 --> 00:58:11,440
any ways close to the end of the

00:58:10,079 --> 00:58:13,520
scheduled time

00:58:11,440 --> 00:58:14,880
so yeah if if you have like additional

00:58:13,520 --> 00:58:16,480
thoughts or if you

00:58:14,880 --> 00:58:18,079
like didn't get a chance to read through

00:58:16,480 --> 00:58:20,240
the document in more detail and want to

00:58:18,079 --> 00:58:23,359
do that later on and leave some comments

00:58:20,240 --> 00:58:24,480
i'm definitely happy to follow up on on

00:58:23,359 --> 00:58:27,920
whatever additional

00:58:24,480 --> 00:58:29,280
input that that you have

00:58:27,920 --> 00:58:31,119
and so with that thanks again for

00:58:29,280 --> 00:58:33,200
writing this aaron this has been this is

00:58:31,119 --> 00:58:36,160
uh really a nice nice set of directions

00:58:33,200 --> 00:58:37,119
to capture so i appreciate it yeah

00:58:36,160 --> 00:58:40,480
thanks parent

00:58:37,119 --> 00:58:43,119
uh as as with the the other cfra kate's

00:58:40,480 --> 00:58:43,839
doc that we talked about um just uh we

00:58:43,119 --> 00:58:47,280
have uh

00:58:43,839 --> 00:58:50,640
cloud foundry cab call tomorrow

00:58:47,280 --> 00:58:53,040
um i ha as of yet i don't have a

00:58:50,640 --> 00:58:54,000
presentation planned do you think any of

00:58:53,040 --> 00:58:58,160
these topics

00:58:54,000 --> 00:59:01,599
uh uh around cfrk8s would be

00:58:58,160 --> 00:59:04,880
good for discussion in the broader

00:59:01,599 --> 00:59:08,559
broader group or should we wait till

00:59:04,880 --> 00:59:08,559
we've refined things a bit more

00:59:09,680 --> 00:59:13,359
that's a good question i mean

00:59:15,680 --> 00:59:19,119
not sure like for for the cap call i'm

00:59:18,400 --> 00:59:22,400
i'm not sure

00:59:19,119 --> 00:59:22,880
how deep people are already in cf4ks

00:59:22,400 --> 00:59:25,359
because

00:59:22,880 --> 00:59:27,359
that that's i i would guess is it's

00:59:25,359 --> 00:59:28,799
definitely a more advanced topic right

00:59:27,359 --> 00:59:30,640
if you

00:59:28,799 --> 00:59:33,200
did didn't have the chance to try out

00:59:30,640 --> 00:59:34,240
cfocates then it will be hard to to kind

00:59:33,200 --> 00:59:36,240
of

00:59:34,240 --> 00:59:37,920
follow in terms of what does it now mean

00:59:36,240 --> 00:59:38,640
to have the control plane running

00:59:37,920 --> 00:59:41,359
elsewhere

00:59:38,640 --> 00:59:44,839
etc etc i mean we could still point

00:59:41,359 --> 00:59:47,920
again people to the document and

00:59:44,839 --> 00:59:50,720
like um this is still open for

00:59:47,920 --> 00:59:51,040
for feedback and comments why don't i

00:59:50,720 --> 00:59:53,599
just

00:59:51,040 --> 00:59:54,799
uh i'd like make a quick announcement

00:59:53,599 --> 00:59:57,920
that these documents

00:59:54,799 --> 01:00:00,880
are available and looking for

00:59:57,920 --> 01:00:01,520
uh review and comment yeah we won't dive

01:00:00,880 --> 01:00:05,280
into

01:00:01,520 --> 01:00:09,599
uh that too much yeah i mean

01:00:05,280 --> 01:00:11,599
anyways like let's see how

01:00:09,599 --> 01:00:14,000
basically the first quarter goes but at

01:00:11,599 --> 01:00:17,760
least i've seen some

01:00:14,000 --> 01:00:20,559
kind of reduction in in

01:00:17,760 --> 01:00:21,760
people suggesting topics so maybe at

01:00:20,559 --> 01:00:24,559
some point in time

01:00:21,760 --> 01:00:24,880
we could anyhow think about like should

01:00:24,559 --> 01:00:26,960
we

01:00:24,880 --> 01:00:28,559
kind of fold this special interest group

01:00:26,960 --> 01:00:31,839
into the cup call

01:00:28,559 --> 01:00:34,079
um and then kind of have

01:00:31,839 --> 01:00:35,440
kind of more regular topics for the

01:00:34,079 --> 01:00:37,599
combined thing

01:00:35,440 --> 01:00:39,599
um yeah and i mean something that i was

01:00:37,599 --> 01:00:42,160
thinking about

01:00:39,599 --> 01:00:43,760
i i i think that would be fine um

01:00:42,160 --> 01:00:45,599
because likewise i don't see

01:00:43,760 --> 01:00:48,480
a lot of people stepping up to volunteer

01:00:45,599 --> 01:00:51,760
for for presentations in cab

01:00:48,480 --> 01:00:54,319
and it having this content in that

01:00:51,760 --> 01:00:54,319
meeting would

01:00:55,440 --> 01:00:59,599
expose it to a larger audience and then

01:00:58,400 --> 01:01:00,880
people in the community would be

01:00:59,599 --> 01:01:02,799
thinking about these

01:01:00,880 --> 01:01:04,559
and we would have and here's the thing

01:01:02,799 --> 01:01:06,160
we would have a lot more use cases

01:01:04,559 --> 01:01:08,240
when when we talk about them right now

01:01:06,160 --> 01:01:11,839
we're talking about uh

01:01:08,240 --> 01:01:14,640
about ibm's sap and scissors use cases

01:01:11,839 --> 01:01:17,920
and we get this bigger variety of of

01:01:14,640 --> 01:01:19,520
people who work with it day to day

01:01:17,920 --> 01:01:22,079
well you and i can talk about that

01:01:19,520 --> 01:01:25,839
offline yeah i was just about to suggest

01:01:22,079 --> 01:01:25,839
that yeah let's do that

01:01:26,640 --> 01:01:31,680
okay cool done thank you very much

01:01:29,760 --> 01:01:34,960
everybody

01:01:31,680 --> 01:01:38,960
and i talk to you next time either in

01:01:34,960 --> 01:01:51,119
this meeting or the capcom

01:01:38,960 --> 01:01:51,119

YouTube URL: https://www.youtube.com/watch?v=7JE6iZu5kAc


