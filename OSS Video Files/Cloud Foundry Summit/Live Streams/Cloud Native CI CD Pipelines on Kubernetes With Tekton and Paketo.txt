Title: Cloud Native CI CD Pipelines on Kubernetes With Tekton and Paketo
Publication date: 2021-04-07
Playlist: Live Streams
Description: 
	Kubernetes is the de facto infrastructure to which all modern application deployments are happening. Cloud Native technologies, which are closely tied in to Kubernetes, are replacing all traditional tools such as local dev, networking, monitoring, security, and everything else. 

Join us on this live stream where we explore Cloud Native CI/CD pipelines. This is the central piece of the DevOps toolchain and helps developers deploy with speed, at scale, and complete accuracy. Learn how to make use of Tekton, the standard tool for cloud native pipeline development, along with Paketo Buildpacks which simplify the creation of containers greatly.
Captions: 
	00:00:14,920 --> 00:00:17,920
here

00:00:18,240 --> 00:00:23,039
okay and we are live now can you hear me

00:00:21,680 --> 00:00:26,080
okay

00:00:23,039 --> 00:00:27,680
yes okay hey folks um thank you for

00:00:26,080 --> 00:00:30,880
joining us once again

00:00:27,680 --> 00:00:32,079
on a live stream bi-weekly sort of

00:00:30,880 --> 00:00:33,760
bi-weekly

00:00:32,079 --> 00:00:35,360
kind of live stream you know if you know

00:00:33,760 --> 00:00:38,079
what i mean um

00:00:35,360 --> 00:00:39,520
so we're trying to make this um as like

00:00:38,079 --> 00:00:42,559
interesting as possible

00:00:39,520 --> 00:00:44,320
by bringing on new people not just using

00:00:42,559 --> 00:00:46,640
my face and rams i knew

00:00:44,320 --> 00:00:48,559
most of us are bored by now so we have

00:00:46,640 --> 00:00:49,600
like someone very interesting here with

00:00:48,559 --> 00:00:53,199
us to talk about

00:00:49,600 --> 00:00:56,079
um tank tone and packet to beatbacks um

00:00:53,199 --> 00:00:57,520
so i'll just quickly introduce myself or

00:00:56,079 --> 00:00:58,879
you all know me if you watch this live

00:00:57,520 --> 00:01:01,039
stream a lot my name is

00:00:58,879 --> 00:01:02,480
akintayo i'm a developer advocate at the

00:01:01,039 --> 00:01:05,680
cloud foundry foundation

00:01:02,480 --> 00:01:08,960
and with me is ram ram can just quickly

00:01:05,680 --> 00:01:08,960
say hi and you know

00:01:09,119 --> 00:01:14,400
sure hey everyone good morning good

00:01:12,560 --> 00:01:16,000
afternoon good evening

00:01:14,400 --> 00:01:18,080
whichever part of the world you are

00:01:16,000 --> 00:01:21,200
joining us from today

00:01:18,080 --> 00:01:22,560
i'm very glad to have you for what i

00:01:21,200 --> 00:01:25,920
think is uh

00:01:22,560 --> 00:01:26,960
is one of our more interesting streams

00:01:25,920 --> 00:01:30,960
in a while

00:01:26,960 --> 00:01:34,960
so today we're going to demonstrate

00:01:30,960 --> 00:01:38,479
some stuff that we've done with cicd

00:01:34,960 --> 00:01:39,439
and we're not going to do a lot of stuff

00:01:38,479 --> 00:01:43,520
about

00:01:39,439 --> 00:01:47,040
cloud foundry itself unlike our

00:01:43,520 --> 00:01:48,000
previous streams but there's another

00:01:47,040 --> 00:01:51,759
project that

00:01:48,000 --> 00:01:53,439
has been graciously donated by vmware

00:01:51,759 --> 00:01:55,439
to the cloud foundry foundation and

00:01:53,439 --> 00:01:58,560
that's known as pacquiao

00:01:55,439 --> 00:02:00,240
um kashyap who is joining us is a

00:01:58,560 --> 00:02:02,399
product manager

00:02:00,240 --> 00:02:04,320
i want to say the product manager but i

00:02:02,399 --> 00:02:06,560
don't know if it's just him but

00:02:04,320 --> 00:02:08,959
let's find out more from him so he joins

00:02:06,560 --> 00:02:09,520
us from vmware hi krishna thank you so

00:02:08,959 --> 00:02:11,840
much

00:02:09,520 --> 00:02:15,280
for joining us do you want to quickly

00:02:11,840 --> 00:02:18,480
introduce yourself before we move on

00:02:15,280 --> 00:02:21,520
hey thanks for having me guys um

00:02:18,480 --> 00:02:22,080
since ron kind of said i'm kasia product

00:02:21,520 --> 00:02:25,200
manager

00:02:22,080 --> 00:02:28,000
at vmware i work on the open source

00:02:25,200 --> 00:02:28,720
kettle build packs project and within

00:02:28,000 --> 00:02:31,680
vmware

00:02:28,720 --> 00:02:31,680
tons of build service

00:02:32,160 --> 00:02:37,280
okay do you mind explaining to us a

00:02:35,840 --> 00:02:40,720
little bit about

00:02:37,280 --> 00:02:42,720
what tanzu is is

00:02:40,720 --> 00:02:44,400
in general and is it something that

00:02:42,720 --> 00:02:47,680
people can go check out

00:02:44,400 --> 00:02:47,680
um somewhere

00:02:47,840 --> 00:02:51,920
yeah definitely um so a lot of us came

00:02:49,760 --> 00:02:52,959
through from the uh pivotal acquisition

00:02:51,920 --> 00:02:55,519
about like

00:02:52,959 --> 00:02:56,640
a little over a year ago um so for folks

00:02:55,519 --> 00:02:58,239
who have used

00:02:56,640 --> 00:02:59,840
cloud foundry in the past that sort of

00:02:58,239 --> 00:03:02,000
cf push experience

00:02:59,840 --> 00:03:04,560
we have tanzu application service one of

00:03:02,000 --> 00:03:06,080
the big flagship products as well as i

00:03:04,560 --> 00:03:08,000
kind of mentioned i work on

00:03:06,080 --> 00:03:10,800
uh tons of build service which is kind

00:03:08,000 --> 00:03:12,400
of the platform offering to

00:03:10,800 --> 00:03:13,840
around build packs to turn your source

00:03:12,400 --> 00:03:16,640
code into uh

00:03:13,840 --> 00:03:18,720
container images that could run on any

00:03:16,640 --> 00:03:21,040
kind of kubernetes platform

00:03:18,720 --> 00:03:21,920
uh and we will get a bunch of links

00:03:21,040 --> 00:03:25,519
posted and

00:03:21,920 --> 00:03:25,519
chat afterwards around this as well

00:03:26,319 --> 00:03:33,360
okay um awesome awesome

00:03:30,000 --> 00:03:34,720
yeah so uh basically in this particular

00:03:33,360 --> 00:03:36,400
live stream you would not be hearing a

00:03:34,720 --> 00:03:39,200
lot from me

00:03:36,400 --> 00:03:40,720
so just i don't know just be yeah i

00:03:39,200 --> 00:03:41,440
would not be talking a lot i'll just be

00:03:40,720 --> 00:03:43,680
quiet and

00:03:41,440 --> 00:03:44,879
just like you are mostly learning i'm

00:03:43,680 --> 00:03:47,200
also listening from

00:03:44,879 --> 00:03:48,319
i don't need to xbox which is ram and

00:03:47,200 --> 00:03:50,239
kasha

00:03:48,319 --> 00:03:51,680
um so i don't know we should we get

00:03:50,239 --> 00:03:53,840
right into it and

00:03:51,680 --> 00:03:55,439
so we don't stay long on this live

00:03:53,840 --> 00:03:58,799
stream so what's the next

00:03:55,439 --> 00:04:01,200
um step um ram i didn't think it was

00:03:58,799 --> 00:04:01,920
possible that we could get shadrack to

00:04:01,200 --> 00:04:04,560
shut up

00:04:01,920 --> 00:04:06,959
so i think we should definitely do more

00:04:04,560 --> 00:04:10,239
of this topic but

00:04:06,959 --> 00:04:12,799
i only enjoy this

00:04:10,239 --> 00:04:14,000
so yeah i think we have like a bunch of

00:04:12,799 --> 00:04:16,720
different things to cover

00:04:14,000 --> 00:04:17,440
today because we're going to be talking

00:04:16,720 --> 00:04:20,720
about

00:04:17,440 --> 00:04:24,000
two different projects obviously one

00:04:20,720 --> 00:04:27,280
is more closely tied to

00:04:24,000 --> 00:04:31,680
what shadrach myself and kashub do

00:04:27,280 --> 00:04:35,759
and another is techton itself so

00:04:31,680 --> 00:04:36,560
i'm not sure um what the exposure of our

00:04:35,759 --> 00:04:39,040
audience is

00:04:36,560 --> 00:04:40,880
to tecton itself but let's just take a

00:04:39,040 --> 00:04:44,240
few minutes to

00:04:40,880 --> 00:04:46,180
introduce tecton as well so as

00:04:44,240 --> 00:04:47,919
the world started to move from

00:04:46,180 --> 00:04:50,960
[Music]

00:04:47,919 --> 00:04:52,800
ah i i don't want to sound like like a

00:04:50,960 --> 00:04:55,600
morgan freeman monologue but

00:04:52,800 --> 00:04:55,600
i suppose

00:04:57,759 --> 00:05:01,360
as immutable artifacts and doing

00:05:00,000 --> 00:05:04,000
containers and evolved

00:05:01,360 --> 00:05:04,639
into kubernetes space so did all of the

00:05:04,000 --> 00:05:08,080
tooling

00:05:04,639 --> 00:05:09,280
uh that surrounds um that surrounds what

00:05:08,080 --> 00:05:13,440
engineers do

00:05:09,280 --> 00:05:16,960
so cicd which again is rather

00:05:13,440 --> 00:05:20,000
crucial in uh in what

00:05:16,960 --> 00:05:23,039
developers need to deploy and

00:05:20,000 --> 00:05:24,160
have a disciplined devops practice also

00:05:23,039 --> 00:05:27,039
started to evolve

00:05:24,160 --> 00:05:29,280
into what is now known as a more cloud

00:05:27,039 --> 00:05:33,919
native approach and

00:05:29,280 --> 00:05:36,479
the sort of product that emerged

00:05:33,919 --> 00:05:38,479
out of out of these efforts is what we

00:05:36,479 --> 00:05:42,479
now know as tecton so

00:05:38,479 --> 00:05:45,440
um historically i think it was how

00:05:42,479 --> 00:05:47,840
the k native project if i'm not wrong

00:05:45,440 --> 00:05:50,080
was doing ci cd internally and then they

00:05:47,840 --> 00:05:53,120
decided to productize what they did

00:05:50,080 --> 00:05:56,160
and so um tecton um

00:05:53,120 --> 00:06:00,479
was actually formed and stuff

00:05:56,160 --> 00:06:03,520
tecton is an open source ci cd tool

00:06:00,479 --> 00:06:04,800
it is governed by the cd foundation who

00:06:03,520 --> 00:06:07,120
are

00:06:04,800 --> 00:06:07,840
also a part of the linux foundation much

00:06:07,120 --> 00:06:11,360
like

00:06:07,840 --> 00:06:14,160
um the cloud foundry foundation and

00:06:11,360 --> 00:06:14,479
uh yeah so so the governance belongs to

00:06:14,160 --> 00:06:17,520
them

00:06:14,479 --> 00:06:21,840
and what we are going to do

00:06:17,520 --> 00:06:21,840
today is showcase

00:06:21,919 --> 00:06:29,199
how you can make use of build packs

00:06:25,840 --> 00:06:32,880
to generate container images

00:06:29,199 --> 00:06:37,120
using workflows that are built on

00:06:32,880 --> 00:06:39,280
tecton and what

00:06:37,120 --> 00:06:40,240
better ways of building these containers

00:06:39,280 --> 00:06:42,319
there are

00:06:40,240 --> 00:06:43,280
then you know stuff that folks are used

00:06:42,319 --> 00:06:46,400
to which is using

00:06:43,280 --> 00:06:49,280
docker files so build packs are

00:06:46,400 --> 00:06:50,960
slightly better in that regards and

00:06:49,280 --> 00:06:51,759
build packs also have like a long

00:06:50,960 --> 00:06:56,080
history

00:06:51,759 --> 00:06:59,840
um started about 10 years ago in 2011

00:06:56,080 --> 00:07:02,000
for between heroku and the pivotal team

00:06:59,840 --> 00:07:03,360
who were the primary consumers of

00:07:02,000 --> 00:07:06,080
buildbacks technology

00:07:03,360 --> 00:07:07,360
as far as you know the world can tell

00:07:06,080 --> 00:07:09,599
and then

00:07:07,360 --> 00:07:11,599
they sort of again converged into what

00:07:09,599 --> 00:07:12,479
are now known as cloud native buildbacks

00:07:11,599 --> 00:07:15,520
i guess so

00:07:12,479 --> 00:07:16,000
you'll hear a lot of these things as we

00:07:15,520 --> 00:07:19,199
progress

00:07:16,000 --> 00:07:22,000
in the stream and it sort of ties into

00:07:19,199 --> 00:07:23,280
uh what pacquetto is and what they do

00:07:22,000 --> 00:07:28,160
and stuff as well

00:07:23,280 --> 00:07:32,160
so yeah let's you know let's uh

00:07:28,160 --> 00:07:35,759
let's get started with um

00:07:32,160 --> 00:07:38,479
with the demo today i'm going to

00:07:35,759 --> 00:07:40,639
share my screen um shadrach if you can

00:07:38,479 --> 00:07:44,319
just confirm that

00:07:40,639 --> 00:07:46,560
you do see my screen

00:07:44,319 --> 00:07:46,560
yep

00:07:47,599 --> 00:07:53,599
thank you so um yeah like i mentioned

00:07:51,039 --> 00:07:55,280
uh we're going to be talking about like

00:07:53,599 --> 00:07:58,479
tech town and poto

00:07:55,280 --> 00:08:00,960
and all of these things and so let me

00:07:58,479 --> 00:08:00,960
quickly

00:08:01,840 --> 00:08:05,280
show what the pipeline is going to look

00:08:04,800 --> 00:08:10,160
like so

00:08:05,280 --> 00:08:13,360
obviously you know ci cd

00:08:10,160 --> 00:08:15,680
works in terms of pipelines and this

00:08:13,360 --> 00:08:16,560
is going to be what our pipeline looks

00:08:15,680 --> 00:08:20,080
like for

00:08:16,560 --> 00:08:22,400
uh today and

00:08:20,080 --> 00:08:23,759
we're going to check out like code from

00:08:22,400 --> 00:08:26,000
a report repo

00:08:23,759 --> 00:08:28,160
and that code will get con converted

00:08:26,000 --> 00:08:30,000
into a container

00:08:28,160 --> 00:08:31,840
somewhere around here and it will get

00:08:30,000 --> 00:08:34,560
published to a container registry

00:08:31,840 --> 00:08:36,800
so that's the end point so to get our

00:08:34,560 --> 00:08:38,000
source code into a container registry is

00:08:36,800 --> 00:08:41,120
going to be our

00:08:38,000 --> 00:08:42,640
entire flow and tecton is going to

00:08:41,120 --> 00:08:46,320
orchestrate all of

00:08:42,640 --> 00:08:47,040
these steps here and it's going to make

00:08:46,320 --> 00:08:50,320
use of

00:08:47,040 --> 00:08:53,120
like these components to do some storage

00:08:50,320 --> 00:08:54,240
and retrieval and stuff like that and

00:08:53,120 --> 00:08:57,200
we're going to see how

00:08:54,240 --> 00:08:58,880
techton actually goes through um all of

00:08:57,200 --> 00:09:02,959
these different

00:08:58,880 --> 00:09:02,959
steps essentially so

00:09:03,120 --> 00:09:07,279
some links and other things before we

00:09:05,920 --> 00:09:10,640
get started

00:09:07,279 --> 00:09:14,640
so the tecton product

00:09:10,640 --> 00:09:14,640
page itself lives here

00:09:16,880 --> 00:09:20,839
so folks are more than welcome to take a

00:09:19,920 --> 00:09:23,680
look at this

00:09:20,839 --> 00:09:25,519
tecton.dev is their website like i

00:09:23,680 --> 00:09:28,560
mentioned they're a part of

00:09:25,519 --> 00:09:32,480
the cd foundation um

00:09:28,560 --> 00:09:35,360
so cd foundation just governs a lot of

00:09:32,480 --> 00:09:36,720
open source tools in the ci cd space

00:09:35,360 --> 00:09:39,839
sensor tektron is

00:09:36,720 --> 00:09:43,519
is one of them now let's

00:09:39,839 --> 00:09:46,560
also take a look at buildbacks for a bit

00:09:43,519 --> 00:09:49,680
um before we dive into you know

00:09:46,560 --> 00:09:50,320
actually making use of those so kashif

00:09:49,680 --> 00:09:52,480
do you

00:09:50,320 --> 00:09:55,920
uh want to share like a few details

00:09:52,480 --> 00:10:01,279
about what buildbacks are and

00:09:55,920 --> 00:10:01,279
what folks can do with them and stuff

00:10:01,760 --> 00:10:07,600
yeah sure um so basically

00:10:04,800 --> 00:10:08,160
uh the cloud-native build packs project

00:10:07,600 --> 00:10:10,880
itself

00:10:08,160 --> 00:10:12,640
launched a couple years back like uh

00:10:10,880 --> 00:10:15,040
late 2019 i believe

00:10:12,640 --> 00:10:17,360
and all the projects around is providing

00:10:15,040 --> 00:10:18,480
uh tooling and an api effectively to

00:10:17,360 --> 00:10:20,640
transform your

00:10:18,480 --> 00:10:21,839
application source code into container

00:10:20,640 --> 00:10:24,480
images that could run on

00:10:21,839 --> 00:10:26,560
any kind of cloud platform so i bet a

00:10:24,480 --> 00:10:28,480
lot of folks are probably familiar with

00:10:26,560 --> 00:10:30,640
cloud foundry as a whole in that sort of

00:10:28,480 --> 00:10:33,760
cf push experience when

00:10:30,640 --> 00:10:35,680
uh using like uh cf for vms

00:10:33,760 --> 00:10:38,000
so build packs were kind of a very core

00:10:35,680 --> 00:10:39,680
piece of cloud foundry back in the day

00:10:38,000 --> 00:10:40,880
just around turning your source code

00:10:39,680 --> 00:10:43,760
running cf push

00:10:40,880 --> 00:10:45,440
and then getting that uh running as like

00:10:43,760 --> 00:10:48,480
a droplet that can be

00:10:45,440 --> 00:10:51,600
deployed uh on any kind of cloud

00:10:48,480 --> 00:10:53,360
so my teams and

00:10:51,600 --> 00:10:55,760
teams at heroku and all have also been

00:10:53,360 --> 00:10:56,320
using build packs for years and around

00:10:55,760 --> 00:10:58,959
like

00:10:56,320 --> 00:11:00,640
uh like i said 2019 is when this idea

00:10:58,959 --> 00:11:03,360
came out to start the project

00:11:00,640 --> 00:11:05,440
and the whole cnb project as a whole is

00:11:03,360 --> 00:11:08,320
just kind of building around

00:11:05,440 --> 00:11:08,800
the uh what we call the life cycle which

00:11:08,320 --> 00:11:11,920
is

00:11:08,800 --> 00:11:13,760
the set of apis that

00:11:11,920 --> 00:11:15,200
are the underlying bits and pieces of

00:11:13,760 --> 00:11:16,640
how like the build packs actually are

00:11:15,200 --> 00:11:19,920
orchestrated and run

00:11:16,640 --> 00:11:21,839
as well as sets of tooling and a local

00:11:19,920 --> 00:11:23,200
kind of platform offering called the pax

00:11:21,839 --> 00:11:24,880
cli that we'll probably

00:11:23,200 --> 00:11:26,320
dive into a little bit during the demo

00:11:24,880 --> 00:11:29,200
just to

00:11:26,320 --> 00:11:31,279
um just to be able to build your apps

00:11:29,200 --> 00:11:35,120
locally using build packs

00:11:31,279 --> 00:11:37,120
so i uh the cnb project itself is just

00:11:35,120 --> 00:11:39,360
kind of the upstream

00:11:37,120 --> 00:11:41,600
project providing all of the tooling and

00:11:39,360 --> 00:11:43,760
api and specification like i said

00:11:41,600 --> 00:11:45,120
and then you also have projects like

00:11:43,760 --> 00:11:48,800
picado under the hood

00:11:45,120 --> 00:11:50,880
which are effectively the sets of cnb

00:11:48,800 --> 00:11:52,079
implementations for various language

00:11:50,880 --> 00:11:54,480
families and stuff

00:11:52,079 --> 00:11:55,440
so apart from just the keto there are a

00:11:54,480 --> 00:11:59,279
couple other

00:11:55,440 --> 00:12:01,200
um projects with uh also sets of open

00:11:59,279 --> 00:12:02,160
source build packs like heroku has their

00:12:01,200 --> 00:12:04,480
own set

00:12:02,160 --> 00:12:06,079
and uh google has their own set of build

00:12:04,480 --> 00:12:08,720
packs more specific to like

00:12:06,079 --> 00:12:10,320
google cloud run use cases and stuff but

00:12:08,720 --> 00:12:11,839
the keto as a whole a lot of it has kind

00:12:10,320 --> 00:12:14,160
of evolved around

00:12:11,839 --> 00:12:15,680
years from developing and maintaining

00:12:14,160 --> 00:12:16,639
cloud foundry build packs and applying

00:12:15,680 --> 00:12:19,040
those learnings

00:12:16,639 --> 00:12:20,240
into our kind of next generation of

00:12:19,040 --> 00:12:22,240
offerings so like

00:12:20,240 --> 00:12:24,000
one of the main core things that we

00:12:22,240 --> 00:12:26,560
strive for is like modularity

00:12:24,000 --> 00:12:27,760
and all of the build packs that we kind

00:12:26,560 --> 00:12:30,959
of uh

00:12:27,760 --> 00:12:31,680
build i think in the demo today i forget

00:12:30,959 --> 00:12:33,360
ron if we're

00:12:31,680 --> 00:12:34,800
doing a java app or something like that

00:12:33,360 --> 00:12:36,639
but we'll kind of see how

00:12:34,800 --> 00:12:38,160
modular the build packs themselves are

00:12:36,639 --> 00:12:40,720
and how like um

00:12:38,160 --> 00:12:42,079
the overall like detection works and and

00:12:40,720 --> 00:12:45,200
on the day two level

00:12:42,079 --> 00:12:48,079
how easy build packs make it just to

00:12:45,200 --> 00:12:50,320
manage and operate your applications and

00:12:48,079 --> 00:12:50,320
stuff

00:12:50,839 --> 00:12:54,880
awesome awesome

00:12:55,279 --> 00:12:59,600
are there other uh so you mentioned that

00:12:57,760 --> 00:13:02,639
google has like a

00:12:59,600 --> 00:13:04,800
set of build packs and hero could do too

00:13:02,639 --> 00:13:07,839
are these also

00:13:04,800 --> 00:13:11,360
implemented on the same cnb lifecycle

00:13:07,839 --> 00:13:13,760
like paquetto uh is

00:13:11,360 --> 00:13:16,000
yeah so like all of them are using

00:13:13,760 --> 00:13:16,720
google heroku's build packs apart from

00:13:16,000 --> 00:13:19,279
that there are

00:13:16,720 --> 00:13:20,160
other platform offerings that have

00:13:19,279 --> 00:13:22,000
adopted

00:13:20,160 --> 00:13:24,160
cloud native build packs like cashy cork

00:13:22,000 --> 00:13:26,720
waypoint digitalocean

00:13:24,160 --> 00:13:28,160
um app platform and tons of build

00:13:26,720 --> 00:13:30,720
service as well

00:13:28,160 --> 00:13:32,399
uh so all of these platforms are using

00:13:30,720 --> 00:13:34,000
the cloud-native build pack

00:13:32,399 --> 00:13:35,680
lifecycle under the hood to implement

00:13:34,000 --> 00:13:37,120
their build packs just different

00:13:35,680 --> 00:13:38,560
flavoring and

00:13:37,120 --> 00:13:40,560
different use cases at the end of the

00:13:38,560 --> 00:13:42,800
day like i said google clouds uh

00:13:40,560 --> 00:13:44,560
google's build packs are more kind of

00:13:42,800 --> 00:13:46,560
tailored towards

00:13:44,560 --> 00:13:48,000
google cloud run specific use cases for

00:13:46,560 --> 00:13:50,639
instance maybe setting like

00:13:48,000 --> 00:13:52,079
gcp environment variables and and stuff

00:13:50,639 --> 00:13:55,279
like that

00:13:52,079 --> 00:13:56,959
nice and and is the main focus of

00:13:55,279 --> 00:13:59,199
pacquiao meant to be

00:13:56,959 --> 00:14:01,760
within the cloud foundry ecosystem or is

00:13:59,199 --> 00:14:04,160
it designed to be more general purpose

00:14:01,760 --> 00:14:05,839
use it you know whoever's using

00:14:04,160 --> 00:14:10,560
kubernetes can probably

00:14:05,839 --> 00:14:10,560
um get a lot of mileage from using

00:14:11,360 --> 00:14:15,680
yeah it's it's very general i'd like to

00:14:13,440 --> 00:14:17,600
say like although we've evolved from

00:14:15,680 --> 00:14:20,079
cloud foundry in the past really any

00:14:17,600 --> 00:14:22,320
users can use it for building apps on

00:14:20,079 --> 00:14:24,399
uh kubernetes you should be able to use

00:14:22,320 --> 00:14:27,120
piquetto build packs under the hood to

00:14:24,399 --> 00:14:27,760
uh to build your apps and for that

00:14:27,120 --> 00:14:29,920
matter like

00:14:27,760 --> 00:14:31,279
all the other build packs themselves so

00:14:29,920 --> 00:14:33,279
i think we'll walk through like the

00:14:31,279 --> 00:14:34,399
tecton integration right and how easy it

00:14:33,279 --> 00:14:36,959
is to kind of

00:14:34,399 --> 00:14:39,920
plug in a different um set of build

00:14:36,959 --> 00:14:39,920
packs if you wanted to

00:14:42,839 --> 00:14:45,839
um

00:14:47,600 --> 00:14:55,360
yeah let's continue with uh the demo

00:14:52,639 --> 00:14:59,839
screen is probably a little hard to read

00:14:55,360 --> 00:14:59,839
at the moment but

00:15:00,399 --> 00:15:04,560
yeah um yeah i think this looks better

00:15:03,839 --> 00:15:08,560
so

00:15:04,560 --> 00:15:09,519
um let's quickly revisit that diagram

00:15:08,560 --> 00:15:12,639
that i had

00:15:09,519 --> 00:15:15,120
so yeah basically

00:15:12,639 --> 00:15:17,120
uh what i'm going to show in the next

00:15:15,120 --> 00:15:19,440
few minutes is

00:15:17,120 --> 00:15:21,360
how we can set up all of the different

00:15:19,440 --> 00:15:24,800
pieces that are

00:15:21,360 --> 00:15:27,120
required and what

00:15:24,800 --> 00:15:27,839
our role sort of each of these have to

00:15:27,120 --> 00:15:32,240
play

00:15:27,839 --> 00:15:36,959
um in in the pipeline itself so

00:15:32,240 --> 00:15:40,160
um one of the first things that

00:15:36,959 --> 00:15:43,759
we need is

00:15:40,160 --> 00:15:47,120
tech um yeah in terms of background

00:15:43,759 --> 00:15:48,000
techton basically runs uh on what are

00:15:47,120 --> 00:15:51,600
known as uh

00:15:48,000 --> 00:15:53,279
tasks so um within this entire pipeline

00:15:51,600 --> 00:15:55,199
there's like a

00:15:53,279 --> 00:15:56,560
there's like a bunch of different tasks

00:15:55,199 --> 00:16:01,920
and

00:15:56,560 --> 00:16:01,920
each of these tasks have a particular

00:16:04,160 --> 00:16:10,480
published sort of

00:16:07,279 --> 00:16:12,079
repo so sorry for that sounds very

00:16:10,480 --> 00:16:16,240
complicated but

00:16:12,079 --> 00:16:19,519
uh give me one second

00:16:16,240 --> 00:16:23,279
to explain so yeah

00:16:19,519 --> 00:16:26,720
so this tecton integration

00:16:23,279 --> 00:16:29,519
exists between build packs and

00:16:26,720 --> 00:16:31,519
tecton itself okay so in order to make

00:16:29,519 --> 00:16:34,639
use of

00:16:31,519 --> 00:16:37,839
build packs as the means to build

00:16:34,639 --> 00:16:37,839
your containers

00:16:38,639 --> 00:16:46,399
tecton will require that you install

00:16:42,399 --> 00:16:50,000
this particular integration

00:16:46,399 --> 00:16:53,279
into into your sort of tecton

00:16:50,000 --> 00:16:55,360
thing so we'll go into

00:16:53,279 --> 00:16:57,360
some details about what this pipeline

00:16:55,360 --> 00:17:00,720
will look like but this is sort of

00:16:57,360 --> 00:17:03,759
a good example file so um

00:17:00,720 --> 00:17:05,439
this particular pipeline um

00:17:03,759 --> 00:17:07,679
assumes that you are going to create

00:17:05,439 --> 00:17:07,679
like

00:17:08,160 --> 00:17:16,319
a container for which you

00:17:12,319 --> 00:17:18,799
clone your repo from

00:17:16,319 --> 00:17:20,319
github you basically store it in a

00:17:18,799 --> 00:17:23,360
workspace

00:17:20,319 --> 00:17:24,880
on some storage somewhere and then this

00:17:23,360 --> 00:17:28,000
build packs thing

00:17:24,880 --> 00:17:31,520
kicks in so that's a another task

00:17:28,000 --> 00:17:34,960
inside and then

00:17:31,520 --> 00:17:38,000
you know obviously this is

00:17:34,960 --> 00:17:40,400
specified to run after

00:17:38,000 --> 00:17:41,760
the gate pull is complete and then it

00:17:40,400 --> 00:17:43,840
takes like a bunch of different

00:17:41,760 --> 00:17:47,120
parameters to actually

00:17:43,840 --> 00:17:50,720
execute that so that is the

00:17:47,120 --> 00:17:53,440
first that is one of the tasks that we

00:17:50,720 --> 00:17:56,480
installed so in order to install that

00:17:53,440 --> 00:18:00,080
basically you run this

00:17:56,480 --> 00:18:01,039
command so you apply like the build

00:18:00,080 --> 00:18:04,799
packs task

00:18:01,039 --> 00:18:06,000
onto your kubernetes cluster that has

00:18:04,799 --> 00:18:09,600
techdon instructor

00:18:06,000 --> 00:18:12,320
um likewise cloning from git

00:18:09,600 --> 00:18:12,720
let me move this a bit so cloning from

00:18:12,320 --> 00:18:15,919
git

00:18:12,720 --> 00:18:18,559
also requires another ah

00:18:15,919 --> 00:18:20,320
tecton task and you will have to install

00:18:18,559 --> 00:18:23,919
that before you

00:18:20,320 --> 00:18:26,160
get started using tecton itself

00:18:23,919 --> 00:18:26,160
then

00:18:27,280 --> 00:18:34,640
like i showed you here

00:18:31,200 --> 00:18:35,919
there's two persistent storage areas

00:18:34,640 --> 00:18:38,640
that we need

00:18:35,919 --> 00:18:39,600
uh for this particular pipeline one is

00:18:38,640 --> 00:18:42,080
like a

00:18:39,600 --> 00:18:43,840
storage volume that can store code that

00:18:42,080 --> 00:18:47,600
you clone from github

00:18:43,840 --> 00:18:49,919
and then once container images are built

00:18:47,600 --> 00:18:51,760
you need some place for it to be stored

00:18:49,919 --> 00:18:53,280
so this is like a kubernetes cluster

00:18:51,760 --> 00:18:55,840
running somewhere

00:18:53,280 --> 00:18:58,080
in the ephemeral cloud and so unless you

00:18:55,840 --> 00:18:59,760
provide like a persistent storage volume

00:18:58,080 --> 00:19:02,240
the containers are not going to be

00:18:59,760 --> 00:19:04,720
available for you obviously so what we

00:19:02,240 --> 00:19:08,000
do is we create another

00:19:04,720 --> 00:19:08,720
storage and these two resources are made

00:19:08,000 --> 00:19:12,400
available

00:19:08,720 --> 00:19:15,120
to techton for git

00:19:12,400 --> 00:19:16,880
so source code from the github

00:19:15,120 --> 00:19:19,919
repository to be cloned

00:19:16,880 --> 00:19:21,280
and then for images to be generated and

00:19:19,919 --> 00:19:25,760
stored

00:19:21,280 --> 00:19:29,200
on uh the cache so

00:19:25,760 --> 00:19:29,200
let's see um

00:19:35,120 --> 00:19:40,400
so this aml file

00:19:41,440 --> 00:19:49,200
has these two uh persistent volumes

00:19:46,080 --> 00:19:52,720
that it will create and it will assign

00:19:49,200 --> 00:19:54,740
so basically you know you just do a

00:19:52,720 --> 00:19:56,080
cube ctl apply um

00:19:54,740 --> 00:20:00,160
[Music]

00:19:56,080 --> 00:20:02,080
and then the the kubernetes cluster will

00:20:00,160 --> 00:20:03,520
create these two persistent volumes and

00:20:02,080 --> 00:20:07,840
attach it to

00:20:03,520 --> 00:20:11,039
tecton itself and thereafter

00:20:07,840 --> 00:20:14,640
stuff can be written to when retrieved

00:20:11,039 --> 00:20:19,520
when when required so that's another

00:20:14,640 --> 00:20:23,520
part of the setup itself

00:20:19,520 --> 00:20:27,679
and then there's what is known as

00:20:23,520 --> 00:20:32,320
um a service account

00:20:27,679 --> 00:20:35,840
so service account falls slightly

00:20:32,320 --> 00:20:35,840
outside the scope of

00:20:40,799 --> 00:20:44,159
that diagram that i had shown earlier uh

00:20:43,440 --> 00:20:47,679
but

00:20:44,159 --> 00:20:49,600
what i mean by outside the scope is it

00:20:47,679 --> 00:20:51,520
doesn't directly form a part of the

00:20:49,600 --> 00:20:53,440
pipeline but in order for you to be able

00:20:51,520 --> 00:20:57,039
to

00:20:53,440 --> 00:20:58,240
do a lot of the work for the pipeline

00:20:57,039 --> 00:21:01,360
you need like a

00:20:58,240 --> 00:21:03,360
service account because the container

00:21:01,360 --> 00:21:05,919
registry we are going to be using is

00:21:03,360 --> 00:21:07,360
a github container registry so in order

00:21:05,919 --> 00:21:09,120
to be able to write to that you

00:21:07,360 --> 00:21:11,520
basically need this to

00:21:09,120 --> 00:21:13,200
uh you know be authenticated and things

00:21:11,520 --> 00:21:15,280
like that so

00:21:13,200 --> 00:21:17,039
what you do for that is you create what

00:21:15,280 --> 00:21:18,720
is known as a service account on

00:21:17,039 --> 00:21:22,400
kubernetes

00:21:18,720 --> 00:21:26,960
name the service account and then use

00:21:22,400 --> 00:21:26,960
the metadata

00:21:27,360 --> 00:21:32,480
to specify

00:21:30,640 --> 00:21:34,159
which endpoint it has to authenticate

00:21:32,480 --> 00:21:35,280
with and then supply the required

00:21:34,159 --> 00:21:38,559
authentication thing

00:21:35,280 --> 00:21:41,039
so in this case we have

00:21:38,559 --> 00:21:42,000
um like i mentioned the github container

00:21:41,039 --> 00:21:45,120
registry

00:21:42,000 --> 00:21:47,600
and although this is just a

00:21:45,120 --> 00:21:48,240
copy you basically give your username

00:21:47,600 --> 00:21:50,000
here

00:21:48,240 --> 00:21:51,520
and then you have to create like a

00:21:50,000 --> 00:21:53,360
personal access token with the

00:21:51,520 --> 00:21:56,480
appropriate permissions and

00:21:53,360 --> 00:22:00,720
enter that stuff here so again

00:21:56,480 --> 00:22:03,919
applying that is just

00:22:00,720 --> 00:22:07,520
cube ct i'll apply um

00:22:03,919 --> 00:22:12,480
the yaml file and then

00:22:07,520 --> 00:22:14,960
i'm going to show you the

00:22:12,480 --> 00:22:14,960
itself

00:22:22,400 --> 00:22:31,440
so um

00:22:26,400 --> 00:22:34,880
at the start we basically specify that

00:22:31,440 --> 00:22:39,120
the end of this pipeline is going to be

00:22:34,880 --> 00:22:42,320
a container by name packet or demo

00:22:39,120 --> 00:22:44,880
and that's going to live inside my

00:22:42,320 --> 00:22:47,600
github container registry

00:22:44,880 --> 00:22:48,640
so that's that's the end goal of this

00:22:47,600 --> 00:22:52,960
pipeline when we

00:22:48,640 --> 00:22:56,080
define that upfront

00:22:52,960 --> 00:23:00,480
then there's basically two tasks

00:22:56,080 --> 00:23:02,720
that are carried out the first task is

00:23:00,480 --> 00:23:03,840
called fetch repository and this is

00:23:02,720 --> 00:23:07,039
going to be

00:23:03,840 --> 00:23:09,200
uh cloning like a github repo um it will

00:23:07,039 --> 00:23:12,640
flow on this particular repo

00:23:09,200 --> 00:23:16,080
let's take a look at what that

00:23:12,640 --> 00:23:20,400
is so it's basically like a bunch of

00:23:16,080 --> 00:23:24,320
um sample code that we can make use of

00:23:20,400 --> 00:23:24,320
and yeah we

00:23:25,039 --> 00:23:31,440
we could run pretty much any of this

00:23:28,159 --> 00:23:34,640
uh but but then i think the

00:23:31,440 --> 00:23:38,480
project is configured to run the java

00:23:34,640 --> 00:23:42,080
app right so in the second part

00:23:38,480 --> 00:23:46,080
we actually run the build

00:23:42,080 --> 00:23:50,880
process and here's where we first

00:23:46,080 --> 00:23:54,080
encounter the pacquiao term

00:23:50,880 --> 00:23:57,760
um so basically we say

00:23:54,080 --> 00:24:01,360
take the code take this code from github

00:23:57,760 --> 00:24:01,360
and build it using

00:24:01,760 --> 00:24:06,400
this paquetto built back slash builder

00:24:05,760 --> 00:24:08,799
base

00:24:06,400 --> 00:24:09,919
uh kashif do you want to quickly jump in

00:24:08,799 --> 00:24:12,640
and clarify

00:24:09,919 --> 00:24:12,640
what this is

00:24:13,039 --> 00:24:17,200
yeah so at a high level the concept of a

00:24:15,919 --> 00:24:20,720
builder itself

00:24:17,200 --> 00:24:21,039
in within the uh cnb project a builder

00:24:20,720 --> 00:24:24,400
is

00:24:21,039 --> 00:24:26,480
a set of build packs an ordering or

00:24:24,400 --> 00:24:28,559
configuration around those build packs

00:24:26,480 --> 00:24:31,120
and then the operating system

00:24:28,559 --> 00:24:32,480
base image itself so in this case picato

00:24:31,120 --> 00:24:35,440
build packs the base

00:24:32,480 --> 00:24:36,799
builder is a set of it's the base uh

00:24:35,440 --> 00:24:39,200
what we call the base

00:24:36,799 --> 00:24:40,400
stack image which is effectively just an

00:24:39,200 --> 00:24:43,200
ubuntu bionic

00:24:40,400 --> 00:24:44,080
uh image that we grab upstream from

00:24:43,200 --> 00:24:46,159
canonical

00:24:44,080 --> 00:24:48,080
and a set of build packs as well that

00:24:46,159 --> 00:24:50,559
are compatible with that language family

00:24:48,080 --> 00:24:51,760
so maybe ron if you wanted to open up

00:24:50,559 --> 00:24:54,240
like a

00:24:51,760 --> 00:24:55,120
separate window and just run the pax cli

00:24:54,240 --> 00:24:56,640
a little bit

00:24:55,120 --> 00:24:58,640
i think it would be interesting to just

00:24:56,640 --> 00:25:00,559
kind of show what's inside of one of

00:24:58,640 --> 00:25:05,520
these builders so if you run like the

00:25:00,559 --> 00:25:05,520
uh pack inspect builder command

00:25:09,600 --> 00:25:15,840
and just that name of the builder yep

00:25:12,840 --> 00:25:15,840
exactly

00:25:25,120 --> 00:25:29,039
awesome so now if you scroll up a little

00:25:28,000 --> 00:25:31,200
more to like the

00:25:29,039 --> 00:25:33,360
first group in there maybe group one or

00:25:31,200 --> 00:25:34,159
something we could see that all the way

00:25:33,360 --> 00:25:37,440
up top

00:25:34,159 --> 00:25:39,679
there's the uh

00:25:37,440 --> 00:25:41,279
a list of every build pack itself you

00:25:39,679 --> 00:25:43,840
can see that there's quite a lot maybe

00:25:41,279 --> 00:25:45,279
like 50 or 60 different build packs and

00:25:43,840 --> 00:25:46,159
then above that you're seeing the

00:25:45,279 --> 00:25:48,320
different the

00:25:46,159 --> 00:25:49,520
base os layer itself the run image

00:25:48,320 --> 00:25:51,120
that's being used

00:25:49,520 --> 00:25:53,279
which in this case is what we call the

00:25:51,120 --> 00:25:55,919
base operating system image

00:25:53,279 --> 00:25:57,279
and now the last kind of important bit

00:25:55,919 --> 00:25:59,360
here as we scroll down

00:25:57,279 --> 00:26:01,279
is the kind of group section inside of

00:25:59,360 --> 00:26:04,159
the builder

00:26:01,279 --> 00:26:05,440
where the group section is every single

00:26:04,159 --> 00:26:07,120
language configuration

00:26:05,440 --> 00:26:08,640
supported in the given builder so you

00:26:07,120 --> 00:26:10,720
can see here we have

00:26:08,640 --> 00:26:11,840
several configurations around say a ruby

00:26:10,720 --> 00:26:14,240
build back maybe

00:26:11,840 --> 00:26:14,880
different server configurations same

00:26:14,240 --> 00:26:16,880
thing with

00:26:14,880 --> 00:26:18,640
net core and if you keep going down the

00:26:16,880 --> 00:26:21,679
one we care about i think for this

00:26:18,640 --> 00:26:22,960
uh for this app is java itself and you

00:26:21,679 --> 00:26:26,000
can see it kind of

00:26:22,960 --> 00:26:27,679
ordering here on build packs um

00:26:26,000 --> 00:26:29,200
so now i think this is the kind of step

00:26:27,679 --> 00:26:31,679
in that tecton

00:26:29,200 --> 00:26:32,720
ci pipeline that you can plug in any

00:26:31,679 --> 00:26:35,360
builder really

00:26:32,720 --> 00:26:35,840
it doesn't need to be a piquetto builder

00:26:35,360 --> 00:26:38,640
that we

00:26:35,840 --> 00:26:40,159
ship or heroku or google for that matter

00:26:38,640 --> 00:26:42,080
users can even you know

00:26:40,159 --> 00:26:44,000
customize and define their own builders

00:26:42,080 --> 00:26:45,760
if they want and just

00:26:44,000 --> 00:26:47,600
publish it to any registry and they can

00:26:45,760 --> 00:26:49,360
just reference it in that pipeline

00:26:47,600 --> 00:26:50,960
and yeah as you're kind of running here

00:26:49,360 --> 00:26:52,799
the pack suggest builders command that's

00:26:50,960 --> 00:26:55,279
going to suggest

00:26:52,799 --> 00:26:56,720
all of the what the cnb project calls

00:26:55,279 --> 00:27:00,400
like all of the

00:26:56,720 --> 00:27:00,400
trusted builders that you can use

00:27:02,400 --> 00:27:08,159
great yeah i mean every time

00:27:05,679 --> 00:27:09,679
something says pacquiao on the screen

00:27:08,159 --> 00:27:11,600
i'm going to just

00:27:09,679 --> 00:27:13,279
call kashyap out and say hey cushion can

00:27:11,600 --> 00:27:17,200
you explain this for us

00:27:13,279 --> 00:27:21,279
so um don't please don't mind

00:27:17,200 --> 00:27:24,960
um and not to put you

00:27:21,279 --> 00:27:27,120
in a spot there but sounds good keep it

00:27:24,960 --> 00:27:30,960
going

00:27:27,120 --> 00:27:34,880
so yeah so this pipeline basically

00:27:30,960 --> 00:27:38,799
will pick up um on these two

00:27:34,880 --> 00:27:39,760
steps and as you can see here the output

00:27:38,799 --> 00:27:43,279
is

00:27:39,760 --> 00:27:46,080
an oci compatible uh container image

00:27:43,279 --> 00:27:49,679
that gets built and like we mentioned

00:27:46,080 --> 00:27:53,360
way up top here uh it will get pushed

00:27:49,679 --> 00:27:54,559
to this registry with this name which we

00:27:53,360 --> 00:27:58,799
can also

00:27:54,559 --> 00:27:58,799
see so

00:27:59,679 --> 00:28:03,120
applying this is again cube ct i'll just

00:28:02,159 --> 00:28:06,480
apply

00:28:03,120 --> 00:28:09,840
um and i

00:28:06,480 --> 00:28:12,399
did this just before um starting the

00:28:09,840 --> 00:28:17,840
demo call so we should be good now

00:28:12,399 --> 00:28:17,840
what i will also do is create

00:28:17,919 --> 00:28:25,919
this canines

00:28:23,039 --> 00:28:27,840
thing so canines if folks are not

00:28:25,919 --> 00:28:30,799
familiar is like a

00:28:27,840 --> 00:28:31,360
nifty tool that can showcase what's

00:28:30,799 --> 00:28:34,399
actually

00:28:31,360 --> 00:28:35,600
inside a kubernetes cluster so the

00:28:34,399 --> 00:28:39,840
reason i bring this up

00:28:35,600 --> 00:28:42,720
is because as we start to run

00:28:39,840 --> 00:28:42,720
different things

00:28:43,360 --> 00:28:47,440
we can we can see very clearly you know

00:28:46,159 --> 00:28:50,240
what parts

00:28:47,440 --> 00:28:51,600
uh get created and we can examine the

00:28:50,240 --> 00:28:53,600
parts for

00:28:51,600 --> 00:28:55,760
log output and that will actually help

00:28:53,600 --> 00:28:55,760
us

00:28:56,960 --> 00:29:03,679
help us learn what the heck is going on

00:29:00,480 --> 00:29:07,440
inside this whole build process so

00:29:03,679 --> 00:29:07,440
i'm just going to have that running

00:29:07,520 --> 00:29:14,320
somewhere here so it's

00:29:11,200 --> 00:29:15,200
visible to us is there any way is there

00:29:14,320 --> 00:29:17,679
any way you can

00:29:15,200 --> 00:29:20,720
arrange your thumbnail side by side they

00:29:17,679 --> 00:29:20,720
should be able to do that

00:29:20,799 --> 00:29:27,039
yeah there is but i

00:29:24,000 --> 00:29:28,320
i just want the commands to be visible

00:29:27,039 --> 00:29:30,240
in the middle here

00:29:28,320 --> 00:29:31,679
so side will go all the way to the

00:29:30,240 --> 00:29:33,679
bottom um

00:29:31,679 --> 00:29:35,919
not a big fan of that to be honest so

00:29:33,679 --> 00:29:40,559
you can i think you can clay

00:29:35,919 --> 00:29:44,640
you can clear the existing commands

00:29:40,559 --> 00:29:44,640
yeah yeah let me try that

00:29:46,080 --> 00:29:50,240
is this better yep

00:29:52,840 --> 00:29:59,200
so

00:29:54,880 --> 00:29:59,200
i am just going to run this

00:30:00,399 --> 00:30:04,600
by using oh but let me show you what's

00:30:02,960 --> 00:30:09,840
in the

00:30:04,600 --> 00:30:09,840
run.yaml first so

00:30:13,520 --> 00:30:19,760
so this pipeline run will pull together

00:30:16,960 --> 00:30:21,520
all the different pieces that we were

00:30:19,760 --> 00:30:24,000
talking about

00:30:21,520 --> 00:30:24,640
for like the past 20 odd minutes which

00:30:24,000 --> 00:30:26,960
is

00:30:24,640 --> 00:30:29,360
um it will take the service account that

00:30:26,960 --> 00:30:31,840
we generated

00:30:29,360 --> 00:30:33,840
it will make use of the pipeline that we

00:30:31,840 --> 00:30:35,679
have in place

00:30:33,840 --> 00:30:38,720
do all of the authentication wherever

00:30:35,679 --> 00:30:43,520
necessary with the service account

00:30:38,720 --> 00:30:43,520
it will store the

00:30:43,919 --> 00:30:48,640
output of git clone in this persistent

00:30:47,520 --> 00:30:51,360
volume

00:30:48,640 --> 00:30:52,880
it will then run the build and then it

00:30:51,360 --> 00:30:56,640
will save the app image

00:30:52,880 --> 00:30:59,279
here yeah

00:30:56,640 --> 00:30:59,279
and then

00:31:01,279 --> 00:31:05,600
it will write this stuff back to the

00:31:03,519 --> 00:31:08,480
github container registry

00:31:05,600 --> 00:31:10,240
using the service account that we

00:31:08,480 --> 00:31:12,960
created so that's

00:31:10,240 --> 00:31:15,120
that's basically it all right so when

00:31:12,960 --> 00:31:19,200
now when i run this

00:31:15,120 --> 00:31:23,200
which is cube cpl

00:31:19,200 --> 00:31:23,200
apply just fine

00:31:28,960 --> 00:31:37,840
so you can see like a bunch of cards

00:31:33,120 --> 00:31:37,840
get created and get consumed here

00:31:41,279 --> 00:31:44,159
that's quickly

00:31:44,880 --> 00:31:47,840
if

00:31:51,600 --> 00:31:55,360
you know i've been trying to figure out

00:31:53,200 --> 00:32:01,840
how k9s works

00:31:55,360 --> 00:32:01,840
until today i still have not figured out

00:32:13,120 --> 00:32:20,240
is initializing here so basically um

00:32:16,159 --> 00:32:24,320
the logs here tell you that um

00:32:20,240 --> 00:32:27,919
this code from that github repo has been

00:32:24,320 --> 00:32:28,399
checked out and then it will close the

00:32:27,919 --> 00:32:32,080
card

00:32:28,399 --> 00:32:33,440
and then we wait for this to initialize

00:32:32,080 --> 00:32:43,840
and then

00:32:33,440 --> 00:32:43,840
it will start running the build itself

00:32:47,039 --> 00:32:50,720
i wonder if you could scroll up a little

00:32:48,799 --> 00:32:52,720
in the log output

00:32:50,720 --> 00:32:54,399
this might be a good time to kind of

00:32:52,720 --> 00:32:55,279
walk through the build process a little

00:32:54,399 --> 00:32:57,840
bit

00:32:55,279 --> 00:32:57,840
um

00:33:00,399 --> 00:33:05,600
maybe we need to wait a little uh

00:33:03,440 --> 00:33:07,679
there should be a way to toggle auto

00:33:05,600 --> 00:33:10,320
scroll with this yeah

00:33:07,679 --> 00:33:11,760
okay we don't need to see maven

00:33:10,320 --> 00:33:15,679
downloading the whole internet

00:33:11,760 --> 00:33:17,840
so yeah yeah it's quite a lot

00:33:15,679 --> 00:33:19,840
um so i think the first important phase

00:33:17,840 --> 00:33:21,039
here we have going on is detection

00:33:19,840 --> 00:33:24,159
itself which is like

00:33:21,039 --> 00:33:26,240
a really important part of the build

00:33:24,159 --> 00:33:28,480
pack lifecycle this is where

00:33:26,240 --> 00:33:29,519
it's looking into the builder itself and

00:33:28,480 --> 00:33:32,399
understanding like

00:33:29,519 --> 00:33:34,080
what kind of app do i have today so

00:33:32,399 --> 00:33:36,000
chances are

00:33:34,080 --> 00:33:37,600
i didn't get to take a look at that

00:33:36,000 --> 00:33:38,000
sample java app that we're building but

00:33:37,600 --> 00:33:40,799
chances

00:33:38,000 --> 00:33:42,399
are maybe it's a compiled char file or

00:33:40,799 --> 00:33:43,440
or something like that and you can see

00:33:42,399 --> 00:33:45,200
here

00:33:43,440 --> 00:33:47,440
those all the build packs that are

00:33:45,200 --> 00:33:48,000
participating like bellsoft liberica is

00:33:47,440 --> 00:33:51,279
the

00:33:48,000 --> 00:33:53,600
uh jvm itself maven uh

00:33:51,279 --> 00:33:55,120
spring boot and things like that where

00:33:53,600 --> 00:33:56,080
every single build pack like i kind of

00:33:55,120 --> 00:33:59,120
said earlier

00:33:56,080 --> 00:34:00,960
serves one single purpose and

00:33:59,120 --> 00:34:02,399
that's what's kind of falling in through

00:34:00,960 --> 00:34:04,080
the build process

00:34:02,399 --> 00:34:05,840
in the next two phases they're right

00:34:04,080 --> 00:34:07,600
underneath you have like the analyzing

00:34:05,840 --> 00:34:08,399
and restore phases where this is just

00:34:07,600 --> 00:34:10,639
kind of

00:34:08,399 --> 00:34:11,760
it's meant for like caching purposes

00:34:10,639 --> 00:34:14,240
looking at

00:34:11,760 --> 00:34:15,040
does an image called the keto demo exist

00:34:14,240 --> 00:34:17,679
already

00:34:15,040 --> 00:34:19,440
and if it does exist it will like grab

00:34:17,679 --> 00:34:20,320
all of that image metadata and make it

00:34:19,440 --> 00:34:24,079
available

00:34:20,320 --> 00:34:25,200
in the build process so that way if say

00:34:24,079 --> 00:34:27,040
i don't know if we'll have time right

00:34:25,200 --> 00:34:29,839
now but after we finish this build if we

00:34:27,040 --> 00:34:32,480
wanted to make one tiny change to my app

00:34:29,839 --> 00:34:34,639
and like re-trigger the whole build this

00:34:32,480 --> 00:34:36,399
is where you'll see start to see caching

00:34:34,639 --> 00:34:38,480
improvements in the build process like

00:34:36,399 --> 00:34:40,000
so for instance if only my app image

00:34:38,480 --> 00:34:41,599
changes

00:34:40,000 --> 00:34:43,760
the build pack layer and the operating

00:34:41,599 --> 00:34:46,079
system layer are going to remain the

00:34:43,760 --> 00:34:49,359
same throughout it so you'll see faster

00:34:46,079 --> 00:34:50,240
rebuilds and stuff um now right

00:34:49,359 --> 00:34:52,079
underneath this

00:34:50,240 --> 00:34:53,520
you have the actual build process itself

00:34:52,079 --> 00:34:54,560
where it's taking all of those build

00:34:53,520 --> 00:34:56,639
packs that were

00:34:54,560 --> 00:34:58,560
kind of detected on and you can see

00:34:56,639 --> 00:34:59,280
through the log output what's kind of

00:34:58,560 --> 00:35:02,640
happening

00:34:59,280 --> 00:35:04,000
and um do you keep scrolling down a

00:35:02,640 --> 00:35:06,560
little bit i think

00:35:04,000 --> 00:35:08,640
we had a ton of logs right around just

00:35:06,560 --> 00:35:10,720
downloading

00:35:08,640 --> 00:35:12,480
all of the dependencies from uh from

00:35:10,720 --> 00:35:12,960
maven that are kind of referenced inside

00:35:12,480 --> 00:35:15,359
of this

00:35:12,960 --> 00:35:16,640
uh application and this will go on

00:35:15,359 --> 00:35:19,839
forever because it's

00:35:16,640 --> 00:35:23,599
a large java app but

00:35:19,839 --> 00:35:23,599
because we skip through this

00:35:36,720 --> 00:35:40,640
are there more logs under that uh no so

00:35:40,000 --> 00:35:46,000
i think

00:35:40,640 --> 00:35:46,000
the build is done

00:35:48,480 --> 00:35:59,839
let's see what's happening

00:36:12,960 --> 00:36:15,280
nope

00:36:19,920 --> 00:36:27,839
i think the whole run completed um

00:36:24,160 --> 00:36:27,839
just give me one second

00:36:29,920 --> 00:36:34,880
yeah we might have just missed it in the

00:36:31,119 --> 00:36:34,880
log output i wonder if it's on the

00:36:38,839 --> 00:36:41,839
registry

00:36:53,839 --> 00:37:00,720
yeah it got published

00:36:57,280 --> 00:37:03,200
a few minutes ago let's see if

00:37:00,720 --> 00:37:03,200
we can

00:37:04,160 --> 00:37:09,839
fetch the logs here

00:37:45,599 --> 00:37:51,839
should be

00:37:52,320 --> 00:37:55,760
um let's see

00:38:01,280 --> 00:38:05,040
do i have i'm

00:38:16,839 --> 00:38:19,839
um

00:38:45,599 --> 00:38:52,800
yeah so the dashboard i think is a

00:38:50,160 --> 00:38:54,640
better place to look but let me also

00:38:52,800 --> 00:38:57,520
looking for

00:38:54,640 --> 00:38:57,520
see your fees

00:38:58,839 --> 00:39:15,839
okay nope

00:39:32,800 --> 00:39:36,079
were you just trying to pull up the logs

00:39:34,720 --> 00:39:39,119
for that that

00:39:36,079 --> 00:39:43,839
yeah i was trying to um

00:39:39,119 --> 00:39:43,839
not having

00:39:44,400 --> 00:39:50,079
yeah not a big deal if not uh because

00:39:48,160 --> 00:39:51,440
we could probably just grab that that

00:39:50,079 --> 00:39:53,200
image that was published and

00:39:51,440 --> 00:39:57,839
you know take a look at some stuff on

00:39:53,200 --> 00:39:57,839
that as well

00:40:08,839 --> 00:40:11,839
sure

00:40:22,839 --> 00:40:25,839
okay

00:40:32,560 --> 00:40:36,000
what are you looking for what are you

00:40:33,520 --> 00:40:36,000
trying to do

00:40:36,839 --> 00:40:42,880
um yeah so

00:40:39,520 --> 00:40:46,480
it shows logs about

00:40:42,880 --> 00:40:50,079
the image sensors yeah this one

00:40:46,480 --> 00:40:54,240
the images themselves being created

00:40:50,079 --> 00:40:57,359
so i think we should do this yep um

00:40:54,240 --> 00:41:00,079
so oh yeah this is perfect yeah maven

00:40:57,359 --> 00:41:02,720
was downloading the internet for us

00:41:00,079 --> 00:41:04,240
and then yeah let's just go to the very

00:41:02,720 --> 00:41:05,280
end of it

00:41:04,240 --> 00:41:07,119
and we could kind of see what's

00:41:05,280 --> 00:41:10,319
happening at the end yeah can you

00:41:07,119 --> 00:41:10,319
increase this font size

00:41:15,760 --> 00:41:22,960
becoming older

00:41:20,560 --> 00:41:24,480
uh so cool so if you scroll down a

00:41:22,960 --> 00:41:27,440
little bit more

00:41:24,480 --> 00:41:29,119
um past the uh build process finally

00:41:27,440 --> 00:41:30,960
we'll see the export

00:41:29,119 --> 00:41:33,119
phase here where you can see every

00:41:30,960 --> 00:41:34,400
single build pack in the build process

00:41:33,119 --> 00:41:36,240
that participated

00:41:34,400 --> 00:41:38,720
those layers are getting added in and

00:41:36,240 --> 00:41:41,839
then it will put together that

00:41:38,720 --> 00:41:43,520
final uh app image that you can see that

00:41:41,839 --> 00:41:45,680
you know the image is saved and it's

00:41:43,520 --> 00:41:49,359
saved to the registry that you

00:41:45,680 --> 00:41:53,680
you mentioned the uh the keto demo on on

00:41:49,359 --> 00:41:53,680
github registry which is pretty neat

00:41:55,680 --> 00:42:03,440
cool um so i just had a

00:41:59,680 --> 00:42:05,680
question or two so um

00:42:03,440 --> 00:42:07,200
it says 7 out of 18 build packs

00:42:05,680 --> 00:42:12,000
participating

00:42:07,200 --> 00:42:15,119
um any chance you could clear

00:42:12,000 --> 00:42:17,200
what that actually is what are these 18

00:42:15,119 --> 00:42:20,240
and why did it pick seven and

00:42:17,200 --> 00:42:22,000
how does that even happen

00:42:20,240 --> 00:42:24,000
yeah so chances are i'm not super

00:42:22,000 --> 00:42:25,200
familiar with java but like inside of

00:42:24,000 --> 00:42:27,920
the java

00:42:25,200 --> 00:42:28,400
buildback ordering there's probably a

00:42:27,920 --> 00:42:30,400
lot of

00:42:28,400 --> 00:42:32,640
option what we call optional build packs

00:42:30,400 --> 00:42:34,560
inside of it so what we look at as an

00:42:32,640 --> 00:42:35,760
optional buildback or actually could you

00:42:34,560 --> 00:42:39,280
just pull up the

00:42:35,760 --> 00:42:39,920
uh java build pack itself really fast so

00:42:39,280 --> 00:42:43,119
we could

00:42:39,920 --> 00:42:44,880
take a look uh we could do a i think

00:42:43,119 --> 00:42:47,839
there's a command pack inspect build

00:42:44,880 --> 00:42:47,839
block or something like that

00:42:52,720 --> 00:42:59,839
might be insp yeah that one

00:43:00,880 --> 00:43:09,760
and then this should just be picado

00:43:04,880 --> 00:43:09,760
build packs java and without the dash in

00:43:10,839 --> 00:43:16,800
it that

00:43:13,680 --> 00:43:16,800
i believe so

00:43:24,839 --> 00:43:31,040
um

00:43:27,599 --> 00:43:32,640
here we go um so in this itself

00:43:31,040 --> 00:43:34,560
you could see that in that group

00:43:32,640 --> 00:43:36,560
ordering almost

00:43:34,560 --> 00:43:38,800
all of the build packs except for

00:43:36,560 --> 00:43:41,599
belsoft liberica which is the jvm

00:43:38,800 --> 00:43:43,440
you need that for any java app or marked

00:43:41,599 --> 00:43:44,400
as optional so the reason why a lot of

00:43:43,440 --> 00:43:47,119
things don't

00:43:44,400 --> 00:43:48,800
participate is one example might be that

00:43:47,119 --> 00:43:49,599
image labels build back you see at the

00:43:48,800 --> 00:43:51,359
very bottom

00:43:49,599 --> 00:43:53,280
or environment variables or stuff like

00:43:51,359 --> 00:43:55,280
that those are more opt-in

00:43:53,280 --> 00:43:57,359
build packs that say you want to set

00:43:55,280 --> 00:43:59,680
environment variables on your uh

00:43:57,359 --> 00:44:00,880
on your app image or if you want to set

00:43:59,680 --> 00:44:03,760
oci compliant

00:44:00,880 --> 00:44:05,599
image labels on your image itself you'd

00:44:03,760 --> 00:44:07,359
have to pass some configuration itself

00:44:05,599 --> 00:44:09,280
into the build process like

00:44:07,359 --> 00:44:10,560
uh to indicate that you want those build

00:44:09,280 --> 00:44:12,480
packs to participate

00:44:10,560 --> 00:44:14,960
so that's why you're just seeing like a

00:44:12,480 --> 00:44:16,000
few of the that so seven out of 18 here

00:44:14,960 --> 00:44:19,200
participate it's just

00:44:16,000 --> 00:44:20,000
end of the day whatever the um build

00:44:19,200 --> 00:44:23,839
process

00:44:20,000 --> 00:44:23,839
uh detects on

00:44:27,200 --> 00:44:31,040
okay so there are 18 build packs here

00:44:29,839 --> 00:44:34,720
and

00:44:31,040 --> 00:44:34,720
basically the pretty pack

00:44:35,440 --> 00:44:39,040
build process is smart enough to figure

00:44:38,720 --> 00:44:41,440
out

00:44:39,040 --> 00:44:43,760
i guess which of these it needs in which

00:44:41,440 --> 00:44:47,680
of these it doesn't and so

00:44:43,760 --> 00:44:47,680
it just mixes and matches based on

00:44:47,839 --> 00:44:52,319
what it detects basically yeah exactly

00:44:51,520 --> 00:44:53,920
and like i

00:44:52,319 --> 00:44:55,839
i think one thing that's interesting

00:44:53,920 --> 00:44:57,200
here if you're if you kind of remember

00:44:55,839 --> 00:45:00,560
the old world of

00:44:57,200 --> 00:45:03,040
the cloud foundry java build pack maybe

00:45:00,560 --> 00:45:03,680
it was just one monolithic build pack

00:45:03,040 --> 00:45:05,359
with

00:45:03,680 --> 00:45:07,119
not all this functionality but a good

00:45:05,359 --> 00:45:07,599
amount of this functionality inside of

00:45:07,119 --> 00:45:10,319
it

00:45:07,599 --> 00:45:11,440
which meant that if you wanted to remove

00:45:10,319 --> 00:45:13,760
one little piece

00:45:11,440 --> 00:45:15,200
or if you want to use maybe a different

00:45:13,760 --> 00:45:17,280
um

00:45:15,200 --> 00:45:19,680
jvm distribution or make tiny little

00:45:17,280 --> 00:45:20,720
tweaks perhaps you'd have to like fork

00:45:19,680 --> 00:45:23,359
that whole

00:45:20,720 --> 00:45:24,079
java build back in the past versus now

00:45:23,359 --> 00:45:27,280
with

00:45:24,079 --> 00:45:30,079
with cnbs and picato specifically it's

00:45:27,280 --> 00:45:32,240
really just a matter of creating another

00:45:30,079 --> 00:45:34,560
builder config or another build pack

00:45:32,240 --> 00:45:37,200
config that references whatever

00:45:34,560 --> 00:45:38,960
uh like sub build packs you want inside

00:45:37,200 --> 00:45:42,079
of it so it's very easy to like

00:45:38,960 --> 00:45:43,680
customize a given um

00:45:42,079 --> 00:45:48,160
build pack just based on your general

00:45:43,680 --> 00:45:48,160
like app configuration and app use cases

00:45:51,200 --> 00:45:58,160
neat do we want to check if this

00:45:56,900 --> 00:46:03,040
[Music]

00:45:58,160 --> 00:46:03,040
if this container actually works somehow

00:46:05,760 --> 00:46:15,839
yeah that would be cool so

00:46:08,880 --> 00:46:15,839
is that like a

00:46:16,160 --> 00:46:18,880
docker run

00:46:20,000 --> 00:46:30,480
and maybe

00:46:28,240 --> 00:46:30,480
okay

00:46:34,319 --> 00:46:40,319
so this in terms of

00:46:37,839 --> 00:46:41,280
working with container runtimes whatever

00:46:40,319 --> 00:46:44,319
is the output

00:46:41,280 --> 00:46:47,680
from packet or build packs can just

00:46:44,319 --> 00:46:50,240
like work right so

00:46:47,680 --> 00:46:51,520
there's like if i'm used to doing like a

00:46:50,240 --> 00:46:53,680
docker build and i

00:46:51,520 --> 00:46:54,560
use pacquiao instead or pack build

00:46:53,680 --> 00:46:57,680
instead

00:46:54,560 --> 00:46:59,200
then uh the the rest of the workflow can

00:46:57,680 --> 00:47:02,560
remain exactly the same

00:46:59,200 --> 00:47:03,760
right yeah exactly and we kind of saw

00:47:02,560 --> 00:47:06,640
that i think with the

00:47:03,760 --> 00:47:07,119
uh the techcon pipeline that you put

00:47:06,640 --> 00:47:09,280
together

00:47:07,119 --> 00:47:11,440
that like perhaps if i have an existing

00:47:09,280 --> 00:47:11,839
cicd flow it's just a matter of fitting

00:47:11,440 --> 00:47:15,200
in it

00:47:11,839 --> 00:47:18,319
fitting in this build tax task itself

00:47:15,200 --> 00:47:19,760
into my existing like ci pipeline um

00:47:18,319 --> 00:47:21,599
which makes it like very easy

00:47:19,760 --> 00:47:25,839
just to fit into existing build process

00:47:21,599 --> 00:47:25,839
and stuff

00:47:27,760 --> 00:47:32,960
they seem to have something else running

00:47:29,520 --> 00:47:32,960
on 8080 um

00:47:33,760 --> 00:47:40,559
but yeah it looks like

00:47:36,960 --> 00:47:43,359
you know the we have started

00:47:40,559 --> 00:47:43,359
cue the process

00:47:49,440 --> 00:47:53,839
i mean we know that the container works

00:47:51,599 --> 00:47:53,839
so

00:47:56,559 --> 00:48:02,319
so so kashyap what would be like some of

00:47:59,839 --> 00:48:05,680
the major differences between

00:48:02,319 --> 00:48:08,960
what gets built with docker build versus

00:48:05,680 --> 00:48:10,079
what gets built with pack build or using

00:48:08,960 --> 00:48:14,079
pochetto

00:48:10,079 --> 00:48:14,079
inside of tekton at the end of the day

00:48:14,559 --> 00:48:18,079
that's a good question i think the first

00:48:16,319 --> 00:48:18,800
thing we saw at the very end of the

00:48:18,079 --> 00:48:21,040
process

00:48:18,800 --> 00:48:22,079
is you really didn't need to pass any

00:48:21,040 --> 00:48:25,119
configuration

00:48:22,079 --> 00:48:26,960
beyond just the tecton

00:48:25,119 --> 00:48:28,880
build packs pipeline itself so that

00:48:26,960 --> 00:48:29,359
might be a one-time cost of getting that

00:48:28,880 --> 00:48:32,800
set up

00:48:29,359 --> 00:48:34,000
in your citd flows and just the app that

00:48:32,800 --> 00:48:36,319
we're pointing to

00:48:34,000 --> 00:48:38,160
so we didn't really define a docker file

00:48:36,319 --> 00:48:39,359
or anything like that saying here's my

00:48:38,160 --> 00:48:41,200
base os that i want

00:48:39,359 --> 00:48:42,720
here are all the commands i want to run

00:48:41,200 --> 00:48:44,800
here's what my final like

00:48:42,720 --> 00:48:46,880
start command might look like so that

00:48:44,800 --> 00:48:47,359
you know saves some time and things like

00:48:46,880 --> 00:48:49,760
that

00:48:47,359 --> 00:48:50,640
um it's not necessarily zero

00:48:49,760 --> 00:48:52,240
configuration

00:48:50,640 --> 00:48:54,000
because we did see that like certain

00:48:52,240 --> 00:48:56,160
build packs did not participate

00:48:54,000 --> 00:48:57,680
and like you may need to pass certain

00:48:56,160 --> 00:48:58,559
like environment variables and stuff

00:48:57,680 --> 00:49:00,319
just to

00:48:58,559 --> 00:49:02,079
set up some some configuration but i

00:49:00,319 --> 00:49:04,640
think that's the cool part about like

00:49:02,079 --> 00:49:05,440
just getting started with build tax in

00:49:04,640 --> 00:49:07,599
general or

00:49:05,440 --> 00:49:09,119
just being able to build and having an

00:49:07,599 --> 00:49:12,800
image at the end of the day that

00:49:09,119 --> 00:49:16,079
is is runnable now on the kind of

00:49:12,800 --> 00:49:19,280
day two side with build packs

00:49:16,079 --> 00:49:21,200
there's a concept in um cloud native of

00:49:19,280 --> 00:49:21,760
cloud native build packs called rebasing

00:49:21,200 --> 00:49:23,839
itself

00:49:21,760 --> 00:49:25,839
so when we're patching the operating

00:49:23,839 --> 00:49:28,640
system base layer

00:49:25,839 --> 00:49:30,079
the concept of rebasing just means that

00:49:28,640 --> 00:49:33,680
the current app image we have

00:49:30,079 --> 00:49:34,079
is pointing to a given uh docker image

00:49:33,680 --> 00:49:36,240
layer

00:49:34,079 --> 00:49:37,520
that's pointing to say a certain

00:49:36,240 --> 00:49:39,920
shawsome of my

00:49:37,520 --> 00:49:40,960
uh operating system base image so if

00:49:39,920 --> 00:49:43,040
there is a cve

00:49:40,960 --> 00:49:45,119
or anything like that that ubuntu is

00:49:43,040 --> 00:49:48,720
patching

00:49:45,119 --> 00:49:50,720
that actual day two operation of just

00:49:48,720 --> 00:49:52,400
uh patching your app image at the end of

00:49:50,720 --> 00:49:53,839
the day is very simple and it's just a

00:49:52,400 --> 00:49:56,319
matter of running like

00:49:53,839 --> 00:49:57,280
a pack rebase command and i believe all

00:49:56,319 --> 00:50:00,079
these uh

00:49:57,280 --> 00:50:01,920
ci integrations like the tecton pipeline

00:50:00,079 --> 00:50:03,440
should just have a way to configure

00:50:01,920 --> 00:50:05,520
the pipeline to like automatically

00:50:03,440 --> 00:50:07,359
rebase anytime there's a

00:50:05,520 --> 00:50:10,079
vulnerability that's shipped inside of

00:50:07,359 --> 00:50:12,079
the operating system image

00:50:10,079 --> 00:50:14,240
i think that's a huge one in just

00:50:12,079 --> 00:50:16,079
simplifying like

00:50:14,240 --> 00:50:17,680
your day two operations and stuff like

00:50:16,079 --> 00:50:18,400
that apart from that there are a couple

00:50:17,680 --> 00:50:20,720
other like

00:50:18,400 --> 00:50:22,319
very cool and interesting features uh

00:50:20,720 --> 00:50:23,520
that build packs and picatos

00:50:22,319 --> 00:50:26,319
specifically offer

00:50:23,520 --> 00:50:27,200
a big one here might be like the bill of

00:50:26,319 --> 00:50:29,040
materials

00:50:27,200 --> 00:50:30,720
that we provide throughout the build

00:50:29,040 --> 00:50:32,559
packs so bill and materials are

00:50:30,720 --> 00:50:35,760
effectively a

00:50:32,559 --> 00:50:37,520
um think of it like a manifest of

00:50:35,760 --> 00:50:39,119
every single dependency inside of my

00:50:37,520 --> 00:50:41,280
application and

00:50:39,119 --> 00:50:43,200
everything that was used to build an app

00:50:41,280 --> 00:50:44,800
itself so i don't know if you uh

00:50:43,200 --> 00:50:46,480
if we have time but if you want to try

00:50:44,800 --> 00:50:48,640
to run the um

00:50:46,480 --> 00:50:50,079
pack inspect image command on this image

00:50:48,640 --> 00:50:52,319
perhaps we could like kind of take a

00:50:50,079 --> 00:50:55,440
look at

00:50:52,319 --> 00:50:57,520
what the build materials looks like

00:50:55,440 --> 00:50:58,640
um yeah we have time we have about 10

00:50:57,520 --> 00:51:01,760
minutes

00:50:58,640 --> 00:51:06,400
like that oh perfect

00:51:01,760 --> 00:51:06,400
uh it's the pack inspect dash image

00:51:06,839 --> 00:51:09,839
command

00:51:12,960 --> 00:51:19,520
okay um

00:51:16,559 --> 00:51:21,280
if we want to make that like json

00:51:19,520 --> 00:51:23,839
readable or something we can take a look

00:51:21,280 --> 00:51:23,839
at what's going on

00:51:40,240 --> 00:51:46,640
cool so first up up top there um

00:51:43,760 --> 00:51:48,000
we're kind of seeing every single build

00:51:46,640 --> 00:51:51,040
pack itself

00:51:48,000 --> 00:51:53,040
that uh that participated

00:51:51,040 --> 00:51:54,640
inside of the process i think this is

00:51:53,040 --> 00:51:55,359
interesting because you're seeing things

00:51:54,640 --> 00:51:59,680
like

00:51:55,359 --> 00:52:01,680
uh on like line 25 and 26 there

00:51:59,680 --> 00:52:03,680
what type of licenses are the

00:52:01,680 --> 00:52:06,079
dependencies inside of my application

00:52:03,680 --> 00:52:07,440
are the uh build pack dependencies

00:52:06,079 --> 00:52:10,640
themselves using

00:52:07,440 --> 00:52:13,359
and if we scroll down some more um

00:52:10,640 --> 00:52:15,359
we'll even see info into like all of the

00:52:13,359 --> 00:52:16,960
application modules themselves

00:52:15,359 --> 00:52:19,280
but this is all still the buildback

00:52:16,960 --> 00:52:22,240
stuff

00:52:19,280 --> 00:52:24,559
um yeah now in this dependency section

00:52:22,240 --> 00:52:27,119
we're seeing all the metadata of like

00:52:24,559 --> 00:52:28,960
what we saw uh in the build process

00:52:27,119 --> 00:52:30,079
earlier going to made in central and

00:52:28,960 --> 00:52:31,839
downloading

00:52:30,079 --> 00:52:33,599
all of the dependencies their versions

00:52:31,839 --> 00:52:35,040
shawsoms and things like that

00:52:33,599 --> 00:52:36,720
so at the end of the day it's very easy

00:52:35,040 --> 00:52:38,000
to go through if you have to and just

00:52:36,720 --> 00:52:39,599
kind of audit what

00:52:38,000 --> 00:52:41,200
dependencies are in my application and

00:52:39,599 --> 00:52:47,839
stuff like that which is a pretty

00:52:41,200 --> 00:52:47,839
powerful feature i think

00:52:49,200 --> 00:52:54,559
so this is one of those big

00:52:51,760 --> 00:52:56,319
differentiators i guess between

00:52:54,559 --> 00:52:58,000
what comes out of docker build versus

00:52:56,319 --> 00:53:01,440
what comes out of battery

00:52:58,000 --> 00:53:04,480
right yeah i see i see this is a big one

00:53:01,440 --> 00:53:06,160
and um maybe the last one i'll mention

00:53:04,480 --> 00:53:07,760
before we could jump into something else

00:53:06,160 --> 00:53:09,599
might be like

00:53:07,760 --> 00:53:11,520
just the rebuilding of your application

00:53:09,599 --> 00:53:13,440
itself uh like

00:53:11,520 --> 00:53:14,640
we now have a techton pipeline that's

00:53:13,440 --> 00:53:16,480
set up with

00:53:14,640 --> 00:53:18,559
maybe a little more extra configuration

00:53:16,480 --> 00:53:20,559
can monitor for

00:53:18,559 --> 00:53:22,400
changes in that app anytime that app

00:53:20,559 --> 00:53:23,359
changes we can just have that techton

00:53:22,400 --> 00:53:25,599
pipeline

00:53:23,359 --> 00:53:26,480
trigger or rebuild and when i trigger a

00:53:25,599 --> 00:53:27,920
rebuild

00:53:26,480 --> 00:53:29,359
that rebuild's gonna as we kind of

00:53:27,920 --> 00:53:30,640
talked about earlier when we look

00:53:29,359 --> 00:53:32,960
through the build process

00:53:30,640 --> 00:53:33,680
that rebuild's gonna benefit from

00:53:32,960 --> 00:53:36,720
caching

00:53:33,680 --> 00:53:37,440
of the uh app image layers themselves so

00:53:36,720 --> 00:53:39,280
that the

00:53:37,440 --> 00:53:41,520
really only the image the layers that

00:53:39,280 --> 00:53:43,280
changed are going to get rebuilt

00:53:41,520 --> 00:53:45,440
um which i think is pretty cool and this

00:53:43,280 --> 00:53:47,760
is like not something that

00:53:45,440 --> 00:53:49,359
you could definitely do this stuff with

00:53:47,760 --> 00:53:52,480
docker files but there's just

00:53:49,359 --> 00:53:53,200
extra um configuration you need to add

00:53:52,480 --> 00:53:55,280
into like

00:53:53,200 --> 00:53:56,880
every single docker file you might have

00:53:55,280 --> 00:53:57,680
so i think with build tax here it's very

00:53:56,880 --> 00:53:59,599
cool that

00:53:57,680 --> 00:54:11,839
just immediately the moment you run this

00:53:59,599 --> 00:54:11,839
again you'll just benefit from this

00:54:12,319 --> 00:54:15,599
oh did he just uh trigger a rebuild yeah

00:54:14,880 --> 00:54:17,599
i just

00:54:15,599 --> 00:54:18,880
i'm just going to try and see what comes

00:54:17,599 --> 00:54:21,359
out the other end but

00:54:18,880 --> 00:54:22,800
there's been like no change so i'm not

00:54:21,359 --> 00:54:26,559
sure if

00:54:22,800 --> 00:54:26,559
tecton would even pick it up

00:54:28,079 --> 00:54:32,000
so yeah i'm going to try i'll probably

00:54:30,720 --> 00:54:39,839
post this

00:54:32,000 --> 00:54:39,839
after the stream is over but um

00:54:51,760 --> 00:54:58,319
but yeah i think we should start

00:54:55,119 --> 00:55:00,079
concluding to be honest um

00:54:58,319 --> 00:55:02,880
yeah that was a lot of information

00:55:00,079 --> 00:55:06,319
kashyap um thank you so much for like

00:55:02,880 --> 00:55:07,440
taking some time um but if if folks want

00:55:06,319 --> 00:55:11,200
to sort of

00:55:07,440 --> 00:55:13,359
go back to uh learn a little bit more

00:55:11,200 --> 00:55:15,599
about pacquiao itself or

00:55:13,359 --> 00:55:19,040
reach out to you folks what would uh

00:55:15,599 --> 00:55:19,040
what would be good resources

00:55:19,359 --> 00:55:22,720
um so i think right after the stream

00:55:21,760 --> 00:55:26,000
ends we'll get some

00:55:22,720 --> 00:55:28,480
links posted and stuff uh we have a

00:55:26,000 --> 00:55:31,040
website the keto p-a-k-e-t-o

00:55:28,480 --> 00:55:32,319
dot io that you could go to read the

00:55:31,040 --> 00:55:33,920
documentation

00:55:32,319 --> 00:55:35,599
learn more about like how to get started

00:55:33,920 --> 00:55:38,160
what's supported things like that

00:55:35,599 --> 00:55:40,480
as well as a fairly active slack and

00:55:38,160 --> 00:55:43,280
like github discussions threads um which

00:55:40,480 --> 00:55:44,559
we should get posted as well on uh

00:55:43,280 --> 00:55:48,400
livestream afterwards

00:55:44,559 --> 00:55:50,160
um definitely encourage folks to

00:55:48,400 --> 00:55:52,000
check out the content and and get

00:55:50,160 --> 00:55:52,799
started and ask us any questions if

00:55:52,000 --> 00:55:55,839
there

00:55:52,799 --> 00:55:56,960
um any issues you run into or things

00:55:55,839 --> 00:55:59,839
like that along the way

00:55:56,960 --> 00:56:00,400
maybe last thing i might mention is we

00:55:59,839 --> 00:56:03,760
are a

00:56:00,400 --> 00:56:04,400
open governance project we're looking

00:56:03,760 --> 00:56:06,960
for

00:56:04,400 --> 00:56:08,799
new contributors to get started and in

00:56:06,960 --> 00:56:09,920
general just looking to grow the overall

00:56:08,799 --> 00:56:11,680
community around

00:56:09,920 --> 00:56:13,599
buildbacks and get more folks trying it

00:56:11,680 --> 00:56:15,839
out so um

00:56:13,599 --> 00:56:19,359
very happy to get new community members

00:56:15,839 --> 00:56:19,359
and help them out along the way

00:56:19,760 --> 00:56:27,440
cool so that's pacquiao.io

00:56:22,880 --> 00:56:27,440
and there's a slack that people could

00:56:27,760 --> 00:56:33,839
i'm sorry that we

00:56:30,880 --> 00:56:35,839
lead people into uh from there sounds

00:56:33,839 --> 00:56:37,040
good we'll also post the links in the

00:56:35,839 --> 00:56:40,640
description

00:56:37,040 --> 00:56:42,640
uh if you're watching this on youtube so

00:56:40,640 --> 00:56:44,880
anytime you watch you should be able to

00:56:42,640 --> 00:56:47,440
get to those so

00:56:44,880 --> 00:56:48,400
yeah thanks so much for uh taking the

00:56:47,440 --> 00:56:52,559
time

00:56:48,400 --> 00:56:53,920
um yeah sure um

00:56:52,559 --> 00:56:56,079
is there anything else you want to like

00:56:53,920 --> 00:56:56,079
see

00:56:56,160 --> 00:57:04,000
anything else other than bye

00:57:00,000 --> 00:57:04,880
bye thanks for having me guys this is

00:57:04,000 --> 00:57:08,640
great to see

00:57:04,880 --> 00:57:09,760
um just the buildpack integrations as a

00:57:08,640 --> 00:57:12,480
whole and how it works

00:57:09,760 --> 00:57:13,280
uh so as i said definitely check out the

00:57:12,480 --> 00:57:15,200
website

00:57:13,280 --> 00:57:16,559
uh content things like that and would

00:57:15,200 --> 00:57:18,559
love to have folks

00:57:16,559 --> 00:57:20,160
try it out and get started maybe pack

00:57:18,559 --> 00:57:21,760
cli first and then

00:57:20,160 --> 00:57:23,359
some of these integrations that are like

00:57:21,760 --> 00:57:26,880
tucked on and stuff like that

00:57:23,359 --> 00:57:27,359
but yeah it's nice thank you everybody

00:57:26,880 --> 00:57:30,079
for

00:57:27,359 --> 00:57:30,559
staying with us today um i did i don't

00:57:30,079 --> 00:57:32,720
know what

00:57:30,559 --> 00:57:34,319
they were shadowed me today so i did not

00:57:32,720 --> 00:57:36,720
get enough speaking time

00:57:34,319 --> 00:57:38,400
i would speak to ram about this i didn't

00:57:36,720 --> 00:57:41,280
get enough time to speak

00:57:38,400 --> 00:57:41,920
i don't know i was overpowered basically

00:57:41,280 --> 00:57:43,599
so uh

00:57:41,920 --> 00:57:45,520
thank you so much guys everybody for

00:57:43,599 --> 00:57:47,520
coming on um if you have any questions

00:57:45,520 --> 00:57:49,920
you can always reach out to us on

00:57:47,520 --> 00:57:51,839
um you can drop comments we always check

00:57:49,920 --> 00:57:53,040
our comments would say would respond you

00:57:51,839 --> 00:57:55,040
can also at the

00:57:53,040 --> 00:57:57,119
cloud foundry official andu or the

00:57:55,040 --> 00:58:00,160
paketo official andu if you have

00:57:57,119 --> 00:58:01,839
this package specific question to ask or

00:58:00,160 --> 00:58:05,119
you can dm me on twitter

00:58:01,839 --> 00:58:08,400
at coda underscore blvck

00:58:05,119 --> 00:58:10,000
or ram or yeah just just reach out we'll

00:58:08,400 --> 00:58:12,319
try our best to help you and

00:58:10,000 --> 00:58:13,520
get you started with pacquiao or cloud

00:58:12,319 --> 00:58:16,160
foundry in general

00:58:13,520 --> 00:58:18,240
so um i hate to say this publicly but

00:58:16,160 --> 00:58:19,440
kashif doesn't have a twitter account

00:58:18,240 --> 00:58:22,559
here

00:58:19,440 --> 00:58:24,079
so ah how's that possible

00:58:22,559 --> 00:58:26,400
someday we'll get there someday we'll

00:58:24,079 --> 00:58:26,400
get there

00:58:26,960 --> 00:58:31,280
okay folks um thank you once again uh

00:58:29,359 --> 00:58:32,240
thank you kasha for joining us um we're

00:58:31,280 --> 00:58:35,200
coming back with

00:58:32,240 --> 00:58:35,599
more live streams um so keep checking

00:58:35,200 --> 00:58:38,160
out

00:58:35,599 --> 00:58:39,760
uh the official club from the channel uh

00:58:38,160 --> 00:58:41,599
and also twitter because we'll be

00:58:39,760 --> 00:58:44,480
posting updates there whenever we have

00:58:41,599 --> 00:58:44,960
any upcoming live streams right but we

00:58:44,480 --> 00:58:47,520
have

00:58:44,960 --> 00:58:48,799
great lineup for live streams coming up

00:58:47,520 --> 00:58:50,480
very very soon and

00:58:48,799 --> 00:58:52,400
this is the first of its kind and we're

00:58:50,480 --> 00:58:55,680
excited about this

00:58:52,400 --> 00:58:58,240
so um have a great evening

00:58:55,680 --> 00:58:58,720
afternoon morning everyone for whatever

00:58:58,240 --> 00:59:00,880
parts

00:58:58,720 --> 00:59:02,839
of the world they are watching this and

00:59:00,880 --> 00:59:05,839
um

00:59:02,839 --> 00:59:05,839

YouTube URL: https://www.youtube.com/watch?v=VKSbr9SXxA4


