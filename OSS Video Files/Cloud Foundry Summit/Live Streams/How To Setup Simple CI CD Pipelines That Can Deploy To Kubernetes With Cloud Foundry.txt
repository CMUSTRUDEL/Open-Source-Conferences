Title: How To Setup Simple CI CD Pipelines That Can Deploy To Kubernetes With Cloud Foundry
Publication date: 2021-04-07
Playlist: Live Streams
Description: 
	Being able to deploy code continuously to production is an important need for software engineering teams today. 

By introducing modern elements such as Kubernetes to cloud-based infrastructure, engineering teams are facing increased complexity in setting up these CI/CD pipelines. Installing Cloud Foundry, specifically the cf-for-k8s project, provides a greatly simplified experience not only for individual developers, but for setting up CI/CD pipelines as well. Using a Cloud Foundry abstraction over Kubernetes is a step towards more efficient development and delivery of software. 

In this live stream, Shedrack and Ram - developer advocates at Cloud Foundry Foundation - present two approaches. One using GitLab Runner and another using GitHub Actions. Using either approach will get you started with automating your deployments to Kubernetes. 

#Kubernetes #CloudFoundry #CI #CD
Captions: 
	00:00:14,920 --> 00:00:17,920
so

00:00:37,920 --> 00:00:45,200
and we are live hi everybody

00:00:41,600 --> 00:00:47,280
don't forget to wear your face marks um

00:00:45,200 --> 00:00:48,320
once again we are here today for another

00:00:47,280 --> 00:00:50,719
live stream

00:00:48,320 --> 00:00:52,399
um i know we've all like all seen a lot

00:00:50,719 --> 00:00:54,399
of um

00:00:52,399 --> 00:00:55,680
of our tweets about the live stream so

00:00:54,399 --> 00:00:57,120
thank you everybody

00:00:55,680 --> 00:01:00,160
that has joined us from various

00:00:57,120 --> 00:01:03,840
platforms um twitch twitter

00:01:00,160 --> 00:01:05,360
um what else youtube thank you so much

00:01:03,840 --> 00:01:08,240
for joining us

00:01:05,360 --> 00:01:11,040
i'm sheldrak akin tire i'm a developer

00:01:08,240 --> 00:01:12,479
advocate at the classifier foundation

00:01:11,040 --> 00:01:15,040
and today we're going to be talking

00:01:12,479 --> 00:01:18,240
about uh i'm with my colleague of course

00:01:15,040 --> 00:01:19,759
he will introduce themselves in a bit um

00:01:18,240 --> 00:01:21,520
we're going to talk about

00:01:19,759 --> 00:01:23,759
how to create some simple deployment

00:01:21,520 --> 00:01:24,960
pipelines with cloud foundry and either

00:01:23,759 --> 00:01:27,439
gitlab actions and

00:01:24,960 --> 00:01:28,240
give github action sorry and gitlab

00:01:27,439 --> 00:01:30,640
verna

00:01:28,240 --> 00:01:32,320
um so ram would probably take over and

00:01:30,640 --> 00:01:35,439
introduce himself to us hera

00:01:32,320 --> 00:01:38,479
what's good thanks shadrach

00:01:35,439 --> 00:01:41,600
hey folks my name is ram like shadrach

00:01:38,479 --> 00:01:43,759
mentioned i am also a part of the cloud

00:01:41,600 --> 00:01:47,280
foundry foundation where both

00:01:43,759 --> 00:01:51,759
our developer advocates there and

00:01:47,280 --> 00:01:51,759
most of our job is to try and find

00:01:51,920 --> 00:01:58,159
new folks who can try cloud foundry take

00:01:55,040 --> 00:02:00,799
advantage of what it has to offer and

00:01:58,159 --> 00:02:02,799
basically make a convincing case for the

00:02:00,799 --> 00:02:05,119
additional user to

00:02:02,799 --> 00:02:07,040
pick up cloud foundry and start using it

00:02:05,119 --> 00:02:09,360
so

00:02:07,040 --> 00:02:11,360
thanks for joining us on our live stream

00:02:09,360 --> 00:02:14,560
um we

00:02:11,360 --> 00:02:17,280
we are all uh trying to make this

00:02:14,560 --> 00:02:18,319
a regular occurrence to the point that

00:02:17,280 --> 00:02:20,400
um

00:02:18,319 --> 00:02:22,400
we now need like a fancy name for the

00:02:20,400 --> 00:02:23,520
live stream and we need like a fancy

00:02:22,400 --> 00:02:25,599
tagline

00:02:23,520 --> 00:02:28,080
we don't have a name yet but i think we

00:02:25,599 --> 00:02:31,360
have a good tagline

00:02:28,080 --> 00:02:34,879
the stream where the demos are great

00:02:31,360 --> 00:02:34,879
and the jokes not so much

00:02:35,680 --> 00:02:39,519
so good demos bad jokes that's what

00:02:38,160 --> 00:02:41,360
you're here for

00:02:39,519 --> 00:02:45,599
um and that's what's going to keep you

00:02:41,360 --> 00:02:48,959
occupied for the next uh 60 minutes also

00:02:45,599 --> 00:02:51,920
like shark mentioned we're streaming to

00:02:48,959 --> 00:02:52,720
various platforms so you're probably

00:02:51,920 --> 00:02:55,920
watching this

00:02:52,720 --> 00:02:59,760
from on youtube on

00:02:55,920 --> 00:02:59,760
twitter on twitch

00:03:00,239 --> 00:03:04,959
or some other new platform that shadrach

00:03:02,400 --> 00:03:07,200
has enabled that i don't know of

00:03:04,959 --> 00:03:09,920
whatever it might be just you know feel

00:03:07,200 --> 00:03:13,599
free to drop your questions in on the

00:03:09,920 --> 00:03:16,800
youtube live chat as replies to

00:03:13,599 --> 00:03:20,480
the live stream tweet or

00:03:16,800 --> 00:03:22,640
on whatever twitch uses so

00:03:20,480 --> 00:03:23,920
we i promise we'll get to all of these

00:03:22,640 --> 00:03:27,360
questions before the

00:03:23,920 --> 00:03:33,680
end of the stream so

00:03:27,360 --> 00:03:36,400
today's stream is all about

00:03:33,680 --> 00:03:38,400
baking cloud foundry into your existing

00:03:36,400 --> 00:03:41,840
ci cd workflow of sorts

00:03:38,400 --> 00:03:43,599
so if you folks are already using

00:03:41,840 --> 00:03:46,239
which i'm sure you are if you're already

00:03:43,599 --> 00:03:49,680
using some form of ci cd

00:03:46,239 --> 00:03:52,000
then you should be able to

00:03:49,680 --> 00:03:53,599
take ideas off of what we are going to

00:03:52,000 --> 00:03:55,840
discuss today

00:03:53,599 --> 00:03:57,439
and bake cloud foundry into your

00:03:55,840 --> 00:03:59,840
workflow now if

00:03:57,439 --> 00:04:01,519
those ci cd tools that you're using

00:03:59,840 --> 00:04:04,080
happen to be

00:04:01,519 --> 00:04:04,640
gitlab runner or github actions then i

00:04:04,080 --> 00:04:06,879
think this

00:04:04,640 --> 00:04:08,720
can be a very hands-on session for you

00:04:06,879 --> 00:04:11,519
and you can basically

00:04:08,720 --> 00:04:13,599
you know replicate what we have and just

00:04:11,519 --> 00:04:17,040
clone our workflows and

00:04:13,599 --> 00:04:21,680
get started with including cf

00:04:17,040 --> 00:04:25,600
in into your into your workflows

00:04:21,680 --> 00:04:29,520
um yeah that's what i had in terms of

00:04:25,600 --> 00:04:30,960
introduction um just to sort of do some

00:04:29,520 --> 00:04:34,320
additional context setting

00:04:30,960 --> 00:04:37,520
shadrach do you want to speak about

00:04:34,320 --> 00:04:42,000
what cfr gates is and give

00:04:37,520 --> 00:04:44,560
like a quick introduction to cf itself

00:04:42,000 --> 00:04:45,280
um yeah yeah sure definitely um so

00:04:44,560 --> 00:04:48,160
basically

00:04:45,280 --> 00:04:49,199
um cfo kids is uh is the i'm offering

00:04:48,160 --> 00:04:52,320
the kubernetes

00:04:49,199 --> 00:04:53,919
um platform basically they also

00:04:52,320 --> 00:04:56,320
commences our music platform

00:04:53,919 --> 00:04:57,600
built with kubernetes on cloud foundry

00:04:56,320 --> 00:04:58,320
so so i don't want to go into the

00:04:57,600 --> 00:05:00,479
technically

00:04:58,320 --> 00:05:02,880
very technical part let me just say

00:05:00,479 --> 00:05:03,360
cloud fm7 kids makes it very easy for

00:05:02,880 --> 00:05:05,039
you to

00:05:03,360 --> 00:05:07,440
actually deploy your applications on

00:05:05,039 --> 00:05:08,400
kubernetes without the whole stress of

00:05:07,440 --> 00:05:10,720
actually

00:05:08,400 --> 00:05:12,720
configuring kubernetes covalent is a

00:05:10,720 --> 00:05:14,400
pain everybody knows when it is a pain

00:05:12,720 --> 00:05:15,919
even google knows combinations is a

00:05:14,400 --> 00:05:17,280
thing so um

00:05:15,919 --> 00:05:20,400
cloud foundry for components is

00:05:17,280 --> 00:05:22,080
basically allow um developers

00:05:20,400 --> 00:05:24,160
every type of developer not necessarily

00:05:22,080 --> 00:05:26,720
just devops engineers

00:05:24,160 --> 00:05:27,840
developers individual developers smaller

00:05:26,720 --> 00:05:31,280
team big teams to

00:05:27,840 --> 00:05:34,080
deploy the application um to

00:05:31,280 --> 00:05:34,560
kubernetes without without any friction

00:05:34,080 --> 00:05:37,280
without

00:05:34,560 --> 00:05:38,479
actually any friction it makes it very

00:05:37,280 --> 00:05:40,639
easy for you to

00:05:38,479 --> 00:05:42,320
include your um whatever projects you're

00:05:40,639 --> 00:05:43,919
working on big small large

00:05:42,320 --> 00:05:46,000
on kubernetes which is really really

00:05:43,919 --> 00:05:47,520
easy and the cloud foreign itself

00:05:46,000 --> 00:05:48,800
platform itself is an open source

00:05:47,520 --> 00:05:52,080
platform as a service

00:05:48,800 --> 00:05:55,680
that allows um to deploy

00:05:52,080 --> 00:05:59,120
um various types of applications on um

00:05:55,680 --> 00:06:01,120
on it basically um we have support for

00:05:59,120 --> 00:06:02,400
almost every single language you can

00:06:01,120 --> 00:06:03,919
probably think of

00:06:02,400 --> 00:06:06,319
uh both first class citizens are

00:06:03,919 --> 00:06:10,240
probably node.js

00:06:06,319 --> 00:06:12,960
python um google

00:06:10,240 --> 00:06:13,919
uh scalab like a bunch of like um this

00:06:12,960 --> 00:06:15,360
popular um

00:06:13,919 --> 00:06:17,520
programming language is actually

00:06:15,360 --> 00:06:19,280
supported on um

00:06:17,520 --> 00:06:21,440
on cloud foundry so one of the reasons

00:06:19,280 --> 00:06:22,560
why cloud foundry is actually what's

00:06:21,440 --> 00:06:24,400
the platform as a service that you

00:06:22,560 --> 00:06:25,840
should be using is because of how um the

00:06:24,400 --> 00:06:27,520
developer experience is

00:06:25,840 --> 00:06:29,039
you do not need to lend so much config

00:06:27,520 --> 00:06:30,160
there's no you don't need the right

00:06:29,039 --> 00:06:32,080
little to know yamu

00:06:30,160 --> 00:06:33,440
to get your application open and also

00:06:32,080 --> 00:06:35,039
deployed or like other

00:06:33,440 --> 00:06:37,440
customer service i'm not taking any

00:06:35,039 --> 00:06:39,199
shots i'm just saying um

00:06:37,440 --> 00:06:42,160
so it makes it very easy for you to do

00:06:39,199 --> 00:06:42,160
these things and also

00:06:43,360 --> 00:06:48,960
i know it was just it was harmless trust

00:06:45,440 --> 00:06:48,960
me everybody over this

00:06:56,960 --> 00:07:01,120
we are very nice people trust me um so

00:06:59,360 --> 00:07:02,560
yeah we

00:07:01,120 --> 00:07:04,160
for you to do um whole deployment

00:07:02,560 --> 00:07:07,759
processes um as

00:07:04,160 --> 00:07:09,199
easy and as fast as possible um

00:07:07,759 --> 00:07:10,800
so today what we're going to do

00:07:09,199 --> 00:07:11,680
basically is going we're going to show

00:07:10,800 --> 00:07:14,639
you how you can

00:07:11,680 --> 00:07:16,400
include california for kubernetes um

00:07:14,639 --> 00:07:18,400
into your deployment

00:07:16,400 --> 00:07:20,319
pipeline basically so we are going to

00:07:18,400 --> 00:07:22,160
talk about um

00:07:20,319 --> 00:07:24,319
contributing continuous um integration

00:07:22,160 --> 00:07:26,560
and also on continuous delivery

00:07:24,319 --> 00:07:27,759
so ram will basically just take us on

00:07:26,560 --> 00:07:29,680
the basics i'm

00:07:27,759 --> 00:07:31,360
pretty sure most of us watching are like

00:07:29,680 --> 00:07:33,680
devops experts

00:07:31,360 --> 00:07:34,720
and um for the ones that don't and

00:07:33,680 --> 00:07:36,880
actually develop experts

00:07:34,720 --> 00:07:38,319
ram is going to go through on a bit on

00:07:36,880 --> 00:07:40,560
what ci cd

00:07:38,319 --> 00:07:43,599
really is and how it could help the

00:07:40,560 --> 00:07:43,599
development workflow

00:07:43,680 --> 00:07:46,319
sure so

00:07:47,759 --> 00:07:53,919
one of the things that has really

00:07:51,039 --> 00:07:54,400
changed in the software development

00:07:53,919 --> 00:07:58,879
world

00:07:54,400 --> 00:08:03,120
over let's say the past 15 or 18 years

00:07:58,879 --> 00:08:07,599
is this notion of releasing software

00:08:03,120 --> 00:08:09,599
for people to use so originally

00:08:07,599 --> 00:08:11,120
you know stuff was written and then i

00:08:09,599 --> 00:08:13,840
mean software was written and then

00:08:11,120 --> 00:08:16,000
software was

00:08:13,840 --> 00:08:18,319
integrated with other pieces of software

00:08:16,000 --> 00:08:21,440
and then finally burnt on like a cd

00:08:18,319 --> 00:08:24,639
called gold master um

00:08:21,440 --> 00:08:27,759
and then you know put into like paper

00:08:24,639 --> 00:08:32,080
covers with like a plastic

00:08:27,759 --> 00:08:35,440
wrap and shipped off and and that was

00:08:32,080 --> 00:08:37,919
um that was how it was done um so

00:08:35,440 --> 00:08:39,440
you had shrink wrap software and the

00:08:37,919 --> 00:08:42,640
term actually came from the

00:08:39,440 --> 00:08:46,880
shrink wrap that was on cd covers

00:08:42,640 --> 00:08:49,040
so we've come a long way since then

00:08:46,880 --> 00:08:52,720
we don't have to wait for like major

00:08:49,040 --> 00:08:52,720
release cycles we don't have to

00:08:52,800 --> 00:08:59,519
you know manually set like a

00:08:56,320 --> 00:09:01,360
whole release effort

00:08:59,519 --> 00:09:02,640
and we did you know basically didn't

00:09:01,360 --> 00:09:04,800
have to burn and

00:09:02,640 --> 00:09:06,839
burn we don't have to burn cds and other

00:09:04,800 --> 00:09:10,160
things now now it's

00:09:06,839 --> 00:09:11,360
uh and that's one area where things have

00:09:10,160 --> 00:09:14,959
you know possibly

00:09:11,360 --> 00:09:18,000
changed the most when it comes to

00:09:14,959 --> 00:09:20,160
software development practices overall

00:09:18,000 --> 00:09:24,240
so

00:09:20,160 --> 00:09:25,200
what has enabled or triggered this

00:09:24,240 --> 00:09:28,160
change is

00:09:25,200 --> 00:09:29,200
you know basic market forces so people

00:09:28,160 --> 00:09:33,279
started to demand

00:09:29,200 --> 00:09:35,680
updates more regularly than

00:09:33,279 --> 00:09:38,160
a year people wanted updates more

00:09:35,680 --> 00:09:40,000
frequently than

00:09:38,160 --> 00:09:41,600
other release cycles that teams planned

00:09:40,000 --> 00:09:44,080
for and

00:09:41,600 --> 00:09:45,680
obviously we are now at a point where

00:09:44,080 --> 00:09:47,839
cloud native software

00:09:45,680 --> 00:09:50,480
i mean software is eating the world but

00:09:47,839 --> 00:09:54,399
cloud native software is eating software

00:09:50,480 --> 00:09:57,600
so we are at a point where

00:09:54,399 --> 00:10:00,480
a lot of contributions that happen

00:09:57,600 --> 00:10:02,000
happen to source code directly and so

00:10:00,480 --> 00:10:04,880
this source code is taken

00:10:02,000 --> 00:10:05,920
and it is shipped as frequently as

00:10:04,880 --> 00:10:08,720
possible so that

00:10:05,920 --> 00:10:11,760
updates don't have to wait for release

00:10:08,720 --> 00:10:15,600
cycles and customers don't have to wait

00:10:11,760 --> 00:10:19,120
until software um

00:10:15,600 --> 00:10:21,120
is is

00:10:19,120 --> 00:10:23,200
how do i put it how software is in a

00:10:21,120 --> 00:10:24,000
particular release cadence instead they

00:10:23,200 --> 00:10:25,519
wanted

00:10:24,000 --> 00:10:27,279
they want stuff on demand they don't

00:10:25,519 --> 00:10:28,160
want to have to wait for specific

00:10:27,279 --> 00:10:32,640
updates

00:10:28,160 --> 00:10:35,680
they don't want to cherry pick

00:10:32,640 --> 00:10:37,920
when they have to start using certain

00:10:35,680 --> 00:10:40,880
features they want to be able to

00:10:37,920 --> 00:10:44,560
just you know demand features get them

00:10:40,880 --> 00:10:44,560
get them going and things like that and

00:10:44,720 --> 00:10:50,800
at the same time developers and

00:10:47,760 --> 00:10:54,160
engineering mindset has also changed to

00:10:50,800 --> 00:10:54,640
align with this thought process so a lot

00:10:54,160 --> 00:10:57,680
of

00:10:54,640 --> 00:10:57,680
work has happened

00:10:58,079 --> 00:11:02,959
in parallel with a lot of management

00:11:01,519 --> 00:11:06,240
principles

00:11:02,959 --> 00:11:08,560
such as agile development and

00:11:06,240 --> 00:11:10,800
so many other extreme programming and

00:11:08,560 --> 00:11:15,120
all of these different

00:11:10,800 --> 00:11:18,160
software management styles and

00:11:15,120 --> 00:11:19,360
all of that together today it's become a

00:11:18,160 --> 00:11:21,120
scenario where

00:11:19,360 --> 00:11:22,959
you know people write their code they

00:11:21,120 --> 00:11:26,160
want it deployed

00:11:22,959 --> 00:11:28,000
they sort of don't care how but it's

00:11:26,160 --> 00:11:30,800
about but then they really care about

00:11:28,000 --> 00:11:33,120
how fast things go out to production so

00:11:30,800 --> 00:11:36,800
a lot of companies

00:11:33,120 --> 00:11:38,880
big small medium tiny individual

00:11:36,800 --> 00:11:40,240
agencies and a lot of companies that

00:11:38,880 --> 00:11:43,040
write software

00:11:40,240 --> 00:11:44,959
for a living are also very keen about

00:11:43,040 --> 00:11:46,560
adopting these practices and these

00:11:44,959 --> 00:11:50,320
principles

00:11:46,560 --> 00:11:54,000
so that has really led to

00:11:50,320 --> 00:11:57,040
these ci cd pipelines become mainstream

00:11:54,000 --> 00:11:59,360
and if you're not already using it i

00:11:57,040 --> 00:12:02,320
would highly recommend

00:11:59,360 --> 00:12:03,839
getting into the practice well

00:12:02,320 --> 00:12:07,440
continuous integration is

00:12:03,839 --> 00:12:10,560
sort of um

00:12:07,440 --> 00:12:11,600
well i wouldn't say that um proper

00:12:10,560 --> 00:12:15,200
version control

00:12:11,600 --> 00:12:18,240
is everywhere so thanks to

00:12:15,200 --> 00:12:21,120
you know the popular players

00:12:18,240 --> 00:12:22,959
who helped me make it mainstream and

00:12:21,120 --> 00:12:24,079
thanks to a lot of different open source

00:12:22,959 --> 00:12:27,440
tools that are available

00:12:24,079 --> 00:12:32,320
today we have like

00:12:27,440 --> 00:12:36,160
a good penetration of

00:12:32,320 --> 00:12:38,079
lives version control systems

00:12:36,160 --> 00:12:40,639
in the world today there's there's often

00:12:38,079 --> 00:12:41,200
times no project that you know starts up

00:12:40,639 --> 00:12:43,600
and says

00:12:41,200 --> 00:12:45,040
hey let's try and do this without gate

00:12:43,600 --> 00:12:48,720
or subversion or

00:12:45,040 --> 00:12:51,680
mercury or whatever right so everybody

00:12:48,720 --> 00:12:52,639
is convinced that rather every

00:12:51,680 --> 00:12:56,160
engineering

00:12:52,639 --> 00:12:59,680
or programmer person is convinced

00:12:56,160 --> 00:13:00,320
that we need some form of version

00:12:59,680 --> 00:13:03,279
control

00:13:00,320 --> 00:13:04,000
some functional version control

00:13:03,279 --> 00:13:06,480
practices

00:13:04,000 --> 00:13:08,959
before any software project begins but

00:13:06,480 --> 00:13:12,800
that doesn't seem to be the case with

00:13:08,959 --> 00:13:16,399
ci and

00:13:12,800 --> 00:13:20,880
it's also a lot less when it comes to cd

00:13:16,399 --> 00:13:22,959
and by cd we are going to mean

00:13:20,880 --> 00:13:24,399
for purposes of this stream at least we

00:13:22,959 --> 00:13:26,880
are going to mean both

00:13:24,399 --> 00:13:30,240
continuous delivery and continuous

00:13:26,880 --> 00:13:34,079
deployment whatever might be the goals

00:13:30,240 --> 00:13:37,519
so um

00:13:34,079 --> 00:13:41,839
both ci and cd

00:13:37,519 --> 00:13:43,760
are slightly difficult to set up

00:13:41,839 --> 00:13:46,480
because it involves you know cutting

00:13:43,760 --> 00:13:49,519
across technology cutting across

00:13:46,480 --> 00:13:50,560
best practices cutting across you know a

00:13:49,519 --> 00:13:54,720
lot of

00:13:50,560 --> 00:13:57,279
human involvement and

00:13:54,720 --> 00:13:57,279
it can

00:13:57,839 --> 00:14:04,480
it can become very tricky

00:14:01,199 --> 00:14:06,959
for folks to navigate in

00:14:04,480 --> 00:14:09,279
in early stages and then it will accrue

00:14:06,959 --> 00:14:12,639
as technical debt before it ever

00:14:09,279 --> 00:14:14,720
sees the light so

00:14:12,639 --> 00:14:17,199
they can be difficult but one thing that

00:14:14,720 --> 00:14:21,040
sort of simplifies this whole problem is

00:14:17,199 --> 00:14:24,320
if these cicd pipelines sort of come

00:14:21,040 --> 00:14:25,920
integrated along with your version

00:14:24,320 --> 00:14:29,360
control systems

00:14:25,920 --> 00:14:31,440
then it's you know right there for you

00:14:29,360 --> 00:14:32,240
to use and you can start making use of

00:14:31,440 --> 00:14:35,920
it

00:14:32,240 --> 00:14:36,800
and b it's one less license to pay for

00:14:35,920 --> 00:14:39,519
which is

00:14:36,800 --> 00:14:40,079
a very compelling reason why anybody

00:14:39,519 --> 00:14:44,160
would use

00:14:40,079 --> 00:14:47,440
a particular software tool so

00:14:44,160 --> 00:14:51,279
keeping that in mind we sort of designed

00:14:47,440 --> 00:14:51,279
today's live stream in order to be

00:14:51,680 --> 00:14:56,160
here's you know some ci cd best

00:14:54,160 --> 00:14:59,360
practices for you

00:14:56,160 --> 00:15:01,199
and here's how you can use them with two

00:14:59,360 --> 00:15:02,639
of the most popular version control

00:15:01,199 --> 00:15:05,440
tools

00:15:02,639 --> 00:15:06,399
on their free plan itself so you're not

00:15:05,440 --> 00:15:08,639
paying like

00:15:06,399 --> 00:15:10,839
a dime additionally you're just you know

00:15:08,639 --> 00:15:13,680
making use of

00:15:10,839 --> 00:15:14,399
the tool that's already available in the

00:15:13,680 --> 00:15:17,760
toolbox

00:15:14,399 --> 00:15:21,199
so that's basically the goal with this

00:15:17,760 --> 00:15:25,040
whole stream so um cloud foundry as

00:15:21,199 --> 00:15:28,160
a developer experience vastly

00:15:25,040 --> 00:15:28,160
improves the whole

00:15:29,199 --> 00:15:32,480
intersection or interface with

00:15:31,120 --> 00:15:36,240
kubernetes

00:15:32,480 --> 00:15:40,240
if you can hook it up to some automated

00:15:36,240 --> 00:15:42,639
build tools and deploy tools then

00:15:40,240 --> 00:15:44,959
it extends that simplicity and it

00:15:42,639 --> 00:15:49,279
extends that

00:15:44,959 --> 00:15:51,600
convenience to not just

00:15:49,279 --> 00:15:53,360
you as an individual working on the

00:15:51,600 --> 00:15:56,079
project but

00:15:53,360 --> 00:15:57,839
to the to the project as a whole it

00:15:56,079 --> 00:15:58,079
really doesn't matter what language

00:15:57,839 --> 00:16:00,240
you're

00:15:58,079 --> 00:16:02,320
using what scale you're operating at and

00:16:00,240 --> 00:16:05,120
there's so many advantages to using

00:16:02,320 --> 00:16:07,199
cloud foundry in general and all of that

00:16:05,120 --> 00:16:08,160
can be extended to like the entire

00:16:07,199 --> 00:16:12,560
software project

00:16:08,160 --> 00:16:16,480
itself if you're working with the ci cd

00:16:12,560 --> 00:16:19,839
uh tools that are baked into

00:16:16,480 --> 00:16:23,440
version control of sort so that

00:16:19,839 --> 00:16:27,040
really is the goal of the stream

00:16:23,440 --> 00:16:33,199
today so shadrach do you

00:16:27,040 --> 00:16:33,199
want to show the gitlab version first

00:16:34,560 --> 00:16:39,279
yeah yeah sure definitely i definitely

00:16:37,440 --> 00:16:43,759
did that

00:16:39,279 --> 00:16:43,759
um so this um

00:16:44,079 --> 00:16:49,040
to show everyone how um you can

00:16:47,120 --> 00:16:52,480
basically build a very simple

00:16:49,040 --> 00:16:54,720
build and um deploy um pipeline with

00:16:52,480 --> 00:16:56,399
git lab and cloud file for kubernetes

00:16:54,720 --> 00:16:56,959
now um it's very simple it's really

00:16:56,399 --> 00:16:58,959
really very

00:16:56,959 --> 00:17:00,560
really really simple and it can work for

00:16:58,959 --> 00:17:02,720
basically any application

00:17:00,560 --> 00:17:04,000
depending on whatever you need it to do

00:17:02,720 --> 00:17:05,280
actually but this particular

00:17:04,000 --> 00:17:06,880
pipeline i'm going to show now just

00:17:05,280 --> 00:17:08,319
takes builds the application that

00:17:06,880 --> 00:17:09,120
deploys it to cloud foundry so i'm going

00:17:08,319 --> 00:17:11,839
to explain

00:17:09,120 --> 00:17:14,079
um the process how it works etc so let

00:17:11,839 --> 00:17:17,280
me just quickly share my screen

00:17:14,079 --> 00:17:21,280
um share my desktop

00:17:17,280 --> 00:17:24,720
now um

00:17:21,280 --> 00:17:26,880
so now this is basically an application

00:17:24,720 --> 00:17:28,720
it's basically a single page application

00:17:26,880 --> 00:17:31,440
built with node.js and javascript

00:17:28,720 --> 00:17:32,000
that um i've said i've hosted on gitlab

00:17:31,440 --> 00:17:33,919
right

00:17:32,000 --> 00:17:36,000
um the code is on gitlab and um to

00:17:33,919 --> 00:17:37,280
deploy it i need it to be on gitlab

00:17:36,000 --> 00:17:39,120
before i can deploy to

00:17:37,280 --> 00:17:42,400
or add it to my whole deployment

00:17:39,120 --> 00:17:45,039
pipeline now this is basically how the

00:17:42,400 --> 00:17:46,320
it's basically what it consists of um it

00:17:45,039 --> 00:17:49,360
consists of business

00:17:46,320 --> 00:17:50,880
various holders and um a docker ignore

00:17:49,360 --> 00:17:53,120
which is obviously not

00:17:50,880 --> 00:17:55,280
um needed it's just i was just testing

00:17:53,120 --> 00:17:57,280
out things the docker file is also not

00:17:55,280 --> 00:17:58,480
needed for some time for this particular

00:17:57,280 --> 00:18:01,520
um purpose

00:17:58,480 --> 00:18:02,160
um so the only thing we need here is the

00:18:01,520 --> 00:18:04,559
gitlab

00:18:02,160 --> 00:18:06,400
ci the yml now this is the file that's

00:18:04,559 --> 00:18:08,720
basically creates the whole

00:18:06,400 --> 00:18:10,240
um department pipeline you only need to

00:18:08,720 --> 00:18:12,160
write you write the ammo here to

00:18:10,240 --> 00:18:15,360
describe how the pipeline should work

00:18:12,160 --> 00:18:15,840
now should look like um on only justice

00:18:15,360 --> 00:18:18,640
file

00:18:15,840 --> 00:18:19,760
it is different for github and um ram is

00:18:18,640 --> 00:18:21,760
going to show you

00:18:19,760 --> 00:18:23,039
why it is different and how gitlab and

00:18:21,760 --> 00:18:24,799
github does its own

00:18:23,039 --> 00:18:26,080
but gitlab all you need to do is just to

00:18:24,799 --> 00:18:29,039
have it dot gitlab

00:18:26,080 --> 00:18:30,559
um ci the yml file and you are good to

00:18:29,039 --> 00:18:33,120
go so now before i

00:18:30,559 --> 00:18:34,320
actually explain this what actually

00:18:33,120 --> 00:18:36,559
helps

00:18:34,320 --> 00:18:37,520
what actually helps um what actually

00:18:36,559 --> 00:18:40,080
helps this

00:18:37,520 --> 00:18:41,039
um this whole thing work is called the

00:18:40,080 --> 00:18:43,440
gitlab runner

00:18:41,039 --> 00:18:45,919
now the gitlab runner is basically let

00:18:43,440 --> 00:18:49,120
me show you what the gitlab runner is

00:18:45,919 --> 00:18:52,000
um so the gitlab runner is basically

00:18:49,120 --> 00:18:52,640
a trigger it is trigger um activation

00:18:52,000 --> 00:18:55,039
action

00:18:52,640 --> 00:18:56,799
it's a trigger basically for this um uh

00:18:55,039 --> 00:18:58,400
for the for the pipeline basically so

00:18:56,799 --> 00:19:00,720
whenever you make a push to direct

00:18:58,400 --> 00:19:02,480
oh the github runner is actually going

00:19:00,720 --> 00:19:03,679
to check always it keeps checking it's

00:19:02,480 --> 00:19:06,160
going to check if there's any

00:19:03,679 --> 00:19:07,120
um certainty or pipeline configured and

00:19:06,160 --> 00:19:09,120
once it finds

00:19:07,120 --> 00:19:10,559
it don't get like the wiremail file uses

00:19:09,120 --> 00:19:13,200
that particular file

00:19:10,559 --> 00:19:14,080
to start the whole um deployment or the

00:19:13,200 --> 00:19:17,440
whole

00:19:14,080 --> 00:19:20,000
um pipeline process and jobs so

00:19:17,440 --> 00:19:21,919
this is how you can find it it's on the

00:19:20,000 --> 00:19:24,799
um in the cicd part of your

00:19:21,919 --> 00:19:25,039
repo and it's on the runner side so if

00:19:24,799 --> 00:19:28,320
you

00:19:25,039 --> 00:19:30,160
expand down now um for this particular

00:19:28,320 --> 00:19:32,240
project i'm using a shared runner

00:19:30,160 --> 00:19:33,360
now a shared runner is basically um

00:19:32,240 --> 00:19:35,679
these are like free

00:19:33,360 --> 00:19:38,080
um these are owners already running on

00:19:35,679 --> 00:19:40,400
google on google cloud platform that is

00:19:38,080 --> 00:19:41,520
configured by gitlab it was auto skills

00:19:40,400 --> 00:19:44,400
by itself and

00:19:41,520 --> 00:19:45,760
it's um they are free for use for public

00:19:44,400 --> 00:19:48,400
open source projects

00:19:45,760 --> 00:19:49,919
and are limited to 2 000 um ci minutes

00:19:48,400 --> 00:19:51,840
per month so it's basically

00:19:49,919 --> 00:19:53,520
free for use for public open source

00:19:51,840 --> 00:19:54,640
project and this past cloud project is

00:19:53,520 --> 00:19:57,360
actually open source

00:19:54,640 --> 00:19:58,160
so we are using this particular shared

00:19:57,360 --> 00:20:01,440
runner

00:19:58,160 --> 00:20:02,799
this particular one here to run this

00:20:01,440 --> 00:20:05,520
particular application now

00:20:02,799 --> 00:20:06,799
if you need to um create a specific

00:20:05,520 --> 00:20:10,080
runner for your

00:20:06,799 --> 00:20:12,159
um for a particular um project

00:20:10,080 --> 00:20:13,760
which most of us will actually do you

00:20:12,159 --> 00:20:15,440
can actually install gitlab runner on

00:20:13,760 --> 00:20:16,159
kubernetes by just clicking on this

00:20:15,440 --> 00:20:18,400
button

00:20:16,159 --> 00:20:21,280
where you can set it up manually by

00:20:18,400 --> 00:20:22,960
following this application following the

00:20:21,280 --> 00:20:24,799
by following the rules here the gitlab

00:20:22,960 --> 00:20:25,360
documentation is very very easy for to

00:20:24,799 --> 00:20:27,360
follow

00:20:25,360 --> 00:20:29,200
so you can basically just follow the um

00:20:27,360 --> 00:20:31,760
step-by-step guidelines and

00:20:29,200 --> 00:20:33,360
you would go um you're good to go now me

00:20:31,760 --> 00:20:35,280
since this is an open source uh this is

00:20:33,360 --> 00:20:36,480
a very um demo project i am not running

00:20:35,280 --> 00:20:38,240
any specific runner

00:20:36,480 --> 00:20:39,679
um for that particular application i'm

00:20:38,240 --> 00:20:40,720
using one of the shared runners that

00:20:39,679 --> 00:20:44,400
github has made

00:20:40,720 --> 00:20:46,080
available for us basically anybody can

00:20:44,400 --> 00:20:49,120
use this particular runner

00:20:46,080 --> 00:20:52,880
um so now let me explain how

00:20:49,120 --> 00:20:56,000
it works now

00:20:52,880 --> 00:20:57,200
so now let's just talk about this um for

00:20:56,000 --> 00:21:00,400
a little bit

00:20:57,200 --> 00:21:02,080
um so the way the whole on the gitlab ci

00:21:00,400 --> 00:21:05,039
the ymir file is um

00:21:02,080 --> 00:21:06,720
built is um written it's in stages so

00:21:05,039 --> 00:21:08,880
stages are how the

00:21:06,720 --> 00:21:10,880
the whole pipeline should look like so i

00:21:08,880 --> 00:21:13,200
have two stages here which is viewed

00:21:10,880 --> 00:21:15,120
and deployed now this is how the

00:21:13,200 --> 00:21:17,520
pipeline looks like just two

00:21:15,120 --> 00:21:19,200
jobs building and deploying that's all

00:21:17,520 --> 00:21:19,760
the pipeline is doing he's building our

00:21:19,200 --> 00:21:22,320
projects

00:21:19,760 --> 00:21:24,080
and he's deploying it now for when you

00:21:22,320 --> 00:21:24,720
use cloud foundry right when you start

00:21:24,080 --> 00:21:26,240
friendly

00:21:24,720 --> 00:21:27,760
whether clapping for kubernetes or just

00:21:26,240 --> 00:21:30,320
the open source foundry

00:21:27,760 --> 00:21:31,679
um you do not need to build your

00:21:30,320 --> 00:21:33,280
application if it's a javascript

00:21:31,679 --> 00:21:35,039
application i just added this here to

00:21:33,280 --> 00:21:35,520
just make the product make the pipeline

00:21:35,039 --> 00:21:38,000
look

00:21:35,520 --> 00:21:39,039
uh much more structured i only just need

00:21:38,000 --> 00:21:41,440
one and this is the

00:21:39,039 --> 00:21:43,280
deploy actually so you do not need build

00:21:41,440 --> 00:21:44,559
because cloud foundry for kubernetes is

00:21:43,280 --> 00:21:46,480
california the entire cloud running

00:21:44,559 --> 00:21:49,679
system helps you build the application

00:21:46,480 --> 00:21:51,679
once it picks out a package.json file

00:21:49,679 --> 00:21:53,200
or a package.json file you do not need

00:21:51,679 --> 00:21:54,720
to have your node modules pushed to

00:21:53,200 --> 00:21:56,840
cloudflare it does not do that

00:21:54,720 --> 00:21:58,000
it helps you do that on the fly by

00:21:56,840 --> 00:21:59,679
itself

00:21:58,000 --> 00:22:01,600
you don't need to uh build the

00:21:59,679 --> 00:22:02,320
application by yourself cloudflare does

00:22:01,600 --> 00:22:04,080
that for you

00:22:02,320 --> 00:22:06,080
you don't need to do that by yourself so

00:22:04,080 --> 00:22:08,080
application builds are really really um

00:22:06,080 --> 00:22:10,000
so pushing builds are not necessary all

00:22:08,080 --> 00:22:11,679
you just need to grab the package.json

00:22:10,000 --> 00:22:14,080
file and uses the rules there

00:22:11,679 --> 00:22:15,760
to um tutorial application right you do

00:22:14,080 --> 00:22:19,120
not have to you don't need the whole

00:22:15,760 --> 00:22:20,000
500 mb yeah sorry i just wanted to

00:22:19,120 --> 00:22:23,600
mention

00:22:20,000 --> 00:22:25,679
that the package.json is in the context

00:22:23,600 --> 00:22:27,520
of this particular application which is

00:22:25,679 --> 00:22:30,240
a node.js app

00:22:27,520 --> 00:22:30,640
yeah yeah yeah sure depending on what

00:22:30,240 --> 00:22:33,440
yeah

00:22:30,640 --> 00:22:33,760
depending on what language or framework

00:22:33,440 --> 00:22:36,240
your

00:22:33,760 --> 00:22:37,440
app is written in cloud foundry is

00:22:36,240 --> 00:22:40,159
capable of

00:22:37,440 --> 00:22:41,200
picking up a particular build process

00:22:40,159 --> 00:22:44,240
thanks to

00:22:41,200 --> 00:22:46,559
a technology called buildbacks

00:22:44,240 --> 00:22:47,520
so build tax basically taking this job

00:22:46,559 --> 00:22:50,240
of detecting

00:22:47,520 --> 00:22:50,799
what language your app is written in and

00:22:50,240 --> 00:22:54,000
then

00:22:50,799 --> 00:22:55,840
performing the build steps depending on

00:22:54,000 --> 00:22:57,760
what that language is and which happens

00:22:55,840 --> 00:23:00,320
to be in this case

00:22:57,760 --> 00:23:03,120
uh a nodejs app that obviously has like

00:23:00,320 --> 00:23:06,240
a package.json file and

00:23:03,120 --> 00:23:08,320
all cloud foundry needs is

00:23:06,240 --> 00:23:10,240
the presence of that file in order to

00:23:08,320 --> 00:23:12,320
get the directives about what to do with

00:23:10,240 --> 00:23:15,280
the app and it will follow that

00:23:12,320 --> 00:23:17,039
just wanted to add that bit of context

00:23:15,280 --> 00:23:18,960
sorry for it yeah thank you

00:23:17,039 --> 00:23:20,400
yeah yeah sure thank you thank you for

00:23:18,960 --> 00:23:22,320
that that was a very good um

00:23:20,400 --> 00:23:25,200
interruption because i skipped that

00:23:22,320 --> 00:23:26,799
and so um like as i was saying i just

00:23:25,200 --> 00:23:27,840
added this particular part to make it

00:23:26,799 --> 00:23:31,679
look a bit more

00:23:27,840 --> 00:23:34,320
structured not more overly simple so um

00:23:31,679 --> 00:23:35,360
so here is what we are doing the build

00:23:34,320 --> 00:23:37,919
stage is

00:23:35,360 --> 00:23:39,679
we are taking running in particular

00:23:37,919 --> 00:23:43,600
scripts which is npm install

00:23:39,679 --> 00:23:46,480
and npm audit fix now in the in the um

00:23:43,600 --> 00:23:48,240
in the git lab um environment in the

00:23:46,480 --> 00:23:51,360
gitlab ci environment

00:23:48,240 --> 00:23:53,520
npm is available right it's a it's a

00:23:51,360 --> 00:23:54,400
linux environment basically so npm is

00:23:53,520 --> 00:23:57,039
available

00:23:54,400 --> 00:23:58,320
um for use so that's why i can easily

00:23:57,039 --> 00:24:00,320
run npm install

00:23:58,320 --> 00:24:01,840
and npm audio fix and it sees the

00:24:00,320 --> 00:24:02,640
command and is able to execute this

00:24:01,840 --> 00:24:05,120
command

00:24:02,640 --> 00:24:06,080
now here why i said only master is

00:24:05,120 --> 00:24:08,960
because i need

00:24:06,080 --> 00:24:10,799
it to this particular job to run only

00:24:08,960 --> 00:24:12,159
when it's on the master branch only when

00:24:10,799 --> 00:24:14,559
i push the master branch

00:24:12,159 --> 00:24:15,200
this particular job should run when i

00:24:14,559 --> 00:24:18,000
push to

00:24:15,200 --> 00:24:19,279
staging etc um you should you shouldn't

00:24:18,000 --> 00:24:20,400
work when i put straight different

00:24:19,279 --> 00:24:21,919
branches you don't work right you

00:24:20,400 --> 00:24:24,720
shouldn't start any comp any

00:24:21,919 --> 00:24:25,840
stage but um if i need to add um if i

00:24:24,720 --> 00:24:29,200
need to specify

00:24:25,840 --> 00:24:31,039
for other stages i can always um change

00:24:29,200 --> 00:24:34,000
master to xyz branch

00:24:31,039 --> 00:24:34,400
so that's why i put only a master there

00:24:34,000 --> 00:24:37,520
now

00:24:34,400 --> 00:24:39,600
this dot login is actually a stage it's

00:24:37,520 --> 00:24:43,360
a job basically what is a free job

00:24:39,600 --> 00:24:45,279
so the ci does not actually the um ci

00:24:43,360 --> 00:24:47,520
does not call this particular um

00:24:45,279 --> 00:24:49,520
this particular step here an actual

00:24:47,520 --> 00:24:52,000
pipeline right you have an actual job

00:24:49,520 --> 00:24:52,640
because it's um it's i just basically

00:24:52,000 --> 00:24:56,400
did this

00:24:52,640 --> 00:24:58,000
to allow um to allow the deploy stage

00:24:56,400 --> 00:25:00,880
look for use something

00:24:58,000 --> 00:25:02,400
use um these rules are specified here to

00:25:00,880 --> 00:25:05,120
deploy the application

00:25:02,400 --> 00:25:06,320
now here um this is basically a before

00:25:05,120 --> 00:25:08,880
script so this should

00:25:06,320 --> 00:25:09,919
run before the actual script tag so the

00:25:08,880 --> 00:25:11,200
bespoke script here

00:25:09,919 --> 00:25:13,440
what i'm basically doing is i'm

00:25:11,200 --> 00:25:15,039
installing cloud forgery through

00:25:13,440 --> 00:25:16,559
the normal means you can find this on

00:25:15,039 --> 00:25:18,000
the cloud foundry websites

00:25:16,559 --> 00:25:20,080
um documentation website on how to

00:25:18,000 --> 00:25:22,000
install cloudfront on your linux machine

00:25:20,080 --> 00:25:23,600
so since the gitlab state environment is

00:25:22,000 --> 00:25:24,000
the linux machine i am doing the same

00:25:23,600 --> 00:25:25,520
way

00:25:24,000 --> 00:25:27,679
so i'm obviously obviously getting

00:25:25,520 --> 00:25:28,320
installing on required certificates and

00:25:27,679 --> 00:25:30,960
also

00:25:28,320 --> 00:25:32,640
using the cloud foundry um and

00:25:30,960 --> 00:25:34,880
installing the cloud from the uh

00:25:32,640 --> 00:25:37,120
software on my on the on the environment

00:25:34,880 --> 00:25:40,320
i'm also installing the cloud for this

00:25:37,120 --> 00:25:43,039
cm version seven on cli now there's

00:25:40,320 --> 00:25:44,720
uh half currency the club from this cli

00:25:43,039 --> 00:25:46,559
is available in fashion seven and

00:25:44,720 --> 00:25:47,919
version six depends on what you want but

00:25:46,559 --> 00:25:49,679
i'm always going to advise

00:25:47,919 --> 00:25:51,120
anybody that wants to use slap and vocal

00:25:49,679 --> 00:25:54,080
but next they should use the

00:25:51,120 --> 00:25:54,720
to use the cloud foundry um cli version

00:25:54,080 --> 00:25:55,919
7.

00:25:54,720 --> 00:25:57,760
there are a lot of people that actually

00:25:55,919 --> 00:26:00,320
still using the fashion six and

00:25:57,760 --> 00:26:03,039
that's sort of fine but or recommended

00:26:00,320 --> 00:26:05,679
is always to use this um cloud foundry

00:26:03,039 --> 00:26:08,320
cli version seven now i'm installing the

00:26:05,679 --> 00:26:10,080
crowdfunding cli version seven here

00:26:08,320 --> 00:26:11,600
and the next thing is to show to be sure

00:26:10,080 --> 00:26:12,640
that my application this slap on this

00:26:11,600 --> 00:26:13,360
headlight is installed in that

00:26:12,640 --> 00:26:15,799
environment

00:26:13,360 --> 00:26:17,840
i'm also telling the um ci to run

00:26:15,799 --> 00:26:18,400
cf.version so this brings out the

00:26:17,840 --> 00:26:20,000
fashion

00:26:18,400 --> 00:26:22,080
the current version of the cloud foundry

00:26:20,000 --> 00:26:24,080
on sale that is installed now if this

00:26:22,080 --> 00:26:25,360
if it actually gives us a number which

00:26:24,080 --> 00:26:27,120
is also version seven that means

00:26:25,360 --> 00:26:27,919
slapping is available in that particular

00:26:27,120 --> 00:26:30,240
environment

00:26:27,919 --> 00:26:33,120
in the um ci environments now the next

00:26:30,240 --> 00:26:36,159
thing is i am configuring the api

00:26:33,120 --> 00:26:38,400
now um the api is basically an

00:26:36,159 --> 00:26:40,320
end point where we where we've installed

00:26:38,400 --> 00:26:42,400
our um the cloud running for

00:26:40,320 --> 00:26:44,559
kubernetes projects so on for this

00:26:42,400 --> 00:26:44,960
particular um demo for this factory club

00:26:44,559 --> 00:26:48,080
on the

00:26:44,960 --> 00:26:49,919
um them the demo we have installed the

00:26:48,080 --> 00:26:52,320
platform for kubernetes projects on

00:26:49,919 --> 00:26:54,000
a google cloud um google on the gke

00:26:52,320 --> 00:26:57,200
cluster running on google cloud

00:26:54,000 --> 00:26:57,840
so if uh if you need to understand how

00:26:57,200 --> 00:26:59,120
to install

00:26:57,840 --> 00:27:00,880
the cloud foundry for kubernetes

00:26:59,120 --> 00:27:03,120
projects on google cloud

00:27:00,880 --> 00:27:04,880
or this channel shown you can check our

00:27:03,120 --> 00:27:06,080
youtube page we have videos there where

00:27:04,880 --> 00:27:08,159
you can check our medium

00:27:06,080 --> 00:27:09,360
publication which is medium.com cloud

00:27:08,159 --> 00:27:11,760
foundry foundation

00:27:09,360 --> 00:27:13,919
so um so now i'm connecting to this api

00:27:11,760 --> 00:27:16,080
this api gives me access to the

00:27:13,919 --> 00:27:17,600
um california communities class that i

00:27:16,080 --> 00:27:19,840
have deployed on

00:27:17,600 --> 00:27:21,200
gke so that i can actually push my

00:27:19,840 --> 00:27:22,960
application on there that is where my

00:27:21,200 --> 00:27:26,720
application is going to be held

00:27:22,960 --> 00:27:29,200
now so cf is i'm basically all i'm doing

00:27:26,720 --> 00:27:30,880
is i'm basically configuring using the

00:27:29,200 --> 00:27:32,240
um questions i was basically i can't

00:27:30,880 --> 00:27:32,880
just access the cluster like that

00:27:32,240 --> 00:27:34,880
without

00:27:32,880 --> 00:27:35,919
uh i using the conditions that we put i

00:27:34,880 --> 00:27:39,039
have set in

00:27:35,919 --> 00:27:41,840
my um um cfo settings

00:27:39,039 --> 00:27:43,919
so i'm basically doing that and the

00:27:41,840 --> 00:27:46,480
reason why this is um

00:27:43,919 --> 00:27:47,200
this is basically cf username and cf

00:27:46,480 --> 00:27:50,080
password

00:27:47,200 --> 00:27:51,919
this is because of this is because of it

00:27:50,080 --> 00:27:53,440
has to be a secret

00:27:51,919 --> 00:27:54,880
so that anybody when i deploy an

00:27:53,440 --> 00:27:56,159
application people do not see these

00:27:54,880 --> 00:27:58,799
particular things

00:27:56,159 --> 00:27:59,279
so where i store them you can store them

00:27:58,799 --> 00:28:03,039
in

00:27:59,279 --> 00:28:05,919
your um so just go to the cicd menu

00:28:03,039 --> 00:28:06,799
and you can store you can find them in

00:28:05,919 --> 00:28:08,159
variables

00:28:06,799 --> 00:28:09,840
so these are all the variables i've

00:28:08,159 --> 00:28:11,919
stored for my particular project so

00:28:09,840 --> 00:28:14,320
there's the api here the cf api

00:28:11,919 --> 00:28:15,840
you save all the cf password so you can

00:28:14,320 --> 00:28:17,600
store all your environmental variables

00:28:15,840 --> 00:28:18,320
here and they are protected from the

00:28:17,600 --> 00:28:21,520
outside

00:28:18,320 --> 00:28:24,799
um world so um

00:28:21,520 --> 00:28:26,960
so this is how uh uh why i'm using those

00:28:24,799 --> 00:28:27,840
particular so this is how i'm accessing

00:28:26,960 --> 00:28:30,559
the cfs and

00:28:27,840 --> 00:28:31,600
the cf password now the next thing is uh

00:28:30,559 --> 00:28:33,120
of course i'm saying you should this

00:28:31,600 --> 00:28:34,240
particular job should only run on the

00:28:33,120 --> 00:28:35,919
master branch

00:28:34,240 --> 00:28:37,279
now the next thing is deploy stage this

00:28:35,919 --> 00:28:38,799
is the most important stage this is

00:28:37,279 --> 00:28:41,279
where we actually take our application

00:28:38,799 --> 00:28:43,039
from our machine from the um from um

00:28:41,279 --> 00:28:44,880
from being hosted on gitlab to

00:28:43,039 --> 00:28:46,880
being hosted on thumb crafting from

00:28:44,880 --> 00:28:50,240
banettis on our gk foster

00:28:46,880 --> 00:28:50,559
now of course this stage is named deploy

00:28:50,240 --> 00:28:53,600
it's

00:28:50,559 --> 00:28:55,840
the ca um car for the um gitlab ci would

00:28:53,600 --> 00:28:58,159
not recognize this particular stage if

00:28:55,840 --> 00:28:59,600
i do not specify that this stage started

00:28:58,159 --> 00:29:01,840
class stage is called deploy

00:28:59,600 --> 00:29:03,760
you definitely try and error also be

00:29:01,840 --> 00:29:06,480
always be um

00:29:03,760 --> 00:29:07,840
be up to date when it comes to

00:29:06,480 --> 00:29:09,279
specifying the stage

00:29:07,840 --> 00:29:11,279
and the next thing in the script now

00:29:09,279 --> 00:29:12,080
this is the most important part this is

00:29:11,279 --> 00:29:13,360
where we actually

00:29:12,080 --> 00:29:15,679
set our application on a deeper

00:29:13,360 --> 00:29:16,880
application now here i'm basically

00:29:15,679 --> 00:29:19,600
targeting um

00:29:16,880 --> 00:29:21,279
a space where i want my an organization

00:29:19,600 --> 00:29:22,080
on the space where i want my application

00:29:21,279 --> 00:29:24,000
to be deployed

00:29:22,080 --> 00:29:26,240
now craft only has things called spaces

00:29:24,000 --> 00:29:29,279
and hubs this is like having staging

00:29:26,240 --> 00:29:31,200
production and um um

00:29:29,279 --> 00:29:33,600
and development so these are like

00:29:31,200 --> 00:29:34,880
different um stages at where which um we

00:29:33,600 --> 00:29:36,640
can

00:29:34,880 --> 00:29:38,399
pull your application on so if you have

00:29:36,640 --> 00:29:39,200
a space called image you can have a

00:29:38,399 --> 00:29:41,039
space called

00:29:39,200 --> 00:29:42,640
um production you can have a speed

00:29:41,039 --> 00:29:43,360
called staging depending on how you want

00:29:42,640 --> 00:29:45,600
it to be

00:29:43,360 --> 00:29:48,159
now next thing i'm setting environmental

00:29:45,600 --> 00:29:48,159
variables

00:29:52,840 --> 00:29:55,840
now

00:29:58,399 --> 00:30:01,360
okay i am i have to set to the

00:30:00,240 --> 00:30:09,840
environment that'll be boost to that

00:30:01,360 --> 00:30:09,840
platform you can recognize them

00:30:13,919 --> 00:30:17,520
now i'm setting the api key which the

00:30:16,480 --> 00:30:20,799
application uses

00:30:17,520 --> 00:30:23,600
i'm also setting the you paused for

00:30:20,799 --> 00:30:24,880
like a couple of sentences there so if

00:30:23,600 --> 00:30:28,000
you could just

00:30:24,880 --> 00:30:30,720
be so kind just to repeat yourself sorry

00:30:28,000 --> 00:30:31,760
yeah so what was the last thing you had

00:30:30,720 --> 00:30:34,159
um i mean you

00:30:31,760 --> 00:30:35,919
you just got started with setting the

00:30:34,159 --> 00:30:37,600
environment

00:30:35,919 --> 00:30:39,360
okay okay so i would definitely

00:30:37,600 --> 00:30:41,760
apologize for that my internet's

00:30:39,360 --> 00:30:43,520
i don't know probably unstable so um

00:30:41,760 --> 00:30:45,279
basically what i'm doing here is i'm

00:30:43,520 --> 00:30:46,559
setting the environmental variables that

00:30:45,279 --> 00:30:48,080
my application needs

00:30:46,559 --> 00:30:49,679
so my application is a single page

00:30:48,080 --> 00:30:53,200
application that uses um

00:30:49,679 --> 00:30:55,760
some consumption apis that have to um

00:30:53,200 --> 00:30:56,399
use this particular api key so i'm

00:30:55,760 --> 00:30:58,480
actually

00:30:56,399 --> 00:30:59,760
using saving this particular api keys in

00:30:58,480 --> 00:31:03,440
my environment uh

00:30:59,760 --> 00:31:06,000
uh the variables box section of my

00:31:03,440 --> 00:31:07,519
um of my gitlab repo and accessing them

00:31:06,000 --> 00:31:10,240
in the um gitlab ci

00:31:07,519 --> 00:31:12,240
the yml file so same thing i'm doing for

00:31:10,240 --> 00:31:13,679
the converter api key same thing i'm

00:31:12,240 --> 00:31:14,399
also doing for the symbols and the

00:31:13,679 --> 00:31:16,159
timeouts

00:31:14,399 --> 00:31:18,080
now this is like very good engineering

00:31:16,159 --> 00:31:21,279
practice to not push your emv file

00:31:18,080 --> 00:31:22,720
to um to your to your um

00:31:21,279 --> 00:31:24,080
your gitlab reports your github so

00:31:22,720 --> 00:31:25,840
basically an invitation control it's

00:31:24,080 --> 00:31:28,720
very very important secrets are like

00:31:25,840 --> 00:31:29,919
really really important so the next

00:31:28,720 --> 00:31:31,600
thing i'm doing is just

00:31:29,919 --> 00:31:33,360
i don't know i was just flexing on these

00:31:31,600 --> 00:31:35,760
i was just checking it just

00:31:33,360 --> 00:31:37,120
to show the um the entire folders and

00:31:35,760 --> 00:31:40,159
the permissions on

00:31:37,120 --> 00:31:42,080
uh my on the uh on the file

00:31:40,159 --> 00:31:44,720
on the photo basically application

00:31:42,080 --> 00:31:45,519
folder and this also this particular

00:31:44,720 --> 00:31:48,159
stage is just

00:31:45,519 --> 00:31:49,279
echo deployment starting nothing really

00:31:48,159 --> 00:31:50,559
special it's just to show that

00:31:49,279 --> 00:31:53,279
deployment is starting

00:31:50,559 --> 00:31:53,840
and when i run now the last stage is cf

00:31:53,279 --> 00:31:57,120
push

00:31:53,840 --> 00:32:00,480
so cf push exchange rate spa now

00:31:57,120 --> 00:32:03,039
let me run this battle clock um

00:32:00,480 --> 00:32:03,919
job again and see what happens so if i

00:32:03,039 --> 00:32:06,640
would

00:32:03,919 --> 00:32:07,519
click on commit stages commit changes

00:32:06,640 --> 00:32:09,919
and i come to

00:32:07,519 --> 00:32:11,760
pipelines so this pipeline shows every

00:32:09,919 --> 00:32:15,200
how your pipelines are defined

00:32:11,760 --> 00:32:16,559
so for example now this is the stages so

00:32:15,200 --> 00:32:17,120
this is the view which is currently

00:32:16,559 --> 00:32:18,880
running

00:32:17,120 --> 00:32:21,039
and this is deployed which has currently

00:32:18,880 --> 00:32:22,640
been created now it's running

00:32:21,039 --> 00:32:24,399
and i know you've seen a lot of field i

00:32:22,640 --> 00:32:26,399
mean that's how cicd works the allows

00:32:24,399 --> 00:32:29,519
field field through before it gets the

00:32:26,399 --> 00:32:30,880
way it actually passes so uh let me just

00:32:29,519 --> 00:32:33,919
quickly show the uh

00:32:30,880 --> 00:32:36,240
build phase it takes a couple of seconds

00:32:33,919 --> 00:32:37,600
if not up to a minute for the entire um

00:32:36,240 --> 00:32:38,320
thing to run so it's gonna take you a

00:32:37,600 --> 00:32:41,600
while

00:32:38,320 --> 00:32:44,399
and um if this actually works

00:32:41,600 --> 00:32:44,960
it jumps to the next stage so because of

00:32:44,399 --> 00:32:46,960
time

00:32:44,960 --> 00:32:48,240
i'm just going to show you an example of

00:32:46,960 --> 00:32:50,159
it um

00:32:48,240 --> 00:32:51,519
the whole deployment how and how it

00:32:50,159 --> 00:32:54,559
passed so

00:32:51,519 --> 00:32:56,960
uh so if i should scroll down

00:32:54,559 --> 00:32:58,799
so this is the same process that i did i

00:32:56,960 --> 00:32:59,519
actually deployed it one day ago before

00:32:58,799 --> 00:33:01,760
today

00:32:59,519 --> 00:33:03,120
um so this is how it does it just runs

00:33:01,760 --> 00:33:04,000
the entire command so you know i'd

00:33:03,120 --> 00:33:06,880
specify

00:33:04,000 --> 00:33:08,159
in the um gitlab the yml file that you

00:33:06,880 --> 00:33:11,200
should npm install so

00:33:08,159 --> 00:33:12,640
npm distorted and dazzled to also um run

00:33:11,200 --> 00:33:14,399
that npm audix fix

00:33:12,640 --> 00:33:15,840
now after this job has succeeded it

00:33:14,399 --> 00:33:18,880
moves on to the next job

00:33:15,840 --> 00:33:21,279
which is deploy phase

00:33:18,880 --> 00:33:22,720
which is the deploy phase now the deploy

00:33:21,279 --> 00:33:24,240
phase is the most interesting part this

00:33:22,720 --> 00:33:25,200
is where we actually use cloudfront

00:33:24,240 --> 00:33:27,679
before components

00:33:25,200 --> 00:33:29,600
right so the first thing it does is to

00:33:27,679 --> 00:33:30,000
install cloud 4g so this is where we

00:33:29,600 --> 00:33:32,159
have

00:33:30,000 --> 00:33:34,080
app get updates now we're also

00:33:32,159 --> 00:33:36,320
installing all the negative kits

00:33:34,080 --> 00:33:37,360
and we're now installing um cloud

00:33:36,320 --> 00:33:39,279
foundry

00:33:37,360 --> 00:33:42,080
and we are also installing cloud

00:33:39,279 --> 00:33:44,399
friendly um cfc lights version seven

00:33:42,080 --> 00:33:45,600
here if you can see then this is when i

00:33:44,399 --> 00:33:47,519
checks the version

00:33:45,600 --> 00:33:48,880
of cf to be sure that it has actually

00:33:47,519 --> 00:33:51,360
been installed if

00:33:48,880 --> 00:33:52,320
this command fails it's the whole job

00:33:51,360 --> 00:33:54,480
will stop here

00:33:52,320 --> 00:33:55,919
because you can't find cloud foundry for

00:33:54,480 --> 00:33:58,159
um cloud foundry installed

00:33:55,919 --> 00:33:59,919
now the next thing is to do the

00:33:58,159 --> 00:34:03,760
configure the api endpoints which

00:33:59,919 --> 00:34:05,840
actually it has um the next is also to

00:34:03,760 --> 00:34:06,960
authenticate with the with the api

00:34:05,840 --> 00:34:09,200
endpoint that was set

00:34:06,960 --> 00:34:10,159
and the username and password then the

00:34:09,200 --> 00:34:14,079
space that was

00:34:10,159 --> 00:34:16,800
set very very important and lastly um

00:34:14,079 --> 00:34:18,159
and before that i also set the amv the

00:34:16,800 --> 00:34:19,679
api keys that is needed for the

00:34:18,159 --> 00:34:21,359
application to actually work

00:34:19,679 --> 00:34:23,520
so the convert api key so this thing

00:34:21,359 --> 00:34:25,119
converts sets adds um this ef

00:34:23,520 --> 00:34:27,520
environmental variable to the whole

00:34:25,119 --> 00:34:28,960
um the um to your application on cloud

00:34:27,520 --> 00:34:30,320
to california environments because it

00:34:28,960 --> 00:34:31,599
runs in excel from your bam in your

00:34:30,320 --> 00:34:33,599
cloud and your environment

00:34:31,599 --> 00:34:36,399
now this is the ls that is you should be

00:34:33,599 --> 00:34:39,839
sure to to basically show

00:34:36,399 --> 00:34:41,520
all the um all the files in our folder

00:34:39,839 --> 00:34:42,879
and this is deployment starting then

00:34:41,520 --> 00:34:44,879
this is cf push

00:34:42,879 --> 00:34:46,240
now what it does here is it packages

00:34:44,879 --> 00:34:49,280
apply for upload

00:34:46,240 --> 00:34:52,159
and um it stages our app

00:34:49,280 --> 00:34:53,679
and uses the blue packs to detect which

00:34:52,159 --> 00:34:55,119
application are we actually

00:34:53,679 --> 00:34:56,879
kind of application we can be deploying

00:34:55,119 --> 00:34:58,960
so if you can see here

00:34:56,879 --> 00:35:00,720
three or four build packs access

00:34:58,960 --> 00:35:02,640
participation basically uses the packet

00:35:00,720 --> 00:35:04,640
packet to build pack with package boot

00:35:02,640 --> 00:35:06,400
cloud is uh a boot pack that

00:35:04,640 --> 00:35:07,760
is that was created by the cloud front

00:35:06,400 --> 00:35:10,079
is a cloud foundry project

00:35:07,760 --> 00:35:11,599
and um it uses the cloud native boot

00:35:10,079 --> 00:35:15,040
pack specifications

00:35:11,599 --> 00:35:17,599
to actually to work and um

00:35:15,040 --> 00:35:19,040
so this build pack basically is what's

00:35:17,599 --> 00:35:21,520
going to help us to deploy

00:35:19,040 --> 00:35:23,119
our node application so if it's a ruby

00:35:21,520 --> 00:35:25,520
application you use the packet to be

00:35:23,119 --> 00:35:27,200
packed that's it that's for ruby and if

00:35:25,520 --> 00:35:27,760
it's a go use the package build pack

00:35:27,200 --> 00:35:29,760
that's for

00:35:27,760 --> 00:35:30,800
school basically it's just uses build

00:35:29,760 --> 00:35:33,520
packs to help us

00:35:30,800 --> 00:35:35,119
um deploy up to new apple's pic kind of

00:35:33,520 --> 00:35:38,480
application reward also

00:35:35,119 --> 00:35:41,119
application like ram said and from here

00:35:38,480 --> 00:35:41,680
he just does like a couple of things now

00:35:41,119 --> 00:35:43,839
if you

00:35:41,680 --> 00:35:46,320
look at this this particular process

00:35:43,839 --> 00:35:46,800
here online 193 is basically the start

00:35:46,320 --> 00:35:48,160
command

00:35:46,800 --> 00:35:50,800
this is the command actually starts our

00:35:48,160 --> 00:35:52,320
application right um so it actually has

00:35:50,800 --> 00:35:53,520
to pick up this command for it to be

00:35:52,320 --> 00:35:54,480
able to successfully start our

00:35:53,520 --> 00:35:58,079
application

00:35:54,480 --> 00:35:58,960
now um after doing the whole thing it

00:35:58,079 --> 00:36:00,640
basically

00:35:58,960 --> 00:36:02,160
tries to after deploying the pushing the

00:36:00,640 --> 00:36:04,160
application and packaging it

00:36:02,160 --> 00:36:05,920
it now tries to start the application

00:36:04,160 --> 00:36:08,000
with the start command

00:36:05,920 --> 00:36:09,760
that have we've specified like normal

00:36:08,000 --> 00:36:11,920
start from mount so starting um

00:36:09,760 --> 00:36:12,800
node projects which is the js most of

00:36:11,920 --> 00:36:16,480
the time

00:36:12,800 --> 00:36:19,760
then when it automatically starts it

00:36:16,480 --> 00:36:21,920
you can see that there's a crazy this is

00:36:19,760 --> 00:36:23,599
there's a prints to our console which is

00:36:21,920 --> 00:36:24,640
running so application has started and i

00:36:23,599 --> 00:36:27,200
started running

00:36:24,640 --> 00:36:28,960
and um the name that specified the name

00:36:27,200 --> 00:36:29,920
of the app like we specified exchange

00:36:28,960 --> 00:36:31,920
with spa

00:36:29,920 --> 00:36:33,599
the requested state is started the route

00:36:31,920 --> 00:36:35,680
is not the route is basically

00:36:33,599 --> 00:36:37,920
where we can find the application

00:36:35,680 --> 00:36:39,359
running it's a link for application for

00:36:37,920 --> 00:36:41,920
our application basically

00:36:39,359 --> 00:36:43,119
so let's check if it's actually deployed

00:36:41,920 --> 00:36:46,480
completely

00:36:43,119 --> 00:36:48,640
and okay so what

00:36:46,480 --> 00:36:50,079
we basically have pushed recently has

00:36:48,640 --> 00:36:51,599
actually deployed now let's see if we

00:36:50,079 --> 00:36:53,599
can find application running

00:36:51,599 --> 00:36:54,960
so if this is this is basically where we

00:36:53,599 --> 00:36:57,359
can find our application

00:36:54,960 --> 00:36:59,599
now if i should come here and do

00:36:57,359 --> 00:37:02,480
exchange

00:36:59,599 --> 00:37:03,920
um yes so this is basically the link

00:37:02,480 --> 00:37:06,160
exchange rate xp

00:37:03,920 --> 00:37:07,119
apps three four this is the ip that

00:37:06,160 --> 00:37:09,520
we've configured

00:37:07,119 --> 00:37:11,280
you on google on google cloud and if i

00:37:09,520 --> 00:37:14,320
should click on this

00:37:11,280 --> 00:37:14,320
fingers crossed

00:37:15,119 --> 00:37:18,400
we should see our application running

00:37:17,359 --> 00:37:20,880
live

00:37:18,400 --> 00:37:22,560
hopefully i mean yes sure definitely so

00:37:20,880 --> 00:37:24,320
this is basically the application it's

00:37:22,560 --> 00:37:25,359
basically running live on cloud for

00:37:24,320 --> 00:37:28,400
companies

00:37:25,359 --> 00:37:30,960
and um we have basically just choose

00:37:28,400 --> 00:37:31,599
um currency you can also change your

00:37:30,960 --> 00:37:33,200
exchange

00:37:31,599 --> 00:37:34,960
you can also change the currency and

00:37:33,200 --> 00:37:37,119
also see history recoveries for

00:37:34,960 --> 00:37:39,040
basically for different dates so this is

00:37:37,119 --> 00:37:40,640
basically just a very simple i just

00:37:39,040 --> 00:37:41,920
demonstrate how to

00:37:40,640 --> 00:37:43,920
view the very simple deployment

00:37:41,920 --> 00:37:44,640
application pipeline for your node.js

00:37:43,920 --> 00:37:47,599
application

00:37:44,640 --> 00:37:48,880
this would also work for um whatever

00:37:47,599 --> 00:37:50,640
type of application you're building just

00:37:48,880 --> 00:37:53,280
need to specify the correct scripts

00:37:50,640 --> 00:37:53,839
when running when um writing the yml

00:37:53,280 --> 00:37:56,320
file

00:37:53,839 --> 00:37:58,480
so this is it this is just how to create

00:37:56,320 --> 00:38:00,079
a simple deployment pipeline with cloud

00:37:58,480 --> 00:38:03,040
foundry and git lab

00:38:00,079 --> 00:38:04,960
um cicd with also the help of the gitlab

00:38:03,040 --> 00:38:05,599
runner basically so this is just if this

00:38:04,960 --> 00:38:06,800
is how

00:38:05,599 --> 00:38:09,599
application is running live on

00:38:06,800 --> 00:38:11,920
cloudflare for companies as easy as

00:38:09,599 --> 00:38:13,920
it is this is very very easy i do not

00:38:11,920 --> 00:38:16,880
have so much knowledge in

00:38:13,920 --> 00:38:18,000
devops in the whole deployment thing but

00:38:16,880 --> 00:38:19,440
california has made it easier

00:38:18,000 --> 00:38:21,839
for me to do these things myself without

00:38:19,440 --> 00:38:23,839
having to get um to bring in

00:38:21,839 --> 00:38:25,280
a devil space i'm not saying that

00:38:23,839 --> 00:38:27,040
terrorist people

00:38:25,280 --> 00:38:28,960
are not needed but all i'm saying is

00:38:27,040 --> 00:38:30,400
that it makes it very very easy for you

00:38:28,960 --> 00:38:32,240
to do these things yourself

00:38:30,400 --> 00:38:33,760
and also for individual developers that

00:38:32,240 --> 00:38:34,240
want to just declare the application

00:38:33,760 --> 00:38:35,920
live

00:38:34,240 --> 00:38:37,280
their full education they are static

00:38:35,920 --> 00:38:40,400
sites applications

00:38:37,280 --> 00:38:41,920
you can kubernetes if you want to

00:38:40,400 --> 00:38:44,000
um you can easily do that with

00:38:41,920 --> 00:38:46,400
clarifying for kubernetes so

00:38:44,000 --> 00:38:48,480
thank you for listening to my demo our

00:38:46,400 --> 00:38:49,839
handover to ram to show us the gitlab

00:38:48,480 --> 00:38:51,839
the github actions

00:38:49,839 --> 00:38:53,200
posters i'm saying you love kit lab i

00:38:51,839 --> 00:38:56,320
don't know sorry for that

00:38:53,200 --> 00:38:58,800
so um the github actions process so ram

00:38:56,320 --> 00:39:01,839
can you take over

00:38:58,800 --> 00:39:01,839
yes i can

00:39:12,000 --> 00:39:17,440
alright so the process that shadrach

00:39:15,599 --> 00:39:21,119
outlined is basically

00:39:17,440 --> 00:39:25,119
um universally true which is

00:39:21,119 --> 00:39:25,119
you have a

00:39:25,200 --> 00:39:31,839
linux environment i guess which

00:39:28,560 --> 00:39:33,680
you can use to configure certain scripts

00:39:31,839 --> 00:39:37,200
certain workflows and just

00:39:33,680 --> 00:39:40,400
you know get your deployment

00:39:37,200 --> 00:39:43,359
done through this environment

00:39:40,400 --> 00:39:43,920
and that sort of a very similar approach

00:39:43,359 --> 00:39:47,280
that

00:39:43,920 --> 00:39:49,040
um we're going to see with gitlab

00:39:47,280 --> 00:39:50,800
actions as well

00:39:49,040 --> 00:39:52,480
github actions as well i think i've

00:39:50,800 --> 00:39:56,960
caught on to shedrack's

00:39:52,480 --> 00:39:56,960
habit of interchange but

00:39:57,839 --> 00:40:03,040
so i am going to quickly

00:40:01,200 --> 00:40:05,440
show a few things and then we will kick

00:40:03,040 --> 00:40:09,200
off a deployment much like

00:40:05,440 --> 00:40:10,400
what we just saw so i'm sure a lot of

00:40:09,200 --> 00:40:13,440
you

00:40:10,400 --> 00:40:15,920
know where workflows sit

00:40:13,440 --> 00:40:17,280
inside github so github actions

00:40:15,920 --> 00:40:19,760
basically employs

00:40:17,280 --> 00:40:20,960
what are known as workflows and

00:40:19,760 --> 00:40:24,800
workflows are

00:40:20,960 --> 00:40:26,960
a declarative ml file that basically

00:40:24,800 --> 00:40:29,599
take like a bunch of different

00:40:26,960 --> 00:40:33,280
parameters and commands and

00:40:29,599 --> 00:40:35,440
execute them in order now this deploy

00:40:33,280 --> 00:40:37,680
action is very simple and straight

00:40:35,440 --> 00:40:41,200
forward

00:40:37,680 --> 00:40:45,280
on every push that is made to the

00:40:41,200 --> 00:40:48,319
master branch let me increase my font

00:40:45,280 --> 00:40:52,240
just a little bit so

00:40:48,319 --> 00:40:54,640
as i was saying whenever a gate push

00:40:52,240 --> 00:40:56,640
is being made to the master branch of

00:40:54,640 --> 00:41:00,160
this particular repo

00:40:56,640 --> 00:41:01,200
then this but this job name that has

00:41:00,160 --> 00:41:03,359
been given

00:41:01,200 --> 00:41:04,560
on line number seven will basically

00:41:03,359 --> 00:41:08,560
execute

00:41:04,560 --> 00:41:12,079
now this job has two distinct steps

00:41:08,560 --> 00:41:15,920
one is to check out the source

00:41:12,079 --> 00:41:18,880
and two is to deploy to cloud foundry

00:41:15,920 --> 00:41:21,040
now um this is the cloud foundry

00:41:18,880 --> 00:41:24,000
endpoint that we are going to be using

00:41:21,040 --> 00:41:25,440
and then we have a set of username and

00:41:24,000 --> 00:41:28,640
passwords

00:41:25,440 --> 00:41:32,160
that is read from

00:41:28,640 --> 00:41:35,680
github secrets and written to the

00:41:32,160 --> 00:41:36,560
stream here and then we'll be making use

00:41:35,680 --> 00:41:40,720
of

00:41:36,560 --> 00:41:44,480
this configuration for

00:41:40,720 --> 00:41:46,240
the cloud foundry tenant that i will be

00:41:44,480 --> 00:41:48,160
using

00:41:46,240 --> 00:41:49,680
and then finally the command that we'll

00:41:48,160 --> 00:41:52,800
execute is just a

00:41:49,680 --> 00:41:53,280
simple cf push um as always that's where

00:41:52,800 --> 00:41:55,839
things

00:41:53,280 --> 00:41:55,839
converge

00:41:58,079 --> 00:42:03,119
now those are sort of the different

00:41:59,839 --> 00:42:05,920
stages and let me just

00:42:03,119 --> 00:42:05,920
walk you through

00:42:06,240 --> 00:42:11,359
the app itself and let's maybe kick off

00:42:09,040 --> 00:42:14,480
like a build

00:42:11,359 --> 00:42:16,640
before before we do anything else

00:42:14,480 --> 00:42:19,440
so hopefully this font is big enough for

00:42:16,640 --> 00:42:19,440
folks to read

00:42:23,520 --> 00:42:31,839
and just to confirm that this is

00:42:26,800 --> 00:42:45,839
in fact

00:42:31,839 --> 00:42:45,839
that i have probably not

00:42:46,720 --> 00:42:52,240
yeah so like i mentioned there is a

00:42:56,960 --> 00:43:03,440
workflows folder inside

00:43:00,400 --> 00:43:06,560
the repo and that basically has the

00:43:03,440 --> 00:43:06,560
yaml file that

00:43:07,839 --> 00:43:16,640
that will be using for the deployment so

00:43:13,040 --> 00:43:19,920
here i'm going to just check the

00:43:16,640 --> 00:43:23,040
thing and maybe try

00:43:19,920 --> 00:43:26,480
and make some tiny modification

00:43:23,040 --> 00:43:29,040
somewhere somehow without hopefully

00:43:26,480 --> 00:43:29,040
breaking

00:43:30,480 --> 00:43:33,520
any of these things

00:43:37,200 --> 00:43:41,839
probably not

00:44:02,720 --> 00:44:09,839
anyhow let's see

00:44:13,839 --> 00:44:21,520
so interestingly um

00:44:17,520 --> 00:44:25,200
again sorry for the digression but

00:44:21,520 --> 00:44:27,839
um this is a go application that we will

00:44:25,200 --> 00:44:28,400
that we can basically modify and deploy

00:44:27,839 --> 00:44:31,680
and

00:44:28,400 --> 00:44:35,359
um it already

00:44:31,680 --> 00:44:37,280
resides here and much like sharetrack it

00:44:35,359 --> 00:44:40,319
took a few attempts for me to get

00:44:37,280 --> 00:44:41,280
it running but um you know i guess

00:44:40,319 --> 00:44:44,480
that's how

00:44:41,280 --> 00:44:47,520
cicd uh works so

00:44:44,480 --> 00:44:50,960
what i'm going to do is just add

00:44:47,520 --> 00:44:52,640
um something to the something very

00:44:50,960 --> 00:44:57,119
harmless

00:44:52,640 --> 00:44:57,119
so i'm going to add an extra line here

00:44:58,240 --> 00:45:01,839
line to demo

00:45:02,839 --> 00:45:05,839
cic

00:45:17,200 --> 00:45:20,960
um i will recommit

00:45:21,119 --> 00:45:23,680
just

00:45:24,319 --> 00:45:28,640
live stream things

00:45:28,880 --> 00:45:33,839
and then i will get push

00:45:38,560 --> 00:45:46,160
all right so now the push is complete

00:45:42,640 --> 00:45:49,440
and this should basically trigger

00:45:46,160 --> 00:45:52,400
that workflow which we just saw so

00:45:49,440 --> 00:45:52,400
again much like

00:45:53,599 --> 00:45:57,920
the git lab demo that we saw and this

00:45:56,960 --> 00:46:01,359
basically does

00:45:57,920 --> 00:46:05,119
the job of setting up like a local

00:46:01,359 --> 00:46:09,280
um doing like a build

00:46:05,119 --> 00:46:12,400
and then doing a cf push now the

00:46:09,280 --> 00:46:15,760
build stage here is basically

00:46:12,400 --> 00:46:19,040
creating like a docker container

00:46:15,760 --> 00:46:22,720
and installing cfcli

00:46:19,040 --> 00:46:26,000
inside the container so that will then

00:46:22,720 --> 00:46:28,160
have the ability to do a cf push so

00:46:26,000 --> 00:46:29,119
it now it's basically checking out the

00:46:28,160 --> 00:46:32,400
code

00:46:29,119 --> 00:46:34,800
um logging in with the end point

00:46:32,400 --> 00:46:37,359
authenticating with the end point and

00:46:34,800 --> 00:46:40,960
starting to do the cf push so

00:46:37,359 --> 00:46:44,800
here on 49 is the command that basically

00:46:40,960 --> 00:46:44,800
did the cf push

00:46:45,280 --> 00:46:49,119
there is there are a couple of aspects

00:46:47,599 --> 00:46:49,839
here that i'd like to highlight the

00:46:49,119 --> 00:46:53,119
first one

00:46:49,839 --> 00:46:56,000
is that this

00:46:53,119 --> 00:46:57,839
build makes use of the github github

00:46:56,000 --> 00:47:00,000
container registry as well

00:46:57,839 --> 00:47:01,520
in addition to just version control and

00:47:00,000 --> 00:47:05,200
github actions

00:47:01,520 --> 00:47:07,520
so both gitlab and github have container

00:47:05,200 --> 00:47:09,680
registries that it uses

00:47:07,520 --> 00:47:11,200
i'll get into a little bit more detail

00:47:09,680 --> 00:47:13,760
towards the end of the stream but for

00:47:11,200 --> 00:47:16,640
now i just like to point that out so

00:47:13,760 --> 00:47:19,200
all the build backs that are

00:47:16,640 --> 00:47:22,400
participating here will build

00:47:19,200 --> 00:47:25,280
containers out of

00:47:22,400 --> 00:47:27,839
the code and those containers will get

00:47:25,280 --> 00:47:30,079
uploaded to the container registry

00:47:27,839 --> 00:47:32,720
um which in this case is the github

00:47:30,079 --> 00:47:34,960
container registry so it's a very

00:47:32,720 --> 00:47:34,960
um

00:47:36,160 --> 00:47:40,800
vendor specific demo um that's what we

00:47:38,960 --> 00:47:44,400
intended for this to be so your

00:47:40,800 --> 00:47:47,280
version control is using github your

00:47:44,400 --> 00:47:49,280
actions and workflows are using github

00:47:47,280 --> 00:47:51,359
and then your container registries are

00:47:49,280 --> 00:47:54,800
also using github so it's a very

00:47:51,359 --> 00:47:56,880
pure play github sort of item

00:47:54,800 --> 00:47:59,040
you can do the exact same thing with

00:47:56,880 --> 00:48:01,839
gitlab as well

00:47:59,040 --> 00:48:02,880
but we'll save that for a few minutes

00:48:01,839 --> 00:48:07,839
now

00:48:02,880 --> 00:48:07,839
the app has actually been deployed

00:48:09,280 --> 00:48:14,480
and we have a route here hey

00:48:12,260 --> 00:48:17,520
[Music]

00:48:14,480 --> 00:48:20,079
much like the git

00:48:17,520 --> 00:48:21,839
lab demo you know it's basically the

00:48:20,079 --> 00:48:25,280
same thing so stuff gets pushed

00:48:21,839 --> 00:48:28,480
stuff gets built um and then you

00:48:25,280 --> 00:48:32,160
you you're given like

00:48:28,480 --> 00:48:35,599
this thing so um because we don't have

00:48:32,160 --> 00:48:39,520
a an ssl certificate you're seeing this

00:48:35,599 --> 00:48:42,800
um i mean but this this is basically

00:48:39,520 --> 00:48:45,920
the app so um

00:48:42,800 --> 00:48:49,359
yeah that's that's basically what um

00:48:45,920 --> 00:48:53,119
did the github actions

00:48:49,359 --> 00:48:57,440
looks like now just to sort of dive into

00:48:53,119 --> 00:48:59,440
a couple of other things um

00:48:57,440 --> 00:49:01,520
if you notice in the yaml there's

00:48:59,440 --> 00:49:05,119
basically these two steps there's

00:49:01,520 --> 00:49:08,559
actions checkout and then there is

00:49:05,119 --> 00:49:11,920
a cfcli actions action

00:49:08,559 --> 00:49:15,040
that has a more custom prefix now

00:49:11,920 --> 00:49:18,480
i just quickly get into what this is now

00:49:15,040 --> 00:49:20,800
github actions has a is is allows you to

00:49:18,480 --> 00:49:21,440
basically compose a workflow built out

00:49:20,800 --> 00:49:24,079
of

00:49:21,440 --> 00:49:25,440
uh several other smaller what it calls

00:49:24,079 --> 00:49:29,920
are actions

00:49:25,440 --> 00:49:30,720
right so this particular workflow has

00:49:29,920 --> 00:49:33,359
two jobs

00:49:30,720 --> 00:49:34,160
one is or i should use the word job

00:49:33,359 --> 00:49:38,319
sorry

00:49:34,160 --> 00:49:41,680
um it has two phases one is to check out

00:49:38,319 --> 00:49:43,040
the repo which in this case is the test

00:49:41,680 --> 00:49:45,520
go application

00:49:43,040 --> 00:49:46,480
and then the other use is basically the

00:49:45,520 --> 00:49:50,000
other

00:49:46,480 --> 00:49:52,720
action is basically to run the cf

00:49:50,000 --> 00:49:56,079
commands so to in order to run the cf

00:49:52,720 --> 00:49:58,559
commands it makes use of

00:49:56,079 --> 00:50:00,240
a set of actions that basically makes

00:49:58,559 --> 00:50:04,559
use of another repo

00:50:00,240 --> 00:50:08,800
that i have so if i just quickly switch

00:50:04,559 --> 00:50:09,119
to that it will become very clear what

00:50:08,800 --> 00:50:12,240
this

00:50:09,119 --> 00:50:15,599
is doing so this is contributed by

00:50:12,240 --> 00:50:19,280
some other user i just make use of

00:50:15,599 --> 00:50:24,640
it here but basically what this does

00:50:19,280 --> 00:50:29,520
is it takes like a bunch of

00:50:24,640 --> 00:50:34,240
different inputs and then

00:50:29,520 --> 00:50:39,280
it does that job of first installing

00:50:34,240 --> 00:50:42,319
cf and then doing the whole

00:50:39,280 --> 00:50:43,599
authentication and other things so let

00:50:42,319 --> 00:50:46,640
me open this

00:50:43,599 --> 00:50:46,960
and the other one side by side so that

00:50:46,640 --> 00:50:50,079
you

00:50:46,960 --> 00:50:54,319
actually have good feel for

00:50:50,079 --> 00:50:59,040
what each of these

00:50:54,319 --> 00:50:59,040
hopefully this layout is not too

00:51:06,839 --> 00:51:09,839
confusing

00:51:17,920 --> 00:51:26,960
all right so if you look at this

00:51:23,280 --> 00:51:29,119
um between lines 11 and 18

00:51:26,960 --> 00:51:31,119
um there's basically like a handful of

00:51:29,119 --> 00:51:35,040
directives about what to do

00:51:31,119 --> 00:51:38,319
and if you look at

00:51:35,040 --> 00:51:41,440
this um on the left here

00:51:38,319 --> 00:51:44,880
on line 11 inside this

00:51:41,440 --> 00:51:46,880
it basically says cf something and that

00:51:44,880 --> 00:51:51,200
something comes from this command on

00:51:46,880 --> 00:51:54,960
line 80 so it basically sets

00:51:51,200 --> 00:51:55,760
um it just says cf push from within that

00:51:54,960 --> 00:51:58,960
directory

00:51:55,760 --> 00:52:01,410
right and before that on line

00:51:58,960 --> 00:52:02,839
seven um there's two

00:52:01,410 --> 00:52:05,040
[Music]

00:52:02,839 --> 00:52:06,880
um parameters that

00:52:05,040 --> 00:52:08,559
it also accepts so that those are

00:52:06,880 --> 00:52:12,079
supplied on line 16 and

00:52:08,559 --> 00:52:15,440
17 here so cfr translates into

00:52:12,079 --> 00:52:17,520
dollar input cfr cfs underscore space

00:52:15,440 --> 00:52:20,960
translates into input cf

00:52:17,520 --> 00:52:26,000
space and then before that

00:52:20,960 --> 00:52:28,800
here on line 4 it basically uses

00:52:26,000 --> 00:52:29,839
the parameters that are given on lines

00:52:28,800 --> 00:52:34,559
14 and

00:52:29,839 --> 00:52:38,079
50. before that the parameter on line 13

00:52:34,559 --> 00:52:40,880
it makes use of here on line 3

00:52:38,079 --> 00:52:41,599
okay so that's basically how this whole

00:52:40,880 --> 00:52:44,079
um

00:52:41,599 --> 00:52:46,000
those are just the different lines that

00:52:44,079 --> 00:52:48,800
are executed and the setup for

00:52:46,000 --> 00:52:50,480
that comes from this docker file now

00:52:48,800 --> 00:52:54,960
this docker file is basically

00:52:50,480 --> 00:52:58,839
what is built inside the container now

00:52:54,960 --> 00:53:01,280
the git lab version that you showed

00:52:58,839 --> 00:53:01,599
basically these shell commands to them

00:53:01,280 --> 00:53:04,559
so

00:53:01,599 --> 00:53:05,200
it basically said yeah you know do the

00:53:04,559 --> 00:53:08,319
update

00:53:05,200 --> 00:53:10,480
and just install the cfc uh cli just so

00:53:08,319 --> 00:53:13,200
are you saying

00:53:10,480 --> 00:53:14,559
yeah yeah so gitlab is actually like

00:53:13,200 --> 00:53:18,640
much stress free

00:53:14,559 --> 00:53:22,160
than github

00:53:18,640 --> 00:53:25,280
yeah i mean you can basically create

00:53:22,160 --> 00:53:29,599
the same experience using a container

00:53:25,280 --> 00:53:31,440
that's it um different things cause

00:53:29,599 --> 00:53:32,640
stress to different kinds of people

00:53:31,440 --> 00:53:35,839
right so

00:53:32,640 --> 00:53:38,079
uh yeah one person's meat might be

00:53:35,839 --> 00:53:40,400
another person's poison so

00:53:38,079 --> 00:53:42,000
yeah yeah fair points fair points

00:53:40,400 --> 00:53:45,359
there's just different ways in which

00:53:42,000 --> 00:53:49,200
to uh do this and obviously

00:53:45,359 --> 00:53:49,520
you being you um is more stressful for

00:53:49,200 --> 00:53:53,119
you

00:53:49,520 --> 00:53:56,240
so yes yes in that regards

00:53:53,119 --> 00:53:59,680
uh it probably is a little

00:53:56,240 --> 00:54:00,640
uh an additional sort of hope to jump

00:53:59,680 --> 00:54:02,559
through

00:54:00,640 --> 00:54:06,880
but since we are friends you can clone

00:54:02,559 --> 00:54:06,880
my repo and not have to worry about it

00:54:08,800 --> 00:54:16,960
but yeah basically uh this this sets up

00:54:12,960 --> 00:54:19,920
cfcli and moves to the uh entry point

00:54:16,960 --> 00:54:21,359
uh script which is basically this the

00:54:19,920 --> 00:54:26,000
the things that we saw get

00:54:21,359 --> 00:54:28,800
executed so um that is sort of how

00:54:26,000 --> 00:54:28,800
this whole

00:54:30,640 --> 00:54:34,559
thing works with github and github

00:54:33,359 --> 00:54:37,839
actions

00:54:34,559 --> 00:54:39,119
and so on so very simple set of

00:54:37,839 --> 00:54:41,359
instructions but

00:54:39,119 --> 00:54:42,880
you know delivers a very powerful sort

00:54:41,359 --> 00:54:45,599
of thing so

00:54:42,880 --> 00:54:46,880
overall the entire process took about or

00:54:45,599 --> 00:54:50,240
took a couple of minutes

00:54:46,880 --> 00:54:52,880
it's i mean it works

00:54:50,240 --> 00:54:54,319
it's fast when it works it's faster when

00:54:52,880 --> 00:54:58,240
it fails i guess

00:54:54,319 --> 00:55:01,119
but um i guess that that's how it is so

00:54:58,240 --> 00:55:02,079
if you are already using like a lot of

00:55:01,119 --> 00:55:04,000
github

00:55:02,079 --> 00:55:05,440
on your various projects then i think

00:55:04,000 --> 00:55:08,559
this is

00:55:05,440 --> 00:55:10,559
an excellent um additional tool that you

00:55:08,559 --> 00:55:11,599
can use in order to automate the whole

00:55:10,559 --> 00:55:14,960
thing

00:55:11,599 --> 00:55:17,920
um so

00:55:14,960 --> 00:55:20,960
so yeah if there's any questions i'd

00:55:17,920 --> 00:55:24,160
encourage you to post it on

00:55:20,960 --> 00:55:26,640
the chat or as a tweet or

00:55:24,160 --> 00:55:28,480
on twitch you can just send a message on

00:55:26,640 --> 00:55:30,640
that live stream

00:55:28,480 --> 00:55:32,400
i'm happy to take a look at those and

00:55:30,640 --> 00:55:35,599
share like and i can

00:55:32,400 --> 00:55:39,599
answer them um

00:55:35,599 --> 00:55:42,799
meanwhile the last part that i thought

00:55:39,599 --> 00:55:46,880
um i will show is

00:55:42,799 --> 00:55:48,799
this thing with container registry so

00:55:46,880 --> 00:55:50,079
just to give a little background cloud

00:55:48,799 --> 00:55:51,920
foundry

00:55:50,079 --> 00:55:54,480
like we mentioned makes use of build

00:55:51,920 --> 00:55:55,839
packs and build bags basically generate

00:55:54,480 --> 00:56:00,240
what are known as

00:55:55,839 --> 00:56:03,760
containers um obviously like

00:56:00,240 --> 00:56:06,400
it's you can sort of think of it as a

00:56:03,760 --> 00:56:08,400
a kind of a replacement for your docker

00:56:06,400 --> 00:56:10,480
stuff that you do already

00:56:08,400 --> 00:56:12,640
but it's very similar in some ways it's

00:56:10,480 --> 00:56:15,440
slightly different in other ways but

00:56:12,640 --> 00:56:16,880
basically the idea is all the different

00:56:15,440 --> 00:56:20,559
services within the app

00:56:16,880 --> 00:56:23,040
are generated as different layers

00:56:20,559 --> 00:56:24,880
different layered containers and then

00:56:23,040 --> 00:56:27,040
all of those containers are

00:56:24,880 --> 00:56:28,960
instead of being stored on the docker

00:56:27,040 --> 00:56:31,520
runtime locally can go

00:56:28,960 --> 00:56:33,119
and be stored in a container registry

00:56:31,520 --> 00:56:33,760
that's on the cloud so that's sort of

00:56:33,119 --> 00:56:36,000
the

00:56:33,760 --> 00:56:37,119
cloud native push that a lot of

00:56:36,000 --> 00:56:38,799
companies

00:56:37,119 --> 00:56:41,680
and a lot of engineering teams are

00:56:38,799 --> 00:56:43,839
moving towards right now so

00:56:41,680 --> 00:56:46,000
it gets pushed to the cloud and then

00:56:43,839 --> 00:56:47,359
from this cloud container registry it

00:56:46,000 --> 00:56:50,720
gets deployed to your

00:56:47,359 --> 00:56:55,119
kubernetes based infrastructure

00:56:50,720 --> 00:56:58,319
and the container runtime over there so

00:56:55,119 --> 00:57:00,400
it provides a very useful and very

00:56:58,319 --> 00:57:02,880
convenient method to

00:57:00,400 --> 00:57:04,240
generate containers and have them pushed

00:57:02,880 --> 00:57:06,240
to

00:57:04,240 --> 00:57:08,559
your your cloud-based infrastructure and

00:57:06,240 --> 00:57:12,000
the container runtime basically

00:57:08,559 --> 00:57:13,680
so cloud foundry for kubernetes

00:57:12,000 --> 00:57:15,200
which is the project that we're using

00:57:13,680 --> 00:57:19,119
right now

00:57:15,200 --> 00:57:23,040
mandates the use of a oci compatible

00:57:19,119 --> 00:57:26,960
container registry and in this case

00:57:23,040 --> 00:57:30,400
we are making use of this github version

00:57:26,960 --> 00:57:31,920
there is also a gitlab

00:57:30,400 --> 00:57:34,000
container registry which i have

00:57:31,920 --> 00:57:38,480
configured on

00:57:34,000 --> 00:57:41,280
another kubernetes cluster that i have

00:57:38,480 --> 00:57:42,079
and both of these you know basically

00:57:41,280 --> 00:57:45,920
perform

00:57:42,079 --> 00:57:45,920
the exact same function which is

00:57:46,079 --> 00:57:53,760
provide a cloud native means

00:57:49,119 --> 00:57:56,960
of creating

00:57:53,760 --> 00:58:00,240
containers that they can just host

00:57:56,960 --> 00:58:03,599
so this is the

00:58:00,240 --> 00:58:04,880
gitlab container registry and you know

00:58:03,599 --> 00:58:07,520
it has like

00:58:04,880 --> 00:58:08,400
all of the it has like a very similar

00:58:07,520 --> 00:58:11,680
setup so

00:58:08,400 --> 00:58:14,400
all of the builds result

00:58:11,680 --> 00:58:15,520
in different layers being rendered as

00:58:14,400 --> 00:58:18,799
immutable

00:58:15,520 --> 00:58:20,799
artifacts and those artifacts are

00:58:18,799 --> 00:58:23,680
saved in these container registries and

00:58:20,799 --> 00:58:25,200
whenever you want to do a deploy

00:58:23,680 --> 00:58:26,880
it's taken from these container

00:58:25,200 --> 00:58:29,440
registries and deployed onto

00:58:26,880 --> 00:58:30,880
the infrastructure that we have so in

00:58:29,440 --> 00:58:33,599
gitlab

00:58:30,880 --> 00:58:34,400
you always have to it has to be inside a

00:58:33,599 --> 00:58:36,559
project

00:58:34,400 --> 00:58:39,119
so there's a container registry under

00:58:36,559 --> 00:58:41,920
packages and registries which is part of

00:58:39,119 --> 00:58:44,240
a project in this case it's a test

00:58:41,920 --> 00:58:47,839
container registry here

00:58:44,240 --> 00:58:50,960
and then in

00:58:47,839 --> 00:58:54,880
github land it's

00:58:50,960 --> 00:58:57,839
under packages so under the packages tab

00:58:54,880 --> 00:58:58,559
you have all of the different reports

00:58:57,839 --> 00:59:00,960
that

00:58:58,559 --> 00:59:04,319
are basically converted into containers

00:59:00,960 --> 00:59:08,079
and available for use

00:59:04,319 --> 00:59:09,760
so that sort of concludes

00:59:08,079 --> 00:59:12,720
all of the different pieces that we

00:59:09,760 --> 00:59:15,839
wanted to show today

00:59:12,720 --> 00:59:18,400
i don't see any questions yet

00:59:15,839 --> 00:59:19,599
but if you have anything you know feel

00:59:18,400 --> 00:59:23,119
free to reach us on

00:59:19,599 --> 00:59:25,599
twitter i am ramayang on twitter and

00:59:23,119 --> 00:59:29,200
shadrack is

00:59:25,599 --> 00:59:29,200
without blv ck

00:59:29,359 --> 00:59:33,040
on twitter so um you could also just you

00:59:32,319 --> 00:59:36,880
know tag

00:59:33,040 --> 00:59:36,880
the cloud foundry um

00:59:38,319 --> 00:59:43,920
yeah we trust me we see everything

00:59:41,599 --> 00:59:43,920
we do

00:59:44,720 --> 00:59:48,400
for folks who are interested in getting

00:59:46,720 --> 00:59:51,440
started there's also like a slack

00:59:48,400 --> 00:59:53,839
channel so slack.cloudfoundry.org

00:59:51,440 --> 00:59:54,640
the entire community hangs out there um

00:59:53,839 --> 00:59:57,200
this you know

00:59:54,640 --> 00:59:58,160
folks who probably know more than me or

00:59:57,200 --> 01:00:02,240
shadrach

00:59:58,160 --> 01:00:05,359
who can help yeah definitely trust me

01:00:02,240 --> 01:00:07,200
and yeah so if you're interested in

01:00:05,359 --> 01:00:10,839
you know getting started or getting any

01:00:07,200 --> 01:00:14,079
queries answered do join us there and

01:00:10,839 --> 01:00:14,960
cloudfoundry.org is the home page of the

01:00:14,079 --> 01:00:17,440
project

01:00:14,960 --> 01:00:18,960
you know everything is sort of linked

01:00:17,440 --> 01:00:22,079
from there

01:00:18,960 --> 01:00:23,599
the information that you just heard on

01:00:22,079 --> 01:00:25,920
this

01:00:23,599 --> 01:00:27,119
live stream is also available in the

01:00:25,920 --> 01:00:31,680
form of a couple of

01:00:27,119 --> 01:00:34,960
medium articles so medium.com

01:00:31,680 --> 01:00:37,280
cloud foundry foundation

01:00:34,960 --> 01:00:38,240
is is the email so we leave those

01:00:37,280 --> 01:00:41,359
details

01:00:38,240 --> 01:00:43,599
below in the stream right after so if

01:00:41,359 --> 01:00:46,559
you want for more information just

01:00:43,599 --> 01:00:47,440
feel free to drop in there and um sort

01:00:46,559 --> 01:00:50,319
of

01:00:47,440 --> 01:00:50,640
revisit all these topics but yeah thanks

01:00:50,319 --> 01:00:53,119
for

01:00:50,640 --> 01:00:54,960
joining us from different parts of the

01:00:53,119 --> 01:00:57,760
world wherever

01:00:54,960 --> 01:00:59,040
wherever you're viewing this from today

01:00:57,760 --> 01:01:01,680
yeah

01:00:59,040 --> 01:01:02,559
yeah we we would definitely hope to see

01:01:01,680 --> 01:01:06,880
you on

01:01:02,559 --> 01:01:06,880
future streams as well and uh

01:01:07,280 --> 01:01:10,319
yeah and we are also yeah we are also

01:01:08,960 --> 01:01:12,799
planning to make this frequent

01:01:10,319 --> 01:01:14,799
as possible so um we are going to make

01:01:12,799 --> 01:01:15,200
this i'll try to do this maybe once a

01:01:14,799 --> 01:01:16,799
month

01:01:15,200 --> 01:01:18,319
twice a month we don't know yet but it's

01:01:16,799 --> 01:01:20,960
going to be very frequent

01:01:18,319 --> 01:01:21,440
that normal than usual so uh we hope

01:01:20,960 --> 01:01:23,119
that

01:01:21,440 --> 01:01:25,520
like we have what we keep seeing um

01:01:23,119 --> 01:01:26,720
folks join in and learn more about on

01:01:25,520 --> 01:01:28,720
cloud foundry for governance

01:01:26,720 --> 01:01:29,839
and platform itself and how make your

01:01:28,720 --> 01:01:32,240
whole developer

01:01:29,839 --> 01:01:33,280
experience in your workflow very very

01:01:32,240 --> 01:01:35,040
interesting

01:01:33,280 --> 01:01:37,040
so uh thank you so much everybody for

01:01:35,040 --> 01:01:38,480
joining once again we are one minute

01:01:37,040 --> 01:01:40,160
ahead of time

01:01:38,480 --> 01:01:41,760
ahead of the time we've specified to our

01:01:40,160 --> 01:01:42,480
policies for taking one minute of the

01:01:41,760 --> 01:01:44,150
time

01:01:42,480 --> 01:01:48,880
and uh

01:01:44,150 --> 01:01:50,880
[Music]

01:01:48,880 --> 01:01:52,640
next month again with some other

01:01:50,880 --> 01:01:54,480
different topic and um

01:01:52,640 --> 01:01:55,839
thank you so much for always joining in

01:01:54,480 --> 01:01:58,880
if you always join him

01:01:55,839 --> 01:02:01,920
um so yeah bye and don't forget to wear

01:01:58,880 --> 01:02:01,920

YouTube URL: https://www.youtube.com/watch?v=f4nYRqMCZa4


