Title: Diego Update
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	Diego Update - 01 Onsi Fakhouri 720p
Captions: 
	00:00:00,079 --> 00:00:05,790
so I'm here to talk about Diego I wanted

00:00:03,840 --> 00:00:08,220
to first make a big shout out to Rene

00:00:05,790 --> 00:00:11,250
French who designed the Go gopher when I

00:00:08,220 --> 00:00:13,500
have appropriated very lovingly to try

00:00:11,250 --> 00:00:16,230
to give us some iconography to play with

00:00:13,500 --> 00:00:20,910
today so I want to tell you about what's

00:00:16,230 --> 00:00:24,449
new with Diego and last year I had this

00:00:20,910 --> 00:00:26,699
wonderful opportunity to tell a story it

00:00:24,449 --> 00:00:32,219
was a story that had at the beginning of

00:00:26,699 --> 00:00:36,420
a problem and then a proposed plan that

00:00:32,219 --> 00:00:45,950
culminated in solution it was a story

00:00:36,420 --> 00:00:54,809
perhaps of hope a new hope this year hmm

00:00:45,950 --> 00:00:56,219
it's complicated but there's a plot

00:00:54,809 --> 00:01:01,289
twist but I'll give it away

00:00:56,219 --> 00:01:02,609
turns out Diego is lattices father so I

00:01:01,289 --> 00:01:04,589
guess this is really the AYGO Strikes

00:01:02,609 --> 00:01:06,390
Back let's talk about we're actually

00:01:04,589 --> 00:01:08,909
gonna talk about and I just had five

00:01:06,390 --> 00:01:12,210
things first is just a quick recap of

00:01:08,909 --> 00:01:13,560
what Diego is which will oddly lead us

00:01:12,210 --> 00:01:16,590
to talk about what a container actually

00:01:13,560 --> 00:01:18,930
is and then I want to just briefly talk

00:01:16,590 --> 00:01:21,390
about Diego's evolution which will take

00:01:18,930 --> 00:01:25,650
us to lattice and then talk about the

00:01:21,390 --> 00:01:28,770
future okay so let's start with what is

00:01:25,650 --> 00:01:31,110
Diego so at its core Diego started off

00:01:28,770 --> 00:01:32,790
as a rewrite a rewrite of the Cloud

00:01:31,110 --> 00:01:36,600
Foundry runtime and that means the DEA

00:01:32,790 --> 00:01:38,119
is Health Manager warden we decided to

00:01:36,600 --> 00:01:42,630
add all these things in go

00:01:38,119 --> 00:01:44,700
so go so Diego that's the name that's

00:01:42,630 --> 00:01:46,860
where it came from that doesn't tell you

00:01:44,700 --> 00:01:49,880
what it is so it turns out Diego is a

00:01:46,860 --> 00:01:53,220
distributed system that orchestrates

00:01:49,880 --> 00:01:54,720
containerized workloads well let's dig

00:01:53,220 --> 00:01:57,509
into each of these pieces so the

00:01:54,720 --> 00:01:59,310
distributed system if you were to you

00:01:57,509 --> 00:02:01,740
know look into a running Diego

00:01:59,310 --> 00:02:03,210
installation you would see a pile of VMs

00:02:01,740 --> 00:02:04,860
that we call cells now these are the

00:02:03,210 --> 00:02:06,329
workhorses these are the big beefy

00:02:04,860 --> 00:02:08,479
machines that have all of the containers

00:02:06,329 --> 00:02:11,160
running all the applications on them

00:02:08,479 --> 00:02:12,970
you'd also see a handful of highly

00:02:11,160 --> 00:02:16,420
available VMs that we call the

00:02:12,970 --> 00:02:19,360
brain these have some functionality that

00:02:16,420 --> 00:02:23,020
I'll get into in a second you'd also see

00:02:19,360 --> 00:02:25,420
a handful of VMs called the BBS and the

00:02:23,020 --> 00:02:27,250
BBBS is really a centralized data store

00:02:25,420 --> 00:02:27,730
that we use to coordinate information in

00:02:27,250 --> 00:02:29,350
the cluster

00:02:27,730 --> 00:02:31,330
it's how the cluster gets to sort of

00:02:29,350 --> 00:02:33,340
solve the distributed systems problem

00:02:31,330 --> 00:02:36,880
and we're currently relying on NCD to

00:02:33,340 --> 00:02:38,890
give us consistency in the VBS now

00:02:36,880 --> 00:02:40,330
that's the distributed system what does

00:02:38,890 --> 00:02:42,370
it mean that Diego is an Orchestrator

00:02:40,330 --> 00:02:44,050
well Diego's orchestration

00:02:42,370 --> 00:02:47,050
responsibilities really fall into two

00:02:44,050 --> 00:02:48,459
things first is Diego as a scheduler so

00:02:47,050 --> 00:02:50,080
when you bring your workload to Diego

00:02:48,459 --> 00:02:52,930
Diego will try to optimally distribute

00:02:50,080 --> 00:02:54,459
it across the running cells and as more

00:02:52,930 --> 00:02:56,350
work appears that will do its best to

00:02:54,459 --> 00:02:57,910
balance that workload across the entire

00:02:56,350 --> 00:03:01,300
set of cells that are running across

00:02:57,910 --> 00:03:03,280
availability zones if possible Diego is

00:03:01,300 --> 00:03:05,830
also a health monitor so if your

00:03:03,280 --> 00:03:09,730
application crashes Diego will notice

00:03:05,830 --> 00:03:12,340
and restart it this applies on a macro

00:03:09,730 --> 00:03:16,680
scale to of an entire cell crashes Diego

00:03:12,340 --> 00:03:16,680
will notice and save those applications

00:03:17,250 --> 00:03:21,519
but what I really want to talk about is

00:03:19,480 --> 00:03:23,080
what it means to have a containerized

00:03:21,519 --> 00:03:26,350
workload what is it that Diego is

00:03:23,080 --> 00:03:28,180
actually running well we have this

00:03:26,350 --> 00:03:30,370
interesting abstraction we have one-off

00:03:28,180 --> 00:03:32,260
tasks we can run one of tasks in

00:03:30,370 --> 00:03:33,820
containers and we can run long-running

00:03:32,260 --> 00:03:35,380
processes and containers now a one-off

00:03:33,820 --> 00:03:37,209
task is easy to understand it's the unit

00:03:35,380 --> 00:03:39,730
of work that runs at most once inside a

00:03:37,209 --> 00:03:41,530
container a long-running process is a

00:03:39,730 --> 00:03:44,440
little more complex we would have a

00:03:41,530 --> 00:03:46,269
number n of long-running instances that

00:03:44,440 --> 00:03:48,549
we would distribute across the cells for

00:03:46,269 --> 00:03:52,390
high availability and monitor and

00:03:48,549 --> 00:03:54,750
restart in the case of failure this

00:03:52,390 --> 00:03:57,850
generic platform-independent abstraction

00:03:54,750 --> 00:03:59,440
sort of describes what Diego can do and

00:03:57,850 --> 00:04:02,440
here's what we actually done with it

00:03:59,440 --> 00:04:05,440
we're able to take your droplet the

00:04:02,440 --> 00:04:07,470
product of running CF push and run a

00:04:05,440 --> 00:04:09,640
build pack based application on Diego

00:04:07,470 --> 00:04:11,200
we're also able using the same

00:04:09,640 --> 00:04:14,080
abstraction to run a docker based

00:04:11,200 --> 00:04:16,120
application on Diego and we're even able

00:04:14,080 --> 00:04:18,489
to run a Windows based application on

00:04:16,120 --> 00:04:20,260
the same Diego cluster now what's cool

00:04:18,489 --> 00:04:21,940
is I sort of previewed this last year

00:04:20,260 --> 00:04:25,060
while all of this is working today and

00:04:21,940 --> 00:04:26,750
it's a very exciting we think that this

00:04:25,060 --> 00:04:28,430
is this abstraction has been

00:04:26,750 --> 00:04:31,190
successful we're seeing it prove itself

00:04:28,430 --> 00:04:34,970
out but I think there's a lot of

00:04:31,190 --> 00:04:37,970
confusion what does it mean to run these

00:04:34,970 --> 00:04:41,720
sorts of things inside a container isn't

00:04:37,970 --> 00:04:43,220
container synonymous with docker what

00:04:41,720 --> 00:04:46,100
are these other two things if that's the

00:04:43,220 --> 00:04:50,570
case what is diego's relationship to

00:04:46,100 --> 00:04:53,450
docker anyway what is a container let's

00:04:50,570 --> 00:04:58,220
talk about that at its core a container

00:04:53,450 --> 00:05:00,650
is about isolation when you're on enough

00:04:58,220 --> 00:05:02,930
shared hosts you have a set of shared

00:05:00,650 --> 00:05:05,000
resources and if you're multiple tenants

00:05:02,930 --> 00:05:07,160
on that host you want to run your

00:05:05,000 --> 00:05:10,040
various processes now these processes

00:05:07,160 --> 00:05:11,270
are vying for these shared resources and

00:05:10,040 --> 00:05:14,600
the way they have access to them is of

00:05:11,270 --> 00:05:17,090
course through the kernel isolation is

00:05:14,600 --> 00:05:18,560
all about isolating these resources and

00:05:17,090 --> 00:05:20,210
it comes in two flavors there's a

00:05:18,560 --> 00:05:21,770
resource isolation and namespace

00:05:20,210 --> 00:05:24,320
isolation let me dig into the first one

00:05:21,770 --> 00:05:26,240
first so resource isolation is easy to

00:05:24,320 --> 00:05:29,960
understand you have a single CPU or a

00:05:26,240 --> 00:05:31,400
set of cores on your shared box and you

00:05:29,960 --> 00:05:34,400
have the multiple tenants vying for that

00:05:31,400 --> 00:05:37,040
CPU now in an ideal world each process

00:05:34,400 --> 00:05:38,870
is using its fair share of the CPU but

00:05:37,040 --> 00:05:41,150
what happens if process a starts to run

00:05:38,870 --> 00:05:44,060
awry and begins to soak up the CPU on

00:05:41,150 --> 00:05:45,440
the box well this is bad tenant one is

00:05:44,060 --> 00:05:47,090
taking up more resources than they

00:05:45,440 --> 00:05:49,190
should and the other processes the other

00:05:47,090 --> 00:05:50,810
tenants are being crowded out you need

00:05:49,190 --> 00:05:52,270
some sort of isolation in this montec

00:05:50,810 --> 00:05:54,410
multi-tenant context

00:05:52,270 --> 00:05:56,570
well glue Nick's kernel has this great

00:05:54,410 --> 00:05:58,370
feature called C groups and the lets us

00:05:56,570 --> 00:06:01,010
build barriers between the different

00:05:58,370 --> 00:06:02,810
tenants when with these barriers we can

00:06:01,010 --> 00:06:05,720
make certain guarantees the tenant one

00:06:02,810 --> 00:06:07,510
cannot exceed his or her threshold the

00:06:05,720 --> 00:06:09,800
ten and two and ten and three are safe

00:06:07,510 --> 00:06:12,560
that's resource isolation namespace

00:06:09,800 --> 00:06:14,690
isolation is similar but complicated and

00:06:12,560 --> 00:06:17,860
different let me pick an example let's

00:06:14,690 --> 00:06:20,660
think about the process ID so in Linux

00:06:17,860 --> 00:06:23,240
each process has associated with it a

00:06:20,660 --> 00:06:28,370
pit an integer that you can use to refer

00:06:23,240 --> 00:06:31,070
to the process now tenant one process B

00:06:28,370 --> 00:06:33,560
can look at the pins associated with its

00:06:31,070 --> 00:06:35,450
tenant which is what you want but it can

00:06:33,560 --> 00:06:37,430
also look at the processes associated

00:06:35,450 --> 00:06:39,669
with other tenants which is bad

00:06:37,430 --> 00:06:41,409
that breaks isolation

00:06:39,669 --> 00:06:44,169
again the Linux kernel comes to the

00:06:41,409 --> 00:06:47,020
rescue with the pin namespace this

00:06:44,169 --> 00:06:49,900
allows us to set up barriers that

00:06:47,020 --> 00:06:52,090
prevent tenant one from peering into

00:06:49,900 --> 00:06:53,740
tenant two and three but it's a bit

00:06:52,090 --> 00:06:56,680
stronger than that this is actually a

00:06:53,740 --> 00:06:59,379
namespace and each tenant has their own

00:06:56,680 --> 00:07:01,900
namespace into the pit world and so they

00:06:59,379 --> 00:07:03,969
can reuse pins without actually

00:07:01,900 --> 00:07:05,800
conflicting it takes this global

00:07:03,969 --> 00:07:08,050
resource and really buckets it up nicely

00:07:05,800 --> 00:07:10,240
you're getting close to imagining that

00:07:08,050 --> 00:07:14,409
each tenant is running its own VM on the

00:07:10,240 --> 00:07:16,090
one VM there's other Isolators that the

00:07:14,409 --> 00:07:17,740
kernel provides in addition to the pit

00:07:16,090 --> 00:07:20,139
namespace there's the network namespace

00:07:17,740 --> 00:07:21,909
the mount namespace network namespace

00:07:20,139 --> 00:07:23,319
for isolating networking concerns then

00:07:21,909 --> 00:07:25,330
the mountain namespace for isolating

00:07:23,319 --> 00:07:26,860
file based concerns in the user name

00:07:25,330 --> 00:07:29,199
space to make sure that users and

00:07:26,860 --> 00:07:33,310
different tenants can't do notorious

00:07:29,199 --> 00:07:37,060
things so what is a container well it

00:07:33,310 --> 00:07:40,210
starts with isolation and isolation

00:07:37,060 --> 00:07:43,060
really is is just a series of walls that

00:07:40,210 --> 00:07:45,669
if you construct together correctly give

00:07:43,060 --> 00:07:47,229
you isolation and I want to emphasize

00:07:45,669 --> 00:07:49,259
that this is a feature of the Linux

00:07:47,229 --> 00:07:52,300
kernel and it's a very powerful feature

00:07:49,259 --> 00:07:53,889
but who cares what goes inside the walls

00:07:52,300 --> 00:07:55,870
is what you care about as a developer

00:07:53,889 --> 00:07:58,779
and really that breaks down into two

00:07:55,870 --> 00:08:01,149
things there's contents the actual files

00:07:58,779 --> 00:08:03,069
that go into the container and there's

00:08:01,149 --> 00:08:07,120
processes the stuff you actually want to

00:08:03,069 --> 00:08:11,069
run in the container you put these three

00:08:07,120 --> 00:08:13,930
things together that's a container so

00:08:11,069 --> 00:08:16,990
Diego runs tasks and long-running

00:08:13,930 --> 00:08:19,569
processes in containers and in

00:08:16,990 --> 00:08:20,949
particular the the implementation of

00:08:19,569 --> 00:08:22,560
containers that we use is this thing

00:08:20,949 --> 00:08:25,149
called garden that we built ourselves

00:08:22,560 --> 00:08:27,009
now why well gardens really powerful

00:08:25,149 --> 00:08:28,569
garden allows Diego to programmatically

00:08:27,009 --> 00:08:30,580
and independently say these three things

00:08:28,569 --> 00:08:34,110
it allows the anger to say make me a

00:08:30,580 --> 00:08:36,279
container put this in it now go run this

00:08:34,110 --> 00:08:40,990
and it does this through a platform

00:08:36,279 --> 00:08:43,029
agnostic API garden allows the ego's

00:08:40,990 --> 00:08:44,680
abstractions to be very flexible and to

00:08:43,029 --> 00:08:46,560
support these three very different than

00:08:44,680 --> 00:08:49,630
very important and interesting use cases

00:08:46,560 --> 00:08:52,750
so let's dive into them let's look at CF

00:08:49,630 --> 00:08:53,279
push to understand CF push you have to

00:08:52,750 --> 00:08:57,300
embrace the

00:08:53,279 --> 00:09:00,480
see f.push haiku which is this here is

00:08:57,300 --> 00:09:10,199
my source code run it on the cloud for

00:09:00,480 --> 00:09:11,759
me I do not care how right so what does

00:09:10,199 --> 00:09:16,230
this look like well we take your source

00:09:11,759 --> 00:09:18,149
code we run a task on Diego and produce

00:09:16,230 --> 00:09:19,350
something called a droplet this is where

00:09:18,149 --> 00:09:22,740
all your built acts are doing their work

00:09:19,350 --> 00:09:24,300
and we call this staging now what is

00:09:22,740 --> 00:09:25,559
this droplet well you can think of it as

00:09:24,300 --> 00:09:28,740
a compiled asset

00:09:25,559 --> 00:09:30,779
it contains your application and any

00:09:28,740 --> 00:09:32,279
application specific dependencies if

00:09:30,779 --> 00:09:34,980
it's a rails application it has all your

00:09:32,279 --> 00:09:38,339
gems bundled right in but that's all it

00:09:34,980 --> 00:09:40,740
has and so it can't run on its own it

00:09:38,339 --> 00:09:43,649
means this particular execution context

00:09:40,740 --> 00:09:45,569
upon which to run we have a name for

00:09:43,649 --> 00:09:47,040
that context it's just a series of files

00:09:45,569 --> 00:09:48,089
that you need to bring alongside the

00:09:47,040 --> 00:09:50,579
droplet for it to run

00:09:48,089 --> 00:09:55,529
it's our root filesystem the current one

00:09:50,579 --> 00:09:57,269
is CF Linux FS 2 which is a mouthful so

00:09:55,529 --> 00:09:59,610
how does the droplet run on Diego

00:09:57,269 --> 00:10:02,089
well the way anything runs on Diego

00:09:59,610 --> 00:10:04,860
through a long-running process this LRP

00:10:02,089 --> 00:10:07,079
so the lrp allows us to specify hey I

00:10:04,860 --> 00:10:08,790
want a container and to specify the

00:10:07,079 --> 00:10:10,470
contents of the container in this case I

00:10:08,790 --> 00:10:13,769
want a container that has in it this

00:10:10,470 --> 00:10:16,470
root filesystem CF Linux FS 2 and then

00:10:13,769 --> 00:10:18,269
Diego can say that lrp can tell Diego to

00:10:16,470 --> 00:10:21,000
download the droplet onto that root of s

00:10:18,269 --> 00:10:22,860
and then spin up the start command the

00:10:21,000 --> 00:10:26,220
metadata for the start command comes out

00:10:22,860 --> 00:10:30,329
of the staging process so isolation

00:10:26,220 --> 00:10:32,129
content process that's CF push and you

00:10:30,329 --> 00:10:33,629
can see it if you look at the code if

00:10:32,129 --> 00:10:35,100
you look at the definition for a droplet

00:10:33,629 --> 00:10:38,550
it has a bit for isolation

00:10:35,100 --> 00:10:40,649
I want 128 megabytes container a bit

00:10:38,550 --> 00:10:43,439
about what to put inside give me this

00:10:40,649 --> 00:10:45,540
route if s download this droplet and a

00:10:43,439 --> 00:10:47,429
bit about what to run it really

00:10:45,540 --> 00:10:50,160
elegantly brings these three independent

00:10:47,429 --> 00:10:51,839
things together right that's cf Bush

00:10:50,160 --> 00:10:54,389
well how does docker fit into this dog

00:10:51,839 --> 00:10:58,139
Erb is very different but it comes down

00:10:54,389 --> 00:10:58,860
to the same basic paradigm the contents

00:10:58,139 --> 00:11:01,079
in docker

00:10:58,860 --> 00:11:03,240
are described by your docker image it

00:11:01,079 --> 00:11:05,189
contains the files that you want to run

00:11:03,240 --> 00:11:07,700
in the container and the set of process

00:11:05,189 --> 00:11:10,440
T's to run that comes from the docker

00:11:07,700 --> 00:11:12,000
now all of this stuff comes from the

00:11:10,440 --> 00:11:13,380
docker registry and docker really nailed

00:11:12,000 --> 00:11:15,930
this right they've made it really easy

00:11:13,380 --> 00:11:18,360
to push out an image to specify what you

00:11:15,930 --> 00:11:19,829
want to run to tweak it and then tillis

00:11:18,360 --> 00:11:22,709
launched a container that runs that

00:11:19,829 --> 00:11:24,839
stuff but it's important to understand

00:11:22,709 --> 00:11:28,860
the isolation bits that's the UNIX

00:11:24,839 --> 00:11:32,010
kernel and you can see this in diego's

00:11:28,860 --> 00:11:34,470
LRP we're just doing isolation we're

00:11:32,010 --> 00:11:36,449
asking for a docker image for the

00:11:34,470 --> 00:11:38,940
contents which docker is a first-class

00:11:36,449 --> 00:11:40,740
thing that we support and then we're

00:11:38,940 --> 00:11:43,829
saying hey based on the docker image

00:11:40,740 --> 00:11:46,470
metadata go run this doctrine and so how

00:11:43,829 --> 00:11:47,010
does Diego relate to docker it's real

00:11:46,470 --> 00:11:48,720
simple

00:11:47,010 --> 00:11:50,730
you can put anything you want in here

00:11:48,720 --> 00:11:52,980
and one of the things you could put in

00:11:50,730 --> 00:11:54,209
there is a docker image and once you've

00:11:52,980 --> 00:11:56,519
got that docker image you can run

00:11:54,209 --> 00:11:57,600
anything you want in here and one of the

00:11:56,519 --> 00:11:59,010
things you can run in there is the

00:11:57,600 --> 00:12:02,660
metadata associated with that docker

00:11:59,010 --> 00:12:04,589
image that's how docker runs on Diego

00:12:02,660 --> 00:12:06,630
now what's cool is this is really

00:12:04,589 --> 00:12:08,160
flexible and be really easy to have app

00:12:06,630 --> 00:12:09,269
see moaning on Diego and that's

00:12:08,160 --> 00:12:11,510
something that we hope to do eventually

00:12:09,269 --> 00:12:14,610
we're not quite doing it Yeah right

00:12:11,510 --> 00:12:17,339
that's docker fast forward to Windows

00:12:14,610 --> 00:12:19,079
what does that mean well I just talked

00:12:17,339 --> 00:12:21,510
about all of this Linux kernel stuff

00:12:19,079 --> 00:12:23,070
resource isolation and cgroups namespace

00:12:21,510 --> 00:12:25,589
isolation with all these networking with

00:12:23,070 --> 00:12:26,730
all these namespaces well it turns out

00:12:25,589 --> 00:12:28,560
you can do something similar with

00:12:26,730 --> 00:12:31,140
Windows you can do resource isolation

00:12:28,560 --> 00:12:34,140
with the kernel job object and you can

00:12:31,140 --> 00:12:35,850
do namespace isolation and in fact we're

00:12:34,140 --> 00:12:39,540
running your application in an isolated

00:12:35,850 --> 00:12:41,760
iis instance we're collaborating with

00:12:39,540 --> 00:12:43,890
Microsoft on this and it's allowing us

00:12:41,760 --> 00:12:46,920
to build to build a CF push experience

00:12:43,890 --> 00:12:48,769
that's that's working today it provides

00:12:46,920 --> 00:12:50,640
a container experience for Windows 2012

00:12:48,769 --> 00:12:54,300
that we believe will only get better

00:12:50,640 --> 00:12:56,490
with Windows 2016 so you have these two

00:12:54,300 --> 00:12:57,990
very different platforms how does Diego

00:12:56,490 --> 00:13:00,029
communicate with them again this is the

00:12:57,990 --> 00:13:02,399
beauty of garden through one single

00:13:00,029 --> 00:13:05,100
interface which means that you can just

00:13:02,399 --> 00:13:08,220
define a dotnet lrp that looks just like

00:13:05,100 --> 00:13:10,740
your build pack LRP or your docker lrp

00:13:08,220 --> 00:13:12,600
it talks about isolation it talks about

00:13:10,740 --> 00:13:15,240
stuff to download which includes

00:13:12,600 --> 00:13:16,890
information about the route if s in this

00:13:15,240 --> 00:13:19,500
case windows which allows diego to

00:13:16,890 --> 00:13:20,380
figure out where to put the LRP and then

00:13:19,500 --> 00:13:22,990
includes metadata on

00:13:20,380 --> 00:13:26,280
to run so these three very different

00:13:22,990 --> 00:13:29,770
contexts all run on one Orchestrator

00:13:26,280 --> 00:13:30,970
it's pretty cool all right so let me

00:13:29,770 --> 00:13:34,690
tell you about how that Orchestrator has

00:13:30,970 --> 00:13:35,560
evolved so I want to talk about two

00:13:34,690 --> 00:13:38,080
things here I want to talk about the

00:13:35,560 --> 00:13:43,030
scheduler and I want to talk about an

00:13:38,080 --> 00:13:44,650
API so let's start with the scheduler so

00:13:43,030 --> 00:13:47,020
we're used to thinking of architecture

00:13:44,650 --> 00:13:49,360
as this thing that comes in from above

00:13:47,020 --> 00:13:53,500
and tells us what code to write and

00:13:49,360 --> 00:13:55,030
that's true and that people we do a lot

00:13:53,500 --> 00:13:56,800
of test-driven development so we're used

00:13:55,030 --> 00:13:58,240
to also thinking of tests as something

00:13:56,800 --> 00:14:00,640
that does that so you always want your

00:13:58,240 --> 00:14:03,040
tests first and your tests influence

00:14:00,640 --> 00:14:03,970
what code you write but that's not all

00:14:03,040 --> 00:14:05,830
that there is to test different

00:14:03,970 --> 00:14:08,080
development your code also feeds back

00:14:05,830 --> 00:14:10,390
into your tests and you get this nice

00:14:08,080 --> 00:14:12,550
virtuous cycle between tests and code

00:14:10,390 --> 00:14:16,600
this is at the heart of TDD it's all

00:14:12,550 --> 00:14:18,580
about quick feedback loops now your

00:14:16,600 --> 00:14:20,200
architecture also informs what tests you

00:14:18,580 --> 00:14:21,880
ought to write you need integration

00:14:20,200 --> 00:14:23,290
tests to make sure all your components

00:14:21,880 --> 00:14:25,450
work together but in a complex system

00:14:23,290 --> 00:14:26,740
you also need simulations and you need

00:14:25,450 --> 00:14:31,150
performance tests to make sure that

00:14:26,740 --> 00:14:32,680
everything works correctly we love the

00:14:31,150 --> 00:14:34,150
fact that these two arrows point back

00:14:32,680 --> 00:14:35,770
and forth we love these feedback loops

00:14:34,150 --> 00:14:36,970
and we're finding it really important to

00:14:35,770 --> 00:14:39,400
have feedback loops back into

00:14:36,970 --> 00:14:41,200
architecture this is the most useful

00:14:39,400 --> 00:14:43,900
definition for agile architecture that I

00:14:41,200 --> 00:14:45,580
can come up with it's all about feedback

00:14:43,900 --> 00:14:47,560
loops it's all about the stuff that you

00:14:45,580 --> 00:14:48,810
build informing your vision for how to

00:14:47,560 --> 00:14:51,400
build it

00:14:48,810 --> 00:14:54,220
so last year I made a lot of noise about

00:14:51,400 --> 00:14:56,740
this distributed auction and simulation

00:14:54,220 --> 00:14:58,990
driven development so this is what it

00:14:56,740 --> 00:15:00,730
looks like you have your cells and with

00:14:58,990 --> 00:15:02,860
the distributed auction architecture you

00:15:00,730 --> 00:15:06,160
have a scheduler on each cell

00:15:02,860 --> 00:15:07,420
now when work comes in the schedulers we

00:15:06,160 --> 00:15:10,060
call them auctioneers can talk to each

00:15:07,420 --> 00:15:12,160
other and figure out where to place the

00:15:10,060 --> 00:15:13,630
workload now this was really cool and it

00:15:12,160 --> 00:15:15,940
worked and we ran a bunch of simulations

00:15:13,630 --> 00:15:18,220
it informed the code and informed the

00:15:15,940 --> 00:15:19,660
tests and we ran a bunch of simulations

00:15:18,220 --> 00:15:20,800
to make sure that it actually worked and

00:15:19,660 --> 00:15:22,960
you know the simulations were running

00:15:20,800 --> 00:15:24,730
fine at the hundred sale scale then of

00:15:22,960 --> 00:15:26,920
course we made them more realistic and

00:15:24,730 --> 00:15:30,610
went up to 200 cells it started to

00:15:26,920 --> 00:15:32,830
falter so we added some code then we

00:15:30,610 --> 00:15:33,760
made it better and then we made it

00:15:32,830 --> 00:15:35,650
bigger

00:15:33,760 --> 00:15:38,590
it broke again so we added some code and

00:15:35,650 --> 00:15:42,190
it worked again and at this point we go

00:15:38,590 --> 00:15:44,520
okay how about thousands of cells and at

00:15:42,190 --> 00:15:46,810
what cost things were getting complex

00:15:44,520 --> 00:15:49,150
and it was time for architecture to

00:15:46,810 --> 00:15:51,190
change so we stepped back and we did

00:15:49,150 --> 00:15:54,270
something very simple we moved to a

00:15:51,190 --> 00:15:57,190
centralized highly available scheduler

00:15:54,270 --> 00:16:01,990
Bezos does this kubernetes board does

00:15:57,190 --> 00:16:05,410
this it's just simpler this way okay let

00:16:01,990 --> 00:16:07,690
me talk about API so api's when you when

00:16:05,410 --> 00:16:09,370
you say CF push you're talking to the

00:16:07,690 --> 00:16:11,110
Cloud Controller which turns around and

00:16:09,370 --> 00:16:13,330
talks to a pool of de A's and asks them

00:16:11,110 --> 00:16:16,840
to stage and run now when we started off

00:16:13,330 --> 00:16:18,640
our mandate was rewrite the DA's and so

00:16:16,840 --> 00:16:19,900
we wanted to we wanted to do it in a

00:16:18,640 --> 00:16:21,550
cleaner way and one of the things we

00:16:19,900 --> 00:16:23,170
knew was that the left-hand side here

00:16:21,550 --> 00:16:25,840
was very app specific and we wanted

00:16:23,170 --> 00:16:28,660
something a lot more generic so we built

00:16:25,840 --> 00:16:30,940
this bridge called the CC bridge that

00:16:28,660 --> 00:16:33,220
translated from this app specific domain

00:16:30,940 --> 00:16:35,530
to this more generic domain and then we

00:16:33,220 --> 00:16:38,140
went off and built all of Diego now this

00:16:35,530 --> 00:16:38,560
was working really good but we made a

00:16:38,140 --> 00:16:40,810
mistake

00:16:38,560 --> 00:16:43,270
I wouldn't say mistake he started off

00:16:40,810 --> 00:16:45,070
thinking of all of this as Diego and

00:16:43,270 --> 00:16:46,600
because we were thinking of all of this

00:16:45,070 --> 00:16:47,590
as Diego we made an interesting decision

00:16:46,600 --> 00:16:49,570
let me phrase it that way

00:16:47,590 --> 00:16:51,940
we had the CC bridge talking directly to

00:16:49,570 --> 00:16:53,530
the database now that's fine that helped

00:16:51,940 --> 00:16:58,090
us bootstrap and get working real quick

00:16:53,530 --> 00:17:00,460
but a database is not an API so we step

00:16:58,090 --> 00:17:04,660
back and we said well really this is

00:17:00,460 --> 00:17:06,579
Diego and if this is Diego then really

00:17:04,660 --> 00:17:09,250
Diego should have an API and so we built

00:17:06,579 --> 00:17:10,420
one we call it the receptor API and if

00:17:09,250 --> 00:17:13,660
you have an API well then that's

00:17:10,420 --> 00:17:16,990
obviously what CC branch to talk to well

00:17:13,660 --> 00:17:19,030
now you get an interesting picture CC

00:17:16,990 --> 00:17:22,000
bridge CC who cares that's just a

00:17:19,030 --> 00:17:24,370
generic consumer of this API what if you

00:17:22,000 --> 00:17:28,270
had another consumer well that's cool

00:17:24,370 --> 00:17:30,580
and that's where lattice was born so

00:17:28,270 --> 00:17:32,260
here's lattice you take this picture you

00:17:30,580 --> 00:17:35,250
have this distributed system that can

00:17:32,260 --> 00:17:37,990
run your workload but this kind of nah

00:17:35,250 --> 00:17:40,390
who cares surrounding my containers how

00:17:37,990 --> 00:17:43,510
do I get to them well we realized that

00:17:40,390 --> 00:17:45,640
if we added the go router layer we can

00:17:43,510 --> 00:17:47,590
do HTTP traffic to your containers

00:17:45,640 --> 00:17:49,990
and if we added the logging and metrics

00:17:47,590 --> 00:17:51,820
layer we could pull out logs and metrics

00:17:49,990 --> 00:17:53,440
from your applications and what if we

00:17:51,820 --> 00:17:56,410
took all of the disks and packaged it up

00:17:53,440 --> 00:17:59,020
and made it really easy to install

00:17:56,410 --> 00:18:01,059
vagrant up or to start a cluster

00:17:59,020 --> 00:18:03,370
terraform apply and what if we gave you

00:18:01,059 --> 00:18:06,160
a little command-line tool to create and

00:18:03,370 --> 00:18:09,670
manage your applications that was

00:18:06,160 --> 00:18:12,100
lattice you can run it on your local VM

00:18:09,670 --> 00:18:13,270
or a terraform you can deploy to AWS

00:18:12,100 --> 00:18:15,640
digitalocean

00:18:13,270 --> 00:18:18,870
Google Cloud and thanks to the community

00:18:15,640 --> 00:18:20,950
OpenStack that was a PR that was awesome

00:18:18,870 --> 00:18:22,660
so I'm gonna talk about two things real

00:18:20,950 --> 00:18:23,890
quick with lattice the first is what is

00:18:22,660 --> 00:18:25,270
the relationship between lattice and

00:18:23,890 --> 00:18:27,070
Cloud Foundry again there's a lot of

00:18:25,270 --> 00:18:28,230
confusion here and the second is real

00:18:27,070 --> 00:18:31,929
quick why did we do this

00:18:28,230 --> 00:18:33,790
so what is the relationship so Cloud

00:18:31,929 --> 00:18:35,380
Foundry is really the union of all of

00:18:33,790 --> 00:18:37,660
these things combined cough controller

00:18:35,380 --> 00:18:39,340
the UA a Diego logger Gator go router

00:18:37,660 --> 00:18:41,580
build pack services Bosh all of these

00:18:39,340 --> 00:18:41,580
things

00:18:42,929 --> 00:18:47,849
laddus comes in right here it's these

00:18:45,720 --> 00:18:50,340
three things it's sort of Cloud Foundry

00:18:47,849 --> 00:18:53,369
by subtraction as James bear likes to

00:18:50,340 --> 00:18:54,899
say so what what don't you get with

00:18:53,369 --> 00:18:56,489
lattice well you don't get the CC in you

00:18:54,899 --> 00:18:58,769
a a which means that it's really a

00:18:56,489 --> 00:19:02,369
single tenant environment you don't get

00:18:58,769 --> 00:19:03,749
built packs yet which means that we're

00:19:02,369 --> 00:19:06,809
relying on docker to distribute your

00:19:03,749 --> 00:19:08,429
bits which is fine you don't get

00:19:06,809 --> 00:19:11,129
services so you really have to bring

00:19:08,429 --> 00:19:12,779
your own and you don't have Bosh we've

00:19:11,129 --> 00:19:15,119
made it real easy to deploy and Bosh

00:19:12,779 --> 00:19:16,470
just isn't easy to deploy there are

00:19:15,119 --> 00:19:17,970
implications to that it means you don't

00:19:16,470 --> 00:19:19,379
have rolling upgrades sort of out of the

00:19:17,970 --> 00:19:21,720
box you sort of have to figure that out

00:19:19,379 --> 00:19:26,009
yourself it's possible we just don't

00:19:21,720 --> 00:19:27,090
make it particularly easy at the end of

00:19:26,009 --> 00:19:28,919
the day lattice really gives you a

00:19:27,090 --> 00:19:29,879
cluster root experience and we just want

00:19:28,919 --> 00:19:32,999
to encourage people to go and play

00:19:29,879 --> 00:19:37,169
explore these technologies so why

00:19:32,999 --> 00:19:39,090
lattice well we think it's a useful low

00:19:37,169 --> 00:19:40,470
barrier solution that solves real world

00:19:39,090 --> 00:19:42,090
problems and we just wanted to get it

00:19:40,470 --> 00:19:44,279
out there so that people could play with

00:19:42,090 --> 00:19:47,369
it we think it makes exploring Diego a

00:19:44,279 --> 00:19:49,049
lot easier we feel it's a softer on-ramp

00:19:47,369 --> 00:19:50,929
to the CF tech stack to just introduce

00:19:49,049 --> 00:19:53,549
more and more people to Cloud Foundry

00:19:50,929 --> 00:19:56,159
and actually this has been really useful

00:19:53,549 --> 00:19:58,169
we're finding it allows us to

00:19:56,159 --> 00:19:59,909
efficiently prototype new ideas

00:19:58,169 --> 00:20:01,409
internally I'll talk about it a little

00:19:59,909 --> 00:20:03,330
bit but we have a lot of new initiatives

00:20:01,409 --> 00:20:04,950
that we're just saying hey let's go

00:20:03,330 --> 00:20:09,179
build down on lattice see it work and

00:20:04,950 --> 00:20:10,820
then bring it into the platform which

00:20:09,179 --> 00:20:12,809
leads us to the future so what's coming

00:20:10,820 --> 00:20:15,239
well the first question everyone's

00:20:12,809 --> 00:20:17,999
asking is when and I will just gently

00:20:15,239 --> 00:20:19,619
say hey Diego scope is a lot bigger than

00:20:17,999 --> 00:20:21,119
just rewrite the de A's

00:20:19,619 --> 00:20:23,429
you can do lattice you can do Windows it

00:20:21,119 --> 00:20:26,249
can do docker okay but when are you

00:20:23,429 --> 00:20:28,830
going to ship well Diego is running in

00:20:26,249 --> 00:20:30,330
production on PWS it's handling about 5%

00:20:28,830 --> 00:20:31,769
of the load more importantly it's

00:20:30,330 --> 00:20:33,720
running all of pivotal internal

00:20:31,769 --> 00:20:35,909
applications so that's that's great okay

00:20:33,720 --> 00:20:36,299
but when can i play with it well it's in

00:20:35,909 --> 00:20:38,729
beta

00:20:36,299 --> 00:20:41,940
while we validate our performance at

00:20:38,729 --> 00:20:43,200
hundreds of cells and do some internal

00:20:41,940 --> 00:20:45,720
security work to make sure that all's

00:20:43,200 --> 00:20:47,729
well okay but when can i play with it

00:20:45,720 --> 00:20:50,599
well I want you to start using it today

00:20:47,729 --> 00:20:53,929
you can start getting us feedback soon

00:20:50,599 --> 00:20:55,870
or about when will it be finished

00:20:53,929 --> 00:21:01,460
should be out of beta with in q3

00:20:55,870 --> 00:21:02,809
probably alright okay then what okay

00:21:01,460 --> 00:21:04,970
this is the exciting part so a place

00:21:02,809 --> 00:21:06,919
with constraints having placement pools

00:21:04,970 --> 00:21:08,330
so you can have different workloads on

00:21:06,919 --> 00:21:11,690
different cells that's top of the

00:21:08,330 --> 00:21:14,299
backlog post beta CFS Sh I want to SSH

00:21:11,690 --> 00:21:16,909
into my running container index give it

00:21:14,299 --> 00:21:18,710
to me working now it's working now the

00:21:16,909 --> 00:21:21,350
CLI support is on the way this will ship

00:21:18,710 --> 00:21:24,470
with Diego give you shell access port

00:21:21,350 --> 00:21:25,760
forwarding SCP all this good stuff if

00:21:24,470 --> 00:21:27,740
you're administrating the cluster don't

00:21:25,760 --> 00:21:31,309
worry you can turn it off but if you're

00:21:27,740 --> 00:21:32,779
a developer rejoice TCP routing we're

00:21:31,309 --> 00:21:34,250
kicking us off with GE it's very

00:21:32,779 --> 00:21:38,029
exciting I encourage you to go check out

00:21:34,250 --> 00:21:40,370
a tools talk private docker registry in

00:21:38,029 --> 00:21:43,640
collaboration with s AP check out your

00:21:40,370 --> 00:21:46,309
geese talk on Tuesday support for

00:21:43,640 --> 00:21:48,649
persistence so persistent disk it's a

00:21:46,309 --> 00:21:50,750
long-term goal and we've we've done some

00:21:48,649 --> 00:21:52,279
experiments that Caleb and Ted are going

00:21:50,750 --> 00:21:55,370
to report on check out their talk on

00:21:52,279 --> 00:21:57,260
Tuesday and container to container

00:21:55,370 --> 00:21:58,940
networking some sort of overlay

00:21:57,260 --> 00:22:00,679
networking story that's a long-term goal

00:21:58,940 --> 00:22:03,020
we just don't need it to replace the

00:22:00,679 --> 00:22:05,059
da's we don't need it for the CF push

00:22:03,020 --> 00:22:05,990
workflow when we recognize that it's

00:22:05,059 --> 00:22:08,330
something that we want to bring to the

00:22:05,990 --> 00:22:11,630
platform and it sits in Diego's future

00:22:08,330 --> 00:22:13,490
and finally condenser which is what I

00:22:11,630 --> 00:22:15,350
alluded to earlier lightweight build

00:22:13,490 --> 00:22:17,899
packs for lattice bringing that CF

00:22:15,350 --> 00:22:19,460
experience CF push and finding a minimal

00:22:17,899 --> 00:22:20,659
subset that's actually useful and fun to

00:22:19,460 --> 00:22:24,289
play with and bringing it to lattice

00:22:20,659 --> 00:22:27,830
we're excited to do that alright that's

00:22:24,289 --> 00:22:29,690
the future I have an open house today at

00:22:27,830 --> 00:22:34,220
1:30 come and ask me questions then or

00:22:29,690 --> 00:22:41,140
right now and that is all thanks so it's

00:22:34,220 --> 00:22:41,140
X ray no no live demos real number one I

00:22:41,590 --> 00:22:45,860
don't have an environment set up but I

00:22:44,720 --> 00:22:46,760
didn't get to talk about extra I can

00:22:45,860 --> 00:22:49,250
talk about X ray so we have this

00:22:46,760 --> 00:22:50,899
receptor API and it gives you full

00:22:49,250 --> 00:22:52,700
villas visibility into what the cluster

00:22:50,899 --> 00:22:56,299
is running so we built this really cool

00:22:52,700 --> 00:22:57,830
UI on top of it that lets you just add a

00:22:56,299 --> 00:22:59,840
glance see what the cluster is running

00:22:57,830 --> 00:23:02,289
and understand whether there any

00:22:59,840 --> 00:23:02,289
problems

00:23:02,580 --> 00:23:12,090
oh we have a mic thank you any other

00:23:08,490 --> 00:23:30,150
questions how much time do we have five

00:23:12,090 --> 00:23:31,470
minutes no okay with da we had quite a

00:23:30,150 --> 00:23:32,910
lot of problems with rebalancing

00:23:31,470 --> 00:23:35,890
clusters when there's recovery from

00:23:32,910 --> 00:23:37,930
failures things like that

00:23:35,890 --> 00:23:39,850
I said the Diego would be one project

00:23:37,930 --> 00:23:41,560
that really couldn't fix in that is a

00:23:39,850 --> 00:23:42,820
plan for Diego looking at those kind of

00:23:41,560 --> 00:23:44,200
distribution algorithms and

00:23:42,820 --> 00:23:45,730
redistribution things like that in

00:23:44,200 --> 00:23:48,250
rebalancing yeah so the question is

00:23:45,730 --> 00:23:50,530
rebalancing we have a story for

00:23:48,250 --> 00:23:50,770
rebalancing in our backlog we want to do

00:23:50,530 --> 00:23:52,510
it

00:23:50,770 --> 00:23:55,240
we don't we're not going to do it before

00:23:52,510 --> 00:23:56,560
we sort of ship and it's something that

00:23:55,240 --> 00:23:59,530
we actually want to do in such a way

00:23:56,560 --> 00:24:01,150
that it's just always happening we don't

00:23:59,530 --> 00:24:03,220
want there to be a button that you can

00:24:01,150 --> 00:24:04,960
press to then just magically change the

00:24:03,220 --> 00:24:06,730
entire system and so Diego will just

00:24:04,960 --> 00:24:08,260
sort of naturally because you're running

00:24:06,730 --> 00:24:10,630
a twelve factor application to identify

00:24:08,260 --> 00:24:12,520
applications that it can move to improve

00:24:10,630 --> 00:24:15,090
the distribution on the cluster that's

00:24:12,520 --> 00:24:18,760
planned but it's not there yet

00:24:15,090 --> 00:24:20,350
so you mentioned Apache mesos could you

00:24:18,760 --> 00:24:23,530
compare and contrast sort of what the

00:24:20,350 --> 00:24:25,390
difference is between what Diego is

00:24:23,530 --> 00:24:29,250
providing and what Apache Miso's

00:24:25,390 --> 00:24:31,030
provides what maze us provides sure so I

00:24:29,250 --> 00:24:33,250
get this question a lot why didn't you

00:24:31,030 --> 00:24:34,840
build Diego and Thabo from ASOS and it's

00:24:33,250 --> 00:24:36,760
a good question and in some ways we

00:24:34,840 --> 00:24:38,430
could have but they were just like a

00:24:36,760 --> 00:24:40,420
couple of key things that we needed that

00:24:38,430 --> 00:24:43,210
we didn't think we can get out of Mesa

00:24:40,420 --> 00:24:44,740
so Windows support was one of them so we

00:24:43,210 --> 00:24:47,260
can actually do Windows that's actually

00:24:44,740 --> 00:24:49,270
working today and that's just not really

00:24:47,260 --> 00:24:52,210
a thing that amazed us certainly at the

00:24:49,270 --> 00:24:54,030
time could support I don't think it does

00:24:52,210 --> 00:24:56,350
yet either

00:24:54,030 --> 00:24:58,120
yeah so I'd say that the other thing was

00:24:56,350 --> 00:24:59,350
that maze was really giving us this sort

00:24:58,120 --> 00:25:00,580
of scheduler piece and there's just a

00:24:59,350 --> 00:25:02,200
lot more to it than that

00:25:00,580 --> 00:25:03,550
and so we would have had to build a lot

00:25:02,200 --> 00:25:05,500
of stuff in addition to the scheduler

00:25:03,550 --> 00:25:07,030
anyway the nice thing with Mavis is that

00:25:05,500 --> 00:25:09,910
then your scheduling can live alongside

00:25:07,030 --> 00:25:13,030
other schedulers and so I could imagine

00:25:09,910 --> 00:25:14,770
sort of a plug-in for mazes that allows

00:25:13,030 --> 00:25:17,500
Diego scheduler to just piggyback on

00:25:14,770 --> 00:25:20,940
that the only thing stopping us from

00:25:17,500 --> 00:25:24,490
doing that is priority and time frankly

00:25:20,940 --> 00:25:27,630
these things can all sort of overlay and

00:25:24,490 --> 00:25:27,630
intermix pretty easily

00:25:33,650 --> 00:25:39,810
sure so that's interesting so the

00:25:36,630 --> 00:25:41,760
question is what about auto-scaling you

00:25:39,810 --> 00:25:44,310
said da's I'll say cells right the the

00:25:41,760 --> 00:25:45,990
work pool that runs the containers and

00:25:44,310 --> 00:25:47,310
that's that's interesting that would be

00:25:45,990 --> 00:25:49,170
the first time that we have an arrow

00:25:47,310 --> 00:25:51,900
pointing from the runtime into Bosh

00:25:49,170 --> 00:25:53,910
right or whatever is orchestrating your

00:25:51,900 --> 00:25:56,280
your cluster it's definitely something

00:25:53,910 --> 00:25:58,080
that is very doable and that we would

00:25:56,280 --> 00:26:03,120
consider doing but again I just go back

00:25:58,080 --> 00:26:04,890
to priorities in time right is it in the

00:26:03,120 --> 00:26:06,300
future I imagine so I imagine a

00:26:04,890 --> 00:26:08,910
full-blown solution where an operator

00:26:06,300 --> 00:26:12,090
just says hey you can have at most a

00:26:08,910 --> 00:26:13,590
hundred cells grow as you need to but

00:26:12,090 --> 00:26:15,660
don't use my resources until you need to

00:26:13,590 --> 00:26:18,150
I think that's that's probably going to

00:26:15,660 --> 00:26:20,360
come but no no concrete plans at this

00:26:18,150 --> 00:26:20,360
time

00:26:26,750 --> 00:26:30,190
so you might have answered this question

00:26:28,010 --> 00:26:34,820
before in the mailing this but I feel I

00:26:30,190 --> 00:26:36,650
figured out ask it so it's very cool but

00:26:34,820 --> 00:26:39,290
you have especially on lattice like a

00:26:36,650 --> 00:26:41,690
simpler version for developers but as

00:26:39,290 --> 00:26:43,490
you know and as we all know anything

00:26:41,690 --> 00:26:46,010
that starts very simple tend to get

00:26:43,490 --> 00:26:47,570
complicated so in other words is there a

00:26:46,010 --> 00:26:52,550
guarantee that lattice doesn't become

00:26:47,570 --> 00:26:58,070
the new CF how does lattice not become

00:26:52,550 --> 00:27:00,170
the new CF discipline I'm not sure it's

00:26:58,070 --> 00:27:01,880
a good question let's let's see where

00:27:00,170 --> 00:27:08,290
lattice goes I think it's still early

00:27:01,880 --> 00:27:08,290
days for lattice you'll always have CF

00:27:12,520 --> 00:27:16,400
so how does the Windows isolation work

00:27:15,080 --> 00:27:18,170
seems like a lot of the isolation is

00:27:16,400 --> 00:27:23,120
provided by iis does that mean like

00:27:18,170 --> 00:27:26,720
people can't write worker type apps yet

00:27:23,120 --> 00:27:29,710
like is it more web apps I'm gonna ask

00:27:26,720 --> 00:27:29,710
mark to come and answer that

00:27:32,130 --> 00:27:40,230
we were micro service architecture mark

00:27:34,140 --> 00:27:48,090
is the windows micro-service sounded

00:27:40,230 --> 00:27:51,270
like jesse so yeah so isolation of

00:27:48,090 --> 00:27:54,630
windows is very different and in Windows

00:27:51,270 --> 00:27:56,310
when you have a web workload it assumes

00:27:54,630 --> 00:27:58,020
that that web workload is integrated

00:27:56,310 --> 00:27:59,970
into the operating system itself is so

00:27:58,020 --> 00:28:01,770
it's not like in a Linux container we

00:27:59,970 --> 00:28:03,060
can just start a process is just a

00:28:01,770 --> 00:28:05,850
process where in Windows you have many

00:28:03,060 --> 00:28:07,170
flavors of processes so there are kernel

00:28:05,850 --> 00:28:08,940
primitives that allow you to go and

00:28:07,170 --> 00:28:12,660
isolate different types of workloads and

00:28:08,940 --> 00:28:13,950
windows so what we will expose to diego

00:28:12,660 --> 00:28:16,350
is going to be slightly different than

00:28:13,950 --> 00:28:19,200
what you'd see in linux so today in

00:28:16,350 --> 00:28:21,330
windows 2012 you're gonna have the HW c

00:28:19,200 --> 00:28:23,850
and a lot of other mechanisms to isolate

00:28:21,330 --> 00:28:28,070
win windows like web workloads and then

00:28:23,850 --> 00:28:28,070
we're working on background tasks next

00:28:28,730 --> 00:28:34,670
alright looks like we're out of time

00:28:30,750 --> 00:28:34,670

YouTube URL: https://www.youtube.com/watch?v=SSxI9eonBVs


