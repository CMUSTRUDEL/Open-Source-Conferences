Title: Forget about scripting, CLI Plugins are here!
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	Forget about scripting, CLI Plugins are here! - 01 Jonathan Berkhahn, Simon Leung, Greg oehmen
Captions: 
	00:00:00,199 --> 00:00:03,780
so what is the problem that we're trying

00:00:02,010 --> 00:00:08,069
to solve we heard pretty loudly from the

00:00:03,780 --> 00:00:11,969
community that that the CLI confines

00:00:08,069 --> 00:00:14,639
users to basically the feature sets that

00:00:11,969 --> 00:00:16,500
we decide to deliver and we heard that

00:00:14,639 --> 00:00:18,720
that confinement didn't sit well with

00:00:16,500 --> 00:00:22,199
people basically you know we tried to

00:00:18,720 --> 00:00:24,750
expose the api's expose functionality of

00:00:22,199 --> 00:00:26,070
the api's in commands so there's a lot

00:00:24,750 --> 00:00:27,810
of things you can do with the CLI that

00:00:26,070 --> 00:00:29,609
were just out of scope for what our

00:00:27,810 --> 00:00:32,880
team's chartered to deliver so we came

00:00:29,609 --> 00:00:35,399
up with plugins the main thing that we

00:00:32,880 --> 00:00:37,590
wanted to make sure we did is make this

00:00:35,399 --> 00:00:38,790
the command-line extensible if we didn't

00:00:37,590 --> 00:00:40,860
do that we pretty much fail there'd be

00:00:38,790 --> 00:00:42,600
no reason for plugins on the second

00:00:40,860 --> 00:00:45,539
thing we wanted to do is make sure that

00:00:42,600 --> 00:00:48,899
plugins acted and interacted exactly

00:00:45,539 --> 00:00:50,730
like core CLI commands do today so that

00:00:48,899 --> 00:00:53,190
there were there's a seamless

00:00:50,730 --> 00:00:54,329
interaction between the two and then the

00:00:53,190 --> 00:00:56,789
third thing we wanted to make sure that

00:00:54,329 --> 00:01:02,070
we did was make plugins discoverable and

00:00:56,789 --> 00:01:04,010
install both natively within the CLI so

00:01:02,070 --> 00:01:06,299
as we were going through that

00:01:04,010 --> 00:01:08,220
conversation amongst ourselves what what

00:01:06,299 --> 00:01:10,680
it is that we wanted to do I remembered

00:01:08,220 --> 00:01:13,170
that we incepted on plugins we had an

00:01:10,680 --> 00:01:15,810
epoch in our tracker and in that we took

00:01:13,170 --> 00:01:17,490
notes about our inception the goals in

00:01:15,810 --> 00:01:18,990
the scope are an interesting thing to

00:01:17,490 --> 00:01:20,100
revisit the goals we had internally

00:01:18,990 --> 00:01:21,270
those are the things for the team like

00:01:20,100 --> 00:01:24,000
you guys don't care that we wanted to

00:01:21,270 --> 00:01:26,970
have a shippable MVP for November first

00:01:24,000 --> 00:01:28,290
but the Scopes really interesting it's

00:01:26,970 --> 00:01:30,630
the thing that we call the four things

00:01:28,290 --> 00:01:34,320
it's kind of the mantra for plugins the

00:01:30,630 --> 00:01:36,990
first one is that plugins are executed

00:01:34,320 --> 00:01:38,729
by typing CF space and then the command

00:01:36,990 --> 00:01:40,979
name the plug-in name it's exactly the

00:01:38,729 --> 00:01:43,890
way that the core CLI works today the

00:01:40,979 --> 00:01:48,049
second one is that a plug-in author

00:01:43,890 --> 00:01:55,649
developer could write help and that help

00:01:48,049 --> 00:01:58,979
help that's good did I do that with the

00:01:55,649 --> 00:02:00,540
clickers that guys any way that you

00:01:58,979 --> 00:02:02,670
could write help and that it would

00:02:00,540 --> 00:02:06,119
interact with the existing help

00:02:02,670 --> 00:02:09,060
structure for for the CLI so that when

00:02:06,119 --> 00:02:11,039
you type CF help help about plugins

00:02:09,060 --> 00:02:13,370
comes up as well as help about the

00:02:11,039 --> 00:02:16,459
existing CLI

00:02:13,370 --> 00:02:18,650
the third thing is that plugins didn't

00:02:16,459 --> 00:02:21,379
exist in a vacuum on their own that they

00:02:18,650 --> 00:02:23,840
could call core commands and that core

00:02:21,379 --> 00:02:25,790
commands could be then a part of the

00:02:23,840 --> 00:02:29,209
functionality that plugin delivers and

00:02:25,790 --> 00:02:31,580
then the last thing is that they can

00:02:29,209 --> 00:02:36,500
take arguments and flags exactly like

00:02:31,580 --> 00:02:37,910
the core commands do so Jonathan okay so

00:02:36,500 --> 00:02:40,760
I'm going to talk briefly about the use

00:02:37,910 --> 00:02:43,370
cases for plugins this is sort of the

00:02:40,760 --> 00:02:46,849
you know expected uses we were thinking

00:02:43,370 --> 00:02:47,930
of and we began developing them so Greg

00:02:46,849 --> 00:02:49,640
mentioned that we're from disparate

00:02:47,930 --> 00:02:51,260
companies were an open source team all

00:02:49,640 --> 00:02:53,299
the projects we work on are open source

00:02:51,260 --> 00:02:54,920
so that was really what we personally

00:02:53,299 --> 00:02:56,239
had in mind when we began developing

00:02:54,920 --> 00:02:58,190
these now that's not to say that we

00:02:56,239 --> 00:03:00,410
didn't take into account private use

00:02:58,190 --> 00:03:01,819
cases we also every step of the way as

00:03:00,410 --> 00:03:02,930
we were developing the architecture and

00:03:01,819 --> 00:03:04,400
infrastructure that we're using for

00:03:02,930 --> 00:03:07,430
plugins we made sure to keep an eye to

00:03:04,400 --> 00:03:08,959
make these usable for enterprise cases

00:03:07,430 --> 00:03:11,090
so if you you know want to provide

00:03:08,959 --> 00:03:14,150
functionality to your customers you can

00:03:11,090 --> 00:03:15,500
use plugins to do that that main goal is

00:03:14,150 --> 00:03:18,260
Greg mentioned was to extend the CLI

00:03:15,500 --> 00:03:21,139
commands that through a common a P I so

00:03:18,260 --> 00:03:23,989
what this means is we're really looking

00:03:21,139 --> 00:03:25,609
to create functionality for the CLI

00:03:23,989 --> 00:03:28,250
beyond what the three people standing in

00:03:25,609 --> 00:03:29,989
front of you can do in our day jobs the

00:03:28,250 --> 00:03:31,819
CLI is it continues to grow as Cloud

00:03:29,989 --> 00:03:33,829
Foundry continues to grow you know the

00:03:31,819 --> 00:03:35,599
use the the things people aren't gonna

00:03:33,829 --> 00:03:38,239
need the CLI to do for them is going to

00:03:35,599 --> 00:03:40,639
grow and grow and go and the three of us

00:03:38,239 --> 00:03:43,459
can not really keep up with that need so

00:03:40,639 --> 00:03:45,470
the hope is that by allowing users to

00:03:43,459 --> 00:03:47,870
extend the CLI beyond the pre-existing

00:03:45,470 --> 00:03:50,030
API that not only will they you know

00:03:47,870 --> 00:03:51,319
create things for their own uses but the

00:03:50,030 --> 00:03:54,349
community will collaborate amongst

00:03:51,319 --> 00:03:56,030
themselves and continue to grow rather

00:03:54,349 --> 00:03:59,799
than just collaborating sort of with us

00:03:56,030 --> 00:03:59,799
the mainline CLI team that work together

00:04:02,650 --> 00:04:07,340
ok so there's some brief examples of the

00:04:06,139 --> 00:04:10,250
sort of plugins we've seen in the

00:04:07,340 --> 00:04:11,599
community so far the first use case is

00:04:10,250 --> 00:04:15,590
sort of something we've labeled sort of

00:04:11,599 --> 00:04:17,570
ephemeral plugins under our own work on

00:04:15,590 --> 00:04:20,739
the CLI team itself we've encountered

00:04:17,570 --> 00:04:25,370
numerous things which are use cases that

00:04:20,739 --> 00:04:26,280
are sort of time-boxed explicitly for

00:04:25,370 --> 00:04:27,510
instance

00:04:26,280 --> 00:04:30,180
so for those of you who aren't familiar

00:04:27,510 --> 00:04:32,280
with what Diego is Diego is the

00:04:30,180 --> 00:04:34,170
next-generation backend for cloud

00:04:32,280 --> 00:04:36,060
foundry it's currently being in you know

00:04:34,170 --> 00:04:37,650
it's a development it's not quite ready

00:04:36,060 --> 00:04:39,090
for primetime just yet but it's under

00:04:37,650 --> 00:04:40,770
it's under work you can go and download

00:04:39,090 --> 00:04:42,240
it and use it today

00:04:40,770 --> 00:04:44,340
and so there are certain features that

00:04:42,240 --> 00:04:46,020
Diego supports that the main line back

00:04:44,340 --> 00:04:48,120
into cloud foundry currently doesn't and

00:04:46,020 --> 00:04:49,800
some of our users expressed a desire to

00:04:48,120 --> 00:04:52,740
be able to use the CLI to interact with

00:04:49,800 --> 00:04:53,820
Diego that's great there's a couple

00:04:52,740 --> 00:04:55,530
problems with that that we didn't want

00:04:53,820 --> 00:04:57,150
to include Diego commands on the regular

00:04:55,530 --> 00:04:58,800
CLI because they might get you know

00:04:57,150 --> 00:05:02,520
confuse users who don't know what Diego

00:04:58,800 --> 00:05:04,500
is if they use them targeting a normal

00:05:02,520 --> 00:05:06,870
cloud foundry strange things might

00:05:04,500 --> 00:05:08,430
happen and and confuse their users so

00:05:06,870 --> 00:05:09,720
this was a perfect use case for us to

00:05:08,430 --> 00:05:12,240
write a plug-in because now we have a

00:05:09,720 --> 00:05:14,340
plugin called Diego beta it contains all

00:05:12,240 --> 00:05:16,290
of the all of the subsets of features

00:05:14,340 --> 00:05:18,419
that are unique to Diego at this point

00:05:16,290 --> 00:05:20,190
in time and if you want you can go

00:05:18,419 --> 00:05:21,570
download it in one place just one plugin

00:05:20,190 --> 00:05:23,730
and it comes with the or roughly a dozen

00:05:21,570 --> 00:05:25,530
commands at this point and it's it's all

00:05:23,730 --> 00:05:28,710
neatly contained a month nice and Li in

00:05:25,530 --> 00:05:30,720
one place and then when Diego becomes

00:05:28,710 --> 00:05:32,160
the de facto back-end for cloud foundry

00:05:30,720 --> 00:05:36,030
we can just merge that functionality

00:05:32,160 --> 00:05:38,880
into the mainline CLI see it's app stack

00:05:36,030 --> 00:05:41,820
changer so about a month ago now

00:05:38,880 --> 00:05:46,680
Ubuntu a canonical I should say sunset

00:05:41,820 --> 00:05:49,470
support for Ubuntu lucid and many of the

00:05:46,680 --> 00:05:52,080
backends on cloud foundry the de A's are

00:05:49,470 --> 00:05:53,940
using were using lucid and so we had to

00:05:52,080 --> 00:05:57,050
need to migrate all of these backends to

00:05:53,940 --> 00:06:00,510
the trusty so that you know security

00:05:57,050 --> 00:06:02,220
features and such still get updated so

00:06:00,510 --> 00:06:03,830
this is the sort of thing that someone's

00:06:02,220 --> 00:06:06,030
only ever going to need to do this once

00:06:03,830 --> 00:06:07,350
you know once that's upgraded to trusty

00:06:06,030 --> 00:06:09,270
they're not going to do it you know ever

00:06:07,350 --> 00:06:10,950
again so this was again something that

00:06:09,270 --> 00:06:12,990
was very integral to our you know users

00:06:10,950 --> 00:06:14,250
needed to do this it's a pretty serious

00:06:12,990 --> 00:06:15,419
security issue but they're only ever

00:06:14,250 --> 00:06:16,950
going to need to do this once so we were

00:06:15,419 --> 00:06:18,300
to plug in that does it you're right you

00:06:16,950 --> 00:06:21,120
know down the plug in around it once

00:06:18,300 --> 00:06:22,530
I'm install it forget about it now that

00:06:21,120 --> 00:06:23,760
novel functionality so this is this is

00:06:22,530 --> 00:06:26,070
sort of a different area this is

00:06:23,760 --> 00:06:27,960
something that maybe is some area of

00:06:26,070 --> 00:06:31,020
functionality and that the CLI isn't

00:06:27,960 --> 00:06:32,610
directly concerned with something that

00:06:31,020 --> 00:06:34,289
but it's still you know useful to a user

00:06:32,610 --> 00:06:37,200
is sort of a quality of life improvement

00:06:34,289 --> 00:06:39,620
or a use case like interacting with an

00:06:37,200 --> 00:06:40,639
app or a service directly which

00:06:39,620 --> 00:06:42,830
we don't really concern ourselves with

00:06:40,639 --> 00:06:44,270
so steel I recorder and open our to that

00:06:42,830 --> 00:06:47,630
Simon is actually going to show you

00:06:44,270 --> 00:06:49,550
CLI recorder is actually written by

00:06:47,630 --> 00:06:52,610
everybody on Simon Liang it's a thing to

00:06:49,550 --> 00:06:54,020
record and replay macros so you can have

00:06:52,610 --> 00:06:56,690
subsets of commands that you can execute

00:06:54,020 --> 00:06:59,240
quickly in the CLI itself open is just a

00:06:56,690 --> 00:07:01,310
simple you type CF open and your app

00:06:59,240 --> 00:07:02,810
name and it opens up a browser that you

00:07:01,310 --> 00:07:06,040
know goes directly to your app so you

00:07:02,810 --> 00:07:09,530
can see what's running on Cloud Foundry

00:07:06,040 --> 00:07:10,850
and then I'm gonna pass it to Simon

00:07:09,530 --> 00:07:20,690
who's going to demo some plugins for you

00:07:10,850 --> 00:07:22,729
off so when we so when we first set out

00:07:20,690 --> 00:07:25,789
to design the plug-in architecture we

00:07:22,729 --> 00:07:28,250
envision the proteins can allow a wide

00:07:25,789 --> 00:07:31,940
range of functionality in April for the

00:07:28,250 --> 00:07:33,410
CLI and some of the functionality may be

00:07:31,940 --> 00:07:36,050
easily used and some of them might be

00:07:33,410 --> 00:07:38,990
harder for the user to use so he was out

00:07:36,050 --> 00:07:43,910
goal that a user should every cat

00:07:38,990 --> 00:07:45,680
commands help easily so today all the

00:07:43,910 --> 00:07:48,349
proteins - man they are listed in the

00:07:45,680 --> 00:07:50,539
self-help alongside web or the native

00:07:48,349 --> 00:07:53,270
command and different need additional

00:07:50,539 --> 00:07:56,090
help for any given command all you have

00:07:53,270 --> 00:08:02,780
to do is to give the help wrap for

00:07:56,090 --> 00:08:14,380
example so you guys see the font clearly

00:08:02,780 --> 00:08:18,410
I can enlarge it a little bit yep okay

00:08:14,380 --> 00:08:20,419
so this is a CF help menu and all the

00:08:18,410 --> 00:08:22,190
install of all the plugins installed

00:08:20,419 --> 00:08:25,849
locally is under this category right

00:08:22,190 --> 00:08:28,639
here and and if you want to look at any

00:08:25,849 --> 00:08:30,830
additional help for a particular command

00:08:28,639 --> 00:08:34,430
for example record all you have to do is

00:08:30,830 --> 00:08:37,250
self record and the help tract as well

00:08:34,430 --> 00:08:41,270
show you the detail usage and options

00:08:37,250 --> 00:08:43,640
for command and so looking looking at

00:08:41,270 --> 00:08:46,070
this it'll help for protein command is

00:08:43,640 --> 00:08:47,900
basically the same as getting help from

00:08:46,070 --> 00:08:49,730
a native command and testing for the

00:08:47,900 --> 00:08:51,230
user because that's really nothing new

00:08:49,730 --> 00:08:56,190
for you to learn

00:08:51,230 --> 00:08:59,760
and going to the second go at it had a

00:08:56,190 --> 00:09:01,860
parking design we one user to April run

00:08:59,760 --> 00:09:05,100
a plugin just like running a little

00:09:01,860 --> 00:09:07,700
plugin I mean the native command and let

00:09:05,100 --> 00:09:07,700
me show you what I mean

00:09:08,180 --> 00:09:13,560
so let's start by this team what can

00:09:11,820 --> 00:09:16,350
local plugins I have installing the

00:09:13,560 --> 00:09:19,230
system so sheer plugins will keep a list

00:09:16,350 --> 00:09:22,350
of plugins installed and I've CI

00:09:19,230 --> 00:09:24,570
recorder live stats and open so the

00:09:22,350 --> 00:09:26,220
recorder will record a set of still item

00:09:24,570 --> 00:09:29,270
man which you can play back in a later

00:09:26,220 --> 00:09:31,920
time and the live stats it shows you

00:09:29,270 --> 00:09:34,680
live research stats of any application

00:09:31,920 --> 00:09:37,200
in a browser spring it and I will show

00:09:34,680 --> 00:09:40,830
you in a bit the open night Jonathan

00:09:37,200 --> 00:09:42,540
said it's a very simple plugin it's a

00:09:40,830 --> 00:09:43,589
wonder spark intermediate life will be

00:09:42,540 --> 00:09:45,029
easier

00:09:43,589 --> 00:09:46,770
the opens the application in the browser

00:09:45,029 --> 00:09:49,920
for you so you can have to manually type

00:09:46,770 --> 00:09:51,720
in the URL to use it is temperatures CF

00:09:49,920 --> 00:09:54,720
and then a command open and an

00:09:51,720 --> 00:09:56,790
application you want to open i have

00:09:54,720 --> 00:10:00,510
application in my environment Corrigan's

00:09:56,790 --> 00:10:02,850
it returns a list of completely share

00:10:00,510 --> 00:10:06,839
plugin and i'm going to use that as a

00:10:02,850 --> 00:10:09,810
sample protein so it reduces CF open

00:10:06,839 --> 00:10:11,220
plugins and what it does the opens the

00:10:09,810 --> 00:10:13,290
default route to my application in a

00:10:11,220 --> 00:10:14,910
browser but in my case that my

00:10:13,290 --> 00:10:17,640
application actually have to browse

00:10:14,910 --> 00:10:19,830
panda to it so it is asking me which one

00:10:17,640 --> 00:10:24,750
to open so i'll just pick the first one

00:10:19,830 --> 00:10:28,170
and about browser open application and I

00:10:24,750 --> 00:10:30,750
don't industry need this is a list of

00:10:28,170 --> 00:10:33,450
the available plugins in the community

00:10:30,750 --> 00:10:35,040
and we have CIO recorder here and we

00:10:33,450 --> 00:10:37,500
have live stats

00:10:35,040 --> 00:10:40,589
life's test monitors the CPU and memory

00:10:37,500 --> 00:10:43,070
usage in a browser and to juice it let

00:10:40,589 --> 00:10:47,610
me show you how to use it

00:10:43,070 --> 00:10:49,680
UCF live stats and then the application

00:10:47,610 --> 00:10:51,980
you want to monitor and since we have

00:10:49,680 --> 00:10:58,200
plug-in open in a browser let's use that

00:10:51,980 --> 00:11:00,750
plugins so what the protein does is it

00:10:58,200 --> 00:11:03,540
runs a local server which we can assess

00:11:00,750 --> 00:11:04,560
in a browser so let's copy the route out

00:11:03,540 --> 00:11:10,320
and open the

00:11:04,560 --> 00:11:13,260
browser sso page and that opens up a

00:11:10,320 --> 00:11:15,660
page with to craft the upper class

00:11:13,260 --> 00:11:18,800
associated usage of the CPU and the

00:11:15,660 --> 00:11:22,620
lower one shows you the usage of memory

00:11:18,800 --> 00:11:24,960
so if i SS application by reloading the

00:11:22,620 --> 00:11:33,750
page like once twice I should see a

00:11:24,960 --> 00:11:35,550
spike in the CPU so you see the three

00:11:33,750 --> 00:11:41,460
lines actually that's probably other

00:11:35,550 --> 00:11:43,170
people using it too so so you see this

00:11:41,460 --> 00:11:45,510
actually three lines in the graph and

00:11:43,170 --> 00:11:46,890
that's only because the proteins is

00:11:45,510 --> 00:11:49,200
actually running on three different

00:11:46,890 --> 00:11:51,779
instances so each one of this line

00:11:49,200 --> 00:11:54,660
represent a single instance so this is

00:11:51,779 --> 00:11:56,310
very neat and as you can see the protein

00:11:54,660 --> 00:11:58,500
can keep your functionality that

00:11:56,310 --> 00:12:00,960
negative zero I can never give you and

00:11:58,500 --> 00:12:04,890
the franking developers that you can

00:12:00,960 --> 00:12:06,589
take an advantage of that we can see it

00:12:04,890 --> 00:12:09,540
as more and more protein come in

00:12:06,589 --> 00:12:11,850
available every single day but all this

00:12:09,540 --> 00:12:12,420
protein developer they usually face of

00:12:11,850 --> 00:12:14,760
one problem

00:12:12,420 --> 00:12:18,720
a common problem that you have to solve

00:12:14,760 --> 00:12:21,390
is how to get all these proteins to the

00:12:18,720 --> 00:12:34,410
end to the end user and there's a reason

00:12:21,390 --> 00:12:38,220
we make so I repository so with its high

00:12:34,410 --> 00:12:40,860
protein repository is a CI server that

00:12:38,220 --> 00:12:44,640
sale I can use a server to

00:12:40,860 --> 00:12:47,880
distill I can interact already to browse

00:12:44,640 --> 00:12:50,459
and to install plugins if you have a

00:12:47,880 --> 00:12:53,940
recent co-op version installed you can

00:12:50,459 --> 00:12:57,500
go through the help of the COI

00:12:53,940 --> 00:13:00,990
so I stopped this talk the help menu and

00:12:57,500 --> 00:13:03,180
you can see under this category that are

00:13:00,990 --> 00:13:06,480
there are commands that you can interact

00:13:03,180 --> 00:13:08,610
with to serve it already that

00:13:06,480 --> 00:13:10,920
you can add and remove parking repo and

00:13:08,610 --> 00:13:12,990
you can live sports locally install on

00:13:10,920 --> 00:13:15,600
your computer and you if you want to

00:13:12,990 --> 00:13:17,649
look at what what plugins are available

00:13:15,600 --> 00:13:22,089
in the breaking server you can use the

00:13:17,649 --> 00:13:23,980
platon commence so let's look at what

00:13:22,089 --> 00:13:26,139
protein repos are on my local system

00:13:23,980 --> 00:13:27,749
right now available we can use the list

00:13:26,139 --> 00:13:32,410
I can be postman

00:13:27,749 --> 00:13:35,589
see ya as you can see we have only a

00:13:32,410 --> 00:13:38,019
single repo cost CF on my local computer

00:13:35,589 --> 00:13:40,209
and this is a tree the office oshio I

00:13:38,019 --> 00:13:43,420
will post the past year I team it

00:13:40,209 --> 00:13:46,689
contains all the repository contains all

00:13:43,420 --> 00:13:49,959
the proteins shared by the community and

00:13:46,689 --> 00:13:52,179
all these plugins are open source and if

00:13:49,959 --> 00:13:54,519
I choose to I can add another repository

00:13:52,179 --> 00:14:00,480
to my local system and to do that I use

00:13:54,519 --> 00:14:03,399
the CF add tracking repo command and

00:14:00,480 --> 00:14:06,339
this is usage to use that you have to

00:14:03,399 --> 00:14:08,350
supply the repo name in the URL the repo

00:14:06,339 --> 00:14:09,910
name is pretty much anything you want

00:14:08,350 --> 00:14:12,699
your name it is pretty much for your own

00:14:09,910 --> 00:14:16,119
memory remembering and the URL is the

00:14:12,699 --> 00:14:17,769
web address to the user repository and I

00:14:16,119 --> 00:14:19,809
just happen to have a local development

00:14:17,769 --> 00:14:21,610
server a server that's running

00:14:19,809 --> 00:14:26,589
on my system so I can use that as

00:14:21,610 --> 00:14:28,899
demonstration so CF add repo and then a

00:14:26,589 --> 00:14:31,480
name I'll just call it local as in local

00:14:28,899 --> 00:14:33,730
server and then up at rest which is my

00:14:31,480 --> 00:14:37,720
local computer and I know it's running

00:14:33,730 --> 00:14:39,970
on port 3000 so it's padded and you

00:14:37,720 --> 00:14:43,480
verify we can just use the list command

00:14:39,970 --> 00:14:46,449
to make sure it's already added so now I

00:14:43,480 --> 00:14:48,009
have see a repo and up local repo and if

00:14:46,449 --> 00:14:50,499
I want to see what's available within

00:14:48,009 --> 00:14:57,249
this new repo I use the CF repo

00:14:50,499 --> 00:14:58,749
prog-rock in cement so as you can see

00:14:57,249 --> 00:15:02,019
here it has a long list of available

00:14:58,749 --> 00:15:04,689
plugins what for the Camry repo and in

00:15:02,019 --> 00:15:08,170
my local repo is only a single sample

00:15:04,689 --> 00:15:11,649
plug-in and if I want to hit install one

00:15:08,170 --> 00:15:14,459
of these one of these are protein I can

00:15:11,649 --> 00:15:17,889
use the install comments yeah install

00:15:14,459 --> 00:15:19,360
protein and with this we stop working

00:15:17,889 --> 00:15:21,459
command you have a fill option what to

00:15:19,360 --> 00:15:24,160
do the first one we can grab the

00:15:21,459 --> 00:15:26,690
Beanstalk with a with a plug-in binary

00:15:24,160 --> 00:15:28,790
that you get from the protein author

00:15:26,690 --> 00:15:30,980
and another option is you can install

00:15:28,790 --> 00:15:32,690
the plug-in button allocation install

00:15:30,980 --> 00:15:35,750
with a URL through the park in binary

00:15:32,690 --> 00:15:39,560
and the third option is like to install

00:15:35,750 --> 00:15:42,110
the plug-in that is in you know parking

00:15:39,560 --> 00:15:44,329
repository so to do that I can just do

00:15:42,110 --> 00:15:46,579
CF in soy protein and in the name of the

00:15:44,329 --> 00:15:50,000
protein in a book repository for example

00:15:46,579 --> 00:15:55,459
if I want to install targets how do you

00:15:50,000 --> 00:16:00,079
find support in targets and in the name

00:15:55,459 --> 00:16:01,759
of the repository which is cf so what

00:16:00,079 --> 00:16:03,230
the CI does right now is trying to

00:16:01,759 --> 00:16:05,120
determine what kind of operating system

00:16:03,230 --> 00:16:06,889
you're running and you will figure out

00:16:05,120 --> 00:16:09,529
which binary should download and install

00:16:06,889 --> 00:16:12,589
on your local system this process should

00:16:09,529 --> 00:16:16,069
be pretty fast with the plug-in is

00:16:12,589 --> 00:16:17,629
actually not that big in size but it

00:16:16,069 --> 00:16:22,790
really expands my internet connection

00:16:17,629 --> 00:16:26,740
speed so it should be any time now I

00:16:22,790 --> 00:16:26,740
think the binaries around american-sized

00:16:31,269 --> 00:16:45,139
if your process configured correctly yes

00:16:34,310 --> 00:16:47,360
they will Oh with the say I want no

00:16:45,139 --> 00:16:50,569
currently it is not processed it just

00:16:47,360 --> 00:16:56,360
wrote a rate URL so you need access to

00:16:50,569 --> 00:17:01,610
that you are already high oh yeah did I

00:16:56,360 --> 00:17:03,110
all right so here I show that like the

00:17:01,610 --> 00:17:09,049
interaction between sale I end up

00:17:03,110 --> 00:17:12,110
repository and the second go of creeper

00:17:09,049 --> 00:17:15,799
is display that you use so creep is an

00:17:12,110 --> 00:17:17,750
open-source project and so if anyone it

00:17:15,799 --> 00:17:20,179
just Cromley repository it's ready to

00:17:17,750 --> 00:17:23,299
use out of the pots you can run it as a

00:17:20,179 --> 00:17:24,260
standalone executable or if you have a

00:17:23,299 --> 00:17:27,079
CF environment

00:17:24,260 --> 00:17:31,190
criticized yet ready so you just push to

00:17:27,079 --> 00:17:33,559
any environment that you have with that

00:17:31,190 --> 00:17:35,000
like we can paralyze your item you can

00:17:33,559 --> 00:17:37,549
describe with your host

00:17:35,000 --> 00:17:38,360
plugins for your community so they can

00:17:37,549 --> 00:17:40,420
share out

00:17:38,360 --> 00:17:43,309
open-source community with each other or

00:17:40,420 --> 00:17:45,380
if your organization became probably

00:17:43,309 --> 00:17:47,750
hopeless creeper the host proteins the

00:17:45,380 --> 00:17:49,250
specific your environment and you can

00:17:47,750 --> 00:17:53,660
share all these proteins with your

00:17:49,250 --> 00:17:55,700
clients or customer and other than being

00:17:53,660 --> 00:17:59,600
a protest from Reggie server creeper is

00:17:55,700 --> 00:18:03,080
also architectural reference creeper is

00:17:59,600 --> 00:18:06,830
posed a number of REST API interface to

00:18:03,080 --> 00:18:10,460
interact with cell I so anyone can

00:18:06,830 --> 00:18:12,890
easily implement your own version the

00:18:10,460 --> 00:18:16,160
creeper by implementing the core SEO a

00:18:12,890 --> 00:18:18,980
signature and with that you can easily

00:18:16,160 --> 00:18:21,470
even easily extend the creepers

00:18:18,980 --> 00:18:23,030
functionality such as yourself and

00:18:21,470 --> 00:18:26,299
occasion or any functionality that you

00:18:23,030 --> 00:18:28,580
wish to make so here I have showed the

00:18:26,299 --> 00:18:31,490
Utah COI integration the parking usage

00:18:28,580 --> 00:18:33,080
and distribution model and here I would

00:18:31,490 --> 00:18:34,580
like you to pass back to Jonathan and

00:18:33,080 --> 00:18:42,410
he's gonna bring you bring you through

00:18:34,580 --> 00:18:44,299
the rest of topics okay I would like to

00:18:42,410 --> 00:18:45,860
briefly mention what exactly is the CLI

00:18:44,299 --> 00:18:46,790
plugin so we've shown what you can do

00:18:45,860 --> 00:18:49,040
with them and I would like to briefly

00:18:46,790 --> 00:18:50,809
touch on what exactly you have to write

00:18:49,040 --> 00:18:52,340
if you actually want to make one so

00:18:50,809 --> 00:18:53,990
currently we only support one language

00:18:52,340 --> 00:18:56,360
for our plugins which is going that's

00:18:53,990 --> 00:18:57,980
what the CLI itself is written then just

00:18:56,360 --> 00:18:59,360
to keep things sort of simple as well as

00:18:57,980 --> 00:19:01,910
take advantage of the the particular

00:18:59,360 --> 00:19:03,640
strengths that golang offers us so for

00:19:01,910 --> 00:19:05,780
those not familiar with golang it's a

00:19:03,640 --> 00:19:08,090
language developed by google in the past

00:19:05,780 --> 00:19:09,700
couple years that's sort of its target

00:19:08,090 --> 00:19:12,290
audiences thing you know concurrent

00:19:09,700 --> 00:19:13,820
environments we actually use it for a

00:19:12,290 --> 00:19:16,340
couple other things such as the cross

00:19:13,820 --> 00:19:19,190
compiled binary feature so regardless of

00:19:16,340 --> 00:19:21,020
what OS or architecture that you develop

00:19:19,190 --> 00:19:24,380
on going has the capability to provide

00:19:21,020 --> 00:19:26,270
to produce binaries for any of the

00:19:24,380 --> 00:19:27,830
disparate architectures that CLI

00:19:26,270 --> 00:19:30,740
supports which is currently 32 and

00:19:27,830 --> 00:19:33,350
64-bit windows 32 and 64-bit Linux as

00:19:30,740 --> 00:19:34,760
well as Darwin so regardless of what

00:19:33,350 --> 00:19:36,169
you're writing your plugin on you can

00:19:34,760 --> 00:19:38,750
distribute it to users on any of those

00:19:36,169 --> 00:19:40,100
five operating systems the single

00:19:38,750 --> 00:19:42,020
executable file is another nice feature

00:19:40,100 --> 00:19:43,880
so you've written your plugin you've

00:19:42,020 --> 00:19:45,980
compiled it the end result rather than

00:19:43,880 --> 00:19:47,660
being at our ball of stuff that your

00:19:45,980 --> 00:19:49,100
user has to download put the right

00:19:47,660 --> 00:19:50,550
places and then you have to have

00:19:49,100 --> 00:19:51,870
dependency setup

00:19:50,550 --> 00:19:53,700
a single executable file that will

00:19:51,870 --> 00:19:55,140
execute anywhere regardless even if they

00:19:53,700 --> 00:19:56,700
don't have go installed as long as you

00:19:55,140 --> 00:20:00,090
are running in on the right environment

00:19:56,700 --> 00:20:01,560
so this kind of combines to create a

00:20:00,090 --> 00:20:03,510
hide something that's highly portable

00:20:01,560 --> 00:20:05,780
it's easy to distribute it's easy to

00:20:03,510 --> 00:20:05,780
install

00:20:06,560 --> 00:20:11,970
so the future where are we going with

00:20:09,270 --> 00:20:14,010
plugins we are currently working on a

00:20:11,970 --> 00:20:16,410
selection of new features which we hope

00:20:14,010 --> 00:20:18,150
to get out in the near future couple of

00:20:16,410 --> 00:20:21,810
things we're working on we're working on

00:20:18,150 --> 00:20:23,520
making the plug-in API simpler to use so

00:20:21,810 --> 00:20:25,560
that it's easier to write plugins it's

00:20:23,520 --> 00:20:29,160
easier to interact with the cod foundry

00:20:25,560 --> 00:20:32,310
and wrong within your plugin we're also

00:20:29,160 --> 00:20:34,950
working on instituting version checking

00:20:32,310 --> 00:20:36,840
within the CLI itself so you know if

00:20:34,950 --> 00:20:38,400
you're if plugins depends on features

00:20:36,840 --> 00:20:40,500
that were more recently introduced you

00:20:38,400 --> 00:20:44,070
can say I require at least CLI version X

00:20:40,500 --> 00:20:45,240
so that you know your user will see that

00:20:44,070 --> 00:20:46,770
you know they need to upgrade the C Line

00:20:45,240 --> 00:20:48,750
or to use your plugins sort of this the

00:20:46,770 --> 00:20:52,410
you know CLI exploding or something like

00:20:48,750 --> 00:20:56,510
that I'm gonna briefly pass it off to

00:20:52,410 --> 00:20:56,510
Greg he's gonna sort of wraps up I

00:21:00,200 --> 00:21:05,340
didn't remember that I was gonna wrap

00:21:02,010 --> 00:21:07,350
this up so it says closing up so I'm

00:21:05,340 --> 00:21:09,810
closing up I guess that we have a few

00:21:07,350 --> 00:21:10,230
minutes for questions are there any

00:21:09,810 --> 00:21:16,590
questions

00:21:10,230 --> 00:21:18,240
ah that's a great question the question

00:21:16,590 --> 00:21:22,560
is where is a good place to go to get

00:21:18,240 --> 00:21:24,780
developer documentation so the best way

00:21:22,560 --> 00:21:28,020
to do it is go to out Co IQ help

00:21:24,780 --> 00:21:33,320
repository and let me just show you that

00:21:28,020 --> 00:21:39,240
and in here if you go down you will see

00:21:33,320 --> 00:21:47,430
talking plug-in development just a link

00:21:39,240 --> 00:21:49,650
right here so in a developing session

00:21:47,430 --> 00:21:53,220
design doesn't mean for developing Chi

00:21:49,650 --> 00:21:55,530
on breakn SEO plug-in see here so here

00:21:53,220 --> 00:22:00,630
you'll find a link and also samples for

00:21:55,530 --> 00:22:03,390
proteins at the architecture of uriah

00:22:00,630 --> 00:22:04,120
protein and also there's a link for you

00:22:03,390 --> 00:22:06,310
to go to

00:22:04,120 --> 00:22:09,970
talking in CLI parking repository

00:22:06,310 --> 00:22:11,500
there's examples to this examples so if

00:22:09,970 --> 00:22:15,880
we want you to look at examples of the

00:22:11,500 --> 00:22:17,860
plug-in you go to so with all these

00:22:15,880 --> 00:22:20,140
aisha-tachi examples you have basic

00:22:17,860 --> 00:22:22,000
working how to be the interactive part

00:22:20,140 --> 00:22:26,470
plug-in how to make a program with

00:22:22,000 --> 00:22:29,080
multiple comments and if you want with

00:22:26,470 --> 00:22:32,470
you TDD and as a sample of how to

00:22:29,080 --> 00:22:45,370
develop using our fake CI connection and

00:22:32,470 --> 00:22:46,120
all these samples are here so that's a

00:22:45,370 --> 00:22:50,020
work in progress

00:22:46,120 --> 00:22:53,110
we we are having we're having in this

00:22:50,020 --> 00:22:54,670
yeah now the thing is it's currently a

00:22:53,110 --> 00:22:56,200
developed like rapid development we're

00:22:54,670 --> 00:23:01,870
currently working on it so it's expected

00:22:56,200 --> 00:23:04,540
to change in the next week even so

00:23:01,870 --> 00:23:07,560
they'll be coming and we'll make sure we

00:23:04,540 --> 00:23:22,390
post a link in there with historic good

00:23:07,560 --> 00:23:23,830
other questions so the hope is that if

00:23:22,390 --> 00:23:26,140
you are you know writing something

00:23:23,830 --> 00:23:27,310
that's a subset of existing CLI commands

00:23:26,140 --> 00:23:28,930
that you would write as a plugin rather

00:23:27,310 --> 00:23:30,400
than the script now if you're writing it

00:23:28,930 --> 00:23:32,620
as a script just for your own personal

00:23:30,400 --> 00:23:34,090
use that's probably fine but the problem

00:23:32,620 --> 00:23:35,710
with scripts is that you know the depend

00:23:34,090 --> 00:23:37,510
on the architecture the shell you're

00:23:35,710 --> 00:23:38,620
running it in maybe you know things you

00:23:37,510 --> 00:23:40,150
have set up local to your own

00:23:38,620 --> 00:23:41,590
environment so if it's something that

00:23:40,150 --> 00:23:43,060
you're hoping to provide you know to

00:23:41,590 --> 00:23:44,230
someone other than yourself you know

00:23:43,060 --> 00:23:46,480
they're you know they could be running

00:23:44,230 --> 00:23:48,520
on a Mac instead of Lennox they could

00:23:46,480 --> 00:23:50,890
you know things to be wildly different

00:23:48,520 --> 00:23:51,970
so the hope is that one of the main

00:23:50,890 --> 00:23:53,050
strengths the plugins one of the main

00:23:51,970 --> 00:23:55,180
reasons you'd want to use them is that

00:23:53,050 --> 00:23:56,950
they're extremely portable that you you

00:23:55,180 --> 00:23:58,720
know you know that when you give it to

00:23:56,950 --> 00:24:01,240
another person it's going to execute the

00:23:58,720 --> 00:24:03,250
same way it does in your machine and

00:24:01,240 --> 00:24:05,110
anything from the SRU people want to

00:24:03,250 --> 00:24:07,150
want to make sure your proteins that

00:24:05,110 --> 00:24:08,620
better put your user as a plug-in you

00:24:07,150 --> 00:24:10,480
can take advantage of the plug-in

00:24:08,620 --> 00:24:12,780
repository and you cannot use over the

00:24:10,480 --> 00:24:12,780
script

00:24:14,759 --> 00:24:27,179
yeah to blog light I'm sorry well sure

00:24:23,690 --> 00:24:29,820
namespace collision issues so one thing

00:24:27,179 --> 00:24:31,879
that you can not do is name a plugin the

00:24:29,820 --> 00:24:35,639
same name it's an existing core command

00:24:31,879 --> 00:24:38,369
it simply will error out in creating

00:24:35,639 --> 00:24:39,899
that plugin other than that though

00:24:38,369 --> 00:24:41,339
well I mean any time that you try to

00:24:39,899 --> 00:24:43,199
create a plugin it checks against a

00:24:41,339 --> 00:24:44,609
pre-existing name whether it's a core

00:24:43,199 --> 00:24:46,619
command or another plug-in so it's

00:24:44,609 --> 00:24:48,059
almost first-come first-served but you

00:24:46,619 --> 00:24:50,009
definitely cannot override a core

00:24:48,059 --> 00:24:54,299
command we have beyond that we don't

00:24:50,009 --> 00:25:05,789
have or enforce any real guidelines in

00:24:54,299 --> 00:25:08,729
the back its face up there yeah sure

00:25:05,789 --> 00:25:11,190
sure that makes perfect sense there'd be

00:25:08,729 --> 00:25:13,019
a point in time when we would definitely

00:25:11,190 --> 00:25:14,669
look at taking something into the core

00:25:13,019 --> 00:25:16,769
actually we saw the open plug-in there

00:25:14,669 --> 00:25:19,889
were stories in the backlog for that

00:25:16,769 --> 00:25:22,199
very exact same feature we just got

00:25:19,889 --> 00:25:23,909
written as a as a plug-in before we got

00:25:22,199 --> 00:25:25,919
to it before we got a prioritized into

00:25:23,909 --> 00:25:26,759
the backlog so I think there's a point

00:25:25,919 --> 00:25:28,199
in time and it would definitely be

00:25:26,759 --> 00:25:30,149
community driven right something we

00:25:28,199 --> 00:25:33,749
could talk about in PMC something that

00:25:30,149 --> 00:25:35,879
can be talked about in the new the next

00:25:33,749 --> 00:25:38,549
generation of e cap dev is that CF dev I

00:25:35,879 --> 00:25:41,959
think now and I'm happy to entertain

00:25:38,549 --> 00:25:41,959
that that just makes perfect sense

00:25:43,069 --> 00:26:00,629
Michael yeah yeah the the notion of

00:25:59,190 --> 00:26:01,469
breaking out admin commands is

00:26:00,629 --> 00:26:03,959
definitely something that we're looking

00:26:01,469 --> 00:26:05,069
at right now in refactoring help which

00:26:03,959 --> 00:26:07,679
gives us a little bit far-field of

00:26:05,069 --> 00:26:09,059
plugins but helps difficult because you

00:26:07,679 --> 00:26:10,289
traverse through so many commands that

00:26:09,059 --> 00:26:12,809
are for admin and only and if you're not

00:26:10,289 --> 00:26:14,249
having it's not very helpful so that

00:26:12,809 --> 00:26:17,909
notion could extend itself definitely

00:26:14,249 --> 00:26:19,379
into some kind of decomposition I'd love

00:26:17,909 --> 00:26:21,869
to find out what more people think about

00:26:19,379 --> 00:26:24,839
that and what is meaningful for various

00:26:21,869 --> 00:26:26,369
kinds of users I think we're in our last

00:26:24,839 --> 00:26:28,270
minute so we have probably time for one

00:26:26,369 --> 00:26:43,929
more question is that a good answer

00:26:28,270 --> 00:26:46,150
okay yeah I plan to integrate with VC VC

00:26:43,929 --> 00:26:49,059
oh yeah I don't know of a plan to tell

00:26:46,150 --> 00:26:51,540
you the truth let's talk about that

00:26:49,059 --> 00:26:54,429
offline and see what that would mean

00:26:51,540 --> 00:26:55,960
good okay we're gonna probably have to

00:26:54,429 --> 00:26:57,970
wrap this up here I would like to

00:26:55,960 --> 00:26:59,380
mention that not today but tomorrow in

00:26:57,970 --> 00:27:00,790
the afternoon we actually have open

00:26:59,380 --> 00:27:02,770
office hours if you have questions about

00:27:00,790 --> 00:27:05,080
plugins or anything else to do with the

00:27:02,770 --> 00:27:08,180
CLI feel free to drop by and we can have

00:27:05,080 --> 00:27:10,650
a chat yeah thank you guys

00:27:08,180 --> 00:27:10,650

YouTube URL: https://www.youtube.com/watch?v=2Y_JGCw_9zQ


