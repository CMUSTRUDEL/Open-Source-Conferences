Title: Rocking the Lattice: A New Path for Cloud Foundry Applications
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	Rocking the Lattice: A New Path for Cloud Foundry Applications - 04 James Bayer, Colin Humphreys 720p
Captions: 
	00:00:00,000 --> 00:00:04,609
I'm from London I'm very jet-lagged so

00:00:02,520 --> 00:00:11,480
it's very much good night

00:00:04,609 --> 00:00:14,730
how is everyone thank you for that so

00:00:11,480 --> 00:00:17,160
thank you very much for coming along I'm

00:00:14,730 --> 00:00:19,800
going to be talking about rocking the

00:00:17,160 --> 00:00:24,449
lattice about two technologies cloud

00:00:19,800 --> 00:00:29,130
rocker and lattice my name is Colin

00:00:24,449 --> 00:00:30,840
Humphreys I am the CEO of cloud credo we

00:00:29,130 --> 00:00:35,130
are a cloud foundry and Bosch

00:00:30,840 --> 00:00:37,260
consultancy based in London I'm speaking

00:00:35,130 --> 00:00:41,250
with a very good friend of mine mr.

00:00:37,260 --> 00:00:42,750
James bear from pivitol hello and he's

00:00:41,250 --> 00:00:45,120
going to be giving the second half of

00:00:42,750 --> 00:00:47,190
this talk he's going to be trying to use

00:00:45,120 --> 00:00:48,989
my Linux laptop so that's going to be

00:00:47,190 --> 00:00:51,120
very amusing for everybody watching him

00:00:48,989 --> 00:00:55,699
try and move between applications good

00:00:51,120 --> 00:00:59,250
luck with that James thank you okay so I

00:00:55,699 --> 00:01:03,030
want to start this with a question what

00:00:59,250 --> 00:01:07,369
is an application and I feel this is

00:01:03,030 --> 00:01:10,260
very relevant topic for this conference

00:01:07,369 --> 00:01:14,549
so we're talking a lot about pushing

00:01:10,260 --> 00:01:18,659
code and source code but we're also

00:01:14,549 --> 00:01:23,549
talking about containers a lot so what

00:01:18,659 --> 00:01:27,479
actually is an application I think this

00:01:23,549 --> 00:01:29,670
value in pushing source code you push

00:01:27,479 --> 00:01:33,299
the code as you used to doing that CF

00:01:29,670 --> 00:01:37,350
fish you push your code into your Cloud

00:01:33,299 --> 00:01:40,040
Foundry Cloud Foundry then has a look at

00:01:37,350 --> 00:01:44,189
the code combines it with a build pack

00:01:40,040 --> 00:01:45,360
and produces a container so there's

00:01:44,189 --> 00:01:48,540
definitely value in that

00:01:45,360 --> 00:01:53,149
there's also value in pushing containers

00:01:48,540 --> 00:01:58,189
you have a known good tested artifact

00:01:53,149 --> 00:02:01,740
that has all your dependencies baked in

00:01:58,189 --> 00:02:03,920
so what's the right thing to do I don't

00:02:01,740 --> 00:02:03,920
know

00:02:05,110 --> 00:02:12,020
as I just alluded to Cloud Foundry has

00:02:09,140 --> 00:02:15,680
two jobs and these are actually very

00:02:12,020 --> 00:02:18,709
clear distinct jobs as the first job

00:02:15,680 --> 00:02:20,209
which is staging where a texture

00:02:18,709 --> 00:02:23,569
application code combines it with a

00:02:20,209 --> 00:02:26,720
build pack produces a droplet and the

00:02:23,569 --> 00:02:28,250
second job which is running where it

00:02:26,720 --> 00:02:30,050
Shea jewels that droplet to be run

00:02:28,250 --> 00:02:31,550
inside of containers and that's where

00:02:30,050 --> 00:02:33,440
it's scaled and had the services brought

00:02:31,550 --> 00:02:35,180
in behind and routed and all of that

00:02:33,440 --> 00:02:40,370
kind of thing but these are two distinct

00:02:35,180 --> 00:02:42,110
jobs so I pose the question do we want

00:02:40,370 --> 00:02:44,180
to take our applications on the

00:02:42,110 --> 00:02:46,190
left-hand side and I apologize for my

00:02:44,180 --> 00:02:47,900
incredibly bad diagram this is what

00:02:46,190 --> 00:02:51,980
happens when you use Linux as a desktop

00:02:47,900 --> 00:02:54,110
you get diagrams like this so we have

00:02:51,980 --> 00:02:55,760
the application being pushed into cloud

00:02:54,110 --> 00:03:00,250
foundry a droplet is produced and

00:02:55,760 --> 00:03:04,160
deployed so that pathway to production

00:03:00,250 --> 00:03:07,400
versus the application being built

00:03:04,160 --> 00:03:11,019
locally into a container and then the

00:03:07,400 --> 00:03:14,359
container being pushed into production

00:03:11,019 --> 00:03:16,940
so we have what's on the left and what

00:03:14,359 --> 00:03:22,459
cloud rocker and lattice give us is

00:03:16,940 --> 00:03:25,819
what's on the right so we do our staging

00:03:22,459 --> 00:03:29,750
locally and I think this value in doing

00:03:25,819 --> 00:03:34,340
this we get fast feedback about whether

00:03:29,750 --> 00:03:36,350
our application has staged correctly if

00:03:34,340 --> 00:03:41,030
staging fails or an issue with the build

00:03:36,350 --> 00:03:44,359
pack is easy to diagnose it we also

00:03:41,030 --> 00:03:46,549
create this artifact that is known good

00:03:44,359 --> 00:03:48,739
and that artifacts can be moved between

00:03:46,549 --> 00:03:55,579
environments can be moved down your CI

00:03:48,739 --> 00:03:59,269
pipeline so you're thinking stop talking

00:03:55,579 --> 00:04:00,799
: show me how to actually do this so

00:03:59,269 --> 00:04:06,430
let's have a look at how this process

00:04:00,799 --> 00:04:06,430
works firstly installation

00:04:12,370 --> 00:04:15,120
so

00:04:16,980 --> 00:04:29,350
this is a directory with a java

00:04:25,390 --> 00:04:32,430
application inside it this is my java

00:04:29,350 --> 00:04:34,630
app I have there

00:04:32,430 --> 00:04:39,400
very straightforward set of files to

00:04:34,630 --> 00:04:41,560
comprise a HelloWorld Java app now if I

00:04:39,400 --> 00:04:51,220
want to install raka

00:04:41,560 --> 00:04:55,210
I can go get very straightforward let's

00:04:51,220 --> 00:04:58,060
go this installs the go binary so we've

00:04:55,210 --> 00:05:03,300
now got the Rock command-line tool

00:04:58,060 --> 00:05:08,410
available to us we take a look at rock

00:05:03,300 --> 00:05:11,860
this is the API you can use so we see a

00:05:08,410 --> 00:05:14,050
few things we can do there the first one

00:05:11,860 --> 00:05:17,350
we're going to want to do is to download

00:05:14,050 --> 00:05:24,670
the Cloud Foundry base image so we would

00:05:17,350 --> 00:05:26,710
run rock this I'm not going to actually

00:05:24,670 --> 00:05:30,460
run that command because that would pull

00:05:26,710 --> 00:05:32,650
down a 500 megabyte image which is the

00:05:30,460 --> 00:05:35,050
same Cloud Foundry base image that's

00:05:32,650 --> 00:05:37,120
used to power all the Cloud Foundry

00:05:35,050 --> 00:05:40,240
applications running in a normal cloud

00:05:37,120 --> 00:05:42,520
foundry setup I don't trust the

00:05:40,240 --> 00:05:44,140
conference Wi-Fi to let me do that in a

00:05:42,520 --> 00:05:47,190
reasonable period of time so I've

00:05:44,140 --> 00:05:47,190
already done that on this machine

00:05:51,020 --> 00:06:00,350
so I have a Java app I need to have the

00:05:54,560 --> 00:06:04,370
bill pack available to me locally so if

00:06:00,350 --> 00:06:06,590
I run Rock bill packs we can see that

00:06:04,370 --> 00:06:12,550
I've already added the Java belt pack if

00:06:06,590 --> 00:06:17,300
that wasn't here I could just do Rock ad

00:06:12,550 --> 00:06:20,690
bill pack and then a URL where I can go

00:06:17,300 --> 00:06:22,420
and get a bill pack from so the github

00:06:20,690 --> 00:06:24,980
repositories of any of the open source

00:06:22,420 --> 00:06:27,290
cloud foundry bill packs will work here

00:06:24,980 --> 00:06:34,010
and it will pull them down and add your

00:06:27,290 --> 00:06:38,990
bill pack so as we have the bull pack

00:06:34,010 --> 00:06:46,070
ready and the app let's run this very

00:06:38,990 --> 00:06:50,560
simply walk up so what this is actually

00:06:46,070 --> 00:06:54,230
doing now it started a container in

00:06:50,560 --> 00:06:56,300
docker that's running the same staging

00:06:54,230 --> 00:06:57,890
process that would run inside a flower

00:06:56,300 --> 00:07:05,720
foundry but it's doing it on my local

00:06:57,890 --> 00:07:09,680
machine it's using the the Java build

00:07:05,720 --> 00:07:12,440
pack which we've got installed combining

00:07:09,680 --> 00:07:14,120
that with the application code and again

00:07:12,440 --> 00:07:16,400
these logs are exactly the same logs

00:07:14,120 --> 00:07:23,120
that we fired out by the bill pack with

00:07:16,400 --> 00:07:27,380
normal Cloud Foundry staging so that's

00:07:23,120 --> 00:07:29,870
now completed that's running you see

00:07:27,380 --> 00:07:34,630
there the bottom line collect your

00:07:29,870 --> 00:07:34,630
running application at localhost 8080

00:07:48,319 --> 00:07:55,639
so that is the application stage and

00:07:51,050 --> 00:07:58,639
running locally in case you hadn't

00:07:55,639 --> 00:08:05,770
noticed quick look there a little bit of

00:07:58,639 --> 00:08:10,490
unsubtle advertising so we've installed

00:08:05,770 --> 00:08:13,039
the rock the application locally what

00:08:10,490 --> 00:08:15,759
happens if you want to take this

00:08:13,039 --> 00:08:18,319
container away from the local machine

00:08:15,759 --> 00:08:20,419
deploy it to production maybe move it

00:08:18,319 --> 00:08:27,860
down your CI pipeline do something else

00:08:20,419 --> 00:08:31,399
with it so we can do that too very

00:08:27,860 --> 00:08:34,930
simply Rock build and then we give this

00:08:31,399 --> 00:08:34,930
a tag so

00:08:39,070 --> 00:08:42,029
if I could type

00:08:44,500 --> 00:08:50,770
so I've given this my user a docker hub

00:08:48,160 --> 00:08:51,570
and Java test that's the name of the

00:08:50,770 --> 00:08:54,700
application

00:08:51,570 --> 00:08:59,110
this is staging the application and then

00:08:54,700 --> 00:09:04,240
it's going to build us a container which

00:08:59,110 --> 00:09:05,710
we can push up to the docker registry so

00:09:04,240 --> 00:09:09,850
it's done our staging and now it's

00:09:05,710 --> 00:09:13,780
actually creating the container docker

00:09:09,850 --> 00:09:14,940
file in just a second it will start

00:09:13,780 --> 00:09:18,850
running through that doctor file

00:09:14,940 --> 00:09:20,320
building us that container it's able to

00:09:18,850 --> 00:09:23,410
see a series of steps there that have

00:09:20,320 --> 00:09:25,720
been run that are building out our

00:09:23,410 --> 00:09:31,390
container that can be exported and run

00:09:25,720 --> 00:09:33,220
as you see that step number nine is the

00:09:31,390 --> 00:09:37,750
command that actually starts with Java

00:09:33,220 --> 00:09:39,730
application complete with double quotes

00:09:37,750 --> 00:09:43,480
and everything there was a lot of pain

00:09:39,730 --> 00:09:50,100
to actually build now that's working so

00:09:43,480 --> 00:09:50,100
with this we could then run docker push

00:09:50,340 --> 00:09:58,660
so we could push this now to the docker

00:09:55,060 --> 00:10:00,820
registry I'm not going to do that again

00:09:58,660 --> 00:10:05,440
because of conference Wi-Fi but we've

00:10:00,820 --> 00:10:08,430
built our container which we can then

00:10:05,440 --> 00:10:08,430
work with however we choose

00:10:12,230 --> 00:10:18,230
so you can push it to an application to

00:10:14,760 --> 00:10:22,380
a registry so all the code for this is

00:10:18,230 --> 00:10:26,820
available on github and the cloud Creole

00:10:22,380 --> 00:10:29,340
account this is an idea if the direction

00:10:26,820 --> 00:10:32,790
cloud rock is going in so we're going to

00:10:29,340 --> 00:10:34,020
add rocket app sea containers we're

00:10:32,790 --> 00:10:36,240
going to improve the environment

00:10:34,020 --> 00:10:38,370
variable handling because it's not

00:10:36,240 --> 00:10:39,600
exactly the same as our boundary at the

00:10:38,370 --> 00:10:42,390
moment it's an area that needs a little

00:10:39,600 --> 00:10:44,640
bit of work I'd love to have a single

00:10:42,390 --> 00:10:45,810
command push to lattice so you can just

00:10:44,640 --> 00:10:49,200
build the whole thing locally it goes

00:10:45,810 --> 00:10:51,210
straight into a local lattice set up at

00:10:49,200 --> 00:10:53,400
the moment this will only run a single

00:10:51,210 --> 00:10:55,590
application on your local machine so if

00:10:53,400 --> 00:10:56,970
you're doing micro services I won't

00:10:55,590 --> 00:10:58,890
currently work we've got lots of small

00:10:56,970 --> 00:11:00,510
services talking to each other but we're

00:10:58,890 --> 00:11:03,690
working on that that's very simple to

00:11:00,510 --> 00:11:06,810
fix and as you may have noticed my

00:11:03,690 --> 00:11:08,820
laptop is Linux so this works natively I

00:11:06,810 --> 00:11:10,860
don't have a fantastic journey for Mac

00:11:08,820 --> 00:11:14,100
users at the moment I'm providing a

00:11:10,860 --> 00:11:15,660
vagrant virtual machine which gives you

00:11:14,100 --> 00:11:22,590
a Linux like environment and then I'm

00:11:15,660 --> 00:11:25,880
mapping in directories so I'm going to

00:11:22,590 --> 00:11:25,880
hand over to James thank you very much

00:11:26,290 --> 00:11:33,949
[Applause]

00:11:31,010 --> 00:11:35,269
Thank You Colin we were really excited

00:11:33,949 --> 00:11:37,100
to see what Colin was able to do in a

00:11:35,269 --> 00:11:39,230
pretty short amount of time with with

00:11:37,100 --> 00:11:40,730
cloud something it was called something

00:11:39,230 --> 00:11:42,139
else like that cloud rocker right

00:11:40,730 --> 00:11:44,540
it was always cloud rock I felt cloud

00:11:42,139 --> 00:11:48,230
rocker he could type these fun commands

00:11:44,540 --> 00:11:50,120
like rock up and rock this and it was

00:11:48,230 --> 00:11:54,160
pretty pretty fun to type back in the

00:11:50,120 --> 00:11:57,139
old days so it leads to the question of

00:11:54,160 --> 00:11:59,570
what the what can you do with once you

00:11:57,139 --> 00:12:06,680
rock rock up something in rock build and

00:11:59,570 --> 00:12:08,630
what that is lattice well we wanted to

00:12:06,680 --> 00:12:12,170
build something that was incredibly fun

00:12:08,630 --> 00:12:14,209
to use with lattice and something that

00:12:12,170 --> 00:12:16,220
we had heard back from people that had

00:12:14,209 --> 00:12:18,139
tried Cloud Foundry is it was a steep

00:12:16,220 --> 00:12:20,300
hill to climb because the first

00:12:18,139 --> 00:12:22,790
experience the 5 to 10 minute experience

00:12:20,300 --> 00:12:25,880
with Cloud Foundry was all right first

00:12:22,790 --> 00:12:27,500
you get to go learn Bosh and if like me

00:12:25,880 --> 00:12:30,949
back in the day when I first started

00:12:27,500 --> 00:12:34,100
using Cloud Foundry I was working in a

00:12:30,949 --> 00:12:35,779
Java EE server vendor at the day and the

00:12:34,100 --> 00:12:38,750
first thing it said is gem install

00:12:35,779 --> 00:12:40,670
something I'm gem I don't know what's

00:12:38,750 --> 00:12:43,010
that what's a gem because I had only

00:12:40,670 --> 00:12:45,649
ever worked at Java and so you have to

00:12:43,010 --> 00:12:47,690
go learn about all this stuff and your

00:12:45,649 --> 00:12:48,920
several weeks later you might have your

00:12:47,690 --> 00:12:50,510
Cloud Foundry up and running if you're a

00:12:48,920 --> 00:12:52,459
typical Java developer so that's not

00:12:50,510 --> 00:12:55,579
that great of an experience so we wanted

00:12:52,459 --> 00:12:57,380
to bring a 10 to 15 minute experience to

00:12:55,579 --> 00:12:58,610
put Cloud Foundry technologies into

00:12:57,380 --> 00:13:00,709
people's hands and I can tell you that

00:12:58,610 --> 00:13:02,540
we actually in my view succeeded on this

00:13:00,709 --> 00:13:03,639
so laddus is really fun and simple to

00:13:02,540 --> 00:13:06,709
use

00:13:03,639 --> 00:13:08,569
um one way of talking about is it's just

00:13:06,709 --> 00:13:10,069
enough Cloud Foundry we're still

00:13:08,569 --> 00:13:13,670
actually very opinionated on the Cloud

00:13:10,069 --> 00:13:14,779
Foundry team that we think Bosh is the

00:13:13,670 --> 00:13:17,839
way that you can do production

00:13:14,779 --> 00:13:19,040
operations the best and so we still are

00:13:17,839 --> 00:13:20,930
very much a believer in that but if

00:13:19,040 --> 00:13:22,790
you're want to introduce this technology

00:13:20,930 --> 00:13:24,860
to people if someone has a docker image

00:13:22,790 --> 00:13:26,300
and they just want to run it in a cloud

00:13:24,860 --> 00:13:28,579
foundry like an environment with cloud

00:13:26,300 --> 00:13:30,440
foundry technology do they really need

00:13:28,579 --> 00:13:33,850
to start there the answer is no not with

00:13:30,440 --> 00:13:35,760
lattice it's just enough cloud foundry

00:13:33,850 --> 00:13:39,149
where

00:13:35,760 --> 00:13:41,370
the Andrew Schaffer got put put together

00:13:39,149 --> 00:13:42,990
a metaphor for for some people that were

00:13:41,370 --> 00:13:45,300
asking questions about the difference

00:13:42,990 --> 00:13:47,550
between cloud foundry and lattices like

00:13:45,300 --> 00:13:51,120
cloud foundry is a fully operational

00:13:47,550 --> 00:13:52,829
battle station it has every Bell and

00:13:51,120 --> 00:13:55,139
whistle operational experience you need

00:13:52,829 --> 00:13:57,660
it runs on all the virtual machines

00:13:55,139 --> 00:13:58,980
split out and by default and and see if

00:13:57,660 --> 00:14:01,649
release if you do that everything's kind

00:13:58,980 --> 00:14:03,959
of scaleable and if you look at lattice

00:14:01,649 --> 00:14:06,600
it's really a little bit less than that

00:14:03,959 --> 00:14:08,130
it's something that it's probably a

00:14:06,600 --> 00:14:10,769
better metaphor is maybe a starter story

00:14:08,130 --> 00:14:11,519
in a TIE fighter but this one works

00:14:10,769 --> 00:14:14,250
pretty good too

00:14:11,519 --> 00:14:15,690
so lattice doesn't have all the things

00:14:14,250 --> 00:14:17,519
that Cloud Foundry does but that's okay

00:14:15,690 --> 00:14:19,260
because on a laptop you don't need all

00:14:17,519 --> 00:14:22,199
the things that Connery has and you want

00:14:19,260 --> 00:14:24,089
a simpler experience and so when I talk

00:14:22,199 --> 00:14:26,339
about Cloud Foundry by subscript R

00:14:24,089 --> 00:14:28,010
action which is one of the things done

00:14:26,339 --> 00:14:30,600
see reference today in this Diego talk

00:14:28,010 --> 00:14:33,630
you you get Diego so we're gonna get

00:14:30,600 --> 00:14:35,459
clustered scheduling of containers and

00:14:33,630 --> 00:14:37,410
on your laptop you really only need one

00:14:35,459 --> 00:14:38,910
virtual machine for that but you can you

00:14:37,410 --> 00:14:41,069
can scale up and have a cluster so

00:14:38,910 --> 00:14:42,930
everything that Diego can do is going to

00:14:41,069 --> 00:14:45,290
be inside of lattice you get the go

00:14:42,930 --> 00:14:47,579
router so now all the very nice

00:14:45,290 --> 00:14:49,319
dns-based load balancing for your

00:14:47,579 --> 00:14:51,630
applications if you scale up several

00:14:49,319 --> 00:14:53,819
containers will load balance the to

00:14:51,630 --> 00:14:56,670
those and that's really nice you get

00:14:53,819 --> 00:14:58,410
logger gator so you get all the

00:14:56,670 --> 00:15:00,029
streaming logs from your containers if

00:14:58,410 --> 00:15:01,649
you scale up to ten fifteen containers

00:15:00,029 --> 00:15:04,019
for an application you're going to get

00:15:01,649 --> 00:15:05,579
all those in one place and really nicely

00:15:04,019 --> 00:15:07,110
you don't have to deal with bosch is

00:15:05,579 --> 00:15:09,690
your first experience you can just do

00:15:07,110 --> 00:15:12,750
vagrant up or if you have even a digital

00:15:09,690 --> 00:15:14,459
ocean Amazon OpenStack or Google Cloud

00:15:12,750 --> 00:15:16,170
account you can use terraform terraform

00:15:14,459 --> 00:15:19,319
apply and in several minutes have a

00:15:16,170 --> 00:15:21,449
cluster up and running so we won't have

00:15:19,319 --> 00:15:23,699
Bosh and importantly you're missing out

00:15:21,449 --> 00:15:25,589
on a couple of other things we've taken

00:15:23,699 --> 00:15:27,389
away the cloud controller so on your

00:15:25,589 --> 00:15:30,000
local laptop it really doesn't matter

00:15:27,389 --> 00:15:31,620
that whether you have you don't really

00:15:30,000 --> 00:15:33,750
want multi-tenancy you're the only

00:15:31,620 --> 00:15:35,069
tenant your cluster root so you're not

00:15:33,750 --> 00:15:37,560
going to be sharing your laptop of lots

00:15:35,069 --> 00:15:39,569
of people if you're if you have a

00:15:37,560 --> 00:15:41,130
digitalocean account and you spin it up

00:15:39,569 --> 00:15:42,870
to five DMS you don't necessarily want

00:15:41,130 --> 00:15:44,760
to share that with your whole

00:15:42,870 --> 00:15:46,290
organization it's just for a small team

00:15:44,760 --> 00:15:48,569
of people

00:15:46,290 --> 00:15:49,620
you don't need quotas and in the

00:15:48,569 --> 00:15:50,730
marketplace and all the other

00:15:49,620 --> 00:15:52,830
stuff that comes to clock control you

00:15:50,730 --> 00:15:55,800
just want to run your docker image and

00:15:52,830 --> 00:15:57,390
we also took away the UA a so the

00:15:55,800 --> 00:16:00,540
enterprise security and login the OAuth

00:15:57,390 --> 00:16:02,480
server also a Java component that's

00:16:00,540 --> 00:16:05,520
taking that away saves a lot of

00:16:02,480 --> 00:16:06,600
footprint and a hassle as well when you

00:16:05,520 --> 00:16:09,900
just want to get up and running click

00:16:06,600 --> 00:16:11,310
quickly so let's take a look at some of

00:16:09,900 --> 00:16:13,470
the commands that we have so it's it's a

00:16:11,310 --> 00:16:14,880
very similar to to the CF command line

00:16:13,470 --> 00:16:17,610
this is a command line and we'll show

00:16:14,880 --> 00:16:20,100
you an actual demo in a second but you

00:16:17,610 --> 00:16:22,040
look there that well actually let's go

00:16:20,100 --> 00:16:29,540
ahead and get into it let's just use

00:16:22,040 --> 00:16:29,540
Collins example so let's clear this off

00:16:30,230 --> 00:16:41,810
and LTC list you guys see that ok so you

00:16:39,029 --> 00:16:45,380
can see we're just running a couple of

00:16:41,810 --> 00:16:48,180
like containers already on this instance

00:16:45,380 --> 00:16:49,890
and let's go ahead and see if we can

00:16:48,180 --> 00:16:51,750
just run Colin so he you guys saw him he

00:16:49,890 --> 00:16:57,480
called one called Java test right so

00:16:51,750 --> 00:16:59,490
let's type LTC create Java test hat of

00:16:57,480 --> 00:17:04,589
monkeys I have no idea what the heck

00:16:59,490 --> 00:17:05,670
that's all about and Java test so what

00:17:04,589 --> 00:17:08,550
we're doing here is we're taking the

00:17:05,670 --> 00:17:10,490
docker image that already has gone

00:17:08,550 --> 00:17:12,990
through all the build pack processing

00:17:10,490 --> 00:17:14,910
it's already pre-built so we don't have

00:17:12,990 --> 00:17:17,189
to build that on the server side this

00:17:14,910 --> 00:17:20,040
time and there we go now the

00:17:17,189 --> 00:17:23,610
applications up and running let's go

00:17:20,040 --> 00:17:25,500
ahead and I forget how you did this

00:17:23,610 --> 00:17:28,890
collar boy if there's a Linux laptop

00:17:25,500 --> 00:17:32,520
hilarity is coming out oh yeah right my

00:17:28,890 --> 00:17:34,380
click oh right click yeah copy link

00:17:32,520 --> 00:17:39,780
address oh my goodness yeah and do it

00:17:34,380 --> 00:17:44,309
but pack programming control T yeah

00:17:39,780 --> 00:17:46,800
control what is it obvious there you go

00:17:44,309 --> 00:17:50,429
so it's the same app that the Colin

00:17:46,800 --> 00:17:52,230
showed you in but this can be run

00:17:50,429 --> 00:17:54,300
against a scheduler I mean and so you

00:17:52,230 --> 00:17:59,580
can be running it against lots of last

00:17:54,300 --> 00:18:00,780
containers so let's do LTC visualize so

00:17:59,580 --> 00:18:02,130
there you can see I'm running on one

00:18:00,780 --> 00:18:03,030
cell and I've got three containers

00:18:02,130 --> 00:18:06,180
running

00:18:03,030 --> 00:18:08,790
if I want to scale this up LTC scale

00:18:06,180 --> 00:18:12,900
Java test let's go up to three

00:18:08,790 --> 00:18:17,580
containers and scaling this up

00:18:12,900 --> 00:18:18,600
it just takes just a moment and what

00:18:17,580 --> 00:18:22,140
we're going to be doing is basically

00:18:18,600 --> 00:18:23,940
Diego does the scheduling for you just

00:18:22,140 --> 00:18:27,930
like auntie showed earlier in his talk

00:18:23,940 --> 00:18:32,220
so that works so you do LTC status Java

00:18:27,930 --> 00:18:33,630
test and now we're running those three

00:18:32,220 --> 00:18:35,460
separate images it's kind of interesting

00:18:33,630 --> 00:18:36,960
here you can see how we do the port

00:18:35,460 --> 00:18:38,850
mapping for you so all these containers

00:18:36,960 --> 00:18:41,310
are listening on 8080 inside but we're

00:18:38,850 --> 00:18:42,960
getting different ports assigned to them

00:18:41,310 --> 00:18:44,700
on on the host that they're running and

00:18:42,960 --> 00:18:48,990
then the go router is automatically

00:18:44,700 --> 00:18:50,460
doing the load balancing for you so it's

00:18:48,990 --> 00:18:54,710
a pretty straightforward to do that

00:18:50,460 --> 00:18:54,710
let's go back to the presentation here

00:18:56,300 --> 00:19:02,970
we also wanted to put a little bit of a

00:19:00,390 --> 00:19:05,070
UI on top of lattice and so pivotal has

00:19:02,970 --> 00:19:07,470
been working on something called x-ray

00:19:05,070 --> 00:19:09,000
and let's go ahead and go look that you

00:19:07,470 --> 00:19:10,770
saw that was one of the applications

00:19:09,000 --> 00:19:15,360
that was running on laughs when I first

00:19:10,770 --> 00:19:17,940
typed LTC list and so what Colin did was

00:19:15,360 --> 00:19:19,140
he used cloud rocker it's just a no js'

00:19:17,940 --> 00:19:21,600
app this one we're going to show you

00:19:19,140 --> 00:19:23,490
here this thing called x-ray so Colin

00:19:21,600 --> 00:19:25,140
create a docker image out of x-ray and

00:19:23,490 --> 00:19:29,070
it's just another app that you can push

00:19:25,140 --> 00:19:32,850
on top of less so going back let's go

00:19:29,070 --> 00:19:40,650
check at the LTC list here and I'll just

00:19:32,850 --> 00:19:45,770
do status x-ray and there is what I want

00:19:40,650 --> 00:19:45,770
to do boy Colin you and your Linux

00:19:46,690 --> 00:19:56,320
control shift say ctrl shift Z oh boy

00:19:50,290 --> 00:19:59,890
it's Asik okay there you go ctrl T look

00:19:56,320 --> 00:20:02,560
I have this I'm getting good mm-hmm so

00:19:59,890 --> 00:20:04,960
this is a really a simple user interface

00:20:02,560 --> 00:20:06,580
on top so you can just do some some

00:20:04,960 --> 00:20:09,490
simple things to visualize what's going

00:20:06,580 --> 00:20:10,930
on in your lattice cluster so if you

00:20:09,490 --> 00:20:12,460
have more cells you can see though they

00:20:10,930 --> 00:20:14,560
would be scaled out underneath here and

00:20:12,460 --> 00:20:16,480
you can have availability zones and

00:20:14,560 --> 00:20:18,580
everything so if we were running on a

00:20:16,480 --> 00:20:19,840
fully AWS image we would have that fill

00:20:18,580 --> 00:20:22,290
up the page with a whole bunch of stuff

00:20:19,840 --> 00:20:28,230
and do a demo but if I go here and just

00:20:22,290 --> 00:20:31,300
LTC scale Java test1 to get rid of stuff

00:20:28,230 --> 00:20:33,700
you'll see that quickly already scaled

00:20:31,300 --> 00:20:35,830
down to one container there so if I

00:20:33,700 --> 00:20:37,690
hover over here you see Java tests and

00:20:35,830 --> 00:20:39,340
these are the Ruby sanity and there's

00:20:37,690 --> 00:20:42,160
the x-ray process itself it's monitoring

00:20:39,340 --> 00:20:44,500
itself so x-ray is something we're gonna

00:20:42,160 --> 00:20:46,510
add new capabilities to over time it

00:20:44,500 --> 00:20:48,400
what we really wanted to do was

00:20:46,510 --> 00:20:49,540
visualize what's happening in your

00:20:48,400 --> 00:20:51,240
lattice cluster so you could see it

00:20:49,540 --> 00:20:55,650
really easily and this is an open source

00:20:51,240 --> 00:20:55,650
project that you can also get on github

00:20:55,680 --> 00:21:00,850
and so what have I seen at pivotal for

00:20:59,530 --> 00:21:02,680
people using lattice I've seen an

00:21:00,850 --> 00:21:04,000
explosion of interest in making the the

00:21:02,680 --> 00:21:07,180
technology much more accessible to

00:21:04,000 --> 00:21:09,520
developers so especially the spring team

00:21:07,180 --> 00:21:11,980
has done a lot of neat stuff with it so

00:21:09,520 --> 00:21:15,130
you might have seen some talks here from

00:21:11,980 --> 00:21:17,140
Matt Stein and some others on using

00:21:15,130 --> 00:21:20,190
spring cloud and some of the Netflix OSS

00:21:17,140 --> 00:21:22,660
things so imagine like a dynamic

00:21:20,190 --> 00:21:24,610
configuration server where you're

00:21:22,660 --> 00:21:26,740
distributing configuration to your

00:21:24,610 --> 00:21:28,000
containers that are running but you want

00:21:26,740 --> 00:21:29,890
to change something dynamically let's

00:21:28,000 --> 00:21:32,440
say like a log level or something like

00:21:29,890 --> 00:21:35,260
that that's a component you can run with

00:21:32,440 --> 00:21:37,270
spring cloud as a container on lattice

00:21:35,260 --> 00:21:40,600
and then have another app use that if

00:21:37,270 --> 00:21:42,370
you want to use histor --ax and some of

00:21:40,600 --> 00:21:44,020
the other load balancing technologies

00:21:42,370 --> 00:21:45,640
that's also built in there the spring

00:21:44,020 --> 00:21:47,710
clouds done some team has done some

00:21:45,640 --> 00:21:50,080
really neat stuff with that the spring

00:21:47,710 --> 00:21:53,530
batch team has made it such that you can

00:21:50,080 --> 00:21:55,590
now expose a new Diego primitive Diego

00:21:53,530 --> 00:21:58,060
has this primitive call that task a task

00:21:55,590 --> 00:21:59,599
is actually how applications are staged

00:21:58,060 --> 00:22:02,329
it's not a long-running process

00:21:59,599 --> 00:22:04,729
that's a one-time batch process that

00:22:02,329 --> 00:22:06,259
will have a lifetime and then end and so

00:22:04,729 --> 00:22:08,629
spring batches this technology a lot of

00:22:06,259 --> 00:22:11,089
enterprises are using and so they've

00:22:08,629 --> 00:22:12,379
hooked up spring batch to lattice so

00:22:11,089 --> 00:22:14,959
that every time you want to run in a

00:22:12,379 --> 00:22:16,609
batch job it schedules a Diego task so

00:22:14,959 --> 00:22:19,190
now you can have your your tasks in

00:22:16,609 --> 00:22:21,440
lattice being scheduled by spring batch

00:22:19,190 --> 00:22:22,849
which is pretty cool and the spring XD

00:22:21,440 --> 00:22:25,940
team has done some really neat demos

00:22:22,849 --> 00:22:27,529
we're scaling up your spring XD streams

00:22:25,940 --> 00:22:28,999
for these are streams of data coming

00:22:27,529 --> 00:22:31,729
from things like the Twitter firehose

00:22:28,999 --> 00:22:33,200
and other places and then piping them to

00:22:31,729 --> 00:22:36,409
other things and doing some processing

00:22:33,200 --> 00:22:37,879
on those every time you run a spring XD

00:22:36,409 --> 00:22:39,109
stream it will create a new diego task

00:22:37,879 --> 00:22:42,759
for you and they've got that working

00:22:39,109 --> 00:22:46,339
with lattice and this one is really cool

00:22:42,759 --> 00:22:48,549
mark croft might bless you up here and

00:22:46,339 --> 00:22:51,769
the team from the New York team from

00:22:48,549 --> 00:22:54,049
pivotal and then there's others involved

00:22:51,769 --> 00:22:55,639
in CenturyLink and HP announced some

00:22:54,049 --> 00:22:57,619
things as well they're contributing some

00:22:55,639 --> 00:23:00,379
things for Windows you can actually run

00:22:57,619 --> 00:23:01,820
Windows containers with lattice as well

00:23:00,379 --> 00:23:02,929
so just like how you have Linux

00:23:01,820 --> 00:23:05,509
applications was what we were just

00:23:02,929 --> 00:23:08,839
demoing Windows applications can run

00:23:05,509 --> 00:23:11,299
side by side with the Linux applications

00:23:08,839 --> 00:23:12,919
and let's see if we can go see a JSON

00:23:11,299 --> 00:23:15,229
example that's approved to you and I'm

00:23:12,919 --> 00:23:16,969
not making that do I still have that up

00:23:15,229 --> 00:23:20,079
here Cullen or is that close now

00:23:16,969 --> 00:23:23,469
is it in the if you tab to the next one

00:23:20,079 --> 00:23:28,089
you'll tap to the Alta okay

00:23:23,469 --> 00:23:28,089
this one yeah all right

00:23:29,320 --> 00:23:36,549
there you go so you're actually seeing

00:23:32,409 --> 00:23:38,830
this is a an output of the long-running

00:23:36,549 --> 00:23:41,110
process that we have a marked cluster

00:23:38,830 --> 00:23:42,940
that has the Windows server and a Linux

00:23:41,110 --> 00:23:45,549
server running side-by-side and you see

00:23:42,940 --> 00:23:48,880
the roon FS is the Windows Server 2012

00:23:45,549 --> 00:23:53,190
instance and so you can plug in these

00:23:48,880 --> 00:23:56,309
Linux images and Windows servers

00:23:53,190 --> 00:23:58,779
side-by-side and schedule the containers

00:23:56,309 --> 00:24:03,100
for both Linux apps and Windows apps in

00:23:58,779 --> 00:24:05,200
the same lattice technology and the last

00:24:03,100 --> 00:24:08,379
thing I want to talk a little bit about

00:24:05,200 --> 00:24:13,000
is we have a team doing some some

00:24:08,379 --> 00:24:15,190
hacking on on Diego itself when we're

00:24:13,000 --> 00:24:17,799
working with trying new things in cloud

00:24:15,190 --> 00:24:19,870
foundry we found it's really fun to just

00:24:17,799 --> 00:24:22,299
start with something small like Diego

00:24:19,870 --> 00:24:24,549
and so we've had teams like that are

00:24:22,299 --> 00:24:28,509
sending custom metrics to the logger

00:24:24,549 --> 00:24:29,980
Gator fire hose from their application

00:24:28,509 --> 00:24:31,750
so I call this the few metrics so

00:24:29,980 --> 00:24:32,980
imagine you're tracking signups or

00:24:31,750 --> 00:24:35,519
you're tracking some other thing that's

00:24:32,980 --> 00:24:37,450
not just about your memory or your a

00:24:35,519 --> 00:24:39,220
standard metric that comes out of your

00:24:37,450 --> 00:24:40,870
container it's something that that's

00:24:39,220 --> 00:24:42,940
related to a business aspect of the

00:24:40,870 --> 00:24:45,340
application you can send that to logger

00:24:42,940 --> 00:24:47,919
Gator and lattis and there's a demo of a

00:24:45,340 --> 00:24:49,419
team consuming that off the firehose as

00:24:47,919 --> 00:24:52,210
well so that's pretty cool now you can

00:24:49,419 --> 00:24:54,429
have your applications sharing metrics

00:24:52,210 --> 00:24:58,960
that they're producing and having other

00:24:54,429 --> 00:25:01,830
applications consume those and with that

00:24:58,960 --> 00:25:03,779
just show you that we have a proper

00:25:01,830 --> 00:25:07,000
mailing list on the Cloud Foundry

00:25:03,779 --> 00:25:08,919
community so CF lattice at list clapping

00:25:07,000 --> 00:25:10,059
org there's a Twitter handle there

00:25:08,919 --> 00:25:12,129
there's some really cool lattice

00:25:10,059 --> 00:25:13,629
t-shirts that Andrew Schafer has

00:25:12,129 --> 00:25:15,429
available if you want to I want to get

00:25:13,629 --> 00:25:17,559
those and then you can also join the and

00:25:15,429 --> 00:25:21,039
contribute on the project it's a it's an

00:25:17,559 --> 00:25:24,960
incubation right now and think we're

00:25:21,039 --> 00:25:24,960
ready for questions okay

00:25:26,110 --> 00:25:29,560
any questions

00:25:32,020 --> 00:25:35,460
it's two over there okay

00:25:40,680 --> 00:25:45,960
great question so the question is if you

00:25:43,440 --> 00:25:46,860
wanted to do something in lattice and

00:25:45,960 --> 00:25:48,930
you get it working there how

00:25:46,860 --> 00:25:51,930
translatable is that to getting it

00:25:48,930 --> 00:25:55,440
working in Cloud Foundry so today

00:25:51,930 --> 00:25:57,030
lattice only speaks docker images what

00:25:55,440 --> 00:26:00,059
we're working on and we want to be able

00:25:57,030 --> 00:26:03,240
to have lattice understand droplets as

00:26:00,059 --> 00:26:05,580
well so one of the things that cloud

00:26:03,240 --> 00:26:08,340
rocker does is produce a full docker

00:26:05,580 --> 00:26:09,750
image from your application source code

00:26:08,340 --> 00:26:11,910
well what if we went the intermediary

00:26:09,750 --> 00:26:13,320
way this is if you look to what Heroku

00:26:11,910 --> 00:26:15,840
did last week they kind of did the same

00:26:13,320 --> 00:26:18,390
kind of thing where their CLI tooling

00:26:15,840 --> 00:26:19,770
will you run a docker image locally that

00:26:18,390 --> 00:26:21,420
when you push that to Heroku they

00:26:19,770 --> 00:26:23,640
actually just upload the droplet part

00:26:21,420 --> 00:26:25,050
they call it a slug so we're looking at

00:26:23,640 --> 00:26:26,250
something like that that way that if

00:26:25,050 --> 00:26:27,690
you're a developer and you don't want to

00:26:26,250 --> 00:26:28,950
know anything about docker because you

00:26:27,690 --> 00:26:30,420
just have your Java code and you don't

00:26:28,950 --> 00:26:31,679
want to think about docker because

00:26:30,420 --> 00:26:33,900
that's one more thing you got to think

00:26:31,679 --> 00:26:35,760
about we want a path for that to works

00:26:33,900 --> 00:26:37,380
well on lattice as well and then that's

00:26:35,760 --> 00:26:39,179
also translatable to Cloud Foundry so

00:26:37,380 --> 00:26:40,559
that it's something like that where you

00:26:39,179 --> 00:26:42,450
can just take your application source

00:26:40,559 --> 00:26:43,800
code get it running on lattice and then

00:26:42,450 --> 00:26:45,420
also get that running on Cloud Foundry

00:26:43,800 --> 00:26:48,230
and that should be a seamless experiment

00:26:45,420 --> 00:26:48,230
experience

00:26:55,470 --> 00:27:00,660
could you please elaborate on the matrix

00:26:58,410 --> 00:27:03,510
that you can collect from the container

00:27:00,660 --> 00:27:07,950
I couldn't hear that

00:27:03,510 --> 00:27:16,710
Virginie can someone else repeat the

00:27:07,950 --> 00:27:18,360
question really is better no so could

00:27:16,710 --> 00:27:21,840
you please elaborate on the matrix that

00:27:18,360 --> 00:27:26,510
you can collect from with the lattice

00:27:21,840 --> 00:27:31,200
from the Container matrix

00:27:26,510 --> 00:27:34,740
Ola bride nemetrix okay so let me see

00:27:31,200 --> 00:27:38,430
like there's some the metrics coming out

00:27:34,740 --> 00:27:41,730
of the lager Gator firehose basically

00:27:38,430 --> 00:27:43,200
right so with Diego we're sending the

00:27:41,730 --> 00:27:45,270
container metrics that use if you ever

00:27:43,200 --> 00:27:47,400
saw the stats endpoint in the cloud

00:27:45,270 --> 00:27:49,110
controller for applications it'll show

00:27:47,400 --> 00:27:50,280
you the CPU the memory in the disk

00:27:49,110 --> 00:27:53,430
footprint so you're going to get those

00:27:50,280 --> 00:27:55,950
for free with by just listening on the

00:27:53,430 --> 00:27:58,500
log of Gator firehose what another team

00:27:55,950 --> 00:28:01,440
has done is let's they started producing

00:27:58,500 --> 00:28:04,460
metrics directly to logger Gator from

00:28:01,440 --> 00:28:07,830
their application and so that would be

00:28:04,460 --> 00:28:09,360
custom metric that they make up and so

00:28:07,830 --> 00:28:10,710
let's say it's a number of signups in

00:28:09,360 --> 00:28:12,210
your application you want to track or

00:28:10,710 --> 00:28:14,610
the amount of revenue you've sold or

00:28:12,210 --> 00:28:16,440
something that day you can send that

00:28:14,610 --> 00:28:17,970
metric along the firehose and it's a

00:28:16,440 --> 00:28:20,550
structured thing as opposed to a log

00:28:17,970 --> 00:28:22,740
message which is going to be just a you

00:28:20,550 --> 00:28:25,320
know kind of an opaque thing you can set

00:28:22,740 --> 00:28:26,610
a structured value that downstream

00:28:25,320 --> 00:28:28,260
applications can interpret and

00:28:26,610 --> 00:28:30,960
understand exactly that value oh this is

00:28:28,260 --> 00:28:33,210
a gauge or it's a value or it's an error

00:28:30,960 --> 00:28:34,560
of some kind right that's the kind of

00:28:33,210 --> 00:28:35,970
thing I'm talking about as being able to

00:28:34,560 --> 00:28:40,170
send those structured metrics down the

00:28:35,970 --> 00:28:43,800
pipeline okay I think we're about done

00:28:40,170 --> 00:28:44,260
yeah all right thanks so much thank you

00:28:43,800 --> 00:28:47,589
sue your time

00:28:44,260 --> 00:28:47,589

YouTube URL: https://www.youtube.com/watch?v=lAbho46INYc


