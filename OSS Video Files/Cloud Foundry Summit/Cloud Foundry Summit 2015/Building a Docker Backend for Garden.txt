Title: Building a Docker Backend for Garden
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	Building a Docker Backend for Garden - 02 Julian Friedman 720p
Captions: 
	00:00:00,060 --> 00:00:08,189
okay so um hello

00:00:05,160 --> 00:00:12,630
my name's Julian Friedman I work for IBM

00:00:08,189 --> 00:00:14,190
on the garden project a super excited to

00:00:12,630 --> 00:00:16,230
be here this this is really exciting

00:00:14,190 --> 00:00:18,900
it's awesome to see so many familiar

00:00:16,230 --> 00:00:22,619
faces I work out at the UK most of the

00:00:18,900 --> 00:00:25,160
time so it's always nice to see people

00:00:22,619 --> 00:00:28,519
who are normally to see on video screens

00:00:25,160 --> 00:00:34,829
we're going to talk a bit today about

00:00:28,519 --> 00:00:38,670
garden which is cloud foundry container

00:00:34,829 --> 00:00:40,649
technology anyone who is at auntie's

00:00:38,670 --> 00:00:43,550
talk which is awesome

00:00:40,649 --> 00:00:45,329
will already know a bit about

00:00:43,550 --> 00:00:47,160
containerization why we use for

00:00:45,329 --> 00:00:48,539
sanitation what it is what Diego's

00:00:47,160 --> 00:00:50,879
looking to get out of it so I'm not

00:00:48,539 --> 00:00:53,760
going to talk too much about that and

00:00:50,879 --> 00:00:55,399
I'm just going to apologize if there's

00:00:53,760 --> 00:00:57,449
some missing context about containers

00:00:55,399 --> 00:01:01,980
today I'm going to try and answer three

00:00:57,449 --> 00:01:03,510
questions so question one what are

00:01:01,980 --> 00:01:08,610
containers what are we trying to achieve

00:01:03,510 --> 00:01:12,570
by containerization question two what if

00:01:08,610 --> 00:01:15,479
God and what is docker what are the

00:01:12,570 --> 00:01:16,970
differences and why do we use garden

00:01:15,479 --> 00:01:20,820
rather than docker

00:01:16,970 --> 00:01:23,700
and then question three can we use

00:01:20,820 --> 00:01:27,060
docket instead of garden and the spoiler

00:01:23,700 --> 00:01:29,610
is yes I'm going to demo doing that we

00:01:27,060 --> 00:01:32,610
have a back-end for garden called docker

00:01:29,610 --> 00:01:35,610
I'm gonna show that working and then I'm

00:01:32,610 --> 00:01:39,810
gonna ruin the one more thing the one

00:01:35,610 --> 00:01:42,630
more thing is should we replace docker

00:01:39,810 --> 00:01:45,960
with garden with docker and that's a

00:01:42,630 --> 00:01:47,759
much harder question I'm going to give a

00:01:45,960 --> 00:01:49,229
little bit of my view but most I'm just

00:01:47,759 --> 00:01:51,149
gonna give you ammunition for the

00:01:49,229 --> 00:01:57,299
discussion I think is that I'm going to

00:01:51,149 --> 00:01:59,399
give some facts so containers has anyone

00:01:57,299 --> 00:02:02,180
heard of containers as they come up at

00:01:59,399 --> 00:02:02,180
all containers

00:02:02,810 --> 00:02:11,790
yes the containers are pretty cool

00:02:07,009 --> 00:02:14,160
containers have got a lot of attention

00:02:11,790 --> 00:02:15,900
right but what actually are they well

00:02:14,160 --> 00:02:18,120
the more interesting question isn't what

00:02:15,900 --> 00:02:20,580
are they it's what we using them for

00:02:18,120 --> 00:02:25,170
right what are containers for right I

00:02:20,580 --> 00:02:27,000
think there's about four things first

00:02:25,170 --> 00:02:28,950
one is is this idea of packaging right

00:02:27,000 --> 00:02:30,959
that's what's that's the docker use case

00:02:28,950 --> 00:02:32,880
right that's this this idea that we can

00:02:30,959 --> 00:02:34,950
have reproducible images that we're

00:02:32,880 --> 00:02:38,730
going to ship over same image what's

00:02:34,950 --> 00:02:40,260
here as works here and so on the second

00:02:38,730 --> 00:02:43,410
one is reproducibility is placed into

00:02:40,260 --> 00:02:44,580
packaging I'm going to run my finger on

00:02:43,410 --> 00:02:45,989
the remote me it's going to work in the

00:02:44,580 --> 00:02:50,220
same way I'm going to know how that

00:02:45,989 --> 00:02:52,260
occurs thirdly super important isolation

00:02:50,220 --> 00:02:55,860
security if I'm running lots of

00:02:52,260 --> 00:02:57,330
containers on a particular machine I

00:02:55,860 --> 00:02:59,819
want to make sure that that's secure

00:02:57,330 --> 00:03:00,840
that each one is isolated so I can with

00:02:59,819 --> 00:03:03,390
a lot of that patience they don't

00:03:00,840 --> 00:03:06,480
interfere with each other and this loads

00:03:03,390 --> 00:03:09,090
more and on seas talk I'm sure that'll

00:03:06,480 --> 00:03:11,730
be available on the interwebs and the

00:03:09,090 --> 00:03:14,340
fourth one is cheap ability achievement

00:03:11,730 --> 00:03:15,930
us something right we can run low we get

00:03:14,340 --> 00:03:18,540
the density of them right the other

00:03:15,930 --> 00:03:21,000
thing which is cheap in density and the

00:03:18,540 --> 00:03:23,700
thing to notice is some of these bits

00:03:21,000 --> 00:03:27,930
are more important for some people than

00:03:23,700 --> 00:03:29,190
other bits right so from the for the for

00:03:27,930 --> 00:03:30,690
the docker use case what's really

00:03:29,190 --> 00:03:34,140
important is this awesome packaging

00:03:30,690 --> 00:03:35,640
workflow reproducibility workflow that's

00:03:34,140 --> 00:03:37,230
the developer experience that's beyond

00:03:35,640 --> 00:03:40,260
my laptop right that's why I care about

00:03:37,230 --> 00:03:43,019
if you're building a pass that's a

00:03:40,260 --> 00:03:44,760
multi-tenant platform environment what I

00:03:43,019 --> 00:03:47,010
really care about is I can do this in a

00:03:44,760 --> 00:03:49,829
secure way so I can run the images and

00:03:47,010 --> 00:03:52,079
be confident but I can run them in

00:03:49,829 --> 00:03:54,420
production scale them not have people

00:03:52,079 --> 00:03:58,410
getting other people's data and so on

00:03:54,420 --> 00:03:59,850
and do that our good cost right and and

00:03:58,410 --> 00:04:01,320
inevitably there will always be

00:03:59,850 --> 00:04:05,310
trade-offs when you're building systems

00:04:01,320 --> 00:04:08,190
right and the question is how do you

00:04:05,310 --> 00:04:09,419
make these trade-offs right so garvin is

00:04:08,190 --> 00:04:12,910
very much

00:04:09,419 --> 00:04:15,130
built to try and emphasize

00:04:12,910 --> 00:04:16,390
the later things but it turns out that

00:04:15,130 --> 00:04:21,910
we can actually enable the doctor use

00:04:16,390 --> 00:04:24,490
cases as one so there's some obvious

00:04:21,910 --> 00:04:26,020
follow-on questions right how hard is

00:04:24,490 --> 00:04:28,540
creating a container right what we're

00:04:26,020 --> 00:04:30,700
actually talking about here well it

00:04:28,540 --> 00:04:34,060
turns out not actually that hard right

00:04:30,700 --> 00:04:35,710
for certain values of hard right it's

00:04:34,060 --> 00:04:38,740
actually most of the stuff is there in

00:04:35,710 --> 00:04:40,480
the kernel the kernel gives you as on

00:04:38,740 --> 00:04:43,780
she said isolation the kernel gives you

00:04:40,480 --> 00:04:46,240
name spacing so a lot of what containers

00:04:43,780 --> 00:04:48,820
technology really does is provide an API

00:04:46,240 --> 00:04:50,200
to actually use those in a consumable

00:04:48,820 --> 00:04:53,110
way right the kernel gives you the

00:04:50,200 --> 00:04:56,050
primitives and most of what docker or

00:04:53,110 --> 00:04:58,450
garden or rockets or any of the other

00:04:56,050 --> 00:05:01,720
things are doing is providing a way of

00:04:58,450 --> 00:05:04,420
using those capabilities so the garden

00:05:01,720 --> 00:05:06,340
way of doing that is to provide a

00:05:04,420 --> 00:05:08,620
programming API for those capabilities

00:05:06,340 --> 00:05:11,260
because really Gardens use cases to

00:05:08,620 --> 00:05:13,030
power platforms as a service and things

00:05:11,260 --> 00:05:15,610
like that so we have an API driven

00:05:13,030 --> 00:05:18,340
approach garden doesn't have a CLI for

00:05:15,610 --> 00:05:19,540
example garden has an internal API but

00:05:18,340 --> 00:05:21,130
that's not what we treat this our

00:05:19,540 --> 00:05:24,160
external interface we treat that same

00:05:21,130 --> 00:05:25,600
interface as the rich client way the

00:05:24,160 --> 00:05:27,070
bigger question is how much work is

00:05:25,600 --> 00:05:29,080
creating a production-ready container

00:05:27,070 --> 00:05:32,680
right I'm something that we can actually

00:05:29,080 --> 00:05:34,450
trust to run our applications so using

00:05:32,680 --> 00:05:37,690
these things together that's easy but

00:05:34,450 --> 00:05:39,880
finding the rights that finding ways to

00:05:37,690 --> 00:05:43,870
run that securely so you trust it and

00:05:39,880 --> 00:05:45,370
scale ibly that's pretty hard right and

00:05:43,870 --> 00:05:46,930
even more finding the right abstractions

00:05:45,370 --> 00:05:48,490
how you expose this to users in a way

00:05:46,930 --> 00:05:50,050
that makes sense she's actually really

00:05:48,490 --> 00:05:53,320
behaviors problem not gardeners problem

00:05:50,050 --> 00:05:55,090
that is super hard right those are the

00:05:53,320 --> 00:05:57,970
actual challenges to bit around how you

00:05:55,090 --> 00:06:01,750
actually run a container it's not that

00:05:57,970 --> 00:06:05,200
much tough so I feel like I have to put

00:06:01,750 --> 00:06:07,150
in the history lesson even though it

00:06:05,200 --> 00:06:08,830
doesn't really matter right and now

00:06:07,150 --> 00:06:13,960
gonna go we were there first basically

00:06:08,830 --> 00:06:15,970
right wouldn't actually predates the

00:06:13,960 --> 00:06:18,130
other two so the obvious question is why

00:06:15,970 --> 00:06:18,670
did you build worden right when dr was

00:06:18,130 --> 00:06:20,470
out there

00:06:18,670 --> 00:06:22,180
the answer is docker wasn't out there so

00:06:20,470 --> 00:06:24,610
we've got worden right and then later

00:06:22,180 --> 00:06:26,469
docker came out

00:06:24,610 --> 00:06:29,469
we've now

00:06:26,469 --> 00:06:31,269
warden we written a lot of components in

00:06:29,469 --> 00:06:32,819
goes that's why it's called garden but

00:06:31,269 --> 00:06:38,769
it's actually mostly the same code base

00:06:32,819 --> 00:06:41,379
underneath and really is it isn't really

00:06:38,769 --> 00:06:44,830
that important right there yeah this is

00:06:41,379 --> 00:06:50,050
where we are now but it is worth saying

00:06:44,830 --> 00:06:51,519
and you might have heard of docker it is

00:06:50,050 --> 00:06:53,379
worth saying right that there is a

00:06:51,519 --> 00:06:55,209
difference in the use case between these

00:06:53,379 --> 00:06:58,029
two right so if we compare docker versus

00:06:55,209 --> 00:07:02,379
garden the original use case of these of

00:06:58,029 --> 00:07:04,449
these two garden was always built to run

00:07:02,379 --> 00:07:06,939
lots of containers in production in a

00:07:04,449 --> 00:07:09,069
multi-tenant environment right and

00:07:06,939 --> 00:07:12,129
actually when it was first built his

00:07:09,069 --> 00:07:13,929
main use case was running one root

00:07:12,129 --> 00:07:16,119
surface right so each containers

00:07:13,929 --> 00:07:18,309
basically run the same roots FS we lost

00:07:16,119 --> 00:07:21,309
that case on top where it's Dockers use

00:07:18,309 --> 00:07:22,599
case this was originally less about the

00:07:21,309 --> 00:07:25,149
mud cell environment I think it's fair

00:07:22,599 --> 00:07:26,229
to say but also about each container

00:07:25,149 --> 00:07:28,899
might have a completely different

00:07:26,229 --> 00:07:33,399
resurface with managing of layering and

00:07:28,899 --> 00:07:35,319
images and so forth and there's a

00:07:33,399 --> 00:07:37,360
there's there's a pretty big difference

00:07:35,319 --> 00:07:38,919
right between when you're trying to run

00:07:37,360 --> 00:07:42,189
a single container on a laptop which is

00:07:38,919 --> 00:07:43,240
a hard problem versus it's like loads of

00:07:42,189 --> 00:07:48,089
containers and trying to orchestrate

00:07:43,240 --> 00:07:50,889
those and run those on a big system but

00:07:48,089 --> 00:07:53,019
you have to notice right these use cases

00:07:50,889 --> 00:07:56,469
are coming together right it's pretty

00:07:53,019 --> 00:07:57,969
clear the lattice is very interested in

00:07:56,469 --> 00:07:59,319
providing a single machine developer

00:07:57,969 --> 00:08:01,209
experience now and can really do that

00:07:59,319 --> 00:08:04,839
and dr. is increasingly interested in

00:08:01,209 --> 00:08:08,349
how we build big systems so these two

00:08:04,839 --> 00:08:10,899
things coming together so give me a high

00:08:08,349 --> 00:08:12,279
level view of garden right like what

00:08:10,899 --> 00:08:15,009
what does garden looks like what's

00:08:12,279 --> 00:08:18,849
what's the garden at fraction so number

00:08:15,009 --> 00:08:22,809
one garden is a VM model right so garden

00:08:18,849 --> 00:08:24,339
containers look like VMs inside a garden

00:08:22,809 --> 00:08:25,929
container it seems like we're running a

00:08:24,339 --> 00:08:28,629
little VM and that's actually super

00:08:25,929 --> 00:08:30,189
useful because we have projects like

00:08:28,629 --> 00:08:31,929
Bosch lights which people might have

00:08:30,189 --> 00:08:33,009
used which enables you to simulate

00:08:31,929 --> 00:08:34,630
running a whole Cloud Foundry

00:08:33,009 --> 00:08:37,240
environment on a virtual machine and

00:08:34,630 --> 00:08:38,979
that uses worden containers underneath

00:08:37,240 --> 00:08:39,950
to spin up what look like loss of

00:08:38,979 --> 00:08:43,070
virtual machines that

00:08:39,950 --> 00:08:45,260
like a production system right it's also

00:08:43,070 --> 00:08:46,640
used for the bill pack applications so

00:08:45,260 --> 00:08:49,310
for bill pack applications who you want

00:08:46,640 --> 00:08:51,650
to be able to throw in that compiled

00:08:49,310 --> 00:08:53,930
bill pack into a container run it run

00:08:51,650 --> 00:08:57,260
health checks inside it and so on and

00:08:53,930 --> 00:08:59,090
make them appear like a VM right so to

00:08:57,260 --> 00:09:01,400
do that in garden we have an init

00:08:59,090 --> 00:09:03,590
process so we run Pig one right so in a

00:09:01,400 --> 00:09:04,970
docker container the users application

00:09:03,590 --> 00:09:09,080
is the only application normally in the

00:09:04,970 --> 00:09:11,090
container and it is the first kid in in

00:09:09,080 --> 00:09:12,290
garden we have the first Pig

00:09:11,090 --> 00:09:14,930
and it's pause all the other

00:09:12,290 --> 00:09:16,940
applications and that can be used to the

00:09:14,930 --> 00:09:19,910
reap child processes and so on so that

00:09:16,940 --> 00:09:21,860
it looks like a real environment and and

00:09:19,910 --> 00:09:25,250
garden is built to run a pass right it's

00:09:21,860 --> 00:09:27,260
also multi-platform so garden is an

00:09:25,250 --> 00:09:30,770
abstraction that you can build multiple

00:09:27,260 --> 00:09:32,630
backends for right so we have got limits

00:09:30,770 --> 00:09:36,860
back-end which I work on there's also a

00:09:32,630 --> 00:09:38,090
gon windows back-end and the reason that

00:09:36,860 --> 00:09:39,560
works is because it's quite a

00:09:38,090 --> 00:09:42,620
well-chosen abstract it's quite a high

00:09:39,560 --> 00:09:44,650
level abstraction and it runs it was

00:09:42,620 --> 00:09:47,300
built to run bill PAC applications but

00:09:44,650 --> 00:09:50,000
it also runs docker images so we

00:09:47,300 --> 00:09:52,670
actually support docker images we use

00:09:50,000 --> 00:09:54,560
Dockers code pull the images down and

00:09:52,670 --> 00:09:56,360
then just run them inside a garden

00:09:54,560 --> 00:09:59,450
container so it's kind of the best of

00:09:56,360 --> 00:10:07,070
all worlds give me a high level view of

00:09:59,450 --> 00:10:08,900
docker if anyone heard of docker so

00:10:07,070 --> 00:10:11,390
docker obviously an app based model

00:10:08,900 --> 00:10:13,120
right which doesn't stop you running

00:10:11,390 --> 00:10:16,670
multiple processes within it but its

00:10:13,120 --> 00:10:19,970
main model is an app based model one app

00:10:16,670 --> 00:10:21,230
per container and in general containers

00:10:19,970 --> 00:10:23,420
pack is root filesystem of the

00:10:21,230 --> 00:10:26,510
application so a docker image doesn't

00:10:23,420 --> 00:10:28,670
separate here's the image and now run

00:10:26,510 --> 00:10:30,860
this in it the metadata includes what

00:10:28,670 --> 00:10:32,780
should I run it who should I run as was

00:10:30,860 --> 00:10:36,350
its home directory etc exception right

00:10:32,780 --> 00:10:37,970
it's quite a tightly coupled thing which

00:10:36,350 --> 00:10:39,440
is really great for you so I've got like

00:10:37,970 --> 00:10:40,850
my thing gonna know how to run it and

00:10:39,440 --> 00:10:45,050
run same everywhere but it is quite

00:10:40,850 --> 00:10:46,940
tightly coupled and its uses Lael fat

00:10:45,050 --> 00:10:48,800
layer file system to make it efficient

00:10:46,940 --> 00:10:51,180
to run whatever runefest you give us

00:10:48,800 --> 00:10:53,520
right and because that's a big news case

00:10:51,180 --> 00:10:55,890
which is really great for local

00:10:53,520 --> 00:10:57,360
development so oh that's really great

00:10:55,890 --> 00:10:59,700
for local development obviously if you

00:10:57,360 --> 00:11:02,370
manage that in the past actually pretty

00:10:59,700 --> 00:11:03,750
difficult right because whether if you

00:11:02,370 --> 00:11:05,730
think about Bill Pay Act patience but

00:11:03,750 --> 00:11:08,040
they're all going to share the same root

00:11:05,730 --> 00:11:09,930
surface which we can cash right as we

00:11:08,040 --> 00:11:11,460
use lay layered file systems to cash it

00:11:09,930 --> 00:11:13,650
and they need to build back just a

00:11:11,460 --> 00:11:15,330
little bit on top right where is the

00:11:13,650 --> 00:11:16,830
docket case all it takes is for someone

00:11:15,330 --> 00:11:18,780
to push instead of pushing something

00:11:16,830 --> 00:11:21,990
based on a bun - they push something

00:11:18,780 --> 00:11:23,970
based on RedHat or anything else and we

00:11:21,990 --> 00:11:25,290
have to pull down the bits for that file

00:11:23,970 --> 00:11:27,710
system because we don't have the base

00:11:25,290 --> 00:11:30,750
layer right the shared base layer

00:11:27,710 --> 00:11:32,400
someone can keep doing that and now

00:11:30,750 --> 00:11:34,020
we've got lots of disk space being used

00:11:32,400 --> 00:11:35,550
and having to manage all those layers

00:11:34,020 --> 00:11:37,230
having to patch all that stuff right

00:11:35,550 --> 00:11:44,280
it's a much harder problem from not

00:11:37,230 --> 00:11:46,920
stemming from and so so what's so great

00:11:44,280 --> 00:11:48,540
about garden well it's got a really

00:11:46,920 --> 00:11:50,340
great abstraction right so because

00:11:48,540 --> 00:11:52,220
you've got quite a high level simple

00:11:50,340 --> 00:11:55,620
abstraction you can plug in multiple

00:11:52,220 --> 00:11:57,930
windows back-end therefore able to do

00:11:55,620 --> 00:12:00,330
this experimentation secondly it's got

00:11:57,930 --> 00:12:02,040
go client the go client is the

00:12:00,330 --> 00:12:04,470
first-class citizen it's built for

00:12:02,040 --> 00:12:05,430
building containers with right I'm if

00:12:04,470 --> 00:12:07,050
you'll run if you're building your

00:12:05,430 --> 00:12:08,670
container what you want is to have a bit

00:12:07,050 --> 00:12:11,220
of cocoa that says crate we this run

00:12:08,670 --> 00:12:13,770
this right especially if you're fat

00:12:11,220 --> 00:12:15,570
source but it'll go freedom to

00:12:13,770 --> 00:12:19,560
experiment because we can put in these

00:12:15,570 --> 00:12:20,760
multiple back backends and plug for

00:12:19,560 --> 00:12:22,770
backends right I've stepped over

00:12:20,760 --> 00:12:25,170
backends a lot of times why do I keep

00:12:22,770 --> 00:12:27,270
saying pluggable backends well we

00:12:25,170 --> 00:12:29,820
already have Linux and Windows and if

00:12:27,270 --> 00:12:32,400
we're talking about experimentation then

00:12:29,820 --> 00:12:33,950
you could actually run a few other ones

00:12:32,400 --> 00:12:38,130
right

00:12:33,950 --> 00:12:40,470
for example obviously docker right so

00:12:38,130 --> 00:12:43,970
we've got a great abstraction it's got a

00:12:40,470 --> 00:12:46,080
goal and clients and it's pluggable

00:12:43,970 --> 00:12:46,440
maybe we could take advantage of both of

00:12:46,080 --> 00:12:48,330
these

00:12:46,440 --> 00:12:51,600
but I'll quickly talk about what's not

00:12:48,330 --> 00:12:54,570
so great to be fair right there's some

00:12:51,600 --> 00:12:56,820
technical debt garden gardeners that was

00:12:54,570 --> 00:12:59,580
one of the early container technologies

00:12:56,820 --> 00:13:00,750
and it's done good service but there's

00:12:59,580 --> 00:13:02,100
some there's a good deal of technical

00:13:00,750 --> 00:13:04,290
debt in the code which were having to

00:13:02,100 --> 00:13:06,239
fix

00:13:04,290 --> 00:13:08,819
one of the big problem is it really

00:13:06,239 --> 00:13:11,100
wasn't built for this use case so it's

00:13:08,819 --> 00:13:13,919
not built considering how do you

00:13:11,100 --> 00:13:15,809
securely run untrusted images just the

00:13:13,919 --> 00:13:18,149
use case it's now much more prevalent

00:13:15,809 --> 00:13:21,269
with docker eyes containerized

00:13:18,149 --> 00:13:22,379
applications right that's a new use case

00:13:21,269 --> 00:13:24,179
for us and securing that is pretty

00:13:22,379 --> 00:13:26,160
difficult right in the old world

00:13:24,179 --> 00:13:28,529
we just ran you as the vcap use and we

00:13:26,160 --> 00:13:31,079
never let you have root and now people

00:13:28,529 --> 00:13:34,350
want to run their route FS right so very

00:13:31,079 --> 00:13:37,139
linux image which we can't occur we

00:13:34,350 --> 00:13:38,759
can't see first as roots on our machines

00:13:37,139 --> 00:13:40,350
that's a super hard problem

00:13:38,759 --> 00:13:42,119
and it's a big change right so we're

00:13:40,350 --> 00:13:50,239
having to figure out how to change

00:13:42,119 --> 00:13:50,239
garden to do that got a lot of clickers

00:13:54,110 --> 00:13:58,100
yeah it also has a much smaller

00:13:56,060 --> 00:13:59,240
community around it like we just have to

00:13:58,100 --> 00:14:01,820
be honest about this right

00:13:59,240 --> 00:14:05,120
I'm Gardens great there's a pretty small

00:14:01,820 --> 00:14:06,920
community of users versus docker etc

00:14:05,120 --> 00:14:09,200
right and that has some big effects

00:14:06,920 --> 00:14:11,750
right it means for example that we

00:14:09,200 --> 00:14:13,850
support a couple of layered file system

00:14:11,750 --> 00:14:15,970
drivers whereas dr. supports a huge

00:14:13,850 --> 00:14:20,870
number of layered file system drivers

00:14:15,970 --> 00:14:23,650
operating systems etc and it's less well

00:14:20,870 --> 00:14:28,160
known so what's so great about docker

00:14:23,650 --> 00:14:31,370
well it is an amazing user experience to

00:14:28,160 --> 00:14:34,640
package replications up this is huge

00:14:31,370 --> 00:14:37,430
benefit of you know everyone uses this

00:14:34,640 --> 00:14:38,960
right doctor doesn't have really a

00:14:37,430 --> 00:14:40,310
standard right analyzation wrong word

00:14:38,960 --> 00:14:41,960
but it's great that everyone's running

00:14:40,310 --> 00:14:45,410
the same sorts of images and knows what

00:14:41,960 --> 00:14:47,210
to expect has this huge community around

00:14:45,410 --> 00:14:49,850
it and it's pretty robust full-featured

00:14:47,210 --> 00:14:52,970
and very very porno right this is

00:14:49,850 --> 00:14:55,370
there's a name value to it what's not so

00:14:52,970 --> 00:14:58,100
great well for us

00:14:55,370 --> 00:14:59,840
is that I don't say this is a knock

00:14:58,100 --> 00:15:01,400
against docker right the tight coupling

00:14:59,840 --> 00:15:03,350
is great from the user experience point

00:15:01,400 --> 00:15:05,450
of view but if you want to build a pass

00:15:03,350 --> 00:15:07,370
on top of it what you really want is to

00:15:05,450 --> 00:15:09,950
be able to say to it use this route so

00:15:07,370 --> 00:15:13,340
fast run this in it and actually with

00:15:09,950 --> 00:15:14,660
docker there's tend to say run this

00:15:13,340 --> 00:15:16,520
route surface and then it will figure

00:15:14,660 --> 00:15:18,740
out what that routes fest wants run in

00:15:16,520 --> 00:15:21,890
it and how that's quite different from

00:15:18,740 --> 00:15:24,980
what you want to build something on top

00:15:21,890 --> 00:15:27,140
of right because it's not like it's an

00:15:24,980 --> 00:15:29,420
opinionated abstraction and you really

00:15:27,140 --> 00:15:30,770
want a non opinionated abstraction when

00:15:29,420 --> 00:15:31,670
you're building things on top of it and

00:15:30,770 --> 00:15:35,720
you want to have the freedom to

00:15:31,670 --> 00:15:38,150
experiment and change things around the

00:15:35,720 --> 00:15:41,420
API is a standard right that that is a

00:15:38,150 --> 00:15:43,190
problem when you want to for example run

00:15:41,420 --> 00:15:44,510
the same thing on Windows experiment

00:15:43,190 --> 00:15:45,680
different things when there isn't a

00:15:44,510 --> 00:15:48,830
standard that you can expect that's

00:15:45,680 --> 00:15:50,360
still a problem for us and it has a one

00:15:48,830 --> 00:15:52,370
a per container model which is great

00:15:50,360 --> 00:15:54,470
when you're trying to run docker apps

00:15:52,370 --> 00:15:56,090
when you're trying to run for example

00:15:54,470 --> 00:15:57,770
posh lights which wants to represent

00:15:56,090 --> 00:15:59,930
real machines and be used for like that

00:15:57,770 --> 00:16:04,810
broader use case that's a lot more

00:15:59,930 --> 00:16:04,810
difficult so

00:16:05,089 --> 00:16:13,050
that brings us to part two building a

00:16:09,570 --> 00:16:14,730
docker back-end for garden so how do we

00:16:13,050 --> 00:16:17,040
combine the advantages of garden with

00:16:14,730 --> 00:16:20,850
the huge community of familiar ality of

00:16:17,040 --> 00:16:24,029
docker well we write a docker back-end

00:16:20,850 --> 00:16:26,810
for garden right so local backends let's

00:16:24,029 --> 00:16:34,410
write it off the backhander guarded why

00:16:26,810 --> 00:16:37,410
well because we can because we want to

00:16:34,410 --> 00:16:38,730
know what the gaps really are right so

00:16:37,410 --> 00:16:41,459
actually god that's most what we need

00:16:38,730 --> 00:16:45,180
right there's it's working great right

00:16:41,459 --> 00:16:47,069
now but there is a huge community around

00:16:45,180 --> 00:16:50,550
docker there's lots of available

00:16:47,069 --> 00:16:52,920
resources for it if we can take

00:16:50,550 --> 00:16:55,259
advantage of that that will be awesome

00:16:52,920 --> 00:16:58,860
right that would be great to not rebuild

00:16:55,259 --> 00:17:01,050
the wheel right and we've had three

00:16:58,860 --> 00:17:02,579
goals right we want to maintain the

00:17:01,050 --> 00:17:03,779
freedom of choice of back-end container

00:17:02,579 --> 00:17:06,270
technologies right so one of the great

00:17:03,779 --> 00:17:07,530
things about garden is we can swap in

00:17:06,270 --> 00:17:09,360
multiple backends you can have a Windows

00:17:07,530 --> 00:17:12,270
back-end we'd like to be able to have

00:17:09,360 --> 00:17:14,159
rocky wrap container etc if that later

00:17:12,270 --> 00:17:15,720
becomes available if that becomes the

00:17:14,159 --> 00:17:17,720
right choice it's great to keep that

00:17:15,720 --> 00:17:20,459
open right

00:17:17,720 --> 00:17:22,380
well we can do that right this is just a

00:17:20,459 --> 00:17:24,390
total back home for garden if you write

00:17:22,380 --> 00:17:25,919
it as a back-end for garden we're not

00:17:24,390 --> 00:17:27,959
getting rid of the garden API you can do

00:17:25,919 --> 00:17:29,880
that second we wouldn't be able to take

00:17:27,959 --> 00:17:31,590
line to the existing around docker well

00:17:29,880 --> 00:17:33,390
if we run it as a background for garden

00:17:31,590 --> 00:17:34,350
we get all these Vantage's of the docker

00:17:33,390 --> 00:17:37,409
code in the backend

00:17:34,350 --> 00:17:38,669
that'd be awesome and finally we want to

00:17:37,409 --> 00:17:40,260
make sure it works in the most tenant

00:17:38,669 --> 00:17:41,970
pass environment this is harder right

00:17:40,260 --> 00:17:45,510
this we don't get free ball writing its

00:17:41,970 --> 00:17:47,100
back-end but we get the same api's and

00:17:45,510 --> 00:17:48,900
we probably have to build some stuff on

00:17:47,100 --> 00:17:51,030
top of docker so probably have to run

00:17:48,900 --> 00:17:51,990
our own stuff to add the additional

00:17:51,030 --> 00:17:53,460
things for multi-tenancy

00:17:51,990 --> 00:17:54,840
but those are things that we should push

00:17:53,460 --> 00:17:56,850
to get back into the community where we

00:17:54,840 --> 00:17:58,640
find those gaps right that's what

00:17:56,850 --> 00:18:02,880
working the open source community means

00:17:58,640 --> 00:18:07,620
so this is possible right so how's it

00:18:02,880 --> 00:18:09,390
going to work right well basically we're

00:18:07,620 --> 00:18:12,540
going to start our own b---minus process

00:18:09,390 --> 00:18:14,730
one right we need to do that because we

00:18:12,540 --> 00:18:16,380
want to have this this vm like model

00:18:14,730 --> 00:18:16,940
right and we don't want to use the other

00:18:16,380 --> 00:18:19,099
runners that

00:18:16,940 --> 00:18:20,029
and one and we want our own thing if we

00:18:19,099 --> 00:18:21,799
want to support that model so we're just

00:18:20,029 --> 00:18:23,720
going to run our own one will tell

00:18:21,799 --> 00:18:25,099
docker that the application should run

00:18:23,720 --> 00:18:26,960
it's not the users application

00:18:25,099 --> 00:18:30,169
it's our container daemon and if that

00:18:26,960 --> 00:18:32,359
runs the CNE process actually in the in

00:18:30,169 --> 00:18:33,799
in the backend it's just going to shout

00:18:32,359 --> 00:18:35,629
out directly to docker because it's fast

00:18:33,799 --> 00:18:38,470
so we just run the docker excuse or to

00:18:35,629 --> 00:18:40,729
run things has a couple of problems

00:18:38,470 --> 00:18:43,249
which I'll talk about Vic gets it

00:18:40,729 --> 00:18:45,139
working pretty quickly and then we

00:18:43,249 --> 00:18:47,149
actually use lots of garlic libraries so

00:18:45,139 --> 00:18:48,859
God Linux has libraries for doing things

00:18:47,149 --> 00:18:51,499
like sending at the networking the way

00:18:48,859 --> 00:18:53,269
that we like the networking set up and

00:18:51,499 --> 00:18:54,739
and for spawning off proces so that we

00:18:53,269 --> 00:18:56,539
can reattach them later and doing all

00:18:54,739 --> 00:18:57,769
these things and actually all the

00:18:56,539 --> 00:18:59,929
primitives at the bottom of pretty much

00:18:57,769 --> 00:19:02,210
the same right all kernel resources so

00:18:59,929 --> 00:19:03,649
we just reuse those modules around the

00:19:02,210 --> 00:19:06,619
dock on say so we get the dock container

00:19:03,649 --> 00:19:08,269
to create the container with our process

00:19:06,619 --> 00:19:11,059
in it and then use our existing code to

00:19:08,269 --> 00:19:12,409
actually spawn stuff into it it's

00:19:11,059 --> 00:19:14,269
actually surprisingly easy like this

00:19:12,409 --> 00:19:16,729
this didn't take very long to get

00:19:14,269 --> 00:19:18,349
working which is because garden is

00:19:16,729 --> 00:19:20,529
actually a pretty simple API which tells

00:19:18,349 --> 00:19:23,330
you a lot about the Avengers garden

00:19:20,529 --> 00:19:24,710
here's some pictures this is how you

00:19:23,330 --> 00:19:27,019
spawn a garden contain this is what

00:19:24,710 --> 00:19:28,129
happens in garden right so a gun name

00:19:27,019 --> 00:19:30,349
you have something called whoosh D which

00:19:28,129 --> 00:19:31,849
creates a container and actually clones

00:19:30,349 --> 00:19:35,289
a copy of itself into the container

00:19:31,849 --> 00:19:38,210
which runs is the first process that

00:19:35,289 --> 00:19:40,549
process keeps a little socket on the

00:19:38,210 --> 00:19:41,989
outside world so it's got socket in the

00:19:40,549 --> 00:19:44,029
outside world which not in the container

00:19:41,989 --> 00:19:45,769
it spawns stuff into its container we've

00:19:44,029 --> 00:19:48,769
still got a sock outside and we ask it

00:19:45,769 --> 00:19:51,470
to do stuff and that's how God garden

00:19:48,769 --> 00:19:52,700
works today when you actually want to

00:19:51,470 --> 00:19:54,109
run a process we've got a little thing

00:19:52,700 --> 00:19:57,349
called whoosh which is the warden shell

00:19:54,109 --> 00:19:59,179
and it says hey whoosh tell whoosh needs

00:19:57,349 --> 00:20:01,519
to start up container right over this

00:19:59,179 --> 00:20:03,049
socket and there were starts with

00:20:01,519 --> 00:20:05,419
container that's the process inside the

00:20:03,049 --> 00:20:07,190
container and it forwards the input that

00:20:05,419 --> 00:20:08,659
so these two are connected

00:20:07,190 --> 00:20:10,489
see then got the inputs and output

00:20:08,659 --> 00:20:12,489
standard input arrow just gets connected

00:20:10,489 --> 00:20:16,039
between them right looks like that right

00:20:12,489 --> 00:20:19,759
so that's how Gong containers work we

00:20:16,039 --> 00:20:22,639
are now going to docker eyes it pads

00:20:19,759 --> 00:20:25,609
dock rice boom right and this is all

00:20:22,639 --> 00:20:28,460
that you have to do so number one change

00:20:25,609 --> 00:20:29,910
the name number two yeah that's now

00:20:28,460 --> 00:20:31,890
called init D right

00:20:29,910 --> 00:20:33,450
got rid of the thing number three we use

00:20:31,890 --> 00:20:35,970
a dr. demian to spawn it instead of

00:20:33,450 --> 00:20:38,850
cloning in right but same code just run

00:20:35,970 --> 00:20:40,050
it inside it rename those two dosh

00:20:38,850 --> 00:20:41,490
because it's not worth doing if you

00:20:40,050 --> 00:20:44,280
can't have a funny name for at least one

00:20:41,490 --> 00:20:47,310
component and that's basically it right

00:20:44,280 --> 00:20:50,640
so there dosh talks to the init.d over

00:20:47,310 --> 00:20:58,740
the socket outside runs processes great

00:20:50,640 --> 00:21:01,710
so let's have a quick demo I was going

00:20:58,740 --> 00:21:06,540
to do this demo live but then I

00:21:01,710 --> 00:21:08,730
chickened out my wife I didn't work this

00:21:06,540 --> 00:21:11,070
morning and I was like nervous ism it's

00:21:08,730 --> 00:21:14,310
in good plan but if anyone would like to

00:21:11,070 --> 00:21:18,450
see this demo live on my laptop later

00:21:14,310 --> 00:21:22,200
with the code then buy me a coffee do

00:21:18,450 --> 00:21:23,700
that so this is this is lattice people

00:21:22,200 --> 00:21:24,840
have not seen lattice yet you've got to

00:21:23,700 --> 00:21:26,640
check out it's amazing

00:21:24,840 --> 00:21:29,310
basically the AYGO deployment in their

00:21:26,640 --> 00:21:32,660
vagrant virtual machine just running and

00:21:29,310 --> 00:21:34,890
what I've done is I've changed the

00:21:32,660 --> 00:21:36,660
lattice deploy script so that instead of

00:21:34,890 --> 00:21:38,480
installing God and Linux installs God

00:21:36,660 --> 00:21:42,150
and docker writes of it but this is

00:21:38,480 --> 00:21:44,340
installed a vagrant upped and it's now

00:21:42,150 --> 00:21:46,650
running a docker demon inside vagrants

00:21:44,340 --> 00:21:48,150
with God and docker the garden and

00:21:46,650 --> 00:21:52,830
docker back end rather than got a limits

00:21:48,150 --> 00:21:56,400
back-end and I'm gonna target it so I

00:21:52,830 --> 00:22:02,520
target the so this is my lattice CLI

00:21:56,400 --> 00:22:04,350
right and I think for a while okay mmm

00:22:02,520 --> 00:22:05,580
so we now like look at the logs right so

00:22:04,350 --> 00:22:07,080
now all the components are coming up

00:22:05,580 --> 00:22:09,030
right this takes a little while when you

00:22:07,080 --> 00:22:10,800
first start lattice so will components

00:22:09,030 --> 00:22:13,170
have to find each other and start

00:22:10,800 --> 00:22:14,490
talking to each other that takes a

00:22:13,170 --> 00:22:15,840
little bit of time but eventually

00:22:14,490 --> 00:22:18,090
they'll come up and then we're going to

00:22:15,840 --> 00:22:19,290
create an application right so I'm going

00:22:18,090 --> 00:22:20,820
to create and it's going to create

00:22:19,290 --> 00:22:24,930
itself from a docker image right now

00:22:20,820 --> 00:22:26,250
normally in gods and Linux what happens

00:22:24,930 --> 00:22:28,530
this we use of docker code to pull down

00:22:26,250 --> 00:22:31,200
the docker image and then we start up in

00:22:28,530 --> 00:22:32,940
a garden container but now and grate

00:22:31,200 --> 00:22:36,240
this up but now what we're going to do

00:22:32,940 --> 00:22:37,380
is use docker to do the whole thing so

00:22:36,240 --> 00:22:39,660
we're going to say to dock it just run

00:22:37,380 --> 00:22:42,570
this and it's going to download the root

00:22:39,660 --> 00:22:43,890
filesystem and get it up and running so

00:22:42,570 --> 00:22:46,530
we say create

00:22:43,890 --> 00:22:48,060
Thanks creating a container now this is

00:22:46,530 --> 00:22:51,270
the first time this of fresh V answer's

00:22:48,060 --> 00:22:54,030
no cash so it's going to take a little

00:22:51,270 --> 00:22:55,470
bit of time to get there competitor this

00:22:54,030 --> 00:22:58,650
is now pulling down the bits from docker

00:22:55,470 --> 00:23:01,050
hub for the docker route FS it takes

00:22:58,650 --> 00:23:05,940
around to the second T for the team

00:23:01,050 --> 00:23:06,930
container until it pulls down for the

00:23:05,940 --> 00:23:07,920
first time but really all that's

00:23:06,930 --> 00:23:12,540
happening now is we're pulling this down

00:23:07,920 --> 00:23:14,000
over the interweb and should say boom in

00:23:12,540 --> 00:23:21,540
a second

00:23:14,000 --> 00:23:23,070
and yeah so health check past so we

00:23:21,540 --> 00:23:26,760
spawn our how-to excuse me into it

00:23:23,070 --> 00:23:29,100
exited and it is running we take the URL

00:23:26,760 --> 00:23:30,960
and we forwarded the port so it's got

00:23:29,100 --> 00:23:34,530
the proper networking proper port

00:23:30,960 --> 00:23:37,260
forwarding and great lattice and just to

00:23:34,530 --> 00:23:38,370
prove that this is actually really fast

00:23:37,260 --> 00:23:40,140
for you notes to download bits from

00:23:38,370 --> 00:23:44,970
docker hub we'll just do it again

00:23:40,140 --> 00:23:47,820
and boom great got a second container

00:23:44,970 --> 00:23:53,940
right super super fast and actually all

00:23:47,820 --> 00:23:59,370
going through docker right so great yeah

00:23:53,940 --> 00:24:02,670
proof so let's SSH in and what we should

00:23:59,370 --> 00:24:03,900
see is if we SSH in firstly if we list

00:24:02,670 --> 00:24:06,150
the process what we'll see is a docker

00:24:03,900 --> 00:24:07,160
demon is now running Isaac actually see

00:24:06,150 --> 00:24:09,390
what this looks like

00:24:07,160 --> 00:24:13,770
scroll up a bit or see doc a demon up

00:24:09,390 --> 00:24:15,870
here yeah and then you see our garden

00:24:13,770 --> 00:24:17,220
docker back hand and these processes are

00:24:15,870 --> 00:24:19,350
called init these these are actually the

00:24:17,220 --> 00:24:23,010
init process in the containers that this

00:24:19,350 --> 00:24:26,040
is spawned right but the really

00:24:23,010 --> 00:24:27,660
interesting thing is so firstly we

00:24:26,040 --> 00:24:30,000
create little directories for you to

00:24:27,660 --> 00:24:31,140
container from the file system so we're

00:24:30,000 --> 00:24:34,020
going to just see these one of those

00:24:31,140 --> 00:24:35,730
directories and the way the - CLI works

00:24:34,020 --> 00:24:36,870
is it looks at what directories in to

00:24:35,730 --> 00:24:38,970
know what container to go to you by

00:24:36,870 --> 00:24:40,920
default and then you tell it what to

00:24:38,970 --> 00:24:44,610
spawn this either container so we're

00:24:40,920 --> 00:24:46,200
gonna say - PS oh oh I sorry I should

00:24:44,610 --> 00:24:48,450
say dr. PS and you can see the

00:24:46,200 --> 00:24:50,370
containers are listed in docker right so

00:24:48,450 --> 00:24:52,380
they managed my garden created my garden

00:24:50,370 --> 00:24:55,020
but they appeared just perfectly

00:24:52,380 --> 00:24:56,910
normally in the docker PS list just like

00:24:55,020 --> 00:24:57,779
every other container we go in here and

00:24:56,910 --> 00:25:00,359
I say -

00:24:57,779 --> 00:25:02,549
say yeah right and we've spawned PS

00:25:00,359 --> 00:25:05,219
since the container with - right which

00:25:02,549 --> 00:25:06,960
is the docker shell for garden but I can

00:25:05,219 --> 00:25:09,119
also just use docker exact and spawn a

00:25:06,960 --> 00:25:12,769
process oh he's almost in docker tooling

00:25:09,119 --> 00:25:16,909
and that yeah what's great

00:25:12,769 --> 00:25:16,909
so that is Garden docker

00:25:21,590 --> 00:25:29,810
now so what doesn't work

00:25:26,930 --> 00:25:31,760
username spacing doesn't work username

00:25:29,810 --> 00:25:35,950
spacing is one of the ways that we can

00:25:31,760 --> 00:25:38,000
run multi-tenant applications properly

00:25:35,950 --> 00:25:39,410
unfortunately doc who doesn't support

00:25:38,000 --> 00:25:40,930
this yet right this is one of the

00:25:39,410 --> 00:25:43,220
examples of where this is a feature that

00:25:40,930 --> 00:25:45,710
gardeners prioritize because we need to

00:25:43,220 --> 00:25:47,090
run these in multiple environments we

00:25:45,710 --> 00:25:49,040
don't have that feature in docker yet

00:25:47,090 --> 00:25:50,990
which is kind of a biggie right that's

00:25:49,040 --> 00:25:54,650
actually kind of a problem and to be

00:25:50,990 --> 00:25:56,180
honest snapshot restore again one of the

00:25:54,650 --> 00:25:58,610
great architectural features of garden

00:25:56,180 --> 00:26:01,130
is that if garden needs to be updated or

00:25:58,610 --> 00:26:02,840
if the process goes down and that's fine

00:26:01,130 --> 00:26:04,850
all containers keep running and we

00:26:02,840 --> 00:26:06,050
reattach to them that doesn't work

00:26:04,850 --> 00:26:07,580
unfortunate with docker you've got this

00:26:06,050 --> 00:26:10,220
long-running dock edema which is a

00:26:07,580 --> 00:26:12,860
problem etc right that there are

00:26:10,220 --> 00:26:14,930
problems right so part three because I'm

00:26:12,860 --> 00:26:22,400
running a long time was this a good idea

00:26:14,930 --> 00:26:23,810
right well it was fun knows that it does

00:26:22,400 --> 00:26:26,090
work right this actually works really

00:26:23,810 --> 00:26:30,320
nicely and you get to use all your

00:26:26,090 --> 00:26:33,590
docker tools and sadaqa PS etc so maybe

00:26:30,320 --> 00:26:35,000
right we have added this whole extra

00:26:33,590 --> 00:26:36,590
layer I've got this whole extra low

00:26:35,000 --> 00:26:38,000
complexity now I've got to manage docker

00:26:36,590 --> 00:26:40,160
and manager docker beam and all that

00:26:38,000 --> 00:26:41,840
stuff and actually the user experience

00:26:40,160 --> 00:26:44,780
if you saw what I did the lattice push

00:26:41,840 --> 00:26:45,980
it's kind of identical right these

00:26:44,780 --> 00:26:47,420
primitives are actually the kernel

00:26:45,980 --> 00:26:52,310
premises are pretty much the same in

00:26:47,420 --> 00:26:53,750
either case so yeah but it's nice to

00:26:52,310 --> 00:26:54,830
know that we could do it now right we

00:26:53,750 --> 00:26:56,030
couldn't we didn't think we could do it

00:26:54,830 --> 00:26:59,510
a few months ago and now we're pretty

00:26:56,030 --> 00:27:01,430
sure we can do it so it is all about the

00:26:59,510 --> 00:27:03,350
use case right containers right they're

00:27:01,430 --> 00:27:04,670
really great but it's all about what

00:27:03,350 --> 00:27:06,410
would present to the user the actual

00:27:04,670 --> 00:27:09,610
kernel perimeters to isolate stuff and

00:27:06,410 --> 00:27:12,020
pretty similar between all these things

00:27:09,610 --> 00:27:13,550
and some of these fill packs have a lot

00:27:12,020 --> 00:27:15,410
of advantages for a pass right so we do

00:27:13,550 --> 00:27:17,000
want to support both of these use cases

00:27:15,410 --> 00:27:19,490
we don't want to lock into one use case

00:27:17,000 --> 00:27:20,930
or another and we want to keep this plug

00:27:19,490 --> 00:27:21,950
ability right we want to keep me out to

00:27:20,930 --> 00:27:24,680
experiment with all these different

00:27:21,950 --> 00:27:27,020
container technologies garden was why it

00:27:24,680 --> 00:27:29,570
was so easy to pull in a garden doctor

00:27:27,020 --> 00:27:32,660
back-end that's an awesome feature and

00:27:29,570 --> 00:27:33,320
and even where even with leveraging the

00:27:32,660 --> 00:27:35,179
doctor tell

00:27:33,320 --> 00:27:36,559
or anything else we still need this

00:27:35,179 --> 00:27:37,850
garden opponent cuz they still all these

00:27:36,559 --> 00:27:39,740
things that we build around the outside

00:27:37,850 --> 00:27:42,259
to actually manage the containers and

00:27:39,740 --> 00:27:44,779
provide this abstraction so I I reckon

00:27:42,259 --> 00:27:47,389
they have about one minute for a QA

00:27:44,779 --> 00:27:51,549
maybe to have about two potential

00:27:47,389 --> 00:27:51,549
questions before I have to call it

00:28:00,680 --> 00:28:05,870
so the question was this was useful and

00:28:02,510 --> 00:28:08,510
fun and worth doing thank you

00:28:05,870 --> 00:28:11,120
will this actually become like a full

00:28:08,510 --> 00:28:11,420
thing that a product will do I don't

00:28:11,120 --> 00:28:14,210
know

00:28:11,420 --> 00:28:16,010
right I think this is an open discussion

00:28:14,210 --> 00:28:18,050
as to where this will go right at the

00:28:16,010 --> 00:28:19,580
moment godliness works it has some

00:28:18,050 --> 00:28:21,290
features like user mapping user

00:28:19,580 --> 00:28:22,550
namespaces that we actually really need

00:28:21,290 --> 00:28:24,380
in production

00:28:22,550 --> 00:28:27,920
I'm snapshot restore which is a great

00:28:24,380 --> 00:28:30,230
feature for us so it's possible but it's

00:28:27,920 --> 00:28:32,150
really a kind of a product question

00:28:30,230 --> 00:28:34,730
right engineering wise we can do it

00:28:32,150 --> 00:28:36,590
product wise is this something where the

00:28:34,730 --> 00:28:39,830
benefits of introducing this actual

00:28:36,590 --> 00:28:45,470
layer actually winners enough to make it

00:28:39,830 --> 00:28:47,600
worth doing and spending that on I hope

00:28:45,470 --> 00:28:50,360
so yes you can look it on my laptop

00:28:47,600 --> 00:28:51,830
later but I'll once I get approval from

00:28:50,360 --> 00:28:57,110
my manager in the front row I'll put on

00:28:51,830 --> 00:28:59,960
github it's the plant and plug abilities

00:28:57,110 --> 00:29:02,300
and enforced or implements through their

00:28:59,960 --> 00:29:05,630
plugins and the sea-air eye plugins

00:29:02,300 --> 00:29:07,730
mostly so this this is how is the plug

00:29:05,630 --> 00:29:10,280
ability implemented so the way it works

00:29:07,730 --> 00:29:11,990
is that garden has two components has a

00:29:10,280 --> 00:29:14,570
server which provides the API and the

00:29:11,990 --> 00:29:16,640
rich clients and you can actually put in

00:29:14,570 --> 00:29:19,400
just as in this an interface to provide

00:29:16,640 --> 00:29:20,930
a back-end and we have a godliness one

00:29:19,400 --> 00:29:22,790
ago and windows one this is a garden

00:29:20,930 --> 00:29:24,440
dock or one it's actually quite easy for

00:29:22,790 --> 00:29:27,340
plug Bay and it's quite small interface

00:29:24,440 --> 00:29:27,340
to run the containers

00:29:38,220 --> 00:29:42,659
yeah that so so no I mean it turns out

00:29:41,279 --> 00:29:44,460
not that many because God was quite

00:29:42,659 --> 00:29:45,840
small API so actually garden is more a

00:29:44,460 --> 00:29:47,940
subset than the other way around

00:29:45,840 --> 00:29:49,440
so you try and limit that abstraction

00:29:47,940 --> 00:29:51,509
right we don't want to have lots and

00:29:49,440 --> 00:29:54,389
lots of features and but what is more

00:29:51,509 --> 00:29:55,590
different is some of the things some of

00:29:54,389 --> 00:29:58,559
the trade-offs that are more about

00:29:55,590 --> 00:30:00,990
running a path right so for example when

00:29:58,559 --> 00:30:03,210
containers when we have to upgrade gone

00:30:00,990 --> 00:30:04,379
Linux the containers can keep running

00:30:03,210 --> 00:30:06,809
right we don't have a long-running

00:30:04,379 --> 00:30:08,580
daemon we could just reattach the

00:30:06,809 --> 00:30:11,279
containers with dr. you end up with a

00:30:08,580 --> 00:30:12,779
long-running daemon process and I don't

00:30:11,279 --> 00:30:15,629
think there are plans to move away from

00:30:12,779 --> 00:30:16,799
there yet so yeah good because that

00:30:15,629 --> 00:30:18,559
makes a lot of sense for that use case

00:30:16,799 --> 00:30:21,000
but for a path use case it's really

00:30:18,559 --> 00:30:22,740
important to be able to like keep your

00:30:21,000 --> 00:30:24,120
containers running even when you're

00:30:22,740 --> 00:30:28,110
doing wrongly deploys which you do a lot

00:30:24,120 --> 00:30:30,240
so I think I think that's the end of my

00:30:28,110 --> 00:30:32,610
time but if you'd like to hear more

00:30:30,240 --> 00:30:34,139
about this topic there's a panel Bill

00:30:32,610 --> 00:30:36,269
packs contains for cloud foundry where I

00:30:34,139 --> 00:30:39,389
suspect the merits of some of these

00:30:36,269 --> 00:30:41,879
approaches may come up so it'll be

00:30:39,389 --> 00:30:44,240
awesome to see that thank you and have a

00:30:41,879 --> 00:30:44,240

YouTube URL: https://www.youtube.com/watch?v=x_Zshlq4vgE


