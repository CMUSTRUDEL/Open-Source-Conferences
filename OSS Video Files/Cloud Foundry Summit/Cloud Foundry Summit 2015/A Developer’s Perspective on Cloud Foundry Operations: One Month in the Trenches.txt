Title: A Developer’s Perspective on Cloud Foundry Operations: One Month in the Trenches
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	A Developer’s Perspective on Cloud Foundry Operations: One Month in the Trenches - 02 Cornelia Davis 720p
Captions: 
	00:00:00,030 --> 00:00:03,840
so as the less folks are coming in I'll

00:00:02,429 --> 00:00:05,910
go ahead and get started and introduce

00:00:03,840 --> 00:00:07,859
myself

00:00:05,910 --> 00:00:09,900
I'll keep it brief but I think my

00:00:07,859 --> 00:00:13,259
background is pretty relevant here and

00:00:09,900 --> 00:00:16,680
it even says it in the title so my name

00:00:13,259 --> 00:00:19,949
is Cornelia Davis I work for pivotal I

00:00:16,680 --> 00:00:22,230
came to pivotal from EMC so as you know

00:00:19,949 --> 00:00:25,439
pivotal is a spinoff from EMC and VMware

00:00:22,230 --> 00:00:29,660
I have worked in the corporate CTO

00:00:25,439 --> 00:00:32,189
office at EMC for about seven years

00:00:29,660 --> 00:00:33,899
essentially doing emerging tech and I

00:00:32,189 --> 00:00:35,370
spent a lot of time doing restful web

00:00:33,899 --> 00:00:36,899
services and service-oriented

00:00:35,370 --> 00:00:38,760
architectures and all of that stuff

00:00:36,899 --> 00:00:42,059
worked with a lot of product groups

00:00:38,760 --> 00:00:44,789
across EMC and about six months before

00:00:42,059 --> 00:00:46,649
the pivotal spin-off my boss Tom Maguire

00:00:44,789 --> 00:00:49,020
said to me hey you know I want you to

00:00:46,649 --> 00:00:51,030
start looking at this new path thing and

00:00:49,020 --> 00:00:52,949
I said oh great

00:00:51,030 --> 00:00:54,780
always want to learn something new and

00:00:52,949 --> 00:00:57,030
let's take a look at cloud foundry it's

00:00:54,780 --> 00:01:00,180
VMware after all so that was you know

00:00:57,030 --> 00:01:03,449
part of EMC if you will and so I started

00:01:00,180 --> 00:01:05,760
learning about cloud foundry and I

00:01:03,449 --> 00:01:07,560
actually first did some research and I

00:01:05,760 --> 00:01:09,869
started reading about this platform

00:01:07,560 --> 00:01:11,880
as-a-service thing and everything I read

00:01:09,869 --> 00:01:14,340
said platform is the services for the

00:01:11,880 --> 00:01:16,200
developer it was all about developer

00:01:14,340 --> 00:01:17,970
agility making the developers lives

00:01:16,200 --> 00:01:19,950
easier and all of that stuff and I

00:01:17,970 --> 00:01:22,710
thought wow that's really cool this is

00:01:19,950 --> 00:01:26,369
all about me it's all about my life and

00:01:22,710 --> 00:01:28,439
so I started working with cloud foundry

00:01:26,369 --> 00:01:30,540
and I started working with another group

00:01:28,439 --> 00:01:32,990
with an EMC actually with Gary Frankel's

00:01:30,540 --> 00:01:35,340
group the content management group and

00:01:32,990 --> 00:01:37,380
we started playing with cloud foundry

00:01:35,340 --> 00:01:39,540
together with with Documentum with

00:01:37,380 --> 00:01:42,570
content management learned about cloud

00:01:39,540 --> 00:01:44,549
foundry we have the pivotal spin-off and

00:01:42,570 --> 00:01:45,689
I was working in another project for a

00:01:44,549 --> 00:01:48,119
while and then I joined the cloud

00:01:45,689 --> 00:01:49,500
foundry team so it's been about 2 and

00:01:48,119 --> 00:01:50,520
1/2 year more than two and a half years

00:01:49,500 --> 00:01:54,090
that I've been playing with cloud

00:01:50,520 --> 00:01:56,340
foundry about two years ago I was

00:01:54,090 --> 00:01:58,530
joining the cloud foundry group and I

00:01:56,340 --> 00:02:00,869
joined in a role I'm the director of

00:01:58,530 --> 00:02:02,430
platform engineering there I joined in

00:02:00,869 --> 00:02:05,520
this platform engineering role and

00:02:02,430 --> 00:02:07,770
platform engineers are people were in

00:02:05,520 --> 00:02:11,960
the product team so we're engineers we

00:02:07,770 --> 00:02:13,580
all cut code but we're field facing in

00:02:11,960 --> 00:02:15,560
of a post sales capacity but maybe

00:02:13,580 --> 00:02:17,270
sometimes pre-sales it really doesn't

00:02:15,560 --> 00:02:18,830
matter it's not whether it's pre-sales

00:02:17,270 --> 00:02:22,880
or post sales but we go deep with

00:02:18,830 --> 00:02:24,470
customers and with partners so I started

00:02:22,880 --> 00:02:28,280
going out and I started talking to

00:02:24,470 --> 00:02:30,380
customers and learning about what their

00:02:28,280 --> 00:02:32,510
their challenges were and I was talking

00:02:30,380 --> 00:02:34,730
to them about developer experience and

00:02:32,510 --> 00:02:37,100
platform-as-a-service and developer

00:02:34,730 --> 00:02:38,720
agility and all of that stuff and in the

00:02:37,100 --> 00:02:41,390
back of my mind I was always thinking

00:02:38,720 --> 00:02:45,200
really they're projecting this huge

00:02:41,390 --> 00:02:47,600
market size for this product for this

00:02:45,200 --> 00:02:49,460
area platform as-a-service really are

00:02:47,600 --> 00:02:52,640
people gonna drop that kind of cash just

00:02:49,460 --> 00:02:54,830
making my life easier I it just didn't

00:02:52,640 --> 00:02:57,170
kind of compute for me well I spent

00:02:54,830 --> 00:02:59,630
about a month out there talking with all

00:02:57,170 --> 00:03:04,400
of you talking with the customers and I

00:02:59,630 --> 00:03:05,330
realized that operations was really that

00:03:04,400 --> 00:03:09,110
the hard part

00:03:05,330 --> 00:03:12,110
and that operations that the platform in

00:03:09,110 --> 00:03:15,440
fact had a tremendous amount of value

00:03:12,110 --> 00:03:18,500
from an operational perspective so I

00:03:15,440 --> 00:03:21,170
after 25 years being in development I'm

00:03:18,500 --> 00:03:24,500
like oh my gosh I'm working on an

00:03:21,170 --> 00:03:26,960
Operations product so that said I'm

00:03:24,500 --> 00:03:30,170
still 25 years in development and

00:03:26,960 --> 00:03:32,120
earlier this year in from like the mid

00:03:30,170 --> 00:03:35,510
January to the mid February timeframe I

00:03:32,120 --> 00:03:38,180
spent a month doing ops I signed up for

00:03:35,510 --> 00:03:40,040
it I reached out to Tony Hance minore

00:03:38,180 --> 00:03:42,380
cloud ops the guy who runs our cloud ops

00:03:40,040 --> 00:03:44,420
group and I said we're reporting for

00:03:42,380 --> 00:03:47,090
duty sir I'd really like to spend some

00:03:44,420 --> 00:03:49,820
time doing operations and it's as a

00:03:47,090 --> 00:03:53,600
result of that that I present that I

00:03:49,820 --> 00:03:57,860
proposed this topic here at at CF summit

00:03:53,600 --> 00:04:00,380
so I'm gonna spend the next now 25

00:03:57,860 --> 00:04:02,690
minutes or so telling you about that

00:04:00,380 --> 00:04:05,720
month I'm going to tell you about how

00:04:02,690 --> 00:04:08,270
our operations team works the tools that

00:04:05,720 --> 00:04:12,340
we use the process of the processes that

00:04:08,270 --> 00:04:14,620
we have in place and really in fact

00:04:12,340 --> 00:04:17,109
and it's not an agenda I'm not a big fan

00:04:14,620 --> 00:04:19,209
of agenda slides but really these are

00:04:17,109 --> 00:04:20,470
the goals of the talk I'm going to talk

00:04:19,209 --> 00:04:22,540
a little bit about some of the

00:04:20,470 --> 00:04:26,080
principles that we have when we do

00:04:22,540 --> 00:04:27,490
operations and here at Cloud Foundry I'm

00:04:26,080 --> 00:04:30,550
going to tell you a little bit about

00:04:27,490 --> 00:04:32,919
deployments and about how we how that

00:04:30,550 --> 00:04:35,199
the the systems deployed the practices

00:04:32,919 --> 00:04:37,419
that we use and so on monitoring of

00:04:35,199 --> 00:04:38,860
course is hugely P so I'm going to talk

00:04:37,419 --> 00:04:41,229
a little bit about what we use for our

00:04:38,860 --> 00:04:44,590
monitoring keeping up to speed on that

00:04:41,229 --> 00:04:46,419
and throughout all of that which is

00:04:44,590 --> 00:04:48,160
going to be a little bit more hey let me

00:04:46,419 --> 00:04:50,200
tell you about how we do things I'm

00:04:48,160 --> 00:04:52,720
gonna share with you a handful of

00:04:50,200 --> 00:04:54,370
stories because I think in the stories

00:04:52,720 --> 00:04:57,400
is where we really have these aha

00:04:54,370 --> 00:05:00,220
moments these real like oh my gosh real

00:04:57,400 --> 00:05:03,190
big insights and of course we're gonna

00:05:00,220 --> 00:05:05,440
talk about the platform as it is so

00:05:03,190 --> 00:05:07,630
first of all what is it that we're

00:05:05,440 --> 00:05:10,510
operating so what I'm going to tell you

00:05:07,630 --> 00:05:12,580
about here today and what I'd spent one

00:05:10,510 --> 00:05:15,940
month being on the operations team for

00:05:12,580 --> 00:05:18,520
is our pivotal web services so pivotal

00:05:15,940 --> 00:05:19,450
web services is what you find at Ronda

00:05:18,520 --> 00:05:21,340
pivotal dot IO

00:05:19,450 --> 00:05:24,700
how many people have here have a pivotal

00:05:21,340 --> 00:05:27,400
web services account okay a handful of

00:05:24,700 --> 00:05:28,930
you so go to run dot pivotal dot IO you

00:05:27,400 --> 00:05:31,210
can get a free account you can start

00:05:28,930 --> 00:05:33,970
pushing applications and you can start

00:05:31,210 --> 00:05:37,599
doing all that developer stuff what I

00:05:33,970 --> 00:05:42,460
worked on was the team that keeps PWS p

00:05:37,599 --> 00:05:44,710
dub we keep it up and running 24/7 zero

00:05:42,460 --> 00:05:47,169
downtime and that's the team that I'm

00:05:44,710 --> 00:05:49,780
working on so first let me tell you

00:05:47,169 --> 00:05:51,669
about what that deployment looks like so

00:05:49,780 --> 00:05:54,010
let me give you the deployment topology

00:05:51,669 --> 00:05:56,380
and I'm gonna start from the left and

00:05:54,010 --> 00:05:58,690
I'm gonna start from the perspective of

00:05:56,380 --> 00:06:01,599
how did we stand this thing up in what

00:05:58,690 --> 00:06:04,870
components do we use to stand up other

00:06:01,599 --> 00:06:08,289
components within the system so it all

00:06:04,870 --> 00:06:10,900
starts with a jump box a jump box in

00:06:08,289 --> 00:06:14,229
this case I'll tell you is that we run

00:06:10,900 --> 00:06:17,650
run dot pebble do is running on Amazon

00:06:14,229 --> 00:06:19,960
Web Services so as you know Cloud

00:06:17,650 --> 00:06:23,289
Foundry runs over a number of different

00:06:19,960 --> 00:06:26,080
I as layers don't we do Amazon Web

00:06:23,289 --> 00:06:29,889
Services we do vSphere V cloud

00:06:26,080 --> 00:06:31,509
err we do OpenStack we have experimental

00:06:29,889 --> 00:06:33,250
support for other infrastructures as a

00:06:31,509 --> 00:06:34,629
service and of course Microsoft just

00:06:33,250 --> 00:06:36,759
announced that they're going to provide

00:06:34,629 --> 00:06:40,990
support for Asscher so it's really great

00:06:36,759 --> 00:06:43,539
in this particular case we're on AWS we

00:06:40,990 --> 00:06:45,280
start with a jump box the jump box is a

00:06:43,539 --> 00:06:48,129
virtual machine that we've provisioned

00:06:45,280 --> 00:06:50,440
through the AWS console and that junk

00:06:48,129 --> 00:06:53,889
box is going to give us access to the

00:06:50,440 --> 00:06:56,349
other boxes in the entire system we can

00:06:53,889 --> 00:06:58,960
use that to lock down access to some of

00:06:56,349 --> 00:07:02,949
those other boxes and we of course allow

00:06:58,960 --> 00:07:05,500
just SSH access into the jump box using

00:07:02,949 --> 00:07:07,030
Kies we manage all the keys so every

00:07:05,500 --> 00:07:09,669
individual and the operations

00:07:07,030 --> 00:07:11,409
organization has their own keys those

00:07:09,669 --> 00:07:14,259
keys have been registered with the jump

00:07:11,409 --> 00:07:18,400
box so I can SSH into the jump box and

00:07:14,259 --> 00:07:21,219
then run the rest of Cloud Foundry so

00:07:18,400 --> 00:07:26,229
I'm gonna use the boss CLI then to

00:07:21,219 --> 00:07:29,169
access micro Bosch so Micro Bosch is all

00:07:26,229 --> 00:07:32,199
of Bosch in a single virtual machine and

00:07:29,169 --> 00:07:34,750
that virtual machine has the ability for

00:07:32,199 --> 00:07:38,380
me to deploy other clusters how many

00:07:34,750 --> 00:07:41,830
people here are familiar with Bosch okay

00:07:38,380 --> 00:07:45,009
good good about half of you so Bosch is

00:07:41,830 --> 00:07:48,340
the subsystem of cloud foundry that you

00:07:45,009 --> 00:07:50,440
can use to manage the elastic runtime

00:07:48,340 --> 00:07:52,990
which is where you deploy your apps to

00:07:50,440 --> 00:07:55,569
manage all of your other clusters like

00:07:52,990 --> 00:07:58,659
your RabbitMQ cluster your my sequel

00:07:55,569 --> 00:08:00,789
cluster your homegrown time series

00:07:58,659 --> 00:08:03,039
database cluster all of those things so

00:08:00,789 --> 00:08:06,729
it's the thing that manages virtual

00:08:03,039 --> 00:08:10,930
machines so that's what micro Bosch is

00:08:06,729 --> 00:08:13,270
that system an all-in-one single virtual

00:08:10,930 --> 00:08:16,120
machine now you'll notice that the micro

00:08:13,270 --> 00:08:17,620
Bosch is connected to RDS that's where

00:08:16,120 --> 00:08:19,539
we have that's what we use for our

00:08:17,620 --> 00:08:22,620
database for persistence and it's

00:08:19,539 --> 00:08:25,449
connected to s3 as well so we're

00:08:22,620 --> 00:08:29,139
externalizing those two databases RDS

00:08:25,449 --> 00:08:31,120
and s3 and we allow RDS and s3 the

00:08:29,139 --> 00:08:33,370
resilience that's baked into those and

00:08:31,120 --> 00:08:35,469
the SLA so that are baked into those we

00:08:33,370 --> 00:08:37,479
leverage that here in this deployment

00:08:35,469 --> 00:08:39,039
that's something you need to think about

00:08:37,479 --> 00:08:39,969
when you're deploying and running your

00:08:39,039 --> 00:08:42,039
cloud foundry

00:08:39,969 --> 00:08:43,719
since whether it's on Prem or in some

00:08:42,039 --> 00:08:47,649
cloud offering so you need to think

00:08:43,719 --> 00:08:50,980
about having resilient storage now micro

00:08:47,649 --> 00:08:54,459
Bosh then in the case of AWS we use

00:08:50,980 --> 00:08:55,240
micro Bosh to deploy what we call full

00:08:54,459 --> 00:08:57,579
Bosh

00:08:55,240 --> 00:08:59,680
so that Bosh system that I'm talking

00:08:57,579 --> 00:09:02,019
about is a very sophisticated system

00:08:59,680 --> 00:09:05,050
that has many different components it

00:09:02,019 --> 00:09:07,449
has a director it has a health monitor

00:09:05,050 --> 00:09:09,759
it has a message bus it has all of those

00:09:07,449 --> 00:09:11,560
different components in micro Bosh

00:09:09,759 --> 00:09:13,720
they're all running as processes on a

00:09:11,560 --> 00:09:16,720
single virtual machine but you can

00:09:13,720 --> 00:09:18,610
deploy Bosh running across a cluster of

00:09:16,720 --> 00:09:20,889
virtual machines you can do that for

00:09:18,610 --> 00:09:24,550
scale for resilience all of those things

00:09:20,889 --> 00:09:27,100
well it turns out that Bosh can be used

00:09:24,550 --> 00:09:29,529
to deploy Bosh which is really quite

00:09:27,100 --> 00:09:33,430
cool so does anybody know what Bosh

00:09:29,529 --> 00:09:35,829
stands for it actually stands for Bosh

00:09:33,430 --> 00:09:37,720
outer shell so Bosh stands for Bosh

00:09:35,829 --> 00:09:39,399
outer shell that's what we do we're

00:09:37,720 --> 00:09:42,850
engineers we like to do geeky things

00:09:39,399 --> 00:09:46,449
like self-referential things that's what

00:09:42,850 --> 00:09:49,959
we do so Bosh outer shell so we use it

00:09:46,449 --> 00:09:52,750
to deploy full Bosh now once full Bosh

00:09:49,959 --> 00:09:55,360
is deployed then I can use the Bosh CLI

00:09:52,750 --> 00:09:57,579
to connect to full Bosh now notice that

00:09:55,360 --> 00:10:01,360
full Bosh is also connected to an RDS

00:09:57,579 --> 00:10:05,139
and an s3 and finally I use full Bosh to

00:10:01,360 --> 00:10:07,480
deploy run pivotal dot IO so right there

00:10:05,139 --> 00:10:10,240
pivotal web services you can see that

00:10:07,480 --> 00:10:12,490
that's deployed using these Bosh systems

00:10:10,240 --> 00:10:14,319
on the left-hand side whether you're

00:10:12,490 --> 00:10:16,689
doing it on Prem are you doing it in the

00:10:14,319 --> 00:10:19,329
cloud you will use Bosh to deploy cloud

00:10:16,689 --> 00:10:22,600
foundry and if you don't you're insane

00:10:19,329 --> 00:10:23,920
because Bosh is so freakin cool that it

00:10:22,600 --> 00:10:26,259
keeps all these things up and running

00:10:23,920 --> 00:10:28,240
for you so if you haven't seen it look

00:10:26,259 --> 00:10:30,639
back at a year ago I did a five minute

00:10:28,240 --> 00:10:32,800
lightning talk on the four levels of H a

00:10:30,639 --> 00:10:34,809
two of them come from Bosh and they're

00:10:32,800 --> 00:10:37,120
really really cool so have a look at

00:10:34,809 --> 00:10:39,730
that so again you'll notice there that

00:10:37,120 --> 00:10:42,850
that deployment also connects to RDS and

00:10:39,730 --> 00:10:45,790
s3 and then the other things that we use

00:10:42,850 --> 00:10:47,439
it from Amazon that you would use even

00:10:45,790 --> 00:10:50,139
if you were doing this on premise you

00:10:47,439 --> 00:10:52,680
need to do some DNS configuration we use

00:10:50,139 --> 00:10:55,650
route 53 for that

00:10:52,680 --> 00:10:59,610
you're going to have to stand up some

00:10:55,650 --> 00:11:01,890
type of a SSL termination point so

00:10:59,610 --> 00:11:04,890
something that's going to handle SSL and

00:11:01,890 --> 00:11:07,440
feed up certs what we do is we use

00:11:04,890 --> 00:11:10,260
elastic load balancers and those elastic

00:11:07,440 --> 00:11:13,320
load balancers we stand up one per

00:11:10,260 --> 00:11:15,960
domain one per cert so you can see that

00:11:13,320 --> 00:11:18,690
we have one for CF ops do run dot

00:11:15,960 --> 00:11:20,940
pivotal do etc so we have about a dozen

00:11:18,690 --> 00:11:24,150
or so different L bees that are handling

00:11:20,940 --> 00:11:26,490
different domains for the system okay I

00:11:24,150 --> 00:11:28,290
see a lot of people taking pictures by

00:11:26,490 --> 00:11:29,880
all means keep doing that but I promise

00:11:28,290 --> 00:11:31,920
that I will I will put these things up

00:11:29,880 --> 00:11:34,890
on SlideShare this afternoon you can

00:11:31,920 --> 00:11:37,410
find me at C Davis AFC that's I use that

00:11:34,890 --> 00:11:41,760
handle everywhere Twitter SlideShare

00:11:37,410 --> 00:11:44,520
everywhere ok so then what are some of

00:11:41,760 --> 00:11:47,580
the principles the first thing that I

00:11:44,520 --> 00:11:51,480
will tell you is that we do deployments

00:11:47,580 --> 00:11:53,610
during regular working hours how many

00:11:51,480 --> 00:11:55,680
people here are in ops that have to do

00:11:53,610 --> 00:12:01,380
deployment from midnight until 4:00 in

00:11:55,680 --> 00:12:04,140
the morning so when you have Bosh you

00:12:01,380 --> 00:12:06,240
don't have to do that anymore we

00:12:04,140 --> 00:12:08,700
intentionally do it during regular

00:12:06,240 --> 00:12:11,880
business hours because Cloud Foundry

00:12:08,700 --> 00:12:13,860
Bosh has so many safeguards in it that

00:12:11,880 --> 00:12:16,890
if something goes wrong you can roll

00:12:13,860 --> 00:12:19,350
back to a safe state and we put a lot of

00:12:16,890 --> 00:12:21,360
processes in place as well and I'll talk

00:12:19,350 --> 00:12:22,920
about a few more of those the other

00:12:21,360 --> 00:12:25,110
advantage of doing them during regular

00:12:22,920 --> 00:12:27,630
business hours is that the developers of

00:12:25,110 --> 00:12:30,090
the system itself are on hand so if

00:12:27,630 --> 00:12:31,800
something goes wrong we can actually go

00:12:30,090 --> 00:12:34,380
over to the people who are building the

00:12:31,800 --> 00:12:36,870
runtime code and say hey come take a

00:12:34,380 --> 00:12:37,710
look at this log with me and we can get

00:12:36,870 --> 00:12:39,720
that fixed

00:12:37,710 --> 00:12:40,860
so you don't have to be on your own at

00:12:39,720 --> 00:12:42,360
2:00 in the morning doing this

00:12:40,860 --> 00:12:44,580
deployment all by yourself

00:12:42,360 --> 00:12:47,880
that's what DevOps is all about let's

00:12:44,580 --> 00:12:49,290
work together on this now the other

00:12:47,880 --> 00:12:51,540
thing that I'll tell you is that we

00:12:49,290 --> 00:12:54,090
categorize our deployments into a number

00:12:51,540 --> 00:12:57,000
of different types so we have for

00:12:54,090 --> 00:13:00,600
example a new release so if you were

00:12:57,000 --> 00:13:02,130
going to go from V 204 to v2o5 what that

00:13:00,600 --> 00:13:05,460
means is that some of the Cloud Foundry

00:13:02,130 --> 00:13:06,550
components the health manager the the

00:13:05,460 --> 00:13:08,980
cloud control

00:13:06,550 --> 00:13:10,930
the logger Gator some of those are going

00:13:08,980 --> 00:13:12,940
to get revved summer or all of those

00:13:10,930 --> 00:13:15,160
components are going to get revved that

00:13:12,940 --> 00:13:16,870
is one type of deploys when we know that

00:13:15,160 --> 00:13:19,060
we're revving components

00:13:16,870 --> 00:13:21,070
another type of deploy might happen

00:13:19,060 --> 00:13:22,870
after something like heartbleed comes

00:13:21,070 --> 00:13:25,030
along we're not going to Rev any of the

00:13:22,870 --> 00:13:26,950
components we just want to switch out

00:13:25,030 --> 00:13:29,770
the operating system underneath and

00:13:26,950 --> 00:13:32,230
Bosch allows you to do that so we have a

00:13:29,770 --> 00:13:33,760
deployment type that does that and then

00:13:32,230 --> 00:13:36,820
we have something else that's called the

00:13:33,760 --> 00:13:39,280
manifest only deploy which means that

00:13:36,820 --> 00:13:41,230
I'm not changing the OS I'm not changing

00:13:39,280 --> 00:13:45,190
any of the components I'm just changing

00:13:41,230 --> 00:13:47,770
my topology I need a bigger cluster or I

00:13:45,190 --> 00:13:50,410
need a smaller cluster so those are

00:13:47,770 --> 00:13:52,570
manifest only deploys now I make this

00:13:50,410 --> 00:13:54,610
distinction to tell you about to point

00:13:52,570 --> 00:13:56,920
out two different things

00:13:54,610 --> 00:14:00,370
generally new releases and stem-cell

00:13:56,920 --> 00:14:03,160
upgrades take a little bit longer so we

00:14:00,370 --> 00:14:05,550
start those in the morning we don't

00:14:03,160 --> 00:14:08,320
start them at 3 o'clock in the afternoon

00:14:05,550 --> 00:14:09,910
because those take longer and we want to

00:14:08,320 --> 00:14:12,910
get through this during like regular

00:14:09,910 --> 00:14:15,460
working hours manifest only deploys

00:14:12,910 --> 00:14:16,990
where I'm going to add some de A's let's

00:14:15,460 --> 00:14:19,300
say or I'm gonna add some other

00:14:16,990 --> 00:14:20,950
component or reduce some component those

00:14:19,300 --> 00:14:24,850
generally take on the order of minutes

00:14:20,950 --> 00:14:27,400
so let me tell you about the first story

00:14:24,850 --> 00:14:30,250
so this was great it happened the very

00:14:27,400 --> 00:14:32,440
first day that I started on the cloud

00:14:30,250 --> 00:14:35,350
ops team so I showed up for stand up and

00:14:32,440 --> 00:14:38,500
right after stand up we had an incident

00:14:35,350 --> 00:14:40,420
on run dot pivotal do so the Sundance

00:14:38,500 --> 00:14:42,490
Film Festival is one of our customers on

00:14:40,420 --> 00:14:44,410
run dat run dot pebble do and this was

00:14:42,490 --> 00:14:46,720
two days before the Film Festival was

00:14:44,410 --> 00:14:49,090
going to open and they were opening up a

00:14:46,720 --> 00:14:51,700
block of tickets and they were expecting

00:14:49,090 --> 00:14:53,230
as a surge in traffic so a couple of

00:14:51,700 --> 00:14:55,090
days before they had started planning

00:14:53,230 --> 00:14:57,780
for this they had scaled out the number

00:14:55,090 --> 00:15:00,130
of instances on their application in

00:14:57,780 --> 00:15:02,890
anticipation of this spike in traffic

00:15:00,130 --> 00:15:04,450
the spike in traffic came as we expected

00:15:02,890 --> 00:15:07,080
and you know what the app worked

00:15:04,450 --> 00:15:11,290
flawlessly no problems whatsoever

00:15:07,080 --> 00:15:14,710
however we had trouble behind the scenes

00:15:11,290 --> 00:15:16,720
we were dropping log messages so we have

00:15:14,710 --> 00:15:19,210
a logger Gator component that aggregates

00:15:16,720 --> 00:15:20,389
logs we were dropping log messages

00:15:19,210 --> 00:15:22,759
because

00:15:20,389 --> 00:15:26,809
with the added capacity with the added

00:15:22,759 --> 00:15:28,549
traffic we got added log messages so all

00:15:26,809 --> 00:15:30,410
of a sudden we were like oh gosh we

00:15:28,549 --> 00:15:32,509
didn't think about scaling out the

00:15:30,410 --> 00:15:36,559
logger Gators so what we did was we got

00:15:32,509 --> 00:15:39,410
on we did pair ups my pair the pair that

00:15:36,559 --> 00:15:40,939
I was part of another pair and somebody

00:15:39,410 --> 00:15:43,160
from the logger Gator team got on a

00:15:40,939 --> 00:15:46,339
hangout we started looking at things and

00:15:43,160 --> 00:15:48,350
we did a manifest only deploy we scaled

00:15:46,339 --> 00:15:50,119
our logger Gators and let's see if I got

00:15:48,350 --> 00:15:51,649
the right thing so you can see here that

00:15:50,119 --> 00:15:53,600
we have logger Gators across two

00:15:51,649 --> 00:15:56,929
different availability zones that's what

00:15:53,600 --> 00:15:59,299
Z 1 and Z 2 are and we scaled it from 10

00:15:56,929 --> 00:16:02,869
instances per zone to 20 instances per

00:15:59,299 --> 00:16:05,689
zone all of that took less than an hour

00:16:02,869 --> 00:16:07,819
in less than an hour we were able to

00:16:05,689 --> 00:16:09,709
respond to an outage like that not an

00:16:07,819 --> 00:16:12,439
outage but an incident like that and

00:16:09,709 --> 00:16:15,230
recover from dropping logs on the ground

00:16:12,439 --> 00:16:17,540
and by the way customer never even knew

00:16:15,230 --> 00:16:20,059
and so I'll talk a little bit more about

00:16:17,540 --> 00:16:22,699
that as we go along as well ok so that's

00:16:20,059 --> 00:16:24,739
where we are the other thing that I'll

00:16:22,699 --> 00:16:26,989
point out to you is that when we do

00:16:24,739 --> 00:16:29,749
deployments those those new release

00:16:26,989 --> 00:16:31,339
deployments can take hours and if you've

00:16:29,749 --> 00:16:32,749
done a deployment how many people have

00:16:31,339 --> 00:16:36,379
done a deployment and watched the

00:16:32,749 --> 00:16:38,779
compilation take a while okay so the

00:16:36,379 --> 00:16:41,779
compiling the packages takes a while

00:16:38,779 --> 00:16:43,279
we've arranged our pipelines and I'll

00:16:41,779 --> 00:16:45,769
show you a picture in just a moment

00:16:43,279 --> 00:16:47,869
we've arranged our pipeline's so that

00:16:45,769 --> 00:16:50,749
when we're doing a deploy into

00:16:47,869 --> 00:16:52,850
production we are not doing compiles

00:16:50,749 --> 00:16:56,059
anymore the packages have been pre

00:16:52,850 --> 00:16:57,619
compiled by people that are early on in

00:16:56,059 --> 00:17:00,379
the process and in fact this is the

00:16:57,619 --> 00:17:01,699
slide here on the left-hand side it

00:17:00,379 --> 00:17:04,220
talks a little bit about how the

00:17:01,699 --> 00:17:06,470
dependency between the CF runtime and

00:17:04,220 --> 00:17:08,899
the services so the runtime team and the

00:17:06,470 --> 00:17:11,179
services team but really what's key here

00:17:08,899 --> 00:17:14,630
is that we have a number of different

00:17:11,179 --> 00:17:16,970
Cloud Foundry instances that drive our

00:17:14,630 --> 00:17:19,939
pipeline so there's some stuff here

00:17:16,970 --> 00:17:22,100
about how one is for the development the

00:17:19,939 --> 00:17:24,769
runtime team one is for this services

00:17:22,100 --> 00:17:27,620
team but the key is right here that we

00:17:24,769 --> 00:17:30,679
have a system that is our non prod them

00:17:27,620 --> 00:17:32,770
it's a staging system and that's where

00:17:30,679 --> 00:17:34,070
we do deploys before we go to prod

00:17:32,770 --> 00:17:36,890
obviously

00:17:34,070 --> 00:17:39,950
but here's the kicker we have a shared

00:17:36,890 --> 00:17:43,760
package cash so that when we do the

00:17:39,950 --> 00:17:46,850
deploys on a one that package

00:17:43,760 --> 00:17:49,550
compilation happens and gets stored in

00:17:46,850 --> 00:17:52,610
the shared package cash so that when we

00:17:49,550 --> 00:17:54,680
do the deployment into prod we draw from

00:17:52,610 --> 00:17:56,810
that shared package cash and we could to

00:17:54,680 --> 00:17:59,750
save ourselves all of that time in

00:17:56,810 --> 00:18:03,500
package compilation that's a very

00:17:59,750 --> 00:18:06,950
pragmatic technique that you should be

00:18:03,500 --> 00:18:09,260
using in prod to speed up or using it in

00:18:06,950 --> 00:18:13,000
your environments to speed up prod

00:18:09,260 --> 00:18:18,190
deployments makes a huge huge difference

00:18:13,000 --> 00:18:21,140
okay oh boy I'm so far behind already

00:18:18,190 --> 00:18:22,160
okay so very quickly the other thing

00:18:21,140 --> 00:18:23,930
that I'll mention is that we have

00:18:22,160 --> 00:18:26,990
checklists for each of those different

00:18:23,930 --> 00:18:29,570
types of deploys so when we do a deploy

00:18:26,990 --> 00:18:31,330
we go into github everything is in

00:18:29,570 --> 00:18:33,640
github checklists are in github

00:18:31,330 --> 00:18:35,690
infrastructure is code in github

00:18:33,640 --> 00:18:38,180
everything's in github so we have

00:18:35,690 --> 00:18:40,520
checklists and in those checklists we

00:18:38,180 --> 00:18:42,380
have a number of pre deployment steps

00:18:40,520 --> 00:18:44,350
that we do that include things like

00:18:42,380 --> 00:18:46,370
generating final releases

00:18:44,350 --> 00:18:49,400
double-checking that I've got the latest

00:18:46,370 --> 00:18:51,140
out of github and so on then I do some

00:18:49,400 --> 00:18:53,750
deployment steps where I start out

00:18:51,140 --> 00:18:57,410
logging into the jump box I pulled down

00:18:53,750 --> 00:18:59,180
from git again so I'm using it across

00:18:57,410 --> 00:19:02,540
the thing across the board

00:18:59,180 --> 00:19:05,300
log into Bosh upper upload releases and

00:19:02,540 --> 00:19:07,790
all of that stuff and then I have my

00:19:05,300 --> 00:19:10,100
post deployment steps which are things

00:19:07,790 --> 00:19:11,960
like publishing the final releases that

00:19:10,100 --> 00:19:14,150
for some of you who are open source

00:19:11,960 --> 00:19:16,130
customers are probably leveraging those

00:19:14,150 --> 00:19:20,000
final releases that you find with the V

00:19:16,130 --> 00:19:21,980
204 v2o5 the yamo files we generate we

00:19:20,000 --> 00:19:24,140
publish those final releases and we

00:19:21,980 --> 00:19:26,000
update any update the checklist with

00:19:24,140 --> 00:19:29,210
anything that we've learned that maybe

00:19:26,000 --> 00:19:31,790
we didn't have documented before alright

00:19:29,210 --> 00:19:33,710
so let's talk about monitoring them so

00:19:31,790 --> 00:19:36,770
now I've got pivotal Web Services it's

00:19:33,710 --> 00:19:38,690
up and running so what are what am i

00:19:36,770 --> 00:19:40,640
using for monitoring how do I know that

00:19:38,690 --> 00:19:43,010
this thing is still working and how do I

00:19:40,640 --> 00:19:44,840
know when something's gone wrong well

00:19:43,010 --> 00:19:47,389
there's a couple of things first of all

00:19:44,840 --> 00:19:49,579
all of the components in pivotal webs

00:19:47,389 --> 00:19:52,489
services in the elastic runtime are

00:19:49,579 --> 00:19:55,129
configured with syslog endpoints here's

00:19:52,489 --> 00:19:57,379
the first trick is that those system

00:19:55,129 --> 00:19:59,359
syslog endpoints you don't need to have

00:19:57,379 --> 00:20:02,629
all of them pointing to the same system

00:19:59,359 --> 00:20:05,570
point or same sync account so we in fact

00:20:02,629 --> 00:20:07,789
have one account for log stash where

00:20:05,570 --> 00:20:10,729
almost everything is going to probably

00:20:07,789 --> 00:20:13,219
everything and then we have another one

00:20:10,729 --> 00:20:15,320
that the lam team the lam team is the

00:20:13,219 --> 00:20:19,429
logger Gator team the logger logger

00:20:15,320 --> 00:20:22,159
Gator log monitoring metrics all of that

00:20:19,429 --> 00:20:24,979
stuff so we have syslog messages going

00:20:22,159 --> 00:20:28,639
out to these log log Regatta I'm sorry

00:20:24,979 --> 00:20:30,589
to the log stash on the other side we

00:20:28,639 --> 00:20:33,019
have the collector which is an internal

00:20:30,589 --> 00:20:36,529
component of Cloud Foundry and that is

00:20:33,019 --> 00:20:38,899
sending metrics over to data dog we use

00:20:36,529 --> 00:20:40,549
data dog you can use a number of

00:20:38,899 --> 00:20:42,739
different things if you've got JMX

00:20:40,549 --> 00:20:46,429
dashboards you can use that as well with

00:20:42,739 --> 00:20:50,779
ops metrics so that's what we've set up

00:20:46,429 --> 00:20:53,089
so then how do we use that well okay so

00:20:50,779 --> 00:20:55,579
oh here and this is what a dashboard

00:20:53,089 --> 00:20:57,109
looks like so we've got the dashboard

00:20:55,579 --> 00:20:59,659
here and you can see all sorts of things

00:20:57,109 --> 00:21:02,989
like DEA status Diego status router

00:20:59,659 --> 00:21:05,299
status and so on and the thing that I am

00:21:02,989 --> 00:21:09,049
here to tell you is if you want this

00:21:05,299 --> 00:21:09,409
dashboard you can get it it's all open

00:21:09,049 --> 00:21:11,450
source

00:21:09,409 --> 00:21:13,009
so a couple of months ago we open

00:21:11,450 --> 00:21:15,559
sourced all of the data dog

00:21:13,009 --> 00:21:17,629
configurations for Cloud Foundry so

00:21:15,559 --> 00:21:19,909
whether you use data dog or not you can

00:21:17,629 --> 00:21:21,499
go take a look at the configuration of

00:21:19,909 --> 00:21:23,809
this dashboard and you can take a look

00:21:21,499 --> 00:21:26,829
at the metrics that we're using to keep

00:21:23,809 --> 00:21:31,369
everything up and running in operations

00:21:26,829 --> 00:21:33,499
ok so story number two this one's kind

00:21:31,369 --> 00:21:36,469
of interesting in that this was on a day

00:21:33,499 --> 00:21:38,440
where I was on part of a pair we were

00:21:36,469 --> 00:21:41,749
where we were updating that dashboard

00:21:38,440 --> 00:21:44,089
what was cool about this was that we get

00:21:41,749 --> 00:21:46,279
to go in it has a WYSIWYG editor and we

00:21:44,089 --> 00:21:47,929
get to in staging oh and just like

00:21:46,279 --> 00:21:49,940
everything else this is another

00:21:47,929 --> 00:21:53,119
principle as we never do anything

00:21:49,940 --> 00:21:56,329
directly in prod we do everything and

00:21:53,119 --> 00:21:58,190
staging first so but we're going to

00:21:56,329 --> 00:22:00,550
compare what's in staging to what's in

00:21:58,190 --> 00:22:02,710
prod so we checked out from

00:22:00,550 --> 00:22:06,130
thing that was in prod we deployed it to

00:22:02,710 --> 00:22:08,710
staging and it broke and the reason it

00:22:06,130 --> 00:22:11,950
broke was because there was a bug let me

00:22:08,710 --> 00:22:15,070
tell you where the bug was in data dog

00:22:11,950 --> 00:22:17,350
data dog is not really designed for

00:22:15,070 --> 00:22:19,420
continuous integration it's not designed

00:22:17,350 --> 00:22:21,610
with this principle of mind of hey I

00:22:19,420 --> 00:22:23,620
want things to move through a lifecycle

00:22:21,610 --> 00:22:25,420
I'm gonna build my dashboard for staging

00:22:23,620 --> 00:22:27,430
and then I'm gonna deploy that same

00:22:25,420 --> 00:22:30,280
dashboard into production it's not

00:22:27,430 --> 00:22:32,320
designed for that we built that on top

00:22:30,280 --> 00:22:35,470
so you can see that in that open source

00:22:32,320 --> 00:22:38,220
repository we take the dashboard that we

00:22:35,470 --> 00:22:41,530
create and staging and then watch this

00:22:38,220 --> 00:22:44,590
we do a little transformation and we

00:22:41,530 --> 00:22:47,740
deploy it into prod we had a bug in that

00:22:44,590 --> 00:22:49,360
transformation so we we had to build

00:22:47,740 --> 00:22:51,820
that ourselves we had to layer

00:22:49,360 --> 00:22:54,250
continuous integration on top of data

00:22:51,820 --> 00:22:57,910
dog and we had a bug there and we fixed

00:22:54,250 --> 00:23:00,250
it I just want to contrast that to our

00:22:57,910 --> 00:23:02,410
platform the Cloud Foundry platform and

00:23:00,250 --> 00:23:04,420
how we have a design for continuous

00:23:02,410 --> 00:23:06,820
integration when you're working with

00:23:04,420 --> 00:23:10,000
Cloud Foundry we expect you to set up a

00:23:06,820 --> 00:23:12,220
number of difference at different spaces

00:23:10,000 --> 00:23:14,500
maybe even Cloud Foundry deployments and

00:23:12,220 --> 00:23:16,660
you want to be able to move the same

00:23:14,500 --> 00:23:19,420
artifact all the way through those

00:23:16,660 --> 00:23:21,640
different stages and we take care of the

00:23:19,420 --> 00:23:23,410
abstractions the abstractions are here

00:23:21,640 --> 00:23:26,070
in the event configuration env

00:23:23,410 --> 00:23:29,080
configuration and the services

00:23:26,070 --> 00:23:31,680
abstractions so we take care of that so

00:23:29,080 --> 00:23:35,530
that is a really good little lesson on

00:23:31,680 --> 00:23:39,250
on on continuous integration around the

00:23:35,530 --> 00:23:42,190
ops process all right so we have those

00:23:39,250 --> 00:23:44,890
things in place how do we use them well

00:23:42,190 --> 00:23:47,070
data dog allows you to define alerts and

00:23:44,890 --> 00:23:49,990
those alerts are tied to page or duty

00:23:47,070 --> 00:23:53,320
paid your duty of course is connected to

00:23:49,990 --> 00:23:56,290
a person so a person will get paged and

00:23:53,320 --> 00:23:58,480
that person then will start to do things

00:23:56,290 --> 00:24:01,270
like look at the data Dog dashboards and

00:23:58,480 --> 00:24:03,670
start looking at the log the logs there

00:24:01,270 --> 00:24:05,740
that have been aggregated so they start

00:24:03,670 --> 00:24:09,040
doing their troubleshooting they might

00:24:05,740 --> 00:24:11,650
send out a and there's a picture of log

00:24:09,040 --> 00:24:13,540
log stash and I don't have time to go

00:24:11,650 --> 00:24:13,990
over the details but this is the tool

00:24:13,540 --> 00:24:16,390
that

00:24:13,990 --> 00:24:19,120
using to do that troubleshooting and

00:24:16,390 --> 00:24:21,309
then we might send something out to a

00:24:19,120 --> 00:24:22,990
Status page we might if you get a text

00:24:21,309 --> 00:24:24,460
message it says something's wrong with P

00:24:22,990 --> 00:24:28,480
dub see might put something out on the

00:24:24,460 --> 00:24:30,610
Status page and then finally one thing

00:24:28,480 --> 00:24:33,220
that's really important is that we have

00:24:30,610 --> 00:24:34,539
a set of smoke tests that are constantly

00:24:33,220 --> 00:24:37,419
running in prod

00:24:34,539 --> 00:24:40,630
we are constantly every 10 minutes we

00:24:37,419 --> 00:24:43,690
deploy an app we tie it to services we

00:24:40,630 --> 00:24:45,429
scale that app we access the app and so

00:24:43,690 --> 00:24:47,380
on we have a set of tests that we're

00:24:45,429 --> 00:24:50,710
constantly running that we make sure are

00:24:47,380 --> 00:24:53,980
running and if those tests fail then

00:24:50,710 --> 00:24:56,679
that goes into data dog and into pager

00:24:53,980 --> 00:25:00,250
duty and somebody responds to it and

00:24:56,679 --> 00:25:02,950
then finally we also use Pingdom to make

00:25:00,250 --> 00:25:04,690
sure that the console app is up in

00:25:02,950 --> 00:25:06,909
various apps are up on pivotal Web

00:25:04,690 --> 00:25:08,740
Services so this gives you kind of a

00:25:06,909 --> 00:25:12,070
landscape oh and by the way there's one

00:25:08,740 --> 00:25:14,740
other thing we also have BOTS that will

00:25:12,070 --> 00:25:17,529
put things from the the alerting

00:25:14,740 --> 00:25:19,840
mechanism into slack so we have slack

00:25:17,529 --> 00:25:22,240
bots as well so this kind of gives you a

00:25:19,840 --> 00:25:23,679
topology of the entire monitoring system

00:25:22,240 --> 00:25:27,669
that we use to keep things up and

00:25:23,679 --> 00:25:29,919
running now what I want to do here for a

00:25:27,669 --> 00:25:32,140
moment is I want to pause and point out

00:25:29,919 --> 00:25:34,929
that platform what we've been talking

00:25:32,140 --> 00:25:36,429
about so far is platform operations and

00:25:34,929 --> 00:25:39,520
you might ask well what about

00:25:36,429 --> 00:25:43,840
application operations so pivotal

00:25:39,520 --> 00:25:46,600
Network runs on run dot pivotal do the

00:25:43,840 --> 00:25:49,270
console the app manager runs on run

00:25:46,600 --> 00:25:51,669
pivotal do all of those things are

00:25:49,270 --> 00:25:55,419
running on run dot pivotal dot IO do we

00:25:51,669 --> 00:25:58,809
as an ops team handle that actually we

00:25:55,419 --> 00:26:01,179
don't we handle platform operations so

00:25:58,809 --> 00:26:03,640
we're the bottom half that keeps pivotal

00:26:01,179 --> 00:26:07,029
web services up and running the other

00:26:03,640 --> 00:26:08,950
teams the console app team keeps the

00:26:07,029 --> 00:26:11,169
application up and running the pivot

00:26:08,950 --> 00:26:13,720
team keeps the application up and

00:26:11,169 --> 00:26:15,940
running so we've really broken that out

00:26:13,720 --> 00:26:18,130
and that's what the platform enables for

00:26:15,940 --> 00:26:19,809
you and when you see the slides I won't

00:26:18,130 --> 00:26:21,580
go through it in detail here but you can

00:26:19,809 --> 00:26:23,020
see the different roles and the

00:26:21,580 --> 00:26:25,990
different responsibilities that the

00:26:23,020 --> 00:26:27,490
different types of developers and the

00:26:25,990 --> 00:26:31,630
two different types types of

00:26:27,490 --> 00:26:33,880
operators have as well all right so I'm

00:26:31,630 --> 00:26:35,800
coming down to the end here and I have

00:26:33,880 --> 00:26:40,630
one more story to share with you and

00:26:35,800 --> 00:26:42,910
this one is my favorite so we were apart

00:26:40,630 --> 00:26:47,080
I had the opportunity toward the end of

00:26:42,910 --> 00:26:48,820
my month we were doing a we were doing a

00:26:47,080 --> 00:26:51,070
full deployment we were doing a new

00:26:48,820 --> 00:26:52,809
release deployment and I said uh at

00:26:51,070 --> 00:26:54,970
morning stand up I said I want to be on

00:26:52,809 --> 00:26:57,760
that team so I sat down with my

00:26:54,970 --> 00:27:00,610
colleague CAI and I said to him god I

00:26:57,760 --> 00:27:03,400
hope something goes wrong and he said

00:27:00,610 --> 00:27:05,290
what what are you saying you can't

00:27:03,400 --> 00:27:08,080
possibly mean that and I said no really

00:27:05,290 --> 00:27:09,760
because I want to learn and Jim's here

00:27:08,080 --> 00:27:12,580
Jim's another one of my colleagues from

00:27:09,760 --> 00:27:14,080
the cloud ops team I'm like I want to

00:27:12,580 --> 00:27:16,720
learn and you learn a lot more when

00:27:14,080 --> 00:27:18,640
something goes wrong and so we started

00:27:16,720 --> 00:27:20,650
our deployment and I can tell you that

00:27:18,640 --> 00:27:23,530
we got a couple of hours into it and I

00:27:20,650 --> 00:27:25,750
was like this is so boring

00:27:23,530 --> 00:27:27,460
we're like looking at things and we're

00:27:25,750 --> 00:27:28,900
cleaning up a little things here and

00:27:27,460 --> 00:27:30,910
we're doing administrative stuff but

00:27:28,900 --> 00:27:33,309
we're we're mainly watching it but not

00:27:30,910 --> 00:27:35,410
things happening and that's pretty

00:27:33,309 --> 00:27:38,200
typical for Cloud Foundry is you do a

00:27:35,410 --> 00:27:41,440
deployment and it's pretty dull and then

00:27:38,200 --> 00:27:44,410
we started updating the DEA s we're

00:27:41,440 --> 00:27:46,900
updating the runners and we got a whole

00:27:44,410 --> 00:27:48,670
long way into updating the runners and

00:27:46,900 --> 00:27:53,380
all of a sudden one of the runners

00:27:48,670 --> 00:27:55,960
failed and that should never happen

00:27:53,380 --> 00:27:59,170
thank you that should never happen if

00:27:55,960 --> 00:28:02,110
one of them works that's the whole point

00:27:59,170 --> 00:28:05,980
of canary style upgrades if one of them

00:28:02,110 --> 00:28:09,400
works if ten of them work the 11th one

00:28:05,980 --> 00:28:12,850
should work as well so what on earth

00:28:09,400 --> 00:28:15,250
went wrong so we started looking at

00:28:12,850 --> 00:28:18,670
things we SSH tin to one of the runners

00:28:15,250 --> 00:28:20,950
that had worked fine so runner number 94

00:28:18,670 --> 00:28:24,040
let's say and we SSH tinder runner

00:28:20,950 --> 00:28:26,020
numbers 96 and we compare and we started

00:28:24,040 --> 00:28:28,030
looking at what's different because oh

00:28:26,020 --> 00:28:30,190
by the way we looked at the logs and the

00:28:28,030 --> 00:28:33,100
logs were telling us that we had a port

00:28:30,190 --> 00:28:35,170
conflict so we sweat logged into those

00:28:33,100 --> 00:28:38,230
boxes and we started looking at what

00:28:35,170 --> 00:28:40,540
ports were bound to and this is what we

00:28:38,230 --> 00:28:43,480
found on the healthy

00:28:40,540 --> 00:28:46,300
we found that the boss agent was bound

00:28:43,480 --> 00:28:48,220
to port one five five six zero and the

00:28:46,300 --> 00:28:49,330
directory server was bound to port three

00:28:48,220 --> 00:28:51,640
four five six seven

00:28:49,330 --> 00:28:56,620
very creative three four five six seven

00:28:51,640 --> 00:28:58,390
on unhealthy DEA the boss agent was

00:28:56,620 --> 00:29:00,940
bound two three four five six seven and

00:28:58,390 --> 00:29:03,430
then the port binding failed at the

00:29:00,940 --> 00:29:04,870
directory server so obviously he can't

00:29:03,430 --> 00:29:08,830
have two different things bound to the

00:29:04,870 --> 00:29:12,100
same ports so we were like what what is

00:29:08,830 --> 00:29:14,170
going on here so to tell you the boss

00:29:12,100 --> 00:29:16,360
agent is the first thing that starts

00:29:14,170 --> 00:29:18,970
it's always the first thing that starts

00:29:16,360 --> 00:29:21,370
and it starts listening right away so

00:29:18,970 --> 00:29:23,800
the the boss agent had already grabbed

00:29:21,370 --> 00:29:26,140
port three four five six seven and so

00:29:23,800 --> 00:29:29,230
we're looking at this we're saying why

00:29:26,140 --> 00:29:31,570
is it bound to one five five six zero

00:29:29,230 --> 00:29:31,960
the first time and three four five six

00:29:31,570 --> 00:29:36,700
seven

00:29:31,960 --> 00:29:39,190
the next time and once we found the port

00:29:36,700 --> 00:29:41,860
conflict we went to our best source and

00:29:39,190 --> 00:29:45,640
we went to talk to Dmitry Dmitry is

00:29:41,860 --> 00:29:48,640
Bosch and we we've got halfway into our

00:29:45,640 --> 00:29:49,870
sentence and he said ah I know what the

00:29:48,640 --> 00:29:52,810
problem is if I could do a Russian

00:29:49,870 --> 00:29:54,310
accent I would do it but I can't so he

00:29:52,810 --> 00:29:56,050
said I know what the problem is and

00:29:54,310 --> 00:29:59,350
Dmitry always knows what the problem is

00:29:56,050 --> 00:30:02,440
and he pointed us to something called

00:29:59,350 --> 00:30:05,590
ephemeral ports there's a Wikipedia

00:30:02,440 --> 00:30:08,980
article and ephemeral ports are

00:30:05,590 --> 00:30:11,470
basically it's a range of ports that

00:30:08,980 --> 00:30:13,540
when you're as dynamically assigning a

00:30:11,470 --> 00:30:15,040
port when you're dynamically assigning a

00:30:13,540 --> 00:30:17,620
port you can get it from that range

00:30:15,040 --> 00:30:20,350
safely punchline

00:30:17,620 --> 00:30:21,880
you should never statically assign a

00:30:20,350 --> 00:30:26,980
port in this range

00:30:21,880 --> 00:30:30,520
well that statically assigned port is in

00:30:26,980 --> 00:30:33,520
that range so but look how big the

00:30:30,520 --> 00:30:35,730
ranges it's like thirty thousand big so

00:30:33,520 --> 00:30:40,030
we have never hit this bug before

00:30:35,730 --> 00:30:44,170
because we because the range is so huge

00:30:40,030 --> 00:30:46,270
so that's the the lesson on ephemeral

00:30:44,170 --> 00:30:47,830
ports and so I got my wish something

00:30:46,270 --> 00:30:50,410
went wrong and I learned something in

00:30:47,830 --> 00:30:54,110
the process so just wrapping up in the

00:30:50,410 --> 00:30:57,770
last thirty seconds here Bosch is

00:30:54,110 --> 00:30:59,270
some the experience was awesome there's

00:30:57,770 --> 00:31:01,520
all sorts of things here that are

00:30:59,270 --> 00:31:03,860
positive immutable infrastructure all of

00:31:01,520 --> 00:31:05,540
these great themes and the final thing

00:31:03,860 --> 00:31:07,580
that I'll leave you with is that I have

00:31:05,540 --> 00:31:09,440
been blogging about the experience so

00:31:07,580 --> 00:31:11,600
all three of those stories that I shared

00:31:09,440 --> 00:31:13,549
with you this morning I've blogged about

00:31:11,600 --> 00:31:16,340
and so you can find these all on our

00:31:13,549 --> 00:31:19,070
blog pivitol do and you can read about

00:31:16,340 --> 00:31:21,590
them in a little slower pace in a little

00:31:19,070 --> 00:31:23,929
bit more detail so I thank you all for

00:31:21,590 --> 00:31:25,580
your attention and I'll be around for

00:31:23,929 --> 00:31:29,169
all two days of the conference so please

00:31:25,580 --> 00:31:29,169

YouTube URL: https://www.youtube.com/watch?v=c07WxRw30Vs


