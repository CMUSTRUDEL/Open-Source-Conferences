Title: Resource Management Ecosystem and Cloud Foundry - A Review of the State of the Art
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	Resource Management Ecosystem and Cloud Foundry - A Review of the State of the Art - 06 Raghvender Arni 720p
Captions: 
	00:00:00,000 --> 00:00:04,470
all right welcome I'm gonna speak a

00:00:02,820 --> 00:00:06,899
little bit about resource management in

00:00:04,470 --> 00:00:08,670
the enterprise data center we'll find

00:00:06,899 --> 00:00:11,490
out what exactly I'm trying to say when

00:00:08,670 --> 00:00:13,080
I put that title in my name is Ragueneau

00:00:11,490 --> 00:00:14,490
Arnie most people call me Arnie because

00:00:13,080 --> 00:00:18,630
they can't figure out what to do the

00:00:14,490 --> 00:00:20,730
first name so quick survey to find out

00:00:18,630 --> 00:00:23,609
who you people are I won't judge just to

00:00:20,730 --> 00:00:25,619
find out how the talks gonna go how many

00:00:23,609 --> 00:00:27,689
of you here are a part of enterprise IT

00:00:25,619 --> 00:00:30,240
doing something that the enterprise IT

00:00:27,689 --> 00:00:31,470
it's a good chunk I would imagine and

00:00:30,240 --> 00:00:33,690
how many of you are in the

00:00:31,470 --> 00:00:37,170
infrastructure off site responsible for

00:00:33,690 --> 00:00:39,420
standing up infrastructures okay and how

00:00:37,170 --> 00:00:42,870
many of you are dev dev people writing

00:00:39,420 --> 00:00:47,700
code okay how many of you think you

00:00:42,870 --> 00:00:50,879
could you do all the above okay so

00:00:47,700 --> 00:00:52,829
resource management is being in you know

00:00:50,879 --> 00:00:55,350
in computing for a long long long time

00:00:52,829 --> 00:00:58,800
right it's really a simple problem right

00:00:55,350 --> 00:01:01,949
you have on the right side of resources

00:00:58,800 --> 00:01:03,600
resources in expressed as how much CPU

00:01:01,949 --> 00:01:05,939
how much memory how much disk from its

00:01:03,600 --> 00:01:07,080
network etc and on the other side you

00:01:05,939 --> 00:01:09,510
have people right

00:01:07,080 --> 00:01:11,549
asking to get work done right it could

00:01:09,510 --> 00:01:13,830
be a user session life which is

00:01:11,549 --> 00:01:16,710
interactive or it could be a bad session

00:01:13,830 --> 00:01:19,409
and the tussle always is who gets what

00:01:16,710 --> 00:01:21,240
resources how do you balance it and make

00:01:19,409 --> 00:01:23,250
sure that you're maximizing your

00:01:21,240 --> 00:01:24,390
resources while keeping your clients

00:01:23,250 --> 00:01:28,860
happy and the client could be internal

00:01:24,390 --> 00:01:31,159
or external and over the decades in this

00:01:28,860 --> 00:01:33,390
field if you're in operations research

00:01:31,159 --> 00:01:36,000
production engineering or something like

00:01:33,390 --> 00:01:38,100
that this is usually been expressed as a

00:01:36,000 --> 00:01:39,630
mathematical optimization problem right

00:01:38,100 --> 00:01:42,810
I mean if you've done anything along the

00:01:39,630 --> 00:01:44,850
space if you work for logistics

00:01:42,810 --> 00:01:47,420
management firms they all Express this

00:01:44,850 --> 00:01:50,939
is some form of an optimization function

00:01:47,420 --> 00:01:53,189
that picture there is a parable I'd if

00:01:50,939 --> 00:01:55,079
you've not seen it before and the point

00:01:53,189 --> 00:01:56,729
at the top the peak of that is when

00:01:55,079 --> 00:01:59,579
you're maximizing your sources to the

00:01:56,729 --> 00:02:02,340
fullest the right resource schedulers

00:01:59,579 --> 00:02:03,750
out in the industry will try to maximize

00:02:02,340 --> 00:02:05,759
that and we'll speak about the state of

00:02:03,750 --> 00:02:07,380
art what was being done before what's

00:02:05,759 --> 00:02:09,119
happening right now and what is the

00:02:07,380 --> 00:02:11,200
Cloud Foundry team done to kind of get

00:02:09,119 --> 00:02:14,120
that the top of the curve

00:02:11,200 --> 00:02:15,530
but things have been changing right we

00:02:14,120 --> 00:02:17,480
look at the right side of the evolution

00:02:15,530 --> 00:02:19,280
of the sources the evolution demands and

00:02:17,480 --> 00:02:20,230
how the optimization margins have

00:02:19,280 --> 00:02:23,209
changed over the years

00:02:20,230 --> 00:02:25,250
first is resources right I mean that CPU

00:02:23,209 --> 00:02:26,510
Network memory etcetera you know

00:02:25,250 --> 00:02:28,629
initially in the mainframes was

00:02:26,510 --> 00:02:30,349
different big monolithic expensive boxes

00:02:28,629 --> 00:02:33,709
client-server slightly cheaper

00:02:30,349 --> 00:02:35,269
distributed boxes a little bit women and

00:02:33,709 --> 00:02:37,730
firms like VMware came along heavily

00:02:35,269 --> 00:02:39,530
virtualized it but the last big change

00:02:37,730 --> 00:02:42,109
that we've seen over the last few years

00:02:39,530 --> 00:02:43,790
is that everything is distributed right

00:02:42,109 --> 00:02:45,799
no more do you have big expensive

00:02:43,790 --> 00:02:47,480
centralized boxes you have a lot of

00:02:45,799 --> 00:02:50,060
cheap distributed boxes and that has

00:02:47,480 --> 00:02:53,030
cost a you change in the way in which

00:02:50,060 --> 00:02:54,470
you design your optimization functions

00:02:53,030 --> 00:02:56,810
we'll get to that in a little bit that's

00:02:54,470 --> 00:02:58,129
no more right on the right on the on the

00:02:56,810 --> 00:03:00,200
right side the resources are changing on

00:02:58,129 --> 00:03:02,180
the left side the demands are changing

00:03:00,200 --> 00:03:04,879
right if anyone's seen office space

00:03:02,180 --> 00:03:06,260
that's Bill and he's like I need my TPS

00:03:04,879 --> 00:03:08,870
reports if you know what those are test

00:03:06,260 --> 00:03:10,519
specifications something but ID which is

00:03:08,870 --> 00:03:12,709
the backwater of just doing accounting

00:03:10,519 --> 00:03:15,590
stuff has now become front and center

00:03:12,709 --> 00:03:17,090
wherein you heard this word quite a few

00:03:15,590 --> 00:03:19,849
times software is in the world so you're

00:03:17,090 --> 00:03:22,579
going from IT which was like nice to

00:03:19,849 --> 00:03:25,040
have you know whatever they do to IP

00:03:22,579 --> 00:03:26,870
which is becoming really important so as

00:03:25,040 --> 00:03:28,760
your resources change as your demands

00:03:26,870 --> 00:03:30,409
change right your clients are becoming

00:03:28,760 --> 00:03:32,780
more and more demanding and creating new

00:03:30,409 --> 00:03:34,340
workloads you got to rethink the way in

00:03:32,780 --> 00:03:37,790
which the resource management is done in

00:03:34,340 --> 00:03:40,010
the enterprise so looking at a quick

00:03:37,790 --> 00:03:41,510
history I'm a huge history buff right so

00:03:40,010 --> 00:03:42,769
for me it's always good to understand

00:03:41,510 --> 00:03:46,010
how we got here

00:03:42,769 --> 00:03:49,849
the first official resource manager kind

00:03:46,010 --> 00:03:53,180
of was created by IBM it's a CPC PMS

00:03:49,849 --> 00:03:55,189
control program you know conversation or

00:03:53,180 --> 00:03:56,750
something right but it really came out

00:03:55,189 --> 00:03:58,370
of a competition that MIT had asked for

00:03:56,750 --> 00:04:00,829
where they said they needed time sharing

00:03:58,370 --> 00:04:02,840
system before one person would get you

00:04:00,829 --> 00:04:04,400
know his or her own computer but they

00:04:02,840 --> 00:04:05,840
were a timeshare which again is a

00:04:04,400 --> 00:04:08,359
classic example of have lots of

00:04:05,840 --> 00:04:11,239
resources and I have a finite set of

00:04:08,359 --> 00:04:12,620
people I want to manage so CVC PMS and

00:04:11,239 --> 00:04:14,329
the guys who built it built the first

00:04:12,620 --> 00:04:17,150
virtualization platform and if you

00:04:14,329 --> 00:04:19,360
thought would be a marinated and IBM

00:04:17,150 --> 00:04:22,940
build the first universalization thing

00:04:19,360 --> 00:04:25,880
second came eunuchs I'm an old Bell Labs

00:04:22,940 --> 00:04:28,940
head so it's it's great to see what UNIX

00:04:25,880 --> 00:04:30,890
is done in the enterprise but UNIX was

00:04:28,940 --> 00:04:32,690
the second big one that came out but

00:04:30,890 --> 00:04:34,340
user sharing now of course it's a little

00:04:32,690 --> 00:04:35,750
different from virtualization which is

00:04:34,340 --> 00:04:37,520
done in the kernel level but UNIX

00:04:35,750 --> 00:04:39,020
brought use a level sharing you don't

00:04:37,520 --> 00:04:41,060
realize it when you log into a UNIX

00:04:39,020 --> 00:04:43,100
shell you're getting your view into the

00:04:41,060 --> 00:04:45,230
big system like this one way of inner

00:04:43,100 --> 00:04:47,840
sharing resources the third one that

00:04:45,230 --> 00:04:49,520
came this is when I was doing much later

00:04:47,840 --> 00:04:52,190
grad school and into grad school 19

00:04:49,520 --> 00:04:55,160
anyone I'm not that old but in a grid

00:04:52,190 --> 00:04:57,680
computing an HPC and you know that whole

00:04:55,160 --> 00:04:59,360
space and you can submit a job heavily

00:04:57,680 --> 00:05:01,670
use in computation space if we used to

00:04:59,360 --> 00:05:03,800
do a lot of this grid computing to do

00:05:01,670 --> 00:05:06,440
graphics rendering right if Pixar does a

00:05:03,800 --> 00:05:08,390
ton of that stuff and cluster computing

00:05:06,440 --> 00:05:11,060
computing was really big if you remember

00:05:08,390 --> 00:05:13,580
SETI at home like like decades back how

00:05:11,060 --> 00:05:16,610
common that was and Maui that came out

00:05:13,580 --> 00:05:19,420
of a few commercial firms was one of the

00:05:16,610 --> 00:05:21,770
most popular or the first cluster

00:05:19,420 --> 00:05:24,500
scheduler like you know that came out

00:05:21,770 --> 00:05:26,390
very powerful platform but still never

00:05:24,500 --> 00:05:28,850
saw mainstream adoption it was for a

00:05:26,390 --> 00:05:32,870
small set of scientific workloads

00:05:28,850 --> 00:05:34,490
the big shift really happened in 2001

00:05:32,870 --> 00:05:37,730
when VMware came out of the SX and the

00:05:34,490 --> 00:05:39,590
whole ESX set of platforms and you know

00:05:37,730 --> 00:05:41,990
when the when VMware team came out with

00:05:39,590 --> 00:05:43,640
the product this is initially a desktop

00:05:41,990 --> 00:05:45,140
virtualization product but very quickly

00:05:43,640 --> 00:05:46,910
they figure out the money is in a server

00:05:45,140 --> 00:05:49,370
virtualization world where and they can

00:05:46,910 --> 00:05:51,740
look at the data center as one single

00:05:49,370 --> 00:05:54,070
big resource and they went after that

00:05:51,740 --> 00:05:56,090
really hard but for the most part

00:05:54,070 --> 00:05:57,980
everything at VMware and I used to work

00:05:56,090 --> 00:06:00,890
at VMware before a joint pivotal the

00:05:57,980 --> 00:06:02,540
real abstraction is a virtual machine no

00:06:00,890 --> 00:06:03,650
matter what you want you want coffee

00:06:02,540 --> 00:06:05,750
will give you a VM

00:06:03,650 --> 00:06:08,600
right it's always a VM that you always

00:06:05,750 --> 00:06:10,940
operate it on which is fine

00:06:08,600 --> 00:06:14,390
which is actually really powerful if you

00:06:10,940 --> 00:06:16,190
look back in 2001 but you want to find

00:06:14,390 --> 00:06:16,760
the right abstraction if I want to stand

00:06:16,190 --> 00:06:18,830
a nap

00:06:16,760 --> 00:06:21,290
do I want a VM or do I want a nap right

00:06:18,830 --> 00:06:23,990
so the evolution of the abstractions has

00:06:21,290 --> 00:06:26,240
changed over the years and even VMware

00:06:23,990 --> 00:06:27,560
has seen a started to review their

00:06:26,240 --> 00:06:29,900
abstraction they've gone beyond the

00:06:27,560 --> 00:06:32,520
stack they do more than vm abstractions

00:06:29,900 --> 00:06:35,430
but for the most part VM was away

00:06:32,520 --> 00:06:38,639
just start to abstract things so how is

00:06:35,430 --> 00:06:40,650
resource management done with VMs it's

00:06:38,639 --> 00:06:42,419
really simple you define your org you

00:06:40,650 --> 00:06:45,780
define a department you define you know

00:06:42,419 --> 00:06:48,210
VMs beneath that and anyone who's used

00:06:45,780 --> 00:06:50,190
resource pools and DRS within the vmware

00:06:48,210 --> 00:06:51,150
will be very familiar with this and

00:06:50,190 --> 00:06:52,530
you'll start to see how this thing

00:06:51,150 --> 00:06:56,970
starts to blend with cloud foundry

00:06:52,530 --> 00:06:58,770
really fast then you define this reserve

00:06:56,970 --> 00:07:00,840
so you say that I want no matter what

00:06:58,770 --> 00:07:02,550
I'm important give me at least thousand

00:07:00,840 --> 00:07:04,770
megahertz right and you can define that

00:07:02,550 --> 00:07:06,120
across the entire cluster you know for

00:07:04,770 --> 00:07:08,699
your organization no matter where they

00:07:06,120 --> 00:07:11,069
sit that's the bond you can set limits

00:07:08,699 --> 00:07:13,229
right no matter what you do I know this

00:07:11,069 --> 00:07:14,940
this this department is important but I

00:07:13,229 --> 00:07:16,139
don't want to go beyond the specific

00:07:14,940 --> 00:07:17,849
point so you kind of define the upper

00:07:16,139 --> 00:07:20,430
and the lower bounds you know within

00:07:17,849 --> 00:07:22,710
another than VMware and then finally I

00:07:20,430 --> 00:07:25,110
said relative weights it prod is at

00:07:22,710 --> 00:07:26,849
least four times more important than dev

00:07:25,110 --> 00:07:29,759
so when there's contention

00:07:26,849 --> 00:07:31,979
you know ESX will automatically try to

00:07:29,759 --> 00:07:33,180
balance out resources this is extremely

00:07:31,979 --> 00:07:35,430
important if you're trying to manage

00:07:33,180 --> 00:07:37,889
resources within the center if you don't

00:07:35,430 --> 00:07:40,259
understand the source pools in DRS it's

00:07:37,889 --> 00:07:42,210
a big problem and as you start to look

00:07:40,259 --> 00:07:43,800
at what you do with the pads writing on

00:07:42,210 --> 00:07:45,389
top of this you need to know these

00:07:43,800 --> 00:07:48,449
concepts and then we speak of a lot of

00:07:45,389 --> 00:07:50,490
fun we will get to this but the way in

00:07:48,449 --> 00:07:53,130
which you define your resources always

00:07:50,490 --> 00:07:54,779
been CPU memory disk it is the most

00:07:53,130 --> 00:07:56,310
common thing but the workloads you

00:07:54,779 --> 00:07:58,409
specify could be very different and

00:07:56,310 --> 00:08:00,419
we'll get to the the varying workloads

00:07:58,409 --> 00:08:02,099
as we go more and more advanced with the

00:08:00,419 --> 00:08:08,550
miramare was much it is fairly simple

00:08:02,099 --> 00:08:10,680
and the the IT landscape that that is

00:08:08,550 --> 00:08:15,000
existed you know since the mid 90s

00:08:10,680 --> 00:08:18,419
through now you'll see that most IT

00:08:15,000 --> 00:08:19,889
firms love to buy and not to build all

00:08:18,419 --> 00:08:20,909
right you speak to the average CIO and

00:08:19,889 --> 00:08:23,130
you tell them hey let's build an

00:08:20,909 --> 00:08:25,620
application to solve this problem you

00:08:23,130 --> 00:08:27,630
see their face turn white like they're

00:08:25,620 --> 00:08:29,310
afraid to build software because

00:08:27,630 --> 00:08:30,840
software is you know for them is hard so

00:08:29,310 --> 00:08:32,760
what do they do they go and buy software

00:08:30,840 --> 00:08:34,020
it could be sa PE it could be whatever

00:08:32,760 --> 00:08:36,779
right there's a whole bunch of things

00:08:34,020 --> 00:08:38,969
BPM ERP CRM and 80 more acronyms like

00:08:36,779 --> 00:08:42,240
that but what that really creates is

00:08:38,969 --> 00:08:44,520
you're kind of pushing yourself into

00:08:42,240 --> 00:08:45,960
environments where the resources are

00:08:44,520 --> 00:08:47,640
really the mercy of the vent

00:08:45,960 --> 00:08:49,440
that's being provided to you and it's

00:08:47,640 --> 00:08:53,190
very hard for you to break down that big

00:08:49,440 --> 00:08:54,960
blocks and manage resources easily for

00:08:53,190 --> 00:08:57,360
the few that are being bold and brave to

00:08:54,960 --> 00:08:59,070
create applications very quickly right

00:08:57,360 --> 00:09:01,230
that's probably a real expression from a

00:08:59,070 --> 00:09:03,450
from an executive like it becomes some

00:09:01,230 --> 00:09:06,510
monolith a big massive monolith which

00:09:03,450 --> 00:09:07,980
can be broken down right and you know

00:09:06,510 --> 00:09:08,610
for anyone with kids who's played with

00:09:07,980 --> 00:09:10,170
Legos

00:09:08,610 --> 00:09:12,090
the reason is the reason why Legos are

00:09:10,170 --> 00:09:14,190
they start up this small you don't have

00:09:12,090 --> 00:09:15,900
Legos that look at this big because you

00:09:14,190 --> 00:09:17,580
want to be able to build more flexible

00:09:15,900 --> 00:09:20,670
models by having slightly smaller pieces

00:09:17,580 --> 00:09:22,020
and the whole rise towards microservices

00:09:20,670 --> 00:09:23,040
is primarily because of that and you

00:09:22,020 --> 00:09:25,620
don't want to start with something

00:09:23,040 --> 00:09:27,990
really big because it's big hot it's

00:09:25,620 --> 00:09:30,090
hard to build things on top it's hard to

00:09:27,990 --> 00:09:31,710
move it and you start to feel like this

00:09:30,090 --> 00:09:34,980
poor truck is starting to feel right

00:09:31,710 --> 00:09:37,530
it's even though your VM is a big this

00:09:34,980 --> 00:09:39,450
hard to move stuff around so the mindset

00:09:37,530 --> 00:09:41,940
of VMware and firms like you know again

00:09:39,450 --> 00:09:44,460
this is not a very bashing right I'm a

00:09:41,940 --> 00:09:46,020
guy but the mindset always was the whole

00:09:44,460 --> 00:09:48,420
pets and Cattle notion where he would

00:09:46,020 --> 00:09:50,220
always treat the VM is holy then

00:09:48,420 --> 00:09:51,630
anything would be done any work had to

00:09:50,220 --> 00:09:53,400
be done on a host we would very

00:09:51,630 --> 00:09:55,920
carefully move the VM one to the other

00:09:53,400 --> 00:09:58,680
using VMware's you know technologies

00:09:55,920 --> 00:09:59,220
like the motion and etc and forget it

00:09:58,680 --> 00:10:01,650
worked out great

00:09:59,220 --> 00:10:03,120
collectively they made 20 22 billion

00:10:01,650 --> 00:10:06,120
dollars for the last seven years just

00:10:03,120 --> 00:10:09,360
you know going after this problem the

00:10:06,120 --> 00:10:13,260
other thing with the IT with IT is they

00:10:09,360 --> 00:10:17,100
love silos they love organizational

00:10:13,260 --> 00:10:18,660
silos like for example you have an app

00:10:17,100 --> 00:10:21,420
steam.this responsible to building the

00:10:18,660 --> 00:10:22,620
apps they have no control or database

00:10:21,420 --> 00:10:25,020
team that's managed with someone else

00:10:22,620 --> 00:10:26,430
you have hundreds of packaged apps which

00:10:25,020 --> 00:10:28,590
is marriage but completely separate

00:10:26,430 --> 00:10:29,730
teams you have an ETL team which

00:10:28,590 --> 00:10:30,480
hopefully is looking at a dupe or

00:10:29,730 --> 00:10:32,670
something with that right now

00:10:30,480 --> 00:10:34,500
like all they do is informatica you have

00:10:32,670 --> 00:10:36,270
an e DW team and so on and so on and so

00:10:34,500 --> 00:10:38,010
forth this capture is probably 95

00:10:36,270 --> 00:10:40,350
percent of the traffic within the

00:10:38,010 --> 00:10:43,890
enterprise but the problem with this is

00:10:40,350 --> 00:10:46,200
you cannot abstract resources across all

00:10:43,890 --> 00:10:48,450
these different tiers each of them has

00:10:46,200 --> 00:10:51,150
their own silo but they like to hoard

00:10:48,450 --> 00:10:52,830
and keep mine so how do you find a way

00:10:51,150 --> 00:10:55,980
to maximize the resources across you

00:10:52,830 --> 00:10:58,560
have 20% utilization of CPU here 20 here

00:10:55,980 --> 00:10:59,820
20 here 20 here the CIO comes back and

00:10:58,560 --> 00:11:01,470
says I want to maximize utilization

00:10:59,820 --> 00:11:02,880
let's bring them all together it's just

00:11:01,470 --> 00:11:03,960
simply not possible in the existing

00:11:02,880 --> 00:11:08,580
enterprise right now because of these

00:11:03,960 --> 00:11:10,530
silos so while this existed something

00:11:08,580 --> 00:11:14,280
interesting happened right going back to

00:11:10,530 --> 00:11:16,860
history 1999 around that time right

00:11:14,280 --> 00:11:19,890
Google started now Google had a very

00:11:16,860 --> 00:11:23,700
different problem to begin with they

00:11:19,890 --> 00:11:25,770
didn't have the luxury of the average

00:11:23,700 --> 00:11:28,620
enterprise remember this crappy startup

00:11:25,770 --> 00:11:30,810
this came out of Stanford they had big

00:11:28,620 --> 00:11:32,580
visions and you can see the clear vision

00:11:30,810 --> 00:11:34,530
of the founders and then name themselves

00:11:32,580 --> 00:11:37,410
Google then they knew what they wanted

00:11:34,530 --> 00:11:38,940
to be right so for them the sheer scale

00:11:37,410 --> 00:11:41,490
of the problem they're trying to solve

00:11:38,940 --> 00:11:43,260
meant that they just cannot go after

00:11:41,490 --> 00:11:46,470
monoliths right they cannot afford to

00:11:43,260 --> 00:11:48,060
build monoliths I've very rarely ever

00:11:46,470 --> 00:11:50,070
seen an enterprise software vendor

00:11:48,060 --> 00:11:51,540
walking around Google campus they won't

00:11:50,070 --> 00:11:54,380
care for them at all right despite the

00:11:51,540 --> 00:11:56,820
stakes and this and the scotches and

00:11:54,380 --> 00:11:58,710
Google never really care about VMs at

00:11:56,820 --> 00:12:00,210
all they knew that the the added

00:11:58,710 --> 00:12:02,460
abstraction of a VM is going to slow

00:12:00,210 --> 00:12:05,820
them down significantly so what they did

00:12:02,460 --> 00:12:07,530
they build C groups which is containers

00:12:05,820 --> 00:12:09,840
on top of Linux Rohit Seth and those

00:12:07,530 --> 00:12:11,550
guys in 2006 and they did something cool

00:12:09,840 --> 00:12:13,560
they built it they used it they pushed

00:12:11,550 --> 00:12:15,930
it back in the kernel community I forget

00:12:13,560 --> 00:12:17,790
which version of kernel but C groups has

00:12:15,930 --> 00:12:20,730
been around since 2006 in Roatan team

00:12:17,790 --> 00:12:23,160
actually built that but that gave them a

00:12:20,730 --> 00:12:25,350
much much smaller Lego blocks like the

00:12:23,160 --> 00:12:27,330
aims of this week right they went much

00:12:25,350 --> 00:12:29,580
smaller as they built it which meant

00:12:27,330 --> 00:12:31,290
that the code that was being written at

00:12:29,580 --> 00:12:34,230
Google started with Python and expanded

00:12:31,290 --> 00:12:36,590
many other languages was much easier to

00:12:34,230 --> 00:12:38,970
construct move and resource manage right

00:12:36,590 --> 00:12:41,040
and that kind of paved the way for a lot

00:12:38,970 --> 00:12:43,140
of things that that Google started to do

00:12:41,040 --> 00:12:45,540
there's an explosion of innovation after

00:12:43,140 --> 00:12:47,280
that Google I don't know the exact ears

00:12:45,540 --> 00:12:48,720
because this does not announce products

00:12:47,280 --> 00:12:52,110
but Google came out with their borg

00:12:48,720 --> 00:12:54,570
cluster scheduler roughly in 2004 they

00:12:52,110 --> 00:12:56,010
came out with Omega in 2010 and will

00:12:54,570 --> 00:12:59,580
speak a little bit about what Borg is

00:12:56,010 --> 00:13:01,140
what Omega is etc in 2011 an open-source

00:12:59,580 --> 00:13:02,730
project came out of Berkeley called

00:13:01,140 --> 00:13:05,490
meses which eventually became really

00:13:02,730 --> 00:13:07,290
popular and used heavily by the Twitter

00:13:05,490 --> 00:13:08,550
team and now there is a separate forum

00:13:07,290 --> 00:13:11,580
called mesosphere trying to go after

00:13:08,550 --> 00:13:13,600
that space Google also created GFS and

00:13:11,580 --> 00:13:15,070
Hadoop etc right

00:13:13,600 --> 00:13:18,460
in a caming or coming out of google

00:13:15,070 --> 00:13:20,410
hartenberg steam you know more thean

00:13:18,460 --> 00:13:25,660
guys they created yarn which is a

00:13:20,410 --> 00:13:27,160
heavily interesting scheduler but you

00:13:25,660 --> 00:13:29,680
know the heavily focused on big data

00:13:27,160 --> 00:13:32,920
workloads right so you saw an explosion

00:13:29,680 --> 00:13:34,870
of schedulers across the the ecosystem a

00:13:32,920 --> 00:13:36,610
bulk of them in the open source right of

00:13:34,870 --> 00:13:39,790
course borg and omega internal to google

00:13:36,610 --> 00:13:41,560
and what Google did is in 2014 they kind

00:13:39,790 --> 00:13:43,510
of created an open-source version of a

00:13:41,560 --> 00:13:45,610
blend of bargain omega which we'll get

00:13:43,510 --> 00:13:47,260
to in a second and i call it kubernetes

00:13:45,610 --> 00:13:48,970
one of the weirdest names have seen for

00:13:47,260 --> 00:13:51,490
a product but you know it's still a

00:13:48,970 --> 00:13:52,870
pretty compelling product right if

00:13:51,490 --> 00:13:54,550
you've not played it it's a nice thing

00:13:52,870 --> 00:13:56,050
you know you can get up up and running

00:13:54,550 --> 00:13:57,850
kubernetes in like ten minutes it's

00:13:56,050 --> 00:13:59,320
fairly straightforward but what do you

00:13:57,850 --> 00:13:59,740
do with it after that is something we'll

00:13:59,320 --> 00:14:01,810
speak about

00:13:59,740 --> 00:14:03,820
right so that's the ecosystem kind of

00:14:01,810 --> 00:14:07,150
that kind of all outside the enterprise

00:14:03,820 --> 00:14:09,010
no VMs all containers in a fairly

00:14:07,150 --> 00:14:10,720
advanced cluster managers because keep

00:14:09,010 --> 00:14:12,400
in mind these guys are operating at the

00:14:10,720 --> 00:14:14,200
scale which is like never heard of

00:14:12,400 --> 00:14:17,940
hundreds and thousands and thousands of

00:14:14,200 --> 00:14:20,320
machines right well that was happening

00:14:17,940 --> 00:14:23,050
what Google really pioneered like I said

00:14:20,320 --> 00:14:25,750
the abstraction changed from a VM to a

00:14:23,050 --> 00:14:27,339
container so as a Google dev you would

00:14:25,750 --> 00:14:29,470
always ask for a container if you look

00:14:27,339 --> 00:14:31,360
at kubernetes right the abstraction is

00:14:29,470 --> 00:14:32,800
all around a container give me a

00:14:31,360 --> 00:14:34,450
container give me a set of containers

00:14:32,800 --> 00:14:36,279
they have a couple of names abstraction

00:14:34,450 --> 00:14:38,140
live replication context and services on

00:14:36,279 --> 00:14:40,060
top of that but the container was the

00:14:38,140 --> 00:14:42,220
abstraction now if you look at this

00:14:40,060 --> 00:14:44,700
classification of the schedulers that

00:14:42,220 --> 00:14:47,080
came out over the last seven years right

00:14:44,700 --> 00:14:48,760
the first one is a very monolithic

00:14:47,080 --> 00:14:50,080
scheduler right this is kind of the

00:14:48,760 --> 00:14:52,630
state of art as we speak

00:14:50,080 --> 00:14:55,000
leftmost is if you look at borg you'd

00:14:52,630 --> 00:14:57,100
have one big scheduler all requests come

00:14:55,000 --> 00:14:59,050
to me and I know exactly how my

00:14:57,100 --> 00:15:01,300
resources are where my resources are I

00:14:59,050 --> 00:15:03,400
would go and say all right you go on

00:15:01,300 --> 00:15:06,339
that host and so much CPU so much RAM

00:15:03,400 --> 00:15:09,220
right fully centralized scheduler the

00:15:06,339 --> 00:15:11,200
Borg is served

00:15:09,220 --> 00:15:13,930
Google well but over the years they

00:15:11,200 --> 00:15:16,720
found that that centralized scheduling

00:15:13,930 --> 00:15:18,220
is not ideal for them as as their devs

00:15:16,720 --> 00:15:21,100
clear and more and more frameworks

00:15:18,220 --> 00:15:23,350
across a range of dev paradigms like

00:15:21,100 --> 00:15:25,480
MapReduce being one and graph processing

00:15:23,350 --> 00:15:26,740
being in the other they wanted to find a

00:15:25,480 --> 00:15:30,190
way in which they could be couple

00:15:26,740 --> 00:15:32,650
in some fashion so they went ahead and

00:15:30,190 --> 00:15:34,780
created what is called as Omega which is

00:15:32,650 --> 00:15:36,640
a shared stage scheduler which I'll get

00:15:34,780 --> 00:15:38,650
to in a second but let me explain what

00:15:36,640 --> 00:15:41,110
message says before that right so

00:15:38,650 --> 00:15:43,360
message the guys who build mess was

00:15:41,110 --> 00:15:45,250
actually worked at Google and they

00:15:43,360 --> 00:15:47,050
partnered with you know they're friends

00:15:45,250 --> 00:15:51,250
with guys that you Cal Berkeley and said

00:15:47,050 --> 00:15:53,410
hey we need to build something in the

00:15:51,250 --> 00:15:55,810
enterprise or it sees out something that

00:15:53,410 --> 00:15:58,960
can be used outside of Google so there

00:15:55,810 --> 00:16:00,730
and then created you know messes they

00:15:58,960 --> 00:16:02,080
open sourced it I think it's a part of

00:16:00,730 --> 00:16:04,780
the Apache foundation I forget exactly

00:16:02,080 --> 00:16:06,130
but what messes is is actually pretty

00:16:04,780 --> 00:16:09,310
interesting it's a two level or a

00:16:06,130 --> 00:16:10,990
two-stage scheduler which is that if I

00:16:09,310 --> 00:16:13,000
am building a framework if I'm building

00:16:10,990 --> 00:16:15,760
an application their framework I can

00:16:13,000 --> 00:16:18,250
schedule resources or I can ask message

00:16:15,760 --> 00:16:20,740
and say hey I need resources can you

00:16:18,250 --> 00:16:22,690
help me find those resources so you have

00:16:20,740 --> 00:16:24,730
two layers of indirection and what this

00:16:22,690 --> 00:16:27,100
enables you to do is you can actually

00:16:24,730 --> 00:16:29,350
have a growing ecosystem of schedulers

00:16:27,100 --> 00:16:31,120
on top with a central scheduler sitting

00:16:29,350 --> 00:16:32,650
in the middle that is not doing any

00:16:31,120 --> 00:16:34,360
scheduling but all it's doing is giving

00:16:32,650 --> 00:16:36,900
the control of scheduling back to the

00:16:34,360 --> 00:16:39,010
the parent the parent scheduler that

00:16:36,900 --> 00:16:40,870
abstraction is actually pretty nice

00:16:39,010 --> 00:16:43,270
because you can now create a lot of

00:16:40,870 --> 00:16:44,890
schedulers on top of the central one but

00:16:43,270 --> 00:16:46,780
it has a significant limitation and

00:16:44,890 --> 00:16:48,460
there's a bunch of papers this

00:16:46,780 --> 00:16:50,470
screenshot you see here is not mine I

00:16:48,460 --> 00:16:51,760
can't draw those nice things this is

00:16:50,470 --> 00:16:53,770
directly taken from the Google paper

00:16:51,760 --> 00:16:56,380
that is published a little while back

00:16:53,770 --> 00:16:58,480
but the problem that you have with a

00:16:56,380 --> 00:17:01,000
scheduler a mess is because the top

00:16:58,480 --> 00:17:03,280
level of scheduler cannot see all the

00:17:01,000 --> 00:17:04,900
resources that are being parceled out it

00:17:03,280 --> 00:17:07,900
doesn't have a full view of the data

00:17:04,900 --> 00:17:09,640
center as a result the you are not

00:17:07,900 --> 00:17:11,380
maximizing your resources when you build

00:17:09,640 --> 00:17:13,540
your optimisation functions they're not

00:17:11,380 --> 00:17:15,640
at the fullest it's a problem right this

00:17:13,540 --> 00:17:17,380
is a big problem so while message tries

00:17:15,640 --> 00:17:19,870
to work those kings and you see yarn

00:17:17,380 --> 00:17:21,880
with Messrs Excel etc they need to find

00:17:19,870 --> 00:17:23,830
a way to improve that so what Google did

00:17:21,880 --> 00:17:25,120
is they looked at the missile's model

00:17:23,830 --> 00:17:27,190
and said this is just not going to work

00:17:25,120 --> 00:17:28,660
for them so they went and created Omega

00:17:27,190 --> 00:17:31,600
this actually is a very interesting

00:17:28,660 --> 00:17:32,860
paradigm wherein they kind of distribute

00:17:31,600 --> 00:17:35,020
the state and that's why the shared

00:17:32,860 --> 00:17:37,540
state so you have the option to have

00:17:35,020 --> 00:17:39,040
multiple schedulers but the state is

00:17:37,540 --> 00:17:40,870
maintained not just in one place where

00:17:39,040 --> 00:17:42,580
just stayed in money so you kind of

00:17:40,870 --> 00:17:44,620
don't have the problem of a shape of a

00:17:42,580 --> 00:17:45,880
two-level scheduler and you don't have

00:17:44,620 --> 00:17:47,680
the problem of monolithic scheduler

00:17:45,880 --> 00:17:50,470
right so that's kind of the evolution of

00:17:47,680 --> 00:17:53,410
how you went from bar to Omega 2 meses

00:17:50,470 --> 00:17:54,790
the the big data ecosystem started look

00:17:53,410 --> 00:17:57,520
at the same things now yarn was

00:17:54,790 --> 00:18:00,760
initially built off modeled after two

00:17:57,520 --> 00:18:02,980
scales two-level scheduler but the

00:18:00,760 --> 00:18:04,780
design along the way and I've had

00:18:02,980 --> 00:18:08,050
conversation of the yarn team the

00:18:04,780 --> 00:18:09,550
application master that sits in yarn was

00:18:08,050 --> 00:18:12,250
supposed to be decoupled from the

00:18:09,550 --> 00:18:13,870
resource manager but over the over the

00:18:12,250 --> 00:18:15,610
last couple of years no implementation

00:18:13,870 --> 00:18:17,470
actually exists that makes it look like

00:18:15,610 --> 00:18:19,840
a two-level scheduler so yarn really as

00:18:17,470 --> 00:18:21,429
as of today is a monolithic scheduler

00:18:19,840 --> 00:18:22,720
and then speak a little bit about what

00:18:21,429 --> 00:18:25,030
are we doing in Cloud Foundry and where

00:18:22,720 --> 00:18:27,370
do we fit in this classification it's a

00:18:25,030 --> 00:18:29,080
pretty common taxonomy you know for

00:18:27,370 --> 00:18:31,120
schedulers today right so that's the

00:18:29,080 --> 00:18:32,910
whole scheduler stuff a lot of fun

00:18:31,120 --> 00:18:35,200
research if you a computer scientist

00:18:32,910 --> 00:18:37,450
there's a funnest a lot of fun stuff

00:18:35,200 --> 00:18:39,640
going on in this space alright so that

00:18:37,450 --> 00:18:41,650
was going on along came another firm

00:18:39,640 --> 00:18:43,750
right we know exactly how much five

00:18:41,650 --> 00:18:46,960
point some billion dollars Amazon came

00:18:43,750 --> 00:18:48,850
along right now Amazon you know brought

00:18:46,960 --> 00:18:51,700
a bunch of innovations but none of that

00:18:48,850 --> 00:18:55,240
really came from this space all they

00:18:51,700 --> 00:18:58,120
really did know not insulting Amazon

00:18:55,240 --> 00:18:59,890
they kind of recreated VMware but in the

00:18:58,120 --> 00:19:02,320
public cloud a different model of

00:18:59,890 --> 00:19:03,580
consumption but the core technologies

00:19:02,320 --> 00:19:05,620
remain the same which meant that my

00:19:03,580 --> 00:19:07,450
abstraction is the VM again if I want an

00:19:05,620 --> 00:19:11,830
app I'll give you a VM if I want coffee

00:19:07,450 --> 00:19:14,559
I'll give you a VM so if you're an app

00:19:11,830 --> 00:19:16,690
dev again Amazon gives you the same

00:19:14,559 --> 00:19:18,490
problems right I don't want VM so I want

00:19:16,690 --> 00:19:20,980
a better abstraction when I'm writing my

00:19:18,490 --> 00:19:22,270
code right so let's ignore what all

00:19:20,980 --> 00:19:23,710
amazon has done they've made some

00:19:22,270 --> 00:19:25,630
improvements that you know they've

00:19:23,710 --> 00:19:27,340
created darker a brand new container

00:19:25,630 --> 00:19:31,720
management system but we'll see how that

00:19:27,340 --> 00:19:35,350
pans out so that was the Amazon story

00:19:31,720 --> 00:19:37,630
and Along Came OpenStack right what is

00:19:35,350 --> 00:19:38,860
OpenStack done not a lot aside from

00:19:37,630 --> 00:19:43,500
causing confusion in the marketplace

00:19:38,860 --> 00:19:45,790
right OpenStack has been one of the most

00:19:43,500 --> 00:19:47,200
painful thing for enterprise IT they

00:19:45,790 --> 00:19:49,630
have to try to see how is like we have

00:19:47,200 --> 00:19:50,740
to do it and very quickly they figured

00:19:49,630 --> 00:19:52,690
out that the damn thing doesn't work

00:19:50,740 --> 00:19:54,669
right no matter what you do with it

00:19:52,690 --> 00:19:56,619
right some

00:19:54,669 --> 00:19:58,059
service providers you know have put

00:19:56,619 --> 00:20:00,009
blood sweat and tears and tried to make

00:19:58,059 --> 00:20:01,720
it work here's a great example I

00:20:00,009 --> 00:20:03,070
unfortunately didn't put a link to this

00:20:01,720 --> 00:20:05,109
well you can google the words you can

00:20:03,070 --> 00:20:06,609
see that and there's a start up by the

00:20:05,109 --> 00:20:08,259
way this is not even the enterprise they

00:20:06,609 --> 00:20:10,840
they try to do something it did not work

00:20:08,259 --> 00:20:13,450
right so I did not want to do the stock

00:20:10,840 --> 00:20:14,409
but not speak about OpenStack because

00:20:13,450 --> 00:20:16,359
that would make me lose credibility

00:20:14,409 --> 00:20:18,820
almost instantly I wanted to bring it up

00:20:16,359 --> 00:20:20,950
and explain that if you have to work

00:20:18,820 --> 00:20:22,239
with OpenStack leave where you're

00:20:20,950 --> 00:20:25,419
working I'm just kidding

00:20:22,239 --> 00:20:27,340
speak to the CIO speak to the CIO have a

00:20:25,419 --> 00:20:29,320
conversation and some of our savvy

00:20:27,340 --> 00:20:31,179
clients have put OpenStack in dev and

00:20:29,320 --> 00:20:32,830
something else in Prague right so that

00:20:31,179 --> 00:20:39,489
way you kind of minimizing your Lawson

00:20:32,830 --> 00:20:43,119
and the threat of your job what sorry

00:20:39,489 --> 00:20:45,730
it's the people I hang out with alright

00:20:43,119 --> 00:20:48,700
so then the data this is not clearest

00:20:45,730 --> 00:20:50,169
between 2011 and 2012 actually the first

00:20:48,700 --> 00:20:52,299
code for Cloud Foundry was committed way

00:20:50,169 --> 00:20:55,330
back but the real spurt started between

00:20:52,299 --> 00:20:56,679
2011 and 2012 so cloud foundry came

00:20:55,330 --> 00:21:00,820
along and it has a very interesting

00:20:56,679 --> 00:21:02,980
birth it was born in the enterprise but

00:21:00,820 --> 00:21:06,100
the people who came to it came from the

00:21:02,980 --> 00:21:07,809
Google world so like all things people

00:21:06,100 --> 00:21:10,179
do they brought some of the ideas and

00:21:07,809 --> 00:21:13,269
concepts from Google into this number

00:21:10,179 --> 00:21:14,739
one container is a right abstraction VMs

00:21:13,269 --> 00:21:16,570
are nice but containers it is what you

00:21:14,739 --> 00:21:18,850
want to offer it in number one second

00:21:16,570 --> 00:21:20,590
resource scheduling is a fundamental

00:21:18,850 --> 00:21:22,299
aspect of a path you without a resource

00:21:20,590 --> 00:21:24,399
scheduler you really can't manage your

00:21:22,299 --> 00:21:26,529
workload so you need a robust you know

00:21:24,399 --> 00:21:27,669
scheduler within within cloud foundry so

00:21:26,529 --> 00:21:30,669
we'll speak a little bit about what

00:21:27,669 --> 00:21:32,919
chloroform is done but keep in mind that

00:21:30,669 --> 00:21:34,149
cloud foundry brings a completely

00:21:32,919 --> 00:21:36,489
different way of looking at things the

00:21:34,149 --> 00:21:38,499
abstraction is now the application when

00:21:36,489 --> 00:21:40,059
you want an app you ask for an app and

00:21:38,499 --> 00:21:43,359
Clark horny figures out what needs to be

00:21:40,059 --> 00:21:44,859
done no VMs no containers right

00:21:43,359 --> 00:21:47,710
whatever happens behind the scenes you

00:21:44,859 --> 00:21:50,169
ask for an app you get an app back this

00:21:47,710 --> 00:21:52,480
whole CF push seems very simple right

00:21:50,169 --> 00:21:55,029
now but four years back it was a hard

00:21:52,480 --> 00:21:56,649
decision that that the Cloud Foundry

00:21:55,029 --> 00:21:58,929
team and they you know when they came

00:21:56,649 --> 00:22:02,019
over the whole CF push idea right throw

00:21:58,929 --> 00:22:04,869
my app at it and then stuff magically

00:22:02,019 --> 00:22:06,999
you know gets gets provision for me so

00:22:04,869 --> 00:22:08,110
as the Excel foundry but for me is an

00:22:06,999 --> 00:22:10,140
interesting beast

00:22:08,110 --> 00:22:13,320
was born in the enterprise meeow meeow

00:22:10,140 --> 00:22:15,910
initially and then but ideas came from

00:22:13,320 --> 00:22:17,620
from the from the Google ecosystem so

00:22:15,910 --> 00:22:19,809
what do you what do you end up with your

00:22:17,620 --> 00:22:21,760
VMs and containers right both of them

00:22:19,809 --> 00:22:23,740
exist there's very few if any

00:22:21,760 --> 00:22:25,720
deployments that do containers directly

00:22:23,740 --> 00:22:27,870
on bare metal in Cloud Foundry as of

00:22:25,720 --> 00:22:30,910
today a fairly commonly asked question

00:22:27,870 --> 00:22:33,040
but the enterprise workloads are very

00:22:30,910 --> 00:22:34,929
different from your startup workloads

00:22:33,040 --> 00:22:36,610
right you you speak to a bank and

00:22:34,929 --> 00:22:40,120
they're like you don't want to put our

00:22:36,610 --> 00:22:41,559
PCI DSS compliant apps all in containers

00:22:40,120 --> 00:22:43,780
because security model and all that is

00:22:41,559 --> 00:22:46,419
being worked out so VM still offer you a

00:22:43,780 --> 00:22:48,190
level of assurance which containers on

00:22:46,419 --> 00:22:50,140
bare metal still cannot but my strong

00:22:48,190 --> 00:22:51,880
belief is at some point that VM was

00:22:50,140 --> 00:22:54,940
probably gonna go away that's my guess

00:22:51,880 --> 00:22:56,500
right so but you know we have host via

00:22:54,940 --> 00:22:58,270
VMs you have containers right now so

00:22:56,500 --> 00:23:00,220
what do you start with you go back to

00:22:58,270 --> 00:23:02,770
the first the resource management spoke

00:23:00,220 --> 00:23:04,240
of you need resource pools right if

00:23:02,770 --> 00:23:05,890
you're not if you're looking at Cloud

00:23:04,240 --> 00:23:07,540
Foundry or deploying it on vSphere or

00:23:05,890 --> 00:23:09,130
and even OpenStack if you're not

00:23:07,540 --> 00:23:11,260
thinking or using resource pools

00:23:09,130 --> 00:23:12,970
you're not maximizing your sources right

00:23:11,260 --> 00:23:15,160
right unless you're doing standalone

00:23:12,970 --> 00:23:18,340
Cloud Foundry deploys I've seen a ton of

00:23:15,160 --> 00:23:20,440
clients deploy you know a dev pre-staged

00:23:18,340 --> 00:23:22,840
or a QA environment all in the single V

00:23:20,440 --> 00:23:24,580
Center install but with the resource

00:23:22,840 --> 00:23:25,960
pools kind of carving out and managing

00:23:24,580 --> 00:23:28,240
resources you know across the different

00:23:25,960 --> 00:23:29,710
installations that's number one second

00:23:28,240 --> 00:23:31,059
the containers inside of cloud foundry

00:23:29,710 --> 00:23:33,160
are standard C groups

00:23:31,059 --> 00:23:34,419
nothing proprietary nothing crazy it's

00:23:33,160 --> 00:23:36,160
all open source if you don't believe me

00:23:34,419 --> 00:23:38,410
go take a look at garden and what we've

00:23:36,160 --> 00:23:40,809
done in garden a bunch of innovation is

00:23:38,410 --> 00:23:42,669
done in garden but when you request an

00:23:40,809 --> 00:23:44,520
app when you do a CF push of an

00:23:42,669 --> 00:23:46,900
application it has an X amount of memory

00:23:44,520 --> 00:23:48,700
when that gets pushed to the back end

00:23:46,900 --> 00:23:50,650
right it's it's a resource schedule

00:23:48,700 --> 00:23:52,630
etcetera it lands in the container the

00:23:50,650 --> 00:23:54,820
cgroups call that is made looks at the

00:23:52,630 --> 00:23:57,040
memory and says are you need 8 1 gig

00:23:54,820 --> 00:23:59,530
I'll give you one gig it gives you the C

00:23:57,040 --> 00:24:03,010
groups you know SLA but at the same time

00:23:59,530 --> 00:24:06,160
what you're also getting is the CPU that

00:24:03,010 --> 00:24:08,530
is scheduled right we use the the

00:24:06,160 --> 00:24:09,940
kernels fair scheduler to do it but the

00:24:08,530 --> 00:24:11,169
amount of CPU get right now is

00:24:09,940 --> 00:24:13,240
proportional to the amount of memory you

00:24:11,169 --> 00:24:14,950
ask for if you have two apps one asking

00:24:13,240 --> 00:24:17,290
for one gig they are asking for two gig

00:24:14,950 --> 00:24:20,050
the two gig app gets twice the CPUs as

00:24:17,290 --> 00:24:21,370
the one yeah again it's a standard we

00:24:20,050 --> 00:24:23,530
chose you can put

00:24:21,370 --> 00:24:25,930
tweak that but that's that's what we

00:24:23,530 --> 00:24:27,910
chose eventually we'll actually have a

00:24:25,930 --> 00:24:30,340
way in which you can specify actual CPU

00:24:27,910 --> 00:24:32,680
share so you can more finely control

00:24:30,340 --> 00:24:34,990
their source of being asked for that's

00:24:32,680 --> 00:24:37,030
that's a big interesting innovation

00:24:34,990 --> 00:24:38,920
right there the second one that team

00:24:37,030 --> 00:24:40,420
didn't sit back keep in mind right we

00:24:38,920 --> 00:24:42,280
started this whole talk off with the

00:24:40,420 --> 00:24:45,970
optimization algorithms you cannot

00:24:42,280 --> 00:24:47,620
really have a true resource management

00:24:45,970 --> 00:24:49,660
within the data center without

00:24:47,620 --> 00:24:52,750
optimization algorithms burnt in if

00:24:49,660 --> 00:24:54,580
you're afraid of linear programming did

00:24:52,750 --> 00:24:56,080
not look at that source code but it's

00:24:54,580 --> 00:24:58,300
actually really fun if you like linear

00:24:56,080 --> 00:25:00,610
programming so the guys actually coded

00:24:58,300 --> 00:25:03,370
the whole linear the source management

00:25:00,610 --> 00:25:05,830
for Diego in two classes the to go

00:25:03,370 --> 00:25:07,630
classes say oh there's a great blog post

00:25:05,830 --> 00:25:09,190
and but I met the guy who actually wrote

00:25:07,630 --> 00:25:11,590
the code for this he's a math major he

00:25:09,190 --> 00:25:13,870
knows he goes into a fair amount of gory

00:25:11,590 --> 00:25:16,150
detail but what it does essentially is

00:25:13,870 --> 00:25:18,190
when I submit my workload Diego behind

00:25:16,150 --> 00:25:20,200
the scenes doesn't auction right it says

00:25:18,190 --> 00:25:21,550
hey you know here's my job who can

00:25:20,200 --> 00:25:22,750
handle it there's an auction that

00:25:21,550 --> 00:25:24,370
happens behind the scenes an

00:25:22,750 --> 00:25:27,309
optimization algorithm is around on the

00:25:24,370 --> 00:25:29,830
fly and then the right host the right VM

00:25:27,309 --> 00:25:32,350
is picked for the job with one simple

00:25:29,830 --> 00:25:33,940
goal first to keep the user happy and

00:25:32,350 --> 00:25:35,200
second to keep the operator happy

00:25:33,940 --> 00:25:36,460
because you want the operator to be

00:25:35,200 --> 00:25:38,800
happy because you want to lower your

00:25:36,460 --> 00:25:41,080
total cost of ownership if you don't you

00:25:38,800 --> 00:25:42,370
have a happy user but you have a total

00:25:41,080 --> 00:25:43,540
cost of ownership which is completely

00:25:42,370 --> 00:25:44,920
out of line don't you what are you

00:25:43,540 --> 00:25:49,000
trying to do in that set the data center

00:25:44,920 --> 00:25:52,720
so you truly need an optimization

00:25:49,000 --> 00:25:55,059
algorithm I guess what kubernetes right

00:25:52,720 --> 00:25:57,130
meses none of these guys really have

00:25:55,059 --> 00:25:58,990
that yet they'll eventually get it yarn

00:25:57,130 --> 00:26:00,820
doesn't have it if you want it you need

00:25:58,990 --> 00:26:01,960
to plug in your own algorithm so when

00:26:00,820 --> 00:26:04,510
they release it at all in the open

00:26:01,960 --> 00:26:06,070
source it just uses standard fare

00:26:04,510 --> 00:26:08,110
scheduling it doesn't do any other cool

00:26:06,070 --> 00:26:09,429
stuff that Diego's doing so think of

00:26:08,110 --> 00:26:12,820
that when you start to plan out your

00:26:09,429 --> 00:26:14,559
data center so having heard all this

00:26:12,820 --> 00:26:16,150
right if you're a data center operator

00:26:14,559 --> 00:26:17,380
what should you do it's an actual

00:26:16,150 --> 00:26:19,360
picture from one of my clients by the

00:26:17,380 --> 00:26:20,800
way so he has no idea looking at all the

00:26:19,360 --> 00:26:23,800
different pieces so what should you do

00:26:20,800 --> 00:26:24,160
what most importantly no matter what you

00:26:23,800 --> 00:26:25,540
do

00:26:24,160 --> 00:26:27,610
many of us are computer scientist here

00:26:25,540 --> 00:26:29,710
read the papers I mean look at yarn look

00:26:27,610 --> 00:26:31,240
at Omega a look at board right look at

00:26:29,710 --> 00:26:33,220
the source code for da go look at the

00:26:31,240 --> 00:26:33,980
blog post by MIT if you don't have it

00:26:33,220 --> 00:26:36,970
and I'll

00:26:33,980 --> 00:26:39,320
I'll tweet this out all these resources

00:26:36,970 --> 00:26:41,120
but the important thing to understand is

00:26:39,320 --> 00:26:44,060
that the schedulers are not a path

00:26:41,120 --> 00:26:45,950
they're a very very small subset of a

00:26:44,060 --> 00:26:48,320
pass there's a lot of things you need to

00:26:45,950 --> 00:26:50,300
add on top of a scheduler to make it

00:26:48,320 --> 00:26:52,070
usable within the enterprise so if I'm

00:26:50,300 --> 00:26:54,440
doing a CF push I want to get something

00:26:52,070 --> 00:26:55,700
back in fact this is not my image this

00:26:54,440 --> 00:26:58,010
is Gardner which is actually pretty cool

00:26:55,700 --> 00:26:59,450
and they said one does not simply build

00:26:58,010 --> 00:27:02,660
a pass this actually came out a couple

00:26:59,450 --> 00:27:05,150
of weeks back so understand the core

00:27:02,660 --> 00:27:08,990
concepts but don't go around building a

00:27:05,150 --> 00:27:10,190
pass unless you know you have a lot of

00:27:08,990 --> 00:27:13,160
time on your hand and you don't care for

00:27:10,190 --> 00:27:15,080
your job but what should you really be

00:27:13,160 --> 00:27:17,180
doing that right so we go back to the

00:27:15,080 --> 00:27:19,700
the work the the data flow right the

00:27:17,180 --> 00:27:22,400
different parts of the enterprise and

00:27:19,700 --> 00:27:24,740
you put your operators hand on I you

00:27:22,400 --> 00:27:25,790
know you're at CF summit so if you're

00:27:24,740 --> 00:27:27,800
expected to hear something different

00:27:25,790 --> 00:27:30,050
something is wrong right so apps and

00:27:27,800 --> 00:27:31,700
databases all the apps should be managed

00:27:30,050 --> 00:27:34,670
by Cloud Foundry resource manager your

00:27:31,700 --> 00:27:38,000
Cloud Foundry Diego is available in beta

00:27:34,670 --> 00:27:39,890
you must a hard on C stock right it's

00:27:38,000 --> 00:27:41,300
gonna come out fairly shortly there's

00:27:39,890 --> 00:27:43,450
existing resource management right now

00:27:41,300 --> 00:27:45,920
but Diego takes it to the next level so

00:27:43,450 --> 00:27:48,050
think very hard before you use something

00:27:45,920 --> 00:27:50,240
else for your apps and data store your

00:27:48,050 --> 00:27:52,040
custom apps you know aside from you know

00:27:50,240 --> 00:27:54,080
going outside of Cloud Foundry second

00:27:52,040 --> 00:27:58,070
what do you do the packaged apps I'm an

00:27:54,080 --> 00:27:59,090
SI p shop i'm and i XYZ shop you can't

00:27:58,070 --> 00:28:01,730
use containers

00:27:59,090 --> 00:28:05,410
those are big monoliths right those

00:28:01,730 --> 00:28:08,270
systems so stick with VMs for now but

00:28:05,410 --> 00:28:10,100
challenge your package provider and tell

00:28:08,270 --> 00:28:11,690
them I'm gonna kick you out I'm gonna

00:28:10,100 --> 00:28:14,780
build my own thing because you add no

00:28:11,690 --> 00:28:16,790
value for me right and ask them to move

00:28:14,780 --> 00:28:20,090
to a past model some of them are smart s

00:28:16,790 --> 00:28:22,670
AP right making fun of the guys but you

00:28:20,090 --> 00:28:26,780
know they have seen the light Hybris

00:28:22,670 --> 00:28:28,910
which is one of the additional commerce

00:28:26,780 --> 00:28:30,440
systems all rebuilt on Cloud Foundry

00:28:28,910 --> 00:28:32,000
right there's a talk that Renee did

00:28:30,440 --> 00:28:33,800
probably a little earlier today that

00:28:32,000 --> 00:28:37,610
talks about how he's using her phone you

00:28:33,800 --> 00:28:40,010
know for this at the same time si Peace

00:28:37,610 --> 00:28:41,870
Corps Hannah flower you know is they're

00:28:40,010 --> 00:28:44,240
looking the reader to run it all on her

00:28:41,870 --> 00:28:45,860
family so some of the ISPs are starting

00:28:44,240 --> 00:28:48,770
to see the light mendax another good

00:28:45,860 --> 00:28:50,480
vendor so going back to Sam's Sam

00:28:48,770 --> 00:28:52,880
Romney's point the reason he joined the

00:28:50,480 --> 00:28:53,960
flood foundation foundation he's dad he

00:28:52,880 --> 00:28:56,299
likes a CF push

00:28:53,960 --> 00:28:59,179
he's an he's an ecosystem guy what he

00:28:56,299 --> 00:29:01,040
really sees is hundreds of these players

00:28:59,179 --> 00:29:02,299
are all gonna get certified and run in

00:29:01,040 --> 00:29:04,970
Clark County that's where the real value

00:29:02,299 --> 00:29:07,280
is for cloud fund is a platform so push

00:29:04,970 --> 00:29:08,870
your vendor to do that third if you're

00:29:07,280 --> 00:29:11,360
doing any Hadoop did not do it without

00:29:08,870 --> 00:29:13,490
yarn right there's a lot of value that

00:29:11,360 --> 00:29:15,440
Yan brings to the table it opens up the

00:29:13,490 --> 00:29:16,490
workloads right and you'll see more

00:29:15,440 --> 00:29:17,929
collaboration with the new yarn

00:29:16,490 --> 00:29:20,240
community and the Diego community where

00:29:17,929 --> 00:29:22,700
you'll see a way in which you can manage

00:29:20,240 --> 00:29:25,040
the sources across those two teams but

00:29:22,700 --> 00:29:26,390
look at yarn for that right for your

00:29:25,040 --> 00:29:28,190
data warehouse is in data Mart's with

00:29:26,390 --> 00:29:30,350
your UC appliances tell your vendor to

00:29:28,190 --> 00:29:33,110
stop shipping appliances they add no

00:29:30,350 --> 00:29:34,610
value right ten years back maybe but

00:29:33,110 --> 00:29:37,640
Moore's law has changed things

00:29:34,610 --> 00:29:39,530
dramatically white boxes x86 smart

00:29:37,640 --> 00:29:41,120
distributed software is going to be 10

00:29:39,530 --> 00:29:43,669
times faster than your data warehouse so

00:29:41,120 --> 00:29:46,700
speak to your vendors and pick an open

00:29:43,669 --> 00:29:48,440
source you know EDD DW or a data Mart

00:29:46,700 --> 00:29:52,390
and finally the same goes for the BI

00:29:48,440 --> 00:29:54,140
right so again this is not a

00:29:52,390 --> 00:29:56,120
prescription that would apply for

00:29:54,140 --> 00:29:58,040
everybody but it's one way of when I

00:29:56,120 --> 00:29:59,720
have conversations with clients and on a

00:29:58,040 --> 00:30:01,970
way in which you can manage the sources

00:29:59,720 --> 00:30:07,040
within the enterprise right last 30

00:30:01,970 --> 00:30:09,020
seconds what's the future gonna be again

00:30:07,040 --> 00:30:11,270
look at the disclaimer below and read it

00:30:09,020 --> 00:30:13,730
very loudly these are not nothing is

00:30:11,270 --> 00:30:14,870
official it's just some of the personal

00:30:13,730 --> 00:30:17,990
observations based on flying

00:30:14,870 --> 00:30:19,820
conversations you'll see Cloud Foundry

00:30:17,990 --> 00:30:21,710
on bare metal somehow or the other in

00:30:19,820 --> 00:30:23,630
the next you know I'd say tops and one

00:30:21,710 --> 00:30:26,870
year if some version of it will be

00:30:23,630 --> 00:30:29,179
available right number one second you

00:30:26,870 --> 00:30:31,070
may want a global resource scheduler one

00:30:29,179 --> 00:30:33,500
that will rule them all right to be able

00:30:31,070 --> 00:30:35,390
to manage across all of them it's nice

00:30:33,500 --> 00:30:36,770
to do it right if your Apple you can

00:30:35,390 --> 00:30:38,780
pull it off when you're building a city

00:30:36,770 --> 00:30:40,610
cloud but it's very hard to pull it off

00:30:38,780 --> 00:30:42,110
in the enterprise very hard because even

00:30:40,610 --> 00:30:44,480
if you want to bring the infrastructure

00:30:42,110 --> 00:30:45,740
together the political you know silos

00:30:44,480 --> 00:30:47,690
are not gonna make that happen

00:30:45,740 --> 00:30:49,130
but what will absolutely accelerate

00:30:47,690 --> 00:30:51,650
changes in new app workloads

00:30:49,130 --> 00:30:53,210
right you know going back to the whole

00:30:51,650 --> 00:30:54,800
bill point steep from you go you're

00:30:53,210 --> 00:30:56,120
going from TPS reports to the point

00:30:54,800 --> 00:30:56,600
where IT is enabling you to do some

00:30:56,120 --> 00:30:58,520
amazing

00:30:56,600 --> 00:31:00,680
stuff so these new app workloads they're

00:30:58,520 --> 00:31:02,360
gonna actually change much faster than

00:31:00,680 --> 00:31:05,300
you think so be prepared for them and

00:31:02,360 --> 00:31:07,820
the last one is you will see I think in

00:31:05,300 --> 00:31:09,920
the next one year at least a couple of

00:31:07,820 --> 00:31:11,030
dozen ISPs get certified on cloud fari

00:31:09,920 --> 00:31:12,800
all right so you can go to the

00:31:11,030 --> 00:31:15,260
marketplace click click and all of them

00:31:12,800 --> 00:31:16,760
you'll see that right so that's all of

00:31:15,260 --> 00:31:19,280
that you know has a direct impact on

00:31:16,760 --> 00:31:20,900
resource management but again this is

00:31:19,280 --> 00:31:22,820
very early we're gonna trying to see

00:31:20,900 --> 00:31:24,310
what exactly the future is going to look

00:31:22,820 --> 00:31:27,590
like but that's some of my perspectives

00:31:24,310 --> 00:31:30,970
said that was it I'm open for questions

00:31:27,590 --> 00:31:30,970
I know I ran over by a few minutes

00:31:35,560 --> 00:31:40,730
absolutely exists that is actual pseudo

00:31:38,120 --> 00:31:42,410
code the real code if you go to github

00:31:40,730 --> 00:31:42,920
the all that exists in the real core

00:31:42,410 --> 00:31:45,860
right now

00:31:42,920 --> 00:31:59,110
absolutely that was not fancy stuff it

00:31:45,860 --> 00:32:03,500
was real stuff yep

00:31:59,110 --> 00:32:07,610
absolutely does and I can't light the

00:32:03,500 --> 00:32:10,430
code is there absolutely yeah I can send

00:32:07,610 --> 00:32:11,840
you the blog post which goes into a

00:32:10,430 --> 00:32:14,480
little bit more detail which again

00:32:11,840 --> 00:32:15,980
references the source code right um it's

00:32:14,480 --> 00:32:18,920
a smart guy I don't know if he's here at

00:32:15,980 --> 00:32:20,270
the session but he's a sharp guy you

00:32:18,920 --> 00:32:23,150
should be here I haven't seen him but he

00:32:20,270 --> 00:32:28,270
should be here he's wrong ok he's one of

00:32:23,150 --> 00:32:28,270
our best engineers any more questions

00:32:31,000 --> 00:32:37,820
sit again that's a good point yeah I

00:32:35,060 --> 00:32:40,010
mean Diego yeah it's a great point Diego

00:32:37,820 --> 00:32:42,770
is a monolithic scheduler it's not a

00:32:40,010 --> 00:32:44,030
two-stage scheduler so again on she

00:32:42,770 --> 00:32:49,810
brought this out specifically in the

00:32:44,030 --> 00:32:52,760
Diego talk we may see a Diego and meses

00:32:49,810 --> 00:32:56,270
plug-in or a kind of integration but

00:32:52,760 --> 00:32:57,650
Diego is you know has more control of

00:32:56,270 --> 00:32:59,030
the resources it knows exactly what's

00:32:57,650 --> 00:32:59,830
happening it's actually running the

00:32:59,030 --> 00:33:02,030
auctions right

00:32:59,830 --> 00:33:04,520
Messer's think of it like a much

00:33:02,030 --> 00:33:06,650
lightweight component in the middle

00:33:04,520 --> 00:33:08,540
right messes on its own is useless right

00:33:06,650 --> 00:33:09,690
you need to have like frameworks like

00:33:08,540 --> 00:33:11,490
marathon or some

00:33:09,690 --> 00:33:13,680
else on top to do the full end-to-end

00:33:11,490 --> 00:33:18,660
work we expect to see Diego and our

00:33:13,680 --> 00:33:21,210
messes as a viable example correct

00:33:18,660 --> 00:33:22,290
that's yeah if you want messes and you

00:33:21,210 --> 00:33:25,110
want Diego that would be the most

00:33:22,290 --> 00:33:27,000
logical way to go yeah like yarn my

00:33:25,110 --> 00:33:29,070
sauce is is similar if you google for it

00:33:27,000 --> 00:33:32,190
little you know yarn messes kubernetes

00:33:29,070 --> 00:33:34,320
messes same idea but goes back to again

00:33:32,190 --> 00:33:36,870
you know in the enterprise building that

00:33:34,320 --> 00:33:39,320
one massive global resource scheduler is

00:33:36,870 --> 00:33:39,320
going to be tricky

00:33:39,530 --> 00:33:49,340
any more questions see it again

00:33:56,540 --> 00:34:01,250
um yeah I mean those are lit last famous

00:33:59,210 --> 00:34:04,520
words when you say is that it later we

00:34:01,250 --> 00:34:06,830
don't want to be you know no Sdn and

00:34:04,520 --> 00:34:08,179
pass are still in the merging topic in

00:34:06,830 --> 00:34:10,630
respect to what we spoke about today

00:34:08,179 --> 00:34:13,160
right right now most of CF assumes

00:34:10,630 --> 00:34:15,740
recently static networks like a VLAN or

00:34:13,160 --> 00:34:17,990
something provision ideally I mean this

00:34:15,740 --> 00:34:20,120
is a common request clients are asking

00:34:17,990 --> 00:34:22,460
and as a part of my a provisioning can I

00:34:20,120 --> 00:34:23,510
provision my network also right on the

00:34:22,460 --> 00:34:26,570
fly

00:34:23,510 --> 00:34:28,790
we haven't seen that you know in the

00:34:26,570 --> 00:34:30,650
product yet but when that happens we

00:34:28,790 --> 00:34:32,570
probably will see Diego get updated to

00:34:30,650 --> 00:34:33,679
include network as one of the

00:34:32,570 --> 00:34:39,220
constraints when you're doing the

00:34:33,679 --> 00:34:39,220
optimization rock good question anymore

00:34:39,250 --> 00:34:44,659
alright thank you

00:34:42,250 --> 00:34:44,659

YouTube URL: https://www.youtube.com/watch?v=YLCQWUGkpCc


