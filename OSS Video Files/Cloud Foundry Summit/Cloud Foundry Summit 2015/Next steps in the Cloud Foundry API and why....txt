Title: Next steps in the Cloud Foundry API and why...
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	Next steps in the Cloud Foundry API and why... - 03 James Myers, Zach Robinson, Luan Santos 720p
Captions: 
	00:00:00,000 --> 00:00:04,020
memory different CPU things like that so

00:00:02,760 --> 00:00:05,580
that's sort of what a proc file is and

00:00:04,020 --> 00:00:07,080
sort of the the idea that what we

00:00:05,580 --> 00:00:08,309
picture this looking like is you have an

00:00:07,080 --> 00:00:10,200
app with your droplet your compiled

00:00:08,309 --> 00:00:13,019
running pips and it has a list of

00:00:10,200 --> 00:00:14,960
multiple commands that can run and those

00:00:13,019 --> 00:00:19,289
are sort of what today's app looks like

00:00:14,960 --> 00:00:21,720
so we look at bringing that into v2 we

00:00:19,289 --> 00:00:23,189
see that we sort of have a limitation

00:00:21,720 --> 00:00:24,720
here and that our existing structure

00:00:23,189 --> 00:00:26,510
doesn't really match this desired

00:00:24,720 --> 00:00:29,640
representation we want for a proc file

00:00:26,510 --> 00:00:31,410
and part of what that is is this tight

00:00:29,640 --> 00:00:34,440
coupling we have in today's app where

00:00:31,410 --> 00:00:36,690
the one app object is our droplet it is

00:00:34,440 --> 00:00:38,129
our package it is our command so when we

00:00:36,690 --> 00:00:39,540
talk about one in separate start

00:00:38,129 --> 00:00:41,370
commands like that we would get from the

00:00:39,540 --> 00:00:42,899
process file we don't really have a

00:00:41,370 --> 00:00:44,640
place to put multiple start commands

00:00:42,899 --> 00:00:47,340
really the only thing we have is add

00:00:44,640 --> 00:00:48,899
more apps right and to do that you're

00:00:47,340 --> 00:00:50,489
getting a copy of all this other stuff

00:00:48,899 --> 00:00:52,770
you're getting a copy of your droplet in

00:00:50,489 --> 00:00:54,449
your package which is sort of anti the

00:00:52,770 --> 00:00:56,579
goal of what a proc file is we want to

00:00:54,449 --> 00:01:00,539
push a thing once so we have this sort

00:00:56,579 --> 00:01:01,800
of this mismatch so that's great but

00:01:00,539 --> 00:01:03,090
maybe we could hide that under the hood

00:01:01,800 --> 00:01:05,519
under the hood we'll just move some data

00:01:03,090 --> 00:01:06,810
around and everything will be great well

00:01:05,519 --> 00:01:08,340
we have another limitation there and

00:01:06,810 --> 00:01:09,930
that's sort of this rigid implementation

00:01:08,340 --> 00:01:12,840
we have in our cloud controller codebase

00:01:09,930 --> 00:01:14,270
and what I mean by that is we take

00:01:12,840 --> 00:01:17,280
advantage of some Ruby meta programming

00:01:14,270 --> 00:01:19,229
where essentially there's this very

00:01:17,280 --> 00:01:21,270
tight coupling between an API request

00:01:19,229 --> 00:01:23,340
and a database table so when you're

00:01:21,270 --> 00:01:25,590
making API requests so for example say a

00:01:23,340 --> 00:01:26,970
v2 app endpoint or a v2 Spaces endpoint

00:01:25,590 --> 00:01:28,710
they're actually going into the shared

00:01:26,970 --> 00:01:29,939
code there's some meta magic that's

00:01:28,710 --> 00:01:32,400
happening that's directing them over to

00:01:29,939 --> 00:01:33,720
a table and because of that there's a

00:01:32,400 --> 00:01:35,310
lot of assumptions made about what that

00:01:33,720 --> 00:01:36,810
table structure looks like and what an

00:01:35,310 --> 00:01:38,520
API request looks like so we don't have

00:01:36,810 --> 00:01:39,810
a lot of room to maneuver it's great if

00:01:38,520 --> 00:01:40,920
we wanted to add something new that fits

00:01:39,810 --> 00:01:42,840
that model because most of the codes

00:01:40,920 --> 00:01:44,490
already done but it doesn't leave us a

00:01:42,840 --> 00:01:45,750
lot of flexibility so if we want say

00:01:44,490 --> 00:01:47,670
spaces to do something different than

00:01:45,750 --> 00:01:50,420
app you change that it's in a shared

00:01:47,670 --> 00:01:53,570
code base it changes everything

00:01:50,420 --> 00:01:56,310
our next limitation is just app itself

00:01:53,570 --> 00:01:58,530
so what we're talking about here is app

00:01:56,310 --> 00:02:00,240
is everything in the system everything

00:01:58,530 --> 00:02:02,430
talks out the API is based around app

00:02:00,240 --> 00:02:04,590
the backend systems know how to run out

00:02:02,430 --> 00:02:05,820
they know how to keep Apple ID so when

00:02:04,590 --> 00:02:07,860
we want to start talking about other

00:02:05,820 --> 00:02:10,890
things we just don't have a definition

00:02:07,860 --> 00:02:11,890
for it so one it makes it hard to change

00:02:10,890 --> 00:02:13,510
what app is

00:02:11,890 --> 00:02:15,520
but that's sort of what we have to do

00:02:13,510 --> 00:02:17,200
here so what are we going to do next

00:02:15,520 --> 00:02:18,580
well we have this sort of mismatch

00:02:17,200 --> 00:02:19,690
domain model where our existing

00:02:18,580 --> 00:02:21,190
structure and our desired structure

00:02:19,690 --> 00:02:22,900
don't match we have a little bit of an

00:02:21,190 --> 00:02:26,440
inflexible code base so we're gonna move

00:02:22,900 --> 00:02:27,910
on to v3 and specifically for v3 we're

00:02:26,440 --> 00:02:28,930
just gonna talk about that we're not

00:02:27,910 --> 00:02:30,760
gonna touch the other things we're not

00:02:28,930 --> 00:02:33,880
going to talk about spaces or users or

00:02:30,760 --> 00:02:35,380
anything but just that so how are we

00:02:33,880 --> 00:02:38,350
gonna get there well today we have our

00:02:35,380 --> 00:02:40,030
API for v2 apps we have our App object

00:02:38,350 --> 00:02:43,390
and it sort of has the things we want in

00:02:40,030 --> 00:02:44,980
it we just need to break it apart so

00:02:43,390 --> 00:02:46,360
that's what we're gonna do we're gonna

00:02:44,980 --> 00:02:47,860
pull out packages we're gonna pull out

00:02:46,360 --> 00:02:49,660
droplets and write pull out processes

00:02:47,860 --> 00:02:50,769
and we're gonna give them their own API

00:02:49,660 --> 00:02:52,600
endpoints so they can actually be

00:02:50,769 --> 00:02:54,640
interacted with and they can be treated

00:02:52,600 --> 00:02:57,190
differently we have a more like robust

00:02:54,640 --> 00:02:58,660
vocabulary to deal with these things and

00:02:57,190 --> 00:03:00,850
what we're gonna do specifically is pull

00:02:58,660 --> 00:03:02,320
v3 app up which is going to be a new

00:03:00,850 --> 00:03:05,050
object and this thing we call process

00:03:02,320 --> 00:03:06,880
like our proc file is really the old v2

00:03:05,050 --> 00:03:09,850
app and managed by the proc file so

00:03:06,880 --> 00:03:11,290
that's kind of important and the reason

00:03:09,850 --> 00:03:12,940
that's important is it means we can

00:03:11,290 --> 00:03:14,350
isolate our changes inside the cloud

00:03:12,940 --> 00:03:16,660
controller codebase

00:03:14,350 --> 00:03:18,130
we don't have to change DEA Diego hm

00:03:16,660 --> 00:03:19,450
9,000 all that health management stuff

00:03:18,130 --> 00:03:24,100
they're still gonna know how to run a

00:03:19,450 --> 00:03:25,840
process which was v2 app so that's kind

00:03:24,100 --> 00:03:30,100
of nice for us so running scaling and

00:03:25,840 --> 00:03:30,880
stopping are all basically done also we

00:03:30,100 --> 00:03:32,620
sort of showed this thing where we have

00:03:30,880 --> 00:03:34,450
this rigid implementation we're gonna go

00:03:32,620 --> 00:03:36,000
ahead and change that so inside the code

00:03:34,450 --> 00:03:38,380
base we're gonna make some changes and

00:03:36,000 --> 00:03:40,780
we're actually gonna have separate code

00:03:38,380 --> 00:03:42,430
for each endpoint novel idea right and

00:03:40,780 --> 00:03:43,750
also you notice here we sort of take

00:03:42,430 --> 00:03:45,640
away the database tables from the

00:03:43,750 --> 00:03:47,320
drawing because it doesn't matter

00:03:45,640 --> 00:03:49,989
anymore it's just an API we can hide

00:03:47,320 --> 00:03:51,519
that stuff under the hood so the ones

00:03:49,989 --> 00:03:54,579
gonna talk a little more about how that

00:03:51,519 --> 00:03:54,760
code change kind of happened for us all

00:03:54,579 --> 00:03:59,200
right

00:03:54,760 --> 00:03:59,680
hi I'll talk about code so Zach mention

00:03:59,200 --> 00:04:02,290
that

00:03:59,680 --> 00:04:05,049
vichu it's rigid in its implementation

00:04:02,290 --> 00:04:06,430
it's tied to the database and therefore

00:04:05,049 --> 00:04:08,470
it's hard should change because of all

00:04:06,430 --> 00:04:09,910
the shared code we have I want to show

00:04:08,470 --> 00:04:12,730
you an example of that and what we mean

00:04:09,910 --> 00:04:16,209
when we say this so this is an example

00:04:12,730 --> 00:04:17,709
of a controller it's a lot if it fits on

00:04:16,209 --> 00:04:19,000
the screen there but it's this is the

00:04:17,709 --> 00:04:21,010
domain controller it does what you

00:04:19,000 --> 00:04:23,560
expect a control to do does the crowd

00:04:21,010 --> 00:04:25,210
operations for domains but the code is

00:04:23,560 --> 00:04:27,550
not actually here the code is

00:04:25,210 --> 00:04:30,069
implemented elsewhere so the first thing

00:04:27,550 --> 00:04:30,970
we see on this controller is not related

00:04:30,069 --> 00:04:32,919
to credit at all

00:04:30,970 --> 00:04:34,840
so this translate validation exception

00:04:32,919 --> 00:04:38,050
here just translates an error code to

00:04:34,840 --> 00:04:39,759
the user it's not related to operating

00:04:38,050 --> 00:04:41,500
the domains themselves so let's just

00:04:39,759 --> 00:04:42,930
take that out of the way and start from

00:04:41,500 --> 00:04:47,169
the top

00:04:42,930 --> 00:04:49,300
sorry so the domain controller inherits

00:04:47,169 --> 00:04:51,160
from model controller motor controllers

00:04:49,300 --> 00:04:52,479
really were all gets implemented it's

00:04:51,160 --> 00:04:54,370
the secret sauce that beats you and

00:04:52,479 --> 00:04:56,199
that's and that's what we mean we share

00:04:54,370 --> 00:04:59,949
we have we say we have that shared code

00:04:56,199 --> 00:05:01,599
between out of the v2 controllers next

00:04:59,949 --> 00:05:04,599
we define out the attributes that the

00:05:01,599 --> 00:05:07,599
API is going to accept and return in

00:05:04,599 --> 00:05:08,229
this case they have to be columns in the

00:05:07,599 --> 00:05:10,210
database

00:05:08,229 --> 00:05:12,940
they're just mappings from database

00:05:10,210 --> 00:05:14,320
should the API then we also do the same

00:05:12,940 --> 00:05:16,389
things for relation so we have two one

00:05:14,320 --> 00:05:19,300
and two many there those are relations

00:05:16,389 --> 00:05:22,780
that the domains model has in the

00:05:19,300 --> 00:05:25,150
database then we have query parameters

00:05:22,780 --> 00:05:27,069
as you expected on the when you're

00:05:25,150 --> 00:05:28,569
listing domains here you can filter your

00:05:27,069 --> 00:05:31,900
domains by those feud's

00:05:28,569 --> 00:05:33,430
that's all that's defining and we define

00:05:31,900 --> 00:05:34,870
the leaf methods the delete method is

00:05:33,430 --> 00:05:36,699
actually the only one you have to define

00:05:34,870 --> 00:05:40,020
explicitly all the other ones are

00:05:36,699 --> 00:05:42,430
implemented by model controller and and

00:05:40,020 --> 00:05:44,409
this one is also going to a matter of

00:05:42,430 --> 00:05:46,180
motor control and that do delete all we

00:05:44,409 --> 00:05:49,930
do here is actually the authorization

00:05:46,180 --> 00:05:52,150
part of it but this is an HP API so

00:05:49,930 --> 00:05:57,820
which end points do we actually define

00:05:52,150 --> 00:05:58,690
here so as I said we said model

00:05:57,820 --> 00:06:01,479
controller will actually implement

00:05:58,690 --> 00:06:04,330
everything for you and it will define

00:06:01,479 --> 00:06:07,810
these five general crud endpoints so

00:06:04,330 --> 00:06:10,990
create read update and delete and they

00:06:07,810 --> 00:06:13,090
it will also define a few end points for

00:06:10,990 --> 00:06:16,690
your relations which may or may not be

00:06:13,090 --> 00:06:19,240
obvious when you look at this so this is

00:06:16,690 --> 00:06:20,620
how great when you when you just need a

00:06:19,240 --> 00:06:22,210
direct map you front database you the

00:06:20,620 --> 00:06:24,610
API you can implement things very

00:06:22,210 --> 00:06:27,099
quickly when you have only one model and

00:06:24,610 --> 00:06:28,960
a few columns but what if you want to

00:06:27,099 --> 00:06:31,419
present a different user what if you

00:06:28,960 --> 00:06:34,449
want to join more more models in one

00:06:31,419 --> 00:06:36,789
response well then you have to hack RA

00:06:34,449 --> 00:06:37,660
out of it and have something like this

00:06:36,789 --> 00:06:39,370
so

00:06:37,660 --> 00:06:44,350
this code from another controller still

00:06:39,370 --> 00:06:46,420
in vici that needed to to run a

00:06:44,350 --> 00:06:51,520
different query and to get different

00:06:46,420 --> 00:06:52,990
models and same response and you know it

00:06:51,520 --> 00:06:55,030
gets a little complicated it's locally

00:06:52,990 --> 00:06:57,160
optimized it's not natural for a

00:06:55,030 --> 00:06:58,990
developer looking into this for a new

00:06:57,160 --> 00:07:01,180
developer looking just you know that

00:06:58,990 --> 00:07:04,660
they have to override this method in a

00:07:01,180 --> 00:07:07,000
controller to get this behavior how did

00:07:04,660 --> 00:07:09,520
we solve this on v3 then what what did

00:07:07,000 --> 00:07:12,010
we do in v3 that makes this better so

00:07:09,520 --> 00:07:13,870
this is a v3 controller now there's a

00:07:12,010 --> 00:07:16,360
lot more code this is only one action in

00:07:13,870 --> 00:07:18,610
the specific controller this is the

00:07:16,360 --> 00:07:20,980
update of AB so this is the ABS

00:07:18,610 --> 00:07:22,660
controller and the update requests on

00:07:20,980 --> 00:07:26,560
that so the first thing we defined is

00:07:22,660 --> 00:07:28,360
actually the path for that action and

00:07:26,560 --> 00:07:31,210
it's really objects on the first line

00:07:28,360 --> 00:07:33,400
there that's what we're doing and after

00:07:31,210 --> 00:07:36,190
that everything just flows through so

00:07:33,400 --> 00:07:38,350
first we have authentication that's just

00:07:36,190 --> 00:07:42,070
doing a basic check that the user has a

00:07:38,350 --> 00:07:45,490
token with the correct also I'll scopes

00:07:42,070 --> 00:07:47,260
and then we do a validation so the user

00:07:45,490 --> 00:07:50,290
sending us some JSON it has to be

00:07:47,260 --> 00:07:51,790
validation and it has to have the

00:07:50,290 --> 00:07:55,780
correct parameters that this controller

00:07:51,790 --> 00:07:58,360
will expect with that data we're gonna

00:07:55,780 --> 00:08:00,970
go and fetch from the database with

00:07:58,360 --> 00:08:03,370
neech what we need to have in memory to

00:08:00,970 --> 00:08:06,730
process this action so this is really

00:08:03,370 --> 00:08:08,700
just doing select queries and this

00:08:06,730 --> 00:08:11,860
fetcher object that we created is a

00:08:08,700 --> 00:08:14,169
first-class object that helps us isolate

00:08:11,860 --> 00:08:17,790
this fetching data fetching behavior

00:08:14,169 --> 00:08:20,169
from all the meta magic which you have

00:08:17,790 --> 00:08:22,419
then we do membership checking so you

00:08:20,169 --> 00:08:23,860
can include funding it can be a member

00:08:22,419 --> 00:08:28,000
of the space in an organization you can

00:08:23,860 --> 00:08:29,980
have different roles and those spaces

00:08:28,000 --> 00:08:32,710
and organizations and in this case you

00:08:29,980 --> 00:08:34,419
have to have the update permission to

00:08:32,710 --> 00:08:37,750
change this app so that's how we're

00:08:34,419 --> 00:08:39,219
doing either and if you if you have all

00:08:37,750 --> 00:08:39,729
those permissions and that everything is

00:08:39,219 --> 00:08:41,380
OK

00:08:39,729 --> 00:08:44,470
we're gonna perform the action so the

00:08:41,380 --> 00:08:46,240
action object that we call app update

00:08:44,470 --> 00:08:49,600
there is another first-class citizen on

00:08:46,240 --> 00:08:50,460
v3 we decided to do out you to pull that

00:08:49,600 --> 00:08:52,560
out

00:08:50,460 --> 00:08:54,150
because it's a really important piece of

00:08:52,560 --> 00:08:56,220
the behavior and it's really important

00:08:54,150 --> 00:08:59,700
that we have that easy to test and in

00:08:56,220 --> 00:09:02,400
the dedicated place and then finally

00:08:59,700 --> 00:09:06,030
when everything goes goes okay we return

00:09:02,400 --> 00:09:09,060
a response to the user 200 okay we use a

00:09:06,030 --> 00:09:12,870
presenter to serialize the app and to

00:09:09,060 --> 00:09:16,470
Jason and they're off the user goes so I

00:09:12,870 --> 00:09:18,870
mentioned these shoe new paradigms that

00:09:16,470 --> 00:09:21,630
we introduced in v3 so the fetcher is

00:09:18,870 --> 00:09:24,930
the first one of those and what it is

00:09:21,630 --> 00:09:27,090
it's really just a query object this

00:09:24,930 --> 00:09:30,960
this object in particular is quite big

00:09:27,090 --> 00:09:34,110
and it's actually just listened listing

00:09:30,960 --> 00:09:36,870
out the apps either in the space or in

00:09:34,110 --> 00:09:39,470
the or in the system and it has all the

00:09:36,870 --> 00:09:41,910
logic necessary to create that query and

00:09:39,470 --> 00:09:43,380
no other queries are gonna happen

00:09:41,910 --> 00:09:45,840
outside of this because we actually

00:09:43,380 --> 00:09:48,240
return just the object the objects

00:09:45,840 --> 00:09:50,910
themselves to the user so you're you get

00:09:48,240 --> 00:09:53,130
no surprise queries when you're when

00:09:50,910 --> 00:09:55,050
you're running a system now the other

00:09:53,130 --> 00:09:56,370
first class object we mentioned is the

00:09:55,050 --> 00:09:58,830
action object

00:09:56,370 --> 00:10:03,720
so this epilepticus is the example we

00:09:58,830 --> 00:10:05,730
picked and again it's isolated

00:10:03,720 --> 00:10:07,830
there is no shared code between this

00:10:05,730 --> 00:10:10,230
this action and other actions and system

00:10:07,830 --> 00:10:13,610
everything that happens for this

00:10:10,230 --> 00:10:16,020
controller action happens here and and

00:10:13,610 --> 00:10:17,580
because of this we it's again it's easy

00:10:16,020 --> 00:10:22,650
stash is isolated there are no

00:10:17,580 --> 00:10:24,960
unintended side effects so this is a lot

00:10:22,650 --> 00:10:27,540
more code right we had to write a lot

00:10:24,960 --> 00:10:31,940
more code in v3 then we had to write in

00:10:27,540 --> 00:10:31,940
a few wait why is this better

00:10:31,970 --> 00:10:41,400
well things I said by doing data X's up

00:10:37,980 --> 00:10:45,240
front we get no unintended sorry no

00:10:41,400 --> 00:10:47,400
unintended queries and we have one place

00:10:45,240 --> 00:10:50,160
we can test and optimize that single

00:10:47,400 --> 00:10:53,870
query or those many queries you might

00:10:50,160 --> 00:10:56,730
need for one request and by having the

00:10:53,870 --> 00:10:59,820
separate action we get a similar benefit

00:10:56,730 --> 00:11:02,190
we can very we can ensure database

00:10:59,820 --> 00:11:03,320
consistency transaction locking and all

00:11:02,190 --> 00:11:04,910
of that in

00:11:03,320 --> 00:11:07,790
is one object and we confess that in

00:11:04,910 --> 00:11:10,180
isolation and my favorite one is

00:11:07,790 --> 00:11:12,440
actually be clear and easy flow because

00:11:10,180 --> 00:11:14,030
plus all in these open source so we get

00:11:12,440 --> 00:11:16,490
a lot of people looking at our code base

00:11:14,030 --> 00:11:18,020
and our teams themselves get a lot of

00:11:16,490 --> 00:11:21,410
rotation so we get new developers on the

00:11:18,020 --> 00:11:23,270
team very often and it's very important

00:11:21,410 --> 00:11:26,510
that those developers of both on the

00:11:23,270 --> 00:11:28,370
community and on the team get you get

00:11:26,510 --> 00:11:29,750
you get to the code and understand

00:11:28,370 --> 00:11:32,480
what's happening rather than having to

00:11:29,750 --> 00:11:34,180
dig through the code base you understand

00:11:32,480 --> 00:11:39,320
what code is actually being generated

00:11:34,180 --> 00:11:42,740
and the last last one is by expecting

00:11:39,320 --> 00:11:45,340
all these micro services let's say that

00:11:42,740 --> 00:11:47,990
inside the code base we move towards a

00:11:45,340 --> 00:11:50,030
potential architectural change if we

00:11:47,990 --> 00:11:55,010
need to extract those components into

00:11:50,030 --> 00:11:59,290
actual separate services we have a place

00:11:55,010 --> 00:12:02,270
to do that - yeah that's how I have

00:11:59,290 --> 00:12:07,490
Jim's going to talk to you about the API

00:12:02,270 --> 00:12:12,050
changes we've made yeah so let's talk

00:12:07,490 --> 00:12:13,940
about API design in v3 first let's take

00:12:12,050 --> 00:12:16,640
a step back and let's look at what a v2

00:12:13,940 --> 00:12:18,080
app response looks like today what

00:12:16,640 --> 00:12:20,180
you're gonna see is at the very top

00:12:18,080 --> 00:12:22,850
there we have a metadata section this

00:12:20,180 --> 00:12:24,800
contains basic information such as the

00:12:22,850 --> 00:12:26,930
identifiers the path from which you can

00:12:24,800 --> 00:12:28,700
fetch the current object and time stamps

00:12:26,930 --> 00:12:30,320
like created and updated at you'll also

00:12:28,700 --> 00:12:33,650
see that there's a really big section

00:12:30,320 --> 00:12:35,780
entity entity has truly become a dumping

00:12:33,650 --> 00:12:37,250
ground for any information that might be

00:12:35,780 --> 00:12:39,230
associated with the object that you're

00:12:37,250 --> 00:12:41,630
fetching so what you're gonna notice

00:12:39,230 --> 00:12:44,090
here is that this is mostly a homegrown

00:12:41,630 --> 00:12:46,370
standard it doesn't really adhere to any

00:12:44,090 --> 00:12:48,710
like patterns and we find that it's

00:12:46,370 --> 00:12:52,130
drifting from the way that public API is

00:12:48,710 --> 00:12:54,470
are actually moving towards today the

00:12:52,130 --> 00:12:57,530
entity section is also populated with a

00:12:54,470 --> 00:12:59,530
lot of irrelevant excessive data and the

00:12:57,530 --> 00:13:02,120
reason for this is because the v2 API

00:12:59,530 --> 00:13:04,130
heavily reflects the database

00:13:02,120 --> 00:13:07,160
representation of the model that's being

00:13:04,130 --> 00:13:08,510
displayed this problem gets exacerbated

00:13:07,160 --> 00:13:11,240
due to the fact that as talked about

00:13:08,510 --> 00:13:13,160
earlier app was a monolith it's huge it

00:13:11,240 --> 00:13:14,570
has too much information and when I'm

00:13:13,160 --> 00:13:16,750
fetching an app I don't really care

00:13:14,570 --> 00:13:19,990
about staging information pack

00:13:16,750 --> 00:13:21,130
information it's just complex lastly

00:13:19,990 --> 00:13:23,650
we're gonna notice that there's some

00:13:21,130 --> 00:13:25,780
duplicate information here there's space

00:13:23,650 --> 00:13:27,340
good there's also space URL we're

00:13:25,780 --> 00:13:29,320
providing two ways to fetch an

00:13:27,340 --> 00:13:31,840
Associated object and it's just becoming

00:13:29,320 --> 00:13:34,050
a little bit unwieldy so let's take a

00:13:31,840 --> 00:13:35,890
look at what v3 API responses look like

00:13:34,050 --> 00:13:38,350
what you'll notice is what we've

00:13:35,890 --> 00:13:40,240
actually taken inspiration from the

00:13:38,350 --> 00:13:42,910
hypertext application language otherwise

00:13:40,240 --> 00:13:45,250
known as how that's what we've done is

00:13:42,910 --> 00:13:46,750
we've simplified the response we removed

00:13:45,250 --> 00:13:48,700
the metadata section we remove the

00:13:46,750 --> 00:13:51,550
entity section and we moved most of the

00:13:48,700 --> 00:13:53,110
data top-level now when I'm getting a

00:13:51,550 --> 00:13:54,910
response I'm getting what's localized

00:13:53,110 --> 00:13:57,820
when I'm fetching in this case it's an

00:13:54,910 --> 00:13:59,710
app I'm getting named gooood state and

00:13:57,820 --> 00:14:02,230
some other basic information environment

00:13:59,710 --> 00:14:04,360
variables pretty basic another key point

00:14:02,230 --> 00:14:06,370
to this Hal pattern is this link section

00:14:04,360 --> 00:14:08,350
right here the way I like to think about

00:14:06,370 --> 00:14:09,970
the link section is that it's like a map

00:14:08,350 --> 00:14:12,610
for the user to help them navigate

00:14:09,970 --> 00:14:14,440
through our API it contains paths to

00:14:12,610 --> 00:14:16,090
reach the current object to fetch

00:14:14,440 --> 00:14:18,400
associated objects that you're going to

00:14:16,090 --> 00:14:19,990
care about but also something that we're

00:14:18,400 --> 00:14:23,170
working on to clean up user interactions

00:14:19,990 --> 00:14:24,430
API actions themselves so let's take a

00:14:23,170 --> 00:14:27,370
step back and think about how you might

00:14:24,430 --> 00:14:29,800
start an application in v2 currently

00:14:27,370 --> 00:14:32,140
what you do is you just update the state

00:14:29,800 --> 00:14:35,380
field to your desired state started

00:14:32,140 --> 00:14:36,550
stopped it's pretty simple but let's

00:14:35,380 --> 00:14:38,980
consider a different case

00:14:36,550 --> 00:14:40,750
now I'm scaling my memory what do I have

00:14:38,980 --> 00:14:42,339
to do in this instance I have to change

00:14:40,750 --> 00:14:45,339
the memory field to the value that I

00:14:42,339 --> 00:14:47,770
want but then I also have to restart or

00:14:45,339 --> 00:14:50,320
restage my application it's this hidden

00:14:47,770 --> 00:14:53,110
complexity in the v2 API that makes it

00:14:50,320 --> 00:14:55,060
complicated for users to use so our goal

00:14:53,110 --> 00:14:56,950
with this is to actually design a

00:14:55,060 --> 00:14:58,240
different way for users to interact with

00:14:56,950 --> 00:15:00,220
our API to achieve the goals that they

00:14:58,240 --> 00:15:03,130
want and so let's take a look at how you

00:15:00,220 --> 00:15:05,170
might start an application in v3 you

00:15:03,130 --> 00:15:08,589
just call the start and stop endpoints

00:15:05,170 --> 00:15:11,440
off of the off of the app what about

00:15:08,589 --> 00:15:13,360
scaling same thing you just call the

00:15:11,440 --> 00:15:16,570
scale endpoint you provide instances

00:15:13,360 --> 00:15:18,610
memory disk this endpoint then takes

00:15:16,570 --> 00:15:20,110
care of the hidden complexity so that

00:15:18,610 --> 00:15:22,060
you don't need to know the internals of

00:15:20,110 --> 00:15:23,740
Cloud Foundry in order to actually do

00:15:22,060 --> 00:15:27,459
what you want you just call it these

00:15:23,740 --> 00:15:28,930
actions through our API another area

00:15:27,459 --> 00:15:31,000
that we try to tackle is query

00:15:28,930 --> 00:15:33,670
parameters so in Viets

00:15:31,000 --> 00:15:36,009
if I wanted to filter a collection by in

00:15:33,670 --> 00:15:38,019
this case name for example I had to know

00:15:36,009 --> 00:15:39,160
that this Q query parameter existed and

00:15:38,019 --> 00:15:42,360
then I had to know this weird

00:15:39,160 --> 00:15:45,220
non-standard syntax with key colon value

00:15:42,360 --> 00:15:47,920
this was pretty confusing for users it's

00:15:45,220 --> 00:15:50,319
not only hard to read from like a path

00:15:47,920 --> 00:15:52,420
perspective but it was also increasingly

00:15:50,319 --> 00:15:54,250
difficult for us to deal with in code so

00:15:52,420 --> 00:15:56,769
we've tried to do and what you might

00:15:54,250 --> 00:15:58,870
expect is we standardize our query

00:15:56,769 --> 00:16:00,670
parameters format we took the query

00:15:58,870 --> 00:16:02,050
parameters and we move them top level so

00:16:00,670 --> 00:16:04,959
now when I'm filtering on collections

00:16:02,050 --> 00:16:06,970
all I need to say is names equals it's

00:16:04,959 --> 00:16:09,279
pretty simple and it's what I think

00:16:06,970 --> 00:16:12,339
users are most likely to know with

00:16:09,279 --> 00:16:13,930
experience with previous ap is some

00:16:12,339 --> 00:16:16,180
other things that we've tackled in query

00:16:13,930 --> 00:16:18,759
parameters is in line relations depth

00:16:16,180 --> 00:16:22,389
what in line relations depth did in v2

00:16:18,759 --> 00:16:25,300
is that it allowed a user to expand

00:16:22,389 --> 00:16:27,189
nested associations through the API when

00:16:25,300 --> 00:16:28,959
I'm fetching an app I can also expand

00:16:27,189 --> 00:16:31,839
and get the space and other associated

00:16:28,959 --> 00:16:34,449
objects this was dangerous because it

00:16:31,839 --> 00:16:37,420
allowed users to dump a large portion of

00:16:34,449 --> 00:16:39,430
our database in one API call it often

00:16:37,420 --> 00:16:41,170
resulted in expensive queries and we

00:16:39,430 --> 00:16:43,240
were losing control of our data access

00:16:41,170 --> 00:16:46,000
so by removing this we're really trying

00:16:43,240 --> 00:16:47,709
to make users fetch explicitly the data

00:16:46,000 --> 00:16:50,079
that they want when they're making API

00:16:47,709 --> 00:16:51,790
calls another thing that we've done is

00:16:50,079 --> 00:16:53,410
we've just made our pagination

00:16:51,790 --> 00:16:56,490
parameters a little more explicit a

00:16:53,410 --> 00:17:00,160
little more clear and easier to use

00:16:56,490 --> 00:17:02,379
so with this overhaul to coat API design

00:17:00,160 --> 00:17:04,150
and domain representation we have some

00:17:02,379 --> 00:17:06,579
pretty neat side effects for the future

00:17:04,150 --> 00:17:09,339
I think the most important one is that

00:17:06,579 --> 00:17:11,199
staging and running are now independent

00:17:09,339 --> 00:17:13,659
things they're no longer tied to each

00:17:11,199 --> 00:17:16,539
other I can now stage a package in v3

00:17:13,659 --> 00:17:18,699
while I still have my app running in v3

00:17:16,539 --> 00:17:21,130
the only thing that bridges these two

00:17:18,699 --> 00:17:23,500
concepts is user interaction user

00:17:21,130 --> 00:17:25,600
actions through the API another huge

00:17:23,500 --> 00:17:28,329
thing is we've moved some concepts such

00:17:25,600 --> 00:17:30,970
as processes droplets and packages to

00:17:28,329 --> 00:17:32,049
the top level in our domain what that's

00:17:30,970 --> 00:17:33,460
going to help us with is it's going to

00:17:32,049 --> 00:17:35,590
give us the building blocks for new

00:17:33,460 --> 00:17:37,179
features because the word on the street

00:17:35,590 --> 00:17:39,010
is you know product wants some cool

00:17:37,179 --> 00:17:41,169
stuff like zero downtime deploys

00:17:39,010 --> 00:17:43,419
rollbacks and even like different

00:17:41,169 --> 00:17:44,650
package types so let's take a look at

00:17:43,419 --> 00:17:47,680
what a zero downtime deploy

00:17:44,650 --> 00:17:49,840
might look like in the new v3 world what

00:17:47,680 --> 00:17:52,450
you can see here is you create a package

00:17:49,840 --> 00:17:54,640
you upload some bits after that your

00:17:52,450 --> 00:17:55,720
stage it and you make a droplet and then

00:17:54,640 --> 00:17:58,450
you're going to associate it with your

00:17:55,720 --> 00:18:00,310
application this can now all happen in

00:17:58,450 --> 00:18:02,830
the staging realm it does not actually

00:18:00,310 --> 00:18:04,870
affect the running application in v2 you

00:18:02,830 --> 00:18:06,160
would need to stop your application do

00:18:04,870 --> 00:18:07,960
these actions and then start your

00:18:06,160 --> 00:18:09,820
application this can now all happen

00:18:07,960 --> 00:18:11,320
separately and then we have a final API

00:18:09,820 --> 00:18:12,700
call to tie this in together and

00:18:11,320 --> 00:18:15,940
actually take effect in the running

00:18:12,700 --> 00:18:17,920
world another big thing is rollbacks

00:18:15,940 --> 00:18:20,230
here we have an application that's

00:18:17,920 --> 00:18:22,180
associated with a current droplet if I

00:18:20,230 --> 00:18:23,980
wanted to assign it to a new droplet all

00:18:22,180 --> 00:18:26,170
I have to do is call the assignment

00:18:23,980 --> 00:18:27,580
method just put two v3 apps

00:18:26,170 --> 00:18:29,530
gooood I think it's actually called

00:18:27,580 --> 00:18:31,690
assigned current droplet now but let's

00:18:29,530 --> 00:18:34,330
say this droplet has bugs in it the code

00:18:31,690 --> 00:18:36,190
is bad you know you want to go back now

00:18:34,330 --> 00:18:38,350
that we've moved droplets to a top-level

00:18:36,190 --> 00:18:40,780
domain representation this concept is

00:18:38,350 --> 00:18:43,330
really easy to envision all you need to

00:18:40,780 --> 00:18:46,750
do is just reassign it back to the old

00:18:43,330 --> 00:18:49,510
droplet this is huge lastly package

00:18:46,750 --> 00:18:51,610
types we want docker we want github we

00:18:49,510 --> 00:18:53,680
want bits we want them all now all you

00:18:51,610 --> 00:18:56,110
have to do is once again implement the

00:18:53,680 --> 00:18:58,750
package concept in cloud controller

00:18:56,110 --> 00:19:00,070
because it's a top-level object and then

00:18:58,750 --> 00:19:01,360
just plug it into the existing

00:19:00,070 --> 00:19:05,350
infrastructure and it should work

00:19:01,360 --> 00:19:06,580
seamlessly with your applications lastly

00:19:05,350 --> 00:19:08,560
I know you guys are all probably

00:19:06,580 --> 00:19:10,780
concerned about how your v2 apps are

00:19:08,560 --> 00:19:12,700
gonna make their way to v3 what we're

00:19:10,780 --> 00:19:15,100
really hoping for is a seamless transfer

00:19:12,700 --> 00:19:17,530
from v2 to v3 and what I mean by this is

00:19:15,100 --> 00:19:20,200
we're gonna try and implement v2 in

00:19:17,530 --> 00:19:22,030
terms of v3 data under the hood this

00:19:20,200 --> 00:19:24,520
means that when I create a v2 app I'm

00:19:22,030 --> 00:19:26,860
actually going to create a v3 app but

00:19:24,520 --> 00:19:28,420
with one single web process and we'll

00:19:26,860 --> 00:19:30,940
have data migrations they're gonna take

00:19:28,420 --> 00:19:33,160
care of all existing data move it into

00:19:30,940 --> 00:19:34,810
the v3 data representation and then v2

00:19:33,160 --> 00:19:37,780
and v3 should work seamlessly

00:19:34,810 --> 00:19:39,550
side-by-side hopefully once v3 is

00:19:37,780 --> 00:19:42,840
finished you guys will have all your v2

00:19:39,550 --> 00:19:46,150
apps running in the v3 world

00:19:42,840 --> 00:19:48,400
lastly feel free to check out our API

00:19:46,150 --> 00:19:51,910
Doc's at a API Doc's Cloud Foundry Dahl

00:19:48,400 --> 00:19:54,030
work thanks for listening and uh any

00:19:51,910 --> 00:19:54,030
questions

00:20:28,220 --> 00:20:32,539
sure so the the first question was are

00:20:31,399 --> 00:20:34,580
we going to provide a guide for people

00:20:32,539 --> 00:20:37,549
who have implemented clients against the

00:20:34,580 --> 00:20:38,600
v2 API and want to move to v3 and I

00:20:37,549 --> 00:20:40,600
think a lot of its going to shake out

00:20:38,600 --> 00:20:43,070
when we have our CLI start moving over

00:20:40,600 --> 00:20:44,570
we're gonna sort of learn the little

00:20:43,070 --> 00:20:46,039
edge cases and the bugs and hopefully

00:20:44,570 --> 00:20:48,470
we'll put some good documentation

00:20:46,039 --> 00:20:51,740
together so hopefully we'll kind of well

00:20:48,470 --> 00:20:53,059
we'll test that out that track a second

00:20:51,740 --> 00:20:54,649
question was because we're moving in

00:20:53,059 --> 00:20:56,450
line relation steps how do I get things

00:20:54,649 --> 00:20:58,879
that I actually do want in one API call

00:20:56,450 --> 00:21:01,159
so we don't have a way of doing that

00:20:58,879 --> 00:21:03,129
right now what I envision is doing so

00:21:01,159 --> 00:21:05,029
the issue if in line relation steps was

00:21:03,129 --> 00:21:06,769
since we had that meta program and made

00:21:05,029 --> 00:21:08,149
assumptions about the association so it

00:21:06,769 --> 00:21:09,559
didn't said know that you wanted space

00:21:08,149 --> 00:21:11,750
or org it just said anything that

00:21:09,559 --> 00:21:14,299
happens touching give me all that stuff

00:21:11,750 --> 00:21:15,799
right so we want to make that more

00:21:14,299 --> 00:21:17,120
explicit so the way I imagine that

00:21:15,799 --> 00:21:19,250
happening is us adding a query parameter

00:21:17,120 --> 00:21:20,990
where you can say in this response embed

00:21:19,250 --> 00:21:22,429
a space embed and org and then you

00:21:20,990 --> 00:21:23,990
specifically ask for what you want and

00:21:22,429 --> 00:21:25,490
you only get that and we get control

00:21:23,990 --> 00:21:27,850
over it so our queries don't run away

00:21:25,490 --> 00:21:27,850
from us

00:21:37,490 --> 00:21:44,150
good question so right now like I said

00:21:42,320 --> 00:21:45,380
we're actually marking is experimental

00:21:44,150 --> 00:21:48,280
so if you check out our API Docs you can

00:21:45,380 --> 00:21:49,760
see the experimental sections basically

00:21:48,280 --> 00:21:51,170
when it's done

00:21:49,760 --> 00:21:53,180
which I think will essentially be when

00:21:51,170 --> 00:21:55,690
the CLI can consume it properly and some

00:21:53,180 --> 00:21:55,690
other clients

00:22:17,750 --> 00:22:23,850
wait when you say that we are combining

00:22:20,580 --> 00:22:25,710
the scale action into one core is it

00:22:23,850 --> 00:22:27,990
going to restart all the applications

00:22:25,710 --> 00:22:30,480
this in order to complete the scale like

00:22:27,990 --> 00:22:32,070
apply the new memories Eddie yeah it's

00:22:30,480 --> 00:22:33,389
actually gonna when we're done with it

00:22:32,070 --> 00:22:35,279
it'll actually just apply everything for

00:22:33,389 --> 00:22:36,779
you so it'll be like it'll just happen

00:22:35,279 --> 00:22:38,429
under the hood you'll say I want this to

00:22:36,779 --> 00:22:40,620
happen and the runtime will go through

00:22:38,429 --> 00:22:42,510
and make that hat make that true so it

00:22:40,620 --> 00:22:44,460
will be down you know really updated

00:22:42,510 --> 00:22:45,929
kind of stout to make sure there's no

00:22:44,460 --> 00:22:49,200
downtime

00:22:45,929 --> 00:22:51,630
yep that's the idea well if you're just

00:22:49,200 --> 00:22:53,429
changing the number of instances you

00:22:51,630 --> 00:22:54,870
shouldn't get a restart you'll get a

00:22:53,429 --> 00:23:01,919
restart if you're changing memory and

00:22:54,870 --> 00:23:03,539
that kind of thing what was your biggest

00:23:01,919 --> 00:23:06,510
what was your biggest challenge and

00:23:03,539 --> 00:23:07,649
adopting a howl based approach sorry

00:23:06,510 --> 00:23:18,000
could you repeat the first part of that

00:23:07,649 --> 00:23:19,409
again no it wasn't actually too

00:23:18,000 --> 00:23:21,149
challenging it kind of just flows it's

00:23:19,409 --> 00:23:22,889
more just it gives us a lot of

00:23:21,149 --> 00:23:24,630
flexibility since we're not tackling all

00:23:22,889 --> 00:23:26,130
the end points so when we say an

00:23:24,630 --> 00:23:27,360
association to a space for example if

00:23:26,130 --> 00:23:30,090
you look at those links that points to

00:23:27,360 --> 00:23:32,250
v2 in the future if we ever implement a

00:23:30,090 --> 00:23:34,889
v3 version of space we can just sort of

00:23:32,250 --> 00:23:36,539
swap that out which is pretty nice but

00:23:34,889 --> 00:23:42,330
yeah it's actually pretty easy it's

00:23:36,539 --> 00:23:44,600
mostly just presentation logic hi what

00:23:42,330 --> 00:23:47,730
kind of changes do you anticipate with

00:23:44,600 --> 00:23:54,600
services and the service broker API

00:23:47,730 --> 00:23:56,490
standards oh okay so that's so there's

00:23:54,600 --> 00:23:58,470
actually so surprised there's actually

00:23:56,490 --> 00:24:00,110
another team that works on api's in

00:23:58,470 --> 00:24:02,549
Cloud Foundry so there's a services team

00:24:00,110 --> 00:24:04,620
and they work pretty independently of

00:24:02,549 --> 00:24:07,490
this so I'm not exactly sure what their

00:24:04,620 --> 00:24:07,490
their schedule looks like

00:24:11,580 --> 00:24:19,590
three-fifty talking this room cool any

00:24:17,320 --> 00:24:19,590
others

00:24:27,120 --> 00:24:30,620
so within v3

00:24:31,900 --> 00:24:41,120
as things move over will become

00:24:34,190 --> 00:24:42,320
consistent in that world cool looks like

00:24:41,120 --> 00:24:43,700
that's it thanks a lot guys

00:24:42,320 --> 00:24:46,910
thank you

00:24:43,700 --> 00:24:46,910

YouTube URL: https://www.youtube.com/watch?v=Cz3rKCHicf4


