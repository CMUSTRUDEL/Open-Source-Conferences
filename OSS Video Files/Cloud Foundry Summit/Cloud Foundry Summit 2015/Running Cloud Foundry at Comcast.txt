Title: Running Cloud Foundry at Comcast
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	Running Cloud Foundry at Comcast - 02 Neville George, Sam Guerrero, Tim Leong, Sergey Matochkin 720p
Captions: 
	00:00:00,030 --> 00:00:07,290
our application development teams use

00:00:02,220 --> 00:00:09,150
our platforms to to run and develop key

00:00:07,290 --> 00:00:11,370
applications that some of you might have

00:00:09,150 --> 00:00:15,030
might be familiar with as Comcast

00:00:11,370 --> 00:00:18,570
customers so these platforms can include

00:00:15,030 --> 00:00:21,449
things like like OpenStack or VMware and

00:00:18,570 --> 00:00:23,699
obviously Cloud Foundry just a quick

00:00:21,449 --> 00:00:25,109
note next week for the OpenStack summit

00:00:23,699 --> 00:00:26,550
we're also going to be present there so

00:00:25,109 --> 00:00:28,289
anybody who's attending that we look

00:00:26,550 --> 00:00:32,160
forward to seeing you at that at that

00:00:28,289 --> 00:00:35,130
conference as well so anyway I sit on

00:00:32,160 --> 00:00:36,719
our cloud architecture team so we

00:00:35,130 --> 00:00:39,480
provide strategic direction for cloud

00:00:36,719 --> 00:00:41,160
services and it was actually our team

00:00:39,480 --> 00:00:42,660
that that made the decision to go with

00:00:41,160 --> 00:00:44,190
Cloud Foundry as opposed to some of the

00:00:42,660 --> 00:00:47,000
other past providers that exist out

00:00:44,190 --> 00:00:49,170
there and I'd be I'd welcome any

00:00:47,000 --> 00:00:51,059
conversation about why we decided way

00:00:49,170 --> 00:00:55,020
why we made that decision with any of

00:00:51,059 --> 00:00:58,620
you throughout the conference no talk to

00:00:55,020 --> 00:01:00,539
you about is a is a challenge we came up

00:00:58,620 --> 00:01:03,480
with in supporting custom URLs for our

00:01:00,539 --> 00:01:07,710
customers so I'll be talking to you

00:01:03,480 --> 00:01:11,130
about that a little bit Sergei is our

00:01:07,710 --> 00:01:13,650
Application Platform architect and what

00:01:11,130 --> 00:01:15,930
he does is he works with our development

00:01:13,650 --> 00:01:18,150
teams and make it they are leveraging

00:01:15,930 --> 00:01:20,009
proper architectures and design patterns

00:01:18,150 --> 00:01:21,920
that fit well within the cloud I think

00:01:20,009 --> 00:01:25,200
everybody's aware of the 12 factor app

00:01:21,920 --> 00:01:27,479
and Sergei is the the champion for that

00:01:25,200 --> 00:01:29,490
in our company so he he's going to talk

00:01:27,479 --> 00:01:31,079
to you a little bit about some of the

00:01:29,490 --> 00:01:32,729
custom service brokers that he wrote

00:01:31,079 --> 00:01:38,640
that that provide a lot of value to our

00:01:32,729 --> 00:01:41,460
to our development teams sam and neville

00:01:38,640 --> 00:01:42,509
are our cloud engineers and they work on

00:01:41,460 --> 00:01:44,220
our engineering team and they're going

00:01:42,509 --> 00:01:46,229
to talk to you about what it's like to

00:01:44,220 --> 00:01:47,399
take cloud foundry and run it within an

00:01:46,229 --> 00:01:50,399
engineering team and we'll kind of

00:01:47,399 --> 00:01:52,770
change in mindset that takes so that

00:01:50,399 --> 00:01:58,619
will that will be pretty interesting as

00:01:52,770 --> 00:02:01,500
well so first challenge I'm going to

00:01:58,619 --> 00:02:05,100
talk to you about is custom URLs so this

00:02:01,500 --> 00:02:07,610
seems like a relatively easy problem but

00:02:05,100 --> 00:02:10,709
it it added some complexity for us

00:02:07,610 --> 00:02:12,710
obviously cloud foundry supports custom

00:02:10,709 --> 00:02:14,390
domains within cloud foundry

00:02:12,710 --> 00:02:16,310
it allows people to choose their own

00:02:14,390 --> 00:02:18,790
hostname so that their URLs can be

00:02:16,310 --> 00:02:23,510
whatever they want to make it however

00:02:18,790 --> 00:02:26,900
when when you add things like global

00:02:23,510 --> 00:02:28,640
availability making sure that a single

00:02:26,900 --> 00:02:30,890
site can be hosted on multiple Cloud

00:02:28,640 --> 00:02:35,090
Foundry instances and then the URL

00:02:30,890 --> 00:02:37,040
hosted at a GS lb layer so it can be

00:02:35,090 --> 00:02:39,800
globally of a large geographically

00:02:37,040 --> 00:02:42,110
available can present some challenges

00:02:39,800 --> 00:02:44,270
that URL once it makes it down to Cloud

00:02:42,110 --> 00:02:46,580
Foundry how does it route that traffic

00:02:44,270 --> 00:02:50,390
now that it's it's it's trying to handle

00:02:46,580 --> 00:02:53,750
a URL that it is foreign to it and and

00:02:50,390 --> 00:02:56,030
it has to be supported on both sites and

00:02:53,750 --> 00:02:58,580
then how do you enable SSL for some

00:02:56,030 --> 00:03:01,790
situation like that and then also how do

00:02:58,580 --> 00:03:03,680
you make it on demand so the first thing

00:03:01,790 --> 00:03:06,170
I'm going to talk to you about is HTTP

00:03:03,680 --> 00:03:07,730
host header replacement so basically

00:03:06,170 --> 00:03:10,940
when that URL makes it down to a local

00:03:07,730 --> 00:03:13,430
Cloud Foundry instance we have our load

00:03:10,940 --> 00:03:15,650
balance layer do header replacements on

00:03:13,430 --> 00:03:17,690
the HTTP layer and what that will do is

00:03:15,650 --> 00:03:19,700
allow Cloud Foundry to understand where

00:03:17,690 --> 00:03:23,540
to route that traffic based on how our

00:03:19,700 --> 00:03:27,560
hie proxy layers translate one URL into

00:03:23,540 --> 00:03:30,590
a locally hosted URL and and that would

00:03:27,560 --> 00:03:33,130
enable GSLV support so that people can

00:03:30,590 --> 00:03:35,090
have a globally available URL that

00:03:33,130 --> 00:03:38,510
translates properly once it makes it

00:03:35,090 --> 00:03:41,000
down and then multiple SSL Certificates

00:03:38,510 --> 00:03:42,380
so when you have multiple URLs that need

00:03:41,000 --> 00:03:44,030
SSL enablement you're going to have a

00:03:42,380 --> 00:03:46,400
bunch of certificates and those

00:03:44,030 --> 00:03:48,170
certificates will will need to be hosted

00:03:46,400 --> 00:03:50,480
on your H a proxy later and there going

00:03:48,170 --> 00:03:52,700
to be multiple H a proxy are multiple

00:03:50,480 --> 00:03:54,650
certificates for a single H a proxy

00:03:52,700 --> 00:03:57,940
layer so that presented some challenges

00:03:54,650 --> 00:04:00,770
for us as well how do we get around that

00:03:57,940 --> 00:04:03,170
so what we do is is we leverage puppet

00:04:00,770 --> 00:04:06,880
so puppet is responsible for making sure

00:04:03,170 --> 00:04:09,380
that the HTTP header replacements are

00:04:06,880 --> 00:04:12,860
properly injected into the H a proxy

00:04:09,380 --> 00:04:16,340
configs and we put hero in front of that

00:04:12,860 --> 00:04:18,620
so that it so that the the the values

00:04:16,340 --> 00:04:20,330
are stored in a database and what that

00:04:18,620 --> 00:04:22,640
enables for you is that you can put any

00:04:20,330 --> 00:04:24,680
web store in front of that any UI that

00:04:22,640 --> 00:04:26,540
you want to put in front of your hero

00:04:24,680 --> 00:04:28,010
database and it'll dynamically update

00:04:26,540 --> 00:04:29,660
the database and dynamically update

00:04:28,010 --> 00:04:32,540
puppet and then update the H a proxy

00:04:29,660 --> 00:04:35,090
layer and this this works well for H a

00:04:32,540 --> 00:04:36,770
for HTTP headers and we can make it on

00:04:35,090 --> 00:04:39,440
demand for our customers and it also

00:04:36,770 --> 00:04:42,020
works with with SSL Certificates so if

00:04:39,440 --> 00:04:44,480
our if our users need SSL certificates

00:04:42,020 --> 00:04:46,460
that are that are custom or specific to

00:04:44,480 --> 00:04:48,050
their application they could do it

00:04:46,460 --> 00:04:49,460
through that service as well and as long

00:04:48,050 --> 00:04:52,250
as you're a cheap proxy layer supports

00:04:49,460 --> 00:04:55,340
sni you can multi you can support

00:04:52,250 --> 00:04:59,090
multiple certificates for a single IP

00:04:55,340 --> 00:05:00,530
that's hosted on your H a proxy layer so

00:04:59,090 --> 00:05:02,450
that's the first challenge I wanted to

00:05:00,530 --> 00:05:03,920
talk to you about and next I'm going to

00:05:02,450 --> 00:05:05,270
pass it off to Sergey who's going to

00:05:03,920 --> 00:05:09,050
talk to you about some of the really

00:05:05,270 --> 00:05:12,760
cool work he's doing with with custom

00:05:09,050 --> 00:05:17,960
services and custom service brokers

00:05:12,760 --> 00:05:21,560
thank you hello everybody my name is

00:05:17,960 --> 00:05:23,360
Sergio Matos chair and I'm working on

00:05:21,560 --> 00:05:25,430
architecture team and most responsible

00:05:23,360 --> 00:05:28,300
for a layer between Cloud Foundry and

00:05:25,430 --> 00:05:30,890
our developers development community

00:05:28,300 --> 00:05:34,040
today I want to focus about one aspect

00:05:30,890 --> 00:05:37,520
of course founder is manage services and

00:05:34,040 --> 00:05:39,920
manage services API interface Cloud

00:05:37,520 --> 00:05:45,310
Foundry provided great very convenient

00:05:39,920 --> 00:05:48,410
way to create manage services like

00:05:45,310 --> 00:05:50,990
MongoDB you can instantiate two rabbitmq

00:05:48,410 --> 00:05:52,400
you name it so cloud foundry comes with

00:05:50,990 --> 00:05:55,130
this managed services and managed

00:05:52,400 --> 00:05:59,270
services allowed can be instantiated can

00:05:55,130 --> 00:06:03,410
be created with just one command line or

00:05:59,270 --> 00:06:05,690
or a few API calls our developers when

00:06:03,410 --> 00:06:08,120
we start to release code foundry to our

00:06:05,690 --> 00:06:10,520
development community in Comcast they

00:06:08,120 --> 00:06:12,550
immediately start to use it and they see

00:06:10,520 --> 00:06:16,910
when you for development process because

00:06:12,550 --> 00:06:18,650
it gives them the freedom to start to

00:06:16,910 --> 00:06:20,600
start their backing storage right away

00:06:18,650 --> 00:06:23,000
and to use it and remove and they don't

00:06:20,600 --> 00:06:25,450
need it so it's completely self-service

00:06:23,000 --> 00:06:28,700
they don't need to help from anybody

00:06:25,450 --> 00:06:32,690
what wins this attachment is this

00:06:28,700 --> 00:06:35,470
likeness of a managed services they

00:06:32,690 --> 00:06:38,080
start coming back to ask and asking is

00:06:35,470 --> 00:06:40,150
is say curve

00:06:38,080 --> 00:06:41,710
supported in the managed services if

00:06:40,150 --> 00:06:44,250
something else is supported to manage

00:06:41,710 --> 00:06:46,810
services so we quickly realized that

00:06:44,250 --> 00:06:49,020
there is a good demand for managed

00:06:46,810 --> 00:06:51,069
services and we need to expand our

00:06:49,020 --> 00:06:53,050
library of managed services with

00:06:51,069 --> 00:06:58,539
something that we need to create on our

00:06:53,050 --> 00:07:01,300
own first couple a couple managed

00:06:58,539 --> 00:07:02,919
services that everybody asked and we

00:07:01,300 --> 00:07:05,969
feel that it's absolutely need to be

00:07:02,919 --> 00:07:09,690
created right away our lawyer and

00:07:05,969 --> 00:07:12,580
outbound proxy logger

00:07:09,690 --> 00:07:18,280
this is this is sort of obvious cloud

00:07:12,580 --> 00:07:19,750
founder has has log aggregator but the

00:07:18,280 --> 00:07:22,060
actual consumers need to be able to

00:07:19,750 --> 00:07:24,069
store this application of log somewhere

00:07:22,060 --> 00:07:27,940
and been able to access and search there

00:07:24,069 --> 00:07:32,259
and the second thing is a proxy layer a

00:07:27,940 --> 00:07:34,180
proxy layer is required for increasing

00:07:32,259 --> 00:07:36,789
security of our applications because we

00:07:34,180 --> 00:07:39,550
want to very strictly very controlled

00:07:36,789 --> 00:07:42,599
communication between our applications

00:07:39,550 --> 00:07:47,560
and partners or third parties like

00:07:42,599 --> 00:07:50,889
Amazon Web Services and such so this

00:07:47,560 --> 00:07:52,599
understanding of the need to extend our

00:07:50,889 --> 00:07:56,409
offering of managed service library in

00:07:52,599 --> 00:07:58,719
Cloud Foundry we developed three

00:07:56,409 --> 00:08:01,060
principles that we need to follow to

00:07:58,719 --> 00:08:03,159
create our framework to extend the

00:08:01,060 --> 00:08:06,699
library development efforts it should be

00:08:03,159 --> 00:08:08,319
easy and simple to use because because

00:08:06,699 --> 00:08:10,569
we need to continue extending the

00:08:08,319 --> 00:08:12,879
library and the last but not least is

00:08:10,569 --> 00:08:14,770
support service lifecycle particularly

00:08:12,879 --> 00:08:21,279
we need to be able to update our

00:08:14,770 --> 00:08:23,830
applications without any major

00:08:21,279 --> 00:08:27,190
disruptions and and data loss

00:08:23,830 --> 00:08:31,210
so with this this in mind we decided

00:08:27,190 --> 00:08:32,620
that we want to use three building

00:08:31,210 --> 00:08:37,390
blocks mix three building blocks

00:08:32,620 --> 00:08:39,880
together to have to build our framework

00:08:37,390 --> 00:08:42,190
for managed services and those building

00:08:39,880 --> 00:08:48,610
blocks are called for enduring docker

00:08:42,190 --> 00:08:51,040
and OpenStack well OpenStack OpenStack

00:08:48,610 --> 00:08:51,880
is very convenient infrastructure the

00:08:51,040 --> 00:08:57,060
service

00:08:51,880 --> 00:08:59,950
platform that allows a stone to add

00:08:57,060 --> 00:09:04,630
compute or storage or network resources

00:08:59,950 --> 00:09:08,110
to our managed services platform as

00:09:04,630 --> 00:09:11,890
needed so that that that is a perfect

00:09:08,110 --> 00:09:15,040
tool to support organic growth don't

00:09:11,890 --> 00:09:16,270
care is here well it's just because

00:09:15,040 --> 00:09:18,220
because it's darker right

00:09:16,270 --> 00:09:23,230
everybody loves doctor we want to help

00:09:18,220 --> 00:09:25,690
doctor here that is actually just a hard

00:09:23,230 --> 00:09:27,760
rock we we were able to justify we were

00:09:25,690 --> 00:09:31,000
able to justify presence of doctor here

00:09:27,760 --> 00:09:35,170
and that justification is doctor

00:09:31,000 --> 00:09:37,210
provides portability so you can you can

00:09:35,170 --> 00:09:38,650
develop the here containers and and and

00:09:37,210 --> 00:09:40,210
you can guarantee that it will be run

00:09:38,650 --> 00:09:40,890
consistently across different

00:09:40,210 --> 00:09:44,080
environments

00:09:40,890 --> 00:09:44,680
the second is docu provides just right

00:09:44,080 --> 00:09:47,290
level

00:09:44,680 --> 00:09:49,150
isolations that we need and it's very

00:09:47,290 --> 00:09:50,860
economical to run because because we can

00:09:49,150 --> 00:09:55,330
run multiple document aeneas on the same

00:09:50,860 --> 00:09:56,890
vm it doesn't have much overhead also

00:09:55,330 --> 00:09:58,210
docking is convenient because doctor

00:09:56,890 --> 00:10:01,810
helps to support application lifecycle

00:09:58,210 --> 00:10:04,420
we can do updates we can use use images

00:10:01,810 --> 00:10:09,100
to manage to manage our service

00:10:04,420 --> 00:10:11,410
lifecycle so with this building blocks

00:10:09,100 --> 00:10:15,190
we need to put some some glue together

00:10:11,410 --> 00:10:19,780
to to build the solution and here on the

00:10:15,190 --> 00:10:21,460
right you can see you can see a pool of

00:10:19,780 --> 00:10:26,020
OpenStack the games that we run on

00:10:21,460 --> 00:10:29,260
OpenStack and each of the DM at any

00:10:26,020 --> 00:10:32,290
point of time might run multiple several

00:10:29,260 --> 00:10:36,220
documentation that actually each doctor

00:10:32,290 --> 00:10:40,480
container represents in service to men

00:10:36,220 --> 00:10:43,690
is the pool we have created dhakkir pull

00:10:40,480 --> 00:10:46,150
controller so dr. Poole control is

00:10:43,690 --> 00:10:49,060
responsible to track and manage all the

00:10:46,150 --> 00:10:51,460
resources in the pool including VMs

00:10:49,060 --> 00:10:55,990
including docker images docker

00:10:51,460 --> 00:11:00,070
containers portal occasions storage all

00:10:55,990 --> 00:11:03,460
this is managed by by the pool

00:11:00,070 --> 00:11:05,180
controller that contains three elements

00:11:03,460 --> 00:11:08,090
container management manager

00:11:05,180 --> 00:11:13,220
databases the resources and capacity

00:11:08,090 --> 00:11:17,030
manager capacity manager is provides

00:11:13,220 --> 00:11:21,680
constant its evaluates capacity of the

00:11:17,030 --> 00:11:23,150
pool and ensures that at any point of

00:11:21,680 --> 00:11:25,700
time we have enough resources in the

00:11:23,150 --> 00:11:29,300
pool to spin up moisture bases to spin

00:11:25,700 --> 00:11:31,640
up more containers so this way we don't

00:11:29,300 --> 00:11:33,110
need to wait for a new DM to boot we

00:11:31,640 --> 00:11:37,990
already have clear provisions enough

00:11:33,110 --> 00:11:42,170
resources for next few services to start

00:11:37,990 --> 00:11:45,680
and container manager is the core of the

00:11:42,170 --> 00:11:48,950
solution container manager is actually

00:11:45,680 --> 00:11:52,250
responsible for spinning up bringing up

00:11:48,950 --> 00:11:54,560
new docker containers and services

00:11:52,250 --> 00:11:59,770
inside doctor containers or tear them

00:11:54,560 --> 00:12:02,840
down based on the request from the

00:11:59,770 --> 00:12:07,820
consumer of this resource and consumer

00:12:02,840 --> 00:12:10,550
is is actually this this this element

00:12:07,820 --> 00:12:14,600
all together all together you see here

00:12:10,550 --> 00:12:16,220
is a service broker so for those who are

00:12:14,600 --> 00:12:19,940
not familiar with the service broker

00:12:16,220 --> 00:12:23,690
interface and API in cloud foundry cloud

00:12:19,940 --> 00:12:27,230
foundry controller on the top when it

00:12:23,690 --> 00:12:29,540
needs to provision service it talks

00:12:27,230 --> 00:12:32,480
through service brought your API so

00:12:29,540 --> 00:12:36,610
service Braccio api is very simple it's

00:12:32,480 --> 00:12:39,140
literally like five five restful calls

00:12:36,610 --> 00:12:43,450
that needs to be implemented service

00:12:39,140 --> 00:12:46,940
broker api is defined is is defined how

00:12:43,450 --> 00:12:51,440
service how close founder controller

00:12:46,940 --> 00:12:53,210
request new services that api is easy to

00:12:51,440 --> 00:12:54,740
use but it has nothing to do is extra

00:12:53,210 --> 00:12:57,020
provisioning infrastructure so that's

00:12:54,740 --> 00:12:58,580
why we put doc your pool controller to

00:12:57,020 --> 00:13:02,360
manage call the infrastructure elements

00:12:58,580 --> 00:13:06,380
and once we have the here pool

00:13:02,360 --> 00:13:11,300
controller adding new new horizontal

00:13:06,380 --> 00:13:15,500
here pieces this are our services

00:13:11,300 --> 00:13:17,390
library becomes a trivial task just just

00:13:15,500 --> 00:13:18,840
as an example this is a technical

00:13:17,390 --> 00:13:21,860
conference right

00:13:18,840 --> 00:13:26,040
I want I want to show us an example of a

00:13:21,860 --> 00:13:31,710
request response to to dock your pool

00:13:26,040 --> 00:13:37,470
controller so in this case the service

00:13:31,710 --> 00:13:42,030
broker is asking create go of go and

00:13:37,470 --> 00:13:46,050
create in you in you dock your container

00:13:42,030 --> 00:13:49,320
using this specific image Comcast law

00:13:46,050 --> 00:13:51,510
here in this example allocate one

00:13:49,320 --> 00:13:55,130
gigabyte of memory for that for this

00:13:51,510 --> 00:14:02,130
container and expose a couple of ports

00:13:55,130 --> 00:14:04,080
port 80 and 5,000 to the consumer when

00:14:02,130 --> 00:14:07,530
Tucker pool manager gets this request

00:14:04,080 --> 00:14:10,170
it checks inventory of the resources

00:14:07,530 --> 00:14:11,940
available it identifies the VM that can

00:14:10,170 --> 00:14:16,260
run the specific image that has enough

00:14:11,940 --> 00:14:18,360
memory and resources it allocates ports

00:14:16,260 --> 00:14:22,080
for port mapping Porter servants and

00:14:18,360 --> 00:14:25,760
start a new docker container then it

00:14:22,080 --> 00:14:28,470
returns it returns back to the requester

00:14:25,760 --> 00:14:30,810
information about that container how the

00:14:28,470 --> 00:14:32,430
container can be accessed not not exact

00:14:30,810 --> 00:14:34,800
not the container but the services so it

00:14:32,430 --> 00:14:39,410
provides entry points to all the map

00:14:34,800 --> 00:14:42,840
services back to the requester so that

00:14:39,410 --> 00:14:50,870
that was a sample of this call on this

00:14:42,840 --> 00:14:55,620
API of docker full controller API this

00:14:50,870 --> 00:14:57,750
this all remains in place we now have to

00:14:55,620 --> 00:15:01,230
now fulfill all our three goals we can

00:14:57,750 --> 00:15:04,130
very easily extend our library our

00:15:01,230 --> 00:15:06,510
offerings for managed services because

00:15:04,130 --> 00:15:10,500
implementation of this layer becomes

00:15:06,510 --> 00:15:12,330
trivial and we do all the provisioning

00:15:10,500 --> 00:15:15,930
of the actual infrastructure through

00:15:12,330 --> 00:15:18,980
very simple straightforward API we have

00:15:15,930 --> 00:15:23,190
scalability things to OpenStack

00:15:18,980 --> 00:15:28,980
OpenStack and capacity manager and we

00:15:23,190 --> 00:15:31,120
have ability to to manage lifecycle of

00:15:28,980 --> 00:15:35,560
our services as

00:15:31,120 --> 00:15:38,230
the mechanism provided by doctor that's

00:15:35,560 --> 00:15:41,200
it on this part and the next in the next

00:15:38,230 --> 00:15:43,779
section I want to pass total Sam to my

00:15:41,200 --> 00:15:45,700
friends and Sam is from engineering team

00:15:43,779 --> 00:15:47,529
and he is going to talk about how

00:15:45,700 --> 00:15:49,930
introduction of a cloud found in

00:15:47,529 --> 00:16:02,200
platform-as-a-service changed mindset of

00:15:49,930 --> 00:16:04,000
engineering and supporting a pretty busy

00:16:02,200 --> 00:16:07,240
slide there so I'll give some time to

00:16:04,000 --> 00:16:09,880
take pictures so hello my name is Sam

00:16:07,240 --> 00:16:11,920
Guerrero and as Tim mentioned I work on

00:16:09,880 --> 00:16:15,580
the cloud engineering team along with my

00:16:11,920 --> 00:16:17,380
colleague Neville George today I want a

00:16:15,580 --> 00:16:19,180
little time talking to you about our

00:16:17,380 --> 00:16:20,860
experience from an engineering

00:16:19,180 --> 00:16:23,890
perspective with implementing cloud

00:16:20,860 --> 00:16:25,420
foundry first I'd like to thank everyone

00:16:23,890 --> 00:16:26,980
for the opportunity to let me share a

00:16:25,420 --> 00:16:29,200
little bit of our story with you today

00:16:26,980 --> 00:16:32,650
this is my first cloud foundry summit

00:16:29,200 --> 00:16:34,690
and I'm really excited to be here

00:16:32,650 --> 00:16:36,880
so Comcast we have a really small

00:16:34,690 --> 00:16:38,950
engineering team compared to the

00:16:36,880 --> 00:16:41,320
enormous enormous virtual footprint that

00:16:38,950 --> 00:16:43,029
we have so the thought of bringing in a

00:16:41,320 --> 00:16:44,650
new architecture was a little daunting

00:16:43,029 --> 00:16:46,420
first at first you know we thought

00:16:44,650 --> 00:16:48,610
there's a lot of things that you know

00:16:46,420 --> 00:16:52,180
may change for a service model that's

00:16:48,610 --> 00:16:53,560
been really successful for us but I had

00:16:52,180 --> 00:16:55,089
to run myself that's kind of something I

00:16:53,560 --> 00:16:56,920
was thinking about 12 years ago when I

00:16:55,089 --> 00:17:01,510
was handed a tsuris and asked to see if

00:16:56,920 --> 00:17:02,950
I can get VMware ESX to run on so over

00:17:01,510 --> 00:17:04,750
the last few years with infrastructure

00:17:02,950 --> 00:17:06,670
as a service team that the folks has

00:17:04,750 --> 00:17:08,709
really been how quickly can we deploy be

00:17:06,670 --> 00:17:11,740
Elms and then how you know how can we

00:17:08,709 --> 00:17:13,150
automate those processes well that's

00:17:11,740 --> 00:17:16,209
great for most teams it's really an

00:17:13,150 --> 00:17:17,980
obtainable goal but it leaves our

00:17:16,209 --> 00:17:20,290
developers and application owners our

00:17:17,980 --> 00:17:22,480
customers with quite a few tasks to have

00:17:20,290 --> 00:17:26,140
to complete after receiving their VM or

00:17:22,480 --> 00:17:28,630
group of VMs so I'm sure as most you

00:17:26,140 --> 00:17:29,860
know receiving a new VM kind of leaves

00:17:28,630 --> 00:17:31,770
you with a little bit of a black hole I

00:17:29,860 --> 00:17:33,610
mean you have a nice VM but there's a

00:17:31,770 --> 00:17:35,800
there's quite a few things to do with it

00:17:33,610 --> 00:17:38,500
after that so we wanted to kind of

00:17:35,800 --> 00:17:39,850
change that for our customers hmm with

00:17:38,500 --> 00:17:41,740
Celt with cloud foundry you know we've

00:17:39,850 --> 00:17:43,330
introduced a paradigm shift and thinking

00:17:41,740 --> 00:17:44,620
for our architecture and engineering

00:17:43,330 --> 00:17:46,540
teams

00:17:44,620 --> 00:17:48,460
you know we wanted we want to change our

00:17:46,540 --> 00:17:50,590
mentality where we really focus more on

00:17:48,460 --> 00:17:52,870
the the end product of the part of the

00:17:50,590 --> 00:17:56,380
services we provide versus just kind of

00:17:52,870 --> 00:17:59,080
deploying a VM quickly you know we have

00:17:56,380 --> 00:18:00,790
to we have to really focus on lowering

00:17:59,080 --> 00:18:05,290
those barriers of innovation for our

00:18:00,790 --> 00:18:06,880
product teams and our developers so with

00:18:05,290 --> 00:18:08,950
cloud foundry we really introduced a

00:18:06,880 --> 00:18:12,070
self-service model to our to our teams

00:18:08,950 --> 00:18:14,800
for application and developers ok

00:18:12,070 --> 00:18:16,720
centers in developers well that's really

00:18:14,800 --> 00:18:18,429
decrease the time between release cycles

00:18:16,720 --> 00:18:21,610
for these teams and really help them out

00:18:18,429 --> 00:18:24,480
but the key to that agility is really a

00:18:21,610 --> 00:18:27,340
careful coordination between developers

00:18:24,480 --> 00:18:29,770
architecture and engineering you know we

00:18:27,340 --> 00:18:32,530
have to be more involved in the end now

00:18:29,770 --> 00:18:34,300
to make sure that you know we are part

00:18:32,530 --> 00:18:36,910
of that process to offer more of a

00:18:34,300 --> 00:18:40,660
holistic service model in service

00:18:36,910 --> 00:18:42,040
offering so and we do that by kind of

00:18:40,660 --> 00:18:45,429
its turning ourselves further along the

00:18:42,040 --> 00:18:48,490
assembly line if you will with with

00:18:45,429 --> 00:18:50,350
cloud foundry it's really offered it's

00:18:48,490 --> 00:18:53,230
offered more of a self-service model for

00:18:50,350 --> 00:18:55,230
our application development teams so

00:18:53,230 --> 00:18:57,580
that you know with that with that model

00:18:55,230 --> 00:19:02,620
what it's doing for us is it's actually

00:18:57,580 --> 00:19:04,540
um mmm it's allowing us to to be more

00:19:02,620 --> 00:19:06,910
engaged in what we have to do now is we

00:19:04,540 --> 00:19:08,500
can no longer say that it's okay for us

00:19:06,910 --> 00:19:10,270
to give our customers a brand new car

00:19:08,500 --> 00:19:11,620
that they have to go home and assemble

00:19:10,270 --> 00:19:14,740
the transmission before they can drive

00:19:11,620 --> 00:19:16,600
it you know we believe that if we make

00:19:14,740 --> 00:19:19,870
our factory better everything else will

00:19:16,600 --> 00:19:21,760
improve so we have we have had some

00:19:19,870 --> 00:19:23,620
technical difficulties or challenges not

00:19:21,760 --> 00:19:26,850
difficult with challenges with with most

00:19:23,620 --> 00:19:29,170
new things and introduced in Calgary

00:19:26,850 --> 00:19:31,240
some of those challenges have been you

00:19:29,170 --> 00:19:34,059
know having to maintain our CMDB to

00:19:31,240 --> 00:19:37,179
really reflect back from Cloud Foundry

00:19:34,059 --> 00:19:38,830
to our applications before is really

00:19:37,179 --> 00:19:40,690
easy we had an application that we would

00:19:38,830 --> 00:19:44,470
map to a VM then we've mapped an

00:19:40,690 --> 00:19:46,600
application on or a group another thing

00:19:44,470 --> 00:19:47,950
is you know with with network so we've

00:19:46,600 --> 00:19:50,410
had to really expand a lot of the

00:19:47,950 --> 00:19:52,300
services we provide by now getting more

00:19:50,410 --> 00:19:54,640
involved with you know firewall and GS

00:19:52,300 --> 00:19:55,929
lb and load balancing things that you

00:19:54,640 --> 00:19:57,370
know we really didn't do before they

00:19:55,929 --> 00:19:58,029
were really more on the application

00:19:57,370 --> 00:20:01,210
owner to figure

00:19:58,029 --> 00:20:02,919
out how to get their VMs to run and then

00:20:01,210 --> 00:20:05,440
finally you know just maintaining Cloud

00:20:02,919 --> 00:20:07,539
Foundry itself you know learning how to

00:20:05,440 --> 00:20:10,479
deploy build packs and create custom

00:20:07,539 --> 00:20:14,139
build packs how to introduce new stacks

00:20:10,479 --> 00:20:15,909
you know how we were going to maintain

00:20:14,139 --> 00:20:17,379
just the releases of Cloud Foundry in

00:20:15,909 --> 00:20:19,749
general which can be a little bit on the

00:20:17,379 --> 00:20:21,669
aggressive side for a team like our is

00:20:19,749 --> 00:20:23,349
it we really weren't heavily involved in

00:20:21,669 --> 00:20:25,899
a lot of open source or community driven

00:20:23,349 --> 00:20:28,690
projects in the past so a lot of that

00:20:25,899 --> 00:20:30,519
was new to us so we found that these

00:20:28,690 --> 00:20:32,859
extendable challenges what really is big

00:20:30,519 --> 00:20:34,119
as we thought they would be you know and

00:20:32,859 --> 00:20:35,679
they've actually given us a lot of new

00:20:34,119 --> 00:20:37,570
opportunities that we didn't really

00:20:35,679 --> 00:20:39,249
expect you know we've we've learned to

00:20:37,570 --> 00:20:41,710
really interface more with our customers

00:20:39,249 --> 00:20:43,059
work before you know we were just kind

00:20:41,710 --> 00:20:45,369
of in our engineering hole we kind of

00:20:43,059 --> 00:20:46,539
did our we gave it a platform and it was

00:20:45,369 --> 00:20:49,599
kind of your VM to take care of from

00:20:46,539 --> 00:20:51,190
then on it's also helped us understand

00:20:49,599 --> 00:20:54,039
more about how the products that we

00:20:51,190 --> 00:20:55,899
provide the services we provide really

00:20:54,039 --> 00:20:57,700
you know go to the in line that we you

00:20:55,899 --> 00:21:00,190
know that what we're trying to really do

00:20:57,700 --> 00:21:01,779
at Comcast so it's helped us understand

00:21:00,190 --> 00:21:03,429
what our application is doing how they

00:21:01,779 --> 00:21:05,249
affect the business and how you know

00:21:03,429 --> 00:21:08,009
we're put more part of that process now

00:21:05,249 --> 00:21:10,089
and it's also helped us become more

00:21:08,009 --> 00:21:12,879
t-shaped engineers you know it's really

00:21:10,089 --> 00:21:14,739
increased our our set of skills that we

00:21:12,879 --> 00:21:16,330
have and it's really helped us to kind

00:21:14,739 --> 00:21:18,549
of get developed and learn this new

00:21:16,330 --> 00:21:20,169
model that now we're part of this DevOps

00:21:18,549 --> 00:21:23,649
model that that's it's really exciting

00:21:20,169 --> 00:21:25,299
place to be right now so you know our

00:21:23,649 --> 00:21:26,409
experience with cloud foundry so far

00:21:25,299 --> 00:21:27,969
from an engineering perspective has

00:21:26,409 --> 00:21:29,289
really been positive I mean it's really

00:21:27,969 --> 00:21:31,359
helped us learn a lot of new things and

00:21:29,289 --> 00:21:33,639
it's helped us really focus and learn

00:21:31,359 --> 00:21:35,619
about you know all these products and it

00:21:33,639 --> 00:21:39,339
really the end goal of agile product

00:21:35,619 --> 00:21:40,359
development and time to market so with

00:21:39,339 --> 00:21:42,190
that I'd like to thank you one more time

00:21:40,359 --> 00:21:45,620
and I'd like I'll pass the mic over to

00:21:42,190 --> 00:21:50,279
my friend Neville George thank you

00:21:45,620 --> 00:21:53,200
[Applause]

00:21:50,279 --> 00:21:56,409
hi everybody hopefully you guys can hear

00:21:53,200 --> 00:21:58,149
me right so my name is Neville I work on

00:21:56,409 --> 00:22:01,149
the cloud services engineering team

00:21:58,149 --> 00:22:03,940
along with Sam I would say Sam's a very

00:22:01,149 --> 00:22:05,830
nice guy right every time

00:22:03,940 --> 00:22:07,299
Tim and Sergey come up with ideas you

00:22:05,830 --> 00:22:09,880
know we still have to support them and

00:22:07,299 --> 00:22:14,890
keep our sanity so you know it's it's

00:22:09,880 --> 00:22:16,750
really very nice of him to do that so

00:22:14,890 --> 00:22:19,419
what I will do today is talk about some

00:22:16,750 --> 00:22:21,399
of the operational aspects of cloud

00:22:19,419 --> 00:22:24,549
foundry that you know we have found you

00:22:21,399 --> 00:22:27,250
know in our cloud foundry environment at

00:22:24,549 --> 00:22:28,899
Comcast and some of the tools and things

00:22:27,250 --> 00:22:30,940
that we have done in our environment in

00:22:28,899 --> 00:22:33,720
order to support the in the cloud

00:22:30,940 --> 00:22:35,830
foundry instance that we have at Comcast

00:22:33,720 --> 00:22:37,929
I'll talk about some of the proactive

00:22:35,830 --> 00:22:40,980
monitoring stuff and also about you know

00:22:37,929 --> 00:22:43,269
visibility into your environment it's

00:22:40,980 --> 00:22:45,010
related to Cloud Foundry you know and

00:22:43,269 --> 00:22:46,210
how of they have helped us you know what

00:22:45,010 --> 00:22:47,440
we have done what are the tools that we

00:22:46,210 --> 00:22:50,320
have used in order to support the

00:22:47,440 --> 00:22:52,929
environment so starting off with the

00:22:50,320 --> 00:22:55,960
proactive monitoring right it's the the

00:22:52,929 --> 00:22:57,669
success of any engineering team is in

00:22:55,960 --> 00:23:00,580
its ability to actually prevent an

00:22:57,669 --> 00:23:01,960
outage right preventing proactively

00:23:00,580 --> 00:23:05,380
monitoring looking at the key

00:23:01,960 --> 00:23:07,960
performance indicators to know what is

00:23:05,380 --> 00:23:11,470
building up in order to make an outage

00:23:07,960 --> 00:23:13,480
right in addition you know it would be

00:23:11,470 --> 00:23:15,070
great you know if you can actually reach

00:23:13,480 --> 00:23:17,590
out proactively to your customers or

00:23:15,070 --> 00:23:19,929
even better right if you can resolve

00:23:17,590 --> 00:23:22,149
problems so for example customer quotas

00:23:19,929 --> 00:23:24,039
for example right if they are if they

00:23:22,149 --> 00:23:25,990
are developing they're innovating and

00:23:24,039 --> 00:23:28,090
they're starting to run out of CODIS you

00:23:25,990 --> 00:23:29,500
know if we can probably manage that and

00:23:28,090 --> 00:23:31,620
make sure that they have enough space

00:23:29,500 --> 00:23:34,330
and stuff like that it definitely helps

00:23:31,620 --> 00:23:36,070
you know helps avoiding that midnight

00:23:34,330 --> 00:23:37,269
call you know escalation call saying hey

00:23:36,070 --> 00:23:40,870
we are running out of space and things

00:23:37,269 --> 00:23:42,639
like that also introspective how

00:23:40,870 --> 00:23:45,279
proactively you manage an environment

00:23:42,639 --> 00:23:47,740
it's inevitable that you know that will

00:23:45,279 --> 00:23:49,330
be outages right so when it when an

00:23:47,740 --> 00:23:51,760
outage occurs the most important thing

00:23:49,330 --> 00:23:54,090
is to make sure that it doesn't occur

00:23:51,760 --> 00:23:56,470
again right what are the what are the

00:23:54,090 --> 00:23:59,320
what are the additional configurations

00:23:56,470 --> 00:24:01,479
that we can help and proactively manage

00:23:59,320 --> 00:24:04,359
all these things before we actually

00:24:01,479 --> 00:24:07,090
complete handing this off to the

00:24:04,359 --> 00:24:10,149
operational team right so we have

00:24:07,090 --> 00:24:11,440
actually chosen Nagios you know for our

00:24:10,149 --> 00:24:13,950
proactive management there's a lot of

00:24:11,440 --> 00:24:16,090
information available for you to

00:24:13,950 --> 00:24:18,460
configure you know what you want to

00:24:16,090 --> 00:24:19,869
monitor and and things like that now it

00:24:18,460 --> 00:24:22,359
might seem very simple but in a very

00:24:19,869 --> 00:24:25,499
traditional company most most of the

00:24:22,359 --> 00:24:28,119
time you have off-the-shelf

00:24:25,499 --> 00:24:30,279
off-the-shelf monitoring tools that are

00:24:28,119 --> 00:24:32,470
run by a monitoring team that has an SLA

00:24:30,279 --> 00:24:34,809
and that has an intake process and all

00:24:32,470 --> 00:24:36,129
this takes time right so what we have

00:24:34,809 --> 00:24:37,659
done this you know it like like Sam

00:24:36,129 --> 00:24:39,879
mentioned the t-shaped person right so

00:24:37,659 --> 00:24:43,450
we manage the complete instance of

00:24:39,879 --> 00:24:44,739
Nagios and and we make sure that we set

00:24:43,450 --> 00:24:46,659
up all the counters and key performance

00:24:44,739 --> 00:24:49,029
indicators that we need to monitor so in

00:24:46,659 --> 00:24:51,789
case there is a problem and we feel that

00:24:49,029 --> 00:24:53,889
you know hey X is not being monitored we

00:24:51,789 --> 00:24:56,649
believe we'd be able to actually do that

00:24:53,889 --> 00:24:58,509
in in say you know five minutes I

00:24:56,649 --> 00:25:00,669
suppose like you know the oil is and SLA

00:24:58,509 --> 00:25:05,259
is associated with the team that is

00:25:00,669 --> 00:25:06,399
outside our control so moving on you

00:25:05,259 --> 00:25:10,330
know we'll talk about the visibility of

00:25:06,399 --> 00:25:12,399
the environment right it's very

00:25:10,330 --> 00:25:13,779
important that you know we understand

00:25:12,399 --> 00:25:16,960
you know what is that in our environment

00:25:13,779 --> 00:25:19,269
and things like that so Cloud Foundry

00:25:16,960 --> 00:25:21,190
has a great CLI that you can use to get

00:25:19,269 --> 00:25:23,499
a lot of information the only problem is

00:25:21,190 --> 00:25:24,970
that it's not a single single pane right

00:25:23,499 --> 00:25:27,009
but you can see everything and click

00:25:24,970 --> 00:25:30,099
through everything so we have had the

00:25:27,009 --> 00:25:31,960
same problems right and what we found is

00:25:30,099 --> 00:25:33,909
you know we found a tool called admin UI

00:25:31,960 --> 00:25:37,239
tool it's available in the cloud foundry

00:25:33,909 --> 00:25:38,979
incubator that we have used before I

00:25:37,239 --> 00:25:40,749
move on you know show of hands and how

00:25:38,979 --> 00:25:44,049
many know how many of you know about the

00:25:40,749 --> 00:25:46,659
admin UI - okay great great we have we

00:25:44,049 --> 00:25:49,389
have a few of us but for everybody who

00:25:46,659 --> 00:25:52,090
doesn't know it provides a GUI interface

00:25:49,389 --> 00:25:54,669
you know for for you know knowing your

00:25:52,090 --> 00:25:56,289
organization's your spaces who has

00:25:54,669 --> 00:25:59,559
access to your spaces how many spaces

00:25:56,289 --> 00:26:02,559
you have your quotas you know what are

00:25:59,559 --> 00:26:04,479
the de riz how are they being utilized

00:26:02,559 --> 00:26:06,809
your utilization metrics of your DEA s

00:26:04,479 --> 00:26:09,970
how many applications are running on it

00:26:06,809 --> 00:26:11,559
you can you can also it also shows you

00:26:09,970 --> 00:26:14,379
you know the growth of your environment

00:26:11,559 --> 00:26:14,830
in terms of organizations and spaces and

00:26:14,379 --> 00:26:16,960
and over

00:26:14,830 --> 00:26:20,320
period of time how your environment has

00:26:16,960 --> 00:26:22,539
been growing it also aids in certain

00:26:20,320 --> 00:26:24,250
operational aspects so you could you

00:26:22,539 --> 00:26:26,110
could create organizations using the

00:26:24,250 --> 00:26:27,730
tool you could you could apply quarters

00:26:26,110 --> 00:26:28,240
you know to your organization's and

00:26:27,730 --> 00:26:30,909
things like that

00:26:28,240 --> 00:26:35,080
so it's been a very useful tool for us

00:26:30,909 --> 00:26:38,080
so you know so that pretty much is

00:26:35,080 --> 00:26:40,570
everything that you know I had on on

00:26:38,080 --> 00:26:43,510
this slide for us to talk about I would

00:26:40,570 --> 00:26:45,269
like to close by saying you know Cloud

00:26:43,510 --> 00:26:48,399
Foundry has been great for Comcast's

00:26:45,269 --> 00:26:49,720
having the t-shaped people as well as

00:26:48,399 --> 00:26:51,490
you know having the run your own

00:26:49,720 --> 00:26:54,539
business kind of mentality has

00:26:51,490 --> 00:26:58,260
definitely helped us make it better so

00:26:54,539 --> 00:27:02,169
that is the end of the presentation now

00:26:58,260 --> 00:27:04,179
I think we have a few more minutes you

00:27:02,169 --> 00:27:08,730
know for questions so we'll we'll start

00:27:04,179 --> 00:27:08,730
taking the questions right yep

00:27:16,160 --> 00:27:27,450
so yeah yeah done it off just make sure

00:27:23,100 --> 00:27:28,740
that mics all yeah sorry yeah so we are

00:27:27,450 --> 00:27:29,520
running in production I actually forgot

00:27:28,740 --> 00:27:31,110
that part

00:27:29,520 --> 00:27:32,700
yeah so we're running in production we

00:27:31,110 --> 00:27:36,810
have several key applications that are

00:27:32,700 --> 00:27:38,580
in production today and you know we have

00:27:36,810 --> 00:27:40,080
a couple of environments and we're

00:27:38,580 --> 00:27:42,990
scaling it every day so we don't have

00:27:40,080 --> 00:27:44,250
any it's not I would I wouldn't call it

00:27:42,990 --> 00:27:45,990
a huge environment at this point but

00:27:44,250 --> 00:27:47,490
we're definitely ramping up and we have

00:27:45,990 --> 00:27:50,520
several application teams because of

00:27:47,490 --> 00:27:52,200
this platform and its usability are very

00:27:50,520 --> 00:27:54,500
interested so we're going to be ramping

00:27:52,200 --> 00:27:54,500
up quickly

00:28:00,890 --> 00:28:03,969
[Music]

00:28:07,890 --> 00:28:12,279
no well it's it's yeah so we don't we

00:28:11,049 --> 00:28:15,730
don't own that part of the network stack

00:28:12,279 --> 00:28:17,590
so there's several options well you know

00:28:15,730 --> 00:28:19,720
there's a lot of services out there that

00:28:17,590 --> 00:28:22,029
are also self-service so you know

00:28:19,720 --> 00:28:24,450
there's options I know a lot of some

00:28:22,029 --> 00:28:27,100
teams that I've talked to can leverage

00:28:24,450 --> 00:28:30,039
route 53 and that that would work well

00:28:27,100 --> 00:28:31,870
in this scenario let me jump on this on

00:28:30,039 --> 00:28:34,690
this question so we actually we

00:28:31,870 --> 00:28:38,559
developed developed two models to do

00:28:34,690 --> 00:28:41,320
that one is for simple use cases we can

00:28:38,559 --> 00:28:44,769
have a centralized gob manager with a

00:28:41,320 --> 00:28:46,659
CNN central urges at the management that

00:28:44,769 --> 00:28:48,669
will be work for all applications that

00:28:46,659 --> 00:28:51,789
want to use this model so this is not

00:28:48,669 --> 00:28:53,529
application specific but if any any

00:28:51,789 --> 00:28:55,929
specific application is you know very

00:28:53,529 --> 00:28:59,110
specific health check and specific rules

00:28:55,929 --> 00:29:02,679
to failover or or share just shall be

00:28:59,110 --> 00:29:04,539
then they still today has to do it the

00:29:02,679 --> 00:29:06,370
same way as I did traditionally the

00:29:04,539 --> 00:29:08,080
known before before

00:29:06,370 --> 00:29:32,169
platform-as-a-service was introduced so

00:29:08,080 --> 00:29:35,350
I I can say we have we have a really

00:29:32,169 --> 00:29:37,840
good training model but we don't

00:29:35,350 --> 00:29:40,510
boarding onboarding sessions with our

00:29:37,840 --> 00:29:42,130
development teams we do brown decks to

00:29:40,510 --> 00:29:46,360
introduce to do you know some brought

00:29:42,130 --> 00:29:51,190
over video to have people aware we focus

00:29:46,360 --> 00:29:53,169
on 12 actor application model because I

00:29:51,190 --> 00:29:56,470
think that that is very important on

00:29:53,169 --> 00:29:58,210
overall microservices model how not just

00:29:56,470 --> 00:30:02,500
to shape your application but also to

00:29:58,210 --> 00:30:04,870
shape data so we have all this that not

00:30:02,500 --> 00:30:08,860
not very structured training with with

00:30:04,870 --> 00:30:11,080
the development team and to explain

00:30:08,860 --> 00:30:13,360
because developers needs to understand

00:30:11,080 --> 00:30:15,580
the difference in how they need to

00:30:13,360 --> 00:30:17,830
develop applications for pass compared

00:30:15,580 --> 00:30:19,480
to how the yesterday

00:30:17,830 --> 00:30:20,739
and we have some of our developers here

00:30:19,480 --> 00:30:22,119
today so if you reach out to us

00:30:20,739 --> 00:30:25,139
afterwards we can you know hook you up

00:30:22,119 --> 00:30:25,139
if you want to talk to them as well

00:30:25,860 --> 00:30:29,890
all right we're out of time thank you so

00:30:29,590 --> 00:30:33,859
much

00:30:29,890 --> 00:30:33,859

YouTube URL: https://www.youtube.com/watch?v=gHpC12MZOSc


