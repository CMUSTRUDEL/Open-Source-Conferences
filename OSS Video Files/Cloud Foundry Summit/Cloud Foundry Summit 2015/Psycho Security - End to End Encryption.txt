Title: Psycho Security - End to End Encryption
Publication date: 2015-05-13
Playlist: Cloud Foundry Summit 2015
Description: 
	Psycho Security - End to End Encryption - 02 Jon Price 720p
Captions: 
	00:00:00,000 --> 00:00:08,639
okay hey everybody my name is John price

00:00:03,179 --> 00:00:10,110
I'm with Intel IT at Intel and guess as

00:00:08,639 --> 00:00:11,759
a few months ago somebody said hey you

00:00:10,110 --> 00:00:13,290
should put together something to present

00:00:11,759 --> 00:00:14,460
it to Cloud Foundry summit and I'm like

00:00:13,290 --> 00:00:16,080
what would we do and everybody's like

00:00:14,460 --> 00:00:18,510
well how about somebody about security

00:00:16,080 --> 00:00:20,609
you know I'm like yeah why not our

00:00:18,510 --> 00:00:22,650
security guys they're kind of psycho we

00:00:20,609 --> 00:00:25,289
call it psycho security that'll draw

00:00:22,650 --> 00:00:27,449
people in they'll all show up and much

00:00:25,289 --> 00:00:30,510
to my dismay here you all are because

00:00:27,449 --> 00:00:31,470
public speaking in my thing but anyway

00:00:30,510 --> 00:00:33,630
I'll give it a shot

00:00:31,470 --> 00:00:35,309
I've been with Intel for about 15 years

00:00:33,630 --> 00:00:37,860
and I've been involved in Cloud Foundry

00:00:35,309 --> 00:00:39,989
for oh gosh it's early in the v1 days

00:00:37,860 --> 00:00:42,690
we've been deploying and using Cloud

00:00:39,989 --> 00:00:44,579
Foundry a pretty small team of us just

00:00:42,690 --> 00:00:46,050
up until recently it's just been pretty

00:00:44,579 --> 00:00:48,870
much two of us engineering this stuff

00:00:46,050 --> 00:00:51,719
myself and my partner Aaron humor Huber

00:00:48,870 --> 00:00:53,160
here we just got two more guys in Costa

00:00:51,719 --> 00:00:55,379
Rica who are ramping up right now

00:00:53,160 --> 00:01:01,920
because we are expanding we're growing

00:00:55,379 --> 00:01:06,360
all the time anyway next slide next one

00:01:01,920 --> 00:01:09,360
we can skip that I wasn't there one more

00:01:06,360 --> 00:01:10,860
in there maybe not yeah so a little bit

00:01:09,360 --> 00:01:12,450
about that Intel it IT we're a pretty

00:01:10,860 --> 00:01:14,250
big company most of you have heard about

00:01:12,450 --> 00:01:16,740
it until I hope we're over a hundred

00:01:14,250 --> 00:01:19,229
thousand employees about 6,000 of us are

00:01:16,740 --> 00:01:21,600
NIT we're actively consolidating our

00:01:19,229 --> 00:01:24,930
datacenter footprint we're down to 61

00:01:21,600 --> 00:01:27,869
datacenters right now it's down from 91

00:01:24,930 --> 00:01:30,960
in 2010 and we actually had 142 in 2007

00:01:27,869 --> 00:01:34,079
so a lot of virtualization big effort to

00:01:30,960 --> 00:01:38,729
consolidate we support a lot of devices

00:01:34,079 --> 00:01:40,680
you know 120 of thousand of them 54,000

00:01:38,729 --> 00:01:42,299
handhelds just about most of those are

00:01:40,680 --> 00:01:49,220
employee on bring your own device sort

00:01:42,299 --> 00:01:49,220
of things about it they're nice

00:01:49,890 --> 00:01:58,770
back one back - yeah okay our objectives

00:01:56,969 --> 00:02:00,810
here well we're gonna talk about the

00:01:58,770 --> 00:02:03,119
importance of security and why we can't

00:02:00,810 --> 00:02:05,250
ever assume that our own networks are

00:02:03,119 --> 00:02:06,720
secure that seems to be a common

00:02:05,250 --> 00:02:08,369
misconception that once it hits your

00:02:06,720 --> 00:02:10,229
network everything is safe secure you

00:02:08,369 --> 00:02:11,069
can do it ever you want but that's not

00:02:10,229 --> 00:02:14,010
actually the case

00:02:11,069 --> 00:02:15,269
most breaches happen internally and I'm

00:02:14,010 --> 00:02:18,150
gonna show you how we'd Intel have

00:02:15,269 --> 00:02:20,849
addressed that that problem ourselves by

00:02:18,150 --> 00:02:24,420
enabling in 10 network encryption all

00:02:20,849 --> 00:02:25,680
right so security breaches are on the

00:02:24,420 --> 00:02:27,200
rise I'm sure you've all heard about

00:02:25,680 --> 00:02:29,970
them lately I've been in the news

00:02:27,200 --> 00:02:32,660
according to a 2014 report called the

00:02:29,970 --> 00:02:36,480
insider threat security manifesto that

00:02:32,660 --> 00:02:38,610
35% of organizations in the US and UK of

00:02:36,480 --> 00:02:39,870
over 10,000 employees have had an

00:02:38,610 --> 00:02:42,390
internal security breach in the last

00:02:39,870 --> 00:02:45,810
year that's a lot and those are just

00:02:42,390 --> 00:02:46,860
ones they know about so you know if you

00:02:45,810 --> 00:02:49,560
haven't been hacked it's just a matter

00:02:46,860 --> 00:02:53,850
of when maybe hopefully not but that

00:02:49,560 --> 00:02:55,290
seems to be the trend okay you know

00:02:53,850 --> 00:02:56,790
here's a few examples of them we have

00:02:55,290 --> 00:02:59,220
you know there was the operation Aurora

00:02:56,790 --> 00:03:01,680
Stuxnet target Home Depot you know if

00:02:59,220 --> 00:03:06,150
their point-of-sale device is being

00:03:01,680 --> 00:03:08,250
hacked anthem BlueCross BlueShield just

00:03:06,150 --> 00:03:12,930
a lot of stuff lately Sony it's been all

00:03:08,250 --> 00:03:14,579
over the news okay a little bit about

00:03:12,930 --> 00:03:16,620
why everybody should take care about

00:03:14,579 --> 00:03:20,549
security you know everybody has a role

00:03:16,620 --> 00:03:21,900
in this as a platform operator you know

00:03:20,549 --> 00:03:23,880
your role is to protect both the

00:03:21,900 --> 00:03:25,380
platform itself and your customers not

00:03:23,880 --> 00:03:27,299
just the customers who are landing apps

00:03:25,380 --> 00:03:30,510
but the customers consuming those apps

00:03:27,299 --> 00:03:32,040
that are landed so you know as a

00:03:30,510 --> 00:03:34,590
customer you initiate a secure

00:03:32,040 --> 00:03:36,480
connection to a platform to adapt HTTPS

00:03:34,590 --> 00:03:38,130
it's reasonable for you to expect that

00:03:36,480 --> 00:03:39,720
your your connection and your data is

00:03:38,130 --> 00:03:42,510
secure all the way through not just to

00:03:39,720 --> 00:03:44,010
the first load balancer hits so as an

00:03:42,510 --> 00:03:45,900
end user you just say I'm making us your

00:03:44,010 --> 00:03:48,450
secure connection you don't know that

00:03:45,900 --> 00:03:52,200
down the road that's being unencrypted

00:03:48,450 --> 00:03:53,730
and send clear text as a as a platform

00:03:52,200 --> 00:03:55,530
operator you also need to protect your

00:03:53,730 --> 00:03:56,909
platform if somebody gains

00:03:55,530 --> 00:03:58,110
administrative access to your Cloud

00:03:56,909 --> 00:04:00,930
Foundry deployment or your Bosh

00:03:58,110 --> 00:04:02,100
deployment they then own that thing they

00:04:00,930 --> 00:04:03,810
can see all the customer

00:04:02,100 --> 00:04:07,230
all the data they could destroy your

00:04:03,810 --> 00:04:09,080
platform none of that would be good you

00:04:07,230 --> 00:04:11,400
need to protect the rest of your org

00:04:09,080 --> 00:04:12,900
somebody gets access to an account like

00:04:11,400 --> 00:04:14,820
a valid domain account on the network

00:04:12,900 --> 00:04:16,260
that could just be the gateway the entry

00:04:14,820 --> 00:04:18,030
point to gain access to other things on

00:04:16,260 --> 00:04:21,180
the network beyond you know beyond your

00:04:18,030 --> 00:04:24,120
own Cloud Foundry stuff and as a

00:04:21,180 --> 00:04:26,880
developer you need to be aware of what

00:04:24,120 --> 00:04:29,340
the the vulnerabilities the the

00:04:26,880 --> 00:04:31,560
potential areas of access are within the

00:04:29,340 --> 00:04:32,970
platform you're landing on so if you're

00:04:31,560 --> 00:04:35,670
deploying to coffee foundry what are the

00:04:32,970 --> 00:04:38,310
potential areas where your data could be

00:04:35,670 --> 00:04:40,260
compromised and how can I design and

00:04:38,310 --> 00:04:44,730
code my app in a way that mitigates some

00:04:40,260 --> 00:04:48,000
of that so again I never could never

00:04:44,730 --> 00:04:49,680
assume your network is secure at present

00:04:48,000 --> 00:04:52,110
and a standard Cloud Foundry deployment

00:04:49,680 --> 00:04:53,820
there is data being transmitted in

00:04:52,110 --> 00:04:55,170
clear-text between the servers and in

00:04:53,820 --> 00:04:58,230
your deployment so all the Cloud Foundry

00:04:55,170 --> 00:05:00,810
servers have clear text messaging going

00:04:58,230 --> 00:05:04,400
on between them that includes usernames

00:05:00,810 --> 00:05:07,170
passwords all customer application data

00:05:04,400 --> 00:05:10,080
and help show that here's a here's a

00:05:07,170 --> 00:05:11,340
here's a diagram depicting that so you

00:05:10,080 --> 00:05:12,600
know you have somebody accessing your

00:05:11,340 --> 00:05:14,360
environment in the standard deployment

00:05:12,600 --> 00:05:16,440
you have some sort of a load balancer

00:05:14,360 --> 00:05:18,660
sitting in front of your Cloud Foundry

00:05:16,440 --> 00:05:20,370
deployment and somebody comes in with

00:05:18,660 --> 00:05:22,590
their CLI or browser whatever it might

00:05:20,370 --> 00:05:24,690
be and they initiate a secure HTTPS

00:05:22,590 --> 00:05:26,730
connection that traffic's terminated at

00:05:24,690 --> 00:05:29,610
the load balancer and from there on

00:05:26,730 --> 00:05:32,130
everything inside is sending clear text

00:05:29,610 --> 00:05:33,780
so somebody gets a worm on your network

00:05:32,130 --> 00:05:35,490
they've compromised it some other way

00:05:33,780 --> 00:05:40,530
they're sniffing traffic all that is

00:05:35,490 --> 00:05:42,020
visible to them all right so what have

00:05:40,530 --> 00:05:44,430
we done at Intel to address this problem

00:05:42,020 --> 00:05:47,550
well our solution includes three main

00:05:44,430 --> 00:05:50,190
components we have we've deployed the h8

00:05:47,550 --> 00:05:52,590
proxy from the CF release so with Bosh

00:05:50,190 --> 00:05:54,750
we use deploy H a proxy and that we use

00:05:52,590 --> 00:05:57,210
that to terminate our HTTP traffic from

00:05:54,750 --> 00:05:59,460
our load balancer we've implemented

00:05:57,210 --> 00:06:01,020
IPSec to provide encryption between all

00:05:59,460 --> 00:06:02,820
of our Cloud Foundry and iron foundry

00:06:01,020 --> 00:06:05,580
servers and for those of you don't know

00:06:02,820 --> 00:06:06,960
iron foundry is another component that

00:06:05,580 --> 00:06:09,690
you can add onto Cloud Foundry that

00:06:06,960 --> 00:06:13,180
gives you a microsoft.net stack so you

00:06:09,690 --> 00:06:17,140
can deploy dotnet Apps works well for us

00:06:13,180 --> 00:06:19,080
and IP tables and Windows Firewall to

00:06:17,140 --> 00:06:22,110
restrict traffic to only allowed ports

00:06:19,080 --> 00:06:24,370
because once we've enabled IPSec the

00:06:22,110 --> 00:06:26,860
security groups you gave implemented in

00:06:24,370 --> 00:06:29,320
your infrastructure as a service you

00:06:26,860 --> 00:06:30,940
Nonie WS open secretary using can no

00:06:29,320 --> 00:06:35,320
longer inspect that traffic it's all now

00:06:30,940 --> 00:06:39,550
and Co encapsulated within IPSec so we

00:06:35,320 --> 00:06:41,290
need a way to restrict the traffic so

00:06:39,550 --> 00:06:43,090
after we're done implementing the

00:06:41,290 --> 00:06:44,800
solution here's what it looks like we

00:06:43,090 --> 00:06:46,330
still have the the secure connection to

00:06:44,800 --> 00:06:48,670
the main load balancer outside of our

00:06:46,330 --> 00:06:51,070
platform we still terminate that traffic

00:06:48,670 --> 00:06:55,270
there but then we reinitiate an SSL

00:06:51,070 --> 00:06:56,860
connection to our tha proxy and from

00:06:55,270 --> 00:06:59,380
everything everything within there is

00:06:56,860 --> 00:07:01,570
now IPSec encrypted so at no point do we

00:06:59,380 --> 00:07:06,010
have unencrypted traffic in our platform

00:07:01,570 --> 00:07:09,520
so we've pretty much eliminated all the

00:07:06,010 --> 00:07:11,530
all the open all the open traffic so

00:07:09,520 --> 00:07:14,050
what is IPSec for those of you don't

00:07:11,530 --> 00:07:17,230
know IPSec is Internet Protocol security

00:07:14,050 --> 00:07:19,300
it's an industry standard protocol suite

00:07:17,230 --> 00:07:21,250
and it provides authentication and

00:07:19,300 --> 00:07:26,020
encryption at the IP layer most of you

00:07:21,250 --> 00:07:28,540
PN software's use IPSec underneath there

00:07:26,020 --> 00:07:29,760
are some some nuances you need to keep

00:07:28,540 --> 00:07:32,080
in mind when you're working with

00:07:29,760 --> 00:07:34,030
establishing IPSec tunnels between Linux

00:07:32,080 --> 00:07:35,890
and Windows systems you know including

00:07:34,030 --> 00:07:38,410
the the you know finding common protocol

00:07:35,890 --> 00:07:40,890
ciphers encryption sweets etc pretty

00:07:38,410 --> 00:07:43,810
much every aspect of configuring IPSec

00:07:40,890 --> 00:07:45,370
you have to find two things that work

00:07:43,810 --> 00:07:49,810
between Windows and Linux and that's a

00:07:45,370 --> 00:07:51,250
challenge for us actually next slide so

00:07:49,810 --> 00:07:53,560
uh so how do we how do we approach this

00:07:51,250 --> 00:07:54,850
how do we do this well first thing we

00:07:53,560 --> 00:07:56,500
had to do is identify what all the

00:07:54,850 --> 00:07:58,600
communication flows were in our Cloud

00:07:56,500 --> 00:08:00,850
Foundry environment there are several

00:07:58,600 --> 00:08:02,770
ways we did this you know our

00:08:00,850 --> 00:08:04,450
configuration files our boss manifest a

00:08:02,770 --> 00:08:06,330
lot of those ports are defined and

00:08:04,450 --> 00:08:09,100
configurable so we knew what those were

00:08:06,330 --> 00:08:10,990
code reviews we've been doing Cloud

00:08:09,100 --> 00:08:12,670
Foundry for a long time we've seen most

00:08:10,990 --> 00:08:15,280
of the code in there so we've seen some

00:08:12,670 --> 00:08:16,750
of the ports in the code but the easiest

00:08:15,280 --> 00:08:18,640
and probably most direct way to do it is

00:08:16,750 --> 00:08:22,390
just use something like nuts that TCP

00:08:18,640 --> 00:08:23,860
dump them on and go to each server and

00:08:22,390 --> 00:08:26,319
as you can see here you know

00:08:23,860 --> 00:08:28,689
that dump shows shows what's listening

00:08:26,319 --> 00:08:31,419
here and this looks like one of our lab

00:08:28,689 --> 00:08:35,440
servers so it looks like it was probably

00:08:31,419 --> 00:08:37,930
a go router and and the API cloud

00:08:35,440 --> 00:08:41,560
controller server just looking at that

00:08:37,930 --> 00:08:42,550
one that's what looks like it was next

00:08:41,560 --> 00:08:45,279
slide

00:08:42,550 --> 00:08:47,079
ready to create IP tables rules and

00:08:45,279 --> 00:08:50,769
that's that's the firewalling to

00:08:47,079 --> 00:08:52,630
restrict just the loud ports I don't

00:08:50,769 --> 00:08:54,130
know if you've worked with but with IP

00:08:52,630 --> 00:08:56,800
tables before or not it's kind of a

00:08:54,130 --> 00:08:59,350
heavy curve when you first learn it but

00:08:56,800 --> 00:09:01,000
this is just an example of what a Nats

00:08:59,350 --> 00:09:03,279
server would look like the IP tables

00:09:01,000 --> 00:09:06,970
rolls so we have you know we're allowing

00:09:03,279 --> 00:09:10,089
ICMP traffic loopback traffic UDP port

00:09:06,970 --> 00:09:13,450
500 ESP and aah those are our IP SEC

00:09:10,089 --> 00:09:17,589
rules allowed there we're allowing port

00:09:13,450 --> 00:09:19,420
22 telnet these three here for - two -

00:09:17,589 --> 00:09:22,260
two - three and 8080 those are for Nats

00:09:19,420 --> 00:09:24,430
itself so those - when that server ports

00:09:22,260 --> 00:09:26,050
and then we drop and log everything

00:09:24,430 --> 00:09:27,730
everything else so that's just one

00:09:26,050 --> 00:09:28,839
example of and every server every

00:09:27,730 --> 00:09:32,829
components going to have a different set

00:09:28,839 --> 00:09:35,170
of IP tables rules next slide so

00:09:32,829 --> 00:09:37,779
important thing to know here we're using

00:09:35,170 --> 00:09:42,310
certificates to authenticate our servers

00:09:37,779 --> 00:09:43,899
but with all of our IPSec tunnels you

00:09:42,310 --> 00:09:45,100
know so you can if you do use

00:09:43,899 --> 00:09:46,510
certificates you can use your own

00:09:45,100 --> 00:09:47,980
certificate authority that you create or

00:09:46,510 --> 00:09:49,839
you can use the existing PKI

00:09:47,980 --> 00:09:51,970
but if you do that you have to make sure

00:09:49,839 --> 00:09:53,680
the user you get the correct key uses

00:09:51,970 --> 00:09:56,529
the extensions and extended key issues

00:09:53,680 --> 00:09:58,420
extensions on that certificate in this

00:09:56,529 --> 00:10:00,880
case digital signature key and safer

00:09:58,420 --> 00:10:04,149
meant and server off otherwise IPSec

00:10:00,880 --> 00:10:07,329
won't use that cert and most peak guys

00:10:04,149 --> 00:10:09,670
don't add all the appropriate server

00:10:07,329 --> 00:10:12,089
extensions I know our internal one

00:10:09,670 --> 00:10:14,960
doesn't we had to create our own cert

00:10:12,089 --> 00:10:16,430
next

00:10:14,960 --> 00:10:19,250
we had to install and configure

00:10:16,430 --> 00:10:21,320
strongswan strongswan is the security or

00:10:19,250 --> 00:10:24,950
the software suite we're using on the

00:10:21,320 --> 00:10:27,860
Ubuntu stem cells to provide IPSec it's

00:10:24,950 --> 00:10:31,190
a standard software just apt-get install

00:10:27,860 --> 00:10:33,710
strong so on the important thing to note

00:10:31,190 --> 00:10:37,090
here is the IP set comp this is where

00:10:33,710 --> 00:10:39,680
all the configuration is set for IPSec

00:10:37,090 --> 00:10:42,530
communications so our our key exchange

00:10:39,680 --> 00:10:44,390
is internet key exchange version 2 we

00:10:42,530 --> 00:10:47,740
have our internet key exchange ciphers

00:10:44,390 --> 00:10:50,120
and algorithms you know the ESP cipher

00:10:47,740 --> 00:10:53,180
you know what we do for dead period

00:10:50,120 --> 00:10:55,130
detection our certificate we define the

00:10:53,180 --> 00:10:57,620
certificate we use to authenticate

00:10:55,130 --> 00:10:59,390
between servers and finally all of our

00:10:57,620 --> 00:11:01,370
connections to the other servers are

00:10:59,390 --> 00:11:02,990
defined here and this isn't this is just

00:11:01,370 --> 00:11:04,640
an example that configuration is much

00:11:02,990 --> 00:11:09,820
larger we have many more servers than

00:11:04,640 --> 00:11:12,350
that but the important stuff is there

00:11:09,820 --> 00:11:15,530
all right

00:11:12,350 --> 00:11:17,710
the when we implement IPSec that does

00:11:15,530 --> 00:11:21,260
that is absent overhead to the protocol

00:11:17,710 --> 00:11:23,240
or to the packet and because of that we

00:11:21,260 --> 00:11:25,700
have to determine and set our network em

00:11:23,240 --> 00:11:27,500
to use both on the virtual machines in

00:11:25,700 --> 00:11:30,800
the cloud foundry deployment and within

00:11:27,500 --> 00:11:32,510
the warden containers themselves for

00:11:30,800 --> 00:11:35,990
those of you who deploy to OpenStack

00:11:32,510 --> 00:11:38,210
today using GRE tunnels you're already

00:11:35,990 --> 00:11:39,620
familiar with part of this yeah you

00:11:38,210 --> 00:11:42,380
probably are already setting them to you

00:11:39,620 --> 00:11:44,330
in your Bosh deployment manifest to

00:11:42,380 --> 00:11:46,550
account for the overhead and the the GRE

00:11:44,330 --> 00:11:48,110
tunnels and this is much the same thing

00:11:46,550 --> 00:11:53,330
we're adding another tunnel on top of

00:11:48,110 --> 00:11:55,670
that yeah if we had if we have data

00:11:53,330 --> 00:11:57,770
fragmentation that completes all kinds

00:11:55,670 --> 00:11:59,510
of bad things in the environment some of

00:11:57,770 --> 00:12:01,130
the warden containers can no longer talk

00:11:59,510 --> 00:12:05,630
on the network when the packets are

00:12:01,130 --> 00:12:07,960
fragmented so as a good until employee

00:12:05,630 --> 00:12:10,970
had be remiss for not mentioning that

00:12:07,960 --> 00:12:13,460
there are some benefits to deploying on

00:12:10,970 --> 00:12:15,740
intel-based infrastructure all the

00:12:13,460 --> 00:12:18,020
current versions of strongswan open ssl

00:12:15,740 --> 00:12:20,480
linux kernel's they'll automatically

00:12:18,020 --> 00:12:22,670
leverage aes and i chipset instructions

00:12:20,480 --> 00:12:25,640
which offload all this encryption work

00:12:22,670 --> 00:12:29,210
to the hardware of the CPU itself

00:12:25,640 --> 00:12:31,760
and in a completely non biased set up in

00:12:29,210 --> 00:12:32,810
tests that intel performed you can

00:12:31,760 --> 00:12:34,730
achieve up to a four hundred percent

00:12:32,810 --> 00:12:39,470
throughput increase by using a hardware

00:12:34,730 --> 00:12:45,200
enabled architecture versus just a non

00:12:39,470 --> 00:12:47,480
enabled software solution there is some

00:12:45,200 --> 00:12:48,950
impact to support ability with this once

00:12:47,480 --> 00:12:50,300
we've turned on IPSec and all these

00:12:48,950 --> 00:12:52,670
firewall rules and all this stuff

00:12:50,300 --> 00:12:54,590
support ability becomes harder some of

00:12:52,670 --> 00:12:56,180
this is by design the traffic is now

00:12:54,590 --> 00:12:58,160
encrypted and encapsulated so it's

00:12:56,180 --> 00:12:59,450
harder to inspect that was our end goal

00:12:58,160 --> 00:13:02,210
we don't want people looking at the

00:12:59,450 --> 00:13:03,860
traffic that includes us so when we're

00:13:02,210 --> 00:13:06,380
trying to diagnose a problem we can no

00:13:03,860 --> 00:13:08,030
longer just do it you know TCP dump look

00:13:06,380 --> 00:13:11,780
at what's going on it's all encrypted

00:13:08,030 --> 00:13:14,900
it's gibberish so uh yeah so we stepped

00:13:11,780 --> 00:13:16,760
on our feet there but we also need to

00:13:14,900 --> 00:13:18,680
establish additional monitoring we need

00:13:16,760 --> 00:13:21,290
to make sure IPSec tunnels and services

00:13:18,680 --> 00:13:24,320
are running at all times if those fail

00:13:21,290 --> 00:13:26,450
so does our network or our platform and

00:13:24,320 --> 00:13:29,630
we also need to make sure we start our

00:13:26,450 --> 00:13:31,130
IPSec jobs and our firewall rules in the

00:13:29,630 --> 00:13:32,810
right order we want those tunnels and

00:13:31,130 --> 00:13:35,330
firewall rules in place before all of

00:13:32,810 --> 00:13:37,790
our CF jobs start up and start

00:13:35,330 --> 00:13:40,250
communicating it's especially important

00:13:37,790 --> 00:13:43,180
for the DEA servers the wardens that are

00:13:40,250 --> 00:13:49,070
spun up the containers create their own

00:13:43,180 --> 00:13:50,900
IP IP tables rules and we want our rules

00:13:49,070 --> 00:13:55,490
to be in place in process before those

00:13:50,900 --> 00:13:57,230
rules are created so this solution isn't

00:13:55,490 --> 00:13:58,790
going to catch everything this is only

00:13:57,230 --> 00:14:01,790
going to solve the problem between the

00:13:58,790 --> 00:14:03,680
servers we set up IPSec on that is our

00:14:01,790 --> 00:14:05,030
own Cloud Foundry servers if we're

00:14:03,680 --> 00:14:06,890
making a connection to an external

00:14:05,030 --> 00:14:09,050
server anything outside of our platform

00:14:06,890 --> 00:14:11,420
like for instance if we're logging to an

00:14:09,050 --> 00:14:12,800
external sister we still have to make

00:14:11,420 --> 00:14:15,560
sure we're using a secure protocol like

00:14:12,800 --> 00:14:18,470
TLS to do that otherwise it'll be

00:14:15,560 --> 00:14:20,330
unencrypted developers should design

00:14:18,470 --> 00:14:21,800
their apps to enforce HTTPS you know

00:14:20,330 --> 00:14:24,800
they should look at the exported proto

00:14:21,800 --> 00:14:29,089
header in their app and make sure their

00:14:24,800 --> 00:14:30,770
their app is is requiring HTTPS if

00:14:29,089 --> 00:14:33,320
you're using something like LDAP which

00:14:30,770 --> 00:14:36,500
we do to for hours on occasion make sure

00:14:33,320 --> 00:14:38,120
you use and held that BES otherwise you

00:14:36,500 --> 00:14:39,230
defeated the whole purpose of this how

00:14:38,120 --> 00:14:45,650
your domain passwords will be

00:14:39,230 --> 00:14:48,350
laying around in clear-text next so call

00:14:45,650 --> 00:14:50,390
to action and this is for all of us as

00:14:48,350 --> 00:14:52,700
community members contributors to the

00:14:50,390 --> 00:14:54,170
code supporters of Cloud Foundry you

00:14:52,700 --> 00:14:55,430
know there's other ways we can other

00:14:54,170 --> 00:14:58,970
ways and things we can do to extend

00:14:55,430 --> 00:15:00,740
Cloud Foundry and secure it you know we

00:14:58,970 --> 00:15:02,870
could be better at documenting the ports

00:15:00,740 --> 00:15:04,090
and protocols used within the platform a

00:15:02,870 --> 00:15:06,440
lot of these are hard to discover

00:15:04,090 --> 00:15:09,290
they're not clearly documented are they

00:15:06,440 --> 00:15:12,590
secure are they not it's hard to find

00:15:09,290 --> 00:15:14,150
out especially for a new adopter of

00:15:12,590 --> 00:15:16,160
Cloud Foundry and that's what we wanted

00:15:14,150 --> 00:15:18,620
people to adopt this thing right the

00:15:16,160 --> 00:15:21,260
more the better we could natively

00:15:18,620 --> 00:15:23,300
encrypt all the endpoint traffic then we

00:15:21,260 --> 00:15:25,310
would need IPSec anymore that would be

00:15:23,300 --> 00:15:29,150
awesome if we could turn all this off

00:15:25,310 --> 00:15:30,950
that'd be great we can do it we can do

00:15:29,150 --> 00:15:32,150
other things mostly targeted at

00:15:30,950 --> 00:15:33,620
enterprises

00:15:32,150 --> 00:15:36,410
you know like us or any other big

00:15:33,620 --> 00:15:38,530
corporation we could we could do things

00:15:36,410 --> 00:15:40,700
like make this aging process extensible

00:15:38,530 --> 00:15:43,130
allowing us to insert things into the

00:15:40,700 --> 00:15:47,000
workflow like real time dynamic code

00:15:43,130 --> 00:15:49,130
scanning so employed developer deploys

00:15:47,000 --> 00:15:50,510
their code upon deployment it goes out

00:15:49,130 --> 00:15:52,490
there at scanned for vulnerabilities you

00:15:50,510 --> 00:15:54,590
know common exploits that sort of thing

00:15:52,490 --> 00:15:57,100
sequel injections before it actually

00:15:54,590 --> 00:15:59,750
gets deployed we have real-time scanning

00:15:57,100 --> 00:16:01,850
or even to inspect the build packs

00:15:59,750 --> 00:16:04,790
who knows what's in some of these build

00:16:01,850 --> 00:16:06,410
packs that if if you're allowing the

00:16:04,790 --> 00:16:08,570
developers to specify their own build

00:16:06,410 --> 00:16:10,850
packs they could point to any URL out

00:16:08,570 --> 00:16:12,740
there on the internet and who knows what

00:16:10,850 --> 00:16:14,540
code they're running on your platform

00:16:12,740 --> 00:16:18,790
maybe you just deployed the best botnet

00:16:14,540 --> 00:16:18,790
out there you know Cloud Foundry botnet

00:16:19,720 --> 00:16:23,720
and one of the things this is actually

00:16:21,950 --> 00:16:25,910
our son of our security requirements is

00:16:23,720 --> 00:16:29,120
that we need to be able to isolate the

00:16:25,910 --> 00:16:31,310
Cloud Foundry API from then point that

00:16:29,120 --> 00:16:33,320
services the the deployed applications

00:16:31,310 --> 00:16:34,820
we have an internal community of

00:16:33,320 --> 00:16:37,400
developers targeting our environment

00:16:34,820 --> 00:16:39,350
deploying applications for external

00:16:37,400 --> 00:16:41,870
customers to look at you know people out

00:16:39,350 --> 00:16:43,070
on the Internet to see these apps but

00:16:41,870 --> 00:16:44,360
our security group doesn't want those

00:16:43,070 --> 00:16:45,830
people on the Internet to be able to hit

00:16:44,360 --> 00:16:47,350
the Cloud Foundry API they don't wanna

00:16:45,830 --> 00:16:49,700
be able to put you know target our

00:16:47,350 --> 00:16:52,900
platform and scale and things like that

00:16:49,700 --> 00:16:57,170
but at present we can't do that

00:16:52,900 --> 00:17:00,650
we can obfuscate that by the host

00:16:57,170 --> 00:17:01,910
headers we can make it seem like you

00:17:00,650 --> 00:17:04,730
can't get to it but a savvy

00:17:01,910 --> 00:17:06,020
hacker could still discover the you know

00:17:04,730 --> 00:17:09,890
the host header for our deployment and

00:17:06,020 --> 00:17:11,690
target it but you know something like

00:17:09,890 --> 00:17:15,050
the ability to register the API route to

00:17:11,690 --> 00:17:16,880
a different TCP port would be one way to

00:17:15,050 --> 00:17:18,410
address that we just wouldn't forward

00:17:16,880 --> 00:17:22,100
that port on our external load balancer

00:17:18,410 --> 00:17:23,480
and we do to isolate the API but those

00:17:22,100 --> 00:17:26,050
are just some examples of things we can

00:17:23,480 --> 00:17:28,730
do to enhance security in the platform

00:17:26,050 --> 00:17:31,190
I'm sure there's a thousand more and

00:17:28,730 --> 00:17:34,100
that's what all you guys are here to

00:17:31,190 --> 00:17:36,130
help with including us so whatever we

00:17:34,100 --> 00:17:42,640
come up with we should contribute back

00:17:36,130 --> 00:17:42,640
and next how am i doing for time

00:17:45,340 --> 00:17:49,920
all right any questions guests um

00:18:01,010 --> 00:18:05,910
okay so to summarize he wants to know if

00:18:04,200 --> 00:18:07,980
I can quantify what the overhead was for

00:18:05,910 --> 00:18:09,809
as far as impact in performance of

00:18:07,980 --> 00:18:13,380
turning on all this encryption I'd be

00:18:09,809 --> 00:18:17,549
sick and then with the AV and I saw a

00:18:13,380 --> 00:18:20,280
yes and I you had how much we get back

00:18:17,549 --> 00:18:23,789
so I don't know we didn't do any actual

00:18:20,280 --> 00:18:25,970
measurements of the the impact so I

00:18:23,789 --> 00:18:30,150
don't have numbers that I can quote I

00:18:25,970 --> 00:18:32,159
can say that it was it was noticeable

00:18:30,150 --> 00:18:34,890
when we first turned it on that's that's

00:18:32,159 --> 00:18:36,450
a little slower and then we got to look

00:18:34,890 --> 00:18:38,820
and we noticed that our platform itself

00:18:36,450 --> 00:18:41,640
our OpenStack environment hadn't been

00:18:38,820 --> 00:18:44,429
configured to actually enable the AES

00:18:41,640 --> 00:18:46,919
and I extensions through to the VMS that

00:18:44,429 --> 00:18:49,740
were being run so we had to reconfigure

00:18:46,919 --> 00:18:51,210
that in our OpenStack to enable that you

00:18:49,740 --> 00:18:53,669
know the forwarding of the ASN I

00:18:51,210 --> 00:18:55,049
extensions and that actually was faster

00:18:53,669 --> 00:18:56,520
it was something we could just notice

00:18:55,049 --> 00:18:58,620
just in our day to day use so we don't

00:18:56,520 --> 00:19:04,370
have timings to back that up but but it

00:18:58,620 --> 00:19:04,370
was noticeable so yeah

00:19:10,270 --> 00:19:15,390
so the question is what does the

00:19:11,679 --> 00:19:15,390
iptables approach due to elasticity

00:19:16,260 --> 00:19:20,799
there there is there are things here

00:19:18,760 --> 00:19:23,260
that are going to have to consider it's

00:19:20,799 --> 00:19:25,480
not as easy to scale out obviously

00:19:23,260 --> 00:19:28,179
because now you have to implement all

00:19:25,480 --> 00:19:33,000
these new IP tables and IPSec rules for

00:19:28,179 --> 00:19:35,610
that matter we in our case have have

00:19:33,000 --> 00:19:38,169
built most of this into a Bosch release

00:19:35,610 --> 00:19:40,330
we've made their own custom stem so with

00:19:38,169 --> 00:19:41,529
a lot of this pre-installed in there we

00:19:40,330 --> 00:19:41,770
didn't start from scratch with the stem

00:19:41,529 --> 00:19:43,720
cell

00:19:41,770 --> 00:19:45,970
we took the one that one of the deploy

00:19:43,720 --> 00:19:47,740
you know default stem cells we extracted

00:19:45,970 --> 00:19:51,309
it out added strongswan installed some

00:19:47,740 --> 00:19:53,020
of our own things repackaged it up and

00:19:51,309 --> 00:19:55,870
then made a boss release to deploy IPSec

00:19:53,020 --> 00:19:57,429
and all these rules so in our case we

00:19:55,870 --> 00:19:59,140
just changed the number of servers we

00:19:57,429 --> 00:20:08,049
want and redeploy with Bosch and it's

00:19:59,140 --> 00:20:10,000
all scaled so so right right so right so

00:20:08,049 --> 00:20:11,740
that's why when we did it in a Bosch

00:20:10,000 --> 00:20:13,000
release that's all then comprehended in

00:20:11,740 --> 00:20:15,970
there because all the IPS are in our

00:20:13,000 --> 00:20:17,830
manifest and we define all those and

00:20:15,970 --> 00:20:19,330
when we do our release if you didn't do

00:20:17,830 --> 00:20:20,770
a Bosch release it would be a lot harder

00:20:19,330 --> 00:20:25,649
you'd have to manually go out there and

00:20:20,770 --> 00:20:25,649
turn all this on yes sir

00:20:32,709 --> 00:20:39,739
right right so so the question is do we

00:20:37,849 --> 00:20:42,379
have we made our Bosch release available

00:20:39,739 --> 00:20:44,959
for the community to see and and we

00:20:42,379 --> 00:20:46,249
haven't yet and quite frankly we didn't

00:20:44,959 --> 00:20:48,080
know how many people would be interested

00:20:46,249 --> 00:20:50,299
in implementing IPSec and doing all this

00:20:48,080 --> 00:20:51,499
work because it's some serious overhead

00:20:50,299 --> 00:20:52,820
and it's not for the faint of heart I

00:20:51,499 --> 00:20:54,469
mean it took us a long time to get this

00:20:52,820 --> 00:20:56,989
configured and working right between all

00:20:54,469 --> 00:20:58,219
of our servers and it was some of our

00:20:56,989 --> 00:21:00,769
security team said you're not deploying

00:20:58,219 --> 00:21:02,089
without that and I don't know how many

00:21:00,769 --> 00:21:03,679
other people have that you know I mean

00:21:02,089 --> 00:21:05,659
it was everybody security psycho like

00:21:03,679 --> 00:21:08,570
that I don't know I assume there are

00:21:05,659 --> 00:21:10,759
some others so so that is something we

00:21:08,570 --> 00:21:11,959
can explore we can we'd be happy to see

00:21:10,759 --> 00:21:14,779
know what parts we can make available

00:21:11,959 --> 00:21:16,429
and definitely you maybe write some

00:21:14,779 --> 00:21:20,379
white papers or blogs or something to

00:21:16,429 --> 00:21:23,499
get into more detail and how we did this

00:21:20,379 --> 00:21:23,499
yes sir

00:21:29,600 --> 00:21:37,010
oh I got you okay so so you're asking

00:21:35,000 --> 00:21:39,290
about the warden containers themselves

00:21:37,010 --> 00:21:40,790
because they're assigned dynamic ports

00:21:39,290 --> 00:21:43,060
when they're deployed how did we count

00:21:40,790 --> 00:21:45,590
for that we didn't actually need to

00:21:43,060 --> 00:21:48,020
we're securing the traffic between the

00:21:45,590 --> 00:21:49,490
DEA servers themselves and the rest of

00:21:48,020 --> 00:21:51,430
the platform and the warden containers

00:21:49,490 --> 00:21:53,480
that you're talking about are all

00:21:51,430 --> 00:21:56,840
they're all handled by a few tables

00:21:53,480 --> 00:22:01,610
rules within the the DEA itself so

00:21:56,840 --> 00:22:05,690
before that traffic and I uh it's a hard

00:22:01,610 --> 00:22:08,450
thing to describe I know Aaron do you

00:22:05,690 --> 00:22:10,730
have a way to this to summarize how that

00:22:08,450 --> 00:22:12,200
works yeah I mean so they are you just

00:22:10,730 --> 00:22:14,390
asking about like the IP tables rules

00:22:12,200 --> 00:22:16,040
how they're so we have to use port

00:22:14,390 --> 00:22:17,990
ranges to open up so for example there's

00:22:16,040 --> 00:22:19,730
a wide range of ports that a word

00:22:17,990 --> 00:22:20,960
container might open so we just opened

00:22:19,730 --> 00:22:23,240
that entire range right so we're just

00:22:20,960 --> 00:22:24,650
trying to block access to well-known

00:22:23,240 --> 00:22:26,240
ports right we don't want people to be

00:22:24,650 --> 00:22:30,290
trying to you know hack things that we

00:22:26,240 --> 00:22:35,950
don't want to expose so yeah good answer

00:22:30,290 --> 00:22:35,950
good question - yes sir

00:22:58,330 --> 00:23:03,310
I don't think they're fully comfortable

00:23:00,670 --> 00:23:05,140
with that I think that they know that

00:23:03,310 --> 00:23:08,110
right now we've done the best we can

00:23:05,140 --> 00:23:10,000
give them what we have we're always

00:23:08,110 --> 00:23:15,340
looking to involve you know to evolve

00:23:10,000 --> 00:23:16,600
and improve what we have so no I think

00:23:15,340 --> 00:23:27,640
there's always room for improvement and

00:23:16,600 --> 00:23:31,450
that is possible I don't know that

00:23:27,640 --> 00:23:33,280
offhand I I haven't eat just yet but I'm

00:23:31,450 --> 00:23:35,050
sure eventually our security team is

00:23:33,280 --> 00:23:36,490
gonna think about that and go hey you

00:23:35,050 --> 00:23:37,930
guys have to do this and they won't have

00:23:36,490 --> 00:23:40,950
a solution for us they just tell us we

00:23:37,930 --> 00:23:48,760
have to and we'll figure it out

00:23:40,950 --> 00:23:51,480
yes sir so did we do anything to secure

00:23:48,760 --> 00:23:51,480
Bosch itself

00:23:54,650 --> 00:23:59,310
we haven't specifically targeted bhashya

00:23:57,810 --> 00:24:01,710
and mostly because there's not a lot of

00:23:59,310 --> 00:24:05,610
secure information going back and forth

00:24:01,710 --> 00:24:07,470
between our Bosch systems if there were

00:24:05,610 --> 00:24:09,000
customer data usernames passwords and

00:24:07,470 --> 00:24:10,320
things like that we're not using LDAP to

00:24:09,000 --> 00:24:14,760
authenticate for Bosch or anything like

00:24:10,320 --> 00:24:16,800
that so it's it's not a top priority for

00:24:14,760 --> 00:24:18,480
us but but still if boss were

00:24:16,800 --> 00:24:21,780
compromised that is still they could

00:24:18,480 --> 00:24:38,040
destroy everything yeah yeah for sure

00:24:21,780 --> 00:24:39,960
yeah right so when I talked about

00:24:38,040 --> 00:24:42,060
natively encrypting the endpoints in the

00:24:39,960 --> 00:24:43,290
platform I actually meant all of the

00:24:42,060 --> 00:24:45,630
endpoints between the cloud foundry

00:24:43,290 --> 00:24:47,310
components themselves like the Nats

00:24:45,630 --> 00:24:51,300
communication bus if that were natively

00:24:47,310 --> 00:24:52,650
encrypted or the API calls between you

00:24:51,300 --> 00:24:54,330
know the Cloud Foundry server and the

00:24:52,650 --> 00:24:58,020
health manager or something like that if

00:24:54,330 --> 00:25:03,900
all that was already encrypted we

00:24:58,020 --> 00:25:06,960
wouldn't need to secure this but well I

00:25:03,900 --> 00:25:08,520
think I think at present between the UI

00:25:06,960 --> 00:25:10,290
a server and the login server they

00:25:08,520 --> 00:25:12,510
actually in your deployment manifest you

00:25:10,290 --> 00:25:18,980
can specify to use HTTPS and give it a

00:25:12,510 --> 00:25:22,410
certificate in your manifest yeah yep

00:25:18,980 --> 00:25:24,650
but yeah if we could do that the problem

00:25:22,410 --> 00:25:28,490
would be would be solved

00:25:24,650 --> 00:25:28,490
anybody else yes sir

00:25:43,360 --> 00:25:48,040
the bandha it actually starts them in

00:25:45,490 --> 00:25:50,460
the order that they're listed and I'm

00:25:48,040 --> 00:25:50,460
done things

00:25:57,580 --> 00:26:01,750
well let's see the the jobs are

00:25:59,440 --> 00:26:15,940
processed in the order that we list them

00:26:01,750 --> 00:26:17,580
in the manifest as well right right so

00:26:15,940 --> 00:26:20,380
the job is looking through all of our

00:26:17,580 --> 00:26:21,490
manifest properties for all the IP

00:26:20,380 --> 00:26:22,660
addresses and all that stuff we

00:26:21,490 --> 00:26:24,310
specified in there and it does create

00:26:22,660 --> 00:26:26,290
the connection we'll sell the different

00:26:24,310 --> 00:26:28,990
service that it needs to talk to the

00:26:26,290 --> 00:26:31,210
specific we have roles to find for like

00:26:28,990 --> 00:26:34,330
an ad server has these specific you know

00:26:31,210 --> 00:26:35,830
IPSec rules and it generates all of that

00:26:34,330 --> 00:26:38,800
and pushes that configuration to that

00:26:35,830 --> 00:26:40,480
server and that starts the services so

00:26:38,800 --> 00:26:41,830
that there is one particular place I

00:26:40,480 --> 00:26:44,290
think what you're referring to like the

00:26:41,830 --> 00:26:46,030
mana job so ideally we'll be able to say

00:26:44,290 --> 00:26:48,460
in the mana job there's a dependency of

00:26:46,030 --> 00:26:50,140
the DEA component for example on the

00:26:48,460 --> 00:26:52,720
IPSec job and so to do that we have to

00:26:50,140 --> 00:26:54,580
modify the file that CF creates right so

00:26:52,720 --> 00:26:55,750
there is a an issue there but we can do

00:26:54,580 --> 00:26:57,790
that through some sort of configuration

00:26:55,750 --> 00:26:59,710
management on top of the releases right

00:26:57,790 --> 00:27:04,870
because it's not extensible in the

00:26:59,710 --> 00:27:08,280
release itself anybody else

00:27:04,870 --> 00:27:08,280
I'm meeting in a rush home and try this

00:27:08,490 --> 00:27:15,640
no oh you you guys are let me know how

00:27:12,040 --> 00:27:17,880
that works no seriously if anybody does

00:27:15,640 --> 00:27:21,000
have interested in trying any of this

00:27:17,880 --> 00:27:23,650
we'd be happy to help in any way we can

00:27:21,000 --> 00:27:25,840
ideally we'd like to see some of the

00:27:23,650 --> 00:27:27,490
changes pushed back into cloud foundry

00:27:25,840 --> 00:27:29,920
itself so that we don't have to take

00:27:27,490 --> 00:27:32,050
these kinds of steps to secure the

00:27:29,920 --> 00:27:33,670
platform and you know I think we're

00:27:32,050 --> 00:27:36,100
getting there we see improvements all

00:27:33,670 --> 00:27:38,770
the time you know the code for Cloud

00:27:36,100 --> 00:27:40,540
Foundry for those of you have been with

00:27:38,770 --> 00:27:43,510
it for a few years know that it's

00:27:40,540 --> 00:27:44,770
getting better all the time used to be

00:27:43,510 --> 00:27:47,710
just to deploy it and figure it out

00:27:44,770 --> 00:27:48,880
would take you months now a new user can

00:27:47,710 --> 00:27:50,890
come in and within a week have a

00:27:48,880 --> 00:27:54,840
platform running pretty easily once they

00:27:50,890 --> 00:27:54,840
figure out bosh here's the hard part

00:27:55,120 --> 00:28:00,700
if that was it I guess I'll hang out up

00:27:58,420 --> 00:28:02,640
here for any questions anybody wants to

00:28:00,700 --> 00:28:05,849
ask me

00:28:02,640 --> 00:28:05,849

YouTube URL: https://www.youtube.com/watch?v=5nohH_twFg8


