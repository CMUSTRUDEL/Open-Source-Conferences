Title: Launching the Next Generation Satellite Ground System on Cloud Foundry and Microservices
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	Launching the Next Generation Satellite Ground System on Cloud Foundry and Microservices - 04 Mark Carlson, Steve Wall, Mike Wierzbinski 720p
Captions: 
	00:00:00,060 --> 00:00:03,810
we're gonna go ahead and get started so

00:00:01,770 --> 00:00:08,519
if you want to grab a seat there's still

00:00:03,810 --> 00:00:11,070
plenty up front my name is Mark Carlson

00:00:08,519 --> 00:00:14,040
I'm the CTO of a company called ECS team

00:00:11,070 --> 00:00:16,410
we provide systems integration services

00:00:14,040 --> 00:00:19,529
for cloud foundry amongst many other

00:00:16,410 --> 00:00:21,990
things and today of one of my customers

00:00:19,529 --> 00:00:23,850
is going to be given a presentation from

00:00:21,990 --> 00:00:26,460
digital globe about what they've been

00:00:23,850 --> 00:00:27,930
doing with looking at platforms of

00:00:26,460 --> 00:00:30,449
service offerings including cloud

00:00:27,930 --> 00:00:32,790
foundry in their space which is

00:00:30,449 --> 00:00:34,829
satellite imagery so I wanna introduce

00:00:32,790 --> 00:00:36,930
Mike where's Minsky who's a director of

00:00:34,829 --> 00:00:39,180
cloud architecture at digital globe and

00:00:36,930 --> 00:00:41,040
he'll be followed in a few minutes by

00:00:39,180 --> 00:00:43,890
Steve wall who's one of the architects

00:00:41,040 --> 00:00:49,920
and developers for ECS team so get warm

00:00:43,890 --> 00:00:56,340
welcome to Mike where's ben ski hello

00:00:49,920 --> 00:01:02,190
all right hear me okay okay so basically

00:00:56,340 --> 00:01:03,870
let me give you a quick quick game plan

00:01:02,190 --> 00:01:06,210
for this further for the presentation

00:01:03,870 --> 00:01:07,500
just to give you guys a little bit of

00:01:06,210 --> 00:01:09,000
grounding in terms of what we're what

00:01:07,500 --> 00:01:11,400
we're all about and all that kind of

00:01:09,000 --> 00:01:13,049
stuff I'm going to give you a quick

00:01:11,400 --> 00:01:14,100
description of digital globe talk about

00:01:13,049 --> 00:01:15,240
some of the stuff that we do and talk

00:01:14,100 --> 00:01:17,850
about the use case that we're trying to

00:01:15,240 --> 00:01:19,770
tackle then we'll get into like Mark was

00:01:17,850 --> 00:01:22,680
saying a bunch of the discussion about

00:01:19,770 --> 00:01:24,630
kind of the technical and the cultural

00:01:22,680 --> 00:01:25,890
challenges that we've faced and time in

00:01:24,630 --> 00:01:28,409
terms of getting getting through this

00:01:25,890 --> 00:01:30,810
stuff hopefully give you some stuff that

00:01:28,409 --> 00:01:32,159
some some info that travels well and

00:01:30,810 --> 00:01:37,229
that you can take back and apply back

00:01:32,159 --> 00:01:41,210
home digital globe

00:01:37,229 --> 00:01:42,689
how many guys everybody uses Google Maps

00:01:41,210 --> 00:01:45,240
everybody

00:01:42,689 --> 00:01:47,009
everybody how many of you guys have

00:01:45,240 --> 00:01:48,780
gotten in there and punched the button

00:01:47,009 --> 00:01:50,700
that says show me satellite imagery I

00:01:48,780 --> 00:01:53,549
expecting everybody's hand go come on I

00:01:50,700 --> 00:01:55,560
know his hand go up okay so so if you've

00:01:53,549 --> 00:01:58,259
done that then you've interacted with

00:01:55,560 --> 00:02:01,500
products from digital globe we fly

00:01:58,259 --> 00:02:07,320
satellites we collect high volume high

00:02:01,500 --> 00:02:09,989
high high resolution high accuracy data

00:02:07,320 --> 00:02:11,940
that from from our satellites we pull it

00:02:09,989 --> 00:02:13,319
down to the ground we do a bunch of

00:02:11,940 --> 00:02:14,730
digital

00:02:13,319 --> 00:02:15,840
image processing and that kind of stuff

00:02:14,730 --> 00:02:18,209
to create all sorts of different kinds

00:02:15,840 --> 00:02:20,879
of imagery and then we blow that out

00:02:18,209 --> 00:02:24,780
across the world so that folks like you

00:02:20,879 --> 00:02:26,280
can can use it we have is currently are

00:02:24,780 --> 00:02:28,139
flying a constellation that there's

00:02:26,280 --> 00:02:31,349
black and white satellites up here the

00:02:28,139 --> 00:02:32,700
ones that are in color are our current

00:02:31,349 --> 00:02:35,280
and active the ones that are in black

00:02:32,700 --> 00:02:40,409
and white are have recently been retired

00:02:35,280 --> 00:02:44,400
so we have a archive of about 15 years

00:02:40,409 --> 00:02:48,109
of imagery that'll show you how the

00:02:44,400 --> 00:02:48,109
world has changed over the last 15 years

00:02:49,340 --> 00:02:53,489
um if you took a look at what we have in

00:02:51,989 --> 00:02:55,650
the archive right now and laid it down

00:02:53,489 --> 00:02:58,199
on top of the earth we'd cover the

00:02:55,650 --> 00:03:00,060
entire surface eight times over since

00:02:58,199 --> 00:03:02,189
most of the pictures that we take are of

00:03:00,060 --> 00:03:05,549
land you can imagine that that's

00:03:02,189 --> 00:03:08,310
actually a deeper stack than that on a

00:03:05,549 --> 00:03:10,139
monthly basis we we gather an area

00:03:08,310 --> 00:03:11,819
roughly equivalent to about sixty

00:03:10,139 --> 00:03:13,250
percent of the Earth's surface and the

00:03:11,819 --> 00:03:14,939
map that you're seeing up there is

00:03:13,250 --> 00:03:20,069
trying to show you how that's

00:03:14,939 --> 00:03:22,349
distributed and our latest effort back

00:03:20,069 --> 00:03:25,340
in in September we launched a new

00:03:22,349 --> 00:03:28,590
satellite on that we call world view 3

00:03:25,340 --> 00:03:30,720
it has you know basically from 400 miles

00:03:28,590 --> 00:03:33,269
up it can do a pixel that's about 30

00:03:30,720 --> 00:03:35,909
centimeters on the side very very cool

00:03:33,269 --> 00:03:37,530
instrument and and it's in production

00:03:35,909 --> 00:03:39,389
and doing commercial imagery and all

00:03:37,530 --> 00:03:41,459
that kind of stuff and just like most to

00:03:39,389 --> 00:03:43,229
you about ten minutes after the thing is

00:03:41,459 --> 00:03:44,729
launched and you're all excited and

00:03:43,229 --> 00:03:52,620
happy you get to work on the next one

00:03:44,729 --> 00:03:55,799
right and so our next I'm sorry I'm

00:03:52,620 --> 00:03:58,889
gonna we go with you al and and and we

00:03:55,799 --> 00:04:02,009
can we can talk about that later okay

00:03:58,889 --> 00:04:05,489
so worldview for is actually a satellite

00:04:02,009 --> 00:04:08,489
that we acquired as part of an act as a

00:04:05,489 --> 00:04:10,530
merger between digital globe and geo I

00:04:08,489 --> 00:04:12,030
used to be called GOI to for those of

00:04:10,530 --> 00:04:16,859
you that keep track of this this space

00:04:12,030 --> 00:04:20,039
and and so we're looking at the intro of

00:04:16,859 --> 00:04:22,320
world before as an opportunity for us to

00:04:20,039 --> 00:04:24,150
implement a new ground system that has

00:04:22,320 --> 00:04:25,979
the a bunch of the architectural

00:04:24,150 --> 00:04:27,300
characteristics that we wanted to put

00:04:25,979 --> 00:04:30,120
into our existing graph

00:04:27,300 --> 00:04:34,770
systems because you know but but

00:04:30,120 --> 00:04:37,830
couldn't because we are 24/7 365 kind of

00:04:34,770 --> 00:04:42,270
operation and and so we're looking at

00:04:37,830 --> 00:04:43,860
this as a as a great opportunity so Mike

00:04:42,270 --> 00:04:45,690
I hear you scream what's a ground system

00:04:43,860 --> 00:04:49,110
I'm glad you asked this is a ground

00:04:45,690 --> 00:04:50,940
system basically the idea is that you've

00:04:49,110 --> 00:04:53,280
got satellites that are circling the

00:04:50,940 --> 00:04:56,159
globe you have ground terminals that are

00:04:53,280 --> 00:04:57,720
used to send and receive commands and

00:04:56,159 --> 00:04:59,849
and and receive imagery from those

00:04:57,720 --> 00:05:01,530
satellites there's backhaul that that

00:04:59,849 --> 00:05:03,960
brings that imagery back onto our

00:05:01,530 --> 00:05:05,789
networks and if you look at the core of

00:05:03,960 --> 00:05:07,560
our business it really fits into those

00:05:05,789 --> 00:05:10,979
six domains that you see up on the board

00:05:07,560 --> 00:05:12,750
there ordering is I want to tell you

00:05:10,979 --> 00:05:14,550
what kind of imagery I want and what

00:05:12,750 --> 00:05:17,520
area of the globe I want you to want you

00:05:14,550 --> 00:05:19,199
to go take a picture of mission planning

00:05:17,520 --> 00:05:20,789
is there's a whole lot of people that

00:05:19,199 --> 00:05:22,590
are asking for imagery and there's a

00:05:20,789 --> 00:05:24,300
whole lot of clouds in the earth let's

00:05:22,590 --> 00:05:25,800
figure out when and where we can take

00:05:24,300 --> 00:05:27,930
the pictures and get you what you need

00:05:25,800 --> 00:05:30,840
so that you can go avoid evil and do

00:05:27,930 --> 00:05:32,250
good mission control is that is that

00:05:30,840 --> 00:05:33,960
part of the system that actually

00:05:32,250 --> 00:05:36,240
communicates with the satellites and

00:05:33,960 --> 00:05:39,330
gets the data back to back to our

00:05:36,240 --> 00:05:43,199
network inventory and content management

00:05:39,330 --> 00:05:45,479
you can think of that as a great big

00:05:43,199 --> 00:05:47,370
card catalog a great big card catalog

00:05:45,479 --> 00:05:49,199
that has all of the the metadata

00:05:47,370 --> 00:05:51,990
associated with the image strips that we

00:05:49,199 --> 00:05:54,330
collect and a great big bucket of data

00:05:51,990 --> 00:05:58,710
that that are the bits that we collect

00:05:54,330 --> 00:06:01,349
and those sit around until we decide we

00:05:58,710 --> 00:06:03,990
need to do a production run we basically

00:06:01,349 --> 00:06:05,069
take those raw bits and spin them use do

00:06:03,990 --> 00:06:07,139
all that that digital image processing

00:06:05,069 --> 00:06:09,389
that I was telling you about and create

00:06:07,139 --> 00:06:10,800
various kinds of imagery which we then

00:06:09,389 --> 00:06:14,610
mixed together with all sorts of other

00:06:10,800 --> 00:06:17,389
data to collect to create data products

00:06:14,610 --> 00:06:20,099
that you might be able to consume and

00:06:17,389 --> 00:06:22,229
delivery that's you know that's just

00:06:20,099 --> 00:06:23,490
saying okay once we've created some of

00:06:22,229 --> 00:06:25,409
that stuff we need to get it to the

00:06:23,490 --> 00:06:28,500
people that want it and so we might dump

00:06:25,409 --> 00:06:30,180
it into an s3 bucket we might use FTP or

00:06:28,500 --> 00:06:33,240
Signia to deliver it you know to

00:06:30,180 --> 00:06:36,000
somebody that's that wants it or you

00:06:33,240 --> 00:06:38,130
know we we still write hard files and we

00:06:36,000 --> 00:06:40,399
still you know ship ship discs around

00:06:38,130 --> 00:06:40,399
the globe

00:06:40,789 --> 00:06:47,009
so so that's that's the business that's

00:06:44,279 --> 00:06:50,879
what we do okay and the ground system is

00:06:47,009 --> 00:06:53,039
what we're trying to create and so we

00:06:50,879 --> 00:06:54,869
got into this thing where you know we we

00:06:53,039 --> 00:06:56,430
were looking at the way that we wanted

00:06:54,869 --> 00:06:58,289
to build this new ground system in the

00:06:56,430 --> 00:06:59,849
way we wanted it to work and and

00:06:58,289 --> 00:07:01,759
platform-as-a-service was an obvious

00:06:59,849 --> 00:07:03,960
candidate we wanted to be able to do

00:07:01,759 --> 00:07:05,520
well I'll tell you about what we wanted

00:07:03,960 --> 00:07:08,460
to do in a couple seconds but the whole

00:07:05,520 --> 00:07:10,559
idea is that we went through and created

00:07:08,460 --> 00:07:12,180
a set of knockout criteria that said if

00:07:10,559 --> 00:07:15,059
we're going to use a pass this is the

00:07:12,180 --> 00:07:17,490
way it should work and then we went out

00:07:15,059 --> 00:07:19,740
and evaluated the various offerings that

00:07:17,490 --> 00:07:22,289
were available on the market for four

00:07:19,740 --> 00:07:24,020
four created for providing that service

00:07:22,289 --> 00:07:26,729
or providing that that function and

00:07:24,020 --> 00:07:29,550
Cloud Foundry was a pretty obvious

00:07:26,729 --> 00:07:31,680
winner in that in that regard so then we

00:07:29,550 --> 00:07:34,169
went out and and grabbed the open source

00:07:31,680 --> 00:07:36,479
and the and and pivotal versions of

00:07:34,169 --> 00:07:38,430
cloud foundry pulled him into our labs

00:07:36,479 --> 00:07:42,389
and pressure tested them to make sure

00:07:38,430 --> 00:07:44,519
that they really you know conformed that

00:07:42,389 --> 00:07:46,709
they really did live up to the to what

00:07:44,519 --> 00:07:47,759
we had learned and what we what we came

00:07:46,709 --> 00:07:51,919
to believe about how they should

00:07:47,759 --> 00:07:54,959
function a couple of things about that

00:07:51,919 --> 00:07:57,870
in doing this we took a bunch of

00:07:54,959 --> 00:08:00,089
applications that we had services that

00:07:57,870 --> 00:08:01,800
we had and ported them into the end of

00:08:00,089 --> 00:08:05,719
the cloud foundry environment ran em on

00:08:01,800 --> 00:08:08,909
OpenStack Ryan Oman VMware random on AWS

00:08:05,719 --> 00:08:11,039
you know we we tried different languages

00:08:08,909 --> 00:08:15,449
we were we've we've done Java and Ruby

00:08:11,039 --> 00:08:18,389
and Python and and in all cases an

00:08:15,449 --> 00:08:20,699
application that's running on on any any

00:08:18,389 --> 00:08:23,279
combination that has has pretty much run

00:08:20,699 --> 00:08:25,469
on on all the other combinations without

00:08:23,279 --> 00:08:28,619
any changes it's been pretty it's pretty

00:08:25,469 --> 00:08:30,809
pretty slick and once we got through all

00:08:28,619 --> 00:08:31,860
that then we could say okay let's go

00:08:30,809 --> 00:08:35,430
back to management have this

00:08:31,860 --> 00:08:38,219
conversation about what are our approach

00:08:35,430 --> 00:08:39,479
is and our staffing models and how we're

00:08:38,219 --> 00:08:48,540
going to how we're going to accomplish

00:08:39,479 --> 00:08:51,000
this stuff okay so a couple of quick

00:08:48,540 --> 00:08:52,709
things in order to be able to accomplish

00:08:51,000 --> 00:08:53,189
this in order to be able to make this

00:08:52,709 --> 00:08:53,700
thing work

00:08:53,189 --> 00:08:55,140
we're

00:08:53,700 --> 00:08:56,970
moving a lot of people's cheese at

00:08:55,140 --> 00:08:59,100
DigitalGlobe there's a lot of place

00:08:56,970 --> 00:09:01,800
places where people are having to change

00:08:59,100 --> 00:09:03,960
and find new new new technologies that

00:09:01,800 --> 00:09:05,580
they're going to use come to come to

00:09:03,960 --> 00:09:06,960
grips with new approaches and all that

00:09:05,580 --> 00:09:07,560
kind of stuff and a couple of things

00:09:06,960 --> 00:09:09,000
that we've done

00:09:07,560 --> 00:09:12,750
first of all challenge the status quo

00:09:09,000 --> 00:09:13,830
every place you go we there's there's a

00:09:12,750 --> 00:09:16,260
lot of conversations that have been

00:09:13,830 --> 00:09:19,290
going on about that and and and frankly

00:09:16,260 --> 00:09:23,010
the the the technical technical team has

00:09:19,290 --> 00:09:25,350
been much more receptive to that than

00:09:23,010 --> 00:09:27,570
them our management that's taken a lot

00:09:25,350 --> 00:09:28,950
more time to convince them that that

00:09:27,570 --> 00:09:32,730
this is a worthwhile this was a

00:09:28,950 --> 00:09:35,400
worthwhile gig we've realigned all our

00:09:32,730 --> 00:09:37,680
scrum teams so that they are maximally

00:09:35,400 --> 00:09:39,360
autonomous so that they don't have a

00:09:37,680 --> 00:09:41,430
bunch of dependencies team to team

00:09:39,360 --> 00:09:44,670
they're not focused on technology

00:09:41,430 --> 00:09:46,740
they're focused on function and and they

00:09:44,670 --> 00:09:48,510
control and control their own destiny in

00:09:46,740 --> 00:09:53,220
terms of creating and delivering

00:09:48,510 --> 00:09:54,870
function to the business and and we've

00:09:53,220 --> 00:09:56,130
done something else we've and will

00:09:54,870 --> 00:09:59,220
you'll hear more about this as we go

00:09:56,130 --> 00:10:02,220
we've created a suite or a progression

00:09:59,220 --> 00:10:03,900
of eight and and tests the first one we

00:10:02,220 --> 00:10:05,670
affectionately called the hello world

00:10:03,900 --> 00:10:07,500
test it was essentially a distributed

00:10:05,670 --> 00:10:09,300
hello world that had a bunch of services

00:10:07,500 --> 00:10:12,030
talking to each other but it was doing

00:10:09,300 --> 00:10:14,070
it on top of the paths and our

00:10:12,030 --> 00:10:19,470
orchestration and a bunch of that kind

00:10:14,070 --> 00:10:24,450
of stuff in terms of what we're running

00:10:19,470 --> 00:10:27,420
right now the just to talk a little bit

00:10:24,450 --> 00:10:29,550
about the stack rapid development with

00:10:27,420 --> 00:10:32,010
minimal drag we're using the the scaled

00:10:29,550 --> 00:10:33,360
agile framework continuous end a great

00:10:32,010 --> 00:10:35,100
integration where you know we're a

00:10:33,360 --> 00:10:37,410
DevOps shop and we're using the Cloud

00:10:35,100 --> 00:10:39,600
Foundry hooks for being able to do that

00:10:37,410 --> 00:10:43,380
we're using Jenkins for automated

00:10:39,600 --> 00:10:44,820
deployment and pipeline something that

00:10:43,380 --> 00:10:46,530
was a surprise to me but it shouldn't

00:10:44,820 --> 00:10:48,120
have been is environment you know the

00:10:46,530 --> 00:10:50,250
whole idea of environmental parity the

00:10:48,120 --> 00:10:52,020
fact that we have these build packs that

00:10:50,250 --> 00:10:54,060
have been created that build back build

00:10:52,020 --> 00:10:55,440
packs can be deployed to all the

00:10:54,060 --> 00:10:57,270
different environments and the testing

00:10:55,440 --> 00:11:00,300
testing environments that we want and

00:10:57,270 --> 00:11:02,370
that those things function and are the

00:11:00,300 --> 00:11:07,470
same code in all in all situations has

00:11:02,370 --> 00:11:09,690
been has been a big win our aim is burst

00:11:07,470 --> 00:11:12,150
it is a burst of all environment the

00:11:09,690 --> 00:11:15,090
ability to have both on Prem and off

00:11:12,150 --> 00:11:17,220
Prem and to be able to to use back and

00:11:15,090 --> 00:11:19,440
forth between those two environments we

00:11:17,220 --> 00:11:20,700
also have to support completely

00:11:19,440 --> 00:11:23,130
air-gapped environments we have

00:11:20,700 --> 00:11:25,050
customers in various places around the

00:11:23,130 --> 00:11:26,670
world that have that we give a little

00:11:25,050 --> 00:11:28,770
mini ground system to and they can

00:11:26,670 --> 00:11:32,300
actually have shutter control those

00:11:28,770 --> 00:11:36,480
systems run completely autonomously and

00:11:32,300 --> 00:11:39,150
we're doing micro services and and and a

00:11:36,480 --> 00:11:40,560
bit of pragmatic architecture that Steve

00:11:39,150 --> 00:11:44,790
will talk a little bit when he talks it

00:11:40,560 --> 00:11:48,870
when it talks about a three-layer setup

00:11:44,790 --> 00:11:51,300
that we've got I guess the the the I'm

00:11:48,870 --> 00:11:53,250
going to do this and get off but but why

00:11:51,300 --> 00:11:55,260
Cloud Foundry I mean the things that

00:11:53,250 --> 00:11:59,160
Cloud Foundry are giving it is giving us

00:11:55,260 --> 00:12:01,350
is the ability to run all of this stuff

00:11:59,160 --> 00:12:06,170
on on multiple platforms and to be able

00:12:01,350 --> 00:12:09,150
to to migrate back and forth at will the

00:12:06,170 --> 00:12:13,500
the ability to support all the different

00:12:09,150 --> 00:12:15,510
languages and the and and the and the

00:12:13,500 --> 00:12:16,980
amount of kind of hygiene that we don't

00:12:15,510 --> 00:12:19,140
have to worry about because Cloud

00:12:16,980 --> 00:12:21,690
Foundry provides a bunch of those

00:12:19,140 --> 00:12:23,610
facilities is terrific there are some

00:12:21,690 --> 00:12:25,230
downsides for us um these are not

00:12:23,610 --> 00:12:27,390
near-term downsides but they're things

00:12:25,230 --> 00:12:32,670
that we have to come to grips with as a

00:12:27,390 --> 00:12:34,770
group one of them is that especially for

00:12:32,670 --> 00:12:37,950
a bunch of the commercial offerings they

00:12:34,770 --> 00:12:42,270
they they are priced by the instance an

00:12:37,950 --> 00:12:43,740
instance is a running a running instance

00:12:42,270 --> 00:12:46,490
of an application and every time you

00:12:43,740 --> 00:12:48,960
replicate it you get to pay you know the

00:12:46,490 --> 00:12:53,460
bell rings and you get to get to pay

00:12:48,960 --> 00:12:56,670
again and and we are actively pursuing

00:12:53,460 --> 00:12:59,730
this micro services strategy and so the

00:12:56,670 --> 00:13:02,910
idea is that we're going to see a lot

00:12:59,730 --> 00:13:04,590
more instances of applications as we

00:13:02,910 --> 00:13:07,320
carve up the ones that we've got into

00:13:04,590 --> 00:13:09,330
smaller pieces and that cost us more so

00:13:07,320 --> 00:13:12,870
that's one of the reasons that we are

00:13:09,330 --> 00:13:15,480
actively pursuing open Cloud Foundry as

00:13:12,870 --> 00:13:18,090
well as some of the commercial offerings

00:13:15,480 --> 00:13:22,610
so that we have the option of being able

00:13:18,090 --> 00:13:22,610
to to to go wherever we want

00:13:22,760 --> 00:13:27,570
we've had a lot of feedback from our

00:13:25,110 --> 00:13:29,940
from from various folks in the in the in

00:13:27,570 --> 00:13:31,980
the group why are we doing this pass

00:13:29,940 --> 00:13:34,320
thingy it seems like it's bleeding edge

00:13:31,980 --> 00:13:37,740
why are you doing this and our answer is

00:13:34,320 --> 00:13:39,540
because it makes us fast we we don't

00:13:37,740 --> 00:13:41,700
have to launch tomorrow we've got about

00:13:39,540 --> 00:13:43,290
a year and the fact is is that we feel

00:13:41,700 --> 00:13:45,120
that we can work out whatever kinks

00:13:43,290 --> 00:13:48,030
we've got in the systems the in the

00:13:45,120 --> 00:13:49,560
systems and that our development will be

00:13:48,030 --> 00:13:53,700
that much faster because we're on the

00:13:49,560 --> 00:13:55,560
path for people that are have their

00:13:53,700 --> 00:13:57,840
heads wrapped around the the current one

00:13:55,560 --> 00:13:59,370
this is actually simplifying our

00:13:57,840 --> 00:14:01,080
environment and although they've paid

00:13:59,370 --> 00:14:03,660
the brain damage to understand what the

00:14:01,080 --> 00:14:06,180
existing system does it's you know still

00:14:03,660 --> 00:14:09,540
kind of a kind of a jump to have them

00:14:06,180 --> 00:14:11,220
relearn the way that that all works a

00:14:09,540 --> 00:14:13,200
lot of people have said why don't you do

00:14:11,220 --> 00:14:14,910
a toy project let's do something small

00:14:13,200 --> 00:14:16,710
let's not do something that's that's

00:14:14,910 --> 00:14:18,660
urgent or that's that's critical to the

00:14:16,710 --> 00:14:20,250
business but the fact is is that way

00:14:18,660 --> 00:14:21,780
we've mitigated that is through these

00:14:20,250 --> 00:14:23,730
end and demos that I was telling you

00:14:21,780 --> 00:14:26,100
about building function over time

00:14:23,730 --> 00:14:28,320
demonstrating at you know standard agile

00:14:26,100 --> 00:14:30,960
practices kinds of stuff right doing

00:14:28,320 --> 00:14:33,180
something where the the app the the code

00:14:30,960 --> 00:14:36,090
that we create and as it gets

00:14:33,180 --> 00:14:38,730
accreted adds on and that we're actively

00:14:36,090 --> 00:14:41,160
demonstrating that and if in fact we run

00:14:38,730 --> 00:14:43,350
into a problem we can back this stuff

00:14:41,160 --> 00:14:45,600
out and go to a you know standard

00:14:43,350 --> 00:14:49,160
virtualization environment and the last

00:14:45,600 --> 00:14:51,750
one is it's open but is it really open I

00:14:49,160 --> 00:14:53,790
guess the the thing I'd say is that

00:14:51,750 --> 00:14:56,520
there's a lot of a lot of vendors that

00:14:53,790 --> 00:14:59,160
are in the cloud foundry foundation that

00:14:56,520 --> 00:15:02,520
have a reputation for for vendor lock

00:14:59,160 --> 00:15:05,850
and because of that we are doing our

00:15:02,520 --> 00:15:08,520
development on the open source version

00:15:05,850 --> 00:15:09,870
of the code so that we have so that we

00:15:08,520 --> 00:15:11,100
know that we're not vendor locked and we

00:15:09,870 --> 00:15:16,770
have the ability to move wherever we

00:15:11,100 --> 00:15:21,110
want that's my gig guys sir

00:15:16,770 --> 00:15:23,790
[Applause]

00:15:21,110 --> 00:15:26,270
so Mike talked a little bit just now

00:15:23,790 --> 00:15:28,650
about the cultural challenge that we

00:15:26,270 --> 00:15:31,470
encountered but there's also technical

00:15:28,650 --> 00:15:34,140
challenges you encounter so DigitalGlobe

00:15:31,470 --> 00:15:36,300
has been around for over a decade and in

00:15:34,140 --> 00:15:38,190
doing so they built out a lot of really

00:15:36,300 --> 00:15:40,290
good applications but the architecture

00:15:38,190 --> 00:15:43,410
that was used initially is more of a

00:15:40,290 --> 00:15:45,480
monolithic application you know and with

00:15:43,410 --> 00:15:48,060
the monolith monolithic application

00:15:45,480 --> 00:15:49,500
there are challenges on how fast you can

00:15:48,060 --> 00:15:51,270
roll that thing to production so you

00:15:49,500 --> 00:15:53,430
make a small change to a monolithic

00:15:51,270 --> 00:15:55,110
application and you really have to do a

00:15:53,430 --> 00:15:57,840
lot of good regression testing to make

00:15:55,110 --> 00:16:00,660
sure that your change didn't break the

00:15:57,840 --> 00:16:01,890
rest of the application so that was one

00:16:00,660 --> 00:16:04,490
of the things that they want to get away

00:16:01,890 --> 00:16:07,290
from because that is you know moving

00:16:04,490 --> 00:16:09,450
features and functionality slowly into

00:16:07,290 --> 00:16:11,940
production so changing the application

00:16:09,450 --> 00:16:13,830
from or the environment from a whole

00:16:11,940 --> 00:16:16,260
bunch of monolithic applications into a

00:16:13,830 --> 00:16:19,110
whole bunch of micro services it's a

00:16:16,260 --> 00:16:20,490
major paradigm shift for an organization

00:16:19,110 --> 00:16:23,010
not only from a development perspective

00:16:20,490 --> 00:16:25,950
but also from an Operations perspective

00:16:23,010 --> 00:16:28,230
because they're really used to okay we

00:16:25,950 --> 00:16:30,210
have our our big application we're going

00:16:28,230 --> 00:16:31,680
to roll that in to test we're going to

00:16:30,210 --> 00:16:36,000
test that application we're going to

00:16:31,680 --> 00:16:38,250
roll that into production and all the

00:16:36,000 --> 00:16:39,780
systems the processes the procedures

00:16:38,250 --> 00:16:41,250
everything was too old for that

00:16:39,780 --> 00:16:44,820
environment now you're going to a

00:16:41,250 --> 00:16:47,430
microservices architecture it changes

00:16:44,820 --> 00:16:50,940
everything in an in in an organization

00:16:47,430 --> 00:16:52,050
and not only from from a cultural

00:16:50,940 --> 00:16:55,080
perspective but from a technical

00:16:52,050 --> 00:16:57,480
perspective there's a lot of fear in

00:16:55,080 --> 00:17:01,470
that so that's something that we've had

00:16:57,480 --> 00:17:03,570
to deal with along the way one of the

00:17:01,470 --> 00:17:05,850
things that we did is we defined

00:17:03,570 --> 00:17:10,170
architectural patterns so not everything

00:17:05,850 --> 00:17:12,720
fits nicely into a path we came up with

00:17:10,170 --> 00:17:15,209
different flavors about applications so

00:17:12,720 --> 00:17:17,760
this kind of gave us a vocabulary when

00:17:15,209 --> 00:17:20,449
we were talking with the community at

00:17:17,760 --> 00:17:23,699
large as to where an application resides

00:17:20,449 --> 00:17:25,650
ideally applications would be going to

00:17:23,699 --> 00:17:28,350
the the top layer which we call the

00:17:25,650 --> 00:17:30,270
pattern one application so these are the

00:17:28,350 --> 00:17:32,400
applications that that well into a pass

00:17:30,270 --> 00:17:35,820
these are the applications that

00:17:32,400 --> 00:17:39,410
do conform to a microservices type

00:17:35,820 --> 00:17:42,720
architecture sometimes the pragmatic

00:17:39,410 --> 00:17:44,820
reality of a situation where we're gonna

00:17:42,720 --> 00:17:48,030
launch a satellite and it's going to be

00:17:44,820 --> 00:17:49,560
up there in a year you can't do

00:17:48,030 --> 00:17:51,960
everything sometimes you want to bring

00:17:49,560 --> 00:17:54,000
over some legacy applications and put

00:17:51,960 --> 00:17:57,120
them into VM so that would be kind of a

00:17:54,000 --> 00:17:59,100
pattern to type application and in those

00:17:57,120 --> 00:18:01,350
pattern to type applications one of the

00:17:59,100 --> 00:18:03,150
thoughts is you would make proxies in

00:18:01,350 --> 00:18:05,070
the pattern one in the Micra service

00:18:03,150 --> 00:18:07,230
layer so you would have this proxy

00:18:05,070 --> 00:18:10,050
interface that would go down into the

00:18:07,230 --> 00:18:12,750
VMS where you know we don't want to

00:18:10,050 --> 00:18:15,360
throw that code away yet but we have a

00:18:12,750 --> 00:18:18,060
path to migrate that code into a pattern

00:18:15,360 --> 00:18:21,410
one application and then there were the

00:18:18,060 --> 00:18:24,810
pattern 3 applications where you need

00:18:21,410 --> 00:18:28,830
every millisecond of compute power and

00:18:24,810 --> 00:18:31,620
the latency between you know the latency

00:18:28,830 --> 00:18:34,290
that a virtual environment causes is

00:18:31,620 --> 00:18:36,720
unacceptable like there's all this data

00:18:34,290 --> 00:18:38,760
coming down right there there's a lot of

00:18:36,720 --> 00:18:40,800
bit bending on the images that happen

00:18:38,760 --> 00:18:45,330
there and you need that high performance

00:18:40,800 --> 00:18:48,060
compute cluster so those types of

00:18:45,330 --> 00:18:50,460
applications they just need to reside on

00:18:48,060 --> 00:18:52,050
bare metal so not everything fits well

00:18:50,460 --> 00:18:54,240
into a pass and I think that's something

00:18:52,050 --> 00:18:56,240
an organization really needs to accept

00:18:54,240 --> 00:18:58,770
it's not an all-or-nothing proposition

00:18:56,240 --> 00:19:01,020
but you have to look at your environment

00:18:58,770 --> 00:19:05,180
say what's pragmatic what what what fits

00:19:01,020 --> 00:19:09,300
well where and then make that decision

00:19:05,180 --> 00:19:12,060
so our path to adoption we set off on

00:19:09,300 --> 00:19:13,950
this trail we kind of blazing new ground

00:19:12,060 --> 00:19:16,890
here so that's that's what you see here

00:19:13,950 --> 00:19:18,870
with the wagons this is this is a place

00:19:16,890 --> 00:19:21,420
that this organization has never been

00:19:18,870 --> 00:19:23,400
before so what we did initially is we

00:19:21,420 --> 00:19:27,870
developed one service we developed an a

00:19:23,400 --> 00:19:29,820
vending service so there there are a

00:19:27,870 --> 00:19:31,530
venting services out there but what we

00:19:29,820 --> 00:19:33,510
said is we want to make a very

00:19:31,530 --> 00:19:36,120
lightweight eventing service that does

00:19:33,510 --> 00:19:38,550
just what we needed to do publish an

00:19:36,120 --> 00:19:40,860
event distribute it out to consumers so

00:19:38,550 --> 00:19:42,870
kind of taking a very agile approach you

00:19:40,860 --> 00:19:44,669
know yagna you ain't gonna need it yet

00:19:42,870 --> 00:19:47,129
we did a very light

00:19:44,669 --> 00:19:50,669
wait service but this service served a

00:19:47,129 --> 00:19:53,070
couple of purposes it got us into

00:19:50,669 --> 00:19:56,009
developing what a micro service was and

00:19:53,070 --> 00:19:57,899
actually one of the cool things when we

00:19:56,009 --> 00:20:00,480
were developing the eventing service is

00:19:57,899 --> 00:20:04,470
we realized it's not one service it was

00:20:00,480 --> 00:20:07,289
three micro services so we now had three

00:20:04,470 --> 00:20:09,960
micro services we had a template for how

00:20:07,289 --> 00:20:12,980
to develop micro services we got it into

00:20:09,960 --> 00:20:16,710
get we got it into Jenkins we got our

00:20:12,980 --> 00:20:18,600
deployment pipeline started off so so we

00:20:16,710 --> 00:20:20,820
figured some things out we didn't figure

00:20:18,600 --> 00:20:22,619
it all out but we figured enough out

00:20:20,820 --> 00:20:24,720
that now we said okay we want to bring

00:20:22,619 --> 00:20:26,580
on a small team of developers and the

00:20:24,720 --> 00:20:28,950
that team of developers we call the

00:20:26,580 --> 00:20:31,980
pioneers so the small team of developers

00:20:28,950 --> 00:20:35,429
came on they started developing a few

00:20:31,980 --> 00:20:38,999
more micro services we got a business

00:20:35,429 --> 00:20:41,460
process management layer in so so it

00:20:38,999 --> 00:20:43,559
orchestrated the workflow and then we

00:20:41,460 --> 00:20:45,509
had the micro services use the eventing

00:20:43,559 --> 00:20:48,480
service to send events through the

00:20:45,509 --> 00:20:50,489
system so that was our Mike alluded to

00:20:48,480 --> 00:20:52,499
what we were calling end to end demo so

00:20:50,489 --> 00:20:55,889
that was our end to end one hello world

00:20:52,499 --> 00:20:58,919
type of a demo so we got that initial

00:20:55,889 --> 00:21:00,960
build-out down and then we kind of start

00:20:58,919 --> 00:21:04,799
now we're in the process of rolling it

00:21:00,960 --> 00:21:07,169
out to the company at large so here's

00:21:04,799 --> 00:21:09,509
where we are currently we created the

00:21:07,169 --> 00:21:12,149
template micro service we created an

00:21:09,509 --> 00:21:14,580
OAuth security framework leveraging uaa

00:21:12,149 --> 00:21:17,909
so some of those micro services in the

00:21:14,580 --> 00:21:20,009
end-to-end one demo we did put security

00:21:17,909 --> 00:21:23,700
in that we put a lot two in there to

00:21:20,009 --> 00:21:26,909
kind of start bringing security into our

00:21:23,700 --> 00:21:28,649
architecture from the beginning we

00:21:26,909 --> 00:21:31,950
leveraged the micro service to implement

00:21:28,649 --> 00:21:34,350
so we've done two end n demos now so we

00:21:31,950 --> 00:21:38,299
just kind of built out our into m1 demo

00:21:34,350 --> 00:21:43,440
put more into it in the end end to demo

00:21:38,299 --> 00:21:47,820
we extended it the Java framework to use

00:21:43,440 --> 00:21:50,789
Python and Ruby our Jenkins pipeline our

00:21:47,820 --> 00:21:53,340
continuous delivery pipeline is maturing

00:21:50,789 --> 00:21:55,470
it's not you know fully there but we've

00:21:53,340 --> 00:21:57,419
got it to a point now where we're

00:21:55,470 --> 00:21:58,659
deploying to cloud found we were doing a

00:21:57,419 --> 00:22:00,909
Bluegreen deployment

00:21:58,659 --> 00:22:03,190
and we're executing some automated tests

00:22:00,909 --> 00:22:05,559
not that right there is actually

00:22:03,190 --> 00:22:09,609
something that's interesting to talk

00:22:05,559 --> 00:22:12,129
about all of this the the the bedrock of

00:22:09,609 --> 00:22:14,200
everything we're doing is automated

00:22:12,129 --> 00:22:16,720
testing you can't do what we're doing

00:22:14,200 --> 00:22:18,549
here with manual testing it just does

00:22:16,720 --> 00:22:20,440
you're not gonna get the velocity

00:22:18,549 --> 00:22:23,769
through your pipeline that you want so

00:22:20,440 --> 00:22:26,649
you have to have a really good suite of

00:22:23,769 --> 00:22:28,450
automated tests and then so we're doing

00:22:26,649 --> 00:22:30,940
the training workshops so we got all our

00:22:28,450 --> 00:22:32,979
training down we got the governance down

00:22:30,940 --> 00:22:35,080
we got the patterns down we got the

00:22:32,979 --> 00:22:38,759
templates down and now we're ready to

00:22:35,080 --> 00:22:42,210
you know leash unleash this on the

00:22:38,759 --> 00:22:42,210
organization as a whole

00:22:43,210 --> 00:22:48,399
one of the really neat things that we

00:22:45,700 --> 00:22:50,529
did or one of the really neat things we

00:22:48,399 --> 00:22:53,590
saw was the move to self provisioning

00:22:50,529 --> 00:22:55,659
and that really helped out the

00:22:53,590 --> 00:22:59,889
organization a lot so in the legacy

00:22:55,659 --> 00:23:01,960
environment all the organizations were

00:22:59,889 --> 00:23:04,720
very tightly coupled so if you needed to

00:23:01,960 --> 00:23:06,519
get something done you had to get you

00:23:04,720 --> 00:23:08,529
had to coordinate among a lot of

00:23:06,519 --> 00:23:10,869
different organizations if you wanted an

00:23:08,529 --> 00:23:13,029
environment built out the application

00:23:10,869 --> 00:23:15,220
team said identified we needed an

00:23:13,029 --> 00:23:18,249
environment built out so now we have to

00:23:15,220 --> 00:23:20,229
get operations involved we need software

00:23:18,249 --> 00:23:22,769
released into a different environment we

00:23:20,229 --> 00:23:25,779
need to get the release team involved so

00:23:22,769 --> 00:23:28,599
while a lot of this was was automated

00:23:25,779 --> 00:23:31,539
the coordination between organizations

00:23:28,599 --> 00:23:33,489
was time consuming and in a in a

00:23:31,539 --> 00:23:36,099
continuous delivery environment that's

00:23:33,489 --> 00:23:40,690
it's just unacceptable so when we move

00:23:36,099 --> 00:23:43,359
to self provisioning in the new

00:23:40,690 --> 00:23:45,580
environment there's these clear lines of

00:23:43,359 --> 00:23:48,580
delineation between the organizations

00:23:45,580 --> 00:23:51,970
and it gave the application development

00:23:48,580 --> 00:23:54,700
team the power to do what they needed to

00:23:51,970 --> 00:23:57,789
do so if we needed a new environment

00:23:54,700 --> 00:24:00,129
built out we had the access to those

00:23:57,789 --> 00:24:02,169
compute resources to build that

00:24:00,129 --> 00:24:05,649
environment out so when when I did the

00:24:02,169 --> 00:24:08,950
event service I said hey I needed to do

00:24:05,649 --> 00:24:10,779
some performance testing normally that

00:24:08,950 --> 00:24:11,929
would take a coordination effort across

00:24:10,779 --> 00:24:15,740
organizations

00:24:11,929 --> 00:24:18,409
get a performance environment going here

00:24:15,740 --> 00:24:21,559
I had access to a pool of compute

00:24:18,409 --> 00:24:23,720
resources and in an afternoon I set up a

00:24:21,559 --> 00:24:26,299
performance test environment started

00:24:23,720 --> 00:24:28,340
hammering my ax microservices and of

00:24:26,299 --> 00:24:31,549
course initially you know the first test

00:24:28,340 --> 00:24:33,350
had just fell on its face but I was able

00:24:31,549 --> 00:24:35,299
to do that I was able to see that you

00:24:33,350 --> 00:24:36,769
know I needed to make my instances a

00:24:35,299 --> 00:24:39,320
little bit bigger so that they can

00:24:36,769 --> 00:24:41,379
handle the scale of events coming in and

00:24:39,320 --> 00:24:42,590
I was able to do that in an afternoon

00:24:41,379 --> 00:24:45,110
right

00:24:42,590 --> 00:24:47,029
normally that may take a week or two or

00:24:45,110 --> 00:24:48,379
you know who knows how long maybe I

00:24:47,029 --> 00:24:51,100
wouldn't have even went down that path

00:24:48,379 --> 00:24:53,960
it was just something that came to me I

00:24:51,100 --> 00:24:56,690
had the ability to do it and I went and

00:24:53,960 --> 00:24:59,059
did it so that was a really cool

00:24:56,690 --> 00:25:01,730
experience for me coming from you know

00:24:59,059 --> 00:25:03,230
years of scars of having to go to all

00:25:01,730 --> 00:25:06,110
these different organizations and

00:25:03,230 --> 00:25:09,860
coordinate these efforts so that was

00:25:06,110 --> 00:25:12,320
pretty powerful so right now we just

00:25:09,860 --> 00:25:16,899
kind of want to open it up for any

00:25:12,320 --> 00:25:16,899
questions from the audience you may have

00:25:41,019 --> 00:25:46,220
so there was a question here on Bill

00:25:43,279 --> 00:25:50,059
packs and how much customization did we

00:25:46,220 --> 00:25:51,950
do have to do versus just taken the can

00:25:50,059 --> 00:25:54,740
version so with the bill packs we had to

00:25:51,950 --> 00:25:56,929
do quite a bit not not a lot of

00:25:54,740 --> 00:26:00,470
customization but all the build packs

00:25:56,929 --> 00:26:02,860
that we are using we created offline

00:26:00,470 --> 00:26:05,059
build packs so you take a fork of the

00:26:02,860 --> 00:26:07,429
standard build pack and bring it down

00:26:05,059 --> 00:26:10,009
and then make the tweaks because as Mike

00:26:07,429 --> 00:26:12,679
alluded to these are being deployed to

00:26:10,009 --> 00:26:15,379
air-gap environments which means no no

00:26:12,679 --> 00:26:16,909
internet access so we'd bring them down

00:26:15,379 --> 00:26:18,970
there there was some security

00:26:16,909 --> 00:26:22,220
requirements that we needed on these and

00:26:18,970 --> 00:26:24,440
so they're in our repository we built

00:26:22,220 --> 00:26:31,760
them we deployed them on out into

00:26:24,440 --> 00:26:36,830
foundry works really nice do you know

00:26:31,760 --> 00:26:46,070
Mike the OpenStack distribution now I

00:26:36,830 --> 00:26:48,500
think we're on Juno that was one of the

00:26:46,070 --> 00:26:50,090
the evaluations that we did in terms of

00:26:48,500 --> 00:26:53,690
which passes we were going to be using

00:26:50,090 --> 00:26:56,800
and and and and there were a number of

00:26:53,690 --> 00:26:59,150
differentiators but but the the primed

00:26:56,800 --> 00:27:02,060
differentiators you guys might chime in

00:26:59,150 --> 00:27:03,620
here but really related to the the

00:27:02,060 --> 00:27:05,450
amount of work that was required in

00:27:03,620 --> 00:27:08,630
order to be able to recover from

00:27:05,450 --> 00:27:12,530
failures and and to keep the system up

00:27:08,630 --> 00:27:14,330
and dealing with you know providing

00:27:12,530 --> 00:27:15,800
services instead of instead of somebody

00:27:14,330 --> 00:27:30,590
in there with a wrench trying to get it

00:27:15,800 --> 00:27:32,900
get it fixed and on its feet again so

00:27:30,590 --> 00:27:56,570
the question is are Cloud Foundry and

00:27:32,900 --> 00:27:58,580
OpenStack have them together right so a

00:27:56,570 --> 00:27:59,060
lot of foundry requires you want to take

00:27:58,580 --> 00:28:02,090
a buddy

00:27:59,060 --> 00:28:07,850
so Cloud Foundry requires an AI ass like

00:28:02,090 --> 00:28:09,920
OpenStack or VMware or AWS don't deploy

00:28:07,850 --> 00:28:12,560
Cloud Foundry necessarily on its own it

00:28:09,920 --> 00:28:15,830
needs to ride on on an AIA so you can do

00:28:12,560 --> 00:28:21,680
Cloud Foundry on OpenStack or VMware or

00:28:15,830 --> 00:28:22,909
AWS yeah which is one of the powers I do

00:28:21,680 --> 00:28:25,590
too

00:28:22,909 --> 00:28:28,309
which is one of the powers of Cloud

00:28:25,590 --> 00:28:31,169
Foundry right here your eye as

00:28:28,309 --> 00:28:33,480
independent but when but when we deploy

00:28:31,169 --> 00:28:36,330
on the Amazon you know we expect to go

00:28:33,480 --> 00:28:37,500
straight on top of AWS and use the

00:28:36,330 --> 00:28:39,450
features of that you know of that

00:28:37,500 --> 00:28:54,299
platform of that of that infrastructure

00:28:39,450 --> 00:28:56,880
as a service on Prem right right now you

00:28:54,299 --> 00:28:59,370
know but that doesn't preclude the that

00:28:56,880 --> 00:29:02,159
we can go to AWS I mean we've done an

00:28:59,370 --> 00:29:04,320
installation there and as we expand

00:29:02,159 --> 00:29:05,520
behind beyond that basic factory so

00:29:04,320 --> 00:29:07,549
we've got a bunch of things that we're

00:29:05,520 --> 00:29:09,630
doing related to big data analytics

00:29:07,549 --> 00:29:10,020
associated with our stuff and that kind

00:29:09,630 --> 00:29:12,330
of thing

00:29:10,020 --> 00:29:14,429
those are a combination of on-prem and

00:29:12,330 --> 00:29:17,299
and cloud-based and as long as we've got

00:29:14,429 --> 00:29:20,010
connectivity we can we can move you know

00:29:17,299 --> 00:29:23,240
equally well between the two we staged

00:29:20,010 --> 00:29:25,919
data to both okay well probably should

00:29:23,240 --> 00:29:26,940
wrap it up here and that's what we got

00:29:25,919 --> 00:29:28,020
for you guys have a good conference

00:29:26,940 --> 00:29:31,079
thank you

00:29:28,020 --> 00:29:31,079

YouTube URL: https://www.youtube.com/watch?v=i2OgZbZZ4dQ


