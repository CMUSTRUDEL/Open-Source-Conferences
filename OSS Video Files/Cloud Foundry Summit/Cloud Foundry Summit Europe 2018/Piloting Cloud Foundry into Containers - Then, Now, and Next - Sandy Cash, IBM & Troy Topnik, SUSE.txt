Title: Piloting Cloud Foundry into Containers - Then, Now, and Next - Sandy Cash, IBM & Troy Topnik, SUSE
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Piloting Cloud Foundry into Containers - Then, Now, and Next - Sandy Cash, IBM & Troy Topnik, SUSE

Creating a commercial Cloud Foundry distribution for a containerized environment brings up a number of challenges. Drawing on real-world experience providing a commercial Cloud Foundry distribution in which the entire stack runs on top of Kubernetes, this session summarizes the history of this style of Cloud Foundry deployment. Sandy and Troy examine some of the advantages of this approach as well as the challenges and solutions, including deploying Cloud Foundry, upgrading and scaling it, providing Cloud Foundry-as-a-Service, and staying in sync with upstream changes. They also describe development currently underway that brings containerized Cloud Foundry more closely in line with recent developments in BOSH.

https://cfseu18.sched.com/event/FRyA/piloting-cloud-foundry-into-containers-then-now-and-next-sandy-cash-ibm-troy-topnik-suse
Captions: 
	00:00:00,000 --> 00:00:04,280
hi everyone thanks for coming

00:00:04,350 --> 00:00:10,110
sandy and I are gonna talk a little bit

00:00:06,839 --> 00:00:14,190
about the long journey of Cloud Foundry

00:00:10,110 --> 00:00:16,920
into a containerized world and this is

00:00:14,190 --> 00:00:19,170
something both of us had some experience

00:00:16,920 --> 00:00:22,740
with over the years and it's a kind of

00:00:19,170 --> 00:00:24,900
an interesting replay of presentation

00:00:22,740 --> 00:00:26,220
that sandy gave here last year and

00:00:24,900 --> 00:00:28,199
that's going to be covered as we as we

00:00:26,220 --> 00:00:30,240
go through this so this is not going to

00:00:28,199 --> 00:00:32,489
be as deeply technical as the the build

00:00:30,240 --> 00:00:34,440
packs talk that was was just before us

00:00:32,489 --> 00:00:36,480
that was amazing stuff but it will tell

00:00:34,440 --> 00:00:38,010
a story of how we got where we are and

00:00:36,480 --> 00:00:41,640
where we're going with containerization

00:00:38,010 --> 00:00:43,590
of Cloud Foundry so when we first

00:00:41,640 --> 00:00:45,629
launched the proposal to containerized

00:00:43,590 --> 00:00:48,660
cloud foundry to the wider community on

00:00:45,629 --> 00:00:50,070
the on the mailing list one of the first

00:00:48,660 --> 00:00:52,199
questions we got from from a lot of

00:00:50,070 --> 00:00:54,870
people who were longtime cloud foundry

00:00:52,199 --> 00:00:57,870
contributors and users was why are you

00:00:54,870 --> 00:00:59,340
doing this why spend the effort to

00:00:57,870 --> 00:01:01,730
containerized cloud foundry that has a

00:00:59,340 --> 00:01:06,330
perfectly acceptable way of deploying

00:01:01,730 --> 00:01:08,640
itself in VMs using Bosh why do this

00:01:06,330 --> 00:01:09,750
well the original answer we got from the

00:01:08,640 --> 00:01:11,850
people who were working on this project

00:01:09,750 --> 00:01:13,020
was because that's awesome why wouldn't

00:01:11,850 --> 00:01:15,270
you do this there's this great

00:01:13,020 --> 00:01:18,200
technology available now containers are

00:01:15,270 --> 00:01:20,189
wicked cool let's let's do this

00:01:18,200 --> 00:01:21,840
the marketing departments of our

00:01:20,189 --> 00:01:24,450
respective organizations also were

00:01:21,840 --> 00:01:26,460
pretty excited because in the in the

00:01:24,450 --> 00:01:28,140
initial stages docker was a word that

00:01:26,460 --> 00:01:30,090
you would hear a lot and it was like

00:01:28,140 --> 00:01:32,759
darker darker darker at every Tech Talk

00:01:30,090 --> 00:01:34,110
that you heard a few years ago and and

00:01:32,759 --> 00:01:36,900
now it's kubernetes communities

00:01:34,110 --> 00:01:39,720
communities and so they liked the idea

00:01:36,900 --> 00:01:41,790
but that's not a good justification to

00:01:39,720 --> 00:01:44,130
spend hundreds of thousands of

00:01:41,790 --> 00:01:46,799
developers hours on on actually making

00:01:44,130 --> 00:01:48,930
this work so seriously what it what it

00:01:46,799 --> 00:01:51,390
is about is that we are noticing a trend

00:01:48,930 --> 00:01:55,430
that container schedules container

00:01:51,390 --> 00:01:59,640
schedulers like kubernetes are replacing

00:01:55,430 --> 00:02:02,310
virtualized infrastructure and our big

00:01:59,640 --> 00:02:03,810
concern or my big concern is that if if

00:02:02,310 --> 00:02:06,530
cloud foundry is a community doesn't

00:02:03,810 --> 00:02:10,800
move with this change we run the risk of

00:02:06,530 --> 00:02:12,270
becoming irrelevant of losing market

00:02:10,800 --> 00:02:13,620
share for the companies that we work for

00:02:12,270 --> 00:02:17,159
and but also my

00:02:13,620 --> 00:02:18,569
chair and also we run the risk of people

00:02:17,159 --> 00:02:20,400
going off and reinventing the wheel all

00:02:18,569 --> 00:02:24,890
the hard work we've done with Cloud

00:02:20,400 --> 00:02:27,239
Foundry being redone somewhere else so

00:02:24,890 --> 00:02:31,079
the next question is invariably what's

00:02:27,239 --> 00:02:32,340
in it for me and a very Cloud Foundry

00:02:31,079 --> 00:02:35,010
edge question is like how does this

00:02:32,340 --> 00:02:36,690
affect the users well it has no effect

00:02:35,010 --> 00:02:38,790
on users it should not have any effect

00:02:36,690 --> 00:02:41,459
on on the users because the whole part

00:02:38,790 --> 00:02:42,959
of the Cloud Foundry contract is here's

00:02:41,459 --> 00:02:45,450
my code run it for me in the cloud I do

00:02:42,959 --> 00:02:47,670
not care how if the developer does not

00:02:45,450 --> 00:02:50,060
care how and the developers experience

00:02:47,670 --> 00:02:53,250
is the same that's actually what we want

00:02:50,060 --> 00:02:55,200
however for the operators there are some

00:02:53,250 --> 00:02:57,120
and by operators we mean the system is

00:02:55,200 --> 00:02:59,069
who are looking after the Foundry's but

00:02:57,120 --> 00:03:01,230
we also mean the people who are planning

00:02:59,069 --> 00:03:04,280
the the deployment and the people who

00:03:01,230 --> 00:03:06,599
pay for the pay for the compute cycles

00:03:04,280 --> 00:03:09,629
there's some really good benefits and

00:03:06,599 --> 00:03:12,810
it's a very low barrier to entry it's

00:03:09,629 --> 00:03:14,220
very easy to install running it in pods

00:03:12,810 --> 00:03:16,790
gives you a much smaller memory

00:03:14,220 --> 00:03:20,540
footprint so there's some savings there

00:03:16,790 --> 00:03:23,910
pods recover more rapidly than VMs so

00:03:20,540 --> 00:03:26,190
again there's an increased resiliency

00:03:23,910 --> 00:03:27,900
over VMs there's ways that you know a

00:03:26,190 --> 00:03:29,760
Bosch deployment compensates for this

00:03:27,900 --> 00:03:31,109
but it's really nice to have just that a

00:03:29,760 --> 00:03:34,290
little bit of extra speed when

00:03:31,109 --> 00:03:39,690
recovering failing Road failing rolls

00:03:34,290 --> 00:03:42,000
and portability so our distribution we

00:03:39,690 --> 00:03:44,220
can run on just about any kubernetes

00:03:42,000 --> 00:03:47,400
provided it satisfies some minimum

00:03:44,220 --> 00:03:51,419
requirements and for some operators a

00:03:47,400 --> 00:03:52,799
lot of operators the the Bosch learning

00:03:51,419 --> 00:03:54,780
curve that comes up and looks like a

00:03:52,799 --> 00:03:55,980
cliff is pretty intimidating and

00:03:54,780 --> 00:03:57,299
especially if they've already made an

00:03:55,980 --> 00:03:59,940
investment into learning kubernetes

00:03:57,299 --> 00:04:01,680
tooling it's really nice for them to be

00:03:59,940 --> 00:04:05,489
able to use those tools again and not

00:04:01,680 --> 00:04:08,370
have to learn a new thing so so most of

00:04:05,489 --> 00:04:13,199
the boss learning curve is is is avoided

00:04:08,370 --> 00:04:17,220
for those for those operators so where

00:04:13,199 --> 00:04:19,229
did we start off with Troy references a

00:04:17,220 --> 00:04:23,010
presentation that I gave last year and

00:04:19,229 --> 00:04:24,510
there were others of its ilk - we

00:04:23,010 --> 00:04:25,900
started off with a number of different

00:04:24,510 --> 00:04:28,100
approaches

00:04:25,900 --> 00:04:29,870
one initial approach that I'm actually

00:04:28,100 --> 00:04:32,810
gonna give the microphone back to Troy

00:04:29,870 --> 00:04:34,850
here um I was with the team that was

00:04:32,810 --> 00:04:37,810
originally an active state and I went

00:04:34,850 --> 00:04:43,910
through Hewlett Packard enterprise and

00:04:37,810 --> 00:04:47,090
we set about container izing Cloud

00:04:43,910 --> 00:04:48,410
Foundry because it's cool but there were

00:04:47,090 --> 00:04:52,730
a couple of reasons why we didn't do

00:04:48,410 --> 00:04:55,040
that directly on kubernetes it's kind of

00:04:52,730 --> 00:04:57,860
four had this proprietary abstraction

00:04:55,040 --> 00:05:00,140
layer called the Hylian control plane

00:04:57,860 --> 00:05:02,210
and that was done for a couple reasons

00:05:00,140 --> 00:05:05,390
one was kubernetes was not quite as

00:05:02,210 --> 00:05:07,390
mature then and it required a few extra

00:05:05,390 --> 00:05:11,390
features which we would layer on to this

00:05:07,390 --> 00:05:14,060
this control plane but also the the very

00:05:11,390 --> 00:05:17,290
ambitious goal was that this control

00:05:14,060 --> 00:05:20,330
plane would then be able to run on any

00:05:17,290 --> 00:05:22,010
container scheduler so at the time we

00:05:20,330 --> 00:05:24,980
were looking at Apache mezzos and and

00:05:22,010 --> 00:05:28,790
docker swarm we only ever get as far as

00:05:24,980 --> 00:05:31,010
kubernetes but what we found in trying

00:05:28,790 --> 00:05:33,080
to maintain this was that the

00:05:31,010 --> 00:05:35,000
development pace of kubernetes took off

00:05:33,080 --> 00:05:36,860
so fast that new features were landing

00:05:35,000 --> 00:05:39,380
so fast that the control layer or the

00:05:36,860 --> 00:05:41,360
the fabric layer over top couldn't keep

00:05:39,380 --> 00:05:44,810
pace with those that development so it's

00:05:41,360 --> 00:05:46,820
very difficult to keep that going but

00:05:44,810 --> 00:05:48,470
out of this whole thing we did get a

00:05:46,820 --> 00:05:51,200
tool called Fissel which has served us

00:05:48,470 --> 00:05:53,630
very well and we'll talk about that as

00:05:51,200 --> 00:05:59,450
we go as well right after that small

00:05:53,630 --> 00:06:02,150
little orchestration snafu so at least

00:05:59,450 --> 00:06:03,740
initially the line approaches you know

00:06:02,150 --> 00:06:05,390
people talk about Kubb native in italy

00:06:03,740 --> 00:06:08,450
originally that isn't where we started

00:06:05,390 --> 00:06:11,750
we started off more with coop compatible

00:06:08,450 --> 00:06:13,520
and trying to take existing deployment

00:06:11,750 --> 00:06:15,650
methods and existing deployment models

00:06:13,520 --> 00:06:18,380
and say okay how can we fit you know

00:06:15,650 --> 00:06:20,810
refit this so that it'll play nicely in

00:06:18,380 --> 00:06:22,600
a Kubb environment so we took tools you

00:06:20,810 --> 00:06:24,380
know such as Bosch that were not

00:06:22,600 --> 00:06:25,850
developed in the context of

00:06:24,380 --> 00:06:27,260
containerized infrastructure we said

00:06:25,850 --> 00:06:28,370
well even though these tools aren't

00:06:27,260 --> 00:06:30,080
natively designed to work with

00:06:28,370 --> 00:06:32,180
containers is there something we can do

00:06:30,080 --> 00:06:35,990
because this is what we know and make

00:06:32,180 --> 00:06:37,400
them work nicely with containers so you

00:06:35,990 --> 00:06:39,080
know we we ended up with a lot of

00:06:37,400 --> 00:06:41,750
projects that were like

00:06:39,080 --> 00:06:43,729
we would you know and the the coop CPI

00:06:41,750 --> 00:06:46,250
project that I led last year is an

00:06:43,729 --> 00:06:47,539
example of that where we you know we

00:06:46,250 --> 00:06:50,300
basically had to build essentially a

00:06:47,539 --> 00:06:51,770
shim layer you know not just the CPI but

00:06:50,300 --> 00:06:53,900
other projects as well you know where we

00:06:51,770 --> 00:06:55,849
we had to map here's the world that we

00:06:53,900 --> 00:06:57,789
know and here's kubernetes and we had to

00:06:55,849 --> 00:07:00,620
map between them

00:06:57,789 --> 00:07:02,389
we were trying the paradigm was we were

00:07:00,620 --> 00:07:04,159
trying to because I as in virtual

00:07:02,389 --> 00:07:07,419
machines for what we knew well let's

00:07:04,159 --> 00:07:10,270
just treat kubernetes is yet another is

00:07:07,419 --> 00:07:12,770
which is you know as we'll talk about is

00:07:10,270 --> 00:07:17,449
it has its shortcomings a number of them

00:07:12,770 --> 00:07:20,599
when we so the kubernetes CPI project

00:07:17,449 --> 00:07:22,639
there were a couple of these yon for

00:07:20,599 --> 00:07:25,250
miss ap had one that he was working on

00:07:22,639 --> 00:07:27,319
and then I led a team at IBM we were

00:07:25,250 --> 00:07:28,940
developing one again if you go back and

00:07:27,319 --> 00:07:30,860
if you look at the presentations from

00:07:28,940 --> 00:07:35,210
last year I did a presentation on this

00:07:30,860 --> 00:07:36,830
specifically we started off very

00:07:35,210 --> 00:07:38,300
optimistic you know we thought okay this

00:07:36,830 --> 00:07:39,979
is you know we all know Bosch we love

00:07:38,300 --> 00:07:41,569
Bosh Bosh does great things for us we'll

00:07:39,979 --> 00:07:46,940
just you know make Bosh work in the

00:07:41,569 --> 00:07:48,710
kubernetes world and we you know again a

00:07:46,940 --> 00:07:50,479
lot of it this this big mapping problem

00:07:48,710 --> 00:07:52,550
that we had from taking okay Bosh

00:07:50,479 --> 00:07:55,339
understands I as it understands virtual

00:07:52,550 --> 00:07:57,529
machines works really well with those we

00:07:55,339 --> 00:07:59,389
need to have a mapping layer that says

00:07:57,529 --> 00:08:01,430
okay well virtual machines are

00:07:59,389 --> 00:08:02,659
represented this way in the kubernetes

00:08:01,430 --> 00:08:04,099
well you know and what does the virtual

00:08:02,659 --> 00:08:05,419
machine actually mean in a kubernetes

00:08:04,099 --> 00:08:07,879
world we spend a lot of time with that

00:08:05,419 --> 00:08:11,479
is it a deployment / replica set is the

00:08:07,879 --> 00:08:13,879
pod is it just a container we ended up

00:08:11,479 --> 00:08:15,639
with this kind of we weren't wholly in

00:08:13,879 --> 00:08:17,629
one world or wholly in another you know

00:08:15,639 --> 00:08:20,389
we ended up with this hybrid approach

00:08:17,629 --> 00:08:21,740
and a lot of the problems that we

00:08:20,389 --> 00:08:23,599
encounter and the reason why we stopped

00:08:21,740 --> 00:08:26,389
working on the CPI derived from that

00:08:23,599 --> 00:08:28,370
approach you know i generalized with

00:08:26,389 --> 00:08:29,870
split brain issues but it was if you

00:08:28,370 --> 00:08:31,370
want to take the issue of resiliency you

00:08:29,870 --> 00:08:33,829
know kubernetes does a really nice job

00:08:31,370 --> 00:08:35,419
with it scheduler you know you've got a

00:08:33,829 --> 00:08:36,800
replica set you know you say the number

00:08:35,419 --> 00:08:38,269
of replicas and if you then go out and

00:08:36,800 --> 00:08:40,149
delete one it'll instantly spin one

00:08:38,269 --> 00:08:42,829
backup does really really nicely there

00:08:40,149 --> 00:08:44,060
but Bosch also does the same thing you

00:08:42,829 --> 00:08:45,500
know if Bosch said thinks you're

00:08:44,060 --> 00:08:47,270
supposed to have for cloud controllers

00:08:45,500 --> 00:08:48,770
and one of them drops off the mat Bosch

00:08:47,270 --> 00:08:51,170
will detect that and Bosch will spin

00:08:48,770 --> 00:08:52,310
another one up so it isn't just a

00:08:51,170 --> 00:08:54,260
deployment problem it's also a

00:08:52,310 --> 00:08:57,110
management problem once you've got once

00:08:54,260 --> 00:08:59,569
you've deployed Cloud Foundry who owns

00:08:57,110 --> 00:09:01,370
bringing that back up and we're early on

00:08:59,569 --> 00:09:02,930
we but well okay kubernetes you know we

00:09:01,370 --> 00:09:04,730
have a let's say a cloud controller drop

00:09:02,930 --> 00:09:06,829
off the map kubernetes will spin one

00:09:04,730 --> 00:09:09,560
backup but what if the meantime bosch

00:09:06,829 --> 00:09:12,680
has detected that you know and tried to

00:09:09,560 --> 00:09:14,420
bring one back up you know who basically

00:09:12,680 --> 00:09:15,680
is a source of truth for what the

00:09:14,420 --> 00:09:17,810
infrastructure should look like or what

00:09:15,680 --> 00:09:19,970
the deployment should look like and we

00:09:17,810 --> 00:09:23,180
ran into multiple sort of variations on

00:09:19,970 --> 00:09:24,350
this theme and a lot of them came from

00:09:23,180 --> 00:09:26,449
again came back to this fundamental

00:09:24,350 --> 00:09:28,370
problem that bashi understood VMS and

00:09:26,449 --> 00:09:33,199
containers were not first-class entities

00:09:28,370 --> 00:09:35,569
in the Bosch model we also because we

00:09:33,199 --> 00:09:38,060
were trying to work directly with you

00:09:35,569 --> 00:09:40,220
know Kubb api's and things and you know

00:09:38,060 --> 00:09:41,990
Kubb while is certainly it's it's

00:09:40,220 --> 00:09:45,640
enterprise-ready it's quite mature it

00:09:41,990 --> 00:09:47,600
still is evolving we were having trouble

00:09:45,640 --> 00:09:49,010
you know we were having frankly having

00:09:47,600 --> 00:09:51,350
trouble sort of keeping case with

00:09:49,010 --> 00:09:54,079
changes to the kubernetes api you know

00:09:51,350 --> 00:09:55,399
many things you know again deployments

00:09:54,079 --> 00:09:58,220
and replica sets i believe are still

00:09:55,399 --> 00:09:59,690
technically part of the beta api and

00:09:58,220 --> 00:10:01,069
they're small changes that came in them

00:09:59,690 --> 00:10:02,720
and we were having to keep pace of those

00:10:01,069 --> 00:10:04,970
at the same time we were trying to

00:10:02,720 --> 00:10:07,160
develop this new this new CPI layer it

00:10:04,970 --> 00:10:08,839
got problematic really quickly so we

00:10:07,160 --> 00:10:11,270
said you know this is probably not the

00:10:08,839 --> 00:10:12,829
most fruitful approach you know and it

00:10:11,270 --> 00:10:15,199
just wasn't comfortable you know you

00:10:12,829 --> 00:10:18,050
know everything we tried ended up being

00:10:15,199 --> 00:10:20,600
this is this level of pain and pain has

00:10:18,050 --> 00:10:23,149
to be worth some level of gain and we

00:10:20,600 --> 00:10:24,709
really weren't realizing that one of the

00:10:23,149 --> 00:10:28,520
approaches that was taken was you know

00:10:24,709 --> 00:10:29,720
if you dumb down kubernetes any tree and

00:10:28,520 --> 00:10:31,220
I'm just leaving these up here because

00:10:29,720 --> 00:10:33,380
hopefully they're making you squirm and

00:10:31,220 --> 00:10:35,180
I got to tell you I will it is really

00:10:33,380 --> 00:10:36,980
hard to find a picture representing an

00:10:35,180 --> 00:10:40,279
uncomfortable chair and still keep your

00:10:36,980 --> 00:10:41,510
job you know I spend a lot hours like no

00:10:40,279 --> 00:10:45,220
can't use that can't use that can't use

00:10:41,510 --> 00:10:49,819
that you're welcome by the way

00:10:45,220 --> 00:10:51,199
so having said that you know you can

00:10:49,819 --> 00:10:52,910
take some of the problems away by

00:10:51,199 --> 00:10:54,470
dumbing down kubernetes by saying you

00:10:52,910 --> 00:10:55,970
know I'm not gonna let kubernetes do

00:10:54,470 --> 00:10:58,880
anything of what kubernetes does I'm

00:10:55,970 --> 00:11:00,410
gonna treat it as a dumb I ass and I

00:10:58,880 --> 00:11:02,089
don't mean dumb to sound derogatory

00:11:00,410 --> 00:11:03,250
disparaging but I mean in the sense of

00:11:02,089 --> 00:11:05,410
lacking

00:11:03,250 --> 00:11:08,110
the function that kubernetes has

00:11:05,410 --> 00:11:10,030
natively but you end up with well then

00:11:08,110 --> 00:11:11,650
why am I doing this you know what's the

00:11:10,030 --> 00:11:13,210
point of all this you know I mean you're

00:11:11,650 --> 00:11:14,380
spending all that effort to develop new

00:11:13,210 --> 00:11:17,110
layers let something to flow in

00:11:14,380 --> 00:11:17,710
kubernetes but you're not letting Kubik

00:11:17,110 --> 00:11:22,030
OOP

00:11:17,710 --> 00:11:23,320
we kept why so it was uncomfortable but

00:11:22,030 --> 00:11:27,580
we weren't getting anything for the

00:11:23,320 --> 00:11:30,760
discomfort I had to move it not just

00:11:27,580 --> 00:11:34,090
kidding all right so where do we where

00:11:30,760 --> 00:11:35,620
are we landing today so we're trying now

00:11:34,090 --> 00:11:37,600
the pro to the approaches that are

00:11:35,620 --> 00:11:38,800
underway now and we're going to tell you

00:11:37,600 --> 00:11:40,030
about some of the Troy's gonna spend

00:11:38,800 --> 00:11:42,490
some time talking about and when I go

00:11:40,030 --> 00:11:45,760
ahead and give a plug for the next two

00:11:42,490 --> 00:11:47,110
talks you know definitely if you're

00:11:45,760 --> 00:11:50,980
interested in this material stick around

00:11:47,110 --> 00:11:52,900
for the next two talks bent and Simon

00:11:50,980 --> 00:11:55,150
bent from Mississippi and Simon from IBM

00:11:52,900 --> 00:11:56,770
we're gonna have a panel discussion next

00:11:55,150 --> 00:11:58,000
and after that Jules and Jules you're

00:11:56,770 --> 00:12:00,340
going to talk about project ireenie

00:11:58,000 --> 00:12:01,630
those are those fit really nicely into

00:12:00,340 --> 00:12:04,270
this you know current and then future

00:12:01,630 --> 00:12:06,190
discussion you know obviously we

00:12:04,270 --> 00:12:08,560
embraced kubernetes is not just an I as

00:12:06,190 --> 00:12:11,200
some people talk but as an AI as plus

00:12:08,560 --> 00:12:12,910
it's not really app as well it's it's

00:12:11,200 --> 00:12:14,620
own thing that's fine but it's got a lot

00:12:12,910 --> 00:12:17,050
of strengths so let's work within that

00:12:14,620 --> 00:12:19,240
that that that paradigm and let's just

00:12:17,050 --> 00:12:21,370
accept that it is what it is it works a

00:12:19,240 --> 00:12:23,350
certain way containers are not VMs and

00:12:21,370 --> 00:12:25,360
then we go from that we said you know

00:12:23,350 --> 00:12:26,680
kubernetes has a lot of adoption of

00:12:25,360 --> 00:12:28,810
there I mean let's face it it's winning

00:12:26,680 --> 00:12:31,030
a lot of in the sort of virtualized

00:12:28,810 --> 00:12:34,270
infrastructure world kubernetes has you

00:12:31,030 --> 00:12:35,740
know it's got a ton of it's got a ton of

00:12:34,270 --> 00:12:38,770
mind share and that mind share is not

00:12:35,740 --> 00:12:41,740
decreasing it's increasing and it's got

00:12:38,770 --> 00:12:42,970
a big ecosystem of tooling and people

00:12:41,740 --> 00:12:44,380
are familiar with it who know how to

00:12:42,970 --> 00:12:45,480
deploy things on crew Benes who said

00:12:44,380 --> 00:12:47,410
let's just accept that as a given

00:12:45,480 --> 00:12:49,450
instead of trying to take the world we

00:12:47,410 --> 00:12:50,980
know and map it also unless work within

00:12:49,450 --> 00:12:53,650
the context of what people know what

00:12:50,980 --> 00:12:55,330
they're comfortable with ok another

00:12:53,650 --> 00:12:58,660
given what Cloud Foundry follows this

00:12:55,330 --> 00:13:01,630
standard packaging format you know IDI

00:12:58,660 --> 00:13:02,830
it comes packaged as a set of Bosh

00:13:01,630 --> 00:13:05,620
releases that's just the way it's

00:13:02,830 --> 00:13:07,180
packaged and people who are working on

00:13:05,620 --> 00:13:08,500
community projects there for me with

00:13:07,180 --> 00:13:10,060
this they know how to do a bash in it

00:13:08,500 --> 00:13:12,870
and how to create you know how to create

00:13:10,060 --> 00:13:15,670
the the releases and where things go

00:13:12,870 --> 00:13:16,630
fine except that the community's comfort

00:13:15,670 --> 00:13:18,490
with that

00:13:16,630 --> 00:13:19,750
so let's just work within that these are

00:13:18,490 --> 00:13:21,130
things that we treat is given so we

00:13:19,750 --> 00:13:25,170
can't change them we don't try to change

00:13:21,130 --> 00:13:27,639
them I think which brings us to helm so

00:13:25,170 --> 00:13:31,240
kubernetes community doesn't have a an

00:13:27,639 --> 00:13:32,949
official package manager

00:13:31,240 --> 00:13:34,540
but then again neither does Linux

00:13:32,949 --> 00:13:36,339
there's just a couple important ones and

00:13:34,540 --> 00:13:40,660
and in the community's world the

00:13:36,339 --> 00:13:43,149
de-facto application deployment

00:13:40,660 --> 00:13:46,839
management that operates like a package

00:13:43,149 --> 00:13:49,720
manager is helm it's certainly the most

00:13:46,839 --> 00:13:53,550
commonly used deployment orchestration

00:13:49,720 --> 00:13:56,230
tool for applications and it does the

00:13:53,550 --> 00:13:59,259
sort of fire-and-forget deploy it and

00:13:56,230 --> 00:14:01,569
let kubernetes keep its state it has

00:13:59,259 --> 00:14:02,819
some magic over and above what a typical

00:14:01,569 --> 00:14:07,589
cube cuttle

00:14:02,819 --> 00:14:13,540
apply would do and yeah it's it's like

00:14:07,589 --> 00:14:15,399
apt or RPM for for kubernetes it's

00:14:13,540 --> 00:14:16,389
likely to stay important in the

00:14:15,399 --> 00:14:17,940
community because it's got a lot of

00:14:16,389 --> 00:14:21,209
support from Microsoft now that

00:14:17,940 --> 00:14:22,930
Microsoft is sort of sponsoring it and

00:14:21,209 --> 00:14:25,300
they're they're building their own

00:14:22,930 --> 00:14:28,899
ecosystem around this tool so it's it's

00:14:25,300 --> 00:14:30,910
around for the long haul so what makes

00:14:28,899 --> 00:14:32,350
people use tools all things being equal

00:14:30,910 --> 00:14:34,990
most of us will generally use what's

00:14:32,350 --> 00:14:36,730
most comfortable you know what's what's

00:14:34,990 --> 00:14:39,610
easy to use what's comfortable what fits

00:14:36,730 --> 00:14:42,100
well what just feels easy it's not

00:14:39,610 --> 00:14:44,620
always it's not always a set of you know

00:14:42,100 --> 00:14:46,089
precise calculations it's nice this just

00:14:44,620 --> 00:14:48,819
feels right it just feels comfortable

00:14:46,089 --> 00:14:52,120
you know why do we use CF push because

00:14:48,819 --> 00:14:54,220
it's the easy button and so we sort of

00:14:52,120 --> 00:14:56,430
accepted that going in you know what's

00:14:54,220 --> 00:15:00,790
what's going to get people using this

00:14:56,430 --> 00:15:02,709
this off back from way back when we done

00:15:00,790 --> 00:15:05,380
this crazy containerized deployment on a

00:15:02,709 --> 00:15:08,850
proprietary control plane we had this

00:15:05,380 --> 00:15:12,250
great tool for taking Bosh releases and

00:15:08,850 --> 00:15:15,699
turning them into container images and

00:15:12,250 --> 00:15:16,810
help charts at back at the beginning it

00:15:15,699 --> 00:15:18,130
was turning them into something slightly

00:15:16,810 --> 00:15:19,810
different the container images were the

00:15:18,130 --> 00:15:22,389
same but the configuration that it came

00:15:19,810 --> 00:15:26,680
that came with it was different now it

00:15:22,389 --> 00:15:30,170
makes initially it made cube config and

00:15:26,680 --> 00:15:32,269
now it makes helm charts this

00:15:30,170 --> 00:15:34,670
works and that at the largest-scale the

00:15:32,269 --> 00:15:36,080
most complex thing which is probably the

00:15:34,670 --> 00:15:39,560
most complex helm chart I've seen which

00:15:36,080 --> 00:15:43,970
is for Cloud Foundry but also the tool

00:15:39,560 --> 00:15:46,370
also works for all of the other Bosch

00:15:43,970 --> 00:15:48,769
releases that are have grown around the

00:15:46,370 --> 00:15:50,360
Cloud Foundry community so chances are

00:15:48,769 --> 00:15:53,060
especially it's a fairly straightforward

00:15:50,360 --> 00:15:54,399
Bosch release it can go through fissile

00:15:53,060 --> 00:15:56,450
and come out as a containerized

00:15:54,399 --> 00:16:00,740
application that you can deploy with

00:15:56,450 --> 00:16:02,540
helm it's not pronounced fizzle if

00:16:00,740 --> 00:16:06,560
you've ever heard chip say it that way

00:16:02,540 --> 00:16:09,170
it's not how we say here's the github

00:16:06,560 --> 00:16:14,980
repo I'll this will be on the slide at

00:16:09,170 --> 00:16:17,779
the end as well and the end product is a

00:16:14,980 --> 00:16:20,940
helmet art and some container images the

00:16:17,779 --> 00:16:22,660
container images get uploaded to a

00:16:20,940 --> 00:16:25,160
[Music]

00:16:22,660 --> 00:16:30,320
docker registry or on OCI imager

00:16:25,160 --> 00:16:32,329
registry and the helm charts are going a

00:16:30,320 --> 00:16:34,459
Helmer posit ori which is just a zip

00:16:32,329 --> 00:16:37,490
file or a directory structure or tar.gz

00:16:34,459 --> 00:16:40,339
or a directory structure a lot of them

00:16:37,490 --> 00:16:42,620
are hosted on github ours are hosted on

00:16:40,339 --> 00:16:46,010
our own servers our own helm repository

00:16:42,620 --> 00:16:48,920
and in an idealized deployment you would

00:16:46,010 --> 00:16:51,110
just need two or even one if we package

00:16:48,920 --> 00:16:54,290
them together to deploy cloud foundry in

00:16:51,110 --> 00:16:57,520
ours you deploy a UA a first set some

00:16:54,290 --> 00:16:59,810
options and then deploy Cloud Foundry

00:16:57,520 --> 00:17:02,230
typically it's a little more complex as

00:16:59,810 --> 00:17:04,819
a copy-paste from a you know a standard

00:17:02,230 --> 00:17:06,679
installation we do some things where we

00:17:04,819 --> 00:17:08,660
actually move a secret around between

00:17:06,679 --> 00:17:10,490
them if we package them together we

00:17:08,660 --> 00:17:13,400
could get around that but it's still

00:17:10,490 --> 00:17:15,260
pretty easy and you can put a UI in

00:17:13,400 --> 00:17:20,150
front of it as we saw this morning when

00:17:15,260 --> 00:17:21,709
you provision stuff on IBM spot but even

00:17:20,150 --> 00:17:23,990
if you're just using the CLI and

00:17:21,709 --> 00:17:27,290
configuring the the values and the in

00:17:23,990 --> 00:17:32,710
the gamma files there it's it's a very

00:17:27,290 --> 00:17:32,710
very easy way to get up and running so

00:17:32,830 --> 00:17:37,100
the inevitable comparison to obviously

00:17:35,270 --> 00:17:39,700
you know how does Bosh work how does

00:17:37,100 --> 00:17:41,690
this approach work you know Bosh is a

00:17:39,700 --> 00:17:42,610
single tool that kind of does everything

00:17:41,690 --> 00:17:44,380
it

00:17:42,610 --> 00:17:46,059
you know it handles the packaging it

00:17:44,380 --> 00:17:48,330
handles deployment and it also handles

00:17:46,059 --> 00:17:51,700
sort of some aspect of day to operations

00:17:48,330 --> 00:17:53,320
in this approach it's a tool chain and

00:17:51,700 --> 00:17:55,299
again because we took this approach

00:17:53,320 --> 00:17:57,280
because if you've decided that you're

00:17:55,299 --> 00:17:59,020
gonna deploy into kubernetes and you're

00:17:57,280 --> 00:18:00,640
gonna operate in a coop native manner

00:17:59,020 --> 00:18:01,960
you have to accept that there's some

00:18:00,640 --> 00:18:03,460
things that are done for you and there's

00:18:01,960 --> 00:18:05,260
part of parts of the ecosystems that are

00:18:03,460 --> 00:18:07,840
already there so we're not trying to

00:18:05,260 --> 00:18:09,400
reinvent an entire Bosch Replacements

00:18:07,840 --> 00:18:10,990
just what's existing that we can

00:18:09,400 --> 00:18:12,460
leverage and then how can we put it

00:18:10,990 --> 00:18:15,400
together to make a nice experience for

00:18:12,460 --> 00:18:18,190
deploying onto onto a coop so we've got

00:18:15,400 --> 00:18:20,160
packaging that's fissile you know I'm a

00:18:18,190 --> 00:18:22,540
big fan of small tools doing small jobs

00:18:20,160 --> 00:18:24,910
fissile does a certain thing and does it

00:18:22,540 --> 00:18:26,890
well for deployment you've got helped a

00:18:24,910 --> 00:18:28,150
lot of people not everybody but

00:18:26,890 --> 00:18:30,250
certainly the majority of people

00:18:28,150 --> 00:18:32,230
deploying complex applications onto unto

00:18:30,250 --> 00:18:33,640
coop are at least somewhat familiar with

00:18:32,230 --> 00:18:36,150
helm and have some experience with it

00:18:33,640 --> 00:18:38,679
and then for management just back away

00:18:36,150 --> 00:18:43,630
deploy it in a coop correct manner and

00:18:38,679 --> 00:18:49,360
then let coop do its job but all's not

00:18:43,630 --> 00:18:52,030
completely rosy it's cloud foundry has

00:18:49,360 --> 00:18:55,630
become very attached to Bosh and Bosh

00:18:52,030 --> 00:18:57,640
does things a certain way and Cube

00:18:55,630 --> 00:19:00,190
doesn't always play perfectly with that

00:18:57,640 --> 00:19:03,640
so fire-and-forget doesn't always work

00:19:00,190 --> 00:19:07,140
for all aspects of CF one problem that

00:19:03,640 --> 00:19:10,120
we hit was the generation of secrets

00:19:07,140 --> 00:19:12,070
cube didn't have a way for us to

00:19:10,120 --> 00:19:13,780
generate certificates and though in the

00:19:12,070 --> 00:19:15,610
way that was needed for Cloud Foundry so

00:19:13,780 --> 00:19:17,830
we had to create a special pod that was

00:19:15,610 --> 00:19:20,190
in addition to the pods that we got out

00:19:17,830 --> 00:19:24,429
of the the Bosh release to handle that

00:19:20,190 --> 00:19:26,470
also the update orchestration you get in

00:19:24,429 --> 00:19:28,390
Bosh makes sure that you don't get any

00:19:26,470 --> 00:19:32,200
downtime and you get all sorts of great

00:19:28,390 --> 00:19:35,130
features that you can roll back this is

00:19:32,200 --> 00:19:37,150
not something that helm can do perfectly

00:19:35,130 --> 00:19:38,740
with cloud foundry there's a little bit

00:19:37,150 --> 00:19:40,179
of downtime involved and we've got ways

00:19:38,740 --> 00:19:43,450
around us we've done a lot of work to

00:19:40,179 --> 00:19:45,220
make that work but it would be nice if

00:19:43,450 --> 00:19:48,970
we had something that could handle that

00:19:45,220 --> 00:19:50,980
a little bit better for example another

00:19:48,970 --> 00:19:53,110
another instance if you wanted to change

00:19:50,980 --> 00:19:55,120
a setting in containerized cloud foundry

00:19:53,110 --> 00:19:58,390
that's deployed this way

00:19:55,120 --> 00:20:01,330
you would have to do a helm helm upgrade

00:19:58,390 --> 00:20:04,030
with us with a value that's been changed

00:20:01,330 --> 00:20:07,150
for helm to pass on to cube but that

00:20:04,030 --> 00:20:08,590
actually does an upgrade it can be an

00:20:07,150 --> 00:20:10,360
upgrade to the same version but it's a

00:20:08,590 --> 00:20:12,250
clunky way to actually just tweak one

00:20:10,360 --> 00:20:14,200
setting be nice if we could just go in

00:20:12,250 --> 00:20:16,050
and get an operator to to make that

00:20:14,200 --> 00:20:18,580
setting change

00:20:16,050 --> 00:20:22,120
we've both it I think problems with a

00:20:18,580 --> 00:20:25,840
cube API changing ya up from under us

00:20:22,120 --> 00:20:27,940
and that makes certain operations in the

00:20:25,840 --> 00:20:29,980
helm world difficult and I don't know if

00:20:27,940 --> 00:20:32,710
you had well I mean it's just a specific

00:20:29,980 --> 00:20:34,210
example was something you know our Cloud

00:20:32,710 --> 00:20:36,760
Foundry distribution that we're using is

00:20:34,210 --> 00:20:38,950
based on sousei Cloud Foundry you know

00:20:36,760 --> 00:20:40,809
and so we both hit one of these things

00:20:38,950 --> 00:20:43,600
at the same time is when there was a

00:20:40,809 --> 00:20:45,730
very minor change from one cube 1/8 to

00:20:43,600 --> 00:20:48,220
1/9 and we woke up one day and we're

00:20:45,730 --> 00:20:51,220
like hmm things aren't working you know

00:20:48,220 --> 00:20:53,110
kuba Scoob but you know again it's not

00:20:51,220 --> 00:20:54,520
you know for the most part it's pretty

00:20:53,110 --> 00:20:56,170
transparent but occasionally we'll hit

00:20:54,520 --> 00:20:58,510
these ones that was with security

00:20:56,170 --> 00:21:00,340
security groups which was that one do

00:20:58,510 --> 00:21:02,710
you remember pod security policies yes

00:21:00,340 --> 00:21:04,960
I've changed and so you know we had to

00:21:02,710 --> 00:21:06,309
make some interesting changes and a lot

00:21:04,960 --> 00:21:07,990
of release notes that were involved in

00:21:06,309 --> 00:21:10,780
making sure people could do that up

00:21:07,990 --> 00:21:14,440
quite yeah one of the hardest things was

00:21:10,780 --> 00:21:16,059
getting Diego to run in a containerized

00:21:14,440 --> 00:21:17,920
environment because it is it's alpha it

00:21:16,059 --> 00:21:19,360
can take a container scheduler and so

00:21:17,920 --> 00:21:22,030
you've got containers and containers in

00:21:19,360 --> 00:21:23,320
this in the style of deployment which is

00:21:22,030 --> 00:21:25,240
architectural he looks a little funny

00:21:23,320 --> 00:21:28,330
works ok but it was hard to get it right

00:21:25,240 --> 00:21:30,429
with file system issues and that's why

00:21:28,330 --> 00:21:32,770
we're really looking forward both of our

00:21:30,429 --> 00:21:35,500
groups to ireenie because we can

00:21:32,770 --> 00:21:41,440
actually use the cube scheduler directly

00:21:35,500 --> 00:21:43,809
for for cloud foundry applications so we

00:21:41,440 --> 00:21:45,070
both got skin in the game we bought both

00:21:43,809 --> 00:21:46,630
of our companies have products in this

00:21:45,070 --> 00:21:47,679
space you want to talk a little bit

00:21:46,630 --> 00:21:49,690
about sure

00:21:47,679 --> 00:21:51,160
so you've seen already you saw Tammy's

00:21:49,690 --> 00:21:53,170
demo hopefully this morning where she

00:21:51,160 --> 00:21:57,190
demonstrated cloud foundry enterprise

00:21:53,170 --> 00:21:58,690
environment you know it's a self-service

00:21:57,190 --> 00:22:00,460
deployment of cloud foundry on top of

00:21:58,690 --> 00:22:04,810
our cloud it's on top of a kubernetes

00:22:00,460 --> 00:22:07,060
cluster we are you know despite whatever

00:22:04,810 --> 00:22:09,309
shortcomings Fissel and hell may have

00:22:07,060 --> 00:22:11,409
you know we don't think they are in

00:22:09,309 --> 00:22:13,149
hitters - it's you their use in a

00:22:11,409 --> 00:22:14,230
production deployment you know because

00:22:13,149 --> 00:22:16,330
we're building a commercial product

00:22:14,230 --> 00:22:17,830
that's GA you can go out buy it today so

00:22:16,330 --> 00:22:20,169
we believe it enough that we think we

00:22:17,830 --> 00:22:23,080
can actually sell it as a product and

00:22:20,169 --> 00:22:24,659
it's worked well for us one of the

00:22:23,080 --> 00:22:26,620
things that I kind of like about this

00:22:24,659 --> 00:22:28,269
whether it's right or wrong it's an

00:22:26,620 --> 00:22:31,480
opinion take it for what it's worth is

00:22:28,269 --> 00:22:33,429
that we are at its core we're treating

00:22:31,480 --> 00:22:35,080
Cloud Foundry is another application

00:22:33,429 --> 00:22:36,370
that runs on our cloud you know we're

00:22:35,080 --> 00:22:38,139
deploying it the same way we deploy any

00:22:36,370 --> 00:22:39,909
other application or any other workload

00:22:38,139 --> 00:22:41,320
so when a customer comes along and says

00:22:39,909 --> 00:22:42,730
you know I want to get some of that on

00:22:41,320 --> 00:22:46,330
the IBM cloud or some of that on the IBM

00:22:42,730 --> 00:22:47,980
cloud this fits into that paradigm we're

00:22:46,330 --> 00:22:49,299
not doing anything all that different

00:22:47,980 --> 00:22:50,980
for this I mean there's fissile inhale

00:22:49,299 --> 00:22:54,159
but at the end of the day helm is how we

00:22:50,980 --> 00:22:55,360
deploy things onto kubernetes this is

00:22:54,159 --> 00:22:59,590
just another workload on top of

00:22:55,360 --> 00:23:01,029
kubernetes and it's a cloud native sort

00:22:59,590 --> 00:23:05,019
of a more cloud native approach in the

00:23:01,029 --> 00:23:06,129
sense that things like Postgres and the

00:23:05,019 --> 00:23:08,169
cloud object storage we're not

00:23:06,129 --> 00:23:09,399
provisioning those as part of the

00:23:08,169 --> 00:23:11,590
infrastructure we're provisioning those

00:23:09,399 --> 00:23:13,059
as cloud services and binding them to

00:23:11,590 --> 00:23:15,700
Cloud Foundry what's the way you would

00:23:13,059 --> 00:23:17,679
do with an application so it's end and a

00:23:15,700 --> 00:23:20,919
I don't know it feels like a more cloud

00:23:17,679 --> 00:23:22,990
native experience to me and our product

00:23:20,919 --> 00:23:27,850
this is a cloud application platform

00:23:22,990 --> 00:23:29,590
it's built on Isuzu Linux Enterprise it

00:23:27,850 --> 00:23:34,179
was a certified distribution hopefully

00:23:29,590 --> 00:23:37,720
it will continue to be so supporting it

00:23:34,179 --> 00:23:39,639
on souza kaz platform our our

00:23:37,720 --> 00:23:41,740
distribution of kubernetes it's actually

00:23:39,639 --> 00:23:42,789
bundled with the product but more

00:23:41,740 --> 00:23:44,200
recently we've been getting a lot of

00:23:42,789 --> 00:23:45,730
interest in running this on the public

00:23:44,200 --> 00:23:47,289
cloud so a lot of the public cloud

00:23:45,730 --> 00:23:48,749
providers have a kubernetes that works

00:23:47,289 --> 00:23:51,929
just perfectly with it

00:23:48,749 --> 00:23:54,700
aks and eks are the two supported ones

00:23:51,929 --> 00:23:56,289
100% open-source you've seen other

00:23:54,700 --> 00:23:59,499
people using our stuff throughout this

00:23:56,289 --> 00:24:05,320
and again we hope people continue to use

00:23:59,499 --> 00:24:07,480
it and now as I mentioned at the

00:24:05,320 --> 00:24:09,399
beginning a year ago we started

00:24:07,480 --> 00:24:13,679
discussions with a small working group

00:24:09,399 --> 00:24:16,889
of people from IBM Souza NSA P

00:24:13,679 --> 00:24:19,640
immediately following your talk in fact

00:24:16,889 --> 00:24:24,770
this group

00:24:19,640 --> 00:24:26,440
and props too burnt from sa P yeah for

00:24:24,770 --> 00:24:30,410
we're doing a lot of legwork on this

00:24:26,440 --> 00:24:33,350
drafted a proposal that was going to

00:24:30,410 --> 00:24:35,210
properly introduce this way of you know

00:24:33,350 --> 00:24:38,570
a containerization of Cloud Foundry

00:24:35,210 --> 00:24:40,460
project for incubation and we had

00:24:38,570 --> 00:24:41,810
initially this was drafted very much as

00:24:40,460 --> 00:24:43,610
a fresh start approach like we're gonna

00:24:41,810 --> 00:24:45,470
break off teams of people from all these

00:24:43,610 --> 00:24:47,840
companies and and work on a brand new

00:24:45,470 --> 00:24:50,180
project but as we started working on it

00:24:47,840 --> 00:24:52,070
and as we kept working on the products

00:24:50,180 --> 00:24:54,830
that we were working on using fissile we

00:24:52,070 --> 00:24:57,620
realized that everything we had to do to

00:24:54,830 --> 00:25:00,470
make a production ready Cloud Foundry

00:24:57,620 --> 00:25:02,720
using using fissile was a step towards

00:25:00,470 --> 00:25:06,170
the goals of this project so we actually

00:25:02,720 --> 00:25:07,820
revised the the proposal to include you

00:25:06,170 --> 00:25:10,460
know a plan from getting to where we are

00:25:07,820 --> 00:25:13,550
now to getting to where we want to be

00:25:10,460 --> 00:25:18,460
and we're very happy to see that this

00:25:13,550 --> 00:25:22,120
was accepted for incubation this summer

00:25:18,460 --> 00:25:25,070
and fissile will continue to evolve so

00:25:22,120 --> 00:25:26,600
rather provocative subtitle we used to

00:25:25,070 --> 00:25:29,630
have for the fissile project as the

00:25:26,600 --> 00:25:31,220
Bosch disintegrator and the irony is now

00:25:29,630 --> 00:25:32,750
it's part of the Bosch pmc is so it is

00:25:31,220 --> 00:25:36,020
in fact the Bosch integrator it's a

00:25:32,750 --> 00:25:37,880
better better way to describe it

00:25:36,020 --> 00:25:40,370
phase one of this project is mostly done

00:25:37,880 --> 00:25:42,380
I can't get into all of the details here

00:25:40,370 --> 00:25:45,050
because I a we're running short of time

00:25:42,380 --> 00:25:47,780
and B I'm a product manager and I didn't

00:25:45,050 --> 00:25:51,320
write this stuff but we are basically

00:25:47,780 --> 00:25:54,980
trying to reduce the amount of work that

00:25:51,320 --> 00:25:58,100
we have to do to make this Bosch to make

00:25:54,980 --> 00:26:00,320
this helm deployment and instead inherit

00:25:58,100 --> 00:26:04,070
as much of the stuff we get get coming

00:26:00,320 --> 00:26:08,060
coming in from Bosch as we possibly can

00:26:04,070 --> 00:26:11,870
we will move on to Phase two which will

00:26:08,060 --> 00:26:15,170
move to Bosch process management a Bosch

00:26:11,870 --> 00:26:19,700
process manager making sure the jobs are

00:26:15,170 --> 00:26:23,360
all in in separate containers use the

00:26:19,700 --> 00:26:26,450
the BPM and link information make sure

00:26:23,360 --> 00:26:28,280
that we're using the BPM and entry point

00:26:26,450 --> 00:26:30,800
information rather than relying on

00:26:28,280 --> 00:26:32,750
Monnett and we want to make sure that we

00:26:30,800 --> 00:26:35,510
can consume CF deployment

00:26:32,750 --> 00:26:37,010
and then eventually we want to have an

00:26:35,510 --> 00:26:39,080
operator at runtime a fully fledged

00:26:37,010 --> 00:26:41,710
kubernetes operator runtime that handles

00:26:39,080 --> 00:26:45,710
some of the things which have been done

00:26:41,710 --> 00:26:47,660
by the boss shop writer one of the

00:26:45,710 --> 00:26:49,970
things that this will allow us to do is

00:26:47,660 --> 00:26:52,250
of course to feed it

00:26:49,970 --> 00:26:54,410
Bosch manifests that any Bosch admin

00:26:52,250 --> 00:26:56,690
would recognize and so we can on a

00:26:54,410 --> 00:26:58,940
running system feed at a Bosch manifest

00:26:56,690 --> 00:27:01,429
even though it's running it was made by

00:26:58,940 --> 00:27:03,020
Fissel it was deployed with helm but we

00:27:01,429 --> 00:27:05,540
can still treat it in a lot of the way

00:27:03,020 --> 00:27:08,600
same ways that we would treat a regular

00:27:05,540 --> 00:27:10,429
Bosch deployment there's a lot more

00:27:08,600 --> 00:27:12,200
information on the details of this in

00:27:10,429 --> 00:27:16,040
the document and you can all memorize

00:27:12,200 --> 00:27:18,640
this URL I'll post the slides as soon as

00:27:16,040 --> 00:27:22,190
we're done but there's also stuff in the

00:27:18,640 --> 00:27:25,250
github repos the Fissel repo and a

00:27:22,190 --> 00:27:27,559
related repo called config in' fist i

00:27:25,250 --> 00:27:30,860
was probably the main one and we'd love

00:27:27,559 --> 00:27:33,110
to also have you join us on the CF

00:27:30,860 --> 00:27:39,140
containers slack on the on the cod

00:27:33,110 --> 00:27:42,910
family slack so any questions any

00:27:39,140 --> 00:27:42,910
questions from anybody not named Jules

00:27:47,290 --> 00:27:53,840
well then I'll just say before I say

00:27:51,290 --> 00:27:56,960
thank you for coming please do stick

00:27:53,840 --> 00:28:00,440
around for the next two talks if you can

00:27:56,960 --> 00:28:01,850
Benton Simon BAM Taconic from s AP and

00:28:00,440 --> 00:28:02,960
Simon Moser from IBM are going to be

00:28:01,850 --> 00:28:05,390
leading a panel discussion about

00:28:02,960 --> 00:28:07,400
containerized in kubernetes it should be

00:28:05,390 --> 00:28:08,840
really interesting and then Jules and

00:28:07,400 --> 00:28:12,500
Jules are going to be presenting on

00:28:08,840 --> 00:28:14,870
project ireenie which is I think really

00:28:12,500 --> 00:28:16,490
really cool and so if you've got time

00:28:14,870 --> 00:28:18,020
the next two presentations if you are

00:28:16,490 --> 00:28:19,820
interested in the whole containerization

00:28:18,020 --> 00:28:23,640
ecosystem you know I think they're both

00:28:19,820 --> 00:28:28,959
must most visits thanks awful thank you

00:28:23,640 --> 00:28:28,959

YouTube URL: https://www.youtube.com/watch?v=1pC0bfawnEI


