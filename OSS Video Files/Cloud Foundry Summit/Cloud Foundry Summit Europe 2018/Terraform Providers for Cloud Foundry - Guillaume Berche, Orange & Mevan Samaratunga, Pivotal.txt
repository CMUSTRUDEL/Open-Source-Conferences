Title: Terraform Providers for Cloud Foundry - Guillaume Berche, Orange & Mevan Samaratunga, Pivotal
Publication date: 2018-10-11
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Terraform Providers for Cloud Foundry - Guillaume Berche, Orange & Mevan Samaratunga, Pivotal

As a Cloud Foundry admin, do you feel tired of scripting the CF CLI to automate provisioning of CF resources (domain/org/roles/quotas/buildpacks/sec-groups/brokers/service-plan-visibility etc...)? Is your automation getting complex and fragile as your CF ecosystem scales ?

As a CF application developer, do you sometimes feel limited by the CF application manifest ? Ever needed to script creation of space/role/service instance/network-policy ? Would you like to manage your application resources in an idempotent manner, uniformly across CF CR and CF AR, and cross-reference them ?

Terraform (https://www.terraform.io/) “enables you to safely and predictably create, change, and improve your production infrastructure. It is an open source tool that codifies APIs into declarative configuration files that can be shared amongst team members, treated as code, edited, reviewed, and versioned.”

This talk introduces terraform providers for CF-related resources, bringing terraform benefits to CF admins and developers. It starts by detailing some target use-cases, then illustrates use of terraform CF provider through demos, details the current state of the implementation available at https://github.com/mevansam/terraform-provider-cf, and closes with future plans and perspectives on innovative use-cases.

https://cfseu18.sched.com/event/FRyl/terraform-providers-for-cloud-foundry-guillaume-berche-orange-mevan-samaratunga-pivotal
Captions: 
	00:00:00,000 --> 00:00:04,620
it welcome all its some great idea here

00:00:02,580 --> 00:00:07,980
today we're going to talk about how to

00:00:04,620 --> 00:00:11,570
provision platform and apps during using

00:00:07,980 --> 00:00:14,130
platform I'm Gilbert and this is maven

00:00:11,570 --> 00:00:21,930
spirit again say your name because I'm

00:00:14,130 --> 00:00:23,670
not sure I'd say it right yeah and we'll

00:00:21,930 --> 00:00:25,170
start with our team introduction so

00:00:23,670 --> 00:00:28,769
today we are presenting the work of

00:00:25,170 --> 00:00:32,279
achiever team of volunteers being put a

00:00:28,769 --> 00:00:34,890
great effort of their time to work on

00:00:32,279 --> 00:00:39,230
this so this is our chair Guillaume

00:00:34,890 --> 00:00:41,550
Jana's gym maven summit sorry I'm Dylan

00:00:39,230 --> 00:00:44,460
it's been great to have such a diversity

00:00:41,550 --> 00:00:46,379
of contributors and volunteers from

00:00:44,460 --> 00:00:48,450
different companies as well as a

00:00:46,379 --> 00:00:50,640
different continent so a free continent

00:00:48,450 --> 00:00:54,270
and two time zone so it's been

00:00:50,640 --> 00:00:56,610
challenging as well and so let's look at

00:00:54,270 --> 00:00:58,590
the agenda for today which start with

00:00:56,610 --> 00:01:02,579
the why what I use cases for using

00:00:58,590 --> 00:01:05,939
profound ring so we start with the admin

00:01:02,579 --> 00:01:08,760
and operators and then app developers

00:01:05,939 --> 00:01:11,490
then we'll cover how it's tormenting us

00:01:08,760 --> 00:01:14,430
with those test cases so we'll get an

00:01:11,490 --> 00:01:18,659
introduction about to reform model and

00:01:14,430 --> 00:01:20,790
syntax demo and then some sample config

00:01:18,659 --> 00:01:24,530
that match those use cases and we'll

00:01:20,790 --> 00:01:27,860
close with getting more details about

00:01:24,530 --> 00:01:31,590
the implementation wet hands of the hood

00:01:27,860 --> 00:01:33,689
history about the provider and what has

00:01:31,590 --> 00:01:36,930
the backlog what are we what sort of

00:01:33,689 --> 00:01:44,549
next alright so let's get started the

00:01:36,930 --> 00:01:47,670
wine so admin use case when as an I mean

00:01:44,549 --> 00:01:50,340
when I receive my life looks pretty much

00:01:47,670 --> 00:01:52,110
like this I get a request from users can

00:01:50,340 --> 00:01:54,960
you please create a space and all the

00:01:52,110 --> 00:01:57,329
security groups can you publish this big

00:01:54,960 --> 00:02:01,649
pack and so forth so it's act like this

00:01:57,329 --> 00:02:03,990
so I go off with the CLI I create but

00:02:01,649 --> 00:02:06,180
when it becomes overwhelming with the

00:02:03,990 --> 00:02:08,989
number of aquatic and so it goes with

00:02:06,180 --> 00:02:12,720
feature Flags iteration segments

00:02:08,989 --> 00:02:13,709
illy groups Hooters and all that so as a

00:02:12,720 --> 00:02:16,290
developer I start

00:02:13,709 --> 00:02:19,260
scripting but then comes more requests

00:02:16,290 --> 00:02:23,299
and mob consistency request to run done

00:02:19,260 --> 00:02:27,780
in sync between pre prod prod and the

00:02:23,299 --> 00:02:29,430
different regions and so very soon it

00:02:27,780 --> 00:02:33,900
becomes a headache so there needs to be

00:02:29,430 --> 00:02:35,250
a better way of doing this as a

00:02:33,900 --> 00:02:39,930
developer I have faced similar

00:02:35,250 --> 00:02:42,180
challenges this era is great it's great

00:02:39,930 --> 00:02:44,159
for most cases but it doesn't fully

00:02:42,180 --> 00:02:46,439
cover the quality resources I will need

00:02:44,159 --> 00:02:49,859
to provision I cannot create a space

00:02:46,439 --> 00:02:52,950
such user space roles Network policies

00:02:49,859 --> 00:02:55,579
might beginning their service instance

00:02:52,950 --> 00:02:58,349
and user provided service are not there

00:02:55,579 --> 00:03:02,639
space cop service broker are missing

00:02:58,349 --> 00:03:05,159
from the CF manifest as well when we

00:03:02,639 --> 00:03:08,400
need to deploy a micro based micro

00:03:05,159 --> 00:03:10,980
service based application using CCD on

00:03:08,400 --> 00:03:14,480
multiple deployments I need to perform

00:03:10,980 --> 00:03:17,790
other activities so let's look at them

00:03:14,480 --> 00:03:21,000
so download the app binaries and all

00:03:17,790 --> 00:03:23,400
potential dependencies among the apps as

00:03:21,000 --> 00:03:27,690
well as looking up domains on each

00:03:23,400 --> 00:03:29,370
development its deployment sorry so this

00:03:27,690 --> 00:03:31,799
is why it community came up with some

00:03:29,370 --> 00:03:35,909
additional tooling you might be aware of

00:03:31,799 --> 00:03:39,000
sa pmta or pushed to cloud that try to

00:03:35,909 --> 00:03:41,639
address those use cases but with a

00:03:39,000 --> 00:03:43,250
different set of tooling another use

00:03:41,639 --> 00:03:46,109
case is sometimes I need to reference

00:03:43,250 --> 00:03:49,169
resources from a different system from

00:03:46,109 --> 00:03:51,239
crab from application runtime and from

00:03:49,169 --> 00:03:53,939
container runtime and cross-linked them

00:03:51,239 --> 00:03:56,909
together and I'm clueless with the

00:03:53,939 --> 00:04:00,900
existing chef manifest and with those

00:03:56,909 --> 00:04:03,439
other tools so that's what the Proms are

00:04:00,900 --> 00:04:10,949
trying to fix without the reform and

00:04:03,439 --> 00:04:13,560
let's look at a high tab so you most of

00:04:10,949 --> 00:04:16,349
us know to reform as a way to provision

00:04:13,560 --> 00:04:19,699
infrastructure prerequisite you might be

00:04:16,349 --> 00:04:24,090
provisioning load balancers networks

00:04:19,699 --> 00:04:25,680
security groups but just one on that and

00:04:24,090 --> 00:04:26,639
so today

00:04:25,680 --> 00:04:29,009
we're going to show how you can

00:04:26,639 --> 00:04:31,800
provision platforms and apps using

00:04:29,009 --> 00:04:34,020
Truffaut so we made a bit of fun with

00:04:31,800 --> 00:04:37,470
the Ashley Cobb website to illustrate

00:04:34,020 --> 00:04:39,030
some of this so we took a certain

00:04:37,470 --> 00:04:41,070
replace from the ostracod website

00:04:39,030 --> 00:04:43,350
everywhere it's mentioned infrastructure

00:04:41,070 --> 00:04:46,050
we change with apps platform and apps

00:04:43,350 --> 00:04:48,270
and we'll go through this website

00:04:46,050 --> 00:04:50,310
to illustrate or the concept maps and

00:04:48,270 --> 00:04:53,190
that most concept still hold when we

00:04:50,310 --> 00:04:57,690
provision platform and apps so the core

00:04:53,190 --> 00:04:59,220
principles to to reform that that don't

00:04:57,690 --> 00:05:02,660
know is decorative

00:04:59,220 --> 00:05:05,669
direct decorative config files that gas

00:05:02,660 --> 00:05:08,039
saved to get and shared among team

00:05:05,669 --> 00:05:11,009
members and it's really cool we are

00:05:08,039 --> 00:05:12,750
cutting infrastructure as code and so

00:05:11,009 --> 00:05:15,870
we'll be cutting today platform as good

00:05:12,750 --> 00:05:18,419
platform and apps as good so the three

00:05:15,870 --> 00:05:22,830
phases to that so first phase is we

00:05:18,419 --> 00:05:26,160
could you do write config and then we

00:05:22,830 --> 00:05:27,570
plan we asked to reform to tell us what

00:05:26,160 --> 00:05:29,820
change you would you would be applying

00:05:27,570 --> 00:05:32,370
some to plan phase and then the last

00:05:29,820 --> 00:05:35,729
phase is you create actually we ask him

00:05:32,370 --> 00:05:40,139
to a tree performance change so let's

00:05:35,729 --> 00:05:42,979
review that in more detail then I must

00:05:40,139 --> 00:05:47,599
discuss out yes

00:05:42,979 --> 00:05:51,659
so on the right path so we see how we

00:05:47,599 --> 00:05:53,909
write code using reformed syntax it's in

00:05:51,659 --> 00:05:57,060
gate so I can collaborate with my team I

00:05:53,909 --> 00:06:02,310
see history can put tags fashion control

00:05:57,060 --> 00:06:05,280
so like we do in this code and then

00:06:02,310 --> 00:06:08,610
since it's good I use my usual ID so I

00:06:05,280 --> 00:06:10,680
would get code completion I would get

00:06:08,610 --> 00:06:13,050
syntax highlighting I would get a

00:06:10,680 --> 00:06:14,970
navigation refactoring everything that

00:06:13,050 --> 00:06:21,919
I'm expected to do with the programming

00:06:14,970 --> 00:06:26,220
language on the plant face so not only

00:06:21,919 --> 00:06:28,259
terraform also allows me to drink plan

00:06:26,220 --> 00:06:30,479
to see a minor change might affect some

00:06:28,259 --> 00:06:33,389
other instances so it maintains some

00:06:30,479 --> 00:06:35,310
dependency across the the resources that

00:06:33,389 --> 00:06:39,150
we can visualize as a dependency graph

00:06:35,310 --> 00:06:39,889
in which that in the demo and so by

00:06:39,150 --> 00:06:43,400
being able

00:06:39,889 --> 00:06:45,469
review the proposed change before

00:06:43,400 --> 00:06:47,719
applying them I can do some kind of dry

00:06:45,469 --> 00:06:54,499
run okay which I cannot do when I do CF

00:06:47,719 --> 00:06:56,659
push with a multi multi app manifest

00:06:54,499 --> 00:06:56,870
it's an all-or-nothing I cannot do a dry

00:06:56,659 --> 00:07:00,349
run

00:06:56,870 --> 00:07:03,560
so telephone rolls me to do dry runs and

00:07:00,349 --> 00:07:05,689
most importantly it's consistent across

00:07:03,560 --> 00:07:08,629
those two those different resources that

00:07:05,689 --> 00:07:11,569
the same workflow I'm using for all of

00:07:08,629 --> 00:07:14,060
these font resources with them Clutton

00:07:11,569 --> 00:07:16,099
tree application runtime that we almost

00:07:14,060 --> 00:07:19,490
familiar with but as well with

00:07:16,099 --> 00:07:23,120
kubernetes with credible with you a so

00:07:19,490 --> 00:07:29,000
we'll review that so finally in the

00:07:23,120 --> 00:07:31,819
create phase since it's all code it's

00:07:29,000 --> 00:07:34,159
reproducible and so I'm getting

00:07:31,819 --> 00:07:35,810
environment parity remember the pre prod

00:07:34,159 --> 00:07:36,379
prod and the different regions I have to

00:07:35,810 --> 00:07:38,900
keep in sync

00:07:36,379 --> 00:07:42,229
since this is same exact same code it

00:07:38,900 --> 00:07:44,360
would run exactly same way if I have

00:07:42,229 --> 00:07:47,419
some repeatable patterns I need to

00:07:44,360 --> 00:07:49,219
repeat over and over sorry

00:07:47,419 --> 00:07:51,860
like in programming language I would

00:07:49,219 --> 00:07:54,020
extract that in function methods into a

00:07:51,860 --> 00:07:56,270
format with extract 13 modules and be

00:07:54,020 --> 00:07:59,810
able to share sure that in the open

00:07:56,270 --> 00:08:01,539
source and run ever again and again and

00:07:59,810 --> 00:08:05,360
again I can combine the different

00:08:01,539 --> 00:08:08,899
components together and cross-reference

00:08:05,360 --> 00:08:10,879
them so for example deploying kubernetes

00:08:08,899 --> 00:08:12,680
to service and reference it into

00:08:10,879 --> 00:08:16,210
application run time and so maven will

00:08:12,680 --> 00:08:19,159
illustrate that in the slides after that

00:08:16,210 --> 00:08:20,220
okay so let's try to get demo to get

00:08:19,159 --> 00:08:23,459
that more visual

00:08:20,220 --> 00:08:23,459
[Applause]

00:08:30,510 --> 00:08:38,520
and so that would be a recorded demo

00:08:33,880 --> 00:08:41,520
because I have fat fingers that works

00:08:38,520 --> 00:08:41,520
yes

00:08:47,700 --> 00:08:56,980
okay and maybe actually I should pose

00:08:50,710 --> 00:08:58,870
because yes so on this demo we'd start

00:08:56,980 --> 00:09:01,840
with the setup so tariffs download

00:08:58,870 --> 00:09:02,950
telephone and I'm the provider then

00:09:01,840 --> 00:09:07,120
we'll do the right face

00:09:02,950 --> 00:09:08,950
so configure IDs to get two nice

00:09:07,120 --> 00:09:12,750
features for most programming language

00:09:08,950 --> 00:09:15,220
yet and we will create a narrow word app

00:09:12,750 --> 00:09:17,680
that's using a service instance a

00:09:15,220 --> 00:09:20,620
bicycle service instance will reduce the

00:09:17,680 --> 00:09:22,990
change and then we do the apply and so

00:09:20,620 --> 00:09:32,020
there's a github repo you can use to

00:09:22,990 --> 00:09:32,980
just replay that at home okay so what

00:09:32,020 --> 00:09:35,440
did I do

00:09:32,980 --> 00:09:37,210
I just installed the provider so you can

00:09:35,440 --> 00:09:39,180
think of the provider let's mock most

00:09:37,210 --> 00:09:41,800
programming language there is a runtime

00:09:39,180 --> 00:09:43,870
and that is libraries so you can think

00:09:41,800 --> 00:09:48,130
of the reform as a runtime so you start

00:09:43,870 --> 00:09:51,040
the runtime on your on your system and

00:09:48,130 --> 00:09:52,900
then you send the library so in our case

00:09:51,040 --> 00:09:57,010
the library is the telephone provider of

00:09:52,900 --> 00:09:59,440
a quaternary and notice that in the 0.9

00:09:57,010 --> 00:10:02,230
version that we just released we need to

00:09:59,440 --> 00:10:04,690
rename the provider binary to telephone

00:10:02,230 --> 00:10:08,170
provider country which fix that into an

00:10:04,690 --> 00:10:13,030
expression so once I have this I'm able

00:10:08,170 --> 00:10:15,670
to run flat laundry specifications

00:10:13,030 --> 00:10:18,640
config files and I need to configure my

00:10:15,670 --> 00:10:21,910
ID so I got my preferred ideas in tdj

00:10:18,640 --> 00:10:24,940
and there is great support for telephone

00:10:21,910 --> 00:10:30,100
we've seen tax writing good completion

00:10:24,940 --> 00:10:32,890
navigation refactoring extract variables

00:10:30,100 --> 00:10:34,780
renames all that so it's all great to

00:10:32,890 --> 00:10:37,089
install that into IntelliJ you do need

00:10:34,780 --> 00:10:39,160
the small quark until we get official

00:10:37,089 --> 00:10:39,880
until the provider gets official into

00:10:39,160 --> 00:10:43,570
asha cop

00:10:39,880 --> 00:10:46,450
you need to install a jism that schema

00:10:43,570 --> 00:10:48,250
person with the diesel sorry in the

00:10:46,450 --> 00:10:50,830
schema directory so that's part of the

00:10:48,250 --> 00:10:53,230
repo and this will remove

00:10:50,830 --> 00:10:57,130
be removed in the in the future and then

00:10:53,230 --> 00:10:58,360
you restart the ID okay so here is the

00:10:57,130 --> 00:11:00,529
skeleton of the spec

00:10:58,360 --> 00:11:01,730
just to make it faster

00:11:00,529 --> 00:11:03,139
freak of life coding you have a

00:11:01,730 --> 00:11:05,149
different video we left coding if you

00:11:03,139 --> 00:11:06,350
want to go more in depth that's going to

00:11:05,149 --> 00:11:08,749
seem in six minutes

00:11:06,350 --> 00:11:10,819
and so we configure the library

00:11:08,749 --> 00:11:12,319
platonova library and you see that we

00:11:10,819 --> 00:11:14,839
have many different libraries available

00:11:12,319 --> 00:11:17,860
and you start seeing that compression in

00:11:14,839 --> 00:11:20,930
the in IntelliJ and we'll be using today

00:11:17,860 --> 00:11:23,209
pivotal web service so API don't run at

00:11:20,930 --> 00:11:26,420
pivotal are you with a user password

00:11:23,209 --> 00:11:28,129
which I have extracted into a specific

00:11:26,420 --> 00:11:32,749
file so that I don't click my

00:11:28,129 --> 00:11:36,670
credentials live so you see the syntax

00:11:32,749 --> 00:11:40,639
for referencing variable the dollar

00:11:36,670 --> 00:11:43,189
Samak with the braces vada chooses and

00:11:40,639 --> 00:11:45,769
then we gonna go ahead and create a

00:11:43,189 --> 00:11:49,279
space so let's call this space demo

00:11:45,769 --> 00:11:52,490
bezel and to create a space I need to

00:11:49,279 --> 00:11:54,439
specify an OGG so on PWS I'm not able to

00:11:52,490 --> 00:11:57,079
create odds with the CF July I need to

00:11:54,439 --> 00:11:59,180
use the UI so in this case I just

00:11:57,079 --> 00:12:01,550
flipped up an existing odd so see the

00:11:59,180 --> 00:12:03,529
syntax is the data source the data

00:12:01,550 --> 00:12:05,569
source is a concept in fed fund rate in

00:12:03,529 --> 00:12:07,550
our intro form to look up some existing

00:12:05,569 --> 00:12:10,490
resources so in this case we are looking

00:12:07,550 --> 00:12:15,350
at from reorganisation bytes name

00:12:10,490 --> 00:12:18,230
velji OGG and we get out of that with

00:12:15,350 --> 00:12:23,029
the dot ID and again complete cut

00:12:18,230 --> 00:12:24,740
compression into elegy so the space is

00:12:23,029 --> 00:12:27,139
create it would be created with that

00:12:24,740 --> 00:12:28,459
that's for requested state and added

00:12:27,139 --> 00:12:31,750
addition that we need to add some

00:12:28,459 --> 00:12:36,199
developers since PWAs doesn't support

00:12:31,750 --> 00:12:37,759
looking up users by in it by by name I

00:12:36,199 --> 00:12:43,399
have a walk around here

00:12:37,759 --> 00:12:45,949
I use a subsea lied to - look at my user

00:12:43,399 --> 00:12:49,009
quit and I specify user with directly in

00:12:45,949 --> 00:12:52,429
the list of the problems but at home on

00:12:49,009 --> 00:12:53,870
tram where you yo are meant to give the

00:12:52,429 --> 00:12:56,059
user ID

00:12:53,870 --> 00:12:59,089
permissions on the system you'd be able

00:12:56,059 --> 00:13:04,009
to to look up users directly using data

00:12:59,089 --> 00:13:06,679
source ok so we would be asking for

00:13:04,009 --> 00:13:08,269
space let's ask for service instance and

00:13:06,679 --> 00:13:10,189
here you see we've got confessions with

00:13:08,269 --> 00:13:12,420
different resources that are supported

00:13:10,189 --> 00:13:15,390
by the provider

00:13:12,420 --> 00:13:18,570
so they'll be my sequel service instance

00:13:15,390 --> 00:13:21,660
and I need to specify a service plan so

00:13:18,570 --> 00:13:23,970
I know there is a an elephant sequel in

00:13:21,660 --> 00:13:26,940
the PWS marketplace which is the label

00:13:23,970 --> 00:13:29,580
and I need to look up a service plan

00:13:26,940 --> 00:13:32,940
grid so there is a service plan that I

00:13:29,580 --> 00:13:34,350
know is free it's called total to make

00:13:32,940 --> 00:13:36,870
it brief I didn't show the CF

00:13:34,350 --> 00:13:40,530
marketplace command in the CLI which I

00:13:36,870 --> 00:13:42,480
looked up this service plan so that's

00:13:40,530 --> 00:13:44,730
how I get to service name and service

00:13:42,480 --> 00:13:47,430
plan and so from this I would be

00:13:44,730 --> 00:13:49,920
requesting a service instance of the

00:13:47,430 --> 00:13:52,830
elephant sequel service and the service

00:13:49,920 --> 00:13:55,200
plan total and so the data source

00:13:52,830 --> 00:13:58,080
service data source that we have on line

00:13:55,200 --> 00:14:00,750
36 is returning me the list of service

00:13:58,080 --> 00:14:03,630
plan indexed by service name so I'm

00:14:00,750 --> 00:14:09,060
getting the service plan grid specified

00:14:03,630 --> 00:14:13,440
on line 32 okay not I have posted a

00:14:09,060 --> 00:14:16,680
service instance I can request an app so

00:14:13,440 --> 00:14:19,860
my app I've ended my up in the in the

00:14:16,680 --> 00:14:21,990
github repo to make it easier so this

00:14:19,860 --> 00:14:25,950
app is from the acceptance test kotsoni

00:14:21,990 --> 00:14:28,440
acceptance test a simple ruby app hello

00:14:25,950 --> 00:14:31,590
world and we were to look at variables

00:14:28,440 --> 00:14:34,370
and to access an app I need to declare

00:14:31,590 --> 00:14:37,170
route so let's do that

00:14:34,370 --> 00:14:38,910
so we deploy again the cross-reference

00:14:37,170 --> 00:14:43,590
we cross-reference with so that's a

00:14:38,910 --> 00:14:46,260
route grid so let's define a route so a

00:14:43,590 --> 00:14:48,810
route is made of domain space and a

00:14:46,260 --> 00:14:50,520
hostname again I won't be creating a new

00:14:48,810 --> 00:14:52,380
domain here so I'm looking up an

00:14:50,520 --> 00:14:56,010
existing domain the default domain in

00:14:52,380 --> 00:14:57,600
the PWC efforts at i/o so I'm using a

00:14:56,010 --> 00:15:01,170
data source and I reference the data

00:14:57,600 --> 00:15:04,740
source in line 51 and then I reference

00:15:01,170 --> 00:15:06,750
the existing space as for question and I

00:15:04,740 --> 00:15:10,650
specify us name the rot you have to do

00:15:06,750 --> 00:15:12,840
and then my app would like to use the

00:15:10,650 --> 00:15:15,810
service instance I created so I specify

00:15:12,840 --> 00:15:18,540
service binding and yes you ramp to the

00:15:15,810 --> 00:15:20,580
app obviously so since it's valid in the

00:15:18,540 --> 00:15:22,650
repo and the tourm command will be

00:15:20,580 --> 00:15:25,649
executed in the current directory of

00:15:22,650 --> 00:15:28,709
this repo I use

00:15:25,649 --> 00:15:31,800
failure so service instance and let's

00:15:28,709 --> 00:15:33,990
look at the nice feature so as as

00:15:31,800 --> 00:15:38,220
programmer I expect to be able to do

00:15:33,990 --> 00:15:40,410
refactorings and I could so as if

00:15:38,220 --> 00:15:44,160
refactoring renaming I don't like this

00:15:40,410 --> 00:15:46,800
the right here demo would we name it out

00:15:44,160 --> 00:15:48,589
what about the cross-reference with a

00:15:46,800 --> 00:15:52,949
well break while they're being updated

00:15:48,589 --> 00:15:54,749
as I would expect so I feel comfortable

00:15:52,949 --> 00:15:59,579
as a developer I get my usual

00:15:54,749 --> 00:16:02,399
refactoring to go quality okay so we

00:15:59,579 --> 00:16:06,269
have a right face which is about to be

00:16:02,399 --> 00:16:08,429
complete we can go to the plan phase and

00:16:06,269 --> 00:16:10,589
actually rather than executing the

00:16:08,429 --> 00:16:13,499
tourism plan command I will directly

00:16:10,589 --> 00:16:16,939
execute the terraform apply command but

00:16:13,499 --> 00:16:20,269
which really prompt me for confirmation

00:16:16,939 --> 00:16:23,519
before applying so in the first part

00:16:20,269 --> 00:16:25,740
terraform is a refreshing state so it's

00:16:23,519 --> 00:16:28,199
looking up the data sources so as for

00:16:25,740 --> 00:16:32,160
looking up all default domain and

00:16:28,199 --> 00:16:36,870
service so doing that and then perform

00:16:32,160 --> 00:16:40,649
ISM showing me proposing me to review

00:16:36,870 --> 00:16:45,839
the resources will create so an apt to

00:16:40,649 --> 00:16:49,829
order app and then route and service

00:16:45,839 --> 00:16:51,629
instance and the space do are you

00:16:49,829 --> 00:16:56,089
willing to continue yes

00:16:51,629 --> 00:16:58,860
and so to affirm goes off and create

00:16:56,089 --> 00:17:01,860
resources in parallel preserving the

00:16:58,860 --> 00:17:04,620
dependencies across them so we see

00:17:01,860 --> 00:17:10,799
multi-threaded provisioning so service

00:17:04,620 --> 00:17:14,760
instance space route and app and it's

00:17:10,799 --> 00:17:17,760
going to take a minute to provision so

00:17:14,760 --> 00:17:20,130
to keep you entertained during this time

00:17:17,760 --> 00:17:22,829
what we're going to do is look at the

00:17:20,130 --> 00:17:25,169
dependency graph so tourism was a nice

00:17:22,829 --> 00:17:30,320
command they were from graph that we put

00:17:25,169 --> 00:17:33,770
some text to display the

00:17:30,320 --> 00:17:39,530
Tara from de Graaff so it's actually the

00:17:33,770 --> 00:17:42,950
text I pipe it into this and send it to

00:17:39,530 --> 00:17:44,600
Firefox so here we see your provider our

00:17:42,950 --> 00:17:48,230
library which is configured with user

00:17:44,600 --> 00:17:51,440
and password and then we see the data

00:17:48,230 --> 00:17:53,960
sources that we have configured to look

00:17:51,440 --> 00:17:57,290
up data into a trattoria to be dubious

00:17:53,960 --> 00:18:01,910
and then the resources that are relying

00:17:57,290 --> 00:18:05,510
on those data sources so space service

00:18:01,910 --> 00:18:07,670
instance route app so this way I can

00:18:05,510 --> 00:18:11,020
have a nice visual representation of the

00:18:07,670 --> 00:18:15,920
my dependency graph and I can preview

00:18:11,020 --> 00:18:19,220
dry rent when I make some changes okay

00:18:15,920 --> 00:18:19,720
so which is the wrap up be up and

00:18:19,220 --> 00:18:24,920
running

00:18:19,720 --> 00:18:27,440
let's check this ten second twenty one

00:18:24,920 --> 00:18:31,640
minute yes it's complete so let's look

00:18:27,440 --> 00:18:34,040
at whether it's hard I need to look up

00:18:31,640 --> 00:18:38,360
the route to access it so do you write

00:18:34,040 --> 00:18:45,440
your demo okay let's copy-paste that

00:18:38,360 --> 00:18:47,060
into a browser and see if it's up see it

00:18:45,440 --> 00:18:50,240
have the tiles I make a giraffe

00:18:47,060 --> 00:18:53,480
yes it's up good and so let's check

00:18:50,240 --> 00:18:57,440
valve valve eyeball to see for service

00:18:53,480 --> 00:19:00,410
is bound so that the cap services I can

00:18:57,440 --> 00:19:05,000
check whether this secret service is

00:19:00,410 --> 00:19:07,960
bound so yes I see that I have a secret

00:19:05,000 --> 00:19:13,250
service I've got two little seek war and

00:19:07,960 --> 00:19:14,810
login password oh and so obviously I D

00:19:13,250 --> 00:19:19,280
provision that so you don't need to

00:19:14,810 --> 00:19:24,790
recall the password okay and it's back

00:19:19,280 --> 00:19:24,790
to this payment visual speaker notes

00:19:33,190 --> 00:19:36,339
[Music]

00:19:49,889 --> 00:19:54,999
so yes this is if you want to take more

00:19:52,509 --> 00:19:56,980
time the the the slides are life and you

00:19:54,999 --> 00:20:00,820
have the longer if you want to to

00:19:56,980 --> 00:20:04,990
get more details on the cutting so okay

00:20:00,820 --> 00:20:08,499
let's get some more examples of how the

00:20:04,990 --> 00:20:12,820
use keys are helped by 200 I draw from

00:20:08,499 --> 00:20:14,799
sorry I mean use case for application

00:20:12,820 --> 00:20:17,559
security group and resolution segment so

00:20:14,799 --> 00:20:20,139
there would be a pretty simple stuff I

00:20:17,559 --> 00:20:23,080
need to specify some application

00:20:20,139 --> 00:20:25,690
security groups two of them and run them

00:20:23,080 --> 00:20:27,639
as default and staging so that they

00:20:25,690 --> 00:20:29,860
would be straight forward you will skip

00:20:27,639 --> 00:20:33,669
through the code another example of the

00:20:29,860 --> 00:20:36,119
isolation segment so I have a new

00:20:33,669 --> 00:20:38,980
solution segment that I call public and

00:20:36,119 --> 00:20:41,350
entitle a cloud foundry organization to

00:20:38,980 --> 00:20:43,590
the solution isolation segment and then

00:20:41,350 --> 00:20:47,019
a sign space Siouxsie Sioux Reservation

00:20:43,590 --> 00:20:51,369
segment so how does it look in terms of

00:20:47,019 --> 00:20:53,470
code very simple for security group

00:20:51,369 --> 00:20:57,070
nothing special and for iteration

00:20:53,470 --> 00:21:01,240
segment the same so the arc isolation

00:20:57,070 --> 00:21:03,429
segment the entertainment is referencing

00:21:01,240 --> 00:21:08,999
the org and then this space is reference

00:21:03,429 --> 00:21:11,799
the York and the is relation segment so

00:21:08,999 --> 00:21:14,200
nothing special about that when it comes

00:21:11,799 --> 00:21:16,450
interesting in when we are mixing

00:21:14,200 --> 00:21:19,570
different providers so this is a more

00:21:16,450 --> 00:21:24,129
complex example of an enemy use case for

00:21:19,570 --> 00:21:26,499
one of our team at range so they deploy

00:21:24,129 --> 00:21:29,019
an app you've seen Danny do demo with

00:21:26,499 --> 00:21:30,279
the root and the service instance mapped

00:21:29,019 --> 00:21:33,940
to the root which is protecting your

00:21:30,279 --> 00:21:37,090
roots so nothing special here and then

00:21:33,940 --> 00:21:40,269
you need to configure the app with some

00:21:37,090 --> 00:21:41,980
you a client and in order to create the

00:21:40,269 --> 00:21:44,619
UA clients I need to have

00:21:41,980 --> 00:21:47,379
dynamically a username and password so

00:21:44,619 --> 00:21:50,050
they use credible to generate user name

00:21:47,379 --> 00:21:53,230
and password stole that into fred up

00:21:50,050 --> 00:21:56,050
and and use that into a client so how

00:21:53,230 --> 00:21:58,240
does it look at very similar in the same

00:21:56,050 --> 00:22:01,450
way I was using Cloud Foundry provider

00:21:58,240 --> 00:22:03,580
for CF application runtime I can use

00:22:01,450 --> 00:22:06,460
credible user to provision the user

00:22:03,580 --> 00:22:09,070
specify using user land and then

00:22:06,460 --> 00:22:14,980
reference use refund that into a you a

00:22:09,070 --> 00:22:17,320
client resource that refrance username

00:22:14,980 --> 00:22:20,440
and password and then this you a client

00:22:17,320 --> 00:22:22,570
can be using my app in this example the

00:22:20,440 --> 00:22:25,030
app is using a user provided service and

00:22:22,570 --> 00:22:26,200
from edited adjacent but you can use

00:22:25,030 --> 00:22:29,620
flat environment vibe or something

00:22:26,200 --> 00:22:31,990
whatever and then it's worth noticing on

00:22:29,620 --> 00:22:34,690
the app that this app is deployed of

00:22:31,990 --> 00:22:36,910
github so the resources is fetch a

00:22:34,690 --> 00:22:40,230
fetching the app binaries directly of

00:22:36,910 --> 00:22:43,570
github from this zip so I don't have to

00:22:40,230 --> 00:22:48,010
download the apps using the script

00:22:43,570 --> 00:22:52,110
that's done by the provider ok another

00:22:48,010 --> 00:22:54,220
one means study and mini use case of

00:22:52,110 --> 00:22:57,250
mixing different provider in this case

00:22:54,220 --> 00:23:00,430
we are mixing an external sass that

00:22:57,250 --> 00:23:03,900
CloudFlare so some of you might know

00:23:00,430 --> 00:23:06,760
CloudFlare is is helping in this case I

00:23:03,900 --> 00:23:08,770
have some some users that I'm asking a

00:23:06,760 --> 00:23:11,830
new domain on my cloud foundry set up

00:23:08,770 --> 00:23:14,290
and the new domain needs to be protected

00:23:11,830 --> 00:23:16,510
by rockler it might be for caching

00:23:14,290 --> 00:23:19,180
reason the providing content delivery

00:23:16,510 --> 00:23:21,430
network it might be for rate limiting it

00:23:19,180 --> 00:23:24,130
might be funnel it takes and maybe for

00:23:21,430 --> 00:23:29,380
security as well trading very TLS

00:23:24,130 --> 00:23:32,500
certificate so I I was kept asking for

00:23:29,380 --> 00:23:34,510
faucets by my users so in this case I'm

00:23:32,500 --> 00:23:37,150
using two provider the cloud for

00:23:34,510 --> 00:23:40,140
provider which is official which I get a

00:23:37,150 --> 00:23:42,390
record and then I need to expose this

00:23:40,140 --> 00:23:46,180
DNS the fqdn

00:23:42,390 --> 00:23:48,280
and point it to microphone drill and

00:23:46,180 --> 00:23:51,040
expose that to users using a platform a

00:23:48,280 --> 00:23:55,420
domain and then the apps would be able

00:23:51,040 --> 00:23:56,830
to consume this domain and does the

00:23:55,420 --> 00:23:58,510
trick with and emptiest

00:23:56,830 --> 00:23:59,690
so here again we are mixing two

00:23:58,510 --> 00:24:03,800
different providers

00:23:59,690 --> 00:24:08,360
so the code looks very similar cut clear

00:24:03,800 --> 00:24:11,120
record I specify a cname and I have an

00:24:08,360 --> 00:24:12,560
alias to go to my cloud foundry and then

00:24:11,120 --> 00:24:15,680
curtain tree domain to expose that to

00:24:12,560 --> 00:24:18,470
users and then the Clutton tree root and

00:24:15,680 --> 00:24:20,090
this since I was asked repeatedly by

00:24:18,470 --> 00:24:22,550
users to create a new domain out of

00:24:20,090 --> 00:24:24,380
tatra automated that into a service

00:24:22,550 --> 00:24:26,240
broker so that the users instead of

00:24:24,380 --> 00:24:28,580
calling me they can just say create

00:24:26,240 --> 00:24:30,950
service broker create service instance

00:24:28,580 --> 00:24:33,740
jocular specify the name of the route

00:24:30,950 --> 00:24:39,200
they want so you might want to have a

00:24:33,740 --> 00:24:43,970
look at them as is just better and maybe

00:24:39,200 --> 00:24:49,160
would you present certainly stand close

00:24:43,970 --> 00:24:51,770
to the mic so thank you so we are

00:24:49,160 --> 00:24:55,430
actually we are kind of we might run

00:24:51,770 --> 00:24:56,930
over right so I I have a few slides to

00:24:55,430 --> 00:24:59,390
go through and then I'll hand it back to

00:24:56,930 --> 00:25:02,000
gear up to take it forward

00:24:59,390 --> 00:25:06,440
so right now you know I would briefly

00:25:02,000 --> 00:25:09,770
showcase some application use cases so

00:25:06,440 --> 00:25:12,110
the first use case describes a solution

00:25:09,770 --> 00:25:14,240
which we piloted did for a telco in the

00:25:12,110 --> 00:25:16,460
Middle East as you can see in this

00:25:14,240 --> 00:25:24,380
solution we had micro services landscape

00:25:16,460 --> 00:25:27,050
that were ups um excuse me while I get

00:25:24,380 --> 00:25:28,700
used to okay so you see this mine we had

00:25:27,050 --> 00:25:31,070
a landscape that actually was very well

00:25:28,700 --> 00:25:34,160
suited for CF CR and these services

00:25:31,070 --> 00:25:36,470
dependent on set of backing services

00:25:34,160 --> 00:25:39,740
that had an architecture that is most

00:25:36,470 --> 00:25:42,410
suited for you know kubernetes so so for

00:25:39,740 --> 00:25:44,810
this pilot we deployed a CFC our

00:25:42,410 --> 00:25:48,440
alongside the production CFA our

00:25:44,810 --> 00:25:51,260
environment right and then we used the

00:25:48,440 --> 00:25:53,600
kubernetes tariffs of provider to deploy

00:25:51,260 --> 00:25:56,540
these components over here alright and

00:25:53,600 --> 00:25:58,700
then we used actually these we're

00:25:56,540 --> 00:26:00,860
actually I kind of started working on

00:25:58,700 --> 00:26:02,240
one of the application and services side

00:26:00,860 --> 00:26:05,120
of the resource of the sea of Tara phone

00:26:02,240 --> 00:26:07,310
provider and we use that to kind of wire

00:26:05,120 --> 00:26:08,870
everything together so the paella like

00:26:07,310 --> 00:26:11,360
you saw previously from previous lights

00:26:08,870 --> 00:26:13,100
and these flights the power of the

00:26:11,360 --> 00:26:14,510
provider is realized when you

00:26:13,100 --> 00:26:17,150
to bring all these multiple providers

00:26:14,510 --> 00:26:22,280
together to bring a holistic solution

00:26:17,150 --> 00:26:24,140
together put together so the next one is

00:26:22,280 --> 00:26:26,600
what you see is the high level

00:26:24,140 --> 00:26:29,230
architecture the SAP Leonarda machine

00:26:26,600 --> 00:26:31,280
learning foundation very similar

00:26:29,230 --> 00:26:32,510
requirements to the previous one as well

00:26:31,280 --> 00:26:36,740
so you can see we'll see a general

00:26:32,510 --> 00:26:39,919
pattern in this application use cases so

00:26:36,740 --> 00:26:43,520
on the top top part you have you see a

00:26:39,919 --> 00:26:46,130
few CF based micro-services the computer

00:26:43,520 --> 00:26:48,559
there are some kubernetes based services

00:26:46,130 --> 00:26:53,150
mostly services which need GPU support

00:26:48,559 --> 00:26:55,190
and on the last you have services which

00:26:53,150 --> 00:26:58,309
are running mostly in the cloud like AWS

00:26:55,190 --> 00:27:00,289
3 so as you can see a sub needed to

00:26:58,309 --> 00:27:02,480
deploy micro service across three

00:27:00,289 --> 00:27:05,240
different landscapes and this is only

00:27:02,480 --> 00:27:07,850
possible with terraformers plugins so to

00:27:05,240 --> 00:27:10,360
do this they use the CF providers

00:27:07,850 --> 00:27:13,760
application service resources along with

00:27:10,360 --> 00:27:18,530
the resource from AWS and kubernetes to

00:27:13,760 --> 00:27:21,559
build all of this right as one spec just

00:27:18,530 --> 00:27:23,270
one thing as well we don't we really

00:27:21,559 --> 00:27:25,760
appreciate because I really appreciate

00:27:23,270 --> 00:27:27,860
subsequent rebuking to this because I

00:27:25,760 --> 00:27:30,350
originally divided the CF app and they

00:27:27,860 --> 00:27:31,520
actually extended that they they found a

00:27:30,350 --> 00:27:33,110
lot missing features which they have

00:27:31,520 --> 00:27:38,150
added to this and they actually making

00:27:33,110 --> 00:27:40,100
it much richer so it's me okay so this

00:27:38,150 --> 00:27:41,780
slide shows you the approach taken by

00:27:40,100 --> 00:27:45,070
branch to integrate terraform with

00:27:41,780 --> 00:27:47,900
compost pipelines so in this pipeline

00:27:45,070 --> 00:27:49,850
the orange juice is the terraform cost

00:27:47,900 --> 00:27:53,539
resource to execute the terraform

00:27:49,850 --> 00:27:56,210
workflow so the compost resource is it's

00:27:53,539 --> 00:27:58,610
this I mean we talk about resources but

00:27:56,210 --> 00:28:04,340
is this a is a con course terminology

00:27:58,610 --> 00:28:05,750
it's a way for executing the terraform

00:28:04,340 --> 00:28:08,150
workflow that's what the compost

00:28:05,750 --> 00:28:09,950
resources and this is actually done by

00:28:08,150 --> 00:28:11,600
another colleague of mine who set people

00:28:09,950 --> 00:28:12,980
to let me see can actually when you

00:28:11,600 --> 00:28:15,799
build a pipe as you can use this

00:28:12,980 --> 00:28:19,700
resource right and so if there are two

00:28:15,799 --> 00:28:21,690
steps of this pipeline the first step

00:28:19,700 --> 00:28:23,980
runs plan

00:28:21,690 --> 00:28:26,530
as the telephone plan to value the

00:28:23,980 --> 00:28:29,590
consistency of the state and the second

00:28:26,530 --> 00:28:31,270
step is it apply step which we run

00:28:29,590 --> 00:28:34,420
manually if the consistency check is

00:28:31,270 --> 00:28:36,340
good right once this is run the other

00:28:34,420 --> 00:28:38,620
state the configuration state is

00:28:36,340 --> 00:28:41,350
actually persisted to credit up using

00:28:38,620 --> 00:28:42,730
another plug-in is that you the beauty

00:28:41,350 --> 00:28:48,280
of terraform is everything is pluggable

00:28:42,730 --> 00:28:51,040
right so it's the Siraj developed HTTP

00:28:48,280 --> 00:28:54,700
back-end a terraform back-end HT

00:28:51,040 --> 00:28:57,160
back-end to store the terraform state

00:28:54,700 --> 00:29:00,190
incredible the reason for doing this is

00:28:57,160 --> 00:29:01,870
that terraform state usually maintains

00:29:00,190 --> 00:29:04,000
credentials in clear-text

00:29:01,870 --> 00:29:05,560
right so it is important that when you

00:29:04,000 --> 00:29:07,900
persist to the terraform state it goes

00:29:05,560 --> 00:29:10,060
to encrypted back-end right so you will

00:29:07,900 --> 00:29:11,020
see SAP does it a little bit differently

00:29:10,060 --> 00:29:15,090
they use an existing

00:29:11,020 --> 00:29:16,300
terraform back-end to actually put into

00:29:15,090 --> 00:29:17,410
vault

00:29:16,300 --> 00:29:20,650
so you will see that in the next slide

00:29:17,410 --> 00:29:22,810
so in the next slide so this is a

00:29:20,650 --> 00:29:25,030
Jenkins pipeline so they use Jenkins

00:29:22,810 --> 00:29:27,400
this is how the SAP machine learning

00:29:25,030 --> 00:29:29,950
foundation uses terraform to deploy new

00:29:27,400 --> 00:29:32,380
releases to that to the architecture

00:29:29,950 --> 00:29:34,870
that I showed you previously there are

00:29:32,380 --> 00:29:38,500
four steps of the pipeline the first one

00:29:34,870 --> 00:29:41,730
is you get credentials from a she-goat

00:29:38,500 --> 00:29:43,930
volt and then there's an apply step

00:29:41,730 --> 00:29:46,360
terraform these were terraformed

00:29:43,930 --> 00:29:48,280
discovers which applications have been

00:29:46,360 --> 00:29:50,370
updated and then it deploys them it also

00:29:48,280 --> 00:29:53,260
configures any required dependencies

00:29:50,370 --> 00:29:55,240
then they run aliveness and integration

00:29:53,260 --> 00:29:56,890
tests against the functional services to

00:29:55,240 --> 00:29:59,740
see whether the integrity of the

00:29:56,890 --> 00:30:05,410
landscape has been kept and in the last

00:29:59,740 --> 00:30:09,550
step they saved the state to vote right

00:30:05,410 --> 00:30:11,440
again like we arranged uses credible to

00:30:09,550 --> 00:30:14,740
say the state they use what right it's

00:30:11,440 --> 00:30:16,210
important I think something for those of

00:30:14,740 --> 00:30:18,190
you start adapting start adopting

00:30:16,210 --> 00:30:20,020
terraform just keep this in mind like

00:30:18,190 --> 00:30:22,890
you know always keep your state in an

00:30:20,020 --> 00:30:25,210
encrypted back-end because of this

00:30:22,890 --> 00:30:27,280
because it maintains credentials in the

00:30:25,210 --> 00:30:29,080
clear so now I will hand it back to gear

00:30:27,280 --> 00:30:30,700
who will actually talk about the past

00:30:29,080 --> 00:30:31,120
and current state of the development of

00:30:30,700 --> 00:30:36,580
the sea

00:30:31,120 --> 00:30:38,410
provide thank you all right so yes

00:30:36,580 --> 00:30:41,560
what's under the hood and what's history

00:30:38,410 --> 00:30:44,290
but the provider how did we convert did

00:30:41,560 --> 00:30:47,020
we how do we do community convergence

00:30:44,290 --> 00:30:51,730
and the deal details of each provider

00:30:47,020 --> 00:30:53,590
and backlog so originally arranged an

00:30:51,730 --> 00:30:57,430
archer and the room started working on

00:30:53,590 --> 00:31:00,850
the telephone provider in 217 and mavin

00:30:57,430 --> 00:31:03,010
I think you studied a similar effort in

00:31:00,850 --> 00:31:04,390
parallel and we actually we met in bars

00:31:03,010 --> 00:31:06,610
all last year and we realized that we

00:31:04,390 --> 00:31:10,900
were walking on same same stuff so I say

00:31:06,610 --> 00:31:15,610
well let's melt we'd be stronger

00:31:10,900 --> 00:31:18,280
together and then the ACP team came

00:31:15,610 --> 00:31:20,290
around and say well we can make some use

00:31:18,280 --> 00:31:22,090
of that and we can improve it so that

00:31:20,290 --> 00:31:25,560
was awesome contribution but this is the

00:31:22,090 --> 00:31:28,930
T team so the team of a lot you starting

00:31:25,560 --> 00:31:31,930
get together and go in the product mode

00:31:28,930 --> 00:31:35,230
and so we are close now to be official

00:31:31,930 --> 00:31:38,200
work with the Asha cop team so that we

00:31:35,230 --> 00:31:40,480
become an official provider that would

00:31:38,200 --> 00:31:42,880
end up on the Asha cop web page and

00:31:40,480 --> 00:31:47,470
releases so we hope to get that in the

00:31:42,880 --> 00:31:48,040
coming weeks the telephone provider cred

00:31:47,470 --> 00:31:51,130
up

00:31:48,040 --> 00:31:53,110
it is introduction at a range but it's

00:31:51,130 --> 00:31:55,330
not official where maybe we'd planned

00:31:53,110 --> 00:31:58,510
for official a shake-up submission in

00:31:55,330 --> 00:32:02,350
the future the tram provider UA is also

00:31:58,510 --> 00:32:04,870
used in production at a range but it's

00:32:02,350 --> 00:32:07,780
not your complete yet there's many stuff

00:32:04,870 --> 00:32:09,550
missing maybe with the new goal and you

00:32:07,780 --> 00:32:13,660
a client that's out there now it's

00:32:09,550 --> 00:32:15,670
become become much easier and the trams

00:32:13,660 --> 00:32:17,410
echo back and fostering credentials is

00:32:15,670 --> 00:32:21,520
still in beta mode and we don't yet

00:32:17,410 --> 00:32:23,020
using production division on the

00:32:21,520 --> 00:32:25,240
container runtime

00:32:23,020 --> 00:32:29,470
side we are using the official

00:32:25,240 --> 00:32:32,020
kubernetes provider for pods and that's

00:32:29,470 --> 00:32:35,050
worth noting as well the hand shot

00:32:32,020 --> 00:32:37,720
DM provider which is not official but

00:32:35,050 --> 00:32:40,660
looks very promising as well and we need

00:32:37,720 --> 00:32:41,710
to better work with with this with these

00:32:40,660 --> 00:32:44,640
people

00:32:41,710 --> 00:32:47,200
so let's have a look at backlog

00:32:44,640 --> 00:32:51,280
sometimes of features we are still

00:32:47,200 --> 00:32:53,980
lacking the zero done time support and

00:32:51,280 --> 00:32:56,470
blue greens report so some of the use

00:32:53,980 --> 00:33:00,220
case will be limited by that network

00:32:56,470 --> 00:33:04,900
policies indeed there yet and we don't

00:33:00,220 --> 00:33:07,090
yet support the v3 API in terms of

00:33:04,900 --> 00:33:10,030
challenge that we had one large

00:33:07,090 --> 00:33:13,390
challenge was to be able to reuse the

00:33:10,030 --> 00:33:15,580
CFC like Galang library Golan could to

00:33:13,390 --> 00:33:17,890
interact with the crowd control API this

00:33:15,580 --> 00:33:20,140
is Shiva is quite complex as a complex

00:33:17,890 --> 00:33:22,240
workflows and it's very largely thought

00:33:20,140 --> 00:33:25,120
to be able to maintain that so we'd like

00:33:22,240 --> 00:33:28,660
to be able to leverage what the CFC

00:33:25,120 --> 00:33:30,880
light team is doing and so we'll it's

00:33:28,660 --> 00:33:33,910
very amazing to see this team extracting

00:33:30,880 --> 00:33:37,450
this as a library and as well help us do

00:33:33,910 --> 00:33:39,070
the migration from v2 to v3 another

00:33:37,450 --> 00:33:41,320
challenge that we had is around the

00:33:39,070 --> 00:33:43,240
acceptance test environment so mavens

00:33:41,320 --> 00:33:45,790
been donating his time and resources to

00:33:43,240 --> 00:33:49,870
maintain an acceptance environment out

00:33:45,790 --> 00:33:52,300
of the pivotal field labs environment

00:33:49,870 --> 00:33:55,960
but it's been a lot of work and it's not

00:33:52,300 --> 00:33:57,730
hot it's not imperative either stream so

00:33:55,960 --> 00:33:58,960
that'd be much easier if we could get

00:33:57,730 --> 00:34:01,240
some help from the cloud foundry

00:33:58,960 --> 00:34:03,840
foundation with the integration team to

00:34:01,240 --> 00:34:06,370
get a stable recent aggression

00:34:03,840 --> 00:34:08,110
acceptance test environment to run

00:34:06,370 --> 00:34:11,080
automated tests and to validate in

00:34:08,110 --> 00:34:13,960
incoming pull requests some of the

00:34:11,080 --> 00:34:15,480
future work you've seen that the Cloud

00:34:13,960 --> 00:34:18,190
Foundry app supports the nodding

00:34:15,480 --> 00:34:20,170
binaries out of the github we'd like to

00:34:18,190 --> 00:34:24,000
get that into a different provider so

00:34:20,170 --> 00:34:27,940
that he can benefit to other resources

00:34:24,000 --> 00:34:29,830
and maven some get some crazy ideas but

00:34:27,940 --> 00:34:31,840
a birth director

00:34:29,830 --> 00:34:33,730
provider that you might be able to share

00:34:31,840 --> 00:34:38,410
after because we are running a bit of

00:34:33,730 --> 00:34:40,540
time so to close we would like to get

00:34:38,410 --> 00:34:43,720
suggestions comments from the community

00:34:40,540 --> 00:34:47,530
and if you feel like a contribution

00:34:43,720 --> 00:34:49,180
I very welcome and I think we're out of

00:34:47,530 --> 00:34:52,060
time but we can take questions

00:34:49,180 --> 00:34:54,109
Mattie after the other side you can

00:34:52,060 --> 00:34:56,539
reach us on slack

00:34:54,109 --> 00:35:00,400
we have a door from China on slack and

00:34:56,539 --> 00:35:00,400
thank you very much for your time

00:35:02,450 --> 00:35:06,270

YouTube URL: https://www.youtube.com/watch?v=JonQqWHofms


