Title: A New Go-Based CLI for Managing UAA - Jennifer Hamon, Pivotal
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	A New Go-Based CLI for Managing UAA - Jennifer Hamon, Pivotal

Join UAA Anchor Jennifer Hamon to learn how you can get up-and-running with the new go-based CLI for UAA. Platform operators and application developers of all levels will leave this talk knowing how manage UAA resources including Users, Groups, Memberships, Identity Zones, and Identity Providers. We will also learn to create and test OAuth2 client configurations and discuss common troubleshooting scenarios. Long-suffering users of the old Ruby-based uaac will be excited to see how we've incorporated user feedback and design thinking into this new cross-platform tool.

https://cfseu18.sched.com/event/GATs/a-new-go-based-cli-for-managing-uaa-jennifer-hamon-pivotal
Captions: 
	00:00:00,060 --> 00:00:04,340
hello thank you all for coming

00:00:04,770 --> 00:00:09,090
my name is Jennifer Hammond and I've

00:00:07,049 --> 00:00:12,179
been an engineer at pivotal for about

00:00:09,090 --> 00:00:14,250
four years I spent about the last two of

00:00:12,179 --> 00:00:15,960
those years working on the UAA which for

00:00:14,250 --> 00:00:17,850
anyone who doesn't know is the identity

00:00:15,960 --> 00:00:20,910
and authorization component within cloud

00:00:17,850 --> 00:00:22,490
foundry and as part of that work I've

00:00:20,910 --> 00:00:25,080
really had a lot of opportunities to

00:00:22,490 --> 00:00:26,460
connect with other teams that are using

00:00:25,080 --> 00:00:28,109
UAA

00:00:26,460 --> 00:00:30,240
other release authors trying to

00:00:28,109 --> 00:00:33,590
integrate different pieces of component

00:00:30,240 --> 00:00:35,670
as well as working with customers and

00:00:33,590 --> 00:00:38,809
learning a lot about where their pain

00:00:35,670 --> 00:00:41,610
points are with the UAA over time

00:00:38,809 --> 00:00:42,930
certain patterns emerge and after you

00:00:41,610 --> 00:00:44,430
could ask the same question enough times

00:00:42,930 --> 00:00:48,870
you realized okay this is a usability

00:00:44,430 --> 00:00:52,340
problem the existing CLI out there in

00:00:48,870 --> 00:00:56,340
the wild is as many of these sort of

00:00:52,340 --> 00:00:57,690
problems and so as a result I decided at

00:00:56,340 --> 00:01:00,539
some point that I really wanted to try

00:00:57,690 --> 00:01:02,129
to rewrite the CLI and go lang and

00:01:00,539 --> 00:01:04,650
that's the work I'm going to be talking

00:01:02,129 --> 00:01:07,229
to you about today this started as a

00:01:04,650 --> 00:01:09,990
side project and kind of migrated into a

00:01:07,229 --> 00:01:13,369
real thing that's being supported by the

00:01:09,990 --> 00:01:15,150
current UA a team we've had

00:01:13,369 --> 00:01:17,640
collaboration from people at several

00:01:15,150 --> 00:01:20,369
companies as well as people from three

00:01:17,640 --> 00:01:23,130
different teams at pivotal I want to

00:01:20,369 --> 00:01:25,759
give a special shout out to Joshua carp

00:01:23,130 --> 00:01:29,250
from 18f he gave our very first

00:01:25,759 --> 00:01:30,930
unsolicited pull request and for me that

00:01:29,250 --> 00:01:32,640
was a real milestone because it sort of

00:01:30,930 --> 00:01:33,659
validated in my mind like okay this is

00:01:32,640 --> 00:01:35,520
something people are interested in they

00:01:33,659 --> 00:01:39,000
think is valuable they're gonna work on

00:01:35,520 --> 00:01:42,950
it too and in addition to that gotten

00:01:39,000 --> 00:01:48,630
some really great going expertise from

00:01:42,950 --> 00:01:50,790
members of the P CFS team and yeah just

00:01:48,630 --> 00:01:53,759
I can't tell you it's been a real

00:01:50,790 --> 00:01:57,329
pleasure to work with this group so

00:01:53,759 --> 00:01:58,469
today I want to be first I want to my

00:01:57,329 --> 00:02:00,119
goal here is for this to be accessible

00:01:58,469 --> 00:02:03,180
to everyone I don't know what any of

00:02:00,119 --> 00:02:04,979
your backgrounds are but often I go to

00:02:03,180 --> 00:02:06,719
these identity related talks and they're

00:02:04,979 --> 00:02:08,610
very like if you're not deep in the

00:02:06,719 --> 00:02:10,619
weeds of how all this stuff works you

00:02:08,610 --> 00:02:12,390
don't get a lot out of it and I don't

00:02:10,619 --> 00:02:13,300
want that to be this I don't want this

00:02:12,390 --> 00:02:15,190
to be that kind of talk

00:02:13,300 --> 00:02:17,530
so I'm gonna first say a little bit

00:02:15,190 --> 00:02:20,230
about UAA's role in the platform just so

00:02:17,530 --> 00:02:21,460
we all have a shared understanding then

00:02:20,230 --> 00:02:24,340
go into some of the problems with the

00:02:21,460 --> 00:02:26,530
Ruby based CLI that we've had and how

00:02:24,340 --> 00:02:29,080
that's informed some decisions for the

00:02:26,530 --> 00:02:31,060
new CLI going forward I'm gonna show a

00:02:29,080 --> 00:02:32,980
bit about what those interactions look

00:02:31,060 --> 00:02:37,030
like today and then say a few words

00:02:32,980 --> 00:02:39,010
about what's ahead so but first I want

00:02:37,030 --> 00:02:42,010
to tell a little story so I flew in

00:02:39,010 --> 00:02:44,020
yesterday from California and in the

00:02:42,010 --> 00:02:45,310
u.s. where I'm from all the electrical

00:02:44,020 --> 00:02:47,170
outlets look like this thing on the

00:02:45,310 --> 00:02:49,780
right I always thought they kind of look

00:02:47,170 --> 00:02:52,150
like sad faces but I'm not I don't know

00:02:49,780 --> 00:02:54,370
if maybe that's just me so I was in my

00:02:52,150 --> 00:02:56,370
hotel room and sort of confronted by

00:02:54,370 --> 00:02:59,620
what you see on the left which is this

00:02:56,370 --> 00:03:01,510
very geometrically interesting Swedish

00:02:59,620 --> 00:03:04,360
electrical out that Swedish excuse me

00:03:01,510 --> 00:03:06,430
Swiss electrical outlet and I was

00:03:04,360 --> 00:03:08,260
thinking oh my gosh like how am I gonna

00:03:06,430 --> 00:03:11,350
practice this presentation I can't plug

00:03:08,260 --> 00:03:12,580
in my laptop this is a problem and I

00:03:11,350 --> 00:03:15,190
hadn't planned ahead to some extent I

00:03:12,580 --> 00:03:16,450
knew that in Europe and around the world

00:03:15,190 --> 00:03:18,459
there's different standards and so I'd

00:03:16,450 --> 00:03:20,080
brought some adapters turns out none of

00:03:18,459 --> 00:03:22,450
the ones I brought we're gonna work for

00:03:20,080 --> 00:03:24,130
this type of outlet so I went down to

00:03:22,450 --> 00:03:26,020
the front desk and I said please help me

00:03:24,130 --> 00:03:27,760
I'm a stupid American and I can't charge

00:03:26,020 --> 00:03:29,440
my electronics and of course this

00:03:27,760 --> 00:03:31,420
happens a lot in hotels so they had this

00:03:29,440 --> 00:03:33,340
universal adapter and I thought okay

00:03:31,420 --> 00:03:35,830
great like I'm all good now

00:03:33,340 --> 00:03:37,810
it's gonna be fine but of course I got

00:03:35,830 --> 00:03:39,040
it back to my room and I realized I

00:03:37,810 --> 00:03:40,600
actually have some additional

00:03:39,040 --> 00:03:42,520
requirements which is that I not only

00:03:40,600 --> 00:03:45,160
needed something to plug an American

00:03:42,520 --> 00:03:48,220
plug into it needed to accommodate this

00:03:45,160 --> 00:03:51,130
rather large charging brick on my Mac

00:03:48,220 --> 00:03:53,530
charger and so that was like kind of a

00:03:51,130 --> 00:03:55,209
setback I realized that using the other

00:03:53,530 --> 00:03:57,610
adapters I had I could stack them

00:03:55,209 --> 00:03:58,959
together and build this like a terrible

00:03:57,610 --> 00:04:01,660
thing that sticks out about a foot from

00:03:58,959 --> 00:04:03,000
the wall and that was working for a

00:04:01,660 --> 00:04:05,680
little while the plug kept falling out

00:04:03,000 --> 00:04:09,370
and it also just seemed like probably

00:04:05,680 --> 00:04:11,709
not good for the outlet so I made some

00:04:09,370 --> 00:04:13,989
modifications I realized okay I have

00:04:11,709 --> 00:04:15,790
these nail clippers nail trimmers and I

00:04:13,989 --> 00:04:20,380
was able to actually modify this adapter

00:04:15,790 --> 00:04:22,990
to accept my electrical plug and you

00:04:20,380 --> 00:04:24,850
know move forward and so the lesson that

00:04:22,990 --> 00:04:26,450
I wanted to take from this the reason

00:04:24,850 --> 00:04:28,460
I'm talking about it now is that

00:04:26,450 --> 00:04:30,290
adapters are extremely valuable like

00:04:28,460 --> 00:04:31,640
without this I wouldn't be able to to

00:04:30,290 --> 00:04:34,340
run through these slides in the privacy

00:04:31,640 --> 00:04:37,000
of my hotel room but also fairly complex

00:04:34,340 --> 00:04:39,680
and they need to be working just so and

00:04:37,000 --> 00:04:41,750
that's the the problem I guess the value

00:04:39,680 --> 00:04:43,010
proposition of the UI a within Cloud

00:04:41,750 --> 00:04:45,740
Foundry is that it's acting as an

00:04:43,010 --> 00:04:48,560
identity adapter and in a world with

00:04:45,740 --> 00:04:49,940
many competing standards all solving the

00:04:48,560 --> 00:04:52,760
same or similar problems in slightly

00:04:49,940 --> 00:04:55,460
different ways the UAA is wanting to be

00:04:52,760 --> 00:04:56,840
that super adapter that will let you

00:04:55,460 --> 00:04:59,840
bring all of your identity information

00:04:56,840 --> 00:05:02,930
no matter the source and plug it

00:04:59,840 --> 00:05:04,760
directly into the platform so I thought

00:05:02,930 --> 00:05:07,010
this is a good visual metaphor of the

00:05:04,760 --> 00:05:10,520
many different identity standards versus

00:05:07,010 --> 00:05:12,700
the idea super adapter that you want and

00:05:10,520 --> 00:05:14,870
so here's the cartoon of Cloud Foundry

00:05:12,700 --> 00:05:16,880
the idea here is that it doesn't matter

00:05:14,870 --> 00:05:18,830
it shouldn't matter for companies where

00:05:16,880 --> 00:05:21,290
your user informations living it could

00:05:18,830 --> 00:05:23,060
be in an LDAP server a sam'l server

00:05:21,290 --> 00:05:25,700
maybe a cloud identity service that

00:05:23,060 --> 00:05:27,230
you're using and as long as those things

00:05:25,700 --> 00:05:28,880
are exposing some kind of

00:05:27,230 --> 00:05:30,230
standards-based interface you should be

00:05:28,880 --> 00:05:33,740
able to plug those directly in to you

00:05:30,230 --> 00:05:34,940
AAA and have users logging in and

00:05:33,740 --> 00:05:37,450
pushing apps and doing all the things

00:05:34,940 --> 00:05:39,440
that we like to do with Cloud Foundry

00:05:37,450 --> 00:05:40,790
everything within the platform and I've

00:05:39,440 --> 00:05:43,550
only shown a few of the components of

00:05:40,790 --> 00:05:45,740
course you know they interact with OAuth

00:05:43,550 --> 00:05:46,940
only which is an identity standard we

00:05:45,740 --> 00:05:51,170
have for solving the problem of

00:05:46,940 --> 00:05:52,310
delegated authorization and so this is a

00:05:51,170 --> 00:05:55,130
simple-looking diagram but it's

00:05:52,310 --> 00:05:57,650
providing a huge value and as a result

00:05:55,130 --> 00:05:59,630
you see you a is all over and are

00:05:57,650 --> 00:06:00,580
various different products in our

00:05:59,630 --> 00:06:03,230
ecosystem

00:06:00,580 --> 00:06:05,390
every box director has the UAE inside of

00:06:03,230 --> 00:06:08,090
it every Cloud Foundry deployment has

00:06:05,390 --> 00:06:09,830
multiple UAA's inside of it many people

00:06:08,090 --> 00:06:13,730
are running concourse and authenticating

00:06:09,830 --> 00:06:16,430
using UAE and in addition like the UA is

00:06:13,730 --> 00:06:18,500
baked into numerous proprietary products

00:06:16,430 --> 00:06:20,330
pivitol x' distributions that i've shown

00:06:18,500 --> 00:06:21,350
here and just in a little while that

00:06:20,330 --> 00:06:22,370
I've been at this conference I've talked

00:06:21,350 --> 00:06:24,440
to several other people about other

00:06:22,370 --> 00:06:27,350
products that are also using the UA

00:06:24,440 --> 00:06:30,230
because this functionality is very

00:06:27,350 --> 00:06:33,290
valuable another thing that we see is

00:06:30,230 --> 00:06:35,630
like most customers of any size are

00:06:33,290 --> 00:06:38,289
running multiple foundations like they

00:06:35,630 --> 00:06:39,699
have many deployments of Cloud Foundry

00:06:38,289 --> 00:06:43,180
this is where the story gets kind of

00:06:39,699 --> 00:06:44,889
gross where you know this integration

00:06:43,180 --> 00:06:49,599
between your external identity providers

00:06:44,889 --> 00:06:51,759
and and the UA gets pretty complicated

00:06:49,599 --> 00:06:53,889
as you add more and more things to this

00:06:51,759 --> 00:06:55,809
picture I've only shown three here but

00:06:53,889 --> 00:06:58,869
it's not uncommon to hear of customers

00:06:55,809 --> 00:07:01,240
running ten 20 50 100 Cloud Foundry

00:06:58,869 --> 00:07:04,210
deployments and managing all this

00:07:01,240 --> 00:07:05,889
configuration is quite painful and so

00:07:04,210 --> 00:07:08,979
the image I had in my mind is I was

00:07:05,889 --> 00:07:10,629
putting together these slides was like

00:07:08,979 --> 00:07:12,099
at Christmastime when you pull out the

00:07:10,629 --> 00:07:15,069
lights and because you want to create

00:07:12,099 --> 00:07:16,509
this magical an atmosphere of the

00:07:15,069 --> 00:07:19,749
holidays and but first you have to

00:07:16,509 --> 00:07:22,270
untangle this gnarly mess of you know

00:07:19,749 --> 00:07:24,249
tangled up lights it's just not quite

00:07:22,270 --> 00:07:26,919
delivering on the promise of what you

00:07:24,249 --> 00:07:28,059
really want to get out of it and so if

00:07:26,919 --> 00:07:30,580
we're gonna have a really scalable

00:07:28,059 --> 00:07:32,919
platform we also need scalable

00:07:30,580 --> 00:07:35,860
administration tools because what we

00:07:32,919 --> 00:07:37,629
have already today is some tools that

00:07:35,860 --> 00:07:40,629
are fairly confusing for integrators and

00:07:37,629 --> 00:07:42,639
operators it's like the Sun has a

00:07:40,629 --> 00:07:45,909
bottleneck for them in managing these

00:07:42,639 --> 00:07:49,089
environments it's also comes back as

00:07:45,909 --> 00:07:51,069
like a tax on the development team you

00:07:49,089 --> 00:07:54,219
know that's where I feel the pain if I'm

00:07:51,069 --> 00:07:56,169
on one of these teams if I'm on UAA and

00:07:54,219 --> 00:07:59,409
I'm having to divert a lot of my

00:07:56,169 --> 00:08:00,459
attention to helping people manage and

00:07:59,409 --> 00:08:03,069
configure these environments because

00:08:00,459 --> 00:08:04,419
they can't you know their blackness I'm

00:08:03,069 --> 00:08:07,209
understanding or the tools that we have

00:08:04,419 --> 00:08:08,649
aren't meeting their needs and the third

00:08:07,209 --> 00:08:09,939
and probably most important thing is

00:08:08,649 --> 00:08:12,430
that if there's opportunity for

00:08:09,939 --> 00:08:14,459
confusion or things take a long time to

00:08:12,430 --> 00:08:16,749
update your configurations and things

00:08:14,459 --> 00:08:19,569
there's an opportunity to make mistakes

00:08:16,749 --> 00:08:21,249
I would say and this is not an area

00:08:19,569 --> 00:08:23,199
where you want to have leave yourself

00:08:21,249 --> 00:08:24,399
open to making mistakes because there's

00:08:23,199 --> 00:08:28,959
a little you know large security

00:08:24,399 --> 00:08:29,889
application of doing so so next I want

00:08:28,959 --> 00:08:32,550
to talk about some of the things that

00:08:29,889 --> 00:08:35,139
you know observations that I made

00:08:32,550 --> 00:08:36,610
learnings I would say from my experience

00:08:35,139 --> 00:08:40,509
of trying to help people use the

00:08:36,610 --> 00:08:42,550
existing Ruby CLI and so the number one

00:08:40,509 --> 00:08:46,630
thing is that install experience matters

00:08:42,550 --> 00:08:48,850
today to get the Ruby CLI sometimes you

00:08:46,630 --> 00:08:50,769
tell people oh just install this gem gem

00:08:48,850 --> 00:08:51,820
install CFU AAC and that's if you're a

00:08:50,769 --> 00:08:55,000
ruby developer that's like

00:08:51,820 --> 00:08:58,900
all right great we're all good but most

00:08:55,000 --> 00:09:01,150
people are not Ruby developers and we

00:08:58,900 --> 00:09:03,310
see that you know actually in the real

00:09:01,150 --> 00:09:04,780
world people sometimes need to do these

00:09:03,310 --> 00:09:06,760
things in aircraft environments

00:09:04,780 --> 00:09:08,140
sometimes they're operating on a Windows

00:09:06,760 --> 00:09:10,750
platform where it's difficult to get

00:09:08,140 --> 00:09:12,430
Ruby installed and you know even frankly

00:09:10,750 --> 00:09:13,660
if they're not under any of those

00:09:12,430 --> 00:09:16,390
constraints if you're not a ruby

00:09:13,660 --> 00:09:18,010
developer it's kind of like it's just

00:09:16,390 --> 00:09:19,510
not reasonable to tell someone first

00:09:18,010 --> 00:09:20,800
install a development environment that

00:09:19,510 --> 00:09:26,220
you don't care about in order to use

00:09:20,800 --> 00:09:28,780
this tool yeah and so what we've seen

00:09:26,220 --> 00:09:31,240
across many different projects is a

00:09:28,780 --> 00:09:32,530
shift towards using going for their CL

00:09:31,240 --> 00:09:35,050
eyes this is what you see with docker

00:09:32,530 --> 00:09:37,240
you see this with Bosch I could name a

00:09:35,050 --> 00:09:39,610
bunch of others and it simplifies this

00:09:37,240 --> 00:09:42,340
process to simply download a binary and

00:09:39,610 --> 00:09:45,900
run it and so that sort of was guiding

00:09:42,340 --> 00:09:48,550
our choice because we're sort of

00:09:45,900 --> 00:09:50,260
achieving this benefit the go-going has

00:09:48,550 --> 00:09:53,590
made it very easy to compiled binaries

00:09:50,260 --> 00:09:55,360
for different platforms and also we're

00:09:53,590 --> 00:09:56,860
able to leverage CLI frameworks because

00:09:55,360 --> 00:09:58,150
so many people are writing C lies and go

00:09:56,860 --> 00:10:00,490
now there's actually really great

00:09:58,150 --> 00:10:01,570
tooling around doing that so we don't

00:10:00,490 --> 00:10:04,570
have to reinvent the wheel and how do

00:10:01,570 --> 00:10:08,920
you parse command-line options things of

00:10:04,570 --> 00:10:10,150
that nature so it's pretty easy the next

00:10:08,920 --> 00:10:11,830
thing I sort of observed is that like

00:10:10,150 --> 00:10:13,930
ecosystems tend to seem to guide

00:10:11,830 --> 00:10:16,840
people's expectations for how to use a

00:10:13,930 --> 00:10:18,610
CLI I can't tell you the number of times

00:10:16,840 --> 00:10:20,230
I've had people say ok I found these

00:10:18,610 --> 00:10:23,860
this documentation that told me to do

00:10:20,230 --> 00:10:25,750
this command UAC token client get but

00:10:23,860 --> 00:10:26,770
what does that mean you know and like

00:10:25,750 --> 00:10:28,770
the name of the command does that

00:10:26,770 --> 00:10:31,990
communicate any information about it

00:10:28,770 --> 00:10:34,690
they just like they're very confused

00:10:31,990 --> 00:10:36,490
so like cosmetically right away one

00:10:34,690 --> 00:10:38,920
thing that stands out is that we're not

00:10:36,490 --> 00:10:40,600
even naming this CLI and the way other

00:10:38,920 --> 00:10:42,790
projects this ecosystem we're doing so

00:10:40,600 --> 00:10:45,640
so if the Box CLI is called bash and the

00:10:42,790 --> 00:10:48,010
CF CLI is called CF credit CL is called

00:10:45,640 --> 00:10:51,220
cred of the naturally the UAA CLI should

00:10:48,010 --> 00:10:52,660
be called at UAA and so that's what

00:10:51,220 --> 00:10:55,570
you'll see now if you go check out the

00:10:52,660 --> 00:10:57,100
going CLI it's called UA and this gives

00:10:55,570 --> 00:10:59,290
it an additional benefit that there

00:10:57,100 --> 00:11:01,690
won't be any confusion as we update

00:10:59,290 --> 00:11:03,830
documentation you'll see documentation

00:11:01,690 --> 00:11:06,020
using this new CLI and it'll have

00:11:03,830 --> 00:11:07,550
different name I think that's one of the

00:11:06,020 --> 00:11:09,920
pain points that the Bosch community if

00:11:07,550 --> 00:11:11,090
people users of the boxy life felt in

00:11:09,920 --> 00:11:12,530
the migration was that if you are

00:11:11,090 --> 00:11:14,390
looking at a piece of documentation it

00:11:12,530 --> 00:11:16,070
wasn't immediately clear if you're

00:11:14,390 --> 00:11:18,890
dealing with the Ruby CLI or the newer

00:11:16,070 --> 00:11:21,770
golang see alive so this will help with

00:11:18,890 --> 00:11:23,720
that as well another thing that we see

00:11:21,770 --> 00:11:25,820
and these other C lies that I consider

00:11:23,720 --> 00:11:32,660
to be part of our ecosystem is they

00:11:25,820 --> 00:11:36,160
follow this verb now in syntax there is

00:11:32,660 --> 00:11:41,120
yes if you I'll show the link at the end

00:11:36,160 --> 00:11:42,440
and you can go check it out so it's it's

00:11:41,120 --> 00:11:43,610
still a work in progress I would say but

00:11:42,440 --> 00:11:49,670
there's quite a lot of functionality

00:11:43,610 --> 00:11:52,160
already in it so this coming back to

00:11:49,670 --> 00:11:53,960
this slide sorry I didn't say this

00:11:52,160 --> 00:11:55,880
question was is the CLI available today

00:11:53,960 --> 00:11:59,110
and the answer is yes

00:11:55,880 --> 00:12:02,150
all right so coming back to this slide

00:11:59,110 --> 00:12:03,560
this we want to follow along with how

00:12:02,150 --> 00:12:06,350
other people are doing things and follow

00:12:03,560 --> 00:12:08,780
this verb noun you know and the UA AC

00:12:06,350 --> 00:12:11,210
Ruby tool we had this sort of crazy sub

00:12:08,780 --> 00:12:14,990
command system which leads to confusion

00:12:11,210 --> 00:12:16,490
for a number of reasons people are often

00:12:14,990 --> 00:12:19,100
I've been asked many times what does

00:12:16,490 --> 00:12:21,710
token owner get mean it means get a

00:12:19,100 --> 00:12:24,530
token with the password grant type how

00:12:21,710 --> 00:12:25,880
would you know that you wouldn't and

00:12:24,530 --> 00:12:27,490
then people are also like what's up with

00:12:25,880 --> 00:12:29,960
this get keyword why do you need that

00:12:27,490 --> 00:12:32,060
and it just doesn't really make a lot of

00:12:29,960 --> 00:12:33,710
sense so we've kind of shifted to this

00:12:32,060 --> 00:12:35,120
verb now and syntax

00:12:33,710 --> 00:12:37,610
I think these names are a little more

00:12:35,120 --> 00:12:39,020
clear and they're quite long there's

00:12:37,610 --> 00:12:41,210
obviously opportunity to introduce some

00:12:39,020 --> 00:12:43,370
aliases and things but at least as a

00:12:41,210 --> 00:12:48,650
first pass we wanted to get in line with

00:12:43,370 --> 00:12:50,150
these other tools number three I would

00:12:48,650 --> 00:12:52,070
say is that people do want to help

00:12:50,150 --> 00:12:52,370
themselves and when they come to me for

00:12:52,070 --> 00:12:53,660
help

00:12:52,370 --> 00:12:55,280
usually they've gone through a number of

00:12:53,660 --> 00:12:58,250
different things already they tried a

00:12:55,280 --> 00:13:00,440
Google search they've often tried to

00:12:58,250 --> 00:13:02,210
view help information in the CLI which

00:13:00,440 --> 00:13:05,270
the Ruby CLI in the past didn't really

00:13:02,210 --> 00:13:07,010
include much useful information if there

00:13:05,270 --> 00:13:08,630
are customers they've often reached out

00:13:07,010 --> 00:13:10,820
to our commercial support at pivotal and

00:13:08,630 --> 00:13:12,410
the pivotal support person is escalating

00:13:10,820 --> 00:13:14,750
to me because they actually don't know

00:13:12,410 --> 00:13:17,240
the answer and so that's just like

00:13:14,750 --> 00:13:21,890
that's not a good experience for anybody

00:13:17,240 --> 00:13:24,529
I so I really tried to push for having

00:13:21,890 --> 00:13:26,750
much better help inside the tool itself

00:13:24,529 --> 00:13:28,370
and if you look at these are just some

00:13:26,750 --> 00:13:29,750
example questions that we get a lot like

00:13:28,370 --> 00:13:31,820
why doesn't my token contain the

00:13:29,750 --> 00:13:34,160
expected scopes or why do I need a

00:13:31,820 --> 00:13:38,589
client to get a token some of these like

00:13:34,160 --> 00:13:41,060
reveal a lack of understanding of the

00:13:38,589 --> 00:13:43,220
identity domain the basic concepts about

00:13:41,060 --> 00:13:46,010
OAuth others like this last question

00:13:43,220 --> 00:13:47,330
what skin filters is you a support to me

00:13:46,010 --> 00:13:50,870
that says the person has some knowledge

00:13:47,330 --> 00:13:53,510
about what what the spec is that they're

00:13:50,870 --> 00:13:55,730
trying to leverage and so there's a wide

00:13:53,510 --> 00:13:57,529
range of knowledge levels that we see in

00:13:55,730 --> 00:14:01,000
our users it's important to like try to

00:13:57,529 --> 00:14:04,100
meet them where they are and so you know

00:14:01,000 --> 00:14:06,350
how that manifests in the CLI is that we

00:14:04,100 --> 00:14:08,779
want to have as much useful information

00:14:06,350 --> 00:14:10,100
in the help strings as possible and I'm

00:14:08,779 --> 00:14:11,860
sure you've probably all had the

00:14:10,100 --> 00:14:13,610
experience of looking at a man page

00:14:11,860 --> 00:14:15,140
trying to figure out how to use a

00:14:13,610 --> 00:14:17,990
command and really not coming away with

00:14:15,140 --> 00:14:20,180
any useful understanding so I didn't

00:14:17,990 --> 00:14:22,040
want to I don't want to promote that and

00:14:20,180 --> 00:14:24,079
I've tried to include some realistic

00:14:22,040 --> 00:14:27,050
copy-paste table examples in the help

00:14:24,079 --> 00:14:29,149
strings and also some like just really

00:14:27,050 --> 00:14:31,850
straightforward troubleshooting tips for

00:14:29,149 --> 00:14:34,310
common problems some of these other ones

00:14:31,850 --> 00:14:35,570
like meaningful error messages that's

00:14:34,310 --> 00:14:37,040
more aspirational that's like a

00:14:35,570 --> 00:14:39,560
longer-term thing that will require some

00:14:37,040 --> 00:14:43,730
changes in the UAA I would say you a

00:14:39,560 --> 00:14:45,410
server and actually like just language

00:14:43,730 --> 00:14:46,579
using the right words so that when

00:14:45,410 --> 00:14:48,649
people view something they don't

00:14:46,579 --> 00:14:50,770
understand it in the help they can go to

00:14:48,649 --> 00:14:54,350
the internet and find other resources

00:14:50,770 --> 00:14:55,700
you know when you add all these things

00:14:54,350 --> 00:14:58,579
up together these are like low-tech

00:14:55,700 --> 00:14:59,839
super low-tech things but communication

00:14:58,579 --> 00:15:02,089
is really powerful and you can actually

00:14:59,839 --> 00:15:03,920
give people a better experience simply

00:15:02,089 --> 00:15:06,890
by putting the information where they

00:15:03,920 --> 00:15:09,860
need it and this is just a screenshot

00:15:06,890 --> 00:15:10,910
from one of the help strings for

00:15:09,860 --> 00:15:13,310
searching about users that's

00:15:10,910 --> 00:15:15,110
demonstrating like how can you query the

00:15:13,310 --> 00:15:17,660
UAA for certain things like how would

00:15:15,110 --> 00:15:19,700
you find a user who's email is Bob at

00:15:17,660 --> 00:15:22,940
example.com well there's an example

00:15:19,700 --> 00:15:25,640
right there and that's one less question

00:15:22,940 --> 00:15:28,959
coming to me in slack is we have like

00:15:25,640 --> 00:15:28,959
actual real examples here

00:15:29,050 --> 00:15:35,000
and thing number four and this is the

00:15:31,820 --> 00:15:36,140
last sort of category of major problem

00:15:35,000 --> 00:15:37,640
that I would say what the old tool is

00:15:36,140 --> 00:15:40,250
that it didn't lend itself to automation

00:15:37,640 --> 00:15:41,990
and that's an essential use case when

00:15:40,250 --> 00:15:44,780
you're talking about scaling out your

00:15:41,990 --> 00:15:46,430
usage of UAA I'm here I've shown some

00:15:44,780 --> 00:15:49,850
example output from one of the commands

00:15:46,430 --> 00:15:51,350
of the old CLI that for some reason it

00:15:49,850 --> 00:15:53,180
looks like yeah malysh but it's really

00:15:51,350 --> 00:15:54,770
not and you're missing things like I

00:15:53,180 --> 00:15:56,710
call in here

00:15:54,770 --> 00:15:58,820
I'm a bit further down there's a list

00:15:56,710 --> 00:16:01,370
space delimited list

00:15:58,820 --> 00:16:02,840
it's like oddly formatted and if you're

00:16:01,370 --> 00:16:05,360
trying to like take this output and

00:16:02,840 --> 00:16:06,680
script it in any way around what you're

00:16:05,360 --> 00:16:09,500
getting back like you're not gonna have

00:16:06,680 --> 00:16:11,300
a good time it's like it's like really

00:16:09,500 --> 00:16:12,830
the worst case scenario because you you

00:16:11,300 --> 00:16:14,210
initially have the reaction like oh yeah

00:16:12,830 --> 00:16:16,760
this is great it's just Yambol and then

00:16:14,210 --> 00:16:20,270
no it's really not it's not ya know at

00:16:16,760 --> 00:16:22,130
all and so super high priority has been

00:16:20,270 --> 00:16:26,000
the outputs from this tool this new tool

00:16:22,130 --> 00:16:27,650
need to be parsable consistently so far

00:16:26,000 --> 00:16:31,160
we've done a lot with Jason because

00:16:27,650 --> 00:16:32,270
Jason all JSON is also valid Gamal so if

00:16:31,160 --> 00:16:34,730
you have a tool that wants the animal

00:16:32,270 --> 00:16:38,840
you can input JSON it's kind of neat

00:16:34,730 --> 00:16:40,310
that way we've had like explicit testing

00:16:38,840 --> 00:16:41,690
around exit codes to make sure that when

00:16:40,310 --> 00:16:43,160
an error has occurred the tool is going

00:16:41,690 --> 00:16:45,860
to like tell your script that something

00:16:43,160 --> 00:16:47,420
bad happened and then also thinking

00:16:45,860 --> 00:16:49,250
about making sure we can accept

00:16:47,420 --> 00:16:54,260
non-interactive inputs and environment

00:16:49,250 --> 00:16:56,170
variables things like that so that

00:16:54,260 --> 00:17:00,170
concludes sort of the overview of

00:16:56,170 --> 00:17:02,990
learnings and next I want to shift into

00:17:00,170 --> 00:17:06,920
a bit of an example it's a bit contrived

00:17:02,990 --> 00:17:10,040
I want us to imagine that we the

00:17:06,920 --> 00:17:12,410
audience are trying to create a client

00:17:10,040 --> 00:17:14,089
registration in the UA a for the CF CLI

00:17:12,410 --> 00:17:16,430
for the first time so it's as if that

00:17:14,089 --> 00:17:19,240
CLI doesn't exist and you're trying to

00:17:16,430 --> 00:17:19,240
develop it yourself

00:17:19,270 --> 00:17:25,280
so as in any auth thang well first of'

00:17:23,360 --> 00:17:27,589
is a standard for solving the problem of

00:17:25,280 --> 00:17:29,780
delegated authorization which is a lot

00:17:27,589 --> 00:17:31,400
of words what it basically means as you

00:17:29,780 --> 00:17:33,830
as a user want to use a piece of

00:17:31,400 --> 00:17:36,890
software to perform some actions on your

00:17:33,830 --> 00:17:39,260
behalf and the oh-ah standard describes

00:17:36,890 --> 00:17:40,350
these four different roles that are

00:17:39,260 --> 00:17:42,570
involved in that type of

00:17:40,350 --> 00:17:45,450
so resource owner that's the user I

00:17:42,570 --> 00:17:46,650
think we all know who that is in this

00:17:45,450 --> 00:17:48,450
scenario that we're talking about the

00:17:46,650 --> 00:17:49,919
client the thing that wants to perform

00:17:48,450 --> 00:17:53,190
actions on your behalf is going to be

00:17:49,919 --> 00:17:56,190
the CLI itself the off server that's the

00:17:53,190 --> 00:17:57,539
UI a its job is to authenticate users in

00:17:56,190 --> 00:17:59,010
other words verify that they are who

00:17:57,539 --> 00:18:03,150
they say they are because they provided

00:17:59,010 --> 00:18:05,190
the username and password it also keeps

00:18:03,150 --> 00:18:07,500
track of what permissions users have and

00:18:05,190 --> 00:18:11,340
knows how to issue and validate tokens

00:18:07,500 --> 00:18:13,409
and finally the resource server which is

00:18:11,340 --> 00:18:17,190
any any API basically that requires a

00:18:13,409 --> 00:18:19,470
token to access it would be said to be a

00:18:17,190 --> 00:18:22,710
resource server so in our world these

00:18:19,470 --> 00:18:23,909
roles they map like this so I have sort

00:18:22,710 --> 00:18:26,570
of called some of them out already

00:18:23,909 --> 00:18:29,730
cloud controller is the resource server

00:18:26,570 --> 00:18:31,260
the client is the CLI and so if you're

00:18:29,730 --> 00:18:32,909
in a scenario where the user wants to do

00:18:31,260 --> 00:18:35,880
a CF login I hope we've all had this

00:18:32,909 --> 00:18:37,620
experience you type you the user typed

00:18:35,880 --> 00:18:40,260
that into your computer you provide your

00:18:37,620 --> 00:18:42,990
username and password to the CLI the CLI

00:18:40,260 --> 00:18:46,919
will turn around and make a request to

00:18:42,990 --> 00:18:48,390
you a to request a token it passes some

00:18:46,919 --> 00:18:49,799
information with this request it's going

00:18:48,390 --> 00:18:52,620
to send the client ID and client secret

00:18:49,799 --> 00:18:54,960
as well as the username and password and

00:18:52,620 --> 00:18:56,760
assuming that all checks out aoa is

00:18:54,960 --> 00:18:58,980
going to reply back with the token that

00:18:56,760 --> 00:19:01,950
it asks for which the CLI is going to

00:18:58,980 --> 00:19:04,440
save off in a text file so that when the

00:19:01,950 --> 00:19:07,169
user types their next command the user

00:19:04,440 --> 00:19:09,059
says hey I want to see f.push well now

00:19:07,169 --> 00:19:11,220
that the CLI will say okay I can do that

00:19:09,059 --> 00:19:13,440
for you because I have a token so now

00:19:11,220 --> 00:19:15,360
I'm gonna request I'm gonna post your

00:19:13,440 --> 00:19:18,659
app over to cloud controller with this

00:19:15,360 --> 00:19:22,530
token and default all goes well you'll

00:19:18,659 --> 00:19:25,470
get a 200 back so what you've seen here

00:19:22,530 --> 00:19:30,150
is a password grant type o auth flow and

00:19:25,470 --> 00:19:31,950
so you know if I'm trying to create a

00:19:30,150 --> 00:19:35,549
new integration between UA a and a

00:19:31,950 --> 00:19:36,659
client the first thing I would do is

00:19:35,549 --> 00:19:37,740
sketch out something like this and

00:19:36,659 --> 00:19:40,230
figure out what the different roles are

00:19:37,740 --> 00:19:42,059
having done that I would move on to

00:19:40,230 --> 00:19:46,830
actually setting up those configurations

00:19:42,059 --> 00:19:47,880
to test them out so with the new CLI or

00:19:46,830 --> 00:19:49,020
actually with any Selah

00:19:47,880 --> 00:19:50,400
the first thing you always do is target

00:19:49,020 --> 00:19:52,770
the environment that you're hitting I

00:19:50,400 --> 00:19:53,120
just put in a local host URL but in real

00:19:52,770 --> 00:19:56,840
life

00:19:53,120 --> 00:19:59,180
be some kind of UA in the cloud the next

00:19:56,840 --> 00:20:00,950
thing I need to do is retrieve a token

00:19:59,180 --> 00:20:02,750
with an administrative scope because I

00:20:00,950 --> 00:20:04,580
need that token in order to do the other

00:20:02,750 --> 00:20:08,240
actions like creating a client creating

00:20:04,580 --> 00:20:10,100
a user all those things so yeah I just

00:20:08,240 --> 00:20:14,960
do this get client financials token

00:20:10,100 --> 00:20:16,850
admin command most distributions are

00:20:14,960 --> 00:20:19,070
instances of UA a will have an

00:20:16,850 --> 00:20:20,600
administrative client in them obviously

00:20:19,070 --> 00:20:23,450
your secrets not going to be admin

00:20:20,600 --> 00:20:25,429
secret but you would have to look in

00:20:23,450 --> 00:20:27,170
your deployment manifest or your ops

00:20:25,429 --> 00:20:30,370
manager credentials tab it depends how

00:20:27,170 --> 00:20:32,480
you deploy your UA a but some someone

00:20:30,370 --> 00:20:36,170
available to you should know how to find

00:20:32,480 --> 00:20:38,540
that secret and having done that this

00:20:36,170 --> 00:20:41,870
you a context command you can use that

00:20:38,540 --> 00:20:44,179
to view the token that it retrieved so

00:20:41,870 --> 00:20:46,280
that's like kind of getting set up once

00:20:44,179 --> 00:20:49,730
you've done that you can create a client

00:20:46,280 --> 00:20:51,830
like this and it shouldn't be any

00:20:49,730 --> 00:20:55,220
surprises here we have to provide the

00:20:51,830 --> 00:20:56,870
client ID which is cf and a client

00:20:55,220 --> 00:20:58,610
secret in this case the client secret is

00:20:56,870 --> 00:21:02,600
empty string and the reason for that is

00:20:58,610 --> 00:21:04,610
that with the CFC Li we want anyone to

00:21:02,600 --> 00:21:07,580
be able to download CF and point it at

00:21:04,610 --> 00:21:08,960
any Cloud Foundry deployment the only

00:21:07,580 --> 00:21:12,110
way to accomplish that is by it to have

00:21:08,960 --> 00:21:13,929
a like a a constant value an own

00:21:12,110 --> 00:21:16,790
constant value for the client secret

00:21:13,929 --> 00:21:18,650
it's someone back in the day decided the

00:21:16,790 --> 00:21:22,970
NP secret was the good value to use for

00:21:18,650 --> 00:21:24,830
known constant client secret you have to

00:21:22,970 --> 00:21:26,390
tell the UA a what type of grant types

00:21:24,830 --> 00:21:29,150
are allowed to be used with this client

00:21:26,390 --> 00:21:31,580
and finally like what scopes does this

00:21:29,150 --> 00:21:33,110
client need now the real CF CLI is

00:21:31,580 --> 00:21:34,550
requesting a lot more scopes than just

00:21:33,110 --> 00:21:36,200
cloud control or admin but if you

00:21:34,550 --> 00:21:38,840
putting yourself in the shoes of the

00:21:36,200 --> 00:21:40,190
person who's creating that client you're

00:21:38,840 --> 00:21:41,480
not gonna add everything to begin with

00:21:40,190 --> 00:21:43,640
you're gonna like start small and

00:21:41,480 --> 00:21:45,290
iterate and so for this example I just

00:21:43,640 --> 00:21:50,179
put in cloud patroller admin as a good

00:21:45,290 --> 00:21:51,920
starting place yeah so that should

00:21:50,179 --> 00:21:54,170
succeed because we have a token with

00:21:51,920 --> 00:21:55,309
administrative scope and before we can

00:21:54,170 --> 00:21:57,800
test it out we have to also create a

00:21:55,309 --> 00:22:00,650
user so this is kind of what a create

00:21:57,800 --> 00:22:02,990
user command would look like I look I

00:22:00,650 --> 00:22:04,160
really enjoy dr. Seuss as a child I was

00:22:02,990 --> 00:22:06,560
lately enjoyed sharing that with my

00:22:04,160 --> 00:22:07,840
nephews so I always use dr. Seuss in my

00:22:06,560 --> 00:22:10,009
example

00:22:07,840 --> 00:22:12,320
pretty straightforward you need a

00:22:10,009 --> 00:22:15,669
password and an email address the names

00:22:12,320 --> 00:22:18,889
are optional and we also need to assign

00:22:15,669 --> 00:22:20,690
membership to our test user so we're

00:22:18,889 --> 00:22:25,340
giving him membership in the cloud

00:22:20,690 --> 00:22:28,039
controller admin group so this is where

00:22:25,340 --> 00:22:29,720
like it all comes together so now that

00:22:28,039 --> 00:22:31,700
we have that client and we have that

00:22:29,720 --> 00:22:34,669
test user we can use this different

00:22:31,700 --> 00:22:36,080
token command get password token passing

00:22:34,669 --> 00:22:38,179
all four pieces of information the

00:22:36,080 --> 00:22:41,059
client ID the client secret the user

00:22:38,179 --> 00:22:43,039
name and the password to get that token

00:22:41,059 --> 00:22:46,639
and this is exactly what the CF CLI does

00:22:43,039 --> 00:22:48,860
today so from there as an app developer

00:22:46,639 --> 00:22:50,389
at the developer of the CLI I can

00:22:48,860 --> 00:22:53,149
continue iterate and click adding

00:22:50,389 --> 00:22:55,039
memberships and adding scopes to build

00:22:53,149 --> 00:22:59,980
up a token with all the capabilities

00:22:55,039 --> 00:23:02,029
that I need so where are we today

00:22:59,980 --> 00:23:03,820
gentleman on the front after earlier is

00:23:02,029 --> 00:23:08,120
this available today and the answer is

00:23:03,820 --> 00:23:11,360
yes there is it publicly available go

00:23:08,120 --> 00:23:13,580
CLI it has most of the crud operations

00:23:11,360 --> 00:23:15,649
that you need on major resources like

00:23:13,580 --> 00:23:17,450
clients users and groups we've also

00:23:15,649 --> 00:23:22,669
implemented all of the token commands

00:23:17,450 --> 00:23:24,799
for the major grant types and as well as

00:23:22,669 --> 00:23:26,570
a UA a curl command and so the initial

00:23:24,799 --> 00:23:28,909
goal for this project was to replace the

00:23:26,570 --> 00:23:32,269
functionality of UA AC so that we can

00:23:28,909 --> 00:23:33,889
fully deprecated it there's a few things

00:23:32,269 --> 00:23:36,289
still outstanding that I've listed here

00:23:33,889 --> 00:23:37,580
I think external group mappings seems

00:23:36,289 --> 00:23:41,419
like the most important one because I

00:23:37,580 --> 00:23:43,279
know people use that quite a lot but

00:23:41,419 --> 00:23:46,000
overall it's getting very close to

00:23:43,279 --> 00:23:48,769
feature parity with the Ruby CLI and

00:23:46,000 --> 00:23:50,269
looking ahead I think I've talked a lot

00:23:48,769 --> 00:23:53,419
about these things that are important

00:23:50,269 --> 00:23:54,919
for app developers where we really want

00:23:53,419 --> 00:23:56,629
to get to is having a nicer experience

00:23:54,919 --> 00:23:59,269
for platform operators who are

00:23:56,629 --> 00:24:03,019
configuring identity this is future this

00:23:59,269 --> 00:24:04,429
doesn't exist today but we've seen and

00:24:03,019 --> 00:24:06,799
learned from the experience of people

00:24:04,429 --> 00:24:07,759
with the Box CLI and the fly CLI that

00:24:06,799 --> 00:24:10,129
when you have these really large

00:24:07,759 --> 00:24:12,950
configuration objects you need to manage

00:24:10,129 --> 00:24:16,190
a file based configuration is really the

00:24:12,950 --> 00:24:18,230
way to go and so something like this

00:24:16,190 --> 00:24:19,580
where you would have a yellow file to

00:24:18,230 --> 00:24:20,039
provide that configuration for your

00:24:19,580 --> 00:24:22,889
identity

00:24:20,039 --> 00:24:25,489
zones and identity providers I think is

00:24:22,889 --> 00:24:25,489
where we're headed

00:24:25,940 --> 00:24:31,289
so that's all I had to say thank you all

00:24:29,850 --> 00:24:33,239
for listening to my talk I hope you'll

00:24:31,289 --> 00:24:38,179
check out the repo here at Cloud Foundry

00:24:33,239 --> 00:24:44,669
incubator /u AACL I give it a spin and

00:24:38,179 --> 00:24:47,999
let us know any feedback let me check

00:24:44,669 --> 00:24:51,119
the time okay we have about five minutes

00:24:47,999 --> 00:24:57,779
left so if anyone has any questions I'm

00:24:51,119 --> 00:24:59,809
happy to take them no all right thank

00:24:57,779 --> 00:24:59,809
you

00:25:00,070 --> 00:25:03,270

YouTube URL: https://www.youtube.com/watch?v=_BUDimUOAEQ


