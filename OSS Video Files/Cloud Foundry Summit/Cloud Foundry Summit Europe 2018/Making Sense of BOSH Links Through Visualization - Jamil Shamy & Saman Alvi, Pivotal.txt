Title: Making Sense of BOSH Links Through Visualization - Jamil Shamy & Saman Alvi, Pivotal
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Making Sense of BOSH Links Through Visualization - Jamil Shamy & Saman Alvi, Pivotal

As links move towards becoming a cornerstone in the BOSH deployments architecture, especially with the addition of BOSH Links API, a new mechanism describing Links Providers and Consumers and the relationships between them is needed.
Taking a CloudFoundry deployment as an example, on average more than 100 links will be created during a deployment. In this session, Jamil Shamy (Pivotal) and Saman Alvi (Pivotal) will be presenting a BOSH CLI extension that enables the visualization and categorization of inner and cross deployment Links; aiming towards a better understanding of the deployed software.

https://cfseu18.sched.com/event/FRyo/making-sense-of-bosh-links-through-visualization-jamil-shamy-saman-alvi-pivotal
Captions: 
	00:00:00,299 --> 00:00:05,640
thank you for joining us today my name

00:00:02,909 --> 00:00:07,350
is summon and this is Jamil Jameel has

00:00:05,640 --> 00:00:09,630
been an engineer on the Bosch team for

00:00:07,350 --> 00:00:10,950
more than two years now and I've worked

00:00:09,630 --> 00:00:12,929
across a variety of cloud foundry

00:00:10,950 --> 00:00:19,650
projects as well as a few core

00:00:12,929 --> 00:00:21,390
components of Bosch so we want to talk

00:00:19,650 --> 00:00:23,070
to you today about an interesting

00:00:21,390 --> 00:00:26,960
problem that exists in the Bosch

00:00:23,070 --> 00:00:31,910
universe imagine the following you have

00:00:26,960 --> 00:00:35,100
multiple massive deployments properties

00:00:31,910 --> 00:00:37,770
variables and links being shared all

00:00:35,100 --> 00:00:39,899
over the place property is being shared

00:00:37,770 --> 00:00:40,920
through links variables being generated

00:00:39,899 --> 00:00:42,960
left and right

00:00:40,920 --> 00:00:45,329
certificates being presented and flying

00:00:42,960 --> 00:00:49,860
everywhere and in the midst of all of

00:00:45,329 --> 00:00:51,770
this an error occurs and you are the one

00:00:49,860 --> 00:00:54,989
person that they have decided is

00:00:51,770 --> 00:00:59,430
responsible for fixing this problem it's

00:00:54,989 --> 00:01:02,760
all on you the question is how are you

00:00:59,430 --> 00:01:06,000
going to do this so we are here today to

00:01:02,760 --> 00:01:07,710
help you solve this problem ideally by

00:01:06,000 --> 00:01:09,810
the end of this presentation through the

00:01:07,710 --> 00:01:12,060
visualization of Bosch links and other

00:01:09,810 --> 00:01:15,090
Bosch components you will be able to

00:01:12,060 --> 00:01:17,159
solve this problem but before we get

00:01:15,090 --> 00:01:21,030
started let's talk a little bit about

00:01:17,159 --> 00:01:22,950
the history of links links were

00:01:21,030 --> 00:01:25,409
originally created to solve the problem

00:01:22,950 --> 00:01:27,930
of sharing data across components in the

00:01:25,409 --> 00:01:30,509
Bosch manifests they were also created

00:01:27,930 --> 00:01:32,939
because static IPS had to be assigned to

00:01:30,509 --> 00:01:35,549
all the components in the manifest so

00:01:32,939 --> 00:01:38,159
for example if you consider the case

00:01:35,549 --> 00:01:41,850
where you have an app client a server

00:01:38,159 --> 00:01:43,770
and a database the client needs to know

00:01:41,850 --> 00:01:45,930
the address of the server the server

00:01:43,770 --> 00:01:48,630
needs to know the address and port of

00:01:45,930 --> 00:01:51,060
the database and the database needs to

00:01:48,630 --> 00:01:54,570
expose the username and password to the

00:01:51,060 --> 00:01:56,159
server originally all these components

00:01:54,570 --> 00:01:58,020
were defined in the manifest and there

00:01:56,159 --> 00:02:00,329
was a lot of duplicate information and

00:01:58,020 --> 00:02:04,740
static IPS were assigned to every single

00:02:00,329 --> 00:02:07,770
component tools like spiff and spruce

00:02:04,740 --> 00:02:09,300
were created to help reduce that so that

00:02:07,770 --> 00:02:11,580
they would automatically generate that

00:02:09,300 --> 00:02:12,270
data and insert it into the templates

00:02:11,580 --> 00:02:15,540
and the man of

00:02:12,270 --> 00:02:17,310
but they created dependencies and large

00:02:15,540 --> 00:02:20,430
deployments were still tricky and hard

00:02:17,310 --> 00:02:21,960
to manage so even with these so these

00:02:20,430 --> 00:02:26,870
are some of the problems that Lynx are

00:02:21,960 --> 00:02:29,850
hoping to solve but what is a link and

00:02:26,870 --> 00:02:32,880
quite simply a link is a connection

00:02:29,850 --> 00:02:36,060
between two components a provider and a

00:02:32,880 --> 00:02:37,620
consumer a provider and consumer both to

00:02:36,060 --> 00:02:41,100
find the type of link that they are

00:02:37,620 --> 00:02:43,290
consuming and Bosch at runtime resolves

00:02:41,100 --> 00:02:47,280
the connection between the two creating

00:02:43,290 --> 00:02:49,170
a link so in the so an example to

00:02:47,280 --> 00:02:50,880
understand this is when you try to

00:02:49,170 --> 00:02:54,030
understand the connection when a

00:02:50,880 --> 00:02:57,480
database is providing a link to a server

00:02:54,030 --> 00:03:00,240
so a database is providing a link

00:02:57,480 --> 00:03:02,460
connection of name and type con and it's

00:03:00,240 --> 00:03:05,370
exposing the property port and the

00:03:02,460 --> 00:03:08,070
server is consuming it at runtime in the

00:03:05,370 --> 00:03:11,430
job spec bosh will resolve that property

00:03:08,070 --> 00:03:14,040
for you during deployment they also

00:03:11,430 --> 00:03:16,620
solve the problem of sharing addresses

00:03:14,040 --> 00:03:19,890
between links because when the link is

00:03:16,620 --> 00:03:21,990
provided again in this example the

00:03:19,890 --> 00:03:25,620
database is providing the con link to

00:03:21,990 --> 00:03:27,660
the server the job spec resolves it

00:03:25,620 --> 00:03:29,640
because the link itself contains the

00:03:27,660 --> 00:03:31,890
instance provider the provider instance

00:03:29,640 --> 00:03:37,050
address so the job spec is able to

00:03:31,890 --> 00:03:38,580
resolve it so now that we have a basic

00:03:37,050 --> 00:03:41,280
understanding of why links are created

00:03:38,580 --> 00:03:43,890
and what they are we want to get a

00:03:41,280 --> 00:03:46,740
little bit into the latest features that

00:03:43,890 --> 00:03:52,140
we have developed around links the first

00:03:46,740 --> 00:03:53,280
of which is the links API so if you have

00:03:52,140 --> 00:03:55,560
a deployment that looks kind of like

00:03:53,280 --> 00:03:58,650
this you have a provider that's being

00:03:55,560 --> 00:04:00,660
provided the links API provides a way to

00:03:58,650 --> 00:04:04,230
get all the entities that are being

00:04:00,660 --> 00:04:05,940
provided in a deployment so this is the

00:04:04,230 --> 00:04:08,490
response you get and this will be able

00:04:05,940 --> 00:04:10,920
to define like hey there is this link is

00:04:08,490 --> 00:04:13,140
in this case it's defined in the release

00:04:10,920 --> 00:04:15,000
spec with name and type peers and

00:04:13,140 --> 00:04:16,980
zookeeper peers it lives in the

00:04:15,000 --> 00:04:20,190
zookeeper job in the server's instance

00:04:16,980 --> 00:04:22,890
group its alias to custom peers and it's

00:04:20,190 --> 00:04:25,150
shared across multiple deployments so on

00:04:22,890 --> 00:04:27,220
the left you have the actual definition

00:04:25,150 --> 00:04:32,590
of a link provider like this is how it

00:04:27,220 --> 00:04:34,389
exists the link consumers endpoint lists

00:04:32,590 --> 00:04:36,729
all the entities in a deployment that

00:04:34,389 --> 00:04:38,949
are able to consume a link and the

00:04:36,729 --> 00:04:42,430
entities which can consume a link are a

00:04:38,949 --> 00:04:44,350
job a variable and a custom and a custom

00:04:42,430 --> 00:04:47,080
external consumer which we will get into

00:04:44,350 --> 00:04:49,690
in the next few slides so again querying

00:04:47,080 --> 00:04:51,580
the links consumer endpoint gives you is

00:04:49,690 --> 00:04:53,289
able to give you the definition of the

00:04:51,580 --> 00:04:56,470
link in the release spec for this

00:04:53,289 --> 00:04:58,750
example and it defines hey I live in the

00:04:56,470 --> 00:05:03,370
ng next job in the app server instance

00:04:58,750 --> 00:05:06,100
group we have also created the ability

00:05:03,370 --> 00:05:07,570
for you to create a link so now when you

00:05:06,100 --> 00:05:09,610
create a link you are going to be

00:05:07,570 --> 00:05:13,090
creating a link as a third party entity

00:05:09,610 --> 00:05:15,220
so you specify the provider that you are

00:05:13,090 --> 00:05:18,010
going to that you specify your provider

00:05:15,220 --> 00:05:20,530
and you set your type as external so

00:05:18,010 --> 00:05:22,449
when bosh resolves this link it will

00:05:20,530 --> 00:05:24,520
find the provider with type external and

00:05:22,449 --> 00:05:25,840
then be able to resolve it so it's very

00:05:24,520 --> 00:05:29,050
important that you set your type is

00:05:25,840 --> 00:05:32,349
external for this example the response

00:05:29,050 --> 00:05:35,560
of this request gives you back little

00:05:32,349 --> 00:05:38,620
generated links ID which you can use to

00:05:35,560 --> 00:05:40,870
query and get the link address this

00:05:38,620 --> 00:05:42,880
becomes super useful in the case of

00:05:40,870 --> 00:05:44,680
service brokers when they're trying to

00:05:42,880 --> 00:05:48,070
resolve the links networking interpret

00:05:44,680 --> 00:05:49,780
information to generate the boss DNS

00:05:48,070 --> 00:05:52,630
address for their service instances that

00:05:49,780 --> 00:05:58,510
they're creating so super handy for that

00:05:52,630 --> 00:06:01,210
use case we've also created for you

00:05:58,510 --> 00:06:03,159
custom providers and a custom provider

00:06:01,210 --> 00:06:04,630
is only really different from any other

00:06:03,159 --> 00:06:06,970
provider in the sense that it only

00:06:04,630 --> 00:06:09,639
exists in the deployment manifest and

00:06:06,970 --> 00:06:11,680
not in the release spec a custom

00:06:09,639 --> 00:06:13,840
provider can still be aliased it can

00:06:11,680 --> 00:06:16,960
still expose properties it can still be

00:06:13,840 --> 00:06:18,550
shared the only difference is that it

00:06:16,960 --> 00:06:22,690
only exists purely in your deployment

00:06:18,550 --> 00:06:25,360
manifest the purpose or the reason for

00:06:22,690 --> 00:06:27,610
this existence comes in handy in the

00:06:25,360 --> 00:06:29,889
next slide when we talk about variables

00:06:27,610 --> 00:06:33,430
because now we've added the ability for

00:06:29,889 --> 00:06:37,150
variables of type certificate to consume

00:06:33,430 --> 00:06:38,560
links of type address so in this example

00:06:37,150 --> 00:06:41,470
we have the

00:06:38,560 --> 00:06:44,710
address job providing a custom link of

00:06:41,470 --> 00:06:47,500
server app address of type address this

00:06:44,710 --> 00:06:49,750
will be consumed in the alternative name

00:06:47,500 --> 00:06:52,330
down below in the variable so when this

00:06:49,750 --> 00:06:54,850
variable is generated the sands of that

00:06:52,330 --> 00:06:57,520
certificate will actually contain the

00:06:54,850 --> 00:07:01,660
Bosch DNS address job of the Bosch DNS

00:06:57,520 --> 00:07:06,490
address of that job it's really cool it

00:07:01,660 --> 00:07:09,520
solves a very important problem so

00:07:06,490 --> 00:07:11,830
taking a step back for a moment we now

00:07:09,520 --> 00:07:13,510
understand what links are why they came

00:07:11,830 --> 00:07:16,090
to be and a little bit about the latest

00:07:13,510 --> 00:07:18,729
features that we've developed but we

00:07:16,090 --> 00:07:21,070
still have that same problem we still

00:07:18,729 --> 00:07:23,260
have that massive deployment we still

00:07:21,070 --> 00:07:25,690
have properties links and variables

00:07:23,260 --> 00:07:28,360
flying all over the place but does it

00:07:25,690 --> 00:07:30,669
still have to be a headache I'm going to

00:07:28,360 --> 00:07:32,350
let Jamil do a demo of the links

00:07:30,669 --> 00:07:36,400
visualizations tool and give you more

00:07:32,350 --> 00:07:38,560
information thank you summon hello

00:07:36,400 --> 00:07:40,000
everyone my name is Jamil as someone

00:07:38,560 --> 00:07:41,380
have mentioned I've been the boss team

00:07:40,000 --> 00:07:44,169
since almost two years and a half right

00:07:41,380 --> 00:07:46,390
now you probably if you're interacting

00:07:44,169 --> 00:07:49,890
on the Bosch channel you'll probably see

00:07:46,390 --> 00:07:54,460
me as Gargamel avatar from time to time

00:07:49,890 --> 00:07:56,340
so that would be me yep so hopefully

00:07:54,460 --> 00:07:59,919
today we're going to demo this tool and

00:07:56,340 --> 00:08:02,950
can I just get maybe a quick survey who

00:07:59,919 --> 00:08:07,710
uses links here or like just on daily

00:08:02,950 --> 00:08:10,840
basis just can you raise your hand okay

00:08:07,710 --> 00:08:12,310
who have some times trouble

00:08:10,840 --> 00:08:13,539
understanding whatever you have like a

00:08:12,310 --> 00:08:16,180
big deployment that says you have

00:08:13,539 --> 00:08:20,380
deployment or any other deployment who's

00:08:16,180 --> 00:08:25,210
consuming what who's providing what cool

00:08:20,380 --> 00:08:27,700
ok hopefully this will happen so let's

00:08:25,210 --> 00:08:29,440
go to them before we start let's

00:08:27,700 --> 00:08:31,810
actually take a look at maybe a real

00:08:29,440 --> 00:08:33,430
problem let's take a look at the CF

00:08:31,810 --> 00:08:34,750
deployment manifest just that stop in

00:08:33,430 --> 00:08:37,870
source 1 probably most of you are

00:08:34,750 --> 00:08:40,650
familiar with and surprisingly or maybe

00:08:37,870 --> 00:08:40,650
not surprisingly

00:08:42,880 --> 00:08:49,160
that's so many links has so many things

00:08:46,580 --> 00:08:52,670
so many variables it has 17 instance

00:08:49,160 --> 00:08:55,580
groups 90 variables between certificates

00:08:52,670 --> 00:08:59,180
and passwords that gets generated 29

00:08:55,580 --> 00:09:02,360
releases and you know just good luck

00:08:59,180 --> 00:09:04,790
figuring things out sometimes it gets a

00:09:02,360 --> 00:09:07,370
bit challenging if there's no if you

00:09:04,790 --> 00:09:09,650
don't have previous understanding of the

00:09:07,370 --> 00:09:12,860
internal components before you even look

00:09:09,650 --> 00:09:14,360
at it so this tool was created like a

00:09:12,860 --> 00:09:16,610
few years ago just did the one we look

00:09:14,360 --> 00:09:19,310
at it it's a static analyzer of the

00:09:16,610 --> 00:09:21,770
Bosch manifest it's just a website just

00:09:19,310 --> 00:09:23,630
some JavaScript it will try to pass it

00:09:21,770 --> 00:09:26,060
and then display few components for the

00:09:23,630 --> 00:09:27,320
Bosch manifest but still it's gonna tell

00:09:26,060 --> 00:09:28,850
you a few things on it let's say the

00:09:27,320 --> 00:09:30,860
variables releases instance groups but

00:09:28,850 --> 00:09:32,690
it doesn't really tell you let's say you

00:09:30,860 --> 00:09:34,400
have this job and it's consuming this

00:09:32,690 --> 00:09:36,170
thing from another deployment or from

00:09:34,400 --> 00:09:37,460
this deployment which currently actually

00:09:36,170 --> 00:09:39,830
there's nowhere you can tell that in

00:09:37,460 --> 00:09:43,760
Bosch it's just like basically you're

00:09:39,830 --> 00:09:45,860
running blind so that we're going to

00:09:43,760 --> 00:09:47,900
experiment with today as it started as

00:09:45,860 --> 00:09:50,480
something called the Bosch extension CLI

00:09:47,900 --> 00:09:53,660
it initially started by the previous

00:09:50,480 --> 00:09:56,270
Bosch p.m. Dmitry Callahan so he created

00:09:53,660 --> 00:10:00,170
that tool it's just a go tool created so

00:09:56,270 --> 00:10:03,200
that it can help him debug different

00:10:00,170 --> 00:10:05,600
posh environments and parse some bugs so

00:10:03,200 --> 00:10:07,850
what we did is we took it a step forward

00:10:05,600 --> 00:10:09,650
and we added a web component to that

00:10:07,850 --> 00:10:12,830
tool so we forked it and we added the

00:10:09,650 --> 00:10:14,450
web component of that - what does what

00:10:12,830 --> 00:10:16,820
what does it really do is we made it

00:10:14,450 --> 00:10:18,740
very simple for any kind of dependency

00:10:16,820 --> 00:10:21,230
just to work for for dispatch extensive

00:10:18,740 --> 00:10:23,120
CLI if you're using Bosch then you

00:10:21,230 --> 00:10:24,530
probably use the bar CLI and you have

00:10:23,120 --> 00:10:25,820
let's say all the environment variables

00:10:24,530 --> 00:10:29,270
already in your shell

00:10:25,820 --> 00:10:31,310
you just run that tool in the same shell

00:10:29,270 --> 00:10:32,780
and it will automatically shell out to

00:10:31,310 --> 00:10:35,180
the boss CLI and it will use those

00:10:32,780 --> 00:10:36,800
exported variables so it would be very

00:10:35,180 --> 00:10:39,890
simple if you're using the past year

00:10:36,800 --> 00:10:42,260
like just to add to use this tool so for

00:10:39,890 --> 00:10:44,960
example I'm gonna just start now I'm

00:10:42,260 --> 00:10:46,280
gonna stop it and let's run it I'm gonna

00:10:44,960 --> 00:10:49,160
just build it I run it and then I'm

00:10:46,280 --> 00:10:51,800
gonna it's the command is visualized for

00:10:49,160 --> 00:10:53,910
dispatch extension what it will do is

00:10:51,800 --> 00:10:55,830
that it will create a local HTTP server

00:10:53,910 --> 00:10:58,230
and everything is contained in that

00:10:55,830 --> 00:11:01,170
binary and we're gonna just serve that

00:10:58,230 --> 00:11:02,580
some content locally and I want to just

00:11:01,170 --> 00:11:04,110
mention one thing everything that you

00:11:02,580 --> 00:11:06,780
see is on your local network it's not

00:11:04,110 --> 00:11:08,310
going outside of your machine so that

00:11:06,780 --> 00:11:10,680
would be helpful later on whenever we're

00:11:08,310 --> 00:11:12,780
dealing with variables from a security

00:11:10,680 --> 00:11:16,470
perspective so let's go ahead and then

00:11:12,780 --> 00:11:19,200
click it so initially when we created

00:11:16,470 --> 00:11:21,120
this we added as even at the beginning a

00:11:19,200 --> 00:11:22,860
quick way to visualize some components

00:11:21,120 --> 00:11:24,480
of marsh and then links came over and

00:11:22,860 --> 00:11:25,980
then we added them so at the beginning

00:11:24,480 --> 00:11:27,750
we let's say it will have let's see how

00:11:25,980 --> 00:11:29,580
many deployments you have how many

00:11:27,750 --> 00:11:32,550
running tasks how many releases just

00:11:29,580 --> 00:11:35,070
basic stuff so if you look here it will

00:11:32,550 --> 00:11:37,080
just have all the list of deployments if

00:11:35,070 --> 00:11:38,940
you click on it just usually this is

00:11:37,080 --> 00:11:41,010
what the boss CLI will show you and then

00:11:38,940 --> 00:11:42,210
you can't really quickly see all the

00:11:41,010 --> 00:11:45,330
releases let's say used by this

00:11:42,210 --> 00:11:47,880
deployment 1cf or let's say by cloud

00:11:45,330 --> 00:11:49,050
cache so just a quick thing just let's

00:11:47,880 --> 00:11:50,220
say if you're new to the environment I

00:11:49,050 --> 00:11:52,350
want to just quickly debug something

00:11:50,220 --> 00:11:55,080
what kind of deployments without typing

00:11:52,350 --> 00:11:56,400
too many box commands so this still till

00:11:55,080 --> 00:11:57,840
now it's it's not that different from

00:11:56,400 --> 00:12:00,570
the actual bar CLI

00:11:57,840 --> 00:12:02,790
so let's take it to the next to the next

00:12:00,570 --> 00:12:04,650
time this one is the Barsha releases and

00:12:02,790 --> 00:12:06,300
if you use Bosch you know that whenever

00:12:04,650 --> 00:12:08,400
you list their releases to tell you it's

00:12:06,300 --> 00:12:09,870
being used but it will not tell you by

00:12:08,400 --> 00:12:12,810
which the planet you need to do some

00:12:09,870 --> 00:12:14,160
gymnastics to find that out so this one

00:12:12,810 --> 00:12:16,650
actually behind the scene it's doing

00:12:14,160 --> 00:12:17,940
some aggregation it will list all the

00:12:16,650 --> 00:12:21,030
versions of the partially diseased

00:12:17,940 --> 00:12:23,100
you're using and let's say we have

00:12:21,030 --> 00:12:26,340
binary built back it's used by CF

00:12:23,100 --> 00:12:28,230
deployment and Bosch DNS is used by all

00:12:26,340 --> 00:12:30,000
those super deployments let's say it's

00:12:28,230 --> 00:12:31,710
you spying on deployments this way

00:12:30,000 --> 00:12:33,300
whenever you have a big environments and

00:12:31,710 --> 00:12:35,670
then you want to quickly just glance

00:12:33,300 --> 00:12:37,560
over old version of releases and then

00:12:35,670 --> 00:12:39,150
you want to see which deployments are

00:12:37,560 --> 00:12:40,980
using those you can just quickly find

00:12:39,150 --> 00:12:45,420
out and this is mostly to help the

00:12:40,980 --> 00:12:46,860
operator and we added a couple of more

00:12:45,420 --> 00:12:48,870
before we get to the links which is the

00:12:46,860 --> 00:12:52,110
meat of the stock I'm gonna just go

00:12:48,870 --> 00:12:53,610
through them quickly so here we click on

00:12:52,110 --> 00:12:56,760
the tasks we are displaying all the

00:12:53,610 --> 00:12:58,290
tasks of the director just whatever you

00:12:56,760 --> 00:13:00,180
get from the Bosch tasks you man and

00:12:58,290 --> 00:13:01,950
some helpful information from it and

00:13:00,180 --> 00:13:03,600
then here you can see there's two links

00:13:01,950 --> 00:13:06,860
for every tax there's ten events and

00:13:03,600 --> 00:13:09,870
there's an ID so if we click an ID

00:13:06,860 --> 00:13:11,700
it will go fetch the actual debug logs

00:13:09,870 --> 00:13:13,560
further and then it will try to colorize

00:13:11,700 --> 00:13:15,510
them so if you have a medium to small

00:13:13,560 --> 00:13:17,130
size deployment if there's any error I

00:13:15,510 --> 00:13:20,490
can just go and then quickly see it

00:13:17,130 --> 00:13:21,810
without just with some color at least so

00:13:20,490 --> 00:13:23,820
that you can distinguish what's really

00:13:21,810 --> 00:13:25,320
happening and this is also happening in

00:13:23,820 --> 00:13:27,780
the background you don't really need to

00:13:25,320 --> 00:13:29,550
type so many posh commands here so for

00:13:27,780 --> 00:13:32,850
example in this deployment this was

00:13:29,550 --> 00:13:37,260
successful I can just if something went

00:13:32,850 --> 00:13:39,840
wrong I can see the debug logs here now

00:13:37,260 --> 00:13:42,420
if I go back to the tasks I can also

00:13:39,840 --> 00:13:43,860
flam the tasks if probably if your

00:13:42,420 --> 00:13:45,780
worship writer you have used the boss

00:13:43,860 --> 00:13:47,850
events which is very could be very

00:13:45,780 --> 00:13:50,700
helpful in tracing exactly what happened

00:13:47,850 --> 00:13:53,160
if something want that so here from each

00:13:50,700 --> 00:13:54,810
task if you click on it it will take you

00:13:53,160 --> 00:13:57,210
directly to another page which will

00:13:54,810 --> 00:13:59,970
filter all the tasks and the boss

00:13:57,210 --> 00:14:01,920
directed by that ID so here we can see

00:13:59,970 --> 00:14:04,200
that it's creating deployments yeah for

00:14:01,920 --> 00:14:05,910
updating Surrey deployments yes and then

00:14:04,200 --> 00:14:09,330
here you can just start to see the

00:14:05,910 --> 00:14:11,700
actual linear time of linear events

00:14:09,330 --> 00:14:13,320
what's really happening and even myself

00:14:11,700 --> 00:14:14,970
on it like I was involved for two years

00:14:13,320 --> 00:14:17,220
sometimes it's not easy for me to know

00:14:14,970 --> 00:14:19,920
like what really happens at this point

00:14:17,220 --> 00:14:22,440
what's boss doing by just following this

00:14:19,920 --> 00:14:24,870
it will quickly tell you like to put in

00:14:22,440 --> 00:14:27,270
your head some kind of a flow of what's

00:14:24,870 --> 00:14:30,840
really posh director does and it has

00:14:27,270 --> 00:14:33,810
some some interesting features were if

00:14:30,840 --> 00:14:36,030
any event has a context if it's an error

00:14:33,810 --> 00:14:37,410
or not we're gonna see the error you can

00:14:36,030 --> 00:14:39,270
click on it and then it's going to show

00:14:37,410 --> 00:14:42,180
you the actual context for this event so

00:14:39,270 --> 00:14:44,640
here we are updating the deployment from

00:14:42,180 --> 00:14:49,100
here and then this is sorry this is the

00:14:44,640 --> 00:14:51,030
after state and this is the before state

00:14:49,100 --> 00:14:52,500
this is could be helpful actually

00:14:51,030 --> 00:14:53,940
whenever let's say let me clear the

00:14:52,500 --> 00:14:56,790
filters and whenever there's a problem

00:14:53,940 --> 00:14:59,460
in your deployment so let me go here and

00:14:56,790 --> 00:15:01,380
then I wanna and I will also mention

00:14:59,460 --> 00:15:03,180
that bashed events will give you only

00:15:01,380 --> 00:15:06,030
200 by default so you need to do before

00:15:03,180 --> 00:15:07,850
ID to get the last 200 so again it can

00:15:06,030 --> 00:15:11,040
get messy with this one you can just

00:15:07,850 --> 00:15:13,530
copy this one and then put it before ID

00:15:11,040 --> 00:15:15,810
here and then it will directly filter

00:15:13,530 --> 00:15:18,350
the previous IDs so you don't really

00:15:15,810 --> 00:15:21,380
need to type that 17

00:15:18,350 --> 00:15:23,480
- - that's something intimacy Ally and

00:15:21,380 --> 00:15:26,150
here for example quickly let's say we

00:15:23,480 --> 00:15:28,010
know like line fifty-fifty is task 59

00:15:26,150 --> 00:15:30,700
there's an error in this event if you

00:15:28,010 --> 00:15:32,630
click on it you can just directly get it

00:15:30,700 --> 00:15:34,070
this is whatever you are dealing with so

00:15:32,630 --> 00:15:36,140
many deployments in the Bosch director

00:15:34,070 --> 00:15:38,630
it's quickly easy just to figure things

00:15:36,140 --> 00:15:42,560
out without pulling your hair out

00:15:38,630 --> 00:15:44,360
hopefully so this is the Bosch events

00:15:42,560 --> 00:15:46,780
tasks releases deployment so this is

00:15:44,360 --> 00:15:50,270
just the quick things we added to this -

00:15:46,780 --> 00:15:52,670
and sorry one more thing is the config

00:15:50,270 --> 00:15:55,460
and now probably maybe if you're aware

00:15:52,670 --> 00:15:57,080
or that Bosch supports different kinds

00:15:55,460 --> 00:16:00,650
of conflicts before we had the runtime

00:15:57,080 --> 00:16:02,990
config and cloud config now we have we

00:16:00,650 --> 00:16:05,360
have a resurrection config

00:16:02,990 --> 00:16:06,800
there's also CPI configs and potentially

00:16:05,360 --> 00:16:09,260
it could be expanded to anything so with

00:16:06,800 --> 00:16:10,580
the addition of all those configs let's

00:16:09,260 --> 00:16:12,560
say I want to see which version I'm

00:16:10,580 --> 00:16:14,420
using what's the content of that we

00:16:12,560 --> 00:16:15,920
added this quick tool which will

00:16:14,420 --> 00:16:18,170
aggregate a few things together it will

00:16:15,920 --> 00:16:19,490
list all the configs in the real world

00:16:18,170 --> 00:16:21,830
scenario you will have so many of them

00:16:19,490 --> 00:16:23,360
but in this one it's only two and let's

00:16:21,830 --> 00:16:25,040
say I want to see the clock if you click

00:16:23,360 --> 00:16:26,960
on it it's gonna go fetch directly the

00:16:25,040 --> 00:16:28,550
clock effect and then it's kind of

00:16:26,960 --> 00:16:32,870
displayed for you so to quickly

00:16:28,550 --> 00:16:34,790
visualize it this call this can also

00:16:32,870 --> 00:16:36,380
have like hopefully be helpful whenever

00:16:34,790 --> 00:16:40,100
an operator dealing with multiple

00:16:36,380 --> 00:16:43,100
conflicts now let's go to the actual -

00:16:40,100 --> 00:16:45,890
the big part of this presentation about

00:16:43,100 --> 00:16:48,050
the links so you have the CF deployment

00:16:45,890 --> 00:16:50,960
we have I don't know X number of

00:16:48,050 --> 00:16:52,760
deployments and you have shared links

00:16:50,960 --> 00:16:54,710
between those deployments so maybe

00:16:52,760 --> 00:16:58,970
sometimes let's say if you are updating

00:16:54,710 --> 00:17:00,440
a provider and by some by some chance

00:16:58,970 --> 00:17:01,640
whenever you're updating a consumer is

00:17:00,440 --> 00:17:03,490
going to start or date something that

00:17:01,640 --> 00:17:05,959
you'd never even imagined before

00:17:03,490 --> 00:17:07,820
how did did you know that before

00:17:05,959 --> 00:17:09,260
probably not maybe as an operator

00:17:07,820 --> 00:17:11,270
sometimes you don't really know like its

00:17:09,260 --> 00:17:13,280
disappointment consuming from that or

00:17:11,270 --> 00:17:15,920
what's really the topology of the

00:17:13,280 --> 00:17:19,070
deployment so with the help of Link's

00:17:15,920 --> 00:17:21,920
API with some aggregation what we did is

00:17:19,070 --> 00:17:24,880
we separated the concerns of links into

00:17:21,920 --> 00:17:27,439
to the providers and consumers we sell

00:17:24,880 --> 00:17:29,780
choose the deployment and we're going to

00:17:27,439 --> 00:17:30,890
tell you all the providers that this

00:17:29,780 --> 00:17:33,020
deployment has

00:17:30,890 --> 00:17:35,120
for example here let's go to the

00:17:33,020 --> 00:17:38,480
providers for deployment I'm going to

00:17:35,120 --> 00:17:40,700
choose a deployment this is the CF

00:17:38,480 --> 00:17:42,650
deployment it will give me all the

00:17:40,700 --> 00:17:45,290
actual providers of this deployment that

00:17:42,650 --> 00:17:47,090
all the entities it could be a job it

00:17:45,290 --> 00:17:50,120
could be another thing they can provide

00:17:47,090 --> 00:17:52,730
something additionally it's also doing

00:17:50,120 --> 00:17:54,590
some aggregation it's telling you how

00:17:52,730 --> 00:17:58,370
many times this provider is being

00:17:54,590 --> 00:18:00,730
consumed so for example here Nats the

00:17:58,370 --> 00:18:03,740
link Nats of type nuts which is shirt

00:18:00,730 --> 00:18:06,200
it's coming from a job and that job

00:18:03,740 --> 00:18:08,540
belongs to the instance group nuts and

00:18:06,200 --> 00:18:11,480
it's called nuts it's consumed eight

00:18:08,540 --> 00:18:13,549
times and to know who is really

00:18:11,480 --> 00:18:15,470
consuming that we just opened this one

00:18:13,549 --> 00:18:18,020
it's behind the scenes also doing so

00:18:15,470 --> 00:18:19,610
many aggregations it will give you the

00:18:18,020 --> 00:18:22,940
actual provider definition and a

00:18:19,610 --> 00:18:24,620
database which could be very useful also

00:18:22,940 --> 00:18:27,590
it will tell you the list of all the

00:18:24,620 --> 00:18:29,660
consumers that are consuming this for

00:18:27,590 --> 00:18:33,290
example we know nuts is consumed eight

00:18:29,660 --> 00:18:35,780
times by nuts itself by the router job

00:18:33,290 --> 00:18:39,410
in instance group UAE and deployments EF

00:18:35,780 --> 00:18:41,870
and the list goes on this before link

00:18:39,410 --> 00:18:43,760
CPI before this there's no way actually

00:18:41,870 --> 00:18:46,100
you can know that unless you go to the

00:18:43,760 --> 00:18:47,780
database and then do some queries even

00:18:46,100 --> 00:18:49,700
with that actually it was not if links

00:18:47,780 --> 00:18:53,360
were not a first-class citizen citizen

00:18:49,700 --> 00:18:54,620
of the database it was put in JSON so it

00:18:53,360 --> 00:18:57,500
was not I don't think it was even

00:18:54,620 --> 00:18:59,870
possible so this one for the providers

00:18:57,500 --> 00:19:00,950
and one thing for example you can see

00:18:59,870 --> 00:19:03,919
here you can start to see some patterns

00:19:00,950 --> 00:19:05,510
is let's say you can see that some of

00:19:03,919 --> 00:19:08,809
the providers there consume zero times

00:19:05,510 --> 00:19:10,760
which is expected some of them and you

00:19:08,809 --> 00:19:12,740
can quickly let's say I'll be interested

00:19:10,760 --> 00:19:15,530
in multi and a huge deployment I want to

00:19:12,740 --> 00:19:17,510
see like the providers that are consumed

00:19:15,530 --> 00:19:20,240
the most amount of time so here we have

00:19:17,510 --> 00:19:23,809
like dopler if I open it I can see the

00:19:20,240 --> 00:19:25,730
Doppler link from the Doppler job in

00:19:23,809 --> 00:19:28,520
instance your top it's being consumed by

00:19:25,730 --> 00:19:30,080
all of these and it will this one will

00:19:28,520 --> 00:19:32,030
tell you now it's you it will only see

00:19:30,080 --> 00:19:34,040
see one deployment if you have multiple

00:19:32,030 --> 00:19:35,960
deployments consuming this provider it

00:19:34,040 --> 00:19:38,240
will show you here so if you are just

00:19:35,960 --> 00:19:39,290
having so many dependencies and then you

00:19:38,240 --> 00:19:40,820
want to make sure whenever you're doing

00:19:39,290 --> 00:19:42,710
some update on the deployment I want to

00:19:40,820 --> 00:19:43,640
don't want to trigger something or I

00:19:42,710 --> 00:19:47,110
want to

00:19:43,640 --> 00:19:49,220
I want to really know what I'm expecting

00:19:47,110 --> 00:19:52,070
this hopefully will help you just

00:19:49,220 --> 00:19:53,540
predict that by whenever if I pleading a

00:19:52,070 --> 00:19:55,280
provider maybe I want to also update the

00:19:53,540 --> 00:19:59,180
consumer deployment as well so that I

00:19:55,280 --> 00:20:02,360
will not face any interesting facts

00:19:59,180 --> 00:20:03,800
later so this is the Bosch deployment

00:20:02,360 --> 00:20:06,110
this is the Bosch share so this is the

00:20:03,800 --> 00:20:08,420
list of providers for a link for a

00:20:06,110 --> 00:20:10,430
specific the plug now if you flip it

00:20:08,420 --> 00:20:12,680
around and then we're going to see let's

00:20:10,430 --> 00:20:13,880
say the consumers per deployment I want

00:20:12,680 --> 00:20:16,130
to see I have a deployment and

00:20:13,880 --> 00:20:17,690
interested in seeing were all the

00:20:16,130 --> 00:20:22,100
consumers in this deployment where they

00:20:17,690 --> 00:20:25,340
are coming from let me choose the CF

00:20:22,100 --> 00:20:27,710
diplomat one more time and here it will

00:20:25,340 --> 00:20:29,180
give you some statistics so we have 78

00:20:27,710 --> 00:20:32,450
total number of consumers and this

00:20:29,180 --> 00:20:34,340
deployment we have 72 fulfilled

00:20:32,450 --> 00:20:36,080
consumers because the consumer could be

00:20:34,340 --> 00:20:38,240
optional so could be nothing actually

00:20:36,080 --> 00:20:41,360
really it's not consuming anything and

00:20:38,240 --> 00:20:43,460
we have 70 most of them all of them

00:20:41,360 --> 00:20:44,870
actually are consumer of type job we're

00:20:43,460 --> 00:20:46,760
gonna see the variable later and then

00:20:44,870 --> 00:20:48,380
we're going to talk about it and in the

00:20:46,760 --> 00:20:52,210
consumer here you choose any consumer

00:20:48,380 --> 00:20:54,620
let's say if I'm interested in the UA a

00:20:52,210 --> 00:20:56,390
let's see the disc let's say in this

00:20:54,620 --> 00:20:58,760
consumer the database consumer coming

00:20:56,390 --> 00:21:00,050
from the you a job if I click on the

00:20:58,760 --> 00:21:02,720
plus sign to expand it

00:21:00,050 --> 00:21:03,440
I see the consumer I see the link and I

00:21:02,720 --> 00:21:06,830
see the provider

00:21:03,440 --> 00:21:08,720
I know exactly this job where it's

00:21:06,830 --> 00:21:13,340
consuming things from and the reason

00:21:08,720 --> 00:21:15,470
this is helpful is because this kind of

00:21:13,340 --> 00:21:18,410
link could be provided by I don't know

00:21:15,470 --> 00:21:20,180
maybe 20 providers and at the ploy time

00:21:18,410 --> 00:21:22,070
you don't really know which one unless

00:21:20,180 --> 00:21:23,810
you really coded that link or to your

00:21:22,070 --> 00:21:26,270
operator even if you go to that link are

00:21:23,810 --> 00:21:27,830
you sure it's that one behind the scene

00:21:26,270 --> 00:21:31,190
you like many things anything can happen

00:21:27,830 --> 00:21:33,080
so this is from a link consumer

00:21:31,190 --> 00:21:36,080
perspective I'm gonna choose actually

00:21:33,080 --> 00:21:37,760
now another deployment and I'll talk

00:21:36,080 --> 00:21:41,300
about the variables so now with the

00:21:37,760 --> 00:21:42,740
ability of before let's say which cloud

00:21:41,300 --> 00:21:44,540
hub you can define the variable section

00:21:42,740 --> 00:21:46,520
in the manifest and then it's going to

00:21:44,540 --> 00:21:49,610
go generate the variables for you but

00:21:46,520 --> 00:21:51,290
probably most aware of is that you need

00:21:49,610 --> 00:21:53,630
to put the common name and the sense

00:21:51,290 --> 00:21:55,380
subject authoritative names to the Boche

00:21:53,630 --> 00:21:56,790
dns aliases like

00:21:55,380 --> 00:21:59,040
things here internal or something so you

00:21:56,790 --> 00:22:02,310
need to hard-coded so what we did is we

00:21:59,040 --> 00:22:05,220
had now we said a variable can consume a

00:22:02,310 --> 00:22:08,190
link from a job let's say it's the you a

00:22:05,220 --> 00:22:09,570
job for let's it's a you a job this

00:22:08,190 --> 00:22:11,990
variable whenever it's ooming that's

00:22:09,570 --> 00:22:14,490
linked of type others from that job

00:22:11,990 --> 00:22:16,560
whenever it gets generated before we

00:22:14,490 --> 00:22:19,260
send it to crud hub we are adding

00:22:16,560 --> 00:22:21,510
automatically adding the posh DNS record

00:22:19,260 --> 00:22:24,060
for the instance group that this job

00:22:21,510 --> 00:22:25,680
belongs to and injecting it in the

00:22:24,060 --> 00:22:27,270
common name or subject alternative names

00:22:25,680 --> 00:22:28,890
so that you don't really need to deal

00:22:27,270 --> 00:22:31,470
with it and it will automatically be

00:22:28,890 --> 00:22:34,830
Santa Clara signed a created sign and

00:22:31,470 --> 00:22:36,450
sent back to you here we imagine let's

00:22:34,830 --> 00:22:38,220
say you have one ninety variables and

00:22:36,450 --> 00:22:40,020
was like okay like I'm consuming

00:22:38,220 --> 00:22:42,360
something from a job as a variable but

00:22:40,020 --> 00:22:43,860
what this thing ended up doing I don't

00:22:42,360 --> 00:22:46,050
know you generated the variable did it

00:22:43,860 --> 00:22:48,450
really have the correct sense or not

00:22:46,050 --> 00:22:50,340
it's a big questions here in this

00:22:48,450 --> 00:22:52,890
deployment we can see that we have

00:22:50,340 --> 00:22:56,130
twelve own we have twelve consumer of

00:22:52,890 --> 00:22:58,170
type variables all of them and then we

00:22:56,130 --> 00:23:02,420
can see they are fulfilled by which is

00:22:58,170 --> 00:23:06,860
job exactly the same thing as a consumer

00:23:02,420 --> 00:23:06,860
so the consumer link and the provider

00:23:08,570 --> 00:23:16,860
and one thing let's say if I want to

00:23:13,920 --> 00:23:19,110
investigate this specific variable what

00:23:16,860 --> 00:23:22,410
is it I can just take the name of it

00:23:19,110 --> 00:23:23,700
let's say observer two and then I want

00:23:22,410 --> 00:23:25,920
to go to the variables tab which we

00:23:23,700 --> 00:23:27,540
don't we didn't talk about I'll click on

00:23:25,920 --> 00:23:30,660
this deployment it will list all the

00:23:27,540 --> 00:23:32,730
variable used by this deployment using

00:23:30,660 --> 00:23:35,250
the posh voice command additionally it

00:23:32,730 --> 00:23:36,600
will shell out to create hub and it will

00:23:35,250 --> 00:23:38,870
fetch that variable for you so for

00:23:36,600 --> 00:23:41,400
example if I am interested in this one

00:23:38,870 --> 00:23:43,440
it will open it and it will

00:23:41,400 --> 00:23:45,780
automatically fetch that now this one

00:23:43,440 --> 00:23:47,910
might seem a bit scary but everything is

00:23:45,780 --> 00:23:49,200
local with shelling out to cloud hub the

00:23:47,910 --> 00:23:50,520
same way that all the environment

00:23:49,200 --> 00:23:52,200
variables are ready in the shell and

00:23:50,520 --> 00:23:56,940
then you can quickly take the

00:23:52,200 --> 00:23:58,380
certificate and decode one last thing I

00:23:56,940 --> 00:24:00,660
want to show is the deployment

00:23:58,380 --> 00:24:04,230
dependency if I want to quickly glance I

00:24:00,660 --> 00:24:06,780
have the CF deployment who are the other

00:24:04,230 --> 00:24:07,650
deployments consuming links from the CF

00:24:06,780 --> 00:24:11,910
deployment

00:24:07,650 --> 00:24:14,460
I can choose it and I can just quickly

00:24:11,910 --> 00:24:16,710
see let's say here I have to provide a

00:24:14,460 --> 00:24:19,350
deployment which is the CF I can quickly

00:24:16,710 --> 00:24:22,920
see all the deployments that have links

00:24:19,350 --> 00:24:26,160
consumed from the CF deployment this way

00:24:22,920 --> 00:24:27,960
if I'm updating CF maybe you want to

00:24:26,160 --> 00:24:33,300
update the other ones it depends of what

00:24:27,960 --> 00:24:35,940
you really updated this is I think this

00:24:33,300 --> 00:24:39,930
is the last thing I want to show here

00:24:35,940 --> 00:24:41,760
and to go back this is hopefully it was

00:24:39,930 --> 00:24:45,480
introduced to help to bridge all this

00:24:41,760 --> 00:24:47,310
gap off I have those many links many

00:24:45,480 --> 00:24:48,570
providers many consumers and now it's

00:24:47,310 --> 00:24:50,370
getting more confusing with the

00:24:48,570 --> 00:24:53,250
variables of guessing more confusing

00:24:50,370 --> 00:24:55,110
with the custom provider definitions and

00:24:53,250 --> 00:24:58,830
imagine you're facing a manifest with

00:24:55,110 --> 00:25:01,140
around 3,000 lines of code okay just

00:24:58,830 --> 00:25:02,460
tell me what's really happening this is

00:25:01,140 --> 00:25:04,230
a prototype that we started doing

00:25:02,460 --> 00:25:06,810
there's one limitation there's a couple

00:25:04,230 --> 00:25:08,490
of limitations with the API that Bosch

00:25:06,810 --> 00:25:10,830
is exposing we are doing many queries

00:25:08,490 --> 00:25:13,350
behind the scenes so that our next step

00:25:10,830 --> 00:25:16,070
if this one like is found to be helpful

00:25:13,350 --> 00:25:18,810
is to submit requests to Bosch director

00:25:16,070 --> 00:25:21,570
PR sorry to the Bosch director to help

00:25:18,810 --> 00:25:25,770
us visualize more and it is much quicker

00:25:21,570 --> 00:25:27,690
and understand that apology of links and

00:25:25,770 --> 00:25:29,790
always think I would always think about

00:25:27,690 --> 00:25:31,650
it with one person actually like on

00:25:29,790 --> 00:25:34,440
slack messaging like hey I have 500

00:25:31,650 --> 00:25:37,470
deployments on my director and he's a

00:25:34,440 --> 00:25:39,240
bit scared he was a bit scared like what

00:25:37,470 --> 00:25:41,010
is being what's happening with the links

00:25:39,240 --> 00:25:42,570
between those deployments it's just

00:25:41,010 --> 00:25:45,030
basically like click and just wait

00:25:42,570 --> 00:25:48,510
hopefully nothing breaks hopefully this

00:25:45,030 --> 00:25:53,330
will at least start to to make things

00:25:48,510 --> 00:25:55,570
easier and basically basically that's it

00:25:53,330 --> 00:26:02,329
thank you

00:25:55,570 --> 00:26:02,329
[Applause]

00:26:06,129 --> 00:26:12,769
you said that this was the yell at

00:26:09,200 --> 00:26:14,749
forked bar chi-x TCL I is this still on

00:26:12,769 --> 00:26:17,329
a four cores that been merged back into

00:26:14,749 --> 00:26:19,219
the main line of bosch EXT CLI it's

00:26:17,329 --> 00:26:22,309
still four but eventually which will it

00:26:19,219 --> 00:26:24,139
will go back I would be curious at least

00:26:22,309 --> 00:26:26,839
to know what the name of the fork is if

00:26:24,139 --> 00:26:28,369
maybe I just missed that but was that in

00:26:26,839 --> 00:26:29,719
the was that in one of the slides it

00:26:28,369 --> 00:26:31,099
should be a dent of the slides there's

00:26:29,719 --> 00:26:42,499
anything for the actual github yet

00:26:31,099 --> 00:26:44,559
awesome quicken question I have is I I

00:26:42,499 --> 00:26:47,179
was expecting some graphical

00:26:44,559 --> 00:26:48,739
representation I'm guessing that you

00:26:47,179 --> 00:26:50,869
have something like this maybe you were

00:26:48,739 --> 00:26:53,599
thinking of a bunch of packages for this

00:26:50,869 --> 00:26:55,309
right yeah only only only thing with

00:26:53,599 --> 00:26:57,679
that is that whenever we started to do

00:26:55,309 --> 00:27:00,919
the presentation for the graph in d3 it

00:26:57,679 --> 00:27:02,359
got very messy very quickly because

00:27:00,919 --> 00:27:04,969
there's so many things there's around a

00:27:02,359 --> 00:27:06,889
hundred links any deployment let's say

00:27:04,969 --> 00:27:10,879
or even more that's the BCF deployment

00:27:06,889 --> 00:27:14,239
and it will look bunch of lines all

00:27:10,879 --> 00:27:21,200
together so at the beginning it's not

00:27:14,239 --> 00:27:23,299
that helpful actually as it seems it's

00:27:21,200 --> 00:27:23,959
only the basically we only left it at

00:27:23,299 --> 00:27:29,179
this point

00:27:23,959 --> 00:27:32,809
I see yep any other questions

00:27:29,179 --> 00:27:33,739
Oh Tommy yeah all right no that's a

00:27:32,809 --> 00:27:36,440
different question from the first

00:27:33,739 --> 00:27:38,269
question how old does this work when

00:27:36,440 --> 00:27:41,719
you're I assume y'all are currently

00:27:38,269 --> 00:27:45,049
offices admin locally how does it work

00:27:41,719 --> 00:27:46,279
like if I'm a user like I'm on a team

00:27:45,049 --> 00:27:48,049
and I've got like some teams coke

00:27:46,279 --> 00:27:49,639
configs kicking around and stuff like

00:27:48,049 --> 00:27:51,200
that how old is this to work if I don't

00:27:49,639 --> 00:27:54,559
have full admin privileges to the

00:27:51,200 --> 00:27:56,149
director it will show you whatever the

00:27:54,559 --> 00:27:57,859
partial I can show you so all the

00:27:56,149 --> 00:27:58,940
deployments that the BA CLI show you all

00:27:57,859 --> 00:28:01,369
the conflicts that will show you

00:27:58,940 --> 00:28:03,109
so everything that technically this tool

00:28:01,369 --> 00:28:06,079
is only shelling out to the CLI and

00:28:03,109 --> 00:28:08,239
whatever permissions that the client

00:28:06,079 --> 00:28:11,179
that you are logging in with it will has

00:28:08,239 --> 00:28:13,099
it will show you so if there was weird

00:28:11,179 --> 00:28:15,019
behavior it's really more a question of

00:28:13,099 --> 00:28:17,359
like that would be weird behavior in the

00:28:15,019 --> 00:28:17,760
CLI because this thing just uses the CLI

00:28:17,359 --> 00:28:19,440
take

00:28:17,760 --> 00:28:20,700
exaggerate all the venom or maybe some

00:28:19,440 --> 00:28:22,260
of the business logic whenever we're

00:28:20,700 --> 00:28:33,500
aggregating all those endpoints together

00:28:22,260 --> 00:28:39,309
okay cool thank you thank you

00:28:33,500 --> 00:28:39,309

YouTube URL: https://www.youtube.com/watch?v=OnZePLee_Po


