Title: Cloud Foundry Security Needs The Community - Dan Jahner, Pivotal
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Cloud Foundry Security Needs The Community - Dan Jahner, Pivotal

Linus's Law applied to security could read "given enough eyeballs, all security vulnerabilities are discoverable." 

This session will focus on how the community can get involved in security testing to make Cloud Foundry more secure. Dan will explain how to responsibly disclosure security vulnerabilities found in Cloud Foundry and what the triage process looks like once you have submitted a report. He will then discuss some historical vulnerabilities and general security testing concepts to get you jump started on security testing.

https://cfseu18.sched.com/event/FRz4/cloud-foundry-security-needs-the-community-dan-jahner-pivotal
Captions: 
	00:00:00,020 --> 00:00:06,180
thanks everyone for joining I'll start

00:00:03,810 --> 00:00:09,210
out just by doing a quick introduction

00:00:06,180 --> 00:00:12,360
of myself my name is Danny honor I'm a

00:00:09,210 --> 00:00:14,820
product manager at pivotal I've been

00:00:12,360 --> 00:00:19,170
working on Cloud Foundry since early

00:00:14,820 --> 00:00:21,600
2016 during which time I've worked on

00:00:19,170 --> 00:00:23,970
two main projects both of them sort of

00:00:21,600 --> 00:00:25,740
in the security realm the first one

00:00:23,970 --> 00:00:28,470
which I had the opportunity to talk

00:00:25,740 --> 00:00:32,239
about last year at Summit is credited

00:00:28,470 --> 00:00:35,960
and most recently I've moved on to the

00:00:32,239 --> 00:00:37,890
security triage team which focuses on

00:00:35,960 --> 00:00:41,370
application security and cloud foundry

00:00:37,890 --> 00:00:43,379
and at pivotal one of the things just

00:00:41,370 --> 00:00:46,770
top of my mind right now is thinking

00:00:43,379 --> 00:00:48,930
about how to integrate security related

00:00:46,770 --> 00:00:52,199
automation and tooling into big

00:00:48,930 --> 00:00:54,960
development environments so if you all

00:00:52,199 --> 00:00:58,440
have experience on that I'd love to chat

00:00:54,960 --> 00:01:00,840
with you in the hallways so the focus of

00:00:58,440 --> 00:01:03,899
my talk today is on application security

00:01:00,840 --> 00:01:06,530
of the platform in cloud foundry I'm

00:01:03,899 --> 00:01:09,060
going to start talking about the

00:01:06,530 --> 00:01:11,100
importance that I see of the community's

00:01:09,060 --> 00:01:14,700
contributions to security in the

00:01:11,100 --> 00:01:17,970
platform after that I'll be talking

00:01:14,700 --> 00:01:19,740
about who I think should contribute run

00:01:17,970 --> 00:01:22,080
through a Quick Start Guide just like a

00:01:19,740 --> 00:01:24,479
101 on security testing if you're not

00:01:22,080 --> 00:01:26,400
familiar with how to do that and then

00:01:24,479 --> 00:01:29,430
finally I'll wrap up talking about how

00:01:26,400 --> 00:01:32,880
to do disclosure in the event that you

00:01:29,430 --> 00:01:36,740
do find a security issue in in cloud

00:01:32,880 --> 00:01:39,270
foundry let me just start by saying

00:01:36,740 --> 00:01:42,240
security loves the community right like

00:01:39,270 --> 00:01:45,960
the phrase that we often hear is like

00:01:42,240 --> 00:01:48,810
with enough eyes any bugs can be

00:01:45,960 --> 00:01:50,579
discovered or any bugs are shallow I

00:01:48,810 --> 00:01:52,770
think that really is one of the super

00:01:50,579 --> 00:01:55,049
powers of having a community right if

00:01:52,770 --> 00:01:57,000
you have a lot of people looking at

00:01:55,049 --> 00:02:00,270
something more scrutiny the more secure

00:01:57,000 --> 00:02:03,530
it's likely going to be Cloud Foundry

00:02:00,270 --> 00:02:06,240
has a lot of enterprise members we have

00:02:03,530 --> 00:02:08,009
more than 60 member companies and

00:02:06,240 --> 00:02:09,629
hundreds of individual people

00:02:08,009 --> 00:02:11,700
contributing

00:02:09,629 --> 00:02:13,379
and the exciting part about that is we

00:02:11,700 --> 00:02:17,459
all have the opportunity to contribute

00:02:13,379 --> 00:02:18,540
to the security of the platform but one

00:02:17,459 --> 00:02:20,879
thing that I will mention there's a

00:02:18,540 --> 00:02:22,890
little caveat to that right the many

00:02:20,879 --> 00:02:25,560
eyes thing only works if we're actually

00:02:22,890 --> 00:02:29,040
engaged so the whole point of this talk

00:02:25,560 --> 00:02:30,900
is to hopefully inspire to get you all

00:02:29,040 --> 00:02:34,019
to get more engaged in security in the

00:02:30,900 --> 00:02:38,129
platform so that we can find all of

00:02:34,019 --> 00:02:41,220
those bugs three areas in particular

00:02:38,129 --> 00:02:42,750
that I want to talk about for where I

00:02:41,220 --> 00:02:46,290
think the community can really make an

00:02:42,750 --> 00:02:51,109
impact in challenges in cloud foundry

00:02:46,290 --> 00:02:54,420
the the first one is about complexity

00:02:51,109 --> 00:02:56,970
thinking of this as just like specific

00:02:54,420 --> 00:03:00,690
platform level complexity or a platform

00:02:56,970 --> 00:03:03,079
component level complexity we have a lot

00:03:00,690 --> 00:03:07,590
of really highly complex components in

00:03:03,079 --> 00:03:09,450
cloud foundry and it's really hard to

00:03:07,590 --> 00:03:11,970
understand a lot of they're like

00:03:09,450 --> 00:03:14,940
boundaries and features and interactions

00:03:11,970 --> 00:03:17,099
and as that complexity grows the

00:03:14,940 --> 00:03:19,980
likelihood of security issues with that

00:03:17,099 --> 00:03:24,750
that functionality also grows alongside

00:03:19,980 --> 00:03:26,819
that so it's not necessarily bad a lot

00:03:24,750 --> 00:03:29,340
of times this is necessary but where

00:03:26,819 --> 00:03:32,970
that complexity is necessary I think a

00:03:29,340 --> 00:03:36,290
good counterbalance to that can be all

00:03:32,970 --> 00:03:38,790
of your interactions in the community to

00:03:36,290 --> 00:03:41,760
provide more scrutiny on that and

00:03:38,790 --> 00:03:46,669
provide more auditing of the security of

00:03:41,760 --> 00:03:50,760
those components another area is around

00:03:46,669 --> 00:03:53,819
just like integration and variations if

00:03:50,760 --> 00:03:55,500
you deploy Cloud Foundry you might see

00:03:53,819 --> 00:03:59,040
in like CF deployment I think there are

00:03:55,500 --> 00:04:01,230
2,500 lines of configuration and with

00:03:59,040 --> 00:04:03,690
each of those different settings there's

00:04:01,230 --> 00:04:08,129
a possibility for different things to go

00:04:03,690 --> 00:04:09,690
wrong right we do a really good job and

00:04:08,129 --> 00:04:13,500
see if deployment of shipping this

00:04:09,690 --> 00:04:16,590
really great product but Relan can only

00:04:13,500 --> 00:04:18,900
test a certain number of configurations

00:04:16,590 --> 00:04:20,760
right it's not going to be the full

00:04:18,900 --> 00:04:21,570
breadth of all the configurations that

00:04:20,760 --> 00:04:25,620
are out there

00:04:21,570 --> 00:04:28,290
in the community so I think having the

00:04:25,620 --> 00:04:31,830
community do testing on their specific

00:04:28,290 --> 00:04:36,090
flavor of Cloud Foundry is really

00:04:31,830 --> 00:04:37,680
important and I think one of the one of

00:04:36,090 --> 00:04:40,800
the reasons that that's important is

00:04:37,680 --> 00:04:43,620
like with these well-worn paths we may

00:04:40,800 --> 00:04:46,650
make assumptions about different

00:04:43,620 --> 00:04:48,540
components contracts and how they

00:04:46,650 --> 00:04:50,390
interact with each other and some of

00:04:48,540 --> 00:04:52,920
these custom deployments can like

00:04:50,390 --> 00:04:56,880
surface that those contracts aren't as

00:04:52,920 --> 00:04:59,730
well and force as they should be and

00:04:56,880 --> 00:05:03,300
then the last area is diversity of

00:04:59,730 --> 00:05:07,410
experience so a lot large number of

00:05:03,300 --> 00:05:09,990
security vulnerabilities basically like

00:05:07,410 --> 00:05:13,290
the underpinnings are that you broke an

00:05:09,990 --> 00:05:15,840
assumption that someone had right so if

00:05:13,290 --> 00:05:17,850
you have a user signup form and you

00:05:15,840 --> 00:05:20,940
assume that no one's gonna put drop

00:05:17,850 --> 00:05:24,270
table users as their first name you

00:05:20,940 --> 00:05:26,640
might have a bad time right so generally

00:05:24,270 --> 00:05:28,320
speaking people that have similar

00:05:26,640 --> 00:05:31,920
experiences are gonna have similar

00:05:28,320 --> 00:05:35,520
assumptions so having a good diversity

00:05:31,920 --> 00:05:38,010
of people in the community is a good way

00:05:35,520 --> 00:05:40,590
to counter that so like fresh eyes and

00:05:38,010 --> 00:05:44,340
new perspectives uncover a lot of things

00:05:40,590 --> 00:05:45,990
that are overlooked one thing also

00:05:44,340 --> 00:05:48,720
mentioned is I think this also applies

00:05:45,990 --> 00:05:52,440
to security experience itself which is

00:05:48,720 --> 00:05:55,110
to say like a cryptographer might be the

00:05:52,440 --> 00:05:57,660
best person to try to attack a system by

00:05:55,110 --> 00:06:00,420
like predicting a random number

00:05:57,660 --> 00:06:03,240
generator and like using that to

00:06:00,420 --> 00:06:05,970
leverage attack but also somebody that

00:06:03,240 --> 00:06:08,520
doesn't have specific experience and

00:06:05,970 --> 00:06:11,040
security might be able to discover that

00:06:08,520 --> 00:06:13,050
like there's a default user and at the

00:06:11,040 --> 00:06:15,090
end of the day if they both get to the

00:06:13,050 --> 00:06:19,650
same place I think both of those are

00:06:15,090 --> 00:06:22,590
valuable things to research alright so

00:06:19,650 --> 00:06:25,890
who should consider contributing to

00:06:22,590 --> 00:06:28,620
security at Cloud Foundry hopefully you

00:06:25,890 --> 00:06:32,460
are listening to the the previous point

00:06:28,620 --> 00:06:34,250
which is I think everyone's experiences

00:06:32,460 --> 00:06:36,370
are really valid and I think

00:06:34,250 --> 00:06:39,980
diversity of experience is important so

00:06:36,370 --> 00:06:42,980
you all that's that's the answer to that

00:06:39,980 --> 00:06:45,620
question all right so let's talk about

00:06:42,980 --> 00:06:48,440
how to contribute so next few slides I'm

00:06:45,620 --> 00:06:50,030
just going to go over if you don't have

00:06:48,440 --> 00:06:51,830
any experience in security you're

00:06:50,030 --> 00:06:54,140
thinking like hey this might be a good

00:06:51,830 --> 00:06:59,900
idea but you don't know where to start

00:06:54,140 --> 00:07:01,640
this is like a testing 101 but of course

00:06:59,900 --> 00:07:03,710
off I'll start with a disclaimer

00:07:01,640 --> 00:07:06,950
so next few slides I'm going to talk

00:07:03,710 --> 00:07:09,950
about like thinking about how you could

00:07:06,950 --> 00:07:12,920
do an attack and picking your target for

00:07:09,950 --> 00:07:14,990
attack like one of the assumptions here

00:07:12,920 --> 00:07:18,620
is you're working on a local environment

00:07:14,990 --> 00:07:21,380
or an isolated environment if you don't

00:07:18,620 --> 00:07:24,350
have permission to do vulnerability

00:07:21,380 --> 00:07:26,450
assessments on a platform it's likely

00:07:24,350 --> 00:07:30,580
illegal so don't do that

00:07:26,450 --> 00:07:35,210
certainly unethical if anything so don't

00:07:30,580 --> 00:07:37,730
alright so first step is really about a

00:07:35,210 --> 00:07:40,669
mindset right like I've got a picture

00:07:37,730 --> 00:07:44,000
here of a bunny and if this is a normal

00:07:40,669 --> 00:07:46,190
bunny it's gonna look at those pegs and

00:07:44,000 --> 00:07:48,100
it's gonna say I'm gonna get to the

00:07:46,190 --> 00:07:52,940
other side by jumping over those pegs

00:07:48,100 --> 00:07:54,710
but if it's a hacker bunny it thinks why

00:07:52,940 --> 00:07:58,400
do I go to all that work I should just

00:07:54,710 --> 00:08:00,440
go right through like I don't care about

00:07:58,400 --> 00:08:03,169
your access control I want to go from

00:08:00,440 --> 00:08:06,729
one side to the other so first thing is

00:08:03,169 --> 00:08:11,770
thinking like a hacker don't focus on

00:08:06,729 --> 00:08:14,419
like positive scenarios don't focus on

00:08:11,770 --> 00:08:16,700
where you would expect it to work

00:08:14,419 --> 00:08:19,990
you'd have to focus on things that like

00:08:16,700 --> 00:08:23,150
are negative scenarios and edge cases so

00:08:19,990 --> 00:08:25,520
that's the first thing a few things that

00:08:23,150 --> 00:08:27,290
I'll just point out as resources that I

00:08:25,520 --> 00:08:31,960
thought were really interesting as a

00:08:27,290 --> 00:08:35,750
mine mine said shift were the first ones

00:08:31,960 --> 00:08:38,419
physical security testing it might sound

00:08:35,750 --> 00:08:40,789
a little bit counterintuitive but the

00:08:38,419 --> 00:08:43,010
reason that I thought these resources

00:08:40,789 --> 00:08:45,040
are really interesting is because

00:08:43,010 --> 00:08:47,680
they're really engaging

00:08:45,040 --> 00:08:50,860
and also it's one of those things where

00:08:47,680 --> 00:08:54,040
like I've got a elevator and AD or

00:08:50,860 --> 00:08:56,680
hacking link on here and it's

00:08:54,040 --> 00:08:58,240
interesting to watch those and then look

00:08:56,680 --> 00:09:01,000
at things that you experience in your

00:08:58,240 --> 00:09:03,610
everyday life and think like oh hey I

00:09:01,000 --> 00:09:06,550
could hack this elevator like it's an

00:09:03,610 --> 00:09:08,560
interesting thing right especially when

00:09:06,550 --> 00:09:11,260
your intention is to change your mindset

00:09:08,560 --> 00:09:13,029
a bit and also I think a lot of these

00:09:11,260 --> 00:09:16,380
these principles sort of carry over

00:09:13,029 --> 00:09:19,959
between the tooth so like thinking about

00:09:16,380 --> 00:09:21,550
the various points of entry thinking

00:09:19,959 --> 00:09:24,640
about how those are secured how they're

00:09:21,550 --> 00:09:26,290
authorized overcoming different

00:09:24,640 --> 00:09:28,240
obstacles along the way and like

00:09:26,290 --> 00:09:31,660
chaining those together to get from

00:09:28,240 --> 00:09:35,050
point A to point B I think translates

00:09:31,660 --> 00:09:37,480
well the other thing is there's this

00:09:35,050 --> 00:09:40,810
whole host of applications a lot of them

00:09:37,480 --> 00:09:42,370
are hosted by a wasp where they

00:09:40,810 --> 00:09:45,250
basically like they build an app and

00:09:42,370 --> 00:09:48,310
they build it intentionally in securely

00:09:45,250 --> 00:09:50,230
so that you can go in and get some

00:09:48,310 --> 00:09:54,279
hands-on experience and doing different

00:09:50,230 --> 00:09:58,360
exploits so you can the ones that I've

00:09:54,279 --> 00:10:02,230
tried our wasp juice shop and hacked

00:09:58,360 --> 00:10:03,610
this site is also like a just a site

00:10:02,230 --> 00:10:05,860
that you can visit without deploying

00:10:03,610 --> 00:10:07,720
anything but those are really cool

00:10:05,860 --> 00:10:11,920
because they they basically just make it

00:10:07,720 --> 00:10:13,420
a game right and and the fact that

00:10:11,920 --> 00:10:18,610
you're gonna succeed makes it a lot more

00:10:13,420 --> 00:10:20,890
fun all right so you're starting to

00:10:18,610 --> 00:10:24,579
think like a hacker the next thing you

00:10:20,890 --> 00:10:26,680
need to do is start some actual testing

00:10:24,579 --> 00:10:30,339
so the first thing that you might want

00:10:26,680 --> 00:10:33,399
to consider is what sort of attack

00:10:30,339 --> 00:10:35,370
methods you're gonna use so one of the

00:10:33,399 --> 00:10:38,290
ways that you can go about this is

00:10:35,370 --> 00:10:40,270
basically just like go to the wasp top

00:10:38,290 --> 00:10:42,100
ten if you're not familiar with this

00:10:40,270 --> 00:10:43,450
this is a list of the most common

00:10:42,100 --> 00:10:46,720
vulnerabilities that are found in

00:10:43,450 --> 00:10:49,089
software a way that you could go about

00:10:46,720 --> 00:10:51,329
this is like select a specific one that

00:10:49,089 --> 00:10:54,790
you're really interested in like

00:10:51,329 --> 00:10:56,920
thinking about injection thinking about

00:10:54,790 --> 00:10:59,520
the various types of injection that

00:10:56,920 --> 00:10:59,520
happened in

00:11:00,180 --> 00:11:05,649
what sort of general attacks in

00:11:03,300 --> 00:11:07,089
injection look like and then you could

00:11:05,649 --> 00:11:10,000
also explore some of the tooling that

00:11:07,089 --> 00:11:13,449
surrounds a lot of these a lot of these

00:11:10,000 --> 00:11:17,079
attacks a nice primer on that is there's

00:11:13,449 --> 00:11:19,209
this presentation by Pedro duty that

00:11:17,079 --> 00:11:20,980
I've linked up there they walk through

00:11:19,209 --> 00:11:22,870
each of these different exploits and

00:11:20,980 --> 00:11:28,149
like get into a lot more detail about

00:11:22,870 --> 00:11:32,709
each of them another option that you

00:11:28,149 --> 00:11:37,000
have is looking at historical

00:11:32,709 --> 00:11:38,769
vulnerabilities so like if you basically

00:11:37,000 --> 00:11:41,949
look at all the vulnerabilities that

00:11:38,769 --> 00:11:44,139
exist if you see for example that a

00:11:41,949 --> 00:11:48,550
specific component has been affected

00:11:44,139 --> 00:11:50,139
previously by sequel injection a pretty

00:11:48,550 --> 00:11:52,060
reasonable assumption would be that that

00:11:50,139 --> 00:11:55,000
application doesn't have holistic

00:11:52,060 --> 00:11:57,689
protections for sequel injection so if

00:11:55,000 --> 00:12:03,309
you wanted to narrow down your targets

00:11:57,689 --> 00:12:05,430
and see basically just like increase

00:12:03,309 --> 00:12:09,839
your odds of success you might want to

00:12:05,430 --> 00:12:09,839
look at historical vulnerabilities

00:12:10,019 --> 00:12:16,050
speaking of historical vulnerabilities a

00:12:12,610 --> 00:12:19,360
quick plug today at five-thirty

00:12:16,050 --> 00:12:22,000
mollyandrob are doing a talk which I

00:12:19,360 --> 00:12:23,649
hear is not going to be recorded about

00:12:22,000 --> 00:12:25,839
the top five security vulnerabilities

00:12:23,649 --> 00:12:29,620
that we've discovered in cloud foundry

00:12:25,839 --> 00:12:32,589
so definitely go to that all right so

00:12:29,620 --> 00:12:35,620
the the last method that I'll mention

00:12:32,589 --> 00:12:40,360
here is just doing plain old automated

00:12:35,620 --> 00:12:45,279
tooling testing I mentioned this but I

00:12:40,360 --> 00:12:47,170
will sort of put a little caveat on it

00:12:45,279 --> 00:12:48,910
which is a lot of these are really good

00:12:47,170 --> 00:12:50,470
at finding things but they also find

00:12:48,910 --> 00:12:53,350
other things along the way that aren't

00:12:50,470 --> 00:12:55,779
very good so if you do decide to use

00:12:53,350 --> 00:12:58,029
automated tooling make sure you look at

00:12:55,779 --> 00:13:00,279
the end result and validate that there

00:12:58,029 --> 00:13:04,779
are actual security issues that you care

00:13:00,279 --> 00:13:08,100
about and not just a configuration of

00:13:04,779 --> 00:13:08,100
your deployment or something like that

00:13:08,420 --> 00:13:13,290
all right so you've got a method the

00:13:10,800 --> 00:13:18,720
next thing you want to do is think about

00:13:13,290 --> 00:13:20,699
a target for your test this is really

00:13:18,720 --> 00:13:23,369
just a matter of like doing a bit of

00:13:20,699 --> 00:13:25,230
good research you would want to be

00:13:23,369 --> 00:13:27,749
somewhat familiar with the application

00:13:25,230 --> 00:13:29,369
that you're testing do a little bit of

00:13:27,749 --> 00:13:31,709
research on all of its different

00:13:29,369 --> 00:13:34,619
behaviors and their interactions and

00:13:31,709 --> 00:13:36,629
configurations and then also look at all

00:13:34,619 --> 00:13:40,019
of its interfaces if it has different

00:13:36,629 --> 00:13:42,029
api's different ways to interact with

00:13:40,019 --> 00:13:45,839
them each of those can be a different

00:13:42,029 --> 00:13:47,100
surface area all right then the last

00:13:45,839 --> 00:13:51,299
thing that you want to do is you want to

00:13:47,100 --> 00:13:53,549
perform the test basically what you're

00:13:51,299 --> 00:13:57,329
looking for here is any change in

00:13:53,549 --> 00:13:59,579
behavior or response that compromises

00:13:57,329 --> 00:14:01,649
either confidentiality which is

00:13:59,579 --> 00:14:05,239
information you shouldn't see based on

00:14:01,649 --> 00:14:08,069
who you are in the in the attack

00:14:05,239 --> 00:14:10,889
integrity so if you can modify something

00:14:08,069 --> 00:14:14,220
that you shouldn't be able to modify or

00:14:10,889 --> 00:14:16,199
availability like if you find a way to

00:14:14,220 --> 00:14:19,529
send three attacks and it falls over

00:14:16,199 --> 00:14:21,089
that that's certainly problematic some

00:14:19,529 --> 00:14:23,790
of these can be really subtle like if

00:14:21,089 --> 00:14:25,439
you send an attack and it sends back an

00:14:23,790 --> 00:14:27,990
error message but the error message

00:14:25,439 --> 00:14:29,519
includes details about the environment

00:14:27,990 --> 00:14:33,179
or something like that that could be

00:14:29,519 --> 00:14:35,490
cause for concern so look how first

00:14:33,179 --> 00:14:38,220
subtle changes and do a little bit more

00:14:35,490 --> 00:14:40,049
research the last thing you know

00:14:38,220 --> 00:14:43,559
mentioned is denial of service testing

00:14:40,049 --> 00:14:46,799
or like availability testing is one of

00:14:43,559 --> 00:14:49,769
the like outliers here which is usually

00:14:46,799 --> 00:14:54,149
you don't want to do availability

00:14:49,769 --> 00:14:57,089
testing that basically just like throws

00:14:54,149 --> 00:14:59,490
a ton of load at component there are a

00:14:57,089 --> 00:15:01,829
lot of tools and services that prevent

00:14:59,490 --> 00:15:03,449
that sort of attack so like just

00:15:01,829 --> 00:15:05,220
throwing a bunch of loadout capi and

00:15:03,449 --> 00:15:09,779
seeing it fall over isn't super

00:15:05,220 --> 00:15:11,639
interesting or unexpected and then the

00:15:09,779 --> 00:15:14,759
last thing is around reporting so as

00:15:11,639 --> 00:15:18,260
you're doing this testing thing to point

00:15:14,759 --> 00:15:20,240
out is make sure that you keep good logs

00:15:18,260 --> 00:15:23,270
the tests that you're doing so that if

00:15:20,240 --> 00:15:25,190
you are successful you can actually

00:15:23,270 --> 00:15:27,260
report it and it would be really easy

00:15:25,190 --> 00:15:31,250
for us to reproduce and really easy for

00:15:27,260 --> 00:15:33,920
us to fix testing can be really

00:15:31,250 --> 00:15:36,130
frustrating because 99% of the things

00:15:33,920 --> 00:15:41,060
that you're doing are going to fail

00:15:36,130 --> 00:15:42,890
which is a good thing so if you finally

00:15:41,060 --> 00:15:44,330
do get a result that you think is a

00:15:42,890 --> 00:15:46,010
vulnerability you want to make sure that

00:15:44,330 --> 00:15:51,590
you're recording along the way to make

00:15:46,010 --> 00:15:53,570
sure that you can reproduce that and the

00:15:51,590 --> 00:15:56,780
other notes here that I'll reiterate in

00:15:53,570 --> 00:15:58,160
the disclosure section are if you find a

00:15:56,780 --> 00:16:00,890
vulnerability you're super excited about

00:15:58,160 --> 00:16:03,740
it please do not disclose it publicly

00:16:00,890 --> 00:16:07,400
please don't create an issue on the

00:16:03,740 --> 00:16:09,640
components github don't create a PR even

00:16:07,400 --> 00:16:13,100
even if you're trying to be helpful

00:16:09,640 --> 00:16:14,720
because we want to follow a responsible

00:16:13,100 --> 00:16:19,490
disclosure process which I'll talk about

00:16:14,720 --> 00:16:21,980
next all right so the last thing I'm

00:16:19,490 --> 00:16:26,090
going to cover is responsible disclosure

00:16:21,980 --> 00:16:29,170
so basically what we encourage here is

00:16:26,090 --> 00:16:34,340
that people report vulnerabilities to us

00:16:29,170 --> 00:16:36,530
privately so if you find something the

00:16:34,340 --> 00:16:39,770
concept of responsible disclosure is

00:16:36,530 --> 00:16:41,420
really just disclosing to the maintainer

00:16:39,770 --> 00:16:44,290
of the software privately that you've

00:16:41,420 --> 00:16:46,490
discovered something and giving them a

00:16:44,290 --> 00:16:48,110
reasonable amount of time to fix it

00:16:46,490 --> 00:16:52,400
before you start talking about it in

00:16:48,110 --> 00:16:54,710
public so the idea is when we do the

00:16:52,400 --> 00:16:57,650
disclosure hopefully we can also provide

00:16:54,710 --> 00:16:59,360
people in the community the fixed

00:16:57,650 --> 00:17:01,070
versions so that they can remediate that

00:16:59,360 --> 00:17:04,940
at the same time that they know it's an

00:17:01,070 --> 00:17:07,820
issue and as part of that process like

00:17:04,940 --> 00:17:10,160
we we also do commit to disclosing

00:17:07,820 --> 00:17:13,880
vulnerabilities that are discovered in a

00:17:10,160 --> 00:17:16,370
reasonable amount of time so if we get a

00:17:13,880 --> 00:17:18,230
fix for something the next step is like

00:17:16,370 --> 00:17:20,030
telling everyone that a vulnerability

00:17:18,230 --> 00:17:22,130
exists so that you can make a good

00:17:20,030 --> 00:17:26,710
judgment about when you want to update

00:17:22,130 --> 00:17:26,710
your systems so they're not vulnerable

00:17:27,010 --> 00:17:32,210
the disclosure and vulnerability process

00:17:30,530 --> 00:17:33,980
is really straightforward it's just

00:17:32,210 --> 00:17:37,669
starting with reporting going through

00:17:33,980 --> 00:17:41,899
validation remediation and then finally

00:17:37,669 --> 00:17:43,629
disclosure to the public hopefully if

00:17:41,899 --> 00:17:46,700
you didn't take anything from this talk

00:17:43,629 --> 00:17:48,889
this is the one thing that you do which

00:17:46,700 --> 00:17:52,370
is if you ever encounter a security

00:17:48,889 --> 00:17:55,009
vulnerability in cloud foundry please do

00:17:52,370 --> 00:17:58,100
send an email to security at cloud

00:17:55,009 --> 00:18:01,730
foundry org to let us know and we'll

00:17:58,100 --> 00:18:05,210
research it and get back to you

00:18:01,730 --> 00:18:07,129
as a general rule of thumb here err on

00:18:05,210 --> 00:18:10,129
the side of being more communicative

00:18:07,129 --> 00:18:12,470
than less so like if you see something

00:18:10,129 --> 00:18:14,090
and you're like I'm pretty sure but not

00:18:12,470 --> 00:18:17,450
really sure I don't want to I don't want

00:18:14,090 --> 00:18:19,730
to bother them change your mindset

00:18:17,450 --> 00:18:22,419
definitely bother us send it to us and

00:18:19,730 --> 00:18:27,289
we're fine if it turns out not to be

00:18:22,419 --> 00:18:29,629
vulnerable 'ti quick shout out here to

00:18:27,289 --> 00:18:31,029
the security triage team these are my

00:18:29,629 --> 00:18:34,129
colleagues the folks that I work with

00:18:31,029 --> 00:18:37,190
every day they handle both the open

00:18:34,129 --> 00:18:41,980
source Cloud Foundry security stuff and

00:18:37,190 --> 00:18:44,480
also the security things with piffle so

00:18:41,980 --> 00:18:45,590
if you send a report to us you're likely

00:18:44,480 --> 00:18:48,950
going to be talking to one of these

00:18:45,590 --> 00:18:51,740
folks I'm super biased but I think they

00:18:48,950 --> 00:18:54,220
do great work so I think you'll you'll

00:18:51,740 --> 00:18:57,220
be surprised and delighted with the

00:18:54,220 --> 00:18:57,220
interaction

00:18:57,250 --> 00:19:02,480
all right so validation so once you send

00:19:00,169 --> 00:19:06,409
us a report we're gonna validate it this

00:19:02,480 --> 00:19:09,679
is pretty straightforward basically our

00:19:06,409 --> 00:19:13,370
intention here is to try to verify what

00:19:09,679 --> 00:19:16,549
you've sent to us our hope is that we

00:19:13,370 --> 00:19:18,169
can really get a good handle of the

00:19:16,549 --> 00:19:21,139
issue that you report and make sure that

00:19:18,169 --> 00:19:25,039
we can analyze any impacts that it has

00:19:21,139 --> 00:19:26,570
on the platform if it's unclear or if we

00:19:25,039 --> 00:19:30,830
don't know we're gonna reach out to you

00:19:26,570 --> 00:19:33,500
and ask some questions here so it'd be

00:19:30,830 --> 00:19:36,470
great if you report something to respond

00:19:33,500 --> 00:19:39,110
back to us and then of course

00:19:36,470 --> 00:19:41,899
remediation so if we are able to

00:19:39,110 --> 00:19:45,009
validate something we work with the

00:19:41,899 --> 00:19:49,009
teams to produce fixes

00:19:45,009 --> 00:19:51,919
that patched that issue the time frame

00:19:49,009 --> 00:19:55,070
for this is gonna vary but the main

00:19:51,919 --> 00:19:57,619
motivators here are primarily severity

00:19:55,070 --> 00:20:01,509
of the issue so if it's a critical or a

00:19:57,619 --> 00:20:03,499
high severity issue we're gonna start

00:20:01,509 --> 00:20:04,940
working on it right away we're gonna

00:20:03,499 --> 00:20:07,279
have eyes on it and we're gonna try to

00:20:04,940 --> 00:20:09,169
get something out right away

00:20:07,279 --> 00:20:12,200
but then of course we also have to weigh

00:20:09,169 --> 00:20:14,599
the complexity of the fix so the

00:20:12,200 --> 00:20:17,570
combination of those two determine how

00:20:14,599 --> 00:20:23,059
quickly we are able to remediated

00:20:17,570 --> 00:20:24,950
something lastly once we've got fixes

00:20:23,059 --> 00:20:27,409
out we've released something we'll do

00:20:24,950 --> 00:20:30,349
the disclosure this is primarily

00:20:27,409 --> 00:20:33,169
communicated via that Cloud Foundry org

00:20:30,349 --> 00:20:34,820
website if you go to Cloud Foundry org

00:20:33,169 --> 00:20:37,759
slash security you'll see a bunch of

00:20:34,820 --> 00:20:41,299
security notices we do this shortly

00:20:37,759 --> 00:20:43,489
after it fixes available and we

00:20:41,299 --> 00:20:45,529
basically just do this so that as

00:20:43,489 --> 00:20:49,399
members of the community you can look at

00:20:45,529 --> 00:20:51,679
this and say I see this vulnerability

00:20:49,399 --> 00:20:56,479
was disclosed I see what severity it is

00:20:51,679 --> 00:20:59,209
I can make a really reasoned decision

00:20:56,479 --> 00:21:01,909
about the risk of either patching or not

00:20:59,209 --> 00:21:07,509
patching that issue and it's sort of up

00:21:01,909 --> 00:21:10,339
to you to do that but please do patch so

00:21:07,509 --> 00:21:13,429
alright that's the end of the disclosure

00:21:10,339 --> 00:21:15,649
process as I wrap up I just want to say

00:21:13,429 --> 00:21:18,440
thank you to these community members

00:21:15,649 --> 00:21:21,799
that have reported security issues to us

00:21:18,440 --> 00:21:23,539
over the past year Cloud Foundry is

00:21:21,799 --> 00:21:26,329
definitely more secure because of the

00:21:23,539 --> 00:21:30,200
involvement of the community

00:21:26,329 --> 00:21:34,279
but I will say hopefully I've inspired

00:21:30,200 --> 00:21:37,279
some of you to do more testing and have

00:21:34,279 --> 00:21:39,529
a little bit more interaction with us in

00:21:37,279 --> 00:21:43,099
the open-source security side of things

00:21:39,529 --> 00:21:44,839
and next year I'll come back and I'll do

00:21:43,099 --> 00:21:47,959
a presentation called community level

00:21:44,839 --> 00:21:49,729
security where I talk about all the cool

00:21:47,959 --> 00:21:53,979
reports that you all have submitted to

00:21:49,729 --> 00:21:53,979

YouTube URL: https://www.youtube.com/watch?v=zpT_S-S9IDA


