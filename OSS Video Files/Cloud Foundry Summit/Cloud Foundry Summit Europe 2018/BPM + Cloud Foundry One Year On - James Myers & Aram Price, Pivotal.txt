Title: BPM + Cloud Foundry One Year On - James Myers & Aram Price, Pivotal
Publication date: 2018-10-11
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	BPM + Cloud Foundry One Year On - James Myers & Aram Price, Pivotal

Since BPM debuted last year, nearly all of the release in cf-deployment are converting to use BPM, and v1.0 is available. This talk will discuss BPM’s evolution over the past year, why you should convert your release to use BPM, and some cases where BPM might not (yet) make sense. James and Aram will discuss some of the challenges and tradeoffs of adapting BPM for the releases which have been able to adopt it. They will also discuss where we might go in the future so that we more BOSH releases can adopt BPM.

This talk will also look at what future benefits BPM enables for the release-author community. Examples we hope to cover:
 - BPM’s declarative config which enables static analysis of job-process requirements, and could be transliterated into other container scheduling platform formats (ex: K8s pod spec).
 - Bring consistency to the Operator job-process debugging experience.

https://cfseu18.sched.com/event/GEWK/bpm-cloud-foundry-one-year-on-james-myers-aram-price-pivotal
Captions: 
	00:00:00,000 --> 00:00:05,430
excellent hello everyone my name is Erin

00:00:02,399 --> 00:00:06,600
price and this is Jim and I'm standing

00:00:05,430 --> 00:00:09,240
right in the middle of slice that's dumb

00:00:06,600 --> 00:00:12,719
just a second here so we're gonna talk

00:00:09,240 --> 00:00:16,350
about BPM and Cloud Foundry one year in

00:00:12,719 --> 00:00:17,850
we started this project about a year and

00:00:16,350 --> 00:00:21,210
a half ago we did a presentation last

00:00:17,850 --> 00:00:22,710
year at basel CF summit and we're going

00:00:21,210 --> 00:00:25,050
to talk about what we've learned from

00:00:22,710 --> 00:00:27,980
trying to get most of the CF application

00:00:25,050 --> 00:00:30,990
runtime running under bpm

00:00:27,980 --> 00:00:32,820
james myers software engineer pivotal

00:00:30,990 --> 00:00:34,610
software my name is aaron price and

00:00:32,820 --> 00:00:37,500
engineering lead with physical software

00:00:34,610 --> 00:00:40,710
we both worked on various runtime and

00:00:37,500 --> 00:00:43,200
Bausch components over the years so just

00:00:40,710 --> 00:00:46,129
a quick overview I'll talk a little bit

00:00:43,200 --> 00:00:49,289
about bpm why you might want to use it

00:00:46,129 --> 00:00:51,840
what we learned from this last year of

00:00:49,289 --> 00:00:53,430
getting people to adopt it and then Jim

00:00:51,840 --> 00:00:59,609
will go through some product updates and

00:00:53,430 --> 00:01:01,289
roadmap to BPM V - so what does BPM I

00:00:59,609 --> 00:01:03,199
think given the size of this crowd will

00:01:01,289 --> 00:01:06,360
probably fly through this pretty quickly

00:01:03,199 --> 00:01:08,010
BPM is a Bosch process manager it

00:01:06,360 --> 00:01:09,510
provides declarative configuration for

00:01:08,010 --> 00:01:12,229
running the processes in your boss jobs

00:01:09,510 --> 00:01:14,340
as a Bosch author bas-reliefs author

00:01:12,229 --> 00:01:17,070
should provide a consistent execution

00:01:14,340 --> 00:01:19,759
environment for those processes that is

00:01:17,070 --> 00:01:21,960
to say it starts up a little container

00:01:19,759 --> 00:01:25,920
keeping your job isolated to the rest of

00:01:21,960 --> 00:01:28,110
the file system in it does a has an

00:01:25,920 --> 00:01:31,409
opinionated enforcement of Bosch

00:01:28,110 --> 00:01:32,970
conventions which are sort of common but

00:01:31,409 --> 00:01:36,270
not necessarily enforced across the

00:01:32,970 --> 00:01:38,280
application run time it also provides a

00:01:36,270 --> 00:01:39,479
nascent operator interface for

00:01:38,280 --> 00:01:42,180
inspecting what's going on with boss

00:01:39,479 --> 00:01:43,409
jobs so BPM list is one of those

00:01:42,180 --> 00:01:47,000
examples and we'll cover some of that

00:01:43,409 --> 00:01:50,310
some more of them later this is what

00:01:47,000 --> 00:01:53,340
using BPM looks like in your Bosch

00:01:50,310 --> 00:01:56,030
release so the BPM yeah Maul contains

00:01:53,340 --> 00:01:59,189
one or more processes that are named

00:01:56,030 --> 00:02:01,710
contains a path to an executable could

00:01:59,189 --> 00:02:03,479
be a script could be a binary any

00:02:01,710 --> 00:02:05,790
arguments you want to pass environmental

00:02:03,479 --> 00:02:10,349
variables you want to set some limits

00:02:05,790 --> 00:02:11,730
you can set for memory open files you

00:02:10,349 --> 00:02:13,120
let the system know whether you want to

00:02:11,730 --> 00:02:15,450
be able to write to an ephemeral

00:02:13,120 --> 00:02:17,799
SCOR right - a persistent disk location

00:02:15,450 --> 00:02:18,940
and then there's this unsafe section

00:02:17,799 --> 00:02:20,709
which we'll talk a little bit more about

00:02:18,940 --> 00:02:22,420
that's kind of an escape valve for those

00:02:20,709 --> 00:02:26,200
releases that don't conform to sort of

00:02:22,420 --> 00:02:27,879
normal Bosch conventions and then we

00:02:26,200 --> 00:02:32,079
involve Monnett but only as a way to

00:02:27,879 --> 00:02:37,030
invoke BPM using start/stop conventions

00:02:32,079 --> 00:02:40,569
and a well-known paedophile location so

00:02:37,030 --> 00:02:42,430
why should you use BPM it removes a lot

00:02:40,569 --> 00:02:46,239
of boilerplate that developers have been

00:02:42,430 --> 00:02:48,579
either cutting their teeth on copying

00:02:46,239 --> 00:02:50,290
and pasting from other releases to do

00:02:48,579 --> 00:02:52,239
things like kid file management log

00:02:50,290 --> 00:02:54,549
redirection signal handling process

00:02:52,239 --> 00:02:57,190
execution and termination directory

00:02:54,549 --> 00:02:59,859
creation permissions setting and

00:02:57,190 --> 00:03:01,870
privilege de-escalation so if you look

00:02:59,859 --> 00:03:03,640
at some of the older versions of the

00:03:01,870 --> 00:03:07,750
releases like Diego that had been using

00:03:03,640 --> 00:03:10,030
bash previously there are probably

00:03:07,750 --> 00:03:13,900
hundreds if not more lines of bash that

00:03:10,030 --> 00:03:15,609
have been removed by adding bpm it

00:03:13,900 --> 00:03:17,290
provides a production-ready replacement

00:03:15,609 --> 00:03:19,269
for these things that is well tested in

00:03:17,290 --> 00:03:22,329
a golang codebase and also allows us to

00:03:19,269 --> 00:03:25,959
address bugs in these these particular

00:03:22,329 --> 00:03:27,549
cases and security issues in a single

00:03:25,959 --> 00:03:29,889
place rather than having to replicate

00:03:27,549 --> 00:03:32,319
those fixes across tens of Bosch

00:03:29,889 --> 00:03:33,940
releases I think that's one of the

00:03:32,319 --> 00:03:36,669
things that is being presented in the

00:03:33,940 --> 00:03:38,560
security talk this afternoon some of the

00:03:36,669 --> 00:03:41,709
lessons learned from CF security

00:03:38,560 --> 00:03:43,449
problems over the past year so it

00:03:41,709 --> 00:03:46,540
provides isolation and security by

00:03:43,449 --> 00:03:49,299
default at the file system level the

00:03:46,540 --> 00:03:51,340
processes can only see the resources

00:03:49,299 --> 00:03:53,079
that they should have access to so job a

00:03:51,340 --> 00:03:54,790
can't read the configuration file for

00:03:53,079 --> 00:03:57,760
job B even though they're on the same

00:03:54,790 --> 00:04:00,359
virtual machine this provides a

00:03:57,760 --> 00:04:02,470
credential isolation to some degree

00:04:00,359 --> 00:04:04,599
processes have a consistent execution

00:04:02,470 --> 00:04:06,669
environment they have a very scoped view

00:04:04,599 --> 00:04:08,109
of the stem cell that's consistent

00:04:06,669 --> 00:04:13,030
whether they're co-located with one or

00:04:08,109 --> 00:04:14,709
100 jobs and as we saw before you can

00:04:13,030 --> 00:04:16,150
opt in to be able to write to ephemeral

00:04:14,709 --> 00:04:17,769
persistent data directories but

00:04:16,150 --> 00:04:20,799
otherwise the rest of the stem cell is

00:04:17,769 --> 00:04:23,770
off-limits for writing at the process

00:04:20,799 --> 00:04:26,030
level each process starts its execution

00:04:23,770 --> 00:04:27,860
in its own process namespace

00:04:26,030 --> 00:04:31,370
if you're inside that process namespace

00:04:27,860 --> 00:04:34,610
you only see yourself running and secure

00:04:31,370 --> 00:04:36,110
by default so prevents tampering with

00:04:34,610 --> 00:04:38,300
co-located software either reading

00:04:36,110 --> 00:04:40,970
another job config or writing to the

00:04:38,300 --> 00:04:44,690
stem cell it automatically drops root

00:04:40,970 --> 00:04:47,240
privileges and we apply a conservative

00:04:44,690 --> 00:04:51,470
but but common set con profile to all

00:04:47,240 --> 00:04:53,860
the jobs running so it also provides

00:04:51,470 --> 00:04:57,920
some operational operational standards

00:04:53,860 --> 00:05:00,380
so BPM start expects a process to start

00:04:57,920 --> 00:05:02,510
non demonised it writes the pit file

00:05:00,380 --> 00:05:06,410
directly to allow mana to note the

00:05:02,510 --> 00:05:07,730
process is up BPM stop has a

00:05:06,410 --> 00:05:11,330
conventional way of shutting down a

00:05:07,730 --> 00:05:13,630
process sends sig sig quit sync will and

00:05:11,330 --> 00:05:16,600
sig kill and then remove the pit file

00:05:13,630 --> 00:05:19,010
for operators we have some tools like

00:05:16,600 --> 00:05:20,240
BPM logs which allows you to see the

00:05:19,010 --> 00:05:22,340
standard out in standard error of a

00:05:20,240 --> 00:05:24,080
process trace which provides an

00:05:22,340 --> 00:05:26,480
opinionated systrace of a running

00:05:24,080 --> 00:05:28,550
process pid' to get the pit file and

00:05:26,480 --> 00:05:32,150
shell allows you to execute bash inside

00:05:28,550 --> 00:05:33,710
the boss inside the jobs container if

00:05:32,150 --> 00:05:37,850
you need to do debugging or understand

00:05:33,710 --> 00:05:40,220
what's happening with the job all right

00:05:37,850 --> 00:05:42,970
deep breath some things we ran into

00:05:40,220 --> 00:05:47,480
learned from while getting the CF a

00:05:42,970 --> 00:05:49,550
plenty to adopt BPM for most of the jobs

00:05:47,480 --> 00:05:53,090
running in that in that bosch release

00:05:49,550 --> 00:05:55,700
the bosch deployment file system

00:05:53,090 --> 00:05:58,010
dependencies are super hard so sharing

00:05:55,700 --> 00:06:01,130
volumes right now is implicit and based

00:05:58,010 --> 00:06:02,690
on path in the BPM file we're not super

00:06:01,130 --> 00:06:05,720
happy about this but it's a good good

00:06:02,690 --> 00:06:08,090
first step that means is that if you

00:06:05,720 --> 00:06:09,740
want to share a directory between Java

00:06:08,090 --> 00:06:12,380
and job B both of them has to include

00:06:09,740 --> 00:06:16,130
that as a volume that they mount inside

00:06:12,380 --> 00:06:17,930
there became mo because mana doesn't

00:06:16,130 --> 00:06:20,690
start things in a deterministic way this

00:06:17,930 --> 00:06:23,210
might run into some weird amount

00:06:20,690 --> 00:06:24,410
visibility options if the jobs in

00:06:23,210 --> 00:06:26,600
question are doing interesting things

00:06:24,410 --> 00:06:30,080
with a file system like Diego and the

00:06:26,600 --> 00:06:33,380
wrapped for example it's also uncovered

00:06:30,080 --> 00:06:34,940
some file system restrictions probably

00:06:33,380 --> 00:06:37,010
the file system restrictions that we

00:06:34,940 --> 00:06:38,360
have allowing jobs only to write to var

00:06:37,010 --> 00:06:41,060
vcap data or store

00:06:38,360 --> 00:06:42,860
uncovered some odd behavior in various

00:06:41,060 --> 00:06:44,389
releases some of them change their

00:06:42,860 --> 00:06:47,060
behavior some of them we had to give

00:06:44,389 --> 00:06:48,439
this unsafe volumes escape hatch so that

00:06:47,060 --> 00:06:51,219
they could continue to operate as

00:06:48,439 --> 00:06:51,219
expected

00:06:51,430 --> 00:06:56,960
process management monitor was

00:06:54,379 --> 00:06:58,729
relatively brittle fun fact who knows

00:06:56,960 --> 00:07:05,530
that mana communicates with the agent

00:06:58,729 --> 00:07:09,439
via smtp welcome welcome to the club now

00:07:05,530 --> 00:07:13,699
so often while it's often undefined or

00:07:09,439 --> 00:07:15,529
hard to understand behavior execution of

00:07:13,699 --> 00:07:18,110
a job and termination of a job must

00:07:15,529 --> 00:07:19,580
occur within 30 seconds or mana

00:07:18,110 --> 00:07:21,500
breaks and starts to do weird things

00:07:19,580 --> 00:07:24,409
most people don't know this it's hard to

00:07:21,500 --> 00:07:27,020
discover pitfalls have to be cleared to

00:07:24,409 --> 00:07:28,610
prevent false healthy status so if a job

00:07:27,020 --> 00:07:30,439
dies the Pitts file still has a pit in

00:07:28,610 --> 00:07:35,000
it something else starts up and picks up

00:07:30,439 --> 00:07:36,080
that pit Manik gets super confused one

00:07:35,000 --> 00:07:38,449
of the things you should do is not use

00:07:36,080 --> 00:07:40,189
your pit files for health check health

00:07:38,449 --> 00:07:44,089
check probably should happen in Bosh's

00:07:40,189 --> 00:07:48,349
post start but just another thing we ran

00:07:44,089 --> 00:07:50,210
into and another sort of hiccup with BPM

00:07:48,349 --> 00:07:53,750
as it expressed expects the processes

00:07:50,210 --> 00:07:54,889
will not demonize they expects logs to

00:07:53,750 --> 00:07:56,870
be written a standard out in standard

00:07:54,889 --> 00:08:01,069
error let's required some tweaks and in

00:07:56,870 --> 00:08:04,520
a few releases some C groups things we

00:08:01,069 --> 00:08:06,259
ran into we initially treated C groups

00:08:04,520 --> 00:08:08,089
of something that BPM kind of owned and

00:08:06,259 --> 00:08:11,139
maintained holy for itself to manage

00:08:08,089 --> 00:08:13,639
these processes it was a bad assumption

00:08:11,139 --> 00:08:16,069
particular with Diego they need to have

00:08:13,639 --> 00:08:17,599
access to a standard C group setup they

00:08:16,069 --> 00:08:19,370
need to be located in an expected

00:08:17,599 --> 00:08:22,279
location they need to be consistently

00:08:19,370 --> 00:08:25,479
configured which means being aware of

00:08:22,279 --> 00:08:28,159
swap on the VM but a couple of other a

00:08:25,479 --> 00:08:30,439
couple of other options also pre-start

00:08:28,159 --> 00:08:34,089
doesn't run on reboot another little

00:08:30,439 --> 00:08:35,870
gotcha for people starting out with Bosh

00:08:34,089 --> 00:08:42,830
Jim

00:08:35,870 --> 00:08:44,810
cool over the product updates all right

00:08:42,830 --> 00:08:46,940
over this way cool away all right

00:08:44,810 --> 00:08:48,470
uh yeah so let's go over a little

00:08:46,940 --> 00:08:49,490
product update and talk about kind of

00:08:48,470 --> 00:08:51,350
what we've been working on in the past

00:08:49,490 --> 00:08:55,700
in the last year since uh you're here

00:08:51,350 --> 00:08:57,290
last last time so one of the biggest

00:08:55,700 --> 00:08:59,360
things we've been working on is actually

00:08:57,290 --> 00:09:02,480
providing some increased flexibility and

00:08:59,360 --> 00:09:04,940
the reason for this is when we initially

00:09:02,480 --> 00:09:06,890
dreamed up BPM we knew that it's strict

00:09:04,940 --> 00:09:09,890
opinions would only support about like

00:09:06,890 --> 00:09:12,589
90% of software emboss jobs and so we

00:09:09,890 --> 00:09:15,620
wanted to bring BPM to a wider range of

00:09:12,589 --> 00:09:17,180
software and provide the BPM execution

00:09:15,620 --> 00:09:18,529
and operational guarantees so they could

00:09:17,180 --> 00:09:20,900
take advantage a lot of these benefits

00:09:18,529 --> 00:09:23,029
and so the way we've done that is one by

00:09:20,900 --> 00:09:24,950
relaxing some of our stricter opinions a

00:09:23,029 --> 00:09:27,050
perfect example of this is what we did

00:09:24,950 --> 00:09:28,190
with Linux capabilities we started with

00:09:27,050 --> 00:09:29,960
this dream that we would have this

00:09:28,190 --> 00:09:31,730
approved list of capabilities that

00:09:29,960 --> 00:09:34,279
people could request and then we would

00:09:31,730 --> 00:09:35,960
have you know conversations as people

00:09:34,279 --> 00:09:38,000
needed new capabilities and like

00:09:35,960 --> 00:09:39,920
determine whether or not this is good

00:09:38,000 --> 00:09:42,110
for the product or or if we should add

00:09:39,920 --> 00:09:44,180
it to our approved list it turns out

00:09:42,110 --> 00:09:45,920
this doesn't scale at all and it was

00:09:44,180 --> 00:09:47,360
really hard to manage this and we'd had

00:09:45,920 --> 00:09:48,800
a lot of conversations so we just

00:09:47,360 --> 00:09:50,690
eventually ended up removing this

00:09:48,800 --> 00:09:54,500
approved list and kind of let users

00:09:50,690 --> 00:09:55,910
specify exactly what they need the other

00:09:54,500 --> 00:09:58,279
one that Aram's mentioned a couple times

00:09:55,910 --> 00:10:00,500
is that we kind of evolved with release

00:09:58,279 --> 00:10:02,180
authors as they adopted it and this kind

00:10:00,500 --> 00:10:04,190
of evolved through the unsafe escape

00:10:02,180 --> 00:10:05,480
hatch that we built in and so the two

00:10:04,190 --> 00:10:08,390
things that you can really do with this

00:10:05,480 --> 00:10:10,250
unsafe configuration is one you can

00:10:08,390 --> 00:10:12,110
request privileged containers so you can

00:10:10,250 --> 00:10:14,420
still run your jobs as route if you

00:10:12,110 --> 00:10:15,860
really need to this is still important

00:10:14,420 --> 00:10:17,510
for things that are really tied to some

00:10:15,860 --> 00:10:19,190
of the host actions like modifying

00:10:17,510 --> 00:10:21,709
network interfaces and stuff like that

00:10:19,190 --> 00:10:24,140
the other thing is it provides volume

00:10:21,709 --> 00:10:26,360
configuration that kind that can escape

00:10:24,140 --> 00:10:28,730
the the limits of var vcap data and by

00:10:26,360 --> 00:10:30,860
recap story and so the two major use

00:10:28,730 --> 00:10:32,870
cases of that is software that doesn't

00:10:30,860 --> 00:10:34,640
confine to basha standards so you can't

00:10:32,870 --> 00:10:36,709
always force it into those two

00:10:34,640 --> 00:10:39,709
directories but also software that needs

00:10:36,709 --> 00:10:41,690
to execute other jobs we found out so

00:10:39,709 --> 00:10:43,790
people need to mount in var vcap jobs

00:10:41,690 --> 00:10:46,250
that they can call out to binaries that

00:10:43,790 --> 00:10:47,720
are configured and so while we've

00:10:46,250 --> 00:10:49,190
implemented all this flexibility and

00:10:47,720 --> 00:10:49,760
kind of taken a step back from some of

00:10:49,190 --> 00:10:51,740
the security

00:10:49,760 --> 00:10:52,930
guarantees we have we think this is okay

00:10:51,740 --> 00:10:56,300
because the declarative configuration

00:10:52,930 --> 00:10:59,000
allows the organization and operators

00:10:56,300 --> 00:11:01,370
really the ability to audit what a job

00:10:59,000 --> 00:11:03,020
is going to do before they deploy it to

00:11:01,370 --> 00:11:04,160
their production systems or their

00:11:03,020 --> 00:11:05,780
development systems or something like

00:11:04,160 --> 00:11:08,270
that and so we think that's still just a

00:11:05,780 --> 00:11:10,160
really big win and as we go on we can

00:11:08,270 --> 00:11:13,130
take the time to identify where these

00:11:10,160 --> 00:11:14,750
you know anomalies occur and either fix

00:11:13,130 --> 00:11:18,560
them or just be aware of them going

00:11:14,750 --> 00:11:19,760
forward another place that we've kind of

00:11:18,560 --> 00:11:21,710
tackled in the past year is Aaron

00:11:19,760 --> 00:11:23,990
support so we really wanted to have a

00:11:21,710 --> 00:11:27,290
mapping for BPM and Bosch run errands

00:11:23,990 --> 00:11:29,600
and what we came up with is BPM run and

00:11:27,290 --> 00:11:31,730
what BPM run does is it just executes a

00:11:29,600 --> 00:11:34,430
one-off tasks to completion and then

00:11:31,730 --> 00:11:36,440
returns its exit code it's still a

00:11:34,430 --> 00:11:38,780
declarative configuration in the BPM UML

00:11:36,440 --> 00:11:40,460
so it's a very similar to BPM start but

00:11:38,780 --> 00:11:42,020
what we think it provides is it still

00:11:40,460 --> 00:11:43,520
removes that boilerplate you still get

00:11:42,020 --> 00:11:46,130
log redirection and you still get a lot

00:11:43,520 --> 00:11:48,110
of the file system set up and you do get

00:11:46,130 --> 00:11:50,150
the isolation still so you can be

00:11:48,110 --> 00:11:51,530
confident that your errands when they're

00:11:50,150 --> 00:11:53,330
co-located because that's now a very

00:11:51,530 --> 00:11:55,940
common pattern they're not conflicting

00:11:53,330 --> 00:11:57,170
with other things on the system one of

00:11:55,940 --> 00:11:58,700
the really interesting things that we

00:11:57,170 --> 00:12:00,440
found out implementing Aaron's is that

00:11:58,700 --> 00:12:02,570
you don't actually know all of the

00:12:00,440 --> 00:12:05,230
configuration you need at deployment or

00:12:02,570 --> 00:12:07,760
template time and so we started exposing

00:12:05,230 --> 00:12:09,500
volumes and environment variables at

00:12:07,760 --> 00:12:12,170
runtime so that these jobs could take

00:12:09,500 --> 00:12:14,300
advantage of some of these aspects the

00:12:12,170 --> 00:12:15,980
really common case for this is an arrant

00:12:14,300 --> 00:12:17,930
we'll want to tweak what it exposes

00:12:15,980 --> 00:12:19,640
depending on which jobs it's co-located

00:12:17,930 --> 00:12:21,200
with and so that's kind of a difficult

00:12:19,640 --> 00:12:24,680
thing to determine in templates but

00:12:21,200 --> 00:12:26,270
really easy to determine at runtime and

00:12:24,680 --> 00:12:28,160
then really the biggest thing that we've

00:12:26,270 --> 00:12:30,710
been focusing on the past year is trying

00:12:28,160 --> 00:12:32,930
to force adoption or drive adoption but

00:12:30,710 --> 00:12:34,640
also make sure that BPM is really

00:12:32,930 --> 00:12:36,320
production ready so that we can get out

00:12:34,640 --> 00:12:39,350
into production systems and have it

00:12:36,320 --> 00:12:41,150
running and so what we've seen so far is

00:12:39,350 --> 00:12:42,950
that the Cloud Foundry application

00:12:41,150 --> 00:12:45,110
runtime has actually you know mostly

00:12:42,950 --> 00:12:47,750
converted to using BPM at this point I

00:12:45,110 --> 00:12:49,220
would say 90% of them are using it I

00:12:47,750 --> 00:12:51,260
think the only exception right now is

00:12:49,220 --> 00:12:53,180
like garden and a couple of others so

00:12:51,260 --> 00:12:55,940
that means Diego Cappy container

00:12:53,180 --> 00:12:57,830
networking etc they're all using it some

00:12:55,940 --> 00:12:59,750
of them are feature flags but at this

00:12:57,830 --> 00:13:02,120
point I think where the the confidence

00:12:59,750 --> 00:13:03,620
level of BPM to say like most releases

00:13:02,120 --> 00:13:06,020
if they're going to use bpm

00:13:03,620 --> 00:13:08,720
should just go for it it seems pretty

00:13:06,020 --> 00:13:10,760
good we've also seen other products in

00:13:08,720 --> 00:13:13,100
the Cloud Foundry org like the CFC our

00:13:10,760 --> 00:13:15,320
team and Bosch keep using these things

00:13:13,100 --> 00:13:16,910
as well as you know I've heard many

00:13:15,320 --> 00:13:19,370
community releases starting to take

00:13:16,910 --> 00:13:20,930
advantage of ppm I know dr. Nick talks

00:13:19,370 --> 00:13:22,670
about it in Boston and that kind of

00:13:20,930 --> 00:13:24,710
stuff so we've really started to see

00:13:22,670 --> 00:13:27,890
adoption increase and also we've been

00:13:24,710 --> 00:13:29,780
confident in BPM production readiness

00:13:27,890 --> 00:13:32,390
and so we've been you know identifying

00:13:29,780 --> 00:13:33,860
bugs solving them and I think we have it

00:13:32,390 --> 00:13:37,310
running in some production systems today

00:13:33,860 --> 00:13:38,510
and hopefully even more tomorrow and so

00:13:37,310 --> 00:13:41,120
one of the things that's really going to

00:13:38,510 --> 00:13:42,560
come with that is I would say BPM v1 is

00:13:41,120 --> 00:13:45,290
right around the corner we are pretty

00:13:42,560 --> 00:13:46,940
ready to cut it every release that we're

00:13:45,290 --> 00:13:49,670
making currently to me is kind of a

00:13:46,940 --> 00:13:51,980
release candidate for v1 we expect the

00:13:49,670 --> 00:13:54,170
interface to main be like very stable

00:13:51,980 --> 00:13:56,510
going forward and pretty much all the

00:13:54,170 --> 00:13:59,240
functionality is there so be expecting

00:13:56,510 --> 00:14:01,550
that probably within the next month and

00:13:59,240 --> 00:14:02,930
because we just talked about v1 the next

00:14:01,550 --> 00:14:05,420
thing we're going to talk about is what

00:14:02,930 --> 00:14:08,210
does it mean for v2 so I think this is

00:14:05,420 --> 00:14:09,230
where things get exciting but so the

00:14:08,210 --> 00:14:11,360
current this is kind of the current

00:14:09,230 --> 00:14:13,100
structure of BPM on the left and what

00:14:11,360 --> 00:14:16,040
that is is BPM is just itself is

00:14:13,100 --> 00:14:17,780
basically an isolation and execution

00:14:16,040 --> 00:14:19,880
tool that is still wrapped by maudette

00:14:17,780 --> 00:14:22,730
and still used in that kind of Bosch

00:14:19,880 --> 00:14:25,070
framework but where we envision BPM kind

00:14:22,730 --> 00:14:28,010
of moving is kind of a two-part system

00:14:25,070 --> 00:14:30,080
one is we imagine BPM as a process

00:14:28,010 --> 00:14:31,760
supervisor but then we also imagine it

00:14:30,080 --> 00:14:35,120
as the process isolation layer as well

00:14:31,760 --> 00:14:36,740
and so what do I mean by that let's

00:14:35,120 --> 00:14:40,010
first look at process supervision and

00:14:36,740 --> 00:14:42,770
execution and so we imagine BPM as a

00:14:40,010 --> 00:14:44,480
tool that can manage process life cycles

00:14:42,770 --> 00:14:47,630
and execution so it's going to start

00:14:44,480 --> 00:14:49,070
stop etc all these things and it's still

00:14:47,630 --> 00:14:51,800
gonna bring this generic release

00:14:49,070 --> 00:14:53,900
authorship improvements to releases that

00:14:51,800 --> 00:14:57,680
decide to opt into it so that means pit

00:14:53,900 --> 00:14:58,790
files file system depends fees etc also

00:14:57,680 --> 00:15:00,680
what we're gonna see is we're slowly

00:14:58,790 --> 00:15:03,470
hopefully going to start phasing out

00:15:00,680 --> 00:15:05,150
responsibilities from on it and I think

00:15:03,470 --> 00:15:07,190
it's a long term monetary placement

00:15:05,150 --> 00:15:09,020
eventually and this is pretty cool for a

00:15:07,190 --> 00:15:11,450
couple of reasons I think the first one

00:15:09,020 --> 00:15:14,120
is it gives Bosch the ability to really

00:15:11,450 --> 00:15:15,800
unify its lifecycle as you saw with an

00:15:14,120 --> 00:15:17,509
earlier slide like we even run into this

00:15:15,800 --> 00:15:19,040
but pre and post start

00:15:17,509 --> 00:15:21,290
kind of have this one gotcha if they

00:15:19,040 --> 00:15:24,049
don't execute on every process start and

00:15:21,290 --> 00:15:26,239
they also don't execute on reboot and so

00:15:24,049 --> 00:15:27,649
people often put core business logic in

00:15:26,239 --> 00:15:29,269
these scripts and then don't realize

00:15:27,649 --> 00:15:30,410
that until something breaks and then

00:15:29,269 --> 00:15:33,230
have to move it somewhere else

00:15:30,410 --> 00:15:35,179
and so with BP with BPM as a process

00:15:33,230 --> 00:15:37,399
supervision we can actually provide that

00:15:35,179 --> 00:15:39,470
guarantee that we will run these pre and

00:15:37,399 --> 00:15:42,589
post starts on every single process

00:15:39,470 --> 00:15:45,709
start that you have another thing is

00:15:42,589 --> 00:15:47,209
really unifying this across OS so if

00:15:45,709 --> 00:15:49,040
you've looked at a Windows bas-reliefs

00:15:47,209 --> 00:15:51,169
right now you'll see that there monitor

00:15:49,040 --> 00:15:53,929
is actually a JSON file that looks very

00:15:51,169 --> 00:15:56,329
similar to a bpmconfig and then on linux

00:15:53,929 --> 00:15:57,859
we make use of monitor there's just two

00:15:56,329 --> 00:15:59,720
distinct ways that Bosch and Bosch

00:15:57,859 --> 00:16:02,299
windows executed a and we think that

00:15:59,720 --> 00:16:03,439
since BPM is just a going binary we can

00:16:02,299 --> 00:16:05,269
actually drop this in and have a

00:16:03,439 --> 00:16:07,249
consistent experience both across

00:16:05,269 --> 00:16:09,319
Windows and Linux which I think would be

00:16:07,249 --> 00:16:12,049
really cool and then the other thing is

00:16:09,319 --> 00:16:13,579
just replacing on it so I don't know if

00:16:12,049 --> 00:16:14,899
any of you know but Manan we actually

00:16:13,579 --> 00:16:17,179
haven't updated in a really long time

00:16:14,899 --> 00:16:18,679
because of licensing concerns and so

00:16:17,179 --> 00:16:20,480
we're really stuck on an old Monnett and

00:16:18,679 --> 00:16:22,549
then monitor has all of these gotchas

00:16:20,480 --> 00:16:25,009
that you know arum talked about earlier

00:16:22,549 --> 00:16:27,019
and what we can do with BPM is we can

00:16:25,009 --> 00:16:29,059
really simplify that experience and not

00:16:27,019 --> 00:16:31,669
have release authors have to know all

00:16:29,059 --> 00:16:34,039
these nuances they just have to use a

00:16:31,669 --> 00:16:35,779
still hopefully powerful interface but a

00:16:34,039 --> 00:16:38,209
much simpler interface to understand I

00:16:35,779 --> 00:16:40,069
think one other cool exciting thing is

00:16:38,209 --> 00:16:43,699
like this opens room for more feature

00:16:40,069 --> 00:16:45,379
work on this area of Bosch this has been

00:16:43,699 --> 00:16:47,869
a pretty static area for a really long

00:16:45,379 --> 00:16:50,209
time as we haven't changed monit and so

00:16:47,869 --> 00:16:51,829
by replacing monitor get to drive

00:16:50,209 --> 00:16:53,629
feature development in this area and

00:16:51,829 --> 00:16:56,809
start imagining what this future looks

00:16:53,629 --> 00:17:00,199
like the other one was process isolation

00:16:56,809 --> 00:17:02,389
and so this is kind of imagining more on

00:17:00,199 --> 00:17:05,000
terms of flexibility and what that means

00:17:02,389 --> 00:17:06,529
for jobs and so we talked about how you

00:17:05,000 --> 00:17:08,360
know we tried to address the 90 percent

00:17:06,529 --> 00:17:10,490
case and all that but what we really

00:17:08,360 --> 00:17:12,019
imagine with splitting out isolation is

00:17:10,490 --> 00:17:13,639
that we can provide multiple levels of

00:17:12,019 --> 00:17:15,799
isolation to jobs I mean this kind of

00:17:13,639 --> 00:17:18,110
mad this can be you know no isolation at

00:17:15,799 --> 00:17:20,059
all for some jobs that still need to see

00:17:18,110 --> 00:17:22,069
the whole stem cell for various reasons

00:17:20,059 --> 00:17:24,860
but this also could just mean using the

00:17:22,069 --> 00:17:26,149
current BPM isolation model and so it

00:17:24,860 --> 00:17:28,490
kind of gives you that flexibility to

00:17:26,149 --> 00:17:29,840
run more software I think another really

00:17:28,490 --> 00:17:30,920
cool thing about this that we've talked

00:17:29,840 --> 00:17:32,450
about is

00:17:30,920 --> 00:17:35,690
with this isolation layer we can imagine

00:17:32,450 --> 00:17:37,730
running container images on Bosch stem

00:17:35,690 --> 00:17:40,190
cells and I think what we imagine that

00:17:37,730 --> 00:17:41,900
to be right now is we provide the

00:17:40,190 --> 00:17:43,820
container image as a Bosch package and

00:17:41,900 --> 00:17:46,070
run it on top of the stem cell and so

00:17:43,820 --> 00:17:48,470
it's kind of starting to bring Bosch and

00:17:46,070 --> 00:17:51,410
other platforms more consistent together

00:17:48,470 --> 00:17:53,180
so you can actually imagine transforming

00:17:51,410 --> 00:17:56,000
software from one platform to Bosch and

00:17:53,180 --> 00:17:57,980
vice versa in a much easier way and then

00:17:56,000 --> 00:18:00,380
lastly I think windows support once

00:17:57,980 --> 00:18:02,000
again is just another big win for us if

00:18:00,380 --> 00:18:04,700
you see Windows releases they have the

00:18:02,000 --> 00:18:06,590
same problem as current or old Linux

00:18:04,700 --> 00:18:09,020
releases they have all this boilerplate

00:18:06,590 --> 00:18:11,810
and PowerShell to manage you know

00:18:09,020 --> 00:18:14,060
standards but with BPM we could just

00:18:11,810 --> 00:18:15,560
bring that in and remove all of this

00:18:14,060 --> 00:18:18,320
boilerplate and just standardize

00:18:15,560 --> 00:18:21,650
execution across operating systems which

00:18:18,320 --> 00:18:23,960
is a really big win another thing we

00:18:21,650 --> 00:18:27,230
really want to focus on with BPM v2 is

00:18:23,960 --> 00:18:28,820
comprehensive volume support and so as

00:18:27,230 --> 00:18:30,950
Aaron touched on it really feels like

00:18:28,820 --> 00:18:33,050
volumes are kind of a hack right now the

00:18:30,950 --> 00:18:33,890
way you specify just a path on disk is

00:18:33,050 --> 00:18:35,660
super-weird

00:18:33,890 --> 00:18:38,660
and it's not clear that you're trying to

00:18:35,660 --> 00:18:40,790
share this this directory with another

00:18:38,660 --> 00:18:42,440
job and so what we're kind of imagining

00:18:40,790 --> 00:18:45,200
is moving volumes as a first-class

00:18:42,440 --> 00:18:47,780
concept in BPM and having users define

00:18:45,200 --> 00:18:50,360
them outside of a process what this

00:18:47,780 --> 00:18:52,670
means is multiple processes can actually

00:18:50,360 --> 00:18:54,590
reference the same volume and then

00:18:52,670 --> 00:18:56,870
volume life cycles can be independent of

00:18:54,590 --> 00:18:58,760
processes this is pretty huge because it

00:18:56,870 --> 00:19:00,290
turns out the volume life cycle is

00:18:58,760 --> 00:19:02,530
actually much longer than the process

00:19:00,290 --> 00:19:04,970
life cycle and that volumes are often

00:19:02,530 --> 00:19:06,740
their life cycle matches the VM life

00:19:04,970 --> 00:19:08,900
cycle whereas processes can be restarted

00:19:06,740 --> 00:19:10,550
multiple times so by doing this we get

00:19:08,900 --> 00:19:13,670
more flexibility and we can handle

00:19:10,550 --> 00:19:14,870
volumes much more efficiently this is

00:19:13,670 --> 00:19:16,760
one area that we definitely want to

00:19:14,870 --> 00:19:18,020
gather some input from users and we're

00:19:16,760 --> 00:19:20,180
going to reach out and get some feedback

00:19:18,020 --> 00:19:22,160
and we want to know like what is the

00:19:20,180 --> 00:19:24,470
configuration that that would work for

00:19:22,160 --> 00:19:27,770
our users so feel free to tell us our

00:19:24,470 --> 00:19:30,170
thoughts the last one is we're trying to

00:19:27,770 --> 00:19:32,300
tackle unique users in BPM v2 and so

00:19:30,170 --> 00:19:35,150
right now I'm sure all of you are aware

00:19:32,300 --> 00:19:38,180
that every Bosch process pretty much

00:19:35,150 --> 00:19:39,800
runs on this magic fee cap user but what

00:19:38,180 --> 00:19:41,810
we would like to imagine is a world in

00:19:39,800 --> 00:19:43,940
which BPM can actually provide a unique

00:19:41,810 --> 00:19:44,419
user for each process that executes and

00:19:43,940 --> 00:19:47,269
the

00:19:44,419 --> 00:19:48,980
this leverages Linux user permissions

00:19:47,269 --> 00:19:51,080
for additional security and isolation

00:19:48,980 --> 00:19:52,609
one of the biggest complexities with us

00:19:51,080 --> 00:19:54,080
and why we haven't tackled this so far

00:19:52,609 --> 00:19:56,809
is we actually didn't know how this

00:19:54,080 --> 00:19:59,539
would work with volumes so if we use a

00:19:56,809 --> 00:20:01,249
new user for every process then we have

00:19:59,539 --> 00:20:02,869
to somehow make permissions match so

00:20:01,249 --> 00:20:04,100
that volumes can be shared and that's

00:20:02,869 --> 00:20:06,559
something that we didn't know how to do

00:20:04,100 --> 00:20:09,859
but if we talked about what we saw with

00:20:06,559 --> 00:20:11,899
like what we saw with volumes as a first

00:20:09,859 --> 00:20:13,279
class concept is that we really can like

00:20:11,899 --> 00:20:14,779
start tackling this with maybe group

00:20:13,279 --> 00:20:17,600
permissions or something else it really

00:20:14,779 --> 00:20:19,100
helps us get to that world and so that's

00:20:17,600 --> 00:20:20,809
pretty much what we're imagining for BPM

00:20:19,100 --> 00:20:22,869
v2 I'd love to hear your thoughts and

00:20:20,809 --> 00:20:24,679
whether or not there's any you know

00:20:22,869 --> 00:20:27,289
functionality or features that you'd

00:20:24,679 --> 00:20:31,789
like to see but that's pretty much it

00:20:27,289 --> 00:20:33,859
and that's our talk you can always reach

00:20:31,789 --> 00:20:36,409
us out at hashtag BPM and the Cloud

00:20:33,859 --> 00:20:38,960
Foundry slack and we really appreciate

00:20:36,409 --> 00:20:42,769
issues and pull requests in the github

00:20:38,960 --> 00:20:45,309
repo so please contribute does anyone

00:20:42,769 --> 00:20:45,309
have any questions

00:20:45,650 --> 00:20:53,569
[Applause]

00:21:09,770 --> 00:21:17,360
I would say no so the question was I am

00:21:15,049 --> 00:21:19,640
a lazy release author and I don't know

00:21:17,360 --> 00:21:21,200
what capabilities my software needs is

00:21:19,640 --> 00:21:24,289
there an easy way to figure this out or

00:21:21,200 --> 00:21:26,320
you know have configuration that works I

00:21:24,289 --> 00:21:29,090
would say no at the moment like I think

00:21:26,320 --> 00:21:30,559
it's worth understanding what

00:21:29,090 --> 00:21:32,630
capabilities your software actually

00:21:30,559 --> 00:21:36,980
needs and as a relief release author

00:21:32,630 --> 00:21:39,440
that's probably a beneficial process but

00:21:36,980 --> 00:21:47,380
now we have not tackled allowing that

00:21:39,440 --> 00:21:47,380
behavior any other questions

00:22:07,470 --> 00:22:13,299
yeah so the question is what what

00:22:09,730 --> 00:22:14,740
happens if we replace Monnett and I'm

00:22:13,299 --> 00:22:16,419
not sure the mechanics but one of the

00:22:14,740 --> 00:22:18,640
notions is maybe this becomes an option

00:22:16,419 --> 00:22:22,059
opt in thing that people could set on

00:22:18,640 --> 00:22:24,039
their VMs maybe initially not baking

00:22:22,059 --> 00:22:25,299
this into the stem cell but enhancing

00:22:24,039 --> 00:22:28,480
the agent so that would know how to go

00:22:25,299 --> 00:22:31,390
get a certain thing from the director

00:22:28,480 --> 00:22:33,070
that would allow it to to to operate

00:22:31,390 --> 00:22:36,130
without mana or to fetch mana and

00:22:33,070 --> 00:22:37,630
install it on the stem cell as a

00:22:36,130 --> 00:22:39,220
possibility I think there are other ways

00:22:37,630 --> 00:22:40,720
we could go about it we could we can

00:22:39,220 --> 00:22:43,419
start baking that piece into the stem

00:22:40,720 --> 00:22:44,830
cell but I think given the release life

00:22:43,419 --> 00:22:46,110
cycle of stem cells it might be more

00:22:44,830 --> 00:22:48,130
interesting to figure out if we could

00:22:46,110 --> 00:22:50,649
develop a way to iterate on that more

00:22:48,130 --> 00:22:52,090
quickly rather than having to make it

00:22:50,649 --> 00:22:54,779
into the stem cell and wait for that

00:22:52,090 --> 00:22:56,710
that that that that feedback cycle I

00:22:54,779 --> 00:22:58,779
think what are the other interesting

00:22:56,710 --> 00:23:01,480
things with this opportunity is that we

00:22:58,779 --> 00:23:03,789
have a chance to define a clear API for

00:23:01,480 --> 00:23:05,620
what the Bosch agent actually uses to

00:23:03,789 --> 00:23:07,539
determine process lifecycle and health

00:23:05,620 --> 00:23:09,190
and then you can imagine you know an

00:23:07,539 --> 00:23:11,230
infinite future of many implementations

00:23:09,190 --> 00:23:12,850
of process managers kind of plugging in

00:23:11,230 --> 00:23:14,919
there which would be pretty cool

00:23:12,850 --> 00:23:18,600
wouldn't tie us to necessarily BPM going

00:23:14,919 --> 00:23:18,600
forward but whatever the future holds

00:23:21,480 --> 00:23:54,540
cool

00:23:24,170 --> 00:23:56,280
yeah far away it's so the question is

00:23:54,540 --> 00:23:58,080
are we actively looking to move to move

00:23:56,280 --> 00:24:03,030
boss jobs to other executors say

00:23:58,080 --> 00:24:05,670
kubernetes or vice versa a lot of the

00:24:03,030 --> 00:24:09,180
inspiration from how we set up BPM yeah

00:24:05,670 --> 00:24:11,070
Mel was drawn from from pod the pods BEC

00:24:09,180 --> 00:24:12,720
we aren't actively working on making

00:24:11,070 --> 00:24:18,330
some sort of a transformer at this point

00:24:12,720 --> 00:24:20,160
but I think it's a general Northstar

00:24:18,330 --> 00:24:22,920
that we've kept sort of in our minds as

00:24:20,160 --> 00:24:24,660
we've been developing this at least in

00:24:22,920 --> 00:24:25,470
so much as we wanted to do we didn't

00:24:24,660 --> 00:24:27,330
want to do anything that would

00:24:25,470 --> 00:24:28,680
intentionally preclude somebody from

00:24:27,330 --> 00:24:33,810
doing that or us from doing that in the

00:24:28,680 --> 00:24:37,200
future so I think it's it's it's there

00:24:33,810 --> 00:24:38,430
it's not actively like a pursuit but

00:24:37,200 --> 00:24:41,580
it's something we're keeping in mind as

00:24:38,430 --> 00:24:44,910
a door we want to keep open I think also

00:24:41,580 --> 00:24:47,550
just from my perspective the best way to

00:24:44,910 --> 00:24:51,000
increase usage of Bosh is to make that

00:24:47,550 --> 00:24:52,920
transition from either easier and have

00:24:51,000 --> 00:24:55,650
less overhead for people writing

00:24:52,920 --> 00:24:57,780
software to understand how they want to

00:24:55,650 --> 00:24:59,280
run their software and so by kind of

00:24:57,780 --> 00:25:01,500
moving towards this configuration

00:24:59,280 --> 00:25:03,330
declarative style with maybe even

00:25:01,500 --> 00:25:05,730
container images at some point lets us

00:25:03,330 --> 00:25:07,440
envision that world where you can take

00:25:05,730 --> 00:25:08,940
you know a cade service and move it to

00:25:07,440 --> 00:25:10,500
Bosh you can take a Bosh service and

00:25:08,940 --> 00:25:12,450
move it to Kate's and we can exist in

00:25:10,500 --> 00:25:19,880
this world together which seems pretty

00:25:12,450 --> 00:25:19,880
cool cool

00:25:34,270 --> 00:25:38,410
so I think when we would solve that

00:25:36,280 --> 00:25:40,780
problem is most definitely when we kind

00:25:38,410 --> 00:25:44,110
of tackle matter volumes as a first

00:25:40,780 --> 00:25:46,720
class concept oh sorry the question was

00:25:44,110 --> 00:25:48,970
we mentioned you know timing issues with

00:25:46,720 --> 00:25:50,760
volumes as they exist today and mount

00:25:48,970 --> 00:25:54,820
propagation and various things like that

00:25:50,760 --> 00:25:58,270
and and when is the timeline for solving

00:25:54,820 --> 00:26:00,490
that and I think in my mind our timeline

00:25:58,270 --> 00:26:03,880
for solving that is BPM v2 with first

00:26:00,490 --> 00:26:05,920
class volumes just because it's

00:26:03,880 --> 00:26:07,720
difficult to with the current interface

00:26:05,920 --> 00:26:10,690
kind of extract that and deal with them

00:26:07,720 --> 00:26:12,100
at a higher level and so that's probably

00:26:10,690 --> 00:26:14,950
when we're going to tackle it any

00:26:12,100 --> 00:26:16,720
timeline for BPM v2 is probably within

00:26:14,950 --> 00:26:19,060
the next year is what we're aiming for

00:26:16,720 --> 00:26:23,260
but it's a little ambitious so we'll see

00:26:19,060 --> 00:26:25,060
how that goes yeah I we might try to

00:26:23,260 --> 00:26:27,010
address some of the shortcomings or

00:26:25,060 --> 00:26:29,460
maybe some edge cases that we can in the

00:26:27,010 --> 00:26:33,700
v1 if possible yeah it definitely

00:26:29,460 --> 00:26:35,440
dropped an issue or ping us and slack or

00:26:33,700 --> 00:26:40,170
on github if there's something that is a

00:26:35,440 --> 00:26:40,170
particular thorn for you at this point

00:26:41,310 --> 00:26:45,790
cool

00:26:42,520 --> 00:26:46,030
anyone else awesome thank you all for

00:26:45,790 --> 00:26:47,480
coming

00:26:46,030 --> 00:26:52,039
yeah thank you

00:26:47,480 --> 00:26:52,039

YouTube URL: https://www.youtube.com/watch?v=aTJBK5PvfiQ


