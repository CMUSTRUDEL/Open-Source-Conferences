Title: Where Does Cloud Foundry Stand in the Containers’ Ecosystem? - Surya Duggirala, IBM
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Where Does Cloud Foundry Stand in the Containers’ Ecosystem? - Surya Duggirala, IBM

As container technology is becoming the de facto choice for cloud platforms, it is essential to compare various container ecosystems. As the industry is embracing microservices and service mesh technologies like Istio, there is a common question around how Cloud Foundry fits in this space. The main intent of this session is to compare Cloud Foundry’s garden containers with other container technologies like Docker and Kubernetes and highlight the strengths and weaknesses of each of these container technologies. This session also looks into the latest advances in Cloud Foundry Platform and how it is strengthening the cloud native deployments.

https://cfseu18.sched.com/event/FRyE/where-does-cloud-foundry-stand-in-the-containers-ecosystem-surya-duggirala-ibm
Captions: 
	00:00:01,040 --> 00:00:07,620
in the in the last 12 months or so I

00:00:04,620 --> 00:00:10,830
have been working at least 12 of our key

00:00:07,620 --> 00:00:14,370
customers and trying to understand how

00:00:10,830 --> 00:00:17,310
cloud is being used across in different

00:00:14,370 --> 00:00:20,609
industries being part of the engineering

00:00:17,310 --> 00:00:22,590
team and IBM cloud I get to see the

00:00:20,609 --> 00:00:25,320
architecture and the implementation of

00:00:22,590 --> 00:00:29,099
both Cloud Foundry as well as the IKS

00:00:25,320 --> 00:00:32,009
container services and also I'm

00:00:29,099 --> 00:00:36,059
fortunate to have a close association

00:00:32,009 --> 00:00:39,570
and the part of the open community like

00:00:36,059 --> 00:00:41,790
I'm the co-chair for Eastover group and

00:00:39,570 --> 00:00:44,640
then I'm closely working with cloud

00:00:41,790 --> 00:00:47,940
foundry and kubernetes so I could get to

00:00:44,640 --> 00:00:49,789
see three different point of views when

00:00:47,940 --> 00:00:52,620
it comes to cloud and cloud foundry a

00:00:49,789 --> 00:00:56,309
customer perspective an engineering

00:00:52,620 --> 00:00:59,329
perspective and then we get to see

00:00:56,309 --> 00:01:01,859
what's happening in the open community

00:00:59,329 --> 00:01:06,030
good afternoon everyone my name is Surya

00:01:01,859 --> 00:01:09,510
Doogie Allah I'm an STS M with Watson

00:01:06,030 --> 00:01:14,220
and cloud platform and engineering guild

00:01:09,510 --> 00:01:17,549
leader in IBM cloud so today we will

00:01:14,220 --> 00:01:19,979
talk about three different things we're

00:01:17,549 --> 00:01:23,220
going to talk about how containers

00:01:19,979 --> 00:01:26,390
evolved and what are the current pain

00:01:23,220 --> 00:01:29,250
points that customers are seeing and

00:01:26,390 --> 00:01:32,759
what we are working on to alleviate

00:01:29,250 --> 00:01:36,240
those pain points and also we're going

00:01:32,759 --> 00:01:38,600
to talk about some futuristic stuff now

00:01:36,240 --> 00:01:43,229
how the architectures are changing

00:01:38,600 --> 00:01:46,880
especially cloud foundry and how these

00:01:43,229 --> 00:01:49,799
three major open cloud community

00:01:46,880 --> 00:01:52,200
communities like the kubernetes is tio

00:01:49,799 --> 00:01:55,350
and cloud foundry which are going in

00:01:52,200 --> 00:01:57,950
parallel how they're actually going to

00:01:55,350 --> 00:02:02,399
be merging and actually going to

00:01:57,950 --> 00:02:04,799
integrate in future so we're going to

00:02:02,399 --> 00:02:06,500
talk about the current design and next

00:02:04,799 --> 00:02:10,530
we'll get into some futuristic stuff

00:02:06,500 --> 00:02:12,310
there are many projects that I'll be

00:02:10,530 --> 00:02:15,520
talking about today

00:02:12,310 --> 00:02:18,400
and in fact there are many breakout

00:02:15,520 --> 00:02:23,560
sessions that will go more actually into

00:02:18,400 --> 00:02:26,530
that into those specific projects so if

00:02:23,560 --> 00:02:28,690
you look at these three projects they're

00:02:26,530 --> 00:02:31,690
open cloud community wants the Cloud

00:02:28,690 --> 00:02:33,910
Foundry kubernetes and Sto so you might

00:02:31,690 --> 00:02:36,010
have heard about these things time and

00:02:33,910 --> 00:02:38,770
time again so we're going to talk about

00:02:36,010 --> 00:02:41,410
how these three within the Cloud Foundry

00:02:38,770 --> 00:02:43,900
they're going to work together so before

00:02:41,410 --> 00:02:46,780
we get to that I want to just go down

00:02:43,900 --> 00:02:48,730
the memory lane when this whole

00:02:46,780 --> 00:02:51,190
container stuff started because we

00:02:48,730 --> 00:02:54,100
always talk about containers so when

00:02:51,190 --> 00:02:56,770
these containers these are not new if

00:02:54,100 --> 00:02:59,800
you look at that in it all actually

00:02:56,770 --> 00:03:02,020
started with the chroot in UNIX you can

00:02:59,800 --> 00:03:04,209
call that as the starting point for this

00:03:02,020 --> 00:03:06,490
whole container journey because that's

00:03:04,209 --> 00:03:10,709
where you know you could get the

00:03:06,490 --> 00:03:14,140
resource isolation concept that was born

00:03:10,709 --> 00:03:16,930
but officially like you can see in 2008

00:03:14,140 --> 00:03:19,720
you have those Linux containers that's

00:03:16,930 --> 00:03:23,019
where we really talked about containers

00:03:19,720 --> 00:03:26,880
and then if you look at cloud foundry

00:03:23,019 --> 00:03:29,769
when we have announced this around 2011

00:03:26,880 --> 00:03:35,860
the Varden containers they're a part of

00:03:29,769 --> 00:03:38,080
the cloud foundry in 2011 then from that

00:03:35,860 --> 00:03:42,760
worden container point of view then we

00:03:38,080 --> 00:03:46,900
moved to support the garden and darker

00:03:42,760 --> 00:03:50,890
side how we went to that in 2013 docker

00:03:46,900 --> 00:03:55,090
containers were born and then 2014 you

00:03:50,890 --> 00:03:57,400
have the garden Linux containers because

00:03:55,090 --> 00:04:02,769
that's where we were actually going from

00:03:57,400 --> 00:04:06,220
da's to Diego in California and of

00:04:02,769 --> 00:04:10,299
course 2015 that's when a kubernetes was

00:04:06,220 --> 00:04:12,130
announced and 2016 you have of course

00:04:10,299 --> 00:04:14,560
again 2015 you have the open container

00:04:12,130 --> 00:04:17,320
initiative and then Runcie started there

00:04:14,560 --> 00:04:21,430
and then we started supporting that in

00:04:17,320 --> 00:04:25,570
2016 with garden run see and then if you

00:04:21,430 --> 00:04:26,470
look at 2017 that's where IBM Google and

00:04:25,570 --> 00:04:31,030
lyft

00:04:26,470 --> 00:04:33,700
announced the project sto and now in

00:04:31,030 --> 00:04:36,010
2018 we are talking about how these

00:04:33,700 --> 00:04:41,770
three projects are going to work

00:04:36,010 --> 00:04:44,350
together of course there are many many

00:04:41,770 --> 00:04:47,320
engineering issues that all these three

00:04:44,350 --> 00:04:49,030
communities are working in parallel when

00:04:47,320 --> 00:04:50,680
it comes to Cloud Foundry of course

00:04:49,030 --> 00:04:54,100
there are many customers but we still

00:04:50,680 --> 00:04:57,790
are working to harden the platform based

00:04:54,100 --> 00:05:00,270
on the customer input on the performance

00:04:57,790 --> 00:05:06,010
scalability stability resilience issues

00:05:00,270 --> 00:05:08,740
and also the multiple integration

00:05:06,010 --> 00:05:11,920
projects that are going on that's also

00:05:08,740 --> 00:05:13,780
happening in the cloud phone revolt when

00:05:11,920 --> 00:05:16,960
it comes to use to you is to you being

00:05:13,780 --> 00:05:21,940
very young it has to just started last

00:05:16,960 --> 00:05:25,810
year we have gotten very good momentum

00:05:21,940 --> 00:05:28,270
for a year old project and you can

00:05:25,810 --> 00:05:31,140
clearly see we need to harden the mesh

00:05:28,270 --> 00:05:33,400
because the potential is really high

00:05:31,140 --> 00:05:36,150
there are a lot of people in the

00:05:33,400 --> 00:05:38,140
community working on hardening the mesh

00:05:36,150 --> 00:05:42,240
especially performance and scalability

00:05:38,140 --> 00:05:44,410
aspects and then we have announced the

00:05:42,240 --> 00:05:46,390
minimalist EO like let's say if you

00:05:44,410 --> 00:05:50,160
don't want to use all the features of

00:05:46,390 --> 00:05:52,840
history you can actually deploy

00:05:50,160 --> 00:05:57,120
different through Helms right a

00:05:52,840 --> 00:06:01,330
minimalistic footprint office to you and

00:05:57,120 --> 00:06:03,600
kubernetes says you can see in cuban it

00:06:01,330 --> 00:06:05,860
is we have of course it's a very nice

00:06:03,600 --> 00:06:09,100
artists trader and scheduler platform

00:06:05,860 --> 00:06:11,200
but we still have some issues especially

00:06:09,100 --> 00:06:15,490
if you look at the scheduler some of you

00:06:11,200 --> 00:06:19,510
might have seen there needs to be some

00:06:15,490 --> 00:06:23,110
more intelligence put into the default

00:06:19,510 --> 00:06:27,010
scheduler because it cannot really

00:06:23,110 --> 00:06:31,000
identify an unstable cluster and correct

00:06:27,010 --> 00:06:33,340
it to become a stable cluster so

00:06:31,000 --> 00:06:35,140
imbalancing imbalances in the cluster

00:06:33,340 --> 00:06:37,139
and those things the default scheduler

00:06:35,140 --> 00:06:40,770
is not able to

00:06:37,139 --> 00:06:44,550
adjust them so there is a project under

00:06:40,770 --> 00:06:48,449
the the schedulers track in Cuba notice

00:06:44,550 --> 00:06:51,840
called the D scheduler so what we are

00:06:48,449 --> 00:06:54,680
working there is to see whether we can

00:06:51,840 --> 00:06:57,449
actually dynamically adjust and

00:06:54,680 --> 00:06:59,819
dynamically move some of the parts to

00:06:57,449 --> 00:07:02,550
those nodes where you have resources

00:06:59,819 --> 00:07:05,340
where as you are just bottlenecked on a

00:07:02,550 --> 00:07:07,800
specific node right things like that we

00:07:05,340 --> 00:07:09,569
are working on the D scheduler side and

00:07:07,800 --> 00:07:14,310
then of course the new things like the

00:07:09,569 --> 00:07:16,889
SN I like this CS I like cloud storage

00:07:14,310 --> 00:07:19,680
interface and stuff right so there are a

00:07:16,889 --> 00:07:25,080
lot of stuff in each of these three

00:07:19,680 --> 00:07:28,039
cloud compute cloud communities still

00:07:25,080 --> 00:07:31,199
there working to make them even better

00:07:28,039 --> 00:07:34,860
now let's look at the Cloud Foundry for

00:07:31,199 --> 00:07:39,289
a moment Cloud Foundry even though it's

00:07:34,860 --> 00:07:42,479
being embraced and used in multiple

00:07:39,289 --> 00:07:45,979
production environments in fact I myself

00:07:42,479 --> 00:07:48,900
worked on the healthcare banking and

00:07:45,979 --> 00:07:51,090
some consumer electronics and different

00:07:48,900 --> 00:07:53,520
areas but these are some of the things

00:07:51,090 --> 00:07:57,389
that really some of you you might have

00:07:53,520 --> 00:07:59,310
seen when it comes to routing you may

00:07:57,389 --> 00:08:04,139
see long tail latencies if you are not

00:07:59,310 --> 00:08:06,750
using the borders keep alive in when it

00:08:04,139 --> 00:08:09,719
comes to networking because you know in

00:08:06,750 --> 00:08:11,370
networking if you have microservices

00:08:09,719 --> 00:08:13,710
let's say you have two tier or three

00:08:11,370 --> 00:08:17,190
tier microservices then you may

00:08:13,710 --> 00:08:20,159
experience significant latencies

00:08:17,190 --> 00:08:20,719
increased latencies if you are not using

00:08:20,159 --> 00:08:25,289
it

00:08:20,719 --> 00:08:29,129
container to container and then when it

00:08:25,289 --> 00:08:31,250
comes to build packs of course you you

00:08:29,129 --> 00:08:34,969
might have seen when you do a CF push

00:08:31,250 --> 00:08:38,640
you may see a sudden spike in CPU and

00:08:34,969 --> 00:08:41,250
that's mainly because the way the

00:08:38,640 --> 00:08:43,529
current build pack mechanism how the

00:08:41,250 --> 00:08:47,310
file system works it's a flat file

00:08:43,529 --> 00:08:49,649
system and then you also might have seen

00:08:47,310 --> 00:08:50,790
CPU sharing issues like the algorithm

00:08:49,649 --> 00:08:53,700
the default

00:08:50,790 --> 00:08:58,260
CPU algorithm sometimes if you have a

00:08:53,700 --> 00:08:59,880
intended environment you may see some

00:08:58,260 --> 00:09:03,570
staging failures because you don't have

00:08:59,880 --> 00:09:06,840
enough resources and then of course the

00:09:03,570 --> 00:09:09,800
the garden doesn't have a concept of a

00:09:06,840 --> 00:09:13,220
pod so that you can have multiple

00:09:09,800 --> 00:09:16,770
containers in a pod or like like

00:09:13,220 --> 00:09:18,500
kubernetes has so you can inject a

00:09:16,770 --> 00:09:21,150
sidecar which is essential for

00:09:18,500 --> 00:09:26,040
supporting East you so that's another

00:09:21,150 --> 00:09:27,660
drawback and then you have now as many

00:09:26,040 --> 00:09:30,360
of you might have seen right you know if

00:09:27,660 --> 00:09:33,510
you're using both cloud foundry and

00:09:30,360 --> 00:09:37,710
urban trees together you will have

00:09:33,510 --> 00:09:39,810
multiple scheduler issues and then you

00:09:37,710 --> 00:09:42,840
have the service mesh support of course

00:09:39,810 --> 00:09:45,600
the lots and lots of people when they

00:09:42,840 --> 00:09:48,480
move to the micro services as a

00:09:45,600 --> 00:09:51,300
developer I don't want to get into any

00:09:48,480 --> 00:09:53,910
of those traffic management security

00:09:51,300 --> 00:09:55,740
management certificate management all

00:09:53,910 --> 00:09:59,550
those things if somebody else can do

00:09:55,740 --> 00:10:02,670
that for me then I can focus more of my

00:09:59,550 --> 00:10:08,220
energy on my industry specific domain

00:10:02,670 --> 00:10:09,720
specific problem solving rather than you

00:10:08,220 --> 00:10:11,670
know handling these plumbing things

00:10:09,720 --> 00:10:14,490
that's where the service master support

00:10:11,670 --> 00:10:16,020
is really important so we are working

00:10:14,490 --> 00:10:17,190
and I'm going to talk about you know

00:10:16,020 --> 00:10:20,190
what are the things that we are working

00:10:17,190 --> 00:10:22,110
here to resolve the current designs pain

00:10:20,190 --> 00:10:25,170
points and how we're going to actually

00:10:22,110 --> 00:10:29,790
get to the next architecture to solve

00:10:25,170 --> 00:10:32,510
some of these other problems yeah you

00:10:29,790 --> 00:10:36,510
can see this here the longtail latency

00:10:32,510 --> 00:10:39,900
we have run some healthcare application

00:10:36,510 --> 00:10:41,580
and then we have seen this if you look

00:10:39,900 --> 00:10:43,710
at the longtail latency for some of you

00:10:41,580 --> 00:10:46,770
who may not know about that longtail

00:10:43,710 --> 00:10:48,900
latency is say if you look at the gap

00:10:46,770 --> 00:10:51,660
between an average response time versus

00:10:48,900 --> 00:10:54,300
the 99th percentile if that is

00:10:51,660 --> 00:10:56,970
significantly higher as you can see on

00:10:54,300 --> 00:10:59,520
your left hand side the max latency and

00:10:56,970 --> 00:11:02,280
the 99th percentile is much much higher

00:10:59,520 --> 00:11:07,500
than an average response time there

00:11:02,280 --> 00:11:10,860
and that's main mainly because of the go

00:11:07,500 --> 00:11:13,140
routers inability to have the keep alive

00:11:10,860 --> 00:11:15,330
to the back end so once you enable

00:11:13,140 --> 00:11:17,700
because we have that feature now which

00:11:15,330 --> 00:11:20,580
is not on by default but if you enable

00:11:17,700 --> 00:11:22,620
that then you can actually significantly

00:11:20,580 --> 00:11:24,210
reduce that long tail latency so this is

00:11:22,620 --> 00:11:27,420
one of the things from a routing site

00:11:24,210 --> 00:11:29,550
which we have worked on and then the

00:11:27,420 --> 00:11:32,850
second feature which we have is the

00:11:29,550 --> 00:11:35,280
container to container networking so

00:11:32,850 --> 00:11:38,160
most of you are familiar like if service

00:11:35,280 --> 00:11:41,760
e is calling service B in a micro

00:11:38,160 --> 00:11:44,310
service application then service years

00:11:41,760 --> 00:11:47,340
that invocation it has to go all the way

00:11:44,310 --> 00:11:49,440
out to the proxy and then gets into the

00:11:47,340 --> 00:11:52,530
go router and then then go router it

00:11:49,440 --> 00:11:55,770
will go to the service it may be in the

00:11:52,530 --> 00:11:58,350
same B Diego cell but still it can't

00:11:55,770 --> 00:11:59,790
talk to each other but once you have the

00:11:58,350 --> 00:12:02,640
container to container networking

00:11:59,790 --> 00:12:04,440
enabled you don't need to go all the way

00:12:02,640 --> 00:12:06,360
and actually you can reduce those hops

00:12:04,440 --> 00:12:08,940
and that's where you will see

00:12:06,360 --> 00:12:12,180
significant improvements in the latency

00:12:08,940 --> 00:12:14,990
again you can see some proof here this

00:12:12,180 --> 00:12:17,190
is a forum C application from healthcare

00:12:14,990 --> 00:12:21,000
you can see the default without

00:12:17,190 --> 00:12:22,920
container to container and then you see

00:12:21,000 --> 00:12:25,470
enabling the container to container you

00:12:22,920 --> 00:12:29,850
see almost two and a half 2.5 X

00:12:25,470 --> 00:12:31,860
reduction in latency and you can see the

00:12:29,850 --> 00:12:34,530
same thing with online banking

00:12:31,860 --> 00:12:38,760
application to significantly it's

00:12:34,530 --> 00:12:41,160
reducing from 329 milliseconds to 278 so

00:12:38,760 --> 00:12:42,870
these are some of the things that we

00:12:41,160 --> 00:12:45,150
have introduced and we have optimized

00:12:42,870 --> 00:12:48,180
these features but these features are

00:12:45,150 --> 00:12:50,010
not there on by default so if you are a

00:12:48,180 --> 00:12:54,900
cloud provider you have to make those

00:12:50,010 --> 00:12:59,930
things available the third one about the

00:12:54,900 --> 00:13:02,250
CF push if you look at this you can see

00:12:59,930 --> 00:13:04,170
the java application node application

00:13:02,250 --> 00:13:06,839
ruby application rate you know all of

00:13:04,170 --> 00:13:09,750
them they manifest differently from a

00:13:06,839 --> 00:13:12,390
cpu spike how much it is from a Java

00:13:09,750 --> 00:13:14,220
normally you see much bigger spike

00:13:12,390 --> 00:13:16,020
because Java

00:13:14,220 --> 00:13:18,530
being a little bit heavier temperature

00:13:16,020 --> 00:13:21,420
to know than other programming models

00:13:18,530 --> 00:13:25,410
the reason why you see this big of a

00:13:21,420 --> 00:13:28,500
spike is because your droplet size is

00:13:25,410 --> 00:13:30,750
much bigger you have a flat file system

00:13:28,500 --> 00:13:33,000
so you don't have a layered file system

00:13:30,750 --> 00:13:36,600
like like darker so each time when you

00:13:33,000 --> 00:13:39,390
push an app and you have that darker you

00:13:36,600 --> 00:13:40,050
have the droplet size you need to do

00:13:39,390 --> 00:13:42,560
that

00:13:40,050 --> 00:13:45,510
zip one unzip all those things that

00:13:42,560 --> 00:13:49,680
which are highly CPU intensive

00:13:45,510 --> 00:13:53,160
operations that will maybe four or five

00:13:49,680 --> 00:13:56,280
seconds but you will be impacted with

00:13:53,160 --> 00:13:58,560
those things how are we fixing that you

00:13:56,280 --> 00:14:01,140
might have seen the you know jewels talk

00:13:58,560 --> 00:14:03,300
about the OCI build packs the OCA layer

00:14:01,140 --> 00:14:05,190
is actually addressing that basically

00:14:03,300 --> 00:14:09,030
this was the I built packs what it does

00:14:05,190 --> 00:14:12,020
is it basically changes the file system

00:14:09,030 --> 00:14:14,300
of a from a flat file system to a

00:14:12,020 --> 00:14:18,840
layered file system like docker

00:14:14,300 --> 00:14:22,920
so as you can see in this so you have a

00:14:18,840 --> 00:14:25,830
much smaller droplet so you don't need

00:14:22,920 --> 00:14:29,940
to spend that much in in a compression

00:14:25,830 --> 00:14:34,410
and uncompress and CPU spikes will be

00:14:29,940 --> 00:14:36,510
significantly lower so these are some of

00:14:34,410 --> 00:14:39,270
the existing pain points and with the

00:14:36,510 --> 00:14:41,760
current design and architecture but now

00:14:39,270 --> 00:14:45,120
let's look at as most of you have seen

00:14:41,760 --> 00:14:46,350
now cloud foundry and kubernetes they're

00:14:45,120 --> 00:14:48,300
actually working together there are

00:14:46,350 --> 00:14:51,570
multiple projects that are going on here

00:14:48,300 --> 00:14:55,290
and you can see there are at least five

00:14:51,570 --> 00:14:57,480
of these projects mainly led by you know

00:14:55,290 --> 00:14:59,730
different vendors here the first one is

00:14:57,480 --> 00:15:02,670
the CC or the cloud foundry enterprise

00:14:59,730 --> 00:15:06,660
environment that Tammy mentioned this

00:15:02,670 --> 00:15:08,760
morning and then you have sa piece you

00:15:06,660 --> 00:15:12,450
know CF kubernetes integration scenarios

00:15:08,760 --> 00:15:15,480
and then of course the ireenie project I

00:15:12,450 --> 00:15:18,270
will touch a little bit on that so

00:15:15,480 --> 00:15:21,210
that's another thing that where you will

00:15:18,270 --> 00:15:23,460
try to replace the Diego scheduler at

00:15:21,210 --> 00:15:24,790
the application level not at the

00:15:23,460 --> 00:15:29,850
container level and

00:15:24,790 --> 00:15:32,260
you just use cube instead of Diego and

00:15:29,850 --> 00:15:35,580
then of course you have other projects

00:15:32,260 --> 00:15:40,240
like cube oh and these things right so

00:15:35,580 --> 00:15:41,970
what exactly is the CFC er a CFE right

00:15:40,240 --> 00:15:45,370
the Cloud Foundry Enterprise environment

00:15:41,970 --> 00:15:48,070
so basically what we are doing is

00:15:45,370 --> 00:15:50,200
actually we are dividing this whole as a

00:15:48,070 --> 00:15:53,260
as an isolated segments what we are

00:15:50,200 --> 00:15:57,010
trying to do is we have a control plane

00:15:53,260 --> 00:16:00,910
and a data plane control plane has all

00:15:57,010 --> 00:16:04,810
the it's running on a cube cluster it's

00:16:00,910 --> 00:16:09,550
having all the CF specific like maybe

00:16:04,810 --> 00:16:11,620
goo router or you know the car cloud

00:16:09,550 --> 00:16:14,320
controller and all these different CF

00:16:11,620 --> 00:16:16,480
specific fabric specific things will be

00:16:14,320 --> 00:16:19,330
deployed on the control plane and then

00:16:16,480 --> 00:16:21,700
your applications residing on the Diego

00:16:19,330 --> 00:16:25,660
cells that will be on the data plane so

00:16:21,700 --> 00:16:27,700
you have a nice isolation there and that

00:16:25,660 --> 00:16:33,280
all of these things are actually running

00:16:27,700 --> 00:16:36,040
on a cube cluster and the the beauty of

00:16:33,280 --> 00:16:38,320
this is you will be running on that at

00:16:36,040 --> 00:16:40,180
the same time you have access to all

00:16:38,320 --> 00:16:42,220
kinds of services that are available in

00:16:40,180 --> 00:16:46,560
the marketplace it may be a blockchain

00:16:42,220 --> 00:16:48,970
or a IR IOT so you have the nice

00:16:46,560 --> 00:16:51,810
orchestration layer that's handled by

00:16:48,970 --> 00:16:54,790
the cube but at the same time you have

00:16:51,810 --> 00:16:57,340
integration to all kinds of services

00:16:54,790 --> 00:16:59,500
there and you have the concept of you

00:16:57,340 --> 00:17:03,180
know you can use the helm concept so

00:16:59,500 --> 00:17:06,730
it's like kind of a first step towards a

00:17:03,180 --> 00:17:12,700
nice integration between cloud foundry

00:17:06,730 --> 00:17:17,200
and kubernetes this is just a dashboard

00:17:12,700 --> 00:17:19,510
you can see that the application level

00:17:17,200 --> 00:17:23,140
like the container level and also the

00:17:19,510 --> 00:17:25,300
pod level resources and resource usage

00:17:23,140 --> 00:17:29,110
and all the stuff you can actually see

00:17:25,300 --> 00:17:30,580
it from them so now let's talk about you

00:17:29,110 --> 00:17:32,280
know what kind of problems from an

00:17:30,580 --> 00:17:34,810
engineering point of view you will see

00:17:32,280 --> 00:17:38,190
now you will get into nested container

00:17:34,810 --> 00:17:42,450
issues then you may see okay so now

00:17:38,190 --> 00:17:45,300
have the garden containers within the

00:17:42,450 --> 00:17:47,970
docker container so how am I going to

00:17:45,300 --> 00:17:50,340
scale do I have any kind of issues here

00:17:47,970 --> 00:17:52,410
so all those things you will get into

00:17:50,340 --> 00:17:54,720
with this architecture that we have here

00:17:52,410 --> 00:17:56,490
because now the way we are trying to do

00:17:54,720 --> 00:18:01,170
is we're going to have we're going to

00:17:56,490 --> 00:18:03,270
limit one Diego cell per node so it is

00:18:01,170 --> 00:18:06,960
actually a basically a pod

00:18:03,270 --> 00:18:09,150
so that has other parts like the

00:18:06,960 --> 00:18:12,030
monitoring like Prometheus powerful in

00:18:09,150 --> 00:18:16,850
d-pod but within that docker container

00:18:12,030 --> 00:18:21,060
or the the Diego cell pod you will have

00:18:16,850 --> 00:18:24,150
multiple maybe up to 80 or based on how

00:18:21,060 --> 00:18:27,660
big your node is you can go up to eight

00:18:24,150 --> 00:18:30,150
and eighty or a hundred garden

00:18:27,660 --> 00:18:34,110
containers so when you have this kind of

00:18:30,150 --> 00:18:36,870
a nested so do we have any performance

00:18:34,110 --> 00:18:38,610
issues of scalability issues that's

00:18:36,870 --> 00:18:41,220
exactly the the first thing that we

00:18:38,610 --> 00:18:44,640
looked at so we have a direct comparison

00:18:41,220 --> 00:18:46,530
of the ideas you're running the same

00:18:44,640 --> 00:18:49,860
application and network intensive

00:18:46,530 --> 00:18:53,910
application on the Cuban itis platform

00:18:49,860 --> 00:18:56,460
in parts and then you do the same thing

00:18:53,910 --> 00:18:58,140
on C fee like Cloud Foundry enterprise

00:18:56,460 --> 00:19:01,200
environment of course now you're running

00:18:58,140 --> 00:19:05,550
those applications in garden containers

00:19:01,200 --> 00:19:08,930
in the Diego pod right so you can see

00:19:05,550 --> 00:19:12,300
the performance wise you don't see any

00:19:08,930 --> 00:19:15,120
extra tax of course a little bit but you

00:19:12,300 --> 00:19:19,080
don't have that additional scalability

00:19:15,120 --> 00:19:23,250
issue or anything on the undersea fee

00:19:19,080 --> 00:19:26,130
nested container architecture and you

00:19:23,250 --> 00:19:28,590
can also see the scalability you can see

00:19:26,130 --> 00:19:30,690
that both the java application as well

00:19:28,590 --> 00:19:34,140
as a node application you can clearly

00:19:30,690 --> 00:19:36,750
see how elastic and how you can actually

00:19:34,140 --> 00:19:43,160
scale those applications even with this

00:19:36,750 --> 00:19:45,870
nested nested container architecture now

00:19:43,160 --> 00:19:48,240
see fee gives you a Cuban a

00:19:45,870 --> 00:19:50,900
disintegration at at the lower level

00:19:48,240 --> 00:19:54,180
right because you are your

00:19:50,900 --> 00:19:58,170
building your Cloud Foundry on top of aq

00:19:54,180 --> 00:20:00,450
cluster but at the application level you

00:19:58,170 --> 00:20:02,460
still use Diego scheduler so now you

00:20:00,450 --> 00:20:05,250
have two schedulers you have at the

00:20:02,460 --> 00:20:06,930
container level 1 cube scheduler at the

00:20:05,250 --> 00:20:12,120
application level you have the Diego

00:20:06,930 --> 00:20:15,060
scheduler well that's you may see some

00:20:12,120 --> 00:20:18,390
problems later on so the project called

00:20:15,060 --> 00:20:20,970
ireenie is actually mainly work we are

00:20:18,390 --> 00:20:24,030
working on that and Simon is going to be

00:20:20,970 --> 00:20:26,700
actually talking about this later so you

00:20:24,030 --> 00:20:29,190
can see the idea behind this ireenie

00:20:26,700 --> 00:20:31,350
project is because CF is pretty good for

00:20:29,190 --> 00:20:35,490
the experience so we would like to keep

00:20:31,350 --> 00:20:38,130
the the best of CF part and then

00:20:35,490 --> 00:20:40,590
kubernetes is a lot of community behind

00:20:38,130 --> 00:20:45,540
it it's a it's a nice scheduler so let's

00:20:40,590 --> 00:20:49,110
keep kubernetes for scheduling and then

00:20:45,540 --> 00:20:51,030
keep the DevOps and you know develop

00:20:49,110 --> 00:20:52,530
developer experience with the cloud

00:20:51,030 --> 00:20:54,720
controller and see of push and all that

00:20:52,530 --> 00:20:57,690
stuff with CF so if you combine these

00:20:54,720 --> 00:21:00,900
two things right that's where this

00:20:57,690 --> 00:21:05,850
iranian thing will come here so how it

00:21:00,900 --> 00:21:07,950
looks like if you look at this on the on

00:21:05,850 --> 00:21:10,680
the left hand side you can clearly see

00:21:07,950 --> 00:21:12,900
that Cloud Foundry as we talked about

00:21:10,680 --> 00:21:15,510
the CFE like a cloud folder enterprise

00:21:12,900 --> 00:21:17,640
environment where you have the IES and

00:21:15,510 --> 00:21:20,070
then you have Q cluster on top and then

00:21:17,640 --> 00:21:24,360
you have the cloud foundry stack if you

00:21:20,070 --> 00:21:26,760
have CP + ireenie then what you're doing

00:21:24,360 --> 00:21:30,990
those stars you can see where you are

00:21:26,760 --> 00:21:34,110
replacing the garden scheduler and the

00:21:30,990 --> 00:21:35,940
garden cells you may not you don't have

00:21:34,110 --> 00:21:38,820
that now you were actually when you do a

00:21:35,940 --> 00:21:40,920
sea of push now it will be pushed to a

00:21:38,820 --> 00:21:43,830
cube scheduler so you have a kubernetes

00:21:40,920 --> 00:21:47,330
and then instead of Diego cells you have

00:21:43,830 --> 00:21:52,770
this irony so this is the direction that

00:21:47,330 --> 00:21:54,690
in future we may see Cloud Foundry so

00:21:52,770 --> 00:21:58,980
for more details actually there are some

00:21:54,690 --> 00:22:00,460
sessions you know today at 350 we have a

00:21:58,980 --> 00:22:03,730
panel discussion where

00:22:00,460 --> 00:22:06,369
Simon and rest of the folks are going to

00:22:03,730 --> 00:22:08,710
actually talk in detail on this and then

00:22:06,369 --> 00:22:11,440
tomorrow we have two more sessions of

00:22:08,710 --> 00:22:16,509
course the CFE from Simon and Tammy and

00:22:11,440 --> 00:22:18,940
then another thing tomorrow again so now

00:22:16,509 --> 00:22:23,080
we talked about kubernetes we talked

00:22:18,940 --> 00:22:24,340
about integration of kubernetes both at

00:22:23,080 --> 00:22:26,200
the container level as well as the

00:22:24,340 --> 00:22:29,049
application level now let's talk about

00:22:26,200 --> 00:22:30,669
this tio right as I mentioned each tier

00:22:29,049 --> 00:22:34,600
is mainly the one that's actually

00:22:30,669 --> 00:22:39,179
getting attraction because to put it

00:22:34,600 --> 00:22:42,490
bluntly it will make me as a developer I

00:22:39,179 --> 00:22:45,759
don't need to care anything except my

00:22:42,490 --> 00:22:49,149
application because everything else will

00:22:45,759 --> 00:22:52,840
be handled by Easter so what exactly is

00:22:49,149 --> 00:22:54,759
Sto right so with this do you get all

00:22:52,840 --> 00:22:56,950
these different qualities of service

00:22:54,759 --> 00:22:58,809
with micro services you will get

00:22:56,950 --> 00:23:02,139
intelligent routing and load balancing

00:22:58,809 --> 00:23:05,049
you get the resiliency that you need for

00:23:02,139 --> 00:23:07,210
micro services then you can enforce the

00:23:05,049 --> 00:23:10,059
fleet wide policy enforcement you can

00:23:07,210 --> 00:23:13,029
get all kinds of telemetry and reporting

00:23:10,059 --> 00:23:15,129
you'll get and then between service to

00:23:13,029 --> 00:23:17,080
service you know authentication security

00:23:15,129 --> 00:23:18,820
management because it has its own see a

00:23:17,080 --> 00:23:22,119
provider you will get the certificates

00:23:18,820 --> 00:23:23,230
and for an application as a developer I

00:23:22,119 --> 00:23:24,549
don't need to worry about the

00:23:23,230 --> 00:23:26,230
rate-limiting I don't need to worry

00:23:24,549 --> 00:23:27,999
about connection timeouts and all that

00:23:26,230 --> 00:23:29,919
stuff everything will be given by the

00:23:27,999 --> 00:23:32,409
service mesh that's exactly the reason

00:23:29,919 --> 00:23:34,529
why these two is getting actually more

00:23:32,409 --> 00:23:37,690
and more popular because everything else

00:23:34,529 --> 00:23:38,950
I'm taken care by that so as a developer

00:23:37,690 --> 00:23:42,669
I will be just focusing on my

00:23:38,950 --> 00:23:45,100
domain-specific stuff so again each tier

00:23:42,669 --> 00:23:47,200
has two things you have the control

00:23:45,100 --> 00:23:49,919
plane and the data plane so control

00:23:47,200 --> 00:23:52,119
plane has the pilot mixer and the

00:23:49,919 --> 00:23:55,710
certificate management is to yacht and

00:23:52,119 --> 00:23:58,960
then the data plane has the intelligent

00:23:55,710 --> 00:24:01,809
proxies as sidecars to each of your

00:23:58,960 --> 00:24:04,119
services and then your service doesn't

00:24:01,809 --> 00:24:07,749
know you know where the other service

00:24:04,119 --> 00:24:10,509
that it calls reside because the side

00:24:07,749 --> 00:24:11,100
core the intelligent on web proxy will

00:24:10,509 --> 00:24:13,260
handle all

00:24:11,100 --> 00:24:16,770
that I think for you and then Pilate

00:24:13,260 --> 00:24:18,240
will control the sidecar so you can

00:24:16,770 --> 00:24:21,270
actually through configuration you can

00:24:18,240 --> 00:24:22,620
actually adjust how you would like to

00:24:21,270 --> 00:24:24,330
have the traffic management and

00:24:22,620 --> 00:24:27,539
everything like can retesting a/b

00:24:24,330 --> 00:24:30,660
testing and all that stuff so when it

00:24:27,539 --> 00:24:33,960
comes to there are some work items and

00:24:30,660 --> 00:24:37,169
people are working on how we can get is

00:24:33,960 --> 00:24:40,500
teo and cloud phone we work together but

00:24:37,169 --> 00:24:44,250
the the main thing is cloud foundry has

00:24:40,500 --> 00:24:47,250
the highly opinionated and simple way of

00:24:44,250 --> 00:24:48,960
handling things that's the main positive

00:24:47,250 --> 00:24:53,220
point for a cloud foundry we don't want

00:24:48,960 --> 00:24:55,500
to lose that and the cloud foundry again

00:24:53,220 --> 00:24:57,270
remains the optimized for developer

00:24:55,500 --> 00:25:00,539
velocity right and we want to keep all

00:24:57,270 --> 00:25:02,070
these major design points while we are

00:25:00,539 --> 00:25:06,260
trying to integrate these things and

00:25:02,070 --> 00:25:09,809
again complexity of maintaining because

00:25:06,260 --> 00:25:11,909
you know we don't want to lose all the

00:25:09,809 --> 00:25:14,570
control that we have for the operators

00:25:11,909 --> 00:25:17,250
and we should have the ability to

00:25:14,570 --> 00:25:19,350
control the service mesh resources all

00:25:17,250 --> 00:25:20,760
these things that these major design

00:25:19,350 --> 00:25:23,520
points that we are actually trying to

00:25:20,760 --> 00:25:25,710
keep in mind when we look at the

00:25:23,520 --> 00:25:28,919
integration of history with cloud

00:25:25,710 --> 00:25:31,740
foundry so where exactly are we trying

00:25:28,919 --> 00:25:34,799
to integrate cloud foundry and is do

00:25:31,740 --> 00:25:36,750
there are four points there is a

00:25:34,799 --> 00:25:39,450
north-south traffic and east-west

00:25:36,750 --> 00:25:41,250
traffic so not so this like when you go

00:25:39,450 --> 00:25:43,559
through the gore outer so there is a

00:25:41,250 --> 00:25:48,059
plan to even replace goo router with

00:25:43,559 --> 00:25:50,340
envoy which is the ingress controller

00:25:48,059 --> 00:25:55,080
that an ingress gateway that comes with

00:25:50,340 --> 00:25:57,510
is to and then for east-west you need to

00:25:55,080 --> 00:25:58,740
have that sidecar kind of a concept but

00:25:57,510 --> 00:26:01,230
that's where like app to app

00:25:58,740 --> 00:26:03,539
communication and all that stuff the

00:26:01,230 --> 00:26:05,789
east-west traffic we want to have an

00:26:03,539 --> 00:26:07,860
integration point there as well and then

00:26:05,789 --> 00:26:10,260
when it comes to security because is 2

00:26:07,860 --> 00:26:13,590
handles lot of security so so we need to

00:26:10,260 --> 00:26:15,780
integrate with you a for the OAuth and

00:26:13,590 --> 00:26:18,240
why DC so these are the four touch

00:26:15,780 --> 00:26:23,429
points that we are trying to get this

00:26:18,240 --> 00:26:25,350
integration way but again because Cloud

00:26:23,429 --> 00:26:29,100
Foundry didn't have that

00:26:25,350 --> 00:26:32,030
concept of POD so you might have heard

00:26:29,100 --> 00:26:35,549
from dr. souls about you know the peas

00:26:32,030 --> 00:26:38,580
which are like kind of a sidecar pattern

00:26:35,549 --> 00:26:41,669
for our garden containers now so that

00:26:38,580 --> 00:26:45,780
you can have the Envoy intelligent

00:26:41,669 --> 00:26:49,289
proxies attached to the services so this

00:26:45,780 --> 00:26:55,080
is the work that the containers tribe

00:26:49,289 --> 00:26:56,150
did recently to support this so what are

00:26:55,080 --> 00:26:59,610
the risks of

00:26:56,150 --> 00:27:02,159
embracing is tio into Cloud Foundry like

00:26:59,610 --> 00:27:05,130
no because the first and foremost is the

00:27:02,159 --> 00:27:08,039
performance and scalability because we

00:27:05,130 --> 00:27:12,360
have hundreds if not thousands of routes

00:27:08,039 --> 00:27:15,539
so we want to make sure that is Tio's

00:27:12,360 --> 00:27:17,789
pilot can handle and scale as we

00:27:15,539 --> 00:27:20,370
integrate that and then we have to

00:27:17,789 --> 00:27:22,919
balance the desire to do the

00:27:20,370 --> 00:27:25,559
enhancements because now we are getting

00:27:22,919 --> 00:27:28,309
into a completely two different because

00:27:25,559 --> 00:27:31,289
east you itself is a very active dynamic

00:27:28,309 --> 00:27:33,809
open-source community so we want to make

00:27:31,289 --> 00:27:36,419
sure that we have minimal enhancements

00:27:33,809 --> 00:27:38,820
to the cloud foundry and keep the

00:27:36,419 --> 00:27:40,500
currency is also going to be a challenge

00:27:38,820 --> 00:27:43,679
because as I said like a for touch

00:27:40,500 --> 00:27:46,289
points so there are multiple teams

00:27:43,679 --> 00:27:48,990
within cloud foundry that they need to

00:27:46,289 --> 00:27:53,630
really keep the currency when we talk

00:27:48,990 --> 00:27:53,630
about sto and co-founder together

00:27:54,000 --> 00:27:59,669
luckily of course I am as I said we have

00:27:58,140 --> 00:28:04,080
taken the performance and scalability

00:27:59,669 --> 00:28:06,510
things into consideration as I'm leading

00:28:04,080 --> 00:28:11,100
the jointly that work group in East EO

00:28:06,510 --> 00:28:13,380
so we have few issues already opened we

00:28:11,100 --> 00:28:17,370
are working on pilot scalability issues

00:28:13,380 --> 00:28:18,720
apart from the other 13 things that we

00:28:17,370 --> 00:28:22,860
are actually working right now so East

00:28:18,720 --> 00:28:25,320
EO as we speak is getting optimized in

00:28:22,860 --> 00:28:27,809
multiple fronts right from telemetry to

00:28:25,320 --> 00:28:30,090
cash management buffer management pilot

00:28:27,809 --> 00:28:33,179
ingress gateway everything is being

00:28:30,090 --> 00:28:36,419
worked as as we speak there is a SWAT

00:28:33,179 --> 00:28:38,700
team that I'm leading we have

00:28:36,419 --> 00:28:40,590
a work item that's going on actually you

00:28:38,700 --> 00:28:45,450
can see all the stuff that's going on

00:28:40,590 --> 00:28:48,799
here in those links and also to make it

00:28:45,450 --> 00:28:51,929
easy for SEO performance we are

00:28:48,799 --> 00:28:55,049
integrating multiple dashboards that

00:28:51,929 --> 00:28:57,690
will make it easy for anybody using this

00:28:55,049 --> 00:28:59,909
tool to understand the resource

00:28:57,690 --> 00:29:02,850
requirements as you can see here we

00:28:59,909 --> 00:29:05,820
recently we have integrated this how

00:29:02,850 --> 00:29:08,299
many V CPUs you need for a thousand

00:29:05,820 --> 00:29:10,980
transactions per second for a specific

00:29:08,299 --> 00:29:13,399
sto component in this case you can see

00:29:10,980 --> 00:29:17,489
history of proxy is to your telemetry

00:29:13,399 --> 00:29:20,789
and you know the policy is everything

00:29:17,489 --> 00:29:23,129
right so we are making it easy as I said

00:29:20,789 --> 00:29:25,649
sto is a very dynamic community it's

00:29:23,129 --> 00:29:30,269
getting the developed and deployed and

00:29:25,649 --> 00:29:34,399
optimized as we speak for more details I

00:29:30,269 --> 00:29:37,529
think we have some sessions Shannon and

00:29:34,399 --> 00:29:41,789
our Erin are going to be talking about

00:29:37,529 --> 00:29:44,429
like 2:30 today and we have office hours

00:29:41,789 --> 00:29:48,570
and also is to lots of other sessions

00:29:44,429 --> 00:29:50,190
you'll get there again this is like if

00:29:48,570 --> 00:29:52,139
you want to put all of this together

00:29:50,190 --> 00:29:53,730
like you know Watson blockchain

00:29:52,139 --> 00:29:56,909
kubernetes several less Cloud Foundry

00:29:53,730 --> 00:29:59,970
everything together there is an app you

00:29:56,909 --> 00:30:03,119
can actually see that cloud coins you

00:29:59,970 --> 00:30:06,059
can go and download it and that will

00:30:03,119 --> 00:30:09,869
give you a perspective of how all of

00:30:06,059 --> 00:30:15,809
them working together and giving you an

00:30:09,869 --> 00:30:21,409
excellent user experience so with that I

00:30:15,809 --> 00:30:21,409
will complete this session any questions

00:30:23,749 --> 00:30:26,809
thank you

00:30:29,470 --> 00:30:31,530

YouTube URL: https://www.youtube.com/watch?v=M2YwUHC2VhA


