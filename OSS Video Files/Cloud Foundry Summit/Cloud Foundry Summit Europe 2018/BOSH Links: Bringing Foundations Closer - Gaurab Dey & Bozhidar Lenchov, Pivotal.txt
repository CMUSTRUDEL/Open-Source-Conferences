Title: BOSH Links: Bringing Foundations Closer - Gaurab Dey & Bozhidar Lenchov, Pivotal
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	BOSH Links: Bringing Foundations Closer - Gaurab Dey & Bozhidar Lenchov, Pivotal

Bringing up foundations using BOSH is getting easier, which is allowing you to create more and more foundations. But allowing these foundations to talk to each other if they are not under the same BOSH director is really difficult.

Don't worry, Links API is here to help you out! It will allow you as an operator to create links without the need for a separate consumer deployment on the same director. Now your deployments can talk to each other even if they are not under the same director!

One application of this will allow service brokers to talk to different directors and create custom links on-the-fly (corresponding to new service instances). These services can then be used by external consumers not managed through a BOSH deployment.

Furthermore, improvements to links allow operators to define them right in the manifest (outside of the release spec), saving time, complexity and effort. The links concept is also expanding to include consumption of generated variables through links, as well as allowing variables to consume links. To learn more or if you have questions, come check out our talk!

https://cfseu18.sched.com/event/FRyU/bosh-links-bringing-foundations-closer-gaurab-dey-bozhidar-lenchov-pivotal
Captions: 
	00:00:01,250 --> 00:00:07,020
okay then talk number one so I hope I'm

00:00:04,770 --> 00:00:08,790
producing their names trouncing their

00:00:07,020 --> 00:00:11,250
names right so we have caught up and

00:00:08,790 --> 00:00:14,549
bozidar from pivot row are talking about

00:00:11,250 --> 00:00:16,710
posh links a topic that is also kind of

00:00:14,549 --> 00:00:18,990
dear to my heart because like usually

00:00:16,710 --> 00:00:20,760
you not only have like one Bosch

00:00:18,990 --> 00:00:22,619
deployment but then you have multiple

00:00:20,760 --> 00:00:24,539
ones and then you end up with questions

00:00:22,619 --> 00:00:27,630
around how are these pieces actually

00:00:24,539 --> 00:00:30,000
connected so just with that quick intro

00:00:27,630 --> 00:00:33,840
handing it over to other folks talking

00:00:30,000 --> 00:00:37,469
about the details there thank you very

00:00:33,840 --> 00:00:40,379
much so brief introduction you heard

00:00:37,469 --> 00:00:42,450
about us but we're gonna talk about a

00:00:40,379 --> 00:00:46,800
new development and links called links

00:00:42,450 --> 00:00:49,710
API oops and this is us so this is

00:00:46,800 --> 00:00:53,879
borrowed and I'm bored are we wrote work

00:00:49,710 --> 00:00:56,010
at pivotal in the Toronto office and we

00:00:53,879 --> 00:00:59,340
have experienced on different teams and

00:00:56,010 --> 00:01:06,750
Cloud Foundry so a little bit about the

00:00:59,340 --> 00:01:10,470
background of links links was introduced

00:01:06,750 --> 00:01:14,159
to help operators reduce duplication

00:01:10,470 --> 00:01:17,100
across deployments and to provide

00:01:14,159 --> 00:01:19,500
arbitrary information for example

00:01:17,100 --> 00:01:21,479
instead of hard-coding static IP is

00:01:19,500 --> 00:01:25,490
wondering where you might securely store

00:01:21,479 --> 00:01:30,810
them reducing errors in operator

00:01:25,490 --> 00:01:32,659
duplication and this was introduced in

00:01:30,810 --> 00:01:42,200
May 2016

00:01:32,659 --> 00:01:42,200
since Bosch since Bosch 250 5.5

00:01:44,270 --> 00:01:50,810
and another thing it can simplify is

00:01:48,740 --> 00:01:53,810
automated servers service broker

00:01:50,810 --> 00:01:58,039
deployments so you can have that

00:01:53,810 --> 00:02:00,200
functionality quick example which most

00:01:58,039 --> 00:02:04,039
of you hopefully have used links and

00:02:00,200 --> 00:02:05,509
know about them there's essentially two

00:02:04,039 --> 00:02:07,820
types of links you can have internal

00:02:05,509 --> 00:02:12,170
links within the same deployment so

00:02:07,820 --> 00:02:14,180
within a job spec you would declare the

00:02:12,170 --> 00:02:17,269
name of the link the type of link what

00:02:14,180 --> 00:02:22,010
properties it would provide and you can

00:02:17,269 --> 00:02:25,040
have default options you have consuming

00:02:22,010 --> 00:02:29,959
jobs which again specified the name and

00:02:25,040 --> 00:02:32,060
type of link to consume and you might

00:02:29,959 --> 00:02:33,920
have a consumer job template such as a

00:02:32,060 --> 00:02:36,500
configuration file or something else

00:02:33,920 --> 00:02:39,160
that actually reads the link information

00:02:36,500 --> 00:02:43,099
and renders it into a template and you

00:02:39,160 --> 00:02:47,350
have the deployment manifest where if we

00:02:43,099 --> 00:02:50,320
examine we can see the providing jobs

00:02:47,350 --> 00:02:53,209
you can have aliases on the link which

00:02:50,320 --> 00:02:55,579
if there's multiple for example jobs

00:02:53,209 --> 00:02:58,730
which are databases for example

00:02:55,579 --> 00:03:00,799
front-end and back-end databases you

00:02:58,730 --> 00:03:05,299
will need alias as if they provide the

00:03:00,799 --> 00:03:07,880
same type of link the consuming job on

00:03:05,299 --> 00:03:10,790
the other hand would reference that

00:03:07,880 --> 00:03:12,799
alias you provided and as we'll see in

00:03:10,790 --> 00:03:15,280
the next slide we'll see what happens if

00:03:12,799 --> 00:03:19,340
you want to connect links across

00:03:15,280 --> 00:03:23,269
deployments so this would be external

00:03:19,340 --> 00:03:24,920
links similarly provider in consumer job

00:03:23,269 --> 00:03:28,549
specs you would define your link

00:03:24,920 --> 00:03:30,139
information you would have a separate

00:03:28,549 --> 00:03:32,930
provider deployment and a separate

00:03:30,139 --> 00:03:35,350
consumer deployment and there'll be much

00:03:32,930 --> 00:03:38,239
the same as we saw in the previous slide

00:03:35,350 --> 00:03:39,350
one difference is in the consuming

00:03:38,239 --> 00:03:42,290
deployment you would have to specify

00:03:39,350 --> 00:03:45,440
from which deployment you're consuming

00:03:42,290 --> 00:03:48,190
the link and we have a similar job

00:03:45,440 --> 00:03:50,750
template as well and the consuming

00:03:48,190 --> 00:03:55,910
consuming job and the consumer

00:03:50,750 --> 00:03:58,000
deployment so moving on next we'll talk

00:03:55,910 --> 00:04:02,820
a little bit about the motivation for

00:03:58,000 --> 00:04:05,760
API the nature of the stock it was

00:04:02,820 --> 00:04:08,650
introduced to automatically share

00:04:05,760 --> 00:04:12,340
information between different

00:04:08,650 --> 00:04:14,290
deployments and those could be

00:04:12,340 --> 00:04:18,130
deployments not managed by the same

00:04:14,290 --> 00:04:21,370
director you see examples of the API and

00:04:18,130 --> 00:04:27,660
how you can create links with it outside

00:04:21,370 --> 00:04:30,790
of deployment manifests for link content

00:04:27,660 --> 00:04:35,200
we still have much the same properties

00:04:30,790 --> 00:04:39,670
that you would provide but links API

00:04:35,200 --> 00:04:42,460
also helps with bosh TMS so you can have

00:04:39,670 --> 00:04:47,800
DNS addresses provided by the links

00:04:42,460 --> 00:04:51,010
instead of just IPS links API also

00:04:47,800 --> 00:04:55,090
enables future development so operators

00:04:51,010 --> 00:04:57,970
can better visualize how changing a link

00:04:55,090 --> 00:05:00,130
might affect deployments who is

00:04:57,970 --> 00:05:02,980
consuming links who is providing links

00:05:00,130 --> 00:05:05,050
within their foundation a couple of her

00:05:02,980 --> 00:05:07,330
colleagues would be elaborating more on

00:05:05,050 --> 00:05:14,320
that in a separate talk which won't

00:05:07,330 --> 00:05:16,680
mention a little bit later on so in

00:05:14,320 --> 00:05:19,990
terms of changing the link links API

00:05:16,680 --> 00:05:21,880
better visualization would help you see

00:05:19,990 --> 00:05:25,860
what happens if the password changes

00:05:21,880 --> 00:05:25,860
port or AZ's for example

00:05:30,650 --> 00:05:43,229
so there's a couple of issues for

00:05:33,449 --> 00:05:45,240
example how do changes propagate with

00:05:43,229 --> 00:05:48,240
the existing links there's less

00:05:45,240 --> 00:05:53,509
awareness of the changes the impact

00:05:48,240 --> 00:05:56,219
changes to link definition or link

00:05:53,509 --> 00:06:01,650
providing a link what the changes would

00:05:56,219 --> 00:06:04,169
be and there might be there's less

00:06:01,650 --> 00:06:08,279
information about potential downtime

00:06:04,169 --> 00:06:11,039
because unless you manually go and or

00:06:08,279 --> 00:06:13,830
you know the deployments which consumed

00:06:11,039 --> 00:06:19,340
the link you might not know how much

00:06:13,830 --> 00:06:19,340
downtime there could be if link changes

00:06:23,330 --> 00:06:29,279
oops and the current solution to what

00:06:26,819 --> 00:06:31,770
the existing lengths is redeploying the

00:06:29,279 --> 00:06:35,669
consumers of the link to get the new

00:06:31,770 --> 00:06:39,569
information after the link is updated so

00:06:35,669 --> 00:06:43,349
links API was and currently is still

00:06:39,569 --> 00:06:45,860
under development it's mostly stable and

00:06:43,349 --> 00:06:49,560
by that I mean it has been developed for

00:06:45,860 --> 00:06:53,270
about a year I think there's still you

00:06:49,560 --> 00:07:00,479
know small updates going on and there's

00:06:53,270 --> 00:07:02,099
talk about links API v2 so visualization

00:07:00,479 --> 00:07:06,259
which I briefly touched upon is one

00:07:02,099 --> 00:07:09,240
application with the new links API

00:07:06,259 --> 00:07:10,680
operators can better calculate the

00:07:09,240 --> 00:07:13,589
footprint of the links how many

00:07:10,680 --> 00:07:18,240
consumers of the link are there so they

00:07:13,589 --> 00:07:20,639
can better gauge down time links API

00:07:18,240 --> 00:07:23,899
allows link creation outside of the

00:07:20,639 --> 00:07:28,430
manifests so if you have the appropriate

00:07:23,899 --> 00:07:31,979
credentials to make the API call you can

00:07:28,430 --> 00:07:37,229
create a link and for example get the

00:07:31,979 --> 00:07:39,029
address of a service instance that you

00:07:37,229 --> 00:07:40,270
know and start using it outside of a

00:07:39,029 --> 00:07:43,180
deployment

00:07:40,270 --> 00:07:46,000
or with them a deployment not managed by

00:07:43,180 --> 00:07:50,020
the same director links API allows

00:07:46,000 --> 00:07:52,449
monitoring link consumers and now I'll

00:07:50,020 --> 00:07:54,789
pass it off to gorup to talk about some

00:07:52,449 --> 00:08:01,750
of these updates and how links API

00:07:54,789 --> 00:08:03,910
helped reimagine links Thank You boss so

00:08:01,750 --> 00:08:08,259
the main problem with previous link

00:08:03,910 --> 00:08:09,419
operations was mostly the component

00:08:08,259 --> 00:08:12,340
that's associated with the link

00:08:09,419 --> 00:08:13,870
generated during runtime and the changes

00:08:12,340 --> 00:08:15,639
that are getting propagated between

00:08:13,870 --> 00:08:18,069
various deployments are within the same

00:08:15,639 --> 00:08:21,669
deployments there is no state management

00:08:18,069 --> 00:08:23,500
for them so except if it's a cross

00:08:21,669 --> 00:08:26,169
deployment link then your deployment

00:08:23,500 --> 00:08:28,360
itself used to contain the link contents

00:08:26,169 --> 00:08:31,690
as part of the deployment and we used to

00:08:28,360 --> 00:08:34,839
store it but this costs like lots of

00:08:31,690 --> 00:08:37,390
issues in terms of like multiple

00:08:34,839 --> 00:08:41,589
regeneration of the same component for

00:08:37,390 --> 00:08:45,550
the length and the properties which was

00:08:41,589 --> 00:08:47,649
redundant so in order to refactor this

00:08:45,550 --> 00:08:50,709
whole thing we considered certain topics

00:08:47,649 --> 00:08:52,839
like what are the common properties

00:08:50,709 --> 00:08:55,060
within the instance groups that are

00:08:52,839 --> 00:08:56,829
taken under consideration for not

00:08:55,060 --> 00:09:00,100
getting like recalculated every time you

00:08:56,829 --> 00:09:02,680
deploy so we fragmented the whole link

00:09:00,100 --> 00:09:05,740
component into various sections so now

00:09:02,680 --> 00:09:08,290
we have linked providers they have their

00:09:05,740 --> 00:09:11,529
own intents then we have link consumers

00:09:08,290 --> 00:09:13,810
and their association generates a link

00:09:11,529 --> 00:09:15,640
so whenever we have a consumer that is

00:09:13,810 --> 00:09:17,800
associating with the provider it's

00:09:15,640 --> 00:09:20,529
considered as a link and rather than

00:09:17,800 --> 00:09:22,600
associating it like adding this whole

00:09:20,529 --> 00:09:25,000
whole component and replicating it again

00:09:22,600 --> 00:09:27,250
and again on each instance we associate

00:09:25,000 --> 00:09:29,320
it with the instance as a separate table

00:09:27,250 --> 00:09:31,329
so it's only the Association that is

00:09:29,320 --> 00:09:34,839
being replicated all the time not the

00:09:31,329 --> 00:09:37,029
actual component so it also reduces the

00:09:34,839 --> 00:09:38,310
amount of calculation time that is

00:09:37,029 --> 00:09:41,260
required for your deployment

00:09:38,310 --> 00:09:45,610
significantly because calculation of

00:09:41,260 --> 00:09:47,320
link itself is very costly so as

00:09:45,610 --> 00:09:49,100
previously scheduled is a provider so

00:09:47,320 --> 00:09:51,710
instead of

00:09:49,100 --> 00:09:53,450
the intent of the provider so we kind of

00:09:51,710 --> 00:09:55,880
reimagine the whole intent of what

00:09:53,450 --> 00:09:58,550
provider and consumer might be so

00:09:55,880 --> 00:10:01,520
providers basically whatever properties

00:09:58,550 --> 00:10:04,280
you want to expose either externally or

00:10:01,520 --> 00:10:11,780
internally that are part of the provider

00:10:04,280 --> 00:10:13,100
components so your properties if you

00:10:11,780 --> 00:10:15,080
don't want to actually expose any

00:10:13,100 --> 00:10:17,600
properties but just the IPS you can

00:10:15,080 --> 00:10:19,940
still create like blank providers that

00:10:17,600 --> 00:10:22,880
will just expose the IP addresses or the

00:10:19,940 --> 00:10:26,180
DNS addresses or instance IDs of your

00:10:22,880 --> 00:10:28,370
instance and that can be either consumed

00:10:26,180 --> 00:10:33,620
within the same deployment or externally

00:10:28,370 --> 00:10:35,270
by the api's so other other consumers

00:10:33,620 --> 00:10:38,860
can actually know about just your IPS

00:10:35,270 --> 00:10:41,540
not the additional properties and

00:10:38,860 --> 00:10:45,170
similar to that is like consumer you

00:10:41,540 --> 00:10:47,900
define your specific job can just

00:10:45,170 --> 00:10:49,700
specify a consumer and list what are the

00:10:47,900 --> 00:10:52,730
properties that you want to consume and

00:10:49,700 --> 00:10:53,900
Bosch will just consume whatever Bosch

00:10:52,730 --> 00:10:56,530
will just add all the properties that

00:10:53,900 --> 00:11:01,760
you are specified in the consumer and

00:10:56,530 --> 00:11:04,850
update your deployment so there are a

00:11:01,760 --> 00:11:07,340
couple of objects associated by default

00:11:04,850 --> 00:11:09,580
for each links one of the men's address

00:11:07,340 --> 00:11:12,980
that gives you like the DNS entries of

00:11:09,580 --> 00:11:16,070
of the link that you have called for so

00:11:12,980 --> 00:11:19,190
this address can be either IP and a DNS

00:11:16,070 --> 00:11:21,710
sorry either IPS or a DNS based on the

00:11:19,190 --> 00:11:23,450
provider deployment so if the provider

00:11:21,710 --> 00:11:26,270
explicitly says I just want to deploy

00:11:23,450 --> 00:11:28,220
with IPS then when you query this

00:11:26,270 --> 00:11:31,820
address it would be just IPS not the

00:11:28,220 --> 00:11:35,870
address DNS address then you can filter

00:11:31,820 --> 00:11:39,680
out based on a ZZZ also then there is a

00:11:35,870 --> 00:11:41,690
P level P processes associated pre

00:11:39,680 --> 00:11:43,160
accesses associated with like each link

00:11:41,690 --> 00:11:45,920
so if your link is providing multiple

00:11:43,160 --> 00:11:49,460
properties you can query those

00:11:45,920 --> 00:11:52,070
properties based on like name of your

00:11:49,460 --> 00:11:54,080
property and this will actually pull out

00:11:52,070 --> 00:11:58,160
your provider and extract the properties

00:11:54,080 --> 00:12:01,670
from it and then you can also list

00:11:58,160 --> 00:12:02,630
instances associated with in and each

00:12:01,670 --> 00:12:05,529
instance

00:12:02,630 --> 00:12:09,399
have some default properties inside them

00:12:05,529 --> 00:12:13,850
like the name associated with them IDs

00:12:09,399 --> 00:12:17,600
index easy so easy cz's you can specify

00:12:13,850 --> 00:12:21,230
multiple easy so it can actually use it

00:12:17,600 --> 00:12:22,910
as an are operators and based on the

00:12:21,230 --> 00:12:28,910
easies you have specified it will give

00:12:22,910 --> 00:12:30,529
you one of them and also you can specify

00:12:28,910 --> 00:12:33,019
like which instance is your bootstrap

00:12:30,529 --> 00:12:34,970
node so it will give you like a boolean

00:12:33,019 --> 00:12:36,829
value based on like is the current

00:12:34,970 --> 00:12:38,389
instance of bootstrap instance or not so

00:12:36,829 --> 00:12:40,910
this property is basically used by most

00:12:38,389 --> 00:12:43,430
of the cluster environments where your

00:12:40,910 --> 00:12:45,410
initial node need to know that it is the

00:12:43,430 --> 00:12:47,660
first node in the cluster and it does

00:12:45,410 --> 00:12:52,040
some configuration based on like which

00:12:47,660 --> 00:12:55,190
one is your initial instance so based on

00:12:52,040 --> 00:12:59,540
all this reimagine ation we introduced

00:12:55,190 --> 00:13:01,940
API and I think Bosh will go forward and

00:12:59,540 --> 00:13:04,190
like add more details on what this API

00:13:01,940 --> 00:13:06,970
endpoint might look like and what are

00:13:04,190 --> 00:13:10,459
the properties associated with them

00:13:06,970 --> 00:13:12,920
Thank You Ghorab so we sped through the

00:13:10,459 --> 00:13:15,350
first beginning which hopefully most of

00:13:12,920 --> 00:13:18,019
you knew about the you know examples of

00:13:15,350 --> 00:13:20,120
links and the properties that Ghorab

00:13:18,019 --> 00:13:24,439
talked about they're also listed on Bosh

00:13:20,120 --> 00:13:26,420
i/o so this presentation is also posted

00:13:24,439 --> 00:13:28,970
on the schedule website if you wanted to

00:13:26,420 --> 00:13:31,399
refer to it after in terms of the new

00:13:28,970 --> 00:13:34,550
links api's this table shows the

00:13:31,399 --> 00:13:36,380
different API endpoints that there are

00:13:34,550 --> 00:13:40,519
and we'll go into more detail about each

00:13:36,380 --> 00:13:44,360
one so there's a few gets endpoints

00:13:40,519 --> 00:13:46,699
which can list providers consumers links

00:13:44,360 --> 00:13:50,149
within a deployment and the addresses

00:13:46,699 --> 00:13:52,279
that those links provide there's one

00:13:50,149 --> 00:13:54,500
post endpoint at the moment to create a

00:13:52,279 --> 00:14:00,910
link and one delete endpoint to delete a

00:13:54,500 --> 00:14:04,670
link at the moment these api is require

00:14:00,910 --> 00:14:09,769
admin privileges we'll talk about how

00:14:04,670 --> 00:14:12,139
this might change with links API v2 so

00:14:09,769 --> 00:14:15,889
jumping into the first one listing link

00:14:12,139 --> 00:14:18,199
providers in terms of request parameters

00:14:15,889 --> 00:14:20,949
you provide your deployment name and you

00:14:18,199 --> 00:14:24,920
would get a response similar to this

00:14:20,949 --> 00:14:27,519
listing the providers and some metadata

00:14:24,920 --> 00:14:32,449
about them in that deployment

00:14:27,519 --> 00:14:35,029
similarly for consumers the query

00:14:32,449 --> 00:14:36,889
parameters are again deployment name and

00:14:35,029 --> 00:14:41,089
you get a similar response about all the

00:14:36,889 --> 00:14:45,139
consumers within the deployment the

00:14:41,089 --> 00:14:50,029
third endpoint is listing links so

00:14:45,139 --> 00:14:54,620
within the deployment again you get the

00:14:50,029 --> 00:14:56,360
response with metadata the the IDS here

00:14:54,620 --> 00:14:58,699
are important and they tie back to

00:14:56,360 --> 00:15:04,189
responses from the previous API so you

00:14:58,699 --> 00:15:09,279
have provider ID and consumer ID as well

00:15:04,189 --> 00:15:13,939
as the link ID for each each entry

00:15:09,279 --> 00:15:15,920
jumping into the post so assuming we all

00:15:13,939 --> 00:15:18,009
have the right credentials and we

00:15:15,920 --> 00:15:22,189
provide the right parameters which are

00:15:18,009 --> 00:15:27,589
link provider ID and the name of the new

00:15:22,189 --> 00:15:31,809
consumer this is an arbitrary name type

00:15:27,589 --> 00:15:31,809
should be always passed in as external

00:15:33,399 --> 00:15:42,800
we if we post this a new link would be

00:15:38,509 --> 00:15:46,790
created and you receive the ID of the

00:15:42,800 --> 00:15:49,069
new link that was created at the moment

00:15:46,790 --> 00:15:52,279
there's an API only an API endpoint to

00:15:49,069 --> 00:15:55,970
retrieve the link address it requires

00:15:52,279 --> 00:15:57,860
you to pass the link ID so which you

00:15:55,970 --> 00:15:59,779
might get from querying all the links in

00:15:57,860 --> 00:16:02,809
the deployment or you have it from a

00:15:59,779 --> 00:16:05,649
link you just created there is an

00:16:02,809 --> 00:16:08,779
optional parameter about AZ's and this

00:16:05,649 --> 00:16:12,529
you can provide the name of one AZ or

00:16:08,779 --> 00:16:15,230
multiple and you can also filter by

00:16:12,529 --> 00:16:18,559
health status and here are some of the

00:16:15,230 --> 00:16:23,050
values which are accepted as a response

00:16:18,559 --> 00:16:25,780
you would get the dns and the link and

00:16:23,050 --> 00:16:28,300
for all these examples we use a

00:16:25,780 --> 00:16:30,760
relatively new feature of the bar CLI

00:16:28,300 --> 00:16:33,850
Bosch curl which has been available

00:16:30,760 --> 00:16:39,990
since Bosch CLI five point three point

00:16:33,850 --> 00:16:42,820
one lastly how to delete links there's

00:16:39,990 --> 00:16:45,250
an API endpoint to delete and it will

00:16:42,820 --> 00:16:47,050
only act on links which were created

00:16:45,250 --> 00:16:50,830
using the links API so if you try to

00:16:47,050 --> 00:16:52,780
delete a link which is consumed and

00:16:50,830 --> 00:16:56,680
provided within the manifests like the

00:16:52,780 --> 00:16:58,480
old-style links I'm using old and you

00:16:56,680 --> 00:17:01,240
know just as a word they're certainly

00:16:58,480 --> 00:17:03,730
still being used if you try to use it

00:17:01,240 --> 00:17:06,040
with an ID of an existing link that was

00:17:03,730 --> 00:17:09,600
not created with the API the request

00:17:06,040 --> 00:17:11,950
will fail so this end point only deletes

00:17:09,600 --> 00:17:17,290
external links created through the API

00:17:11,950 --> 00:17:21,100
you get these response codes in various

00:17:17,290 --> 00:17:26,050
scenarios if it is successful you get to

00:17:21,100 --> 00:17:28,360
go for we'll briefly touch upon some of

00:17:26,050 --> 00:17:33,660
the improvements coming up in links API

00:17:28,360 --> 00:17:36,130
v2 for which work is currently ongoing

00:17:33,660 --> 00:17:39,060
one has improved authorization for

00:17:36,130 --> 00:17:42,040
endpoints so as I previously mentioned

00:17:39,060 --> 00:17:45,910
usually you need to be the admin user

00:17:42,040 --> 00:17:50,280
right now to successfully list endpoints

00:17:45,910 --> 00:17:53,590
and create new links using the API in v2

00:17:50,280 --> 00:17:56,530
you would have more deployment or team

00:17:53,590 --> 00:17:59,830
specific permissions so it's a little

00:17:56,530 --> 00:18:04,360
more granular there's a new instances

00:17:59,830 --> 00:18:06,280
endpoint and details about all of these

00:18:04,360 --> 00:18:08,920
can be found in the boss notes

00:18:06,280 --> 00:18:11,440
repository we'll have a link to that at

00:18:08,920 --> 00:18:13,150
the end of the presentation and as usual

00:18:11,440 --> 00:18:15,930
you can reach out to the Boche team on

00:18:13,150 --> 00:18:18,460
the open source slack so you can

00:18:15,930 --> 00:18:22,120
participate in the conversation about

00:18:18,460 --> 00:18:24,190
the direction of Link's API v2 and share

00:18:22,120 --> 00:18:26,700
you know what's going well what's not

00:18:24,190 --> 00:18:26,700
going well

00:18:28,660 --> 00:18:35,090
one thing worth mentioning which is

00:18:31,670 --> 00:18:41,450
connected in a way to links API is links

00:18:35,090 --> 00:18:45,740
and variables so the recent work around

00:18:41,450 --> 00:18:48,320
this area allows variables to provide

00:18:45,740 --> 00:18:51,140
part of themselves right now it's only

00:18:48,320 --> 00:18:55,070
limited to certificates but for example

00:18:51,140 --> 00:18:58,490
they can provide the San or common names

00:18:55,070 --> 00:19:01,190
portions of a generated certificate and

00:18:58,490 --> 00:19:04,880
this could be consumed within links in a

00:19:01,190 --> 00:19:08,540
similar fashion links could be consumed

00:19:04,880 --> 00:19:12,050
within variables as well and we'll see

00:19:08,540 --> 00:19:16,520
an example coming up next this is still

00:19:12,050 --> 00:19:17,900
under development but it has been the

00:19:16,520 --> 00:19:22,640
basic functionality has been available

00:19:17,900 --> 00:19:29,420
since Bosch director 267 so to show you

00:19:22,640 --> 00:19:31,700
anything as an example of this see I

00:19:29,420 --> 00:19:34,910
think that's all of it we have the usual

00:19:31,700 --> 00:19:38,290
variable section and as you can see this

00:19:34,910 --> 00:19:40,850
is a generated certificate which

00:19:38,290 --> 00:19:51,260
consumes an eternal alternative name

00:19:40,850 --> 00:19:58,400
from a link and this could be used

00:19:51,260 --> 00:20:00,020
within service brokers for example and

00:19:58,400 --> 00:20:05,650
now pass it off to Gore to talk about

00:20:00,020 --> 00:20:08,390
this application of Link's thank you

00:20:05,650 --> 00:20:10,040
so they are like various use case of

00:20:08,390 --> 00:20:13,370
this API endpoint that was like taking

00:20:10,040 --> 00:20:15,800
into consideration for first of the most

00:20:13,370 --> 00:20:18,350
important was designing it for the

00:20:15,800 --> 00:20:20,150
service brokers so like any service

00:20:18,350 --> 00:20:22,070
worker which is not maintained within

00:20:20,150 --> 00:20:23,600
Bosch environment or within see if they

00:20:22,070 --> 00:20:26,090
can actually query the endpoint and

00:20:23,600 --> 00:20:28,630
create links for it for the components

00:20:26,090 --> 00:20:32,890
which resides within the boss role and

00:20:28,630 --> 00:20:35,540
and share those content to like

00:20:32,890 --> 00:20:37,950
different components which the service

00:20:35,540 --> 00:20:40,440
broker itself is managing or

00:20:37,950 --> 00:20:42,210
so that component that resides within

00:20:40,440 --> 00:20:48,570
the Bosch world and outside the possible

00:20:42,210 --> 00:20:51,799
can like talk to each other and then

00:20:48,570 --> 00:20:54,090
it's also not kind of helps kind

00:20:51,799 --> 00:20:56,250
decoupling like your service instances

00:20:54,090 --> 00:20:57,480
from your app instances so any changes

00:20:56,250 --> 00:21:01,140
on the service instances which is

00:20:57,480 --> 00:21:03,750
managed outside partial can be done

00:21:01,140 --> 00:21:06,210
separately to the app instance managed

00:21:03,750 --> 00:21:09,570
by a different world so it's act like a

00:21:06,210 --> 00:21:12,870
glue point where you can create an

00:21:09,570 --> 00:21:16,610
external links and then specify those

00:21:12,870 --> 00:21:19,620
link properties to an app which help you

00:21:16,610 --> 00:21:26,100
not co-locate it is within the same

00:21:19,620 --> 00:21:29,429
ecosystem and based on like changes on

00:21:26,100 --> 00:21:34,669
one one side of changes in Bosch it's

00:21:29,429 --> 00:21:39,030
kind of non impacted to to the app and

00:21:34,669 --> 00:21:40,860
with the feature of DNS which is already

00:21:39,030 --> 00:21:42,840
there in Bosch the links that are

00:21:40,860 --> 00:21:46,500
created the address accessibility of

00:21:42,840 --> 00:21:50,000
them is like DNS address so rebinding

00:21:46,500 --> 00:21:52,740
app is going to be like significantly

00:21:50,000 --> 00:21:54,360
non-problematic anymore because the

00:21:52,740 --> 00:21:56,520
address that is associated with the

00:21:54,360 --> 00:21:58,860
service instances or the links are if

00:21:56,520 --> 00:22:00,840
it's DNS then you don't have to like

00:21:58,860 --> 00:22:01,530
rebind your app every time you redeploy

00:22:00,840 --> 00:22:05,100
your service

00:22:01,530 --> 00:22:08,940
so lesser downtime for your app and you

00:22:05,100 --> 00:22:10,380
can manage your services better in the

00:22:08,940 --> 00:22:15,270
background without impacting any app

00:22:10,380 --> 00:22:17,130
changes and another very significant use

00:22:15,270 --> 00:22:22,590
case of this API endpoint was

00:22:17,130 --> 00:22:24,120
visualization it helped us understand

00:22:22,590 --> 00:22:27,659
what your deployment is actually

00:22:24,120 --> 00:22:30,510
exposing when you have like something

00:22:27,659 --> 00:22:34,500
like CF deployment which has like 90

00:22:30,510 --> 00:22:37,110
instances group or 19 instances and like

00:22:34,500 --> 00:22:41,190
15 to 20 instance Club it's

00:22:37,110 --> 00:22:43,020
significantly troubling to see what

00:22:41,190 --> 00:22:44,490
links are being provided and what

00:22:43,020 --> 00:22:48,840
properties associated the links are

00:22:44,490 --> 00:22:50,600
being exposed and you are not aware like

00:22:48,840 --> 00:22:53,660
is there any security issues with

00:22:50,600 --> 00:22:56,870
exposing your password to this endpoint

00:22:53,660 --> 00:22:58,490
so this visualization will help you

00:22:56,870 --> 00:23:00,289
this API in front can help you

00:22:58,490 --> 00:23:02,330
understand like what are the properties

00:23:00,289 --> 00:23:05,270
that you're exposing to to external

00:23:02,330 --> 00:23:12,140
world or outside Bosh or within borsch

00:23:05,270 --> 00:23:14,419
environment and it also help us

00:23:12,140 --> 00:23:17,690
understand help help us understanding

00:23:14,419 --> 00:23:20,809
like what is the consumer what are the

00:23:17,690 --> 00:23:22,909
consumers and the the produces

00:23:20,809 --> 00:23:27,860
associated with the deployments are

00:23:22,909 --> 00:23:29,510
doing and what they are sharing and for

00:23:27,860 --> 00:23:32,480
the bit of visualization details and

00:23:29,510 --> 00:23:35,900
what it might actually look like you can

00:23:32,480 --> 00:23:41,900
go to a colleague store which is in

00:23:35,900 --> 00:23:46,549
Delhi Room at 2:30 and anther use case

00:23:41,900 --> 00:23:48,610
was deployment impact changes so with

00:23:46,549 --> 00:23:52,039
with the API endpoint you can kind of

00:23:48,610 --> 00:23:54,049
calculate the footprint of your changes

00:23:52,039 --> 00:23:56,299
in your your deployment that can cause

00:23:54,049 --> 00:23:58,340
within the foundation so if they're a

00:23:56,299 --> 00:24:00,500
single password change it might look

00:23:58,340 --> 00:24:02,840
very insignificant for you because it's

00:24:00,500 --> 00:24:05,059
just your own app but if 30 other

00:24:02,840 --> 00:24:07,880
deployments are consuming your your

00:24:05,059 --> 00:24:10,159
properties then its impact footprint is

00:24:07,880 --> 00:24:12,470
like significantly increased but as

00:24:10,159 --> 00:24:14,750
developer you are always unaware of this

00:24:12,470 --> 00:24:17,150
footprint like if changes in your

00:24:14,750 --> 00:24:19,190
property what significant changes other

00:24:17,150 --> 00:24:22,480
deployment might have to do to consume

00:24:19,190 --> 00:24:25,480
in so this will give you a better impact

00:24:22,480 --> 00:24:30,530
calculation before you make any changes

00:24:25,480 --> 00:24:32,780
and you can basically also communicate

00:24:30,530 --> 00:24:34,760
with like other consumer saying like hey

00:24:32,780 --> 00:24:36,500
we are like changing this property this

00:24:34,760 --> 00:24:40,159
is not going to be called port anymore

00:24:36,500 --> 00:24:42,740
it's called super port now so this type

00:24:40,159 --> 00:24:45,140
of changes can be easily shared with

00:24:42,740 --> 00:24:47,090
like other teams and you can better

00:24:45,140 --> 00:24:52,179
manage either downtimes or any other

00:24:47,090 --> 00:24:55,909
thing associated with the deployment and

00:24:52,179 --> 00:24:58,159
on-demand brokers can now create links

00:24:55,909 --> 00:25:00,760
multiple links for the same service

00:24:58,159 --> 00:25:04,070
instance so they can share the same

00:25:00,760 --> 00:25:07,340
they can filter out what properties they

00:25:04,070 --> 00:25:09,799
can they want to share either you can

00:25:07,340 --> 00:25:11,090
request for a single AZ if your service

00:25:09,799 --> 00:25:13,370
instance supposedly if your service

00:25:11,090 --> 00:25:17,150
instance is deployed in 3a Z's structure

00:25:13,370 --> 00:25:19,870
and you want just app a to associate

00:25:17,150 --> 00:25:22,159
with AZ one so you can filter out which

00:25:19,870 --> 00:25:26,530
instance you can you want to associate

00:25:22,159 --> 00:25:31,400
with the app with just filtering the ACS

00:25:26,530 --> 00:25:34,820
so these are like case studies for for

00:25:31,400 --> 00:25:37,400
links API and I guess that's the demo

00:25:34,820 --> 00:25:39,830
time so the setup that we did for the

00:25:37,400 --> 00:25:43,780
demo was we have two different wash

00:25:39,830 --> 00:25:47,600
director and we are using my sequel

00:25:43,780 --> 00:25:49,880
deployment to share like cluster changes

00:25:47,600 --> 00:25:53,360
and we are deploying to different my

00:25:49,880 --> 00:25:55,490
sequel clusters and then with the links

00:25:53,360 --> 00:25:59,809
API endpoint creating external links

00:25:55,490 --> 00:26:03,440
from director one to two and this will

00:25:59,809 --> 00:26:05,539
give you the link and the properties

00:26:03,440 --> 00:26:10,850
that are actually required for a cluster

00:26:05,539 --> 00:26:14,390
to communicate with each other and yeah

00:26:10,850 --> 00:26:18,250
I think and since life demos are always

00:26:14,390 --> 00:26:18,250
very risky we have a recording

00:26:28,539 --> 00:26:31,199
okay

00:26:32,100 --> 00:26:43,970
so yep

00:26:47,010 --> 00:26:49,580
so

00:27:13,250 --> 00:27:19,159
okay so at this point we have a director

00:27:16,520 --> 00:27:23,659
one that is Bosch one and another

00:27:19,159 --> 00:27:25,669
director on the left side posh - so

00:27:23,659 --> 00:27:29,270
first one is already deployed with the

00:27:25,669 --> 00:27:31,309
cluster environment of my sequel and we

00:27:29,270 --> 00:27:33,470
have two running instances on and so

00:27:31,309 --> 00:27:35,690
what we going to do is see what are the

00:27:33,470 --> 00:27:37,520
properties or whether the links links

00:27:35,690 --> 00:27:41,570
provider associated associated with them

00:27:37,520 --> 00:27:44,299
with the API endpoint and this will give

00:27:41,570 --> 00:27:52,850
you a list of all the providers that are

00:27:44,299 --> 00:27:54,590
there in the deployment one so the the

00:27:52,850 --> 00:27:57,530
provider we actually want to consume is

00:27:54,590 --> 00:27:59,000
is need to be shared so if the shared

00:27:57,530 --> 00:28:03,559
flag is not turned on on your provider

00:27:59,000 --> 00:28:05,919
then creating a link with this provider

00:28:03,559 --> 00:28:09,710
association will will cause issues and

00:28:05,919 --> 00:28:11,419
you will get an error so for an example

00:28:09,710 --> 00:28:14,570
we have selected this one because the

00:28:11,419 --> 00:28:15,980
shared flag is like false for this so if

00:28:14,570 --> 00:28:23,350
you try to create a provider with this

00:28:15,980 --> 00:28:27,409
it will fail so now we have selected

00:28:23,350 --> 00:28:29,980
like another another property which is

00:28:27,409 --> 00:28:29,980
shared

00:28:35,429 --> 00:28:41,729
so that was the property that you want

00:28:38,099 --> 00:28:45,839
to create as link associated with in so

00:28:41,729 --> 00:28:50,869
the idea associated with it is 27 so in

00:28:45,839 --> 00:28:54,799
the downstream will now try to create

00:28:50,869 --> 00:28:54,799
link with the P alone

00:29:05,650 --> 00:29:15,180
so we got an error Photon and now when

00:29:09,190 --> 00:29:15,180
we change the IDs associated with that

00:29:15,510 --> 00:29:20,190
227 it should actually create a link for

00:29:18,040 --> 00:29:20,190
you

00:29:27,110 --> 00:29:34,970
so these are the link properties this is

00:29:31,399 --> 00:29:37,009
actually the link content so we filtered

00:29:34,970 --> 00:29:38,419
out the link content in order to see

00:29:37,009 --> 00:29:39,950
like what are the properties that are

00:29:38,419 --> 00:29:43,309
being exposed and what the properties

00:29:39,950 --> 00:29:44,809
that you get by default for each link so

00:29:43,309 --> 00:29:46,909
you have instances you have like

00:29:44,809 --> 00:29:49,190
addresses associated with each instance

00:29:46,909 --> 00:29:53,679
since we are explicitly specifying

00:29:49,190 --> 00:29:53,679
static IPS so you only see IPS here and

00:29:54,279 --> 00:29:58,899
other properties that we have mentioned

00:29:56,659 --> 00:30:01,970
in our previous slides like Aziz

00:29:58,899 --> 00:30:04,129
bootstrap nodes or not so for this one

00:30:01,970 --> 00:30:07,779
of the one of the instance bootstrap

00:30:04,129 --> 00:30:10,489
node is true and other four is false and

00:30:07,779 --> 00:30:12,109
other properties associated and other

00:30:10,489 --> 00:30:17,409
link properties that are associated with

00:30:12,109 --> 00:30:17,409
this so we'll just use this

00:30:21,970 --> 00:30:27,190
property so the property that we have we

00:30:24,400 --> 00:30:29,290
want was just the Galera cluster health

00:30:27,190 --> 00:30:36,340
properties and we just update these

00:30:29,290 --> 00:30:39,240
properties are manifest too so you gonna

00:30:36,340 --> 00:30:39,240
deploy the second cluster

00:30:44,180 --> 00:30:49,670
so we for time saving we already updated

00:30:47,630 --> 00:30:53,390
all the properties within that so we're

00:30:49,670 --> 00:30:55,820
gonna just deploy at this point before

00:30:53,390 --> 00:30:57,460
that we were like checking cluster 1 to

00:30:55,820 --> 00:31:00,080
see if the instance are getting

00:30:57,460 --> 00:31:02,960
connected or not with the changes in

00:31:00,080 --> 00:31:07,010
property so we can see now from the

00:31:02,960 --> 00:31:09,050
previous from the previous state now you

00:31:07,010 --> 00:31:14,210
see the cluster size increasing to 3

00:31:09,050 --> 00:31:18,470
from 2 at this point and apparently

00:31:14,210 --> 00:31:20,830
there is like deployment going on so as

00:31:18,470 --> 00:31:22,910
soon as you get like updated instance

00:31:20,830 --> 00:31:24,080
they started connecting back to this

00:31:22,910 --> 00:31:25,580
cluster even though they are being

00:31:24,080 --> 00:31:27,950
managed by two different Bosch directors

00:31:25,580 --> 00:31:30,140
so you can have downtime in one of the

00:31:27,950 --> 00:31:32,840
clusters and still apps running because

00:31:30,140 --> 00:31:37,790
the cluster is still fine and managed by

00:31:32,840 --> 00:31:42,110
a different Bosch director this update

00:31:37,790 --> 00:31:43,970
takes time based on the ayahs so you're

00:31:42,110 --> 00:31:47,570
gonna just skip because I think we're

00:31:43,970 --> 00:31:49,880
running out of time so just in order to

00:31:47,570 --> 00:31:52,280
see if the clusters if if the Clara

00:31:49,880 --> 00:31:55,220
command is actually lying to you all on

00:31:52,280 --> 00:31:57,710
we created like tables in cluster one

00:31:55,220 --> 00:31:59,800
and it should automatically get synced

00:31:57,710 --> 00:32:01,850
to cluster two without any changes

00:31:59,800 --> 00:32:03,740
because now the cluster is like

00:32:01,850 --> 00:32:09,500
connected to each other so we created

00:32:03,740 --> 00:32:12,190
table in one cluster and queried it on

00:32:09,500 --> 00:32:12,190
the second cluster

00:32:17,140 --> 00:32:24,130
so we can see a table getting your

00:32:22,660 --> 00:32:28,510
database getting created on the cluster

00:32:24,130 --> 00:32:33,280
- and when you add entries to this this

00:32:28,510 --> 00:32:35,790
database like if you add entries you

00:32:33,280 --> 00:32:35,790
should see

00:32:41,120 --> 00:32:48,610
so if you add insert a value into

00:32:44,059 --> 00:32:48,610
cluster 1 it should get synched + or -

00:32:49,360 --> 00:32:54,970
yeah that should be it for the demo I

00:32:56,409 --> 00:33:03,679
think we are done so you have the last

00:33:00,379 --> 00:33:08,299
slide is just some resources which she

00:33:03,679 --> 00:33:10,940
can access from the presentation

00:33:08,299 --> 00:33:13,179
uploaded to the website thing we've got

00:33:10,940 --> 00:33:16,140
maybe a minute or two for some questions

00:33:13,179 --> 00:33:17,650
thank you very much

00:33:16,140 --> 00:33:17,910
[Applause]

00:33:17,650 --> 00:33:21,599
[Music]

00:33:17,910 --> 00:33:21,599

YouTube URL: https://www.youtube.com/watch?v=kGsReOshfQE


