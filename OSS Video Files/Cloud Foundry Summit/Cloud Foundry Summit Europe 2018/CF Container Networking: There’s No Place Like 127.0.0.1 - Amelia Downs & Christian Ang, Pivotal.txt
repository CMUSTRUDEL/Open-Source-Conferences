Title: CF Container Networking: There’s No Place Like 127.0.0.1 - Amelia Downs & Christian Ang, Pivotal
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	CF Container Networking: There’s No Place Like 127.0.0.1 - Amelia Downs & Christian Ang, Pivotal

The CF Container Networking team has been up to a lot in the past year. In this talk, two engineers from the CF Container Networking team will walk through how the product has evolved and matured to provide a better experience for operators and app developers.

Polyglot service discovery, which was demoed in its early stages last year, is now GA. Operators can deploy an Envoy as a sidecar on every application instance, creating a service mesh. And changes to the application security groups (ASGs) through dynamic egress makes it simpler for operators to secure their platform.

See it how these new features work through demonstrations and learn about where the CF Container Networking team plans to go next.

https://cfseu18.sched.com/event/FRyL/cf-container-networking-theres-no-place-like-127001-amelia-downs-christian-ang-pivotal
Captions: 
	00:00:00,089 --> 00:00:05,069
thank you for coming to the container

00:00:01,920 --> 00:00:06,839
networking update talk my name's Amelia

00:00:05,069 --> 00:00:09,269
downs and I'm the anchor of the

00:00:06,839 --> 00:00:09,900
container networking team and I'm

00:00:09,269 --> 00:00:11,429
Christiane Inc

00:00:09,900 --> 00:00:16,379
it's not French air that contain a

00:00:11,429 --> 00:00:19,289
networking team and so today I'm gonna

00:00:16,379 --> 00:00:21,359
give you a quick team introduction who

00:00:19,289 --> 00:00:23,160
we are what we do we're going to talk

00:00:21,359 --> 00:00:24,840
about two features that the container

00:00:23,160 --> 00:00:27,119
networking team has been working on over

00:00:24,840 --> 00:00:29,970
the past year that's service discovery

00:00:27,119 --> 00:00:31,890
and dynamic egress policies we'll go

00:00:29,970 --> 00:00:33,510
over where both of those features are

00:00:31,890 --> 00:00:35,809
now where they're going in the future

00:00:33,510 --> 00:00:37,739
and we're gonna demo both of them live

00:00:35,809 --> 00:00:39,300
and we'll talk about what's on the

00:00:37,739 --> 00:00:40,860
horizon in the future what are we

00:00:39,300 --> 00:00:44,820
thinking about and planning for the next

00:00:40,860 --> 00:00:46,500
year or so so just to give you an

00:00:44,820 --> 00:00:49,500
introduction to the Container networking

00:00:46,500 --> 00:00:51,750
team we have two PMS and five engineers

00:00:49,500 --> 00:00:53,910
and if you ever want to get in contact

00:00:51,750 --> 00:00:56,010
with us the best way is probably via the

00:00:53,910 --> 00:01:00,449
cloud from do slack and you can find us

00:00:56,010 --> 00:01:02,190
on the Container networking channel so

00:01:00,449 --> 00:01:04,979
just to give you an introduction to our

00:01:02,190 --> 00:01:08,159
team and what we do historically our

00:01:04,979 --> 00:01:10,409
container networking team has been in

00:01:08,159 --> 00:01:12,390
charge of enabling dynamic container to

00:01:10,409 --> 00:01:15,600
container networking between cloud

00:01:12,390 --> 00:01:17,430
foundry apps on Linux machines enforcing

00:01:15,600 --> 00:01:19,320
policy between them and providing

00:01:17,430 --> 00:01:21,450
service discovery and as you'll see in

00:01:19,320 --> 00:01:24,270
this talk some of those things are

00:01:21,450 --> 00:01:26,670
changing and are growing as our team

00:01:24,270 --> 00:01:28,290
grows and our responsibilities grow but

00:01:26,670 --> 00:01:31,049
first I'll let Christian talk about the

00:01:28,290 --> 00:01:34,729
state of service discovery all right

00:01:31,049 --> 00:01:37,619
thanks Amelia I guess we'll start here

00:01:34,729 --> 00:01:39,360
so before I jump straight into service

00:01:37,619 --> 00:01:41,159
discovery I kind of want to give some

00:01:39,360 --> 00:01:42,509
context on why we build service

00:01:41,159 --> 00:01:46,290
discovery and like the state of the

00:01:42,509 --> 00:01:47,570
world before it so you can imagine you

00:01:46,290 --> 00:01:49,770
have a front-end app and a back-end up

00:01:47,570 --> 00:01:52,530
and you want your front end up to talk

00:01:49,770 --> 00:01:54,299
to your back-end up so like the naive

00:01:52,530 --> 00:01:56,939
solution to this would be to provide

00:01:54,299 --> 00:01:59,670
your front end up with the IP of the

00:01:56,939 --> 00:02:01,380
back end up and an easy way to do this

00:01:59,670 --> 00:02:06,149
would be to like use some environment

00:02:01,380 --> 00:02:08,129
variable and pass it the IP so here I'm

00:02:06,149 --> 00:02:11,430
providing my front-end with the IP of

00:02:08,129 --> 00:02:13,680
the back-end 25 five one two

00:02:11,430 --> 00:02:17,090
and then my front end starts curling the

00:02:13,680 --> 00:02:20,310
back end and you know life's good

00:02:17,090 --> 00:02:23,040
but with Cloud Foundry if you're back in

00:02:20,310 --> 00:02:25,860
that were to restart it would get a new

00:02:23,040 --> 00:02:27,480
IP because they're ephemeral and you're

00:02:25,860 --> 00:02:31,470
not guaranteed to get the same IP every

00:02:27,480 --> 00:02:33,420
time so then your curl stops working and

00:02:31,470 --> 00:02:37,890
your front end can no longer talk to

00:02:33,420 --> 00:02:39,720
your back end which isn't great so at

00:02:37,890 --> 00:02:42,150
this point you would have to bring your

00:02:39,720 --> 00:02:45,930
own service discovery a common one for

00:02:42,150 --> 00:02:49,230
Java applications would be Eureka so you

00:02:45,930 --> 00:02:51,780
would see f.push Eureka gave it some

00:02:49,230 --> 00:02:56,100
public route and you would create a user

00:02:51,780 --> 00:02:58,920
provided service and at this point you

00:02:56,100 --> 00:03:03,480
provide Eureka to your front end and

00:02:58,920 --> 00:03:04,920
your back end we start the apps and then

00:03:03,480 --> 00:03:09,600
your front end your back end would start

00:03:04,920 --> 00:03:11,640
registering their IPs with Eureka and

00:03:09,600 --> 00:03:13,920
then a little bit later your front end

00:03:11,640 --> 00:03:18,840
and your back end would discover each

00:03:13,920 --> 00:03:20,640
other through Eureka and your front end

00:03:18,840 --> 00:03:22,770
at that point could use Eureka's

00:03:20,640 --> 00:03:26,430
registry to start calling the backend

00:03:22,770 --> 00:03:30,120
and if your backend were to restart and

00:03:26,430 --> 00:03:32,820
get a new IP the back end would be

00:03:30,120 --> 00:03:35,250
register with Rika again it would get

00:03:32,820 --> 00:03:38,490
rediscovered by your front ends and the

00:03:35,250 --> 00:03:41,220
curl would continue working so basic

00:03:38,490 --> 00:03:44,190
service discovery you're you're happy

00:03:41,220 --> 00:03:46,490
that it works what's not great is that

00:03:44,190 --> 00:03:48,920
you have to maintain this whole extra

00:03:46,490 --> 00:03:53,070
application to provide service discovery

00:03:48,920 --> 00:03:55,980
for you so we've built it into collect

00:03:53,070 --> 00:04:02,370
foundry so that you don't have to

00:03:55,980 --> 00:04:04,650
maintain this extra act so now at this

00:04:02,370 --> 00:04:08,250
point if you had your run in your

00:04:04,650 --> 00:04:12,180
back-end the workflow would be to see F

00:04:08,250 --> 00:04:15,090
map route an internal route for your

00:04:12,180 --> 00:04:17,430
back-end so what this would look like is

00:04:15,090 --> 00:04:19,109
you would provide the application an

00:04:17,430 --> 00:04:23,270
internal domain which in our case would

00:04:19,109 --> 00:04:25,430
be app start internal and a hostname

00:04:23,270 --> 00:04:29,150
so now my back end has a back-end APIs

00:04:25,430 --> 00:04:33,380
on internal route and then I would

00:04:29,150 --> 00:04:35,210
provide my front-end with the new

00:04:33,380 --> 00:04:37,840
internal route back-end ops on internal

00:04:35,210 --> 00:04:39,980
through my same environment variable and

00:04:37,840 --> 00:04:42,650
my front-end would start curling

00:04:39,980 --> 00:04:45,050
back-end ops on internal which would

00:04:42,650 --> 00:04:47,870
resolve to that ten to five five one

00:04:45,050 --> 00:04:51,290
three address and what's great about

00:04:47,870 --> 00:04:53,510
this solution is that it's DNS based so

00:04:51,290 --> 00:04:57,830
it's like a polyglot solution it would

00:04:53,510 --> 00:05:00,490
work for any language and if your app

00:04:57,830 --> 00:05:02,860
were to be start and get a new IP

00:05:00,490 --> 00:05:06,130
service discovery would see that and

00:05:02,860 --> 00:05:08,930
update the backend ops thought internal

00:05:06,130 --> 00:05:13,070
records to point to ten to five five one

00:05:08,930 --> 00:05:16,070
four and if you were to map multiple

00:05:13,070 --> 00:05:21,140
applications to bekka apps on internal

00:05:16,070 --> 00:05:24,710
or scale-up your back-end the back-end

00:05:21,140 --> 00:05:27,140
apps on internal records would reflect

00:05:24,710 --> 00:05:28,310
that and it would point to every IP and

00:05:27,140 --> 00:05:32,600
it would shuffle between them to give

00:05:28,310 --> 00:05:35,240
you rudimentary load balancing and now

00:05:32,600 --> 00:05:43,130
I'll try to demo this so we'll see where

00:05:35,240 --> 00:05:46,570
this goes so first thing I'll do is to

00:05:43,130 --> 00:05:46,570
push a front ends

00:05:52,400 --> 00:05:58,930
now let's copy this route and we'll give

00:05:56,660 --> 00:05:58,930
it a minute

00:06:06,250 --> 00:06:10,600
and if you want to try this yourself I'm

00:06:08,860 --> 00:06:15,370
just using the CF now we're getting

00:06:10,600 --> 00:06:16,810
examples repo on get up

00:06:15,370 --> 00:06:20,130
so if you want to try it yourself you

00:06:16,810 --> 00:06:20,130
can go find that

00:06:26,940 --> 00:06:31,100
and I didn't scatter I didn't scroll

00:06:29,370 --> 00:06:33,960
down so that's my fault

00:06:31,100 --> 00:06:40,590
all right so let's try to go front-end

00:06:33,960 --> 00:06:42,900
slouch c2c zff calm okay

00:06:40,590 --> 00:06:44,460
so what you'll see here is a couple

00:06:42,900 --> 00:06:48,090
boxes we're going to focus on the top

00:06:44,460 --> 00:06:51,690
one so it's a pretty basic app it's just

00:06:48,090 --> 00:06:54,540
gonna let me type in a route to hit

00:06:51,690 --> 00:06:57,330
which in my case I'll want it to be

00:06:54,540 --> 00:07:00,740
back-end ops on internal and I'm gonna

00:06:57,330 --> 00:07:00,740
use port 7007

00:07:03,210 --> 00:07:08,010
it doesn't exist so you can see it's

00:07:05,580 --> 00:07:11,880
trying to look up back-end ops on

00:07:08,010 --> 00:07:13,940
internal and I'm getting endocytosed so

00:07:11,880 --> 00:07:18,990
at this point I'll probably want to push

00:07:13,940 --> 00:07:21,780
my back enough so let's do you see I

00:07:18,990 --> 00:07:23,850
push back end and I don't actually want

00:07:21,780 --> 00:07:26,990
to expose it on the internet so I'm

00:07:23,850 --> 00:07:26,990
gonna specify no road

00:07:41,670 --> 00:07:45,980
I'm making sure to scroll this time so

00:08:03,180 --> 00:08:11,470
all right so I got my back end up up you

00:08:08,470 --> 00:08:15,310
can see right now it has no route so let

00:08:11,470 --> 00:08:19,560
me see F map wrote specify a back end

00:08:15,310 --> 00:08:25,980
the app name and perhaps done internal

00:08:19,560 --> 00:08:29,500
and hostname which I'll call back end

00:08:25,980 --> 00:08:31,720
okay so if I call CF apps again you can

00:08:29,500 --> 00:08:36,760
see it now has a back-end not apps on

00:08:31,720 --> 00:08:40,570
internal route and if I were to refresh

00:08:36,760 --> 00:08:42,460
this page okay so it still doesn't work

00:08:40,570 --> 00:08:44,520
but it's no longer getting the no such

00:08:42,460 --> 00:08:46,870
host it's getting a connection refused

00:08:44,520 --> 00:08:51,400
so it's able to like look up the

00:08:46,870 --> 00:08:53,080
application IP but it's not able to

00:08:51,400 --> 00:08:56,680
connect to it and that's because I

00:08:53,080 --> 00:09:02,380
haven't added a policy so let me do that

00:08:56,680 --> 00:09:06,370
CF Network policy and this is going to

00:09:02,380 --> 00:09:11,290
be front ends and I want it to talk to

00:09:06,370 --> 00:09:17,740
my back-end and it's gonna be protocol

00:09:11,290 --> 00:09:20,680
on TCP port seven thousand seven and if

00:09:17,740 --> 00:09:23,830
I were to refresh this you can see I'm

00:09:20,680 --> 00:09:25,330
now getting a cat gif so it's able to

00:09:23,830 --> 00:09:29,130
talk to my back-end app and it's sending

00:09:25,330 --> 00:09:29,130
me this picture of a cat

00:09:30,420 --> 00:09:36,820
so that's service discovery in a

00:09:32,980 --> 00:09:38,710
nutshell and if you want to deploy CF

00:09:36,820 --> 00:09:41,050
with service discovery just know that

00:09:38,710 --> 00:09:47,709
it's generally available in CF

00:09:41,050 --> 00:09:51,040
deployment 3.4 and if you it's it's a

00:09:47,709 --> 00:09:54,400
it's within an ops file in CF deployment

00:09:51,040 --> 00:09:56,410
so you could add operations enable

00:09:54,400 --> 00:09:58,690
service discovery it's not yeah well and

00:09:56,410 --> 00:10:01,900
that will by default give you an apps on

00:09:58,690 --> 00:10:05,350
internal domain and provide you service

00:10:01,900 --> 00:10:07,910
discovery okay

00:10:05,350 --> 00:10:16,450
so OH

00:10:07,910 --> 00:10:16,450
I sorry I didn't quite catch that

00:10:22,330 --> 00:10:27,620
yeah well you'll get back at any

00:10:24,440 --> 00:10:38,960
container IP Freddie application that's

00:10:27,620 --> 00:10:44,300
map to that route right ok so what's

00:10:38,960 --> 00:10:47,480
next for service discovery so we want to

00:10:44,300 --> 00:10:50,300
start sending any traffic that's heading

00:10:47,480 --> 00:10:53,570
to an internal route through an envoy

00:10:50,300 --> 00:10:57,110
side car and if you were at the last

00:10:53,570 --> 00:10:59,480
talk this will allow us to provide some

00:10:57,110 --> 00:11:00,860
client-side enhancements such as

00:10:59,480 --> 00:11:04,750
sophisticated load balancing like

00:11:00,860 --> 00:11:09,740
weighted routing retries timeouts and

00:11:04,750 --> 00:11:13,250
automatic TLS and what this would kind

00:11:09,740 --> 00:11:15,350
of look like is if I were to open up

00:11:13,250 --> 00:11:17,780
these containers right now you would

00:11:15,350 --> 00:11:19,910
only have application processes inside

00:11:17,780 --> 00:11:23,090
of the containers we would be adding

00:11:19,910 --> 00:11:27,050
envoy processes within those containers

00:11:23,090 --> 00:11:30,740
too and if you were to curl backend ops

00:11:27,050 --> 00:11:33,440
on a journal it would get redirected to

00:11:30,740 --> 00:11:37,220
the Envoy and then the Envoy would send

00:11:33,440 --> 00:11:41,510
that to whatever application it was

00:11:37,220 --> 00:11:44,180
heading to and with this at this point

00:11:41,510 --> 00:11:47,510
what this allows us is to do those

00:11:44,180 --> 00:11:51,410
retries the load balancing and the TLS I

00:11:47,510 --> 00:11:53,150
had those on voice and now I'm going to

00:11:51,410 --> 00:11:58,310
hand it back to Amelia to talk about

00:11:53,150 --> 00:12:00,290
egress policies okay so before I talk

00:11:58,310 --> 00:12:02,930
too much about egress policies I just

00:12:00,290 --> 00:12:05,300
want to define what they are so eager

00:12:02,930 --> 00:12:08,120
policies enable networking from your app

00:12:05,300 --> 00:12:10,190
to outside of Cloud Foundry so saying

00:12:08,120 --> 00:12:11,930
whether your app can access the whole

00:12:10,190 --> 00:12:15,590
internet some part of the internet or

00:12:11,930 --> 00:12:17,390
not so by default in CF there are no

00:12:15,590 --> 00:12:21,020
egress policy set so your app is

00:12:17,390 --> 00:12:22,940
isolated and cannot access the Internet

00:12:21,020 --> 00:12:24,860
currently Network admins can create

00:12:22,940 --> 00:12:26,870
egress policies through application

00:12:24,860 --> 00:12:29,570
security groups or usually we call them

00:12:26,870 --> 00:12:31,940
aSG's and they're on a per IP ranged

00:12:29,570 --> 00:12:33,980
basis so for example when you're staging

00:12:31,940 --> 00:12:36,230
your app if it was a ruby app you might

00:12:33,980 --> 00:12:39,590
want access to ruby gems to bundle

00:12:36,230 --> 00:12:42,170
install and so you could create your ASG

00:12:39,590 --> 00:12:46,040
that gives you access to ruby gems only

00:12:42,170 --> 00:12:48,140
but not the rest of the internet so if

00:12:46,040 --> 00:12:49,940
you've used SGS you might know that the

00:12:48,140 --> 00:12:51,800
biggest one of the big issues with them

00:12:49,940 --> 00:12:54,440
is that apps need to be restarted in

00:12:51,800 --> 00:12:56,810
order for these policies to apply it's

00:12:54,440 --> 00:12:58,640
annoying and a hassle and sometimes you

00:12:56,810 --> 00:13:00,200
can forget to do it and so the policies

00:12:58,640 --> 00:13:04,100
that you see aren't actually applied on

00:13:00,200 --> 00:13:05,450
your apps so this workflow would usually

00:13:04,100 --> 00:13:10,040
go something like this

00:13:05,450 --> 00:13:15,170
with aSG's so first the app dev pushes

00:13:10,040 --> 00:13:17,090
their app app a to a space then the app

00:13:15,170 --> 00:13:19,370
dev has to send this request to a

00:13:17,090 --> 00:13:21,770
security team asking for their space to

00:13:19,370 --> 00:13:23,870
access let's say for example an external

00:13:21,770 --> 00:13:27,440
DB and then they have to provide an IP

00:13:23,870 --> 00:13:30,590
app or in a protocol the security team

00:13:27,440 --> 00:13:32,810
has to approve this request and then the

00:13:30,590 --> 00:13:34,760
platform operator creates the ASG and

00:13:32,810 --> 00:13:36,800
binds it to the space but like I said

00:13:34,760 --> 00:13:38,870
earlier this isn't enough the app dev

00:13:36,800 --> 00:13:43,510
actually has to restart their app in

00:13:38,870 --> 00:13:43,510
order for this is ASG to actually apply

00:13:43,840 --> 00:13:50,150
so this workflow is can take a long time

00:13:47,900 --> 00:13:53,330
it's a security workflow that differs

00:13:50,150 --> 00:13:55,040
based on companies but what I want to

00:13:53,330 --> 00:13:57,590
focus on is the restarting which is

00:13:55,040 --> 00:13:59,210
completely unnecessary and it's what we

00:13:57,590 --> 00:14:02,510
are planning on improving or what we've

00:13:59,210 --> 00:14:04,280
been working on improving so I would

00:14:02,510 --> 00:14:11,300
like to introduce dynamic egress

00:14:04,280 --> 00:14:13,910
policies so dynamic egress policies are

00:14:11,300 --> 00:14:16,220
a new way to define egress policies for

00:14:13,910 --> 00:14:18,320
your CF apps so they're built into the

00:14:16,220 --> 00:14:20,480
same policy system as the container to

00:14:18,320 --> 00:14:23,030
container policies and crucially note

00:14:20,480 --> 00:14:26,870
app restarts are required for new or

00:14:23,030 --> 00:14:28,310
updated policies to apply so you might

00:14:26,870 --> 00:14:31,790
be saying why are you building this new

00:14:28,310 --> 00:14:33,440
thing and why not just improve aSG's so

00:14:31,790 --> 00:14:34,910
this is a decision that we didn't take

00:14:33,440 --> 00:14:37,370
lightly

00:14:34,910 --> 00:14:38,870
we eventually decided that the ASG

00:14:37,370 --> 00:14:41,570
system was not set up for automatic

00:14:38,870 --> 00:14:44,270
updates our engineering team decided it

00:14:41,570 --> 00:14:46,550
would take a long time to improve the

00:14:44,270 --> 00:14:50,089
ASG s to get it to the state rather than

00:14:46,550 --> 00:14:53,960
building it into the c2c policy program

00:14:50,089 --> 00:14:55,880
and when we brought egress policies into

00:14:53,960 --> 00:14:58,700
the same c2c container to container

00:14:55,880 --> 00:15:01,040
policy system now all of the networking

00:14:58,700 --> 00:15:02,900
policies are under one umbrella so when

00:15:01,040 --> 00:15:04,520
we update one will be able to update

00:15:02,900 --> 00:15:10,070
them both and the ideas that we'll be

00:15:04,520 --> 00:15:12,140
able to iterate faster so just I wanted

00:15:10,070 --> 00:15:14,810
to talk about how aSG's and dynamic

00:15:12,140 --> 00:15:17,300
egress policies will interact crucially

00:15:14,810 --> 00:15:19,490
we are have no intention of deprecating

00:15:17,300 --> 00:15:22,070
aSG's anytime soon but not going away

00:15:19,490 --> 00:15:25,400
yet maybe in the future but we have no

00:15:22,070 --> 00:15:27,440
roadmap for that and right now the union

00:15:25,400 --> 00:15:29,930
of both policies will apply so you can

00:15:27,440 --> 00:15:32,510
still set aSG's value set dynamic egress

00:15:29,930 --> 00:15:35,210
policies and they're both whitelisting

00:15:32,510 --> 00:15:36,770
type policy systems so the combination

00:15:35,210 --> 00:15:41,690
of the two is what your app will be

00:15:36,770 --> 00:15:43,700
allowed to talk to okay now time for a

00:15:41,690 --> 00:15:47,839
live demo and you get to see my vim

00:15:43,700 --> 00:15:51,950
skills let's see yeah

00:15:47,839 --> 00:15:54,980
okay let's make I need two windows okay

00:15:51,950 --> 00:15:58,820
and I hope they're big enough I hate not

00:15:54,980 --> 00:16:01,190
being able to see okay so we have two CF

00:15:58,820 --> 00:16:03,640
apps from Christians demo so I'm gonna

00:16:01,190 --> 00:16:09,260
do this example I'm just gonna see F SSH

00:16:03,640 --> 00:16:11,170
into the front and app and then I'm

00:16:09,260 --> 00:16:13,990
gonna curl things from there to simulate

00:16:11,170 --> 00:16:17,720
you know calling something from your app

00:16:13,990 --> 00:16:20,150
so right now the way I have the aSG's

00:16:17,720 --> 00:16:22,339
and the dynamic policies set up all my

00:16:20,150 --> 00:16:25,220
app can access is DNS and it can't

00:16:22,339 --> 00:16:30,620
access anything else on the internet so

00:16:25,220 --> 00:16:36,320
if I try to curl this BBC RSS feed

00:16:30,620 --> 00:16:38,360
forgot an H thank you will see that it

00:16:36,320 --> 00:16:41,900
doesn't work the connection is refused

00:16:38,360 --> 00:16:46,590
here so I want to make a dynamic egress

00:16:41,900 --> 00:16:51,970
policy to talk to the BBC so first

00:16:46,590 --> 00:16:58,750
I'm going to dig BBC to get the IP

00:16:51,970 --> 00:17:02,950
address and it did change so I'm glad I

00:16:58,750 --> 00:17:04,900
dug okay I'll put that into my pace

00:17:02,950 --> 00:17:07,870
buffer so I don't lose it

00:17:04,900 --> 00:17:10,830
great and right now while I do this I'm

00:17:07,870 --> 00:17:13,840
gonna add a watch here if I can spell

00:17:10,830 --> 00:17:17,490
that's gonna update every point two

00:17:13,840 --> 00:17:23,770
seconds and I'm going to not that one

00:17:17,490 --> 00:17:25,540
I'm going to curl BBC so hopefully while

00:17:23,770 --> 00:17:26,800
I add the policy on the bottom you'll

00:17:25,540 --> 00:17:30,420
eventually be able to see this watch

00:17:26,800 --> 00:17:36,760
succeed ah thank you

00:17:30,420 --> 00:17:37,200
you're a very helpful audience that

00:17:36,760 --> 00:17:45,910
looks better

00:17:37,200 --> 00:17:47,860
okay so I have a script here that is

00:17:45,910 --> 00:17:50,920
going to create a destination right now

00:17:47,860 --> 00:17:56,200
we only have AP eyes and no Co eyes so I

00:17:50,920 --> 00:17:57,280
named my destination BBS feed or I named

00:17:56,200 --> 00:18:00,630
it the wrong thing but whatever I'm not

00:17:57,280 --> 00:18:05,770
gonna change it down PBS as our turtle

00:18:00,630 --> 00:18:14,410
whatever okay okay so I'm gonna change

00:18:05,770 --> 00:18:18,670
the start and the end ip's damming here

00:18:14,410 --> 00:18:24,720
we go let's paste in the correct IP did

00:18:18,670 --> 00:18:24,720
I pass it there we go

00:18:26,570 --> 00:18:31,410
okay

00:18:28,770 --> 00:18:36,690
it's open on a range of ports and it's

00:18:31,410 --> 00:18:40,190
over TCP great so I'm going to run this

00:18:36,690 --> 00:18:42,900
and create my destination it was created

00:18:40,190 --> 00:18:46,830
okay now I'm gonna grab this good from

00:18:42,900 --> 00:18:48,570
the destination and first you create a

00:18:46,830 --> 00:18:53,610
destination and then you create the

00:18:48,570 --> 00:18:55,830
policy so here on the policies you say

00:18:53,610 --> 00:18:58,950
either an app or a space and you pass it

00:18:55,830 --> 00:19:00,720
the gooood you want we are going to have

00:18:58,950 --> 00:19:04,800
to replace that with a new app good and

00:19:00,720 --> 00:19:07,140
the destination and you pass the good so

00:19:04,800 --> 00:19:11,700
I'm gonna paste in that goo it and then

00:19:07,140 --> 00:19:16,260
let me control see get my app good so if

00:19:11,700 --> 00:19:18,440
I do see a front o CF app front end do

00:19:16,260 --> 00:19:18,440
it

00:19:25,150 --> 00:19:31,150
great okay the idea is now when I run

00:19:28,900 --> 00:19:44,650
this the screen on the top should start

00:19:31,150 --> 00:19:50,080
curling successfully let's see no no dad

00:19:44,650 --> 00:19:53,100
saya maybe they'd be changed no I swear

00:19:50,080 --> 00:20:02,950
it worked earlier this morning

00:19:53,100 --> 00:20:08,290
let's try digging it again know the IP

00:20:02,950 --> 00:20:12,660
tej dummy okay one more time with Billy

00:20:08,290 --> 00:20:12,660
oh you got this destination

00:20:20,870 --> 00:20:27,620
and you didn't even something different

00:20:22,640 --> 00:20:33,380
because it needs to be unique this is

00:20:27,620 --> 00:20:36,760
what happens create a station oh my god

00:20:33,380 --> 00:20:36,760
it's gonna be good I promise

00:20:38,590 --> 00:20:44,409
so I go into egress policy all you have

00:20:41,990 --> 00:20:48,820
to do is change the destination good

00:20:44,409 --> 00:20:48,820
come on CET

00:20:55,830 --> 00:21:05,720
okay

00:20:57,360 --> 00:21:05,720
need a curl again oh I'm getting XML

00:21:10,220 --> 00:21:25,889
okay now if I take the same good for the

00:21:15,539 --> 00:21:27,779
policy and I run a two-week command the

00:21:25,889 --> 00:21:30,690
policy will be deleted and you'll see

00:21:27,779 --> 00:21:32,759
here now connections are fused it

00:21:30,690 --> 00:21:40,679
automatically have hider know where he

00:21:32,759 --> 00:21:43,409
starts needed okay so if you would like

00:21:40,679 --> 00:21:45,389
to try these tight let's just make this

00:21:43,409 --> 00:21:47,489
single way if you'd like to try dynamic

00:21:45,389 --> 00:21:51,299
egress policies they're experimentally

00:21:47,489 --> 00:21:53,429
available in CF networking release 217

00:21:51,299 --> 00:21:56,639
which should be available in CF

00:21:53,429 --> 00:22:00,450
deployment soon you can use you'll need

00:21:56,639 --> 00:22:01,950
to use this absol to enable it and we

00:22:00,450 --> 00:22:06,690
have Doc's on github that you can find

00:22:01,950 --> 00:22:09,029
out how to use these api's so what's

00:22:06,690 --> 00:22:10,919
next for dynamic egress we're working

00:22:09,029 --> 00:22:13,649
with teams in New York for Windows

00:22:10,919 --> 00:22:14,909
support we're gonna work on creating CLI

00:22:13,649 --> 00:22:17,460
command so you don't have to do all that

00:22:14,909 --> 00:22:18,359
good pasting that I was just doing and

00:22:17,460 --> 00:22:20,039
of course we're gonna work on some

00:22:18,359 --> 00:22:21,899
performance testing so that we can get

00:22:20,039 --> 00:22:27,779
it out of experimental and into

00:22:21,899 --> 00:22:30,029
production ok so I'm quickly going to

00:22:27,779 --> 00:22:31,950
talk about what we're thinking about and

00:22:30,029 --> 00:22:35,399
what's on the horizon for container

00:22:31,950 --> 00:22:38,779
networking so these are very very fuzzy

00:22:35,399 --> 00:22:41,609
ideas at the moment but I just wanted to

00:22:38,779 --> 00:22:44,820
bring them up to keep it in your mind

00:22:41,609 --> 00:22:46,950
so first is declarative policies so the

00:22:44,820 --> 00:22:49,700
idea is being able to specify policy

00:22:46,950 --> 00:22:52,409
within your app manifest so you could

00:22:49,700 --> 00:22:54,779
enact policy when you see a push and you

00:22:52,409 --> 00:22:58,559
don't have to see I push and then run

00:22:54,779 --> 00:23:01,230
some CLI commands to add policy and the

00:22:58,559 --> 00:23:05,730
other thing we're thinking about is fqdn

00:23:01,230 --> 00:23:08,710
base policy so being able to use a fully

00:23:05,730 --> 00:23:14,950
qualified domain name as the destination

00:23:08,710 --> 00:23:16,720
of a policy so just like give you an

00:23:14,950 --> 00:23:18,840
idea of what this possibly might look

00:23:16,720 --> 00:23:21,690
like you would have your app manifest

00:23:18,840 --> 00:23:27,190
there would be a new policies section

00:23:21,690 --> 00:23:30,520
and you would possibly add the apps that

00:23:27,190 --> 00:23:33,250
you want to have talked to your

00:23:30,520 --> 00:23:35,080
application that you're pushing but

00:23:33,250 --> 00:23:37,390
again this is all fuzzy we're still

00:23:35,080 --> 00:23:39,100
thinking about it and like what is the

00:23:37,390 --> 00:23:41,080
best way to to do this if you have any

00:23:39,100 --> 00:23:46,390
ideas we'd love to hear it

00:23:41,080 --> 00:23:48,340
and second is well already mention it

00:23:46,390 --> 00:23:52,179
fqdn based policy and the idea here is

00:23:48,340 --> 00:23:57,370
that once we have envoys in the data

00:23:52,179 --> 00:24:00,179
path since envoys work on layer seven

00:23:57,370 --> 00:24:02,950
and they have more contacts as to where

00:24:00,179 --> 00:24:09,190
routes are coming from we be able to

00:24:02,950 --> 00:24:11,080
enforce policy at this level again we'd

00:24:09,190 --> 00:24:14,440
love to hear your feedback on any of

00:24:11,080 --> 00:24:15,880
these features new and old and you could

00:24:14,440 --> 00:24:18,880
reach us on the Container networking

00:24:15,880 --> 00:24:22,539
channel and slack on the CF networking

00:24:18,880 --> 00:24:26,230
release github repository in person

00:24:22,539 --> 00:24:28,419
after this talk and at the routing and

00:24:26,230 --> 00:24:33,240
networking office hours that's happening

00:24:28,419 --> 00:24:34,580
in ten minutes and that's it thank you

00:24:33,240 --> 00:24:35,300
[Applause]

00:24:34,580 --> 00:24:42,930
[Music]

00:24:35,300 --> 00:24:42,930
[Applause]

00:24:55,610 --> 00:25:03,980
seems like he has a question about the

00:25:01,330 --> 00:25:06,200
the routing that you showed initially

00:25:03,980 --> 00:25:08,090
and is it the internal route is

00:25:06,200 --> 00:25:10,010
something configurable by a manifest

00:25:08,090 --> 00:25:14,360
rather than actually having to map the

00:25:10,010 --> 00:25:15,860
route mind early on an instance I don't

00:25:14,360 --> 00:25:17,210
know if I come caught the complete

00:25:15,860 --> 00:25:19,970
question but were you asking if you

00:25:17,210 --> 00:25:22,490
could configure like the internal domain

00:25:19,970 --> 00:25:24,410
yes so to add the in terms of a

00:25:22,490 --> 00:25:27,590
environment fest rather than having to

00:25:24,410 --> 00:25:29,059
actually call the CL I used to see an

00:25:27,590 --> 00:25:31,640
item work to map it on to your instance

00:25:29,059 --> 00:25:33,890
yeah so that is configurable in CF

00:25:31,640 --> 00:25:37,640
deployment by default we set it to acts

00:25:33,890 --> 00:25:39,530
on internal within the ops file but you

00:25:37,640 --> 00:25:41,900
can either change that offs file to use

00:25:39,530 --> 00:25:43,970
some other internal domain or like

00:25:41,900 --> 00:25:45,200
create a new ab style to change those

00:25:43,970 --> 00:25:49,700
properties but you could change it by

00:25:45,200 --> 00:25:52,130
the manifest so you're talking in terms

00:25:49,700 --> 00:25:53,690
of when you deploy in open source EF I'm

00:25:52,130 --> 00:25:55,610
talking in terms of when you see f.push

00:25:53,690 --> 00:25:57,710
enviro manifest for the app manifest

00:25:55,610 --> 00:26:00,890
itself if you can create internal routes

00:25:57,710 --> 00:26:03,920
not necessarily create them but map them

00:26:00,890 --> 00:26:07,340
onto your application yeah oh sorry yeah

00:26:03,920 --> 00:26:09,290
you could do that too we built internal

00:26:07,340 --> 00:26:12,800
routes to use the exact same mechanisms

00:26:09,290 --> 00:26:14,390
as normal routes so internal domains

00:26:12,800 --> 00:26:16,160
just have an extra flag on it but

00:26:14,390 --> 00:26:18,590
they're treated just like normal domains

00:26:16,160 --> 00:26:21,100
in the co eyes and api's yeah and in the

00:26:18,590 --> 00:26:24,790
Midwest yeah

00:26:21,100 --> 00:26:24,790
any other questions

00:26:33,270 --> 00:26:39,309
which cloud country role do you need to

00:26:36,400 --> 00:26:41,200
give access to one of the Absalon you

00:26:39,309 --> 00:26:44,830
were connecting the front end to the

00:26:41,200 --> 00:26:51,070
back end so do you have to be admin yeah

00:26:44,830 --> 00:26:55,300
so they could if your I guess CF

00:26:51,070 --> 00:26:57,490
operator enables like app developers who

00:26:55,300 --> 00:27:00,910
are like within the correct spaces to

00:26:57,490 --> 00:27:04,420
create policy then the app developer can

00:27:00,910 --> 00:27:06,820
create the policies between apps

00:27:04,420 --> 00:27:12,309
otherwise if that's off then you would

00:27:06,820 --> 00:27:13,510
need a network right privileges I also

00:27:12,309 --> 00:27:17,200
have one question

00:27:13,510 --> 00:27:20,590
yep so this first look out that you gave

00:27:17,200 --> 00:27:27,190
about being able to apply policies on CF

00:27:20,590 --> 00:27:29,410
push isn't that a pure CLI topic well CY

00:27:27,190 --> 00:27:31,780
is not they're working on features that

00:27:29,410 --> 00:27:33,309
the COI is not going to read the

00:27:31,780 --> 00:27:35,200
manifest anymore they're just gonna send

00:27:33,309 --> 00:27:36,850
the manifest as a ya know file to the

00:27:35,200 --> 00:27:39,040
cloud controller and then the cloud

00:27:36,850 --> 00:27:42,010
controller is going to do things with it

00:27:39,040 --> 00:27:43,660
so it's not CLI anymore and now we will

00:27:42,010 --> 00:27:48,390
probably be working with the Cappy team

00:27:43,660 --> 00:27:48,390
to work on this thank you

00:27:50,820 --> 00:27:55,350
we'll be here and office hours thank you

00:27:53,770 --> 00:28:00,910
Thank You Christian

00:27:55,350 --> 00:28:00,910

YouTube URL: https://www.youtube.com/watch?v=Jar9lJnQhks


