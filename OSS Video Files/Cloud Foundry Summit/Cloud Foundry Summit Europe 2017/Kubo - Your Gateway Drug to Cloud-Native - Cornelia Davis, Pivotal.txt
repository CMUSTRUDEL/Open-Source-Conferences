Title: Kubo - Your Gateway Drug to Cloud-Native - Cornelia Davis, Pivotal
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	Kubo - Your Gateway Drug to Cloud-Native - Cornelia Davis, Pivotal

You’re at the Cloud Foundry Summit, which means you are by definition a cloud-native enthusiast. There’s no question that building apps in this architectural style will produce resilient, scalable software in an agile manner, and allow you to operate it far more efficiently than you’ve been able to in the past. But you’ve also got a whole lot of software in your company’s portfolio that isn’t there yet. Do you have to resign yourself to the pains of managing those applications the old way until you can finally refactor them to be cloud-native? Kubo to the rescue.

You can run legacy applications on Kubo without significant refactoring – pure and simple. As an added bonus, it allows you to satisfy the CIO mandate of running containers (check). But it’s far more than that – running those workloads on Kubo offers advantages over running them on traditional virtualized infrastructure. This session covers those advantages –resource consolidation, health management, multi-cloud and more. It will also present the abstractions in Kubernetes, things like pods and stateful sets, that support running legacy workloads in the cloud environments that are far more distributed and changing than they have been in the past. It’s a first step to cloud-native.

About Cornelia Davis
Cornelia Davis is Sr. Director of Technology at Pivotal, where she works on the technology strategy for both Pivotal and for Pivotal customers. Through engagement across Pivotal’s broad customer base, Cornelia develops core cloud platform strategies that drive significant change in enterprise organizations, and influence the Pivotal Cloud Foundry evolution. Currently she is working on ways to bring the various cloud-computing models of Infrastructure as a Service, Application as a Service, Container as a Service and Function as a Service together into a comprehensive offering that allows IT organizations to function at the highest levels. She is the author of the book “Cloud Native: Designing Change-tolerant Software” by Manning Publications (https://www.manning.com/books/cloud-native). 

An industry veteran with almost three decades of experience in image processing, scientific visualization, distributed systems and web application architectures, and cloud-native platforms, Cornelia holds the B.S. and M.S. in Computer Science from California State University, Northridge and further studied theory of computing and programming languages at Indiana University.

When not doing those things you can find her on the yoga mat or in the kitchen.
Captions: 
	00:00:00,000 --> 00:00:03,750
okay I'm gonna go ahead and get started

00:00:02,100 --> 00:00:07,440
because these 30-minute sessions are

00:00:03,750 --> 00:00:08,970
relatively short and the first couple of

00:00:07,440 --> 00:00:11,490
minutes I'm gonna be doing a lot of you

00:00:08,970 --> 00:00:13,710
know just introducing myself anyway so

00:00:11,490 --> 00:00:14,610
um thank you so much for for joining

00:00:13,710 --> 00:00:16,740
today

00:00:14,610 --> 00:00:18,600
I am gonna talk about what we have until

00:00:16,740 --> 00:00:20,939
this morning been calling Kubo and I

00:00:18,600 --> 00:00:22,769
will probably still call Kubo because

00:00:20,939 --> 00:00:24,510
otherwise I'll kind of trip over the new

00:00:22,769 --> 00:00:30,470
words that were announced this morning

00:00:24,510 --> 00:00:34,200
so Cloud Foundry container not engine

00:00:30,470 --> 00:00:37,770
run time there we go container run time

00:00:34,200 --> 00:00:39,210
my name is Cornelio Davis and I work at

00:00:37,770 --> 00:00:42,570
pivotal I'll tell you more about myself

00:00:39,210 --> 00:00:45,030
in just a moment at the moment my role

00:00:42,570 --> 00:00:47,610
is that I am driving the go-to market

00:00:45,030 --> 00:00:51,539
for pivotal container service which is

00:00:47,610 --> 00:00:54,239
the commercialized version of Kubo and

00:00:51,539 --> 00:00:56,940
so forgive me I will try to stay in the

00:00:54,239 --> 00:00:58,890
open source here but I may again trip

00:00:56,940 --> 00:01:03,210
over that and use the the pivotal

00:00:58,890 --> 00:01:04,619
container service or PKS name as well so

00:01:03,210 --> 00:01:08,340
let me tell you a little bit more about

00:01:04,619 --> 00:01:09,869
me I have been in the industry for a

00:01:08,340 --> 00:01:12,689
long time I have the gray hair to show

00:01:09,869 --> 00:01:14,790
for it about 30 years always have been a

00:01:12,689 --> 00:01:16,860
developer didn't come from the operation

00:01:14,790 --> 00:01:19,560
side of the house at all

00:01:16,860 --> 00:01:21,090
and I say wasn't ops because I'll tell

00:01:19,560 --> 00:01:22,650
you honestly when I first started

00:01:21,090 --> 00:01:24,869
working with cloud foundry I believed

00:01:22,650 --> 00:01:27,900
everything everybody said about PA's

00:01:24,869 --> 00:01:29,310
being all about the developer and then

00:01:27,900 --> 00:01:31,020
when I actually started working with

00:01:29,310 --> 00:01:33,329
customers because the role that I'm in

00:01:31,020 --> 00:01:35,729
is really in taking our products out to

00:01:33,329 --> 00:01:37,380
the customers and then taking kind of

00:01:35,729 --> 00:01:40,890
these early customers and bringing that

00:01:37,380 --> 00:01:43,500
back to the product I realized very very

00:01:40,890 --> 00:01:45,869
quickly that platform as a service and

00:01:43,500 --> 00:01:48,720
now P at the container service as well

00:01:45,869 --> 00:01:51,030
is as much an Operations product as it

00:01:48,720 --> 00:01:53,130
is for the developer so I know here at

00:01:51,030 --> 00:01:55,979
CF summit we keep talking about the

00:01:53,130 --> 00:01:58,170
developer but there's a lot of value on

00:01:55,979 --> 00:02:00,479
the ops side as well so I have learned

00:01:58,170 --> 00:02:02,969
ops and even paired on our cloud ops

00:02:00,479 --> 00:02:04,770
team my background is that I've been

00:02:02,969 --> 00:02:08,399
working in web architectures for a long

00:02:04,770 --> 00:02:10,050
time more than 10 years was one of the

00:02:08,399 --> 00:02:12,120
first people that talked about restful

00:02:10,050 --> 00:02:14,970
services back in my EMC days when I

00:02:12,120 --> 00:02:17,250
worked in the corporate CTO office

00:02:14,970 --> 00:02:19,110
and I have been really working with

00:02:17,250 --> 00:02:22,049
cloud native applications for five years

00:02:19,110 --> 00:02:24,390
in the context of Cloud Foundry so I was

00:02:22,049 --> 00:02:27,420
still at EMC it was before the pivotal

00:02:24,390 --> 00:02:29,040
spinoff working on emerging tech in the

00:02:27,420 --> 00:02:30,599
emerging tech area I was working on was

00:02:29,040 --> 00:02:33,000
Cloud Foundry about five years ago a

00:02:30,599 --> 00:02:35,459
little more than five years ago and so

00:02:33,000 --> 00:02:37,920
like I said I work for pivotal and more

00:02:35,459 --> 00:02:39,810
recently just a little shameless plug I

00:02:37,920 --> 00:02:42,299
am working on a book I'm working with

00:02:39,810 --> 00:02:44,459
Manning on a book called cloud native

00:02:42,299 --> 00:02:46,890
and in fact tomorrow at around lunchtime

00:02:44,459 --> 00:02:48,599
we're gonna have many many versions the

00:02:46,890 --> 00:02:51,989
first three chapters of that will be

00:02:48,599 --> 00:02:55,260
available on our pivotal booth all right

00:02:51,989 --> 00:02:57,150
so what I want to talk about today is

00:02:55,260 --> 00:03:00,690
this is a slide that you may have seen

00:02:57,150 --> 00:03:03,180
or in fact my colleagues Fred Melo and

00:03:00,690 --> 00:03:06,269
Megan from Google are presenting on Kubo

00:03:03,180 --> 00:03:08,579
at the same time so it's unfortunate we

00:03:06,269 --> 00:03:10,579
have to COO Botox at the same time and

00:03:08,579 --> 00:03:13,709
they probably have this slide as well

00:03:10,579 --> 00:03:16,409
and the whole point here is that for the

00:03:13,709 --> 00:03:18,540
last four or five years we have been

00:03:16,409 --> 00:03:21,660
running cloud native applications and

00:03:18,540 --> 00:03:24,120
that was really one category of workload

00:03:21,660 --> 00:03:26,370
that existed in your enterprise but

00:03:24,120 --> 00:03:28,440
every one of you in the enterprise has

00:03:26,370 --> 00:03:30,269
workloads that you need to run and that

00:03:28,440 --> 00:03:33,540
you need to take care of that are not

00:03:30,269 --> 00:03:35,970
cloud native right anybody running non

00:03:33,540 --> 00:03:38,760
cloud native work workloads in your

00:03:35,970 --> 00:03:40,530
environment and so the whole point here

00:03:38,760 --> 00:03:42,419
is that there's different workloads

00:03:40,530 --> 00:03:44,819
different types of workloads and we want

00:03:42,419 --> 00:03:46,590
to provide the environment for all of

00:03:44,819 --> 00:03:48,870
those and that's what the announcement

00:03:46,590 --> 00:03:50,819
even this morning was about in that cool

00:03:48,870 --> 00:03:52,799
little snazzy video that we saw at the

00:03:50,819 --> 00:03:56,160
beginning of the keynotes that showed

00:03:52,799 --> 00:03:58,199
those different dial tones now you have

00:03:56,160 --> 00:04:00,419
all of these different workloads and

00:03:58,199 --> 00:04:02,910
what we've given you in the past was

00:04:00,419 --> 00:04:05,310
this and when I say we I mean both the

00:04:02,910 --> 00:04:07,410
Cloud Foundry Foundation as well as

00:04:05,310 --> 00:04:09,660
pivotal and various other providers is

00:04:07,410 --> 00:04:12,299
what we gave you an application platform

00:04:09,660 --> 00:04:16,380
and if it didn't fit on the application

00:04:12,299 --> 00:04:17,579
platform well we also gave you is we

00:04:16,380 --> 00:04:19,049
gave you something that was at the

00:04:17,579 --> 00:04:21,120
infrastructure layer and that's Bosh

00:04:19,049 --> 00:04:22,890
right so cloud founder he's actually

00:04:21,120 --> 00:04:24,900
been always been more than the elastic

00:04:22,890 --> 00:04:28,260
runtime more than the application

00:04:24,900 --> 00:04:30,330
service it's always had Bosh as well

00:04:28,260 --> 00:04:33,720
so this is what we used to give you and

00:04:30,330 --> 00:04:36,060
now the whole idea is that we are moving

00:04:33,720 --> 00:04:38,760
we're shifting around those abstractions

00:04:36,060 --> 00:04:41,790
and I as is still there under the covers

00:04:38,760 --> 00:04:44,340
but we've shifted it around so that we

00:04:41,790 --> 00:04:47,700
are no longer saying if your workload

00:04:44,340 --> 00:04:50,130
doesn't run on application dial tone on

00:04:47,700 --> 00:04:52,890
C's haiku here's my code run it in the

00:04:50,130 --> 00:04:55,410
cloud for me I do not care how if it's

00:04:52,890 --> 00:04:56,910
not using those abstractions you had to

00:04:55,410 --> 00:04:59,060
go all the way to I as we're giving you

00:04:56,910 --> 00:05:01,320
other abstractions now as well so

00:04:59,060 --> 00:05:04,290
containers being the abstraction that

00:05:01,320 --> 00:05:07,290
we're going to talk about today so

00:05:04,290 --> 00:05:10,290
that's the kind of grounding and what

00:05:07,290 --> 00:05:11,910
Kubo does is essentially one of the

00:05:10,290 --> 00:05:15,930
first things that I want to point out is

00:05:11,910 --> 00:05:18,510
that we've often talked about Kubo being

00:05:15,930 --> 00:05:20,970
a way that you can say well if it

00:05:18,510 --> 00:05:23,280
doesn't run on the ERT if it doesn't run

00:05:20,970 --> 00:05:25,770
in the app platform that you can run it

00:05:23,280 --> 00:05:27,780
on Kubo what I'd like you to do instead

00:05:25,770 --> 00:05:30,450
is I'd like you to think about it from

00:05:27,780 --> 00:05:32,520
the perspective of well what am i

00:05:30,450 --> 00:05:34,640
running on infrastructure as a service

00:05:32,520 --> 00:05:37,710
today or virtualized infrastructure

00:05:34,640 --> 00:05:40,110
maybe even bare metal what am i running

00:05:37,710 --> 00:05:42,810
down at the infrastructure layer that I

00:05:40,110 --> 00:05:45,240
could be running on some higher-level

00:05:42,810 --> 00:05:45,690
platform because I get more value out of

00:05:45,240 --> 00:05:48,240
that

00:05:45,690 --> 00:05:52,280
so that's really it's really about that

00:05:48,240 --> 00:05:55,020
arrow that I want to talk about today so

00:05:52,280 --> 00:05:56,760
okay we have this container platform

00:05:55,020 --> 00:05:59,400
which I'm not going to go over the

00:05:56,760 --> 00:06:01,350
details of what Kubo is but it is

00:05:59,400 --> 00:06:04,920
essentially giving you the ability to

00:06:01,350 --> 00:06:06,630
get managed kubernetes and so we will be

00:06:04,920 --> 00:06:09,210
talking about some of those values but

00:06:06,630 --> 00:06:12,090
it's Bosch managed kubernetes clusters

00:06:09,210 --> 00:06:16,440
so how many Bosch fan folks in the room

00:06:12,090 --> 00:06:19,680
a handful of you so I am definitely one

00:06:16,440 --> 00:06:21,810
of the biggest Bosch fangirls in on the

00:06:19,680 --> 00:06:23,400
planet in fact when I first started

00:06:21,810 --> 00:06:25,320
working with cloud foundry five years

00:06:23,400 --> 00:06:27,690
ago I wasn't working with the ERT at all

00:06:25,320 --> 00:06:29,550
I was working with Bosch so one of the

00:06:27,690 --> 00:06:32,430
first things that I did was I built the

00:06:29,550 --> 00:06:35,190
very first very early Bosch release for

00:06:32,430 --> 00:06:37,650
gem fire so this was like I said five

00:06:35,190 --> 00:06:39,240
years ago it wasn't any good because I'm

00:06:37,650 --> 00:06:40,230
not a very good programmer anymore

00:06:39,240 --> 00:06:41,680
because I don't spend enough time

00:06:40,230 --> 00:06:44,740
cutting code but

00:06:41,680 --> 00:06:47,710
kind of proved the point so I have been

00:06:44,740 --> 00:06:50,440
a Bosch fangirl for a very long time

00:06:47,710 --> 00:06:52,720
so that's what what what kubernetes or

00:06:50,440 --> 00:06:54,910
what Kubo is is this Bosch managed

00:06:52,720 --> 00:06:58,930
kubernetes clusters and again we'll talk

00:06:54,910 --> 00:07:02,199
about those things but okay I have a I

00:06:58,930 --> 00:07:04,210
have a kubernetes cluster great what I

00:07:02,199 --> 00:07:07,240
want to do today is really focus on the

00:07:04,210 --> 00:07:09,460
workloads not focus on the management of

00:07:07,240 --> 00:07:10,900
the cluster all of that is great and

00:07:09,460 --> 00:07:14,139
wonderful and we'll talk about those

00:07:10,900 --> 00:07:16,270
values but it's only really relevant if

00:07:14,139 --> 00:07:17,710
when you start thinking about what are

00:07:16,270 --> 00:07:19,330
the workloads that I'm running on my

00:07:17,710 --> 00:07:22,919
kubernetes clusters and what are the

00:07:19,330 --> 00:07:25,509
values that I'm getting out of that so

00:07:22,919 --> 00:07:29,530
when I started thinking about organizing

00:07:25,509 --> 00:07:31,660
this talk and by the way this is based

00:07:29,530 --> 00:07:33,490
on customer conversations so I've been

00:07:31,660 --> 00:07:36,430
working out there talking with some

00:07:33,490 --> 00:07:39,340
early customers for the last I would say

00:07:36,430 --> 00:07:40,919
three or four months this is all

00:07:39,340 --> 00:07:44,169
reflecting some of those conversations

00:07:40,919 --> 00:07:46,780
and when I talk to them about the

00:07:44,169 --> 00:07:48,630
workloads that they're running they kind

00:07:46,780 --> 00:07:51,820
of fall into two different categories

00:07:48,630 --> 00:07:54,970
there's code that they as an

00:07:51,820 --> 00:07:56,560
organization are developing now we'll

00:07:54,970 --> 00:07:59,229
talk a little bit more about that in

00:07:56,560 --> 00:08:00,880
detail but it's code that they own so

00:07:59,229 --> 00:08:03,460
they have the source code in some

00:08:00,880 --> 00:08:06,280
repository somewhere and then there's a

00:08:03,460 --> 00:08:08,050
whole nother set of workloads that they

00:08:06,280 --> 00:08:10,509
want to run in a containerized

00:08:08,050 --> 00:08:13,090
environment where somebody else owns

00:08:10,509 --> 00:08:15,370
that code so specifically I'm talking

00:08:13,090 --> 00:08:20,500
about things like an ISV providing

00:08:15,370 --> 00:08:23,500
software so MongoDB CouchDB SPARC

00:08:20,500 --> 00:08:25,120
elasticsearch those types of things so I

00:08:23,500 --> 00:08:28,539
want to talk about those workloads in

00:08:25,120 --> 00:08:31,599
those two different categories and let's

00:08:28,539 --> 00:08:34,329
start with code that you develop now if

00:08:31,599 --> 00:08:37,360
you know pivotal you'll know that we

00:08:34,329 --> 00:08:39,399
like two by twos so we do a lot of two

00:08:37,360 --> 00:08:41,260
by twos in a lot of different places and

00:08:39,399 --> 00:08:43,659
it actually is a really helpful

00:08:41,260 --> 00:08:45,910
abstraction a helpful way of kind of

00:08:43,659 --> 00:08:47,680
framework for us to organize things for

00:08:45,910 --> 00:08:50,529
for looking at these workloads as well

00:08:47,680 --> 00:08:53,350
and so I've got two different axes here

00:08:50,529 --> 00:08:55,020
on the one axis on the vertical axis

00:08:53,350 --> 00:08:58,140
what we have is the architects

00:08:55,020 --> 00:09:00,180
sheral style of the application so the

00:08:58,140 --> 00:09:02,940
cut workload that I want to run can

00:09:00,180 --> 00:09:06,930
range anywhere from being fully cloud

00:09:02,940 --> 00:09:09,060
native totally stateless can be totally

00:09:06,930 --> 00:09:11,340
ephemeral nodes can come and go

00:09:09,060 --> 00:09:15,360
IP addresses and identities don't matter

00:09:11,340 --> 00:09:18,060
all of that stuff and on the opposite

00:09:15,360 --> 00:09:19,740
end of the spectrum owen micro services

00:09:18,060 --> 00:09:21,330
of course small components on the

00:09:19,740 --> 00:09:22,320
opposite end of the spectrum we have

00:09:21,330 --> 00:09:25,530
what i'm going to call a traditional

00:09:22,320 --> 00:09:28,260
workload which tends to be larger bodies

00:09:25,530 --> 00:09:31,260
of code they tend to be more statically

00:09:28,260 --> 00:09:33,480
deployed not quite as resilient to

00:09:31,260 --> 00:09:38,450
changes in the topology those types of

00:09:33,480 --> 00:09:41,490
things on the horizontal axis i have the

00:09:38,450 --> 00:09:44,310
frequency with which you're changing

00:09:41,490 --> 00:09:47,340
that code so you have code that you're

00:09:44,310 --> 00:09:49,620
cycling all the time you've got weekly

00:09:47,340 --> 00:09:53,850
iterations you're doing a push into

00:09:49,620 --> 00:09:55,920
github several times a day each time you

00:09:53,850 --> 00:09:57,630
do a push it runs some unit tests and

00:09:55,920 --> 00:09:59,400
then once a day we run the integration

00:09:57,630 --> 00:10:02,070
tests and maybe we're even releasing

00:09:59,400 --> 00:10:04,260
that software to our users on a weekly

00:10:02,070 --> 00:10:06,690
basis or every two weeks or maybe every

00:10:04,260 --> 00:10:08,700
day so we've got the very frequent

00:10:06,690 --> 00:10:10,170
changes on the far right hand side and

00:10:08,700 --> 00:10:13,050
on the left-hand side you've got

00:10:10,170 --> 00:10:14,550
infrequently changing code so you might

00:10:13,050 --> 00:10:16,920
see where i'm going with this because

00:10:14,550 --> 00:10:19,620
i'm betting that you have a lot of

00:10:16,920 --> 00:10:22,290
workloads that are traditional workloads

00:10:19,620 --> 00:10:23,730
that you're not really doing active

00:10:22,290 --> 00:10:25,140
development on but they're still

00:10:23,730 --> 00:10:27,140
providing value and you're still running

00:10:25,140 --> 00:10:29,760
them in production yes

00:10:27,140 --> 00:10:33,300
okay so we'll talk about each one of

00:10:29,760 --> 00:10:35,280
those now let me organize what went into

00:10:33,300 --> 00:10:39,180
each of those categories as i started to

00:10:35,280 --> 00:10:42,300
organize this talk so when it comes to

00:10:39,180 --> 00:10:45,570
fully cloud native with frequent changes

00:10:42,300 --> 00:10:47,850
we're really going after developer

00:10:45,570 --> 00:10:50,250
productivity as well as operational

00:10:47,850 --> 00:10:53,130
efficiency and we're here at the cloud

00:10:50,250 --> 00:10:55,440
foundry summit right this is the

00:10:53,130 --> 00:10:57,900
traditional cloud foundry product so

00:10:55,440 --> 00:11:00,510
what we're now calling the application

00:10:57,900 --> 00:11:02,850
run time okay so the traditional cloud

00:11:00,510 --> 00:11:04,680
foundry setting no argument there and

00:11:02,850 --> 00:11:08,640
i'm not going to talk about that in much

00:11:04,680 --> 00:11:09,030
detail on the left hand side in the

00:11:08,640 --> 00:11:11,250
upper

00:11:09,030 --> 00:11:13,740
Quadra we've got cloud native stuff so

00:11:11,250 --> 00:11:16,340
it runs well on Cloud Foundry but maybe

00:11:13,740 --> 00:11:19,200
I'm not in active development anymore

00:11:16,340 --> 00:11:20,130
this goes back to my earlier point of

00:11:19,200 --> 00:11:22,350
Cloud Foundry

00:11:20,130 --> 00:11:24,540
isn't just for the developer there's all

00:11:22,350 --> 00:11:28,440
sorts of operational benefits as well

00:11:24,540 --> 00:11:31,020
and so there again arguably the elastic

00:11:28,440 --> 00:11:33,630
runtime or the application runtime what

00:11:31,020 --> 00:11:36,050
we're calling it now provides a great

00:11:33,630 --> 00:11:38,610
platform for that operational efficiency

00:11:36,050 --> 00:11:41,640
now let's talk about that lower

00:11:38,610 --> 00:11:45,030
left-hand quadrant which is hey I've got

00:11:41,640 --> 00:11:47,670
code that I'm not cycling a whole lot

00:11:45,030 --> 00:11:51,690
and it's more of a traditional

00:11:47,670 --> 00:11:53,130
architecture there what we've done in

00:11:51,690 --> 00:11:55,770
the past is we've run that on

00:11:53,130 --> 00:11:57,390
infrastructure directly and now we're

00:11:55,770 --> 00:11:59,910
going to be running it running that on

00:11:57,390 --> 00:12:02,550
the container runtime and I'll go into

00:11:59,910 --> 00:12:04,620
that in more detail and then the

00:12:02,550 --> 00:12:06,530
interesting one is in this other side

00:12:04,620 --> 00:12:09,480
which is to say I've got a traditional

00:12:06,530 --> 00:12:11,850
application let's say it's not broken

00:12:09,480 --> 00:12:13,380
down into micro services but I do want

00:12:11,850 --> 00:12:16,470
to iterate it a little bit more

00:12:13,380 --> 00:12:18,720
frequently now we know that from a

00:12:16,470 --> 00:12:20,670
DevOps perspective that if I've got

00:12:18,720 --> 00:12:22,410
large monoliths where I have to do

00:12:20,670 --> 00:12:24,390
integration testing maybe I can't

00:12:22,410 --> 00:12:25,830
release it every day but it's more

00:12:24,390 --> 00:12:29,160
frequently that I've done in the past

00:12:25,830 --> 00:12:32,310
maybe I'm releasing it once a month and

00:12:29,160 --> 00:12:35,640
their developer productivity is still

00:12:32,310 --> 00:12:37,560
important but there's a little

00:12:35,640 --> 00:12:39,090
parenthetical remark that says down

00:12:37,560 --> 00:12:40,860
there that one of the differences of

00:12:39,090 --> 00:12:44,010
course between the application runtime

00:12:40,860 --> 00:12:46,260
in the container runtime is that the the

00:12:44,010 --> 00:12:48,870
things that you have to have to support

00:12:46,260 --> 00:12:50,880
that agility the developer productivity

00:12:48,870 --> 00:12:53,610
you got to bring it yourself

00:12:50,880 --> 00:12:57,090
and we'll talk about that more in just a

00:12:53,610 --> 00:12:59,370
bit all right so I'm going to not talk

00:12:57,090 --> 00:13:00,960
about the elastic runtime anymore so I'm

00:12:59,370 --> 00:13:02,280
gonna push that off to the side and

00:13:00,960 --> 00:13:05,100
we're really just going to talk about

00:13:02,280 --> 00:13:08,700
these two categories so let's talk about

00:13:05,100 --> 00:13:11,730
the lower left-hand quadrant to start so

00:13:08,700 --> 00:13:14,490
this is where I'm running traditional

00:13:11,730 --> 00:13:17,940
code that you have developed with

00:13:14,490 --> 00:13:19,770
infrequent changes now what are you

00:13:17,940 --> 00:13:22,150
doing for those infrastructure

00:13:19,770 --> 00:13:23,710
deployments today and

00:13:22,150 --> 00:13:25,510
gonna kind of postulate that you do

00:13:23,710 --> 00:13:29,470
something that looks a little bit like

00:13:25,510 --> 00:13:31,600
this the developer writes the code then

00:13:29,470 --> 00:13:33,580
you have some kind of an approver that

00:13:31,600 --> 00:13:36,820
says all right this is ready to go for

00:13:33,580 --> 00:13:39,550
security approval so it goes to your CSO

00:13:36,820 --> 00:13:42,070
office your CSO office does whatever

00:13:39,550 --> 00:13:44,530
they do they maybe do code scans they do

00:13:42,070 --> 00:13:46,750
some manual code reviews those types of

00:13:44,530 --> 00:13:48,520
things and they give it their approval

00:13:46,750 --> 00:13:51,370
and now it moves on to the compliance

00:13:48,520 --> 00:13:53,950
office now the compliance office goes

00:13:51,370 --> 00:13:54,760
ahead and does its compliance hands it

00:13:53,950 --> 00:13:56,920
over to QA

00:13:54,760 --> 00:13:58,840
and maybe the orders are a little bit

00:13:56,920 --> 00:14:00,340
different that's not the point but you

00:13:58,840 --> 00:14:02,830
can see here that we have an approval

00:14:00,340 --> 00:14:05,350
process and then before I roll this out

00:14:02,830 --> 00:14:07,240
into production and by the coid maybe QA

00:14:05,350 --> 00:14:09,820
is doing that final like performance

00:14:07,240 --> 00:14:11,860
testing before I can roll out it out out

00:14:09,820 --> 00:14:14,530
into production I also have to involve

00:14:11,860 --> 00:14:17,140
the change management folks and so I'm

00:14:14,530 --> 00:14:19,210
getting approval from the final QA yep

00:14:17,140 --> 00:14:21,280
it passed those final QA tests

00:14:19,210 --> 00:14:23,110
change management says yep everything's

00:14:21,280 --> 00:14:25,890
cool and you can deploy that into

00:14:23,110 --> 00:14:29,110
operations and this whole process is

00:14:25,890 --> 00:14:31,750
generally happening as you're deploying

00:14:29,110 --> 00:14:34,060
into the infrastructure directly so

00:14:31,750 --> 00:14:36,550
we've got all of this happening against

00:14:34,060 --> 00:14:39,280
the infrastructure so this very long

00:14:36,550 --> 00:14:42,010
drawn-out process and who has a process

00:14:39,280 --> 00:14:43,720
that looks roughly like this you might

00:14:42,010 --> 00:14:47,590
call it promoting into upper

00:14:43,720 --> 00:14:49,480
environments yep so it looks something

00:14:47,590 --> 00:14:51,130
like that and again what you're doing is

00:14:49,480 --> 00:14:53,020
you're generally doing these things as

00:14:51,130 --> 00:14:57,010
you're doing dev you're testing in the

00:14:53,020 --> 00:14:59,230
infrastructure etc etc so the

00:14:57,010 --> 00:15:01,660
interesting thing about these workloads

00:14:59,230 --> 00:15:05,140
when it comes to containerization is

00:15:01,660 --> 00:15:08,440
that you can and this is super important

00:15:05,140 --> 00:15:12,190
I'm not going to ask you to retool your

00:15:08,440 --> 00:15:13,870
entire process for those of you who have

00:15:12,190 --> 00:15:15,610
been working with Cloud Foundry and

00:15:13,870 --> 00:15:17,290
maybe you're even working with pivotal

00:15:15,610 --> 00:15:20,350
or some of the other Cloud Foundry

00:15:17,290 --> 00:15:22,840
related vendors that are here what we've

00:15:20,350 --> 00:15:25,740
been doing for the last many years is we

00:15:22,840 --> 00:15:28,450
tried to get you to change an awful lot

00:15:25,740 --> 00:15:30,520
we said ah well you know what we want

00:15:28,450 --> 00:15:32,740
you to change your process we want you

00:15:30,520 --> 00:15:34,930
to change your architecture we want you

00:15:32,740 --> 00:15:35,430
to change all of these different even

00:15:34,930 --> 00:15:37,320
your organ

00:15:35,430 --> 00:15:39,930
national structures we talked about all

00:15:37,320 --> 00:15:43,410
of this change and you've implemented

00:15:39,930 --> 00:15:44,940
that for a subset of your workloads but

00:15:43,410 --> 00:15:47,160
again there's all of these other

00:15:44,940 --> 00:15:49,290
workloads do I really need to retool

00:15:47,160 --> 00:15:51,660
everything to just be able to run those

00:15:49,290 --> 00:15:53,399
and so what I'm going to suggest to you

00:15:51,660 --> 00:15:57,089
here and what we're working with

00:15:53,399 --> 00:15:59,459
customers to do is not retool all those

00:15:57,089 --> 00:16:02,430
processes we want to take that same

00:15:59,459 --> 00:16:04,920
process and instead of doing that

00:16:02,430 --> 00:16:07,080
process against infrastructure we're

00:16:04,920 --> 00:16:10,950
doing that process during the creation

00:16:07,080 --> 00:16:13,740
of the image okay so all of those

00:16:10,950 --> 00:16:17,010
approvals so that by the time I get my

00:16:13,740 --> 00:16:19,560
image at the end it's approved and it's

00:16:17,010 --> 00:16:21,779
ready to go and now I just need a place

00:16:19,560 --> 00:16:25,170
to run that and that's where the

00:16:21,779 --> 00:16:26,850
container runtime comes in okay so

00:16:25,170 --> 00:16:28,560
that's the first thing to realize is

00:16:26,850 --> 00:16:30,300
that we're not asking you to retool

00:16:28,560 --> 00:16:36,510
everything to be able to use this

00:16:30,300 --> 00:16:38,339
platform all right so well to summarize

00:16:36,510 --> 00:16:41,970
that it's minimal disruption to the

00:16:38,339 --> 00:16:45,120
current process and again the reason we

00:16:41,970 --> 00:16:47,850
can get away with this is that manual

00:16:45,120 --> 00:16:51,029
process or maybe slightly automated

00:16:47,850 --> 00:16:54,150
process takes a long time so this only

00:16:51,029 --> 00:16:56,029
really can come into play in those

00:16:54,150 --> 00:16:58,380
things that are infrequently changing

00:16:56,029 --> 00:17:00,510
because if it takes six weeks to go

00:16:58,380 --> 00:17:02,279
through the process well it's going to

00:17:00,510 --> 00:17:04,939
take six weeks to go through the process

00:17:02,279 --> 00:17:08,490
to generate the next docker image right

00:17:04,939 --> 00:17:12,059
all right so then you might ask the

00:17:08,490 --> 00:17:13,709
question why do I get any value in doing

00:17:12,059 --> 00:17:15,839
that I'm not asking you to change your

00:17:13,709 --> 00:17:18,390
processes a ton but I am asking you to

00:17:15,839 --> 00:17:20,490
do it instead of on infrastructure do it

00:17:18,390 --> 00:17:23,790
against the docker image so I'm asking

00:17:20,490 --> 00:17:26,520
for some changes is it worth it well the

00:17:23,790 --> 00:17:29,940
answer is it's absolutely worth it

00:17:26,520 --> 00:17:34,590
because the whole point with PKS sorry

00:17:29,940 --> 00:17:37,170
PKS container run time is that you get

00:17:34,590 --> 00:17:39,780
all of the benefits all of the magic

00:17:37,170 --> 00:17:42,120
that you got from Bosh so you get health

00:17:39,780 --> 00:17:44,760
management logging and scaling actually

00:17:42,120 --> 00:17:47,070
that comes from kubernetes so kubernetes

00:17:44,760 --> 00:17:49,440
has some of those capabilities that

00:17:47,070 --> 00:17:51,690
we've had in the elastic runtime for the

00:17:49,440 --> 00:17:54,660
four or five years some of those things

00:17:51,690 --> 00:17:56,940
exist for your workloads on kubernetes

00:17:54,660 --> 00:17:58,980
so you have the ability does it have

00:17:56,940 --> 00:18:01,320
somebody who's watching the health of

00:17:58,980 --> 00:18:03,590
that who's doing log aggregation those

00:18:01,320 --> 00:18:06,690
types of things definitely valuable

00:18:03,590 --> 00:18:08,580
multi cloud so when you are doing that

00:18:06,690 --> 00:18:11,250
against infrastructure you had to select

00:18:08,580 --> 00:18:13,110
the infrastructure first so now you have

00:18:11,250 --> 00:18:15,950
the ability to create a docker image

00:18:13,110 --> 00:18:18,690
that docker image can be run on the

00:18:15,950 --> 00:18:20,850
container runtime on a number of

00:18:18,690 --> 00:18:23,070
different clouds so you have the ability

00:18:20,850 --> 00:18:23,550
due to cloud bursting those types of

00:18:23,070 --> 00:18:27,060
things

00:18:23,550 --> 00:18:30,570
you get kernel and kubernetes upgrades

00:18:27,060 --> 00:18:32,070
so when kubernetes and I forget who

00:18:30,570 --> 00:18:33,690
talked about this I it was in a

00:18:32,070 --> 00:18:35,700
different meeting yesterday when

00:18:33,690 --> 00:18:38,040
kubernetes has for example a

00:18:35,700 --> 00:18:40,320
vulnerability or some type of update

00:18:38,040 --> 00:18:42,150
that it does we will do those rolling

00:18:40,320 --> 00:18:44,970
upgrades for you and I'll talk more

00:18:42,150 --> 00:18:47,760
about this in just a moment and then

00:18:44,970 --> 00:18:49,740
there's consolidation so we are seeing

00:18:47,760 --> 00:18:51,660
this we're hearing this from customers

00:18:49,740 --> 00:18:54,330
that even though they had infrastructure

00:18:51,660 --> 00:18:55,950
as a service which gave them some level

00:18:54,330 --> 00:18:58,590
of consolidation they didn't need

00:18:55,950 --> 00:19:02,400
independent physical devices anymore

00:18:58,590 --> 00:19:04,410
they could use a single host and support

00:19:02,400 --> 00:19:07,050
multiple workloads on that with multiple

00:19:04,410 --> 00:19:10,320
VMs they're finding that they get and

00:19:07,050 --> 00:19:13,470
get even more density on those hosts by

00:19:10,320 --> 00:19:15,660
going to containers so those are all the

00:19:13,470 --> 00:19:21,170
values that you get by moving from an

00:19:15,660 --> 00:19:23,940
infrastructure direction into containers

00:19:21,170 --> 00:19:25,590
but there's a but and there's almost

00:19:23,940 --> 00:19:26,760
always a but and I'm gonna speed up a

00:19:25,590 --> 00:19:28,170
little bit because I'm gonna run out of

00:19:26,760 --> 00:19:32,070
time here and we have about ten minutes

00:19:28,170 --> 00:19:34,470
left and about 20 slides to go the point

00:19:32,070 --> 00:19:37,830
is here that the application may not be

00:19:34,470 --> 00:19:39,450
changing all the time but the things

00:19:37,830 --> 00:19:41,700
that are running underneath the

00:19:39,450 --> 00:19:44,160
applications the kubernetes version

00:19:41,700 --> 00:19:46,440
itself the stem-cell that it's running

00:19:44,160 --> 00:19:51,330
on top of that might be changing much

00:19:46,440 --> 00:19:53,970
more rapidly so can I really roll things

00:19:51,330 --> 00:19:57,360
like the kubernetes version without

00:19:53,970 --> 00:19:59,610
getting in lockstep with the application

00:19:57,360 --> 00:20:02,430
team can I do those even though maybe

00:19:59,610 --> 00:20:03,060
I'm releasing every quarter on the

00:20:02,430 --> 00:20:05,340
application

00:20:03,060 --> 00:20:09,060
can I do more frequent releases under

00:20:05,340 --> 00:20:10,530
the covers and there I might be asking

00:20:09,060 --> 00:20:13,410
you to do something more than you do

00:20:10,530 --> 00:20:16,650
today because it turns out that the real

00:20:13,410 --> 00:20:20,580
kick up killer feature here is that you

00:20:16,650 --> 00:20:23,550
need to have a test suite so I'm gonna

00:20:20,580 --> 00:20:27,000
quickly show you here a deck as a couple

00:20:23,550 --> 00:20:31,500
of animations that I've used in talking

00:20:27,000 --> 00:20:34,170
about the application runtime over the

00:20:31,500 --> 00:20:36,210
last several years what we have here is

00:20:34,170 --> 00:20:38,100
we have three different environments

00:20:36,210 --> 00:20:40,140
these are three different cloud foundry

00:20:38,100 --> 00:20:43,200
instances or three different orgs or

00:20:40,140 --> 00:20:45,540
spaces and I've got my application team

00:20:43,200 --> 00:20:48,540
which is now able to just commit code

00:20:45,540 --> 00:20:50,580
commit it into the this CI environments

00:20:48,540 --> 00:20:52,260
of the dev environment every once in a

00:20:50,580 --> 00:20:54,600
while they do integration tests and the

00:20:52,260 --> 00:20:57,210
acceptance of an environment and when

00:20:54,600 --> 00:20:58,590
the business says okay let's release it

00:20:57,210 --> 00:21:01,710
to production they release it to

00:20:58,590 --> 00:21:03,510
production and so the cycle goes so

00:21:01,710 --> 00:21:05,760
that's what cloud foundry is designed

00:21:03,510 --> 00:21:10,500
for us to support this very agile

00:21:05,760 --> 00:21:13,830
developer workflow now the platform team

00:21:10,500 --> 00:21:16,710
that's responsible for under the covers

00:21:13,830 --> 00:21:19,860
so the platform itself stem-cell

00:21:16,710 --> 00:21:22,740
upgrades handling CVEs those types of

00:21:19,860 --> 00:21:25,470
things what this separation of duties

00:21:22,740 --> 00:21:27,660
did was the way that it's architected

00:21:25,470 --> 00:21:28,500
allows the platform team who's dealing

00:21:27,660 --> 00:21:32,520
with the CVE

00:21:28,500 --> 00:21:36,150
to say hey let me check out that CVE

00:21:32,520 --> 00:21:37,010
in a staging environment here's the

00:21:36,150 --> 00:21:39,960
important part

00:21:37,010 --> 00:21:43,650
run the smoke tests for my application

00:21:39,960 --> 00:21:46,920
on that staging environment if the smoke

00:21:43,650 --> 00:21:49,550
tests pass then I can go ahead and

00:21:46,920 --> 00:21:51,990
deploy in a rolling upgrade fashion

00:21:49,550 --> 00:21:54,090
rolling upgrade fashion that's what

00:21:51,990 --> 00:21:58,320
allows me to not have to sync with the

00:21:54,090 --> 00:22:00,900
app teams roll it out to production you

00:21:58,320 --> 00:22:04,140
need to have the same thing what enables

00:22:00,900 --> 00:22:06,420
this workflow is you have to enable it

00:22:04,140 --> 00:22:08,760
even if you're infrequently changing if

00:22:06,420 --> 00:22:11,820
you want the platform team to be doing

00:22:08,760 --> 00:22:14,640
frequent updates what we need is we need

00:22:11,820 --> 00:22:16,710
those smoke tests that the platform team

00:22:14,640 --> 00:22:20,220
can run in their staging

00:22:16,710 --> 00:22:23,190
before they roll out into production all

00:22:20,220 --> 00:22:26,100
right so that's that lower left-hand

00:22:23,190 --> 00:22:29,820
quadrant now let me talk about the lower

00:22:26,100 --> 00:22:32,879
right-hand quadrant then for a moment so

00:22:29,820 --> 00:22:36,690
notice that this is I've got traditional

00:22:32,879 --> 00:22:40,649
code that is frequently changing what

00:22:36,690 --> 00:22:44,129
that means therefore is that I'm

00:22:40,649 --> 00:22:46,139
frequently changing the image so

00:22:44,129 --> 00:22:48,450
remember I said in creating that image

00:22:46,139 --> 00:22:50,970
before if it took six weeks to go

00:22:48,450 --> 00:22:53,100
through those approvals no problem I

00:22:50,970 --> 00:22:55,799
could create that and I'm only changing

00:22:53,100 --> 00:22:58,860
the image every six weeks now I'm

00:22:55,799 --> 00:23:02,039
frequently changing the image so how do

00:22:58,860 --> 00:23:04,379
you make sure that those images are okay

00:23:02,039 --> 00:23:06,690
to run in your production systems I'll

00:23:04,379 --> 00:23:08,669
tell you honestly two years ago at the

00:23:06,690 --> 00:23:10,200
height of the doc or docx or doc or docx

00:23:08,669 --> 00:23:11,879
or docker now we're kubernetes

00:23:10,200 --> 00:23:14,369
kubernetes kubernetes which is a lot

00:23:11,879 --> 00:23:16,200
harder to say in sequence but darker

00:23:14,369 --> 00:23:18,600
darker darker darker I actually have

00:23:16,200 --> 00:23:20,249
people say I would ask them well why why

00:23:18,600 --> 00:23:22,259
do you want to use docker and they would

00:23:20,249 --> 00:23:23,850
say oh because the developer can just

00:23:22,259 --> 00:23:26,940
give me their container and it'll just

00:23:23,850 --> 00:23:28,139
run great and I'd say really you're

00:23:26,940 --> 00:23:29,369
gonna let your developers hand you

00:23:28,139 --> 00:23:31,679
containers and you're gonna run them on

00:23:29,369 --> 00:23:37,320
your production systems and they were

00:23:31,679 --> 00:23:38,970
like oh right good point so that's

00:23:37,320 --> 00:23:41,159
really what I'm talking about here is

00:23:38,970 --> 00:23:44,009
this recognition and nobody says that

00:23:41,159 --> 00:23:46,169
anymore everybody recognizes now what's

00:23:44,009 --> 00:23:47,970
involved in creating these container

00:23:46,169 --> 00:23:52,289
images that meet those corporate

00:23:47,970 --> 00:23:55,799
requirements but it's now up to you so

00:23:52,289 --> 00:23:58,440
for example on the application runtime

00:23:55,799 --> 00:24:00,139
on the left hand side when you had to

00:23:58,440 --> 00:24:03,629
come up with an approved base image

00:24:00,139 --> 00:24:05,429
built into cloud foundry what you need

00:24:03,629 --> 00:24:07,889
to do now is figure out what your

00:24:05,429 --> 00:24:10,619
standardized base images are and manage

00:24:07,889 --> 00:24:13,409
those manage the accessibility to those

00:24:10,619 --> 00:24:16,289
then what about runtime and other file

00:24:13,409 --> 00:24:18,600
system dependencies on the traditional

00:24:16,289 --> 00:24:21,269
Cloud Foundry side you have an approved

00:24:18,600 --> 00:24:23,009
build pack so your CSO office has gone

00:24:21,269 --> 00:24:25,619
through and approved that build pack on

00:24:23,009 --> 00:24:27,179
the other side you got to figure out how

00:24:25,619 --> 00:24:29,940
to do that yourself you got to come up

00:24:27,179 --> 00:24:30,450
with the pipelines the docker files all

00:24:29,940 --> 00:24:33,030
of those

00:24:30,450 --> 00:24:35,730
things you're gonna only allow approved

00:24:33,030 --> 00:24:37,350
images well you're gonna have to do

00:24:35,730 --> 00:24:38,910
things like and on the Cloud Foundry

00:24:37,350 --> 00:24:40,620
side you've got Identity and Access

00:24:38,910 --> 00:24:41,970
Management which is keeping you from

00:24:40,620 --> 00:24:44,340
being able to do things that you're not

00:24:41,970 --> 00:24:45,510
allowed to do on the right hand side you

00:24:44,340 --> 00:24:47,700
have to have Identity and Access

00:24:45,510 --> 00:24:50,370
Management you also might want container

00:24:47,700 --> 00:24:55,020
scanning container image scanning and

00:24:50,370 --> 00:24:58,170
many many more things so the real point

00:24:55,020 --> 00:25:00,720
here is that yes you get these types of

00:24:58,170 --> 00:25:03,120
things so why would I want to do that in

00:25:00,720 --> 00:25:05,250
that lower right hand corner well the

00:25:03,120 --> 00:25:08,550
beautiful thing is you still get all of

00:25:05,250 --> 00:25:11,100
those values so it may be worth you

00:25:08,550 --> 00:25:13,740
going through that work but this is now

00:25:11,100 --> 00:25:16,410
no longer the case where I'm saying you

00:25:13,740 --> 00:25:18,090
don't have to change a ton I'm saying if

00:25:16,410 --> 00:25:21,570
you're in that lower right hand quadrant

00:25:18,090 --> 00:25:23,340
you have a lot of work to do okay so you

00:25:21,570 --> 00:25:24,630
really want to look at that and see

00:25:23,340 --> 00:25:28,380
whether you can push things into the

00:25:24,630 --> 00:25:31,110
upper right hand quadrant okay so that

00:25:28,380 --> 00:25:33,440
takes care of that quadrant and now I

00:25:31,110 --> 00:25:36,810
have about five minutes to go perfect

00:25:33,440 --> 00:25:38,790
so that takes care of the left-hand side

00:25:36,810 --> 00:25:40,440
there so let's talk for just a few

00:25:38,790 --> 00:25:42,770
minutes about the right-hand side which

00:25:40,440 --> 00:25:45,960
is the code that someone else develops

00:25:42,770 --> 00:25:48,930
what's interesting here is initially I

00:25:45,960 --> 00:25:51,330
didn't think I'd used the same 2x2 but

00:25:48,930 --> 00:25:53,520
as I got things organized in order to

00:25:51,330 --> 00:25:56,790
share this with you I realized that this

00:25:53,520 --> 00:25:59,640
2x2 helps as well I'm gonna lay a couple

00:25:56,790 --> 00:26:01,080
of things over this 2x2 the first thing

00:25:59,640 --> 00:26:06,450
that I'm gonna do is something like

00:26:01,080 --> 00:26:08,370
Oracle WebLogic okay so it falls into

00:26:06,450 --> 00:26:10,740
the lower left-hand corner in that

00:26:08,370 --> 00:26:12,870
Oracle releases this software I don't

00:26:10,740 --> 00:26:15,570
know what are they releasing it in every

00:26:12,870 --> 00:26:17,580
six months or you know twelve months or

00:26:15,570 --> 00:26:20,070
something like that so it's infrequently

00:26:17,580 --> 00:26:22,340
changing and it's also traditional and

00:26:20,070 --> 00:26:24,390
I'll go through what I mean by that the

00:26:22,340 --> 00:26:28,410
architectural style is slightly

00:26:24,390 --> 00:26:32,100
different here it's similar but oh allah

00:26:28,410 --> 00:26:35,480
make some slight nuances then we have

00:26:32,100 --> 00:26:39,630
other is v software like spark or

00:26:35,480 --> 00:26:42,150
elasticsearch that they release software

00:26:39,630 --> 00:26:43,800
more frequently for sure because these

00:26:42,150 --> 00:26:44,160
are companies that are were kind of born

00:26:43,800 --> 00:26:46,950
in the

00:26:44,160 --> 00:26:49,020
more agile world but they're also more

00:26:46,950 --> 00:26:51,000
cloud native and I'll describe what I

00:26:49,020 --> 00:26:52,860
mean about those now that doesn't

00:26:51,000 --> 00:26:54,570
necessarily mean that they're so cloud

00:26:52,860 --> 00:26:57,270
native that they run on the ERT

00:26:54,570 --> 00:26:58,740
on the traditional Cloud Foundry but

00:26:57,270 --> 00:27:01,950
we'll talk about that in a little bit of

00:26:58,740 --> 00:27:04,200
detail so instead of going along the

00:27:01,950 --> 00:27:06,090
frequently and infrequently I'm really

00:27:04,200 --> 00:27:08,550
just gonna look at those two that

00:27:06,090 --> 00:27:11,970
spectrum of traditional versus cloud

00:27:08,550 --> 00:27:14,520
native all right so let's talk about

00:27:11,970 --> 00:27:17,940
cloud native what I mean by cloud native

00:27:14,520 --> 00:27:20,160
here is that they are not necessarily

00:27:17,940 --> 00:27:22,350
independent micro-service type of

00:27:20,160 --> 00:27:24,690
applications where each of the micro

00:27:22,350 --> 00:27:27,750
services really has a lot of individual

00:27:24,690 --> 00:27:30,180
autonomy and you're designing the system

00:27:27,750 --> 00:27:31,920
so that they can run independently these

00:27:30,180 --> 00:27:34,590
are more cloud native what I call cloud

00:27:31,920 --> 00:27:38,030
native clusters which is to say that

00:27:34,590 --> 00:27:41,220
there's multiple components even

00:27:38,030 --> 00:27:43,860
kubernetes itself has workers and

00:27:41,220 --> 00:27:47,550
masters and at CDs so it's a cluster of

00:27:43,860 --> 00:27:50,460
components but really those components

00:27:47,550 --> 00:27:53,040
are meaningless if they don't have the

00:27:50,460 --> 00:27:54,840
other components in the cluster so it's

00:27:53,040 --> 00:27:57,750
a cloud native architecture from the

00:27:54,840 --> 00:28:00,690
perspective that and in fact let me go

00:27:57,750 --> 00:28:03,060
ahead and advance so from the

00:28:00,690 --> 00:28:08,100
perspective that it does things like

00:28:03,060 --> 00:28:11,160
supports nodes not having a fixed and

00:28:08,100 --> 00:28:14,190
rigid identity so when a node goes away

00:28:11,160 --> 00:28:16,650
and we bring it back it can have a new

00:28:14,190 --> 00:28:18,210
identity and it'll add itself back to

00:28:16,650 --> 00:28:20,760
the cluster with that new identity

00:28:18,210 --> 00:28:23,430
that's what I mean by cloud native there

00:28:20,760 --> 00:28:28,170
or it might be availability zone aware

00:28:23,430 --> 00:28:30,150
so we we for example it or the platform

00:28:28,170 --> 00:28:31,830
makes it availability zone aware so that

00:28:30,150 --> 00:28:33,690
you're deploying things across and you

00:28:31,830 --> 00:28:37,170
get some level of high availability that

00:28:33,690 --> 00:28:39,090
way and you can have flexible cluster

00:28:37,170 --> 00:28:40,980
topologies arguably some of these

00:28:39,090 --> 00:28:43,530
traditional software you can't just add

00:28:40,980 --> 00:28:45,900
another node okay so these are some of

00:28:43,530 --> 00:28:49,050
the things that kind of define things

00:28:45,900 --> 00:28:51,780
like spark and elasticsearch in terms of

00:28:49,050 --> 00:28:54,720
data centric workloads you need things

00:28:51,780 --> 00:28:57,660
like persistence so this completely

00:28:54,720 --> 00:29:00,240
stateless thing doesn't exist anymore

00:28:57,660 --> 00:29:03,660
and I want to point out that no shared

00:29:00,240 --> 00:29:06,870
storage and what I mean by that is on

00:29:03,660 --> 00:29:09,660
the left hand side here we see multiple

00:29:06,870 --> 00:29:11,970
instances of a workload multiple

00:29:09,660 --> 00:29:15,510
instances of an app all tied to the same

00:29:11,970 --> 00:29:18,050
shared storage that is something that is

00:29:15,510 --> 00:29:21,930
not available to you in kubernetes

00:29:18,050 --> 00:29:23,970
because it really isn't cloud native so

00:29:21,930 --> 00:29:27,690
on the right hand side you see here that

00:29:23,970 --> 00:29:29,550
each instance gets its own data well

00:29:27,690 --> 00:29:32,360
here's a picture from elasticsearch

00:29:29,550 --> 00:29:36,090
where it's now no longer the case that

00:29:32,360 --> 00:29:38,730
you're you're handling that that data

00:29:36,090 --> 00:29:40,770
system just in the database the

00:29:38,730 --> 00:29:42,870
application is actually handling the

00:29:40,770 --> 00:29:45,210
replication in the distribution of those

00:29:42,870 --> 00:29:47,880
things and maybe even some of the

00:29:45,210 --> 00:29:51,570
availability zone awareness okay so

00:29:47,880 --> 00:29:53,730
that's what I mean by cloud native now

00:29:51,570 --> 00:29:56,880
these things so why would we run these

00:29:53,730 --> 00:30:01,080
on Kubo well number one that you might

00:29:56,880 --> 00:30:04,200
already have them containerized and all

00:30:01,080 --> 00:30:08,850
of this on the right hand side you get

00:30:04,200 --> 00:30:10,710
all the goodness of Bosh so finally let

00:30:08,850 --> 00:30:13,170
me talk about the very last thing and I

00:30:10,710 --> 00:30:15,150
promise I'm almost done here I apologize

00:30:13,170 --> 00:30:17,490
for going I'll go a couple of minutes

00:30:15,150 --> 00:30:20,600
over so let's talk about that other

00:30:17,490 --> 00:30:24,030
workload which is Oracle Oracle WebLogic

00:30:20,600 --> 00:30:25,860
so arguably Oracle WebLogic is not cloud

00:30:24,030 --> 00:30:28,740
native sure they're trying to do a

00:30:25,860 --> 00:30:30,750
little bit more but Oracle WebLogic is

00:30:28,740 --> 00:30:33,570
one of those systems where if you lose a

00:30:30,750 --> 00:30:35,790
node you have to bring it back with the

00:30:33,570 --> 00:30:37,410
same identity that I had before you

00:30:35,790 --> 00:30:40,260
can't just it can't take on a new

00:30:37,410 --> 00:30:42,150
identity I need to if I for example I've

00:30:40,260 --> 00:30:44,220
got the storage and I bring back the

00:30:42,150 --> 00:30:47,670
node and I reattached the persistent

00:30:44,220 --> 00:30:49,500
volume great but if my node has taken on

00:30:47,670 --> 00:30:51,990
a different identity in the cluster than

00:30:49,500 --> 00:30:56,520
everything's broken because it expected

00:30:51,990 --> 00:30:58,290
that same identity so so what am I

00:30:56,520 --> 00:31:00,270
talking about here so let me get very

00:30:58,290 --> 00:31:02,990
concrete to talk about what do we mean

00:31:00,270 --> 00:31:06,240
by Oracle WebLogic so we've got Bosh

00:31:02,990 --> 00:31:10,110
we've got the container runtime which is

00:31:06,240 --> 00:31:11,220
managing the kubernetes cluster and then

00:31:10,110 --> 00:31:13,860
I'm talking about

00:31:11,220 --> 00:31:17,130
actually running oracle weblogic inside

00:31:13,860 --> 00:31:18,570
of a kubernetes cluster so I have a

00:31:17,130 --> 00:31:20,789
couple of colleagues that have been

00:31:18,570 --> 00:31:24,210
experimenting with us and actually have

00:31:20,789 --> 00:31:27,390
it working and once you do that then you

00:31:24,210 --> 00:31:30,510
just run your normal application inside

00:31:27,390 --> 00:31:32,730
of Oracle WebLogic server so going back

00:31:30,510 --> 00:31:35,190
to this notion of I'm not gonna ask you

00:31:32,730 --> 00:31:37,260
to reach to retool everything I'm not

00:31:35,190 --> 00:31:39,210
gonna ask you to make huge code changes

00:31:37,260 --> 00:31:41,490
but you can run your stuff on the

00:31:39,210 --> 00:31:43,950
platform anyway that's the whole point

00:31:41,490 --> 00:31:48,840
your same application code is still

00:31:43,950 --> 00:31:51,030
running on WebLogic now you should be

00:31:48,840 --> 00:31:52,740
asking the question why what is the

00:31:51,030 --> 00:31:56,429
value why would I do that

00:31:52,740 --> 00:31:59,760
well it turns out that all the same

00:31:56,429 --> 00:32:03,179
values that you saw before now arguably

00:31:59,760 --> 00:32:05,909
what WebLogic itself does some of this

00:32:03,179 --> 00:32:08,940
so for example they've over the years

00:32:05,909 --> 00:32:10,740
they've added some health management so

00:32:08,940 --> 00:32:12,780
if a node goes down bringing the node

00:32:10,740 --> 00:32:14,610
back up they've added things like

00:32:12,780 --> 00:32:17,490
logging in fact that's one of the things

00:32:14,610 --> 00:32:20,360
that they've always done maybe allowing

00:32:17,490 --> 00:32:24,000
you to scale some of those things but

00:32:20,360 --> 00:32:26,070
most of this stuff multi-cloud can you

00:32:24,000 --> 00:32:28,640
just do multi cloud for WebLogic server

00:32:26,070 --> 00:32:32,039
easily nope

00:32:28,640 --> 00:32:34,340
upgrades of the kernel and maybe the

00:32:32,039 --> 00:32:36,960
kubernetes cluster underneath nope

00:32:34,340 --> 00:32:40,320
consolidation like we talked about

00:32:36,960 --> 00:32:42,210
earlier also very difficult and one of

00:32:40,320 --> 00:32:44,700
the interesting things that we found is

00:32:42,210 --> 00:32:47,159
that there might even be some license

00:32:44,700 --> 00:32:49,289
consolidation that you can gain license

00:32:47,159 --> 00:32:51,179
benefits here because of the way that

00:32:49,289 --> 00:32:54,090
the licensing model is for WebLogic

00:32:51,179 --> 00:32:56,190
under the covers so they tend to license

00:32:54,090 --> 00:32:58,770
on a fairly low level infrastructure

00:32:56,190 --> 00:33:01,380
abstraction and so if that's used by

00:32:58,770 --> 00:33:03,419
multiple instances across the top you

00:33:01,380 --> 00:33:07,770
might even be able to set them save some

00:33:03,419 --> 00:33:09,929
licensing costs now the difference

00:33:07,770 --> 00:33:11,700
between that and the elasticsearch and

00:33:09,929 --> 00:33:15,240
spark workloads that I used as an

00:33:11,700 --> 00:33:18,630
example beforehand is that because those

00:33:15,240 --> 00:33:22,169
things are much more traditional and you

00:33:18,630 --> 00:33:23,850
have things like persistent identity you

00:33:22,169 --> 00:33:25,200
need to leverage something in kubernetes

00:33:23,850 --> 00:33:27,960
called stateful state

00:33:25,200 --> 00:33:30,870
sets and this is taken directly from the

00:33:27,960 --> 00:33:34,139
documentation their stable persistent

00:33:30,870 --> 00:33:36,299
storage stable identifier z' ordering so

00:33:34,139 --> 00:33:38,549
starting things up in a very specific

00:33:36,299 --> 00:33:40,169
order these are the types of things that

00:33:38,549 --> 00:33:42,510
you needed to do with these traditional

00:33:40,169 --> 00:33:44,730
applications I came from Documentum I

00:33:42,510 --> 00:33:47,370
know very well that the doc base has to

00:33:44,730 --> 00:33:49,740
start before the doc broker does so

00:33:47,370 --> 00:33:51,990
we're familiar with those things the

00:33:49,740 --> 00:33:54,330
interesting thing is that stateful sets

00:33:51,990 --> 00:33:56,549
replace what they used to call pet sets

00:33:54,330 --> 00:33:59,220
which I thought was just a great name so

00:33:56,549 --> 00:34:03,330
stateful sets don't necessarily mean

00:33:59,220 --> 00:34:06,210
always State State persistence it just

00:34:03,330 --> 00:34:09,300
means it's something that you care and

00:34:06,210 --> 00:34:13,230
feed for a little bit more than you do

00:34:09,300 --> 00:34:17,040
true cloud native stuff and it's beta in

00:34:13,230 --> 00:34:19,379
1.8 so this kind of summarizes that the

00:34:17,040 --> 00:34:21,179
both sides of the spectrum so code that

00:34:19,379 --> 00:34:24,359
you write and code that you uh that

00:34:21,179 --> 00:34:26,070
somebody else wrote and what I want to

00:34:24,359 --> 00:34:28,980
do is I just want to leave you with a

00:34:26,070 --> 00:34:32,520
call to action so Cloud Foundry

00:34:28,980 --> 00:34:35,819
Foundation announced that kind of the

00:34:32,520 --> 00:34:39,050
change in organization on this your call

00:34:35,819 --> 00:34:41,520
to action is run workloads on Kubo

00:34:39,050 --> 00:34:44,280
because it's running those workloads

00:34:41,520 --> 00:34:46,560
that's gonna help us tease out and when

00:34:44,280 --> 00:34:48,389
I say us it is the truly the Cloud

00:34:46,560 --> 00:34:51,679
Foundry foundation we have committers on

00:34:48,389 --> 00:34:54,629
Kubo from pivotal from google and from

00:34:51,679 --> 00:34:56,490
vmware are all committing on that open

00:34:54,629 --> 00:34:58,349
source project at the moment and the

00:34:56,490 --> 00:35:01,050
only way that we're gonna get that right

00:34:58,349 --> 00:35:03,660
is by having lots and lots of workloads

00:35:01,050 --> 00:35:05,700
and finding those edge cases and making

00:35:03,660 --> 00:35:07,200
sure that we are standing up kubernetes

00:35:05,700 --> 00:35:11,069
clusters that can support all those

00:35:07,200 --> 00:35:12,329
workloads all right and with that oh and

00:35:11,069 --> 00:35:14,220
of course when you do run those

00:35:12,329 --> 00:35:17,400
workloads please share with everyone

00:35:14,220 --> 00:35:19,530
else and with that I am at the end of my

00:35:17,400 --> 00:35:21,060
time I'm sorry I almost never leave time

00:35:19,530 --> 00:35:22,589
for questions but I'm gonna stick around

00:35:21,060 --> 00:35:24,690
for a little bit I don't have to rush

00:35:22,589 --> 00:35:26,500
out right away and I thank you for your

00:35:24,690 --> 00:35:31,280
attention

00:35:26,500 --> 00:35:31,280

YouTube URL: https://www.youtube.com/watch?v=UwsdveJJ-bk


