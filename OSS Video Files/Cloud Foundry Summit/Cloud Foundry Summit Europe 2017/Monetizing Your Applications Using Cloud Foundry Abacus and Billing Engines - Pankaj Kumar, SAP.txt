Title: Monetizing Your Applications Using Cloud Foundry Abacus and Billing Engines - Pankaj Kumar, SAP
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	Monetizing Your Applications Using Cloud Foundry Abacus and Billing Engines - Pankaj Kumar, SAP

This session will demonstrate how CF Abacus is used for metering your applications. Based on this we can monetize on various attributes like API Calls, Resources consumed etc. This session will include an end to end scenario of enabling metering for an existing application. Followed by pushing the metered data into a rating and billing system there by triggering an invoice to the customer. The demo will use the knowledge and experience we have gathered at SAP in monetizing some of our cloud solutions using Cloud Foundry.

About Pankaj Kumar
Pankaj Kumar is part of the product management for SAP Cloud Platform where he focuses on commercialization aspects of the various platform resources and services. He has been a speaker at various Industry events like SAP TechEd, ASUG etc.
Captions: 
	00:00:00,000 --> 00:00:03,689
all right let's start guys welcome to

00:00:01,979 --> 00:00:05,910
this session make sure you are here for

00:00:03,689 --> 00:00:08,069
the monetizing your application using CF

00:00:05,910 --> 00:00:10,500
abacus session and not for another one

00:00:08,069 --> 00:00:15,059
if you are it's still okay to sit but

00:00:10,500 --> 00:00:17,970
maybe you want to change my name is

00:00:15,059 --> 00:00:20,100
pankaj kumar i'm from sa p product

00:00:17,970 --> 00:00:27,320
manager in cloud our cloud platform

00:00:20,100 --> 00:00:30,630
group so monetizing your applications as

00:00:27,320 --> 00:00:33,360
engineers as software developers we love

00:00:30,630 --> 00:00:35,070
to develop code or write products some

00:00:33,360 --> 00:00:36,750
are some of us would work without money

00:00:35,070 --> 00:00:38,370
as well how many of you would work

00:00:36,750 --> 00:00:40,590
without money and just write code

00:00:38,370 --> 00:00:44,129
none oh man you guys are all

00:00:40,590 --> 00:00:46,770
professionals so yeah so everybody wants

00:00:44,129 --> 00:00:52,079
money right so let's say over here euros

00:00:46,770 --> 00:00:55,050
and so that we can buy gifts or by car

00:00:52,079 --> 00:00:59,070
or home on a smartphone so monetization

00:00:55,050 --> 00:01:03,300
is important and there are various

00:00:59,070 --> 00:01:05,540
models of monetization think of for

00:01:03,300 --> 00:01:10,890
example let's say s ap cloud platform or

00:01:05,540 --> 00:01:14,130
Google or pivotal there will be platform

00:01:10,890 --> 00:01:16,890
providers where they are more this is

00:01:14,130 --> 00:01:19,950
traditional use case where you want to

00:01:16,890 --> 00:01:24,150
pay for what you use so I use so much

00:01:19,950 --> 00:01:27,659
runtime I used so much memory or

00:01:24,150 --> 00:01:31,829
database so paper use for customers and

00:01:27,659 --> 00:01:33,990
that's the most traditional one in

00:01:31,829 --> 00:01:37,710
platform providers there is another one

00:01:33,990 --> 00:01:41,520
coming up where I am a user of a public

00:01:37,710 --> 00:01:46,200
cloud and I want to keep a tab on my

00:01:41,520 --> 00:01:49,500
costs so for example AWS charges me this

00:01:46,200 --> 00:01:51,990
much I pay them about let's say 200k

00:01:49,500 --> 00:01:54,659
every month and I want to see where my

00:01:51,990 --> 00:01:57,329
costs are going I mean maybe optimize on

00:01:54,659 --> 00:02:00,180
that and run certain workloads less so

00:01:57,329 --> 00:02:03,320
there is monetization on the platform

00:02:00,180 --> 00:02:07,619
provider side but I am seeing these

00:02:03,320 --> 00:02:10,200
trends among platform developer platform

00:02:07,619 --> 00:02:12,540
application developers or application

00:02:10,200 --> 00:02:13,349
developers where they want to optimize

00:02:12,540 --> 00:02:15,930
the cost

00:02:13,349 --> 00:02:17,790
so that's another use case and we are

00:02:15,930 --> 00:02:21,239
see if abacus or milling engines can be

00:02:17,790 --> 00:02:24,930
used then internal developers the middle

00:02:21,239 --> 00:02:26,879
one so as a say P cloud platform we

00:02:24,930 --> 00:02:28,230
asked our internal developers to use our

00:02:26,879 --> 00:02:30,420
platform like if you are developing

00:02:28,230 --> 00:02:32,340
let's say an application and you know

00:02:30,420 --> 00:02:35,400
you want to put that application on 12

00:02:32,340 --> 00:02:39,959
platform you want to charge them back it

00:02:35,400 --> 00:02:42,749
could be that you as a as a platform

00:02:39,959 --> 00:02:45,419
provider organization in your company

00:02:42,749 --> 00:02:47,760
has bought the platform and you pay the

00:02:45,419 --> 00:02:50,219
bills but then there are various

00:02:47,760 --> 00:02:52,349
organizations that use it inside your

00:02:50,219 --> 00:02:55,489
company and you want to charge them back

00:02:52,349 --> 00:03:00,449
so that's another monetization model

00:02:55,489 --> 00:03:03,079
third one would be that you are is V or

00:03:00,449 --> 00:03:06,180
a developer of api's and you want to

00:03:03,079 --> 00:03:08,699
host your API somewhere and then get

00:03:06,180 --> 00:03:11,939
paid for those api's so these are

00:03:08,699 --> 00:03:17,729
various monetization models prevalent

00:03:11,939 --> 00:03:20,699
among inside industry today we we will

00:03:17,729 --> 00:03:22,650
see this whole chain from metering or

00:03:20,699 --> 00:03:25,319
you know where the applications are

00:03:22,650 --> 00:03:29,849
being metered to all the way to invoices

00:03:25,319 --> 00:03:32,970
and I'll present one case of how I think

00:03:29,849 --> 00:03:34,799
that's just one case these are some of

00:03:32,970 --> 00:03:36,439
the productive examples are in the

00:03:34,799 --> 00:03:39,299
industry

00:03:36,439 --> 00:03:43,079
Netflix published series of blog posts

00:03:39,299 --> 00:03:44,370
on how they use their how their billing

00:03:43,079 --> 00:03:47,250
engine looks like so they it's a

00:03:44,370 --> 00:03:48,150
Cassandra based my sequel based custom

00:03:47,250 --> 00:03:50,220
in-house solution

00:03:48,150 --> 00:03:52,919
it used to be based on Oracle DB they

00:03:50,220 --> 00:03:57,060
just like change it like a year back so

00:03:52,919 --> 00:04:00,030
total custom solution Twitter has a

00:03:57,060 --> 00:04:01,709
couple of videos on their solution how

00:04:00,030 --> 00:04:03,060
they charge back their internal

00:04:01,709 --> 00:04:07,169
developers for the platform that they

00:04:03,060 --> 00:04:09,479
use Hybris as a service is something

00:04:07,169 --> 00:04:11,699
that we use internally and that's

00:04:09,479 --> 00:04:18,709
another way to use it so these are

00:04:11,699 --> 00:04:22,019
productive solutions in the industry now

00:04:18,709 --> 00:04:23,880
the topic for this talk was CF abacus

00:04:22,019 --> 00:04:26,050
and revenue engine so CA we're because

00:04:23,880 --> 00:04:29,639
is one side

00:04:26,050 --> 00:04:33,819
so how many people have attended boss

00:04:29,639 --> 00:04:36,190
sessions any boss yes and today so boss

00:04:33,819 --> 00:04:38,800
helps you with which operations day 1

00:04:36,190 --> 00:04:40,449
day 2 they want to keep make the

00:04:38,800 --> 00:04:44,139
applications run beautifully and day 2

00:04:40,449 --> 00:04:46,629
to keep it running so III call CF abacus

00:04:44,139 --> 00:04:48,340
helping with day 30 problems now I need

00:04:46,629 --> 00:04:52,120
to charge my customers so that's my day

00:04:48,340 --> 00:04:56,289
30 problem after a month it's a

00:04:52,120 --> 00:05:00,190
collection of micro services primarily I

00:04:56,289 --> 00:05:02,110
mean they are written in nodejs so you

00:05:00,190 --> 00:05:04,030
can look at starting from left there is

00:05:02,110 --> 00:05:06,909
a event collector so something happens

00:05:04,030 --> 00:05:10,270
in your app it could be a service so

00:05:06,909 --> 00:05:13,120
over there you will send a usage to this

00:05:10,270 --> 00:05:16,870
micro service and it will collect it as

00:05:13,120 --> 00:05:19,870
an event this is not too different from

00:05:16,870 --> 00:05:22,360
when you make a cell phone call somebody

00:05:19,870 --> 00:05:25,780
records it that not record as in the

00:05:22,360 --> 00:05:28,000
recording and NSA or GCHQ but more in

00:05:25,780 --> 00:05:30,370
that traditional sense that it's a CD

00:05:28,000 --> 00:05:34,630
are called data record created that this

00:05:30,370 --> 00:05:38,229
guy called over here so that's the usage

00:05:34,630 --> 00:05:41,590
collection event then it gets meter how

00:05:38,229 --> 00:05:45,569
much it was used for like 60 minutes 30

00:05:41,590 --> 00:05:48,969
minutes then accumulator so aggregator

00:05:45,569 --> 00:05:52,630
maybe you want to collect the event so

00:05:48,969 --> 00:05:54,729
what's the typical cycle for cell phone

00:05:52,630 --> 00:05:57,969
plans a month so you want accumulate

00:05:54,729 --> 00:05:59,529
maybe you can keep sending that but more

00:05:57,969 --> 00:06:01,810
or less you typically accumulate those

00:05:59,529 --> 00:06:04,330
user events and then you send it for

00:06:01,810 --> 00:06:08,380
reporting so that's what CF ever cos

00:06:04,330 --> 00:06:09,250
does now see if abacus is open-source

00:06:08,380 --> 00:06:12,389
project

00:06:09,250 --> 00:06:16,029
sfe contribute so it was started by IBM

00:06:12,389 --> 00:06:18,430
it's still in a very developer friendly

00:06:16,029 --> 00:06:21,099
manner like you as well / we'll be able

00:06:18,430 --> 00:06:23,229
to clone it and run it and you know

00:06:21,099 --> 00:06:25,599
figure out how things work and I'll also

00:06:23,229 --> 00:06:29,229
go into those things how it works but

00:06:25,599 --> 00:06:30,759
when you take it to money part that is

00:06:29,229 --> 00:06:33,159
dealt by the business people most of the

00:06:30,759 --> 00:06:38,390
time sometime affectionately known as

00:06:33,159 --> 00:06:41,390
bean counters so those folks they want

00:06:38,390 --> 00:06:42,800
have a more nicer way to deal with

00:06:41,390 --> 00:06:45,680
things maybe a commercial off-the-shelf

00:06:42,800 --> 00:06:48,650
billing system there are many available

00:06:45,680 --> 00:06:52,070
I'll use example of ASAP revenue cloud

00:06:48,650 --> 00:06:57,850
where we are using this to Bill our

00:06:52,070 --> 00:07:01,460
customers so when you buy a product from

00:06:57,850 --> 00:07:06,170
obvious what's the popular in us it's

00:07:01,460 --> 00:07:08,000
amazon.com the product is bought and you

00:07:06,170 --> 00:07:08,960
are charged at the very minute like it's

00:07:08,000 --> 00:07:10,970
you buy a thing

00:07:08,960 --> 00:07:15,110
there's no continued relationship with

00:07:10,970 --> 00:07:17,480
the customer in case of subscriptions on

00:07:15,110 --> 00:07:19,640
usage based billing there is a continued

00:07:17,480 --> 00:07:21,800
relationship with the customer right I

00:07:19,640 --> 00:07:23,570
mean even newspapers were subscriptions

00:07:21,800 --> 00:07:25,010
right so you have a continued

00:07:23,570 --> 00:07:27,410
relationship with the customer so it's a

00:07:25,010 --> 00:07:29,390
different from selling discrete products

00:07:27,410 --> 00:07:32,690
so there are various things that come

00:07:29,390 --> 00:07:36,110
into picture so billing engines bring in

00:07:32,690 --> 00:07:38,180
the concept of a customer in case of in

00:07:36,110 --> 00:07:40,580
this scenario that I need to have a

00:07:38,180 --> 00:07:43,630
relationship with this customer over a

00:07:40,580 --> 00:07:46,550
longer amount of time then there are I

00:07:43,630 --> 00:07:49,310
may be using certain things from Cloud

00:07:46,550 --> 00:07:51,530
Foundry and then maybe certain other

00:07:49,310 --> 00:07:53,840
things from some other provider and I

00:07:51,530 --> 00:07:55,940
want to consolidate that invoice a good

00:07:53,840 --> 00:07:59,210
example to think of that would be think

00:07:55,940 --> 00:08:01,220
of a cable provider a TV cable provider

00:07:59,210 --> 00:08:02,950
as well as who's also internet provider

00:08:01,220 --> 00:08:07,550
now you have two different departments

00:08:02,950 --> 00:08:10,120
sending usage events to the same so see

00:08:07,550 --> 00:08:12,860
if abacus cannot help you there to

00:08:10,120 --> 00:08:15,260
consolidate these events into a single

00:08:12,860 --> 00:08:18,830
invoice so billing engines help you

00:08:15,260 --> 00:08:20,300
there so that's that's where we will use

00:08:18,830 --> 00:08:21,620
our billing engine and the billing

00:08:20,300 --> 00:08:23,660
engine that I'm going to talk about is

00:08:21,620 --> 00:08:26,120
called SME Hybris a new cloud as I said

00:08:23,660 --> 00:08:27,710
there are many available over here this

00:08:26,120 --> 00:08:30,740
is just being from sa P we are using

00:08:27,710 --> 00:08:34,930
that it's a micro services based billing

00:08:30,740 --> 00:08:37,670
engine it runs on Cloud Foundry provides

00:08:34,930 --> 00:08:40,070
configure price code sources

00:08:37,670 --> 00:08:41,450
subscription billing and then backend

00:08:40,070 --> 00:08:44,390
integration with various finance

00:08:41,450 --> 00:08:48,350
solutions so it sends - as of course as

00:08:44,390 --> 00:08:51,700
ap ERP you could take these things and

00:08:48,350 --> 00:08:51,700
send it to other grps as well

00:08:52,200 --> 00:08:58,900
so here's the flow so we will look at CF

00:08:55,870 --> 00:09:00,430
abacus a little bit then we will also go

00:08:58,900 --> 00:09:04,110
into the revenue cloud that will be part

00:09:00,430 --> 00:09:07,420
of my demo typically what will happen is

00:09:04,110 --> 00:09:09,400
somebody is using some some some usage

00:09:07,420 --> 00:09:11,530
is happening it could be some usage

00:09:09,400 --> 00:09:13,240
happening in a cloud platform where you

00:09:11,530 --> 00:09:16,540
are using certain resources maybe

00:09:13,240 --> 00:09:18,310
application runtime maybe making certain

00:09:16,540 --> 00:09:20,830
API calls to object storage or something

00:09:18,310 --> 00:09:24,460
like that right so that app usage

00:09:20,830 --> 00:09:26,860
happens metering is captured in CF

00:09:24,460 --> 00:09:29,020
abacus and then it is sent to billing

00:09:26,860 --> 00:09:31,660
engine for billing and then invoice

00:09:29,020 --> 00:09:35,200
comes out so that's a typical cycle it

00:09:31,660 --> 00:09:37,170
could be even for your telecom that you

00:09:35,200 --> 00:09:40,180
make a call it is captured by that

00:09:37,170 --> 00:09:42,040
elements goes to a metering solution

00:09:40,180 --> 00:09:47,590
goes to a billing solution and you get

00:09:42,040 --> 00:09:51,940
your monthly invoice for just for fun

00:09:47,590 --> 00:09:55,030
sake I'll take the example of a feed

00:09:51,940 --> 00:09:57,540
there was a really really nice novel

00:09:55,030 --> 00:09:59,980
written by empty understand it's for

00:09:57,540 --> 00:10:03,760
really young adults but I still consider

00:09:59,980 --> 00:10:05,590
myself a young adult so I read it any

00:10:03,760 --> 00:10:11,260
guesses based on like just the picture

00:10:05,590 --> 00:10:15,670
what would that novel be about so this

00:10:11,260 --> 00:10:17,530
is about a world where the feed is real

00:10:15,670 --> 00:10:19,350
in the sense that there are no input

00:10:17,530 --> 00:10:21,580
devices and no output devices like

00:10:19,350 --> 00:10:23,110
keyboard for me is input device if I

00:10:21,580 --> 00:10:25,270
need to do a Google search I need to

00:10:23,110 --> 00:10:28,060
input from the keyboard and monitor is

00:10:25,270 --> 00:10:30,280
my output so I look at over here what if

00:10:28,060 --> 00:10:32,800
there was a chip implanted in my brain

00:10:30,280 --> 00:10:36,280
that I just think of do a Google search

00:10:32,800 --> 00:10:38,560
and then the results come back again to

00:10:36,280 --> 00:10:40,090
my brain no I mean that's a dutiful

00:10:38,560 --> 00:10:43,570
scenario I mean I don't know if you find

00:10:40,090 --> 00:10:45,820
it beautiful or not but it is so that

00:10:43,570 --> 00:10:50,260
novel happens over there it's a very

00:10:45,820 --> 00:10:53,200
small novel beautiful one so in this we

00:10:50,260 --> 00:10:54,970
will i took some inspiration for matrix

00:10:53,200 --> 00:10:56,590
and we will download a new skill so

00:10:54,970 --> 00:10:58,980
there's an api for download a new scale

00:10:56,590 --> 00:11:01,600
maybe I want to learn a new language

00:10:58,980 --> 00:11:03,370
play eye in mind game so just play a

00:11:01,600 --> 00:11:04,870
game in my mind that's an

00:11:03,370 --> 00:11:07,300
maybe a call that I will be making I

00:11:04,870 --> 00:11:09,310
want to monetize these calls and then

00:11:07,300 --> 00:11:11,560
maybe make a chat it could be a real

00:11:09,310 --> 00:11:13,690
chat happening in my mind again or it

00:11:11,560 --> 00:11:15,730
could be a simple I am messages but

00:11:13,690 --> 00:11:17,670
still happening in my mind right so

00:11:15,730 --> 00:11:21,520
these are the api's that I want to

00:11:17,670 --> 00:11:25,930
monetize it could be any api's frankly I

00:11:21,520 --> 00:11:28,690
mean it could be monetize how much run

00:11:25,930 --> 00:11:31,960
time I have used but just for fun let's

00:11:28,690 --> 00:11:36,850
let's let's use this when the fear is

00:11:31,960 --> 00:11:41,800
real so in this demo I have abacus

00:11:36,850 --> 00:11:44,260
running locally on my notebook I'll demo

00:11:41,800 --> 00:11:45,820
concepts of customer and measures on

00:11:44,260 --> 00:11:50,370
revenue cloud so I'll jump on to the

00:11:45,820 --> 00:11:50,370
revenue side I'll do some API usages

00:11:50,460 --> 00:11:55,150
submit some usages to CFA because

00:11:52,870 --> 00:12:00,010
running locally then I'll take a

00:11:55,150 --> 00:12:02,920
cinematic license meaning from CF abacus

00:12:00,010 --> 00:12:05,020
I need this collected usage to be sent

00:12:02,920 --> 00:12:08,080
to revenue cloud so typically this would

00:12:05,020 --> 00:12:09,880
happen using some some kind of a let's

00:12:08,080 --> 00:12:12,130
say integration solution some middleware

00:12:09,880 --> 00:12:14,530
broker I will just think that I am doing

00:12:12,130 --> 00:12:16,240
it right away and then usage will be

00:12:14,530 --> 00:12:18,250
sent to revenue cloud and invoice will

00:12:16,240 --> 00:12:25,900
be on that revenue cloud so let's jump

00:12:18,250 --> 00:12:30,850
right there let me start CFA because

00:12:25,900 --> 00:12:32,710
it's starting in demo mode I mean my

00:12:30,850 --> 00:12:37,030
little baby version of Siva because

00:12:32,710 --> 00:12:40,840
which is running a pout server so as I

00:12:37,030 --> 00:12:43,120
said it's no dot GSoC is just NPM dot

00:12:40,840 --> 00:12:45,190
start it starts bunch of services as

00:12:43,120 --> 00:12:48,010
long as mouse over the thing is running

00:12:45,190 --> 00:12:49,770
it's it's really really smart over here

00:12:48,010 --> 00:12:57,040
I mean the profile that I'm using is

00:12:49,770 --> 00:13:01,000
small now I want to send a usage so for

00:12:57,040 --> 00:13:03,220
that I'll need current time I'll mean

00:13:01,000 --> 00:13:05,830
being a geek we should all know what's

00:13:03,220 --> 00:13:11,260
the current time in epoch right but I'm

00:13:05,830 --> 00:13:13,420
ashamed of myself to copy from there so

00:13:11,260 --> 00:13:15,820
let's say this is the usage that I'm

00:13:13,420 --> 00:13:19,310
gonna send

00:13:15,820 --> 00:13:23,600
and you may be wondering like where did

00:13:19,310 --> 00:13:32,000
I get this format from this is legible

00:13:23,600 --> 00:13:36,950
yes so I'm going to just say this event

00:13:32,000 --> 00:13:40,130
happened right now as you can see I'm

00:13:36,950 --> 00:13:42,430
making sending some measures which is I

00:13:40,130 --> 00:13:46,640
am skilled download API calls and just

00:13:42,430 --> 00:13:49,940
all of them are 30 50 and 50 so now if I

00:13:46,640 --> 00:13:53,480
send it before that let's let's check

00:13:49,940 --> 00:13:55,370
something really quick so there's

00:13:53,480 --> 00:13:58,640
nothing over here no DB file exists

00:13:55,370 --> 00:14:00,230
means nothing because I just started CFA

00:13:58,640 --> 00:14:04,840
because it has not even created a

00:14:00,230 --> 00:14:07,610
database so when I submit this and

00:14:04,840 --> 00:14:10,370
that's the beauty of you know you always

00:14:07,610 --> 00:14:14,360
it's going to work or not but it luckily

00:14:10,370 --> 00:14:17,210
it worked so now if I go back over here

00:14:14,360 --> 00:14:19,940
I'm just checking all the docs something

00:14:17,210 --> 00:14:22,250
like MongoDB there are there so there is

00:14:19,940 --> 00:14:23,750
one usage that came over here of course

00:14:22,250 --> 00:14:26,150
now I can go further and check these

00:14:23,750 --> 00:14:29,480
values but this is just one value that

00:14:26,150 --> 00:14:31,550
got submitted in this so in Monk let's

00:14:29,480 --> 00:14:35,000
say bousley be one value have been

00:14:31,550 --> 00:14:37,790
inserted now typically this would happen

00:14:35,000 --> 00:14:40,670
over a month and you will get an

00:14:37,790 --> 00:14:42,950
aggregated report that you can see from

00:14:40,670 --> 00:14:45,470
again Ambika so I'm gonna make another

00:14:42,950 --> 00:14:48,920
call you can see it's two localhost and

00:14:45,470 --> 00:14:51,770
I have hard-coded these over here so I

00:14:48,920 --> 00:14:55,040
can if I do this then you can see that I

00:14:51,770 --> 00:14:56,990
am skilled download API call is 30 it

00:14:55,040 --> 00:15:00,760
even gives me the cost and I talked

00:14:56,990 --> 00:15:06,890
about why it gives me the cost then

00:15:00,760 --> 00:15:09,620
pricing for the another skill so skill

00:15:06,890 --> 00:15:11,480
download it because now how did see if I

00:15:09,620 --> 00:15:14,690
because know about it like all these how

00:15:11,480 --> 00:15:20,270
did I implement in my API calls for that

00:15:14,690 --> 00:15:25,130
I'll quickly go into code over here so

00:15:20,270 --> 00:15:27,470
if you clone CF abacus repository there

00:15:25,130 --> 00:15:28,279
are two particular directories that you

00:15:27,470 --> 00:15:30,740
just need to pay a time

00:15:28,279 --> 00:15:35,689
one is called provisioning plug-in and

00:15:30,740 --> 00:15:38,329
another is called mapping you can see

00:15:35,689 --> 00:15:41,899
that directory is a little bit over here

00:15:38,329 --> 00:15:44,899
so this is the root directory of when I

00:15:41,899 --> 00:15:48,290
cloned CF abacus and then lay plugins

00:15:44,899 --> 00:15:50,269
and provisioning and in that there is

00:15:48,290 --> 00:15:52,519
this provisioning and then if I go over

00:15:50,269 --> 00:15:55,279
here there is a plans directly this

00:15:52,519 --> 00:15:59,689
contains everything that I need to set

00:15:55,279 --> 00:16:02,360
up my plan which means if I look over

00:15:59,689 --> 00:16:04,309
here you can see I have defined three

00:16:02,360 --> 00:16:06,860
measures over here remember I was

00:16:04,309 --> 00:16:08,779
talking about three API calls to be

00:16:06,860 --> 00:16:11,149
monetized these are them as I could have

00:16:08,779 --> 00:16:14,629
called them you know Basel one Basel -

00:16:11,149 --> 00:16:16,759
Basel 3 but just for sake I mean

00:16:14,629 --> 00:16:19,759
description sake I call them this and

00:16:16,759 --> 00:16:23,199
that's what I need to send from my when

00:16:19,759 --> 00:16:28,610
I send that using the postman over here

00:16:23,199 --> 00:16:30,439
and similarly you define various other

00:16:28,610 --> 00:16:35,300
things over here so for example I can

00:16:30,439 --> 00:16:39,769
define pricing over here as you can see

00:16:35,300 --> 00:16:42,529
this is available in I am scale download

00:16:39,769 --> 00:16:46,129
API calls is available in USA Europe and

00:16:42,529 --> 00:16:47,050
Canada various prices now something to

00:16:46,129 --> 00:16:49,370
remember

00:16:47,050 --> 00:17:02,389
CFA because does a lot of things for you

00:16:49,370 --> 00:17:06,380
it does the metering because we are

00:17:02,389 --> 00:17:10,399
using the other engine which is as I

00:17:06,380 --> 00:17:12,649
said earlier revenue cloud for us so I

00:17:10,399 --> 00:17:16,209
am already logged in hopefully the

00:17:12,649 --> 00:17:19,280
session is still alive if not then okay

00:17:16,209 --> 00:17:24,220
so that session so I'm logged in to a

00:17:19,280 --> 00:17:27,079
revenue cloud it has a full let's say

00:17:24,220 --> 00:17:28,940
concept of creating courts so your sales

00:17:27,079 --> 00:17:31,190
people can create codes and submit to

00:17:28,940 --> 00:17:34,340
customer or which creates orders so I

00:17:31,190 --> 00:17:38,179
already have customer that I created

00:17:34,340 --> 00:17:40,320
over here the customer is called CF

00:17:38,179 --> 00:17:42,659
summit

00:17:40,320 --> 00:17:49,110
I'm gonna use this to create a code

00:17:42,659 --> 00:17:51,720
quickly and so if I put this this is not

00:17:49,110 --> 00:17:55,889
going to take me too much time valid

00:17:51,720 --> 00:17:59,370
from here to here and I want to put a

00:17:55,889 --> 00:18:01,919
product so I had created three products

00:17:59,370 --> 00:18:04,139
in the back again in masks in

00:18:01,919 --> 00:18:06,210
configuration so you can see I am

00:18:04,139 --> 00:18:08,309
skilled downloads I am gameplay and chat

00:18:06,210 --> 00:18:12,029
for this I'll just use I am skills

00:18:08,309 --> 00:18:14,639
download and it's just quantity one when

00:18:12,029 --> 00:18:16,559
do I want it to be valid subscription to

00:18:14,639 --> 00:18:18,679
be valid from first October these

00:18:16,559 --> 00:18:21,899
validities becomes tricky when you are

00:18:18,679 --> 00:18:24,360
implementing these solutions typically

00:18:21,899 --> 00:18:27,509
all of this happens using API calls

00:18:24,360 --> 00:18:29,789
just for demonstration doing it from the

00:18:27,509 --> 00:18:31,679
UI most of the time you are provisioning

00:18:29,789 --> 00:18:37,679
system will setup these using API calls

00:18:31,679 --> 00:18:40,049
so now I'll save this code so right now

00:18:37,679 --> 00:18:46,230
I'm playing the part of a sales guy I am

00:18:40,049 --> 00:18:49,080
going to say release it then send it to

00:18:46,230 --> 00:18:52,320
customer these are all basic you know

00:18:49,080 --> 00:18:54,090
processes that happen maybe over a week

00:18:52,320 --> 00:18:56,639
period except by the customer I'm

00:18:54,090 --> 00:18:59,610
accepting on his behalf or her behalf

00:18:56,639 --> 00:19:01,200
and now it's like customer has accepted

00:18:59,610 --> 00:19:04,230
and I'm going to send and create an

00:19:01,200 --> 00:19:06,149
order that's the real order process I'm

00:19:04,230 --> 00:19:08,429
gonna use invoice it could be a credit

00:19:06,149 --> 00:19:12,779
card order also so far the only support

00:19:08,429 --> 00:19:15,570
in wise and over here the order actually

00:19:12,779 --> 00:19:23,789
creates a subscription so if I go back

00:19:15,570 --> 00:19:25,710
and look at my order so this was the

00:19:23,789 --> 00:19:28,919
order that I just created as you can see

00:19:25,710 --> 00:19:32,669
there's a this thing over here takes a

00:19:28,919 --> 00:19:35,820
little bit a 1 minute or so to create it

00:19:32,669 --> 00:19:37,850
into a subscription so any questions so

00:19:35,820 --> 00:19:37,850
far

00:19:40,560 --> 00:19:50,610
and it is created a subscription so if I

00:19:46,080 --> 00:19:52,290
look over here that's my subscription

00:19:50,610 --> 00:19:56,100
I'm looking for one particular ID over

00:19:52,290 --> 00:19:59,940
here so the measure that I'm going to

00:19:56,100 --> 00:20:05,580
send in my earlier talk in my the CF

00:19:59,940 --> 00:20:09,540
abacus session I talked about I am calls

00:20:05,580 --> 00:20:12,570
and game calls or chat calls right in

00:20:09,540 --> 00:20:14,760
this over here I'm just saying API call

00:20:12,570 --> 00:20:18,960
because I already know that this is the

00:20:14,760 --> 00:20:26,270
I am skills download now I will go into

00:20:18,960 --> 00:20:32,880
my postman and send a usage or sender

00:20:26,270 --> 00:20:36,000
let's say this particular in Y the this

00:20:32,880 --> 00:20:39,590
particular usage to be invoiced I needed

00:20:36,000 --> 00:20:42,660
this be error token so let's get that

00:20:39,590 --> 00:20:49,170
because otherwise I won't be

00:20:42,660 --> 00:20:55,560
authenticated so in the header let me

00:20:49,170 --> 00:20:57,770
put this token over here now I'm making

00:20:55,560 --> 00:20:57,770
a

00:21:01,389 --> 00:21:10,429
call API call and I'll use that this UID

00:21:06,019 --> 00:21:12,499
so that I only make this call so it gets

00:21:10,429 --> 00:21:18,950
attached to that so let's put this over

00:21:12,499 --> 00:21:21,499
here and last time we made 50 calls in a

00:21:18,950 --> 00:21:24,830
month so let's send that so now this is

00:21:21,499 --> 00:21:30,350
being sent to for billing or invoicing

00:21:24,830 --> 00:21:36,730
right so here I send this and it is sent

00:21:30,350 --> 00:21:36,730
I can show over here if I go into

00:21:37,869 --> 00:21:41,019
billing data

00:21:44,960 --> 00:21:51,409
this customer right over here the call

00:21:47,720 --> 00:21:55,460
was for $1 and I made 50 calls I can

00:21:51,409 --> 00:22:00,159
send some more and just bill at the end

00:21:55,460 --> 00:22:09,640
of the month so if I add let's say a

00:22:00,159 --> 00:22:09,640
really nice number 42 and now look at it

00:22:14,149 --> 00:22:20,109
hmmm it's so writing so I am doing

00:22:16,669 --> 00:22:20,109
something wrong maybe I'm sending

00:22:20,679 --> 00:22:26,859
alright that's what happened in live

00:22:22,579 --> 00:22:26,859
demos no need to worry

00:22:30,930 --> 00:22:34,920
all right I'm not going to worry about

00:22:32,340 --> 00:22:37,830
too much for that so what finally these

00:22:34,920 --> 00:22:39,930
are aggregated and sent as an invoice

00:22:37,830 --> 00:22:43,500
and to the customer based on the

00:22:39,930 --> 00:22:46,860
frequency that you have developed so we

00:22:43,500 --> 00:22:49,950
started with the API calls in your

00:22:46,860 --> 00:22:53,310
application which can call certain CFM

00:22:49,950 --> 00:22:55,500
because API is that will be metered

00:22:53,310 --> 00:22:58,440
inside CFM occurs you take those

00:22:55,500 --> 00:23:00,000
aggregated records and either you can

00:22:58,440 --> 00:23:01,410
keep sending every day at the end of the

00:23:00,000 --> 00:23:03,810
day or you can aggregate and just send

00:23:01,410 --> 00:23:06,120
them once in a month and then it gets

00:23:03,810 --> 00:23:09,030
into the engine which will generate

00:23:06,120 --> 00:23:11,280
invoices for your customer and then

00:23:09,030 --> 00:23:16,380
further processes follow so that's the

00:23:11,280 --> 00:23:18,120
basic flow of sending API API

00:23:16,380 --> 00:23:20,760
monetization calls to air because two

00:23:18,120 --> 00:23:30,290
revenue engines there was all I wanted

00:23:20,760 --> 00:23:30,290
to cover in this any questions yep

00:23:36,890 --> 00:23:43,290
okay yeah yeah so a good question

00:23:41,040 --> 00:23:46,860
see if abacus comes with a service

00:23:43,290 --> 00:23:48,390
broker for Cloud Foundry so it you can

00:23:46,860 --> 00:23:50,760
install that service broker with your

00:23:48,390 --> 00:23:55,830
Cloud Foundry and then you use that

00:23:50,760 --> 00:23:57,960
service so it's you get it directly from

00:23:55,830 --> 00:24:01,700
Cloud Foundry that usage so it

00:23:57,960 --> 00:24:04,470
integrates that way so it's not even a

00:24:01,700 --> 00:24:06,900
push or pull Bay you can say it's pull

00:24:04,470 --> 00:24:08,400
based bye-bye abacus itself based on

00:24:06,900 --> 00:24:13,920
certain frequency because it will use

00:24:08,400 --> 00:24:17,430
that broker that's for CF itself so if

00:24:13,920 --> 00:24:19,140
you are api's are all or if your

00:24:17,430 --> 00:24:22,710
consumption is totally inside Cloud

00:24:19,140 --> 00:24:25,830
Foundry then that that works great if it

00:24:22,710 --> 00:24:36,450
is outside then you need to call API is

00:24:25,830 --> 00:24:38,070
to CF abacus any further questions all

00:24:36,450 --> 00:24:41,930
right if no more questions then thanks

00:24:38,070 --> 00:24:45,709
for thanks for the annual session yeah

00:24:41,930 --> 00:24:45,709

YouTube URL: https://www.youtube.com/watch?v=-evPNYAJGEU


