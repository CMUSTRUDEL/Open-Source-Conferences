Title: The New Way to BOSH Deploy - Urvashi Reddy, Pivotal
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	The New Way to BOSH Deploy - Urvashi Reddy, Pivotal

Before BOSH 2.0, curating deployments required a great deal of orchestration from experienced users of BOSH. Often this was in the form of complex and fragile manifest generation scripts. BOSH 2.0 introduced a simple yet powerful feature for deploying: operations files. In this talk, we will take a deep dive into how to use operations files effectively and utilize them to create a variety of BOSH deployments with ease. Attendees will gain insight on best practices for authoring ops-files, as well as how they fit into a typical deployment workflow.

About Urvashi Reddy
Urvashi Reddy is a Software Engineer at Pivotal. She is currently the anchor for the Dedicated MySQL team. This team is responsible for creating and maintaining Version 2 of MySQL for PCF which provides on demand service instances. Urvashi was a speaker at both the Berlin and Frankfurt Cloud Foundry Summits.
Captions: 
	00:00:00,000 --> 00:00:07,680
all right hello everyone my name is

00:00:04,560 --> 00:00:10,769
Arash ready I am a software engineer at

00:00:07,680 --> 00:00:12,450
Cloud Foundry I currently work on a

00:00:10,769 --> 00:00:15,540
closed source team called dedicated my

00:00:12,450 --> 00:00:18,930
sequel it's the version 2 of my sequel

00:00:15,540 --> 00:00:20,430
for PCF just commercial but I'm going to

00:00:18,930 --> 00:00:27,990
talk about open source stuff today and

00:00:20,430 --> 00:00:30,179
that's Bosh's operation files so why

00:00:27,990 --> 00:00:33,630
should we care about operation files I

00:00:30,179 --> 00:00:35,969
really think that in Bosh - oh we got a

00:00:33,630 --> 00:00:38,520
whole subset of new features and new

00:00:35,969 --> 00:00:41,010
things that we could use and although

00:00:38,520 --> 00:00:43,500
ops files is just a slice of that

00:00:41,010 --> 00:00:45,539
feature set in Bosh - it's really

00:00:43,500 --> 00:00:48,390
versatile and it's changed I think as a

00:00:45,539 --> 00:00:50,489
Bosch release author and as consumer how

00:00:48,390 --> 00:00:54,629
I think about what should go inside of

00:00:50,489 --> 00:00:56,399
my release repository I think that we

00:00:54,629 --> 00:00:58,199
need to start establishing a common

00:00:56,399 --> 00:01:00,149
language about how we talk about these

00:00:58,199 --> 00:01:02,100
ops files because they are so versatile

00:01:00,149 --> 00:01:03,660
we could just go off and start using

00:01:02,100 --> 00:01:05,850
them in a number of which ways which

00:01:03,660 --> 00:01:08,430
could further complicate our platform

00:01:05,850 --> 00:01:10,920
which I think already is difficult for

00:01:08,430 --> 00:01:12,689
deploying so I'm hoping that the purpose

00:01:10,920 --> 00:01:15,150
of my talk is to start engaging in some

00:01:12,689 --> 00:01:18,420
of those conversations so that we can

00:01:15,150 --> 00:01:20,070
talk about better ways to use ops files

00:01:18,420 --> 00:01:22,530
and maybe share some of the patterns

00:01:20,070 --> 00:01:24,810
that we're already using and a little

00:01:22,530 --> 00:01:27,630
bit about our project dedicated my

00:01:24,810 --> 00:01:30,060
sequel we started the project it was

00:01:27,630 --> 00:01:32,100
green fielded about a year ago and since

00:01:30,060 --> 00:01:33,689
we didn't have a legacy code base or

00:01:32,100 --> 00:01:36,090
really any consumers at this time it was

00:01:33,689 --> 00:01:39,630
brand-new we started - we had a unique

00:01:36,090 --> 00:01:41,400
opportunity to start using bashed 200

00:01:39,630 --> 00:01:43,920
when it was still experimental

00:01:41,400 --> 00:01:45,240
along with ops files so over the past

00:01:43,920 --> 00:01:47,340
year that I've been working on this

00:01:45,240 --> 00:01:49,860
project I really see an ops file

00:01:47,340 --> 00:01:51,509
specifically expand and people start

00:01:49,860 --> 00:01:53,100
developing different patterns across the

00:01:51,509 --> 00:01:54,689
co-founder for about how they're using

00:01:53,100 --> 00:01:57,030
them so I'm here to share about how we

00:01:54,689 --> 00:01:58,740
use them on our project as well as some

00:01:57,030 --> 00:02:03,360
other things other really good things I

00:01:58,740 --> 00:02:06,509
think the community is starting to do so

00:02:03,360 --> 00:02:08,580
in order to like remember the world

00:02:06,509 --> 00:02:10,560
before ops files which was a year ago

00:02:08,580 --> 00:02:13,210
for me I had to go back and look at what

00:02:10,560 --> 00:02:15,910
manifest generation for your

00:02:13,210 --> 00:02:17,680
it looked like some apologies if this is

00:02:15,910 --> 00:02:20,290
small but I'm gonna highlight some of

00:02:17,680 --> 00:02:22,900
those so I used to be a member of the

00:02:20,290 --> 00:02:25,240
co-founder API team and we used the

00:02:22,900 --> 00:02:28,450
script pretty regularly what it did was

00:02:25,240 --> 00:02:30,130
generate a manifest for a bunch of use

00:02:28,450 --> 00:02:31,480
cases including for our Bosch light

00:02:30,130 --> 00:02:33,400
environments which is where we would do

00:02:31,480 --> 00:02:35,740
regular development every single day and

00:02:33,400 --> 00:02:37,540
as a developer on that team I just kind

00:02:35,740 --> 00:02:39,310
of used the script so maybe once or

00:02:37,540 --> 00:02:40,930
twice a week and if I ever had to edit

00:02:39,310 --> 00:02:42,280
it I knew it was gonna be a mu nightmare

00:02:40,930 --> 00:02:44,170
because I was gonna have to go in too

00:02:42,280 --> 00:02:45,730
deep in the weeds of using spiff and

00:02:44,170 --> 00:02:47,980
some templating logic that I knew was

00:02:45,730 --> 00:02:49,630
gonna be a type of sync and not actually

00:02:47,980 --> 00:02:52,330
advance on creating the feature that I

00:02:49,630 --> 00:02:55,210
wanted for the release so taking a look

00:02:52,330 --> 00:02:57,490
at this manifest generation script first

00:02:55,210 --> 00:03:00,550
thing I remembered was that you had to

00:02:57,490 --> 00:03:03,910
check if this external tool spiff was

00:03:00,550 --> 00:03:05,650
installed the nice thing about bosch 2

00:03:03,910 --> 00:03:12,820
and ops files is that there's native

00:03:05,650 --> 00:03:14,170
support for it in the new go leg CLI the

00:03:12,820 --> 00:03:16,270
other thing I notice is that there was a

00:03:14,170 --> 00:03:18,340
lot of like spaghetti bash there's a

00:03:16,270 --> 00:03:20,980
conditional here that's checking for

00:03:18,340 --> 00:03:22,750
which type of infrastructure that you

00:03:20,980 --> 00:03:24,880
could be using for your deployment

00:03:22,750 --> 00:03:27,490
manifest and based on that it's gonna

00:03:24,880 --> 00:03:30,810
bring in somewhere along the lines of

00:03:27,490 --> 00:03:32,650
like 500 lines of yeah moles to

00:03:30,810 --> 00:03:35,710
incorporate into your deployment

00:03:32,650 --> 00:03:38,950
manifest so I think that in ops files we

00:03:35,710 --> 00:03:40,840
got a chance to have less redundancy I'm

00:03:38,950 --> 00:03:42,820
going to show that in an example later

00:03:40,840 --> 00:03:46,150
on but essentially like you don't have

00:03:42,820 --> 00:03:48,580
to have a copy of your manifest for AWS

00:03:46,150 --> 00:03:50,680
for GC PE for like all of the various

00:03:48,580 --> 00:03:52,330
use cases it's not just is specific you

00:03:50,680 --> 00:03:55,150
can start using ops files which will be

00:03:52,330 --> 00:03:56,440
snippets and it's confined to you know

00:03:55,150 --> 00:03:57,700
here the properties that I need towards

00:03:56,440 --> 00:04:02,470
a concept that you could then

00:03:57,700 --> 00:04:05,460
interpolate into a larger manifest and I

00:04:02,470 --> 00:04:08,860
mentioned like having a download sniff

00:04:05,460 --> 00:04:11,020
sniff is like notoriously difficult to

00:04:08,860 --> 00:04:13,480
understand and it was kind of like this

00:04:11,020 --> 00:04:15,130
black box where it just was like give me

00:04:13,480 --> 00:04:17,350
your llamo and I will merge them

00:04:15,130 --> 00:04:20,380
together and at deploy time maybe you'll

00:04:17,350 --> 00:04:21,310
find out if it works or not so this is

00:04:20,380 --> 00:04:22,720
what I was talking about when I said as

00:04:21,310 --> 00:04:23,380
a developer on this team I really didn't

00:04:22,720 --> 00:04:25,780
want to have to

00:04:23,380 --> 00:04:27,910
like edit this thing I knew that I was

00:04:25,780 --> 00:04:29,710
going to spend a lot of time manually

00:04:27,910 --> 00:04:31,450
looking through and visually tried to

00:04:29,710 --> 00:04:34,080
verify whether the manifest that was

00:04:31,450 --> 00:04:37,480
merged out of spiff was actually correct

00:04:34,080 --> 00:04:39,340
so I think that with Bosch too and with

00:04:37,480 --> 00:04:42,820
ops files we got simplified templating

00:04:39,340 --> 00:04:44,620
logic and you're probably thinking what

00:04:42,820 --> 00:04:46,300
is simplified templating object I don't

00:04:44,620 --> 00:04:47,290
think that exists especially in cloud

00:04:46,300 --> 00:04:49,330
foundry when you're dealing with

00:04:47,290 --> 00:04:50,680
thousands of VMO but I will show you

00:04:49,330 --> 00:04:54,730
some examples and maybe you guys can

00:04:50,680 --> 00:04:55,810
tell me whether or not that's real okay

00:04:54,730 --> 00:04:59,110
so throughout my talk I'm going to be

00:04:55,810 --> 00:05:00,760
using this example and start to break it

00:04:59,110 --> 00:05:02,620
down and just show you like a common use

00:05:00,760 --> 00:05:04,630
case of using ops files so this is a

00:05:02,620 --> 00:05:06,370
deploy task that as a developer on my

00:05:04,630 --> 00:05:09,100
team I would use it's very simplified

00:05:06,370 --> 00:05:11,560
for this talk but basically I'm trying

00:05:09,100 --> 00:05:13,900
to deploy in my sequel service broker

00:05:11,560 --> 00:05:16,300
you can tell that I'm bringing in an ops

00:05:13,900 --> 00:05:17,890
file that says Bosch light on it so

00:05:16,300 --> 00:05:19,870
there's probably something specific to

00:05:17,890 --> 00:05:22,360
Bosch light in there and then another

00:05:19,870 --> 00:05:27,490
obstacle for enabling syslog to my

00:05:22,360 --> 00:05:29,740
service broker the use case for this

00:05:27,490 --> 00:05:32,140
task I should mention this deploy task

00:05:29,740 --> 00:05:33,520
is for a person like me who's on my team

00:05:32,140 --> 00:05:35,830
was just trying to iterate on this

00:05:33,520 --> 00:05:38,320
broker and create a new feature on it so

00:05:35,830 --> 00:05:39,910
I just want the quickest thing to get a

00:05:38,320 --> 00:05:41,140
service broker up and running maybe I

00:05:39,910 --> 00:05:42,850
have some integration tests or something

00:05:41,140 --> 00:05:44,860
that I want want to run later down the

00:05:42,850 --> 00:05:49,000
line that are related to syslog which is

00:05:44,860 --> 00:05:50,320
why I'm doing this deploy so the first

00:05:49,000 --> 00:05:52,630
thing that I really like about the new

00:05:50,320 --> 00:05:54,580
way to deploy with these ops files is

00:05:52,630 --> 00:05:56,290
that you have this concept of a base

00:05:54,580 --> 00:05:59,110
manifest and that's the first argument

00:05:56,290 --> 00:06:00,820
to your deploy I don't think a minimal

00:05:59,110 --> 00:06:02,410
deployment is new to Cloud Foundry

00:06:00,820 --> 00:06:04,570
because I've definitely seen that in

00:06:02,410 --> 00:06:06,940
other projects prior to Bosch 2 but I

00:06:04,570 --> 00:06:08,830
think we've elevated it and made it a

00:06:06,940 --> 00:06:10,600
first-class citizen and really forced

00:06:08,830 --> 00:06:13,330
Bosch release authors to think about

00:06:10,600 --> 00:06:16,030
what is the most basic deployment that I

00:06:13,330 --> 00:06:18,400
can do of your thing and without any

00:06:16,030 --> 00:06:19,840
frills just to get up and running so

00:06:18,400 --> 00:06:21,730
really thinking about that and not

00:06:19,840 --> 00:06:23,460
bringing every single property that

00:06:21,730 --> 00:06:27,390
needs to be a part of that manifestation

00:06:23,460 --> 00:06:29,460
along for the ride and then I have my

00:06:27,390 --> 00:06:31,920
ops files which I'm gonna dig into what

00:06:29,460 --> 00:06:34,290
they have inside of them but they're

00:06:31,920 --> 00:06:37,350
layering on additional configurations to

00:06:34,290 --> 00:06:39,330
my base manifest and one thing that you

00:06:37,350 --> 00:06:42,420
may notice is that the naval syslog file

00:06:39,330 --> 00:06:44,490
is kind of it's the way that it's named

00:06:42,420 --> 00:06:46,110
is very action based so I'm enabling

00:06:44,490 --> 00:06:47,700
syslog you could imagine there'd be

00:06:46,110 --> 00:06:49,800
other ops files that are disabling

00:06:47,700 --> 00:06:51,690
syslog if that was what was it my

00:06:49,800 --> 00:06:53,670
minimal deployment you always got that

00:06:51,690 --> 00:06:55,410
so it's additional configuration that

00:06:53,670 --> 00:06:57,270
you're adding in and it's very

00:06:55,410 --> 00:06:59,340
actionable so it makes sense from like a

00:06:57,270 --> 00:07:01,050
high level what's going on in there and

00:06:59,340 --> 00:07:02,850
if you're curious exactly how our name

00:07:01,050 --> 00:07:04,800
looks a slug as a consumer of that

00:07:02,850 --> 00:07:09,300
deployment you would dig into that

00:07:04,800 --> 00:07:10,860
office file one thing I want to mention

00:07:09,300 --> 00:07:13,710
here this is goes back to the need of

00:07:10,860 --> 00:07:15,870
support in the wash to CLI is that you

00:07:13,710 --> 00:07:17,310
can use the deploy command which will

00:07:15,870 --> 00:07:19,680
interpolate your manifest but there's

00:07:17,310 --> 00:07:21,270
also a Bosch interpolate command which

00:07:19,680 --> 00:07:22,860
is nice because then you can see pretty

00:07:21,270 --> 00:07:25,470
quickly what your manifest is going to

00:07:22,860 --> 00:07:28,230
turn into without actually having to go

00:07:25,470 --> 00:07:30,840
ahead with a deploy there's also this

00:07:28,230 --> 00:07:32,550
really nice flag that you can pass

00:07:30,840 --> 00:07:35,310
through it called - path and you can

00:07:32,550 --> 00:07:38,570
take any yamo file and what Bosch will

00:07:35,310 --> 00:07:40,860
do is traverse that manoa manifest file

00:07:38,570 --> 00:07:43,260
with the path that you have specified

00:07:40,860 --> 00:07:45,240
and pull out the value of the property

00:07:43,260 --> 00:07:47,610
that you have given so in this specific

00:07:45,240 --> 00:07:49,950
case that I have an instance groups

00:07:47,610 --> 00:07:51,750
service broker everything under service

00:07:49,950 --> 00:07:53,550
Boca is gonna get spit back I really

00:07:51,750 --> 00:07:56,280
like using this one I'm iterating on an

00:07:53,550 --> 00:07:58,050
ops file it makes me double-check like

00:07:56,280 --> 00:08:01,140
that I have my pass sets correctly and

00:07:58,050 --> 00:08:04,680
that I have the expected like output

00:08:01,140 --> 00:08:06,870
when I'm running this path okay

00:08:04,680 --> 00:08:08,640
let's go into the the two types of

00:08:06,870 --> 00:08:09,180
operations that we have inside of an ops

00:08:08,640 --> 00:08:13,350
file

00:08:09,180 --> 00:08:16,020
so there's remove and replace remove is

00:08:13,350 --> 00:08:18,750
pretty simple so this is my boss flight

00:08:16,020 --> 00:08:20,730
ops file and I'm deploying a my sequel

00:08:18,750 --> 00:08:22,350
service broker and it's on Vash late so

00:08:20,730 --> 00:08:24,570
I don't really care about it having a

00:08:22,350 --> 00:08:27,000
persistent disk so this is a great use

00:08:24,570 --> 00:08:30,060
case for that specific environment so I

00:08:27,000 --> 00:08:32,070
want to go and find the value of the

00:08:30,060 --> 00:08:34,230
persistent disk in my manifest and just

00:08:32,070 --> 00:08:35,630
remove it so I'm specifying the type of

00:08:34,230 --> 00:08:39,260
operation and the

00:08:35,630 --> 00:08:43,910
type field and then the path at which

00:08:39,260 --> 00:08:45,920
that property is going to exist so when

00:08:43,910 --> 00:08:48,170
I run interpolate or deploy what's going

00:08:45,920 --> 00:08:49,700
to happen to my base manifest is that

00:08:48,170 --> 00:08:51,560
it's going to traverse that manifests

00:08:49,700 --> 00:08:56,320
and find exactly where persistent disk

00:08:51,560 --> 00:08:59,630
is and do the operation of removing it

00:08:56,320 --> 00:09:01,280
pretty straightforward replaces where

00:08:59,630 --> 00:09:04,700
you can kind of do the more interesting

00:09:01,280 --> 00:09:06,830
stuff so if you have a value that you

00:09:04,700 --> 00:09:09,920
want to replace in the manifest you can

00:09:06,830 --> 00:09:11,690
use the operation replace and similarly

00:09:09,920 --> 00:09:14,990
you give it the path to the property

00:09:11,690 --> 00:09:16,820
that you want to change so for my

00:09:14,990 --> 00:09:18,920
service broker that's gonna be on Bosch

00:09:16,820 --> 00:09:20,240
light I want it to be the tiniest thing

00:09:18,920 --> 00:09:23,150
possible because I'm just trying to get

00:09:20,240 --> 00:09:25,730
quick and up and running so I want to

00:09:23,150 --> 00:09:27,530
scale down my usually minimal deployment

00:09:25,730 --> 00:09:31,790
that's highly available and has multiple

00:09:27,530 --> 00:09:33,500
instances over to just one so same thing

00:09:31,790 --> 00:09:35,180
as with remove it's going to find the

00:09:33,500 --> 00:09:38,300
path that I specified in my base

00:09:35,180 --> 00:09:42,130
manifest for my sequel broker take that

00:09:38,300 --> 00:09:42,130
instance property and replace it to two

00:09:44,050 --> 00:09:51,440
so then I also had that enable syslog

00:09:47,500 --> 00:09:55,190
example there sorry enable syslog ops

00:09:51,440 --> 00:09:57,230
file and the what I like doing with

00:09:55,190 --> 00:09:59,510
these replace commands is being able to

00:09:57,230 --> 00:10:01,940
enable features as I said so for syslog

00:09:59,510 --> 00:10:03,950
it's an optional thing that may or may

00:10:01,940 --> 00:10:05,930
not be wanted inside of that broker and

00:10:03,950 --> 00:10:07,430
as a developer maybe I'm testing out so

00:10:05,930 --> 00:10:09,290
slugga as I said as for an integration

00:10:07,430 --> 00:10:12,830
test so I just want to quickly put that

00:10:09,290 --> 00:10:15,590
into my deployment so jobs is an array

00:10:12,830 --> 00:10:17,870
and the Bosch manifest and I can use

00:10:15,590 --> 00:10:23,000
this - syntax to say that I'm appending

00:10:17,870 --> 00:10:26,570
to an array and then I can specify the

00:10:23,000 --> 00:10:30,050
job syslog forwarder and start adding

00:10:26,570 --> 00:10:32,090
that to the manifest there's also you

00:10:30,050 --> 00:10:34,820
can use numerical syntax here as well

00:10:32,090 --> 00:10:39,170
like to the for the 0th index element

00:10:34,820 --> 00:10:43,610
things like that I'm also using variable

00:10:39,170 --> 00:10:45,080
syntax here which is pretty nice

00:10:43,610 --> 00:10:47,089
especially for something like this you

00:10:45,080 --> 00:10:48,930
can imagine that in the enables syslog

00:10:47,089 --> 00:10:51,240
ops file could be

00:10:48,930 --> 00:10:52,949
not only for Bosch light for various

00:10:51,240 --> 00:10:55,439
other circumstances like a production

00:10:52,949 --> 00:10:57,089
environment and for that I would want to

00:10:55,439 --> 00:11:01,050
replace some of these variable values

00:10:57,089 --> 00:11:04,769
with actual addresses instead of like

00:11:01,050 --> 00:11:07,019
fake addresses from my Bosch light so as

00:11:04,769 --> 00:11:09,149
you probably may have heard in Dan's

00:11:07,019 --> 00:11:11,639
talk is that you can actually have vos

00:11:09,149 --> 00:11:13,259
generate these variables if you specify

00:11:11,639 --> 00:11:15,569
the type so if you had something like

00:11:13,259 --> 00:11:17,040
not necessarily personal address but if

00:11:15,569 --> 00:11:18,449
you had a password type or something you

00:11:17,040 --> 00:11:19,980
could specify that in the variable

00:11:18,449 --> 00:11:21,720
section of your manifest and Bosch would

00:11:19,980 --> 00:11:23,999
generate it for you or you can just

00:11:21,720 --> 00:11:26,790
specify it on the command line and one

00:11:23,999 --> 00:11:28,559
tip that I have for this is to whenever

00:11:26,790 --> 00:11:32,459
you're running Bosch deploy or Bosch

00:11:28,559 --> 00:11:35,069
interpolate to use - - VAR errors this

00:11:32,459 --> 00:11:36,929
will actually catch any variables that

00:11:35,069 --> 00:11:38,879
haven't been interpolated or filled in

00:11:36,929 --> 00:11:40,649
because what ends up happening is that

00:11:38,879 --> 00:11:42,839
if you just straight-up use this and

00:11:40,649 --> 00:11:44,730
forgot to specify so slug address it

00:11:42,839 --> 00:11:46,470
would just show up as the string parens

00:11:44,730 --> 00:11:49,019
prints the slug address in your manifest

00:11:46,470 --> 00:11:50,879
and you wouldn't find out until that

00:11:49,019 --> 00:11:56,399
variable is actually getting exercise

00:11:50,879 --> 00:11:57,839
maybe somewhere in the deploy so enable

00:11:56,399 --> 00:12:00,480
syslog is just gonna come in here and

00:11:57,839 --> 00:12:07,259
just shove this information into the

00:12:00,480 --> 00:12:09,360
jobs array which is nice and one other

00:12:07,259 --> 00:12:13,889
syntax that I wanted to go over for this

00:12:09,360 --> 00:12:15,569
is the question mark syntax so if for

00:12:13,889 --> 00:12:17,160
some reason I just wasn't sure whether

00:12:15,569 --> 00:12:18,509
this is logged forward or job had

00:12:17,160 --> 00:12:21,449
already been a part of the manifest or

00:12:18,509 --> 00:12:23,279
not I could use this question mark to

00:12:21,449 --> 00:12:27,290
say hey Bosch check for the existence of

00:12:23,279 --> 00:12:29,399
that job and if it's not there at it and

00:12:27,290 --> 00:12:30,749
what's nice about this question mark is

00:12:29,399 --> 00:12:32,249
that it carries over to the rest of the

00:12:30,749 --> 00:12:33,509
path so I don't have to sprinkle in

00:12:32,249 --> 00:12:35,069
question marks throughout the entire

00:12:33,509 --> 00:12:37,049
path if there was more than just going

00:12:35,069 --> 00:12:40,410
on beyond release it'll just continue to

00:12:37,049 --> 00:12:42,720
add it and it serves well for situations

00:12:40,410 --> 00:12:44,850
like this if I want it to one-off use my

00:12:42,720 --> 00:12:46,860
own custom syslog release I could go in

00:12:44,850 --> 00:12:48,509
and just change that value and this

00:12:46,860 --> 00:12:53,029
could be a standalone ops file in itself

00:12:48,509 --> 00:12:53,029
or a part of the enable syslog ops file

00:12:55,600 --> 00:13:03,800
so I think this task is a little

00:12:59,000 --> 00:13:05,630
misleading because it has it seems like

00:13:03,800 --> 00:13:07,880
all of these properties are confined

00:13:05,630 --> 00:13:09,530
into their own ops files and they're

00:13:07,880 --> 00:13:12,500
kind of operating independent of each

00:13:09,530 --> 00:13:14,480
other when in fact you as the deployment

00:13:12,500 --> 00:13:16,760
curator actually need to know the

00:13:14,480 --> 00:13:19,880
specifics of what's going on in each ops

00:13:16,760 --> 00:13:21,890
file so that you don't end up over

00:13:19,880 --> 00:13:24,590
overriding any properties in subsequent

00:13:21,890 --> 00:13:27,680
offs files so this is an order dependent

00:13:24,590 --> 00:13:30,440
command and although it's nicely kind of

00:13:27,680 --> 00:13:32,390
seemingly separating concerns you still

00:13:30,440 --> 00:13:34,730
may end up in a situation where you are

00:13:32,390 --> 00:13:37,670
overriding for example in my boss flight

00:13:34,730 --> 00:13:39,380
I'm removing the persistent disk but for

00:13:37,670 --> 00:13:41,630
very very valid reasons I could also

00:13:39,380 --> 00:13:43,850
want to add a persistent disk in my

00:13:41,630 --> 00:13:45,170
enable syslog ops file so the result

00:13:43,850 --> 00:13:46,790
would be that I would end up with one

00:13:45,170 --> 00:13:49,130
I'm not doing that currently but that's

00:13:46,790 --> 00:13:51,500
something me as the deployment curator

00:13:49,130 --> 00:13:54,020
is in charge of right like I have all

00:13:51,500 --> 00:13:55,460
these ops files at my disposal once that

00:13:54,020 --> 00:13:57,470
I've written myself once that are part

00:13:55,460 --> 00:13:59,030
of the boss release themselves you you

00:13:57,470 --> 00:14:00,680
can't just based on the name start

00:13:59,030 --> 00:14:01,820
pulling together and and have a

00:14:00,680 --> 00:14:05,630
deployment you really need to think

00:14:01,820 --> 00:14:07,400
about how its orchestrated okay so to

00:14:05,630 --> 00:14:10,010
recap in my example we have a base

00:14:07,400 --> 00:14:12,530
manifest of a Bosch flight ops file and

00:14:10,010 --> 00:14:15,320
an enable syslog ops file so the Bosch

00:14:12,530 --> 00:14:18,080
light one is scaling down and removing

00:14:15,320 --> 00:14:20,830
the persistent disk and then my syslog

00:14:18,080 --> 00:14:23,060
one is adding a syslog forward or job

00:14:20,830 --> 00:14:26,590
but what if you wanted to configure

00:14:23,060 --> 00:14:29,090
syslog specifically for bashed light

00:14:26,590 --> 00:14:36,380
what do I mean by that

00:14:29,090 --> 00:14:39,530
so this is a great episode so a syslog

00:14:36,380 --> 00:14:43,130
furbish light if you've seen the open

00:14:39,530 --> 00:14:45,200
source syslog release just like

00:14:43,130 --> 00:14:47,120
bas-reliefs there's an optional job that

00:14:45,200 --> 00:14:49,280
you can pass to it called syslog store

00:14:47,120 --> 00:14:52,910
and it has a very valid use case

00:14:49,280 --> 00:14:54,650
especially for testing so if i've

00:14:52,910 --> 00:14:56,960
configured my syslog forward or job

00:14:54,650 --> 00:14:58,820
correctly I want to see that those lots

00:14:56,960 --> 00:15:01,280
are actually ending up somewhere you'd

00:14:58,820 --> 00:15:03,740
bring in syslog store to test that it's

00:15:01,280 --> 00:15:06,560
very valuable especially in like CI and

00:15:03,740 --> 00:15:08,779
local development testing environment

00:15:06,560 --> 00:15:10,670
but then I start to wonder like where

00:15:08,779 --> 00:15:12,139
should I put it right if I it's kind of

00:15:10,670 --> 00:15:13,490
something that I would only deploy on my

00:15:12,139 --> 00:15:15,410
Bosch light should I put it in the Bosch

00:15:13,490 --> 00:15:17,930
light ya know file but then there's also

00:15:15,410 --> 00:15:19,519
this like enable syslog ammo file and

00:15:17,930 --> 00:15:22,399
that has all the syslog important

00:15:19,519 --> 00:15:25,759
properties but if I want people to use

00:15:22,399 --> 00:15:28,819
my enable syslog file outside of just

00:15:25,759 --> 00:15:32,439
for this Bosch light specific deploy

00:15:28,819 --> 00:15:34,399
task and also when they're not having to

00:15:32,439 --> 00:15:35,870
optionally they don't have to think

00:15:34,399 --> 00:15:37,519
about optionally bringing in store or

00:15:35,870 --> 00:15:40,189
not like where do I put in this like

00:15:37,519 --> 00:15:42,499
piece of information there's a lot of

00:15:40,189 --> 00:15:45,019
also back there but basically this is a

00:15:42,499 --> 00:15:47,170
this is a question which then leads me

00:15:45,019 --> 00:15:50,649
to you ask another question

00:15:47,170 --> 00:15:55,579
who are these off Spoils even for right

00:15:50,649 --> 00:16:00,139
so as a Bosch author and a Bosch

00:15:55,579 --> 00:16:01,910
consumer we have separate concerns Bosch

00:16:00,139 --> 00:16:04,249
author wants to iterate as quickly as

00:16:01,910 --> 00:16:06,170
possible so put it in the Bosch light

00:16:04,249 --> 00:16:07,519
yamo file let's get going so I can just

00:16:06,170 --> 00:16:11,569
the point I know I'm just gonna need

00:16:07,519 --> 00:16:12,920
store as a consumer I'm coming to a

00:16:11,569 --> 00:16:14,569
Bosch release I'm just wondering how do

00:16:12,920 --> 00:16:16,490
I even deploy this thing I know that I

00:16:14,569 --> 00:16:18,439
want a service broker that has syslog on

00:16:16,490 --> 00:16:19,850
it I don't know what store is I don't

00:16:18,439 --> 00:16:22,279
know that it's optional and I don't know

00:16:19,850 --> 00:16:23,600
if I actually need it so just tell me

00:16:22,279 --> 00:16:26,059
how do I deploy this thing pretty

00:16:23,600 --> 00:16:28,160
quickly and although at times it can

00:16:26,059 --> 00:16:29,660
seem like these are competing concerns I

00:16:28,160 --> 00:16:31,490
actually think that office files gives

00:16:29,660 --> 00:16:33,620
us a lot of headway and ways to like

00:16:31,490 --> 00:16:36,680
make it so that we can meet the concerns

00:16:33,620 --> 00:16:40,639
of both of these types of users of Bosch

00:16:36,680 --> 00:16:43,459
releases and for release authors I think

00:16:40,639 --> 00:16:45,259
that there's just still at least what I

00:16:43,459 --> 00:16:47,720
found is there's no way of getting out

00:16:45,259 --> 00:16:50,750
of manifest generation scripts even with

00:16:47,720 --> 00:16:52,610
the addition of ops files I'm super

00:16:50,750 --> 00:16:55,009
curious about developers out there who

00:16:52,610 --> 00:16:56,750
are using ops files and for quick

00:16:55,009 --> 00:16:59,019
development what are the ways that are

00:16:56,750 --> 00:17:01,399
getting around this because at least for

00:16:59,019 --> 00:17:03,559
what I've done in my projects we've

00:17:01,399 --> 00:17:05,689
still needed a way to be like here the

00:17:03,559 --> 00:17:07,039
set of operation files and

00:17:05,689 --> 00:17:09,530
configurations that you would need to

00:17:07,039 --> 00:17:11,539
enable a certain feature all right now

00:17:09,530 --> 00:17:14,149
bring those values in and to this

00:17:11,539 --> 00:17:17,120
specific order so that I can get going

00:17:14,149 --> 00:17:18,559
and like start developing on it so for

00:17:17,120 --> 00:17:19,260
the questions that I asked earlier what

00:17:18,559 --> 00:17:21,570
if I wanted

00:17:19,260 --> 00:17:23,730
to you you know you store but only

00:17:21,570 --> 00:17:25,140
specifically for in the context of my

00:17:23,730 --> 00:17:28,410
Bosch light environments and for like

00:17:25,140 --> 00:17:31,050
local testing okay I started having some

00:17:28,410 --> 00:17:33,150
like Bosch again so it's set us a slug

00:17:31,050 --> 00:17:37,170
configuration variable and one thing I'd

00:17:33,150 --> 00:17:39,480
changed was I extracted the ops files so

00:17:37,170 --> 00:17:42,120
that enables the sock forwarder is its

00:17:39,480 --> 00:17:45,330
own thing and then enable syslog store

00:17:42,120 --> 00:17:47,480
is another obstacle in itself so that

00:17:45,330 --> 00:17:51,330
way I can meet both of those needs

00:17:47,480 --> 00:17:53,790
however I as the deployment curator

00:17:51,330 --> 00:17:55,140
right still need to know that the syslog

00:17:53,790 --> 00:17:57,030
story doesn't really make sense without

00:17:55,140 --> 00:17:58,710
the fort or being a part of it as well

00:17:57,030 --> 00:18:02,790
and that it needs to happen in this

00:17:58,710 --> 00:18:05,070
sequence more or less so my boss

00:18:02,790 --> 00:18:07,380
deployed command starts to look a little

00:18:05,070 --> 00:18:08,790
bit like this and then I still have my

00:18:07,380 --> 00:18:10,620
base manifest I still have my Bosch

00:18:08,790 --> 00:18:12,810
light that I wanted to point my service

00:18:10,620 --> 00:18:14,460
broker to and then some additional

00:18:12,810 --> 00:18:16,440
syslog configuration that I've defined

00:18:14,460 --> 00:18:18,180
elsewhere so trying to encapsulate that

00:18:16,440 --> 00:18:19,710
as much as possible and then all the

00:18:18,180 --> 00:18:21,870
other stuff that's in there because this

00:18:19,710 --> 00:18:25,650
is a very simplified version of how you

00:18:21,870 --> 00:18:27,090
could deploy I think there there are a

00:18:25,650 --> 00:18:28,590
lot of Bob's files and things that you

00:18:27,090 --> 00:18:32,100
would probably want to insert in here

00:18:28,590 --> 00:18:33,870
going forward and it makes sense to have

00:18:32,100 --> 00:18:36,870
a script that's versioned in your git

00:18:33,870 --> 00:18:38,430
repository that says this is how a dev a

00:18:36,870 --> 00:18:40,890
person who's authoring this release

00:18:38,430 --> 00:18:42,990
would run this and and use these office

00:18:40,890 --> 00:18:46,350
files in this order so that's where

00:18:42,990 --> 00:18:48,090
someone who's iterating on it I think

00:18:46,350 --> 00:18:50,790
going back to what I said earlier about

00:18:48,090 --> 00:18:52,860
like ops files changing the way that we

00:18:50,790 --> 00:18:54,930
think about our boss releases I think we

00:18:52,860 --> 00:18:57,170
need to start like actually including

00:18:54,930 --> 00:18:59,970
them as part of our boss releases and

00:18:57,170 --> 00:19:03,030
commit them as release artifacts that we

00:18:59,970 --> 00:19:05,040
hand over to consumers and end users so

00:19:03,030 --> 00:19:06,870
the base manifest thing making it a

00:19:05,040 --> 00:19:08,070
first-class citizen and talking about it

00:19:06,870 --> 00:19:10,200
in your read Me's and saying here's

00:19:08,070 --> 00:19:13,970
here's the simplest way to deploy like

00:19:10,200 --> 00:19:16,800
my thing and then some example ops files

00:19:13,970 --> 00:19:18,480
this could very well be the exact Topps

00:19:16,800 --> 00:19:20,520
files that you use for example

00:19:18,480 --> 00:19:22,470
enable syslog forwarding is the exact

00:19:20,520 --> 00:19:25,230
tops file that we would use inside of

00:19:22,470 --> 00:19:26,520
our dev environments as well as maybe

00:19:25,230 --> 00:19:28,860
even some production environments that

00:19:26,520 --> 00:19:30,780
we set up however let consumers know

00:19:28,860 --> 00:19:32,490
that these this is an example of if you

00:19:30,780 --> 00:19:32,880
want it to bring in those features here

00:19:32,490 --> 00:19:34,350
the

00:19:32,880 --> 00:19:36,630
properties that you would mean feel free

00:19:34,350 --> 00:19:42,420
to author your own ops file based on the

00:19:36,630 --> 00:19:45,060
examples that we've given you so that

00:19:42,420 --> 00:19:46,440
kind of looks like this and a readme I

00:19:45,060 --> 00:19:48,180
think is the cheapest way to get that

00:19:46,440 --> 00:19:50,670
done in your Bosch releases just being

00:19:48,180 --> 00:19:52,890
like here's here's a common use case of

00:19:50,670 --> 00:19:54,000
deploying broker with syslog here are

00:19:52,890 --> 00:19:55,710
the set of operations that you would

00:19:54,000 --> 00:19:57,090
need to do by the way you're going to

00:19:55,710 --> 00:19:59,430
come across some of these other ops

00:19:57,090 --> 00:20:02,070
files inside of your repo here is what

00:19:59,430 --> 00:20:05,000
we use them for kids they're basically

00:20:02,070 --> 00:20:07,290
examples for your disposal there's a

00:20:05,000 --> 00:20:09,170
interesting thing that the CF deployment

00:20:07,290 --> 00:20:11,430
team started doing and it's called

00:20:09,170 --> 00:20:14,790
workflows and I really like this idea

00:20:11,430 --> 00:20:18,150
where they started privatizing their ops

00:20:14,790 --> 00:20:20,130
files so what they do is actually say

00:20:18,150 --> 00:20:21,810
you know that this this ops file we

00:20:20,130 --> 00:20:23,610
verified it we've unit tested it in

00:20:21,810 --> 00:20:25,800
isolation and we know it works

00:20:23,610 --> 00:20:27,240
however since the nature of deployed

00:20:25,800 --> 00:20:29,700
commands and all files are order

00:20:27,240 --> 00:20:31,800
dependent here's a static workflow on

00:20:29,700 --> 00:20:34,290
how to achieve the type of deployment

00:20:31,800 --> 00:20:36,180
that you're looking for so ICF

00:20:34,290 --> 00:20:38,220
deployment across multiple ACS

00:20:36,180 --> 00:20:40,860
this is what your deployment workflow

00:20:38,220 --> 00:20:42,240
could look like and they do a really

00:20:40,860 --> 00:20:44,580
good job of this is a screenshot from

00:20:42,240 --> 00:20:46,050
when their github readme is they do a

00:20:44,580 --> 00:20:47,880
really good job of going over each and

00:20:46,050 --> 00:20:50,160
every single one of their ops files what

00:20:47,880 --> 00:20:51,450
the purpose is and exactly some of the

00:20:50,160 --> 00:20:53,130
gotchas or things that you should know

00:20:51,450 --> 00:20:55,440
about beforehand before you start using

00:20:53,130 --> 00:20:57,990
that ops file I think this is a really

00:20:55,440 --> 00:21:00,480
awesome pattern and that we should move

00:20:57,990 --> 00:21:03,360
toward this it does mean you know having

00:21:00,480 --> 00:21:05,610
to document document some of these ops

00:21:03,360 --> 00:21:07,320
files and taking the time to make sure

00:21:05,610 --> 00:21:09,750
that they actually work in unit test

00:21:07,320 --> 00:21:10,800
them whether or not you do that and

00:21:09,750 --> 00:21:13,590
whether you choose to use them as

00:21:10,800 --> 00:21:16,380
examples I think is up to you as a as a

00:21:13,590 --> 00:21:18,180
Bosch release author but I've really

00:21:16,380 --> 00:21:19,950
seen this pattern like seem to work well

00:21:18,180 --> 00:21:21,950
and people respond to it while in the

00:21:19,950 --> 00:21:25,580
community

00:21:21,950 --> 00:21:27,630
so in conclusion just to review if

00:21:25,580 --> 00:21:29,400
anything you learned is just too clearly

00:21:27,630 --> 00:21:30,840
named your ops file so it's obvious to

00:21:29,400 --> 00:21:32,550
everyone not only developers on your

00:21:30,840 --> 00:21:34,740
team but people outside who are looking

00:21:32,550 --> 00:21:37,500
into your boss release repo like what

00:21:34,740 --> 00:21:38,760
exactly is this thing doing commit some

00:21:37,500 --> 00:21:40,500
of those example ops files and

00:21:38,760 --> 00:21:43,350
definitely a base manifest inside of

00:21:40,500 --> 00:21:44,820
your release repo and if possible and

00:21:43,350 --> 00:21:45,430
appropriate find out what are your

00:21:44,820 --> 00:21:48,280
common

00:21:45,430 --> 00:21:49,960
use cases are how are people deploying

00:21:48,280 --> 00:21:51,730
the thing that you are authoring and

00:21:49,960 --> 00:21:53,020
based on that what are the workflows

00:21:51,730 --> 00:21:57,970
that you can provide to them that you

00:21:53,020 --> 00:22:01,630
know work in our fully tested thank you

00:21:57,970 --> 00:22:03,970
for attending this talk I am NOT a

00:22:01,630 --> 00:22:05,770
member of the Bosch team and cannot

00:22:03,970 --> 00:22:09,280
answer specific questions about flash

00:22:05,770 --> 00:22:12,240
but if you do have questions I'm here to

00:22:09,280 --> 00:22:12,240
take them

00:22:13,180 --> 00:22:20,390

YouTube URL: https://www.youtube.com/watch?v=zbL5dc6tadI


