Title: Gold Sponsor Lightning Talk: The Future of Container Storage: CSI and Cloud Foundry
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	Gold Sponsor Lightning Talk: The Future of Container Storage: CSI and Cloud Foundry - Julian Hjortshoj, Dell EMC

In early 2017, representatives from Cloud Foundry, Kubernetes, Mesos and Docker convened a working group to create a common Container Storage Interface.  The intent of this interface is to provide a standard API that will allow a storage provider to write a single plugin that can attach their storage to any of the major container orchestrators.

In this talk, we will cover the design and logical flow of the Container Storage Interface, discuss its integration into Cloud Foundry, and look at some initial examples of storage plugin implementations.

About Julian Hjortshoj
Julian is the PM of the Diego Persistence team, and a 12 year veteran at Dell EMC. | In his spare time, Julian enjoys traveling, cooking, sporadic exercise, and building stuff that isnâ€™t software.
Captions: 
	00:00:00,000 --> 00:00:09,210
hi I'm Julian your toy I work for the

00:00:04,470 --> 00:00:12,120
Dell EMC cloud platform team we our bit

00:00:09,210 --> 00:00:14,880
of that team works in San Francisco

00:00:12,120 --> 00:00:18,630
primarily on the Diego persistence

00:00:14,880 --> 00:00:23,539
project I'm going to talk to you today

00:00:18,630 --> 00:00:23,539
about the container storage interface

00:00:24,019 --> 00:00:29,189
those of you don't know container

00:00:26,160 --> 00:00:31,820
storage interface is a project that was

00:00:29,189 --> 00:00:36,120
launched roughly this time last year

00:00:31,820 --> 00:00:39,840
between Cloud Foundry kubernetes mezzo

00:00:36,120 --> 00:00:42,360
sand docker to try to standardize the

00:00:39,840 --> 00:00:44,820
way that storage is attached to

00:00:42,360 --> 00:00:48,239
containers in container orchestration

00:00:44,820 --> 00:00:51,930
systems we've been kind of working off

00:00:48,239 --> 00:00:53,940
and on it sort of faltered a little bit

00:00:51,930 --> 00:00:55,410
last fall around the holidays and picked

00:00:53,940 --> 00:00:57,930
back up again in the spring and we've

00:00:55,410 --> 00:01:01,800
been going full-tilt on it since since

00:00:57,930 --> 00:01:08,390
early this year so why did we do this

00:01:01,800 --> 00:01:10,650
thing we all all of our various

00:01:08,390 --> 00:01:13,380
orchestrators need a way of attaching

00:01:10,650 --> 00:01:16,380
storage to containers unless your apps

00:01:13,380 --> 00:01:18,210
totally stateless which you know ideally

00:01:16,380 --> 00:01:22,189
it should be twelve factor app and all

00:01:18,210 --> 00:01:24,869
this but sometimes it's not so

00:01:22,189 --> 00:01:26,939
essentially we've all evolved to the

00:01:24,869 --> 00:01:31,460
point where we find we need to store

00:01:26,939 --> 00:01:31,460
some stuff in some kind of volume

00:01:32,450 --> 00:01:38,280
likewise storage providers have kind of

00:01:36,420 --> 00:01:39,540
sensed in the wind that all of the

00:01:38,280 --> 00:01:42,030
workloads seem to be going toward

00:01:39,540 --> 00:01:45,509
containers and they all dearly want to

00:01:42,030 --> 00:01:51,659
be able to attach their storage to

00:01:45,509 --> 00:01:56,790
containers in places and they don't

00:01:51,659 --> 00:01:59,640
really want to have to do that once per

00:01:56,790 --> 00:02:01,020
container orchestration system so I

00:01:59,640 --> 00:02:02,909
don't want to have to like build the

00:02:01,020 --> 00:02:05,100
integration with kubernetes and then

00:02:02,909 --> 00:02:07,500
turn around and make a docker volume

00:02:05,100 --> 00:02:09,030
plug-in and turn around and make a cloud

00:02:07,500 --> 00:02:15,740
foundry service broker and

00:02:09,030 --> 00:02:19,950
thing and so on and so forth so

00:02:15,740 --> 00:02:23,250
standardized API similar to like the

00:02:19,950 --> 00:02:26,069
open service broker API or some you know

00:02:23,250 --> 00:02:30,090
the container networking API gives us a

00:02:26,069 --> 00:02:33,239
way to allow storage providers to write

00:02:30,090 --> 00:02:34,830
one plug-in set that works with all of

00:02:33,239 --> 00:02:37,200
the various different orchestrators and

00:02:34,830 --> 00:02:39,230
that way kind of work together and if

00:02:37,200 --> 00:02:41,459
you're running multiple storage

00:02:39,230 --> 00:02:43,170
providers and multiple container

00:02:41,459 --> 00:02:48,959
orchestrators in the same ecosystem they

00:02:43,170 --> 00:02:53,459
can all just hook up to one another so

00:02:48,959 --> 00:02:56,630
digging into a little bit of how the api

00:02:53,459 --> 00:02:56,630
we came up with works

00:02:57,860 --> 00:03:06,030
CSI proposes that there should be two

00:03:01,019 --> 00:03:10,190
plugins per storage provider essentially

00:03:06,030 --> 00:03:13,230
it's a division of labor the first

00:03:10,190 --> 00:03:15,230
plug-in will sit at the at the

00:03:13,230 --> 00:03:17,370
orchestrator of the controller layer

00:03:15,230 --> 00:03:21,799
similar to a Cloud Foundry service

00:03:17,370 --> 00:03:25,079
broker it's responsible for provisioning

00:03:21,799 --> 00:03:27,510
attaching storage to a node and then the

00:03:25,079 --> 00:03:31,290
node plug-in is guaranteed to be run on

00:03:27,510 --> 00:03:33,690
the same host as the workload and that's

00:03:31,290 --> 00:03:37,560
where we do things like mounts or stuff

00:03:33,690 --> 00:03:40,970
it has to happen on the local node so in

00:03:37,560 --> 00:03:43,230
the case of Cloud Foundry that would be

00:03:40,970 --> 00:03:46,500
the controller plug-in running

00:03:43,230 --> 00:03:48,630
who-knows-where and the node plug-in

00:03:46,500 --> 00:03:56,310
running probably in multiple instances

00:03:48,630 --> 00:03:59,790
one on each Diego cell and if you want

00:03:56,310 --> 00:04:05,810
more details on that the spec is at this

00:03:59,790 --> 00:04:09,840
link so the basic kind of control flow

00:04:05,810 --> 00:04:16,430
this is quite a bit simplified or more

00:04:09,840 --> 00:04:16,430
more RBC calls but the gist is that

00:04:16,459 --> 00:04:21,209
container Orchestrator you know in our

00:04:18,810 --> 00:04:22,440
case the cloud controller is going to

00:04:21,209 --> 00:04:23,880
call

00:04:22,440 --> 00:04:26,130
this plug-in is going to ask you to

00:04:23,880 --> 00:04:30,510
create a volume when prompted by some

00:04:26,130 --> 00:04:33,000
user action so that calls the create

00:04:30,510 --> 00:04:35,250
volume RPC some storage gets provisioned

00:04:33,000 --> 00:04:37,140
or maybe your storage already exists and

00:04:35,250 --> 00:04:39,450
this is a no op the container

00:04:37,140 --> 00:04:40,770
Orchestrator doesn't know but it knows

00:04:39,450 --> 00:04:42,170
that it has to call create you get a

00:04:40,770 --> 00:04:46,320
response back with a little bit of

00:04:42,170 --> 00:04:49,950
metadata it then when it's getting ready

00:04:46,320 --> 00:04:54,600
to place this work on a particular node

00:04:49,950 --> 00:04:56,790
calls publish if it's something like an

00:04:54,600 --> 00:04:58,290
NFS mount then that will probably be a

00:04:56,790 --> 00:05:01,400
no op because there isn't really

00:04:58,290 --> 00:05:04,710
anything that happens at the master node

00:05:01,400 --> 00:05:06,690
for an NFS mount if it's something like

00:05:04,710 --> 00:05:10,410
a block device then that's where we

00:05:06,690 --> 00:05:15,180
would be doing attachment of the block

00:05:10,410 --> 00:05:18,290
device to the VM so it kind of depends

00:05:15,180 --> 00:05:23,340
on the kind of storage and then finally

00:05:18,290 --> 00:05:26,280
we call node publish volume on the on

00:05:23,340 --> 00:05:29,490
the Diego cell or on the worker node or

00:05:26,280 --> 00:05:31,350
whatever you want to call it and this is

00:05:29,490 --> 00:05:34,440
where all the note specific stuff

00:05:31,350 --> 00:05:38,130
happens so if it's an NFS thing then we

00:05:34,440 --> 00:05:40,890
would do an NFS mount or or if it's if

00:05:38,130 --> 00:05:43,380
samba mount we do that kind of thing

00:05:40,890 --> 00:05:45,990
could also be that it's a block device

00:05:43,380 --> 00:05:48,419
but it requires some care and feeding in

00:05:45,990 --> 00:05:52,860
the context of the VM that it's gonna

00:05:48,419 --> 00:05:57,900
work on so like I scuzzy initiation

00:05:52,860 --> 00:06:00,450
would happen at that step so just to

00:05:57,900 --> 00:06:03,750
walk you through quickly what the

00:06:00,450 --> 00:06:05,790
interfaces are in question so there's

00:06:03,750 --> 00:06:07,940
the create and publish that I talked

00:06:05,790 --> 00:06:10,680
about there's also some things about

00:06:07,940 --> 00:06:12,120
kind of checking volume capabilities to

00:06:10,680 --> 00:06:15,300
get a little bit more information back

00:06:12,120 --> 00:06:17,190
and forth again you can go dig around in

00:06:15,300 --> 00:06:21,720
this back if you're interested in the

00:06:17,190 --> 00:06:24,870
details of these so that was the

00:06:21,720 --> 00:06:27,000
controller the node is a bit simpler it

00:06:24,870 --> 00:06:29,130
has this additional probe no that just

00:06:27,000 --> 00:06:31,289
checks for okayness and get node ID

00:06:29,130 --> 00:06:32,180
which allows the know to identify itself

00:06:31,289 --> 00:06:34,130
back to the

00:06:32,180 --> 00:06:40,130
roller so for example if you're

00:06:34,130 --> 00:06:42,789
attaching a an EBS thing to ec2 VM then

00:06:40,130 --> 00:06:47,120
you need to know something about what

00:06:42,789 --> 00:06:48,500
the EZ two's instance ID is that you can

00:06:47,120 --> 00:06:54,650
talk to Hamazon to get those things

00:06:48,500 --> 00:06:56,630
attached and then finally we have this

00:06:54,650 --> 00:06:58,970
identity service and this is just a

00:06:56,630 --> 00:07:00,500
couple of our PCs that'll happen in both

00:06:58,970 --> 00:07:07,250
plugins so that we can do things like

00:07:00,500 --> 00:07:09,020
check the version so so when is this

00:07:07,250 --> 00:07:11,750
gonna happen

00:07:09,020 --> 00:07:13,940
Cooper daddy's is looking at their

00:07:11,750 --> 00:07:15,259
version 1 9 which should be around the

00:07:13,940 --> 00:07:18,800
beginning of next year for the first

00:07:15,259 --> 00:07:22,250
experimental version I should say since

00:07:18,800 --> 00:07:26,599
the spec is pre-alpha it isn't yet

00:07:22,250 --> 00:07:28,669
finalized it's still quite in flux so by

00:07:26,599 --> 00:07:30,410
the time they publish something we'll

00:07:28,669 --> 00:07:32,060
have something a little bit more locked

00:07:30,410 --> 00:07:33,590
down or we start you know guaranteeing

00:07:32,060 --> 00:07:35,810
backward compatibility and that kind of

00:07:33,590 --> 00:07:39,830
thing mais au s-- again is looking at

00:07:35,810 --> 00:07:42,440
round of at the end of this year mobi ok

00:07:39,830 --> 00:07:45,409
docker hasn't yet decided what version

00:07:42,440 --> 00:07:48,199
they're targeting and in cloud foundry

00:07:45,409 --> 00:07:50,449
you can have it today an open source

00:07:48,199 --> 00:07:55,190
cloud foundry we've already added a POC

00:07:50,449 --> 00:07:57,860
level implementation of this feature so

00:07:55,190 --> 00:08:03,340
if you want to go right you're on CSI

00:07:57,860 --> 00:08:05,509
plug-in set and it's not a block device

00:08:03,340 --> 00:08:07,310
you should be able to use it in cloud

00:08:05,509 --> 00:08:09,229
foundry with this with this feature and

00:08:07,310 --> 00:08:11,870
definitely let us know if you're going

00:08:09,229 --> 00:08:14,259
to try that because we'll be happy to do

00:08:11,870 --> 00:08:17,930
a little hand-holding

00:08:14,259 --> 00:08:23,120
just some quick resources I'll publish

00:08:17,930 --> 00:08:28,509
this slide deck and with that I think

00:08:23,120 --> 00:08:28,509

YouTube URL: https://www.youtube.com/watch?v=1XfyvHoDES8


