Title: An Introduction to Cloud Foundry Core Development - Jen Spinney & Luan Santos, SUSE
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	An Introduction to Cloud Foundry Core Development - Jen Spinney & Luan Santos, SUSE

Welcome to the Cloud Foundry community! This talk is designed for people who are new to the Cloud Foundry community or existing community members who haven't come in contact with core developers and the development practices of Cloud Foundry.

Cloud Foundry is proudly open source, and our open source contribution model is a little different from most other open source projects. In this talk, you'll learn about how the Cloud Foundry teams are structured, how they operate, and what a day in the life of a Cloud Foundry core developer looks like. Even if you don't plan to get involved with core development yourself, this talk will help you understand the perspective and terminology of the developers and product managers you may be interacting with. If you do plan on getting involved with core development, this talk will serve as an overview and introduction of what to expect when joining a team or making a pull request.

About Luan Santos
Luan Santos is a Pivotal developer and core contributor to the Cloud Foundry platform. He is a member of the Diego team, located in San Francisco, CA. He also spoke at the CF Summit 2015 in Santa Clara, CA about the Cloud Foundry API.

About Jennifer Spinney
Jen Spinney is a Software Engineer at SUSE, who’s worked on core Cloud Foundry teams for over two years, including Diego and CAPI. Previously, she worked for Microsoft for 3 years developing standards and tooling for implementations of REST. She’s given several talks at previous Cloud Foundry Summits.
Captions: 
	00:00:00,380 --> 00:00:05,640
hello everyone I think we'll get started

00:00:02,990 --> 00:00:09,570
welcome to an introduction to Cloud

00:00:05,640 --> 00:00:11,370
Foundry core development my name is

00:00:09,570 --> 00:00:13,740
Jen's Finney and I'm a software engineer

00:00:11,370 --> 00:00:16,710
at Sousa they am based in Nuremberg

00:00:13,740 --> 00:00:18,859
Germany I've been a CF core contributor

00:00:16,710 --> 00:00:23,220
for two and a half years on a variety of

00:00:18,859 --> 00:00:25,529
core open source cloud foundry teams and

00:00:23,220 --> 00:00:27,150
I am one centos I'm a software engineer

00:00:25,529 --> 00:00:29,910
at pivotal we've been there for five

00:00:27,150 --> 00:00:32,730
years actually and on CF as a core

00:00:29,910 --> 00:00:34,230
contributor for four I'm based in San

00:00:32,730 --> 00:00:36,450
Francisco but I actually work from home

00:00:34,230 --> 00:00:39,390
out of Davis California which is a few

00:00:36,450 --> 00:00:45,390
miles away from there so work remotely

00:00:39,390 --> 00:00:47,550
with my teams the motivation behind this

00:00:45,390 --> 00:00:50,399
talk is to introduce people to the way

00:00:47,550 --> 00:00:52,500
that we develop cloud foundry itself so

00:00:50,399 --> 00:00:54,180
the intended audience is either people

00:00:52,500 --> 00:00:56,309
that use cloud foundry and are curious

00:00:54,180 --> 00:00:57,890
how it works under the hood or people

00:00:56,309 --> 00:01:00,149
that are maybe curious about

00:00:57,890 --> 00:01:02,390
contributing directly to cloud foundry

00:01:00,149 --> 00:01:04,769
and getting involved in this ecosystem

00:01:02,390 --> 00:01:06,659
it's a little bit different than most

00:01:04,769 --> 00:01:08,790
open-source projects which is also what

00:01:06,659 --> 00:01:12,930
motivated us to do this talk and the way

00:01:08,790 --> 00:01:15,090
that we do internal development is much

00:01:12,930 --> 00:01:16,650
more pairing focused much more focused

00:01:15,090 --> 00:01:18,990
on a bunch of extreme programming

00:01:16,650 --> 00:01:20,820
principles so we want to introduce you

00:01:18,990 --> 00:01:22,740
to how we do development and how to get

00:01:20,820 --> 00:01:26,880
involved in open source cloud foundry

00:01:22,740 --> 00:01:28,409
development cloud foundry just a brief

00:01:26,880 --> 00:01:30,960
history of where it came from

00:01:28,409 --> 00:01:33,659
started from VMware which is why we

00:01:30,960 --> 00:01:37,079
still have vcap services the v-cut bosh

00:01:33,659 --> 00:01:41,930
user things like that then it was run by

00:01:37,079 --> 00:01:43,680
pivotal and then into 2015 it was

00:01:41,930 --> 00:01:46,829
transferred over to the cloud foundry

00:01:43,680 --> 00:01:49,079
foundation it is still heavily

00:01:46,829 --> 00:01:51,360
contributed to by pivotal but they're no

00:01:49,079 --> 00:01:53,280
longer the company executing it it's now

00:01:51,360 --> 00:01:57,450
a fully open source project that's run

00:01:53,280 --> 00:01:59,729
by an open source foundation so inside

00:01:57,450 --> 00:02:01,280
of cloud foundry inside the foundation

00:01:59,729 --> 00:02:03,750
we have a lot of open source projects

00:02:01,280 --> 00:02:04,890
for example we have Diego that you might

00:02:03,750 --> 00:02:07,420
have just heard about in the previous

00:02:04,890 --> 00:02:09,520
talk and Diego in

00:02:07,420 --> 00:02:11,739
is the matzo matically related to a

00:02:09,520 --> 00:02:14,319
bunch of other teams and that we

00:02:11,739 --> 00:02:15,580
consider the runtime so we have this

00:02:14,319 --> 00:02:18,130
thing called a project management

00:02:15,580 --> 00:02:20,319
committee or a PMC the groups together a

00:02:18,130 --> 00:02:23,580
bunch of projects that are all thumb

00:02:20,319 --> 00:02:26,560
attica ly related this PMC has meetings

00:02:23,580 --> 00:02:28,150
every other week to double-check that

00:02:26,560 --> 00:02:30,340
everyone's on track with their projects

00:02:28,150 --> 00:02:32,470
the project leads come together discuss

00:02:30,340 --> 00:02:34,150
what their roadmap is make sure that

00:02:32,470 --> 00:02:37,510
everyone was working well together and

00:02:34,150 --> 00:02:40,000
everyone's Direction is aligned so here

00:02:37,510 --> 00:02:41,860
are three examples Diego CLI happy but

00:02:40,000 --> 00:02:43,569
the dot dot dot here represents there a

00:02:41,860 --> 00:02:48,160
whole bunch of other teams in this

00:02:43,569 --> 00:02:51,130
runtime PMC similarly all the PMC leads

00:02:48,160 --> 00:02:53,410
then get together occasionally and form

00:02:51,130 --> 00:02:55,810
the PMC Council to make sure the PMC's

00:02:53,410 --> 00:02:57,880
are all aligned and you know everything

00:02:55,810 --> 00:03:02,980
as an entire Cloud Foundry is on the

00:02:57,880 --> 00:03:05,860
right path and working together Cloud

00:03:02,980 --> 00:03:08,890
Foundry is governed by contribution that

00:03:05,860 --> 00:03:10,569
means that you can't just come up as

00:03:08,890 --> 00:03:12,040
someone that's not involved in Cloud

00:03:10,569 --> 00:03:13,299
Foundry and say oh I think Cloud Foundry

00:03:12,040 --> 00:03:15,640
needs to go in this direction you guys

00:03:13,299 --> 00:03:18,400
should write your code this way the idea

00:03:15,640 --> 00:03:20,859
is that the more full-time developers

00:03:18,400 --> 00:03:23,890
that you devote to open source Cloud

00:03:20,859 --> 00:03:25,780
Foundry contribution the more say that

00:03:23,890 --> 00:03:31,269
you get in technical decisions of Cloud

00:03:25,780 --> 00:03:33,040
Foundry the foundation guidelines leave

00:03:31,269 --> 00:03:35,829
it actually up to the PMC to decide what

00:03:33,040 --> 00:03:37,450
a dedicated contributor is but the

00:03:35,829 --> 00:03:40,930
general guideline is someone that's

00:03:37,450 --> 00:03:43,030
working full-time at least 75% of their

00:03:40,930 --> 00:03:44,950
time on open source Cloud Foundry

00:03:43,030 --> 00:03:46,570
projects so they're not working on

00:03:44,950 --> 00:03:50,200
proprietary stuff they're working on the

00:03:46,570 --> 00:03:52,810
open source teams and that means working

00:03:50,200 --> 00:03:55,299
from the common team backlog they're not

00:03:52,810 --> 00:03:58,540
working on their particular company's

00:03:55,299 --> 00:04:00,100
desires at least 75% of the time they're

00:03:58,540 --> 00:04:05,010
working on whatever the open source team

00:04:00,100 --> 00:04:07,510
has decided is the open source priority

00:04:05,010 --> 00:04:10,450
so how does someone become a dedicated

00:04:07,510 --> 00:04:13,180
contributor we have a process called the

00:04:10,450 --> 00:04:15,970
dojo that is six to twelve weeks

00:04:13,180 --> 00:04:17,650
on-site at a dojo facility you are

00:04:15,970 --> 00:04:19,539
pairing you're immersed in the Cloud

00:04:17,650 --> 00:04:21,250
Foundry culture of development

00:04:19,539 --> 00:04:23,530
you are a normal

00:04:21,250 --> 00:04:25,540
member on a real project this is not

00:04:23,530 --> 00:04:27,820
some special class you take it's not

00:04:25,540 --> 00:04:31,330
some fake project or beginner project is

00:04:27,820 --> 00:04:33,070
a real project and the idea is to get

00:04:31,330 --> 00:04:34,990
completely culturally and technically

00:04:33,070 --> 00:04:38,680
immersed in the Cloud Foundry

00:04:34,990 --> 00:04:42,730
development culture the idea is to get

00:04:38,680 --> 00:04:44,530
very fast on-boarded into the code the

00:04:42,730 --> 00:04:47,020
architecture of the product but also how

00:04:44,530 --> 00:04:50,770
we do TDD how we use CI and our

00:04:47,020 --> 00:04:53,140
development culture in general the first

00:04:50,770 --> 00:04:54,820
steps to doing a dojo is to contact this

00:04:53,140 --> 00:04:56,740
email address the F dojo at Cloud

00:04:54,820 --> 00:04:58,690
Foundry org to figure out where there is

00:04:56,740 --> 00:05:00,430
space on a team for you because you're

00:04:58,690 --> 00:05:02,350
joining a team is a real normal member

00:05:00,430 --> 00:05:04,450
there has to be space they have to want

00:05:02,350 --> 00:05:06,940
someone on that team and there a variety

00:05:04,450 --> 00:05:08,800
of locations where you can do a dojo

00:05:06,940 --> 00:05:11,260
there are several in the United States

00:05:08,800 --> 00:05:14,800
there are two in Europe so there are a

00:05:11,260 --> 00:05:16,060
couple options there the first thing

00:05:14,800 --> 00:05:17,230
you're going to do after you've decided

00:05:16,060 --> 00:05:19,510
that there's availability and there's a

00:05:17,230 --> 00:05:21,880
site where you're willing to travel to

00:05:19,510 --> 00:05:23,830
if she if need be is to do this pair

00:05:21,880 --> 00:05:27,040
programming phone screen the idea of

00:05:23,830 --> 00:05:30,570
this is to make sure that you would be a

00:05:27,040 --> 00:05:33,729
good fit for this pair programming TDD

00:05:30,570 --> 00:05:37,300
kind of environment and make sure it's

00:05:33,729 --> 00:05:39,910
gonna go well during your dojo if that's

00:05:37,300 --> 00:05:42,130
great if that screen goes okay then you

00:05:39,910 --> 00:05:44,530
get onboard onto the team like a normal

00:05:42,130 --> 00:05:47,050
team member and if the dojo goes well

00:05:44,530 --> 00:05:48,610
then you can join a regular team either

00:05:47,050 --> 00:05:50,380
in person or remote so if you had to

00:05:48,610 --> 00:05:52,330
travel somewhere far to do your dojo you

00:05:50,380 --> 00:05:54,610
can continue being a full-time cloud

00:05:52,330 --> 00:06:01,120
foundry contributor remotely after that

00:05:54,610 --> 00:06:04,690
point those themes foundry is really

00:06:01,120 --> 00:06:07,330
global in fact we have members of the

00:06:04,690 --> 00:06:10,960
core teams of the active teams all over

00:06:07,330 --> 00:06:14,350
the globe you can see on this map these

00:06:10,960 --> 00:06:15,940
these pins on the map on the map are

00:06:14,350 --> 00:06:17,560
only the active teams not counting the

00:06:15,940 --> 00:06:20,650
incubating if added the incubating teams

00:06:17,560 --> 00:06:22,930
here to be much more than that and as of

00:06:20,650 --> 00:06:24,910
right now but when we were preparing

00:06:22,930 --> 00:06:27,220
this talk for spending four continents

00:06:24,910 --> 00:06:30,550
eight countries and nine time zones and

00:06:27,220 --> 00:06:33,789
we all work together to building this

00:06:30,550 --> 00:06:34,780
this product that we all we all like and

00:06:33,789 --> 00:06:36,340
use in

00:06:34,780 --> 00:06:38,050
some of those teams are actually even

00:06:36,340 --> 00:06:40,630
distributed among themselves

00:06:38,050 --> 00:06:45,760
I mentioned myself I worked remotely

00:06:40,630 --> 00:06:49,389
from home and my team has people in San

00:06:45,760 --> 00:06:52,150
Francisco in Portland in Toronto and in

00:06:49,389 --> 00:06:54,580
Santa Monica and we all worked together

00:06:52,150 --> 00:07:00,160
in the same backlog that's the Box team

00:06:54,580 --> 00:07:01,540
that I'm working on right now for all of

00:07:00,160 --> 00:07:05,290
those distributed teams to actually

00:07:01,540 --> 00:07:07,600
follow a fairly similar structure all of

00:07:05,290 --> 00:07:11,320
the teams will have one assignment

00:07:07,600 --> 00:07:15,070
project product manager who is

00:07:11,320 --> 00:07:18,760
responsible for receiving input from the

00:07:15,070 --> 00:07:22,290
community from the PMC's and digesting

00:07:18,760 --> 00:07:25,530
that input into roadmap for a team

00:07:22,290 --> 00:07:28,120
organizing that into a prioritized list

00:07:25,530 --> 00:07:31,540
into a backlog for the engineering to

00:07:28,120 --> 00:07:33,010
work on making sure that the engineering

00:07:31,540 --> 00:07:36,639
team always has valley will work to

00:07:33,010 --> 00:07:39,070
perform and they're also responsible for

00:07:36,639 --> 00:07:41,500
serving as a bridge between their own

00:07:39,070 --> 00:07:44,440
teams and the rest of the organization

00:07:41,500 --> 00:07:47,020
via communication with the PMC ID on the

00:07:44,440 --> 00:07:51,340
PMC meetings on mailing lists on the

00:07:47,020 --> 00:07:53,100
community advisory board and other other

00:07:51,340 --> 00:07:57,010
things

00:07:53,100 --> 00:08:01,090
the teams are also composed of of course

00:07:57,010 --> 00:08:03,490
engineers and we actually compose teams

00:08:01,090 --> 00:08:08,020
in pairs of engineers not in individuals

00:08:03,490 --> 00:08:10,919
because we do carry for everything for

00:08:08,020 --> 00:08:13,030
every development story we work on so

00:08:10,919 --> 00:08:15,580
you're gonna have at least one pair of

00:08:13,030 --> 00:08:18,340
engineers on any given team and their

00:08:15,580 --> 00:08:20,500
responsibilities is to not only work on

00:08:18,340 --> 00:08:22,300
the stories of the p.m. prioritized work

00:08:20,500 --> 00:08:24,970
through that backlog but to ensure that

00:08:22,300 --> 00:08:27,070
they're really the the product is always

00:08:24,970 --> 00:08:29,500
releasable as much as possible by

00:08:27,070 --> 00:08:31,270
maintaining and grooming a continuous

00:08:29,500 --> 00:08:34,140
integration by plane they're actually

00:08:31,270 --> 00:08:37,060
gonna talk a little bit about later and

00:08:34,140 --> 00:08:39,099
being on a team and being part of the

00:08:37,060 --> 00:08:40,930
community the engineers are actually in

00:08:39,099 --> 00:08:43,030
a great position to provide feedback not

00:08:40,930 --> 00:08:44,470
only to their own projects that they're

00:08:43,030 --> 00:08:47,290
working on but to the teams that are

00:08:44,470 --> 00:08:48,220
interact with so as an as a member of a

00:08:47,290 --> 00:08:50,189
team

00:08:48,220 --> 00:08:53,529
that opportunity to really drive the

00:08:50,189 --> 00:08:56,920
direction of Cloud Foundry in both small

00:08:53,529 --> 00:09:01,329
and big ways depending on your interests

00:08:56,920 --> 00:09:02,860
and all that really importantly the

00:09:01,329 --> 00:09:04,930
teams are actually not organized in any

00:09:02,860 --> 00:09:07,420
special hierarchy everyone on the team

00:09:04,930 --> 00:09:09,990
has the same responsibilities as general

00:09:07,420 --> 00:09:12,459
saying even when you join on the dojo

00:09:09,990 --> 00:09:14,379
before you become an official core

00:09:12,459 --> 00:09:16,779
committer you're already treated like a

00:09:14,379 --> 00:09:18,850
like a core team member you're joined a

00:09:16,779 --> 00:09:21,490
team and you work with everyone else and

00:09:18,850 --> 00:09:23,560
no one no one is really no one is

00:09:21,490 --> 00:09:25,810
treated specially we try our best not

00:09:23,560 --> 00:09:28,029
have any biases of course we understand

00:09:25,810 --> 00:09:31,269
that people are different and everyone

00:09:28,029 --> 00:09:33,910
has their own skills and experiences and

00:09:31,269 --> 00:09:37,810
we try to make use of those by giving

00:09:33,910 --> 00:09:39,699
opportunities where you can use those

00:09:37,810 --> 00:09:42,250
special skills and occurrences in a way

00:09:39,699 --> 00:09:45,879
that is both beneficial to the project

00:09:42,250 --> 00:09:49,439
to yourself and you're helping grow your

00:09:45,879 --> 00:09:51,970
peers on the team that you're working on

00:09:49,439 --> 00:09:54,209
one of those engineers is actually

00:09:51,970 --> 00:10:00,069
assigned the role of anchor which is

00:09:54,209 --> 00:10:05,370
commonly misinterpreted as an

00:10:00,069 --> 00:10:07,689
engineering lead on ecology the anchor

00:10:05,370 --> 00:10:09,430
has a role that is a little bit

00:10:07,689 --> 00:10:11,980
different than your industry standard

00:10:09,430 --> 00:10:14,170
engineer engineering lead their role is

00:10:11,980 --> 00:10:16,750
actually to make sure that the team is

00:10:14,170 --> 00:10:19,689
working together and making sure that

00:10:16,750 --> 00:10:21,639
the team is successful and they do that

00:10:19,689 --> 00:10:23,769
by working with the product manager and

00:10:21,639 --> 00:10:26,529
with the rest of the organization to

00:10:23,769 --> 00:10:30,759
make sure that there isn't anything

00:10:26,529 --> 00:10:33,730
missing resources and that the team the

00:10:30,759 --> 00:10:38,889
team build is balanced an experience and

00:10:33,730 --> 00:10:40,660
skill and they are responsible for own

00:10:38,889 --> 00:10:41,800
boarding or making sure that people that

00:10:40,660 --> 00:10:44,319
join the team are on boarded

00:10:41,800 --> 00:10:45,850
successfully either by pairing with them

00:10:44,319 --> 00:10:47,949
themselves or by assigning other men

00:10:45,850 --> 00:10:50,350
other members of the team sharing with

00:10:47,949 --> 00:10:52,389
them so again mentioning the job when

00:10:50,350 --> 00:10:54,759
you join the dojo dinkar is the one that

00:10:52,389 --> 00:10:56,980
is going to be welcoming you there and

00:10:54,759 --> 00:10:59,819
making sure that you get all the content

00:10:56,980 --> 00:10:59,819
you need to ramp up

00:11:00,360 --> 00:11:04,420
although the anchor is not expected to

00:11:02,710 --> 00:11:08,140
be in engineering Li they will usually

00:11:04,420 --> 00:11:11,410
be a very technically skilled member of

00:11:08,140 --> 00:11:13,750
the team and they have to try as much as

00:11:11,410 --> 00:11:15,970
possible to not let that position of

00:11:13,750 --> 00:11:19,840
leadership that they're put in and not

00:11:15,970 --> 00:11:21,040
let that affect their view on the

00:11:19,840 --> 00:11:24,300
opinions of the other team members

00:11:21,040 --> 00:11:27,220
because we want to favour consensus over

00:11:24,300 --> 00:11:30,940
just one thing having your preference be

00:11:27,220 --> 00:11:32,500
overriding everything else and finally

00:11:30,940 --> 00:11:34,840
there's a few other roles that might

00:11:32,500 --> 00:11:36,220
apply depending on needs you might need

00:11:34,840 --> 00:11:38,940
a designer for something you might need

00:11:36,220 --> 00:11:41,830
a documentation writer there's always

00:11:38,940 --> 00:11:44,680
space for those disciplines depending on

00:11:41,830 --> 00:11:46,900
the needs of each project so we've

00:11:44,680 --> 00:11:48,610
talked a lot or we've mentioned pairing

00:11:46,900 --> 00:11:51,330
a lot so far we haven't really explained

00:11:48,610 --> 00:11:53,590
what that is or what we mean by pairing

00:11:51,330 --> 00:11:56,260
technically not all cloud foundry teams

00:11:53,590 --> 00:11:59,440
pair or have to pair it's actually up to

00:11:56,260 --> 00:12:01,330
the PMC to decide whether each project

00:11:59,440 --> 00:12:03,430
is going to use the pairing model or the

00:12:01,330 --> 00:12:04,510
distributed contribution model which is

00:12:03,430 --> 00:12:07,210
more similar to other open-source

00:12:04,510 --> 00:12:08,260
projects you might be familiar with but

00:12:07,210 --> 00:12:10,330
what we're going to talk about mostly

00:12:08,260 --> 00:12:11,680
here is pairing because because it's

00:12:10,330 --> 00:12:13,900
what makes cloud foundry development a

00:12:11,680 --> 00:12:17,590
little bit different and it's what all

00:12:13,900 --> 00:12:19,180
all the runtime core teams use so it's

00:12:17,590 --> 00:12:21,850
very very common within cloud foundry

00:12:19,180 --> 00:12:23,560
core development so what does it mean to

00:12:21,850 --> 00:12:25,720
pair for us it means you have one

00:12:23,560 --> 00:12:28,090
computer you have two engineers working

00:12:25,720 --> 00:12:30,460
at that one shared computer you often

00:12:28,090 --> 00:12:32,080
have two monitors two mice two keyboards

00:12:30,460 --> 00:12:35,050
but you're both controlling the same

00:12:32,080 --> 00:12:37,180
computer everything that you work on

00:12:35,050 --> 00:12:39,310
you're collaborating with your pair on

00:12:37,180 --> 00:12:40,570
so you pick off a story from the backlog

00:12:39,310 --> 00:12:42,370
figure out what you're going to work on

00:12:40,570 --> 00:12:44,020
that day and you immediately start

00:12:42,370 --> 00:12:46,330
talking about it it's like regular

00:12:44,020 --> 00:12:47,770
development instead of but instead of

00:12:46,330 --> 00:12:49,890
everything happening in your head it's

00:12:47,770 --> 00:12:52,150
happening for your mouth you're like

00:12:49,890 --> 00:12:54,660
getting feedback constantly from your

00:12:52,150 --> 00:12:56,500
pair you're constantly improvising

00:12:54,660 --> 00:13:00,660
improving your ideas and getting

00:12:56,500 --> 00:13:03,100
feedback and iterating because we all

00:13:00,660 --> 00:13:04,660
need to be pairing on all the stuff that

00:13:03,100 --> 00:13:06,070
we write it means our schedule is a

00:13:04,660 --> 00:13:08,590
little bit stricter than most other

00:13:06,070 --> 00:13:11,380
software engineering schedules we have

00:13:08,590 --> 00:13:13,660
these two for our pairing sessions with

00:13:11,380 --> 00:13:15,100
lunch in between we all start

00:13:13,660 --> 00:13:17,350
work at the same time we all leave at

00:13:15,100 --> 00:13:19,210
the same time which is a little bit

00:13:17,350 --> 00:13:20,560
stricter than what you might be used to

00:13:19,210 --> 00:13:22,570
but it's kind of nice because it means

00:13:20,560 --> 00:13:25,420
you work exactly 40 hours a week and not

00:13:22,570 --> 00:13:27,190
more and the pairing time is super super

00:13:25,420 --> 00:13:28,480
concentrated you are focused you are

00:13:27,190 --> 00:13:31,210
pairing there are very few meetings

00:13:28,480 --> 00:13:32,820
interrupting you and it's generally much

00:13:31,210 --> 00:13:36,520
more focused that when I've experienced

00:13:32,820 --> 00:13:38,860
individual coding there are a lot of

00:13:36,520 --> 00:13:40,870
reasons why we choose to pair this is

00:13:38,860 --> 00:13:42,940
something you can probably see on in

00:13:40,870 --> 00:13:44,800
agile conferences or an agile books

00:13:42,940 --> 00:13:48,100
there's a big list of reasons why people

00:13:44,800 --> 00:13:51,160
should pair personally I find that

00:13:48,100 --> 00:13:52,450
pairing makes things go way faster even

00:13:51,160 --> 00:13:54,370
though you have two people working on

00:13:52,450 --> 00:13:56,830
what you theoretically could have one

00:13:54,370 --> 00:13:58,840
person working on the velocity is so

00:13:56,830 --> 00:14:01,420
much faster than what I've seen working

00:13:58,840 --> 00:14:04,120
on other in other software engineering

00:14:01,420 --> 00:14:06,160
models so I recommend if you haven't

00:14:04,120 --> 00:14:08,590
tried this before to try it out and see

00:14:06,160 --> 00:14:10,510
how it works for you I've just been

00:14:08,590 --> 00:14:13,270
super impressed seeing it firsthand

00:14:10,510 --> 00:14:15,040
living it every day it's very very hard

00:14:13,270 --> 00:14:16,930
in the beginning it takes like a couple

00:14:15,040 --> 00:14:18,700
of months I'd say to really get used to

00:14:16,930 --> 00:14:20,470
it and not be socially exhausted every

00:14:18,700 --> 00:14:23,200
day because it is a lot more intense

00:14:20,470 --> 00:14:24,490
both socially and technically and it's

00:14:23,200 --> 00:14:26,680
tough to get used to in the beginning

00:14:24,490 --> 00:14:30,330
but then after that initial period it's

00:14:26,680 --> 00:14:30,330
awesome like you feel like you're flying

00:14:30,840 --> 00:14:35,110
one of our other core principles of how

00:14:33,880 --> 00:14:37,660
we do development is test-driven

00:14:35,110 --> 00:14:38,980
development or TDD that means that when

00:14:37,660 --> 00:14:41,140
you first sit down to write a story

00:14:38,980 --> 00:14:43,900
instead of just coding the solution up

00:14:41,140 --> 00:14:45,640
you first write a failing test the idea

00:14:43,900 --> 00:14:47,260
is that that test will go green once

00:14:45,640 --> 00:14:49,570
you've set aside what that story

00:14:47,260 --> 00:14:51,430
requires from you by doing this first

00:14:49,570 --> 00:14:53,560
before you write the implementation

00:14:51,430 --> 00:14:57,010
you're not letting the implementation

00:14:53,560 --> 00:14:59,140
bias what you later test it also keeps

00:14:57,010 --> 00:15:01,060
you focused and keeps you writing just

00:14:59,140 --> 00:15:03,040
the code you need to make that test go

00:15:01,060 --> 00:15:05,680
green it keeps you from over engineering

00:15:03,040 --> 00:15:07,930
things too quickly it keeps you from

00:15:05,680 --> 00:15:09,460
writing code that isn't tested and in

00:15:07,930 --> 00:15:14,770
general this is a practice we follow

00:15:09,460 --> 00:15:16,750
throughout Cloud Foundry another key

00:15:14,770 --> 00:15:19,540
point is continuous integration or CI

00:15:16,750 --> 00:15:21,730
this is your pipeline so when you push a

00:15:19,540 --> 00:15:23,050
bit of code the idea is that you push to

00:15:21,730 --> 00:15:24,880
something like a develop branch for

00:15:23,050 --> 00:15:26,070
example and then it goes through a

00:15:24,880 --> 00:15:28,650
series of tests

00:15:26,070 --> 00:15:30,840
then once it passes these tests I might

00:15:28,650 --> 00:15:33,840
get merged up with your master branch or

00:15:30,840 --> 00:15:37,050
it might get released into the public by

00:15:33,840 --> 00:15:38,790
doing this we ensure that whatever we

00:15:37,050 --> 00:15:41,220
put out to the world has been rigorously

00:15:38,790 --> 00:15:42,420
tested and we are confident about it

00:15:41,220 --> 00:15:45,840
where your confidence not going to break

00:15:42,420 --> 00:15:47,910
people's systems and and it's also

00:15:45,840 --> 00:15:50,100
important to keep this thing clear and

00:15:47,910 --> 00:15:51,420
green and stuff moving through so if we

00:15:50,100 --> 00:15:52,620
have to release something quickly that

00:15:51,420 --> 00:15:54,300
needs to take priority over everything

00:15:52,620 --> 00:15:57,120
else it can rush through this pipeline

00:15:54,300 --> 00:15:58,860
and everything goes well in the actual

00:15:57,120 --> 00:16:01,800
Cloud Foundry programming offices you'll

00:15:58,860 --> 00:16:03,630
often see these CI screens displayed in

00:16:01,800 --> 00:16:06,360
very large monitors so everyone can see

00:16:03,630 --> 00:16:07,650
if the CI is green or if it's red and

00:16:06,360 --> 00:16:09,720
everyone should start freaking out or

00:16:07,650 --> 00:16:11,670
people get a sense of like you know

00:16:09,720 --> 00:16:13,470
being red is okay but if it's red all

00:16:11,670 --> 00:16:14,790
the time then people get a sense like oh

00:16:13,470 --> 00:16:20,430
there's something really wrong here as

00:16:14,790 --> 00:16:23,190
always on people's minds we have a few

00:16:20,430 --> 00:16:24,510
meetings not too many but I'm gonna talk

00:16:23,190 --> 00:16:29,250
about a few of them

00:16:24,510 --> 00:16:31,980
first of all stand-ups we have them

00:16:29,250 --> 00:16:34,290
daily they're very quick they're it's an

00:16:31,980 --> 00:16:36,270
opportunity for each person on the team

00:16:34,290 --> 00:16:38,220
should tell the rest of team what they

00:16:36,270 --> 00:16:41,460
accomplished or what they struggled with

00:16:38,220 --> 00:16:45,090
the previous day it's a perfect time for

00:16:41,460 --> 00:16:46,770
you to ask for help and to notify the

00:16:45,090 --> 00:16:50,160
team of a change in a workflow or just

00:16:46,770 --> 00:16:52,770
broadcast any type of information in a

00:16:50,160 --> 00:16:54,330
very quick manner again these don't take

00:16:52,770 --> 00:16:55,700
very long usually five to ten minutes

00:16:54,330 --> 00:16:58,280
depending on the size of your team

00:16:55,700 --> 00:17:01,950
usually led by the anchor

00:16:58,280 --> 00:17:03,240
although delegating the running out

00:17:01,950 --> 00:17:06,630
these meetings is something that the

00:17:03,240 --> 00:17:08,780
anchor might do to help bring the rest

00:17:06,630 --> 00:17:12,990
of team up to speed into the process and

00:17:08,780 --> 00:17:16,709
have other people also prepared to take

00:17:12,990 --> 00:17:19,439
over that kind of role in the future um

00:17:16,709 --> 00:17:22,110
on top of talking about what we did the

00:17:19,439 --> 00:17:24,120
previous day we also talked a little bit

00:17:22,110 --> 00:17:26,520
about what we're gonna do on the day

00:17:24,120 --> 00:17:30,510
that is starting because these happen in

00:17:26,520 --> 00:17:32,910
the morning so we assign pairs

00:17:30,510 --> 00:17:34,440
who's gonna pair with who that again can

00:17:32,910 --> 00:17:37,590
be done by the anchor by someone else on

00:17:34,440 --> 00:17:39,369
the team and it's really interesting

00:17:37,590 --> 00:17:41,389
that we actually do this

00:17:39,369 --> 00:17:44,029
depending on the team what we try to do

00:17:41,389 --> 00:17:46,309
this is almost daily where if i pair

00:17:44,029 --> 00:17:47,350
with Jen yesterday I'm unlikely to ferry

00:17:46,309 --> 00:17:51,350
with her again

00:17:47,350 --> 00:17:54,980
today and that helps us spread knowledge

00:17:51,350 --> 00:17:57,649
really fast across all the engineers on

00:17:54,980 --> 00:17:59,960
the team so that's an opportunity to do

00:17:57,649 --> 00:18:02,559
a general sync up hey we're gonna have a

00:17:59,960 --> 00:18:05,559
retro today or gonna have this other

00:18:02,559 --> 00:18:07,999
meeting today or something like that and

00:18:05,559 --> 00:18:10,070
also an opportunity for the p.m. to

00:18:07,999 --> 00:18:11,840
notify the team of something important

00:18:10,070 --> 00:18:15,649
that has come up say you have a security

00:18:11,840 --> 00:18:17,029
vulnerability in each patch you're gonna

00:18:15,649 --> 00:18:20,570
you're gonna want to talk about that

00:18:17,029 --> 00:18:23,210
during that meeting but really straight

00:18:20,570 --> 00:18:25,399
forward another meeting we have is the

00:18:23,210 --> 00:18:30,019
iteration planning meeting we call it

00:18:25,399 --> 00:18:31,340
IPM for short that's held weekly usually

00:18:30,019 --> 00:18:34,159
in the beginning of the week on Mondays

00:18:31,340 --> 00:18:36,529
it's an hour long for most teams and

00:18:34,159 --> 00:18:41,359
this one is actually led by the product

00:18:36,529 --> 00:18:46,519
manager and it's preface by a quick over

00:18:41,359 --> 00:18:48,259
quick review of what the work is that

00:18:46,519 --> 00:18:52,580
the work that is currently being worked

00:18:48,259 --> 00:18:56,480
on to hash out any major blockers that

00:18:52,580 --> 00:18:59,029
you might have or broadcast some risk

00:18:56,480 --> 00:19:01,190
that you discovered or some story that

00:18:59,029 --> 00:19:05,350
is actually a little bit more difficult

00:19:01,190 --> 00:19:08,869
that you had foreseen before after that

00:19:05,350 --> 00:19:10,369
the jam is gonna go over each of the an

00:19:08,869 --> 00:19:11,989
estimator stories the stories that we

00:19:10,369 --> 00:19:13,940
haven't really talked about yet in

00:19:11,989 --> 00:19:17,210
detail about where that story came from

00:19:13,940 --> 00:19:19,730
was the user value why is that story up

00:19:17,210 --> 00:19:21,830
priority and then the engineers have an

00:19:19,730 --> 00:19:24,109
opportunity to discuss the risks and and

00:19:21,830 --> 00:19:26,539
how complicated they think that story is

00:19:24,109 --> 00:19:28,100
and then they estimate that story in a

00:19:26,539 --> 00:19:30,320
point value and we're going to talk

00:19:28,100 --> 00:19:36,019
about what point mean points mean in a

00:19:30,320 --> 00:19:39,049
second so during the IPM we use dual

00:19:36,019 --> 00:19:41,929
call pivotal tracker the project man and

00:19:39,049 --> 00:19:43,429
project management to that pivotal has

00:19:41,929 --> 00:19:45,710
been using for years and we use it on

00:19:43,429 --> 00:19:50,210
Cloud Foundry on every project pretty

00:19:45,710 --> 00:19:51,830
much and it allows you to divide your

00:19:50,210 --> 00:19:53,600
units work in three main categories

00:19:51,830 --> 00:19:56,690
chore

00:19:53,600 --> 00:20:00,470
which are almost always made by

00:19:56,690 --> 00:20:03,590
engineers and they're meant to track

00:20:00,470 --> 00:20:05,660
work that isn't directly user-facing

00:20:03,590 --> 00:20:07,700
you're not really delivering user value

00:20:05,660 --> 00:20:10,130
directly from implementing HR it might

00:20:07,700 --> 00:20:11,740
be something that speeds up your tests

00:20:10,130 --> 00:20:17,020
or improve some part of the code base

00:20:11,740 --> 00:20:20,960
and the value there is really in your

00:20:17,020 --> 00:20:23,990
long-term velocity of your project bugs

00:20:20,960 --> 00:20:25,850
as the name suggests or defects

00:20:23,990 --> 00:20:27,380
neither chores or bugs will receive

00:20:25,850 --> 00:20:30,110
point estimates because they're not

00:20:27,380 --> 00:20:32,090
actually delivering any user value a bug

00:20:30,110 --> 00:20:33,380
is just fixing something that should

00:20:32,090 --> 00:20:36,170
have worked in the first place so we

00:20:33,380 --> 00:20:39,290
don't actually assign point values to

00:20:36,170 --> 00:20:41,240
those things and then the really the

00:20:39,290 --> 00:20:43,430
main thing that we work on are the

00:20:41,240 --> 00:20:45,530
features and that's those are the things

00:20:43,430 --> 00:20:51,830
that are delivering direct to user

00:20:45,530 --> 00:20:53,570
facing functionality and those are those

00:20:51,830 --> 00:20:59,600
are the one the features that the PM

00:20:53,570 --> 00:21:03,560
will write or either by receiving input

00:20:59,600 --> 00:21:06,140
from the community or from the PMC's and

00:21:03,560 --> 00:21:10,430
get prioritized and then we assign point

00:21:06,140 --> 00:21:13,760
values to those and then points are

00:21:10,430 --> 00:21:16,610
actually a relative complexity of each

00:21:13,760 --> 00:21:20,090
feature they do not translate to time

00:21:16,610 --> 00:21:24,460
values at least not the way we use them

00:21:20,090 --> 00:21:27,620
in Cloud Foundry there are a notion of

00:21:24,460 --> 00:21:29,720
the the meaning of a point really

00:21:27,620 --> 00:21:32,000
depends on each team you might have a

00:21:29,720 --> 00:21:33,650
point might mean something on your team

00:21:32,000 --> 00:21:35,420
and might me something a little bit

00:21:33,650 --> 00:21:37,910
different on another team you might join

00:21:35,420 --> 00:21:39,230
but it what's important is when you join

00:21:37,910 --> 00:21:43,460
a team you really understand what that

00:21:39,230 --> 00:21:45,350
team means with each point so a lot of

00:21:43,460 --> 00:21:47,870
teams and at the Cloud Foundry what we

00:21:45,350 --> 00:21:51,410
used like point scales that go from one

00:21:47,870 --> 00:21:55,850
two three five eight or something like

00:21:51,410 --> 00:21:59,240
that and what time well time comes into

00:21:55,850 --> 00:22:01,070
play when you pick guest points and you

00:21:59,240 --> 00:22:03,680
spread them over weeks and that's where

00:22:01,070 --> 00:22:06,380
you get your velocity velocity is the

00:22:03,680 --> 00:22:09,230
average number of points that a team has

00:22:06,380 --> 00:22:11,600
been delivering over the past few weeks

00:22:09,230 --> 00:22:14,600
it doesn't necessarily represent how

00:22:11,600 --> 00:22:17,120
many stories you're going to get done in

00:22:14,600 --> 00:22:19,220
a week but it gives you a sense of how

00:22:17,120 --> 00:22:22,460
much can get done in a week and that's

00:22:19,220 --> 00:22:24,530
that's how the PM's will generally plan

00:22:22,460 --> 00:22:31,790
for like when can I get this feature

00:22:24,530 --> 00:22:34,910
delivered at a general level and then

00:22:31,790 --> 00:22:36,950
third meeting that we have regularly is

00:22:34,910 --> 00:22:39,800
the retrospective and we call it a retro

00:22:36,950 --> 00:22:41,450
for short also held weekly also an hour

00:22:39,800 --> 00:22:45,260
this is what happens at the end of the

00:22:41,450 --> 00:22:48,050
week we do this because a really core

00:22:45,260 --> 00:22:51,560
part of our process is our ability to

00:22:48,050 --> 00:22:55,850
iterate and to change be it in code or

00:22:51,560 --> 00:22:58,100
in our in the process itself so we run

00:22:55,850 --> 00:22:59,960
we have these meetings weekly where we

00:22:58,100 --> 00:23:03,110
talk about what went well during the

00:22:59,960 --> 00:23:05,920
week what didn't go so well something

00:23:03,110 --> 00:23:10,160
some things that we might want to change

00:23:05,920 --> 00:23:11,900
these meetings are led by the anchor or

00:23:10,160 --> 00:23:14,750
by someone else that they might assign

00:23:11,900 --> 00:23:16,790
and what's really important in retro is

00:23:14,750 --> 00:23:17,930
making sure that everyone is hurt and

00:23:16,790 --> 00:23:21,020
making sure that we come up with

00:23:17,930 --> 00:23:23,300
actionable things to do to solve the

00:23:21,020 --> 00:23:26,630
problems we noticed during one given

00:23:23,300 --> 00:23:27,950
week so how do we communicate within

00:23:26,630 --> 00:23:29,420
Cloud Foundry and how can you

00:23:27,950 --> 00:23:31,700
communicate with the Cloud Foundry

00:23:29,420 --> 00:23:33,530
community most of our day-to-day

00:23:31,700 --> 00:23:35,360
communication happens over slack that's

00:23:33,530 --> 00:23:38,270
where you can find each team has its own

00:23:35,360 --> 00:23:39,770
slack channel you can reach out to the

00:23:38,270 --> 00:23:41,810
team that you want but you know you need

00:23:39,770 --> 00:23:45,190
to talk to directly there we also have

00:23:41,810 --> 00:23:48,500
the CF dev mailing list for more broad

00:23:45,190 --> 00:23:51,950
questions something that might be a

00:23:48,500 --> 00:23:53,870
question that spans over lots of cloud

00:23:51,950 --> 00:23:56,000
foundry components or it's where we make

00:23:53,870 --> 00:23:57,590
our own internal announcements it's kind

00:23:56,000 --> 00:24:00,200
of a more official channel than our

00:23:57,590 --> 00:24:04,670
slack channels and we also use github a

00:24:00,200 --> 00:24:05,930
lot for code specific communication so

00:24:04,670 --> 00:24:08,000
let's say you want to get involved in

00:24:05,930 --> 00:24:10,910
cloud foundry you want to get some do

00:24:08,000 --> 00:24:13,010
some commits but you are not you know

00:24:10,910 --> 00:24:14,990
willing or able to make this kind of

00:24:13,010 --> 00:24:17,510
large commitment to go to a dojo and

00:24:14,990 --> 00:24:19,500
become a full-time contributor how do

00:24:17,510 --> 00:24:22,080
you still contribute

00:24:19,500 --> 00:24:24,840
you can if you have like a team that

00:24:22,080 --> 00:24:27,270
wants to develop some major component

00:24:24,840 --> 00:24:29,220
and add it to Cloud Foundry I think the

00:24:27,270 --> 00:24:32,010
best place for that is on the CF dev

00:24:29,220 --> 00:24:34,410
mailing list if you send everyone your

00:24:32,010 --> 00:24:35,760
idea say hey is this does this fit

00:24:34,410 --> 00:24:36,660
within Cloud Foundry what do people

00:24:35,760 --> 00:24:38,730
think of this you'll get lots of

00:24:36,660 --> 00:24:41,850
feedback and eventually figure out a way

00:24:38,730 --> 00:24:44,280
to get it incorporated if it fits if you

00:24:41,850 --> 00:24:46,860
have a bug you want a report or

00:24:44,280 --> 00:24:49,860
something that's specific to the actual

00:24:46,860 --> 00:24:51,810
code I'd recommend to do that on github

00:24:49,860 --> 00:24:53,670
directly in the repository that you are

00:24:51,810 --> 00:24:55,380
concerned with and if you want to have

00:24:53,670 --> 00:24:56,970
like a small feature that scoped to just

00:24:55,380 --> 00:24:58,170
one team and you don't think it's going

00:24:56,970 --> 00:24:59,490
to be very controversial it's not the

00:24:58,170 --> 00:25:02,580
kind of thing that warrants the entire

00:24:59,490 --> 00:25:04,890
Cloud Foundry community putting getting

00:25:02,580 --> 00:25:08,820
involved in it's probably best to go and

00:25:04,890 --> 00:25:11,080
slack and talk to the PM of the team

00:25:08,820 --> 00:25:13,400
where you want to add this feature to

00:25:11,080 --> 00:25:15,750
[Music]

00:25:13,400 --> 00:25:18,180
but that we want to welcome everyone

00:25:15,750 --> 00:25:20,040
again who hasn't already been a part of

00:25:18,180 --> 00:25:21,720
the Cloud Foundry community and we're

00:25:20,040 --> 00:25:23,780
happy to take any questions at this

00:25:21,720 --> 00:25:23,780
point

00:25:32,140 --> 00:25:36,910
how does pairing work if you are doing

00:25:34,150 --> 00:25:38,500
Home Office yeah it's a great question

00:25:36,910 --> 00:25:40,510
so the question was how does pairing

00:25:38,500 --> 00:25:42,220
work when your remote we have a lot of

00:25:40,510 --> 00:25:44,620
tools for that there's like the tech

00:25:42,220 --> 00:25:46,240
side of it which is things like I've

00:25:44,620 --> 00:25:47,740
used like screen Harrow before which

00:25:46,240 --> 00:25:49,840
allows you to share your screen and have

00:25:47,740 --> 00:25:53,440
two separate Mouse cursors so you can

00:25:49,840 --> 00:25:55,150
kind of work pretty well remotely or

00:25:53,440 --> 00:25:58,390
using something like team ox or teammate

00:25:55,150 --> 00:26:01,480
for terminal sharing we use a ton of

00:25:58,390 --> 00:26:03,730
video and voice apps for doing all this

00:26:01,480 --> 00:26:05,950
that all this stuff there's also the

00:26:03,730 --> 00:26:07,780
culture of remote development it's

00:26:05,950 --> 00:26:09,010
really important and this is what I've

00:26:07,780 --> 00:26:10,120
experienced because I've been remote

00:26:09,010 --> 00:26:12,580
pretty much the whole time I've been on

00:26:10,120 --> 00:26:14,290
Cloud Foundry except for my dojo I've

00:26:12,580 --> 00:26:16,540
experienced that people are very remote

00:26:14,290 --> 00:26:19,030
friendly and that's critical to having

00:26:16,540 --> 00:26:20,770
remote cloud foundry development work

00:26:19,030 --> 00:26:23,680
well is that the people that are locally

00:26:20,770 --> 00:26:25,510
in the city where the project is based

00:26:23,680 --> 00:26:26,890
are always looking out for the remote

00:26:25,510 --> 00:26:28,840
person making sure they have a chance to

00:26:26,890 --> 00:26:31,000
talk making sure they don't talk over

00:26:28,840 --> 00:26:32,950
them accidentally in these like video

00:26:31,000 --> 00:26:34,510
conferencing meetings and I don't know

00:26:32,950 --> 00:26:36,730
if lawn has any other thoughts yeah

00:26:34,510 --> 00:26:38,830
that's the only thing they would have to

00:26:36,730 --> 00:26:40,180
say to say while pairing remotely you

00:26:38,830 --> 00:26:43,060
just have to be a little bit more vocal

00:26:40,180 --> 00:26:45,340
because you don't have the body cues

00:26:43,060 --> 00:26:49,150
that you have in person but that's

00:26:45,340 --> 00:26:51,820
something you get used to and you as

00:26:49,150 --> 00:26:53,770
they're well I as the remote person have

00:26:51,820 --> 00:26:56,140
to learn to call people out when they're

00:26:53,770 --> 00:26:58,150
not sending those verbal cues that I

00:26:56,140 --> 00:27:00,040
can't see on their face but that's uh

00:26:58,150 --> 00:27:02,140
that's just something you get used to

00:27:00,040 --> 00:27:04,930
and it works really well actually and

00:27:02,140 --> 00:27:06,910
I've seen some teams have a video like

00:27:04,930 --> 00:27:08,830
it this varies per team but some teams

00:27:06,910 --> 00:27:10,330
choose to have a constant video running

00:27:08,830 --> 00:27:12,220
the entire day so you can see the

00:27:10,330 --> 00:27:13,570
person's facial expressions and some

00:27:12,220 --> 00:27:14,650
people tell me they like it specifically

00:27:13,570 --> 00:27:15,460
because when they make jokes they want

00:27:14,650 --> 00:27:17,050
to see if the person is actually

00:27:15,460 --> 00:27:17,980
laughing or like fake laughing or

00:27:17,050 --> 00:27:20,020
something like that you know there's

00:27:17,980 --> 00:27:21,880
some this human element to seeing a face

00:27:20,020 --> 00:27:25,450
on the team I'm on right now the

00:27:21,880 --> 00:27:27,730
services API team we have a video

00:27:25,450 --> 00:27:30,220
conference running the entire day so

00:27:27,730 --> 00:27:32,350
even the people that are locally on-site

00:27:30,220 --> 00:27:34,510
and in this case London they're always

00:27:32,350 --> 00:27:36,100
on video and they're just typing away

00:27:34,510 --> 00:27:37,600
we're all muted the whole day but we can

00:27:36,100 --> 00:27:39,610
see each other's faces we can see who's

00:27:37,600 --> 00:27:40,750
sitting down who stood up to go get a

00:27:39,610 --> 00:27:42,640
coffee or something like that and it

00:27:40,750 --> 00:27:44,800
feels a little bit more normal like

00:27:42,640 --> 00:27:51,470
you're not remote when you do that

00:27:44,800 --> 00:27:54,380
there are other questions it doesn't

00:27:51,470 --> 00:27:54,710
look like it okay well thank you all for

00:27:54,380 --> 00:27:55,910
coming

00:27:54,710 --> 00:27:56,080
[Music]

00:27:55,910 --> 00:27:59,170
[Applause]

00:27:56,080 --> 00:27:59,170

YouTube URL: https://www.youtube.com/watch?v=LYg5yUcwvj4


