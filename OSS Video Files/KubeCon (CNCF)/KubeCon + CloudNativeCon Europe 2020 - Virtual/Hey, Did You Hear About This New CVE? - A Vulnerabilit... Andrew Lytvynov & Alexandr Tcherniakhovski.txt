Title: Hey, Did You Hear About This New CVE? - A Vulnerabilit... Andrew Lytvynov & Alexandr Tcherniakhovski
Publication date: 2020-08-28
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Hey, Did You Hear About This New CVE? - A Vulnerability Response Playbook - Andrew Lytvynov, Independent & Alexandr Tcherniakhovski, Google

Kubernetes provides a lot of great ways to harden the security of your infrastructure. But despite how much you have it locked down, things will inevitably go wrong. Hope is not a strategy, so you need a contingency plan. In this prescriptive talk, you will learn how to prepare for complex vulnerabilities (like the Intel speculative execution or Go HTTP/2 DoS vulnerabilities), mitigate them and clean up afterwards. We’ll share our experiences with the GKE fleet, dealing with newly announced vulnerabilities, and lessons learned balancing both security and reliability of workloads. You will learn how to develop a response playbook for vulnerabilities. You will also learn about the tools that Kubernetes provides to help make your vulnerability response less hectic, such as audit logs, network policies and RBAC.  This talk will not cover live attacks (attackers in your infrastructure).

https://sched.co/ZerA
Captions: 
	00:00:00,080 --> 00:00:04,240
hello and welcome to our talk my name is

00:00:02,800 --> 00:00:05,920
alex chernicholski

00:00:04,240 --> 00:00:07,919
and i will be co-presenting today with

00:00:05,920 --> 00:00:10,160
andrew ludwinov

00:00:07,919 --> 00:00:10,960
for a number of years andrew and i have

00:00:10,160 --> 00:00:13,920
worked together

00:00:10,960 --> 00:00:14,320
on gke's security team i'm still on the

00:00:13,920 --> 00:00:17,520
team

00:00:14,320 --> 00:00:20,000
and andrew recently joined gravitational

00:00:17,520 --> 00:00:22,720
as part of our on-call duties andrew and

00:00:20,000 --> 00:00:24,240
i mitigated multiple security incidents

00:00:22,720 --> 00:00:26,320
and we believe that we have learned

00:00:24,240 --> 00:00:27,599
something from that experience

00:00:26,320 --> 00:00:30,240
and would like to share it with you

00:00:27,599 --> 00:00:31,840
today but before we start

00:00:30,240 --> 00:00:34,079
we would like to tell you a few years

00:00:31,840 --> 00:00:34,079
back

00:00:35,200 --> 00:00:41,920
in 1935 boeing model 299

00:00:38,719 --> 00:00:43,440
could fly faster cover longer distances

00:00:41,920 --> 00:00:45,840
and carry more weight than his

00:00:43,440 --> 00:00:47,920
competitors

00:00:45,840 --> 00:00:49,600
therefore the flight competition where

00:00:47,920 --> 00:00:50,640
the winner would be awarded a defense

00:00:49,600 --> 00:00:53,680
contract

00:00:50,640 --> 00:00:56,480
was supposed to be just a formality

00:00:53,680 --> 00:00:57,120
however model 299 crashed during the

00:00:56,480 --> 00:00:59,680
elect

00:00:57,120 --> 00:01:01,600
during the dam of flight the

00:00:59,680 --> 00:01:04,080
investigation showed that the crash was

00:01:01,600 --> 00:01:06,159
due to the pilot's error

00:01:04,080 --> 00:01:07,200
this is despite the fact that the pilot

00:01:06,159 --> 00:01:09,200
major proper p

00:01:07,200 --> 00:01:10,720
hill was one of the most experienced

00:01:09,200 --> 00:01:13,760
test pilots in the usc

00:01:10,720 --> 00:01:15,439
air force at that time furthermore the

00:01:13,760 --> 00:01:17,119
investigation concluded that the plane

00:01:15,439 --> 00:01:19,840
was substantially more complex

00:01:17,119 --> 00:01:21,439
than the previous models it seemed like

00:01:19,840 --> 00:01:23,920
it was too much of a plane for one

00:01:21,439 --> 00:01:27,119
person to fly

00:01:23,920 --> 00:01:29,040
boeing did not get the contract and

00:01:27,119 --> 00:01:32,479
almost went bankrupt

00:01:29,040 --> 00:01:34,320
as the result nevertheless several test

00:01:32,479 --> 00:01:35,759
pilots were convinced that the plane

00:01:34,320 --> 00:01:38,479
could be flown safely

00:01:35,759 --> 00:01:41,600
and precedent was further investigation

00:01:38,479 --> 00:01:43,360
and testing

00:01:41,600 --> 00:01:45,200
the result of their investigation was an

00:01:43,360 --> 00:01:48,320
incredible piece of technology

00:01:45,200 --> 00:01:52,079
a flight checklist in the end

00:01:48,320 --> 00:01:55,360
checklists allowed model 299 to fly

00:01:52,079 --> 00:01:57,119
2.9 million kilometers without one

00:01:55,360 --> 00:02:00,320
incident

00:01:57,119 --> 00:02:02,399
fast forward to apollo 12 lunar landing

00:02:00,320 --> 00:02:04,000
and we see that checklists have become a

00:02:02,399 --> 00:02:08,160
norm in the aviation

00:02:04,000 --> 00:02:10,319
and space exploration industries

00:02:08,160 --> 00:02:12,560
furthermore the value of checklists is

00:02:10,319 --> 00:02:14,800
now well understood in fields other than

00:02:12,560 --> 00:02:17,440
aviation

00:02:14,800 --> 00:02:19,120
the who surgical safety checklist which

00:02:17,440 --> 00:02:20,800
contains 19 items

00:02:19,120 --> 00:02:22,400
has shown significant reduction in

00:02:20,800 --> 00:02:24,640
mortality and is now

00:02:22,400 --> 00:02:25,599
used by my by a majority of surgical

00:02:24,640 --> 00:02:28,400
providers

00:02:25,599 --> 00:02:28,400
around the world

00:02:29,120 --> 00:02:34,319
so what do checklists have to do with

00:02:30,720 --> 00:02:34,319
preparing for a security incident

00:02:34,400 --> 00:02:39,680
gt security team is frequently engaged

00:02:36,400 --> 00:02:40,879
in mitigating kubernetes vulnerabilities

00:02:39,680 --> 00:02:42,879
what we have learned from this

00:02:40,879 --> 00:02:45,200
experience is that even despite having

00:02:42,879 --> 00:02:47,840
access to highly skilled engineers

00:02:45,200 --> 00:02:51,040
and good tooling we almost always feel

00:02:47,840 --> 00:02:52,480
like we've missed something very basic

00:02:51,040 --> 00:02:54,400
this is when we thought about creating

00:02:52,480 --> 00:02:56,160
checklists

00:02:54,400 --> 00:02:57,760
note that we don't want to trivialize

00:02:56,160 --> 00:02:59,680
the process

00:02:57,760 --> 00:03:02,000
by definition vulnerabilities are

00:02:59,680 --> 00:03:03,920
unpredictable and complex

00:03:02,000 --> 00:03:05,760
thus no checklist will replace the need

00:03:03,920 --> 00:03:08,560
for deep technical expertise

00:03:05,760 --> 00:03:11,760
and creativity typically required during

00:03:08,560 --> 00:03:11,760
the mitigation process

00:03:12,879 --> 00:03:16,840
please note that in the context of this

00:03:14,800 --> 00:03:18,080
talk we consider the discovery of a

00:03:16,840 --> 00:03:20,400
vulnerability

00:03:18,080 --> 00:03:23,040
within any of our production components

00:03:20,400 --> 00:03:25,200
to be a security incident

00:03:23,040 --> 00:03:26,319
other security teams may only declare

00:03:25,200 --> 00:03:28,799
security incidents

00:03:26,319 --> 00:03:33,200
only after some evidence of an active

00:03:28,799 --> 00:03:34,879
attack has been produced

00:03:33,200 --> 00:03:36,720
before sharing some of the pre-incident

00:03:34,879 --> 00:03:38,080
checklists that we created

00:03:36,720 --> 00:03:39,599
we'd like to point out some of the

00:03:38,080 --> 00:03:42,239
challenges involved in handling

00:03:39,599 --> 00:03:43,920
incidents in kubernetes

00:03:42,239 --> 00:03:45,519
fundamentally kubernetes is a

00:03:43,920 --> 00:03:47,680
distributed system

00:03:45,519 --> 00:03:49,040
which implies that a successful attacker

00:03:47,680 --> 00:03:50,720
will most likely

00:03:49,040 --> 00:03:52,239
need to traverse through several rings

00:03:50,720 --> 00:03:54,560
of your infrastructure

00:03:52,239 --> 00:03:57,280
to reach the ultimate goal which we

00:03:54,560 --> 00:03:59,519
assume to be users data

00:03:57,280 --> 00:04:00,319
therefore the task of investigating an

00:03:59,519 --> 00:04:02,480
incident

00:04:00,319 --> 00:04:06,000
could in many cases be reduced to

00:04:02,480 --> 00:04:07,840
correlating logs on multiple systems

00:04:06,000 --> 00:04:10,000
thus tracing attackers path from

00:04:07,840 --> 00:04:13,280
exploiting the initial vulnerability

00:04:10,000 --> 00:04:14,000
to their ultimate target however as you

00:04:13,280 --> 00:04:18,160
can see from this

00:04:14,000 --> 00:04:18,160
list we have many challenges ahead of us

00:04:18,959 --> 00:04:22,079
we are about to present four

00:04:20,639 --> 00:04:24,160
pre-incident checklists

00:04:22,079 --> 00:04:26,320
that we believe will simplify the task

00:04:24,160 --> 00:04:28,000
of assessing your readiness

00:04:26,320 --> 00:04:30,320
as you can see that each checklist

00:04:28,000 --> 00:04:32,960
corresponds to a layer within kubernetes

00:04:30,320 --> 00:04:32,960
infrastructure

00:04:33,600 --> 00:04:37,120
as we go through this checklist they

00:04:35,440 --> 00:04:38,800
will most likely appear to you as some

00:04:37,120 --> 00:04:41,360
general hardening guidance

00:04:38,800 --> 00:04:42,320
which you probably already heard before

00:04:41,360 --> 00:04:44,080
and indeed

00:04:42,320 --> 00:04:45,680
the best strategy for preparing for an

00:04:44,080 --> 00:04:47,360
incident is to reduce

00:04:45,680 --> 00:04:49,919
the chances of it happening in the first

00:04:47,360 --> 00:04:50,880
place and hardening of kubernetes

00:04:49,919 --> 00:04:54,479
infrastructure

00:04:50,880 --> 00:04:54,479
is the best approach for accomplishing

00:04:54,840 --> 00:04:58,080
this

00:04:56,000 --> 00:05:00,880
in the context of hardening you may have

00:04:58,080 --> 00:05:03,520
heard about kubernetes ces benchmark

00:05:00,880 --> 00:05:05,680
which is in fact a checklist that is

00:05:03,520 --> 00:05:06,479
designed to assess the overall security

00:05:05,680 --> 00:05:10,479
posture

00:05:06,479 --> 00:05:13,280
of your kubernetes environment in gke

00:05:10,479 --> 00:05:14,880
we take ces results very seriously and

00:05:13,280 --> 00:05:17,840
strive to get to 100

00:05:14,880 --> 00:05:19,520
compliance so if you're already using

00:05:17,840 --> 00:05:21,360
say as benchmark

00:05:19,520 --> 00:05:25,840
then that is great you're already taking

00:05:21,360 --> 00:05:25,840
advantage of the checklist mentality

00:05:25,919 --> 00:05:29,919
in this talk we'll take a slightly

00:05:27,520 --> 00:05:31,840
different view on hardening

00:05:29,919 --> 00:05:33,759
we will zero in on the configuration

00:05:31,840 --> 00:05:36,080
settings of kubernetes

00:05:33,759 --> 00:05:38,639
that we believe not only will reduce the

00:05:36,080 --> 00:05:40,000
chances of a compromise but are also

00:05:38,639 --> 00:05:42,800
particularly valuable

00:05:40,000 --> 00:05:44,400
in generating signals indicative of an

00:05:42,800 --> 00:05:46,639
attack

00:05:44,400 --> 00:05:47,680
in other words the checklists that we

00:05:46,639 --> 00:05:50,080
will offer

00:05:47,680 --> 00:05:51,440
once implemented are meant to force

00:05:50,080 --> 00:05:54,320
attackers to generate

00:05:51,440 --> 00:05:56,960
signals which we could detect and react

00:05:54,320 --> 00:05:56,960
accordingly

00:05:57,919 --> 00:06:01,360
the last thing that you want to learn

00:05:59,440 --> 00:06:03,440
when mitigating an incident

00:06:01,360 --> 00:06:05,680
is that the vulnerable service has

00:06:03,440 --> 00:06:08,479
sensitive cube api permissions

00:06:05,680 --> 00:06:11,360
which which it actually did not need

00:06:08,479 --> 00:06:13,840
essentially this is a gift to attackers

00:06:11,360 --> 00:06:15,520
therefore review our back profiles of

00:06:13,840 --> 00:06:17,360
all your critical services

00:06:15,520 --> 00:06:20,639
and ensure that they are assigned the

00:06:17,360 --> 00:06:23,360
minimum set of permissions required

00:06:20,639 --> 00:06:25,600
how do you do that though well one way

00:06:23,360 --> 00:06:26,639
to find this out is to enable cube api

00:06:25,600 --> 00:06:28,160
server audit log

00:06:26,639 --> 00:06:30,000
and observe the request that your

00:06:28,160 --> 00:06:32,560
service is making under normal

00:06:30,000 --> 00:06:32,560
conditions

00:06:33,440 --> 00:06:37,520
we also need to ensure that access to

00:06:35,360 --> 00:06:39,600
sensitive resources like secrets

00:06:37,520 --> 00:06:41,680
is audited for both successful and

00:06:39,600 --> 00:06:43,759
failed attempts

00:06:41,680 --> 00:06:45,360
remember attackers may not know if the

00:06:43,759 --> 00:06:47,039
compromise component

00:06:45,360 --> 00:06:48,560
has the permissions for these sensitive

00:06:47,039 --> 00:06:50,080
resources

00:06:48,560 --> 00:06:51,680
however they will most likely try

00:06:50,080 --> 00:06:53,120
accessing them anyway

00:06:51,680 --> 00:06:55,680
and this is our opportunity for

00:06:53,120 --> 00:06:55,680
detection

00:06:57,599 --> 00:07:01,360
luckily attackers can control which

00:06:59,440 --> 00:07:03,120
component of a service is exposed to a

00:07:01,360 --> 00:07:04,800
vulnerability

00:07:03,120 --> 00:07:06,800
therefore most likely they will need to

00:07:04,800 --> 00:07:08,400
pivot from a vulnerable component

00:07:06,800 --> 00:07:11,680
which may not be of any direct interest

00:07:08,400 --> 00:07:13,759
to them to their ultimate target

00:07:11,680 --> 00:07:15,280
in this act of lateral traversal

00:07:13,759 --> 00:07:16,720
attackers will attempt to establish

00:07:15,280 --> 00:07:19,039
network connections

00:07:16,720 --> 00:07:22,160
to the surrounding components and this

00:07:19,039 --> 00:07:24,639
is again our opportunity for detection

00:07:22,160 --> 00:07:26,240
if we know that components x and y

00:07:24,639 --> 00:07:27,599
within a service are not supposed to

00:07:26,240 --> 00:07:29,919
talk to each other

00:07:27,599 --> 00:07:32,800
then such connection attempts are strong

00:07:29,919 --> 00:07:35,039
signals of an ongoing incident

00:07:32,800 --> 00:07:36,720
however to collect such signals we need

00:07:35,039 --> 00:07:38,960
to have thorough understanding

00:07:36,720 --> 00:07:41,280
of the expected network patterns within

00:07:38,960 --> 00:07:42,800
our services

00:07:41,280 --> 00:07:44,240
the second check on the list is very

00:07:42,800 --> 00:07:45,120
much related to the first one and

00:07:44,240 --> 00:07:47,599
assumes

00:07:45,120 --> 00:07:49,759
that we can recognize rogue network

00:07:47,599 --> 00:07:51,759
requests

00:07:49,759 --> 00:07:53,440
however we still need to make sure that

00:07:51,759 --> 00:07:57,039
we are collecting exporting and

00:07:53,440 --> 00:07:57,039
retaining such network logs

00:07:57,599 --> 00:08:01,199
note that raw log records may not be

00:08:00,080 --> 00:08:03,440
sufficient

00:08:01,199 --> 00:08:05,360
remember that kubernetes in kubernetes

00:08:03,440 --> 00:08:06,879
internal ip addresses are not guaranteed

00:08:05,360 --> 00:08:09,039
to persist

00:08:06,879 --> 00:08:10,400
therefore additional metadata may need

00:08:09,039 --> 00:08:12,720
to be attached

00:08:10,400 --> 00:08:14,800
to the to the network records for

00:08:12,720 --> 00:08:16,560
example attaching a pod name

00:08:14,800 --> 00:08:20,400
will definitely be more helpful than

00:08:16,560 --> 00:08:20,400
just looking at some random ip address

00:08:24,319 --> 00:08:28,560
kubernetes network policies is the

00:08:26,400 --> 00:08:30,319
mechanism that allows us to produce such

00:08:28,560 --> 00:08:32,080
logs

00:08:30,319 --> 00:08:33,599
furthermore network policy via the

00:08:32,080 --> 00:08:35,279
logging mode could be also used to

00:08:33,599 --> 00:08:37,919
produce the network flow diagrams for

00:08:35,279 --> 00:08:40,800
your services

00:08:37,919 --> 00:08:42,719
note that kubernetes default network

00:08:40,800 --> 00:08:43,599
policy does not natively support log

00:08:42,719 --> 00:08:45,600
actions

00:08:43,599 --> 00:08:49,600
however network policy engines like

00:08:45,600 --> 00:08:49,600
calico do support this functionality

00:08:52,000 --> 00:08:56,800
one more thing for the network checklist

00:08:54,720 --> 00:08:58,959
make sure not to enable host network

00:08:56,800 --> 00:09:00,720
setting in the pod spec

00:08:58,959 --> 00:09:02,320
unless you have very strong reasons to

00:09:00,720 --> 00:09:04,240
do so

00:09:02,320 --> 00:09:05,360
we noticed that this setting is often

00:09:04,240 --> 00:09:08,399
used to simplify

00:09:05,360 --> 00:09:10,560
intra node communications however

00:09:08,399 --> 00:09:13,360
in addition to removing the protection

00:09:10,560 --> 00:09:15,360
afforded by the network space isolation

00:09:13,360 --> 00:09:17,440
the setting also makes network log

00:09:15,360 --> 00:09:19,040
analysis much harder

00:09:17,440 --> 00:09:20,959
because source addresses are four

00:09:19,040 --> 00:09:22,480
components that are running in host

00:09:20,959 --> 00:09:25,680
network namespace

00:09:22,480 --> 00:09:27,920
will be the same that of the host

00:09:25,680 --> 00:09:31,200
thus making it more difficult to detect

00:09:27,920 --> 00:09:31,200
rock network connections

00:09:32,240 --> 00:09:36,000
running containers is root which is

00:09:34,000 --> 00:09:38,800
unfortunately the default

00:09:36,000 --> 00:09:40,399
is rarely necessary furthermore such

00:09:38,800 --> 00:09:42,080
containers are most susceptible to

00:09:40,399 --> 00:09:44,800
escape attacks

00:09:42,080 --> 00:09:46,000
you probably already knew that however

00:09:44,800 --> 00:09:48,000
what we also learned

00:09:46,000 --> 00:09:51,120
is that this default also makes it

00:09:48,000 --> 00:09:52,640
harder to examine os audit logs

00:09:51,120 --> 00:09:55,360
at the end of the day containers are

00:09:52,640 --> 00:09:56,560
still processes and when they all run as

00:09:55,360 --> 00:10:00,480
the same root user

00:09:56,560 --> 00:10:00,480
it makes it more difficult to audit them

00:10:01,600 --> 00:10:05,360
regarding linux capabilities our

00:10:04,160 --> 00:10:07,200
experience has shown

00:10:05,360 --> 00:10:08,720
that the capabilities included in the

00:10:07,200 --> 00:10:10,480
default docker profile are too

00:10:08,720 --> 00:10:12,240
permissive

00:10:10,480 --> 00:10:13,920
this default profile contains many

00:10:12,240 --> 00:10:16,160
capabilities that are not required by

00:10:13,920 --> 00:10:18,399
most applications

00:10:16,160 --> 00:10:20,160
however container escape attacks may

00:10:18,399 --> 00:10:22,160
utilize this default capabilities to

00:10:20,160 --> 00:10:23,920
their advantage

00:10:22,160 --> 00:10:25,839
hence we recommend dropping them unless

00:10:23,920 --> 00:10:28,000
your application has some very specific

00:10:25,839 --> 00:10:29,519
requirements

00:10:28,000 --> 00:10:32,079
from the incident preparedness point of

00:10:29,519 --> 00:10:33,920
view when containers are running without

00:10:32,079 --> 00:10:36,800
these default capabilities

00:10:33,920 --> 00:10:39,440
we expect that container escape attacks

00:10:36,800 --> 00:10:41,279
will generate access to night errors

00:10:39,440 --> 00:10:43,040
which will be recorded by the linux

00:10:41,279 --> 00:10:47,519
audit subsystem

00:10:43,040 --> 00:10:49,760
this works to our advantage

00:10:47,519 --> 00:10:51,680
allow privilege escalation is related to

00:10:49,760 --> 00:10:54,000
linux capabilities

00:10:51,680 --> 00:10:55,760
when enabled it guarantees that the

00:10:54,000 --> 00:10:57,279
linux kernel will not grant any

00:10:55,760 --> 00:11:00,800
additional capabilities

00:10:57,279 --> 00:11:02,560
to the process once it is started

00:11:00,800 --> 00:11:03,839
i am personally a bit conflicted about

00:11:02,560 --> 00:11:05,600
the setting

00:11:03,839 --> 00:11:07,760
on one hand this is a great way to

00:11:05,600 --> 00:11:10,240
ensure that your application

00:11:07,760 --> 00:11:11,120
even under the coercion of an attacker

00:11:10,240 --> 00:11:14,480
will not expand

00:11:11,120 --> 00:11:16,880
it says its set of privileges

00:11:14,480 --> 00:11:18,079
however on the other hand security

00:11:16,880 --> 00:11:20,480
conscious developers

00:11:18,079 --> 00:11:21,760
may follow the principle of just-in-time

00:11:20,480 --> 00:11:23,680
capabilities

00:11:21,760 --> 00:11:26,000
and programmatically request and drop

00:11:23,680 --> 00:11:28,000
capabilities from the kernel

00:11:26,000 --> 00:11:30,480
this is how creators of the capabilities

00:11:28,000 --> 00:11:32,959
envision them being used

00:11:30,480 --> 00:11:35,680
unfortunately this setting breaks such

00:11:32,959 --> 00:11:38,320
security conscious applications

00:11:35,680 --> 00:11:40,320
however in practice such capability

00:11:38,320 --> 00:11:41,920
aware applications are rare

00:11:40,320 --> 00:11:46,399
and therefore it is probably safe to

00:11:41,920 --> 00:11:46,399
enable this setting on most applications

00:11:47,839 --> 00:11:51,600
building docker images on top of this

00:11:49,760 --> 00:11:53,440
release of scratch is a well established

00:11:51,600 --> 00:11:55,279
security practice

00:11:53,440 --> 00:11:57,200
since it reduces that tax surface of our

00:11:55,279 --> 00:11:59,040
containers

00:11:57,200 --> 00:12:00,639
furthermore disrelease containers make

00:11:59,040 --> 00:12:02,720
it more difficult for attackers to

00:12:00,639 --> 00:12:04,320
perform lateral traversal

00:12:02,720 --> 00:12:06,959
via exacting into the surrounding

00:12:04,320 --> 00:12:06,959
containers

00:12:07,920 --> 00:12:12,000
distress containers also remove the need

00:12:10,399 --> 00:12:14,800
of solving a tricky problem

00:12:12,000 --> 00:12:17,360
of having to log all commands executed

00:12:14,800 --> 00:12:20,079
within our production containers

00:12:17,360 --> 00:12:21,760
let me explain this point we know that

00:12:20,079 --> 00:12:24,320
attackers would try

00:12:21,760 --> 00:12:27,519
to exec into the surrounding containers

00:12:24,320 --> 00:12:29,680
once they enter into our environment

00:12:27,519 --> 00:12:33,200
therefore we need to collect logs of all

00:12:29,680 --> 00:12:36,320
commands executed inside our containers

00:12:33,200 --> 00:12:37,920
however this is not a simple task

00:12:36,320 --> 00:12:41,120
after thinking more about this we

00:12:37,920 --> 00:12:43,839
realized that transitioning to distrolus

00:12:41,120 --> 00:12:45,680
could remove this requirement i recall

00:12:43,839 --> 00:12:48,720
that this release containers

00:12:45,680 --> 00:12:49,440
or or containers built on scratch do not

00:12:48,720 --> 00:12:53,839
have a shell

00:12:49,440 --> 00:12:53,839
into which attackers could exact

00:12:55,680 --> 00:12:59,279
one last point on distroless containers

00:12:58,480 --> 00:13:01,760
in gke

00:12:59,279 --> 00:13:03,680
we almost exclusively use go disrelease

00:13:01,760 --> 00:13:06,160
containers

00:13:03,680 --> 00:13:06,959
since go is our preferred language

00:13:06,160 --> 00:13:08,639
however

00:13:06,959 --> 00:13:10,560
when using digitalis containers for

00:13:08,639 --> 00:13:11,920
scripting languages like python for

00:13:10,560 --> 00:13:14,079
example

00:13:11,920 --> 00:13:16,639
attackers may still be able to execute

00:13:14,079 --> 00:13:20,399
scripts inside such containers

00:13:16,639 --> 00:13:23,200
so please keep this in mind

00:13:20,399 --> 00:13:24,079
the second check the link between the

00:13:23,200 --> 00:13:25,600
binaries

00:13:24,079 --> 00:13:27,920
running in production and the air

00:13:25,600 --> 00:13:30,480
manifests requires a little bit more

00:13:27,920 --> 00:13:30,480
background

00:13:31,360 --> 00:13:35,120
let me first define what we mean by

00:13:32,959 --> 00:13:38,480
build manifest

00:13:35,120 --> 00:13:41,120
build manifests among many other things

00:13:38,480 --> 00:13:42,399
should contain the list of dependencies

00:13:41,120 --> 00:13:46,000
or libraries

00:13:42,399 --> 00:13:48,959
that make up the output if we take

00:13:46,000 --> 00:13:51,600
go mode file as an example we can see

00:13:48,959 --> 00:13:52,959
that it qualifies as a build manifest

00:13:51,600 --> 00:13:54,639
since it contains the list of

00:13:52,959 --> 00:13:58,079
dependencies required to build

00:13:54,639 --> 00:13:59,839
a go artifact of course the versions of

00:13:58,079 --> 00:14:00,959
the dependencies are very important as

00:13:59,839 --> 00:14:02,800
well

00:14:00,959 --> 00:14:06,720
since vulnerabilities are often

00:14:02,800 --> 00:14:06,720
applicable only to specific versions

00:14:07,199 --> 00:14:14,720
so the question is given a docker image

00:14:11,519 --> 00:14:16,480
or rather docker image id

00:14:14,720 --> 00:14:18,959
could we tell if the packaged

00:14:16,480 --> 00:14:21,360
application depends on a problematic

00:14:18,959 --> 00:14:24,399
library

00:14:21,360 --> 00:14:26,560
furthermore during the mitigation stage

00:14:24,399 --> 00:14:27,600
your incident response commander will

00:14:26,560 --> 00:14:30,560
for sure ask

00:14:27,600 --> 00:14:31,680
this question how many nodes or maybe

00:14:30,560 --> 00:14:33,760
clusters

00:14:31,680 --> 00:14:36,160
are running with this problematic

00:14:33,760 --> 00:14:36,160
library

00:14:36,720 --> 00:14:40,480
to answer these questions we clearly

00:14:38,240 --> 00:14:44,000
need to have a way to go from the image

00:14:40,480 --> 00:14:45,680
identifier to the build manifest

00:14:44,000 --> 00:14:48,399
and you certainly don't want to start

00:14:45,680 --> 00:14:51,440
figuring out how to go from a to b

00:14:48,399 --> 00:14:54,079
during an incident

00:14:51,440 --> 00:14:55,199
the mechanics behind the linkage may

00:14:54,079 --> 00:14:57,920
depend on your built

00:14:55,199 --> 00:15:00,000
and deployment systems so we can't go

00:14:57,920 --> 00:15:02,079
into the details here

00:15:00,000 --> 00:15:03,519
however we do encourage you to go

00:15:02,079 --> 00:15:06,240
through an exercise

00:15:03,519 --> 00:15:07,839
where you pick a production binary and

00:15:06,240 --> 00:15:12,079
try to answer a question

00:15:07,839 --> 00:15:14,320
on what libraries does it depend on

00:15:12,079 --> 00:15:15,279
so you have done your homework checked

00:15:14,320 --> 00:15:17,199
all the boxes

00:15:15,279 --> 00:15:18,959
you have your hard infrastructure with

00:15:17,199 --> 00:15:20,880
audit logs streaming

00:15:18,959 --> 00:15:22,880
that's great but what do you do when an

00:15:20,880 --> 00:15:24,800
incident actually starts

00:15:22,880 --> 00:15:27,440
well as you probably expect you just

00:15:24,800 --> 00:15:29,279
need to follow another checklist

00:15:27,440 --> 00:15:31,040
there is one fundamental difference

00:15:29,279 --> 00:15:32,000
between the checklists that alex just

00:15:31,040 --> 00:15:34,720
talked about

00:15:32,000 --> 00:15:36,160
and the ones we'll look at next the

00:15:34,720 --> 00:15:38,560
pre-incident checklists

00:15:36,160 --> 00:15:40,399
are trying to centralize all the power

00:15:38,560 --> 00:15:42,800
and decision-making in the hands of the

00:15:40,399 --> 00:15:45,600
single person who's following them

00:15:42,800 --> 00:15:47,279
the checklists for the incident itself

00:15:45,600 --> 00:15:49,279
attempt to decentralize power

00:15:47,279 --> 00:15:50,639
and force you to communicate with each

00:15:49,279 --> 00:15:52,959
other the

00:15:50,639 --> 00:15:54,720
the goal here is to split the problem

00:15:52,959 --> 00:15:57,279
into smaller pieces that

00:15:54,720 --> 00:15:59,360
smaller groups can tackle we will break

00:15:57,279 --> 00:16:00,560
down the incident into five distinct

00:15:59,360 --> 00:16:03,040
stages

00:16:00,560 --> 00:16:04,480
and the steps for all of these will

00:16:03,040 --> 00:16:06,000
should be written down in your internal

00:16:04,480 --> 00:16:08,160
wiki

00:16:06,000 --> 00:16:09,680
when an uncle engineer gets notified

00:16:08,160 --> 00:16:11,680
about a new incident

00:16:09,680 --> 00:16:13,360
the first thing to do is reproduce it

00:16:11,680 --> 00:16:14,800
and figure out the impact

00:16:13,360 --> 00:16:16,160
so you want to know whether this

00:16:14,800 --> 00:16:16,880
actually affects your production

00:16:16,160 --> 00:16:20,639
environment

00:16:16,880 --> 00:16:23,600
or maybe it's a false alarm due to some

00:16:20,639 --> 00:16:25,199
funky configuration that you use you

00:16:23,600 --> 00:16:27,600
also want to

00:16:25,199 --> 00:16:28,639
note what the blast radius is so what

00:16:27,600 --> 00:16:30,160
can a bad guy do

00:16:28,639 --> 00:16:31,839
how much of your infrastructure is

00:16:30,160 --> 00:16:32,880
exposed how many of your users are

00:16:31,839 --> 00:16:35,680
exposed

00:16:32,880 --> 00:16:36,480
and so on a useful tool here is

00:16:35,680 --> 00:16:38,639
calculating

00:16:36,480 --> 00:16:40,880
a cvss score which is an industry

00:16:38,639 --> 00:16:43,360
standard for rating security incidents

00:16:40,880 --> 00:16:44,639
it gives you a score from 0 to 10 above

00:16:43,360 --> 00:16:47,519
how bad the

00:16:44,639 --> 00:16:49,040
issue is after you have successfully

00:16:47,519 --> 00:16:50,000
reproduced it you want to write down

00:16:49,040 --> 00:16:52,959
those steps that you

00:16:50,000 --> 00:16:54,720
used this will be useful later on when

00:16:52,959 --> 00:16:56,320
someone else is rolling out a fix to

00:16:54,720 --> 00:16:57,040
production and they want to confirm that

00:16:56,320 --> 00:17:00,160
it actually

00:16:57,040 --> 00:17:03,040
fixes the problem and one

00:17:00,160 --> 00:17:04,319
other useful thing to note down is what

00:17:03,040 --> 00:17:08,000
are the symptoms of an

00:17:04,319 --> 00:17:09,679
active exploit can you use any of the

00:17:08,000 --> 00:17:12,079
signals like logs or

00:17:09,679 --> 00:17:13,600
monitoring to later figure out whether

00:17:12,079 --> 00:17:15,679
this has actually been abusing your

00:17:13,600 --> 00:17:17,120
infrastructure

00:17:15,679 --> 00:17:19,280
now that you have confirmed that the

00:17:17,120 --> 00:17:20,959
incident is real it's time to start the

00:17:19,280 --> 00:17:22,880
actual response process

00:17:20,959 --> 00:17:24,720
first thing you want to do is creating

00:17:22,880 --> 00:17:27,439
communication channels

00:17:24,720 --> 00:17:29,120
the most useful thing here is a shared

00:17:27,439 --> 00:17:31,440
document that you can collaborate

00:17:29,120 --> 00:17:33,200
on with your teammates it should usually

00:17:31,440 --> 00:17:34,799
be copied from some template that you

00:17:33,200 --> 00:17:36,400
have created ahead of time

00:17:34,799 --> 00:17:39,200
so you don't have to figure out what

00:17:36,400 --> 00:17:40,960
sections need to be present

00:17:39,200 --> 00:17:42,400
it's also a very useful tool to onboard

00:17:40,960 --> 00:17:43,840
new responders

00:17:42,400 --> 00:17:45,520
and give them a latest information about

00:17:43,840 --> 00:17:47,600
the incident

00:17:45,520 --> 00:17:48,559
another channel another communication

00:17:47,600 --> 00:17:52,000
channel is

00:17:48,559 --> 00:17:54,240
a shared chat room this is good for

00:17:52,000 --> 00:17:55,280
just live coordination and some

00:17:54,240 --> 00:17:56,799
discussion but

00:17:55,280 --> 00:17:59,440
any major decisions you make here should

00:17:56,799 --> 00:18:01,440
be recorded in the dog regardless

00:17:59,440 --> 00:18:03,600
and finally if you are operating under

00:18:01,440 --> 00:18:05,039
embargo or have some other reasons to be

00:18:03,600 --> 00:18:07,679
secretive about the incident

00:18:05,039 --> 00:18:08,160
it's good to come up with some code word

00:18:07,679 --> 00:18:09,520
to

00:18:08,160 --> 00:18:11,600
refer to it internally without

00:18:09,520 --> 00:18:13,840
disclosing any details but this is

00:18:11,600 --> 00:18:15,440
rather

00:18:13,840 --> 00:18:17,760
because there are multiple people

00:18:15,440 --> 00:18:19,679
involved in incident response

00:18:17,760 --> 00:18:21,200
it's good to establish a clear hierarchy

00:18:19,679 --> 00:18:22,880
and chain of command

00:18:21,200 --> 00:18:25,280
so here are just some of the roles that

00:18:22,880 --> 00:18:27,280
you might define ahead of time

00:18:25,280 --> 00:18:28,640
and clearly communicate to people what

00:18:27,280 --> 00:18:30,400
they should be doing

00:18:28,640 --> 00:18:32,240
the incident commander is the main

00:18:30,400 --> 00:18:33,679
decision maker this is usually the

00:18:32,240 --> 00:18:35,919
on-call engineer who responded to the

00:18:33,679 --> 00:18:37,919
incident originally

00:18:35,919 --> 00:18:39,360
and is responsible for driving it from

00:18:37,919 --> 00:18:41,679
start to finish

00:18:39,360 --> 00:18:43,200
communications lead is someone who will

00:18:41,679 --> 00:18:45,760
communicate externally to your

00:18:43,200 --> 00:18:46,559
customers or partners about the incident

00:18:45,760 --> 00:18:49,120
or any

00:18:46,559 --> 00:18:50,640
impact it might have on them you might

00:18:49,120 --> 00:18:51,280
want to onboard some subject matter

00:18:50,640 --> 00:18:52,960
experts

00:18:51,280 --> 00:18:54,000
people who are intimately familiar with

00:18:52,960 --> 00:18:55,440
the part of the system that's

00:18:54,000 --> 00:18:57,200
compromised

00:18:55,440 --> 00:19:00,320
just to advise the unfix or maybe do the

00:18:57,200 --> 00:19:02,480
things themselves

00:19:00,320 --> 00:19:04,400
and then operations lead is an optional

00:19:02,480 --> 00:19:05,919
role that

00:19:04,400 --> 00:19:07,840
applies when you have a large incident

00:19:05,919 --> 00:19:10,080
with a lot of moving pieces

00:19:07,840 --> 00:19:11,280
operations lead handles only the

00:19:10,080 --> 00:19:13,840
mitigation and rollout

00:19:11,280 --> 00:19:16,080
and offloads all those concerns from

00:19:13,840 --> 00:19:18,799
incident commander's plate

00:19:16,080 --> 00:19:20,880
and after all this prep work we finally

00:19:18,799 --> 00:19:23,440
get to patch the vulnerability

00:19:20,880 --> 00:19:24,080
so this is pretty straightforward you

00:19:23,440 --> 00:19:26,000
should

00:19:24,080 --> 00:19:27,200
make a short-term fix that stops the

00:19:26,000 --> 00:19:30,240
bleeding and

00:19:27,200 --> 00:19:31,840
closes the gap as soon as possible you

00:19:30,240 --> 00:19:32,960
should also think about some longer-term

00:19:31,840 --> 00:19:35,200
ideas to

00:19:32,960 --> 00:19:36,880
fix this properly or maybe you can fix

00:19:35,200 --> 00:19:38,559
the entire class of vulnerabilities that

00:19:36,880 --> 00:19:40,480
this represents

00:19:38,559 --> 00:19:41,600
after you have the fix in it's time to

00:19:40,480 --> 00:19:43,039
roll out

00:19:41,600 --> 00:19:45,200
you have a choice here between your

00:19:43,039 --> 00:19:47,679
regular rollout schedule

00:19:45,200 --> 00:19:49,280
or a fast rollout so this is something

00:19:47,679 --> 00:19:50,640
very serious that's being actively

00:19:49,280 --> 00:19:52,640
abused you

00:19:50,640 --> 00:19:54,160
might want to choose to forgo your

00:19:52,640 --> 00:19:57,200
regular safety checks

00:19:54,160 --> 00:19:58,720
and get it out the door much faster

00:19:57,200 --> 00:20:01,520
regardless of what you do you should

00:19:58,720 --> 00:20:05,039
avoid outages consult with your sres

00:20:01,520 --> 00:20:07,039
your devops engineers and make sure that

00:20:05,039 --> 00:20:10,000
whatever you're doing is not going to

00:20:07,039 --> 00:20:12,799
bring down the entire service

00:20:10,000 --> 00:20:13,280
and then after the reload is complete

00:20:12,799 --> 00:20:15,679
you can

00:20:13,280 --> 00:20:16,799
finally call all clear and be done with

00:20:15,679 --> 00:20:19,360
the incident

00:20:16,799 --> 00:20:20,320
just kidding there's more work to do so

00:20:19,360 --> 00:20:21,679
after you've

00:20:20,320 --> 00:20:23,600
fixed the problem you want to

00:20:21,679 --> 00:20:25,520
investigate whether it was abused so

00:20:23,600 --> 00:20:26,880
use your audit logs that you've set up

00:20:25,520 --> 00:20:29,520
before the incident

00:20:26,880 --> 00:20:30,559
use any other monitoring you can have

00:20:29,520 --> 00:20:34,000
and figure out

00:20:30,559 --> 00:20:36,480
how many of your users were affected you

00:20:34,000 --> 00:20:38,080
do want to collect the list of users

00:20:36,480 --> 00:20:39,919
that were affected but that should be a

00:20:38,080 --> 00:20:41,760
heavily restricted doc

00:20:39,919 --> 00:20:45,039
and internally you should only

00:20:41,760 --> 00:20:47,120
communicate an aggregate number

00:20:45,039 --> 00:20:49,120
and obviously if the number of people

00:20:47,120 --> 00:20:49,679
effect is not zero you want to follow up

00:20:49,120 --> 00:20:52,960
with them

00:20:49,679 --> 00:20:55,679
and do the appropriate next steps

00:20:52,960 --> 00:20:57,919
and uh another useful thing to do is

00:20:55,679 --> 00:20:59,760
writing a postmortem this is the same

00:20:57,919 --> 00:21:01,840
postmodern practice that sre is used for

00:20:59,760 --> 00:21:03,200
outages and it has been covered

00:21:01,840 --> 00:21:06,320
extensively

00:21:03,200 --> 00:21:06,799
in the past so here's a link to a place

00:21:06,320 --> 00:21:08,000
you can

00:21:06,799 --> 00:21:10,240
start learning about them if you're not

00:21:08,000 --> 00:21:12,480
familiar but basically you

00:21:10,240 --> 00:21:13,440
write down what went wrong when it

00:21:12,480 --> 00:21:15,440
happened

00:21:13,440 --> 00:21:18,000
what did you do in response and how can

00:21:15,440 --> 00:21:19,440
you improve in the long run

00:21:18,000 --> 00:21:21,919
i hope we have convinced you that

00:21:19,440 --> 00:21:23,919
checklists are a very valuable tool

00:21:21,919 --> 00:21:26,000
both before the incident as a way to

00:21:23,919 --> 00:21:27,679
prepare yourself and during the incident

00:21:26,000 --> 00:21:29,360
to make sure you have not missed any

00:21:27,679 --> 00:21:32,400
critical steps

00:21:29,360 --> 00:21:34,720
and remember you can always change them

00:21:32,400 --> 00:21:36,880
and adapt them if there's something

00:21:34,720 --> 00:21:39,919
missing a step you wish you had taken

00:21:36,880 --> 00:21:41,120
add it to the checklist and save and the

00:21:39,919 --> 00:21:45,840
longer you use them

00:21:41,120 --> 00:21:45,840

YouTube URL: https://www.youtube.com/watch?v=Mi9t62vAXu0


