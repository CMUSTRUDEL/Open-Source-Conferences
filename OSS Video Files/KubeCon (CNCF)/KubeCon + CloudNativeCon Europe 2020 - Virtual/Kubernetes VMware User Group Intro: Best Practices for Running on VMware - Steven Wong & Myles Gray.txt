Title: Kubernetes VMware User Group Intro: Best Practices for Running on VMware - Steven Wong & Myles Gray
Publication date: 2020-08-28
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Kubernetes VMware User Group Intro: Best Practices for Running on VMware - Steven Wong & Myles Gray, VMware 

This will be an inaugural presentation by organizers and members of the recently formed Kubernetes VMware User Group. This group addresses running all forms of Kubernetes on VMware infrastructure. Come to this session if you want to meet other users, along with those who develop, test and support running K8s on vSphere and desktop hypervisors. This group is also here to support those building/using cluster installation tooling for VMware hypervisors. Agenda: - Intro to the vSphere cloud provider and related storage plugins - Recent features/changes: What are they? How to use them? - Running Kubernetes on "desktop" hypervisors - How to get involved in the User Group

https://sched.co/ZewL
Captions: 
	00:00:00,080 --> 00:00:04,319
hi this session is presented by the

00:00:02,000 --> 00:00:06,480
kubernetes vmware user group

00:00:04,319 --> 00:00:07,440
this group is about running all forms of

00:00:06,480 --> 00:00:09,840
kubernetes

00:00:07,440 --> 00:00:11,920
on the vmware infrastructure platforms

00:00:09,840 --> 00:00:14,160
from a user perspective

00:00:11,920 --> 00:00:16,480
i'm steve wong co-chair of the user

00:00:14,160 --> 00:00:18,400
group i work on kubernetes and a few

00:00:16,480 --> 00:00:21,199
other open source projects

00:00:18,400 --> 00:00:22,080
as an employee of vmware today i'm

00:00:21,199 --> 00:00:26,160
joined by

00:00:22,080 --> 00:00:26,160
miles gray the other co-chair

00:00:26,560 --> 00:00:30,320
miles is senior technical marketing

00:00:28,880 --> 00:00:34,559
architect in the storage and

00:00:30,320 --> 00:00:34,559
availability business unit at vmware

00:00:37,520 --> 00:00:41,200
we'll give contact information and a

00:00:39,600 --> 00:00:44,079
link to the deck at the end

00:00:41,200 --> 00:00:46,160
here's the agenda miles is going to

00:00:44,079 --> 00:00:48,320
start with a really quick summary

00:00:46,160 --> 00:00:50,000
of what the cloud provider and storage

00:00:48,320 --> 00:00:52,559
provider are

00:00:50,000 --> 00:00:55,039
we'll move on to address some recent

00:00:52,559 --> 00:00:56,879
changes and plan changes

00:00:55,039 --> 00:00:59,680
those topics relate to running

00:00:56,879 --> 00:01:01,760
kubernetes on the vsphere platform

00:00:59,680 --> 00:01:03,039
but we're also going to talk about

00:01:01,760 --> 00:01:05,519
running kubernetes

00:01:03,039 --> 00:01:06,799
on the desktop hypervisors fusion and

00:01:05,519 --> 00:01:09,040
workstation

00:01:06,799 --> 00:01:10,240
finally we'll wrap up with some links to

00:01:09,040 --> 00:01:12,000
resources

00:01:10,240 --> 00:01:13,840
hopefully you'll like the talk and at

00:01:12,000 --> 00:01:16,240
the end they'll provide details

00:01:13,840 --> 00:01:18,400
on how you can become a member of the

00:01:16,240 --> 00:01:18,799
kubernetes vmware user group where we

00:01:18,400 --> 00:01:21,680
host

00:01:18,799 --> 00:01:24,960
ongoing discussions on subjects like the

00:01:21,680 --> 00:01:24,960
material in this talk

00:01:25,600 --> 00:01:29,119
thanks for that steve so like steve said

00:01:28,159 --> 00:01:30,479
i'm going to talk to you about the

00:01:29,119 --> 00:01:33,600
vsphere cloud provider

00:01:30,479 --> 00:01:34,079
the uh updated auditory cloud provider

00:01:33,600 --> 00:01:36,560
and

00:01:34,079 --> 00:01:38,079
the container storage interface so we'll

00:01:36,560 --> 00:01:39,840
cover off the vsphere cloud provider

00:01:38,079 --> 00:01:41,920
first and cloud providers are a concept

00:01:39,840 --> 00:01:44,640
that sort of makes kubernetes

00:01:41,920 --> 00:01:45,840
cloud native it provides an abstraction

00:01:44,640 --> 00:01:47,520
layer between

00:01:45,840 --> 00:01:49,280
the apis from the underlying

00:01:47,520 --> 00:01:52,079
infrastructure whether that's

00:01:49,280 --> 00:01:52,960
vsphere or google cloud or amazon or

00:01:52,079 --> 00:01:54,799
what have you

00:01:52,960 --> 00:01:56,880
and the primitives that kubernetes

00:01:54,799 --> 00:01:58,719
understand so it means that kubernetes

00:01:56,880 --> 00:01:59,680
doesn't have to have core platform logic

00:01:58,719 --> 00:02:01,200
built into it

00:01:59,680 --> 00:02:03,119
in order to communicate with the

00:02:01,200 --> 00:02:04,799
underlying platform to ask for resources

00:02:03,119 --> 00:02:07,119
and that kind of thing

00:02:04,799 --> 00:02:08,959
so the vsphere cloud provider and the

00:02:07,119 --> 00:02:11,120
cloud provider interface the entry and

00:02:08,959 --> 00:02:14,160
the editory

00:02:11,120 --> 00:02:17,840
what they really do is they

00:02:14,160 --> 00:02:21,200
allow for labeling and locality for

00:02:17,840 --> 00:02:22,640
virtual machines on top of vsphere

00:02:21,200 --> 00:02:24,319
but in a way that kubernetes can

00:02:22,640 --> 00:02:25,360
understand so you can put things into

00:02:24,319 --> 00:02:29,120
zones

00:02:25,360 --> 00:02:31,840
um it really sort of ties the underlying

00:02:29,120 --> 00:02:34,400
infrastructure so the vm concept into

00:02:31,840 --> 00:02:36,319
the kubernetes layer so it'll apply

00:02:34,400 --> 00:02:39,040
labels into particular nodes in

00:02:36,319 --> 00:02:42,239
kubernetes based on what their vmid

00:02:39,040 --> 00:02:46,160
is and that kind of thing um so

00:02:42,239 --> 00:02:49,120
the cloud provider vsphere is an updated

00:02:46,160 --> 00:02:50,560
uh out of tree version of the vsphere

00:02:49,120 --> 00:02:52,400
cloud provider and the vsphere cloud

00:02:50,560 --> 00:02:54,640
provider is something that's known as an

00:02:52,400 --> 00:02:56,480
intri cloud provider

00:02:54,640 --> 00:03:00,080
those are all being sort of phased out

00:02:56,480 --> 00:03:02,800
by about kubernetes 1.20 1.21 the the

00:03:00,080 --> 00:03:05,200
migration timelines change a little bit

00:03:02,800 --> 00:03:07,280
but i think it's 1.20 at the minute and

00:03:05,200 --> 00:03:09,760
basically the idea is

00:03:07,280 --> 00:03:10,480
uh the kubernetes maintainers want to

00:03:09,760 --> 00:03:12,720
remove

00:03:10,480 --> 00:03:14,080
all of the entry cloud providers because

00:03:12,720 --> 00:03:16,800
what it does is add

00:03:14,080 --> 00:03:17,599
dead code into the code base it opens it

00:03:16,800 --> 00:03:20,080
up to

00:03:17,599 --> 00:03:20,800
security vulnerabilities it adds bloat

00:03:20,080 --> 00:03:22,720
to the

00:03:20,800 --> 00:03:24,159
core kubernetes binaries it doesn't need

00:03:22,720 --> 00:03:26,000
to be there and

00:03:24,159 --> 00:03:28,400
it means that if there are changes that

00:03:26,000 --> 00:03:30,480
need to be made to a cloud provider

00:03:28,400 --> 00:03:32,000
uh the vendor for that cloud provider

00:03:30,480 --> 00:03:34,560
has to make changes to the core

00:03:32,000 --> 00:03:36,319
kubernetes code base rather than just

00:03:34,560 --> 00:03:37,760
updating their own individual plugin

00:03:36,319 --> 00:03:39,360
which you can appreciate

00:03:37,760 --> 00:03:40,640
if there's a bug that you want to fix

00:03:39,360 --> 00:03:43,200
that means you have to upgrade your

00:03:40,640 --> 00:03:45,360
entire kubernetes platform so

00:03:43,200 --> 00:03:47,120
not really a great solution so they've

00:03:45,360 --> 00:03:48,000
pushed all of the vendors including

00:03:47,120 --> 00:03:50,720
ourselves

00:03:48,000 --> 00:03:53,519
to creating out of tree version so more

00:03:50,720 --> 00:03:55,120
of a plug-in type architecture

00:03:53,519 --> 00:03:56,640
so that's what i'm going to talk about

00:03:55,120 --> 00:03:59,439
i'm going to talk about the

00:03:56,640 --> 00:04:00,480
vcp the cpi which is the cloud provider

00:03:59,439 --> 00:04:03,519
interface which is the

00:04:00,480 --> 00:04:06,640
out of tree version of the vcp and the

00:04:03,519 --> 00:04:08,159
csi driver itself

00:04:06,640 --> 00:04:09,920
so we'll start from a storage

00:04:08,159 --> 00:04:11,519
perspective because storage is is sort

00:04:09,920 --> 00:04:13,519
of my thing

00:04:11,519 --> 00:04:14,640
and we've already talked about the vcp

00:04:13,519 --> 00:04:17,600
and basically

00:04:14,640 --> 00:04:17,840
it was a minimum viable product it was

00:04:17,600 --> 00:04:21,440
an

00:04:17,840 --> 00:04:23,280
intri cloud provider that allowed for

00:04:21,440 --> 00:04:25,199
dynamic provisioning of storage on

00:04:23,280 --> 00:04:27,360
kubernetes so

00:04:25,199 --> 00:04:29,199
if a pod was scheduled and it required a

00:04:27,360 --> 00:04:30,880
100 gig volume

00:04:29,199 --> 00:04:32,639
the vsphere cloud provider would take

00:04:30,880 --> 00:04:34,240
that call and translate it into

00:04:32,639 --> 00:04:36,240
something that vsphere would understand

00:04:34,240 --> 00:04:39,360
so it would essentially just create

00:04:36,240 --> 00:04:41,360
a 100 gig vmdk and mount it into the

00:04:39,360 --> 00:04:44,560
appropriate kubernetes worker node

00:04:41,360 --> 00:04:47,840
so that that pod can access some storage

00:04:44,560 --> 00:04:48,800
so uh that was all fine but like i say

00:04:47,840 --> 00:04:51,280
it was a

00:04:48,800 --> 00:04:53,919
minimum viable product it had kind of a

00:04:51,280 --> 00:04:56,320
hacky way of of deploying storage and

00:04:53,919 --> 00:04:57,440
basically what it did was it would

00:04:56,320 --> 00:05:00,560
create a

00:04:57,440 --> 00:05:01,120
shell vm that had you know nothing in it

00:05:00,560 --> 00:05:04,560
other than

00:05:01,120 --> 00:05:07,680
a vmx file and a vmdk it would then

00:05:04,560 --> 00:05:10,240
detach the vmdk delete the vm and then

00:05:07,680 --> 00:05:11,360
reattach the vmdk to whatever the target

00:05:10,240 --> 00:05:13,440
vm was so

00:05:11,360 --> 00:05:14,960
i think can you can appreciate that

00:05:13,440 --> 00:05:17,600
there's some work that's being done

00:05:14,960 --> 00:05:20,479
there that didn't really need to be done

00:05:17,600 --> 00:05:22,400
it also led to an interesting problem

00:05:20,479 --> 00:05:26,080
and if you've ever worked as a sys admin

00:05:22,400 --> 00:05:29,280
on vsphere systems if you detach a vmdk

00:05:26,080 --> 00:05:30,800
from a vm there's no real easy way to

00:05:29,280 --> 00:05:33,759
discover those so they become

00:05:30,800 --> 00:05:35,680
orphaned and they just sit on the data

00:05:33,759 --> 00:05:37,520
stores consuming space but they are hard

00:05:35,680 --> 00:05:38,960
to identify that there's there's no

00:05:37,520 --> 00:05:41,919
mapping to them so

00:05:38,960 --> 00:05:43,600
uh we saw this move from entry to iof3

00:05:41,919 --> 00:05:46,639
as an opportunity to

00:05:43,600 --> 00:05:49,039
rewrite that integration in its entirety

00:05:46,639 --> 00:05:50,960
like we basically just went from scratch

00:05:49,039 --> 00:05:52,800
and we used a completely different

00:05:50,960 --> 00:05:54,240
backend that doesn't have some of those

00:05:52,800 --> 00:05:56,400
inherent problems

00:05:54,240 --> 00:05:58,720
so that's what we sort of released with

00:05:56,400 --> 00:06:00,560
with vsphere 6.7 u3

00:05:58,720 --> 00:06:02,880
uh something called the cns platform

00:06:00,560 --> 00:06:05,199
which is cloud native storage platform

00:06:02,880 --> 00:06:07,280
and it has basically the same features

00:06:05,199 --> 00:06:10,400
as the vsphere cloud provider

00:06:07,280 --> 00:06:12,000
but in a much more supportable much more

00:06:10,400 --> 00:06:14,400
scalable manner

00:06:12,000 --> 00:06:15,600
so you've still got your dynamic

00:06:14,400 --> 00:06:17,759
provisioning of volume

00:06:15,600 --> 00:06:19,440
so if your applications require storage

00:06:17,759 --> 00:06:20,000
they can still request that and have it

00:06:19,440 --> 00:06:21,680
assigned

00:06:20,000 --> 00:06:23,039
automatically there's no need to have a

00:06:21,680 --> 00:06:24,639
developer uh

00:06:23,039 --> 00:06:26,639
talk to a sysadmin to get stuff

00:06:24,639 --> 00:06:28,400
provisioned and frankly that's just not

00:06:26,639 --> 00:06:31,840
the way stuff works in this world

00:06:28,400 --> 00:06:35,360
so having dynamic provisioning is a must

00:06:31,840 --> 00:06:36,240
that vm provisioning workflow i talked

00:06:35,360 --> 00:06:38,720
about where

00:06:36,240 --> 00:06:40,000
it created a vm with a vmdk attached and

00:06:38,720 --> 00:06:42,240
threw away the vm

00:06:40,000 --> 00:06:43,520
clearly a lot of api calls and a lot of

00:06:42,240 --> 00:06:44,800
functions going on there that didn't

00:06:43,520 --> 00:06:47,759
really need to happen

00:06:44,800 --> 00:06:49,599
so we changed the back end from that

00:06:47,759 --> 00:06:50,880
what we call just the legacy vm

00:06:49,599 --> 00:06:53,280
provisioning backend

00:06:50,880 --> 00:06:55,360
to something called first class disks

00:06:53,280 --> 00:06:56,319
and first class disks are really nice

00:06:55,360 --> 00:06:59,440
because they don't

00:06:56,319 --> 00:07:02,240
have this orphan storage problem

00:06:59,440 --> 00:07:02,960
if you unmount one of these first class

00:07:02,240 --> 00:07:06,240
disks from

00:07:02,960 --> 00:07:08,319
vm we still track where it is we still

00:07:06,240 --> 00:07:10,240
track how much storage it's consumed

00:07:08,319 --> 00:07:11,919
uh you know where it lives on the file

00:07:10,240 --> 00:07:14,479
system all that good stuff

00:07:11,919 --> 00:07:16,240
so even whenever you scale out an

00:07:14,479 --> 00:07:18,400
application say a stateful set

00:07:16,240 --> 00:07:19,520
and you scale it back in from say three

00:07:18,400 --> 00:07:22,319
to two nodes

00:07:19,520 --> 00:07:23,680
it'll keep the uh the disk there the

00:07:22,319 --> 00:07:25,919
first class disk will still

00:07:23,680 --> 00:07:28,400
exist you know persis it will still

00:07:25,919 --> 00:07:30,560
persist that's the point of it

00:07:28,400 --> 00:07:32,319
but we won't lose track of it so the

00:07:30,560 --> 00:07:34,080
next time it goes to scale out say from

00:07:32,319 --> 00:07:36,000
two to three nodes it'll automatically

00:07:34,080 --> 00:07:38,160
take that volume and remount it back in

00:07:36,000 --> 00:07:39,520
and then the application can do a delta

00:07:38,160 --> 00:07:42,240
sync on top

00:07:39,520 --> 00:07:44,479
so it removes some of the challenges

00:07:42,240 --> 00:07:47,759
around operationalizing it

00:07:44,479 --> 00:07:49,039
in addition we added a ui into vcenter

00:07:47,759 --> 00:07:51,360
for all this stuff

00:07:49,039 --> 00:07:52,720
so whenever you get a dynamically

00:07:51,360 --> 00:07:54,800
provisioned volume

00:07:52,720 --> 00:07:56,240
all of those volumes show up in the

00:07:54,800 --> 00:07:59,199
vcenter ui

00:07:56,240 --> 00:08:00,800
so that your if you're a developer your

00:07:59,199 --> 00:08:02,800
sysadmins can help you

00:08:00,800 --> 00:08:04,000
in debugging things if you give them a

00:08:02,800 --> 00:08:06,160
ppc id

00:08:04,000 --> 00:08:07,599
they can just paste it into our ui and

00:08:06,160 --> 00:08:08,800
it'll show them you know right the way

00:08:07,599 --> 00:08:12,160
down to the physical tin

00:08:08,800 --> 00:08:12,879
what disk that volume actually exists on

00:08:12,160 --> 00:08:15,360
so

00:08:12,879 --> 00:08:16,960
a lot of the refinement and and feature

00:08:15,360 --> 00:08:17,759
additions that we made were really

00:08:16,960 --> 00:08:21,039
around

00:08:17,759 --> 00:08:23,120
making this more scalable making it more

00:08:21,039 --> 00:08:27,759
operationally viable

00:08:23,120 --> 00:08:29,440
um so that was our release with 6.7 u3

00:08:27,759 --> 00:08:31,840
and then in 7.0

00:08:29,440 --> 00:08:33,680
uh we continued on that uh architecture

00:08:31,840 --> 00:08:34,800
and we added a few more bits and pieces

00:08:33,680 --> 00:08:36,640
in there so

00:08:34,800 --> 00:08:38,959
um if any of you are familiar with

00:08:36,640 --> 00:08:42,159
vsphere storage we added support for

00:08:38,959 --> 00:08:44,320
basic vivo primitives so if you want a

00:08:42,159 --> 00:08:45,760
block volume that is to say if you want

00:08:44,320 --> 00:08:48,080
a read write once

00:08:45,760 --> 00:08:49,600
volume in kubernetes you can now use

00:08:48,080 --> 00:08:52,560
vmfs

00:08:49,600 --> 00:08:54,480
nfs vsan or vivo so all storage types

00:08:52,560 --> 00:08:56,800
for vsphere knives supported

00:08:54,480 --> 00:08:58,640
um in addition we had quite a few

00:08:56,800 --> 00:09:01,600
requests for rewrite many volumes

00:08:58,640 --> 00:09:03,440
so if you have a visa and data store we

00:09:01,600 --> 00:09:06,800
can now automatically provision

00:09:03,440 --> 00:09:08,320
nfs file shares for you just dynamically

00:09:06,800 --> 00:09:10,000
the same way we would for read write

00:09:08,320 --> 00:09:10,480
once volumes and they will get mounted

00:09:10,000 --> 00:09:13,040
into

00:09:10,480 --> 00:09:14,720
you know however many uh pods and worker

00:09:13,040 --> 00:09:17,040
nodes you assign that

00:09:14,720 --> 00:09:17,839
single read write many persistent volume

00:09:17,040 --> 00:09:20,160
to

00:09:17,839 --> 00:09:22,080
so the big thing was the file based

00:09:20,160 --> 00:09:24,720
volumes based on vsan like i said

00:09:22,080 --> 00:09:27,040
people support as well but we've also

00:09:24,720 --> 00:09:30,080
added per persistent volume

00:09:27,040 --> 00:09:32,640
encryption support using vmcrypt so

00:09:30,080 --> 00:09:34,000
you can ask for a volume to be

00:09:32,640 --> 00:09:36,640
provisioned using an

00:09:34,000 --> 00:09:38,000
encryption storage class and that will

00:09:36,640 --> 00:09:40,800
encrypt those volumes

00:09:38,000 --> 00:09:42,640
and they're um re-keyed whenever they

00:09:40,800 --> 00:09:43,600
get moved to another vm so if you have a

00:09:42,640 --> 00:09:46,000
node failure

00:09:43,600 --> 00:09:47,920
and it gets moved to another vm that

00:09:46,000 --> 00:09:50,560
volume will be re-keyed so it can be

00:09:47,920 --> 00:09:52,480
re-read by the target vm which is quite

00:09:50,560 --> 00:09:55,760
nice as well

00:09:52,480 --> 00:09:56,240
and we have persistent volume snapshots

00:09:55,760 --> 00:09:58,640
now

00:09:56,240 --> 00:10:00,000
i'll highlight this isn't the csi

00:09:58,640 --> 00:10:01,920
snapshot

00:10:00,000 --> 00:10:04,399
feature that we don't have interrupt

00:10:01,920 --> 00:10:08,160
with the csi snapshot api yet

00:10:04,399 --> 00:10:10,720
um but this is a plug-in for valero so

00:10:08,160 --> 00:10:12,480
if you use valero for backup and restore

00:10:10,720 --> 00:10:15,279
of your kubernetes applications

00:10:12,480 --> 00:10:16,320
we have something called the vadp plugin

00:10:15,279 --> 00:10:19,040
for valero

00:10:16,320 --> 00:10:21,680
and that will take vsphere level

00:10:19,040 --> 00:10:23,680
snapshots of the persistent volumes

00:10:21,680 --> 00:10:24,720
before the data is read off them to

00:10:23,680 --> 00:10:27,120
ensure uh

00:10:24,720 --> 00:10:29,279
atomicity of the data as it's being read

00:10:27,120 --> 00:10:30,959
off to ensure that it's consistent

00:10:29,279 --> 00:10:33,040
when you back it up so that whenever you

00:10:30,959 --> 00:10:36,399
restore it it will be at least

00:10:33,040 --> 00:10:39,920
crash consistent um we also added

00:10:36,399 --> 00:10:41,360
a first pass at uh volume resizing so we

00:10:39,920 --> 00:10:43,360
can now actually support

00:10:41,360 --> 00:10:46,560
offline volume resize so you would

00:10:43,360 --> 00:10:48,640
essentially remove it from your pod

00:10:46,560 --> 00:10:50,640
delete the pod uh change the

00:10:48,640 --> 00:10:52,720
specification of the pvc

00:10:50,640 --> 00:10:54,959
it'll automatically expand it in vsphere

00:10:52,720 --> 00:10:58,000
and then you can reattach it to your pod

00:10:54,959 --> 00:10:59,360
and we've added support for um a mixture

00:10:58,000 --> 00:11:01,519
of tooling as well so

00:10:59,360 --> 00:11:02,880
if you want to use wavefront you can use

00:11:01,519 --> 00:11:04,959
wavefront

00:11:02,880 --> 00:11:07,360
but we realize that almost everyone here

00:11:04,959 --> 00:11:10,160
uses uh prometheus so

00:11:07,360 --> 00:11:11,519
we added native prometheus exporters

00:11:10,160 --> 00:11:13,440
into esxi

00:11:11,519 --> 00:11:15,120
as well as created a bunch of grafana

00:11:13,440 --> 00:11:16,959
dashboards for those that

00:11:15,120 --> 00:11:18,720
actually expose those metrics and tell

00:11:16,959 --> 00:11:21,120
you how to use them as well

00:11:18,720 --> 00:11:23,519
so if you have prometheus in your

00:11:21,120 --> 00:11:26,240
environment you can now use that

00:11:23,519 --> 00:11:28,079
to scrape metrics from esxi as well

00:11:26,240 --> 00:11:29,279
directly and have your applications

00:11:28,079 --> 00:11:32,640
react to changes

00:11:29,279 --> 00:11:32,640
on the underlying infrastructure

00:11:32,880 --> 00:11:36,399
so uh if we take a a little look here

00:11:36,000 --> 00:11:38,560
just

00:11:36,399 --> 00:11:39,680
to do a brief sort of 101 of how this

00:11:38,560 --> 00:11:41,440
actually works

00:11:39,680 --> 00:11:42,959
uh everything you see in orange here is

00:11:41,440 --> 00:11:46,079
vsphere everything in blue

00:11:42,959 --> 00:11:47,920
is kubernetes so you've got your vcenter

00:11:46,079 --> 00:11:50,000
installed on your vsphere infrastructure

00:11:47,920 --> 00:11:51,920
and cns is just a daemon that runs

00:11:50,000 --> 00:11:53,760
inside vcenter so when you install that

00:11:51,920 --> 00:11:55,120
it's just automatically there

00:11:53,760 --> 00:11:56,800
so the first thing you do is you create

00:11:55,120 --> 00:11:59,200
your spbm policy

00:11:56,800 --> 00:12:01,680
in vsphere and if you're not familiar

00:11:59,200 --> 00:12:04,160
with vsphere or spbm policies

00:12:01,680 --> 00:12:04,800
it's essentially just a storage class

00:12:04,160 --> 00:12:08,880
like they're

00:12:04,800 --> 00:12:11,279
basically identical concepts but an spbm

00:12:08,880 --> 00:12:12,959
policy allows you to specify things like

00:12:11,279 --> 00:12:13,920
you know how many copies of this data do

00:12:12,959 --> 00:12:16,240
you want

00:12:13,920 --> 00:12:17,839
um you know where should it be located

00:12:16,240 --> 00:12:21,200
on what site that kind of thing

00:12:17,839 --> 00:12:23,360
so you create your spbm policy

00:12:21,200 --> 00:12:26,240
and then you create a kubernetes storage

00:12:23,360 --> 00:12:27,600
class that points at that spbm policy so

00:12:26,240 --> 00:12:30,959
super simple they're just

00:12:27,600 --> 00:12:31,519
related by name then we've got our csi

00:12:30,959 --> 00:12:33,279
driver

00:12:31,519 --> 00:12:34,880
and the csi driver is what does the

00:12:33,279 --> 00:12:35,519
translation between the kate storage

00:12:34,880 --> 00:12:38,480
class

00:12:35,519 --> 00:12:39,680
and the spbm policy so whenever a volume

00:12:38,480 --> 00:12:43,440
is provisioned

00:12:39,680 --> 00:12:46,240
that is how vcenter and vsphere know

00:12:43,440 --> 00:12:48,399
in what manner to create that volume and

00:12:46,240 --> 00:12:51,680
where to mount it into

00:12:48,399 --> 00:12:54,160
which kubernetes node and then what pod

00:12:51,680 --> 00:12:56,560
so you've got a cassandra deployment

00:12:54,160 --> 00:12:57,279
here and it says i would like a 100 gig

00:12:56,560 --> 00:13:00,000
volume

00:12:57,279 --> 00:13:00,480
from this storage class so that storage

00:13:00,000 --> 00:13:02,560
class

00:13:00,480 --> 00:13:04,160
if you look at how that's constructed

00:13:02,560 --> 00:13:06,639
there is a provisioner and that would

00:13:04,160 --> 00:13:08,399
say this is the vsphere csi provisioner

00:13:06,639 --> 00:13:10,560
so it says okay well i'll hand this call

00:13:08,399 --> 00:13:12,320
off to the vsphere csi provider

00:13:10,560 --> 00:13:13,760
it looks at that request and says okay

00:13:12,320 --> 00:13:15,279
we're going to send this to the vcenter

00:13:13,760 --> 00:13:18,399
that i'm registered with

00:13:15,279 --> 00:13:20,240
so it sends it to the vcenter cns looks

00:13:18,399 --> 00:13:23,440
at the request and says okay this

00:13:20,240 --> 00:13:25,839
is a read write once volume uh

00:13:23,440 --> 00:13:27,839
and it requires this spbm policy so it

00:13:25,839 --> 00:13:30,480
sends that to the spbm engine

00:13:27,839 --> 00:13:32,160
and then it just creates that volume

00:13:30,480 --> 00:13:34,320
based on what the policy said so it will

00:13:32,160 --> 00:13:36,079
create two copies of the data

00:13:34,320 --> 00:13:37,920
mounted up to into the appropriate

00:13:36,079 --> 00:13:39,760
kubernetes worker node format it with a

00:13:37,920 --> 00:13:40,800
file system and mount it into the

00:13:39,760 --> 00:13:43,040
container so

00:13:40,800 --> 00:13:45,199
end to end that is completely automated

00:13:43,040 --> 00:13:48,880
after you create the kubernetes storage

00:13:45,199 --> 00:13:51,519
class which is really very nice

00:13:48,880 --> 00:13:52,240
and one thing i want to mention here is

00:13:51,519 --> 00:13:54,639
uh

00:13:52,240 --> 00:13:56,399
there are customers and people out there

00:13:54,639 --> 00:13:57,519
who have been using kubernetes for a

00:13:56,399 --> 00:14:00,160
while that will have

00:13:57,519 --> 00:14:01,519
volumes provisioned through the vsphere

00:14:00,160 --> 00:14:04,399
cloud provider

00:14:01,519 --> 00:14:05,920
and you'll have to do a migration at

00:14:04,399 --> 00:14:07,920
some stage from the vsphere cloud

00:14:05,920 --> 00:14:08,639
provider to the csi driver because like

00:14:07,920 --> 00:14:10,399
i said

00:14:08,639 --> 00:14:12,800
the intrigue cloud provider is going to

00:14:10,399 --> 00:14:15,040
go away and the csi will be the new way

00:14:12,800 --> 00:14:18,639
of of doing things so

00:14:15,040 --> 00:14:21,120
uh in the new version of uh kubernetes

00:14:18,639 --> 00:14:23,600
in 1.19 and the csi driver

00:14:21,120 --> 00:14:26,639
we are adding a beta level or what we

00:14:23,600 --> 00:14:27,839
call beta level support for vcp to csi

00:14:26,639 --> 00:14:30,320
migration

00:14:27,839 --> 00:14:32,240
now basically what this does is it

00:14:30,320 --> 00:14:32,880
allows you to have the vsphere cloud

00:14:32,240 --> 00:14:36,399
provider

00:14:32,880 --> 00:14:39,600
installed in your environment

00:14:36,399 --> 00:14:40,880
you can then enable this migration

00:14:39,600 --> 00:14:43,920
feature with some

00:14:40,880 --> 00:14:46,000
feature flags in kubernetes 1.19 and

00:14:43,920 --> 00:14:47,920
then you can install the csi driver

00:14:46,000 --> 00:14:49,680
and what it basically tells the csi

00:14:47,920 --> 00:14:52,959
driver to do is to just

00:14:49,680 --> 00:14:54,079
intercept all requests that would go to

00:14:52,959 --> 00:14:56,079
the vcp

00:14:54,079 --> 00:14:58,560
and just provision them through the csi

00:14:56,079 --> 00:15:00,399
instead or service them through the csi

00:14:58,560 --> 00:15:02,480
in addition it will actually change the

00:15:00,399 --> 00:15:04,800
back-end disk type from just a standard

00:15:02,480 --> 00:15:08,240
vmdk to a first-class disk

00:15:04,800 --> 00:15:09,519
so that whenever you are importing all

00:15:08,240 --> 00:15:12,560
of these volumes

00:15:09,519 --> 00:15:14,160
you get all of the nice new ui based

00:15:12,560 --> 00:15:15,920
tracking and all that stuff that comes

00:15:14,160 --> 00:15:18,320
along with cns as well

00:15:15,920 --> 00:15:19,839
so the upgrade would actually be

00:15:18,320 --> 00:15:21,360
transparent to the application you don't

00:15:19,839 --> 00:15:22,320
need to change any of the application

00:15:21,360 --> 00:15:24,800
manifests

00:15:22,320 --> 00:15:26,320
we basically just intercept all of the

00:15:24,800 --> 00:15:28,880
calls that would go to the vcp

00:15:26,320 --> 00:15:30,800
via like a a web hook shim layer and

00:15:28,880 --> 00:15:32,639
they get pushed into the csi

00:15:30,800 --> 00:15:33,920
instead so we just take over all of

00:15:32,639 --> 00:15:36,800
those calls

00:15:33,920 --> 00:15:38,160
um so this is really nice from like a

00:15:36,800 --> 00:15:40,320
day two perspective

00:15:38,160 --> 00:15:41,519
whenever you are upgrading your case

00:15:40,320 --> 00:15:43,680
clusters in future

00:15:41,519 --> 00:15:45,199
you'll be able to just take your

00:15:43,680 --> 00:15:47,920
existing volumes and

00:15:45,199 --> 00:15:49,680
import them into the csi driver so that

00:15:47,920 --> 00:15:53,600
they get automatically included in the

00:15:49,680 --> 00:15:56,160
vcenter ui which is really quite cool

00:15:53,600 --> 00:15:56,880
and we're just going to take a brief

00:15:56,160 --> 00:15:59,199
look here

00:15:56,880 --> 00:16:01,120
through uh some of the recently added

00:15:59,199 --> 00:16:02,639
features in the vsphere cloud provider

00:16:01,120 --> 00:16:04,240
before i hand it back to steve and he's

00:16:02,639 --> 00:16:07,440
going to take you through

00:16:04,240 --> 00:16:09,120
desktop hypervisors so

00:16:07,440 --> 00:16:10,639
uh just real quick we're gonna hit off

00:16:09,120 --> 00:16:12,160
the new things here and then you can

00:16:10,639 --> 00:16:13,519
click on the individual links with the

00:16:12,160 --> 00:16:17,680
deck afterwards

00:16:13,519 --> 00:16:19,040
um so we actually have uh nsxt based

00:16:17,680 --> 00:16:21,360
load balancers

00:16:19,040 --> 00:16:22,880
um getting added into the cloud provider

00:16:21,360 --> 00:16:26,399
so if you specify

00:16:22,880 --> 00:16:29,120
a load service type of load balancer

00:16:26,399 --> 00:16:30,880
we can interrupt with nsx directly and

00:16:29,120 --> 00:16:32,320
ask for those to be provisioned which is

00:16:30,880 --> 00:16:34,480
really quite cool

00:16:32,320 --> 00:16:35,519
um additionally we're moving from like

00:16:34,480 --> 00:16:38,000
an ini

00:16:35,519 --> 00:16:39,600
type config config to a yaml based

00:16:38,000 --> 00:16:41,519
config just because you know that's kind

00:16:39,600 --> 00:16:44,639
of how things work these days

00:16:41,519 --> 00:16:47,920
um we are updating the

00:16:44,639 --> 00:16:49,600
cloud provider interfaces image account

00:16:47,920 --> 00:16:51,360
to be a non-root account which i'm sure

00:16:49,600 --> 00:16:52,880
you'll agree from a security standpoint

00:16:51,360 --> 00:16:56,079
is a good thing to do

00:16:52,880 --> 00:16:56,800
um and just adding a bit more robustness

00:16:56,079 --> 00:17:00,240
to the whole

00:16:56,800 --> 00:17:03,839
zones and regions labeling um we're

00:17:00,240 --> 00:17:05,360
looking at or we are adding a folder and

00:17:03,839 --> 00:17:07,120
resource pool traversal

00:17:05,360 --> 00:17:09,839
for those features as well so if you are

00:17:07,120 --> 00:17:11,760
using zones or tags

00:17:09,839 --> 00:17:14,480
it will now be able to traverse all of

00:17:11,760 --> 00:17:17,199
the resource pools or folders

00:17:14,480 --> 00:17:18,880
under that environment and figure out

00:17:17,199 --> 00:17:20,400
where stuff actually lives

00:17:18,880 --> 00:17:21,839
and like i say the rest of it you can

00:17:20,400 --> 00:17:23,439
read through in your own time with the

00:17:21,839 --> 00:17:24,319
deck afterwards and you can click on the

00:17:23,439 --> 00:17:26,160
individual

00:17:24,319 --> 00:17:27,520
pull requests and see how those things

00:17:26,160 --> 00:17:29,039
actually work

00:17:27,520 --> 00:17:30,640
so i'm going to hand it back over to

00:17:29,039 --> 00:17:31,679
steve now and he's going to take you

00:17:30,640 --> 00:17:35,679
through

00:17:31,679 --> 00:17:35,679
kubernetes desktop hypervisors

00:17:37,200 --> 00:17:41,120
thank you miles i'm going to move on to

00:17:40,640 --> 00:17:46,480
running

00:17:41,120 --> 00:17:48,720
kubernetes on vmware desktop hypervisors

00:17:46,480 --> 00:17:49,840
the desktop hypervisor was actually

00:17:48,720 --> 00:17:53,280
vmware's first

00:17:49,840 --> 00:17:56,400
product back in 1991 and it was

00:17:53,280 --> 00:17:57,440
first hosted on linux this first

00:17:56,400 --> 00:18:00,559
generation

00:17:57,440 --> 00:18:04,080
of products was the

00:18:00,559 --> 00:18:05,120
origin of uh the server class hypervisor

00:18:04,080 --> 00:18:08,000
products

00:18:05,120 --> 00:18:09,360
um even though vmware is best known in

00:18:08,000 --> 00:18:12,240
data centers

00:18:09,360 --> 00:18:14,080
uh the desktop hypervisors for linux

00:18:12,240 --> 00:18:17,200
windows and mac are installed on

00:18:14,080 --> 00:18:17,200
millions of computers

00:18:17,679 --> 00:18:22,320
the fusion hypervisor is the version for

00:18:20,080 --> 00:18:24,960
mac and like workstation

00:18:22,320 --> 00:18:26,240
it's known as a type 2 hypervisor

00:18:24,960 --> 00:18:29,919
meaning it runs on

00:18:26,240 --> 00:18:32,080
an os rather than directly on bare metal

00:18:29,919 --> 00:18:34,400
it's also worth noting that these

00:18:32,080 --> 00:18:36,799
desktop hypervisors

00:18:34,400 --> 00:18:38,320
implement virtual networking to allow

00:18:36,799 --> 00:18:40,720
creation of

00:18:38,320 --> 00:18:43,840
multiple networks connected to the vms

00:18:40,720 --> 00:18:43,840
they host

00:18:45,039 --> 00:18:49,440
this shows the latest versions of the

00:18:47,520 --> 00:18:52,400
production

00:18:49,440 --> 00:18:52,799
products but it turns out that a newer

00:18:52,400 --> 00:18:55,919
tech

00:18:52,799 --> 00:18:58,640
preview beta is also running now

00:18:55,919 --> 00:19:00,400
participation in the beta is free and

00:18:58,640 --> 00:19:03,200
there are player versions of these

00:19:00,400 --> 00:19:04,039
desktop hypervisors also available for

00:19:03,200 --> 00:19:07,360
personal

00:19:04,039 --> 00:19:07,360
non-commercial use

00:19:08,400 --> 00:19:13,440
i'm going to show a kubernetes install

00:19:11,200 --> 00:19:14,960
using the tech preview

00:19:13,440 --> 00:19:16,799
just because that's what i've got

00:19:14,960 --> 00:19:18,960
running on my laptop

00:19:16,799 --> 00:19:20,720
but pretty much everything i'm going to

00:19:18,960 --> 00:19:22,720
show applies to

00:19:20,720 --> 00:19:25,840
other recent versions of these desktop

00:19:22,720 --> 00:19:25,840
hypervisors as well

00:19:26,799 --> 00:19:32,960
the new uh 20h2 version intech preview

00:19:30,240 --> 00:19:36,080
has support for running containers

00:19:32,960 --> 00:19:38,960
directly without composing a vm

00:19:36,080 --> 00:19:40,960
the experience is not unlike a docker at

00:19:38,960 --> 00:19:43,919
a command line you have push pull

00:19:40,960 --> 00:19:45,440
run using a cli in this case named

00:19:43,919 --> 00:19:49,120
v-cuttle

00:19:45,440 --> 00:19:51,520
the difference is that these

00:19:49,120 --> 00:19:52,559
docker and oci compliant container

00:19:51,520 --> 00:19:55,120
images

00:19:52,559 --> 00:19:56,720
run in the hypervisor in a lightweight

00:19:55,120 --> 00:20:00,160
fashion

00:19:56,720 --> 00:20:02,480
kind the kubernetes in docker tool

00:20:00,160 --> 00:20:04,840
is not currently integrated into this

00:20:02,480 --> 00:20:08,400
tech preview cli but i'm told that

00:20:04,840 --> 00:20:08,400
developers are pursuing this

00:20:09,840 --> 00:20:13,200
the top line here shows the download

00:20:12,159 --> 00:20:15,120
links for

00:20:13,200 --> 00:20:16,880
getting the production releases of the

00:20:15,120 --> 00:20:20,720
desktop hypervisors

00:20:16,880 --> 00:20:21,600
and by the way the the fusion hypervisor

00:20:20,720 --> 00:20:24,720
for mac

00:20:21,600 --> 00:20:26,720
uh version 11.5.5

00:20:24,720 --> 00:20:29,679
is already out with this container

00:20:26,720 --> 00:20:33,039
support so if you're running 11.5

00:20:29,679 --> 00:20:35,760
first fusion you can upgrade to 11

00:20:33,039 --> 00:20:37,280
5.5 right now to get the container

00:20:35,760 --> 00:20:40,240
support

00:20:37,280 --> 00:20:42,080
the next line here has links to the free

00:20:40,240 --> 00:20:45,600
tech preview beta

00:20:42,080 --> 00:20:47,360
and a warning if you use the earlier

00:20:45,600 --> 00:20:48,799
tech preview beta that was out at the

00:20:47,360 --> 00:20:51,360
beginning of the year

00:20:48,799 --> 00:20:53,120
uninstall it before moving on to the

00:20:51,360 --> 00:20:55,760
newer version

00:20:53,120 --> 00:20:58,960
also be careful about using google to

00:20:55,760 --> 00:21:01,280
find this beta because

00:20:58,960 --> 00:21:03,200
the older version tends to show up first

00:21:01,280 --> 00:21:05,679
in the search results just because a lot

00:21:03,200 --> 00:21:08,400
of blog posts got out

00:21:05,679 --> 00:21:08,400
talking about it

00:21:09,919 --> 00:21:13,200
so i'm going to show a demo running

00:21:11,919 --> 00:21:16,559
minicube

00:21:13,200 --> 00:21:19,520
with a series of screenshots rather than

00:21:16,559 --> 00:21:21,280
as a video if if this had been a

00:21:19,520 --> 00:21:23,120
physical conference as originally

00:21:21,280 --> 00:21:24,000
planned i would have done it as a live

00:21:23,120 --> 00:21:26,480
demo

00:21:24,000 --> 00:21:28,240
but since we're going to do it online it

00:21:26,480 --> 00:21:30,400
can't be live anyway

00:21:28,240 --> 00:21:31,919
and i decided that the screen content

00:21:30,400 --> 00:21:35,200
snaps suffer from

00:21:31,919 --> 00:21:37,600
less from bad internet and also

00:21:35,200 --> 00:21:39,280
allow cut and paste directly from the

00:21:37,600 --> 00:21:45,520
slides in the deck if you

00:21:39,280 --> 00:21:47,280
choose to follow along later at home

00:21:45,520 --> 00:21:49,280
so i'm going to show this demo on

00:21:47,280 --> 00:21:50,159
windows instead of linux for a few

00:21:49,280 --> 00:21:52,880
reasons

00:21:50,159 --> 00:21:53,840
i'd rather show the more disruptive

00:21:52,880 --> 00:21:57,039
environment

00:21:53,840 --> 00:22:00,080
and windows simply tends to get lighter

00:21:57,039 --> 00:22:03,039
coverage in the blogosphere

00:22:00,080 --> 00:22:04,480
kubernetes continues to open up windows

00:22:03,039 --> 00:22:06,159
container support

00:22:04,480 --> 00:22:08,960
and i've been running into a lot of

00:22:06,159 --> 00:22:11,679
windows developers who are struggling to

00:22:08,960 --> 00:22:13,520
learn the new world of kubernetes so i

00:22:11,679 --> 00:22:15,200
wanted to be inclusive and help people

00:22:13,520 --> 00:22:17,520
get a bridge

00:22:15,200 --> 00:22:19,440
from those millions of windows laptops

00:22:17,520 --> 00:22:23,200
into the world of kubernetes

00:22:19,440 --> 00:22:24,240
if you're on a mac or a linux machine

00:22:23,200 --> 00:22:26,400
don't fret

00:22:24,240 --> 00:22:28,400
it's very similar to what i'm about to

00:22:26,400 --> 00:22:30,720
show mostly the difference is that you

00:22:28,400 --> 00:22:33,200
can cut out a few steps

00:22:30,720 --> 00:22:35,280
uh so start by downloading the five

00:22:33,200 --> 00:22:37,200
items listed here

00:22:35,280 --> 00:22:38,480
if you're watching from the recording

00:22:37,200 --> 00:22:40,720
these links are

00:22:38,480 --> 00:22:43,120
to specific versions that probably have

00:22:40,720 --> 00:22:46,000
a shelf life of a month or two

00:22:43,120 --> 00:22:47,440
so if this is an older recording at the

00:22:46,000 --> 00:22:51,280
point you catch it

00:22:47,440 --> 00:22:51,280
look for newer versions as needed

00:22:53,120 --> 00:22:57,280
in a few cases you could flip the order

00:22:55,440 --> 00:22:58,320
of these installs but this is what i

00:22:57,280 --> 00:23:00,640
tested

00:22:58,320 --> 00:23:02,159
if you're on a mac or linux you can

00:23:00,640 --> 00:23:04,799
probably have get already

00:23:02,159 --> 00:23:05,840
so skip that step it doesn't likely make

00:23:04,799 --> 00:23:08,640
sense

00:23:05,840 --> 00:23:10,640
uh the summary here is i'm assuming

00:23:08,640 --> 00:23:14,159
you've already downloaded it

00:23:10,640 --> 00:23:16,799
um from your collection of downloads

00:23:14,159 --> 00:23:18,320
start by installing the hypervisor then

00:23:16,799 --> 00:23:21,600
golang

00:23:18,320 --> 00:23:23,360
get finally build a driver from the

00:23:21,600 --> 00:23:26,720
golang source

00:23:23,360 --> 00:23:30,640
install cube cuddle and then mini cube

00:23:26,720 --> 00:23:31,520
um the these downloads are installer

00:23:30,640 --> 00:23:33,440
packages

00:23:31,520 --> 00:23:34,720
so they're pretty simple to figure out

00:23:33,440 --> 00:23:37,679
i'm not going to make

00:23:34,720 --> 00:23:39,919
you watch step by step with these

00:23:37,679 --> 00:23:42,320
installs just

00:23:39,919 --> 00:23:43,279
find the installers that you downloaded

00:23:42,320 --> 00:23:44,799
and

00:23:43,279 --> 00:23:47,520
install them in the order here you

00:23:44,799 --> 00:23:47,520
should be fine

00:23:48,480 --> 00:23:51,840
next we're going to configure minicube

00:23:51,039 --> 00:23:54,000
um

00:23:51,840 --> 00:23:56,400
the effect of these configuration

00:23:54,000 --> 00:23:59,600
settings is to specify the vm

00:23:56,400 --> 00:24:02,080
that kubernetes is going to run in uh

00:23:59,600 --> 00:24:03,039
the settings i'm showing here are

00:24:02,080 --> 00:24:06,000
generous

00:24:03,039 --> 00:24:07,919
i did these big to allow enough to run

00:24:06,000 --> 00:24:10,480
pretty demanding things

00:24:07,919 --> 00:24:12,159
such as installing and running an istio

00:24:10,480 --> 00:24:14,159
service mesh

00:24:12,159 --> 00:24:16,880
you could easily cut these in half if

00:24:14,159 --> 00:24:20,320
you have a small laptop

00:24:16,880 --> 00:24:22,799
and you're only going to run a few

00:24:20,320 --> 00:24:25,840
simple apps in kubernetes

00:24:22,799 --> 00:24:29,200
by the way i show an optional step here

00:24:25,840 --> 00:24:33,039
uh because i'm changing the default

00:24:29,200 --> 00:24:35,520
um network cider

00:24:33,039 --> 00:24:37,279
and chain this change is going to

00:24:35,520 --> 00:24:40,480
require some additional

00:24:37,279 --> 00:24:41,600
uh setup in the workstation hypervisor

00:24:40,480 --> 00:24:43,919
that i'll get to in the

00:24:41,600 --> 00:24:45,120
in a moment i'm doing this simply

00:24:43,919 --> 00:24:47,840
because

00:24:45,120 --> 00:24:49,600
most mini cube usage examples that you

00:24:47,840 --> 00:24:54,159
find out on the internet

00:24:49,600 --> 00:24:56,480
use the 192 168 99 cider range

00:24:54,159 --> 00:24:58,159
and i wanted to make it easy to cut and

00:24:56,480 --> 00:25:00,400
paste out of

00:24:58,159 --> 00:25:01,440
any examples you might find off the

00:25:00,400 --> 00:25:04,799
internet

00:25:01,440 --> 00:25:08,480
so do the config steps shown here

00:25:04,799 --> 00:25:10,240
uh but when you're done don't close the

00:25:08,480 --> 00:25:12,480
command prompt that you do this in

00:25:10,240 --> 00:25:15,840
because we'll be back to it shortly

00:25:12,480 --> 00:25:17,600
you'll follow the steps to configure

00:25:15,840 --> 00:25:19,440
each of these settings one at a time and

00:25:17,600 --> 00:25:22,640
that final step of

00:25:19,440 --> 00:25:24,880
mini queue config view just uh

00:25:22,640 --> 00:25:26,480
echoes back your configuration so that

00:25:24,880 --> 00:25:29,840
you can verify that you didn't

00:25:26,480 --> 00:25:29,840
have any typos

00:25:31,360 --> 00:25:36,000
now i'm showing the configuration of the

00:25:34,559 --> 00:25:38,559
vmware workstation

00:25:36,000 --> 00:25:40,960
hypervisor like i say it comes with

00:25:38,559 --> 00:25:43,120
virtual networks

00:25:40,960 --> 00:25:45,039
there are some created by default you

00:25:43,120 --> 00:25:47,840
can create more if you need them

00:25:45,039 --> 00:25:50,080
but what we're going to do is change the

00:25:47,840 --> 00:25:50,080
uh

00:25:50,480 --> 00:25:54,840
the ip subnet that is being used by one

00:25:53,520 --> 00:25:59,440
of these uh

00:25:54,840 --> 00:26:01,679
pre-configured uh networks

00:25:59,440 --> 00:26:03,200
so we start by opening the workstation

00:26:01,679 --> 00:26:05,919
ui

00:26:03,200 --> 00:26:06,720
and we choose the virtual network editor

00:26:05,919 --> 00:26:09,440
from

00:26:06,720 --> 00:26:11,760
the edit tab uh by the way you're going

00:26:09,440 --> 00:26:14,000
to need to have admin rights uh

00:26:11,760 --> 00:26:16,159
to your machine in order to edit these

00:26:14,000 --> 00:26:20,880
virtual networks successfully

00:26:16,159 --> 00:26:20,880
otherwise it it's a view only scenario

00:26:22,159 --> 00:26:25,520
you start by hitting the change settings

00:26:24,559 --> 00:26:28,880
button

00:26:25,520 --> 00:26:30,880
on the lower right and this triggers

00:26:28,880 --> 00:26:32,320
escalation to invoke your admin

00:26:30,880 --> 00:26:36,039
privilege

00:26:32,320 --> 00:26:37,600
then you change the subnet prefix to

00:26:36,039 --> 00:26:40,799
192.168.99

00:26:37,600 --> 00:26:43,600
and then finally press the dhcp

00:26:40,799 --> 00:26:43,600
settings button

00:26:44,480 --> 00:26:47,840
this shows the dialog box that's going

00:26:46,640 --> 00:26:51,279
to pop up

00:26:47,840 --> 00:26:54,640
we're going to assign a block of ips to

00:26:51,279 --> 00:26:58,080
dhcp and keep the rest in reserve

00:26:54,640 --> 00:27:01,600
so in the portion of the dialog

00:26:58,080 --> 00:27:04,880
box circled in red change the dhcp

00:27:01,600 --> 00:27:09,200
octet range to hand out

00:27:04,880 --> 00:27:12,640
addresses uh from 128 to 254

00:27:09,200 --> 00:27:12,640
and then hit the ok button

00:27:12,799 --> 00:27:16,960
now it's time to go back to that command

00:27:14,880 --> 00:27:20,159
line prompt and start minicube

00:27:16,960 --> 00:27:23,279
which is going to be a vm

00:27:20,159 --> 00:27:24,799
that will be running kubernetes uh the

00:27:23,279 --> 00:27:28,080
mini cube start step

00:27:24,799 --> 00:27:30,080
is going to take a minute or two uh

00:27:28,080 --> 00:27:32,320
how long it takes exactly might even

00:27:30,080 --> 00:27:35,840
depend on the speed of your

00:27:32,320 --> 00:27:36,480
internet connection when you trigger

00:27:35,840 --> 00:27:39,600
this

00:27:36,480 --> 00:27:42,640
mini cube start you're going to see

00:27:39,600 --> 00:27:43,600
log output as the vm is composed and

00:27:42,640 --> 00:27:45,679
started

00:27:43,600 --> 00:27:47,039
and the components are pulled installed

00:27:45,679 --> 00:27:50,799
and run

00:27:47,039 --> 00:27:53,760
the the vm is going to be underneath the

00:27:50,799 --> 00:27:54,240
dot mini cube slash machine slash mini

00:27:53,760 --> 00:27:57,360
cube

00:27:54,240 --> 00:27:58,399
directory inside your home directory on

00:27:57,360 --> 00:28:01,840
windows

00:27:58,399 --> 00:28:05,120
and later you can add that

00:28:01,840 --> 00:28:06,399
file to your workstation inventory using

00:28:05,120 --> 00:28:09,360
the file open

00:28:06,399 --> 00:28:12,159
menu if you want to see it in the

00:28:09,360 --> 00:28:14,960
workstation gui

00:28:12,159 --> 00:28:16,000
after the command line shows done with

00:28:14,960 --> 00:28:19,360
an x

00:28:16,000 --> 00:28:22,640
exclamation point you can verify

00:28:19,360 --> 00:28:23,520
using mini cube status and the cube

00:28:22,640 --> 00:28:26,559
cuddle

00:28:23,520 --> 00:28:28,159
cli uh with cube cuddle version is shown

00:28:26,559 --> 00:28:29,760
here

00:28:28,159 --> 00:28:31,679
when this is complete you have

00:28:29,760 --> 00:28:36,080
kubernetes running

00:28:31,679 --> 00:28:36,080
inside a workstation hosted vm

00:28:37,520 --> 00:28:42,159
we'll move to a moderately advanced demo

00:28:39,840 --> 00:28:44,240
now but you could do whatever you want

00:28:42,159 --> 00:28:46,159
mini cube starts pretty lightweight but

00:28:44,240 --> 00:28:48,799
i'm going to turn on some

00:28:46,159 --> 00:28:51,440
actual optional add-on features since i

00:28:48,799 --> 00:28:52,880
gave this vm plenty of cpu in memory to

00:28:51,440 --> 00:28:55,039
allow this

00:28:52,880 --> 00:28:57,039
we're going to deploy a load balancer

00:28:55,039 --> 00:28:58,640
something you might need

00:28:57,039 --> 00:29:01,600
if you're going to play with service

00:28:58,640 --> 00:29:03,840
mesh or interact with the outside world

00:29:01,600 --> 00:29:06,559
we're also enabling the kubernetes

00:29:03,840 --> 00:29:06,559
dashboard

00:29:07,760 --> 00:29:13,840
so do the command line steps shown

00:29:12,000 --> 00:29:16,480
here and you should get the results

00:29:13,840 --> 00:29:16,480
shown in blue

00:29:18,320 --> 00:29:22,399
when you do invoke the minicube

00:29:20,640 --> 00:29:24,720
dashboard command

00:29:22,399 --> 00:29:28,720
at the command line this will open up a

00:29:24,720 --> 00:29:32,720
browser windows with the kubernetes ui

00:29:28,720 --> 00:29:32,720
the metal lb load balancer

00:29:32,960 --> 00:29:37,840
is capable of issuing ips from a pool

00:29:36,559 --> 00:29:40,480
like an ipam

00:29:37,840 --> 00:29:41,520
but we need to configure it in order to

00:29:40,480 --> 00:29:44,960
specify

00:29:41,520 --> 00:29:49,200
the ip address pool that it issues

00:29:44,960 --> 00:29:51,200
ips from when it provides load balancing

00:29:49,200 --> 00:29:53,200
services

00:29:51,200 --> 00:29:55,600
this has to be a different range from

00:29:53,200 --> 00:29:58,640
the range we assigned to the dhcp

00:29:55,600 --> 00:30:02,080
server those ranges

00:29:58,640 --> 00:30:05,600
are issued to vms as opposed to

00:30:02,080 --> 00:30:06,720
the metal lb load balancer issuing ips

00:30:05,600 --> 00:30:10,080
to

00:30:06,720 --> 00:30:10,880
kubernetes hosted services on the menu

00:30:10,080 --> 00:30:14,720
on the left

00:30:10,880 --> 00:30:14,720
inside the dashboard

00:30:15,039 --> 00:30:19,120
enable showing all namespaces then go

00:30:18,559 --> 00:30:22,640
down

00:30:19,120 --> 00:30:25,200
and choose config maps and edit

00:30:22,640 --> 00:30:26,640
the config map that's associated with

00:30:25,200 --> 00:30:30,000
metal lb

00:30:26,640 --> 00:30:30,559
um we're going to want to alter that

00:30:30,000 --> 00:30:37,679
config

00:30:30,559 --> 00:30:40,880
map as shown in the um

00:30:37,679 --> 00:30:44,760
things circled in red to assign the ip

00:30:40,880 --> 00:30:48,799
range ranging from 192 168

00:30:44,760 --> 00:30:48,799
99.105 to 120.

00:30:49,679 --> 00:30:53,279
now we're going to display deploy a

00:30:52,000 --> 00:30:55,440
service and

00:30:53,279 --> 00:30:57,200
this is the hello mini cube service

00:30:55,440 --> 00:30:58,799
example that comes straight out of the

00:30:57,200 --> 00:31:00,799
mini cube docs

00:30:58,799 --> 00:31:03,039
we use cube cuddle to create a

00:31:00,799 --> 00:31:04,559
deployment of a web service as shown

00:31:03,039 --> 00:31:08,159
here

00:31:04,559 --> 00:31:11,039
then we use cube cuddle expose to create

00:31:08,159 --> 00:31:13,519
a load balance service and make this web

00:31:11,039 --> 00:31:15,919
server publicly accessible

00:31:13,519 --> 00:31:18,159
after this completes you can find a link

00:31:15,919 --> 00:31:21,039
to the service in the dashboard

00:31:18,159 --> 00:31:22,320
or you could also get the url from the

00:31:21,039 --> 00:31:24,080
command line

00:31:22,320 --> 00:31:25,679
i'm not going to show it here but if you

00:31:24,080 --> 00:31:27,760
do this later at home

00:31:25,679 --> 00:31:29,840
a hidden slide in this deck shows the

00:31:27,760 --> 00:31:30,880
steps to clean up the service the

00:31:29,840 --> 00:31:34,559
deployment

00:31:30,880 --> 00:31:34,559
and even the mini cube vm

00:31:35,200 --> 00:31:39,919
so this content is brought to you by a

00:31:38,080 --> 00:31:41,600
kubernetes user group

00:31:39,919 --> 00:31:44,559
and if you're using kubernetes on

00:31:41,600 --> 00:31:45,600
vsphere i encourage you to formally join

00:31:44,559 --> 00:31:47,519
this group

00:31:45,600 --> 00:31:50,399
we have a meeting each month where we

00:31:47,519 --> 00:31:52,960
discuss tutorials and best practices

00:31:50,399 --> 00:31:54,640
the agenda is user driven so members are

00:31:52,960 --> 00:31:57,200
encouraged to nominate

00:31:54,640 --> 00:31:57,919
presentation and discussion topics

00:31:57,200 --> 00:32:00,720
including

00:31:57,919 --> 00:32:01,120
discussions of feature requests we've

00:32:00,720 --> 00:32:04,240
got

00:32:01,120 --> 00:32:06,159
two user tech leads bryson shepard and

00:32:04,240 --> 00:32:07,679
joe cersey who helped get this group

00:32:06,159 --> 00:32:10,480
started

00:32:07,679 --> 00:32:12,559
but they couldn't be with us today in

00:32:10,480 --> 00:32:14,320
this online presentation

00:32:12,559 --> 00:32:16,559
we're looking forward to growing this

00:32:14,320 --> 00:32:17,600
group with a diverse set of worldwide

00:32:16,559 --> 00:32:19,600
users

00:32:17,600 --> 00:32:21,679
the group is also running a slack

00:32:19,600 --> 00:32:25,840
channel which is a great place to act

00:32:21,679 --> 00:32:29,840
ask questions and meet other users

00:32:25,840 --> 00:32:29,840
it's a good place to bring up

00:32:30,240 --> 00:32:34,480
vsphere specific topics but if you want

00:32:32,559 --> 00:32:35,679
to talk about kubernetes in general

00:32:34,480 --> 00:32:39,600
perhaps the

00:32:35,679 --> 00:32:42,399
there is also a kubernetes user uh

00:32:39,600 --> 00:32:44,000
channel which might be more appropriate

00:32:42,399 --> 00:32:47,360
really generic

00:32:44,000 --> 00:32:47,360
questions and discussions

00:32:47,600 --> 00:32:50,960
it's also the slack channel is also a

00:32:49,679 --> 00:32:53,760
great place to

00:32:50,960 --> 00:32:57,760
reach out to meet code contributors and

00:32:53,760 --> 00:32:59,760
documentation contributors

00:32:57,760 --> 00:33:01,039
so the next user group meeting is going

00:32:59,760 --> 00:33:06,159
to be september

00:33:01,039 --> 00:33:08,399
3rd in the north american time zone

00:33:06,159 --> 00:33:09,200
you can go to the kubernetes community

00:33:08,399 --> 00:33:11,919
calendar

00:33:09,200 --> 00:33:14,000
link shown here to get a conversion to

00:33:11,919 --> 00:33:16,159
your local time zone and to add it to

00:33:14,000 --> 00:33:18,640
your calendar

00:33:16,159 --> 00:33:20,559
you can become a group member by joining

00:33:18,640 --> 00:33:22,080
them joining the mailing list that's

00:33:20,559 --> 00:33:25,039
shown in the link here

00:33:22,080 --> 00:33:27,679
and finally here's a link to the group's

00:33:25,039 --> 00:33:29,760
slack channel

00:33:27,679 --> 00:33:31,360
so miles and i are going to hang around

00:33:29,760 --> 00:33:33,519
for q a

00:33:31,360 --> 00:33:35,600
there's a link at the top that will get

00:33:33,519 --> 00:33:38,480
you this deck

00:33:35,600 --> 00:33:40,480
the slide also shows our github ids and

00:33:38,480 --> 00:33:42,640
if you're watching the recording later

00:33:40,480 --> 00:33:44,000
you can ask questions on the user group

00:33:42,640 --> 00:33:45,840
slack channel

00:33:44,000 --> 00:33:47,039
thank you and i hope to see you in a

00:33:45,840 --> 00:33:48,960
future meeting

00:33:47,039 --> 00:33:50,840
at this point i'm going to turn it back

00:33:48,960 --> 00:33:53,840
over to the cncf

00:33:50,840 --> 00:33:53,840

YouTube URL: https://www.youtube.com/watch?v=VJ5FK-QrtHY


