Title: Kubernetes? But I'm a Product Manager… - Matthew McNeeney, Independent & Miguel Luna, VMware
Publication date: 2020-08-28
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Kubernetes? But I'm a Product Manager… - Matthew McNeeney, Independent & Miguel Luna, VMware 

Good product teams care deeply about their users and the experience they provide to them, yet many Product Managers shy away from conversations about Kubernetes, believing that it’s something for their engineering counterparts to think about. But this is a critical mistake; many of the benefits Kubernetes brings can be harnessed to deliver better products, faster.  The Kubernetes.io tagline is ‘Production-Grade Container Orchestration’, so it’s easy to see why Product Managers tend to leave it aside as an engineering concern. But much of the innovative work happening in the ecosystem can be used to ship software faster and deliver great user experiences. This talk will cover how Product Managers building different types of software can utilise features in Kubernetes to build extensible, scalable and cloud-agnostic products that drive better customer outcomes.

https://sched.co/ZenX
Captions: 
	00:00:00,080 --> 00:00:03,360
hello everyone and welcome to our

00:00:02,000 --> 00:00:06,560
presentation for

00:00:03,360 --> 00:00:09,120
kubernetes but i'm a product manager

00:00:06,560 --> 00:00:11,040
i guess the title says it all and the

00:00:09,120 --> 00:00:12,719
only plot twist here is that

00:00:11,040 --> 00:00:15,839
we have tried to make this different by

00:00:12,719 --> 00:00:17,600
using a board as opposed to slides

00:00:15,839 --> 00:00:19,439
so first things first let's begin with

00:00:17,600 --> 00:00:22,080
introductions

00:00:19,439 --> 00:00:22,960
i'll start with myself i'm miguel i've

00:00:22,080 --> 00:00:25,920
been working in

00:00:22,960 --> 00:00:27,840
product management for over six years

00:00:25,920 --> 00:00:30,720
i'm an industrial engineer and

00:00:27,840 --> 00:00:31,679
worked with levi's throws a long time

00:00:30,720 --> 00:00:32,960
ago

00:00:31,679 --> 00:00:35,360
where i got involved with link

00:00:32,960 --> 00:00:37,680
techniques but in the context

00:00:35,360 --> 00:00:39,680
of a physical product manufacturing the

00:00:37,680 --> 00:00:41,760
original context

00:00:39,680 --> 00:00:44,239
after that i worked in the uk in a

00:00:41,760 --> 00:00:46,719
startup for a number of years

00:00:44,239 --> 00:00:47,600
and then gift cap which is a very

00:00:46,719 --> 00:00:50,160
popular

00:00:47,600 --> 00:00:51,920
telco network in the uk which is

00:00:50,160 --> 00:00:54,320
community focus

00:00:51,920 --> 00:00:56,800
and this is where i had my first days of

00:00:54,320 --> 00:00:57,199
kubernetes migrating from operationship

00:00:56,800 --> 00:01:00,960
to

00:00:57,199 --> 00:01:03,600
eks and after that i moved to pivotal

00:01:00,960 --> 00:01:06,880
now vmware where i've been working

00:01:03,600 --> 00:01:09,040
in involving the multi-cluster

00:01:06,880 --> 00:01:10,640
lifecycle management of kubernetes

00:01:09,040 --> 00:01:12,560
operators

00:01:10,640 --> 00:01:14,240
okay enough of me let's hear it from

00:01:12,560 --> 00:01:16,640
matt

00:01:14,240 --> 00:01:19,040
hey everyone my name's matt i started my

00:01:16,640 --> 00:01:20,640
product management career in 2014

00:01:19,040 --> 00:01:22,960
working at different consumer-facing

00:01:20,640 --> 00:01:24,880
startups and then i switched over to the

00:01:22,960 --> 00:01:26,560
enterprise software world

00:01:24,880 --> 00:01:29,040
joining vmware and spending the last few

00:01:26,560 --> 00:01:30,799
years working on developer marketplaces

00:01:29,040 --> 00:01:33,280
for tools like cloud foundry and

00:01:30,799 --> 00:01:35,759
kubernetes

00:01:33,280 --> 00:01:37,920
great let's talk about goals for this

00:01:35,759 --> 00:01:40,320
presentation

00:01:37,920 --> 00:01:42,320
when we first landed into kubernetes it

00:01:40,320 --> 00:01:43,759
took us some time to react to what we

00:01:42,320 --> 00:01:46,320
were seeing

00:01:43,759 --> 00:01:48,640
given the first definition of kubernetes

00:01:46,320 --> 00:01:50,799
being is a contrainer orchestration

00:01:48,640 --> 00:01:52,240
solution

00:01:50,799 --> 00:01:55,040
being a product manager the first

00:01:52,240 --> 00:01:56,079
question was a solution to which

00:01:55,040 --> 00:01:59,759
problems

00:01:56,079 --> 00:02:02,560
why do we need this it is clear that

00:01:59,759 --> 00:02:04,320
kubernetes solves different problems

00:02:02,560 --> 00:02:05,920
for different people depending on your

00:02:04,320 --> 00:02:07,439
context

00:02:05,920 --> 00:02:09,920
and to help dig out some of these

00:02:07,439 --> 00:02:11,840
problems we will take a product through

00:02:09,920 --> 00:02:12,879
the different stages of the product life

00:02:11,840 --> 00:02:15,120
cycle

00:02:12,879 --> 00:02:16,560
and save some scenarios for how

00:02:15,120 --> 00:02:19,440
kubernetes can help at

00:02:16,560 --> 00:02:19,440
each stage

00:02:19,840 --> 00:02:24,800
the second goal is to gather some ideas

00:02:22,319 --> 00:02:27,200
on how product people can contribute

00:02:24,800 --> 00:02:29,120
to the kubernetes community and matt

00:02:27,200 --> 00:02:32,160
will take us through this one

00:02:29,120 --> 00:02:33,840
at the end we also have a fancy kanban

00:02:32,160 --> 00:02:35,599
for an agenda for today

00:02:33,840 --> 00:02:37,840
so i'll hand it over to matt to take us

00:02:35,599 --> 00:02:39,760
through through it and kick it off

00:02:37,840 --> 00:02:41,519
thanks miguel so let's quickly go over

00:02:39,760 --> 00:02:42,720
our agenda for today

00:02:41,519 --> 00:02:44,400
we're going to start with talking

00:02:42,720 --> 00:02:46,160
through the product life cycle and how

00:02:44,400 --> 00:02:47,840
it can apply to kubernetes

00:02:46,160 --> 00:02:49,599
we'll talk about some product practices

00:02:47,840 --> 00:02:51,360
you can apply and then we'll talk about

00:02:49,599 --> 00:02:53,120
how you can get involved and do a quick

00:02:51,360 --> 00:02:54,800
q a at the end

00:02:53,120 --> 00:02:56,319
the product life cycle concept is more

00:02:54,800 --> 00:02:57,920
than 50 years old now

00:02:56,319 --> 00:02:59,760
and for those who are unfamiliar with it

00:02:57,920 --> 00:03:01,360
is it essentially describes the four

00:02:59,760 --> 00:03:02,480
stages every product goes through in

00:03:01,360 --> 00:03:03,920
this life

00:03:02,480 --> 00:03:05,840
from introduction and development

00:03:03,920 --> 00:03:07,440
through growth maturity and finally

00:03:05,840 --> 00:03:08,560
decline

00:03:07,440 --> 00:03:10,480
now we're not going to go into this

00:03:08,560 --> 00:03:12,239
concept in any more detail but there's

00:03:10,480 --> 00:03:13,760
lots of content easily available online

00:03:12,239 --> 00:03:15,599
for those who are interested in learning

00:03:13,760 --> 00:03:17,120
more about each stage or the origin of

00:03:15,599 --> 00:03:18,800
this framework

00:03:17,120 --> 00:03:20,480
what we do want to do today is take a

00:03:18,800 --> 00:03:21,599
hypothetical product through each of

00:03:20,480 --> 00:03:23,200
these stages

00:03:21,599 --> 00:03:24,720
and share some ideas of how we think

00:03:23,200 --> 00:03:25,920
kubernetes can help product teams

00:03:24,720 --> 00:03:28,959
building products in each of

00:03:25,920 --> 00:03:30,080
each stage so let's get going we're

00:03:28,959 --> 00:03:31,120
going to start work on a brand new

00:03:30,080 --> 00:03:33,200
product or initiative

00:03:31,120 --> 00:03:36,480
and so we're in this introduction phase

00:03:33,200 --> 00:03:37,840
what should we be thinking about here

00:03:36,480 --> 00:03:39,840
product teams and software companies

00:03:37,840 --> 00:03:41,599
need to spend as much time as possible

00:03:39,840 --> 00:03:42,879
iterating on their applications that

00:03:41,599 --> 00:03:44,000
actually deliver value to their

00:03:42,879 --> 00:03:45,519
customers

00:03:44,000 --> 00:03:47,120
this is especially critical when you're

00:03:45,519 --> 00:03:49,440
working on something brand new

00:03:47,120 --> 00:03:50,239
either at a startup or larger enterprise

00:03:49,440 --> 00:03:52,959
and you need to find

00:03:50,239 --> 00:03:54,640
product market fit the only way to know

00:03:52,959 --> 00:03:56,080
you're getting closer to this is to work

00:03:54,640 --> 00:03:57,760
out what you want to learn

00:03:56,080 --> 00:03:59,599
plan how you're going to measure that

00:03:57,760 --> 00:04:00,799
and then build and ship the smallest

00:03:59,599 --> 00:04:02,080
thing that will help you get that

00:04:00,799 --> 00:04:04,080
learning

00:04:02,080 --> 00:04:05,680
for those familiar with the lean startup

00:04:04,080 --> 00:04:06,720
this build measure learn loop will be

00:04:05,680 --> 00:04:08,000
very familiar

00:04:06,720 --> 00:04:10,319
this is one of the most critical

00:04:08,000 --> 00:04:11,280
concepts of that movement and your goal

00:04:10,319 --> 00:04:13,280
as a product manager

00:04:11,280 --> 00:04:14,720
in a product team is to minimize the

00:04:13,280 --> 00:04:16,880
amount of time it takes you to get

00:04:14,720 --> 00:04:18,560
through each of these stages

00:04:16,880 --> 00:04:20,400
we think there are three different ways

00:04:18,560 --> 00:04:21,759
in which kubernetes can help you reduce

00:04:20,400 --> 00:04:24,240
the time it takes you to get through

00:04:21,759 --> 00:04:24,240
this loop

00:04:24,320 --> 00:04:28,080
to really optimize time spent in the

00:04:26,080 --> 00:04:29,840
build step product teams need to be

00:04:28,080 --> 00:04:32,479
spending time writing the code that

00:04:29,840 --> 00:04:34,960
actually delivers value to their users

00:04:32,479 --> 00:04:37,040
i co-founded a startup in 2015 and i

00:04:34,960 --> 00:04:38,240
remember spending more than half my time

00:04:37,040 --> 00:04:40,400
just trying to get the basic

00:04:38,240 --> 00:04:41,600
infrastructure up and running our users

00:04:40,400 --> 00:04:42,880
never saw this work

00:04:41,600 --> 00:04:44,720
and there were many things that we ended

00:04:42,880 --> 00:04:46,400
up over optimizing for because we were

00:04:44,720 --> 00:04:48,639
scared of having to go back and recreate

00:04:46,400 --> 00:04:50,240
lots of things later on

00:04:48,639 --> 00:04:52,160
paul ingalls wrote a great post on

00:04:50,240 --> 00:04:54,160
medium about uswitch's experience after

00:04:52,160 --> 00:04:56,800
they adopted kubernetes

00:04:54,160 --> 00:04:59,680
their cto said teams don't realize how

00:04:56,800 --> 00:05:01,199
much they haven't had to do

00:04:59,680 --> 00:05:03,120
you may have seen a complex modern

00:05:01,199 --> 00:05:04,160
application visualized using an iceberg

00:05:03,120 --> 00:05:05,600
before

00:05:04,160 --> 00:05:07,520
and it's this stuff above the line that

00:05:05,600 --> 00:05:08,960
your customers truly get value from not

00:05:07,520 --> 00:05:10,560
the stuff below

00:05:08,960 --> 00:05:11,759
and so by adopting some of the out of

00:05:10,560 --> 00:05:12,720
the box features that come with

00:05:11,759 --> 00:05:14,240
kubernetes

00:05:12,720 --> 00:05:15,919
product teams can spend more and more

00:05:14,240 --> 00:05:19,680
time above this water line

00:05:15,919 --> 00:05:20,800
and get through the build cycle faster

00:05:19,680 --> 00:05:22,479
so let's assume you've built the

00:05:20,800 --> 00:05:24,320
smallest thing you needed to build to

00:05:22,479 --> 00:05:25,600
measure and learn from now you need to

00:05:24,320 --> 00:05:27,520
get this into your users hands as

00:05:25,600 --> 00:05:28,960
quickly as possible

00:05:27,520 --> 00:05:30,639
if you've worked in a large enterprise

00:05:28,960 --> 00:05:31,919
you'll no doubt have face long delays in

00:05:30,639 --> 00:05:33,919
getting your software deployed and

00:05:31,919 --> 00:05:35,759
available to your users

00:05:33,919 --> 00:05:38,080
in many organizations you've spoken to

00:05:35,759 --> 00:05:40,080
this is often weeks if not months

00:05:38,080 --> 00:05:41,919
so this is one of the slowest aspects of

00:05:40,080 --> 00:05:43,120
the build measure learn cycle for many

00:05:41,919 --> 00:05:45,199
product teams you've spoken to

00:05:43,120 --> 00:05:47,120
historically

00:05:45,199 --> 00:05:48,880
gift gas mattias who leads their site

00:05:47,120 --> 00:05:49,600
reliability engineering and automation

00:05:48,880 --> 00:05:51,120
teams

00:05:49,600 --> 00:05:53,039
told us that adopting kubernetes has

00:05:51,120 --> 00:05:55,759
helped them reduce this time down from

00:05:53,039 --> 00:05:57,520
two weeks to half a day

00:05:55,759 --> 00:05:59,759
this means that product teams at gifgaf

00:05:57,520 --> 00:06:00,720
can run 20 times more experiments than

00:05:59,759 --> 00:06:02,240
before

00:06:00,720 --> 00:06:04,880
and get through the build measure learn

00:06:02,240 --> 00:06:06,560
loop 20 times faster

00:06:04,880 --> 00:06:08,080
you switch saw something very similar

00:06:06,560 --> 00:06:09,680
and this graph from the same blog post

00:06:08,080 --> 00:06:11,600
we spoke about a second ago

00:06:09,680 --> 00:06:15,120
shows you switch tripling their weekly

00:06:11,600 --> 00:06:17,440
deploys after adopting kubernetes

00:06:15,120 --> 00:06:18,720
and our final point on this one again is

00:06:17,440 --> 00:06:20,240
especially important when you're

00:06:18,720 --> 00:06:21,759
starting work on a new product or

00:06:20,240 --> 00:06:23,680
initiative

00:06:21,759 --> 00:06:25,039
kubernetes has a growing thriving

00:06:23,680 --> 00:06:26,720
ecosystem right now

00:06:25,039 --> 00:06:28,319
and many of these open source projects

00:06:26,720 --> 00:06:30,160
can help you increase your speed through

00:06:28,319 --> 00:06:32,000
the build measured learn loop

00:06:30,160 --> 00:06:34,319
using things like bitnami's application

00:06:32,000 --> 00:06:35,919
catalog and operator hub.io you could

00:06:34,319 --> 00:06:36,639
feasibly get a brand new feature or

00:06:35,919 --> 00:06:39,199
application

00:06:36,639 --> 00:06:41,039
built deployed and into your users hands

00:06:39,199 --> 00:06:43,039
in a matter of hours

00:06:41,039 --> 00:06:44,720
this rapid experimentation will help you

00:06:43,039 --> 00:06:46,840
learn what your customers need

00:06:44,720 --> 00:06:49,599
and help you get to product market fit

00:06:46,840 --> 00:06:51,680
faster

00:06:49,599 --> 00:06:53,280
okay so let's assume you know we've

00:06:51,680 --> 00:06:54,479
built uh built a reasonable product

00:06:53,280 --> 00:06:56,000
we've got through this introduction

00:06:54,479 --> 00:06:57,520
phase and we're starting to get into the

00:06:56,000 --> 00:06:58,960
exciting growth phase

00:06:57,520 --> 00:07:04,080
uh miguel what should we be thinking

00:06:58,960 --> 00:07:06,160
about here thank you matt

00:07:04,080 --> 00:07:07,599
we're not growing and it's great let's

00:07:06,160 --> 00:07:09,039
assume you're even thinking about

00:07:07,599 --> 00:07:10,560
expanding your business to other

00:07:09,039 --> 00:07:12,319
geographies

00:07:10,560 --> 00:07:14,000
someone talked to you about all the

00:07:12,319 --> 00:07:14,560
great benefits of containers and you

00:07:14,000 --> 00:07:16,560
think

00:07:14,560 --> 00:07:19,360
great i just have to put my application

00:07:16,560 --> 00:07:21,680
in a container and it's fully portable

00:07:19,360 --> 00:07:22,720
however as matt explained in the iceberg

00:07:21,680 --> 00:07:24,319
analogy

00:07:22,720 --> 00:07:26,720
there is always something below the

00:07:24,319 --> 00:07:30,080
water level and it is wise to have a

00:07:26,720 --> 00:07:33,360
quick exploration to avoid surprises

00:07:30,080 --> 00:07:34,720
that said let's talk about portability

00:07:33,360 --> 00:07:37,360
and what could be interesting for

00:07:34,720 --> 00:07:40,639
product managers

00:07:37,360 --> 00:07:43,039
if you look at this guy here struggling

00:07:40,639 --> 00:07:44,960
is to give you an idea of all the

00:07:43,039 --> 00:07:46,000
concepts an application developer needs

00:07:44,960 --> 00:07:48,240
to understand

00:07:46,000 --> 00:07:49,599
and use to run a single containerized

00:07:48,240 --> 00:07:53,280
application

00:07:49,599 --> 00:07:56,160
effectively in kubernetes there are

00:07:53,280 --> 00:07:57,199
approximately 15 kubernetes concepts

00:07:56,160 --> 00:07:59,039
here

00:07:57,199 --> 00:08:00,319
and this doesn't include supporting

00:07:59,039 --> 00:08:03,360
kubernetes objects

00:08:00,319 --> 00:08:06,319
and tools for day two operations which i

00:08:03,360 --> 00:08:07,840
don't even know much of myself

00:08:06,319 --> 00:08:09,280
i'm not even suggesting that product

00:08:07,840 --> 00:08:10,879
managers need to understand all

00:08:09,280 --> 00:08:12,960
kubernetes concepts

00:08:10,879 --> 00:08:14,800
but it is good to get a glimpse and

00:08:12,960 --> 00:08:17,840
understand what portability really mean

00:08:14,800 --> 00:08:17,840
for kubernetes

00:08:18,160 --> 00:08:21,919
and because you're in a stage of growth

00:08:20,639 --> 00:08:24,000
is the perfect time to set the

00:08:21,919 --> 00:08:26,319
foundation of your portability

00:08:24,000 --> 00:08:27,120
and how you plan on working with all

00:08:26,319 --> 00:08:30,240
these jamal

00:08:27,120 --> 00:08:32,719
even when you are even bigger we asked

00:08:30,240 --> 00:08:34,560
this question to matthias from gift card

00:08:32,719 --> 00:08:36,080
how would you deploy gift craft tomorrow

00:08:34,560 --> 00:08:38,159
somewhere else

00:08:36,080 --> 00:08:40,240
not sure why he picked ohio but his

00:08:38,159 --> 00:08:42,880
answer is very insightful

00:08:40,240 --> 00:08:44,159
the key to portability is infrastructure

00:08:42,880 --> 00:08:46,240
as code

00:08:44,159 --> 00:08:47,519
in other words if you set your

00:08:46,240 --> 00:08:49,839
foundations right

00:08:47,519 --> 00:08:50,800
then deployment in another area country

00:08:49,839 --> 00:08:53,600
or continent

00:08:50,800 --> 00:08:54,720
will be easy however you have to

00:08:53,600 --> 00:08:56,560
remember

00:08:54,720 --> 00:08:58,160
that during this stage you're still

00:08:56,560 --> 00:08:59,600
experimenting with a limb

00:08:58,160 --> 00:09:02,080
with the lean mindset that matt

00:08:59,600 --> 00:09:03,360
mentioned trying to prove and disprove

00:09:02,080 --> 00:09:05,839
many hypotheses

00:09:03,360 --> 00:09:06,720
and you need to move fast in inexpensive

00:09:05,839 --> 00:09:09,040
ways

00:09:06,720 --> 00:09:11,360
to learn what you need to learn so what

00:09:09,040 --> 00:09:13,120
do you do

00:09:11,360 --> 00:09:15,120
luckily there are many flavors of

00:09:13,120 --> 00:09:16,399
kubernetes available to help you make a

00:09:15,120 --> 00:09:19,920
decision

00:09:16,399 --> 00:09:22,480
based on your particular circumstances

00:09:19,920 --> 00:09:23,360
many you don't have to spend too much

00:09:22,480 --> 00:09:25,600
time upfront

00:09:23,360 --> 00:09:28,160
setting up influenza code before

00:09:25,600 --> 00:09:31,600
deciding qr net is the solution

00:09:28,160 --> 00:09:33,519
the right solution for you some of these

00:09:31,600 --> 00:09:34,720
opinionated kubernetes can be an

00:09:33,519 --> 00:09:37,360
accelerator

00:09:34,720 --> 00:09:39,279
but it's important to remember that you

00:09:37,360 --> 00:09:41,519
are sacrificing portability and you need

00:09:39,279 --> 00:09:42,560
to be aware of how far you can go into

00:09:41,519 --> 00:09:45,760
these solutions

00:09:42,560 --> 00:09:45,760
before you get locked in

00:09:46,080 --> 00:09:50,320
if your goal is to move between clouds

00:09:48,720 --> 00:09:51,680
freely for example

00:09:50,320 --> 00:09:53,760
you might want to ignore a

00:09:51,680 --> 00:09:54,320
cloud-specific service and consider

00:09:53,760 --> 00:09:56,880
going up

00:09:54,320 --> 00:09:58,240
a layer a layer of abstraction to deploy

00:09:56,880 --> 00:10:00,720
your applications

00:09:58,240 --> 00:10:03,200
to a solution that is cloud agnostic as

00:10:00,720 --> 00:10:04,880
an example of a cloud agnostic solution

00:10:03,200 --> 00:10:07,680
in vmware you might want to have a look

00:10:04,880 --> 00:10:09,440
at the tansu application service

00:10:07,680 --> 00:10:11,680
for kubernetes which you can deploy

00:10:09,440 --> 00:10:14,480
across multiple clouds

00:10:11,680 --> 00:10:16,079
so that's all for the growth scenario

00:10:14,480 --> 00:10:19,360
matt why don't we move this product into

00:10:16,079 --> 00:10:20,800
the maturity stage

00:10:19,360 --> 00:10:22,800
so you've launched this brand new

00:10:20,800 --> 00:10:23,839
product and you've grown it into a huge

00:10:22,800 --> 00:10:26,000
success

00:10:23,839 --> 00:10:27,279
that's awesome but at some point in time

00:10:26,000 --> 00:10:28,959
the inevitable will happen

00:10:27,279 --> 00:10:31,680
and your product will reach the mature

00:10:28,959 --> 00:10:33,600
stage this is especially prevalent in

00:10:31,680 --> 00:10:34,640
enterprises where long support contracts

00:10:33,600 --> 00:10:36,320
are common

00:10:34,640 --> 00:10:38,240
and in this stage of the life cycle your

00:10:36,320 --> 00:10:39,600
goal is to continue delivering value to

00:10:38,240 --> 00:10:41,279
your existing customers

00:10:39,600 --> 00:10:43,279
whilst finding ways to increase your

00:10:41,279 --> 00:10:44,720
profits often through reducing your

00:10:43,279 --> 00:10:46,800
costs

00:10:44,720 --> 00:10:48,320
we've spoken to many many organizations

00:10:46,800 --> 00:10:49,839
who have really struggled with the first

00:10:48,320 --> 00:10:51,440
part of this goal

00:10:49,839 --> 00:10:52,880
how do you continue innovating and

00:10:51,440 --> 00:10:54,320
delivering more value

00:10:52,880 --> 00:10:56,160
when you're suddenly competing for

00:10:54,320 --> 00:10:57,600
resources across multiple projects and

00:10:56,160 --> 00:10:59,519
other new initiatives

00:10:57,600 --> 00:11:01,120
and this is hard especially if within a

00:10:59,519 --> 00:11:04,399
short space of time you've gone from

00:11:01,120 --> 00:11:05,920
say 10 to 10 000 developers

00:11:04,399 --> 00:11:07,519
regarding the second half of this goal

00:11:05,920 --> 00:11:09,440
there are likely many ways you could do

00:11:07,519 --> 00:11:10,240
this but one place we've seen kubernetes

00:11:09,440 --> 00:11:12,800
really help

00:11:10,240 --> 00:11:14,320
is in reducing your infrastructure costs

00:11:12,800 --> 00:11:16,320
so let's take a brief look into each of

00:11:14,320 --> 00:11:18,079
these bits

00:11:16,320 --> 00:11:19,680
so you've grown to 10 000 developers

00:11:18,079 --> 00:11:21,120
they work in awesome product teams

00:11:19,680 --> 00:11:22,399
trying to accelerate through the build

00:11:21,120 --> 00:11:24,079
measure learn cycle

00:11:22,399 --> 00:11:25,680
and they're wanting to deploy tens of

00:11:24,079 --> 00:11:27,279
times every day

00:11:25,680 --> 00:11:28,720
but your operations and security teams

00:11:27,279 --> 00:11:30,480
are in a lot of pain

00:11:28,720 --> 00:11:32,320
your infrastructure is exploding and

00:11:30,480 --> 00:11:33,600
there's a high risk of things breaking

00:11:32,320 --> 00:11:35,440
and they're reluctant to let product

00:11:33,600 --> 00:11:38,320
teams make all of these changes

00:11:35,440 --> 00:11:39,760
what do you do the best organizations

00:11:38,320 --> 00:11:41,440
we've spoken to who managed to

00:11:39,760 --> 00:11:42,240
consistently innovate at this kind of

00:11:41,440 --> 00:11:44,240
scale

00:11:42,240 --> 00:11:45,600
have all adopted platform as a product

00:11:44,240 --> 00:11:47,120
principles

00:11:45,600 --> 00:11:48,640
this means that you treat the platform

00:11:47,120 --> 00:11:51,120
that your product teams use

00:11:48,640 --> 00:11:52,800
every day as a product in its own right

00:11:51,120 --> 00:11:54,839
and one that is incredibly important in

00:11:52,800 --> 00:11:56,000
delivering value to all of your

00:11:54,839 --> 00:11:57,600
customers

00:11:56,000 --> 00:11:59,920
the destination here is the kind of

00:11:57,600 --> 00:12:01,680
experiences tools like heroku and cloud

00:11:59,920 --> 00:12:04,000
foundry give developers

00:12:01,680 --> 00:12:05,279
one button deploys in a safe and secure

00:12:04,000 --> 00:12:06,240
way that meet the needs of both the

00:12:05,279 --> 00:12:08,480
product teams

00:12:06,240 --> 00:12:09,680
and the operations security and audit

00:12:08,480 --> 00:12:11,519
teams

00:12:09,680 --> 00:12:13,600
many companies are building platforms

00:12:11,519 --> 00:12:15,760
that help bring the kubernetes and

00:12:13,600 --> 00:12:17,440
platforms of product worlds together

00:12:15,760 --> 00:12:19,200
helping product teams get kubernetes

00:12:17,440 --> 00:12:20,880
clusters that meet the needs of their

00:12:19,200 --> 00:12:22,639
security and compliance teams

00:12:20,880 --> 00:12:24,320
with things like logging metrics all

00:12:22,639 --> 00:12:26,800
ready to go in a sec

00:12:24,320 --> 00:12:28,800
in minutes or even less right rather

00:12:26,800 --> 00:12:30,639
than hours or weeks

00:12:28,800 --> 00:12:31,920
this is a huge topic in its own right

00:12:30,639 --> 00:12:32,880
but if you feel like you want to learn

00:12:31,920 --> 00:12:34,880
more about this

00:12:32,880 --> 00:12:36,000
if you just search google for tanzu

00:12:34,880 --> 00:12:37,600
platform as a product

00:12:36,000 --> 00:12:39,600
then you'll find a great white paper on

00:12:37,600 --> 00:12:41,040
this

00:12:39,600 --> 00:12:42,399
now let's quickly look at a couple of

00:12:41,040 --> 00:12:44,320
examples of modern companies

00:12:42,399 --> 00:12:46,560
successfully using kubernetes to reduce

00:12:44,320 --> 00:12:48,399
their infrastructure costs

00:12:46,560 --> 00:12:50,560
first let's jump back to giftgaff again

00:12:48,399 --> 00:12:53,120
and read this great quote

00:12:50,560 --> 00:12:54,720
the automation team owns the platform we

00:12:53,120 --> 00:12:55,680
provide a platform as a service to other

00:12:54,720 --> 00:12:57,040
teams

00:12:55,680 --> 00:12:59,040
our cluster scales up and down

00:12:57,040 --> 00:13:02,320
automatically so at 3am

00:12:59,040 --> 00:13:05,200
when services are idle it shrinks at 3pm

00:13:02,320 --> 00:13:06,959
the site's very busy it scales up before

00:13:05,200 --> 00:13:09,440
kubernetes we couldn't do this

00:13:06,959 --> 00:13:11,440
we treated vms like pets guessing how

00:13:09,440 --> 00:13:13,519
much capacity we needed for peak times

00:13:11,440 --> 00:13:14,639
and we over allocated 90 of the time

00:13:13,519 --> 00:13:16,240
anyway

00:13:14,639 --> 00:13:17,920
the built-in features of kubernetes

00:13:16,240 --> 00:13:19,920
means that they no longer need to bet

00:13:17,920 --> 00:13:21,120
what capacity they need for peak times

00:13:19,920 --> 00:13:23,200
like black friday

00:13:21,120 --> 00:13:26,000
and can instead save that money by only

00:13:23,200 --> 00:13:28,000
using the capacity they need

00:13:26,000 --> 00:13:29,440
oliver beatty from monzo a challenger

00:13:28,000 --> 00:13:31,040
bank here in the uk

00:13:29,440 --> 00:13:32,959
wrote a great blog post about how the

00:13:31,040 --> 00:13:34,800
monzo team are using kubernetes to build

00:13:32,959 --> 00:13:35,600
a highly available bank from the ground

00:13:34,800 --> 00:13:37,200
up

00:13:35,600 --> 00:13:39,760
the system they've built to do this runs

00:13:37,200 --> 00:13:41,279
on kubernetes and as this graph shows

00:13:39,760 --> 00:13:42,800
has drastically reduced the cost of

00:13:41,279 --> 00:13:44,720
their infrastructure after a quick

00:13:42,800 --> 00:13:46,480
initial investment

00:13:44,720 --> 00:13:48,720
one of the clever examples the monzo

00:13:46,480 --> 00:13:50,320
team talk about here is how they now run

00:13:48,720 --> 00:13:52,560
their high usage build jobs

00:13:50,320 --> 00:13:53,360
using spare capacity and their existing

00:13:52,560 --> 00:13:56,639
infrastructure

00:13:53,360 --> 00:13:56,639
which is basically free

00:13:57,120 --> 00:14:00,560
all right so going back to the product

00:13:59,199 --> 00:14:01,920
life cycle graph

00:14:00,560 --> 00:14:04,160
let's say we've got through this

00:14:01,920 --> 00:14:06,639
maturity phase and again the inevitable

00:14:04,160 --> 00:14:09,920
happens we move into decline

00:14:06,639 --> 00:14:09,920
miguel what happens here

00:14:10,880 --> 00:14:14,720
so there are many reasons that could

00:14:12,720 --> 00:14:16,560
account for a declining product

00:14:14,720 --> 00:14:18,800
but in this scenario we will assume

00:14:16,560 --> 00:14:21,199
customer satisfaction is down because of

00:14:18,800 --> 00:14:22,880
poor service levels

00:14:21,199 --> 00:14:24,399
this quote from the team that wrote the

00:14:22,880 --> 00:14:26,320
google sre book

00:14:24,399 --> 00:14:28,240
is key to help us understand how to

00:14:26,320 --> 00:14:30,399
prioritize

00:14:28,240 --> 00:14:32,079
so it reads customer happiness is a

00:14:30,399 --> 00:14:33,920
rather fuzzy concept

00:14:32,079 --> 00:14:36,000
we can't measure it precisely our

00:14:33,920 --> 00:14:39,760
experience has shown that 100

00:14:36,000 --> 00:14:41,600
reliability is the wrong target

00:14:39,760 --> 00:14:42,959
of course you want 100 customer

00:14:41,600 --> 00:14:45,440
satisfaction

00:14:42,959 --> 00:14:46,639
but acknowledging that 100 service level

00:14:45,440 --> 00:14:50,240
is the wrong goal

00:14:46,639 --> 00:14:52,880
will help us avoid wasted investment

00:14:50,240 --> 00:14:54,480
because even with redundant components

00:14:52,880 --> 00:14:56,959
automated health checking

00:14:54,480 --> 00:14:59,040
and password lower there's still a small

00:14:56,959 --> 00:15:01,120
probability that something will build

00:14:59,040 --> 00:15:02,079
simultaneously and you will not achieve

00:15:01,120 --> 00:15:05,839
this 100

00:15:02,079 --> 00:15:08,800
target assuming you could hypothetically

00:15:05,839 --> 00:15:09,440
achieve 100 reliability there is a

00:15:08,800 --> 00:15:11,600
complex

00:15:09,440 --> 00:15:12,480
chain of components between you and your

00:15:11,600 --> 00:15:14,480
customers

00:15:12,480 --> 00:15:16,720
so they will not experience a hundred

00:15:14,480 --> 00:15:19,040
percent

00:15:16,720 --> 00:15:21,839
let's now talk about the famous lines of

00:15:19,040 --> 00:15:21,839
service levels

00:15:23,120 --> 00:15:27,920
as you go from two nines to three nines

00:15:25,760 --> 00:15:29,920
even to the mythical five nines

00:15:27,920 --> 00:15:31,279
each extra nine comes at an increased

00:15:29,920 --> 00:15:33,199
cost

00:15:31,279 --> 00:15:35,240
to give you an idea three nines give you

00:15:33,199 --> 00:15:38,720
a downtime of

00:15:35,240 --> 00:15:41,120
8.77 hours per year

00:15:38,720 --> 00:15:42,759
and the same allowed downtime downtime

00:15:41,120 --> 00:15:45,680
goes down to

00:15:42,759 --> 00:15:48,320
5.26 minutes with just two

00:15:45,680 --> 00:15:51,600
extra nines just picture the investment

00:15:48,320 --> 00:15:53,519
required to get to this level

00:15:51,600 --> 00:15:55,199
due to the constraints from other

00:15:53,519 --> 00:15:57,199
elements in the chain the real benefit

00:15:55,199 --> 00:16:00,000
to your customers reduces

00:15:57,199 --> 00:16:01,199
exponentially until it reaches almost

00:16:00,000 --> 00:16:02,800
zero

00:16:01,199 --> 00:16:05,279
regardless of how much you keep

00:16:02,800 --> 00:16:07,199
investing

00:16:05,279 --> 00:16:09,440
and you need to consider the number of

00:16:07,199 --> 00:16:11,600
one source of outages exchange

00:16:09,440 --> 00:16:13,600
pushing new features applying security

00:16:11,600 --> 00:16:16,240
patches deploying new hardware

00:16:13,600 --> 00:16:18,000
and scaling up to meet customer demand

00:16:16,240 --> 00:16:20,320
this means that you will reduce how much

00:16:18,000 --> 00:16:22,959
you update or improve your service

00:16:20,320 --> 00:16:26,320
and sooner or later it will stagnate and

00:16:22,959 --> 00:16:28,320
your product will inevitably decline

00:16:26,320 --> 00:16:29,920
so how is this related to kubernetes you

00:16:28,320 --> 00:16:32,160
might ask

00:16:29,920 --> 00:16:34,959
engineers are a scar resource even at

00:16:32,160 --> 00:16:36,639
the largest largest organizations

00:16:34,959 --> 00:16:39,199
engineering time should be invested in

00:16:36,639 --> 00:16:39,759
the most important characteristics of

00:16:39,199 --> 00:16:42,560
the most

00:16:39,759 --> 00:16:43,920
important services so striking the right

00:16:42,560 --> 00:16:46,560
balance between investing in

00:16:43,920 --> 00:16:49,279
functionality that will grow

00:16:46,560 --> 00:16:51,279
your customer base versus investing in

00:16:49,279 --> 00:16:51,839
the reliability and scalability that

00:16:51,279 --> 00:16:54,800
will keep

00:16:51,839 --> 00:16:56,240
existing customers happy is difficult

00:16:54,800 --> 00:16:57,759
this is where the automation of

00:16:56,240 --> 00:16:59,839
kubernetes

00:16:57,759 --> 00:17:02,480
controllers for example can help us

00:16:59,839 --> 00:17:04,559
releasing some of that engineering time

00:17:02,480 --> 00:17:06,720
you could even decide to go beyond an

00:17:04,559 --> 00:17:07,760
extended kubernetes using the operator

00:17:06,720 --> 00:17:10,559
pattern

00:17:07,760 --> 00:17:12,160
which will allow you to automate many of

00:17:10,559 --> 00:17:15,199
the human operations

00:17:12,160 --> 00:17:16,160
and releasing engineers from them so as

00:17:15,199 --> 00:17:18,240
product managers

00:17:16,160 --> 00:17:19,760
it is your responsibility to bring to

00:17:18,240 --> 00:17:22,160
the team enough

00:17:19,760 --> 00:17:23,120
information from what is valuable to

00:17:22,160 --> 00:17:25,199
customers

00:17:23,120 --> 00:17:27,839
and help them make a decision as to what

00:17:25,199 --> 00:17:30,400
is the best way to invest their time

00:17:27,839 --> 00:17:32,000
striking the right balance between

00:17:30,400 --> 00:17:35,280
managing reliability

00:17:32,000 --> 00:17:37,200
and improving your product

00:17:35,280 --> 00:17:38,320
right so that's it for the product life

00:17:37,200 --> 00:17:40,880
cycle

00:17:38,320 --> 00:17:42,320
uh matt why don't you let's how about

00:17:40,880 --> 00:17:44,880
why don't we do a quick check on the

00:17:42,320 --> 00:17:47,600
agenda topics

00:17:44,880 --> 00:17:49,679
all right thanks miguel so if we quickly

00:17:47,600 --> 00:17:52,400
jump back over to our agenda

00:17:49,679 --> 00:17:54,320
um then hopefully we can mark this the

00:17:52,400 --> 00:17:57,360
product life cycle and kubernetes

00:17:54,320 --> 00:17:59,919
card is done which is awesome um

00:17:57,360 --> 00:18:01,440
so next up on our agenda is miguel's

00:17:59,919 --> 00:18:03,360
going to talk to us about how we can

00:18:01,440 --> 00:18:03,919
apply some product practices to this

00:18:03,360 --> 00:18:07,520
world

00:18:03,919 --> 00:18:09,360
over to you miguel okay so

00:18:07,520 --> 00:18:11,679
we have taken our product through four

00:18:09,360 --> 00:18:14,160
different scenarios

00:18:11,679 --> 00:18:15,600
and show you how kubernetes could help

00:18:14,160 --> 00:18:18,080
during age

00:18:15,600 --> 00:18:20,480
but it's time for the fun part just

00:18:18,080 --> 00:18:21,919
we're now talking product

00:18:20,480 --> 00:18:24,559
so let's play around with some product

00:18:21,919 --> 00:18:26,559
practices we have a hand-picked

00:18:24,559 --> 00:18:29,039
some important objectives that came up

00:18:26,559 --> 00:18:32,480
during the product stages exercise

00:18:29,039 --> 00:18:36,160
your customers might say they want speed

00:18:32,480 --> 00:18:37,760
as in performance price price price

00:18:36,160 --> 00:18:40,400
which is tied to your capital and

00:18:37,760 --> 00:18:43,280
operational expenditure

00:18:40,400 --> 00:18:45,520
service is key as we discuss reliability

00:18:43,280 --> 00:18:46,720
reliability is required to unexpected

00:18:45,520 --> 00:18:49,440
level

00:18:46,720 --> 00:18:51,200
or they simply want it now timing is

00:18:49,440 --> 00:18:53,039
important as you might have the perfect

00:18:51,200 --> 00:18:54,240
solution but if it's not ready when your

00:18:53,039 --> 00:18:57,360
customers need it

00:18:54,240 --> 00:18:59,440
then it will be of no value to them

00:18:57,360 --> 00:19:00,640
but before we make some uninformed

00:18:59,440 --> 00:19:03,280
prioritization

00:19:00,640 --> 00:19:06,559
let's set a scenario which might help us

00:19:03,280 --> 00:19:09,120
do more than just guessing

00:19:06,559 --> 00:19:10,000
so your product is web hosting for

00:19:09,120 --> 00:19:12,799
geocities

00:19:10,000 --> 00:19:13,679
i hope someone remembers jessica it was

00:19:12,799 --> 00:19:17,039
a long

00:19:13,679 --> 00:19:18,080
long time ago so your company has

00:19:17,039 --> 00:19:19,840
positioned

00:19:18,080 --> 00:19:21,520
your value proposition as being the

00:19:19,840 --> 00:19:24,799
fastest hosting

00:19:21,520 --> 00:19:28,080
reliable note the three nines here

00:19:24,799 --> 00:19:30,000
and also a big differentiator is one

00:19:28,080 --> 00:19:31,919
pound a year

00:19:30,000 --> 00:19:34,320
after speaking with stakeholders

00:19:31,919 --> 00:19:36,000
analyzing the data from customers

00:19:34,320 --> 00:19:38,000
you want to take some actions and avoid

00:19:36,000 --> 00:19:40,480
that product decline

00:19:38,000 --> 00:19:42,240
so you hold the workshop and start rank

00:19:40,480 --> 00:19:45,120
how pressing the improvement of

00:19:42,240 --> 00:19:47,200
these outcomes is for your customers

00:19:45,120 --> 00:19:48,400
reliability comes last as it seems like

00:19:47,200 --> 00:19:51,840
three nines is good

00:19:48,400 --> 00:19:55,520
in terms of service levels for them

00:19:51,840 --> 00:19:58,000
second and price is the most right

00:19:55,520 --> 00:19:59,600
most of the right here so identify as

00:19:58,000 --> 00:20:02,400
the most valuable aspect for your

00:19:59,600 --> 00:20:02,400
customers now

00:20:03,280 --> 00:20:08,080
so given that price was chosen your team

00:20:05,760 --> 00:20:09,440
has decided exploring how to reduce

00:20:08,080 --> 00:20:12,480
price by reducing

00:20:09,440 --> 00:20:14,720
operational expenditure

00:20:12,480 --> 00:20:15,760
so your team and relevant stakeholder

00:20:14,720 --> 00:20:18,480
stakeholders

00:20:15,760 --> 00:20:19,440
hold a workshop where you where somehow

00:20:18,480 --> 00:20:21,679
my we

00:20:19,440 --> 00:20:23,679
are proposed around reducing these

00:20:21,679 --> 00:20:26,480
operational costs

00:20:23,679 --> 00:20:28,159
how my we is an excellent tool to help

00:20:26,480 --> 00:20:29,600
phrase outcomes without including

00:20:28,159 --> 00:20:31,679
solutions

00:20:29,600 --> 00:20:33,679
so we take the proposed home i wish and

00:20:31,679 --> 00:20:36,480
we rank them according to perceived

00:20:33,679 --> 00:20:36,960
impact and effort by using one of the

00:20:36,480 --> 00:20:39,120
most

00:20:36,960 --> 00:20:40,799
well-known and probably my favorite

00:20:39,120 --> 00:20:44,000
prioritization framework the

00:20:40,799 --> 00:20:46,799
impart versus for matrix

00:20:44,000 --> 00:20:48,640
so you want to look in that upper right

00:20:46,799 --> 00:20:49,440
quadrant where the least effort makes

00:20:48,640 --> 00:20:52,080
the most

00:20:49,440 --> 00:20:53,679
impact in this scenario we can say that

00:20:52,080 --> 00:20:55,360
your thing thinks

00:20:53,679 --> 00:20:57,360
that releasing engineering time and

00:20:55,360 --> 00:21:00,480
avoiding vendor locking

00:20:57,360 --> 00:21:04,000
are in that sweet spot or at least of

00:21:00,480 --> 00:21:05,840
least four and more impact

00:21:04,000 --> 00:21:07,280
there are many way many ways and many

00:21:05,840 --> 00:21:08,960
other frameworks that to get to this

00:21:07,280 --> 00:21:10,960
prioritization

00:21:08,960 --> 00:21:13,440
but the important aspect is to get your

00:21:10,960 --> 00:21:15,200
team to narrow their focus

00:21:13,440 --> 00:21:17,840
giving them alignment in what you're

00:21:15,200 --> 00:21:17,840
trying to achieve

00:21:19,280 --> 00:21:24,480
right so now we move to the fun part and

00:21:21,360 --> 00:21:26,480
the engineers favorite solutions

00:21:24,480 --> 00:21:28,240
we want to do an ideation session to

00:21:26,480 --> 00:21:30,559
answer that question of how might we

00:21:28,240 --> 00:21:32,559
release some engineering time

00:21:30,559 --> 00:21:34,159
you allow your team to diverge and have

00:21:32,559 --> 00:21:36,799
some personal thinking

00:21:34,159 --> 00:21:38,559
to come up with potential solutions in

00:21:36,799 --> 00:21:40,080
this case your team has suggested

00:21:38,559 --> 00:21:42,799
different options like

00:21:40,080 --> 00:21:44,960
someone said oh why don't we do canary

00:21:42,799 --> 00:21:47,440
releases to reduce the risk of breaking

00:21:44,960 --> 00:21:50,000
up breaking up things upon release

00:21:47,440 --> 00:21:52,159
another person said let's build a

00:21:50,000 --> 00:21:55,280
kubernetes operator and automate these

00:21:52,159 --> 00:21:58,240
operations which take a lot of time

00:21:55,280 --> 00:22:00,240
furthermore let's re-platform x

00:21:58,240 --> 00:22:02,960
application to kubernetes and that way

00:22:00,240 --> 00:22:05,200
we leverage on the kubernetes automation

00:22:02,960 --> 00:22:07,919
instead of having to be on call to

00:22:05,200 --> 00:22:10,400
restart this app every time it crashes

00:22:07,919 --> 00:22:12,799
and finally someone said oh why don't we

00:22:10,400 --> 00:22:14,720
just create a tooling team

00:22:12,799 --> 00:22:17,120
so from all these solutions your team

00:22:14,720 --> 00:22:19,679
can start experimenting

00:22:17,120 --> 00:22:21,520
it does not mean that you go heads down

00:22:19,679 --> 00:22:24,320
for six months and build something

00:22:21,520 --> 00:22:24,960
i encourage you to take the lean

00:22:24,320 --> 00:22:27,440
approach

00:22:24,960 --> 00:22:29,440
a lean approach into it experiments that

00:22:27,440 --> 00:22:31,600
might give you leading indicators

00:22:29,440 --> 00:22:34,960
of whether the solution should work will

00:22:31,600 --> 00:22:37,760
work and just keep iterating on it

00:22:34,960 --> 00:22:39,280
um well that's all for practices i'll

00:22:37,760 --> 00:22:42,559
give it back to mac to check how we're

00:22:39,280 --> 00:22:44,000
doing our items and do the final section

00:22:42,559 --> 00:22:45,679
yeah so hopefully we've managed to

00:22:44,000 --> 00:22:46,240
achieve our goals of demonstrating how

00:22:45,679 --> 00:22:48,400
we believe

00:22:46,240 --> 00:22:49,440
kubernetes can help product managers and

00:22:48,400 --> 00:22:50,799
product teams

00:22:49,440 --> 00:22:52,640
no matter what stage of the product

00:22:50,799 --> 00:22:54,559
lifecycle they're working in

00:22:52,640 --> 00:22:56,799
and also where some useful product

00:22:54,559 --> 00:22:58,320
practices can help

00:22:56,799 --> 00:23:00,320
to finish off we want to quickly go

00:22:58,320 --> 00:23:03,200
through a getting involved section then

00:23:00,320 --> 00:23:03,200
filing a q a

00:23:03,679 --> 00:23:06,880
so we promise we talk about how product

00:23:05,440 --> 00:23:07,679
people can get more involved in the

00:23:06,880 --> 00:23:09,039
community

00:23:07,679 --> 00:23:11,520
but to be honest this is where we think

00:23:09,039 --> 00:23:13,039
we need your help there used to be a

00:23:11,520 --> 00:23:14,799
product management special interest

00:23:13,039 --> 00:23:16,320
group but that no longer exists

00:23:14,799 --> 00:23:18,960
and we're not really sure where product

00:23:16,320 --> 00:23:21,039
folks tend to hang out in this community

00:23:18,960 --> 00:23:22,000
but we'd love to find out we really do

00:23:21,039 --> 00:23:24,240
think that kubernetes

00:23:22,000 --> 00:23:25,919
is a transformative technology and this

00:23:24,240 --> 00:23:27,520
applies to product management equally as

00:23:25,919 --> 00:23:28,960
it does to software engineering

00:23:27,520 --> 00:23:31,120
and we think some awesome things could

00:23:28,960 --> 00:23:32,320
be done by bringing these worlds close

00:23:31,120 --> 00:23:33,919
together

00:23:32,320 --> 00:23:35,679
and so we'd love your feedback on this

00:23:33,919 --> 00:23:36,000
you can either hang around now and ask

00:23:35,679 --> 00:23:38,159
us some

00:23:36,000 --> 00:23:39,760
questions or alternatively if you'd like

00:23:38,159 --> 00:23:43,039
to give feedback on your own time

00:23:39,760 --> 00:23:43,760
if you head over to bitdolly but i'm a

00:23:43,039 --> 00:23:46,080
pm

00:23:43,760 --> 00:23:47,840
with hyphens you can leave your feedback

00:23:46,080 --> 00:23:49,840
there

00:23:47,840 --> 00:23:51,360
speaking from miguel and myself it's

00:23:49,840 --> 00:23:52,000
been a pleasure speaking with you all

00:23:51,360 --> 00:23:54,080
today

00:23:52,000 --> 00:23:56,080
i hope you found this somewhat useful

00:23:54,080 --> 00:24:01,039
and over to you all for any questions

00:23:56,080 --> 00:24:01,039

YouTube URL: https://www.youtube.com/watch?v=Jes-xq7ZEpo


