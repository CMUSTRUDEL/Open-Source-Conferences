Title: Progressive Delivery in Kubernetes - Carlos Sanchez, Adobe & Viktor Farcic, CloudBees
Publication date: 2020-08-28
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Progressive Delivery in Kubernetes - Carlos Sanchez, Adobe & Viktor Farcic, CloudBees 

Progressive Delivery makes it easier to adopt Continuous Delivery, by deploying new versions to a subset of users and evaluating their correctness and performance before rolling them to the totality of the users, and rolled back if not matching some key metrics. Canary deployments is one of the techniques in Progressive Delivery, used in companies like Facebook to roll out new versions gradually. But good news! you don't need to be Facebook to take advantage of it.  We will demo how to create a fully automated Progressive Delivery pipeline with Canary deployments and rollbacks in Kubernetes using Jenkins X, an open source platform for cloud native CI/CD in Kubernetes, and Flagger, a project that uses Prometheus and your service mesh of choice to automate Canary rollouts and rollbacks.

https://sched.co/ZesH
Captions: 
	00:00:00,080 --> 00:00:05,920
hello and welcome to this talk about

00:00:03,120 --> 00:00:06,720
progressive delivery in kubernetes my

00:00:05,920 --> 00:00:09,839
name is

00:00:06,720 --> 00:00:09,839
carlos sanchez

00:00:10,160 --> 00:00:17,440
and i'm victor farzig so

00:00:13,920 --> 00:00:22,000
i am a cloud engineer at adobe i

00:00:17,440 --> 00:00:24,000
wrote some open source a lot of it

00:00:22,000 --> 00:00:25,840
like the yankee supernet is plugging and

00:00:24,000 --> 00:00:27,039
i've been a long time open source

00:00:25,840 --> 00:00:30,880
contributor

00:00:27,039 --> 00:00:34,000
at apache maven eclipse foundation

00:00:30,880 --> 00:00:38,239
puppet and other things and

00:00:34,000 --> 00:00:40,800
victor victor

00:00:38,239 --> 00:00:41,760
works in cloud base and as a product

00:00:40,800 --> 00:00:44,160
manager

00:00:41,760 --> 00:00:46,239
and then he published some books and

00:00:44,160 --> 00:00:47,680
courses and he's a google developer

00:00:46,239 --> 00:00:51,520
expert

00:00:47,680 --> 00:00:54,160
all the good stuff a lot of open source

00:00:51,520 --> 00:00:56,840
a lot of public work and we're here

00:00:54,160 --> 00:00:58,079
today to talk to you about progressive

00:00:56,840 --> 00:01:00,559
delivery

00:00:58,079 --> 00:01:02,000
when have you heard what have you heard

00:01:00,559 --> 00:01:04,800
the first time about progressive

00:01:02,000 --> 00:01:04,800
delivery victor

00:01:05,199 --> 00:01:11,040
i heard the first time from you

00:01:08,640 --> 00:01:12,000
well i heard the first time from lunch

00:01:11,040 --> 00:01:14,560
starkly

00:01:12,000 --> 00:01:16,640
they wrote this vlog about the history

00:01:14,560 --> 00:01:20,159
of progressive delivery

00:01:16,640 --> 00:01:23,680
so that was the first time and then

00:01:20,159 --> 00:01:26,560
james governor from redmonk

00:01:23,680 --> 00:01:26,960
known chips in twitter he was pushing it

00:01:26,560 --> 00:01:30,479
and

00:01:26,960 --> 00:01:33,680
i said well i love this term it takes

00:01:30,479 --> 00:01:36,880
it defines very clearly

00:01:33,680 --> 00:01:40,320
what we're trying to do so let's

00:01:36,880 --> 00:01:42,399
steal it right

00:01:40,320 --> 00:01:44,159
exactly we're not going to invent out

00:01:42,399 --> 00:01:47,040
anything new right right

00:01:44,159 --> 00:01:48,159
so what is progressive delivery is it's

00:01:47,040 --> 00:01:50,640
just a new term

00:01:48,159 --> 00:01:52,840
to coin a bunch of different things that

00:01:50,640 --> 00:01:56,079
have been around for a while

00:01:52,840 --> 00:01:59,040
so it's groups together

00:01:56,079 --> 00:02:00,159
all these diplomatic strategies that try

00:01:59,040 --> 00:02:03,759
to avoid the

00:02:00,159 --> 00:02:06,719
all or nothing deployments

00:02:03,759 --> 00:02:08,879
where you know you replace something and

00:02:06,719 --> 00:02:10,560
if it's broken it breaks all your

00:02:08,879 --> 00:02:12,480
customers

00:02:10,560 --> 00:02:14,239
so we are trying to avoid that and

00:02:12,480 --> 00:02:17,760
that's all these techniques

00:02:14,239 --> 00:02:22,239
fall into the progressive delivery

00:02:17,760 --> 00:02:26,080
password i say

00:02:22,239 --> 00:02:28,239
so when you deploy a new version

00:02:26,080 --> 00:02:29,760
you are not replacing existing versions

00:02:28,239 --> 00:02:32,480
then but you just

00:02:29,760 --> 00:02:33,920
deploy things that are running in

00:02:32,480 --> 00:02:35,280
parallel with the

00:02:33,920 --> 00:02:38,000
previous versions that you have to

00:02:35,280 --> 00:02:40,000
deploy and then you can decide

00:02:38,000 --> 00:02:41,519
whether you want to send live traffic

00:02:40,000 --> 00:02:43,200
this is important this is all in

00:02:41,519 --> 00:02:45,760
production happening

00:02:43,200 --> 00:02:47,040
and so you can send live traffic to the

00:02:45,760 --> 00:02:50,319
old version

00:02:47,040 --> 00:02:53,440
or to the new version based on

00:02:50,319 --> 00:02:54,480
whatever parameters you decide and then

00:02:53,440 --> 00:02:57,040
you evaluate

00:02:54,480 --> 00:02:58,400
whether this new version is behaving

00:02:57,040 --> 00:03:01,200
correctly

00:02:58,400 --> 00:03:02,879
and if it's so then you can send more

00:03:01,200 --> 00:03:05,200
traffic to the new version

00:03:02,879 --> 00:03:08,640
but if for whatever reason the new

00:03:05,200 --> 00:03:11,519
version doesn't behave as you expected

00:03:08,640 --> 00:03:12,720
then you can start rolling back to the

00:03:11,519 --> 00:03:16,800
old version and this

00:03:12,720 --> 00:03:19,360
is very immediate or fast and

00:03:16,800 --> 00:03:22,080
just a percentage of your users could

00:03:19,360 --> 00:03:22,080
get affected

00:03:23,360 --> 00:03:26,720
so the main advantage really of

00:03:25,200 --> 00:03:28,720
continuous

00:03:26,720 --> 00:03:30,879
progressive delivery or running in

00:03:28,720 --> 00:03:33,920
parallel it is really about

00:03:30,879 --> 00:03:36,319
avoiding downtime because if you do not

00:03:33,920 --> 00:03:38,560
run two releases in parallel it is

00:03:36,319 --> 00:03:40,400
physically impossible

00:03:38,560 --> 00:03:42,720
to be able to deploy a new release

00:03:40,400 --> 00:03:44,159
without downtime so running in parallel

00:03:42,720 --> 00:03:47,680
is a prerequisite for

00:03:44,159 --> 00:03:48,400
any item to do no downtime or zero

00:03:47,680 --> 00:03:50,720
downtime

00:03:48,400 --> 00:03:52,159
deployments and then on top of that we

00:03:50,720 --> 00:03:52,879
have all the benefits that carlos just

00:03:52,159 --> 00:03:54,799
mentioned

00:03:52,879 --> 00:03:57,040
that we can decide how much traffic goes

00:03:54,799 --> 00:04:00,799
to one release how much to another and

00:03:57,040 --> 00:04:03,200
increase the reliability and

00:04:00,799 --> 00:04:05,599
confidence we have in in rolling out

00:04:03,200 --> 00:04:05,599
something

00:04:06,080 --> 00:04:11,920
so it's all about avoiding downtime

00:04:09,280 --> 00:04:12,879
and limiting the blast radius so

00:04:11,920 --> 00:04:16,560
something goes wrong

00:04:12,879 --> 00:04:20,720
just some people notice what

00:04:16,560 --> 00:04:24,560
the issue and also allows you to have a

00:04:20,720 --> 00:04:27,840
faster like idea to production type of

00:04:24,560 --> 00:04:29,520
workflows where you are more confident

00:04:27,840 --> 00:04:32,720
that things are gonna

00:04:29,520 --> 00:04:35,440
are not gonna cause a big issue

00:04:32,720 --> 00:04:35,440
in production

00:04:37,600 --> 00:04:43,840
so there's a number of techniques that

00:04:40,720 --> 00:04:47,600
you may heard of this is nothing new

00:04:43,840 --> 00:04:48,560
so we have like things like rolling

00:04:47,600 --> 00:04:51,199
updates so

00:04:48,560 --> 00:04:52,000
this is something that you could have

00:04:51,199 --> 00:04:54,240
done with

00:04:52,000 --> 00:04:55,919
virtual machines you can do it very

00:04:54,240 --> 00:04:57,280
easily in kubernetes with containers

00:04:55,919 --> 00:05:00,560
with pods

00:04:57,280 --> 00:05:03,600
and basically it's just you have

00:05:00,560 --> 00:05:04,160
10 contain pots running and then you

00:05:03,600 --> 00:05:06,960
upgrade

00:05:04,160 --> 00:05:08,960
one to any version and instead of

00:05:06,960 --> 00:05:12,080
operating all the thing at once

00:05:08,960 --> 00:05:15,840
you operate one check that that one is

00:05:12,080 --> 00:05:18,479
successful or to have some maybe metrics

00:05:15,840 --> 00:05:20,000
then you operate two three four five and

00:05:18,479 --> 00:05:23,680
so on until you operate

00:05:20,000 --> 00:05:24,639
all of them so you don't have a lot of

00:05:23,680 --> 00:05:27,120
control

00:05:24,639 --> 00:05:30,639
but at least you are not affecting all

00:05:27,120 --> 00:05:30,639
the users at the same time

00:05:33,280 --> 00:05:36,400
so rolling updates is not that much

00:05:35,680 --> 00:05:39,039
about

00:05:36,400 --> 00:05:40,560
control it's more about avoiding

00:05:39,039 --> 00:05:42,800
downtime

00:05:40,560 --> 00:05:44,240
by replacing one release at the one

00:05:42,800 --> 00:05:47,360
replica at a time

00:05:44,240 --> 00:05:49,919
there is always a replica running

00:05:47,360 --> 00:05:50,560
bit of the bold or a new release or both

00:05:49,919 --> 00:05:52,479
so it's not

00:05:50,560 --> 00:05:53,919
that much about having control you don't

00:05:52,479 --> 00:05:57,360
really control

00:05:53,919 --> 00:05:59,199
who gets to see what and uh you cannot

00:05:57,360 --> 00:05:59,520
even control much whether you roll back

00:05:59,199 --> 00:06:02,479
or

00:05:59,520 --> 00:06:03,440
roll forward it's more about reducing

00:06:02,479 --> 00:06:07,039
downtime than

00:06:03,440 --> 00:06:09,199
than anything else yeah

00:06:07,039 --> 00:06:11,919
and as i said this is very easy to do in

00:06:09,199 --> 00:06:14,720
kubernetes

00:06:11,919 --> 00:06:16,080
then we have it's a default deployment

00:06:14,720 --> 00:06:18,240
it's a default deployment

00:06:16,080 --> 00:06:20,160
mechanism in kubernetes in other words

00:06:18,240 --> 00:06:21,919
if you if you use kubernetes deployment

00:06:20,160 --> 00:06:23,759
or stateful set you are getting rolling

00:06:21,919 --> 00:06:26,000
updates no matter what you

00:06:23,759 --> 00:06:26,800
what you do unless you explicitly change

00:06:26,000 --> 00:06:30,479
the

00:06:26,800 --> 00:06:30,479
deployment strategy to something else

00:06:31,440 --> 00:06:38,080
and then we have longer in deployment

00:06:34,880 --> 00:06:40,560
this is something that i think came

00:06:38,080 --> 00:06:41,360
from martin folner i mean he was the

00:06:40,560 --> 00:06:44,560
first one

00:06:41,360 --> 00:06:48,080
kind of going through the definition

00:06:44,560 --> 00:06:51,199
where you have two different

00:06:48,080 --> 00:06:51,199
sets of

00:06:51,520 --> 00:06:56,880
what clusters or machines

00:06:54,880 --> 00:06:58,720
one set with the old version one set

00:06:56,880 --> 00:07:01,120
with the new version

00:06:58,720 --> 00:07:03,039
and then you have some router load

00:07:01,120 --> 00:07:05,360
balancer in front

00:07:03,039 --> 00:07:06,240
and when you want to deploy to the new

00:07:05,360 --> 00:07:08,720
version you just

00:07:06,240 --> 00:07:10,479
flip the switch on the load balancer and

00:07:08,720 --> 00:07:11,840
say all the traffic goes to the new

00:07:10,479 --> 00:07:13,919
version

00:07:11,840 --> 00:07:16,639
the main issue with blue green

00:07:13,919 --> 00:07:19,280
deployments is that it somehow assumes

00:07:16,639 --> 00:07:20,560
that the best way to roll back or to

00:07:19,280 --> 00:07:23,280
roll forward

00:07:20,560 --> 00:07:25,360
is by having everything duplicated it

00:07:23,280 --> 00:07:26,960
assumes in a way and simply because it

00:07:25,360 --> 00:07:30,080
was created long time ago

00:07:26,960 --> 00:07:30,960
it assumes that uh rolling backward back

00:07:30,080 --> 00:07:33,440
for example

00:07:30,960 --> 00:07:35,520
would require creating of new virtual

00:07:33,440 --> 00:07:38,639
machines would require a lot of man

00:07:35,520 --> 00:07:39,680
many many different steps uh so in order

00:07:38,639 --> 00:07:42,080
to avoid

00:07:39,680 --> 00:07:43,680
the downtime uh no matter whether we're

00:07:42,080 --> 00:07:46,160
going forward or backwards

00:07:43,680 --> 00:07:47,840
everything is to run in parallel but now

00:07:46,160 --> 00:07:49,680
assuming that we are using kubernetes

00:07:47,840 --> 00:07:52,800
for most of our workloads

00:07:49,680 --> 00:07:55,840
then the difficulty of

00:07:52,800 --> 00:07:58,720
going forward or going back is is

00:07:55,840 --> 00:07:59,199
basically non-existent so the whole idea

00:07:58,720 --> 00:08:01,440
about

00:07:59,199 --> 00:08:03,120
running everything twice in parallel

00:08:01,440 --> 00:08:06,560
forever and ever

00:08:03,120 --> 00:08:10,000
is kind of uh based

00:08:06,560 --> 00:08:11,759
that could be probably avoided so it is

00:08:10,000 --> 00:08:14,879
much better suited in

00:08:11,759 --> 00:08:15,680
in environments where deployment takes

00:08:14,879 --> 00:08:17,840
time

00:08:15,680 --> 00:08:19,919
and scheduling takes time and what's or

00:08:17,840 --> 00:08:22,160
not

00:08:19,919 --> 00:08:24,000
and then we have canary deployments

00:08:22,160 --> 00:08:26,720
which is like

00:08:24,000 --> 00:08:27,919
probably the best way of doing things

00:08:26,720 --> 00:08:31,840
today

00:08:27,919 --> 00:08:34,240
where you have a sort of life

00:08:31,840 --> 00:08:35,839
same thing of with blue green deployment

00:08:34,240 --> 00:08:38,240
where you have

00:08:35,839 --> 00:08:39,360
two versions running at the same time

00:08:38,240 --> 00:08:42,479
it's just that

00:08:39,360 --> 00:08:46,399
you don't need to have a whole

00:08:42,479 --> 00:08:50,560
copy and you start you are able to

00:08:46,399 --> 00:08:53,040
start sending users to the new version

00:08:50,560 --> 00:08:55,040
and you can start sending like a few

00:08:53,040 --> 00:08:58,480
percentage at a time

00:08:55,040 --> 00:09:01,839
and based on different metrics

00:08:58,480 --> 00:09:05,360
so you could say typically what

00:09:01,839 --> 00:09:08,560
companies do is okay first

00:09:05,360 --> 00:09:09,600
only employees access the new version so

00:09:08,560 --> 00:09:11,680
if there's anything

00:09:09,600 --> 00:09:13,360
wrong with the new version employee is

00:09:11,680 --> 00:09:16,800
detected before

00:09:13,360 --> 00:09:20,240
it reaches to external users

00:09:16,800 --> 00:09:23,360
and then you could start saying 10

00:09:20,240 --> 00:09:26,560
or 5 and then 10 and then 15

00:09:23,360 --> 00:09:28,240
20 30 40 of users

00:09:26,560 --> 00:09:29,760
are going to the new version while the

00:09:28,240 --> 00:09:30,800
other ones are stuck with the old

00:09:29,760 --> 00:09:33,760
version

00:09:30,800 --> 00:09:34,480
then you keep rolling the percentage of

00:09:33,760 --> 00:09:38,320
users

00:09:34,480 --> 00:09:40,959
that are going to the new version

00:09:38,320 --> 00:09:42,399
and another the other percentage goes to

00:09:40,959 --> 00:09:45,600
the l version

00:09:42,399 --> 00:09:46,000
and you can stop this roll out at any

00:09:45,600 --> 00:09:47,839
time

00:09:46,000 --> 00:09:51,839
and start and switch it and send

00:09:47,839 --> 00:09:51,839
everybody to the back to the old version

00:09:53,120 --> 00:09:56,560
so the main difference i would say

00:09:55,279 --> 00:09:58,480
between

00:09:56,560 --> 00:10:00,000
rolling updates and country deployments

00:09:58,480 --> 00:10:02,000
is that withdrawing updates you're

00:10:00,000 --> 00:10:02,720
you're using very simple health checks

00:10:02,000 --> 00:10:04,800
normally to

00:10:02,720 --> 00:10:07,200
decide whether to go forward or to go

00:10:04,800 --> 00:10:08,240
back without really control who sees

00:10:07,200 --> 00:10:10,640
what and how

00:10:08,240 --> 00:10:11,440
well with canaries you would basically

00:10:10,640 --> 00:10:15,040
use

00:10:11,440 --> 00:10:17,200
um heavily rely on metrics to decide

00:10:15,040 --> 00:10:19,040
whether whether something is successful

00:10:17,200 --> 00:10:21,839
and if it is successful

00:10:19,040 --> 00:10:23,680
whether to move it forward another 10 20

00:10:21,839 --> 00:10:25,760
or whatever the percentage is

00:10:23,680 --> 00:10:27,760
uh so it is you can say even that

00:10:25,760 --> 00:10:28,800
country deployments is a form of testing

00:10:27,760 --> 00:10:31,360
where you are

00:10:28,800 --> 00:10:33,279
uh you create you deploy a new release

00:10:31,360 --> 00:10:34,000
you allow certain percentage or certain

00:10:33,279 --> 00:10:36,480
region or

00:10:34,000 --> 00:10:37,519
certain users to see it your test test

00:10:36,480 --> 00:10:40,800
test

00:10:37,519 --> 00:10:42,240
and uh and by by testing i mean evaluate

00:10:40,800 --> 00:10:44,320
metrics of our

00:10:42,240 --> 00:10:46,000
query metrics evaluate the results and

00:10:44,320 --> 00:10:48,240
then decide to go for

00:10:46,000 --> 00:10:49,760
forward or backwards so it is in a way

00:10:48,240 --> 00:10:51,600
similar to what will

00:10:49,760 --> 00:10:52,959
what we would do when deploying to

00:10:51,600 --> 00:10:54,320
integration environment staging

00:10:52,959 --> 00:10:56,240
environment production

00:10:54,320 --> 00:10:57,440
except that this is all happening in

00:10:56,240 --> 00:11:01,120
production

00:10:57,440 --> 00:11:02,800
and uh the use cases or test cases are

00:11:01,120 --> 00:11:06,959
based on input from the real

00:11:02,800 --> 00:11:12,240
from real users rather than imaginary

00:11:06,959 --> 00:11:15,040
uh test cases and the last

00:11:12,240 --> 00:11:16,959
way of doing things is and that you can

00:11:15,040 --> 00:11:18,720
combine this is interesting part about

00:11:16,959 --> 00:11:21,360
feature flaps that you can combine them

00:11:18,720 --> 00:11:24,720
with any of the other ones

00:11:21,360 --> 00:11:27,920
and feature flags and canary deployments

00:11:24,720 --> 00:11:28,160
make a pretty good combination so there

00:11:27,920 --> 00:11:31,519
are

00:11:28,160 --> 00:11:34,399
like future flashlight toggles so switch

00:11:31,519 --> 00:11:36,800
that you can turn on and off anytime

00:11:34,399 --> 00:11:38,800
when at your application runtime that's

00:11:36,800 --> 00:11:41,920
that's the interesting part

00:11:38,800 --> 00:11:44,399
so you can deliver new features that are

00:11:41,920 --> 00:11:47,200
off by default

00:11:44,399 --> 00:11:48,880
to production and then you can enable

00:11:47,200 --> 00:11:52,160
them or disable them

00:11:48,880 --> 00:11:56,320
if there is any issue with it right so

00:11:52,160 --> 00:11:59,519
you build a new nice i don't know

00:11:56,320 --> 00:12:01,760
like ui and then you can

00:11:59,519 --> 00:12:02,800
flip the switch and start showing that

00:12:01,760 --> 00:12:07,440
new ui to

00:12:02,800 --> 00:12:09,600
specific subset of users and

00:12:07,440 --> 00:12:10,480
if something is wrong you just switch

00:12:09,600 --> 00:12:12,800
the

00:12:10,480 --> 00:12:13,839
flip the switch again and go to the old

00:12:12,800 --> 00:12:17,040
version

00:12:13,839 --> 00:12:19,360
so it's very nice because you don't

00:12:17,040 --> 00:12:20,480
even we were talking about rolling

00:12:19,360 --> 00:12:23,680
deployments

00:12:20,480 --> 00:12:25,200
and rolling applications and so on

00:12:23,680 --> 00:12:26,720
with feature flash you don't even have

00:12:25,200 --> 00:12:28,399
to compile anything again

00:12:26,720 --> 00:12:31,440
or deploy anything again it's all

00:12:28,399 --> 00:12:31,440
happening in production

00:12:33,360 --> 00:12:36,399
you still need to run multiple replicas

00:12:35,360 --> 00:12:38,560
of your application

00:12:36,399 --> 00:12:39,680
do some form of let's say maybe rolling

00:12:38,560 --> 00:12:42,800
updates

00:12:39,680 --> 00:12:46,720
uh to prevent downtime

00:12:42,800 --> 00:12:50,480
but you do not necessarily need to uh

00:12:46,720 --> 00:12:52,000
to measure uh to actually decide who

00:12:50,480 --> 00:12:54,399
sees which release

00:12:52,000 --> 00:12:55,839
depending on where you're holding

00:12:54,399 --> 00:12:58,000
forwarding traffic but

00:12:55,839 --> 00:13:00,320
rather by enabling and disabling

00:12:58,000 --> 00:13:02,240
features in that new release

00:13:00,320 --> 00:13:04,560
so it's usually a combination of running

00:13:02,240 --> 00:13:06,399
multiple replicas in some form of

00:13:04,560 --> 00:13:08,720
rolling updates calorie deployments also

00:13:06,399 --> 00:13:12,240
not combined with the

00:13:08,720 --> 00:13:14,000
fine grained ability to enable or

00:13:12,240 --> 00:13:15,680
disable specific features

00:13:14,000 --> 00:13:18,320
while canary deployments are allowing

00:13:15,680 --> 00:13:21,040
you to enable or disable

00:13:18,320 --> 00:13:24,320
visibility or specific release this is

00:13:21,040 --> 00:13:24,320
rather on the future level

00:13:24,399 --> 00:13:28,880
yeah and i think we we heard this before

00:13:28,240 --> 00:13:32,160
right

00:13:28,880 --> 00:13:35,600
monitoring is the new testing in the

00:13:32,160 --> 00:13:38,240
sense that if you have good monitoring

00:13:35,600 --> 00:13:41,040
you can know when users are experiencing

00:13:38,240 --> 00:13:42,720
issues in production and not only that

00:13:41,040 --> 00:13:44,160
but you could react to the issues

00:13:42,720 --> 00:13:47,680
automatically you can

00:13:44,160 --> 00:13:50,000
rely on metrics to decide

00:13:47,680 --> 00:13:51,040
whether you want to continue a canary

00:13:50,000 --> 00:13:53,440
rollout

00:13:51,040 --> 00:13:54,720
whether you want to disable a feature

00:13:53,440 --> 00:13:58,240
flag because

00:13:54,720 --> 00:13:59,519
uh is broken and you can do very cool

00:13:58,240 --> 00:14:02,639
things

00:13:59,519 --> 00:14:05,199
unlike a devops board i uh

00:14:02,639 --> 00:14:07,040
you used to say to make error is human

00:14:05,199 --> 00:14:08,320
to propagate that or tool server in

00:14:07,040 --> 00:14:11,440
automatic way

00:14:08,320 --> 00:14:13,440
that is what devops is and this is the

00:14:11,440 --> 00:14:17,839
first time we mentioned devops in the

00:14:13,440 --> 00:14:17,839
whole talk so that this must be a record

00:14:18,560 --> 00:14:22,560
i bet no other talks managed to get this

00:14:20,560 --> 00:14:26,800
far without measuring those

00:14:22,560 --> 00:14:28,720
and something i experienced

00:14:26,800 --> 00:14:30,399
and i learned from that is like if you

00:14:28,720 --> 00:14:33,040
have an automatically

00:14:30,399 --> 00:14:34,480
destroy something by mistake that means

00:14:33,040 --> 00:14:37,760
that you are not automating

00:14:34,480 --> 00:14:39,920
enough oh yeah actually if you want to

00:14:37,760 --> 00:14:41,360
be secure the best way to do is to do

00:14:39,920 --> 00:14:43,199
nothing

00:14:41,360 --> 00:14:44,959
and then the second best level is not to

00:14:43,199 --> 00:14:48,079
do anything automatically and then you

00:14:44,959 --> 00:14:48,079
get to automation

00:14:48,480 --> 00:14:54,720
so let's go on to an example

00:14:51,760 --> 00:14:57,360
on how you can you practically do

00:14:54,720 --> 00:14:59,680
progressive delivery on kubernetes

00:14:57,360 --> 00:15:00,800
specifically canary deployments let's

00:14:59,680 --> 00:15:04,079
talk about

00:15:00,800 --> 00:15:07,199
istio if you haven't heard about istio

00:15:04,079 --> 00:15:08,480
it's a service mesh you probably heard

00:15:07,199 --> 00:15:12,000
about

00:15:08,480 --> 00:15:15,199
five different of them istio is one

00:15:12,000 --> 00:15:20,320
and isti allows us to do

00:15:15,199 --> 00:15:22,959
very interesting things with um

00:15:20,320 --> 00:15:24,240
with your services in kubernetes so

00:15:22,959 --> 00:15:28,399
istio

00:15:24,240 --> 00:15:29,360
connects services allows to secure those

00:15:28,399 --> 00:15:32,560
connections

00:15:29,360 --> 00:15:37,199
doing like automatic encryption

00:15:32,560 --> 00:15:40,160
and also control the flow

00:15:37,199 --> 00:15:41,680
so deciding what traffic goes to what

00:15:40,160 --> 00:15:45,680
service

00:15:41,680 --> 00:15:48,560
and providing us observability metrics

00:15:45,680 --> 00:15:49,759
on these services and the interesting

00:15:48,560 --> 00:15:52,079
part is that you don't have to do

00:15:49,759 --> 00:15:54,720
anything to your application you all get

00:15:52,079 --> 00:15:55,120
you get all these things for free when

00:15:54,720 --> 00:15:58,639
you

00:15:55,120 --> 00:16:01,759
run a service mesh like istio

00:15:58,639 --> 00:16:04,240
similar with other ones but this example

00:16:01,759 --> 00:16:07,600
just uses istio

00:16:04,240 --> 00:16:09,680
and another interesting project the

00:16:07,600 --> 00:16:10,880
most interesting project on the sense of

00:16:09,680 --> 00:16:14,480
canary deployments

00:16:10,880 --> 00:16:16,639
is flagger it's a open source project

00:16:14,480 --> 00:16:18,959
that automates the promotion of of

00:16:16,639 --> 00:16:22,480
canary deployments

00:16:18,959 --> 00:16:27,040
using istio and prometheus metrics

00:16:22,480 --> 00:16:30,160
so when you deploy a new

00:16:27,040 --> 00:16:30,639
deployment of kubernetes flagger is

00:16:30,160 --> 00:16:34,240
there

00:16:30,639 --> 00:16:36,160
listening to events and

00:16:34,240 --> 00:16:37,440
sees the new deployment if you have an

00:16:36,160 --> 00:16:41,839
evolved flag around it

00:16:37,440 --> 00:16:43,920
on it copies that the plane will offer

00:16:41,839 --> 00:16:44,880
so it keeps two versions of this

00:16:43,920 --> 00:16:48,320
deployment

00:16:44,880 --> 00:16:51,360
the previous version and the new version

00:16:48,320 --> 00:16:54,160
and it uses istio control

00:16:51,360 --> 00:16:55,440
to start sending traffic instead of

00:16:54,160 --> 00:16:56,639
sending all the traffic to the new

00:16:55,440 --> 00:17:00,000
version

00:16:56,639 --> 00:17:03,360
gradually rolling out

00:17:00,000 --> 00:17:06,400
from to the new version

00:17:03,360 --> 00:17:07,199
and you can customize whether you are

00:17:06,400 --> 00:17:09,679
sending

00:17:07,199 --> 00:17:11,120
you know five percent ten percent

00:17:09,679 --> 00:17:15,039
fifteen percent

00:17:11,120 --> 00:17:17,679
on whatever number you want to set

00:17:15,039 --> 00:17:19,360
this new traffic goes to the new version

00:17:17,679 --> 00:17:23,280
and the metrics from mr

00:17:19,360 --> 00:17:25,839
ending in prometheus and flagger

00:17:23,280 --> 00:17:26,799
looks at those metrics and says you know

00:17:25,839 --> 00:17:30,160
this metric

00:17:26,799 --> 00:17:30,880
is okay or is not okay so based on those

00:17:30,160 --> 00:17:35,520
metrics

00:17:30,880 --> 00:17:39,280
it does continue their rollout

00:17:35,520 --> 00:17:41,039
or otherwise doesn't roll back

00:17:39,280 --> 00:17:46,080
and start sending all the traffic to the

00:17:41,039 --> 00:17:50,559
previous version

00:17:46,080 --> 00:17:53,760
so it does this by

00:17:50,559 --> 00:17:57,120
creating virtual services in hto

00:17:53,760 --> 00:18:00,559
primary and canary services

00:17:57,120 --> 00:18:04,160
and deployments of your application

00:18:00,559 --> 00:18:07,679
and continuously looking at

00:18:04,160 --> 00:18:08,960
istio virtual service metrics and

00:18:07,679 --> 00:18:12,240
prometheus

00:18:08,960 --> 00:18:15,520
and you can even get messages in slack

00:18:12,240 --> 00:18:16,320
when when these rolls are rollouts are

00:18:15,520 --> 00:18:18,559
happening

00:18:16,320 --> 00:18:21,440
because i mean who doesn't need more

00:18:18,559 --> 00:18:21,440
slack messages

00:18:25,360 --> 00:18:30,799
you also get graffana a girlfriend

00:18:28,000 --> 00:18:33,919
dashboard where you can see side by side

00:18:30,799 --> 00:18:37,120
old version a new version so

00:18:33,919 --> 00:18:41,679
again all sorts of things like

00:18:37,120 --> 00:18:44,799
response errors response times

00:18:41,679 --> 00:18:47,600
and you can see both all version and the

00:18:44,799 --> 00:18:47,600
new version

00:18:48,160 --> 00:18:54,559
and it's really cool it's a really cool

00:18:50,559 --> 00:18:54,559
project you should totally check it out

00:18:55,200 --> 00:18:59,280
yeah one additional note is that uh you

00:18:58,320 --> 00:19:02,880
were hearing about

00:18:59,280 --> 00:19:04,320
uh flagger in combination with istio

00:19:02,880 --> 00:19:06,080
but if that's not your flavor that's

00:19:04,320 --> 00:19:07,039
okay because flaggers support basically

00:19:06,080 --> 00:19:09,200
almost any service

00:19:07,039 --> 00:19:10,400
this is a serious mesh available on top

00:19:09,200 --> 00:19:12,480
of that it supports

00:19:10,400 --> 00:19:15,039
uh even without service mesh it can work

00:19:12,480 --> 00:19:17,520
with engineer singers and a few others

00:19:15,039 --> 00:19:18,080
so think of eastern this context is

00:19:17,520 --> 00:19:21,679
example

00:19:18,080 --> 00:19:21,679
not necessarily the requirement for

00:19:22,840 --> 00:19:28,880
flagger

00:19:24,799 --> 00:19:32,559
and now let's go on to the demo

00:19:28,880 --> 00:19:34,480
yeah demo time let's take a look at

00:19:32,559 --> 00:19:36,559
flagger definition first

00:19:34,480 --> 00:19:38,559
it is kind connery that that's not

00:19:36,559 --> 00:19:40,640
really anything special what matters is

00:19:38,559 --> 00:19:42,320
is that we are setting provided to istio

00:19:40,640 --> 00:19:44,000
in this specific case

00:19:42,320 --> 00:19:46,320
we are specifying that the target

00:19:44,000 --> 00:19:48,320
reference the application

00:19:46,320 --> 00:19:49,919
is running as a deployment and it is

00:19:48,320 --> 00:19:51,600
called go demo seven

00:19:49,919 --> 00:19:53,760
flagger will be monitoring metrics

00:19:51,600 --> 00:19:56,400
impromitus and depending on the

00:19:53,760 --> 00:19:57,520
outcome of those metrics decide to move

00:19:56,400 --> 00:20:00,400
forward or

00:19:57,520 --> 00:20:02,400
roll back we have an application it's a

00:20:00,400 --> 00:20:04,640
kubernetes deployment we have flagger

00:20:02,400 --> 00:20:06,880
and we have istio gateway everything

00:20:04,640 --> 00:20:09,200
else required for that application like

00:20:06,880 --> 00:20:10,880
uh destination rules and virtual

00:20:09,200 --> 00:20:13,679
services and whatsoever

00:20:10,880 --> 00:20:14,640
all that will be created by flugger out

00:20:13,679 --> 00:20:17,600
of the box

00:20:14,640 --> 00:20:18,080
the moment we uh deploy the first

00:20:17,600 --> 00:20:19,520
release

00:20:18,080 --> 00:20:21,200
actually we already deployed the first

00:20:19,520 --> 00:20:22,400
release so we're going to see how the

00:20:21,200 --> 00:20:24,240
second release

00:20:22,400 --> 00:20:26,320
comes along because that's the more more

00:20:24,240 --> 00:20:28,000
interesting part so let's take a look at

00:20:26,320 --> 00:20:29,600
the deployments now this is important

00:20:28,000 --> 00:20:31,600
because here we can see that we have a

00:20:29,600 --> 00:20:33,760
database that one is not imported but we

00:20:31,600 --> 00:20:36,799
have got demo seven and go demo 7

00:20:33,760 --> 00:20:37,120
primary now go demo 7 is the deployment

00:20:36,799 --> 00:20:40,159
that

00:20:37,120 --> 00:20:43,039
we deployed the other one the primary

00:20:40,159 --> 00:20:43,919
is created by flagger and that is

00:20:43,039 --> 00:20:46,240
actually

00:20:43,919 --> 00:20:48,159
the release that flagger will consider

00:20:46,240 --> 00:20:51,440
the production release

00:20:48,159 --> 00:20:54,880
while whatever we deploy ourselves

00:20:51,440 --> 00:20:58,559
will be uh copied by flagger and

00:20:54,880 --> 00:21:00,159
converted into next production release

00:20:58,559 --> 00:21:03,039
when the time comes even if all the

00:21:00,159 --> 00:21:04,799
conditions are fulfilled

00:21:03,039 --> 00:21:06,880
another thing important here that we can

00:21:04,799 --> 00:21:09,039
see that we have hpa horizontal pod

00:21:06,880 --> 00:21:11,600
autoscaler

00:21:09,039 --> 00:21:13,280
and here we have services that are

00:21:11,600 --> 00:21:14,880
already that were already created by

00:21:13,280 --> 00:21:17,200
flagger right

00:21:14,880 --> 00:21:19,039
all those here except the database were

00:21:17,200 --> 00:21:22,400
created by flagger managed by flagger we

00:21:19,039 --> 00:21:25,120
don't need to do much over there

00:21:22,400 --> 00:21:25,919
and the most important one is canary

00:21:25,120 --> 00:21:27,760
resource

00:21:25,919 --> 00:21:28,960
which there is only one right now and it

00:21:27,760 --> 00:21:30,799
is initialized

00:21:28,960 --> 00:21:33,440
i mean that's the beauty of flyer right

00:21:30,799 --> 00:21:36,480
you all you focus on your application

00:21:33,440 --> 00:21:39,440
and then it will from the crd

00:21:36,480 --> 00:21:40,400
the canary crd it will create all these

00:21:39,440 --> 00:21:43,520
things

00:21:40,400 --> 00:21:46,480
for you magically

00:21:43,520 --> 00:21:47,679
so what we're going to do next is deploy

00:21:46,480 --> 00:21:49,919
release o2

00:21:47,679 --> 00:21:50,720
and i will show you here the yaml this

00:21:49,919 --> 00:21:52,880
is basically

00:21:50,720 --> 00:21:53,919
exactly the same yaml as of the initial

00:21:52,880 --> 00:21:55,760
release

00:21:53,919 --> 00:21:57,760
the only the only real difference

00:21:55,760 --> 00:21:59,520
between this deployment and deployment

00:21:57,760 --> 00:22:00,880
it is currently running in production is

00:21:59,520 --> 00:22:04,240
in the tag

00:22:00,880 --> 00:22:07,440
on the right side you will see very soon

00:22:04,240 --> 00:22:08,240
a loop request will be sent to the

00:22:07,440 --> 00:22:11,039
application

00:22:08,240 --> 00:22:12,320
loop so that you can see how it

00:22:11,039 --> 00:22:13,919
progresses right

00:22:12,320 --> 00:22:15,440
the current version of the application

00:22:13,919 --> 00:22:17,440
the one running in production is

00:22:15,440 --> 00:22:19,360
supposed to output something something

00:22:17,440 --> 00:22:23,440
version 01

00:22:19,360 --> 00:22:26,720
and as scandal restarts rolling out

00:22:23,440 --> 00:22:29,919
the new release you will see increase in

00:22:26,720 --> 00:22:31,679
of the percentage of the outputs uh

00:22:29,919 --> 00:22:34,880
that state that the release that is

00:22:31,679 --> 00:22:34,880
running is all volt2

00:22:35,600 --> 00:22:40,000
okay so as as you can see all the

00:22:38,159 --> 00:22:43,440
outputs are from the existing release

00:22:40,000 --> 00:22:46,480
from it says version one

00:22:43,440 --> 00:22:48,559
so what we are going to do is apply

00:22:46,480 --> 00:22:50,240
the new deployment the deployment of the

00:22:48,559 --> 00:22:52,000
new release so the only thing that we

00:22:50,240 --> 00:22:55,120
are changing in the system

00:22:52,000 --> 00:22:57,039
ourselves is updated

00:22:55,120 --> 00:22:58,799
version of kubernetes deployment we're

00:22:57,039 --> 00:23:02,559
not changing anything else we're not

00:22:58,799 --> 00:23:05,760
doing any other action except deploying

00:23:02,559 --> 00:23:07,039
uh overwriting the existing deployment

00:23:05,760 --> 00:23:10,320
with the different

00:23:07,039 --> 00:23:10,320
image with the different tag

00:23:10,400 --> 00:23:13,440
and we can see that we have two

00:23:11,760 --> 00:23:17,039
deployments

00:23:13,440 --> 00:23:19,520
the new one all seven god demo seven

00:23:17,039 --> 00:23:20,840
is currently running zero replicas that

00:23:19,520 --> 00:23:23,440
will soon

00:23:20,840 --> 00:23:26,799
increase when

00:23:23,440 --> 00:23:29,520
horizontal product scaler kicks in

00:23:26,799 --> 00:23:32,880
and if we look at the virtual services

00:23:29,520 --> 00:23:34,960
we can see that we still have only one

00:23:32,880 --> 00:23:37,440
and this makes a lot more sense when you

00:23:34,960 --> 00:23:40,880
have multiple replicas

00:23:37,440 --> 00:23:42,720
and even the hpa the horizontal polar to

00:23:40,880 --> 00:23:46,240
scale it running

00:23:42,720 --> 00:23:47,919
so you have more room

00:23:46,240 --> 00:23:49,440
and if you look at the service right now

00:23:47,919 --> 00:23:50,240
virtual service from mystery in this

00:23:49,440 --> 00:23:52,240
case

00:23:50,240 --> 00:23:54,799
we can see that there are two

00:23:52,240 --> 00:23:57,120
destinations there's the two routes

00:23:54,799 --> 00:23:59,600
one sending hundred percent to the

00:23:57,120 --> 00:24:02,000
existing production release

00:23:59,600 --> 00:24:04,000
or primary and zero percent of the

00:24:02,000 --> 00:24:06,799
traffic is being sent to the country

00:24:04,000 --> 00:24:08,640
release to the new release and the

00:24:06,799 --> 00:24:11,360
reason for those zero percent is because

00:24:08,640 --> 00:24:13,360
canary flagger did not kick in yet

00:24:11,360 --> 00:24:14,960
soon you will see the change of that

00:24:13,360 --> 00:24:18,000
percentage once

00:24:14,960 --> 00:24:20,000
uh new deployment is operational

00:24:18,000 --> 00:24:21,039
and flagger discovers that there is a

00:24:20,000 --> 00:24:24,720
change

00:24:21,039 --> 00:24:26,640
of that deployment yeah flagger

00:24:24,720 --> 00:24:28,960
basically is

00:24:26,640 --> 00:24:31,039
stopping your new deployment from

00:24:28,960 --> 00:24:34,799
getting accessed

00:24:31,039 --> 00:24:36,240
and then slowly turning around for the

00:24:34,799 --> 00:24:38,080
users

00:24:36,240 --> 00:24:39,279
and now we can see that the percentage

00:24:38,080 --> 00:24:42,559
is changed

00:24:39,279 --> 00:24:43,679
80 is going to the production release

00:24:42,559 --> 00:24:46,240
why 20

00:24:43,679 --> 00:24:48,320
is going to the new release and if you

00:24:46,240 --> 00:24:49,679
pay attention to the right hand side of

00:24:48,320 --> 00:24:52,480
the terminal

00:24:49,679 --> 00:24:54,799
uh you will see that occasional outputs

00:24:52,480 --> 00:24:58,240
are now saying version o2

00:24:54,799 --> 00:25:00,640
approximately 20 of one out of one of

00:24:58,240 --> 00:25:04,960
every out of every five requests are

00:25:00,640 --> 00:25:04,960
responding currently with version o2

00:25:06,320 --> 00:25:10,400
and this is random but you could also

00:25:08,400 --> 00:25:12,270
set by

00:25:10,400 --> 00:25:13,440
like http headers and

00:25:12,270 --> 00:25:17,760
[Music]

00:25:13,440 --> 00:25:17,760
other sort of rules

00:25:17,840 --> 00:25:22,320
exactly currently rules if i remember

00:25:20,400 --> 00:25:24,080
correctly the definitions are based on

00:25:22,320 --> 00:25:26,000
uh

00:25:24,080 --> 00:25:27,200
the error rate i think or something like

00:25:26,000 --> 00:25:31,360
that uh

00:25:27,200 --> 00:25:33,600
simple one but yes definitely in real

00:25:31,360 --> 00:25:38,480
production usage you should change that

00:25:33,600 --> 00:25:42,640
to be real metrics real queries

00:25:38,480 --> 00:25:45,360
real error detection user satisfaction

00:25:42,640 --> 00:25:48,400
or whatever else you deem important to

00:25:45,360 --> 00:25:50,480
decide whether to move forward or not

00:25:48,400 --> 00:25:52,640
so let's describe canaris one more time

00:25:50,480 --> 00:25:56,080
and now we can see that it increased to

00:25:52,640 --> 00:25:58,080
calorie weight increase to 40 so

00:25:56,080 --> 00:25:59,919
it saw that there are no problems no

00:25:58,080 --> 00:26:01,919
errors no issues with the new release

00:25:59,919 --> 00:26:02,960
and it decided to move forward another

00:26:01,919 --> 00:26:04,400
00:26:02,960 --> 00:26:06,880
and if you pay attention on the right

00:26:04,400 --> 00:26:09,919
hand slide term inside of the terminal

00:26:06,880 --> 00:26:12,480
you will see that approximately 40

00:26:09,919 --> 00:26:14,080
percent of the responses are version 02

00:26:12,480 --> 00:26:17,440
while 60 percent

00:26:14,080 --> 00:26:18,159
are version 01 and we can see that

00:26:17,440 --> 00:26:21,360
canaris

00:26:18,159 --> 00:26:24,080
is now progressing and 60

00:26:21,360 --> 00:26:26,320
are now 60 of the traffic is currently

00:26:24,080 --> 00:26:28,960
being redirected to the new release

00:26:26,320 --> 00:26:30,320
by default and this can be changed once

00:26:28,960 --> 00:26:34,000
it reaches 60

00:26:30,320 --> 00:26:37,279
it is configured to finalize the release

00:26:34,000 --> 00:26:39,679
it assumes that if 60 of your users of

00:26:37,279 --> 00:26:42,240
the traffic or whatever the criteria is

00:26:39,679 --> 00:26:44,480
uh has been valid there is no point

00:26:42,240 --> 00:26:45,279
probably to continue progressing to 80

00:26:44,480 --> 00:26:47,679
percent

00:26:45,279 --> 00:26:48,880
it will jump straight to 100 and

00:26:47,679 --> 00:26:50,799
penalize

00:26:48,880 --> 00:26:52,960
uh the deployment of the new release so

00:26:50,799 --> 00:26:55,200
soon within a few moments

00:26:52,960 --> 00:26:56,240
all the traffic everything coming into

00:26:55,200 --> 00:27:00,559
this application

00:26:56,240 --> 00:27:00,559
will be redirected to the new release

00:27:01,440 --> 00:27:05,120
that's about it now it is promoting

00:27:04,000 --> 00:27:07,840
meaning that it is

00:27:05,120 --> 00:27:09,840
removing the country release and it is

00:27:07,840 --> 00:27:11,200
changing the primary release to be the

00:27:09,840 --> 00:27:12,880
new release

00:27:11,200 --> 00:27:14,240
and basically this is it even though the

00:27:12,880 --> 00:27:16,640
process did not finish yet

00:27:14,240 --> 00:27:18,480
basically it is finishing our

00:27:16,640 --> 00:27:20,480
application all the traffic of our

00:27:18,480 --> 00:27:22,159
application is now going

00:27:20,480 --> 00:27:24,080
to the new release and you can see from

00:27:22,159 --> 00:27:24,799
the output on the right hand side of the

00:27:24,080 --> 00:27:28,320
screen

00:27:24,799 --> 00:27:31,440
that all the responses are now all too

00:27:28,320 --> 00:27:32,880
that's it we're successful we've proven

00:27:31,440 --> 00:27:35,360
that it works in production just apply

00:27:32,880 --> 00:27:38,000
applied and that's it

00:27:35,360 --> 00:27:39,440
okay well thank you for listening to us

00:27:38,000 --> 00:27:42,559
today

00:27:39,440 --> 00:27:44,480
and we hope you

00:27:42,559 --> 00:27:46,399
learned that you can do progressive

00:27:44,480 --> 00:27:47,760
delivery canary deployments on

00:27:46,399 --> 00:27:49,600
kubernetes

00:27:47,760 --> 00:27:52,559
it's very easy you don't have to be

00:27:49,600 --> 00:27:53,039
netflix or facebook or a big corporation

00:27:52,559 --> 00:27:55,520
to

00:27:53,039 --> 00:27:57,200
do this you can just use open source

00:27:55,520 --> 00:28:01,200
projects to do it

00:27:57,200 --> 00:28:04,080
right victor absolutely

00:28:01,200 --> 00:28:05,600
basically it's almost too easy the main

00:28:04,080 --> 00:28:08,399
difficulty is whether you really

00:28:05,600 --> 00:28:11,840
understand under which conditions

00:28:08,399 --> 00:28:12,960
uh a release is successful because you

00:28:11,840 --> 00:28:16,159
will need to

00:28:12,960 --> 00:28:17,279
tell in this case flagger what those

00:28:16,159 --> 00:28:18,640
conditions are

00:28:17,279 --> 00:28:20,320
and that is probably the most

00:28:18,640 --> 00:28:21,279
complicated part because it's very easy

00:28:20,320 --> 00:28:23,600
to say

00:28:21,279 --> 00:28:24,880
okay just move forward twenty percent

00:28:23,600 --> 00:28:28,559
every five minutes

00:28:24,880 --> 00:28:31,600
but figuring out what are the

00:28:28,559 --> 00:28:34,799
potential errors that

00:28:31,600 --> 00:28:36,720
the machine system needs to discover

00:28:34,799 --> 00:28:38,080
in order to decide whether to move

00:28:36,720 --> 00:28:41,120
forward or move back

00:28:38,080 --> 00:28:42,559
is is the complicated part

00:28:41,120 --> 00:28:44,320
outside of that so if you know your

00:28:42,559 --> 00:28:44,960
system well if you know under which

00:28:44,320 --> 00:28:46,720
conditions

00:28:44,960 --> 00:28:48,480
something is a success or a failure then

00:28:46,720 --> 00:28:51,679
it's fairly easy

00:28:48,480 --> 00:28:54,960
yeah and it's not only metrics about

00:28:51,679 --> 00:28:56,840
you know http traffic you could also

00:28:54,960 --> 00:28:59,600
have your own metrics

00:28:56,840 --> 00:29:01,279
like business level metrics like how

00:28:59,600 --> 00:29:03,840
many items are people

00:29:01,279 --> 00:29:05,440
putting on their shopping carts or how

00:29:03,840 --> 00:29:07,840
many

00:29:05,440 --> 00:29:08,720
uh credit card transactions we have so

00:29:07,840 --> 00:29:12,080
you could

00:29:08,720 --> 00:29:14,000
also and it will be really nice to have

00:29:12,080 --> 00:29:15,279
those type of business level metrics

00:29:14,000 --> 00:29:17,679
that mean more

00:29:15,279 --> 00:29:17,679
to you

00:29:19,279 --> 00:29:26,159
exactly well with all that okay so

00:29:22,960 --> 00:29:29,200
thank you thank you yeah thank you for

00:29:26,159 --> 00:29:34,559
being here virtually

00:29:29,200 --> 00:29:34,559

YouTube URL: https://www.youtube.com/watch?v=Jf29YXu1Q48


