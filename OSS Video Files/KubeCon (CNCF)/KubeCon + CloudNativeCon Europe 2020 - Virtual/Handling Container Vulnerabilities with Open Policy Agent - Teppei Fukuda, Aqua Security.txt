Title: Handling Container Vulnerabilities with Open Policy Agent - Teppei Fukuda, Aqua Security
Publication date: 2020-08-27
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Handling Container Vulnerabilities with Open Policy Agent - Teppei Fukuda, Aqua Security 

A vulnerability scanner for containers doesn’t help a user decide how to handle vulnerabilities. For example, even if a critical vulnerability is found, some organizations may accept the risk of it. The policy for vulnerability handling depends on the organization, and in many cases, the person in charge has to make a manual judgement based on this policy every time. This is time-consuming.  This talk demonstrates how to automatically handle vulnerabilities detected by a scanner using OPA. - The vulnerabilities found by a scanner in CI are handled automatically by Open Policy Agent - Applying custom policy, OPA shows users which vulnerabilities to address  This automatic vulnerability handling in CI will be demonstrated live, along with Trivy, which is an open source vulnerability scanner for containers. The same policy handling model could be used with any scanner.

https://sched.co/Zekd
Captions: 
	00:00:00,240 --> 00:00:04,799
hi everyone thank you for taking the

00:00:02,639 --> 00:00:06,799
time to attend my session

00:00:04,799 --> 00:00:09,120
i'm tepif kuder from the open source

00:00:06,799 --> 00:00:11,360
team in aqua security

00:00:09,120 --> 00:00:13,280
and the maintenance review which is a

00:00:11,360 --> 00:00:14,719
vulnerability scanner for container

00:00:13,280 --> 00:00:16,640
images

00:00:14,719 --> 00:00:18,000
today i'll be talking about

00:00:16,640 --> 00:00:21,439
vulnerability handling

00:00:18,000 --> 00:00:22,480
with open proceed agent

00:00:21,439 --> 00:00:25,359
there are a lot of software

00:00:22,480 --> 00:00:28,880
availabilities in the world usually

00:00:25,359 --> 00:00:32,640
cv id is assigned to each vulnerability

00:00:28,880 --> 00:00:36,239
in the case of hot bleed cbe 2014

00:00:32,640 --> 00:00:39,760
0160 is a sign do you know how many

00:00:36,239 --> 00:00:42,480
vulnerabilities are reported per year

00:00:39,760 --> 00:00:44,320
this chart is from nbd national

00:00:42,480 --> 00:00:47,039
vulnerability database

00:00:44,320 --> 00:00:48,399
basically listing all cbeid assigned

00:00:47,039 --> 00:00:51,360
vulnerabilities

00:00:48,399 --> 00:00:53,600
in 2019 there were 17 000

00:00:51,360 --> 00:00:55,199
vulnerabilities disclosed

00:00:53,600 --> 00:00:57,120
as you can see the number of

00:00:55,199 --> 00:01:00,960
vulnerabilities has increased

00:00:57,120 --> 00:01:02,719
year by year in other words about 47

00:01:00,960 --> 00:01:06,159
vulnerabilities are reported

00:01:02,719 --> 00:01:08,560
a day basically you have to understand

00:01:06,159 --> 00:01:09,520
how vulnerabilities work in order to

00:01:08,560 --> 00:01:12,880
know how much

00:01:09,520 --> 00:01:16,479
impact it is but you know it's not

00:01:12,880 --> 00:01:17,520
easy you might take a few hours to

00:01:16,479 --> 00:01:21,680
understand

00:01:17,520 --> 00:01:22,799
only one vulnerability 24 hours is not

00:01:21,680 --> 00:01:27,040
enough

00:01:22,799 --> 00:01:29,600
to figure out the 47 vulnerabilities

00:01:27,040 --> 00:01:30,400
if your organization has a huge security

00:01:29,600 --> 00:01:33,600
team

00:01:30,400 --> 00:01:36,079
you might even be able to do that but

00:01:33,600 --> 00:01:40,159
you should not do that since 47

00:01:36,079 --> 00:01:42,479
vulnerabilities have a lot of noise

00:01:40,159 --> 00:01:43,280
it may include vulnerabilities of

00:01:42,479 --> 00:01:47,200
windows

00:01:43,280 --> 00:01:49,680
open ssl python kubernetes

00:01:47,200 --> 00:01:50,720
what what if your organization doesn't

00:01:49,680 --> 00:01:54,159
use windows and

00:01:50,720 --> 00:01:57,680
kubernetes you don't

00:01:54,159 --> 00:02:01,040
need to look into those vulnerabilities

00:01:57,680 --> 00:02:02,560
so asset management is essential for

00:02:01,040 --> 00:02:06,560
this purpose

00:02:02,560 --> 00:02:08,800
you should know which os package

00:02:06,560 --> 00:02:09,679
programming language library and

00:02:08,800 --> 00:02:12,800
equipment

00:02:09,679 --> 00:02:14,879
are used in your system if

00:02:12,800 --> 00:02:16,640
you remove vulnerabilities related to

00:02:14,879 --> 00:02:19,280
software your system

00:02:16,640 --> 00:02:22,560
isn't using you can reduce

00:02:19,280 --> 00:02:25,680
vulnerabilities you have to look into

00:02:22,560 --> 00:02:26,560
for example it might be five or seven

00:02:25,680 --> 00:02:29,280
vulnerabilities

00:02:26,560 --> 00:02:30,239
depending on your organization should we

00:02:29,280 --> 00:02:34,400
do this process

00:02:30,239 --> 00:02:35,519
manually let's think about the container

00:02:34,400 --> 00:02:37,840
image

00:02:35,519 --> 00:02:40,319
a container image should include all

00:02:37,840 --> 00:02:42,160
software it's gonna use

00:02:40,319 --> 00:02:45,120
all you have to do is extract

00:02:42,160 --> 00:02:49,599
information from the container like the

00:02:45,120 --> 00:02:51,519
image is based on debian and uses java

00:02:49,599 --> 00:02:54,560
then close reference to security

00:02:51,519 --> 00:02:57,200
advisories from vendors

00:02:54,560 --> 00:03:00,080
it sounds easy but it's still hard to do

00:02:57,200 --> 00:03:02,480
it for all container images manually and

00:03:00,080 --> 00:03:04,480
periodically

00:03:02,480 --> 00:03:06,480
for that purpose you can use the

00:03:04,480 --> 00:03:09,440
vulnerability scanner

00:03:06,480 --> 00:03:12,000
which automatically does does the things

00:03:09,440 --> 00:03:14,400
i explained just before

00:03:12,000 --> 00:03:16,159
there are many security solutions in the

00:03:14,400 --> 00:03:18,959
cloud-native area

00:03:16,159 --> 00:03:20,239
mixing open source and commercial

00:03:18,959 --> 00:03:23,840
products

00:03:20,239 --> 00:03:26,159
it also includes 3b i developed

00:03:23,840 --> 00:03:28,640
applying vulnerabilities scanning

00:03:26,159 --> 00:03:31,440
reduces the number of vulnerabilities

00:03:28,640 --> 00:03:34,560
you have to investigate

00:03:31,440 --> 00:03:38,000
do you think five and or two or

00:03:34,560 --> 00:03:41,040
ten vulnerabilities are small

00:03:38,000 --> 00:03:42,000
this number is just an example and it

00:03:41,040 --> 00:03:44,480
should be different

00:03:42,000 --> 00:03:45,360
depending on your system and your

00:03:44,480 --> 00:03:48,400
organization

00:03:45,360 --> 00:03:51,200
but i'm sure it must not be zero

00:03:48,400 --> 00:03:53,680
you will see sound vulnerabilities i

00:03:51,200 --> 00:03:56,640
don't think this value is small enough

00:03:53,680 --> 00:03:57,599
as i told you earlier it might take a

00:03:56,640 --> 00:04:01,120
few hours

00:03:57,599 --> 00:04:04,720
to look into vulnerability how can we

00:04:01,120 --> 00:04:04,720
reduce vulnerabilities more

00:04:05,200 --> 00:04:10,239
take a look at this chart a

00:04:07,200 --> 00:04:14,799
vulnerability basically has a cvss

00:04:10,239 --> 00:04:18,079
based score indicating the stability

00:04:14,799 --> 00:04:21,600
the score varies from 0 to 10

00:04:18,079 --> 00:04:25,120
10 means the most critical cbss

00:04:21,600 --> 00:04:28,479
consists of three metric groups base

00:04:25,120 --> 00:04:30,639
temporal and environmental but

00:04:28,479 --> 00:04:31,520
in this presentation i'll be talking

00:04:30,639 --> 00:04:35,759
about

00:04:31,520 --> 00:04:40,080
the base metrics and score

00:04:35,759 --> 00:04:42,400
because nvda provides base metrics only

00:04:40,080 --> 00:04:44,880
as you can see there are not so many

00:04:42,400 --> 00:04:47,280
high risk vulnerabilities

00:04:44,880 --> 00:04:50,000
only five point seven percent of the

00:04:47,280 --> 00:04:53,919
vulnerabilities have a score of eight

00:04:50,000 --> 00:04:56,080
or more filtering based on cvs

00:04:53,919 --> 00:04:57,840
scores can further reduce

00:04:56,080 --> 00:05:00,400
vulnerabilities

00:04:57,840 --> 00:05:02,960
it might be zero or one vulnerability if

00:05:00,400 --> 00:05:06,080
you look into

00:05:02,960 --> 00:05:11,039
critical vulnerabilities only

00:05:06,080 --> 00:05:14,639
of course zero or one depends on your

00:05:11,039 --> 00:05:17,280
your system let's consider whether the

00:05:14,639 --> 00:05:20,320
services score is reliable

00:05:17,280 --> 00:05:24,800
in the case of hard blade which affects

00:05:20,320 --> 00:05:28,639
open ssl the cvss v2 score

00:05:24,800 --> 00:05:31,520
it sets 5.0 media

00:05:28,639 --> 00:05:32,479
according to the cvss score it doesn't

00:05:31,520 --> 00:05:35,120
look like

00:05:32,479 --> 00:05:36,720
it's a dangerous vulnerability can we

00:05:35,120 --> 00:05:38,080
think of this vulnerability as

00:05:36,720 --> 00:05:41,840
negligible and

00:05:38,080 --> 00:05:45,520
ignore it as noted in this article

00:05:41,840 --> 00:05:49,600
hackers exploited this vulnerability

00:05:45,520 --> 00:05:52,560
so this vulnerability is not negligible

00:05:49,600 --> 00:05:54,800
in addition the services score is

00:05:52,560 --> 00:05:58,400
provided by each vendor

00:05:54,800 --> 00:05:59,520
in this example nvidia says the score is

00:05:58,400 --> 00:06:02,560
9.1

00:05:59,520 --> 00:06:07,039
critical while record sets

00:06:02,560 --> 00:06:08,479
5.9 moderate the values are often

00:06:07,039 --> 00:06:11,280
different

00:06:08,479 --> 00:06:12,560
i'm not saying don't use the services

00:06:11,280 --> 00:06:15,600
score

00:06:12,560 --> 00:06:16,240
but it's a bit risky to rely on cbs

00:06:15,600 --> 00:06:19,440
scores

00:06:16,240 --> 00:06:21,520
too much we should define our own policy

00:06:19,440 --> 00:06:24,479
for vulnerability handling

00:06:21,520 --> 00:06:25,199
for example our container image uses

00:06:24,479 --> 00:06:27,280
bash

00:06:25,199 --> 00:06:28,240
but we can accept the risk of batch

00:06:27,280 --> 00:06:31,919
vulnerabilities

00:06:28,240 --> 00:06:33,840
as bash is not internet facing of course

00:06:31,919 --> 00:06:37,039
if you don't need it completely you

00:06:33,840 --> 00:06:39,199
should delete it from the image

00:06:37,039 --> 00:06:41,440
also you might be able to accept the

00:06:39,199 --> 00:06:44,720
risk of cross-site scripting

00:06:41,440 --> 00:06:46,479
if your system is a static website

00:06:44,720 --> 00:06:48,639
and you perhaps can ignore the

00:06:46,479 --> 00:06:51,840
vulnerability which requires

00:06:48,639 --> 00:06:55,280
user interaction like opening the email

00:06:51,840 --> 00:06:57,280
and clicking the link this policy

00:06:55,280 --> 00:06:58,720
should be customized depending on your

00:06:57,280 --> 00:07:02,000
system and

00:06:58,720 --> 00:07:03,280
requirement and the system managing

00:07:02,000 --> 00:07:06,240
customers assets

00:07:03,280 --> 00:07:08,080
like bank account and system just

00:07:06,240 --> 00:07:10,720
publishing an article

00:07:08,080 --> 00:07:12,479
like the blog must have different

00:07:10,720 --> 00:07:15,039
policies

00:07:12,479 --> 00:07:16,960
i recommend defining the policy for

00:07:15,039 --> 00:07:21,039
vulnerability handling

00:07:16,960 --> 00:07:24,880
if the vulnerability is bash related

00:07:21,039 --> 00:07:26,880
or cross-site scripting or requires user

00:07:24,880 --> 00:07:29,440
interaction

00:07:26,880 --> 00:07:31,520
then you'd classify it as a negligible

00:07:29,440 --> 00:07:34,160
vulnerability

00:07:31,520 --> 00:07:35,520
if it doesn't match any rule you have to

00:07:34,160 --> 00:07:38,800
fix the vulnerability

00:07:35,520 --> 00:07:41,840
by updating the version or something

00:07:38,800 --> 00:07:43,680
another way actually there is thermal

00:07:41,840 --> 00:07:44,720
useful information for vulnerability

00:07:43,680 --> 00:07:50,000
handling

00:07:44,720 --> 00:07:50,000
such as services vector and cwib

00:07:50,160 --> 00:07:53,520
cbss vector string consists of eight

00:07:52,800 --> 00:07:57,520
elements

00:07:53,520 --> 00:08:00,160
called cbss metrics each metric value is

00:07:57,520 --> 00:08:03,759
used to score the vulnerability

00:08:00,160 --> 00:08:04,400
for example attack vector this matrix

00:08:03,759 --> 00:08:06,639
reflects

00:08:04,400 --> 00:08:09,199
the context by which vulnerability

00:08:06,639 --> 00:08:11,440
exploitation is possible

00:08:09,199 --> 00:08:12,400
this metric value will be larger the

00:08:11,440 --> 00:08:15,520
more remote

00:08:12,400 --> 00:08:18,400
an attacker can be in order to exploit

00:08:15,520 --> 00:08:20,560
the vulnerable component

00:08:18,400 --> 00:08:22,879
in addition to attack vector you can

00:08:20,560 --> 00:08:27,039
find privilege required

00:08:22,879 --> 00:08:30,400
user interaction and so on

00:08:27,039 --> 00:08:32,640
cwe common weakness enumeration

00:08:30,400 --> 00:08:34,320
aims to provide a common base to

00:08:32,640 --> 00:08:35,680
identify the type of software

00:08:34,320 --> 00:08:38,959
vulnerability

00:08:35,680 --> 00:08:43,599
for example cwe 17 8

00:08:38,959 --> 00:08:46,720
is os command injection and cw 89

00:08:43,599 --> 00:08:49,120
is sql injection now

00:08:46,720 --> 00:08:50,800
you can rewrite the policy using these

00:08:49,120 --> 00:08:52,800
metrics

00:08:50,800 --> 00:08:54,560
if you want to know if the variability

00:08:52,800 --> 00:08:59,360
is xss

00:08:54,560 --> 00:09:02,640
you can check if cw id is cw in 79

00:08:59,360 --> 00:09:05,519
or not if you want to know if the

00:09:02,640 --> 00:09:08,240
vulnerability requires user interaction

00:09:05,519 --> 00:09:09,760
you can check if user interaction in

00:09:08,240 --> 00:09:13,519
service spectrum is

00:09:09,760 --> 00:09:16,720
required so it allows you

00:09:13,519 --> 00:09:20,000
to handle vulnerabilities automatically

00:09:16,720 --> 00:09:20,320
and i propose to use open process agent

00:09:20,000 --> 00:09:23,360
to

00:09:20,320 --> 00:09:26,000
automate vulnerability handling

00:09:23,360 --> 00:09:26,640
open agent is open source policy

00:09:26,000 --> 00:09:29,760
engine

00:09:26,640 --> 00:09:30,399
and cncf project you have to write a

00:09:29,760 --> 00:09:33,760
policy

00:09:30,399 --> 00:09:37,440
written by rego and pass it to opera

00:09:33,760 --> 00:09:40,399
with input json opera evaluates the

00:09:37,440 --> 00:09:45,360
policy and returns the result

00:09:40,399 --> 00:09:45,360
it's usable as a library and service

00:09:45,519 --> 00:09:53,200
now you can put the policy into lego

00:09:50,560 --> 00:09:55,120
the policy written in regal should be

00:09:53,200 --> 00:09:57,120
like this

00:09:55,120 --> 00:10:00,480
on the right you can see the

00:09:57,120 --> 00:10:03,760
vulnerability detail of the input

00:10:00,480 --> 00:10:07,839
you can see the package name cwid

00:10:03,760 --> 00:10:10,399
cb id services score vector

00:10:07,839 --> 00:10:11,680
on the left we can see the pretty simple

00:10:10,399 --> 00:10:14,880
rules

00:10:11,680 --> 00:10:18,000
if the package name is bash or cw id

00:10:14,880 --> 00:10:21,120
is 79 or user interaction

00:10:18,000 --> 00:10:22,640
is required or services based score is

00:10:21,120 --> 00:10:24,320
less than 7

00:10:22,640 --> 00:10:25,920
the vulnerability is going to be

00:10:24,320 --> 00:10:29,120
negligible

00:10:25,920 --> 00:10:29,440
opera should reduce the vulnerabilities

00:10:29,120 --> 00:10:34,560
to

00:10:29,440 --> 00:10:36,560
0 or 1 a day depending on the policy

00:10:34,560 --> 00:10:38,000
it's so small that you could look into

00:10:36,560 --> 00:10:40,399
old

00:10:38,000 --> 00:10:42,160
note that validate information is not

00:10:40,399 --> 00:10:44,240
always correct

00:10:42,160 --> 00:10:45,440
if anybody says if the interaction is

00:10:44,240 --> 00:10:48,480
required

00:10:45,440 --> 00:10:51,120
it might be wrong don't trust the use

00:10:48,480 --> 00:10:53,360
variable information too much

00:10:51,120 --> 00:10:55,519
even if it's correct and the policy

00:10:53,360 --> 00:10:58,399
makes it a negligible

00:10:55,519 --> 00:11:01,600
it doesn't mean there is no risk it

00:10:58,399 --> 00:11:04,720
means you decide to accept the risk

00:11:01,600 --> 00:11:08,000
the balance of risk and cost is

00:11:04,720 --> 00:11:09,440
important if there are many people in a

00:11:08,000 --> 00:11:11,680
security team

00:11:09,440 --> 00:11:13,120
and the organization can take the cost

00:11:11,680 --> 00:11:15,680
of security

00:11:13,120 --> 00:11:17,360
you may be able to look into the patches

00:11:15,680 --> 00:11:19,200
and the primary source of all

00:11:17,360 --> 00:11:20,640
vulnerabilities

00:11:19,200 --> 00:11:23,040
if it's not the case in your

00:11:20,640 --> 00:11:25,600
organization you probably need the

00:11:23,040 --> 00:11:27,440
policy to accept some risk

00:11:25,600 --> 00:11:29,360
here's a summary of what i've been

00:11:27,440 --> 00:11:31,839
talking about so far

00:11:29,360 --> 00:11:33,839
at first vulnerability scanning filters

00:11:31,839 --> 00:11:36,160
to only those vulnerabilities that are

00:11:33,839 --> 00:11:38,800
relevant to your organization

00:11:36,160 --> 00:11:39,279
then oprah filters out vulnerabilities

00:11:38,800 --> 00:11:42,560
that

00:11:39,279 --> 00:11:45,440
you can accept the risk this whole

00:11:42,560 --> 00:11:46,959
process is automated

00:11:45,440 --> 00:11:51,040
you can just focus on the

00:11:46,959 --> 00:11:53,920
vulnerabilities in the final output

00:11:51,040 --> 00:11:54,720
as a case study here's a look at open

00:11:53,920 --> 00:11:58,720
integration

00:11:54,720 --> 00:12:01,680
in 3b in this example

00:11:58,720 --> 00:12:03,519
trivia scans an image and detects

00:12:01,680 --> 00:12:07,120
vulnerabilities

00:12:03,519 --> 00:12:10,480
then operates the result

00:12:07,120 --> 00:12:13,760
okay so before that let me explain

00:12:10,480 --> 00:12:17,040
3b a little it's an open source

00:12:13,760 --> 00:12:18,720
channel for container images 3b has a

00:12:17,040 --> 00:12:21,519
bunch of features

00:12:18,720 --> 00:12:24,639
and especially it can be integrated into

00:12:21,519 --> 00:12:28,399
the cs system such as guitar actions

00:12:24,639 --> 00:12:31,519
and jenkins easily

00:12:28,399 --> 00:12:34,480
recently trivia supported open

00:12:31,519 --> 00:12:36,880
integration to filter vulnerabilities

00:12:34,480 --> 00:12:38,240
you can pass a lego file defining your

00:12:36,880 --> 00:12:42,480
policy be a

00:12:38,240 --> 00:12:42,480
minus minus ignore policy option

00:12:42,959 --> 00:12:46,079
if your policy marks the variability

00:12:45,040 --> 00:12:48,480
negligible

00:12:46,079 --> 00:12:50,560
it will it will not be displayed in the

00:12:48,480 --> 00:12:52,320
result

00:12:50,560 --> 00:12:54,160
the structure of each vulnerability

00:12:52,320 --> 00:12:57,920
input is the same as for

00:12:54,160 --> 00:13:01,200
the 3b json output it includes

00:12:57,920 --> 00:13:06,800
severity cwids

00:13:01,200 --> 00:13:09,760
cbss vector and score and so on

00:13:06,800 --> 00:13:10,720
also it provides helper functions in

00:13:09,760 --> 00:13:14,240
rego

00:13:10,720 --> 00:13:17,519
like pass c basis vector p3

00:13:14,240 --> 00:13:20,160
which converts services vector string to

00:13:17,519 --> 00:13:22,560
an object so that you can easily access

00:13:20,160 --> 00:13:25,440
each metric

00:13:22,560 --> 00:13:26,000
this example ignores some packages like

00:13:25,440 --> 00:13:29,200
bash

00:13:26,000 --> 00:13:30,880
binder license rpm and bim because they

00:13:29,200 --> 00:13:32,079
are not used in the production

00:13:30,880 --> 00:13:34,399
environment

00:13:32,079 --> 00:13:36,079
as mentioned earlier unnecessary

00:13:34,399 --> 00:13:37,680
packages should be removed from the

00:13:36,079 --> 00:13:40,560
container image

00:13:37,680 --> 00:13:41,519
but if it's difficult you can ignore

00:13:40,560 --> 00:13:45,279
packages

00:13:41,519 --> 00:13:45,680
in the level policy then vulnerabilities

00:13:45,279 --> 00:13:49,600
with

00:13:45,680 --> 00:13:53,440
low and medium stability can be accepted

00:13:49,600 --> 00:13:56,240
also when it's not exploitably motoring

00:13:53,440 --> 00:13:58,000
or it requires high privilege like

00:13:56,240 --> 00:14:01,360
administration

00:13:58,000 --> 00:14:04,079
or needs user interaction

00:14:01,360 --> 00:14:05,839
and they will be marked negligible in

00:14:04,079 --> 00:14:07,920
this example

00:14:05,839 --> 00:14:10,880
okay so let me show the demo of

00:14:07,920 --> 00:14:13,440
integration into vcli

00:14:10,880 --> 00:14:15,120
at first let's try scanning center 7

00:14:13,440 --> 00:14:17,279
without any policy

00:14:15,120 --> 00:14:19,279
in this demo the result of detail is not

00:14:17,279 --> 00:14:20,320
needed so i am redirecting it to the

00:14:19,279 --> 00:14:22,600
null

00:14:20,320 --> 00:14:23,839
we can see the number of vulnerabilities

00:14:22,600 --> 00:14:25,600
00:14:23,839 --> 00:14:27,199
it's a hard task to check all

00:14:25,600 --> 00:14:30,560
vulnerabilities

00:14:27,199 --> 00:14:34,399
next looking into the policy example

00:14:30,560 --> 00:14:37,920
as i explained it ignores some packages

00:14:34,399 --> 00:14:42,839
some disabilities and

00:14:37,920 --> 00:14:46,079
a vulnerability that can't be exploited

00:14:42,839 --> 00:14:47,279
remotely or requires high privilege like

00:14:46,079 --> 00:14:50,160
administrator

00:14:47,279 --> 00:14:51,920
or requires user interaction or a

00:14:50,160 --> 00:14:54,720
cross-site request forgery

00:14:51,920 --> 00:14:57,279
in this case okay let's apply this

00:14:54,720 --> 00:14:59,519
policy to the results to be shown

00:14:57,279 --> 00:15:02,399
you can pass the regular file via minus

00:14:59,519 --> 00:15:04,399
minus ignore policy option

00:15:02,399 --> 00:15:06,720
as you can see there are seven

00:15:04,399 --> 00:15:09,680
vulnerabilities only in the result

00:15:06,720 --> 00:15:09,680
with the policy

00:15:09,760 --> 00:15:14,639
as you saw in the image center 7 shows

00:15:12,720 --> 00:15:17,680
600 vulnerabilities without

00:15:14,639 --> 00:15:19,279
policy but it would be only 7 with the

00:15:17,680 --> 00:15:22,079
policy

00:15:19,279 --> 00:15:24,000
less is not always better you have to

00:15:22,079 --> 00:15:27,600
tune your policy according to

00:15:24,000 --> 00:15:31,199
the requirement in your organization

00:15:27,600 --> 00:15:33,040
at last let me explain open integration

00:15:31,199 --> 00:15:35,279
in kubernetes

00:15:33,040 --> 00:15:36,800
this technique can be applied to any

00:15:35,279 --> 00:15:39,519
scanner

00:15:36,800 --> 00:15:40,160
but as proof of concept i developed

00:15:39,519 --> 00:15:43,360
kubernetes

00:15:40,160 --> 00:15:46,240
operator called 3b enforcer

00:15:43,360 --> 00:15:48,480
it works as custom controller to scan an

00:15:46,240 --> 00:15:51,680
image in advance

00:15:48,480 --> 00:15:54,959
and admission controller to validate an

00:15:51,680 --> 00:15:58,160
image a user tries to deploy

00:15:54,959 --> 00:15:59,120
let's take a look at the architecture at

00:15:58,160 --> 00:16:02,000
first

00:15:59,120 --> 00:16:03,600
a user registers an image name they want

00:16:02,000 --> 00:16:07,199
to deploy as a

00:16:03,600 --> 00:16:10,399
custom resource to be enforcer watches

00:16:07,199 --> 00:16:13,440
the custom resource as custom controller

00:16:10,399 --> 00:16:16,880
and fetches the image name then

00:16:13,440 --> 00:16:19,040
it sends the image name to 3v server for

00:16:16,880 --> 00:16:23,199
vulnerability scanning

00:16:19,040 --> 00:16:26,320
to be server returns a result and

00:16:23,199 --> 00:16:27,759
finally 3d enforcer updates the custom

00:16:26,320 --> 00:16:30,800
resource with

00:16:27,759 --> 00:16:31,600
those vulnerabilities the second result

00:16:30,800 --> 00:16:36,079
of the image

00:16:31,600 --> 00:16:38,959
must exist before you try to deploy it

00:16:36,079 --> 00:16:41,920
besides a user needs to upload their

00:16:38,959 --> 00:16:44,639
policy to config map

00:16:41,920 --> 00:16:45,360
cube management provided by the opera

00:16:44,639 --> 00:16:48,560
team

00:16:45,360 --> 00:16:51,759
watches configure map and

00:16:48,560 --> 00:16:54,560
loads the policy into open service

00:16:51,759 --> 00:16:56,079
what matters is you can take advantage

00:16:54,560 --> 00:16:59,680
of the same policy

00:16:56,079 --> 00:17:02,639
you use with 3vcli

00:16:59,680 --> 00:17:03,120
and 3d enforcer calls open service

00:17:02,639 --> 00:17:05,839
through

00:17:03,120 --> 00:17:05,839
rest api

00:17:06,880 --> 00:17:10,559
when the user is trying to deploy the

00:17:08,799 --> 00:17:12,240
image kubernetes api

00:17:10,559 --> 00:17:13,600
sends admission review to trivia

00:17:12,240 --> 00:17:16,559
enforcer

00:17:13,600 --> 00:17:17,439
and the request contains the image name

00:17:16,559 --> 00:17:19,520
to be

00:17:17,439 --> 00:17:21,679
retrieves the custom resource that

00:17:19,520 --> 00:17:23,199
matches the image name

00:17:21,679 --> 00:17:24,880
and extracts the result of the

00:17:23,199 --> 00:17:27,360
vulnerabilities

00:17:24,880 --> 00:17:29,440
if there is no second result it rejects

00:17:27,360 --> 00:17:33,360
the image immediately

00:17:29,440 --> 00:17:34,799
then it sends vulnerabilities to opera

00:17:33,360 --> 00:17:38,160
and oprah evaluates those

00:17:34,799 --> 00:17:42,400
vulnerabilities if one of them violates

00:17:38,160 --> 00:17:44,640
the policy it returns denied response

00:17:42,400 --> 00:17:47,200
if there is no vulnerability by relating

00:17:44,640 --> 00:17:50,320
the policy to the enforcer allows the

00:17:47,200 --> 00:17:50,320
deploy of the image

00:17:50,480 --> 00:17:55,039
all right so i'll demonstrate how

00:17:52,960 --> 00:17:57,520
turbine processor works with open

00:17:55,039 --> 00:18:00,400
agent in the kubernetes cluster

00:17:57,520 --> 00:18:02,480
and prevents a vulnerable image from

00:18:00,400 --> 00:18:04,960
being deployed

00:18:02,480 --> 00:18:06,720
at first i am checking parts in the

00:18:04,960 --> 00:18:10,640
default namespace

00:18:06,720 --> 00:18:14,160
there is no resource and checking the 3b

00:18:10,640 --> 00:18:17,200
enforcer system

00:18:14,160 --> 00:18:19,919
so where to be enforcer is deploy

00:18:17,200 --> 00:18:22,080
it works as custom controller and

00:18:19,919 --> 00:18:25,919
admission controller

00:18:22,080 --> 00:18:28,720
and also checking the opener name space

00:18:25,919 --> 00:18:29,840
you can see one point it includes two

00:18:28,720 --> 00:18:32,400
containers

00:18:29,840 --> 00:18:32,880
one is the open service and the other

00:18:32,400 --> 00:18:35,840
one is

00:18:32,880 --> 00:18:37,200
cube management to load regular file

00:18:35,840 --> 00:18:41,039
from configmap to

00:18:37,200 --> 00:18:44,960
open service okay let's check the

00:18:41,039 --> 00:18:48,320
configmap map

00:18:44,960 --> 00:18:50,960
in the open namespace

00:18:48,320 --> 00:18:51,600
so you can see the one rego file

00:18:50,960 --> 00:18:54,799
including

00:18:51,600 --> 00:18:58,000
helper functions this

00:18:54,799 --> 00:19:01,360
dragonfire is deployed by default

00:18:58,000 --> 00:19:08,840
from by 3b enforcer

00:19:01,360 --> 00:19:11,760
let's check the content of this reg file

00:19:08,840 --> 00:19:15,120
functions

00:19:11,760 --> 00:19:16,160
okay as you can see this logo file

00:19:15,120 --> 00:19:18,720
provides a

00:19:16,160 --> 00:19:19,760
helper function like pass services

00:19:18,720 --> 00:19:23,200
vector b3

00:19:19,760 --> 00:19:26,960
converting services vector string to the

00:19:23,200 --> 00:19:31,760
object okay you can import this

00:19:26,960 --> 00:19:31,760
package and calls these functions

00:19:32,320 --> 00:19:34,559
okay

00:19:36,320 --> 00:19:40,320
next you can see the same policy i used

00:19:38,880 --> 00:19:44,320
in the previous demo

00:19:40,320 --> 00:19:46,960
example rego it ignores some packages

00:19:44,320 --> 00:19:48,240
and stabilities and some other rules as

00:19:46,960 --> 00:19:50,080
well

00:19:48,240 --> 00:19:52,320
you can reuse the same policy in

00:19:50,080 --> 00:19:54,799
equivalence integration

00:19:52,320 --> 00:19:56,640
to make use of it you have to deploy it

00:19:54,799 --> 00:20:00,080
as a config map

00:19:56,640 --> 00:20:02,400
so let's run create config

00:20:00,080 --> 00:20:02,400
map

00:20:03,760 --> 00:20:10,080
and 3b from file

00:20:06,799 --> 00:20:13,200
example rego and namespace over okay

00:20:10,080 --> 00:20:15,200
create it all right let's check the

00:20:13,200 --> 00:20:18,880
comic map

00:20:15,200 --> 00:20:21,919
okay you can see the 3d copy map

00:20:18,880 --> 00:20:22,799
so this regular file is uploaded to

00:20:21,919 --> 00:20:25,200
configmap

00:20:22,799 --> 00:20:28,240
and load it into open service through

00:20:25,200 --> 00:20:28,240
curve management

00:20:30,960 --> 00:20:35,200
in kubernetes integration you need to

00:20:33,200 --> 00:20:39,440
define the package kubernetes

00:20:35,200 --> 00:20:43,679
by dating because 3p enforcer queries it

00:20:39,440 --> 00:20:46,320
so let's define the policy

00:20:43,679 --> 00:20:46,320
web

00:20:47,200 --> 00:20:54,240
package name must be kubernetes

00:20:50,640 --> 00:20:57,760
validating 3b and

00:20:54,240 --> 00:21:00,960
import data.3b

00:20:57,760 --> 00:21:02,559
this is what we uploaded just before and

00:21:00,960 --> 00:21:07,120
also

00:21:02,559 --> 00:21:07,120
the there must be deny rule

00:21:10,320 --> 00:21:15,039
but we already have the logic to

00:21:12,080 --> 00:21:17,520
evaluate the vulnerabilities

00:21:15,039 --> 00:21:18,240
in tribute to ignore so we can just call

00:21:17,520 --> 00:21:22,720
the

00:21:18,240 --> 00:21:26,960
imported rule here uh

00:21:22,720 --> 00:21:30,400
to contribute to ignore

00:21:26,960 --> 00:21:30,880
but the ignore means you can accept the

00:21:30,400 --> 00:21:33,200
risk

00:21:30,880 --> 00:21:35,520
while denies that you cannot accept a

00:21:33,200 --> 00:21:38,720
risk so we need a not

00:21:35,520 --> 00:21:42,080
and you can define the message so

00:21:38,720 --> 00:21:46,960
for example the image

00:21:42,080 --> 00:21:46,960
for okay that's it

00:21:50,720 --> 00:21:59,840
and also we have to upload this regular

00:21:54,480 --> 00:21:59,840
config map with uh

00:22:10,840 --> 00:22:13,840
space

00:22:15,039 --> 00:22:22,480
okay so there are three config maps

00:22:19,360 --> 00:22:26,000
in the open name space and

00:22:22,480 --> 00:22:29,200
web fork imports 3b

00:22:26,000 --> 00:22:31,520
also 3b imports to be helpful functions

00:22:29,200 --> 00:22:31,520
okay

00:22:35,120 --> 00:22:39,120
we've completed the preparation of

00:22:37,600 --> 00:22:43,760
measure assurance

00:22:39,120 --> 00:22:47,520
so let me try to deploy ngx

00:22:43,760 --> 00:22:50,559
mage hx 1.18

00:22:47,520 --> 00:22:54,960
so it was rejected because

00:22:50,559 --> 00:22:58,000
there is no scan result for this image

00:22:54,960 --> 00:23:00,880
this is because so we've never added

00:22:58,000 --> 00:23:01,360
a custom resource with this image name

00:23:00,880 --> 00:23:04,559
so

00:23:01,360 --> 00:23:07,200
there's no second result in the cluster

00:23:04,559 --> 00:23:08,640
okay so we need to add the custom

00:23:07,200 --> 00:23:12,000
resource

00:23:08,640 --> 00:23:12,000
including this image name

00:23:13,679 --> 00:23:20,080
okay so this injects.yammer

00:23:17,679 --> 00:23:23,600
has a kind image vulnerability so this

00:23:20,080 --> 00:23:28,559
is the custom resource the name is ngx

00:23:23,600 --> 00:23:33,760
and image name is ngx 1.18

00:23:28,559 --> 00:23:37,039
so before uploading let's check in the

00:23:33,760 --> 00:23:38,880
custom resource okay so there's no

00:23:37,039 --> 00:23:42,960
resources

00:23:38,880 --> 00:23:45,840
so let's uh add it let's add this

00:23:42,960 --> 00:23:45,840
custom resource

00:23:46,320 --> 00:23:52,720
and checks okay so here you can see the

00:23:50,080 --> 00:23:56,240
ngx custom resource

00:23:52,720 --> 00:23:56,960
and 3b enforcer watches this custom

00:23:56,240 --> 00:24:00,480
resource

00:23:56,960 --> 00:24:01,600
and it detects the change so now to be

00:24:00,480 --> 00:24:04,799
enforcer scans

00:24:01,600 --> 00:24:08,720
the image of ngx 1.18

00:24:04,799 --> 00:24:13,200
and update the vulnerabilities

00:24:08,720 --> 00:24:13,200
okay maybe it's already finished

00:24:13,279 --> 00:24:19,919
image from this piece into

00:24:16,320 --> 00:24:19,919
x yamu

00:24:20,720 --> 00:24:27,120
so you can see the labels the namespace

00:24:23,760 --> 00:24:30,159
registry repository and tab

00:24:27,120 --> 00:24:35,279
also you can see the status

00:24:30,159 --> 00:24:38,000
field it includes vulnerabilities

00:24:35,279 --> 00:24:40,400
as you can see so there are

00:24:38,000 --> 00:24:43,919
vulnerabilities of this image

00:24:40,400 --> 00:24:47,440
for example the packaging name apt and

00:24:43,919 --> 00:24:52,320
stability row and the probability id

00:24:47,440 --> 00:24:52,320
cbe 20 11

00:24:52,440 --> 00:24:55,440
00:24:58,840 --> 00:25:01,840
okay

00:25:02,000 --> 00:25:06,720
now we have the second result of njx

00:25:04,840 --> 00:25:10,080
1.18

00:25:06,720 --> 00:25:13,279
so let's try to deploy this image again

00:25:10,080 --> 00:25:17,520
to the control run mgx

00:25:13,279 --> 00:25:20,159
you image gx 1.18

00:25:17,520 --> 00:25:23,120
but it still failed because this image

00:25:20,159 --> 00:25:25,840
has a high severity vulnerability

00:25:23,120 --> 00:25:29,520
and you know this rego file doesn't

00:25:25,840 --> 00:25:33,679
allow high security vulnerability

00:25:29,520 --> 00:25:37,120
so let's try

00:25:33,679 --> 00:25:42,000
editing the config map

00:25:37,120 --> 00:25:44,570
to allow high stability okay

00:25:42,000 --> 00:25:46,000
so here

00:25:44,570 --> 00:25:49,120
[Music]

00:25:46,000 --> 00:25:52,159
i'm adding the high stability

00:25:49,120 --> 00:25:55,440
okay so after editing

00:25:52,159 --> 00:25:59,919
this peg file the cube management

00:25:55,440 --> 00:26:04,080
loads this regula file to open service

00:25:59,919 --> 00:26:10,960
so this the price should be succeeded

00:26:04,080 --> 00:26:14,720
ngx manage ngx 1.18 okay

00:26:10,960 --> 00:26:18,000
created so now

00:26:14,720 --> 00:26:21,039
we confirmed that it works properly with

00:26:18,000 --> 00:26:23,440
open proceed agent if you use

00:26:21,039 --> 00:26:25,679
herba as a container registry 3b

00:26:23,440 --> 00:26:27,840
enforcer can clearly hover to fetch

00:26:25,679 --> 00:26:30,159
vulnerabilities of the image

00:26:27,840 --> 00:26:31,760
because harvard supports image scanning

00:26:30,159 --> 00:26:33,919
in the registry

00:26:31,760 --> 00:26:37,440
in that case you don't need to add a

00:26:33,919 --> 00:26:40,080
custom resource for free scanning

00:26:37,440 --> 00:26:43,200
so i have the demo of open integration

00:26:40,080 --> 00:26:46,720
with hardware register

00:26:43,200 --> 00:26:48,559
so now we have the hardware deploying

00:26:46,720 --> 00:26:53,760
the kubernetes cluster

00:26:48,559 --> 00:26:53,760
and the browser is 2 0 one

00:26:54,640 --> 00:27:00,240
so it's the latest version

00:26:58,159 --> 00:27:01,919
and the domain name is called hardware

00:27:00,240 --> 00:27:03,919
domain

00:27:01,919 --> 00:27:07,360
so there are some images under the

00:27:03,919 --> 00:27:10,080
project library so library ngx and

00:27:07,360 --> 00:27:15,679
library alpine so let's have a look

00:27:10,080 --> 00:27:18,000
at ngx it has only 131.18

00:27:15,679 --> 00:27:18,799
and it has some vulnerabilities

00:27:18,000 --> 00:27:22,240
including

00:27:18,799 --> 00:27:23,039
high stability we need a different

00:27:22,240 --> 00:27:25,440
policy than

00:27:23,039 --> 00:27:27,279
the one we just used with 3b because

00:27:25,440 --> 00:27:28,880
hubble has a different format of the

00:27:27,279 --> 00:27:31,039
scale result

00:27:28,880 --> 00:27:32,240
so defining the process for harder the

00:27:31,039 --> 00:27:35,440
package name must

00:27:32,240 --> 00:27:39,520
be kubernetes by dating harbor

00:27:35,440 --> 00:27:41,760
and includes deny with the message

00:27:39,520 --> 00:27:42,799
in this example it just denies the

00:27:41,760 --> 00:27:47,360
vulnerabilities of

00:27:42,799 --> 00:27:49,600
high and critical stability

00:27:47,360 --> 00:27:51,279
and remove streams policy used in the

00:27:49,600 --> 00:27:54,320
previous demo

00:27:51,279 --> 00:27:56,320
so you can see the only one regular file

00:27:54,320 --> 00:27:58,399
and so we have to upload the policy to

00:27:56,320 --> 00:28:01,039
config map

00:27:58,399 --> 00:28:02,080
this policy is also loaded to open

00:28:01,039 --> 00:28:06,559
service

00:28:02,080 --> 00:28:09,919
create copy map from file hardware.lego

00:28:06,559 --> 00:28:13,120
open namespace okay create it

00:28:09,919 --> 00:28:16,640
and load it to server and it can find

00:28:13,120 --> 00:28:20,640
the policy of hardware and config map

00:28:16,640 --> 00:28:24,080
so let's try deploying the image

00:28:20,640 --> 00:28:27,440
in the hub registry so in this case

00:28:24,080 --> 00:28:30,679
i'm using the core hardware domain

00:28:27,440 --> 00:28:33,679
slash library slash ngx

00:28:30,679 --> 00:28:33,679
1.18

00:28:34,080 --> 00:28:39,679
but it was rejected because

00:28:37,200 --> 00:28:42,080
as you know this image has a high

00:28:39,679 --> 00:28:46,240
stability vulnerability

00:28:42,080 --> 00:28:49,120
so the this image violates the policy

00:28:46,240 --> 00:28:51,520
so modify the policy to allow high

00:28:49,120 --> 00:28:54,960
stability

00:28:51,520 --> 00:28:57,279
okay so let's remove this uh

00:28:54,960 --> 00:28:59,840
visibility high stability from the

00:28:57,279 --> 00:28:59,840
policy

00:29:00,559 --> 00:29:10,840
and try to try to deploy the image again

00:29:05,360 --> 00:29:16,320
around ngx image or harbor domain

00:29:10,840 --> 00:29:20,720
library ngx 1.18

00:29:16,320 --> 00:29:24,840
so the pro is supposed to be allowed

00:29:20,720 --> 00:29:26,799
so as you can see the image has been

00:29:24,840 --> 00:29:29,120
created

00:29:26,799 --> 00:29:32,480
so you can probably image assurance

00:29:29,120 --> 00:29:35,039
throughout the development life cycle

00:29:32,480 --> 00:29:36,240
in local development and continuous

00:29:35,039 --> 00:29:39,360
integration

00:29:36,240 --> 00:29:42,640
you can run 3b cli with minus minus

00:29:39,360 --> 00:29:42,640
ignore policy option

00:29:43,039 --> 00:29:47,440
then to the enforcer can be used in a

00:29:45,520 --> 00:29:49,679
kubernetes cluster to reject

00:29:47,440 --> 00:29:51,840
the drawings image with critical

00:29:49,679 --> 00:29:54,320
vulnerabilities

00:29:51,840 --> 00:29:56,000
the important thing is that you can

00:29:54,320 --> 00:29:59,840
share the same policy

00:29:56,000 --> 00:29:59,840
across the whole process

00:30:00,640 --> 00:30:03,840
note that they are still experimental

00:30:02,960 --> 00:30:07,279
features and

00:30:03,840 --> 00:30:08,640
not stable what i wanted to get across

00:30:07,279 --> 00:30:11,200
in this presentation

00:30:08,640 --> 00:30:12,960
is that we should define a custom policy

00:30:11,200 --> 00:30:15,120
for vulnerability handling

00:30:12,960 --> 00:30:16,799
based on your organization's risk

00:30:15,120 --> 00:30:19,360
acceptance

00:30:16,799 --> 00:30:21,039
then open policy agent can be used for

00:30:19,360 --> 00:30:23,840
that purpose

00:30:21,039 --> 00:30:26,159
you can find some proof of concept of

00:30:23,840 --> 00:30:29,039
integration with 3b

00:30:26,159 --> 00:30:31,600
in those plc you can take advantage of

00:30:29,039 --> 00:30:36,159
the same urban policy throughout the

00:30:31,600 --> 00:30:39,200
development lifecycle that's it

00:30:36,159 --> 00:30:39,200
thank you for your attention

00:30:48,240 --> 00:30:51,279
there are a lot of software

00:30:49,360 --> 00:30:54,159
vulnerabilities in the world

00:30:51,279 --> 00:30:55,679
usually cv id is assigned to each

00:30:54,159 --> 00:30:59,440
vulnerability

00:30:55,679 --> 00:31:04,720
in the case of hot bleed cbe 2014

00:30:59,440 --> 00:31:04,720

YouTube URL: https://www.youtube.com/watch?v=WKE2XNZ2zr4


