Title: etcd Watchers Not Working? Improving Error Handling in Your Applications - Guillermo Nunez, IBM
Publication date: 2020-08-27
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

etcd Watchers Not Working? Improving Error Handling in Your Applications - Guillermo Nunez, IBM 

When building services with etcd, one of the best features of etcd is watchers. It allows developers to create applications such that when a dataset is changed, the watcher for that dataset on another system receives the notification and performs user-specified action. A simple use case is a user has a program using etcd watchers to monitor the stock market and sell (user-defined action) if their stock of interest falls below price $X.    There are error failures that are not automatically covered with an etcd cluster such as network connectivity issues, DC outage, and cloud infrastructure maintenance. The talk consists of the following:  - what watchers are  - how to build your services using heartbeat key for monitoring etcd watchers  - perform locking on watchers to prevent race conditions  - caching data locally for your service to keep running until the etcd cluster is back up.

https://sched.co/ZetF
Captions: 
	00:00:00,080 --> 00:00:04,400
hello everyone thank you for joining

00:00:02,879 --> 00:00:06,799
today we're going to be talking about

00:00:04,400 --> 00:00:08,559
ncd watchers not working

00:00:06,799 --> 00:00:11,360
how we can improve the error handling in

00:00:08,559 --> 00:00:11,360
your applications

00:00:11,679 --> 00:00:16,320
so today's agenda we'll be talking about

00:00:13,840 --> 00:00:18,240
what the ncd watchers are

00:00:16,320 --> 00:00:19,680
you know how they're used how we can

00:00:18,240 --> 00:00:23,119
perform locking on

00:00:19,680 --> 00:00:25,840
key directories when using watchers

00:00:23,119 --> 00:00:27,840
how you can monitor your lcd watchers to

00:00:25,840 --> 00:00:30,320
make sure that they're running

00:00:27,840 --> 00:00:32,000
and how to cache the data that you're

00:00:30,320 --> 00:00:35,360
using from ncd

00:00:32,000 --> 00:00:38,960
locally on your applications so

00:00:35,360 --> 00:00:41,600
edcd is a key value storage system

00:00:38,960 --> 00:00:42,800
so you can kind of think about it as a

00:00:41,600 --> 00:00:46,079
python dictionary

00:00:42,800 --> 00:00:48,719
so for your key you could have like a

00:00:46,079 --> 00:00:49,440
restaurant and then for your value you

00:00:48,719 --> 00:00:52,079
can have

00:00:49,440 --> 00:00:52,879
you know like a pizza place or you can

00:00:52,079 --> 00:00:57,199
have a

00:00:52,879 --> 00:01:00,719
uh a phone number a

00:00:57,199 --> 00:01:03,199
x address z for for the watchers

00:01:00,719 --> 00:01:03,760
these pay attention to these specific

00:01:03,199 --> 00:01:06,479
keys

00:01:03,760 --> 00:01:07,439
and or directories and it triggers an

00:01:06,479 --> 00:01:10,479
action

00:01:07,439 --> 00:01:11,760
so say we have a

00:01:10,479 --> 00:01:13,520
for the example i just gave for

00:01:11,760 --> 00:01:16,960
restaurants we

00:01:13,520 --> 00:01:18,400
we changed the value to instead of it

00:01:16,960 --> 00:01:19,360
saying pizza hut we change it to

00:01:18,400 --> 00:01:22,080
domino's

00:01:19,360 --> 00:01:24,080
so you'll see that once that change

00:01:22,080 --> 00:01:26,080
happens to that cd database

00:01:24,080 --> 00:01:27,920
and you have a watcher running you'll

00:01:26,080 --> 00:01:29,439
get a notification that the value is

00:01:27,920 --> 00:01:30,240
changed and then you can trigger an

00:01:29,439 --> 00:01:32,720
action as

00:01:30,240 --> 00:01:33,920
you know as needed so for this example

00:01:32,720 --> 00:01:36,560
here

00:01:33,920 --> 00:01:38,159
we have um stocks and i'm using the

00:01:36,560 --> 00:01:39,759
dictionary so it just kind of creates

00:01:38,159 --> 00:01:44,000
like a hierarchy here

00:01:39,759 --> 00:01:46,240
so we have the slash stock slash foo

00:01:44,000 --> 00:01:47,680
so the kind of like the convention that

00:01:46,240 --> 00:01:50,159
i'm using here is

00:01:47,680 --> 00:01:51,600
the stocks would just represent what i'm

00:01:50,159 --> 00:01:53,119
meaning at a high level

00:01:51,600 --> 00:01:54,720
and then for the foo it'll be the

00:01:53,119 --> 00:01:56,560
individual stocks that we're

00:01:54,720 --> 00:01:58,320
that we're interested in so for this

00:01:56,560 --> 00:02:01,360
example i'm using foo

00:01:58,320 --> 00:02:03,520
um as the key and then for the value

00:02:01,360 --> 00:02:04,479
i'm designating it as the the stock

00:02:03,520 --> 00:02:06,560
price

00:02:04,479 --> 00:02:09,280
so you we have four different times here

00:02:06,560 --> 00:02:09,679
so time zero we're adding a key value

00:02:09,280 --> 00:02:12,879
here

00:02:09,679 --> 00:02:14,319
to the database um and we haven't set up

00:02:12,879 --> 00:02:16,319
the watcher yet

00:02:14,319 --> 00:02:18,640
at time one you can see that we're

00:02:16,319 --> 00:02:20,959
setting up the watchers to sell

00:02:18,640 --> 00:02:22,879
so that's the action that i'm defining

00:02:20,959 --> 00:02:26,640
at 120.

00:02:22,879 --> 00:02:29,360
at time 2 we

00:02:26,640 --> 00:02:30,480
we see that the foo stock has increased

00:02:29,360 --> 00:02:33,200
to 130

00:02:30,480 --> 00:02:33,599
and that's reflected in the database now

00:02:33,200 --> 00:02:36,160
the

00:02:33,599 --> 00:02:37,360
the watcher gets this notification but

00:02:36,160 --> 00:02:40,239
because we're not

00:02:37,360 --> 00:02:41,680
you know trying to do any action if it

00:02:40,239 --> 00:02:43,280
if it increases

00:02:41,680 --> 00:02:44,800
um then we don't have to worry about it

00:02:43,280 --> 00:02:48,160
there's no action needed

00:02:44,800 --> 00:02:51,280
at t3 once we see that um the

00:02:48,160 --> 00:02:53,040
the price has changed to 120 then

00:02:51,280 --> 00:02:54,879
the watcher will get a notification and

00:02:53,040 --> 00:02:56,800
then we'll trigger an action

00:02:54,879 --> 00:02:58,879
and in this case we can just say for

00:02:56,800 --> 00:03:02,159
simplicity that we're going to trigger

00:02:58,879 --> 00:03:03,440
you know to sell the stock and whatever

00:03:02,159 --> 00:03:04,159
portfolio you're using whether it's

00:03:03,440 --> 00:03:07,200
robinhood

00:03:04,159 --> 00:03:07,200
or or fidelity

00:03:07,760 --> 00:03:12,800
so with watchers and with changing data

00:03:11,519 --> 00:03:14,800
we'll have to make sure that we take

00:03:12,800 --> 00:03:15,280
care of the race conditions to make sure

00:03:14,800 --> 00:03:18,319
that our

00:03:15,280 --> 00:03:21,760
data is not corrupted and

00:03:18,319 --> 00:03:24,400
we can do that by using the lock api

00:03:21,760 --> 00:03:25,519
so here i want you guys to consider the

00:03:24,400 --> 00:03:29,760
situation

00:03:25,519 --> 00:03:31,760
since we've been talking about stocks so

00:03:29,760 --> 00:03:32,799
the you know going by step by step here

00:03:31,760 --> 00:03:36,239
so the foo

00:03:32,799 --> 00:03:38,080
will change from 120 to 119 and we have

00:03:36,239 --> 00:03:40,879
our watcher defined to where

00:03:38,080 --> 00:03:43,120
we sell if the price gets lower than 120

00:03:40,879 --> 00:03:46,480
and we buy more if the foo

00:03:43,120 --> 00:03:48,239
is greater than 115. so for

00:03:46,480 --> 00:03:50,720
for step two here we see the watch

00:03:48,239 --> 00:03:54,080
program would trigger you know the cell

00:03:50,720 --> 00:03:56,879
since it's lower than uh 120

00:03:54,080 --> 00:03:57,599
and then a new value for the stock has

00:03:56,879 --> 00:04:01,280
gone to

00:03:57,599 --> 00:04:02,720
to 110 by a user to the to the database

00:04:01,280 --> 00:04:04,959
and you can see here that there's a race

00:04:02,720 --> 00:04:08,480
condition happening between um

00:04:04,959 --> 00:04:11,360
between these two so and to prevent that

00:04:08,480 --> 00:04:12,720
we want to make sure that once the watch

00:04:11,360 --> 00:04:16,000
the watcher gets

00:04:12,720 --> 00:04:17,600
the notification that the foo has gone

00:04:16,000 --> 00:04:21,120
below 120

00:04:17,600 --> 00:04:23,040
we lock that specific key and once we

00:04:21,120 --> 00:04:25,840
finish our action then we you know

00:04:23,040 --> 00:04:28,960
release it and then the user can

00:04:25,840 --> 00:04:31,280
change the value to 110 and then we can

00:04:28,960 --> 00:04:33,040
trigger and watch for the second uh

00:04:31,280 --> 00:04:35,759
action which would be to buy more

00:04:33,040 --> 00:04:36,880
right buy more once the foo is at 1 15.

00:04:35,759 --> 00:04:39,040
so this will prevent the

00:04:36,880 --> 00:04:42,479
the race condition from occurring and

00:04:39,040 --> 00:04:46,080
make sure your data is not corrupted

00:04:42,479 --> 00:04:48,320
for monitoring watchers um so we

00:04:46,080 --> 00:04:50,000
had to make sure that our watchers were

00:04:48,320 --> 00:04:53,199
up and that they

00:04:50,000 --> 00:04:54,560
received the notifications that nowhere

00:04:53,199 --> 00:04:57,840
in between

00:04:54,560 --> 00:04:59,759
the connection was dropped so a way that

00:04:57,840 --> 00:05:01,680
can happen right is that there's like

00:04:59,759 --> 00:05:03,199
network connectivity issues you know

00:05:01,680 --> 00:05:05,759
you'll see that

00:05:03,199 --> 00:05:07,039
um if you send new new values to the

00:05:05,759 --> 00:05:08,639
database

00:05:07,039 --> 00:05:10,080
the watcher will not pick them up so

00:05:08,639 --> 00:05:11,360
that's why we have to monitor

00:05:10,080 --> 00:05:13,280
them and make sure that we just

00:05:11,360 --> 00:05:14,560
reestablish new connections for the

00:05:13,280 --> 00:05:18,240
watchers as needed

00:05:14,560 --> 00:05:19,919
so here my way to monitor that is um

00:05:18,240 --> 00:05:23,120
so i described the hierarchy here with

00:05:19,919 --> 00:05:25,680
the slash stock slash foo

00:05:23,120 --> 00:05:27,840
so what we use in this case would be

00:05:25,680 --> 00:05:31,440
slash stock slash health

00:05:27,840 --> 00:05:33,280
and then we can define a interval

00:05:31,440 --> 00:05:34,720
on how often we want to ping to make

00:05:33,280 --> 00:05:37,680
sure that these watchers

00:05:34,720 --> 00:05:38,000
are up and running usually if you have

00:05:37,680 --> 00:05:39,600
you know

00:05:38,000 --> 00:05:41,440
one watcher running that's a good signal

00:05:39,600 --> 00:05:42,400
that the other watchers are running as

00:05:41,440 --> 00:05:44,720
well

00:05:42,400 --> 00:05:45,600
um so you just want to make sure you're

00:05:44,720 --> 00:05:49,120
setting up that

00:05:45,600 --> 00:05:51,600
your program to send the

00:05:49,120 --> 00:05:52,160
to change the value of the health in an

00:05:51,600 --> 00:05:53,919
interval

00:05:52,160 --> 00:05:55,919
and then set up your watcher to

00:05:53,919 --> 00:05:58,720
acknowledge that you know we are

00:05:55,919 --> 00:06:00,479
having we do have established connection

00:05:58,720 --> 00:06:03,120
with that cd database and the watchers

00:06:00,479 --> 00:06:03,120
are up and running

00:06:04,400 --> 00:06:11,360
so for more complex uh software

00:06:07,440 --> 00:06:14,160
um i'll use cloud here as an example so

00:06:11,360 --> 00:06:16,560
it could be the case that there's a key

00:06:14,160 --> 00:06:19,199
that's changing constantly

00:06:16,560 --> 00:06:21,039
um from different places and i'll give

00:06:19,199 --> 00:06:23,600
an example as cloud right

00:06:21,039 --> 00:06:24,960
so in cloud there's different there's

00:06:23,600 --> 00:06:28,240
different instances

00:06:24,960 --> 00:06:31,360
um there's you know subnets

00:06:28,240 --> 00:06:32,560
load balancers storage so all of these

00:06:31,360 --> 00:06:36,160
could be changing

00:06:32,560 --> 00:06:38,880
one key and the way that we can kind of

00:06:36,160 --> 00:06:42,319
you know try to minimize the downtime

00:06:38,880 --> 00:06:44,160
is to have a copy of your xcd value

00:06:42,319 --> 00:06:48,560
stored locally

00:06:44,160 --> 00:06:51,199
and and once you have that established

00:06:48,560 --> 00:06:52,000
then once the connection comes back up

00:06:51,199 --> 00:06:54,160
or your cert

00:06:52,000 --> 00:06:55,680
or your program your applications

00:06:54,160 --> 00:06:57,840
re-establish that connection with the

00:06:55,680 --> 00:06:59,680
watchers that you have defined

00:06:57,840 --> 00:07:01,360
then you can just push the code that

00:06:59,680 --> 00:07:03,520
you've cached locally

00:07:01,360 --> 00:07:06,400
and push it up so your database is is up

00:07:03,520 --> 00:07:08,960
to date and it minimizes downtime

00:07:06,400 --> 00:07:09,840
um and it makes sure that you know that

00:07:08,960 --> 00:07:13,680
you can come back

00:07:09,840 --> 00:07:17,520
up faster so with that being said

00:07:13,680 --> 00:07:17,520

YouTube URL: https://www.youtube.com/watch?v=ftfZli-BvJ8


