Title: 34 Truths We Learned About Kubernetes and Edge - Saiyam Pathak, Walmart Labs & Karthik Gaekwad
Publication date: 2020-08-27
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

34 Truths We Learned About Kubernetes and Edge - Saiyam Pathak, Walmart Labs & Karthik Gaekwad, Oracle 

Running Kubernetes on the Edge has gained a lot of popularity this year, but it is still complicated to develop, deploy, and maintain at scale.  In this talk, the speakers will demo how to run Kubernetes on Raspberry Pi clusters at scale from their experiences at Walmart Labs and Oracle Cloud. They will demo machine learning use cases on Raspberry Pi's using the K3s distribution.  Further, they will go into details of why K3s might be a good fit for k8s running on edge scenarios, how it is different from the regular kubernetes distribution, and how it works under the hood.   Talk outline: Introduction to kubernetes and Edge computing Problems faced with Edge devices involving kubernetes K3s solutions for the Edge Demo: Running kubernetes on Raspberry Pi's using k3s Challenges using k3s on edge devices Speaker Recommendations for kubernetes on edge

https://sched.co/ZeoY
Captions: 
	00:00:00,000 --> 00:00:03,760
hello everyone welcome to kubecon

00:00:02,800 --> 00:00:06,000
virtual

00:00:03,760 --> 00:00:08,000
and today we are going to talk on 34

00:00:06,000 --> 00:00:10,240
truths about kubernetes and

00:00:08,000 --> 00:00:10,240
edge

00:00:13,200 --> 00:00:16,560
my name is sayam parthak and i am a

00:00:14,880 --> 00:00:17,199
software engineer working at walmart

00:00:16,560 --> 00:00:19,680
labs

00:00:17,199 --> 00:00:20,400
my twitter handler is saying patrick i'm

00:00:19,680 --> 00:00:23,600
cka

00:00:20,400 --> 00:00:26,080
ckad certified i'm a cncf ambassador

00:00:23,600 --> 00:00:26,960
i'm a community leader i run a lot of

00:00:26,080 --> 00:00:29,519
meetup groups

00:00:26,960 --> 00:00:30,240
including rancher influx docker at

00:00:29,519 --> 00:00:32,800
bangalore

00:00:30,240 --> 00:00:34,480
i'm an influx ace and i also run a

00:00:32,800 --> 00:00:36,960
youtube channel where i do lot of live

00:00:34,480 --> 00:00:40,879
streams with other community members

00:00:36,960 --> 00:00:40,879
today i'm joined with karthik

00:00:42,559 --> 00:00:46,079
thanks siam uh my name is karthi gayquad

00:00:44,879 --> 00:00:47,440
and i'm the head of cloud native

00:00:46,079 --> 00:00:49,600
engineering at verica

00:00:47,440 --> 00:00:50,879
um i'm the author of learning kubernetes

00:00:49,600 --> 00:00:52,719
and a bunch of other

00:00:50,879 --> 00:00:54,800
uh cloud native courses on linkedin

00:00:52,719 --> 00:00:57,600
learning uh prior to verica

00:00:54,800 --> 00:00:59,359
uh i built the oracle managed kubernetes

00:00:57,600 --> 00:01:02,079
engine and was a principal developer

00:00:59,359 --> 00:01:04,080
at oracle cloud um i also do a bunch of

00:01:02,079 --> 00:01:05,760
community stuff like devops js austin

00:01:04,080 --> 00:01:07,760
cloud austin all day devops and

00:01:05,760 --> 00:01:10,000
container days i've been in industry for

00:01:07,760 --> 00:01:13,840
a while and you can find me more on

00:01:10,000 --> 00:01:13,840
iteration one on twitter

00:01:16,640 --> 00:01:20,159
today we'll go into more about edge

00:01:18,880 --> 00:01:22,159
computing and talk about the

00:01:20,159 --> 00:01:23,759
intersection of edge and kubernetes

00:01:22,159 --> 00:01:26,159
we'll discuss some of the complexities

00:01:23,759 --> 00:01:29,200
that we see from an edge perspective

00:01:26,159 --> 00:01:30,320
and how kubernetes and k3s helps us from

00:01:29,200 --> 00:01:31,759
that perspective

00:01:30,320 --> 00:01:33,759
we'll talk more about cloud native at

00:01:31,759 --> 00:01:36,560
edge do a really sweet demo

00:01:33,759 --> 00:01:37,520
about how to run k3s on a raspberry pi

00:01:36,560 --> 00:01:39,360
cluster

00:01:37,520 --> 00:01:42,000
talk more about complexities at edge and

00:01:39,360 --> 00:01:44,240
then give you some recommendations

00:01:42,000 --> 00:01:45,280
so what is edge computing if you look at

00:01:44,240 --> 00:01:46,720
wikipedia

00:01:45,280 --> 00:01:48,479
it describes edge computing as a

00:01:46,720 --> 00:01:50,880
distributed computing paradigm

00:01:48,479 --> 00:01:53,119
that brings computation and data storage

00:01:50,880 --> 00:01:54,799
closer to the location where it's needed

00:01:53,119 --> 00:01:56,240
to improve response time and save

00:01:54,799 --> 00:01:58,479
bandwidth

00:01:56,240 --> 00:01:59,920
and also if you look at edge computing

00:01:58,479 --> 00:02:01,920
there's a lot of growth

00:01:59,920 --> 00:02:04,320
from the gartner and forster reviews

00:02:01,920 --> 00:02:06,240
gartner said that by 2023

00:02:04,320 --> 00:02:08,160
there could be more than 20 times as

00:02:06,240 --> 00:02:08,879
many smart devices on the edge of the

00:02:08,160 --> 00:02:12,640
network

00:02:08,879 --> 00:02:15,120
as in conventional i.t roles forester

00:02:12,640 --> 00:02:15,760
actually said that the edge cloud market

00:02:15,120 --> 00:02:19,440
will grow

00:02:15,760 --> 00:02:22,720
at least by 50 percent but

00:02:19,440 --> 00:02:23,280
what does this all really mean being an

00:02:22,720 --> 00:02:24,879
engineer

00:02:23,280 --> 00:02:26,879
i like to break this problem down by

00:02:24,879 --> 00:02:28,800
looking at specific use cases

00:02:26,879 --> 00:02:30,080
in my time at national instruments and

00:02:28,800 --> 00:02:31,760
mentor embedded

00:02:30,080 --> 00:02:33,760
i spent a lot of time looking at the

00:02:31,760 --> 00:02:35,920
intersection between the cloud

00:02:33,760 --> 00:02:36,800
and edge devices or embedded devices in

00:02:35,920 --> 00:02:38,319
general

00:02:36,800 --> 00:02:40,160
one of the my favorite things that used

00:02:38,319 --> 00:02:41,760
to come up a lot of times was

00:02:40,160 --> 00:02:43,519
how do we get all this stuff to work in

00:02:41,760 --> 00:02:46,239
the case of wind turbines so we'll take

00:02:43,519 --> 00:02:48,080
that as a use case

00:02:46,239 --> 00:02:49,599
from a turbine perspective from an

00:02:48,080 --> 00:02:52,400
individual wind turbine

00:02:49,599 --> 00:02:53,440
you want to do a bunch of calculations

00:02:52,400 --> 00:02:55,120
so in this case

00:02:53,440 --> 00:02:56,480
a turbine might want to calculate the

00:02:55,120 --> 00:02:58,480
wind or blade speed

00:02:56,480 --> 00:03:00,000
the efficiency of each blade how much

00:02:58,480 --> 00:03:02,840
power it's consuming

00:03:00,000 --> 00:03:04,319
and what the operating temperature might

00:03:02,840 --> 00:03:06,400
be

00:03:04,319 --> 00:03:08,000
from a control perspective you might

00:03:06,400 --> 00:03:08,720
want to understand what the generator

00:03:08,000 --> 00:03:10,800
speed is

00:03:08,720 --> 00:03:12,640
try and increase it or decrease it look

00:03:10,800 --> 00:03:14,080
at the blade adjustment angle

00:03:12,640 --> 00:03:16,159
so the blade adjustment angle the

00:03:14,080 --> 00:03:18,879
turbines can actually move

00:03:16,159 --> 00:03:20,080
in a horizontal or vertical way and

00:03:18,879 --> 00:03:21,680
there are times when you actually want

00:03:20,080 --> 00:03:23,519
to change that angle to be able to

00:03:21,680 --> 00:03:25,360
generate more electricity

00:03:23,519 --> 00:03:26,959
and also the wind turbine rotation so

00:03:25,360 --> 00:03:27,760
you can actually rotate the turbine left

00:03:26,959 --> 00:03:29,360
to right

00:03:27,760 --> 00:03:30,640
um and you know there are times when you

00:03:29,360 --> 00:03:32,080
might want to do that too because the

00:03:30,640 --> 00:03:33,200
wind direction might be from a different

00:03:32,080 --> 00:03:35,120
kind of perspective

00:03:33,200 --> 00:03:36,480
so those are the different controls that

00:03:35,120 --> 00:03:40,159
you might have from a

00:03:36,480 --> 00:03:41,040
turbine standpoint from a wind farm

00:03:40,159 --> 00:03:43,440
control center

00:03:41,040 --> 00:03:45,200
so the control center is more of a place

00:03:43,440 --> 00:03:45,599
where you might have a lot of folks kind

00:03:45,200 --> 00:03:48,239
of

00:03:45,599 --> 00:03:49,599
looking at your whole turbine farm uh

00:03:48,239 --> 00:03:51,840
from a holistic perspective

00:03:49,599 --> 00:03:52,720
so i threw in a picture of your uh

00:03:51,840 --> 00:03:55,760
hybrid rolla

00:03:52,720 --> 00:03:57,280
renewables control control room and from

00:03:55,760 --> 00:03:58,879
from that perspective you're kind of

00:03:57,280 --> 00:04:00,720
looking at the whole farm

00:03:58,879 --> 00:04:02,480
so you know you might be collecting your

00:04:00,720 --> 00:04:04,480
average turbine speeds in there

00:04:02,480 --> 00:04:06,400
looking at the health status of each of

00:04:04,480 --> 00:04:08,080
your individual turbines

00:04:06,400 --> 00:04:09,680
monitoring performance of the turbines

00:04:08,080 --> 00:04:11,040
you know if there's if there are things

00:04:09,680 --> 00:04:12,080
that might not be working with an

00:04:11,040 --> 00:04:13,599
individual turbine

00:04:12,080 --> 00:04:15,760
you might need to send a technician out

00:04:13,599 --> 00:04:18,000
and go get that fixed etc

00:04:15,760 --> 00:04:19,840
um also monitor the general efficiency

00:04:18,000 --> 00:04:21,280
of the farm is it actually generating a

00:04:19,840 --> 00:04:22,880
lot of electricity

00:04:21,280 --> 00:04:24,400
or you know is there something wrong

00:04:22,880 --> 00:04:27,199
from like a farm perspective

00:04:24,400 --> 00:04:29,040
and then also one of the big goals is to

00:04:27,199 --> 00:04:30,639
be able to generate electricity

00:04:29,040 --> 00:04:32,479
so you know be able to calculate that

00:04:30,639 --> 00:04:35,199
from a whole farm perspective

00:04:32,479 --> 00:04:36,960
so if you kind of look at this from like

00:04:35,199 --> 00:04:39,120
an architecture from a really really

00:04:36,960 --> 00:04:42,240
high level architecture standpoint

00:04:39,120 --> 00:04:43,680
uh from the cloud level you have uh the

00:04:42,240 --> 00:04:46,320
cloud is responsible

00:04:43,680 --> 00:04:47,759
you can think of this more of a um you

00:04:46,320 --> 00:04:49,280
know from the high level from the

00:04:47,759 --> 00:04:50,800
control center perspective

00:04:49,280 --> 00:04:52,960
so it's responsible for the overall

00:04:50,800 --> 00:04:53,680
operations of the farm you know big data

00:04:52,960 --> 00:04:56,320
processing

00:04:53,680 --> 00:04:58,000
so you have a bunch of data coming in to

00:04:56,320 --> 00:04:59,280
your to a wind farm you might want to

00:04:58,000 --> 00:05:00,880
throw that into the cloud to do

00:04:59,280 --> 00:05:02,560
additional processing

00:05:00,880 --> 00:05:03,919
aggregate different data et cetera

00:05:02,560 --> 00:05:06,560
across you know

00:05:03,919 --> 00:05:08,639
a lot of times that you might want to

00:05:06,560 --> 00:05:10,320
use the cloud if you have multiple farms

00:05:08,639 --> 00:05:11,680
you want to do more data aggregation of

00:05:10,320 --> 00:05:14,080
kroger farms

00:05:11,680 --> 00:05:15,680
from an individual farm level uh or from

00:05:14,080 --> 00:05:17,199
your you know control center at a

00:05:15,680 --> 00:05:18,720
specific farm

00:05:17,199 --> 00:05:20,720
that is more responsible for the

00:05:18,720 --> 00:05:21,600
individual farm so all the turbines in

00:05:20,720 --> 00:05:23,280
there

00:05:21,600 --> 00:05:24,720
it's connected to the internet so if you

00:05:23,280 --> 00:05:27,199
have to send data

00:05:24,720 --> 00:05:27,919
up to uh the cloud you're able to do

00:05:27,199 --> 00:05:29,600
that

00:05:27,919 --> 00:05:31,120
uh and also connected to all the

00:05:29,600 --> 00:05:33,759
turbines in the farm as well

00:05:31,120 --> 00:05:35,360
uh typical use case uh that i've seen

00:05:33,759 --> 00:05:36,960
over here is uh the turbines are

00:05:35,360 --> 00:05:38,880
connected via ethernet

00:05:36,960 --> 00:05:40,320
um or you know some other some some

00:05:38,880 --> 00:05:41,759
other kind of way but ethernet is pretty

00:05:40,320 --> 00:05:44,080
popular these days

00:05:41,759 --> 00:05:46,160
um and then going down to the sensor

00:05:44,080 --> 00:05:47,600
level or to the turbine level

00:05:46,160 --> 00:05:49,680
the turbine itself you know you can

00:05:47,600 --> 00:05:52,160
think of it more like an individual iot

00:05:49,680 --> 00:05:54,080
sensor or an iot device

00:05:52,160 --> 00:05:56,400
so in this case for the turbine it's

00:05:54,080 --> 00:05:59,120
responsible for electricity generation

00:05:56,400 --> 00:06:00,560
you know in a safe manner and also

00:05:59,120 --> 00:06:04,479
efficient operations and

00:06:00,560 --> 00:06:04,479
data collection at an individual turbine

00:06:04,840 --> 00:06:08,880
level

00:06:06,560 --> 00:06:10,960
so what are some typical edge issues

00:06:08,880 --> 00:06:13,360
that we've seen

00:06:10,960 --> 00:06:14,639
uh from an edge perspective uh and from

00:06:13,360 --> 00:06:17,039
a device perspective

00:06:14,639 --> 00:06:18,880
uh typical issues are you know battery

00:06:17,039 --> 00:06:19,680
there's a lack of processing power so if

00:06:18,880 --> 00:06:21,680
you want to run

00:06:19,680 --> 00:06:23,440
you know heavyweight calculations etc

00:06:21,680 --> 00:06:25,440
you're just not able to do that

00:06:23,440 --> 00:06:26,880
the code deployments need to be tiny

00:06:25,440 --> 00:06:28,720
because there's not a lot of ram and

00:06:26,880 --> 00:06:30,240
memory on the actual board

00:06:28,720 --> 00:06:32,080
um and then you also have you know

00:06:30,240 --> 00:06:33,680
embedded device concerns so

00:06:32,080 --> 00:06:35,680
like you can actually put something too

00:06:33,680 --> 00:06:36,160
big on there or you know other concerns

00:06:35,680 --> 00:06:38,240
that

00:06:36,160 --> 00:06:40,400
we might not think about from uh you

00:06:38,240 --> 00:06:42,080
know from a cloud perspective

00:06:40,400 --> 00:06:43,680
at the edge level it's all about

00:06:42,080 --> 00:06:46,000
connectivity so you know

00:06:43,680 --> 00:06:49,599
everything connected up uh is it easy to

00:06:46,000 --> 00:06:52,240
connect uh multiple devices to the edge

00:06:49,599 --> 00:06:53,680
is it easy to connect um your control

00:06:52,240 --> 00:06:55,599
center back to internet

00:06:53,680 --> 00:06:58,319
uh comm i put communicate with cloud

00:06:55,599 --> 00:07:00,080
over here so your communication line to

00:06:58,319 --> 00:07:01,360
uh to the internet needs to be pretty

00:07:00,080 --> 00:07:03,360
good

00:07:01,360 --> 00:07:05,039
and then have enough processing power to

00:07:03,360 --> 00:07:07,599
run complex calculations

00:07:05,039 --> 00:07:08,960
um typically this is not a problem but

00:07:07,599 --> 00:07:10,880
this used to be a problem back in the

00:07:08,960 --> 00:07:12,400
day when you had to build out like your

00:07:10,880 --> 00:07:15,039
own kind of data center

00:07:12,400 --> 00:07:16,080
inside of um you know inside of your

00:07:15,039 --> 00:07:18,960
control plane or

00:07:16,080 --> 00:07:20,720
your control tower um and then as

00:07:18,960 --> 00:07:22,639
maintenance of your sensors and farm

00:07:20,720 --> 00:07:23,039
this doesn't happen super often but it

00:07:22,639 --> 00:07:24,560
does

00:07:23,039 --> 00:07:26,880
like your sensors might go offline there

00:07:24,560 --> 00:07:27,840
might be issues with individual turbines

00:07:26,880 --> 00:07:29,520
etc

00:07:27,840 --> 00:07:31,120
and then you need to go and address

00:07:29,520 --> 00:07:32,800
maintenance issues

00:07:31,120 --> 00:07:34,160
off your sensors so that's that's

00:07:32,800 --> 00:07:36,800
something that happens quite a lot on

00:07:34,160 --> 00:07:36,800
the edge level

00:07:37,280 --> 00:07:41,759
so where does kubernetes uh fit in all

00:07:39,440 --> 00:07:43,759
of here

00:07:41,759 --> 00:07:45,680
one of the things about this whole

00:07:43,759 --> 00:07:46,400
ecosystem is that there's actually a lot

00:07:45,680 --> 00:07:48,879
of vendors

00:07:46,400 --> 00:07:50,479
uh but they're very like vendor specific

00:07:48,879 --> 00:07:53,199
and then you have walk into your

00:07:50,479 --> 00:07:54,400
um you know to your iot devices or to

00:07:53,199 --> 00:07:56,000
your edge devices

00:07:54,400 --> 00:07:58,000
so there's a ton of custom solution

00:07:56,000 --> 00:07:59,840
providers so you know you might

00:07:58,000 --> 00:08:01,840
approach a specific provider about hey i

00:07:59,840 --> 00:08:03,199
need like a solution for my wind farm

00:08:01,840 --> 00:08:05,120
like what do you have to provide

00:08:03,199 --> 00:08:06,720
and you can go talk to individual

00:08:05,120 --> 00:08:08,720
vendors that will help you kind of

00:08:06,720 --> 00:08:10,800
um you know build and maintain all of

00:08:08,720 --> 00:08:12,160
these solutions for your whole wind farm

00:08:10,800 --> 00:08:13,840
the one that really nice thing about

00:08:12,160 --> 00:08:14,560
kubernetes and one of the reasons it's

00:08:13,840 --> 00:08:16,560
caught on

00:08:14,560 --> 00:08:18,160
really well in the cloud computing

00:08:16,560 --> 00:08:19,440
market is that it's based on an open

00:08:18,160 --> 00:08:22,080
source ecosystem

00:08:19,440 --> 00:08:23,680
so uh you can have open source uh kind

00:08:22,080 --> 00:08:24,080
of in the cloud you can also have open

00:08:23,680 --> 00:08:26,160
source

00:08:24,080 --> 00:08:27,759
uh you know on the ed side of things and

00:08:26,160 --> 00:08:29,280
it's the greatest thing about kubernetes

00:08:27,759 --> 00:08:30,240
is that it's built for managing many

00:08:29,280 --> 00:08:32,159
devices

00:08:30,240 --> 00:08:34,240
so things like scaling and deployment et

00:08:32,159 --> 00:08:36,399
cetera uh all of those things are

00:08:34,240 --> 00:08:38,839
you know uh are ingrained in the in the

00:08:36,399 --> 00:08:41,279
kubernetes mindset and in the kubernetes

00:08:38,839 --> 00:08:43,120
ecosystem

00:08:41,279 --> 00:08:45,200
so if you look at kubernetes

00:08:43,120 --> 00:08:47,600
distribution specifically built for edge

00:08:45,200 --> 00:08:48,640
there's two two really popular kinds for

00:08:47,600 --> 00:08:51,839
this right now

00:08:48,640 --> 00:08:53,440
there's a cube edge and this k3s

00:08:51,839 --> 00:08:54,880
this presentation will talk more about

00:08:53,440 --> 00:08:56,640
k3s um

00:08:54,880 --> 00:08:58,560
and with that i will hand it back over

00:08:56,640 --> 00:09:00,880
to siam so that was a great introduction

00:08:58,560 --> 00:09:03,200
by karthik on kubernetes and edge

00:09:00,880 --> 00:09:04,560
why kubernetes for edge and what exactly

00:09:03,200 --> 00:09:06,800
is edge

00:09:04,560 --> 00:09:08,399
let's now understand what actually the

00:09:06,800 --> 00:09:11,120
problem is that we as

00:09:08,399 --> 00:09:12,720
engineers are trying to solve so we have

00:09:11,120 --> 00:09:14,320
edge and we want to leverage

00:09:12,720 --> 00:09:16,080
the highly complex ecosystem of

00:09:14,320 --> 00:09:19,040
kubernetes at h

00:09:16,080 --> 00:09:19,519
now in order to do that we have k3s

00:09:19,040 --> 00:09:22,160
which we

00:09:19,519 --> 00:09:23,440
are going to discuss today so k3s is

00:09:22,160 --> 00:09:26,640
another open source

00:09:23,440 --> 00:09:29,120
cncf certified kubernetes distribution

00:09:26,640 --> 00:09:29,680
which has all the powers of kubernetes

00:09:29,120 --> 00:09:33,040
and

00:09:29,680 --> 00:09:33,839
it is extremely suitable for edge so as

00:09:33,040 --> 00:09:35,519
you can see

00:09:33,839 --> 00:09:36,959
it's extremely lightweight and by

00:09:35,519 --> 00:09:39,680
lightweight when i say

00:09:36,959 --> 00:09:40,399
it means it is less than a 50mb binary

00:09:39,680 --> 00:09:43,839
so which is

00:09:40,399 --> 00:09:44,480
huge so it removes all the entry cloud

00:09:43,839 --> 00:09:47,360
providers

00:09:44,480 --> 00:09:50,399
it removes all the entry storage drivers

00:09:47,360 --> 00:09:52,880
and it removes all the alpha features so

00:09:50,399 --> 00:09:55,279
it's basically a very trimmed down code

00:09:52,880 --> 00:09:57,040
based version of the native kubernetes

00:09:55,279 --> 00:09:58,880
distribution

00:09:57,040 --> 00:10:00,480
it's specifically built for arm so when

00:09:58,880 --> 00:10:01,839
the developers were building kubernetes

00:10:00,480 --> 00:10:04,240
so there were two things

00:10:01,839 --> 00:10:06,000
first like we have to make something for

00:10:04,240 --> 00:10:08,160
the edge for the arm devices

00:10:06,000 --> 00:10:10,000
second it should not only be for the

00:10:08,160 --> 00:10:12,480
developer environment it should

00:10:10,000 --> 00:10:14,320
be focused for production yes you can

00:10:12,480 --> 00:10:17,519
definitely use it for developer

00:10:14,320 --> 00:10:18,800
developer scenarios but it is readily

00:10:17,519 --> 00:10:20,800
built for production and

00:10:18,800 --> 00:10:22,640
it is good for all the production ready

00:10:20,800 --> 00:10:25,279
scenarios it has full

00:10:22,640 --> 00:10:26,480
power of kubernetes so when we say that

00:10:25,279 --> 00:10:28,880
the code base is trimmed

00:10:26,480 --> 00:10:30,000
so the power of kubernetes reduces no

00:10:28,880 --> 00:10:31,600
it's not the case

00:10:30,000 --> 00:10:34,640
so the code base is reduced but still

00:10:31,600 --> 00:10:36,399
you get the full power of kubernetes

00:10:34,640 --> 00:10:37,920
and most importantly everything is

00:10:36,399 --> 00:10:40,399
running as a single process

00:10:37,920 --> 00:10:43,040
so which is what makes it so simple

00:10:40,399 --> 00:10:44,800
efficient and fast

00:10:43,040 --> 00:10:47,279
let's quickly dive into the architecture

00:10:44,800 --> 00:10:48,480
of k3s so on the left hand side you have

00:10:47,279 --> 00:10:50,399
the k3 server

00:10:48,480 --> 00:10:52,160
and you on the right you have the k3s

00:10:50,399 --> 00:10:53,920
agent

00:10:52,160 --> 00:10:55,920
now everything is running as a single

00:10:53,920 --> 00:10:58,000
process so it's

00:10:55,920 --> 00:10:59,360
typically the same architecture as you

00:10:58,000 --> 00:11:01,440
have of a kubernetes one

00:10:59,360 --> 00:11:02,640
but here what additional thing is the

00:11:01,440 --> 00:11:05,200
tunnel proxy

00:11:02,640 --> 00:11:05,920
so the agent registers itself to the

00:11:05,200 --> 00:11:07,519
server

00:11:05,920 --> 00:11:09,040
via a tunnel proxy and once the

00:11:07,519 --> 00:11:11,200
connection is established

00:11:09,040 --> 00:11:12,959
after that the communication happens via

00:11:11,200 --> 00:11:14,160
this particular tunnel between the agent

00:11:12,959 --> 00:11:16,959
and the server

00:11:14,160 --> 00:11:17,760
rest it has the escalate database which

00:11:16,959 --> 00:11:20,880
is

00:11:17,760 --> 00:11:21,920
inside the process itself and its cd is

00:11:20,880 --> 00:11:24,480
not used

00:11:21,920 --> 00:11:25,360
in the back end they are using kind and

00:11:24,480 --> 00:11:27,279
it's a plugable

00:11:25,360 --> 00:11:28,800
kind of architecture so if you want to a

00:11:27,279 --> 00:11:31,440
architecture for k3s

00:11:28,800 --> 00:11:34,480
you go for you can go for mysql you can

00:11:31,440 --> 00:11:34,480
go for postgres

00:11:34,640 --> 00:11:39,120
and also it has container d inbuilt so

00:11:37,600 --> 00:11:39,519
you don't have docker you don't have to

00:11:39,120 --> 00:11:42,079
install

00:11:39,519 --> 00:11:43,440
anything so it has the container d

00:11:42,079 --> 00:11:45,200
inbuilt

00:11:43,440 --> 00:11:47,279
it has the traffic as an ingress

00:11:45,200 --> 00:11:49,120
controller as well which helps you give

00:11:47,279 --> 00:11:50,639
the load balancing capabilities

00:11:49,120 --> 00:11:57,839
so that's the high level architecture

00:11:50,639 --> 00:11:57,839
for k3s

00:11:58,480 --> 00:12:01,839
so today what we are going to demo is we

00:12:00,800 --> 00:12:04,800
will be measuring

00:12:01,839 --> 00:12:05,440
the cpu temperature of raspberry pi's

00:12:04,800 --> 00:12:07,760
which

00:12:05,440 --> 00:12:10,240
are running a k3s keyboard is cluster so

00:12:07,760 --> 00:12:12,160
we are having two raspberry pies

00:12:10,240 --> 00:12:13,680
and we'll be installing k3s on top of

00:12:12,160 --> 00:12:16,639
that we'll be

00:12:13,680 --> 00:12:17,519
deploying a demon set a deployment as a

00:12:16,639 --> 00:12:20,560
service for

00:12:17,519 --> 00:12:23,360
influx a deployment as a service for

00:12:20,560 --> 00:12:24,800
grafana in the demon set what we'll be

00:12:23,360 --> 00:12:26,880
using is we'll be scraping the

00:12:24,800 --> 00:12:29,360
temperature of raspberry pi

00:12:26,880 --> 00:12:30,480
sending it to influx then visualizing

00:12:29,360 --> 00:12:34,000
the graphs from

00:12:30,480 --> 00:12:39,839
grafana so let's go

00:12:34,000 --> 00:12:39,839
it's demo time

00:12:40,079 --> 00:12:44,639
so in this particular demo first we'll

00:12:42,240 --> 00:12:46,639
install k3s on raspberry pi's

00:12:44,639 --> 00:12:48,880
so i already have two raspberry pi's

00:12:46,639 --> 00:12:51,040
connected so let's login to both the

00:12:48,880 --> 00:12:53,839
devices

00:12:51,040 --> 00:12:53,839
so let's log in here

00:12:55,279 --> 00:13:01,519
i'll enter my super secret password

00:12:57,680 --> 00:13:01,519
let's log into the another instance

00:13:01,680 --> 00:13:07,839
yes i'm logged in to both the instances

00:13:12,399 --> 00:13:16,399
so now the raspberry pi will be working

00:13:14,320 --> 00:13:18,959
as the k3 server

00:13:16,399 --> 00:13:20,959
and the raspberry pi agent will be the

00:13:18,959 --> 00:13:23,760
agent which will connect to the server

00:13:20,959 --> 00:13:25,120
now k3s installation as i have mentioned

00:13:23,760 --> 00:13:28,720
before as well it's

00:13:25,120 --> 00:13:30,959
pretty simple so it's as simple as

00:13:28,720 --> 00:13:34,720
one command that's it so it's finding

00:13:30,959 --> 00:13:37,279
the stable release it's using b1.18

00:13:34,720 --> 00:13:39,199
and it's downloading the binaries and

00:13:37,279 --> 00:13:40,240
within a couple of seconds your k3s

00:13:39,199 --> 00:13:49,199
server will be

00:13:40,240 --> 00:13:51,519
up and running

00:13:49,199 --> 00:13:52,320
awesome k3s has been successfully

00:13:51,519 --> 00:13:54,560
installed

00:13:52,320 --> 00:13:56,880
now in order to check that we'll just do

00:13:54,560 --> 00:14:03,839
k3s cube ctl

00:13:56,880 --> 00:14:03,839
get nodes

00:14:03,920 --> 00:14:09,360
yay our master node is up but it's not

00:14:07,120 --> 00:14:12,000
ready let's do it once again

00:14:09,360 --> 00:14:13,519
so k3 is cube cdl get nodes our master

00:14:12,000 --> 00:14:17,440
node is ready up and running with

00:14:13,519 --> 00:14:20,720
kubernetes version v1.18.6

00:14:17,440 --> 00:14:22,320
now let's grab the token so now we are

00:14:20,720 --> 00:14:26,959
going to install

00:14:22,320 --> 00:14:26,959
the k3s agent on the raspberry pi agent

00:14:27,760 --> 00:14:35,920
so for that we have to give the k3s url

00:14:32,399 --> 00:14:38,959
which is the server url which is sdtps

00:14:35,920 --> 00:14:42,839
and 2.168.1.129

00:14:38,959 --> 00:14:59,839
6443 then we give the

00:14:42,839 --> 00:14:59,839
k3s token

00:15:03,600 --> 00:15:09,360
and it finds the stable release and

00:15:06,240 --> 00:15:09,360
downloads the version

00:15:09,839 --> 00:15:14,880
and then install the k3s agent so siam

00:15:13,519 --> 00:15:17,279
while this is running i have a question

00:15:14,880 --> 00:15:18,240
for you would we essentially run this

00:15:17,279 --> 00:15:20,000
command

00:15:18,240 --> 00:15:22,399
if we were running this on multiple

00:15:20,000 --> 00:15:22,399
agents

00:15:22,560 --> 00:15:27,839
yes gotcha looks really easy then

00:15:28,800 --> 00:15:32,399
so basically if you have multiple agents

00:15:30,880 --> 00:15:34,880
you just have to run this command and

00:15:32,399 --> 00:15:34,880
it's done

00:15:39,199 --> 00:15:44,000
so that's it the k3s agent has also

00:15:42,240 --> 00:15:46,639
started now you can check the

00:15:44,000 --> 00:15:49,120
service or you can directly go to the

00:15:46,639 --> 00:15:55,839
server one and do a k3s

00:15:49,120 --> 00:15:55,839
cube cdl get notes

00:15:56,560 --> 00:16:02,079
and what we see over here is magically

00:15:59,519 --> 00:16:03,519
in matter of minutes we have our k3s

00:16:02,079 --> 00:16:06,240
server and the kts

00:16:03,519 --> 00:16:09,839
agent up and running now we do not need

00:16:06,240 --> 00:16:09,839
this window

00:16:11,440 --> 00:16:14,639
so let's move over to the code which we

00:16:13,120 --> 00:16:16,399
are going to deploy today

00:16:14,639 --> 00:16:18,880
so this is the github repository which

00:16:16,399 --> 00:16:21,360
is available

00:16:18,880 --> 00:16:23,199
so as shown in the demo diagram so what

00:16:21,360 --> 00:16:26,480
we are going to do is we are going to

00:16:23,199 --> 00:16:26,480
have running a daemon set

00:16:27,920 --> 00:16:31,199
so we are going to deploy these three

00:16:29,920 --> 00:16:34,560
files which is a demonstration

00:16:31,199 --> 00:16:36,720
a grafana yaml and an influx yama so in

00:16:34,560 --> 00:16:38,959
the demon set

00:16:36,720 --> 00:16:41,040
we just have an image and i will walk

00:16:38,959 --> 00:16:42,880
you through the code

00:16:41,040 --> 00:16:45,680
so daemon said is something which runs

00:16:42,880 --> 00:16:45,680
on all the nodes

00:16:46,079 --> 00:16:54,240
so the grafana is having a deployment

00:16:51,519 --> 00:16:54,240
and a service

00:16:55,519 --> 00:17:01,759
and it is using grafana docker image

00:16:58,639 --> 00:17:04,240
with the container port 3000

00:17:01,759 --> 00:17:05,760
similarly for influx we have a

00:17:04,240 --> 00:17:10,319
deployment for influx

00:17:05,760 --> 00:17:14,000
influx 1.7 and we have port 8086

00:17:10,319 --> 00:17:14,000
and we have exposed the service as node

00:17:16,839 --> 00:17:22,400
port

00:17:18,000 --> 00:17:22,400
now what exactly the code is doing

00:17:24,240 --> 00:17:28,480
so we are taking the influx db client

00:17:28,559 --> 00:17:32,000
we are establishing the client we are

00:17:30,559 --> 00:17:34,400
creating the database

00:17:32,000 --> 00:17:36,720
we are switching to that database we are

00:17:34,400 --> 00:17:38,799
having a timestamp

00:17:36,720 --> 00:17:42,640
now this particular file gives you the

00:17:38,799 --> 00:17:46,000
temperature the cpu temperature updated

00:17:42,640 --> 00:17:48,240
all times

00:17:46,000 --> 00:17:50,720
we create a json body where we send all

00:17:48,240 --> 00:17:54,240
the tags in the fields

00:17:50,720 --> 00:17:55,600
then we write the json body to influx

00:17:54,240 --> 00:17:59,039
and this code is running every five

00:17:55,600 --> 00:18:00,880
seconds so this is what the code is

00:17:59,039 --> 00:18:04,080
so now let's clone the repository and

00:18:00,880 --> 00:18:04,080
deploy all the files

00:18:05,520 --> 00:18:09,200
so let's do a git clone

00:18:10,000 --> 00:18:17,840
and the clone is already done so we cd

00:18:13,280 --> 00:18:22,640
into the folder video ls

00:18:17,840 --> 00:18:22,640
and we do a k3s cube cdl apply

00:18:22,880 --> 00:18:25,760
also deploy

00:18:26,400 --> 00:18:31,200
so all the aml files should be deployed

00:18:29,280 --> 00:18:31,760
so it is create it has created the demon

00:18:31,200 --> 00:18:33,360
set

00:18:31,760 --> 00:18:35,360
it has created the deployment and the

00:18:33,360 --> 00:18:37,360
service for grafana

00:18:35,360 --> 00:18:38,480
it has created the deployment and the

00:18:37,360 --> 00:18:42,559
service for

00:18:38,480 --> 00:18:47,600
influx and now

00:18:42,559 --> 00:18:47,600
if we see k3s cube cdl get parts

00:18:48,640 --> 00:18:52,400
we can see all the pods are in running

00:18:50,880 --> 00:18:57,840
state

00:18:52,400 --> 00:18:57,840
so let's quickly see the services

00:18:58,400 --> 00:19:02,160
so our grafana is running on three one

00:19:00,400 --> 00:19:11,840
seven one two

00:19:02,160 --> 00:19:11,840
so let's go back and open grafana ui

00:19:13,440 --> 00:19:20,320
so we are we have our grafana loading

00:19:16,720 --> 00:19:24,960
so we quickly put the username

00:19:20,320 --> 00:19:27,360
password we skip it

00:19:24,960 --> 00:19:29,280
so we have our grafana let's quickly add

00:19:27,360 --> 00:19:31,280
the data source

00:19:29,280 --> 00:19:33,200
so since we have influx so we'll choose

00:19:31,280 --> 00:19:37,440
influx which is a native data source

00:19:33,200 --> 00:19:39,840
in grafana we'll put the

00:19:37,440 --> 00:19:39,840
url

00:19:47,760 --> 00:19:52,960
and we have created cubecon as a

00:19:50,840 --> 00:19:56,000
database

00:19:52,960 --> 00:19:56,960
we save and test and data source is

00:19:56,000 --> 00:19:58,799
working

00:19:56,960 --> 00:20:00,400
now let's go ahead and create a

00:19:58,799 --> 00:20:03,840
dashboard

00:20:00,400 --> 00:20:05,200
add new panel we select the measurement

00:20:03,840 --> 00:20:06,640
which is temp

00:20:05,200 --> 00:20:08,799
we select the value which is the

00:20:06,640 --> 00:20:13,280
temperature

00:20:08,799 --> 00:20:15,520
and we add a tag which is the system

00:20:13,280 --> 00:20:17,919
and let's do some filtering with the

00:20:15,520 --> 00:20:17,919
bars

00:20:18,080 --> 00:20:24,240
and let's expand this particular

00:20:21,120 --> 00:20:26,960
area more so that we have some data

00:20:24,240 --> 00:20:28,720
and you can see we have the temperature

00:20:26,960 --> 00:20:30,799
coming from raspberry pi which is the

00:20:28,720 --> 00:20:31,840
servo and the raspberry pi agent which

00:20:30,799 --> 00:20:33,360
is the agent

00:20:31,840 --> 00:20:36,240
and for both we are having the

00:20:33,360 --> 00:20:40,799
temperature 74 degrees

00:20:36,240 --> 00:20:42,480
and we have 78 79 degrees over here

00:20:40,799 --> 00:20:44,159
so for all we are getting all the

00:20:42,480 --> 00:20:45,600
metrics we everything is getting

00:20:44,159 --> 00:20:47,440
captured

00:20:45,600 --> 00:20:48,880
and on top of it we can create some

00:20:47,440 --> 00:20:51,760
alerts

00:20:48,880 --> 00:20:53,280
so if the temperature goes above maybe

00:20:51,760 --> 00:20:56,080
80 percent

00:20:53,280 --> 00:20:57,919
so you get an alert and you can have

00:20:56,080 --> 00:21:00,080
different notifications

00:20:57,919 --> 00:21:01,120
so this is just one use case where what

00:21:00,080 --> 00:21:04,159
we have seen is

00:21:01,120 --> 00:21:05,840
we have our temperature sensing from a

00:21:04,159 --> 00:21:08,000
raspberry pi now this particular use

00:21:05,840 --> 00:21:08,640
case can be extended to n number of

00:21:08,000 --> 00:21:10,640
sensors

00:21:08,640 --> 00:21:12,799
like karthik has stock for windmill

00:21:10,640 --> 00:21:15,520
where temperature is an essential part

00:21:12,799 --> 00:21:16,480
and can be extended to other sensors and

00:21:15,520 --> 00:21:18,240
have

00:21:16,480 --> 00:21:20,080
all things in place so you have one

00:21:18,240 --> 00:21:20,720
stable thing ready and now you can add

00:21:20,080 --> 00:21:22,000
top of

00:21:20,720 --> 00:21:23,840
on top of it you can add different

00:21:22,000 --> 00:21:25,600
sensing and get all the data

00:21:23,840 --> 00:21:27,600
and do machine learning on top of it

00:21:25,600 --> 00:21:28,320
statistical analysis on top of it and

00:21:27,600 --> 00:21:31,280
get

00:21:28,320 --> 00:21:31,840
valuable insights and forecasting so

00:21:31,280 --> 00:21:33,600
that's

00:21:31,840 --> 00:21:36,480
it for today's demo hope you like it

00:21:33,600 --> 00:21:36,480
back to you karthik

00:21:36,640 --> 00:21:40,480
cool thanks siam that was awesome um not

00:21:38,880 --> 00:21:41,120
a lot of times dude demos actually work

00:21:40,480 --> 00:21:44,159
the first time

00:21:41,120 --> 00:21:47,679
and so you know this is pretty cool okay

00:21:44,159 --> 00:21:47,679
i'm going to share my screen again

00:21:55,600 --> 00:21:59,919
alright so in our demo sam talked

00:21:58,080 --> 00:22:01,840
through how things actually worked

00:21:59,919 --> 00:22:03,039
um on the k3s cluster that we had

00:22:01,840 --> 00:22:05,280
created uh

00:22:03,039 --> 00:22:07,039
let's look at a couple of challenges uh

00:22:05,280 --> 00:22:08,080
that we've seen from an edge computing

00:22:07,039 --> 00:22:10,080
standpoint

00:22:08,080 --> 00:22:12,640
uh and then we'll you know open up for

00:22:10,080 --> 00:22:15,440
questions uh at the end of this talk

00:22:12,640 --> 00:22:16,880
so from a from a challenges perspective

00:22:15,440 --> 00:22:18,880
and from a future perspective

00:22:16,880 --> 00:22:21,520
you know you have uh one of the the

00:22:18,880 --> 00:22:24,400
biggest thing in this whole sector is

00:22:21,520 --> 00:22:26,640
the idea of vendor lock-in so that's the

00:22:24,400 --> 00:22:28,240
value premise of using kubernetes

00:22:26,640 --> 00:22:30,000
at edge solutions you know kind of like

00:22:28,240 --> 00:22:33,360
k3s or

00:22:30,000 --> 00:22:33,919
cube edge as well one thing that we

00:22:33,360 --> 00:22:35,760
still have

00:22:33,919 --> 00:22:37,679
some more work to do i think from a

00:22:35,760 --> 00:22:39,200
kubernetes edge perspective is more

00:22:37,679 --> 00:22:41,200
hardware integration

00:22:39,200 --> 00:22:43,520
so you saw that it was pretty seamless

00:22:41,200 --> 00:22:45,760
to work with raspberry pi but what about

00:22:43,520 --> 00:22:46,640
for specific iot devices that you might

00:22:45,760 --> 00:22:50,559
have

00:22:46,640 --> 00:22:52,000
you know you might be building um and um

00:22:50,559 --> 00:22:54,720
you know building and testing out your

00:22:52,000 --> 00:22:55,679
specific edge devices or your iot

00:22:54,720 --> 00:22:58,240
devices

00:22:55,679 --> 00:22:59,760
uh there might be work or some missing

00:22:58,240 --> 00:23:02,799
things that you might have to do

00:22:59,760 --> 00:23:03,600
from a k-3s or cube edge perspective the

00:23:02,799 --> 00:23:06,799
biggest thing

00:23:03,600 --> 00:23:08,880
i'll hear also is cultural challenges

00:23:06,799 --> 00:23:10,000
and you know we've kind of seen this uh

00:23:08,880 --> 00:23:11,280
as well with just

00:23:10,000 --> 00:23:13,360
back-end developers and front-end

00:23:11,280 --> 00:23:15,679
developers but also

00:23:13,360 --> 00:23:17,760
um the folks actually working on the iot

00:23:15,679 --> 00:23:19,919
side uh those are embedded developers

00:23:17,760 --> 00:23:21,600
and their mindset is very different from

00:23:19,919 --> 00:23:23,120
kind of what we think about from a cloud

00:23:21,600 --> 00:23:24,880
native perspective or from a cloud

00:23:23,120 --> 00:23:27,120
native developer perspective

00:23:24,880 --> 00:23:28,400
so it's a different tech stack uh c is

00:23:27,120 --> 00:23:30,640
very common

00:23:28,400 --> 00:23:32,080
uh from that tech stack over there so

00:23:30,640 --> 00:23:35,280
and then also

00:23:32,080 --> 00:23:38,159
uh for for us uh in the cloud native

00:23:35,280 --> 00:23:39,679
world uh things like ci and cd

00:23:38,159 --> 00:23:40,960
continuous integration continuous

00:23:39,679 --> 00:23:42,960
deployment delivery

00:23:40,960 --> 00:23:44,559
those things are are very normal and you

00:23:42,960 --> 00:23:47,039
know those are things that we think are

00:23:44,559 --> 00:23:48,480
about upfront but from an embedded

00:23:47,039 --> 00:23:49,039
developer standpoint they might not even

00:23:48,480 --> 00:23:51,760
know what

00:23:49,039 --> 00:23:53,440
ci or cd might be so there are there are

00:23:51,760 --> 00:23:55,440
challenges that you'll end up facing

00:23:53,440 --> 00:23:57,600
uh there when you kind of bring two

00:23:55,440 --> 00:23:59,919
disparate sets of developers together

00:23:57,600 --> 00:24:01,120
um also understanding your architectural

00:23:59,919 --> 00:24:02,799
needs so

00:24:01,120 --> 00:24:04,720
you know we kind of talked about

00:24:02,799 --> 00:24:06,400
raspberry pi and how to run k3s and

00:24:04,720 --> 00:24:07,840
raspberry pi we also talked about the

00:24:06,400 --> 00:24:10,720
wind farm example

00:24:07,840 --> 00:24:11,120
so you know from uh if you take like a

00:24:10,720 --> 00:24:13,360
00:24:11,120 --> 00:24:14,320
000 foot view on this kubernetes is

00:24:13,360 --> 00:24:17,039
really good for

00:24:14,320 --> 00:24:18,080
cloud for cloud and data center compute

00:24:17,039 --> 00:24:19,520
instances

00:24:18,080 --> 00:24:21,360
so you're managing your whole data

00:24:19,520 --> 00:24:22,640
center with kubernetes uh that's why

00:24:21,360 --> 00:24:24,480
it's really popular

00:24:22,640 --> 00:24:26,080
uh cube edge from our reading is really

00:24:24,480 --> 00:24:27,440
good for you know

00:24:26,080 --> 00:24:28,880
when you wanna have a cloud control

00:24:27,440 --> 00:24:29,679
plane and you wanna have disparate edge

00:24:28,880 --> 00:24:31,360
devices

00:24:29,679 --> 00:24:33,120
or instances uh it's great for

00:24:31,360 --> 00:24:35,200
controlling that so think of the

00:24:33,120 --> 00:24:36,559
you know if you're using uh nest kind of

00:24:35,200 --> 00:24:38,960
devices etc

00:24:36,559 --> 00:24:40,880
where they're all able to connect to the

00:24:38,960 --> 00:24:42,240
cloud or to a cloud control plane

00:24:40,880 --> 00:24:44,159
cube edge would work really well over

00:24:42,240 --> 00:24:46,559
there k3s is also really good for

00:24:44,159 --> 00:24:48,480
the cloud use cases and edge as well as

00:24:46,559 --> 00:24:50,159
well for air gap environments

00:24:48,480 --> 00:24:52,000
so in the scenario where you have a wind

00:24:50,159 --> 00:24:53,600
farm and you know your actual turbines

00:24:52,000 --> 00:24:55,360
don't have access to the internet

00:24:53,600 --> 00:24:57,440
but they're still connected up to a

00:24:55,360 --> 00:24:57,760
local network uh it would work pretty

00:24:57,440 --> 00:24:59,919
well

00:24:57,760 --> 00:25:01,360
in those environments as well where you

00:24:59,919 --> 00:25:03,919
have more kind of air gap kind of

00:25:01,360 --> 00:25:03,919
scenarios

00:25:04,000 --> 00:25:08,320
well thank you kante now let's dive into

00:25:06,640 --> 00:25:09,440
the future discussion on the state of

00:25:08,320 --> 00:25:12,480
kubernetes and

00:25:09,440 --> 00:25:13,200
edge so let's make it a informal

00:25:12,480 --> 00:25:15,679
discussion

00:25:13,200 --> 00:25:16,720
and not a very formal powerpoint kind of

00:25:15,679 --> 00:25:20,159
discussion

00:25:16,720 --> 00:25:21,679
yep so i think that kubernetes will play

00:25:20,159 --> 00:25:24,559
a very important role

00:25:21,679 --> 00:25:25,200
for edge why because people and the

00:25:24,559 --> 00:25:27,520
companies

00:25:25,200 --> 00:25:29,200
are transitioning into the

00:25:27,520 --> 00:25:31,679
virtualization world and

00:25:29,200 --> 00:25:33,440
building apps for cloud native ecosystem

00:25:31,679 --> 00:25:35,679
and they want to

00:25:33,440 --> 00:25:36,559
change the apps change the versions all

00:25:35,679 --> 00:25:38,640
that stuff

00:25:36,559 --> 00:25:40,080
and communities will definitely play a

00:25:38,640 --> 00:25:43,120
very important role in

00:25:40,080 --> 00:25:45,840
handling these operations uh

00:25:43,120 --> 00:25:46,400
speaking about k3s as we have already

00:25:45,840 --> 00:25:49,360
spoken

00:25:46,400 --> 00:25:51,279
like k3s is extremely lightweight and it

00:25:49,360 --> 00:25:51,600
gives you the full power of kubernetes

00:25:51,279 --> 00:25:54,480
at

00:25:51,600 --> 00:25:56,240
edge so it becomes extremely important

00:25:54,480 --> 00:25:58,960
that we should know

00:25:56,240 --> 00:25:59,679
where k3s stands from a future point of

00:25:58,960 --> 00:26:03,200
view

00:25:59,679 --> 00:26:05,200
uh since the rancher acquisition by suse

00:26:03,200 --> 00:26:06,240
so we have seen that there have been

00:26:05,200 --> 00:26:09,679
questions around like

00:26:06,240 --> 00:26:11,840
how this k3s product will be going on

00:26:09,679 --> 00:26:12,960
but it has been made very clear by the

00:26:11,840 --> 00:26:15,279
leadership from

00:26:12,960 --> 00:26:16,480
rancher itself that k3s will be their go

00:26:15,279 --> 00:26:19,039
forward product and

00:26:16,480 --> 00:26:20,799
it will remain open source and people

00:26:19,039 --> 00:26:24,320
will keep on contributing

00:26:20,799 --> 00:26:26,640
to k3s now if you go by the stats uh i

00:26:24,320 --> 00:26:28,480
see that it has more than 13 000 github

00:26:26,640 --> 00:26:31,440
stars which is pretty amazing

00:26:28,480 --> 00:26:31,919
uh it has a wide community adoption and

00:26:31,440 --> 00:26:34,000
people

00:26:31,919 --> 00:26:36,480
actually love it so that's why they have

00:26:34,000 --> 00:26:39,679
built products on top of k3s

00:26:36,480 --> 00:26:40,000
so if you see a open source enthusiast

00:26:39,679 --> 00:26:43,039
like

00:26:40,000 --> 00:26:44,400
alex uh he built uh k3sf which is

00:26:43,039 --> 00:26:46,720
pronounced as ketchup

00:26:44,400 --> 00:26:49,039
for so it's basically bootstrapping the

00:26:46,720 --> 00:26:51,360
k3s cluster in less than a minute

00:26:49,039 --> 00:26:53,600
so so that's that's the adoption that we

00:26:51,360 --> 00:26:56,559
have then there are a few companies like

00:26:53,600 --> 00:26:58,240
sivo uh who is who built up the first

00:26:56,559 --> 00:27:01,039
ever managed k3s

00:26:58,240 --> 00:27:04,000
uh service so so people have already

00:27:01,039 --> 00:27:06,080
started looking k3s as a stable product

00:27:04,000 --> 00:27:07,520
and it is always in line with the

00:27:06,080 --> 00:27:10,000
upstream kubernetes uh

00:27:07,520 --> 00:27:12,480
updates so whenever the version a new

00:27:10,000 --> 00:27:12,960
version comes okay 3s team and the open

00:27:12,480 --> 00:27:15,440
source

00:27:12,960 --> 00:27:17,919
folks they work and make it you know

00:27:15,440 --> 00:27:20,880
matching the upstream kubernetes version

00:27:17,919 --> 00:27:21,919
so i think yes uh k3s itself has a very

00:27:20,880 --> 00:27:23,919
bright future

00:27:21,919 --> 00:27:25,520
and people are making they have their

00:27:23,919 --> 00:27:27,840
road maps very clear

00:27:25,520 --> 00:27:29,120
and the issues the pull requests say it

00:27:27,840 --> 00:27:31,600
all uh so

00:27:29,120 --> 00:27:32,559
k3s definitely has a bright future and

00:27:31,600 --> 00:27:34,960
with this

00:27:32,559 --> 00:27:36,640
uh definitely it will be used for edge

00:27:34,960 --> 00:27:37,440
because that was a primary use case for

00:27:36,640 --> 00:27:39,679
g3s

00:27:37,440 --> 00:27:40,720
so edge computing will definitely be

00:27:39,679 --> 00:27:42,559
very uh

00:27:40,720 --> 00:27:44,320
powerful become very powerful with the

00:27:42,559 --> 00:27:46,559
usage of k3s

00:27:44,320 --> 00:27:48,559
so uh with that what do you think

00:27:46,559 --> 00:27:49,919
karthik uh like where does the future

00:27:48,559 --> 00:27:52,399
stand from kubernetes and its

00:27:49,919 --> 00:27:52,399
perspective

00:27:52,480 --> 00:27:56,880
i totally agree with you um i was kind

00:27:54,480 --> 00:27:58,880
of trying to think about whether

00:27:56,880 --> 00:28:00,720
um you know to kind of go deeper into

00:27:58,880 --> 00:28:02,480
the technology or think of it from a

00:28:00,720 --> 00:28:04,240
high level perspective

00:28:02,480 --> 00:28:06,320
um and i think from you know from a high

00:28:04,240 --> 00:28:08,159
level perspective from a tech standpoint

00:28:06,320 --> 00:28:09,760
i think we're there today

00:28:08,159 --> 00:28:12,080
uh what you know whether it's k3s

00:28:09,760 --> 00:28:13,039
whether it's cube edge i think the idea

00:28:12,080 --> 00:28:15,120
of using

00:28:13,039 --> 00:28:17,279
uh something like kubernetes that helps

00:28:15,120 --> 00:28:20,799
you

00:28:17,279 --> 00:28:23,440
that basically helps you uh take

00:28:20,799 --> 00:28:25,039
you know a single device put basically

00:28:23,440 --> 00:28:26,799
an operating system on there

00:28:25,039 --> 00:28:28,640
and then scale that for you know

00:28:26,799 --> 00:28:31,440
hundreds um like

00:28:28,640 --> 00:28:31,840
nodes of many clusters um i think that

00:28:31,440 --> 00:28:33,840
it's

00:28:31,840 --> 00:28:36,159
pretty proven technology today from a k2

00:28:33,840 --> 00:28:38,799
standpoint from a cube edge tent however

00:28:36,159 --> 00:28:39,679
um so i think we have solutions which is

00:28:38,799 --> 00:28:42,159
great

00:28:39,679 --> 00:28:42,960
um i mentioned before that the the

00:28:42,159 --> 00:28:44,720
challenge

00:28:42,960 --> 00:28:47,279
i think that we will face at least in

00:28:44,720 --> 00:28:50,559
this next year next couple years

00:28:47,279 --> 00:28:52,240
is to understand what the problems are

00:28:50,559 --> 00:28:54,240
understand what the real problems are

00:28:52,240 --> 00:28:56,640
from an embedded developer standpoint

00:28:54,240 --> 00:28:58,240
so a lot of it you know comes from like

00:28:56,640 --> 00:28:58,960
bridging communities right because i

00:28:58,240 --> 00:29:01,039
think

00:28:58,960 --> 00:29:02,080
the communities that we have from a tech

00:29:01,039 --> 00:29:04,080
standpoint like

00:29:02,080 --> 00:29:05,679
you and i we're squarely in like the

00:29:04,080 --> 00:29:06,640
cloud native space and we're like yeah

00:29:05,679 --> 00:29:08,480
kubernetes

00:29:06,640 --> 00:29:10,000
we understand it we might not know

00:29:08,480 --> 00:29:10,640
everything about it but i think we know

00:29:10,000 --> 00:29:12,640
like

00:29:10,640 --> 00:29:14,080
uh from like a pretty good uh

00:29:12,640 --> 00:29:15,840
perspective of like how the how

00:29:14,080 --> 00:29:19,279
everything works architectural

00:29:15,840 --> 00:29:21,039
textural uh implementation whatever

00:29:19,279 --> 00:29:23,440
but i don't think anybody in the

00:29:21,039 --> 00:29:25,279
embedded space uh really knows about

00:29:23,440 --> 00:29:27,039
uh a lot of the stuff that you know

00:29:25,279 --> 00:29:28,480
we're we're kind of coming out with

00:29:27,039 --> 00:29:30,480
whether it's k3s

00:29:28,480 --> 00:29:32,559
whether it's cube edge whether it's just

00:29:30,480 --> 00:29:34,720
even kubernetes or prometheus or

00:29:32,559 --> 00:29:36,159
like any of the things in our ecosystem

00:29:34,720 --> 00:29:39,360
so uh

00:29:36,159 --> 00:29:40,960
the the the challenge will be

00:29:39,360 --> 00:29:42,559
uh you know advocating a lot of these

00:29:40,960 --> 00:29:44,480
platforms to folks that are actually

00:29:42,559 --> 00:29:46,080
writing embedded code and being like hey

00:29:44,480 --> 00:29:47,919
uh i know you're trying to solve these

00:29:46,080 --> 00:29:48,399
mqtt problems and you're trying to write

00:29:47,919 --> 00:29:51,200
this

00:29:48,399 --> 00:29:52,080
this mqtt code uh specifically for your

00:29:51,200 --> 00:29:54,159
cis

00:29:52,080 --> 00:29:55,360
uh but did you know there's like a tool

00:29:54,159 --> 00:29:57,039
that you can use to

00:29:55,360 --> 00:29:58,399
or not not to about a platform that you

00:29:57,039 --> 00:29:59,200
can use to kind of manage all of this

00:29:58,399 --> 00:30:01,919
stuff

00:29:59,200 --> 00:30:02,240
uh by default um and you know kind of

00:30:01,919 --> 00:30:05,279
get

00:30:02,240 --> 00:30:06,799
get some kind of reception from what um

00:30:05,279 --> 00:30:08,640
you know what what folks who are

00:30:06,799 --> 00:30:11,039
actually in that ecosystem

00:30:08,640 --> 00:30:12,480
um have so understand you know kind of

00:30:11,039 --> 00:30:13,840
understanding their pain points and then

00:30:12,480 --> 00:30:16,320
bringing it back

00:30:13,840 --> 00:30:18,399
um and then you know building on the the

00:30:16,320 --> 00:30:19,679
next generation of what k3s or cube edge

00:30:18,399 --> 00:30:22,640
is going to become

00:30:19,679 --> 00:30:25,039
uh and i think we will probably end up

00:30:22,640 --> 00:30:27,760
finding things that we might have missed

00:30:25,039 --> 00:30:28,240
uh from a first pass whether it's hey we

00:30:27,760 --> 00:30:30,320
need

00:30:28,240 --> 00:30:32,000
you know uh it's great that it works

00:30:30,320 --> 00:30:33,760
with the rest apis

00:30:32,000 --> 00:30:35,200
but really uh we need all the

00:30:33,760 --> 00:30:37,600
communication to work with

00:30:35,200 --> 00:30:39,520
uh you know mqtt or you know we need

00:30:37,600 --> 00:30:41,279
something even more low power like

00:30:39,520 --> 00:30:43,360
bluetooth or something like that

00:30:41,279 --> 00:30:44,960
uh and we have to write you know uh more

00:30:43,360 --> 00:30:47,360
more apis that

00:30:44,960 --> 00:30:49,200
help communicate uh you know through a

00:30:47,360 --> 00:30:51,919
cluster with bluetooth or something

00:30:49,200 --> 00:30:53,919
something something similar to that so

00:30:51,919 --> 00:30:55,360
um you know it might sound kind of lofty

00:30:53,919 --> 00:30:58,399
but it's trying to figure out

00:30:55,360 --> 00:30:59,200
how we can bring uh embedded engineers

00:30:58,399 --> 00:31:01,120
that are

00:30:59,200 --> 00:31:02,960
kind of in their own ecosystem might be

00:31:01,120 --> 00:31:03,679
in their own silo but try and bring them

00:31:02,960 --> 00:31:06,159
into

00:31:03,679 --> 00:31:07,440
kind of our cloud native tribe um and i

00:31:06,159 --> 00:31:08,640
think that's where like the next

00:31:07,440 --> 00:31:10,960
generation of problems

00:31:08,640 --> 00:31:12,880
for us will be uh it's it's not

00:31:10,960 --> 00:31:14,480
necessarily like technology

00:31:12,880 --> 00:31:16,559
but it'll you know it'll end up being

00:31:14,480 --> 00:31:18,799
more of like hey we're

00:31:16,559 --> 00:31:20,000
we built we built this huge community of

00:31:18,799 --> 00:31:21,919
folks that are

00:31:20,000 --> 00:31:23,279
uh you know that are cloud native that

00:31:21,919 --> 00:31:24,960
understand how uh

00:31:23,279 --> 00:31:26,799
you know to deploy and run applications

00:31:24,960 --> 00:31:29,600
in the cloud but now we're trying to

00:31:26,799 --> 00:31:30,080
extend that away uh extend that into the

00:31:29,600 --> 00:31:32,640
uh

00:31:30,080 --> 00:31:34,240
ecosystem of you know embedded as well

00:31:32,640 --> 00:31:36,399
so that's kind of where i think we'll at

00:31:34,240 --> 00:31:38,399
least for the next couple years we'll go

00:31:36,399 --> 00:31:40,399
um because i feel like we have something

00:31:38,399 --> 00:31:42,240
pretty good uh in our space

00:31:40,399 --> 00:31:43,600
uh and you know let's let's take it

00:31:42,240 --> 00:31:46,000
forward and figure out what we can

00:31:43,600 --> 00:31:47,840
actually do with it

00:31:46,000 --> 00:31:49,760
yeah i completely agree to all those

00:31:47,840 --> 00:31:52,480
points karthik and even

00:31:49,760 --> 00:31:53,120
even i feel like you know the use case

00:31:52,480 --> 00:31:54,880
is like

00:31:53,120 --> 00:31:57,760
people want to do machine learning at

00:31:54,880 --> 00:31:59,600
edge like capturing billions of images

00:31:57,760 --> 00:32:01,760
and not sending them to cloud

00:31:59,600 --> 00:32:04,240
due to latency issues and all that so so

00:32:01,760 --> 00:32:06,320
they need solutions which can be

00:32:04,240 --> 00:32:08,000
fit into their specific small data

00:32:06,320 --> 00:32:09,919
centers and they can do

00:32:08,000 --> 00:32:12,000
uh you know a machine learning on top of

00:32:09,919 --> 00:32:14,320
that anomaly detection on top of that

00:32:12,000 --> 00:32:16,320
whether you take example of a few

00:32:14,320 --> 00:32:16,799
generators and finding the defects from

00:32:16,320 --> 00:32:19,600
that

00:32:16,799 --> 00:32:20,320
or you take example of the cctv footages

00:32:19,600 --> 00:32:22,240
and you know

00:32:20,320 --> 00:32:24,159
doing the capturing the per second

00:32:22,240 --> 00:32:26,880
images and doing ml

00:32:24,159 --> 00:32:27,440
ai on top of that so yes the there's a

00:32:26,880 --> 00:32:30,240
huge

00:32:27,440 --> 00:32:31,440
need for the cloud native uh ecosystem

00:32:30,240 --> 00:32:33,279
over there and

00:32:31,440 --> 00:32:35,440
uh the engineers who are building these

00:32:33,279 --> 00:32:37,760
devices they need to understand

00:32:35,440 --> 00:32:39,279
uh like these might be the challenges

00:32:37,760 --> 00:32:42,399
and this might be the right

00:32:39,279 --> 00:32:43,600
hardware to create even so that that

00:32:42,399 --> 00:32:45,760
particular

00:32:43,600 --> 00:32:49,039
portion fits well with the cloud native

00:32:45,760 --> 00:32:49,039
tech stack that we have today

00:32:49,279 --> 00:32:52,720
sounds like it sounds like we're um if

00:32:52,000 --> 00:32:53,919
folks can

00:32:52,720 --> 00:32:55,120
you know come up with like good

00:32:53,919 --> 00:32:56,480
reference architectures for what

00:32:55,120 --> 00:32:57,840
everybody else is doing

00:32:56,480 --> 00:33:00,240
then we might actually be able to do

00:32:57,840 --> 00:33:04,080
some cool things in this space too

00:33:00,240 --> 00:33:04,080
yeah totally agree

00:33:04,720 --> 00:33:10,480
awesome well um sam do you have any

00:33:08,480 --> 00:33:11,760
um i think we're probably almost close

00:33:10,480 --> 00:33:13,840
to time uh do you

00:33:11,760 --> 00:33:16,559
any uh last last minute thoughts that

00:33:13,840 --> 00:33:19,919
you have before we close down

00:33:16,559 --> 00:33:21,919
uh no i i think like uh we did a

00:33:19,919 --> 00:33:24,000
small demo today so i would like i would

00:33:21,919 --> 00:33:26,720
encourage all the attendees to go back

00:33:24,000 --> 00:33:28,880
and try something out and let us know

00:33:26,720 --> 00:33:30,480
like what you you feel about kubernetes

00:33:28,880 --> 00:33:31,760
and edge and what you are trying to do

00:33:30,480 --> 00:33:34,799
with your home labs

00:33:31,760 --> 00:33:37,120
and or even at your organizations

00:33:34,799 --> 00:33:40,960
and we will be happy to hear and happy

00:33:37,120 --> 00:33:40,960
to help to the best of our knowledge

00:33:41,039 --> 00:33:45,120
yep uh totally agree and uh once again

00:33:43,440 --> 00:33:48,320
you can read siam on twitter

00:33:45,120 --> 00:33:49,360
at scienpatech and i'm iteration1 on

00:33:48,320 --> 00:33:52,159
twitter

00:33:49,360 --> 00:33:52,640
i think we're probably at the end of our

00:33:52,159 --> 00:33:54,480
session

00:33:52,640 --> 00:33:56,000
so you know we'll be around uh if you

00:33:54,480 --> 00:33:58,640
have questions for us

00:33:56,000 --> 00:33:59,840
uh use uh you know use use this use the

00:33:58,640 --> 00:34:02,080
slack or we're actually

00:33:59,840 --> 00:34:03,679
both on uh the kubernetes slack as well

00:34:02,080 --> 00:34:05,840
so you can uh you know you can finger

00:34:03,679 --> 00:34:07,039
uh there as well but uh we'll hang out

00:34:05,840 --> 00:34:09,919
after after our session

00:34:07,039 --> 00:34:10,240
so you know we're not hard to find so um

00:34:09,919 --> 00:34:12,800
hope

00:34:10,240 --> 00:34:13,359
hope this was useful uh for you all and

00:34:12,800 --> 00:34:16,639
uh

00:34:13,359 --> 00:34:19,359
thank you for attending our talk yeah

00:34:16,639 --> 00:34:21,839
thank you all bye bye all right take it

00:34:19,359 --> 00:34:21,839

YouTube URL: https://www.youtube.com/watch?v=2Eqg-oKRIR8


