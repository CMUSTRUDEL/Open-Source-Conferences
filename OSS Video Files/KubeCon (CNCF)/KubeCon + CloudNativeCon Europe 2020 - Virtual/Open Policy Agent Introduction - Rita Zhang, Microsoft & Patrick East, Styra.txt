Title: Open Policy Agent Introduction - Rita Zhang, Microsoft & Patrick East, Styra
Publication date: 2020-08-28
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Open Policy Agent Introduction - Rita Zhang, Microsoft & Patrick East, Styra 

Come to this session to learn about the Open Policy Agent (OPA) project. OPA is a general-purpose policy engine that solves a number of policy-related use cases in Kubernetes and the wider cloud native ecosystem. During this session the OPA maintainers will introduce the project and then provide updates on the latest and greatest features to land in OPA and OPA Gatekeeper.

https://sched.co/Zex1
Captions: 
	00:00:00,080 --> 00:00:06,640
welcome everybody to the open policy

00:00:02,080 --> 00:00:06,640
agent project intro and community update

00:00:06,720 --> 00:00:10,320
hey everyone my name is rita zang i'm an

00:00:08,880 --> 00:00:12,639
engineer at microsoft

00:00:10,320 --> 00:00:15,599
and i am one of the maintainers of the

00:00:12,639 --> 00:00:17,680
gatekeeper project

00:00:15,599 --> 00:00:18,880
and i am patrick east an engineer at

00:00:17,680 --> 00:00:21,920
styra and a

00:00:18,880 --> 00:00:21,920
open maintainer

00:00:22,160 --> 00:00:27,840
let's talk about the open policy agent

00:00:24,720 --> 00:00:30,960
originally founded by styra in 2016

00:00:27,840 --> 00:00:33,600
as open source donated to the cncf and

00:00:30,960 --> 00:00:35,680
is a sandbox project in 2018

00:00:33,600 --> 00:00:37,760
since then is grown to become an

00:00:35,680 --> 00:00:40,719
incubating project in 2019

00:00:37,760 --> 00:00:43,200
and is currently on track for graduation

00:00:40,719 --> 00:00:44,960
the contributor base is pretty diverse

00:00:43,200 --> 00:00:46,239
we've got 30 plus companies which

00:00:44,960 --> 00:00:48,160
includes both

00:00:46,239 --> 00:00:49,680
you know kind of the upstream usual

00:00:48,160 --> 00:00:52,399
suspects as well as

00:00:49,680 --> 00:00:53,199
end users contributing back to oppa

00:00:52,399 --> 00:00:55,680
there's

00:00:53,199 --> 00:00:57,360
with that you know 150 plus developers i

00:00:55,680 --> 00:00:58,719
think this slide

00:00:57,360 --> 00:01:00,719
maybe even a little old i think it's

00:00:58,719 --> 00:01:04,239
grown since then

00:01:00,719 --> 00:01:06,159
the user base is also pretty extensive

00:01:04,239 --> 00:01:08,240
we list a few on here if you check out

00:01:06,159 --> 00:01:10,000
the adopters file in the open policy

00:01:08,240 --> 00:01:10,960
agent repository you'll see that there's

00:01:10,000 --> 00:01:15,119
a lot of kind of

00:01:10,960 --> 00:01:16,720
name brand cncf landscape customers

00:01:15,119 --> 00:01:19,040
so what is oppa why is there one like

00:01:16,720 --> 00:01:21,600
this first and foremost

00:01:19,040 --> 00:01:22,880
at its core you get rego a declarative

00:01:21,600 --> 00:01:25,920
policy language

00:01:22,880 --> 00:01:26,880
this lets you concisely express policies

00:01:25,920 --> 00:01:30,079
in a way that

00:01:26,880 --> 00:01:31,520
lets oppa evaluate them efficiently with

00:01:30,079 --> 00:01:32,640
the language you're getting all these

00:01:31,520 --> 00:01:34,720
built-in functions

00:01:32,640 --> 00:01:36,479
that help you do very common policy

00:01:34,720 --> 00:01:39,759
things anything from math

00:01:36,479 --> 00:01:42,399
or you know handling jots is a very very

00:01:39,759 --> 00:01:44,960
common use case in authorization

00:01:42,399 --> 00:01:45,759
as well as giving you a really nice sort

00:01:44,960 --> 00:01:48,560
of uh

00:01:45,759 --> 00:01:49,280
expression like the syntax for

00:01:48,560 --> 00:01:52,720
expressing

00:01:49,280 --> 00:01:54,720
policy sort of logic it's you know it's

00:01:52,720 --> 00:01:57,920
tailored for that it's 100

00:01:54,720 --> 00:01:58,640
built to be a policy language the cool

00:01:57,920 --> 00:02:00,240
thing is

00:01:58,640 --> 00:02:02,479
the performance optimizations that you

00:02:00,240 --> 00:02:04,479
get in oppa are pretty extensive

00:02:02,479 --> 00:02:06,399
uh not only can it do things like rule

00:02:04,479 --> 00:02:07,119
indexing it can partially evaluate

00:02:06,399 --> 00:02:09,840
policies

00:02:07,119 --> 00:02:10,959
this means that you can pre-process a

00:02:09,840 --> 00:02:13,760
policy decision

00:02:10,959 --> 00:02:14,959
ahead of time and then only process the

00:02:13,760 --> 00:02:17,440
unknown parts

00:02:14,959 --> 00:02:19,599
at you know actual like authorization

00:02:17,440 --> 00:02:23,200
check time

00:02:19,599 --> 00:02:25,680
this language you get a runtime

00:02:23,200 --> 00:02:27,599
which can be used as either a library

00:02:25,680 --> 00:02:30,560
everything's in golang

00:02:27,599 --> 00:02:32,560
or you can run it as a server so opa

00:02:30,560 --> 00:02:34,400
provides a little http server

00:02:32,560 --> 00:02:36,560
that sits in front of the runtime and

00:02:34,400 --> 00:02:38,720
allows you to basically run it

00:02:36,560 --> 00:02:40,720
very common as a side car a host level

00:02:38,720 --> 00:02:43,680
daemon

00:02:40,720 --> 00:02:45,760
the other thing you get with that server

00:02:43,680 --> 00:02:47,120
and also available with the apis but

00:02:45,760 --> 00:02:48,879
most people use it with the server are

00:02:47,120 --> 00:02:52,160
the management apis

00:02:48,879 --> 00:02:54,319
so the ability for oppa to

00:02:52,160 --> 00:02:56,239
basically give you like the the full

00:02:54,319 --> 00:02:59,040
life cycle

00:02:56,239 --> 00:03:00,800
management of of how these these agents

00:02:59,040 --> 00:03:03,280
are going to be running so

00:03:00,800 --> 00:03:06,159
the bundle service bundles basically

00:03:03,280 --> 00:03:08,000
being a pack of policies and data

00:03:06,159 --> 00:03:10,239
that you can configure opa to go pull

00:03:08,000 --> 00:03:14,239
down and load and use

00:03:10,239 --> 00:03:17,280
status apis for oppa sending status out

00:03:14,239 --> 00:03:19,280
logs everybody you know like for

00:03:17,280 --> 00:03:20,640
for authorization it's very important

00:03:19,280 --> 00:03:23,360
that you keep track of

00:03:20,640 --> 00:03:24,319
what decisions were made oppa has a you

00:03:23,360 --> 00:03:26,799
know first class

00:03:24,319 --> 00:03:28,879
feature for doing decision logging uh

00:03:26,799 --> 00:03:29,840
that log service gives you that high

00:03:28,879 --> 00:03:32,560
fidelity

00:03:29,840 --> 00:03:33,840
uh record of what the agent has actually

00:03:32,560 --> 00:03:36,560
done

00:03:33,840 --> 00:03:38,000
as well as discovery api this thing

00:03:36,560 --> 00:03:40,720
essentially lets you do dynamic

00:03:38,000 --> 00:03:44,799
configuration and policy distribution

00:03:40,720 --> 00:03:47,599
it's another bundle of configuration

00:03:44,799 --> 00:03:48,080
the last piece of this puzzle is how do

00:03:47,599 --> 00:03:50,239
you

00:03:48,080 --> 00:03:51,360
make those policies how do you you know

00:03:50,239 --> 00:03:54,640
optimize them

00:03:51,360 --> 00:03:56,959
uh so oppa provides a set of cli tools

00:03:54,640 --> 00:03:57,840
for letting you build test you know

00:03:56,959 --> 00:03:58,959
check

00:03:57,840 --> 00:04:01,040
everything you need to do to these

00:03:58,959 --> 00:04:03,120
policies and the

00:04:01,040 --> 00:04:04,959
you know the source code for them as

00:04:03,120 --> 00:04:08,560
well as integrations with

00:04:04,959 --> 00:04:11,680
vs code with soon to be intellij

00:04:08,560 --> 00:04:14,480
lots of different editors plus

00:04:11,680 --> 00:04:15,680
functionality for doing tracing and

00:04:14,480 --> 00:04:17,840
performance analysis

00:04:15,680 --> 00:04:19,359
profiling that sort of thing the last

00:04:17,840 --> 00:04:20,639
thing is the playground which i'm

00:04:19,359 --> 00:04:21,759
actually going to do a demo of in a

00:04:20,639 --> 00:04:23,199
little bit

00:04:21,759 --> 00:04:25,520
so i won't go too far into that one

00:04:23,199 --> 00:04:25,520
right now

00:04:26,160 --> 00:04:32,800
so at a high level the open policy agent

00:04:29,759 --> 00:04:35,120
is basically decoupling your

00:04:32,800 --> 00:04:36,160
your service uh whether that's a server

00:04:35,120 --> 00:04:39,520
um you know

00:04:36,160 --> 00:04:41,759
some ssh you know linux pan module uh

00:04:39,520 --> 00:04:43,600
or or you know i think a lot of these

00:04:41,759 --> 00:04:44,160
ones that we show in the example here

00:04:43,600 --> 00:04:46,560
are

00:04:44,160 --> 00:04:47,840
api authorization specific but a lot of

00:04:46,560 --> 00:04:49,759
people use it for

00:04:47,840 --> 00:04:51,840
uh configuration testing as well you

00:04:49,759 --> 00:04:53,600
know if if you have some policy that you

00:04:51,840 --> 00:04:54,560
need to apply on a set of structured

00:04:53,600 --> 00:04:56,880
json

00:04:54,560 --> 00:04:59,120
opa can do that the cool thing here is

00:04:56,880 --> 00:05:01,680
the input can be any json

00:04:59,120 --> 00:05:03,759
oh it doesn't care it's it's general

00:05:01,680 --> 00:05:06,720
purpose it's agnostic to

00:05:03,759 --> 00:05:07,199
any sort of you know domain so if that

00:05:06,720 --> 00:05:11,199
input

00:05:07,199 --> 00:05:14,639
that request is a you know serialized

00:05:11,199 --> 00:05:17,759
uh terraform template that's fine

00:05:14,639 --> 00:05:18,320
if it's a jot from an api request also

00:05:17,759 --> 00:05:20,560
fine

00:05:18,320 --> 00:05:22,160
you know it's it's all up to the the

00:05:20,560 --> 00:05:25,759
policy that you write

00:05:22,160 --> 00:05:27,840
to you know use that input

00:05:25,759 --> 00:05:29,120
so on the bottom half of this diagram

00:05:27,840 --> 00:05:32,240
here you have

00:05:29,120 --> 00:05:35,360
the rego policy of course the

00:05:32,240 --> 00:05:36,800
data that basically gives you the

00:05:35,360 --> 00:05:39,919
ability to

00:05:36,800 --> 00:05:40,400
have external data for opus sounds

00:05:39,919 --> 00:05:43,039
really

00:05:40,400 --> 00:05:44,479
vague and that's because it is in the

00:05:43,039 --> 00:05:46,479
sense that it can be

00:05:44,479 --> 00:05:49,360
pretty much anything you want opa

00:05:46,479 --> 00:05:51,759
provides an api to push data into it

00:05:49,360 --> 00:05:54,639
as well as bundling it with the policies

00:05:51,759 --> 00:05:54,639
and pulling it in

00:05:54,880 --> 00:05:58,880
the cool part here is that this lets you

00:05:56,479 --> 00:06:02,000
do context aware decisions

00:05:58,880 --> 00:06:03,039
so say you have a api authorization

00:06:02,000 --> 00:06:04,960
request coming in

00:06:03,039 --> 00:06:06,560
you may have a jot on there with some

00:06:04,960 --> 00:06:08,639
information about the user

00:06:06,560 --> 00:06:10,960
but it may not have information about

00:06:08,639 --> 00:06:14,080
other resources or the ability to

00:06:10,960 --> 00:06:15,360
connect that user to you know some other

00:06:14,080 --> 00:06:18,240
group that's maybe not

00:06:15,360 --> 00:06:19,039
listed in the job so the cool part then

00:06:18,240 --> 00:06:21,440
is you can

00:06:19,039 --> 00:06:22,720
integrate opa so that the data it has

00:06:21,440 --> 00:06:24,160
available at that time

00:06:22,720 --> 00:06:26,160
you could have pushed in those they'll

00:06:24,160 --> 00:06:27,840
say group permissions or other attribute

00:06:26,160 --> 00:06:29,759
information

00:06:27,840 --> 00:06:31,840
the last thing here is the policy

00:06:29,759 --> 00:06:34,960
decision being any json value

00:06:31,840 --> 00:06:38,639
out so oftentimes you're going to have

00:06:34,960 --> 00:06:40,160
a boolean a yes no was this allowed

00:06:38,639 --> 00:06:42,080
but that doesn't have to be the case it

00:06:40,160 --> 00:06:44,639
can be a set of

00:06:42,080 --> 00:06:47,039
changes a set of warning messages i

00:06:44,639 --> 00:06:49,120
think a common cases for kubernetes

00:06:47,039 --> 00:06:51,280
as an admission controller if you wanted

00:06:49,120 --> 00:06:53,840
to do mutating decisions

00:06:51,280 --> 00:06:56,800
oppa can return back a set of patches

00:06:53,840 --> 00:06:56,800
that need to be applied

00:06:57,919 --> 00:07:01,120
so let me show you a quick demo i'm

00:07:00,240 --> 00:07:04,880
going to open up the

00:07:01,120 --> 00:07:08,319
playground beautiful

00:07:04,880 --> 00:07:09,120
okay this is the open policy agent

00:07:08,319 --> 00:07:12,319
playground

00:07:09,120 --> 00:07:16,240
the playground is a open

00:07:12,319 --> 00:07:19,280
public site it's hosted by styra um

00:07:16,240 --> 00:07:22,240
everything here is you know

00:07:19,280 --> 00:07:23,599
ready to run latest versions of oppa

00:07:22,240 --> 00:07:25,039
yeah i think uh you know if you're

00:07:23,599 --> 00:07:27,120
familiar with some of the like like the

00:07:25,039 --> 00:07:28,479
go playground or other things this is a

00:07:27,120 --> 00:07:31,759
sort of common

00:07:28,479 --> 00:07:33,199
language tool nowadays um

00:07:31,759 --> 00:07:35,759
there's some instructions in here when

00:07:33,199 --> 00:07:37,360
you first open this up uh basically i'd

00:07:35,759 --> 00:07:39,919
recommend anybody who does this

00:07:37,360 --> 00:07:40,960
read through the the sort of readme here

00:07:39,919 --> 00:07:45,759
at the top

00:07:40,960 --> 00:07:48,560
um crash course into rego policy syntax

00:07:45,759 --> 00:07:50,800
uh this stuff starts with the the hash

00:07:48,560 --> 00:07:53,759
mark is going to be a comment

00:07:50,800 --> 00:07:55,120
so the policy itself in this hello world

00:07:53,759 --> 00:07:56,400
that you get kind of

00:07:55,120 --> 00:07:58,879
you know out of the box with the

00:07:56,400 --> 00:08:00,479
playground it basically is defining a

00:07:58,879 --> 00:08:03,759
rule that says hello is false

00:08:00,479 --> 00:08:06,800
by default and then it's saying that

00:08:03,759 --> 00:08:10,560
hello is true if the

00:08:06,800 --> 00:08:12,240
input dot message equals world

00:08:10,560 --> 00:08:13,680
so we can see over here on the right

00:08:12,240 --> 00:08:16,560
hand side the

00:08:13,680 --> 00:08:17,440
input box uh again kind of back to that

00:08:16,560 --> 00:08:20,560
diagram

00:08:17,440 --> 00:08:22,800
the input is any json the you know if as

00:08:20,560 --> 00:08:25,039
long as you can serialize it into json

00:08:22,800 --> 00:08:27,840
it can be an open policy agent policy

00:08:25,039 --> 00:08:27,840
input

00:08:27,919 --> 00:08:34,719
in this case we have message as a field

00:08:31,199 --> 00:08:36,640
the you know value being world so

00:08:34,719 --> 00:08:38,959
you know the logic of our policy says

00:08:36,640 --> 00:08:40,880
that hello should be true

00:08:38,959 --> 00:08:42,560
i will click to evaluate and view the

00:08:40,880 --> 00:08:46,000
results sure enough

00:08:42,560 --> 00:08:47,760
what we find is that yes hello is true

00:08:46,000 --> 00:08:49,279
this is a very basic example so let me

00:08:47,760 --> 00:08:50,000
show you something a tiny bit more

00:08:49,279 --> 00:08:51,519
complex

00:08:50,000 --> 00:08:53,200
just to give a feel for what these can

00:08:51,519 --> 00:08:55,920
look like

00:08:53,200 --> 00:08:57,040
the playground is is packaged with a

00:08:55,920 --> 00:08:58,800
bunch of uh

00:08:57,040 --> 00:09:00,480
like example policies that you can use

00:08:58,800 --> 00:09:04,640
to get started

00:09:00,480 --> 00:09:06,560
let's look at a rule based example

00:09:04,640 --> 00:09:08,160
uh again there's a bunch of information

00:09:06,560 --> 00:09:10,720
here on kind of you know getting started

00:09:08,160 --> 00:09:11,200
that sort of thing um what we're going

00:09:10,720 --> 00:09:14,080
to do

00:09:11,200 --> 00:09:15,040
is jump down and look at the policy

00:09:14,080 --> 00:09:17,600
itself

00:09:15,040 --> 00:09:18,640
so what we've done is we've designed

00:09:17,600 --> 00:09:22,000
we've

00:09:18,640 --> 00:09:25,519
we've specified a package so for

00:09:22,000 --> 00:09:27,760
each rego file a complete module

00:09:25,519 --> 00:09:28,560
as we call them includes a package

00:09:27,760 --> 00:09:31,839
definition

00:09:28,560 --> 00:09:36,160
essentially saying this is the the path

00:09:31,839 --> 00:09:38,160
at which all these rules exist um

00:09:36,160 --> 00:09:39,440
we're going to for this example be

00:09:38,160 --> 00:09:41,360
showing a

00:09:39,440 --> 00:09:42,959
you know it's our back for an api

00:09:41,360 --> 00:09:45,120
authorization use case

00:09:42,959 --> 00:09:46,399
so the rule that we're interested in is

00:09:45,120 --> 00:09:48,480
allow

00:09:46,399 --> 00:09:51,200
by default we're going to say allow is

00:09:48,480 --> 00:09:54,160
false so we're sort of saying that if

00:09:51,200 --> 00:09:55,680
you know unless otherwise specified when

00:09:54,160 --> 00:09:59,040
we query for

00:09:55,680 --> 00:10:02,160
app dot rbac.allow uh

00:09:59,040 --> 00:10:03,120
you know it should be false when we do

00:10:02,160 --> 00:10:06,640
want to allow

00:10:03,120 --> 00:10:07,200
is when the user is an admin this syntax

00:10:06,640 --> 00:10:09,279
here

00:10:07,200 --> 00:10:10,240
is essentially showing that you have an

00:10:09,279 --> 00:10:13,600
allow rule

00:10:10,240 --> 00:10:17,600
that's true if user is admin

00:10:13,600 --> 00:10:20,880
is true user is admin here is a rule

00:10:17,600 --> 00:10:21,920
which is defined down below so user is

00:10:20,880 --> 00:10:25,680
admin is true

00:10:21,920 --> 00:10:29,279
if there is some variable i

00:10:25,680 --> 00:10:34,320
such that data dot user roles

00:10:29,279 --> 00:10:37,839
uh and you know the lookup of input.user

00:10:34,320 --> 00:10:39,120
at some element i is admin so what is

00:10:37,839 --> 00:10:41,279
all this

00:10:39,120 --> 00:10:43,279
when we're looking at data this is that

00:10:41,279 --> 00:10:44,240
external data from the from that diagram

00:10:43,279 --> 00:10:46,640
that i was talking about

00:10:44,240 --> 00:10:47,600
so you'll notice there's another tab

00:10:46,640 --> 00:10:51,279
over here

00:10:47,600 --> 00:10:54,320
a bunch of json data again anything json

00:10:51,279 --> 00:10:58,320
serializable you can put into opa

00:10:54,320 --> 00:11:01,519
the user roles key so data dot

00:10:58,320 --> 00:11:03,920
user roles so user rules we'd see that

00:11:01,519 --> 00:11:07,320
they're all keyed by the user

00:11:03,920 --> 00:11:11,120
so we say user roles look up

00:11:07,320 --> 00:11:12,160
input.user our input backup here in the

00:11:11,120 --> 00:11:15,760
input panel

00:11:12,160 --> 00:11:19,600
is we have users alice so we can see

00:11:15,760 --> 00:11:22,720
that under user roles alice

00:11:19,600 --> 00:11:25,680
and then inside of the user roles

00:11:22,720 --> 00:11:26,399
we find an admin so what that means is

00:11:25,680 --> 00:11:29,600
there is

00:11:26,399 --> 00:11:33,279
some i in this expression

00:11:29,600 --> 00:11:35,920
where we can make this this ex line 48

00:11:33,279 --> 00:11:37,519
and everybody can see that but if if

00:11:35,920 --> 00:11:42,240
this line is true

00:11:37,519 --> 00:11:45,279
then user is admin is true and

00:11:42,240 --> 00:11:47,120
allow is true so checking that we

00:11:45,279 --> 00:11:50,399
evaluate this thing

00:11:47,120 --> 00:11:52,399
we can see that yes indeed allow is true

00:11:50,399 --> 00:11:53,839
and we can see that user is admin is

00:11:52,399 --> 00:11:55,279
true um

00:11:53,839 --> 00:11:57,120
so this is just a really kind of you

00:11:55,279 --> 00:11:59,839
know high level example

00:11:57,120 --> 00:12:01,200
of sort of how you can write these rules

00:11:59,839 --> 00:12:03,120
and what they kind of look like

00:12:01,200 --> 00:12:04,560
i would recommend that everybody try out

00:12:03,120 --> 00:12:06,320
the playground

00:12:04,560 --> 00:12:08,639
and also go to the open policy agent

00:12:06,320 --> 00:12:10,959
documentation

00:12:08,639 --> 00:12:13,519
the documentation is backed by the

00:12:10,959 --> 00:12:15,760
playground so all of the examples and

00:12:13,519 --> 00:12:17,360
and demos in there you can edit and

00:12:15,760 --> 00:12:19,519
change and open up the playground as

00:12:17,360 --> 00:12:19,519
well

00:12:19,920 --> 00:12:26,880
all right back to slides

00:12:24,720 --> 00:12:28,000
okay so we've talked a little bit about

00:12:26,880 --> 00:12:31,279
what opa is

00:12:28,000 --> 00:12:32,079
but how do you use it well let's take a

00:12:31,279 --> 00:12:36,160
second

00:12:32,079 --> 00:12:38,079
look at the broader ecosystem

00:12:36,160 --> 00:12:39,360
right now you have policy everywhere

00:12:38,079 --> 00:12:41,519
whether you know it or not

00:12:39,360 --> 00:12:42,800
um and your ci cd services you have

00:12:41,519 --> 00:12:44,399
policy you know when

00:12:42,800 --> 00:12:46,079
when does something get deployed when do

00:12:44,399 --> 00:12:49,200
rules get run uh when

00:12:46,079 --> 00:12:51,120
when do jobs get run so um

00:12:49,200 --> 00:12:52,560
for kubernetes container management it's

00:12:51,120 --> 00:12:54,320
obvious we have you know admission

00:12:52,560 --> 00:12:55,839
controllers we have pod security

00:12:54,320 --> 00:12:56,720
policies we have all this other stuff

00:12:55,839 --> 00:12:59,760
right

00:12:56,720 --> 00:13:03,440
um apis of course

00:12:59,760 --> 00:13:06,399
authorization um that's you know it's

00:13:03,440 --> 00:13:07,440
probably the biggest use case around

00:13:06,399 --> 00:13:10,560
databases

00:13:07,440 --> 00:13:13,279
filtering again authorization

00:13:10,560 --> 00:13:14,320
you know what who's allowed to query for

00:13:13,279 --> 00:13:17,360
what data that's

00:13:14,320 --> 00:13:18,639
the sort of questions and then also of

00:13:17,360 --> 00:13:20,800
course down in this bottom

00:13:18,639 --> 00:13:22,079
right corner public cloud we have

00:13:20,800 --> 00:13:25,040
terraform

00:13:22,079 --> 00:13:26,399
shown here but basically like how do you

00:13:25,040 --> 00:13:29,440
manage infrastructure

00:13:26,399 --> 00:13:31,440
and the policies around that so you know

00:13:29,440 --> 00:13:33,120
is a user allowed to delete

00:13:31,440 --> 00:13:34,639
all of the servers in the cluster

00:13:33,120 --> 00:13:37,200
probably not you should have a policy

00:13:34,639 --> 00:13:40,399
for that right

00:13:37,200 --> 00:13:43,120
so all of these locations have an opa

00:13:40,399 --> 00:13:45,440
integration point and are prime

00:13:43,120 --> 00:13:46,320
candidates for it all of these use cases

00:13:45,440 --> 00:13:50,320
have been

00:13:46,320 --> 00:13:53,360
you know sort of tried and true um

00:13:50,320 --> 00:13:55,600
i think the main takeaway here

00:13:53,360 --> 00:13:56,720
anybody who's interested in using opa

00:13:55,600 --> 00:13:59,440
and wanting to use it

00:13:56,720 --> 00:14:00,639
in any of those those uh you know places

00:13:59,440 --> 00:14:03,760
across the stack

00:14:00,639 --> 00:14:06,560
go check out the opa integration index

00:14:03,760 --> 00:14:08,160
there's a shortened link here if you can

00:14:06,560 --> 00:14:12,320
see the url in the screenshot

00:14:08,160 --> 00:14:15,120
it's the docs slash ecosystem

00:14:12,320 --> 00:14:16,000
this thing is a live list showing you

00:14:15,120 --> 00:14:18,000
you know all the different

00:14:16,000 --> 00:14:20,560
integration points plugins and other

00:14:18,000 --> 00:14:22,959
other tools that are built using opa

00:14:20,560 --> 00:14:26,720
to allow you to enforce these policies

00:14:22,959 --> 00:14:29,440
all across the stack in different places

00:14:26,720 --> 00:14:30,079
i want to take a second to call out one

00:14:29,440 --> 00:14:32,800
of these

00:14:30,079 --> 00:14:35,519
integrations um it's a separate tool

00:14:32,800 --> 00:14:38,079
uses opa as a library

00:14:35,519 --> 00:14:38,720
comp test i think at this point i would

00:14:38,079 --> 00:14:40,399
guess that

00:14:38,720 --> 00:14:43,199
most people have at least heard of this

00:14:40,399 --> 00:14:44,800
in the kubernetes you know ecosystem

00:14:43,199 --> 00:14:46,880
if you haven't i highly recommend you

00:14:44,800 --> 00:14:49,760
check it out uh this thing

00:14:46,880 --> 00:14:50,720
if if you're doing any kind of you know

00:14:49,760 --> 00:14:53,760
infrastructure as

00:14:50,720 --> 00:14:56,880
code or even just like if you

00:14:53,760 --> 00:14:59,360
if you find yourself using config files

00:14:56,880 --> 00:15:01,440
in production you should probably be

00:14:59,360 --> 00:15:04,560
looking at contest

00:15:01,440 --> 00:15:06,560
you know you'll find a use for it

00:15:04,560 --> 00:15:08,399
at the end of the day it basically lets

00:15:06,560 --> 00:15:12,079
you do

00:15:08,399 --> 00:15:13,519
policy tests against config files

00:15:12,079 --> 00:15:15,760
and this these config files can be

00:15:13,519 --> 00:15:18,000
anything from kubernetes manifest to

00:15:15,760 --> 00:15:19,760
terraform definitions to you know

00:15:18,000 --> 00:15:21,199
several others here and this quote that

00:15:19,760 --> 00:15:24,480
i took from the readme

00:15:21,199 --> 00:15:25,440
um check out their website uh the docs

00:15:24,480 --> 00:15:27,120
are pretty good

00:15:25,440 --> 00:15:28,560
i think the other thing to call out here

00:15:27,120 --> 00:15:30,639
is that the

00:15:28,560 --> 00:15:32,959
conftest project has officially moved

00:15:30,639 --> 00:15:34,800
into the open policy agent

00:15:32,959 --> 00:15:36,959
organization so it's now an official

00:15:34,800 --> 00:15:38,959
part of oppa

00:15:36,959 --> 00:15:40,320
uh so that's that's really cool i you

00:15:38,959 --> 00:15:42,160
know big shout out to the

00:15:40,320 --> 00:15:44,320
the conf test maintainers and everybody

00:15:42,160 --> 00:15:48,240
who's been involved in that project

00:15:44,320 --> 00:15:48,240
it's very popular and with good reason

00:15:48,639 --> 00:15:55,199
but we are at kubecon virtually

00:15:52,320 --> 00:15:56,320
and so i think everyone here probably is

00:15:55,199 --> 00:15:58,880
interested in

00:15:56,320 --> 00:15:59,519
kubernetes uh so let's talk a little bit

00:15:58,880 --> 00:16:02,560
about

00:15:59,519 --> 00:16:04,720
kubernetes and oppa gatekeeper is a

00:16:02,560 --> 00:16:05,199
customizable kubernetes admission web

00:16:04,720 --> 00:16:07,839
hook

00:16:05,199 --> 00:16:09,279
that allows us to enforce policies and

00:16:07,839 --> 00:16:11,440
strengthen governance

00:16:09,279 --> 00:16:14,240
to extend security and governance in

00:16:11,440 --> 00:16:15,600
your kubernetes environment

00:16:14,240 --> 00:16:18,880
now let's take a look at some of the

00:16:15,600 --> 00:16:21,120
motivations behind the project

00:16:18,880 --> 00:16:22,880
if your organization has been operating

00:16:21,120 --> 00:16:24,560
kubernetes you probably have been

00:16:22,880 --> 00:16:25,199
looking for ways to control what end

00:16:24,560 --> 00:16:28,079
users

00:16:25,199 --> 00:16:30,160
can do on the cluster and ways to help

00:16:28,079 --> 00:16:33,199
ensure the clusters are in conformance

00:16:30,160 --> 00:16:34,079
with company policies these policies may

00:16:33,199 --> 00:16:36,480
be there to meet

00:16:34,079 --> 00:16:37,199
governance and legal requirements or to

00:16:36,480 --> 00:16:39,759
enforce

00:16:37,199 --> 00:16:41,279
best practices and organizational

00:16:39,759 --> 00:16:44,399
conventions

00:16:41,279 --> 00:16:46,240
often the need for policy is discovered

00:16:44,399 --> 00:16:49,040
after your system is already running in

00:16:46,240 --> 00:16:51,680
production so introducing new policies

00:16:49,040 --> 00:16:53,519
can be dangerous and can often be a

00:16:51,680 --> 00:16:55,680
breaking change

00:16:53,519 --> 00:16:56,560
does a new rule break a core piece of

00:16:55,680 --> 00:16:59,040
software

00:16:56,560 --> 00:16:59,920
can it bring down the entire stack with

00:16:59,040 --> 00:17:02,000
gatekeeper

00:16:59,920 --> 00:17:03,680
you can preview the effect of policy

00:17:02,000 --> 00:17:08,720
changes in production clusters

00:17:03,680 --> 00:17:08,720
to prevent impacts on existing workloads

00:17:11,039 --> 00:17:14,559
so here's a timeline of the gatekeeper

00:17:13,039 --> 00:17:18,880
projects

00:17:14,559 --> 00:17:20,720
in 2017 the v1 of gatekeeper with q

00:17:18,880 --> 00:17:24,959
management was introduced

00:17:20,720 --> 00:17:28,240
and in 2018 microsoft donated the v2

00:17:24,959 --> 00:17:31,039
of gatekeeper to the oppa organization

00:17:28,240 --> 00:17:32,720
and soon after microsoft google styra

00:17:31,039 --> 00:17:36,240
and many others

00:17:32,720 --> 00:17:39,120
work together to bring the v3

00:17:36,240 --> 00:17:40,400
of gatekeeper project and now in august

00:17:39,120 --> 00:17:43,200
00:17:40,400 --> 00:17:44,320
we are preparing for the project to go

00:17:43,200 --> 00:17:46,320
stable

00:17:44,320 --> 00:17:48,640
and we're going to talk a little bit

00:17:46,320 --> 00:17:52,400
more about all the changes that have

00:17:48,640 --> 00:17:55,600
happened so let's take a look at

00:17:52,400 --> 00:17:58,880
how b3 works when

00:17:55,600 --> 00:18:02,320
uh when we deploy the gatekeeper

00:17:58,880 --> 00:18:04,720
project to the cluster what happens is

00:18:02,320 --> 00:18:07,039
when an admission request comes in the

00:18:04,720 --> 00:18:08,080
api server then sends the request to the

00:18:07,039 --> 00:18:11,679
gatekeeper

00:18:08,080 --> 00:18:13,200
webhook and the webhook then receives a

00:18:11,679 --> 00:18:17,440
mission review request

00:18:13,200 --> 00:18:20,000
and sends the data to opa for reviewing

00:18:17,440 --> 00:18:21,919
the request data against all the

00:18:20,000 --> 00:18:25,520
policies that are currently

00:18:21,919 --> 00:18:26,160
in opa and once the decision has been

00:18:25,520 --> 00:18:28,880
made

00:18:26,160 --> 00:18:30,559
then the data is sent back to gatekeeper

00:18:28,880 --> 00:18:34,160
and then gatekeeper then sends

00:18:30,559 --> 00:18:37,679
the emission response as a deny or allow

00:18:34,160 --> 00:18:40,320
to the api server and

00:18:37,679 --> 00:18:42,799
the audit functionality runs

00:18:40,320 --> 00:18:46,080
periodically in the cluster

00:18:42,799 --> 00:18:47,039
and the data all the resources in the

00:18:46,080 --> 00:18:50,080
cluster

00:18:47,039 --> 00:18:52,880
are then evaluated periodically against

00:18:50,080 --> 00:18:54,640
all the policies that are currently in

00:18:52,880 --> 00:18:57,440
opa

00:18:54,640 --> 00:18:58,720
gatekeeper is a dynamic configurable

00:18:57,440 --> 00:19:01,919
emission controller

00:18:58,720 --> 00:19:02,720
so no reboot is required for any policy

00:19:01,919 --> 00:19:05,840
updates

00:19:02,720 --> 00:19:07,919
the policies are configured via krm

00:19:05,840 --> 00:19:09,039
so that the policies are reusable

00:19:07,919 --> 00:19:11,440
parameterized

00:19:09,039 --> 00:19:12,880
to encourage reusability for common

00:19:11,440 --> 00:19:14,799
policy needs

00:19:12,880 --> 00:19:16,320
the project is also built on top of

00:19:14,799 --> 00:19:18,080
keybuilder

00:19:16,320 --> 00:19:20,480
here are some core functionalities of

00:19:18,080 --> 00:19:21,039
gatekeeper with the validating emission

00:19:20,480 --> 00:19:23,039
control

00:19:21,039 --> 00:19:24,160
you can control what end users can do on

00:19:23,039 --> 00:19:25,919
the cluster

00:19:24,160 --> 00:19:27,200
with the dry run feature we can

00:19:25,919 --> 00:19:29,440
gradually roll out

00:19:27,200 --> 00:19:30,320
new policies so that we can gain

00:19:29,440 --> 00:19:32,880
confidence

00:19:30,320 --> 00:19:35,280
in the policies before enforcing them we

00:19:32,880 --> 00:19:37,679
can create referential policies

00:19:35,280 --> 00:19:39,360
to evaluate new admission request

00:19:37,679 --> 00:19:42,480
against existing resources

00:19:39,360 --> 00:19:45,039
in the cluster we can write policies via

00:19:42,480 --> 00:19:46,640
configuration not code

00:19:45,039 --> 00:19:48,720
then this can be done by creating

00:19:46,640 --> 00:19:49,280
constraint templates which are source

00:19:48,720 --> 00:19:51,520
code

00:19:49,280 --> 00:19:54,000
for rego rules and schema for

00:19:51,520 --> 00:19:55,600
constraints and their parameters

00:19:54,000 --> 00:19:58,160
and the constraints can then be

00:19:55,600 --> 00:20:01,360
parameterized and easily configurable

00:19:58,160 --> 00:20:03,840
by admins the audit functionality allows

00:20:01,360 --> 00:20:06,000
us to periodically evaluate resources

00:20:03,840 --> 00:20:08,320
against these constraints

00:20:06,000 --> 00:20:10,480
and this allows us to have ongoing

00:20:08,320 --> 00:20:12,960
monitoring of cluster state

00:20:10,480 --> 00:20:15,679
to help us detect and remediate any

00:20:12,960 --> 00:20:19,280
pre-existing misconfigurations

00:20:15,679 --> 00:20:20,400
and with metrics we have prometheus

00:20:19,280 --> 00:20:22,400
endpoints to provide

00:20:20,400 --> 00:20:23,440
observability of the state of the

00:20:22,400 --> 00:20:25,120
cluster

00:20:23,440 --> 00:20:27,520
and how things are working within

00:20:25,120 --> 00:20:30,159
gatekeeper

00:20:27,520 --> 00:20:31,520
so since the last kubecon in december

00:20:30,159 --> 00:20:33,840
we've added a lot of

00:20:31,520 --> 00:20:36,320
new functionalities to gatekeeper so

00:20:33,840 --> 00:20:38,480
let's go through the list

00:20:36,320 --> 00:20:40,720
first we have security audit completed

00:20:38,480 --> 00:20:42,720
by cncf security audit

00:20:40,720 --> 00:20:45,360
and we've addressed all the security

00:20:42,720 --> 00:20:47,840
concerns as part of that audit

00:20:45,360 --> 00:20:48,880
and we've added new ways to exclude

00:20:47,840 --> 00:20:50,559
namespaces

00:20:48,880 --> 00:20:52,720
you can either narrow the scope of

00:20:50,559 --> 00:20:55,840
resources for audit emission

00:20:52,720 --> 00:20:59,760
and sync within the config resources

00:20:55,840 --> 00:21:02,640
or you can actually specify

00:20:59,760 --> 00:21:03,360
at the constraint level by adding

00:21:02,640 --> 00:21:07,200
excluded

00:21:03,360 --> 00:21:09,679
namespaces as part of the constraint

00:21:07,200 --> 00:21:11,679
and we've added a mid label validating

00:21:09,679 --> 00:21:14,799
web plug to lock down

00:21:11,679 --> 00:21:16,159
what excluded namespaces are actually

00:21:14,799 --> 00:21:19,520
allowed to

00:21:16,159 --> 00:21:21,039
be excluded now with past security

00:21:19,520 --> 00:21:24,799
policy

00:21:21,039 --> 00:21:28,000
sigoth has identified the need to

00:21:24,799 --> 00:21:30,400
decouple enforcement and decision making

00:21:28,000 --> 00:21:31,200
and gatekeeper is referenced now as an

00:21:30,400 --> 00:21:34,559
alternative

00:21:31,200 --> 00:21:35,840
to kubernetes psps and we've added

00:21:34,559 --> 00:21:39,039
semantic logging

00:21:35,840 --> 00:21:39,919
which allows us to get cluster-wide

00:21:39,039 --> 00:21:42,880
violating

00:21:39,919 --> 00:21:44,320
resources from audit and emission

00:21:42,880 --> 00:21:46,960
violations

00:21:44,320 --> 00:21:47,679
within the gatekeeper logs and we've

00:21:46,960 --> 00:21:51,039
added some

00:21:47,679 --> 00:21:53,600
audit enhancements which allows us to

00:21:51,039 --> 00:21:56,080
audit resources using discovery client

00:21:53,600 --> 00:21:58,720
instead of relying on opa cache

00:21:56,080 --> 00:21:59,440
and we now have standalone audit to

00:21:58,720 --> 00:22:02,960
separate

00:21:59,440 --> 00:22:05,280
the audit and the web hook component

00:22:02,960 --> 00:22:06,799
and we've enabled multipod deployment

00:22:05,280 --> 00:22:09,360
for webhook

00:22:06,799 --> 00:22:09,919
and we've added readiness tracker to

00:22:09,360 --> 00:22:12,559
ensure

00:22:09,919 --> 00:22:13,760
caches have been loaded before serving

00:22:12,559 --> 00:22:15,679
traffic

00:22:13,760 --> 00:22:16,799
and we've removed the dependency on

00:22:15,679 --> 00:22:18,720
finalizers

00:22:16,799 --> 00:22:20,400
so you no longer need to remove

00:22:18,720 --> 00:22:23,120
finalizers

00:22:20,400 --> 00:22:24,640
when when you need to deploy a new

00:22:23,120 --> 00:22:26,880
gatekeeper

00:22:24,640 --> 00:22:28,480
and we've added the capability to match

00:22:26,880 --> 00:22:31,440
resource based off

00:22:28,480 --> 00:22:32,559
object scope to support cluster scope

00:22:31,440 --> 00:22:34,960
objects

00:22:32,559 --> 00:22:37,679
now let's take a look at a demo we've

00:22:34,960 --> 00:22:40,960
used agile bank in the past

00:22:37,679 --> 00:22:44,400
for gatekeeper demos agile bank

00:22:40,960 --> 00:22:46,559
is in a highly regulated industry

00:22:44,400 --> 00:22:47,840
and both developers and admins are

00:22:46,559 --> 00:22:50,480
unhappy

00:22:47,840 --> 00:22:52,720
with gatekeeper we want to free up

00:22:50,480 --> 00:22:54,880
admins time

00:22:52,720 --> 00:22:57,039
managing all the policies in the cluster

00:22:54,880 --> 00:23:00,320
and we want to unblock developers

00:22:57,039 --> 00:23:02,799
by enable self-serving

00:23:00,320 --> 00:23:04,559
in the past few kubecons we've shown you

00:23:02,799 --> 00:23:05,840
how you can create your own gatekeeper

00:23:04,559 --> 00:23:07,840
policies

00:23:05,840 --> 00:23:09,840
today we're going to take a look at how

00:23:07,840 --> 00:23:10,799
to use gatekeeper to create the same

00:23:09,840 --> 00:23:13,919
behavior

00:23:10,799 --> 00:23:16,880
as kubernetes psps it's important to

00:23:13,919 --> 00:23:19,520
note that kubernetes psps has denied by

00:23:16,880 --> 00:23:22,880
default enforcement mechanism

00:23:19,520 --> 00:23:25,440
what that means is once the psp emission

00:23:22,880 --> 00:23:26,559
controller is enabled without defining

00:23:25,440 --> 00:23:28,640
any policies

00:23:26,559 --> 00:23:31,120
it will prevent any pots from being

00:23:28,640 --> 00:23:33,600
created in the cluster

00:23:31,120 --> 00:23:34,240
in comparison gatekeeper has allow by

00:23:33,600 --> 00:23:37,600
default

00:23:34,240 --> 00:23:40,799
enforcement mechanism so this allows us

00:23:37,600 --> 00:23:43,279
to gradually roll out the policies

00:23:40,799 --> 00:23:46,320
test the policies and gain confidence

00:23:43,279 --> 00:23:48,400
before actually enforcing them

00:23:46,320 --> 00:23:49,360
so let's take a look at how to use

00:23:48,400 --> 00:23:51,600
gatekeeper

00:23:49,360 --> 00:23:54,159
to disallow privileged containers from

00:23:51,600 --> 00:23:56,400
being created in the cluster

00:23:54,159 --> 00:23:58,720
a privileged container is given access

00:23:56,400 --> 00:24:01,120
to all devices on the host

00:23:58,720 --> 00:24:02,240
this allows the container nearly all the

00:24:01,120 --> 00:24:06,720
same access

00:24:02,240 --> 00:24:06,720
as processes running on the host

00:24:07,039 --> 00:24:13,840
here as an admin of agile bank

00:24:10,480 --> 00:24:16,880
i want to be able to

00:24:13,840 --> 00:24:20,559
ensure that no privileged containers

00:24:16,880 --> 00:24:20,559
are installed in the cluster

00:24:27,520 --> 00:24:34,240
let's see how we can do that by enabling

00:24:30,159 --> 00:24:34,240
kubernetes pop security policy

00:24:35,679 --> 00:24:43,600
so here in this cluster i have psp

00:24:39,760 --> 00:24:44,080
controller enabled and by default i have

00:24:43,600 --> 00:24:46,960
a

00:24:44,080 --> 00:24:49,120
privileged psp that already enables

00:24:46,960 --> 00:24:52,320
privileged containers

00:24:49,120 --> 00:24:54,559
in order to disable this behavior as you

00:24:52,320 --> 00:24:57,600
can see here i have a psb

00:24:54,559 --> 00:24:59,120
that in disables privileged containers

00:24:57,600 --> 00:25:02,320
from running

00:24:59,120 --> 00:25:05,440
so next i'm going to deploy

00:25:02,320 --> 00:25:09,520
this psp in the cluster

00:25:05,440 --> 00:25:12,720
and as you can see it is now enabled

00:25:09,520 --> 00:25:15,120
and as a developer i'm going to try

00:25:12,720 --> 00:25:16,159
and create a pod that contains a

00:25:15,120 --> 00:25:19,679
container

00:25:16,159 --> 00:25:22,240
that has the privileged security context

00:25:19,679 --> 00:25:22,240
enabled

00:25:22,960 --> 00:25:30,400
let's see if this will block me

00:25:26,400 --> 00:25:34,960
from creating uh the pod in the

00:25:30,400 --> 00:25:40,720
cluster and this psp basically blocks it

00:25:34,960 --> 00:25:44,559
from doing so next let's see if i

00:25:40,720 --> 00:25:47,600
remove that and make sure that i do not

00:25:44,559 --> 00:25:48,320
enable this privilege permission by

00:25:47,600 --> 00:25:53,840
default

00:25:48,320 --> 00:25:57,520
and it lets me create the pod correctly

00:25:53,840 --> 00:26:01,360
so as an admin i think this is

00:25:57,520 --> 00:26:05,120
really good but what if i want to test

00:26:01,360 --> 00:26:08,880
this behavior and test it

00:26:05,120 --> 00:26:11,919
before enforcing an impact users i can

00:26:08,880 --> 00:26:14,799
use the dry run feature in gatekeeper

00:26:11,919 --> 00:26:15,760
so now in my cluster i already have

00:26:14,799 --> 00:26:18,960
gatekeeper

00:26:15,760 --> 00:26:22,000
components installed and next

00:26:18,960 --> 00:26:23,440
i'm going to deploy the privilege

00:26:22,000 --> 00:26:26,799
container

00:26:23,440 --> 00:26:31,200
constraint template and

00:26:26,799 --> 00:26:36,400
next i'm going to deploy the constraint

00:26:31,200 --> 00:26:38,640
but in a dry run mode so i can test this

00:26:36,400 --> 00:26:40,720
policy in the cluster before enforcing

00:26:38,640 --> 00:26:42,000
it so let's take a look at what the

00:26:40,720 --> 00:26:45,279
template looks like

00:26:42,000 --> 00:26:48,559
um as we talked about it before

00:26:45,279 --> 00:26:52,320
the template actually contains the rego

00:26:48,559 --> 00:26:55,840
rules that will be executed by

00:26:52,320 --> 00:26:59,039
oppa and the target enforcement point is

00:26:55,840 --> 00:26:59,919
a mission kubernetes gatekeeper and

00:26:59,039 --> 00:27:03,200
within

00:26:59,919 --> 00:27:06,799
the rego i'm basically telling

00:27:03,200 --> 00:27:09,520
oppa that the input review object

00:27:06,799 --> 00:27:12,000
for all containers and init containers

00:27:09,520 --> 00:27:13,039
if the security contacts privilege is

00:27:12,000 --> 00:27:17,039
enabled

00:27:13,039 --> 00:27:17,039
then go ahead and disallow it

00:27:17,360 --> 00:27:25,440
so now as a developer i'm going to

00:27:21,039 --> 00:27:28,159
try to create a pod with a container

00:27:25,440 --> 00:27:30,480
with the security context privilege

00:27:28,159 --> 00:27:34,000
enabled

00:27:30,480 --> 00:27:37,039
and because this is now in dry run

00:27:34,000 --> 00:27:40,159
mode it doesn't actually block any

00:27:37,039 --> 00:27:41,279
updates in the cluster so let's take a

00:27:40,159 --> 00:27:44,880
look at

00:27:41,279 --> 00:27:47,279
what the dry run constraint looks like

00:27:44,880 --> 00:27:48,320
now as we mentioned previously the

00:27:47,279 --> 00:27:51,039
constraint

00:27:48,320 --> 00:27:52,320
basically provides parameters to the

00:27:51,039 --> 00:27:54,960
constraint template

00:27:52,320 --> 00:27:56,640
and here as you can see i'm creating a

00:27:54,960 --> 00:27:59,840
constraint

00:27:56,640 --> 00:28:01,360
with the kind ps kubernetes psu

00:27:59,840 --> 00:28:05,039
privilege container

00:28:01,360 --> 00:28:10,799
which is defined here and

00:28:05,039 --> 00:28:15,200
i am applying this policy on pods kind

00:28:10,799 --> 00:28:15,200
and enforcement action is dry run

00:28:15,520 --> 00:28:21,279
now as an ammon

00:28:18,720 --> 00:28:24,080
i want to see how many violating pots

00:28:21,279 --> 00:28:28,320
are actually running in the cluster

00:28:24,080 --> 00:28:28,320
so let's take a look at the constraint

00:28:28,399 --> 00:28:33,200
and as you can see here i have total

00:28:32,080 --> 00:28:35,360
violation

00:28:33,200 --> 00:28:37,200
two and here are the pods that are

00:28:35,360 --> 00:28:39,120
running with privileged containers

00:28:37,200 --> 00:28:42,480
enabled

00:28:39,120 --> 00:28:43,679
so at this point i can actually go and

00:28:42,480 --> 00:28:47,520
update these

00:28:43,679 --> 00:28:50,080
resources and i have

00:28:47,520 --> 00:28:50,799
a pretty good idea of what the impact of

00:28:50,080 --> 00:28:54,080
this

00:28:50,799 --> 00:28:54,559
resource looks like so i am comfortable

00:28:54,080 --> 00:28:58,000
with

00:28:54,559 --> 00:29:00,880
enforcing the policy in the cluster now

00:28:58,000 --> 00:29:01,600
now i'm going to deploy the constraint

00:29:00,880 --> 00:29:04,880
again

00:29:01,600 --> 00:29:08,720
but not in dry run mode

00:29:04,880 --> 00:29:11,520
and what this looks like

00:29:08,720 --> 00:29:12,559
is pretty much the same as before but

00:29:11,520 --> 00:29:16,240
the difference is

00:29:12,559 --> 00:29:19,440
with enforcement action dry run removed

00:29:16,240 --> 00:29:22,720
let's see as a developer i'm going to

00:29:19,440 --> 00:29:25,760
try to create the same pod again

00:29:22,720 --> 00:29:29,120
with privileged

00:29:25,760 --> 00:29:31,600
contacts enabled and let's see if this

00:29:29,120 --> 00:29:32,720
actually blocks me from creating the

00:29:31,600 --> 00:29:34,799
resource

00:29:32,720 --> 00:29:36,080
and as you can see here the gatekeeper

00:29:34,799 --> 00:29:39,279
webhook

00:29:36,080 --> 00:29:43,679
will deny this omission

00:29:39,279 --> 00:29:46,880
request and specify which policy

00:29:43,679 --> 00:29:50,799
is in action and why

00:29:46,880 --> 00:29:53,440
um it was blocked so that's a demo to

00:29:50,799 --> 00:29:57,039
demonstrate how you can use gatekeeper

00:29:53,440 --> 00:29:57,919
to roll out pot security policies and

00:29:57,039 --> 00:30:02,240
enforce

00:29:57,919 --> 00:30:04,799
the security constraints in your cluster

00:30:02,240 --> 00:30:06,720
and next let's talk about the current

00:30:04,799 --> 00:30:08,720
status of gatekeeper

00:30:06,720 --> 00:30:11,039
it is currently beta and we're working

00:30:08,720 --> 00:30:13,919
towards moving into stable

00:30:11,039 --> 00:30:15,679
um so if you have any feedback issues

00:30:13,919 --> 00:30:19,120
enhancements or requests

00:30:15,679 --> 00:30:22,240
please open an issue or join us on slack

00:30:19,120 --> 00:30:26,080
or join us in our

00:30:22,240 --> 00:30:28,000
weekly community calls so here are some

00:30:26,080 --> 00:30:29,600
potential growth in the future that

00:30:28,000 --> 00:30:33,919
we're looking at

00:30:29,600 --> 00:30:36,000
obviously move the project into stable

00:30:33,919 --> 00:30:38,480
status and ensure that it's production

00:30:36,000 --> 00:30:39,840
ready and we are working on a feature

00:30:38,480 --> 00:30:42,559
that emit violations

00:30:39,840 --> 00:30:43,120
as kubernetes events we're also looking

00:30:42,559 --> 00:30:47,520
into

00:30:43,120 --> 00:30:50,640
mutation and supporting external data

00:30:47,520 --> 00:30:52,080
and we're also looking at enabling more

00:30:50,640 --> 00:30:55,520
audit functionalities

00:30:52,080 --> 00:30:57,440
more metrics and more policies

00:30:55,520 --> 00:30:59,360
so that the communities can share some

00:30:57,440 --> 00:31:02,799
of the common

00:30:59,360 --> 00:31:05,039
best practices and more developer tools

00:31:02,799 --> 00:31:08,399
to help us validate

00:31:05,039 --> 00:31:10,960
and test our policies thanks for

00:31:08,399 --> 00:31:11,519
coming and we have lots of places where

00:31:10,960 --> 00:31:13,760
you can come

00:31:11,519 --> 00:31:14,960
join us talk to the open maintainers

00:31:13,760 --> 00:31:18,080
give us feedback

00:31:14,960 --> 00:31:18,799
feature ideas anything you need first

00:31:18,080 --> 00:31:21,120
and foremost

00:31:18,799 --> 00:31:22,399
github is where the projects are hosted

00:31:21,120 --> 00:31:25,039
and maintained

00:31:22,399 --> 00:31:26,080
we do all of our collaboration there so

00:31:25,039 --> 00:31:29,120
check out the projects

00:31:26,080 --> 00:31:31,519
give them stars follow them

00:31:29,120 --> 00:31:32,399
also the slack channel is very active i

00:31:31,519 --> 00:31:35,440
think all of the

00:31:32,399 --> 00:31:37,360
maintainers are there every day all day

00:31:35,440 --> 00:31:39,679
as well as tons of end users so if you

00:31:37,360 --> 00:31:41,519
have questions comments concerns

00:31:39,679 --> 00:31:44,240
check it out it's really good starting

00:31:41,519 --> 00:31:44,240
point for you

00:31:44,960 --> 00:31:51,840
and that's it thank you thanks alright

00:31:49,120 --> 00:31:51,840

YouTube URL: https://www.youtube.com/watch?v=tGVxKU5jRHY


