Title: Notary v2 Introduction and Status Report - Justin Cormack, Docker & Omar Paul, Amazon
Publication date: 2020-08-28
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Notary v2 Introduction and Status Report - Justin Cormack, Docker & Omar Paul, Amazon 

The Notary v2 project is a rework of the infrastructure for container signing, supporting additional OCI Artifacts, such as Helm, Singularity and CNAB. It addresses the design and usability issues that have been found with Notary v1, and signing in a multi-registry world. The major focus being signatures as first class elements of registries rather than running a sidecar database. It addresses the signing usability issues enabling broad provider and customer adoption. This session will give an overview of the Notary v2 community project at present, and the roadmap. This session is for anyone interested in container signing and what the new project is working on.

https://sched.co/Zewy
Captions: 
	00:00:00,160 --> 00:00:07,600
hello um

00:00:03,040 --> 00:00:10,880
today we're covering the notary v2

00:00:07,600 --> 00:00:12,960
introduction status report so um

00:00:10,880 --> 00:00:15,120
we've been working on a second version

00:00:12,960 --> 00:00:17,199
of notary for a while and um

00:00:15,120 --> 00:00:19,039
there's an advanced talk later on going

00:00:17,199 --> 00:00:21,359
through some of the

00:00:19,039 --> 00:00:22,560
detailed work but this is really

00:00:21,359 --> 00:00:25,760
introducing where we are

00:00:22,560 --> 00:00:26,320
and what's going on um this is a joint

00:00:25,760 --> 00:00:29,359
thing with

00:00:26,320 --> 00:00:33,200
me and homer paul from amazon i'm a

00:00:29,359 --> 00:00:37,040
notary maintainer i work for um

00:00:33,200 --> 00:00:38,000
docker i'm on the cftsc and i work a lot

00:00:37,040 --> 00:00:40,960
of time with

00:00:38,000 --> 00:00:41,920
um security and i'm really interested in

00:00:40,960 --> 00:00:45,039
the whole

00:00:41,920 --> 00:00:48,160
security space across cloud native and

00:00:45,039 --> 00:00:50,960
i'm um product manager

00:00:48,160 --> 00:00:51,920
at amazon ecr so he's very much involved

00:00:50,960 --> 00:00:53,920
in the

00:00:51,920 --> 00:00:56,840
registry space one of the one of the

00:00:53,920 --> 00:00:59,520
largest registry operators

00:00:56,840 --> 00:01:01,199
um so what is notre if you're not

00:00:59,520 --> 00:01:05,119
familiar with notary

00:01:01,199 --> 00:01:06,720
um it's a cncf project it allows you to

00:01:05,119 --> 00:01:09,040
it provides provenance and supply chain

00:01:06,720 --> 00:01:11,280
security for container images

00:01:09,040 --> 00:01:13,280
basically in the sort of simplest sense

00:01:11,280 --> 00:01:13,760
allows you to sign a container image to

00:01:13,280 --> 00:01:16,960
say

00:01:13,760 --> 00:01:19,520
that's i made this

00:01:16,960 --> 00:01:20,560
the simplest use case is really just um

00:01:19,520 --> 00:01:23,840
signing

00:01:20,560 --> 00:01:26,640
you know my container um

00:01:23,840 --> 00:01:28,720
in say when i'm building it on my laptop

00:01:26,640 --> 00:01:30,960
and then making sure that when i

00:01:28,720 --> 00:01:32,720
pull the same version number from my

00:01:30,960 --> 00:01:34,720
registry i'm going to get exactly the

00:01:32,720 --> 00:01:37,280
same container back

00:01:34,720 --> 00:01:38,960
um you know that someone else hasn't

00:01:37,280 --> 00:01:39,520
some attacker hasn't maliciously come

00:01:38,960 --> 00:01:41,200
and

00:01:39,520 --> 00:01:43,040
stuck at a different container in there

00:01:41,200 --> 00:01:45,200
or even one of my co-workers

00:01:43,040 --> 00:01:47,600
or if you know if i sign is i want to

00:01:45,200 --> 00:01:49,600
know it was my container

00:01:47,600 --> 00:01:51,920
um nature is based on the update

00:01:49,600 --> 00:01:53,759
framework or tough which is also cncf

00:01:51,920 --> 00:01:55,920
project

00:01:53,759 --> 00:01:59,200
and it uses uses tough as part of the

00:01:55,920 --> 00:01:59,200
security model for it

00:01:59,600 --> 00:02:03,360
and it generally notary provides kind of

00:02:02,560 --> 00:02:05,280
fairly raw

00:02:03,360 --> 00:02:07,360
tools and it provides the server-side

00:02:05,280 --> 00:02:08,000
piece it's often embedded in more

00:02:07,360 --> 00:02:10,239
opinionated

00:02:08,000 --> 00:02:11,840
tooling so docker content trust was

00:02:10,239 --> 00:02:14,239
something we built a docker that

00:02:11,840 --> 00:02:15,440
made kind of easy to use workflows for

00:02:14,239 --> 00:02:17,920
signing

00:02:15,440 --> 00:02:19,200
um and cnab is doing something similar

00:02:17,920 --> 00:02:22,239
using

00:02:19,200 --> 00:02:24,239
nature as well so so it's um you know

00:02:22,239 --> 00:02:27,280
it's the server implementation and it's

00:02:24,239 --> 00:02:28,239
it's a set of libraries and um tooling

00:02:27,280 --> 00:02:30,879
you can

00:02:28,239 --> 00:02:32,640
use directly but ideally it's got a

00:02:30,879 --> 00:02:34,959
nicer wrapped interface in something

00:02:32,640 --> 00:02:34,959
else

00:02:35,360 --> 00:02:39,200
in the enterprise consulting assigning

00:02:38,000 --> 00:02:42,560
is really about

00:02:39,200 --> 00:02:44,080
having um easy integration

00:02:42,560 --> 00:02:46,000
supply chain we're going to talk about

00:02:44,080 --> 00:02:47,920
supply chain in a minute

00:02:46,000 --> 00:02:50,160
validating storing and displaying the

00:02:47,920 --> 00:02:52,239
images you want

00:02:50,160 --> 00:02:53,200
setting up policies around signatures to

00:02:52,239 --> 00:02:55,040
make sure that

00:02:53,200 --> 00:02:56,319
things that are run in production are

00:02:55,040 --> 00:02:59,040
signed

00:02:56,319 --> 00:03:01,040
um making sure that we have freshness

00:02:59,040 --> 00:03:02,239
and immutability and so on which are

00:03:01,040 --> 00:03:05,360
some of the guarantees that

00:03:02,239 --> 00:03:05,760
tough helps give you in it's not free

00:03:05,360 --> 00:03:07,519
about

00:03:05,760 --> 00:03:10,239
to make sure that you are actually

00:03:07,519 --> 00:03:12,560
getting the latest version of an image

00:03:10,239 --> 00:03:14,319
um and this is part of your governance

00:03:12,560 --> 00:03:15,680
you know you've got central governance

00:03:14,319 --> 00:03:18,959
and compliance you've got

00:03:15,680 --> 00:03:20,720
to answer to auditors about your

00:03:18,959 --> 00:03:22,800
governance and you've got to

00:03:20,720 --> 00:03:24,480
manage and audit the history of the

00:03:22,800 --> 00:03:26,560
artifacts that went into production

00:03:24,480 --> 00:03:27,840
and know that they were exactly what you

00:03:26,560 --> 00:03:29,519
thought they were

00:03:27,840 --> 00:03:30,720
because the last thing we want to do is

00:03:29,519 --> 00:03:33,840
have things go into production they're

00:03:30,720 --> 00:03:33,840
not what we thought they were

00:03:34,080 --> 00:03:38,000
automated deployments are kind of i mean

00:03:37,200 --> 00:03:39,920
obviously they're a

00:03:38,000 --> 00:03:41,360
foundation of what we do in cloud native

00:03:39,920 --> 00:03:43,519
and continuous deployment is

00:03:41,360 --> 00:03:44,640
one of the key pieces of cloud native

00:03:43,519 --> 00:03:46,879
workflows

00:03:44,640 --> 00:03:48,000
but they do provide new attack factors

00:03:46,879 --> 00:03:50,480
um

00:03:48,000 --> 00:03:52,480
if you one thing that attackers have

00:03:50,480 --> 00:03:54,400
noticed recently is that if you protect

00:03:52,480 --> 00:03:56,560
your production infrastructure then

00:03:54,400 --> 00:03:58,319
maybe it becomes easier to attack the

00:03:56,560 --> 00:03:59,120
deployment infrastructure and there's

00:03:58,319 --> 00:04:01,040
been a lot of

00:03:59,120 --> 00:04:02,480
interesting cases which we'll look at in

00:04:01,040 --> 00:04:04,560
a second

00:04:02,480 --> 00:04:05,599
there are so many places you can attack

00:04:04,560 --> 00:04:09,040
in

00:04:05,599 --> 00:04:12,560
in the deployment workflow that can be

00:04:09,040 --> 00:04:17,199
um weak um this is a

00:04:12,560 --> 00:04:20,720
great article from gartner from 2018

00:04:17,199 --> 00:04:22,240
um around on container security

00:04:20,720 --> 00:04:24,080
i'm covering threat factors in an

00:04:22,240 --> 00:04:25,120
automated deployment process and you can

00:04:24,080 --> 00:04:27,040
see

00:04:25,120 --> 00:04:28,560
everywhere those little red arrows there

00:04:27,040 --> 00:04:29,919
are places you can attack

00:04:28,560 --> 00:04:32,800
so everywhere from the developer's

00:04:29,919 --> 00:04:35,360
laptop right at the beginning

00:04:32,800 --> 00:04:37,680
um through to dependencies and

00:04:35,360 --> 00:04:42,000
deployment systems and registries

00:04:37,680 --> 00:04:45,759
and um you know

00:04:42,000 --> 00:04:49,759
um everything really um

00:04:45,759 --> 00:04:49,759
up to you know up to production

00:04:50,240 --> 00:04:53,280
some recent examples of supply chain

00:04:52,080 --> 00:04:56,639
attacks that we've seen

00:04:53,280 --> 00:04:58,000
um there's a these are kind of high

00:04:56,639 --> 00:04:59,440
profile ones but um

00:04:58,000 --> 00:05:01,039
they've and they're definitely becoming

00:04:59,440 --> 00:05:04,720
more common

00:05:01,039 --> 00:05:08,800
um asus shadowhammer updater attack

00:05:04,720 --> 00:05:10,639
was um added code before

00:05:08,800 --> 00:05:12,800
the script you know the automated piece

00:05:10,639 --> 00:05:15,840
of deployment that did the signing so

00:05:12,800 --> 00:05:17,280
everything was signed um and it was an

00:05:15,840 --> 00:05:19,520
interesting one because it was

00:05:17,280 --> 00:05:22,240
only act the hack was only activated on

00:05:19,520 --> 00:05:24,479
55 specific mac addresses so most users

00:05:22,240 --> 00:05:26,479
didn't notice anything was wrong but

00:05:24,479 --> 00:05:27,759
55 computers in the world were being

00:05:26,479 --> 00:05:30,720
targeted

00:05:27,759 --> 00:05:32,000
for um being attacked which is kind of

00:05:30,720 --> 00:05:34,960
interesting

00:05:32,000 --> 00:05:37,520
um there's also similar with the mpm

00:05:34,960 --> 00:05:38,880
event stream of hack and in 2018

00:05:37,520 --> 00:05:40,720
where this is where an attacker

00:05:38,880 --> 00:05:42,400
helpfully offered to maintain an

00:05:40,720 --> 00:05:44,800
unmaintained open source project

00:05:42,400 --> 00:05:46,400
seemed a nice thing to do um and

00:05:44,800 --> 00:05:49,520
inserted a back door

00:05:46,400 --> 00:05:51,440
targeted it specifically at developers

00:05:49,520 --> 00:05:53,039
of a particular application again so

00:05:51,440 --> 00:05:54,479
again most users didn't notice they

00:05:53,039 --> 00:05:56,080
didn't alert anyone because nothing

00:05:54,479 --> 00:05:57,759
weird happened but these developers were

00:05:56,080 --> 00:06:00,960
being targeted

00:05:57,759 --> 00:06:02,800
and then not purcha in 2017 again ship

00:06:00,960 --> 00:06:07,600
fire an update to a tax management

00:06:02,800 --> 00:06:10,400
program that is widely used in um

00:06:07,600 --> 00:06:11,600
much of europe and then from there it

00:06:10,400 --> 00:06:14,160
went and attacked

00:06:11,600 --> 00:06:15,759
other users again the update was signed

00:06:14,160 --> 00:06:17,600
by an automated process

00:06:15,759 --> 00:06:19,680
and the bill because the build server

00:06:17,600 --> 00:06:21,520
was totally compromised

00:06:19,680 --> 00:06:23,280
damages from that were estimated 10

00:06:21,520 --> 00:06:25,759
billion dollars so

00:06:23,280 --> 00:06:26,800
there is a very much becoming high

00:06:25,759 --> 00:06:29,919
profile

00:06:26,800 --> 00:06:30,400
attacks of interest and so you know this

00:06:29,919 --> 00:06:33,440
is

00:06:30,400 --> 00:06:35,680
where i we need to start thinking about

00:06:33,440 --> 00:06:37,759
about building these processes into our

00:06:35,680 --> 00:06:42,479
supply chain

00:06:37,759 --> 00:06:46,080
so um the notary v2 process started off

00:06:42,479 --> 00:06:49,599
around kubecon san diego um

00:06:46,080 --> 00:06:54,000
amazon and azure uh microsoft and docker

00:06:49,599 --> 00:06:56,479
met up and um and i did a presentation

00:06:54,000 --> 00:06:57,199
about um the kind of issues we were

00:06:56,479 --> 00:06:59,840
seeing

00:06:57,199 --> 00:07:00,800
um at cube garden we had a kickoff in

00:06:59,840 --> 00:07:04,160
seattle

00:07:00,800 --> 00:07:07,280
back in the days when we could

00:07:04,160 --> 00:07:08,479
meet people back in december um and then

00:07:07,280 --> 00:07:11,599
we've been working on a

00:07:08,479 --> 00:07:14,560
on our weekly cadence um

00:07:11,599 --> 00:07:15,120
everything's in the cncf slack channel

00:07:14,560 --> 00:07:16,720
and on

00:07:15,120 --> 00:07:18,720
open meeting notes and recordings are

00:07:16,720 --> 00:07:20,479
available on youtube as usual

00:07:18,720 --> 00:07:22,319
um so we've been working on it since

00:07:20,479 --> 00:07:26,800
then

00:07:22,319 --> 00:07:28,800
so why do we need version two um

00:07:26,800 --> 00:07:30,639
the main issue there's a whole bunch of

00:07:28,800 --> 00:07:32,720
issues but the most important ones

00:07:30,639 --> 00:07:35,039
really were

00:07:32,720 --> 00:07:37,280
making it a registry native service so

00:07:35,039 --> 00:07:39,360
notre v1 is a service that runs

00:07:37,280 --> 00:07:41,360
on the side of your registry um

00:07:39,360 --> 00:07:42,960
basically has its own separate database

00:07:41,360 --> 00:07:46,479
from the registry

00:07:42,960 --> 00:07:47,520
sits there um and you know runs in

00:07:46,479 --> 00:07:49,360
parallel

00:07:47,520 --> 00:07:51,199
this is an issue for a lot of reasons

00:07:49,360 --> 00:07:52,000
one of which is that not every registry

00:07:51,199 --> 00:07:54,879
runs this

00:07:52,000 --> 00:07:55,919
it's not a part of the registry that's

00:07:54,879 --> 00:07:57,199
native

00:07:55,919 --> 00:07:59,520
i will talk about more of the reasons

00:07:57,199 --> 00:08:02,479
later um

00:07:59,520 --> 00:08:03,680
usability we identified a whole bunch of

00:08:02,479 --> 00:08:05,280
usability issues

00:08:03,680 --> 00:08:07,840
some of which were due to design and

00:08:05,280 --> 00:08:08,960
some implementation and so

00:08:07,840 --> 00:08:11,199
there's a lot of things that need to be

00:08:08,960 --> 00:08:13,840
done there um

00:08:11,199 --> 00:08:15,240
as well as usability in the kind of

00:08:13,840 --> 00:08:17,919
normal use cases

00:08:15,240 --> 00:08:20,000
understandability and debuggability

00:08:17,919 --> 00:08:21,840
being able to understand

00:08:20,000 --> 00:08:23,759
how it works and being able to fix

00:08:21,840 --> 00:08:24,160
things when things go wrong which are

00:08:23,759 --> 00:08:26,879
all

00:08:24,160 --> 00:08:27,599
really important things that have proved

00:08:26,879 --> 00:08:30,800
to be

00:08:27,599 --> 00:08:34,479
not as easy as we'd like um

00:08:30,800 --> 00:08:37,279
notary v1 is used but it's

00:08:34,479 --> 00:08:37,760
fairly niche and we'd like this to be

00:08:37,279 --> 00:08:39,680
you know

00:08:37,760 --> 00:08:42,479
really widespread we'd like it be able

00:08:39,680 --> 00:08:46,160
so that everyone can use it

00:08:42,479 --> 00:08:48,959
and obviously this is a security

00:08:46,160 --> 00:08:51,120
product so we want it to be secure and

00:08:48,959 --> 00:08:53,519
to have clear understandable security

00:08:51,120 --> 00:08:54,720
properties that people really get and

00:08:53,519 --> 00:08:58,240
there's a whole bunch of

00:08:54,720 --> 00:09:00,640
things we'll talk about there

00:08:58,240 --> 00:09:02,320
so registry native we really want all

00:09:00,640 --> 00:09:03,040
the data basically stored in the

00:09:02,320 --> 00:09:05,680
registry

00:09:03,040 --> 00:09:07,120
not in a separate database this is it's

00:09:05,680 --> 00:09:08,720
turned out to be a really important

00:09:07,120 --> 00:09:10,399
thing and it's kind of come up a lot

00:09:08,720 --> 00:09:13,200
because

00:09:10,399 --> 00:09:14,240
um people are using registries to store

00:09:13,200 --> 00:09:16,080
more things

00:09:14,240 --> 00:09:17,920
not just container images such as helm

00:09:16,080 --> 00:09:19,839
charts and so on and

00:09:17,920 --> 00:09:21,519
there's an ecosystem around the registry

00:09:19,839 --> 00:09:22,640
now in a way that there wasn't so much

00:09:21,519 --> 00:09:24,480
potent perhaps

00:09:22,640 --> 00:09:26,320
when notary was new i mean nature was

00:09:24,480 --> 00:09:27,360
from 2015 when it was really in the

00:09:26,320 --> 00:09:31,519
early days of

00:09:27,360 --> 00:09:33,040
containers so um

00:09:31,519 --> 00:09:36,160
then it was kind of easier to have it as

00:09:33,040 --> 00:09:37,680
a side service but it requires

00:09:36,160 --> 00:09:39,519
registry operators to install and manage

00:09:37,680 --> 00:09:41,200
another service which not all of them

00:09:39,519 --> 00:09:42,880
have so you know you can

00:09:41,200 --> 00:09:44,800
get notary on docker hub and you can get

00:09:42,880 --> 00:09:47,760
it on azure

00:09:44,800 --> 00:09:49,680
and harbour supports it but for example

00:09:47,760 --> 00:09:51,360
amazon does not at the moment and many

00:09:49,680 --> 00:09:52,640
other registries don't so you don't

00:09:51,360 --> 00:09:54,800
know if you're going to be able to use

00:09:52,640 --> 00:09:57,040
signatures which is kind of un

00:09:54,800 --> 00:09:58,320
helpful if you want to move things

00:09:57,040 --> 00:10:01,040
around

00:09:58,320 --> 00:10:02,320
the apis are not designed for moving

00:10:01,040 --> 00:10:04,240
signatures around

00:10:02,320 --> 00:10:05,680
easily either there's no simple push and

00:10:04,240 --> 00:10:09,200
pull api there's

00:10:05,680 --> 00:10:11,440
you can sign and you can verify

00:10:09,200 --> 00:10:12,560
um but it's much more difficult to

00:10:11,440 --> 00:10:14,959
actually just move

00:10:12,560 --> 00:10:16,240
signing data around because people use a

00:10:14,959 --> 00:10:18,399
lot more registries

00:10:16,240 --> 00:10:20,000
now for different purposes like

00:10:18,399 --> 00:10:20,640
different registers for production and

00:10:20,000 --> 00:10:22,320
development

00:10:20,640 --> 00:10:23,920
and things that's become really

00:10:22,320 --> 00:10:25,760
important

00:10:23,920 --> 00:10:27,200
um so we really want it to be that you

00:10:25,760 --> 00:10:28,880
know when you push and pull images

00:10:27,200 --> 00:10:30,880
between registries the signatures come

00:10:28,880 --> 00:10:33,519
with them as well

00:10:30,880 --> 00:10:35,279
and we want to validate signatures

00:10:33,519 --> 00:10:36,240
wherever the content is located there

00:10:35,279 --> 00:10:39,040
was some

00:10:36,240 --> 00:10:40,560
issues around notre dame v1 making some

00:10:39,040 --> 00:10:42,480
assumptions about

00:10:40,560 --> 00:10:44,240
the registry where the signature was is

00:10:42,480 --> 00:10:44,720
the same as the registry you pull from

00:10:44,240 --> 00:10:48,560
that

00:10:44,720 --> 00:10:48,560
caused a bunch of issues

00:10:49,519 --> 00:10:54,000
people also want to use signing not in a

00:10:51,680 --> 00:10:55,920
registry we've had a lot of

00:10:54,000 --> 00:10:57,839
use cases being brought up where people

00:10:55,920 --> 00:10:59,200
want to use containers in offline and

00:10:57,839 --> 00:11:03,120
disconnected environments

00:10:59,200 --> 00:11:06,320
this wasn't really much of a use case

00:11:03,120 --> 00:11:08,000
when we designed notary v1 it does have

00:11:06,320 --> 00:11:12,320
some tooling to support that

00:11:08,000 --> 00:11:14,399
but it's not um ideal it wasn't really a

00:11:12,320 --> 00:11:17,519
design requirement at the time it

00:11:14,399 --> 00:11:18,240
you can kind of make it work but um you

00:11:17,519 --> 00:11:22,240
have to

00:11:18,240 --> 00:11:24,079
know what you're doing um if

00:11:22,240 --> 00:11:26,959
if we have a standard mapping between

00:11:24,079 --> 00:11:29,680
the registry and um

00:11:26,959 --> 00:11:30,480
and faster to mapping say for local use

00:11:29,680 --> 00:11:32,560
then as much

00:11:30,480 --> 00:11:33,920
or a cached offline registry that you

00:11:32,560 --> 00:11:34,560
can use or whatever then that's much

00:11:33,920 --> 00:11:37,440
easier

00:11:34,560 --> 00:11:39,120
so um we really want to support those

00:11:37,440 --> 00:11:39,680
use cases a lot of people say that they

00:11:39,120 --> 00:11:41,360
are not

00:11:39,680 --> 00:11:43,839
always connected to the internet at all

00:11:41,360 --> 00:11:43,839
times

00:11:44,720 --> 00:11:52,320
usability is something that we really um

00:11:48,399 --> 00:11:53,839
we need to work on so the raw notary

00:11:52,320 --> 00:11:56,480
interfaces

00:11:53,839 --> 00:11:58,480
with the actual kind of plumbing

00:11:56,480 --> 00:12:01,519
commands that nature gives you are not

00:11:58,480 --> 00:12:04,399
that easy to use um

00:12:01,519 --> 00:12:05,760
after a few kind of years at docker we

00:12:04,399 --> 00:12:07,360
decided that

00:12:05,760 --> 00:12:09,040
they were not really suitable for end

00:12:07,360 --> 00:12:10,800
users and we introduced a set of docker

00:12:09,040 --> 00:12:12,000
trust commands to make a more friendly

00:12:10,800 --> 00:12:14,959
interface but

00:12:12,000 --> 00:12:16,720
although that's a covers only uh quite

00:12:14,959 --> 00:12:18,000
an opinionated workflow on how to use

00:12:16,720 --> 00:12:19,839
notary it doesn't

00:12:18,000 --> 00:12:21,600
give you all the options that upstream

00:12:19,839 --> 00:12:24,800
gives you but it's um

00:12:21,600 --> 00:12:28,160
way easier to use um

00:12:24,800 --> 00:12:29,040
it's still there's still difficulties

00:12:28,160 --> 00:12:30,639
even with

00:12:29,040 --> 00:12:33,360
that kind of simpler interface but i

00:12:30,639 --> 00:12:34,079
think it gives us an idea of what kind

00:12:33,360 --> 00:12:36,079
of you know

00:12:34,079 --> 00:12:37,360
is what kind of interfaces are better

00:12:36,079 --> 00:12:39,120
but the um

00:12:37,360 --> 00:12:42,320
the other problem was key management

00:12:39,120 --> 00:12:45,519
there's a lot of keys with an a3 v1

00:12:42,320 --> 00:12:46,800
um there's a root key for every registry

00:12:45,519 --> 00:12:48,959
repository so

00:12:46,800 --> 00:12:50,880
a normal user might have a lot of

00:12:48,959 --> 00:12:52,720
different route keys and an organization

00:12:50,880 --> 00:12:54,240
might have hundreds of thousands even of

00:12:52,720 --> 00:12:55,920
root keys

00:12:54,240 --> 00:12:58,560
and then there are the other keys as

00:12:55,920 --> 00:13:00,880
well as the root keys that derive

00:12:58,560 --> 00:13:02,000
so you end up with a very large number

00:13:00,880 --> 00:13:05,120
of keys to manage

00:13:02,000 --> 00:13:06,800
keys then expire users not

00:13:05,120 --> 00:13:08,720
very good at remembering to do things

00:13:06,800 --> 00:13:12,560
about keys when they expire

00:13:08,720 --> 00:13:15,600
um we most people i think went for

00:13:12,560 --> 00:13:16,000
long-lived keys so um the expiry time

00:13:15,600 --> 00:13:17,600
was

00:13:16,000 --> 00:13:20,480
you know it's expiry was not something

00:13:17,600 --> 00:13:22,959
that was people managed very often so

00:13:20,480 --> 00:13:24,079
as we learnt with tls the less often you

00:13:22,959 --> 00:13:27,360
um

00:13:24,079 --> 00:13:29,839
expire keys the more annoying they are

00:13:27,360 --> 00:13:32,560
um and users are really not used to

00:13:29,839 --> 00:13:34,000
managing that kind of scale of keys

00:13:32,560 --> 00:13:35,839
and so we have we've had a lot of

00:13:34,000 --> 00:13:38,000
problems with um

00:13:35,839 --> 00:13:39,279
with that from a usability point of view

00:13:38,000 --> 00:13:42,399
um you know

00:13:39,279 --> 00:13:46,240
backups and all those kinds of things so

00:13:42,399 --> 00:13:47,839
um um we really need to

00:13:46,240 --> 00:13:49,519
improve the key management side of

00:13:47,839 --> 00:13:52,800
usability and as well

00:13:49,519 --> 00:13:54,720
for your v2 um

00:13:52,800 --> 00:13:57,680
understandability and debuggability i

00:13:54,720 --> 00:13:57,680
think we

00:13:58,399 --> 00:14:02,399
it's definitely the case that um most

00:14:01,839 --> 00:14:06,480
people

00:14:02,399 --> 00:14:07,360
don't understand the security model that

00:14:06,480 --> 00:14:10,399
tough

00:14:07,360 --> 00:14:12,160
is using and that's partly our fault but

00:14:10,399 --> 00:14:13,440
for not explaining it clearly but it's

00:14:12,160 --> 00:14:17,120
also

00:14:13,440 --> 00:14:19,279
um it's partly um the

00:14:17,120 --> 00:14:20,959
interfaces are not that great for

00:14:19,279 --> 00:14:22,720
actually understanding

00:14:20,959 --> 00:14:24,880
you know and observing what's going on

00:14:22,720 --> 00:14:28,399
and understanding when failures

00:14:24,880 --> 00:14:30,480
happen and um this is a sort of it's

00:14:28,399 --> 00:14:33,680
partly a documentation issue and partly

00:14:30,480 --> 00:14:36,800
an observability issue and partly a

00:14:33,680 --> 00:14:39,199
a design issue and partly

00:14:36,800 --> 00:14:40,560
an education issue so there's a lot of

00:14:39,199 --> 00:14:43,680
work to make sure

00:14:40,560 --> 00:14:47,680
needs to be done to make sure that um

00:14:43,680 --> 00:14:49,680
we have the right explanations on hand

00:14:47,680 --> 00:14:51,839
for this and i think even during this

00:14:49,680 --> 00:14:53,440
process it's been clear that

00:14:51,839 --> 00:14:54,880
people have very expect different

00:14:53,440 --> 00:14:57,440
expectations of what

00:14:54,880 --> 00:14:58,800
i've signed this image actually means

00:14:57,440 --> 00:15:02,720
and

00:14:58,800 --> 00:15:05,839
that's kind of um people have a an

00:15:02,720 --> 00:15:07,680
intuition which isn't always um what the

00:15:05,839 --> 00:15:10,480
system is providing and that's really

00:15:07,680 --> 00:15:13,360
difficult to deal with sometimes because

00:15:10,480 --> 00:15:14,000
intuitions are kind of difficult to

00:15:13,360 --> 00:15:17,199
change

00:15:14,000 --> 00:15:19,839
so we've got a lot of work to do there

00:15:17,199 --> 00:15:21,440
and and it's you know very obvious even

00:15:19,839 --> 00:15:23,760
in the process that

00:15:21,440 --> 00:15:25,519
working with people who are familiar

00:15:23,760 --> 00:15:26,560
with these things that it's not actually

00:15:25,519 --> 00:15:30,480
um

00:15:26,560 --> 00:15:30,480
it's not actually the easiest thing

00:15:30,880 --> 00:15:37,600
um in terms of usage and adoption

00:15:34,320 --> 00:15:41,360
uh notre v1 usage is not that high

00:15:37,600 --> 00:15:44,399
it's you know kind of um when

00:15:41,360 --> 00:15:47,600
when we were designing um

00:15:44,399 --> 00:15:50,160
the previous the um

00:15:47,600 --> 00:15:51,040
present system that came before notary

00:15:50,160 --> 00:15:54,320
v1

00:15:51,040 --> 00:15:57,040
every image was signed um

00:15:54,320 --> 00:15:57,680
that wasn't a great uh so arguably you

00:15:57,040 --> 00:15:59,120
could say oh

00:15:57,680 --> 00:16:01,920
everyone used it it was great but in

00:15:59,120 --> 00:16:04,800
practice it had other issues about

00:16:01,920 --> 00:16:07,360
every image was signed but there was no

00:16:04,800 --> 00:16:09,440
reasonable way of knowing which keys

00:16:07,360 --> 00:16:12,480
you should trust so it didn't the

00:16:09,440 --> 00:16:16,320
signing didn't really actually matter

00:16:12,480 --> 00:16:17,519
um but the um yeah the usage is just not

00:16:16,320 --> 00:16:20,959
as high as we would like

00:16:17,519 --> 00:16:22,480
we would like um everyone to use this

00:16:20,959 --> 00:16:24,560
rather than it to be a niche

00:16:22,480 --> 00:16:26,000
thing because we want everyone to

00:16:24,560 --> 00:16:28,000
benefit from security understand the

00:16:26,000 --> 00:16:29,839
benefits of security and

00:16:28,000 --> 00:16:31,680
it shouldn't be a burden to use it

00:16:29,839 --> 00:16:33,360
should just be a natural part of

00:16:31,680 --> 00:16:35,360
the tooling that we all use with

00:16:33,360 --> 00:16:36,800
containers things should be signed and

00:16:35,360 --> 00:16:39,839
checked and

00:16:36,800 --> 00:16:40,480
and tell you that there's an error as i

00:16:39,839 --> 00:16:42,240
said earlier

00:16:40,480 --> 00:16:44,720
like not every registry supported

00:16:42,240 --> 00:16:46,240
signing before so

00:16:44,720 --> 00:16:48,079
because it was an add-on we wanted to be

00:16:46,240 --> 00:16:50,800
built in so that really you can

00:16:48,079 --> 00:16:51,600
guarantee you can use it everywhere

00:16:50,800 --> 00:16:53,519
which would just

00:16:51,600 --> 00:16:54,959
you know get rid of some of the barrier

00:16:53,519 --> 00:16:58,079
for usage which is just

00:16:54,959 --> 00:16:58,560
like not not it not being available in

00:16:58,079 --> 00:17:02,320
your

00:16:58,560 --> 00:17:05,360
environment um

00:17:02,320 --> 00:17:07,280
security properties we want as i said

00:17:05,360 --> 00:17:10,160
the security properties to be

00:17:07,280 --> 00:17:10,799
understood and understandable and well

00:17:10,160 --> 00:17:14,720
written

00:17:10,799 --> 00:17:16,480
well explained um but we also

00:17:14,720 --> 00:17:18,559
i think there's a big feeling that we

00:17:16,480 --> 00:17:19,439
don't we want to work with the way that

00:17:18,559 --> 00:17:23,120
people

00:17:19,439 --> 00:17:25,039
use container images now rather than

00:17:23,120 --> 00:17:26,559
tell people that they have to use things

00:17:25,039 --> 00:17:26,959
differently in order to get security

00:17:26,559 --> 00:17:28,960
because

00:17:26,959 --> 00:17:30,400
that way they'll probably decide to

00:17:28,960 --> 00:17:33,600
carry on using things the same way

00:17:30,400 --> 00:17:35,600
because of familiarity

00:17:33,600 --> 00:17:36,640
so we'd right we don't want to be

00:17:35,600 --> 00:17:38,240
sitting there telling people their

00:17:36,640 --> 00:17:41,039
workflows are wrong

00:17:38,240 --> 00:17:42,880
although i mean there are definitely

00:17:41,039 --> 00:17:45,760
issues with how the workflows

00:17:42,880 --> 00:17:46,080
are and um the things we should probably

00:17:45,760 --> 00:17:49,200
do

00:17:46,080 --> 00:17:49,919
over time to make them better but the

00:17:49,200 --> 00:17:53,200
goal is

00:17:49,919 --> 00:17:54,640
not to prescribe a workflow and then say

00:17:53,200 --> 00:17:57,679
this workflow is secure and other

00:17:54,640 --> 00:18:00,799
workflows are not secure because then

00:17:57,679 --> 00:18:02,960
i guess in the way of adoption um

00:18:00,799 --> 00:18:06,160
but some of the security properties are

00:18:02,960 --> 00:18:09,280
different so for example notary v1

00:18:06,160 --> 00:18:14,400
unlike tough is trust on first used

00:18:09,280 --> 00:18:16,960
um and so trust on first use is what um

00:18:14,400 --> 00:18:18,640
successfully has been used by ssh or

00:18:16,960 --> 00:18:20,080
relatively successfully where when you

00:18:18,640 --> 00:18:22,080
log into a machine the first time it

00:18:20,080 --> 00:18:25,200
says do you want to trust this key

00:18:22,080 --> 00:18:27,360
you're supposed to check and then

00:18:25,200 --> 00:18:28,720
in future you know that the key hasn't

00:18:27,360 --> 00:18:30,400
been changed so someone hasn't logged

00:18:28,720 --> 00:18:32,640
into that machine

00:18:30,400 --> 00:18:33,840
obviously if the first time you log into

00:18:32,640 --> 00:18:38,000
the machine

00:18:33,840 --> 00:18:40,000
someone has already replaced the key um

00:18:38,000 --> 00:18:41,200
or it's not even the machine you think

00:18:40,000 --> 00:18:43,280
it is then there's a

00:18:41,200 --> 00:18:45,200
you've got a problem but if it happens

00:18:43,280 --> 00:18:47,840
later then it is actually protecting you

00:18:45,200 --> 00:18:49,120
and that's kind of useful for that but

00:18:47,840 --> 00:18:50,880
in the cloud native world we have a lot

00:18:49,120 --> 00:18:52,720
of ephemeral machines and if you have a

00:18:50,880 --> 00:18:54,640
ephemeral if you spin up an ephemeral

00:18:52,720 --> 00:18:57,200
machine and then it tries to

00:18:54,640 --> 00:18:59,200
check a key with trust on first use it's

00:18:57,200 --> 00:19:02,480
always the first use because

00:18:59,200 --> 00:19:04,400
if your container only gets spanner up

00:19:02,480 --> 00:19:05,520
once runs something and then goes away

00:19:04,400 --> 00:19:09,039
again

00:19:05,520 --> 00:19:10,640
that it doesn't have any history of what

00:19:09,039 --> 00:19:12,559
you know what the keys used to be or

00:19:10,640 --> 00:19:14,880
anything so trust on first use is

00:19:12,559 --> 00:19:16,480
fundamentally problematic in a cloud

00:19:14,880 --> 00:19:18,640
native environment

00:19:16,480 --> 00:19:20,480
and ephemeral machines are really really

00:19:18,640 --> 00:19:22,880
important in female containers we

00:19:20,480 --> 00:19:24,720
everything is ephemeral and in the cloud

00:19:22,880 --> 00:19:26,960
native world so

00:19:24,720 --> 00:19:28,400
we really can't rely on that kind of

00:19:26,960 --> 00:19:30,320
mechanism and so that's one of the

00:19:28,400 --> 00:19:33,039
things in nature v1 that

00:19:30,320 --> 00:19:35,200
you know i think is a is not giving

00:19:33,039 --> 00:19:37,360
people the security guarantees that

00:19:35,200 --> 00:19:39,200
they would think they were getting

00:19:37,360 --> 00:19:41,360
because notary v1 gives

00:19:39,200 --> 00:19:42,880
you tough but it gives you a version of

00:19:41,360 --> 00:19:45,120
taft that

00:19:42,880 --> 00:19:45,919
has a different key management decision

00:19:45,120 --> 00:19:49,919
and that's

00:19:45,919 --> 00:19:51,679
um um problematic actually nursery

00:19:49,919 --> 00:19:53,080
technically gives you a choice of key

00:19:51,679 --> 00:19:55,440
management but the

00:19:53,080 --> 00:19:58,960
implementation that almost everyone uses

00:19:55,440 --> 00:19:58,960
is the trust on first use one

00:19:59,120 --> 00:20:02,240
so yeah you can actually implement

00:20:01,679 --> 00:20:05,760
different

00:20:02,240 --> 00:20:08,720
decisions but i'm

00:20:05,760 --> 00:20:10,240
not aware of very many people who do we

00:20:08,720 --> 00:20:13,760
did some experiments with that

00:20:10,240 --> 00:20:17,520
at docker um and

00:20:13,760 --> 00:20:18,799
um and so we we did some internal work

00:20:17,520 --> 00:20:23,280
on that but it's

00:20:18,799 --> 00:20:23,280
not definitely not the normal use case

00:20:24,159 --> 00:20:30,720
so the plan um we've

00:20:27,840 --> 00:20:32,240
been working on we've been working on

00:20:30,720 --> 00:20:34,240
requirements and trying to get everyone

00:20:32,240 --> 00:20:37,919
aligned um

00:20:34,240 --> 00:20:41,840
and so um we're getting

00:20:37,919 --> 00:20:44,480
towards uh agreement on these things

00:20:41,840 --> 00:20:46,159
um obviously now at cubecom we're going

00:20:44,480 --> 00:20:47,280
through and talking to everyone about

00:20:46,159 --> 00:20:49,440
where we are what we're doing there's

00:20:47,280 --> 00:20:54,080
more in the in the working

00:20:49,440 --> 00:20:55,600
session um we are working on

00:20:54,080 --> 00:20:57,600
beginning prototypes as well we should

00:20:55,600 --> 00:21:00,720
talk about in that session as well

00:20:57,600 --> 00:21:03,280
um we're looking to have rough code

00:21:00,720 --> 00:21:03,919
um by the end of september so two months

00:21:03,280 --> 00:21:06,960
really

00:21:03,919 --> 00:21:09,840
um uh in order to do

00:21:06,960 --> 00:21:11,200
demos for uconn north america in the end

00:21:09,840 --> 00:21:14,320
of towards the end of november

00:21:11,200 --> 00:21:18,000
and then ga for next year um

00:21:14,320 --> 00:21:19,200
and uh microsoft and amazon and docker

00:21:18,000 --> 00:21:22,159
are looking to

00:21:19,200 --> 00:21:22,960
jay next year and also other other

00:21:22,159 --> 00:21:24,960
people as well

00:21:22,960 --> 00:21:27,039
you know we're working with a big big

00:21:24,960 --> 00:21:28,559
community of if

00:21:27,039 --> 00:21:30,159
all the people are running registries

00:21:28,559 --> 00:21:32,400
really so we're hoping to have more more

00:21:30,159 --> 00:21:35,919
than just that

00:21:32,400 --> 00:21:38,400
um so yeah go to the working session um

00:21:35,919 --> 00:21:39,919
i watch the recording of that for more

00:21:38,400 --> 00:21:43,120
information

00:21:39,919 --> 00:21:44,240
um some of the discussions are ongoing

00:21:43,120 --> 00:21:46,159
again something we're talking about in

00:21:44,240 --> 00:21:48,720
the coming session uh

00:21:46,159 --> 00:21:50,799
um and some of the things we've already

00:21:48,720 --> 00:21:55,360
had kind of discussion on

00:21:50,799 --> 00:21:56,880
um one of them has been about um

00:21:55,360 --> 00:21:58,880
adding signatures and content

00:21:56,880 --> 00:22:01,039
addressability so

00:21:58,880 --> 00:22:03,120
um registries are content addressable

00:22:01,039 --> 00:22:07,760
stores and what that means

00:22:03,120 --> 00:22:10,240
um is that everything is defined by

00:22:07,760 --> 00:22:11,200
the hash of the content you're referring

00:22:10,240 --> 00:22:13,760
to so

00:22:11,200 --> 00:22:15,120
the contents of an image define it

00:22:13,760 --> 00:22:18,720
uniquely in the storage

00:22:15,120 --> 00:22:21,039
so you can be sure that if you um

00:22:18,720 --> 00:22:22,960
you know you can ask for exactly this

00:22:21,039 --> 00:22:24,559
version of ubuntu because if you know

00:22:22,960 --> 00:22:26,320
once you know the hash of that version

00:22:24,559 --> 00:22:27,679
of ubuntu you can you always guarantee

00:22:26,320 --> 00:22:29,520
you'll get the same

00:22:27,679 --> 00:22:31,280
content hash next time you pull if you

00:22:29,520 --> 00:22:33,760
pull by hash

00:22:31,280 --> 00:22:34,960
um but that kind of constrains the

00:22:33,760 --> 00:22:37,919
design of

00:22:34,960 --> 00:22:38,840
um how registries work and one of the

00:22:37,919 --> 00:22:42,720
things is

00:22:38,840 --> 00:22:44,880
um that a lot of users

00:22:42,720 --> 00:22:46,559
talked about as a requirement was that

00:22:44,880 --> 00:22:50,080
they wanted to be able to add

00:22:46,559 --> 00:22:53,120
more signatures to an image after

00:22:50,080 --> 00:22:55,600
um they had basically

00:22:53,120 --> 00:22:58,400
already tagged to it or referred to it

00:22:55,600 --> 00:23:02,320
by hash so you want to say

00:22:58,400 --> 00:23:04,640
this copy of um ubuntu say i want to

00:23:02,320 --> 00:23:06,480
add a signature saying that it was

00:23:04,640 --> 00:23:09,360
checked by

00:23:06,480 --> 00:23:11,120
um our compliance department or that i

00:23:09,360 --> 00:23:12,240
added i was with the signature saying

00:23:11,120 --> 00:23:14,400
that i

00:23:12,240 --> 00:23:15,280
um it went through our validation

00:23:14,400 --> 00:23:16,880
program

00:23:15,280 --> 00:23:17,919
program and it was added to our registry

00:23:16,880 --> 00:23:20,320
and so we want to be able to add these

00:23:17,919 --> 00:23:23,440
signatures without changing

00:23:20,320 --> 00:23:24,640
the content whereas if you like the kind

00:23:23,440 --> 00:23:26,559
of classic model with

00:23:24,640 --> 00:23:28,080
content addressability was would be that

00:23:26,559 --> 00:23:31,280
you refer to the content

00:23:28,080 --> 00:23:31,919
with the signatures um and this is kind

00:23:31,280 --> 00:23:34,480
of the

00:23:31,919 --> 00:23:35,440
model that registries expect to work

00:23:34,480 --> 00:23:37,280
with that you

00:23:35,440 --> 00:23:38,799
if you want to retrieve an object you

00:23:37,280 --> 00:23:40,480
have to specify so if you want to

00:23:38,799 --> 00:23:42,000
retrieve the signed object you'd have to

00:23:40,480 --> 00:23:43,360
specify the hash of it with the

00:23:42,000 --> 00:23:44,880
signatures

00:23:43,360 --> 00:23:47,360
and then if you added another signature

00:23:44,880 --> 00:23:50,000
it would change so

00:23:47,360 --> 00:23:50,640
there's def there's a working group

00:23:50,000 --> 00:23:54,799
around

00:23:50,640 --> 00:23:57,840
adding an api to registries that can

00:23:54,799 --> 00:24:00,720
given an object retrieve all the um

00:23:57,840 --> 00:24:02,400
signatures attached to it as a separate

00:24:00,720 --> 00:24:04,080
item you will still

00:24:02,400 --> 00:24:05,760
probably be able to i mean you should be

00:24:04,080 --> 00:24:07,760
able to still refer

00:24:05,760 --> 00:24:09,360
to the signatures directly if you want

00:24:07,760 --> 00:24:09,760
to refer to the signatures directly but

00:24:09,360 --> 00:24:12,880
you would

00:24:09,760 --> 00:24:14,799
also have an additional registry api

00:24:12,880 --> 00:24:16,320
for retrieving signatures attached to an

00:24:14,799 --> 00:24:18,720
object

00:24:16,320 --> 00:24:19,600
um and so there's definitely a lot of

00:24:18,720 --> 00:24:24,080
interest in this

00:24:19,600 --> 00:24:26,960
um for for this kind of workflow

00:24:24,080 --> 00:24:28,960
um another thing that would i talk about

00:24:26,960 --> 00:24:30,960
in the um

00:24:28,960 --> 00:24:32,559
in the other session in more detail is

00:24:30,960 --> 00:24:34,640
more about um

00:24:32,559 --> 00:24:38,159
ephemeral servers ephemeral surfaces as

00:24:34,640 --> 00:24:40,880
i said are really important but they do

00:24:38,159 --> 00:24:41,679
it have security implications and this

00:24:40,880 --> 00:24:43,679
is something that

00:24:41,679 --> 00:24:45,039
really hasn't been looked at much before

00:24:43,679 --> 00:24:46,480
i think but um

00:24:45,039 --> 00:24:48,960
one of the guarantees that taft gives

00:24:46,480 --> 00:24:52,320
you is about rollback so it says that

00:24:48,960 --> 00:24:56,000
if you've um downloaded

00:24:52,320 --> 00:24:59,440
something um no one can come along later

00:24:56,000 --> 00:25:01,360
and say delete all the new versions

00:24:59,440 --> 00:25:02,480
and then tell you that the latest

00:25:01,360 --> 00:25:04,799
version of the

00:25:02,480 --> 00:25:06,240
package you're looking for is the one

00:25:04,799 --> 00:25:08,320
from two years ago that happened to have

00:25:06,240 --> 00:25:10,640
a security vulnerability

00:25:08,320 --> 00:25:12,640
um because you would detect this had

00:25:10,640 --> 00:25:15,600
been rolled back because you'd seen

00:25:12,640 --> 00:25:17,600
versions earlier but an ephemeral server

00:25:15,600 --> 00:25:21,039
kind of doesn't have any of that state

00:25:17,600 --> 00:25:22,400
so you can't see about rollbacks having

00:25:21,039 --> 00:25:23,679
happened so we're looking at other

00:25:22,400 --> 00:25:26,000
mechanisms and there's more about that

00:25:23,679 --> 00:25:27,440
in the working session

00:25:26,000 --> 00:25:29,440
another thing we've talked about a lot

00:25:27,440 --> 00:25:31,919
of what guarantees users are expecting

00:25:29,440 --> 00:25:34,400
with signing whether they're

00:25:31,919 --> 00:25:35,440
um you know how much how many guarantees

00:25:34,400 --> 00:25:38,400
do they want what

00:25:35,440 --> 00:25:40,480
um what's the expectation about what

00:25:38,400 --> 00:25:41,600
signing means and those kinds of issues

00:25:40,480 --> 00:25:44,159
around

00:25:41,600 --> 00:25:44,880
um you know which which security

00:25:44,159 --> 00:25:48,159
properties

00:25:44,880 --> 00:25:49,520
are you getting is it guaranteeing

00:25:48,159 --> 00:25:51,600
what's it guaranteeing about the

00:25:49,520 --> 00:25:54,320
software you're downloading

00:25:51,600 --> 00:25:54,720
um and then we obviously have a lot of

00:25:54,320 --> 00:25:56,080
um

00:25:54,720 --> 00:25:58,000
we have a working group on key

00:25:56,080 --> 00:26:00,159
management there's obviously

00:25:58,000 --> 00:26:02,000
discussions around what kind of keys to

00:26:00,159 --> 00:26:05,840
use like x509 gpg

00:26:02,000 --> 00:26:09,120
or um ad hoc signing where um

00:26:05,840 --> 00:26:12,400
the trust is built into the actual

00:26:09,120 --> 00:26:15,039
um signature protocol and the the whole

00:26:12,400 --> 00:26:16,159
workflow that we'd be designing and so

00:26:15,039 --> 00:26:17,360
we'll talk about that more in the other

00:26:16,159 --> 00:26:19,600
session so if these

00:26:17,360 --> 00:26:21,120
interests you come and join us um at the

00:26:19,600 --> 00:26:24,480
meetings

00:26:21,120 --> 00:26:28,000
um so thanks very much for coming

00:26:24,480 --> 00:26:30,880
and um happy to answer questions

00:26:28,000 --> 00:26:32,640
and uh we'll be working on this and i

00:26:30,880 --> 00:26:37,039
hope you

00:26:32,640 --> 00:26:39,840
look forward to better security through

00:26:37,039 --> 00:26:44,320
better signing coming to registry for

00:26:39,840 --> 00:26:44,320

YouTube URL: https://www.youtube.com/watch?v=8K4a7Ltk_4U


