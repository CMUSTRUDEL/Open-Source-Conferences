Title: Using SOPS, Kube Secrets and a CD Pipeline For Secure Configuration - Tom Hipwell, Bulb
Publication date: 2020-08-27
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Donâ€™t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more atÂ https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Using SOPS, Kube Secrets and a CD Pipeline For Secure Configuration - Tom Hipwell, Bulb 

Managing configuration doesn't have to be complex, this lightening talk will show a super simple pattern for having configuration live within your repo and deployed to your Kubernetes cluster as a Secret or ConfigMap using a CD pipeline.  This is done using a CLI tool from Mozilla known as SOPS, with an envelope encryption model based on a master key supplied by a cloud based KMS provider such as AWS and a CD pipeline implemented using CircleCI. This pattern keeps your configuration secure, but allows it to be controlled in version control, under code-review and released using your build pipeline.

https://sched.co/ZelD
Captions: 
	00:00:00,080 --> 00:00:03,280
hi my name is tom hebwell and i'm from

00:00:02,399 --> 00:00:05,359
bulb

00:00:03,280 --> 00:00:07,040
bulb is a renewable energy supplier it

00:00:05,359 --> 00:00:07,600
was the fastest growing startup in the

00:00:07,040 --> 00:00:10,480
uk

00:00:07,600 --> 00:00:12,000
in 2018 and 2019 and it's recently

00:00:10,480 --> 00:00:12,880
started to expand internationally to

00:00:12,000 --> 00:00:15,599
france spain

00:00:12,880 --> 00:00:16,880
and texas as part of my day day-to-day

00:00:15,599 --> 00:00:18,960
i've been building the energy billing

00:00:16,880 --> 00:00:20,400
system which bob uses internationally

00:00:18,960 --> 00:00:22,160
that system uses the microservices

00:00:20,400 --> 00:00:23,439
architecture and each service has a

00:00:22,160 --> 00:00:25,199
flask app that is dockerized and

00:00:23,439 --> 00:00:26,880
deployed to kubernetes

00:00:25,199 --> 00:00:28,800
i'm here to talk today about a pattern

00:00:26,880 --> 00:00:30,880
we use at bulb where we use sops

00:00:28,800 --> 00:00:32,800
cube secrets and a ci pipeline for

00:00:30,880 --> 00:00:34,079
secure configuration deployment

00:00:32,800 --> 00:00:35,600
this is something i think you can learn

00:00:34,079 --> 00:00:37,120
in five minutes and immediately take

00:00:35,600 --> 00:00:38,640
home applying your own stack

00:00:37,120 --> 00:00:40,559
hopefully improving the reliability of

00:00:38,640 --> 00:00:42,399
configuration changes and keeping all

00:00:40,559 --> 00:00:43,440
our configuration more secure

00:00:42,399 --> 00:00:45,200
if you want to get in touch with me

00:00:43,440 --> 00:00:46,559
after the presentation you can find me

00:00:45,200 --> 00:00:50,960
on twitter or linkedin

00:00:46,559 --> 00:00:50,960
and my email is tomatbulb.com

00:00:51,199 --> 00:00:55,440
so what is sops anyway swaps is a tool

00:00:53,680 --> 00:00:56,640
written by mozilla to handle the editing

00:00:55,440 --> 00:00:58,480
of encrypted files

00:00:56,640 --> 00:01:00,719
it only encrypts the values of a yam or

00:00:58,480 --> 00:01:02,399
json file and not the keys

00:01:00,719 --> 00:01:03,840
it uses an envelope encryption model

00:01:02,399 --> 00:01:05,119
where the backend is a key management

00:01:03,840 --> 00:01:08,320
service or kms

00:01:05,119 --> 00:01:10,240
provided by aws azure or tcp and that

00:01:08,320 --> 00:01:12,240
kms is used to store a master key

00:01:10,240 --> 00:01:14,320
which when fetched is used to encrypt or

00:01:12,240 --> 00:01:15,840
decrypt your configuration

00:01:14,320 --> 00:01:17,360
one advantage of this pattern is that

00:01:15,840 --> 00:01:18,720
you can store the encrypted file

00:01:17,360 --> 00:01:20,240
alongside your code

00:01:18,720 --> 00:01:21,680
this means you can check in and deploy

00:01:20,240 --> 00:01:22,720
your configuration using your ci

00:01:21,680 --> 00:01:23,920
pipeline

00:01:22,720 --> 00:01:26,159
you can also have code review for

00:01:23,920 --> 00:01:27,040
configuration changes as only the values

00:01:26,159 --> 00:01:28,720
are encrypted

00:01:27,040 --> 00:01:30,400
diffs are meaningful and you can see

00:01:28,720 --> 00:01:31,360
exactly which keys change as part of a

00:01:30,400 --> 00:01:33,439
commit

00:01:31,360 --> 00:01:35,280
conflicts are also easier to resolve as

00:01:33,439 --> 00:01:37,360
long as the same values are not edited

00:01:35,280 --> 00:01:38,400
changes can be easily merged there's a

00:01:37,360 --> 00:01:39,840
handy little cli

00:01:38,400 --> 00:01:41,439
which means that using stops easily

00:01:39,840 --> 00:01:42,880
plugs into your developer workflow

00:01:41,439 --> 00:01:44,479
you can also control access to the

00:01:42,880 --> 00:01:46,640
encrypted configuration by adding or

00:01:44,479 --> 00:01:48,159
removing roles to the user in the cloud

00:01:46,640 --> 00:01:49,439
the tool is also open source and

00:01:48,159 --> 00:01:51,840
released under the mozilla public

00:01:49,439 --> 00:01:51,840
license

00:01:53,439 --> 00:01:56,880
so why would i use it well using volt or

00:01:55,439 --> 00:01:58,320
similar for secret management in our

00:01:56,880 --> 00:02:00,079
industry is the best practice

00:01:58,320 --> 00:02:01,920
you can see these services you can use

00:02:00,079 --> 00:02:03,680
these services to find access to service

00:02:01,920 --> 00:02:05,200
accounts using i am roles

00:02:03,680 --> 00:02:07,200
this means that the actual credentials

00:02:05,200 --> 00:02:08,800
can be ephemeral they can expire on a

00:02:07,200 --> 00:02:10,160
lease and they never need to be managed

00:02:08,800 --> 00:02:11,599
or stored

00:02:10,160 --> 00:02:13,520
based on the role that you have you can

00:02:11,599 --> 00:02:14,879
go to the secrets manager and request a

00:02:13,520 --> 00:02:16,239
service account that you need

00:02:14,879 --> 00:02:18,160
rather than having to generate and store

00:02:16,239 --> 00:02:19,360
that service account somewhere because

00:02:18,160 --> 00:02:20,959
the service accounts are not stored

00:02:19,360 --> 00:02:22,480
anywhere you as a software engineer

00:02:20,959 --> 00:02:23,040
never need access directly to that

00:02:22,480 --> 00:02:25,280
account

00:02:23,040 --> 00:02:26,959
keeping everything nice and secure the

00:02:25,280 --> 00:02:28,959
downside of this approach is that it can

00:02:26,959 --> 00:02:30,640
be complex and expensive to manage

00:02:28,959 --> 00:02:31,840
and might not be needed at smaller firms

00:02:30,640 --> 00:02:33,280
or for projects earlier in their

00:02:31,840 --> 00:02:35,519
gestation

00:02:33,280 --> 00:02:37,120
however in this scenario you still want

00:02:35,519 --> 00:02:37,680
to secure your configuration from day

00:02:37,120 --> 00:02:39,360
zero

00:02:37,680 --> 00:02:41,200
and you want an automated and reliable

00:02:39,360 --> 00:02:42,720
way of deploying that configuration

00:02:41,200 --> 00:02:45,120
that's where this pattern using swaps

00:02:42,720 --> 00:02:45,120
comes in

00:02:45,920 --> 00:02:49,680
okay how do you use it once you've set

00:02:48,640 --> 00:02:51,680
up

00:02:49,680 --> 00:02:53,120
and as a side note you can install stops

00:02:51,680 --> 00:02:54,080
using a package manager that came from

00:02:53,120 --> 00:02:55,760
homebrew

00:02:54,080 --> 00:02:57,360
then you can encrypt and decrypt files

00:02:55,760 --> 00:02:58,319
using the swaps command as shown on the

00:02:57,360 --> 00:03:00,239
slide

00:02:58,319 --> 00:03:02,000
handily you can set stops to decrypt

00:03:00,239 --> 00:03:04,000
mode using the dash d flag and then pipe

00:03:02,000 --> 00:03:05,760
it over standard in to keep apply

00:03:04,000 --> 00:03:07,280
so to create dot m style secrets

00:03:05,760 --> 00:03:09,200
containing key value pairs we do

00:03:07,280 --> 00:03:10,800
something like the command on screen

00:03:09,200 --> 00:03:12,319
this can be run anywhere that stops and

00:03:10,800 --> 00:03:13,360
then corrects or so that cli are

00:03:12,319 --> 00:03:15,360
installed

00:03:13,360 --> 00:03:17,120
as long as we're authenticated to our

00:03:15,360 --> 00:03:18,720
cloud tms to get access to the master

00:03:17,120 --> 00:03:20,319
key to decrypt the file

00:03:18,720 --> 00:03:23,680
this means you can run this command as

00:03:20,319 --> 00:03:23,680
build step in your ci

00:03:24,640 --> 00:03:27,040
as mentioned at the start of

00:03:25,760 --> 00:03:28,560
presentation you can store the

00:03:27,040 --> 00:03:29,599
configuration in the same repos your

00:03:28,560 --> 00:03:31,360
application code

00:03:29,599 --> 00:03:32,879
using namespace subdirectories for each

00:03:31,360 --> 00:03:36,080
environment that you're working with

00:03:32,879 --> 00:03:36,080
as shown on the slide here

00:03:36,560 --> 00:03:40,159
finally just add a dot swaps file of

00:03:38,879 --> 00:03:41,840
your secrets directory

00:03:40,159 --> 00:03:43,440
in your repo specifying the kms

00:03:41,840 --> 00:03:44,879
configuration for each sub environment

00:03:43,440 --> 00:03:46,560
that you need to work in

00:03:44,879 --> 00:03:47,840
remember you can permission these keys

00:03:46,560 --> 00:03:49,040
separately for different environments if

00:03:47,840 --> 00:03:50,799
you want to save

00:03:49,040 --> 00:03:54,159
unblock your devs and test environments

00:03:50,799 --> 00:03:55,920
but keep prod completely locked down

00:03:54,159 --> 00:03:57,280
and that's it hopefully you've seen how

00:03:55,920 --> 00:03:59,280
easy it is to get up and running

00:03:57,280 --> 00:04:00,879
and i'll hear from you shortly about how

00:03:59,280 --> 00:04:01,920
you've got the setup at home

00:04:00,879 --> 00:04:03,519
i hope you enjoy the rest of the

00:04:01,920 --> 00:04:05,720
conference and thank you so much for

00:04:03,519 --> 00:04:08,720
taking the time to watch my presentation

00:04:05,720 --> 00:04:08,720

YouTube URL: https://www.youtube.com/watch?v=Gy7cTsbxbDI


