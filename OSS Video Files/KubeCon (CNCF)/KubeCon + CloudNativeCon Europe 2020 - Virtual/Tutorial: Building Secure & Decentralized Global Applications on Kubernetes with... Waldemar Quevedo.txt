Title: Tutorial: Building Secure & Decentralized Global Applications on Kubernetes with... Waldemar Quevedo
Publication date: 2020-08-27
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Tutorial: Building Secure & Decentralized Global Applications on Kubernetes with NATS - Waldemar Quevedo, Synadia 

Learn how to build applications that span across more than one Kubernetes region by using a NATS based global communications network. In this talk, it will be covered how to setup a globally available NATS cluster using multiple Kubernetes regions from 4 different clouds (AWS, Digital Ocean, GKE & Azure) using NATS gateways and leafnode connections, as well as how to create applications that take advantage of the NATS decentralized authorization model by showing how to implement a simple Slack-like clone that runs under your terminal.  Attendees of this session will be able to follow through the implementation of the service (and interact with each other!) during the talk, to run the examples it is recommended to have Docker installed.

https://sched.co/Zekp
Captions: 
	00:00:00,080 --> 00:00:06,319
hello uh welcome to the next tutorial

00:00:04,000 --> 00:00:07,279
which is about building secure and

00:00:06,319 --> 00:00:09,760
decentralized

00:00:07,279 --> 00:00:10,639
global applications running on

00:00:09,760 --> 00:00:13,120
kubernetes

00:00:10,639 --> 00:00:14,960
using nets my name is valden archebedo

00:00:13,120 --> 00:00:17,920
one of the core maintainers

00:00:14,960 --> 00:00:17,920
from nets

00:00:18,240 --> 00:00:21,600
you can find me twitter as a wall qs i'm

00:00:20,560 --> 00:00:23,600
a software engineer

00:00:21,600 --> 00:00:26,000
inside nadia where many of the

00:00:23,600 --> 00:00:29,039
maintainers of nets are working

00:00:26,000 --> 00:00:31,519
i've been a long time snaps user i wrote

00:00:29,039 --> 00:00:34,960
a book about nets a couple of years ago

00:00:31,519 --> 00:00:36,480
covering many of the basic concepts some

00:00:34,960 --> 00:00:39,280
some of the messaging patterns that you

00:00:36,480 --> 00:00:42,000
can do with nets

00:00:39,280 --> 00:00:42,879
and in this talk this tutorial we're

00:00:42,000 --> 00:00:44,960
gonna

00:00:42,879 --> 00:00:46,079
cover how to set up a decentralized

00:00:44,960 --> 00:00:49,280
authorization

00:00:46,079 --> 00:00:52,000
scheme for a next cluster then we'll

00:00:49,280 --> 00:00:53,199
deploy a net super cluster of three

00:00:52,000 --> 00:00:55,840
regions

00:00:53,199 --> 00:00:57,440
using helm now let's show the internals

00:00:55,840 --> 00:00:59,840
of a chat demo

00:00:57,440 --> 00:01:01,920
application that is using those

00:00:59,840 --> 00:01:03,199
credentials and dynamic provisioning

00:01:01,920 --> 00:01:07,280
credentials

00:01:03,199 --> 00:01:10,159
and a global net super cluster

00:01:07,280 --> 00:01:12,560
this is how the net application chat

00:01:10,159 --> 00:01:15,360
application looks like

00:01:12,560 --> 00:01:15,680
you can have a number of channels and

00:01:15,360 --> 00:01:19,360
then

00:01:15,680 --> 00:01:21,360
users can send messages to

00:01:19,360 --> 00:01:23,439
any anyone that is member of that

00:01:21,360 --> 00:01:25,119
channel and you also have

00:01:23,439 --> 00:01:26,479
they also have support for direct

00:01:25,119 --> 00:01:29,600
messages

00:01:26,479 --> 00:01:32,079
and in case uh one of those messages

00:01:29,600 --> 00:01:33,119
uh whenever you receive a message you'll

00:01:32,079 --> 00:01:35,439
get a dot

00:01:33,119 --> 00:01:36,960
basically telling you they have a new

00:01:35,439 --> 00:01:40,240
message

00:01:36,960 --> 00:01:44,479
um in terms of a nuts strings

00:01:40,240 --> 00:01:46,320
or subscriptions this how they look like

00:01:44,479 --> 00:01:48,560
in terms of the subjects that are going

00:01:46,320 --> 00:01:52,000
to be used we'll have a subject

00:01:48,560 --> 00:01:55,520
named chat.kubecon.posts

00:01:52,000 --> 00:01:57,759
and um is the wild card

00:01:55,520 --> 00:01:59,520
uh the asterisk is wild card so that

00:01:57,759 --> 00:02:01,840
whenever you post to kubecon

00:01:59,520 --> 00:02:03,439
that's gonna be represented by a message

00:02:01,840 --> 00:02:06,880
that is on the subject

00:02:03,439 --> 00:02:11,360
that post.kucon or for the nuts channel

00:02:06,880 --> 00:02:14,800
and dot snats on general the same

00:02:11,360 --> 00:02:16,959
then the dms uh how will they will be

00:02:14,800 --> 00:02:19,520
implemented are quite interesting

00:02:16,959 --> 00:02:20,239
but as a user as a client user will be

00:02:19,520 --> 00:02:23,040
able to receive

00:02:20,239 --> 00:02:24,560
message messages from anyone that is

00:02:23,040 --> 00:02:27,760
part of the cluster

00:02:24,560 --> 00:02:29,120
a part of their that is connected to the

00:02:27,760 --> 00:02:33,200
cluster

00:02:29,120 --> 00:02:37,200
and also you eventually be sending

00:02:33,200 --> 00:02:39,440
regular events status events so to show

00:02:37,200 --> 00:02:41,120
announce to everyone that is connected

00:02:39,440 --> 00:02:45,680
to the chat

00:02:41,120 --> 00:02:45,680
service that you're online

00:02:46,000 --> 00:02:49,760
and also in terms of the services

00:02:48,319 --> 00:02:51,680
because nuts have support for

00:02:49,760 --> 00:02:53,360
on not only a sequence of events and

00:02:51,680 --> 00:02:56,800
streams uh you can also use

00:02:53,360 --> 00:02:57,680
services so basically have uh make rpc

00:02:56,800 --> 00:02:59,840
requests

00:02:57,680 --> 00:02:59,840
on

00:03:01,680 --> 00:03:07,280
to get a single response so in this case

00:03:04,879 --> 00:03:08,080
a service that will be part of this is

00:03:07,280 --> 00:03:11,280
the

00:03:08,080 --> 00:03:13,760
request for access service so this

00:03:11,280 --> 00:03:15,200
there's going to be a single subscriber

00:03:13,760 --> 00:03:18,560
part of this and that's a

00:03:15,200 --> 00:03:19,920
cluster that whenever you make a request

00:03:18,560 --> 00:03:22,720
with some payload in this case the

00:03:19,920 --> 00:03:25,480
payload is going to be the username

00:03:22,720 --> 00:03:27,920
but you can make a request to

00:03:25,480 --> 00:03:31,360
chat.rec.access to get some

00:03:27,920 --> 00:03:33,280
uh ephemeral uh well ephemeral

00:03:31,360 --> 00:03:34,640
unique credentials for that user and

00:03:33,280 --> 00:03:37,920
those are going to be

00:03:34,640 --> 00:03:40,319
generated on demand for each one of the

00:03:37,920 --> 00:03:42,400
users

00:03:40,319 --> 00:03:43,920
in terms of the global topology this is

00:03:42,400 --> 00:03:46,159
how it's going to look

00:03:43,920 --> 00:03:48,000
i will set up a cluster and that's

00:03:46,159 --> 00:03:51,120
cluster in san francisco

00:03:48,000 --> 00:03:53,360
amsterdam attending virtually and

00:03:51,120 --> 00:03:55,360
also another one in singapore there's

00:03:53,360 --> 00:03:57,439
going to be a credential service that

00:03:55,360 --> 00:03:59,200
could be connected anywhere

00:03:57,439 --> 00:04:01,280
uh it's going to be a q subscription so

00:03:59,200 --> 00:04:01,599
that it can you can have multiple of

00:04:01,280 --> 00:04:03,760
them

00:04:01,599 --> 00:04:04,640
and they will become a load balance and

00:04:03,760 --> 00:04:06,879
then the chat

00:04:04,640 --> 00:04:07,840
uh client application can be connected

00:04:06,879 --> 00:04:10,959
to

00:04:07,840 --> 00:04:11,519
uh anywhere uh from this part of the

00:04:10,959 --> 00:04:13,360
cluster

00:04:11,519 --> 00:04:15,120
so there is there's again decentralized

00:04:13,360 --> 00:04:17,840
there is no center all of this could be

00:04:15,120 --> 00:04:22,160
running everywhere

00:04:17,840 --> 00:04:25,600
so i'm going to get started and

00:04:22,160 --> 00:04:25,600
so the first thing we need to

00:04:26,800 --> 00:04:30,560
do is set up the

00:04:31,919 --> 00:04:43,840
uh off for the cluster

00:04:36,000 --> 00:04:43,840
so we are going to

00:04:45,919 --> 00:04:52,400
first uh install nsc

00:04:49,440 --> 00:04:52,880
in case it's not available nsc is the

00:04:52,400 --> 00:04:56,000
tool

00:04:52,880 --> 00:05:00,800
that you can use to manage

00:04:56,000 --> 00:05:03,680
users nets users and accounts in nets

00:05:00,800 --> 00:05:04,240
there is a one liner that will install

00:05:03,680 --> 00:05:08,160
it for you

00:05:04,240 --> 00:05:11,680
you can peek at the contents in case

00:05:08,160 --> 00:05:14,960
you're concerned of the uh

00:05:11,680 --> 00:05:16,720
what well the uh whether schemes

00:05:14,960 --> 00:05:18,400
uh you want to pick up the contents

00:05:16,720 --> 00:05:21,280
basically or you can just

00:05:18,400 --> 00:05:22,840
use hom hombre to install it so we'll

00:05:21,280 --> 00:05:25,199
need

00:05:22,840 --> 00:05:28,320
nsc and

00:05:25,199 --> 00:05:31,199
there is a we'll use this uh

00:05:28,320 --> 00:05:32,639
script in a setup that is part of the

00:05:31,199 --> 00:05:34,160
kubernetes repo

00:05:32,639 --> 00:05:36,000
and also all of this is going to be

00:05:34,160 --> 00:05:39,919
available on another

00:05:36,000 --> 00:05:41,360
uh for the kubecon 2020

00:05:39,919 --> 00:05:44,080
so you can see all of the code and

00:05:41,360 --> 00:05:48,400
examples here as well

00:05:44,080 --> 00:05:53,840
so let's first let's get started and

00:05:48,400 --> 00:05:56,479
bootstrap the authorization

00:05:53,840 --> 00:05:56,479
okay so

00:05:57,360 --> 00:06:05,600
let's go into the kubecon 2020

00:06:01,520 --> 00:06:09,360
folder and

00:06:05,600 --> 00:06:10,560
make uh uh run this

00:06:09,360 --> 00:06:13,440
script that is going to create some

00:06:10,560 --> 00:06:13,440
accounts for us

00:06:14,720 --> 00:06:18,560
uh one of them is that it's going to

00:06:16,720 --> 00:06:20,639
create the operator jwt

00:06:18,560 --> 00:06:22,800
that is going to be used like the root

00:06:20,639 --> 00:06:25,520
of trust from the whole cluster

00:06:22,800 --> 00:06:27,600
and we also create a system account and

00:06:25,520 --> 00:06:32,479
a couple of accounts for testing

00:06:27,600 --> 00:06:34,080
and one for stand for example in case

00:06:32,479 --> 00:06:35,600
it could be used uh we're not going to

00:06:34,080 --> 00:06:39,680
use it particularly in this

00:06:35,600 --> 00:06:43,600
tutorial but it's just like a generic

00:06:39,680 --> 00:06:46,840
account and

00:06:43,600 --> 00:06:49,840
the operator generality is quite

00:06:46,840 --> 00:06:52,800
important as i mentioned is the

00:06:49,840 --> 00:06:54,000
uh root of trust from the from the whole

00:06:52,800 --> 00:06:56,639
cluster

00:06:54,000 --> 00:06:58,560
you can see that it is set to it was

00:06:56,639 --> 00:07:03,840
issued

00:06:58,560 --> 00:07:03,840
uh this doesn't expire but you can

00:07:04,000 --> 00:07:08,000
you take a look at the script you can

00:07:05,360 --> 00:07:11,680
also check out how when you want to

00:07:08,000 --> 00:07:14,720
make it expire and solo that can be

00:07:11,680 --> 00:07:16,240
configured so

00:07:14,720 --> 00:07:18,639
for the purposes of this demo we're

00:07:16,240 --> 00:07:20,639
going to need at least

00:07:18,639 --> 00:07:22,400
three different users one is going to be

00:07:20,639 --> 00:07:25,520
the

00:07:22,400 --> 00:07:27,599
user for requesting credentials

00:07:25,520 --> 00:07:28,840
and there is going to be a user that has

00:07:27,599 --> 00:07:31,280
very constrained

00:07:28,840 --> 00:07:33,120
permissions then we will need a

00:07:31,280 --> 00:07:34,560
credentials provisioner

00:07:33,120 --> 00:07:36,560
that is able to respond to those

00:07:34,560 --> 00:07:37,840
requests so those are the service

00:07:36,560 --> 00:07:41,280
interactions

00:07:37,840 --> 00:07:42,160
and also we need user credentials for

00:07:41,280 --> 00:07:44,240
each one of the

00:07:42,160 --> 00:07:46,160
users these are going to be dynamically

00:07:44,240 --> 00:07:49,360
uh generated and i'm going to

00:07:46,160 --> 00:07:50,080
show how this is done so but first let's

00:07:49,360 --> 00:07:52,800
create a

00:07:50,080 --> 00:07:52,800
kubecon account

00:07:53,599 --> 00:07:56,960
let's create a cubicle account

00:07:57,280 --> 00:08:03,280
so all of these uh

00:08:00,639 --> 00:08:05,599
users are going to be part of this

00:08:03,280 --> 00:08:09,360
kubecon account

00:08:05,599 --> 00:08:10,319
and we'll do something special with this

00:08:09,360 --> 00:08:13,599
account

00:08:10,319 --> 00:08:17,199
is and that is we're gonna create a

00:08:13,599 --> 00:08:20,960
signing key this signing key

00:08:17,199 --> 00:08:23,440
is um it is an extra

00:08:20,960 --> 00:08:24,879
key that is gonna belong to this uh

00:08:23,440 --> 00:08:26,479
cubecon account

00:08:24,879 --> 00:08:27,919
and it is essentially what we'll be

00:08:26,479 --> 00:08:31,039
using to

00:08:27,919 --> 00:08:35,200
create the new

00:08:31,039 --> 00:08:38,839
uh users that are part of this cluster

00:08:35,200 --> 00:08:40,000
by using the dynamic credentials

00:08:38,839 --> 00:08:42,719
provisioner

00:08:40,000 --> 00:08:42,719
so let's

00:08:43,039 --> 00:08:47,760
edit the account using this uh

00:08:48,160 --> 00:08:51,760
signing key the signing key is the one

00:08:50,959 --> 00:08:54,240
that

00:08:51,760 --> 00:08:55,360
got that is in the output the second one

00:08:54,240 --> 00:08:58,320
here in the output

00:08:55,360 --> 00:08:59,839
a a means that is a public key s means

00:08:58,320 --> 00:09:01,839
that it's a private

00:08:59,839 --> 00:09:04,240
uh key so this is the one that we want

00:09:01,839 --> 00:09:04,240
to use

00:09:04,720 --> 00:09:11,920
so now let's edit the account

00:09:08,240 --> 00:09:15,920
for kubecon and add another

00:09:11,920 --> 00:09:20,000
jdo uh signing key so let's inspect

00:09:15,920 --> 00:09:20,000
you can see that have a signing key now

00:09:20,640 --> 00:09:24,880
next we want to use we're going to

00:09:22,399 --> 00:09:24,880
create the

00:09:25,240 --> 00:09:36,880
credentials for the provisioner

00:09:30,080 --> 00:09:40,880
we still need to continue to use the

00:09:36,880 --> 00:09:41,360
signing key so i'm going to replace this

00:09:40,880 --> 00:09:45,040
here

00:09:41,360 --> 00:09:45,040
with the one that got generated

00:09:46,399 --> 00:09:53,360
and it is limited in terms of the

00:09:50,320 --> 00:09:55,200
messages that it can respond so you can

00:09:53,360 --> 00:09:57,519
only subscribe to

00:09:55,200 --> 00:09:58,800
requests for credentials in this case

00:09:57,519 --> 00:10:02,640
it's going to be a chat

00:09:58,800 --> 00:10:05,920
dot direct dot access and

00:10:02,640 --> 00:10:08,160
it is going to be able to respond to

00:10:05,920 --> 00:10:11,120
requests so that's why we need this uh

00:10:08,160 --> 00:10:11,680
inbox uh so at the core level everything

00:10:11,120 --> 00:10:14,720
else is

00:10:11,680 --> 00:10:18,880
still publish uh subscribe

00:10:14,720 --> 00:10:21,360
and so in order to be able to

00:10:18,880 --> 00:10:22,800
reply to requests we need to make

00:10:21,360 --> 00:10:26,079
requests we also need

00:10:22,800 --> 00:10:27,760
to make a subscription to inbox

00:10:26,079 --> 00:10:29,600
and because there is going to be a super

00:10:27,760 --> 00:10:31,600
cluster that is going to be

00:10:29,600 --> 00:10:33,600
multi-region we also need an extra level

00:10:31,600 --> 00:10:36,399
of permissions which is at the

00:10:33,600 --> 00:10:38,240
underscore are or routed globally

00:10:36,399 --> 00:10:40,880
requests that are routed globally

00:10:38,240 --> 00:10:44,560
so we'll need these permissions and

00:10:40,880 --> 00:10:44,560
let's go ahead and create the user

00:10:45,360 --> 00:10:49,440
so you have a new user now let's create

00:10:48,640 --> 00:10:51,680
the user

00:10:49,440 --> 00:10:51,680
for

00:10:52,800 --> 00:11:00,079
uh asking for credentials

00:10:56,480 --> 00:11:02,560
this similar to the request uh the

00:11:00,079 --> 00:11:02,560
subscribe

00:11:02,880 --> 00:11:06,399
the provision there also have very

00:11:05,120 --> 00:11:08,880
limited permissions

00:11:06,399 --> 00:11:10,720
you can only request for credentials and

00:11:08,880 --> 00:11:12,560
you cannot do anything else

00:11:10,720 --> 00:11:13,760
so the type of message you can send is

00:11:12,560 --> 00:11:15,519
for

00:11:13,760 --> 00:11:16,959
getting more credentials so it's going

00:11:15,519 --> 00:11:22,399
to be a harmless

00:11:16,959 --> 00:11:22,399
user so now we have this couple of users

00:11:22,640 --> 00:11:31,120
created and

00:11:28,000 --> 00:11:31,120
let's just confirm

00:11:36,320 --> 00:11:40,399
yeah so you can only publish to chat.rec

00:11:39,120 --> 00:11:43,600
access

00:11:40,399 --> 00:11:46,480
and send messages to

00:11:43,600 --> 00:11:49,040
inbox receive messages from receive

00:11:46,480 --> 00:11:49,040
responses

00:11:49,200 --> 00:11:56,399
uh with this we're ready to start

00:11:52,880 --> 00:11:59,600
confirming the setup locally and show

00:11:56,399 --> 00:11:59,600
some of the code as well

00:11:59,839 --> 00:12:11,839
i'm gonna make this a little bit bigger

00:12:12,800 --> 00:12:17,680
so now we are going to start the nat

00:12:15,200 --> 00:12:17,680
server

00:12:18,880 --> 00:12:24,000
but for this before we to do so we need

00:12:21,920 --> 00:12:27,120
to create a

00:12:24,000 --> 00:12:28,800
the configuration formats that

00:12:27,120 --> 00:12:30,800
includes all this information about the

00:12:28,800 --> 00:12:34,079
accounts so

00:12:30,800 --> 00:12:37,279
nsc can help generating this

00:12:34,079 --> 00:12:40,560
uh in this case we're gonna use a static

00:12:37,279 --> 00:12:42,480
memory resolver that gives

00:12:40,560 --> 00:12:44,079
contains the jwts from each one of the

00:12:42,480 --> 00:12:46,160
accounts so the these

00:12:44,079 --> 00:12:49,040
the nat servers do not have any notion

00:12:46,160 --> 00:12:52,079
of the users that are part of the system

00:12:49,040 --> 00:12:55,760
but those need um

00:12:52,079 --> 00:12:57,680
something that uh at least notion of

00:12:55,760 --> 00:12:59,360
which are the accounts that are in this

00:12:57,680 --> 00:13:00,720
part of the cluster so that under the

00:12:59,360 --> 00:13:02,880
word sign and

00:13:00,720 --> 00:13:05,760
all their signing keys and stuff so in

00:13:02,880 --> 00:13:08,320
this case we generate the config

00:13:05,760 --> 00:13:10,079
we include the operator jw key here i

00:13:08,320 --> 00:13:11,760
named it ko

00:13:10,079 --> 00:13:13,120
and we also have this a system account

00:13:11,760 --> 00:13:16,720
that

00:13:13,120 --> 00:13:19,680
i can show that is for able to inspect

00:13:16,720 --> 00:13:20,560
system events that are flying by in the

00:13:19,680 --> 00:13:26,079
cluster

00:13:20,560 --> 00:13:26,079
so we use this configuration

00:13:29,279 --> 00:13:35,440
and let's start in that server

00:13:32,399 --> 00:13:38,560
conf resolver

00:13:35,440 --> 00:13:43,120
so we see that we have a new uh

00:13:38,560 --> 00:13:47,120
a ko operator with the latest nets

00:13:43,120 --> 00:13:48,399
that is uh available for requests on the

00:13:47,120 --> 00:13:49,920
port 422

00:13:48,399 --> 00:13:51,760
which is the portfolio client

00:13:49,920 --> 00:13:54,880
connections

00:13:51,760 --> 00:13:56,959
we'll make a simple mock request using

00:13:54,880 --> 00:14:00,320
the credentials that

00:13:56,959 --> 00:14:00,320
we created

00:14:00,560 --> 00:14:04,160
i'm going to start at your screen

00:14:01,839 --> 00:14:04,160
session

00:14:08,560 --> 00:14:12,560
so we're going to try to make a request

00:14:10,320 --> 00:14:17,839
to nets

00:14:12,560 --> 00:14:17,839
and there's no

00:14:19,279 --> 00:14:22,079
access okay

00:14:22,320 --> 00:14:26,560
try to make a request for nets but there

00:14:24,560 --> 00:14:29,519
are no responders

00:14:26,560 --> 00:14:30,240
uh to able to provision these requests

00:14:29,519 --> 00:14:32,320
provision

00:14:30,240 --> 00:14:34,160
credentials or response basically

00:14:32,320 --> 00:14:36,560
because right now there's no

00:14:34,160 --> 00:14:37,839
logic still we're just creating a mock

00:14:36,560 --> 00:14:39,680
service that is going to be able to

00:14:37,839 --> 00:14:43,120
respond to this request

00:14:39,680 --> 00:14:46,720
so now we have a mock responder

00:14:43,120 --> 00:14:49,120
make another request and we can see that

00:14:46,720 --> 00:14:50,480
uh there's a request response uh

00:14:49,120 --> 00:14:52,959
interaction with these two

00:14:50,480 --> 00:14:53,760
if i try to make another request here

00:14:52,959 --> 00:14:57,760
i'm gonna get

00:14:53,760 --> 00:14:59,839
uh deny

00:14:57,760 --> 00:15:01,839
the same if i try to subscribe to

00:14:59,839 --> 00:15:05,040
another

00:15:01,839 --> 00:15:08,480
subject is not possible

00:15:05,040 --> 00:15:10,480
so those are the only things

00:15:08,480 --> 00:15:12,160
you can do with these credentials the

00:15:10,480 --> 00:15:13,839
ones for the making requests

00:15:12,160 --> 00:15:16,000
and the one for provisioning or

00:15:13,839 --> 00:15:18,800
basically just responding

00:15:16,000 --> 00:15:21,760
to anything that is any message that is

00:15:18,800 --> 00:15:21,760
sent to this subject

00:15:22,720 --> 00:15:32,240
okay so using those credentials

00:15:26,959 --> 00:15:32,240
and let's try to create a

00:15:36,399 --> 00:15:41,839
provisioner it's just crashed

00:15:52,160 --> 00:15:55,839
so imax just crashed and

00:15:56,000 --> 00:15:58,639
but anyway

00:15:59,279 --> 00:16:03,519
uh repose next step

00:16:06,240 --> 00:16:09,040
wally keep

00:16:09,440 --> 00:16:13,120
okay so we have the tutorial

00:16:17,680 --> 00:16:23,839
so this is where we were and

00:16:26,639 --> 00:16:37,040
we want to start the provisioner

00:16:30,720 --> 00:16:41,440
and we need to pass it the

00:16:37,040 --> 00:16:41,440
signing key as it was mentioned before

00:16:45,279 --> 00:16:49,360
the code is inside of this let's chat

00:16:48,560 --> 00:16:52,320
access

00:16:49,360 --> 00:16:54,800
within the repo so let's go ahead and

00:16:52,320 --> 00:16:54,800
start it

00:16:57,759 --> 00:17:02,320
we have now uh something that can

00:17:00,639 --> 00:17:05,679
prohibition requests and let's try to

00:17:02,320 --> 00:17:08,400
make a request to get some credentials

00:17:05,679 --> 00:17:09,760
i'm going to make request fetch

00:17:08,400 --> 00:17:13,839
credentials for

00:17:09,760 --> 00:17:17,280
wall eqs we can see that

00:17:13,839 --> 00:17:19,280
whenever we make a request and i pass

00:17:17,280 --> 00:17:20,720
in the payload in this case this which

00:17:19,280 --> 00:17:23,439
is going to be the username

00:17:20,720 --> 00:17:24,240
i'm going to get this dynamically

00:17:23,439 --> 00:17:27,919
generated

00:17:24,240 --> 00:17:32,240
uh requests uh credentials

00:17:27,919 --> 00:17:34,880
yeah they're always going to be the same

00:17:32,240 --> 00:17:37,520
if i type this into let's say my

00:17:34,880 --> 00:17:37,520
credentials

00:17:41,360 --> 00:17:50,640
then i'm going to inspect them with

00:17:47,440 --> 00:17:54,080
let's see you can see that

00:17:50,640 --> 00:17:59,200
this the provisioner created a

00:17:54,080 --> 00:17:59,200
very also a limited permissions for this

00:17:59,280 --> 00:18:04,960
user so the name is a user but it's

00:18:02,640 --> 00:18:07,919
better and identified by the public

00:18:04,960 --> 00:18:10,160
uh key that and that's why we needed the

00:18:07,919 --> 00:18:14,160
signing key to be able to generate these

00:18:10,160 --> 00:18:15,120
uh users using that key pair so we have

00:18:14,160 --> 00:18:19,120
at this

00:18:15,120 --> 00:18:21,919
wall us user that is part of the

00:18:19,120 --> 00:18:24,320
cubicon account that is only able to

00:18:21,919 --> 00:18:27,600
send messages to publish that is online

00:18:24,320 --> 00:18:30,799
on a chat to any other messages

00:18:27,600 --> 00:18:34,320
and this is a very interesting that it's

00:18:30,799 --> 00:18:37,440
you're constrained to only be able to uh

00:18:34,320 --> 00:18:38,480
read your own uh dm's messages so you

00:18:37,440 --> 00:18:42,080
can publish to

00:18:38,480 --> 00:18:45,760
any dm but you can only subscribe to

00:18:42,080 --> 00:18:47,360
messages that will as represented by the

00:18:45,760 --> 00:18:50,400
public

00:18:47,360 --> 00:18:54,480
end key from this user

00:18:50,400 --> 00:18:57,679
so we can use these credentials to

00:18:54,480 --> 00:19:00,720
start a session in the chat

00:18:57,679 --> 00:19:00,720
in the chat folder

00:19:02,000 --> 00:19:16,559
let's create a session

00:19:11,200 --> 00:19:16,559
regrets so you can now send messages

00:19:22,720 --> 00:19:26,400
and let's create another

00:19:27,360 --> 00:19:29,919
user

00:19:31,360 --> 00:19:34,160
and let's say

00:19:34,400 --> 00:19:37,039
attendee

00:19:42,960 --> 00:19:48,559
credentials and

00:19:46,160 --> 00:19:48,559
chat

00:19:50,840 --> 00:19:53,840
regrets

00:20:04,840 --> 00:20:07,840
okay

00:20:12,320 --> 00:20:14,640
type

00:20:18,840 --> 00:20:21,840
chat

00:20:21,919 --> 00:20:25,120
you have a couple of users

00:20:25,600 --> 00:20:31,039
welcome to kubecon 2020.

00:20:32,490 --> 00:20:35,919
[Music]

00:20:33,679 --> 00:20:39,840
let's start this server and move it to

00:20:35,919 --> 00:20:39,840
trace to show some of the messages

00:20:40,960 --> 00:20:44,720
so everything should just reconnect to

00:20:43,840 --> 00:20:48,000
the

00:20:44,720 --> 00:20:49,679
server you can see that most of the

00:20:48,000 --> 00:20:53,280
traffic that is flying by is just uh

00:20:49,679 --> 00:20:53,280
jwts being exchanged

00:20:54,000 --> 00:20:57,679
and it is just in the jbl jwt library

00:20:57,200 --> 00:21:02,640
front

00:20:57,679 --> 00:21:04,960
you can find in that's io

00:21:02,640 --> 00:21:04,960
so

00:21:06,880 --> 00:21:13,440
yeah we can send messages to the

00:21:10,000 --> 00:21:17,840
general channel uh

00:21:13,440 --> 00:21:17,840
not so for example you can send

00:21:20,080 --> 00:21:22,960
private messages

00:21:24,720 --> 00:21:31,280
you can see that there's a dot now let

00:21:27,679 --> 00:21:35,840
me receive the message you can read it

00:21:31,280 --> 00:21:38,880
okay so how does this work let's go

00:21:35,840 --> 00:21:38,880
take a look at the code

00:21:43,360 --> 00:21:49,679
uh first let's check the provisioner how

00:21:46,960 --> 00:21:52,880
it's approaching the requests

00:21:49,679 --> 00:21:56,320
this is again a service

00:21:52,880 --> 00:21:56,320
and this means that

00:21:56,840 --> 00:22:01,600
service it is something that you

00:21:59,679 --> 00:22:03,919
usually expect to be for it to be load

00:22:01,600 --> 00:22:05,440
balanced so we're going to be using a q

00:22:03,919 --> 00:22:08,400
subscription

00:22:05,440 --> 00:22:10,720
and in this case is receiving a request

00:22:08,400 --> 00:22:10,720
on the

00:22:11,039 --> 00:22:18,000
uh chat.rec access as we

00:22:14,880 --> 00:22:18,559
have said previously so it is receiving

00:22:18,000 --> 00:22:23,200
request

00:22:18,559 --> 00:22:26,480
on chat rep wreck access

00:22:23,200 --> 00:22:28,000
and it's going to regenerate uh requests

00:22:26,480 --> 00:22:31,440
on the fly

00:22:28,000 --> 00:22:34,799
for the user on

00:22:31,440 --> 00:22:36,559
a number of subjects they went for

00:22:34,799 --> 00:22:38,320
heartbeats for the general channels and

00:22:36,559 --> 00:22:40,720
dms

00:22:38,320 --> 00:22:41,440
and it's going to use the signing key

00:22:40,720 --> 00:22:43,440
that we

00:22:41,440 --> 00:22:44,799
passed to the provision article to

00:22:43,440 --> 00:22:48,400
create uh

00:22:44,799 --> 00:22:50,559
the users and also uh

00:22:48,400 --> 00:22:51,440
take advantage of that identity to

00:22:50,559 --> 00:22:55,600
control to create

00:22:51,440 --> 00:22:59,200
a unique channels for the dms

00:22:55,600 --> 00:23:02,159
and this is uh in terms of the code how

00:22:59,200 --> 00:23:02,159
it's created there

00:23:02,880 --> 00:23:05,840
the jwt

00:23:07,360 --> 00:23:13,440
the credentials so

00:23:10,559 --> 00:23:13,440
it is creating the

00:23:15,840 --> 00:23:18,880
correct theme

00:23:19,280 --> 00:23:23,200
create the generating encoding into a

00:23:22,080 --> 00:23:26,240
byte

00:23:23,200 --> 00:23:29,120
payload into bytes and then

00:23:26,240 --> 00:23:29,120
just generating these

00:23:29,760 --> 00:23:33,120
credentials that are very similar to the

00:23:31,360 --> 00:23:36,559
credentials that we have used

00:23:33,120 --> 00:23:39,600
uh created with nse before

00:23:36,559 --> 00:23:41,279
so this is a very simple

00:23:39,600 --> 00:23:42,640
provider use a q subscription that

00:23:41,279 --> 00:23:46,480
represents the service and then

00:23:42,640 --> 00:23:48,559
respond with the credentials

00:23:46,480 --> 00:23:49,679
uh the next request was just a simple

00:23:48,559 --> 00:23:51,679
nuts request

00:23:49,679 --> 00:23:53,919
and so it's just calling a request in

00:23:51,679 --> 00:23:58,640
the api level

00:23:53,919 --> 00:24:04,480
and for the chat application

00:23:58,640 --> 00:24:09,919
it works by using those credentials and

00:24:04,480 --> 00:24:13,200
it subscribes to a number of streams

00:24:09,919 --> 00:24:13,760
you can have we can see that there is a

00:24:13,200 --> 00:24:17,200
stream

00:24:13,760 --> 00:24:20,400
for the channels kind of posts up

00:24:17,200 --> 00:24:21,039
for the dms and for sending the events

00:24:20,400 --> 00:24:24,320
that

00:24:21,039 --> 00:24:27,120
they're online and whenever we want to

00:24:24,320 --> 00:24:30,880
publish something

00:24:27,120 --> 00:24:33,360
we will uh

00:24:30,880 --> 00:24:34,480
of course send periodic events for that

00:24:33,360 --> 00:24:37,600
we are

00:24:34,480 --> 00:24:39,039
still online and also

00:24:37,600 --> 00:24:40,720
in case we want to post to one of the

00:24:39,039 --> 00:24:47,840
channels

00:24:40,720 --> 00:24:47,840
we will send uh

00:24:50,080 --> 00:24:52,880
a request

00:24:53,440 --> 00:24:56,559
okay it's fine

00:24:58,559 --> 00:25:03,919
so we're to publish into this a certain

00:25:00,799 --> 00:25:05,840
subject and in for dms we need the

00:25:03,919 --> 00:25:07,120
to have received a previous heartbeat so

00:25:05,840 --> 00:25:09,200
that we can

00:25:07,120 --> 00:25:10,880
talk to it so we need the because we

00:25:09,200 --> 00:25:11,679
need to use the public end key we need

00:25:10,880 --> 00:25:13,919
to

00:25:11,679 --> 00:25:15,360
receive at least an availability status

00:25:13,919 --> 00:25:20,559
from one of the

00:25:15,360 --> 00:25:23,039
car bidding that happens periodically

00:25:20,559 --> 00:25:24,400
so it's pretty simple and there's a very

00:25:23,039 --> 00:25:26,559
nice ui

00:25:24,400 --> 00:25:28,559
wrapper using one of the libraries from

00:25:26,559 --> 00:25:31,039
go but in terms of nets

00:25:28,559 --> 00:25:32,799
uh it's pretty straightforward what it's

00:25:31,039 --> 00:25:33,840
doing most of the heavy lifting is done

00:25:32,799 --> 00:25:37,520
by the

00:25:33,840 --> 00:25:40,880
uh authorization okay so

00:25:37,520 --> 00:25:43,840
this is uh how it looks like

00:25:40,880 --> 00:25:43,840
running locally

00:25:44,400 --> 00:25:48,640
let's leave this like that

00:25:50,880 --> 00:25:55,760
so you can just leave it there and we

00:25:53,840 --> 00:25:58,640
can reconnect to

00:25:55,760 --> 00:25:59,679
another super cluster later so we'll

00:25:58,640 --> 00:26:02,880
just go

00:25:59,679 --> 00:26:06,799
ahead and get started creating the

00:26:02,880 --> 00:26:06,799
super cluster on kubernetes

00:26:08,799 --> 00:26:12,320
and we're gonna this is gonna be

00:26:11,679 --> 00:26:14,720
composed

00:26:12,320 --> 00:26:15,919
of uh three regions as i mentioned at

00:26:14,720 --> 00:26:21,039
the beginning

00:26:15,919 --> 00:26:21,039
uh it's gonna be one in uh singapore

00:26:21,760 --> 00:26:25,760
and in singapore amsterdam and san

00:26:23,919 --> 00:26:26,240
francisco we're going to connect the

00:26:25,760 --> 00:26:27,760
chat

00:26:26,240 --> 00:26:30,559
the clients similar to how we did

00:26:27,760 --> 00:26:33,919
locally but they're going to be now

00:26:30,559 --> 00:26:37,279
uh connected to these other nodes

00:26:33,919 --> 00:26:39,279
um we're going to keep it simple

00:26:37,279 --> 00:26:40,960
in terms of the um tutorial we're going

00:26:39,279 --> 00:26:41,840
to it's going to be using the public

00:26:40,960 --> 00:26:44,480
eyepiece

00:26:41,840 --> 00:26:45,039
from the notes uh we're going to create

00:26:44,480 --> 00:26:47,279
uh

00:26:45,039 --> 00:26:49,039
two different clusters and using the

00:26:47,279 --> 00:26:51,039
digital lotion

00:26:49,039 --> 00:26:53,600
we need the firewall to be open because

00:26:51,039 --> 00:26:56,240
we're going to be using uh host parts

00:26:53,600 --> 00:26:57,200
for the port the four to the two and

00:26:56,240 --> 00:27:00,240
seven especially

00:26:57,200 --> 00:27:02,080
75 22 which is the one for the gateway

00:27:00,240 --> 00:27:05,440
connections

00:27:02,080 --> 00:27:06,080
as represented here by these are blue

00:27:05,440 --> 00:27:10,559
arrows

00:27:06,080 --> 00:27:13,120
arrows and we also leave open the

00:27:10,559 --> 00:27:14,799
the port for leaf nodes which is another

00:27:13,120 --> 00:27:15,840
type of connection that's uh very

00:27:14,799 --> 00:27:17,840
interesting

00:27:15,840 --> 00:27:19,440
that allows you to create at least hop

00:27:17,840 --> 00:27:22,240
and stock uh topologies

00:27:19,440 --> 00:27:23,679
so essentially you can use this super

00:27:22,240 --> 00:27:27,679
super cluster

00:27:23,679 --> 00:27:31,200
later as a way to be able to communicate

00:27:27,679 --> 00:27:33,760
with uh multiple nuts

00:27:31,200 --> 00:27:35,279
clusters without them be them being

00:27:33,760 --> 00:27:39,039
themselves becoming

00:27:35,279 --> 00:27:42,399
uh a cluster um

00:27:39,039 --> 00:27:46,720
but that can be another tutorial

00:27:42,399 --> 00:27:46,720
but so we leave those uh open

00:27:46,799 --> 00:27:52,240
and we'll be using helm for

00:27:49,840 --> 00:27:53,840
uh for the setup so you can um

00:27:52,240 --> 00:27:57,840
officially support

00:27:53,840 --> 00:28:03,840
uh nuts charts nuts helm charts

00:27:57,840 --> 00:28:03,840
and i'm gonna move this to right now

00:28:08,559 --> 00:28:13,200
so it's officially support uh help chart

00:28:11,520 --> 00:28:17,679
so you can

00:28:13,200 --> 00:28:20,880
repo add this into your

00:28:17,679 --> 00:28:20,880
list of repos from helm

00:28:21,120 --> 00:28:23,919
we're gonna create

00:28:24,640 --> 00:28:27,760
we're gonna upload first to each one of

00:28:26,640 --> 00:28:33,360
the

00:28:27,760 --> 00:28:33,360
gateways the resolver configuration

00:28:34,960 --> 00:28:42,240
just to confirm that we are

00:28:38,159 --> 00:28:42,240
already have provisioned the clusters

00:28:42,320 --> 00:28:47,919
so we right now i'm using the cluster

00:28:45,600 --> 00:28:47,919
from

00:28:48,159 --> 00:28:53,520
singapore so i'm going to change to

00:28:54,559 --> 00:28:59,840
let's say amsterdam

00:29:03,919 --> 00:29:06,240
okay

00:29:11,520 --> 00:29:17,200
and we're using the external ips to able

00:29:14,720 --> 00:29:20,399
to create the super cluster so

00:29:17,200 --> 00:29:22,720
let's go ahead and create first

00:29:20,399 --> 00:29:24,480
the nuts accounts it's going to be a

00:29:22,720 --> 00:29:28,799
configuration map

00:29:24,480 --> 00:29:32,000
in each one of the clusters and

00:29:28,799 --> 00:29:35,279
we need to generate the list of

00:29:32,000 --> 00:29:38,840
uh gateway connections so uh just

00:29:35,279 --> 00:29:41,200
create a script to create generating

00:29:38,840 --> 00:29:45,520
them

00:29:41,200 --> 00:29:45,520
from the api server metadata

00:29:51,679 --> 00:29:55,840
okay this is wrong

00:30:19,039 --> 00:30:22,640
yeah so i have uh generated now the list

00:30:21,919 --> 00:30:26,240
of

00:30:22,640 --> 00:30:29,520
public ips and we're gonna

00:30:26,240 --> 00:30:36,159
use this as part of the

00:30:29,520 --> 00:30:39,200
helm yamo so

00:30:36,159 --> 00:30:43,360
let's use this explicit list

00:30:39,200 --> 00:30:46,000
of uh gateways

00:30:43,360 --> 00:30:46,960
uh going over the configuration a little

00:30:46,000 --> 00:30:50,720
bit we're using

00:30:46,960 --> 00:30:53,440
alpine just for simple simple debugging

00:30:50,720 --> 00:30:54,320
and we'll open a host port for each one

00:30:53,440 --> 00:30:56,799
of them so

00:30:54,320 --> 00:30:58,320
that that is done by using this external

00:30:56,799 --> 00:31:00,640
access flag

00:30:58,320 --> 00:31:01,519
no logging and that affects performance

00:31:00,640 --> 00:31:03,840
actually

00:31:01,519 --> 00:31:04,559
we enable off for the auth we're going

00:31:03,840 --> 00:31:06,880
to use the

00:31:04,559 --> 00:31:08,799
nuts accounts configuration map that

00:31:06,880 --> 00:31:12,640
includes the

00:31:08,799 --> 00:31:15,760
static configuration from the accounts

00:31:12,640 --> 00:31:18,799
we're enabling the gateway ports

00:31:15,760 --> 00:31:21,679
and also for with the explicit ips from

00:31:18,799 --> 00:31:23,440
amsterdam singapore and san francisco

00:31:21,679 --> 00:31:26,399
these are exclusive ips

00:31:23,440 --> 00:31:29,120
but you can use uh for example dns

00:31:26,399 --> 00:31:31,039
instead on a single endpoint and then

00:31:29,120 --> 00:31:32,320
you can resolve the a records into a

00:31:31,039 --> 00:31:36,880
number of

00:31:32,320 --> 00:31:41,679
nets servers so that is totally fine

00:31:36,880 --> 00:31:41,679
let's use this configuration now

00:31:42,880 --> 00:31:49,840
and deployed two coordinates

00:31:47,039 --> 00:31:49,840
so now we have

00:31:52,640 --> 00:31:56,080
we should have nine nodes

00:31:59,279 --> 00:32:06,000
so we see that we got deployed to

00:32:02,799 --> 00:32:07,279
amsterdam next san francisco next we're

00:32:06,000 --> 00:32:15,840
gonna be

00:32:07,279 --> 00:32:15,840
and singapore let's show this

00:32:26,840 --> 00:32:34,320
okay

00:32:29,840 --> 00:32:42,000
let's now confirm the setup

00:32:34,320 --> 00:32:47,279
and get parts

00:32:42,000 --> 00:32:47,279
that's zero

00:32:47,440 --> 00:32:51,600
you can see that we have a connectivity

00:32:50,559 --> 00:32:54,880
between the clusters

00:32:51,600 --> 00:32:58,399
you can you have a local

00:32:54,880 --> 00:33:00,720
clustering working and also

00:32:58,399 --> 00:33:01,840
it has created outbound gateway

00:33:00,720 --> 00:33:05,679
connections

00:33:01,840 --> 00:33:09,600
in this case from amsterdam to towards

00:33:05,679 --> 00:33:14,399
san francisco and let's confirm

00:33:09,600 --> 00:33:17,200
for example here we are at

00:33:14,399 --> 00:33:18,000
amsterdam so let's make a quick

00:33:17,200 --> 00:33:20,240
connection

00:33:18,000 --> 00:33:20,240
here

00:33:21,760 --> 00:33:25,840
you can see that we can get on the

00:33:23,840 --> 00:33:26,799
cluster and we got disconnected because

00:33:25,840 --> 00:33:29,840
we didn't put

00:33:26,799 --> 00:33:32,640
any credentials now

00:33:29,840 --> 00:33:35,279
let's use this to make a request from

00:33:32,640 --> 00:33:35,279
amsterdam

00:33:35,840 --> 00:33:39,840
i'm gonna create a service here

00:33:41,039 --> 00:33:47,519
similar to how we tested locally that

00:33:43,840 --> 00:33:47,519
the request response was working

00:33:47,840 --> 00:33:56,240
we have something here working now

00:33:53,039 --> 00:33:56,240
let's connect this first

00:33:58,399 --> 00:34:04,559
let's create this service

00:34:02,559 --> 00:34:07,840
now let's use the one of the ips from

00:34:04,559 --> 00:34:07,840
san francisco

00:34:13,280 --> 00:34:21,839
to make a request

00:34:24,720 --> 00:34:32,320
okay so all of this is being routed uh

00:34:29,679 --> 00:34:32,320
globally

00:34:36,240 --> 00:34:39,200
now we can

00:34:39,599 --> 00:34:43,049
uh

00:34:39,929 --> 00:34:43,049
[Music]

00:34:45,280 --> 00:34:49,839
think i'm going to use this to

00:34:51,119 --> 00:34:54,480
expose the application

00:34:56,159 --> 00:35:00,720
just a quick example i'm going to show

00:34:57,520 --> 00:35:00,720
the system

00:35:00,839 --> 00:35:07,440
credentials

00:35:03,040 --> 00:35:09,440
just to show how the traffic looks like

00:35:07,440 --> 00:35:11,599
these are the events that are flowing

00:35:09,440 --> 00:35:14,240
through the system uh

00:35:11,599 --> 00:35:16,640
for operations that can be quite useful

00:35:14,240 --> 00:35:18,400
you can see how many gateways

00:35:16,640 --> 00:35:21,599
and the stats from each one of the

00:35:18,400 --> 00:35:25,040
server the servers

00:35:21,599 --> 00:35:25,839
they're pretty readable and we also have

00:35:25,040 --> 00:35:28,800
uh

00:35:25,839 --> 00:35:30,960
extensions to able to ingest this data

00:35:28,800 --> 00:35:33,280
into prometheus there's the surveyor

00:35:30,960 --> 00:35:33,280
project

00:35:34,960 --> 00:35:39,280
so yeah but it's a nice way to inspect

00:35:37,200 --> 00:35:42,320
how many connections and

00:35:39,280 --> 00:35:42,320
total connections have

00:35:43,200 --> 00:35:46,800
and the status from each one of the

00:35:44,560 --> 00:35:50,960
nodes

00:35:46,800 --> 00:35:54,000
and whether gateways are happening okay

00:35:50,960 --> 00:35:57,280
so there's connectivity

00:35:54,000 --> 00:36:01,920
and we can't

00:35:57,280 --> 00:36:05,760
um instead of basically doing the same

00:36:01,920 --> 00:36:08,480
that we were doing before with the

00:36:05,760 --> 00:36:08,480
credentials

00:36:09,040 --> 00:36:13,839
let's run the credential instead of a

00:36:15,200 --> 00:36:18,640
to the local server

00:36:20,320 --> 00:36:27,040
we can run it here in this case

00:36:24,320 --> 00:36:28,320
this is a 138 is san francisco so i'm

00:36:27,040 --> 00:36:33,520
going to say that this comes from

00:36:28,320 --> 00:36:33,520
sfo i'm going to create a

00:36:34,000 --> 00:36:37,359
provision here um

00:36:37,599 --> 00:36:41,839
this is okay

00:36:54,400 --> 00:37:08,400
okay chat

00:36:58,320 --> 00:37:11,280
access should be okay now

00:37:08,400 --> 00:37:11,280
have an extra s

00:37:13,040 --> 00:37:17,200
so you can see that we connected from

00:37:14,640 --> 00:37:17,200
sfo

00:37:17,440 --> 00:37:21,040
let's add another credentials

00:37:19,040 --> 00:37:37,839
probationer

00:37:21,040 --> 00:37:37,839
but that is connected from singapore

00:37:39,280 --> 00:37:43,040
so we're connected from singapore

00:37:46,880 --> 00:37:53,760
so i have two connections

00:37:50,880 --> 00:37:53,760
make a third one

00:37:55,119 --> 00:38:05,839
that's gonna request

00:38:09,200 --> 00:38:13,599
for credentials let's say it's an

00:38:11,839 --> 00:38:16,880
attendee

00:38:13,599 --> 00:38:20,480
so if you make a request to

00:38:16,880 --> 00:38:21,280
singapore here that is the node that is

00:38:20,480 --> 00:38:25,520
going to read

00:38:21,280 --> 00:38:29,359
uh in this case okay

00:38:25,520 --> 00:38:32,720
it's 38 so x actually

00:38:29,359 --> 00:38:35,920
they're connected to the same ap

00:38:32,720 --> 00:38:35,920
okay so i use the same ip

00:38:37,040 --> 00:38:40,240
this was this one was singapore the

00:38:39,520 --> 00:38:42,960
other one is

00:38:40,240 --> 00:38:42,960
san francisco

00:38:43,760 --> 00:38:48,800
let's connect this one to singapore

00:38:46,320 --> 00:38:48,800
actually

00:38:48,960 --> 00:38:53,680
then if i make a request from

00:38:58,839 --> 00:39:01,839
singapore

00:39:08,240 --> 00:39:12,000
that is the one that is going to handle

00:39:09,760 --> 00:39:15,400
so you can see that there's a label now

00:39:12,000 --> 00:39:18,519
sgp but if i send something from

00:39:15,400 --> 00:39:18,519
[Music]

00:39:21,440 --> 00:39:32,480
san francisco

00:39:29,280 --> 00:39:32,480
sfo attendee

00:39:34,240 --> 00:39:42,960
that's from sfo ps4 sf

00:39:39,839 --> 00:39:46,079
and but here's some

00:39:42,960 --> 00:39:50,880
so we're making requests to

00:39:46,079 --> 00:39:54,480
sf but if it

00:39:50,880 --> 00:39:56,000
fails then or start receiving requests

00:39:54,480 --> 00:39:57,440
from singapore

00:39:56,000 --> 00:40:01,200
so that's uh thanks to the q

00:39:57,440 --> 00:40:01,200
subscription and the routing and the

00:40:02,640 --> 00:40:06,319
disaster recovery and features from the

00:40:05,119 --> 00:40:07,839
xv2

00:40:06,319 --> 00:40:10,880
there was automatic failover from the

00:40:07,839 --> 00:40:13,680
consumers transparently so

00:40:10,880 --> 00:40:16,079
yeah we basically another kubernetes

00:40:13,680 --> 00:40:18,720
cluster is handling the request

00:40:16,079 --> 00:40:18,720
for us now

00:40:19,119 --> 00:40:27,280
okay so let's uh make the credentials

00:40:23,680 --> 00:40:27,280
from sf attendee

00:40:30,000 --> 00:40:32,319
save

00:40:36,839 --> 00:40:39,839
threats

00:40:42,000 --> 00:40:45,200
there's another one for

00:40:50,839 --> 00:40:53,839
and

00:41:04,000 --> 00:41:08,800
now let's make another request for

00:41:18,839 --> 00:41:23,520
amsterdam

00:41:20,720 --> 00:41:23,520
let's start the chat

00:41:24,960 --> 00:41:35,839
using so this one's going to connect to

00:41:28,000 --> 00:41:35,839
answer them

00:41:39,280 --> 00:41:42,400
using the credentials

00:41:44,000 --> 00:41:49,599
from amsterdam i connected

00:41:47,520 --> 00:42:03,839
and this other one is going to connect

00:41:49,599 --> 00:42:03,839
from ceph

00:42:14,960 --> 00:42:21,920
so now you have a globally available uh

00:42:18,079 --> 00:42:23,920
chat uh server service

00:42:21,920 --> 00:42:26,240
with unique identities it's secure you

00:42:23,920 --> 00:42:28,400
cannot read the messages from

00:42:26,240 --> 00:42:31,680
other attendees but they can still

00:42:28,400 --> 00:42:36,800
communicate amongst them

00:42:31,680 --> 00:42:39,760
between them we cannot

00:42:36,800 --> 00:42:39,760
take a look at some of the

00:42:41,920 --> 00:42:46,800
you cannot even from the system account

00:42:43,680 --> 00:42:48,720
you cannot receive the messages

00:42:46,800 --> 00:42:49,839
and there's no user that has enough

00:42:48,720 --> 00:42:52,319
permissions actually

00:42:49,839 --> 00:42:53,839
in this system to be able to read the

00:42:52,319 --> 00:42:57,280
dms from

00:42:53,839 --> 00:43:00,160
from anyone there's no credentials that

00:42:57,280 --> 00:43:02,960
allow you for a load allow that allow

00:43:00,160 --> 00:43:02,960
for that to happen

00:43:03,280 --> 00:43:05,760
and

00:43:06,400 --> 00:43:14,240
so that's uh pretty much it for

00:43:10,240 --> 00:43:16,880
the tutorial um

00:43:14,240 --> 00:43:17,440
separately we can uh cover how to enable

00:43:16,880 --> 00:43:21,280
all of this

00:43:17,440 --> 00:43:23,200
to use a tls and also uh

00:43:21,280 --> 00:43:25,119
looking at how lyft node connections can

00:43:23,200 --> 00:43:26,400
actually make this gateway connections

00:43:25,119 --> 00:43:28,400
are

00:43:26,400 --> 00:43:29,760
more straightforward to set up that

00:43:28,400 --> 00:43:33,119
could also be

00:43:29,760 --> 00:43:36,800
uh interesting but okay i'll connect

00:43:33,119 --> 00:43:43,119
then at the for

00:43:36,800 --> 00:43:43,119

YouTube URL: https://www.youtube.com/watch?v=kN-GbWRVFos


