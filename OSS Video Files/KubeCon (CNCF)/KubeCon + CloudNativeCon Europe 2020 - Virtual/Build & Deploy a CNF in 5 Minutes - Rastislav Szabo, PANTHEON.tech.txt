Title: Build & Deploy a CNF in 5 Minutes - Rastislav Szabo, PANTHEON.tech
Publication date: 2020-08-27
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Build & Deploy a CNF in 5 Minutes - Rastislav Szabo, PANTHEON.tech 

Cloud Native Network Function (CNF) is a software implementation of a network function, traditionally performed on a physical device (e.g. IPv4/v6 router, L2 bridge/switch, VPN gateway, firewall), but built and deployed in a cloud-native way.  This talk will show a live demo on how a CNF providing cloud-native NAT (Network Address Translation) functionality can be built and deployed into a Kubernetes cluster within 5 minutes. To achieve that, several open source projects will be used: FD.io (an open source terabit software dataplane), Ligato.io (programming framework for building CNF control and management plane) and Network Service Mesh for interconnecting CNFs in a Kubernetes cluster on required network layers.

https://sched.co/Zeon
Captions: 
	00:00:00,080 --> 00:00:04,240
so hello i'm marasti sol sabo from

00:00:01,920 --> 00:00:06,319
pantone tech and today i'll show you how

00:00:04,240 --> 00:00:08,000
you can build and deploy a cnf in five

00:00:06,319 --> 00:00:10,639
minutes

00:00:08,000 --> 00:00:12,639
so before we go to that let me talk uh

00:00:10,639 --> 00:00:14,960
about what the cnn is

00:00:12,639 --> 00:00:16,320
cna for cloud native network function is

00:00:14,960 --> 00:00:18,640
a software implementation

00:00:16,320 --> 00:00:19,760
of some network functionality such as

00:00:18,640 --> 00:00:22,880
router switch

00:00:19,760 --> 00:00:24,800
vpn gateway or firewall which is built

00:00:22,880 --> 00:00:28,400
and deployed in a cloud native way

00:00:24,800 --> 00:00:31,199
meaning that that it runs in a container

00:00:28,400 --> 00:00:34,960
in kubernetes it can be configured using

00:00:31,199 --> 00:00:36,960
cloud native apis such as crds or grpc

00:00:34,960 --> 00:00:38,960
and it can be chained with other cnfs to

00:00:36,960 --> 00:00:41,200
provide some more complex network

00:00:38,960 --> 00:00:44,399
functionality

00:00:41,200 --> 00:00:45,600
so how can we build a cnf in order to do

00:00:44,399 --> 00:00:48,079
that we need to address

00:00:45,600 --> 00:00:49,600
three main challenges first we need to

00:00:48,079 --> 00:00:50,399
have a data plan which can provide

00:00:49,600 --> 00:00:53,680
directional

00:00:50,399 --> 00:00:54,800
network functionality an excellent open

00:00:53,680 --> 00:00:57,840
source choice for that

00:00:54,800 --> 00:01:00,399
is the universal fdio vpp

00:00:57,840 --> 00:01:02,160
data plane then we need to build the

00:01:00,399 --> 00:01:02,559
cloud native control and management for

00:01:02,160 --> 00:01:05,439
it

00:01:02,559 --> 00:01:06,159
and for that legato io is a very good

00:01:05,439 --> 00:01:09,840
open source

00:01:06,159 --> 00:01:12,080
framework and finally we need to

00:01:09,840 --> 00:01:13,680
interconnect the cnfs with each other or

00:01:12,080 --> 00:01:15,119
with some external networking

00:01:13,680 --> 00:01:17,520
infrastructure

00:01:15,119 --> 00:01:19,360
very often on lower networking layers

00:01:17,520 --> 00:01:20,640
than what we can get from the cni

00:01:19,360 --> 00:01:22,880
plugins

00:01:20,640 --> 00:01:26,080
and for that we can use the network

00:01:22,880 --> 00:01:27,920
service mesh io project

00:01:26,080 --> 00:01:30,400
and so the simple cnf that you can run

00:01:27,920 --> 00:01:33,280
in kubernetes is essentially this

00:01:30,400 --> 00:01:34,400
a legato vpp agent occur image started

00:01:33,280 --> 00:01:37,040
in kubernetes

00:01:34,400 --> 00:01:39,360
with a single crypt catal command it

00:01:37,040 --> 00:01:41,119
already contains the vpp data plane

00:01:39,360 --> 00:01:43,119
and the management plan for its

00:01:41,119 --> 00:01:44,720
configuration

00:01:43,119 --> 00:01:46,720
but the data plan is not connected

00:01:44,720 --> 00:01:49,200
anywhere at this point so it is

00:01:46,720 --> 00:01:50,479
actually not doing anything so how can

00:01:49,200 --> 00:01:54,479
we connect it

00:01:50,479 --> 00:01:56,399
to some other cnfs and one solution for

00:01:54,479 --> 00:01:58,799
that may be the network service mesh

00:01:56,399 --> 00:02:00,479
uh with combination of the nsm plugin

00:01:58,799 --> 00:02:03,840
for legato

00:02:00,479 --> 00:02:06,399
uh which

00:02:03,840 --> 00:02:08,000
which provides a seamless integration of

00:02:06,399 --> 00:02:10,720
ligato based cnfs with network

00:02:08,000 --> 00:02:13,120
service mesh most importantly it allows

00:02:10,720 --> 00:02:14,160
to define connections between cnfs fully

00:02:13,120 --> 00:02:18,959
declaratively

00:02:14,160 --> 00:02:20,400
without the need for writing any code

00:02:18,959 --> 00:02:22,400
as an example let's think about the

00:02:20,400 --> 00:02:23,040
network address translation cnf that

00:02:22,400 --> 00:02:25,280
needs to be

00:02:23,040 --> 00:02:27,680
connected to two other ports here named

00:02:25,280 --> 00:02:29,840
as the client and the web server

00:02:27,680 --> 00:02:31,440
the interconnection between the pods is

00:02:29,840 --> 00:02:35,440
first described with the standard and

00:02:31,440 --> 00:02:37,680
some crd as shown on this slide

00:02:35,440 --> 00:02:38,560
and then another crd is deployed which

00:02:37,680 --> 00:02:41,519
contains some

00:02:38,560 --> 00:02:44,800
nsm wiring information uh like ip

00:02:41,519 --> 00:02:46,560
addresses applied on nsm interfaces

00:02:44,800 --> 00:02:48,319
and the actual cnn functionality

00:02:46,560 --> 00:02:50,800
configuration which is network address

00:02:48,319 --> 00:02:54,160
translation configuration in this case

00:02:50,800 --> 00:02:55,680
as shown on the right side of the slide

00:02:54,160 --> 00:02:57,440
and there is all of the deployment is

00:02:55,680 --> 00:02:58,800
shown on this picture as you can see we

00:02:57,440 --> 00:03:00,800
have three pots

00:02:58,800 --> 00:03:02,000
with additional network interfaces

00:03:00,800 --> 00:03:05,840
attached by networks

00:03:02,000 --> 00:03:05,840
service mesh running here

00:03:06,400 --> 00:03:10,560
and you can see that the client port has

00:03:08,800 --> 00:03:14,560
multiple network interfaces

00:03:10,560 --> 00:03:16,840
uh connected to it eth0 is its cni and

00:03:14,560 --> 00:03:18,400
the tab zero is it's an sm attached

00:03:16,840 --> 00:03:20,879
interface

00:03:18,400 --> 00:03:22,000
the web server has one mamiv interface

00:03:20,879 --> 00:03:25,840
connected

00:03:22,000 --> 00:03:29,120
to it by the network service mesh and

00:03:25,840 --> 00:03:30,959
not 4cnf running in the middle has two

00:03:29,120 --> 00:03:32,560
member interfaces attached by the

00:03:30,959 --> 00:03:34,319
network service mesh

00:03:32,560 --> 00:03:37,519
with a network address translation

00:03:34,319 --> 00:03:37,519
configured between them

00:03:37,599 --> 00:03:42,159
and here we have a curl test where the

00:03:40,319 --> 00:03:45,360
client is accessing the web server

00:03:42,159 --> 00:03:48,560
via the not cnf port through the nsm

00:03:45,360 --> 00:03:48,560
network interconnections

00:03:48,879 --> 00:03:53,120
so if you want to reproduce this demo

00:03:50,560 --> 00:03:54,400
yourself and explore it in a little bit

00:03:53,120 --> 00:03:56,000
more detail

00:03:54,400 --> 00:03:57,760
feel free to visit this github page

00:03:56,000 --> 00:04:00,720
which contains all the deployment files

00:03:57,760 --> 00:04:02,239
and instructions for the deployment

00:04:00,720 --> 00:04:06,000
that's it from me thank you for watching

00:04:02,239 --> 00:04:06,000

YouTube URL: https://www.youtube.com/watch?v=CVz0fDSGj-U


