Title: Hacking on Network Service Mesh Dataplane for a True Multi-c... Aleksandra Kowalska & Jaroslaw Lukow
Publication date: 2020-08-27
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Hacking on Network Service Mesh Dataplane for a True Multi-cloud Experience - Aleksandra Kowalska, Netcompany & Jaroslaw Lukow, Nine Fives Labs 

In this session the presenters will guide you through integrating Network Service Mesh with the Tungsten Fabric SDN controller as the dataplane tunnel provider. The session will bring both information about the NSM architecture and its use-cases. The TF's ubiquity of integrations (Kubernetes, OpenStack, VMware, physical appliances etc.) enables to demonstrate the true concept of cloud-native networking - when the location of the network service is irrevelant to the consumer and she can focus only on the required functionality. Thus, we can mix and match different clusters, orchestrators and technologies to provide a flexible networking environment.

https://sched.co/Zepf
Captions: 
	00:00:00,240 --> 00:00:05,120
hi my name is ola and i'm jarek

00:00:03,040 --> 00:00:06,960
greetings from warsaw we are devops

00:00:05,120 --> 00:00:08,320
engineers and we help developers in

00:00:06,960 --> 00:00:10,080
optimizing build and deployment

00:00:08,320 --> 00:00:11,519
processes on different environments

00:00:10,080 --> 00:00:13,280
mostly kubernetes

00:00:11,519 --> 00:00:14,960
we would like to tell you about two

00:00:13,280 --> 00:00:16,720
great pieces of technology

00:00:14,960 --> 00:00:18,400
namely network service mesh and the

00:00:16,720 --> 00:00:19,439
tungsten fabric virtual network

00:00:18,400 --> 00:00:22,320
controller

00:00:19,439 --> 00:00:24,880
and how to make them work together to

00:00:22,320 --> 00:00:27,119
form a nice multi-cloud setup

00:00:24,880 --> 00:00:28,720
if you have ever deployed an application

00:00:27,119 --> 00:00:30,560
in a kubernetes environment

00:00:28,720 --> 00:00:32,880
there is a high chance that you

00:00:30,560 --> 00:00:34,800
encountered some problems when trying to

00:00:32,880 --> 00:00:37,120
connect to the outside world

00:00:34,800 --> 00:00:38,480
everything works perfectly as long as

00:00:37,120 --> 00:00:40,559
all your dependencies

00:00:38,480 --> 00:00:42,879
are contained inside a single kubernetes

00:00:40,559 --> 00:00:45,680
cluster but when you start to

00:00:42,879 --> 00:00:48,079
integrate with some external services

00:00:45,680 --> 00:00:50,480
you need to deal with stuff like routers

00:00:48,079 --> 00:00:52,559
firewalls security policies and

00:00:50,480 --> 00:00:55,039
different vpn applications

00:00:52,559 --> 00:00:57,760
that don't really fit into the cloud

00:00:55,039 --> 00:00:58,320
native automation provided by kubernetes

00:00:57,760 --> 00:01:00,399
and

00:00:58,320 --> 00:01:02,160
they actually shouldn't be a concern for

00:01:00,399 --> 00:01:04,720
your application

00:01:02,160 --> 00:01:06,560
network service mesh is a tool that aims

00:01:04,720 --> 00:01:07,680
to solve this exact cloud native

00:01:06,560 --> 00:01:10,400
networking problem

00:01:07,680 --> 00:01:12,479
and be a game changer in this field it

00:01:10,400 --> 00:01:15,200
brings cloud native to the networking

00:01:12,479 --> 00:01:16,400
world by exposing an api that allows you

00:01:15,200 --> 00:01:18,479
to dynamically

00:01:16,400 --> 00:01:20,479
create and attach your workloads to

00:01:18,479 --> 00:01:22,880
services inside and outside

00:01:20,479 --> 00:01:24,799
of your deployment environment and

00:01:22,880 --> 00:01:26,240
tungsten fabric appears to be a great

00:01:24,799 --> 00:01:28,640
complementary technology

00:01:26,240 --> 00:01:30,240
for network service mesh and we would

00:01:28,640 --> 00:01:33,920
like to show you why

00:01:30,240 --> 00:01:35,759
so here comes the agenda for today

00:01:33,920 --> 00:01:37,759
we will start with a brief introduction

00:01:35,759 --> 00:01:40,079
about network service mesh

00:01:37,759 --> 00:01:41,119
so what it is and what architecture it

00:01:40,079 --> 00:01:43,280
has

00:01:41,119 --> 00:01:44,560
then we'll explain on a high level how

00:01:43,280 --> 00:01:46,479
the connectivity between

00:01:44,560 --> 00:01:48,640
apple and external world can be

00:01:46,479 --> 00:01:50,880
established with nsm

00:01:48,640 --> 00:01:52,079
then we'll say a few words about what is

00:01:50,880 --> 00:01:54,799
tungsten fabric

00:01:52,079 --> 00:01:56,000
and we will give um overview of the

00:01:54,799 --> 00:01:58,880
implementation

00:01:56,000 --> 00:02:00,079
of a tungsten fabric for water for nsm

00:01:58,880 --> 00:02:01,200
which we've prepared for this

00:02:00,079 --> 00:02:03,600
presentation

00:02:01,200 --> 00:02:05,200
at the end we'll give a demo of tungsten

00:02:03,600 --> 00:02:08,160
fabric for water

00:02:05,200 --> 00:02:09,520
with openstack cluster and kubernetes

00:02:08,160 --> 00:02:12,400
cluster

00:02:09,520 --> 00:02:14,160
okay so let's start with a question what

00:02:12,400 --> 00:02:16,720
is network service mesh

00:02:14,160 --> 00:02:18,000
so network service mesh is cncf

00:02:16,720 --> 00:02:19,840
standalone project

00:02:18,000 --> 00:02:22,080
that extends networking solutions

00:02:19,840 --> 00:02:25,200
implemented in kubernetes

00:02:22,080 --> 00:02:27,280
and it provides l2 l3 networking for

00:02:25,200 --> 00:02:29,440
applications deployed in kubernetes and

00:02:27,280 --> 00:02:30,640
facilitates the configuration of

00:02:29,440 --> 00:02:33,519
connectivity

00:02:30,640 --> 00:02:36,640
between a pod and external services for

00:02:33,519 --> 00:02:39,440
example pods from different cluster

00:02:36,640 --> 00:02:40,560
basically you can think of it as a way

00:02:39,440 --> 00:02:42,640
to dynamically

00:02:40,560 --> 00:02:44,879
attach additional network interface to a

00:02:42,640 --> 00:02:44,879
pod

00:02:45,680 --> 00:02:49,599
let's take a look at a few network

00:02:47,920 --> 00:02:51,200
service mesh components relevant for

00:02:49,599 --> 00:02:54,480
this presentation

00:02:51,200 --> 00:02:57,599
so network service registry

00:02:54,480 --> 00:02:58,239
it's here and it contains all the

00:02:57,599 --> 00:03:00,879
available

00:02:58,239 --> 00:03:02,640
virtual networks in this case it's alice

00:03:00,879 --> 00:03:05,680
and bob

00:03:02,640 --> 00:03:07,360
network service manager uh it is a

00:03:05,680 --> 00:03:09,760
control plane component

00:03:07,360 --> 00:03:11,519
it is a demon set deployed on each node

00:03:09,760 --> 00:03:13,599
in a cluster

00:03:11,519 --> 00:03:15,920
it accepts network service requests from

00:03:13,599 --> 00:03:17,599
pods verifies network service presence

00:03:15,920 --> 00:03:19,120
in network service registry

00:03:17,599 --> 00:03:21,040
and forwards the request to the

00:03:19,120 --> 00:03:24,319
forwarder and

00:03:21,040 --> 00:03:27,840
network service mesh forwarders so ford

00:03:24,319 --> 00:03:29,680
is a data plane component it provides

00:03:27,840 --> 00:03:30,879
the connectivity requested by the

00:03:29,680 --> 00:03:33,360
manager

00:03:30,879 --> 00:03:34,879
and this is a plugable component so

00:03:33,360 --> 00:03:37,040
official network service mesh called

00:03:34,879 --> 00:03:37,760
repository provides implementation for

00:03:37,040 --> 00:03:41,680
vpp

00:03:37,760 --> 00:03:43,680
and kernel but we want to show you

00:03:41,680 --> 00:03:45,280
how the new implementation can be done

00:03:43,680 --> 00:03:48,720
on tungsten fabric

00:03:45,280 --> 00:03:51,519
example so let's talk

00:03:48,720 --> 00:03:53,360
now about how network service mesh is

00:03:51,519 --> 00:03:54,480
used to establish connectivity between a

00:03:53,360 --> 00:03:57,920
kubernetes board

00:03:54,480 --> 00:04:01,360
and an external service

00:03:57,920 --> 00:04:05,760
so we have a kubernetes node with a pod

00:04:01,360 --> 00:04:06,080
pod a inside and how can we connect with

00:04:05,760 --> 00:04:09,760
an

00:04:06,080 --> 00:04:11,599
external network from the pod so first

00:04:09,760 --> 00:04:13,120
we need to install network service mesh

00:04:11,599 --> 00:04:16,880
in the cluster

00:04:13,120 --> 00:04:19,680
so this part and it will provide

00:04:16,880 --> 00:04:20,720
network service manager and for other

00:04:19,680 --> 00:04:23,040
modules

00:04:20,720 --> 00:04:25,440
and network services manager maintains a

00:04:23,040 --> 00:04:26,560
list of available folders and network

00:04:25,440 --> 00:04:29,919
services

00:04:26,560 --> 00:04:31,440
and it's called network service registry

00:04:29,919 --> 00:04:32,960
and in this example we have two

00:04:31,440 --> 00:04:36,160
forwarders

00:04:32,960 --> 00:04:39,440
here and two networks

00:04:36,160 --> 00:04:43,199
already registered so

00:04:39,440 --> 00:04:44,960
what happens next pod a creates network

00:04:43,199 --> 00:04:45,840
service requests to network service

00:04:44,960 --> 00:04:48,240
manager

00:04:45,840 --> 00:04:50,479
to attach to a new service to a new

00:04:48,240 --> 00:04:53,199
network service

00:04:50,479 --> 00:04:54,639
in request it specifies to which service

00:04:53,199 --> 00:04:56,720
it wants to be connected to

00:04:54,639 --> 00:04:57,680
and which mechanism should it should be

00:04:56,720 --> 00:05:00,720
used with

00:04:57,680 --> 00:05:03,199
uh which for order so it wants to be

00:05:00,720 --> 00:05:06,800
connected to alice and it wants to use

00:05:03,199 --> 00:05:06,800
vpp forwarder in this case

00:05:07,520 --> 00:05:11,919
and and this request can be sent

00:05:09,759 --> 00:05:15,680
whenever application needs to connect to

00:05:11,919 --> 00:05:19,120
the network uh so yeah now

00:05:15,680 --> 00:05:19,919
uh manager takes over and manager

00:05:19,120 --> 00:05:21,840
verifies

00:05:19,919 --> 00:05:23,120
if alice network is available in the

00:05:21,840 --> 00:05:26,000
registry

00:05:23,120 --> 00:05:28,160
so yes it is available the response

00:05:26,000 --> 00:05:31,600
positive response goes back

00:05:28,160 --> 00:05:33,440
and now network service manager forwards

00:05:31,600 --> 00:05:35,360
the request to the forwarder

00:05:33,440 --> 00:05:38,240
to the vbp forwarder because this is

00:05:35,360 --> 00:05:41,520
what pod a requested

00:05:38,240 --> 00:05:42,080
and forwarder adds an interface to port

00:05:41,520 --> 00:05:44,880
a

00:05:42,080 --> 00:05:46,160
and enables connectivity to alice

00:05:44,880 --> 00:05:49,600
network

00:05:46,160 --> 00:05:49,919
and that's it we have pod a connected to

00:05:49,600 --> 00:05:52,000
the

00:05:49,919 --> 00:05:53,520
external service through newly created

00:05:52,000 --> 00:05:56,639
network service

00:05:53,520 --> 00:05:59,039
network interface sorry

00:05:56,639 --> 00:05:59,680
but of course default kubernetes bot

00:05:59,039 --> 00:06:03,680
network

00:05:59,680 --> 00:06:06,400
is still available so

00:06:03,680 --> 00:06:07,360
this is how network service mesh works

00:06:06,400 --> 00:06:09,680
and

00:06:07,360 --> 00:06:12,720
each forwarder has its own mechanism for

00:06:09,680 --> 00:06:15,520
providing connectivity to the services

00:06:12,720 --> 00:06:16,160
today we want to show you how tungsten

00:06:15,520 --> 00:06:19,280
fabric

00:06:16,160 --> 00:06:21,840
can be used as such mechanism so to do

00:06:19,280 --> 00:06:24,560
so we've prepared our own forwarder

00:06:21,840 --> 00:06:27,919
which we'll present later on but let's

00:06:24,560 --> 00:06:30,800
talk about tungsten fabric first

00:06:27,919 --> 00:06:32,479
so what is tungsten fabric tungsten

00:06:30,800 --> 00:06:33,360
fabric is networking backend for

00:06:32,479 --> 00:06:36,479
kubernetes

00:06:33,360 --> 00:06:37,280
openstack and for public clouds for

00:06:36,479 --> 00:06:40,720
example

00:06:37,280 --> 00:06:42,960
it allows to create virtual networks

00:06:40,720 --> 00:06:44,240
to provide connectivity between virtual

00:06:42,960 --> 00:06:47,600
machines on openstack

00:06:44,240 --> 00:06:50,560
and bottom kubernetes and in the demo

00:06:47,600 --> 00:06:52,720
we will show interoperability between

00:06:50,560 --> 00:06:55,039
kubernetes and openstack

00:06:52,720 --> 00:06:56,240
but the same approach can be used to

00:06:55,039 --> 00:06:58,400
connect ports to

00:06:56,240 --> 00:06:59,759
any other environment supported by by

00:06:58,400 --> 00:07:01,440
tungsten fabric

00:06:59,759 --> 00:07:04,319
so it gives you an opportunity to create

00:07:01,440 --> 00:07:06,479
multi-cloud architectures

00:07:04,319 --> 00:07:07,840
so on the slide we have an example of

00:07:06,479 --> 00:07:11,440
timestamp fabric

00:07:07,840 --> 00:07:13,520
installed on openstack environment

00:07:11,440 --> 00:07:15,680
and tanks fabric is the main network

00:07:13,520 --> 00:07:18,319
provider in this cluster

00:07:15,680 --> 00:07:20,319
so tungsten fabric connects virtual

00:07:18,319 --> 00:07:23,360
machines and private networks

00:07:20,319 --> 00:07:26,720
it provides overlay networking

00:07:23,360 --> 00:07:30,319
in the picture you have four

00:07:26,720 --> 00:07:32,639
virtual machines on two openstack hosts

00:07:30,319 --> 00:07:34,560
with tanks and fabric v routers

00:07:32,639 --> 00:07:36,880
installed within

00:07:34,560 --> 00:07:37,680
and tungsten fabric maintains a global

00:07:36,880 --> 00:07:40,639
routing

00:07:37,680 --> 00:07:42,479
table and keeps it synchronized between

00:07:40,639 --> 00:07:45,599
the vibrators

00:07:42,479 --> 00:07:47,919
so now we'd like to connect this word to

00:07:45,599 --> 00:07:50,639
a kubernetes cluster

00:07:47,919 --> 00:07:53,599
so here comes network service mesh for

00:07:50,639 --> 00:07:55,599
border for tax and fabric

00:07:53,599 --> 00:07:57,360
so first let's get back to the setup of

00:07:55,599 --> 00:07:58,080
kubernetes cluster with network service

00:07:57,360 --> 00:08:01,120
mesh already

00:07:58,080 --> 00:08:03,759
installed and let's add the tungsten

00:08:01,120 --> 00:08:06,479
fabric cluster to the picture

00:08:03,759 --> 00:08:07,759
so what we need to do is to install two

00:08:06,479 --> 00:08:10,560
new components

00:08:07,759 --> 00:08:12,160
a tungsten fabric v router and thanks a

00:08:10,560 --> 00:08:16,000
fabric forwarder for

00:08:12,160 --> 00:08:17,440
network service mesh so that v router is

00:08:16,000 --> 00:08:20,400
data plane component

00:08:17,440 --> 00:08:22,240
it is responsible for packets tunneling

00:08:20,400 --> 00:08:25,039
to other v routers

00:08:22,240 --> 00:08:26,639
and the forwarder is control plane and

00:08:25,039 --> 00:08:29,599
it carries out stitching the port

00:08:26,639 --> 00:08:32,640
together with the v router

00:08:29,599 --> 00:08:36,000
okay so again

00:08:32,640 --> 00:08:37,760
pod a wants to connect to the network

00:08:36,000 --> 00:08:39,120
so it creates a request to network

00:08:37,760 --> 00:08:41,839
service manager to attach

00:08:39,120 --> 00:08:41,839
to a network

00:08:42,240 --> 00:08:46,000
but this time it says it wants to use

00:08:44,480 --> 00:08:47,839
tanks and fabric for order

00:08:46,000 --> 00:08:49,440
and it still wants to connect to alice

00:08:47,839 --> 00:08:52,240
network

00:08:49,440 --> 00:08:53,200
okay so network service manager takes

00:08:52,240 --> 00:08:55,920
over

00:08:53,200 --> 00:08:57,120
and it asks network service registries

00:08:55,920 --> 00:09:00,640
is there

00:08:57,120 --> 00:09:03,519
and yes it is so response go back

00:09:00,640 --> 00:09:05,120
and now thanks for fabric forwarder

00:09:03,519 --> 00:09:08,320
takes over

00:09:05,120 --> 00:09:11,440
so thanks and fabric for links port

00:09:08,320 --> 00:09:13,680
a to alice network by adding an

00:09:11,440 --> 00:09:17,760
interface to a pod

00:09:13,680 --> 00:09:20,160
an interface is plugged into v router

00:09:17,760 --> 00:09:21,440
an entry is added to the tungsten fabric

00:09:20,160 --> 00:09:24,720
writing table

00:09:21,440 --> 00:09:27,600
with a new ip address associated with

00:09:24,720 --> 00:09:30,880
kubernetes node

00:09:27,600 --> 00:09:31,200
and in result we have configuration set

00:09:30,880 --> 00:09:33,519
up

00:09:31,200 --> 00:09:34,560
in v router and virtual network routing

00:09:33,519 --> 00:09:36,720
table

00:09:34,560 --> 00:09:38,800
and that enables pod a to have two-way

00:09:36,720 --> 00:09:42,000
communication with virtual hosts

00:09:38,800 --> 00:09:44,000
in the tungsten fabric network so now

00:09:42,000 --> 00:09:45,920
thanks the fabric controller ensures

00:09:44,000 --> 00:09:48,640
that

00:09:45,920 --> 00:09:50,640
all the routers have a consistent view

00:09:48,640 --> 00:09:52,640
of the network

00:09:50,640 --> 00:09:54,560
all the routing table entries are

00:09:52,640 --> 00:09:58,480
continuously synchronized among

00:09:54,560 --> 00:10:00,399
all the hosts so that

00:09:58,480 --> 00:10:02,959
in this way virtual machines can talk to

00:10:00,399 --> 00:10:05,279
the pod and vice versa

00:10:02,959 --> 00:10:06,079
uh our example covers connectivity to

00:10:05,279 --> 00:10:09,120
openstack

00:10:06,079 --> 00:10:11,519
but it's not the only cloud computing

00:10:09,120 --> 00:10:14,560
platform supported

00:10:11,519 --> 00:10:17,920
so yeah that's it

00:10:14,560 --> 00:10:18,800
uh that's it when it comes to the theory

00:10:17,920 --> 00:10:21,120
but

00:10:18,800 --> 00:10:22,160
now i'm giving the floor to yarik who

00:10:21,120 --> 00:10:25,279
will show you

00:10:22,160 --> 00:10:28,000
how it works in practice

00:10:25,279 --> 00:10:30,959
okay thanks and welcome back i will now

00:10:28,000 --> 00:10:33,200
show you a short demo of the integration

00:10:30,959 --> 00:10:34,800
between a kubernetes cluster and an

00:10:33,200 --> 00:10:38,160
openstack cluster

00:10:34,800 --> 00:10:41,360
i will connect a pod to

00:10:38,160 --> 00:10:44,079
a network l3 network with

00:10:41,360 --> 00:10:46,240
virtual machines using a network service

00:10:44,079 --> 00:10:48,160
mesh and the tags and fabric

00:10:46,240 --> 00:10:49,360
virtual network controller so let's

00:10:48,160 --> 00:10:52,720
start with

00:10:49,360 --> 00:10:56,079
our environment we have a plain empty

00:10:52,720 --> 00:10:57,600
openstack cluster over here we view it

00:10:56,079 --> 00:11:01,200
using the

00:10:57,600 --> 00:11:05,600
graphical interface horizon and we also

00:11:01,200 --> 00:11:05,600
have a working kubernetes cluster

00:11:06,240 --> 00:11:12,160
with the nsm installation

00:11:09,360 --> 00:11:13,680
already provisioned and we can see the

00:11:12,160 --> 00:11:16,079
network service manager

00:11:13,680 --> 00:11:18,640
and the network service mesh tax and

00:11:16,079 --> 00:11:21,120
fabric forwarder

00:11:18,640 --> 00:11:21,839
already registered over here so we can

00:11:21,120 --> 00:11:26,839
use it

00:11:21,839 --> 00:11:29,040
to service network service meshware

00:11:26,839 --> 00:11:32,240
applications okay

00:11:29,040 --> 00:11:34,240
and we also have the our data plane

00:11:32,240 --> 00:11:36,079
which will be the toxin fabric virtual

00:11:34,240 --> 00:11:39,440
network controller

00:11:36,079 --> 00:11:42,800
and taxon fabric is already

00:11:39,440 --> 00:11:45,200
connected to the openstack cluster as a

00:11:42,800 --> 00:11:46,880
neutron plug-in so it's servicing all

00:11:45,200 --> 00:11:48,959
the interfaces all the network

00:11:46,880 --> 00:11:49,839
interfaces for virtual machines in the

00:11:48,959 --> 00:11:53,519
cluster

00:11:49,839 --> 00:11:54,639
however it's not configured as a cni for

00:11:53,519 --> 00:11:56,959
kubernetes

00:11:54,639 --> 00:11:58,560
and it's just to show you that you don't

00:11:56,959 --> 00:12:01,279
need you you may

00:11:58,560 --> 00:12:01,839
use it as a cni because it it has the

00:12:01,279 --> 00:12:03,760
feature

00:12:01,839 --> 00:12:05,600
but you don't have to use it as a cni so

00:12:03,760 --> 00:12:08,480
you can use a totally different

00:12:05,600 --> 00:12:09,360
cni in your kubernetes blaster and at

00:12:08,480 --> 00:12:12,399
the same time

00:12:09,360 --> 00:12:15,120
use tf as a networking

00:12:12,399 --> 00:12:17,040
back-end as a data plane back-end for

00:12:15,120 --> 00:12:20,639
network service mesh to achieve the

00:12:17,040 --> 00:12:23,600
connectivity for uh for the multi-cloud

00:12:20,639 --> 00:12:24,079
architecture okay so right now we don't

00:12:23,600 --> 00:12:28,560
have

00:12:24,079 --> 00:12:30,800
any any networking configured

00:12:28,560 --> 00:12:32,720
in our environment so let's start with

00:12:30,800 --> 00:12:34,160
creating our infrastructure on the

00:12:32,720 --> 00:12:37,120
openstack side

00:12:34,160 --> 00:12:38,079
and i will create two networks red and

00:12:37,120 --> 00:12:41,120
blue

00:12:38,079 --> 00:12:44,079
to demonstrate the connectivity and to

00:12:41,120 --> 00:12:47,760
show you that we can use

00:12:44,079 --> 00:12:49,920
different we can use different networks

00:12:47,760 --> 00:12:51,279
and choose them using network service

00:12:49,920 --> 00:12:55,320
mesh requests

00:12:51,279 --> 00:12:59,120
so we'll create first red subnet with a

00:12:55,320 --> 00:12:59,120
10.1.1 addresses

00:12:59,440 --> 00:13:13,040
and then a blue network

00:13:07,040 --> 00:13:13,040
with a subnet of 10.2.2.0

00:13:15,519 --> 00:13:20,720
okay and with both networks configured

00:13:18,880 --> 00:13:24,320
we can see that

00:13:20,720 --> 00:13:25,839
tungsten fabric is synchronized with the

00:13:24,320 --> 00:13:29,839
openstack cluster

00:13:25,839 --> 00:13:33,680
and it already shows the networks with

00:13:29,839 --> 00:13:38,639
proper proper configuration

00:13:33,680 --> 00:13:38,639
and let's go ahead and create

00:13:39,360 --> 00:13:46,839
two virtual machines

00:13:42,480 --> 00:13:48,240
in the red network this will be our

00:13:46,839 --> 00:13:51,920
first

00:13:48,240 --> 00:13:53,760
experiment okay we are choosing the red

00:13:51,920 --> 00:13:56,160
network so we want uh

00:13:53,760 --> 00:13:57,360
the virtual machines to be attached to

00:13:56,160 --> 00:14:01,120
the red network

00:13:57,360 --> 00:14:04,320
okay they are running and and

00:14:01,120 --> 00:14:06,800
on the tanks and fabric side we should

00:14:04,320 --> 00:14:06,800
see them

00:14:07,519 --> 00:14:11,760
the interface is attached to the virtual

00:14:09,839 --> 00:14:15,440
router okay here

00:14:11,760 --> 00:14:16,639
and we can see the two interfaces in the

00:14:15,440 --> 00:14:19,839
red network

00:14:16,639 --> 00:14:22,160
1.3 and 1.4

00:14:19,839 --> 00:14:23,279
and just for the sake of this

00:14:22,160 --> 00:14:25,519
presentation

00:14:23,279 --> 00:14:27,519
just and just for the purpose of this

00:14:25,519 --> 00:14:31,440
presentation we will use

00:14:27,519 --> 00:14:32,800
uh the router internal interface to

00:14:31,440 --> 00:14:35,839
connect to them

00:14:32,800 --> 00:14:35,839
so ssh

00:14:38,079 --> 00:14:45,040
okay go cubs go

00:14:42,399 --> 00:14:46,399
and we are in and we can see that we are

00:14:45,040 --> 00:14:50,480
on the

00:14:46,399 --> 00:14:54,880
first virtual machine 1.3 and from here

00:14:50,480 --> 00:14:54,880
we can ssh to

00:14:56,839 --> 00:14:59,839
10.1.1.4

00:15:03,760 --> 00:15:13,120
okay and this is 1.4 virtual machine

00:15:09,040 --> 00:15:15,040
and going back

00:15:13,120 --> 00:15:17,040
there's a two-way connectivity so i did

00:15:15,040 --> 00:15:17,839
it just to check if everything's working

00:15:17,040 --> 00:15:20,959
okay

00:15:17,839 --> 00:15:22,639
and it's obvious that the openstack

00:15:20,959 --> 00:15:25,680
virtual machines in the same network

00:15:22,639 --> 00:15:27,680
can communicate with each other okay so

00:15:25,680 --> 00:15:30,399
now

00:15:27,680 --> 00:15:31,360
it's time for the network service mesh

00:15:30,399 --> 00:15:35,680
pod

00:15:31,360 --> 00:15:39,759
i will use pod manifests

00:15:35,680 --> 00:15:42,880
that are located over here and they are

00:15:39,759 --> 00:15:45,199
adapted from the official

00:15:42,880 --> 00:15:46,000
network service mesh examples and here

00:15:45,199 --> 00:15:51,360
you can see

00:15:46,000 --> 00:15:54,079
uh a pod uh with a busy box container

00:15:51,360 --> 00:15:55,680
inside the deployment with an annotation

00:15:54,079 --> 00:16:00,079
network service mesh

00:15:55,680 --> 00:16:03,680
io and the what's called the

00:16:00,079 --> 00:16:05,040
fully qualified name of the network

00:16:03,680 --> 00:16:07,279
inside the

00:16:05,040 --> 00:16:08,160
tanks and fabric database so we have a

00:16:07,279 --> 00:16:10,639
default domain

00:16:08,160 --> 00:16:12,320
the project name which is admin and then

00:16:10,639 --> 00:16:14,639
the network name

00:16:12,320 --> 00:16:17,040
so let's create this part this

00:16:14,639 --> 00:16:20,839
deployment

00:16:17,040 --> 00:16:23,839
apply red deployment

00:16:20,839 --> 00:16:23,839
okay

00:16:23,920 --> 00:16:27,199
now let's see what's happening inside

00:16:25,839 --> 00:16:30,959
our namespace

00:16:27,199 --> 00:16:34,959
the red part

00:16:30,959 --> 00:16:37,199
is initializing and

00:16:34,959 --> 00:16:39,920
you can see that there is something

00:16:37,199 --> 00:16:42,959
unexpected going over here because

00:16:39,920 --> 00:16:43,759
uh we see that it's running some in it

00:16:42,959 --> 00:16:46,800
containers

00:16:43,759 --> 00:16:49,839
while our original deployment

00:16:46,800 --> 00:16:51,759
has got just only a single main

00:16:49,839 --> 00:16:53,759
container and i will explain this

00:16:51,759 --> 00:16:55,680
in a minute but for now it's already

00:16:53,759 --> 00:16:59,279
running

00:16:55,680 --> 00:16:59,279
so we can see what's inside

00:17:02,839 --> 00:17:05,839
and

00:17:06,480 --> 00:17:11,439
okay and we can see that we have two

00:17:08,480 --> 00:17:15,280
interfaces first one is the default

00:17:11,439 --> 00:17:16,720
uh pod network cluster pod network

00:17:15,280 --> 00:17:19,919
this is the default interface and then

00:17:16,720 --> 00:17:22,640
we have um interface with a random name

00:17:19,919 --> 00:17:25,120
which is a member of the red network and

00:17:22,640 --> 00:17:25,120
we can

00:17:25,600 --> 00:17:31,520
see if we are able to connect to the

00:17:29,039 --> 00:17:34,720
virtual machines in openstack and yes

00:17:31,520 --> 00:17:37,840
both three and four are reachable

00:17:34,720 --> 00:17:39,679
from our pod so

00:17:37,840 --> 00:17:41,200
the tanks and fabric forwarder

00:17:39,679 --> 00:17:44,559
successfully

00:17:41,200 --> 00:17:47,520
uh bridged us to the uh onto the red

00:17:44,559 --> 00:17:49,520
network on openstack

00:17:47,520 --> 00:17:53,200
okay and now let's explain how it all

00:17:49,520 --> 00:17:53,200
happened as you can see here

00:17:53,679 --> 00:18:00,000
we have a network service mesh

00:17:56,720 --> 00:18:03,440
admission webhook pod

00:18:00,000 --> 00:18:05,760
over here and it's uh and it's a piece

00:18:03,440 --> 00:18:09,200
of an sam that is listening

00:18:05,760 --> 00:18:09,840
to all the objects that are onboarded

00:18:09,200 --> 00:18:12,320
into

00:18:09,840 --> 00:18:14,320
the namespace and if it detects a

00:18:12,320 --> 00:18:17,600
network service mesh annotation

00:18:14,320 --> 00:18:20,270
it will modify the pod

00:18:17,600 --> 00:18:21,360
the manifest and it will add

00:18:20,270 --> 00:18:24,160
[Music]

00:18:21,360 --> 00:18:26,240
sidecar containers that will configure

00:18:24,160 --> 00:18:27,360
the appropriate interface and it will

00:18:26,240 --> 00:18:30,559
they will handle

00:18:27,360 --> 00:18:33,880
a communication with the nsm api

00:18:30,559 --> 00:18:38,400
so let's see how the modified

00:18:33,880 --> 00:18:43,840
specification of the of the red part

00:18:38,400 --> 00:18:43,840
looks like

00:18:47,120 --> 00:18:51,919
okay so we have the the container the

00:18:50,880 --> 00:18:54,720
base container

00:18:51,919 --> 00:18:55,600
that we we've seen inside the original

00:18:54,720 --> 00:18:59,039
manifest

00:18:55,600 --> 00:19:00,480
and then we have additional nsm monitor

00:18:59,039 --> 00:19:02,960
container

00:19:00,480 --> 00:19:03,679
and then the important part in it

00:19:02,960 --> 00:19:06,880
containers

00:19:03,679 --> 00:19:07,840
dns in it container and the nsm init

00:19:06,880 --> 00:19:10,880
container and the

00:19:07,840 --> 00:19:13,840
nsm in it is responsible for

00:19:10,880 --> 00:19:14,799
talking to the network service mesh api

00:19:13,840 --> 00:19:18,160
and creating

00:19:14,799 --> 00:19:20,400
the interface according to this uh

00:19:18,160 --> 00:19:21,600
network service request and in our case

00:19:20,400 --> 00:19:23,840
the network service

00:19:21,600 --> 00:19:24,880
is the network itself so we are

00:19:23,840 --> 00:19:27,919
requesting

00:19:24,880 --> 00:19:30,160
connectivity and we are requesting to be

00:19:27,919 --> 00:19:31,919
joined to this particular tungsten

00:19:30,160 --> 00:19:35,280
fabric network

00:19:31,919 --> 00:19:38,240
uh okay so

00:19:35,280 --> 00:19:40,400
you can see that there is a pretty nice

00:19:38,240 --> 00:19:44,559
separation of concerns

00:19:40,400 --> 00:19:47,120
in the application manifest

00:19:44,559 --> 00:19:48,880
the the application is just this part

00:19:47,120 --> 00:19:51,520
like it's a regular

00:19:48,880 --> 00:19:52,160
application that is totally unaware of

00:19:51,520 --> 00:19:55,760
any

00:19:52,160 --> 00:19:57,200
nsm machinery right and while using the

00:19:55,760 --> 00:19:59,520
deployment

00:19:57,200 --> 00:20:00,240
while creating the deployment we are

00:19:59,520 --> 00:20:02,640
adding

00:20:00,240 --> 00:20:04,080
a network service mesh annotation that

00:20:02,640 --> 00:20:07,039
tells

00:20:04,080 --> 00:20:08,320
the orchestrator to connect us to some

00:20:07,039 --> 00:20:11,280
specific

00:20:08,320 --> 00:20:12,400
network so we have we have nice layer

00:20:11,280 --> 00:20:15,039
nice layers

00:20:12,400 --> 00:20:15,679
so we have the application running on a

00:20:15,039 --> 00:20:19,120
cluster

00:20:15,679 --> 00:20:22,559
that is equipped with nsm and by

00:20:19,120 --> 00:20:25,679
modifying metadata of the application

00:20:22,559 --> 00:20:26,559
we are making it a part of some network

00:20:25,679 --> 00:20:28,159
environments

00:20:26,559 --> 00:20:31,039
so i think that this is a really nice

00:20:28,159 --> 00:20:34,799
way a really nice cloud-native way

00:20:31,039 --> 00:20:37,360
of specifying which

00:20:34,799 --> 00:20:37,840
network connectivity our applications

00:20:37,360 --> 00:20:41,520
should

00:20:37,840 --> 00:20:45,039
receive on the target deployment

00:20:41,520 --> 00:20:46,000
okay and to see that uh the tanks and

00:20:45,039 --> 00:20:49,679
fabric forwarder

00:20:46,000 --> 00:20:52,799
is flexible i will now create

00:20:49,679 --> 00:20:56,960
a second third instance

00:20:52,799 --> 00:21:00,000
in the blue network a blue demo network

00:20:56,960 --> 00:21:03,840
with the same configuration except for

00:21:00,000 --> 00:21:03,840
the network

00:21:05,039 --> 00:21:10,400
it's creating let's wait for it

00:21:12,880 --> 00:21:17,840
and the tax on fabric interface we can

00:21:15,120 --> 00:21:17,840
see

00:21:18,720 --> 00:21:22,640
okay and create

00:21:26,559 --> 00:21:31,840
the blue part

00:21:32,480 --> 00:21:36,159
okay this is going through the same

00:21:35,360 --> 00:21:39,440
sequence

00:21:36,159 --> 00:21:39,440
that the red part

00:21:41,280 --> 00:21:45,840
okay it's finished and

00:21:48,960 --> 00:21:51,919
let's go inside

00:21:54,080 --> 00:21:59,280
and see that we have 10.2.2.4

00:21:57,679 --> 00:22:01,679
interface so we are inside the blue

00:21:59,280 --> 00:22:04,880
network and we can

00:22:01,679 --> 00:22:06,240
in the same way see the interface in a

00:22:04,880 --> 00:22:09,360
blue network on the

00:22:06,240 --> 00:22:09,360
tanks and fabric site

00:22:09,760 --> 00:22:15,679
okay so this is it for this part we

00:22:12,720 --> 00:22:18,240
created the taxon fabric for warder

00:22:15,679 --> 00:22:20,080
as a poc so it has the basic

00:22:18,240 --> 00:22:22,720
functionality of

00:22:20,080 --> 00:22:23,360
creating interfaces and hooking them up

00:22:22,720 --> 00:22:26,799
to the v

00:22:23,360 --> 00:22:27,520
router and there's much more to do but i

00:22:26,799 --> 00:22:30,640
think that

00:22:27,520 --> 00:22:35,280
uh it's a nice way to first

00:22:30,640 --> 00:22:37,679
show you how the uh how the tyson fabric

00:22:35,280 --> 00:22:38,640
is a nice fit to the network service

00:22:37,679 --> 00:22:41,039
mesh and its

00:22:38,640 --> 00:22:42,080
philosophy of cloud native network

00:22:41,039 --> 00:22:45,039
connectivity

00:22:42,080 --> 00:22:47,120
and one of the one of the nice appealing

00:22:45,039 --> 00:22:47,600
features of tanks and fabric is also

00:22:47,120 --> 00:22:51,760
that it

00:22:47,600 --> 00:22:54,080
is able to connect

00:22:51,760 --> 00:22:55,520
different workloads into service chains

00:22:54,080 --> 00:22:57,760
so for example

00:22:55,520 --> 00:22:59,840
uh cloud native network functions

00:22:57,760 --> 00:23:03,520
running spots and kubernetes

00:22:59,840 --> 00:23:06,840
with virtual network functions running

00:23:03,520 --> 00:23:09,600
as instances on openstack for example

00:23:06,840 --> 00:23:10,880
and physical network functions and

00:23:09,600 --> 00:23:16,159
physical appliances

00:23:10,880 --> 00:23:19,600
because it is able to bridge them to

00:23:16,159 --> 00:23:22,640
overlay networks with switches that are

00:23:19,600 --> 00:23:24,480
vxlan capable and the second part is

00:23:22,640 --> 00:23:27,520
that

00:23:24,480 --> 00:23:30,640
our source code may

00:23:27,520 --> 00:23:34,000
serve as a as an example

00:23:30,640 --> 00:23:36,880
for for other forwarders and for other

00:23:34,000 --> 00:23:39,039
people that want to customize the

00:23:36,880 --> 00:23:41,440
network service mesh and add their own

00:23:39,039 --> 00:23:42,400
functionality or at their own data plane

00:23:41,440 --> 00:23:45,440
support

00:23:42,400 --> 00:23:47,840
so you can go ahead and see

00:23:45,440 --> 00:23:49,120
the code in our repo and i also would

00:23:47,840 --> 00:23:52,400
like to

00:23:49,120 --> 00:23:55,520
mention that this idea was inspired

00:23:52,400 --> 00:23:57,679
by radoslav's talk

00:23:55,520 --> 00:23:59,039
as the open networking summit europe

00:23:57,679 --> 00:24:02,640
last year when

00:23:59,039 --> 00:24:03,200
he talked about his kernel forwarder

00:24:02,640 --> 00:24:06,880
which

00:24:03,200 --> 00:24:09,039
was also meant as a similar thing to

00:24:06,880 --> 00:24:09,760
inspire other people to write their own

00:24:09,039 --> 00:24:12,159
plugins

00:24:09,760 --> 00:24:12,799
for the network service mesh okay i hope

00:24:12,159 --> 00:24:16,559
that you

00:24:12,799 --> 00:24:22,880
liked our idea and our talk and it's now

00:24:16,559 --> 00:24:22,880

YouTube URL: https://www.youtube.com/watch?v=zzDAAMC7214


