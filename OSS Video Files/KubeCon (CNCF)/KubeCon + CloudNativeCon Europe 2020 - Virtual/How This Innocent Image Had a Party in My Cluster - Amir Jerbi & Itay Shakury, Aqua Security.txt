Title: How This Innocent Image Had a Party in My Cluster - Amir Jerbi & Itay Shakury, Aqua Security
Publication date: 2020-08-28
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

How This Innocent Image Had a Party in My Cluster - Amir Jerbi & Itay Shakury, Aqua Security 

As security practices and tools for scanning container images are becoming increasingly popular, malicious actors are introducing sophisticated techniques to obfuscate their intent and evade scanning tools. The malware they plant cannot be detected using static analysis, or based on signatures. But dynamic analysis that runs the image, and then traces the activity of the running container can detect and document the entire multi-stage attack.  In this talk, we will review the evolution of these attacks as observed by Aqua’s security research team, and demonstrate the full chain of events and IoCs (indicators if compromise) that were detected. We will give practical advice on what developers and cluster admins should do to detect similar techniques, and the security controls the should be employed to reduce the chances of such an attack succeeding, as well as reduce its potential impact.

https://sched.co/Zeks
Captions: 
	00:00:00,000 --> 00:00:03,919
hello everyone my name is vitashokuri

00:00:02,320 --> 00:00:06,240
i'm with the open source team in aqua

00:00:03,919 --> 00:00:08,880
security

00:00:06,240 --> 00:00:11,200
hi and my name is amir jelby i'm the cto

00:00:08,880 --> 00:00:12,880
and co-founder of aqua security

00:00:11,200 --> 00:00:15,120
and today's session we are going to talk

00:00:12,880 --> 00:00:15,440
about the party that we've identified in

00:00:15,120 --> 00:00:18,560
a

00:00:15,440 --> 00:00:20,640
one of our clusters and how we

00:00:18,560 --> 00:00:22,160
could have stopped that party by

00:00:20,640 --> 00:00:25,279
applying some of the

00:00:22,160 --> 00:00:27,680
security controls of kubernetes

00:00:25,279 --> 00:00:30,640
the focus of this talk is going to be

00:00:27,680 --> 00:00:34,000
scanning of your container images

00:00:30,640 --> 00:00:36,000
so let's start so today when

00:00:34,000 --> 00:00:37,360
when we are talking about scanning of

00:00:36,000 --> 00:00:39,200
your container images

00:00:37,360 --> 00:00:41,040
we are basically looking for three

00:00:39,200 --> 00:00:42,559
things we are looking for

00:00:41,040 --> 00:00:45,280
vulnerabilities

00:00:42,559 --> 00:00:47,840
for malware and for misconfiguration

00:00:45,280 --> 00:00:49,920
inside of the container images

00:00:47,840 --> 00:00:51,199
so what does it mean let's give you a

00:00:49,920 --> 00:00:55,520
small background of that

00:00:51,199 --> 00:00:57,680
so vulnerabilities mean bad code

00:00:55,520 --> 00:00:58,719
usually it's components that are

00:00:57,680 --> 00:01:01,520
outdated all

00:00:58,719 --> 00:01:03,199
components that are known to be

00:01:01,520 --> 00:01:06,240
vulnerable basically they have

00:01:03,199 --> 00:01:08,159
code that an attacker can leverage and

00:01:06,240 --> 00:01:10,320
exploit in order to get access to the

00:01:08,159 --> 00:01:11,920
system or to collect data

00:01:10,320 --> 00:01:14,640
there is a database of vulnerabilities

00:01:11,920 --> 00:01:17,920
called nvd each vulnerability has

00:01:14,640 --> 00:01:20,479
a unique identifier a description

00:01:17,920 --> 00:01:22,799
a severity between load to critical and

00:01:20,479 --> 00:01:24,640
it also has the affected component

00:01:22,799 --> 00:01:27,119
what is the component and the version

00:01:24,640 --> 00:01:28,400
that has those vulnerabilities

00:01:27,119 --> 00:01:30,079
and in the market today we use

00:01:28,400 --> 00:01:31,920
vulnerability scanners in order to

00:01:30,079 --> 00:01:33,520
identify those vulnerabilities in

00:01:31,920 --> 00:01:35,439
container images

00:01:33,520 --> 00:01:37,680
so there are open source vulnerabilities

00:01:35,439 --> 00:01:40,000
like 3v there are also commercial

00:01:37,680 --> 00:01:41,280
options for vulnerability scanners and

00:01:40,000 --> 00:01:42,960
what's in common for

00:01:41,280 --> 00:01:44,880
all of them is that they will take your

00:01:42,960 --> 00:01:46,640
container image open it up

00:01:44,880 --> 00:01:48,240
look for all of the files inside of it

00:01:46,640 --> 00:01:49,600
all of the operating system

00:01:48,240 --> 00:01:51,680
all of the programming languages

00:01:49,600 --> 00:01:52,320
packages and basically match them

00:01:51,680 --> 00:01:55,280
against

00:01:52,320 --> 00:01:56,399
the mvp database or in some cases other

00:01:55,280 --> 00:01:58,799
flat intelligence

00:01:56,399 --> 00:02:00,640
database of vulnerabilities and the

00:01:58,799 --> 00:02:02,799
result will be the list of components

00:02:00,640 --> 00:02:05,520
that are vulnerable

00:02:02,799 --> 00:02:07,360
each component will usually have the

00:02:05,520 --> 00:02:10,399
name of the vulnerability and

00:02:07,360 --> 00:02:12,000
how to fix the vulnerability basically

00:02:10,399 --> 00:02:13,920
it will have the instruction about you

00:02:12,000 --> 00:02:15,760
need to fix by applying a patch

00:02:13,920 --> 00:02:18,160
upgrading your component to a newer

00:02:15,760 --> 00:02:21,440
version

00:02:18,160 --> 00:02:23,520
the second thing that we are scanning

00:02:21,440 --> 00:02:24,720
today for container images is mis

00:02:23,520 --> 00:02:26,400
configurations

00:02:24,720 --> 00:02:28,000
so that there are scanners today in the

00:02:26,400 --> 00:02:29,840
market that can find whether your

00:02:28,000 --> 00:02:33,280
container image has hard-coded

00:02:29,840 --> 00:02:35,040
ssh keys weak ciphers of tls

00:02:33,280 --> 00:02:36,400
in some cases you don't have any

00:02:35,040 --> 00:02:38,640
configuration of tls

00:02:36,400 --> 00:02:39,760
setup in your container image hardcoded

00:02:38,640 --> 00:02:42,720
passwords

00:02:39,760 --> 00:02:44,879
um those bad configurations the outcome

00:02:42,720 --> 00:02:47,440
of them will be that if you are running

00:02:44,879 --> 00:02:47,440
this container

00:02:49,440 --> 00:02:53,280
the image will be calling a tackle so an

00:02:52,480 --> 00:02:54,800
attacker can

00:02:53,280 --> 00:02:56,879
leverage the fact that you don't have

00:02:54,800 --> 00:02:58,400
ssl setup to steal data from your

00:02:56,879 --> 00:02:59,840
organization or the fact that you have

00:02:58,400 --> 00:03:02,080
hardcoded secrets

00:02:59,840 --> 00:03:04,080
in order to steal those secrets and and

00:03:02,080 --> 00:03:07,920
leverage them to connect to your

00:03:04,080 --> 00:03:08,879
infrastructure and the last item that we

00:03:07,920 --> 00:03:11,360
are scanning is

00:03:08,879 --> 00:03:13,360
malware basically malware scanning means

00:03:11,360 --> 00:03:15,040
that we are taking the container image

00:03:13,360 --> 00:03:16,159
we are looking at all of the files

00:03:15,040 --> 00:03:19,040
inside of it

00:03:16,159 --> 00:03:20,159
we are taking the the files and and

00:03:19,040 --> 00:03:22,159
creating a sha

00:03:20,159 --> 00:03:24,879
signature out of them and then comparing

00:03:22,159 --> 00:03:26,720
this sha against the database of malware

00:03:24,879 --> 00:03:29,760
in the screenshot you you can see a very

00:03:26,720 --> 00:03:32,159
popular database called virustotal

00:03:29,760 --> 00:03:34,080
basically you provide a shar value of a

00:03:32,159 --> 00:03:36,080
file and as a result you get all of the

00:03:34,080 --> 00:03:36,480
malwares that are that were found for

00:03:36,080 --> 00:03:39,840
this

00:03:36,480 --> 00:03:42,159
sha value so the question is

00:03:39,840 --> 00:03:43,760
if i have a scanning for vulnerabilities

00:03:42,159 --> 00:03:45,599
scanning for misconfiguration and

00:03:43,760 --> 00:03:50,080
scanning for malware

00:03:45,599 --> 00:03:53,120
am i protected and the answer is

00:03:50,080 --> 00:03:54,879
no there is still a blind spot

00:03:53,120 --> 00:03:57,200
there is something called evasive

00:03:54,879 --> 00:03:59,280
malware evasive malware

00:03:57,200 --> 00:04:00,319
are the malwares that are basically

00:03:59,280 --> 00:04:02,159
hiding right

00:04:00,319 --> 00:04:03,519
there they are inside of your container

00:04:02,159 --> 00:04:06,799
image and they are

00:04:03,519 --> 00:04:08,239
hiding using either encryption or in

00:04:06,799 --> 00:04:11,840
some cases they are

00:04:08,239 --> 00:04:14,000
using um techniques like tar files

00:04:11,840 --> 00:04:15,599
seven layers of style files right so

00:04:14,000 --> 00:04:16,239
they are hiding inside of your container

00:04:15,599 --> 00:04:18,639
image

00:04:16,239 --> 00:04:21,040
and what they are doing they are waiting

00:04:18,639 --> 00:04:23,120
for you to execute the container image

00:04:21,040 --> 00:04:25,680
in order for them to

00:04:23,120 --> 00:04:26,479
basically run the malware and decompress

00:04:25,680 --> 00:04:29,840
themselves

00:04:26,479 --> 00:04:32,639
and start attacking your organization

00:04:29,840 --> 00:04:34,479
and the technique for adding an evasive

00:04:32,639 --> 00:04:35,360
malware into your container image is

00:04:34,479 --> 00:04:37,759
something called

00:04:35,360 --> 00:04:39,120
a supply chain attack so what does it

00:04:37,759 --> 00:04:41,199
mean it means that

00:04:39,120 --> 00:04:42,479
you as a developer you are building a

00:04:41,199 --> 00:04:43,919
container image

00:04:42,479 --> 00:04:45,759
you are leveraging open source

00:04:43,919 --> 00:04:48,639
components you are leveraging

00:04:45,759 --> 00:04:50,400
public container images and inside of

00:04:48,639 --> 00:04:52,080
those open source components there might

00:04:50,400 --> 00:04:55,040
be an evasive malware

00:04:52,080 --> 00:04:56,800
meaning an attacker got control on a

00:04:55,040 --> 00:04:59,680
gita project was able to

00:04:56,800 --> 00:05:00,479
contribute code to the github project

00:04:59,680 --> 00:05:02,560
and

00:05:00,479 --> 00:05:04,240
basically this code is the manual it's a

00:05:02,560 --> 00:05:05,199
malware that is hiding inside of the

00:05:04,240 --> 00:05:08,800
component

00:05:05,199 --> 00:05:10,560
and the same goes for a container image

00:05:08,800 --> 00:05:12,479
in a public registry that you might be

00:05:10,560 --> 00:05:13,680
downloading and using and inside of this

00:05:12,479 --> 00:05:17,039
container image

00:05:13,680 --> 00:05:17,039
there is an invasive malware

00:05:17,280 --> 00:05:20,880
what we have seen in the in the wild we

00:05:19,199 --> 00:05:22,560
actually have seen cases

00:05:20,880 --> 00:05:25,280
and this is a good example you can see a

00:05:22,560 --> 00:05:27,120
screenshot of it where

00:05:25,280 --> 00:05:29,120
images that do not have any

00:05:27,120 --> 00:05:31,120
vulnerability when you scan them you do

00:05:29,120 --> 00:05:32,000
not see any malware basically those

00:05:31,120 --> 00:05:34,639
images have

00:05:32,000 --> 00:05:36,639
evasive malware and as an example we

00:05:34,639 --> 00:05:38,880
have honeypots in the internet

00:05:36,639 --> 00:05:40,000
and in those honeypots we have weak

00:05:38,880 --> 00:05:42,800
configurations of

00:05:40,000 --> 00:05:44,880
ma of kubernetes and docker and what we

00:05:42,800 --> 00:05:47,520
have seen we've seen attackers

00:05:44,880 --> 00:05:49,759
trying to attack us by running

00:05:47,520 --> 00:05:51,440
legitimate container images

00:05:49,759 --> 00:05:53,280
they pass all of the scanning everything

00:05:51,440 --> 00:05:55,919
was okay with them but as you are

00:05:53,280 --> 00:05:57,759
running those container images basically

00:05:55,919 --> 00:06:00,800
they will download

00:05:57,759 --> 00:06:03,680
a malware from the internet this malware

00:06:00,800 --> 00:06:04,080
will then start searching for ssh keys

00:06:03,680 --> 00:06:06,800
and

00:06:04,080 --> 00:06:07,759
other encrypt other tokens inside of the

00:06:06,800 --> 00:06:09,280
container image

00:06:07,759 --> 00:06:11,680
and they will try to connect to other

00:06:09,280 --> 00:06:13,199
infrastructure components

00:06:11,680 --> 00:06:16,319
in your environment in order to do

00:06:13,199 --> 00:06:18,240
lateral movement and to steal data

00:06:16,319 --> 00:06:20,080
and this is the party that we've seen

00:06:18,240 --> 00:06:22,240
basically an innocent

00:06:20,080 --> 00:06:24,639
ma innocent container image running

00:06:22,240 --> 00:06:26,960
inside of our infrastructure

00:06:24,639 --> 00:06:29,759
using of course evasive malware and then

00:06:26,960 --> 00:06:32,800
taking control on the entire environment

00:06:29,759 --> 00:06:34,479
and i will now move it to itai in order

00:06:32,800 --> 00:06:36,639
to talk about how can you protect

00:06:34,479 --> 00:06:38,880
against it

00:06:36,639 --> 00:06:40,400
thanks amir uh thank you for

00:06:38,880 --> 00:06:43,280
establishing the fact that uh

00:06:40,400 --> 00:06:44,080
image scanning is important however it's

00:06:43,280 --> 00:06:45,919
not

00:06:44,080 --> 00:06:47,759
uh comprehensive enough there are some

00:06:45,919 --> 00:06:50,560
blind spots as you pointed

00:06:47,759 --> 00:06:52,160
pointed them out and it's probably

00:06:50,560 --> 00:06:55,759
because we were looking

00:06:52,160 --> 00:06:56,639
at the container images in hoping to

00:06:55,759 --> 00:06:58,880
understand

00:06:56,639 --> 00:07:01,120
what the containers would do in runtime

00:06:58,880 --> 00:07:02,960
now there is a correlation of course

00:07:01,120 --> 00:07:05,120
but we know that once we start the

00:07:02,960 --> 00:07:06,880
container from the image

00:07:05,120 --> 00:07:08,400
it has a life of its own it is free to

00:07:06,880 --> 00:07:10,639
do whatever it wants

00:07:08,400 --> 00:07:11,759
and we cannot predict what's going to

00:07:10,639 --> 00:07:15,759
happen

00:07:11,759 --> 00:07:18,960
at runtime just by analyzing the image

00:07:15,759 --> 00:07:21,599
so the logical conclusion is that

00:07:18,960 --> 00:07:23,120
we need to look at the containers at

00:07:21,599 --> 00:07:26,560
runtime in addition to

00:07:23,120 --> 00:07:27,440
scanning those images which brings us to

00:07:26,560 --> 00:07:30,479
discuss

00:07:27,440 --> 00:07:34,240
runtime security runtime security

00:07:30,479 --> 00:07:38,080
is nothing new it's about monitoring

00:07:34,240 --> 00:07:42,000
the containers in production collecting

00:07:38,080 --> 00:07:45,440
as much as for information as we can

00:07:42,000 --> 00:07:46,400
looking for suspicious patterns or

00:07:45,440 --> 00:07:49,599
anomalies

00:07:46,400 --> 00:07:52,080
or interesting behavior and then

00:07:49,599 --> 00:07:53,199
applying some policies that will allow

00:07:52,080 --> 00:07:56,639
us to block

00:07:53,199 --> 00:07:58,080
this kind of behavior there are a lot of

00:07:56,639 --> 00:08:00,560
solutions for that in the market

00:07:58,080 --> 00:08:02,639
mature and effective solutions aqua

00:08:00,560 --> 00:08:04,240
security the company that we are from

00:08:02,639 --> 00:08:05,840
is one of the leaders in this space but

00:08:04,240 --> 00:08:08,879
this is not what this

00:08:05,840 --> 00:08:11,440
talk is about when it comes to

00:08:08,879 --> 00:08:12,319
malware assessment specifically won't

00:08:11,440 --> 00:08:14,080
you agree

00:08:12,319 --> 00:08:17,039
that it's better to make the assessment

00:08:14,080 --> 00:08:19,280
before we reach the production

00:08:17,039 --> 00:08:21,599
i mean if we already know what to look

00:08:19,280 --> 00:08:24,160
for if we already know

00:08:21,599 --> 00:08:27,199
what the patterns are looking like what

00:08:24,160 --> 00:08:30,319
the behavior is like we could be

00:08:27,199 --> 00:08:33,360
making this assessment before production

00:08:30,319 --> 00:08:37,200
in other words what i'm saying is

00:08:33,360 --> 00:08:40,080
let's shift left the runtime security

00:08:37,200 --> 00:08:41,279
from the production into earlier stages

00:08:40,080 --> 00:08:43,919
such as the

00:08:41,279 --> 00:08:45,040
build and test phases of the containers

00:08:43,919 --> 00:08:48,000
so now we will need

00:08:45,040 --> 00:08:50,240
to actually run the containers as part

00:08:48,000 --> 00:08:52,800
of the pipeline that leads to production

00:08:50,240 --> 00:08:53,360
we need some kind of sandbox some kind

00:08:52,800 --> 00:08:55,360
of an

00:08:53,360 --> 00:08:57,760
isolated environment where we can run

00:08:55,360 --> 00:09:01,600
this uh maybe malicious

00:08:57,760 --> 00:09:03,440
containers and container technology is

00:09:01,600 --> 00:09:04,080
not enough i mean container technology

00:09:03,440 --> 00:09:06,880
is

00:09:04,080 --> 00:09:08,080
providing some kind of logical isolation

00:09:06,880 --> 00:09:10,080
but this is not

00:09:08,080 --> 00:09:12,160
suitable for malware assessment we need

00:09:10,080 --> 00:09:14,880
something better than that

00:09:12,160 --> 00:09:16,720
we are using um virtual machines in the

00:09:14,880 --> 00:09:18,720
cloud for that we built some automation

00:09:16,720 --> 00:09:19,920
around it to make it more practical for

00:09:18,720 --> 00:09:22,320
us

00:09:19,920 --> 00:09:23,519
so we are spinning these sandboxes as

00:09:22,320 --> 00:09:25,120
virtual machines

00:09:23,519 --> 00:09:27,839
in the cloud and then we are running

00:09:25,120 --> 00:09:30,800
those containers inside of them

00:09:27,839 --> 00:09:32,240
and then we need a set of eyes in the

00:09:30,800 --> 00:09:34,560
sandbox that tells us

00:09:32,240 --> 00:09:35,600
what's happening there we need something

00:09:34,560 --> 00:09:39,040
to observe

00:09:35,600 --> 00:09:42,480
how the container is behaving

00:09:39,040 --> 00:09:44,320
and this is not your ordinary

00:09:42,480 --> 00:09:46,000
debugging troubleshooting tool that you

00:09:44,320 --> 00:09:47,839
may have used from

00:09:46,000 --> 00:09:50,000
other contexts because now it needs to

00:09:47,839 --> 00:09:53,920
be able to handle malware

00:09:50,000 --> 00:09:56,560
and malware may be evasive maybe tricky

00:09:53,920 --> 00:09:57,519
amir gave a few examples for how it can

00:09:56,560 --> 00:10:00,800
be

00:09:57,519 --> 00:10:04,079
evasive so we need something that is

00:10:00,800 --> 00:10:07,120
very robust and very comprehensive and

00:10:04,079 --> 00:10:09,680
luckily for us we have just the perfect

00:10:07,120 --> 00:10:11,440
technology to build something like that

00:10:09,680 --> 00:10:14,720
on which is evpf

00:10:11,440 --> 00:10:15,680
in linux this is not a talk about edpf

00:10:14,720 --> 00:10:18,160
we've actually done

00:10:15,680 --> 00:10:19,519
other talks about ebpf which you are

00:10:18,160 --> 00:10:22,399
welcome to check out

00:10:19,519 --> 00:10:25,200
but i just want to emphasize in this

00:10:22,399 --> 00:10:28,079
context that edtf is what allows us

00:10:25,200 --> 00:10:30,560
to plug into the kernel and the kernel

00:10:28,079 --> 00:10:32,880
is exactly where we want to be

00:10:30,560 --> 00:10:34,079
in order to handle this tricky and

00:10:32,880 --> 00:10:36,160
evasive

00:10:34,079 --> 00:10:37,200
malware because the malware is running

00:10:36,160 --> 00:10:40,560
in a container

00:10:37,200 --> 00:10:42,240
in user space on top of the container

00:10:40,560 --> 00:10:43,920
runtime on top of the operating system

00:10:42,240 --> 00:10:47,040
api and so on

00:10:43,920 --> 00:10:49,519
eventually it will make some call

00:10:47,040 --> 00:10:50,560
into the kernel this is how operating

00:10:49,519 --> 00:10:53,519
systems work

00:10:50,560 --> 00:10:55,279
and we will be down there waiting for

00:10:53,519 --> 00:10:57,839
this to happen and collect this

00:10:55,279 --> 00:10:59,600
information and ebpf is just what gives

00:10:57,839 --> 00:11:01,839
us the opportunity

00:10:59,600 --> 00:11:03,600
to instrument these critical parts of

00:11:01,839 --> 00:11:05,839
the kernel

00:11:03,600 --> 00:11:07,360
and extract the information that we need

00:11:05,839 --> 00:11:10,880
in order to make

00:11:07,360 --> 00:11:12,480
this the assessment so we've built some

00:11:10,880 --> 00:11:15,120
tooling around that

00:11:12,480 --> 00:11:16,240
we've made an open source project in

00:11:15,120 --> 00:11:19,839
github it's called

00:11:16,240 --> 00:11:22,640
tracy it's uh tracy is a cli tool

00:11:19,839 --> 00:11:24,079
that uses ebpf technology and it's

00:11:22,640 --> 00:11:28,079
particularly useful

00:11:24,079 --> 00:11:31,200
in the context of assessing containers

00:11:28,079 --> 00:11:32,800
and maybe malware inside of the sandbox

00:11:31,200 --> 00:11:35,120
and this is what we are using as well

00:11:32,800 --> 00:11:37,920
and this is what i will be using now

00:11:35,120 --> 00:11:40,959
for the demo so actually let's switch

00:11:37,920 --> 00:11:40,959
gears into the demo

00:11:41,519 --> 00:11:44,720
all right so what i want to do for the

00:11:43,360 --> 00:11:47,040
demo is

00:11:44,720 --> 00:11:49,279
work you through a few examples for

00:11:47,040 --> 00:11:51,200
patterns that we've seen in malware

00:11:49,279 --> 00:11:53,120
and especially i want to show you how it

00:11:51,200 --> 00:11:54,320
looks like from the operating system

00:11:53,120 --> 00:11:56,560
point of view

00:11:54,320 --> 00:11:57,360
and also how you can use tracy in order

00:11:56,560 --> 00:12:01,600
to detect

00:11:57,360 --> 00:12:03,200
those patterns so the first

00:12:01,600 --> 00:12:04,720
behavior that i want to demonstrate is

00:12:03,200 --> 00:12:08,240
something that amir has discussed

00:12:04,720 --> 00:12:11,040
this is a malware that is downloading

00:12:08,240 --> 00:12:13,440
an executable from the internet and then

00:12:11,040 --> 00:12:14,320
executing it so if you scanned the image

00:12:13,440 --> 00:12:16,639
you will find

00:12:14,320 --> 00:12:18,720
nothing using static scanning but if you

00:12:16,639 --> 00:12:21,680
run the image it's very easy to see

00:12:18,720 --> 00:12:24,240
that it's downloaded with something so

00:12:21,680 --> 00:12:27,760
what i'm doing here i'm using wget

00:12:24,240 --> 00:12:28,639
which is a utility that is almost on any

00:12:27,760 --> 00:12:32,240
linux

00:12:28,639 --> 00:12:35,600
and i am setting the output into a local

00:12:32,240 --> 00:12:37,920
file called drop and i have

00:12:35,600 --> 00:12:39,279
a file here that i've prepared this is

00:12:37,920 --> 00:12:44,079
just

00:12:39,279 --> 00:12:47,200
a very simple hello world executable

00:12:44,079 --> 00:12:50,240
and after i download it i need to make

00:12:47,200 --> 00:12:50,240
it an executable

00:12:50,959 --> 00:12:58,880
and then i can actually execute

00:12:54,720 --> 00:13:02,800
in the background i will start tracing

00:12:58,880 --> 00:13:06,320
with the following flags so

00:13:02,800 --> 00:13:08,000
i'm telling tracy to trace the exact ve

00:13:06,320 --> 00:13:10,480
system core

00:13:08,000 --> 00:13:11,519
which is what used to start new

00:13:10,480 --> 00:13:13,120
executables

00:13:11,519 --> 00:13:14,959
the socket and connect system calls

00:13:13,120 --> 00:13:16,639
which are used to communicate with

00:13:14,959 --> 00:13:20,000
remote endpoints

00:13:16,639 --> 00:13:22,480
the vfs write function which is um

00:13:20,000 --> 00:13:24,320
instrumenting writes into files so

00:13:22,480 --> 00:13:28,160
basically these three

00:13:24,320 --> 00:13:30,720
events uh tells us that there was a file

00:13:28,160 --> 00:13:34,000
download if we take a close look there

00:13:30,720 --> 00:13:37,200
and finally the file change mode at

00:13:34,000 --> 00:13:39,279
system call which is used by uh geomod

00:13:37,200 --> 00:13:42,480
binary in order to make the permission

00:13:39,279 --> 00:13:45,440
change and i'm going to

00:13:42,480 --> 00:13:45,920
also filter the output from tracy

00:13:45,440 --> 00:13:48,639
because

00:13:45,920 --> 00:13:50,639
it's going to be a little bit noisy for

00:13:48,639 --> 00:13:52,480
only things that originate from this

00:13:50,639 --> 00:13:54,560
shell here because

00:13:52,480 --> 00:13:56,959
i want it to be more readable so let's

00:13:54,560 --> 00:14:00,399
check for a second

00:13:56,959 --> 00:14:02,079
the process id here and this process id

00:14:00,399 --> 00:14:02,880
is included in the output of traces so

00:14:02,079 --> 00:14:06,480
we can just

00:14:02,880 --> 00:14:10,880
filter for it right

00:14:06,480 --> 00:14:10,880
so i am starting tracy

00:14:11,040 --> 00:14:17,839
and then i will initiate this

00:14:14,560 --> 00:14:17,839
sequence of commands

00:14:18,320 --> 00:14:22,959
which will again just to remind you

00:14:20,560 --> 00:14:26,560
download from this url to this file

00:14:22,959 --> 00:14:29,760
make it an executable forgot

00:14:26,560 --> 00:14:35,040
to specify the filename and then

00:14:29,760 --> 00:14:38,079
execute it so it's downloading

00:14:35,040 --> 00:14:40,959
file already downloaded and we have

00:14:38,079 --> 00:14:43,920
hello world i can stop tracing now

00:14:40,959 --> 00:14:45,519
and we can observe the output so what

00:14:43,920 --> 00:14:48,880
can tracy tell us

00:14:45,519 --> 00:14:51,920
first of all zesh which is my shell

00:14:48,880 --> 00:14:54,079
has executed the wgets command

00:14:51,920 --> 00:14:55,199
and these are the arguments this is very

00:14:54,079 --> 00:14:57,440
useful because it

00:14:55,199 --> 00:14:58,959
maybe i didn't have access to the

00:14:57,440 --> 00:15:01,199
original script here

00:14:58,959 --> 00:15:03,040
but i can still see from the os point of

00:15:01,199 --> 00:15:06,079
view what happened

00:15:03,040 --> 00:15:08,079
then i see that w get to control and

00:15:06,079 --> 00:15:10,079
it started to do some stuff so we see

00:15:08,079 --> 00:15:12,800
the socket and connect

00:15:10,079 --> 00:15:13,600
a few times here i guess that this is

00:15:12,800 --> 00:15:18,800
the ip

00:15:13,600 --> 00:15:20,880
that we are downloading from over https

00:15:18,800 --> 00:15:22,000
and then there's a vfs right because we

00:15:20,880 --> 00:15:24,480
are um

00:15:22,000 --> 00:15:25,120
writing to the file actually here so

00:15:24,480 --> 00:15:28,480
these

00:15:25,120 --> 00:15:30,079
four events here are what copies from

00:15:28,480 --> 00:15:31,680
the socket into the file

00:15:30,079 --> 00:15:33,759
you can see the arguments here is the

00:15:31,680 --> 00:15:36,959
path to the file and some

00:15:33,759 --> 00:15:38,639
sizes i guess uh it's for it's four

00:15:36,959 --> 00:15:40,480
events because the download is

00:15:38,639 --> 00:15:41,839
being done in chunks so we have four

00:15:40,480 --> 00:15:44,399
chunks

00:15:41,839 --> 00:15:45,759
once wget is finished downloading the

00:15:44,399 --> 00:15:50,240
file

00:15:45,759 --> 00:15:53,680
zesh is executing the change mode

00:15:50,240 --> 00:15:56,480
executable with these arguments

00:15:53,680 --> 00:15:57,199
and then chmod is using this system

00:15:56,480 --> 00:15:59,120
called to

00:15:57,199 --> 00:16:01,680
do what it's supposed to do so this is

00:15:59,120 --> 00:16:03,360
the the arguments for each mod

00:16:01,680 --> 00:16:05,759
uh the name of the file and the

00:16:03,360 --> 00:16:07,680
requested permissions so we request

00:16:05,759 --> 00:16:09,600
read write and execute for the user for

00:16:07,680 --> 00:16:13,040
the group and so on

00:16:09,600 --> 00:16:16,800
and finally zesch is executing

00:16:13,040 --> 00:16:18,079
the dropped binary so this is how a

00:16:16,800 --> 00:16:21,199
dropper

00:16:18,079 --> 00:16:22,480
looks like for tracy and this is how we

00:16:21,199 --> 00:16:24,079
can detect it

00:16:22,480 --> 00:16:25,519
but actually we can do something even

00:16:24,079 --> 00:16:29,199
better

00:16:25,519 --> 00:16:33,440
you know we've instrumented these

00:16:29,199 --> 00:16:35,759
vfs write functions here

00:16:33,440 --> 00:16:37,600
so we were at the right time in the

00:16:35,759 --> 00:16:39,600
right place

00:16:37,600 --> 00:16:42,240
to be able to actually see the binary

00:16:39,600 --> 00:16:45,040
data to look at the data itself

00:16:42,240 --> 00:16:45,680
and we can ask tracy to make a copy of

00:16:45,040 --> 00:16:50,000
this data

00:16:45,680 --> 00:16:54,800
for us so what i'm going to do next

00:16:50,000 --> 00:16:54,800
is use a very neat feature of tracy

00:16:58,079 --> 00:17:06,400
that basically means we want to capture

00:17:03,120 --> 00:17:08,160
all of the right operations

00:17:06,400 --> 00:17:09,760
so whenever there's a vfs write into a

00:17:08,160 --> 00:17:11,360
file i want you to capture it i'm

00:17:09,760 --> 00:17:13,520
telling tracy

00:17:11,360 --> 00:17:15,120
um but not everything because there's a

00:17:13,520 --> 00:17:15,760
lot of things going on in the computer

00:17:15,120 --> 00:17:18,480
we want

00:17:15,760 --> 00:17:20,240
just to filter it for stuff that happens

00:17:18,480 --> 00:17:22,319
in the current directory

00:17:20,240 --> 00:17:23,760
so in our case we know that this is the

00:17:22,319 --> 00:17:26,160
file download

00:17:23,760 --> 00:17:29,760
and i'm asking tracy to save the result

00:17:26,160 --> 00:17:29,760
also into the current directory

00:17:29,919 --> 00:17:38,480
so i will start tracy

00:17:33,520 --> 00:17:38,480
and i will start another download

00:17:45,200 --> 00:17:52,400
starting another download tracy

00:17:48,559 --> 00:17:54,480
collects a lot of information and

00:17:52,400 --> 00:17:56,799
actually i stopped it in the in the

00:17:54,480 --> 00:17:56,799
middle

00:17:57,600 --> 00:18:03,120
no actually it completed the download so

00:18:00,559 --> 00:18:07,039
we can take a look here

00:18:03,120 --> 00:18:07,039
and see that there is a

00:18:07,360 --> 00:18:12,480
a new directory that's called uh this is

00:18:10,320 --> 00:18:16,799
actually the amount time space for the

00:18:12,480 --> 00:18:16,799
machine and we can look inside of it

00:18:17,679 --> 00:18:21,120
and see that there is a file actually

00:18:20,320 --> 00:18:23,360
this file

00:18:21,120 --> 00:18:24,960
uh is owned by root which is not us

00:18:23,360 --> 00:18:28,880
because we started tracy as soon

00:18:24,960 --> 00:18:31,120
so i'm just gonna fix that real quick

00:18:28,880 --> 00:18:31,919
i'm going to just change the ownership

00:18:31,120 --> 00:18:35,200
to be me

00:18:31,919 --> 00:18:36,400
and now we can look at the file but it's

00:18:35,200 --> 00:18:39,120
a binary file so

00:18:36,400 --> 00:18:40,080
there's not a lot to see here however we

00:18:39,120 --> 00:18:41,360
can try to

00:18:40,080 --> 00:18:43,039
execute it because they know it's a

00:18:41,360 --> 00:18:44,400
binary file we actually know that it's

00:18:43,039 --> 00:18:47,679
the hello world

00:18:44,400 --> 00:18:50,080
and indeed this is the alarm

00:18:47,679 --> 00:18:51,520
so this is very cool because not only

00:18:50,080 --> 00:18:54,000
tracy told us

00:18:51,520 --> 00:18:55,440
there is a dropper here it actually gave

00:18:54,000 --> 00:18:57,039
us the evidence

00:18:55,440 --> 00:18:59,360
and said here is the file that we

00:18:57,039 --> 00:19:02,480
downloaded and this is from the kernel

00:18:59,360 --> 00:19:02,480
and not from wget

00:19:03,039 --> 00:19:12,000
great so let's continue

00:19:10,080 --> 00:19:13,760
so the next demo that i want to show you

00:19:12,000 --> 00:19:15,360
is uh

00:19:13,760 --> 00:19:17,039
an interesting technique that's called

00:19:15,360 --> 00:19:21,039
uh packing

00:19:17,039 --> 00:19:23,520
it means that we take the malware

00:19:21,039 --> 00:19:25,919
we embed it within another executable

00:19:23,520 --> 00:19:28,480
and that other executable

00:19:25,919 --> 00:19:29,039
is shipped with the container and then

00:19:28,480 --> 00:19:32,640
when it's

00:19:29,039 --> 00:19:36,559
executing it will unpack the embedded

00:19:32,640 --> 00:19:39,360
malware and run it we're going to use

00:19:36,559 --> 00:19:41,360
a well-known tool for that it's called

00:19:39,360 --> 00:19:44,720
upx it's on github

00:19:41,360 --> 00:19:48,480
i'm just using that to pack

00:19:44,720 --> 00:19:48,480
the hello world executable

00:19:48,559 --> 00:19:55,840
and i want to show you how tracy

00:19:52,080 --> 00:19:59,520
sees that so i'm going to

00:19:55,840 --> 00:20:04,240
show open the output directly for the

00:19:59,520 --> 00:20:07,679
back example

00:20:04,240 --> 00:20:09,200
okay so the reason that this is very

00:20:07,679 --> 00:20:11,440
interesting

00:20:09,200 --> 00:20:13,039
is because there is no exact ve

00:20:11,440 --> 00:20:16,720
happening here

00:20:13,039 --> 00:20:17,919
after the the original executable is

00:20:16,720 --> 00:20:20,080
done

00:20:17,919 --> 00:20:21,600
so because there are two executables

00:20:20,080 --> 00:20:24,480
involved here the

00:20:21,600 --> 00:20:25,280
the malware and the wrapper you would

00:20:24,480 --> 00:20:28,720
expect

00:20:25,280 --> 00:20:30,320
to exactly e in this slow but actually

00:20:28,720 --> 00:20:33,200
there's only one

00:20:30,320 --> 00:20:34,000
because the way that upx for example

00:20:33,200 --> 00:20:37,120
works

00:20:34,000 --> 00:20:40,960
it allocates a memory region

00:20:37,120 --> 00:20:42,640
for the model by the way upx is not

00:20:40,960 --> 00:20:44,720
meant for malware i'm just using it for

00:20:42,640 --> 00:20:46,640
this demo and

00:20:44,720 --> 00:20:48,640
it allocates a memory region it makes

00:20:46,640 --> 00:20:50,799
this memory region executable

00:20:48,640 --> 00:20:52,320
it copies the binary data for the

00:20:50,799 --> 00:20:55,200
malware there and then it

00:20:52,320 --> 00:20:56,720
changes execution to that place this is

00:20:55,200 --> 00:20:57,520
all legitimate operation that the

00:20:56,720 --> 00:20:59,840
process can do

00:20:57,520 --> 00:21:01,440
the process can manipulate its memory

00:20:59,840 --> 00:21:04,000
addresses it can

00:21:01,440 --> 00:21:05,440
jump to whatever instructions they want

00:21:04,000 --> 00:21:07,360
so there's nothing particularly

00:21:05,440 --> 00:21:10,000
malicious there

00:21:07,360 --> 00:21:12,080
however we can identify the pattern that

00:21:10,000 --> 00:21:14,640
is very typical to upx

00:21:12,080 --> 00:21:16,559
and and look at it so this is what we

00:21:14,640 --> 00:21:19,440
see here we see a series of m

00:21:16,559 --> 00:21:20,480
up and m protect events and we can look

00:21:19,440 --> 00:21:24,159
at the arguments

00:21:20,480 --> 00:21:27,600
for example we see that um

00:21:24,159 --> 00:21:30,240
there is an m protect here and protect

00:21:27,600 --> 00:21:34,080
is the system called used to change the

00:21:30,240 --> 00:21:36,880
permission of a memory region

00:21:34,080 --> 00:21:37,840
so it takes an address a pointer to the

00:21:36,880 --> 00:21:40,960
memory

00:21:37,840 --> 00:21:43,280
it takes a length which

00:21:40,960 --> 00:21:45,039
together gives us a memory region and

00:21:43,280 --> 00:21:46,640
then the requested permissions and we

00:21:45,039 --> 00:21:48,159
see that they requested executable

00:21:46,640 --> 00:21:49,840
permissions here

00:21:48,159 --> 00:21:51,679
which probably means that they are going

00:21:49,840 --> 00:21:54,400
to execute something from this region

00:21:51,679 --> 00:21:56,159
if this and if this wasn't originally

00:21:54,400 --> 00:21:59,360
meant for execution

00:21:56,159 --> 00:22:01,200
this is alerting so actually we know

00:21:59,360 --> 00:22:04,400
that this is alerting

00:22:01,200 --> 00:22:08,320
and this is why we have uh embedded this

00:22:04,400 --> 00:22:10,640
uh insight into tracy so there is

00:22:08,320 --> 00:22:11,679
a nice flag for tracy that is called

00:22:10,640 --> 00:22:14,880
dash

00:22:11,679 --> 00:22:18,640
security alerts

00:22:14,880 --> 00:22:20,559
and this makes tracy emit additional

00:22:18,640 --> 00:22:21,919
information additional alerts which are

00:22:20,559 --> 00:22:25,280
not raw data

00:22:21,919 --> 00:22:28,080
for example this one this

00:22:25,280 --> 00:22:29,440
memprot alert event is not a system

00:22:28,080 --> 00:22:32,559
called it's not a function

00:22:29,440 --> 00:22:35,120
it's not raw data this is tracy

00:22:32,559 --> 00:22:35,679
trying to tell you that hey they make

00:22:35,120 --> 00:22:38,320
the

00:22:35,679 --> 00:22:40,159
protection change to executable this is

00:22:38,320 --> 00:22:43,919
interesting you should note

00:22:40,159 --> 00:22:47,120
and again tracy here is telling you hey

00:22:43,919 --> 00:22:48,480
a memory mapped region with write and

00:22:47,120 --> 00:22:51,360
execute permissions

00:22:48,480 --> 00:22:54,000
i wonder what that can be and finally

00:22:51,360 --> 00:22:56,400
tracy is telling you again

00:22:54,000 --> 00:22:57,679
hey protection change from right and

00:22:56,400 --> 00:23:00,080
execute to execute

00:22:57,679 --> 00:23:01,600
which we know is the is the final step

00:23:00,080 --> 00:23:05,120
before upx actually

00:23:01,600 --> 00:23:08,720
jumps to that memory region and uh

00:23:05,120 --> 00:23:12,080
this is why at this point we decide to

00:23:08,720 --> 00:23:14,159
dump this memory region

00:23:12,080 --> 00:23:15,120
into a file so you can analyze it so we

00:23:14,159 --> 00:23:19,039
saved this

00:23:15,120 --> 00:23:22,080
this is actually achieved if you add the

00:23:19,039 --> 00:23:24,240
capture flag

00:23:22,080 --> 00:23:25,280
which we have seen before right before

00:23:24,240 --> 00:23:28,400
that we've used

00:23:25,280 --> 00:23:30,799
capture uh capture right but

00:23:28,400 --> 00:23:32,080
in this case we've used capture mesh

00:23:30,799 --> 00:23:34,400
which means

00:23:32,080 --> 00:23:36,320
uh whenever you see something an alert

00:23:34,400 --> 00:23:39,280
like this i want you to also

00:23:36,320 --> 00:23:42,720
capture this memory region into a file

00:23:39,280 --> 00:23:42,720
so i can further analyze it

00:23:42,799 --> 00:23:47,600
great so we've seen how tracy can help

00:23:45,039 --> 00:23:51,840
us identify the behavior

00:23:47,600 --> 00:23:55,120
of a memory packers such as upx

00:23:51,840 --> 00:23:59,360
the next example is another technique

00:23:55,120 --> 00:24:02,960
that is called fileless files execution

00:23:59,360 --> 00:24:05,600
is uh is leveraging a unix

00:24:02,960 --> 00:24:07,360
system called that is called uh mfd

00:24:05,600 --> 00:24:10,960
creator sorry linux system code

00:24:07,360 --> 00:24:12,880
mfd create creates a file

00:24:10,960 --> 00:24:15,600
that doesn't have any backing in the

00:24:12,880 --> 00:24:18,960
disk or in the file system

00:24:15,600 --> 00:24:22,240
it is purely in memory

00:24:18,960 --> 00:24:25,760
and we can use this uh special file

00:24:22,240 --> 00:24:28,640
in order to create an executable

00:24:25,760 --> 00:24:30,840
and execute it actually without ever

00:24:28,640 --> 00:24:34,080
saving anything to disk so we can

00:24:30,840 --> 00:24:35,840
escape software such as the anti-malware

00:24:34,080 --> 00:24:36,640
software which are constantly scanning

00:24:35,840 --> 00:24:41,120
the disk

00:24:36,640 --> 00:24:43,919
or even escape security

00:24:41,120 --> 00:24:44,400
image scanners such as mentioned that

00:24:43,919 --> 00:24:46,880
are

00:24:44,400 --> 00:24:49,440
scanning for malware for no malware so

00:24:46,880 --> 00:24:51,520
in this case we will be able to

00:24:49,440 --> 00:24:52,480
put the malware in memory and execute it

00:24:51,520 --> 00:24:55,120
from there without

00:24:52,480 --> 00:24:56,960
ever touching the disk so for that i'm

00:24:55,120 --> 00:24:58,880
going to use

00:24:56,960 --> 00:25:00,559
another nice utility that i found it's

00:24:58,880 --> 00:25:03,120
called elf exact

00:25:00,559 --> 00:25:04,000
and it's just a nice uh way to exercise

00:25:03,120 --> 00:25:07,039
this technique

00:25:04,000 --> 00:25:09,679
amp exact will create an mfd

00:25:07,039 --> 00:25:11,360
file it will read from start and input

00:25:09,679 --> 00:25:14,400
and write into this file and then it

00:25:11,360 --> 00:25:17,200
will use exactly add to execute this

00:25:14,400 --> 00:25:17,200
mfd file

00:25:17,840 --> 00:25:21,039
all right so the command that i'm going

00:25:19,919 --> 00:25:25,679
to write

00:25:21,039 --> 00:25:29,760
that i'm going to run is something like

00:25:25,679 --> 00:25:31,120
the following so w get again i'm

00:25:29,760 --> 00:25:34,080
pointing to a remote

00:25:31,120 --> 00:25:34,720
location this time i'm not giving it a

00:25:34,080 --> 00:25:36,880
file name

00:25:34,720 --> 00:25:37,760
because i don't want it to save the file

00:25:36,880 --> 00:25:41,120
to disk

00:25:37,760 --> 00:25:42,559
i want it to save to just download the

00:25:41,120 --> 00:25:44,640
file and emit the

00:25:42,559 --> 00:25:46,960
contents into standard output this is

00:25:44,640 --> 00:25:49,039
what the dash means

00:25:46,960 --> 00:25:50,559
but then i am redirecting standard

00:25:49,039 --> 00:25:53,679
output into alpha exact

00:25:50,559 --> 00:25:56,000
health exact read from standard input

00:25:53,679 --> 00:25:57,440
it will find the contents of this file

00:25:56,000 --> 00:25:59,679
and it will

00:25:57,440 --> 00:26:00,960
write them into the mfd file and then

00:25:59,679 --> 00:26:05,440
execute it

00:26:00,960 --> 00:26:05,440
so basically we will be able to

00:26:05,520 --> 00:26:10,720
stream the bytes from the file here on

00:26:08,480 --> 00:26:12,799
the remote server

00:26:10,720 --> 00:26:15,120
directly into the memory into the mfd

00:26:12,799 --> 00:26:17,360
file and then execute it without

00:26:15,120 --> 00:26:18,960
writing anything to disk this is very

00:26:17,360 --> 00:26:22,840
cool this is like

00:26:18,960 --> 00:26:24,799
hackers love this so let's look at how

00:26:22,840 --> 00:26:29,039
tracy

00:26:24,799 --> 00:26:29,039
is able to detect that

00:26:31,600 --> 00:26:35,679
all right so this is how the output for

00:26:33,279 --> 00:26:38,400
jc looks like

00:26:35,679 --> 00:26:40,159
i have added another event here that i

00:26:38,400 --> 00:26:42,559
want to trace which is the name of the

00:26:40,159 --> 00:26:45,919
create of course

00:26:42,559 --> 00:26:49,120
so we started the command

00:26:45,919 --> 00:26:51,520
with uh f exec and w gets it's a pipe so

00:26:49,120 --> 00:26:54,480
both of them start simultaneously

00:26:51,520 --> 00:26:55,600
these are the arguments and then

00:26:54,480 --> 00:26:58,720
immediately

00:26:55,600 --> 00:27:00,480
elf exec has invoked the name of the

00:26:58,720 --> 00:27:02,960
create system code

00:27:00,480 --> 00:27:04,080
and it created an mfd file it received

00:27:02,960 --> 00:27:07,919
the file descriptor

00:27:04,080 --> 00:27:10,240
free and then wget started to download

00:27:07,919 --> 00:27:11,600
the file this is a similar behavior to

00:27:10,240 --> 00:27:15,279
what we've seen before

00:27:11,600 --> 00:27:16,080
except that this time the vfs write is

00:27:15,279 --> 00:27:18,799
not writing

00:27:16,080 --> 00:27:19,520
into a file on this there's no real path

00:27:18,799 --> 00:27:22,720
here

00:27:19,520 --> 00:27:26,880
this string here is not a path it just

00:27:22,720 --> 00:27:29,679
symbolizes this pseudo file

00:27:26,880 --> 00:27:31,200
so it it is writing directly into into

00:27:29,679 --> 00:27:34,399
memory

00:27:31,200 --> 00:27:38,399
and once we are done writing into this

00:27:34,399 --> 00:27:41,440
mfd file fxec is executing

00:27:38,399 --> 00:27:43,520
this file descriptor number three

00:27:41,440 --> 00:27:45,520
and this is how we achieve the execution

00:27:43,520 --> 00:27:50,880
without ever writing to disk

00:27:45,520 --> 00:27:50,880
but tracy was able to detect that

00:27:53,919 --> 00:27:58,320
all right so we've seen a few techniques

00:27:56,559 --> 00:28:00,960
that are actually being used out in a

00:27:58,320 --> 00:28:04,399
while and i wanted to stress this that

00:28:00,960 --> 00:28:07,279
this can meet you in the real world

00:28:04,399 --> 00:28:08,240
for example amir mentioned supply chain

00:28:07,279 --> 00:28:11,360
attacks

00:28:08,240 --> 00:28:12,640
um let's think of a scenario when we

00:28:11,360 --> 00:28:16,080
need some kind of

00:28:12,640 --> 00:28:18,720
utility and we found the solution

00:28:16,080 --> 00:28:20,559
as a perfect container on docker hub

00:28:18,720 --> 00:28:21,279
let's say that we were looking for a web

00:28:20,559 --> 00:28:24,080
service

00:28:21,279 --> 00:28:25,360
that returns the current date and time

00:28:24,080 --> 00:28:28,159
for example

00:28:25,360 --> 00:28:30,720
so i've created something like this here

00:28:28,159 --> 00:28:34,000
it is called road rotten debt you will

00:28:30,720 --> 00:28:35,679
soon see why and it's actually working

00:28:34,000 --> 00:28:39,279
it is actually a web server

00:28:35,679 --> 00:28:41,679
that i can um i can make

00:28:39,279 --> 00:28:44,640
an http request to and it will return

00:28:41,679 --> 00:28:46,399
the current date and time and i run this

00:28:44,640 --> 00:28:46,799
on my infrastructure but what i don't

00:28:46,399 --> 00:28:49,919
know

00:28:46,799 --> 00:28:53,440
is that it actually has

00:28:49,919 --> 00:28:55,360
ran a malware on my servers

00:28:53,440 --> 00:28:57,200
and it has used all of the evasion

00:28:55,360 --> 00:28:59,919
techniques that we've just discussed

00:28:57,200 --> 00:29:01,120
actually a few others that we didn't in

00:28:59,919 --> 00:29:03,760
order to evade us

00:29:01,120 --> 00:29:05,760
or any tools that we were using and if

00:29:03,760 --> 00:29:09,360
we were to scan this

00:29:05,760 --> 00:29:10,240
image using uh any static image scanning

00:29:09,360 --> 00:29:12,720
tool

00:29:10,240 --> 00:29:15,279
so let's use for example uh trevi which

00:29:12,720 --> 00:29:18,320
is an excellent

00:29:15,279 --> 00:29:19,200
uh static scanning tool by aqua so it is

00:29:18,320 --> 00:29:23,360
k slash

00:29:19,200 --> 00:29:26,320
protein date this is the image

00:29:23,360 --> 00:29:27,360
3v will basically say everything looks

00:29:26,320 --> 00:29:30,480
fine

00:29:27,360 --> 00:29:33,919
right because it looks at the image

00:29:30,480 --> 00:29:35,840
and there is no indication by looking at

00:29:33,919 --> 00:29:39,360
this file that there is anything

00:29:35,840 --> 00:29:42,480
bad with it however as you can see zero

00:29:39,360 --> 00:29:44,080
incidents but however if we run tracy it

00:29:42,480 --> 00:29:46,880
will tell us a lot of things so

00:29:44,080 --> 00:29:48,159
i've actually ran tracy here with this

00:29:46,880 --> 00:29:50,480
container

00:29:48,159 --> 00:29:52,480
and this is the output so this is a very

00:29:50,480 --> 00:29:54,640
long file all right this is uh

00:29:52,480 --> 00:29:57,440
um we're not going to go over that don't

00:29:54,640 --> 00:29:59,440
worry but i just want to show you that

00:29:57,440 --> 00:30:01,520
all of the indications that we've just

00:29:59,440 --> 00:30:05,279
uh seen are in there so for example

00:30:01,520 --> 00:30:09,440
mem fd create there it is it's in there

00:30:05,279 --> 00:30:13,120
for example the um the security alerts

00:30:09,440 --> 00:30:13,120
the tracy uh

00:30:13,520 --> 00:30:17,760
the tracy uh generates everything is

00:30:16,960 --> 00:30:22,080
here

00:30:17,760 --> 00:30:23,919
including the captured files the tracy

00:30:22,080 --> 00:30:25,360
has captured for us during the execution

00:30:23,919 --> 00:30:27,440
of the container

00:30:25,360 --> 00:30:28,480
all of the information is in here you

00:30:27,440 --> 00:30:31,919
just need to know

00:30:28,480 --> 00:30:33,200
how to uh search for it

00:30:31,919 --> 00:30:35,200
and you actually need to know what

00:30:33,200 --> 00:30:37,679
you're looking for

00:30:35,200 --> 00:30:39,200
which brings me to the next point that

00:30:37,679 --> 00:30:42,720
tracy is an excellent

00:30:39,200 --> 00:30:44,399
analysis tool but you do need to

00:30:42,720 --> 00:30:46,720
know what you're looking for you need to

00:30:44,399 --> 00:30:49,600
know that a file

00:30:46,720 --> 00:30:50,399
attack exists and how it looks like and

00:30:49,600 --> 00:30:52,320
there are

00:30:50,399 --> 00:30:53,520
many other things that we didn't discuss

00:30:52,320 --> 00:30:56,880
here

00:30:53,520 --> 00:31:00,559
so we have another uh offering

00:30:56,880 --> 00:31:04,960
a product offering that we called dta

00:31:00,559 --> 00:31:08,240
dynamic threat analysis dta basically

00:31:04,960 --> 00:31:11,120
wraps the entire uh session into

00:31:08,240 --> 00:31:12,720
a product so basically we create a

00:31:11,120 --> 00:31:15,279
sandbox for you

00:31:12,720 --> 00:31:16,960
we run the potentially malicious

00:31:15,279 --> 00:31:18,880
container in there

00:31:16,960 --> 00:31:20,799
and we run tracy in there this is the

00:31:18,880 --> 00:31:23,440
same open source tracy

00:31:20,799 --> 00:31:24,640
that we've just seen and you can also

00:31:23,440 --> 00:31:27,360
use it for your

00:31:24,640 --> 00:31:29,120
needs we just run it in this sandbox and

00:31:27,360 --> 00:31:31,039
we collect the output

00:31:29,120 --> 00:31:34,000
and we show you this lovely dashboard

00:31:31,039 --> 00:31:38,159
that summarizes all of the information

00:31:34,000 --> 00:31:40,320
but the real interesting thing here

00:31:38,159 --> 00:31:41,840
is not the pretty dashboard the really

00:31:40,320 --> 00:31:46,080
interesting thing here is that

00:31:41,840 --> 00:31:48,880
we have uh took all of the experience

00:31:46,080 --> 00:31:49,679
that our research team has from studying

00:31:48,880 --> 00:31:52,720
malware

00:31:49,679 --> 00:31:53,840
and we have created a an extensive

00:31:52,720 --> 00:31:57,440
library of

00:31:53,840 --> 00:32:00,640
signatures that we think are

00:31:57,440 --> 00:32:02,159
interesting for you for example here is

00:32:00,640 --> 00:32:02,720
the fireless attack by the way this is

00:32:02,159 --> 00:32:04,880
this

00:32:02,720 --> 00:32:06,480
the scan result for the same container

00:32:04,880 --> 00:32:07,440
the rotten date container that we've

00:32:06,480 --> 00:32:09,360
just seen

00:32:07,440 --> 00:32:10,559
so we see here the file is attack and

00:32:09,360 --> 00:32:13,519
this is the line

00:32:10,559 --> 00:32:14,559
we see here the upx executing and here

00:32:13,519 --> 00:32:16,320
is the evidence

00:32:14,559 --> 00:32:17,679
we see here something else that we

00:32:16,320 --> 00:32:20,960
didn't see before

00:32:17,679 --> 00:32:24,320
that uh this id address might be

00:32:20,960 --> 00:32:25,600
um might be uh have a bad reputation or

00:32:24,320 --> 00:32:29,760
something we see here the

00:32:25,600 --> 00:32:33,039
dropper that w getting so

00:32:29,760 --> 00:32:36,080
we have the knowledge of what what

00:32:33,039 --> 00:32:38,880
we think is potentially malicious

00:32:36,080 --> 00:32:40,240
and we have uh given this image a

00:32:38,880 --> 00:32:43,360
general score

00:32:40,240 --> 00:32:45,600
a risk score of high so you can use

00:32:43,360 --> 00:32:46,640
this uh summary information in order to

00:32:45,600 --> 00:32:50,159
make a decision

00:32:46,640 --> 00:32:53,200
if you want to run this container or not

00:32:50,159 --> 00:32:56,480
so this is dta it's actually free to

00:32:53,200 --> 00:32:57,679
start and you can scan a lot of images

00:32:56,480 --> 00:32:59,760
with it for free

00:32:57,679 --> 00:33:01,360
but i just want to mention that tracy is

00:32:59,760 --> 00:33:02,880
completely open source so you can

00:33:01,360 --> 00:33:06,240
actually take tracy

00:33:02,880 --> 00:33:09,279
and uh combine it with something like

00:33:06,240 --> 00:33:12,480
elasticsearch to automate the process

00:33:09,279 --> 00:33:15,679
of analyzing the events or

00:33:12,480 --> 00:33:16,960
you can just use tracy for analysis or

00:33:15,679 --> 00:33:19,279
research purposes

00:33:16,960 --> 00:33:21,919
if you want to investigate specific

00:33:19,279 --> 00:33:21,919
containers

00:33:22,559 --> 00:33:28,640
thank you so to summarize

00:33:25,840 --> 00:33:30,799
we are talking today about a party that

00:33:28,640 --> 00:33:32,880
we've identified in our cluster

00:33:30,799 --> 00:33:35,159
and the fact that static scanning that

00:33:32,880 --> 00:33:36,559
are looking for vulnerabilities malware

00:33:35,159 --> 00:33:39,840
misconfigurations

00:33:36,559 --> 00:33:41,840
cannot address the issues because this

00:33:39,840 --> 00:33:42,799
part is basically because of an invasive

00:33:41,840 --> 00:33:44,399
malware

00:33:42,799 --> 00:33:46,559
we also talked about the fact that

00:33:44,399 --> 00:33:48,399
runtime security can help you

00:33:46,559 --> 00:33:51,279
because the runtime security will detect

00:33:48,399 --> 00:33:53,120
and prevent malicious activity

00:33:51,279 --> 00:33:54,320
but the reason need to shift left the

00:33:53,120 --> 00:33:56,559
reason to find

00:33:54,320 --> 00:33:58,399
the bad behavior the invasive malware

00:33:56,559 --> 00:34:00,559
before you go production and this is

00:33:58,399 --> 00:34:02,640
what we presented today we presented a

00:34:00,559 --> 00:34:05,120
dynamic threat analysis

00:34:02,640 --> 00:34:05,679
a technique to take a container image

00:34:05,120 --> 00:34:08,240
running

00:34:05,679 --> 00:34:09,679
run it in a sandbox and and basically

00:34:08,240 --> 00:34:12,639
observe the behavior

00:34:09,679 --> 00:34:13,679
all before going to production i hope

00:34:12,639 --> 00:34:15,919
that you find this

00:34:13,679 --> 00:34:17,119
information very helpful and if you have

00:34:15,919 --> 00:34:19,919
any questions

00:34:17,119 --> 00:34:21,359
we are here there for q a thank you very

00:34:19,919 --> 00:34:25,200
much

00:34:21,359 --> 00:34:25,200

YouTube URL: https://www.youtube.com/watch?v=Ut3rrtMOkXk


