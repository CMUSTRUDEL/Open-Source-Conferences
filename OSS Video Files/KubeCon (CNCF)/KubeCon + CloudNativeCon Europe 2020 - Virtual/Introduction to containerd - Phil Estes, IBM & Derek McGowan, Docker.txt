Title: Introduction to containerd - Phil Estes, IBM & Derek McGowan, Docker
Publication date: 2020-08-28
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Introduction to containerd - Phil Estes, IBM & Derek McGowan, Docker 

Join containerd maintainers and learn how containerd is an improvement to one of the most fundamental parts of the container ecosystem. They will discuss the latest updates to the containerd project as well as how it is being used by Kubernetes and other container systems. Come dive into what containerd is, how it is different from other runtimes, and how it is built. The agenda includes an introduction to the containerd project, the architecture of containerd, and upcoming features in containerd 1.4.

https://sched.co/ZewU
Captions: 
	00:00:00,160 --> 00:00:03,040
hello i'm derek mcgowan i'm a maintainer

00:00:02,240 --> 00:00:05,120
on the container d

00:00:03,040 --> 00:00:06,799
project i'm joined today by phil estes

00:00:05,120 --> 00:00:07,680
from ibm who is also a maintainer of

00:00:06,799 --> 00:00:08,960
container d

00:00:07,680 --> 00:00:10,800
we are going to give you an introduction

00:00:08,960 --> 00:00:12,320
to container d today most of you have

00:00:10,800 --> 00:00:14,320
already heard of container d

00:00:12,320 --> 00:00:15,839
but today we will focus on the decisions

00:00:14,320 --> 00:00:16,320
that you might make as a container to

00:00:15,839 --> 00:00:19,199
user

00:00:16,320 --> 00:00:20,480
or a potential contributor firstly phil

00:00:19,199 --> 00:00:22,480
will go through what container d

00:00:20,480 --> 00:00:23,680
is where it came from and what problems

00:00:22,480 --> 00:00:25,119
it is solving

00:00:23,680 --> 00:00:27,199
then he will go into why you might be

00:00:25,119 --> 00:00:28,640
using containity today or want to use it

00:00:27,199 --> 00:00:30,480
in the future

00:00:28,640 --> 00:00:31,840
after that i will discuss how to

00:00:30,480 --> 00:00:32,960
contribute to continuity

00:00:31,840 --> 00:00:34,960
we will go through the high level

00:00:32,960 --> 00:00:36,160
architecture of container d and discuss

00:00:34,960 --> 00:00:37,440
the different parts which you may want

00:00:36,160 --> 00:00:39,360
to contribute to

00:00:37,440 --> 00:00:41,360
lastly we'll discuss what's coming up in

00:00:39,360 --> 00:00:42,559
container d all right let me hand it

00:00:41,360 --> 00:00:44,960
over to phil

00:00:42,559 --> 00:00:46,640
thanks for that intro derek um and hi

00:00:44,960 --> 00:00:48,719
everyone it's um

00:00:46,640 --> 00:00:50,320
obviously it would be a lot more fun to

00:00:48,719 --> 00:00:52,640
be together at kubecon

00:00:50,320 --> 00:00:54,879
like we have for the past few years like

00:00:52,640 --> 00:00:58,000
many of you it's one of my favorite

00:00:54,879 --> 00:01:00,559
conferences where i see tons of

00:00:58,000 --> 00:01:02,719
friends and colleagues across the

00:01:00,559 --> 00:01:04,159
container world

00:01:02,719 --> 00:01:06,400
but we're going to do the best we can

00:01:04,159 --> 00:01:08,799
and hopefully

00:01:06,400 --> 00:01:10,000
give you some details on container d

00:01:08,799 --> 00:01:12,000
that are valuable to you

00:01:10,000 --> 00:01:13,360
and your current role and hopefully in

00:01:12,000 --> 00:01:17,119
the future we'll see you again

00:01:13,360 --> 00:01:19,360
at a conference in the future but let me

00:01:17,119 --> 00:01:20,720
try and get us all on the same page and

00:01:19,360 --> 00:01:23,600
answer this question

00:01:20,720 --> 00:01:24,560
what is container d and sure you know

00:01:23,600 --> 00:01:26,880
the default

00:01:24,560 --> 00:01:28,400
uh response is while it's container

00:01:26,880 --> 00:01:31,119
runtime

00:01:28,400 --> 00:01:32,400
but we all know that that term is fairly

00:01:31,119 --> 00:01:35,200
overloaded and so

00:01:32,400 --> 00:01:35,680
maybe it's easiest to see container d as

00:01:35,200 --> 00:01:38,320
being

00:01:35,680 --> 00:01:40,079
below certain things and we maybe call

00:01:38,320 --> 00:01:41,840
those platforms like docker or

00:01:40,079 --> 00:01:44,880
kubernetes

00:01:41,840 --> 00:01:47,520
but above a lower layer of what

00:01:44,880 --> 00:01:48,960
might be the actual container runtimes

00:01:47,520 --> 00:01:50,960
you think of like run c

00:01:48,960 --> 00:01:52,320
or even some of the other isolators you

00:01:50,960 --> 00:01:53,439
may have heard about like cata

00:01:52,320 --> 00:01:56,240
containers

00:01:53,439 --> 00:01:58,159
or firecracker or g-visor and so

00:01:56,240 --> 00:01:58,960
container d really fits in this middle

00:01:58,159 --> 00:02:02,640
spot

00:01:58,960 --> 00:02:04,719
below these more feature-rich platforms

00:02:02,640 --> 00:02:06,560
but above the lower layer runtimes which

00:02:04,719 --> 00:02:08,479
actually do the work

00:02:06,560 --> 00:02:10,479
of executing your container in some

00:02:08,479 --> 00:02:15,440
environment whether linux

00:02:10,479 --> 00:02:17,599
kernel features or qmu kvm

00:02:15,440 --> 00:02:19,440
so obviously if we sit in that space

00:02:17,599 --> 00:02:22,959
where you could also think of us

00:02:19,440 --> 00:02:25,920
as a resource manager so again we're

00:02:22,959 --> 00:02:27,760
doing the work on behalf of a platform

00:02:25,920 --> 00:02:30,000
and there's another process below us

00:02:27,760 --> 00:02:33,120
managing the the discrete

00:02:30,000 --> 00:02:35,200
processes itself we sit in that middle

00:02:33,120 --> 00:02:37,840
space and become this resource manager

00:02:35,200 --> 00:02:41,440
for those processes for their life cycle

00:02:37,840 --> 00:02:43,680
handling start stop pause etc

00:02:41,440 --> 00:02:44,879
and again we we deal with the artifacts

00:02:43,680 --> 00:02:47,120
you're going to need to even

00:02:44,879 --> 00:02:49,120
start a container so talking to a

00:02:47,120 --> 00:02:51,920
registry pulling the manifest getting

00:02:49,120 --> 00:02:53,519
the config and the layers

00:02:51,920 --> 00:02:55,120
unpacking that into file system

00:02:53,519 --> 00:02:57,760
snapshots

00:02:55,120 --> 00:02:59,120
so container d supports several file

00:02:57,760 --> 00:03:02,720
systems butter fs

00:02:59,120 --> 00:03:05,200
overlay mapper and so container d

00:03:02,720 --> 00:03:06,959
is that resource manager of you've

00:03:05,200 --> 00:03:09,840
pulled an image and now you need to

00:03:06,959 --> 00:03:12,959
turn it into a file system snapshot that

00:03:09,840 --> 00:03:14,800
can be used by the driver you're using

00:03:12,959 --> 00:03:17,040
all these resources need have some

00:03:14,800 --> 00:03:18,959
metadata they've got dependencies they

00:03:17,040 --> 00:03:21,440
have name spaces and other

00:03:18,959 --> 00:03:22,080
ways to to administratively separate

00:03:21,440 --> 00:03:24,159
them

00:03:22,080 --> 00:03:25,120
and so container d again handles these

00:03:24,159 --> 00:03:27,760
for you

00:03:25,120 --> 00:03:28,159
and when derek comes back you'll see

00:03:27,760 --> 00:03:29,680
this

00:03:28,159 --> 00:03:32,000
in an architectural diagram that

00:03:29,680 --> 00:03:34,400
hopefully helps you see how it all fits

00:03:32,000 --> 00:03:35,840
together the other aspect that's

00:03:34,400 --> 00:03:38,879
important to know about container d

00:03:35,840 --> 00:03:40,480
is that we're a tightly scoped run time

00:03:38,879 --> 00:03:42,319
it takes a 100 percent maintainer

00:03:40,480 --> 00:03:46,239
approval to change

00:03:42,319 --> 00:03:47,840
increase our scope so far the only major

00:03:46,239 --> 00:03:48,799
change we've made and it's been several

00:03:47,840 --> 00:03:51,440
years now

00:03:48,799 --> 00:03:53,360
is to bring in the cri implementation so

00:03:51,440 --> 00:03:55,280
kubernetes has this container runtime

00:03:53,360 --> 00:03:56,879
interface

00:03:55,280 --> 00:03:58,879
there was an implementation started

00:03:56,879 --> 00:04:00,560
separately that used container d

00:03:58,879 --> 00:04:03,360
we've brought that within the project

00:04:00,560 --> 00:04:06,400
and it's been that way for several years

00:04:03,360 --> 00:04:07,040
a couple quick highlights um you may

00:04:06,400 --> 00:04:09,840
have

00:04:07,040 --> 00:04:11,519
heard about them already at past

00:04:09,840 --> 00:04:13,280
conferences

00:04:11,519 --> 00:04:15,920
but we're the fifth project to graduate

00:04:13,280 --> 00:04:18,320
with within the cncf there are others

00:04:15,920 --> 00:04:19,919
who have graduated more recently

00:04:18,320 --> 00:04:21,919
it's been over a year now since we

00:04:19,919 --> 00:04:24,560
graduated

00:04:21,919 --> 00:04:26,560
in the past year we've grown in

00:04:24,560 --> 00:04:28,800
contributors and more companies

00:04:26,560 --> 00:04:30,880
and so we now have over 250 unique

00:04:28,800 --> 00:04:33,120
contributors to the project

00:04:30,880 --> 00:04:35,040
we support linux and windows our windows

00:04:33,120 --> 00:04:36,479
support has grown

00:04:35,040 --> 00:04:38,160
and we also support multiple

00:04:36,479 --> 00:04:40,080
architectures

00:04:38,160 --> 00:04:42,720
and we've added more recently governed

00:04:40,080 --> 00:04:46,720
sub projects like a rust lang

00:04:42,720 --> 00:04:49,440
implementation of the ttrpc protocol

00:04:46,720 --> 00:04:52,080
container encryption lazy image pull

00:04:49,440 --> 00:04:53,520
support as an external snapshotter

00:04:52,080 --> 00:04:55,040
and so again a lot of things have

00:04:53,520 --> 00:04:56,000
happened in the last year or two with

00:04:55,040 --> 00:04:57,680
container d

00:04:56,000 --> 00:04:59,360
so if you aren't up to speed there's

00:04:57,680 --> 00:05:01,120
also a great project

00:04:59,360 --> 00:05:03,520
journey report that was put out early

00:05:01,120 --> 00:05:05,199
this year you can find that on the cncf

00:05:03,520 --> 00:05:07,360
website or just by searching for

00:05:05,199 --> 00:05:08,880
container d project journey

00:05:07,360 --> 00:05:10,720
so hopefully that gives us kind of a

00:05:08,880 --> 00:05:13,520
level set of

00:05:10,720 --> 00:05:15,680
what is container d what are kind of the

00:05:13,520 --> 00:05:17,360
main components of it

00:05:15,680 --> 00:05:19,520
and what's been happening in the last

00:05:17,360 --> 00:05:22,080
year so let's move on from there

00:05:19,520 --> 00:05:23,600
we talked about what continuity is now

00:05:22,080 --> 00:05:25,520
let's talk a little bit about where

00:05:23,600 --> 00:05:27,440
container d came from

00:05:25,520 --> 00:05:29,840
it was originally built up alongside

00:05:27,440 --> 00:05:31,440
docker it wasn't forked or inherited

00:05:29,840 --> 00:05:32,720
from the docker code base it was a new

00:05:31,440 --> 00:05:34,560
project

00:05:32,720 --> 00:05:37,199
developed around the same time that the

00:05:34,560 --> 00:05:38,880
oci was formed and run c was created

00:05:37,199 --> 00:05:40,880
and so it was initially that process

00:05:38,880 --> 00:05:45,360
supervisor that sat between

00:05:40,880 --> 00:05:47,199
the full docker runtime and run c

00:05:45,360 --> 00:05:49,680
over the years it's grown in scope from

00:05:47,199 --> 00:05:53,520
that initial just process supervisor

00:05:49,680 --> 00:05:55,520
to a full run time along the way again

00:05:53,520 --> 00:05:57,039
even though some of those capabilities

00:05:55,520 --> 00:05:59,440
in container d overlapped with the

00:05:57,039 --> 00:06:01,919
docker code base the decision was

00:05:59,440 --> 00:06:03,440
to create new interfaces to take what we

00:06:01,919 --> 00:06:05,120
learned from

00:06:03,440 --> 00:06:06,720
those initial years of building the

00:06:05,120 --> 00:06:08,479
docker engine

00:06:06,720 --> 00:06:10,240
and come up with a cleaner api and

00:06:08,479 --> 00:06:11,919
better separation

00:06:10,240 --> 00:06:13,759
for the management of containers and

00:06:11,919 --> 00:06:17,199
images

00:06:13,759 --> 00:06:18,639
i mentioned this already but the cri was

00:06:17,199 --> 00:06:20,319
originally this out of process

00:06:18,639 --> 00:06:22,720
plug-in and so that was kind of the last

00:06:20,319 --> 00:06:25,360
piece that came into container d

00:06:22,720 --> 00:06:26,400
so again this growth over years from the

00:06:25,360 --> 00:06:28,639
supervisor

00:06:26,400 --> 00:06:32,319
to this full run time and then adding in

00:06:28,639 --> 00:06:33,840
the cri to be a runtime for kubernetes

00:06:32,319 --> 00:06:36,000
that happened over a number of years

00:06:33,840 --> 00:06:37,919
within that time frame it was donated to

00:06:36,000 --> 00:06:39,520
the cncf

00:06:37,919 --> 00:06:42,319
a lot of times there is a desire to

00:06:39,520 --> 00:06:45,199
compare container d with creo

00:06:42,319 --> 00:06:46,960
creo actually uses parts of the docker

00:06:45,199 --> 00:06:48,319
code base unlike what i just said about

00:06:46,960 --> 00:06:50,800
container d

00:06:48,319 --> 00:06:53,199
and forked for example the graph drivers

00:06:50,800 --> 00:06:54,160
uh all the overlay and device mapper and

00:06:53,199 --> 00:06:57,360
other

00:06:54,160 --> 00:06:58,960
drivers and used that as the starting

00:06:57,360 --> 00:07:02,160
point for creo

00:06:58,960 --> 00:07:04,319
whereas container d started um with

00:07:02,160 --> 00:07:05,120
learnings from that initial docker code

00:07:04,319 --> 00:07:08,160
base but

00:07:05,120 --> 00:07:11,120
initially and continued to create

00:07:08,160 --> 00:07:12,800
completely new interfaces so that gives

00:07:11,120 --> 00:07:14,880
you a bit of the history

00:07:12,800 --> 00:07:16,240
of where we came from how the project

00:07:14,880 --> 00:07:18,479
started

00:07:16,240 --> 00:07:20,240
and where we are today with the the full

00:07:18,479 --> 00:07:22,960
cri added to that

00:07:20,240 --> 00:07:24,880
uh full run time with registry

00:07:22,960 --> 00:07:26,639
interaction with container lifecycle

00:07:24,880 --> 00:07:29,280
management

00:07:26,639 --> 00:07:32,160
so of course the million dollar question

00:07:29,280 --> 00:07:33,680
is great should i use container d

00:07:32,160 --> 00:07:35,680
um of course you're asking the

00:07:33,680 --> 00:07:37,360
maintainers of the project who

00:07:35,680 --> 00:07:40,160
have spent the last four years building

00:07:37,360 --> 00:07:41,919
and of course the answer is yes

00:07:40,160 --> 00:07:43,360
but you're probably looking for a more

00:07:41,919 --> 00:07:45,919
nuanced answer of

00:07:43,360 --> 00:07:46,639
well why would i use container d so

00:07:45,919 --> 00:07:50,960
here's a few

00:07:46,639 --> 00:07:50,960
aspects before we dig even further

00:07:51,440 --> 00:07:56,720
coming at it from different perspectives

00:07:54,160 --> 00:07:59,520
for example are you using kubernetes

00:07:56,720 --> 00:08:02,240
container d is a stable well supported

00:07:59,520 --> 00:08:03,919
very mature run time for kubernetes

00:08:02,240 --> 00:08:05,919
and as you'll see in a few minutes most

00:08:03,919 --> 00:08:07,680
major cloud providers

00:08:05,919 --> 00:08:10,080
have a kubernetes offering that uses

00:08:07,680 --> 00:08:13,120
container d today

00:08:10,080 --> 00:08:14,400
what about for development both docker

00:08:13,120 --> 00:08:17,199
and build kit

00:08:14,400 --> 00:08:18,720
that would be our recommended tools for

00:08:17,199 --> 00:08:21,039
a developer facing

00:08:18,720 --> 00:08:22,080
a workflow but those are using container

00:08:21,039 --> 00:08:24,160
d already today

00:08:22,080 --> 00:08:25,680
so maybe you're using docker or build

00:08:24,160 --> 00:08:28,319
kit and therefore you're already using

00:08:25,680 --> 00:08:31,280
container d today

00:08:28,319 --> 00:08:33,039
you're interested in edge container d is

00:08:31,280 --> 00:08:34,479
the most memory efficient and stable

00:08:33,039 --> 00:08:37,919
runtime

00:08:34,479 --> 00:08:40,719
look at rancher's k3s and they

00:08:37,919 --> 00:08:41,599
chose container d again for that reason

00:08:40,719 --> 00:08:44,640
for this

00:08:41,599 --> 00:08:46,080
minimize kubernetes functions as a

00:08:44,640 --> 00:08:47,680
service if that's an area you're

00:08:46,080 --> 00:08:50,560
interested in

00:08:47,680 --> 00:08:52,399
again container d's performance and

00:08:50,560 --> 00:08:54,480
efficiency

00:08:52,399 --> 00:08:56,959
have caused it to be selected by the

00:08:54,480 --> 00:08:59,680
open fads for the fasd project

00:08:56,959 --> 00:09:01,600
uh ibm cloud functions uh uses container

00:08:59,680 --> 00:09:02,399
d as the runtime under the covers as

00:09:01,600 --> 00:09:05,600
well

00:09:02,399 --> 00:09:07,200
so these are these are aspects um

00:09:05,600 --> 00:09:09,600
you know maybe you're using container d

00:09:07,200 --> 00:09:12,320
already because you're using a popular

00:09:09,600 --> 00:09:13,920
cloud provider's kubernetes offering but

00:09:12,320 --> 00:09:15,839
these are all the kind of aspects that

00:09:13,920 --> 00:09:18,720
we see where people are using

00:09:15,839 --> 00:09:21,519
container d and it's important to think

00:09:18,720 --> 00:09:25,920
about this in terms of stability we

00:09:21,519 --> 00:09:28,560
initially in 2016 and 2017 talked about

00:09:25,920 --> 00:09:29,279
container d being this core stable run

00:09:28,560 --> 00:09:31,040
time

00:09:29,279 --> 00:09:32,480
but stability means different things to

00:09:31,040 --> 00:09:35,360
different people

00:09:32,480 --> 00:09:37,040
there's process stability so again if

00:09:35,360 --> 00:09:39,600
you're if you're running a demon like

00:09:37,040 --> 00:09:41,839
kubernetes or docker or some other demon

00:09:39,600 --> 00:09:44,240
you want process stability and that that

00:09:41,839 --> 00:09:46,160
that demon process doesn't crash on you

00:09:44,240 --> 00:09:47,360
corrupt your data you don't lose

00:09:46,160 --> 00:09:49,200
containers

00:09:47,360 --> 00:09:51,680
that's one aspect of stability we

00:09:49,200 --> 00:09:54,399
focused on in container d

00:09:51,680 --> 00:09:56,399
uh stability around resource use you

00:09:54,399 --> 00:09:57,600
don't want a runaway process a runaway

00:09:56,399 --> 00:09:59,519
daemon

00:09:57,600 --> 00:10:00,880
that uses all your memory or eats up

00:09:59,519 --> 00:10:03,440
your cpu

00:10:00,880 --> 00:10:05,279
and so we focused and done have done a

00:10:03,440 --> 00:10:08,160
lot of testing around

00:10:05,279 --> 00:10:08,720
memory usage around cpu usage making

00:10:08,160 --> 00:10:11,760
sure

00:10:08,720 --> 00:10:13,680
we don't have spiky uh resource use

00:10:11,760 --> 00:10:15,360
and having the smallest possible

00:10:13,680 --> 00:10:17,519
overhead for each container

00:10:15,360 --> 00:10:18,640
about how much extra memory and cpu is

00:10:17,519 --> 00:10:20,480
required

00:10:18,640 --> 00:10:22,399
for the life cycle management around

00:10:20,480 --> 00:10:25,839
containers and so

00:10:22,399 --> 00:10:28,720
the ttrpc protocol was one way

00:10:25,839 --> 00:10:29,920
to to notice that memory usage could be

00:10:28,720 --> 00:10:33,279
quite large for that

00:10:29,920 --> 00:10:35,519
management supervisory process

00:10:33,279 --> 00:10:36,399
and so we created an additional sub

00:10:35,519 --> 00:10:38,480
project

00:10:36,399 --> 00:10:41,040
that solved that problem and dropped our

00:10:38,480 --> 00:10:44,480
memory use per container

00:10:41,040 --> 00:10:45,839
again file system use we have garbage

00:10:44,480 --> 00:10:48,480
collection and container d

00:10:45,839 --> 00:10:49,360
which handles uh and accounts for that

00:10:48,480 --> 00:10:52,800
issue of

00:10:49,360 --> 00:10:54,240
of image artifacts and layers uh

00:10:52,800 --> 00:10:56,959
being cleaned up when they're not being

00:10:54,240 --> 00:10:58,720
used and so these aspects of stability

00:10:56,959 --> 00:10:59,440
are things we've focused on in container

00:10:58,720 --> 00:11:01,680
d

00:10:59,440 --> 00:11:03,040
and made progress on over the years and

00:11:01,680 --> 00:11:06,240
have caused it

00:11:03,040 --> 00:11:09,760
to be one reason to be a popular choice

00:11:06,240 --> 00:11:11,680
in various avenues of use today

00:11:09,760 --> 00:11:12,800
so we've talked about our focus on

00:11:11,680 --> 00:11:15,839
stability

00:11:12,800 --> 00:11:17,600
and on the use cases that exist for

00:11:15,839 --> 00:11:20,640
container run times

00:11:17,600 --> 00:11:21,839
and so naturally uh what you'll find is

00:11:20,640 --> 00:11:24,240
that container d

00:11:21,839 --> 00:11:26,160
because of this focus is really widely

00:11:24,240 --> 00:11:28,320
used in production today and

00:11:26,160 --> 00:11:30,320
so there's a handful of logos here there

00:11:28,320 --> 00:11:32,240
could be many more

00:11:30,320 --> 00:11:34,560
but these are all places where container

00:11:32,240 --> 00:11:36,240
d is used in production today and

00:11:34,560 --> 00:11:38,880
of course you'll see cloud providers

00:11:36,240 --> 00:11:41,279
you'll see various kubernetes use cases

00:11:38,880 --> 00:11:42,880
and and of course docker

00:11:41,279 --> 00:11:45,920
and then people have used container d to

00:11:42,880 --> 00:11:48,720
build higher level systems so

00:11:45,920 --> 00:11:50,240
containers as a service via fargate or

00:11:48,720 --> 00:11:53,519
google cloud run

00:11:50,240 --> 00:11:57,040
or aws's bottle rocket or firecracker

00:11:53,519 --> 00:11:59,519
or weaveworks ignite all these

00:11:57,040 --> 00:12:02,000
tools and systems and frameworks and

00:11:59,519 --> 00:12:04,800
built on top of container d

00:12:02,000 --> 00:12:07,040
and each one of these use cases is well

00:12:04,800 --> 00:12:08,880
supported by the container d

00:12:07,040 --> 00:12:11,200
framework and model of having a clean

00:12:08,880 --> 00:12:12,880
api clean separation

00:12:11,200 --> 00:12:15,120
people can use various aspects of

00:12:12,880 --> 00:12:17,440
container d without using others

00:12:15,120 --> 00:12:19,279
and so we've seen a huge growth over the

00:12:17,440 --> 00:12:22,320
years in

00:12:19,279 --> 00:12:23,440
both continuity as a building block but

00:12:22,320 --> 00:12:25,279
also leading to

00:12:23,440 --> 00:12:26,560
a wide use of containerity and

00:12:25,279 --> 00:12:27,839
production

00:12:26,560 --> 00:12:30,720
and that's led to even a lot of

00:12:27,839 --> 00:12:33,839
contribution so the device mapper

00:12:30,720 --> 00:12:35,279
snapshotter from the firecracker team

00:12:33,839 --> 00:12:37,440
or other features that have been

00:12:35,279 --> 00:12:39,200
contributed or developed or

00:12:37,440 --> 00:12:42,480
external projects building around

00:12:39,200 --> 00:12:45,760
container d that you can find today

00:12:42,480 --> 00:12:46,880
so again given that it's natural that

00:12:45,760 --> 00:12:49,839
you'll see

00:12:46,880 --> 00:12:50,160
when you look at the cncf annual survey

00:12:49,839 --> 00:12:53,279
or

00:12:50,160 --> 00:12:55,440
systig's annual container report

00:12:53,279 --> 00:12:56,560
the use of container d especially in

00:12:55,440 --> 00:12:59,440
production has grown

00:12:56,560 --> 00:13:00,800
year over year every time the surveys

00:12:59,440 --> 00:13:03,040
have come out

00:13:00,800 --> 00:13:05,440
and you'll see that given we know docker

00:13:03,040 --> 00:13:08,320
uses container d when you combine

00:13:05,440 --> 00:13:09,920
container d and docker usage together it

00:13:08,320 --> 00:13:12,720
is the lion's share

00:13:09,920 --> 00:13:14,399
of container runtime use in the industry

00:13:12,720 --> 00:13:17,200
today

00:13:14,399 --> 00:13:18,399
so i talked about this a few minutes ago

00:13:17,200 --> 00:13:20,480
but

00:13:18,399 --> 00:13:21,920
effectively because of all these use

00:13:20,480 --> 00:13:23,839
cases because of all these

00:13:21,920 --> 00:13:25,839
implementations

00:13:23,839 --> 00:13:27,600
if you're running containers you maybe

00:13:25,839 --> 00:13:29,600
already are using container d in some

00:13:27,600 --> 00:13:31,200
way are you using docker then yes you're

00:13:29,600 --> 00:13:33,519
using container d

00:13:31,200 --> 00:13:34,959
if you're using build kit that then

00:13:33,519 --> 00:13:36,480
you're already using the container to

00:13:34,959 --> 00:13:38,480
api

00:13:36,480 --> 00:13:41,440
are you running containers in a cloud

00:13:38,480 --> 00:13:43,440
context as a service like fargate or

00:13:41,440 --> 00:13:44,639
google cloud run then you're already

00:13:43,440 --> 00:13:47,600
using container d

00:13:44,639 --> 00:13:48,000
and we've of course mentioned the the

00:13:47,600 --> 00:13:50,399
common

00:13:48,000 --> 00:13:51,920
kubernetes use case so all the cloud

00:13:50,399 --> 00:13:55,040
providers

00:13:51,920 --> 00:13:56,399
manage service offerings use container d

00:13:55,040 --> 00:13:58,240
and so

00:13:56,399 --> 00:13:59,839
you probably may already be using

00:13:58,240 --> 00:14:01,519
container d today

00:13:59,839 --> 00:14:03,120
if you have a use case that hasn't been

00:14:01,519 --> 00:14:04,639
represented here we'd love to hear from

00:14:03,120 --> 00:14:07,519
you

00:14:04,639 --> 00:14:08,320
and hear how you're using container d

00:14:07,519 --> 00:14:10,079
but at this point

00:14:08,320 --> 00:14:12,399
be a great time to transition back to

00:14:10,079 --> 00:14:14,320
derek to talk about not just using

00:14:12,399 --> 00:14:18,399
container d but contributing to it

00:14:14,320 --> 00:14:19,839
so pass it back to you derek thank you

00:14:18,399 --> 00:14:21,600
all right let's discuss how to get

00:14:19,839 --> 00:14:23,040
started contributing to continuity

00:14:21,600 --> 00:14:25,120
most of you are already using container

00:14:23,040 --> 00:14:26,639
d in some form we're still happy if your

00:14:25,120 --> 00:14:27,920
only contribution to container d is

00:14:26,639 --> 00:14:30,000
attending this session

00:14:27,920 --> 00:14:31,440
and learning more about container d we

00:14:30,000 --> 00:14:32,320
hope you never encounter issues while

00:14:31,440 --> 00:14:33,600
using container d

00:14:32,320 --> 00:14:35,839
but we all know that's inevitable with

00:14:33,600 --> 00:14:37,519
any software please contribute by filing

00:14:35,839 --> 00:14:39,199
those issues on github

00:14:37,519 --> 00:14:40,800
we also recently opened up github

00:14:39,199 --> 00:14:42,480
discussions for container d

00:14:40,800 --> 00:14:44,240
this operates in place of a developer

00:14:42,480 --> 00:14:45,760
mailing list and is a good place to ask

00:14:44,240 --> 00:14:47,519
and answer questions

00:14:45,760 --> 00:14:49,440
all maintainers are also available on

00:14:47,519 --> 00:14:51,440
slack for guidance

00:14:49,440 --> 00:14:52,959
even if you are just following issues it

00:14:51,440 --> 00:14:54,480
is good to understand the architecture

00:14:52,959 --> 00:14:56,160
of container d

00:14:54,480 --> 00:14:57,600
it will not only help you diagnose

00:14:56,160 --> 00:14:59,440
problems but also

00:14:57,600 --> 00:15:01,279
help you understand what components may

00:14:59,440 --> 00:15:03,279
be affected by your issue

00:15:01,279 --> 00:15:04,720
if you want to contribute code knowing

00:15:03,279 --> 00:15:06,560
the high level architecture will help

00:15:04,720 --> 00:15:08,079
you understand where to contribute

00:15:06,560 --> 00:15:09,760
it may also help you align your

00:15:08,079 --> 00:15:11,360
particular interests with different

00:15:09,760 --> 00:15:13,120
parts of continuity

00:15:11,360 --> 00:15:14,720
if you are integrating with kubernetes

00:15:13,120 --> 00:15:15,760
the cri plug-in is a good place to

00:15:14,720 --> 00:15:17,120
contribute

00:15:15,760 --> 00:15:19,199
if you like lower level system

00:15:17,120 --> 00:15:20,160
development runtimes are a good place to

00:15:19,199 --> 00:15:21,680
start

00:15:20,160 --> 00:15:23,519
if you'd just like to hack around with

00:15:21,680 --> 00:15:25,040
container technologies or have a new

00:15:23,519 --> 00:15:26,639
feature you want to try out

00:15:25,040 --> 00:15:28,320
the container d client provides good

00:15:26,639 --> 00:15:29,839
flexibility for that

00:15:28,320 --> 00:15:31,680
usually contributing to the client is

00:15:29,839 --> 00:15:33,759
the best place to start that is where

00:15:31,680 --> 00:15:35,839
you can get started pretty quickly

00:15:33,759 --> 00:15:37,839
as a user of container d the client is

00:15:35,839 --> 00:15:39,360
the first place you will interact with

00:15:37,839 --> 00:15:41,279
if you are building a system on top of

00:15:39,360 --> 00:15:42,399
container d the client is what you will

00:15:41,279 --> 00:15:43,680
be working with

00:15:42,399 --> 00:15:45,199
you can see in the diagram that some

00:15:43,680 --> 00:15:46,880
core functionality that is often

00:15:45,199 --> 00:15:49,360
associated with container runtimes

00:15:46,880 --> 00:15:51,120
is implemented here in the client an

00:15:49,360 --> 00:15:53,279
example of this is container management

00:15:51,120 --> 00:15:54,320
which handles creation of the oci

00:15:53,279 --> 00:15:56,320
specification

00:15:54,320 --> 00:15:58,079
preparing the container snapshots as

00:15:56,320 --> 00:15:59,199
well as starting individual container

00:15:58,079 --> 00:16:00,800
tasks

00:15:59,199 --> 00:16:02,800
image pulling is also completely

00:16:00,800 --> 00:16:04,240
implemented inside the client

00:16:02,800 --> 00:16:06,800
because of this approach clients are

00:16:04,240 --> 00:16:08,560
mostly limited to using our go library

00:16:06,800 --> 00:16:10,639
even though python java or another

00:16:08,560 --> 00:16:13,440
language could talk to the container d

00:16:10,639 --> 00:16:14,880
api using grpc basic functionality would

00:16:13,440 --> 00:16:17,440
need to be re-implemented

00:16:14,880 --> 00:16:18,720
to use the full runtime the cri

00:16:17,440 --> 00:16:20,399
interface is probably

00:16:18,720 --> 00:16:22,959
much easier to work with if you are not

00:16:20,399 --> 00:16:24,079
implementing your project in go

00:16:22,959 --> 00:16:25,839
one of the first things you'll come

00:16:24,079 --> 00:16:26,560
across in the client is the options

00:16:25,839 --> 00:16:28,320
pattern

00:16:26,560 --> 00:16:30,240
we realize not everyone is a fan of this

00:16:28,320 --> 00:16:31,759
pattern and we always appreciate

00:16:30,240 --> 00:16:32,959
feedback and pull requests to make the

00:16:31,759 --> 00:16:34,560
client better

00:16:32,959 --> 00:16:36,560
any software can get complex really

00:16:34,560 --> 00:16:38,000
quickly sometimes adding simplicity in

00:16:36,560 --> 00:16:38,880
one part can lead to complexity in

00:16:38,000 --> 00:16:40,639
another part

00:16:38,880 --> 00:16:42,320
with container d we chose to keep the

00:16:40,639 --> 00:16:44,399
core as simple as possible

00:16:42,320 --> 00:16:45,440
by defining clean simple interfaces

00:16:44,399 --> 00:16:46,800
inside the core

00:16:45,440 --> 00:16:49,040
that meant the client had to have more

00:16:46,800 --> 00:16:50,959
functionality and configurability

00:16:49,040 --> 00:16:53,440
in the container decor there may just be

00:16:50,959 --> 00:16:54,800
generic variatic options on a core type

00:16:53,440 --> 00:16:57,279
but in the client you will see these

00:16:54,800 --> 00:16:58,639
width options used on these types to

00:16:57,279 --> 00:17:00,880
implement a feature

00:16:58,639 --> 00:17:03,120
you will commonly see this used for

00:17:00,880 --> 00:17:05,360
example for labeling or filtering

00:17:03,120 --> 00:17:06,720
on the different types we were also

00:17:05,360 --> 00:17:08,160
hoping this would allow clients to

00:17:06,720 --> 00:17:10,000
include their own opinions rather than

00:17:08,160 --> 00:17:12,000
be forced to work around opinions in the

00:17:10,000 --> 00:17:13,760
container daemon

00:17:12,000 --> 00:17:15,600
the core of container d contains the

00:17:13,760 --> 00:17:17,039
components we consider most critical in

00:17:15,600 --> 00:17:18,880
terms of stability

00:17:17,039 --> 00:17:21,439
here we define the main data types and

00:17:18,880 --> 00:17:23,120
interfaces used by container d

00:17:21,439 --> 00:17:24,640
if you think container d overuses

00:17:23,120 --> 00:17:27,280
interfaces this is

00:17:24,640 --> 00:17:29,360
partially intentional we want data and

00:17:27,280 --> 00:17:31,360
operations flowing through the core

00:17:29,360 --> 00:17:33,280
and everything else wrapping those types

00:17:31,360 --> 00:17:34,240
or using data that is tracked by the

00:17:33,280 --> 00:17:35,919
core

00:17:34,240 --> 00:17:37,840
the core has the main implementation of

00:17:35,919 --> 00:17:39,679
these interfaces and these interfaces

00:17:37,840 --> 00:17:40,640
are extended and used all the way to the

00:17:39,679 --> 00:17:42,720
client

00:17:40,640 --> 00:17:43,679
the design is such that all data flows

00:17:42,720 --> 00:17:45,600
through the core

00:17:43,679 --> 00:17:47,120
so that plugins and other components

00:17:45,600 --> 00:17:48,320
don't need to store data

00:17:47,120 --> 00:17:50,000
this is important because we have

00:17:48,320 --> 00:17:51,679
implemented garbage collection inside

00:17:50,000 --> 00:17:54,160
the core metadata store

00:17:51,679 --> 00:17:56,000
so if data is being used somewhere else

00:17:54,160 --> 00:17:57,679
it is really hard to track that data

00:17:56,000 --> 00:17:59,360
and make sure that it is removed when it

00:17:57,679 --> 00:18:01,200
is no longer needed this makes

00:17:59,360 --> 00:18:02,880
continuity stable by keeping storage and

00:18:01,200 --> 00:18:05,120
memory usage stable

00:18:02,880 --> 00:18:07,919
it also helps avoid data inconsistency

00:18:05,120 --> 00:18:09,600
and random crashes

00:18:07,919 --> 00:18:10,960
we don't expect as many changes in the

00:18:09,600 --> 00:18:12,000
core relative to other parts of

00:18:10,960 --> 00:18:13,600
container d

00:18:12,000 --> 00:18:15,679
features generally aren't implemented

00:18:13,600 --> 00:18:18,160
inside the core however some features

00:18:15,679 --> 00:18:19,679
may require some core changes

00:18:18,160 --> 00:18:21,280
if you have a high level feature which

00:18:19,679 --> 00:18:22,080
requires a bunch of changes to the core

00:18:21,280 --> 00:18:24,160
to implement it

00:18:22,080 --> 00:18:25,840
that is usually not the right design

00:18:24,160 --> 00:18:27,760
however some features require small

00:18:25,840 --> 00:18:29,600
changes inside the core

00:18:27,760 --> 00:18:31,840
so for example we recently added a

00:18:29,600 --> 00:18:33,039
feature to support remote snapshotters

00:18:31,840 --> 00:18:34,960
the high level feature of remote

00:18:33,039 --> 00:18:36,640
snapshotters is not something that the

00:18:34,960 --> 00:18:38,720
core knows anything about

00:18:36,640 --> 00:18:39,840
but one functionality we did add to the

00:18:38,720 --> 00:18:41,600
core was the ability for the

00:18:39,840 --> 00:18:43,440
snapshotters themselves to report that

00:18:41,600 --> 00:18:45,679
they already know about a snapshot

00:18:43,440 --> 00:18:47,760
as it is flowing through the core so

00:18:45,679 --> 00:18:49,840
when you go to create a new snapshot

00:18:47,760 --> 00:18:51,280
you can pass information that says this

00:18:49,840 --> 00:18:51,919
is the target snapshot that i'm trying

00:18:51,280 --> 00:18:54,080
to create

00:18:51,919 --> 00:18:55,520
and it will pass that to the backend the

00:18:54,080 --> 00:18:56,640
backend now can actually communicate

00:18:55,520 --> 00:18:58,320
back up to the core

00:18:56,640 --> 00:19:00,720
to let it know that it already has that

00:18:58,320 --> 00:19:02,559
snapshot that allows the client to know

00:19:00,720 --> 00:19:03,679
the snapshot is already available as a

00:19:02,559 --> 00:19:05,200
remote snapshot

00:19:03,679 --> 00:19:07,280
when it sees the core report the

00:19:05,200 --> 00:19:09,120
snapshot as already existing

00:19:07,280 --> 00:19:11,280
meanwhile the core has no knowledge of

00:19:09,120 --> 00:19:12,880
what a remote snapshot is

00:19:11,280 --> 00:19:14,799
it is really important for us to keep

00:19:12,880 --> 00:19:16,400
the core of container d unopinionated to

00:19:14,799 --> 00:19:17,600
make sure we don't get feature creep

00:19:16,400 --> 00:19:19,760
showing up in the container d

00:19:17,600 --> 00:19:21,679
daemon we also don't want opinions to

00:19:19,760 --> 00:19:23,360
show up in the daemon so that later on

00:19:21,679 --> 00:19:25,919
new features or requirements are limited

00:19:23,360 --> 00:19:27,520
by previous opinions added to the core

00:19:25,919 --> 00:19:29,280
for the underlying run time there is a

00:19:27,520 --> 00:19:30,880
component in the container de-damon

00:19:29,280 --> 00:19:32,720
and an external shim for managing

00:19:30,880 --> 00:19:34,480
container processes

00:19:32,720 --> 00:19:36,880
the runtime in the daemon is responsible

00:19:34,480 --> 00:19:38,240
for starting up new runtime shims

00:19:36,880 --> 00:19:40,480
it will pass through the oci

00:19:38,240 --> 00:19:41,360
specification and all the commands to

00:19:40,480 --> 00:19:43,280
the shim

00:19:41,360 --> 00:19:45,280
the runtime shims are the boxes on the

00:19:43,280 --> 00:19:47,039
right side these shims are what actually

00:19:45,280 --> 00:19:48,799
own the container processes

00:19:47,039 --> 00:19:50,880
the containers are parented directly to

00:19:48,799 --> 00:19:52,240
the shim the container d daemon will

00:19:50,880 --> 00:19:54,960
talk to the shims using the lightweight

00:19:52,240 --> 00:19:57,280
grpc protocol called ttrpc

00:19:54,960 --> 00:19:59,200
we use this lightweight rpc to reduce

00:19:57,280 --> 00:20:00,960
the memory footprint of the shim

00:19:59,200 --> 00:20:02,640
if container d gets restarted it will

00:20:00,960 --> 00:20:04,799
reconnect to the shims in order to send

00:20:02,640 --> 00:20:06,320
commands to the container

00:20:04,799 --> 00:20:08,880
there are many different runtime shim

00:20:06,320 --> 00:20:10,559
implementations the run c implementation

00:20:08,880 --> 00:20:13,440
is the most common

00:20:10,559 --> 00:20:15,200
there is run hcs for running on windows

00:20:13,440 --> 00:20:17,120
there's also a few sandbox shims

00:20:15,200 --> 00:20:18,480
such as for firecracker or kata

00:20:17,120 --> 00:20:20,320
containers

00:20:18,480 --> 00:20:22,640
since the shims only implement this rpc

00:20:20,320 --> 00:20:24,320
interface anyone can implement their own

00:20:22,640 --> 00:20:25,280
shim to be used by container d pretty

00:20:24,320 --> 00:20:26,720
easily

00:20:25,280 --> 00:20:28,720
container d just needs to know about the

00:20:26,720 --> 00:20:30,080
shim binary in order to use it to run

00:20:28,720 --> 00:20:31,440
containers

00:20:30,080 --> 00:20:33,280
plugins can call into the core of

00:20:31,440 --> 00:20:34,320
container d and the core can call out to

00:20:33,280 --> 00:20:36,000
different back-ends

00:20:34,320 --> 00:20:37,760
the back-ends themselves are also

00:20:36,000 --> 00:20:39,520
pluggable for example

00:20:37,760 --> 00:20:41,679
all snapshotters are implemented as

00:20:39,520 --> 00:20:43,440
plug-ins each plug-in can define their

00:20:41,679 --> 00:20:45,200
own configuration which gets included

00:20:43,440 --> 00:20:46,240
with containerd's global configuration

00:20:45,200 --> 00:20:48,320
object

00:20:46,240 --> 00:20:49,280
if you have a grpc service it can be

00:20:48,320 --> 00:20:51,840
added as a plugin

00:20:49,280 --> 00:20:52,400
and call into the core services directly

00:20:51,840 --> 00:20:54,480
cri

00:20:52,400 --> 00:20:56,400
is shown in the diagram as a plugin it

00:20:54,480 --> 00:20:57,280
is just registered as a grpc service

00:20:56,400 --> 00:20:59,120
plugin

00:20:57,280 --> 00:21:01,039
even though cri is very important and

00:20:59,120 --> 00:21:02,640
big enough to have its own core

00:21:01,039 --> 00:21:05,039
we don't include it as part of container

00:21:02,640 --> 00:21:06,880
diese core this is because cri consumes

00:21:05,039 --> 00:21:08,640
the core services but today it is

00:21:06,880 --> 00:21:09,760
implemented completely outside the core

00:21:08,640 --> 00:21:12,240
code base

00:21:09,760 --> 00:21:14,159
in continuity 1.5 we are looking into

00:21:12,240 --> 00:21:16,400
bringing the cri code base into the main

00:21:14,159 --> 00:21:18,080
container d repository this will allow

00:21:16,400 --> 00:21:18,960
us to merge some of the core components

00:21:18,080 --> 00:21:21,280
of cri

00:21:18,960 --> 00:21:22,960
such as pod sandboxes with the core

00:21:21,280 --> 00:21:24,400
components of container d

00:21:22,960 --> 00:21:26,240
this may lead to new types and

00:21:24,400 --> 00:21:27,520
interfaces inside the core related to

00:21:26,240 --> 00:21:29,360
sandboxes

00:21:27,520 --> 00:21:32,799
in fact there is already a proposal to

00:21:29,360 --> 00:21:34,400
add a sandbox api to container d and 1.5

00:21:32,799 --> 00:21:36,559
including your own snapshotter plugin is

00:21:34,400 --> 00:21:38,640
pretty easy you can compile in the

00:21:36,559 --> 00:21:39,840
snapshotter and register it as a plugin

00:21:38,640 --> 00:21:41,919
just like every other built-in

00:21:39,840 --> 00:21:44,080
snapshotter or you can implement your

00:21:41,919 --> 00:21:46,159
snapshotter as a proxy plugin

00:21:44,080 --> 00:21:48,159
a proxy plugin allows a snapshotter to

00:21:46,159 --> 00:21:49,120
just implement container d's snapshot or

00:21:48,159 --> 00:21:51,679
grpc

00:21:49,120 --> 00:21:53,760
api and configure container d to talk to

00:21:51,679 --> 00:21:55,520
your plugin over a unix socket

00:21:53,760 --> 00:21:56,880
the proxy plugin approach is great for

00:21:55,520 --> 00:21:58,960
experimenting with plugins

00:21:56,880 --> 00:22:00,640
without having to compile container d or

00:21:58,960 --> 00:22:02,240
ship your own binaries to include your

00:22:00,640 --> 00:22:03,840
plugin

00:22:02,240 --> 00:22:06,400
in the client there are many options for

00:22:03,840 --> 00:22:08,480
customization by default the container d

00:22:06,400 --> 00:22:09,919
client will use the proxy services

00:22:08,480 --> 00:22:12,480
which communicate with the continuity

00:22:09,919 --> 00:22:14,640
daemon through the grpc api

00:22:12,480 --> 00:22:16,480
however a client can be instantiated

00:22:14,640 --> 00:22:18,559
with any custom implementation

00:22:16,480 --> 00:22:20,960
of a service even allowing clients to

00:22:18,559 --> 00:22:22,880
operate completely without a daemon

00:22:20,960 --> 00:22:24,559
you can also add your own resolvers

00:22:22,880 --> 00:22:24,880
resolvers are what are used to push and

00:22:24,559 --> 00:22:26,960
pull

00:22:24,880 --> 00:22:28,320
images to container d the default

00:22:26,960 --> 00:22:30,480
implementation communicates with a

00:22:28,320 --> 00:22:31,679
docker registry using the standard oci

00:22:30,480 --> 00:22:33,200
distribution api

00:22:31,679 --> 00:22:34,960
however you can implement your own very

00:22:33,200 --> 00:22:36,960
easily if you have a different or faster

00:22:34,960 --> 00:22:38,799
way to distribute images

00:22:36,960 --> 00:22:40,880
okay going back to the whole continuity

00:22:38,799 --> 00:22:42,080
diagram you can see how operations flow

00:22:40,880 --> 00:22:43,679
from the client on the left

00:22:42,080 --> 00:22:45,840
all the way to the runtime and back ends

00:22:43,679 --> 00:22:47,280
on the right the components on the left

00:22:45,840 --> 00:22:48,960
tend to be more stateless

00:22:47,280 --> 00:22:50,720
the components on the right have more

00:22:48,960 --> 00:22:52,159
state even though our garbage collector

00:22:50,720 --> 00:22:53,039
is in the middle it tracks resources

00:22:52,159 --> 00:22:54,720
used by all the

00:22:53,039 --> 00:22:56,159
ends but it operates completely

00:22:54,720 --> 00:22:57,919
invisible to the client

00:22:56,159 --> 00:22:59,360
our end goal is to track any resource

00:22:57,919 --> 00:23:00,960
which may be used by container d

00:22:59,360 --> 00:23:03,919
to guarantee the long term stability of

00:23:00,960 --> 00:23:05,440
the runtime continuity 1.4 has recently

00:23:03,919 --> 00:23:06,080
been released and you can start using it

00:23:05,440 --> 00:23:08,000
today

00:23:06,080 --> 00:23:09,679
it includes support for c-groups v2

00:23:08,000 --> 00:23:11,600
improved se linux support

00:23:09,679 --> 00:23:13,679
support for remote snapshotters and

00:23:11,600 --> 00:23:14,880
support for cri on windows

00:23:13,679 --> 00:23:16,720
if you want to hear more about remote

00:23:14,880 --> 00:23:18,400
snapshotters attend the deep dive

00:23:16,720 --> 00:23:20,720
session for container d

00:23:18,400 --> 00:23:23,120
the container d 1.5 roadmap is currently

00:23:20,720 --> 00:23:24,960
being decided on as i mentioned before

00:23:23,120 --> 00:23:26,320
a large item will be merging the cri

00:23:24,960 --> 00:23:27,440
code base with the main container

00:23:26,320 --> 00:23:29,200
decodebase

00:23:27,440 --> 00:23:30,480
we also have ongoing work to introduce a

00:23:29,200 --> 00:23:32,799
new sandbox api

00:23:30,480 --> 00:23:34,640
and core sandbox interfaces this will

00:23:32,799 --> 00:23:35,120
not only allow for better integration

00:23:34,640 --> 00:23:37,360
with

00:23:35,120 --> 00:23:38,880
virtual machine sandboxes but also allow

00:23:37,360 --> 00:23:40,240
us to clean up the way pods are managed

00:23:38,880 --> 00:23:41,679
by container d

00:23:40,240 --> 00:23:43,600
there's also work going on to improve

00:23:41,679 --> 00:23:44,640
the way system resources are managed by

00:23:43,600 --> 00:23:46,320
the runtime

00:23:44,640 --> 00:23:48,080
this relates to improving interactions

00:23:46,320 --> 00:23:50,240
with resources and tying them into the

00:23:48,080 --> 00:23:52,080
container lifecycle more cleanly

00:23:50,240 --> 00:23:54,000
feel free to join the discussions today

00:23:52,080 --> 00:23:56,159
for container d 1.6

00:23:54,000 --> 00:23:58,080
there are discussions about a new node

00:23:56,159 --> 00:24:00,240
resource interface which operates in the

00:23:58,080 --> 00:24:01,440
container lifecycle similar to cni

00:24:00,240 --> 00:24:03,520
there's also discussions about the

00:24:01,440 --> 00:24:05,679
possibility of introducing a new version

00:24:03,520 --> 00:24:06,720
of the cri api so if this is something

00:24:05,679 --> 00:24:08,720
that interests you

00:24:06,720 --> 00:24:10,080
come join the conversation all right

00:24:08,720 --> 00:24:11,520
that's all we have for you today

00:24:10,080 --> 00:24:12,880
thank you for joining i also like to

00:24:11,520 --> 00:24:14,880
give a shout out to sue mcgowan for

00:24:12,880 --> 00:24:19,840
helping film and edit this session

00:24:14,880 --> 00:24:19,840

YouTube URL: https://www.youtube.com/watch?v=q0xt_JrJiIg


