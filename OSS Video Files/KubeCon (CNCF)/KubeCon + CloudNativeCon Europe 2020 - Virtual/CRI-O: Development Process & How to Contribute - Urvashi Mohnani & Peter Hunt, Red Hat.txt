Title: CRI-O: Development Process & How to Contribute - Urvashi Mohnani & Peter Hunt, Red Hat
Publication date: 2020-08-27
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

CRI-O: Development Process & How to Contribute - Urvashi Mohnani & Peter Hunt, Red Hat 

Are you interested in contributing to Cloud Native projects, or open source, but are unsure on where to start? The CRI-O community strives to be welcoming and accessible for new contributors, and would love your help! Urvashi Mohnani and Peter Hunt will dive into the basic workflow behind open source development, using CRI-O as an example. They will walk attendees through the entire process of contribution, including: finding a bug or feature to work on, submitting a PR, cooperating with the needs of CI/CD systems, the approval process, and having their work integrated downstream. After seeing this talk, budding community members should be ready to submit their first contribution to CRI-O.

https://sched.co/Zewa
Captions: 
	00:00:00,000 --> 00:00:03,280
hello everyone and welcome to our talk

00:00:02,080 --> 00:00:04,880
my name is peter hunt

00:00:03,280 --> 00:00:07,359
i'm a software engineer for red hat

00:00:04,880 --> 00:00:09,840
working on openshift i primarily

00:00:07,359 --> 00:00:10,639
focus my time on the project's cryo and

00:00:09,840 --> 00:00:12,559
pod man

00:00:10,639 --> 00:00:14,480
and con mon and other container related

00:00:12,559 --> 00:00:16,960
technologies

00:00:14,480 --> 00:00:18,640
hello everyone my name is urishi monani

00:00:16,960 --> 00:00:21,039
and i'm a senior software engineer on

00:00:18,640 --> 00:00:22,880
the openshift note team at red hat

00:00:21,039 --> 00:00:24,960
i mainly work on cryo and other

00:00:22,880 --> 00:00:27,199
container tools such as podman builder

00:00:24,960 --> 00:00:29,199
and scorpio

00:00:27,199 --> 00:00:32,960
today we're going to talk about how one

00:00:29,199 --> 00:00:34,559
can contribute to open source projects

00:00:32,960 --> 00:00:36,320
getting started with contributing to

00:00:34,559 --> 00:00:37,280
open source projects can be very

00:00:36,320 --> 00:00:39,040
difficult

00:00:37,280 --> 00:00:41,360
due to how many different projects there

00:00:39,040 --> 00:00:42,239
are and narrowing your scope down to the

00:00:41,360 --> 00:00:44,079
cncf

00:00:42,239 --> 00:00:46,160
doesn't really help that much either

00:00:44,079 --> 00:00:48,320
there's just so many

00:00:46,160 --> 00:00:51,440
so to make it easier for you today we'll

00:00:48,320 --> 00:00:54,079
show you how to contribute to cryo

00:00:51,440 --> 00:00:55,120
so what is cryo crime is a lightweight

00:00:54,079 --> 00:00:56,879
container engine

00:00:55,120 --> 00:00:59,280
focused on making kubernetes container

00:00:56,879 --> 00:01:01,280
deployments as secure and seamless as

00:00:59,280 --> 00:01:03,359
possible

00:01:01,280 --> 00:01:04,720
cryo implements the kubernetes container

00:01:03,359 --> 00:01:07,920
runtime interface

00:01:04,720 --> 00:01:09,920
hence the cri and cryo the o stands for

00:01:07,920 --> 00:01:12,159
open container initiative which means

00:01:09,920 --> 00:01:13,360
that cryo supports all osi compatible

00:01:12,159 --> 00:01:16,159
images as well as

00:01:13,360 --> 00:01:19,520
all oci compliant runtimes such as scada

00:01:16,159 --> 00:01:21,680
run c gvisor and xeron

00:01:19,520 --> 00:01:23,360
the cryo development process embodies

00:01:21,680 --> 00:01:24,960
the unix philosophy

00:01:23,360 --> 00:01:26,799
which states that you should design

00:01:24,960 --> 00:01:28,720
programs that do one thing

00:01:26,799 --> 00:01:30,400
to do it well and to work well with

00:01:28,720 --> 00:01:32,720
other programs

00:01:30,400 --> 00:01:34,240
to that end cry uses a number of

00:01:32,720 --> 00:01:36,079
components under the hood

00:01:34,240 --> 00:01:37,280
that focus on different areas of the

00:01:36,079 --> 00:01:39,600
container space

00:01:37,280 --> 00:01:41,759
such as storage image management and

00:01:39,600 --> 00:01:44,240
networking

00:01:41,759 --> 00:01:46,399
this way each building block of cryo can

00:01:44,240 --> 00:01:48,159
evolve at its own rate while cryo picks

00:01:46,399 --> 00:01:50,880
features that best supports kubernetes

00:01:48,159 --> 00:01:50,880
requirements

00:01:51,439 --> 00:01:54,880
we have other tools such as podman

00:01:53,600 --> 00:01:56,240
builda and scorpio

00:01:54,880 --> 00:01:58,719
that are built on top of the same

00:01:56,240 --> 00:02:00,240
components to address adjacent problems

00:01:58,719 --> 00:02:02,079
in the container space

00:02:00,240 --> 00:02:05,840
so even more open source container-based

00:02:02,079 --> 00:02:05,840
projects that you can all contribute to

00:02:06,159 --> 00:02:09,840
now let's look at the open source

00:02:07,439 --> 00:02:11,440
process so now that you have picked a

00:02:09,840 --> 00:02:14,000
project to work on

00:02:11,440 --> 00:02:15,040
the next step is to learn more about it

00:02:14,000 --> 00:02:17,200
you should start by

00:02:15,040 --> 00:02:20,480
always going through the readme as well

00:02:17,200 --> 00:02:22,720
as any contributing guidelines available

00:02:20,480 --> 00:02:24,160
then you should clone the repository and

00:02:22,720 --> 00:02:26,000
try playing around with the project in

00:02:24,160 --> 00:02:27,760
your own environment

00:02:26,000 --> 00:02:29,840
change some code around add some new

00:02:27,760 --> 00:02:31,920
test cases don't be afraid to break some

00:02:29,840 --> 00:02:33,680
things

00:02:31,920 --> 00:02:36,160
another good source of information on

00:02:33,680 --> 00:02:38,720
any project is blog posts or talks

00:02:36,160 --> 00:02:40,720
by the maintainers we really love

00:02:38,720 --> 00:02:43,360
talking about our babies

00:02:40,720 --> 00:02:44,800
in fact the cryo repository has a dock

00:02:43,360 --> 00:02:47,040
called awesome.md

00:02:44,800 --> 00:02:49,120
with the links to articles talks

00:02:47,040 --> 00:02:51,599
tutorials and just about anything cry

00:02:49,120 --> 00:02:53,120
related

00:02:51,599 --> 00:02:54,800
so now that you understand the project

00:02:53,120 --> 00:02:56,480
at a high level you have cloned the

00:02:54,800 --> 00:02:57,280
repository you've played around it with

00:02:56,480 --> 00:02:58,879
a bit

00:02:57,280 --> 00:03:00,480
the next step is to find something to

00:02:58,879 --> 00:03:02,640
work on

00:03:00,480 --> 00:03:04,000
all repositories have an issues page

00:03:02,640 --> 00:03:07,519
which has a list of tasks

00:03:04,000 --> 00:03:09,200
that need to be done these issues can

00:03:07,519 --> 00:03:10,239
broadly be broken up into two main

00:03:09,200 --> 00:03:13,440
categories

00:03:10,239 --> 00:03:16,159
bugs and features bugs are when the

00:03:13,440 --> 00:03:18,560
program doesn't behave as expected

00:03:16,159 --> 00:03:19,840
they are generally found when users test

00:03:18,560 --> 00:03:22,800
the project in the wild

00:03:19,840 --> 00:03:23,840
or in their production environments on

00:03:22,800 --> 00:03:25,840
the other hand

00:03:23,840 --> 00:03:28,080
features can be thought of as nice to

00:03:25,840 --> 00:03:30,000
have things that help make the project

00:03:28,080 --> 00:03:31,760
even better

00:03:30,000 --> 00:03:33,040
features are usually decided upon by

00:03:31,760 --> 00:03:35,200
community discussions

00:03:33,040 --> 00:03:37,680
through either issues or sick meeting

00:03:35,200 --> 00:03:37,680
meetings

00:03:38,239 --> 00:03:42,000
speaking of features here are some cool

00:03:40,560 --> 00:03:42,799
things we're working on for the near

00:03:42,000 --> 00:03:45,840
future

00:03:42,799 --> 00:03:47,519
that were precipitated by the community

00:03:45,840 --> 00:03:49,200
dropping the infra container which is

00:03:47,519 --> 00:03:51,120
not needed will improve the speed of

00:03:49,200 --> 00:03:53,280
containerized workloads

00:03:51,120 --> 00:03:55,200
we're also adding c groups v2 and user

00:03:53,280 --> 00:03:57,360
namespace support as well as increasing

00:03:55,200 --> 00:03:59,439
our unit test coverage

00:03:57,360 --> 00:04:00,640
other exciting work includes integration

00:03:59,439 --> 00:04:02,080
of lipboard with cryo

00:04:00,640 --> 00:04:04,000
and potentially moving some of our

00:04:02,080 --> 00:04:05,200
components over to rust to improve

00:04:04,000 --> 00:04:07,120
performance

00:04:05,200 --> 00:04:09,840
and everyone is welcome to contribute to

00:04:07,120 --> 00:04:09,840
these features

00:04:10,080 --> 00:04:14,000
now circling back to the issues page

00:04:12,480 --> 00:04:16,079
most repositories will have

00:04:14,000 --> 00:04:18,160
some variation of a good first issue

00:04:16,079 --> 00:04:20,160
label on their issues

00:04:18,160 --> 00:04:21,840
these labels highlight bugs or features

00:04:20,160 --> 00:04:23,280
that the maintainers have determined are

00:04:21,840 --> 00:04:25,440
of low difficulty

00:04:23,280 --> 00:04:27,759
so new contributors will easily be able

00:04:25,440 --> 00:04:29,199
to pick them up

00:04:27,759 --> 00:04:31,360
have built up your confidence and

00:04:29,199 --> 00:04:34,000
competence the next step is to look for

00:04:31,360 --> 00:04:35,600
issues that have help wanted on them

00:04:34,000 --> 00:04:37,440
these are issues that maintainers need

00:04:35,600 --> 00:04:40,880
help with and are actively looking for

00:04:37,440 --> 00:04:43,120
community contributors to assist on

00:04:40,880 --> 00:04:45,040
finally another useful task to build

00:04:43,120 --> 00:04:46,800
your familiarity with projects is fixing

00:04:45,040 --> 00:04:49,120
the documentation

00:04:46,800 --> 00:04:51,120
contrary to popular belief maintainers

00:04:49,120 --> 00:04:54,160
are not perfect and there will be

00:04:51,120 --> 00:04:56,000
typos and errors in most docs

00:04:54,160 --> 00:04:59,680
next we'll have peter walk us through a

00:04:56,000 --> 00:04:59,680
full workflow for contributing

00:04:59,840 --> 00:05:03,919
thanks dervishy hello again i'm now

00:05:02,720 --> 00:05:07,759
going to walk us through

00:05:03,919 --> 00:05:09,120
a demo of choosing an issue to work on

00:05:07,759 --> 00:05:10,880
submitting a pull request and then

00:05:09,120 --> 00:05:12,560
having that pull request merged

00:05:10,880 --> 00:05:14,479
i'm going to start off by trying to

00:05:12,560 --> 00:05:15,199
figure out find an issue that we want to

00:05:14,479 --> 00:05:19,520
work on

00:05:15,199 --> 00:05:19,520
so let's look at the cryo repository

00:05:21,039 --> 00:05:27,280
so we've got a bunch of issues here

00:05:24,639 --> 00:05:28,320
um but i think this one that i was

00:05:27,280 --> 00:05:31,199
originally on

00:05:28,320 --> 00:05:32,639
seems like a pretty good candidate

00:05:31,199 --> 00:05:34,960
readme is not confident enough i think

00:05:32,639 --> 00:05:38,320
it can make the readme more confident

00:05:34,960 --> 00:05:39,840
so i will decide this it's labeled the

00:05:38,320 --> 00:05:40,880
good first issue and i'm pretending to

00:05:39,840 --> 00:05:44,160
be a first time

00:05:40,880 --> 00:05:47,759
so i could say i can take this

00:05:44,160 --> 00:05:50,880
and maybe a uh

00:05:47,759 --> 00:05:50,880
maintainer would assign me

00:05:51,199 --> 00:05:55,520
so now that i've chosen an issue we have

00:05:53,919 --> 00:05:58,639
to now

00:05:55,520 --> 00:06:02,319
uh decide on we have we should probably

00:05:58,639 --> 00:06:05,039
read the contributing guidelines for how

00:06:02,319 --> 00:06:06,639
the project works so many projects have

00:06:05,039 --> 00:06:08,560
contributing guidelines

00:06:06,639 --> 00:06:09,919
in a contributing.md or some other file

00:06:08,560 --> 00:06:11,840
cryo is no different

00:06:09,919 --> 00:06:12,960
basically they talk about some

00:06:11,840 --> 00:06:15,680
guidelines to

00:06:12,960 --> 00:06:17,919
keep the style of your contribution in

00:06:15,680 --> 00:06:19,360
order with the rest of the contributions

00:06:17,919 --> 00:06:21,199
so a couple of specific things that

00:06:19,360 --> 00:06:22,880
crowd has you do

00:06:21,199 --> 00:06:25,440
uh it's kind of similar to the

00:06:22,880 --> 00:06:27,759
kubernetes guidelines for contributing

00:06:25,440 --> 00:06:28,800
we require you to sign off your commits

00:06:27,759 --> 00:06:32,080
which

00:06:28,800 --> 00:06:34,479
gives us an auditable log of all the

00:06:32,080 --> 00:06:36,720
contributions that allows us to thank

00:06:34,479 --> 00:06:40,080
people who make a good contribution and

00:06:36,720 --> 00:06:43,199
also follow up with people

00:06:40,080 --> 00:06:44,720
who have made contribution that there's

00:06:43,199 --> 00:06:48,080
an issue with

00:06:44,720 --> 00:06:49,199
we also require some other things like

00:06:48,080 --> 00:06:52,639
release notes or

00:06:49,199 --> 00:06:53,599
documentation uh which is for showing

00:06:52,639 --> 00:06:56,720
users some

00:06:53,599 --> 00:06:59,680
uh user-facing changes and

00:06:56,720 --> 00:07:00,160
we like when there are updates to the

00:06:59,680 --> 00:07:03,759
tests

00:07:00,160 --> 00:07:07,039
that if there's a code change to test

00:07:03,759 --> 00:07:10,639
to uh reveal uh regressions and also

00:07:07,039 --> 00:07:13,280
test your new behavior so

00:07:10,639 --> 00:07:15,039
now that we've uh you know kind of

00:07:13,280 --> 00:07:15,440
looked at the contribution guidelines

00:07:15,039 --> 00:07:18,479
let's

00:07:15,440 --> 00:07:21,039
go through the process of opening a pr

00:07:18,479 --> 00:07:21,840
so we're going to do um this is my git

00:07:21,039 --> 00:07:24,960
account

00:07:21,840 --> 00:07:28,240
i'm going to push it to origin read

00:07:24,960 --> 00:07:32,160
me confident

00:07:28,240 --> 00:07:35,680
so now that we've created the branch

00:07:32,160 --> 00:07:38,800
let's go and open a pull request

00:07:35,680 --> 00:07:38,800
compare and pull request

00:07:39,360 --> 00:07:44,400
so we're going to go from my fork

00:07:42,720 --> 00:07:46,080
to master and we're going to fill in

00:07:44,400 --> 00:07:48,560
some information here

00:07:46,080 --> 00:07:49,199
this the kind of this is documentation

00:07:48,560 --> 00:07:51,120
this is kind of

00:07:49,199 --> 00:07:54,160
crowd specific but it follows the form

00:07:51,120 --> 00:07:57,759
of kubernetes and many other projects

00:07:54,160 --> 00:08:00,400
you should be more confident

00:07:57,759 --> 00:08:01,199
we gotta talk about how we fix it so

00:08:00,400 --> 00:08:06,000
let's

00:08:01,199 --> 00:08:06,000
keep a ref to our uh issue

00:08:09,199 --> 00:08:18,720
fixes that and a release note

00:08:14,000 --> 00:08:18,720
made me more confident

00:08:19,120 --> 00:08:22,160
so now that we're creating this pull

00:08:20,479 --> 00:08:22,639
request we're going to notice a couple

00:08:22,160 --> 00:08:24,000
of things

00:08:22,639 --> 00:08:25,440
one is we get some reviewers

00:08:24,000 --> 00:08:26,400
automatically assigned to us and those

00:08:25,440 --> 00:08:27,440
are people that

00:08:26,400 --> 00:08:29,680
are maintainers and they'll come and

00:08:27,440 --> 00:08:31,599
review our code we'll talk about that a

00:08:29,680 --> 00:08:33,200
little bit more later and then we've got

00:08:31,599 --> 00:08:35,200
a bunch of tests that automatically

00:08:33,200 --> 00:08:37,200
start running and these

00:08:35,200 --> 00:08:38,399
tests uh theoretically should pass

00:08:37,200 --> 00:08:41,839
before

00:08:38,399 --> 00:08:45,360
we merge the code so let's

00:08:41,839 --> 00:08:46,959
now talk about the process for merging

00:08:45,360 --> 00:08:49,120
so i've put up my pr

00:08:46,959 --> 00:08:50,320
what has to happen before my pr gets

00:08:49,120 --> 00:08:53,279
merged

00:08:50,320 --> 00:08:55,600
so the cryo itself has some gaining

00:08:53,279 --> 00:08:58,959
criteria as every other project does

00:08:55,600 --> 00:09:01,279
before prs can get merged we have uh

00:08:58,959 --> 00:09:02,560
many different tiers of tests so we have

00:09:01,279 --> 00:09:05,600
the validation

00:09:02,560 --> 00:09:07,440
test which check doc updates

00:09:05,600 --> 00:09:10,000
make sure that the git commits are

00:09:07,440 --> 00:09:12,480
saying check for release notes

00:09:10,000 --> 00:09:13,839
uh and most of these uh tests are

00:09:12,480 --> 00:09:17,360
automated so

00:09:13,839 --> 00:09:18,800
or so we uh you know we

00:09:17,360 --> 00:09:20,839
a bot can just tell us when a

00:09:18,800 --> 00:09:23,519
contributor has not done something

00:09:20,839 --> 00:09:26,480
and then we have some unit tests which

00:09:23,519 --> 00:09:28,880
test some internals in cryo it's good

00:09:26,480 --> 00:09:30,560
for unit test coverage

00:09:28,880 --> 00:09:31,920
and then integration tests which test

00:09:30,560 --> 00:09:33,360
cryo with cry cuddle

00:09:31,920 --> 00:09:34,880
these are good for testing crowd

00:09:33,360 --> 00:09:36,560
specific features that aren't

00:09:34,880 --> 00:09:39,279
necessarily covered in the

00:09:36,560 --> 00:09:39,920
uh kubernetes and the end tests and then

00:09:39,279 --> 00:09:41,120
we have our

00:09:39,920 --> 00:09:43,600
end tests which are really the meat and

00:09:41,120 --> 00:09:45,920
potatoes of our testing suite and those

00:09:43,600 --> 00:09:47,279
cover uh kubernetes and openshift and

00:09:45,920 --> 00:09:49,120
then test to make sure that any change

00:09:47,279 --> 00:09:53,680
we make in cryo doesn't break

00:09:49,120 --> 00:09:55,760
the you know upstream compatibility

00:09:53,680 --> 00:09:57,279
and finally for a pr to get merged we

00:09:55,760 --> 00:10:00,399
need at least two look at

00:09:57,279 --> 00:10:02,399
me on a pr as well as we need a

00:10:00,399 --> 00:10:06,000
maintainer to approve it

00:10:02,399 --> 00:10:10,079
so i'm to show a an example

00:10:06,000 --> 00:10:13,279
of a pr that has all of these criteria

00:10:10,079 --> 00:10:16,800
so notice we have the

00:10:13,279 --> 00:10:18,720
approved label here and it has the hold

00:10:16,800 --> 00:10:21,680
but i gave it the hold so i'm gonna

00:10:18,720 --> 00:10:22,480
hold cancel and look good to me because

00:10:21,680 --> 00:10:25,839
we have

00:10:22,480 --> 00:10:29,279
one two

00:10:25,839 --> 00:10:30,720
uh people and i myself an improver and

00:10:29,279 --> 00:10:33,440
the person who sent it is also an

00:10:30,720 --> 00:10:35,040
approver so we're going to

00:10:33,440 --> 00:10:37,680
set this and it also has passed all the

00:10:35,040 --> 00:10:41,360
tests so we know it's a it's a good

00:10:37,680 --> 00:10:45,040
change so

00:10:41,360 --> 00:10:48,480
that's an example of moving from

00:10:45,040 --> 00:10:49,279
they a choosing an issue to tracking all

00:10:48,480 --> 00:10:51,440
the way through

00:10:49,279 --> 00:10:53,120
if we had actually merged this change

00:10:51,440 --> 00:10:55,920
which i don't think we will

00:10:53,120 --> 00:10:56,959
uh then it would automatically close

00:10:55,920 --> 00:11:00,160
this issue

00:10:56,959 --> 00:11:03,519
see it's linked here uh and

00:11:00,160 --> 00:11:03,519
but we won't do that today

00:11:03,680 --> 00:11:07,760
so finally the question would be how do

00:11:06,800 --> 00:11:11,040
we get our

00:11:07,760 --> 00:11:13,680
fixes into our distributions or

00:11:11,040 --> 00:11:14,160
you know downstream so in open source we

00:11:13,680 --> 00:11:15,600
have

00:11:14,160 --> 00:11:17,680
a flow that goes from upstream to

00:11:15,600 --> 00:11:20,560
downstream where upstream is like this

00:11:17,680 --> 00:11:22,320
github you know upstream master where we

00:11:20,560 --> 00:11:26,320
push all of the changes

00:11:22,320 --> 00:11:29,760
and uh then those changes are

00:11:26,320 --> 00:11:32,000
uh validated and verified and

00:11:29,760 --> 00:11:33,279
tested until they go downstream which

00:11:32,000 --> 00:11:34,399
when they're packaged for your

00:11:33,279 --> 00:11:38,320
distributions

00:11:34,399 --> 00:11:41,440
or your different uh you know kubernetes

00:11:38,320 --> 00:11:42,560
environments um cryo has an easy

00:11:41,440 --> 00:11:43,920
distinction between upstream and

00:11:42,560 --> 00:11:47,200
downstream upstream is

00:11:43,920 --> 00:11:50,079
uh git main or git master and that is

00:11:47,200 --> 00:11:51,760
the the the main branch where we do our

00:11:50,079 --> 00:11:53,360
development and then the downstream is

00:11:51,760 --> 00:11:55,200
all the release branches we have the

00:11:53,360 --> 00:11:58,079
release branches corresponding to

00:11:55,200 --> 00:12:00,000
kubernetes releases so our 118 would be

00:11:58,079 --> 00:12:01,600
our latest downstream release as of the

00:12:00,000 --> 00:12:04,240
time of recording this

00:12:01,600 --> 00:12:05,839
typically downstream only gets bug fixes

00:12:04,240 --> 00:12:06,320
uh because we want to keep downstream

00:12:05,839 --> 00:12:08,880
stable

00:12:06,320 --> 00:12:10,399
and not disturb current users of the

00:12:08,880 --> 00:12:13,200
downstream

00:12:10,399 --> 00:12:14,480
and then so if you uh give us a feature

00:12:13,200 --> 00:12:16,480
we're probably going to try to wait

00:12:14,480 --> 00:12:19,680
until next release to get it in

00:12:16,480 --> 00:12:22,800
um so that

00:12:19,680 --> 00:12:24,079
is the end of our talk thank you very

00:12:22,800 --> 00:12:26,399
much for coming

00:12:24,079 --> 00:12:27,760
uh we have a couple more resources here

00:12:26,399 --> 00:12:30,240
we have our website and

00:12:27,760 --> 00:12:31,360
a couple places we're always happy to

00:12:30,240 --> 00:12:33,360
please reach out if you have any

00:12:31,360 --> 00:12:35,680
questions we'd love your contributions

00:12:33,360 --> 00:12:37,519
i especially would like you to get rid

00:12:35,680 --> 00:12:38,480
of all of my bugs and fix all my typos

00:12:37,519 --> 00:12:39,760
in the readme

00:12:38,480 --> 00:12:41,600
thank you very much for coming are there

00:12:39,760 --> 00:12:43,760
any questions

00:12:41,600 --> 00:12:45,040
and most importantly we look forward to

00:12:43,760 --> 00:12:48,079
your contributions

00:12:45,040 --> 00:12:48,079

YouTube URL: https://www.youtube.com/watch?v=0MB5tUT4u3Q


