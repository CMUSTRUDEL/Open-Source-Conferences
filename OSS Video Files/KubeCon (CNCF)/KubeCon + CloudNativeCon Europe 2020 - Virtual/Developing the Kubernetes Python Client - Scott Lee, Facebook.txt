Title: Developing the Kubernetes Python Client - Scott Lee, Facebook
Publication date: 2020-08-27
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Donâ€™t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more atÂ https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Developing the Kubernetes Python Client - Scott Lee, Facebook 

The Kubernetes Python client allows users to programmatically interact with clusters using the Python language. With Python being one of the most popular programming languages, the Python client provides a way for those unfamiliar with Golang to still reap the benefits of a code interface to Kubernetes. This session will cover the repositories and resources that are used to generate the Python client and dive into examples of how the client is used.  This talk will also cover how to get involved as a contributor to the Python client by covering processes and resources.  Note: Brendan Burns gave a talk titled "!go, Interacting with and Extending Kubernetes in a Polyglot World" but it covered Kubernetes clients generally while this talk is specifically about the Kubernetes Python client and dives deeper into the nuances of the client and how to get involved as a contributor.

https://sched.co/ZetU
Captions: 
	00:00:00,000 --> 00:00:03,360
hey everyone my name is scott and in

00:00:02,000 --> 00:00:05,759
this presentation

00:00:03,360 --> 00:00:07,279
developing the kubernetes python client

00:00:05,759 --> 00:00:09,519
i'll be talking about how the python

00:00:07,279 --> 00:00:11,840
client is developed

00:00:09,519 --> 00:00:12,639
a little bit about myself i'm a systems

00:00:11,840 --> 00:00:14,639
engineer

00:00:12,639 --> 00:00:16,080
and the kubernetes python client is one

00:00:14,639 --> 00:00:18,880
of the areas in kubernetes

00:00:16,080 --> 00:00:20,560
i contribute to in my free time i've

00:00:18,880 --> 00:00:21,520
been involved with the python client for

00:00:20,560 --> 00:00:23,760
about a year now

00:00:21,520 --> 00:00:25,119
since last summer and i found it was a

00:00:23,760 --> 00:00:26,560
great way to start contributing to

00:00:25,119 --> 00:00:28,240
kubernetes

00:00:26,560 --> 00:00:30,000
at the time i wasn't comfortable with

00:00:28,240 --> 00:00:31,599
goaling so it was a good way

00:00:30,000 --> 00:00:34,239
to still contribute in a technical

00:00:31,599 --> 00:00:34,239
capacity

00:00:35,440 --> 00:00:39,040
the expectation for the viewers of this

00:00:37,120 --> 00:00:40,320
talk is to understand the primitives of

00:00:39,040 --> 00:00:42,079
kubernetes

00:00:40,320 --> 00:00:43,520
so you should know about and understand

00:00:42,079 --> 00:00:45,520
pods deployments

00:00:43,520 --> 00:00:46,879
and so forth and have at least some

00:00:45,520 --> 00:00:48,160
experience interacting with the

00:00:46,879 --> 00:00:51,840
kubernetes cluster

00:00:48,160 --> 00:00:53,840
through cube ctl also since the talk is

00:00:51,840 --> 00:00:56,840
about the kubernetes python client

00:00:53,840 --> 00:00:58,960
a basic understanding of python would be

00:00:56,840 --> 00:01:01,039
helpful

00:00:58,960 --> 00:01:02,879
in this talk i'll briefly go over some

00:01:01,039 --> 00:01:04,720
background about kubernetes

00:01:02,879 --> 00:01:06,479
discuss the available clients and why

00:01:04,720 --> 00:01:07,760
they're useful then i'll go through

00:01:06,479 --> 00:01:10,960
setup for examples

00:01:07,760 --> 00:01:12,000
as well as demo some examples and lastly

00:01:10,960 --> 00:01:14,560
i'll cover some github

00:01:12,000 --> 00:01:17,840
repos for the python kubernetes client

00:01:14,560 --> 00:01:17,840
as well as how you can contribute

00:01:18,960 --> 00:01:23,360
as you may already know kubernetes has a

00:01:21,439 --> 00:01:25,280
distributed architecture

00:01:23,360 --> 00:01:27,040
while there are many components the two

00:01:25,280 --> 00:01:28,400
components that are important for this

00:01:27,040 --> 00:01:30,799
talk are first

00:01:28,400 --> 00:01:32,079
the api server which is a part of the

00:01:30,799 --> 00:01:33,520
master node

00:01:32,079 --> 00:01:35,200
whether you're interacting with the

00:01:33,520 --> 00:01:38,000
cluster with cube ctl

00:01:35,200 --> 00:01:38,320
or another method such as curl commands

00:01:38,000 --> 00:01:41,680
all

00:01:38,320 --> 00:01:43,759
calls go through the api server second

00:01:41,680 --> 00:01:45,040
the cubelet which is found on every

00:01:43,759 --> 00:01:47,119
worker node

00:01:45,040 --> 00:01:49,759
all communications to a node go through

00:01:47,119 --> 00:01:49,759
the cubelet

00:01:50,560 --> 00:01:53,759
kubernetes has officially supported

00:01:52,880 --> 00:01:56,719
clients

00:01:53,759 --> 00:01:58,079
ranging from go and python to javascript

00:01:56,719 --> 00:01:59,920
and haskell

00:01:58,079 --> 00:02:02,240
officially supported clients are found

00:01:59,920 --> 00:02:05,439
in the kubernetes client repo

00:02:02,240 --> 00:02:06,079
are generated using open api and are

00:02:05,439 --> 00:02:08,720
supported

00:02:06,079 --> 00:02:10,479
by the kubernetes community there are

00:02:08,720 --> 00:02:11,039
also several unofficially supported

00:02:10,479 --> 00:02:13,840
clients

00:02:11,039 --> 00:02:14,640
for languages including closure lisp

00:02:13,840 --> 00:02:18,080
perl

00:02:14,640 --> 00:02:20,080
php ruby rust and scala

00:02:18,080 --> 00:02:21,120
the cool thing is you can generate your

00:02:20,080 --> 00:02:22,959
own client

00:02:21,120 --> 00:02:24,560
whether that's for learning purposes or

00:02:22,959 --> 00:02:27,280
just because you want to add features

00:02:24,560 --> 00:02:28,879
that are specific for your use cases

00:02:27,280 --> 00:02:31,280
i'll talk more about how that is done

00:02:28,879 --> 00:02:33,040
later in this talk

00:02:31,280 --> 00:02:34,959
let's take a step back and talk about

00:02:33,040 --> 00:02:36,239
what clients are and why you would use

00:02:34,959 --> 00:02:38,000
them

00:02:36,239 --> 00:02:40,080
clients allow you to programmatically

00:02:38,000 --> 00:02:41,680
interact with cluster

00:02:40,080 --> 00:02:43,760
while you can string together a whole

00:02:41,680 --> 00:02:44,720
bunch of cube ctl commands by writing a

00:02:43,760 --> 00:02:47,760
bash script

00:02:44,720 --> 00:02:49,519
this can easily become inflexible

00:02:47,760 --> 00:02:51,360
one thing you can do with the client is

00:02:49,519 --> 00:02:52,319
to watch for events and then take an

00:02:51,360 --> 00:02:54,400
action

00:02:52,319 --> 00:02:56,239
for instance if the amount of space

00:02:54,400 --> 00:02:56,959
being used by persistent volumes in your

00:02:56,239 --> 00:02:59,440
cluster

00:02:56,959 --> 00:03:00,319
reaches a certain size or limit you can

00:02:59,440 --> 00:03:03,519
send an alert

00:03:00,319 --> 00:03:05,440
to a slack channel or someone tries to

00:03:03,519 --> 00:03:07,440
create a pod with an image version that

00:03:05,440 --> 00:03:08,959
is known to have a vulnerability

00:03:07,440 --> 00:03:11,599
you can have the cluster destroy it

00:03:08,959 --> 00:03:11,599
automatically

00:03:12,319 --> 00:03:15,760
with python being one of the most

00:03:13,760 --> 00:03:17,599
popular programming languages

00:03:15,760 --> 00:03:19,440
the python client provides a way for

00:03:17,599 --> 00:03:21,200
those who are unfamiliar with goaling

00:03:19,440 --> 00:03:23,360
to still reap the benefits of an

00:03:21,200 --> 00:03:25,840
interface to kubernetes

00:03:23,360 --> 00:03:26,640
to get started all you have to do is run

00:03:25,840 --> 00:03:29,440
pip install

00:03:26,640 --> 00:03:29,440
kubernetes

00:03:30,239 --> 00:03:34,799
once you have the kubernetes python

00:03:31,760 --> 00:03:37,280
package installed you'll need a cluster

00:03:34,799 --> 00:03:38,720
there are several options you can take

00:03:37,280 --> 00:03:41,440
you can use a managed cluster

00:03:38,720 --> 00:03:44,239
like gke from google cloud platform or

00:03:41,440 --> 00:03:46,560
eks from amazon web services

00:03:44,239 --> 00:03:48,159
the downside being it costs money unless

00:03:46,560 --> 00:03:50,319
you have credits

00:03:48,159 --> 00:03:52,080
you can also run a self-managed cluster

00:03:50,319 --> 00:03:53,920
using something like cube adm

00:03:52,080 --> 00:03:57,200
but this also costs money unless you

00:03:53,920 --> 00:03:59,519
have credits and ends up being more work

00:03:57,200 --> 00:04:01,760
another option which is free is to run a

00:03:59,519 --> 00:04:04,239
local cluster on your computer

00:04:01,760 --> 00:04:05,280
two options are minicube which uses

00:04:04,239 --> 00:04:08,959
virtualbox

00:04:05,280 --> 00:04:08,959
and kind which uses docker

00:04:09,120 --> 00:04:13,360
i'll be using kind to show some examples

00:04:11,280 --> 00:04:15,200
of how to use the python client

00:04:13,360 --> 00:04:16,400
i won't go through the setup for kind

00:04:15,200 --> 00:04:18,639
but if you're using a mac

00:04:16,400 --> 00:04:19,519
you can use the brew package manager and

00:04:18,639 --> 00:04:22,720
run brew

00:04:19,519 --> 00:04:23,680
install kind then you can run kind

00:04:22,720 --> 00:04:25,440
create cluster

00:04:23,680 --> 00:04:29,840
as shown on the screen and it will

00:04:25,440 --> 00:04:31,680
create a kubernetes cluster

00:04:29,840 --> 00:04:33,120
the first example is the equivalent of

00:04:31,680 --> 00:04:37,520
running cube ctl

00:04:33,120 --> 00:04:40,080
git pods dash dash all dash namespaces

00:04:37,520 --> 00:04:43,680
it lists all paws across all name spaces

00:04:40,080 --> 00:04:44,400
in a cluster the config.loadcubeconfig

00:04:43,680 --> 00:04:46,479
line

00:04:44,400 --> 00:04:48,479
loads the cubeconfig file found in your

00:04:46,479 --> 00:04:51,040
dot cube directory

00:04:48,479 --> 00:04:53,199
then it uses the core v1 api to list

00:04:51,040 --> 00:04:56,240
pods for all namespaces

00:04:53,199 --> 00:04:58,080
just as the method name says this

00:04:56,240 --> 00:04:58,880
returns a list of objects that have

00:04:58,080 --> 00:05:02,080
properties

00:04:58,880 --> 00:05:04,800
like status or metadata

00:05:02,080 --> 00:05:06,240
when i run the script you can see for

00:05:04,800 --> 00:05:08,720
every pod in my cluster

00:05:06,240 --> 00:05:10,320
it will output the pod's ip address the

00:05:08,720 --> 00:05:13,520
namespace it exists in

00:05:10,320 --> 00:05:14,400
and the name of the pod the thing to

00:05:13,520 --> 00:05:15,919
note here

00:05:14,400 --> 00:05:17,919
is that this script was called from

00:05:15,919 --> 00:05:20,000
outside of the cluster

00:05:17,919 --> 00:05:21,280
when i read the script it made calls to

00:05:20,000 --> 00:05:24,080
the kind cluster

00:05:21,280 --> 00:05:24,800
and the kind cluster returned data this

00:05:24,080 --> 00:05:27,039
is important

00:05:24,800 --> 00:05:29,600
because in the next example the script

00:05:27,039 --> 00:05:31,759
is called from within the cluster

00:05:29,600 --> 00:05:33,360
this script is almost exactly the same

00:05:31,759 --> 00:05:35,680
as a previous script

00:05:33,360 --> 00:05:37,360
it lists pods across all name spaces in

00:05:35,680 --> 00:05:40,320
the cluster

00:05:37,360 --> 00:05:42,240
the difference is the config.load in

00:05:40,320 --> 00:05:44,000
cluster config line

00:05:42,240 --> 00:05:45,759
this script needs to be called from a

00:05:44,000 --> 00:05:46,800
container running within a kubernetes

00:05:45,759 --> 00:05:48,639
cluster

00:05:46,800 --> 00:05:49,840
so instead of executing the file and

00:05:48,639 --> 00:05:51,759
getting a result

00:05:49,840 --> 00:05:52,880
i would need to create a docker file and

00:05:51,759 --> 00:05:56,479
a pod manifest

00:05:52,880 --> 00:05:58,960
to run the script within the cluster

00:05:56,479 --> 00:06:01,440
this is the docker file i will be using

00:05:58,960 --> 00:06:03,360
it uses the python alpine image

00:06:01,440 --> 00:06:04,800
copies the script installs the

00:06:03,360 --> 00:06:07,840
kubernetes package

00:06:04,800 --> 00:06:07,840
and runs a script

00:06:12,800 --> 00:06:21,840
here i'm applying the manifest and then

00:06:15,199 --> 00:06:21,840
i'll check the locks

00:06:25,759 --> 00:06:29,280
you can see it's listing all the pods

00:06:27,440 --> 00:06:30,880
within the cluster which is pretty much

00:06:29,280 --> 00:06:32,800
what the last example did

00:06:30,880 --> 00:06:35,840
the difference being it's now running

00:06:32,800 --> 00:06:35,840
within the cluster

00:06:37,120 --> 00:06:40,400
this grip creates a deployment it opens

00:06:39,520 --> 00:06:43,520
a file called

00:06:40,400 --> 00:06:44,160
nginx deployment.yaml and uses the

00:06:43,520 --> 00:06:45,840
contents

00:06:44,160 --> 00:06:49,919
to create a deployment in the default

00:06:45,840 --> 00:06:52,319
namespace using the apps v1 api

00:06:49,919 --> 00:06:53,440
it's equivalent of running cube ctl

00:06:52,319 --> 00:06:57,440
create

00:06:53,440 --> 00:06:59,919
dash f nginx deployment.yaml

00:06:57,440 --> 00:07:02,000
this is a yaml file that will be used it

00:06:59,919 --> 00:07:04,560
launches three replicas of pods running

00:07:02,000 --> 00:07:04,560
nginx

00:07:05,680 --> 00:07:10,000
once i run the script it will create the

00:07:07,520 --> 00:07:10,000
deployment

00:07:12,639 --> 00:07:17,840
if i check the deployments you'll see

00:07:14,240 --> 00:07:17,840
that the deployment has been created

00:07:20,479 --> 00:07:24,240
and you can see the three replicas of

00:07:22,160 --> 00:07:25,759
the deployment within the listing of the

00:07:24,240 --> 00:07:28,400
pods

00:07:25,759 --> 00:07:31,840
in this last example the script uses the

00:07:28,400 --> 00:07:35,440
core v1 api to add a label with key foo

00:07:31,840 --> 00:07:35,440
and value bar to a node

00:07:38,000 --> 00:07:42,639
before i run the script i want to show

00:07:40,080 --> 00:07:45,840
you that there's no labels with kia foo

00:07:42,639 --> 00:07:45,840
on any of the nodes in the cluster

00:07:51,039 --> 00:07:54,879
now i'll run the script which will apply

00:07:52,879 --> 00:07:56,479
the labels

00:07:54,879 --> 00:07:58,639
and if i get the labels on the nodes

00:07:56,479 --> 00:08:01,599
again you can see

00:07:58,639 --> 00:08:02,800
there's a custom label with key of foo

00:08:01,599 --> 00:08:04,960
and value of bar

00:08:02,800 --> 00:08:06,800
if you want to see more examples you can

00:08:04,960 --> 00:08:09,039
find them in the kubernetes client

00:08:06,800 --> 00:08:11,520
python repo

00:08:09,039 --> 00:08:13,520
there's an examples folder that contains

00:08:11,520 --> 00:08:16,560
the code of examples i covered

00:08:13,520 --> 00:08:18,960
and several others there's also a docs

00:08:16,560 --> 00:08:23,280
directory under the kubernetes slash

00:08:18,960 --> 00:08:23,280
docs folder within the python repo

00:08:24,960 --> 00:08:31,520
for example the apps v1 api

00:08:29,120 --> 00:08:34,719
lists the available methods that you can

00:08:31,520 --> 00:08:37,279
call with the python client

00:08:34,719 --> 00:08:39,599
and most methods like the create

00:08:37,279 --> 00:08:43,680
namespace deployment method

00:08:39,599 --> 00:08:47,279
have examples parameters

00:08:43,680 --> 00:08:48,640
and return types there's also generated

00:08:47,279 --> 00:08:52,399
reference documentation

00:08:48,640 --> 00:08:54,959
on the kubernetes.i o website in fact

00:08:52,399 --> 00:08:56,720
we can find the same api for the create

00:08:54,959 --> 00:09:01,279
namespace deployment method

00:08:56,720 --> 00:09:04,560
by going to deployment v1 apps

00:09:01,279 --> 00:09:07,839
write operations and create

00:09:04,560 --> 00:09:08,640
here you can see that the http request

00:09:07,839 --> 00:09:12,560
path

00:09:08,640 --> 00:09:15,440
apis apps v1 namespaces

00:09:12,560 --> 00:09:18,320
namespace parameter deployments matches

00:09:15,440 --> 00:09:21,519
what we saw earlier

00:09:18,320 --> 00:09:23,839
so if we go back to the top see that

00:09:21,519 --> 00:09:25,440
create namespace deployments also has a

00:09:23,839 --> 00:09:29,360
path of apis

00:09:25,440 --> 00:09:36,320
apps v1 namespaces namespace parameter

00:09:29,360 --> 00:09:38,080
and deployments

00:09:36,320 --> 00:09:41,200
there's also lots of other useful

00:09:38,080 --> 00:09:44,560
information in this api documentation

00:09:41,200 --> 00:09:46,160
so please take a look earlier

00:09:44,560 --> 00:09:48,240
i mentioned that you can generate your

00:09:46,160 --> 00:09:50,399
own kubernetes client

00:09:48,240 --> 00:09:52,399
this is possible through the kubernetes

00:09:50,399 --> 00:09:55,040
client gen repo

00:09:52,399 --> 00:09:57,120
which uses the open api generator and

00:09:55,040 --> 00:09:57,600
custom generator scripts that are shared

00:09:57,120 --> 00:10:00,800
among

00:09:57,600 --> 00:10:01,600
all the client libraries the readme does

00:10:00,800 --> 00:10:03,760
a good job

00:10:01,600 --> 00:10:04,800
describing how to use the scripts and

00:10:03,760 --> 00:10:07,920
you'll find the scripts

00:10:04,800 --> 00:10:10,320
in the open api folder

00:10:07,920 --> 00:10:13,760
for example here's the script that

00:10:10,320 --> 00:10:13,760
generates the python client

00:10:16,839 --> 00:10:20,720
python.shell

00:10:18,320 --> 00:10:23,440
next i'll talk about the repositories

00:10:20,720 --> 00:10:25,519
specific to the python client

00:10:23,440 --> 00:10:28,640
python client is one of the few official

00:10:25,519 --> 00:10:32,720
clients that is split into two repos

00:10:28,640 --> 00:10:34,800
python and python base the python repo

00:10:32,720 --> 00:10:36,560
is basically the output of the generator

00:10:34,800 --> 00:10:38,079
script python.shell

00:10:36,560 --> 00:10:40,079
from the gen repo that i showed you

00:10:38,079 --> 00:10:42,240
earlier of course

00:10:40,079 --> 00:10:44,000
there's more to it but if you explore

00:10:42,240 --> 00:10:47,839
the repo you'll see that a lot of the

00:10:44,000 --> 00:10:47,839
files are generated

00:10:48,640 --> 00:10:52,320
for example if we go to kubernetes

00:10:51,200 --> 00:10:55,120
client

00:10:52,320 --> 00:10:57,200
and then api client you'll see that

00:10:55,120 --> 00:10:59,200
there's a comment at the top

00:10:57,200 --> 00:11:01,839
that specifies that this file is

00:10:59,200 --> 00:11:01,839
generated

00:11:02,240 --> 00:11:06,160
watch out for these generated files

00:11:04,320 --> 00:11:07,120
especially if you plan on contributing a

00:11:06,160 --> 00:11:08,640
change

00:11:07,120 --> 00:11:10,320
there's no point in trying to change a

00:11:08,640 --> 00:11:13,120
file that was generated

00:11:10,320 --> 00:11:13,760
as it will just get overwritten later in

00:11:13,120 --> 00:11:15,839
general

00:11:13,760 --> 00:11:17,440
it's always a good idea to open an issue

00:11:15,839 --> 00:11:18,959
before making a pr

00:11:17,440 --> 00:11:20,480
so you can describe what change you want

00:11:18,959 --> 00:11:22,240
to make and why

00:11:20,480 --> 00:11:25,040
and more experienced contributors can

00:11:22,240 --> 00:11:25,040
give you feedback

00:11:27,440 --> 00:11:30,800
the python based repo contains

00:11:29,279 --> 00:11:33,920
hand-tuned pieces of code

00:11:30,800 --> 00:11:36,000
that are not in the standard restful api

00:11:33,920 --> 00:11:38,160
this code is not auto-generated by the

00:11:36,000 --> 00:11:40,560
scripts in the generic

00:11:38,160 --> 00:11:41,600
code in the python base repo is added to

00:11:40,560 --> 00:11:46,320
the python repo

00:11:41,600 --> 00:11:51,040
using git sub modules here you see

00:11:46,320 --> 00:11:56,959
config hack stream and watch

00:11:51,040 --> 00:11:59,040
if we go back to the python repo

00:11:56,959 --> 00:12:00,240
you'll see that there's the same

00:11:59,040 --> 00:12:04,959
reference files

00:12:00,240 --> 00:12:04,959
config dynamic stream and watch

00:12:07,279 --> 00:12:11,600
for builds and tests the client repos

00:12:09,680 --> 00:12:13,920
use circle ci

00:12:11,600 --> 00:12:15,360
you'll typically see a tool called prow

00:12:13,920 --> 00:12:17,600
being used for other parts of the

00:12:15,360 --> 00:12:19,440
kubernetes ecosystem

00:12:17,600 --> 00:12:21,360
the reason that the client repos don't

00:12:19,440 --> 00:12:23,440
use prow is most likely because the

00:12:21,360 --> 00:12:24,720
client projects were started before prow

00:12:23,440 --> 00:12:26,720
was available

00:12:24,720 --> 00:12:28,480
but circle ci continues to serve the

00:12:26,720 --> 00:12:32,160
client repository well

00:12:28,480 --> 00:12:32,160
so there's no reason to move off of it

00:12:33,200 --> 00:12:38,240
the release versioning also works a bit

00:12:35,040 --> 00:12:40,320
differently so i'll explain that here

00:12:38,240 --> 00:12:43,519
python client major release versions

00:12:40,320 --> 00:12:46,160
correspond to kubernetes minor releases

00:12:43,519 --> 00:12:47,440
so python client 10 maps to kubernetes

00:12:46,160 --> 00:12:50,839
1.14

00:12:47,440 --> 00:12:53,839
and python client 11 maps to kubernetes

00:12:50,839 --> 00:12:53,839
1.15.

00:12:54,959 --> 00:12:59,360
like kubernetes though the python client

00:12:57,360 --> 00:13:00,480
supports the last two releases of

00:12:59,360 --> 00:13:02,560
kubernetes

00:13:00,480 --> 00:13:04,399
so python client 11 will support

00:13:02,560 --> 00:13:09,920
kubernetes 1.15

00:13:04,399 --> 00:13:09,920
as well as versions 1.14 and 1.13

00:13:10,639 --> 00:13:14,240
if you're interested in contributing to

00:13:12,240 --> 00:13:15,760
the python client or any of the other

00:13:14,240 --> 00:13:18,160
officially supported clients

00:13:15,760 --> 00:13:20,240
we'd love your help some of the types of

00:13:18,160 --> 00:13:24,000
work open source contributors can do

00:13:20,240 --> 00:13:27,920
include documentation issue triage

00:13:24,000 --> 00:13:30,320
releases bug fixes feature development

00:13:27,920 --> 00:13:32,160
and increasing test coverage for the

00:13:30,320 --> 00:13:34,720
python client specifically

00:13:32,160 --> 00:13:36,959
some cool features we'd like to see are

00:13:34,720 --> 00:13:40,480
type hinting with mypi

00:13:36,959 --> 00:13:42,320
and creating more release automation

00:13:40,480 --> 00:13:44,000
we have bi-weekly meetings on monday

00:13:42,320 --> 00:13:46,160
mornings

00:13:44,000 --> 00:13:48,959
for more information visit this lock

00:13:46,160 --> 00:13:51,360
channel kubernetes dash client

00:13:48,959 --> 00:13:52,880
and that's the end of my presentation i

00:13:51,360 --> 00:13:55,199
hope i've been able to shed some light

00:13:52,880 --> 00:13:56,399
in how the python client works

00:13:55,199 --> 00:14:00,399
i look forward to seeing people

00:13:56,399 --> 00:14:00,399

YouTube URL: https://www.youtube.com/watch?v=HRN3mWymA34


