Title: Running K3s, Lightweight Kubernetes, in Production for the Edge & Beyond - Darren Shepherd, Rancher
Publication date: 2020-08-28
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Running K3s, Lightweight Kubernetes, in Production for the Edge and Beyond - Darren Shepherd, Rancher 

Within the short year since announcing k3s, the CNCF certified lightweight Kubernetes distribution, users have quickly put k3s into production in edge, on-premises, cloud, and pipeline use cases. In this presentation Darren Shepherd, the creator of k3s, will cover different strategies of running k3s and how they map to different use cases. Use cases range from thousands of clusters on the edge, to fast ephemeral clusters to power your pipeline, to running AI workloads, and much more.

https://sched.co/Zeo7
Captions: 
	00:00:00,320 --> 00:00:06,399
all right uh welcome everyone this is a

00:00:03,600 --> 00:00:09,120
running k3s lightweight kubernetes in

00:00:06,399 --> 00:00:12,000
production for the edge and beyond

00:00:09,120 --> 00:00:13,440
um sorry it's a really bad title i'm not

00:00:12,000 --> 00:00:16,720
exactly sure what i was thinking

00:00:13,440 --> 00:00:19,199
when i proposed that one um but yeah

00:00:16,720 --> 00:00:20,240
um kind of excited to be doing this it's

00:00:19,199 --> 00:00:23,199
a little awkward

00:00:20,240 --> 00:00:23,920
um i'm just gonna like just go like one

00:00:23,199 --> 00:00:26,160
straight

00:00:23,920 --> 00:00:27,760
cut like no editing or whatever try to

00:00:26,160 --> 00:00:30,640
keep this authentic so

00:00:27,760 --> 00:00:31,599
i'll probably say some stupid things um

00:00:30,640 --> 00:00:34,239
yeah

00:00:31,599 --> 00:00:35,120
should be fun um welcome to my home

00:00:34,239 --> 00:00:36,960
office

00:00:35,120 --> 00:00:38,960
you might be thinking to yourself like

00:00:36,960 --> 00:00:40,879
hey that kind of looks like a closet

00:00:38,960 --> 00:00:42,399
um i'd like to refer you to the sign my

00:00:40,879 --> 00:00:44,960
daughter made it says

00:00:42,399 --> 00:00:45,840
this is my office so uh it's clearly not

00:00:44,960 --> 00:00:48,239
a closet

00:00:45,840 --> 00:00:49,200
this is my home office all right so

00:00:48,239 --> 00:00:51,520
let's get going

00:00:49,200 --> 00:00:52,800
um let's go to the first slide here so

00:00:51,520 --> 00:00:53,760
just um

00:00:52,800 --> 00:00:56,960
what i'm gonna do i'm gonna start off

00:00:53,760 --> 00:00:59,039
and do a quick overview of k3s i mean

00:00:56,960 --> 00:01:01,359
this is only 25 minutes so it's

00:00:59,039 --> 00:01:04,479
i can't go super deep on really anything

00:01:01,359 --> 00:01:08,240
i did a talk on k3s

00:01:04,479 --> 00:01:10,560
uh kubecon uh north america 2019.

00:01:08,240 --> 00:01:12,320
um you know that was the last uh kubecon

00:01:10,560 --> 00:01:13,600
so you know that was roughly three years

00:01:12,320 --> 00:01:17,439
ago or something

00:01:13,600 --> 00:01:21,119
um so i did talk on k3s there

00:01:17,439 --> 00:01:24,159
that was um pretty much a deep dive

00:01:21,119 --> 00:01:25,520
into what k3s is so i'd really refer you

00:01:24,159 --> 00:01:27,280
to that talk and you'll get a lot of the

00:01:25,520 --> 00:01:29,119
technical details of what k3s

00:01:27,280 --> 00:01:30,560
is i'm just going to go over just a high

00:01:29,119 --> 00:01:31,600
level just kind of understand what the

00:01:30,560 --> 00:01:33,360
goals are and everything

00:01:31,600 --> 00:01:35,360
and talk about some pointers about about

00:01:33,360 --> 00:01:36,320
the project um and then specifically

00:01:35,360 --> 00:01:37,759
with this talk is i'm going to go into

00:01:36,320 --> 00:01:38,720
these three use cases and these are use

00:01:37,759 --> 00:01:41,520
cases where

00:01:38,720 --> 00:01:42,560
k3s you know kind of shines and people

00:01:41,520 --> 00:01:44,079
have had good success

00:01:42,560 --> 00:01:45,759
running k3s and these different things

00:01:44,079 --> 00:01:48,320
and and just you know kind of point out

00:01:45,759 --> 00:01:49,840
how people are doing this uh you know

00:01:48,320 --> 00:01:51,840
what are the

00:01:49,840 --> 00:01:53,280
i don't know what kind of pros and cons

00:01:51,840 --> 00:01:55,600
or gotchas or whatever

00:01:53,280 --> 00:01:58,159
um so we'll talk about edge app cluster

00:01:55,600 --> 00:01:59,200
um or application clusters i'll explain

00:01:58,159 --> 00:02:00,799
that more when you get to it

00:01:59,200 --> 00:02:03,920
and then kind of how people are fitting

00:02:00,799 --> 00:02:03,920
k3s in the pipeline

00:02:04,159 --> 00:02:07,360
okay so before i get started just a

00:02:06,240 --> 00:02:10,160
little bit about me

00:02:07,360 --> 00:02:11,840
so i am darren shepard i'm cto and

00:02:10,160 --> 00:02:15,599
co-founder of rancher labs

00:02:11,840 --> 00:02:17,040
um i build the cloud on twitter um

00:02:15,599 --> 00:02:19,040
if you ever want to get a hold of me or

00:02:17,040 --> 00:02:20,319
talk to me or anything

00:02:19,040 --> 00:02:22,560
twitter is really the only thing i ever

00:02:20,319 --> 00:02:25,120
really respond to um

00:02:22,560 --> 00:02:26,000
so you can dm me there that's that's

00:02:25,120 --> 00:02:27,520
totally fine

00:02:26,000 --> 00:02:29,520
or you can follow me i just complained

00:02:27,520 --> 00:02:32,000
about everything um

00:02:29,520 --> 00:02:33,519
uh so basically i'm i created k3s and

00:02:32,000 --> 00:02:35,440
some other rancher projects

00:02:33,519 --> 00:02:36,720
uh but k3s kind of like my that's kind

00:02:35,440 --> 00:02:38,959
of like my

00:02:36,720 --> 00:02:40,400
my baby or something but basically i've

00:02:38,959 --> 00:02:41,200
been doing cloud orchestration for quite

00:02:40,400 --> 00:02:44,319
a while

00:02:41,200 --> 00:02:47,680
um so before containers it was like

00:02:44,319 --> 00:02:48,959
uh virtual machines and stuff is

00:02:47,680 --> 00:02:51,280
called stack openstack that kind of

00:02:48,959 --> 00:02:53,920
world and then before that um

00:02:51,280 --> 00:02:57,040
you know different forms of bare metal

00:02:53,920 --> 00:02:59,120
and virtualization and stuff like that

00:02:57,040 --> 00:03:00,239
okay so one thing i wanted to call out

00:02:59,120 --> 00:03:03,440
is um

00:03:00,239 --> 00:03:06,480
as of as as of when this

00:03:03,440 --> 00:03:07,200
session has been recorded or doesn't

00:03:06,480 --> 00:03:11,040
make sense

00:03:07,200 --> 00:03:13,680
as of today my time not your time um

00:03:11,040 --> 00:03:14,560
we just k3s was just voted through to be

00:03:13,680 --> 00:03:17,760
accepted as a

00:03:14,560 --> 00:03:18,000
as a cncf sandbox project so we're going

00:03:17,760 --> 00:03:21,760
through

00:03:18,000 --> 00:03:25,519
that process of getting k3s

00:03:21,760 --> 00:03:27,040
into cncf as a sandbox prod project

00:03:25,519 --> 00:03:28,959
and then you know as quickly as we can

00:03:27,040 --> 00:03:29,840
we'll graduate through we're really

00:03:28,959 --> 00:03:31,599
excited about this

00:03:29,840 --> 00:03:32,959
i mean k3s is really not that all of a

00:03:31,599 --> 00:03:35,120
project it's only like

00:03:32,959 --> 00:03:36,400
i don't know a year and a half or so

00:03:35,120 --> 00:03:39,519
it's less than two years

00:03:36,400 --> 00:03:40,799
old um but it's growing so fast it's

00:03:39,519 --> 00:03:42,319
getting so many users

00:03:40,799 --> 00:03:44,159
uh this is just kind of the next logical

00:03:42,319 --> 00:03:45,920
step of moving it to a foundation

00:03:44,159 --> 00:03:47,840
trying to get more collaboration from

00:03:45,920 --> 00:03:50,239
more people in the industry

00:03:47,840 --> 00:03:51,680
um it's just kind of a win-win situation

00:03:50,239 --> 00:03:52,319
uh so we're really excited about that

00:03:51,680 --> 00:03:54,319
just

00:03:52,319 --> 00:03:56,159
you know kind of like our little project

00:03:54,319 --> 00:03:56,799
has grown up into something really quite

00:03:56,159 --> 00:03:58,959
big

00:03:56,799 --> 00:03:59,840
um and it's really used by quite quite a

00:03:58,959 --> 00:04:01,920
few people um

00:03:59,840 --> 00:04:04,799
i mean lots lots i mean it's quite

00:04:01,920 --> 00:04:08,159
amazing so i'm pretty excited about that

00:04:04,799 --> 00:04:12,400
okay um so let's talk about first what

00:04:08,159 --> 00:04:14,799
is k3s um so it's lightweight kubernetes

00:04:12,400 --> 00:04:16,479
that's like a primary purpose most of

00:04:14,799 --> 00:04:17,680
the decisions and stuff that we do like

00:04:16,479 --> 00:04:20,000
what we do in kubernetes

00:04:17,680 --> 00:04:20,880
like components we package or what we

00:04:20,000 --> 00:04:23,040
like

00:04:20,880 --> 00:04:25,120
uh you know the approaches we take is

00:04:23,040 --> 00:04:28,240
really focused on a lightweight

00:04:25,120 --> 00:04:30,160
resource constrained environment um

00:04:28,240 --> 00:04:31,840
so we you know tend to pick lighter

00:04:30,160 --> 00:04:33,199
weight components or

00:04:31,840 --> 00:04:34,400
you know maybe they're ones that are

00:04:33,199 --> 00:04:35,600
going to scale massively fire or

00:04:34,400 --> 00:04:36,000
something because that's not our use

00:04:35,600 --> 00:04:38,960
case

00:04:36,000 --> 00:04:40,720
so we do focus in on this so um the

00:04:38,960 --> 00:04:41,199
binary is very small like k through

00:04:40,720 --> 00:04:44,560
specs

00:04:41,199 --> 00:04:46,320
is a single binary um the memory size is

00:04:44,560 --> 00:04:48,400
you know kind of like the initial memory

00:04:46,320 --> 00:04:50,639
footprint of k3s it's probably like

00:04:48,400 --> 00:04:52,000
half the size of kubernetes in general

00:04:50,639 --> 00:04:53,040
you can see this really easily if you

00:04:52,000 --> 00:04:56,160
just like run

00:04:53,040 --> 00:04:58,080
um k3s versus like kind

00:04:56,160 --> 00:05:00,080
kind is like more of the traditional

00:04:58,080 --> 00:05:01,120
upstream model running everything

00:05:00,080 --> 00:05:03,120
you know it's going to take up like

00:05:01,120 --> 00:05:06,000
twice as much memory this is just the

00:05:03,120 --> 00:05:08,560
way we package it and stuff

00:05:06,000 --> 00:05:10,160
basically k3s is perfect for the edge it

00:05:08,560 --> 00:05:11,840
really lines up really well with the

00:05:10,160 --> 00:05:13,680
edge use cases

00:05:11,840 --> 00:05:15,120
but really in practice it's used just

00:05:13,680 --> 00:05:17,280
about everywhere uh

00:05:15,120 --> 00:05:18,160
it's like it's really super popular like

00:05:17,280 --> 00:05:20,560
in devon test

00:05:18,160 --> 00:05:22,000
it's taken up a lot in those areas but

00:05:20,560 --> 00:05:23,440
also people are even running at cloud

00:05:22,000 --> 00:05:25,680
data center

00:05:23,440 --> 00:05:28,000
a lot of just random use cases that like

00:05:25,680 --> 00:05:31,039
kind of fill in gaps

00:05:28,000 --> 00:05:32,560
that um the kind of traditional it's

00:05:31,039 --> 00:05:33,840
kind of things call anything kubernetes

00:05:32,560 --> 00:05:35,360
traditional at this point but like

00:05:33,840 --> 00:05:37,600
which is kind of like the the cloud data

00:05:35,360 --> 00:05:39,759
center model that's kind of existed and

00:05:37,600 --> 00:05:40,960
where kubernetes shined uh k3s is

00:05:39,759 --> 00:05:42,320
finding different use cases that kind of

00:05:40,960 --> 00:05:45,600
fill in gaps there

00:05:42,320 --> 00:05:45,919
um but um kind of the thing that's

00:05:45,600 --> 00:05:46,960
really

00:05:45,919 --> 00:05:48,960
resonated with a lot of people is kind

00:05:46,960 --> 00:05:50,720
of like this idea of like low cognitive

00:05:48,960 --> 00:05:52,000
load it's like it's just easy to run k3s

00:05:50,720 --> 00:05:53,039
you don't have to think a lot about it

00:05:52,000 --> 00:05:55,759
and that's one of the reasons why i

00:05:53,039 --> 00:05:58,479
think while it's caught on so so quickly

00:05:55,759 --> 00:05:59,759
um k3s is designed for production this

00:05:58,479 --> 00:06:01,919
is a very important thing it's like what

00:05:59,759 --> 00:06:05,039
sets it apart from a lot of other like

00:06:01,919 --> 00:06:07,120
simple small kubernetes projects

00:06:05,039 --> 00:06:08,080
um this from the very beginning was

00:06:07,120 --> 00:06:10,960
always targeted

00:06:08,080 --> 00:06:11,280
for production this is not a toy uh it

00:06:10,960 --> 00:06:14,560
is

00:06:11,280 --> 00:06:16,080
a fun toy but but it's but it is it is

00:06:14,560 --> 00:06:17,840
it is designed for production like it's

00:06:16,080 --> 00:06:20,319
secure uh you know

00:06:17,840 --> 00:06:21,440
we do patch like um we track cves and

00:06:20,319 --> 00:06:23,280
security

00:06:21,440 --> 00:06:25,120
issues and you know we're serious about

00:06:23,280 --> 00:06:28,960
all this so we have like real

00:06:25,120 --> 00:06:30,160
customers in and um actually like very

00:06:28,960 --> 00:06:32,080
important sensitive workloads or

00:06:30,160 --> 00:06:35,120
whatever uh running

00:06:32,080 --> 00:06:36,400
can you know they're running k3s so

00:06:35,120 --> 00:06:38,240
because of that it's fully

00:06:36,400 --> 00:06:40,400
cncf certified we pass the conformance

00:06:38,240 --> 00:06:41,120
test we do that all of our releases like

00:06:40,400 --> 00:06:43,440
every

00:06:41,120 --> 00:06:45,120
the major minor releases they're always

00:06:43,440 --> 00:06:47,199
certified and

00:06:45,120 --> 00:06:49,120
past the conformance test for everything

00:06:47,199 --> 00:06:49,840
it's everything's secure by default you

00:06:49,120 --> 00:06:51,919
know

00:06:49,840 --> 00:06:53,520
as best as we can i think we do a pretty

00:06:51,919 --> 00:06:54,240
good job there if there's any issues

00:06:53,520 --> 00:06:55,840
there's

00:06:54,240 --> 00:06:57,280
you know security disclosures and stuff

00:06:55,840 --> 00:06:59,360
like that to

00:06:57,280 --> 00:07:01,680
you know we'll fix that it's important

00:06:59,360 --> 00:07:03,199
to us but we do our best to like

00:07:01,680 --> 00:07:05,360
you know it's like all the tls is proper

00:07:03,199 --> 00:07:07,599
set properly set up by default

00:07:05,360 --> 00:07:09,280
um you know like at rest encryption i

00:07:07,599 --> 00:07:12,000
think we even do that by default and

00:07:09,280 --> 00:07:14,000
things like that so in general we just

00:07:12,000 --> 00:07:15,919
try to follow like best practices

00:07:14,000 --> 00:07:17,360
uh you know so again that's kind of hard

00:07:15,919 --> 00:07:19,599
like the low cognitive load it's like

00:07:17,360 --> 00:07:20,880
it should just kind of work what we

00:07:19,599 --> 00:07:23,919
think is the best approach

00:07:20,880 --> 00:07:25,440
for lightweight kubernetes so um because

00:07:23,919 --> 00:07:28,400
we kind of narrow in on a certain

00:07:25,440 --> 00:07:30,080
use case we can kind of make a lot of

00:07:28,400 --> 00:07:31,120
choices for the user ahead of time of

00:07:30,080 --> 00:07:31,680
like yeah you kind of wanted to work

00:07:31,120 --> 00:07:33,120
this way

00:07:31,680 --> 00:07:35,520
and so by default it does kind of the

00:07:33,120 --> 00:07:37,120
right thing for a lot of uh

00:07:35,520 --> 00:07:39,680
you know deployments in this in the

00:07:37,120 --> 00:07:41,440
realm of where k theory sits

00:07:39,680 --> 00:07:43,199
uh the last thing is it is a kubernetes

00:07:41,440 --> 00:07:44,160
distribution that's like fundamentally

00:07:43,199 --> 00:07:47,599
what it is

00:07:44,160 --> 00:07:51,039
um so k3s has no goal of like becoming

00:07:47,599 --> 00:07:52,879
something else like larger or it's like

00:07:51,039 --> 00:07:54,479
it's like the intention is just to give

00:07:52,879 --> 00:07:56,000
you a kubernetes distribution

00:07:54,479 --> 00:07:58,639
it's just very geared towards like

00:07:56,000 --> 00:08:00,319
lightweight uh simple low upper low

00:07:58,639 --> 00:08:02,319
operational overhead things like that

00:08:00,319 --> 00:08:04,000
so it is very opinionated we do things a

00:08:02,319 --> 00:08:05,199
certain way um

00:08:04,000 --> 00:08:06,560
which which is great like if you don't

00:08:05,199 --> 00:08:07,599
like the opinion there's plenty other

00:08:06,560 --> 00:08:10,479
distributions out there

00:08:07,599 --> 00:08:10,960
in fact like rancher labs company you

00:08:10,479 --> 00:08:12,879
know

00:08:10,960 --> 00:08:14,400
uh my company remember we have two more

00:08:12,879 --> 00:08:15,280
distributions you can pick up if you

00:08:14,400 --> 00:08:17,039
want

00:08:15,280 --> 00:08:18,720
uh it is considered like it's like

00:08:17,039 --> 00:08:20,319
complete like the idea is like

00:08:18,720 --> 00:08:21,840
when you turn it on you get pretty much

00:08:20,319 --> 00:08:23,840
a fully functioning

00:08:21,840 --> 00:08:24,879
cluster so it has like all the network

00:08:23,840 --> 00:08:27,759
network policy

00:08:24,879 --> 00:08:29,280
ingress storage like everything just

00:08:27,759 --> 00:08:29,680
kind of like all the kubernetes apis

00:08:29,280 --> 00:08:32,880
just

00:08:29,680 --> 00:08:33,680
work out of the box um again kind of

00:08:32,880 --> 00:08:36,880
optimized for

00:08:33,680 --> 00:08:37,360
our use case and we're just very very

00:08:36,880 --> 00:08:40,800
focused

00:08:37,360 --> 00:08:42,399
on simplicity um okay

00:08:40,800 --> 00:08:44,480
so these are some random points because

00:08:42,399 --> 00:08:48,640
as we talk about different use cases

00:08:44,480 --> 00:08:49,600
i want to call out like uh

00:08:48,640 --> 00:08:51,839
you know it's like i'm just going to

00:08:49,600 --> 00:08:54,160
talk about a couple use cases that that

00:08:51,839 --> 00:08:55,040
where k3s is kind of shined or whatever

00:08:54,160 --> 00:08:57,200
but

00:08:55,040 --> 00:08:58,640
but there's a lot of other things like

00:08:57,200 --> 00:08:59,360
random things that you can be doing and

00:08:58,640 --> 00:09:01,519
so

00:08:59,360 --> 00:09:02,720
and the reason why some of these are

00:09:01,519 --> 00:09:03,440
some little things that we've done with

00:09:02,720 --> 00:09:06,320
k3s

00:09:03,440 --> 00:09:07,760
of why it kind of like to surgery sparks

00:09:06,320 --> 00:09:10,480
people's imagination of like

00:09:07,760 --> 00:09:12,000
solutions they could solve with k3s so

00:09:10,480 --> 00:09:14,080
one of the things is like it's just it's

00:09:12,000 --> 00:09:16,320
really really really easy to run

00:09:14,080 --> 00:09:17,760
um it's just a single binary you just

00:09:16,320 --> 00:09:19,040
copy it onto a server we even have a

00:09:17,760 --> 00:09:20,480
little curl script they'll set up a

00:09:19,040 --> 00:09:21,760
system d unit for you but like

00:09:20,480 --> 00:09:23,279
at the end of the day it's really just a

00:09:21,760 --> 00:09:25,040
binary it's a single file it's like 50

00:09:23,279 --> 00:09:27,519
60 megabytes something like that

00:09:25,040 --> 00:09:28,160
um and then you run k3s server and

00:09:27,519 --> 00:09:30,480
that's a

00:09:28,160 --> 00:09:31,839
fully functioning single node cluster

00:09:30,480 --> 00:09:32,320
and then if you want a second one you

00:09:31,839 --> 00:09:34,720
just run

00:09:32,320 --> 00:09:36,640
k3s agent on another machine and you use

00:09:34,720 --> 00:09:37,440
a token as kind of a shared secret

00:09:36,640 --> 00:09:39,360
between the two

00:09:37,440 --> 00:09:40,480
to set up the the certificates and all

00:09:39,360 --> 00:09:42,560
that um

00:09:40,480 --> 00:09:44,320
and then that's like that's basically it

00:09:42,560 --> 00:09:45,920
um so it's just super super easy to run

00:09:44,320 --> 00:09:47,600
and like um

00:09:45,920 --> 00:09:49,440
because of that it kind of like removes

00:09:47,600 --> 00:09:50,000
that barrier of it's like well it would

00:09:49,440 --> 00:09:52,160
be really cool

00:09:50,000 --> 00:09:53,920
if we had kubernetes but it's just too

00:09:52,160 --> 00:09:55,680
much effort it's like well no like

00:09:53,920 --> 00:09:56,959
for these use cases you can have it it's

00:09:55,680 --> 00:09:59,279
really simple

00:09:56,959 --> 00:10:00,640
okay so not only is it really simple to

00:09:59,279 --> 00:10:02,560
install and run

00:10:00,640 --> 00:10:04,160
it's really easy to bundle applications

00:10:02,560 --> 00:10:04,720
with it so there's a couple little

00:10:04,160 --> 00:10:06,560
features

00:10:04,720 --> 00:10:07,920
that we added to k3s that just make it

00:10:06,560 --> 00:10:10,560
just that much easier

00:10:07,920 --> 00:10:12,320
so there's a special manifest directory

00:10:10,560 --> 00:10:14,079
um that if you put anything in that

00:10:12,320 --> 00:10:14,399
directory it just gets loaded so if

00:10:14,079 --> 00:10:16,240
you're

00:10:14,399 --> 00:10:17,920
you know more kubernetes savvy or expert

00:10:16,240 --> 00:10:19,600
whatever you might know about products

00:10:17,920 --> 00:10:21,839
pod

00:10:19,600 --> 00:10:22,959
static pod manifest folder for the

00:10:21,839 --> 00:10:24,800
cubelet so it works

00:10:22,959 --> 00:10:26,480
very similar to that where like the cube

00:10:24,800 --> 00:10:27,839
would look for pod manifest in a

00:10:26,480 --> 00:10:28,320
directory and just automatically start

00:10:27,839 --> 00:10:29,839
them

00:10:28,320 --> 00:10:31,760
so this is like anything you put into

00:10:29,839 --> 00:10:36,000
that directory we're going to load it

00:10:31,760 --> 00:10:37,920
into kubernetes so that means that

00:10:36,000 --> 00:10:39,040
if you want to package your application

00:10:37,920 --> 00:10:40,079
like let's say like you want to build

00:10:39,040 --> 00:10:41,120
like an image you know because you're

00:10:40,079 --> 00:10:41,920
going to put this on a device or

00:10:41,120 --> 00:10:43,279
something like that

00:10:41,920 --> 00:10:45,839
you just have to put some manifest in

00:10:43,279 --> 00:10:46,720
the directory and then put the k3s but i

00:10:45,839 --> 00:10:48,000
need there and then

00:10:46,720 --> 00:10:50,320
on startup it'll just deploy the

00:10:48,000 --> 00:10:53,040
application for you like so like no

00:10:50,320 --> 00:10:54,720
much more automation and stuff so very

00:10:53,040 --> 00:10:56,000
closely related to manifest is also

00:10:54,720 --> 00:10:58,240
images

00:10:56,000 --> 00:10:59,440
so um a lot of times people you know air

00:10:58,240 --> 00:11:02,240
gap or whatnot

00:10:59,440 --> 00:11:02,880
um so you can then put images like any

00:11:02,240 --> 00:11:04,959
oci

00:11:02,880 --> 00:11:06,560
or docker image tarball so like there's

00:11:04,959 --> 00:11:07,760
an oci format in a docker format but

00:11:06,560 --> 00:11:08,959
we'll take either format

00:11:07,760 --> 00:11:10,800
you just put the tarball into that

00:11:08,959 --> 00:11:14,160
directory on startup we'll then

00:11:10,800 --> 00:11:15,600
just uh pick like just uh

00:11:14,160 --> 00:11:18,000
we'll load those basically into

00:11:15,600 --> 00:11:23,120
container d

00:11:18,000 --> 00:11:23,120
so those uh well let's take a drink

00:11:23,390 --> 00:11:26,000
[Music]

00:11:24,880 --> 00:11:27,279
so with those two things like you can

00:11:26,000 --> 00:11:28,399
kind of just package up an application

00:11:27,279 --> 00:11:31,040
really easy for like

00:11:28,399 --> 00:11:31,760
fully air-gapped and everything um

00:11:31,040 --> 00:11:33,120
there's also

00:11:31,760 --> 00:11:34,480
little hooks in the image structure of

00:11:33,120 --> 00:11:36,000
how to pre-pull things on start so i

00:11:34,480 --> 00:11:37,440
think they're not pulled dynamically

00:11:36,000 --> 00:11:39,760
i didn't want to call it just in general

00:11:37,440 --> 00:11:43,279
like k3s does not really try to

00:11:39,760 --> 00:11:45,200
address a lot of the

00:11:43,279 --> 00:11:47,200
um when you talk about edge and stuff we

00:11:45,200 --> 00:11:48,160
don't try to address uh the distribution

00:11:47,200 --> 00:11:49,279
of images that much

00:11:48,160 --> 00:11:51,200
kind of look at that as a slightly

00:11:49,279 --> 00:11:52,720
different problem um so

00:11:51,200 --> 00:11:54,240
if there's gonna be any questions about

00:11:52,720 --> 00:11:55,839
like how do you optimize image delivery

00:11:54,240 --> 00:11:57,279
and stuff like that k3s is not really

00:11:55,839 --> 00:11:59,839
focused in that area

00:11:57,279 --> 00:12:00,800
right now but you know just a random

00:11:59,839 --> 00:12:02,959
thing there

00:12:00,800 --> 00:12:05,279
so the last thing is we have a built-in

00:12:02,959 --> 00:12:06,720
type in k3s for a helm chart

00:12:05,279 --> 00:12:08,720
so we're like we have a built-in

00:12:06,720 --> 00:12:10,480
controller like a helm controller it's

00:12:08,720 --> 00:12:11,839
like it's a separate project from from

00:12:10,480 --> 00:12:14,160
rancher it's a very simple

00:12:11,839 --> 00:12:15,200
helm controller very similar to like um

00:12:14,160 --> 00:12:16,800
let's say uh

00:12:15,200 --> 00:12:18,079
the one from weaveworks which is

00:12:16,800 --> 00:12:19,120
actually more popular within the

00:12:18,079 --> 00:12:21,200
community than

00:12:19,120 --> 00:12:22,839
than ours but this one is very simple

00:12:21,200 --> 00:12:26,240
that we get embedded into

00:12:22,839 --> 00:12:27,680
k3s and this one um so it's like

00:12:26,240 --> 00:12:29,440
since we can deploy any manifest and

00:12:27,680 --> 00:12:29,839
then your manifest describes a home

00:12:29,440 --> 00:12:31,040
chart

00:12:29,839 --> 00:12:32,480
it's really simple to get helm charts

00:12:31,040 --> 00:12:34,320
into there too so you don't have to run

00:12:32,480 --> 00:12:35,440
like tiller if you're doing helm2 which

00:12:34,320 --> 00:12:36,240
hopefully nobody's doing at this point

00:12:35,440 --> 00:12:39,839
anymore

00:12:36,240 --> 00:12:42,160
um or or you can uh

00:12:39,839 --> 00:12:43,360
uh yeah so you don't have to be running

00:12:42,160 --> 00:12:45,440
help like helm

00:12:43,360 --> 00:12:47,360
uh this command line and you know doing

00:12:45,440 --> 00:12:51,200
all that setting up repo and bowling and

00:12:47,360 --> 00:12:55,120
or updating and all that crap okay so

00:12:51,200 --> 00:12:58,480
other thing about this is um

00:12:55,120 --> 00:12:59,200
basically it's like when you look at

00:12:58,480 --> 00:13:01,200
when you look at

00:12:59,200 --> 00:13:03,760
kubernetes like really your biggest

00:13:01,200 --> 00:13:05,440
operational overhead actually is etcd

00:13:03,760 --> 00:13:06,639
uh and it's it's not like there's

00:13:05,440 --> 00:13:08,560
anything wrong with ncd it's just the

00:13:06,639 --> 00:13:10,320
idea of running a persistent system

00:13:08,560 --> 00:13:11,839
and a quorum based persistent system

00:13:10,320 --> 00:13:14,000
like that you know

00:13:11,839 --> 00:13:15,600
you have to worry about losing quorum

00:13:14,000 --> 00:13:19,279
and stuff like that

00:13:15,600 --> 00:13:20,000
so k3s introduces other options for the

00:13:19,279 --> 00:13:21,440
data store because

00:13:20,000 --> 00:13:24,000
we recognize like that's the biggest

00:13:21,440 --> 00:13:24,720
operational issue or headache of running

00:13:24,000 --> 00:13:28,800
k3s

00:13:24,720 --> 00:13:32,160
is running fct so we support

00:13:28,800 --> 00:13:33,440
sqlite embedded mysql and postgrads for

00:13:32,160 --> 00:13:35,360
an external database

00:13:33,440 --> 00:13:36,959
sql server and oracle are coming soon

00:13:35,360 --> 00:13:37,920
like those i think there's pr's out

00:13:36,959 --> 00:13:39,600
there for those

00:13:37,920 --> 00:13:41,839
um maybe by the time you hear this

00:13:39,600 --> 00:13:44,000
they've been merged um

00:13:41,839 --> 00:13:44,959
but like you can just get a managed db

00:13:44,000 --> 00:13:46,480
and so

00:13:44,959 --> 00:13:48,000
that's like one of the biggest reasons

00:13:46,480 --> 00:13:50,079
people think like oh why is like

00:13:48,000 --> 00:13:51,199
my sequel better than etcd and it's

00:13:50,079 --> 00:13:52,639
really not that it's like

00:13:51,199 --> 00:13:53,839
it's not comparing like that's actually

00:13:52,639 --> 00:13:54,800
like apples and oranges they're two

00:13:53,839 --> 00:13:55,839
different things

00:13:54,800 --> 00:13:57,600
the whole point of like why you might

00:13:55,839 --> 00:13:59,279
want to go with like mysql or postgres

00:13:57,600 --> 00:14:00,480
is you can very easily just buy it and

00:13:59,279 --> 00:14:01,839
not have to worry about it

00:14:00,480 --> 00:14:04,160
so it like removes almost all the

00:14:01,839 --> 00:14:06,000
operational concerns of running a

00:14:04,160 --> 00:14:08,720
cluster um you know given that we also

00:14:06,000 --> 00:14:11,199
handle the security all that stuff

00:14:08,720 --> 00:14:12,079
and so this in general is enabled by

00:14:11,199 --> 00:14:13,839
this component

00:14:12,079 --> 00:14:15,519
it's actually a separate component

00:14:13,839 --> 00:14:16,000
called kine and you can use this

00:14:15,519 --> 00:14:17,360
actually with

00:14:16,000 --> 00:14:19,519
any kubernetes cluster it doesn't have

00:14:17,360 --> 00:14:20,639
to be k3s like you're doing cube adm you

00:14:19,519 --> 00:14:23,440
could just add

00:14:20,639 --> 00:14:26,320
uh etsy like you could add mysql support

00:14:23,440 --> 00:14:29,920
to a cube adm cluster using kind

00:14:26,320 --> 00:14:30,720
um so but it's just k3s embeds that

00:14:29,920 --> 00:14:33,920
directly in

00:14:30,720 --> 00:14:35,519
but that is like a separate project uh

00:14:33,920 --> 00:14:37,519
so even though we support all these um

00:14:35,519 --> 00:14:38,320
kind of traditional or uh relational

00:14:37,519 --> 00:14:40,160
databases

00:14:38,320 --> 00:14:42,399
we also still do regular td it says

00:14:40,160 --> 00:14:43,920
kubernetes so you can do normal lcd you

00:14:42,399 --> 00:14:45,199
can do your traditional external setup

00:14:43,920 --> 00:14:47,199
like that's not fun

00:14:45,199 --> 00:14:48,959
um and that kind of stinks to run on the

00:14:47,199 --> 00:14:51,120
edge um

00:14:48,959 --> 00:14:52,079
then there's another option and this is

00:14:51,120 --> 00:14:54,480
one we

00:14:52,079 --> 00:14:55,920
before had a solution based on dq light

00:14:54,480 --> 00:14:56,880
ran into some little issues with that

00:14:55,920 --> 00:14:57,920
mostly

00:14:56,880 --> 00:14:59,839
i mean there's nothing really wrong with

00:14:57,920 --> 00:15:00,959
dq light it's just more of this made a

00:14:59,839 --> 00:15:03,279
lot more sense to

00:15:00,959 --> 00:15:05,519
to go to the ncd route and so the last

00:15:03,279 --> 00:15:07,839
uh option we have here is running fcd

00:15:05,519 --> 00:15:09,440
embedded within side of k3s so you can

00:15:07,839 --> 00:15:12,079
just run like three k3s

00:15:09,440 --> 00:15:14,000
servers and they just join the ncd

00:15:12,079 --> 00:15:14,800
cluster and k3s kind of manages it

00:15:14,000 --> 00:15:17,199
itself

00:15:14,800 --> 00:15:18,480
uh so it's more like docker swarm if

00:15:17,199 --> 00:15:21,519
anyone's run that

00:15:18,480 --> 00:15:22,800
uh it's a very very simple setup that we

00:15:21,519 --> 00:15:26,000
just put on to master

00:15:22,800 --> 00:15:29,360
in in k3s in the middle

00:15:26,000 --> 00:15:31,440
of let's see july and

00:15:29,360 --> 00:15:32,720
it should be like ga you know sometime

00:15:31,440 --> 00:15:34,320
this year probably like october time

00:15:32,720 --> 00:15:36,959
frame

00:15:34,320 --> 00:15:41,120
okay okay so let's get into edge edge is

00:15:36,959 --> 00:15:42,800
like the most popular use case um

00:15:41,120 --> 00:15:44,000
i guess it's kind of oh actually it's

00:15:42,800 --> 00:15:44,320
not really the most popular i'd say it's

00:15:44,000 --> 00:15:46,959
like

00:15:44,320 --> 00:15:47,680
the most popular one that like people

00:15:46,959 --> 00:15:49,680
kind of

00:15:47,680 --> 00:15:51,360
uh associate with k3s but but in fact i

00:15:49,680 --> 00:15:53,759
think actually the most popular thing

00:15:51,360 --> 00:15:55,120
for k3s is probably um devon test

00:15:53,759 --> 00:15:57,519
environments

00:15:55,120 --> 00:15:58,560
but when i talk about edge you know what

00:15:57,519 --> 00:16:01,759
is it that i mean

00:15:58,560 --> 00:16:04,320
um it's really uh what i mean

00:16:01,759 --> 00:16:06,000
is is not like iot devices and these

00:16:04,320 --> 00:16:08,959
really really tiny devices like

00:16:06,000 --> 00:16:11,199
that's too much right now um so we're

00:16:08,959 --> 00:16:14,399
looking at fairly powerful small devices

00:16:11,199 --> 00:16:15,839
so uh minimum one gigabyte of memory

00:16:14,399 --> 00:16:17,440
so this is kind of like in your

00:16:15,839 --> 00:16:20,639
raspberry pi realm

00:16:17,440 --> 00:16:21,600
uh going up you know uh like some really

00:16:20,639 --> 00:16:24,560
great devices

00:16:21,600 --> 00:16:25,360
is like um the the oh crap what is it

00:16:24,560 --> 00:16:28,079
the jetson

00:16:25,360 --> 00:16:30,560
nano the nvidia one um it's really

00:16:28,079 --> 00:16:33,279
powerful small device has gpu built in

00:16:30,560 --> 00:16:33,920
like that's a perfect use case for k3s

00:16:33,279 --> 00:16:36,160
um

00:16:33,920 --> 00:16:37,600
so we're looking at smaller devices but

00:16:36,160 --> 00:16:41,040
fairly it's still fairly powerful

00:16:37,600 --> 00:16:42,399
um like we can't go super super small um

00:16:41,040 --> 00:16:43,440
you know i can kind of tease we have

00:16:42,399 --> 00:16:44,880
another project we're going to start

00:16:43,440 --> 00:16:47,519
that's like

00:16:44,880 --> 00:16:48,560
if k if it would kind of be like the k1s

00:16:47,519 --> 00:16:50,079
like we have an even like

00:16:48,560 --> 00:16:52,800
lighter version that's going to target

00:16:50,079 --> 00:16:56,480
more like 256 megabyte

00:16:52,800 --> 00:16:56,880
um and really really uh less cpu and

00:16:56,480 --> 00:17:01,199
stuff

00:16:56,880 --> 00:17:02,399
um but i was going to tease that okay so

00:17:01,199 --> 00:17:04,799
the type of use cases we're talking

00:17:02,399 --> 00:17:07,280
about is like retail branch

00:17:04,799 --> 00:17:09,039
factory planes trains automobiles wind

00:17:07,280 --> 00:17:10,720
turbines set top boxes

00:17:09,039 --> 00:17:12,559
drive-through menus your refrigerator

00:17:10,720 --> 00:17:15,839
most likely your coffee maker

00:17:12,559 --> 00:17:16,799
it's like these arm computers or even

00:17:15,839 --> 00:17:20,319
intel computers

00:17:16,799 --> 00:17:22,240
are in so many places um and yeah i mean

00:17:20,319 --> 00:17:23,760
over the last yeah you know year or so

00:17:22,240 --> 00:17:25,120
since k3 has been out and just kind of

00:17:23,760 --> 00:17:27,600
talked to tons and tons of companies

00:17:25,120 --> 00:17:29,760
they're just looking um at modernizing

00:17:27,600 --> 00:17:32,240
all these these environments and

00:17:29,760 --> 00:17:33,200
uh so it's just i don't know it seems

00:17:32,240 --> 00:17:34,480
like there's almost

00:17:33,200 --> 00:17:36,000
i don't i don't know if this is a real

00:17:34,480 --> 00:17:36,320
thing but it but but it sounds like

00:17:36,000 --> 00:17:38,320
there's

00:17:36,320 --> 00:17:39,440
there's kind of more computers out there

00:17:38,320 --> 00:17:41,360
that are not cloud

00:17:39,440 --> 00:17:43,520
as much as like my history and past has

00:17:41,360 --> 00:17:45,679
been focused so much on cloud

00:17:43,520 --> 00:17:47,360
um there's so much out there that's not

00:17:45,679 --> 00:17:49,120
cloud it's really interesting

00:17:47,360 --> 00:17:52,240
but basically like why are people doing

00:17:49,120 --> 00:17:53,520
this um one of the

00:17:52,240 --> 00:17:55,520
one of the things like the really

00:17:53,520 --> 00:17:57,280
driving factors is that

00:17:55,520 --> 00:17:58,640
what people are deploying on the edge is

00:17:57,280 --> 00:18:00,960
getting more complicated

00:17:58,640 --> 00:18:03,120
like the applications are more

00:18:00,960 --> 00:18:05,360
sophisticated they're leveraging more

00:18:03,120 --> 00:18:08,080
uh like open source you know they're

00:18:05,360 --> 00:18:10,880
doing data analytics using like you know

00:18:08,080 --> 00:18:12,000
um different data platforms or

00:18:10,880 --> 00:18:13,440
tensorflow or

00:18:12,000 --> 00:18:14,480
and so like they're starting like the

00:18:13,440 --> 00:18:16,559
software they're starting to have to

00:18:14,480 --> 00:18:19,679
deploy is getting a lot harder like

00:18:16,559 --> 00:18:22,080
um so they kind of have to

00:18:19,679 --> 00:18:23,360
up their skills in how they manage

00:18:22,080 --> 00:18:24,720
software at the edge if they want to put

00:18:23,360 --> 00:18:26,880
all this compute out there

00:18:24,720 --> 00:18:29,120
and so kubernetes just brings a nice

00:18:26,880 --> 00:18:30,559
consistency and approach

00:18:29,120 --> 00:18:32,960
that you know is already proven in cloud

00:18:30,559 --> 00:18:34,480
at a data center so it's like

00:18:32,960 --> 00:18:36,160
how do we most people were just looking

00:18:34,480 --> 00:18:38,799
how do i get like that efficiency

00:18:36,160 --> 00:18:40,640
and that support simplicity i guess of

00:18:38,799 --> 00:18:42,240
deploying to cloud and data center with

00:18:40,640 --> 00:18:44,400
that kubernetes brings like how do i do

00:18:42,240 --> 00:18:45,760
that same thing on the edge

00:18:44,400 --> 00:18:47,600
and so that's really that's really what

00:18:45,760 --> 00:18:49,360
it is it's just making it a lot easier

00:18:47,600 --> 00:18:50,160
to manage this complex software as it's

00:18:49,360 --> 00:18:52,240
kind of working

00:18:50,160 --> 00:18:53,360
you know it's just kind of grown um i

00:18:52,240 --> 00:18:54,960
think one of the interesting is like the

00:18:53,360 --> 00:18:57,520
wind turbine use case like

00:18:54,960 --> 00:18:59,280
we work with one of the largest wind

00:18:57,520 --> 00:19:00,720
turbine manufacturers

00:18:59,280 --> 00:19:02,240
and they actually run like a little data

00:19:00,720 --> 00:19:03,600
center in those things well those things

00:19:02,240 --> 00:19:04,640
aren't very small those turbines are

00:19:03,600 --> 00:19:06,000
huge

00:19:04,640 --> 00:19:08,640
but it's like the amount of computing

00:19:06,000 --> 00:19:10,559
powers out there is kind of crazy

00:19:08,640 --> 00:19:12,080
okay so when we talk about these use

00:19:10,559 --> 00:19:12,960
cases a lot of times mostly what we're

00:19:12,080 --> 00:19:16,559
dealing with is

00:19:12,960 --> 00:19:20,080
uh like one two or three nodes

00:19:16,559 --> 00:19:21,360
um so they're kind of separating like

00:19:20,080 --> 00:19:23,760
the one node clusters will be an

00:19:21,360 --> 00:19:25,760
embedded sql light the two node clusters

00:19:23,760 --> 00:19:27,280
we'll be using an external data store

00:19:25,760 --> 00:19:28,880
we're looking at doing an active passive

00:19:27,280 --> 00:19:31,280
failover type solution

00:19:28,880 --> 00:19:33,360
and then the three node one is the

00:19:31,280 --> 00:19:35,760
embedded lcd but that one is like still

00:19:33,360 --> 00:19:38,160
experimental um a lot of people right

00:19:35,760 --> 00:19:39,360
now are getting by with really um

00:19:38,160 --> 00:19:41,360
if they want three nodes they do a

00:19:39,360 --> 00:19:45,679
single master with with uh

00:19:41,360 --> 00:19:47,120
two or three uh worker nodes um

00:19:45,679 --> 00:19:49,200
until we get like the full the full

00:19:47,120 --> 00:19:50,960
embedded scd working like you know

00:19:49,200 --> 00:19:52,240
seamlessly

00:19:50,960 --> 00:19:53,600
uh but just in general like these

00:19:52,240 --> 00:19:54,640
solutions just have lots and lots and

00:19:53,600 --> 00:19:56,000
lots of clusters

00:19:54,640 --> 00:19:57,840
and so there's a real fundamental

00:19:56,000 --> 00:19:59,039
difference between running like one

00:19:57,840 --> 00:20:01,360
cluster with tons of

00:19:59,039 --> 00:20:02,480
nodes and a lot of little clusters it

00:20:01,360 --> 00:20:04,400
completely changes your

00:20:02,480 --> 00:20:06,559
perspective on how you deal with it and

00:20:04,400 --> 00:20:08,880
what we found is a lot of people

00:20:06,559 --> 00:20:09,919
kind of resonates better to do the a lot

00:20:08,880 --> 00:20:11,120
of small clusters

00:20:09,919 --> 00:20:13,440
because it looks a lot more like a

00:20:11,120 --> 00:20:15,120
configuration management problem

00:20:13,440 --> 00:20:16,880
than kind of like an abstraction

00:20:15,120 --> 00:20:20,080
federation type problem

00:20:16,880 --> 00:20:20,960
um and so like the approach that we've

00:20:20,080 --> 00:20:24,480
seen

00:20:20,960 --> 00:20:25,679
is is it maps really well um

00:20:24,480 --> 00:20:26,960
well i'll get into this it maps really

00:20:25,679 --> 00:20:28,159
well to get up so i'm talking about just

00:20:26,960 --> 00:20:31,280
a second

00:20:28,159 --> 00:20:33,200
um so in terms of edge basically don't

00:20:31,280 --> 00:20:34,960
go overboard

00:20:33,200 --> 00:20:36,480
don't use like tons of features of

00:20:34,960 --> 00:20:39,440
kubernetes at first

00:20:36,480 --> 00:20:40,480
like uh oops let me go through these

00:20:39,440 --> 00:20:42,000
things of like

00:20:40,480 --> 00:20:43,039
basically the it's kind of like

00:20:42,000 --> 00:20:44,960
kubernetes give you this great

00:20:43,039 --> 00:20:48,000
abstraction layer over the underlying

00:20:44,960 --> 00:20:49,360
resources so that like it's scalable and

00:20:48,000 --> 00:20:51,120
pluggable and all this stuff but when

00:20:49,360 --> 00:20:52,880
you start getting into edge it's like

00:20:51,120 --> 00:20:55,360
you know exactly what the resources you

00:20:52,880 --> 00:20:56,320
have you have three servers they're this

00:20:55,360 --> 00:20:58,320
big they have this much

00:20:56,320 --> 00:21:00,080
cpu i'm running these applications it's

00:20:58,320 --> 00:21:01,200
fairly static in terms of what the

00:21:00,080 --> 00:21:02,400
workload is

00:21:01,200 --> 00:21:04,080
i mean you want to be dynamic and

00:21:02,400 --> 00:21:05,200
updating it but it's kind of static in

00:21:04,080 --> 00:21:07,679
what you put there

00:21:05,200 --> 00:21:09,520
so the way you plan these deployments is

00:21:07,679 --> 00:21:11,440
often very static it's like

00:21:09,520 --> 00:21:13,360
you don't need like you can just use

00:21:11,440 --> 00:21:15,200
host path for persistence that makes it

00:21:13,360 --> 00:21:17,840
really nice because it effectively makes

00:21:15,200 --> 00:21:19,919
kubernetes stateless um if you can make

00:21:17,840 --> 00:21:21,520
kubernetes stateless since then you wipe

00:21:19,919 --> 00:21:23,280
out wipe out kubernetes and just start

00:21:21,520 --> 00:21:24,400
it again and it redeploys the manifest

00:21:23,280 --> 00:21:24,880
and it comes back up and everything's

00:21:24,400 --> 00:21:26,080
happy

00:21:24,880 --> 00:21:28,240
then that's a really simple thing to

00:21:26,080 --> 00:21:29,840
operationalize so

00:21:28,240 --> 00:21:32,400
you plan the deployment slightly

00:21:29,840 --> 00:21:33,760
different to like exploit the underlying

00:21:32,400 --> 00:21:35,760
hardware because you know exactly what

00:21:33,760 --> 00:21:38,480
it is and also a lot of times

00:21:35,760 --> 00:21:39,440
you're you care because there's gpus and

00:21:38,480 --> 00:21:40,799
and

00:21:39,440 --> 00:21:42,640
hardware devices that you need to talk

00:21:40,799 --> 00:21:44,480
to so

00:21:42,640 --> 00:21:46,400
you don't like run this kind of

00:21:44,480 --> 00:21:49,520
perfectly abstracted

00:21:46,400 --> 00:21:51,919
uh you know pattern or something that uh

00:21:49,520 --> 00:21:53,679
you know kubernetes would would uh kind

00:21:51,919 --> 00:21:55,280
of you normally do like in the cloud

00:21:53,679 --> 00:21:56,880
so that's where you see like um doing

00:21:55,280 --> 00:21:59,120
very explicit node scheduling

00:21:56,880 --> 00:22:00,480
or or even just daemon sets daemon sets

00:21:59,120 --> 00:22:01,440
work really well a lot of times because

00:22:00,480 --> 00:22:02,559
it's just like we'll run the same thing

00:22:01,440 --> 00:22:04,240
on all three nodes i only have three

00:22:02,559 --> 00:22:04,720
nodes and i want the same thing on all

00:22:04,240 --> 00:22:06,400
of them

00:22:04,720 --> 00:22:10,240
let's just run a damon set or state or a

00:22:06,400 --> 00:22:13,440
staples head it works fine too

00:22:10,240 --> 00:22:14,720
so in terms of management um

00:22:13,440 --> 00:22:16,240
we kind of say like just you know first

00:22:14,720 --> 00:22:17,679
start with what you have like don't go

00:22:16,240 --> 00:22:20,320
like crazy greenfield and

00:22:17,679 --> 00:22:21,280
build all this stuff it's like um

00:22:20,320 --> 00:22:23,120
because when you look at like

00:22:21,280 --> 00:22:24,559
what k3s like how do you manage it it's

00:22:23,120 --> 00:22:27,120
really like i gotta get k3s on there

00:22:24,559 --> 00:22:29,840
which is binary k3s is a config file to

00:22:27,120 --> 00:22:31,120
configure k3s itself and then how am i

00:22:29,840 --> 00:22:31,520
going to deploy my applications which

00:22:31,120 --> 00:22:34,880
are like

00:22:31,520 --> 00:22:36,960
manifest and images so

00:22:34,880 --> 00:22:38,559
when you combine those it's like really

00:22:36,960 --> 00:22:39,919
it's like it could be as simple as rsync

00:22:38,559 --> 00:22:41,679
to manage these simple these these

00:22:39,919 --> 00:22:43,440
systems like just copy and files and

00:22:41,679 --> 00:22:44,960
like it just does the right thing

00:22:43,440 --> 00:22:46,640
um so you don't have to go super

00:22:44,960 --> 00:22:47,440
complicated at first but the problem is

00:22:46,640 --> 00:22:49,200
like as soon as you're

00:22:47,440 --> 00:22:50,799
you're you're the number of nodes or

00:22:49,200 --> 00:22:52,320
clusters you have scales up you're going

00:22:50,799 --> 00:22:54,159
to want to centralize

00:22:52,320 --> 00:22:55,919
things and so this is where git ops

00:22:54,159 --> 00:22:58,240
starts to map very well to this

00:22:55,919 --> 00:22:59,200
like a git ops model of managing groups

00:22:58,240 --> 00:23:00,880
of clusters

00:22:59,200 --> 00:23:02,400
the only problem with git ops right now

00:23:00,880 --> 00:23:04,400
is that most github solutions do not

00:23:02,400 --> 00:23:05,840
scale well for this edge use case

00:23:04,400 --> 00:23:06,880
because they have a push or pull the

00:23:05,840 --> 00:23:08,000
push has a problem which is

00:23:06,880 --> 00:23:09,679
fundamentally not scalable

00:23:08,000 --> 00:23:11,280
because you can't it's very hard to like

00:23:09,679 --> 00:23:13,760
push out to you know

00:23:11,280 --> 00:23:14,960
uh thousands of clusters from a single

00:23:13,760 --> 00:23:17,919
point and then deal also with all the

00:23:14,960 --> 00:23:19,919
networking issues of doing a push model

00:23:17,919 --> 00:23:20,960
secondly uh there's the pull model but

00:23:19,919 --> 00:23:22,400
the problem with the pull model is you

00:23:20,960 --> 00:23:23,600
don't want to be doing the git clone

00:23:22,400 --> 00:23:25,120
on the edge then you're just

00:23:23,600 --> 00:23:26,400
transferring all this ridiculous data

00:23:25,120 --> 00:23:27,520
over and then you have to optimize your

00:23:26,400 --> 00:23:30,159
git clones

00:23:27,520 --> 00:23:31,919
um so anyways we have a separate project

00:23:30,159 --> 00:23:33,520
it's not related to k3s fleet that we

00:23:31,919 --> 00:23:34,799
announced earlier this year and

00:23:33,520 --> 00:23:36,240
it will go like kind of ga towards the

00:23:34,799 --> 00:23:36,880
end of the gear another open source

00:23:36,240 --> 00:23:38,080
project

00:23:36,880 --> 00:23:39,520
that's kind of adjusting some of these

00:23:38,080 --> 00:23:41,279
issues but just pointing out some of

00:23:39,520 --> 00:23:42,080
these things like the model of git ops

00:23:41,279 --> 00:23:44,000
maps really well

00:23:42,080 --> 00:23:45,440
but there are some problems with it

00:23:44,000 --> 00:23:46,640
other little challenges and gaps that

00:23:45,440 --> 00:23:50,000
you're going to run into

00:23:46,640 --> 00:23:53,360
is um almost kubernetes tools

00:23:50,000 --> 00:23:55,039
don't uh they don't scale uh

00:23:53,360 --> 00:23:56,240
for edge so it's like the whole reason

00:23:55,039 --> 00:23:57,600
why you want to use kubernetes is

00:23:56,240 --> 00:23:59,679
because it

00:23:57,600 --> 00:24:00,640
you get all like kubernetes stuff but

00:23:59,679 --> 00:24:02,240
they don't like let's say like

00:24:00,640 --> 00:24:03,520
prometheus or monitoring those type

00:24:02,240 --> 00:24:06,240
things they don't work really well for

00:24:03,520 --> 00:24:07,440
edge deployments

00:24:06,240 --> 00:24:08,880
a lot of things won't deal with bad

00:24:07,440 --> 00:24:10,240
network connections and then

00:24:08,880 --> 00:24:13,279
fundamentally you solve like a hardware

00:24:10,240 --> 00:24:17,520
and os management problem

00:24:13,279 --> 00:24:19,200
um so so these are things

00:24:17,520 --> 00:24:21,360
these are kind of things that like we're

00:24:19,200 --> 00:24:24,080
we're looking to address within the

00:24:21,360 --> 00:24:24,960
maybe in the k3s project or or layers

00:24:24,080 --> 00:24:26,559
above it like

00:24:24,960 --> 00:24:28,799
it is important for us to kind of keep

00:24:26,559 --> 00:24:30,960
k3s focused and simple but

00:24:28,799 --> 00:24:32,240
um so so some of these management

00:24:30,960 --> 00:24:33,919
problems you know

00:24:32,240 --> 00:24:35,600
probably we have other like fleet you

00:24:33,919 --> 00:24:36,799
know things like that other projects

00:24:35,600 --> 00:24:37,279
that like a rancher that we're working

00:24:36,799 --> 00:24:39,520
on

00:24:37,279 --> 00:24:41,279
um all open source um to address some of

00:24:39,520 --> 00:24:42,880
these issues

00:24:41,279 --> 00:24:44,720
okay so i'm really bad at time

00:24:42,880 --> 00:24:46,240
management so i went through like pretty

00:24:44,720 --> 00:24:47,600
much all the edge and i'm pretty much

00:24:46,240 --> 00:24:48,720
out of time

00:24:47,600 --> 00:24:50,559
i'm going to talk about what app

00:24:48,720 --> 00:24:52,080
clusters are and then i probably won't

00:24:50,559 --> 00:24:53,600
talk about pipeline that much so you can

00:24:52,080 --> 00:24:54,960
download the slides or ask me

00:24:53,600 --> 00:24:56,559
questions we're going to open this up

00:24:54,960 --> 00:24:57,679
for questions there's a second but let

00:24:56,559 --> 00:24:59,200
me just throw out app clusters because

00:24:57,679 --> 00:25:01,600
it's a really cool idea

00:24:59,200 --> 00:25:03,200
and it's so simple to run too and it's

00:25:01,600 --> 00:25:05,200
basically the whole idea is like you

00:25:03,200 --> 00:25:06,880
just have a cluster which is dedicated

00:25:05,200 --> 00:25:08,559
to one application

00:25:06,880 --> 00:25:10,240
and it and you deploy it on the

00:25:08,559 --> 00:25:11,679
resources needed for just that one

00:25:10,240 --> 00:25:13,360
application it could be three nodes it

00:25:11,679 --> 00:25:14,000
could be one node it could be a 5 000

00:25:13,360 --> 00:25:16,000
nodes

00:25:14,000 --> 00:25:18,960
it's kind of funny because k3s while we

00:25:16,000 --> 00:25:20,799
target very small workloads or clusters

00:25:18,960 --> 00:25:22,400
and in fact we'll scale to 5000 nodes

00:25:20,799 --> 00:25:26,400
just fine we've tested this

00:25:22,400 --> 00:25:28,240
it works it works very well um so

00:25:26,400 --> 00:25:30,559
but the whole idea is you you create a

00:25:28,240 --> 00:25:33,200
cluster just for an application

00:25:30,559 --> 00:25:35,120
um and you don't really treat the

00:25:33,200 --> 00:25:36,320
control plane as a separate thing

00:25:35,120 --> 00:25:38,559
you just kind of embed it within the

00:25:36,320 --> 00:25:39,679
resources that are using it for the

00:25:38,559 --> 00:25:41,120
application

00:25:39,679 --> 00:25:42,880
and then use something like a managed

00:25:41,120 --> 00:25:44,720
database to store the state

00:25:42,880 --> 00:25:46,480
so your deployment you can have these

00:25:44,720 --> 00:25:47,840
very complicated applications which run

00:25:46,480 --> 00:25:49,039
on top of kubernetes and do fancy

00:25:47,840 --> 00:25:51,520
kubernetes things

00:25:49,039 --> 00:25:54,000
but the underlying cluster deployment is

00:25:51,520 --> 00:25:56,480
just brain dead simple you spin up rds

00:25:54,000 --> 00:25:57,919
you and then you uh then you just point

00:25:56,480 --> 00:26:00,960
all the the

00:25:57,919 --> 00:26:01,919
k3s nodes to rds um so it's really

00:26:00,960 --> 00:26:04,640
simple to automate

00:26:01,919 --> 00:26:06,000
and it creates a very simple reliable

00:26:04,640 --> 00:26:07,120
reliable cluster

00:26:06,000 --> 00:26:08,559
um and so i just want to throw that out

00:26:07,120 --> 00:26:09,200
through this idea like i don't have time

00:26:08,559 --> 00:26:12,080
to go

00:26:09,200 --> 00:26:12,880
in uh in depth but um please if you have

00:26:12,080 --> 00:26:15,919
some questions

00:26:12,880 --> 00:26:17,360
uh uh you know ask them uh so i'm not

00:26:15,919 --> 00:26:18,640
gonna go over a pipeline

00:26:17,360 --> 00:26:20,400
unfortunately yeah just bad time

00:26:18,640 --> 00:26:21,760
management here i i mean i told you i

00:26:20,400 --> 00:26:23,520
wasn't gonna do any edits or anything so

00:26:21,760 --> 00:26:26,880
kind of screwed that up but anyways

00:26:23,520 --> 00:26:28,000
um yeah so i'm gonna i think i will open

00:26:26,880 --> 00:26:29,919
it up

00:26:28,000 --> 00:26:31,039
for questions i think that's what we're

00:26:29,919 --> 00:26:34,080
doing now and

00:26:31,039 --> 00:26:37,039
that's it all right thanks that's fun

00:26:34,080 --> 00:26:37,039

YouTube URL: https://www.youtube.com/watch?v=aR12Oij4CYw


