Title: Build an Automatic Canary Release Pipeline in a Kubernetes-native Way - Ying Chun Guo, IBM
Publication date: 2020-08-27
Playlist: KubeCon + CloudNativeCon Europe 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io. The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Build an Automatic Canary Release Pipeline in a Kubernetes-native Way - Ying Chun Guo, IBM 

Tekton and Knative are two Kubernetes-native open source projects to extend Kubernetes capabilities. They have defined a series of powerful and flexible Kubernetes objects, in order to build CI/CD pipeline, to create event driven flows, and to manage serverless applications. This presentation will introduce and demonstrate how Tekton and Knative collaborate seamlessly to build an automatic canary release pipeline in a Kubernetes-native way.  In this session, you will learn how to monitor CI/CD events with Knative Eventing, how to extract information from events payloads and feed these information into a CI/CD pipeline with Tekton Trigger, how to define a k8s-style pipeline to build and deploy serverless applications with Tekton Pipeline, how to manage traffics with Knative Serving, and more importantly, how these components work together to build the automatic canary release pipeline.

https://sched.co/Zeie
Captions: 
	00:00:00,080 --> 00:00:06,399
hello welcome to this session

00:00:03,040 --> 00:00:08,960
i'm going chun from ibm china today

00:00:06,399 --> 00:00:09,440
i will share a kubernetes native way to

00:00:08,960 --> 00:00:12,880
build

00:00:09,440 --> 00:00:15,360
a canary release pipeline

00:00:12,880 --> 00:00:16,400
my chinese name is in chun i also have

00:00:15,360 --> 00:00:19,119
an english nickname

00:00:16,400 --> 00:00:20,400
as daisy i have long history in open

00:00:19,119 --> 00:00:23,600
source projects

00:00:20,400 --> 00:00:26,800
from open office to openstack and now i

00:00:23,600 --> 00:00:28,880
focus on serverless open source projects

00:00:26,800 --> 00:00:30,400
i have been working on serverless for

00:00:28,880 --> 00:00:33,200
quite a bit of time

00:00:30,400 --> 00:00:33,920
i'm a committer of apathy opponents and

00:00:33,200 --> 00:00:37,760
an acting

00:00:33,920 --> 00:00:40,079
contributor of kennedy in this session

00:00:37,760 --> 00:00:40,879
i will share a way to use k-native and

00:00:40,079 --> 00:00:43,760
tecton

00:00:40,879 --> 00:00:45,440
to build a canary release pipeline on

00:00:43,760 --> 00:00:48,000
top of kubernetes

00:00:45,440 --> 00:00:51,520
i will show a live demo and touch some

00:00:48,000 --> 00:00:54,559
part of the technical details

00:00:51,520 --> 00:00:56,000
canary release is a technique used to

00:00:54,559 --> 00:00:58,800
reduce the risk

00:00:56,000 --> 00:01:00,079
associated with rolling out new code or

00:00:58,800 --> 00:01:02,640
functionality

00:01:00,079 --> 00:01:04,879
to everyone by making the new release

00:01:02,640 --> 00:01:06,159
only available to a small group of end

00:01:04,879 --> 00:01:08,560
users

00:01:06,159 --> 00:01:09,200
due to the small size of the end user

00:01:08,560 --> 00:01:11,600
group

00:01:09,200 --> 00:01:13,360
the impact to the new release is

00:01:11,600 --> 00:01:16,400
relatively small

00:01:13,360 --> 00:01:18,880
if it's determined that the bug exists

00:01:16,400 --> 00:01:19,759
or the new functionality isn't well

00:01:18,880 --> 00:01:23,280
received

00:01:19,759 --> 00:01:25,520
then it's easy to roll back

00:01:23,280 --> 00:01:26,479
this release pattern can bring some

00:01:25,520 --> 00:01:29,439
benefits

00:01:26,479 --> 00:01:30,000
it allows deployment to production

00:01:29,439 --> 00:01:33,200
easier

00:01:30,000 --> 00:01:34,159
and more often reduces deployment life

00:01:33,200 --> 00:01:37,600
cycle size

00:01:34,159 --> 00:01:39,520
lens it allows the test in production

00:01:37,600 --> 00:01:40,640
which can make sure the testing

00:01:39,520 --> 00:01:44,159
environment

00:01:40,640 --> 00:01:46,880
is exactly same as the production

00:01:44,159 --> 00:01:48,159
it allows phased roll out of new

00:01:46,880 --> 00:01:52,320
applications

00:01:48,159 --> 00:01:55,200
which reduce user exposed to negative

00:01:52,320 --> 00:01:56,159
issues it can ease drawback

00:01:55,200 --> 00:01:59,200
implementation

00:01:56,159 --> 00:02:00,240
in case of problems of course besides

00:01:59,200 --> 00:02:02,799
the benefits

00:02:00,240 --> 00:02:03,600
it also adds complexity to the

00:02:02,799 --> 00:02:06,640
deployment

00:02:03,600 --> 00:02:10,000
management you are able to implement

00:02:06,640 --> 00:02:12,640
a canary release just using kubernetes

00:02:10,000 --> 00:02:13,840
you will need to build your app into a

00:02:12,640 --> 00:02:16,160
container image

00:02:13,840 --> 00:02:17,200
push the image into a ripple create

00:02:16,160 --> 00:02:20,400
deployments

00:02:17,200 --> 00:02:21,200
configure the replica set you may also

00:02:20,400 --> 00:02:24,160
need to

00:02:21,200 --> 00:02:24,879
configure endpoints ingress or virtual

00:02:24,160 --> 00:02:27,200
services

00:02:24,879 --> 00:02:30,080
for the traffic routing you may need to

00:02:27,200 --> 00:02:33,280
use yaml or helm to do the deployment

00:02:30,080 --> 00:02:34,080
if you want to use is2 or some other

00:02:33,280 --> 00:02:36,480
gateways

00:02:34,080 --> 00:02:38,239
you may need to master more knowledges

00:02:36,480 --> 00:02:41,120
just in order to build a

00:02:38,239 --> 00:02:43,840
canary release pipeline all these

00:02:41,120 --> 00:02:45,599
resources have to be managed by yourself

00:02:43,840 --> 00:02:48,160
i don't think it's a delighted

00:02:45,599 --> 00:02:48,160
experience

00:02:48,560 --> 00:02:53,599
then it comes canadian kinetico is

00:02:51,120 --> 00:02:54,800
designed to provide a service platform

00:02:53,599 --> 00:02:57,120
for developers

00:02:54,800 --> 00:02:58,800
which will ease the developer workload

00:02:57,120 --> 00:03:01,280
to manage their cloud-native

00:02:58,800 --> 00:03:04,319
applications on kubernetes

00:03:01,280 --> 00:03:07,120
kinetico defines a set of primitives to

00:03:04,319 --> 00:03:10,000
build this kind of modern source-centric

00:03:07,120 --> 00:03:12,000
and container-based applications since

00:03:10,000 --> 00:03:14,720
kinetico is kubernetes native

00:03:12,000 --> 00:03:15,680
it can leverage all the tools in kennedy

00:03:14,720 --> 00:03:17,680
ecosystem

00:03:15,680 --> 00:03:19,280
for example the auto scaling and the

00:03:17,680 --> 00:03:21,840
telemetry

00:03:19,280 --> 00:03:23,680
it leverage service mesh for example is

00:03:21,840 --> 00:03:26,000
to to define routing and

00:03:23,680 --> 00:03:27,760
network programming and to enable

00:03:26,000 --> 00:03:31,040
security access

00:03:27,760 --> 00:03:34,319
kinetic you can use

00:03:31,040 --> 00:03:38,239
zipkin grafana promises

00:03:34,319 --> 00:03:40,799
to get better observability

00:03:38,239 --> 00:03:42,159
it has two major components one is

00:03:40,799 --> 00:03:45,040
kinetic serving

00:03:42,159 --> 00:03:47,519
which defines a series of crds to

00:03:45,040 --> 00:03:49,840
control serverless workload behaves

00:03:47,519 --> 00:03:51,920
for example the rapid deployment of

00:03:49,840 --> 00:03:55,599
serverless container

00:03:51,920 --> 00:03:57,760
auto scaling up and down to zero

00:03:55,599 --> 00:04:00,080
the other is kinetic eventing which

00:03:57,760 --> 00:04:02,159
provides resources to enable the late

00:04:00,080 --> 00:04:04,799
binding event sources and even

00:04:02,159 --> 00:04:04,799
consumers

00:04:05,360 --> 00:04:09,439
let's spend a little bit of time on the

00:04:07,439 --> 00:04:11,680
kinetic major components

00:04:09,439 --> 00:04:13,680
because we use these concepts in the

00:04:11,680 --> 00:04:16,239
following content

00:04:13,680 --> 00:04:17,120
cognitive serving builds on kubernetes

00:04:16,239 --> 00:04:20,079
and is2

00:04:17,120 --> 00:04:21,600
to support deploying and serving of

00:04:20,079 --> 00:04:25,280
serverless applications

00:04:21,600 --> 00:04:27,840
and functions it defines crds

00:04:25,280 --> 00:04:29,600
to describe a developer view of cloud

00:04:27,840 --> 00:04:32,800
native application

00:04:29,600 --> 00:04:35,120
for developer service acts as a top

00:04:32,800 --> 00:04:37,600
level container for function

00:04:35,120 --> 00:04:39,520
configuration acts as a stream of

00:04:37,600 --> 00:04:41,600
environments

00:04:39,520 --> 00:04:43,440
different configuration will create

00:04:41,600 --> 00:04:46,320
different revisions

00:04:43,440 --> 00:04:47,199
revisions are immutable snapshots

00:04:46,320 --> 00:04:50,800
snapshots

00:04:47,199 --> 00:04:53,600
of codes and configures a route

00:04:50,800 --> 00:04:54,400
provides a named endpoint and a

00:04:53,600 --> 00:04:57,759
mechanism

00:04:54,400 --> 00:05:00,639
for routing traffic relations

00:04:57,759 --> 00:05:03,039
so with canadian a developer can easily

00:05:00,639 --> 00:05:04,720
deploy a function as a service

00:05:03,039 --> 00:05:07,360
while connecting will create the

00:05:04,720 --> 00:05:11,199
corresponding configurations revisions

00:05:07,360 --> 00:05:15,120
and route and including all the below

00:05:11,199 --> 00:05:18,000
kinetic objects it also provides a

00:05:15,120 --> 00:05:19,759
capability to automatically scale up and

00:05:18,000 --> 00:05:22,240
down to zero

00:05:19,759 --> 00:05:23,280
traffic can can be splitted based on

00:05:22,240 --> 00:05:26,000
percentage

00:05:23,280 --> 00:05:27,120
a route can submit traffic to several

00:05:26,000 --> 00:05:30,000
revisions

00:05:27,120 --> 00:05:32,400
this is a key requirement of canary

00:05:30,000 --> 00:05:32,400
release

00:05:33,680 --> 00:05:37,360
cognitive eventing is a system that is

00:05:36,000 --> 00:05:39,360
designed to address

00:05:37,360 --> 00:05:41,280
a common need for cloud-native

00:05:39,360 --> 00:05:44,080
deployment and provides

00:05:41,280 --> 00:05:45,680
composable primitives to enable late

00:05:44,080 --> 00:05:49,520
binding events sources and

00:05:45,680 --> 00:05:52,479
event consumers it defines primitives

00:05:49,520 --> 00:05:53,520
to manage event consume producers and

00:05:52,479 --> 00:05:56,240
consumers

00:05:53,520 --> 00:05:56,800
it allows provide a persistent data

00:05:56,240 --> 00:06:00,080
channel

00:05:56,800 --> 00:06:03,600
for the event state flow it has

00:06:00,080 --> 00:06:06,240
defined some event cells

00:06:03,600 --> 00:06:08,800
among them i want to highlight is the

00:06:06,240 --> 00:06:11,680
api server source

00:06:08,800 --> 00:06:12,400
api server source provides a capability

00:06:11,680 --> 00:06:15,440
to consume

00:06:12,400 --> 00:06:16,240
kubernetes cluster events by a function

00:06:15,440 --> 00:06:19,199
that has been

00:06:16,240 --> 00:06:20,560
implemented as a canadian service you

00:06:19,199 --> 00:06:22,560
can monitor the quit

00:06:20,560 --> 00:06:24,240
update delete of cognitive serving

00:06:22,560 --> 00:06:26,560
objects for example

00:06:24,240 --> 00:06:27,520
the creation of a cognitive service

00:06:26,560 --> 00:06:30,560
configuration

00:06:27,520 --> 00:06:32,639
revision or the update of a route

00:06:30,560 --> 00:06:34,080
by doing this you are able to capture

00:06:32,639 --> 00:06:36,880
the events happened

00:06:34,080 --> 00:06:38,960
in a canary release pipeline and you are

00:06:36,880 --> 00:06:41,199
able to consume such events

00:06:38,960 --> 00:06:42,560
implement a function as a kinetic

00:06:41,199 --> 00:06:44,960
service to handle such

00:06:42,560 --> 00:06:44,960
events

00:06:46,400 --> 00:06:51,039
techton is also a kubernetes network

00:06:48,639 --> 00:06:53,919
system it provides a powerful and

00:06:51,039 --> 00:06:54,639
flexible flex flexible open source

00:06:53,919 --> 00:06:57,919
framework

00:06:54,639 --> 00:06:58,400
for creating ci cd systems it lets you

00:06:57,919 --> 00:07:01,120
build

00:06:58,400 --> 00:07:04,160
test and deploy applications to public

00:07:01,120 --> 00:07:06,160
cloud or on-premise systems

00:07:04,160 --> 00:07:07,199
your high it hides hides the

00:07:06,160 --> 00:07:09,440
implementation

00:07:07,199 --> 00:07:10,639
and provides a series of coordinated

00:07:09,440 --> 00:07:14,880
style resources

00:07:10,639 --> 00:07:14,880
to define your tasks and your pipelines

00:07:15,120 --> 00:07:19,680
there are two major projects in taxon

00:07:17,360 --> 00:07:21,919
which help to trigger a process to build

00:07:19,680 --> 00:07:24,000
and deploy your application

00:07:21,919 --> 00:07:25,599
tecton pipeline provides several

00:07:24,000 --> 00:07:28,639
quantity still

00:07:25,599 --> 00:07:30,000
resources for declares for declaring ci

00:07:28,639 --> 00:07:32,560
cd pipelines

00:07:30,000 --> 00:07:34,319
for example you can define tasks which

00:07:32,560 --> 00:07:37,599
are a collection of steps

00:07:34,319 --> 00:07:40,960
you would want to run as part of your ci

00:07:37,599 --> 00:07:41,199
flow a pipeline is a sequence of tasks

00:07:40,960 --> 00:07:44,240
and

00:07:41,199 --> 00:07:47,599
parameters and resources use that input

00:07:44,240 --> 00:07:48,560
and output of the tasks tactile trigger

00:07:47,599 --> 00:07:51,440
allows you to

00:07:48,560 --> 00:07:51,759
extract information from events payloads

00:07:51,440 --> 00:07:53,840
and

00:07:51,759 --> 00:07:54,800
feed this information into a pipeline

00:07:53,840 --> 00:07:57,039
pipeline

00:07:54,800 --> 00:07:58,160
and run the pipeline so that you can

00:07:57,039 --> 00:08:01,120
trigger your pipeline

00:07:58,160 --> 00:08:02,240
by a crown job event or by a github

00:08:01,120 --> 00:08:04,479
event

00:08:02,240 --> 00:08:06,720
we will use these two features to build

00:08:04,479 --> 00:08:10,080
the canary release pipeline

00:08:06,720 --> 00:08:11,120
you will use evoc is automatic and much

00:08:10,080 --> 00:08:13,280
easier

00:08:11,120 --> 00:08:15,840
then you manage the kubernetes resources

00:08:13,280 --> 00:08:15,840
by yourself

00:08:18,080 --> 00:08:21,840
i will do a live demo and show you step

00:08:20,800 --> 00:08:24,560
step by step

00:08:21,840 --> 00:08:25,599
how can native and tactile work closely

00:08:24,560 --> 00:08:28,800
to implement

00:08:25,599 --> 00:08:30,879
a canary pipeline

00:08:28,800 --> 00:08:32,080
first i will introduce some background

00:08:30,879 --> 00:08:34,440
of the demo

00:08:32,080 --> 00:08:36,159
my application source code is stored in

00:08:34,440 --> 00:08:38,719
github.com

00:08:36,159 --> 00:08:40,159
my container image is stored in ibm

00:08:38,719 --> 00:08:43,519
container registry

00:08:40,159 --> 00:08:45,120
on ibm cloud i have a kubernetes cluster

00:08:43,519 --> 00:08:47,920
running on ibm cloud

00:08:45,120 --> 00:08:50,240
and enable the kinetic add-on so that

00:08:47,920 --> 00:08:53,200
the managed kinetic and tactile

00:08:50,240 --> 00:08:55,680
has have been installed in my cluster

00:08:53,200 --> 00:08:59,040
just by a single click

00:08:55,680 --> 00:09:01,839
let's assume i have a hello service

00:08:59,040 --> 00:09:02,720
running in my production environment i

00:09:01,839 --> 00:09:06,160
have a lot

00:09:02,720 --> 00:09:11,040
defined to pass 100 traffic

00:09:06,160 --> 00:09:11,040
to my hello production revision

00:09:15,519 --> 00:09:23,839
let's show this in our terminal window

00:09:28,000 --> 00:09:37,839
you will see there is one revision there

00:09:30,800 --> 00:09:37,839
named as hello production

00:09:38,720 --> 00:09:45,360
i have one load in my system used as

00:09:42,160 --> 00:09:48,839
used for product named as product route

00:09:45,360 --> 00:09:51,839
it has an endpoint let's try the

00:09:48,839 --> 00:09:51,839
endpoint

00:09:54,399 --> 00:10:02,640
it's a hello service it will return

00:09:58,480 --> 00:10:05,760
a hello statement okay so hello world

00:10:02,640 --> 00:10:08,880
this is kubecon europe 2020

00:10:05,760 --> 00:10:09,839
and it will return uh kubecon europe

00:10:08,880 --> 00:10:13,760
00:10:09,839 --> 00:10:16,839
stably okay

00:10:13,760 --> 00:10:19,839
all these resources are in my production

00:10:16,839 --> 00:10:19,839
environment

00:10:24,000 --> 00:10:28,640
i will start the demo i plan to use

00:10:27,040 --> 00:10:32,079
canadia and attack tong

00:10:28,640 --> 00:10:34,959
to create a canary release pipeline

00:10:32,079 --> 00:10:37,839
i'm going to do a git commit and trigger

00:10:34,959 --> 00:10:40,720
attack time pipeline to do the tasks

00:10:37,839 --> 00:10:41,120
since it need time to complete the task

00:10:40,720 --> 00:10:43,680
and

00:10:41,120 --> 00:10:44,320
it's a live demo i will make a commit

00:10:43,680 --> 00:10:48,720
first

00:10:44,320 --> 00:10:53,680
and explain later i will go to my

00:10:48,720 --> 00:10:55,920
git ripple okay this is my git repo

00:10:53,680 --> 00:10:57,680
i will change the source code of my

00:10:55,920 --> 00:11:01,839
application

00:10:57,680 --> 00:11:01,839
and make a make a commit

00:11:03,600 --> 00:11:11,600
you see there is a kukkong europe 2020

00:11:07,279 --> 00:11:11,600
i'm going to change it to 2021

00:11:13,279 --> 00:11:17,920
and the make up committee's commitment

00:11:15,440 --> 00:11:17,920
message

00:11:23,120 --> 00:11:26,320
we have done the commit

00:11:27,519 --> 00:11:31,120
i will start a watch window

00:11:34,480 --> 00:11:43,839
to monitor the running pawn point

00:11:37,680 --> 00:11:43,839
in the backhand

00:11:45,600 --> 00:11:51,440
in the back end i have a tactile event

00:11:48,720 --> 00:11:54,399
listener defined in my cluster

00:11:51,440 --> 00:11:57,279
i have an ingress and a webhook is

00:11:54,399 --> 00:12:01,120
defined in github to send the github

00:11:57,279 --> 00:12:01,120
event to this event listener

00:12:01,440 --> 00:12:11,839
let's see

00:12:12,000 --> 00:12:16,959
i have a i have a webhook defined

00:12:17,440 --> 00:12:24,079
so when a git

00:12:20,560 --> 00:12:25,120
commit happened github will send an

00:12:24,079 --> 00:12:28,160
event message

00:12:25,120 --> 00:12:29,360
to the event listener and the event

00:12:28,160 --> 00:12:34,079
listener will pass

00:12:29,360 --> 00:12:34,079
the event message to a trigger

00:12:35,040 --> 00:12:41,040
the trigger will extract

00:12:38,320 --> 00:12:41,839
the useful data and pass them to a

00:12:41,040 --> 00:12:45,120
tactile

00:12:41,839 --> 00:12:46,480
pipeline the tactile pipeline has two

00:12:45,120 --> 00:12:49,040
tasks

00:12:46,480 --> 00:12:50,240
one task is to build the cells into a

00:12:49,040 --> 00:12:52,560
container image

00:12:50,240 --> 00:12:54,000
and push the push it to the image

00:12:52,560 --> 00:12:58,959
registry

00:12:54,000 --> 00:13:02,399
the other one is to deploy

00:12:58,959 --> 00:13:02,399
objects to kinetic

00:13:04,079 --> 00:13:07,839
let's see the detail

00:13:14,720 --> 00:13:21,839
you see i have two tasks just to image

00:13:17,360 --> 00:13:21,839
and deploy use kubekato

00:13:25,040 --> 00:13:32,880
i have a pipeline and in my watch window

00:13:29,519 --> 00:13:34,399
you will see two tasks have already been

00:13:32,880 --> 00:13:36,480
completed

00:13:34,399 --> 00:13:39,760
why is sauce to image the other one is

00:13:36,480 --> 00:13:39,760
deployed to cluster

00:13:43,680 --> 00:13:51,279
after these two tasks completed

00:13:48,000 --> 00:13:54,399
a configuration and revision

00:13:51,279 --> 00:13:58,240
and route will be created

00:13:54,399 --> 00:14:03,360
the route will generate an endpoint

00:13:58,240 --> 00:14:05,839
we can invoke that endpoint for testing

00:14:03,360 --> 00:14:05,839
let's see

00:14:12,959 --> 00:14:18,639
you see i have two revision now this

00:14:16,079 --> 00:14:19,120
hello production is the old one and the

00:14:18,639 --> 00:14:22,399
hello

00:14:19,120 --> 00:14:28,160
internal movie 2021

00:14:22,399 --> 00:14:28,160
is the it's a it's the new one we just

00:14:28,839 --> 00:14:31,839
created

00:14:32,959 --> 00:14:36,800
and we have two routes one is the

00:14:35,600 --> 00:14:38,720
production route

00:14:36,800 --> 00:14:40,160
and the other one is named as hello

00:14:38,720 --> 00:14:43,440
internal internal

00:14:40,160 --> 00:14:59,839
it's an is a new one new new route

00:14:43,440 --> 00:14:59,839
for the new revision so we can test it

00:15:00,320 --> 00:15:03,360
you will see the output message is

00:15:02,480 --> 00:15:09,120
kubcon

00:15:03,360 --> 00:15:09,120
2021 now so this is a new version of

00:15:10,839 --> 00:15:13,839
app

00:15:29,199 --> 00:15:34,720
we can do a fully test for the new

00:15:32,320 --> 00:15:34,720
version

00:15:36,320 --> 00:15:42,320
after testing we ensure

00:15:39,680 --> 00:15:43,360
that the new endpoint of the new version

00:15:42,320 --> 00:15:46,399
of the app

00:15:43,360 --> 00:15:50,079
has has no failures or exceptions in the

00:15:46,399 --> 00:15:50,079
tester case test cases

00:15:52,160 --> 00:15:56,959
we want to integrate the new revision

00:15:55,600 --> 00:16:00,079
the new endpoint

00:15:56,959 --> 00:16:00,639
to the real production and split a small

00:16:00,079 --> 00:16:04,079
part

00:16:00,639 --> 00:16:06,720
of traffic to it and try this new

00:16:04,079 --> 00:16:06,720
new version

00:16:07,360 --> 00:16:10,720
we will update the route

00:16:16,560 --> 00:16:23,600
so you see currently the traffic ascent

00:16:20,240 --> 00:16:26,399
is since it sent 100

00:16:23,600 --> 00:16:29,920
to a hollow production revision and now

00:16:26,399 --> 00:16:29,920
we are going to split

00:16:30,880 --> 00:16:37,839
20 percent

00:16:38,880 --> 00:16:42,000
to the new revision

00:16:43,279 --> 00:16:51,839
we will apply it

00:16:55,680 --> 00:17:05,839
okay it has been updated now let's test

00:16:59,040 --> 00:17:05,839
the production url

00:17:22,640 --> 00:17:33,840
you see mostly it will return 2020.

00:17:26,559 --> 00:17:33,840
for fewer cases it will return 2021

00:17:36,559 --> 00:17:41,360
as a summary in this presentation i

00:17:39,440 --> 00:17:42,000
showed you how to use kinetic and

00:17:41,360 --> 00:17:45,200
tactile

00:17:42,000 --> 00:17:47,760
to create a canary release with tacton

00:17:45,200 --> 00:17:50,080
and the kinetic you don't need to

00:17:47,760 --> 00:17:51,120
understand the lower level objects of

00:17:50,080 --> 00:17:54,400
kubernetes

00:17:51,120 --> 00:17:55,840
you only view tasks pipelines kinetic

00:17:54,400 --> 00:17:59,120
services revisions

00:17:55,840 --> 00:18:01,440
and routes one with tactile

00:17:59,120 --> 00:18:04,080
trigger and cognitive inventing you can

00:18:01,440 --> 00:18:06,160
make this pipeline more automatic

00:18:04,080 --> 00:18:07,840
the pipeline is triggered by a github

00:18:06,160 --> 00:18:09,840
committee event

00:18:07,840 --> 00:18:11,280
with api server source we mentioned the

00:18:09,840 --> 00:18:13,440
infinitive event team

00:18:11,280 --> 00:18:15,120
you can monitor the creation of a

00:18:13,440 --> 00:18:19,200
kinetic revision

00:18:15,120 --> 00:18:21,840
and trigger automatic testing

00:18:19,200 --> 00:18:24,480
i don't include this part in my demo but

00:18:21,840 --> 00:18:27,600
surely you can implement it

00:18:24,480 --> 00:18:29,880
the last part of the canary release

00:18:27,600 --> 00:18:31,679
is too low out to the new revision

00:18:29,880 --> 00:18:34,400
graduately

00:18:31,679 --> 00:18:35,360
maybe we don't want maybe we don't want

00:18:34,400 --> 00:18:38,000
to have the

00:18:35,360 --> 00:18:39,039
that part automatic because we want to

00:18:38,000 --> 00:18:42,000
do the roll out

00:18:39,039 --> 00:18:44,720
carefully and manually we can use

00:18:42,000 --> 00:18:48,160
kinetic route to define traffic

00:18:44,720 --> 00:18:50,400
it's very easy so

00:18:48,160 --> 00:18:54,799
that's the end of my presentation thank

00:18:50,400 --> 00:18:54,799

YouTube URL: https://www.youtube.com/watch?v=xK1QD_aZWq8


