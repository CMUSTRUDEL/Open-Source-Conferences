Title: CacheFilter: Flexible HTTP Caching in Envoy - Josiah Kiehl, Todd Greer
Publication date: 2020-10-21
Playlist: EnvoyCon 2020 - Virtual
Description: 
	CacheFilter: Flexible HTTP Caching in Envoy - Josiah Kiehl, Todd Greer

Web traffic relies extensively on caching proxies, and Envoy needs robust HTTP caching support to perform that role, but scaling and feature requirements vary too much for a "one size fits all" implementation. CacheFilter is an Envoy filter that handles the many caching-related request and response headers and directives, with the customizability and extensibility to support anything from single-server deployments to planetary-scale caching systems with extensive bespoke needs.
Captions: 
	00:00:02,080 --> 00:00:04,720
good morning

00:00:03,280 --> 00:00:06,560
thank you for your interest in the

00:00:04,720 --> 00:00:08,240
future of envoy based caching

00:00:06,560 --> 00:00:10,080
i'm todd greer and today i'll be

00:00:08,240 --> 00:00:11,920
describing the implementation of envoy's

00:00:10,080 --> 00:00:14,160
http caching filter

00:00:11,920 --> 00:00:15,360
but first i've asked my colleague josiah

00:00:14,160 --> 00:00:17,039
kill to say

00:00:15,360 --> 00:00:18,720
why you want caching and how to enable

00:00:17,039 --> 00:00:22,400
it josiah

00:00:18,720 --> 00:00:22,400
why does envoy need a caching filter

00:00:23,439 --> 00:00:27,760
the architecture that we have in mind

00:00:25,519 --> 00:00:28,480
when designing the cache filter is one

00:00:27,760 --> 00:00:31,760
where

00:00:28,480 --> 00:00:34,079
on voice serves as an edge proxy

00:00:31,760 --> 00:00:35,680
we have all of these clients out on the

00:00:34,079 --> 00:00:37,200
wide internet connecting to our

00:00:35,680 --> 00:00:38,719
infrastructure

00:00:37,200 --> 00:00:40,480
through an envoy which then does

00:00:38,719 --> 00:00:42,840
back-end service picking and returns the

00:00:40,480 --> 00:00:45,120
content from those services back to the

00:00:42,840 --> 00:00:47,039
clients

00:00:45,120 --> 00:00:49,039
in order to reduce the load on these

00:00:47,039 --> 00:00:50,480
backend services so we can scale them up

00:00:49,039 --> 00:00:53,520
scale them up more

00:00:50,480 --> 00:00:55,120
as well as reduce the latency for

00:00:53,520 --> 00:00:57,600
retrieving the content in the first

00:00:55,120 --> 00:01:00,879
place we want to have that

00:00:57,600 --> 00:01:02,559
envoy cache the content where possible

00:01:00,879 --> 00:01:04,239
so whenever the content is cacheable

00:01:02,559 --> 00:01:05,600
when it comes back through the envoy

00:01:04,239 --> 00:01:07,840
from a client request

00:01:05,600 --> 00:01:09,680
we will insert it to the cache uh from

00:01:07,840 --> 00:01:12,240
the via the cache filter

00:01:09,680 --> 00:01:13,680
as well as proxy it back to the client

00:01:12,240 --> 00:01:16,479
that way subsequent

00:01:13,680 --> 00:01:18,320
subsequent requests that come in will go

00:01:16,479 --> 00:01:20,640
to the cash filter get a cash hit and go

00:01:18,320 --> 00:01:22,720
straight back out to the client

00:01:20,640 --> 00:01:24,960
without incurring the back end service

00:01:22,720 --> 00:01:26,720
cost

00:01:24,960 --> 00:01:28,400
this is particularly useful when you

00:01:26,720 --> 00:01:31,200
have widely distributed

00:01:28,400 --> 00:01:32,720
architectures uh where the services

00:01:31,200 --> 00:01:34,880
could be in different data centers or

00:01:32,720 --> 00:01:37,680
different cloud regions or

00:01:34,880 --> 00:01:39,040
however you might imagine we want the

00:01:37,680 --> 00:01:43,759
content to be as close

00:01:39,040 --> 00:01:48,240
to the requesting client as possible

00:01:43,759 --> 00:01:50,560
and so we can deploy envoy instances

00:01:48,240 --> 00:01:51,680
way out in satellite locations which may

00:01:50,560 --> 00:01:53,040
or may not have

00:01:51,680 --> 00:01:56,399
instances of the service that they're

00:01:53,040 --> 00:01:58,560
asking for deployed there

00:01:56,399 --> 00:02:00,320
that envy would then route that traffic

00:01:58,560 --> 00:02:01,360
to the data center where the services

00:02:00,320 --> 00:02:03,759
exist

00:02:01,360 --> 00:02:05,360
um that request would be processed

00:02:03,759 --> 00:02:08,239
content would be retrieved

00:02:05,360 --> 00:02:09,119
sent back through the internal

00:02:08,239 --> 00:02:11,039
infrastructure

00:02:09,119 --> 00:02:12,400
to the envoy where the clients requested

00:02:11,039 --> 00:02:14,000
it and give the content back

00:02:12,400 --> 00:02:16,319
at that point the content will get

00:02:14,000 --> 00:02:17,440
cached locally as close to the clients

00:02:16,319 --> 00:02:19,840
as possible

00:02:17,440 --> 00:02:21,840
making all future requests substantially

00:02:19,840 --> 00:02:24,000
faster

00:02:21,840 --> 00:02:25,120
because we don't have to make these long

00:02:24,000 --> 00:02:28,480
distance

00:02:25,120 --> 00:02:28,480
remote service calls

00:02:29,599 --> 00:02:32,959
another situation where this might be

00:02:31,040 --> 00:02:34,400
useful is if you have envoy deployed in

00:02:32,959 --> 00:02:36,640
a service mesh

00:02:34,400 --> 00:02:38,239
where envoy is handling the intra

00:02:36,640 --> 00:02:40,319
service communication in

00:02:38,239 --> 00:02:42,400
within your backend infrastructure this

00:02:40,319 --> 00:02:43,760
isn't the first

00:02:42,400 --> 00:02:45,200
architecture that we're considering when

00:02:43,760 --> 00:02:46,959
designing the cache filter but i can

00:02:45,200 --> 00:02:47,920
imagine especially with an in-memory

00:02:46,959 --> 00:02:50,160
cache

00:02:47,920 --> 00:02:52,160
um it could be useful to cache the

00:02:50,160 --> 00:02:53,360
content that one service is requesting

00:02:52,160 --> 00:02:55,599
from another to reduce

00:02:53,360 --> 00:02:58,160
to reduce the traffic passing between

00:02:55,599 --> 00:02:58,160
the services

00:02:58,239 --> 00:03:01,360
so how do i use this cache filter now

00:03:00,159 --> 00:03:04,720
that that sounds great now

00:03:01,360 --> 00:03:07,120
we can we can see how it will help uh

00:03:04,720 --> 00:03:07,840
the simplest way is to take a look at

00:03:07,120 --> 00:03:10,159
the

00:03:07,840 --> 00:03:11,920
cache filter sandbox which exists for

00:03:10,159 --> 00:03:14,239
cache filter developers to spin up a

00:03:11,920 --> 00:03:15,840
quick onboard instances that has

00:03:14,239 --> 00:03:17,599
a quick on instance that has caching

00:03:15,840 --> 00:03:20,640
enabled and

00:03:17,599 --> 00:03:23,280
the config that turns the caching on is

00:03:20,640 --> 00:03:26,560
one that adds the cache filter to

00:03:23,280 --> 00:03:28,319
the http filter chain um at the place

00:03:26,560 --> 00:03:30,959
where the cache filter is

00:03:28,319 --> 00:03:32,319
inserted into the chain the request

00:03:30,959 --> 00:03:36,159
coming through will

00:03:32,319 --> 00:03:37,519
make a look up in the cache and then

00:03:36,159 --> 00:03:40,000
we'll make a look up to the cache that's

00:03:37,519 --> 00:03:42,640
configured here um

00:03:40,000 --> 00:03:44,879
in the in this case it's configuring the

00:03:42,640 --> 00:03:48,720
simple http cache

00:03:44,879 --> 00:03:51,519
um and retrieve the content from there

00:03:48,720 --> 00:03:53,760
anything else that affects the um cache

00:03:51,519 --> 00:03:54,879
behavior such as what very headers do we

00:03:53,760 --> 00:03:56,879
respect

00:03:54,879 --> 00:03:57,920
um from the back ends of how this

00:03:56,879 --> 00:04:00,239
content will differ

00:03:57,920 --> 00:04:01,519
from request to request that also gets

00:04:00,239 --> 00:04:04,720
configured in this

00:04:01,519 --> 00:04:06,560
in this config there's a

00:04:04,720 --> 00:04:07,760
very likely as feature development

00:04:06,560 --> 00:04:10,720
continues we will add

00:04:07,760 --> 00:04:12,480
a bunch more configuration options to

00:04:10,720 --> 00:04:14,080
the envoy config

00:04:12,480 --> 00:04:15,599
the things noted on this slide don't

00:04:14,080 --> 00:04:18,079
exist yet but we expect them to in the

00:04:15,599 --> 00:04:18,079
near future

00:04:21,840 --> 00:04:26,720
thank you josiah so how does cash filter

00:04:24,880 --> 00:04:28,400
work

00:04:26,720 --> 00:04:30,240
if you're watching this presentation you

00:04:28,400 --> 00:04:33,199
probably have some familiarity with how

00:04:30,240 --> 00:04:35,120
envoy manages his http filters

00:04:33,199 --> 00:04:36,800
envoy has a chain of filters when a

00:04:35,120 --> 00:04:38,240
request comes in

00:04:36,800 --> 00:04:40,400
filter manager iterates through the

00:04:38,240 --> 00:04:42,720
chain of requests in order

00:04:40,400 --> 00:04:43,440
notifying each one when the response

00:04:42,720 --> 00:04:44,560
comes back

00:04:43,440 --> 00:04:47,040
it goes through the chain in the

00:04:44,560 --> 00:04:48,639
opposite order some filters are only

00:04:47,040 --> 00:04:50,479
involved in one direction or the other

00:04:48,639 --> 00:04:52,800
but catch filter is an inten

00:04:50,479 --> 00:04:54,880
is an encoder decoder filter so it's

00:04:52,800 --> 00:04:57,520
active in both directions

00:04:54,880 --> 00:04:59,840
now there is no one size fits all to

00:04:57,520 --> 00:05:02,080
caching http traffic

00:04:59,840 --> 00:05:04,080
some deployments are well served by one

00:05:02,080 --> 00:05:06,160
small in-memory cache

00:05:04,080 --> 00:05:09,120
while others require the scalability of

00:05:06,160 --> 00:05:11,520
a large distributed caching system

00:05:09,120 --> 00:05:13,280
in order to support that flexibility

00:05:11,520 --> 00:05:15,360
cache filter delegates the actual

00:05:13,280 --> 00:05:18,880
storage of responses to a c plus

00:05:15,360 --> 00:05:21,199
plugin interface which we call http

00:05:18,880 --> 00:05:21,199
cache

00:05:21,520 --> 00:05:25,520
cache filter handles the intricacies of

00:05:23,919 --> 00:05:27,840
http caching semantics

00:05:25,520 --> 00:05:29,440
things like parsing relevant headers and

00:05:27,840 --> 00:05:30,960
determining what can and cannot be

00:05:29,440 --> 00:05:32,960
cached

00:05:30,960 --> 00:05:34,560
and it handles implementing envoy

00:05:32,960 --> 00:05:37,600
interfaces

00:05:34,560 --> 00:05:38,720
this allows http cache plugin

00:05:37,600 --> 00:05:41,759
implementers to focus

00:05:38,720 --> 00:05:45,039
only on storage or

00:05:41,759 --> 00:05:48,320
other value-added responses that

00:05:45,039 --> 00:05:51,680
their plugin needs to provide

00:05:48,320 --> 00:05:54,000
this well this enables the writing of a

00:05:51,680 --> 00:05:55,120
wide variety of plugins for divergent

00:05:54,000 --> 00:05:58,400
needs

00:05:55,120 --> 00:06:01,039
those plugins can be http aware

00:05:58,400 --> 00:06:03,440
if needed but they can also be simple

00:06:01,039 --> 00:06:06,960
key value stores

00:06:03,440 --> 00:06:10,000
we have an example simple http filter

00:06:06,960 --> 00:06:13,360
or a simple http cache that

00:06:10,000 --> 00:06:15,600
is in fact just a wrapper around a hash

00:06:13,360 --> 00:06:15,600
map

00:06:15,680 --> 00:06:20,560
when envoy has parsed in http request

00:06:18,639 --> 00:06:22,000
setters it calls the decode headers

00:06:20,560 --> 00:06:24,160
method of each filter

00:06:22,000 --> 00:06:26,080
when it gets to cache filter if it's a

00:06:24,160 --> 00:06:26,800
get request we look in the cache for our

00:06:26,080 --> 00:06:29,840
matching

00:06:26,800 --> 00:06:31,680
response if one is found we

00:06:29,840 --> 00:06:35,840
interrupt the normal filter iteration

00:06:31,680 --> 00:06:35,840
and return a response from cache filter

00:06:36,000 --> 00:06:39,840
let's take a slightly more detailed look

00:06:37,919 --> 00:06:42,240
at what this process looks like from the

00:06:39,840 --> 00:06:44,080
perspective of cache filter

00:06:42,240 --> 00:06:46,479
when the filter manager calls decode

00:06:44,080 --> 00:06:49,840
headers on cache filter

00:06:46,479 --> 00:06:51,280
we ask we ask http cache for a lookup

00:06:49,840 --> 00:06:53,599
context

00:06:51,280 --> 00:06:56,319
lookup context is one of the interfaces

00:06:53,599 --> 00:06:58,960
implemented by the plugin provider

00:06:56,319 --> 00:07:02,160
along with http cache itself it

00:06:58,960 --> 00:07:04,880
represents the active lookup operation

00:07:02,160 --> 00:07:05,759
we then kick off an asynchronous get

00:07:04,880 --> 00:07:08,560
headers request

00:07:05,759 --> 00:07:09,120
to find headers from a cached response

00:07:08,560 --> 00:07:12,080
while this

00:07:09,120 --> 00:07:13,599
while this is happening we return stop

00:07:12,080 --> 00:07:15,680
all iteration and watermark

00:07:13,599 --> 00:07:18,160
which is a status code that tells envoy

00:07:15,680 --> 00:07:20,560
to pause the current request

00:07:18,160 --> 00:07:23,120
otherwise it would get sent upstream

00:07:20,560 --> 00:07:24,720
while we're busy checking the cache

00:07:23,120 --> 00:07:26,800
which would cause a problem if we got a

00:07:24,720 --> 00:07:30,000
hit when the

00:07:26,800 --> 00:07:32,319
cache plugin completes the lookup it

00:07:30,000 --> 00:07:33,120
invokes our callback with the results in

00:07:32,319 --> 00:07:34,800
the case of a hit

00:07:33,120 --> 00:07:36,400
those results will include the cache

00:07:34,800 --> 00:07:38,319
responses headers

00:07:36,400 --> 00:07:40,319
which we pass on to filter manager by

00:07:38,319 --> 00:07:42,160
calling encode headers

00:07:40,319 --> 00:07:44,240
this tells envoy to send those response

00:07:42,160 --> 00:07:46,319
headers to the client

00:07:44,240 --> 00:07:48,560
if the results indicate that the cache

00:07:46,319 --> 00:07:49,840
result that the cached response has a

00:07:48,560 --> 00:07:52,160
body

00:07:49,840 --> 00:07:53,280
we then make one or more asynchronous

00:07:52,160 --> 00:07:56,879
get body requests

00:07:53,280 --> 00:07:58,560
to retrieve it calling encode data

00:07:56,879 --> 00:08:00,879
to send each chunk of data onto the

00:07:58,560 --> 00:08:02,720
client

00:08:00,879 --> 00:08:04,319
at the end of this process the entire

00:08:02,720 --> 00:08:06,720
response will have been streamed

00:08:04,319 --> 00:08:07,840
to the client from the cache now i'd

00:08:06,720 --> 00:08:13,599
love to go into much more

00:08:07,840 --> 00:08:16,879
detail like this but time is short

00:08:13,599 --> 00:08:19,360
but of course not every request is a hit

00:08:16,879 --> 00:08:21,039
in the cache

00:08:19,360 --> 00:08:23,599
we certainly intend for most of them to

00:08:21,039 --> 00:08:26,400
be cash hits but those that aren't

00:08:23,599 --> 00:08:28,080
uh are referred to as cash misses and of

00:08:26,400 --> 00:08:30,000
course this

00:08:28,080 --> 00:08:31,199
miss can happen because it's literally

00:08:30,000 --> 00:08:34,240
not in the cache

00:08:31,199 --> 00:08:34,640
or we could be talking about something

00:08:34,240 --> 00:08:37,760
that

00:08:34,640 --> 00:08:39,519
was found in the cache but is too stale

00:08:37,760 --> 00:08:41,440
to serve or something like that

00:08:39,519 --> 00:08:44,000
for some reason it cannot the entry in

00:08:41,440 --> 00:08:47,040
the cache can't actually be used

00:08:44,000 --> 00:08:49,760
in either case uh if we

00:08:47,040 --> 00:08:50,880
back up uh to the point where we are

00:08:49,760 --> 00:08:52,480
getting the response back from the

00:08:50,880 --> 00:08:55,519
lookup context

00:08:52,480 --> 00:08:58,480
uh in in the previous scenario we

00:08:55,519 --> 00:09:00,160
got uh a result that said this is a

00:08:58,480 --> 00:09:02,560
cache hit here are the headers

00:09:00,160 --> 00:09:04,000
uh in this scenario we get a result that

00:09:02,560 --> 00:09:08,160
says sorry

00:09:04,000 --> 00:09:12,000
this is a miss and uh when that happens

00:09:08,160 --> 00:09:15,519
but instead of calling encode data and

00:09:12,000 --> 00:09:16,160
giving envoy headers to send to the

00:09:15,519 --> 00:09:18,800
client

00:09:16,160 --> 00:09:19,920
we simply call continued decoding which

00:09:18,800 --> 00:09:22,800
tells envoy

00:09:19,920 --> 00:09:24,399
hey you know how we had you pause early

00:09:22,800 --> 00:09:27,680
earlier yeah sorry about that

00:09:24,399 --> 00:09:30,080
just you know keep on going nothing to

00:09:27,680 --> 00:09:30,080
see here

00:09:30,240 --> 00:09:34,160
proceed as usual and so of course envoy

00:09:33,600 --> 00:09:36,959
does it

00:09:34,160 --> 00:09:38,560
iterates through the remaining filters

00:09:36,959 --> 00:09:41,839
and

00:09:38,560 --> 00:09:45,200
on and on we go now of course if that

00:09:41,839 --> 00:09:46,880
when that happens that respond that

00:09:45,200 --> 00:09:49,600
request will presumably generate a

00:09:46,880 --> 00:09:52,080
response that comes back

00:09:49,600 --> 00:09:53,279
into the into the cache filter on the

00:09:52,080 --> 00:09:56,320
other direction

00:09:53,279 --> 00:09:57,360
uh and that'll be as we'll see the

00:09:56,320 --> 00:10:02,399
headers in the

00:09:57,360 --> 00:10:04,640
encode headers call from filter manager

00:10:02,399 --> 00:10:06,320
in in code headers of course we've got

00:10:04,640 --> 00:10:09,600
actually uh quite a bit of logic

00:10:06,320 --> 00:10:11,279
to do to figure out we've got to

00:10:09,600 --> 00:10:13,760
look for you know look at the different

00:10:11,279 --> 00:10:15,680
rules for whether something is cacheable

00:10:13,760 --> 00:10:17,519
you know is there an authorization

00:10:15,680 --> 00:10:20,240
header is there a

00:10:17,519 --> 00:10:22,160
cache control header what are the what

00:10:20,240 --> 00:10:25,760
are the directives

00:10:22,160 --> 00:10:27,200
uh all these uh different uh

00:10:25,760 --> 00:10:28,480
is it a response to conditional headers

00:10:27,200 --> 00:10:29,680
all the all these sorts of different

00:10:28,480 --> 00:10:33,040
things that need to be evaluated we

00:10:29,680 --> 00:10:34,959
evaluate them and once we've done that

00:10:33,040 --> 00:10:37,040
if we determine that in fact this is

00:10:34,959 --> 00:10:38,800
a cachable response we will of course

00:10:37,040 --> 00:10:41,920
then cache it

00:10:38,800 --> 00:10:45,920
uh so in particular we will

00:10:41,920 --> 00:10:46,240
uh in a now familiar familiar pattern

00:10:45,920 --> 00:10:50,079
ask

00:10:46,240 --> 00:10:53,600
http cache for an insert context

00:10:50,079 --> 00:10:58,079
and then we'll use that insert context

00:10:53,600 --> 00:11:01,600
to insert headers now

00:10:58,079 --> 00:11:02,399
we don't really care uh what the results

00:11:01,600 --> 00:11:05,680
are in terms of

00:11:02,399 --> 00:11:07,760
affecting our behavior uh we

00:11:05,680 --> 00:11:09,600
need to uh probably report some stats

00:11:07,760 --> 00:11:10,560
the stats is one of the outstanding

00:11:09,600 --> 00:11:13,920
items

00:11:10,560 --> 00:11:15,600
but the we're going to respond the same

00:11:13,920 --> 00:11:17,519
we're going to allow the package to pass

00:11:15,600 --> 00:11:21,440
through the same so we don't actually

00:11:17,519 --> 00:11:25,040
uh wait for a response to insert

00:11:21,440 --> 00:11:28,399
headers we call you and

00:11:25,040 --> 00:11:30,560
fire and forget keep going when the

00:11:28,399 --> 00:11:32,079
when envoy eventually tells us hey

00:11:30,560 --> 00:11:34,800
here's a body

00:11:32,079 --> 00:11:35,519
assuming in fact that there is a body in

00:11:34,800 --> 00:11:39,760
this response

00:11:35,519 --> 00:11:43,279
we get told that via the encode body

00:11:39,760 --> 00:11:44,959
callback from filter manager and

00:11:43,279 --> 00:11:46,560
as you'd expect we then turn around and

00:11:44,959 --> 00:11:49,839
insert that body

00:11:46,560 --> 00:11:50,959
into the insert context and we fully

00:11:49,839 --> 00:11:52,079
expect that it should be able to deal

00:11:50,959 --> 00:11:55,600
with it

00:11:52,079 --> 00:11:56,079
and if it can't then that again won't

00:11:55,600 --> 00:12:00,000
affect

00:11:56,079 --> 00:12:01,279
this response because the primary

00:12:00,000 --> 00:12:03,120
thing that's happening is routing the

00:12:01,279 --> 00:12:05,120
response to the client inserting into

00:12:03,120 --> 00:12:06,399
the cache is a secondary concern an

00:12:05,120 --> 00:12:09,120
important concern

00:12:06,399 --> 00:12:10,560
but secondary nonetheless by the way it

00:12:09,120 --> 00:12:13,600
is perfectly reasonable

00:12:10,560 --> 00:12:17,519
for a cash filter

00:12:13,600 --> 00:12:21,279
http cash plug-in to arbitrarily refuse

00:12:17,519 --> 00:12:25,040
to insert some requests

00:12:21,279 --> 00:12:28,320
perhaps a server is overloaded

00:12:25,040 --> 00:12:30,000
or there's some header some non-standard

00:12:28,320 --> 00:12:31,920
header that it looks at

00:12:30,000 --> 00:12:34,000
for whatever reason if it wants to it

00:12:31,920 --> 00:12:37,519
can simply refuse to insert these

00:12:34,000 --> 00:12:40,079
and that is fine uh see the comments on

00:12:37,519 --> 00:12:41,680
in the insert context class for more

00:12:40,079 --> 00:12:44,000
details

00:12:41,680 --> 00:12:45,200
we are going to be making a few changes

00:12:44,000 --> 00:12:47,920
there

00:12:45,200 --> 00:12:50,000
in the near future to better report

00:12:47,920 --> 00:12:53,360
statistics

00:12:50,000 --> 00:12:54,880
so to write a plugin for cache filter

00:12:53,360 --> 00:12:58,160
these are the four classes you need to

00:12:54,880 --> 00:12:59,680
implement http cache along with http

00:12:58,160 --> 00:13:03,279
cache factory

00:12:59,680 --> 00:13:04,160
and the lookup context and insert

00:13:03,279 --> 00:13:08,880
context which

00:13:04,160 --> 00:13:08,880
is the analog on the insert side

00:13:09,279 --> 00:13:13,360
now i mentioned before that there is no

00:13:11,639 --> 00:13:15,920
one-size-fits-all

00:13:13,360 --> 00:13:17,920
approach and one of the consequences of

00:13:15,920 --> 00:13:20,160
different approaches is that

00:13:17,920 --> 00:13:21,360
we can have some caches that are

00:13:20,160 --> 00:13:25,519
synchronous and return

00:13:21,360 --> 00:13:28,480
a response immediately while others

00:13:25,519 --> 00:13:28,800
might issue an rpc and then come back on

00:13:28,480 --> 00:13:33,040
some

00:13:28,800 --> 00:13:35,200
unpredictable thread the

00:13:33,040 --> 00:13:37,680
way that cash filter deals with that is

00:13:35,200 --> 00:13:40,079
via its callbacks

00:13:37,680 --> 00:13:41,839
all of the callbacks that it provides

00:13:40,079 --> 00:13:45,360
are able to be called

00:13:41,839 --> 00:13:47,279
on any thread you can call them

00:13:45,360 --> 00:13:49,440
before you return control back to cash

00:13:47,279 --> 00:13:52,160
filter or after

00:13:49,440 --> 00:13:52,160
it doesn't matter

00:13:52,639 --> 00:13:58,480
and cash filter takes care of

00:13:56,079 --> 00:14:01,040
moving things to the right thread when

00:13:58,480 --> 00:14:01,040
it's necessary

00:14:01,760 --> 00:14:04,800
so you don't need to worry about it now

00:14:04,399 --> 00:14:06,959
uh

00:14:04,800 --> 00:14:07,920
with that i'll hand it back to josiah to

00:14:06,959 --> 00:14:08,560
talk about the current state of

00:14:07,920 --> 00:14:12,240
development

00:14:08,560 --> 00:14:12,240
on this project just saying

00:14:12,480 --> 00:14:19,040
so is the cache filter production ready

00:14:16,320 --> 00:14:21,519
from a cash semantic standpoint like is

00:14:19,040 --> 00:14:24,160
the cash filter rfc compliant

00:14:21,519 --> 00:14:24,800
um in many cases yes for basic cash

00:14:24,160 --> 00:14:27,760
requests

00:14:24,800 --> 00:14:29,279
including cash control and vary and

00:14:27,760 --> 00:14:30,800
validation

00:14:29,279 --> 00:14:33,279
request flows with e-tags and last

00:14:30,800 --> 00:14:34,240
modified um that's all implemented and

00:14:33,279 --> 00:14:36,240
ready to go

00:14:34,240 --> 00:14:38,000
uh some of the more advanced validation

00:14:36,240 --> 00:14:40,720
logic like with

00:14:38,000 --> 00:14:41,279
um if none manage etc like those listed

00:14:40,720 --> 00:14:42,880
there

00:14:41,279 --> 00:14:44,240
that's not yet implemented and we'll

00:14:42,880 --> 00:14:45,199
actually just skip caching if those are

00:14:44,240 --> 00:14:48,480
present

00:14:45,199 --> 00:14:50,240
um and the cache control extensions like

00:14:48,480 --> 00:14:51,760
immutable and these others

00:14:50,240 --> 00:14:54,880
those are also not yet implemented but

00:14:51,760 --> 00:14:54,880
they're not as commonly used

00:14:56,399 --> 00:14:59,839
if you're asking will it work with the

00:14:58,399 --> 00:15:00,560
cash that i have in my infrastructure

00:14:59,839 --> 00:15:04,399
today

00:15:00,560 --> 00:15:06,639
uh the answer is no uh we do not have

00:15:04,399 --> 00:15:08,160
any production-ready implementations of

00:15:06,639 --> 00:15:09,839
http cache

00:15:08,160 --> 00:15:11,680
the only cache implementation that

00:15:09,839 --> 00:15:12,959
exists today is the example one simple

00:15:11,680 --> 00:15:15,360
http cache

00:15:12,959 --> 00:15:16,639
and that's really just there so that if

00:15:15,360 --> 00:15:19,199
you wanted

00:15:16,639 --> 00:15:20,320
the envoy cache filter to work with

00:15:19,199 --> 00:15:24,880
ignite or with

00:15:20,320 --> 00:15:26,000
memcached or whichever then

00:15:24,880 --> 00:15:28,160
you would have to write an

00:15:26,000 --> 00:15:30,000
implementation of http cache

00:15:28,160 --> 00:15:31,600
so that the cache filter could use it

00:15:30,000 --> 00:15:36,160
and serve content from

00:15:31,600 --> 00:15:36,160
that remote from that remote cache

00:15:36,720 --> 00:15:40,000
there's a whole list of issues on github

00:15:38,880 --> 00:15:41,279
that we know we need to have

00:15:40,000 --> 00:15:43,360
done before we can declare this thing

00:15:41,279 --> 00:15:43,920
production ready one of the most

00:15:43,360 --> 00:15:45,279
important

00:15:43,920 --> 00:15:47,360
is that the in-memory cache which i

00:15:45,279 --> 00:15:50,399
mentioned the simple http cache

00:15:47,360 --> 00:15:52,720
is not scalable um it currently doesn't

00:15:50,399 --> 00:15:54,560
do any memory management it will

00:15:52,720 --> 00:15:56,639
you can spin up envoy have it cache your

00:15:54,560 --> 00:15:57,440
content and it will very quickly run out

00:15:56,639 --> 00:15:59,040
of memory

00:15:57,440 --> 00:16:01,279
because it doesn't do any sort of

00:15:59,040 --> 00:16:02,320
management on the back end

00:16:01,279 --> 00:16:04,000
there's also some other basic

00:16:02,320 --> 00:16:04,720
functionality like serving head requests

00:16:04,000 --> 00:16:07,279
and

00:16:04,720 --> 00:16:08,720
important things like gathering stats on

00:16:07,279 --> 00:16:10,639
cash requests

00:16:08,720 --> 00:16:11,920
and just a whole list of other things

00:16:10,639 --> 00:16:14,320
that need to be done that are

00:16:11,920 --> 00:16:16,800
all filed under the area slash cash

00:16:14,320 --> 00:16:18,720
label in github

00:16:16,800 --> 00:16:21,440
uh if all that sounds great and you're

00:16:18,720 --> 00:16:23,839
ready to dive in and help

00:16:21,440 --> 00:16:25,120
one of the most important things that we

00:16:23,839 --> 00:16:27,680
need people to contribute

00:16:25,120 --> 00:16:28,160
are these plugins for the various caches

00:16:27,680 --> 00:16:30,399
um

00:16:28,160 --> 00:16:32,320
so if if you have expertise in any of

00:16:30,399 --> 00:16:33,199
these caches and want envoy to work with

00:16:32,320 --> 00:16:36,079
them please

00:16:33,199 --> 00:16:37,040
write an implementation for the http

00:16:36,079 --> 00:16:39,519
cache interface

00:16:37,040 --> 00:16:41,040
so that envoy can talk to it the

00:16:39,519 --> 00:16:42,959
interface is ready to go

00:16:41,040 --> 00:16:45,120
and it would be great to have these

00:16:42,959 --> 00:16:46,320
implementations to test the cache filter

00:16:45,120 --> 00:16:48,839
itself against

00:16:46,320 --> 00:16:50,320
and so we would happily support that

00:16:48,839 --> 00:16:51,920
effort

00:16:50,320 --> 00:16:54,079
if you need to get in touch with either

00:16:51,920 --> 00:16:56,000
todd or me you can find us on the envoy

00:16:54,079 --> 00:16:57,680
slack

00:16:56,000 --> 00:16:59,839
we are almost always logged in there

00:16:57,680 --> 00:17:02,560
because this is part of our day job

00:16:59,839 --> 00:17:03,120
and the list of issues that we know need

00:17:02,560 --> 00:17:04,559
to be done

00:17:03,120 --> 00:17:06,480
are currently filed under that label

00:17:04,559 --> 00:17:07,919
that i mentioned and

00:17:06,480 --> 00:17:09,520
if any of those catch your interest you

00:17:07,919 --> 00:17:11,039
can either post some comments in the

00:17:09,520 --> 00:17:15,039
issues or tag us on

00:17:11,039 --> 00:17:15,039
on slack and we'll get you started

00:17:15,439 --> 00:17:19,120
so that does it for our presentation uh

00:17:17,679 --> 00:17:20,959
thanks for following along

00:17:19,120 --> 00:17:22,319
and thank you even more if you're

00:17:20,959 --> 00:17:23,280
looking to get started contributing to

00:17:22,319 --> 00:17:24,880
the cash filter

00:17:23,280 --> 00:17:26,959
uh our contact information is right

00:17:24,880 --> 00:17:28,799
there and we will take questions from

00:17:26,959 --> 00:17:33,840
here

00:17:28,799 --> 00:17:33,840
hello can you hear me

00:17:35,840 --> 00:17:41,120
okay so uh

00:17:39,679 --> 00:17:43,200
just so i think you may have said

00:17:41,120 --> 00:17:46,020
something

00:17:43,200 --> 00:17:48,640
but i didn't hear anything

00:17:46,020 --> 00:17:51,440
[Music]

00:17:48,640 --> 00:17:52,480
okay i wanted to mention something about

00:17:51,440 --> 00:17:56,240
there was a question

00:17:52,480 --> 00:17:59,280
earlier about cash purge

00:17:56,240 --> 00:18:02,720
one of the things that

00:17:59,280 --> 00:18:05,360
we need to figure out is the

00:18:02,720 --> 00:18:05,840
is the approach is used for catchphrase

00:18:05,360 --> 00:18:09,280
because

00:18:05,840 --> 00:18:10,240
uh different style caches have different

00:18:09,280 --> 00:18:12,559
needs you know so

00:18:10,240 --> 00:18:13,520
uh for some you can do it what is

00:18:12,559 --> 00:18:15,760
literally cashback

00:18:13,520 --> 00:18:16,559
you go and delete the entries that you

00:18:15,760 --> 00:18:20,000
want to be gone

00:18:16,559 --> 00:18:21,360
uh for others you do a uh invalidation

00:18:20,000 --> 00:18:23,840
approach where you

00:18:21,360 --> 00:18:25,360
where you record entries that say hey if

00:18:23,840 --> 00:18:26,480
you find the thing in the cache don't

00:18:25,360 --> 00:18:28,960
serve it

00:18:26,480 --> 00:18:30,080
um that invalidation approach makes more

00:18:28,960 --> 00:18:33,919
sense for uh

00:18:30,080 --> 00:18:37,200
look for widely distributed uh caches

00:18:33,919 --> 00:18:40,400
and maybe we can support both

00:18:37,200 --> 00:18:43,520
together in a weird way and you know

00:18:40,400 --> 00:18:44,880
so we gotta figure out the next event uh

00:18:43,520 --> 00:18:45,600
just another mic check can you hear me

00:18:44,880 --> 00:18:48,160
now

00:18:45,600 --> 00:18:49,679
yes excellent i think one of the other

00:18:48,160 --> 00:18:50,320
questions that we haven't addressed in

00:18:49,679 --> 00:18:53,039
the chat

00:18:50,320 --> 00:18:53,039
is uh

00:18:53,360 --> 00:18:57,840
is it possible to catch just one route

00:18:55,840 --> 00:19:01,280
match from the list

00:18:57,840 --> 00:19:02,880
uh i'm i'm assuming that means like

00:19:01,280 --> 00:19:04,000
cache key configuration like deciding

00:19:02,880 --> 00:19:07,039
what parts of

00:19:04,000 --> 00:19:07,440
the of the path contribute to the cache

00:19:07,039 --> 00:19:09,520
key

00:19:07,440 --> 00:19:10,640
like deciding whether or not to include

00:19:09,520 --> 00:19:12,799
query params

00:19:10,640 --> 00:19:15,200
or whether to include the protocol and

00:19:12,799 --> 00:19:16,799
those sorts of things

00:19:15,200 --> 00:19:19,039
if i have a different idea of what that

00:19:16,799 --> 00:19:19,440
question means but go ahead okay so to

00:19:19,039 --> 00:19:22,240
answer

00:19:19,440 --> 00:19:23,360
if that's the question uh then that is a

00:19:22,240 --> 00:19:24,320
planned feature it's not currently

00:19:23,360 --> 00:19:26,480
supported um

00:19:24,320 --> 00:19:27,919
and that would be one of those things uh

00:19:26,480 --> 00:19:29,120
i might have mentioned it in the slide

00:19:27,919 --> 00:19:30,080
about things that we would add to the

00:19:29,120 --> 00:19:33,360
config and like

00:19:30,080 --> 00:19:36,160
how you decide how the cache decides

00:19:33,360 --> 00:19:37,520
whether to split issues or split entries

00:19:36,160 --> 00:19:39,360
or not

00:19:37,520 --> 00:19:40,880
yeah and some of that is already in the

00:19:39,360 --> 00:19:42,720
config just not uh

00:19:40,880 --> 00:19:44,000
it doesn't have any effect yet right it

00:19:42,720 --> 00:19:47,520
doesn't go anywhere

00:19:44,000 --> 00:19:50,080
yeah um another thing so so

00:19:47,520 --> 00:19:50,720
uh what i think the question was was

00:19:50,080 --> 00:19:53,919
talking about

00:19:50,720 --> 00:19:57,280
uh you know the fact that filter config

00:19:53,919 --> 00:20:00,799
is uh per uh listener

00:19:57,280 --> 00:20:01,760
and that tells you what filters are in

00:20:00,799 --> 00:20:03,600
stack and then

00:20:01,760 --> 00:20:04,880
you wanted to have different routes have

00:20:03,600 --> 00:20:06,880
different config

00:20:04,880 --> 00:20:08,559
that is something we definitely need um

00:20:06,880 --> 00:20:12,159
to add is per route

00:20:08,559 --> 00:20:14,880
uh configuration um and that just

00:20:12,159 --> 00:20:17,120
that's just a matter of getting that

00:20:14,880 --> 00:20:17,120
done

00:20:18,799 --> 00:20:23,360
so we say like does the interface to

00:20:20,720 --> 00:20:26,880
http cache plug-in allow for coalescing

00:20:23,360 --> 00:20:27,840
um i believe it does but i think todd

00:20:26,880 --> 00:20:29,200
you would probably have a bit more

00:20:27,840 --> 00:20:33,360
insight on that

00:20:29,200 --> 00:20:36,799
uh yes it absolutely does um so

00:20:33,360 --> 00:20:40,159
all you need to do for for coalescing

00:20:36,799 --> 00:20:40,480
is basically have multiple things come

00:20:40,159 --> 00:20:45,120
in

00:20:40,480 --> 00:20:48,880
and uh if they're misses just

00:20:45,120 --> 00:20:49,760
don't respond to the the second third

00:20:48,880 --> 00:20:54,000
whatever

00:20:49,760 --> 00:20:56,799
one uh telling us that that it's a miss

00:20:54,000 --> 00:20:57,440
just just let it go i just let it sit

00:20:56,799 --> 00:21:00,799
and wait

00:20:57,440 --> 00:21:02,400
and uh that works fine now probably we

00:21:00,799 --> 00:21:05,280
would need

00:21:02,400 --> 00:21:06,080
some configuration around like you know

00:21:05,280 --> 00:21:07,840
maximum

00:21:06,080 --> 00:21:09,600
delays and stuff like that but

00:21:07,840 --> 00:21:16,400
fundamentally yeah you could do it

00:21:09,600 --> 00:21:17,760
in a plug-in today

00:21:16,400 --> 00:21:19,200
yeah the next next question is how do

00:21:17,760 --> 00:21:21,039
items get pushed out of cash now uh the

00:21:19,200 --> 00:21:23,919
short answer is that's up to the plugin

00:21:21,039 --> 00:21:25,600
and the plugins currently implemented

00:21:23,919 --> 00:21:26,400
like the simple http cache just doesn't

00:21:25,600 --> 00:21:30,400
do it

00:21:26,400 --> 00:21:32,480
um and so depending on how the cache

00:21:30,400 --> 00:21:33,840
works that we're talking to whether it's

00:21:32,480 --> 00:21:34,720
like a remote cache like redis or

00:21:33,840 --> 00:21:36,080
something else

00:21:34,720 --> 00:21:37,760
or if it's an in-memory cache that's

00:21:36,080 --> 00:21:40,880
written completely within envoy

00:21:37,760 --> 00:21:43,200
um it's gonna be plug-in specific

00:21:40,880 --> 00:21:46,159
how that's managed but the simple http

00:21:43,200 --> 00:21:48,880
cache just doesn't do it

00:21:46,159 --> 00:21:50,480
yeah um and just to be clear that's just

00:21:48,880 --> 00:21:51,919
because we haven't gotten around to it

00:21:50,480 --> 00:21:53,360
yeah sure i mean we are not going to go

00:21:51,919 --> 00:21:54,000
into production without a feature like

00:21:53,360 --> 00:21:55,760
that like

00:21:54,000 --> 00:21:57,360
uh that this is just like the simple

00:21:55,760 --> 00:21:58,159
http cache is good for development and

00:21:57,360 --> 00:22:00,720
it's good to say

00:21:58,159 --> 00:22:03,520
hey my caching semantics work but it is

00:22:00,720 --> 00:22:06,640
not good to put in front of live traffic

00:22:03,520 --> 00:22:07,120
yeah um i do think that we are going to

00:22:06,640 --> 00:22:09,200
need

00:22:07,120 --> 00:22:10,159
there are more configuration options

00:22:09,200 --> 00:22:13,360
that will

00:22:10,159 --> 00:22:16,240
uh need to be added uh so

00:22:13,360 --> 00:22:18,000
like i assume any cash plug-in is gonna

00:22:16,240 --> 00:22:22,400
need a mac space

00:22:18,000 --> 00:22:26,000
uh option um a max time yeah uh

00:22:22,400 --> 00:22:26,960
probably so as well uh and you know so

00:22:26,000 --> 00:22:28,000
there are probably some other things

00:22:26,960 --> 00:22:31,200
that are universal

00:22:28,000 --> 00:22:35,280
uh we also in in standard envoy fashion

00:22:31,200 --> 00:22:38,240
have uh you can specify you know

00:22:35,280 --> 00:22:39,200
opaque to cat stuff that's okay to catch

00:22:38,240 --> 00:22:42,320
filter that is just

00:22:39,200 --> 00:22:44,960
handed to the plugin for whatever

00:22:42,320 --> 00:22:45,440
configuration you need yeah like whether

00:22:44,960 --> 00:22:46,880
that's

00:22:45,440 --> 00:22:50,480
custom headers or other sort of like

00:22:46,880 --> 00:22:50,480
metadata that gets passed along for sure

00:22:52,799 --> 00:22:56,400
let's see have we missed any questions

00:23:01,600 --> 00:23:04,799
one thing that i i wanted to explicitly

00:23:04,400 --> 00:23:07,039
mention

00:23:04,799 --> 00:23:08,320
just because i i don't know whether i

00:23:07,039 --> 00:23:08,960
don't think we've mentioned it before is

00:23:08,320 --> 00:23:12,159
that

00:23:08,960 --> 00:23:15,679
uh is in terms of cash admittance policy

00:23:12,159 --> 00:23:19,360
and that is you know we might expand

00:23:15,679 --> 00:23:21,120
where you can have different policies

00:23:19,360 --> 00:23:22,480
in the cash filter but another option is

00:23:21,120 --> 00:23:25,120
that just because

00:23:22,480 --> 00:23:26,400
we call your plugin and say here's

00:23:25,120 --> 00:23:26,880
something please insert it you don't

00:23:26,400 --> 00:23:29,600
have to

00:23:26,880 --> 00:23:31,600
actually insert it you can say gee

00:23:29,600 --> 00:23:34,240
thanks nope

00:23:31,600 --> 00:23:37,840
i'm gonna pass and not insert it so you

00:23:34,240 --> 00:23:37,840
can do whatever you want there um

00:23:38,960 --> 00:23:45,360
yeah uh to answer shakti's question uh

00:23:42,000 --> 00:23:46,480
so the plan is to to say yes that you

00:23:45,360 --> 00:23:49,360
can use redis as

00:23:46,480 --> 00:23:50,559
a remote cache with uh http cache filter

00:23:49,360 --> 00:23:52,720
or with the cache filter

00:23:50,559 --> 00:23:53,600
um but there is not currently a plug-in

00:23:52,720 --> 00:23:56,880
implementation

00:23:53,600 --> 00:23:58,960
that implements redis's api so

00:23:56,880 --> 00:24:00,720
once somebody gets inspired and says hey

00:23:58,960 --> 00:24:03,200
i'd really like to use redis with envoy

00:24:00,720 --> 00:24:04,640
and writes the plugin for it then envoy

00:24:03,200 --> 00:24:05,840
will support talking to it because the

00:24:04,640 --> 00:24:07,360
interfaces are all there

00:24:05,840 --> 00:24:09,360
we just don't act we don't have the

00:24:07,360 --> 00:24:10,720
plugin for redis yet and it's it's

00:24:09,360 --> 00:24:13,840
designed to do that sort of thing

00:24:10,720 --> 00:24:17,520
we just need the plugin yeah the the

00:24:13,840 --> 00:24:19,440
the root concept behind this was hey

00:24:17,520 --> 00:24:21,039
at google we have these really kind of

00:24:19,440 --> 00:24:24,000
weird requirements that that

00:24:21,039 --> 00:24:25,200
most people don't have can we make it

00:24:24,000 --> 00:24:26,240
how do we do caching in a way that

00:24:25,200 --> 00:24:27,840
handles our

00:24:26,240 --> 00:24:29,279
requirements and also other people's

00:24:27,840 --> 00:24:31,440
requirements and the answer was hey

00:24:29,279 --> 00:24:34,000
let's make it a plug-in

00:24:31,440 --> 00:24:35,360
that whatever's special is the plugin um

00:24:34,000 --> 00:24:37,679
so like i don't think

00:24:35,360 --> 00:24:38,960
we're going to be contributing the redis

00:24:37,679 --> 00:24:42,400
cache just because that doesn't

00:24:38,960 --> 00:24:43,200
happen to uh be relevant to our to you

00:24:42,400 --> 00:24:46,559
know google's

00:24:43,200 --> 00:24:47,279
business needs but uh we are absolutely

00:24:46,559 --> 00:24:49,200
going to

00:24:47,279 --> 00:24:50,320
uh do anything we can to hold your hand

00:24:49,200 --> 00:24:53,600
while you add it

00:24:50,320 --> 00:24:56,000
uh oh yeah right and like

00:24:53,600 --> 00:24:57,279
to build on that um we are not red as

00:24:56,000 --> 00:25:00,080
experts we don't use redis

00:24:57,279 --> 00:25:01,360
and so it's probably not good for us to

00:25:00,080 --> 00:25:02,640
be writing that plug-in anyway we

00:25:01,360 --> 00:25:04,320
wouldn't be very good at keeping up with

00:25:02,640 --> 00:25:05,440
releases and making sure that it and

00:25:04,320 --> 00:25:07,360
that sort of thing like it's

00:25:05,440 --> 00:25:08,480
it's not good for us to own things that

00:25:07,360 --> 00:25:11,360
we don't use

00:25:08,480 --> 00:25:12,400
um but it is in our best interest to

00:25:11,360 --> 00:25:15,279
have somebody else

00:25:12,400 --> 00:25:16,320
contributing those um so that we have

00:25:15,279 --> 00:25:18,640
users adding

00:25:16,320 --> 00:25:19,440
requirements to both the cache filter

00:25:18,640 --> 00:25:22,960
itself and

00:25:19,440 --> 00:25:24,320
the http cache uh interface like

00:25:22,960 --> 00:25:25,919
if we're missing a piece of the

00:25:24,320 --> 00:25:27,039
interface that something like redis or

00:25:25,919 --> 00:25:30,159
memcached and stuff

00:25:27,039 --> 00:25:31,679
need then uh we want to be extending the

00:25:30,159 --> 00:25:34,159
generic portions of

00:25:31,679 --> 00:25:35,600
of the code to to support those things

00:25:34,159 --> 00:25:37,520
and so if somebody comes along with

00:25:35,600 --> 00:25:38,720
the specific needs that redis has we're

00:25:37,520 --> 00:25:41,120
happy to support

00:25:38,720 --> 00:25:42,159
those needs we just don't want to own

00:25:41,120 --> 00:25:45,520
the redis

00:25:42,159 --> 00:25:48,480
http cache implementation itself

00:25:45,520 --> 00:25:49,600
yeah so yeah please you know file bugs

00:25:48,480 --> 00:25:52,720
prs

00:25:49,600 --> 00:25:55,919
questions um i think uh

00:25:52,720 --> 00:25:58,960
which i mentioned earlier you know a

00:25:55,919 --> 00:26:01,120
lot often on we're routinely on on

00:25:58,960 --> 00:26:02,240
slack you know we answer email all that

00:26:01,120 --> 00:26:05,360
stuff so

00:26:02,240 --> 00:26:11,760
we we are motivated to help uh any

00:26:05,360 --> 00:26:13,840
efforts on this

00:26:11,760 --> 00:26:15,120
and somebody can't ask a live question

00:26:13,840 --> 00:26:16,559
if if you

00:26:15,120 --> 00:26:19,600
feel so inclined you know we don't have

00:26:16,559 --> 00:26:25,840
to be the only ones talking

00:26:19,600 --> 00:26:25,840
the formative left

00:26:26,960 --> 00:26:31,120
yes this is in the main repo yeah and in

00:26:29,279 --> 00:26:32,080
fact if you just add the cache config

00:26:31,120 --> 00:26:32,880
that i mentioned earlier in the

00:26:32,080 --> 00:26:35,679
presentation

00:26:32,880 --> 00:26:36,480
um then it'll load it into your your

00:26:35,679 --> 00:26:38,559
filter chain

00:26:36,480 --> 00:26:40,559
uh because it's it's in it's like it's

00:26:38,559 --> 00:26:43,600
merged into main line right now

00:26:40,559 --> 00:26:46,159
yeah now it is still considered alpha

00:26:43,600 --> 00:26:47,279
we haven't we haven't done fuzzing on it

00:26:46,159 --> 00:26:50,559
you know which is really

00:26:47,279 --> 00:26:52,640
right yeah it is definitely

00:26:50,559 --> 00:26:53,600
we don't think that it should be used in

00:26:52,640 --> 00:26:56,640
production

00:26:53,600 --> 00:26:59,840
um but if you have uh if

00:26:56,640 --> 00:27:03,360
you have the the time and ability to

00:26:59,840 --> 00:27:05,520
bulletproof it then then by all means

00:27:03,360 --> 00:27:07,200
yeah we're not taking a claim on any of

00:27:05,520 --> 00:27:09,840
this if you want to help out

00:27:07,200 --> 00:27:10,640
anywhere in the code we are happy about

00:27:09,840 --> 00:27:12,320
that

00:27:10,640 --> 00:27:13,840
yeah it's like we plan to get it to

00:27:12,320 --> 00:27:16,880
production ready but uh

00:27:13,840 --> 00:27:18,399
like it's it's not there yet

00:27:16,880 --> 00:27:20,159
what is missing to rounded in production

00:27:18,399 --> 00:27:22,640
um an http cache

00:27:20,159 --> 00:27:24,240
implementation that is scalable uh the

00:27:22,640 --> 00:27:25,360
only implementation we have right now is

00:27:24,240 --> 00:27:27,600
not production ready

00:27:25,360 --> 00:27:29,360
uh that's the primary thing um the basic

00:27:27,600 --> 00:27:32,720
cache semantics

00:27:29,360 --> 00:27:35,440
um are ready like it supports cache

00:27:32,720 --> 00:27:37,600
control and all of the basic like dtl

00:27:35,440 --> 00:27:39,120
type headers um there's some more

00:27:37,600 --> 00:27:40,720
advanced stuff that that

00:27:39,120 --> 00:27:42,240
it doesn't support yet like some of the

00:27:40,720 --> 00:27:44,960
more unique validation

00:27:42,240 --> 00:27:45,520
flows but for basic caching it'll work

00:27:44,960 --> 00:27:47,120
and it will

00:27:45,520 --> 00:27:48,559
handle most requests and where it

00:27:47,120 --> 00:27:52,240
doesn't work it

00:27:48,559 --> 00:27:54,880
it's still rfc compliant um

00:27:52,240 --> 00:27:56,480
so it ignore it ignores some you know if

00:27:54,880 --> 00:27:59,679
it's if it doesn't understand something

00:27:56,480 --> 00:28:00,159
like if range it just says okay never

00:27:59,679 --> 00:28:03,679
mind

00:28:00,159 --> 00:28:06,559
i'm not catching for sure um to describe

00:28:03,679 --> 00:28:07,440
scalable in this context the most clear

00:28:06,559 --> 00:28:09,679
way

00:28:07,440 --> 00:28:11,600
to point out that simple http cache the

00:28:09,679 --> 00:28:13,120
only http cache implementation is not

00:28:11,600 --> 00:28:13,919
ready for production is that it does

00:28:13,120 --> 00:28:15,520
absolutely no

00:28:13,919 --> 00:28:17,440
memory management and it will keep

00:28:15,520 --> 00:28:19,120
adding entries to the cache until you

00:28:17,440 --> 00:28:20,080
run out of memory and envoy probably

00:28:19,120 --> 00:28:22,240
crashes

00:28:20,080 --> 00:28:23,520
um so that's that's the most obvious

00:28:22,240 --> 00:28:25,679
flaw with it

00:28:23,520 --> 00:28:27,679
but it also doesn't do sharding or other

00:28:25,679 --> 00:28:29,200
things that impact performance

00:28:27,679 --> 00:28:31,840
like you're probably going to get lot

00:28:29,200 --> 00:28:33,520
contention and like it's it's just

00:28:31,840 --> 00:28:35,440
like it's written as an example

00:28:33,520 --> 00:28:39,600
implementation to prove the interface

00:28:35,440 --> 00:28:39,600
not to serve live traffic

00:28:41,600 --> 00:28:45,840
yeah and we think we can turn it into a

00:28:44,240 --> 00:28:48,880
production quality

00:28:45,840 --> 00:28:50,640
thing while still being a good example

00:28:48,880 --> 00:28:52,159
um you know if that person's wrong maybe

00:28:50,640 --> 00:28:54,720
we'll split it but

00:28:52,159 --> 00:28:54,720
that's the plan

00:28:56,320 --> 00:28:59,840
uh we actually had a slide on that how

00:28:58,080 --> 00:29:00,799
many how many like it's it's a

00:28:59,840 --> 00:29:03,039
relatively

00:29:00,799 --> 00:29:05,279
simple interface i wonder if we have

00:29:03,039 --> 00:29:08,559
this an easy way to

00:29:05,279 --> 00:29:12,080
show that less than a dozen um much less

00:29:08,559 --> 00:29:14,559
than it doesn't

00:29:12,080 --> 00:29:15,440
where is this uh yeah if you if you

00:29:14,559 --> 00:29:18,399
check with slides

00:29:15,440 --> 00:29:20,480
it'll be in there we don't have time um

00:29:18,399 --> 00:29:21,279
yeah we've got about 30 seconds left but

00:29:20,480 --> 00:29:23,200
um

00:29:21,279 --> 00:29:24,480
actually if you if no it's fine it's

00:29:23,200 --> 00:29:27,520
like if um

00:29:24,480 --> 00:29:30,880
if you look at the http cache uh class

00:29:27,520 --> 00:29:32,480
in the in the github like search then

00:29:30,880 --> 00:29:34,480
then you should be able to see it like

00:29:32,480 --> 00:29:36,399
it's it's very straightforward

00:29:34,480 --> 00:29:37,520
yeah that and look up next and insert

00:29:36,399 --> 00:29:39,279
context

00:29:37,520 --> 00:29:40,720
right yeah the two context objects and

00:29:39,279 --> 00:29:44,080
then the http cache

00:29:40,720 --> 00:29:47,840
interface itself but yeah it's it's

00:29:44,080 --> 00:29:49,840
we're talking like less than 20 probably

00:29:47,840 --> 00:29:51,440
like i mean if you i don't maybe maybe

00:29:49,840 --> 00:29:54,399
if you add them add all the

00:29:51,440 --> 00:29:55,360
all the three classes together like it's

00:29:54,399 --> 00:29:58,240
it's it's not

00:29:55,360 --> 00:29:58,240
it's not obnoxious

00:30:00,000 --> 00:30:03,120
uh and with that we're at one o'clock

00:30:01,760 --> 00:30:07,919
and so

00:30:03,120 --> 00:30:07,919

YouTube URL: https://www.youtube.com/watch?v=uIgYxp-SbBw


