Title: Authorization with Envoy at Square - Jelle Vanhorenbeke
Publication date: 2020-10-21
Playlist: EnvoyCon 2020 - Virtual
Description: 
	Authorization with Envoy at Square - Jelle Vanhorenbeke

Every organization has different authentication and authorization needs and it is not always clear how Envoy can help to abstract this from the application layer. In this talk we will show you how Square leverages Envoy's â€™s ext_authz filter and how our centralized authorization service has become the new source of truth for hundreds of services. We will cover how we migrated multiple authorization libraries to this centralized authorization service and how we rolled out these changes to production. This process has benefited other teams and allowed them to launch new features that were previously not possible.
Captions: 
	00:00:01,280 --> 00:00:05,520
hi everyone my name is jealous and today

00:00:04,400 --> 00:00:07,839
i'm going to talk about

00:00:05,520 --> 00:00:10,240
authorization at square i'm a software

00:00:07,839 --> 00:00:12,960
engineer on square's developers iam team

00:00:10,240 --> 00:00:15,040
and i've been on this team for almost a

00:00:12,960 --> 00:00:16,400
year and a half now and the entire time

00:00:15,040 --> 00:00:17,520
on the team i've been working on

00:00:16,400 --> 00:00:18,800
authorization

00:00:17,520 --> 00:00:20,560
which is what i would like to talk about

00:00:18,800 --> 00:00:21,840
today

00:00:20,560 --> 00:00:23,680
here's a quick agenda of the different

00:00:21,840 --> 00:00:26,160
topics i'm going to cover

00:00:23,680 --> 00:00:26,800
first i'll talk a little bit about envoy

00:00:26,160 --> 00:00:28,840
at square

00:00:26,800 --> 00:00:30,320
then give you a quick overview of our

00:00:28,840 --> 00:00:32,160
previous

00:00:30,320 --> 00:00:33,680
authorization architecture some of the

00:00:32,160 --> 00:00:34,079
problems and challenges we face with

00:00:33,680 --> 00:00:36,480
that

00:00:34,079 --> 00:00:39,120
and then how we're leveraging envoy to

00:00:36,480 --> 00:00:41,360
do authorization

00:00:39,120 --> 00:00:44,079
before we do that i do want to talk

00:00:41,360 --> 00:00:45,920
about authentication and authorization

00:00:44,079 --> 00:00:47,280
uh authentication is a process verifying

00:00:45,920 --> 00:00:49,039
your identity

00:00:47,280 --> 00:00:50,320
are you who you say you are is this the

00:00:49,039 --> 00:00:52,559
authentic sally

00:00:50,320 --> 00:00:54,000
while authorization is a process of

00:00:52,559 --> 00:00:54,719
verifying that someone has the right

00:00:54,000 --> 00:00:57,120
permissions

00:00:54,719 --> 00:00:58,800
and is allowed to do uh what they want

00:00:57,120 --> 00:01:00,559
to do

00:00:58,800 --> 00:01:02,239
uh and during this talk we're going to

00:01:00,559 --> 00:01:04,400
cover the second bullet point

00:01:02,239 --> 00:01:05,760
which is authorization and i know that

00:01:04,400 --> 00:01:08,240
very often these two

00:01:05,760 --> 00:01:10,880
go together and i would encourage people

00:01:08,240 --> 00:01:12,640
to try to think about them separately

00:01:10,880 --> 00:01:14,799
we are definitely trying to decouple

00:01:12,640 --> 00:01:17,040
these two at square as much as possible

00:01:14,799 --> 00:01:18,479
because i think that gives your

00:01:17,040 --> 00:01:20,560
architecture a little bit more

00:01:18,479 --> 00:01:22,159
flexibility

00:01:20,560 --> 00:01:23,680
next i would like to introduce you to

00:01:22,159 --> 00:01:25,759
safe uh safe is

00:01:23,680 --> 00:01:27,040
our session authorization framework

00:01:25,759 --> 00:01:30,240
enforcer it's

00:01:27,040 --> 00:01:33,840
one of the authorization frameworks

00:01:30,240 --> 00:01:36,720
available for service owners at square

00:01:33,840 --> 00:01:38,479
next on voice safe which is our uh envoy

00:01:36,720 --> 00:01:39,439
based authorization solution which is

00:01:38,479 --> 00:01:41,680
the main solution

00:01:39,439 --> 00:01:42,960
i'm going to talk about today and it

00:01:41,680 --> 00:01:43,680
takes a lot of the things that were

00:01:42,960 --> 00:01:46,560
available

00:01:43,680 --> 00:01:47,520
in our safe framework and it took that

00:01:46,560 --> 00:01:49,600
and moved it to

00:01:47,520 --> 00:01:52,479
an actual service that we are leveraging

00:01:49,600 --> 00:01:56,960
with our service mesh

00:01:52,479 --> 00:01:59,280
uh next on voyage square so

00:01:56,960 --> 00:02:00,159
there's a great talk uh that two of my

00:01:59,280 --> 00:02:02,000
colleagues

00:02:00,159 --> 00:02:03,360
gave at this exact same conference two

00:02:02,000 --> 00:02:05,840
years ago

00:02:03,360 --> 00:02:06,399
and a lot of the things they talked

00:02:05,840 --> 00:02:09,520
about

00:02:06,399 --> 00:02:11,200
then now are a reality at square so

00:02:09,520 --> 00:02:12,879
we're at the next level where now we can

00:02:11,200 --> 00:02:15,200
leverage our service mesh

00:02:12,879 --> 00:02:16,800
to build a lot of these new exciting

00:02:15,200 --> 00:02:19,360
features

00:02:16,800 --> 00:02:20,319
and so some of the highlights and things

00:02:19,360 --> 00:02:22,080
to keep in mind that

00:02:20,319 --> 00:02:25,440
are important for this talk is that

00:02:22,080 --> 00:02:26,879
square has a centralized control plane

00:02:25,440 --> 00:02:28,879
and the control plane has a

00:02:26,879 --> 00:02:30,480
preconfigured cache with sidecar

00:02:28,879 --> 00:02:34,400
configurations

00:02:30,480 --> 00:02:34,400
also known as snapshots

00:02:35,120 --> 00:02:38,160
and now a quick overview of

00:02:37,040 --> 00:02:39,920
authorization

00:02:38,160 --> 00:02:41,840
or how we used to do authorization at

00:02:39,920 --> 00:02:44,319
square

00:02:41,840 --> 00:02:45,360
we had multiple authorization strategies

00:02:44,319 --> 00:02:47,280
so

00:02:45,360 --> 00:02:48,959
services could implement different

00:02:47,280 --> 00:02:51,040
libraries or leverage different

00:02:48,959 --> 00:02:53,040
libraries to do authorizations

00:02:51,040 --> 00:02:54,800
some of these were using protos some of

00:02:53,040 --> 00:02:55,120
these some of these other libraries such

00:02:54,800 --> 00:02:58,640
as

00:02:55,120 --> 00:03:00,480
safe they had echo like files

00:02:58,640 --> 00:03:01,680
or you could specify the the different

00:03:00,480 --> 00:03:04,000
rules

00:03:01,680 --> 00:03:05,680
and authorization requirements while a

00:03:04,000 --> 00:03:08,319
third set of services

00:03:05,680 --> 00:03:09,280
were using custom code no additional

00:03:08,319 --> 00:03:12,400
library

00:03:09,280 --> 00:03:15,519
and it was all uh written in the

00:03:12,400 --> 00:03:17,440
actual application layer on top of this

00:03:15,519 --> 00:03:18,879
square supports three major languages

00:03:17,440 --> 00:03:20,640
several minor

00:03:18,879 --> 00:03:22,560
and the same authorization solution is

00:03:20,640 --> 00:03:24,799
not available in all languages what they

00:03:22,560 --> 00:03:26,879
mean what that means as a service owner

00:03:24,799 --> 00:03:28,400
if you have multiple microservices

00:03:26,879 --> 00:03:30,560
written in different languages

00:03:28,400 --> 00:03:32,640
it is possible that you cannot leverage

00:03:30,560 --> 00:03:37,120
the same authorization solution

00:03:32,640 --> 00:03:38,720
for both these microservices

00:03:37,120 --> 00:03:40,560
so in reality that looks a little bit

00:03:38,720 --> 00:03:43,519
more like this and even though

00:03:40,560 --> 00:03:44,400
we try to keep these libraries in sync

00:03:43,519 --> 00:03:46,879
or or

00:03:44,400 --> 00:03:49,040
keep feature parity as much as possible

00:03:46,879 --> 00:03:51,840
that is not always the case

00:03:49,040 --> 00:03:53,319
some features get implemented in one

00:03:51,840 --> 00:03:56,400
language then they get

00:03:53,319 --> 00:03:57,280
de-prioritized uh others still haven't

00:03:56,400 --> 00:03:58,640
been developed

00:03:57,280 --> 00:04:00,319
so there's always a little bit of a

00:03:58,640 --> 00:04:03,120
difference even between the same

00:04:00,319 --> 00:04:05,439
authorization library and in different

00:04:03,120 --> 00:04:08,080
languages

00:04:05,439 --> 00:04:10,080
on top of this we have a different

00:04:08,080 --> 00:04:11,599
permission set for our private apis and

00:04:10,080 --> 00:04:13,680
our public apis

00:04:11,599 --> 00:04:15,040
and only one of our authorization

00:04:13,680 --> 00:04:17,199
frameworks is

00:04:15,040 --> 00:04:18,239
able to authorize against both sets of

00:04:17,199 --> 00:04:21,600
permissions and

00:04:18,239 --> 00:04:22,400
map them together so what that means

00:04:21,600 --> 00:04:24,560
that if you're

00:04:22,400 --> 00:04:26,960
using that framework you can completely

00:04:24,560 --> 00:04:29,919
use this authorization layer for

00:04:26,960 --> 00:04:30,800
both type of apis while if you're using

00:04:29,919 --> 00:04:33,440
a different library

00:04:30,800 --> 00:04:34,639
you still have to implement an

00:04:33,440 --> 00:04:36,560
authorization

00:04:34,639 --> 00:04:37,680
you have to implement some authorization

00:04:36,560 --> 00:04:42,000
code for

00:04:37,680 --> 00:04:43,520
private apis

00:04:42,000 --> 00:04:46,000
as you can imagine even though this

00:04:43,520 --> 00:04:48,720
works it definitely presents

00:04:46,000 --> 00:04:50,160
uh multiple challenges some of these

00:04:48,720 --> 00:04:53,040
challenges are

00:04:50,160 --> 00:04:54,720
it's really hard to know what is if all

00:04:53,040 --> 00:04:58,720
our microservices are running

00:04:54,720 --> 00:05:00,320
the latest version of our odds framework

00:04:58,720 --> 00:05:01,759
it's also hard to just roll out new

00:05:00,320 --> 00:05:03,520
features because you have to implement

00:05:01,759 --> 00:05:06,720
them in multiple languages

00:05:03,520 --> 00:05:09,440
it's it's hard to even roll them out

00:05:06,720 --> 00:05:11,280
for all the same services so you might

00:05:09,440 --> 00:05:13,600
have to implement the same feature in a

00:05:11,280 --> 00:05:15,759
different library as well

00:05:13,600 --> 00:05:16,720
on top of that given the two different

00:05:15,759 --> 00:05:19,280
permission sets

00:05:16,720 --> 00:05:22,560
i just mentioned it's it's complicated

00:05:19,280 --> 00:05:24,000
to use our public apis internally

00:05:22,560 --> 00:05:25,680
and then a lot of people would reach out

00:05:24,000 --> 00:05:27,600
to us and ask us

00:05:25,680 --> 00:05:29,840
what is right authorization strategy

00:05:27,600 --> 00:05:32,960
what is the right framework to use

00:05:29,840 --> 00:05:36,320
and there was not always a clear answer

00:05:32,960 --> 00:05:37,360
to that question besides all these

00:05:36,320 --> 00:05:39,600
problems another

00:05:37,360 --> 00:05:41,840
challenge we had it was for our infosec

00:05:39,600 --> 00:05:44,080
team it was extremely hard for them to

00:05:41,840 --> 00:05:46,080
do audits because they would have to

00:05:44,080 --> 00:05:47,360
look at these aqua files proto files or

00:05:46,080 --> 00:05:50,479
even custom code

00:05:47,360 --> 00:05:52,400
to look at things like is this endpoint

00:05:50,479 --> 00:05:55,680
exposing pii data if it is

00:05:52,400 --> 00:05:58,000
if it's requiring the right permissions

00:05:55,680 --> 00:05:58,960
uh that it should given the data it's

00:05:58,000 --> 00:06:02,240
exposing

00:05:58,960 --> 00:06:03,759
that was a very hard question to answer

00:06:02,240 --> 00:06:06,000
so we try to come up with a few

00:06:03,759 --> 00:06:07,680
solutions some of them are

00:06:06,000 --> 00:06:09,280
we need a consistent authorization

00:06:07,680 --> 00:06:11,440
strategy

00:06:09,280 --> 00:06:13,280
um and then we could also we talked

00:06:11,440 --> 00:06:15,120
about unifying both permission sets

00:06:13,280 --> 00:06:17,680
so we could reuse our public apis

00:06:15,120 --> 00:06:18,400
internally the next effort to solve the

00:06:17,680 --> 00:06:20,160
infosec

00:06:18,400 --> 00:06:22,240
problem we thought about a centralized

00:06:20,160 --> 00:06:24,720
source of truth that they could use

00:06:22,240 --> 00:06:26,000
to actually look up resources look up

00:06:24,720 --> 00:06:28,000
their requirements

00:06:26,000 --> 00:06:29,440
and and see if these permissions match

00:06:28,000 --> 00:06:32,639
what is expected

00:06:29,440 --> 00:06:34,319
uh from a security perspective some

00:06:32,639 --> 00:06:36,800
other things that came up is

00:06:34,319 --> 00:06:39,120
we need a single authorization point

00:06:36,800 --> 00:06:41,360
that way we can make sure that everyone

00:06:39,120 --> 00:06:42,479
is using the same code to authorize and

00:06:41,360 --> 00:06:46,000
they're always

00:06:42,479 --> 00:06:47,840
using the latest version available

00:06:46,000 --> 00:06:49,039
so these were some of the solutions and

00:06:47,840 --> 00:06:50,560
motivations and

00:06:49,039 --> 00:06:52,160
and then we started thinking in how we

00:06:50,560 --> 00:06:53,919
would actually uh

00:06:52,160 --> 00:06:55,680
implement these as i mentioned some of

00:06:53,919 --> 00:06:57,599
them we would be able to

00:06:55,680 --> 00:06:59,360
address this with a centralized source

00:06:57,599 --> 00:07:02,639
of truth

00:06:59,360 --> 00:07:06,560
some other issues uh we could fix them

00:07:02,639 --> 00:07:08,400
by having a single authorization point

00:07:06,560 --> 00:07:10,240
and then we also wanted to have a deny

00:07:08,400 --> 00:07:11,840
by default approach

00:07:10,240 --> 00:07:13,440
which we're still not quite sure how we

00:07:11,840 --> 00:07:15,039
were going to fix that you deny by

00:07:13,440 --> 00:07:18,240
default what it means is

00:07:15,039 --> 00:07:18,800
if a resource or an endpoint has not

00:07:18,240 --> 00:07:20,560
defined

00:07:18,800 --> 00:07:21,840
any authentication or authorization

00:07:20,560 --> 00:07:23,680
requirements

00:07:21,840 --> 00:07:26,479
it gets a night so you have to

00:07:23,680 --> 00:07:31,840
explicitly define these requirements

00:07:26,479 --> 00:07:31,840
before your endpoint will work correctly

00:07:32,160 --> 00:07:36,160
at that point we had been looking at the

00:07:34,240 --> 00:07:38,479
external ot filter that's

00:07:36,160 --> 00:07:39,759
available in envoy because we had

00:07:38,479 --> 00:07:41,919
reached a point at square where all

00:07:39,759 --> 00:07:45,199
these services had envoy side cars

00:07:41,919 --> 00:07:47,440
so now leveraging envoy became a real

00:07:45,199 --> 00:07:49,360
thing

00:07:47,440 --> 00:07:51,680
and so for those of you who are not

00:07:49,360 --> 00:07:55,199
familiar with the external oddsy

00:07:51,680 --> 00:07:56,720
filter on an envoy it's personally my

00:07:55,199 --> 00:07:59,280
favorite extension

00:07:56,720 --> 00:08:00,800
it has made my life so much easier and

00:07:59,280 --> 00:08:02,000
basically the way it works is that it's

00:08:00,800 --> 00:08:05,120
a filter that will call

00:08:02,000 --> 00:08:06,400
an external service send to the original

00:08:05,120 --> 00:08:08,639
request

00:08:06,400 --> 00:08:10,560
and the external service can then make a

00:08:08,639 --> 00:08:13,199
decision if that request

00:08:10,560 --> 00:08:14,639
is authorized or not if it's authorized

00:08:13,199 --> 00:08:17,759
it will return a 200

00:08:14,639 --> 00:08:18,400
and then envoy will move on to the next

00:08:17,759 --> 00:08:21,199
filter

00:08:18,400 --> 00:08:22,639
and eventually reach the application

00:08:21,199 --> 00:08:25,120
layer upstream and now

00:08:22,639 --> 00:08:27,680
the application upstream knows that this

00:08:25,120 --> 00:08:30,080
request has been authorized

00:08:27,680 --> 00:08:30,800
if the authorization service decides

00:08:30,080 --> 00:08:32,479
that

00:08:30,800 --> 00:08:34,080
this request is not authorized it's

00:08:32,479 --> 00:08:36,959
lacking certain permissions

00:08:34,080 --> 00:08:37,599
it can return an error such as a 403 in

00:08:36,959 --> 00:08:39,919
that case

00:08:37,599 --> 00:08:41,279
envoy will take that response return

00:08:39,919 --> 00:08:43,279
that to the client

00:08:41,279 --> 00:08:46,880
including the response body that the

00:08:43,279 --> 00:08:46,880
authorization service is returning

00:08:47,120 --> 00:08:51,760
um so basically this is how this would

00:08:49,279 --> 00:08:55,519
look like for a successful request

00:08:51,760 --> 00:08:56,320
so the client sends a request which gets

00:08:55,519 --> 00:08:57,839
proxied

00:08:56,320 --> 00:09:00,320
by envoy which then calls the

00:08:57,839 --> 00:09:02,560
authorization service receives a 200

00:09:00,320 --> 00:09:04,160
then envoy forwards the request to the

00:09:02,560 --> 00:09:06,320
application layer

00:09:04,160 --> 00:09:09,760
that who eventually will return that to

00:09:06,320 --> 00:09:11,920
the client

00:09:09,760 --> 00:09:14,000
uh as you saw earlier we use a lot of

00:09:11,920 --> 00:09:15,760
library code at square and we did not

00:09:14,000 --> 00:09:18,160
have a authorization service

00:09:15,760 --> 00:09:19,360
so we had to build an authorization

00:09:18,160 --> 00:09:22,000
service to

00:09:19,360 --> 00:09:25,040
accept and and support these uh this

00:09:22,000 --> 00:09:28,399
external rt filter

00:09:25,040 --> 00:09:28,720
for the authorization service we decided

00:09:28,399 --> 00:09:31,920
to

00:09:28,720 --> 00:09:34,480
use a database as a source of truth for

00:09:31,920 --> 00:09:36,480
all authentication and authorization

00:09:34,480 --> 00:09:39,519
requirements for all routes

00:09:36,480 --> 00:09:40,720
at square and we back that up with a on

00:09:39,519 --> 00:09:42,240
voice avi

00:09:40,720 --> 00:09:43,760
and this ui is what allowed service

00:09:42,240 --> 00:09:45,600
owners to configure their routes

00:09:43,760 --> 00:09:47,600
configure their requirements

00:09:45,600 --> 00:09:48,880
and essentially that's what would be

00:09:47,600 --> 00:09:52,720
enforced by

00:09:48,880 --> 00:09:56,399
by envoy this is a quick preview

00:09:52,720 --> 00:09:58,399
of how that ui looks like and

00:09:56,399 --> 00:09:59,920
we did go back and forth on should we

00:09:58,399 --> 00:10:03,440
use a ui in a database

00:09:59,920 --> 00:10:07,440
or should we use echo files that

00:10:03,440 --> 00:10:08,880
can be checked in in our search control

00:10:07,440 --> 00:10:10,560
and the main reason we decided to go

00:10:08,880 --> 00:10:13,279
with the ui in the database is

00:10:10,560 --> 00:10:14,160
because we're still making a lot of

00:10:13,279 --> 00:10:15,839
changes

00:10:14,160 --> 00:10:18,079
we still want to make some improvements

00:10:15,839 --> 00:10:19,440
in our authorization model

00:10:18,079 --> 00:10:22,160
and making these changes having a

00:10:19,440 --> 00:10:23,360
database is slightly easier than having

00:10:22,160 --> 00:10:26,640
to make that

00:10:23,360 --> 00:10:29,519
in files or static static files

00:10:26,640 --> 00:10:30,079
and on top of that if you want to make a

00:10:29,519 --> 00:10:31,760
change

00:10:30,079 --> 00:10:34,640
to your authorization requirements with

00:10:31,760 --> 00:10:36,560
a database you can do that immediately

00:10:34,640 --> 00:10:38,480
while if you're using apple files it

00:10:36,560 --> 00:10:41,120
would require a redeploy

00:10:38,480 --> 00:10:41,760
of the authorization service so since we

00:10:41,120 --> 00:10:43,839
have

00:10:41,760 --> 00:10:45,279
somewhere around 250 services that we

00:10:43,839 --> 00:10:48,720
were trying to migrate

00:10:45,279 --> 00:10:50,800
every single time one of those services

00:10:48,720 --> 00:10:53,920
makes a change we would have to

00:10:50,800 --> 00:10:56,079
redeploy the authorization service for

00:10:53,920 --> 00:10:58,839
that change

00:10:56,079 --> 00:11:01,839
to to show up in either staging or

00:10:58,839 --> 00:11:04,560
production

00:11:01,839 --> 00:11:04,959
next we had uh the solution in place

00:11:04,560 --> 00:11:06,640
where

00:11:04,959 --> 00:11:08,800
envoy is calling the authorization

00:11:06,640 --> 00:11:10,320
service for every single request

00:11:08,800 --> 00:11:12,959
that's when we introduce the concept of

00:11:10,320 --> 00:11:15,600
protected and unprotected routes

00:11:12,959 --> 00:11:17,600
unprotected routes uh there are routes

00:11:15,600 --> 00:11:20,720
for static content blog posts

00:11:17,600 --> 00:11:23,839
images that do not need authorization

00:11:20,720 --> 00:11:26,480
so for

00:11:23,839 --> 00:11:28,640
those routes we we really don't want

00:11:26,480 --> 00:11:29,680
envoy to call the authorization service

00:11:28,640 --> 00:11:31,760
because that's

00:11:29,680 --> 00:11:33,680
a waste of resources for both the

00:11:31,760 --> 00:11:34,560
authorization service and the request

00:11:33,680 --> 00:11:36,959
itself

00:11:34,560 --> 00:11:40,079
so in order to do that uh we started we

00:11:36,959 --> 00:11:43,040
gave service owners the option of

00:11:40,079 --> 00:11:45,680
uh saying if their routes were uh

00:11:43,040 --> 00:11:49,200
required authorization or authentication

00:11:45,680 --> 00:11:52,320
and then we built a integration uh

00:11:49,200 --> 00:11:54,320
with our centralized control plane

00:11:52,320 --> 00:11:55,360
and our authorization service which

00:11:54,320 --> 00:11:57,680
would now

00:11:55,360 --> 00:12:00,160
send over to the control plane the

00:11:57,680 --> 00:12:02,079
unprotected routes and the services

00:12:00,160 --> 00:12:03,440
so when the control plane is building a

00:12:02,079 --> 00:12:06,560
new snapshot

00:12:03,440 --> 00:12:09,200
for a envoy sidecar it would know

00:12:06,560 --> 00:12:10,320
for which routes it had to disable the

00:12:09,200 --> 00:12:12,720
external audi

00:12:10,320 --> 00:12:12,720
filter

00:12:13,360 --> 00:12:16,880
next we we had this in place uh it was

00:12:16,480 --> 00:12:19,680
great

00:12:16,880 --> 00:12:20,800
and now we had a migration challenge so

00:12:19,680 --> 00:12:23,360
we had the solution

00:12:20,800 --> 00:12:24,000
but we still had 250 services that we

00:12:23,360 --> 00:12:27,600
now needed to

00:12:24,000 --> 00:12:29,680
migrate how do we get all those

00:12:27,600 --> 00:12:31,600
rules and authorization requirements

00:12:29,680 --> 00:12:33,600
into this central storage

00:12:31,600 --> 00:12:34,880
this is when the team decided to invest

00:12:33,600 --> 00:12:38,000
some time in

00:12:34,880 --> 00:12:40,079
building migration scripts

00:12:38,000 --> 00:12:41,519
if you remember from this this previous

00:12:40,079 --> 00:12:43,440
overview

00:12:41,519 --> 00:12:44,880
different libraries some use aqua file

00:12:43,440 --> 00:12:47,440
some use proto files

00:12:44,880 --> 00:12:49,920
and what we did is we build different

00:12:47,440 --> 00:12:51,760
scripts that would extract the rules

00:12:49,920 --> 00:12:54,399
from these files and call temporary

00:12:51,760 --> 00:12:56,320
endpoints in the authorization service

00:12:54,399 --> 00:12:57,519
so we could store that data in the

00:12:56,320 --> 00:13:00,560
authorization

00:12:57,519 --> 00:13:02,079
database this turned out to be a great

00:13:00,560 --> 00:13:04,839
solution

00:13:02,079 --> 00:13:06,079
mainly because it was a very flexible

00:13:04,839 --> 00:13:08,160
approach

00:13:06,079 --> 00:13:09,680
we were the decision makers so we could

00:13:08,160 --> 00:13:12,720
allocate as many

00:13:09,680 --> 00:13:14,560
resources to this problem as we wanted

00:13:12,720 --> 00:13:17,200
and at the same time it kept both

00:13:14,560 --> 00:13:20,160
authorization strategies in sync

00:13:17,200 --> 00:13:21,279
this was very helpful as we were rolling

00:13:20,160 --> 00:13:24,720
out

00:13:21,279 --> 00:13:26,639
uh envoy safe having the ability to

00:13:24,720 --> 00:13:29,360
disable it knowing that there was still

00:13:26,639 --> 00:13:30,160
a backup strategy this library would be

00:13:29,360 --> 00:13:31,839
up to date

00:13:30,160 --> 00:13:35,839
and would have all the right

00:13:31,839 --> 00:13:35,839
requirements in place

00:13:35,920 --> 00:13:39,600
next we had a set of services that had

00:13:39,040 --> 00:13:42,560
their

00:13:39,600 --> 00:13:43,760
uh authorization requirements built in

00:13:42,560 --> 00:13:45,839
the application layer

00:13:43,760 --> 00:13:47,760
unfortunately there was no easy way to

00:13:45,839 --> 00:13:50,399
extract that data and migrate it

00:13:47,760 --> 00:13:52,000
to the authorization service so we had

00:13:50,399 --> 00:13:54,320
to work with service owners

00:13:52,000 --> 00:13:55,040
to have them manually migrate these

00:13:54,320 --> 00:13:57,920
routes

00:13:55,040 --> 00:13:58,560
this is not as ideal mainly because

00:13:57,920 --> 00:13:59,839
teams

00:13:58,560 --> 00:14:02,399
have their own deadlines their own

00:13:59,839 --> 00:14:03,600
schedules so we had to work with that

00:14:02,399 --> 00:14:05,120
and even though our teams were very

00:14:03,600 --> 00:14:07,199
supportive

00:14:05,120 --> 00:14:09,199
it's there's still no automated way to

00:14:07,199 --> 00:14:11,440
keep these both to keep both strategies

00:14:09,199 --> 00:14:13,600
in sync so now we have to ask teams

00:14:11,440 --> 00:14:14,560
hey you have to update your permission

00:14:13,600 --> 00:14:17,199
requirements

00:14:14,560 --> 00:14:17,760
in both places until we're fully rolled

00:14:17,199 --> 00:14:19,839
out

00:14:17,760 --> 00:14:23,040
and you can actually deprecate the code

00:14:19,839 --> 00:14:23,040
in your application layer

00:14:23,279 --> 00:14:27,199
uh next i would like to talk a little

00:14:24,560 --> 00:14:29,760
bit more about our our rollout strategy

00:14:27,199 --> 00:14:30,240
so at this point we had a solution in

00:14:29,760 --> 00:14:32,880
place

00:14:30,240 --> 00:14:33,279
we had a lot of data and we were ready

00:14:32,880 --> 00:14:35,040
to

00:14:33,279 --> 00:14:37,440
to try this and roll out for for

00:14:35,040 --> 00:14:39,600
multiple services

00:14:37,440 --> 00:14:41,120
and first what we did is we introduced a

00:14:39,600 --> 00:14:43,600
logging only mode

00:14:41,120 --> 00:14:45,680
um a logging only mode what that does is

00:14:43,600 --> 00:14:48,079
that our authorization service would

00:14:45,680 --> 00:14:51,120
always return to 200 no matter what

00:14:48,079 --> 00:14:52,880
the actual authorization decision was so

00:14:51,120 --> 00:14:54,240
envoy would never short-circuit the

00:14:52,880 --> 00:14:57,680
request

00:14:54,240 --> 00:14:58,240
we did this with additional metrics and

00:14:57,680 --> 00:15:00,800
logs

00:14:58,240 --> 00:15:02,720
so service owners could actually compare

00:15:00,800 --> 00:15:03,760
the decision the authorization service

00:15:02,720 --> 00:15:06,560
would have made

00:15:03,760 --> 00:15:08,720
versus what the existing library or

00:15:06,560 --> 00:15:11,600
their existing application layer

00:15:08,720 --> 00:15:13,360
actually did that allowed them to tweak

00:15:11,600 --> 00:15:15,600
their requirements

00:15:13,360 --> 00:15:17,440
tweak some of the the permissions or

00:15:15,600 --> 00:15:20,880
configurations that they had in place

00:15:17,440 --> 00:15:20,880
through the on voice safe ui

00:15:21,120 --> 00:15:28,399
uh our next uh rollout strategy

00:15:25,279 --> 00:15:30,720
is we use the runtime uh fraction

00:15:28,399 --> 00:15:32,839
configuration this allowed us to split

00:15:30,720 --> 00:15:34,959
some of the traffic and roll out on a

00:15:32,839 --> 00:15:38,480
percentage-based

00:15:34,959 --> 00:15:40,079
uh approach so what we did is that we

00:15:38,480 --> 00:15:42,480
would roll out

00:15:40,079 --> 00:15:44,000
on voice safe for five percent of a

00:15:42,480 --> 00:15:45,199
given service traffic

00:15:44,000 --> 00:15:47,199
that allowed us to make sure that the

00:15:45,199 --> 00:15:48,000
authorization service was hitting the

00:15:47,199 --> 00:15:51,120
right

00:15:48,000 --> 00:15:53,519
uh slas we were able to handle

00:15:51,120 --> 00:15:55,440
that qps and we're also sure that not

00:15:53,519 --> 00:15:56,639
we're not blocking any traffic we should

00:15:55,440 --> 00:15:58,560
not be blocking

00:15:56,639 --> 00:16:01,040
and do a little bit more of a control

00:15:58,560 --> 00:16:01,040
rollout

00:16:03,920 --> 00:16:08,399
so in order to support this percentage

00:16:05,600 --> 00:16:11,920
rollout we introduced that as part of an

00:16:08,399 --> 00:16:14,000
admin panel and we had that uh passed

00:16:11,920 --> 00:16:15,440
to the onvoice control plane through

00:16:14,000 --> 00:16:16,240
that same integration that i mentioned

00:16:15,440 --> 00:16:19,519
earlier for

00:16:16,240 --> 00:16:23,199
unprotected routes that did require

00:16:19,519 --> 00:16:24,880
some changes in our data model

00:16:23,199 --> 00:16:27,360
on the on the control plane side to

00:16:24,880 --> 00:16:30,160
support these these different values but

00:16:27,360 --> 00:16:30,160
that worked out

00:16:30,720 --> 00:16:34,320
and then next i want to talk a little

00:16:31,920 --> 00:16:37,440
bit about some of the lessons learned

00:16:34,320 --> 00:16:40,079
uh first we in our ui

00:16:37,440 --> 00:16:41,440
we allowed users or service owners to

00:16:40,079 --> 00:16:44,079
use wildcards

00:16:41,440 --> 00:16:44,480
and for for given namespaces and mark

00:16:44,079 --> 00:16:46,639
that

00:16:44,480 --> 00:16:48,320
as a unprotected route or a protected

00:16:46,639 --> 00:16:50,000
route and specify

00:16:48,320 --> 00:16:52,560
and group certain permissions and

00:16:50,000 --> 00:16:56,079
endpoints um this introduced

00:16:52,560 --> 00:16:59,920
conflicts as you can see someone would

00:16:56,079 --> 00:17:01,759
mark a wild card or all traffic

00:16:59,920 --> 00:17:03,759
as unprotected and later on a more

00:17:01,759 --> 00:17:06,400
granular route with actual

00:17:03,759 --> 00:17:07,439
authorization permissions uh

00:17:06,400 --> 00:17:09,839
requirements

00:17:07,439 --> 00:17:11,679
so we had to build some logic around

00:17:09,839 --> 00:17:15,600
that to detect these cases

00:17:11,679 --> 00:17:18,079
and either notify the end user

00:17:15,600 --> 00:17:19,760
through the ui saying hey you're

00:17:18,079 --> 00:17:21,199
introducing a conflict you might want to

00:17:19,760 --> 00:17:24,400
consider

00:17:21,199 --> 00:17:26,079
specifying a more granular route or

00:17:24,400 --> 00:17:28,240
we have to be very clever about how we

00:17:26,079 --> 00:17:29,679
organize these routes when we send them

00:17:28,240 --> 00:17:32,080
as unprotected routes to the

00:17:29,679 --> 00:17:33,520
authorization service

00:17:32,080 --> 00:17:35,840
but it's definitely something to keep in

00:17:33,520 --> 00:17:38,880
mind because we missed that

00:17:35,840 --> 00:17:40,240
initially debugging

00:17:38,880 --> 00:17:42,640
debugging becomes a little bit more

00:17:40,240 --> 00:17:45,200
challenging because now service owners

00:17:42,640 --> 00:17:47,039
have to rely on the logs

00:17:45,200 --> 00:17:48,559
we use in the service mesh or in the

00:17:47,039 --> 00:17:50,400
authorization service

00:17:48,559 --> 00:17:52,960
so they can it's a little bit harder for

00:17:50,400 --> 00:17:53,760
them to they cannot add any custom

00:17:52,960 --> 00:17:55,919
logging

00:17:53,760 --> 00:17:58,840
or custom metrics they have to rely on a

00:17:55,919 --> 00:18:01,200
more generic

00:17:58,840 --> 00:18:03,200
output and

00:18:01,200 --> 00:18:04,320
next some shortcomings we noticed with

00:18:03,200 --> 00:18:06,960
the external

00:18:04,320 --> 00:18:08,400
ozzy extension is that as i mentioned

00:18:06,960 --> 00:18:11,679
earlier it's my favorite filter

00:18:08,400 --> 00:18:13,840
and i'm not the only one who thinks that

00:18:11,679 --> 00:18:14,240
so there are a lot of teams at square

00:18:13,840 --> 00:18:16,240
who

00:18:14,240 --> 00:18:18,000
are trying to use this filter not only

00:18:16,240 --> 00:18:19,360
for authorization but for other use

00:18:18,000 --> 00:18:22,160
cases as well

00:18:19,360 --> 00:18:24,320
so this filter i think it's very

00:18:22,160 --> 00:18:28,400
versatile so it can be used for

00:18:24,320 --> 00:18:29,679
multiple use cases and solve different

00:18:28,400 --> 00:18:32,400
problems

00:18:29,679 --> 00:18:33,039
so as far as i know there's no other

00:18:32,400 --> 00:18:36,160
filter

00:18:33,039 --> 00:18:37,919
that allows you to call a service mutate

00:18:36,160 --> 00:18:40,880
the headers and mute the headers of the

00:18:37,919 --> 00:18:40,880
original request

00:18:40,960 --> 00:18:44,320
and there is no out-of-the-box way to

00:18:43,200 --> 00:18:46,640
differentiate

00:18:44,320 --> 00:18:48,400
two external odd-c filters and deploy

00:18:46,640 --> 00:18:50,960
different configurations

00:18:48,400 --> 00:18:53,120
so at the same time there's no way to

00:18:50,960 --> 00:18:54,640
enable or disable them individually

00:18:53,120 --> 00:18:56,080
that caused some conflicts between

00:18:54,640 --> 00:18:57,360
different teams who are trying to use

00:18:56,080 --> 00:18:59,440
this filter

00:18:57,360 --> 00:19:00,880
and they cannot we cannot use them for

00:18:59,440 --> 00:19:02,640
the same services

00:19:00,880 --> 00:19:03,919
because if they disable it they're

00:19:02,640 --> 00:19:06,080
disabling our solution

00:19:03,919 --> 00:19:07,200
if we disable or enable it we're also

00:19:06,080 --> 00:19:12,160
enabling

00:19:07,200 --> 00:19:15,360
the filter for on their solution

00:19:12,160 --> 00:19:18,559
there's also no way to bypass the filter

00:19:15,360 --> 00:19:21,120
for a given uh header that would have

00:19:18,559 --> 00:19:23,039
been useful in in some cases

00:19:21,120 --> 00:19:25,679
to make sure we do not reauthorize or

00:19:23,039 --> 00:19:28,160
reauthenticate a request twice

00:19:25,679 --> 00:19:28,160
and then

00:19:28,799 --> 00:19:31,919
you can't change the class of how the

00:19:31,039 --> 00:19:34,880
grpc

00:19:31,919 --> 00:19:36,840
call works and and that limits you if

00:19:34,880 --> 00:19:40,000
you want to have a microservice that

00:19:36,840 --> 00:19:41,840
implements two endpoints that

00:19:40,000 --> 00:19:44,240
could be called by the external rt

00:19:41,840 --> 00:19:47,200
filter that is no longer

00:19:44,240 --> 00:19:47,200
a possibility

00:19:47,600 --> 00:19:52,720
so conclusion we decided to move all our

00:19:50,720 --> 00:19:54,480
authorization from app and library code

00:19:52,720 --> 00:19:55,919
into the service mesh with a centralized

00:19:54,480 --> 00:19:58,640
source of truth

00:19:55,919 --> 00:20:00,320
where we are um so currently we start

00:19:58,640 --> 00:20:02,400
rolling this out in production we are

00:20:00,320 --> 00:20:06,400
targeting your rollout

00:20:02,400 --> 00:20:08,159
on voicey for closely 250 services

00:20:06,400 --> 00:20:09,840
and we're expecting to handle somewhere

00:20:08,159 --> 00:20:13,280
around uh 20k

00:20:09,840 --> 00:20:15,520
qps then our next steps uh

00:20:13,280 --> 00:20:16,720
is going to be focus a little bit more

00:20:15,520 --> 00:20:18,960
on decoupling

00:20:16,720 --> 00:20:20,240
some of our authentication authorization

00:20:18,960 --> 00:20:22,400
strategies

00:20:20,240 --> 00:20:24,000
and then that will also allow us to

00:20:22,400 --> 00:20:27,280
implement a

00:20:24,000 --> 00:20:30,000
new and more flexible permission system

00:20:27,280 --> 00:20:30,880
uh that will allow us to implement even

00:20:30,000 --> 00:20:34,080
more features

00:20:30,880 --> 00:20:35,919
from a application site

00:20:34,080 --> 00:20:37,600
that's all i had today uh thanks

00:20:35,919 --> 00:20:39,360
everyone for listening uh

00:20:37,600 --> 00:20:41,120
this is my email if you want to reach

00:20:39,360 --> 00:20:43,760
out i would love to hear

00:20:41,120 --> 00:20:44,640
how your team is solving authorization

00:20:43,760 --> 00:20:45,919
and if you're

00:20:44,640 --> 00:20:49,600
interested in working on some of these

00:20:45,919 --> 00:20:52,240
problems square is hiring

00:20:49,600 --> 00:20:52,240
thanks everyone

00:20:53,760 --> 00:20:59,440
hey everyone um thanks for

00:20:56,880 --> 00:21:00,000
for listening to the talk um let me know

00:20:59,440 --> 00:21:03,840
if you have

00:21:00,000 --> 00:21:03,840
any questions

00:21:09,039 --> 00:21:12,320
how long are you projecting this rollout

00:21:10,960 --> 00:21:16,559
to take for say 90

00:21:12,320 --> 00:21:18,400
of all services um it took us about

00:21:16,559 --> 00:21:20,000
three four months to get most of these

00:21:18,400 --> 00:21:22,080
routes um

00:21:20,000 --> 00:21:23,120
into our database and and have service

00:21:22,080 --> 00:21:24,880
owners review them

00:21:23,120 --> 00:21:26,159
update them and start rolling out in

00:21:24,880 --> 00:21:27,679
staging

00:21:26,159 --> 00:21:29,360
uh we're currently working on our

00:21:27,679 --> 00:21:30,000
rollout production we expect this to

00:21:29,360 --> 00:21:32,799
take

00:21:30,000 --> 00:21:33,520
somewhere between four four to five

00:21:32,799 --> 00:21:37,760
months

00:21:33,520 --> 00:21:37,760
um easily probably a little bit longer

00:21:41,840 --> 00:21:46,640
uh what was the overhead overhead like

00:21:44,559 --> 00:21:48,799
from running these ot calls not only out

00:21:46,640 --> 00:21:52,799
of process but over the network

00:21:48,799 --> 00:21:55,600
um that's a good question i think

00:21:52,799 --> 00:21:56,960
some of our request calls uh we have an

00:21:55,600 --> 00:21:59,840
additional latency

00:21:56,960 --> 00:21:59,840
depending on

00:22:00,000 --> 00:22:03,039
some of these calls i think our average

00:22:02,240 --> 00:22:05,840
is still below

00:22:03,039 --> 00:22:07,679
10 milliseconds which is pretty good uh

00:22:05,840 --> 00:22:09,360
for a while we were making two calls one

00:22:07,679 --> 00:22:10,640
to the authentication service and one to

00:22:09,360 --> 00:22:14,080
the authorization service

00:22:10,640 --> 00:22:18,240
and so that was um that was doubling

00:22:14,080 --> 00:22:18,240
uh almost that uh additional latency

00:22:19,760 --> 00:22:23,600
uh is mtls part of any of your

00:22:21,760 --> 00:22:25,600
architecture with ot calls

00:22:23,600 --> 00:22:27,520
um not for these rt calls we're

00:22:25,600 --> 00:22:29,840
definitely using mtls for

00:22:27,520 --> 00:22:31,600
uh some some other authorization

00:22:29,840 --> 00:22:36,080
strategies that we have in place

00:22:31,600 --> 00:22:36,080
uh but not for this particular design

00:22:39,280 --> 00:22:42,720
when db updates are done through the ui

00:22:41,440 --> 00:22:43,200
how do you push the changes through the

00:22:42,720 --> 00:22:46,480
odds

00:22:43,200 --> 00:22:48,080
service instances um

00:22:46,480 --> 00:22:49,679
yeah so the way that works is through

00:22:48,080 --> 00:22:51,200
the um

00:22:49,679 --> 00:22:53,600
integration i mentioned earlier between

00:22:51,200 --> 00:22:55,600
the control plane um so basically uh

00:22:53,600 --> 00:22:56,480
when somebody updates through the ui

00:22:55,600 --> 00:22:57,840
some of the routes some of the

00:22:56,480 --> 00:23:00,159
permission requirements

00:22:57,840 --> 00:23:02,000
this gets synced to to the database and

00:23:00,159 --> 00:23:04,640
then our authorization service

00:23:02,000 --> 00:23:06,000
and the control plane they uh are

00:23:04,640 --> 00:23:09,679
constantly syncing

00:23:06,000 --> 00:23:12,400
so when a envoy sidecar will request

00:23:09,679 --> 00:23:13,679
uh our hit our centralized uh control

00:23:12,400 --> 00:23:14,640
plane it will get an updated

00:23:13,679 --> 00:23:17,039
configuration

00:23:14,640 --> 00:23:18,080
and i think right now we can get that

00:23:17,039 --> 00:23:22,320
done in

00:23:18,080 --> 00:23:24,880
uh there's a max latency of five minutes

00:23:22,320 --> 00:23:24,880
um

00:23:29,440 --> 00:23:32,960
oh how do you deal with the situation

00:23:32,320 --> 00:23:35,200
where safe

00:23:32,960 --> 00:23:37,919
and other teams used to separate

00:23:35,200 --> 00:23:40,240
external rt filters in the same pipeline

00:23:37,919 --> 00:23:42,000
uh that is a problem we haven't solved

00:23:40,240 --> 00:23:45,039
yet it's something we're working on

00:23:42,000 --> 00:23:47,520
um we are considering making changes

00:23:45,039 --> 00:23:48,559
maybe to the external rt filter itself

00:23:47,520 --> 00:23:50,799
uh so we can

00:23:48,559 --> 00:23:52,159
identify these and enable or disable it

00:23:50,799 --> 00:23:53,679
depending on

00:23:52,159 --> 00:23:55,279
the configuration or give it some sort

00:23:53,679 --> 00:23:57,120
of identifier

00:23:55,279 --> 00:23:59,679
right now we have not solved that

00:23:57,120 --> 00:23:59,679
problem yet

00:24:03,440 --> 00:24:07,840
uh our odyssey decision always pays

00:24:05,919 --> 00:24:09,039
path-based or is there any application

00:24:07,840 --> 00:24:12,720
business logic

00:24:09,039 --> 00:24:14,880
so so far it's all path-based um

00:24:12,720 --> 00:24:16,480
and the main reason is that we try to

00:24:14,880 --> 00:24:16,960
keep as much application and business

00:24:16,480 --> 00:24:19,200
logic

00:24:16,960 --> 00:24:20,640
out of the authorization service uh

00:24:19,200 --> 00:24:22,400
that's also why we're trying to

00:24:20,640 --> 00:24:24,240
decouple some of our authentication

00:24:22,400 --> 00:24:26,880
service from our authorization service

00:24:24,240 --> 00:24:29,840
to keep some of that that logic separate

00:24:26,880 --> 00:24:30,960
uh we are working on a uh different

00:24:29,840 --> 00:24:34,480
authorization

00:24:30,960 --> 00:24:34,799
model um where you can force them of

00:24:34,480 --> 00:24:38,000
like

00:24:34,799 --> 00:24:40,480
more business logic or business decision

00:24:38,000 --> 00:24:41,919
in your and specify more granular rules

00:24:40,480 --> 00:24:44,640
um that's still

00:24:41,919 --> 00:24:45,120
under development uh but we're hoping uh

00:24:44,640 --> 00:24:46,480
by

00:24:45,120 --> 00:24:48,320
once we have that to have a little bit

00:24:46,480 --> 00:24:49,279
more flexibility and you can force on

00:24:48,320 --> 00:24:51,200
certain parameters

00:24:49,279 --> 00:24:52,720
and right because right now that still

00:24:51,200 --> 00:24:54,400
lives in on

00:24:52,720 --> 00:24:56,080
the actual application layer so it's

00:24:54,400 --> 00:24:58,080
still possible that

00:24:56,080 --> 00:25:00,080
a service will get the authorized

00:24:58,080 --> 00:25:03,120
request and need to do some uh

00:25:00,080 --> 00:25:05,760
additional uh authorization

00:25:03,120 --> 00:25:06,480
logic uh in order to especially if it's

00:25:05,760 --> 00:25:10,559
very close

00:25:06,480 --> 00:25:10,559
to the data model in that service

00:25:12,000 --> 00:25:18,159
uh did you look at oppa ferrazzi if so

00:25:15,120 --> 00:25:18,799
why did you choose a db model um we did

00:25:18,159 --> 00:25:22,000
not

00:25:18,799 --> 00:25:22,880
look into that too much um which is the

00:25:22,000 --> 00:25:25,520
db model

00:25:22,880 --> 00:25:26,799
mainly for um when i mentioned what for

00:25:25,520 --> 00:25:29,360
what i mentioned during the talk

00:25:26,799 --> 00:25:30,559
um flexibility was the main reason we

00:25:29,360 --> 00:25:32,880
decided to

00:25:30,559 --> 00:25:33,760
to move forward with a database model um

00:25:32,880 --> 00:25:37,200
also we wanted

00:25:33,760 --> 00:25:40,840
to have the ui integration uh which is

00:25:37,200 --> 00:25:43,840
some of the features we were looking to

00:25:40,840 --> 00:25:43,840
implement

00:25:44,400 --> 00:25:50,159
did you guys resolve for better uh

00:25:47,840 --> 00:25:51,200
through foot um we have not it's

00:25:50,159 --> 00:25:53,760
something we've considered

00:25:51,200 --> 00:25:54,880
um it's an optimization we might

00:25:53,760 --> 00:25:57,840
implement later

00:25:54,880 --> 00:25:58,960
on especially since as i mentioned as

00:25:57,840 --> 00:26:01,760
well

00:25:58,960 --> 00:26:02,720
there is no way to um actually skip the

00:26:01,760 --> 00:26:05,120
external odds

00:26:02,720 --> 00:26:05,840
uh filter um which is possibly a good

00:26:05,120 --> 00:26:08,080
thing but

00:26:05,840 --> 00:26:09,039
uh yeah we might consider caching uh

00:26:08,080 --> 00:26:12,320
some of the odds

00:26:09,039 --> 00:26:12,320
result results

00:26:16,480 --> 00:26:21,120
uh the does each of the rt hit the

00:26:19,520 --> 00:26:24,480
database or is there a cache

00:26:21,120 --> 00:26:25,600
um we have a cache um that has most of

00:26:24,480 --> 00:26:29,440
these patent rules

00:26:25,600 --> 00:26:29,440
uh already uh preloaded

00:26:31,440 --> 00:26:39,520
is safe odds done by save um

00:26:36,240 --> 00:26:42,960
i'm not sure uh what that question

00:26:39,520 --> 00:26:45,520
means um so we had a safe framework

00:26:42,960 --> 00:26:47,120
that was doing ot and then basically we

00:26:45,520 --> 00:26:49,360
took a lot of

00:26:47,120 --> 00:26:51,200
the way that uh authorization was being

00:26:49,360 --> 00:26:52,720
enforced by that framework and we move

00:26:51,200 --> 00:26:54,799
that to a service but it's

00:26:52,720 --> 00:26:57,440
it's essentially your implementation of

00:26:54,799 --> 00:27:00,480
some of those uh authorization rules

00:26:57,440 --> 00:27:02,400
um so safe and on voice safe it's

00:27:00,480 --> 00:27:03,520
it's uh it's a different implementation

00:27:02,400 --> 00:27:05,279
uh but they

00:27:03,520 --> 00:27:07,360
use the same concept same permission

00:27:05,279 --> 00:27:10,080
sets and some of

00:27:07,360 --> 00:27:11,840
the mapping between these uh permissions

00:27:10,080 --> 00:27:12,640
that we had for private apis and public

00:27:11,840 --> 00:27:16,320
apis

00:27:12,640 --> 00:27:18,720
so there's some like shared um

00:27:16,320 --> 00:27:20,240
concepts that these two share but the

00:27:18,720 --> 00:27:22,000
authorization service has its own

00:27:20,240 --> 00:27:34,960
implementation and does not reuse

00:27:22,000 --> 00:27:37,520
the existing safe framework

00:27:34,960 --> 00:27:38,159
uh i think i answered all the questions

00:27:37,520 --> 00:27:41,200
if i

00:27:38,159 --> 00:27:42,159
missed any of your questions um feel

00:27:41,200 --> 00:27:45,200
free to reach out

00:27:42,159 --> 00:27:48,480
uh or repost it again and

00:27:45,200 --> 00:27:50,799
i'll try to answer it um i left my email

00:27:48,480 --> 00:27:51,679
uh and in the slides so feel free to

00:27:50,799 --> 00:28:02,320
reach out

00:27:51,679 --> 00:28:07,039
and and happy to chat a little bit more

00:28:02,320 --> 00:28:07,039

YouTube URL: https://www.youtube.com/watch?v=-40Dr7tpalU


