Title: Support Arm64 platform in Envoy - Lizan Zhou
Publication date: 2020-10-21
Playlist: EnvoyCon 2020 - Virtual
Description: 
	Support Arm64 platform in Envoy - Lizan Zhou

Envoy Arm64 will be released from 1.16.0. In this LT Lizan will discuss about the effort to make Envoy officially support Arm64 based Linux. This includes some code / test change caused by different endian / memory layout and compiler defaults, how we identified these problems, and how we built CI infrastructure.
Captions: 
	00:00:01,120 --> 00:00:07,040
hello everyone welcome to envoycom

00:00:04,480 --> 00:00:08,559
today i'm going to give a talk about

00:00:07,040 --> 00:00:13,200
support arm 60

00:00:08,559 --> 00:00:16,800
platform in envoy my name is lejan zhou

00:00:13,200 --> 00:00:20,320
i work at tetrad i'm also an

00:00:16,800 --> 00:00:23,359
envoy maintainer as well

00:00:20,320 --> 00:00:24,160
so first let's go over the story of arm

00:00:23,359 --> 00:00:27,840
support in

00:00:24,160 --> 00:00:31,439
envoy the first issue about arm support

00:00:27,840 --> 00:00:33,600
opened back in 2008

00:00:31,439 --> 00:00:34,800
at that moment we didn't have enough

00:00:33,600 --> 00:00:37,600
resource

00:00:34,800 --> 00:00:38,960
either engineering resource or compute

00:00:37,600 --> 00:00:41,600
resource to

00:00:38,960 --> 00:00:42,480
have the official support for arm but

00:00:41,600 --> 00:00:46,399
there are

00:00:42,480 --> 00:00:50,000
several people in community try to build

00:00:46,399 --> 00:00:53,039
envoy on raspberry pi or other

00:00:50,000 --> 00:00:57,039
arm board then

00:00:53,039 --> 00:01:01,120
the open lab folks at the third party ci

00:00:57,039 --> 00:01:04,559
in q2 2019

00:01:01,120 --> 00:01:07,840
this year we got some support from arm

00:01:04,559 --> 00:01:10,400
and then we can we was we were able to

00:01:07,840 --> 00:01:14,640
add some experimental ci

00:01:10,400 --> 00:01:16,640
in q2 then we get it officially fully

00:01:14,640 --> 00:01:19,360
tested in q3

00:01:16,640 --> 00:01:20,400
the first official release with arm64

00:01:19,360 --> 00:01:23,759
support

00:01:20,400 --> 00:01:28,080
was released in last week um

00:01:23,759 --> 00:01:33,040
the version 1.16. is the first version

00:01:28,080 --> 00:01:35,360
of official arm 64 image build

00:01:33,040 --> 00:01:36,159
i'm going to talk about the story how we

00:01:35,360 --> 00:01:39,200
get the

00:01:36,159 --> 00:01:43,119
the first official release in

00:01:39,200 --> 00:01:46,560
ci and build system

00:01:43,119 --> 00:01:50,000
so let's go over what envoy build system

00:01:46,560 --> 00:01:52,799
envoy uses a bazel as a build tool

00:01:50,000 --> 00:01:53,520
it provides the benefit of hermetic

00:01:52,799 --> 00:01:56,960
build

00:01:53,520 --> 00:01:59,920
and remote build cache

00:01:56,960 --> 00:02:01,439
we use a remote build execution from

00:01:59,920 --> 00:02:05,840
google

00:02:01,439 --> 00:02:08,239
also we use cache for

00:02:05,840 --> 00:02:09,200
from open source project called bazel

00:02:08,239 --> 00:02:12,239
remote

00:02:09,200 --> 00:02:15,440
with s3 back-end for arm

00:02:12,239 --> 00:02:18,599
the build is really large today we have

00:02:15,440 --> 00:02:21,360
just for the binary test targets we have

00:02:18,599 --> 00:02:25,120
744 tests

00:02:21,360 --> 00:02:28,640
each test target have tens or

00:02:25,120 --> 00:02:30,640
100 test cases so this is really time

00:02:28,640 --> 00:02:33,840
consuming to run

00:02:30,640 --> 00:02:37,120
with small machines how to make this run

00:02:33,840 --> 00:02:42,480
within time is was also a challenge to

00:02:37,120 --> 00:02:42,480
get proper arm support in unvoice ci

00:02:42,800 --> 00:02:47,120
also envoy have a lot of build

00:02:44,959 --> 00:02:50,319
dependencies

00:02:47,120 --> 00:02:52,000
namely the big one is g-perf tools which

00:02:50,319 --> 00:02:55,280
is a metallog extension

00:02:52,000 --> 00:02:59,040
and ng hdb2 or http

00:02:55,280 --> 00:03:02,959
2 codec and ammo and other

00:02:59,040 --> 00:03:06,319
like protocol buffers and so on

00:03:02,959 --> 00:03:09,440
luckily we didn't have any major issue

00:03:06,319 --> 00:03:12,319
with those dependencies uh we need

00:03:09,440 --> 00:03:13,280
we had to do some small patches to make

00:03:12,319 --> 00:03:17,599
them

00:03:13,280 --> 00:03:21,440
uh work with arm build um

00:03:17,599 --> 00:03:24,480
but overall that was a small part

00:03:21,440 --> 00:03:25,120
so let's talk about the ci the unvoice

00:03:24,480 --> 00:03:28,159
ci

00:03:25,120 --> 00:03:32,560
runs on azure pipelines um

00:03:28,159 --> 00:03:35,200
before we have the arm support we

00:03:32,560 --> 00:03:36,239
we run format check and do the release

00:03:35,200 --> 00:03:40,319
and that

00:03:36,239 --> 00:03:43,040
the binary build in the release um

00:03:40,319 --> 00:03:45,519
you'll go to the docker image and we run

00:03:43,040 --> 00:03:46,560
some sanitizers coverage and gcc gccn

00:03:45,519 --> 00:03:49,280
etc

00:03:46,560 --> 00:03:50,400
i omit the mac os and windows support

00:03:49,280 --> 00:03:54,400
here

00:03:50,400 --> 00:03:58,159
then with arm we added a new arm 64

00:03:54,400 --> 00:04:01,280
release job here and then

00:03:58,159 --> 00:04:04,799
we take the binaries build from xd

00:04:01,280 --> 00:04:08,400
64 release and arm 64 release to

00:04:04,799 --> 00:04:09,439
a docker multi-arch job this one builds

00:04:08,400 --> 00:04:14,000
a multi-arch

00:04:09,439 --> 00:04:18,639
image for both um x64 and arm 64

00:04:14,000 --> 00:04:18,639
and push that to a docker hub

00:04:18,959 --> 00:04:23,600
so there were some challenges for

00:04:21,280 --> 00:04:27,600
support arm

00:04:23,600 --> 00:04:29,520
the first one is basil bezel wasn't

00:04:27,600 --> 00:04:32,080
bezel didn't have official release

00:04:29,520 --> 00:04:35,520
before 3.4

00:04:32,080 --> 00:04:36,479
um we worked with team in google to make

00:04:35,520 --> 00:04:41,120
the official

00:04:36,479 --> 00:04:44,639
um release happen azure pipeline

00:04:41,120 --> 00:04:48,080
started support arm 64 in

00:04:44,639 --> 00:04:48,639
q2 which is actually when we looked at

00:04:48,080 --> 00:04:52,240
it

00:04:48,639 --> 00:04:54,240
so this was the right timing and

00:04:52,240 --> 00:04:55,759
because the azure pipeline doesn't

00:04:54,240 --> 00:05:00,080
provide the managed

00:04:55,759 --> 00:05:02,960
instance for the for its ci workers

00:05:00,080 --> 00:05:04,800
we built our own self-run agent's infra

00:05:02,960 --> 00:05:08,800
on aws

00:05:04,800 --> 00:05:12,800
and at the same point aws releases

00:05:08,800 --> 00:05:16,400
its new arm 64 instance graviton 2

00:05:12,800 --> 00:05:19,440
which provides powerful instances

00:05:16,400 --> 00:05:20,000
this gives us a lot of flexibility to

00:05:19,440 --> 00:05:23,199
run

00:05:20,000 --> 00:05:26,639
the ci on large

00:05:23,199 --> 00:05:30,320
machines the ci infra

00:05:26,639 --> 00:05:33,360
basically set up idle

00:05:30,320 --> 00:05:36,479
instances in aws that waits

00:05:33,360 --> 00:05:40,400
for a job from github

00:05:36,479 --> 00:05:43,280
and then it works on the ci

00:05:40,400 --> 00:05:43,919
job from azure pipeline the code is in

00:05:43,280 --> 00:05:48,639
the ci

00:05:43,919 --> 00:05:48,639
info ripple and it's very simple

00:05:48,960 --> 00:05:52,800
the next is the docker image build

00:05:51,680 --> 00:05:54,880
darker now

00:05:52,800 --> 00:05:56,800
have the multi art support with the

00:05:54,880 --> 00:05:58,880
build kit

00:05:56,800 --> 00:06:03,600
we can use same docker file to build

00:05:58,880 --> 00:06:06,800
both arm 64 and amd6 c4 which is xc60

00:06:03,600 --> 00:06:09,199
or images we change the debug image from

00:06:06,800 --> 00:06:11,039
alpinebase to ubuntu-based to better

00:06:09,199 --> 00:06:13,919
support arm

00:06:11,039 --> 00:06:18,080
because the alpine gtc based image that

00:06:13,919 --> 00:06:18,080
we use doesn't have the armed version

00:06:19,039 --> 00:06:25,680
so next i'm going to talk about

00:06:22,160 --> 00:06:25,680
pointing envoy to arm

00:06:26,800 --> 00:06:30,400
envoy is a modern code base we didn't

00:06:29,600 --> 00:06:33,680
have

00:06:30,400 --> 00:06:36,880
any major issue to build my codes into

00:06:33,680 --> 00:06:38,560
arm 64. there are some caveats that we

00:06:36,880 --> 00:06:41,680
have to pay attention

00:06:38,560 --> 00:06:45,120
is the ndm and the sign chart versus

00:06:41,680 --> 00:06:48,400
unsigned chart which is differs

00:06:45,120 --> 00:06:52,720
on compiler default for those platforms

00:06:48,400 --> 00:06:57,120
the memory size dependent test is also

00:06:52,720 --> 00:06:59,680
failed initially because the p thread

00:06:57,120 --> 00:07:00,880
pointer size is different this affect

00:06:59,680 --> 00:07:03,840
the hot restart

00:07:00,880 --> 00:07:03,840
version

00:07:04,479 --> 00:07:10,560
the the biggest one uh

00:07:07,680 --> 00:07:12,560
we have to handle is the exception

00:07:10,560 --> 00:07:15,440
handling

00:07:12,560 --> 00:07:16,000
initially when we started arm building

00:07:15,440 --> 00:07:19,840
while

00:07:16,000 --> 00:07:25,599
the build produces a binary but it fails

00:07:19,840 --> 00:07:28,319
like 100 out of 600 of tests

00:07:25,599 --> 00:07:29,360
this is due to the c plus brexit

00:07:28,319 --> 00:07:32,240
exceptions

00:07:29,360 --> 00:07:33,840
are not propagated through sequels on

00:07:32,240 --> 00:07:36,080
arm platform

00:07:33,840 --> 00:07:38,800
at least by default on the clan

00:07:36,080 --> 00:07:38,800
compilers

00:07:39,360 --> 00:07:43,199
we needed to pass the dash f exceptions

00:07:42,240 --> 00:07:46,240
to compile c

00:07:43,199 --> 00:07:49,120
code this is this was very important

00:07:46,240 --> 00:07:51,039
because our http codex depends on this

00:07:49,120 --> 00:07:55,919
behavior

00:07:51,039 --> 00:07:59,680
uh we're we're on the path to remove the

00:07:55,919 --> 00:08:02,479
remove the exception from http 2 codecs

00:07:59,680 --> 00:08:05,120
but that one was still at the issue at

00:08:02,479 --> 00:08:05,120
that moment

00:08:05,680 --> 00:08:12,560
we also see some test flicks

00:08:08,720 --> 00:08:14,720
on arm64 platform

00:08:12,560 --> 00:08:17,280
this is mostly due to different timing

00:08:14,720 --> 00:08:17,280
caused by

00:08:17,360 --> 00:08:23,280
different test timing

00:08:20,560 --> 00:08:24,400
surprisingly some tests runs faster on

00:08:23,280 --> 00:08:29,120
arm 64.

00:08:24,400 --> 00:08:29,120
this causes the integration test faders

00:08:29,199 --> 00:08:33,279
so let's talk about the build

00:08:31,039 --> 00:08:37,039
performance we use the aws

00:08:33,279 --> 00:08:40,599
r60g 8x large instance this one has

00:08:37,039 --> 00:08:44,720
32 cores and

00:08:40,599 --> 00:08:47,279
256 gigabytes memory

00:08:44,720 --> 00:08:47,920
we do cache with bazel remote which

00:08:47,279 --> 00:08:50,720
helps

00:08:47,920 --> 00:08:51,360
a lot on the build performance without

00:08:50,720 --> 00:08:54,800
cache

00:08:51,360 --> 00:08:56,320
this one cost like 40 minutes for every

00:08:54,800 --> 00:09:00,240
full ci job

00:08:56,320 --> 00:09:03,920
with the cache it normally runs within

00:09:00,240 --> 00:09:07,200
15 minutes this including like pull

00:09:03,920 --> 00:09:11,839
pulling build docker image

00:09:07,200 --> 00:09:11,839
and producing test results

00:09:12,880 --> 00:09:17,279
for future development we have some

00:09:15,440 --> 00:09:20,000
items left behind

00:09:17,279 --> 00:09:22,640
one is web assembly support which is not

00:09:20,000 --> 00:09:26,640
merged into the upstream master yet

00:09:22,640 --> 00:09:29,360
but it ex it currently excludes arm 64.

00:09:26,640 --> 00:09:30,000
webassembly is a really important

00:09:29,360 --> 00:09:33,440
feature

00:09:30,000 --> 00:09:36,240
so we we will need to

00:09:33,440 --> 00:09:38,160
add the webassembly support to arm as

00:09:36,240 --> 00:09:40,560
well

00:09:38,160 --> 00:09:42,000
also uh there are some downstream builds

00:09:40,560 --> 00:09:45,360
doesn't have

00:09:42,000 --> 00:09:47,600
arm 64 support yet like is still proxy

00:09:45,360 --> 00:09:50,959
or get envoy

00:09:47,600 --> 00:09:53,600
we will work on this soon

00:09:50,959 --> 00:09:56,399
thank you for listening to this talk if

00:09:53,600 --> 00:09:58,640
you have any question i'm in the

00:09:56,399 --> 00:10:01,959
on the platform to answer the question

00:09:58,640 --> 00:10:04,959
and you can also ask me on twitter or

00:10:01,959 --> 00:10:04,959

YouTube URL: https://www.youtube.com/watch?v=w8XIT5j-s14


