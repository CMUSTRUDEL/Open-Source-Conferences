Title: Creating request buffering filters for edge devices - Seiichi Koizumi, Tomoya Amachi
Publication date: 2020-10-21
Playlist: EnvoyCon 2020 - Virtual
Description: 
	Creating request buffering filters for edge devices - Seiichi Koizumi, Tomoya Amachi

We are developing a proxy for edge devices that work on an unstable network. Using custom envoy-filters.This session will speak how to manage request data when changed network interfaces and network statuses.

Our proxy use cases on the following lines:

1: Run applications that do not suppose in an unstable network onto vehicles. Even if the network is unstable, misaki-proxy buffers the request in a queue. So that the application does not need to add retransmission processing.

2: Upload large files only when vehicles are connected to a WiFi network. 3G/4G network is more expensive than WiFi. Therefore, only with WiFi can you be able to request large amounts of data. You can set the type of network you want to use for each destination domain.
Captions: 
	00:00:03,439 --> 00:00:07,520
hi everyone

00:00:05,040 --> 00:00:09,200
thank you for attending our presentation

00:00:07,520 --> 00:00:12,400
i'm sejj kozumi

00:00:09,200 --> 00:00:14,719
product manager at denser corporation

00:00:12,400 --> 00:00:15,599
today we would like to talk about the

00:00:14,719 --> 00:00:17,920
creating

00:00:15,599 --> 00:00:20,560
request buffering filters for its

00:00:17,920 --> 00:00:20,560
devices

00:00:22,160 --> 00:00:26,800
first we would like to give you some

00:00:24,320 --> 00:00:29,279
background about the activities

00:00:26,800 --> 00:00:30,160
then we will expand our technical

00:00:29,279 --> 00:00:34,640
challenges

00:00:30,160 --> 00:00:34,640
under how to solve it by using omboy

00:00:36,399 --> 00:00:40,879
as background vehicles will be like

00:00:39,360 --> 00:00:44,000
smartphone

00:00:40,879 --> 00:00:47,039
big application is keep creating a new

00:00:44,000 --> 00:00:50,000
values for vehicle so we are developing

00:00:47,039 --> 00:00:51,760
misaki platform which brings cloud

00:00:50,000 --> 00:00:55,199
native ecosystem

00:00:51,760 --> 00:00:57,600
to the vehicle application

00:00:55,199 --> 00:00:59,440
however there are some technical

00:00:57,600 --> 00:01:02,719
restrictions

00:00:59,440 --> 00:01:03,680
such as a narrow mobile connection no lt

00:01:02,719 --> 00:01:07,119
signals

00:01:03,680 --> 00:01:09,760
and heterogeneous network connection so

00:01:07,119 --> 00:01:10,880
to remove a barrier between vehicle and

00:01:09,760 --> 00:01:14,159
cloud

00:01:10,880 --> 00:01:16,400
network control using onboard is quite

00:01:14,159 --> 00:01:18,640
important

00:01:16,400 --> 00:01:19,920
now we will move to the technical

00:01:18,640 --> 00:01:26,240
details

00:01:19,920 --> 00:01:30,000
that part will be represented by tomoya

00:01:26,240 --> 00:01:31,439
thank you sadie hi my name is tomoya

00:01:30,000 --> 00:01:34,640
amati

00:01:31,439 --> 00:01:38,400
and i'm from uduis so next

00:01:34,640 --> 00:01:41,840
i will explain why do we use envoy

00:01:38,400 --> 00:01:43,920
next slide

00:01:41,840 --> 00:01:45,439
envoy is a good solution for

00:01:43,920 --> 00:01:49,360
cross-cutting concerns

00:01:45,439 --> 00:01:53,360
regarding networking we want to run

00:01:49,360 --> 00:01:55,759
variable application on x devices

00:01:53,360 --> 00:01:56,960
we don't know what's the law all of them

00:01:55,759 --> 00:01:59,439
however

00:01:56,960 --> 00:02:00,479
we know they need to upload data to

00:01:59,439 --> 00:02:03,680
cloud

00:02:00,479 --> 00:02:06,640
external servers so

00:02:03,680 --> 00:02:07,200
what are our network concerns let's

00:02:06,640 --> 00:02:11,760
introduce

00:02:07,200 --> 00:02:15,599
our concerns on edge next slide

00:02:11,760 --> 00:02:18,400
our first concern is network costs

00:02:15,599 --> 00:02:18,879
the mobile network is highly available

00:02:18,400 --> 00:02:22,000
but

00:02:18,879 --> 00:02:24,400
expensive and wi-fi networks are

00:02:22,000 --> 00:02:26,160
basically cheap but a limited area

00:02:24,400 --> 00:02:28,720
coverage

00:02:26,160 --> 00:02:29,360
developers want to change network types

00:02:28,720 --> 00:02:33,519
depending

00:02:29,360 --> 00:02:36,160
on the application for example

00:02:33,519 --> 00:02:36,800
in machine learning data processing we

00:02:36,160 --> 00:02:40,480
want to use

00:02:36,800 --> 00:02:42,319
wi-fi because of the large volume of

00:02:40,480 --> 00:02:45,120
data

00:02:42,319 --> 00:02:46,160
however for current area map data we

00:02:45,120 --> 00:02:50,160
want to download

00:02:46,160 --> 00:02:52,879
as fast as possible so we want to use

00:02:50,160 --> 00:02:55,280
the mobile network

00:02:52,879 --> 00:02:57,760
and data value changes depending on the

00:02:55,280 --> 00:03:00,239
situation

00:02:57,760 --> 00:03:02,840
we want to change data and network

00:03:00,239 --> 00:03:04,959
combinations

00:03:02,840 --> 00:03:09,840
dynamically next

00:03:04,959 --> 00:03:12,400
our second concern is unstable networks

00:03:09,840 --> 00:03:13,760
x devices are not always connected to

00:03:12,400 --> 00:03:16,560
the network

00:03:13,760 --> 00:03:18,319
for example some tunnels do not have

00:03:16,560 --> 00:03:21,120
network connections

00:03:18,319 --> 00:03:23,440
and some places do not have mobile

00:03:21,120 --> 00:03:25,920
service coverage

00:03:23,440 --> 00:03:26,480
without envoy each application would

00:03:25,920 --> 00:03:29,920
need to

00:03:26,480 --> 00:03:33,920
implement backgrounds backup solution

00:03:29,920 --> 00:03:37,519
to these problems next

00:03:33,920 --> 00:03:41,599
i will introduce how we use envoy

00:03:37,519 --> 00:03:44,840
our project is called misaki proxy

00:03:41,599 --> 00:03:46,560
misaki means divine messenger in

00:03:44,840 --> 00:03:49,680
japanese

00:03:46,560 --> 00:03:54,080
and a divine messenger is a fox in japan

00:03:49,680 --> 00:03:58,159
so our icon is fox mizaki proxy consists

00:03:54,080 --> 00:04:01,760
of two binaries the first misaki envoy

00:03:58,159 --> 00:04:04,799
that is based on envoy the second

00:04:01,760 --> 00:04:05,680
is the misaki proxy manager they

00:04:04,799 --> 00:04:09,599
communicate

00:04:05,680 --> 00:04:12,959
with the file system i will introduce

00:04:09,599 --> 00:04:15,200
each of them but basically they all send

00:04:12,959 --> 00:04:16,239
requests from the ads through misaki

00:04:15,200 --> 00:04:19,040
envoy

00:04:16,239 --> 00:04:21,440
and the misaki proxy manager supports

00:04:19,040 --> 00:04:26,639
minsaki envoy

00:04:21,440 --> 00:04:29,120
next first i will introduce misaki envoy

00:04:26,639 --> 00:04:30,240
misaki envoy contains two custom void

00:04:29,120 --> 00:04:33,840
filters

00:04:30,240 --> 00:04:37,199
and forked by onward little example

00:04:33,840 --> 00:04:41,199
we use two custom filters the first

00:04:37,199 --> 00:04:44,479
is http filters that control

00:04:41,199 --> 00:04:48,639
http request the second

00:04:44,479 --> 00:04:52,160
is network filters that control

00:04:48,639 --> 00:04:55,440
tls and other requests

00:04:52,160 --> 00:04:59,680
we can change configuration per host

00:04:55,440 --> 00:04:59,680
using type filter config

00:05:00,240 --> 00:05:05,520
mrk invite provided buffers request

00:05:03,360 --> 00:05:08,479
during buffer duration

00:05:05,520 --> 00:05:11,360
if there is no network connection or the

00:05:08,479 --> 00:05:14,720
network type does not meet

00:05:11,360 --> 00:05:17,680
requirements the next right

00:05:14,720 --> 00:05:18,639
for example this configuration file has

00:05:17,680 --> 00:05:21,919
network types

00:05:18,639 --> 00:05:25,120
set to wi-fi so

00:05:21,919 --> 00:05:26,639
if h is connecting to a mobile network

00:05:25,120 --> 00:05:28,400
the misaki environment holding the

00:05:26,639 --> 00:05:32,479
request

00:05:28,400 --> 00:05:35,280
up to network type changes to wifi

00:05:32,479 --> 00:05:37,520
after buffer duration if the network is

00:05:35,280 --> 00:05:40,880
still unavailable

00:05:37,520 --> 00:05:43,759
save the request data to the file system

00:05:40,880 --> 00:05:46,320
buffer duration set as one minute in

00:05:43,759 --> 00:05:48,720
this configuration file

00:05:46,320 --> 00:05:50,160
the data will be released by minsaki

00:05:48,720 --> 00:05:53,759
proxy manager

00:05:50,160 --> 00:05:57,840
when the network available again

00:05:53,759 --> 00:06:01,199
if we use tls we can save request data

00:05:57,840 --> 00:06:05,120
so we just drop it tls connection

00:06:01,199 --> 00:06:08,880
is run on our future tasks

00:06:05,120 --> 00:06:11,600
next second i will introduce misaki

00:06:08,880 --> 00:06:14,160
proxy manager

00:06:11,600 --> 00:06:15,919
it contains a lot of features in one

00:06:14,160 --> 00:06:18,880
binary

00:06:15,919 --> 00:06:20,639
and the features are mainly divided into

00:06:18,880 --> 00:06:23,840
startup scripts

00:06:20,639 --> 00:06:26,800
and runtime processes

00:06:23,840 --> 00:06:28,639
startup scripts message proxy manager

00:06:26,800 --> 00:06:31,039
edit ip tables

00:06:28,639 --> 00:06:33,440
and all requests forward to mr key on

00:06:31,039 --> 00:06:36,160
voice port

00:06:33,440 --> 00:06:37,919
it also disables the default dns

00:06:36,160 --> 00:06:41,280
reservoir

00:06:37,919 --> 00:06:45,039
because we want to run an original dns

00:06:41,280 --> 00:06:49,039
reservoir that reserves a domain name

00:06:45,039 --> 00:06:51,440
even if network unavailable

00:06:49,039 --> 00:06:53,280
runtime processes contains following

00:06:51,440 --> 00:06:56,720
features

00:06:53,280 --> 00:07:00,319
check network status and network type

00:06:56,720 --> 00:07:04,080
update over configuration dynamically

00:07:00,319 --> 00:07:07,039
learn an original dns reserver

00:07:04,080 --> 00:07:08,000
right now i'll resign request and save

00:07:07,039 --> 00:07:11,840
response data

00:07:08,000 --> 00:07:14,639
when network is available request data

00:07:11,840 --> 00:07:17,039
saved by misaki envoy that exceeds

00:07:14,639 --> 00:07:20,240
buffer duration

00:07:17,039 --> 00:07:22,319
misaki over returns the saved response

00:07:20,240 --> 00:07:25,520
when the application requests the same

00:07:22,319 --> 00:07:25,520
headers and body

00:07:25,759 --> 00:07:32,720
next today i will introduce

00:07:29,520 --> 00:07:35,840
how these components work here is an

00:07:32,720 --> 00:07:35,840
example case study

00:07:36,479 --> 00:07:40,720
the ih application requests data when

00:07:39,520 --> 00:07:43,120
offline

00:07:40,720 --> 00:07:46,400
after a while the network recovers

00:07:43,120 --> 00:07:48,639
during buffer duration

00:07:46,400 --> 00:07:50,879
before i start to explain how components

00:07:48,639 --> 00:07:54,000
work i will introduce what happens

00:07:50,879 --> 00:07:56,080
when requesting from application next

00:07:54,000 --> 00:07:58,080
slide

00:07:56,080 --> 00:07:59,680
preference data is sent to the tag

00:07:58,080 --> 00:08:02,080
server

00:07:59,680 --> 00:08:03,520
the client needs to resolve the domain

00:08:02,080 --> 00:08:07,759
name

00:08:03,520 --> 00:08:10,400
basically the dns deserver on the ad

00:08:07,759 --> 00:08:12,560
sends a request to the cloud dns server

00:08:10,400 --> 00:08:16,000
to resolve it

00:08:12,560 --> 00:08:19,280
and next so when online

00:08:16,000 --> 00:08:21,120
or in a much network type misaki proxy's

00:08:19,280 --> 00:08:24,879
dns reserver

00:08:21,120 --> 00:08:28,879
returns a dummy ip and buffers

00:08:24,879 --> 00:08:29,520
request the process does not need to

00:08:28,879 --> 00:08:33,360
access

00:08:29,520 --> 00:08:37,200
an external server it is all done

00:08:33,360 --> 00:08:40,479
on the edge device if the network

00:08:37,200 --> 00:08:43,519
is available during the perforation

00:08:40,479 --> 00:08:47,680
envoy will resolve the domain name

00:08:43,519 --> 00:08:51,279
and send the request to the tag server

00:08:47,680 --> 00:08:54,399
next conclusion

00:08:51,279 --> 00:08:58,240
first we have developed a proxy

00:08:54,399 --> 00:09:00,080
for vehicle s devices second

00:08:58,240 --> 00:09:01,600
our approach shows vehicular

00:09:00,080 --> 00:09:04,240
restrictions

00:09:01,600 --> 00:09:04,959
and it helps application developers to

00:09:04,240 --> 00:09:08,000
develop

00:09:04,959 --> 00:09:10,880
edge apps and finally

00:09:08,000 --> 00:09:12,800
feature tasks we are trying to enhance

00:09:10,880 --> 00:09:15,920
multiple message proxy

00:09:12,800 --> 00:09:17,040
as a service mesh thank you for

00:09:15,920 --> 00:09:20,320
listening

00:09:17,040 --> 00:09:25,080
i hope you enjoyed the presentation

00:09:20,320 --> 00:09:28,080
if you have a question please ask us on

00:09:25,080 --> 00:09:28,080

YouTube URL: https://www.youtube.com/watch?v=Aur3cNIui_U


