Title: Envoy on Kittens: Improving Developer and Maintainer Velocity - Itay Donanhirsh
Publication date: 2020-10-21
Playlist: EnvoyCon 2020 - Virtual
Description: 
	Envoy on Kittens: Improving Developer and Maintainer Velocity - Itay Donanhirsh

In this talk Itay will present RepoKitteh (https://repokitteh.io), a lightweight, rapid and low cost approach for GitHub automation. The presenter will explain the necessity for GitHub automation, how RepoKitteh approaches the problem and how it compares to the alternatives, such hand crafted custom integrations and GitHub actions. The integration with Envoy will be detailed, and a demonstration of implementing new automations will be given. At the end of this talk, Envoy contributors will be empowered and inspired to add their own RepoKitteh integrations.
Captions: 
	00:00:00,320 --> 00:00:05,440
hi my name is itai welcome to my talk

00:00:03,199 --> 00:00:07,040
and kittens improving developer and

00:00:05,440 --> 00:00:10,639
maintenance velocity

00:00:07,040 --> 00:00:12,960
which i am going to describe repo kita

00:00:10,639 --> 00:00:15,040
first of all let me assert that cats are

00:00:12,960 --> 00:00:15,759
a very important part of computer

00:00:15,040 --> 00:00:17,600
science

00:00:15,759 --> 00:00:19,600
as you can see google's artificial brain

00:00:17,600 --> 00:00:21,760
learns to find cat videos

00:00:19,600 --> 00:00:23,600
that was done some time ago if i

00:00:21,760 --> 00:00:26,320
remember correctly

00:00:23,600 --> 00:00:27,359
also 50 of the traffic on the web is

00:00:26,320 --> 00:00:30,400
calculated

00:00:27,359 --> 00:00:32,880
which is quite significant and

00:00:30,400 --> 00:00:33,680
also your favorite open source project

00:00:32,880 --> 00:00:36,800
envoy

00:00:33,680 --> 00:00:37,760
has a lot of cat related tags on it and

00:00:36,800 --> 00:00:41,200
obviously let's say

00:00:37,760 --> 00:00:42,640
not forget about octocat which you can

00:00:41,200 --> 00:00:46,000
see here and we

00:00:42,640 --> 00:00:49,120
actually deal with it a lot first of all

00:00:46,000 --> 00:00:51,360
let's define the need for automation

00:00:49,120 --> 00:00:52,480
when a project have a growing number of

00:00:51,360 --> 00:00:54,640
contributors like

00:00:52,480 --> 00:00:56,719
envoy there are procedures that need to

00:00:54,640 --> 00:00:58,640
be set in place

00:00:56,719 --> 00:01:00,719
this procedure need to be enforced and

00:00:58,640 --> 00:01:02,879
better yet automated if possible we

00:01:00,719 --> 00:01:04,000
don't know want any human doing all the

00:01:02,879 --> 00:01:08,080
bureaucracy

00:01:04,000 --> 00:01:11,520
by by themselves because then you know

00:01:08,080 --> 00:01:12,080
that just doesn't scale so there is a

00:01:11,520 --> 00:01:15,840
need for

00:01:12,080 --> 00:01:15,840
something to be able to do it

00:01:16,240 --> 00:01:19,520
for contributors some operations need to

00:01:18,240 --> 00:01:22,720
be performed

00:01:19,520 --> 00:01:24,560
other customers constrained for instance

00:01:22,720 --> 00:01:27,520
every project have different

00:01:24,560 --> 00:01:28,560
needs and this needs to be customized

00:01:27,520 --> 00:01:32,640
customized

00:01:28,560 --> 00:01:35,439
appropriately for instance people assign

00:01:32,640 --> 00:01:37,360
people on issues pr but the only

00:01:35,439 --> 00:01:39,600
specific people can do that

00:01:37,360 --> 00:01:41,520
or inform inform people about the other

00:01:39,600 --> 00:01:44,640
procedures like enforcing

00:01:41,520 --> 00:01:46,479
the pr body structure for example for

00:01:44,640 --> 00:01:48,320
maintainers automation can help with

00:01:46,479 --> 00:01:49,200
issue tracking specialized approval

00:01:48,320 --> 00:01:51,759
policies

00:01:49,200 --> 00:01:54,399
and enforcing various rules which can be

00:01:51,759 --> 00:01:57,040
done using some kind of scripting

00:01:54,399 --> 00:01:58,320
that i'm going to show here when

00:01:57,040 --> 00:02:00,000
approaching this

00:01:58,320 --> 00:02:02,240
i've seen in the past in big companies

00:02:00,000 --> 00:02:04,240
like lyft and twitter when interacting

00:02:02,240 --> 00:02:06,799
with some kind of

00:02:04,240 --> 00:02:07,520
source control repository is to build

00:02:06,799 --> 00:02:10,720
some kind

00:02:07,520 --> 00:02:13,040
of custom github app or other app

00:02:10,720 --> 00:02:14,160
that consume events for example from

00:02:13,040 --> 00:02:17,040
github

00:02:14,160 --> 00:02:18,000
and codifies the required behavior that

00:02:17,040 --> 00:02:20,720
enforced

00:02:18,000 --> 00:02:21,200
and supported inside the company in code

00:02:20,720 --> 00:02:25,040
in this

00:02:21,200 --> 00:02:28,720
app and it's usually not really reusable

00:02:25,040 --> 00:02:31,760
and a lot of containers are also grad

00:02:28,720 --> 00:02:33,519
and bitrate and that causes a lot of

00:02:31,760 --> 00:02:35,599
pain when the company goes

00:02:33,519 --> 00:02:37,519
further on also this is not really

00:02:35,599 --> 00:02:37,840
appropriate for a lot of projects that

00:02:37,519 --> 00:02:40,959
are

00:02:37,840 --> 00:02:41,760
open source that not all the time have

00:02:40,959 --> 00:02:44,000
the correct

00:02:41,760 --> 00:02:45,599
the appropriate resources to deploy and

00:02:44,000 --> 00:02:48,640
develop such a thing

00:02:45,599 --> 00:02:48,959
there are some custom applications that

00:02:48,640 --> 00:02:51,280
are

00:02:48,959 --> 00:02:54,800
out in the wild but combining them all

00:02:51,280 --> 00:02:56,480
together is a bit problematic

00:02:54,800 --> 00:02:58,080
when doing such an approach there's a

00:02:56,480 --> 00:02:59,599
lot of things to take care of like

00:02:58,080 --> 00:03:00,640
maintaining the actual service

00:02:59,599 --> 00:03:03,200
authentication

00:03:00,640 --> 00:03:04,239
monitoring high availability secret

00:03:03,200 --> 00:03:07,040
management

00:03:04,239 --> 00:03:08,640
and adapting to github api changes that

00:03:07,040 --> 00:03:10,400
happen once in a while

00:03:08,640 --> 00:03:13,440
while they are much better at it right

00:03:10,400 --> 00:03:14,720
now dealing with github api audits which

00:03:13,440 --> 00:03:17,360
mostly contain

00:03:14,720 --> 00:03:18,560
concern ordering of events and also

00:03:17,360 --> 00:03:20,400
something that often

00:03:18,560 --> 00:03:22,800
often neglected which is present

00:03:20,400 --> 00:03:24,480
preserving issue context

00:03:22,800 --> 00:03:26,400
which means sometimes you want to have

00:03:24,480 --> 00:03:27,120
some kind of store that contains some

00:03:26,400 --> 00:03:30,319
kind of

00:03:27,120 --> 00:03:32,080
of some kind of state regarding your pr

00:03:30,319 --> 00:03:34,319
that you cannot maintain the set

00:03:32,080 --> 00:03:36,720
elsewhere

00:03:34,319 --> 00:03:37,440
so this is a traditional pro approach

00:03:36,720 --> 00:03:40,560
and what

00:03:37,440 --> 00:03:42,239
actually i'm proposing here is repo kit

00:03:40,560 --> 00:03:43,680
repocator is something that does

00:03:42,239 --> 00:03:45,920
actually most of the work

00:03:43,680 --> 00:03:48,239
for you it's replacing your internal

00:03:45,920 --> 00:03:50,640
internal github app or some other

00:03:48,239 --> 00:03:53,040
integration that you're using it with

00:03:50,640 --> 00:03:56,640
one product that take care of

00:03:53,040 --> 00:04:00,239
most of the let's say non-business

00:03:56,640 --> 00:04:02,080
related issues for example

00:04:00,239 --> 00:04:03,519
all of this is now taken care of if

00:04:02,080 --> 00:04:06,159
previously you needed to

00:04:03,519 --> 00:04:06,879
maintain all this and care about all

00:04:06,159 --> 00:04:08,799
this stuff

00:04:06,879 --> 00:04:10,159
now you need only to care about only the

00:04:08,799 --> 00:04:13,680
behavior that you

00:04:10,159 --> 00:04:16,799
you you need this is actually done by

00:04:13,680 --> 00:04:18,560
formulating that abstraction to have

00:04:16,799 --> 00:04:21,680
your business logic

00:04:18,560 --> 00:04:24,479
live in and and operate towards the

00:04:21,680 --> 00:04:26,160
other integration if you create the

00:04:24,479 --> 00:04:28,080
right abstraction in place there is no

00:04:26,160 --> 00:04:29,600
need to worry about intricate not

00:04:28,080 --> 00:04:32,400
gitabate

00:04:29,600 --> 00:04:33,680
events related things like ordering or

00:04:32,400 --> 00:04:36,320
other audits that are

00:04:33,680 --> 00:04:37,919
in the api you only need to deal with

00:04:36,320 --> 00:04:39,440
the required business logic that you

00:04:37,919 --> 00:04:40,840
care about

00:04:39,440 --> 00:04:44,320
for that the right application is

00:04:40,840 --> 00:04:45,759
required i found that starlock which is

00:04:44,320 --> 00:04:49,120
part of bazel

00:04:45,759 --> 00:04:51,040
is actually perfect for this stuff

00:04:49,120 --> 00:04:52,400
stalac is a language internet for use as

00:04:51,040 --> 00:04:54,639
a configuration language

00:04:52,400 --> 00:04:56,800
it was designed for bazel build system

00:04:54,639 --> 00:04:57,280
but may be useful for other projects as

00:04:56,800 --> 00:05:00,320
well

00:04:57,280 --> 00:05:02,479
which i'm very happy to use salax allows

00:05:00,320 --> 00:05:03,440
for deterministic evaluation hermetic

00:05:02,479 --> 00:05:05,919
execution

00:05:03,440 --> 00:05:07,919
and parallel evaluation which is exactly

00:05:05,919 --> 00:05:10,160
what you need because this allows for a

00:05:07,919 --> 00:05:10,639
jade low-cost low overhead serverless

00:05:10,160 --> 00:05:13,039
and

00:05:10,639 --> 00:05:14,880
serverless architecture where only

00:05:13,039 --> 00:05:17,520
starla code is executed

00:05:14,880 --> 00:05:19,759
no containers required here as we can

00:05:17,520 --> 00:05:21,600
actually take a script that has all the

00:05:19,759 --> 00:05:24,000
the appropriate constraint that we need

00:05:21,600 --> 00:05:26,160
on it and just run it it can do only

00:05:24,000 --> 00:05:28,160
what we allow it to do

00:05:26,160 --> 00:05:29,440
stalactite is very easy it's actually a

00:05:28,160 --> 00:05:31,680
diet of python

00:05:29,440 --> 00:05:33,199
with a very few differences and these

00:05:31,680 --> 00:05:34,800
differences are actually important

00:05:33,199 --> 00:05:36,000
because they allow all the properties

00:05:34,800 --> 00:05:38,880
that we like

00:05:36,000 --> 00:05:40,000
aka deterministic hermetic and

00:05:38,880 --> 00:05:42,080
concurrent

00:05:40,000 --> 00:05:44,400
repocket is using the actual star go

00:05:42,080 --> 00:05:47,759
module by alan donovan which

00:05:44,400 --> 00:05:49,520
is amazing this is how the repo kit

00:05:47,759 --> 00:05:51,840
architecture actually looks like

00:05:49,520 --> 00:05:53,280
there is a repocator github app that you

00:05:51,840 --> 00:05:55,280
install on your repo

00:05:53,280 --> 00:05:57,280
you don't need to write any new github

00:05:55,280 --> 00:05:58,880
you are just using the github app that

00:05:57,280 --> 00:06:02,000
actually developed and given to your

00:05:58,880 --> 00:06:03,840
repo the repo keta engine

00:06:02,000 --> 00:06:05,919
actually takes consumer event from the

00:06:03,840 --> 00:06:07,680
github app and they can also call a

00:06:05,919 --> 00:06:10,479
various api

00:06:07,680 --> 00:06:12,319
functions on github it executes a

00:06:10,479 --> 00:06:14,000
startup streak on demand which will

00:06:12,319 --> 00:06:14,639
expand where they reside and how they

00:06:14,000 --> 00:06:17,520
are written

00:06:14,639 --> 00:06:19,440
very soon and it's variable facilities

00:06:17,520 --> 00:06:20,400
that we can use in order to actually

00:06:19,440 --> 00:06:22,720
make it easier

00:06:20,400 --> 00:06:24,080
to do the stuff that we want for

00:06:22,720 --> 00:06:26,639
instance we got tracing

00:06:24,080 --> 00:06:27,840
we can actually have a very nice ui that

00:06:26,639 --> 00:06:30,880
shows exactly

00:06:27,840 --> 00:06:31,360
what the repo takita script actually

00:06:30,880 --> 00:06:34,720
doing

00:06:31,360 --> 00:06:35,600
or done any persistent and you can

00:06:34,720 --> 00:06:38,639
introspect it

00:06:35,600 --> 00:06:41,360
in any given time we have um

00:06:38,639 --> 00:06:42,240
secrets that we can be supplies to the

00:06:41,360 --> 00:06:44,479
script

00:06:42,240 --> 00:06:45,600
and there's also per issue per pr

00:06:44,479 --> 00:06:47,680
context which we'll

00:06:45,600 --> 00:06:49,199
elaborate on later on the other side

00:06:47,680 --> 00:06:50,960
there is also a ui

00:06:49,199 --> 00:06:52,720
currently quite simple but it's going to

00:06:50,960 --> 00:06:54,720
be improved later on

00:06:52,720 --> 00:06:56,880
which the nice cat lady here can

00:06:54,720 --> 00:06:59,440
interact with with all the components

00:06:56,880 --> 00:06:59,440
using it

00:07:00,240 --> 00:07:04,080
demo time i will demonstrate now how you

00:07:03,039 --> 00:07:17,840
can enforce

00:07:04,080 --> 00:07:17,840
a bug notation in a pr body

00:07:18,360 --> 00:07:28,749
[Music]

00:07:28,840 --> 00:07:31,840
so

00:07:33,240 --> 00:07:42,429
[Music]

00:07:42,840 --> 00:07:53,750
so

00:07:44,360 --> 00:07:53,750
[Music]

00:07:55,870 --> 00:07:58,920
[Music]

00:08:03,050 --> 00:08:08,739
[Music]

00:08:10,840 --> 00:08:16,259
do

00:08:12,380 --> 00:08:16,259
[Music]

00:08:19,620 --> 00:08:28,960
[Music]

00:08:27,280 --> 00:08:31,280
there's a lot of stuff that actually

00:08:28,960 --> 00:08:32,640
included in repo kit that gives us in

00:08:31,280 --> 00:08:34,719
order to

00:08:32,640 --> 00:08:36,080
focus on what we actually need to write

00:08:34,719 --> 00:08:38,560
and not turning

00:08:36,080 --> 00:08:40,399
various other services for example repo

00:08:38,560 --> 00:08:41,120
kit includes tooling and apis for

00:08:40,399 --> 00:08:43,120
frequently

00:08:41,120 --> 00:08:45,600
less capability as i said before secret

00:08:43,120 --> 00:08:47,120
management digital debug output using

00:08:45,600 --> 00:08:49,360
tracing github api

00:08:47,120 --> 00:08:51,120
access function permission model which

00:08:49,360 --> 00:08:53,600
you github does not give you

00:08:51,120 --> 00:08:55,440
and we can actually use the gripo kitty

00:08:53,600 --> 00:08:58,160
to actually enforce it

00:08:55,440 --> 00:08:58,560
models with version piping and much more

00:08:58,160 --> 00:09:01,440
so

00:08:58,560 --> 00:09:02,000
how does it all work in the root of the

00:09:01,440 --> 00:09:04,320
repo

00:09:02,000 --> 00:09:05,279
there is a file called replicated.star

00:09:04,320 --> 00:09:07,680
this file

00:09:05,279 --> 00:09:09,440
actually is the root module and whenever

00:09:07,680 --> 00:09:11,680
there is some kind of event that needs

00:09:09,440 --> 00:09:15,200
to be exited upon repertoire node

00:09:11,680 --> 00:09:17,519
how to open this file and evaluate it

00:09:15,200 --> 00:09:19,200
this is a very simple example of how to

00:09:17,519 --> 00:09:21,920
write a very simple

00:09:19,200 --> 00:09:22,800
repocket script in this instance we are

00:09:21,920 --> 00:09:25,279
registering

00:09:22,800 --> 00:09:27,279
a slash command when you type let's say

00:09:25,279 --> 00:09:28,720
in the comment slash backboard

00:09:27,279 --> 00:09:31,440
what will happen it will write the

00:09:28,720 --> 00:09:33,600
underscore backboard backboard script

00:09:31,440 --> 00:09:35,839
that will issue a label that will put a

00:09:33,600 --> 00:09:37,519
label on the issue of the pr that says

00:09:35,839 --> 00:09:40,080
backport review

00:09:37,519 --> 00:09:41,440
i included references to documentation

00:09:40,080 --> 00:09:43,519
of repocite

00:09:41,440 --> 00:09:45,440
in each slide which i hope i can send

00:09:43,519 --> 00:09:47,680
later and you can just click on it and

00:09:45,440 --> 00:09:49,440
see how it works

00:09:47,680 --> 00:09:51,519
handles command actually register a

00:09:49,440 --> 00:09:52,880
command header that is executed on slash

00:09:51,519 --> 00:09:55,920
commands

00:09:52,880 --> 00:09:56,959
this is a simple demonstration from a pr

00:09:55,920 --> 00:09:58,959
on envoy

00:09:56,959 --> 00:10:00,320
someone do it slash backward and you can

00:09:58,959 --> 00:10:03,680
see that repokete

00:10:00,320 --> 00:10:04,480
added required label on the pr this is

00:10:03,680 --> 00:10:06,560
an example

00:10:04,480 --> 00:10:07,920
of documentation from the reference

00:10:06,560 --> 00:10:09,839
manual that you can

00:10:07,920 --> 00:10:11,519
actually look up online even now if you

00:10:09,839 --> 00:10:13,600
want it shows you the

00:10:11,519 --> 00:10:15,519
github module that has an issue label

00:10:13,600 --> 00:10:18,320
function which is the description of

00:10:15,519 --> 00:10:20,480
each argument and also it can point you

00:10:18,320 --> 00:10:23,680
to the appropriate github api that it

00:10:20,480 --> 00:10:24,160
actually accesses this is an excerpt

00:10:23,680 --> 00:10:26,720
from

00:10:24,160 --> 00:10:28,480
a module that supplies by repocator

00:10:26,720 --> 00:10:31,440
which you can check out later

00:10:28,480 --> 00:10:32,160
in this case we register a pull request

00:10:31,440 --> 00:10:34,399
event

00:10:32,160 --> 00:10:35,440
when we get a pull request event from

00:10:34,399 --> 00:10:37,519
github

00:10:35,440 --> 00:10:39,120
we can actually perform stuff on it if

00:10:37,519 --> 00:10:41,040
you're not really familiar with polar

00:10:39,120 --> 00:10:42,880
cost event just go to this link and read

00:10:41,040 --> 00:10:45,200
about it it's not that difficult

00:10:42,880 --> 00:10:46,880
in this case we handle the synchronized

00:10:45,200 --> 00:10:48,399
action in the pull request

00:10:46,880 --> 00:10:50,399
and you can actually see that we're

00:10:48,399 --> 00:10:52,240
doing some high-level operations here

00:10:50,399 --> 00:10:55,839
according to some

00:10:52,240 --> 00:10:58,079
criteria that we saw in this module

00:10:55,839 --> 00:10:59,760
handlers receive context when executed

00:10:58,079 --> 00:11:00,720
as you can see in the definition depth

00:10:59,760 --> 00:11:03,760
pull request

00:11:00,720 --> 00:11:06,320
action and labels these are actually

00:11:03,760 --> 00:11:07,040
populated dynamically depends on what

00:11:06,320 --> 00:11:09,519
parameter

00:11:07,040 --> 00:11:11,839
you specify to the pull request you can

00:11:09,519 --> 00:11:15,519
see where these parameters come from

00:11:11,839 --> 00:11:17,760
a bit later this is an example of the

00:11:15,519 --> 00:11:18,640
use statement the use statement is used

00:11:17,760 --> 00:11:22,560
to load

00:11:18,640 --> 00:11:24,399
a module that is defined in repocate or

00:11:22,560 --> 00:11:25,920
you can write a model yourself

00:11:24,399 --> 00:11:27,600
first of all you specify the path for

00:11:25,920 --> 00:11:29,760
the model that you want to load it needs

00:11:27,600 --> 00:11:30,880
to be residing in the private or public

00:11:29,760 --> 00:11:32,800
repository

00:11:30,880 --> 00:11:34,560
as long as the application has

00:11:32,800 --> 00:11:36,000
permission to access it depends on what

00:11:34,560 --> 00:11:37,839
you install it

00:11:36,000 --> 00:11:40,320
configuration can be supplied to the

00:11:37,839 --> 00:11:41,279
module once being load the module will

00:11:40,320 --> 00:11:43,920
actually

00:11:41,279 --> 00:11:46,000
every event on it and event handler will

00:11:43,920 --> 00:11:49,360
accept this configuration and be able

00:11:46,000 --> 00:11:50,399
to parse it some generic modules are

00:11:49,360 --> 00:11:52,639
supplied for you

00:11:50,399 --> 00:11:55,760
as part of repo keter and they are open

00:11:52,639 --> 00:11:57,600
source and they are in this bus

00:11:55,760 --> 00:11:59,600
a it's actually being supplied to the

00:11:57,600 --> 00:12:02,000
reconcile method

00:11:59,600 --> 00:12:03,360
which is registered using handler's

00:12:02,000 --> 00:12:05,600
command so

00:12:03,360 --> 00:12:06,880
when there is slash check owners being

00:12:05,600 --> 00:12:09,680
typed into a comment

00:12:06,880 --> 00:12:10,560
the reconcile is being called with the

00:12:09,680 --> 00:12:12,639
config

00:12:10,560 --> 00:12:14,560
argument and the config argument is

00:12:12,639 --> 00:12:16,639
supplied to get specs which can load the

00:12:14,560 --> 00:12:19,120
passes parameter from there

00:12:16,639 --> 00:12:20,800
so there is another way to load modules

00:12:19,120 --> 00:12:24,160
which is using the starloc

00:12:20,800 --> 00:12:26,480
load statement load actually instead

00:12:24,160 --> 00:12:27,279
of registering handler on modules and

00:12:26,480 --> 00:12:29,519
stuff like that

00:12:27,279 --> 00:12:31,600
what he does it brings a function it

00:12:29,519 --> 00:12:33,760
defined in another module

00:12:31,600 --> 00:12:34,880
may be an internal repo kit a module

00:12:33,760 --> 00:12:38,399
like test here

00:12:34,880 --> 00:12:40,880
or lie on another sl party module

00:12:38,399 --> 00:12:42,560
like utils and circle c high ear and

00:12:40,880 --> 00:12:43,920
bring the function that is defined there

00:12:42,560 --> 00:12:45,519
inside the context that's being

00:12:43,920 --> 00:12:48,720
evaluated for instance the

00:12:45,519 --> 00:12:49,839
text.match here is being called after

00:12:48,720 --> 00:12:51,839
reloaded

00:12:49,839 --> 00:12:53,200
so what is the difference between loaded

00:12:51,839 --> 00:12:55,440
use load is

00:12:53,200 --> 00:12:57,360
star lock built in which brings in a

00:12:55,440 --> 00:12:57,920
function from other models and can be

00:12:57,360 --> 00:13:01,360
called from

00:12:57,920 --> 00:13:03,920
any module use is a repockety function

00:13:01,360 --> 00:13:05,680
that registers handle from other models

00:13:03,920 --> 00:13:07,040
and can be called only from the root

00:13:05,680 --> 00:13:09,440
module

00:13:07,040 --> 00:13:10,079
note that use does not bring any new

00:13:09,440 --> 00:13:12,480
variables

00:13:10,079 --> 00:13:13,519
into the local context it just tells

00:13:12,480 --> 00:13:15,760
tala a

00:13:13,519 --> 00:13:18,639
replicator to load that module and

00:13:15,760 --> 00:13:21,120
register its handles

00:13:18,639 --> 00:13:23,760
repo gita allows for a state to be

00:13:21,120 --> 00:13:26,399
stored for an issue or npr

00:13:23,760 --> 00:13:27,279
this is useful when a state need to be

00:13:26,399 --> 00:13:31,440
stored

00:13:27,279 --> 00:13:34,800
for use later for example in this case

00:13:31,440 --> 00:13:35,760
in the excel form repo kit owner check

00:13:34,800 --> 00:13:38,959
module

00:13:35,760 --> 00:13:42,720
we actually store who approved which

00:13:38,959 --> 00:13:42,959
passes in pr this allow later on to see

00:13:42,720 --> 00:13:45,600
if

00:13:42,959 --> 00:13:46,320
all relevant passes were approved and by

00:13:45,600 --> 00:13:48,720
whom

00:13:46,320 --> 00:13:50,399
you can supply secrets to module in this

00:13:48,720 --> 00:13:51,040
case we are using the get second

00:13:50,399 --> 00:13:53,920
function

00:13:51,040 --> 00:13:54,800
to fetch a registered a branch

00:13:53,920 --> 00:13:56,959
registered

00:13:54,800 --> 00:13:58,639
a secret that was supplied using the

00:13:56,959 --> 00:14:01,279
replicator ui

00:13:58,639 --> 00:14:02,079
to a module we are using the getsecret

00:14:01,279 --> 00:14:04,079
function

00:14:02,079 --> 00:14:06,320
the get secret can be called only in the

00:14:04,079 --> 00:14:07,440
root model meaning only replicated dot

00:14:06,320 --> 00:14:10,240
star

00:14:07,440 --> 00:14:11,279
in this case we actually can also

00:14:10,240 --> 00:14:15,040
specify

00:14:11,279 --> 00:14:16,800
secret url to http when any parameter

00:14:15,040 --> 00:14:19,600
begins with the word secret

00:14:16,800 --> 00:14:21,519
underscore it will not be seen in the

00:14:19,600 --> 00:14:24,000
tracers later on and it will not

00:14:21,519 --> 00:14:25,680
leak and replicated debug information

00:14:24,000 --> 00:14:30,160
this will be a little more clear when i

00:14:25,680 --> 00:14:32,880
explain traces

00:14:30,160 --> 00:14:34,240
here i'm explaining traces so let's say

00:14:32,880 --> 00:14:37,360
that repocket

00:14:34,240 --> 00:14:38,000
issued some kind of a comment to in your

00:14:37,360 --> 00:14:40,639
pr

00:14:38,000 --> 00:14:41,680
in this case this is an example for

00:14:40,639 --> 00:14:45,040
owner checks

00:14:41,680 --> 00:14:47,040
uh customers owner check for envoy

00:14:45,040 --> 00:14:48,079
and you can see that there's a little

00:14:47,040 --> 00:14:51,760
smiling

00:14:48,079 --> 00:14:53,680
cat in the bottom when you expand it

00:14:51,760 --> 00:14:56,079
what happens you can actually see a

00:14:53,680 --> 00:14:59,120
little bit of debug information

00:14:56,079 --> 00:15:02,160
about how this event will process

00:14:59,120 --> 00:15:03,680
you can actually press the trace link

00:15:02,160 --> 00:15:05,440
which will bring you the tracing

00:15:03,680 --> 00:15:08,000
information page

00:15:05,440 --> 00:15:09,360
that you can see exactly what happened

00:15:08,000 --> 00:15:10,959
with this event

00:15:09,360 --> 00:15:13,519
first of all you can see the event

00:15:10,959 --> 00:15:15,920
payload from github which is long

00:15:13,519 --> 00:15:17,680
but it can be very useful for a

00:15:15,920 --> 00:15:20,720
debugging

00:15:17,680 --> 00:15:22,639
you can press the evaluation tab

00:15:20,720 --> 00:15:23,920
and then you have a lot of information

00:15:22,639 --> 00:15:26,959
about how the

00:15:23,920 --> 00:15:28,880
event was actually evaluated

00:15:26,959 --> 00:15:30,639
first thing that it's interesting is the

00:15:28,880 --> 00:15:32,399
context the context is what the

00:15:30,639 --> 00:15:35,040
parameters that are given to the

00:15:32,399 --> 00:15:37,440
handlers can take the information form

00:15:35,040 --> 00:15:39,920
this is an example of a context every

00:15:37,440 --> 00:15:40,639
filter can be consumed inside an event

00:15:39,920 --> 00:15:42,399
handler

00:15:40,639 --> 00:15:44,560
all you need to see to do is just

00:15:42,399 --> 00:15:45,680
specify its name as a parameter for the

00:15:44,560 --> 00:15:47,360
event handler

00:15:45,680 --> 00:15:49,600
and it will populate for you when it's

00:15:47,360 --> 00:15:51,600
called

00:15:49,600 --> 00:15:53,600
another interesting stuff is that calls

00:15:51,600 --> 00:15:54,240
tracing if you expand the course you can

00:15:53,600 --> 00:15:56,480
see

00:15:54,240 --> 00:15:57,680
all the methods that were called from

00:15:56,480 --> 00:16:00,320
your script

00:15:57,680 --> 00:16:01,839
the dollar sign be before the use say

00:16:00,320 --> 00:16:05,680
that this function can be

00:16:01,839 --> 00:16:08,000
used only in the root module you can see

00:16:05,680 --> 00:16:09,279
the all the models that were used along

00:16:08,000 --> 00:16:11,600
with the configuration

00:16:09,279 --> 00:16:13,040
sense the secrets because it begins with

00:16:11,600 --> 00:16:15,360
secret underscore

00:16:13,040 --> 00:16:17,360
and you can also see an example github

00:16:15,360 --> 00:16:21,040
call and exactly what the

00:16:17,360 --> 00:16:21,440
github call returned let's see now pin

00:16:21,040 --> 00:16:24,800
draft

00:16:21,440 --> 00:16:26,800
and modules pin draft has actually all

00:16:24,800 --> 00:16:29,040
the references that will pin in case on

00:16:26,800 --> 00:16:30,079
alvo you will always pin the repo kit

00:16:29,040 --> 00:16:32,880
the modules

00:16:30,079 --> 00:16:34,320
to a specific shot that case if the mode

00:16:32,880 --> 00:16:37,440
was getting updated

00:16:34,320 --> 00:16:38,720
we can actually wrap in it in envoy to

00:16:37,440 --> 00:16:40,320
adopt it

00:16:38,720 --> 00:16:42,560
and these are all the models that were

00:16:40,320 --> 00:16:45,759
loaded the laws along with the exact

00:16:42,560 --> 00:16:48,079
shot that were taken from this is very

00:16:45,759 --> 00:16:50,160
useful for debugging obviously

00:16:48,079 --> 00:16:51,519
so let's talk a bit about repo key test

00:16:50,160 --> 00:16:53,199
specifically in envoy

00:16:51,519 --> 00:16:55,839
you can see the communication from every

00:16:53,199 --> 00:16:59,759
command that envoy is using

00:16:55,839 --> 00:17:01,680
in the link above also the root modules

00:16:59,759 --> 00:17:03,040
obviously it's in the root of the envoy

00:17:01,680 --> 00:17:05,120
repository

00:17:03,040 --> 00:17:06,480
although specific models will live in

00:17:05,120 --> 00:17:08,400
unvoiced eye report

00:17:06,480 --> 00:17:10,160
models these are models that were

00:17:08,400 --> 00:17:13,360
written by android people

00:17:10,160 --> 00:17:14,079
not me or anyone else on the reporter

00:17:13,360 --> 00:17:16,720
side

00:17:14,079 --> 00:17:18,400
and are just being used available

00:17:16,720 --> 00:17:20,559
commands that are ready for you which

00:17:18,400 --> 00:17:22,400
you can see again in the replicated.md

00:17:20,559 --> 00:17:23,120
on the top is slash assignment slash

00:17:22,400 --> 00:17:25,839
review

00:17:23,120 --> 00:17:27,360
to assign specific people or assignments

00:17:25,839 --> 00:17:30,480
reviewer specific paper

00:17:27,360 --> 00:17:32,400
to a pr retest and retest circle which

00:17:30,480 --> 00:17:35,760
are relaunching circle ci

00:17:32,400 --> 00:17:37,760
or azp which is very useful wait and

00:17:35,760 --> 00:17:38,720
wait any which is mostly for the

00:17:37,760 --> 00:17:40,480
maintainers

00:17:38,720 --> 00:17:42,160
when they're expecting some kind of

00:17:40,480 --> 00:17:44,400
response from someone

00:17:42,160 --> 00:17:46,160
they do slash weight and it will label

00:17:44,400 --> 00:17:48,799
the issue as waiting

00:17:46,160 --> 00:17:50,640
and whenever someone else or even them

00:17:48,799 --> 00:17:54,000
write a new comment

00:17:50,640 --> 00:17:56,000
it will just unlabel it and then

00:17:54,000 --> 00:17:57,919
they know there's a reply there and

00:17:56,000 --> 00:18:00,720
another command backboard which adds a

00:17:57,919 --> 00:18:03,600
backport a label to apr

00:18:00,720 --> 00:18:04,799
also how we talk made an awesome custom

00:18:03,600 --> 00:18:07,120
made ownership

00:18:04,799 --> 00:18:09,039
for envoy which you if you contributed

00:18:07,120 --> 00:18:11,919
to amber you probably know about

00:18:09,039 --> 00:18:13,679
that alerts when specific owners need to

00:18:11,919 --> 00:18:16,720
review specific passes

00:18:13,679 --> 00:18:16,720
in the pm

00:18:17,679 --> 00:18:21,520
so github actions you probably under

00:18:19,679 --> 00:18:23,280
asking okay so what's wrong with github

00:18:21,520 --> 00:18:24,640
actions nothing is wrong with the github

00:18:23,280 --> 00:18:25,760
actions github actions

00:18:24,640 --> 00:18:28,400
essentially supply the same

00:18:25,760 --> 00:18:29,840
functionality the difference is that

00:18:28,400 --> 00:18:31,200
actions are more optimized for

00:18:29,840 --> 00:18:33,760
long-running processes

00:18:31,200 --> 00:18:35,039
like crm deployment you can do shorter

00:18:33,760 --> 00:18:36,960
stuff but will better

00:18:35,039 --> 00:18:38,799
slightly higher latency for the stuff

00:18:36,960 --> 00:18:40,799
which is not very comfortable

00:18:38,799 --> 00:18:42,640
they are more resource intensive

00:18:40,799 --> 00:18:43,919
intensive and are generally more

00:18:42,640 --> 00:18:45,320
cumbersome to implement

00:18:43,919 --> 00:18:47,679
as they require document

00:18:45,320 --> 00:18:48,960
containerization which has more levels

00:18:47,679 --> 00:18:50,720
of moving parts

00:18:48,960 --> 00:18:52,559
that's resulting in a slow turnaround

00:18:50,720 --> 00:18:54,559
time and time to you know to take you to

00:18:52,559 --> 00:18:56,480
actually get the action to run

00:18:54,559 --> 00:18:58,320
and to be developed ripper kitty is

00:18:56,480 --> 00:19:00,240
optimized for short running actions

00:18:58,320 --> 00:19:02,640
enables much lower latency faster

00:19:00,240 --> 00:19:04,320
turnaround time and lower cost

00:19:02,640 --> 00:19:07,039
because we are actually using something

00:19:04,320 --> 00:19:10,559
that is very very low over at last

00:19:07,039 --> 00:19:11,840
starlock in in the process or in a

00:19:10,559 --> 00:19:14,400
separate process

00:19:11,840 --> 00:19:15,360
for a higher security there is no

00:19:14,400 --> 00:19:17,600
containerization

00:19:15,360 --> 00:19:19,679
waiting for kubernetes to spin up

00:19:17,600 --> 00:19:20,160
another port or container and stuff like

00:19:19,679 --> 00:19:22,799
that

00:19:20,160 --> 00:19:25,280
you just get the event and once as fast

00:19:22,799 --> 00:19:29,120
as possible we actually have

00:19:25,280 --> 00:19:31,440
a very few instances of gpc in gcp for

00:19:29,120 --> 00:19:33,039
android and i think the highest cpu that

00:19:31,440 --> 00:19:35,440
i ever got was about

00:19:33,039 --> 00:19:38,160
two or three percent so if you need

00:19:35,440 --> 00:19:42,240
something that is very low cost and very

00:19:38,160 --> 00:19:44,160
lean and mean this is for you

00:19:42,240 --> 00:19:45,360
so what's in the future of if you're

00:19:44,160 --> 00:19:47,120
replicated there's still

00:19:45,360 --> 00:19:48,799
a lot to be done it's working very

00:19:47,120 --> 00:19:52,160
nicely for about two years for

00:19:48,799 --> 00:19:54,559
a envoy now but i would really like to

00:19:52,160 --> 00:19:56,720
integrate it into gitlab which will be

00:19:54,559 --> 00:19:58,559
awesome which i'm working on right now

00:19:56,720 --> 00:20:00,400
also it shouldn't be hard to take it and

00:19:58,559 --> 00:20:02,480
put it on premise if you need

00:20:00,400 --> 00:20:03,440
which i was paying a lot of money let's

00:20:02,480 --> 00:20:06,080
say for to

00:20:03,440 --> 00:20:08,080
github improved ui currently device

00:20:06,080 --> 00:20:11,679
pretty minimal it's very effective but

00:20:08,080 --> 00:20:14,159
it's very minimal also script testing

00:20:11,679 --> 00:20:15,919
and some kind of github fake to enable

00:20:14,159 --> 00:20:16,559
the script testing is very high in the

00:20:15,919 --> 00:20:19,200
priority

00:20:16,559 --> 00:20:21,120
priority list and also something is very

00:20:19,200 --> 00:20:23,360
high even more documentation that i have

00:20:21,120 --> 00:20:24,799
now in order to import more people

00:20:23,360 --> 00:20:26,480
and so my experience showed me that

00:20:24,799 --> 00:20:29,120
people actually getting on board

00:20:26,480 --> 00:20:29,600
and on boarded on re-pocketing very very

00:20:29,120 --> 00:20:32,720
fast

00:20:29,600 --> 00:20:34,000
which makes me happy i'm looking for

00:20:32,720 --> 00:20:36,880
more projects so

00:20:34,000 --> 00:20:37,840
go and go to a repo kitty dot io stretch

00:20:36,880 --> 00:20:40,400
wait list

00:20:37,840 --> 00:20:41,280
and if you want sound yourself there and

00:20:40,400 --> 00:20:43,679
i'll get to you

00:20:41,280 --> 00:20:46,840
the moment that i can onboard more which

00:20:43,679 --> 00:20:48,240
is pretty fast i just want people to

00:20:46,840 --> 00:20:49,480
come

00:20:48,240 --> 00:20:51,520
for more information there is

00:20:49,480 --> 00:20:53,840
repocite.io you can have

00:20:51,520 --> 00:20:55,520
links to the recommendation a link to

00:20:53,840 --> 00:20:57,120
open support tickets

00:20:55,520 --> 00:21:00,080
please sign on the waitlist if you're

00:20:57,120 --> 00:21:01,280
interested and also i want to do some

00:21:00,080 --> 00:21:04,720
kind of hands-on

00:21:01,280 --> 00:21:07,039
lab session when enough people are going

00:21:04,720 --> 00:21:10,720
to sign in just go to repo

00:21:07,039 --> 00:21:12,880
dot io lab sign there specify your time

00:21:10,720 --> 00:21:15,039
zone because this is important

00:21:12,880 --> 00:21:16,960
and will organize some kind of lab

00:21:15,039 --> 00:21:20,720
session or maybe a few of them

00:21:16,960 --> 00:21:25,200
to teach more people about repo kitten

00:21:20,720 --> 00:21:28,159
thank you very much questions

00:21:25,200 --> 00:21:29,120
hi i hope you can hear me if you have

00:21:28,159 --> 00:21:32,159
any questions

00:21:29,120 --> 00:21:32,159
i'd love to answer them

00:21:34,320 --> 00:21:45,840
all right hey good good afternoon

00:21:36,960 --> 00:21:45,840
everybody welcome to listen

00:22:06,240 --> 00:22:13,919
feel free to ask questions in the chat

00:22:10,080 --> 00:22:16,320
yay ryan uh yeah i'm considering it

00:22:13,919 --> 00:22:18,080
i need to think about it some more i

00:22:16,320 --> 00:22:19,600
don't think the code is really ready to

00:22:18,080 --> 00:22:23,600
be open-sourced

00:22:19,600 --> 00:22:24,640
it needs to be i think maybe better

00:22:23,600 --> 00:22:27,760
documented because

00:22:24,640 --> 00:22:29,280
i'm the one who worked on this uh

00:22:27,760 --> 00:22:30,880
but yeah i would consider it depending

00:22:29,280 --> 00:22:32,480
on the interest and if you

00:22:30,880 --> 00:22:41,840
if you want it open source just let me

00:22:32,480 --> 00:22:41,840
know whether it's in here

00:22:49,360 --> 00:22:52,480
i'd like to say again that if you're

00:22:50,720 --> 00:22:54,400
interested in a

00:22:52,480 --> 00:22:56,080
testing repo kitty or interesting in

00:22:54,400 --> 00:22:59,440
some kind of lab

00:22:56,080 --> 00:23:01,280
go to replicated.io you should have

00:22:59,440 --> 00:23:05,000
links there i think both to the lab

00:23:01,280 --> 00:23:06,159
and the waitlist in any case it's

00:23:05,000 --> 00:23:09,840
replicated.lab

00:23:06,159 --> 00:23:09,840
or slash waitlist

00:23:27,280 --> 00:23:37,840
thank you

00:23:42,799 --> 00:23:48,240
also if you have any questions you can

00:23:44,400 --> 00:23:48,240
email me i'll post in the chat the email

00:23:49,120 --> 00:24:05,840
or for further questions

00:23:52,320 --> 00:24:05,840
and yeah

00:24:16,840 --> 00:24:19,840
sure

00:24:31,520 --> 00:24:47,840
thanks alvie

00:24:49,679 --> 00:24:52,799
if any other time might be more demos

00:24:52,400 --> 00:25:01,039
but

00:24:52,799 --> 00:25:03,440
yeah maybe some other time

00:25:01,039 --> 00:25:04,880
design who just entered the session here

00:25:03,440 --> 00:25:08,559
i did some

00:25:04,880 --> 00:25:10,400
interesting uh plugins for on for repo

00:25:08,559 --> 00:25:12,559
also how we did the owners check which

00:25:10,400 --> 00:25:14,960
was uh really cool

00:25:12,559 --> 00:25:16,720
based on my own check he made it more

00:25:14,960 --> 00:25:19,279
specific to envoy

00:25:16,720 --> 00:25:19,279
and

00:25:20,480 --> 00:25:26,080
i can't say enough how much um

00:25:23,600 --> 00:25:27,200
starlock is awesome especially the

00:25:26,080 --> 00:25:31,120
implementation that

00:25:27,200 --> 00:25:32,480
alan donovan and yeah i think that

00:25:31,120 --> 00:25:34,880
there's really no need to create a

00:25:32,480 --> 00:25:37,760
container for anything just

00:25:34,880 --> 00:25:38,960
go and you know if you have some kind of

00:25:37,760 --> 00:25:42,320
general environment like

00:25:38,960 --> 00:25:45,520
lua or on star luck

00:25:42,320 --> 00:25:47,120
you you can actually use this maybe i'll

00:25:45,520 --> 00:25:49,679
talk in the future some other place

00:25:47,120 --> 00:25:57,840
about the benefits of such environment i

00:25:49,679 --> 00:25:57,840
think it could be very good

00:25:59,039 --> 00:26:03,120
i'll give another minute to open the

00:26:01,279 --> 00:26:05,279
question if there's nobody i'll just

00:26:03,120 --> 00:26:05,279
leave

00:26:06,720 --> 00:26:10,880
all right if you do the lab i will make

00:26:08,799 --> 00:26:25,840
you a replicator certified engineer

00:26:10,880 --> 00:26:25,840
this is cool and make a sticker

00:26:32,159 --> 00:26:35,279
okay if you have any questions feel free

00:26:34,000 --> 00:26:39,840
to email me

00:26:35,279 --> 00:26:46,240
and also register on repokito.org and

00:26:39,840 --> 00:26:46,240

YouTube URL: https://www.youtube.com/watch?v=kIFjDV_zHaQ


