Title: Understanding, maintaining and securing Envoy's supply chain - Michael Payne, Harvey Tuch
Publication date: 2020-10-21
Playlist: EnvoyCon 2020 - Virtual
Description: 
	Understanding, maintaining and securing Envoy's supply chain - Michael Payne, Harvey Tuch

Envoy depends on over 60 external dependencies for its data and control plane functionality, as well as for its build, test and features such as observability. This talk will provide an overview of the third party dependencies that constitute the Envoy software supply chain. We will enumerate, categorize and describe the key dependencies, with a focus on security and how they relate to the Envoy threat model. The talk will cover how Envoyâ€™s dependencies have been maintained, versioned and tested, how the Envoy community plans to evolve and increase confidence in the supply chain, as well as how organizations can apply strategies to minimize unnecessary dependencies.
Captions: 
	00:00:00,080 --> 00:00:06,080
hello i'm boycon i'm harvey took

00:00:03,199 --> 00:00:08,160
i work at google where i tech lead the

00:00:06,080 --> 00:00:10,400
onboard platform team

00:00:08,160 --> 00:00:12,559
i'm going to be presenting today with

00:00:10,400 --> 00:00:15,280
michael payne who leads kubernetes

00:00:12,559 --> 00:00:16,400
architecture at jpmorgan chase

00:00:15,280 --> 00:00:18,960
and we're going to be talking about

00:00:16,400 --> 00:00:21,199
envoy's supply chain

00:00:18,960 --> 00:00:22,560
what is the supply chain why do we even

00:00:21,199 --> 00:00:23,840
care

00:00:22,560 --> 00:00:26,480
security is only as strong as the

00:00:23,840 --> 00:00:28,880
weakest link and the weakest link in

00:00:26,480 --> 00:00:31,679
software is often the components which

00:00:28,880 --> 00:00:34,399
you don't see

00:00:31,679 --> 00:00:36,079
any software system has a number of uh

00:00:34,399 --> 00:00:36,559
software components some of which come

00:00:36,079 --> 00:00:39,680
to it

00:00:36,559 --> 00:00:42,879
indirectly through a transitive chain

00:00:39,680 --> 00:00:44,399
of dependencies there is a very real

00:00:42,879 --> 00:00:46,320
attacks that have been staged

00:00:44,399 --> 00:00:47,600
in open source against the software

00:00:46,320 --> 00:00:50,480
supply chain

00:00:47,600 --> 00:00:51,600
in particular in the managed language

00:00:50,480 --> 00:00:54,559
runtime such as

00:00:51,600 --> 00:00:56,480
python ruby and javascript but there

00:00:54,559 --> 00:00:58,559
have also been attacks such as

00:00:56,480 --> 00:00:59,680
xcode ghost which attack developer

00:00:58,559 --> 00:01:01,760
infrastructure

00:00:59,680 --> 00:01:04,159
and those aspects the supply chain these

00:01:01,760 --> 00:01:06,880
are very real attacks which exist and

00:01:04,159 --> 00:01:09,040
it helps us to sort of understand better

00:01:06,880 --> 00:01:11,600
what is onboard exposure to these

00:01:09,040 --> 00:01:12,880
and what can we do about them in open

00:01:11,600 --> 00:01:14,320
source and what can you as an

00:01:12,880 --> 00:01:16,560
organization do to

00:01:14,320 --> 00:01:18,880
limit your exposure to the supply chain

00:01:16,560 --> 00:01:20,720
so this talk's going to focus on

00:01:18,880 --> 00:01:22,400
how the supply chain contributes to our

00:01:20,720 --> 00:01:24,400
voice trusted compute base

00:01:22,400 --> 00:01:27,280
and how we manage and maintain this and

00:01:24,400 --> 00:01:29,280
how you can understand it

00:01:27,280 --> 00:01:31,680
as a starting point we can look at

00:01:29,280 --> 00:01:34,159
envoy's

00:01:31,680 --> 00:01:35,840
code base itself the direct code that

00:01:34,159 --> 00:01:38,320
you depend upon from envoy

00:01:35,840 --> 00:01:40,320
and this is now around 170 000 lines of

00:01:38,320 --> 00:01:42,159
mostly c plus plus code

00:01:40,320 --> 00:01:43,360
it's grown roughly linearly since the

00:01:42,159 --> 00:01:45,680
beginning of 2018

00:01:43,360 --> 00:01:46,640
it's actually super linear if you look a

00:01:45,680 --> 00:01:50,000
bit further back

00:01:46,640 --> 00:01:52,079
but this is the current trends and

00:01:50,000 --> 00:01:53,520
we can actually break that down and do

00:01:52,079 --> 00:01:56,560
it between onwards core

00:01:53,520 --> 00:01:58,799
and blue and extensions in beige

00:01:56,560 --> 00:02:00,960
and you can see roughly right now it's

00:01:58,799 --> 00:02:02,560
about 50 50 split between the two and

00:02:00,960 --> 00:02:03,759
the extension mechanism which was

00:02:02,560 --> 00:02:06,159
introduced

00:02:03,759 --> 00:02:07,840
back at the beginning of 2018 is

00:02:06,159 --> 00:02:10,879
actually very effective at

00:02:07,840 --> 00:02:13,200
helping to tamper the growth in

00:02:10,879 --> 00:02:14,640
envoy's code base at least the mandatory

00:02:13,200 --> 00:02:15,680
code that you must include in your

00:02:14,640 --> 00:02:16,959
binary

00:02:15,680 --> 00:02:19,280
but it's that the call that still

00:02:16,959 --> 00:02:22,080
continues to grow

00:02:19,280 --> 00:02:23,360
okay so looking at the same time period

00:02:22,080 --> 00:02:24,720
but instead of looking at

00:02:23,360 --> 00:02:26,319
onboard source code we look at the

00:02:24,720 --> 00:02:27,760
number of dependencies that homeboy

00:02:26,319 --> 00:02:29,120
directly relies upon

00:02:27,760 --> 00:02:30,560
and we're just looking at like one set

00:02:29,120 --> 00:02:31,200
of dependencies here which are the ones

00:02:30,560 --> 00:02:33,920
that are

00:02:31,200 --> 00:02:36,000
linked directly into the binary and

00:02:33,920 --> 00:02:38,160
feature in the data and control plane

00:02:36,000 --> 00:02:39,760
they've grown from roughly around 20 or

00:02:38,160 --> 00:02:42,239
so dependencies

00:02:39,760 --> 00:02:43,840
till today where it's roughly 60 again

00:02:42,239 --> 00:02:46,480
roughly linear growth

00:02:43,840 --> 00:02:47,680
and if we slice this data and look at it

00:02:46,480 --> 00:02:50,879
in terms of

00:02:47,680 --> 00:02:53,120
uh extension and core and other

00:02:50,879 --> 00:02:54,879
like components like things extensions

00:02:53,120 --> 00:02:56,160
that are dependencies that are there for

00:02:54,879 --> 00:02:58,879
builds and tests

00:02:56,160 --> 00:03:00,560
and apis it's roughly a third or third

00:02:58,879 --> 00:03:04,000
or third a third for call

00:03:00,560 --> 00:03:06,239
envoy third for um extensions in envoy

00:03:04,000 --> 00:03:08,239
for the actual binary and a third sort

00:03:06,239 --> 00:03:10,720
of uh of the remainder

00:03:08,239 --> 00:03:11,920
and even core dependencies in envoy have

00:03:10,720 --> 00:03:15,599
grown from

00:03:11,920 --> 00:03:18,080
uh roughly 10 to 20 today

00:03:15,599 --> 00:03:19,760
and the sheer number of extensions of

00:03:18,080 --> 00:03:21,200
over 60 means you're in a situation

00:03:19,760 --> 00:03:23,599
where it's very hard to

00:03:21,200 --> 00:03:25,680
keep in your head exactly what envoys

00:03:23,599 --> 00:03:27,360
depending upon at any point in time and

00:03:25,680 --> 00:03:30,879
we've introduced some metadata to help

00:03:27,360 --> 00:03:30,879
with this which i'll talk about later

00:03:31,280 --> 00:03:35,040
well for the next few slides we're going

00:03:32,879 --> 00:03:37,040
to look at envoy's dependencies through

00:03:35,040 --> 00:03:38,400
a different visualization this is that

00:03:37,040 --> 00:03:41,120
of a tree map

00:03:38,400 --> 00:03:42,239
and this tree map depicts the square the

00:03:41,120 --> 00:03:44,879
rectangles are

00:03:42,239 --> 00:03:47,120
sized based on the number of lines that

00:03:44,879 --> 00:03:48,319
each component in envoy contributes to

00:03:47,120 --> 00:03:51,280
the binary

00:03:48,319 --> 00:03:53,280
uh as determined by the debug lines

00:03:51,280 --> 00:03:55,280
which exist in the onboard binary so

00:03:53,280 --> 00:03:57,760
it's somewhat of an over approximation

00:03:55,280 --> 00:03:59,680
but it's the actual the most direct way

00:03:57,760 --> 00:04:00,720
to map back from an on void binary

00:03:59,680 --> 00:04:02,879
artifact

00:04:00,720 --> 00:04:04,159
to the underlying dependencies in home

00:04:02,879 --> 00:04:06,080
voice source code

00:04:04,159 --> 00:04:07,840
so we'll we'll go with that it's it

00:04:06,080 --> 00:04:10,319
provides a reasonable

00:04:07,840 --> 00:04:12,080
first approximation of the relative size

00:04:10,319 --> 00:04:13,680
of each of these dependencies

00:04:12,080 --> 00:04:15,439
amongst themselves and between them and

00:04:13,680 --> 00:04:16,400
envoy and there's some interesting

00:04:15,439 --> 00:04:19,600
things to note

00:04:16,400 --> 00:04:20,160
from this uh uh visualization to begin

00:04:19,600 --> 00:04:22,960
with in

00:04:20,160 --> 00:04:24,320
pink envoys you know flagship color we

00:04:22,960 --> 00:04:27,280
have uh all the envoy

00:04:24,320 --> 00:04:29,840
uh directs contributions to the tcb

00:04:27,280 --> 00:04:31,600
which is about 20 to 25

00:04:29,840 --> 00:04:33,360
and the rest is actually external

00:04:31,600 --> 00:04:34,080
dependencies and these are there for

00:04:33,360 --> 00:04:36,320
various

00:04:34,080 --> 00:04:37,759
reasons we have boring ssl for our

00:04:36,320 --> 00:04:41,680
transport security

00:04:37,759 --> 00:04:42,400
we have quiche http ang http 2 and http

00:04:41,680 --> 00:04:44,960
parser

00:04:42,400 --> 00:04:46,320
for our codex we have things like

00:04:44,960 --> 00:04:49,759
luagits for

00:04:46,320 --> 00:04:51,280
dynamic code execution grpc and protobuf

00:04:49,759 --> 00:04:55,120
for the control plane

00:04:51,280 --> 00:04:58,720
and so on and so we have a uh roughly

00:04:55,120 --> 00:05:00,000
at least 20 dependencies but uh maybe 20

00:04:58,720 --> 00:05:02,080
to 30

00:05:00,000 --> 00:05:03,600
roughly which we would see in a you know

00:05:02,080 --> 00:05:05,840
normal onboard binary

00:05:03,600 --> 00:05:07,680
which are there um and we're linking

00:05:05,840 --> 00:05:09,280
against

00:05:07,680 --> 00:05:11,280
we can look at this data through a

00:05:09,280 --> 00:05:13,440
different lens and ask which are

00:05:11,280 --> 00:05:15,440
essential and which we can uh

00:05:13,440 --> 00:05:17,840
optionalize and compile out

00:05:15,440 --> 00:05:18,720
in blue we have the core components

00:05:17,840 --> 00:05:22,479
which

00:05:18,720 --> 00:05:24,240
sort of dominates uh the the the view

00:05:22,479 --> 00:05:26,240
and we have embedded the optional

00:05:24,240 --> 00:05:29,919
components the extensions

00:05:26,240 --> 00:05:32,240
and you can you know by removing these

00:05:29,919 --> 00:05:35,039
uh significantly reduce the size of the

00:05:32,240 --> 00:05:37,039
tcp to envoy by maybe 20 25

00:05:35,039 --> 00:05:39,759
but most of these dependencies are

00:05:37,039 --> 00:05:42,240
actually there to stay

00:05:39,759 --> 00:05:44,240
looking at this uh set of dependencies

00:05:42,240 --> 00:05:46,000
in terms of organization and the only

00:05:44,240 --> 00:05:48,080
organization which consistently is

00:05:46,000 --> 00:05:50,800
actually responsible for maintaining

00:05:48,080 --> 00:05:52,400
or being the sort of provenance of

00:05:50,800 --> 00:05:55,120
dependencies is google

00:05:52,400 --> 00:05:56,479
and there's uh they're responsible

00:05:55,120 --> 00:05:58,960
actually for roughly

00:05:56,479 --> 00:06:00,639
um uh i don't know maybe if i have all

00:05:58,960 --> 00:06:03,600
this like eighty percent of our

00:06:00,639 --> 00:06:05,039
uh tcp there which is pretty actually

00:06:03,600 --> 00:06:07,680
encouraging because

00:06:05,039 --> 00:06:09,919
you know uh you know while between these

00:06:07,680 --> 00:06:12,800
projects there's no uniform standards

00:06:09,919 --> 00:06:14,560
there is at least some core common um

00:06:12,800 --> 00:06:15,199
software engineering principles that

00:06:14,560 --> 00:06:16,560
developers

00:06:15,199 --> 00:06:18,639
coming from google will bring to the

00:06:16,560 --> 00:06:21,840
table which are not necessarily true in

00:06:18,639 --> 00:06:21,840
other projects

00:06:22,639 --> 00:06:28,319
looking at the projects to a different

00:06:24,160 --> 00:06:28,319
view again we can think about how

00:06:28,720 --> 00:06:31,919
vulnerable they are how many security

00:06:30,560 --> 00:06:33,520
vulnerabilities have occurred

00:06:31,919 --> 00:06:35,520
over a period of time and the

00:06:33,520 --> 00:06:36,400
methodology i use on this slide is to

00:06:35,520 --> 00:06:39,120
look back

00:06:36,400 --> 00:06:40,960
since the beginning of 2018 and ask how

00:06:39,120 --> 00:06:41,440
many cves have occurred in the project

00:06:40,960 --> 00:06:42,960
so

00:06:41,440 --> 00:06:45,120
this doesn't take into account how many

00:06:42,960 --> 00:06:48,319
of these cvs affected envoy

00:06:45,120 --> 00:06:50,880
or how many of these cves would have uh

00:06:48,319 --> 00:06:52,479
actually even mattered because these

00:06:50,880 --> 00:06:53,360
dependencies weren't linked to envoy at

00:06:52,479 --> 00:06:55,520
the time

00:06:53,360 --> 00:06:56,960
but they give a rough idea of how scary

00:06:55,520 --> 00:06:58,960
different projects are and

00:06:56,960 --> 00:07:00,960
the outlier here by far as lib curl it's

00:06:58,960 --> 00:07:01,759
something like 14 cv years in this

00:07:00,960 --> 00:07:04,240
period

00:07:01,759 --> 00:07:05,599
so this is actually really scary uh we

00:07:04,240 --> 00:07:07,120
actually don't need to rely on loop

00:07:05,599 --> 00:07:08,800
curls so that one's probably going to go

00:07:07,120 --> 00:07:10,880
away we have an open issue to remove

00:07:08,800 --> 00:07:13,520
that anyone is interested in helping out

00:07:10,880 --> 00:07:14,160
they have our full support there we have

00:07:13,520 --> 00:07:16,080
a few

00:07:14,160 --> 00:07:17,520
a trickle of uh cves and other

00:07:16,080 --> 00:07:20,240
dependencies and some have

00:07:17,520 --> 00:07:21,919
actually none whatsoever which is either

00:07:20,240 --> 00:07:24,319
encouraging or just means they haven't

00:07:21,919 --> 00:07:27,360
had enough eyeballs

00:07:24,319 --> 00:07:29,360
looking at just cves is no panacea many

00:07:27,360 --> 00:07:31,120
projects don't issue cves when they

00:07:29,360 --> 00:07:34,240
discover security bugs

00:07:31,120 --> 00:07:35,840
some security bugs are

00:07:34,240 --> 00:07:37,440
treated as functional bugs but are

00:07:35,840 --> 00:07:39,840
really security bugs

00:07:37,440 --> 00:07:43,840
and some cvs don't get properly

00:07:39,840 --> 00:07:46,160
correlated with the cpes and so on

00:07:43,840 --> 00:07:47,759
can take another view at like you know

00:07:46,160 --> 00:07:50,240
how much we trust or what we should be

00:07:47,759 --> 00:07:52,560
doing about these dependencies by seeing

00:07:50,240 --> 00:07:54,800
uh how often we update them and they

00:07:52,560 --> 00:07:57,120
should be updated and we can see

00:07:54,800 --> 00:07:58,319
uh in terms of updates boring ssl gets

00:07:57,120 --> 00:07:59,680
the most frequent updates and we'll

00:07:58,319 --> 00:08:00,560
understand that when we get to the next

00:07:59,680 --> 00:08:02,720
slide but it's

00:08:00,560 --> 00:08:04,960
encouraging because that is one of the

00:08:02,720 --> 00:08:06,080
really most significant attack services

00:08:04,960 --> 00:08:09,199
that we have

00:08:06,080 --> 00:08:11,680
uh and but other dependencies like gipc

00:08:09,199 --> 00:08:12,400
or quiche or protobuf are also dependent

00:08:11,680 --> 00:08:15,520
updated

00:08:12,400 --> 00:08:17,120
relatively frequently

00:08:15,520 --> 00:08:19,680
we can now look at like the number of

00:08:17,120 --> 00:08:20,800
actual version tagged releases on github

00:08:19,680 --> 00:08:22,639
for these different

00:08:20,800 --> 00:08:24,080
dependencies and this breaks a very

00:08:22,639 --> 00:08:25,840
different picture because

00:08:24,080 --> 00:08:27,759
many of our dependencies actually have

00:08:25,840 --> 00:08:30,160
no version releases

00:08:27,759 --> 00:08:32,159
which is kind of actually scary in say

00:08:30,160 --> 00:08:35,839
in many ways because things like

00:08:32,159 --> 00:08:39,519
boring ssl or quiche or uh

00:08:35,839 --> 00:08:40,159
um something like um tc lab or this kind

00:08:39,519 --> 00:08:41,839
of thing

00:08:40,159 --> 00:08:43,200
it's kind of like a little concerning

00:08:41,839 --> 00:08:43,839
that we don't actually have a way to

00:08:43,200 --> 00:08:46,160
know

00:08:43,839 --> 00:08:46,880
when we should be updating and when you

00:08:46,160 --> 00:08:49,920
know uh

00:08:46,880 --> 00:08:52,160
uh other than what watching for cves or

00:08:49,920 --> 00:08:54,240
trying to uh you know pay attention to

00:08:52,160 --> 00:08:55,440
mailing lists or this kind of thing

00:08:54,240 --> 00:08:56,880
so this isn't that we actually want to

00:08:55,440 --> 00:08:57,600
address and i'll talk about that in a

00:08:56,880 --> 00:09:01,600
few slides

00:08:57,600 --> 00:09:03,040
time final way to slice this data is to

00:09:01,600 --> 00:09:05,040
look at this in terms of

00:09:03,040 --> 00:09:07,519
what are the sort of the most scary

00:09:05,040 --> 00:09:08,800
dependencies from a security threat

00:09:07,519 --> 00:09:11,040
model perspective

00:09:08,800 --> 00:09:12,399
and here i've color-coded in red

00:09:11,040 --> 00:09:14,720
manually

00:09:12,399 --> 00:09:16,800
those dependencies which feature the

00:09:14,720 --> 00:09:17,920
data plane which will interact with

00:09:16,800 --> 00:09:20,800
untrusted

00:09:17,920 --> 00:09:22,480
data plane traffic and there's quite a

00:09:20,800 --> 00:09:25,760
significant number of these

00:09:22,480 --> 00:09:28,160
there are ones which uh are sort of like

00:09:25,760 --> 00:09:30,000
in orange and yellow which are sort of

00:09:28,160 --> 00:09:30,560
control plane or observability related

00:09:30,000 --> 00:09:32,800
which are

00:09:30,560 --> 00:09:33,920
a little less scary and in white we have

00:09:32,800 --> 00:09:36,959
some dependencies like tc

00:09:33,920 --> 00:09:39,519
black or pgv which aren't going to be

00:09:36,959 --> 00:09:41,200
super important from a threat model

00:09:39,519 --> 00:09:43,519
perspective

00:09:41,200 --> 00:09:45,600
so how do we even generalize generalize

00:09:43,519 --> 00:09:48,720
generate these visualizations

00:09:45,600 --> 00:09:49,279
and um how do we keep track of them

00:09:48,720 --> 00:09:50,720
today

00:09:49,279 --> 00:09:52,560
well in the last this is actually a

00:09:50,720 --> 00:09:53,760
shifting story in the last

00:09:52,560 --> 00:09:55,440
month or two there's been a number of

00:09:53,760 --> 00:09:57,120
improvements to this and we now have

00:09:55,440 --> 00:09:59,200
pretty complete metadata

00:09:57,120 --> 00:10:01,760
which used to only be comments or not at

00:09:59,200 --> 00:10:03,200
all about most of our projects

00:10:01,760 --> 00:10:05,920
that we depend upon we have project

00:10:03,200 --> 00:10:09,279
metadata versioning information

00:10:05,920 --> 00:10:11,680
uh pinning sharpening we have um

00:10:09,279 --> 00:10:13,839
when these competitors were last updated

00:10:11,680 --> 00:10:15,600
and then information on the use category

00:10:13,839 --> 00:10:17,360
and extensions and cpe

00:10:15,600 --> 00:10:19,519
which were actually very useful in

00:10:17,360 --> 00:10:22,160
generating the visualizations which

00:10:19,519 --> 00:10:22,640
uh preceded the slide we're actually

00:10:22,160 --> 00:10:24,640
also

00:10:22,640 --> 00:10:26,320
providing a dashboard which tracks it

00:10:24,640 --> 00:10:28,560
ahead the current version

00:10:26,320 --> 00:10:29,600
and externalizes all this information

00:10:28,560 --> 00:10:31,920
and links to

00:10:29,600 --> 00:10:33,680
uh cve search and that kind of thing and

00:10:31,920 --> 00:10:37,279
this gets included now in the onboard

00:10:33,680 --> 00:10:37,279
documentation in each release

00:10:38,000 --> 00:10:41,200
so far we've lastly talked about things

00:10:39,600 --> 00:10:41,839
which are informational they're not

00:10:41,200 --> 00:10:44,560
necessarily

00:10:41,839 --> 00:10:46,000
actionable in and of themselves we're

00:10:44,560 --> 00:10:48,480
trying to actually take this information

00:10:46,000 --> 00:10:49,519
use this to improve envoy's security

00:10:48,480 --> 00:10:51,040
posture

00:10:49,519 --> 00:10:52,959
and the way we're doing this is to start

00:10:51,040 --> 00:10:54,240
with is by formulating a policy and this

00:10:52,959 --> 00:10:56,320
policy is already up

00:10:54,240 --> 00:10:57,680
but we're working on refining this and

00:10:56,320 --> 00:10:59,920
making it enforceable

00:10:57,680 --> 00:11:02,320
but this will say things like well you

00:10:59,920 --> 00:11:05,440
don't get to add a repository to envoy

00:11:02,320 --> 00:11:07,760
unless it has peer code peer review

00:11:05,440 --> 00:11:09,839
uh peer review of code it has version

00:11:07,760 --> 00:11:12,000
releases release notes

00:11:09,839 --> 00:11:13,519
testing fuzzing all this kind of thing

00:11:12,000 --> 00:11:15,279
or at least you don't get added to make

00:11:13,519 --> 00:11:18,160
a dependency of the core

00:11:15,279 --> 00:11:19,760
or things like robust extensions because

00:11:18,160 --> 00:11:21,839
uh having a policy like this

00:11:19,760 --> 00:11:22,959
is going to help control the growth in

00:11:21,839 --> 00:11:24,480
extensions

00:11:22,959 --> 00:11:26,399
and it's going to allow us to have

00:11:24,480 --> 00:11:28,160
greater confidence in them we probably

00:11:26,399 --> 00:11:30,640
have to like you know grandfather in

00:11:28,160 --> 00:11:31,200
uh certain dependencies which don't

00:11:30,640 --> 00:11:33,360
quite

00:11:31,200 --> 00:11:34,320
match up to this standard but where

00:11:33,360 --> 00:11:37,200
possible this will

00:11:34,320 --> 00:11:38,720
also use this drive a policy around

00:11:37,200 --> 00:11:41,360
replacing these uh

00:11:38,720 --> 00:11:42,880
um older dependencies the other way we

00:11:41,360 --> 00:11:45,120
can make use of this information

00:11:42,880 --> 00:11:47,200
is by trying to use this to follow best

00:11:45,120 --> 00:11:49,519
practices as ourselves when it comes to

00:11:47,200 --> 00:11:51,279
dependency management and this includes

00:11:49,519 --> 00:11:52,320
providing a clear bill of materials

00:11:51,279 --> 00:11:53,360
which is essentially what this

00:11:52,320 --> 00:11:56,800
dependency

00:11:53,360 --> 00:11:58,320
dashboard documentation does and

00:11:56,800 --> 00:11:59,920
um we're working on making this more

00:11:58,320 --> 00:12:01,600
complete over time

00:11:59,920 --> 00:12:03,120
uh recently added support for api

00:12:01,600 --> 00:12:05,920
dependencies

00:12:03,120 --> 00:12:06,959
and also doing making sure we're using

00:12:05,920 --> 00:12:08,720
sharpening

00:12:06,959 --> 00:12:10,800
wherever possible we've been doing this

00:12:08,720 --> 00:12:12,399
for a while for core dependencies but

00:12:10,800 --> 00:12:14,320
some of the python stuff only recently

00:12:12,399 --> 00:12:16,639
got hashes and then we can maintain

00:12:14,320 --> 00:12:19,920
these dependencies and update them

00:12:16,639 --> 00:12:21,920
as needed in a regular cadence or as

00:12:19,920 --> 00:12:23,360
releases occur and so for the rest of

00:12:21,920 --> 00:12:24,079
this talk i'm going to hand you over to

00:12:23,360 --> 00:12:26,560
michael

00:12:24,079 --> 00:12:28,000
who's really been uh phenomenal and

00:12:26,560 --> 00:12:30,959
ombre community owes him a

00:12:28,000 --> 00:12:32,240
huge debt of gratitude in uh basically

00:12:30,959 --> 00:12:34,959
being a one-man

00:12:32,240 --> 00:12:35,760
shop for maintaining and keeping us up

00:12:34,959 --> 00:12:38,399
to date for

00:12:35,760 --> 00:12:40,320
all our dependencies in supply chain and

00:12:38,399 --> 00:12:42,480
a large part one more security story

00:12:40,320 --> 00:12:43,440
really rests on his shoulders so with

00:12:42,480 --> 00:12:46,639
that i'll uh

00:12:43,440 --> 00:12:46,639
hand it over to michael

00:12:46,720 --> 00:12:51,839
thanks very much harvey um uh yeah so

00:12:49,839 --> 00:12:53,360
so dependency maintenance has been an

00:12:51,839 --> 00:12:55,600
interesting journey for me

00:12:53,360 --> 00:12:56,480
i actually went to one of the first

00:12:55,600 --> 00:12:59,440
envoy

00:12:56,480 --> 00:13:01,279
meetups that matt klein gave in the bay

00:12:59,440 --> 00:13:03,120
area sort of many years ago

00:13:01,279 --> 00:13:04,560
and became very intrigued with the

00:13:03,120 --> 00:13:07,040
project and

00:13:04,560 --> 00:13:08,560
sort of tried to jump in straight away

00:13:07,040 --> 00:13:11,279
i'm not like a strong c

00:13:08,560 --> 00:13:12,959
plus plus uh programmer but also i sort

00:13:11,279 --> 00:13:13,839
of thought you know how can i add value

00:13:12,959 --> 00:13:15,839
here and

00:13:13,839 --> 00:13:17,519
really got interested in how do we

00:13:15,839 --> 00:13:20,079
maintain dependencies

00:13:17,519 --> 00:13:20,880
maintain their currency throughout the

00:13:20,079 --> 00:13:22,560
project

00:13:20,880 --> 00:13:24,480
and so i sort of started doing some of

00:13:22,560 --> 00:13:26,000
this work and and i was thinking about

00:13:24,480 --> 00:13:27,519
you know how do i actually

00:13:26,000 --> 00:13:30,000
how do i go about doing this and so

00:13:27,519 --> 00:13:31,680
essentially what i've done over

00:13:30,000 --> 00:13:33,279
over the years is sort of build up a

00:13:31,680 --> 00:13:35,920
process around

00:13:33,279 --> 00:13:37,200
maintaining the dependencies and i'm

00:13:35,920 --> 00:13:38,959
going to share that with you

00:13:37,200 --> 00:13:41,519
now in terms of some of the dependencies

00:13:38,959 --> 00:13:44,160
get bumped through the natural course of

00:13:41,519 --> 00:13:45,839
development on invoice so people are

00:13:44,160 --> 00:13:47,199
adding features and they require

00:13:45,839 --> 00:13:49,360
specific

00:13:47,199 --> 00:13:50,320
features that are independency versions

00:13:49,360 --> 00:13:51,519
or commits

00:13:50,320 --> 00:13:54,639
that we don't currently have in the

00:13:51,519 --> 00:13:57,360
project and so those pr's will bump

00:13:54,639 --> 00:13:58,800
those specific dependencies and we go

00:13:57,360 --> 00:14:00,399
through the process

00:13:58,800 --> 00:14:02,079
of validating those that harvey went

00:14:00,399 --> 00:14:03,440
through before

00:14:02,079 --> 00:14:05,440
but then there's just the regular

00:14:03,440 --> 00:14:06,240
maintenance and that's largely what i've

00:14:05,440 --> 00:14:08,079
been doing

00:14:06,240 --> 00:14:10,800
and so what i've done is built like a

00:14:08,079 --> 00:14:12,880
large rss

00:14:10,800 --> 00:14:14,720
feed that tracks most of the

00:14:12,880 --> 00:14:16,160
dependencies and when a new dependency

00:14:14,720 --> 00:14:18,079
gets added

00:14:16,160 --> 00:14:19,760
there was actually another one added

00:14:18,079 --> 00:14:23,040
today i actually

00:14:19,760 --> 00:14:26,000
modify my my rss feed and um

00:14:23,040 --> 00:14:26,639
and then i monitor the updates from

00:14:26,000 --> 00:14:28,560
releases

00:14:26,639 --> 00:14:31,360
and for where we have dependencies

00:14:28,560 --> 00:14:33,120
without releases monster the commits

00:14:31,360 --> 00:14:34,959
and as they come through i can open

00:14:33,120 --> 00:14:36,720
those look at those determine

00:14:34,959 --> 00:14:38,880
if we think we need to actually make a

00:14:36,720 --> 00:14:40,639
change whether it's significant whether

00:14:38,880 --> 00:14:42,800
we can skip the change

00:14:40,639 --> 00:14:44,639
and and that's sort of just built up

00:14:42,800 --> 00:14:45,600
over understanding where all the

00:14:44,639 --> 00:14:48,160
dependencies sit

00:14:45,600 --> 00:14:49,839
over time and there is a link down the

00:14:48,160 --> 00:14:53,519
bottom there there's a

00:14:49,839 --> 00:14:56,399
a github guest which has that rss opml

00:14:53,519 --> 00:14:58,639
feed for those that are interested in

00:14:56,399 --> 00:15:00,000
looking at these the frequency of these

00:14:58,639 --> 00:15:01,680
updates

00:15:00,000 --> 00:15:03,920
and then we've got some teams also that

00:15:01,680 --> 00:15:06,639
use um uh

00:15:03,920 --> 00:15:08,240
that use bots that look at github

00:15:06,639 --> 00:15:09,920
release emails as well

00:15:08,240 --> 00:15:11,519
and they can actually turn those release

00:15:09,920 --> 00:15:14,160
emails that come out of

00:15:11,519 --> 00:15:16,240
releases or commits and modify their

00:15:14,160 --> 00:15:19,839
repos based on those watches

00:15:16,240 --> 00:15:21,600
next slide are we and so just

00:15:19,839 --> 00:15:23,920
just quickly here's like a table that

00:15:21,600 --> 00:15:24,720
lays out where all of the dependencies

00:15:23,920 --> 00:15:27,519
in the invoice

00:15:24,720 --> 00:15:28,880
envoy codebase are there used to be more

00:15:27,519 --> 00:15:30,399
than this we've actually been trying to

00:15:28,880 --> 00:15:32,880
consolidate the

00:15:30,399 --> 00:15:34,320
the location of the dependencies it used

00:15:32,880 --> 00:15:36,320
to be quite spread out

00:15:34,320 --> 00:15:37,440
and so you can see that the most of the

00:15:36,320 --> 00:15:39,199
heavy lifting

00:15:37,440 --> 00:15:41,920
for the core dependencies is in the

00:15:39,199 --> 00:15:44,079
bazel repository locations

00:15:41,920 --> 00:15:45,519
file and then we've got some api

00:15:44,079 --> 00:15:49,279
dependencies on on the far

00:15:45,519 --> 00:15:52,480
top left in those basal files

00:15:49,279 --> 00:15:54,720
and then down below bottom right we have

00:15:52,480 --> 00:15:56,079
some of the other and test categories

00:15:54,720 --> 00:15:58,560
and they're the python pip

00:15:56,079 --> 00:15:59,279
installs that we do that we uh we do

00:15:58,560 --> 00:16:01,040
also

00:15:59,279 --> 00:16:02,320
as harvey mentioned we've just recently

00:16:01,040 --> 00:16:05,440
added

00:16:02,320 --> 00:16:08,639
a sha pinning for those as well

00:16:05,440 --> 00:16:12,079
looks like

00:16:08,639 --> 00:16:12,880
and so what i want to talk about here is

00:16:12,079 --> 00:16:14,880
is how

00:16:12,880 --> 00:16:15,920
how do i actually go about testing these

00:16:14,880 --> 00:16:17,759
dependencies

00:16:15,920 --> 00:16:20,160
and so what i found over time is that

00:16:17,759 --> 00:16:22,399
quite a few of these dependencies

00:16:20,160 --> 00:16:25,199
can be relatively volatile so in terms

00:16:22,399 --> 00:16:26,480
of uh in between commits and even uh

00:16:25,199 --> 00:16:28,399
version changes

00:16:26,480 --> 00:16:29,519
uh their interaction with the invoice

00:16:28,399 --> 00:16:32,079
code base can change

00:16:29,519 --> 00:16:34,560
apis change in particular things like

00:16:32,079 --> 00:16:37,440
protobuf grpc

00:16:34,560 --> 00:16:39,279
rules rules underscore go have been

00:16:37,440 --> 00:16:40,160
quite volatile so they require a lot of

00:16:39,279 --> 00:16:41,680
testing

00:16:40,160 --> 00:16:43,440
and so i do all this sort of testing

00:16:41,680 --> 00:16:47,120
locally i run

00:16:43,440 --> 00:16:51,199
linux x86 64-bit environment

00:16:47,120 --> 00:16:53,199
an arm 64 environment and then mac os

00:16:51,199 --> 00:16:55,199
as well and i found having these

00:16:53,199 --> 00:16:57,279
multiple architectures

00:16:55,199 --> 00:17:00,240
also really helps with the testing speed

00:16:57,279 --> 00:17:02,880
and quality as well because i can find

00:17:00,240 --> 00:17:03,680
platform specific issues before prs are

00:17:02,880 --> 00:17:05,760
raised

00:17:03,680 --> 00:17:06,959
and we sort of kick off the ci jobs that

00:17:05,760 --> 00:17:10,079
test the

00:17:06,959 --> 00:17:12,799
the pull requests um

00:17:10,079 --> 00:17:13,760
another key thing here is that um i i

00:17:12,799 --> 00:17:16,319
don't rely on

00:17:13,760 --> 00:17:18,079
on docker for any of this i i've got

00:17:16,319 --> 00:17:18,720
into twitter fights with people about

00:17:18,079 --> 00:17:20,319
this

00:17:18,720 --> 00:17:22,959
but i generally find that when you're

00:17:20,319 --> 00:17:26,319
adding docker it either slows you down

00:17:22,959 --> 00:17:26,959
or just adds another layer of um another

00:17:26,319 --> 00:17:29,520
layer of

00:17:26,959 --> 00:17:31,520
abstraction if you like that can make

00:17:29,520 --> 00:17:34,160
this sort of testing more difficult

00:17:31,520 --> 00:17:36,400
so what that meant up until recently

00:17:34,160 --> 00:17:39,600
bazel 3.5.0

00:17:36,400 --> 00:17:40,400
i was actually compiling basil from from

00:17:39,600 --> 00:17:43,120
source

00:17:40,400 --> 00:17:43,440
on my raspberry pi 4 so i do all this

00:17:43,120 --> 00:17:47,520
for

00:17:43,440 --> 00:17:50,240
arm 64 on a raspberry pi 4.

00:17:47,520 --> 00:17:50,240
next slide please

00:17:52,400 --> 00:17:57,360
and so what are some of the tools that i

00:17:54,160 --> 00:18:00,559
use to to go through this process

00:17:57,360 --> 00:18:01,280
so mainly this refers to how do we

00:18:00,559 --> 00:18:04,400
generate the

00:18:01,280 --> 00:18:06,080
the sha shas that we use to uh pin

00:18:04,400 --> 00:18:08,240
against um

00:18:06,080 --> 00:18:09,440
in the build process so the first one is

00:18:08,240 --> 00:18:12,559
just shas

00:18:09,440 --> 00:18:14,880
256 some it's just a linux tool that's

00:18:12,559 --> 00:18:16,000
very freely available and essentially

00:18:14,880 --> 00:18:17,760
what we're doing here is just

00:18:16,000 --> 00:18:20,720
downloading dependencies

00:18:17,760 --> 00:18:21,360
uh out of github or wherever the source

00:18:20,720 --> 00:18:24,000
of the uh

00:18:21,360 --> 00:18:26,160
of the dependency is you just run that

00:18:24,000 --> 00:18:28,000
against the tool and generate the shar

00:18:26,160 --> 00:18:30,480
then that goes into the metadata that

00:18:28,000 --> 00:18:32,640
harvey showed before

00:18:30,480 --> 00:18:34,400
that is used to verify as part of the

00:18:32,640 --> 00:18:36,960
build process

00:18:34,400 --> 00:18:38,080
we just added the same requirements for

00:18:36,960 --> 00:18:40,240
the for the pip

00:18:38,080 --> 00:18:41,600
installs i used a tool there called

00:18:40,240 --> 00:18:43,400
hashen

00:18:41,600 --> 00:18:45,360
and essentially you run that against a

00:18:43,400 --> 00:18:47,600
requirements.txt file

00:18:45,360 --> 00:18:50,400
passing in the dependencies and it

00:18:47,600 --> 00:18:52,480
generates the shares there

00:18:50,400 --> 00:18:54,480
i actually think that this is actually

00:18:52,480 --> 00:18:56,400
fairly important so the integrity of our

00:18:54,480 --> 00:18:59,600
docs is important to us as well

00:18:56,400 --> 00:19:01,919
so we don't want anything that's

00:18:59,600 --> 00:19:02,960
has the ability to modify or interrupt

00:19:01,919 --> 00:19:04,960
that sort of

00:19:02,960 --> 00:19:06,480
quality of the dockside as well so we

00:19:04,960 --> 00:19:08,480
think that

00:19:06,480 --> 00:19:09,520
these additional hashes are important

00:19:08,480 --> 00:19:12,400
here as well

00:19:09,520 --> 00:19:13,840
then the last one this is api only this

00:19:12,400 --> 00:19:17,039
is some of the go modules

00:19:13,840 --> 00:19:20,160
and i've had a real really hard time

00:19:17,039 --> 00:19:21,840
on working on how to generate these sums

00:19:20,160 --> 00:19:24,720
and i've tried everything from custom

00:19:21,840 --> 00:19:26,240
go.mod files to

00:19:24,720 --> 00:19:28,799
play around with the go command line

00:19:26,240 --> 00:19:32,080
tools and what i've resorted to now

00:19:28,799 --> 00:19:32,880
is i find the version bump in my rss

00:19:32,080 --> 00:19:36,000
file

00:19:32,880 --> 00:19:37,520
i then bump the version number then run

00:19:36,000 --> 00:19:39,760
a test and have it fail

00:19:37,520 --> 00:19:41,120
which generates the actual correct sum

00:19:39,760 --> 00:19:44,080
that i can then put into

00:19:41,120 --> 00:19:44,559
uh into my testing so i'm not ideal so

00:19:44,080 --> 00:19:47,679
open

00:19:44,559 --> 00:19:48,400
any suggestions there on how to auto

00:19:47,679 --> 00:19:51,520
generate the

00:19:48,400 --> 00:19:54,640
the go modules sums and hashes

00:19:51,520 --> 00:19:56,400
next slide so

00:19:54,640 --> 00:19:58,559
what i wanted to talk about here is

00:19:56,400 --> 00:19:59,200
strategies to minimize your supply chain

00:19:58,559 --> 00:20:01,360
so

00:19:59,200 --> 00:20:02,830
what that is is how do we actually

00:20:01,360 --> 00:20:03,919
minimize the

00:20:02,830 --> 00:20:06,480
[Music]

00:20:03,919 --> 00:20:07,520
the dependency lines of code in your

00:20:06,480 --> 00:20:09,600
binary

00:20:07,520 --> 00:20:12,000
and i can feel very confident saying

00:20:09,600 --> 00:20:14,559
that there are many extensions

00:20:12,000 --> 00:20:15,120
that harvey you showed before that you

00:20:14,559 --> 00:20:18,080
don't

00:20:15,120 --> 00:20:18,960
use or won't need to use as part of your

00:20:18,080 --> 00:20:22,159
invoice

00:20:18,960 --> 00:20:24,720
deployment and so

00:20:22,159 --> 00:20:26,640
this the current images are currently

00:20:24,720 --> 00:20:27,440
built as what's called a kitchen sink

00:20:26,640 --> 00:20:28,960
image

00:20:27,440 --> 00:20:32,080
that is that they have all of the

00:20:28,960 --> 00:20:34,799
extensions enabled as part of

00:20:32,080 --> 00:20:38,320
as part of the build process and so why

00:20:34,799 --> 00:20:40,720
kitchen is misspelt there is that um

00:20:38,320 --> 00:20:42,559
if you actually look at that issue matt

00:20:40,720 --> 00:20:44,480
cline actually misspelled the word

00:20:42,559 --> 00:20:46,559
kitchen sink and whenever i would try

00:20:44,480 --> 00:20:48,240
and go back and find reference to

00:20:46,559 --> 00:20:50,480
kitchen sink

00:20:48,240 --> 00:20:52,240
i remembered it by knowing it was

00:20:50,480 --> 00:20:54,960
misspelled and searching for kitchen

00:20:52,240 --> 00:20:57,440
without a without a tea

00:20:54,960 --> 00:21:00,559
and so the way to there's a couple of

00:20:57,440 --> 00:21:03,120
strategies here on how to minimize

00:21:00,559 --> 00:21:03,919
your envoy binary here the first one is

00:21:03,120 --> 00:21:06,400
a custom

00:21:03,919 --> 00:21:07,360
dot bazel rc file uh there's a link

00:21:06,400 --> 00:21:09,760
there that shows

00:21:07,360 --> 00:21:10,480
a link to the documentation on how to do

00:21:09,760 --> 00:21:12,320
this

00:21:10,480 --> 00:21:14,320
but essentially it gives you a way of

00:21:12,320 --> 00:21:17,360
disabling certain features

00:21:14,320 --> 00:21:17,760
of the invoice binary um as you build it

00:21:17,360 --> 00:21:20,640
so

00:21:17,760 --> 00:21:21,679
an example here is hot restart there's

00:21:20,640 --> 00:21:23,520
quite a few

00:21:21,679 --> 00:21:25,039
scenarios where you don't need or

00:21:23,520 --> 00:21:26,559
require hot restart

00:21:25,039 --> 00:21:28,720
it's a fairly sort of complicated

00:21:26,559 --> 00:21:31,919
feature you can just disable that

00:21:28,720 --> 00:21:35,360
out of the actual source code

00:21:31,919 --> 00:21:37,679
out of the build profile to reduce

00:21:35,360 --> 00:21:38,960
that feature and then secondly and this

00:21:37,679 --> 00:21:39,919
is probably the biggest bang for the

00:21:38,960 --> 00:21:43,039
buck is

00:21:39,919 --> 00:21:45,200
compiling out extensions this

00:21:43,039 --> 00:21:46,480
is where this is a fairly large

00:21:45,200 --> 00:21:50,320
extension

00:21:46,480 --> 00:21:52,640
definition file and in that you can

00:21:50,320 --> 00:21:54,960
actually just comment out or remove

00:21:52,640 --> 00:21:57,760
the extensions that you don't require

00:21:54,960 --> 00:21:59,360
some examples here is alts

00:21:57,760 --> 00:22:01,200
that's a protocol that you don't need to

00:21:59,360 --> 00:22:04,480
use if you're not running on gcp

00:22:01,200 --> 00:22:06,480
for example another another example here

00:22:04,480 --> 00:22:09,679
out of a list of many is dubbo

00:22:06,480 --> 00:22:11,600
the double double rbc protocol and then

00:22:09,679 --> 00:22:12,240
this can go on for all of the different

00:22:11,600 --> 00:22:14,159
types of

00:22:12,240 --> 00:22:15,520
extension types whether it be

00:22:14,159 --> 00:22:18,880
observability

00:22:15,520 --> 00:22:20,799
data dog versus light step or database

00:22:18,880 --> 00:22:23,360
filters there's a very large list here

00:22:20,799 --> 00:22:25,440
so you'll find that you'll be able to

00:22:23,360 --> 00:22:28,240
significantly reduce your

00:22:25,440 --> 00:22:29,520
exposure to the extensions by this

00:22:28,240 --> 00:22:32,240
method

00:22:29,520 --> 00:22:34,000
and then lastly for the teams that are

00:22:32,240 --> 00:22:36,320
actually importing envoy

00:22:34,000 --> 00:22:38,720
into their internal repos you can

00:22:36,320 --> 00:22:40,480
actually using tools like copy borrow

00:22:38,720 --> 00:22:42,960
actually delete the extensions out of

00:22:40,480 --> 00:22:44,080
the source tree rewrite the bazel files

00:22:42,960 --> 00:22:46,559
and essentially

00:22:44,080 --> 00:22:49,600
take those extensions out of your import

00:22:46,559 --> 00:22:52,880
so you end up with a much slimmer

00:22:49,600 --> 00:22:56,000
and streamlined invoice source code base

00:22:52,880 --> 00:22:57,600
and so with all of these all of these

00:22:56,000 --> 00:23:00,000
methods can be combined

00:22:57,600 --> 00:23:01,440
you can really reduce your build times

00:23:00,000 --> 00:23:04,720
and more

00:23:01,440 --> 00:23:05,600
importantly reduce your exposure to the

00:23:04,720 --> 00:23:09,280
dependency

00:23:05,600 --> 00:23:12,080
supply chain and so this is the

00:23:09,280 --> 00:23:13,840
the last slide here um just just to

00:23:12,080 --> 00:23:15,679
point out there's multiple ways to to

00:23:13,840 --> 00:23:17,760
maintain these dependencies

00:23:15,679 --> 00:23:18,799
um so it's not certainly not one size

00:23:17,760 --> 00:23:20,880
fits all

00:23:18,799 --> 00:23:22,000
and so you can either rely on upstream

00:23:20,880 --> 00:23:23,760
envoy to to

00:23:22,000 --> 00:23:26,880
maintain and track those dependencies

00:23:23,760 --> 00:23:28,799
for you for the consuming projects

00:23:26,880 --> 00:23:30,320
you can rely on your local package

00:23:28,799 --> 00:23:33,520
management systems

00:23:30,320 --> 00:23:34,799
yarn mapped and there's a variety of

00:23:33,520 --> 00:23:36,400
other ones as well

00:23:34,799 --> 00:23:38,799
or you can actually maintain your own

00:23:36,400 --> 00:23:41,840
versions and override the

00:23:38,799 --> 00:23:44,720
the dependencies in the workspace in the

00:23:41,840 --> 00:23:46,559
root of the envoy repo so many different

00:23:44,720 --> 00:23:49,840
approaches here depending on

00:23:46,559 --> 00:23:52,400
your needs your sophistication and your

00:23:49,840 --> 00:23:52,400
requirements

00:23:52,640 --> 00:23:56,080
that's it back to you harvey okay i

00:23:55,440 --> 00:23:58,000
think

00:23:56,080 --> 00:24:01,039
we're done and we're happy to take any

00:23:58,000 --> 00:24:01,039
questions thanks

00:24:02,840 --> 00:24:08,400
hello hey michael

00:24:05,760 --> 00:24:09,840
uh yeah happy to answer any questions or

00:24:08,400 --> 00:24:12,640
talk about

00:24:09,840 --> 00:24:14,559
envoy uh dependencies or supply chain

00:24:12,640 --> 00:24:19,760
generally

00:24:14,559 --> 00:24:22,080
if there are any questions

00:24:19,760 --> 00:24:23,279
i fear that this is not as uh exciting

00:24:22,080 --> 00:24:26,960
as some of the other

00:24:23,279 --> 00:24:28,640
tracks uh harvey oh oh okay well

00:24:26,960 --> 00:24:30,559
i think this is that supply chain is

00:24:28,640 --> 00:24:33,120
super exciting so do i say

00:24:30,559 --> 00:24:33,120
oh i just

00:24:35,840 --> 00:24:38,880
otherwise i think maybe we just leave

00:24:37,440 --> 00:24:41,200
our twitter and uh

00:24:38,880 --> 00:24:42,000
email addresses for folks to reach out

00:24:41,200 --> 00:24:44,400
to

00:24:42,000 --> 00:24:44,400
okay

00:24:45,600 --> 00:24:52,159
yeah and that one's for you michael uh

00:24:49,200 --> 00:24:53,679
uh yeah do you do we have to make many

00:24:52,159 --> 00:24:57,760
changes to dependencies

00:24:53,679 --> 00:25:00,799
uh yes quite often uh so uh we often

00:24:57,760 --> 00:25:03,919
where they're at what we try and

00:25:00,799 --> 00:25:05,520
uh minimize is carrying patches so if

00:25:03,919 --> 00:25:07,440
you look at the actual envoy code base

00:25:05,520 --> 00:25:09,120
you'll see that there's quite a few

00:25:07,440 --> 00:25:10,559
dependencies that actually have patch

00:25:09,120 --> 00:25:13,279
files and that's

00:25:10,559 --> 00:25:14,799
um where harvey and i are both committed

00:25:13,279 --> 00:25:17,120
to try and reduce or

00:25:14,799 --> 00:25:18,720
eliminate those patches so we often go

00:25:17,120 --> 00:25:19,120
back to the upstream dependencies and

00:25:18,720 --> 00:25:21,600
ask

00:25:19,120 --> 00:25:23,200
for them to make changes sometimes that

00:25:21,600 --> 00:25:25,440
that's easy because they're controlled

00:25:23,200 --> 00:25:27,200
by friends of envoy

00:25:25,440 --> 00:25:28,960
in particular google and others

00:25:27,200 --> 00:25:31,120
sometimes that's more difficult

00:25:28,960 --> 00:25:33,120
um but yeah we often have to make

00:25:31,120 --> 00:25:33,840
changes to dependencies as we bring them

00:25:33,120 --> 00:25:35,870
in

00:25:33,840 --> 00:25:37,039
yeah i mean yeah um

00:25:35,870 --> 00:25:38,720
[Music]

00:25:37,039 --> 00:25:40,320
yeah i think that that's that's pretty

00:25:38,720 --> 00:25:41,679
much it um

00:25:40,320 --> 00:25:44,559
i was just going to talk to this other

00:25:41,679 --> 00:25:46,880
question that came up from matt which is

00:25:44,559 --> 00:25:47,840
uh how does this apply to other projects

00:25:46,880 --> 00:25:49,679
and

00:25:47,840 --> 00:25:51,279
uh sort of an industry problem i think

00:25:49,679 --> 00:25:52,880
yeah i think it's well recognized that

00:25:51,279 --> 00:25:56,400
supply chain is a big problem

00:25:52,880 --> 00:25:58,480
in open source specifically and

00:25:56,400 --> 00:26:00,000
github a number of other organizations

00:25:58,480 --> 00:26:03,120
have an initiative

00:26:00,000 --> 00:26:04,080
called ossf i think it's called osf

00:26:03,120 --> 00:26:06,320
something like that anyway they're

00:26:04,080 --> 00:26:07,200
basically planning to put together um a

00:26:06,320 --> 00:26:10,480
basic

00:26:07,200 --> 00:26:14,400
um a scorecard which will allow us to uh

00:26:10,480 --> 00:26:15,679
get an idea of um what qualifies as you

00:26:14,400 --> 00:26:18,080
know for example a good dependency

00:26:15,679 --> 00:26:19,600
versus a bad dependency and in terms of

00:26:18,080 --> 00:26:20,720
trying to like you know order the supply

00:26:19,600 --> 00:26:21,120
chain like the kinds of things we did in

00:26:20,720 --> 00:26:23,360
this

00:26:21,120 --> 00:26:25,440
exercise and making sure you're not out

00:26:23,360 --> 00:26:27,360
of date and scanning for cves

00:26:25,440 --> 00:26:28,720
yeah thanks brian that's the link um

00:26:27,360 --> 00:26:31,360
there's actually a lot of

00:26:28,720 --> 00:26:33,200
uh tooling in that out there which does

00:26:31,360 --> 00:26:33,760
us today some a lot of companies whose

00:26:33,200 --> 00:26:36,880
business

00:26:33,760 --> 00:26:38,640
that this is to scan your project for

00:26:36,880 --> 00:26:40,799
this but they mostly work with

00:26:38,640 --> 00:26:42,400
uh managed languages or languages with

00:26:40,799 --> 00:26:45,520
manifest files so

00:26:42,400 --> 00:26:47,520
python node.js ruby even rust but

00:26:45,520 --> 00:26:51,039
unfortunately there's no standardized

00:26:47,520 --> 00:26:52,400
csc plus plus uh format for this and so

00:26:51,039 --> 00:26:53,679
we're essentially having to make things

00:26:52,400 --> 00:26:56,480
up and build our own

00:26:53,679 --> 00:26:58,640
tooling as we go because c and c plus

00:26:56,480 --> 00:27:01,919
plus are sort of like the

00:26:58,640 --> 00:27:04,000
um the less popular languages ones which

00:27:01,919 --> 00:27:05,360
folks um aren't as interested in

00:27:04,000 --> 00:27:06,960
building you know standardized solutions

00:27:05,360 --> 00:27:09,520
which is fun really hard

00:27:06,960 --> 00:27:10,960
to do so yeah that's kind of where we're

00:27:09,520 --> 00:27:12,080
at right now but we do plan on like you

00:27:10,960 --> 00:27:13,440
know sharing what we've been doing in

00:27:12,080 --> 00:27:15,760
norway once we're

00:27:13,440 --> 00:27:17,600
um i guess in a little more of a final

00:27:15,760 --> 00:27:20,640
state in our blog about that

00:27:17,600 --> 00:27:22,080
yeah we are also uh doing some work to

00:27:20,640 --> 00:27:24,240
integrate the code ql

00:27:22,080 --> 00:27:26,159
capability of github yeah there's been

00:27:24,240 --> 00:27:26,720
some initial work there as well so doing

00:27:26,159 --> 00:27:28,880
sort of

00:27:26,720 --> 00:27:31,039
uh additional scanning that doesn't

00:27:28,880 --> 00:27:33,919
apply to our dependencies unfortunately

00:27:31,039 --> 00:27:35,120
so it's true and uh it is already slow

00:27:33,919 --> 00:27:36,159
enough that you can get it to run fully

00:27:35,120 --> 00:27:38,320
on envoy is kind of

00:27:36,159 --> 00:27:40,080
a bit of a problem uh there was also a

00:27:38,320 --> 00:27:43,039
question from fabrizio about

00:27:40,080 --> 00:27:44,240
uh there are some documented guy is

00:27:43,039 --> 00:27:45,600
there any documentation on how to

00:27:44,240 --> 00:27:47,039
actually minimize the build

00:27:45,600 --> 00:27:48,799
and i don't think we actually have a

00:27:47,039 --> 00:27:49,919
good guide there so i think opening an

00:27:48,799 --> 00:27:53,200
issue around that

00:27:49,919 --> 00:27:54,960
or um i can do that actually or uh

00:27:53,200 --> 00:27:56,399
country and pr would be very useful

00:27:54,960 --> 00:27:58,880
because

00:27:56,399 --> 00:28:00,480
uh i don't think it's obvious other than

00:27:58,880 --> 00:28:02,399
reducing number of extensions you have

00:28:00,480 --> 00:28:04,480
compiled in and

00:28:02,399 --> 00:28:06,640
most folks aren't quite clear on what

00:28:04,480 --> 00:28:08,000
that is it actually gets back to a point

00:28:06,640 --> 00:28:09,840
map made in one of the earlier talks

00:28:08,000 --> 00:28:11,679
which is having profiles like a minimal

00:28:09,840 --> 00:28:13,120
profile or a secure profile

00:28:11,679 --> 00:28:14,799
where we actually opt out most

00:28:13,120 --> 00:28:16,159
extensions by default

00:28:14,799 --> 00:28:18,240
from the build it would probably be

00:28:16,159 --> 00:28:20,720
advantageous

00:28:18,240 --> 00:28:22,960
yeah i can i can i've documented some of

00:28:20,720 --> 00:28:24,960
this internally but i'm happy to

00:28:22,960 --> 00:28:26,799
to help out there and sort of write up a

00:28:24,960 --> 00:28:30,720
more concise guide about how to

00:28:26,799 --> 00:28:33,200
go through uh binary minimization

00:28:30,720 --> 00:28:33,840
okay great thanks i think we're out of

00:28:33,200 --> 00:28:35,760
time now

00:28:33,840 --> 00:28:37,520
thanks everyone for listening uh and all

00:28:35,760 --> 00:28:42,640
the great questions

00:28:37,520 --> 00:28:42,640

YouTube URL: https://www.youtube.com/watch?v=0VRY1FkeKxw


