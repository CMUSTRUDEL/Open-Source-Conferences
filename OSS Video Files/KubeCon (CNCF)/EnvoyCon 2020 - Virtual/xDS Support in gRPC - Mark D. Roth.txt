Title: xDS Support in gRPC - Mark D. Roth
Publication date: 2020-10-21
Playlist: EnvoyCon 2020 - Virtual
Description: 
	xDS Support in gRPC - Mark D. Roth

The xDS APIs originated as Envoyâ€™s control plane APIs, but they are evolving toward a Universal Data Plane API (UDPA) that can be used to configure any data plane client. gRPC is the first non-Envoy client to support obtaining its configuration via xDS. This talk will cover how gRPC fits into the xDS ecosystem. It will explain the advantages of supporting xDS in gRPC, particularly for service mesh deployments, and identify the set of xDS features that gRPC currently supports and the additional features that are on the roadmap. It will also discuss changes that were made to the xDS data model to support non-proxy clients like gRPC and various edge cases in the xDS transport protocol that were addressed along the way. The talk will also discuss how control plane operators and vendors can support gRPC xDS clients alongside Envoy.
Captions: 
	00:00:02,720 --> 00:00:05,440
hello

00:00:03,439 --> 00:00:09,279
i'm mark roth and i am here to talk

00:00:05,440 --> 00:00:09,279
about xds support in grpc

00:00:09,280 --> 00:00:11,840
uh here's what we're going to cover

00:00:10,559 --> 00:00:12,799
today uh we'll talk about why we're

00:00:11,840 --> 00:00:15,360
doing this

00:00:12,799 --> 00:00:18,080
what changes we needed in the xds apis

00:00:15,360 --> 00:00:19,279
to support non-proxy client like grpc

00:00:18,080 --> 00:00:21,600
we'll talk about some gotchas we

00:00:19,279 --> 00:00:23,359
discovered in the xcs transport protocol

00:00:21,600 --> 00:00:25,599
and we'll talk about what management

00:00:23,359 --> 00:00:27,599
server maintainers need to do in order

00:00:25,599 --> 00:00:29,039
to support grpc alongside envoy

00:00:27,599 --> 00:00:31,199
and then we'll cover our current status

00:00:29,039 --> 00:00:34,239
and roadmap so let's dive

00:00:31,199 --> 00:00:36,399
in and talk about why so as you know

00:00:34,239 --> 00:00:38,000
envoy is commonly used as a sidecar

00:00:36,399 --> 00:00:40,160
proxy in service measure deployments

00:00:38,000 --> 00:00:41,280
there are two main advantages that envoy

00:00:40,160 --> 00:00:42,879
brings here

00:00:41,280 --> 00:00:44,399
it provides a whole bunch of really nice

00:00:42,879 --> 00:00:48,480
traffic management features and it

00:00:44,399 --> 00:00:48,480
provides centralized management via xds

00:00:48,879 --> 00:00:52,640
so here's a diagram of a typical service

00:00:51,440 --> 00:00:54,160
mesh topology

00:00:52,640 --> 00:00:55,520
every node in the mesh has an envoy

00:00:54,160 --> 00:00:56,480
instance running as a sidecar right next

00:00:55,520 --> 00:00:58,399
to the application

00:00:56,480 --> 00:01:00,079
the red lines here are data plan

00:00:58,399 --> 00:01:01,520
communication you can see that envoy

00:01:00,079 --> 00:01:03,120
intercepts all traffic in and out of the

00:01:01,520 --> 00:01:04,559
application and manages communication

00:01:03,120 --> 00:01:06,080
between the nodes

00:01:04,559 --> 00:01:07,680
the blue lines are control plane

00:01:06,080 --> 00:01:12,080
communication the envoy instances get

00:01:07,680 --> 00:01:13,280
their configs from the xcs server so

00:01:12,080 --> 00:01:15,680
what's the problem with this approach

00:01:13,280 --> 00:01:18,159
why not support xds and grpc

00:01:15,680 --> 00:01:18,960
well uh the proxy's add overhead um my

00:01:18,159 --> 00:01:20,960
team did a

00:01:18,960 --> 00:01:22,159
grpc benchmark comparing the proxy and

00:01:20,960 --> 00:01:23,280
proxy list approach

00:01:22,159 --> 00:01:25,439
which showed about a three times

00:01:23,280 --> 00:01:27,040
improvement in queries per cpu second so

00:01:25,439 --> 00:01:28,080
there's a significant cpu overhead to

00:01:27,040 --> 00:01:30,320
running the proxies

00:01:28,080 --> 00:01:31,680
um there's also a significant latency

00:01:30,320 --> 00:01:32,320
improvement i don't have specific data

00:01:31,680 --> 00:01:34,159
on that

00:01:32,320 --> 00:01:36,000
uh istio does have some data that shows

00:01:34,159 --> 00:01:36,720
that uh request latency is significantly

00:01:36,000 --> 00:01:38,720
higher with

00:01:36,720 --> 00:01:40,000
with the proxies although their

00:01:38,720 --> 00:01:42,000
benchmark is not exactly the same

00:01:40,000 --> 00:01:43,600
as the one that uh we did in grpc it's

00:01:42,000 --> 00:01:45,040
not exactly the same scenario

00:01:43,600 --> 00:01:46,399
um so it's it's a little bit of an apple

00:01:45,040 --> 00:01:47,520
storage's comparison but it's the best

00:01:46,399 --> 00:01:48,880
data that i have to share

00:01:47,520 --> 00:01:50,079
uh but certainly i don't think anybody

00:01:48,880 --> 00:01:52,000
would doubt that there is additional

00:01:50,079 --> 00:01:54,000
latency by by adding those two hops for

00:01:52,000 --> 00:01:56,000
all the communication

00:01:54,000 --> 00:01:57,680
now for a lot of application for a lot

00:01:56,000 --> 00:01:59,200
of applications it makes complete sense

00:01:57,680 --> 00:02:01,119
to pay the cost of the

00:01:59,200 --> 00:02:03,040
the overhead of the proxies right uh it

00:02:01,119 --> 00:02:04,399
avoids having to implement the traffic

00:02:03,040 --> 00:02:05,280
management features and control plane

00:02:04,399 --> 00:02:07,040
integration in

00:02:05,280 --> 00:02:08,160
the application and this is especially

00:02:07,040 --> 00:02:09,360
true if there's a large number of

00:02:08,160 --> 00:02:11,039
applications that are all going through

00:02:09,360 --> 00:02:12,319
envoy right you'd have to pay that cost

00:02:11,039 --> 00:02:13,599
multiple times of doing that

00:02:12,319 --> 00:02:14,560
implementation for each of those

00:02:13,599 --> 00:02:16,400
applications

00:02:14,560 --> 00:02:18,400
um so it you know it does make a lot of

00:02:16,400 --> 00:02:19,840
sense to uh to to do that for those

00:02:18,400 --> 00:02:20,239
applications that you don't want to have

00:02:19,840 --> 00:02:23,599
to

00:02:20,239 --> 00:02:25,520
add these features to um uh separately

00:02:23,599 --> 00:02:28,160
however uh by supporting these features

00:02:25,520 --> 00:02:29,920
in grpc applications that use grpc can

00:02:28,160 --> 00:02:31,760
get these features for free without the

00:02:29,920 --> 00:02:33,200
cost of the proxies

00:02:31,760 --> 00:02:34,800
um and so that's that's really the

00:02:33,200 --> 00:02:37,040
motivation here

00:02:34,800 --> 00:02:38,879
now i should note that we are you know

00:02:37,040 --> 00:02:40,800
the motivation here is is not to try to

00:02:38,879 --> 00:02:42,640
put envoy out of business right uh

00:02:40,800 --> 00:02:43,680
we're not trying to replace envoy um

00:02:42,640 --> 00:02:45,840
there's still going to be a whole bunch

00:02:43,680 --> 00:02:46,800
of non-grpc applications that that will

00:02:45,840 --> 00:02:48,319
need envoy

00:02:46,800 --> 00:02:49,760
and uh frankly there are still going to

00:02:48,319 --> 00:02:51,280
be you know a number of use cases where

00:02:49,760 --> 00:02:52,959
it'll still make sense even for grpc

00:02:51,280 --> 00:02:54,560
traffic to continue to go through envoy

00:02:52,959 --> 00:02:56,239
so the goal here is really for envoy and

00:02:54,560 --> 00:02:58,800
grpc to be able to coexist in the same

00:02:56,239 --> 00:03:00,159
service mesh

00:02:58,800 --> 00:03:01,920
so here's that same service mesh

00:03:00,159 --> 00:03:04,640
topology diagram as before but this time

00:03:01,920 --> 00:03:06,400
using proxilis grpc um instead of having

00:03:04,640 --> 00:03:08,319
a sidecar proxy on each node the

00:03:06,400 --> 00:03:10,720
application just links against grpc

00:03:08,319 --> 00:03:11,920
and jpc directly provides the traffic

00:03:10,720 --> 00:03:13,040
management features and the control

00:03:11,920 --> 00:03:15,440
plane integration

00:03:13,040 --> 00:03:16,800
uh by taking in the configuration from

00:03:15,440 --> 00:03:19,840
xts so there's no need for the

00:03:16,800 --> 00:03:19,840
for the sidecar proxy

00:03:20,720 --> 00:03:24,159
all right let's talk about what changes

00:03:22,159 --> 00:03:25,760
we needed to make in the xds apis to

00:03:24,159 --> 00:03:27,599
make this work

00:03:25,760 --> 00:03:29,680
now the xds apis were developed

00:03:27,599 --> 00:03:31,280
specifically for envoy so they make the

00:03:29,680 --> 00:03:32,080
obvious assumption that the client is

00:03:31,280 --> 00:03:33,760
envoy

00:03:32,080 --> 00:03:35,760
um and this caused some challenges for

00:03:33,760 --> 00:03:37,519
us because not only is grpc not

00:03:35,760 --> 00:03:39,519
envoy but it's not even a proxy right

00:03:37,519 --> 00:03:42,799
it's a a client and a server

00:03:39,519 --> 00:03:43,920
um now we've generally tried to minimize

00:03:42,799 --> 00:03:46,000
the places where we needed to make

00:03:43,920 --> 00:03:48,400
changes in the api to support grpc

00:03:46,000 --> 00:03:49,760
uh for two reasons one we want to make

00:03:48,400 --> 00:03:51,760
it really easy for existing envoy

00:03:49,760 --> 00:03:53,200
service mesh users to make use of grpc

00:03:51,760 --> 00:03:54,799
without having to like you know

00:03:53,200 --> 00:03:56,560
duplicate all of their config you know

00:03:54,799 --> 00:03:58,319
xcs configuration resources

00:03:56,560 --> 00:04:00,080
um and also because we want to allow

00:03:58,319 --> 00:04:01,840
grpc and envoy to easily coexist in the

00:04:00,080 --> 00:04:04,480
same service mesh as i mentioned earlier

00:04:01,840 --> 00:04:05,840
so the more that we can use the existing

00:04:04,480 --> 00:04:07,360
infrastructure and leverage that rather

00:04:05,840 --> 00:04:08,799
than having to create new stuff you know

00:04:07,360 --> 00:04:10,319
the better so we really want to minimize

00:04:08,799 --> 00:04:12,400
these changes

00:04:10,319 --> 00:04:14,080
but there are two places where android

00:04:12,400 --> 00:04:15,360
and grpc are sufficiently different that

00:04:14,080 --> 00:04:17,280
we did have to make some changes and

00:04:15,360 --> 00:04:19,440
we'll talk about each of those uh

00:04:17,280 --> 00:04:19,440
here

00:04:21,600 --> 00:04:24,400
the first thing we changed was the way

00:04:22,880 --> 00:04:25,600
that the jrc client handles listener

00:04:24,400 --> 00:04:27,280
resources

00:04:25,600 --> 00:04:29,040
now as you probably know the main xds

00:04:27,280 --> 00:04:31,440
apis are lds

00:04:29,040 --> 00:04:32,720
rds cds and eds they're generally

00:04:31,440 --> 00:04:34,240
chained together in that order

00:04:32,720 --> 00:04:36,000
describing the path that request takes

00:04:34,240 --> 00:04:37,199
as it moves through envoy

00:04:36,000 --> 00:04:39,440
and it all starts with a listener

00:04:37,199 --> 00:04:40,560
resource from lds which tells envoy what

00:04:39,440 --> 00:04:42,240
pork to listen on

00:04:40,560 --> 00:04:44,160
and that concept simply doesn't apply to

00:04:42,240 --> 00:04:45,680
the jrpc client right the jvc client

00:04:44,160 --> 00:04:48,000
doesn't listen on ports

00:04:45,680 --> 00:04:48,960
it uh it you know is told by the

00:04:48,000 --> 00:04:50,880
application you know

00:04:48,960 --> 00:04:53,040
to send requests to to particular

00:04:50,880 --> 00:04:55,040
virtual hosts

00:04:53,040 --> 00:04:56,080
now when we're first looking at the xds

00:04:55,040 --> 00:04:57,040
api trying to understand

00:04:56,080 --> 00:04:59,280
it and trying to figure out how to make

00:04:57,040 --> 00:05:01,199
it work for grpc our first attempt to

00:04:59,280 --> 00:05:03,039
build a mental model was sort of okay

00:05:01,199 --> 00:05:04,639
let's figure out which parts of the api

00:05:03,039 --> 00:05:06,160
apply out of the server and which parts

00:05:04,639 --> 00:05:07,600
apply to the client and we'll you know

00:05:06,160 --> 00:05:10,479
use those in the appropriate places

00:05:07,600 --> 00:05:12,080
we thought well okay maybe lds and rds

00:05:10,479 --> 00:05:13,840
are really about configuring incoming

00:05:12,080 --> 00:05:14,560
requests so we'd use those on the grpc

00:05:13,840 --> 00:05:17,600
server

00:05:14,560 --> 00:05:19,440
and cds and eds are configuring outgoing

00:05:17,600 --> 00:05:21,280
requests so we use those on the grc

00:05:19,440 --> 00:05:22,639
client

00:05:21,280 --> 00:05:24,960
so it turns out this doesn't actually

00:05:22,639 --> 00:05:26,479
work um most of the configuration that

00:05:24,960 --> 00:05:27,759
we actually need that's really

00:05:26,479 --> 00:05:30,560
interesting to configure things on the

00:05:27,759 --> 00:05:32,720
grp's client is actually in lds and rds

00:05:30,560 --> 00:05:34,880
uh this is things like um you know

00:05:32,720 --> 00:05:36,000
traffic splitting retries timeouts that

00:05:34,880 --> 00:05:37,520
sort of thing things that we really do

00:05:36,000 --> 00:05:40,720
want to set on the client

00:05:37,520 --> 00:05:41,600
um but they're in lds and rds so we were

00:05:40,720 --> 00:05:43,039
talking with the

00:05:41,600 --> 00:05:44,320
the envoy folks and trying to figure out

00:05:43,039 --> 00:05:44,880
you know what the right way to model

00:05:44,320 --> 00:05:46,400
this was

00:05:44,880 --> 00:05:47,680
and matt claine suggested a new approach

00:05:46,400 --> 00:05:50,080
which is something called an api

00:05:47,680 --> 00:05:50,080
listener

00:05:50,720 --> 00:05:56,160
so what is an api listener the idea here

00:05:54,560 --> 00:05:56,639
is to generalize the concept of a

00:05:56,160 --> 00:05:58,160
listener

00:05:56,639 --> 00:06:00,000
such that there are different types of

00:05:58,160 --> 00:06:01,440
listeners and each type of listener

00:06:00,000 --> 00:06:02,639
configures a different type of interface

00:06:01,440 --> 00:06:04,000
for the application

00:06:02,639 --> 00:06:05,360
so you'd have two main classes of

00:06:04,000 --> 00:06:06,400
listeners you'd have your existing

00:06:05,360 --> 00:06:08,560
socket listeners

00:06:06,400 --> 00:06:09,520
like the tcp and udp listeners which

00:06:08,560 --> 00:06:11,919
basically configure

00:06:09,520 --> 00:06:12,639
a tcp or udp socket for the application

00:06:11,919 --> 00:06:14,160
to use

00:06:12,639 --> 00:06:15,600
or you have api listeners which will

00:06:14,160 --> 00:06:16,800
configure some sort of api for the

00:06:15,600 --> 00:06:18,639
application to use

00:06:16,800 --> 00:06:20,560
um and the one type of api listener that

00:06:18,639 --> 00:06:21,759
we've added is an http api listener

00:06:20,560 --> 00:06:24,400
which configures an api

00:06:21,759 --> 00:06:26,960
with http like semantics this includes

00:06:24,400 --> 00:06:27,520
the grpc api which is basically a subset

00:06:26,960 --> 00:06:30,400
of

00:06:27,520 --> 00:06:33,039
http functionality because the jrpc

00:06:30,400 --> 00:06:35,280
protocol is actually built on http 2.

00:06:33,039 --> 00:06:37,120
um the hp api listener should be noted

00:06:35,280 --> 00:06:38,400
is also intended to be it's not jpc

00:06:37,120 --> 00:06:39,759
specific it's intended to be used by

00:06:38,400 --> 00:06:41,600
envoy mobile in the future

00:06:39,759 --> 00:06:43,039
and there could be other you know http

00:06:41,600 --> 00:06:45,520
you know xcs aware clients that might

00:06:43,039 --> 00:06:47,199
use it in the future as well

00:06:45,520 --> 00:06:48,880
uh you could also have other types of

00:06:47,199 --> 00:06:49,520
api listeners in the future uh for

00:06:48,880 --> 00:06:51,360
example

00:06:49,520 --> 00:06:53,120
um you know it's easy to imagine that

00:06:51,360 --> 00:06:54,479
there could be an sql api listener that

00:06:53,120 --> 00:06:57,680
would configure some sort of

00:06:54,479 --> 00:07:00,880
of sql based api

00:06:57,680 --> 00:07:03,280
uh for for an sql for an xds aware sql

00:07:00,880 --> 00:07:05,199
client

00:07:03,280 --> 00:07:06,400
now the configuration of an http api

00:07:05,199 --> 00:07:08,240
listener

00:07:06,400 --> 00:07:09,440
is a subset of the socket listener

00:07:08,240 --> 00:07:11,280
configuration

00:07:09,440 --> 00:07:12,800
so a socket listener primarily contains

00:07:11,280 --> 00:07:15,360
a list of l3 l4

00:07:12,800 --> 00:07:16,960
filters where the http connection

00:07:15,360 --> 00:07:19,599
manager filter is the last

00:07:16,960 --> 00:07:20,240
uh filter in the l3 l4 filter chain and

00:07:19,599 --> 00:07:22,479
then it's

00:07:20,240 --> 00:07:23,759
that's where all the l7 functionality is

00:07:22,479 --> 00:07:25,440
is configured

00:07:23,759 --> 00:07:26,800
but in the case of an hp api listener we

00:07:25,440 --> 00:07:28,960
don't need any of the l3 or l4

00:07:26,800 --> 00:07:30,960
functionality we just need the l7 stuff

00:07:28,960 --> 00:07:32,560
so an hp api listener's configuration is

00:07:30,960 --> 00:07:33,360
essentially just the configuration for

00:07:32,560 --> 00:07:37,680
the http

00:07:33,360 --> 00:07:37,680
can http connection manager filter

00:07:39,919 --> 00:07:43,039
now the the second change other than

00:07:41,680 --> 00:07:45,199
introducing an api listener

00:07:43,039 --> 00:07:47,199
the second change that we made for grpc

00:07:45,199 --> 00:07:48,319
and xds is related to the special way in

00:07:47,199 --> 00:07:52,479
which envoy uses

00:07:48,319 --> 00:07:54,080
lds and cds envoy uses those two apis

00:07:52,479 --> 00:07:55,120
differently than it uses the other xds

00:07:54,080 --> 00:07:56,479
apis

00:07:55,120 --> 00:07:58,240
uh and this special behavior doesn't

00:07:56,479 --> 00:08:00,639
really make sense for grpc

00:07:58,240 --> 00:08:02,400
so the the general xds flow for envoy is

00:08:00,639 --> 00:08:05,120
when it starts up it immediately sends

00:08:02,400 --> 00:08:07,440
both an lds and a cds query in parallel

00:08:05,120 --> 00:08:09,199
uh these basically act as sort of dual

00:08:07,440 --> 00:08:10,639
routes for on voice configuration right

00:08:09,199 --> 00:08:11,759
all of the other resources are sort of

00:08:10,639 --> 00:08:12,800
chained out from the listener and

00:08:11,759 --> 00:08:14,800
cluster resources

00:08:12,800 --> 00:08:16,879
so for example when envoy receives the

00:08:14,800 --> 00:08:18,080
lds response that tells it what rds

00:08:16,879 --> 00:08:20,000
resources it needs so it goes and

00:08:18,080 --> 00:08:21,440
requests those resources by name

00:08:20,000 --> 00:08:22,960
similarly when it receives the cds

00:08:21,440 --> 00:08:24,000
response that tells it what eds

00:08:22,960 --> 00:08:25,360
resources it needs and it goes and

00:08:24,000 --> 00:08:27,039
requests those by name

00:08:25,360 --> 00:08:28,879
um and all of the other ancillary xds

00:08:27,039 --> 00:08:30,560
apis work the same way as rds and eds

00:08:28,879 --> 00:08:33,039
right for example vhds

00:08:30,560 --> 00:08:34,399
is chained off of rds and again envoy

00:08:33,039 --> 00:08:35,200
asks for the specific resources it needs

00:08:34,399 --> 00:08:36,800
by name

00:08:35,200 --> 00:08:38,880
so the only two apis that are really

00:08:36,800 --> 00:08:40,320
special here are lds and cds the rest of

00:08:38,880 --> 00:08:42,159
them are all quite uniform

00:08:40,320 --> 00:08:44,159
and lds and cds are special in sort of

00:08:42,159 --> 00:08:45,839
two main ways number one

00:08:44,159 --> 00:08:47,360
um instead of asking for the specific

00:08:45,839 --> 00:08:49,360
resources that it needs by name envoy

00:08:47,360 --> 00:08:51,279
makes what we call a wildcard query

00:08:49,360 --> 00:08:53,040
uh this is represented as a request

00:08:51,279 --> 00:08:54,000
where the resource names list is empty

00:08:53,040 --> 00:08:55,760
in other words the client is not

00:08:54,000 --> 00:08:57,839
telling the server here are the specific

00:08:55,760 --> 00:08:59,760
resources i need it's instead saying

00:08:57,839 --> 00:09:01,040
i don't know what i need you tell me and

00:08:59,760 --> 00:09:02,720
the server is expected to sort of

00:09:01,040 --> 00:09:04,399
magically figure out what resources are

00:09:02,720 --> 00:09:05,760
appropriate to send to the client

00:09:04,399 --> 00:09:07,839
typically based on the client's node

00:09:05,760 --> 00:09:09,200
identity and then it just sends a whole

00:09:07,839 --> 00:09:10,399
bunch of resources to the client and

00:09:09,200 --> 00:09:11,760
whatever it sends is what the client

00:09:10,399 --> 00:09:14,480
will use

00:09:11,760 --> 00:09:16,000
um and the other way in which lds and

00:09:14,480 --> 00:09:17,440
cds are special is that envoy

00:09:16,000 --> 00:09:18,399
automatically makes both of those calls

00:09:17,440 --> 00:09:19,920
at startup

00:09:18,399 --> 00:09:21,519
um this kind of makes sense for envoy

00:09:19,920 --> 00:09:22,399
because as a proxy you know not

00:09:21,519 --> 00:09:23,120
something that's built into the

00:09:22,399 --> 00:09:25,360
application

00:09:23,120 --> 00:09:26,240
envoy can't have any way of knowing a

00:09:25,360 --> 00:09:27,920
priori

00:09:26,240 --> 00:09:29,519
what ports to listen on or what upstream

00:09:27,920 --> 00:09:30,720
clusters it may need to talk to

00:09:29,519 --> 00:09:32,959
um and so it needs to know about

00:09:30,720 --> 00:09:34,640
everything it might ever need so uh you

00:09:32,959 --> 00:09:36,800
know so so making these queries up front

00:09:34,640 --> 00:09:38,000
sort of makes sense for envoy

00:09:36,800 --> 00:09:40,880
but it doesn't really make sense for

00:09:38,000 --> 00:09:41,680
grpc right um jrpc is built into the

00:09:40,880 --> 00:09:44,800
application

00:09:41,680 --> 00:09:45,600
and when the application creates a jrpc

00:09:44,800 --> 00:09:47,360
client channel

00:09:45,600 --> 00:09:49,360
it creates the channel to a particular

00:09:47,360 --> 00:09:50,800
virtual host so the application knows

00:09:49,360 --> 00:09:51,920
exactly what virtualist it's going to be

00:09:50,800 --> 00:09:53,200
talked to and

00:09:51,920 --> 00:09:54,720
going to be talking to and it knows it's

00:09:53,200 --> 00:09:55,120
not going to need anything other than

00:09:54,720 --> 00:09:56,320
that

00:09:55,120 --> 00:09:57,760
so we don't really want to send the

00:09:56,320 --> 00:09:58,959
client info for virtual hosts that it's

00:09:57,760 --> 00:10:01,120
never going to use

00:09:58,959 --> 00:10:02,240
so in grpc the xds api flow is a little

00:10:01,120 --> 00:10:03,519
bit more linear

00:10:02,240 --> 00:10:06,040
when the application creates a channel

00:10:03,519 --> 00:10:08,720
to a virtual host uh in this case uh

00:10:06,040 --> 00:10:11,839
server.example.com um

00:10:08,720 --> 00:10:13,839
the uh that triggers grpc to go and make

00:10:11,839 --> 00:10:14,800
an lds request for a resource of the

00:10:13,839 --> 00:10:17,519
same name

00:10:14,800 --> 00:10:18,480
and this resource will be an http api

00:10:17,519 --> 00:10:20,000
listener

00:10:18,480 --> 00:10:21,519
and it acts as basically a single route

00:10:20,000 --> 00:10:22,800
for jrpc's configuration

00:10:21,519 --> 00:10:24,399
and everything else is chained off of

00:10:22,800 --> 00:10:25,760
there so the lds resource tells us what

00:10:24,399 --> 00:10:27,519
rds resources we need

00:10:25,760 --> 00:10:29,600
the rds resource tells us what cds

00:10:27,519 --> 00:10:31,279
resources we need the cds resources tell

00:10:29,600 --> 00:10:34,240
us what eds resources we need

00:10:31,279 --> 00:10:35,839
so in effect uh jrpc uses lds and cs

00:10:34,240 --> 00:10:37,279
exactly the same way as the other xds

00:10:35,839 --> 00:10:38,640
apis it doesn't do the special stuff

00:10:37,279 --> 00:10:40,079
that envoy does right

00:10:38,640 --> 00:10:41,360
we request the specific resources we

00:10:40,079 --> 00:10:42,000
want instead of making wild card

00:10:41,360 --> 00:10:43,839
requests

00:10:42,000 --> 00:10:45,279
and we don't proactively make lds and

00:10:43,839 --> 00:10:47,519
cds requests at startup

00:10:45,279 --> 00:10:48,399
the lds requests happen when the client

00:10:47,519 --> 00:10:50,160
creates a channel

00:10:48,399 --> 00:10:53,040
and the cds requests happen when we get

00:10:50,160 --> 00:10:53,040
an rds response

00:10:53,920 --> 00:10:57,519
all right so we've talked about what

00:10:55,360 --> 00:10:58,640
changes we made to the api to support

00:10:57,519 --> 00:10:59,760
non-proxy clients

00:10:58,640 --> 00:11:01,519
let's talk about a couple of other

00:10:59,760 --> 00:11:04,079
gotchas that we ran into related to the

00:11:01,519 --> 00:11:07,519
transport protocol

00:11:04,079 --> 00:11:09,200
now very simple xds servers um

00:11:07,519 --> 00:11:11,519
the simplest possible xds server

00:11:09,200 --> 00:11:14,399
implementation is to basically just say

00:11:11,519 --> 00:11:15,920
okay when the client makes a request for

00:11:14,399 --> 00:11:18,160
a given resource type i'm just going to

00:11:15,920 --> 00:11:18,720
send it every resource i know of of that

00:11:18,160 --> 00:11:20,240
type

00:11:18,720 --> 00:11:22,000
whether or not it needs it i don't care

00:11:20,240 --> 00:11:22,560
i'm just sending it all those resources

00:11:22,000 --> 00:11:24,480
right

00:11:22,560 --> 00:11:25,360
um and if you do that um you can

00:11:24,480 --> 00:11:25,920
actually get away with that and that

00:11:25,360 --> 00:11:29,360
should work

00:11:25,920 --> 00:11:31,200
pretty much fine with grpc um but

00:11:29,360 --> 00:11:32,959
it turns out that for protocols other

00:11:31,200 --> 00:11:35,680
than lds and cds

00:11:32,959 --> 00:11:36,880
uh the xcs api the transport protocol is

00:11:35,680 --> 00:11:37,680
actually designed such that the server

00:11:36,880 --> 00:11:39,680
really

00:11:37,680 --> 00:11:40,959
only has to send resources when they've

00:11:39,680 --> 00:11:42,560
changed so

00:11:40,959 --> 00:11:44,079
if you you know if the client is

00:11:42,560 --> 00:11:45,920
subscribing to you know

00:11:44,079 --> 00:11:47,600
four different rds resources and only

00:11:45,920 --> 00:11:48,880
one of them is change the server really

00:11:47,600 --> 00:11:50,000
only has to send the one that's changed

00:11:48,880 --> 00:11:51,680
it doesn't have to resend the other

00:11:50,000 --> 00:11:54,480
three

00:11:51,680 --> 00:11:55,760
now in jrpc we try to make things easy

00:11:54,480 --> 00:11:57,200
so that we can work with these very

00:11:55,760 --> 00:11:58,320
simple xds servers

00:11:57,200 --> 00:11:59,920
by saying that you know even though

00:11:58,320 --> 00:12:00,720
we're requesting the specific resources

00:11:59,920 --> 00:12:02,320
that we need

00:12:00,720 --> 00:12:03,839
we're going to ignore any resource that

00:12:02,320 --> 00:12:04,800
we receive that wasn't one of the ones

00:12:03,839 --> 00:12:06,880
that we asked for

00:12:04,800 --> 00:12:07,920
right um which is fine that works pretty

00:12:06,880 --> 00:12:09,120
well but there are a couple of

00:12:07,920 --> 00:12:10,079
implications about this that you need to

00:12:09,120 --> 00:12:11,920
be aware of

00:12:10,079 --> 00:12:13,200
if you're if your management server is

00:12:11,920 --> 00:12:14,880
trying to be more intelligent and only

00:12:13,200 --> 00:12:18,000
send things that have changed right

00:12:14,880 --> 00:12:20,320
um so number one the client doesn't um

00:12:18,000 --> 00:12:21,600
uh doesn't validate the resources that

00:12:20,320 --> 00:12:24,000
it's going to ignore so even if they're

00:12:21,600 --> 00:12:25,760
invalid jrpc is not going to knack them

00:12:24,000 --> 00:12:27,120
and number two jrc is not going to cache

00:12:25,760 --> 00:12:28,959
these resources right if

00:12:27,120 --> 00:12:30,480
if the if which means that if a resource

00:12:28,959 --> 00:12:32,160
is requested later

00:12:30,480 --> 00:12:33,600
um the server must resend it even if it

00:12:32,160 --> 00:12:36,240
thinks the client has already seen it

00:12:33,600 --> 00:12:37,920
right so to take an example here let's

00:12:36,240 --> 00:12:39,519
say that initially the client is only

00:12:37,920 --> 00:12:41,040
requesting resource a but the server

00:12:39,519 --> 00:12:44,160
decides to send it resources a

00:12:41,040 --> 00:12:46,800
and b later on if the client requests a

00:12:44,160 --> 00:12:48,079
and b the server needs to resend b

00:12:46,800 --> 00:12:50,079
instead of assuming the client already

00:12:48,079 --> 00:12:51,360
has it even if b hasn't changed right so

00:12:50,079 --> 00:12:53,200
the client has to be aware

00:12:51,360 --> 00:12:54,880
sorry the server has to be aware of what

00:12:53,200 --> 00:12:56,399
the client has actually subscribed to

00:12:54,880 --> 00:12:58,320
and make sure that it's sending it you

00:12:56,399 --> 00:12:59,920
know what it needs when it requests it

00:12:58,320 --> 00:13:01,600
um this isn't much of an issue for lds

00:12:59,920 --> 00:13:03,440
and cds since they actually require that

00:13:01,600 --> 00:13:06,720
that all resources are present in

00:13:03,440 --> 00:13:08,240
every response anyway but for uh rds eds

00:13:06,720 --> 00:13:09,519
and all the other apis

00:13:08,240 --> 00:13:11,200
because the server can send only those

00:13:09,519 --> 00:13:14,399
resources that have changed this is

00:13:11,200 --> 00:13:14,399
something that you have to watch out for

00:13:16,399 --> 00:13:19,519
unsubscription is also kind of

00:13:17,680 --> 00:13:20,639
interesting when the client is no longer

00:13:19,519 --> 00:13:22,959
interested in a resource that can

00:13:20,639 --> 00:13:24,720
unsubscribe it does this by

00:13:22,959 --> 00:13:26,399
uh sending a new request with the

00:13:24,720 --> 00:13:27,200
resource name no longer present in the

00:13:26,399 --> 00:13:29,120
request

00:13:27,200 --> 00:13:30,399
so for example if the client previously

00:13:29,120 --> 00:13:32,320
sent a request for both a

00:13:30,399 --> 00:13:34,399
and b and now it wants to unsubscribe to

00:13:32,320 --> 00:13:35,920
b it'll send a new request that includes

00:13:34,399 --> 00:13:37,200
only a

00:13:35,920 --> 00:13:39,440
now there's an edge case here which is

00:13:37,200 --> 00:13:41,040
sort of interesting which is what if

00:13:39,440 --> 00:13:42,399
the client is subscribed to only one

00:13:41,040 --> 00:13:43,600
resource of a particular type and it

00:13:42,399 --> 00:13:44,560
wants to unsubscribe

00:13:43,600 --> 00:13:46,560
well so then it's going to send a

00:13:44,560 --> 00:13:47,279
request where the research the resource

00:13:46,560 --> 00:13:49,519
names

00:13:47,279 --> 00:13:51,199
list in the request is empty which is

00:13:49,519 --> 00:13:53,120
actually exalted the same way that

00:13:51,199 --> 00:13:54,639
it's exactly the same way that the

00:13:53,120 --> 00:13:56,000
protocol indicates these wild card

00:13:54,639 --> 00:13:59,760
queries that envoy uses for

00:13:56,000 --> 00:14:00,800
lds and cds so the answer is that a

00:13:59,760 --> 00:14:02,160
the way you deal with this is that a

00:14:00,800 --> 00:14:04,160
request with no resource names is

00:14:02,160 --> 00:14:05,680
interpreted as a wildcard query only on

00:14:04,160 --> 00:14:06,560
the first request for that resource type

00:14:05,680 --> 00:14:08,000
on a stream

00:14:06,560 --> 00:14:09,120
so the decision to use wildcard query

00:14:08,000 --> 00:14:09,680
can only be made at the beginning of a

00:14:09,120 --> 00:14:11,199
stream

00:14:09,680 --> 00:14:12,959
uh if a client has previously sent a

00:14:11,199 --> 00:14:13,440
request with none empty resource names

00:14:12,959 --> 00:14:15,199
list

00:14:13,440 --> 00:14:16,880
a subsequent request with an empty list

00:14:15,199 --> 00:14:17,839
means unsubscribe to all it does not

00:14:16,880 --> 00:14:19,120
mean wild card

00:14:17,839 --> 00:14:21,760
so management servers need to be careful

00:14:19,120 --> 00:14:21,760
to get this right

00:14:22,720 --> 00:14:26,560
um there are a lot more gotchas in the

00:14:24,959 --> 00:14:27,920
transport protocol that we ran into as

00:14:26,560 --> 00:14:29,040
we were trying to to

00:14:27,920 --> 00:14:30,800
understand it there were actually quite

00:14:29,040 --> 00:14:32,079
a few edge cases and and you know

00:14:30,800 --> 00:14:34,560
interesting things that are

00:14:32,079 --> 00:14:35,199
uh that are sort of um emergent behavior

00:14:34,560 --> 00:14:36,320
of of

00:14:35,199 --> 00:14:38,320
uh some things that have been put in the

00:14:36,320 --> 00:14:39,440
protocol um so i

00:14:38,320 --> 00:14:40,720
i'm not gonna cover them all here i

00:14:39,440 --> 00:14:41,600
don't have time to get into all of them

00:14:40,720 --> 00:14:43,760
unfortunately but

00:14:41,600 --> 00:14:46,160
uh what i did do is as we ran into these

00:14:43,760 --> 00:14:48,720
we worked with the envoy community to

00:14:46,160 --> 00:14:50,399
update the xds documentation to explain

00:14:48,720 --> 00:14:51,360
how how these various edge cases are

00:14:50,399 --> 00:14:52,639
supposed to work

00:14:51,360 --> 00:14:54,320
uh and how clients and servers are

00:14:52,639 --> 00:14:55,040
supposed to uh to react when they

00:14:54,320 --> 00:14:56,560
encounter them

00:14:55,040 --> 00:14:58,480
so for anybody writing your own xds

00:14:56,560 --> 00:15:00,160
server i strongly or or just client for

00:14:58,480 --> 00:15:01,839
that matter i strongly encourage you to

00:15:00,160 --> 00:15:03,120
uh to read the xds spec we've got a lot

00:15:01,839 --> 00:15:04,560
of good information in there about how

00:15:03,120 --> 00:15:05,839
to handle these various edge cases

00:15:04,560 --> 00:15:07,199
and if anything is unclear you can

00:15:05,839 --> 00:15:10,399
inquire about it and we can clarify the

00:15:07,199 --> 00:15:10,399
documentation even further

00:15:10,560 --> 00:15:14,959
all right so let's talk about what um uh

00:15:13,519 --> 00:15:17,760
what a management server needs to do to

00:15:14,959 --> 00:15:18,880
support grpc

00:15:17,760 --> 00:15:20,880
imagine that you have this existing

00:15:18,880 --> 00:15:22,880
configuration for use with envoy uh

00:15:20,880 --> 00:15:24,160
we've got a tcp listener resource that's

00:15:22,880 --> 00:15:25,839
pointing to a route configuration and

00:15:24,160 --> 00:15:27,120
that route configuration defines three

00:15:25,839 --> 00:15:28,560
virtual hosts

00:15:27,120 --> 00:15:29,759
and let's say that you've got grpc

00:15:28,560 --> 00:15:31,440
traffic that's currently going through

00:15:29,759 --> 00:15:32,800
envoy to those virtual hosts

00:15:31,440 --> 00:15:35,759
and now you want to switch to proxy list

00:15:32,800 --> 00:15:37,759
grpc how do you do it

00:15:35,759 --> 00:15:39,360
so to do that you need to add an http

00:15:37,759 --> 00:15:40,160
api listener for each of the virtual

00:15:39,360 --> 00:15:42,079
hosts

00:15:40,160 --> 00:15:44,240
now as mentioned earlier the http api

00:15:42,079 --> 00:15:45,680
listeners don't have l3 l4 filters in

00:15:44,240 --> 00:15:46,959
their configuration it's just the http

00:15:45,680 --> 00:15:50,160
connection manager

00:15:46,959 --> 00:15:52,800
um and so uh but the

00:15:50,160 --> 00:15:54,480
configuration in the uh http api

00:15:52,800 --> 00:15:56,240
listeners can point to the existing

00:15:54,480 --> 00:15:57,600
rds resource which can be shared between

00:15:56,240 --> 00:15:58,480
jrpc and enviro you don't have to

00:15:57,600 --> 00:16:01,440
duplicate that

00:15:58,480 --> 00:16:01,440
uh in most cases

00:16:01,519 --> 00:16:04,800
and once you have the new resources set

00:16:02,959 --> 00:16:06,240
up all you need to do on the client is

00:16:04,800 --> 00:16:07,680
there's a bootstrap file that needs to

00:16:06,240 --> 00:16:09,279
be created that tells the client where

00:16:07,680 --> 00:16:12,079
the xds server is

00:16:09,279 --> 00:16:14,399
um and then you need to just tell jrpc

00:16:12,079 --> 00:16:15,759
to use xts by using an xds colon uri

00:16:14,399 --> 00:16:19,360
when you create the channel

00:16:15,759 --> 00:16:19,360
and then it just works it's magic

00:16:20,560 --> 00:16:25,839
now um grpc does validate and cache the

00:16:23,759 --> 00:16:28,720
entire route configuration right so

00:16:25,839 --> 00:16:29,519
um it can't ignore virtual hosts other

00:16:28,720 --> 00:16:31,600
than the one

00:16:29,519 --> 00:16:33,279
that that caused it to look at the route

00:16:31,600 --> 00:16:34,800
configuration because the application

00:16:33,279 --> 00:16:36,000
might later create a channel to another

00:16:34,800 --> 00:16:37,440
virtual host that might refer to the

00:16:36,000 --> 00:16:38,959
same route configuration right in the

00:16:37,440 --> 00:16:41,040
example on the last slide

00:16:38,959 --> 00:16:42,399
um if initially the application only

00:16:41,040 --> 00:16:45,279
opens a

00:16:42,399 --> 00:16:46,720
uh a channel for service one it'll get

00:16:45,279 --> 00:16:47,120
the route configuration that has all

00:16:46,720 --> 00:16:49,040
three

00:16:47,120 --> 00:16:50,720
virtual hosts in it and then later if it

00:16:49,040 --> 00:16:52,720
opens the channel to service two

00:16:50,720 --> 00:16:53,920
now it's got a new listener resource

00:16:52,720 --> 00:16:55,759
that's pointing to that same route

00:16:53,920 --> 00:16:57,279
configuration which is you know already

00:16:55,759 --> 00:16:59,360
includes the information for

00:16:57,279 --> 00:17:00,560
uh service two so we have to cache this

00:16:59,360 --> 00:17:01,759
and validate it up front so that we've

00:17:00,560 --> 00:17:03,519
already got it when

00:17:01,759 --> 00:17:06,160
uh when it actually you know if it's

00:17:03,519 --> 00:17:08,319
going to be used later

00:17:06,160 --> 00:17:10,079
um now this it does take up a fair

00:17:08,319 --> 00:17:11,199
amount of memory in grpc to store all

00:17:10,079 --> 00:17:13,280
this information

00:17:11,199 --> 00:17:14,480
so you know if you're in a situation

00:17:13,280 --> 00:17:16,319
where the

00:17:14,480 --> 00:17:18,240
route configuration includes a really

00:17:16,319 --> 00:17:20,160
large number of virtual hosts but grpc

00:17:18,240 --> 00:17:22,480
is only ever going to use a small subset

00:17:20,160 --> 00:17:24,079
one way you can avoid giving jrpc all

00:17:22,480 --> 00:17:25,919
this information that it doesn't need

00:17:24,079 --> 00:17:27,439
is to just inline the relevant part of

00:17:25,919 --> 00:17:29,600
the route configuration into the http

00:17:27,439 --> 00:17:30,880
api listeners that way each listener

00:17:29,600 --> 00:17:33,280
only grabs the information for the one

00:17:30,880 --> 00:17:36,799
virtual host that that it it cares about

00:17:33,280 --> 00:17:39,200
and uh everything just works

00:17:36,799 --> 00:17:41,520
um you might also run into a case due to

00:17:39,200 --> 00:17:42,720
a a bug or a mismatching behavior or

00:17:41,520 --> 00:17:45,280
something where

00:17:42,720 --> 00:17:46,799
um jrpc might reject a config that envoy

00:17:45,280 --> 00:17:48,000
would be okay with right so let's say

00:17:46,799 --> 00:17:50,000
that you have

00:17:48,000 --> 00:17:51,280
a route configuration that has one

00:17:50,000 --> 00:17:53,200
virtual host that

00:17:51,280 --> 00:17:54,960
is used by grpc and another virtualist

00:17:53,200 --> 00:17:57,919
that's used only by envoy

00:17:54,960 --> 00:17:59,280
um and jrpc is you know for some reason

00:17:57,919 --> 00:18:00,880
rejecting the config because the one

00:17:59,280 --> 00:18:02,000
that's meant for envoy even though grpc

00:18:00,880 --> 00:18:04,320
will never use it

00:18:02,000 --> 00:18:05,039
uh is is somehow getting rejected um if

00:18:04,320 --> 00:18:06,640
that happens

00:18:05,039 --> 00:18:08,080
that then moving the relevant part of

00:18:06,640 --> 00:18:10,000
the right configuration into the http

00:18:08,080 --> 00:18:11,840
api listener is also a decent workaround

00:18:10,000 --> 00:18:13,360
uh we hope you shouldn't need to do this

00:18:11,840 --> 00:18:14,559
i only know of one case today where it's

00:18:13,360 --> 00:18:15,760
a problem i'll mention it later it's

00:18:14,559 --> 00:18:16,080
something that we're going to be fixing

00:18:15,760 --> 00:18:17,600
so

00:18:16,080 --> 00:18:19,200
if you run into this this is a possible

00:18:17,600 --> 00:18:19,760
workaround but also let us know because

00:18:19,200 --> 00:18:21,200
we want to

00:18:19,760 --> 00:18:22,400
we want to avoid the need to actually do

00:18:21,200 --> 00:18:24,799
this it's just something to keep in your

00:18:22,400 --> 00:18:26,480
back pocket in case you need it

00:18:24,799 --> 00:18:29,039
um and you do of course need to support

00:18:26,480 --> 00:18:31,280
non-wildcard lds and cds requests which

00:18:29,039 --> 00:18:33,200
envoy will never make but grpc does this

00:18:31,280 --> 00:18:34,559
will mostly be a no-op for cds because

00:18:33,200 --> 00:18:35,360
even if you're doing a pure state of the

00:18:34,559 --> 00:18:36,720
world

00:18:35,360 --> 00:18:38,400
response where you always send all the

00:18:36,720 --> 00:18:38,960
resources you know that should work just

00:18:38,400 --> 00:18:40,559
fine

00:18:38,960 --> 00:18:42,320
uh in lds the one thing you need to be

00:18:40,559 --> 00:18:43,919
aware of is that um

00:18:42,320 --> 00:18:45,840
you need to make sure not to send the

00:18:43,919 --> 00:18:48,000
api listener resources to envoy when it

00:18:45,840 --> 00:18:49,280
makes its wild card requests

00:18:48,000 --> 00:18:51,200
because it won't know what to do with

00:18:49,280 --> 00:18:52,799
them

00:18:51,200 --> 00:18:56,320
all right and so finally let's talk

00:18:52,799 --> 00:18:57,679
about our current status and roadmap

00:18:56,320 --> 00:18:59,520
for those that may not know there are

00:18:57,679 --> 00:19:01,440
actually four variants of the xcs

00:18:59,520 --> 00:19:03,120
transport protocol there's two different

00:19:01,440 --> 00:19:04,160
dimensions aggregated versus

00:19:03,120 --> 00:19:05,200
non-aggregated

00:19:04,160 --> 00:19:06,640
and state of the world versus

00:19:05,200 --> 00:19:07,520
incremental so you know every

00:19:06,640 --> 00:19:10,000
combination of those

00:19:07,520 --> 00:19:11,120
yields four variants jrpc currently

00:19:10,000 --> 00:19:13,280
supports only the

00:19:11,120 --> 00:19:14,799
aggregated state of the world variant we

00:19:13,280 --> 00:19:16,720
will likely support the incremental

00:19:14,799 --> 00:19:18,160
aggregated variant in the future

00:19:16,720 --> 00:19:19,840
but we don't have any plans at least

00:19:18,160 --> 00:19:22,080
right now to support the non-aggregated

00:19:19,840 --> 00:19:24,000
variants

00:19:22,080 --> 00:19:26,000
we support xds right now in the jrc

00:19:24,000 --> 00:19:27,120
client only not yet in the grpc server

00:19:26,000 --> 00:19:29,120
although that's as

00:19:27,120 --> 00:19:31,440
you'll see on one of the next slides uh

00:19:29,120 --> 00:19:32,720
that is uh in the works

00:19:31,440 --> 00:19:34,000
uh and you can see the list of features

00:19:32,720 --> 00:19:35,280
that we currently support here with a

00:19:34,000 --> 00:19:37,039
few noted limitations

00:19:35,280 --> 00:19:38,320
uh the one i will mention i want to call

00:19:37,039 --> 00:19:40,080
out is in route matching

00:19:38,320 --> 00:19:41,679
um the case sensitive field as i

00:19:40,080 --> 00:19:42,320
mentioned earlier this is the one case

00:19:41,679 --> 00:19:44,320
where

00:19:42,320 --> 00:19:45,919
uh jpc will currently reject the config

00:19:44,320 --> 00:19:47,280
if case sensitive is set to false

00:19:45,919 --> 00:19:48,240
uh we are going to be fixing that so

00:19:47,280 --> 00:19:49,840
that you will be able to use case

00:19:48,240 --> 00:19:52,320
sensitive false if you want and

00:19:49,840 --> 00:19:53,919
and we will not reject configurations uh

00:19:52,320 --> 00:19:54,320
that that have that so we do plan to fix

00:19:53,919 --> 00:19:57,280
that

00:19:54,320 --> 00:19:57,280
uh in the near future

00:19:57,840 --> 00:20:01,280
here is a list of features that are on

00:19:59,440 --> 00:20:02,799
our roadmap we've already started

00:20:01,280 --> 00:20:05,039
uh implementing timeout and circuit

00:20:02,799 --> 00:20:06,960
breaking support and a bunch of others

00:20:05,039 --> 00:20:08,720
shown here are in our pipeline you can

00:20:06,960 --> 00:20:10,080
watch our proposal repo to get

00:20:08,720 --> 00:20:12,559
notifications when we post

00:20:10,080 --> 00:20:14,640
uh grfcs which are jrpc's design

00:20:12,559 --> 00:20:16,159
proposals

00:20:14,640 --> 00:20:17,360
we uh the one thing that's uh that we

00:20:16,159 --> 00:20:18,000
know is coming in the not too distant

00:20:17,360 --> 00:20:19,520
future

00:20:18,000 --> 00:20:20,720
that we don't yet have an answer for but

00:20:19,520 --> 00:20:23,039
we're gonna be really thinking about

00:20:20,720 --> 00:20:25,360
hard is how do we support http filters

00:20:23,039 --> 00:20:26,559
in uh in grpc uh the reason this is

00:20:25,360 --> 00:20:29,600
challenging is that

00:20:26,559 --> 00:20:31,120
um grc already has a sort of um plug-in

00:20:29,600 --> 00:20:32,720
mechanism called interceptors

00:20:31,120 --> 00:20:34,480
and grpc interceptors have some

00:20:32,720 --> 00:20:35,600
architectural differences both in terms

00:20:34,480 --> 00:20:37,600
of where they are in the stack

00:20:35,600 --> 00:20:39,360
and in terms of what their capabilities

00:20:37,600 --> 00:20:40,799
are relative to

00:20:39,360 --> 00:20:42,000
envoy's http filters so we're gonna have

00:20:40,799 --> 00:20:43,360
to figure out how to sort of bridge that

00:20:42,000 --> 00:20:45,280
gap in the api here

00:20:43,360 --> 00:20:46,880
um and that's something that we know

00:20:45,280 --> 00:20:50,000
we're gonna need to do both for

00:20:46,880 --> 00:20:51,919
fault injection and for observability i

00:20:50,000 --> 00:20:54,000
would encourage you to file bugs in our

00:20:51,919 --> 00:20:55,360
repo if there are features that you need

00:20:54,000 --> 00:20:56,320
that either we haven't done yet or

00:20:55,360 --> 00:20:57,919
aren't on our roadmap

00:20:56,320 --> 00:20:59,840
um i can't promise that we will

00:20:57,919 --> 00:21:01,360
prioritize whatever you need but uh

00:20:59,840 --> 00:21:02,960
it will be very useful for us to know

00:21:01,360 --> 00:21:05,120
what features users want here

00:21:02,960 --> 00:21:06,559
that will help guide our development and

00:21:05,120 --> 00:21:07,600
of course if you want to contribute to

00:21:06,559 --> 00:21:09,200
the implementation

00:21:07,600 --> 00:21:11,440
we can help guide you in in doing that

00:21:09,200 --> 00:21:11,440
as well

00:21:12,640 --> 00:21:16,559
jpc has three main implementations we

00:21:14,880 --> 00:21:17,120
have native implementations in both java

00:21:16,559 --> 00:21:19,200
and go

00:21:17,120 --> 00:21:20,400
and there is a c core implementation

00:21:19,200 --> 00:21:21,919
which is

00:21:20,400 --> 00:21:24,159
used as the underlying implementation

00:21:21,919 --> 00:21:25,679
for all the languages that you see here

00:21:24,159 --> 00:21:27,360
i should note that in c sharp there are

00:21:25,679 --> 00:21:28,720
actually two different implementations

00:21:27,360 --> 00:21:31,120
there's the one that

00:21:28,720 --> 00:21:32,720
we provide that is wrapped around c-core

00:21:31,120 --> 00:21:35,120
and there is a separate

00:21:32,720 --> 00:21:36,559
native c-sharp implementation for net

00:21:35,120 --> 00:21:38,000
that is written by microsoft

00:21:36,559 --> 00:21:41,039
uh that implementation as far as i know

00:21:38,000 --> 00:21:43,360
does not yet have xds support

00:21:41,039 --> 00:21:44,080
jrpc also has a native node.js

00:21:43,360 --> 00:21:45,440
implementation

00:21:44,080 --> 00:21:47,440
that has just recently started adding

00:21:45,440 --> 00:21:48,480
xds features this is lagging a little

00:21:47,440 --> 00:21:49,600
bit behind the other languages in

00:21:48,480 --> 00:21:52,080
timeline but they are working on

00:21:49,600 --> 00:21:52,080
catching up

00:21:53,840 --> 00:21:57,039
there are a few control planes that work

00:21:55,600 --> 00:21:58,640
with proxies grpc

00:21:57,039 --> 00:21:59,919
google's traffic director control plane

00:21:58,640 --> 00:22:00,559
is the main one that we develop and test

00:21:59,919 --> 00:22:02,559
against

00:22:00,559 --> 00:22:04,720
and you can look at this uh the the link

00:22:02,559 --> 00:22:06,320
here goes to a blog post uh that

00:22:04,720 --> 00:22:07,760
uh talks about google's traffic director

00:22:06,320 --> 00:22:10,480
product and and how it works

00:22:07,760 --> 00:22:12,400
and what it supports um istio also has

00:22:10,480 --> 00:22:13,600
some basic experimental support for

00:22:12,400 --> 00:22:15,440
proxies grpc

00:22:13,600 --> 00:22:16,880
um they don't have any documentation for

00:22:15,440 --> 00:22:18,159
it yet but they do have sort of a test

00:22:16,880 --> 00:22:19,520
that shows that it works

00:22:18,159 --> 00:22:21,280
uh so i would encourage people to sort

00:22:19,520 --> 00:22:22,240
of file bugs against istio if that's you

00:22:21,280 --> 00:22:23,200
know if this is something you actually

00:22:22,240 --> 00:22:25,200
want to use in production

00:22:23,200 --> 00:22:26,799
uh uh you know the more bugs you you

00:22:25,200 --> 00:22:28,159
know if you file bugs on that and you

00:22:26,799 --> 00:22:29,679
know express your interest in it

00:22:28,159 --> 00:22:31,360
uh that will help them prioritize no

00:22:29,679 --> 00:22:32,960
doubt um and there's a bug open

00:22:31,360 --> 00:22:35,440
requesting jrpc support and go control

00:22:32,960 --> 00:22:35,440
plane as well

00:22:36,240 --> 00:22:39,760
uh so i want to leave you with one final

00:22:37,919 --> 00:22:41,280
thought uh until now there was only one

00:22:39,760 --> 00:22:43,840
xgas client which was envoy

00:22:41,280 --> 00:22:44,640
uh now with grpc there are two uh but i

00:22:43,840 --> 00:22:45,840
think there's gonna be more in the

00:22:44,640 --> 00:22:46,559
future i don't think this is the last

00:22:45,840 --> 00:22:47,919
one

00:22:46,559 --> 00:22:49,440
i've already heard of a couple of cases

00:22:47,919 --> 00:22:51,440
where people have been talking about

00:22:49,440 --> 00:22:52,080
building an xds aware http client

00:22:51,440 --> 00:22:53,200
library

00:22:52,080 --> 00:22:54,640
and as i mentioned earlier there will

00:22:53,200 --> 00:22:56,480
likely be cases where people will want

00:22:54,640 --> 00:22:58,080
xts aware sql clients

00:22:56,480 --> 00:22:59,440
so you know and i suspect that there

00:22:58,080 --> 00:23:01,039
will be even other use cases in the

00:22:59,440 --> 00:23:02,960
future that we haven't thought of yet so

00:23:01,039 --> 00:23:04,640
i think this is a really exciting time

00:23:02,960 --> 00:23:05,360
for the xcs ecosystem i think it's

00:23:04,640 --> 00:23:06,960
becoming

00:23:05,360 --> 00:23:09,120
richer and more varied and i'm really

00:23:06,960 --> 00:23:12,200
excited to see where it goes

00:23:09,120 --> 00:23:15,200
so with that i will take questions thank

00:23:12,200 --> 00:23:15,200

YouTube URL: https://www.youtube.com/watch?v=IbcJ8kNmsrE


