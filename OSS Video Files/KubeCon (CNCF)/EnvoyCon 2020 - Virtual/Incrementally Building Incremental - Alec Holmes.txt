Title: Incrementally Building Incremental - Alec Holmes
Publication date: 2020-10-21
Playlist: EnvoyCon 2020 - Virtual
Description: 
	Incrementally Building Incremental - Alec Holmes

This talk walks through the development process of incremental xDS lead by Alec Holmes and Joshua Rutherford inside the open source repository “envoyproxy/go-control-plane” . It touches on differences between SOTW and Incremental xDS, implementation hurdles tackled when building out the new protocol, and design changes in the pre-existing codebase needed to build out Incremental. Alec will lay out the remaining goals, and discuss the next steps for the repository.
Captions: 
	00:00:00,240 --> 00:00:04,720
hey everyone my name is alec and i'm

00:00:02,720 --> 00:00:05,920
real excited to talk to you today about

00:00:04,720 --> 00:00:08,559
incrementally building

00:00:05,920 --> 00:00:09,200
the incremental implementation in

00:00:08,559 --> 00:00:13,360
envoy's

00:00:09,200 --> 00:00:13,360
go control plane upstream repo

00:00:14,400 --> 00:00:17,840
so i'm a core engineer at gray matter

00:00:16,560 --> 00:00:20,480
and i've worked there since

00:00:17,840 --> 00:00:21,439
inception uh gray matter we have large

00:00:20,480 --> 00:00:24,880
customers

00:00:21,439 --> 00:00:27,840
in fact we operate in production in

00:00:24,880 --> 00:00:29,679
a large global enterprise and in order

00:00:27,840 --> 00:00:32,640
to meet scale requirements

00:00:29,679 --> 00:00:33,680
we found that incremental is a necessary

00:00:32,640 --> 00:00:36,559
feature set

00:00:33,680 --> 00:00:39,200
required by go control plane so we set

00:00:36,559 --> 00:00:42,239
about to add it

00:00:39,200 --> 00:00:43,600
uh this is my first major open source

00:00:42,239 --> 00:00:47,120
contribution

00:00:43,600 --> 00:00:48,239
i've been contributing to go control

00:00:47,120 --> 00:00:51,039
plane here and there

00:00:48,239 --> 00:00:52,160
small prs that i wanted to fix minor

00:00:51,039 --> 00:00:55,039
issues and i saw

00:00:52,160 --> 00:00:56,480
that would mature the repo a little more

00:00:55,039 --> 00:01:00,160
but incremental

00:00:56,480 --> 00:01:02,640
as it's a-hole protocol implementation

00:01:00,160 --> 00:01:03,680
is a large feature set and this is my

00:01:02,640 --> 00:01:06,880
biggest

00:01:03,680 --> 00:01:08,960
uh contribution so far in my career to

00:01:06,880 --> 00:01:10,320
an upstream repo an open source upstream

00:01:08,960 --> 00:01:13,840
repo

00:01:10,320 --> 00:01:13,840
this large

00:01:14,560 --> 00:01:18,400
so this right here is a high level

00:01:16,320 --> 00:01:20,320
timeline that lays out the go control

00:01:18,400 --> 00:01:23,439
plane implementation path

00:01:20,320 --> 00:01:24,799
while we were adding incremental so in

00:01:23,439 --> 00:01:27,040
march 2018

00:01:24,799 --> 00:01:28,560
the initial snapshot cache of go control

00:01:27,040 --> 00:01:30,720
plane was released

00:01:28,560 --> 00:01:32,960
this was the first tagged revision of go

00:01:30,720 --> 00:01:36,960
control plane and it contained

00:01:32,960 --> 00:01:38,960
not only the simple snapshot cache

00:01:36,960 --> 00:01:40,079
which i'm sure many of you are familiar

00:01:38,960 --> 00:01:42,880
with

00:01:40,079 --> 00:01:43,840
in october of 2019 the incremental

00:01:42,880 --> 00:01:46,399
protocol

00:01:43,840 --> 00:01:47,280
was released by the community uh this

00:01:46,399 --> 00:01:50,159
was an

00:01:47,280 --> 00:01:52,399
upstream change to envoy itself uh the

00:01:50,159 --> 00:01:53,840
protocol was defined as a spec

00:01:52,399 --> 00:01:56,159
but it wasn't implemented anywhere i

00:01:53,840 --> 00:01:57,040
believe envoy only had cds currently

00:01:56,159 --> 00:01:58,640
functioning

00:01:57,040 --> 00:02:00,320
uh when that was current that was

00:01:58,640 --> 00:02:03,840
released

00:02:00,320 --> 00:02:06,240
and in december of 2019 i swooped in

00:02:03,840 --> 00:02:08,800
to actually begin the implementation and

00:02:06,240 --> 00:02:11,440
write a proposal on

00:02:08,800 --> 00:02:12,400
implementing incremental inside of go

00:02:11,440 --> 00:02:14,480
control plane

00:02:12,400 --> 00:02:15,840
as i had seen some sort of traction in

00:02:14,480 --> 00:02:18,080
the java control plane

00:02:15,840 --> 00:02:20,640
but there was nothing nothing there in

00:02:18,080 --> 00:02:23,760
go control plane

00:02:20,640 --> 00:02:24,239
and then in july 2020 the mux and linear

00:02:23,760 --> 00:02:26,560
cash

00:02:24,239 --> 00:02:27,840
came out and those were targeted for

00:02:26,560 --> 00:02:30,560
things

00:02:27,840 --> 00:02:32,400
like better opaque resource handling and

00:02:30,560 --> 00:02:35,200
other conveniences

00:02:32,400 --> 00:02:37,040
to help state of the world protocols

00:02:35,200 --> 00:02:39,599
which is a step in the right direction

00:02:37,040 --> 00:02:41,040
but we still we still believed that the

00:02:39,599 --> 00:02:42,560
incremental protocol

00:02:41,040 --> 00:02:45,519
was the right way forward for

00:02:42,560 --> 00:02:49,200
performance at scale

00:02:45,519 --> 00:02:51,360
and as of this month current time the pr

00:02:49,200 --> 00:02:54,319
for incremental is open working and

00:02:51,360 --> 00:02:54,319
ready for review

00:02:58,239 --> 00:03:01,840
so i have linked the initial incremental

00:03:01,200 --> 00:03:04,319
xds

00:03:01,840 --> 00:03:06,800
implementation plan uh this was our

00:03:04,319 --> 00:03:08,959
upfront planning document in case anyone

00:03:06,800 --> 00:03:10,879
wants to read it i'd like to thank the

00:03:08,959 --> 00:03:12,480
team at lift and go control plane for

00:03:10,879 --> 00:03:14,640
the feedback they provided

00:03:12,480 --> 00:03:16,400
and the help they gave me to work

00:03:14,640 --> 00:03:17,680
through the design and as well as think

00:03:16,400 --> 00:03:19,120
about edge cases

00:03:17,680 --> 00:03:21,360
and failure scenarios and things like

00:03:19,120 --> 00:03:21,360
that

00:03:21,440 --> 00:03:26,000
the main features here were we really

00:03:23,280 --> 00:03:27,920
set out to achieve performance at scale

00:03:26,000 --> 00:03:29,280
so we wanted to minimize data over the

00:03:27,920 --> 00:03:30,560
wire we needed

00:03:29,280 --> 00:03:33,440
the management server to be a little

00:03:30,560 --> 00:03:35,280
smarter so to do some things like state

00:03:33,440 --> 00:03:37,840
management

00:03:35,280 --> 00:03:39,200
and of course we wanted to maintain

00:03:37,840 --> 00:03:42,159
backwards compatibility

00:03:39,200 --> 00:03:43,040
and the reason for that was to not break

00:03:42,159 --> 00:03:45,200
users

00:03:43,040 --> 00:03:46,400
code that have inherited go control

00:03:45,200 --> 00:03:49,440
plane as

00:03:46,400 --> 00:03:49,440
an upstream resource

00:03:51,120 --> 00:03:55,200
so the implementation itself consisted

00:03:53,680 --> 00:03:57,599
of a few things

00:03:55,200 --> 00:03:59,360
um i had to get my hands in the server

00:03:57,599 --> 00:04:00,000
and the cache for go control plane the

00:03:59,360 --> 00:04:03,360
two main

00:04:00,000 --> 00:04:05,360
pillars of the code there were

00:04:03,360 --> 00:04:06,640
completely different delta discovery

00:04:05,360 --> 00:04:09,040
request response

00:04:06,640 --> 00:04:10,319
objects so previously in state of the

00:04:09,040 --> 00:04:13,519
world we used

00:04:10,319 --> 00:04:15,519
discovery requests and response and

00:04:13,519 --> 00:04:16,639
with these new objects that means i

00:04:15,519 --> 00:04:18,239
couldn't reuse

00:04:16,639 --> 00:04:19,680
a lot of the existing code as it was

00:04:18,239 --> 00:04:22,880
specifically targeted

00:04:19,680 --> 00:04:24,160
for state of the world which is a valid

00:04:22,880 --> 00:04:25,759
assumption because

00:04:24,160 --> 00:04:28,560
that was the only thing that was defined

00:04:25,759 --> 00:04:31,919
as a spec at the time

00:04:28,560 --> 00:04:33,440
and now with incremental a little more

00:04:31,919 --> 00:04:34,479
logic has been offloaded into the

00:04:33,440 --> 00:04:37,680
management server

00:04:34,479 --> 00:04:40,720
so the server now needs to create a diff

00:04:37,680 --> 00:04:42,880
and track state so it can intelligently

00:04:40,720 --> 00:04:46,639
broadcast out changes

00:04:42,880 --> 00:04:49,680
to resources and clients as it detects

00:04:46,639 --> 00:04:50,880
changes within its snapshots so again

00:04:49,680 --> 00:04:54,240
the cache is just

00:04:50,880 --> 00:04:57,600
a list of snapshots per clients

00:04:54,240 --> 00:05:00,160
and when things are updated um it's the

00:04:57,600 --> 00:05:03,520
job of the server to understand

00:05:00,160 --> 00:05:05,919
who has subscribed to these resources um

00:05:03,520 --> 00:05:06,800
when they should receive changes and

00:05:05,919 --> 00:05:10,080
also when

00:05:06,800 --> 00:05:12,400
clients unsubscribe so

00:05:10,080 --> 00:05:14,160
that whole subscription functionality

00:05:12,400 --> 00:05:16,639
has also been enabled

00:05:14,160 --> 00:05:18,160
um i had to come up with a clever

00:05:16,639 --> 00:05:20,639
versioning system

00:05:18,160 --> 00:05:22,560
that actually targets the individual

00:05:20,639 --> 00:05:25,280
resources themselves

00:05:22,560 --> 00:05:26,479
as before we were go control plane was

00:05:25,280 --> 00:05:28,560
doing something

00:05:26,479 --> 00:05:30,160
that just used the global request

00:05:28,560 --> 00:05:30,960
response version that was in those

00:05:30,160 --> 00:05:33,280
discovery

00:05:30,960 --> 00:05:34,479
request response objects and delta

00:05:33,280 --> 00:05:37,680
doesn't really have that anymore

00:05:34,479 --> 00:05:38,080
it just has a a simple debugging system

00:05:37,680 --> 00:05:40,800
version

00:05:38,080 --> 00:05:41,199
info but that's not really a valid way

00:05:40,800 --> 00:05:44,720
of

00:05:41,199 --> 00:05:47,919
detecting change at a granular level

00:05:44,720 --> 00:05:48,320
so because we needed that granular level

00:05:47,919 --> 00:05:51,199
of

00:05:48,320 --> 00:05:53,199
detection we had to develop an algorithm

00:05:51,199 --> 00:05:54,800
that would efficiently diff those

00:05:53,199 --> 00:05:57,360
hash those versio or hash those

00:05:54,800 --> 00:06:01,440
resources and create accurate versions

00:05:57,360 --> 00:06:01,440
to compare to at a previous state

00:06:03,440 --> 00:06:06,720
so the implementation itself was fairly

00:06:05,840 --> 00:06:09,280
straightforward

00:06:06,720 --> 00:06:10,639
um the only difficult part was the

00:06:09,280 --> 00:06:12,960
actual diffing

00:06:10,639 --> 00:06:13,840
um and and creating a fast way to do

00:06:12,960 --> 00:06:15,520
that because

00:06:13,840 --> 00:06:18,160
again we're targeting performance at

00:06:15,520 --> 00:06:21,120
scale so we don't want to hold back

00:06:18,160 --> 00:06:23,120
the server with a slow diffing algorithm

00:06:21,120 --> 00:06:27,520
and we needed that to be quick

00:06:23,120 --> 00:06:30,319
so with the map implementation we chose

00:06:27,520 --> 00:06:31,440
um it enabled us to keep a pretty

00:06:30,319 --> 00:06:33,919
minimal

00:06:31,440 --> 00:06:35,440
invasiveness to the existing external

00:06:33,919 --> 00:06:37,759
api

00:06:35,440 --> 00:06:40,000
all we have to do to inherit this change

00:06:37,759 --> 00:06:42,160
is just implement these callbacks

00:06:40,000 --> 00:06:43,600
and you're pretty much good to go uh

00:06:42,160 --> 00:06:45,280
there they can be implemented in the

00:06:43,600 --> 00:06:46,720
similar manner that you've done with the

00:06:45,280 --> 00:06:51,120
state of the world

00:06:46,720 --> 00:06:52,479
uh and and with this new implementation

00:06:51,120 --> 00:06:54,240
uh you don't actually have to change the

00:06:52,479 --> 00:06:55,360
way you set snapshots or anything or

00:06:54,240 --> 00:06:58,240
create watches

00:06:55,360 --> 00:06:59,280
there is a new create delta watch uh

00:06:58,240 --> 00:07:01,840
function defined

00:06:59,280 --> 00:07:04,240
in the cat the snapshot interface the

00:07:01,840 --> 00:07:05,440
snapshot cache interface

00:07:04,240 --> 00:07:07,280
but that isn't needed unless you're

00:07:05,440 --> 00:07:09,840
actually implementing your own

00:07:07,280 --> 00:07:11,440
version of the server so if you're using

00:07:09,840 --> 00:07:12,400
go control planes implementation that we

00:07:11,440 --> 00:07:14,960
provide

00:07:12,400 --> 00:07:16,960
that's all taken care of for you so

00:07:14,960 --> 00:07:19,520
again these callbacks are simply just

00:07:16,960 --> 00:07:20,800
defined because we couldn't reuse the

00:07:19,520 --> 00:07:23,440
pre-existing state of the world

00:07:20,800 --> 00:07:25,280
discovery request response objects

00:07:23,440 --> 00:07:27,680
uh we had to come up with something

00:07:25,280 --> 00:07:30,080
similar and compartmentalized

00:07:27,680 --> 00:07:31,520
because you could have scenarios when

00:07:30,080 --> 00:07:33,440
certain clients are in state of the

00:07:31,520 --> 00:07:34,479
world mode but others are in delta mode

00:07:33,440 --> 00:07:36,000
so

00:07:34,479 --> 00:07:37,599
again they're they're sharing the same

00:07:36,000 --> 00:07:41,840
resource pool

00:07:37,599 --> 00:07:44,639
but receiving items differently

00:07:41,840 --> 00:07:46,160
so with these callbacks you can have

00:07:44,639 --> 00:07:48,160
your state of the world callbacks as

00:07:46,160 --> 00:07:51,680
well as your delta callbacks

00:07:48,160 --> 00:07:51,680
and treat the functionality different

00:07:54,960 --> 00:07:59,280
so i wanted to talk about some

00:07:56,879 --> 00:08:02,400
challenges when implementing this code

00:07:59,280 --> 00:08:02,960
um and working in the repo so i did

00:08:02,400 --> 00:08:04,960
spend

00:08:02,960 --> 00:08:06,080
quite a lot of time familiarizing myself

00:08:04,960 --> 00:08:07,840
with the code base

00:08:06,080 --> 00:08:09,680
um i had to reverse engineer a lot of

00:08:07,840 --> 00:08:11,759
the relationships between the cache and

00:08:09,680 --> 00:08:13,440
the server because as i said before

00:08:11,759 --> 00:08:15,120
i was just doing minor contributions i

00:08:13,440 --> 00:08:16,800
didn't really fully understand what the

00:08:15,120 --> 00:08:19,360
code was doing

00:08:16,800 --> 00:08:21,440
and in doing so i actually went back and

00:08:19,360 --> 00:08:24,879
contributed a lot of documentation

00:08:21,440 --> 00:08:27,039
and some resources for newcomers

00:08:24,879 --> 00:08:29,360
to read and hopefully better understand

00:08:27,039 --> 00:08:31,199
the code itself

00:08:29,360 --> 00:08:32,560
that way they don't have to share the

00:08:31,199 --> 00:08:36,800
same pain that i did

00:08:32,560 --> 00:08:39,120
when implementing this large feature set

00:08:36,800 --> 00:08:40,719
so again i'm not going to touch on this

00:08:39,120 --> 00:08:42,080
but the versioning at the resource level

00:08:40,719 --> 00:08:43,519
that was another challenge because we

00:08:42,080 --> 00:08:45,680
had to we had to develop a whole new

00:08:43,519 --> 00:08:47,760
algorithm just to do that

00:08:45,680 --> 00:08:48,880
and we couldn't again couldn't use a lot

00:08:47,760 --> 00:08:50,240
of the pre-existing code

00:08:48,880 --> 00:08:52,560
because of the fact that they were the

00:08:50,240 --> 00:08:55,839
differing uh

00:08:52,560 --> 00:08:55,839
discovery objects

00:08:56,399 --> 00:08:59,920
uh and the last thing i wanted to talk

00:08:59,040 --> 00:09:02,080
about was

00:08:59,920 --> 00:09:04,160
the upstream changes while building

00:09:02,080 --> 00:09:04,880
incremental uh this is a fast growing

00:09:04,160 --> 00:09:06,560
repo

00:09:04,880 --> 00:09:08,080
it's maturing quickly and i'm really

00:09:06,560 --> 00:09:10,880
happy for that

00:09:08,080 --> 00:09:11,519
but because i was so far in isolation on

00:09:10,880 --> 00:09:14,640
my

00:09:11,519 --> 00:09:16,320
on my own the the code did change quite

00:09:14,640 --> 00:09:18,160
a lot and there was a lot of prs for

00:09:16,320 --> 00:09:20,800
preparing for incremental

00:09:18,160 --> 00:09:21,600
things like that and as i was developing

00:09:20,800 --> 00:09:24,320
the upstream

00:09:21,600 --> 00:09:26,399
idea of incremental was also changing so

00:09:24,320 --> 00:09:27,760
i had to quickly adapt my code

00:09:26,399 --> 00:09:31,360
but it all worked out in the end and i'm

00:09:27,760 --> 00:09:31,360
glad how it turned out

00:09:32,720 --> 00:09:37,519
so here is the pr everything's passing

00:09:36,240 --> 00:09:39,920
it's working good to go

00:09:37,519 --> 00:09:41,279
um it is ready for review and i just

00:09:39,920 --> 00:09:42,640
want to thank all those who have

00:09:41,279 --> 00:09:43,839
actually already reviewed it and

00:09:42,640 --> 00:09:45,360
provided some feedback

00:09:43,839 --> 00:09:46,959
i know it's large but i really do

00:09:45,360 --> 00:09:49,040
appreciate your efforts

00:09:46,959 --> 00:09:50,080
um it's really welcomed and thank you

00:09:49,040 --> 00:09:51,519
again

00:09:50,080 --> 00:09:53,040
so go check the pr out if you're

00:09:51,519 --> 00:09:54,399
interested i would love to have y'all's

00:09:53,040 --> 00:09:57,519
feedback

00:09:54,399 --> 00:09:58,640
and feel free to comment or reach out to

00:09:57,519 --> 00:10:01,360
me specifically if you have any

00:09:58,640 --> 00:10:04,240
questions on the code

00:10:01,360 --> 00:10:06,000
so here is the integration test running

00:10:04,240 --> 00:10:07,839
you'll notice that it has a lot of the

00:10:06,000 --> 00:10:10,720
log statements

00:10:07,839 --> 00:10:11,920
with the hashed versions if you actually

00:10:10,720 --> 00:10:14,079
want to check this out more

00:10:11,920 --> 00:10:15,200
i provide instructions to run it feel

00:10:14,079 --> 00:10:19,120
free to go look at it

00:10:15,200 --> 00:10:22,000
and let me know what you guys think

00:10:19,120 --> 00:10:23,440
so what's next um i'm currently working

00:10:22,000 --> 00:10:26,480
on implementing ads

00:10:23,440 --> 00:10:27,440
for incremental all of the xds services

00:10:26,480 --> 00:10:29,920
are complete

00:10:27,440 --> 00:10:32,399
but ads does need to be completed i know

00:10:29,920 --> 00:10:34,320
there's some more features that

00:10:32,399 --> 00:10:35,519
i need to build for that to actually be

00:10:34,320 --> 00:10:36,560
done

00:10:35,519 --> 00:10:39,040
and i'm pretty sure that's probably

00:10:36,560 --> 00:10:41,680
going to be the most used implementation

00:10:39,040 --> 00:10:43,519
of incremental

00:10:41,680 --> 00:10:44,880
the mux and linear cache implementations

00:10:43,519 --> 00:10:45,519
need to be done i need to go back and

00:10:44,880 --> 00:10:47,680
redo

00:10:45,519 --> 00:10:48,880
and do those because again as i was

00:10:47,680 --> 00:10:52,000
building this

00:10:48,880 --> 00:10:56,959
those came out so i didn't have time to

00:10:52,000 --> 00:10:58,800
also implement those and not just simple

00:10:56,959 --> 00:11:00,160
i need to think about failure scenarios

00:10:58,800 --> 00:11:02,240
i actually want to test this

00:11:00,160 --> 00:11:04,399
and see what how it does in production

00:11:02,240 --> 00:11:07,040
um well not just production but

00:11:04,399 --> 00:11:08,560
i want to see it in a real deployment um

00:11:07,040 --> 00:11:10,320
i haven't done that yet

00:11:08,560 --> 00:11:11,920
and i want to also uh performance

00:11:10,320 --> 00:11:13,760
benchmark this so i want to see how it

00:11:11,920 --> 00:11:15,200
compares the state of the world

00:11:13,760 --> 00:11:17,040
what kind of performance gains are we

00:11:15,200 --> 00:11:18,720
looking at and

00:11:17,040 --> 00:11:20,480
yeah i really want to put the protocol

00:11:18,720 --> 00:11:23,040
through it through the ringer in this in

00:11:20,480 --> 00:11:23,040
this repo

00:11:24,160 --> 00:11:28,399
but uh again thank you all for tuning in

00:11:27,040 --> 00:11:30,720
to my talk um

00:11:28,399 --> 00:11:31,760
go check out the pr i have a list of

00:11:30,720 --> 00:11:34,160
resources

00:11:31,760 --> 00:11:35,440
for the talk in my github feel free to

00:11:34,160 --> 00:11:37,360
check those out

00:11:35,440 --> 00:11:39,279
that should include the slides and all

00:11:37,360 --> 00:11:41,360
the screenshots and things like that

00:11:39,279 --> 00:11:43,519
um thank you again i appreciate all of

00:11:41,360 --> 00:11:45,680
you who've helped who've helped out

00:11:43,519 --> 00:11:46,800
oh and i'd also like to mention that um

00:11:45,680 --> 00:11:50,160
i am in the

00:11:46,800 --> 00:11:50,800
envoy slack uh feel free to message me

00:11:50,160 --> 00:11:53,680
personally

00:11:50,800 --> 00:11:55,440
or reach out to me in the xds or control

00:11:53,680 --> 00:11:57,120
plane dev channel

00:11:55,440 --> 00:11:58,880
i'm usually pretty responsive there so

00:11:57,120 --> 00:11:59,839
if you have any questions on the pr or

00:11:58,880 --> 00:12:01,600
the code itself

00:11:59,839 --> 00:12:05,040
feel free to hit me up online thank you

00:12:01,600 --> 00:12:05,040

YouTube URL: https://www.youtube.com/watch?v=nFEP2QReOQM


