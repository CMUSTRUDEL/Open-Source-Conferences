Title: Envoy on Windows: Use-cases, roadmap, and more - Sunjay Bhatia, David Schott
Publication date: 2020-10-21
Playlist: EnvoyCon 2020 - Virtual
Description: 
	Envoy on Windows: Use-cases, roadmap, and more - Sunjay Bhatia, David Schott

Ready to dive a little deeper into the world of Envoy on Windows? Learn about the ongoing efforts to enable the vast ecosystem of Windows applications to leverage the Envoy proxy, what it can do now, and what is coming next. Contributors have been hard at work bringing Windows platform support to Envoy. The project hopes to enable the vast ecosystem of Windows application architectures to leverage Envoyâ€™s rich feature set and benefit from the vibrant Envoy open source community. This talk will show how Envoy users can start to use and evaluate Envoy on Windows, demonstrate how Envoy can be used to enable cloud-native applications on Windows, and discuss the roadmap ahead.
Captions: 
	00:00:01,120 --> 00:00:05,680
uh hello all uh welcome to our

00:00:03,439 --> 00:00:06,720
uh talk um today we're gonna be talking

00:00:05,680 --> 00:00:10,160
about

00:00:06,720 --> 00:00:13,679
envoy support on windows um my name

00:00:10,160 --> 00:00:16,800
is sanjay batter i'm a south carolina

00:00:13,679 --> 00:00:18,800
uh previously i've contributed to

00:00:16,800 --> 00:00:20,720
windows container support in cloud

00:00:18,800 --> 00:00:22,800
foundry application one time and

00:00:20,720 --> 00:00:24,160
and contributed to the diego container

00:00:22,800 --> 00:00:27,359
scheduler

00:00:24,160 --> 00:00:30,080
in cloud foundry right now i'm a

00:00:27,359 --> 00:00:31,439
full-time contributor to the envoy on

00:00:30,080 --> 00:00:34,640
windows work

00:00:31,439 --> 00:00:36,960
and presenting with you today is david

00:00:34,640 --> 00:00:39,440
hi everyone i'm a program manager at

00:00:36,960 --> 00:00:41,760
microsoft i've been a member of the

00:00:39,440 --> 00:00:43,040
windows core networking team for a few

00:00:41,760 --> 00:00:45,760
years now

00:00:43,040 --> 00:00:47,520
my main areas that i focus on are

00:00:45,760 --> 00:00:50,399
container networking as well as

00:00:47,520 --> 00:00:50,960
software defined networking particularly

00:00:50,399 --> 00:00:54,480
in the

00:00:50,960 --> 00:00:54,480
kubernetes on windows space

00:00:54,800 --> 00:00:58,960
so what's on the agenda today we'll be

00:00:57,520 --> 00:01:01,199
starting out looking at the

00:00:58,960 --> 00:01:02,480
motivations behind porting on way to

00:01:01,199 --> 00:01:04,479
windows

00:01:02,480 --> 00:01:06,560
it's history of how we got here at our

00:01:04,479 --> 00:01:08,320
first alpha release

00:01:06,560 --> 00:01:11,360
what does the alpha release actually

00:01:08,320 --> 00:01:13,840
mean how to get started with it

00:01:11,360 --> 00:01:15,520
you know showing a demo of envoy on

00:01:13,840 --> 00:01:18,000
windows in action

00:01:15,520 --> 00:01:20,240
as well as after the demo going over

00:01:18,000 --> 00:01:22,640
future plans roadmap

00:01:20,240 --> 00:01:24,479
and you know how to get involved with

00:01:22,640 --> 00:01:26,560
the community

00:01:24,479 --> 00:01:29,040
and we'll wrap up with a q a session

00:01:26,560 --> 00:01:29,040
after that

00:01:29,200 --> 00:01:35,439
so envoy on windows why

00:01:33,600 --> 00:01:37,520
onware was developed for linux first and

00:01:35,439 --> 00:01:39,600
it works great but the reality is that

00:01:37,520 --> 00:01:41,200
in industry today many organizations

00:01:39,600 --> 00:01:43,840
have a mixture of

00:01:41,200 --> 00:01:45,600
os platforms in their environments

00:01:43,840 --> 00:01:47,840
essentially without ongoing windows

00:01:45,600 --> 00:01:49,200
those organizations and users are faced

00:01:47,840 --> 00:01:51,360
with two choices

00:01:49,200 --> 00:01:52,560
use a different proxy across windows and

00:01:51,360 --> 00:01:55,119
linux or

00:01:52,560 --> 00:01:56,479
rewrite all windows applications and

00:01:55,119 --> 00:01:59,119
migrate them to link to

00:01:56,479 --> 00:02:01,200
linux both of which are pretty costly

00:01:59,119 --> 00:02:02,880
and expensive undertakings that take

00:02:01,200 --> 00:02:04,960
time

00:02:02,880 --> 00:02:07,040
our message today is if you're using

00:02:04,960 --> 00:02:09,440
onward proxy for linux services

00:02:07,040 --> 00:02:11,039
to solve a particular problem now you

00:02:09,440 --> 00:02:13,520
should be able to begin

00:02:11,039 --> 00:02:14,400
initial prototyping work on deriving

00:02:13,520 --> 00:02:16,959
those same

00:02:14,400 --> 00:02:17,840
benefits and utility for windows-based

00:02:16,959 --> 00:02:22,400
applications

00:02:17,840 --> 00:02:25,599
and services as well as infrastructure

00:02:22,400 --> 00:02:26,560
so also of note is that the envoy

00:02:25,599 --> 00:02:28,720
project

00:02:26,560 --> 00:02:29,760
was founded with the belief that the

00:02:28,720 --> 00:02:32,000
network should be

00:02:29,760 --> 00:02:33,680
transparent to applications and when

00:02:32,000 --> 00:02:34,239
network and application problems do

00:02:33,680 --> 00:02:36,000
occur

00:02:34,239 --> 00:02:38,640
should be easy to determine the source

00:02:36,000 --> 00:02:38,640
of the problem

00:02:38,720 --> 00:02:42,480
so this uh you know porting onward to

00:02:40,640 --> 00:02:43,280
windows is basically another step in

00:02:42,480 --> 00:02:45,680
line with

00:02:43,280 --> 00:02:47,040
the envoy's project mission of making

00:02:45,680 --> 00:02:48,000
the network transparent to any

00:02:47,040 --> 00:02:50,480
application

00:02:48,000 --> 00:02:53,040
regardless of language architecture or

00:02:50,480 --> 00:02:55,840
operating system

00:02:53,040 --> 00:02:58,239
being able to reuse and leverage

00:02:55,840 --> 00:03:00,480
existing investments for envoy on linux

00:02:58,239 --> 00:03:01,680
and transferring that knowledge and

00:03:00,480 --> 00:03:04,480
training

00:03:01,680 --> 00:03:05,440
to envoy for windows makes the overall

00:03:04,480 --> 00:03:07,680
system and

00:03:05,440 --> 00:03:09,840
architecture simpler and easier to

00:03:07,680 --> 00:03:11,440
manage for organizations

00:03:09,840 --> 00:03:13,519
essentially you know you don't need to

00:03:11,440 --> 00:03:14,959
train personnel for multiple solutions

00:03:13,519 --> 00:03:16,959
that are contingent on

00:03:14,959 --> 00:03:19,840
which operating system you're running

00:03:16,959 --> 00:03:19,840
for your apps

00:03:19,920 --> 00:03:23,680
uh also of note is of course the rich

00:03:22,480 --> 00:03:25,760
feature set so

00:03:23,680 --> 00:03:27,200
getting on way to compile and run

00:03:25,760 --> 00:03:29,680
natively on windows

00:03:27,200 --> 00:03:30,799
is only going to make it possible uh for

00:03:29,680 --> 00:03:32,640
the project to deliver

00:03:30,799 --> 00:03:35,440
value through its rich features to

00:03:32,640 --> 00:03:35,440
windows as well

00:03:36,239 --> 00:03:39,440
envoy is also becoming an industry

00:03:38,480 --> 00:03:42,480
standard

00:03:39,440 --> 00:03:43,680
thanks to its extensibility plugable

00:03:42,480 --> 00:03:46,080
architecture with

00:03:43,680 --> 00:03:47,200
clever concepts and its usage in service

00:03:46,080 --> 00:03:49,680
mesh

00:03:47,200 --> 00:03:51,680
support for envoy on another operating

00:03:49,680 --> 00:03:54,640
system is only going to strengthen that

00:03:51,680 --> 00:03:54,640
position further

00:03:55,280 --> 00:04:01,360
so project growth the growth benefits

00:03:58,000 --> 00:04:03,200
are twofold i would say not only will

00:04:01,360 --> 00:04:05,040
you know will this effort grow the

00:04:03,200 --> 00:04:07,680
number of proxies available on

00:04:05,040 --> 00:04:08,319
the windows ecosystem but the porting

00:04:07,680 --> 00:04:11,200
envoy

00:04:08,319 --> 00:04:12,560
to another os is going to lower the

00:04:11,200 --> 00:04:14,799
barrier to entry for

00:04:12,560 --> 00:04:18,639
contribution and usage as well causing

00:04:14,799 --> 00:04:18,639
the android project itself to grow

00:04:19,600 --> 00:04:24,400
so let's take a look at the history and

00:04:21,840 --> 00:04:26,320
how we got to the alpha stage

00:04:24,400 --> 00:04:27,520
basically this effort started in july

00:04:26,320 --> 00:04:29,199
00:04:27,520 --> 00:04:31,199
where there were meetings between vmware

00:04:29,199 --> 00:04:34,000
and microsoft to essentially

00:04:31,199 --> 00:04:36,800
plan and look at what it takes to bring

00:04:34,000 --> 00:04:40,240
and compile envoy on windows

00:04:36,800 --> 00:04:42,479
you know after that in 2018 bazel was

00:04:40,240 --> 00:04:44,080
identified as the unified build system

00:04:42,479 --> 00:04:47,360
it was a little bit of a setback

00:04:44,080 --> 00:04:48,800
because or bazel had issues compiling on

00:04:47,360 --> 00:04:50,639
windows so there were some patches

00:04:48,800 --> 00:04:53,440
needed to get that working

00:04:50,639 --> 00:04:53,919
this took a little bit of time but in

00:04:53,440 --> 00:04:56,720
march

00:04:53,919 --> 00:04:57,840
2020 there was you know windows was

00:04:56,720 --> 00:05:00,880
integrated into the

00:04:57,840 --> 00:05:04,720
envoy ci build pipeline and building

00:05:00,880 --> 00:05:06,560
envoy.exe which was a major milestone

00:05:04,720 --> 00:05:08,400
since then there were a number of

00:05:06,560 --> 00:05:11,440
performance improvements

00:05:08,400 --> 00:05:12,800
and you know additional testing that we

00:05:11,440 --> 00:05:14,960
enabled

00:05:12,800 --> 00:05:16,479
that gave us the the basically the

00:05:14,960 --> 00:05:19,199
confidence needed to

00:05:16,479 --> 00:05:21,680
sign off on an alpha release for envoy

00:05:19,199 --> 00:05:21,680
on windows

00:05:22,960 --> 00:05:27,280
so now that we're here we have a alpha

00:05:26,080 --> 00:05:30,400
for windows

00:05:27,280 --> 00:05:33,520
what does that actually mean so

00:05:30,400 --> 00:05:36,720
that means that envoy is supported on

00:05:33,520 --> 00:05:38,320
is natively supported on on windows so

00:05:36,720 --> 00:05:39,919
it's not targeting

00:05:38,320 --> 00:05:42,400
you know some windows subsystem for

00:05:39,919 --> 00:05:43,280
linux or something similar like that it

00:05:42,400 --> 00:05:46,320
is running on

00:05:43,280 --> 00:05:48,320
windows itself uh there are no

00:05:46,320 --> 00:05:51,120
uh envoy executables on windows yet

00:05:48,320 --> 00:05:53,840
however we're working on that

00:05:51,120 --> 00:05:55,039
so currently the expectation is that

00:05:53,840 --> 00:05:58,240
users need to

00:05:55,039 --> 00:05:59,680
build the project from master uh the

00:05:58,240 --> 00:06:01,919
alpha also means that we're still

00:05:59,680 --> 00:06:03,840
soliciting feedback from our users

00:06:01,919 --> 00:06:06,080
you know we expect that users will run

00:06:03,840 --> 00:06:08,720
into builder usage issues

00:06:06,080 --> 00:06:09,759
and you know we will be trying github

00:06:08,720 --> 00:06:12,319
frequently and

00:06:09,759 --> 00:06:14,080
looking at you know what are the the top

00:06:12,319 --> 00:06:16,160
pain points that are being reported by

00:06:14,080 --> 00:06:18,080
our users

00:06:16,160 --> 00:06:19,680
that being said even though we are

00:06:18,080 --> 00:06:23,520
trying issues

00:06:19,680 --> 00:06:25,919
there's no formal agreement that this is

00:06:23,520 --> 00:06:28,000
going to be supported for production

00:06:25,919 --> 00:06:30,400
usage basically in its current state of

00:06:28,000 --> 00:06:32,960
alpha

00:06:30,400 --> 00:06:34,000
so how do you get started so there are a

00:06:32,960 --> 00:06:36,639
few requirements

00:06:34,000 --> 00:06:39,360
uh the minimum windows version needs to

00:06:36,639 --> 00:06:40,960
be a version 2019 or above

00:06:39,360 --> 00:06:43,039
uh you need to set up a build

00:06:40,960 --> 00:06:45,120
environment using bazel

00:06:43,039 --> 00:06:47,120
and you need to have some familiarity

00:06:45,120 --> 00:06:48,800
basically the command shell or

00:06:47,120 --> 00:06:51,360
the shell that you're using to build

00:06:48,800 --> 00:06:54,400
envoy um

00:06:51,360 --> 00:06:55,919
also of note is that there are some

00:06:54,400 --> 00:06:58,080
this there are some features and

00:06:55,919 --> 00:06:58,560
extensions that are disabled since we're

00:06:58,080 --> 00:07:01,919
still in

00:06:58,560 --> 00:07:02,960
alpha um you know we expect to enable

00:07:01,919 --> 00:07:06,479
the relevant ones

00:07:02,960 --> 00:07:08,880
before a beta or ga release um you know

00:07:06,479 --> 00:07:10,160
for example a signal handling or process

00:07:08,880 --> 00:07:11,759
life cycle control

00:07:10,160 --> 00:07:13,919
is something that we will be looking at

00:07:11,759 --> 00:07:14,880
as well as looking at the tracing

00:07:13,919 --> 00:07:16,880
extensions

00:07:14,880 --> 00:07:18,160
however there might be some features

00:07:16,880 --> 00:07:21,599
that we find

00:07:18,160 --> 00:07:24,720
will need to be disabled

00:07:21,599 --> 00:07:26,400
permanently such as hot restart so

00:07:24,720 --> 00:07:28,400
we will be assessing those and trying to

00:07:26,400 --> 00:07:29,199
enable as many of these as possible as

00:07:28,400 --> 00:07:32,960
we're

00:07:29,199 --> 00:07:36,000
iterating through beta and eventually

00:07:32,960 --> 00:07:39,120
aga release so for more details

00:07:36,000 --> 00:07:41,440
there is a few akms links here

00:07:39,120 --> 00:07:42,720
and they basically contain our alpha

00:07:41,440 --> 00:07:46,800
announcement blog post

00:07:42,720 --> 00:07:46,800
sample tutorial and an onboarding guide

00:07:47,919 --> 00:07:51,919
so to get started as i mentioned before

00:07:50,479 --> 00:07:54,240
you need to build

00:07:51,919 --> 00:07:55,440
envoy from the master branch this is

00:07:54,240 --> 00:07:57,440
actually

00:07:55,440 --> 00:07:59,199
considered release quality at all times

00:07:57,440 --> 00:08:00,800
because there's a lot of testing that

00:07:59,199 --> 00:08:03,840
goes on before

00:08:00,800 --> 00:08:05,680
code gets into that branch to get

00:08:03,840 --> 00:08:06,479
started there's a few build instructions

00:08:05,680 --> 00:08:08,720
basically on

00:08:06,479 --> 00:08:10,840
the envoy proxy site we've added windows

00:08:08,720 --> 00:08:13,280
instructions next to the linux building

00:08:10,840 --> 00:08:15,440
instructions there is also a docker

00:08:13,280 --> 00:08:20,400
image available as well if you want to

00:08:15,440 --> 00:08:20,400
build envoy on that so follow those urls

00:08:20,639 --> 00:08:24,080
one last gotcha tip would be that you

00:08:23,360 --> 00:08:26,000
have to be

00:08:24,080 --> 00:08:27,120
perhaps careful with the shell when

00:08:26,000 --> 00:08:30,000
invoking uh

00:08:27,120 --> 00:08:32,240
bazel on windows we have specifically

00:08:30,000 --> 00:08:34,000
tested the msys2 bash

00:08:32,240 --> 00:08:35,919
um but there are there are other shells

00:08:34,000 --> 00:08:37,120
like power fill and command there are

00:08:35,919 --> 00:08:39,919
different ways

00:08:37,120 --> 00:08:41,760
to compile only on windows and you know

00:08:39,919 --> 00:08:43,760
we're looking

00:08:41,760 --> 00:08:45,279
for feedback from the community to see

00:08:43,760 --> 00:08:45,839
how they behave and if there are any

00:08:45,279 --> 00:08:48,000
quirks

00:08:45,839 --> 00:08:50,880
although we we do expect that all of

00:08:48,000 --> 00:08:50,880
them should work

00:08:52,480 --> 00:08:59,440
so demo time the exciting part

00:08:55,839 --> 00:09:02,560
here's a diagram of our demo

00:08:59,440 --> 00:09:03,839
of envoy running in a sort of

00:09:02,560 --> 00:09:05,360
cloud-native

00:09:03,839 --> 00:09:07,839
common deployment scenario that you

00:09:05,360 --> 00:09:10,959
might see in something like kubernetes

00:09:07,839 --> 00:09:12,640
we have a front-end envoy running in a

00:09:10,959 --> 00:09:15,360
docker container

00:09:12,640 --> 00:09:16,640
set up with docker compose that is

00:09:15,360 --> 00:09:17,839
configured with a listener that's

00:09:16,640 --> 00:09:21,839
serving tls

00:09:17,839 --> 00:09:24,080
and two upstream clusters

00:09:21,839 --> 00:09:25,279
represent two two different versions of

00:09:24,080 --> 00:09:28,000
an application

00:09:25,279 --> 00:09:29,760
uh one of them is an app that serves an

00:09:28,000 --> 00:09:31,680
image of a dog the other one is an app

00:09:29,760 --> 00:09:34,560
that serves an image of a cat

00:09:31,680 --> 00:09:34,959
um and we've considered configure this

00:09:34,560 --> 00:09:38,880
uh

00:09:34,959 --> 00:09:41,440
scenario to have mtls between

00:09:38,880 --> 00:09:42,560
the front-end envoy and the back-end

00:09:41,440 --> 00:09:44,560
services

00:09:42,560 --> 00:09:46,240
and all of the configuration of the

00:09:44,560 --> 00:09:50,080
listeners and clusters

00:09:46,240 --> 00:09:53,680
is set up to be dynamically updatable

00:09:50,080 --> 00:09:55,920
with envoy's ability to

00:09:53,680 --> 00:09:57,120
wash file events and update

00:09:55,920 --> 00:09:59,839
configuration

00:09:57,120 --> 00:10:00,720
accordingly so this might be something

00:09:59,839 --> 00:10:03,360
that you could see

00:10:00,720 --> 00:10:05,440
in a in a club as i said a cloud native

00:10:03,360 --> 00:10:08,480
deployment scenario you have

00:10:05,440 --> 00:10:11,120
a sidecar envoy sitting next to your

00:10:08,480 --> 00:10:13,839
application process

00:10:11,120 --> 00:10:15,040
proxying traffic and serving tls and

00:10:13,839 --> 00:10:17,440
allowing you to

00:10:15,040 --> 00:10:19,680
encrypt all the traffic trafficking

00:10:17,440 --> 00:10:21,600
flight in your in your network

00:10:19,680 --> 00:10:23,360
of course you could you would not have

00:10:21,600 --> 00:10:25,200
this on a single host but you would run

00:10:23,360 --> 00:10:27,279
this across many hosts in

00:10:25,200 --> 00:10:28,959
a kubernetes cluster across multiple

00:10:27,279 --> 00:10:32,160
worker nodes

00:10:28,959 --> 00:10:35,120
and so let's dive into it let's

00:10:32,160 --> 00:10:35,120
see this actually working

00:10:36,480 --> 00:10:40,399
all right so for this demo we have a

00:10:38,720 --> 00:10:43,920
windows server

00:10:40,399 --> 00:10:47,279
2019 instance in google cloud and

00:10:43,920 --> 00:10:50,000
we have a vs code session connected to

00:10:47,279 --> 00:10:52,800
that over ssh

00:10:50,000 --> 00:10:53,360
so we're editing some files on that on

00:10:52,800 --> 00:10:55,760
that

00:10:53,360 --> 00:10:57,839
remote server and here we have the

00:10:55,760 --> 00:11:01,279
docker compose setup for

00:10:57,839 --> 00:11:02,560
our demo um you can see the service

00:11:01,279 --> 00:11:04,880
configuration for the

00:11:02,560 --> 00:11:05,760
the front envoy proxy we've got some

00:11:04,880 --> 00:11:08,320
ports that we're

00:11:05,760 --> 00:11:09,279
exposing to that windows host as well as

00:11:08,320 --> 00:11:11,440
some mounted

00:11:09,279 --> 00:11:12,880
um blind mounted directories that are

00:11:11,440 --> 00:11:15,680
going to be inside that service

00:11:12,880 --> 00:11:16,880
container similarly we have a similar

00:11:15,680 --> 00:11:18,880
setup for the

00:11:16,880 --> 00:11:22,560
dog service and the cat service that

00:11:18,880 --> 00:11:26,079
will be our two upstream services

00:11:22,560 --> 00:11:29,200
to access the demo from our

00:11:26,079 --> 00:11:31,519
local workstation we've got some uh

00:11:29,200 --> 00:11:33,120
forwarded ports set up in our vs code

00:11:31,519 --> 00:11:36,720
ssh session

00:11:33,120 --> 00:11:40,839
so let's bring up the demo

00:11:36,720 --> 00:11:45,920
we can do a docker compose up

00:11:40,839 --> 00:11:45,920
detach to get our services running

00:11:46,640 --> 00:11:51,200
and just check that they're running

00:11:49,600 --> 00:11:52,800
docker compose ps

00:11:51,200 --> 00:11:54,320
all right everything's up and running

00:11:52,800 --> 00:11:59,040
and happy

00:11:54,320 --> 00:11:59,040
and let's take a look at our

00:12:00,880 --> 00:12:04,480
uh service all right we got a picture of

00:12:03,279 --> 00:12:06,560
a dog

00:12:04,480 --> 00:12:08,240
and then when we refresh sometimes we

00:12:06,560 --> 00:12:10,079
get a picture of a cat

00:12:08,240 --> 00:12:11,440
so we've got traffic routing between

00:12:10,079 --> 00:12:15,279
these two

00:12:11,440 --> 00:12:19,279
services and we can also take a look at

00:12:15,279 --> 00:12:21,839
the admin endpoint for this front proxy

00:12:19,279 --> 00:12:21,839
envoy

00:12:23,440 --> 00:12:26,720
um so we can take a look at the ad

00:12:25,519 --> 00:12:27,760
interface this is what you would

00:12:26,720 --> 00:12:29,279
typically expect

00:12:27,760 --> 00:12:31,040
from envoy when you're looking at the

00:12:29,279 --> 00:12:32,560
admin api

00:12:31,040 --> 00:12:34,399
we can look at the search that we've

00:12:32,560 --> 00:12:38,639
configured

00:12:34,399 --> 00:12:40,560
on the this front envoy proxy

00:12:38,639 --> 00:12:41,839
we can look at the status of the

00:12:40,560 --> 00:12:43,760
clusters

00:12:41,839 --> 00:12:45,519
everything that you would typically

00:12:43,760 --> 00:12:47,680
expect from

00:12:45,519 --> 00:12:49,360
the convoy admin interface look at the

00:12:47,680 --> 00:12:52,720
stats we can see

00:12:49,360 --> 00:12:54,959
that we've got a few requests

00:12:52,720 --> 00:12:55,920
completed for each of our upstream

00:12:54,959 --> 00:12:57,680
services

00:12:55,920 --> 00:13:00,000
so everything looks good this is what

00:12:57,680 --> 00:13:01,839
you would typically expect

00:13:00,000 --> 00:13:03,519
and nothing different on windows from

00:13:01,839 --> 00:13:06,320
what you would see on your

00:13:03,519 --> 00:13:08,880
envoy instance on linux or other

00:13:06,320 --> 00:13:08,880
platforms

00:13:09,120 --> 00:13:17,040
so let's show an example of

00:13:12,639 --> 00:13:20,160
envoys dynamic config updating working

00:13:17,040 --> 00:13:23,760
we can take a look at our

00:13:20,160 --> 00:13:26,880
listener filter configuration

00:13:23,760 --> 00:13:30,480
for our or sorry our cluster

00:13:26,880 --> 00:13:32,959
configuration for our front envoy and

00:13:30,480 --> 00:13:34,320
we can see here that we have a transport

00:13:32,959 --> 00:13:37,360
socket configured

00:13:34,320 --> 00:13:39,600
with a tls context so it's the this

00:13:37,360 --> 00:13:43,680
envelope is going to

00:13:39,600 --> 00:13:45,680
serve uh present these this cert

00:13:43,680 --> 00:13:46,800
upstream to any client-sided contacts

00:13:45,680 --> 00:13:49,360
and it's also going to

00:13:46,800 --> 00:13:50,720
do some validation of the cert that the

00:13:49,360 --> 00:13:53,199
upstream

00:13:50,720 --> 00:13:55,279
presents similarly for the other cluster

00:13:53,199 --> 00:13:57,680
configuration

00:13:55,279 --> 00:13:59,120
this is so we can start to get mtls

00:13:57,680 --> 00:14:03,120
between our

00:13:59,120 --> 00:14:06,160
front envoy and our back-end service

00:14:03,120 --> 00:14:07,040
and similarly on the upstream envoy

00:14:06,160 --> 00:14:09,680
configuration

00:14:07,040 --> 00:14:10,240
for the services we have uh the same

00:14:09,680 --> 00:14:13,519
thing

00:14:10,240 --> 00:14:16,720
this time in the downstream tls contacts

00:14:13,519 --> 00:14:19,920
on the listener uh we're presenting the

00:14:16,720 --> 00:14:21,920
certs and validating the ca of the

00:14:19,920 --> 00:14:25,440
search presented to

00:14:21,920 --> 00:14:27,519
the upstream envoy so just to

00:14:25,440 --> 00:14:29,760
show an example of the dynamic

00:14:27,519 --> 00:14:33,040
configuration it starts updating

00:14:29,760 --> 00:14:35,440
what happens when we update the

00:14:33,040 --> 00:14:36,320
uh upstream envoy with an invalid serve

00:14:35,440 --> 00:14:39,440
what happens

00:14:36,320 --> 00:14:39,680
are we actually doing any validation of

00:14:39,440 --> 00:14:42,240
the

00:14:39,680 --> 00:14:43,600
search that are being presented here so

00:14:42,240 --> 00:14:45,519
let's make a copy

00:14:43,600 --> 00:14:46,800
of this listener's file so that we can

00:14:45,519 --> 00:14:50,880
update it

00:14:46,800 --> 00:14:52,959
so copy we serve this envoy config

00:14:50,880 --> 00:14:59,839
listeners

00:14:52,959 --> 00:14:59,839
to a temporary file

00:15:00,800 --> 00:15:06,800
and let's edit and instead of

00:15:04,000 --> 00:15:12,480
this cert we're going to pass in an

00:15:06,800 --> 00:15:16,639
invalid search

00:15:12,480 --> 00:15:21,040
and then do a move operation

00:15:16,639 --> 00:15:24,000
to get envoy to notice this

00:15:21,040 --> 00:15:24,000
config update

00:15:24,880 --> 00:15:30,720
all right so that update should get

00:15:27,839 --> 00:15:33,759
picked up by envoy and when we

00:15:30,720 --> 00:15:36,399
go to query our services

00:15:33,759 --> 00:15:38,959
eventually all right once the cache is

00:15:36,399 --> 00:15:42,320
cleared out we get a

00:15:38,959 --> 00:15:45,440
error a tls error

00:15:42,320 --> 00:15:47,360
from the front envoy saying that the

00:15:45,440 --> 00:15:50,880
certificate verification

00:15:47,360 --> 00:15:51,519
failed so we can see that that half of

00:15:50,880 --> 00:15:55,839
the

00:15:51,519 --> 00:16:00,079
mutual tls is is working

00:15:55,839 --> 00:16:03,040
we're not trusting the the ca that

00:16:00,079 --> 00:16:04,320
the certificates were generated from so

00:16:03,040 --> 00:16:09,519
that's

00:16:04,320 --> 00:16:12,560
great and let's update back to

00:16:09,519 --> 00:16:14,150
original state and do a

00:16:12,560 --> 00:16:16,000
fix our

00:16:14,150 --> 00:16:18,079
[Music]

00:16:16,000 --> 00:16:19,040
configuration here so we'll be able to

00:16:18,079 --> 00:16:23,199
get

00:16:19,040 --> 00:16:25,600
our dogs and cats back and now let's

00:16:23,199 --> 00:16:27,440
demonstrate the other side of the mtls

00:16:25,600 --> 00:16:31,920
handshake and

00:16:27,440 --> 00:16:34,560
give the upstream envoy

00:16:31,920 --> 00:16:37,199
make it do some more strict validation

00:16:34,560 --> 00:16:40,240
of the uh

00:16:37,199 --> 00:16:40,880
cert that the uh front crafty envoy is

00:16:40,240 --> 00:16:43,519
presenting

00:16:40,880 --> 00:16:44,959
so here we'll match some subject

00:16:43,519 --> 00:16:47,440
alternate names we'll match and

00:16:44,959 --> 00:16:48,160
have an exact match and we'll match the

00:16:47,440 --> 00:16:51,600
name foo

00:16:48,160 --> 00:16:54,800
which we served downstream

00:16:51,600 --> 00:16:55,600
envoy is presenting is is not does not

00:16:54,800 --> 00:16:58,240
have in it

00:16:55,600 --> 00:16:59,680
so let's again do a move to get the

00:16:58,240 --> 00:17:03,440
config update

00:16:59,680 --> 00:17:06,160
and we'll be able to see

00:17:03,440 --> 00:17:07,600
a different error um a certificate

00:17:06,160 --> 00:17:09,679
unknown error coming from

00:17:07,600 --> 00:17:11,360
the upstream so it does not able to

00:17:09,679 --> 00:17:14,400
verify that certificate

00:17:11,360 --> 00:17:18,079
so mtls

00:17:14,400 --> 00:17:21,520
an important thing in securing

00:17:18,079 --> 00:17:25,120
identity and encryption and

00:17:21,520 --> 00:17:27,439
an important feature that windows

00:17:25,120 --> 00:17:28,720
apps will be able to transparently and

00:17:27,439 --> 00:17:31,120
windows app deployments will

00:17:28,720 --> 00:17:32,720
transparently be able to take advantage

00:17:31,120 --> 00:17:35,919
of if their envoy

00:17:32,720 --> 00:17:39,120
sort of mesh is configured

00:17:35,919 --> 00:17:41,679
with this to be able to verify identity

00:17:39,120 --> 00:17:45,200
of upstream and downstream services

00:17:41,679 --> 00:17:45,200
secure traffic

00:17:45,679 --> 00:17:49,200
so for this demo we'll be showing envoy

00:17:48,000 --> 00:17:52,240
on a basic

00:17:49,200 --> 00:17:54,000
windows vm and uh we'll be running onway

00:17:52,240 --> 00:17:57,280
as a edge or front proxy

00:17:54,000 --> 00:17:59,280
on the windows server 2019 machine and

00:17:57,280 --> 00:18:00,320
showing some basic onboard concepts in

00:17:59,280 --> 00:18:04,799
action

00:18:00,320 --> 00:18:04,799
using two super simple demo apps

00:18:07,840 --> 00:18:12,559
so what i have here is my windows server

00:18:10,320 --> 00:18:15,520
machine

00:18:12,559 --> 00:18:17,280
and i have two apps very creatively

00:18:15,520 --> 00:18:20,080
called app one and app two listening on

00:18:17,280 --> 00:18:23,919
port 8080 and 89.

00:18:20,080 --> 00:18:26,640
just to show them click browse website

00:18:23,919 --> 00:18:28,559
this is the first app just says hello

00:18:26,640 --> 00:18:30,799
from app app1

00:18:28,559 --> 00:18:32,960
and the other app is saying hello from

00:18:30,799 --> 00:18:32,960
app

00:18:36,000 --> 00:18:39,360
so what i have here now is a vs code

00:18:38,480 --> 00:18:41,280
window that's

00:18:39,360 --> 00:18:42,480
connected remotely to my windows server

00:18:41,280 --> 00:18:45,679
machine

00:18:42,480 --> 00:18:48,720
and i have some very basic uh yeah an

00:18:45,679 --> 00:18:51,280
envoy.yaml configuration file

00:18:48,720 --> 00:18:52,559
you know with some logs being saved and

00:18:51,280 --> 00:18:55,520
collected

00:18:52,559 --> 00:18:58,160
and dynamic resources defined for

00:18:55,520 --> 00:19:00,160
clusters and listeners

00:18:58,160 --> 00:19:02,559
so let's take a look at the yaml that i

00:19:00,160 --> 00:19:07,039
have right now

00:19:02,559 --> 00:19:09,919
for the cts.yaml i have a very basic

00:19:07,039 --> 00:19:10,320
round-robin load balancing policy and

00:19:09,919 --> 00:19:13,760
that's

00:19:10,320 --> 00:19:16,080
uh balancing incoming traffic across

00:19:13,760 --> 00:19:17,760
the two instances of my app one

00:19:16,080 --> 00:19:22,960
listening app one on

00:19:17,760 --> 00:19:26,160
8080 and app 2 listening on port 8090

00:19:22,960 --> 00:19:30,480
and for the listeners i have a

00:19:26,160 --> 00:19:33,200
very basic http listener

00:19:30,480 --> 00:19:33,919
you know starting on voyage on port 80

00:19:33,200 --> 00:19:37,039
and

00:19:33,919 --> 00:19:39,919
accepting and routing all the requests

00:19:37,039 --> 00:19:41,200
to the backend cluster very very super

00:19:39,919 --> 00:19:44,960
simple

00:19:41,200 --> 00:19:47,360
demonstration of envoy on windows server

00:19:44,960 --> 00:19:53,280
let's show this i'll be starting envoy

00:19:47,360 --> 00:19:55,360
applying the envoy.yaml that i created

00:19:53,280 --> 00:19:57,120
so we can see here in the logs being

00:19:55,360 --> 00:20:00,320
printed that

00:19:57,120 --> 00:20:01,039
we have added one cluster our backend

00:20:00,320 --> 00:20:03,159
cluster

00:20:01,039 --> 00:20:04,799
and we have added a listener called

00:20:03,159 --> 00:20:08,720
listener.http

00:20:04,799 --> 00:20:11,520
so now we should be able to connect

00:20:08,720 --> 00:20:13,280
and see this load balancing policy in

00:20:11,520 --> 00:20:16,480
action

00:20:13,280 --> 00:20:16,960
so let me refresh my window here and we

00:20:16,480 --> 00:20:20,080
can see

00:20:16,960 --> 00:20:22,480
hello from app one

00:20:20,080 --> 00:20:24,480
refresh the window we are showing the

00:20:22,480 --> 00:20:27,520
load balancing policy since

00:20:24,480 --> 00:20:27,919
we're bouncing between the two instances

00:20:27,520 --> 00:20:31,360
or

00:20:27,919 --> 00:20:34,159
of the application app one and up two

00:20:31,360 --> 00:20:36,799
so one thing that is missing here

00:20:34,159 --> 00:20:36,799
however is

00:20:36,880 --> 00:20:41,440
basically that you know our connection

00:20:38,559 --> 00:20:45,039
is unencrypted

00:20:41,440 --> 00:20:47,200
you know we're using hdv 1.1

00:20:45,039 --> 00:20:50,480
and this is something that onward can

00:20:47,200 --> 00:20:53,039
also help us out with very easily

00:20:50,480 --> 00:20:55,039
so let's switch back to vs code to

00:20:53,039 --> 00:20:58,400
update the configuration so we have

00:20:55,039 --> 00:21:01,760
proper encryption so i'll be

00:20:58,400 --> 00:21:05,520
updating my i'll listeners

00:21:01,760 --> 00:21:08,600
just copy and pasting them so

00:21:05,520 --> 00:21:10,640
we have our new listener here call it

00:21:08,600 --> 00:21:15,120
https

00:21:10,640 --> 00:21:18,240
update the port value from edt4 for free

00:21:15,120 --> 00:21:22,240
and i also have a circ that i generated

00:21:18,240 --> 00:21:24,240
earlier and i'll be pointing

00:21:22,240 --> 00:21:25,600
one way to the cert that i generate

00:21:24,240 --> 00:21:28,720
configured

00:21:25,600 --> 00:21:31,840
website essentially so let's

00:21:28,720 --> 00:21:31,840
paste that in

00:21:32,559 --> 00:21:39,200
we can see transport sockets enabling

00:21:35,679 --> 00:21:42,840
tls pointing it to the certificate chain

00:21:39,200 --> 00:21:47,679
private key and we're also enabling

00:21:42,840 --> 00:21:51,200
h2 save this

00:21:47,679 --> 00:21:51,200
update configuration

00:21:55,679 --> 00:21:58,240
audio

00:21:58,799 --> 00:22:02,080
so we can see in the logs that our

00:22:01,520 --> 00:22:05,760
update

00:22:02,080 --> 00:22:08,480
was accepted by envoy and it has added a

00:22:05,760 --> 00:22:12,720
new listener https

00:22:08,480 --> 00:22:18,720
so going back to our application

00:22:12,720 --> 00:22:18,720
we should be able to go to https

00:22:18,960 --> 00:22:23,520
so without any changes to our app and

00:22:21,520 --> 00:22:24,960
thanks to unvoice dynamic configuration

00:22:23,520 --> 00:22:28,400
update

00:22:24,960 --> 00:22:30,799
we now have uh you know encrypted

00:22:28,400 --> 00:22:34,080
connection using tls 1.3

00:22:30,799 --> 00:22:35,280
and we have also enabled h2 for our

00:22:34,080 --> 00:22:39,120
connection

00:22:35,280 --> 00:22:42,799
so this is showing how easy it is to

00:22:39,120 --> 00:22:45,360
configure and add security and tls to

00:22:42,799 --> 00:22:47,039
an existing website without having to do

00:22:45,360 --> 00:22:49,120
any changes to the underlying

00:22:47,039 --> 00:22:52,720
apps essentially and do this in a

00:22:49,120 --> 00:22:52,720
dynamic and convenient way

00:22:53,039 --> 00:22:58,799
so what's next for envoy on windows uh

00:22:56,480 --> 00:22:59,520
we're planning on providing beta release

00:22:58,799 --> 00:23:02,880
binaries

00:22:59,520 --> 00:23:03,919
for envoy on windows in the 116 release

00:23:02,880 --> 00:23:05,840
range

00:23:03,919 --> 00:23:07,520
you can follow the github milestone

00:23:05,840 --> 00:23:09,679
that's linked there

00:23:07,520 --> 00:23:11,039
um some specific plan improvements that

00:23:09,679 --> 00:23:12,480
we have are to

00:23:11,039 --> 00:23:14,799
enable some of the features and

00:23:12,480 --> 00:23:18,400
extensions that are currently disabled

00:23:14,799 --> 00:23:19,840
um through any user feedback and fix any

00:23:18,400 --> 00:23:23,840
rough edges that we um

00:23:19,840 --> 00:23:26,880
get there improve event loop performance

00:23:23,840 --> 00:23:28,159
and improve process lifecycle control so

00:23:26,880 --> 00:23:31,919
some of the integration with

00:23:28,159 --> 00:23:34,080
the windows service control manager

00:23:31,919 --> 00:23:36,320
in addition uh we're planning on making

00:23:34,080 --> 00:23:38,559
a generally available release

00:23:36,320 --> 00:23:39,360
somewhere in the one envelope 117

00:23:38,559 --> 00:23:40,960
release range

00:23:39,360 --> 00:23:42,720
that should be in quarter one or quarter

00:23:40,960 --> 00:23:45,760
two of next year

00:23:42,720 --> 00:23:47,760
um and farther in the future some

00:23:45,760 --> 00:23:49,840
windows features that are going to be

00:23:47,760 --> 00:23:52,320
available in the

00:23:49,840 --> 00:23:54,400
release of windows server and that comes

00:23:52,320 --> 00:23:57,440
in the first half of 2021

00:23:54,400 --> 00:23:58,080
will enable some new new things on with

00:23:57,440 --> 00:24:02,080
envoy

00:23:58,080 --> 00:24:03,919
on windows so routing traffic

00:24:02,080 --> 00:24:05,440
egress traffic from your application

00:24:03,919 --> 00:24:07,679
through envoy

00:24:05,440 --> 00:24:08,559
for use in the service mesh similar to

00:24:07,679 --> 00:24:11,039
how

00:24:08,559 --> 00:24:11,840
service mesh implementations use ip

00:24:11,039 --> 00:24:13,919
tables

00:24:11,840 --> 00:24:15,600
on linux that should be available in

00:24:13,919 --> 00:24:18,320
that release as well as

00:24:15,600 --> 00:24:20,080
improved windows sdks with new socket

00:24:18,320 --> 00:24:24,720
apis that support

00:24:20,080 --> 00:24:24,720
edge triggering for file system events

00:24:25,279 --> 00:24:31,279
so the windows developer community

00:24:28,640 --> 00:24:32,000
really would like to lean on the

00:24:31,279 --> 00:24:34,640
community to

00:24:32,000 --> 00:24:35,679
help us get to a ga release so how can

00:24:34,640 --> 00:24:40,080
you contribute

00:24:35,679 --> 00:24:42,400
um as you start using envoy on windows

00:24:40,080 --> 00:24:43,840
you may run into some known issues so

00:24:42,400 --> 00:24:46,720
the area windows tag

00:24:43,840 --> 00:24:49,120
on the github issue tracker for envoy is

00:24:46,720 --> 00:24:51,520
a great place to start

00:24:49,120 --> 00:24:53,840
look at known issues report new issues

00:24:51,520 --> 00:24:56,080
and of course prs are always welcome

00:24:53,840 --> 00:24:56,960
for documentation improvements as well

00:24:56,080 --> 00:25:00,080
as

00:24:56,960 --> 00:25:01,440
fixes and feature improvements

00:25:00,080 --> 00:25:03,760
um if you want to get some more

00:25:01,440 --> 00:25:07,840
one-to-one contact with the

00:25:03,760 --> 00:25:09,760
current crop of contributors on windows

00:25:07,840 --> 00:25:12,720
reach out to the envoy windows dev

00:25:09,760 --> 00:25:15,520
channel on the onboard slack workspace

00:25:12,720 --> 00:25:16,960
in addition we have a weekly community

00:25:15,520 --> 00:25:17,760
meeting specifically for windows

00:25:16,960 --> 00:25:20,799
development

00:25:17,760 --> 00:25:22,080
where we coordinate work and

00:25:20,799 --> 00:25:23,840
set the roadmap so if you want to get

00:25:22,080 --> 00:25:27,360
involved there

00:25:23,840 --> 00:25:30,559
definitely come to that meeting

00:25:27,360 --> 00:25:32,400
so finally uh we'd like to

00:25:30,559 --> 00:25:33,919
extend a huge shout out and special

00:25:32,400 --> 00:25:35,679
thank you to the contributors from

00:25:33,919 --> 00:25:36,640
microsoft vmware and the envoy

00:25:35,679 --> 00:25:38,799
maintainers

00:25:36,640 --> 00:25:41,200
that work tirelessly to make envoy on

00:25:38,799 --> 00:25:44,240
windows a reality

00:25:41,200 --> 00:25:46,640
and with that um thank you all for

00:25:44,240 --> 00:25:47,840
attending our presentation uh we hope it

00:25:46,640 --> 00:25:49,760
was informative

00:25:47,840 --> 00:25:52,000
um and we'd like to open it up for

00:25:49,760 --> 00:25:55,360
questions

00:25:52,000 --> 00:25:57,760
hey y'all if anyone has any questions uh

00:25:55,360 --> 00:26:00,559
please ask us now we have a few minutes

00:25:57,760 --> 00:26:00,559
potentially to

00:26:01,840 --> 00:26:11,840
answer any questions you guys have

00:26:33,840 --> 00:26:38,000
all right well it looks like we started

00:26:35,679 --> 00:26:41,360
a few minutes late so

00:26:38,000 --> 00:26:44,400
um we've already passed

00:26:41,360 --> 00:26:46,480
uh 1201 now so

00:26:44,400 --> 00:26:48,080
uh please let us know any questions you

00:26:46,480 --> 00:26:50,799
have in the in the chat

00:26:48,080 --> 00:26:51,440
and you can reach us on on slack as well

00:26:50,799 --> 00:26:54,240
we can

00:26:51,440 --> 00:26:56,400
relinquish the space so that the next

00:26:54,240 --> 00:27:00,000
session can start running

00:26:56,400 --> 00:27:00,000

YouTube URL: https://www.youtube.com/watch?v=f3DezuydHr4


