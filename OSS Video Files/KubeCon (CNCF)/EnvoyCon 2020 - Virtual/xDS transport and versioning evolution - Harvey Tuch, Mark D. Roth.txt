Title: xDS transport and versioning evolution - Harvey Tuch, Mark D. Roth
Publication date: 2020-10-21
Playlist: EnvoyCon 2020 - Virtual
Description: 
	xDS transport and versioning evolution - Harvey Tuch, Mark D. Roth

Envoy’s xDS APIs are the foundation for its control plane ecosystem. We are in the process of evolving them towards the Universal Data Plane API (UDPA), supporting clients beyond Envoy (e.g. Google’s gRPC libraries). We also continue to improve support for versioning in xDS and are following on from last year's introduction of major versions with minor/patch versions.

In the first part of this talk, we will dive into UDPA. We will focus on the next steps in the xDS transport protocol evolution. We will provide an introduction to a new URI-centric resource naming scheme and how this will allow for transport simplifications and elimination of technical debt in both Envoy and the control plane. We will also cover advanced use cases, such as federation, caching, control plane scalability and reliability wins.

In the second part of this talk, we will provide a recap on Envoy's existing API versioning story and discuss the implementation of minor/patch versioning for xDS resources. This incremental strategy is the plan-of-record for xDS, managing the trade-off between Envoy/xDS technical debt and control plane complexity/implementation cost.
Captions: 
	00:00:00,399 --> 00:00:04,400
hello oneboycon i'm harvey tuch and i

00:00:03,600 --> 00:00:07,600
work at

00:00:04,400 --> 00:00:08,720
google i uh i'm the tl of the envoy

00:00:07,600 --> 00:00:10,800
platform team

00:00:08,720 --> 00:00:13,280
and today i'm going to be co-presenting

00:00:10,800 --> 00:00:16,800
with mark roth a colleague of mine

00:00:13,280 --> 00:00:17,760
who leads the grpc c plus efforts at

00:00:16,800 --> 00:00:19,119
google

00:00:17,760 --> 00:00:21,199
and we're going to be talking about the

00:00:19,119 --> 00:00:22,640
future of xds in particular some of the

00:00:21,199 --> 00:00:24,720
changes around

00:00:22,640 --> 00:00:28,080
versioning and xts transport which are

00:00:24,720 --> 00:00:29,760
going to be landing over the coming year

00:00:28,080 --> 00:00:31,279
this talk is going to be in two parts

00:00:29,760 --> 00:00:33,760
the first part we're going to look at

00:00:31,279 --> 00:00:35,040
xds transport evolution and the next

00:00:33,760 --> 00:00:38,079
part will be on

00:00:35,040 --> 00:00:41,040
versioning so getting going with

00:00:38,079 --> 00:00:42,239
uh transport evolution i want to start

00:00:41,040 --> 00:00:44,000
the talk by exploring some of the

00:00:42,239 --> 00:00:46,559
limitations in the xds

00:00:44,000 --> 00:00:47,840
transports that exists today and in

00:00:46,559 --> 00:00:48,559
particular when we want to address some

00:00:47,840 --> 00:00:50,399
of the more

00:00:48,559 --> 00:00:52,480
sophisticated use cases that are coming

00:00:50,399 --> 00:00:54,160
down the pipe

00:00:52,480 --> 00:00:56,320
but before i do so i'd like to point out

00:00:54,160 --> 00:00:58,079
that actually the xds transport is

00:00:56,320 --> 00:01:00,480
pretty remarkable in that it's uh

00:00:58,079 --> 00:01:02,320
brought huge improvements to how envoy

00:01:00,480 --> 00:01:03,359
receives its configuration from control

00:01:02,320 --> 00:01:06,159
planes

00:01:03,359 --> 00:01:08,159
uh going back to 2017 all we had was

00:01:06,159 --> 00:01:10,159
polling based rest

00:01:08,159 --> 00:01:12,799
for xds delivery and that had

00:01:10,159 --> 00:01:14,200
significant issues with performance on

00:01:12,799 --> 00:01:17,040
control plane

00:01:14,200 --> 00:01:18,479
scalability and also for latency of

00:01:17,040 --> 00:01:20,960
updates and the

00:01:18,479 --> 00:01:23,040
versions uh xds transport for

00:01:20,960 --> 00:01:24,720
essentially a version pub sub

00:01:23,040 --> 00:01:26,720
scheme which we introduced since then

00:01:24,720 --> 00:01:27,520
has brought about huge improvements and

00:01:26,720 --> 00:01:30,400
it's working

00:01:27,520 --> 00:01:32,560
incredibly well today and so we want to

00:01:30,400 --> 00:01:35,200
evolve this forward incrementally

00:01:32,560 --> 00:01:37,040
without breaking the world and without

00:01:35,200 --> 00:01:38,720
affecting anyone who's using it today

00:01:37,040 --> 00:01:40,079
but at the same time we want to address

00:01:38,720 --> 00:01:41,439
some of these limitations which i'm

00:01:40,079 --> 00:01:44,479
going to talk about

00:01:41,439 --> 00:01:45,360
so what are these limitations uh so the

00:01:44,479 --> 00:01:47,520
first of these

00:01:45,360 --> 00:01:49,520
is that there's actually issues around

00:01:47,520 --> 00:01:52,320
cash ability of xds and so

00:01:49,520 --> 00:01:52,880
this impacts our xcss we want to scale

00:01:52,320 --> 00:01:55,360
it

00:01:52,880 --> 00:01:56,240
up to many many different endpoints and

00:01:55,360 --> 00:01:57,840
this could be

00:01:56,240 --> 00:01:59,600
for example an onboard mobile as

00:01:57,840 --> 00:02:01,520
depicted on this slide where we might

00:01:59,600 --> 00:02:02,799
have millions or tens or hundreds of

00:02:01,520 --> 00:02:05,200
millions of endpoints

00:02:02,799 --> 00:02:07,439
and we need a good story for how xts

00:02:05,200 --> 00:02:08,319
resources can be distributed and fanned

00:02:07,439 --> 00:02:09,920
out

00:02:08,319 --> 00:02:11,360
and there's this project called xds

00:02:09,920 --> 00:02:13,360
relay which uh

00:02:11,360 --> 00:02:15,840
it's just checking out which basically

00:02:13,360 --> 00:02:19,040
is building the first steps of this

00:02:15,840 --> 00:02:21,200
but to do this kind of caching and relay

00:02:19,040 --> 00:02:22,640
there are other issues and let's go

00:02:21,200 --> 00:02:24,239
through some of these the first is that

00:02:22,640 --> 00:02:26,560
the xcs resource things that

00:02:24,239 --> 00:02:27,920
exist today are just opaque strings and

00:02:26,560 --> 00:02:31,239
they're not really a unique

00:02:27,920 --> 00:02:35,040
cache key because they don't include um

00:02:31,239 --> 00:02:37,760
a bunch of useful contextual information

00:02:35,040 --> 00:02:38,959
which includes things like node id and

00:02:37,760 --> 00:02:41,680
metadata which are

00:02:38,959 --> 00:02:43,840
actually provided in the xds stream but

00:02:41,680 --> 00:02:45,200
out of band with the xts resource name

00:02:43,840 --> 00:02:47,120
so if you're trying to cache

00:02:45,200 --> 00:02:48,400
just on xcs resource name that's not

00:02:47,120 --> 00:02:51,440
sufficient

00:02:48,400 --> 00:02:53,519
and as a result uh even if you want to

00:02:51,440 --> 00:02:54,879
use something like traditional cdns with

00:02:53,519 --> 00:02:57,440
uh the xds http

00:02:54,879 --> 00:02:59,680
transport things don't work particularly

00:02:57,440 --> 00:03:02,319
well today

00:02:59,680 --> 00:03:03,840
the next major sort of next-gen use case

00:03:02,319 --> 00:03:05,920
is federation and this is when you want

00:03:03,840 --> 00:03:06,640
to have multiple control planes managing

00:03:05,920 --> 00:03:08,959
xds

00:03:06,640 --> 00:03:10,560
and today we have some limited supports

00:03:08,959 --> 00:03:11,760
for having more than one control plane

00:03:10,560 --> 00:03:14,319
with envoy

00:03:11,760 --> 00:03:15,120
but it's at a very coarse granularity

00:03:14,319 --> 00:03:16,640
and there's

00:03:15,120 --> 00:03:18,159
you can't like for example delegate a

00:03:16,640 --> 00:03:20,400
single route configuration to a

00:03:18,159 --> 00:03:22,159
different server and this kind of thing

00:03:20,400 --> 00:03:24,799
so in this world we want to think about

00:03:22,159 --> 00:03:27,200
well we've got multiple xds servers this

00:03:24,799 --> 00:03:29,440
might be in different clusters might be

00:03:27,200 --> 00:03:30,400
in different clouds might be on premise

00:03:29,440 --> 00:03:31,440
and so on

00:03:30,400 --> 00:03:33,200
we want to be able to provide

00:03:31,440 --> 00:03:35,120
fine-grained delegation of authority

00:03:33,200 --> 00:03:36,000
over resources and fail over between

00:03:35,120 --> 00:03:39,200
servers

00:03:36,000 --> 00:03:40,959
as resources as they come and go and

00:03:39,200 --> 00:03:42,480
ultimately what folks want to do

00:03:40,959 --> 00:03:44,080
probably as they scale up is

00:03:42,480 --> 00:03:46,560
disaggregate the control plane into a

00:03:44,080 --> 00:03:49,680
number of micro services which this sort

00:03:46,560 --> 00:03:51,280
of form of federation supports

00:03:49,680 --> 00:03:53,040
so today as i mentioned before we kind

00:03:51,280 --> 00:03:55,040
of lack some of the support um we have

00:03:53,040 --> 00:03:55,840
no explicit notion of what an authority

00:03:55,040 --> 00:03:58,480
is and

00:03:55,840 --> 00:04:00,400
sort of what a node in this graph that's

00:03:58,480 --> 00:04:02,400
where a drawing looks like

00:04:00,400 --> 00:04:04,799
um resource names i don't know they are

00:04:02,400 --> 00:04:06,799
opaque and non-cachable but they're also

00:04:04,799 --> 00:04:08,959
global and there's no way to qualify

00:04:06,799 --> 00:04:11,120
them by specific authorities or

00:04:08,959 --> 00:04:12,640
have each authority manage its own

00:04:11,120 --> 00:04:15,519
resource name space

00:04:12,640 --> 00:04:17,600
there's no support for redirections or

00:04:15,519 --> 00:04:19,680
failover alternatives and

00:04:17,600 --> 00:04:22,240
our existing conflict sources are pretty

00:04:19,680 --> 00:04:26,479
coarse-grained

00:04:22,240 --> 00:04:29,919
okay then there's the issue of

00:04:26,479 --> 00:04:32,000
collections so xds today really doesn't

00:04:29,919 --> 00:04:35,040
have a great distinction between

00:04:32,000 --> 00:04:38,160
singleton and collection resources

00:04:35,040 --> 00:04:39,280
so we would like there to be a better

00:04:38,160 --> 00:04:40,720
way of thinking about this

00:04:39,280 --> 00:04:43,280
a lot of the issues around this would

00:04:40,720 --> 00:04:44,960
surface well grpc

00:04:43,280 --> 00:04:47,680
and mark's got a great talk on grpc

00:04:44,960 --> 00:04:51,440
adopting xds we're switching to xds

00:04:47,680 --> 00:04:53,919
and in this effort became clear that

00:04:51,440 --> 00:04:56,560
there's a lot of uh strangeness about

00:04:53,919 --> 00:04:58,240
the corner cases that xds makes around

00:04:56,560 --> 00:05:00,240
collections which we would like to

00:04:58,240 --> 00:05:02,320
resolve and make work better and this

00:05:00,240 --> 00:05:03,520
really feeds into my final slide which

00:05:02,320 --> 00:05:05,199
is that we have

00:05:03,520 --> 00:05:07,039
quite a bit of accumulated technical

00:05:05,199 --> 00:05:08,560
data in xds which

00:05:07,039 --> 00:05:10,400
some of these things made sense at that

00:05:08,560 --> 00:05:12,560
time but as we've

00:05:10,400 --> 00:05:13,680
gone to sort of stretch and test the

00:05:12,560 --> 00:05:16,720
parameters of

00:05:13,680 --> 00:05:18,000
uh xds transport and its use it became

00:05:16,720 --> 00:05:20,800
apparent that

00:05:18,000 --> 00:05:21,600
there really are uh issues here which

00:05:20,800 --> 00:05:24,160
need um

00:05:21,600 --> 00:05:26,000
some mitigation and then we want to do

00:05:24,160 --> 00:05:26,400
this to simplify control planes make

00:05:26,000 --> 00:05:28,800
things

00:05:26,400 --> 00:05:30,160
easier to implement make it more robust

00:05:28,800 --> 00:05:32,000
and reliable

00:05:30,160 --> 00:05:33,280
and there are all these surprises i

00:05:32,000 --> 00:05:36,320
mentioned before the

00:05:33,280 --> 00:05:39,440
weird treatment of collections for lds

00:05:36,320 --> 00:05:41,520
and cds uh there's also the fact that we

00:05:39,440 --> 00:05:42,400
have multiple wire protocols effectively

00:05:41,520 --> 00:05:44,320
now for

00:05:42,400 --> 00:05:46,240
state of the world and delta we have

00:05:44,320 --> 00:05:47,759
this for issue with cylindrical aliases

00:05:46,240 --> 00:05:48,800
which we usually do especially with the

00:05:47,759 --> 00:05:50,800
hds so

00:05:48,800 --> 00:05:53,360
our proposal and i have links to the

00:05:50,800 --> 00:05:55,199
proposal in the final slide in this talk

00:05:53,360 --> 00:05:56,880
uh it goes about systematically

00:05:55,199 --> 00:05:58,639
addressing all of these and

00:05:56,880 --> 00:06:00,319
we're gonna hand it things over now to

00:05:58,639 --> 00:06:02,160
mark who's gonna talk about one of the

00:06:00,319 --> 00:06:05,039
core concepts which really

00:06:02,160 --> 00:06:06,960
um is fundamental to this and that is an

00:06:05,039 --> 00:06:09,520
idea of

00:06:06,960 --> 00:06:11,039
a structured resource name which takes

00:06:09,520 --> 00:06:13,919
the form of a url

00:06:11,039 --> 00:06:14,800
and has this udpa schema so i'll have

00:06:13,919 --> 00:06:17,600
things over to

00:06:14,800 --> 00:06:19,039
mark at this point so the the key to

00:06:17,600 --> 00:06:20,000
addressing the limitations that harvey

00:06:19,039 --> 00:06:22,319
spoke about is

00:06:20,000 --> 00:06:23,039
the this new naming scheme for xcs

00:06:22,319 --> 00:06:24,639
resources

00:06:23,039 --> 00:06:26,560
in which resource names are represented

00:06:24,639 --> 00:06:28,400
as a udpa uri

00:06:26,560 --> 00:06:30,560
so so let's talk about the anatomy of a

00:06:28,400 --> 00:06:32,240
udpa uri the the first part of the uri

00:06:30,560 --> 00:06:34,000
that's interesting is the authority

00:06:32,240 --> 00:06:35,440
this indicates who's authoritative for

00:06:34,000 --> 00:06:37,199
the resource which is

00:06:35,440 --> 00:06:38,960
not necessarily the same as the xds

00:06:37,199 --> 00:06:40,720
server that's used by the client

00:06:38,960 --> 00:06:43,440
um the client's bootstrap file will

00:06:40,720 --> 00:06:45,120
indicate what server or servers to use

00:06:43,440 --> 00:06:47,360
uh to access resources for a given

00:06:45,120 --> 00:06:49,039
authority which might or might not be

00:06:47,360 --> 00:06:50,720
the same as the the actual name of the

00:06:49,039 --> 00:06:52,080
xds server right um

00:06:50,720 --> 00:06:54,000
and so an example of a case where you

00:06:52,080 --> 00:06:55,120
might want them to be different is in a

00:06:54,000 --> 00:06:57,919
large distributed

00:06:55,120 --> 00:06:59,599
uh infrastructure if you've got for

00:06:57,919 --> 00:07:00,160
scalability reasons you might have sort

00:06:59,599 --> 00:07:03,199
of a

00:07:00,160 --> 00:07:05,039
a local caching xts proxy you know in

00:07:03,199 --> 00:07:06,720
each data center that that has clients

00:07:05,039 --> 00:07:08,319
and you might have those clients

00:07:06,720 --> 00:07:10,080
access the data through the local

00:07:08,319 --> 00:07:10,560
caching proxy even though the authority

00:07:10,080 --> 00:07:12,800
is still

00:07:10,560 --> 00:07:14,720
some you know centralized uh single

00:07:12,800 --> 00:07:16,319
point uh that is that is centralized

00:07:14,720 --> 00:07:17,599
across the entire you know global

00:07:16,319 --> 00:07:21,199
infrastructure

00:07:17,599 --> 00:07:22,639
um the authority acts as a global name

00:07:21,199 --> 00:07:25,280
space for resource names

00:07:22,639 --> 00:07:26,240
uh so you know if you have resources in

00:07:25,280 --> 00:07:27,520
you know if you have an authority that

00:07:26,240 --> 00:07:28,880
has a bunch of resources in it

00:07:27,520 --> 00:07:30,080
you can feel free to organize them

00:07:28,880 --> 00:07:31,520
however you want and you're not going to

00:07:30,080 --> 00:07:32,560
have any naming conflicts with anything

00:07:31,520 --> 00:07:34,400
that anyone

00:07:32,560 --> 00:07:36,479
any resources that anyone has created in

00:07:34,400 --> 00:07:38,080
in other authorities

00:07:36,479 --> 00:07:40,240
uh the authority is an optional part of

00:07:38,080 --> 00:07:41,520
the uri so if you have a non-federating

00:07:40,240 --> 00:07:42,880
use case just a you know a bunch of

00:07:41,520 --> 00:07:44,319
local servers that don't interact with

00:07:42,880 --> 00:07:45,520
anything else you can just omit the

00:07:44,319 --> 00:07:46,720
authority and have everything in sort of

00:07:45,520 --> 00:07:47,840
the you know the empty string as the

00:07:46,720 --> 00:07:50,319
authority name

00:07:47,840 --> 00:07:52,240
um in the future the authority might be

00:07:50,319 --> 00:07:53,520
used to authenticate the resources

00:07:52,240 --> 00:07:54,639
themselves using some sort of signing

00:07:53,520 --> 00:07:56,160
mechanism that's not something we

00:07:54,639 --> 00:07:57,280
actually have today but it's a possible

00:07:56,160 --> 00:07:59,280
future direction that we could go in

00:07:57,280 --> 00:08:00,960
here

00:07:59,280 --> 00:08:02,639
the next part of the uri is the resource

00:08:00,960 --> 00:08:04,639
type which is you know listener cluster

00:08:02,639 --> 00:08:06,720
route configuration that sort of thing

00:08:04,639 --> 00:08:07,680
the id is is essentially the path part

00:08:06,720 --> 00:08:09,520
of the uri

00:08:07,680 --> 00:08:11,039
it can be any string that you want it's

00:08:09,520 --> 00:08:12,319
totally up to you as an authority owner

00:08:11,039 --> 00:08:14,960
as to how you want to

00:08:12,319 --> 00:08:17,199
lay out your your resource names context

00:08:14,960 --> 00:08:19,360
params are similar to query params in an

00:08:17,199 --> 00:08:21,039
http uri they provide a way to serve

00:08:19,360 --> 00:08:22,080
multiple variants of the same resource

00:08:21,039 --> 00:08:22,879
and we'll talk more about that in a

00:08:22,080 --> 00:08:24,319
minute

00:08:22,879 --> 00:08:25,919
and the final part of the uri is the

00:08:24,319 --> 00:08:27,599
directive this is similar to the

00:08:25,919 --> 00:08:30,639
fragment in an http uri

00:08:27,599 --> 00:08:32,640
it's a a directive for how the client

00:08:30,639 --> 00:08:34,640
should interpret or use some part of the

00:08:32,640 --> 00:08:36,320
resource but it's never actually sent to

00:08:34,640 --> 00:08:40,240
the server it's only interpreted on the

00:08:36,320 --> 00:08:42,880
on the client next slide please

00:08:40,240 --> 00:08:44,720
so here are some examples of uh udpa

00:08:42,880 --> 00:08:45,920
uris uh first we have an example of a

00:08:44,720 --> 00:08:48,480
fairly basic uri

00:08:45,920 --> 00:08:49,760
it's got authority xds.example.com and

00:08:48,480 --> 00:08:51,360
so envoy would

00:08:49,760 --> 00:08:53,440
look in its bootstrap file to determine

00:08:51,360 --> 00:08:55,360
which server to query for this authority

00:08:53,440 --> 00:08:57,279
the resource type here is listener and

00:08:55,360 --> 00:08:59,120
the id is service

00:08:57,279 --> 00:09:00,240
sidecar and again this can be any path

00:08:59,120 --> 00:09:02,080
that you want this is just sort of you

00:09:00,240 --> 00:09:03,680
know one arbitrary example of what you

00:09:02,080 --> 00:09:05,760
could put in here

00:09:03,680 --> 00:09:07,360
the second example shows the use of

00:09:05,760 --> 00:09:09,440
context params in this case the context

00:09:07,360 --> 00:09:11,360
param is node type equals front end

00:09:09,440 --> 00:09:12,880
um note that the context params are

00:09:11,360 --> 00:09:14,160
actually part of the resource name

00:09:12,880 --> 00:09:15,120
they're part of the unique identity of

00:09:14,160 --> 00:09:17,440
the resource so

00:09:15,120 --> 00:09:19,680
from the xds perspective two resource

00:09:17,440 --> 00:09:21,040
names that vary only by

00:09:19,680 --> 00:09:22,480
content params if for example you had

00:09:21,040 --> 00:09:23,120
another one that was node type equals

00:09:22,480 --> 00:09:24,640
backend

00:09:23,120 --> 00:09:26,399
from the xds perspective that's actually

00:09:24,640 --> 00:09:28,640
a different resource um

00:09:26,399 --> 00:09:30,560
from the human perspective in practice

00:09:28,640 --> 00:09:30,959
usually if you if you have a resource

00:09:30,560 --> 00:09:32,959
that

00:09:30,959 --> 00:09:34,720
that varies only based on the context

00:09:32,959 --> 00:09:35,440
params that's usually two variants of

00:09:34,720 --> 00:09:36,880
the same

00:09:35,440 --> 00:09:38,080
you know the same basic resource that

00:09:36,880 --> 00:09:38,800
it's telling the client to do the same

00:09:38,080 --> 00:09:40,080
thing but in

00:09:38,800 --> 00:09:42,640
slightly different ways for slightly

00:09:40,080 --> 00:09:44,399
different scenarios um context frames do

00:09:42,640 --> 00:09:45,360
actually come from different places not

00:09:44,399 --> 00:09:47,760
just from the ui

00:09:45,360 --> 00:09:49,519
uri there are some additional sources of

00:09:47,760 --> 00:09:51,440
params that can get added on

00:09:49,519 --> 00:09:53,120
when requests are made to the grp to the

00:09:51,440 --> 00:09:54,160
xcs server excuse me

00:09:53,120 --> 00:09:57,360
and we'll talk more about that in a

00:09:54,160 --> 00:09:58,959
minute the final example here shows use

00:09:57,360 --> 00:09:59,680
of a directive in this case there's a

00:09:58,959 --> 00:10:01,920
directive called

00:09:59,680 --> 00:10:04,079
alt which specifies a fallback resource

00:10:01,920 --> 00:10:05,519
so when the primary resource is

00:10:04,079 --> 00:10:07,279
doesn't exist or the server can't be

00:10:05,519 --> 00:10:08,320
reached the client can sort of know to

00:10:07,279 --> 00:10:12,160
fall back to this

00:10:08,320 --> 00:10:12,160
alternative resource next slide

00:10:12,480 --> 00:10:15,920
all right so let's talk more about

00:10:14,480 --> 00:10:18,320
context parameters

00:10:15,920 --> 00:10:19,600
as mentioned earlier the purpose is to

00:10:18,320 --> 00:10:21,600
allow servers to provide multiple

00:10:19,600 --> 00:10:23,120
variants of the same resource

00:10:21,600 --> 00:10:25,200
this is the key to making all kinds of

00:10:23,120 --> 00:10:26,720
information a first class part of the

00:10:25,200 --> 00:10:28,560
cache key for resources

00:10:26,720 --> 00:10:31,680
context brands come from multiple places

00:10:28,560 --> 00:10:34,399
so we'll talk about these in order

00:10:31,680 --> 00:10:35,680
first there are node identity parameters

00:10:34,399 --> 00:10:37,120
which can be populated from the node

00:10:35,680 --> 00:10:38,839
message in the bootstrap file

00:10:37,120 --> 00:10:40,240
uh these are prefixed with the string

00:10:38,839 --> 00:10:42,320
udpa.node

00:10:40,240 --> 00:10:44,160
um this is a key part of replacing the

00:10:42,320 --> 00:10:45,440
wildcard queries in lds and cds that

00:10:44,160 --> 00:10:47,440
harvey mentioned earlier

00:10:45,440 --> 00:10:48,880
the idea here is to use these context

00:10:47,440 --> 00:10:50,880
params to encode things that used to

00:10:48,880 --> 00:10:52,079
live in the node message only so

00:10:50,880 --> 00:10:53,600
instead of the server looking at the

00:10:52,079 --> 00:10:54,720
client's node identity to decide which

00:10:53,600 --> 00:10:56,320
resources to return

00:10:54,720 --> 00:10:58,320
the client can explicitly ask for what

00:10:56,320 --> 00:11:01,120
it wants in a flexible way

00:10:58,320 --> 00:11:02,640
uh next the uh the second source of of

00:11:01,120 --> 00:11:04,000
context parameters are the ones encoded

00:11:02,640 --> 00:11:05,680
in the uri themselves so this is like

00:11:04,000 --> 00:11:06,880
the example i showed earlier of node

00:11:05,680 --> 00:11:09,120
type equals front end

00:11:06,880 --> 00:11:10,480
uh it can have any prefix there's no no

00:11:09,120 --> 00:11:12,880
restrictions on on what the

00:11:10,480 --> 00:11:14,000
the content is uh and it is applied

00:11:12,880 --> 00:11:15,760
after the node identity

00:11:14,000 --> 00:11:17,040
param so it can actually override them

00:11:15,760 --> 00:11:18,640
so you know you could

00:11:17,040 --> 00:11:20,640
actually specify something in the uri

00:11:18,640 --> 00:11:21,680
that's udpa.node.something and it would

00:11:20,640 --> 00:11:23,360
override whatever comes from the

00:11:21,680 --> 00:11:26,480
bootstrap file

00:11:23,360 --> 00:11:28,399
next is um the third source of context

00:11:26,480 --> 00:11:30,320
params is client features these use the

00:11:28,399 --> 00:11:31,600
prefix udpa.client feature

00:11:30,320 --> 00:11:32,560
these are not user controlled they're

00:11:31,600 --> 00:11:33,680
added automatically by the

00:11:32,560 --> 00:11:35,839
implementation

00:11:33,680 --> 00:11:37,120
um unlike the client features that exist

00:11:35,839 --> 00:11:38,560
in the node message today

00:11:37,120 --> 00:11:40,720
these client features are resource

00:11:38,560 --> 00:11:42,000
specific so a client feature that that

00:11:40,720 --> 00:11:44,320
is specific to for example

00:11:42,000 --> 00:11:45,600
eds will only be added to requests for

00:11:44,320 --> 00:11:46,880
eds resources

00:11:45,600 --> 00:11:49,120
and this prevents unnecessarily

00:11:46,880 --> 00:11:49,920
polluting caches with duplicate copies

00:11:49,120 --> 00:11:52,079
of the same

00:11:49,920 --> 00:11:53,839
uh resource which is what would occur if

00:11:52,079 --> 00:11:56,480
you know um

00:11:53,839 --> 00:11:57,680
you know if uh the same cds resource was

00:11:56,480 --> 00:11:59,200
accessed by

00:11:57,680 --> 00:12:00,959
two different clients that had different

00:11:59,200 --> 00:12:02,959
values for a

00:12:00,959 --> 00:12:04,160
client feature that is relevant only to

00:12:02,959 --> 00:12:05,839
eds right you wouldn't want to have to

00:12:04,160 --> 00:12:06,800
make two copies of that so this avoids

00:12:05,839 --> 00:12:10,000
that

00:12:06,800 --> 00:12:10,800
uh next uh the final source of context

00:12:10,000 --> 00:12:13,040
parameters

00:12:10,800 --> 00:12:15,200
is per resource type attributes these

00:12:13,040 --> 00:12:16,560
use the prefix udp dot resource

00:12:15,200 --> 00:12:17,920
just like client features these are not

00:12:16,560 --> 00:12:19,200
user defined they're added automatically

00:12:17,920 --> 00:12:21,120
by the implementation

00:12:19,200 --> 00:12:22,240
and they're defined for each resource

00:12:21,120 --> 00:12:24,399
type as needed

00:12:22,240 --> 00:12:26,880
uh the one concrete example here is for

00:12:24,399 --> 00:12:28,639
vhds we plan to use this to

00:12:26,880 --> 00:12:30,160
uh allow the client to to request the

00:12:28,639 --> 00:12:30,880
specific virtual host that the client

00:12:30,160 --> 00:12:33,279
wants so

00:12:30,880 --> 00:12:34,880
this would be a um uh the thing that

00:12:33,279 --> 00:12:36,560
would replace that aliases mechanism

00:12:34,880 --> 00:12:39,279
that harvey mentioned earlier

00:12:36,560 --> 00:12:40,160
uh next slide now another thing that

00:12:39,279 --> 00:12:42,160
we're introducing

00:12:40,160 --> 00:12:43,839
is first class support for collections

00:12:42,160 --> 00:12:46,000
there are two types of collections list

00:12:43,839 --> 00:12:47,519
collections and glob collections

00:12:46,000 --> 00:12:49,279
a list collection is a resource that

00:12:47,519 --> 00:12:50,320
contains a collection of resources of a

00:12:49,279 --> 00:12:51,920
particular type

00:12:50,320 --> 00:12:53,839
uh the collection resource itself will

00:12:51,920 --> 00:12:55,920
have its own type so for example

00:12:53,839 --> 00:12:57,760
a resource of type listener collection

00:12:55,920 --> 00:12:58,320
is a resource that contains a collection

00:12:57,760 --> 00:13:00,320
of

00:12:58,320 --> 00:13:01,760
listeners a resource of type cluster

00:13:00,320 --> 00:13:03,200
collection is a resource that contains a

00:13:01,760 --> 00:13:04,959
collection of clusters

00:13:03,200 --> 00:13:06,880
um as indicated by those examples this

00:13:04,959 --> 00:13:09,680
is another key part of replacing the

00:13:06,880 --> 00:13:11,680
wildcard queries for lds and cds now

00:13:09,680 --> 00:13:15,760
each resource in a collection can be

00:13:11,680 --> 00:13:17,279
either an inline resource or a udpa uri

00:13:15,760 --> 00:13:18,880
referring to another resource which the

00:13:17,279 --> 00:13:21,440
client must fetch separately

00:13:18,880 --> 00:13:24,120
so here in this example we have a

00:13:21,440 --> 00:13:26,000
listener collection resource with name

00:13:24,120 --> 00:13:26,880
xds.example.com listener collection

00:13:26,000 --> 00:13:29,120
sidecar one

00:13:26,880 --> 00:13:30,480
just an arbitrary name that you know as

00:13:29,120 --> 00:13:31,600
far as the id goes anyway

00:13:30,480 --> 00:13:33,360
just an arbitrary name that i made up

00:13:31,600 --> 00:13:35,040
for the example um and in this case the

00:13:33,360 --> 00:13:37,279
collection contains three resources

00:13:35,040 --> 00:13:38,800
there's one inline listener for port 80

00:13:37,279 --> 00:13:40,959
there's another inline listener for part

00:13:38,800 --> 00:13:42,560
443 and then there's a reference to an

00:13:40,959 --> 00:13:43,680
external listener resource which the

00:13:42,560 --> 00:13:46,079
client would have to go and fetch

00:13:43,680 --> 00:13:46,079
separately

00:13:46,240 --> 00:13:49,440
note that for the inline resources there

00:13:48,000 --> 00:13:51,519
are names that are that are sort of

00:13:49,440 --> 00:13:54,160
attached to them these names can be used

00:13:51,519 --> 00:13:56,240
in a entry directive on the client to

00:13:54,160 --> 00:13:58,079
refer to one of the inline resources in

00:13:56,240 --> 00:14:01,440
the collection

00:13:58,079 --> 00:14:02,639
next slide the other type of collections

00:14:01,440 --> 00:14:04,399
that we're going to support are glob

00:14:02,639 --> 00:14:05,519
collections uh these are an alternative

00:14:04,399 --> 00:14:06,880
to list collections

00:14:05,519 --> 00:14:09,040
uh for cases that need additional

00:14:06,880 --> 00:14:10,480
scalability so the way this works is the

00:14:09,040 --> 00:14:11,600
client requests a resource where the

00:14:10,480 --> 00:14:13,760
last component of the id

00:14:11,600 --> 00:14:15,199
is star and it works basically like a

00:14:13,760 --> 00:14:16,000
simple shell glob pattern the server

00:14:15,199 --> 00:14:17,279
will return all

00:14:16,000 --> 00:14:19,519
resources in this quote unquote

00:14:17,279 --> 00:14:21,839
directory um the client will then know

00:14:19,519 --> 00:14:23,920
what resources in the response match the

00:14:21,839 --> 00:14:25,440
this request by virtue of them all being

00:14:23,920 --> 00:14:26,959
in this requested directory so it's sort

00:14:25,440 --> 00:14:27,920
of a you know a path prefix match sort

00:14:26,959 --> 00:14:31,040
of thing

00:14:27,920 --> 00:14:32,079
um the the reason this is more scalable

00:14:31,040 --> 00:14:34,320
than a list collection

00:14:32,079 --> 00:14:35,600
is that in the case of a list collection

00:14:34,320 --> 00:14:36,720
if one you know let's say you have a

00:14:35,600 --> 00:14:37,839
list collection with a whole bunch of

00:14:36,720 --> 00:14:40,079
inline entries

00:14:37,839 --> 00:14:42,079
and any one of them changes you have to

00:14:40,079 --> 00:14:44,720
resend the entire list collection

00:14:42,079 --> 00:14:46,800
um but in a case like um you know so one

00:14:44,720 --> 00:14:48,480
of the limitations we've had in eds

00:14:46,800 --> 00:14:50,240
is that eds has all of the endpoints

00:14:48,480 --> 00:14:51,680
listed in it and we know that there are

00:14:50,240 --> 00:14:53,120
cases where there are really large

00:14:51,680 --> 00:14:54,800
numbers of endpoints and then like one

00:14:53,120 --> 00:14:55,680
of them changes and you have to resend

00:14:54,800 --> 00:14:57,040
the whole thing which

00:14:55,680 --> 00:14:58,639
uses a lot of bandwidth and is not

00:14:57,040 --> 00:15:00,079
really the way we want things to work so

00:14:58,639 --> 00:15:01,199
with glob collections we're going to be

00:15:00,079 --> 00:15:01,680
able to build something that we're going

00:15:01,199 --> 00:15:03,920
to call

00:15:01,680 --> 00:15:05,680
uh leds the locality endpoint discovery

00:15:03,920 --> 00:15:07,199
service which will be based on glob

00:15:05,680 --> 00:15:08,800
collections and will allow

00:15:07,199 --> 00:15:10,480
uh each individual endpoint to be

00:15:08,800 --> 00:15:11,600
updated to the client uh independently

00:15:10,480 --> 00:15:15,199
of each other

00:15:11,600 --> 00:15:16,800
next slide next let's talk about

00:15:15,199 --> 00:15:18,720
different ways that you can use udpa

00:15:16,800 --> 00:15:19,839
uris to address various federation

00:15:18,720 --> 00:15:20,959
scenarios

00:15:19,839 --> 00:15:22,320
there are three different ways for a

00:15:20,959 --> 00:15:23,680
resource from one authority to sort of

00:15:22,320 --> 00:15:24,800
delegate to resources in another

00:15:23,680 --> 00:15:26,240
authority

00:15:24,800 --> 00:15:28,160
first the delegation can happen at the

00:15:26,240 --> 00:15:29,199
normal handoff point between resources

00:15:28,160 --> 00:15:30,800
you know we know that

00:15:29,199 --> 00:15:32,639
uh listener resources can tell the

00:15:30,800 --> 00:15:33,759
client what route configuration to

00:15:32,639 --> 00:15:35,440
request via rds

00:15:33,759 --> 00:15:37,199
so that rds resource can actually be in

00:15:35,440 --> 00:15:38,000
a different resource sorry a different

00:15:37,199 --> 00:15:39,360
authority

00:15:38,000 --> 00:15:42,079
than the listener resource was so that's

00:15:39,360 --> 00:15:43,920
one way of sort of handing off uh next

00:15:42,079 --> 00:15:45,360
the uh second type of authority

00:15:43,920 --> 00:15:47,360
delegation is redirection so this is

00:15:45,360 --> 00:15:49,279
similar to an http redirect

00:15:47,360 --> 00:15:50,720
the client will request a specific

00:15:49,279 --> 00:15:52,320
resource and the server then tells it to

00:15:50,720 --> 00:15:53,600
use a different resource instead

00:15:52,320 --> 00:15:54,720
and that resource can be in a different

00:15:53,600 --> 00:15:56,000
authority so this is a way for one

00:15:54,720 --> 00:15:57,600
authority to sort of say

00:15:56,000 --> 00:15:58,880
i want to delegate you know this

00:15:57,600 --> 00:16:00,480
particular resource to some other

00:15:58,880 --> 00:16:02,320
authority

00:16:00,480 --> 00:16:04,000
uh next uh so the final form of

00:16:02,320 --> 00:16:05,360
authority delegation is having a list

00:16:04,000 --> 00:16:06,880
collection that includes

00:16:05,360 --> 00:16:08,800
references to resources in a different

00:16:06,880 --> 00:16:10,920
authority so in this example we have a

00:16:08,800 --> 00:16:12,240
listener collection in the authority

00:16:10,920 --> 00:16:14,320
xds.example.com

00:16:12,240 --> 00:16:15,839
but it's redirecting inside of it it's

00:16:14,320 --> 00:16:19,199
referencing inside of it

00:16:15,839 --> 00:16:21,759
resources in other.com and mumble.com

00:16:19,199 --> 00:16:24,000
next slide please now a different type

00:16:21,759 --> 00:16:25,680
of authority handoff is a failover this

00:16:24,000 --> 00:16:27,120
is where we use that alt directive that

00:16:25,680 --> 00:16:28,560
we talked about earlier

00:16:27,120 --> 00:16:30,399
uh but in this case the alt directive

00:16:28,560 --> 00:16:32,240
points to a resource in a different

00:16:30,399 --> 00:16:33,360
authority than the original resource was

00:16:32,240 --> 00:16:35,120
this sort of thing can be useful in

00:16:33,360 --> 00:16:36,399
cases where you want to like fall back

00:16:35,120 --> 00:16:38,160
to a different configuration from a

00:16:36,399 --> 00:16:40,000
local xds server when the remote xds

00:16:38,160 --> 00:16:42,480
server is not reachable

00:16:40,000 --> 00:16:42,480
next slide

00:16:43,199 --> 00:16:46,399
and let me hand back to harvey at this

00:16:44,399 --> 00:16:49,600
point

00:16:46,399 --> 00:16:52,399
thanks mark okay so

00:16:49,600 --> 00:16:53,360
in summary like the real win here is

00:16:52,399 --> 00:16:56,160
we've got

00:16:53,360 --> 00:16:58,560
the ability to cash xts resources we can

00:16:56,160 --> 00:17:00,399
delegate and fail over for authorities

00:16:58,560 --> 00:17:02,000
we've got better support for collections

00:17:00,399 --> 00:17:02,720
we've eliminated a bunch of technical

00:17:02,000 --> 00:17:05,280
debt

00:17:02,720 --> 00:17:07,520
and we're now ready to go i think for

00:17:05,280 --> 00:17:09,520
things like federation so this is like

00:17:07,520 --> 00:17:11,360
all pretty exciting now in terms of the

00:17:09,520 --> 00:17:13,600
implementation roadmap

00:17:11,360 --> 00:17:14,720
we've just started to do this we have

00:17:13,600 --> 00:17:17,039
the first three

00:17:14,720 --> 00:17:19,600
i guess items in that roadmap um

00:17:17,039 --> 00:17:22,959
underway but at very early stages

00:17:19,600 --> 00:17:26,240
we planning q4 landing probably

00:17:22,959 --> 00:17:29,280
one through four at least in this list

00:17:26,240 --> 00:17:30,240
and um then i think once we've landed

00:17:29,280 --> 00:17:32,880
that which is

00:17:30,240 --> 00:17:34,799
basically support for the the core udp

00:17:32,880 --> 00:17:37,919
urls and um

00:17:34,799 --> 00:17:39,120
glob collections the rest of the uh

00:17:37,919 --> 00:17:41,440
implementation can be added somewhere

00:17:39,120 --> 00:17:42,960
incrementally and sort of um distributed

00:17:41,440 --> 00:17:44,400
amongst other folks who are interested

00:17:42,960 --> 00:17:47,039
in contributing but

00:17:44,400 --> 00:17:49,840
this is uh the current plan and uh we'll

00:17:47,039 --> 00:17:51,440
be working on this in the coming months

00:17:49,840 --> 00:17:53,919
in the second part of this talk i plan

00:17:51,440 --> 00:17:55,360
on looking at xts versioning i know this

00:17:53,919 --> 00:17:56,799
has been a source of considerable

00:17:55,360 --> 00:17:57,280
friction in the envelope community in

00:17:56,799 --> 00:17:59,360
the past

00:17:57,280 --> 00:18:00,799
year so i'm hoping with the supply that

00:17:59,360 --> 00:18:02,799
i present has

00:18:00,799 --> 00:18:04,080
sort of reflected some of the feedback

00:18:02,799 --> 00:18:06,160
that we've received

00:18:04,080 --> 00:18:07,600
and is providing us path forward to

00:18:06,160 --> 00:18:10,720
achieving the best

00:18:07,600 --> 00:18:14,720
uh properties of versioning while still

00:18:10,720 --> 00:18:17,120
uh being thoughtful and mindful of

00:18:14,720 --> 00:18:18,080
the costs that control point operators

00:18:17,120 --> 00:18:20,320
bear when

00:18:18,080 --> 00:18:22,160
i'm implementing some of these schemes

00:18:20,320 --> 00:18:23,840
so let's just start with a recap of

00:18:22,160 --> 00:18:26,240
versioning in envoy

00:18:23,840 --> 00:18:28,240
and you know we may even have this takes

00:18:26,240 --> 00:18:29,679
us back to last year's zomboycon

00:18:28,240 --> 00:18:32,000
but like though one of the first things

00:18:29,679 --> 00:18:35,440
is like why are we even doing versioning

00:18:32,000 --> 00:18:36,480
and the the basic reason is that we were

00:18:35,440 --> 00:18:39,039
previously had

00:18:36,480 --> 00:18:41,039
just a single unversion api which people

00:18:39,039 --> 00:18:43,919
would randomly remove fields from

00:18:41,039 --> 00:18:45,919
which doesn't work as a stable api if

00:18:43,919 --> 00:18:48,960
you're a control plane operator

00:18:45,919 --> 00:18:51,360
um if you're implementing envoy as an

00:18:48,960 --> 00:18:54,720
xts client and you're not envoy uh

00:18:51,360 --> 00:18:56,320
xds as a as a if you're opening xcs

00:18:54,720 --> 00:18:58,640
clients you're not envoy

00:18:56,320 --> 00:19:00,559
like these things are problematic

00:18:58,640 --> 00:19:02,480
features and we really needed to have

00:19:00,559 --> 00:19:04,320
a pretty serious strategy for not

00:19:02,480 --> 00:19:06,160
breaking the api

00:19:04,320 --> 00:19:08,160
so we introduced major versioning which

00:19:06,160 --> 00:19:10,080
would actually allow us to you know turn

00:19:08,160 --> 00:19:12,080
down entire apis and bring up new

00:19:10,080 --> 00:19:14,080
ones and we were planning on doing this

00:19:12,080 --> 00:19:17,280
initially on a yearly cadence

00:19:14,080 --> 00:19:20,080
with v2 in 2019 which was the extent api

00:19:17,280 --> 00:19:21,280
v3 and 2020 which we did roll out and

00:19:20,080 --> 00:19:22,799
deprecate v2

00:19:21,280 --> 00:19:25,679
and then in 2021 we're playing

00:19:22,799 --> 00:19:29,919
introducing d4 removing v2

00:19:25,679 --> 00:19:32,880
etc and one per year and

00:19:29,919 --> 00:19:35,120
that was uh problematic we decided to

00:19:32,880 --> 00:19:36,799
stop the clock right there because

00:19:35,120 --> 00:19:38,720
uh it turned out that there is just too

00:19:36,799 --> 00:19:40,080
much control playing operator developer

00:19:38,720 --> 00:19:42,240
pain which i'll go into

00:19:40,080 --> 00:19:43,600
i have a mini retrospective in the next

00:19:42,240 --> 00:19:45,360
few slides

00:19:43,600 --> 00:19:46,720
but that's essentially where the

00:19:45,360 --> 00:19:48,320
situation we're in today we're not

00:19:46,720 --> 00:19:49,840
getting rid of major versions but we're

00:19:48,320 --> 00:19:51,039
not going to issue one per year and

00:19:49,840 --> 00:19:52,799
we're going to come up with a

00:19:51,039 --> 00:19:54,320
more incremental approach towards

00:19:52,799 --> 00:19:56,000
versioning which i'll explore in the

00:19:54,320 --> 00:19:58,080
next few slides

00:19:56,000 --> 00:19:59,679
so a quick retrospective the good the

00:19:58,080 --> 00:20:01,919
bad the ugly well good things

00:19:59,679 --> 00:20:03,280
is major version did solve our breaking

00:20:01,919 --> 00:20:05,280
change problem within

00:20:03,280 --> 00:20:07,280
major versions we built sophisticated

00:20:05,280 --> 00:20:10,320
tooling in onboard to automate

00:20:07,280 --> 00:20:11,520
most of the upgrades so it was a lot uh

00:20:10,320 --> 00:20:13,440
smoother than it would have been if we

00:20:11,520 --> 00:20:16,240
did it manually and there were a bunch

00:20:13,440 --> 00:20:17,760
of technical improvements in v3 over v2

00:20:16,240 --> 00:20:19,280
which were made possible by the ability

00:20:17,760 --> 00:20:22,000
to break the api

00:20:19,280 --> 00:20:22,400
over the version bump what worked badly

00:20:22,000 --> 00:20:24,080
well

00:20:22,400 --> 00:20:25,760
we had a fair bit of code chain that's

00:20:24,080 --> 00:20:28,320
not too bad though we

00:20:25,760 --> 00:20:30,240
didn't finish basil integration um so

00:20:28,320 --> 00:20:31,919
there's this generated api shadow thing

00:20:30,240 --> 00:20:32,320
that you may be familiar with if you're

00:20:31,919 --> 00:20:33,919
a

00:20:32,320 --> 00:20:36,960
onboard developer you need to unfix

00:20:33,919 --> 00:20:39,760
format for we didn't have

00:20:36,960 --> 00:20:40,640
um at all parts of v3 ready to go on day

00:20:39,760 --> 00:20:42,080
zero

00:20:40,640 --> 00:20:44,080
and there's some complexity around

00:20:42,080 --> 00:20:46,000
handling versioning in envoy

00:20:44,080 --> 00:20:47,679
now the really ugly parts are control

00:20:46,000 --> 00:20:48,799
playing developers and operators had a

00:20:47,679 --> 00:20:50,640
lot of pain

00:20:48,799 --> 00:20:52,240
and they didn't have the same tool in

00:20:50,640 --> 00:20:53,600
libraries that we had in envoy

00:20:52,240 --> 00:20:55,600
there was a lot of confusion they

00:20:53,600 --> 00:20:57,200
weren't ready on day zero for upgrades

00:20:55,600 --> 00:21:00,080
and documentation and

00:20:57,200 --> 00:21:01,679
some of this you know i would say um

00:21:00,080 --> 00:21:03,039
reflected the lack of interest in

00:21:01,679 --> 00:21:04,080
control plate operators and what we were

00:21:03,039 --> 00:21:05,760
doing while we were

00:21:04,080 --> 00:21:07,360
putting together this proposal and

00:21:05,760 --> 00:21:09,520
socializing the older community

00:21:07,360 --> 00:21:10,480
but some of it we probably should we

00:21:09,520 --> 00:21:12,720
should have been much

00:21:10,480 --> 00:21:13,919
uh better prepared for and ready to go

00:21:12,720 --> 00:21:15,840
at day zero

00:21:13,919 --> 00:21:18,320
there was also a performance overheads

00:21:15,840 --> 00:21:19,120
of upgrading resources from v2 to v3

00:21:18,320 --> 00:21:21,280
inside of

00:21:19,120 --> 00:21:23,120
on voip zombie internally operates at v3

00:21:21,280 --> 00:21:24,799
and this caught quite a few people

00:21:23,120 --> 00:21:26,559
and there's a lot of conflation over

00:21:24,799 --> 00:21:27,919
what is a transport and a resource

00:21:26,559 --> 00:21:30,080
version and so on

00:21:27,919 --> 00:21:32,320
amongst the humber community and

00:21:30,080 --> 00:21:34,720
confusion as a result

00:21:32,320 --> 00:21:36,720
okay so what's the actual new plan well

00:21:34,720 --> 00:21:38,320
we're going to slow down major versions

00:21:36,720 --> 00:21:39,520
we're not going to not do a major

00:21:38,320 --> 00:21:40,640
version in the future but we're not

00:21:39,520 --> 00:21:42,799
going to do one until

00:21:40,640 --> 00:21:44,320
the benefit really outweighs their

00:21:42,799 --> 00:21:46,159
identified costs and there's been a

00:21:44,320 --> 00:21:46,799
useful learning experience to capture

00:21:46,159 --> 00:21:48,720
that

00:21:46,799 --> 00:21:50,720
we're going to switch to a scheme called

00:21:48,720 --> 00:21:52,000
minor and patch version to make things

00:21:50,720 --> 00:21:54,080
more incremental

00:21:52,000 --> 00:21:56,400
and so it's borrowing from the sort of

00:21:54,080 --> 00:21:58,240
semantic versioning terminology or this

00:21:56,400 --> 00:22:00,960
isn't semantic versioning

00:21:58,240 --> 00:22:02,400
um major versions are going to be when

00:22:00,960 --> 00:22:03,039
we were to break the world they happen

00:22:02,400 --> 00:22:04,880
rarely

00:22:03,039 --> 00:22:06,080
and we can actually remove fields from

00:22:04,880 --> 00:22:07,919
the api

00:22:06,080 --> 00:22:10,080
minor versions are going to occur once

00:22:07,919 --> 00:22:10,880
per year and what's going to occur at

00:22:10,080 --> 00:22:13,600
these uh

00:22:10,880 --> 00:22:15,679
uh clock ticks is nothing's gonna be

00:22:13,600 --> 00:22:17,760
removed from the api but xds

00:22:15,679 --> 00:22:19,039
clients can remove support for

00:22:17,760 --> 00:22:22,080
deprecated features

00:22:19,039 --> 00:22:23,600
at these clock ticks and um

00:22:22,080 --> 00:22:24,720
finally we'll have patch versioning

00:22:23,600 --> 00:22:26,000
which introdu which will basically

00:22:24,720 --> 00:22:28,159
change in every api

00:22:26,000 --> 00:22:29,760
change and this will let you know

00:22:28,159 --> 00:22:32,559
exactly what version of

00:22:29,760 --> 00:22:34,480
the api client is at which is useful for

00:22:32,559 --> 00:22:37,200
feature discovery

00:22:34,480 --> 00:22:38,880
okay so matt's got a very detailed plan

00:22:37,200 --> 00:22:40,720
of record around this and i recommend

00:22:38,880 --> 00:22:43,280
checking this out if you're interested

00:22:40,720 --> 00:22:45,360
uh the the the devils in the details and

00:22:43,280 --> 00:22:46,640
um adi who's a googler who is going to

00:22:45,360 --> 00:22:49,360
be working on this

00:22:46,640 --> 00:22:50,000
um in q4 he's going to be looking at

00:22:49,360 --> 00:22:52,080
things like

00:22:50,000 --> 00:22:53,280
how do we do version negotiation and

00:22:52,080 --> 00:22:54,880
feature negotiation

00:22:53,280 --> 00:22:57,200
which are really important to

00:22:54,880 --> 00:22:58,080
coordinating xds clients and control

00:22:57,200 --> 00:23:01,200
planes

00:22:58,080 --> 00:23:03,120
in this world okay now what are the

00:23:01,200 --> 00:23:04,320
implications well if you're a control

00:23:03,120 --> 00:23:05,679
plane operator

00:23:04,320 --> 00:23:07,919
you're gonna have to state a policy and

00:23:05,679 --> 00:23:09,039
support one around which minor versions

00:23:07,919 --> 00:23:10,799
you support

00:23:09,039 --> 00:23:13,039
if you're a control plane developer you

00:23:10,799 --> 00:23:14,480
need to uh support a range of minor

00:23:13,039 --> 00:23:16,240
versions and

00:23:14,480 --> 00:23:18,640
support negotiation of features and

00:23:16,240 --> 00:23:20,159
version xcs client developers need to

00:23:18,640 --> 00:23:21,679
pretty much do the same

00:23:20,159 --> 00:23:23,679
and anyone who wants to is willing to

00:23:21,679 --> 00:23:24,159
put in the work of being an api shepherd

00:23:23,679 --> 00:23:26,480
can

00:23:24,159 --> 00:23:28,720
join in the process of deciding you know

00:23:26,480 --> 00:23:32,400
what gets deprecated and when to

00:23:28,720 --> 00:23:34,240
help guide these uh um these minor

00:23:32,400 --> 00:23:36,480
version changes

00:23:34,240 --> 00:23:38,000
okay so the new version of a uh roadmap

00:23:36,480 --> 00:23:41,120
kind of looks like the first two

00:23:38,000 --> 00:23:41,600
uh points in 2019 2020 are the same next

00:23:41,120 --> 00:23:44,559
year

00:23:41,600 --> 00:23:45,120
on q1 without introducing 3.1.0 binary

00:23:44,559 --> 00:23:48,400
version

00:23:45,120 --> 00:23:48,880
and we will remove v2 um that is going

00:23:48,400 --> 00:23:51,360
away

00:23:48,880 --> 00:23:52,480
so if you still rely on v2 you should be

00:23:51,360 --> 00:23:53,840
moving to v3

00:23:52,480 --> 00:23:55,760
because that is going from the onboard

00:23:53,840 --> 00:23:57,360
code base um

00:23:55,760 --> 00:23:59,120
and then each year from then on we're

00:23:57,360 --> 00:24:02,080
going to start um uh

00:23:59,120 --> 00:24:04,240
introducing minor versions and um

00:24:02,080 --> 00:24:06,240
deprecating things which are more than

00:24:04,240 --> 00:24:08,799
at least a year which have had

00:24:06,240 --> 00:24:10,400
deprecations of at least a year

00:24:08,799 --> 00:24:12,880
okay so there's a bunch of resources

00:24:10,400 --> 00:24:14,320
around this uh linked to this slide um

00:24:12,880 --> 00:24:16,799
if you download the slides and click

00:24:14,320 --> 00:24:18,720
through them you can follow up on them

00:24:16,799 --> 00:24:20,559
at this point i think we're done with

00:24:18,720 --> 00:24:22,480
the uh presentation part of this talk

00:24:20,559 --> 00:24:24,880
and we're happy to take questions

00:24:22,480 --> 00:24:24,880
thank you

00:24:26,000 --> 00:24:32,000
hello hello all right so

00:24:29,919 --> 00:24:33,039
should we tackle the one about the um

00:24:32,000 --> 00:24:34,159
collections

00:24:33,039 --> 00:24:35,760
including collections like i think

00:24:34,159 --> 00:24:36,720
that's something we could support i'm

00:24:35,760 --> 00:24:38,080
not sure

00:24:36,720 --> 00:24:39,440
we'd have to look at the use cases and

00:24:38,080 --> 00:24:40,320
make sure there's no implications but it

00:24:39,440 --> 00:24:42,320
seems

00:24:40,320 --> 00:24:44,960
on on just first thinking about it it

00:24:42,320 --> 00:24:46,960
sort of seems like we could do that

00:24:44,960 --> 00:24:48,159
yeah for list collections sure i mean we

00:24:46,960 --> 00:24:50,960
already have

00:24:48,159 --> 00:24:52,720
the xds client um going back and forth

00:24:50,960 --> 00:24:54,480
to the server multiple times when

00:24:52,720 --> 00:24:56,080
fetching a collection and so

00:24:54,480 --> 00:24:58,000
this is essentially just adding a bit of

00:24:56,080 --> 00:24:59,600
hierarchy there so there's no reason

00:24:58,000 --> 00:25:01,120
we can't support it i guess we will just

00:24:59,600 --> 00:25:02,320
need to understand the use case for that

00:25:01,120 --> 00:25:03,600
first because it's

00:25:02,320 --> 00:25:05,200
i mean like looking at the existing

00:25:03,600 --> 00:25:06,960
proposal we already have a fair bit of

00:25:05,200 --> 00:25:08,799
conceptual complexity around

00:25:06,960 --> 00:25:10,320
collections around where these list

00:25:08,799 --> 00:25:11,520
collections and we also need these glob

00:25:10,320 --> 00:25:12,799
collections for performance and

00:25:11,520 --> 00:25:16,159
scalability

00:25:12,799 --> 00:25:17,360
so ideally we have uh we land these

00:25:16,159 --> 00:25:20,480
first and then

00:25:17,360 --> 00:25:22,240
we we had that yeah and then uh some

00:25:20,480 --> 00:25:23,039
sort of notion of nested collections

00:25:22,240 --> 00:25:25,120
yeah

00:25:23,039 --> 00:25:26,640
yeah i mean i think the the nice thing

00:25:25,120 --> 00:25:28,960
about it is that it wouldn't

00:25:26,640 --> 00:25:30,400
you know it this would sort of just be a

00:25:28,960 --> 00:25:31,760
change to the data model for list

00:25:30,400 --> 00:25:33,600
collections because list collections are

00:25:31,760 --> 00:25:34,880
just a resource right yeah so it doesn't

00:25:33,600 --> 00:25:36,480
really have any transport protocol

00:25:34,880 --> 00:25:38,320
implications which is nice

00:25:36,480 --> 00:25:40,480
um but yeah i agree let's let's do the

00:25:38,320 --> 00:25:42,400
basic stuff first and then you know

00:25:40,480 --> 00:25:44,159
we can see where we go from there okay

00:25:42,400 --> 00:25:46,400
yeah i think that makes sense i think so

00:25:44,159 --> 00:25:48,480
we had another question around um

00:25:46,400 --> 00:25:49,520
how are we managing trust amongst

00:25:48,480 --> 00:25:52,240
authorities

00:25:49,520 --> 00:25:52,960
and things like spliffy and so on so

00:25:52,240 --> 00:25:55,440
right now

00:25:52,960 --> 00:25:57,120
i think this actually ties into another

00:25:55,440 --> 00:25:58,320
sort of related concern that is how do

00:25:57,120 --> 00:26:01,520
you actually like

00:25:58,320 --> 00:26:03,760
um sign and attest to the um

00:26:01,520 --> 00:26:05,200
integrity of fcs resources that doesn't

00:26:03,760 --> 00:26:06,559
really exist today

00:26:05,200 --> 00:26:09,600
but it seems that they're at the

00:26:06,559 --> 00:26:12,480
resource level um it would make sense to

00:26:09,600 --> 00:26:13,039
introduce um some sort of notion of

00:26:12,480 --> 00:26:15,919
signing

00:26:13,039 --> 00:26:17,679
so you can uh have an idea of who was

00:26:15,919 --> 00:26:18,640
responsible for producing this uh

00:26:17,679 --> 00:26:20,720
resource and

00:26:18,640 --> 00:26:22,400
is it in the actual original you know

00:26:20,720 --> 00:26:24,640
intended condition

00:26:22,400 --> 00:26:26,720
and tied into that would then be some

00:26:24,640 --> 00:26:29,279
idea like what is an authority

00:26:26,720 --> 00:26:30,880
and um how do we actually identify them

00:26:29,279 --> 00:26:31,600
using you know certs and that kind of

00:26:30,880 --> 00:26:33,520
thing

00:26:31,600 --> 00:26:34,960
so i think like we have an idea that

00:26:33,520 --> 00:26:36,640
this is where we want your head and

00:26:34,960 --> 00:26:38,080
there's various points in the api where

00:26:36,640 --> 00:26:40,480
it makes sense if you

00:26:38,080 --> 00:26:42,080
look at the proposal on the co the

00:26:40,480 --> 00:26:44,400
config source is essentially what

00:26:42,080 --> 00:26:45,279
identifies and maps an abstract idea of

00:26:44,400 --> 00:26:47,440
an authority

00:26:45,279 --> 00:26:48,880
down to the concrete transport it seems

00:26:47,440 --> 00:26:50,080
that would be a good place to also

00:26:48,880 --> 00:26:52,799
attach

00:26:50,080 --> 00:26:55,200
certificate information as well and the

00:26:52,799 --> 00:26:57,679
xcs resource objects themselves are

00:26:55,200 --> 00:26:58,880
now in a wrapper uh object and that is

00:26:57,679 --> 00:27:00,720
where essentially the

00:26:58,880 --> 00:27:02,320
signature would go but this scheme has

00:27:00,720 --> 00:27:04,640
not been fully designed yet we're

00:27:02,320 --> 00:27:06,240
it's really just the stage at which we

00:27:04,640 --> 00:27:07,360
understand how you would probably go

00:27:06,240 --> 00:27:08,720
about building this

00:27:07,360 --> 00:27:10,000
and i think like anyone's actually

00:27:08,720 --> 00:27:11,679
interested in helping to drive that

00:27:10,000 --> 00:27:13,200
would be very into them because

00:27:11,679 --> 00:27:14,880
i think that's a really important part

00:27:13,200 --> 00:27:16,480
of making this work for real

00:27:14,880 --> 00:27:18,399
you know like um situation where you

00:27:16,480 --> 00:27:21,840
have your mutually untrusting parties

00:27:18,399 --> 00:27:21,840
and that kind of thing

00:27:23,760 --> 00:27:26,799
yeah i think i think one of the one of

00:27:25,279 --> 00:27:27,840
the challenges with with the whole

00:27:26,799 --> 00:27:29,120
signing thing that we're gonna have to

00:27:27,840 --> 00:27:30,720
think about when we when we really start

00:27:29,120 --> 00:27:32,880
looking at signing in detail

00:27:30,720 --> 00:27:34,000
is you know it that sort of thing i

00:27:32,880 --> 00:27:34,720
think could work fairly well if what

00:27:34,000 --> 00:27:37,120
we're signing

00:27:34,720 --> 00:27:38,720
is the xcs resources themselves but if

00:27:37,120 --> 00:27:40,320
you've got some sort of you know control

00:27:38,720 --> 00:27:41,760
plane infrastructure behind the

00:27:40,320 --> 00:27:43,919
management server that

00:27:41,760 --> 00:27:45,600
you know what users actually configure

00:27:43,919 --> 00:27:46,880
is not that form but a different form

00:27:45,600 --> 00:27:48,320
and then it gets converted

00:27:46,880 --> 00:27:49,840
then there's this whole chain of trust

00:27:48,320 --> 00:27:51,279
thing you know through that whole

00:27:49,840 --> 00:27:52,799
workflow that that makes things a little

00:27:51,279 --> 00:27:54,559
bit more complicated depending on

00:27:52,799 --> 00:27:55,679
how much you're mutating the data that

00:27:54,559 --> 00:27:57,520
goes back like the original point of

00:27:55,679 --> 00:27:59,279
this idea like a disaggregated control

00:27:57,520 --> 00:28:00,960
plane so today control planes are like

00:27:59,279 --> 00:28:02,399
it's a single or more i think service is

00:28:00,960 --> 00:28:04,559
probably fine while they're

00:28:02,399 --> 00:28:06,480
simple but you can think about you know

00:28:04,559 --> 00:28:08,159
breaking up the control plane and even

00:28:06,480 --> 00:28:09,679
amongst those who let's say we're

00:28:08,159 --> 00:28:10,480
fronting that control plane with go

00:28:09,679 --> 00:28:11,440
control plane

00:28:10,480 --> 00:28:13,279
they probably have a pretty

00:28:11,440 --> 00:28:14,080
sophisticated configuration pipeline

00:28:13,279 --> 00:28:16,159
behind that

00:28:14,080 --> 00:28:18,000
which runs in a different service and

00:28:16,159 --> 00:28:20,799
that kind of thing

00:28:18,000 --> 00:28:22,080
okay i think we have one minute uh if

00:28:20,799 --> 00:28:25,679
there any other

00:28:22,080 --> 00:28:25,679
questions or we can uh

00:28:26,399 --> 00:28:38,640
and a minute back to the next session

00:28:31,279 --> 00:28:38,640

YouTube URL: https://www.youtube.com/watch?v=Mgveowb8dkI


