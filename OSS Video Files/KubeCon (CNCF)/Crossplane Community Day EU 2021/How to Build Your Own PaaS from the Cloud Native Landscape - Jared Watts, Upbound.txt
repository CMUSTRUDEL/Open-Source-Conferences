Title: How to Build Your Own PaaS from the Cloud Native Landscape - Jared Watts, Upbound
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

How to Build Your Own PaaS from the Cloud Native Landscape - Jared Watts, Upbound

As the CNCF showed us in a preceding talk, the Cloud Native Landscape is growing fast and now has so many projects and options that end users are having trouble making sense of it all. The end user community would greatly benefit from an effort to turn these cloud native “ingredients” into “recipes”. In this talk, Jared Watts (co-creator of Crossplane) will take us on a deep dive of the technology, design, and implementation of cloud native “solutions” based on Crossplane. This talk builds on the introduction and perspective provided by the CNCF on the need for cloud native recipes, and brings those ideas to life with a practical walkthrough and demonstration.
Captions: 
	00:00:00,000 --> 00:00:04,000
hey everybody my name is jared watts and

00:00:01,920 --> 00:00:05,839
i'm a founding engineer here at upbound

00:00:04,000 --> 00:00:07,120
and a co-creator and maintainer on the

00:00:05,839 --> 00:00:08,240
crossplane project

00:00:07,120 --> 00:00:10,080
and we're going to talk about how you

00:00:08,240 --> 00:00:11,599
can build your own platform as a service

00:00:10,080 --> 00:00:14,000
from all the components

00:00:11,599 --> 00:00:16,640
in the cloud native landscape so

00:00:14,000 --> 00:00:18,400
speaking of the landscape

00:00:16,640 --> 00:00:20,240
it's pretty big there are a lot of

00:00:18,400 --> 00:00:23,119
entries and a lot of projects in it

00:00:20,240 --> 00:00:23,439
people have found some humor in this and

00:00:23,119 --> 00:00:24,880
uh

00:00:23,439 --> 00:00:26,800
in recent months somebody actually made

00:00:24,880 --> 00:00:29,039
a thousand piece puzzle

00:00:26,800 --> 00:00:30,080
out of the landscape and it sold out

00:00:29,039 --> 00:00:32,640
that etsy link will

00:00:30,080 --> 00:00:33,920
show you where where it was but it's no

00:00:32,640 --> 00:00:35,360
longer for sale because it's sold out

00:00:33,920 --> 00:00:37,440
it's pretty popular

00:00:35,360 --> 00:00:38,719
there's a lot of stuff going on in this

00:00:37,440 --> 00:00:40,719
landscape right

00:00:38,719 --> 00:00:42,480
we see what uh what happened to old

00:00:40,719 --> 00:00:44,239
charlie here when he tried to make sense

00:00:42,480 --> 00:00:45,840
of the landscape

00:00:44,239 --> 00:00:47,120
so let's do a little bit better than

00:00:45,840 --> 00:00:47,600
charlie did let's start making some

00:00:47,120 --> 00:00:50,559
sense

00:00:47,600 --> 00:00:50,879
of all of the sprawl in this landscape

00:00:50,559 --> 00:00:53,360
so

00:00:50,879 --> 00:00:54,960
the cncf itself says that complexity is

00:00:53,360 --> 00:00:57,039
the number one user reported issue

00:00:54,960 --> 00:00:58,879
in the ecosystem it's been that way for

00:00:57,039 --> 00:00:59,680
a number of years so that's a recurring

00:00:58,879 --> 00:01:02,000
theme

00:00:59,680 --> 00:01:02,960
so one way that we can help out here is

00:01:02,000 --> 00:01:06,240
that we can

00:01:02,960 --> 00:01:07,520
start composing these entries in the

00:01:06,240 --> 00:01:09,360
landscape together

00:01:07,520 --> 00:01:11,680
into higher level solutions right turn

00:01:09,360 --> 00:01:14,560
these ingredients into recipes

00:01:11,680 --> 00:01:16,799
and so what we're going to do today is

00:01:14,560 --> 00:01:18,799
just that we're going to build our own

00:01:16,799 --> 00:01:20,720
cloud native platform as a service

00:01:18,799 --> 00:01:22,159
and it's going to empower our developers

00:01:20,720 --> 00:01:25,600
to run their applications

00:01:22,159 --> 00:01:26,720
um with a rich platform underneath them

00:01:25,600 --> 00:01:28,479
of all these great

00:01:26,720 --> 00:01:30,240
projects from the landscape so we're

00:01:28,479 --> 00:01:32,640
going to make some sense of of all that

00:01:30,240 --> 00:01:34,320
into a nice platform uh we're going to

00:01:32,640 --> 00:01:35,680
put some best practices some operational

00:01:34,320 --> 00:01:37,040
wisdom into it

00:01:35,680 --> 00:01:39,280
and then we're going to be able to share

00:01:37,040 --> 00:01:40,960
it and collaborate on it as well too

00:01:39,280 --> 00:01:42,799
um what we're building here today is a

00:01:40,960 --> 00:01:44,320
starting point and it's just one

00:01:42,799 --> 00:01:45,840
opinionated platform right out of that

00:01:44,320 --> 00:01:47,200
landscape you could build a number of

00:01:45,840 --> 00:01:49,040
them i'm pretty sure

00:01:47,200 --> 00:01:50,560
so we're just gonna start with one today

00:01:49,040 --> 00:01:52,640
and then we can use that as a starting

00:01:50,560 --> 00:01:55,840
point uh to collaborate in the ecosystem

00:01:52,640 --> 00:01:55,840
and keep building

00:01:57,360 --> 00:02:01,520
so let's do a quick refresher on how you

00:01:59,360 --> 00:02:02,399
can build your own custom platform using

00:02:01,520 --> 00:02:05,200
crossplane

00:02:02,399 --> 00:02:07,439
so basically we can assemble together

00:02:05,200 --> 00:02:09,679
low-level granular resources from

00:02:07,439 --> 00:02:11,360
multiple vendors clouds environments

00:02:09,679 --> 00:02:12,800
and then we can expose those as a higher

00:02:11,360 --> 00:02:15,520
level abstraction

00:02:12,800 --> 00:02:16,800
to our application teams that serves as

00:02:15,520 --> 00:02:18,319
an api for them to be able to

00:02:16,800 --> 00:02:19,360
self-service and get the infrastructure

00:02:18,319 --> 00:02:22,080
they need

00:02:19,360 --> 00:02:23,440
so to make a more tangible example we

00:02:22,080 --> 00:02:25,599
can compose together

00:02:23,440 --> 00:02:28,239
you know gke node pool network sub

00:02:25,599 --> 00:02:30,239
network a bunch of gcp resources

00:02:28,239 --> 00:02:31,280
and then also some helm charts as well

00:02:30,239 --> 00:02:34,000
too for our

00:02:31,280 --> 00:02:34,959
platform services and projects and

00:02:34,000 --> 00:02:38,319
compose those all

00:02:34,959 --> 00:02:40,160
into a single cluster object

00:02:38,319 --> 00:02:41,680
that is basically an abstraction of what

00:02:40,160 --> 00:02:43,840
it means to be a cluster

00:02:41,680 --> 00:02:45,680
and that cluster object is going to have

00:02:43,840 --> 00:02:46,319
a small set of config for our developers

00:02:45,680 --> 00:02:48,640
so they can

00:02:46,319 --> 00:02:50,800
tweak what they need to and then all the

00:02:48,640 --> 00:02:52,400
complexity and the details and policy

00:02:50,800 --> 00:02:54,160
and all that sort of stuff

00:02:52,400 --> 00:02:55,840
is actually going to be hidden away from

00:02:54,160 --> 00:02:56,800
them that's going to be underneath this

00:02:55,840 --> 00:02:58,560
simple api

00:02:56,800 --> 00:02:59,360
line that we're building for them all

00:02:58,560 --> 00:03:00,959
this is going to be done with the

00:02:59,360 --> 00:03:02,640
kubernetes api so it's going to be

00:03:00,959 --> 00:03:05,280
compatible with anything that talks

00:03:02,640 --> 00:03:06,640
kubernetes basically and we're not going

00:03:05,280 --> 00:03:07,680
to have to write any code to do this

00:03:06,640 --> 00:03:09,840
either this is all going to be

00:03:07,680 --> 00:03:12,400
declarative

00:03:09,840 --> 00:03:13,840
a little visualization for this here uh

00:03:12,400 --> 00:03:16,239
is that our application developers

00:03:13,840 --> 00:03:17,920
all they'll see is the cluster object

00:03:16,239 --> 00:03:19,519
this api that we've surfaced for them

00:03:17,920 --> 00:03:22,000
with some simple configuration

00:03:19,519 --> 00:03:23,440
and then behind that api line we can

00:03:22,000 --> 00:03:25,680
have multiple compositions

00:03:23,440 --> 00:03:27,120
to fulfill what it means to be a cluster

00:03:25,680 --> 00:03:29,440
so in this example here we've got one

00:03:27,120 --> 00:03:32,560
for aws we've got one for gcp

00:03:29,440 --> 00:03:35,840
with all the specific uh cloud resources

00:03:32,560 --> 00:03:38,319
that um make up a cluster within those

00:03:35,840 --> 00:03:40,400
particular environments

00:03:38,319 --> 00:03:41,519
but it doesn't have to be a you know

00:03:40,400 --> 00:03:44,239
multiple clouds

00:03:41,519 --> 00:03:45,440
for our compositions it could be all

00:03:44,239 --> 00:03:46,159
within one cloud and it could be

00:03:45,440 --> 00:03:49,519
something like

00:03:46,159 --> 00:03:51,599
uh fast or slow expensive or cheap

00:03:49,519 --> 00:03:53,680
gold or silver doesn't matter uh we

00:03:51,599 --> 00:03:57,120
could have multiple compositions

00:03:53,680 --> 00:03:59,519
that serve as the runtime definition for

00:03:57,120 --> 00:04:02,080
what a cluster means for our application

00:03:59,519 --> 00:04:02,080
developers

00:04:03,840 --> 00:04:07,760
so let's talk about what are we going to

00:04:05,519 --> 00:04:09,280
put into this platform as a service

00:04:07,760 --> 00:04:10,239
we're building from the cloud native

00:04:09,280 --> 00:04:11,120
landscape

00:04:10,239 --> 00:04:13,360
well we're definitely going to start

00:04:11,120 --> 00:04:15,360
with kubernetes because we're going to

00:04:13,360 --> 00:04:17,919
need a container orchestrator

00:04:15,360 --> 00:04:18,720
uh cluster to run our apps and our

00:04:17,919 --> 00:04:20,880
workloads

00:04:18,720 --> 00:04:22,400
and so building on that we're gonna also

00:04:20,880 --> 00:04:24,479
put prometheus in there

00:04:22,400 --> 00:04:26,240
so we can do monitoring and collecting

00:04:24,479 --> 00:04:27,919
metrics from all of our microservices

00:04:26,240 --> 00:04:29,199
and then alerting when things go wrong

00:04:27,919 --> 00:04:31,199
as well too

00:04:29,199 --> 00:04:32,479
yeager is going to be useful for

00:04:31,199 --> 00:04:34,800
distributed tracing

00:04:32,479 --> 00:04:36,639
uh it will give us insight into all of

00:04:34,800 --> 00:04:37,759
the complicated interactions between the

00:04:36,639 --> 00:04:39,680
microservices

00:04:37,759 --> 00:04:41,040
in our distributed system here and find

00:04:39,680 --> 00:04:42,400
out when things are going wrong as well

00:04:41,040 --> 00:04:44,160
too fluid d

00:04:42,400 --> 00:04:46,000
will be helpful for our logging you know

00:04:44,160 --> 00:04:48,720
consolidating all of our logging

00:04:46,000 --> 00:04:50,000
that's being output from our services

00:04:48,720 --> 00:04:51,680
rook we're going to be putting in there

00:04:50,000 --> 00:04:54,880
as well too for storage

00:04:51,680 --> 00:04:57,600
so you know rook provides a persistent

00:04:54,880 --> 00:04:59,600
block file and object storage so if a

00:04:57,600 --> 00:05:01,759
application needs a volume

00:04:59,600 --> 00:05:02,720
to write to our file system then it can

00:05:01,759 --> 00:05:04,240
get it for brooke

00:05:02,720 --> 00:05:06,639
and then lastly we're going to put flux

00:05:04,240 --> 00:05:09,680
in there as well too so we can connect

00:05:06,639 --> 00:05:11,120
our git repos with our

00:05:09,680 --> 00:05:13,039
cluster there and do continuous

00:05:11,120 --> 00:05:16,240
deployments of our applications

00:05:13,039 --> 00:05:17,520
from the git repo using get ops into

00:05:16,240 --> 00:05:19,199
our cluster here to keep our

00:05:17,520 --> 00:05:22,000
applications up to date as developers

00:05:19,199 --> 00:05:22,000
are making changes

00:05:22,479 --> 00:05:26,320
here's a architectural system diagram

00:05:24,720 --> 00:05:28,080
that kind of puts us all together

00:05:26,320 --> 00:05:30,160
so remember we were looking at our

00:05:28,080 --> 00:05:31,840
cluster object that our developer will

00:05:30,160 --> 00:05:32,800
be able to configure and have a simple

00:05:31,840 --> 00:05:34,240
api with

00:05:32,800 --> 00:05:36,400
and then when that cluster object is

00:05:34,240 --> 00:05:37,919
created crossland's going to take a look

00:05:36,400 --> 00:05:39,919
at it it's going to render out all the

00:05:37,919 --> 00:05:41,759
compositions that we've defined

00:05:39,919 --> 00:05:43,199
and then the providers in crossplane

00:05:41,759 --> 00:05:45,440
will actually be talking to your

00:05:43,199 --> 00:05:46,000
external apis and making this system

00:05:45,440 --> 00:05:48,560
happen

00:05:46,000 --> 00:05:49,199
uh out in the real world so provider gcp

00:05:48,560 --> 00:05:51,280
will be talking

00:05:49,199 --> 00:05:52,800
to google cloud and it will be creating

00:05:51,280 --> 00:05:55,680
the network the node pool

00:05:52,800 --> 00:05:57,120
sub network the gke cluster itself and

00:05:55,680 --> 00:05:59,360
then provider helm

00:05:57,120 --> 00:06:01,919
will also be taking a look at all of the

00:05:59,360 --> 00:06:04,960
composed resources that came out from

00:06:01,919 --> 00:06:06,639
our high level cluster abstraction

00:06:04,960 --> 00:06:09,440
and it's going to be deploying all these

00:06:06,639 --> 00:06:12,639
helm charts for prometheus and jager etc

00:06:09,440 --> 00:06:16,000
into a namespace inside the gke cluster

00:06:12,639 --> 00:06:17,759
the operator's namespace and then lastly

00:06:16,000 --> 00:06:19,280
flux is running inside the operator's

00:06:17,759 --> 00:06:20,800
namespace there too is going to be

00:06:19,280 --> 00:06:23,840
connected up to github

00:06:20,800 --> 00:06:24,240
to be looking for changes in github and

00:06:23,840 --> 00:06:27,680
be

00:06:24,240 --> 00:06:29,919
using continuous delivery to

00:06:27,680 --> 00:06:31,600
take the application from github and put

00:06:29,919 --> 00:06:33,120
it into some namespaces

00:06:31,600 --> 00:06:34,560
inside of our cluster as well too so

00:06:33,120 --> 00:06:35,520
that we'll have positive deployments

00:06:34,560 --> 00:06:39,039
that are running

00:06:35,520 --> 00:06:39,039
that make up our workloads

00:06:41,680 --> 00:06:45,840
let's start designing the shape of this

00:06:44,720 --> 00:06:48,240
cluster object

00:06:45,840 --> 00:06:49,919
this platform api that we're putting

00:06:48,240 --> 00:06:51,759
together for our developers

00:06:49,919 --> 00:06:53,199
what sort of config knobs do we want to

00:06:51,759 --> 00:06:55,039
give to them to

00:06:53,199 --> 00:06:57,199
allow them to be able to tweak and

00:06:55,039 --> 00:06:58,880
configure to their liking

00:06:57,199 --> 00:07:01,360
so some things that might be interesting

00:06:58,880 --> 00:07:01,840
is some characteristics of the workload

00:07:01,360 --> 00:07:04,400
cluster

00:07:01,840 --> 00:07:06,160
itself you know how many nodes it has

00:07:04,400 --> 00:07:08,000
what type of machines are going to be

00:07:06,160 --> 00:07:09,440
making up this cluster

00:07:08,000 --> 00:07:11,599
we're probably going to also care about

00:07:09,440 --> 00:07:13,120
what versions of the platform services

00:07:11,599 --> 00:07:14,800
they might depend on

00:07:13,120 --> 00:07:16,639
and also we're definitely going to care

00:07:14,800 --> 00:07:18,560
about what is the git repository that we

00:07:16,639 --> 00:07:22,080
want to run continuous deployment

00:07:18,560 --> 00:07:25,039
from and so we can start thinking of an

00:07:22,080 --> 00:07:28,160
api here that exposes these knobs

00:07:25,039 --> 00:07:30,080
for the developers to set and tweak and

00:07:28,160 --> 00:07:32,479
so we see here we can specify the

00:07:30,080 --> 00:07:33,440
count of nodes and then the size of the

00:07:32,479 --> 00:07:35,280
nodes that we want

00:07:33,440 --> 00:07:37,039
note this isn't a specific machine type

00:07:35,280 --> 00:07:39,039
because this is going to be a universal

00:07:37,039 --> 00:07:40,960
api for multiple vendors so we're kind

00:07:39,039 --> 00:07:42,319
of extracting it into a small medium

00:07:40,960 --> 00:07:44,240
large type of format

00:07:42,319 --> 00:07:46,000
then we've got the versions for these

00:07:44,240 --> 00:07:49,840
services in the cluster and then

00:07:46,000 --> 00:07:51,360
what github url to be syncing from

00:07:49,840 --> 00:07:52,960
and note to that we're probably going to

00:07:51,360 --> 00:07:55,039
want some policy here uh

00:07:52,960 --> 00:07:56,720
underneath the api line because you

00:07:55,039 --> 00:07:58,960
don't want to just let your developers

00:07:56,720 --> 00:08:00,560
specify willy-nilly how many nodes in

00:07:58,960 --> 00:08:01,840
the cluster you want to put some upper

00:08:00,560 --> 00:08:03,360
bounds on it too so we're going to need

00:08:01,840 --> 00:08:06,240
some policy underneath our api

00:08:03,360 --> 00:08:06,240
line as well too

00:08:07,840 --> 00:08:11,039
so here's another kind of diagram of the

00:08:10,160 --> 00:08:13,599
composition

00:08:11,039 --> 00:08:14,960
hierarchy really so starting at the top

00:08:13,599 --> 00:08:16,400
there you know the developer

00:08:14,960 --> 00:08:18,160
all they interact with is a simple

00:08:16,400 --> 00:08:19,199
cluster object right they're making a

00:08:18,160 --> 00:08:21,280
claim on a cluster

00:08:19,199 --> 00:08:22,960
and then beneath the api line here's

00:08:21,280 --> 00:08:25,840
this whole hierarchy of

00:08:22,960 --> 00:08:27,520
composite resources and compositions

00:08:25,840 --> 00:08:29,280
that compose them

00:08:27,520 --> 00:08:30,879
so we can see here that underneath of

00:08:29,280 --> 00:08:32,399
the api line there there's a

00:08:30,879 --> 00:08:33,839
cluster composite resource and then

00:08:32,399 --> 00:08:35,039
there's two different compositions that

00:08:33,839 --> 00:08:38,880
we can be looking at here

00:08:35,039 --> 00:08:41,519
one for gcp that is made up of yet more

00:08:38,880 --> 00:08:43,039
composite resources a gke one and a

00:08:41,519 --> 00:08:44,640
services composite resource and

00:08:43,039 --> 00:08:48,000
underneath those there's more

00:08:44,640 --> 00:08:50,399
compositions of lower level resources

00:08:48,000 --> 00:08:51,200
so the gcp resources we'll see there the

00:08:50,399 --> 00:08:53,120
helm charts

00:08:51,200 --> 00:08:54,800
for the various landscape projects we'll

00:08:53,120 --> 00:08:56,880
see there as well too

00:08:54,800 --> 00:08:59,440
so we can see this hierarchy of

00:08:56,880 --> 00:09:02,160
composite resources and compositions

00:08:59,440 --> 00:09:02,560
underneath them that put all together

00:09:02,160 --> 00:09:04,560
make

00:09:02,560 --> 00:09:06,800
up the entire platform that we're

00:09:04,560 --> 00:09:07,200
building we see that all that complexity

00:09:06,800 --> 00:09:09,680
is

00:09:07,200 --> 00:09:11,279
yet again underneath the api line and

00:09:09,680 --> 00:09:13,680
then the developer doesn't have to worry

00:09:11,279 --> 00:09:13,680
about that

00:09:14,080 --> 00:09:17,120
so let's also talk about how are we

00:09:15,760 --> 00:09:18,720
going to get configuration

00:09:17,120 --> 00:09:20,480
from the developer from this simple

00:09:18,720 --> 00:09:23,279
cluster object down

00:09:20,480 --> 00:09:24,000
into this composition hierarchy so that

00:09:23,279 --> 00:09:26,800
the

00:09:24,000 --> 00:09:28,480
leaf resources the granular low-level

00:09:26,800 --> 00:09:29,680
resources can get the composition or

00:09:28,480 --> 00:09:30,880
sorry the configuration that they need

00:09:29,680 --> 00:09:33,279
as well too

00:09:30,880 --> 00:09:34,320
so we see here that we expose you know

00:09:33,279 --> 00:09:37,680
the size

00:09:34,320 --> 00:09:40,720
and node count for the

00:09:37,680 --> 00:09:41,440
cluster to the developer in our cluster

00:09:40,720 --> 00:09:43,839
object

00:09:41,440 --> 00:09:44,880
and so we can take that from the

00:09:43,839 --> 00:09:48,399
developers

00:09:44,880 --> 00:09:51,680
object we'll take uh the size

00:09:48,399 --> 00:09:54,160
and we will patch that down on into the

00:09:51,680 --> 00:09:56,720
particular gke

00:09:54,160 --> 00:09:58,720
uh managed resource a low level resource

00:09:56,720 --> 00:10:00,480
and note here now that um

00:09:58,720 --> 00:10:02,560
small medium large doesn't mean anything

00:10:00,480 --> 00:10:03,600
to gke so we were making a

00:10:02,560 --> 00:10:05,519
transformation

00:10:03,600 --> 00:10:07,440
of developers configuration into

00:10:05,519 --> 00:10:09,600
something more specific for gke

00:10:07,440 --> 00:10:11,360
we do something similar to for aws as

00:10:09,600 --> 00:10:14,399
well too but they're different

00:10:11,360 --> 00:10:15,680
specific aws specific machine types but

00:10:14,399 --> 00:10:18,160
basically we're taking

00:10:15,680 --> 00:10:20,079
small medium large we're mapping that to

00:10:18,160 --> 00:10:22,560
a specific set of

00:10:20,079 --> 00:10:24,480
machine types in gke and basically

00:10:22,560 --> 00:10:26,640
getting our developers intent

00:10:24,480 --> 00:10:28,160
down into our compositions and into the

00:10:26,640 --> 00:10:29,680
real world as well too

00:10:28,160 --> 00:10:32,480
similar thing can be done for the node

00:10:29,680 --> 00:10:34,399
count where we will set that on the

00:10:32,480 --> 00:10:36,560
you know number of nodes in the cluster

00:10:34,399 --> 00:10:36,880
and the auto scaling properties as well

00:10:36,560 --> 00:10:38,399
too

00:10:36,880 --> 00:10:40,399
and this is exactly where we'd want to

00:10:38,399 --> 00:10:42,240
apply more policy um

00:10:40,399 --> 00:10:44,720
something like open policy agent to

00:10:42,240 --> 00:10:46,480
specify hey developers you can't set a

00:10:44,720 --> 00:10:48,160
higher node count than

00:10:46,480 --> 00:10:50,079
10 or something like that so they can't

00:10:48,160 --> 00:10:51,519
go go too high with

00:10:50,079 --> 00:10:53,200
the node count so policy being

00:10:51,519 --> 00:10:54,800
configured into this

00:10:53,200 --> 00:10:57,200
these patches in these compositions is

00:10:54,800 --> 00:11:00,480
very important too one more patch

00:10:57,200 --> 00:11:01,839
to look at is how do we get our uh

00:11:00,480 --> 00:11:04,560
continuous deployments

00:11:01,839 --> 00:11:06,240
uh platform services configuration down

00:11:04,560 --> 00:11:07,920
into those helm charts as well too in

00:11:06,240 --> 00:11:09,600
our compositional hierarchy

00:11:07,920 --> 00:11:12,000
so we can see a very similar pattern

00:11:09,600 --> 00:11:14,480
here we've got some defaults defined for

00:11:12,000 --> 00:11:15,839
let's say the flux home chart but then

00:11:14,480 --> 00:11:18,240
we're going to patch in everything that

00:11:15,839 --> 00:11:19,920
comes from our developers cluster object

00:11:18,240 --> 00:11:21,519
as well too the versions and the git

00:11:19,920 --> 00:11:24,079
repository url

00:11:21,519 --> 00:11:24,640
they set we're going to take those from

00:11:24,079 --> 00:11:27,600
their

00:11:24,640 --> 00:11:29,040
developer cluster object and patch those

00:11:27,600 --> 00:11:30,640
down through to the underlying helm

00:11:29,040 --> 00:11:32,480
charts in our compositions

00:11:30,640 --> 00:11:33,680
so that those get reflected into the

00:11:32,480 --> 00:11:35,200
real world

00:11:33,680 --> 00:11:37,760
instance that we're bringing up for them

00:11:35,200 --> 00:11:37,760
as well too

00:11:39,040 --> 00:11:42,240
so a quick reminder as well that we're

00:11:41,600 --> 00:11:44,959
looking

00:11:42,240 --> 00:11:45,680
uh in deeper into some of the complexity

00:11:44,959 --> 00:11:47,600
here

00:11:45,680 --> 00:11:49,440
but that's all beneath the api line

00:11:47,600 --> 00:11:50,880
right this is something for the platform

00:11:49,440 --> 00:11:52,880
team or the infrastructure

00:11:50,880 --> 00:11:54,480
owners to worry about and the developers

00:11:52,880 --> 00:11:56,320
still focus on the high level

00:11:54,480 --> 00:11:58,399
simple object simple api that we're

00:11:56,320 --> 00:12:00,800
exposing to them with a small set of

00:11:58,399 --> 00:12:02,160
config knobs for them to turn into tweak

00:12:00,800 --> 00:12:04,079
and that's all that they have to deal

00:12:02,160 --> 00:12:04,800
with that compositional hierarchy and

00:12:04,079 --> 00:12:07,360
patching

00:12:04,800 --> 00:12:08,720
and all those things are only something

00:12:07,360 --> 00:12:10,079
that the infrastructure team

00:12:08,720 --> 00:12:11,600
and the platform team is going to have

00:12:10,079 --> 00:12:14,720
to worry about the developers get to

00:12:11,600 --> 00:12:14,720
have a simple focus still

00:12:16,000 --> 00:12:20,399
all right so let's hop into the demo now

00:12:18,079 --> 00:12:25,279
and see all this running together on a

00:12:20,399 --> 00:12:27,519
you know live practical system

00:12:25,279 --> 00:12:29,600
okay so let's get this kicked off by

00:12:27,519 --> 00:12:31,760
starting on the upbound cloud registry

00:12:29,600 --> 00:12:33,279
because we have made this cloud native

00:12:31,760 --> 00:12:35,920
reference platform

00:12:33,279 --> 00:12:36,959
and it's available in the upbound cloud

00:12:35,920 --> 00:12:39,519
registry

00:12:36,959 --> 00:12:41,040
and so we're going to start from here to

00:12:39,519 --> 00:12:42,160
get it running so i'm going to go ahead

00:12:41,040 --> 00:12:45,519
and just run this in

00:12:42,160 --> 00:12:46,959
upbound cloud uh so that

00:12:45,519 --> 00:12:48,639
you know i don't have a crossband

00:12:46,959 --> 00:12:50,079
instance running right now so i can just

00:12:48,639 --> 00:12:53,440
create one

00:12:50,079 --> 00:12:55,920
on demand here to run this demonstration

00:12:53,440 --> 00:12:57,200
uh with a crossplane instance that's in

00:12:55,920 --> 00:12:59,279
outbound cloud

00:12:57,200 --> 00:13:03,040
so that's going to get kicked off and

00:12:59,279 --> 00:13:05,279
created a cross main instance for me

00:13:03,040 --> 00:13:07,279
okay now that my crossman instance is

00:13:05,279 --> 00:13:09,200
ready in outbound cloud

00:13:07,279 --> 00:13:10,880
the cloud native reference platform was

00:13:09,200 --> 00:13:13,040
installed into it automatically along

00:13:10,880 --> 00:13:14,959
with all of its dependencies as well too

00:13:13,040 --> 00:13:17,200
so we're ready to get started with this

00:13:14,959 --> 00:13:17,200
thing

00:13:18,639 --> 00:13:22,399
so in my cloud native reference platform

00:13:20,560 --> 00:13:24,000
here i'm going to go ahead

00:13:22,399 --> 00:13:25,600
and connect to the command line and

00:13:24,000 --> 00:13:27,839
start showing some things there as well

00:13:25,600 --> 00:13:27,839
too

00:13:29,200 --> 00:13:33,680
all right so on the command prompt here

00:13:31,200 --> 00:13:36,560
let's start examining what is in

00:13:33,680 --> 00:13:37,200
our platform that we brought up so let's

00:13:36,560 --> 00:13:39,680
take a

00:13:37,200 --> 00:13:40,959
quick look at the packages that are

00:13:39,680 --> 00:13:42,000
installed just to make sure everything's

00:13:40,959 --> 00:13:44,320
on there

00:13:42,000 --> 00:13:45,120
we installed our cloud native reference

00:13:44,320 --> 00:13:46,560
platform there

00:13:45,120 --> 00:13:48,800
and they brought in dependencies of

00:13:46,560 --> 00:13:50,880
provider gcp and provider helm

00:13:48,800 --> 00:13:51,839
so those are all there ready to go and

00:13:50,880 --> 00:13:53,920
then also

00:13:51,839 --> 00:13:55,530
included in that that platform that we

00:13:53,920 --> 00:13:57,360
installed here it would be the

00:13:55,530 --> 00:13:59,600
[Music]

00:13:57,360 --> 00:14:00,399
xrds as well to our composite resource

00:13:59,600 --> 00:14:02,480
definitions

00:14:00,399 --> 00:14:04,399
so you can see here now that we have a

00:14:02,480 --> 00:14:06,160
cluster object and one for gke

00:14:04,399 --> 00:14:07,760
and services as well too so those are

00:14:06,160 --> 00:14:09,760
all look to be ready to go

00:14:07,760 --> 00:14:11,680
and ready to consume so let's take a

00:14:09,760 --> 00:14:12,320
quick look then at what we're going to

00:14:11,680 --> 00:14:14,160
actually

00:14:12,320 --> 00:14:15,360
create here so i'm going to create now

00:14:14,160 --> 00:14:17,120
i'm the developer

00:14:15,360 --> 00:14:18,480
my infrastructure platform team has

00:14:17,120 --> 00:14:19,760
installed everything for me and

00:14:18,480 --> 00:14:22,639
everything's ready to go and as a

00:14:19,760 --> 00:14:25,839
developer i want to get a cluster now

00:14:22,639 --> 00:14:27,680
so here is a cluster claim

00:14:25,839 --> 00:14:29,279
that i'm going to go ahead and create as

00:14:27,680 --> 00:14:30,639
the developer and

00:14:29,279 --> 00:14:32,000
we're we've seen this in the slides

00:14:30,639 --> 00:14:33,680
before where we're going to create one

00:14:32,000 --> 00:14:35,199
node it's going to be a small one and

00:14:33,680 --> 00:14:37,120
these are all the versions of the

00:14:35,199 --> 00:14:40,160
platform services that i want and then

00:14:37,120 --> 00:14:43,600
note i'm pointing specifically at my

00:14:40,160 --> 00:14:45,839
uh git repository to do the continuous

00:14:43,600 --> 00:14:46,880
deployment from so that's what we're

00:14:45,839 --> 00:14:50,160
going to apply now

00:14:46,880 --> 00:14:50,959
so let's go ahead uh and apply the same

00:14:50,160 --> 00:14:54,959
file there

00:14:50,959 --> 00:14:57,120
so that gets kicked off and then

00:14:54,959 --> 00:14:59,600
underneath now cross plane is going to

00:14:57,120 --> 00:15:02,639
see that we have requested

00:14:59,600 --> 00:15:03,920
a cluster and all that machinery for the

00:15:02,639 --> 00:15:05,519
compositions and the

00:15:03,920 --> 00:15:07,040
composite resource definitions that our

00:15:05,519 --> 00:15:08,240
platform seem to find that's kicking

00:15:07,040 --> 00:15:11,440
into gear now

00:15:08,240 --> 00:15:14,720
so we can see here that we've got

00:15:11,440 --> 00:15:17,920
a uh cluster composite resource

00:15:14,720 --> 00:15:19,279
created now and it's uh not gonna it's

00:15:17,920 --> 00:15:21,199
not gonna be ready right away

00:15:19,279 --> 00:15:23,600
because underneath it there's going to

00:15:21,199 --> 00:15:25,920
be a lot of infrastructure

00:15:23,600 --> 00:15:27,760
that is getting brought up in google

00:15:25,920 --> 00:15:28,560
cloud now so i'm getting all the managed

00:15:27,760 --> 00:15:30,480
resources

00:15:28,560 --> 00:15:32,399
uh which means all the basically all the

00:15:30,480 --> 00:15:35,120
services in google cloud

00:15:32,399 --> 00:15:35,920
so in response to requesting a cluster a

00:15:35,120 --> 00:15:38,720
cloud native

00:15:35,920 --> 00:15:40,000
platform cluster i'm now getting a gte

00:15:38,720 --> 00:15:42,959
i'm getting node pool

00:15:40,000 --> 00:15:44,240
subnetwork network etc so all that stuff

00:15:42,959 --> 00:15:46,560
is kicking off now

00:15:44,240 --> 00:15:48,160
and installing and then the helm charts

00:15:46,560 --> 00:15:49,680
for all of our platform services our

00:15:48,160 --> 00:15:52,720
jager our fluency

00:15:49,680 --> 00:15:54,320
flux all that stuff is now actively

00:15:52,720 --> 00:15:56,639
being reconciled in

00:15:54,320 --> 00:15:58,000
the actual state is being driven uh to

00:15:56,639 --> 00:15:58,800
match the desired state that i've

00:15:58,000 --> 00:16:02,399
requested

00:15:58,800 --> 00:16:02,399
and all this is happening right now

00:16:03,759 --> 00:16:07,040
all right let's check in on our

00:16:05,839 --> 00:16:10,639
deployment

00:16:07,040 --> 00:16:13,040
and see how things are going now

00:16:10,639 --> 00:16:15,519
it looks like all the gcp infrastructure

00:16:13,040 --> 00:16:18,079
is up see they are already true

00:16:15,519 --> 00:16:18,800
so all of our cluster and network and

00:16:18,079 --> 00:16:21,360
everything is

00:16:18,800 --> 00:16:22,000
looks like it's ready to go unhappy

00:16:21,360 --> 00:16:25,199
let's also

00:16:22,000 --> 00:16:28,800
take a look at the platform services

00:16:25,199 --> 00:16:32,320
that we deployed as well

00:16:28,800 --> 00:16:35,440
to so

00:16:32,320 --> 00:16:37,120
yes our jaeger our prometheus fluentd

00:16:35,440 --> 00:16:38,560
all that stuff it looks like they are

00:16:37,120 --> 00:16:42,160
ready also

00:16:38,560 --> 00:16:43,759
and deployed out to the workload cluster

00:16:42,160 --> 00:16:45,759
and gke that we brought up

00:16:43,759 --> 00:16:47,600
so it looks like everything should be

00:16:45,759 --> 00:16:50,639
about done here

00:16:47,600 --> 00:16:54,079
um one other thing to look at is that

00:16:50,639 --> 00:16:56,320
i have a separate cube config to

00:16:54,079 --> 00:16:57,440
connect to that remote workload cluster

00:16:56,320 --> 00:16:59,759
we brought up

00:16:57,440 --> 00:17:01,920
i just got the cube config from the

00:16:59,759 --> 00:17:05,760
connection secret that crossplane

00:17:01,920 --> 00:17:07,839
uh saved for me from after it completed

00:17:05,760 --> 00:17:09,760
provisioning the cluster so if we look

00:17:07,839 --> 00:17:11,760
at the operator's namespace

00:17:09,760 --> 00:17:13,120
in that workload cluster that we brought

00:17:11,760 --> 00:17:16,720
up in gke

00:17:13,120 --> 00:17:19,919
we can see that all the operators

00:17:16,720 --> 00:17:21,199
for yeager and fluentd and uh everybody

00:17:19,919 --> 00:17:24,079
and rook down here

00:17:21,199 --> 00:17:25,120
they all look to be running and uh this

00:17:24,079 --> 00:17:27,039
one's a job

00:17:25,120 --> 00:17:28,400
so that one completed okay i think and

00:17:27,039 --> 00:17:30,320
so everybody's ready and running so i

00:17:28,400 --> 00:17:32,240
think the platform is ready to go so we

00:17:30,320 --> 00:17:34,480
can now start putting our application

00:17:32,240 --> 00:17:37,760
into this workload cluster that we

00:17:34,480 --> 00:17:39,520
brought up from our platform app

00:17:37,760 --> 00:17:41,760
in order to start getting our

00:17:39,520 --> 00:17:42,320
applications deployed to that workload

00:17:41,760 --> 00:17:45,440
cluster

00:17:42,320 --> 00:17:48,720
using flux let's jump over here

00:17:45,440 --> 00:17:50,320
to uh my my repo that has a couple

00:17:48,720 --> 00:17:51,200
different applications in it that i

00:17:50,320 --> 00:17:54,160
forked from

00:17:51,200 --> 00:17:55,120
uh flux's example upstream so we can see

00:17:54,160 --> 00:17:58,480
here that we've got

00:17:55,120 --> 00:18:00,640
um a ghost blog and and redis

00:17:58,480 --> 00:18:02,720
uh you know database and caching as well

00:18:00,640 --> 00:18:05,039
too so these are the

00:18:02,720 --> 00:18:07,440
um components that we would expect

00:18:05,039 --> 00:18:10,000
through flux's continuous deployment

00:18:07,440 --> 00:18:11,360
to be syncing from this github repo into

00:18:10,000 --> 00:18:13,200
that workload cluster

00:18:11,360 --> 00:18:14,640
that we showed you so one thing i need

00:18:13,200 --> 00:18:18,080
to do to make that

00:18:14,640 --> 00:18:22,880
finally connected here is that i need to

00:18:18,080 --> 00:18:26,559
add my deploy key to the um

00:18:22,880 --> 00:18:30,000
to the repo here so that the identity

00:18:26,559 --> 00:18:33,440
that flux uses will be

00:18:30,000 --> 00:18:37,280
um accepted by github to

00:18:33,440 --> 00:18:40,640
let it access this repo and to start

00:18:37,280 --> 00:18:43,200
um deploying the applications the redis

00:18:40,640 --> 00:18:46,559
the the

00:18:43,200 --> 00:18:47,679
ghost blog from this repo into the

00:18:46,559 --> 00:18:50,000
workload cluster

00:18:47,679 --> 00:18:50,799
so we've added the deployment key now

00:18:50,000 --> 00:18:54,840
and let's go

00:18:50,799 --> 00:18:56,799
check on the workloads inside the

00:18:54,840 --> 00:18:58,240
cluster

00:18:56,799 --> 00:18:59,840
all right so back at the command prompt

00:18:58,240 --> 00:19:02,320
here we're going to

00:18:59,840 --> 00:19:04,400
run a cube control command to connect to

00:19:02,320 --> 00:19:06,799
the workload cluster that's in gke

00:19:04,400 --> 00:19:08,080
and then we're going to get the uh the

00:19:06,799 --> 00:19:10,480
helm releases from

00:19:08,080 --> 00:19:12,640
flux the ones that it's syncing from the

00:19:10,480 --> 00:19:13,360
github repository down into this cluster

00:19:12,640 --> 00:19:16,720
here

00:19:13,360 --> 00:19:19,200
and we're going to see that excellent

00:19:16,720 --> 00:19:20,480
uh looks like ghost mongodb and redis

00:19:19,200 --> 00:19:23,520
were successfully

00:19:20,480 --> 00:19:24,880
grabbed from the github repository using

00:19:23,520 --> 00:19:27,520
continuous deployment

00:19:24,880 --> 00:19:28,880
to get them into this workload cluster

00:19:27,520 --> 00:19:31,679
so it looks like everything

00:19:28,880 --> 00:19:33,520
is pretty much completed now where we've

00:19:31,679 --> 00:19:37,120
deployed our cloud data platform

00:19:33,520 --> 00:19:39,679
we have gotten the infrastructure

00:19:37,120 --> 00:19:41,520
provisioned through a simple cluster

00:19:39,679 --> 00:19:43,280
object that is developer

00:19:41,520 --> 00:19:45,200
was able to tweak a couple config

00:19:43,280 --> 00:19:47,280
settings on we got all this

00:19:45,200 --> 00:19:49,440
complicated machinery and you know a

00:19:47,280 --> 00:19:52,400
full cloud native platform

00:19:49,440 --> 00:19:53,760
brought up for us on demand and then we

00:19:52,400 --> 00:19:54,480
were able to start using continuous

00:19:53,760 --> 00:19:56,160
deployments

00:19:54,480 --> 00:19:58,240
and a lot of these operator platform

00:19:56,160 --> 00:20:00,160
services inside of our workload cluster

00:19:58,240 --> 00:20:01,440
to start getting our applications up and

00:20:00,160 --> 00:20:02,880
running and being able to use some of

00:20:01,440 --> 00:20:06,400
those services as well too that our

00:20:02,880 --> 00:20:07,679
platform team provided for us

00:20:06,400 --> 00:20:09,919
okay let's wrap this up with some

00:20:07,679 --> 00:20:11,440
conclusions now uh basically not

00:20:09,919 --> 00:20:12,880
everyone's going to be an expert on the

00:20:11,440 --> 00:20:15,280
cloud native landscape

00:20:12,880 --> 00:20:16,960
so let's take this expertise of

00:20:15,280 --> 00:20:18,000
knowledge and consolidate it to our

00:20:16,960 --> 00:20:19,840
platform team

00:20:18,000 --> 00:20:21,919
you know they can go through the efforts

00:20:19,840 --> 00:20:23,679
of you know making sense of the

00:20:21,919 --> 00:20:25,120
sprawling landscape and they'll define a

00:20:23,679 --> 00:20:26,720
platform for our developers

00:20:25,120 --> 00:20:29,039
and all of our app teams will get to

00:20:26,720 --> 00:20:30,960
benefit down the road from their efforts

00:20:29,039 --> 00:20:32,799
um you know they'll be able to write

00:20:30,960 --> 00:20:33,760
their apps focus on their business logic

00:20:32,799 --> 00:20:35,280
and they'll get all that great

00:20:33,760 --> 00:20:36,960
functionality right out of the box from

00:20:35,280 --> 00:20:39,440
this platform we've designed

00:20:36,960 --> 00:20:40,080
so basically we can now with crossplane

00:20:39,440 --> 00:20:42,400
we can make

00:20:40,080 --> 00:20:43,679
a an opinionated platform of our own we

00:20:42,400 --> 00:20:46,480
can design apis

00:20:43,679 --> 00:20:47,360
for our developers to get their needs

00:20:46,480 --> 00:20:49,039
serviced

00:20:47,360 --> 00:20:50,720
and today we made one that was a cloud

00:20:49,039 --> 00:20:51,600
native environment with all the fixings

00:20:50,720 --> 00:20:53,760
in it right

00:20:51,600 --> 00:20:54,720
and so we can also share this with the

00:20:53,760 --> 00:20:57,760
ecosystem

00:20:54,720 --> 00:20:59,760
um we've done that here today uh there's

00:20:57,760 --> 00:21:01,840
a link to the github repo that has this

00:20:59,760 --> 00:21:03,520
cloud native reference platform in it

00:21:01,840 --> 00:21:05,120
and so you can use it directly

00:21:03,520 --> 00:21:06,720
or you can use it as a starting point to

00:21:05,120 --> 00:21:09,280
start tweaking and building your own

00:21:06,720 --> 00:21:10,320
cloud native platform um or platforms in

00:21:09,280 --> 00:21:11,679
general because there's a lot of good

00:21:10,320 --> 00:21:13,679
content in there to help you

00:21:11,679 --> 00:21:15,280
get started on that journey you know

00:21:13,679 --> 00:21:18,400
building your own platform apis

00:21:15,280 --> 00:21:19,440
with crossplane so thank you so much for

00:21:18,400 --> 00:21:20,480
attending and

00:21:19,440 --> 00:21:23,919
i think we're going to get into some

00:21:20,480 --> 00:21:23,919

YouTube URL: https://www.youtube.com/watch?v=38rSsVYhK-w


