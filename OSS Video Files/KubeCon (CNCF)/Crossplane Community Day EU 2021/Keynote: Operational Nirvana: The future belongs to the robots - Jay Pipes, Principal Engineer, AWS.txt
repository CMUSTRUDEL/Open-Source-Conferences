Title: Keynote: Operational Nirvana: The future belongs to the robots - Jay Pipes, Principal Engineer, AWS
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Keynote: Operational Nirvana: The future belongs to the robots - Jay Pipes, Principal Engineer, Amazon Web Services

AWS Controllers for Kubernetes (ACK) lets you define and use AWS service resources directly from Kubernetes. The ACK project has a code generator that is now used for generating the Crossplane AWS provider. In this talk, we will discuss why declarative Kubernetes-native configuration management tools like ACK and Crossplane are so important: they enable a GitOps-centric operational model for safely deploying infrastructure and application resources.
Captions: 
	00:00:00,080 --> 00:00:05,279
hi my name is jay pipes i'm a principal

00:00:02,399 --> 00:00:07,040
engineer on the kubernetes at aws team

00:00:05,279 --> 00:00:09,440
and today i'd like to talk to you a

00:00:07,040 --> 00:00:11,920
little bit about the aws controllers for

00:00:09,440 --> 00:00:14,799
kubernetes project or ack

00:00:11,920 --> 00:00:15,360
but before i tell you about ack let's

00:00:14,799 --> 00:00:18,560
back up

00:00:15,360 --> 00:00:19,119
i want to first talk give you a big

00:00:18,560 --> 00:00:22,240
picture

00:00:19,119 --> 00:00:26,000
view right a bird's eye view of how ack

00:00:22,240 --> 00:00:29,039
fits into the entire kubernetes

00:00:26,000 --> 00:00:31,519
and deployment system uh deployment

00:00:29,039 --> 00:00:35,040
system uh ecosystem sorry

00:00:31,519 --> 00:00:37,040
um if you haven't been

00:00:35,040 --> 00:00:38,960
hiding under a rock over the last three

00:00:37,040 --> 00:00:40,160
years and you may have been because of

00:00:38,960 --> 00:00:42,000
cobit and all that but

00:00:40,160 --> 00:00:43,680
if you haven't you've probably heard

00:00:42,000 --> 00:00:46,879
about get ops right

00:00:43,680 --> 00:00:50,239
git ops is sort of like the latest uh

00:00:46,879 --> 00:00:52,640
latest craze in the devops and

00:00:50,239 --> 00:00:53,440
um deployment community right and at the

00:00:52,640 --> 00:00:55,760
end of the day

00:00:53,440 --> 00:00:56,879
what git ops is it's an operational

00:00:55,760 --> 00:00:59,199
methodology

00:00:56,879 --> 00:01:00,399
for doing safe repeatable software

00:00:59,199 --> 00:01:04,000
deployments

00:01:00,399 --> 00:01:06,080
that's it right um kind of seems a

00:01:04,000 --> 00:01:09,040
little bit marketing speak though

00:01:06,080 --> 00:01:10,640
so maybe you have gone on online and

00:01:09,040 --> 00:01:11,600
like what exactly is git ops and you've

00:01:10,640 --> 00:01:13,200
seen

00:01:11,600 --> 00:01:14,720
these four things that are on your

00:01:13,200 --> 00:01:16,720
screen right now as

00:01:14,720 --> 00:01:19,439
github's best practices right

00:01:16,720 --> 00:01:23,200
declarative configuration management

00:01:19,439 --> 00:01:25,119
humans using git and git-based workflows

00:01:23,200 --> 00:01:27,040
to change the configuration of an

00:01:25,119 --> 00:01:28,640
application

00:01:27,040 --> 00:01:31,040
making sure that all changes are

00:01:28,640 --> 00:01:33,280
observable and verifiable

00:01:31,040 --> 00:01:35,759
and also making sure that robots are

00:01:33,280 --> 00:01:38,960
doing the deployment and not humans

00:01:35,759 --> 00:01:41,680
right so these four best practices

00:01:38,960 --> 00:01:42,399
in isolation yeah they kind of make

00:01:41,680 --> 00:01:44,479
sense

00:01:42,399 --> 00:01:45,920
but for me i know that they it didn't

00:01:44,479 --> 00:01:49,280
really click

00:01:45,920 --> 00:01:53,119
for me internally um until

00:01:49,280 --> 00:01:55,759
i related the first two to each other

00:01:53,119 --> 00:01:57,600
by saying if we use declarative

00:01:55,759 --> 00:02:01,119
configuration

00:01:57,600 --> 00:02:02,000
then we empower humans to use git based

00:02:01,119 --> 00:02:04,240
workflows

00:02:02,000 --> 00:02:06,320
right in order to change the

00:02:04,240 --> 00:02:09,440
configuration of an application

00:02:06,320 --> 00:02:12,800
right so get ops is all about having a

00:02:09,440 --> 00:02:16,319
source repository in git

00:02:12,800 --> 00:02:20,239
usually that contains manifests

00:02:16,319 --> 00:02:21,440
right configuration files that describe

00:02:20,239 --> 00:02:25,200
your deployment

00:02:21,440 --> 00:02:28,239
right that describe the services and

00:02:25,200 --> 00:02:31,200
the staple sets and the deployment gamo

00:02:28,239 --> 00:02:34,080
files in kubernetes right the ingresses

00:02:31,200 --> 00:02:35,280
all those kinds of kubernetes specific

00:02:34,080 --> 00:02:38,319
objects right

00:02:35,280 --> 00:02:40,560
those go into manifests in a

00:02:38,319 --> 00:02:41,519
source repository and when you want to

00:02:40,560 --> 00:02:45,200
make a change

00:02:41,519 --> 00:02:47,440
to any of those configurations we do so

00:02:45,200 --> 00:02:48,800
do a git commit and push those

00:02:47,440 --> 00:02:51,920
configuration changes

00:02:48,800 --> 00:02:52,879
up to usually github github is the most

00:02:51,920 --> 00:02:56,000
popular

00:02:52,879 --> 00:02:59,360
uh source control um

00:02:56,000 --> 00:03:01,120
uh platform at the moment right and so

00:02:59,360 --> 00:03:03,599
you make a change to the configuration

00:03:01,120 --> 00:03:04,640
file of you know something involved in

00:03:03,599 --> 00:03:07,440
your application

00:03:04,640 --> 00:03:08,640
you do a git commit and push that change

00:03:07,440 --> 00:03:11,680
up to

00:03:08,640 --> 00:03:14,400
usually github and create a pull request

00:03:11,680 --> 00:03:14,800
and that pull requests then you know

00:03:14,400 --> 00:03:17,040
your

00:03:14,800 --> 00:03:18,319
your teammates can approve you know

00:03:17,040 --> 00:03:20,319
review that

00:03:18,319 --> 00:03:22,400
change to a configuration just like they

00:03:20,319 --> 00:03:25,040
would a a piece of code

00:03:22,400 --> 00:03:25,440
a change to to part of your application

00:03:25,040 --> 00:03:28,159
code

00:03:25,440 --> 00:03:29,920
right and they either approve or deny

00:03:28,159 --> 00:03:33,200
that particular change

00:03:29,920 --> 00:03:34,239
well what's important here is that that

00:03:33,200 --> 00:03:37,360
is the end

00:03:34,239 --> 00:03:41,200
of the human interaction with git

00:03:37,360 --> 00:03:45,200
right humans stop there once

00:03:41,200 --> 00:03:48,400
um once the pull request

00:03:45,200 --> 00:03:51,519
or you know configuration request

00:03:48,400 --> 00:03:54,400
change request is approved and merged

00:03:51,519 --> 00:03:55,439
that's the end of the human interaction

00:03:54,400 --> 00:03:57,680
in get ops

00:03:55,439 --> 00:03:57,680
right

00:03:58,640 --> 00:04:05,040
after the changes are merged and

00:04:01,920 --> 00:04:07,200
uh using you know after a

00:04:05,040 --> 00:04:08,560
configuration change is merged into a

00:04:07,200 --> 00:04:10,560
git repository

00:04:08,560 --> 00:04:11,680
then the robots take over and we'll get

00:04:10,560 --> 00:04:15,040
to that in a second

00:04:11,680 --> 00:04:17,040
so why does kubernetes fit really well

00:04:15,040 --> 00:04:18,720
into a git ops model well at the end of

00:04:17,040 --> 00:04:21,040
the day kubernetes

00:04:18,720 --> 00:04:22,639
has a kubernetes resource model right

00:04:21,040 --> 00:04:25,520
that is all declarative

00:04:22,639 --> 00:04:28,000
right you have a set of these yaml

00:04:25,520 --> 00:04:28,320
manifests that describe a staple sect

00:04:28,000 --> 00:04:31,040
and

00:04:28,320 --> 00:04:31,919
a deployment and a service and an

00:04:31,040 --> 00:04:35,040
ingress

00:04:31,919 --> 00:04:37,919
and um persistent volume claims

00:04:35,040 --> 00:04:40,400
right all of these kubernetes native

00:04:37,919 --> 00:04:42,479
concepts kubernetes native resources

00:04:40,400 --> 00:04:43,440
they're described using a declarative

00:04:42,479 --> 00:04:46,479
format

00:04:43,440 --> 00:04:49,440
right that's why get ups and kubernetes

00:04:46,479 --> 00:04:52,479
sort of fit together so well

00:04:49,440 --> 00:04:54,560
well just like kubernetes

00:04:52,479 --> 00:04:56,880
and get ops fit together really well for

00:04:54,560 --> 00:04:59,360
kubernetes native resources like

00:04:56,880 --> 00:05:00,320
stateful sets and deployments and

00:04:59,360 --> 00:05:03,039
services

00:05:00,320 --> 00:05:03,600
well what crossplane brings into the mix

00:05:03,039 --> 00:05:05,919
is that

00:05:03,600 --> 00:05:07,840
now with cross-plane crds custom

00:05:05,919 --> 00:05:11,600
resource definitions that are

00:05:07,840 --> 00:05:14,080
themselves kubernetes resource manifests

00:05:11,600 --> 00:05:14,960
now you can declare everything to do

00:05:14,080 --> 00:05:17,360
with your application

00:05:14,960 --> 00:05:19,120
and your infrastructure using the same

00:05:17,360 --> 00:05:22,080
kubernetes resource model

00:05:19,120 --> 00:05:23,360
right so crossplane brings the

00:05:22,080 --> 00:05:26,720
everything bit

00:05:23,360 --> 00:05:30,080
into uh into the get ops world

00:05:26,720 --> 00:05:31,840
so the second two second pair of best

00:05:30,080 --> 00:05:35,680
practices in get ops

00:05:31,840 --> 00:05:38,479
is all about observing and verifying

00:05:35,680 --> 00:05:40,400
changes to those configuration files

00:05:38,479 --> 00:05:43,199
that are stored in the git repo

00:05:40,400 --> 00:05:43,919
and i like to put them together and say

00:05:43,199 --> 00:05:47,600
if

00:05:43,919 --> 00:05:51,280
all resources all resource changes

00:05:47,600 --> 00:05:54,560
are verifiable and observable then

00:05:51,280 --> 00:05:56,960
we enable robots to do the deployment

00:05:54,560 --> 00:05:58,000
of those configuration changes out into

00:05:56,960 --> 00:05:59,520
a target

00:05:58,000 --> 00:06:02,080
environment whether that target

00:05:59,520 --> 00:06:06,400
environment is the kubernetes cluster

00:06:02,080 --> 00:06:10,319
or it's aws cloud or

00:06:06,400 --> 00:06:13,440
google cloud or azure it doesn't matter

00:06:10,319 --> 00:06:16,560
so flux cd

00:06:13,440 --> 00:06:19,680
right that is the canonical git ops

00:06:16,560 --> 00:06:21,280
robot if you will that is doing

00:06:19,680 --> 00:06:22,800
at the end of the day is doing a coupe

00:06:21,280 --> 00:06:25,680
cuddle apply right

00:06:22,800 --> 00:06:27,759
it's automating the process of applying

00:06:25,680 --> 00:06:29,120
the manifests that are stored in a git

00:06:27,759 --> 00:06:32,800
repository

00:06:29,120 --> 00:06:35,120
and in doing so actuating those desired

00:06:32,800 --> 00:06:36,080
state changes that are stored in those

00:06:35,120 --> 00:06:39,919
manifests

00:06:36,080 --> 00:06:39,919
out into production

00:06:41,039 --> 00:06:45,120
so if we think about changes to

00:06:43,039 --> 00:06:48,639
kubernetes resources

00:06:45,120 --> 00:06:52,639
being observed by kubernetes controllers

00:06:48,639 --> 00:06:54,960
and things like flux cd well

00:06:52,639 --> 00:06:56,479
now we can think about changes to all

00:06:54,960 --> 00:06:59,280
resources

00:06:56,479 --> 00:07:00,880
being observed by any sort of kubernetes

00:06:59,280 --> 00:07:02,639
controller

00:07:00,880 --> 00:07:04,720
cross crossplane has a set of

00:07:02,639 --> 00:07:06,960
controllers that are

00:07:04,720 --> 00:07:08,319
kubernetes custom controllers they're

00:07:06,960 --> 00:07:13,199
listing for

00:07:08,319 --> 00:07:16,479
new changed and deleted custom resources

00:07:13,199 --> 00:07:19,599
of of uh api kind that are

00:07:16,479 --> 00:07:22,639
related to the cross plane ecosystem

00:07:19,599 --> 00:07:25,039
so when say um you

00:07:22,639 --> 00:07:25,919
create a new database instance or a

00:07:25,039 --> 00:07:29,759
message queue

00:07:25,919 --> 00:07:30,000
or an a role right an identity role and

00:07:29,759 --> 00:07:33,280
i

00:07:30,000 --> 00:07:36,880
am role um you will

00:07:33,280 --> 00:07:40,479
store that desired configuration

00:07:36,880 --> 00:07:43,599
resource right in your git repository

00:07:40,479 --> 00:07:44,879
push up a change to that and create a

00:07:43,599 --> 00:07:48,479
pull request

00:07:44,879 --> 00:07:51,840
and at that point um flux cd

00:07:48,479 --> 00:07:53,919
will kick in and apply that particular

00:07:51,840 --> 00:07:54,879
change after the pull request has been

00:07:53,919 --> 00:07:57,120
approved

00:07:54,879 --> 00:07:59,039
and the controllers whether they are

00:07:57,120 --> 00:08:00,319
kubernetes controllers or their cross

00:07:59,039 --> 00:08:03,599
plane controllers

00:08:00,319 --> 00:08:06,960
pick up that state change and attempt to

00:08:03,599 --> 00:08:09,840
consistently and constantly reconcile

00:08:06,960 --> 00:08:12,240
the desired state to be the latest

00:08:09,840 --> 00:08:16,400
observed state

00:08:12,240 --> 00:08:18,879
so if we put all these things together

00:08:16,400 --> 00:08:20,639
we like well i like to say this is an

00:08:18,879 --> 00:08:24,240
operational nirvana

00:08:20,639 --> 00:08:26,720
right we're we're able to declare

00:08:24,240 --> 00:08:29,199
the configuration of our entire system

00:08:26,720 --> 00:08:32,159
not just the kubernetes native resources

00:08:29,199 --> 00:08:34,719
like deployments and staple sets but

00:08:32,159 --> 00:08:37,839
because we're integrating crossplane

00:08:34,719 --> 00:08:40,880
and kubernetes and flux and the

00:08:37,839 --> 00:08:41,680
git platform like github we now can

00:08:40,880 --> 00:08:43,599
describe

00:08:41,680 --> 00:08:45,200
all of the resources all of our

00:08:43,599 --> 00:08:47,839
infrastructure resources all of our

00:08:45,200 --> 00:08:50,080
kubernetes native application resources

00:08:47,839 --> 00:08:50,959
all using the same format all using the

00:08:50,080 --> 00:08:54,560
same

00:08:50,959 --> 00:08:56,959
git based workflow right where humans

00:08:54,560 --> 00:08:58,560
uh are responsible for approving the

00:08:56,959 --> 00:09:00,160
pull requests that describe those

00:08:58,560 --> 00:09:02,640
changes in configuration

00:09:00,160 --> 00:09:04,000
and robots are responsible for actually

00:09:02,640 --> 00:09:06,800
deploying things

00:09:04,000 --> 00:09:07,519
right okay so i spent all this time

00:09:06,800 --> 00:09:11,360
talking about

00:09:07,519 --> 00:09:15,360
get ops well what about

00:09:11,360 --> 00:09:18,560
ack where does ack come into play well

00:09:15,360 --> 00:09:19,440
it depends ack is actually two different

00:09:18,560 --> 00:09:22,720
parts

00:09:19,440 --> 00:09:26,160
there's a code generator inside ack that

00:09:22,720 --> 00:09:28,480
consumes api model files aws api model

00:09:26,160 --> 00:09:31,760
files like the s3 api and the rds

00:09:28,480 --> 00:09:35,839
api and produces

00:09:31,760 --> 00:09:39,120
go code for translating

00:09:35,839 --> 00:09:40,320
those apis into the kubernetes resource

00:09:39,120 --> 00:09:43,920
model

00:09:40,320 --> 00:09:46,800
now that eight the the cogenerate

00:09:43,920 --> 00:09:47,839
code generator inside ack called ack

00:09:46,800 --> 00:09:50,959
generate

00:09:47,839 --> 00:09:54,640
it has a an extensible and

00:09:50,959 --> 00:09:57,760
flexible producer pipeline

00:09:54,640 --> 00:09:58,560
in the first part of that pipeline we

00:09:57,760 --> 00:10:01,440
can

00:09:58,560 --> 00:10:02,480
take those api models from the aws

00:10:01,440 --> 00:10:06,560
services

00:10:02,480 --> 00:10:10,880
and output the cross plane provider aws

00:10:06,560 --> 00:10:12,560
module in another way of running the ack

00:10:10,880 --> 00:10:15,760
generate code generator

00:10:12,560 --> 00:10:16,399
we can consume those api files and

00:10:15,760 --> 00:10:19,360
output

00:10:16,399 --> 00:10:19,760
individual custom kubernetes controllers

00:10:19,360 --> 00:10:22,160
one

00:10:19,760 --> 00:10:24,240
for each aws service and we call these

00:10:22,160 --> 00:10:27,279
the ack service controllers

00:10:24,240 --> 00:10:29,120
so depending on whether you want to take

00:10:27,279 --> 00:10:32,160
advantage of crossplanes

00:10:29,120 --> 00:10:34,000
cross-cloud provider and sort of

00:10:32,160 --> 00:10:36,079
higher level abstraction model or

00:10:34,000 --> 00:10:39,040
whether you want to install

00:10:36,079 --> 00:10:40,720
individual aws service controllers in

00:10:39,040 --> 00:10:44,399
your kubernetes cluster

00:10:40,720 --> 00:10:44,399
we can do both in ack

00:10:44,800 --> 00:10:48,480
one thing uh before i wrap up here i

00:10:47,200 --> 00:10:49,440
want to make sure that everyone

00:10:48,480 --> 00:10:53,360
understands that

00:10:49,440 --> 00:10:55,360
ack it's 100 open source and we're 100

00:10:53,360 --> 00:10:56,720
collaborative with the open source cross

00:10:55,360 --> 00:10:59,360
plane and

00:10:56,720 --> 00:11:00,000
elsewhere communities right there's also

00:10:59,360 --> 00:11:04,000
there's nothing

00:11:00,000 --> 00:11:06,959
specific about uh eks

00:11:04,000 --> 00:11:07,680
uh so ack the service controllers inside

00:11:06,959 --> 00:11:09,279
of ack

00:11:07,680 --> 00:11:10,800
and the code that is generated by the

00:11:09,279 --> 00:11:13,920
ack code generator

00:11:10,800 --> 00:11:16,079
is not specific to eks they will run on

00:11:13,920 --> 00:11:16,959
any target kubernetes cluster regardless

00:11:16,079 --> 00:11:19,440
of whether you

00:11:16,959 --> 00:11:20,000
choose to use the the manage control

00:11:19,440 --> 00:11:23,519
plane

00:11:20,000 --> 00:11:24,480
um options of eks so for those of you

00:11:23,519 --> 00:11:26,959
who are interested

00:11:24,480 --> 00:11:29,360
in learning a little bit more about ack

00:11:26,959 --> 00:11:32,320
um please come join us

00:11:29,360 --> 00:11:32,880
we we have the the on the screen here is

00:11:32,320 --> 00:11:36,959
our

00:11:32,880 --> 00:11:37,519
uh our root um url to our our community

00:11:36,959 --> 00:11:40,640
project

00:11:37,519 --> 00:11:42,399
on github um i'm always hanging out on

00:11:40,640 --> 00:11:43,760
the provider aws channel on the

00:11:42,399 --> 00:11:46,640
kubernetes slack

00:11:43,760 --> 00:11:47,440
i'm also on the cross plane slack i look

00:11:46,640 --> 00:11:50,800
forward to

00:11:47,440 --> 00:11:51,279
working uh with the crossplane community

00:11:50,800 --> 00:11:54,560
even

00:11:51,279 --> 00:11:57,839
even more and greater in the future and

00:11:54,560 --> 00:11:57,839

YouTube URL: https://www.youtube.com/watch?v=AvIFoVQt4p8


