Title: Panel: Bringing The Cloud To Kubernetes - Moderated by: Nic Cope, Upbound
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Panel: Bringing The Cloud To Kubernetes - Matthew Christopher, Microsoft, Dan Mangum, Upbound, Joyce Ma, Google and Jay Pipes, AWS, Moderated by: Nic Cope, Upbound

Organisations are increasingly realising that the Kubernetes approach to infrastructure orchestration can be applied to much more than just containers. Each of the major cloud providers are working on projects that use the Kubernetes Resource Model (KRM) to model their APIs. Similarly, Crossplane aims to model all cloud APIs (and more!) using a superset of the KRM that we think of as the Crossplane Resource Model (or XRM). In this session engineers from the Amazon Controllers for Kubernetes (ACK), Azure Service Operator (ASO), Google Config Connector, and Crossplane projects will discuss the common challenges of building a consistent experience atop a myriad of heterogeneous cloud APIs.
Captions: 
	00:00:00,080 --> 00:00:06,240
all right we're recording now

00:00:03,120 --> 00:00:08,559
hi everyone and welcome to

00:00:06,240 --> 00:00:09,519
our cosplaying community day panel where

00:00:08,559 --> 00:00:14,160
we're going to talk about

00:00:09,519 --> 00:00:16,400
bringing the cloud to kubernetes so

00:00:14,160 --> 00:00:17,840
today we've got a panel assembled of

00:00:16,400 --> 00:00:21,279
folks who are

00:00:17,840 --> 00:00:24,080
experts in taking cloud apis

00:00:21,279 --> 00:00:26,160
and modeling them as as kubernetes

00:00:24,080 --> 00:00:27,840
customer resources

00:00:26,160 --> 00:00:28,640
uh i'm not sure what we'll talk about

00:00:27,840 --> 00:00:30,400
later i'm not sure if there's a

00:00:28,640 --> 00:00:32,559
consistent name for what that problem

00:00:30,400 --> 00:00:34,239
or the software that does that is that's

00:00:32,559 --> 00:00:35,040
that's the interesting thing in and of

00:00:34,239 --> 00:00:37,040
itself

00:00:35,040 --> 00:00:39,680
so first i just want to uh introduce

00:00:37,040 --> 00:00:42,320
everyone that we have on the call here

00:00:39,680 --> 00:00:44,640
we have uh joyce ma from the google

00:00:42,320 --> 00:00:46,800
config connector team

00:00:44,640 --> 00:00:49,680
we've got matt christopher from the

00:00:46,800 --> 00:00:52,480
azure service operator team

00:00:49,680 --> 00:00:54,000
j pipes not pipez as he tried to trick

00:00:52,480 --> 00:00:56,320
me than it was before

00:00:54,000 --> 00:00:57,360
from the ack from the amazon controllers

00:00:56,320 --> 00:01:00,480
for kubernetes

00:00:57,360 --> 00:01:01,600
team uh and uh my co-worker colleague

00:01:00,480 --> 00:01:04,159
from upbound uh

00:01:01,600 --> 00:01:06,560
dan mangum maintainer of the crossplane

00:01:04,159 --> 00:01:10,240
project

00:01:06,560 --> 00:01:12,320
so today we're gonna sort of

00:01:10,240 --> 00:01:14,320
just as i said before think about how we

00:01:12,320 --> 00:01:16,720
how we could build a consistent krm

00:01:14,320 --> 00:01:19,759
experience on top of the cloud apis

00:01:16,720 --> 00:01:21,920
um but first i i wanna

00:01:19,759 --> 00:01:23,439
ask matt what what should we call these

00:01:21,920 --> 00:01:26,080
things

00:01:23,439 --> 00:01:26,880
yeah controllers operators operators

00:01:26,080 --> 00:01:29,200
yeah

00:01:26,880 --> 00:01:31,200
at least you know internally in my team

00:01:29,200 --> 00:01:31,680
we talk about this as sort of yeah like

00:01:31,200 --> 00:01:33,920
a

00:01:31,680 --> 00:01:34,960
cloud operator or like an azure operator

00:01:33,920 --> 00:01:37,759
for the cloud

00:01:34,960 --> 00:01:39,360
um you know something like that uh we

00:01:37,759 --> 00:01:40,079
tend to prefer the the operator

00:01:39,360 --> 00:01:41,680
nomenclature

00:01:40,079 --> 00:01:43,439
as opposed to i don't know something

00:01:41,680 --> 00:01:44,399
else like a plug-in or add-on or

00:01:43,439 --> 00:01:46,159
something but

00:01:44,399 --> 00:01:48,240
i i think you're right that i haven't

00:01:46,159 --> 00:01:53,040
heard a a industry accepted

00:01:48,240 --> 00:01:56,640
term for for what this thing is

00:01:53,040 --> 00:01:58,560
so jay yours is um you've used the the

00:01:56,640 --> 00:02:00,960
controllers pilots but it used to be the

00:01:58,560 --> 00:02:02,640
aws service operator right was there

00:02:00,960 --> 00:02:04,240
any real thought in changing to

00:02:02,640 --> 00:02:05,360
controllers or was it just a nice

00:02:04,240 --> 00:02:07,920
acronym

00:02:05,360 --> 00:02:08,959
uh well a i'm terrible at naming things

00:02:07,920 --> 00:02:11,840
just generally

00:02:08,959 --> 00:02:12,319
um i'm like super flat and explicit

00:02:11,840 --> 00:02:14,879
about

00:02:12,319 --> 00:02:16,000
everything so yeah these are a bunch of

00:02:14,879 --> 00:02:19,599
controllers

00:02:16,000 --> 00:02:23,200
that do aws stuff on kubernetes

00:02:19,599 --> 00:02:24,319
so it was aws controllers for kubernetes

00:02:23,200 --> 00:02:27,200
um

00:02:24,319 --> 00:02:28,080
yeah i i actually like uh config

00:02:27,200 --> 00:02:31,280
connector

00:02:28,080 --> 00:02:33,519
as like the the the um

00:02:31,280 --> 00:02:35,840
the brand or like you know because

00:02:33,519 --> 00:02:36,879
that's what it is right these are

00:02:35,840 --> 00:02:39,519
connector

00:02:36,879 --> 00:02:40,480
pieces between the kubernetes api and

00:02:39,519 --> 00:02:44,080
resource model

00:02:40,480 --> 00:02:45,280
and the cloud providers apis

00:02:44,080 --> 00:02:46,640
so it's like connecting the

00:02:45,280 --> 00:02:48,239
configuration that's stored in

00:02:46,640 --> 00:02:50,720
kubernetes with

00:02:48,239 --> 00:02:52,160
the cloud um so i kind of i kind of like

00:02:50,720 --> 00:02:56,160
that um

00:02:52,160 --> 00:02:59,040
but yeah uh operator was

00:02:56,160 --> 00:03:00,800
these are these are more than just an

00:02:59,040 --> 00:03:01,440
operator right like the connection of a

00:03:00,800 --> 00:03:04,640
crd

00:03:01,440 --> 00:03:06,879
and a custom controller they are

00:03:04,640 --> 00:03:08,560
specific types of controllers that

00:03:06,879 --> 00:03:09,440
provide that sort of integration bridge

00:03:08,560 --> 00:03:11,519
right between

00:03:09,440 --> 00:03:12,959
kubernetes land and the cloud provider

00:03:11,519 --> 00:03:16,959
land so

00:03:12,959 --> 00:03:20,159
i like the connector uh part of things

00:03:16,959 --> 00:03:22,159
yeah me too which which brings me to

00:03:20,159 --> 00:03:24,000
i i think i'm a little hazy on the

00:03:22,159 --> 00:03:24,959
timeline but i think config connector

00:03:24,000 --> 00:03:27,440
was one of the

00:03:24,959 --> 00:03:28,480
the first projects out there doing doing

00:03:27,440 --> 00:03:31,360
this kind of thing

00:03:28,480 --> 00:03:32,000
joyce do you have uh any background on

00:03:31,360 --> 00:03:35,120
sort of

00:03:32,000 --> 00:03:37,040
what inspired uh the gcp team the google

00:03:35,120 --> 00:03:38,879
cloud team to start config connector

00:03:37,040 --> 00:03:41,120
what was the what was the

00:03:38,879 --> 00:03:43,200
uh background behind that project being

00:03:41,120 --> 00:03:46,959
bootstrapped

00:03:43,200 --> 00:03:49,040
yeah exactly so um basically we've been

00:03:46,959 --> 00:03:52,159
heard from customers for years

00:03:49,040 --> 00:03:55,840
that uh they want to move to cloud

00:03:52,159 --> 00:03:56,720
and meanwhile they want a consistent

00:03:55,840 --> 00:04:00,400
environment

00:03:56,720 --> 00:04:03,439
like on-prem and in cloud

00:04:00,400 --> 00:04:06,799
and they also prefer like

00:04:03,439 --> 00:04:11,439
consistent user experiments across

00:04:06,799 --> 00:04:11,439
apis so in that sense

00:04:11,519 --> 00:04:17,840
imperative apis is naturally

00:04:15,040 --> 00:04:19,359
limited um providing this consistent

00:04:17,840 --> 00:04:21,280
user experience

00:04:19,359 --> 00:04:23,040
and we started looking at this

00:04:21,280 --> 00:04:26,639
declarative world

00:04:23,040 --> 00:04:29,840
and at that time it was back in 2018

00:04:26,639 --> 00:04:32,960
there were like already um

00:04:29,840 --> 00:04:35,360
deployment manager in goog in gcp that

00:04:32,960 --> 00:04:37,919
supported declarative

00:04:35,360 --> 00:04:38,720
configuration of the apis and also there

00:04:37,919 --> 00:04:42,560
were like

00:04:38,720 --> 00:04:45,919
terraform google provider those are

00:04:42,560 --> 00:04:45,919
good toolings but

00:04:46,160 --> 00:04:53,199
both of them has its own shortcomings

00:04:50,000 --> 00:04:55,280
and meanwhile we see that there are

00:04:53,199 --> 00:04:56,080
already customers moving to the

00:04:55,280 --> 00:04:59,440
kubernetes

00:04:56,080 --> 00:05:00,479
platform so we think it's better to

00:04:59,440 --> 00:05:02,720
provide

00:05:00,479 --> 00:05:05,199
a more consistent user experience so

00:05:02,720 --> 00:05:06,400
they can manage their applications not

00:05:05,199 --> 00:05:09,680
only

00:05:06,400 --> 00:05:11,360
for cloud but also for other native

00:05:09,680 --> 00:05:14,240
kubernetes resources

00:05:11,360 --> 00:05:16,479
so we decided that we want to build

00:05:14,240 --> 00:05:19,840
something on top of kubernetes

00:05:16,479 --> 00:05:21,759
to manage gcp

00:05:19,840 --> 00:05:23,039
nice is that is that similar for you

00:05:21,759 --> 00:05:26,240
matt and jay is that

00:05:23,039 --> 00:05:26,240
sort of the same kind of story

00:05:26,400 --> 00:05:30,639
uh yeah i mean uh very similar uh for us

00:05:29,600 --> 00:05:32,479
at azure it's

00:05:30,639 --> 00:05:33,840
you know we wanted a kubernetes first

00:05:32,479 --> 00:05:35,600
approach right even though there are

00:05:33,840 --> 00:05:37,840
other ways to do declarative

00:05:35,600 --> 00:05:39,360
um apis if if you're in the kubernetes

00:05:37,840 --> 00:05:40,080
world it feels kind of awkward to like

00:05:39,360 --> 00:05:42,240
have to step

00:05:40,080 --> 00:05:43,759
out of that in order to interact with

00:05:42,240 --> 00:05:45,600
the cloud especially because you're

00:05:43,759 --> 00:05:46,720
going to be deploying your core service

00:05:45,600 --> 00:05:49,280
in kubernetes

00:05:46,720 --> 00:05:51,039
and then your core services dependencies

00:05:49,280 --> 00:05:52,320
like a db or something you all of a

00:05:51,039 --> 00:05:54,080
sudden you can't deploy

00:05:52,320 --> 00:05:55,840
through kubernetes it's kind of awkward

00:05:54,080 --> 00:05:58,160
um so that was one of the the big

00:05:55,840 --> 00:06:00,800
drivers for for us at least

00:05:58,160 --> 00:06:02,000
yeah it's exactly the same for us i mean

00:06:00,800 --> 00:06:06,000
uh

00:06:02,000 --> 00:06:08,880
we have had cloud formation right for

00:06:06,000 --> 00:06:09,440
well what seems like forever right and

00:06:08,880 --> 00:06:12,880
and then

00:06:09,440 --> 00:06:16,160
and there's also you know terraform for

00:06:12,880 --> 00:06:18,800
um another sort of declarative way of uh

00:06:16,160 --> 00:06:20,639
driving infrastructure changes but yeah

00:06:18,800 --> 00:06:23,360
just like matt said we had

00:06:20,639 --> 00:06:25,360
customers coming to us saying hey we we

00:06:23,360 --> 00:06:28,960
prefer the kubernetes

00:06:25,360 --> 00:06:29,840
api we prefer the consistent kubernetes

00:06:28,960 --> 00:06:32,880
resource model

00:06:29,840 --> 00:06:34,720
and api machinery and especially our

00:06:32,880 --> 00:06:37,840
devs prefer that

00:06:34,720 --> 00:06:41,280
right so i what we're

00:06:37,840 --> 00:06:45,840
what we've struggled with really is that

00:06:41,280 --> 00:06:47,120
um most of our customers or we've found

00:06:45,840 --> 00:06:48,400
they have a they have a lot of

00:06:47,120 --> 00:06:50,080
application development teams that

00:06:48,400 --> 00:06:52,960
prefer to use the kubernetes

00:06:50,080 --> 00:06:54,560
model um but a lot of these customers

00:06:52,960 --> 00:06:56,240
are huge enterprises right and they

00:06:54,560 --> 00:06:57,120
still have these like central i.t teams

00:06:56,240 --> 00:06:59,680
and a lot of those

00:06:57,120 --> 00:07:01,039
central i.t teams also like to work with

00:06:59,680 --> 00:07:03,759
cloud formation or they may use

00:07:01,039 --> 00:07:08,080
terraform or other solutions so

00:07:03,759 --> 00:07:11,199
it's sort of a mixed bag and ack

00:07:08,080 --> 00:07:13,680
the aws controllers for kubernetes is is

00:07:11,199 --> 00:07:15,120
primarily focused on that first set

00:07:13,680 --> 00:07:17,280
right the application developers that

00:07:15,120 --> 00:07:18,479
prefer to use the the kubernetes

00:07:17,280 --> 00:07:21,919
language um

00:07:18,479 --> 00:07:23,680
and we've had yeah some some interesting

00:07:21,919 --> 00:07:26,880
discussions like how do you

00:07:23,680 --> 00:07:28,400
work in this hybrid environment where

00:07:26,880 --> 00:07:29,280
you've got a central i.t team that's

00:07:28,400 --> 00:07:31,919
used to

00:07:29,280 --> 00:07:33,759
either imperative configuration changes

00:07:31,919 --> 00:07:36,319
or using cloud formation

00:07:33,759 --> 00:07:37,440
and things like that versus the app dev

00:07:36,319 --> 00:07:39,599
teams that are

00:07:37,440 --> 00:07:41,039
uh using and preferring the kubernetes

00:07:39,599 --> 00:07:45,199
model

00:07:41,039 --> 00:07:47,759
right right so

00:07:45,199 --> 00:07:49,039
dan do you do you i i was hesitant to

00:07:47,759 --> 00:07:50,879
not hesitate really but

00:07:49,039 --> 00:07:52,160
every time i ask someone from aws hey

00:07:50,879 --> 00:07:53,520
why did this project start i get the

00:07:52,160 --> 00:07:54,720
same answers because the customers

00:07:53,520 --> 00:07:55,759
wanted it sort of thing and it's

00:07:54,720 --> 00:07:58,639
interesting it was good

00:07:55,759 --> 00:07:59,120
to hear i didn't do that for i know i

00:07:58,639 --> 00:08:00,639
know it's

00:07:59,120 --> 00:08:01,759
it's it's kind of the best answer to the

00:08:00,639 --> 00:08:02,879
question though to be honest you know

00:08:01,759 --> 00:08:04,720
it's much better than like we thought

00:08:02,879 --> 00:08:07,039
it'd be cool or whatever

00:08:04,720 --> 00:08:08,639
uh which which brings me to dan do you

00:08:07,039 --> 00:08:11,280
do you know the sort of have you

00:08:08,639 --> 00:08:13,039
done any archaeological spelunking to uh

00:08:11,280 --> 00:08:14,319
to find out sort of the history of the

00:08:13,039 --> 00:08:15,759
cross playing project do you feel like

00:08:14,319 --> 00:08:17,520
you can answer the question of like

00:08:15,759 --> 00:08:20,400
where did crossland come from

00:08:17,520 --> 00:08:21,759
yeah i'm i know at least from um i was

00:08:20,400 --> 00:08:23,120
aware of the project when it was

00:08:21,759 --> 00:08:25,280
initially announced

00:08:23,120 --> 00:08:26,160
and um but but wasn't yet with the

00:08:25,280 --> 00:08:28,400
company so

00:08:26,160 --> 00:08:30,479
part of joining upbound and working

00:08:28,400 --> 00:08:32,479
full-time on crossplane was kind of like

00:08:30,479 --> 00:08:33,760
buying into the mission i guess um so i

00:08:32,479 --> 00:08:35,279
can speak to that at least

00:08:33,760 --> 00:08:37,839
and i know something that really

00:08:35,279 --> 00:08:40,240
motivated me to work on the project

00:08:37,839 --> 00:08:42,080
um was this idea of kind of like a

00:08:40,240 --> 00:08:43,200
unified control plane writer a common

00:08:42,080 --> 00:08:45,680
way to address

00:08:43,200 --> 00:08:47,040
uh cloud providers and and it's grown to

00:08:45,680 --> 00:08:48,800
really more than just cloud providers

00:08:47,040 --> 00:08:50,880
right to address apis

00:08:48,800 --> 00:08:52,880
um kubernetes happening to be the

00:08:50,880 --> 00:08:55,200
vehicle for facilitating that

00:08:52,880 --> 00:08:57,040
um so i think uh you know a lot of

00:08:55,200 --> 00:08:58,399
things are similar to the things that

00:08:57,040 --> 00:09:01,200
other folks on this panel have already

00:08:58,399 --> 00:09:02,880
said uh but with the added layer of kind

00:09:01,200 --> 00:09:05,279
of like a common interface

00:09:02,880 --> 00:09:06,000
um and there were at the beginning there

00:09:05,279 --> 00:09:08,160
were some

00:09:06,000 --> 00:09:09,440
pieces of kind of the composability

00:09:08,160 --> 00:09:10,800
story right piecing these different

00:09:09,440 --> 00:09:12,080
things together and building higher

00:09:10,800 --> 00:09:14,240
level abstractions

00:09:12,080 --> 00:09:15,120
um but most of that has developed over

00:09:14,240 --> 00:09:17,600
time since the

00:09:15,120 --> 00:09:18,880
the initial impetus yeah my

00:09:17,600 --> 00:09:22,000
understanding is really

00:09:18,880 --> 00:09:25,279
mentioned the service broker stuff yet

00:09:22,000 --> 00:09:26,560
as far as like componentization or

00:09:25,279 --> 00:09:29,519
whatever composite

00:09:26,560 --> 00:09:30,320
composition things like that um you know

00:09:29,519 --> 00:09:34,160
we

00:09:30,320 --> 00:09:37,600
i i don't know i i i guess i

00:09:34,160 --> 00:09:38,000
uh if i'm putting my archaeologist's hat

00:09:37,600 --> 00:09:40,560
on

00:09:38,000 --> 00:09:41,279
right uh crossplan and a number of other

00:09:40,560 --> 00:09:43,760
things

00:09:41,279 --> 00:09:44,880
started out sort of in the same time

00:09:43,760 --> 00:09:48,160
frame that

00:09:44,880 --> 00:09:48,880
the open service broker concept and

00:09:48,160 --> 00:09:51,680
community

00:09:48,880 --> 00:09:52,640
kind of started to to become a thing and

00:09:51,680 --> 00:09:54,160
i know that

00:09:52,640 --> 00:09:56,000
the service broker's kind of fallen out

00:09:54,160 --> 00:09:58,720
of out of favor and out of

00:09:56,000 --> 00:09:59,440
out of style but um i think it's

00:09:58,720 --> 00:10:01,600
important to

00:09:59,440 --> 00:10:02,959
to bring up that topic as far as like

00:10:01,600 --> 00:10:05,680
our archaeological

00:10:02,959 --> 00:10:07,760
dig here that's that's very true i've

00:10:05,680 --> 00:10:09,440
got to admit i'm somewhat uh personally

00:10:07,760 --> 00:10:11,200
ignorant about the history of the sort

00:10:09,440 --> 00:10:13,440
of open service broker uh

00:10:11,200 --> 00:10:14,240
project initiative i will say for those

00:10:13,440 --> 00:10:15,680
of you who are

00:10:14,240 --> 00:10:16,800
we're recording this weeks ahead of time

00:10:15,680 --> 00:10:18,079
but for those of you who are watching

00:10:16,800 --> 00:10:18,800
this conference now i believe there will

00:10:18,079 --> 00:10:20,800
be a talk

00:10:18,800 --> 00:10:22,399
uh that that relates cosplay to the open

00:10:20,800 --> 00:10:25,600
service broker and uh

00:10:22,399 --> 00:10:26,959
from uh from jana to censure i believe

00:10:25,600 --> 00:10:27,760
if i recall correctly so that'll be a

00:10:26,959 --> 00:10:29,200
cool one to keep

00:10:27,760 --> 00:10:30,399
keep an eye out for but yes that's a

00:10:29,200 --> 00:10:30,959
really good one to call out that they

00:10:30,399 --> 00:10:33,519
were

00:10:30,959 --> 00:10:35,200
definitely sort of um forging the path

00:10:33,519 --> 00:10:35,680
with regards to sort of thinking about

00:10:35,200 --> 00:10:37,120
okay

00:10:35,680 --> 00:10:38,399
deploying all these apps to kubernetes

00:10:37,120 --> 00:10:40,000
now what do you do if you want

00:10:38,399 --> 00:10:41,920
infrastructure that doesn't

00:10:40,000 --> 00:10:44,839
you know run statefully on your on your

00:10:41,920 --> 00:10:47,600
kubernetes clusters

00:10:44,839 --> 00:10:48,959
um so just to provide a little bit more

00:10:47,600 --> 00:10:49,440
color and take this with a big grade of

00:10:48,959 --> 00:10:52,800
salt

00:10:49,440 --> 00:10:54,079
because uh dan and i were i think maybe

00:10:52,800 --> 00:10:55,279
two of the first people working on

00:10:54,079 --> 00:10:57,360
crossplane who weren't

00:10:55,279 --> 00:10:59,120
founders of the project who so so we

00:10:57,360 --> 00:11:00,399
were there was a period before it was

00:10:59,120 --> 00:11:02,240
open sourced when it was sort of an

00:11:00,399 --> 00:11:04,959
experimental thing that

00:11:02,240 --> 00:11:07,360
uh folks folks like uh luke and ilya and

00:11:04,959 --> 00:11:09,760
jared and bissan were working on

00:11:07,360 --> 00:11:11,360
uh and i believe that they it actually

00:11:09,760 --> 00:11:12,800
was an accidental thing where they were

00:11:11,360 --> 00:11:14,880
trying to go build something else

00:11:12,800 --> 00:11:16,880
and then they found it really useful to

00:11:14,880 --> 00:11:18,720
to apply something a little bit like the

00:11:16,880 --> 00:11:20,240
persistent volume claim pattern to just

00:11:18,720 --> 00:11:21,120
databases and buckets and things like

00:11:20,240 --> 00:11:22,560
that

00:11:21,120 --> 00:11:23,680
and then they built that to support the

00:11:22,560 --> 00:11:24,399
other thing that they were building and

00:11:23,680 --> 00:11:26,079
like oh

00:11:24,399 --> 00:11:27,760
hey this is useful we should open source

00:11:26,079 --> 00:11:28,560
this and like get this out there sort of

00:11:27,760 --> 00:11:30,720
thing and

00:11:28,560 --> 00:11:32,720
i believe that's where uh where cross

00:11:30,720 --> 00:11:34,640
playing came from

00:11:32,720 --> 00:11:35,920
so i also just going back to dan and i

00:11:34,640 --> 00:11:37,600
don't talk about cosplaying too much but

00:11:35,920 --> 00:11:39,200
i do want to uh get uh ask dan

00:11:37,600 --> 00:11:40,399
can you can you give a little context

00:11:39,200 --> 00:11:41,920
down crossplane kind of approaches

00:11:40,399 --> 00:11:44,079
things a little bit differently than the

00:11:41,920 --> 00:11:46,800
other clouds right like uh

00:11:44,079 --> 00:11:48,160
more than the clouds i should say so so

00:11:46,800 --> 00:11:49,200
the other projects represented all this

00:11:48,160 --> 00:11:52,240
cool focus

00:11:49,200 --> 00:11:54,000
uh on on one cloud sort of thing and

00:11:52,240 --> 00:11:55,360
delivering you know all the apis of that

00:11:54,000 --> 00:11:57,279
cloud whereas crossplaying scope is a

00:11:55,360 --> 00:11:59,680
little broader right

00:11:57,279 --> 00:12:01,279
yeah that's exactly right and and there

00:11:59,680 --> 00:12:03,440
is a lot of crossover in terms of

00:12:01,279 --> 00:12:06,399
representing uh resources as

00:12:03,440 --> 00:12:07,680
kubernetes objects um that being said uh

00:12:06,399 --> 00:12:10,320
if you want to build

00:12:07,680 --> 00:12:11,360
a layer on top of that that allows you

00:12:10,320 --> 00:12:13,680
to

00:12:11,360 --> 00:12:14,560
interchange these resources as common

00:12:13,680 --> 00:12:17,120
building blocks

00:12:14,560 --> 00:12:19,680
uh you have to have some uh interface

00:12:17,120 --> 00:12:22,000
right that all of them satisfy right so

00:12:19,680 --> 00:12:23,279
just like if you were doing object

00:12:22,000 --> 00:12:24,800
oriented programming or something like

00:12:23,279 --> 00:12:25,600
that if you want to be able to change

00:12:24,800 --> 00:12:28,480
things out

00:12:25,600 --> 00:12:30,560
um like for like uh you need to be able

00:12:28,480 --> 00:12:33,440
to address them in the same way

00:12:30,560 --> 00:12:36,000
so crossplane uh has a common run time

00:12:33,440 --> 00:12:38,320
as well as some common embedded types

00:12:36,000 --> 00:12:39,600
that it puts into all of its objects um

00:12:38,320 --> 00:12:42,720
so i i know jay

00:12:39,600 --> 00:12:46,240
actually mentioned earlier today um that

00:12:42,720 --> 00:12:48,639
it's kind of like uh the ack types have

00:12:46,240 --> 00:12:49,279
kind of the top level spec of a resource

00:12:48,639 --> 00:12:50,720
um

00:12:49,279 --> 00:12:52,639
you know the fields that are actually

00:12:50,720 --> 00:12:54,560
going directly to aws whereas with

00:12:52,639 --> 00:12:56,240
crossplane we kind of have a container

00:12:54,560 --> 00:12:57,760
for those sorts of fields

00:12:56,240 --> 00:13:00,160
and then the common fields on top of

00:12:57,760 --> 00:13:01,120
that so just as an example of some

00:13:00,160 --> 00:13:03,440
things that

00:13:01,120 --> 00:13:04,800
would be common between resources the

00:13:03,440 --> 00:13:06,800
way they reference each other

00:13:04,800 --> 00:13:08,480
the way they produce connection secrets

00:13:06,800 --> 00:13:09,680
the way they report whether they're

00:13:08,480 --> 00:13:10,880
ready or healthy

00:13:09,680 --> 00:13:13,200
those are all things that we need to be

00:13:10,880 --> 00:13:14,639
consistent with so that we can

00:13:13,200 --> 00:13:16,880
you know compose them into a higher

00:13:14,639 --> 00:13:20,000
level abstraction and aggregate up

00:13:16,880 --> 00:13:21,120
uh some of those components

00:13:20,000 --> 00:13:23,600
i think another place where sort of

00:13:21,120 --> 00:13:25,440
cross-plains approach gets interesting

00:13:23,600 --> 00:13:27,200
uh goes back to what we were talking

00:13:25,440 --> 00:13:29,120
about before with regards to potentially

00:13:27,200 --> 00:13:30,880
integrating with like legacy systems and

00:13:29,120 --> 00:13:33,279
things like that because we

00:13:30,880 --> 00:13:34,880
opened up the uh you know there's only

00:13:33,279 --> 00:13:36,320
so much that's implemented so far but

00:13:34,880 --> 00:13:38,240
you know we just released like a vsphere

00:13:36,320 --> 00:13:40,240
provider for example so

00:13:38,240 --> 00:13:42,000
you can mix and match your you know

00:13:40,240 --> 00:13:43,360
cloud of choice with maybe

00:13:42,000 --> 00:13:44,720
i hadn't you know maybe your cloud of

00:13:43,360 --> 00:13:46,560
choice especially i don't want to paint

00:13:44,720 --> 00:13:49,279
freesphere is purely legacy stuff

00:13:46,560 --> 00:13:50,320
um but uh you know if you do have a

00:13:49,279 --> 00:13:51,839
different environment sort of thing

00:13:50,320 --> 00:13:54,399
let's say if you're moving from

00:13:51,839 --> 00:13:56,399
from azure to aws or vice versa you can

00:13:54,399 --> 00:13:59,760
you can kind of do both consistently or

00:13:56,399 --> 00:14:02,560
theoretically if you were using um

00:13:59,760 --> 00:14:04,240
we don't have a ton of uh old school

00:14:02,560 --> 00:14:05,360
bare metal stuff we have like an equinix

00:14:04,240 --> 00:14:06,560
provider but i don't really think

00:14:05,360 --> 00:14:07,839
they're very old-school so

00:14:06,560 --> 00:14:09,600
but if you were on bit or you could

00:14:07,839 --> 00:14:11,360
hypothetically have a kubernetes uh

00:14:09,600 --> 00:14:13,279
sorry a crossplay provider that you

00:14:11,360 --> 00:14:14,959
could sort of mix and match there

00:14:13,279 --> 00:14:16,639
or you could imagine like having a you

00:14:14,959 --> 00:14:18,399
know a provider that just goes and runs

00:14:16,639 --> 00:14:18,800
terraform or cloud formation for you if

00:14:18,399 --> 00:14:21,519
you

00:14:18,800 --> 00:14:22,720
if you wanted to so this this kind of

00:14:21,519 --> 00:14:23,760
gets back a little bit i think one thing

00:14:22,720 --> 00:14:28,560
that crossplane has

00:14:23,760 --> 00:14:30,480
has really focused on uh is the is

00:14:28,560 --> 00:14:32,160
thinking about the separation of

00:14:30,480 --> 00:14:33,519
concerns between sort of like platform

00:14:32,160 --> 00:14:37,120
teams doing part of the job

00:14:33,519 --> 00:14:38,639
and uh and then sort of the consumers

00:14:37,120 --> 00:14:40,000
of of sort of platform teams of the

00:14:38,639 --> 00:14:41,760
customers and platform teams doing

00:14:40,000 --> 00:14:44,720
another part of the job

00:14:41,760 --> 00:14:45,120
is that a dynamic uh joist that you see

00:14:44,720 --> 00:14:46,959
for

00:14:45,120 --> 00:14:48,320
config connector users who are the main

00:14:46,959 --> 00:14:49,680
people who you see using config

00:14:48,320 --> 00:14:52,399
connector is it sort of mostly

00:14:49,680 --> 00:14:53,120
sres or mostly sort of sres sort of just

00:14:52,399 --> 00:14:54,800
offer config

00:14:53,120 --> 00:14:56,560
connector as a service so that the

00:14:54,800 --> 00:14:58,560
average application developer the person

00:14:56,560 --> 00:15:00,240
who writes deployment might also write

00:14:58,560 --> 00:15:02,160
a cloud sql instance or something like

00:15:00,240 --> 00:15:05,760
that

00:15:02,160 --> 00:15:08,800
yeah so um we identify

00:15:05,760 --> 00:15:11,880
our customer our target customers are

00:15:08,800 --> 00:15:13,680
like platform teams and platform

00:15:11,880 --> 00:15:17,440
administrators

00:15:13,680 --> 00:15:21,279
who are like design designing

00:15:17,440 --> 00:15:24,560
building and setting up their

00:15:21,279 --> 00:15:28,079
centralized infrastructure and

00:15:24,560 --> 00:15:32,000
i think those are our main customers

00:15:28,079 --> 00:15:34,240
and that they might create a

00:15:32,000 --> 00:15:35,600
general infrastructure for the entire

00:15:34,240 --> 00:15:38,880
organization

00:15:35,600 --> 00:15:42,399
or they might create infrastructure

00:15:38,880 --> 00:15:45,759
on demand for the application teams

00:15:42,399 --> 00:15:49,839
so basically we consider those are our

00:15:45,759 --> 00:15:52,480
target customers on the other hand

00:15:49,839 --> 00:15:53,600
application teams can definitely use us

00:15:52,480 --> 00:15:56,880
but

00:15:53,600 --> 00:16:00,240
i guess it really depends on

00:15:56,880 --> 00:16:03,040
like what they how they

00:16:00,240 --> 00:16:03,519
like design their infrastructure or how

00:16:03,040 --> 00:16:06,800
they

00:16:03,519 --> 00:16:09,920
design their own workflow but from

00:16:06,800 --> 00:16:11,199
our perspective like platform and means

00:16:09,920 --> 00:16:14,240
are

00:16:11,199 --> 00:16:16,480
are our target customers makes sense

00:16:14,240 --> 00:16:17,519
and i think i've seen i i know that

00:16:16,480 --> 00:16:20,959
google uh

00:16:17,519 --> 00:16:23,519
has some examples uh on github of

00:16:20,959 --> 00:16:25,920
building abstractions on top of cloud uh

00:16:23,519 --> 00:16:29,279
sorry on top of config getting to types

00:16:25,920 --> 00:16:29,600
but uh google typically seems to prefer

00:16:29,279 --> 00:16:31,440
to

00:16:29,600 --> 00:16:32,880
to do those abstractions client-side

00:16:31,440 --> 00:16:33,920
right i think i've seen like those tools

00:16:32,880 --> 00:16:35,920
like kbt

00:16:33,920 --> 00:16:37,759
uh the way there's some examples of how

00:16:35,920 --> 00:16:38,480
you can have sort of use kpt to render

00:16:37,759 --> 00:16:40,959
out some

00:16:38,480 --> 00:16:42,000
some tools is that sort of something

00:16:40,959 --> 00:16:43,519
that that maybe

00:16:42,000 --> 00:16:47,519
would be more focused to application

00:16:43,519 --> 00:16:51,120
developers rather than uh platform teams

00:16:47,519 --> 00:16:54,320
um yeah so i think like

00:16:51,120 --> 00:16:57,120
uh cat is part of it's definitely like

00:16:54,320 --> 00:16:58,480
a like a new thing that is used to

00:16:57,120 --> 00:17:01,120
integrate with

00:16:58,480 --> 00:17:02,839
other toolings on the like kubernetes

00:17:01,120 --> 00:17:05,600
ecosystem

00:17:02,839 --> 00:17:09,120
um the thing about

00:17:05,600 --> 00:17:12,319
uh like config connector is it's used to

00:17:09,120 --> 00:17:15,600
mainly manage the like manage

00:17:12,319 --> 00:17:18,720
the control plan of the resources and

00:17:15,600 --> 00:17:20,079
uh for a lot of the application use

00:17:18,720 --> 00:17:22,319
cases

00:17:20,079 --> 00:17:25,199
they might be focused on more on data

00:17:22,319 --> 00:17:28,319
plan and so that's why we consider

00:17:25,199 --> 00:17:31,600
like managing the infrastructure

00:17:28,319 --> 00:17:34,240
as the main use case for example we have

00:17:31,600 --> 00:17:35,600
examples of creating resource hierarchy

00:17:34,240 --> 00:17:37,679
which is basically

00:17:35,600 --> 00:17:38,640
create the organization create the

00:17:37,679 --> 00:17:40,880
folders

00:17:38,640 --> 00:17:42,000
and create different photos for

00:17:40,880 --> 00:17:45,679
different teams

00:17:42,000 --> 00:17:49,600
set up impermissions and set up

00:17:45,679 --> 00:17:51,840
networking connections so those are

00:17:49,600 --> 00:17:54,080
actually something we find the config

00:17:51,840 --> 00:17:57,600
connector will be really useful

00:17:54,080 --> 00:18:00,400
because it's providing the consistent

00:17:57,600 --> 00:18:00,799
template consistent user experience and

00:18:00,400 --> 00:18:04,080
the

00:18:00,799 --> 00:18:06,080
similar infrastructure can be set up for

00:18:04,080 --> 00:18:07,200
different teams with several

00:18:06,080 --> 00:18:10,799
configurations

00:18:07,200 --> 00:18:14,960
by variables supported by capt

00:18:10,799 --> 00:18:16,000
so also so the entire workflow can be

00:18:14,960 --> 00:18:20,799
simplified

00:18:16,000 --> 00:18:22,559
and like yeah

00:18:20,799 --> 00:18:24,640
so i want to i want to sort of ask a

00:18:22,559 --> 00:18:28,160
simple variant of this question

00:18:24,640 --> 00:18:29,440
to matt because uh one whenever i think

00:18:28,160 --> 00:18:32,240
about

00:18:29,440 --> 00:18:33,120
managing um what we in crosstalk called

00:18:32,240 --> 00:18:34,640
high fidelity

00:18:33,120 --> 00:18:36,960
or maybe a more common way to put it

00:18:34,640 --> 00:18:40,160
would be sort of the granular uh

00:18:36,960 --> 00:18:41,760
custom resources that map to a cloud api

00:18:40,160 --> 00:18:43,840
a lot of folks come to this problem

00:18:41,760 --> 00:18:45,440
thinking oh i want a database and

00:18:43,840 --> 00:18:46,720
there's just going to be an api that is

00:18:45,440 --> 00:18:49,760
you know my database

00:18:46,720 --> 00:18:50,559
and you know in in some cases looking at

00:18:49,760 --> 00:18:52,400
uj

00:18:50,559 --> 00:18:54,720
you know the api for an s3 bucket is

00:18:52,400 --> 00:18:57,679
like 25 different api calls

00:18:54,720 --> 00:18:58,480
um you know because it is 19 just for

00:18:57,679 --> 00:19:01,440
the update

00:18:58,480 --> 00:19:03,840
pass yes 19 separate api calls to update

00:19:01,440 --> 00:19:06,000
a bucket attribute anyway go ahead

00:19:03,840 --> 00:19:07,360
but so so matt i always use azure as an

00:19:06,000 --> 00:19:08,400
example here because azure does

00:19:07,360 --> 00:19:10,400
something that i think is really good

00:19:08,400 --> 00:19:11,440
where when you create a as far as i'm

00:19:10,400 --> 00:19:14,880
aware when you create

00:19:11,440 --> 00:19:15,600
a postgres sql server for example um it

00:19:14,880 --> 00:19:17,360
will usually

00:19:15,600 --> 00:19:18,720
uh it will not allow any traffic and

00:19:17,360 --> 00:19:20,559
then you have to go get some firewall

00:19:18,720 --> 00:19:22,880
rules uh to either allow a virtual net

00:19:20,559 --> 00:19:24,160
or uh or just an id range to access it

00:19:22,880 --> 00:19:24,960
which is you know secured by default

00:19:24,160 --> 00:19:28,480
which is good

00:19:24,960 --> 00:19:30,400
but then it changes the the the problem

00:19:28,480 --> 00:19:31,840
uh from just go give me a database to

00:19:30,400 --> 00:19:32,880
give me a database and configure some

00:19:31,840 --> 00:19:34,320
network security and you know

00:19:32,880 --> 00:19:35,919
potentially go make a virtual network or

00:19:34,320 --> 00:19:38,160
something like that if you need to

00:19:35,919 --> 00:19:40,000
um so is this also something that the

00:19:38,160 --> 00:19:41,440
aso users are sort of

00:19:40,000 --> 00:19:42,960
pretty comfortable doing they're sort of

00:19:41,440 --> 00:19:44,799
people who are infrastructure types who

00:19:42,960 --> 00:19:47,440
are using this

00:19:44,799 --> 00:19:49,039
yeah so so for the most part we you know

00:19:47,440 --> 00:19:51,280
people who are using aso

00:19:49,039 --> 00:19:52,480
are as you say exactly you know they

00:19:51,280 --> 00:19:54,320
understand

00:19:52,480 --> 00:19:56,240
what resources what resources are being

00:19:54,320 --> 00:19:58,160
deployed and they sort of are like

00:19:56,240 --> 00:19:59,919
if not platform administrators at least

00:19:58,160 --> 00:20:00,880
they're they're bridging the gap between

00:19:59,919 --> 00:20:02,159
sort of a platform

00:20:00,880 --> 00:20:03,919
they're like the platform admin for

00:20:02,159 --> 00:20:05,200
their team right um so we have some

00:20:03,919 --> 00:20:06,960
customers where like

00:20:05,200 --> 00:20:08,480
they've set up aso and they're using you

00:20:06,960 --> 00:20:09,840
know kubernetes are back and stuff such

00:20:08,480 --> 00:20:11,600
that they're delegating platform

00:20:09,840 --> 00:20:12,640
administration to an individual team

00:20:11,600 --> 00:20:14,480
within their company

00:20:12,640 --> 00:20:16,080
um and each team sort of does their own

00:20:14,480 --> 00:20:19,120
platform admin and then the

00:20:16,080 --> 00:20:20,640
aso is maintained by the the core team

00:20:19,120 --> 00:20:21,919
but they don't they don't concern

00:20:20,640 --> 00:20:24,400
themselves with

00:20:21,919 --> 00:20:26,000
uh what a particular team in their

00:20:24,400 --> 00:20:27,679
company is deploying they just give them

00:20:26,000 --> 00:20:28,640
you know sort of carte blanche to deploy

00:20:27,679 --> 00:20:30,640
whatever they like

00:20:28,640 --> 00:20:32,159
as long as it's you know in their name

00:20:30,640 --> 00:20:35,600
space um

00:20:32,159 --> 00:20:37,919
and so yeah the the general case is that

00:20:35,600 --> 00:20:39,280
customers sort of understand how to

00:20:37,919 --> 00:20:40,720
configure these things

00:20:39,280 --> 00:20:42,559
um and one of the things that they like

00:20:40,720 --> 00:20:43,520
about sort of the operator pattern and

00:20:42,559 --> 00:20:45,919
and aso is

00:20:43,520 --> 00:20:47,280
hey like i need to create like six of

00:20:45,919 --> 00:20:48,000
these things or whatever as you say like

00:20:47,280 --> 00:20:51,039
the postgres

00:20:48,000 --> 00:20:53,919
server a db some firewall rules um

00:20:51,039 --> 00:20:55,440
etc and it's it's really nice in

00:20:53,919 --> 00:20:57,520
kubernetes to be able to do that by just

00:20:55,440 --> 00:20:59,280
like applying you know six

00:20:57,520 --> 00:21:00,480
six resources all at the same time like

00:20:59,280 --> 00:21:01,600
you don't have to worry about ordering

00:21:00,480 --> 00:21:03,200
you don't have to worry about

00:21:01,600 --> 00:21:05,440
like does this come before that it's

00:21:03,200 --> 00:21:07,280
it's sort of just to make it so

00:21:05,440 --> 00:21:09,360
and then you wait a little bit and then

00:21:07,280 --> 00:21:11,440
it's all there uh and so that's one of

00:21:09,360 --> 00:21:13,039
like the big selling points i think of

00:21:11,440 --> 00:21:14,960
of not just aso but sort of

00:21:13,039 --> 00:21:16,080
the general pattern that kubernetes is

00:21:14,960 --> 00:21:18,240
espousing is like hey

00:21:16,080 --> 00:21:19,600
you don't have to concern yourself with

00:21:18,240 --> 00:21:21,679
uh you know jay mentioned there's these

00:21:19,600 --> 00:21:23,520
19 apis but presumably like

00:21:21,679 --> 00:21:25,440
you don't have to think about that when

00:21:23,520 --> 00:21:27,440
you're when you're actually interacting

00:21:25,440 --> 00:21:29,440
uh at sort of the crd level which is

00:21:27,440 --> 00:21:32,880
which is a big win

00:21:29,440 --> 00:21:35,120
exactly change the spec

00:21:32,880 --> 00:21:36,720
and let the controller deal with all the

00:21:35,120 --> 00:21:40,400
ugliness behind the scenes

00:21:36,720 --> 00:21:43,600
right and which s3 update attribute api

00:21:40,400 --> 00:21:44,400
call it's going to make you know um hide

00:21:43,600 --> 00:21:46,080
all of that

00:21:44,400 --> 00:21:47,840
implementation that imperative

00:21:46,080 --> 00:21:49,919
implementation goop

00:21:47,840 --> 00:21:52,240
in the controller and allow the

00:21:49,919 --> 00:21:54,240
developer experience to just be one of

00:21:52,240 --> 00:21:55,760
just tell me your desired state that's

00:21:54,240 --> 00:21:59,360
it

00:21:55,760 --> 00:22:00,000
so jay speak i i'm not 100 sure about

00:21:59,360 --> 00:22:02,880
this but

00:22:00,000 --> 00:22:04,159
i was reading uh a few weeks back now on

00:22:02,880 --> 00:22:06,720
the uh on the ack

00:22:04,159 --> 00:22:08,159
uh github repo and was doing a bit of

00:22:06,720 --> 00:22:09,919
research myself to answer this like who

00:22:08,159 --> 00:22:10,400
was the target audience of ack and was

00:22:09,919 --> 00:22:12,000
that

00:22:10,400 --> 00:22:13,520
correct i'm thinking that sk also has a

00:22:12,000 --> 00:22:15,440
bit of a bent toward letting people

00:22:13,520 --> 00:22:17,280
build higher order things on top of

00:22:15,440 --> 00:22:18,640
ack stuff like is there a is there a

00:22:17,280 --> 00:22:19,760
thought there of like hey someone might

00:22:18,640 --> 00:22:22,320
want to build

00:22:19,760 --> 00:22:23,760
their own controller and pull in some

00:22:22,320 --> 00:22:27,840
ack controllers or did i

00:22:23,760 --> 00:22:27,840
today sort of not quite get that one

00:22:34,080 --> 00:22:37,520
you are muted jay

00:22:38,559 --> 00:22:42,880
jay's uh experiencing technical

00:22:40,320 --> 00:22:42,880
difficulties

00:22:42,960 --> 00:22:48,559
so let me while he figures that out

00:22:46,400 --> 00:22:50,080
let me let me roll on back to uh back to

00:22:48,559 --> 00:22:51,280
dan so now sort of it's interesting to

00:22:50,080 --> 00:22:54,400
hear that sort of from

00:22:51,280 --> 00:22:55,120
uh from aso and config connectors

00:22:54,400 --> 00:22:58,880
perspective

00:22:55,120 --> 00:22:59,600
um we're mostly seeing platform teams or

00:22:58,880 --> 00:23:01,679
sre

00:22:59,600 --> 00:23:02,720
folks being the the people sort of doing

00:23:01,679 --> 00:23:04,400
the end to end speeding up the

00:23:02,720 --> 00:23:06,720
infrastructure sort of thing

00:23:04,400 --> 00:23:08,080
dan crossbane sort of uh has this

00:23:06,720 --> 00:23:09,280
approach of

00:23:08,080 --> 00:23:10,720
separation of concerns do you want to

00:23:09,280 --> 00:23:12,159
give me a bit of context around what

00:23:10,720 --> 00:23:14,799
cosplay does there

00:23:12,159 --> 00:23:16,880
yeah absolutely and and honestly it's

00:23:14,799 --> 00:23:18,720
it's very compatible uh with what

00:23:16,880 --> 00:23:20,159
both matt and joyce have said so far in

00:23:18,720 --> 00:23:22,159
that uh the actual

00:23:20,159 --> 00:23:24,240
granular as we call them managed

00:23:22,159 --> 00:23:26,480
resources are things that we don't

00:23:24,240 --> 00:23:27,919
expect you know non-infrastructure

00:23:26,480 --> 00:23:28,559
admins to interact with because they're

00:23:27,919 --> 00:23:30,080
generally

00:23:28,559 --> 00:23:31,679
pretty complex right and understanding

00:23:30,080 --> 00:23:33,679
how they work together requires a fair

00:23:31,679 --> 00:23:35,679
amount of background knowledge

00:23:33,679 --> 00:23:38,080
and that really informs the composition

00:23:35,679 --> 00:23:40,960
model which i was alluding to earlier

00:23:38,080 --> 00:23:43,120
another thing that is kind of a maybe

00:23:40,960 --> 00:23:44,080
the the most controversial topic i'll

00:23:43,120 --> 00:23:46,559
say between

00:23:44,080 --> 00:23:48,400
uh crossplan and some other projects is

00:23:46,559 --> 00:23:51,679
the cluster scoping

00:23:48,400 --> 00:23:53,120
of those managed resources right so um

00:23:51,679 --> 00:23:55,039
all of these managed resources the

00:23:53,120 --> 00:23:56,880
granular ones exist at the cluster scope

00:23:55,039 --> 00:23:58,480
while while most other projects whether

00:23:56,880 --> 00:23:59,679
they're you know managing infrastructure

00:23:58,480 --> 00:24:01,679
or doing other

00:23:59,679 --> 00:24:03,760
uh are at the name space scope right for

00:24:01,679 --> 00:24:05,840
isolation and our back uh privileges and

00:24:03,760 --> 00:24:07,919
that sort of thing

00:24:05,840 --> 00:24:09,679
the reason why crossplane takes that

00:24:07,919 --> 00:24:11,120
approach is because the composition

00:24:09,679 --> 00:24:12,720
model allows you to define that

00:24:11,120 --> 00:24:14,159
abstraction and expose it at the

00:24:12,720 --> 00:24:16,080
namespace

00:24:14,159 --> 00:24:17,919
so then you're able to put the

00:24:16,080 --> 00:24:19,520
permission permissioning you're able to

00:24:17,919 --> 00:24:20,880
raise it to the level of abstraction

00:24:19,520 --> 00:24:23,919
right so you're able to say

00:24:20,880 --> 00:24:24,400
um developers interact with this uh you

00:24:23,919 --> 00:24:26,159
know

00:24:24,400 --> 00:24:27,919
friendly interface or this friendly

00:24:26,159 --> 00:24:29,840
resource uh that has very

00:24:27,919 --> 00:24:32,559
simple fields that map to things that we

00:24:29,840 --> 00:24:34,640
want and enforce policy we want

00:24:32,559 --> 00:24:36,640
and we can govern their ability to do

00:24:34,640 --> 00:24:38,960
that at the name space scope

00:24:36,640 --> 00:24:40,080
but then it renders out those resources

00:24:38,960 --> 00:24:41,440
at the cluster scope

00:24:40,080 --> 00:24:44,400
and that's where the infrastructure

00:24:41,440 --> 00:24:46,080
admins do those kind of operations which

00:24:44,400 --> 00:24:48,880
config connector and aso you know are

00:24:46,080 --> 00:24:50,880
providing them the ability to do as well

00:24:48,880 --> 00:24:54,799
and actually control those those

00:24:50,880 --> 00:24:54,799
granular specific resources

00:24:55,200 --> 00:25:00,799
thanks dan so we've still lost jay i'm

00:24:57,200 --> 00:25:02,159
just gonna over here he comes

00:25:00,799 --> 00:25:04,320
welcome back jenny you didn't miss too

00:25:02,159 --> 00:25:07,760
much

00:25:04,320 --> 00:25:09,200
zoom crashed sorry

00:25:07,760 --> 00:25:11,200
all right well let's let's keep rolling

00:25:09,200 --> 00:25:11,679
on now to some of the sort of maybe more

00:25:11,200 --> 00:25:14,080
interesting

00:25:11,679 --> 00:25:15,520
to those hustle to call at least uh

00:25:14,080 --> 00:25:17,679
technical stuff

00:25:15,520 --> 00:25:18,640
um matt what would you say is sort of

00:25:17,679 --> 00:25:22,080
the biggest

00:25:18,640 --> 00:25:23,520
challenge of of building out something

00:25:22,080 --> 00:25:25,279
like aso

00:25:23,520 --> 00:25:26,799
either technically or logistically

00:25:25,279 --> 00:25:29,840
organizationally

00:25:26,799 --> 00:25:31,200
right um i mean i i would say

00:25:29,840 --> 00:25:33,440
that these two things sort of go hand in

00:25:31,200 --> 00:25:35,120
hand it's it's consistency and scaling

00:25:33,440 --> 00:25:36,559
to the number of resources that they're

00:25:35,120 --> 00:25:36,960
that there are in the cloud right and

00:25:36,559 --> 00:25:39,760
it's

00:25:36,960 --> 00:25:40,240
the the the more you try to scale sort

00:25:39,760 --> 00:25:41,919
of

00:25:40,240 --> 00:25:43,600
sort of manually or by throwing more

00:25:41,919 --> 00:25:45,120
people at it or whatever the harder it

00:25:43,600 --> 00:25:46,799
becomes to sort of maintain that

00:25:45,120 --> 00:25:48,159
consistency as i'm sure you you know

00:25:46,799 --> 00:25:49,520
everybody on the call is familiar with

00:25:48,159 --> 00:25:51,120
and so it's this constant tension

00:25:49,520 --> 00:25:52,320
between like how fast can we go how many

00:25:51,120 --> 00:25:54,640
things can we support

00:25:52,320 --> 00:25:55,360
but then are we giving a uniform

00:25:54,640 --> 00:25:57,120
experience

00:25:55,360 --> 00:25:59,120
are we giving uh you know i think dan

00:25:57,120 --> 00:26:00,240
mentioned earlier like it's the same

00:25:59,120 --> 00:26:02,320
i want to be able to look at the right

00:26:00,240 --> 00:26:02,960
properties and see state i i want to be

00:26:02,320 --> 00:26:05,919
able to

00:26:02,960 --> 00:26:06,320
do references the same um and all that

00:26:05,919 --> 00:26:08,320
and so

00:26:06,320 --> 00:26:09,919
i would say like that's one of the the

00:26:08,320 --> 00:26:11,840
biggest challenges is that constant

00:26:09,919 --> 00:26:14,240
tension between these two things

00:26:11,840 --> 00:26:15,440
and of course you know the team that we

00:26:14,240 --> 00:26:17,919
have uh

00:26:15,440 --> 00:26:19,760
working on aso is just it's such a small

00:26:17,919 --> 00:26:20,320
fraction compared to the team in azure

00:26:19,760 --> 00:26:22,080
that's

00:26:20,320 --> 00:26:24,159
building new things and shipping new

00:26:22,080 --> 00:26:25,120
apis that you know if you look at it

00:26:24,159 --> 00:26:27,200
from sort of a

00:26:25,120 --> 00:26:29,440
person hours perspective there's just no

00:26:27,200 --> 00:26:30,640
way that you know like five or six of us

00:26:29,440 --> 00:26:32,400
could ever keep up with

00:26:30,640 --> 00:26:34,320
however many you know like thousands of

00:26:32,400 --> 00:26:34,960
developers there are producing new apis

00:26:34,320 --> 00:26:36,559
in azure

00:26:34,960 --> 00:26:38,960
and so we've got to come up with some

00:26:36,559 --> 00:26:40,080
way to do something about that

00:26:38,960 --> 00:26:43,520
disconnect

00:26:40,080 --> 00:26:43,520
and that's one of the big challenges

00:26:43,600 --> 00:26:46,640
joyce i know i've spoken to people on

00:26:45,440 --> 00:26:48,000
the comfort connector team and heard

00:26:46,640 --> 00:26:49,120
similar things do you agree that that's

00:26:48,000 --> 00:26:51,600
sort of the biggest challenge or is that

00:26:49,120 --> 00:26:55,520
something else that uh that you'll

00:26:51,600 --> 00:26:58,799
find trickier yeah i completely agree

00:26:55,520 --> 00:27:01,919
like consistency is always um

00:26:58,799 --> 00:27:02,799
a big problem or a big challenge i would

00:27:01,919 --> 00:27:06,240
say

00:27:02,799 --> 00:27:07,200
is it comes together with was scaling

00:27:06,240 --> 00:27:09,679
because the more

00:27:07,200 --> 00:27:11,840
resource your supports the more ash

00:27:09,679 --> 00:27:14,400
cases you were running to

00:27:11,840 --> 00:27:15,279
and the more features you need to

00:27:14,400 --> 00:27:18,840
support

00:27:15,279 --> 00:27:20,159
to cover those edge cases so it's really

00:27:18,840 --> 00:27:24,080
hard

00:27:20,159 --> 00:27:26,799
the lucky part for us is

00:27:24,080 --> 00:27:27,440
we are built on top of declarative

00:27:26,799 --> 00:27:30,799
client

00:27:27,440 --> 00:27:33,840
libraries which they communicate

00:27:30,799 --> 00:27:35,120
with service teams directly and we work

00:27:33,840 --> 00:27:37,600
closely with

00:27:35,120 --> 00:27:38,320
the declarative library team to make

00:27:37,600 --> 00:27:41,600
sure

00:27:38,320 --> 00:27:44,480
like they feature

00:27:41,600 --> 00:27:45,600
or the resources they support aligns

00:27:44,480 --> 00:27:48,640
with

00:27:45,600 --> 00:27:51,120
our customers requests and then they

00:27:48,640 --> 00:27:52,480
can probably delegate their own request

00:27:51,120 --> 00:27:55,760
to the service team

00:27:52,480 --> 00:27:56,159
so it's like there is a layer in between

00:27:55,760 --> 00:27:59,760
us

00:27:56,159 --> 00:28:01,919
and the api teams so dan what's

00:27:59,760 --> 00:28:03,279
what's this like as a maintainer of

00:28:01,919 --> 00:28:05,039
cross plane who is

00:28:03,279 --> 00:28:06,960
you know we have almost the same problem

00:28:05,039 --> 00:28:09,760
but another layer up i think

00:28:06,960 --> 00:28:10,960
right yeah that's exactly right i was

00:28:09,760 --> 00:28:13,919
going to just respond with

00:28:10,960 --> 00:28:15,600
hard and next questions but uh it's

00:28:13,919 --> 00:28:16,720
definitely very challenging

00:28:15,600 --> 00:28:18,880
all the things have already been

00:28:16,720 --> 00:28:22,559
mentioned are applicable for us as well

00:28:18,880 --> 00:28:24,880
with the added uh part of we we are not

00:28:22,559 --> 00:28:26,399
at these companies right so some some

00:28:24,880 --> 00:28:27,120
internal things we don't have access to

00:28:26,399 --> 00:28:29,840
of course

00:28:27,120 --> 00:28:31,440
um and you know we also well no one can

00:28:29,840 --> 00:28:33,120
right now but theoretically in a

00:28:31,440 --> 00:28:35,039
in a future time when we're not in a

00:28:33,120 --> 00:28:36,720
pandemic uh be able to walk down the

00:28:35,039 --> 00:28:38,080
hall and knock on someone's door and ask

00:28:36,720 --> 00:28:40,559
them how an api works

00:28:38,080 --> 00:28:41,919
um that being said uh we definitely had

00:28:40,559 --> 00:28:44,640
awesome partnership with

00:28:41,919 --> 00:28:45,039
the folks on this call right here um in

00:28:44,640 --> 00:28:48,159
being

00:28:45,039 --> 00:28:50,480
able to share some of the generation of

00:28:48,159 --> 00:28:52,000
kind of the uh manual steps for creating

00:28:50,480 --> 00:28:55,120
these resources

00:28:52,000 --> 00:28:57,360
so specifically with aws ack

00:28:55,120 --> 00:28:58,720
and provider aws for crossplane

00:28:57,360 --> 00:29:00,640
currently share a code generation

00:28:58,720 --> 00:29:02,480
pipeline which definitely

00:29:00,640 --> 00:29:04,240
helps accelerate both projects as you

00:29:02,480 --> 00:29:06,320
know they have the context

00:29:04,240 --> 00:29:08,240
um for you know understanding how these

00:29:06,320 --> 00:29:10,320
apis work at an intimate level

00:29:08,240 --> 00:29:12,399
um and we're able to contribute back

00:29:10,320 --> 00:29:14,240
based on our experiences as well

00:29:12,399 --> 00:29:15,919
so that's definitely a factor and then

00:29:14,240 --> 00:29:18,880
one thing we haven't touched on which

00:29:15,919 --> 00:29:20,720
uh i definitely see as a open source

00:29:18,880 --> 00:29:22,799
maintainer as a big

00:29:20,720 --> 00:29:24,960
component is community right uh when you

00:29:22,799 --> 00:29:26,720
get more folks working on things

00:29:24,960 --> 00:29:28,559
you know whatever their background uh

00:29:26,720 --> 00:29:29,360
it's a huge benefit for for driving

00:29:28,559 --> 00:29:32,240
progress

00:29:29,360 --> 00:29:34,880
um so especially since um crossplane has

00:29:32,240 --> 00:29:36,000
joined cncf and had its 1.0 release and

00:29:34,880 --> 00:29:38,159
that sort of thing

00:29:36,000 --> 00:29:39,600
uh we've seen a lot of folks just from

00:29:38,159 --> 00:29:41,520
you know all of the world all different

00:29:39,600 --> 00:29:43,279
backgrounds all different companies

00:29:41,520 --> 00:29:44,960
come together and say you know i'd like

00:29:43,279 --> 00:29:47,279
to learn how to do this because it

00:29:44,960 --> 00:29:49,360
it scratches an itch that i have and

00:29:47,279 --> 00:29:51,840
having that kind of open community

00:29:49,360 --> 00:29:53,200
definitely supports that and um and you

00:29:51,840 --> 00:29:54,960
know hopefully those folks that come

00:29:53,200 --> 00:29:56,240
along and contribute can also grow in

00:29:54,960 --> 00:29:58,159
the community and take on

00:29:56,240 --> 00:30:00,720
larger leadership roles and and take

00:29:58,159 --> 00:30:01,919
something away from contributing as well

00:30:00,720 --> 00:30:03,679
yeah that's that's kind of one of our

00:30:01,919 --> 00:30:05,360
big approaches to scaling is scaling the

00:30:03,679 --> 00:30:05,760
community to scale with the amount of

00:30:05,360 --> 00:30:08,799
work

00:30:05,760 --> 00:30:09,919
of building building this stuff out the

00:30:08,799 --> 00:30:13,520
whole consistency

00:30:09,919 --> 00:30:15,279
uh thing is is really interesting to me

00:30:13,520 --> 00:30:16,559
i think you know we talked about why

00:30:15,279 --> 00:30:17,919
people like to use

00:30:16,559 --> 00:30:19,360
uh kubernetes to manage their

00:30:17,919 --> 00:30:20,880
infrastructure and i think part of sort

00:30:19,360 --> 00:30:22,000
of what we touched on there was roughly

00:30:20,880 --> 00:30:23,039
just tool inconsistency

00:30:22,000 --> 00:30:24,799
they're probably already using

00:30:23,039 --> 00:30:26,000
kubernetes to do other stuff to manage

00:30:24,799 --> 00:30:27,520
their applications

00:30:26,000 --> 00:30:29,919
but i think part of it is because people

00:30:27,520 --> 00:30:32,080
like the the kubernetes resource model

00:30:29,919 --> 00:30:33,120
the krm and i think people like it

00:30:32,080 --> 00:30:34,640
because it's a very consistent

00:30:33,120 --> 00:30:36,080
predictable api and i think a lot of

00:30:34,640 --> 00:30:38,080
what we've all sort of seen you know

00:30:36,080 --> 00:30:39,520
cosplay we call it the xram or the

00:30:38,080 --> 00:30:41,120
the crossplane resource model where

00:30:39,520 --> 00:30:42,799
we're just it's a you know a superset

00:30:41,120 --> 00:30:45,120
of of that and we're just saying hey

00:30:42,799 --> 00:30:46,960
what if we make this more consistent and

00:30:45,120 --> 00:30:50,240
more opinionated to people like ooh

00:30:46,960 --> 00:30:51,360
we like that um but then there's also an

00:30:50,240 --> 00:30:52,559
interesting thing where hypothetically

00:30:51,360 --> 00:30:54,159
you've now got uh

00:30:52,559 --> 00:30:56,159
you know when when where uh when someone

00:30:54,159 --> 00:30:57,840
comes to write a new crossplay provider

00:30:56,159 --> 00:30:59,919
there's different layers at which you

00:30:57,840 --> 00:31:01,279
could ask them to be consistent you

00:30:59,919 --> 00:31:02,480
could just say hey you can go write this

00:31:01,279 --> 00:31:04,399
provider in erlang

00:31:02,480 --> 00:31:05,679
for all we care just have a consistent

00:31:04,399 --> 00:31:07,039
api

00:31:05,679 --> 00:31:08,399
and there are trade-offs there right

00:31:07,039 --> 00:31:09,840
that you need a big enough community for

00:31:08,399 --> 00:31:11,039
that provider where everyone's going to

00:31:09,840 --> 00:31:12,559
be

00:31:11,039 --> 00:31:13,840
uh coming in learning girling

00:31:12,559 --> 00:31:15,200
potentially or like using a different

00:31:13,840 --> 00:31:17,039
tool set building new libraries all that

00:31:15,200 --> 00:31:18,640
kind of thing but but sure

00:31:17,039 --> 00:31:20,080
and especially if that's an open source

00:31:18,640 --> 00:31:21,519
community

00:31:20,080 --> 00:31:23,120
we might want to have that flexibility

00:31:21,519 --> 00:31:24,000
or you could also you know take the

00:31:23,120 --> 00:31:25,360
approach that we've come

00:31:24,000 --> 00:31:27,200
closer to taking say we actually want

00:31:25,360 --> 00:31:28,080
you to build providers mostly a specific

00:31:27,200 --> 00:31:30,320
way using go

00:31:28,080 --> 00:31:31,679
using these libraries etc etc i'm

00:31:30,320 --> 00:31:33,039
guessing

00:31:31,679 --> 00:31:34,880
sort of i know joyce you said that

00:31:33,039 --> 00:31:37,039
you've got sort of dcl uh

00:31:34,880 --> 00:31:38,640
which which i believe is like a go uh

00:31:37,039 --> 00:31:42,240
library right

00:31:38,640 --> 00:31:43,440
um jay at amazon is everyone do you

00:31:42,240 --> 00:31:44,799
think you're gonna get everyone sort of

00:31:43,440 --> 00:31:46,080
pretty consistently building controllers

00:31:44,799 --> 00:31:47,440
just using the ack style

00:31:46,080 --> 00:31:48,640
sort of thing do you ever have issues

00:31:47,440 --> 00:31:49,919
with people saying no i really want to

00:31:48,640 --> 00:31:51,360
go do this with java or something like

00:31:49,919 --> 00:31:54,640
that

00:31:51,360 --> 00:31:55,279
um no we don't really have any uh issues

00:31:54,640 --> 00:31:58,640
with that

00:31:55,279 --> 00:31:58,880
i think it's our our biggest challenges

00:31:58,640 --> 00:32:02,640
are

00:31:58,880 --> 00:32:04,960
primarily people based right i mean

00:32:02,640 --> 00:32:06,559
ack is a set of service controllers

00:32:04,960 --> 00:32:09,519
right um

00:32:06,559 --> 00:32:10,640
that one for each of the service apis so

00:32:09,519 --> 00:32:14,320
one for s3

00:32:10,640 --> 00:32:15,200
rds etc and each of those services is

00:32:14,320 --> 00:32:18,000
backed by

00:32:15,200 --> 00:32:19,120
people at aws right and those service

00:32:18,000 --> 00:32:22,159
teams

00:32:19,120 --> 00:32:22,880
some have a very long history of doing

00:32:22,159 --> 00:32:26,080
things

00:32:22,880 --> 00:32:26,960
their own way some have um a very short

00:32:26,080 --> 00:32:28,559
history and

00:32:26,960 --> 00:32:30,880
are like very comfortable working in the

00:32:28,559 --> 00:32:35,840
open source community some aren't

00:32:30,880 --> 00:32:37,519
um so yeah it's it's been a challenge

00:32:35,840 --> 00:32:40,399
bridging across those different service

00:32:37,519 --> 00:32:42,720
teams for me personally

00:32:40,399 --> 00:32:44,480
i mean it's a challenge i welcome but

00:32:42,720 --> 00:32:46,640
it's definitely been a challenge right

00:32:44,480 --> 00:32:49,120
because i have to sort of explain how

00:32:46,640 --> 00:32:50,960
kubernetes works in addition to

00:32:49,120 --> 00:32:53,120
you know like hey what are our needs

00:32:50,960 --> 00:32:55,919
from an ack perspective

00:32:53,120 --> 00:32:56,399
uh we generate the controller right for

00:32:55,919 --> 00:32:58,320
the

00:32:56,399 --> 00:32:59,440
for the different resources in that

00:32:58,320 --> 00:33:00,720
service api

00:32:59,440 --> 00:33:02,480
and then we work with the service team

00:33:00,720 --> 00:33:03,200
to build tests and and that kind of

00:33:02,480 --> 00:33:06,240
thing

00:33:03,200 --> 00:33:08,480
um so yeah uh the

00:33:06,240 --> 00:33:11,039
the variety of knowledge about

00:33:08,480 --> 00:33:14,159
kubernetes and container ecosystems

00:33:11,039 --> 00:33:17,279
within the service teams at aws has

00:33:14,159 --> 00:33:18,240
has been uh a challenge i'll just put it

00:33:17,279 --> 00:33:20,559
that way

00:33:18,240 --> 00:33:22,159
yeah so we're pretty much at times but

00:33:20,559 --> 00:33:23,200
just to wrap this up i want to you know

00:33:22,159 --> 00:33:24,240
talk about technical challenges and

00:33:23,200 --> 00:33:25,200
things like that i wanna just do a quick

00:33:24,240 --> 00:33:26,720
round of the room and i'm gonna ask

00:33:25,200 --> 00:33:29,840
everyone to give me a you know

00:33:26,720 --> 00:33:31,679
one or two sentence answer of uh what

00:33:29,840 --> 00:33:33,120
what are you most excited about on your

00:33:31,679 --> 00:33:34,960
project at the moment or like what

00:33:33,120 --> 00:33:36,399
what's what's most interesting to you if

00:33:34,960 --> 00:33:38,000
it's not a feature a technical challenge

00:33:36,399 --> 00:33:39,840
or something so

00:33:38,000 --> 00:33:41,120
uh start with joyce what's what's

00:33:39,840 --> 00:33:42,240
excites you the most about conflict

00:33:41,120 --> 00:33:44,159
connector at the moment or what you're

00:33:42,240 --> 00:33:48,159
working on

00:33:44,159 --> 00:33:49,039
oh yeah so um i think the most exciting

00:33:48,159 --> 00:33:52,399
part is

00:33:49,039 --> 00:33:55,600
like customer can actually use convex

00:33:52,399 --> 00:33:58,559
connector to uh manage google

00:33:55,600 --> 00:34:00,320
uh match gcp resources like native

00:33:58,559 --> 00:34:03,519
kubernetes resources

00:34:00,320 --> 00:34:05,760
it's like um like i

00:34:03,519 --> 00:34:06,720
see i've seen a lot of like customer

00:34:05,760 --> 00:34:10,079
quotes about that

00:34:06,720 --> 00:34:12,960
and it's also amazing that we can

00:34:10,079 --> 00:34:14,399
keep full fidelity of those underlying

00:34:12,960 --> 00:34:17,280
gcp resources

00:34:14,399 --> 00:34:17,839
so those are something i'm really

00:34:17,280 --> 00:34:20,560
excited

00:34:17,839 --> 00:34:22,000
about because that's exactly the goal of

00:34:20,560 --> 00:34:26,159
config connector and

00:34:22,000 --> 00:34:29,119
i'm so excited to see customer actually

00:34:26,159 --> 00:34:30,240
feel it yeah yeah it's really exciting

00:34:29,119 --> 00:34:31,919
to see this sort of vision that we've

00:34:30,240 --> 00:34:33,599
all been working on like becoming real

00:34:31,919 --> 00:34:35,679
and being used in production

00:34:33,599 --> 00:34:36,960
environments how about you matt a

00:34:35,679 --> 00:34:38,079
similar answer or do you have a

00:34:36,960 --> 00:34:39,919
different take

00:34:38,079 --> 00:34:42,560
uh well one of the the things that we're

00:34:39,919 --> 00:34:46,159
sort of uh incubating in aso right now

00:34:42,560 --> 00:34:47,760
is azure has a arm and has specs for all

00:34:46,159 --> 00:34:48,000
of the management plane operations are

00:34:47,760 --> 00:34:49,760
in

00:34:48,000 --> 00:34:51,359
open api and so one of the things that

00:34:49,760 --> 00:34:52,800
we're working on is you know i mentioned

00:34:51,359 --> 00:34:54,879
the scaling challenges and the

00:34:52,800 --> 00:34:57,760
consistency challenges and we're sort of

00:34:54,879 --> 00:34:58,320
um pretty close to an alpha now where

00:34:57,760 --> 00:35:01,119
we're

00:34:58,320 --> 00:35:02,160
planning on generating uh as sort of jay

00:35:01,119 --> 00:35:04,720
mentioned

00:35:02,160 --> 00:35:05,839
aws is doing as well uh the controllers

00:35:04,720 --> 00:35:07,599
for all of these

00:35:05,839 --> 00:35:09,599
uh management plane resources from these

00:35:07,599 --> 00:35:10,480
open api specs and so i'm really excited

00:35:09,599 --> 00:35:13,119
to sort of

00:35:10,480 --> 00:35:14,720
hopefully be able to uh knock down one

00:35:13,119 --> 00:35:15,599
block on that challenge of hey can you

00:35:14,720 --> 00:35:17,119
know consistency

00:35:15,599 --> 00:35:18,960
scalability we've got this thing that we

00:35:17,119 --> 00:35:22,160
can generate using open api

00:35:18,960 --> 00:35:24,800
and uh actually you know like 90 or 80

00:35:22,160 --> 00:35:25,359
of the azure resources uh we'll just be

00:35:24,800 --> 00:35:26,560
able to

00:35:25,359 --> 00:35:28,160
code generate and then of course we

00:35:26,560 --> 00:35:29,359
still have to solve testing and all of

00:35:28,160 --> 00:35:32,079
these other problems

00:35:29,359 --> 00:35:34,320
but at least that's one big step toward

00:35:32,079 --> 00:35:36,480
a consistent experience across

00:35:34,320 --> 00:35:38,560
a large number of resources that doesn't

00:35:36,480 --> 00:35:40,000
involve tons and tons of manual effort

00:35:38,560 --> 00:35:40,960
and you know people massaging each and

00:35:40,000 --> 00:35:42,240
every one

00:35:40,960 --> 00:35:44,079
we're sort of lucky in azure because

00:35:42,240 --> 00:35:46,160
there's that uh uniform

00:35:44,079 --> 00:35:47,839
way to deploy through through arm and

00:35:46,160 --> 00:35:49,520
all the specs are there so it's just a

00:35:47,839 --> 00:35:52,079
you know question of writing the code to

00:35:49,520 --> 00:35:53,599
turn it into kubernetes resources

00:35:52,079 --> 00:35:54,800
nice and i want to give a shout out one

00:35:53,599 --> 00:35:55,440
of the things that i'm most excited

00:35:54,800 --> 00:35:58,400
about in

00:35:55,440 --> 00:36:00,079
a novel space in general uh is matt and

00:35:58,400 --> 00:36:02,000
his colleagues over in new zealand put

00:36:00,079 --> 00:36:03,680
together a little proposal on how to do

00:36:02,000 --> 00:36:05,280
versioning of kubernetes resources

00:36:03,680 --> 00:36:06,880
relative to cloud resources which is

00:36:05,280 --> 00:36:08,480
really well thought out really really

00:36:06,880 --> 00:36:11,680
great read i recommend it if you're

00:36:08,480 --> 00:36:14,160
a nerd about this stuff like me uh jay

00:36:11,680 --> 00:36:14,160
how about you

00:36:14,320 --> 00:36:19,200
well i think there's two things i'm most

00:36:16,880 --> 00:36:22,320
most excited about um from a

00:36:19,200 --> 00:36:23,120
user perspective of either crossplane

00:36:22,320 --> 00:36:24,240
users or

00:36:23,120 --> 00:36:26,240
[Music]

00:36:24,240 --> 00:36:27,359
users of ack individual service

00:36:26,240 --> 00:36:30,560
controllers

00:36:27,359 --> 00:36:33,280
i i'm really excited about bringing a

00:36:30,560 --> 00:36:36,400
consistent way of interacting with some

00:36:33,280 --> 00:36:40,079
aws service resources

00:36:36,400 --> 00:36:43,200
using the kubernetes api machinery and

00:36:40,079 --> 00:36:46,960
kubernetes resource model i think that

00:36:43,200 --> 00:36:47,680
that consistency um is has been asked

00:36:46,960 --> 00:36:50,800
for for

00:36:47,680 --> 00:36:52,640
a long time by uh application developers

00:36:50,800 --> 00:36:54,640
who prefer kubernetes so

00:36:52,640 --> 00:36:56,160
i'm super excited about that and just

00:36:54,640 --> 00:36:57,839
the consistency in general

00:36:56,160 --> 00:36:59,599
the other thing i'm really excited about

00:36:57,839 --> 00:37:03,200
is actually

00:36:59,599 --> 00:37:06,400
using ack as a mechanism

00:37:03,200 --> 00:37:07,040
to bring the world of open source

00:37:06,400 --> 00:37:10,079
development

00:37:07,040 --> 00:37:13,520
to internal aws service team engineers

00:37:10,079 --> 00:37:15,520
um the not only the

00:37:13,520 --> 00:37:17,680
uh the kubernetes ecosystem and sort of

00:37:15,520 --> 00:37:19,119
like how that works and cncf projects

00:37:17,680 --> 00:37:22,400
like crossplane

00:37:19,119 --> 00:37:24,880
but just generally getting some service

00:37:22,400 --> 00:37:27,040
team engineers at aws out of their shell

00:37:24,880 --> 00:37:29,280
and using sort of like more upstream

00:37:27,040 --> 00:37:31,520
open development tooling and and build

00:37:29,280 --> 00:37:32,320
tool chains um and just getting them

00:37:31,520 --> 00:37:34,480
comfortable with

00:37:32,320 --> 00:37:37,119
contributing to open source projects uh

00:37:34,480 --> 00:37:39,839
that's i like personally

00:37:37,119 --> 00:37:40,960
uh very important to me so yeah that's

00:37:39,839 --> 00:37:43,920
that's what makes

00:37:40,960 --> 00:37:45,200
jazzes me up gets me in the office each

00:37:43,920 --> 00:37:46,560
day

00:37:45,200 --> 00:37:48,240
yeah i could totally empathize with that

00:37:46,560 --> 00:37:49,680
i i you know not that not that they're

00:37:48,240 --> 00:37:50,720
in any way bad at open source but i

00:37:49,680 --> 00:37:53,119
spent my first

00:37:50,720 --> 00:37:53,920
five years six years of my career at

00:37:53,119 --> 00:37:55,440
google

00:37:53,920 --> 00:37:56,960
uh and it was a bit of a bit of a

00:37:55,440 --> 00:37:58,720
culture shock to leave google and

00:37:56,960 --> 00:38:00,240
you know be using the open source

00:37:58,720 --> 00:38:01,839
equivalent of all of this you know

00:38:00,240 --> 00:38:03,520
internal tooling sort of thing so it is

00:38:01,839 --> 00:38:05,359
i totally get you know exposing the

00:38:03,520 --> 00:38:06,880
average engineer to like more of how

00:38:05,359 --> 00:38:07,359
stuff's done in the outside world is

00:38:06,880 --> 00:38:10,400
always

00:38:07,359 --> 00:38:11,440
fun dan and last but not least uh what

00:38:10,400 --> 00:38:12,560
are you most excited about with

00:38:11,440 --> 00:38:14,640
crossplay

00:38:12,560 --> 00:38:16,640
so this is i guess a bit of a deviation

00:38:14,640 --> 00:38:18,320
from the other answers um but one of the

00:38:16,640 --> 00:38:20,800
parts of crossplane that

00:38:18,320 --> 00:38:22,880
uh doesn't get focused on too much but

00:38:20,800 --> 00:38:24,160
i'm i'm particularly kind of partial to

00:38:22,880 --> 00:38:27,760
is the package manager

00:38:24,160 --> 00:38:29,520
um which kind of has some opinionated uh

00:38:27,760 --> 00:38:31,680
workflows for how you can install and

00:38:29,520 --> 00:38:34,240
manage inversion crds and update

00:38:31,680 --> 00:38:36,720
packages and roll them back and forth

00:38:34,240 --> 00:38:37,839
and and a proposed kind of extension to

00:38:36,720 --> 00:38:40,160
this in the future

00:38:37,839 --> 00:38:41,839
uh is the ability to support uh

00:38:40,160 --> 00:38:43,200
essentially functions so right now we

00:38:41,839 --> 00:38:44,560
have providers which are basically

00:38:43,200 --> 00:38:46,240
controllers and crds we have

00:38:44,560 --> 00:38:49,760
configurations which are

00:38:46,240 --> 00:38:50,800
uh just yaml objects that get installed

00:38:49,760 --> 00:38:52,560
into the cluster

00:38:50,800 --> 00:38:54,480
and then functions could really lower

00:38:52,560 --> 00:38:56,960
the barrier to entry for folks

00:38:54,480 --> 00:38:58,160
authoring some of this kind of specific

00:38:56,960 --> 00:39:00,240
functionality

00:38:58,160 --> 00:39:02,320
so you could imagine day two operations

00:39:00,240 --> 00:39:03,680
or disaster recovery or migration

00:39:02,320 --> 00:39:05,440
those could all be things that could be

00:39:03,680 --> 00:39:07,119
packaged into small functions

00:39:05,440 --> 00:39:08,960
um and there's a lot of innovation

00:39:07,119 --> 00:39:11,280
happening in the function space

00:39:08,960 --> 00:39:13,599
in the kubernetes ecosystem and also

00:39:11,280 --> 00:39:16,560
more and more folks are using to

00:39:13,599 --> 00:39:17,119
moving to things like lambda and things

00:39:16,560 --> 00:39:19,200
like that

00:39:17,119 --> 00:39:20,800
um so you know providing that interface

00:39:19,200 --> 00:39:22,400
to to interact with this kind of

00:39:20,800 --> 00:39:24,640
ecosystem that we've built

00:39:22,400 --> 00:39:26,640
um of cloud provider resources as

00:39:24,640 --> 00:39:29,520
kubernetes objects is something that

00:39:26,640 --> 00:39:32,320
i think could be a really powerful model

00:39:29,520 --> 00:39:34,079
yeah i'm super excited about that too

00:39:32,320 --> 00:39:36,160
all right thanks everyone i think we're

00:39:34,079 --> 00:39:38,440
pretty much at time so i'm gonna

00:39:36,160 --> 00:39:41,440
stop the recording now thank you all

00:39:38,440 --> 00:39:41,440

YouTube URL: https://www.youtube.com/watch?v=Mw5YDH5-vmw


