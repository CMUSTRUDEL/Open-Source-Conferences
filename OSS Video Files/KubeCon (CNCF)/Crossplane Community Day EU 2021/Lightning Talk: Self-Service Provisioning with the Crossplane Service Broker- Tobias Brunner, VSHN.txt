Title: Lightning Talk: Self-Service Provisioning with the Crossplane Service Broker- Tobias Brunner, VSHN
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Self-Service Provisioning with the Crossplane Service Broker- Tobias Brunner, VSHN AG

The Crossplane Service Broker exposes Crossplane primitives via the Open Service Broker API. Tobias will introduce the concepts behind the Crossplane Service Broker and demonstrate to the audience how it all works together. By leveraging the Open Service Broker API while coupling it with the powerful concept of Crossplane Compositions it's very easy to enable users of a platform which exposes Open Service Broker API integration (like Kubernetes Service Catalog or Cloudfoundry) to provision services fully automated. In a demonstration a real use case will be shown how a Redis service can be provisioned using the Open Service Broker API, leveraging the Crossplane Compositions and the Helm provider.
Captions: 
	00:00:00,080 --> 00:00:06,240
hi i'm tobias i work for region and i

00:00:03,120 --> 00:00:08,480
live in zurich switzerland

00:00:06,240 --> 00:00:10,480
vision operates managed services for the

00:00:08,480 --> 00:00:12,480
customers all around the world

00:00:10,480 --> 00:00:14,160
even in australia for the australian

00:00:12,480 --> 00:00:16,320
government

00:00:14,160 --> 00:00:17,440
usually the customers have high security

00:00:16,320 --> 00:00:19,600
requirements

00:00:17,440 --> 00:00:20,960
and some of them are in highly regulated

00:00:19,600 --> 00:00:23,199
areas like banks

00:00:20,960 --> 00:00:25,279
insurances or telecommunication

00:00:23,199 --> 00:00:27,920
companies

00:00:25,279 --> 00:00:29,760
about a year ago we decided to base our

00:00:27,920 --> 00:00:31,519
next generation managed services

00:00:29,760 --> 00:00:33,280
offering on kubernetes

00:00:31,519 --> 00:00:36,800
and discovered crossplane as the

00:00:33,280 --> 00:00:38,800
potential control plane to achieve that

00:00:36,800 --> 00:00:40,079
with our open source tooling called

00:00:38,800 --> 00:00:42,160
project syn

00:00:40,079 --> 00:00:44,000
we created the basis to orchestrate

00:00:42,160 --> 00:00:45,680
configuration on a huge feed of

00:00:44,000 --> 00:00:47,200
kubernetes clusters

00:00:45,680 --> 00:00:51,280
including the deployment and

00:00:47,200 --> 00:00:51,280
configuration of crossplane itself

00:00:51,600 --> 00:00:56,160
our first implementation is crossplane

00:00:53,920 --> 00:00:58,640
as the orchestration control plane

00:00:56,160 --> 00:01:00,559
to gather its projects zoon is made for

00:00:58,640 --> 00:01:01,120
the biggest swiss telecommunication

00:01:00,559 --> 00:01:04,400
company

00:01:01,120 --> 00:01:06,880
called swisscom at the beginning

00:01:04,400 --> 00:01:07,520
swisscom offers redis and mariah db

00:01:06,880 --> 00:01:09,680
galera

00:01:07,520 --> 00:01:11,439
in their internal services marketplace

00:01:09,680 --> 00:01:14,560
as a managed service

00:01:11,439 --> 00:01:16,960
running on kubernetes at massive scale

00:01:14,560 --> 00:01:18,080
the amount of expected service instances

00:01:16,960 --> 00:01:20,080
is so high

00:01:18,080 --> 00:01:21,520
that it's not possible to run them all

00:01:20,080 --> 00:01:25,520
on a single cluster

00:01:21,520 --> 00:01:27,920
of their internal kubernetes offering

00:01:25,520 --> 00:01:30,560
these services are currently consumed by

00:01:27,920 --> 00:01:32,799
applications running on cloud foundry

00:01:30,560 --> 00:01:35,040
and the services need to be available as

00:01:32,799 --> 00:01:37,840
a full sales service offering in their

00:01:35,040 --> 00:01:39,920
internal marketplace

00:01:37,840 --> 00:01:42,560
it is planned to extend the offering to

00:01:39,920 --> 00:01:43,840
users of the managed kubernetes offering

00:01:42,560 --> 00:01:47,040
called icube

00:01:43,840 --> 00:01:49,280
using the kubernetes service catalog all

00:01:47,040 --> 00:01:50,479
these services are running in swisscom's

00:01:49,280 --> 00:01:52,840
own data center and

00:01:50,479 --> 00:01:55,119
infrastructure with high security

00:01:52,840 --> 00:01:57,360
measures

00:01:55,119 --> 00:01:59,520
for matching swiss commerce requirements

00:01:57,360 --> 00:02:00,560
we had to implement an open service

00:01:59,520 --> 00:02:02,880
broker api

00:02:00,560 --> 00:02:05,119
application which maps crossblank

00:02:02,880 --> 00:02:08,720
concepts to the concepts of the open

00:02:05,119 --> 00:02:10,959
service broker api specifications

00:02:08,720 --> 00:02:13,680
as the ideas behind crowsplain matched

00:02:10,959 --> 00:02:14,640
the ideas behind open service broker api

00:02:13,680 --> 00:02:17,120
very well

00:02:14,640 --> 00:02:18,959
we were able to write the translator

00:02:17,120 --> 00:02:21,280
between these two worlds

00:02:18,959 --> 00:02:23,440
called the swisscom the crowsplain

00:02:21,280 --> 00:02:26,160
service broker

00:02:23,440 --> 00:02:28,480
in this diagram you can see that the

00:02:26,160 --> 00:02:30,720
service offering maps to the composite

00:02:28,480 --> 00:02:33,840
resource definitions

00:02:30,720 --> 00:02:36,080
service plans mapped to compositions and

00:02:33,840 --> 00:02:39,440
service instances mapped to composite

00:02:36,080 --> 00:02:41,040
resources all are integral concepts of

00:02:39,440 --> 00:02:43,040
crossplane

00:02:41,040 --> 00:02:45,200
the crossplane service broker operates

00:02:43,040 --> 00:02:48,959
solely on crossplane objects

00:02:45,200 --> 00:02:48,959
and no other state is needed

00:02:49,440 --> 00:02:53,200
let's have a look at how this looks like

00:02:51,680 --> 00:02:55,200
in a live demo

00:02:53,200 --> 00:02:56,720
we'll see a redis instance provisioned

00:02:55,200 --> 00:02:59,360
on the service cluster

00:02:56,720 --> 00:03:01,440
which was requested by a user via the

00:02:59,360 --> 00:03:03,760
service catalog

00:03:01,440 --> 00:03:04,959
the demo environment consists of three

00:03:03,760 --> 00:03:07,599
local k3d

00:03:04,959 --> 00:03:08,400
clusters and this architecture

00:03:07,599 --> 00:03:11,680
represents

00:03:08,400 --> 00:03:13,840
a real world example

00:03:11,680 --> 00:03:14,800
a cross plane cluster in the middle of

00:03:13,840 --> 00:03:17,200
this diagram

00:03:14,800 --> 00:03:19,360
exists once and runs crossplane and the

00:03:17,200 --> 00:03:21,760
crossbar and service broker

00:03:19,360 --> 00:03:23,519
the services itself are provisioned by

00:03:21,760 --> 00:03:25,040
the crossplane helm provider on the

00:03:23,519 --> 00:03:27,840
service cluster

00:03:25,040 --> 00:03:28,720
from which many of them could exist and

00:03:27,840 --> 00:03:31,920
in reality

00:03:28,720 --> 00:03:33,920
a lot of them exist the end user is

00:03:31,920 --> 00:03:34,720
using the services from the consumer

00:03:33,920 --> 00:03:37,920
cluster

00:03:34,720 --> 00:03:42,239
by using the kubernetes service catalog

00:03:37,920 --> 00:03:42,239
now let's dive into it straight away

00:03:42,959 --> 00:03:46,560
in the middle you see the control

00:03:44,840 --> 00:03:48,640
cluster

00:03:46,560 --> 00:03:50,879
this cluster is running crossplane and

00:03:48,640 --> 00:03:53,120
we will now have a look around what is

00:03:50,879 --> 00:03:54,720
available in this cluster

00:03:53,120 --> 00:03:57,280
first we will have a look at the

00:03:54,720 --> 00:04:00,400
composite resource definitions you see

00:03:57,280 --> 00:04:03,040
there is a redis instance defined

00:04:00,400 --> 00:04:05,519
this composite resource definition also

00:04:03,040 --> 00:04:07,599
has a lot of metadata available

00:04:05,519 --> 00:04:08,799
which is then consumed by the crossplane

00:04:07,599 --> 00:04:10,879
service broker

00:04:08,799 --> 00:04:12,959
to be presented to the user of the

00:04:10,879 --> 00:04:15,200
broker

00:04:12,959 --> 00:04:16,799
when we look at the compositions which

00:04:15,200 --> 00:04:19,840
map to the service plans

00:04:16,799 --> 00:04:21,440
on the open service broker api you can

00:04:19,840 --> 00:04:24,240
see that there is one

00:04:21,440 --> 00:04:26,840
plan defined which is called ready small

00:04:24,240 --> 00:04:28,800
and this is represented by this

00:04:26,840 --> 00:04:31,840
composition

00:04:28,800 --> 00:04:33,680
also this composition has metadata which

00:04:31,840 --> 00:04:36,320
again is used by the crossplane

00:04:33,680 --> 00:04:38,880
service broker to be presented to the

00:04:36,320 --> 00:04:41,120
user of the broker

00:04:38,880 --> 00:04:42,880
querying the cost of already instances

00:04:41,120 --> 00:04:44,720
shows us that there is currently no

00:04:42,880 --> 00:04:48,000
redis instance provisioned

00:04:44,720 --> 00:04:49,600
let's change that we will switch now to

00:04:48,000 --> 00:04:52,560
the consumer cluster

00:04:49,600 --> 00:04:54,000
and check what brokers are available on

00:04:52,560 --> 00:04:56,800
this cluster

00:04:54,000 --> 00:04:58,240
the only broker configured at this time

00:04:56,800 --> 00:05:01,600
is the redis broker

00:04:58,240 --> 00:05:03,280
which is ready querying this broker for

00:05:01,600 --> 00:05:07,039
available services

00:05:03,280 --> 00:05:07,840
is returning us just one service it's

00:05:07,039 --> 00:05:10,080
the ready

00:05:07,840 --> 00:05:11,440
ready service and one plan the small

00:05:10,080 --> 00:05:14,880
plan

00:05:11,440 --> 00:05:17,440
which we can now provision this is very

00:05:14,880 --> 00:05:19,600
easy with the service catalog command

00:05:17,440 --> 00:05:20,560
and at this time the service is getting

00:05:19,600 --> 00:05:23,039
provisioned

00:05:20,560 --> 00:05:23,680
what we can see with this cad instances

00:05:23,039 --> 00:05:26,160
command

00:05:23,680 --> 00:05:28,400
with which shows us the state

00:05:26,160 --> 00:05:31,440
provisioning

00:05:28,400 --> 00:05:32,479
going back to the control cluster now we

00:05:31,440 --> 00:05:35,919
can see that

00:05:32,479 --> 00:05:38,000
there is now one redis instance object

00:05:35,919 --> 00:05:40,160
available this has been created by the

00:05:38,000 --> 00:05:42,639
crossplane service broker on the call

00:05:40,160 --> 00:05:45,680
from the consumer cluster

00:05:42,639 --> 00:05:47,440
this is now being provisioned by via the

00:05:45,680 --> 00:05:50,000
crossplane health provider

00:05:47,440 --> 00:05:52,000
and we can see that there was is already

00:05:50,000 --> 00:05:55,440
a release object created

00:05:52,000 --> 00:05:57,840
by crossplane and this actually

00:05:55,440 --> 00:05:59,120
instantiates a hem chart on the service

00:05:57,840 --> 00:06:02,639
cluster

00:05:59,120 --> 00:06:04,160
and this is already done here down on

00:06:02,639 --> 00:06:07,440
the bottom of this window

00:06:04,160 --> 00:06:10,080
in the service cluster also

00:06:07,440 --> 00:06:10,960
this service is provisioned into its own

00:06:10,080 --> 00:06:14,080
namespace

00:06:10,960 --> 00:06:14,720
which we can now have a look into and

00:06:14,080 --> 00:06:16,880
see

00:06:14,720 --> 00:06:19,199
what ports are available in this

00:06:16,880 --> 00:06:21,759
namespace

00:06:19,199 --> 00:06:23,440
so you can see the ready service is

00:06:21,759 --> 00:06:25,280
already up and running

00:06:23,440 --> 00:06:27,840
and if we go back to the consumer

00:06:25,280 --> 00:06:30,080
cluster we can see that the status is

00:06:27,840 --> 00:06:31,520
in this time ready so the service is

00:06:30,080 --> 00:06:34,560
available for the end user

00:06:31,520 --> 00:06:37,120
to be consumed for that we are now

00:06:34,560 --> 00:06:39,600
creating a service binding which

00:06:37,120 --> 00:06:42,000
returns us all the needed information to

00:06:39,600 --> 00:06:45,440
actually connect to this service

00:06:42,000 --> 00:06:46,000
this is now done the status is already

00:06:45,440 --> 00:06:48,560
ready

00:06:46,000 --> 00:06:49,919
and this created a secret on the on the

00:06:48,560 --> 00:06:53,120
consumer cluster

00:06:49,919 --> 00:06:53,840
ready to be used by the application this

00:06:53,120 --> 00:06:56,800
secret

00:06:53,840 --> 00:06:57,520
contains information like the server ip

00:06:56,800 --> 00:07:00,479
addresses

00:06:57,520 --> 00:07:03,360
ports uh usernames passwords and all

00:07:00,479 --> 00:07:06,560
other parameters which are needed to

00:07:03,360 --> 00:07:09,120
con contact the service actually

00:07:06,560 --> 00:07:10,000
that's the end of the demo let's go back

00:07:09,120 --> 00:07:14,319
to the slides

00:07:10,000 --> 00:07:14,960
shortly if you want to try this out

00:07:14,319 --> 00:07:16,720
yourself

00:07:14,960 --> 00:07:18,720
it's hosted on github the full

00:07:16,720 --> 00:07:19,280
demonstration is available under this

00:07:18,720 --> 00:07:22,400
url

00:07:19,280 --> 00:07:22,400
displayed on the slides

00:07:23,039 --> 00:07:27,919
the crossplane open service broker api

00:07:25,759 --> 00:07:29,599
is open source on github

00:07:27,919 --> 00:07:31,599
and it's already being used in

00:07:29,599 --> 00:07:34,960
production and will be gradually

00:07:31,599 --> 00:07:36,880
improved over time we have some points

00:07:34,960 --> 00:07:38,639
on the roadmap already

00:07:36,880 --> 00:07:40,800
so the first thing we will do is

00:07:38,639 --> 00:07:42,319
implement authentication with bearer

00:07:40,800 --> 00:07:44,479
token which

00:07:42,319 --> 00:07:46,639
could contain meta information for

00:07:44,479 --> 00:07:48,800
example for access control

00:07:46,639 --> 00:07:51,199
or for filtering plans which are

00:07:48,800 --> 00:07:51,759
available to this particular user or

00:07:51,199 --> 00:07:53,520
team

00:07:51,759 --> 00:07:55,520
whatever information is stored in the

00:07:53,520 --> 00:07:59,840
token

00:07:55,520 --> 00:08:01,360
this will allow us also to as mentioned

00:07:59,840 --> 00:08:03,360
implement the plan filtering on the

00:08:01,360 --> 00:08:05,520
broker side we will also

00:08:03,360 --> 00:08:06,879
implement asynchronous binding

00:08:05,520 --> 00:08:09,280
operations

00:08:06,879 --> 00:08:11,520
and last but not least we have plan plan

00:08:09,280 --> 00:08:12,800
upgrades on our plate so that we can

00:08:11,520 --> 00:08:16,319
upgrade for example

00:08:12,800 --> 00:08:18,080
from small to medium plans and so on

00:08:16,319 --> 00:08:19,840
we'll work on these features over the

00:08:18,080 --> 00:08:22,319
next weeks and months

00:08:19,840 --> 00:08:23,840
some of these features are depending on

00:08:22,319 --> 00:08:27,440
features in crossbrain which

00:08:23,840 --> 00:08:29,199
will be hopefully available very soon

00:08:27,440 --> 00:08:31,520
if you want to know more about what we

00:08:29,199 --> 00:08:33,360
did please reach out to me at my email

00:08:31,520 --> 00:08:35,120
address or on twitter

00:08:33,360 --> 00:08:38,880
thanks for listening and enjoy the

00:08:35,120 --> 00:08:38,880

YouTube URL: https://www.youtube.com/watch?v=9MJhuOr9gb0


