Title: Lightning Talk: Notes from Crossplane Newbs - Jeremy Tanner & Gianluca Arbezzano, Equinix
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Notes from Crossplane Newbs - Jeremy Tanner & Gianluca Arbezzano, Equinix

You’ve heard of Crossplane but you really aren’t sure what it is about. Is it Terraform for Kubernetes? Is it a multi-cloud toolkit? Does it do dishes? We’ll provide a new user perspective on the project, dispelling myths and highlighting what the most important features are today for everyday users.
Captions: 
	00:00:00,000 --> 00:00:03,679
hello friends from the future we'd hope

00:00:01,760 --> 00:00:07,040
to be with you in person for this

00:00:03,679 --> 00:00:10,000
but today is not that day uh

00:00:07,040 --> 00:00:12,160
future versions of us uh current day to

00:00:10,000 --> 00:00:15,040
those of you watching

00:00:12,160 --> 00:00:16,080
live can be found in the chat uh we'd

00:00:15,040 --> 00:00:18,080
offer to answer questions

00:00:16,080 --> 00:00:19,199
there though it's more likely that we'll

00:00:18,080 --> 00:00:22,080
have questions for you

00:00:19,199 --> 00:00:22,720
as until a few weeks ago neither of us

00:00:22,080 --> 00:00:25,920
had

00:00:22,720 --> 00:00:29,119
touched crossplane and us is uh

00:00:25,920 --> 00:00:30,000
i'm jeremy tanner and i'm joined by i'm

00:00:29,119 --> 00:00:32,480
jean luca

00:00:30,000 --> 00:00:34,880
and uh yeah i never used cross plane

00:00:32,480 --> 00:00:37,920
before so we took a full week of testing

00:00:34,880 --> 00:00:40,719
and that's where we are so feel free to

00:00:37,920 --> 00:00:44,320
send any questions to us

00:00:40,719 --> 00:00:48,000
yeah or we'll have questions for you

00:00:44,320 --> 00:00:50,239
so what is crossplane jeremy

00:00:48,000 --> 00:00:51,039
uh crossplane it's right there in the

00:00:50,239 --> 00:00:54,559
name

00:00:51,039 --> 00:00:58,079
crossplane is meant to be a cross cloud

00:00:54,559 --> 00:00:59,039
control plane cross cloud so this is for

00:00:58,079 --> 00:01:02,480
folks who are

00:00:59,039 --> 00:01:04,400
wanting to do uh multi-cloud the

00:01:02,480 --> 00:01:05,600
description is uh an open source

00:01:04,400 --> 00:01:07,280
kubernetes add-on

00:01:05,600 --> 00:01:09,439
enables platform teams to assemble

00:01:07,280 --> 00:01:11,760
infrastructure multiple vendors

00:01:09,439 --> 00:01:12,640
high-level service apis application

00:01:11,760 --> 00:01:15,680
teams

00:01:12,640 --> 00:01:18,479
without having to write any code

00:01:15,680 --> 00:01:20,080
being a kubernetes add-on it's a

00:01:18,479 --> 00:01:23,680
kubernetes system

00:01:20,080 --> 00:01:25,119
uh so you know this as crossplane

00:01:23,680 --> 00:01:27,280
community day is happening

00:01:25,119 --> 00:01:28,240
attached to kubecon it's very likely

00:01:27,280 --> 00:01:31,439
that you have some

00:01:28,240 --> 00:01:31,439
kubernetes familiarity

00:01:31,600 --> 00:01:35,280
and i mean if i'm not a cloud provider

00:01:34,560 --> 00:01:37,759
or a

00:01:35,280 --> 00:01:38,320
cross cloud provider person i'm just

00:01:37,759 --> 00:01:42,000
using

00:01:38,320 --> 00:01:44,320
you know aws or or gcp or equinix metal

00:01:42,000 --> 00:01:47,680
can i still benefit from crossplane or

00:01:44,320 --> 00:01:50,799
or not do you need it no

00:01:47,680 --> 00:01:53,200
is it useful it can be instead of

00:01:50,799 --> 00:01:54,799
if you're instead of orchestrating

00:01:53,200 --> 00:01:56,159
multiple the same service across

00:01:54,799 --> 00:01:57,840
multiple clouds you could be

00:01:56,159 --> 00:02:00,479
orchestrating many services

00:01:57,840 --> 00:02:02,320
inside the same cloud some clouds have

00:02:00,479 --> 00:02:04,159
as many uh you know more than 100

00:02:02,320 --> 00:02:05,920
different services and so

00:02:04,159 --> 00:02:07,360
building those uh building those legos

00:02:05,920 --> 00:02:10,239
together

00:02:07,360 --> 00:02:11,920
manually instead of by configuration can

00:02:10,239 --> 00:02:13,920
take time and so

00:02:11,920 --> 00:02:16,080
there's still benefit if you're inside a

00:02:13,920 --> 00:02:18,080
uh if you're inside a single cloud

00:02:16,080 --> 00:02:20,000
so i want to tell you something i

00:02:18,080 --> 00:02:23,040
learned soul stack

00:02:20,000 --> 00:02:26,400
chef puppet and

00:02:23,040 --> 00:02:28,879
i tried pollumi i know what terraform is

00:02:26,400 --> 00:02:29,599
and i also wrote not one but two cluster

00:02:28,879 --> 00:02:32,800
api

00:02:29,599 --> 00:02:35,760
api infrastructure provider

00:02:32,800 --> 00:02:36,000
so why is crossplane different and why i

00:02:35,760 --> 00:02:38,800
have

00:02:36,000 --> 00:02:40,400
to learn it as well you don't have to

00:02:38,800 --> 00:02:43,840
learn it as well but can be very you

00:02:40,400 --> 00:02:46,560
can be very useful um so cluster api

00:02:43,840 --> 00:02:48,239
is looking to get kubernetes running

00:02:46,560 --> 00:02:48,959
crossplane doesn't necessarily have to

00:02:48,239 --> 00:02:50,640
be

00:02:48,959 --> 00:02:52,400
kubernetes that's running it can be

00:02:50,640 --> 00:02:54,800
pretty much anything on that

00:02:52,400 --> 00:02:56,959
on the infrastructure that you bring up

00:02:54,800 --> 00:02:58,480
terraform and pollumi uh they create and

00:02:56,959 --> 00:03:01,040
destroy resources

00:02:58,480 --> 00:03:02,959
only when they're applied or run often

00:03:01,040 --> 00:03:04,000
times that's just the one shot when

00:03:02,959 --> 00:03:06,560
you're starting up

00:03:04,000 --> 00:03:07,680
or a rerun when you've changed something

00:03:06,560 --> 00:03:10,959
let me summarize

00:03:07,680 --> 00:03:14,319
if i it works has

00:03:10,959 --> 00:03:16,720
as kubernetes works for pods so when you

00:03:14,319 --> 00:03:17,360
create a deployment or replica set when

00:03:16,720 --> 00:03:20,800
a post

00:03:17,360 --> 00:03:24,080
expires something a control loop

00:03:20,800 --> 00:03:26,319
creates my pod again and crossplane max

00:03:24,080 --> 00:03:28,640
makes that to happen for way more

00:03:26,319 --> 00:03:30,959
resources across cloud provider like s3

00:03:28,640 --> 00:03:31,760
buckets or ac2 instances or whatever

00:03:30,959 --> 00:03:34,480
yeah

00:03:31,760 --> 00:03:35,920
and a and a pro and a provider can be uh

00:03:34,480 --> 00:03:38,560
anything that has an api

00:03:35,920 --> 00:03:38,959
that has the um provider written for it

00:03:38,560 --> 00:03:41,760
uh

00:03:38,959 --> 00:03:43,920
so that can be that can uh order you a

00:03:41,760 --> 00:03:46,640
pizza every time it's run or

00:03:43,920 --> 00:03:47,840
uh any so yes it can orchestrate

00:03:46,640 --> 00:03:50,000
anything with an api

00:03:47,840 --> 00:03:51,360
that's a very great use case for having

00:03:50,000 --> 00:03:53,599
a short you know

00:03:51,360 --> 00:03:54,560
cool cool time so i want a pizza every

00:03:53,599 --> 00:03:56,720
10 seconds

00:03:54,560 --> 00:03:57,760
that's how that's how it's gonna work

00:03:56,720 --> 00:03:59,120
okay so and

00:03:57,760 --> 00:04:01,280
and you tell me that i don't need to

00:03:59,120 --> 00:04:04,080
know code much

00:04:01,280 --> 00:04:05,760
but what does it mean okay well the

00:04:04,080 --> 00:04:06,319
claim was without having to write any

00:04:05,760 --> 00:04:09,200
code

00:04:06,319 --> 00:04:09,760
and then i suppose the debate then is is

00:04:09,200 --> 00:04:14,000
yaml

00:04:09,760 --> 00:04:17,120
code and so uh if it's

00:04:14,000 --> 00:04:19,280
if well i think we fell on it's it's

00:04:17,120 --> 00:04:19,759
serialized data which isn't necessarily

00:04:19,280 --> 00:04:21,359
code

00:04:19,759 --> 00:04:22,560
but you are going to have to write some

00:04:21,359 --> 00:04:23,199
uh you are going to have to write some

00:04:22,560 --> 00:04:24,880
yaml

00:04:23,199 --> 00:04:26,479
but you're not going to have to write a

00:04:24,880 --> 00:04:29,199
custom operator which

00:04:26,479 --> 00:04:30,639
is definitely something there's already

00:04:29,199 --> 00:04:33,360
providers written for

00:04:30,639 --> 00:04:35,600
um most of the infrastructure providers

00:04:33,360 --> 00:04:38,880
that you'd like to use and so

00:04:35,600 --> 00:04:44,080
um oh i'll label this one

00:04:38,880 --> 00:04:44,080
mostly true mostly true listen skills

00:04:44,160 --> 00:04:47,280
so yeah something cool about

00:04:45,840 --> 00:04:49,680
infrastructure as data

00:04:47,280 --> 00:04:51,840
versus infrastructure as code that made

00:04:49,680 --> 00:04:54,880
me think when i saw these lights

00:04:51,840 --> 00:04:58,080
um that jeremy obviously you did

00:04:54,880 --> 00:05:00,240
is because it's cool

00:04:58,080 --> 00:05:02,160
because the state where you start from

00:05:00,240 --> 00:05:03,840
is the one that you declared has to do

00:05:02,160 --> 00:05:05,759
with pod

00:05:03,840 --> 00:05:07,360
but it's it's calculated because it

00:05:05,759 --> 00:05:10,720
looks for the difference between

00:05:07,360 --> 00:05:13,919
what you declared so i want

00:05:10,720 --> 00:05:17,280
uh you know a situ or i want a pizza and

00:05:13,919 --> 00:05:20,160
what you what you actually have so

00:05:17,280 --> 00:05:21,600
did i already get my pizza or not if not

00:05:20,160 --> 00:05:24,400
the reconciliation loop

00:05:21,600 --> 00:05:24,880
will will kick it it will kick their

00:05:24,400 --> 00:05:27,120
cast

00:05:24,880 --> 00:05:28,400
and send me a pizza or recreate a

00:05:27,120 --> 00:05:30,960
resource that it's over

00:05:28,400 --> 00:05:32,639
so it's very it's a very nice you know

00:05:30,960 --> 00:05:35,120
differentiation to do that if

00:05:32,639 --> 00:05:37,199
that i think you you made here so

00:05:35,120 --> 00:05:39,600
absolutely

00:05:37,199 --> 00:05:40,400
so yeah i mean everybody speaks about

00:05:39,600 --> 00:05:42,800
githubs

00:05:40,400 --> 00:05:43,520
and i want to know if i can you know

00:05:42,800 --> 00:05:47,360
push my

00:05:43,520 --> 00:05:49,600
ml code somewhere

00:05:47,360 --> 00:05:51,919
oh and so absolutely there are

00:05:49,600 --> 00:05:52,880
continuous delivery tools like the argo

00:05:51,919 --> 00:05:54,960
project

00:05:52,880 --> 00:05:56,160
that are kubernetes operators using the

00:05:54,960 --> 00:05:59,440
kubernetes api

00:05:56,160 --> 00:06:03,360
and so yes works um works perfectly well

00:05:59,440 --> 00:06:04,960
so the way that you'd be managing

00:06:03,360 --> 00:06:06,720
containers and the rest of kubernetes

00:06:04,960 --> 00:06:10,080
can now manage any sort of

00:06:06,720 --> 00:06:11,360
infrastructure networks machines storage

00:06:10,080 --> 00:06:14,319
in the rest

00:06:11,360 --> 00:06:14,639
so what is cool is that it use operators

00:06:14,319 --> 00:06:16,479
so

00:06:14,639 --> 00:06:19,120
everything that is in the kubernetes

00:06:16,479 --> 00:06:20,960
lens works with crossplane as well so

00:06:19,120 --> 00:06:22,800
that's that's very important but what if

00:06:20,960 --> 00:06:23,840
if i'm not running kubernetes what

00:06:22,800 --> 00:06:25,919
should i do

00:06:23,840 --> 00:06:27,199
oh not running as in you don't use

00:06:25,919 --> 00:06:28,880
kubernetes that's

00:06:27,199 --> 00:06:31,280
going to be super odd if you're a

00:06:28,880 --> 00:06:33,280
kubecon attendee but i'll allow it

00:06:31,280 --> 00:06:34,319
thank you it's it's maybe it's maybe not

00:06:33,280 --> 00:06:36,400
the tool for you

00:06:34,319 --> 00:06:37,840
um not running as in you don't have a

00:06:36,400 --> 00:06:40,720
management cluster running

00:06:37,840 --> 00:06:42,160
uh perfect um upbound who are the

00:06:40,720 --> 00:06:44,800
creators of crossplane

00:06:42,160 --> 00:06:46,000
uh they'll run one for you that's cool

00:06:44,800 --> 00:06:49,120
but yeah what

00:06:46,000 --> 00:06:50,720
what do how i can start with crossplane

00:06:49,120 --> 00:06:52,880
yeah yeah so to get started you can

00:06:50,720 --> 00:06:53,599
either use uh upbound or if you like

00:06:52,880 --> 00:06:56,160
doing things

00:06:53,599 --> 00:06:56,960
like us the hard way uh you'll need some

00:06:56,160 --> 00:06:59,520
kubernetes

00:06:56,960 --> 00:07:00,560
so kubernetes and docker is fine just

00:06:59,520 --> 00:07:02,800
remember to start

00:07:00,560 --> 00:07:04,800
docker if you like me occasionally kill

00:07:02,800 --> 00:07:07,520
it to keep your laptop fans from

00:07:04,800 --> 00:07:08,240
taking off the desk that kubernetes in

00:07:07,520 --> 00:07:11,840
docker

00:07:08,240 --> 00:07:14,800
you can brew install kind uh kubecuttle

00:07:11,840 --> 00:07:16,160
and helm if you're not using the the

00:07:14,800 --> 00:07:18,319
hosted version

00:07:16,160 --> 00:07:19,680
once you have these you'll install cross

00:07:18,319 --> 00:07:21,280
plane via helm chart into your

00:07:19,680 --> 00:07:24,639
management cluster

00:07:21,280 --> 00:07:27,520
and then you'll take a configuration

00:07:24,639 --> 00:07:28,720
and configurations are just the um the

00:07:27,520 --> 00:07:30,639
setup of the

00:07:28,720 --> 00:07:32,880
uh the app or the setup of the

00:07:30,639 --> 00:07:36,240
infrastructure that you'd like

00:07:32,880 --> 00:07:38,800
crossplane to bring up and

00:07:36,240 --> 00:07:39,360
those will be associated with a provider

00:07:38,800 --> 00:07:42,400
and so

00:07:39,360 --> 00:07:46,319
providers being uh equinix metal aws

00:07:42,400 --> 00:07:48,639
gcp azure that are places where you've

00:07:46,319 --> 00:07:49,360
given them a credit card gotten in

00:07:48,639 --> 00:07:52,160
return

00:07:49,360 --> 00:07:53,440
an api key and are then able to uh bring

00:07:52,160 --> 00:07:56,960
up a

00:07:53,440 --> 00:07:59,680
bring up infrastructure and so

00:07:56,960 --> 00:08:00,000
you told me that crossplane will always

00:07:59,680 --> 00:08:03,599
do

00:08:00,000 --> 00:08:06,479
his best to keep my resources as i want

00:08:03,599 --> 00:08:07,840
so exactly that was a thing that uh that

00:08:06,479 --> 00:08:09,360
was the thing that surprised me so the

00:08:07,840 --> 00:08:12,479
thing to watch out for

00:08:09,360 --> 00:08:14,080
is to uh is to be aware of zombies the

00:08:12,479 --> 00:08:15,599
like the things that you kill don't stay

00:08:14,080 --> 00:08:17,919
dead and so

00:08:15,599 --> 00:08:19,039
if you um if you don't destroy the

00:08:17,919 --> 00:08:22,080
resources in the right way

00:08:19,039 --> 00:08:24,800
they'll come back in around 30 seconds

00:08:22,080 --> 00:08:26,080
and so if you create a machine with

00:08:24,800 --> 00:08:29,680
cross plane

00:08:26,080 --> 00:08:33,200
and then destroy it via

00:08:29,680 --> 00:08:35,440
directly using the api or

00:08:33,200 --> 00:08:36,479
or if you destroy it inside a inside a

00:08:35,440 --> 00:08:40,640
dashboard

00:08:36,479 --> 00:08:43,120
it will pop back up because you have a

00:08:40,640 --> 00:08:43,760
spec that says i'd like this machine to

00:08:43,120 --> 00:08:45,360
exist

00:08:43,760 --> 00:08:47,040
uh cross plane will notice it not

00:08:45,360 --> 00:08:49,680
existing and

00:08:47,040 --> 00:08:51,120
bring it back so resources forged in the

00:08:49,680 --> 00:08:53,600
fires of cross plane can only be

00:08:51,120 --> 00:08:56,320
destroyed in the fires of cross plane

00:08:53,600 --> 00:08:57,200
so there is no resiliency without

00:08:56,320 --> 00:08:59,600
control

00:08:57,200 --> 00:09:01,440
loop in this time so but what's next

00:08:59,600 --> 00:09:01,920
jeremy what what are the crossbrain

00:09:01,440 --> 00:09:04,640
people

00:09:01,920 --> 00:09:05,680
working on we got up to speed using

00:09:04,640 --> 00:09:08,000
mostly uh

00:09:05,680 --> 00:09:09,519
links from crossplane.io that's an

00:09:08,000 --> 00:09:12,800
excellent resource

00:09:09,519 --> 00:09:15,440
we definitely have more questions and so

00:09:12,800 --> 00:09:16,880
i'm curious how i might bring resources

00:09:15,440 --> 00:09:17,760
i've created elsewhere on those

00:09:16,880 --> 00:09:20,560
providers

00:09:17,760 --> 00:09:22,080
under cross planes control and so if you

00:09:20,560 --> 00:09:23,519
have a good idea how to do that please

00:09:22,080 --> 00:09:25,760
hit us up on the slack

00:09:23,519 --> 00:09:27,040
or if you think answering many more

00:09:25,760 --> 00:09:28,800
questions would be fun

00:09:27,040 --> 00:09:31,120
and you'd like to get paid to teach

00:09:28,800 --> 00:09:32,240
myself uh john luca and other friends

00:09:31,120 --> 00:09:34,160
about cross playing

00:09:32,240 --> 00:09:37,839
upbound is hiring a developer advocate

00:09:34,160 --> 00:09:37,839
right now and so reach out to them

00:09:40,240 --> 00:09:44,080
so i think that's it no more questions

00:09:41,920 --> 00:09:46,240
for us jeremy yeah yeah

00:09:44,080 --> 00:09:47,760
um i'd yeah i'd like to thank everyone

00:09:46,240 --> 00:09:48,560
for watching we appreciate your time and

00:09:47,760 --> 00:09:51,279
attention

00:09:48,560 --> 00:09:52,399
and additional thanks to marcus johansen

00:09:51,279 --> 00:09:54,240
from uh

00:09:52,399 --> 00:09:56,640
my team for clearing up some of the

00:09:54,240 --> 00:09:58,240
concepts and also to uh the video

00:09:56,640 --> 00:09:59,600
recorded version of dan who is a

00:09:58,240 --> 00:10:04,160
wellspring of information on the

00:09:59,600 --> 00:10:04,160

YouTube URL: https://www.youtube.com/watch?v=ZtY2oN3kiwA


