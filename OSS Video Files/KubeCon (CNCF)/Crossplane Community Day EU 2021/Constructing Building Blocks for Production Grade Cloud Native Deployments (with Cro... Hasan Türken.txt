Title: Constructing Building Blocks for Production Grade Cloud Native Deployments (with Cro... Hasan Türken
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Constructing Building Blocks for Production Grade Cloud Native Deployments (with Crossplane) - Hasan Türken, Upbound

Deploying applications to the cloud is easy. It gets harder when it requires some infrastructure and harder if it needs to be deployed with a production-grade configuration. And most of the time, we need to automate all of these for a variety of reasons which further complicates the work. Wouldn't it be great if we could have re-usable building blocks that could be assembled and even better if we could later define them as new blocks that could be re-used further? In this talk, we will present how we are using Crossplane and composition to deploy a highly available, tls enabled Vault backed by a GCS bucket and configured to auto unseal with Cloud KMS using GCP workload identity. We will discuss how Crossplane helps us to easily assemble infra and application components and eases automation further with declarative configuration.
Captions: 
	00:00:00,000 --> 00:00:05,359
hello everyone my name is asanturkan i'm

00:00:02,800 --> 00:00:07,359
a platform engineer at upbound

00:00:05,359 --> 00:00:09,040
and today i'm going to talk about how we

00:00:07,359 --> 00:00:11,280
are using crossplane to

00:00:09,040 --> 00:00:12,799
to provision and manage our own

00:00:11,280 --> 00:00:16,240
infrastructure

00:00:12,799 --> 00:00:16,960
and also talk about why crossplane is a

00:00:16,240 --> 00:00:19,039
great tool

00:00:16,960 --> 00:00:21,600
to construct building blocks for cloud

00:00:19,039 --> 00:00:23,760
deployments

00:00:21,600 --> 00:00:25,119
upbound cloud offers a hosting solution

00:00:23,760 --> 00:00:28,080
for crossplane

00:00:25,119 --> 00:00:29,119
and when you go to about cloud and login

00:00:28,080 --> 00:00:31,199
to the console

00:00:29,119 --> 00:00:33,200
you will get this screen where you can

00:00:31,199 --> 00:00:36,000
create and manage

00:00:33,200 --> 00:00:37,760
control planes and a control plane is

00:00:36,000 --> 00:00:38,320
actually a dedicated cross plane

00:00:37,760 --> 00:00:41,520
instance

00:00:38,320 --> 00:00:42,320
running under the hood and what happens

00:00:41,520 --> 00:00:45,039
when you

00:00:42,320 --> 00:00:45,440
hit the create control plane button here

00:00:45,039 --> 00:00:48,640
is

00:00:45,440 --> 00:00:49,760
closely related to what i will talk

00:00:48,640 --> 00:00:51,440
about in this talk

00:00:49,760 --> 00:00:53,280
and this is why i wanted to start with

00:00:51,440 --> 00:00:55,360
this slide

00:00:53,280 --> 00:00:56,559
so here you can see a high level

00:00:55,360 --> 00:00:58,879
overview of

00:00:56,559 --> 00:01:00,239
our deployment model for hosted

00:00:58,879 --> 00:01:03,600
crossplanes

00:01:00,239 --> 00:01:06,479
uh a host of crossplane uh con

00:01:03,600 --> 00:01:08,720
contains a dedicated kubernetes api

00:01:06,479 --> 00:01:11,920
server backed by etcd

00:01:08,720 --> 00:01:14,479
and crossplane and crossplane providers

00:01:11,920 --> 00:01:16,880
are configured against this api server

00:01:14,479 --> 00:01:18,400
such that they can operate on the api

00:01:16,880 --> 00:01:21,439
resources leaving this

00:01:18,400 --> 00:01:21,439
this api server

00:01:21,680 --> 00:01:25,040
we are also configuring this api server

00:01:24,320 --> 00:01:28,720
against

00:01:25,040 --> 00:01:33,280
volt so that it can use it as

00:01:28,720 --> 00:01:37,040
as a kms provider and uh this way

00:01:33,280 --> 00:01:39,680
we we can encrypt the kubernetes secrets

00:01:37,040 --> 00:01:42,320
before writing them into etcd instead of

00:01:39,680 --> 00:01:44,560
storing them as plain text

00:01:42,320 --> 00:01:46,560
here you can see we are running multiple

00:01:44,560 --> 00:01:50,159
instances of hosted crossplanes

00:01:46,560 --> 00:01:52,399
on each host cluster but

00:01:50,159 --> 00:01:53,600
we also have a defined capacity of host

00:01:52,399 --> 00:01:56,960
clusters and

00:01:53,600 --> 00:02:00,079
when we have when we reach to

00:01:56,960 --> 00:02:02,240
or when we reach to that capacity uh

00:02:00,079 --> 00:02:03,439
we are dynamically provisioning new host

00:02:02,240 --> 00:02:05,600
clusters and

00:02:03,439 --> 00:02:07,360
this is the responsibility of this

00:02:05,600 --> 00:02:10,879
scheduling operator

00:02:07,360 --> 00:02:14,560
and it needs to get

00:02:10,879 --> 00:02:16,080
new or like trigger the creation of new

00:02:14,560 --> 00:02:19,120
host clusters when

00:02:16,080 --> 00:02:22,800
we reached it to the capacity so

00:02:19,120 --> 00:02:25,200
as mentioned for encryption at rest

00:02:22,800 --> 00:02:26,560
uh we need a production grade vault

00:02:25,200 --> 00:02:29,280
deployment

00:02:26,560 --> 00:02:30,560
what what we mean by production grades

00:02:29,280 --> 00:02:33,519
uh it needs to be

00:02:30,560 --> 00:02:33,840
highly available it needs to be backed

00:02:33,519 --> 00:02:36,800
by

00:02:33,840 --> 00:02:37,360
a bucket as a storage backend and we are

00:02:36,800 --> 00:02:40,480
using

00:02:37,360 --> 00:02:41,280
a google cloud for our infrastructure

00:02:40,480 --> 00:02:43,760
right now

00:02:41,280 --> 00:02:45,040
and uh this needs to be a gcs bucket

00:02:43,760 --> 00:02:48,319
then

00:02:45,040 --> 00:02:50,560
and since we don't want to uh

00:02:48,319 --> 00:02:51,680
like we don't want to require any manual

00:02:50,560 --> 00:02:54,800
intervention with

00:02:51,680 --> 00:02:55,360
by while operating this uh host clusters

00:02:54,800 --> 00:02:58,640
or

00:02:55,360 --> 00:03:01,360
that bolt instance uh we we want to

00:02:58,640 --> 00:03:03,040
uh configure auto unseal with cloud kms

00:03:01,360 --> 00:03:06,400
so that we don't need to

00:03:03,040 --> 00:03:07,920
seal vault when it's let's say when the

00:03:06,400 --> 00:03:11,519
pot gets restarted

00:03:07,920 --> 00:03:13,040
for some reason and since this world

00:03:11,519 --> 00:03:15,040
instance will need to

00:03:13,040 --> 00:03:16,080
consume google cloud services like

00:03:15,040 --> 00:03:18,800
buckets and

00:03:16,080 --> 00:03:19,519
encryption keys it needs to authenticate

00:03:18,800 --> 00:03:23,120
uh

00:03:19,519 --> 00:03:25,360
google cloud and uh google recommends

00:03:23,120 --> 00:03:28,720
using gcp workload identity to

00:03:25,360 --> 00:03:31,920
authenticate workloads running in

00:03:28,720 --> 00:03:33,440
google cloud kubernetes google

00:03:31,920 --> 00:03:36,560
kubernetes engine

00:03:33,440 --> 00:03:39,599
so we also want to use enable and use

00:03:36,560 --> 00:03:42,959
gcp workload identity here and

00:03:39,599 --> 00:03:46,080
finally of course we want to have like

00:03:42,959 --> 00:03:46,799
all communication as encrypted and we

00:03:46,080 --> 00:03:49,360
want to have

00:03:46,799 --> 00:03:51,519
like we want to deploy uh vault as tls

00:03:49,360 --> 00:03:54,799
enabled

00:03:51,519 --> 00:03:57,280
so uh remember our host cluster has

00:03:54,799 --> 00:03:59,519
a vault instance and we want to

00:03:57,280 --> 00:04:01,920
dynamically provision host clusters

00:03:59,519 --> 00:04:02,720
so we need to automate this deployment

00:04:01,920 --> 00:04:04,720
and

00:04:02,720 --> 00:04:06,080
since our scheduling operator is

00:04:04,720 --> 00:04:08,159
responsible for

00:04:06,080 --> 00:04:10,480
dynamically provisioning when when we

00:04:08,159 --> 00:04:13,760
reach to the capacity of existing ones

00:04:10,480 --> 00:04:15,439
we need an api for our scheduling

00:04:13,760 --> 00:04:19,120
operators so that

00:04:15,439 --> 00:04:22,320
it can just request a new uh

00:04:19,120 --> 00:04:22,320
host cluster with vault

00:04:22,800 --> 00:04:26,479
yeah as mentioned like our scheduling

00:04:24,800 --> 00:04:28,639
operator needs an api and

00:04:26,479 --> 00:04:30,000
it will just say give me a production

00:04:28,639 --> 00:04:33,199
re-default

00:04:30,000 --> 00:04:35,199
so here i want to uh go through the

00:04:33,199 --> 00:04:36,560
provisioning flow file for such a

00:04:35,199 --> 00:04:39,680
deployment

00:04:36,560 --> 00:04:42,320
uh so first of all we need to interact

00:04:39,680 --> 00:04:45,440
with google cloud apis and create

00:04:42,320 --> 00:04:47,919
a gcs bucket for storage

00:04:45,440 --> 00:04:49,919
we need to create kms keyring and a

00:04:47,919 --> 00:04:53,040
crypto key in this keyring

00:04:49,919 --> 00:04:54,960
for auto unsealed we need to create a

00:04:53,040 --> 00:04:58,800
service account and

00:04:54,960 --> 00:05:02,000
for the vault servers and then

00:04:58,800 --> 00:05:02,639
we need to grant access to the service

00:05:02,000 --> 00:05:04,720
account

00:05:02,639 --> 00:05:06,800
so that it can access to the previously

00:05:04,720 --> 00:05:09,440
created resources

00:05:06,800 --> 00:05:10,000
and finally we need to create a gke

00:05:09,440 --> 00:05:12,400
cluster

00:05:10,000 --> 00:05:13,680
so that we can run our world servers on

00:05:12,400 --> 00:05:16,800
it

00:05:13,680 --> 00:05:19,199
and also note that we need to configure

00:05:16,800 --> 00:05:19,840
this gke cluster as workload identity

00:05:19,199 --> 00:05:23,120
enabled

00:05:19,840 --> 00:05:25,680
so that we can use gcp workload identity

00:05:23,120 --> 00:05:27,280
and final step of this deployment is

00:05:25,680 --> 00:05:30,240
actually deploying the

00:05:27,280 --> 00:05:30,960
vault itself and while deploying volt we

00:05:30,240 --> 00:05:33,840
are using

00:05:30,960 --> 00:05:34,800
the volt helm chart and we need to

00:05:33,840 --> 00:05:38,000
provide

00:05:34,800 --> 00:05:40,880
uh these uh these the names

00:05:38,000 --> 00:05:41,600
of the uh cloud resources that we have

00:05:40,880 --> 00:05:45,039
created

00:05:41,600 --> 00:05:45,360
as as helm parameters so you can see

00:05:45,039 --> 00:05:48,320
like

00:05:45,360 --> 00:05:50,080
we are passing the bucket name uh key

00:05:48,320 --> 00:05:52,960
ring name crypto key name

00:05:50,080 --> 00:05:54,320
uh and also we are passing the uh

00:05:52,960 --> 00:05:57,759
service account

00:05:54,320 --> 00:06:00,720
as an annotation so that uh it can

00:05:57,759 --> 00:06:02,560
authenticate with workload identity also

00:06:00,720 --> 00:06:03,280
note that like there is a tight coupling

00:06:02,560 --> 00:06:06,479
between the

00:06:03,280 --> 00:06:08,800
infrastructure and application and

00:06:06,479 --> 00:06:11,120
like we need to consider this as a whole

00:06:08,800 --> 00:06:14,240
rather than just

00:06:11,120 --> 00:06:15,680
infrastructure application

00:06:14,240 --> 00:06:18,639
i would like to talk a bit about

00:06:15,680 --> 00:06:20,479
evolution of cloud deployment so far

00:06:18,639 --> 00:06:23,039
in the beginning when the cloud

00:06:20,479 --> 00:06:25,360
providers started providing services

00:06:23,039 --> 00:06:27,600
we were going to their uis and creating

00:06:25,360 --> 00:06:30,080
cloud resources by clicking couple of

00:06:27,600 --> 00:06:32,560
buttons there

00:06:30,080 --> 00:06:34,319
they also provided cli interacting with

00:06:32,560 --> 00:06:36,400
their cloud apis

00:06:34,319 --> 00:06:40,160
but exceptional scripting there were no

00:06:36,400 --> 00:06:42,080
meaningful or feasible way of automation

00:06:40,160 --> 00:06:44,240
with the emergence of infrastructure as

00:06:42,080 --> 00:06:47,360
code tools like terraform ansible

00:06:44,240 --> 00:06:48,479
and chef we get better ways of

00:06:47,360 --> 00:06:51,840
automation

00:06:48,479 --> 00:06:52,479
but we still lack of an api which we

00:06:51,840 --> 00:06:55,199
could use

00:06:52,479 --> 00:06:57,599
to provide this automation to the

00:06:55,199 --> 00:07:00,479
consumers

00:06:57,599 --> 00:07:01,039
and here comes crossplane crossplane

00:07:00,479 --> 00:07:04,000
both

00:07:01,039 --> 00:07:06,240
enables automation of like deployment

00:07:04,000 --> 00:07:09,599
and management of cloud resources

00:07:06,240 --> 00:07:12,160
but it also allows an api so that

00:07:09,599 --> 00:07:13,280
the consumers can just create these

00:07:12,160 --> 00:07:17,840
resources

00:07:13,280 --> 00:07:17,840
or even manage them

00:07:18,560 --> 00:07:23,199
so coming back to our original example

00:07:20,720 --> 00:07:23,919
which is uh deploying a production ready

00:07:23,199 --> 00:07:26,720
world on

00:07:23,919 --> 00:07:28,400
gke i would like to show couple of

00:07:26,720 --> 00:07:31,360
repositories

00:07:28,400 --> 00:07:32,240
so this one is like kind of corresponds

00:07:31,360 --> 00:07:35,440
to the first

00:07:32,240 --> 00:07:37,840
phase of like cloud deployment which is

00:07:35,440 --> 00:07:39,039
uh making that deployment deployment

00:07:37,840 --> 00:07:41,840
using cli

00:07:39,039 --> 00:07:41,840
step by step

00:07:42,880 --> 00:07:46,800
and the next one that i would like to

00:07:44,479 --> 00:07:49,120
show is uh

00:07:46,800 --> 00:07:50,319
like following the same deployment model

00:07:49,120 --> 00:07:53,280
in the previous

00:07:50,319 --> 00:07:53,680
uh repository this repository automates

00:07:53,280 --> 00:07:57,759
it

00:07:53,680 --> 00:07:59,199
with terraform and now i would like to

00:07:57,759 --> 00:08:02,319
introduce this one

00:07:59,199 --> 00:08:04,639
which is uh like making

00:08:02,319 --> 00:08:06,720
the same deployment using crossplane

00:08:04,639 --> 00:08:08,639
which enables making the same deployment

00:08:06,720 --> 00:08:11,039
using crossplane

00:08:08,639 --> 00:08:12,879
and this repository contains the

00:08:11,039 --> 00:08:13,919
necessary compositions cross-plane

00:08:12,879 --> 00:08:17,120
compositions

00:08:13,919 --> 00:08:20,240
to achieve such a deployment and

00:08:17,120 --> 00:08:22,720
once we like uh once we

00:08:20,240 --> 00:08:24,240
deploy this configuration in a

00:08:22,720 --> 00:08:27,360
kubernetes cluster

00:08:24,240 --> 00:08:31,280
that that that have crossplane running

00:08:27,360 --> 00:08:33,839
we have an api resource uh

00:08:31,280 --> 00:08:34,399
like we have an api resource which we

00:08:33,839 --> 00:08:37,440
can

00:08:34,399 --> 00:08:40,640
just create and expect it

00:08:37,440 --> 00:08:44,320
to be uh up and running

00:08:40,640 --> 00:08:44,959
so coming back to like our deployment

00:08:44,320 --> 00:08:48,000
model

00:08:44,959 --> 00:08:50,080
with hosted for hosted crossplanes uh

00:08:48,000 --> 00:08:52,160
as you remember you might remember we

00:08:50,080 --> 00:08:55,600
have a scheduling operator there

00:08:52,160 --> 00:08:58,160
and this scheduling operator needs to uh

00:08:55,600 --> 00:08:58,640
dynamically provision host clusters with

00:08:58,160 --> 00:09:01,920
like

00:08:58,640 --> 00:09:04,640
production ready vault and having

00:09:01,920 --> 00:09:06,320
crossplane api which is powered by

00:09:04,640 --> 00:09:10,240
kubernetes api

00:09:06,320 --> 00:09:13,279
uh enables us such a like clear

00:09:10,240 --> 00:09:14,880
separation of concern and our scheduling

00:09:13,279 --> 00:09:18,160
operator could just

00:09:14,880 --> 00:09:19,680
request the host cluster and then by

00:09:18,160 --> 00:09:22,800
polling that api

00:09:19,680 --> 00:09:24,800
or like watching that that resource

00:09:22,800 --> 00:09:26,640
it can just get notified when the

00:09:24,800 --> 00:09:30,800
resource is ready

00:09:26,640 --> 00:09:34,800
another advantage of like using uh

00:09:30,800 --> 00:09:38,160
like another advantage of uh

00:09:34,800 --> 00:09:41,360
using kubernetes api here is

00:09:38,160 --> 00:09:43,600
we can just use existing tooling and

00:09:41,360 --> 00:09:46,240
machinery around kubernetes api

00:09:43,600 --> 00:09:48,080
so we could for example use kubectl to

00:09:46,240 --> 00:09:51,519
interact with these resources

00:09:48,080 --> 00:09:52,160
and we could like build a an operator

00:09:51,519 --> 00:09:55,200
and

00:09:52,160 --> 00:09:58,080
use controller runtime to to manage

00:09:55,200 --> 00:09:58,080
those resources

00:09:58,800 --> 00:10:05,360
so let's have a closer look what happens

00:10:02,560 --> 00:10:06,320
when we create a resource across plain

00:10:05,360 --> 00:10:08,240
resource

00:10:06,320 --> 00:10:09,360
so you might remember the like right

00:10:08,240 --> 00:10:12,959
hand side which

00:10:09,360 --> 00:10:16,880
is uh the provisioning flow for such a

00:10:12,959 --> 00:10:20,160
uh for our example application

00:10:16,880 --> 00:10:22,880
and uh on the left hand side uh we

00:10:20,160 --> 00:10:23,839
we see that like uh we have a

00:10:22,880 --> 00:10:27,040
composition

00:10:23,839 --> 00:10:29,440
which contains the required managed

00:10:27,040 --> 00:10:33,360
resources these managed resources are

00:10:29,440 --> 00:10:37,120
in this case are like gcp resources

00:10:33,360 --> 00:10:39,519
or we are also we also have

00:10:37,120 --> 00:10:40,399
bolt release helm release as a managed

00:10:39,519 --> 00:10:43,600
resource

00:10:40,399 --> 00:10:46,240
and uh like all of these resources

00:10:43,600 --> 00:10:47,680
are composed in a in a composition

00:10:46,240 --> 00:10:49,839
called world cluster

00:10:47,680 --> 00:10:51,120
and when we create a world cluster

00:10:49,839 --> 00:10:53,279
custom resource

00:10:51,120 --> 00:10:55,519
then cross plane composition controllers

00:10:53,279 --> 00:10:58,399
goes and creates corresponding

00:10:55,519 --> 00:11:00,240
managed resources and then the the

00:10:58,399 --> 00:11:04,320
corresponding providers x

00:11:00,240 --> 00:11:06,399
on that and uh like creates and manage

00:11:04,320 --> 00:11:10,240
those those resources on cloud

00:11:06,399 --> 00:11:12,959
or on the cluster having a control plane

00:11:10,240 --> 00:11:15,680
and resources living in the same api

00:11:12,959 --> 00:11:18,320
enables building new resources on top of

00:11:15,680 --> 00:11:20,320
existing ones i think most of us are

00:11:18,320 --> 00:11:23,519
familiar with the relationship between

00:11:20,320 --> 00:11:26,480
pots replica sets and deployments

00:11:23,519 --> 00:11:26,959
replica sets are built on top of pods

00:11:26,480 --> 00:11:29,760
and

00:11:26,959 --> 00:11:32,000
deployments are built on top of replica

00:11:29,760 --> 00:11:35,440
sets

00:11:32,000 --> 00:11:38,640
so with crossplane we can represent

00:11:35,440 --> 00:11:41,120
everything as a kubernetes resource and

00:11:38,640 --> 00:11:43,200
just like the relationship between any

00:11:41,120 --> 00:11:46,720
kubernetes resource

00:11:43,200 --> 00:11:51,440
here we can also build new resources

00:11:46,720 --> 00:11:53,600
on top of existing ones for example

00:11:51,440 --> 00:11:54,880
in the in the figure you can see like my

00:11:53,600 --> 00:11:58,560
cluster

00:11:54,880 --> 00:12:00,959
resource is like contains

00:11:58,560 --> 00:12:01,839
other existing resources like network

00:12:00,959 --> 00:12:05,920
sub network

00:12:01,839 --> 00:12:09,680
a gke cluster and a couple of node pools

00:12:05,920 --> 00:12:10,000
and there is another uh like resource

00:12:09,680 --> 00:12:12,160
called

00:12:10,000 --> 00:12:13,839
my vault which contains the required

00:12:12,160 --> 00:12:16,160
cloud resources

00:12:13,839 --> 00:12:16,959
as well as a health release which is

00:12:16,160 --> 00:12:20,240
also a

00:12:16,959 --> 00:12:23,519
like managed resource

00:12:20,240 --> 00:12:24,560
and again we can continue building new

00:12:23,519 --> 00:12:27,839
resources by

00:12:24,560 --> 00:12:29,519
combining these newly constructed

00:12:27,839 --> 00:12:32,320
building blocks

00:12:29,519 --> 00:12:33,839
so we can say that with crossplane each

00:12:32,320 --> 00:12:37,440
and every resource or

00:12:33,839 --> 00:12:38,160
each and every cloud resource is just a

00:12:37,440 --> 00:12:41,279
block

00:12:38,160 --> 00:12:44,399
and we can build new blocks by

00:12:41,279 --> 00:12:47,839
combining like by

00:12:44,399 --> 00:12:51,200
composing new uh resources

00:12:47,839 --> 00:12:53,760
thanks to crossplane composition okay

00:12:51,200 --> 00:12:56,000
it's time for demo and in the demo i

00:12:53,760 --> 00:12:58,720
will create this custom resource

00:12:56,000 --> 00:12:59,760
which is created by a composite resource

00:12:58,720 --> 00:13:02,880
definition

00:12:59,760 --> 00:13:05,760
and i will expect that

00:13:02,880 --> 00:13:06,000
all of the required cloud resources to

00:13:05,760 --> 00:13:09,200
be

00:13:06,000 --> 00:13:12,320
created by crossblank providers and a

00:13:09,200 --> 00:13:12,639
like production ready world is deployed

00:13:12,320 --> 00:13:16,240
on

00:13:12,639 --> 00:13:19,600
on the like newly created gke cluster

00:13:16,240 --> 00:13:22,240
okay let's start with the demo

00:13:19,600 --> 00:13:22,880
i have a local kind cluster and i have

00:13:22,240 --> 00:13:26,880
cross plane

00:13:22,880 --> 00:13:29,120
installed before the demo and

00:13:26,880 --> 00:13:31,839
i will now start by deploying the

00:13:29,120 --> 00:13:33,680
configuration package which is

00:13:31,839 --> 00:13:35,760
like built from the repository that i

00:13:33,680 --> 00:13:40,639
showed in the presentation

00:13:35,760 --> 00:13:40,639
so let's start with installing it

00:13:42,720 --> 00:13:51,279
let's check how it goes

00:13:48,399 --> 00:13:53,839
yeah here you can see that vault on gke

00:13:51,279 --> 00:13:57,199
configuration package is installed

00:13:53,839 --> 00:13:59,199
and ready uh this configuration package

00:13:57,199 --> 00:14:02,240
contains the composition

00:13:59,199 --> 00:14:03,920
uh compositions and like composite

00:14:02,240 --> 00:14:07,120
resource definitions

00:14:03,920 --> 00:14:10,720
uh that that we need for volt deployment

00:14:07,120 --> 00:14:14,320
uh and now the next the next step is

00:14:10,720 --> 00:14:18,000
uh like deploying the

00:14:14,320 --> 00:14:20,880
our resource uh since we will use

00:14:18,000 --> 00:14:22,399
uh provider gcp we will need to create

00:14:20,880 --> 00:14:25,360
this provider config

00:14:22,399 --> 00:14:25,680
which refers to a kubernetes secret uh

00:14:25,360 --> 00:14:28,880
in

00:14:25,680 --> 00:14:31,519
in uh named as gcp credits

00:14:28,880 --> 00:14:32,800
i have created that secret uh prior to

00:14:31,519 --> 00:14:35,360
demo

00:14:32,800 --> 00:14:36,399
so let's create this provider config as

00:14:35,360 --> 00:14:39,920
well

00:14:36,399 --> 00:14:43,279
uh okay and the next step is

00:14:39,920 --> 00:14:47,279
actually creating a

00:14:43,279 --> 00:14:51,199
network composite resource

00:14:47,279 --> 00:14:54,240
and now we can create a vault cluster

00:14:51,199 --> 00:14:56,000
uh composite resource that that i showed

00:14:54,240 --> 00:14:59,680
at the end of the demo

00:14:56,000 --> 00:15:03,839
so now let's see what we have

00:14:59,680 --> 00:15:07,120
ctl gets more clusters

00:15:03,839 --> 00:15:11,360
our custom resource is created

00:15:07,120 --> 00:15:13,600
and let's check what

00:15:11,360 --> 00:15:14,959
managed resources we have for this

00:15:13,600 --> 00:15:18,639
composite resource

00:15:14,959 --> 00:15:21,600
yeah here you can see that uh like

00:15:18,639 --> 00:15:23,600
out of managed resources created gk

00:15:21,600 --> 00:15:27,199
cluster not pool service accounts

00:15:23,600 --> 00:15:30,240
keyring crypto key crypto key policy

00:15:27,199 --> 00:15:32,880
buckets policies for buckets etc

00:15:30,240 --> 00:15:35,360
and uh let's also check the cloud

00:15:32,880 --> 00:15:35,360
console

00:15:36,480 --> 00:15:41,120
yeah as you can see uh a like kubernetes

00:15:40,320 --> 00:15:44,800
cluster is

00:15:41,120 --> 00:15:46,800
uh being provisioned right now uh

00:15:44,800 --> 00:15:48,320
and since this will take a while i would

00:15:46,800 --> 00:15:52,160
like to uh

00:15:48,320 --> 00:15:54,560
like go to to the repository and

00:15:52,160 --> 00:15:55,600
we can use this time to go over the

00:15:54,560 --> 00:15:59,680
configuration

00:15:55,600 --> 00:16:03,199
uh in that repository so

00:15:59,680 --> 00:16:03,199
like we have uh

00:16:03,279 --> 00:16:08,880
multiple compositions here uh and

00:16:06,399 --> 00:16:10,079
uh like let's start with the gke

00:16:08,880 --> 00:16:13,920
composition

00:16:10,079 --> 00:16:16,320
uh this composition contains a like

00:16:13,920 --> 00:16:18,000
gke cluster resource provided by

00:16:16,320 --> 00:16:21,279
provider gcp

00:16:18,000 --> 00:16:21,680
and uh contains a node pool resource

00:16:21,279 --> 00:16:24,720
again

00:16:21,680 --> 00:16:26,560
provided by provided gcp this

00:16:24,720 --> 00:16:28,560
composition also contains

00:16:26,560 --> 00:16:30,959
one last resource which is a provider

00:16:28,560 --> 00:16:34,160
config resource

00:16:30,959 --> 00:16:34,800
which is going to be used by provider

00:16:34,160 --> 00:16:37,839
helm

00:16:34,800 --> 00:16:40,480
so that it can make the deployment to

00:16:37,839 --> 00:16:41,920
to that like to this newly provisioned

00:16:40,480 --> 00:16:44,079
gke cluster

00:16:41,920 --> 00:16:45,600
so when this composite resource is ready

00:16:44,079 --> 00:16:49,199
we will have a provider

00:16:45,600 --> 00:16:51,680
config pointing to to that cluster

00:16:49,199 --> 00:16:52,880
so the next composite resource or the

00:16:51,680 --> 00:16:56,880
next composition

00:16:52,880 --> 00:17:00,160
is uh the one that named as volt

00:16:56,880 --> 00:17:03,519
and this in this composition

00:17:00,160 --> 00:17:04,720
we are creating like a lot of gcp

00:17:03,519 --> 00:17:07,520
resources

00:17:04,720 --> 00:17:09,039
one is for like service accounts key

00:17:07,520 --> 00:17:13,919
ring

00:17:09,039 --> 00:17:18,319
crypto key crypto key policy

00:17:13,919 --> 00:17:21,360
service account policy bucket a good

00:17:18,319 --> 00:17:21,360
policy membership

00:17:21,600 --> 00:17:28,799
and we have uh two hand releases here

00:17:25,120 --> 00:17:32,640
uh one this hand release is

00:17:28,799 --> 00:17:33,120
just to uh like to deploy tls secrets

00:17:32,640 --> 00:17:36,559
for

00:17:33,120 --> 00:17:37,360
four volt uh servers and we are using

00:17:36,559 --> 00:17:40,480
the

00:17:37,360 --> 00:17:40,880
like capability of uh help chart to to

00:17:40,480 --> 00:17:44,480
pro

00:17:40,880 --> 00:17:47,120
to create uh certificates

00:17:44,480 --> 00:17:47,520
uh this held chart contains nothing but

00:17:47,120 --> 00:17:50,640
just

00:17:47,520 --> 00:17:54,000
a tls secret which will deploy uh

00:17:50,640 --> 00:17:56,400
like volts tls secret uh but

00:17:54,000 --> 00:17:57,600
this world-based help chart could be

00:17:56,400 --> 00:17:59,840
used further

00:17:57,600 --> 00:18:01,280
like if for example you want to enable

00:17:59,840 --> 00:18:04,000
network policies

00:18:01,280 --> 00:18:04,400
you can like put your network policies

00:18:04,000 --> 00:18:07,039
here

00:18:04,400 --> 00:18:07,679
in this chart or if you want to run some

00:18:07,039 --> 00:18:10,320
like

00:18:07,679 --> 00:18:10,960
pre-installed configuration script or

00:18:10,320 --> 00:18:14,160
job

00:18:10,960 --> 00:18:17,520
then you can uh like put your

00:18:14,160 --> 00:18:21,280
manifest in this hand release this is

00:18:17,520 --> 00:18:22,240
quite convenient so and finally we have

00:18:21,280 --> 00:18:24,799
our actual

00:18:22,240 --> 00:18:26,320
hound release which will deploy the

00:18:24,799 --> 00:18:29,440
vault itself

00:18:26,320 --> 00:18:32,559
and here you can see we are using the

00:18:29,440 --> 00:18:36,640
official wall town chart and

00:18:32,559 --> 00:18:39,840
we are providing uh chart values here

00:18:36,640 --> 00:18:42,160
and since we will need to use

00:18:39,840 --> 00:18:45,200
dynamically created uh

00:18:42,160 --> 00:18:47,440
like resource names we can just mention

00:18:45,200 --> 00:18:49,919
for example gcp bucket name here

00:18:47,440 --> 00:18:50,640
rather we need to patch patch it from

00:18:49,919 --> 00:18:54,160
the

00:18:50,640 --> 00:18:57,840
uh like composite resource

00:18:54,160 --> 00:19:01,120
so let's see uh

00:18:57,840 --> 00:19:04,480
let's take a look for an example i think

00:19:01,120 --> 00:19:07,200
the the best example is this one so here

00:19:04,480 --> 00:19:08,880
you can see that we need to pass for

00:19:07,200 --> 00:19:11,360
example bucket name

00:19:08,880 --> 00:19:12,480
and we need to pass like project name

00:19:11,360 --> 00:19:14,720
key ring

00:19:12,480 --> 00:19:16,559
and crypto key name by the way we are

00:19:14,720 --> 00:19:17,360
using a single key link but we are

00:19:16,559 --> 00:19:21,039
creating

00:19:17,360 --> 00:19:23,520
uh multiple crypto keys under this

00:19:21,039 --> 00:19:24,240
key ring so dynamically created crypto

00:19:23,520 --> 00:19:27,600
key name

00:19:24,240 --> 00:19:28,720
uh will be fed here and we are doing

00:19:27,600 --> 00:19:31,360
this by using

00:19:28,720 --> 00:19:32,559
the like uh crossplane composition

00:19:31,360 --> 00:19:35,039
patches

00:19:32,559 --> 00:19:36,960
and also i would like to mention that at

00:19:35,039 --> 00:19:39,919
the sign at the time of this

00:19:36,960 --> 00:19:42,160
recording uh it was like there was an

00:19:39,919 --> 00:19:45,360
open pr to which enables

00:19:42,160 --> 00:19:48,000
uh multiple input compositions

00:19:45,360 --> 00:19:49,039
and this uh i'm making the demo from

00:19:48,000 --> 00:19:52,320
that open pr

00:19:49,039 --> 00:19:56,640
and uh like that that pr

00:19:52,320 --> 00:19:59,440
enables such uh patches um

00:19:56,640 --> 00:20:00,240
yeah so these two compositions that we

00:19:59,440 --> 00:20:02,240
had a look

00:20:00,240 --> 00:20:03,520
but as i mentioned in the like

00:20:02,240 --> 00:20:06,559
presentation

00:20:03,520 --> 00:20:08,559
uh the cool thing is

00:20:06,559 --> 00:20:10,240
once you define your compositions and

00:20:08,559 --> 00:20:13,679
composite resources at

00:20:10,240 --> 00:20:15,600
a kubernetes api you can go for further

00:20:13,679 --> 00:20:16,799
and create more compositions by

00:20:15,600 --> 00:20:20,000
combining them

00:20:16,799 --> 00:20:23,520
so this composition actually defines

00:20:20,000 --> 00:20:27,760
a new type called world clusters and

00:20:23,520 --> 00:20:31,520
it combines the previously defined

00:20:27,760 --> 00:20:34,640
compositions so this is a composition of

00:20:31,520 --> 00:20:36,080
previous two compositions which like

00:20:34,640 --> 00:20:39,280
composes a

00:20:36,080 --> 00:20:42,480
gke which contains the like

00:20:39,280 --> 00:20:43,360
gk cluster not full and provider config

00:20:42,480 --> 00:20:49,039
for helm

00:20:43,360 --> 00:20:52,159
and also it contains volts composition

00:20:49,039 --> 00:20:54,880
yeah so let's have a quick look

00:20:52,159 --> 00:20:54,880
how our

00:20:55,200 --> 00:20:58,320
deployment is going

00:20:59,600 --> 00:21:06,159
so yeah it looks great so as you can see

00:21:03,200 --> 00:21:08,320
all of the resources seems to be ready

00:21:06,159 --> 00:21:11,600
and synced

00:21:08,320 --> 00:21:13,440
uh so this means that our composed

00:21:11,600 --> 00:21:18,000
resource should also be

00:21:13,440 --> 00:21:18,960
uh like yeah our composite resource is

00:21:18,000 --> 00:21:21,919
also ready

00:21:18,960 --> 00:21:23,280
let's also check our helm releases so

00:21:21,919 --> 00:21:26,240
that's

00:21:23,280 --> 00:21:26,720
yeah here you can see that helm releases

00:21:26,240 --> 00:21:29,760
are

00:21:26,720 --> 00:21:32,880
uh like actual help release is

00:21:29,760 --> 00:21:34,159
deployed on the like gke cluster okay

00:21:32,880 --> 00:21:39,440
let's connect to that

00:21:34,159 --> 00:21:39,440
humanities cluster let's

00:21:40,000 --> 00:21:47,200
system name space and

00:21:44,320 --> 00:21:47,919
yeah yeah as you can see all volt uh

00:21:47,200 --> 00:21:51,120
clusters

00:21:47,919 --> 00:21:52,960
uh volt uh ports are up and running uh

00:21:51,120 --> 00:21:54,240
and they reported as ready which means

00:21:52,960 --> 00:21:57,679
that they are uh

00:21:54,240 --> 00:22:00,159
unsealed uh maybe we can also

00:21:57,679 --> 00:22:00,799
check the world configuration from one

00:22:00,159 --> 00:22:03,760
of

00:22:00,799 --> 00:22:03,760
like one of them

00:22:04,640 --> 00:22:12,000
yeah so here you can see that uh

00:22:07,760 --> 00:22:15,120
volts vault server configuration uh

00:22:12,000 --> 00:22:16,880
like it is configured for using this uh

00:22:15,120 --> 00:22:20,000
kms crypto key

00:22:16,880 --> 00:22:23,520
this key ring uh and uh

00:22:20,000 --> 00:22:27,760
like h a is available

00:22:23,520 --> 00:22:31,600
with uh gcs storage uh

00:22:27,760 --> 00:22:34,400
yeah and uh if i could scroll down

00:22:31,600 --> 00:22:36,960
yeah and as you can see like vault is

00:22:34,400 --> 00:22:36,960
unsealed

00:22:37,120 --> 00:22:43,679
okay yeah so that's the end of my demo

00:22:40,880 --> 00:22:45,840
i'm happy to answer any questions if you

00:22:43,679 --> 00:22:51,120
have

00:22:45,840 --> 00:22:51,120

YouTube URL: https://www.youtube.com/watch?v=vYQY_ej7AfI


