Title: Panel: Emerging Trends in Cloud Engineering: Platform as product, APIs, self-service & more
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Panel: Emerging Trends in Cloud Engineering: Platform as product, APIs, self-service & more - Alex Jones, DevOps Institute Ambassador, Brian Gracely, RedHat Open Shift, Katie Gamanji, CNCF & Viktor Farcic, Shipa Moderator: Daniel Bryant, Ambassador Labs

The session aims to provide insights on the trends shaping the cloud native industry including the rise of platform teams, the need for increased automation and self service, Kubernetes as a universal control plane and the importance of organizing teams around APIs. Panelists will share insight, lessons learned as well as predicting technology and ecosystem trends for 2021.
Captions: 
	00:00:00,000 --> 00:00:03,120
so welcome everyone to the emerging

00:00:01,360 --> 00:00:04,720
trends in cloud engineering panel that

00:00:03,120 --> 00:00:07,359
will focus on platforms products

00:00:04,720 --> 00:00:07,919
platform apis developer self-service and

00:00:07,359 --> 00:00:10,240
more

00:00:07,919 --> 00:00:11,759
we have a fantastic lineup of panelists

00:00:10,240 --> 00:00:12,480
today genuinely privileged to be amongst

00:00:11,759 --> 00:00:14,639
these folks

00:00:12,480 --> 00:00:16,240
including alex jones brian gracely katy

00:00:14,639 --> 00:00:17,440
kimanji and victor farsec

00:00:16,240 --> 00:00:19,199
i'll let them introduce themselves in

00:00:17,440 --> 00:00:19,760
just a second i'm your host daniel

00:00:19,199 --> 00:00:21,119
bryant

00:00:19,760 --> 00:00:22,800
i'm currently director of devrel and

00:00:21,119 --> 00:00:24,720
ambassador labs where i focus on helping

00:00:22,800 --> 00:00:27,279
engineers build platforms and deliver

00:00:24,720 --> 00:00:28,560
applications on kubernetes so could we

00:00:27,279 --> 00:00:31,439
go around the room please and

00:00:28,560 --> 00:00:33,760
quick introduction of who you are okay

00:00:31,439 --> 00:00:35,600
i'll start with you

00:00:33,760 --> 00:00:37,200
sure hello everyone my name is katie

00:00:35,600 --> 00:00:38,480
gamanchi and currently i am the

00:00:37,200 --> 00:00:40,960
ecosystem advocate

00:00:38,480 --> 00:00:42,000
at cncf or cloud native computing

00:00:40,960 --> 00:00:44,239
foundation

00:00:42,000 --> 00:00:45,440
i have been in this role for almost half

00:00:44,239 --> 00:00:46,960
a year having my

00:00:45,440 --> 00:00:48,640
first anniversary there well half

00:00:46,960 --> 00:00:50,320
anniversary and

00:00:48,640 --> 00:00:52,160
my responsibility within this role is to

00:00:50,320 --> 00:00:53,440
pretty much lead the end user community

00:00:52,160 --> 00:00:55,120
so these are the vendor mutual

00:00:53,440 --> 00:00:55,680
organizations that use cloud native

00:00:55,120 --> 00:00:57,440
tooling

00:00:55,680 --> 00:00:59,039
but at the same time to bridge the gap

00:00:57,440 --> 00:01:01,120
between these practitioners and the

00:00:59,039 --> 00:01:03,280
projects within the ecosystem

00:01:01,120 --> 00:01:04,879
and uh yeah i'm going to finish off with

00:01:03,280 --> 00:01:07,280
this one

00:01:04,879 --> 00:01:08,320
perfect brian you want to go next sure

00:01:07,280 --> 00:01:10,000
um hi everybody

00:01:08,320 --> 00:01:12,159
my name is brian gracely i'm senior

00:01:10,000 --> 00:01:14,080
director of product strategy at red hat

00:01:12,159 --> 00:01:15,680
uh primarily for the openshift platforms

00:01:14,080 --> 00:01:17,360
our kubernetes platform

00:01:15,680 --> 00:01:19,600
uh and on the side i host the uh the

00:01:17,360 --> 00:01:21,360
cloudcast podcast

00:01:19,600 --> 00:01:23,119
brilliant victor you're next in my box

00:01:21,360 --> 00:01:26,000
lineup okay so

00:01:23,119 --> 00:01:27,040
uh i work in shipa i'm a developer

00:01:26,000 --> 00:01:28,880
advocate there

00:01:27,040 --> 00:01:30,960
i do not yet know what i'm going to do

00:01:28,880 --> 00:01:34,799
there because i'm about to join

00:01:30,960 --> 00:01:37,920
tomorrow uh so something in shippa

00:01:34,799 --> 00:01:39,840
i have a youtube channel and uh

00:01:37,920 --> 00:01:41,680
i don't know i published a few books

00:01:39,840 --> 00:01:44,720
that's all stupid

00:01:41,680 --> 00:01:46,399
alex last by no means least um hi i'm

00:01:44,720 --> 00:01:48,560
alex i'm a principal engineer at

00:01:46,399 --> 00:01:50,479
uh sivo cevo is a cloud computing

00:01:48,560 --> 00:01:52,720
provider built on k3s

00:01:50,479 --> 00:01:54,320
i build hyper-converged infrastructure

00:01:52,720 --> 00:01:56,560
all the way up to operators all the way

00:01:54,320 --> 00:01:58,560
up to tenant application architecture

00:01:56,560 --> 00:02:02,000
i also work a little bit with uh sig app

00:01:58,560 --> 00:02:03,200
delivery and observability

00:02:02,000 --> 00:02:05,600
excellent next i appreciate all that

00:02:03,200 --> 00:02:06,960
sounds perfect so we'll start off by

00:02:05,600 --> 00:02:09,599
asking the question of what does a

00:02:06,960 --> 00:02:12,160
modern platform or i often say pass

00:02:09,599 --> 00:02:14,080
platform as a service look like we had

00:02:12,160 --> 00:02:16,800
the rise of infrastructures code

00:02:14,080 --> 00:02:18,959
containers kubernetes and many of us are

00:02:16,800 --> 00:02:20,720
hanging back to the days of heroku

00:02:18,959 --> 00:02:22,720
of cloud foundry where it was git push

00:02:20,720 --> 00:02:25,280
master and we were good to go right

00:02:22,720 --> 00:02:25,840
what do what do you all think of modern

00:02:25,280 --> 00:02:28,400
paths

00:02:25,840 --> 00:02:28,400
encompasses

00:02:29,120 --> 00:02:33,200
i think we do not have it yet we will

00:02:32,160 --> 00:02:36,000
soon

00:02:33,200 --> 00:02:37,760
i believe that that's the next step in

00:02:36,000 --> 00:02:38,080
evolution of kubernetes i mean we know

00:02:37,760 --> 00:02:39,760
that

00:02:38,080 --> 00:02:42,800
that modern platform is going to be

00:02:39,760 --> 00:02:46,000
kubernetes based that's certain today

00:02:42,800 --> 00:02:48,720
and i think that we are just starting

00:02:46,000 --> 00:02:50,400
uh building platforms like that and when

00:02:48,720 --> 00:02:53,360
i say platforms of that i mean

00:02:50,400 --> 00:02:55,040
heroku-like right because i think there

00:02:53,360 --> 00:02:57,200
is some kind of misconception that

00:02:55,040 --> 00:02:58,640
developers will adopt kubernetes i think

00:02:57,200 --> 00:03:00,720
that that will never happen

00:02:58,640 --> 00:03:01,840
it's too complex for vast majority of

00:03:00,720 --> 00:03:05,040
people

00:03:01,840 --> 00:03:06,959
and 2021 will be

00:03:05,040 --> 00:03:09,280
probably a year where we will see

00:03:06,959 --> 00:03:13,440
emergence of platforms

00:03:09,280 --> 00:03:13,440
that layers on top of kubernetes

00:03:14,640 --> 00:03:18,800
actually i uh i actually i'm over the

00:03:17,120 --> 00:03:20,640
same opinion here

00:03:18,800 --> 00:03:22,400
i think there is always like an

00:03:20,640 --> 00:03:23,440
evolution cycle we go around when it

00:03:22,400 --> 00:03:25,760
comes to deploying

00:03:23,440 --> 00:03:28,080
uh applications we had this cycle when

00:03:25,760 --> 00:03:28,799
it came to the vms so pretty much how

00:03:28,080 --> 00:03:30,560
can we make

00:03:28,799 --> 00:03:32,560
best use of our compute at the time we

00:03:30,560 --> 00:03:34,560
had the configuration as code that was

00:03:32,560 --> 00:03:36,720
heavily dominated by tools such as

00:03:34,560 --> 00:03:39,280
ansible or salt at the time

00:03:36,720 --> 00:03:40,400
and i think we kind of go undergoing the

00:03:39,280 --> 00:03:42,239
same patterns but

00:03:40,400 --> 00:03:44,400
with it with different technology that's

00:03:42,239 --> 00:03:46,560
where we have kubernetes coming around

00:03:44,400 --> 00:03:48,000
and now we again making the best usage

00:03:46,560 --> 00:03:49,040
of our space but now we're using

00:03:48,000 --> 00:03:50,640
containers

00:03:49,040 --> 00:03:52,239
and they pretty much the linux

00:03:50,640 --> 00:03:54,080
primitives that linux kernel primitives

00:03:52,239 --> 00:03:56,720
with secrets and namespaces

00:03:54,080 --> 00:03:58,319
we um have different ways to describe

00:03:56,720 --> 00:04:00,799
our configuration from playing

00:03:58,319 --> 00:04:01,760
yaml we transitioned to templating with

00:04:00,799 --> 00:04:04,560
helm charts

00:04:01,760 --> 00:04:06,319
now we have crds to further customize

00:04:04,560 --> 00:04:09,120
the experience of our developers

00:04:06,319 --> 00:04:10,319
and now i think we are at a moment where

00:04:09,120 --> 00:04:11,680
we trade like we have the

00:04:10,319 --> 00:04:13,120
we have the ecosystem there we have the

00:04:11,680 --> 00:04:14,159
technology but now we're trying to make

00:04:13,120 --> 00:04:16,320
the best of it to

00:04:14,159 --> 00:04:17,440
really enrich the developer experience i

00:04:16,320 --> 00:04:19,440
think how can we

00:04:17,440 --> 00:04:21,840
deploy easier to have that competitive

00:04:19,440 --> 00:04:23,440
edge towards like a technology or a

00:04:21,840 --> 00:04:25,280
business

00:04:23,440 --> 00:04:27,120
it's interesting just to follow from

00:04:25,280 --> 00:04:29,199
katie's uh statement there that

00:04:27,120 --> 00:04:30,479
kelsey hightower came out with a really

00:04:29,199 --> 00:04:32,320
great sort of uh

00:04:30,479 --> 00:04:33,919
sentence around that most people want to

00:04:32,320 --> 00:04:35,360
want a paz but the requirement is it has

00:04:33,919 --> 00:04:36,800
to be built by them right so

00:04:35,360 --> 00:04:38,720
taking all these commodity tools and

00:04:36,800 --> 00:04:40,000
wrapping it into your own kind of flavor

00:04:38,720 --> 00:04:42,080
to give you your own paths i thought

00:04:40,000 --> 00:04:44,320
that was kind of kind of a good take on

00:04:42,080 --> 00:04:45,840
it right

00:04:44,320 --> 00:04:48,639
yeah i would build on top of that i

00:04:45,840 --> 00:04:51,280
think that most companies

00:04:48,639 --> 00:04:54,080
do that and after a couple of years they

00:04:51,280 --> 00:04:55,919
realize that they failed

00:04:54,080 --> 00:04:57,600
yes and then they're looking for a real

00:04:55,919 --> 00:04:59,040
buzz

00:04:57,600 --> 00:05:01,039
yeah we always kind of come back and

00:04:59,040 --> 00:05:02,639
forth between this um you know i think

00:05:01,039 --> 00:05:04,160
james governor the other day was joking

00:05:02,639 --> 00:05:05,440
on on twitter he said everybody that's

00:05:04,160 --> 00:05:06,639
building platforms is trying to

00:05:05,440 --> 00:05:07,840
replicate heroku

00:05:06,639 --> 00:05:09,199
i think it's a little different i think

00:05:07,840 --> 00:05:10,639
the spectrum is a little bigger i think

00:05:09,199 --> 00:05:12,560
on one end

00:05:10,639 --> 00:05:14,560
there's a set of developers or a set of

00:05:12,560 --> 00:05:17,039
work use cases that are looking for

00:05:14,560 --> 00:05:19,280
really highly opinionated and even maybe

00:05:17,039 --> 00:05:20,000
more so than heroku like what netlifly

00:05:19,280 --> 00:05:22,240
does or

00:05:20,000 --> 00:05:23,039
you know cloud run or or lambda or

00:05:22,240 --> 00:05:24,479
something

00:05:23,039 --> 00:05:26,479
but then there's there's the other part

00:05:24,479 --> 00:05:29,520
of which is do we want to sort of

00:05:26,479 --> 00:05:31,360
proliferate uh opinionated platforms

00:05:29,520 --> 00:05:33,680
and so we see things like you know with

00:05:31,360 --> 00:05:37,039
kubernetes we see operators let us run

00:05:33,680 --> 00:05:39,919
databases and ai and ml workloads and

00:05:37,039 --> 00:05:41,440
so that to me is more the the question

00:05:39,919 --> 00:05:43,520
is like are you looking for

00:05:41,440 --> 00:05:45,440
highly opinionated sort of one-off

00:05:43,520 --> 00:05:46,080
platforms and those will fit certain use

00:05:45,440 --> 00:05:47,680
cases

00:05:46,080 --> 00:05:49,919
where do you want something you know

00:05:47,680 --> 00:05:52,080
kubernetes gives us a foundation to do

00:05:49,919 --> 00:05:53,280
a lot of things is that a better way to

00:05:52,080 --> 00:05:54,479
solve you know

00:05:53,280 --> 00:05:56,720
the breadth of problems that most

00:05:54,479 --> 00:05:58,160
companies have i like that brian and

00:05:56,720 --> 00:05:59,520
that actually leads nicely on thank you

00:05:58,160 --> 00:06:00,479
everyone but that leads nicely onto the

00:05:59,520 --> 00:06:02,639
next question is

00:06:00,479 --> 00:06:04,400
we frequently now talk about platform as

00:06:02,639 --> 00:06:05,120
a product it should be designed as a

00:06:04,400 --> 00:06:07,039
product

00:06:05,120 --> 00:06:08,479
managed as a product and released and

00:06:07,039 --> 00:06:11,680
controlled as a product which i

00:06:08,479 --> 00:06:12,960
totally buy into my my day job how does

00:06:11,680 --> 00:06:14,479
the implementation of this

00:06:12,960 --> 00:06:17,680
differ from the traditional approaches

00:06:14,479 --> 00:06:17,680
many of you sort of mentioned

00:06:18,400 --> 00:06:22,560
i think from my own experience there's a

00:06:20,560 --> 00:06:23,520
bias towards reuse and proliferation

00:06:22,560 --> 00:06:25,600
these days

00:06:23,520 --> 00:06:27,039
um platform as a product is essentially

00:06:25,600 --> 00:06:28,880
a way of

00:06:27,039 --> 00:06:30,560
mandating and ensuring your survival

00:06:28,880 --> 00:06:32,639
within the ecosystem and that you are

00:06:30,560 --> 00:06:34,479
wrapping up all of the domain specific

00:06:32,639 --> 00:06:35,759
knowledge and the components that you

00:06:34,479 --> 00:06:37,840
need to be successful and

00:06:35,759 --> 00:06:39,520
you know i think of some of these uh you

00:06:37,840 --> 00:06:41,120
know aforementioned products that

00:06:39,520 --> 00:06:42,960
are really popular in the ecosystem and

00:06:41,120 --> 00:06:45,120
heroku really being kind of the

00:06:42,960 --> 00:06:46,720
nostalgic gold standard but if you were

00:06:45,120 --> 00:06:47,840
to rebuild heroku in the case-based

00:06:46,720 --> 00:06:48,560
environment it would look very very

00:06:47,840 --> 00:06:50,319
different

00:06:48,560 --> 00:06:51,520
and i think that it's really uh

00:06:50,319 --> 00:06:53,199
imperative that we understand that there

00:06:51,520 --> 00:06:54,800
is no panacea currently

00:06:53,199 --> 00:06:56,560
and really when we think about platform

00:06:54,800 --> 00:06:58,319
as a product currently it's something

00:06:56,560 --> 00:07:00,240
that is extensible right so there can be

00:06:58,319 --> 00:07:01,120
community reuse as well as building on

00:07:00,240 --> 00:07:02,240
top of

00:07:01,120 --> 00:07:04,560
and we've seen many of those already

00:07:02,240 --> 00:07:04,560
today

00:07:07,360 --> 00:07:13,120
the the place where i think that many

00:07:11,120 --> 00:07:14,319
or one of the main reasons why many

00:07:13,120 --> 00:07:16,720
platforms failed in

00:07:14,319 --> 00:07:17,759
in the past is i believe that they all

00:07:16,720 --> 00:07:20,560
tended to go

00:07:17,759 --> 00:07:21,919
to extremes either be extremely

00:07:20,560 --> 00:07:24,479
opinionated

00:07:21,919 --> 00:07:25,759
and satisfy let's say developers and

00:07:24,479 --> 00:07:28,240
completely leave

00:07:25,759 --> 00:07:29,520
operators and sys admins and sres you

00:07:28,240 --> 00:07:31,599
know people who

00:07:29,520 --> 00:07:32,560
are making sure that systems are running

00:07:31,599 --> 00:07:36,319
properly

00:07:32,560 --> 00:07:39,039
uh unsatisfied or like kubernetes

00:07:36,319 --> 00:07:40,560
is today that he satisfies one group and

00:07:39,039 --> 00:07:42,080
it doesn't satisfy the other right

00:07:40,560 --> 00:07:44,479
so it usually goes into extreme

00:07:42,080 --> 00:07:47,199
extremely opinionated doesn't work for

00:07:44,479 --> 00:07:48,720
sysadmins works for cisadmins developers

00:07:47,199 --> 00:07:52,080
cannot use it

00:07:48,720 --> 00:07:54,080
and that's why i believe that we are now

00:07:52,080 --> 00:07:56,639
in a good spot that we have that we have

00:07:54,080 --> 00:08:00,000
kubernetes it does satisfy c-service

00:07:56,639 --> 00:08:01,919
it does what it needs to do and what we

00:08:00,000 --> 00:08:03,680
are missing is that layer on top that

00:08:01,919 --> 00:08:05,840
that's why i believe heroku in a way

00:08:03,680 --> 00:08:08,240
failed or docker's form failed as well

00:08:05,840 --> 00:08:09,120
they started with from that other

00:08:08,240 --> 00:08:11,120
direction

00:08:09,120 --> 00:08:12,160
let's start with making it easy for

00:08:11,120 --> 00:08:14,160
people

00:08:12,160 --> 00:08:16,000
instead of making actually making it

00:08:14,160 --> 00:08:18,400
have all the

00:08:16,000 --> 00:08:20,160
all the levers that it needs to have

00:08:18,400 --> 00:08:23,120
before we build

00:08:20,160 --> 00:08:24,840
that abstraction layer that that will

00:08:23,120 --> 00:08:28,240
satisfy the other group

00:08:24,840 --> 00:08:31,280
people and nobody did that in the past

00:08:28,240 --> 00:08:32,959
really or at least very few

00:08:31,280 --> 00:08:34,159
yeah i think i think it's interesting as

00:08:32,959 --> 00:08:34,800
we get into thinking about it as a

00:08:34,159 --> 00:08:37,039
product

00:08:34,800 --> 00:08:37,839
we've we've sort of moved past the idea

00:08:37,039 --> 00:08:40,640
of like

00:08:37,839 --> 00:08:42,080
is the decision sort of uh buy versus

00:08:40,640 --> 00:08:43,680
build something yourself right take a

00:08:42,080 --> 00:08:45,519
lot of the parts together

00:08:43,680 --> 00:08:46,959
and and now it's it's more a matter of

00:08:45,519 --> 00:08:48,800
like uh

00:08:46,959 --> 00:08:50,399
if i have a platform whether it's you

00:08:48,800 --> 00:08:51,920
consume it as a managed service or you

00:08:50,399 --> 00:08:54,640
consume it as software

00:08:51,920 --> 00:08:56,880
it's does does that the way that that

00:08:54,640 --> 00:08:59,040
thing is delivered as a platform

00:08:56,880 --> 00:09:00,320
meets your needs so like as an example

00:08:59,040 --> 00:09:01,920
so there was a

00:09:00,320 --> 00:09:03,519
threat on on i think hacker news

00:09:01,920 --> 00:09:04,640
yesterday or the day before that was

00:09:03,519 --> 00:09:06,240
you know kubernetes is really

00:09:04,640 --> 00:09:08,640
complicated because it comes out so

00:09:06,240 --> 00:09:10,640
frequently how do i keep up with updates

00:09:08,640 --> 00:09:12,240
and and one side of the argument was

00:09:10,640 --> 00:09:13,680
well who cares just

00:09:12,240 --> 00:09:15,519
spin up another cluster and move your

00:09:13,680 --> 00:09:17,519
stateless applications over there

00:09:15,519 --> 00:09:19,120
and when you put that sort of response

00:09:17,519 --> 00:09:20,480
in front of anybody who does anything

00:09:19,120 --> 00:09:22,480
stateless

00:09:20,480 --> 00:09:24,959
you know it's somewhere between you know

00:09:22,480 --> 00:09:26,720
uh or you know kind of face palm

00:09:24,959 --> 00:09:27,920
and i think we need to realize like

00:09:26,720 --> 00:09:30,080
delivering the platform is really

00:09:27,920 --> 00:09:31,839
important delivering updates and making

00:09:30,080 --> 00:09:33,839
it simple for people to consume

00:09:31,839 --> 00:09:35,519
but but there's even parts of that that

00:09:33,839 --> 00:09:36,000
that are hard for people right like the

00:09:35,519 --> 00:09:38,240
three or four

00:09:36,000 --> 00:09:39,680
months cycle of kubernetes is really

00:09:38,240 --> 00:09:41,600
hard for an organization

00:09:39,680 --> 00:09:43,040
that has an application they don't touch

00:09:41,600 --> 00:09:45,040
nearly as quickly right

00:09:43,040 --> 00:09:47,360
there is an aspect of that that's you

00:09:45,040 --> 00:09:48,720
know lift and shift or modernize so i

00:09:47,360 --> 00:09:50,480
again i think there's there's sort of

00:09:48,720 --> 00:09:51,279
these these shades of gray in between

00:09:50,480 --> 00:09:53,200
stuff that

00:09:51,279 --> 00:09:54,959
if you make it all one kind of

00:09:53,200 --> 00:09:56,959
definition it makes it hard

00:09:54,959 --> 00:09:58,880
to like like victor mentioned like it

00:09:56,959 --> 00:10:05,279
doesn't applies to one side but not the

00:09:58,880 --> 00:10:08,160
other necessarily

00:10:05,279 --> 00:10:09,519
i think on that point i'll i'll skip a

00:10:08,160 --> 00:10:12,640
few of the questions i've initially

00:10:09,519 --> 00:10:15,200
talked about and look at the

00:10:12,640 --> 00:10:16,160
open application model uh the the om

00:10:15,200 --> 00:10:17,839
spec

00:10:16,160 --> 00:10:19,040
one thing i've just heard you all talk

00:10:17,839 --> 00:10:20,640
about and one thing that really stood

00:10:19,040 --> 00:10:23,760
out to me in the oam spec

00:10:20,640 --> 00:10:25,760
is this clear definition of personas so

00:10:23,760 --> 00:10:27,120
it's gone through a few iterations but

00:10:25,760 --> 00:10:29,440
now it's focused

00:10:27,120 --> 00:10:30,560
on component owners which are mere kind

00:10:29,440 --> 00:10:33,279
of developers

00:10:30,560 --> 00:10:34,640
application operators kind of sre like i

00:10:33,279 --> 00:10:35,200
think slight reliability engineering

00:10:34,640 --> 00:10:37,040
like

00:10:35,200 --> 00:10:38,320
and infrastructure operators which for

00:10:37,040 --> 00:10:40,560
me are the kind of classic platform

00:10:38,320 --> 00:10:42,880
folks this is admin folks

00:10:40,560 --> 00:10:44,320
do yeah and i do like the the three

00:10:42,880 --> 00:10:46,480
distinct personas rather than the

00:10:44,320 --> 00:10:48,480
classic perhaps devon ops thing

00:10:46,480 --> 00:10:50,880
do you all see that in your day jobs do

00:10:48,480 --> 00:10:53,200
you see perhaps the three personas there

00:10:50,880 --> 00:10:54,320
do you like that part of the oem spec

00:10:53,200 --> 00:10:56,399
what i'd love to get your thoughts on

00:10:54,320 --> 00:10:58,720
that

00:10:56,399 --> 00:11:00,160
so so i can speak a little from a

00:10:58,720 --> 00:11:01,440
financial perspective where there's a

00:11:00,160 --> 00:11:02,800
highly regulated

00:11:01,440 --> 00:11:04,880
set of protocols to which you have to

00:11:02,800 --> 00:11:05,839
follow and you know it very much is

00:11:04,880 --> 00:11:07,680
reflected in

00:11:05,839 --> 00:11:09,839
there being a clear distinction between

00:11:07,680 --> 00:11:10,800
operational staff who can touch clusters

00:11:09,839 --> 00:11:12,160
who can you know deal with

00:11:10,800 --> 00:11:14,800
infrastructure and debug

00:11:12,160 --> 00:11:16,399
then the sre team who may well be you

00:11:14,800 --> 00:11:18,079
know observing telemetry and

00:11:16,399 --> 00:11:19,200
making iterations on application code

00:11:18,079 --> 00:11:20,800
and then you've got their counterparts

00:11:19,200 --> 00:11:22,240
with the development cycle team and if

00:11:20,800 --> 00:11:23,680
you were to draw sort of a venn diagram

00:11:22,240 --> 00:11:25,279
these all touch slightly you know

00:11:23,680 --> 00:11:26,880
between the three groups and so

00:11:25,279 --> 00:11:28,480
it is nice seeing a recognition there

00:11:26,880 --> 00:11:30,480
and the thing that i really like about

00:11:28,480 --> 00:11:31,680
the spec is that it looks to sort of

00:11:30,480 --> 00:11:33,040
unite the

00:11:31,680 --> 00:11:34,399
the users and the platform builders

00:11:33,040 --> 00:11:35,440
right within a single single

00:11:34,399 --> 00:11:37,279
specification so

00:11:35,440 --> 00:11:40,640
it's it very much is reflective of what

00:11:37,279 --> 00:11:42,480
we're seeing in the industry

00:11:40,640 --> 00:11:43,680
i can actually bring an example from my

00:11:42,480 --> 00:11:45,360
pastorals as well

00:11:43,680 --> 00:11:47,120
and i think this kind of segregation

00:11:45,360 --> 00:11:49,120
between different roles and different

00:11:47,120 --> 00:11:49,760
personas that happened organically for

00:11:49,120 --> 00:11:51,839
us

00:11:49,760 --> 00:11:53,680
which was quite likely but initially we

00:11:51,839 --> 00:11:55,760
started as one team which provisioned

00:11:53,680 --> 00:11:56,880
infrastructure as a service

00:11:55,760 --> 00:11:58,160
and that's if we're looking at the team

00:11:56,880 --> 00:11:58,800
topologies that's going to be a type

00:11:58,160 --> 00:12:00,720
free

00:11:58,800 --> 00:12:02,880
and at that point we would just pretty

00:12:00,720 --> 00:12:04,560
much build for the demand we have

00:12:02,880 --> 00:12:06,160
uh from our developers straight away

00:12:04,560 --> 00:12:07,600
however there is not too much of

00:12:06,160 --> 00:12:08,560
upskilling going on there is not too

00:12:07,600 --> 00:12:10,240
much

00:12:08,560 --> 00:12:12,000
of support that we could provide

00:12:10,240 --> 00:12:14,720
continuously and that

00:12:12,000 --> 00:12:15,120
kind of transition into a um a team

00:12:14,720 --> 00:12:16,880
actually

00:12:15,120 --> 00:12:18,639
our team divided where we have our

00:12:16,880 --> 00:12:19,760
platform team which just focused on the

00:12:18,639 --> 00:12:21,839
infrastructure

00:12:19,760 --> 00:12:23,360
uh provisioning and then we had our

00:12:21,839 --> 00:12:26,000
cloud management team which

00:12:23,360 --> 00:12:26,560
would focus on that ops kind of culture

00:12:26,000 --> 00:12:28,560
and

00:12:26,560 --> 00:12:30,000
towards the end we moved towards the sre

00:12:28,560 --> 00:12:32,240
model uh where we have

00:12:30,000 --> 00:12:33,440
an srt included as well and then we have

00:12:32,240 --> 00:12:35,440
this kind of collaboration

00:12:33,440 --> 00:12:37,360
when it comes to we don't just provision

00:12:35,440 --> 00:12:39,120
platform we upskill but at the same time

00:12:37,360 --> 00:12:40,560
we can push back on feature development

00:12:39,120 --> 00:12:42,639
and based on the slos

00:12:40,560 --> 00:12:44,320
we can bring things that would really

00:12:42,639 --> 00:12:45,839
empower our teams forever

00:12:44,320 --> 00:12:48,000
now why i'm saying that is that all of

00:12:45,839 --> 00:12:50,240
these kind of free teams that we have

00:12:48,000 --> 00:12:51,760
it was an organic kind of development of

00:12:50,240 --> 00:12:54,000
all of these personas that we see

00:12:51,760 --> 00:12:54,800
in first by the open application model

00:12:54,000 --> 00:12:57,040
as well

00:12:54,800 --> 00:12:58,720
and at the time we had to provision all

00:12:57,040 --> 00:13:01,200
these components we had to create our

00:12:58,720 --> 00:13:02,480
own methodologies and pretty much bring

00:13:01,200 --> 00:13:03,519
build the tooling of bringing the

00:13:02,480 --> 00:13:05,760
tooling house

00:13:03,519 --> 00:13:06,959
which will allow us to deliver this

00:13:05,760 --> 00:13:08,800
particular

00:13:06,959 --> 00:13:10,399
or to deploy our application using these

00:13:08,800 --> 00:13:12,399
models now with

00:13:10,399 --> 00:13:14,000
with this spec it's already there so

00:13:12,399 --> 00:13:15,680
it's kind of nice to see this further

00:13:14,000 --> 00:13:16,480
confirmed within the community but at

00:13:15,680 --> 00:13:19,360
the same time

00:13:16,480 --> 00:13:20,000
it brings a benchmark and standard which

00:13:19,360 --> 00:13:22,000
means that

00:13:20,000 --> 00:13:23,279
now we have the fundamentals we just

00:13:22,000 --> 00:13:25,760
need to build on top of it

00:13:23,279 --> 00:13:26,959
and this truly um enables more

00:13:25,760 --> 00:13:28,959
extensibility

00:13:26,959 --> 00:13:31,920
um and pretty much a good model that

00:13:28,959 --> 00:13:33,360
every team can build on top of

00:13:31,920 --> 00:13:35,360
yeah i think what katie i think what

00:13:33,360 --> 00:13:37,200
katie highlights in in reality is

00:13:35,360 --> 00:13:38,399
is that middle that middle tier that

00:13:37,200 --> 00:13:39,760
middle identity

00:13:38,399 --> 00:13:41,600
is the one that's going to end up being

00:13:39,760 --> 00:13:44,079
the most fluid right on

00:13:41,600 --> 00:13:45,120
at any given time they may be more

00:13:44,079 --> 00:13:47,839
infrastructure

00:13:45,120 --> 00:13:49,199
oriented um especially if let's say

00:13:47,839 --> 00:13:51,040
you're moving an application from

00:13:49,199 --> 00:13:51,600
on-premises into the cloud for example

00:13:51,040 --> 00:13:53,920
or even

00:13:51,600 --> 00:13:55,120
cloud to cloud and then at other times

00:13:53,920 --> 00:13:56,079
they're they're going to have to be sort

00:13:55,120 --> 00:13:58,639
of more the

00:13:56,079 --> 00:13:59,120
application-centric sre so but but i

00:13:58,639 --> 00:14:01,040
think

00:13:59,120 --> 00:14:03,120
the the thing i really love about it is

00:14:01,040 --> 00:14:06,480
it is very distinct to say

00:14:03,120 --> 00:14:07,839
um you know it's not sort of you know

00:14:06,480 --> 00:14:09,519
one way or the other there's some

00:14:07,839 --> 00:14:10,560
flexibility in there and i think um

00:14:09,519 --> 00:14:12,320
that's

00:14:10,560 --> 00:14:13,839
but like you said the fact that we're

00:14:12,320 --> 00:14:15,680
writing it down we're sort of making it

00:14:13,839 --> 00:14:16,720
a structured model that allows you to

00:14:15,680 --> 00:14:18,240
think within

00:14:16,720 --> 00:14:21,120
a certain framework and it's not just

00:14:18,240 --> 00:14:21,120
completely nebulous

00:14:22,000 --> 00:14:25,440
what i believe is kind of missing from

00:14:23,760 --> 00:14:28,560
that description is

00:14:25,440 --> 00:14:30,639
describing who who are users of each of

00:14:28,560 --> 00:14:33,680
those groups

00:14:30,639 --> 00:14:34,240
which is often overlooked they tend to

00:14:33,680 --> 00:14:36,320
be

00:14:34,240 --> 00:14:37,839
in a silo right i'm in charge of

00:14:36,320 --> 00:14:38,320
infrastructure i'm in charge of this or

00:14:37,839 --> 00:14:40,160
that

00:14:38,320 --> 00:14:41,360
well i believe that the real move

00:14:40,160 --> 00:14:44,320
forward is that

00:14:41,360 --> 00:14:46,000
to acknowledge that application sres

00:14:44,320 --> 00:14:47,199
application operators infrastructure

00:14:46,000 --> 00:14:49,120
operators

00:14:47,199 --> 00:14:50,800
they are their users are developers

00:14:49,120 --> 00:14:52,160
they're they're supposed to build

00:14:50,800 --> 00:14:54,160
services

00:14:52,160 --> 00:14:55,600
that can be consumed by developers

00:14:54,160 --> 00:14:57,279
they're not supposed to

00:14:55,600 --> 00:14:58,880
actually really create infrastructure

00:14:57,279 --> 00:15:00,959
they're not supposed to

00:14:58,880 --> 00:15:02,079
deploy any applications they're supposed

00:15:00,959 --> 00:15:05,360
to create

00:15:02,079 --> 00:15:07,199
tools patterns means for developers to

00:15:05,360 --> 00:15:10,240
be self-sufficient

00:15:07,199 --> 00:15:12,639
i don't think i don't see it as much

00:15:10,240 --> 00:15:15,839
right now in the industry but i believe

00:15:12,639 --> 00:15:17,360
that's the direction we need to go

00:15:15,839 --> 00:15:18,399
very interesting very interesting so i

00:15:17,360 --> 00:15:20,240
jumped ahead and i probably should have

00:15:18,399 --> 00:15:22,079
introduced the oam spec

00:15:20,240 --> 00:15:23,440
but i'm dialing back a second and i

00:15:22,079 --> 00:15:24,399
think a few of you touched on these

00:15:23,440 --> 00:15:26,639
ideas as well

00:15:24,399 --> 00:15:30,720
how important do you believe open

00:15:26,639 --> 00:15:30,720
standards are to creating a platform

00:15:31,360 --> 00:15:34,639
i can definitely answer this one it's

00:15:33,120 --> 00:15:35,759
mainly because i've been focused on this

00:15:34,639 --> 00:15:38,320
particular topic for

00:15:35,759 --> 00:15:39,360
for a while now and i have been um

00:15:38,320 --> 00:15:41,440
trying to

00:15:39,360 --> 00:15:43,839
really pinpoint what was the impact of

00:15:41,440 --> 00:15:45,680
emerging emergence of interfaces within

00:15:43,839 --> 00:15:47,360
the kubernetes ecosystem but now i'm

00:15:45,680 --> 00:15:48,639
focused on the open standards

00:15:47,360 --> 00:15:50,399
when it comes not just to the

00:15:48,639 --> 00:15:52,240
application delivery uh but to

00:15:50,399 --> 00:15:54,079
observability stack because we have

00:15:52,240 --> 00:15:56,480
projects such as open matrix and open

00:15:54,079 --> 00:15:59,040
tracing which really tries to bring that

00:15:56,480 --> 00:16:00,880
again fundamentals to how we exactly

00:15:59,040 --> 00:16:02,079
would collect metrics or how we deploy

00:16:00,880 --> 00:16:03,839
our application

00:16:02,079 --> 00:16:06,160
and uh there are three main things that

00:16:03,839 --> 00:16:07,839
i usually identify when it comes to

00:16:06,160 --> 00:16:09,440
open standards or pretty much the

00:16:07,839 --> 00:16:12,480
fundamentals they

00:16:09,440 --> 00:16:13,839
impact the vendors the end users and of

00:16:12,480 --> 00:16:15,680
course the community

00:16:13,839 --> 00:16:17,519
for the vendors it's going to be um

00:16:15,680 --> 00:16:18,880
pretty much innovation because as a

00:16:17,519 --> 00:16:20,079
vendor you don't have to concern

00:16:18,880 --> 00:16:21,040
yourself how can you merge your

00:16:20,079 --> 00:16:23,440
components

00:16:21,040 --> 00:16:25,120
with the platform the standards are

00:16:23,440 --> 00:16:27,040
already going to be there so as a vendor

00:16:25,120 --> 00:16:28,800
you can focus on how to deliver value to

00:16:27,040 --> 00:16:30,079
your customers of minimal agencies so

00:16:28,800 --> 00:16:32,160
you really focus on

00:16:30,079 --> 00:16:33,759
um on your customers and what you can

00:16:32,160 --> 00:16:35,680
bring to them straight away

00:16:33,759 --> 00:16:37,440
for the end users on the other side when

00:16:35,680 --> 00:16:38,240
we're talking about open standards it

00:16:37,440 --> 00:16:40,639
means

00:16:38,240 --> 00:16:41,360
extensibility now what it actually means

00:16:40,639 --> 00:16:43,040
here is that

00:16:41,360 --> 00:16:44,399
as an end user you can choose multiple

00:16:43,040 --> 00:16:46,399
tools with the same um

00:16:44,399 --> 00:16:48,000
well kind of trying to solve the same

00:16:46,399 --> 00:16:48,320
problem but you can benchmark between

00:16:48,000 --> 00:16:50,240
them

00:16:48,320 --> 00:16:51,839
and it's easier now because you have

00:16:50,240 --> 00:16:53,600
that one platform with the standards

00:16:51,839 --> 00:16:54,160
integrated or the interfaces already

00:16:53,600 --> 00:16:56,399
available

00:16:54,160 --> 00:16:57,680
you just injure switch in between them

00:16:56,399 --> 00:16:58,800
and of course when you're looking into

00:16:57,680 --> 00:17:00,639
the entire ecosystem

00:16:58,800 --> 00:17:02,399
that pretty much translates into

00:17:00,639 --> 00:17:03,759
interoperability which means that we

00:17:02,399 --> 00:17:05,439
have an ecosystem which is quite

00:17:03,759 --> 00:17:06,079
colorful in terms of the technologies

00:17:05,439 --> 00:17:08,400
out there

00:17:06,079 --> 00:17:10,480
but more importantly again we have

00:17:08,400 --> 00:17:12,400
multiple solutions for the same problem

00:17:10,480 --> 00:17:13,280
and this is really i think the driving

00:17:12,400 --> 00:17:16,319
force of

00:17:13,280 --> 00:17:18,160
big pretty much the extensibility

00:17:16,319 --> 00:17:21,039
kind of the growth organic growth within

00:17:18,160 --> 00:17:22,959
the cloud native ecosystem we have now

00:17:21,039 --> 00:17:24,799
just to add to katie's points there i

00:17:22,959 --> 00:17:26,240
mean around open tracing and open census

00:17:24,799 --> 00:17:28,720
you know merging into

00:17:26,240 --> 00:17:30,080
open telemetry for end users like myself

00:17:28,720 --> 00:17:30,880
it means that we can use the hotel

00:17:30,080 --> 00:17:32,240
collector

00:17:30,880 --> 00:17:34,400
and have a guarantee that there is a

00:17:32,240 --> 00:17:34,880
sort of a longevity to this project and

00:17:34,400 --> 00:17:36,640
that

00:17:34,880 --> 00:17:38,640
vendors are coming together to design a

00:17:36,640 --> 00:17:41,120
solution that will

00:17:38,640 --> 00:17:42,559
benefit the users and also allow us a

00:17:41,120 --> 00:17:44,320
degree of choice right in that

00:17:42,559 --> 00:17:46,240
if vendors are compliant and they

00:17:44,320 --> 00:17:47,679
conform to these these protocols and

00:17:46,240 --> 00:17:48,559
these specifications then we know that

00:17:47,679 --> 00:17:50,640
we can have this

00:17:48,559 --> 00:17:52,559
path to migration uh whatever should we

00:17:50,640 --> 00:17:54,240
choose to do in terms of our business

00:17:52,559 --> 00:17:55,520
direction so it's wonderful to see that

00:17:54,240 --> 00:17:56,480
kind of collaboration and that's only

00:17:55,520 --> 00:17:57,840
made possible

00:17:56,480 --> 00:18:00,160
through these kind of standards that are

00:17:57,840 --> 00:18:02,559
being being built out

00:18:00,160 --> 00:18:04,080
yeah i i think i think both of you guys

00:18:02,559 --> 00:18:06,240
both of you point out something that's

00:18:04,080 --> 00:18:08,320
that's sort of indirectly important we

00:18:06,240 --> 00:18:11,039
used to do standards we'd have these

00:18:08,320 --> 00:18:12,640
i think standards bodies the ieee or

00:18:11,039 --> 00:18:13,600
wcc3 or whatever

00:18:12,640 --> 00:18:15,440
the nice thing about them being

00:18:13,600 --> 00:18:16,080
community based now and especially open

00:18:15,440 --> 00:18:19,120
source based

00:18:16,080 --> 00:18:20,320
is you not only get standards uh that

00:18:19,120 --> 00:18:21,840
come with code

00:18:20,320 --> 00:18:23,600
but but to a certain extent sort of the

00:18:21,840 --> 00:18:25,200
economic viability of those standards

00:18:23,600 --> 00:18:27,039
work themselves out so like open

00:18:25,200 --> 00:18:28,400
telemetry is a great example

00:18:27,039 --> 00:18:30,480
um but there you know there's been

00:18:28,400 --> 00:18:32,320
others and and for for people that are

00:18:30,480 --> 00:18:34,400
customers or users of it

00:18:32,320 --> 00:18:35,600
they want to know that as much as as

00:18:34,400 --> 00:18:37,600
they want to know that it's a standard

00:18:35,600 --> 00:18:39,280
right they're betting on a technology

00:18:37,600 --> 00:18:40,640
they want to know is it going to be

00:18:39,280 --> 00:18:42,080
around for a while is there going to be

00:18:40,640 --> 00:18:43,760
people that support this

00:18:42,080 --> 00:18:45,440
i don't want it to be fragmented because

00:18:43,760 --> 00:18:46,799
it's not good for it's not good for

00:18:45,440 --> 00:18:48,720
alex's business model it's not good for

00:18:46,799 --> 00:18:50,400
anybody else's business model so

00:18:48,720 --> 00:18:51,760
i think we've reached a point now where

00:18:50,400 --> 00:18:53,440
it's evolved where it's

00:18:51,760 --> 00:18:55,679
it's not only the standard which is

00:18:53,440 --> 00:18:56,880
great but we get code but there's also a

00:18:55,679 --> 00:18:59,440
certain amount of sort of

00:18:56,880 --> 00:19:00,880
uh economic darwinism if you will so you

00:18:59,440 --> 00:19:01,440
know that the thing that you ultimately

00:19:00,880 --> 00:19:03,200
pick

00:19:01,440 --> 00:19:04,880
is going to be more viable than just

00:19:03,200 --> 00:19:07,200
paper specs like we used to have back in

00:19:04,880 --> 00:19:07,200
the day

00:19:08,160 --> 00:19:11,120
very nice we're going from a java

00:19:09,840 --> 00:19:12,799
background i can definitely recommend

00:19:11,120 --> 00:19:13,360
the uh or definitely recognize the paper

00:19:12,799 --> 00:19:15,679
specs

00:19:13,360 --> 00:19:16,799
right like ejvs and so forth so yeah

00:19:15,679 --> 00:19:18,160
very good very good

00:19:16,799 --> 00:19:19,600
i think it's a sort of wrapping up

00:19:18,160 --> 00:19:22,240
question now we've covered sort of some

00:19:19,600 --> 00:19:24,400
of the apis and the benefits of specs

00:19:22,240 --> 00:19:26,799
i'd love to get your thoughts on whether

00:19:24,400 --> 00:19:29,200
kubernetes is somewhat becoming a

00:19:26,799 --> 00:19:31,120
centralized control plane these days

00:19:29,200 --> 00:19:31,919
it's almost a universal control plane i

00:19:31,120 --> 00:19:34,880
guess

00:19:31,919 --> 00:19:36,880
the rise of custom resources operators i

00:19:34,880 --> 00:19:38,960
think you've already mentioned ryan

00:19:36,880 --> 00:19:40,080
what do you think in relation to that do

00:19:38,960 --> 00:19:42,160
you think kubernetes

00:19:40,080 --> 00:19:45,200
is becoming a universal control plane

00:19:42,160 --> 00:19:45,200
for modern platforms

00:19:47,440 --> 00:19:50,880
you know for for some yeah having done

00:19:49,360 --> 00:19:52,080
this for for a while with communities i

00:19:50,880 --> 00:19:53,200
think it is i think it's a

00:19:52,080 --> 00:19:55,679
i think of it as more sort of a

00:19:53,200 --> 00:19:57,600
foundation for what's going to build on

00:19:55,679 --> 00:20:00,000
those control planes so whether that

00:19:57,600 --> 00:20:01,120
control plane is is at the service mesh

00:20:00,000 --> 00:20:03,039
level whether it's

00:20:01,120 --> 00:20:05,520
sort of this cross networking thing like

00:20:03,039 --> 00:20:06,960
submariner and other projects i think

00:20:05,520 --> 00:20:08,799
it's a it's a really really good

00:20:06,960 --> 00:20:10,159
foundation and what's going to get

00:20:08,799 --> 00:20:13,200
interesting with it is

00:20:10,159 --> 00:20:15,120
um you know does the control plane

00:20:13,200 --> 00:20:17,120
is it is it multi-cloud is it sort of

00:20:15,120 --> 00:20:18,480
cloud to edge that's where i think we've

00:20:17,120 --> 00:20:20,640
got a lot of flexibility but

00:20:18,480 --> 00:20:22,480
the nice piece is we're not we're not

00:20:20,640 --> 00:20:24,159
kind of shifting the underlying sand so

00:20:22,480 --> 00:20:26,480
i feel really good about that

00:20:24,159 --> 00:20:28,000
and i think you know like we're coming

00:20:26,480 --> 00:20:29,919
up into kubecon but

00:20:28,000 --> 00:20:31,760
kubecon we used to call it kubecon

00:20:29,919 --> 00:20:34,080
because that was the dominant technology

00:20:31,760 --> 00:20:36,080
now cube is sort of the the sort of safe

00:20:34,080 --> 00:20:38,080
and boring piece of the pieces and

00:20:36,080 --> 00:20:39,600
uh you know it's control plane con and

00:20:38,080 --> 00:20:42,000
what will that evolve to which is really

00:20:39,600 --> 00:20:42,000
exciting

00:20:42,320 --> 00:20:46,320
i can only echo that to be honest i

00:20:44,320 --> 00:20:47,840
think the most powerful characteristic

00:20:46,320 --> 00:20:49,760
when it comes to kubernetes is the fact

00:20:47,840 --> 00:20:51,520
that it's not opinated

00:20:49,760 --> 00:20:53,039
it has some assertiveness when it comes

00:20:51,520 --> 00:20:54,880
for example for networking model like

00:20:53,039 --> 00:20:56,640
every single post you have an ip

00:20:54,880 --> 00:20:58,880
however it is not assertive when it

00:20:56,640 --> 00:21:00,720
comes to the underlying technology that

00:20:58,880 --> 00:21:02,159
kubernetes run on top of and this has

00:21:00,720 --> 00:21:04,240
been quite powerful because

00:21:02,159 --> 00:21:05,440
you have a methodology that allows you

00:21:04,240 --> 00:21:07,520
to lift and shift

00:21:05,440 --> 00:21:09,039
your application pretty much anywhere

00:21:07,520 --> 00:21:11,120
and over the time there has been this

00:21:09,039 --> 00:21:13,120
build integration where you can deploy

00:21:11,120 --> 00:21:15,200
this easily on the edge nowadays

00:21:13,120 --> 00:21:17,280
actually now it's on the edge but it

00:21:15,200 --> 00:21:19,200
came with a public cloud on premise and

00:21:17,280 --> 00:21:20,320
more more privately now towards the edge

00:21:19,200 --> 00:21:23,600
as i mentioned

00:21:20,320 --> 00:21:25,200
um and this again has been further um

00:21:23,600 --> 00:21:27,120
maybe empowered by the fact that

00:21:25,200 --> 00:21:28,240
kubernetes allows a very good set of

00:21:27,120 --> 00:21:29,840
primitives

00:21:28,240 --> 00:21:31,760
and based on top of that you can have

00:21:29,840 --> 00:21:33,679
these building blocks principles where

00:21:31,760 --> 00:21:34,880
you have already components that are

00:21:33,679 --> 00:21:36,320
working that are stable and you can

00:21:34,880 --> 00:21:38,480
build on top of them

00:21:36,320 --> 00:21:40,240
and i think it has been mentioned um

00:21:38,480 --> 00:21:40,960
many times that i think uranus again is

00:21:40,240 --> 00:21:43,280
going to become the

00:21:40,960 --> 00:21:44,159
the basic it's going to be the boring as

00:21:43,280 --> 00:21:47,200
i mentioned

00:21:44,159 --> 00:21:48,559
um and this again has been seen by the

00:21:47,200 --> 00:21:50,000
fact that the kubernetes

00:21:48,559 --> 00:21:51,679
source code has been changed for our

00:21:50,000 --> 00:21:53,520
time because at the beginning it had

00:21:51,679 --> 00:21:55,520
everything integrated within it so for

00:21:53,520 --> 00:21:57,120
example the runtime component would be

00:21:55,520 --> 00:21:58,960
very deeply integrated there

00:21:57,120 --> 00:22:00,320
same with the storage but now these are

00:21:58,960 --> 00:22:01,679
components which develop completely

00:22:00,320 --> 00:22:02,799
independently they have their own

00:22:01,679 --> 00:22:04,559
landscape and they own

00:22:02,799 --> 00:22:07,120
pretty much vendors and community around

00:22:04,559 --> 00:22:09,280
it so just based on that we see that

00:22:07,120 --> 00:22:10,640
kubernetes is getting slimmer like the

00:22:09,280 --> 00:22:12,320
binaries for for the

00:22:10,640 --> 00:22:14,480
kubernetes and i think this is the way

00:22:12,320 --> 00:22:16,159
to go forward becoming slimmer it means

00:22:14,480 --> 00:22:18,000
it's out there it's stable it's reliable

00:22:16,159 --> 00:22:20,080
and people can use reuse it for

00:22:18,000 --> 00:22:21,520
anything that they can build on top of

00:22:20,080 --> 00:22:22,720
and i think there is um

00:22:21,520 --> 00:22:24,000
i think kills the height or mentioned

00:22:22,720 --> 00:22:25,919
this guarantee is a platform to build

00:22:24,000 --> 00:22:29,039
other platforms so i think this kind of

00:22:25,919 --> 00:22:30,720
encapsulates that quite nicely

00:22:29,039 --> 00:22:31,840
and this also reminds me katie of one of

00:22:30,720 --> 00:22:33,360
your keynotes around the

00:22:31,840 --> 00:22:34,159
interoperability of the components of

00:22:33,360 --> 00:22:36,640
kubernetes

00:22:34,159 --> 00:22:37,440
and around the uh you know cni for

00:22:36,640 --> 00:22:39,039
example

00:22:37,440 --> 00:22:40,480
where it's essentially like a train

00:22:39,039 --> 00:22:41,679
station where people can come and

00:22:40,480 --> 00:22:42,799
you know build out their ideas and

00:22:41,679 --> 00:22:43,919
figure out where they want to go from it

00:22:42,799 --> 00:22:45,360
and i think that's a

00:22:43,919 --> 00:22:47,120
the beauty of it is that when now we see

00:22:45,360 --> 00:22:48,799
especially with the latest generation of

00:22:47,120 --> 00:22:50,159
operator mechanisms being brought into

00:22:48,799 --> 00:22:51,600
that ecosystem people are doing all

00:22:50,159 --> 00:22:53,679
sorts of provisioning and so

00:22:51,600 --> 00:22:54,799
yeah it's it's a great uh it's a great

00:22:53,679 --> 00:22:56,400
kind of meeting place

00:22:54,799 --> 00:22:58,720
to start building out that platform as

00:22:56,400 --> 00:22:58,720
you said

00:23:02,000 --> 00:23:05,440
any other ideas from anyone there victor

00:23:03,600 --> 00:23:08,559
have you been required on that one

00:23:05,440 --> 00:23:09,200
oh and this one no i i i'm quiet mostly

00:23:08,559 --> 00:23:12,640
because i

00:23:09,200 --> 00:23:14,559
i completely agree uh i i don't usually

00:23:12,640 --> 00:23:17,440
people associate kubernetes as

00:23:14,559 --> 00:23:19,039
uh with the machine that runs containers

00:23:17,440 --> 00:23:21,120
to me that's definitely not the main

00:23:19,039 --> 00:23:22,640
benefit it's all about its api it's

00:23:21,120 --> 00:23:25,440
about the scheduler

00:23:22,640 --> 00:23:26,559
and we see i mean we can see already

00:23:25,440 --> 00:23:29,760
that in action

00:23:26,559 --> 00:23:32,640
uh people are running uh mac farms uh

00:23:29,760 --> 00:23:33,760
based on uh kubernetes api right or

00:23:32,640 --> 00:23:36,880
control plane

00:23:33,760 --> 00:23:38,960
uh we've seen with crossplane managing

00:23:36,880 --> 00:23:41,679
your infrastructure with uh

00:23:38,960 --> 00:23:42,720
again with crossplane with api and so on

00:23:41,679 --> 00:23:44,559
and so forth i mean

00:23:42,720 --> 00:23:46,400
we've been scheduling vms as if they are

00:23:44,559 --> 00:23:49,279
containers as well right

00:23:46,400 --> 00:23:50,080
so i would even make a prediction that

00:23:49,279 --> 00:23:52,480
kubernetes

00:23:50,080 --> 00:23:53,120
control plane will outlive containers

00:23:52,480 --> 00:23:55,919
even right

00:23:53,120 --> 00:23:57,760
that's that's that's the real the real

00:23:55,919 --> 00:23:58,640
power of kubernetes is in a control

00:23:57,760 --> 00:24:00,559
plane not

00:23:58,640 --> 00:24:03,039
in the fact that it can run containers

00:24:00,559 --> 00:24:04,640
in in your cluster

00:24:03,039 --> 00:24:06,720
great insight there great insight so

00:24:04,640 --> 00:24:08,400
definitely in the in the show notes the

00:24:06,720 --> 00:24:09,840
reference uh links to the oam and

00:24:08,400 --> 00:24:10,799
crossblane there and there's cube veil

00:24:09,840 --> 00:24:12,240
which is a reference

00:24:10,799 --> 00:24:14,000
implementation i'll keep i'm not sure

00:24:12,240 --> 00:24:15,200
how you pronounce that one yet but yeah

00:24:14,000 --> 00:24:16,159
i'm definitely with you i i

00:24:15,200 --> 00:24:19,120
believe that the

00:24:16,159 --> 00:24:22,159
api is probably the a good api often

00:24:19,120 --> 00:24:23,600
outlives the implementation right

00:24:22,159 --> 00:24:25,520
as a final outro question we're going

00:24:23,600 --> 00:24:27,840
dangerously close to time now i'd like

00:24:25,520 --> 00:24:29,600
to get like the tweet size version right

00:24:27,840 --> 00:24:32,400
so 280 characters

00:24:29,600 --> 00:24:33,919
of where you think the most innovation

00:24:32,400 --> 00:24:35,760
in software delivery is going to happen

00:24:33,919 --> 00:24:37,840
in the next five years

00:24:35,760 --> 00:24:39,760
is it languages we saw dark land things

00:24:37,840 --> 00:24:42,720
like that is it architectures

00:24:39,760 --> 00:24:44,320
dreaded nano services or is it platforms

00:24:42,720 --> 00:24:45,360
things like serverless platforms built

00:24:44,320 --> 00:24:47,279
on top of um

00:24:45,360 --> 00:24:48,799
so they are and other abstractions in

00:24:47,279 --> 00:24:50,480
terms of using the control plane the

00:24:48,799 --> 00:24:52,000
kubernetes control plane

00:24:50,480 --> 00:24:53,440
is it yeah perhaps platforms are going

00:24:52,000 --> 00:24:54,640
to be the most exciting so languages

00:24:53,440 --> 00:24:56,000
architectures or platforms where's the

00:24:54,640 --> 00:24:59,440
most innovation going to come from

00:24:56,000 --> 00:25:00,400
kt i'm going to pick you i was actually

00:24:59,440 --> 00:25:02,159
hoping you wouldn't

00:25:00,400 --> 00:25:03,440
because i'm i think like all of these

00:25:02,159 --> 00:25:05,919
areas are going to be

00:25:03,440 --> 00:25:06,720
uh quite uh in development within the

00:25:05,919 --> 00:25:08,880
next years

00:25:06,720 --> 00:25:10,320
but i'm actually quite biased in this

00:25:08,880 --> 00:25:11,919
perspective i because i've been

00:25:10,320 --> 00:25:13,919
following the platform space uh

00:25:11,919 --> 00:25:15,120
for for a while now i'm be following it

00:25:13,919 --> 00:25:17,039
quite closely i think

00:25:15,120 --> 00:25:18,880
here is uh where there's a lot of

00:25:17,039 --> 00:25:19,520
dynamics but again i'm seeing this from

00:25:18,880 --> 00:25:22,480
my own

00:25:19,520 --> 00:25:22,799
kind of bubble of technologists around

00:25:22,480 --> 00:25:24,720
uh

00:25:22,799 --> 00:25:26,000
this area so i think when it comes to

00:25:24,720 --> 00:25:27,600
the platforms i think there is

00:25:26,000 --> 00:25:29,760
definitely

00:25:27,600 --> 00:25:32,559
an improvement when it comes to how we

00:25:29,760 --> 00:25:34,320
use uh the platforms how we deliver that

00:25:32,559 --> 00:25:36,799
developer excellence operational

00:25:34,320 --> 00:25:39,520
excellence simplifying it we still

00:25:36,799 --> 00:25:41,279
are like hanging around yaml manifests

00:25:39,520 --> 00:25:43,360
which we shouldn't and we even

00:25:41,279 --> 00:25:44,960
try to push this to our developers it's

00:25:43,360 --> 00:25:45,520
still the case i think moving away from

00:25:44,960 --> 00:25:47,200
that

00:25:45,520 --> 00:25:49,200
is definitely going to be a step forward

00:25:47,200 --> 00:25:50,880
and personally i'm quite excited to

00:25:49,200 --> 00:25:52,960
see how we can use some of these

00:25:50,880 --> 00:25:54,400
platforms to deliver these applications

00:25:52,960 --> 00:25:54,960
to the age this is something again which

00:25:54,400 --> 00:25:56,640
i'm

00:25:54,960 --> 00:25:58,480
following quite closely but i would like

00:25:56,640 --> 00:26:00,320
to see how this can be achieved

00:25:58,480 --> 00:26:01,679
seamlessly but at the same time to

00:26:00,320 --> 00:26:04,400
ensure that um

00:26:01,679 --> 00:26:05,600
kind of obstructed propagation of

00:26:04,400 --> 00:26:08,240
applications to

00:26:05,600 --> 00:26:10,480
uh closer well to areas closer to the

00:26:08,240 --> 00:26:12,159
user is pretty much at the edge so

00:26:10,480 --> 00:26:13,600
yeah from my perspective is going to be

00:26:12,159 --> 00:26:15,120
the platforms but again my view is

00:26:13,600 --> 00:26:18,159
biased here

00:26:15,120 --> 00:26:19,120
brian could ask you um yeah i think i'm

00:26:18,159 --> 00:26:20,720
going to place my vote in the

00:26:19,120 --> 00:26:22,559
architecture space i think

00:26:20,720 --> 00:26:24,400
the biggest changes i've seen in in the

00:26:22,559 --> 00:26:25,600
kubernetes space or even just the the

00:26:24,400 --> 00:26:26,960
cloud native community over the last

00:26:25,600 --> 00:26:28,240
five years have all been

00:26:26,960 --> 00:26:30,640
um you know people pushing the

00:26:28,240 --> 00:26:32,880
boundaries on what you can run on these

00:26:30,640 --> 00:26:35,440
environments uh what you can distribute

00:26:32,880 --> 00:26:36,559
um how big or how small uh but i think

00:26:35,440 --> 00:26:37,200
we're going to keep seeing that so

00:26:36,559 --> 00:26:39,039
whether it's

00:26:37,200 --> 00:26:41,200
you know architectures to make apps

00:26:39,039 --> 00:26:43,039
simpler or architectures to

00:26:41,200 --> 00:26:44,240
uh to you know sort of deliver

00:26:43,039 --> 00:26:45,440
applications across multiple

00:26:44,240 --> 00:26:46,080
environments i think we're going to keep

00:26:45,440 --> 00:26:49,200
seeing that

00:26:46,080 --> 00:26:50,559
that expand quickly super

00:26:49,200 --> 00:26:52,559
victor you're next to the box that's

00:26:50,559 --> 00:26:54,240
right i would go with

00:26:52,559 --> 00:26:56,320
platforms and languages over

00:26:54,240 --> 00:26:57,440
architecture i somehow feel that

00:26:56,320 --> 00:27:00,480
architecture

00:26:57,440 --> 00:27:01,600
always follows those two right like if

00:27:00,480 --> 00:27:02,880
you if you look at let's say

00:27:01,600 --> 00:27:05,840
microservices

00:27:02,880 --> 00:27:08,000
nobody really i mean very few did them

00:27:05,840 --> 00:27:08,480
until we got containers that enabled it

00:27:08,000 --> 00:27:10,640
right

00:27:08,480 --> 00:27:11,760
so platforms and languages are usually

00:27:10,640 --> 00:27:13,919
enablers for

00:27:11,760 --> 00:27:15,120
for different architectures so i mean we

00:27:13,919 --> 00:27:16,799
will definitely see

00:27:15,120 --> 00:27:18,399
improvements in all three of those but

00:27:16,799 --> 00:27:19,679
if i would need to place them in order i

00:27:18,399 --> 00:27:23,039
would say that the architecture

00:27:19,679 --> 00:27:24,320
follows platforms but a disagreement

00:27:23,039 --> 00:27:25,120
fascinating i like that this is good

00:27:24,320 --> 00:27:26,559
it's been

00:27:25,120 --> 00:27:28,480
such a nice panel right we need some

00:27:26,559 --> 00:27:29,440
disagreement alex i'd love to get your

00:27:28,480 --> 00:27:32,240
thoughts on this

00:27:29,440 --> 00:27:34,399
i think there is a a quiet rebellion

00:27:32,240 --> 00:27:36,000
happening in the platform space where

00:27:34,399 --> 00:27:37,840
the price point of commodity

00:27:36,000 --> 00:27:40,159
infrastructure um you know

00:27:37,840 --> 00:27:41,440
keemu and kvm virtualization mixed with

00:27:40,159 --> 00:27:42,799
things like cube vert

00:27:41,440 --> 00:27:44,080
with kubernetes and other platforms

00:27:42,799 --> 00:27:45,440
means that people can now assemble their

00:27:44,080 --> 00:27:46,880
own cloud providers

00:27:45,440 --> 00:27:48,480
combined with the fact that developer

00:27:46,880 --> 00:27:50,720
experience is you know

00:27:48,480 --> 00:27:52,000
really a hungered for offering we're

00:27:50,720 --> 00:27:53,120
going to see in the next five years that

00:27:52,000 --> 00:27:55,360
there are competitors

00:27:53,120 --> 00:27:57,120
to to google and to aws and we're going

00:27:55,360 --> 00:27:59,360
to see that we're now starting to get

00:27:57,120 --> 00:28:01,600
developer centric platforms being built

00:27:59,360 --> 00:28:03,520
with capes just as a pure api

00:28:01,600 --> 00:28:04,720
and no more than that so i think that

00:28:03,520 --> 00:28:06,080
it's going to be the community and the

00:28:04,720 --> 00:28:08,880
engineers that are guiding the next

00:28:06,080 --> 00:28:10,799
generation of innovation here

00:28:08,880 --> 00:28:12,559
and that is a fantastic way to end the

00:28:10,799 --> 00:28:13,440
panel i think thank you to all of you

00:28:12,559 --> 00:28:14,880
it's been super

00:28:13,440 --> 00:28:16,559
interesting we'll do some q a hopefully

00:28:14,880 --> 00:28:18,240
in the live event as well but thank you

00:28:16,559 --> 00:28:19,600
very much for your time

00:28:18,240 --> 00:28:24,000
thank you for having us thank you so

00:28:19,600 --> 00:28:24,000

YouTube URL: https://www.youtube.com/watch?v=ictc3lucceI


