Title: Lightning Talk: Secure, Least Privilege Cloud Service provisioning with Crossplane - Lewis Marshall
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Secure, Least Privilege Cloud Service provisioning with Crossplane - Lewis Marshall, Appvia Ltd

Providing production ready and secure cloud services for applications, whether that’s a database, cache, or object store is more of a challenge than just provisioning. Security and resilience is essential for application teams to deliver lasting business value. Crossplane provides a self service developer capability but challenges exist around ensuring secure and suitably scoped cloud service provisioning. We’ve investigated “least privilege” for Crossplane resource provisioning. We uncover how to enable the best practice of cloud managed identities with Crossplane with appropriately secure access. Through collaboration with large organisations and a desire to contribute to the Crossplane community, we aim to enable developer self service with maximum security.
Captions: 
	00:00:00,160 --> 00:00:04,640
hello and welcome to this talk about

00:00:02,960 --> 00:00:05,440
least privileged cloud service

00:00:04,640 --> 00:00:08,240
provisioning

00:00:05,440 --> 00:00:08,240
with crossplane

00:00:08,880 --> 00:00:12,719
today we're going to cover what is least

00:00:11,200 --> 00:00:14,960
privileged technically

00:00:12,719 --> 00:00:16,560
the risks challenges and some of the

00:00:14,960 --> 00:00:19,600
mitigations in the

00:00:16,560 --> 00:00:22,000
crossplane product in this space

00:00:19,600 --> 00:00:24,080
and some takeaways and it's a lightning

00:00:22,000 --> 00:00:26,400
talk so i better get on with it a little

00:00:24,080 --> 00:00:28,240
bit about myself if i may before i start

00:00:26,400 --> 00:00:30,160
my name's louis marshall i'm a senior

00:00:28,240 --> 00:00:33,040
developer and tech evangelist

00:00:30,160 --> 00:00:35,600
at appvia i have 30 years of tech

00:00:33,040 --> 00:00:37,920
experience i'm a bit old

00:00:35,600 --> 00:00:40,079
i started my career with 886 assembler

00:00:37,920 --> 00:00:41,280
and nowadays i code in golang

00:00:40,079 --> 00:00:43,440
and i've been lucky enough to be

00:00:41,280 --> 00:00:45,680
involved with appvia

00:00:43,440 --> 00:00:47,360
and the kubernetes project right from

00:00:45,680 --> 00:00:49,760
the start

00:00:47,360 --> 00:00:51,600
so what is least privilege this

00:00:49,760 --> 00:00:53,920
privilege is the principle of granting

00:00:51,600 --> 00:00:55,120
only the permissions required to

00:00:53,920 --> 00:00:58,239
complete the task

00:00:55,120 --> 00:00:58,719
i found this quote from amazon which

00:00:58,239 --> 00:01:01,440
seemed

00:00:58,719 --> 00:01:03,440
quite succinct but what is it a little

00:01:01,440 --> 00:01:06,240
bit more specifically

00:01:03,440 --> 00:01:07,600
it's specific access it's task related

00:01:06,240 --> 00:01:10,560
and it's not general

00:01:07,600 --> 00:01:12,560
otherwise known as root a picture of

00:01:10,560 --> 00:01:13,520
root here we don't want that permission

00:01:12,560 --> 00:01:16,000
we want the permission

00:01:13,520 --> 00:01:17,119
right at the top that's highly specific

00:01:16,000 --> 00:01:19,840
we also

00:01:17,119 --> 00:01:21,200
want to have it even more specific if we

00:01:19,840 --> 00:01:24,400
can by having it

00:01:21,200 --> 00:01:25,439
time limited short-lived and the

00:01:24,400 --> 00:01:28,720
capability to

00:01:25,439 --> 00:01:31,119
audit when we use that access

00:01:28,720 --> 00:01:33,119
we don't want stored credentials either

00:01:31,119 --> 00:01:34,640
because by definition they are the very

00:01:33,119 --> 00:01:38,079
longest lived

00:01:34,640 --> 00:01:40,400
type of access what are the risks

00:01:38,079 --> 00:01:41,920
well there's too much to talk about

00:01:40,400 --> 00:01:45,200
loads of different risk

00:01:41,920 --> 00:01:47,439
factors so we've only got 10 minutes

00:01:45,200 --> 00:01:49,680
it's a lightning talk so let's get on

00:01:47,439 --> 00:01:51,600
again and talk about this in the general

00:01:49,680 --> 00:01:56,960
sense here we have a castle with

00:01:51,600 --> 00:01:56,960
many many many fortifications

00:01:57,200 --> 00:02:00,799
risks are real and a serious threat to

00:01:59,600 --> 00:02:03,119
any business

00:02:00,799 --> 00:02:05,119
specifically in this space around over

00:02:03,119 --> 00:02:09,039
privilege and privilege escalation

00:02:05,119 --> 00:02:12,400
but they're not solutions in isolation

00:02:09,039 --> 00:02:16,080
defense in depth like the castle is

00:02:12,400 --> 00:02:19,200
the context here so

00:02:16,080 --> 00:02:21,200
challenges historically

00:02:19,200 --> 00:02:22,400
there used to be real people trusted

00:02:21,200 --> 00:02:24,640
employers

00:02:22,400 --> 00:02:26,080
and the tools focused around that with

00:02:24,640 --> 00:02:26,800
two-factor authentication and

00:02:26,080 --> 00:02:29,840
short-lived

00:02:26,800 --> 00:02:31,680
interactive user flows this isn't really

00:02:29,840 --> 00:02:32,640
applicable these days with cross-plain

00:02:31,680 --> 00:02:36,160
and resource

00:02:32,640 --> 00:02:38,800
reconciliation without a man directly

00:02:36,160 --> 00:02:40,000
in the loop at the time of provisioning

00:02:38,800 --> 00:02:42,560
there's also other

00:02:40,000 --> 00:02:44,800
challenges around complexity it's hard

00:02:42,560 --> 00:02:48,000
work to audit the code

00:02:44,800 --> 00:02:48,720
of any provisioning tool including cross

00:02:48,000 --> 00:02:50,959
plane

00:02:48,720 --> 00:02:53,760
this affects velocity our ability to

00:02:50,959 --> 00:02:56,400
deliver business value quickly

00:02:53,760 --> 00:02:59,200
and we want to be able to discover and

00:02:56,400 --> 00:02:59,200
fail early

00:03:00,080 --> 00:03:04,879
so what are the cross-plane mitigations

00:03:02,560 --> 00:03:07,280
we don't want to look at developer flow

00:03:04,879 --> 00:03:09,519
and application access although they do

00:03:07,280 --> 00:03:11,440
pertain to this area

00:03:09,519 --> 00:03:12,879
we've only got 10 minutes so we want to

00:03:11,440 --> 00:03:16,159
concentrate on the

00:03:12,879 --> 00:03:18,319
infrastructure operator perspective

00:03:16,159 --> 00:03:21,840
and we are defining resources and

00:03:18,319 --> 00:03:24,879
managing cost plane providers

00:03:21,840 --> 00:03:28,319
what does that look like um here we have

00:03:24,879 --> 00:03:30,080
a provider configuration in cross plane

00:03:28,319 --> 00:03:32,159
we want to look at the first issue

00:03:30,080 --> 00:03:35,440
around how we can use

00:03:32,159 --> 00:03:37,040
cloud managed access credentials that

00:03:35,440 --> 00:03:39,440
are automatically provided

00:03:37,040 --> 00:03:41,440
and managed by a cloud provider the

00:03:39,440 --> 00:03:43,840
benefits are that we're not storing any

00:03:41,440 --> 00:03:47,440
credentials and they can be short-lived

00:03:43,840 --> 00:03:48,400
but they are highly specific they only

00:03:47,440 --> 00:03:52,239
work

00:03:48,400 --> 00:03:54,239
in the cloud the limitations

00:03:52,239 --> 00:03:55,680
is that you've got to install crossplane

00:03:54,239 --> 00:03:58,720
on a cloud provider

00:03:55,680 --> 00:04:02,000
and today that means only on amazon

00:03:58,720 --> 00:04:02,720
with eks using this capability of

00:04:02,000 --> 00:04:06,000
injected

00:04:02,720 --> 00:04:08,239
identity now the community

00:04:06,000 --> 00:04:10,560
is already cognizant of this and have

00:04:08,239 --> 00:04:13,200
the issues against the other providers

00:04:10,560 --> 00:04:16,319
to bring this capability up to date

00:04:13,200 --> 00:04:16,319
across cosplay

00:04:16,880 --> 00:04:21,040
we also want specifically scoped access

00:04:19,519 --> 00:04:24,400
we want to stop

00:04:21,040 --> 00:04:28,320
default access or route access

00:04:24,400 --> 00:04:30,639
where we have one provider config

00:04:28,320 --> 00:04:32,880
the risk here is around preventing

00:04:30,639 --> 00:04:33,919
accidental or malicious exploits and

00:04:32,880 --> 00:04:37,199
here we have

00:04:33,919 --> 00:04:39,280
access to i am provisioning

00:04:37,199 --> 00:04:41,600
which means we can provision back doors

00:04:39,280 --> 00:04:45,280
and inappropriate access

00:04:41,600 --> 00:04:47,520
to our cloud accounts so if we use

00:04:45,280 --> 00:04:48,560
scoped provider configs for each

00:04:47,520 --> 00:04:51,840
resource type

00:04:48,560 --> 00:04:54,240
we can mitigate and remove this

00:04:51,840 --> 00:04:56,400
particular issue and here we have

00:04:54,240 --> 00:04:59,840
multiple provider conflicts

00:04:56,400 --> 00:04:59,840
for each resource type

00:05:00,479 --> 00:05:04,000
what's that looked like in the resource

00:05:03,600 --> 00:05:06,880
type

00:05:04,000 --> 00:05:08,160
definitions for cross plane we have a

00:05:06,880 --> 00:05:10,560
specific

00:05:08,160 --> 00:05:12,479
type of resource an rds instance here

00:05:10,560 --> 00:05:15,919
looking at a specific aws

00:05:12,479 --> 00:05:15,919
rds configuration

00:05:17,120 --> 00:05:21,039
now there's a challenge here with

00:05:18,400 --> 00:05:22,320
injected identity so i want to cover

00:05:21,039 --> 00:05:25,440
that

00:05:22,320 --> 00:05:26,880
scoped access issue with the pods

00:05:25,440 --> 00:05:29,919
identity we have the

00:05:26,880 --> 00:05:33,440
amazon provider running as a pod

00:05:29,919 --> 00:05:36,240
in kubernetes eks in this

00:05:33,440 --> 00:05:39,440
case with a service account that is

00:05:36,240 --> 00:05:42,800
linked to that amazon identity

00:05:39,440 --> 00:05:46,240
which kind of

00:05:42,800 --> 00:05:49,280
describes a single provider config

00:05:46,240 --> 00:05:53,759
with that single identity using

00:05:49,280 --> 00:05:56,960
injected identity what we want is

00:05:53,759 --> 00:06:00,000
multiple provider configs with multiple

00:05:56,960 --> 00:06:01,199
specific access at the point of

00:06:00,000 --> 00:06:05,039
provisioning

00:06:01,199 --> 00:06:07,199
and if we add an assume role arn to that

00:06:05,039 --> 00:06:08,560
provider configuration resource for

00:06:07,199 --> 00:06:12,400
amazon

00:06:08,560 --> 00:06:15,680
we would bring that capability

00:06:12,400 --> 00:06:19,120
so i've created an issue upstream for

00:06:15,680 --> 00:06:21,440
provider aws there to have that

00:06:19,120 --> 00:06:24,560
capability and a similar issue

00:06:21,440 --> 00:06:28,160
using service accounts in

00:06:24,560 --> 00:06:29,120
with delegation in gcp and a relatable

00:06:28,160 --> 00:06:32,880
issue

00:06:29,120 --> 00:06:33,199
about using workload identity footpods

00:06:32,880 --> 00:06:35,919
in

00:06:33,199 --> 00:06:38,000
as in and together this gives the

00:06:35,919 --> 00:06:38,880
ability to manage access with new

00:06:38,000 --> 00:06:41,440
resources

00:06:38,880 --> 00:06:43,840
and not the installation of cross plane

00:06:41,440 --> 00:06:45,199
which also gives us the added benefit of

00:06:43,840 --> 00:06:48,000
an improved

00:06:45,199 --> 00:06:48,960
audit capability whether permissions are

00:06:48,000 --> 00:06:52,000
granted

00:06:48,960 --> 00:06:55,440
for their use and not in for

00:06:52,000 --> 00:06:57,599
an installation it

00:06:55,440 --> 00:06:58,800
stops the proliferation of additional

00:06:57,599 --> 00:07:01,759
credentials and

00:06:58,800 --> 00:07:02,560
less things to manage and gives as as

00:07:01,759 --> 00:07:06,400
lived

00:07:02,560 --> 00:07:09,199
access where applicable now we also want

00:07:06,400 --> 00:07:12,319
to simplify

00:07:09,199 --> 00:07:15,599
this scoped access so i've created this

00:07:12,319 --> 00:07:19,680
issue for cosplaying

00:07:15,599 --> 00:07:24,160
and the kubernetes cube ctr plug-in

00:07:19,680 --> 00:07:27,440
to simplify the ability to

00:07:24,160 --> 00:07:30,080
audit and understand the permissions of

00:07:27,440 --> 00:07:32,479
cosplaying resources

00:07:30,080 --> 00:07:35,039
and the community was already ahead of

00:07:32,479 --> 00:07:36,720
me when i was thinking in this area by

00:07:35,039 --> 00:07:38,240
looking at how they can do static

00:07:36,720 --> 00:07:41,199
analysis of the code

00:07:38,240 --> 00:07:42,479
to annotate the resources published such

00:07:41,199 --> 00:07:43,680
that they have that permission

00:07:42,479 --> 00:07:46,879
information

00:07:43,680 --> 00:07:48,879
i've also created an issue on the azure

00:07:46,879 --> 00:07:52,080
provider to bring that into line

00:07:48,879 --> 00:07:55,759
with this direction and if we

00:07:52,080 --> 00:07:58,319
have this capability across providers

00:07:55,759 --> 00:08:00,879
by having a standardized way of doing

00:07:58,319 --> 00:08:03,919
this then we can have that centralized

00:08:00,879 --> 00:08:06,479
capability so

00:08:03,919 --> 00:08:08,400
a little bit about the takeaways if we

00:08:06,479 --> 00:08:09,840
have scoped access with short-lived and

00:08:08,400 --> 00:08:12,960
managed credentials

00:08:09,840 --> 00:08:13,759
we simplify that access management we

00:08:12,960 --> 00:08:16,800
can

00:08:13,759 --> 00:08:19,120
update and improve cross-plane

00:08:16,800 --> 00:08:22,160
experience for security

00:08:19,120 --> 00:08:26,000
please comment like and share

00:08:22,160 --> 00:08:26,879
these issues and if you're interested in

00:08:26,000 --> 00:08:30,160
how we at

00:08:26,879 --> 00:08:32,560
vr using cosplay in our multi-cloud core

00:08:30,160 --> 00:08:34,479
operate developer platform then please

00:08:32,560 --> 00:08:37,240
visit us at apio

00:08:34,479 --> 00:08:40,240
and thank you very much for your time

00:08:37,240 --> 00:08:40,240

YouTube URL: https://www.youtube.com/watch?v=LGd8ih9d4WY


