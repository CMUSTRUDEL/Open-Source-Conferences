Title: Keynote: Crossplane at the Crossroads - Bassam Tabbara, Founder & CEO, Upbound
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Keynote: Crossplane at the Crossroads - Bassam Tabbara, Founder & CEO, Upbound
Captions: 
	00:00:00,799 --> 00:00:06,160
hello my name is bassam tabara

00:00:03,280 --> 00:00:07,520
and i am the ceo and founder of upbound

00:00:06,160 --> 00:00:09,120
and one of the creators of the

00:00:07,520 --> 00:00:10,559
crossblind project

00:00:09,120 --> 00:00:12,880
i thought a good way to kick things off

00:00:10,559 --> 00:00:13,840
today is to start with the origin story

00:00:12,880 --> 00:00:16,880
of crosspine

00:00:13,840 --> 00:00:18,720
which goes back to 2017. this was the

00:00:16,880 --> 00:00:20,400
year that kubernetes won the container

00:00:18,720 --> 00:00:22,720
orchestration wars

00:00:20,400 --> 00:00:25,279
while kubernetes is known for being the

00:00:22,720 --> 00:00:27,760
gold standard in container orchestration

00:00:25,279 --> 00:00:29,599
i don't believe managing containers is

00:00:27,760 --> 00:00:32,320
its true superpower

00:00:29,599 --> 00:00:34,640
nor do i believe it's the primary reason

00:00:32,320 --> 00:00:37,040
that it won

00:00:34,640 --> 00:00:38,800
i believe kubernetes won because it

00:00:37,040 --> 00:00:40,719
defined a new operating model

00:00:38,800 --> 00:00:42,079
for managing applications and

00:00:40,719 --> 00:00:45,120
infrastructure

00:00:42,079 --> 00:00:47,600
and it did so with a strong ecosystem

00:00:45,120 --> 00:00:49,200
and a community driven approach to open

00:00:47,600 --> 00:00:51,680
source

00:00:49,200 --> 00:00:53,520
we were inspired by this approach and i

00:00:51,680 --> 00:00:55,280
wanted to walk through each

00:00:53,520 --> 00:00:56,960
of these from a perspective of

00:00:55,280 --> 00:01:00,160
crossplane

00:00:56,960 --> 00:01:01,760
let's start with the operating model

00:01:00,160 --> 00:01:03,920
there are several properties of

00:01:01,760 --> 00:01:04,879
kubernetes you probably take for granted

00:01:03,920 --> 00:01:06,799
today

00:01:04,879 --> 00:01:07,920
but have been have played a critical

00:01:06,799 --> 00:01:10,560
role in

00:01:07,920 --> 00:01:11,360
in the project's success the first

00:01:10,560 --> 00:01:13,600
property

00:01:11,360 --> 00:01:15,360
is that you interact with kubernetes

00:01:13,600 --> 00:01:18,560
through a restful api

00:01:15,360 --> 00:01:19,680
this seems so obvious but it's a far

00:01:18,560 --> 00:01:21,600
departure

00:01:19,680 --> 00:01:23,200
from other tooling in this space

00:01:21,600 --> 00:01:24,000
especially infrastructure as code

00:01:23,200 --> 00:01:28,159
tooling

00:01:24,000 --> 00:01:30,560
that expects templates or programs

00:01:28,159 --> 00:01:32,479
the kubernetes api exposes an

00:01:30,560 --> 00:01:35,920
independent restful endpoint

00:01:32,479 --> 00:01:39,200
for each resource it manages

00:01:35,920 --> 00:01:41,600
authorization access control

00:01:39,200 --> 00:01:42,399
and other policies can all be enforced

00:01:41,600 --> 00:01:47,040
centrally

00:01:42,399 --> 00:01:50,799
and the granularity of a single resource

00:01:47,040 --> 00:01:54,320
because it's an api users can pick any

00:01:50,799 --> 00:01:55,280
language tool or framework to interact

00:01:54,320 --> 00:01:58,159
with it

00:01:55,280 --> 00:01:59,920
apis offer the greatest level levels of

00:01:58,159 --> 00:02:02,159
interoperability

00:01:59,920 --> 00:02:04,799
and have fostered the largest of

00:02:02,159 --> 00:02:06,719
ecosystems

00:02:04,799 --> 00:02:08,160
the second property is how the

00:02:06,719 --> 00:02:11,200
kubernetes api

00:02:08,160 --> 00:02:13,200
was designed for two personas

00:02:11,200 --> 00:02:14,720
platform engineers who have an intimate

00:02:13,200 --> 00:02:16,800
knowledge of infrastructure

00:02:14,720 --> 00:02:20,560
and application engineers who have

00:02:16,800 --> 00:02:20,560
intimate knowledge of their applications

00:02:20,800 --> 00:02:25,280
this separation of concerns leads to

00:02:23,440 --> 00:02:28,959
organizational efficiencies

00:02:25,280 --> 00:02:31,120
and scale application teams use simpler

00:02:28,959 --> 00:02:33,280
abstracted apis like pod

00:02:31,120 --> 00:02:34,319
and persistent volume claim while

00:02:33,280 --> 00:02:39,519
platform teams

00:02:34,319 --> 00:02:42,239
use full apis like nodes and volumes

00:02:39,519 --> 00:02:44,000
both teams use human workflows to arrive

00:02:42,239 --> 00:02:46,480
at their configuration

00:02:44,000 --> 00:02:48,400
storing configuration in git has become

00:02:46,480 --> 00:02:51,040
an industry standard

00:02:48,400 --> 00:02:52,239
and doing so enables teams to use pull

00:02:51,040 --> 00:02:54,239
request flows

00:02:52,239 --> 00:02:56,640
and source management tools for

00:02:54,239 --> 00:02:58,959
collaboration

00:02:56,640 --> 00:03:00,480
with kubernetes configurations can be

00:02:58,959 --> 00:03:02,959
authored via ammo

00:03:00,480 --> 00:03:04,319
programming languages or templates it

00:03:02,959 --> 00:03:06,879
really doesn't matter

00:03:04,319 --> 00:03:08,800
because they all result in the same api

00:03:06,879 --> 00:03:12,239
calls

00:03:08,800 --> 00:03:16,159
all automation operational and business

00:03:12,239 --> 00:03:18,800
policies live behind the api line

00:03:16,159 --> 00:03:19,280
kubernetes apis follow a thin crud

00:03:18,800 --> 00:03:21,040
approach

00:03:19,280 --> 00:03:24,239
and merely manipulate declarative

00:03:21,040 --> 00:03:27,280
configuration within the config store

00:03:24,239 --> 00:03:27,920
these apis these api calls do not

00:03:27,280 --> 00:03:29,840
perform

00:03:27,920 --> 00:03:32,720
any synchronous provisioning or

00:03:29,840 --> 00:03:34,720
deployment acts once the declarative

00:03:32,720 --> 00:03:36,879
configuration is updated

00:03:34,720 --> 00:03:39,440
this marks the end of human-based

00:03:36,879 --> 00:03:39,440
workflows

00:03:39,920 --> 00:03:43,760
from this point onwards controllers are

00:03:42,239 --> 00:03:46,000
activated

00:03:43,760 --> 00:03:47,200
asynchronously to read the declarative

00:03:46,000 --> 00:03:50,239
configuration

00:03:47,200 --> 00:03:52,080
and act autonomously to implement it

00:03:50,239 --> 00:03:54,720
these controllers are rooted in control

00:03:52,080 --> 00:03:57,599
theory and are in a continuous loop

00:03:54,720 --> 00:03:59,360
reading declarative state observing

00:03:57,599 --> 00:04:02,640
actual state

00:03:59,360 --> 00:04:02,640
and reconciling the two

00:04:02,720 --> 00:04:08,640
this is why we call it a control plane

00:04:06,159 --> 00:04:11,040
importantly human operators are not

00:04:08,640 --> 00:04:13,439
involved in this reconciliation act

00:04:11,040 --> 00:04:14,159
a major departure from other approaches

00:04:13,439 --> 00:04:18,000
that require

00:04:14,159 --> 00:04:20,479
humans to approve plans handle drift

00:04:18,000 --> 00:04:22,720
and require other systems for monitoring

00:04:20,479 --> 00:04:24,560
and observability

00:04:22,720 --> 00:04:25,919
with this new operating model

00:04:24,560 --> 00:04:28,400
organizations can achieve

00:04:25,919 --> 00:04:29,600
a high degree of automation once

00:04:28,400 --> 00:04:32,720
reserved

00:04:29,600 --> 00:04:33,919
for hyperscale cloud providers this

00:04:32,720 --> 00:04:36,160
democratization

00:04:33,919 --> 00:04:37,040
and implementation of control theory is

00:04:36,160 --> 00:04:42,080
the reason

00:04:37,040 --> 00:04:44,639
kubernetes won the container wars

00:04:42,080 --> 00:04:46,960
started crossplane because early on we

00:04:44,639 --> 00:04:48,639
saw the power of this operating model

00:04:46,960 --> 00:04:50,400
and wanted to take it beyond container

00:04:48,639 --> 00:04:52,320
orchestration

00:04:50,400 --> 00:04:53,440
we believe containers are simply the

00:04:52,320 --> 00:04:56,639
first use case

00:04:53,440 --> 00:04:58,560
of this operating model and that this

00:04:56,639 --> 00:05:00,400
operating model is applicable

00:04:58,560 --> 00:05:03,919
to man to the management of all

00:05:00,400 --> 00:05:07,360
applications and infrastructure

00:05:03,919 --> 00:05:08,720
crossplane makes that happen it extends

00:05:07,360 --> 00:05:11,680
kubernetes by adding

00:05:08,720 --> 00:05:13,120
apis and controllers that enable it to

00:05:11,680 --> 00:05:16,080
manage resources

00:05:13,120 --> 00:05:17,919
and services from multiple cloud and

00:05:16,080 --> 00:05:20,160
infrastructure vendors

00:05:17,919 --> 00:05:22,240
platform teams and application teams can

00:05:20,160 --> 00:05:25,039
now simply author

00:05:22,240 --> 00:05:25,919
configurations for databases caches

00:05:25,039 --> 00:05:29,759
networking

00:05:25,919 --> 00:05:31,520
and other services configurations are

00:05:29,759 --> 00:05:33,600
continuously reconciled

00:05:31,520 --> 00:05:37,520
by crossplane and day one and day two

00:05:33,600 --> 00:05:39,759
automation is handled out of the box

00:05:37,520 --> 00:05:41,039
with kubernetes and crossplane we see

00:05:39,759 --> 00:05:43,520
the industry moving

00:05:41,039 --> 00:05:46,720
off of infrastructure as code tooling

00:05:43,520 --> 00:05:46,720
and onto control planes

00:05:47,440 --> 00:05:51,600
while projects like terraform have been

00:05:49,840 --> 00:05:54,720
wildly successful

00:05:51,600 --> 00:05:57,039
we are starting to see their limitations

00:05:54,720 --> 00:05:59,280
organizing teams around templates has

00:05:57,039 --> 00:06:03,360
not proven effective

00:05:59,280 --> 00:06:06,240
templates are a much weaker form

00:06:03,360 --> 00:06:07,840
or a much weaker contract than apis or

00:06:06,240 --> 00:06:10,000
data

00:06:07,840 --> 00:06:10,960
iaec tooling focuses on initial

00:06:10,000 --> 00:06:13,199
provisioning

00:06:10,960 --> 00:06:14,479
and requires humans to approve execution

00:06:13,199 --> 00:06:17,759
plans

00:06:14,479 --> 00:06:18,800
and that does not scale the lack of

00:06:17,759 --> 00:06:21,199
access control

00:06:18,800 --> 00:06:22,880
has also proven problematic requiring

00:06:21,199 --> 00:06:23,759
organizations to create artificial

00:06:22,880 --> 00:06:27,120
templates

00:06:23,759 --> 00:06:29,360
to represent team boundaries lastly

00:06:27,120 --> 00:06:30,720
the lack of api and the vendor-driven

00:06:29,360 --> 00:06:34,080
nature of these projects

00:06:30,720 --> 00:06:36,240
has limited the ecosystem around them

00:06:34,080 --> 00:06:37,840
within the crossplane community we are

00:06:36,240 --> 00:06:40,400
starting to see many companies

00:06:37,840 --> 00:06:41,840
replacing their iac footprint with

00:06:40,400 --> 00:06:43,600
crossplane

00:06:41,840 --> 00:06:46,160
some of these companies will be speaking

00:06:43,600 --> 00:06:46,160
here today

00:06:46,560 --> 00:06:51,120
control planes offer a declarative api

00:06:49,039 --> 00:06:54,400
that promotes interoperability

00:06:51,120 --> 00:06:56,080
and results in a much larger ecosystem

00:06:54,400 --> 00:06:59,039
the separation of concerns enables

00:06:56,080 --> 00:07:00,560
self-service and controllers enable full

00:06:59,039 --> 00:07:03,840
automation scenarios

00:07:00,560 --> 00:07:03,840
and avoid the drift

00:07:04,240 --> 00:07:08,960
we see crossplane and kubernetes

00:07:06,800 --> 00:07:11,199
ushering a new era of application

00:07:08,960 --> 00:07:13,280
and infrastructure management that will

00:07:11,199 --> 00:07:16,560
lead to a much higher degree

00:07:13,280 --> 00:07:17,759
of self-service and automation these are

00:07:16,560 --> 00:07:19,759
the prerequisites

00:07:17,759 --> 00:07:23,199
to increasing the pace of innovation

00:07:19,759 --> 00:07:23,199
within most organizations

00:07:23,840 --> 00:07:28,000
to usher in this new era of automation

00:07:26,720 --> 00:07:29,680
we are investing

00:07:28,000 --> 00:07:31,599
in formalizing the underpinnings of

00:07:29,680 --> 00:07:33,360
crossline in the same way that

00:07:31,599 --> 00:07:37,120
kubernetes has formalized

00:07:33,360 --> 00:07:39,199
the kubernetes resource model or krm

00:07:37,120 --> 00:07:41,599
crossblind defines a strict extension of

00:07:39,199 --> 00:07:45,680
krm that we empathetically call

00:07:41,599 --> 00:07:48,240
the crossplane resource model or xrm

00:07:45,680 --> 00:07:49,360
it captures the lessons learned within

00:07:48,240 --> 00:07:53,199
the community

00:07:49,360 --> 00:07:55,520
in managing external resources

00:07:53,199 --> 00:07:56,560
it deals with nyx to external naming

00:07:55,520 --> 00:07:58,879
identity

00:07:56,560 --> 00:08:01,759
adoption of existing resources it

00:07:58,879 --> 00:08:03,840
includes cross resource references

00:08:01,759 --> 00:08:05,840
handling connection secrets and

00:08:03,840 --> 00:08:08,400
credentials

00:08:05,840 --> 00:08:10,479
composition is the popular feature that

00:08:08,400 --> 00:08:12,080
enables platform teams to define new

00:08:10,479 --> 00:08:15,120
self-service apis

00:08:12,080 --> 00:08:17,360
for their application teams and finally

00:08:15,120 --> 00:08:19,520
a package manager designed for crossband

00:08:17,360 --> 00:08:21,840
scenarios

00:08:19,520 --> 00:08:23,120
building all of this takes a village and

00:08:21,840 --> 00:08:25,360
we have been humbled

00:08:23,120 --> 00:08:27,759
by the ecosystem we're seeing emerge

00:08:25,360 --> 00:08:29,360
around the cross plane project

00:08:27,759 --> 00:08:31,680
part of this is due to the fact that if

00:08:29,360 --> 00:08:34,240
your tooling works with kubernetes it

00:08:31,680 --> 00:08:36,719
will automatically work with crossplane

00:08:34,240 --> 00:08:37,760
but we're starting to see tooling emerge

00:08:36,719 --> 00:08:41,039
which relies not

00:08:37,760 --> 00:08:45,839
just on the krm but also on

00:08:41,039 --> 00:08:47,680
xrm in terms of crossplane providers

00:08:45,839 --> 00:08:50,320
the community started by bootstrapping

00:08:47,680 --> 00:08:51,920
the major cloud providers ourselves

00:08:50,320 --> 00:08:54,000
but have now transitioned to working

00:08:51,920 --> 00:08:56,720
directly with the cloud providers

00:08:54,000 --> 00:08:57,600
and other infrastructure vendors our

00:08:56,720 --> 00:08:59,920
approach

00:08:57,600 --> 00:09:01,920
has us generating cross-plane providers

00:08:59,920 --> 00:09:04,080
from their backend sdks

00:09:01,920 --> 00:09:07,839
and we are doing that successfully right

00:09:04,080 --> 00:09:11,040
now with aws and azure

00:09:07,839 --> 00:09:13,360
more coming on the way vendors like ibm

00:09:11,040 --> 00:09:15,120
cloud have authored their own native

00:09:13,360 --> 00:09:16,320
crossplane providers and are maintaining

00:09:15,120 --> 00:09:18,640
them

00:09:16,320 --> 00:09:20,640
finally we've recently added support to

00:09:18,640 --> 00:09:23,120
generate crossplane providers

00:09:20,640 --> 00:09:25,040
from terraform providers bringing the

00:09:23,120 --> 00:09:29,200
entire terraform ecosystem

00:09:25,040 --> 00:09:31,120
to crossplane to ensure the ecosystem

00:09:29,200 --> 00:09:33,200
remains healthy as it grows

00:09:31,120 --> 00:09:34,720
the cross-plank community applied to

00:09:33,200 --> 00:09:37,760
start a conformance program

00:09:34,720 --> 00:09:38,560
for crossplane this program is still

00:09:37,760 --> 00:09:41,360
subject

00:09:38,560 --> 00:09:44,800
to the cncf governing board approval and

00:09:41,360 --> 00:09:47,279
will be run by the cncf

00:09:44,800 --> 00:09:47,839
there are two levels in this program the

00:09:47,279 --> 00:09:50,160
first

00:09:47,839 --> 00:09:52,080
is for distributions of crossplane this

00:09:50,160 --> 00:09:53,600
level is for vendors that plan to

00:09:52,080 --> 00:09:56,000
incorporate crossplane

00:09:53,600 --> 00:09:57,600
into their commercial offerings

00:09:56,000 --> 00:09:59,519
certifying distributions

00:09:57,600 --> 00:10:01,920
ensures consistency across different

00:09:59,519 --> 00:10:01,920
vendors

00:10:02,240 --> 00:10:05,839
the second level is for crossband

00:10:04,240 --> 00:10:08,079
providers and ensures that

00:10:05,839 --> 00:10:10,000
infrastructure vendors are compliant

00:10:08,079 --> 00:10:11,440
with the xrm

00:10:10,000 --> 00:10:15,200
if you're interested in the conformance

00:10:11,440 --> 00:10:15,200
program please reach out today

00:10:15,279 --> 00:10:18,800
the conformance program comes at a time

00:10:17,440 --> 00:10:22,320
when crossman is growing

00:10:18,800 --> 00:10:22,320
faster than we've ever seen

00:10:22,399 --> 00:10:27,839
organizations of all different sizes are

00:10:24,800 --> 00:10:29,279
adopting it in production

00:10:27,839 --> 00:10:31,279
they are augmenting their existing

00:10:29,279 --> 00:10:34,320
kubernetes deployments

00:10:31,279 --> 00:10:36,640
while some companies are using it as

00:10:34,320 --> 00:10:38,640
a centerpiece of their cloud native

00:10:36,640 --> 00:10:43,120
transformation

00:10:38,640 --> 00:10:45,279
moving off of iac tooling entirely

00:10:43,120 --> 00:10:46,240
all this momentum in the community has

00:10:45,279 --> 00:10:48,320
led us

00:10:46,240 --> 00:10:49,920
to apply for promoting crossplane to

00:10:48,320 --> 00:10:53,600
incubation status

00:10:49,920 --> 00:10:55,519
at the cncf the toc will vote on this

00:10:53,600 --> 00:10:57,680
shortly but we are extremely excited by

00:10:55,519 --> 00:10:59,760
the progress

00:10:57,680 --> 00:11:01,839
finally i wanted to throw in a word from

00:10:59,760 --> 00:11:02,640
upbound one of the companies sponsoring

00:11:01,839 --> 00:11:03,920
this event

00:11:02,640 --> 00:11:07,680
and the company that started the

00:11:03,920 --> 00:11:09,600
crossman project and donated to the cncf

00:11:07,680 --> 00:11:11,680
we are on a mission to bring crossplane

00:11:09,600 --> 00:11:13,839
to organizations of all sizes

00:11:11,680 --> 00:11:15,120
and have a number of product offerings

00:11:13,839 --> 00:11:17,120
around crossbrain that we'll be

00:11:15,120 --> 00:11:19,760
announcing later this month

00:11:17,120 --> 00:11:20,800
please stay tuned if you want to be part

00:11:19,760 --> 00:11:22,560
of our mission

00:11:20,800 --> 00:11:24,240
or want to learn more about upbound

00:11:22,560 --> 00:11:26,399
please visit our website

00:11:24,240 --> 00:11:29,839
thank you and have a wonderful cross

00:11:26,399 --> 00:11:29,839

YouTube URL: https://www.youtube.com/watch?v=BsAE5oUQR6A


