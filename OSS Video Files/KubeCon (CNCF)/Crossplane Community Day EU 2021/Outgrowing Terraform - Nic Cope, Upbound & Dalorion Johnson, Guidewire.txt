Title: Outgrowing Terraform - Nic Cope, Upbound & Dalorion Johnson, Guidewire
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Outgrowing Terraform - Nic Cope, Upbound & Dalorion Johnson, Guidewire

Curious how Crossplane compares to Terraform? In this session Dalorion and Nic will discuss some of the challenges organisations can face when they need to scale their Terraform use to empower multiple teams to collaborate on declarative infrastructure management, and how Crossplane addresses these challenges. The session will be rooted in Dalorion’s experiences building and managing advanced Terraform configurations for a large software engineering organisation. Nic will highlight how the kind of challenges faced by Guidewire have informed Crossplane’s architectural decisions, allowing it to overcome some of Terraform’s pain points.
Captions: 
	00:00:00,080 --> 00:00:04,720
hi my name is delorean johnson

00:00:05,040 --> 00:00:10,480
oh hello and i'm nick cope

00:00:08,320 --> 00:00:13,040
and we will be talking about outgrowing

00:00:10,480 --> 00:00:16,640
tearborne

00:00:13,040 --> 00:00:19,199
i am a software engineer at guidewire

00:00:16,640 --> 00:00:20,240
and i work on cloud infrastructure

00:00:19,199 --> 00:00:23,680
specifically

00:00:20,240 --> 00:00:27,119
in persistence type resources

00:00:23,680 --> 00:00:30,960
guidewire is a platform as a service

00:00:27,119 --> 00:00:33,520
company that caters to the property and

00:00:30,960 --> 00:00:35,280
casualty insurance industry

00:00:33,520 --> 00:00:38,640
and we're currently beginning our

00:00:35,280 --> 00:00:40,960
migration into cross-play

00:00:38,640 --> 00:00:43,440
so speaking of cross-plane uh again i'm

00:00:40,960 --> 00:00:45,559
nick i'm a i'm a super architect

00:00:43,440 --> 00:00:47,039
uh software engineer uh working at

00:00:45,559 --> 00:00:48,960
upbound.com

00:00:47,039 --> 00:00:50,399
i am on the crossband steering committee

00:00:48,960 --> 00:00:51,199
and i've been working on crossband since

00:00:50,399 --> 00:00:52,480
shortly and

00:00:51,199 --> 00:00:54,559
after it was open source since the

00:00:52,480 --> 00:00:55,600
founders open sourced it about two years

00:00:54,559 --> 00:00:57,600
ago

00:00:55,600 --> 00:00:59,120
uh before working on crossplay and i did

00:00:57,600 --> 00:01:02,320
a lot of work with terraform so

00:00:59,120 --> 00:01:02,320
i'm a big fan of both

00:01:04,239 --> 00:01:10,799
okay so guidewire

00:01:08,240 --> 00:01:13,200
but prior to becoming a platform as a

00:01:10,799 --> 00:01:15,040
service company we provided on-premise

00:01:13,200 --> 00:01:17,600
solutions to our customers

00:01:15,040 --> 00:01:18,960
our development process used to involve

00:01:17,600 --> 00:01:21,759
developing complex

00:01:18,960 --> 00:01:24,400
software installations at our customers

00:01:21,759 --> 00:01:24,400
offices

00:01:24,640 --> 00:01:31,520
so the cost and effort of doing so

00:01:27,759 --> 00:01:34,079
um of installing these snowflake on-site

00:01:31,520 --> 00:01:35,200
um installations is not very

00:01:34,079 --> 00:01:38,159
cost-effective

00:01:35,200 --> 00:01:39,600
it doesn't scale very well and it takes

00:01:38,159 --> 00:01:41,600
a long time to upgrade

00:01:39,600 --> 00:01:44,079
because the installation will take a two

00:01:41,600 --> 00:01:47,520
year it's a two year process to get

00:01:44,079 --> 00:01:49,520
you know any new features in there so

00:01:47,520 --> 00:01:51,600
um we decided to make a shift towards

00:01:49,520 --> 00:01:52,799
the cloud so given guidewear's long

00:01:51,600 --> 00:01:54,880
extensive history

00:01:52,799 --> 00:01:56,079
in property and casualty we were set in

00:01:54,880 --> 00:01:59,680
a better position

00:01:56,079 --> 00:02:01,680
to try to unify um try to put

00:01:59,680 --> 00:02:03,360
our current customers on a platform

00:02:01,680 --> 00:02:07,040
where the ecosystem

00:02:03,360 --> 00:02:10,239
can better serve our customers

00:02:07,040 --> 00:02:13,440
but um to that point um we used

00:02:10,239 --> 00:02:16,640
terraform to build our platform um

00:02:13,440 --> 00:02:19,840
it was it aided us in our shift

00:02:16,640 --> 00:02:22,560
by being you know basically kind of

00:02:19,840 --> 00:02:24,080
you know just a good intermediate step

00:02:22,560 --> 00:02:27,360
into managing

00:02:24,080 --> 00:02:30,400
cloud resources um the

00:02:27,360 --> 00:02:32,800
the implementation itself is

00:02:30,400 --> 00:02:34,879
similar to json which a lot of

00:02:32,800 --> 00:02:37,120
developers are already used to

00:02:34,879 --> 00:02:38,400
and so we were able to leverage that

00:02:37,120 --> 00:02:42,080
type of

00:02:38,400 --> 00:02:45,920
language to manage avs resources

00:02:42,080 --> 00:02:48,080
but um as time went by our platform is

00:02:45,920 --> 00:02:49,680
you know growing and getting large and

00:02:48,080 --> 00:02:53,360
now we're maintaining

00:02:49,680 --> 00:02:55,680
you know about 73 000 lines of hcl

00:02:53,360 --> 00:02:57,760
so now we're starting to um we're

00:02:55,680 --> 00:02:58,959
starting to feel some of the limitations

00:02:57,760 --> 00:03:02,840
of terraform

00:02:58,959 --> 00:03:04,480
we've uh we really use the heck out of

00:03:02,840 --> 00:03:07,920
it

00:03:04,480 --> 00:03:11,680
so one limitation that we've come to

00:03:07,920 --> 00:03:12,080
encounter um is that one thing i didn't

00:03:11,680 --> 00:03:15,360
uh

00:03:12,080 --> 00:03:18,159
forgot to mention was the fact that our

00:03:15,360 --> 00:03:19,440
infrastructure is basically consisting

00:03:18,159 --> 00:03:21,680
of three layers we have our account

00:03:19,440 --> 00:03:24,720
level configuration which is one module

00:03:21,680 --> 00:03:25,519
we have our infrastructure mob uh layer

00:03:24,720 --> 00:03:29,120
which is a

00:03:25,519 --> 00:03:32,879
another module that um is built on

00:03:29,120 --> 00:03:35,519
the resources that the account level

00:03:32,879 --> 00:03:37,360
module provisions and then we have our

00:03:35,519 --> 00:03:40,400
more customer facing

00:03:37,360 --> 00:03:40,799
module our tenant module that uses those

00:03:40,400 --> 00:03:44,239
res

00:03:40,799 --> 00:03:47,519
those two previous layers to um

00:03:44,239 --> 00:03:50,720
provision resources that the user

00:03:47,519 --> 00:03:55,200
did our customers can use to develop

00:03:50,720 --> 00:03:55,200
and customize our products

00:03:56,159 --> 00:04:02,239
so having said that one limited

00:03:59,200 --> 00:04:07,200
limitation is drift so

00:04:02,239 --> 00:04:10,480
um terraform defines our resources

00:04:07,200 --> 00:04:11,920
uh in a you know pretty much in a file a

00:04:10,480 --> 00:04:13,680
you know you have one your terraform

00:04:11,920 --> 00:04:16,959
file and you have your terraform state

00:04:13,680 --> 00:04:18,959
so um and they're stored either

00:04:16,959 --> 00:04:20,079
well the terraform state is stored in a

00:04:18,959 --> 00:04:23,520
remote

00:04:20,079 --> 00:04:27,199
um bucket

00:04:23,520 --> 00:04:28,080
and the terraform um source of truth

00:04:27,199 --> 00:04:31,120
what defines

00:04:28,080 --> 00:04:32,639
our actual defines what resources we

00:04:31,120 --> 00:04:35,440
need for a given module

00:04:32,639 --> 00:04:36,880
is stored in git so unfortunately

00:04:35,440 --> 00:04:39,280
there's no way for

00:04:36,880 --> 00:04:40,320
these two pieces of information to be

00:04:39,280 --> 00:04:42,560
constantly and

00:04:40,320 --> 00:04:43,600
up to date with what is you know

00:04:42,560 --> 00:04:45,840
actually out there

00:04:43,600 --> 00:04:47,040
so unfortunately things happen like

00:04:45,840 --> 00:04:49,120
automatter up

00:04:47,040 --> 00:04:51,440
arnold minor version upgrades or

00:04:49,120 --> 00:04:54,479
somebody mistakenly goes in and

00:04:51,440 --> 00:04:56,400
into the console into the actual um

00:04:54,479 --> 00:04:57,919
provider console and changes something

00:04:56,400 --> 00:04:58,800
there's no way for terraform to know

00:04:57,919 --> 00:05:00,320
until

00:04:58,800 --> 00:05:02,080
you know somebody comes along and tries

00:05:00,320 --> 00:05:04,400
to introduce another change

00:05:02,080 --> 00:05:06,080
so you have to actively go in and manage

00:05:04,400 --> 00:05:07,440
and make sure and be aware when you

00:05:06,080 --> 00:05:09,199
introduce a change you have to

00:05:07,440 --> 00:05:11,280
be aware of the plan and as we mentioned

00:05:09,199 --> 00:05:13,600
earlier our

00:05:11,280 --> 00:05:14,479
whole infrastructure is based on three

00:05:13,600 --> 00:05:16,720
terraform

00:05:14,479 --> 00:05:19,039
modules that consist of hundreds of

00:05:16,720 --> 00:05:21,360
resources and several modules

00:05:19,039 --> 00:05:22,320
so let's say you want to change a tag on

00:05:21,360 --> 00:05:25,039
one resource

00:05:22,320 --> 00:05:25,840
if you were to do a terraform plan or an

00:05:25,039 --> 00:05:27,360
apply

00:05:25,840 --> 00:05:30,160
you have to be you have to take into

00:05:27,360 --> 00:05:31,840
account that there might be drift

00:05:30,160 --> 00:05:34,479
and your plan you have to make sure that

00:05:31,840 --> 00:05:36,560
your plan is not um

00:05:34,479 --> 00:05:38,320
either it's not basically worst case

00:05:36,560 --> 00:05:39,360
destroying another resource that you

00:05:38,320 --> 00:05:42,000
don't need to do

00:05:39,360 --> 00:05:43,440
so if your plan says hey this resource

00:05:42,000 --> 00:05:44,960
is going to be destroyed or replaced

00:05:43,440 --> 00:05:48,080
because somehow

00:05:44,960 --> 00:05:51,120
this one you know

00:05:48,080 --> 00:05:52,240
um field can it has an update to

00:05:51,120 --> 00:05:54,720
something that will

00:05:52,240 --> 00:05:56,160
that will basically you know it will

00:05:54,720 --> 00:05:58,000
force terraform to

00:05:56,160 --> 00:05:59,520
to destroy and replace it because it

00:05:58,000 --> 00:06:03,120
doesn't match the state

00:05:59,520 --> 00:06:03,120
so anyways

00:06:04,840 --> 00:06:10,800
so crossplane approaches

00:06:07,440 --> 00:06:12,800
uh managing infrastructure similarly to

00:06:10,800 --> 00:06:13,680
terraform you know they both use uh

00:06:12,800 --> 00:06:16,240
declarative

00:06:13,680 --> 00:06:18,000
configuration um but a big difference

00:06:16,240 --> 00:06:20,960
that crossblind has is that it is a

00:06:18,000 --> 00:06:21,919
always-on control plane so whereas the

00:06:20,960 --> 00:06:24,800
open source

00:06:21,919 --> 00:06:26,000
version of terraform at least is a uh is

00:06:24,800 --> 00:06:28,639
a command line tool

00:06:26,000 --> 00:06:31,520
that's uh invoked on demand i know

00:06:28,639 --> 00:06:32,880
guidewire uh uses it uh via ci cd a lot

00:06:31,520 --> 00:06:34,160
um but you know you can away that you

00:06:32,880 --> 00:06:36,639
can also invoke it from developer

00:06:34,160 --> 00:06:38,160
laptops and

00:06:36,639 --> 00:06:40,639
like delorean was saying part of the

00:06:38,160 --> 00:06:41,360
problem is terraform doesn't know to go

00:06:40,639 --> 00:06:43,360
check the world

00:06:41,360 --> 00:06:45,520
unless you ask it to uh whether

00:06:43,360 --> 00:06:47,840
something has changed

00:06:45,520 --> 00:06:49,120
so this can lead to surprises you know

00:06:47,840 --> 00:06:50,560
you go and run terraform to go and

00:06:49,120 --> 00:06:51,840
update your caches and it's actually

00:06:50,560 --> 00:06:53,440
saying yeah i'm gonna update your caches

00:06:51,840 --> 00:06:54,800
but also i notice your databases need

00:06:53,440 --> 00:06:56,240
updating as well and you weren't

00:06:54,800 --> 00:06:59,440
expecting that

00:06:56,240 --> 00:07:02,560
crossplane kind of um approaches this

00:06:59,440 --> 00:07:05,759
uh by by leaning in to

00:07:02,560 --> 00:07:07,120
constant reconciliation so instead of uh

00:07:05,759 --> 00:07:09,280
checking the world whenever someone

00:07:07,120 --> 00:07:11,520
tells crossfit hey um

00:07:09,280 --> 00:07:12,560
you know i want to change something

00:07:11,520 --> 00:07:14,160
there's sort of two levels with

00:07:12,560 --> 00:07:15,440
crossblade first you tell you question i

00:07:14,160 --> 00:07:16,880
want to change something that crosstalk

00:07:15,440 --> 00:07:18,720
saves that as its desired state and then

00:07:16,880 --> 00:07:19,599
it just sits there forever applying that

00:07:18,720 --> 00:07:20,880
desired state

00:07:19,599 --> 00:07:22,479
so you need to be a little bit brave

00:07:20,880 --> 00:07:24,000
because it takes away the kind of the

00:07:22,479 --> 00:07:25,360
check that you get with terraform where

00:07:24,000 --> 00:07:26,639
terraform's like hey i'm gonna go change

00:07:25,360 --> 00:07:27,599
this here's what i would change is this

00:07:26,639 --> 00:07:28,880
okay

00:07:27,599 --> 00:07:30,720
cosplay and you say hey go change this

00:07:28,880 --> 00:07:32,639
and then crossband will just always be

00:07:30,720 --> 00:07:34,720
running every 30 to 60 seconds

00:07:32,639 --> 00:07:35,840
correcting uh any any problems it finds

00:07:34,720 --> 00:07:37,919
in the world

00:07:35,840 --> 00:07:39,199
so if uh for example someone goes into

00:07:37,919 --> 00:07:42,240
your aws console

00:07:39,199 --> 00:07:44,160
and um uh changes

00:07:42,240 --> 00:07:45,520
a database from 20 gig to 30 gig of

00:07:44,160 --> 00:07:46,319
storage cosplaying will just change it

00:07:45,520 --> 00:07:47,919
back to 20k

00:07:46,319 --> 00:07:49,840
if that's what the uh the source of

00:07:47,919 --> 00:07:51,440
truth is or if you've trusted cosplaying

00:07:49,840 --> 00:07:54,240
to manage that infrastructure

00:07:51,440 --> 00:07:54,879
so it kind of forces you to uh buy into

00:07:54,240 --> 00:07:58,000
crossplay

00:07:54,879 --> 00:07:59,520
you can't really fight crossfade um

00:07:58,000 --> 00:08:01,199
a nice thing about crossplane as well is

00:07:59,520 --> 00:08:04,800
that it doesn't have this big graph

00:08:01,199 --> 00:08:06,160
of um of the world that the terraform

00:08:04,800 --> 00:08:07,440
computes to do sort of ordered

00:08:06,160 --> 00:08:09,680
applications and things like that

00:08:07,440 --> 00:08:10,560
because crossplane is always running it

00:08:09,680 --> 00:08:12,080
can be a little bit

00:08:10,560 --> 00:08:13,599
less tightly coupled it can be

00:08:12,080 --> 00:08:15,120
eventually consistent

00:08:13,599 --> 00:08:16,639
so this means if you say hey cosplay and

00:08:15,120 --> 00:08:18,479
go update this database

00:08:16,639 --> 00:08:20,080
hey it is possible to just update that

00:08:18,479 --> 00:08:21,280
database regardless of what your caches

00:08:20,080 --> 00:08:23,840
are doing you just be like just update

00:08:21,280 --> 00:08:27,360
this one thing don't touch the others

00:08:23,840 --> 00:08:29,840
um b uh

00:08:27,360 --> 00:08:32,159
if multiple things do need to change

00:08:29,840 --> 00:08:36,640
they can all just kind of change

00:08:32,159 --> 00:08:36,640
when they're ready sort of thing so

00:08:36,959 --> 00:08:41,039
crossplane can effectively go and apply

00:08:39,839 --> 00:08:42,959
changes

00:08:41,039 --> 00:08:44,320
to your database and if that change is

00:08:42,959 --> 00:08:45,519
blocked or changed to your cache or

00:08:44,320 --> 00:08:48,080
something like that

00:08:45,519 --> 00:08:54,800
um when your cache is ready cosplaying

00:08:48,080 --> 00:08:57,200
just becomes ready

00:08:54,800 --> 00:08:58,240
another um limitation that we have

00:08:57,200 --> 00:09:01,920
experienced

00:08:58,240 --> 00:09:02,800
is versioning so again i'm going back to

00:09:01,920 --> 00:09:05,920
that

00:09:02,800 --> 00:09:06,800
to the beginning our whole

00:09:05,920 --> 00:09:08,320
infrastructure

00:09:06,800 --> 00:09:10,000
revolves around basically three

00:09:08,320 --> 00:09:14,399
terraform modules

00:09:10,000 --> 00:09:16,399
so within those different modules um

00:09:14,399 --> 00:09:17,920
there are hundreds of resources again

00:09:16,399 --> 00:09:20,320
several modules

00:09:17,920 --> 00:09:22,320
and they pretty much all have to be

00:09:20,320 --> 00:09:25,760
within the same range of

00:09:22,320 --> 00:09:26,959
the terraform version and um aws

00:09:25,760 --> 00:09:28,959
provider version

00:09:26,959 --> 00:09:30,240
in our case i guess the you know aws

00:09:28,959 --> 00:09:33,839
provider version

00:09:30,240 --> 00:09:37,200
um so if

00:09:33,839 --> 00:09:40,399
again if one layer

00:09:37,200 --> 00:09:43,279
needs to basically be

00:09:40,399 --> 00:09:43,839
applied they all every resource every

00:09:43,279 --> 00:09:46,800
model

00:09:43,839 --> 00:09:47,440
which is controlled by different teams

00:09:46,800 --> 00:09:51,279
especially

00:09:47,440 --> 00:09:53,519
in the tenant level they

00:09:51,279 --> 00:09:55,200
you know we have to they all have to

00:09:53,519 --> 00:09:57,760
basically be on the same version

00:09:55,200 --> 00:09:58,480
so there was actually a case recently

00:09:57,760 --> 00:10:00,640
where

00:09:58,480 --> 00:10:01,839
my team wanted to introduce a new

00:10:00,640 --> 00:10:04,800
terraform feature

00:10:01,839 --> 00:10:07,839
it was um between uh it was a new

00:10:04,800 --> 00:10:11,040
feature in terraform 13 or 0.13

00:10:07,839 --> 00:10:14,240
would allow a count on um

00:10:11,040 --> 00:10:15,279
terraform modules so because we're part

00:10:14,240 --> 00:10:18,160
of a

00:10:15,279 --> 00:10:19,519
single module from the perspective of

00:10:18,160 --> 00:10:21,519
our platform

00:10:19,519 --> 00:10:22,959
in order to introduce that module we had

00:10:21,519 --> 00:10:25,440
to basically

00:10:22,959 --> 00:10:27,360
go through every module talk to pretty

00:10:25,440 --> 00:10:28,399
much every team that manages any

00:10:27,360 --> 00:10:31,200
resource

00:10:28,399 --> 00:10:32,240
and change their repo to get this one

00:10:31,200 --> 00:10:35,279
change out there

00:10:32,240 --> 00:10:37,360
for for us so that was

00:10:35,279 --> 00:10:38,640
it was an experience i mean the bright

00:10:37,360 --> 00:10:39,200
side is we got to talk to a lot of

00:10:38,640 --> 00:10:41,120
people

00:10:39,200 --> 00:10:46,800
but the downside it took a month to

00:10:41,120 --> 00:10:49,440
introduce this to our platform

00:10:46,800 --> 00:10:50,720
so like like terraform crossband users

00:10:49,440 --> 00:10:52,880
providers we have a core

00:10:50,720 --> 00:10:54,640
of crossplane that um effectively has a

00:10:52,880 --> 00:10:56,399
package manager that delivers

00:10:54,640 --> 00:10:58,640
providers that manages what providers

00:10:56,399 --> 00:11:02,079
are installed as well as

00:10:58,640 --> 00:11:04,480
managing configuration for providers

00:11:02,079 --> 00:11:06,160
so the you know the client the

00:11:04,480 --> 00:11:07,200
declarative configuration of what you

00:11:06,160 --> 00:11:11,600
want to be running

00:11:07,200 --> 00:11:13,200
uh in the world um

00:11:11,600 --> 00:11:15,279
so providers are versioned in cross

00:11:13,200 --> 00:11:17,360
plane as well and honestly you can hit

00:11:15,279 --> 00:11:18,800
um some some problems with uh with

00:11:17,360 --> 00:11:20,160
virgin you do need to be careful

00:11:18,800 --> 00:11:22,399
you could say for instance some

00:11:20,160 --> 00:11:23,760
providers can declare what version of uh

00:11:22,399 --> 00:11:25,200
cross plane they're compatible with and

00:11:23,760 --> 00:11:27,120
it could be that you hit you want to

00:11:25,200 --> 00:11:29,760
install a new version provider

00:11:27,120 --> 00:11:31,040
sql to manage your sql databases but um

00:11:29,760 --> 00:11:31,519
that needs a particular cross-plane

00:11:31,040 --> 00:11:33,760
version

00:11:31,519 --> 00:11:35,360
and uh you've got provider aws that

00:11:33,760 --> 00:11:36,720
needs a different incompatible version

00:11:35,360 --> 00:11:38,320
so it's possible to have version

00:11:36,720 --> 00:11:39,519
inconsistency in cosplay 2 or your

00:11:38,320 --> 00:11:42,720
compatibilities

00:11:39,519 --> 00:11:44,480
but one thing that makes the problem a

00:11:42,720 --> 00:11:46,560
lot simpler in crossplane

00:11:44,480 --> 00:11:48,079
is that because it is a service because

00:11:46,560 --> 00:11:49,680
it's a control plane that's just off

00:11:48,079 --> 00:11:51,040
running somewhere that doesn't

00:11:49,680 --> 00:11:52,959
you know need to have providers

00:11:51,040 --> 00:11:53,519
installed on different people's laptops

00:11:52,959 --> 00:11:54,880
and

00:11:53,519 --> 00:11:57,120
different providers configured for

00:11:54,880 --> 00:12:00,720
different you know uh

00:11:57,120 --> 00:12:03,680
modules of of uh

00:12:00,720 --> 00:12:05,440
of terraform code in that example uh you

00:12:03,680 --> 00:12:06,959
have a centralized place that you can go

00:12:05,440 --> 00:12:09,360
and upgrade your terraform

00:12:06,959 --> 00:12:10,000
sorry your cross plating providers so

00:12:09,360 --> 00:12:11,360
you could just go

00:12:10,000 --> 00:12:13,600
to the cross play and control plane and

00:12:11,360 --> 00:12:15,200
say okay i'd like to install provide aws

00:12:13,600 --> 00:12:17,120
and as long as it doesn't make breaking

00:12:15,200 --> 00:12:18,399
api changes

00:12:17,120 --> 00:12:20,399
everyone is now just running the new

00:12:18,399 --> 00:12:22,560
version of provider aws

00:12:20,399 --> 00:12:24,240
so it sort of takes some takes the

00:12:22,560 --> 00:12:26,480
problem like what version of software is

00:12:24,240 --> 00:12:29,040
running aware and boils it down to like

00:12:26,480 --> 00:12:29,920
does a new version make breaking api

00:12:29,040 --> 00:12:32,240
changes

00:12:29,920 --> 00:12:33,760
and crossplane uh takes pretty seriously

00:12:32,240 --> 00:12:37,200
following the kubernetes

00:12:33,760 --> 00:12:40,480
strict versioning policies uh

00:12:37,200 --> 00:12:42,560
so in kubernetes resource versions

00:12:40,480 --> 00:12:44,959
everything v1 beta 1 or above has a

00:12:42,560 --> 00:12:46,959
pretty strict no breaking changes policy

00:12:44,959 --> 00:12:48,880
so theoretically in dolorean's case

00:12:46,959 --> 00:12:52,399
where one team wanted a

00:12:48,880 --> 00:12:52,720
uh a new feature uh you should be able

00:12:52,399 --> 00:12:54,800
to

00:12:52,720 --> 00:12:56,800
upgrade to the new version of cosplay

00:12:54,800 --> 00:12:58,480
provider aws in just one place in your

00:12:56,800 --> 00:13:00,720
cross main control plane

00:12:58,480 --> 00:13:01,920
and then everyone should get access to

00:13:00,720 --> 00:13:03,360
that new feature

00:13:01,920 --> 00:13:04,959
and everyone who doesn't want to use

00:13:03,360 --> 00:13:06,880
that new feature everything should just

00:13:04,959 --> 00:13:07,519
have same defaults for them that's how

00:13:06,880 --> 00:13:10,399
we sort of

00:13:07,519 --> 00:13:11,360
design our upgrade story the one

00:13:10,399 --> 00:13:14,399
exception to this

00:13:11,360 --> 00:13:14,959
is our alpha apis we do have our apis

00:13:14,399 --> 00:13:17,839
that are

00:13:14,959 --> 00:13:18,880
rated v1 alpha one two three four et

00:13:17,839 --> 00:13:20,240
cetera

00:13:18,880 --> 00:13:21,680
those kind of whole bets are off because

00:13:20,240 --> 00:13:22,800
we're still experimenting with the

00:13:21,680 --> 00:13:24,079
features there so we think

00:13:22,800 --> 00:13:25,760
we might actually put those behind a

00:13:24,079 --> 00:13:26,800
feature flag or something soon so that

00:13:25,760 --> 00:13:29,040
you know just really

00:13:26,800 --> 00:13:30,480
shows people these are the ones that we

00:13:29,040 --> 00:13:32,959
don't provide that contract for

00:13:30,480 --> 00:13:34,320
there if you want to try them but be

00:13:32,959 --> 00:13:35,040
aware that if you upgrade they might

00:13:34,320 --> 00:13:36,959
break

00:13:35,040 --> 00:13:39,680
but for everything else all of our v1

00:13:36,959 --> 00:13:43,360
beta1 and our core v1 apis

00:13:39,680 --> 00:13:43,360
it's a it's a really safe upgrade path

00:13:45,440 --> 00:13:51,120
okay um one

00:13:48,480 --> 00:13:51,839
uh another excuse me another access

00:13:51,120 --> 00:13:54,880
control

00:13:51,839 --> 00:13:57,920
um another limitation is access control

00:13:54,880 --> 00:13:59,760
um again going back to uh

00:13:57,920 --> 00:14:01,440
our you know the beginning when i said

00:13:59,760 --> 00:14:02,720
that we our infrastructure is through

00:14:01,440 --> 00:14:05,760
different modules

00:14:02,720 --> 00:14:07,120
lots of resources a lot lots of sub

00:14:05,760 --> 00:14:10,240
modules

00:14:07,120 --> 00:14:14,240
in those layers we

00:14:10,240 --> 00:14:15,040
actually provision i am roles for the

00:14:14,240 --> 00:14:18,160
next layer

00:14:15,040 --> 00:14:20,079
so for one layer we have

00:14:18,160 --> 00:14:22,399
for the account level layer we have the

00:14:20,079 --> 00:14:25,760
we provision the admin

00:14:22,399 --> 00:14:27,440
iam roles that will be used in the

00:14:25,760 --> 00:14:29,839
infrastructure layer

00:14:27,440 --> 00:14:31,279
where we provision the resources and

00:14:29,839 --> 00:14:34,000
then the next level

00:14:31,279 --> 00:14:34,639
provides the imm roles for the tenant

00:14:34,000 --> 00:14:36,959
level

00:14:34,639 --> 00:14:38,720
and whatever they whatever that level

00:14:36,959 --> 00:14:39,760
needs to provision whatever resources

00:14:38,720 --> 00:14:42,880
they have

00:14:39,760 --> 00:14:48,079
so it is essentially

00:14:42,880 --> 00:14:50,560
i am roll food we rely heavily on aws to

00:14:48,079 --> 00:14:51,279
to configure resources within our

00:14:50,560 --> 00:14:54,320
cluster

00:14:51,279 --> 00:14:56,000
terraform has no concept of access

00:14:54,320 --> 00:14:58,959
control so we have to

00:14:56,000 --> 00:14:59,279
basically rely on the cloud provider to

00:14:58,959 --> 00:15:02,320
uh

00:14:59,279 --> 00:15:04,320
and cloud provider in combination with

00:15:02,320 --> 00:15:06,320
you know clever naming conventions to

00:15:04,320 --> 00:15:09,440
get what we want

00:15:06,320 --> 00:15:12,320
down you know our walled garden um

00:15:09,440 --> 00:15:13,519
as one of my colleagues put it for our

00:15:12,320 --> 00:15:16,480
developers

00:15:13,519 --> 00:15:16,480
so it's

00:15:17,680 --> 00:15:22,720
so yeah so it kind of uh just undermines

00:15:21,279 --> 00:15:25,920
self-service

00:15:22,720 --> 00:15:27,839
and it's not a lot of people so our

00:15:25,920 --> 00:15:29,759
admins have to be aware of a lot of

00:15:27,839 --> 00:15:30,959
different things so if a user wants to

00:15:29,759 --> 00:15:33,680
do something

00:15:30,959 --> 00:15:35,839
they have to go back and refer to us to

00:15:33,680 --> 00:15:38,800
or to ask us for access

00:15:35,839 --> 00:15:40,079
instead of having it more of a more

00:15:38,800 --> 00:15:43,199
natural configuration

00:15:40,079 --> 00:15:45,120
so there's a lot of um i guess tribal

00:15:43,199 --> 00:15:48,639
knowledge amongst admins

00:15:45,120 --> 00:15:49,920
a bunch of a few teams to um get this

00:15:48,639 --> 00:15:51,680
going so it's

00:15:49,920 --> 00:15:54,320
so instead of working on new features to

00:15:51,680 --> 00:15:57,600
expand the platform we're having to

00:15:54,320 --> 00:16:01,360
to to worry about a lot um

00:15:57,600 --> 00:16:04,240
of special configuration to accomplish

00:16:01,360 --> 00:16:04,240
access control

00:16:06,160 --> 00:16:09,199
so i think the the fundamental nice

00:16:07,839 --> 00:16:09,680
thing about access control and cross

00:16:09,199 --> 00:16:11,120
plane

00:16:09,680 --> 00:16:14,320
um there's some technical details that

00:16:11,120 --> 00:16:16,880
sort of touch on but but sort of from a

00:16:14,320 --> 00:16:17,920
fundamentally the nice thing is that in

00:16:16,880 --> 00:16:19,519
cross-plane access

00:16:17,920 --> 00:16:21,680
access control is framed around your

00:16:19,519 --> 00:16:22,000
business's concepts not necessarily your

00:16:21,680 --> 00:16:24,959
cloud

00:16:22,000 --> 00:16:26,399
providers not aws concepts so i think i

00:16:24,959 --> 00:16:27,680
touched on briefly before that you can

00:16:26,399 --> 00:16:29,040
deliver these configurations to

00:16:27,680 --> 00:16:32,079
crossblade

00:16:29,040 --> 00:16:33,680
uh and what these configurations include

00:16:32,079 --> 00:16:35,360
are what we call compositions and

00:16:33,680 --> 00:16:38,399
composite resources

00:16:35,360 --> 00:16:39,360
which are effectively your own custom

00:16:38,399 --> 00:16:42,000
apis

00:16:39,360 --> 00:16:42,800
so in guidewire's case instead of saying

00:16:42,000 --> 00:16:45,759
um

00:16:42,800 --> 00:16:48,240
a team has access to aws concepts like

00:16:45,759 --> 00:16:49,759
s3 buckets and maybe i think s3 bucket

00:16:48,240 --> 00:16:50,000
website policies or all the various

00:16:49,759 --> 00:16:51,759
things

00:16:50,000 --> 00:16:53,360
you can do with the bucket at that api

00:16:51,759 --> 00:16:54,560
level um

00:16:53,360 --> 00:16:56,320
you could just come up with an

00:16:54,560 --> 00:16:58,000
opinionated guidewire abstraction that

00:16:56,320 --> 00:16:59,199
might be like you know a guidewire

00:16:58,000 --> 00:17:00,800
storage or a guideline bucket or a

00:16:59,199 --> 00:17:02,240
guideline database it's actually made up

00:17:00,800 --> 00:17:03,680
of like multiple different things in

00:17:02,240 --> 00:17:06,079
the backend multiple different aws

00:17:03,680 --> 00:17:08,079
things and because this is all done

00:17:06,079 --> 00:17:11,039
in the kubernetes api you can use

00:17:08,079 --> 00:17:13,280
kubernetes rbac to restrict this

00:17:11,039 --> 00:17:15,039
so crossplane actually has user's

00:17:13,280 --> 00:17:16,959
credentials to talk to aws obviously you

00:17:15,039 --> 00:17:19,199
need to give it credentials somehow

00:17:16,959 --> 00:17:20,160
and it can load those from coop to iam

00:17:19,199 --> 00:17:22,799
or it can like

00:17:20,160 --> 00:17:23,360
load them from irsa uh can you just give

00:17:22,799 --> 00:17:25,600
it a

00:17:23,360 --> 00:17:26,880
config file with uh sorry a secret i

00:17:25,600 --> 00:17:30,160
should say rather with

00:17:26,880 --> 00:17:31,280
your um your aws account keys and you

00:17:30,160 --> 00:17:32,799
can even have multiple of those

00:17:31,280 --> 00:17:34,240
providers so you can say some of these

00:17:32,799 --> 00:17:35,679
resources you know this team are gonna

00:17:34,240 --> 00:17:38,080
go use this account this team's gonna

00:17:35,679 --> 00:17:40,240
use that account et cetera et cetera

00:17:38,080 --> 00:17:41,360
but it's kind of layered you grant

00:17:40,240 --> 00:17:44,400
cosplaying

00:17:41,360 --> 00:17:46,799
access to act on your behalf on aws or

00:17:44,400 --> 00:17:48,720
any cloud any api that you call it

00:17:46,799 --> 00:17:50,559
and then you use rvac to restrict what

00:17:48,720 --> 00:17:53,520
people can ask cosplay to do

00:17:50,559 --> 00:17:54,160
uh on their behalf so it allows you to

00:17:53,520 --> 00:17:55,919
frame

00:17:54,160 --> 00:17:57,840
uh access control along the lines of

00:17:55,919 --> 00:18:00,000
sort of

00:17:57,840 --> 00:18:01,760
can this person create a guidewire

00:18:00,000 --> 00:18:05,360
bucket in this namespace

00:18:01,760 --> 00:18:07,760
and doesn't rely on managing a ton of uh

00:18:05,360 --> 00:18:08,960
hypergranular aws access controls behind

00:18:07,760 --> 00:18:10,000
the scenes something if you trust

00:18:08,960 --> 00:18:11,760
crossplane

00:18:10,000 --> 00:18:13,679
you can limit the rights the crossland

00:18:11,760 --> 00:18:15,120
has if you only ever want to use

00:18:13,679 --> 00:18:17,120
do buckets you can just give cosplay

00:18:15,120 --> 00:18:19,039
access to only two buckets so you can be

00:18:17,120 --> 00:18:21,440
as restrictive as you want

00:18:19,039 --> 00:18:22,160
but you sort of it shifts the access

00:18:21,440 --> 00:18:25,200
control

00:18:22,160 --> 00:18:26,799
up a layer into the kubernetes api where

00:18:25,200 --> 00:18:30,080
you're modeling your business's needs

00:18:26,799 --> 00:18:30,080
not aws api

00:18:33,360 --> 00:18:41,039
hey um again gonna keep recapping our uh

00:18:37,840 --> 00:18:44,799
structure so uh

00:18:41,039 --> 00:18:48,240
basically uh our our infrastructure

00:18:44,799 --> 00:18:48,960
the layers are very well one the bottom

00:18:48,240 --> 00:18:51,520
layer

00:18:48,960 --> 00:18:53,280
is the okay so the top layer depends on

00:18:51,520 --> 00:18:54,799
the next one and then there's

00:18:53,280 --> 00:18:56,799
the next one depends on the bottom layer

00:18:54,799 --> 00:18:58,240
so tenant relies on the

00:18:56,799 --> 00:19:00,240
infrastructure which relies on the

00:18:58,240 --> 00:19:03,679
account level so

00:19:00,240 --> 00:19:06,799
there is no way within terraform itself

00:19:03,679 --> 00:19:10,799
for one for the tenant level

00:19:06,799 --> 00:19:14,080
to access what we've already provisioned

00:19:10,799 --> 00:19:17,520
for the infrastructure so

00:19:14,080 --> 00:19:19,600
um they're just configured in isolation

00:19:17,520 --> 00:19:21,600
so even though the infrastructure level

00:19:19,600 --> 00:19:23,200
is necessary for the tenant to sit on

00:19:21,600 --> 00:19:25,919
top of

00:19:23,200 --> 00:19:28,080
there's no way to actually access these

00:19:25,919 --> 00:19:29,840
resources or kind of

00:19:28,080 --> 00:19:31,280
write configuration where we can

00:19:29,840 --> 00:19:34,400
dynamically

00:19:31,280 --> 00:19:37,679
uh i guess use it to refer

00:19:34,400 --> 00:19:40,480
to that lower level so we have to

00:19:37,679 --> 00:19:41,120
either rely on you know already

00:19:40,480 --> 00:19:43,760
knowledge

00:19:41,120 --> 00:19:46,000
that somebody knows to name this certain

00:19:43,760 --> 00:19:49,760
resource this way like our

00:19:46,000 --> 00:19:51,919
like for example our back-end state file

00:19:49,760 --> 00:19:53,919
or state bucket that stores our

00:19:51,919 --> 00:19:54,880
terraform state file for the tenant

00:19:53,919 --> 00:19:56,559
has been provisioned by the

00:19:54,880 --> 00:19:58,240
infrastructure level so we already we

00:19:56,559 --> 00:20:00,559
follow a naming convention and we just

00:19:58,240 --> 00:20:03,360
hard code the whole name it'd be nice

00:20:00,559 --> 00:20:03,919
if there's a way that somehow the layer

00:20:03,360 --> 00:20:06,080
could

00:20:03,919 --> 00:20:08,080
just discover it and we don't have to

00:20:06,080 --> 00:20:11,600
worry about it in the configuration

00:20:08,080 --> 00:20:14,799
but um right now we have to do that

00:20:11,600 --> 00:20:16,320
so there is ways that terraform allows

00:20:14,799 --> 00:20:19,600
you to discover

00:20:16,320 --> 00:20:23,440
resources that exist like we do um

00:20:19,600 --> 00:20:25,200
have we do have to basically check to

00:20:23,440 --> 00:20:27,520
see if the cluster is there but

00:20:25,200 --> 00:20:29,760
it's again it's just something that's

00:20:27,520 --> 00:20:33,280
hitting kubernetes directly

00:20:29,760 --> 00:20:34,960
or um there's uh

00:20:33,280 --> 00:20:37,039
give the terraform does give you the

00:20:34,960 --> 00:20:39,520
ability to run a script that

00:20:37,039 --> 00:20:40,480
you know make an api call but again

00:20:39,520 --> 00:20:43,360
you're it's

00:20:40,480 --> 00:20:44,640
still directly hitting aws but you know

00:20:43,360 --> 00:20:47,840
we provisioned

00:20:44,640 --> 00:20:48,960
our resources via terraform there should

00:20:47,840 --> 00:20:52,320
be a way to kind of

00:20:48,960 --> 00:20:56,480
query within that within the tool

00:20:52,320 --> 00:20:56,480
to get this get these resources

00:20:58,640 --> 00:21:02,320
yes i think the advantage that the

00:21:00,400 --> 00:21:04,240
crossplane has here is is sort of the

00:21:02,320 --> 00:21:06,720
interoperability that comes from

00:21:04,240 --> 00:21:07,919
being a control plane with a rest api so

00:21:06,720 --> 00:21:08,720
you know in terraform you could

00:21:07,919 --> 00:21:10,400
theoretically

00:21:08,720 --> 00:21:12,240
uh you know you can run terraform and

00:21:10,400 --> 00:21:13,679
maybe write some output sort of thing

00:21:12,240 --> 00:21:15,600
but you end up having terms of rap

00:21:13,679 --> 00:21:17,200
terraform in a script sort of thing or

00:21:15,600 --> 00:21:18,640
start using complex shared state

00:21:17,200 --> 00:21:21,760
relationships and things like that

00:21:18,640 --> 00:21:24,159
to to refer to other modules if that's

00:21:21,760 --> 00:21:27,440
if that's even possible in your use case

00:21:24,159 --> 00:21:28,320
um whereas with crossplane um everything

00:21:27,440 --> 00:21:31,120
is just

00:21:28,320 --> 00:21:32,159
an object and a rest api so at the cross

00:21:31,120 --> 00:21:34,320
plane layer itself

00:21:32,159 --> 00:21:35,200
we have uh we have sort of ways of

00:21:34,320 --> 00:21:38,559
referring

00:21:35,200 --> 00:21:40,159
uh two things um so when you're

00:21:38,559 --> 00:21:41,760
composing infrastructure

00:21:40,159 --> 00:21:45,200
together sort of thing you can you can

00:21:41,760 --> 00:21:47,039
basically uh refer to

00:21:45,200 --> 00:21:48,720
uh you can have the infrastructure you

00:21:47,039 --> 00:21:50,159
compose can potentially like reference

00:21:48,720 --> 00:21:51,760
other bits of infrastructure and say hey

00:21:50,159 --> 00:21:53,440
you should go be in this bbc i just tell

00:21:51,760 --> 00:21:54,559
you to go point to that vpc that's also

00:21:53,440 --> 00:21:56,400
modeled with crossplane

00:21:54,559 --> 00:21:58,000
and it'll it'll kind of figure it out we

00:21:56,400 --> 00:21:59,679
built that at the uh the managed

00:21:58,000 --> 00:22:02,720
resource layer

00:21:59,679 --> 00:22:06,400
um we also support

00:22:02,720 --> 00:22:07,919
basically many uh maybe maybe most of

00:22:06,400 --> 00:22:10,240
our crossplane resources

00:22:07,919 --> 00:22:11,919
um are able to write some or all of

00:22:10,240 --> 00:22:12,799
their interesting connection details to

00:22:11,919 --> 00:22:14,960
a secret

00:22:12,799 --> 00:22:16,400
to make it extra easy to compose to

00:22:14,960 --> 00:22:18,080
consume i mean

00:22:16,400 --> 00:22:19,520
again everything's just a rest api so if

00:22:18,080 --> 00:22:20,720
you can write like a python client of a

00:22:19,520 --> 00:22:22,159
rest api something you can pull out

00:22:20,720 --> 00:22:23,520
whatever you need to get from from

00:22:22,159 --> 00:22:26,080
crossplay

00:22:23,520 --> 00:22:27,360
but uh if you're a pod or something like

00:22:26,080 --> 00:22:29,120
that and you want to make it like really

00:22:27,360 --> 00:22:30,159
easy to get like the connection details

00:22:29,120 --> 00:22:31,679
for a database

00:22:30,159 --> 00:22:32,720
um either because you want to consume it

00:22:31,679 --> 00:22:34,240
from an application or because you want

00:22:32,720 --> 00:22:35,280
to like build other infrastructure on

00:22:34,240 --> 00:22:37,039
top of it

00:22:35,280 --> 00:22:38,799
um then you could say hey we're gonna

00:22:37,039 --> 00:22:40,240
write this data to a secret and then

00:22:38,799 --> 00:22:41,919
something else you know pods can

00:22:40,240 --> 00:22:43,440
have built-in machinery to load up

00:22:41,919 --> 00:22:44,400
environment variables config files or

00:22:43,440 --> 00:22:47,440
that kind of thing from

00:22:44,400 --> 00:22:49,200
from secrets uh one limitation that we

00:22:47,440 --> 00:22:50,559
uh that we need to uh

00:22:49,200 --> 00:22:53,919
figure out and cross plane in the motor

00:22:50,559 --> 00:22:54,720
that's on our sort of backlog is um

00:22:53,919 --> 00:22:56,159
crossplane

00:22:54,720 --> 00:22:57,760
uh does not yet have anything like a

00:22:56,159 --> 00:22:59,120
terraform data source

00:22:57,760 --> 00:23:01,120
so crossbow is really good at giving you

00:22:59,120 --> 00:23:03,120
information about

00:23:01,120 --> 00:23:04,880
stuff that crossland manages but it's uh

00:23:03,120 --> 00:23:06,080
as yet doesn't have great functionality

00:23:04,880 --> 00:23:09,520
for giving you information

00:23:06,080 --> 00:23:10,480
about um arbitrary other stuff let's say

00:23:09,520 --> 00:23:11,840
you know there's a there's a

00:23:10,480 --> 00:23:13,440
database running over there or a cluster

00:23:11,840 --> 00:23:14,960
running over there or a vpc running over

00:23:13,440 --> 00:23:15,760
there that cross-plate is not in charge

00:23:14,960 --> 00:23:18,240
of it's not

00:23:15,760 --> 00:23:19,679
the source of truth for its state um

00:23:18,240 --> 00:23:20,720
it's it doesn't currently have any

00:23:19,679 --> 00:23:24,480
functionality to go and

00:23:20,720 --> 00:23:27,600
grab details about that uh thing

00:23:24,480 --> 00:23:29,440
um but there is a bit of an escape hatch

00:23:27,600 --> 00:23:32,880
here at least which again is just that

00:23:29,440 --> 00:23:33,360
um we we exist within the kubernetes api

00:23:32,880 --> 00:23:35,039
so

00:23:33,360 --> 00:23:36,080
um while it's not the easiest thing in

00:23:35,039 --> 00:23:37,760
the world to write a kubernetes

00:23:36,080 --> 00:23:38,880
controller it is possible to write your

00:23:37,760 --> 00:23:41,039
own code

00:23:38,880 --> 00:23:42,400
um to interact with our apis and glue

00:23:41,039 --> 00:23:44,480
this together at the moment

00:23:42,400 --> 00:23:46,159
so it's possible today with a bit of

00:23:44,480 --> 00:23:49,120
elbow grease and

00:23:46,159 --> 00:23:52,799
code and we aim to make it just a native

00:23:49,120 --> 00:23:52,799
part of the cross-plate ecosystem soon

00:23:55,039 --> 00:24:00,480
and one last limitation i know earlier i

00:23:57,919 --> 00:24:05,600
said that hcl has allowed us to

00:24:00,480 --> 00:24:07,679
scale very quickly and um well

00:24:05,600 --> 00:24:09,440
to allow us to get our platform

00:24:07,679 --> 00:24:11,120
implemented in a very

00:24:09,440 --> 00:24:13,440
in you know in a relatively short amount

00:24:11,120 --> 00:24:16,559
of time while we're

00:24:13,440 --> 00:24:19,039
we're getting to we're starting to

00:24:16,559 --> 00:24:19,760
uh get a little bit more sophisticated

00:24:19,039 --> 00:24:23,200
with

00:24:19,760 --> 00:24:26,880
how we manage and we need

00:24:23,200 --> 00:24:28,559
and it's uh we're starting to

00:24:26,880 --> 00:24:30,080
understand that we need to work closer

00:24:28,559 --> 00:24:32,240
with the cluster so

00:24:30,080 --> 00:24:33,760
it's just turning into another thing to

00:24:32,240 --> 00:24:37,440
maintain again

00:24:33,760 --> 00:24:40,080
our file is in git our state is an s3

00:24:37,440 --> 00:24:40,880
and then we also currently right now

00:24:40,080 --> 00:24:44,320
work

00:24:40,880 --> 00:24:46,400
you know we run our cube ctl commands so

00:24:44,320 --> 00:24:47,600
would it be nice if we could just you

00:24:46,400 --> 00:24:49,760
know kind of work a little bit more

00:24:47,600 --> 00:24:52,799
closer with the cluster have our

00:24:49,760 --> 00:24:56,400
um kubernetes resources and

00:24:52,799 --> 00:24:58,080
be closer to kubernetes so um

00:24:56,400 --> 00:25:00,000
yeah so we can be more productive so we

00:24:58,080 --> 00:25:03,360
don't have to worry about again you know

00:25:00,000 --> 00:25:04,159
where things are in a somewhere else

00:25:03,360 --> 00:25:06,480
that is

00:25:04,159 --> 00:25:08,400
not you know just logging into terminal

00:25:06,480 --> 00:25:11,120
and just messing around

00:25:08,400 --> 00:25:15,840
at that at that part just using just one

00:25:11,120 --> 00:25:15,840
one interface

00:25:16,799 --> 00:25:20,159
so i think the the advantage that

00:25:18,559 --> 00:25:23,440
crossplane has here is pretty much

00:25:20,159 --> 00:25:25,440
what delorean just touched on um uh it's

00:25:23,440 --> 00:25:27,360
tool and consistency effectively i think

00:25:25,440 --> 00:25:29,039
if you're a hypothetical organization

00:25:27,360 --> 00:25:30,559
that does not either use terraform or

00:25:29,039 --> 00:25:31,600
kubernetes and you're thinking hey i'd

00:25:30,559 --> 00:25:33,200
like to go manage my cloud

00:25:31,600 --> 00:25:36,400
infrastructure declaratively

00:25:33,200 --> 00:25:38,159
it's probably about the same level of

00:25:36,400 --> 00:25:40,480
maintenance and burden and learning to

00:25:38,159 --> 00:25:42,080
go using the cross plane or terraform

00:25:40,480 --> 00:25:43,760
but increasingly we're seeing that a lot

00:25:42,080 --> 00:25:45,120
of people are just using kubernetes

00:25:43,760 --> 00:25:46,880
already you know they've already bought

00:25:45,120 --> 00:25:47,360
into kubernetes for maybe managing their

00:25:46,880 --> 00:25:49,600
apps

00:25:47,360 --> 00:25:51,039
um you know so that developers are

00:25:49,600 --> 00:25:52,880
getting used to

00:25:51,039 --> 00:25:54,720
writing deployments for containerized

00:25:52,880 --> 00:25:55,279
apps or using something like argo cd or

00:25:54,720 --> 00:25:58,320
just you know

00:25:55,279 --> 00:26:00,320
operating down the coop ctl layer

00:25:58,320 --> 00:26:01,520
so if they are doing that you know

00:26:00,320 --> 00:26:03,440
people have already invested

00:26:01,520 --> 00:26:04,559
in invested in learning and maintaining

00:26:03,440 --> 00:26:06,960
kubernetes

00:26:04,559 --> 00:26:08,880
it's a smaller shift to sort of add

00:26:06,960 --> 00:26:12,080
crossplay as a kubernetes add-on

00:26:08,880 --> 00:26:14,480
that uses similar patterns uh basically

00:26:12,080 --> 00:26:15,600
run that off of that as a platform team

00:26:14,480 --> 00:26:18,640
to your users

00:26:15,600 --> 00:26:21,440
that it is to learn a different dsl

00:26:18,640 --> 00:26:23,039
uh for terraform sort of thing and keep

00:26:21,440 --> 00:26:24,720
all the tooling and plumbing

00:26:23,039 --> 00:26:26,880
running to get terraform going here ci

00:26:24,720 --> 00:26:28,880
cd system or all that kind of thing

00:26:26,880 --> 00:26:31,200
and you know even further than just uh

00:26:28,880 --> 00:26:33,679
necessarily saying that

00:26:31,200 --> 00:26:35,120
if you know kubernetes cross plane is is

00:26:33,679 --> 00:26:38,159
easy to pick up

00:26:35,120 --> 00:26:38,720
um we can sort of lean on the fact that

00:26:38,159 --> 00:26:40,960
again

00:26:38,720 --> 00:26:42,960
uh at its heart kubernetes is sort of

00:26:40,960 --> 00:26:46,400
like a really good rest api

00:26:42,960 --> 00:26:48,799
so uh even if you have developers who

00:26:46,400 --> 00:26:50,559
aren't so familiar with with kubernetes

00:26:48,799 --> 00:26:52,880
you could always position it as

00:26:50,559 --> 00:26:54,480
hey you can make these rest api calls to

00:26:52,880 --> 00:26:56,159
manage your infrastructure you know if

00:26:54,480 --> 00:26:57,279
you're a python developer or a java

00:26:56,159 --> 00:26:58,720
developer or something like that you can

00:26:57,279 --> 00:27:00,159
say hey there's a really well documented

00:26:58,720 --> 00:27:01,360
rest api for managing infrastructure

00:27:00,159 --> 00:27:04,640
even if you don't want to

00:27:01,360 --> 00:27:07,440
learn the intricacies of kubernetes

00:27:04,640 --> 00:27:08,159
so i think just um again the wonders of

00:27:07,440 --> 00:27:09,760
apis

00:27:08,159 --> 00:27:10,960
goes a long way here and just tooling

00:27:09,760 --> 00:27:12,000
consistency the fact that everyone's

00:27:10,960 --> 00:27:13,360
kind of using

00:27:12,000 --> 00:27:17,039
everyone but many people a lot of people

00:27:13,360 --> 00:27:17,039
at this conference are using kubernetes

00:27:18,840 --> 00:27:23,120
already

00:27:20,080 --> 00:27:25,760
okay so right now um

00:27:23,120 --> 00:27:27,120
we are taking our first steps to uh

00:27:25,760 --> 00:27:30,720
integrating cross plane

00:27:27,120 --> 00:27:33,440
into our ecosystem or i guess migrating

00:27:30,720 --> 00:27:34,080
on to crossline so right now we're

00:27:33,440 --> 00:27:36,080
working with

00:27:34,080 --> 00:27:38,559
my team in particular we're working with

00:27:36,080 --> 00:27:41,200
um managing s3b of crossplay

00:27:38,559 --> 00:27:41,679
and another one of our teams is working

00:27:41,200 --> 00:27:44,960
with

00:27:41,679 --> 00:27:48,240
ecr we're working with composing

00:27:44,960 --> 00:27:52,399
both of these resources and crossplaying

00:27:48,240 --> 00:27:57,360
uh so uh

00:27:52,399 --> 00:27:57,360
yeah so anyways uh we

00:27:57,440 --> 00:28:02,399
we are hitting the ex um we are

00:28:00,159 --> 00:28:04,399
experiencing the freshness

00:28:02,399 --> 00:28:06,000
of you know this bleeding edge

00:28:04,399 --> 00:28:08,799
technology but the cross

00:28:06,000 --> 00:28:10,399
plane community has been very responsive

00:28:08,799 --> 00:28:13,919
and very helpful

00:28:10,399 --> 00:28:14,799
because again you know i'm tech i'm very

00:28:13,919 --> 00:28:16,720
new to

00:28:14,799 --> 00:28:18,000
you know to kubernetes into all this

00:28:16,720 --> 00:28:21,039
stuff myself

00:28:18,000 --> 00:28:22,559
but um so maybe sometimes your questions

00:28:21,039 --> 00:28:24,080
are going to be a little bit obvious to

00:28:22,559 --> 00:28:25,600
consider a little bit more seasoned in

00:28:24,080 --> 00:28:27,600
the technology but you know

00:28:25,600 --> 00:28:30,399
again everybody's been nice and helpful

00:28:27,600 --> 00:28:33,440
and uh and maybe one day once you know

00:28:30,399 --> 00:28:35,039
our you know our team gets a little bit

00:28:33,440 --> 00:28:36,640
more familiar with go and everything

00:28:35,039 --> 00:28:39,520
else we can contribute back

00:28:36,640 --> 00:28:40,320
to the community yeah i'll say that uh

00:28:39,520 --> 00:28:43,200
speaking as

00:28:40,320 --> 00:28:45,520
a sort of a cross-plate steering

00:28:43,200 --> 00:28:47,440
committee uh person and maintainer

00:28:45,520 --> 00:28:49,200
uh one thing i really like about um

00:28:47,440 --> 00:28:51,679
working with the folks at guidewire

00:28:49,200 --> 00:28:52,960
as part of the crossplane community is

00:28:51,679 --> 00:28:56,080
that

00:28:52,960 --> 00:28:56,640
they really get the vision of the

00:28:56,080 --> 00:28:58,399
project

00:28:56,640 --> 00:29:00,320
and i think see a lot of the same value

00:28:58,399 --> 00:29:01,760
that we see in the project

00:29:00,320 --> 00:29:03,039
um you know some people come to

00:29:01,760 --> 00:29:03,919
crossblade and they really they really

00:29:03,039 --> 00:29:05,039
just want um

00:29:03,919 --> 00:29:07,279
what we think of as like the core

00:29:05,039 --> 00:29:11,039
drivers they just they just want to have

00:29:07,279 --> 00:29:13,120
raw apis modeled in kubernetes

00:29:11,039 --> 00:29:14,799
and there's value in and of itself there

00:29:13,120 --> 00:29:17,520
that you know that's valuable by itself

00:29:14,799 --> 00:29:19,279
but um crossplane really sweats the

00:29:17,520 --> 00:29:22,320
separation of concern we really

00:29:19,279 --> 00:29:24,399
think of crossblade as a tool to build

00:29:22,320 --> 00:29:25,200
your own apis as a platform team that

00:29:24,399 --> 00:29:27,200
you can offer

00:29:25,200 --> 00:29:29,120
to your uh to your internal customers to

00:29:27,200 --> 00:29:31,360
the developers you support

00:29:29,120 --> 00:29:33,039
um and guidewire from the get-go who

00:29:31,360 --> 00:29:34,399
just sort of saw that and has been

00:29:33,039 --> 00:29:36,399
looking at it that way

00:29:34,399 --> 00:29:37,919
um it's really really nice you know we

00:29:36,399 --> 00:29:39,360
not the only

00:29:37,919 --> 00:29:41,760
folks in the in the cross playing

00:29:39,360 --> 00:29:44,159
community uh to to see that value by by

00:29:41,760 --> 00:29:45,600
a long shot but definitely um

00:29:44,159 --> 00:29:47,120
i've been very impressed seeing like

00:29:45,600 --> 00:29:49,600
guidewise internal presentations and

00:29:47,120 --> 00:29:51,520
things like that that really like

00:29:49,600 --> 00:29:54,159
get what where or what we're doing so

00:29:51,520 --> 00:29:56,640
it's been a lovely to work with folks at

00:29:54,159 --> 00:29:56,640
guideway

00:29:58,159 --> 00:30:03,279
okay and uh shout out to you julian hill

00:30:01,279 --> 00:30:04,880
and james stockton for helping us put

00:30:03,279 --> 00:30:12,399
together this presentation

00:30:04,880 --> 00:30:12,399

YouTube URL: https://www.youtube.com/watch?v=wRgQxfrFJYU


