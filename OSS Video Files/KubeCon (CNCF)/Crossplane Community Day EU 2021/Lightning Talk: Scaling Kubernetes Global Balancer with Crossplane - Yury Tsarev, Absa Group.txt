Title: Lightning Talk: Scaling Kubernetes Global Balancer with Crossplane - Yury Tsarev, Absa Group
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Scaling Kubernetes Global Balancer with Crossplane - Yury Tsarev, Absa Group

Global load balancing, commonly referred to as GSLB (Global Server Load Balancing) solutions, have typically been the domain of proprietary network software and hardware vendors and installed and managed by siloed network teams. k8gb is a completely open source, cloud native, global load balancing solution for Kubernetes. k8gb focuses on load balancing traffic across geographically dispersed Kubernetes clusters using multiple load balancing strategies to meet requirements such as region failover for high availability. Absa runs more than a hundred GSLB enabled clusters and the number is continuously growing. To handle the configuration overhead Absa uses the combination of Crossplane XRD abstracting and simplifying k8gb deployment configuration for cluster operators, minimizing the potential human errors and enabling GitOps best practices for huge scale hybrid cloud deployment.
Captions: 
	00:00:00,160 --> 00:00:04,720
hi everybody i'm yuri i work as

00:00:02,560 --> 00:00:08,160
principal engineer for apsa group

00:00:04,720 --> 00:00:11,360
and let's chat about crossplane

00:00:08,160 --> 00:00:16,320
and how it helped us to scale

00:00:11,360 --> 00:00:19,279
our kubernetes global load balancer

00:00:16,320 --> 00:00:21,760
so quickly about a cross-plane setup in

00:00:19,279 --> 00:00:24,240
apsa apsa is a

00:00:21,760 --> 00:00:25,760
a huge financial organization that

00:00:24,240 --> 00:00:27,359
serves

00:00:25,760 --> 00:00:28,800
multiple countries in an africa

00:00:27,359 --> 00:00:32,559
continent

00:00:28,800 --> 00:00:35,440
and we have a pretty uh reasonable scale

00:00:32,559 --> 00:00:36,719
and we operating over a hybrid setup

00:00:35,440 --> 00:00:40,399
part of the workload

00:00:36,719 --> 00:00:43,440
on-prem and uh part of them in

00:00:40,399 --> 00:00:44,239
edibles cross plane instances are

00:00:43,440 --> 00:00:47,520
currently

00:00:44,239 --> 00:00:50,480
deployed uh within our on-prem data

00:00:47,520 --> 00:00:54,320
centers and kubernetes clusters

00:00:50,480 --> 00:00:56,879
we are using a set of uh

00:00:54,320 --> 00:00:59,199
course plane providers uh main ones are

00:00:56,879 --> 00:01:02,399
edible aws and helm

00:00:59,199 --> 00:01:04,569
and we use our special somewhat

00:01:02,399 --> 00:01:06,320
temperatures that we developed

00:01:04,569 --> 00:01:10,080
[Music]

00:01:06,320 --> 00:01:13,760
to automatically propagate

00:01:10,080 --> 00:01:18,159
credentials as kubernetes secrets uh

00:01:13,760 --> 00:01:18,159
in automated way uh we are someone

00:01:19,920 --> 00:01:23,439
we use crossplane compository source

00:01:22,960 --> 00:01:25,360
model

00:01:23,439 --> 00:01:27,280
and associated composite composite

00:01:25,360 --> 00:01:30,440
resource definitions

00:01:27,280 --> 00:01:32,640
to create our very own

00:01:30,440 --> 00:01:36,479
[Music]

00:01:32,640 --> 00:01:38,640
platform and provide

00:01:36,479 --> 00:01:42,000
an abstracted resources to our technical

00:01:38,640 --> 00:01:43,600
customers so main exercise

00:01:42,000 --> 00:01:45,200
composite resource definitions that we

00:01:43,600 --> 00:01:47,439
operate at the moment are

00:01:45,200 --> 00:01:49,119
as bucket to provide specially

00:01:47,439 --> 00:01:52,640
configured data storage

00:01:49,119 --> 00:01:55,360
object storage was grayscale instance

00:01:52,640 --> 00:01:56,320
eks clusters and kgb for global load

00:01:55,360 --> 00:02:00,000
balancing

00:01:56,320 --> 00:02:02,719
so we mostly focus on a kgb part today

00:02:00,000 --> 00:02:04,000
uh meanwhile the principles of cross

00:02:02,719 --> 00:02:09,360
plane based compositions

00:02:04,000 --> 00:02:11,520
are shared uh between these resources

00:02:09,360 --> 00:02:14,560
so what is kgb it has open source

00:02:11,520 --> 00:02:18,000
project that we developed in apsa

00:02:14,560 --> 00:02:19,360
it is a cloud-native global kubernetes

00:02:18,000 --> 00:02:23,040
global balancer

00:02:19,360 --> 00:02:24,879
it is kubernetes native and it enables

00:02:23,040 --> 00:02:27,760
global service load balancing

00:02:24,879 --> 00:02:28,720
function for workloads that are deployed

00:02:27,760 --> 00:02:31,519
on top of

00:02:28,720 --> 00:02:33,760
kubernetes clusters typically in

00:02:31,519 --> 00:02:34,720
geographically dispersed data centers or

00:02:33,760 --> 00:02:37,840
different

00:02:34,720 --> 00:02:40,160
cloud reach regions like different aw

00:02:37,840 --> 00:02:42,400
it was regions and as is a common

00:02:40,160 --> 00:02:46,640
reference setup

00:02:42,400 --> 00:02:49,680
uh one of the distinctions uh

00:02:46,640 --> 00:02:52,319
uh points uh of a kgb

00:02:49,680 --> 00:02:54,879
project is a absence of a single point

00:02:52,319 --> 00:02:57,920
of failure so we do not have any control

00:02:54,879 --> 00:03:00,800
clusters and no instance where uh

00:02:57,920 --> 00:03:01,280
traffic is going through so there is no

00:03:00,800 --> 00:03:05,680
single

00:03:01,280 --> 00:03:08,959
uh bottleneck and the system is uh

00:03:05,680 --> 00:03:12,239
architected the way to be

00:03:08,959 --> 00:03:15,920
really reliable at a global scale and

00:03:12,239 --> 00:03:17,760
the it is all based on a dns protocol

00:03:15,920 --> 00:03:21,920
that is battle tested

00:03:17,760 --> 00:03:27,519
by internet and is a good match for

00:03:21,920 --> 00:03:30,480
global load balancing traffic steering

00:03:27,519 --> 00:03:33,120
we faced obvious kgb deployment

00:03:30,480 --> 00:03:36,319
challenges because we operate on more

00:03:33,120 --> 00:03:40,879
than 120 kubernetes clusters

00:03:36,319 --> 00:03:40,879
and this number continuously growing

00:03:41,200 --> 00:03:49,440
and there is an obvious challenge of

00:03:44,799 --> 00:03:54,640
repetitive helm configuration where

00:03:49,440 --> 00:03:57,120
we given we are packaging kgb

00:03:54,640 --> 00:03:57,760
as a helm chart we're providing uh

00:03:57,120 --> 00:03:59,599
flexible

00:03:57,760 --> 00:04:01,200
enough configuration configuration

00:03:59,599 --> 00:04:04,959
parameters to

00:04:01,200 --> 00:04:04,959
enable uh

00:04:05,120 --> 00:04:10,080
customization of every part of a kgb is

00:04:08,879 --> 00:04:13,120
a distributed system

00:04:10,080 --> 00:04:15,519
meanwhile our special specific setup

00:04:13,120 --> 00:04:17,680
is relatively stable so we need to

00:04:15,519 --> 00:04:18,239
parameterize not all of them but a

00:04:17,680 --> 00:04:21,280
minimum

00:04:18,239 --> 00:04:24,479
amount and that's how

00:04:21,280 --> 00:04:27,840
crossplaying helps with us it is

00:04:24,479 --> 00:04:28,560
its abstracted resources so here is an

00:04:27,840 --> 00:04:31,040
example

00:04:28,560 --> 00:04:31,040
of a

00:04:32,080 --> 00:04:39,520
crossplane uh composite resource claim

00:04:36,479 --> 00:04:41,440
uh which provides an interface for

00:04:39,520 --> 00:04:42,790
end users a little the technical

00:04:41,440 --> 00:04:45,520
customers or

00:04:42,790 --> 00:04:48,639
[Music]

00:04:45,520 --> 00:04:51,440
you know whatever services uh our human

00:04:48,639 --> 00:04:52,880
is interfaces with the kubernetes api we

00:04:51,440 --> 00:04:55,600
exposing just uh

00:04:52,880 --> 00:04:56,720
a five config required uh configuration

00:04:55,600 --> 00:05:00,800
endpoints

00:04:56,720 --> 00:05:04,080
to drive the kgb installation our

00:05:00,800 --> 00:05:06,160
multiple clusters so it provides very

00:05:04,080 --> 00:05:09,360
effective abstract abstraction

00:05:06,160 --> 00:05:12,160
a very minimal configuration

00:05:09,360 --> 00:05:13,199
only required params are getting exposed

00:05:12,160 --> 00:05:15,360
and you decide

00:05:13,199 --> 00:05:18,160
what kind of these params are with the

00:05:15,360 --> 00:05:21,039
help of cross plane obstruction power

00:05:18,160 --> 00:05:22,240
uh this setup is very good for github so

00:05:21,039 --> 00:05:26,080
via

00:05:22,240 --> 00:05:29,360
uh uh we can easily automate

00:05:26,080 --> 00:05:32,560
uh the application of this xrc

00:05:29,360 --> 00:05:33,520
manifests uh uh visa tools like cargo cd

00:05:32,560 --> 00:05:35,680
or flux

00:05:33,520 --> 00:05:37,199
and we don't need any client-side

00:05:35,680 --> 00:05:40,479
implanting like a

00:05:37,199 --> 00:05:44,639
with k because the

00:05:40,479 --> 00:05:47,919
xrc yamls are very minimalistic

00:05:44,639 --> 00:05:51,840
and we can just drop them in into

00:05:47,919 --> 00:05:54,479
github's triple and let argo or flux

00:05:51,840 --> 00:05:54,880
applied it to the target clusters so

00:05:54,479 --> 00:05:57,919
let's

00:05:54,880 --> 00:06:00,880
uh perform a very quick demo

00:05:57,919 --> 00:06:01,919
and demonstration how it all works so we

00:06:00,880 --> 00:06:03,680
already have a

00:06:01,919 --> 00:06:04,960
couple of clusters where crossplane is

00:06:03,680 --> 00:06:08,160
already deployed

00:06:04,960 --> 00:06:11,680
we have a empty

00:06:08,160 --> 00:06:17,759
kgb namespace which

00:06:11,680 --> 00:06:17,759
we will use to deploy a kgb installation

00:06:18,400 --> 00:06:24,560
let's quickly look how

00:06:22,080 --> 00:06:27,600
x-rays are composed so we have a it

00:06:24,560 --> 00:06:27,600
packaged as a standard

00:06:27,759 --> 00:06:34,720
x-ray uh definition so it's a

00:06:31,120 --> 00:06:36,479
composite research definition and

00:06:34,720 --> 00:06:38,560
that's how we expose the required

00:06:36,479 --> 00:06:41,280
parameters it is a

00:06:38,560 --> 00:06:42,000
open ip history schema and the heavy

00:06:41,280 --> 00:06:43,740
lifting

00:06:42,000 --> 00:06:45,440
is done in a composition

00:06:43,740 --> 00:06:48,560
[Music]

00:06:45,440 --> 00:06:50,880
where we actually

00:06:48,560 --> 00:06:52,319
provides the default parameters and then

00:06:50,880 --> 00:06:56,960
patching them

00:06:52,319 --> 00:07:00,000
from x-ray down to the specific

00:06:56,960 --> 00:07:03,120
resource instantiation

00:07:00,000 --> 00:07:05,280
we have examples resource claims so

00:07:03,120 --> 00:07:07,599
let's be the european one so that's

00:07:05,280 --> 00:07:11,039
exactly this minimalistic uh

00:07:07,599 --> 00:07:12,240
abstraction uh that was demonstrated in

00:07:11,039 --> 00:07:15,280
a slides

00:07:12,240 --> 00:07:16,160
so let's create a kgb installation where

00:07:15,280 --> 00:07:19,039
it's stacked

00:07:16,160 --> 00:07:21,039
with eust1 and it's going to talk by

00:07:19,039 --> 00:07:23,919
configuration with africa

00:07:21,039 --> 00:07:26,400
so it is as easy as applied with keep

00:07:23,919 --> 00:07:26,400
control

00:07:27,440 --> 00:07:35,599
and we can

00:07:31,440 --> 00:07:38,960
check the status of obstructed resource

00:07:35,599 --> 00:07:41,500
with the standard control commands

00:07:38,960 --> 00:07:42,840
it's not yet ready meanwhile we can

00:07:41,500 --> 00:07:45,759
[Music]

00:07:42,840 --> 00:07:48,240
check uh

00:07:45,759 --> 00:07:49,280
and demonstrate that underlying that it

00:07:48,240 --> 00:07:50,720
is uh

00:07:49,280 --> 00:07:53,039
under the hooded standard health

00:07:50,720 --> 00:07:56,960
facility uh thanks to

00:07:53,039 --> 00:07:58,639
uh cross playing provider hell we can

00:07:56,960 --> 00:08:00,800
check subtracted resource again it

00:07:58,639 --> 00:08:03,840
should be already

00:08:00,800 --> 00:08:07,199
ready and it's true

00:08:03,840 --> 00:08:10,479
and we can quickly check the fault fee

00:08:07,199 --> 00:08:10,479
of the service fair parade

00:08:11,599 --> 00:08:16,000
and let's quickly describe this spot

00:08:16,080 --> 00:08:22,000
and double check that the environment

00:08:19,680 --> 00:08:23,919
variables were properly propagated

00:08:22,000 --> 00:08:25,599
down to the port configuration and here

00:08:23,919 --> 00:08:29,599
we go cluster geotech

00:08:25,599 --> 00:08:31,570
as expected label s0 we can

00:08:29,599 --> 00:08:33,360
do the same

00:08:31,570 --> 00:08:38,399
[Music]

00:08:33,360 --> 00:08:41,519
same application of resource

00:08:38,399 --> 00:08:43,360
in another cluster in another data

00:08:41,519 --> 00:08:46,160
center

00:08:43,360 --> 00:08:46,959
the only difference is uh in this

00:08:46,160 --> 00:08:50,800
specific

00:08:46,959 --> 00:08:53,760
instantiation is it's totally the same

00:08:50,800 --> 00:08:54,640
it just the geodetics are flipped

00:08:53,760 --> 00:08:57,680
because this

00:08:54,640 --> 00:09:00,160
uh cluster resize is in another

00:08:57,680 --> 00:09:03,680
geographical location

00:09:00,160 --> 00:09:08,000
so we can quickly check the plot there

00:09:03,680 --> 00:09:13,600
it should be already ready

00:09:08,000 --> 00:09:13,600
and let's make the same end-to-end check

00:09:14,480 --> 00:09:18,080
as in another velocity

00:09:18,880 --> 00:09:23,040
here we go so we have a properly

00:09:21,360 --> 00:09:26,000
configured system

00:09:23,040 --> 00:09:26,640
uh in a box of clusters and both data

00:09:26,000 --> 00:09:30,080
centers

00:09:26,640 --> 00:09:30,720
and that's how we minimalize the setup

00:09:30,080 --> 00:09:36,560
and make it

00:09:30,720 --> 00:09:39,680
very concise and declarative to

00:09:36,560 --> 00:09:41,920
uh dive into this

00:09:39,680 --> 00:09:42,720
cross plane composition concept you can

00:09:41,920 --> 00:09:45,760
visit a

00:09:42,720 --> 00:09:47,519
a very good official documentation

00:09:45,760 --> 00:09:49,519
for which described composition in a

00:09:47,519 --> 00:09:52,640
very practical way

00:09:49,519 --> 00:09:56,560
there is a a very nice video

00:09:52,640 --> 00:09:58,510
of a quarkxplane developer providing you

00:09:56,560 --> 00:10:00,399
ideas of

00:09:58,510 --> 00:10:03,519
[Music]

00:10:00,399 --> 00:10:05,360
cross-plane composition

00:10:03,519 --> 00:10:07,120
to be used to build your own cloud

00:10:05,360 --> 00:10:08,320
platform that's pretty much what we do

00:10:07,120 --> 00:10:12,240
within amsa

00:10:08,320 --> 00:10:14,560
uh kgb io our official uh website for uh

00:10:12,240 --> 00:10:17,839
our kubernetes global balancer in case

00:10:14,560 --> 00:10:21,040
you you're interested in this topic

00:10:17,839 --> 00:10:22,240
please visit it and visit our github

00:10:21,040 --> 00:10:26,320
repo and provide

00:10:22,240 --> 00:10:29,519
feedback and you can grab

00:10:26,320 --> 00:10:32,399
these slides right in sketch

00:10:29,519 --> 00:10:33,600
so you can click all these links and

00:10:32,399 --> 00:10:36,640
follow through

00:10:33,600 --> 00:10:39,600
so thank you so much that was uh

00:10:36,640 --> 00:10:41,279
an example how we using cross plane uh

00:10:39,600 --> 00:10:43,920
and in subtraction power

00:10:41,279 --> 00:10:45,279
to scale a distributed system as an

00:10:43,920 --> 00:10:48,320
example

00:10:45,279 --> 00:10:51,519
kgb and you can

00:10:48,320 --> 00:10:54,800
use the same approach to scale

00:10:51,519 --> 00:10:57,760
and compose your own unique

00:10:54,800 --> 00:10:58,959
platform abstractions on top of

00:10:57,760 --> 00:11:01,120
kubernetes

00:10:58,959 --> 00:11:03,560
thank you so much for watching and have

00:11:01,120 --> 00:11:06,560
a great rest of the conference

00:11:03,560 --> 00:11:06,560

YouTube URL: https://www.youtube.com/watch?v=5l4Xf_Q8ybY


