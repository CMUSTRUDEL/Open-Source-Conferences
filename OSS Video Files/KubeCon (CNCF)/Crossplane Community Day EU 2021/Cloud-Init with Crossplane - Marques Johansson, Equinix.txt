Title: Cloud-Init with Crossplane - Marques Johansson, Equinix
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Cloud-Init with Crossplane - Marques Johansson, Equinix

Baremetal and VM instances provisioned with Crossplane must rely on user-data fields or other forms of provisioners. It is only with these additional provisioning steps that it is possible to replicate managed services on bare metal or managed infrastructure. Cloud-init is a standard format for user-data that allows for numerous config files or scripts to be combined, all in different formats. Cloud-init data can be lengthy and cloud providers limit the size of user data. It is often necessary to combine and compress cloud-init scripts. We’ll explore ways to leverage cloud-init as user-data, demonstrating the higher-order integrations that are possible when Crossplane manages low-level resources.
Captions: 
	00:00:00,240 --> 00:00:03,760
hi i'm marcus johansen i'm going to talk

00:00:02,080 --> 00:00:07,279
to you about using crossplane

00:00:03,760 --> 00:00:09,440
to provision cloud init resources which

00:00:07,279 --> 00:00:10,400
is effectively text which we're then

00:00:09,440 --> 00:00:13,519
going to use

00:00:10,400 --> 00:00:14,320
to provision bare metal resources or vm

00:00:13,519 --> 00:00:16,800
instances

00:00:14,320 --> 00:00:18,160
that take a user data parameter the user

00:00:16,800 --> 00:00:21,279
data parameter

00:00:18,160 --> 00:00:24,160
is a blob of string text

00:00:21,279 --> 00:00:25,039
but cloud init is a special format for

00:00:24,160 --> 00:00:27,760
user data

00:00:25,039 --> 00:00:29,119
that allows us to get more text in there

00:00:27,760 --> 00:00:32,960
by compressing it

00:00:29,119 --> 00:00:35,120
and mime encoding it let's take a look

00:00:32,960 --> 00:00:36,079
what do we know about cloud init well

00:00:35,120 --> 00:00:38,640
it's a service

00:00:36,079 --> 00:00:39,440
that runs inside the operating system

00:00:38,640 --> 00:00:42,879
that knows

00:00:39,440 --> 00:00:44,719
how to determine what cloud it's running

00:00:42,879 --> 00:00:46,239
in if it's running in a cloud or if it's

00:00:44,719 --> 00:00:49,600
using some local

00:00:46,239 --> 00:00:53,600
uh configuration say pulling cloud

00:00:49,600 --> 00:00:55,600
data from a floppy disk from cd-rom

00:00:53,600 --> 00:00:57,199
or from the metadata of your cloud

00:00:55,600 --> 00:00:59,600
provider

00:00:57,199 --> 00:01:01,039
what is inside of that cloud init what

00:00:59,600 --> 00:01:03,520
is that cloud net service

00:01:01,039 --> 00:01:05,119
um processing the data that it's

00:01:03,520 --> 00:01:06,799
fetching from that metadata service the

00:01:05,119 --> 00:01:08,080
data that's touching from that floppy or

00:01:06,799 --> 00:01:12,000
cd-rom drive

00:01:08,080 --> 00:01:14,159
uh well what it's processing is

00:01:12,000 --> 00:01:15,439
a number of different possible formats

00:01:14,159 --> 00:01:18,000
it could be uh

00:01:15,439 --> 00:01:18,640
mime encoded multi-part mime encoded

00:01:18,000 --> 00:01:20,799
text

00:01:18,640 --> 00:01:22,000
it could be gzipped multi-part miming

00:01:20,799 --> 00:01:24,400
coded text

00:01:22,000 --> 00:01:25,200
it could be a shell script it could be

00:01:24,400 --> 00:01:27,439
another

00:01:25,200 --> 00:01:28,560
specific to cloud net format called the

00:01:27,439 --> 00:01:30,560
cloud config

00:01:28,560 --> 00:01:33,040
which is very similar to what you might

00:01:30,560 --> 00:01:34,720
expect looking at salt or puppet syntax

00:01:33,040 --> 00:01:38,000
or chef syntax

00:01:34,720 --> 00:01:41,119
where you can do things like declare

00:01:38,000 --> 00:01:43,840
what packages you want to have installed

00:01:41,119 --> 00:01:44,399
define what ssh keys and what users

00:01:43,840 --> 00:01:47,280
should be

00:01:44,399 --> 00:01:50,079
pre-configured on the system and enable

00:01:47,280 --> 00:01:51,920
a host of other features

00:01:50,079 --> 00:01:53,280
so what does it look like to use cloud

00:01:51,920 --> 00:01:56,320
net well

00:01:53,280 --> 00:01:58,640
it there's not um an api

00:01:56,320 --> 00:02:00,399
that is out there called cloudinit.com

00:01:58,640 --> 00:02:02,079
where you do anything with this is

00:02:00,399 --> 00:02:03,600
i'm sure that domain exists but that's

00:02:02,079 --> 00:02:06,799
not what we're talking about

00:02:03,600 --> 00:02:07,439
so um the way that you typically

00:02:06,799 --> 00:02:09,759
interact

00:02:07,439 --> 00:02:10,800
with cloud in it is through your cloud

00:02:09,759 --> 00:02:13,840
provider if you're

00:02:10,800 --> 00:02:15,440
spinning up a vm instance or a bare

00:02:13,840 --> 00:02:18,319
metal instance

00:02:15,440 --> 00:02:19,920
you need to provide some sort of way to

00:02:18,319 --> 00:02:22,000
provision that resource

00:02:19,920 --> 00:02:24,000
and usually they will provide a field

00:02:22,000 --> 00:02:25,680
called a user data field

00:02:24,000 --> 00:02:28,640
in this user data field they will make

00:02:25,680 --> 00:02:30,319
available through their metadata service

00:02:28,640 --> 00:02:31,760
when cloud init starts up one of the

00:02:30,319 --> 00:02:33,200
first things it does is detects what

00:02:31,760 --> 00:02:34,959
cloud it's running in based on that

00:02:33,200 --> 00:02:36,480
cloud that it's running in it knows

00:02:34,959 --> 00:02:39,519
exactly where to find that metadata

00:02:36,480 --> 00:02:42,879
service within that metadata service

00:02:39,519 --> 00:02:45,200
it will fetch the user data um

00:02:42,879 --> 00:02:47,840
some when i say metadata service so like

00:02:45,200 --> 00:02:51,519
ec2 instances they have this address uh

00:02:47,840 --> 00:02:54,800
i think it's once extined at 254.110

00:02:51,519 --> 00:02:56,560
uh and then there's a common url path to

00:02:54,800 --> 00:02:58,319
get to that user data i think it

00:02:56,560 --> 00:02:59,760
in this case it's just slash user data

00:02:58,319 --> 00:03:03,519
or it might be slash metadata

00:02:59,760 --> 00:03:04,239
user data in any case when system boots

00:03:03,519 --> 00:03:06,400
up

00:03:04,239 --> 00:03:07,440
it is essentially fetching that web

00:03:06,400 --> 00:03:10,560
address

00:03:07,440 --> 00:03:11,840
and uh what it finds there is some blob

00:03:10,560 --> 00:03:13,760
of text

00:03:11,840 --> 00:03:15,920
the blobs of text that cloud and it

00:03:13,760 --> 00:03:18,239
recognizes and knows how to handle

00:03:15,920 --> 00:03:19,360
typically start with a shebang and if

00:03:18,239 --> 00:03:20,560
they don't start with the sherbeting

00:03:19,360 --> 00:03:22,159
then it also knows how to handle the

00:03:20,560 --> 00:03:26,000
multi-part mime

00:03:22,159 --> 00:03:27,760
format so when you

00:03:26,000 --> 00:03:30,239
are provisioning the device you have

00:03:27,760 --> 00:03:33,280
some field where you're specifying

00:03:30,239 --> 00:03:36,640
the user data that you want to boot with

00:03:33,280 --> 00:03:38,480
and that's it the uh like i said it's

00:03:36,640 --> 00:03:39,840
the user data becomes available within

00:03:38,480 --> 00:03:42,959
the metadata service

00:03:39,840 --> 00:03:45,200
um the api that you're creating the

00:03:42,959 --> 00:03:48,560
device through or the instance through

00:03:45,200 --> 00:03:51,599
may let you modify that user data later

00:03:48,560 --> 00:03:54,000
later or look at that user data later

00:03:51,599 --> 00:03:55,519
why you might think why would that be a

00:03:54,000 --> 00:03:58,640
useful thing to do

00:03:55,519 --> 00:04:01,680
well the user data

00:03:58,640 --> 00:04:05,120
is typically used at startup but other

00:04:01,680 --> 00:04:07,519
formats of user data say the ignition

00:04:05,120 --> 00:04:10,720
format or the kickstart format

00:04:07,519 --> 00:04:14,480
so in some systems this data can be

00:04:10,720 --> 00:04:17,280
used on subsequent boots or

00:04:14,480 --> 00:04:18,880
if the api allows you to always fetch

00:04:17,280 --> 00:04:20,639
that user data then you could sort of

00:04:18,880 --> 00:04:23,840
use it as a way to um

00:04:20,639 --> 00:04:26,479
to be bad and send messages

00:04:23,840 --> 00:04:27,360
from your api from your cloud providers

00:04:26,479 --> 00:04:29,040
api

00:04:27,360 --> 00:04:31,199
to your metadata service that your

00:04:29,040 --> 00:04:32,960
instance can then pick up

00:04:31,199 --> 00:04:35,120
usually these metadata services are

00:04:32,960 --> 00:04:36,960
isolated so that

00:04:35,120 --> 00:04:38,479
that instance and only that instance can

00:04:36,960 --> 00:04:40,000
access that metadata service sometimes

00:04:38,479 --> 00:04:41,360
without a token which makes it very

00:04:40,000 --> 00:04:44,400
convenient

00:04:41,360 --> 00:04:44,720
way to interact with the machine so this

00:04:44,400 --> 00:04:46,400
is

00:04:44,720 --> 00:04:48,160
cross playing community today why am i

00:04:46,400 --> 00:04:50,400
sitting here talking about cloud net and

00:04:48,160 --> 00:04:53,840
provisioning devices

00:04:50,400 --> 00:04:54,880
well crossplane is known for was known

00:04:53,840 --> 00:04:57,440
for managing

00:04:54,880 --> 00:04:58,560
services on various clouds it's known

00:04:57,440 --> 00:05:00,160
for managing

00:04:58,560 --> 00:05:01,759
storage in some cases like through the

00:05:00,160 --> 00:05:05,600
rook provider or through

00:05:01,759 --> 00:05:10,320
block storage services on various clouds

00:05:05,600 --> 00:05:12,240
and all kinds of sql databases and

00:05:10,320 --> 00:05:13,759
kubernetes manage kubernetes services

00:05:12,240 --> 00:05:14,720
and any kind of managed service you can

00:05:13,759 --> 00:05:16,960
think of

00:05:14,720 --> 00:05:18,960
but wait there's more crossplane also

00:05:16,960 --> 00:05:20,560
knows how to provision vms and bare

00:05:18,960 --> 00:05:23,360
metal instances now

00:05:20,560 --> 00:05:24,160
i with the providers that are out there

00:05:23,360 --> 00:05:26,479
today

00:05:24,160 --> 00:05:28,720
i don't know how strong that statement

00:05:26,479 --> 00:05:30,960
is i know that the equinix metal

00:05:28,720 --> 00:05:32,479
uh provider does allow you to provision

00:05:30,960 --> 00:05:35,600
bare metal devices

00:05:32,479 --> 00:05:36,720
um i think that the digitalocean

00:05:35,600 --> 00:05:39,520
provider lets you

00:05:36,720 --> 00:05:39,759
provision droplets i previously worked

00:05:39,520 --> 00:05:41,520
on

00:05:39,759 --> 00:05:43,120
a linux provider that knew how to

00:05:41,520 --> 00:05:46,479
provision instances

00:05:43,120 --> 00:05:50,400
so there are um there are

00:05:46,479 --> 00:05:53,199
at least a handful half a handful maybe

00:05:50,400 --> 00:05:55,120
i think ec2 instances are probably

00:05:53,199 --> 00:05:56,639
supported in the aws provider since

00:05:55,120 --> 00:05:57,759
that's generated and there's some like

00:05:56,639 --> 00:06:00,880
60 plus

00:05:57,759 --> 00:06:03,680
resources supported

00:06:00,880 --> 00:06:05,120
point being that with crossplane there

00:06:03,680 --> 00:06:08,400
are a number of ways

00:06:05,120 --> 00:06:10,479
to a number of providers that allow you

00:06:08,400 --> 00:06:13,280
to provision resources that would

00:06:10,479 --> 00:06:15,199
benefit from user data

00:06:13,280 --> 00:06:17,199
you might be saying to yourself hold on

00:06:15,199 --> 00:06:18,400
there i don't need user data i've got a

00:06:17,199 --> 00:06:21,120
host of other ways

00:06:18,400 --> 00:06:22,400
of provisioning my instance i can write

00:06:21,120 --> 00:06:26,160
custom images

00:06:22,400 --> 00:06:28,960
i can use cloud formation or

00:06:26,160 --> 00:06:30,479
whatever my cloud's version of that is i

00:06:28,960 --> 00:06:32,400
can use ssh to just

00:06:30,479 --> 00:06:34,000
hop into the box and configure whatever

00:06:32,400 --> 00:06:37,360
i want

00:06:34,000 --> 00:06:39,759
okay yeah i can use user data maybe i

00:06:37,360 --> 00:06:42,080
can use cloud init with it

00:06:39,759 --> 00:06:43,520
there's also ipixi some some systems

00:06:42,080 --> 00:06:46,080
allow you to

00:06:43,520 --> 00:06:46,800
skip the raw images and just provide an

00:06:46,080 --> 00:06:48,800
ipixi

00:06:46,800 --> 00:06:50,960
configuration and and then you you take

00:06:48,800 --> 00:06:54,479
the wheel from there

00:06:50,960 --> 00:06:57,840
so why user data

00:06:54,479 --> 00:07:00,840
and uh why do we need more than just a

00:06:57,840 --> 00:07:03,759
text field to deal with user data

00:07:00,840 --> 00:07:07,199
well one of the things about user data

00:07:03,759 --> 00:07:08,479
endpoints fields in the various cloud

00:07:07,199 --> 00:07:11,759
provider endpoints

00:07:08,479 --> 00:07:13,680
is that there are limitations on it so

00:07:11,759 --> 00:07:16,880
you might have a 65 character

00:07:13,680 --> 00:07:17,759
limit on your user data or whatever the

00:07:16,880 --> 00:07:19,680
size is

00:07:17,759 --> 00:07:21,919
there's still some size restriction out

00:07:19,680 --> 00:07:25,039
there or you might want to specify

00:07:21,919 --> 00:07:28,800
multiple files and

00:07:25,039 --> 00:07:32,080
if you were to supply this in your

00:07:28,800 --> 00:07:33,520
cross plane provisioned ec2 instance or

00:07:32,080 --> 00:07:35,199
equinix metal device

00:07:33,520 --> 00:07:37,360
instance you're going to have this user

00:07:35,199 --> 00:07:40,560
data field with this long blob of

00:07:37,360 --> 00:07:41,919
text that you're going to handcraft

00:07:40,560 --> 00:07:44,560
because you can because it's yaml

00:07:41,919 --> 00:07:47,599
because it's easy to get to

00:07:44,560 --> 00:07:50,319
and then maybe you're going to

00:07:47,599 --> 00:07:50,960
mime encode it by hand to add multiple

00:07:50,319 --> 00:07:52,479
files

00:07:50,960 --> 00:07:54,639
and maybe it got too long so you're

00:07:52,479 --> 00:07:58,160
going to gzip it by hand

00:07:54,639 --> 00:08:00,240
and then base64 encode that no right

00:07:58,160 --> 00:08:02,639
we're going to stop somewhere

00:08:00,240 --> 00:08:03,759
between here and there and we're going

00:08:02,639 --> 00:08:07,039
to benefit

00:08:03,759 --> 00:08:10,160
from there being a cross plane provider

00:08:07,039 --> 00:08:12,960
to do this work for us wait a second

00:08:10,160 --> 00:08:13,599
crossplane provider there's no provider

00:08:12,960 --> 00:08:15,080
here

00:08:13,599 --> 00:08:17,520
who there's you said there's no

00:08:15,080 --> 00:08:20,560
cloudynet.com i heard you

00:08:17,520 --> 00:08:23,680
and uh there's no remote api right so

00:08:20,560 --> 00:08:27,039
crossplane has crosstalk providers

00:08:23,680 --> 00:08:30,160
have this concept of credentials and

00:08:27,039 --> 00:08:32,560
and provider configuration and

00:08:30,160 --> 00:08:35,039
usually there's some sort of status when

00:08:32,560 --> 00:08:36,560
the resource is done

00:08:35,039 --> 00:08:39,120
you don't have any of those things with

00:08:36,560 --> 00:08:40,959
cloud in it right so

00:08:39,120 --> 00:08:42,479
why why are we going to make a provider

00:08:40,959 --> 00:08:45,440
at all

00:08:42,479 --> 00:08:47,360
why not this doesn't have to be a

00:08:45,440 --> 00:08:48,080
cross-plane provider though i hear you

00:08:47,360 --> 00:08:50,000
saying this

00:08:48,080 --> 00:08:52,480
and uh you're right you know there you

00:08:50,000 --> 00:08:55,600
could just make a custom controller

00:08:52,480 --> 00:08:57,680
that save rights to the um

00:08:55,600 --> 00:08:59,279
to the cross plain resource writes the

00:08:57,680 --> 00:09:02,240
user data that you want

00:08:59,279 --> 00:09:03,360
or um maybe it will do something similar

00:09:02,240 --> 00:09:05,440
to what we're going to do with this

00:09:03,360 --> 00:09:07,920
provider maybe it'll write out a config

00:09:05,440 --> 00:09:09,920
map then we can read in that config map

00:09:07,920 --> 00:09:11,920
so why bother using crossplane to create

00:09:09,920 --> 00:09:14,959
this custom controller

00:09:11,920 --> 00:09:17,680
and my answers are that

00:09:14,959 --> 00:09:19,519
crossplane has the an installer for

00:09:17,680 --> 00:09:21,279
installing various packages

00:09:19,519 --> 00:09:23,680
and when it installs those packages it

00:09:21,279 --> 00:09:25,440
takes care of their dependencies

00:09:23,680 --> 00:09:27,360
we could go in reverse here and say that

00:09:25,440 --> 00:09:30,080
if you're going to install the

00:09:27,360 --> 00:09:31,680
equinix metal provider then i expect you

00:09:30,080 --> 00:09:33,279
to have the cloud init provider

00:09:31,680 --> 00:09:34,880
installed too

00:09:33,279 --> 00:09:37,200
maybe because it's useful for

00:09:34,880 --> 00:09:37,600
compositions or my examples or just like

00:09:37,200 --> 00:09:40,800
a

00:09:37,600 --> 00:09:40,800
recommended package

00:09:41,600 --> 00:09:44,880
and one of the other things that that

00:09:42,640 --> 00:09:45,920
installer does is it sets up some roles

00:09:44,880 --> 00:09:50,000
that you can

00:09:45,920 --> 00:09:52,959
reuse and you can assign to give your

00:09:50,000 --> 00:09:54,800
application deployment teams and

00:09:52,959 --> 00:09:56,800
operations teams

00:09:54,800 --> 00:09:58,560
the correct roles that they will need to

00:09:56,800 --> 00:10:00,000
interact with your services so if you're

00:09:58,560 --> 00:10:02,079
interacting with

00:10:00,000 --> 00:10:03,920
their metal devices you're probably

00:10:02,079 --> 00:10:04,800
going to need access to these configmap

00:10:03,920 --> 00:10:08,160
resources

00:10:04,800 --> 00:10:09,440
or maybe some select ones maybe we're

00:10:08,160 --> 00:10:13,839
going to

00:10:09,440 --> 00:10:13,839
take these cross-plain resources and tie

00:10:14,000 --> 00:10:19,519
opa policy policy checks against the

00:10:18,399 --> 00:10:21,040
fields and make sure that you're only

00:10:19,519 --> 00:10:21,760
writing to config maps that you're

00:10:21,040 --> 00:10:24,160
allowed to

00:10:21,760 --> 00:10:26,640
write to and so there's a nice story

00:10:24,160 --> 00:10:29,519
there with cross playing and policy

00:10:26,640 --> 00:10:31,200
uh also why use a cross plane provider

00:10:29,519 --> 00:10:32,560
because the cross plane runtime just

00:10:31,200 --> 00:10:36,640
makes it convenient

00:10:32,560 --> 00:10:39,760
to do so we're already managing

00:10:36,640 --> 00:10:43,680
a or we're already authoring a provider

00:10:39,760 --> 00:10:45,920
for equinix metal so a provider

00:10:43,680 --> 00:10:46,880
using the provider syntax the provider

00:10:45,920 --> 00:10:50,079
at

00:10:46,880 --> 00:10:53,680
sdk the crosstalk cross plane runtime

00:10:50,079 --> 00:10:56,800
makes it a convenient way to write this

00:10:53,680 --> 00:10:59,360
cloud in it provider another reason

00:10:56,800 --> 00:11:00,800
is that crossplane providers give you

00:10:59,360 --> 00:11:03,920
composability

00:11:00,800 --> 00:11:04,800
now you could say well anything's

00:11:03,920 --> 00:11:06,240
composable but

00:11:04,800 --> 00:11:08,320
at least in the past i think it's still

00:11:06,240 --> 00:11:10,160
the case today there are limitations on

00:11:08,320 --> 00:11:11,360
what you can use in a composition and

00:11:10,160 --> 00:11:12,320
those things that you use in a

00:11:11,360 --> 00:11:15,920
composition

00:11:12,320 --> 00:11:19,760
have to be cross plane package managed

00:11:15,920 --> 00:11:22,800
resources so if we want to compose

00:11:19,760 --> 00:11:26,560
a combination of a device

00:11:22,800 --> 00:11:28,880
with a cloud in it resource

00:11:26,560 --> 00:11:31,760
they're going to have to both be um

00:11:28,880 --> 00:11:34,399
cross-plane managed resources

00:11:31,760 --> 00:11:35,920
and uh you know the the future is so far

00:11:34,399 --> 00:11:36,880
away that that may not be the case

00:11:35,920 --> 00:11:39,760
anymore

00:11:36,880 --> 00:11:40,640
i'll take the comments um so in the

00:11:39,760 --> 00:11:44,399
future

00:11:40,640 --> 00:11:47,040
uh we might also want to make these

00:11:44,399 --> 00:11:48,640
different providers uh more tied

00:11:47,040 --> 00:11:48,959
together and crossplane has a thing

00:11:48,640 --> 00:11:52,320
called

00:11:48,959 --> 00:11:54,079
referencers which allows you to grab one

00:11:52,320 --> 00:11:56,240
field from one resource and bring it

00:11:54,079 --> 00:11:57,839
into another resource

00:11:56,240 --> 00:12:01,440
so perhaps in the future we might be

00:11:57,839 --> 00:12:03,680
able to do that as a form of templating

00:12:01,440 --> 00:12:05,600
why do we need a crossplan provider we

00:12:03,680 --> 00:12:07,519
have xrd's which allow you to make these

00:12:05,600 --> 00:12:10,240
compositions that uh

00:12:07,519 --> 00:12:11,760
make it so that you don't need to make a

00:12:10,240 --> 00:12:13,519
controller you don't need to make a

00:12:11,760 --> 00:12:16,560
cross plane provider for every

00:12:13,519 --> 00:12:21,040
possible thing you could imagine just

00:12:16,560 --> 00:12:23,279
create a composition for it um well

00:12:21,040 --> 00:12:25,680
i would really like to see that be the

00:12:23,279 --> 00:12:27,680
option here and the way out

00:12:25,680 --> 00:12:29,360
i couldn't figure out how to make that

00:12:27,680 --> 00:12:32,560
work today i did find

00:12:29,360 --> 00:12:35,360
a i was referred to

00:12:32,560 --> 00:12:36,240
an open issue that deals with making

00:12:35,360 --> 00:12:39,279
available

00:12:36,240 --> 00:12:40,720
more functions that x that compositions

00:12:39,279 --> 00:12:42,560
could take advantage of

00:12:40,720 --> 00:12:44,079
the kind of functions that we would need

00:12:42,560 --> 00:12:47,279
to handle cloud in it

00:12:44,079 --> 00:12:49,360
would be first off reading

00:12:47,279 --> 00:12:50,320
config maps multiple config maps or

00:12:49,360 --> 00:12:53,440
secrets

00:12:50,320 --> 00:12:56,560
and then concatenating them all and then

00:12:53,440 --> 00:12:59,440
base64 encoding that data and

00:12:56,560 --> 00:13:01,279
gzip uh compressing it and then base64

00:12:59,440 --> 00:13:04,480
encoding that

00:13:01,279 --> 00:13:06,880
as part of a multi-part mime document

00:13:04,480 --> 00:13:09,040
so it's not a lot of complexity there

00:13:06,880 --> 00:13:12,399
these aren't complex functions

00:13:09,040 --> 00:13:15,760
um but we don't have a way to run these

00:13:12,399 --> 00:13:17,440
functions right now so we can't do it

00:13:15,760 --> 00:13:19,760
so what does the syntax for this look

00:13:17,440 --> 00:13:21,360
like well we've got our typical preamble

00:13:19,760 --> 00:13:23,360
of api version in kind

00:13:21,360 --> 00:13:24,399
we've got our metadata that i've omitted

00:13:23,360 --> 00:13:26,320
here with a

00:13:24,399 --> 00:13:27,839
name no namespace because this is a

00:13:26,320 --> 00:13:31,440
cluster scope resource as

00:13:27,839 --> 00:13:33,279
all providers are um

00:13:31,440 --> 00:13:35,360
so that means that when we're writing

00:13:33,279 --> 00:13:36,560
our spec here we're going to have to

00:13:35,360 --> 00:13:38,639
give we're gonna have to name a

00:13:36,560 --> 00:13:42,320
namespace uh

00:13:38,639 --> 00:13:43,120
for both the cloud init config map that

00:13:42,320 --> 00:13:45,360
we're writing out

00:13:43,120 --> 00:13:46,800
and any config maps that we're going to

00:13:45,360 --> 00:13:50,560
read in as the source

00:13:46,800 --> 00:13:52,959
values for our multi-part config map

00:13:50,560 --> 00:13:54,160
in here i only show the example of a

00:13:52,959 --> 00:13:57,199
plain text

00:13:54,160 --> 00:13:59,600
content but there's also a

00:13:57,199 --> 00:14:00,320
there's also a field to specify config

00:13:59,600 --> 00:14:03,040
maps

00:14:00,320 --> 00:14:04,959
and secrets uh baked into this provider

00:14:03,040 --> 00:14:08,160
and we'll take a look at that

00:14:04,959 --> 00:14:12,000
in a moment the moment has come

00:14:08,160 --> 00:14:15,600
this is uh my demo and we'll be running

00:14:12,000 --> 00:14:17,199
a kind cluster with cross crossplane

00:14:15,600 --> 00:14:20,399
already pre-installed

00:14:17,199 --> 00:14:22,800
we'll install the provider

00:14:20,399 --> 00:14:24,639
um i'm going to cheat a little bit i'm

00:14:22,800 --> 00:14:28,720
going to use make run which is

00:14:24,639 --> 00:14:31,600
available from the upbound build

00:14:28,720 --> 00:14:32,320
git sub module and that's just going to

00:14:31,600 --> 00:14:36,800
allow

00:14:32,320 --> 00:14:39,600
uh for a more rapid development cycle

00:14:36,800 --> 00:14:41,440
uh and in the case of this demo it's

00:14:39,600 --> 00:14:42,880
going to allow me to take a much rougher

00:14:41,440 --> 00:14:45,360
version of this code

00:14:42,880 --> 00:14:48,800
than i would like to deploy on the world

00:14:45,360 --> 00:14:48,800
and demonstrate with that

00:14:50,399 --> 00:14:57,839
all right so let's take a look

00:14:54,000 --> 00:15:00,880
this is the project and in here we see

00:14:57,839 --> 00:15:03,120
an examples directory and here i have

00:15:00,880 --> 00:15:05,920
some yamo representing the resources

00:15:03,120 --> 00:15:09,600
that we'll need to test this out

00:15:05,920 --> 00:15:09,600
including a

00:15:10,079 --> 00:15:14,240
simple config map that will be pulled

00:15:13,040 --> 00:15:17,839
into the

00:15:14,240 --> 00:15:20,880
cloudinet resource cloud knit resource

00:15:17,839 --> 00:15:24,240
has a few more lines that we can cat

00:15:20,880 --> 00:15:28,160
so there is the definition

00:15:24,240 --> 00:15:30,399
of what config map we will write out to

00:15:28,160 --> 00:15:31,920
and uh can i just call that cloudnet we

00:15:30,399 --> 00:15:34,240
have to give it a namespace again

00:15:31,920 --> 00:15:36,800
because this is not a namespace resource

00:15:34,240 --> 00:15:38,160
being a provider resource a managed

00:15:36,800 --> 00:15:41,839
provider resource

00:15:38,160 --> 00:15:41,839
they are cluster scope today

00:15:42,000 --> 00:15:46,079
so our four provider field again this is

00:15:44,240 --> 00:15:48,000
a field that doesn't really make sense

00:15:46,079 --> 00:15:52,480
in this provider so maybe this

00:15:48,000 --> 00:15:54,639
level will go away in the future

00:15:52,480 --> 00:15:56,639
but the arguments that are available

00:15:54,639 --> 00:15:59,040
here are a boundary we're just going to

00:15:56,639 --> 00:16:02,079
go with the default of mind boundary

00:15:59,040 --> 00:16:03,680
um and the only reason you would change

00:16:02,079 --> 00:16:05,920
that is if your text

00:16:03,680 --> 00:16:07,360
contained the word mind boundary in it

00:16:05,920 --> 00:16:09,360
somewhere then you would have to set a

00:16:07,360 --> 00:16:11,759
unique boundary

00:16:09,360 --> 00:16:13,279
part so there's multiple parts this is

00:16:11,759 --> 00:16:15,519
actually out of date this should be

00:16:13,279 --> 00:16:19,279
parts

00:16:15,519 --> 00:16:21,360
there's a config map key ref this is the

00:16:19,279 --> 00:16:23,680
foo that we're going to be reading in

00:16:21,360 --> 00:16:26,320
from the default name space there's a

00:16:23,680 --> 00:16:27,199
a key in there called foo and it's

00:16:26,320 --> 00:16:30,480
optional

00:16:27,199 --> 00:16:32,800
meaning that if that config map does not

00:16:30,480 --> 00:16:37,440
exist that's not going to stop

00:16:32,800 --> 00:16:40,639
this resource from syncing

00:16:37,440 --> 00:16:42,000
and we're also going to put in a simple

00:16:40,639 --> 00:16:43,839
hello world script

00:16:42,000 --> 00:16:46,399
and then we're also going to put in a

00:16:43,839 --> 00:16:48,160
cloud config configuration

00:16:46,399 --> 00:16:50,639
that says that the users on the

00:16:48,160 --> 00:16:53,839
provisioned machine should be

00:16:50,639 --> 00:16:56,079
me and i should bring all of my ssh keys

00:16:53,839 --> 00:16:58,480
that are public on github

00:16:56,079 --> 00:16:58,480
with me

00:16:59,759 --> 00:17:03,199
okay and then the other file that's in

00:17:02,079 --> 00:17:06,880
here is a

00:17:03,199 --> 00:17:08,240
provider config interesting thing about

00:17:06,880 --> 00:17:10,079
the provider config

00:17:08,240 --> 00:17:11,919
is that it won't actually load right now

00:17:10,079 --> 00:17:13,520
there's no spec because there's no spec

00:17:11,919 --> 00:17:15,199
to provide

00:17:13,520 --> 00:17:16,720
and we don't actually need the provider

00:17:15,199 --> 00:17:19,439
config because

00:17:16,720 --> 00:17:20,880
this config this cloud init config

00:17:19,439 --> 00:17:23,199
resource just doesn't

00:17:20,880 --> 00:17:24,480
load a provider config it doesn't have a

00:17:23,199 --> 00:17:27,199
provider reference

00:17:24,480 --> 00:17:27,199
it doesn't need one

00:17:29,200 --> 00:17:34,400
okay on a previous view i showed

00:17:32,720 --> 00:17:36,400
this config map incorrectly there's

00:17:34,400 --> 00:17:40,160
supposed to be some spaces here

00:17:36,400 --> 00:17:41,200
i've added those spaces and now i can

00:17:40,160 --> 00:17:44,240
show that i

00:17:41,200 --> 00:17:46,640
do not have a config or config map

00:17:44,240 --> 00:17:48,720
resource again config is the cloud init

00:17:46,640 --> 00:17:50,160
config resource or custom resource that

00:17:48,720 --> 00:17:53,360
we're provisioning

00:17:50,160 --> 00:17:56,720
so now we're going to make run

00:17:53,360 --> 00:17:59,679
and in this examples directory we are

00:17:56,720 --> 00:18:03,679
going to first insert this foo resource

00:17:59,679 --> 00:18:03,679
which is just the one line shell script

00:18:04,720 --> 00:18:10,160
and then we are going to apply the

00:18:07,919 --> 00:18:11,760
cloudinet resource which combines the

00:18:10,160 --> 00:18:15,200
food resource with

00:18:11,760 --> 00:18:19,440
two other string

00:18:15,200 --> 00:18:22,640
cloud config parts

00:18:19,440 --> 00:18:23,520
cloud init parts and now that's

00:18:22,640 --> 00:18:26,559
reconciled

00:18:23,520 --> 00:18:29,679
so let's show what has happened here

00:18:26,559 --> 00:18:31,440
let's do another get and this time we

00:18:29,679 --> 00:18:34,799
can see

00:18:31,440 --> 00:18:36,559
that we have both the uh the cloud

00:18:34,799 --> 00:18:38,000
resource we've created it created a

00:18:36,559 --> 00:18:41,200
config map called

00:18:38,000 --> 00:18:44,080
cloud init we have our foo config map

00:18:41,200 --> 00:18:45,120
and we have our coordinate config map so

00:18:44,080 --> 00:18:48,320
let's take a look

00:18:45,120 --> 00:18:53,360
at that cloud config init

00:18:48,320 --> 00:18:53,360
map cloud and knit config map

00:18:53,679 --> 00:18:57,760
and here we see that it has all of our

00:18:56,559 --> 00:19:01,200
multi-part mime

00:18:57,760 --> 00:19:04,320
contents it has the empty shell script

00:19:01,200 --> 00:19:05,280
here it has the hello world shell script

00:19:04,320 --> 00:19:09,120
here

00:19:05,280 --> 00:19:12,240
and it has the cloud config which is

00:19:09,120 --> 00:19:15,679
all of this business here that gets my

00:19:12,240 --> 00:19:16,880
ssh keys in place all right so now we

00:19:15,679 --> 00:19:19,440
have a

00:19:16,880 --> 00:19:21,039
config map with a cloud init key ready

00:19:19,440 --> 00:19:24,480
to be used by

00:19:21,039 --> 00:19:26,960
any cross plane managed resource

00:19:24,480 --> 00:19:27,840
that has say a user data field that

00:19:26,960 --> 00:19:31,200
could benefit

00:19:27,840 --> 00:19:31,919
from this so now that we've seen the

00:19:31,200 --> 00:19:34,720
demo

00:19:31,919 --> 00:19:35,919
um i'm sure there are some alternatives

00:19:34,720 --> 00:19:37,440
that you're considering like

00:19:35,919 --> 00:19:39,280
why did you bother with that i'm sure

00:19:37,440 --> 00:19:42,480
there's better ways to do it

00:19:39,280 --> 00:19:44,880
and yeah there probably are so

00:19:42,480 --> 00:19:46,240
what could we have done we could have

00:19:44,880 --> 00:19:50,240
maybe gone the other way and

00:19:46,240 --> 00:19:52,720
told our told our managed resource the

00:19:50,240 --> 00:19:54,880
the equinix metal device how to read

00:19:52,720 --> 00:19:56,960
multiple config maps as user data

00:19:54,880 --> 00:19:59,440
we could have told it that if it's going

00:19:56,960 --> 00:20:02,880
to do that then it should also

00:19:59,440 --> 00:20:06,159
mime encoded base64 encoded and that

00:20:02,880 --> 00:20:07,760
is that's probably fair now this is

00:20:06,159 --> 00:20:09,120
something that i think user data is

00:20:07,760 --> 00:20:10,320
something that's reusable and other

00:20:09,120 --> 00:20:11,360
cloud providers are going to be able to

00:20:10,320 --> 00:20:13,200
benefit from it

00:20:11,360 --> 00:20:15,919
so that's one reason for making this an

00:20:13,200 --> 00:20:19,360
independent provider

00:20:15,919 --> 00:20:22,000
another reason for doing so is uh

00:20:19,360 --> 00:20:24,159
do we really want to bake all of these

00:20:22,000 --> 00:20:26,000
things into each provider

00:20:24,159 --> 00:20:28,159
no maybe we could bake all of these

00:20:26,000 --> 00:20:29,440
things bake the appending the base64

00:20:28,159 --> 00:20:31,120
encoding the g-zipping

00:20:29,440 --> 00:20:32,480
maybe we could make that into

00:20:31,120 --> 00:20:34,880
cross-plane run time

00:20:32,480 --> 00:20:36,080
as a new field type that's understood

00:20:34,880 --> 00:20:38,159
like it knows how

00:20:36,080 --> 00:20:39,679
to um take secrets as parameters there's

00:20:38,159 --> 00:20:42,720
some type definitions for that

00:20:39,679 --> 00:20:44,000
so maybe it knows how to take um a list

00:20:42,720 --> 00:20:46,880
of config maps and do this

00:20:44,000 --> 00:20:48,559
thing that a handful of providers could

00:20:46,880 --> 00:20:52,480
benefit from

00:20:48,559 --> 00:20:52,960
maybe maybe not another way that this

00:20:52,480 --> 00:20:55,679
could be

00:20:52,960 --> 00:20:57,280
implemented is maybe with just a a

00:20:55,679 --> 00:21:00,480
selector field so we'd say

00:20:57,280 --> 00:21:03,039
config map selector and provide some

00:21:00,480 --> 00:21:04,480
labels to look for to search uh

00:21:03,039 --> 00:21:06,320
available config maps for

00:21:04,480 --> 00:21:07,520
we'll just take all the config maps that

00:21:06,320 --> 00:21:10,640
match that selector

00:21:07,520 --> 00:21:13,280
and we will do the base 64 encoding

00:21:10,640 --> 00:21:15,039
we'll do the mine multiparting we'll do

00:21:13,280 --> 00:21:17,440
the gzipping

00:21:15,039 --> 00:21:18,559
all at so there are other ways that we

00:21:17,440 --> 00:21:22,080
could do this

00:21:18,559 --> 00:21:23,840
um and in the future

00:21:22,080 --> 00:21:25,600
you know another reason why i think that

00:21:23,840 --> 00:21:26,159
this is better to have as an independent

00:21:25,600 --> 00:21:28,080
provider

00:21:26,159 --> 00:21:30,720
so in the future i think there's a world

00:21:28,080 --> 00:21:33,280
where we can tie templating into this

00:21:30,720 --> 00:21:34,400
where we take um fields from the various

00:21:33,280 --> 00:21:36,320
resources

00:21:34,400 --> 00:21:38,400
and we somehow get this cloud in it

00:21:36,320 --> 00:21:41,120
provider to take those variables

00:21:38,400 --> 00:21:41,440
and apply them to the config maps that

00:21:41,120 --> 00:21:43,600
it's

00:21:41,440 --> 00:21:45,120
going to concatenate and ultimately

00:21:43,600 --> 00:21:47,440
render

00:21:45,120 --> 00:21:49,200
now this is an experience that's similar

00:21:47,440 --> 00:21:52,880
to what you may be familiar

00:21:49,200 --> 00:21:55,520
with if you've used terraforms

00:21:52,880 --> 00:21:56,480
providers for cloudnit or terraforms

00:21:55,520 --> 00:22:00,320
providers

00:21:56,480 --> 00:22:02,640
for templates so they have an example

00:22:00,320 --> 00:22:03,679
uh right on one of these pages where

00:22:02,640 --> 00:22:06,960
they show

00:22:03,679 --> 00:22:08,240
you having a template file applying some

00:22:06,960 --> 00:22:11,280
variables to it

00:22:08,240 --> 00:22:12,080
combining it all into one cloud init

00:22:11,280 --> 00:22:14,480
data

00:22:12,080 --> 00:22:15,200
that the terraform provider knows how to

00:22:14,480 --> 00:22:16,559
to um

00:22:15,200 --> 00:22:18,799
how to render it knows how to take

00:22:16,559 --> 00:22:21,600
multiple parts it knows how to

00:22:18,799 --> 00:22:22,480
take the options of base64 encoding mime

00:22:21,600 --> 00:22:25,679
encoding

00:22:22,480 --> 00:22:26,799
uh taking even a mime boundary field so

00:22:25,679 --> 00:22:29,120
that

00:22:26,799 --> 00:22:31,440
in case you need a custom one for some

00:22:29,120 --> 00:22:31,440
reason

00:22:31,520 --> 00:22:35,520
and so terraform has all of those things

00:22:34,000 --> 00:22:38,640
already that was one of the

00:22:35,520 --> 00:22:39,120
examples that we used in defining this

00:22:38,640 --> 00:22:42,159
this

00:22:39,120 --> 00:22:45,039
concept of a provider well

00:22:42,159 --> 00:22:45,760
crossplane knows how to ingest terraform

00:22:45,039 --> 00:22:48,240
providers

00:22:45,760 --> 00:22:49,120
so why didn't we just make a cross plane

00:22:48,240 --> 00:22:52,240
provider

00:22:49,120 --> 00:22:53,600
that ingests this terraform provider and

00:22:52,240 --> 00:22:55,280
get this for free

00:22:53,600 --> 00:22:57,120
well the reason why we haven't done that

00:22:55,280 --> 00:22:58,880
is because um

00:22:57,120 --> 00:23:00,320
well i think it might be a little

00:22:58,880 --> 00:23:03,520
complicated it might be

00:23:00,320 --> 00:23:04,559
a bit bulkier uh to run terraform in a

00:23:03,520 --> 00:23:08,240
container

00:23:04,559 --> 00:23:09,760
uh where now we're just running a

00:23:08,240 --> 00:23:12,159
little bit of string processing in a

00:23:09,760 --> 00:23:14,320
container

00:23:12,159 --> 00:23:16,000
but the other thing is that the

00:23:14,320 --> 00:23:17,520
terraform

00:23:16,000 --> 00:23:20,320
providers that are supported now don't

00:23:17,520 --> 00:23:22,559
believe that they support data sources

00:23:20,320 --> 00:23:23,440
and the cloud init provider that's out

00:23:22,559 --> 00:23:26,880
there

00:23:23,440 --> 00:23:26,880
works as a data source

00:23:28,640 --> 00:23:33,200
one more way that we could have

00:23:30,320 --> 00:23:35,200
approached this is to

00:23:33,200 --> 00:23:36,480
use the composition to construct our

00:23:35,200 --> 00:23:39,679
user data

00:23:36,480 --> 00:23:40,240
and that that's an area that might be

00:23:39,679 --> 00:23:43,360
possible

00:23:40,240 --> 00:23:44,799
now might be possible soon

00:23:43,360 --> 00:23:46,799
but effectively we would need a

00:23:44,799 --> 00:23:49,360
composition that knows how to

00:23:46,799 --> 00:23:50,640
read in a config map that may or may not

00:23:49,360 --> 00:23:52,400
exist yet

00:23:50,640 --> 00:23:54,159
take the data from that config map and

00:23:52,400 --> 00:23:57,279
drop it into the user data field

00:23:54,159 --> 00:24:00,400
of some other managed resource

00:23:57,279 --> 00:24:03,120
we would bundle those two things up as

00:24:00,400 --> 00:24:03,440
a single composition and then we might

00:24:03,120 --> 00:24:06,960
have

00:24:03,440 --> 00:24:09,919
other compositions that we would use to

00:24:06,960 --> 00:24:10,880
say take fields from that composition

00:24:09,919 --> 00:24:12,400
and

00:24:10,880 --> 00:24:14,240
use those fields put them in our config

00:24:12,400 --> 00:24:17,360
map that we're going to use to provision

00:24:14,240 --> 00:24:18,320
our device so yeah there are

00:24:17,360 --> 00:24:20,480
alternatives

00:24:18,320 --> 00:24:21,520
i wasn't ready to hop into any of those

00:24:20,480 --> 00:24:23,760
and i

00:24:21,520 --> 00:24:24,640
don't know how far i would have gotten

00:24:23,760 --> 00:24:26,799
with those

00:24:24,640 --> 00:24:27,760
uh writing this provider other than

00:24:26,799 --> 00:24:31,039
getting stuck

00:24:27,760 --> 00:24:32,159
on a few simple things perhaps in part

00:24:31,039 --> 00:24:34,080
because i

00:24:32,159 --> 00:24:36,000
tried to copy an existing provider and

00:24:34,080 --> 00:24:38,159
just modify it to suit my purposes

00:24:36,000 --> 00:24:39,679
instead of starting from scratch

00:24:38,159 --> 00:24:41,600
but in the end it was pretty quick to

00:24:39,679 --> 00:24:43,200
turn this around

00:24:41,600 --> 00:24:44,799
so i've mentioned uh that there were

00:24:43,200 --> 00:24:47,520
some influences going into this that

00:24:44,799 --> 00:24:49,200
were the terraform providers

00:24:47,520 --> 00:24:50,960
it's interesting to me that the

00:24:49,200 --> 00:24:54,159
terraform cloud init

00:24:50,960 --> 00:24:57,679
provider it

00:24:54,159 --> 00:25:01,039
has been deprecated in favor of the

00:24:57,679 --> 00:25:04,480
cloud init config data source and the

00:25:01,039 --> 00:25:06,559
template file provider is seemingly

00:25:04,480 --> 00:25:08,720
deprecated in favor of a template file

00:25:06,559 --> 00:25:11,520
function

00:25:08,720 --> 00:25:14,480
which is an hcl level function so it

00:25:11,520 --> 00:25:17,679
would be interesting to see

00:25:14,480 --> 00:25:19,679
crossplane develop a similar function to

00:25:17,679 --> 00:25:21,840
serve a similar function

00:25:19,679 --> 00:25:26,159
since we don't have paths to load in

00:25:21,840 --> 00:25:29,360
well i suppose we do have pads you can

00:25:26,159 --> 00:25:30,320
you have paths that are volume mounts on

00:25:29,360 --> 00:25:32,159
pods

00:25:30,320 --> 00:25:34,559
but we're not dealing with that with

00:25:32,159 --> 00:25:37,600
cross plane we are dealing with various

00:25:34,559 --> 00:25:38,000
crd cr instances there there's no pod

00:25:37,600 --> 00:25:40,880
here

00:25:38,000 --> 00:25:42,880
to for a path to be relevant so the kind

00:25:40,880 --> 00:25:44,720
of path thing that is available to us is

00:25:42,880 --> 00:25:46,400
config maps and secrets

00:25:44,720 --> 00:25:47,679
and they live in different name spaces

00:25:46,400 --> 00:25:49,120
and they have different names and they

00:25:47,679 --> 00:25:53,440
have different keys

00:25:49,120 --> 00:25:56,559
um so perhaps some way that cross plains

00:25:53,440 --> 00:25:59,679
function library or

00:25:56,559 --> 00:26:04,080
the composition library gives you

00:25:59,679 --> 00:26:07,200
access to managing mangling reading

00:26:04,080 --> 00:26:08,480
config maps and secrets taking those

00:26:07,200 --> 00:26:11,360
variables

00:26:08,480 --> 00:26:12,400
and applying additional functions on

00:26:11,360 --> 00:26:14,960
them

00:26:12,400 --> 00:26:17,600
and then putting them back somewhere so

00:26:14,960 --> 00:26:19,440
read them from somewhere

00:26:17,600 --> 00:26:21,919
hang on to all those variables use those

00:26:19,440 --> 00:26:23,760
variables to modify other variables with

00:26:21,919 --> 00:26:25,760
functions that are available and

00:26:23,760 --> 00:26:29,440
ultimately deposit that into

00:26:25,760 --> 00:26:31,279
a resource a config map or secret

00:26:29,440 --> 00:26:34,400
one of the other inspirations for this

00:26:31,279 --> 00:26:37,200
was the helm provider for crossplay

00:26:34,400 --> 00:26:38,640
there's some similarities in that both

00:26:37,200 --> 00:26:40,320
of them uh

00:26:38,640 --> 00:26:42,799
work within within the scope of a

00:26:40,320 --> 00:26:42,799
cluster

00:26:42,960 --> 00:26:46,240
there might be some blurriness here i

00:26:44,400 --> 00:26:48,799
think that the helm provider has the

00:26:46,240 --> 00:26:49,919
capability of uh connecting to a remote

00:26:48,799 --> 00:26:52,000
cluster

00:26:49,919 --> 00:26:53,760
um but a lot of the functions that it

00:26:52,000 --> 00:26:57,679
had uh made available to

00:26:53,760 --> 00:26:58,240
it really suited um what i was trying to

00:26:57,679 --> 00:27:01,120
do

00:26:58,240 --> 00:27:03,440
uh there were functions in there to read

00:27:01,120 --> 00:27:05,200
in config map and secrets

00:27:03,440 --> 00:27:07,120
and that's something that i needed to do

00:27:05,200 --> 00:27:10,240
here so

00:27:07,120 --> 00:27:12,799
i took a lot of inspiration from that

00:27:10,240 --> 00:27:12,799
provider

00:27:13,679 --> 00:27:17,760
one of the big differences though is

00:27:15,279 --> 00:27:19,679
that again there's no api this is this

00:27:17,760 --> 00:27:22,720
cloud provider

00:27:19,679 --> 00:27:25,679
provider has

00:27:22,720 --> 00:27:26,880
there's no api calls i'm considering

00:27:25,679 --> 00:27:29,840
making some

00:27:26,880 --> 00:27:30,480
some pretty drastic i think compared to

00:27:29,840 --> 00:27:33,039
the uh

00:27:30,480 --> 00:27:34,799
the normal provider changes to this

00:27:33,039 --> 00:27:36,720
ripping out the provider config

00:27:34,799 --> 00:27:37,840
because we don't need to configure a

00:27:36,720 --> 00:27:41,840
provider

00:27:37,840 --> 00:27:44,399
ripping out the at provider and the four

00:27:41,840 --> 00:27:45,440
provider components of the spec and

00:27:44,399 --> 00:27:48,720
status

00:27:45,440 --> 00:27:51,039
because again we don't need that and so

00:27:48,720 --> 00:27:52,320
it raises the question like why is this

00:27:51,039 --> 00:27:56,480
a provider at all

00:27:52,320 --> 00:28:00,080
or what are providers really built for

00:27:56,480 --> 00:28:03,360
earlier in in the life cycle of uh

00:28:00,080 --> 00:28:04,640
cross plane there were some uh thoughts

00:28:03,360 --> 00:28:07,520
about having

00:28:04,640 --> 00:28:08,960
providers that didn't interact with uh

00:28:07,520 --> 00:28:11,120
remote apis

00:28:08,960 --> 00:28:12,080
they didn't have credentials they didn't

00:28:11,120 --> 00:28:16,240
have

00:28:12,080 --> 00:28:19,840
um this ad provider for provider

00:28:16,240 --> 00:28:22,080
at provider and for provider uh fields

00:28:19,840 --> 00:28:23,120
uh and you can tell that that was part

00:28:22,080 --> 00:28:25,279
of the thinking

00:28:23,120 --> 00:28:27,840
because of the way that the managed

00:28:25,279 --> 00:28:31,760
resources in crossplane runtime

00:28:27,840 --> 00:28:34,880
are named they're named after external

00:28:31,760 --> 00:28:37,279
provider external this

00:28:34,880 --> 00:28:37,919
there's no external client needed here

00:28:37,279 --> 00:28:40,640
so

00:28:37,919 --> 00:28:41,840
have we lost sight of what it looks like

00:28:40,640 --> 00:28:44,880
to make a provider

00:28:41,840 --> 00:28:47,039
that doesn't interact with an api and

00:28:44,880 --> 00:28:50,480
how can we improve that experience

00:28:47,039 --> 00:28:52,640
do we want to improve that experience

00:28:50,480 --> 00:28:54,080
taking terraform for an example

00:28:52,640 --> 00:28:57,279
terraform does have

00:28:54,080 --> 00:28:59,360
a handful of these providers that just

00:28:57,279 --> 00:29:02,640
operate without an api

00:28:59,360 --> 00:29:03,120
and perhaps uh you know we need more of

00:29:02,640 --> 00:29:05,520
those

00:29:03,120 --> 00:29:06,720
in cross play then again we have

00:29:05,520 --> 00:29:09,840
compositions that

00:29:06,720 --> 00:29:11,760
are allowing us to

00:29:09,840 --> 00:29:12,880
skirt some of those responsibilities as

00:29:11,760 --> 00:29:14,320
long as we can

00:29:12,880 --> 00:29:16,159
take advantage of functions and

00:29:14,320 --> 00:29:20,799
compositions

00:29:16,159 --> 00:29:26,000
we might be able to avoid the need for

00:29:20,799 --> 00:29:28,480
api less providers in cross plane

00:29:26,000 --> 00:29:29,840
i understand how janky this must appear

00:29:28,480 --> 00:29:32,320
to uh many of you

00:29:29,840 --> 00:29:33,679
and so i'm willing to accept questions

00:29:32,320 --> 00:29:37,039
and negative feedback

00:29:33,679 --> 00:29:40,159
on the github provider uh

00:29:37,039 --> 00:29:41,919
repo display slash in it

00:29:40,159 --> 00:29:43,919
at the time of recording this in the

00:29:41,919 --> 00:29:45,520
future who knows where it might live

00:29:43,919 --> 00:29:47,200
uh maybe it'll live in cross plain

00:29:45,520 --> 00:29:49,520
contribs

00:29:47,200 --> 00:29:50,640
and uh if you want to get a hold of me

00:29:49,520 --> 00:29:54,000
outside of now

00:29:50,640 --> 00:29:56,399
the twitter is uh one good way and

00:29:54,000 --> 00:29:58,080
you can find my work on github at

00:29:56,399 --> 00:30:01,120
display

00:29:58,080 --> 00:30:03,600
thanks for listening to my rambling and

00:30:01,120 --> 00:30:04,880
i look forward to your comments

00:30:03,600 --> 00:30:06,960
all my slides are available in the

00:30:04,880 --> 00:30:10,399
github project take a look there

00:30:06,960 --> 00:30:12,559
issues prs let's

00:30:10,399 --> 00:30:13,679
turn this into something useful and

00:30:12,559 --> 00:30:15,440
might actually mean

00:30:13,679 --> 00:30:17,720
closing this project down in order to

00:30:15,440 --> 00:30:20,720
make something useful thanks

00:30:17,720 --> 00:30:20,720

YouTube URL: https://www.youtube.com/watch?v=41iesQXC_6w


