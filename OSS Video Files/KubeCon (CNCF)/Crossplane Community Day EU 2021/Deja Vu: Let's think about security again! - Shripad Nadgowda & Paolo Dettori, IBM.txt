Title: Deja Vu: Let's think about security again! - Shripad Nadgowda & Paolo Dettori, IBM
Publication date: 2021-05-04
Playlist: Crossplane Community Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Deja Vu: Let's think about security again! - Shripad Nadgowda & Paolo Dettori, IBM

While Crossplane is emerging as the new CNCF project for provisioning and managing cloud infrastructure directly from Kubernetes, according to the National Security Agency (NSA), misconfiguration is still the #1 cloud vulnerability. So as we move the control plane for managing infrastructure to Kubernetes through Crossplane, we need to revisit and re-evaluate security and compliance implications.   In this talk, we will review on-going security transformations for cloud-native solutions  in the form of DevSecOps, Zero Trust and discuss their potential applicability to Crossplane. At the same time, it is equally critical to identify early if there any any gaps, need for new tools and techniques for developers and security experts and call for common best practices or standards across users and providers.
Captions: 
	00:00:00,000 --> 00:00:04,160
hello everyone we are really excited to

00:00:02,720 --> 00:00:06,640
be part of the proceedings

00:00:04,160 --> 00:00:08,639
and welcome to our session deja vu let's

00:00:06,640 --> 00:00:10,960
think about security again

00:00:08,639 --> 00:00:13,759
my name is sripad naragoda i'm a senior

00:00:10,960 --> 00:00:16,320
software engineer at ibm research

00:00:13,759 --> 00:00:18,720
my current research focus is on driving

00:00:16,320 --> 00:00:20,560
the innovations around devsecops

00:00:18,720 --> 00:00:22,720
i'm the chief architect of code risk

00:00:20,560 --> 00:00:25,119
analyzer the devsic of solution we

00:00:22,720 --> 00:00:27,279
delivered to ibm cloud last year

00:00:25,119 --> 00:00:29,439
and i'm very happy to have joined with

00:00:27,279 --> 00:00:31,920
paolo

00:00:29,439 --> 00:00:33,440
hi my name is paolo de tori i'm a senior

00:00:31,920 --> 00:00:36,480
technical staff member at

00:00:33,440 --> 00:00:38,480
ibm research in jordanites new york

00:00:36,480 --> 00:00:40,800
my current research interest is in cloud

00:00:38,480 --> 00:00:42,480
technology containers and containers

00:00:40,800 --> 00:00:44,160
orchestration

00:00:42,480 --> 00:00:45,840
i've been working for the past few years

00:00:44,160 --> 00:00:47,360
on several projects related to

00:00:45,840 --> 00:00:50,399
kubernetes technologies

00:00:47,360 --> 00:00:53,760
such as the iks ibm

00:00:50,399 --> 00:00:55,120
kubernetes service and the ibm mcm

00:00:53,760 --> 00:00:57,920
debian multi-cloud manager for

00:00:55,120 --> 00:00:59,199
kubernetes in the past few months i've

00:00:57,920 --> 00:01:00,000
been working with the crossplane

00:00:59,199 --> 00:01:02,000
community

00:01:00,000 --> 00:01:06,000
and currently a maintainer for the

00:01:02,000 --> 00:01:06,000
crossplane provider for ibm cloud

00:01:06,400 --> 00:01:11,439
thanks paolo so we are

00:01:09,600 --> 00:01:13,600
we are seeing a lot of momentum lot of

00:01:11,439 --> 00:01:15,680
interest across community and across

00:01:13,600 --> 00:01:17,119
industry in embracing this cross plane

00:01:15,680 --> 00:01:18,080
right so we believe it's time for an

00:01:17,119 --> 00:01:20,400
intervention right

00:01:18,080 --> 00:01:22,080
we need to take a step back we need to

00:01:20,400 --> 00:01:23,520
see what are the security implications

00:01:22,080 --> 00:01:27,040
of this

00:01:23,520 --> 00:01:28,640
so if we see we we have seen that

00:01:27,040 --> 00:01:30,560
misconfiguration is still a number one

00:01:28,640 --> 00:01:32,159
cloud vulnerability according to the

00:01:30,560 --> 00:01:34,240
national security agency

00:01:32,159 --> 00:01:35,920
and there is a high cost associated with

00:01:34,240 --> 00:01:38,240
such misconfigurations

00:01:35,920 --> 00:01:39,520
and it is growing right we listed the

00:01:38,240 --> 00:01:42,880
survey which shows that

00:01:39,520 --> 00:01:44,880
the cost can grow in trillion dollars

00:01:42,880 --> 00:01:47,360
more recently gartner has published a

00:01:44,880 --> 00:01:50,479
report where they are estimating but

00:01:47,360 --> 00:01:51,360
that by 2025 99 of the cloud security

00:01:50,479 --> 00:01:53,200
failures

00:01:51,360 --> 00:01:54,799
are going to be responsibility of

00:01:53,200 --> 00:01:56,079
customers rather than the service

00:01:54,799 --> 00:01:58,159
provider

00:01:56,079 --> 00:01:59,920
we'll put these numbers in perspective

00:01:58,159 --> 00:02:00,880
when we uh discuss the role of

00:01:59,920 --> 00:02:03,040
developers and

00:02:00,880 --> 00:02:04,880
importance of dev secours in the cross

00:02:03,040 --> 00:02:07,600
plane

00:02:04,880 --> 00:02:08,319
now let's revisit the the security

00:02:07,600 --> 00:02:09,840
landscape

00:02:08,319 --> 00:02:11,360
from the vantage point of four different

00:02:09,840 --> 00:02:14,400
actors now first

00:02:11,360 --> 00:02:15,840
we have a cloud provider the cloud

00:02:14,400 --> 00:02:18,800
provider they are focused on

00:02:15,840 --> 00:02:21,280
uh improving the experience for the

00:02:18,800 --> 00:02:24,800
cloud users right there is a tremendous

00:02:21,280 --> 00:02:25,599
momentum in onboarding new services on

00:02:24,800 --> 00:02:29,040
the cloud

00:02:25,599 --> 00:02:31,840
across aws azure ibm there are more than

00:02:29,040 --> 00:02:34,959
150 products and services

00:02:31,840 --> 00:02:36,640
we looked at some of the config

00:02:34,959 --> 00:02:38,560
this service configuration exposed to

00:02:36,640 --> 00:02:40,560
the user based on their respective data

00:02:38,560 --> 00:02:43,200
from module inputs and variables

00:02:40,560 --> 00:02:44,640
and these input parameters input the

00:02:43,200 --> 00:02:47,760
configuration parameters

00:02:44,640 --> 00:02:48,640
they can grow and in basically 2030s or

00:02:47,760 --> 00:02:52,480
even 60s

00:02:48,640 --> 00:02:54,400
right and this is very easy for users or

00:02:52,480 --> 00:02:56,879
developers to make mistake

00:02:54,400 --> 00:02:58,640
when you have so many uh inputs to care

00:02:56,879 --> 00:03:00,959
about

00:02:58,640 --> 00:03:02,239
again there are different modalities the

00:03:00,959 --> 00:03:04,080
cloud provider

00:03:02,239 --> 00:03:05,360
enables for accessing and changing

00:03:04,080 --> 00:03:08,959
configurations

00:03:05,360 --> 00:03:10,640
that includes user interface cli apis

00:03:08,959 --> 00:03:12,560
and some programming construct build on

00:03:10,640 --> 00:03:15,120
top like terraform and cross play

00:03:12,560 --> 00:03:16,000
right so it adds a new layer of

00:03:15,120 --> 00:03:18,000
complexity

00:03:16,000 --> 00:03:19,599
because now we need to secure these

00:03:18,000 --> 00:03:21,920
additional layers and make sure that

00:03:19,599 --> 00:03:24,159
they are secure

00:03:21,920 --> 00:03:25,680
now let's uh think about the security

00:03:24,159 --> 00:03:28,159
director right

00:03:25,680 --> 00:03:29,760
so as a security director he needs a

00:03:28,159 --> 00:03:31,440
visibility and awareness

00:03:29,760 --> 00:03:33,200
across the security standards he need to

00:03:31,440 --> 00:03:35,760
evaluate the portion of his cloud

00:03:33,200 --> 00:03:36,959
infrastructures his cloud workloads

00:03:35,760 --> 00:03:40,000
and now there are some industry

00:03:36,959 --> 00:03:43,120
standards like nist kubernetes cis

00:03:40,000 --> 00:03:45,040
docker cis they cover uh

00:03:43,120 --> 00:03:47,120
various security controls across

00:03:45,040 --> 00:03:50,560
workload across kubernetes

00:03:47,120 --> 00:03:52,959
core services and across cloud services

00:03:50,560 --> 00:03:54,080
but even the sheer numbers if you look

00:03:52,959 --> 00:03:57,040
into the numbers

00:03:54,080 --> 00:03:58,480
they are huge so we need automation and

00:03:57,040 --> 00:03:59,280
there are some emerging standards like

00:03:58,480 --> 00:04:01,200
oscar

00:03:59,280 --> 00:04:03,360
that provides this control related

00:04:01,200 --> 00:04:06,000
informations from the secret standards

00:04:03,360 --> 00:04:06,560
into a machine level format so it can be

00:04:06,000 --> 00:04:09,599
consumed

00:04:06,560 --> 00:04:12,080
and auto easily automated there are some

00:04:09,599 --> 00:04:13,120
enterprise solutions available like aws

00:04:12,080 --> 00:04:16,000
security hub

00:04:13,120 --> 00:04:17,519
or ibm security and compliance center

00:04:16,000 --> 00:04:20,000
that power the central

00:04:17,519 --> 00:04:22,079
management of the compliance across

00:04:20,000 --> 00:04:25,120
organizations and regularly

00:04:22,079 --> 00:04:26,000
guidelines now let's look at the

00:04:25,120 --> 00:04:27,680
developer

00:04:26,000 --> 00:04:29,280
because developer is the one person who

00:04:27,680 --> 00:04:31,840
is programming the cloud

00:04:29,280 --> 00:04:32,560
now if we revisit our days with the open

00:04:31,840 --> 00:04:34,800
stack

00:04:32,560 --> 00:04:37,199
i remember writing official custom share

00:04:34,800 --> 00:04:39,199
script to provision virtual machines to

00:04:37,199 --> 00:04:41,360
configure network

00:04:39,199 --> 00:04:42,880
we are evolved from that now we have

00:04:41,360 --> 00:04:45,199
standard programming construct like

00:04:42,880 --> 00:04:47,520
terraform ansible cross plane

00:04:45,199 --> 00:04:49,759
to enable this to standardize this cloud

00:04:47,520 --> 00:04:52,639
programming model

00:04:49,759 --> 00:04:54,000
even the devops it has ensured that we

00:04:52,639 --> 00:04:57,280
have consistency across

00:04:54,000 --> 00:04:59,280
build test and deploy practices across

00:04:57,280 --> 00:05:00,720
industry across communities and now the

00:04:59,280 --> 00:05:02,960
emerging practices

00:05:00,720 --> 00:05:04,560
of devsecops which is essentially

00:05:02,960 --> 00:05:06,560
putting developer in the center of the

00:05:04,560 --> 00:05:08,800
security practices

00:05:06,560 --> 00:05:10,400
we don't we don't expect developers to

00:05:08,800 --> 00:05:13,360
be a security expert

00:05:10,400 --> 00:05:15,039
and we want to keep it that way and but

00:05:13,360 --> 00:05:17,360
we want to enable developers

00:05:15,039 --> 00:05:19,680
to identify the problems in a security

00:05:17,360 --> 00:05:21,199
problem early in its development process

00:05:19,680 --> 00:05:23,600
and so we want to automate these

00:05:21,199 --> 00:05:24,160
security checks and embed them into the

00:05:23,600 --> 00:05:26,160
existing

00:05:24,160 --> 00:05:28,000
development practices we don't want to

00:05:26,160 --> 00:05:28,560
invent new development practices new

00:05:28,000 --> 00:05:30,960
tools

00:05:28,560 --> 00:05:32,560
so for developers to learn but whatever

00:05:30,960 --> 00:05:33,840
their existing practices are

00:05:32,560 --> 00:05:35,919
we need to strengthen them with the

00:05:33,840 --> 00:05:37,440
security functions

00:05:35,919 --> 00:05:40,080
also we need to translate this complex

00:05:37,440 --> 00:05:40,880
security measures that developers hardly

00:05:40,080 --> 00:05:42,880
understand and

00:05:40,880 --> 00:05:43,919
provide them actionable recommendations

00:05:42,880 --> 00:05:45,520
that

00:05:43,919 --> 00:05:48,639
you don't care about the configuration

00:05:45,520 --> 00:05:50,479
the cm6 control in nist but

00:05:48,639 --> 00:05:53,919
if you just change this variable name or

00:05:50,479 --> 00:05:56,560
just add this change the value of this

00:05:53,919 --> 00:05:59,680
firewall from on to off that's the kind

00:05:56,560 --> 00:06:02,319
of feedback we want developer to give

00:05:59,680 --> 00:06:02,800
now as a community right again putting

00:06:02,319 --> 00:06:05,919
that

00:06:02,800 --> 00:06:09,120
gartner number in perspective that 99

00:06:05,919 --> 00:06:10,160
of uh the faults are going to be blamed

00:06:09,120 --> 00:06:12,000
to the developer

00:06:10,160 --> 00:06:13,759
we need to empower developer the right

00:06:12,000 --> 00:06:16,240
set of tools we need to

00:06:13,759 --> 00:06:18,400
uh we need to educate developers on the

00:06:16,240 --> 00:06:20,240
importance of the devsec of practices

00:06:18,400 --> 00:06:22,319
and that's how as community we can help

00:06:20,240 --> 00:06:24,880
and grow

00:06:22,319 --> 00:06:25,600
now let's revisit uh what are the

00:06:24,880 --> 00:06:28,080
current

00:06:25,600 --> 00:06:29,680
devastation practices across uh

00:06:28,080 --> 00:06:30,479
infrastructure as well as application

00:06:29,680 --> 00:06:32,639
code

00:06:30,479 --> 00:06:34,560
now if you look into uh the git

00:06:32,639 --> 00:06:36,240
repositories all the artifacts that are

00:06:34,560 --> 00:06:38,160
present in the git repository

00:06:36,240 --> 00:06:39,520
we can broadly classify them into four

00:06:38,160 --> 00:06:41,039
different categories

00:06:39,520 --> 00:06:42,880
we have some artifacts application

00:06:41,039 --> 00:06:44,880
artifacts like build artifacts which

00:06:42,880 --> 00:06:46,000
includes your docker file our package

00:06:44,880 --> 00:06:47,600
manifest

00:06:46,000 --> 00:06:49,680
that that says how your application is

00:06:47,600 --> 00:06:51,440
going to get built we have deployment

00:06:49,680 --> 00:06:52,400
artifacts like all deployment journals

00:06:51,440 --> 00:06:54,240
and

00:06:52,400 --> 00:06:55,599
chat that dictate how your application

00:06:54,240 --> 00:06:57,039
is going to be deployed then finally

00:06:55,599 --> 00:07:00,240
configuration artifact

00:06:57,039 --> 00:07:02,560
the config maps or network policies and

00:07:00,240 --> 00:07:03,280
our infrastructure uh has a core

00:07:02,560 --> 00:07:05,120
artifact

00:07:03,280 --> 00:07:06,479
like your terraform cross plan or

00:07:05,120 --> 00:07:09,440
ansible

00:07:06,479 --> 00:07:10,000
uh and we have existing uh division of

00:07:09,440 --> 00:07:12,479
solutions

00:07:10,000 --> 00:07:15,199
that are embedded into this network so

00:07:12,479 --> 00:07:18,160
whenever a developer makes any change

00:07:15,199 --> 00:07:19,840
this security cr pipelines trigger it

00:07:18,160 --> 00:07:21,520
access this source artifact

00:07:19,840 --> 00:07:23,440
it performs various checks like on the

00:07:21,520 --> 00:07:24,720
bill artifact we determine all the

00:07:23,440 --> 00:07:26,080
dependencies uh

00:07:24,720 --> 00:07:28,560
all the open source packages we

00:07:26,080 --> 00:07:30,639
determined there are the vulnerabilities

00:07:28,560 --> 00:07:32,240
what are the licenses that they are

00:07:30,639 --> 00:07:32,639
using what are the risk of using those

00:07:32,240 --> 00:07:35,440
uh

00:07:32,639 --> 00:07:37,440
vulnerabilities uh on the deployment

00:07:35,440 --> 00:07:39,919
artifact we analyze uh

00:07:37,440 --> 00:07:40,960
if there are any misconfigurations uh

00:07:39,919 --> 00:07:42,800
like you haven't

00:07:40,960 --> 00:07:44,240
set some resource limits or you're

00:07:42,800 --> 00:07:45,280
running as a privilege when it is not

00:07:44,240 --> 00:07:47,599
required

00:07:45,280 --> 00:07:49,759
we also measure the risk of such

00:07:47,599 --> 00:07:52,879
misconfigurations

00:07:49,759 --> 00:07:54,560
uh we check the security the

00:07:52,879 --> 00:07:56,400
configuration artifact to see if there

00:07:54,560 --> 00:07:58,319
are any application miss configurations

00:07:56,400 --> 00:07:59,599
like if i'm deploying some applications

00:07:58,319 --> 00:08:01,599
i have a set uh

00:07:59,599 --> 00:08:03,120
the right configurations for it am i

00:08:01,599 --> 00:08:04,639
using the right protocol i'm using the

00:08:03,120 --> 00:08:06,879
right certificates

00:08:04,639 --> 00:08:08,720
and finally the infrastructure artifact

00:08:06,879 --> 00:08:11,280
like our data form or

00:08:08,720 --> 00:08:12,000
crossplay we can evaluate them and

00:08:11,280 --> 00:08:14,400
identify

00:08:12,000 --> 00:08:15,919
any misconfigurations of security holes

00:08:14,400 --> 00:08:16,479
early in the development while we are

00:08:15,919 --> 00:08:18,080
actually

00:08:16,479 --> 00:08:20,160
before even we're using it for

00:08:18,080 --> 00:08:22,319
provisioning

00:08:20,160 --> 00:08:23,840
and then once we have this app pipeline

00:08:22,319 --> 00:08:24,879
our artifacts pass through the cia

00:08:23,840 --> 00:08:27,039
pipeline

00:08:24,879 --> 00:08:28,960
we diverge right we have a separate cd

00:08:27,039 --> 00:08:29,680
pipeline for infrastructures like admin

00:08:28,960 --> 00:08:32,880
schematics

00:08:29,680 --> 00:08:34,800
that takes our infrastructure as a code

00:08:32,880 --> 00:08:37,120
artifact and provisions associated

00:08:34,800 --> 00:08:39,599
resources on the cloud

00:08:37,120 --> 00:08:41,839
and then for the application we

00:08:39,599 --> 00:08:44,640
typically produce some intermediary

00:08:41,839 --> 00:08:46,560
artifacts like our images in the

00:08:44,640 --> 00:08:48,160
registry and then we use cd pipelines

00:08:46,560 --> 00:08:49,760
like argo cd or tecton

00:08:48,160 --> 00:08:51,519
and deploy our applications on the

00:08:49,760 --> 00:08:53,200
cluster we

00:08:51,519 --> 00:08:54,959
typically have the second layer of

00:08:53,200 --> 00:08:56,160
protections in the form of admission

00:08:54,959 --> 00:08:59,519
controller

00:08:56,160 --> 00:09:00,160
or gatekeeper where we perform some

00:08:59,519 --> 00:09:03,360
enforcement

00:09:00,160 --> 00:09:05,120
checks like it is basically second layer

00:09:03,360 --> 00:09:07,200
of protection

00:09:05,120 --> 00:09:08,800
and once our application is deployed our

00:09:07,200 --> 00:09:10,080
cloud services infrastructure is

00:09:08,800 --> 00:09:12,399
provisioned

00:09:10,080 --> 00:09:14,399
we have separate monitors we have

00:09:12,399 --> 00:09:17,120
continuous monitors to see if

00:09:14,399 --> 00:09:17,680
the new security issues get stopped if

00:09:17,120 --> 00:09:20,320
someone

00:09:17,680 --> 00:09:22,720
gets malicious activities happen on the

00:09:20,320 --> 00:09:23,680
cloud or on the workload and all these

00:09:22,720 --> 00:09:25,760
uh signals

00:09:23,680 --> 00:09:27,680
from our continuous monitor gets fed

00:09:25,760 --> 00:09:29,680
into a centrally managed compliance

00:09:27,680 --> 00:09:31,279
dashboard where a security director can

00:09:29,680 --> 00:09:34,959
easily evaluate and

00:09:31,279 --> 00:09:37,680
uh see the portion of the the overall

00:09:34,959 --> 00:09:38,240
security structure of its infrastructure

00:09:37,680 --> 00:09:40,399
now

00:09:38,240 --> 00:09:41,920
we will see how the cross plane is

00:09:40,399 --> 00:09:45,440
affecting this existing

00:09:41,920 --> 00:09:48,399
dlc cost workflow power

00:09:45,440 --> 00:09:49,519
thank you shilpat so first of all the

00:09:48,399 --> 00:09:51,760
first observation

00:09:49,519 --> 00:09:53,040
is that we cross plane application

00:09:51,760 --> 00:09:55,120
infrastructure

00:09:53,040 --> 00:09:57,440
can share the same kubernetes resource

00:09:55,120 --> 00:10:00,080
model the same krm

00:09:57,440 --> 00:10:01,519
so that the basically allowed to now use

00:10:00,080 --> 00:10:04,959
the same

00:10:01,519 --> 00:10:07,680
infrastructure the same tool chain for

00:10:04,959 --> 00:10:08,560
uh basically doing the pipeline for uh

00:10:07,680 --> 00:10:12,079
both

00:10:08,560 --> 00:10:14,160
application infrastructure deployments

00:10:12,079 --> 00:10:15,440
so the devsecops pipeline for apps

00:10:14,160 --> 00:10:18,399
infrastructure now

00:10:15,440 --> 00:10:18,880
is the same we can use the same tools

00:10:18,399 --> 00:10:21,040
because

00:10:18,880 --> 00:10:22,480
now i don't need to introduce different

00:10:21,040 --> 00:10:24,160
tools for example if i'm doing a

00:10:22,480 --> 00:10:26,640
deployment with terraform

00:10:24,160 --> 00:10:28,000
i have to use the terraform cli but here

00:10:26,640 --> 00:10:31,200
i can just use the

00:10:28,000 --> 00:10:33,839
existing kubectl cli

00:10:31,200 --> 00:10:35,760
for doing deployment of application and

00:10:33,839 --> 00:10:37,760
infrastructure

00:10:35,760 --> 00:10:39,760
in addition uh we have now the

00:10:37,760 --> 00:10:40,560
possibility to have a single pane of

00:10:39,760 --> 00:10:42,480
glass

00:10:40,560 --> 00:10:44,000
where we provide clear feedback to

00:10:42,480 --> 00:10:48,160
developers

00:10:44,000 --> 00:10:51,040
about potential issues on the deployment

00:10:48,160 --> 00:10:52,640
of application uh on the configuration

00:10:51,040 --> 00:10:54,160
and vulnerabilities

00:10:52,640 --> 00:10:56,240
as well as the infrastructure

00:10:54,160 --> 00:10:58,000
configuration

00:10:56,240 --> 00:11:00,320
and so we can say that crossplane is

00:10:58,000 --> 00:11:03,279
certainly simplifying the model

00:11:00,320 --> 00:11:03,680
if we go to the next chart we see how

00:11:03,279 --> 00:11:06,720
the

00:11:03,680 --> 00:11:08,000
pipeline that sripad was illustrating

00:11:06,720 --> 00:11:10,959
earlier on

00:11:08,000 --> 00:11:11,279
where we add two separate pipeline one

00:11:10,959 --> 00:11:15,360
for

00:11:11,279 --> 00:11:17,920
infrastructure a one for application

00:11:15,360 --> 00:11:20,240
now can be uh basically merged into one

00:11:17,920 --> 00:11:24,240
single pipeline because i'm sharing

00:11:20,240 --> 00:11:26,320
the same tool chain so uh in this case

00:11:24,240 --> 00:11:28,880
i don't need to have a separate for

00:11:26,320 --> 00:11:30,720
example terraform deployment pipeline

00:11:28,880 --> 00:11:32,399
but i can have one single pipeline

00:11:30,720 --> 00:11:34,880
because i'm using

00:11:32,399 --> 00:11:35,760
basically the same model the same tool

00:11:34,880 --> 00:11:38,079
chain

00:11:35,760 --> 00:11:40,959
so i can do things as well here using

00:11:38,079 --> 00:11:43,360
for example argo cd using tactone

00:11:40,959 --> 00:11:44,000
i don't need to basically introduce

00:11:43,360 --> 00:11:47,600
something

00:11:44,000 --> 00:11:49,200
different so this actually simplifies

00:11:47,600 --> 00:11:52,000
and makes some more accessible to

00:11:49,200 --> 00:11:55,519
developers also the ability now to

00:11:52,000 --> 00:11:58,240
provision the infrastructure they need

00:11:55,519 --> 00:11:59,360
um based on the application requirements

00:11:58,240 --> 00:12:02,399
and this is really

00:11:59,360 --> 00:12:03,279
what we see as the application centric

00:12:02,399 --> 00:12:06,000
provisioning

00:12:03,279 --> 00:12:07,680
and configuration of infrastructure when

00:12:06,000 --> 00:12:08,880
we start using crossplane in this

00:12:07,680 --> 00:12:13,600
picture

00:12:08,880 --> 00:12:16,000
next so as an example scenario

00:12:13,600 --> 00:12:16,800
we can see now um how we can actually

00:12:16,000 --> 00:12:18,959
leverage

00:12:16,800 --> 00:12:20,320
all these ideas and this concept we

00:12:18,959 --> 00:12:23,440
cross plane

00:12:20,320 --> 00:12:26,240
and we have here a cloud native app

00:12:23,440 --> 00:12:27,519
where we have three microservices uh ui

00:12:26,240 --> 00:12:29,600
in front

00:12:27,519 --> 00:12:30,959
a command microservices and a query

00:12:29,600 --> 00:12:34,560
microservices

00:12:30,959 --> 00:12:37,120
this is our standard cqrs pattern

00:12:34,560 --> 00:12:38,959
and on the back end we have a cloud

00:12:37,120 --> 00:12:43,920
object store this is essentially

00:12:38,959 --> 00:12:46,079
ice3 compatible service from ibm cloud

00:12:43,920 --> 00:12:48,800
for this particular example we're using

00:12:46,079 --> 00:12:51,839
the ibm cloud provider

00:12:48,800 --> 00:12:52,880
but of course we could use any other

00:12:51,839 --> 00:12:55,920
resource

00:12:52,880 --> 00:12:57,440
infrastructure cloud provider we cross

00:12:55,920 --> 00:13:00,320
plane

00:12:57,440 --> 00:13:02,480
and we are actually running this on a

00:13:00,320 --> 00:13:04,959
kubernetes cluster where we have a

00:13:02,480 --> 00:13:06,959
cross plane runtime installed where the

00:13:04,959 --> 00:13:07,440
ibm cloud provider we are also the cross

00:13:06,959 --> 00:13:10,880
plane

00:13:07,440 --> 00:13:11,200
help provider so we do the deployment of

00:13:10,880 --> 00:13:15,920
the

00:13:11,200 --> 00:13:19,600
helm application using the help provider

00:13:15,920 --> 00:13:23,279
and we use uh the cross plane resources

00:13:19,600 --> 00:13:24,320
for their cloud provider and composition

00:13:23,279 --> 00:13:26,800
to

00:13:24,320 --> 00:13:28,959
configure the cloud object store and

00:13:26,800 --> 00:13:31,519
other related resources that i need

00:13:28,959 --> 00:13:32,560
for my configuration and now let's take

00:13:31,519 --> 00:13:35,600
a look

00:13:32,560 --> 00:13:38,160
next to how actually the insights

00:13:35,600 --> 00:13:40,800
um i can get look like uh first a few

00:13:38,160 --> 00:13:43,279
words also on the ibm cloud provider

00:13:40,800 --> 00:13:44,959
this is something that is still an

00:13:43,279 --> 00:13:46,880
experimental release we released

00:13:44,959 --> 00:13:48,800
this last year i'm currently a

00:13:46,880 --> 00:13:51,519
maintainer for this project in the

00:13:48,800 --> 00:13:52,639
cosplaying community it provides a

00:13:51,519 --> 00:13:56,079
number of available

00:13:52,639 --> 00:13:57,920
uh features such as support for the ibm

00:13:56,079 --> 00:14:00,320
resource controller api that allow to

00:13:57,920 --> 00:14:02,720
provision a number of ibm cloud services

00:14:00,320 --> 00:14:05,120
from the ibm cloud catalog

00:14:02,720 --> 00:14:07,600
and provides also features such as go

00:14:05,120 --> 00:14:09,839
templating to shape credentials

00:14:07,600 --> 00:14:11,120
based on the requirement on application

00:14:09,839 --> 00:14:13,440
needs

00:14:11,120 --> 00:14:14,720
and supports currently also the ibm

00:14:13,440 --> 00:14:17,279
cloud database api

00:14:14,720 --> 00:14:19,519
that is used to configure certain

00:14:17,279 --> 00:14:23,040
characteristics of ibm cloud database

00:14:19,519 --> 00:14:25,839
services such as auto scaling or scaling

00:14:23,040 --> 00:14:27,040
a white list etc and also we support

00:14:25,839 --> 00:14:30,160
currently the

00:14:27,040 --> 00:14:32,720
im api so we can actually configure

00:14:30,160 --> 00:14:34,240
also security constraints um around the

00:14:32,720 --> 00:14:37,279
services

00:14:34,240 --> 00:14:38,800
we also allowed to import existing cloud

00:14:37,279 --> 00:14:42,399
services

00:14:38,800 --> 00:14:43,440
in the provider and as a roadmap we are

00:14:42,399 --> 00:14:46,160
currently

00:14:43,440 --> 00:14:47,760
adding more support for more cloud apis

00:14:46,160 --> 00:14:49,760
from ibm cloud

00:14:47,760 --> 00:14:52,959
and looking also a code generation from

00:14:49,760 --> 00:14:54,880
open api definitions of the provider

00:14:52,959 --> 00:14:56,000
let's take a look now to the kind of

00:14:54,880 --> 00:14:59,279
insights

00:14:56,000 --> 00:15:02,320
i can get when i basically run

00:14:59,279 --> 00:15:05,440
that exemplary application into my

00:15:02,320 --> 00:15:07,440
single pipeline so first of all i can

00:15:05,440 --> 00:15:10,720
get information about the

00:15:07,440 --> 00:15:13,360
configuration of my deployment

00:15:10,720 --> 00:15:14,000
and in this particular case um i'm

00:15:13,360 --> 00:15:16,480
getting

00:15:14,000 --> 00:15:17,519
uh through my pr that there is some

00:15:16,480 --> 00:15:19,920
issue

00:15:17,519 --> 00:15:21,600
uh as a comment in my pr that there is

00:15:19,920 --> 00:15:24,000
some issue with

00:15:21,600 --> 00:15:25,440
the resource limits for my container so

00:15:24,000 --> 00:15:27,920
the developer

00:15:25,440 --> 00:15:29,360
i will know that i need to adjust those

00:15:27,920 --> 00:15:32,399
resource limits

00:15:29,360 --> 00:15:34,160
so that i can pass the checks and then i

00:15:32,399 --> 00:15:36,000
get also some report on

00:15:34,160 --> 00:15:38,079
vulnerabilities so packages that i'm

00:15:36,000 --> 00:15:41,199
using in my

00:15:38,079 --> 00:15:42,160
application in my micro services so i

00:15:41,199 --> 00:15:44,880
had to update

00:15:42,160 --> 00:15:45,680
those uh packages to to the latest

00:15:44,880 --> 00:15:48,800
version

00:15:45,680 --> 00:15:50,160
uh and finally and this is the say the

00:15:48,800 --> 00:15:53,279
interesting part that uh

00:15:50,160 --> 00:15:54,160
crossplane allows i can get in the same

00:15:53,279 --> 00:15:56,800
pane of glass

00:15:54,160 --> 00:15:59,440
also information about the security of

00:15:56,800 --> 00:16:02,320
my infrastructure configuration

00:15:59,440 --> 00:16:05,360
and all this configuration of course uh

00:16:02,320 --> 00:16:08,399
is amount dictated by the

00:16:05,360 --> 00:16:10,320
security controls such as nist security

00:16:08,399 --> 00:16:13,040
controls so other standards

00:16:10,320 --> 00:16:13,360
that the compliance officer set up for

00:16:13,040 --> 00:16:16,160
me

00:16:13,360 --> 00:16:17,279
as a developer and then of course i get

00:16:16,160 --> 00:16:19,600
a more clear

00:16:17,279 --> 00:16:21,199
indication of exactly what i need to do

00:16:19,600 --> 00:16:22,639
in order to be compliant to those

00:16:21,199 --> 00:16:25,600
controls for example

00:16:22,639 --> 00:16:26,959
in this case i need to make sure that

00:16:25,600 --> 00:16:30,880
the cos

00:16:26,959 --> 00:16:35,519
service um only accept the ranges of

00:16:30,880 --> 00:16:37,600
ip um to to basically invoke the service

00:16:35,519 --> 00:16:38,720
i have to make sure that i set up a log

00:16:37,600 --> 00:16:41,199
dna

00:16:38,720 --> 00:16:42,800
for logging and tracking basically the

00:16:41,199 --> 00:16:47,120
api calls to the service

00:16:42,800 --> 00:16:47,440
etc etc so this basically allow me now

00:16:47,120 --> 00:16:49,199
to

00:16:47,440 --> 00:16:50,720
have this very clear feedback for the

00:16:49,199 --> 00:16:54,720
developers

00:16:50,720 --> 00:16:56,800
and then i can actually make sure that

00:16:54,720 --> 00:16:58,639
my application is compliant to the

00:16:56,800 --> 00:17:03,120
security controls

00:16:58,639 --> 00:17:03,120
that we have set up thanks

00:17:03,360 --> 00:17:09,039
thanks paolo so we're thinking like what

00:17:07,360 --> 00:17:09,439
will be the sustainable security model

00:17:09,039 --> 00:17:11,760
right

00:17:09,439 --> 00:17:13,679
so there's some thoughts like if you

00:17:11,760 --> 00:17:16,160
make a security a default configuration

00:17:13,679 --> 00:17:18,640
for every cloud service

00:17:16,160 --> 00:17:19,439
so that would essentially means that as

00:17:18,640 --> 00:17:21,919
a developer

00:17:19,439 --> 00:17:23,919
whenever i create some cloud resource it

00:17:21,919 --> 00:17:27,120
is by default it is secure i'm

00:17:23,919 --> 00:17:28,720
i'm asked by uh physically

00:17:27,120 --> 00:17:30,559
it's mandatory for me to provide all the

00:17:28,720 --> 00:17:33,760
necessary security controls

00:17:30,559 --> 00:17:35,760
or security configurations and

00:17:33,760 --> 00:17:37,760
only configurations that are available

00:17:35,760 --> 00:17:41,440
are to disable the security cards

00:17:37,760 --> 00:17:43,039
so as a developer i am well aware when

00:17:41,440 --> 00:17:45,440
whenever i'm making any security

00:17:43,039 --> 00:17:46,080
misconfigurations right and whenever i'm

00:17:45,440 --> 00:17:48,080
doing it

00:17:46,080 --> 00:17:49,360
right it's basically obscure for me it's

00:17:48,080 --> 00:17:51,280
oblivious to me

00:17:49,360 --> 00:17:53,039
so i think the subliminal security is

00:17:51,280 --> 00:17:55,760
going to be very important

00:17:53,039 --> 00:17:57,120
now if you look into the stack of uh the

00:17:55,760 --> 00:18:00,559
standards that are available

00:17:57,120 --> 00:18:02,960
right so for virtual machines uh we have

00:18:00,559 --> 00:18:04,000
standards like cis-ness security control

00:18:02,960 --> 00:18:06,000
that

00:18:04,000 --> 00:18:07,200
guide us on how we should configure

00:18:06,000 --> 00:18:08,720
virtual machines how we

00:18:07,200 --> 00:18:12,080
can we should configure our operating

00:18:08,720 --> 00:18:14,000
systems then we have kubernetes

00:18:12,080 --> 00:18:15,600
plane on top of that we where we have

00:18:14,000 --> 00:18:18,000
some cs benchmark

00:18:15,600 --> 00:18:20,000
uh which guide us on how we should

00:18:18,000 --> 00:18:20,720
configure our worker nodes our master

00:18:20,000 --> 00:18:23,440
node our

00:18:20,720 --> 00:18:27,520
core services for our workloads we have

00:18:23,440 --> 00:18:31,760
docker cis benchmark linux pci dss and

00:18:27,520 --> 00:18:33,440
all not many other security controls

00:18:31,760 --> 00:18:34,880
for cloud services we are against some

00:18:33,440 --> 00:18:36,559
list security controls

00:18:34,880 --> 00:18:38,720
so essentially we have security controls

00:18:36,559 --> 00:18:40,799
across the stack but the cross plane

00:18:38,720 --> 00:18:42,880
right so these are this is essentially

00:18:40,799 --> 00:18:44,960
the question that we are trying to ask

00:18:42,880 --> 00:18:46,799
that at cross plane are the runtime and

00:18:44,960 --> 00:18:49,039
the runtime providers right uh

00:18:46,799 --> 00:18:50,400
do we consider them as the workload on

00:18:49,039 --> 00:18:52,080
top of kubernetes

00:18:50,400 --> 00:18:54,960
and they be subjected to the workload

00:18:52,080 --> 00:18:56,960
security profile or they are part of the

00:18:54,960 --> 00:19:00,080
core kubernetes control plane and need

00:18:56,960 --> 00:19:02,480
to be subjected to the kubernetes cis uh

00:19:00,080 --> 00:19:04,160
profile security profiles or we actually

00:19:02,480 --> 00:19:07,360
need a separate category to model the

00:19:04,160 --> 00:19:09,840
security profile for cross plane

00:19:07,360 --> 00:19:10,880
uh with that uh we like to conclude our

00:19:09,840 --> 00:19:12,720
presentation

00:19:10,880 --> 00:19:14,000
and thank you for your time and we are

00:19:12,720 --> 00:19:18,960
open for questions

00:19:14,000 --> 00:19:18,960

YouTube URL: https://www.youtube.com/watch?v=NHSsRjMsb1Y


