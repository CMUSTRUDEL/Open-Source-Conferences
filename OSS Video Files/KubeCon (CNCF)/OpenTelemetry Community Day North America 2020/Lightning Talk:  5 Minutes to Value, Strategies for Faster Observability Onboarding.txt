Title: Lightning Talk:  5 Minutes to Value, Strategies for Faster Observability Onboarding
Publication date: 2020-11-24
Playlist: OpenTelemetry Community Day North America 2020
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Lightning Talk:  5 Minutes to Value, Strategies for Faster Observability Onboarding

5 Minutes to Value, Strategies for Faster Observability Onboarding  This session will cover strategies and best practices for improving Time To Value for observability onboarding, learned from helping onboard thousands of users with the instrumentation packages that are now a core part of most OpenTelemetry clients.   Primarily, it will focus on novel configuration strategies when creating client instrumentation packages. These approaches help solve one of the biggest Onboarding challenges:  How can users augment their telemetry with context specific to their business use case, without having to maintain huge chunks of custom, hard to maintain OpenTelemetry manual instrumentation code in their application?"
Captions: 
	00:00:00,000 --> 00:00:04,359
hey everybody thank you for taking the

00:00:02,480 --> 00:00:06,160
time to come to my open telemetry

00:00:04,359 --> 00:00:07,839
community day

00:00:06,160 --> 00:00:09,360
lightning talk called five minutes to

00:00:07,839 --> 00:00:12,480
value strategies for

00:00:09,360 --> 00:00:13,679
faster observability onboarding so real

00:00:12,480 --> 00:00:14,480
quickly we'll just go over what i'll

00:00:13,679 --> 00:00:16,160
discuss today

00:00:14,480 --> 00:00:18,000
do a little introduction talk a little

00:00:16,160 --> 00:00:18,480
bit about what five minutes to value

00:00:18,000 --> 00:00:20,880
means

00:00:18,480 --> 00:00:21,920
and how it relates to onboarding in open

00:00:20,880 --> 00:00:23,920
telemetry

00:00:21,920 --> 00:00:26,320
talk about some really useful client

00:00:23,920 --> 00:00:28,480
configuration options for onboarding

00:00:26,320 --> 00:00:30,080
and then provide a few suggestions for

00:00:28,480 --> 00:00:30,960
future contributors when they think

00:00:30,080 --> 00:00:33,200
about

00:00:30,960 --> 00:00:35,360
how to treat onboarding when it comes to

00:00:33,200 --> 00:00:38,000
writing open telemetry instrumentation

00:00:35,360 --> 00:00:40,079
so a quick introduction my name is eric

00:00:38,000 --> 00:00:42,000
mustin hello nice to meet you all

00:00:40,079 --> 00:00:44,399
i work over at datadog is a software

00:00:42,000 --> 00:00:46,320
engineer on the apm integrations team

00:00:44,399 --> 00:00:48,800
and i'm also active in the open

00:00:46,320 --> 00:00:50,960
telemetry community i'm a

00:00:48,800 --> 00:00:52,079
contributor and approver on open

00:00:50,960 --> 00:00:54,480
telemetry ruby

00:00:52,079 --> 00:00:56,160
and i have committed to a number of

00:00:54,480 --> 00:00:59,440
other open telemetry

00:00:56,160 --> 00:01:00,640
uh repositories so whether it is at work

00:00:59,440 --> 00:01:03,280
helping customers

00:01:00,640 --> 00:01:05,760
on board to the vendor i work at or it's

00:01:03,280 --> 00:01:08,000
in the getter channel or in sig meetings

00:01:05,760 --> 00:01:09,360
listening to users talk about how

00:01:08,000 --> 00:01:10,400
they're getting started with open

00:01:09,360 --> 00:01:14,080
telemetry

00:01:10,400 --> 00:01:14,799
i've had a chance um recently to learn a

00:01:14,080 --> 00:01:16,400
lot about

00:01:14,799 --> 00:01:18,479
onboarding pain points and what we can

00:01:16,400 --> 00:01:21,680
do as a community to make that

00:01:18,479 --> 00:01:23,680
easier for our users so first let's talk

00:01:21,680 --> 00:01:25,360
about this term five minutes to value

00:01:23,680 --> 00:01:27,119
right it's a catchy term so what does it

00:01:25,360 --> 00:01:29,600
mean it's first off it's a goal

00:01:27,119 --> 00:01:30,880
in the opent open telemetry collector

00:01:29,600 --> 00:01:32,880
roadmap

00:01:30,880 --> 00:01:34,560
but more broadly it's just an extension

00:01:32,880 --> 00:01:37,360
of the onboarding concept

00:01:34,560 --> 00:01:38,479
time to value it's it's just the idea

00:01:37,360 --> 00:01:41,040
how long does it take

00:01:38,479 --> 00:01:42,079
for our user to start to realize value

00:01:41,040 --> 00:01:44,479
out of a product

00:01:42,079 --> 00:01:45,520
from the moment they begin to use it and

00:01:44,479 --> 00:01:47,280
get it set up

00:01:45,520 --> 00:01:50,079
for the open telemetry collector

00:01:47,280 --> 00:01:50,799
specifically a lot of the road map goals

00:01:50,079 --> 00:01:52,640
are around

00:01:50,799 --> 00:01:54,079
sort of just working out of the box

00:01:52,640 --> 00:01:55,840
right so distributions for

00:01:54,079 --> 00:01:57,759
common targets whether you're running on

00:01:55,840 --> 00:01:59,920
docker or windows just giving you

00:01:57,759 --> 00:02:02,079
easy ways to get up and running it's

00:01:59,920 --> 00:02:03,840
also about giving you data sort of out

00:02:02,079 --> 00:02:05,520
of the box to start to play with so it's

00:02:03,840 --> 00:02:09,360
automatic collection of

00:02:05,520 --> 00:02:12,160
cloud provider metrics or tags k-8s

00:02:09,360 --> 00:02:14,720
telemetry or even just host metrics

00:02:12,160 --> 00:02:16,879
and then it's also about getting and

00:02:14,720 --> 00:02:18,239
gathering application specific metric

00:02:16,879 --> 00:02:20,400
collections so if you're running kafka

00:02:18,239 --> 00:02:22,560
or hadoop or you're running sidekiq

00:02:20,400 --> 00:02:23,440
a lot of these pieces of popular open

00:02:22,560 --> 00:02:27,120
source software

00:02:23,440 --> 00:02:29,040
emit data uh out of the box and

00:02:27,120 --> 00:02:30,720
we can collect that information

00:02:29,040 --> 00:02:33,760
automatically and populate it

00:02:30,720 --> 00:02:36,000
in your back end of choice

00:02:33,760 --> 00:02:37,599
so that's one concept of five minutes to

00:02:36,000 --> 00:02:39,360
value sort of like just magically

00:02:37,599 --> 00:02:41,599
working out of the box

00:02:39,360 --> 00:02:42,720
um but as we all know when it comes to

00:02:41,599 --> 00:02:44,640
onboarding it's never

00:02:42,720 --> 00:02:46,080
just as easy as just working out of the

00:02:44,640 --> 00:02:47,920
box right the difference between theory

00:02:46,080 --> 00:02:50,000
and practice is always real

00:02:47,920 --> 00:02:51,680
on the left you can see sort of

00:02:50,000 --> 00:02:53,680
onboarding in theory you invest a little

00:02:51,680 --> 00:02:55,440
bit of time and you get this great value

00:02:53,680 --> 00:02:56,800
and then you get incremental gains as

00:02:55,440 --> 00:02:58,319
you invest more time

00:02:56,800 --> 00:03:00,560
but in practice there's peaks and

00:02:58,319 --> 00:03:03,599
valleys right you invest a little bit of

00:03:00,560 --> 00:03:05,760
time you get things working but then

00:03:03,599 --> 00:03:07,599
you have an unusual situation where

00:03:05,760 --> 00:03:08,800
things break or the data isn't exactly

00:03:07,599 --> 00:03:11,599
how you want it

00:03:08,800 --> 00:03:12,159
um or you so you invest some more time

00:03:11,599 --> 00:03:14,000
you gain

00:03:12,159 --> 00:03:16,080
some more value and then something else

00:03:14,000 --> 00:03:19,280
goes wrong and it's sort of this poland

00:03:16,080 --> 00:03:21,599
push and pull and each of those

00:03:19,280 --> 00:03:22,560
valleys in this graph on the right is an

00:03:21,599 --> 00:03:24,239
opportunity

00:03:22,560 --> 00:03:25,519
or an area where the user might turn the

00:03:24,239 --> 00:03:26,799
user might just throw up their hands and

00:03:25,519 --> 00:03:28,560
say you know what i'll just stick with

00:03:26,799 --> 00:03:31,040
what works for me and so

00:03:28,560 --> 00:03:31,680
for open telemetry we want to limit

00:03:31,040 --> 00:03:34,400
those

00:03:31,680 --> 00:03:37,120
situations why does onboarding matter to

00:03:34,400 --> 00:03:40,640
open telemetry because onboarding speed

00:03:37,120 --> 00:03:42,959
5 x many minutes to value helps adoption

00:03:40,640 --> 00:03:44,640
the faster a user can onboard and sort

00:03:42,959 --> 00:03:46,159
of get the data exactly the way they

00:03:44,640 --> 00:03:48,000
want it in open telemetry

00:03:46,159 --> 00:03:49,920
that means the more time they have to

00:03:48,000 --> 00:03:51,760
actually prove the value

00:03:49,920 --> 00:03:53,760
of all this rich data to their

00:03:51,760 --> 00:03:55,920
stakeholders internally

00:03:53,760 --> 00:04:00,319
it means they have time to more time to

00:03:55,920 --> 00:04:03,439
actually dig in and start to diagnose

00:04:00,319 --> 00:04:05,680
issues or understand root causes and it

00:04:03,439 --> 00:04:08,400
also gives them more time to configure

00:04:05,680 --> 00:04:10,319
their setup for specific business use

00:04:08,400 --> 00:04:11,439
cases so if they're a financial services

00:04:10,319 --> 00:04:14,879
firm

00:04:11,439 --> 00:04:16,239
things they might have to regex out of

00:04:14,879 --> 00:04:16,639
their data are going to be different

00:04:16,239 --> 00:04:19,840
than

00:04:16,639 --> 00:04:21,840
if they're a e-commerce shop so

00:04:19,840 --> 00:04:23,360
onboarding matters for open telemetry

00:04:21,840 --> 00:04:25,440
and we want to make sure that that

00:04:23,360 --> 00:04:28,080
onboarding process is

00:04:25,440 --> 00:04:29,680
as seamless as it can be and so a lot of

00:04:28,080 --> 00:04:31,680
the ways this has been done historically

00:04:29,680 --> 00:04:33,120
is sort of with magic defaults

00:04:31,680 --> 00:04:34,960
um and that was talked about a little

00:04:33,120 --> 00:04:36,479
bit in the roadmap earlier but there's

00:04:34,960 --> 00:04:37,919
more to onboarding than just magic

00:04:36,479 --> 00:04:38,720
defaults right magic defaults are

00:04:37,919 --> 00:04:40,479
wonderful

00:04:38,720 --> 00:04:42,800
they give you a really wonderful sort of

00:04:40,479 --> 00:04:45,520
demo view or or view

00:04:42,800 --> 00:04:47,520
uh write a getting started view but a

00:04:45,520 --> 00:04:49,199
user is only actually onboarded

00:04:47,520 --> 00:04:50,960
when they have all the data they need

00:04:49,199 --> 00:04:52,479
formatted exactly the way they need it

00:04:50,960 --> 00:04:52,960
and anyone from a vendor can tell you

00:04:52,479 --> 00:04:55,199
that

00:04:52,960 --> 00:04:57,120
the questions don't stop once something

00:04:55,199 --> 00:04:57,520
starts working it only they only stop

00:04:57,120 --> 00:04:59,919
once

00:04:57,520 --> 00:05:01,759
everything is exactly the way user wants

00:04:59,919 --> 00:05:03,759
so when it comes to open telemetry

00:05:01,759 --> 00:05:05,840
clients that's difficult because

00:05:03,759 --> 00:05:07,280
we as authors or contributors here

00:05:05,840 --> 00:05:09,360
simply can't know ahead of time

00:05:07,280 --> 00:05:10,800
everything a user is going to want we're

00:05:09,360 --> 00:05:12,720
not going to be able to capture every

00:05:10,800 --> 00:05:14,800
piece of metadata ahead of time

00:05:12,720 --> 00:05:17,360
and so instead what's really important

00:05:14,800 --> 00:05:20,160
is exposing really easy ways

00:05:17,360 --> 00:05:21,520
to augment modify and configure

00:05:20,160 --> 00:05:24,400
telemetry data

00:05:21,520 --> 00:05:26,960
to fit any use case and doing so without

00:05:24,400 --> 00:05:27,360
forcing users to maintain tons of custom

00:05:26,960 --> 00:05:30,160
built

00:05:27,360 --> 00:05:32,080
code and sort of glue code as as it's

00:05:30,160 --> 00:05:34,320
commonly called

00:05:32,080 --> 00:05:35,919
which leverage open telemetry tracing

00:05:34,320 --> 00:05:37,680
apis we don't want users to have to

00:05:35,919 --> 00:05:38,080
write software on top of the software we

00:05:37,680 --> 00:05:40,000
provide

00:05:38,080 --> 00:05:41,759
them we just want to be able to have

00:05:40,000 --> 00:05:43,680
them use open telemetry software out of

00:05:41,759 --> 00:05:45,360
the box

00:05:43,680 --> 00:05:47,039
with these really great configuration

00:05:45,360 --> 00:05:47,759
options and so i've just gone through

00:05:47,039 --> 00:05:49,199
and quickly

00:05:47,759 --> 00:05:51,759
want to quickly highlight a few of the

00:05:49,199 --> 00:05:52,880
really useful configuration options

00:05:51,759 --> 00:05:55,199
specifically

00:05:52,880 --> 00:05:56,720
request response configuration hooks

00:05:55,199 --> 00:05:58,479
allow deny lists and

00:05:56,720 --> 00:06:00,560
the ability to toggle on and off

00:05:58,479 --> 00:06:01,840
different tracing of middleware or

00:06:00,560 --> 00:06:04,639
unimportant spans

00:06:01,840 --> 00:06:08,160
so let's start with the one i think is

00:06:04,639 --> 00:06:11,199
most useful is configuration hooks

00:06:08,160 --> 00:06:12,160
i'm using open telemetry.js specifically

00:06:11,199 --> 00:06:15,199
their node

00:06:12,160 --> 00:06:16,720
packages as an example here we want to

00:06:15,199 --> 00:06:18,479
for example have a user is making

00:06:16,720 --> 00:06:20,560
requests to the github api

00:06:18,479 --> 00:06:22,400
the github api is very heavily rate

00:06:20,560 --> 00:06:25,360
limited and so they want to be able to

00:06:22,400 --> 00:06:28,080
know if a request is four or fouring or

00:06:25,360 --> 00:06:28,720
returning a 400 or 500 response code due

00:06:28,080 --> 00:06:31,280
to

00:06:28,720 --> 00:06:33,199
rate limit issues but the issue is that

00:06:31,280 --> 00:06:36,560
the automatic instrumentation

00:06:33,199 --> 00:06:38,720
of h node http clients

00:06:36,560 --> 00:06:40,319
doesn't automatically capture every

00:06:38,720 --> 00:06:42,080
single response header

00:06:40,319 --> 00:06:43,440
so normally this would be an issue that

00:06:42,080 --> 00:06:45,680
have to write a wrapper

00:06:43,440 --> 00:06:47,919
around their http calls or they'd have

00:06:45,680 --> 00:06:50,319
to be able to hook into

00:06:47,919 --> 00:06:51,280
some sort of after uh request hook in

00:06:50,319 --> 00:06:53,759
their http

00:06:51,280 --> 00:06:55,599
client and be able to grab the current

00:06:53,759 --> 00:06:57,199
spam context but instead

00:06:55,599 --> 00:06:59,280
there's this really great configuration

00:06:57,199 --> 00:07:01,039
option called apply custom attributes on

00:06:59,280 --> 00:07:03,680
spin and it's a hook that

00:07:01,039 --> 00:07:05,120
takes this both the span and the request

00:07:03,680 --> 00:07:08,479
and response objects as

00:07:05,120 --> 00:07:11,599
arguments so it's as simple here as

00:07:08,479 --> 00:07:13,680
setting an attribute on the span that

00:07:11,599 --> 00:07:15,199
is set to the response header that we

00:07:13,680 --> 00:07:16,800
need that contains the rate limit

00:07:15,199 --> 00:07:19,120
information we don't have to

00:07:16,800 --> 00:07:20,720
pull in um you know the current span

00:07:19,120 --> 00:07:23,280
context we don't have to

00:07:20,720 --> 00:07:25,599
store the response object anywhere to

00:07:23,280 --> 00:07:28,160
access it later

00:07:25,599 --> 00:07:28,720
and now as you can see in my vendor back

00:07:28,160 --> 00:07:31,280
end

00:07:28,720 --> 00:07:33,599
i have that x rate limit remaining span

00:07:31,280 --> 00:07:35,759
attribute available so i can

00:07:33,599 --> 00:07:38,160
filter and slice and dice based on you

00:07:35,759 --> 00:07:41,120
know rate limits

00:07:38,160 --> 00:07:43,919
and this is a really great option and

00:07:41,120 --> 00:07:45,360
makes it easy for users to extend their

00:07:43,919 --> 00:07:47,199
instrumentation

00:07:45,360 --> 00:07:48,639
to any use case right we don't know

00:07:47,199 --> 00:07:50,160
ahead of time that it's going to be rate

00:07:48,639 --> 00:07:51,039
limits we just want to be able to make

00:07:50,160 --> 00:07:52,960
it easy

00:07:51,039 --> 00:07:55,599
for them to define the information they

00:07:52,960 --> 00:07:59,280
need without having to

00:07:55,599 --> 00:08:01,919
roll their own custom code

00:07:59,280 --> 00:08:02,720
besides being able to just augment your

00:08:01,919 --> 00:08:05,520
telemetry

00:08:02,720 --> 00:08:06,000
with useful extra metadata another

00:08:05,520 --> 00:08:08,080
really

00:08:06,000 --> 00:08:09,199
important aspect of onboarding

00:08:08,080 --> 00:08:10,960
configuration

00:08:09,199 --> 00:08:12,560
is giving users flexibility when it

00:08:10,960 --> 00:08:15,759
comes to security

00:08:12,560 --> 00:08:18,000
performance and data ingestion costs and

00:08:15,759 --> 00:08:20,160
that means being able to control

00:08:18,000 --> 00:08:21,840
really precisely what actually gets

00:08:20,160 --> 00:08:24,479
instrumented

00:08:21,840 --> 00:08:25,680
and doing so via configuration it means

00:08:24,479 --> 00:08:27,840
more than just

00:08:25,680 --> 00:08:29,199
dropping spans once they've hit the

00:08:27,840 --> 00:08:31,919
collector because we don't want to

00:08:29,199 --> 00:08:32,959
spend all that we don't want to add more

00:08:31,919 --> 00:08:36,320
um

00:08:32,959 --> 00:08:38,159
more network costs and it means um

00:08:36,320 --> 00:08:40,000
making sure that sensitive information

00:08:38,159 --> 00:08:43,200
doesn't leave our environment

00:08:40,000 --> 00:08:44,560
so allow denialists for example

00:08:43,200 --> 00:08:47,600
are a great example of this open

00:08:44,560 --> 00:08:49,440
telemetry pythons django instrumentation

00:08:47,600 --> 00:08:52,640
has environment variables you can set

00:08:49,440 --> 00:08:54,959
that can exclude urls based on regex

00:08:52,640 --> 00:08:56,399
so it's called hotel python django

00:08:54,959 --> 00:08:58,160
excluded urls

00:08:56,399 --> 00:09:00,880
and in the example here you can see

00:08:58,160 --> 00:09:02,800
we're excluding urls for a specific

00:09:00,880 --> 00:09:04,560
client's metadata which might be a

00:09:02,800 --> 00:09:06,720
particularly sensitive client

00:09:04,560 --> 00:09:08,080
and we're also not tracing health check

00:09:06,720 --> 00:09:10,560
endpoints because there's a relatively

00:09:08,080 --> 00:09:12,399
low value

00:09:10,560 --> 00:09:14,160
pieces of telemetry data and then you

00:09:12,399 --> 00:09:17,279
can also see

00:09:14,160 --> 00:09:20,080
in open telemetry js express

00:09:17,279 --> 00:09:21,040
the express instrumentation has options

00:09:20,080 --> 00:09:23,279
to

00:09:21,040 --> 00:09:24,160
not instrument specific pieces of

00:09:23,279 --> 00:09:26,560
middleware

00:09:24,160 --> 00:09:27,839
so here for example using the option

00:09:26,560 --> 00:09:30,000
called ignore layers

00:09:27,839 --> 00:09:31,600
we've chosen to ignore the body parser

00:09:30,000 --> 00:09:32,640
middleware and so this is really

00:09:31,600 --> 00:09:35,040
important if

00:09:32,640 --> 00:09:36,800
let's say you're getting charged or

00:09:35,040 --> 00:09:39,279
you're storing the data yourself and so

00:09:36,800 --> 00:09:40,240
every additional span you're storing has

00:09:39,279 --> 00:09:42,399
um

00:09:40,240 --> 00:09:43,519
has cost to it and something like a body

00:09:42,399 --> 00:09:45,920
parts or middleware

00:09:43,519 --> 00:09:48,000
middleware is almost never going to have

00:09:45,920 --> 00:09:48,640
any value and it's just not necessary to

00:09:48,000 --> 00:09:50,640
trace

00:09:48,640 --> 00:09:52,080
so you can optionally choose what you

00:09:50,640 --> 00:09:54,080
want to instrument and what you don't

00:09:52,080 --> 00:09:56,320
want to

00:09:54,080 --> 00:09:57,680
so those are just a few examples of

00:09:56,320 --> 00:10:00,720
areas where

00:09:57,680 --> 00:10:02,640
client configuration which lets users

00:10:00,720 --> 00:10:06,240
augment their span data

00:10:02,640 --> 00:10:08,959
can help onboarding tremendously and so

00:10:06,240 --> 00:10:10,880
for future contributors here who want to

00:10:08,959 --> 00:10:12,720
add their own instrumentation

00:10:10,880 --> 00:10:14,640
or contribute instrumentation some

00:10:12,720 --> 00:10:16,560
lessons to think about are one is

00:10:14,640 --> 00:10:17,680
treat onboarding as a first class

00:10:16,560 --> 00:10:20,000
citizen

00:10:17,680 --> 00:10:21,600
users don't want to write glue code they

00:10:20,000 --> 00:10:22,880
want to be able to use officially

00:10:21,600 --> 00:10:26,320
supported

00:10:22,880 --> 00:10:28,640
configuration options when available

00:10:26,320 --> 00:10:29,440
let users augment their span data we're

00:10:28,640 --> 00:10:32,160
not going to

00:10:29,440 --> 00:10:35,040
ahead of time know every single piece of

00:10:32,160 --> 00:10:37,600
metadata is set as a span attribute but

00:10:35,040 --> 00:10:39,760
if you give them an easy or a happy path

00:10:37,600 --> 00:10:42,880
to augment that data themselves

00:10:39,760 --> 00:10:44,640
that can be just as good if not better

00:10:42,880 --> 00:10:46,240
also when you're writing instrumentation

00:10:44,640 --> 00:10:47,360
take a look around at what other

00:10:46,240 --> 00:10:48,800
language client

00:10:47,360 --> 00:10:51,760
implementations may have done for

00:10:48,800 --> 00:10:51,760
similar libraries

00:10:52,000 --> 00:10:57,920
it's important to try to

00:10:56,160 --> 00:10:59,440
borrow best practices from some of the

00:10:57,920 --> 00:11:00,000
other languages when you can and that

00:10:59,440 --> 00:11:02,240
also

00:11:00,000 --> 00:11:03,839
uh means looking around and seeing what

00:11:02,240 --> 00:11:06,079
are the existing naming conventions and

00:11:03,839 --> 00:11:07,760
environment variable conventions

00:11:06,079 --> 00:11:09,360
that exist here we don't want to add to

00:11:07,760 --> 00:11:10,560
the cognitive overload of folks who

00:11:09,360 --> 00:11:12,959
might be running

00:11:10,560 --> 00:11:14,320
multiple clients in multiple languages

00:11:12,959 --> 00:11:15,440
in their production systems

00:11:14,320 --> 00:11:17,680
they want to be able to remember

00:11:15,440 --> 00:11:20,480
specific names for config options and

00:11:17,680 --> 00:11:23,040
specific environment variable names

00:11:20,480 --> 00:11:25,279
and be able to set those across all

00:11:23,040 --> 00:11:27,519
their languages when possible

00:11:25,279 --> 00:11:29,120
so thanks for coming i hope that was

00:11:27,519 --> 00:11:30,800
valuable to you guys if you guys have

00:11:29,120 --> 00:11:32,320
any questions feel free to reach out

00:11:30,800 --> 00:11:34,480
during the conference or reach out to me

00:11:32,320 --> 00:11:36,160
on gitter

00:11:34,480 --> 00:11:37,680
i'm happy to chat and i hope you guys

00:11:36,160 --> 00:11:40,959
enjoy the rest of open telemetry

00:11:37,680 --> 00:11:40,959

YouTube URL: https://www.youtube.com/watch?v=xTLmRrUPEo4


