Title: Lightning Talk: How to fill in historical data for new recording rules - Jessica Grebenschikov
Publication date: 2021-05-03
Playlist: PromCon Online EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: How to fill in historical data for new recording rules - Jessica Grebenschikov, Prometheus

Have you ever created a new recording rule and wished there was historical data for that rule right away? If so, you're in luck because now there is a way to fill in historical data when new recording rules are created. Find out how in this talk.
Captions: 
	00:00:00,160 --> 00:00:05,040
hi my name is jessica and i am a

00:00:02,879 --> 00:00:07,279
software engineer and a contributor to

00:00:05,040 --> 00:00:09,440
prometheus and this is my lightning talk

00:00:07,279 --> 00:00:13,120
on how to fill in missing data

00:00:09,440 --> 00:00:16,800
for recording rules so

00:00:13,120 --> 00:00:18,960
many moons ago back in 2013

00:00:16,800 --> 00:00:20,000
an issue was created that made this

00:00:18,960 --> 00:00:23,039
request

00:00:20,000 --> 00:00:26,720
to have the ability to persist data

00:00:23,039 --> 00:00:29,439
for evaluating

00:00:26,720 --> 00:00:30,560
recording rules in the past and i'm

00:00:29,439 --> 00:00:34,000
happy to say that

00:00:30,560 --> 00:00:37,280
eight years later uh we finally have

00:00:34,000 --> 00:00:39,600
a pull request that got merged recently

00:00:37,280 --> 00:00:41,200
that implements this feature and this

00:00:39,600 --> 00:00:44,480
talk is about how to

00:00:41,200 --> 00:00:46,640
make use of that feature to fill in uh

00:00:44,480 --> 00:00:48,320
recording rules from the past

00:00:46,640 --> 00:00:49,680
and so just a tiny bit of background

00:00:48,320 --> 00:00:51,360
what is a recording rule

00:00:49,680 --> 00:00:53,360
um in the prometheus official

00:00:51,360 --> 00:00:55,199
documentation it shows here

00:00:53,360 --> 00:00:58,960
um has some information on recording

00:00:55,199 --> 00:00:59,600
rules that they um are essentially way

00:00:58,960 --> 00:01:03,199
too

00:00:59,600 --> 00:01:06,720
they are ways to pre-compute

00:01:03,199 --> 00:01:09,280
um expensive queries and save

00:01:06,720 --> 00:01:11,520
the result so that you don't have to

00:01:09,280 --> 00:01:13,200
evaluate those expensive queries over

00:01:11,520 --> 00:01:16,080
and over but rather the data

00:01:13,200 --> 00:01:18,400
is saved over time so here's an example

00:01:16,080 --> 00:01:20,320
of a recording rule that

00:01:18,400 --> 00:01:21,600
figures out what is the current network

00:01:20,320 --> 00:01:25,119
traffic um

00:01:21,600 --> 00:01:27,840
per second and you can see the

00:01:25,119 --> 00:01:30,080
query expression example here that gets

00:01:27,840 --> 00:01:30,080
run

00:01:30,240 --> 00:01:34,079
um so the problem with recording rules

00:01:33,040 --> 00:01:36,720
is that

00:01:34,079 --> 00:01:37,439
the data only exists from creation time

00:01:36,720 --> 00:01:39,280
on

00:01:37,439 --> 00:01:40,640
when you create a new recording rule

00:01:39,280 --> 00:01:43,520
there is no past data

00:01:40,640 --> 00:01:44,479
for that rule so um we're going to use

00:01:43,520 --> 00:01:47,840
this example

00:01:44,479 --> 00:01:51,040
through the demo of

00:01:47,840 --> 00:01:53,680
making a rule that tracks the

00:01:51,040 --> 00:01:55,200
network traffic per second so here is a

00:01:53,680 --> 00:01:58,240
config file for recording rule

00:01:55,200 --> 00:02:00,880
example um and if

00:01:58,240 --> 00:02:01,360
you so when i created this recording

00:02:00,880 --> 00:02:03,280
rule

00:02:01,360 --> 00:02:04,880
uh then you can go look in prometheus

00:02:03,280 --> 00:02:07,360
you can look on the dashboard

00:02:04,880 --> 00:02:09,280
so on the left hand side this is the

00:02:07,360 --> 00:02:11,280
query that was executed and so

00:02:09,280 --> 00:02:13,360
you could see for the past hour there is

00:02:11,280 --> 00:02:14,560
actually data time series data that

00:02:13,360 --> 00:02:17,520
exists for that

00:02:14,560 --> 00:02:18,560
however if i just put in the name of the

00:02:17,520 --> 00:02:20,160
recording rule

00:02:18,560 --> 00:02:21,280
there's no data here essentially just

00:02:20,160 --> 00:02:22,879
because it's brand new so it doesn't

00:02:21,280 --> 00:02:26,080
have any time series data so

00:02:22,879 --> 00:02:28,959
the goal of this is to fill in the past

00:02:26,080 --> 00:02:32,080
data right here so that these two match

00:02:28,959 --> 00:02:33,440
and um now we have the capability of

00:02:32,080 --> 00:02:35,599
being able to do that

00:02:33,440 --> 00:02:37,040
with prompt tools so i added this

00:02:35,599 --> 00:02:40,000
feature into prom tool

00:02:37,040 --> 00:02:40,879
uh this is the sub command tsdb create

00:02:40,000 --> 00:02:43,519
blocks from

00:02:40,879 --> 00:02:44,480
rules here's all the options so if you

00:02:43,519 --> 00:02:47,360
do run that

00:02:44,480 --> 00:02:49,040
like so um you need to provide a start

00:02:47,360 --> 00:02:49,519
and an end time so in this example

00:02:49,040 --> 00:02:51,120
there's an

00:02:49,519 --> 00:02:53,120
hour window that we just looked at on

00:02:51,120 --> 00:02:54,879
the previous chart that our window is

00:02:53,120 --> 00:02:58,959
what we're going to fill in

00:02:54,879 --> 00:03:00,319
and then the url to the prometheus api

00:02:58,959 --> 00:03:02,400
is passed in

00:03:00,319 --> 00:03:03,840
and then the output of this sub command

00:03:02,400 --> 00:03:07,200
are blocks blocks of time

00:03:03,840 --> 00:03:10,239
series data for this recording rule so

00:03:07,200 --> 00:03:12,319
providing a location of that output

00:03:10,239 --> 00:03:13,280
directory this is where all of the

00:03:12,319 --> 00:03:14,879
blocks will be so

00:03:13,280 --> 00:03:16,480
execute this command you can see some

00:03:14,879 --> 00:03:18,000
logs it says blah blah blah we're

00:03:16,480 --> 00:03:20,480
running this rule processing

00:03:18,000 --> 00:03:21,840
it and then afterwards you can ls into

00:03:20,480 --> 00:03:22,319
the output directory and you can see

00:03:21,840 --> 00:03:25,280
that there's

00:03:22,319 --> 00:03:27,200
one block created to inspect that block

00:03:25,280 --> 00:03:28,799
even further there's another sub command

00:03:27,200 --> 00:03:30,400
you can kind of see more data about it

00:03:28,799 --> 00:03:32,640
so you can see it

00:03:30,400 --> 00:03:33,519
it's about an hour here and there's 70

00:03:32,640 --> 00:03:36,000
samples which

00:03:33,519 --> 00:03:38,400
the evaluation interval is 60 seconds so

00:03:36,000 --> 00:03:40,720
this is about what you would expect

00:03:38,400 --> 00:03:42,640
um in order to make use of this data in

00:03:40,720 --> 00:03:44,080
the prometheus instance these blocks

00:03:42,640 --> 00:03:46,560
once they're validated

00:03:44,080 --> 00:03:48,560
um they need to be manually moved over

00:03:46,560 --> 00:03:49,840
to the data directory of the prometheus

00:03:48,560 --> 00:03:51,760
instance so

00:03:49,840 --> 00:03:53,120
i did that um once i did that you can

00:03:51,760 --> 00:03:55,439
look in the logs and you can see

00:03:53,120 --> 00:03:58,480
prometheus now sees

00:03:55,439 --> 00:04:00,640
that there's some over uh lapping blocks

00:03:58,480 --> 00:04:02,239
so when the next compaction hits um it's

00:04:00,640 --> 00:04:03,680
going to merge those blocks together and

00:04:02,239 --> 00:04:04,400
once that happens then the data is

00:04:03,680 --> 00:04:06,959
available

00:04:04,400 --> 00:04:08,799
back in the prometheus graph so back

00:04:06,959 --> 00:04:10,159
over here this is the first chart we

00:04:08,799 --> 00:04:12,000
looked at you can see the actual

00:04:10,159 --> 00:04:14,159
query is right here and we have all that

00:04:12,000 --> 00:04:16,320
data and then the

00:04:14,159 --> 00:04:18,079
recording rules over here now now we

00:04:16,320 --> 00:04:19,359
actually have all this past data for the

00:04:18,079 --> 00:04:22,639
recording rule

00:04:19,359 --> 00:04:26,400
um and you can confirm that it looks

00:04:22,639 --> 00:04:29,440
pretty good and that's it

00:04:26,400 --> 00:04:30,400
so for future work for this um i would

00:04:29,440 --> 00:04:32,400
like to add a

00:04:30,400 --> 00:04:33,600
another sub command that will validate

00:04:32,400 --> 00:04:35,840
the blocks for you

00:04:33,600 --> 00:04:38,080
and also move the blocks over to a

00:04:35,840 --> 00:04:40,880
specified previous editor just to

00:04:38,080 --> 00:04:42,000
eliminate those manual steps and then um

00:04:40,880 --> 00:04:44,880
still we need to add still

00:04:42,000 --> 00:04:45,919
markers i'm gonna do that soon and

00:04:44,880 --> 00:04:49,440
anything else

00:04:45,919 --> 00:04:51,759
if uh if anybody uses this feature and

00:04:49,440 --> 00:04:53,759
has any ideas how to make it better or

00:04:51,759 --> 00:04:55,600
there's other um use cases that are

00:04:53,759 --> 00:04:56,240
needed or bugs or whatever um let me

00:04:55,600 --> 00:04:58,320
know

00:04:56,240 --> 00:04:59,840
and then lastly i just wrote a quick

00:04:58,320 --> 00:05:02,240
blog post that

00:04:59,840 --> 00:05:03,039
uh has these kind of the same

00:05:02,240 --> 00:05:05,280
information

00:05:03,039 --> 00:05:07,039
from this uh talk and with a little more

00:05:05,280 --> 00:05:08,479
detail and links to docs and stuff so

00:05:07,039 --> 00:05:11,840
check that out if you want

00:05:08,479 --> 00:05:11,840

YouTube URL: https://www.youtube.com/watch?v=brnjsDwH9jk


