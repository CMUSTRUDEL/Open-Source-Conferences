Title: Lightning Talk: Load testing your Prometheus Remote Write endpoints - Daniel González Lopes, k6.io
Publication date: 2021-05-03
Playlist: PromCon Online EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Load testing your Prometheus Remote Write endpoints - Daniel González Lopes, k6.io

"Remote write storage is supported by several systems (Cortex, Thanos, M3DB, InfluxDB) and since 2.25.0 by Prometheus itself.
​
In this lightning talk, you will learn how to load test these systems using the open-source tool k6 and its fresh new xk6 remote write extension. Also, we'll briefly talk about additional use cases and how to export the results to Prometheus."
Captions: 
	00:00:00,160 --> 00:00:03,760
hi welcome to love testing your promise

00:00:02,159 --> 00:00:07,600
here remote buy timeframes

00:00:03,760 --> 00:00:09,440
my name is daniel i'm a tribute in here

00:00:07,600 --> 00:00:10,719
and on my free time excellent maintain

00:00:09,440 --> 00:00:12,880
rafanatenko

00:00:10,719 --> 00:00:14,480
you can reach me on some places online

00:00:12,880 --> 00:00:17,520
so if you want please

00:00:14,480 --> 00:00:18,720
go ahead so promisius offers this

00:00:17,520 --> 00:00:20,400
removed white api

00:00:18,720 --> 00:00:22,400
that lets you send samples from a

00:00:20,400 --> 00:00:23,439
prometheus instance to some external

00:00:22,400 --> 00:00:25,760
backend

00:00:23,439 --> 00:00:27,359
there are a lot of compatible backends

00:00:25,760 --> 00:00:30,720
two of the most prominent ones are

00:00:27,359 --> 00:00:32,719
cortex and thanos also it's interesting

00:00:30,720 --> 00:00:34,640
that prometheus itself supports remote

00:00:32,719 --> 00:00:36,239
quite signs 2.25

00:00:34,640 --> 00:00:38,480
it's experimental feature but it's

00:00:36,239 --> 00:00:40,800
something very good

00:00:38,480 --> 00:00:42,160
so some weeks ago actually this is why

00:00:40,800 --> 00:00:44,160
this torque exists

00:00:42,160 --> 00:00:46,879
i deployed cortex in microservices and

00:00:44,160 --> 00:00:48,640
mouse on top of kubernetes and i did

00:00:46,879 --> 00:00:50,640
this for learning purposes

00:00:48,640 --> 00:00:52,559
and the setup was great and i thought

00:00:50,640 --> 00:00:55,680
everything was running smoothly but i

00:00:52,559 --> 00:00:57,680
have some questions i wasn't sure if i

00:00:55,680 --> 00:00:59,760
had configured all the components

00:00:57,680 --> 00:01:01,520
properly and i didn't know if i have

00:00:59,760 --> 00:01:02,079
provisions enough resources in

00:01:01,520 --> 00:01:04,799
government

00:01:02,079 --> 00:01:06,479
to handle some basic laws so what i

00:01:04,799 --> 00:01:07,200
wanted to do is i wanted to generate

00:01:06,479 --> 00:01:10,400
some loads

00:01:07,200 --> 00:01:12,880
on this ingestion path and

00:01:10,400 --> 00:01:14,479
to understand how cortex will behave and

00:01:12,880 --> 00:01:17,680
how all the components will

00:01:14,479 --> 00:01:19,439
will work so i picked my favorite load

00:01:17,680 --> 00:01:20,640
testing tool for the job and that tool

00:01:19,439 --> 00:01:22,720
is physics

00:01:20,640 --> 00:01:24,799
kisis is an open source tool written in

00:01:22,720 --> 00:01:26,880
gold that lets you create your tests

00:01:24,799 --> 00:01:28,640
as codes in javascript even the

00:01:26,880 --> 00:01:29,040
configuration can be called so you can

00:01:28,640 --> 00:01:31,600
count

00:01:29,040 --> 00:01:33,040
everything on a repository or hit

00:01:31,600 --> 00:01:35,119
repository

00:01:33,040 --> 00:01:36,479
i want to say as a disclaimer that i

00:01:35,119 --> 00:01:38,960
work for kisses

00:01:36,479 --> 00:01:40,000
for the company behind it but i have to

00:01:38,960 --> 00:01:41,840
say that i'm here

00:01:40,000 --> 00:01:43,600
not because i'm sponsored or something

00:01:41,840 --> 00:01:45,119
like that it's just because i like the

00:01:43,600 --> 00:01:47,520
tool and i think that it's useful for

00:01:45,119 --> 00:01:50,799
some user spaces

00:01:47,520 --> 00:01:53,360
so i thought okay i can create a test

00:01:50,799 --> 00:01:54,720
in e6 using javascript for testing my

00:01:53,360 --> 00:01:57,600
remote brightness points out

00:01:54,720 --> 00:01:58,640
that's it but i'm a little lazy and i

00:01:57,600 --> 00:02:01,600
thought

00:01:58,640 --> 00:02:02,719
but i don't want to write that much

00:02:01,600 --> 00:02:05,759
javascript

00:02:02,719 --> 00:02:08,000
so yeah here it comes

00:02:05,759 --> 00:02:10,640
disclaimer this stuff is experimental

00:02:08,000 --> 00:02:13,120
but cool keep that in mind

00:02:10,640 --> 00:02:14,160
earlier this year k6 developers added

00:02:13,120 --> 00:02:16,640
support for

00:02:14,160 --> 00:02:18,800
key 6 extensions and this means that you

00:02:16,640 --> 00:02:21,040
can write go code

00:02:18,800 --> 00:02:23,200
use your code models and get that code

00:02:21,040 --> 00:02:25,280
for javascript from your test

00:02:23,200 --> 00:02:27,599
so when i saw this i went ahead and i

00:02:25,280 --> 00:02:28,480
created a bunch of extensions and one of

00:02:27,599 --> 00:02:31,360
them was for

00:02:28,480 --> 00:02:32,000
remote white so this extension is really

00:02:31,360 --> 00:02:34,480
basic

00:02:32,000 --> 00:02:36,560
but we will see how to use it um yeah i

00:02:34,480 --> 00:02:38,560
hope you like it

00:02:36,560 --> 00:02:40,400
so for using the extension you have to

00:02:38,560 --> 00:02:42,000
create your own k6 binary

00:02:40,400 --> 00:02:44,319
this is very easy you just have to

00:02:42,000 --> 00:02:46,160
download the x kisses helper

00:02:44,319 --> 00:02:48,080
and once you have that you put the

00:02:46,160 --> 00:02:48,879
version of q6 that you want to use as a

00:02:48,080 --> 00:02:51,120
base

00:02:48,879 --> 00:02:54,480
and put the name of the stencils that

00:02:51,120 --> 00:02:56,560
you want to bundle onto this new binary

00:02:54,480 --> 00:02:57,760
once we have the binary we can create

00:02:56,560 --> 00:03:00,560
our text

00:02:57,760 --> 00:03:03,120
as you can see i'm importing my remote

00:03:00,560 --> 00:03:05,760
write extension in javascript

00:03:03,120 --> 00:03:06,640
i'm instantiating a new client pointing

00:03:05,760 --> 00:03:09,280
to my

00:03:06,640 --> 00:03:11,680
remote right packets and once i have

00:03:09,280 --> 00:03:15,120
that i can use the store now methods

00:03:11,680 --> 00:03:19,360
this method is used for sending a sample

00:03:15,120 --> 00:03:21,360
to these remote right vacant some levels

00:03:19,360 --> 00:03:22,640
with some value right and storing this

00:03:21,360 --> 00:03:24,720
this sample

00:03:22,640 --> 00:03:27,120
also i'm checking that the response from

00:03:24,720 --> 00:03:27,840
from this request is 200 because i want

00:03:27,120 --> 00:03:30,879
to see if

00:03:27,840 --> 00:03:32,799
everything went great properly

00:03:30,879 --> 00:03:34,879
i'm going to run this for 10 seconds and

00:03:32,799 --> 00:03:37,360
with 50 producers

00:03:34,879 --> 00:03:39,200
when i run this k6 is going to give me a

00:03:37,360 --> 00:03:42,239
lot of information on how my

00:03:39,200 --> 00:03:44,720
test my really basic test performs i get

00:03:42,239 --> 00:03:46,319
some basic metrics generated by k6 but

00:03:44,720 --> 00:03:48,799
also custom metrics

00:03:46,319 --> 00:03:50,400
that my extension generates like remote

00:03:48,799 --> 00:03:52,959
request duration and remote write

00:03:50,400 --> 00:03:55,040
request total

00:03:52,959 --> 00:03:56,799
so probably you are thinking okay daniel

00:03:55,040 --> 00:03:58,480
it's handy to get this summary but i

00:03:56,799 --> 00:04:00,080
would like to see how these metrics

00:03:58,480 --> 00:04:02,879
perform over time to understand

00:04:00,080 --> 00:04:03,439
how my test behaves and keysig support

00:04:02,879 --> 00:04:05,760
is

00:04:03,439 --> 00:04:06,879
you can ship your metrics in real time

00:04:05,760 --> 00:04:09,519
to some backend

00:04:06,879 --> 00:04:10,239
and to charge them whatever you want the

00:04:09,519 --> 00:04:13,519
thing is that

00:04:10,239 --> 00:04:15,920
promise use is not yet supported

00:04:13,519 --> 00:04:17,359
so how does the future look like for the

00:04:15,920 --> 00:04:20,239
remote write extension

00:04:17,359 --> 00:04:22,000
i mean it's tiny it works and it lets

00:04:20,239 --> 00:04:22,960
you model almost any scenario that you

00:04:22,000 --> 00:04:25,440
want

00:04:22,960 --> 00:04:26,560
you can write your javascript codes and

00:04:25,440 --> 00:04:29,199
model it as

00:04:26,560 --> 00:04:31,199
any other test i would like to refactor

00:04:29,199 --> 00:04:32,320
it a bit to use the official remote

00:04:31,199 --> 00:04:34,960
right client

00:04:32,320 --> 00:04:35,759
but yeah on the other hand about

00:04:34,960 --> 00:04:38,160
exporter

00:04:35,759 --> 00:04:40,639
or the output super misuse it's

00:04:38,160 --> 00:04:42,400
something that we don't have

00:04:40,639 --> 00:04:44,240
there are ideas to what the support to

00:04:42,400 --> 00:04:47,040
promise you there is like a related

00:04:44,240 --> 00:04:47,919
issue if you want to hack this from

00:04:47,040 --> 00:04:49,280
tokyo so you

00:04:47,919 --> 00:04:51,520
think that it's interesting please

00:04:49,280 --> 00:04:53,600
foreign comment

00:04:51,520 --> 00:04:55,759
what you will expect of this integration

00:04:53,600 --> 00:04:57,440
um yeah just give a like on the issue if

00:04:55,759 --> 00:04:58,800
you find it useful

00:04:57,440 --> 00:05:01,120
on the other hand side one class that

00:04:58,800 --> 00:05:03,440
this can be implemented as an x-kisses

00:05:01,120 --> 00:05:04,560
output extension someone from community

00:05:03,440 --> 00:05:07,199
are really added

00:05:04,560 --> 00:05:07,840
one for an influx db version two so

00:05:07,199 --> 00:05:09,520
maybe

00:05:07,840 --> 00:05:11,039
when the stock is released we already

00:05:09,520 --> 00:05:14,400
have one for probably use

00:05:11,039 --> 00:05:16,560
you know thank you a lot

00:05:14,400 --> 00:05:17,919
for for coming to my presentation here

00:05:16,560 --> 00:05:22,800
at chromeprocom

00:05:17,919 --> 00:05:22,800

YouTube URL: https://www.youtube.com/watch?v=qrbmlTTthQk


