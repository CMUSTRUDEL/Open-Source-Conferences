Title: A New Kid in Histogram Town - Björn Rabenstein, Code Fresh & RedHat
Publication date: 2021-05-03
Playlist: PromCon Online EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

A New Kid in Histogram Town - Björn Rabenstein, Code Fresh & RedHat

“Bedecke deinen Himmel, Zeus! A new kid is in town.”

That was the beginning of Prometheus's README.md in the olden days of your favorite monitoring system. Prometheus changed how the world was doing monitoring. Now it is time to change how Prometheus is doing histograms.

After a lot of research and even more delays, we finally have a design doc with the momentous title “Sparse high-resolution histograms for Prometheus”. Guided by this document, we are currently working on making better histograms for Prometheus a reality. This talk will tell you about what already works and what the next steps will be."
Captions: 
	00:00:00,080 --> 00:00:03,520
hello my name is bjorn i work for a

00:00:02,560 --> 00:00:06,160
company called

00:00:03,520 --> 00:00:07,600
corfana labs which you might have heard

00:00:06,160 --> 00:00:09,200
about

00:00:07,600 --> 00:00:11,360
but for much longer time i've been

00:00:09,200 --> 00:00:13,759
working for a project

00:00:11,360 --> 00:00:14,480
called prometheus that you almost

00:00:13,759 --> 00:00:17,359
certainly

00:00:14,480 --> 00:00:20,240
have heard about if not what are you

00:00:17,359 --> 00:00:23,600
doing here this is prom con right

00:00:20,240 --> 00:00:26,240
all right um so if you know me

00:00:23,600 --> 00:00:26,960
you know that i have an infamously

00:00:26,240 --> 00:00:29,599
favorite

00:00:26,960 --> 00:00:30,720
topic in prometheus land which is

00:00:29,599 --> 00:00:34,079
histograms and

00:00:30,720 --> 00:00:37,520
once more i'll talk about histograms

00:00:34,079 --> 00:00:41,360
a new kid in histogram town which

00:00:37,520 --> 00:00:44,399
you might know is a reference to

00:00:41,360 --> 00:00:46,800
this very first almost very first commit

00:00:44,399 --> 00:00:47,840
in the prometheus prometheus repo

00:00:46,800 --> 00:00:51,280
november

00:00:47,840 --> 00:00:54,480
2012 ancient times right

00:00:51,280 --> 00:00:55,520
matt proud himself uh committed this and

00:00:54,480 --> 00:00:58,640
the first

00:00:55,520 --> 00:01:00,079
sentence here is decadent source a new

00:00:58,640 --> 00:01:02,559
kid is in town

00:01:00,079 --> 00:01:04,239
a mysterious reference i mean in the

00:01:02,559 --> 00:01:06,000
days of web search nothing is mysterious

00:01:04,239 --> 00:01:07,680
you just

00:01:06,000 --> 00:01:09,040
paste it into google and then you know

00:01:07,680 --> 00:01:11,439
what it is but

00:01:09,040 --> 00:01:13,600
let's keep the suspense here i'll i'll

00:01:11,439 --> 00:01:14,880
tell i'll talk about the first part of

00:01:13,600 --> 00:01:16,080
this mysterious reference in the

00:01:14,880 --> 00:01:18,159
mysterious language

00:01:16,080 --> 00:01:20,240
uh as the last thing in the talk so you

00:01:18,159 --> 00:01:21,920
have something to look forward to

00:01:20,240 --> 00:01:23,360
now let's call it about the new gators

00:01:21,920 --> 00:01:25,920
in town that's where i took

00:01:23,360 --> 00:01:28,240
my title from right so back then

00:01:25,920 --> 00:01:31,360
prometheus was a new kid in town

00:01:28,240 --> 00:01:35,119
nobody or at least not very many had an

00:01:31,360 --> 00:01:37,840
idea how to do monitoring in that way

00:01:35,119 --> 00:01:38,880
um and then prometheus became very

00:01:37,840 --> 00:01:40,960
famous and it's

00:01:38,880 --> 00:01:42,479
not so new anymore so this is probably

00:01:40,960 --> 00:01:44,240
why this

00:01:42,479 --> 00:01:46,000
this sentence is not in the readme

00:01:44,240 --> 00:01:49,600
anymore

00:01:46,000 --> 00:01:52,240
anyway back then the interesting part is

00:01:49,600 --> 00:01:54,240
that prometheus was new but it was not

00:01:52,240 --> 00:01:56,640
like unheard of there were a few people

00:01:54,240 --> 00:01:58,640
mostly working at google i guess that

00:01:56,640 --> 00:02:01,840
that knew this kind of monitoring

00:01:58,640 --> 00:02:03,520
and um yeah and then there was theory

00:02:01,840 --> 00:02:04,240
about this how monitoring works and

00:02:03,520 --> 00:02:06,000
everything so

00:02:04,240 --> 00:02:07,680
this is not like prometheus essentially

00:02:06,000 --> 00:02:09,520
made this available

00:02:07,680 --> 00:02:11,920
for for everyone in the open source

00:02:09,520 --> 00:02:13,440
world but it it's it's like it wasn't

00:02:11,920 --> 00:02:15,840
fundamentally new that

00:02:13,440 --> 00:02:16,800
nobody had heard about all those ideas

00:02:15,840 --> 00:02:19,280
before

00:02:16,800 --> 00:02:20,160
and that's a similar thing like um

00:02:19,280 --> 00:02:23,120
fractal

00:02:20,160 --> 00:02:24,000
self referential repetition of history

00:02:23,120 --> 00:02:26,480
or something with

00:02:24,000 --> 00:02:28,640
histograms right so they are super new

00:02:26,480 --> 00:02:31,760
so new kid in instagram town

00:02:28,640 --> 00:02:35,200
we all have very very new histograms in

00:02:31,760 --> 00:02:38,000
prometheus but those histograms are like

00:02:35,200 --> 00:02:40,560
not really new they they are based on

00:02:38,000 --> 00:02:43,920
ideas that have been around for long for

00:02:40,560 --> 00:02:46,160
longer than prometheus actually and um

00:02:43,920 --> 00:02:47,840
just very basic idea it's just the

00:02:46,160 --> 00:02:49,200
challenge is more like how can we make

00:02:47,840 --> 00:02:51,440
them fit into

00:02:49,200 --> 00:02:52,640
the prometheus way of doing things and

00:02:51,440 --> 00:02:55,840
that's a lot of my

00:02:52,640 --> 00:02:58,720
recent work about and also um

00:02:55,840 --> 00:03:00,159
another idea here is that yeah i've been

00:02:58,720 --> 00:03:02,720
talking about histograms forever right

00:03:00,159 --> 00:03:05,840
so this is not really new but it's still

00:03:02,720 --> 00:03:07,599
very new and yeah so

00:03:05,840 --> 00:03:09,120
i've been talking about this forever

00:03:07,599 --> 00:03:12,319
especially you could

00:03:09,120 --> 00:03:13,280
uh watch this trilogy of talks um

00:03:12,319 --> 00:03:15,200
interestingly

00:03:13,280 --> 00:03:16,640
the first part of the trilogy is newer

00:03:15,200 --> 00:03:20,000
than the second it's kind of

00:03:16,640 --> 00:03:23,040
a prequel but we know this right um

00:03:20,000 --> 00:03:26,080
this is about kind of why

00:03:23,040 --> 00:03:27,599
histograms haven't materialized yet the

00:03:26,080 --> 00:03:30,720
new style histograms

00:03:27,599 --> 00:03:33,040
uh kind of the history how we knew

00:03:30,720 --> 00:03:35,280
that the existing histograms are kind of

00:03:33,040 --> 00:03:36,560
a prototype but we got stuck with them

00:03:35,280 --> 00:03:38,159
for some reason

00:03:36,560 --> 00:03:39,680
and then certain events happened that

00:03:38,159 --> 00:03:42,959
made it even harder to

00:03:39,680 --> 00:03:45,920
to like follow up with the old ideas

00:03:42,959 --> 00:03:46,799
uh so this is kind of this first part um

00:03:45,920 --> 00:03:49,760
it's kind of

00:03:46,799 --> 00:03:51,040
a bit funny recreational the second part

00:03:49,760 --> 00:03:54,319
is the most important one

00:03:51,040 --> 00:03:56,080
as often with trilogies um

00:03:54,319 --> 00:03:58,080
it was supposed to also talk about the

00:03:56,080 --> 00:04:00,319
past we didn't which didn't happen so

00:03:58,080 --> 00:04:01,200
that's why there's a first part now a

00:04:00,319 --> 00:04:04,560
prequel

00:04:01,200 --> 00:04:04,959
so the second talk talks about what we

00:04:04,560 --> 00:04:07,760
are

00:04:04,959 --> 00:04:08,879
present state as of 2019 prom gone two

00:04:07,760 --> 00:04:11,280
years ago

00:04:08,879 --> 00:04:12,400
uh and the future what options do we

00:04:11,280 --> 00:04:15,040
have um

00:04:12,400 --> 00:04:16,560
where to go uh so that's very important

00:04:15,040 --> 00:04:18,880
to understand where we are

00:04:16,560 --> 00:04:20,079
and then the third part of the trilogy

00:04:18,880 --> 00:04:22,560
is kubecon

00:04:20,079 --> 00:04:24,960
last year two point eu but it's online

00:04:22,560 --> 00:04:27,280
and anyway so you can watch it

00:04:24,960 --> 00:04:28,160
um this is essentially after some

00:04:27,280 --> 00:04:31,120
research

00:04:28,160 --> 00:04:33,280
where i proposed what to do quite

00:04:31,120 --> 00:04:36,479
concretely already

00:04:33,280 --> 00:04:38,400
and i also announced a famously i

00:04:36,479 --> 00:04:40,639
announced a design knock this that will

00:04:38,400 --> 00:04:43,440
come out just after the talk

00:04:40,639 --> 00:04:44,400
in reality it took a bit longer so this

00:04:43,440 --> 00:04:48,000
got published

00:04:44,400 --> 00:04:50,720
in february this year not so long ago

00:04:48,000 --> 00:04:51,520
but here it is it's epic 26 pages or

00:04:50,720 --> 00:04:54,000
something

00:04:51,520 --> 00:04:54,720
so totally read it if you are this type

00:04:54,000 --> 00:04:58,000
of person

00:04:54,720 --> 00:04:59,280
but if you think this is too much effort

00:04:58,000 --> 00:05:02,639
just watch the talks

00:04:59,280 --> 00:05:03,440
um it will be also okay right so this

00:05:02,639 --> 00:05:06,720
went through

00:05:03,440 --> 00:05:08,720
various rounds of review and

00:05:06,720 --> 00:05:10,880
we discussed it at the prometheus dev

00:05:08,720 --> 00:05:11,919
summit and agreed that this is the way

00:05:10,880 --> 00:05:15,120
to go

00:05:11,919 --> 00:05:17,199
so this is kind of the the baseline

00:05:15,120 --> 00:05:19,120
on which we are working now i mean

00:05:17,199 --> 00:05:22,240
mostly it's me but i hope

00:05:19,120 --> 00:05:23,199
that i get help i need help from various

00:05:22,240 --> 00:05:25,680
experts

00:05:23,199 --> 00:05:27,840
and also like yeah contributors were

00:05:25,680 --> 00:05:29,520
asking what can i do and i told them i

00:05:27,840 --> 00:05:31,360
first have to come up with a master plan

00:05:29,520 --> 00:05:33,680
before we can even do anything right

00:05:31,360 --> 00:05:35,680
so this is the master plan here it is

00:05:33,680 --> 00:05:37,360
okay what does this talk about this talk

00:05:35,680 --> 00:05:40,960
is kind of a showcase

00:05:37,360 --> 00:05:44,320
what what already works and what are the

00:05:40,960 --> 00:05:47,600
kind of yeah very very imminent

00:05:44,320 --> 00:05:47,600
next steps to do

00:05:47,759 --> 00:05:52,000
so there there's a slide from the

00:05:49,919 --> 00:05:55,440
original trilogy third

00:05:52,000 --> 00:05:56,000
talk but i said i will not repeat those

00:05:55,440 --> 00:05:58,639
talks

00:05:56,000 --> 00:05:59,039
and um actually if you have never seen

00:05:58,639 --> 00:06:01,280
any

00:05:59,039 --> 00:06:02,560
of the or like if you have no clue what

00:06:01,280 --> 00:06:04,400
i'm talking about right now

00:06:02,560 --> 00:06:06,240
it will be also hard to follow the rest

00:06:04,400 --> 00:06:08,080
of this talk but this is

00:06:06,240 --> 00:06:10,000
online right you can stop this the

00:06:08,080 --> 00:06:11,680
stream now and you can watch those other

00:06:10,000 --> 00:06:14,319
talks or read the designer

00:06:11,680 --> 00:06:16,000
um or you can just keep watching and

00:06:14,319 --> 00:06:16,720
then later read it up and understand

00:06:16,000 --> 00:06:19,919
everything

00:06:16,720 --> 00:06:22,000
but in a nutshell right very shortly

00:06:19,919 --> 00:06:24,479
this is how the new histograms look like

00:06:22,000 --> 00:06:27,039
they have they embrace sparseness so

00:06:24,479 --> 00:06:30,560
empty pockets might happen all the time

00:06:27,039 --> 00:06:32,160
but they don't cost anything um in turn

00:06:30,560 --> 00:06:34,319
they have an infinite amount of pockets

00:06:32,160 --> 00:06:36,960
right so um

00:06:34,319 --> 00:06:38,560
they they they look like the same all

00:06:36,960 --> 00:06:38,960
those pockets but this is only because

00:06:38,560 --> 00:06:41,600
the

00:06:38,960 --> 00:06:43,840
x axis here is logarithmic so it's

00:06:41,600 --> 00:06:45,360
exponential pocket from zero to infinity

00:06:43,840 --> 00:06:46,240
and actually from zero to negative

00:06:45,360 --> 00:06:48,240
infinity

00:06:46,240 --> 00:06:49,599
but i haven't drawn this here there's a

00:06:48,240 --> 00:06:51,440
resolution parameter

00:06:49,599 --> 00:06:53,360
which tells you how many buckets every

00:06:51,440 --> 00:06:54,639
power of 10 has so after every power of

00:06:53,360 --> 00:06:59,039
10 you have an

00:06:54,639 --> 00:06:59,039
guaranteed like around um

00:07:00,319 --> 00:07:05,840
pocket boundary and then the

00:07:03,199 --> 00:07:08,400
mathematically inclined might already

00:07:05,840 --> 00:07:09,120
have noticed that around zero you will

00:07:08,400 --> 00:07:11,520
have an

00:07:09,120 --> 00:07:12,400
infinite density of pockets so there's a

00:07:11,520 --> 00:07:14,960
zero bucket

00:07:12,400 --> 00:07:16,240
of a certain very small width or just

00:07:14,960 --> 00:07:18,080
all the observations

00:07:16,240 --> 00:07:20,080
in this very small interval are falling

00:07:18,080 --> 00:07:21,919
into this so-called zero bucket

00:07:20,080 --> 00:07:24,560
that's how they look like and that's how

00:07:21,919 --> 00:07:28,000
we encode them in the exposition format

00:07:24,560 --> 00:07:31,120
um so the actually populated pocket are

00:07:28,000 --> 00:07:32,000
marked down as spans and then within

00:07:31,120 --> 00:07:35,280
each pocket

00:07:32,000 --> 00:07:37,840
we we just have deltas

00:07:35,280 --> 00:07:39,840
between one bucket and the next we don't

00:07:37,840 --> 00:07:40,160
record the absolute value in each pocket

00:07:39,840 --> 00:07:42,639
they

00:07:40,160 --> 00:07:44,080
those numbers could grow quite a bit but

00:07:42,639 --> 00:07:47,199
the deltas in between

00:07:44,080 --> 00:07:49,840
are usually smaller because pockets just

00:07:47,199 --> 00:07:50,720
like i mean in a very chaotic

00:07:49,840 --> 00:07:52,800
distribution

00:07:50,720 --> 00:07:55,280
this might not work out but in reality

00:07:52,800 --> 00:07:57,280
you have kind of smooth distributions

00:07:55,280 --> 00:07:58,319
so going from one bucket to the next is

00:07:57,280 --> 00:08:00,800
usually a small

00:07:58,319 --> 00:08:01,599
step and smaller numbers if you do some

00:08:00,800 --> 00:08:04,240
kind of fine

00:08:01,599 --> 00:08:05,360
encoding can be encoded in fewer bytes

00:08:04,240 --> 00:08:08,319
and that's how

00:08:05,360 --> 00:08:10,800
it works out on the wire this is by the

00:08:08,319 --> 00:08:11,280
way kind of built in into protobuf

00:08:10,800 --> 00:08:13,280
that's

00:08:11,280 --> 00:08:15,039
one of the ideas of protograph which is

00:08:13,280 --> 00:08:17,199
also the reason why we're kind of

00:08:15,039 --> 00:08:20,160
bringing back protobar format

00:08:17,199 --> 00:08:21,680
for at least experimenting with the new

00:08:20,160 --> 00:08:24,000
histograms

00:08:21,680 --> 00:08:26,479
we'll certainly not just bring back the

00:08:24,000 --> 00:08:29,919
old protocol format in the final

00:08:26,479 --> 00:08:31,840
release code but like you should notice

00:08:29,919 --> 00:08:33,760
that openmetrics has a prototype option

00:08:31,840 --> 00:08:35,760
so this is probably something

00:08:33,760 --> 00:08:36,800
more like the direction to go in the end

00:08:35,760 --> 00:08:39,919
but for now we just

00:08:36,800 --> 00:08:43,680
experiment with old prototype format

00:08:39,919 --> 00:08:46,399
extended for those new histograms

00:08:43,680 --> 00:08:47,279
all right um this is enough about old

00:08:46,399 --> 00:08:50,240
slides

00:08:47,279 --> 00:08:51,440
now i want to show what is already there

00:08:50,240 --> 00:08:53,920
um the

00:08:51,440 --> 00:08:54,640
as you could already have guessed the

00:08:53,920 --> 00:08:57,920
development

00:08:54,640 --> 00:08:58,880
is kind of in flux so we don't do this

00:08:57,920 --> 00:09:00,880
in main

00:08:58,880 --> 00:09:02,320
it is also quite invasive which is

00:09:00,880 --> 00:09:04,560
another reason why we can't just hide

00:09:02,320 --> 00:09:06,800
this behind a feature flag or something

00:09:04,560 --> 00:09:08,720
so there will be development in a

00:09:06,800 --> 00:09:10,320
separate branch for now

00:09:08,720 --> 00:09:13,680
and the branch will be called sparse

00:09:10,320 --> 00:09:17,200
histogram in various repos

00:09:13,680 --> 00:09:19,440
at some point this will be

00:09:17,200 --> 00:09:20,560
ready to go into main perhaps this is

00:09:19,440 --> 00:09:23,120
the point where we

00:09:20,560 --> 00:09:24,560
cut prometheus three but we don't have

00:09:23,120 --> 00:09:26,959
to decide that right now right

00:09:24,560 --> 00:09:28,399
this is what we experiment in a branch

00:09:26,959 --> 00:09:32,160
prometheus prometheus is

00:09:28,399 --> 00:09:33,760
where the meat is right so it's uh tsdv

00:09:32,160 --> 00:09:35,519
promql ingestion

00:09:33,760 --> 00:09:37,519
but of course we have to start with

00:09:35,519 --> 00:09:39,279
exposition and we have to pick an

00:09:37,519 --> 00:09:42,080
exposition library for that

00:09:39,279 --> 00:09:44,399
and as i already hinted we're using

00:09:42,080 --> 00:09:46,320
protobuf the old protobar format and the

00:09:44,399 --> 00:09:47,200
only official exposition library that

00:09:46,320 --> 00:09:49,920
still

00:09:47,200 --> 00:09:51,600
is backed by the original protobuf data

00:09:49,920 --> 00:09:53,040
model and format is client goaling so we

00:09:51,600 --> 00:09:55,519
just use that one

00:09:53,040 --> 00:09:56,959
also we all like go right so kind of

00:09:55,519 --> 00:09:58,560
nice coincidence

00:09:56,959 --> 00:10:00,240
the original prototype format is

00:09:58,560 --> 00:10:03,519
described in the client

00:10:00,240 --> 00:10:05,279
model repository which also will have a

00:10:03,519 --> 00:10:08,399
sparse histogram branch right

00:10:05,279 --> 00:10:10,560
so that's the idea here all right um

00:10:08,399 --> 00:10:11,440
let's look at the changes um incline

00:10:10,560 --> 00:10:13,200
model that's

00:10:11,440 --> 00:10:15,839
really very little these are all the

00:10:13,200 --> 00:10:17,920
changes and now you see how easy it is

00:10:15,839 --> 00:10:19,120
you have this pause pocket resolution

00:10:17,920 --> 00:10:21,920
you have the

00:10:19,120 --> 00:10:23,680
width of the zero bucket you have the

00:10:21,920 --> 00:10:25,040
count of observation the zero bucket and

00:10:23,680 --> 00:10:26,320
then you have negative and positive

00:10:25,040 --> 00:10:29,120
sprawl sprockets

00:10:26,320 --> 00:10:30,640
which both are just a series of spans

00:10:29,120 --> 00:10:32,640
with offset and length

00:10:30,640 --> 00:10:34,160
and the deltas between one bucket and

00:10:32,640 --> 00:10:35,680
the next and as said if you

00:10:34,160 --> 00:10:37,279
pick the right data type here in

00:10:35,680 --> 00:10:40,320
protobuf you'll get

00:10:37,279 --> 00:10:43,680
va encoding for free on the wire so

00:10:40,320 --> 00:10:45,360
this is a very efficient way of encoding

00:10:43,680 --> 00:10:48,320
those boss histograms

00:10:45,360 --> 00:10:50,079
without doing a lot of special super

00:10:48,320 --> 00:10:52,640
fancy

00:10:50,079 --> 00:10:54,640
bitwise encoding or something so that's

00:10:52,640 --> 00:10:55,360
super easy to to get done and it's

00:10:54,640 --> 00:10:57,600
already

00:10:55,360 --> 00:10:59,360
quite efficient and might actually be in

00:10:57,600 --> 00:11:02,560
the sweet spot between

00:10:59,360 --> 00:11:04,560
encoding effort and and size on the wire

00:11:02,560 --> 00:11:05,920
this is all discussed in detail in the

00:11:04,560 --> 00:11:07,519
design door but these are all the

00:11:05,920 --> 00:11:08,880
changes we need in glide model pretty

00:11:07,519 --> 00:11:12,399
cool

00:11:08,880 --> 00:11:14,000
changes in client goal link are fairly

00:11:12,399 --> 00:11:16,640
involved so i can't show them on a

00:11:14,000 --> 00:11:19,680
single slide but i can demo them

00:11:16,640 --> 00:11:23,279
okay so here we are

00:11:19,680 --> 00:11:25,120
this is a simplistic minimalistic

00:11:23,279 --> 00:11:26,320
little program that exposes just a

00:11:25,120 --> 00:11:28,240
single histogram

00:11:26,320 --> 00:11:31,120
to do that i'm not using the default

00:11:28,240 --> 00:11:33,120
registry i use a custom registry here so

00:11:31,120 --> 00:11:36,000
that i don't have any

00:11:33,120 --> 00:11:36,560
weird default metrics just a histogram

00:11:36,000 --> 00:11:38,720
you see

00:11:36,560 --> 00:11:41,040
this is completely standard this is

00:11:38,720 --> 00:11:43,040
nothing new yet

00:11:41,040 --> 00:11:45,040
and the buckets i define i use the

00:11:43,040 --> 00:11:48,240
exponential pockets helper here

00:11:45,040 --> 00:11:50,639
to define 13 buckets and i

00:11:48,240 --> 00:11:52,959
use i calculate the factor here and this

00:11:50,639 --> 00:11:57,040
is the mathematic behind

00:11:52,959 --> 00:11:58,560
the width of the buckets in the sparse

00:11:57,040 --> 00:12:01,440
histogram so i use

00:11:58,560 --> 00:12:03,519
the old histograms but define pocket

00:12:01,440 --> 00:12:05,680
boundaries that will coincide with the

00:12:03,519 --> 00:12:07,360
bucket boundary of the sparse histogram

00:12:05,680 --> 00:12:09,920
you don't have to do this i'm just doing

00:12:07,360 --> 00:12:11,279
it to demonstrate something i'll talk

00:12:09,920 --> 00:12:13,839
about in a second

00:12:11,279 --> 00:12:15,839
register this now simulate observations

00:12:13,839 --> 00:12:17,279
so i simulate an observation every 10

00:12:15,839 --> 00:12:19,760
milliseconds so it's kind of

00:12:17,279 --> 00:12:20,639
as if we are serving 100 requests per

00:12:19,760 --> 00:12:23,600
second

00:12:20,639 --> 00:12:24,399
from this pseudo service binary or

00:12:23,600 --> 00:12:26,000
something

00:12:24,399 --> 00:12:28,240
and i use random numbers that are

00:12:26,000 --> 00:12:30,399
normally distributed 200 milliseconds

00:12:28,240 --> 00:12:31,279
plus minus 50 millisecond standard

00:12:30,399 --> 00:12:33,519
deviation

00:12:31,279 --> 00:12:35,279
so that we get a bit of a distribution

00:12:33,519 --> 00:12:38,880
right and we

00:12:35,279 --> 00:12:41,440
run this in a go routine serve metrics

00:12:38,880 --> 00:12:42,160
that's it right okay let's look at this

00:12:41,440 --> 00:12:45,200
how

00:12:42,160 --> 00:12:49,120
it will work out go run

00:12:45,200 --> 00:12:52,639
demo dot go and already runs right

00:12:49,120 --> 00:12:55,040
let's check this out let's curl the

00:12:52,639 --> 00:12:58,880
matrix endpoint

00:12:55,040 --> 00:13:01,279
adhd matrix

00:12:58,880 --> 00:13:02,639
there it is i mean so far nothing new

00:13:01,279 --> 00:13:05,760
right this is the

00:13:02,639 --> 00:13:06,240
classical histogram ideally i said this

00:13:05,760 --> 00:13:10,240
should

00:13:06,240 --> 00:13:12,560
uh have a round pocket boundary at every

00:13:10,240 --> 00:13:14,000
power of 10 uh floating point precision

00:13:12,560 --> 00:13:14,639
blah blah blah it doesn't really work

00:13:14,000 --> 00:13:16,959
out but

00:13:14,639 --> 00:13:17,680
you you get the idea right you can

00:13:16,959 --> 00:13:21,120
already see

00:13:17,680 --> 00:13:22,399
how we accumulate observations right and

00:13:21,120 --> 00:13:25,040
most of them are kind of

00:13:22,399 --> 00:13:25,600
ending up in in this pocket here uh this

00:13:25,040 --> 00:13:27,839
is

00:13:25,600 --> 00:13:29,519
cumulative like it goes up and over and

00:13:27,839 --> 00:13:30,160
up but like the delta between bucket is

00:13:29,519 --> 00:13:32,399
kind of

00:13:30,160 --> 00:13:33,519
what is actually in the pocket it's also

00:13:32,399 --> 00:13:36,000
a delta

00:13:33,519 --> 00:13:38,000
um and you see this is such a low

00:13:36,000 --> 00:13:40,160
resolution that most of the observations

00:13:38,000 --> 00:13:44,000
just end up in this one bucket here

00:13:40,160 --> 00:13:49,199
and we are going to change that right so

00:13:44,000 --> 00:13:52,720
let's um go back to

00:13:49,199 --> 00:13:52,720
my code um

00:13:54,240 --> 00:14:01,199
here i prepared this so i don't typo

00:13:58,079 --> 00:14:03,279
again mistype anything so this is the

00:14:01,199 --> 00:14:05,680
only line you have to add

00:14:03,279 --> 00:14:07,440
and i told you i want a default

00:14:05,680 --> 00:14:09,519
resolution of 32

00:14:07,440 --> 00:14:11,440
for these small sprockets right now in

00:14:09,519 --> 00:14:13,600
the code the default resolution

00:14:11,440 --> 00:14:15,519
is the default behavior is don't use

00:14:13,600 --> 00:14:17,839
small sprockets right

00:14:15,519 --> 00:14:18,959
now this just adds ball sprockets to the

00:14:17,839 --> 00:14:21,040
normal histogram

00:14:18,959 --> 00:14:22,800
in addition to the normal pockets so it

00:14:21,040 --> 00:14:26,079
tracks everything in parallel

00:14:22,800 --> 00:14:28,480
so we can look at it in parallel but

00:14:26,079 --> 00:14:29,600
this is why i use this interesting

00:14:28,480 --> 00:14:31,440
bucket layout

00:14:29,600 --> 00:14:33,040
if the buckets in the conventional

00:14:31,440 --> 00:14:35,519
history room are just

00:14:33,040 --> 00:14:36,720
coinciding with boundaries in the new

00:14:35,519 --> 00:14:38,880
sparse pocket

00:14:36,720 --> 00:14:40,720
the library could totally just use

00:14:38,880 --> 00:14:41,760
spouse pockets and then render the

00:14:40,720 --> 00:14:43,440
conventional buckets

00:14:41,760 --> 00:14:44,959
in a certain way i mean it can't render

00:14:43,440 --> 00:14:46,800
an infinite amount of pockets

00:14:44,959 --> 00:14:48,880
but it could render like those 13

00:14:46,800 --> 00:14:50,240
buckets if you want them

00:14:48,880 --> 00:14:52,079
based on the data on the sparse

00:14:50,240 --> 00:14:53,199
histogram so it only has to track the

00:14:52,079 --> 00:14:54,560
small histogram

00:14:53,199 --> 00:14:56,399
right now the code isn't doing this

00:14:54,560 --> 00:14:57,279
optimization you just get both in

00:14:56,399 --> 00:14:59,920
parallel

00:14:57,279 --> 00:15:01,680
so you could still do the old stuff okay

00:14:59,920 --> 00:15:03,920
now let's run this one

00:15:01,680 --> 00:15:03,920
um

00:15:05,519 --> 00:15:08,800
yeah what's happening here stop it run

00:15:07,519 --> 00:15:12,480
it

00:15:08,800 --> 00:15:15,279
and of course the existing released

00:15:12,480 --> 00:15:17,760
client calling library doesn't know

00:15:15,279 --> 00:15:21,600
anything about sports pocket resolution

00:15:17,760 --> 00:15:25,199
so what we have to do is use goget

00:15:21,600 --> 00:15:27,839
with go modules to tell

00:15:25,199 --> 00:15:28,800
go to fetch something from the sparse

00:15:27,839 --> 00:15:30,880
histogram branch

00:15:28,800 --> 00:15:32,560
um this is the way to do so remember

00:15:30,880 --> 00:15:35,680
this if you want to play with it

00:15:32,560 --> 00:15:38,240
on your own you just do this um

00:15:35,680 --> 00:15:39,199
and then go modules creates the pseudo

00:15:38,240 --> 00:15:42,320
version

00:15:39,199 --> 00:15:44,079
it's not 1.10.0 anymore about 1.10.1

00:15:42,320 --> 00:15:45,360
it's also pinned to a certain commit

00:15:44,079 --> 00:15:48,639
hash

00:15:45,360 --> 00:15:49,759
you can actually look at go mod to see

00:15:48,639 --> 00:15:53,040
how this works right

00:15:49,759 --> 00:15:54,560
so now it has pinned this here and even

00:15:53,040 --> 00:15:55,920
it has noticed but this will happen

00:15:54,560 --> 00:15:57,600
automatically

00:15:55,920 --> 00:15:59,360
thanks to what's inclined goaling that

00:15:57,600 --> 00:16:00,720
it also pins to a certain version of

00:15:59,360 --> 00:16:03,519
client model which is not

00:16:00,720 --> 00:16:05,120
in the main branch so that nobody's

00:16:03,519 --> 00:16:07,839
confused was actually using this

00:16:05,120 --> 00:16:09,600
normally okay now it should just work go

00:16:07,839 --> 00:16:13,600
and demo

00:16:09,600 --> 00:16:17,680
um it seems to work so let's curl

00:16:13,600 --> 00:16:18,560
this again and um as you can see nothing

00:16:17,680 --> 00:16:21,720
has changed

00:16:18,560 --> 00:16:23,839
this is kind of what's the weight

00:16:21,720 --> 00:16:27,279
anticlimactic right

00:16:23,839 --> 00:16:31,040
so the reason is that the text format is

00:16:27,279 --> 00:16:32,880
very very not suited at all to represent

00:16:31,040 --> 00:16:34,639
those small sprockets in an efficient

00:16:32,880 --> 00:16:37,920
way it's all done in the

00:16:34,639 --> 00:16:39,759
proto format which as i told you

00:16:37,920 --> 00:16:41,040
we are bringing back in prometheus just

00:16:39,759 --> 00:16:44,079
for this experiment

00:16:41,040 --> 00:16:45,360
and klein golling never left this path

00:16:44,079 --> 00:16:48,880
of virtue

00:16:45,360 --> 00:16:50,160
and so we can just tell to the current

00:16:48,880 --> 00:16:52,639
day that is possible right

00:16:50,160 --> 00:16:53,920
any go binary that instrumented

00:16:52,639 --> 00:16:58,160
prometheus client goaling

00:16:53,920 --> 00:16:59,519
can um can be asked to serve protobuf

00:16:58,160 --> 00:17:02,959
and you do this by

00:16:59,519 --> 00:17:06,079
adding this little header um

00:17:02,959 --> 00:17:07,280
hit enter now curl is very friendly and

00:17:06,079 --> 00:17:09,520
tells us this is

00:17:07,280 --> 00:17:10,799
horrible binary stuff if i dump this

00:17:09,520 --> 00:17:13,839
onto your terminal

00:17:10,799 --> 00:17:17,120
it will all beep and go whatever

00:17:13,839 --> 00:17:17,600
haywire so it's not doing this and

00:17:17,120 --> 00:17:21,120
that's

00:17:17,600 --> 00:17:22,240
cool um but how do we how do we look at

00:17:21,120 --> 00:17:25,600
the new stuff right

00:17:22,240 --> 00:17:26,959
so there's a little known secret um

00:17:25,600 --> 00:17:28,720
i mean there's the text format of

00:17:26,959 --> 00:17:29,600
prometheus and there's the proto format

00:17:28,720 --> 00:17:32,000
of prometheus

00:17:29,600 --> 00:17:33,840
but you can actually represent protobuf

00:17:32,000 --> 00:17:35,840
in a text form

00:17:33,840 --> 00:17:38,240
so now it's it's getting deeper right

00:17:35,840 --> 00:17:40,400
this is the text format of the

00:17:38,240 --> 00:17:42,080
protocol format if you just say encoding

00:17:40,400 --> 00:17:43,760
equals text

00:17:42,080 --> 00:17:45,200
and that's also works with every client

00:17:43,760 --> 00:17:47,360
golang

00:17:45,200 --> 00:17:48,720
instrumental binary you can do this at

00:17:47,360 --> 00:17:50,559
home if you want right

00:17:48,720 --> 00:17:52,080
so now you see the protobuf in a very

00:17:50,559 --> 00:17:54,480
verbose form on the wire

00:17:52,080 --> 00:17:55,760
usually this is the binary form which is

00:17:54,480 --> 00:17:58,240
very dense right

00:17:55,760 --> 00:17:58,799
so you see here in even more verbose

00:17:58,240 --> 00:18:02,080
than the

00:17:58,799 --> 00:18:04,160
normal text format this is the

00:18:02,080 --> 00:18:05,440
conventional histogram and now you get

00:18:04,160 --> 00:18:07,440
the new stuff

00:18:05,440 --> 00:18:08,480
so you get the sparse pocket resolution

00:18:07,440 --> 00:18:10,960
of 32

00:18:08,480 --> 00:18:11,679
the threshold you see we have two spans

00:18:10,960 --> 00:18:14,720
here

00:18:11,679 --> 00:18:17,520
one is just one pocket like one

00:18:14,720 --> 00:18:18,960
very low value observation and then we

00:18:17,520 --> 00:18:22,240
have 10 consecutive

00:18:18,960 --> 00:18:24,000
sorry 34 consecutive markets 10

00:18:22,240 --> 00:18:26,080
empty buckets later and here all the

00:18:24,000 --> 00:18:26,400
deltas and you see as promised they are

00:18:26,080 --> 00:18:29,200
all

00:18:26,400 --> 00:18:29,520
quite small they only get larger around

00:18:29,200 --> 00:18:32,000
the

00:18:29,520 --> 00:18:32,720
peak here right and then the minus means

00:18:32,000 --> 00:18:35,679
this is where

00:18:32,720 --> 00:18:36,480
the pockets become less populated again

00:18:35,679 --> 00:18:38,880
um

00:18:36,480 --> 00:18:39,840
yeah this is this is how they look uh in

00:18:38,880 --> 00:18:41,679
protorov

00:18:39,840 --> 00:18:43,440
we can't even see explicit boundaries

00:18:41,679 --> 00:18:44,640
and everything because this is all

00:18:43,440 --> 00:18:46,160
implicitly encoded

00:18:44,640 --> 00:18:48,320
in the convention what does the

00:18:46,160 --> 00:18:50,240
resolution number means

00:18:48,320 --> 00:18:52,320
but they they more or less coincide with

00:18:50,240 --> 00:18:54,799
those pockets like i said you could

00:18:52,320 --> 00:18:55,679
make the live renderer the conventional

00:18:54,799 --> 00:18:58,880
histogram

00:18:55,679 --> 00:19:01,280
at no additional cost essentially and um

00:18:58,880 --> 00:19:02,480
the scrapers that want the old instagram

00:19:01,280 --> 00:19:04,400
could still have this

00:19:02,480 --> 00:19:06,799
but you have to pick pockets you cannot

00:19:04,400 --> 00:19:10,880
expose an infinite number of pockets

00:19:06,799 --> 00:19:14,080
okay that's the demo um let's go back to

00:19:10,880 --> 00:19:14,559
uh the slides prometheus prometheus

00:19:14,080 --> 00:19:17,360
that's

00:19:14,559 --> 00:19:18,960
what we're all interested in right um so

00:19:17,360 --> 00:19:22,480
the problem here is that

00:19:18,960 --> 00:19:24,640
um this is actually the hard part right

00:19:22,480 --> 00:19:26,000
i'm currently working on ingesting the

00:19:24,640 --> 00:19:28,480
protobar format

00:19:26,000 --> 00:19:30,480
not in the super optimized form that is

00:19:28,480 --> 00:19:32,799
has been implemented for the text

00:19:30,480 --> 00:19:34,559
format it could be done by hand coding a

00:19:32,799 --> 00:19:36,559
prototype browser but yeah

00:19:34,559 --> 00:19:38,000
not doing this anytime soon this is just

00:19:36,559 --> 00:19:39,840
for experiments and i said

00:19:38,000 --> 00:19:41,520
we will we will find out what's the

00:19:39,840 --> 00:19:43,600
final choice of

00:19:41,520 --> 00:19:45,440
how to represent the new histograms on

00:19:43,600 --> 00:19:47,919
the wire and how to ingest them

00:19:45,440 --> 00:19:49,520
uh so that's easy to work on just check

00:19:47,919 --> 00:19:50,799
out if you watch this there might

00:19:49,520 --> 00:19:53,520
actually be something

00:19:50,799 --> 00:19:55,840
working in the sparse history and branch

00:19:53,520 --> 00:19:56,240
the hard but also very rewarding part is

00:19:55,840 --> 00:19:58,799
to

00:19:56,240 --> 00:20:00,559
teach the tsv to save those new

00:19:58,799 --> 00:20:03,120
histograms in an efficient way

00:20:00,559 --> 00:20:04,480
and this is where i hope for like these

00:20:03,120 --> 00:20:07,360
three experts to

00:20:04,480 --> 00:20:08,720
help and then he'll be dragons that's

00:20:07,360 --> 00:20:12,320
how prom ql

00:20:08,720 --> 00:20:15,280
um should uh do all of this

00:20:12,320 --> 00:20:17,280
to be like to to make full use of the

00:20:15,280 --> 00:20:18,960
new histograms you kind of need

00:20:17,280 --> 00:20:20,640
new concepts in prom ql where you

00:20:18,960 --> 00:20:22,240
actually act on an

00:20:20,640 --> 00:20:24,320
histogram with a potential infinite

00:20:22,240 --> 00:20:25,039
number of pockets like yeah you cannot

00:20:24,320 --> 00:20:27,039
just

00:20:25,039 --> 00:20:28,320
represent them all as individual time

00:20:27,039 --> 00:20:31,440
series from the

00:20:28,320 --> 00:20:33,280
point of view of promptql but to be

00:20:31,440 --> 00:20:36,480
again compatible you can again

00:20:33,280 --> 00:20:39,600
create this kind of view of

00:20:36,480 --> 00:20:41,679
an um new sparse histogram

00:20:39,600 --> 00:20:44,400
and and and present it as a conventional

00:20:41,679 --> 00:20:46,880
histogram with a selected

00:20:44,400 --> 00:20:48,400
number of conventional buckets so that's

00:20:46,880 --> 00:20:50,640
kind of a migration path

00:20:48,400 --> 00:20:52,400
but yeah in the in the the like shiny

00:20:50,640 --> 00:20:54,240
new world we have a prom girl that can

00:20:52,400 --> 00:20:57,120
actually act directly on

00:20:54,240 --> 00:20:59,280
on sparse histograms and recording rules

00:20:57,120 --> 00:21:01,760
that can spit out new sparse histograms

00:20:59,280 --> 00:21:04,799
and all those things right so that's

00:21:01,760 --> 00:21:07,280
really really tough to get right so um

00:21:04,799 --> 00:21:09,280
don't don't be too like this won't be

00:21:07,280 --> 00:21:12,400
done next month or something

00:21:09,280 --> 00:21:14,159
all right we are done here um and as

00:21:12,400 --> 00:21:15,919
promised resolution for

00:21:14,159 --> 00:21:17,200
the decadent himalayas that's of course

00:21:15,919 --> 00:21:20,559
german i think matt

00:21:17,200 --> 00:21:23,679
back then was really into german and um

00:21:20,559 --> 00:21:26,159
what's the greatest literary figure of

00:21:23,679 --> 00:21:27,600
modern german that's a person called

00:21:26,159 --> 00:21:30,080
goethe

00:21:27,600 --> 00:21:30,640
here i like him i just sometimes would

00:21:30,080 --> 00:21:32,799
go to

00:21:30,640 --> 00:21:34,799
easter eggs into my talks you might not

00:21:32,799 --> 00:21:36,720
have noticed so now it's very explicit

00:21:34,799 --> 00:21:37,520
right but it's not even my estate it was

00:21:36,720 --> 00:21:39,919
kind of

00:21:37,520 --> 00:21:40,960
mad who put this easter egg into it it's

00:21:39,919 --> 00:21:44,080
an awesome poem

00:21:40,960 --> 00:21:46,000
awesome mega rant again the gods mostly

00:21:44,080 --> 00:21:49,200
zeus

00:21:46,000 --> 00:21:51,520
so um you could now think why

00:21:49,200 --> 00:21:53,200
this what this has to do with prometheus

00:21:51,520 --> 00:21:54,960
there's one obvious reference of course

00:21:53,200 --> 00:21:57,200
the title of this poem is

00:21:54,960 --> 00:21:59,200
prometheus so perhaps matt just wanted

00:21:57,200 --> 00:22:00,240
to tell us i'm all now also writing a

00:21:59,200 --> 00:22:02,720
prometheus like

00:22:00,240 --> 00:22:04,320
like gutee did everyone should try to

00:22:02,720 --> 00:22:04,880
promote these ones in their life or

00:22:04,320 --> 00:22:08,080
something

00:22:04,880 --> 00:22:08,960
anyway that was it um you can see all my

00:22:08,080 --> 00:22:12,000
talks

00:22:08,960 --> 00:22:17,520
and how to reach me and we still have q

00:22:12,000 --> 00:22:17,520

YouTube URL: https://www.youtube.com/watch?v=rM8tR2SPJ4M


