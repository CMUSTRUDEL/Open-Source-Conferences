Title: Prometheus – What it is, What is New, and What is Coming - Richard Hartmann & Julien Pivotto
Publication date: 2021-05-09
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Prometheus – What it is, What is New, and What is Coming - Richard Hartmann, Grafana Labs & Julien Pivotto, Inuits

Prometheus is a metrics-based monitoring and alerting system and also the project with the second longest tenure within the CNCF. As such you have probably heard about it by now. We will give you a short introduction to Prometheus, what it is and why it was such a big deal when it was initially released. In all those years since then, the project has only gained speed, which provides us with the opportunity to tell you about all the exciting new features that have just been released or are in the pipeline, including opportunities to contribute to the project and its wider ecosystem.
Captions: 
	00:00:00,320 --> 00:00:04,000
welcome to this talk about prometheus

00:00:02,560 --> 00:00:06,399
when we see what it is

00:00:04,000 --> 00:00:07,759
what is new and what's coming i am jean

00:00:06,399 --> 00:00:10,320
pivotto i work at

00:00:07,759 --> 00:00:12,719
inuits and i have joined the primitives

00:00:10,320 --> 00:00:15,679
team in 2020

00:00:12,719 --> 00:00:17,960
and i'm richard i work at grafana labs

00:00:15,679 --> 00:00:20,400
and i have joined the team i think in

00:00:17,960 --> 00:00:22,640
2016.

00:00:20,400 --> 00:00:24,640
so let's talk about what prometheus is

00:00:22,640 --> 00:00:26,320
that is the quick 101

00:00:24,640 --> 00:00:28,480
it's inspired by google sporkman it's a

00:00:26,320 --> 00:00:32,000
time series database

00:00:28,480 --> 00:00:35,040
internally working with 64 64-bit

00:00:32,000 --> 00:00:36,160
values for um for all numerical data

00:00:35,040 --> 00:00:37,920
there is over a thousand

00:00:36,160 --> 00:00:38,719
community-created instrumentations and

00:00:37,920 --> 00:00:41,840
exporters

00:00:38,719 --> 00:00:44,000
um way more non-public ones

00:00:41,840 --> 00:00:45,760
it is for metrics not for logs

00:00:44,000 --> 00:00:49,120
dashboarding is done by grafana even

00:00:45,760 --> 00:00:49,120
before i joined cofounder labs

00:00:49,360 --> 00:00:53,120
it's a highly dynamic and built-in

00:00:52,160 --> 00:00:55,600
service discovery

00:00:53,120 --> 00:00:56,719
which means that you have a lot of

00:00:55,600 --> 00:00:58,879
different ways to put

00:00:56,719 --> 00:01:01,520
data or information about what systems

00:00:58,879 --> 00:01:03,440
to monitor into prometheus quite easily

00:01:01,520 --> 00:01:04,720
it's built in with kubernetes you can do

00:01:03,440 --> 00:01:07,600
zone transfer

00:01:04,720 --> 00:01:09,280
transfers through dns you can have a

00:01:07,600 --> 00:01:10,960
firebase service discovery where you can

00:01:09,280 --> 00:01:12,080
put in your own stuff from your own

00:01:10,960 --> 00:01:14,240
systems

00:01:12,080 --> 00:01:15,840
and there's dozens of other things how

00:01:14,240 --> 00:01:18,400
you can get the information about

00:01:15,840 --> 00:01:18,880
what to monitor into prometheus without

00:01:18,400 --> 00:01:20,960
any

00:01:18,880 --> 00:01:22,000
additional work on your it's literally

00:01:20,960 --> 00:01:24,400
taking it

00:01:22,000 --> 00:01:25,360
from your your operators from your

00:01:24,400 --> 00:01:27,119
orchestration

00:01:25,360 --> 00:01:29,439
from everything which which you might

00:01:27,119 --> 00:01:31,200
have it doesn't have a hierarchical data

00:01:29,439 --> 00:01:32,479
model it has an in-dimensional label set

00:01:31,200 --> 00:01:35,280
what that means is

00:01:32,479 --> 00:01:36,320
normally if you have hierarchical models

00:01:35,280 --> 00:01:38,799
you might have

00:01:36,320 --> 00:01:40,479
continent country and customer and then

00:01:38,799 --> 00:01:43,759
you need to select your your

00:01:40,479 --> 00:01:47,280
data by customer across

00:01:43,759 --> 00:01:48,880
all all continents and all of the sudden

00:01:47,280 --> 00:01:50,799
your hierarchy data model is already

00:01:48,880 --> 00:01:52,799
wrong for that type of query

00:01:50,799 --> 00:01:54,560
so by just attaching labels and allowing

00:01:52,799 --> 00:01:56,479
you to slice and dice your n-dimensional

00:01:54,560 --> 00:01:58,479
matrix however you want

00:01:56,479 --> 00:01:59,680
you can simply select by whatever you

00:01:58,479 --> 00:02:02,320
want

00:01:59,680 --> 00:02:03,439
for this you are using prompyo which is

00:02:02,320 --> 00:02:06,079
a functional language

00:02:03,439 --> 00:02:08,080
which is basically doing vector math

00:02:06,079 --> 00:02:10,560
what that means is you set your language

00:02:08,080 --> 00:02:11,120
up once or your calculations and then

00:02:10,560 --> 00:02:14,160
you just

00:02:11,120 --> 00:02:14,800
toss whatever amount of data into into

00:02:14,160 --> 00:02:16,720
this

00:02:14,800 --> 00:02:18,800
into this calculation and get the

00:02:16,720 --> 00:02:20,000
results set up no matter how much data

00:02:18,800 --> 00:02:21,760
comes or goes away

00:02:20,000 --> 00:02:23,599
you always get out what you want that's

00:02:21,760 --> 00:02:25,680
similar to how uh weather

00:02:23,599 --> 00:02:26,720
predictions and such are made this

00:02:25,680 --> 00:02:28,160
language is used for

00:02:26,720 --> 00:02:30,560
everything within prometheus for

00:02:28,160 --> 00:02:32,959
processing graphing alerting exporting

00:02:30,560 --> 00:02:34,959
everything where you work with the data

00:02:32,959 --> 00:02:38,000
you always go through control

00:02:34,959 --> 00:02:39,599
super nice it's really simple to operate

00:02:38,000 --> 00:02:41,519
you don't need teams upon teams or

00:02:39,599 --> 00:02:41,840
anything it is a monolith even though

00:02:41,519 --> 00:02:44,480
it's

00:02:41,840 --> 00:02:46,080
cloud native and is super highly

00:02:44,480 --> 00:02:47,920
efficient we'll be seeing a few numbers

00:02:46,080 --> 00:02:50,160
later

00:02:47,920 --> 00:02:52,560
it's a pull based system which gives you

00:02:50,160 --> 00:02:54,720
super nice properties around

00:02:52,560 --> 00:02:55,680
asserting that everything which should

00:02:54,720 --> 00:02:58,800
be there or

00:02:55,680 --> 00:03:00,879
is is part of your server discovery

00:02:58,800 --> 00:03:02,640
is also monitored and you always know

00:03:00,879 --> 00:03:04,560
what the latest status is and if it goes

00:03:02,640 --> 00:03:05,680
away or if it goes down you see this

00:03:04,560 --> 00:03:07,200
immediately

00:03:05,680 --> 00:03:09,280
which gives you very nice alerting

00:03:07,200 --> 00:03:12,720
properties

00:03:09,280 --> 00:03:14,560
very important concept

00:03:12,720 --> 00:03:17,120
concepts are black box monitoring where

00:03:14,560 --> 00:03:19,200
you look at things from the outside

00:03:17,120 --> 00:03:21,360
for example do you reply to http

00:03:19,200 --> 00:03:22,000
requests versus white box monitoring

00:03:21,360 --> 00:03:23,920
where you look

00:03:22,000 --> 00:03:27,120
in the inside of your code and your

00:03:23,920 --> 00:03:27,120
instrument from the inside

00:03:27,200 --> 00:03:31,280
usually in prometheus land every service

00:03:29,599 --> 00:03:32,640
should have its own metrics endpoint

00:03:31,280 --> 00:03:35,040
which is um

00:03:32,640 --> 00:03:36,000
unfamiliar for people who are used to

00:03:35,040 --> 00:03:38,640
agents

00:03:36,000 --> 00:03:40,319
there are various advantages to to

00:03:38,640 --> 00:03:42,000
having distant metric endpoint because

00:03:40,319 --> 00:03:43,120
you are not tied with your versions and

00:03:42,000 --> 00:03:44,720
you don't have this

00:03:43,120 --> 00:03:46,400
huge uplift when you have an upgrade or

00:03:44,720 --> 00:03:48,480
anything that being said we'll be

00:03:46,400 --> 00:03:51,440
talking about agents in a bit

00:03:48,480 --> 00:03:52,159
and we have super hard api commitments

00:03:51,440 --> 00:03:53,760
we even

00:03:52,159 --> 00:03:55,840
historically treated pretty much

00:03:53,760 --> 00:03:59,360
everything which was experimental

00:03:55,840 --> 00:04:01,519
as stable what are time series

00:03:59,360 --> 00:04:03,280
time series are recorded values which

00:04:01,519 --> 00:04:06,080
change over time

00:04:03,280 --> 00:04:08,879
temperature your memory usage how many

00:04:06,080 --> 00:04:08,879
requests you got

00:04:09,120 --> 00:04:13,280
what you can do with individual events

00:04:11,360 --> 00:04:14,480
is that you merge them into counters or

00:04:13,280 --> 00:04:17,120
histograms

00:04:14,480 --> 00:04:18,079
which is something which is also done

00:04:17,120 --> 00:04:20,479
extremely often

00:04:18,079 --> 00:04:21,280
in the networking scene which had a lot

00:04:20,479 --> 00:04:23,520
of those

00:04:21,280 --> 00:04:25,360
what is now cloud native scaling issues

00:04:23,520 --> 00:04:27,919
like two decades ago

00:04:25,360 --> 00:04:28,960
where you have this super cheap way of

00:04:27,919 --> 00:04:31,919
of

00:04:28,960 --> 00:04:33,120
compressing data along the axis which

00:04:31,919 --> 00:04:35,120
you care about

00:04:33,120 --> 00:04:36,720
and then emitting this this distilled

00:04:35,120 --> 00:04:37,759
information about whatever you're

00:04:36,720 --> 00:04:40,400
looking at

00:04:37,759 --> 00:04:41,360
it's super highly efficiency for both

00:04:40,400 --> 00:04:45,520
storage and

00:04:41,360 --> 00:04:45,520
transmitting um yeah

00:04:45,919 --> 00:04:50,080
the examples are you probably read them

00:04:48,160 --> 00:04:53,280
by now

00:04:50,080 --> 00:04:56,160
those are examples of of how an

00:04:53,280 --> 00:04:57,040
actual exposition might look like i even

00:04:56,160 --> 00:04:59,440
know people who

00:04:57,040 --> 00:05:01,199
literally print f in their c code and

00:04:59,440 --> 00:05:02,880
then just dump this file on

00:05:01,199 --> 00:05:05,039
on the web endpoint and that is their

00:05:02,880 --> 00:05:06,960
prometheus integration and it works

00:05:05,039 --> 00:05:08,240
like we have all the tooling and such to

00:05:06,960 --> 00:05:10,400
make this nicer

00:05:08,240 --> 00:05:11,600
but if you so choose you can literally

00:05:10,400 --> 00:05:13,759
print f or even

00:05:11,600 --> 00:05:15,440
just echo in your shell script it is

00:05:13,759 --> 00:05:18,720
really easy

00:05:15,440 --> 00:05:20,880
talk about scaling kubernetes is roughly

00:05:18,720 --> 00:05:22,560
equivalent to google spork

00:05:20,880 --> 00:05:24,320
prometheus is roughly equivalent to

00:05:22,560 --> 00:05:26,240
google sport ones but with the monarch

00:05:24,320 --> 00:05:29,600
apis

00:05:26,240 --> 00:05:31,520
and google couldn't have run

00:05:29,600 --> 00:05:33,680
borg without port one and that means

00:05:31,520 --> 00:05:36,000
also not their services for the last x

00:05:33,680 --> 00:05:38,880
amount of time

00:05:36,000 --> 00:05:40,639
one of the indirect effects of this is

00:05:38,880 --> 00:05:41,440
that while communities and prometheus

00:05:40,639 --> 00:05:44,639
were created

00:05:41,440 --> 00:05:46,320
completely distinctly of each other um

00:05:44,639 --> 00:05:48,639
they have inherently been designed for

00:05:46,320 --> 00:05:50,639
each other and they're also written with

00:05:48,639 --> 00:05:52,080
each other in mind so we have people who

00:05:50,639 --> 00:05:54,000
are on sick instrumentation

00:05:52,080 --> 00:05:55,280
at kubernetes and they're also on

00:05:54,000 --> 00:05:57,440
premises team

00:05:55,280 --> 00:05:59,199
which already tells you how much

00:05:57,440 --> 00:05:59,759
coordination goes on between the two

00:05:59,199 --> 00:06:01,440
projects

00:05:59,759 --> 00:06:02,800
and the one thing which is actually

00:06:01,440 --> 00:06:04,880
recommended by

00:06:02,800 --> 00:06:06,000
kubernetes to to monitor kubernetes

00:06:04,880 --> 00:06:07,840
itself is

00:06:06,000 --> 00:06:09,120
prometheus and they put insane amounts

00:06:07,840 --> 00:06:11,120
of work into

00:06:09,120 --> 00:06:12,960
cube state metrics to make this super

00:06:11,120 --> 00:06:14,960
high efficient to get all this data out

00:06:12,960 --> 00:06:17,919
of kubernetes

00:06:14,960 --> 00:06:19,120
on the just instance of monolithic

00:06:17,919 --> 00:06:21,199
prometheus

00:06:19,120 --> 00:06:24,720
level there's long term storages and

00:06:21,199 --> 00:06:27,199
such but if you run a single prometheus

00:06:24,720 --> 00:06:29,280
you can get more than 2.5 million

00:06:27,199 --> 00:06:31,919
samples per second an instance

00:06:29,280 --> 00:06:33,520
we've seen more than 60 000 samples per

00:06:31,919 --> 00:06:35,680
second in corn we actually went

00:06:33,520 --> 00:06:37,199
quite a bit above this in some more

00:06:35,680 --> 00:06:39,120
artificial testing

00:06:37,199 --> 00:06:42,639
but this includes the storage alerting

00:06:39,120 --> 00:06:45,120
the query and all of a normal prometheus

00:06:42,639 --> 00:06:46,080
and we compress quite aggressively the

00:06:45,120 --> 00:06:48,960
largest

00:06:46,080 --> 00:06:49,360
prometheus instance which we saw had 125

00:06:48,960 --> 00:06:53,360
million

00:06:49,360 --> 00:06:56,240
active time series and it was running

00:06:53,360 --> 00:06:58,000
long-term storage um there are two

00:06:56,240 --> 00:06:58,720
long-term storage solutions which have

00:06:58,000 --> 00:07:00,560
actual

00:06:58,720 --> 00:07:03,520
prometheus team members working on them

00:07:00,560 --> 00:07:06,000
these are thanos and cortex

00:07:03,520 --> 00:07:07,360
thanos is historically easier to set up

00:07:06,000 --> 00:07:09,120
and run

00:07:07,360 --> 00:07:10,639
but slower inquiry it's lower in

00:07:09,120 --> 00:07:13,759
clearing and such

00:07:10,639 --> 00:07:16,160
and the initial scale or the initial

00:07:13,759 --> 00:07:17,520
point where thanos started scaling was

00:07:16,160 --> 00:07:20,560
the storage

00:07:17,520 --> 00:07:21,120
cortex on the other hand is not as easy

00:07:20,560 --> 00:07:24,160
to run

00:07:21,120 --> 00:07:25,039
but it has gotten a lot easier it

00:07:24,160 --> 00:07:28,720
started with

00:07:25,039 --> 00:07:31,120
scaling ingestors and curious

00:07:28,720 --> 00:07:32,800
and then took the code off of thanos to

00:07:31,120 --> 00:07:34,400
scale a storage horizontally

00:07:32,800 --> 00:07:35,840
if you're guessing that thanos is

00:07:34,400 --> 00:07:38,960
playing to do the same with

00:07:35,840 --> 00:07:40,160
the cortex scaling code for ingestion

00:07:38,960 --> 00:07:43,280
clearing you would be

00:07:40,160 --> 00:07:45,680
right um as

00:07:43,280 --> 00:07:48,479
a pipe dream of myself i would like to

00:07:45,680 --> 00:07:52,240
see core thanos at some point

00:07:48,479 --> 00:07:55,840
maybe we will maybe we won't so

00:07:52,240 --> 00:07:57,680
what's new so yes so now we will see

00:07:55,840 --> 00:07:59,520
what you have missed if you have not

00:07:57,680 --> 00:08:01,840
upgraded promoters in the last year and

00:07:59,520 --> 00:08:03,759
we see a lot of users actually not

00:08:01,840 --> 00:08:05,199
updating their fund automatic systems

00:08:03,759 --> 00:08:07,360
but let's have a look

00:08:05,199 --> 00:08:09,599
the first point is service discoveries

00:08:07,360 --> 00:08:11,599
so in the last year so it means like

00:08:09,599 --> 00:08:13,280
since i think july last year

00:08:11,599 --> 00:08:14,879
we have added five new service

00:08:13,280 --> 00:08:16,319
discoveries to primitives

00:08:14,879 --> 00:08:18,960
which brings the number of service

00:08:16,319 --> 00:08:19,919
queries by uh french's like to 13 or

00:08:18,960 --> 00:08:22,080
something like that

00:08:19,919 --> 00:08:23,680
we have added digital oceans scalway

00:08:22,080 --> 00:08:26,560
ethner eureka

00:08:23,680 --> 00:08:27,360
docker and and this is only the

00:08:26,560 --> 00:08:29,199
beginning

00:08:27,360 --> 00:08:31,280
since we know that we are getting at

00:08:29,199 --> 00:08:31,680
least three more new service calories in

00:08:31,280 --> 00:08:35,039
the

00:08:31,680 --> 00:08:36,640
very really next release of primitives

00:08:35,039 --> 00:08:38,800
and there is even more to come from the

00:08:36,640 --> 00:08:39,519
community this enables you to use

00:08:38,800 --> 00:08:42,560
practice in

00:08:39,519 --> 00:08:43,919
a lot of new use cases as well

00:08:42,560 --> 00:08:46,480
then you have tls and basic

00:08:43,919 --> 00:08:49,200
authentication so while promoting

00:08:46,480 --> 00:08:51,279
has always been able to scrape using tls

00:08:49,200 --> 00:08:54,240
and basic authentication the targets

00:08:51,279 --> 00:08:56,160
now it is also able to export its

00:08:54,240 --> 00:08:56,800
metrics and to export its interfacing

00:08:56,160 --> 00:08:58,880
tls

00:08:56,800 --> 00:09:00,160
and basic authentication which means

00:08:58,880 --> 00:09:02,080
that you don't no longer need

00:09:00,160 --> 00:09:03,200
a previous proxy if you want to secure

00:09:02,080 --> 00:09:06,080
your promise

00:09:03,200 --> 00:09:08,480
proxy your point is instance we have

00:09:06,080 --> 00:09:09,360
also designed and written a new exporter

00:09:08,480 --> 00:09:11,680
toolkit

00:09:09,360 --> 00:09:14,320
for your go exporters if you want to

00:09:11,680 --> 00:09:16,080
also benefit from the tls and basic

00:09:14,320 --> 00:09:17,519
authentication that we have done for the

00:09:16,080 --> 00:09:19,360
point of server so that

00:09:17,519 --> 00:09:21,120
you can instrument your own exporter

00:09:19,360 --> 00:09:23,519
using that toolkit

00:09:21,120 --> 00:09:24,399
and this is what we are using also for

00:09:23,519 --> 00:09:26,480
the official

00:09:24,399 --> 00:09:28,800
premise exporter like the node exporter

00:09:26,480 --> 00:09:30,720
at the proxy mysql the exporters

00:09:28,800 --> 00:09:32,720
so we are using that but we are also

00:09:30,720 --> 00:09:37,040
encouraging the community to contribute

00:09:32,720 --> 00:09:39,760
to it and to reuse it

00:09:37,040 --> 00:09:41,200
chrome ql also has seen a lot of changes

00:09:39,760 --> 00:09:42,880
in the last year

00:09:41,200 --> 00:09:44,399
first of all we have including new

00:09:42,880 --> 00:09:44,880
functions some of them which were really

00:09:44,399 --> 00:09:47,120
like

00:09:44,880 --> 00:09:48,880
really wanted by the community like last

00:09:47,120 --> 00:09:51,680
overtime which enables you to take the

00:09:48,880 --> 00:09:55,040
latest sample over a certain range

00:09:51,680 --> 00:09:57,120
we also have some new features to

00:09:55,040 --> 00:09:58,160
write better queries and to get more

00:09:57,120 --> 00:10:02,079
insightful data

00:09:58,160 --> 00:10:04,800
like the at modifier and promql it's

00:10:02,079 --> 00:10:06,240
disabled by default because it can break

00:10:04,800 --> 00:10:08,800
some assumptions that some

00:10:06,240 --> 00:10:09,519
caching proxy might have about the prom

00:10:08,800 --> 00:10:11,519
ql

00:10:09,519 --> 00:10:12,800
but basically what it enables you to do

00:10:11,519 --> 00:10:15,360
is to

00:10:12,800 --> 00:10:15,920
run a certain selector at a certain date

00:10:15,360 --> 00:10:18,880
in time

00:10:15,920 --> 00:10:20,160
which means that you can now see like

00:10:18,880 --> 00:10:22,640
over the last hour

00:10:20,160 --> 00:10:23,600
before cpu that for containers that take

00:10:22,640 --> 00:10:26,959
the more cpu

00:10:23,600 --> 00:10:28,720
no and that is like um a change

00:10:26,959 --> 00:10:30,959
in the behavior because like before you

00:10:28,720 --> 00:10:34,240
could only have like at each moment

00:10:30,959 --> 00:10:35,680
four more containers that use the most

00:10:34,240 --> 00:10:37,519
cpu

00:10:35,680 --> 00:10:39,279
the next feature is like the negative

00:10:37,519 --> 00:10:40,480
offset so when you are exploring your

00:10:39,279 --> 00:10:42,320
data informatives

00:10:40,480 --> 00:10:44,079
you can decide to apply an offset to

00:10:42,320 --> 00:10:46,320
your data to say hey i want to see the

00:10:44,079 --> 00:10:48,720
data but like one hour back

00:10:46,320 --> 00:10:49,360
now you can also do that like one hour

00:10:48,720 --> 00:10:52,160
up front

00:10:49,360 --> 00:10:53,519
which will help you debug and deep dive

00:10:52,160 --> 00:10:57,440
into your matrix

00:10:53,519 --> 00:10:59,279
a lot more easily and then we have also

00:10:57,440 --> 00:11:00,079
composite duration which have landed

00:10:59,279 --> 00:11:02,399
which means that

00:11:00,079 --> 00:11:05,120
you no longer need to think about like

00:11:02,399 --> 00:11:06,880
oh oh do i write 1 hour 30 minutes oh i

00:11:05,120 --> 00:11:08,959
need to write 90 minutes no you can

00:11:06,880 --> 00:11:09,360
directly write one hour and 30 minutes

00:11:08,959 --> 00:11:11,200
so

00:11:09,360 --> 00:11:15,600
this will also ease your right and read

00:11:11,200 --> 00:11:18,720
of your chromecall queries

00:11:15,600 --> 00:11:19,600
we have enabled informative a remote

00:11:18,720 --> 00:11:21,680
write receiver

00:11:19,600 --> 00:11:22,800
so remote write is the process by which

00:11:21,680 --> 00:11:25,680
pointers can send

00:11:22,800 --> 00:11:27,680
its matrix to a remote system now

00:11:25,680 --> 00:11:28,720
parameters can also receive the remote

00:11:27,680 --> 00:11:31,279
right matrix

00:11:28,720 --> 00:11:33,040
it is a different way to share metrics

00:11:31,279 --> 00:11:33,920
on the federation which exists in

00:11:33,040 --> 00:11:35,920
primitives

00:11:33,920 --> 00:11:36,959
because like the remote right also

00:11:35,920 --> 00:11:40,000
enables you to pass

00:11:36,959 --> 00:11:42,560
on like the steel markers and

00:11:40,000 --> 00:11:43,120
a lot of other information and basically

00:11:42,560 --> 00:11:45,519
like

00:11:43,120 --> 00:11:47,360
what it enables you is like if you want

00:11:45,519 --> 00:11:49,200
to run a promise on the edge

00:11:47,360 --> 00:11:51,279
if you ever use cases that requires you

00:11:49,200 --> 00:11:54,079
like a more like push model while still

00:11:51,279 --> 00:11:55,360
keeping all the promises of formatives

00:11:54,079 --> 00:11:57,360
you can now do that

00:11:55,360 --> 00:11:59,279
so community still remains a monitoring

00:11:57,360 --> 00:12:01,040
system still remains pool based

00:11:59,279 --> 00:12:02,480
but now you have new possibilities to

00:12:01,040 --> 00:12:04,560
move your metrics around

00:12:02,480 --> 00:12:07,680
and that will definitely enable new use

00:12:04,560 --> 00:12:07,680
cases for your users

00:12:09,760 --> 00:12:14,480
the next and this is one of the most

00:12:12,480 --> 00:12:16,480
weighted features that we have seen and

00:12:14,480 --> 00:12:17,760
one of the most exciting thing it is the

00:12:16,480 --> 00:12:20,560
exemplars

00:12:17,760 --> 00:12:21,120
so basically what is an exemplar an

00:12:20,560 --> 00:12:23,839
example

00:12:21,120 --> 00:12:24,800
is a way to attach an external data to a

00:12:23,839 --> 00:12:26,720
matrix set

00:12:24,800 --> 00:12:28,320
which means that next to your metric you

00:12:26,720 --> 00:12:30,720
can now have like

00:12:28,320 --> 00:12:32,240
for example a trace id this is the more

00:12:30,720 --> 00:12:35,440
common use case

00:12:32,240 --> 00:12:38,800
so it enables you like when you have

00:12:35,440 --> 00:12:39,600
um when you have an actual alert or a

00:12:38,800 --> 00:12:41,839
dashboard

00:12:39,600 --> 00:12:42,800
you can directly see an example of a

00:12:41,839 --> 00:12:46,320
slow metric

00:12:42,800 --> 00:12:48,000
you can see an example of a fast

00:12:46,320 --> 00:12:49,680
fast query and then you can jump from

00:12:48,000 --> 00:12:51,360
your metric to your traces

00:12:49,680 --> 00:12:52,959
and the nice thing is that graphene

00:12:51,360 --> 00:12:54,320
already supports that they already

00:12:52,959 --> 00:12:55,040
support the examples and you can

00:12:54,320 --> 00:12:57,200
directly

00:12:55,040 --> 00:12:59,040
plug your crunches in graphene plug your

00:12:57,200 --> 00:13:00,240
tracing backend like tempo or jagger

00:12:59,040 --> 00:13:02,399
into your graffana

00:13:00,240 --> 00:13:04,560
and jump from your metrics to your

00:13:02,399 --> 00:13:06,240
traces

00:13:04,560 --> 00:13:08,399
if the trace id that you are seeing

00:13:06,240 --> 00:13:08,880
their senses familiar it is because like

00:13:08,399 --> 00:13:11,200
this is

00:13:08,880 --> 00:13:14,000
directly taken from the w3c tracing

00:13:11,200 --> 00:13:14,000
specifications

00:13:15,360 --> 00:13:18,639
and last let's finish with the alert

00:13:17,519 --> 00:13:20,720
manager so

00:13:18,639 --> 00:13:21,760
we have two new features coming to the

00:13:20,720 --> 00:13:23,920
art manager

00:13:21,760 --> 00:13:25,440
one of them which is time-based muting

00:13:23,920 --> 00:13:27,360
which means that you can decide now

00:13:25,440 --> 00:13:29,600
directly in the act manager

00:13:27,360 --> 00:13:30,560
to decide that some teams should not

00:13:29,600 --> 00:13:32,880
receive

00:13:30,560 --> 00:13:34,240
somewhere else during the weekend or out

00:13:32,880 --> 00:13:35,760
of business hours

00:13:34,240 --> 00:13:37,760
and you can control that for each route

00:13:35,760 --> 00:13:39,920
so this is like a nice addition

00:13:37,760 --> 00:13:42,160
that's required before that a lot of

00:13:39,920 --> 00:13:43,600
stuff happening in prom ql or in the

00:13:42,160 --> 00:13:44,399
promises upfront now you can do that

00:13:43,600 --> 00:13:46,880
directly

00:13:44,399 --> 00:13:49,120
in the alert manager and the second

00:13:46,880 --> 00:13:51,600
feature is the negative matches

00:13:49,120 --> 00:13:53,279
so now you can match uh you can create

00:13:51,600 --> 00:13:55,120
the silence that will match the errors

00:13:53,279 --> 00:13:56,880
that do not match certain labels so you

00:13:55,120 --> 00:13:59,920
can decide for example

00:13:56,880 --> 00:14:01,519
to put everything but production in

00:13:59,920 --> 00:14:03,199
silence you can decide to put

00:14:01,519 --> 00:14:05,440
everything but something in silence

00:14:03,199 --> 00:14:07,199
which is like also going to be helpful

00:14:05,440 --> 00:14:11,279
for the people who actually operate

00:14:07,199 --> 00:14:11,279
and are on call with the earth merger

00:14:12,399 --> 00:14:16,639
so what's coming next what's coming in

00:14:15,680 --> 00:14:18,800
the future

00:14:16,639 --> 00:14:20,720
the first most important part or the

00:14:18,800 --> 00:14:24,560
first most important point is

00:14:20,720 --> 00:14:26,639
um that we as as a community are trying

00:14:24,560 --> 00:14:28,240
to be even more aggressively open than

00:14:26,639 --> 00:14:31,440
before

00:14:28,240 --> 00:14:34,560
um that has several different

00:14:31,440 --> 00:14:36,639
dimensions um the maybe most obvious one

00:14:34,560 --> 00:14:37,760
is um that historically as i said

00:14:36,639 --> 00:14:39,680
initially

00:14:37,760 --> 00:14:41,440
we have treated even experimental

00:14:39,680 --> 00:14:45,360
features and interfaces

00:14:41,440 --> 00:14:49,600
as functionally stable and and immutable

00:14:45,360 --> 00:14:52,800
which is great for for um

00:14:49,600 --> 00:14:55,760
for stability but as julian just said um

00:14:52,800 --> 00:14:56,800
it it would not enable certain use cases

00:14:55,760 --> 00:14:58,639
like for example

00:14:56,800 --> 00:15:00,240
if you have caching proxies and you know

00:14:58,639 --> 00:15:02,720
that you have caches in before

00:15:00,240 --> 00:15:04,000
in front of you and you don't want to

00:15:02,720 --> 00:15:07,040
ever break them

00:15:04,000 --> 00:15:09,519
um you're kind of locked in so by

00:15:07,040 --> 00:15:10,800
by being more willing to to have

00:15:09,519 --> 00:15:14,399
experimental features

00:15:10,800 --> 00:15:16,959
a which change current behavior and b

00:15:14,399 --> 00:15:18,399
which just to change what it means to be

00:15:16,959 --> 00:15:21,120
experimental

00:15:18,399 --> 00:15:22,480
we want to open up more more flexibility

00:15:21,120 --> 00:15:24,320
more innovation

00:15:22,480 --> 00:15:25,920
or in the case of remote read write

00:15:24,320 --> 00:15:27,920
where we literally just run the

00:15:25,920 --> 00:15:30,480
experiment as the first version

00:15:27,920 --> 00:15:32,800
so we have this stable basis and then we

00:15:30,480 --> 00:15:35,360
can innovate on top of this

00:15:32,800 --> 00:15:37,199
a lot of our old assumptions are being

00:15:35,360 --> 00:15:39,279
revisited and we are deliberately

00:15:37,199 --> 00:15:40,959
enabling more use cases

00:15:39,279 --> 00:15:42,959
julian was also just talking about this

00:15:40,959 --> 00:15:45,680
with more services queries

00:15:42,959 --> 00:15:46,880
or the exported toolkit also noted here

00:15:45,680 --> 00:15:49,920
where

00:15:46,880 --> 00:15:52,000
we try to to make more of the box

00:15:49,920 --> 00:15:54,399
and use cases which are maybe not

00:15:52,000 --> 00:15:57,360
recommended by prometheus

00:15:54,399 --> 00:15:59,519
like the agents but still valid use

00:15:57,360 --> 00:16:02,480
cases from the end user perspective

00:15:59,519 --> 00:16:04,320
of course while we would like everyone

00:16:02,480 --> 00:16:06,560
to be able to run their own metrics

00:16:04,320 --> 00:16:09,680
endpoint for example

00:16:06,560 --> 00:16:11,759
that's not the view which a usual uh

00:16:09,680 --> 00:16:14,079
enterprise security team will take that

00:16:11,759 --> 00:16:14,959
you have like two dozen different ports

00:16:14,079 --> 00:16:16,800
open

00:16:14,959 --> 00:16:18,720
which are not even continuous and and

00:16:16,800 --> 00:16:20,240
they cannot tell from the outside which

00:16:18,720 --> 00:16:22,880
ports should be open

00:16:20,240 --> 00:16:23,920
on this and that machine um that tends

00:16:22,880 --> 00:16:26,880
to make people nervous

00:16:23,920 --> 00:16:28,880
um putting all of this behind behind one

00:16:26,880 --> 00:16:32,320
single port and then either

00:16:28,880 --> 00:16:35,600
using um using paths

00:16:32,320 --> 00:16:37,519
within that port or to just push stuff

00:16:35,600 --> 00:16:40,320
through remote read write

00:16:37,519 --> 00:16:41,839
are totally valid use cases and so we

00:16:40,320 --> 00:16:43,839
are trying to enable more and more of

00:16:41,839 --> 00:16:44,880
those use cases to actually enable

00:16:43,839 --> 00:16:47,120
people to

00:16:44,880 --> 00:16:48,800
to operate with the stuff within the

00:16:47,120 --> 00:16:51,040
prometheus main org

00:16:48,800 --> 00:16:53,040
and not spreading this out to the wider

00:16:51,040 --> 00:16:55,199
community and as such

00:16:53,040 --> 00:16:56,079
creating differences in in different

00:16:55,199 --> 00:16:57,600
approaches

00:16:56,079 --> 00:17:00,079
by upstreaming all of this or

00:16:57,600 --> 00:17:02,959
re-upstreaming in all of this

00:17:00,079 --> 00:17:04,079
we hope to just make it easier to reuse

00:17:02,959 --> 00:17:06,880
the code which which

00:17:04,079 --> 00:17:08,480
we have and to just yeah make it easier

00:17:06,880 --> 00:17:11,280
to use

00:17:08,480 --> 00:17:12,799
we have a few design docs um the slides

00:17:11,280 --> 00:17:15,439
will be linked and these are

00:17:12,799 --> 00:17:16,400
clickable so you can just you can read

00:17:15,439 --> 00:17:19,439
them you can

00:17:16,400 --> 00:17:22,480
you can give feedback

00:17:19,439 --> 00:17:25,120
another thing a large focus point of

00:17:22,480 --> 00:17:25,120
mine will be

00:17:25,679 --> 00:17:28,880
imitation is the sincerest form of

00:17:27,520 --> 00:17:32,160
lettering and

00:17:28,880 --> 00:17:35,360
prometheus is the de facto system within

00:17:32,160 --> 00:17:37,679
all of cloud native and also beyond

00:17:35,360 --> 00:17:38,400
which is great adoption wise and it is

00:17:37,679 --> 00:17:42,559
great for

00:17:38,400 --> 00:17:45,600
for the project but it also means that

00:17:42,559 --> 00:17:48,799
at some point there start to be certain

00:17:45,600 --> 00:17:50,960
issues if you look at the

00:17:48,799 --> 00:17:52,000
most current zip observability and user

00:17:50,960 --> 00:17:54,799
rater i

00:17:52,000 --> 00:17:55,919
made that wrong the title is wrong that

00:17:54,799 --> 00:17:58,840
is the current

00:17:55,919 --> 00:18:00,880
cncf end user observability

00:17:58,840 --> 00:18:03,760
questionnaire you see that

00:18:00,880 --> 00:18:04,320
parameters and open metrics are in the

00:18:03,760 --> 00:18:07,600
adopt

00:18:04,320 --> 00:18:08,240
and in place one or respectively place

00:18:07,600 --> 00:18:10,240
five in

00:18:08,240 --> 00:18:13,039
in all of the cncf and here's a subtle

00:18:10,240 --> 00:18:15,600
part which is quite a statement

00:18:13,039 --> 00:18:17,280
and if you look into the market be it

00:18:15,600 --> 00:18:20,960
open source projects be it

00:18:17,280 --> 00:18:24,160
be it closed source um be it

00:18:20,960 --> 00:18:27,760
near to two promises be super far away

00:18:24,160 --> 00:18:30,640
away from prometheus there is a lot

00:18:27,760 --> 00:18:32,240
of interest in prometheus and in parts

00:18:30,640 --> 00:18:35,120
of primitives

00:18:32,240 --> 00:18:36,960
and we want to assert that everyone who

00:18:35,120 --> 00:18:39,360
chooses to use any of those

00:18:36,960 --> 00:18:43,360
is actually able to use them within the

00:18:39,360 --> 00:18:45,600
prometheus ecosystem as they expect

00:18:43,360 --> 00:18:47,679
so this is an ask which is coming from

00:18:45,600 --> 00:18:49,200
cncf from the end users from vendors

00:18:47,679 --> 00:18:52,799
from projects

00:18:49,200 --> 00:18:55,840
to uh to support this this cross-testing

00:18:52,799 --> 00:18:56,240
basically becoming more of a standard

00:18:55,840 --> 00:18:59,360
for

00:18:56,240 --> 00:19:01,440
for cloud native observability

00:18:59,360 --> 00:19:03,280
we already have two specifications out

00:19:01,440 --> 00:19:05,520
this is one open matrix which

00:19:03,280 --> 00:19:06,559
is the exposition format as you saw

00:19:05,520 --> 00:19:08,160
earlier

00:19:06,559 --> 00:19:11,360
and the prometheus remote write

00:19:08,160 --> 00:19:14,559
specification which is how you can bulk

00:19:11,360 --> 00:19:15,039
bug push data from for example an agent

00:19:14,559 --> 00:19:17,200
or

00:19:15,039 --> 00:19:18,160
a prometheus server to long-term

00:19:17,200 --> 00:19:20,559
storages or

00:19:18,160 --> 00:19:22,000
in certain pipelines where you can then

00:19:20,559 --> 00:19:25,280
mangle your data and

00:19:22,000 --> 00:19:26,880
and put it onwards um the nice thing

00:19:25,280 --> 00:19:27,919
about starting with those two it's

00:19:26,880 --> 00:19:30,640
basically once

00:19:27,919 --> 00:19:31,280
the interface to get any data out of

00:19:30,640 --> 00:19:34,320
systems

00:19:31,280 --> 00:19:37,120
into a prometheus compatible system

00:19:34,320 --> 00:19:38,880
and then at the second step once it is

00:19:37,120 --> 00:19:39,840
already in a prometheus compatible

00:19:38,880 --> 00:19:41,919
system

00:19:39,840 --> 00:19:43,840
emitting all that data to whatever the

00:19:41,919 --> 00:19:44,480
consumer long-term storage or whatever

00:19:43,840 --> 00:19:46,960
is

00:19:44,480 --> 00:19:48,080
that also automatically covers both pull

00:19:46,960 --> 00:19:49,840
and push

00:19:48,080 --> 00:19:51,840
which is super nice for a lot of

00:19:49,840 --> 00:19:55,120
operational reasons

00:19:51,840 --> 00:19:57,200
with the guarantees that in between you

00:19:55,120 --> 00:19:58,799
have a prometheus compatible thing which

00:19:57,200 --> 00:19:59,919
actually does all the cleanups and all

00:19:58,799 --> 00:20:02,240
the everything

00:19:59,919 --> 00:20:04,000
which you need to do for for just plain

00:20:02,240 --> 00:20:07,520
expositions

00:20:04,000 --> 00:20:09,039
once to to basically have it in tsdb

00:20:07,520 --> 00:20:11,520
compatible format and then remote

00:20:09,039 --> 00:20:14,480
rewrite it

00:20:11,520 --> 00:20:15,679
we have a variety of test suites already

00:20:14,480 --> 00:20:17,280
we have a prom

00:20:15,679 --> 00:20:18,640
compliance test suite we have a remote

00:20:17,280 --> 00:20:20,799
write compliance test suite an open

00:20:18,640 --> 00:20:23,200
metrics compliance test street

00:20:20,799 --> 00:20:25,200
we are thinking about having psdb and

00:20:23,200 --> 00:20:26,240
data correctness test suites as well uh

00:20:25,200 --> 00:20:29,200
we might even have

00:20:26,240 --> 00:20:30,240
more that remains to be seen it's also a

00:20:29,200 --> 00:20:33,200
little bit of

00:20:30,240 --> 00:20:35,440
how and who wants to have what basically

00:20:33,200 --> 00:20:38,240
just wherever we see usage of

00:20:35,440 --> 00:20:38,880
aspects of prometheus we want to just

00:20:38,240 --> 00:20:41,360
make

00:20:38,880 --> 00:20:42,799
sure that all of this is is done in a

00:20:41,360 --> 00:20:45,120
compatible format

00:20:42,799 --> 00:20:46,960
we'll also publish all of this on on the

00:20:45,120 --> 00:20:49,840
main website prometheus io

00:20:46,960 --> 00:20:52,000
where we have regular test tests as of

00:20:49,840 --> 00:20:52,960
right now the the rough intention is to

00:20:52,000 --> 00:20:56,120
have

00:20:52,960 --> 00:20:58,559
versioned tests so you know you have

00:20:56,120 --> 00:20:59,840
2021-4 or whatever

00:20:58,559 --> 00:21:01,679
and that is the version of that

00:20:59,840 --> 00:21:03,520
particular test

00:21:01,679 --> 00:21:05,520
and then it is valid for i don't know

00:21:03,520 --> 00:21:07,679
how long uh one two three uh

00:21:05,520 --> 00:21:09,360
minor versions of prometheus which

00:21:07,679 --> 00:21:12,000
translates to a few months

00:21:09,360 --> 00:21:12,400
and then you can just rerun those tests

00:21:12,000 --> 00:21:14,880
so

00:21:12,400 --> 00:21:17,360
everyone using this knows that there is

00:21:14,880 --> 00:21:19,760
a certain expectation of what

00:21:17,360 --> 00:21:20,480
what version a range of prometheus this

00:21:19,760 --> 00:21:24,159
thing is

00:21:20,480 --> 00:21:26,159
compliant with or not compliant with um

00:21:24,159 --> 00:21:27,520
yeah and also we'll be working with

00:21:26,159 --> 00:21:30,640
scenes you have to actually have a

00:21:27,520 --> 00:21:32,080
mark of approval or some such um the

00:21:30,640 --> 00:21:33,600
calls with the lawyers and everything

00:21:32,080 --> 00:21:36,080
and with like the logo and such that's

00:21:33,600 --> 00:21:39,360
still outstanding

00:21:36,080 --> 00:21:40,320
and coming to to all of those things

00:21:39,360 --> 00:21:42,799
which are coming

00:21:40,320 --> 00:21:44,000
and there's lots more in in those

00:21:42,799 --> 00:21:45,679
documents which are also

00:21:44,000 --> 00:21:47,280
all links so you can just click them

00:21:45,679 --> 00:21:50,400
through in the slides

00:21:47,280 --> 00:21:52,960
um everything which we do is

00:21:50,400 --> 00:21:53,440
as of this year recorded and open to

00:21:52,960 --> 00:21:58,320
join

00:21:53,440 --> 00:22:00,320
um we already always publish like um

00:21:58,320 --> 00:22:01,360
our meaning notes and everything but it

00:22:00,320 --> 00:22:04,400
was a remnants

00:22:01,360 --> 00:22:06,559
of this or being in person um

00:22:04,400 --> 00:22:08,000
that we didn't truly realize that we

00:22:06,559 --> 00:22:10,000
could just make all of this

00:22:08,000 --> 00:22:11,600
online and public to join and everything

00:22:10,000 --> 00:22:14,080
we have always invited people to the

00:22:11,600 --> 00:22:15,919
in-person things but that doesn't scale

00:22:14,080 --> 00:22:18,240
whereas doing an online supervised case

00:22:15,919 --> 00:22:20,559
we must record it and and

00:22:18,240 --> 00:22:21,600
publish it but also it is open to join

00:22:20,559 --> 00:22:24,400
so all of those

00:22:21,600 --> 00:22:26,159
just drop in there is a calendar we

00:22:24,400 --> 00:22:27,200
publish all this on on the youtube

00:22:26,159 --> 00:22:29,360
channel

00:22:27,200 --> 00:22:30,960
and i hope we were quick enough that we

00:22:29,360 --> 00:22:32,880
get lots and lots of questions

00:22:30,960 --> 00:22:34,320
because we tried to optimize for

00:22:32,880 --> 00:22:37,360
basically giving you this

00:22:34,320 --> 00:22:39,280
this t in three levels and

00:22:37,360 --> 00:22:40,799
now for actual questions which we are

00:22:39,280 --> 00:22:43,520
very much looking forward to

00:22:40,799 --> 00:22:43,520
thank you very much

00:22:44,000 --> 00:22:47,200

YouTube URL: https://www.youtube.com/watch?v=UsxIDNNIwa0


