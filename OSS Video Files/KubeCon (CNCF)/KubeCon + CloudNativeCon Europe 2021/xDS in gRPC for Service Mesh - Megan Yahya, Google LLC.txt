Title: xDS in gRPC for Service Mesh - Megan Yahya, Google LLC
Publication date: 2021-05-09
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

xDS in gRPC for Service Mesh - Megan Yahya, Google LLC

This presentation will introduce the xDS functionality in gRPC and talk about the exciting development of service mesh features in gRPC.
Captions: 
	00:00:00,080 --> 00:00:05,759
hi everyone my name is megan yahya i am

00:00:02,720 --> 00:00:07,520
product manager for grpc at google

00:00:05,759 --> 00:00:09,200
today i'm happy to be talking to you

00:00:07,520 --> 00:00:13,040
about service meshes

00:00:09,200 --> 00:00:17,039
with grpc and xds protocol

00:00:13,040 --> 00:00:21,199
so let's first talk about

00:00:17,039 --> 00:00:24,160
grpc and microservices so i i'm assuming

00:00:21,199 --> 00:00:25,039
a lot of you are familiar with grpc but

00:00:24,160 --> 00:00:28,320
um

00:00:25,039 --> 00:00:31,199
let's let's talk about why uh

00:00:28,320 --> 00:00:33,920
grpc is the appropriate way of

00:00:31,199 --> 00:00:37,360
communication between microservices

00:00:33,920 --> 00:00:40,640
in a service mesh so grpc

00:00:37,360 --> 00:00:41,280
is a very high performant and efficient

00:00:40,640 --> 00:00:44,239
protocol

00:00:41,280 --> 00:00:45,280
so if you know already uh it's based on

00:00:44,239 --> 00:00:49,039
http 2

00:00:45,280 --> 00:00:51,440
and is very compatible with protobufs

00:00:49,039 --> 00:00:52,640
and that is super important in

00:00:51,440 --> 00:00:53,760
microservices

00:00:52,640 --> 00:00:56,640
because when we are talking about

00:00:53,760 --> 00:01:00,879
microservices we are talking about

00:00:56,640 --> 00:01:04,640
a great amount of east-west traffic

00:01:00,879 --> 00:01:06,560
uh versus the north-south traffic so the

00:01:04,640 --> 00:01:08,240
the magnitude of east west traffic is

00:01:06,560 --> 00:01:09,280
much much bigger than the north-south

00:01:08,240 --> 00:01:12,560
traffic

00:01:09,280 --> 00:01:14,640
and that makes it a lot important

00:01:12,560 --> 00:01:17,119
to make sure that these communications

00:01:14,640 --> 00:01:19,840
are as performant as possible

00:01:17,119 --> 00:01:20,640
the other value that a lot of customers

00:01:19,840 --> 00:01:23,920
are seeking

00:01:20,640 --> 00:01:27,280
when they adopt grpc is the fact that

00:01:23,920 --> 00:01:29,520
grpc is supported in a lot of languages

00:01:27,280 --> 00:01:32,640
in 13 languages at the moment

00:01:29,520 --> 00:01:34,240
and why it matters is because when you

00:01:32,640 --> 00:01:36,880
break down your monolith

00:01:34,240 --> 00:01:39,200
or when you start writing like cloud

00:01:36,880 --> 00:01:42,240
native application

00:01:39,200 --> 00:01:43,119
it it's usually because you want to

00:01:42,240 --> 00:01:45,360
leverage

00:01:43,119 --> 00:01:46,320
the value that different languages bring

00:01:45,360 --> 00:01:48,880
to the table

00:01:46,320 --> 00:01:49,520
right so you might have python you might

00:01:48,880 --> 00:01:52,159
have

00:01:49,520 --> 00:01:55,280
uh java you might have c plus plus you

00:01:52,159 --> 00:01:59,600
might have a lot of different languages

00:01:55,280 --> 00:02:01,439
as part of the same organization

00:01:59,600 --> 00:02:03,840
and and it's important for these

00:02:01,439 --> 00:02:06,000
languages to call each other right so

00:02:03,840 --> 00:02:08,319
so the fact that grpc supports all these

00:02:06,000 --> 00:02:09,360
languages makes it easy and reduces a

00:02:08,319 --> 00:02:11,680
lot of

00:02:09,360 --> 00:02:14,959
code that your developers would

00:02:11,680 --> 00:02:17,440
otherwise have to write

00:02:14,959 --> 00:02:20,800
by just auto generating this code for

00:02:17,440 --> 00:02:23,040
for the clients and services

00:02:20,800 --> 00:02:24,239
grpc as i mentioned is compatible with

00:02:23,040 --> 00:02:26,720
protobufs

00:02:24,239 --> 00:02:28,400
and of course uh there are several

00:02:26,720 --> 00:02:29,680
values of protobufs like if you're

00:02:28,400 --> 00:02:31,920
familiar with it

00:02:29,680 --> 00:02:33,360
you basically have to write the service

00:02:31,920 --> 00:02:36,720
definition first

00:02:33,360 --> 00:02:39,440
and um that that that creates

00:02:36,720 --> 00:02:40,400
a single source of truth for your

00:02:39,440 --> 00:02:42,959
service

00:02:40,400 --> 00:02:44,560
and that it makes the api documentation

00:02:42,959 --> 00:02:46,720
generation easier

00:02:44,560 --> 00:02:48,319
and it makes getting into agreement with

00:02:46,720 --> 00:02:50,959
different teams easier so there are a

00:02:48,319 --> 00:02:52,879
lot of different values for it protobufs

00:02:50,959 --> 00:02:54,400
and of course with grpc there are

00:02:52,879 --> 00:02:57,200
additional features like

00:02:54,400 --> 00:02:58,800
deadlines cancellation and inter support

00:02:57,200 --> 00:03:01,840
for interceptors

00:02:58,800 --> 00:03:03,760
so so grpc already has

00:03:01,840 --> 00:03:06,319
high industry adoption for the reasons

00:03:03,760 --> 00:03:10,159
that i mentioned in the previous slide

00:03:06,319 --> 00:03:12,720
but let's talk about grpc applications

00:03:10,159 --> 00:03:13,200
inside the service mesh right so today

00:03:12,720 --> 00:03:16,080
they're

00:03:13,200 --> 00:03:17,440
like if i assume you you want to deploy

00:03:16,080 --> 00:03:19,360
your grpc application

00:03:17,440 --> 00:03:21,040
as part of a service mesh that you have

00:03:19,360 --> 00:03:24,959
chosen right

00:03:21,040 --> 00:03:25,519
but so you would still need some way to

00:03:24,959 --> 00:03:27,840
provide

00:03:25,519 --> 00:03:29,760
service discovery load balancing

00:03:27,840 --> 00:03:33,200
security and all that right

00:03:29,760 --> 00:03:36,799
so because these features they don't

00:03:33,200 --> 00:03:38,959
come as part of grpc at least

00:03:36,799 --> 00:03:41,120
until today and that that's a topic that

00:03:38,959 --> 00:03:46,239
i'm going to cover today

00:03:41,120 --> 00:03:48,799
so so let's think about a typical

00:03:46,239 --> 00:03:50,080
service mesh that's out there today and

00:03:48,799 --> 00:03:52,319
uh and they're

00:03:50,080 --> 00:03:53,840
they're mainly running with sidecar

00:03:52,319 --> 00:03:56,959
proxies right so

00:03:53,840 --> 00:03:58,480
so you're a for example you're familiar

00:03:56,959 --> 00:04:02,080
with istio right like

00:03:58,480 --> 00:04:04,640
either envoy-based sidecar proxies

00:04:02,080 --> 00:04:06,560
um which which is basically you have

00:04:04,640 --> 00:04:08,959
this data plane

00:04:06,560 --> 00:04:10,799
that is this this proxy that's running

00:04:08,959 --> 00:04:13,680
next to your application

00:04:10,799 --> 00:04:14,560
and that data plane is intercepting all

00:04:13,680 --> 00:04:16,479
the traffic

00:04:14,560 --> 00:04:18,799
and is communicating with the control

00:04:16,479 --> 00:04:21,120
plane so this

00:04:18,799 --> 00:04:23,680
so the sidecar proxy which is in this

00:04:21,120 --> 00:04:26,400
case envoy for example for istio they

00:04:23,680 --> 00:04:27,280
they are receiving the configurations

00:04:26,400 --> 00:04:30,639
from this

00:04:27,280 --> 00:04:34,000
service mesh control plane and it it's

00:04:30,639 --> 00:04:37,280
they're helping your grpc service

00:04:34,000 --> 00:04:38,400
uh to route its calls and they provide

00:04:37,280 --> 00:04:42,240
observability

00:04:38,400 --> 00:04:44,720
and all the other uh features

00:04:42,240 --> 00:04:46,160
uh but your grpc application it's not

00:04:44,720 --> 00:04:48,320
even aware

00:04:46,160 --> 00:04:49,440
that it is part of the service mesh it's

00:04:48,320 --> 00:04:51,280
just

00:04:49,440 --> 00:04:52,639
it's just doing whatever it was doing

00:04:51,280 --> 00:04:55,680
before and it's the

00:04:52,639 --> 00:04:58,160
envoy which is intercepting the traffic

00:04:55,680 --> 00:04:59,600
and applying the policies to that

00:04:58,160 --> 00:05:02,800
request

00:04:59,600 --> 00:05:05,440
so um so this is what a grpc application

00:05:02,800 --> 00:05:06,160
looks like in a service mesh today next

00:05:05,440 --> 00:05:08,639
to site

00:05:06,160 --> 00:05:09,360
if it's deployed exercise car proxies

00:05:08,639 --> 00:05:12,880
but then

00:05:09,360 --> 00:05:16,880
um it has limitations right so

00:05:12,880 --> 00:05:19,280
if you're using these sidecar proxies um

00:05:16,880 --> 00:05:21,520
sidecar proxies are just like any other

00:05:19,280 --> 00:05:24,880
binary right so if you're deploying

00:05:21,520 --> 00:05:27,199
all these binaries in your mesh

00:05:24,880 --> 00:05:28,960
there's of course performance overhead

00:05:27,199 --> 00:05:31,280
um there's been a bunch of

00:05:28,960 --> 00:05:33,440
benchmarks and all of them show

00:05:31,280 --> 00:05:36,000
significant overhead

00:05:33,440 --> 00:05:38,320
that is caused in terms of number of

00:05:36,000 --> 00:05:41,919
requests per seconds uh that's

00:05:38,320 --> 00:05:44,320
that can be made between your services

00:05:41,919 --> 00:05:46,320
um in case that you have the proxy or

00:05:44,320 --> 00:05:48,639
you don't have the proxy right

00:05:46,320 --> 00:05:51,039
so and there's a lot of latency that is

00:05:48,639 --> 00:05:54,880
applied because of this sidecar proxies

00:05:51,039 --> 00:05:58,880
um there is cpu cost overhead of course

00:05:54,880 --> 00:06:00,560
and um and then one of the other

00:05:58,880 --> 00:06:02,560
important parts for some of the

00:06:00,560 --> 00:06:03,280
customers is the security part right so

00:06:02,560 --> 00:06:05,280
because

00:06:03,280 --> 00:06:07,039
when you have these sidecar proxies the

00:06:05,280 --> 00:06:10,080
sidecar proxies insure

00:06:07,039 --> 00:06:11,840
in charge of terminating

00:06:10,080 --> 00:06:13,520
the secure connection and your

00:06:11,840 --> 00:06:15,440
application is actually talking plain

00:06:13,520 --> 00:06:19,199
text and for some organizations

00:06:15,440 --> 00:06:22,240
this is this is not that acceptable

00:06:19,199 --> 00:06:23,919
so and of course with the binaries you

00:06:22,240 --> 00:06:25,919
have to manage the binaries you should

00:06:23,919 --> 00:06:27,360
provide health checks for the binaries

00:06:25,919 --> 00:06:30,080
you should upgrade them

00:06:27,360 --> 00:06:34,080
and anything that applies to the life

00:06:30,080 --> 00:06:38,000
cycle management of these binaries

00:06:34,080 --> 00:06:41,199
so so let's talk about

00:06:38,000 --> 00:06:44,160
what we've built just recently right so

00:06:41,199 --> 00:06:45,919
uh what we have built is jervis's

00:06:44,160 --> 00:06:49,039
service mesh

00:06:45,919 --> 00:06:52,400
but in a proxy let's manner

00:06:49,039 --> 00:06:53,440
so so there are no proxy needs is needed

00:06:52,400 --> 00:06:55,880
because

00:06:53,440 --> 00:06:57,039
we have built the data plane

00:06:55,880 --> 00:07:00,160
functionality

00:06:57,039 --> 00:07:03,120
into grpc itself

00:07:00,160 --> 00:07:03,599
so what it means is that now with this

00:07:03,120 --> 00:07:06,319
new

00:07:03,599 --> 00:07:07,680
product that we have launched your grpc

00:07:06,319 --> 00:07:10,560
application

00:07:07,680 --> 00:07:12,240
can just easily become part of the

00:07:10,560 --> 00:07:14,639
service mesh

00:07:12,240 --> 00:07:15,599
assuming you have a control plane that

00:07:14,639 --> 00:07:18,720
understands

00:07:15,599 --> 00:07:21,520
xcs and can talk to this grpc services

00:07:18,720 --> 00:07:23,280
and and it can just receive the policies

00:07:21,520 --> 00:07:27,599
directly from the control plane

00:07:23,280 --> 00:07:31,199
so no sidecar proxy is needed no envoys

00:07:27,599 --> 00:07:32,160
uh and and yeah you you get all the

00:07:31,199 --> 00:07:33,840
value with

00:07:32,160 --> 00:07:36,479
the service measures you you get the

00:07:33,840 --> 00:07:40,560
load balancing and service discovery

00:07:36,479 --> 00:07:44,240
and the observability and etc

00:07:40,560 --> 00:07:44,879
so let's talk about uh xds a little bit

00:07:44,240 --> 00:07:48,560
because i

00:07:44,879 --> 00:07:50,800
here mentioned that like uh grpc service

00:07:48,560 --> 00:07:53,039
is talking to the control plane

00:07:50,800 --> 00:07:54,400
but you might ask okay how is it talking

00:07:53,039 --> 00:07:57,840
to the control plane

00:07:54,400 --> 00:08:00,800
and that's that is true xds apis

00:07:57,840 --> 00:08:01,919
and you might ask okay what is xds apis

00:08:00,800 --> 00:08:04,960
um

00:08:01,919 --> 00:08:07,919
xcs apis is a bunch of

00:08:04,960 --> 00:08:10,400
um data plane apis that that were

00:08:07,919 --> 00:08:12,720
basically invented by

00:08:10,400 --> 00:08:14,240
uh by the envoy team so when they

00:08:12,720 --> 00:08:16,639
launched envoy

00:08:14,240 --> 00:08:18,400
the xts api was the way to configure

00:08:16,639 --> 00:08:21,840
your own voice

00:08:18,400 --> 00:08:23,199
and uh and it's quite par and envoy is

00:08:21,840 --> 00:08:24,840
quite popular today

00:08:23,199 --> 00:08:26,720
and it's used in many open source

00:08:24,840 --> 00:08:29,440
projects and

00:08:26,720 --> 00:08:31,360
on top of that xcs is also open and

00:08:29,440 --> 00:08:34,080
there's a lot of values to xcs

00:08:31,360 --> 00:08:35,680
it is extensible it has strong community

00:08:34,080 --> 00:08:37,919
support and all that

00:08:35,680 --> 00:08:39,440
makes this makes made it the right

00:08:37,919 --> 00:08:41,200
choice for us

00:08:39,440 --> 00:08:42,640
for this service mesh integration in

00:08:41,200 --> 00:08:45,200
grpc so

00:08:42,640 --> 00:08:47,200
so exactly the same way that envoy is

00:08:45,200 --> 00:08:50,480
talking to the control plane

00:08:47,200 --> 00:08:53,040
using xcs apis grpc is

00:08:50,480 --> 00:08:54,240
now able to talk to the control plane

00:08:53,040 --> 00:08:58,320
using the same

00:08:54,240 --> 00:08:59,279
xcs apis so let's talk about xcs and

00:08:58,320 --> 00:09:03,600
grpc

00:08:59,279 --> 00:09:06,959
so you can just build a grpc channel

00:09:03,600 --> 00:09:09,600
with xds resolver and resolve this

00:09:06,959 --> 00:09:11,040
scheme so it's not any different from

00:09:09,600 --> 00:09:13,760
the dns really like

00:09:11,040 --> 00:09:14,160
instead of the previous version you just

00:09:13,760 --> 00:09:17,760
put

00:09:14,160 --> 00:09:20,399
xds column and uh and

00:09:17,760 --> 00:09:22,000
that takes care of it and the other

00:09:20,399 --> 00:09:25,200
thing the other change that you have

00:09:22,000 --> 00:09:27,360
to make with this setup in order to make

00:09:25,200 --> 00:09:28,320
your application able to talk to the

00:09:27,360 --> 00:09:31,440
control plane

00:09:28,320 --> 00:09:34,000
is providing a bootstrap file so and all

00:09:31,440 --> 00:09:37,200
the bootstrap file is doing it's just

00:09:34,000 --> 00:09:39,680
providing your a grpc server

00:09:37,200 --> 00:09:41,440
with information about a geophysical

00:09:39,680 --> 00:09:44,560
service with information about

00:09:41,440 --> 00:09:46,880
where is this control plane right so

00:09:44,560 --> 00:09:47,680
where should it initiate this connection

00:09:46,880 --> 00:09:51,040
to so

00:09:47,680 --> 00:09:54,160
uh once you provide that bootstrap

00:09:51,040 --> 00:09:56,240
that's it like now you can now your grpc

00:09:54,160 --> 00:09:58,880
application is part of the service mesh

00:09:56,240 --> 00:10:00,080
and uh you don't need to deploy anything

00:09:58,880 --> 00:10:02,399
else it's

00:10:00,080 --> 00:10:03,200
it's very easy it makes it very easy to

00:10:02,399 --> 00:10:06,640
adopt

00:10:03,200 --> 00:10:08,880
um to add up service mesh for customers

00:10:06,640 --> 00:10:10,240
and the other cool part is that you

00:10:08,880 --> 00:10:13,360
don't have to

00:10:10,240 --> 00:10:16,640
like if for example you have some

00:10:13,360 --> 00:10:17,200
applications who still not support this

00:10:16,640 --> 00:10:19,279
or

00:10:17,200 --> 00:10:20,240
or some features that are not available

00:10:19,279 --> 00:10:23,680
etc

00:10:20,240 --> 00:10:28,000
you might just choose to migrate slowly

00:10:23,680 --> 00:10:31,279
like uh by by having some communications

00:10:28,000 --> 00:10:34,720
through a proxy list channel and

00:10:31,279 --> 00:10:36,800
some communications through a proxy

00:10:34,720 --> 00:10:38,240
channel like still keep your envoy there

00:10:36,800 --> 00:10:41,600
so this hybrid model

00:10:38,240 --> 00:10:44,079
is also supported but

00:10:41,600 --> 00:10:45,360
of course like everything else there's

00:10:44,079 --> 00:10:48,480
some limitations

00:10:45,360 --> 00:10:51,120
with our product today so one of it is

00:10:48,480 --> 00:10:54,000
the feature gap with onward right so

00:10:51,120 --> 00:10:54,959
um of course envoy has been there for a

00:10:54,000 --> 00:10:57,839
longer time

00:10:54,959 --> 00:10:58,399
so we're still trying to catch up with

00:10:57,839 --> 00:11:01,120
all the

00:10:58,399 --> 00:11:02,160
features that envoy has and i'm going to

00:11:01,120 --> 00:11:05,760
talk about that

00:11:02,160 --> 00:11:08,640
in more detail in a few slides down

00:11:05,760 --> 00:11:11,600
and then the other part is all the

00:11:08,640 --> 00:11:13,440
ecosystem around envoy filters right so

00:11:11,600 --> 00:11:16,560
you might say oh but enway has these

00:11:13,440 --> 00:11:18,160
cool filters and observability tools

00:11:16,560 --> 00:11:20,240
we are trying to catch up with those as

00:11:18,160 --> 00:11:23,519
well so grpc already has

00:11:20,240 --> 00:11:24,720
interceptors and it also has the open

00:11:23,519 --> 00:11:27,839
census integration

00:11:24,720 --> 00:11:30,000
so that that covers part of it

00:11:27,839 --> 00:11:30,880
but we're in process of making it better

00:11:30,000 --> 00:11:34,240
and better

00:11:30,880 --> 00:11:36,160
and then um of course gr

00:11:34,240 --> 00:11:38,320
you might say okay grpc applications

00:11:36,160 --> 00:11:40,399
need some changes right so you need to

00:11:38,320 --> 00:11:41,120
upgrade your grpc you need to provide it

00:11:40,399 --> 00:11:44,399
with strap

00:11:41,120 --> 00:11:46,720
etc so uh

00:11:44,399 --> 00:11:48,399
so the challenge with upgrading etc it

00:11:46,720 --> 00:11:50,079
usually applies to more legacy

00:11:48,399 --> 00:11:51,440
applications so if you're a modern

00:11:50,079 --> 00:11:53,519
application you just

00:11:51,440 --> 00:11:55,040
you already have great ci cd pipelines

00:11:53,519 --> 00:11:58,240
so it's not a big deal

00:11:55,040 --> 00:12:00,959
um and then there is

00:11:58,240 --> 00:12:02,880
another downside today which is limited

00:12:00,959 --> 00:12:04,399
language support so the stuff we have

00:12:02,880 --> 00:12:07,040
launched so far

00:12:04,399 --> 00:12:08,000
uh is is just supported in this number

00:12:07,040 --> 00:12:10,480
of

00:12:08,000 --> 00:12:12,720
languages which are which we have

00:12:10,480 --> 00:12:15,600
realized is the most popular languages

00:12:12,720 --> 00:12:18,720
in the service mesh today

00:12:15,600 --> 00:12:20,000
so here's the current status uh so we

00:12:18,720 --> 00:12:23,519
first released

00:12:20,000 --> 00:12:26,800
uh the first version in june 2020

00:12:23,519 --> 00:12:27,600
and then the features that are currently

00:12:26,800 --> 00:12:30,399
supported

00:12:27,600 --> 00:12:32,320
are basically ability to do service

00:12:30,399 --> 00:12:35,519
discovery and load balancing

00:12:32,320 --> 00:12:38,800
and and also route matching

00:12:35,519 --> 00:12:40,720
and traffic splitting and we have

00:12:38,800 --> 00:12:42,240
a bunch of other features in development

00:12:40,720 --> 00:12:45,360
that are just about to be

00:12:42,240 --> 00:12:48,480
launched like uh for example we have

00:12:45,360 --> 00:12:51,519
time out circuit breaking or

00:12:48,480 --> 00:12:55,519
we are also working on the security

00:12:51,519 --> 00:12:58,399
to provide like um tls and mtls

00:12:55,519 --> 00:12:59,519
uh using the control plane policies

00:12:58,399 --> 00:13:02,480
basically

00:12:59,519 --> 00:13:03,600
and also working on some observability

00:13:02,480 --> 00:13:07,040
features

00:13:03,600 --> 00:13:10,320
and um and xcs integration

00:13:07,040 --> 00:13:10,320
so um

00:13:10,959 --> 00:13:14,800
this is a link here that you can

00:13:13,680 --> 00:13:17,920
basically

00:13:14,800 --> 00:13:20,000
browse to and it will provide you with

00:13:17,920 --> 00:13:21,760
the latest updates on our features like

00:13:20,000 --> 00:13:25,279
where we are i'm sure the feature is

00:13:21,760 --> 00:13:25,279
upcoming etc so

00:13:25,360 --> 00:13:31,680
um you might ask okay how

00:13:28,639 --> 00:13:34,880
like you're providing the data plane

00:13:31,680 --> 00:13:36,480
like which is grpc so how about

00:13:34,880 --> 00:13:38,320
control plane where should i get my

00:13:36,480 --> 00:13:42,160
control plane to get started

00:13:38,320 --> 00:13:45,279
uh so uh today

00:13:42,160 --> 00:13:48,079
google cloud's traffic director

00:13:45,279 --> 00:13:50,240
which is a service mesh control plane is

00:13:48,079 --> 00:13:51,760
super compatible with this product that

00:13:50,240 --> 00:13:54,959
we have launched so it

00:13:51,760 --> 00:13:56,800
it provides you with all these service

00:13:54,959 --> 00:13:59,760
mesh functionalities and like

00:13:56,800 --> 00:14:00,880
ability to do uh load balancing and

00:13:59,760 --> 00:14:05,199
routing

00:14:00,880 --> 00:14:05,199
and automatic failovers

00:14:05,600 --> 00:14:11,680
and it works across gc and gk so so this

00:14:09,120 --> 00:14:12,959
works out of the box today you can just

00:14:11,680 --> 00:14:16,000
go ahead and use it

00:14:12,959 --> 00:14:17,680
right away um but of course we know

00:14:16,000 --> 00:14:20,639
like there are other control planes that

00:14:17,680 --> 00:14:23,760
are popular like istio

00:14:20,639 --> 00:14:25,199
and uh we have we have done some

00:14:23,760 --> 00:14:28,160
experimental

00:14:25,199 --> 00:14:30,000
work to see how it works and and there's

00:14:28,160 --> 00:14:33,120
a test here you can browse

00:14:30,000 --> 00:14:35,199
to and try it out but unfortunately we

00:14:33,120 --> 00:14:36,320
don't yet officially support this but we

00:14:35,199 --> 00:14:38,880
have plans to

00:14:36,320 --> 00:14:40,079
in the future uh support this in a more

00:14:38,880 --> 00:14:43,199
official way so

00:14:40,079 --> 00:14:44,880
um and then there is also uh there's a

00:14:43,199 --> 00:14:47,680
go control plane

00:14:44,880 --> 00:14:48,560
uh there there is an issue that's been

00:14:47,680 --> 00:14:52,560
created

00:14:48,560 --> 00:14:54,560
and we we would be happy to see more

00:14:52,560 --> 00:14:57,040
progress on that ticket to

00:14:54,560 --> 00:14:59,920
to get this open source control plane

00:14:57,040 --> 00:15:02,959
compatible with the grpc proxilis

00:14:59,920 --> 00:15:05,680
service mesh uh

00:15:02,959 --> 00:15:06,880
here are some resources if you just want

00:15:05,680 --> 00:15:09,360
if you're interested

00:15:06,880 --> 00:15:10,720
and want to get started on this so these

00:15:09,360 --> 00:15:14,399
are the grfcs

00:15:10,720 --> 00:15:15,920
like um you can you can see

00:15:14,399 --> 00:15:19,600
what the features that are in

00:15:15,920 --> 00:15:22,480
development or existing ones

00:15:19,600 --> 00:15:24,560
and then you can have that link that

00:15:22,480 --> 00:15:27,199
shows you all the features

00:15:24,560 --> 00:15:29,199
and if you're just uh in the beginning

00:15:27,199 --> 00:15:29,839
and trying to learn more of the concepts

00:15:29,199 --> 00:15:32,079
about

00:15:29,839 --> 00:15:33,839
control plane versus data plane and all

00:15:32,079 --> 00:15:36,320
those keywords

00:15:33,839 --> 00:15:37,440
uh you can try some of these links in

00:15:36,320 --> 00:15:40,639
this

00:15:37,440 --> 00:15:43,440
slide so that is it

00:15:40,639 --> 00:15:45,279
like um i'm really glad i got a chance

00:15:43,440 --> 00:15:46,720
to talk to you all so i'm looking

00:15:45,279 --> 00:15:52,000
forward to hearing

00:15:46,720 --> 00:15:52,000

YouTube URL: https://www.youtube.com/watch?v=cGJXkZ7jiDk


