Title: Sponsored Keynote: Kubernetes as the Control Plane for the Hybrid Cloud - Clayton Coleman
Publication date: 2021-05-13
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Sponsored Keynote: Kubernetes as the Control Plane for the Hybrid Cloud - Clayton Coleman, Architect for Kubernetes and OpenShift, Red Hat
Captions: 
	00:00:08,960 --> 00:00:12,880
my previous kubecon talks focused on how

00:00:11,120 --> 00:00:14,960
boring kubernetes needed to be

00:00:12,880 --> 00:00:16,480
after a pretty crazy year feel this is

00:00:14,960 --> 00:00:17,600
the perfect time to talk about the ideas

00:00:16,480 --> 00:00:19,119
that really excite me

00:00:17,600 --> 00:00:20,640
ideas that have evolved within and

00:00:19,119 --> 00:00:22,320
alongside our community

00:00:20,640 --> 00:00:24,720
that i think can help application

00:00:22,320 --> 00:00:26,720
authors and operation teams alike

00:00:24,720 --> 00:00:28,320
seven years ago we began this project

00:00:26,720 --> 00:00:29,920
around a really simple idea

00:00:28,320 --> 00:00:31,439
orchestration of containers with a

00:00:29,920 --> 00:00:33,440
declarative api model

00:00:31,439 --> 00:00:35,120
designed to capture intent our machines

00:00:33,440 --> 00:00:36,079
would realize we heard clearly from

00:00:35,120 --> 00:00:37,920
early adopters

00:00:36,079 --> 00:00:40,239
make that model easily extensible to new

00:00:37,920 --> 00:00:40,559
concepts which has helped us standardize

00:00:40,239 --> 00:00:42,480
how

00:00:40,559 --> 00:00:44,480
teams build and run all types of

00:00:42,480 --> 00:00:45,920
applications but we can't rest on our

00:00:44,480 --> 00:00:48,079
laurels what do we need to do

00:00:45,920 --> 00:00:49,600
to improve security make new application

00:00:48,079 --> 00:00:51,840
abstractions possible and

00:00:49,600 --> 00:00:53,440
continue to improve resiliency and

00:00:51,840 --> 00:00:54,399
operational flexibility and help

00:00:53,440 --> 00:00:57,039
simplify

00:00:54,399 --> 00:00:58,800
what's still pretty complicated today to

00:00:57,039 --> 00:00:59,520
many here kubernetes the container

00:00:58,800 --> 00:01:01,760
orchestrator

00:00:59,520 --> 00:01:03,600
and kubernetes declarative api engine

00:01:01,760 --> 00:01:05,680
may seem inextricably linked

00:01:03,600 --> 00:01:07,200
but what if we reverse direction what if

00:01:05,680 --> 00:01:09,200
we could let kubernetes the api

00:01:07,200 --> 00:01:11,040
take the lead what would kubernetes look

00:01:09,200 --> 00:01:12,799
like without pods

00:01:11,040 --> 00:01:14,560
what would be the basic tools in our

00:01:12,799 --> 00:01:16,000
podlust toolbox

00:01:14,560 --> 00:01:17,920
these are some pretty powerful tools

00:01:16,000 --> 00:01:20,400
namespaces can subdivide our work

00:01:17,920 --> 00:01:22,240
rbac can protect it secrets and config

00:01:20,400 --> 00:01:24,479
maps can accept generic config

00:01:22,240 --> 00:01:26,640
and crds can allow us to define all the

00:01:24,479 --> 00:01:28,240
new apis we need so what you're seeing

00:01:26,640 --> 00:01:30,159
is a really simple prototype of how a

00:01:28,240 --> 00:01:32,320
cube-like control plane might behave

00:01:30,159 --> 00:01:34,320
kubernetes api without pods containers

00:01:32,320 --> 00:01:36,000
or nodes but all the extensibility

00:01:34,320 --> 00:01:38,079
client support and tooling needed to

00:01:36,000 --> 00:01:40,000
integrate declarative apis describing a

00:01:38,079 --> 00:01:40,880
much more integrated world

00:01:40,000 --> 00:01:43,200
so what would we do with this

00:01:40,880 --> 00:01:44,399
lightweight control plane uh well we can

00:01:43,200 --> 00:01:46,479
do quite a lot

00:01:44,399 --> 00:01:48,159
not knowing about pods the crds i'm

00:01:46,479 --> 00:01:50,560
installing today are just some examples

00:01:48,159 --> 00:01:52,799
of existing integrations to cube that

00:01:50,560 --> 00:01:54,000
program things off clusters programming

00:01:52,799 --> 00:01:55,680
cloud resources

00:01:54,000 --> 00:01:57,520
external dns or load balancing that

00:01:55,680 --> 00:01:59,360
coordinates across clusters or

00:01:57,520 --> 00:02:01,200
even provisioning databases to connect

00:01:59,360 --> 00:02:02,640
back to apps on the cluster

00:02:01,200 --> 00:02:04,000
and a key challenge for all these

00:02:02,640 --> 00:02:04,719
integrations today is they require you

00:02:04,000 --> 00:02:06,880
to know

00:02:04,719 --> 00:02:08,319
who owns the integration a less

00:02:06,880 --> 00:02:09,679
opinionated control plane could actually

00:02:08,319 --> 00:02:11,599
be a central spot

00:02:09,679 --> 00:02:13,520
that helps centralize these tools and

00:02:11,599 --> 00:02:15,760
provides new avenues for coordination

00:02:13,520 --> 00:02:18,000
after all they'd just be declarative

00:02:15,760 --> 00:02:20,160
kubernetes compatible apis

00:02:18,000 --> 00:02:21,520
um obviously as we put more and more

00:02:20,160 --> 00:02:24,080
stuff together

00:02:21,520 --> 00:02:25,280
things get more complicated if we just

00:02:24,080 --> 00:02:27,520
put everything together

00:02:25,280 --> 00:02:29,280
in a higher level control plane that

00:02:27,520 --> 00:02:30,000
doesn't actually solve the real problem

00:02:29,280 --> 00:02:32,000
we need to

00:02:30,000 --> 00:02:34,319
tease apart different problems from

00:02:32,000 --> 00:02:36,239
different teams use cases and roles

00:02:34,319 --> 00:02:38,560
you know for better or worse today even

00:02:36,239 --> 00:02:40,160
though our long history of building into

00:02:38,560 --> 00:02:42,000
tenancy within kubernetes

00:02:40,160 --> 00:02:43,760
a single cluster is still a really

00:02:42,000 --> 00:02:45,200
practical boundary for teams and

00:02:43,760 --> 00:02:47,599
extensions

00:02:45,200 --> 00:02:49,200
so that led to asking well if at our

00:02:47,599 --> 00:02:51,599
control plane level we can make getting

00:02:49,200 --> 00:02:53,040
one more cluster incredibly cheap

00:02:51,599 --> 00:02:55,280
maybe we wouldn't need to do as much

00:02:53,040 --> 00:02:56,480
subdivision within a cluster

00:02:55,280 --> 00:02:58,800
so i'm currently connected to our

00:02:56,480 --> 00:03:00,879
prototype i'm going to switch to another

00:02:58,800 --> 00:03:02,560
cluster hosted by that same server the

00:03:00,879 --> 00:03:04,159
prototype conveniently generated a cube

00:03:02,560 --> 00:03:06,560
config and i've got a

00:03:04,159 --> 00:03:07,680
user context so you can see that the

00:03:06,560 --> 00:03:09,360
first url

00:03:07,680 --> 00:03:11,200
and the second url have the same host my

00:03:09,360 --> 00:03:12,800
local system but our path

00:03:11,200 --> 00:03:15,040
changed and it included the name of a

00:03:12,800 --> 00:03:16,959
cluster what does that mean

00:03:15,040 --> 00:03:18,239
well it means that in this new context

00:03:16,959 --> 00:03:19,840
in this new cluster

00:03:18,239 --> 00:03:21,760
the crds i installed in the other

00:03:19,840 --> 00:03:24,159
cluster aren't there

00:03:21,760 --> 00:03:25,200
if we could tenant crds and separate

00:03:24,159 --> 00:03:26,879
them out that means

00:03:25,200 --> 00:03:28,319
one team could install what they like

00:03:26,879 --> 00:03:28,720
and another team would be isolated from

00:03:28,319 --> 00:03:31,120
them

00:03:28,720 --> 00:03:32,239
that's a pretty strong boundary if you

00:03:31,120 --> 00:03:34,480
go further

00:03:32,239 --> 00:03:36,080
imagine having instead of one cluster

00:03:34,480 --> 00:03:37,360
with thousands of services

00:03:36,080 --> 00:03:40,400
what if we had a thousand little

00:03:37,360 --> 00:03:42,799
clusters each running one service

00:03:40,400 --> 00:03:43,519
how might we change our applications and

00:03:42,799 --> 00:03:46,000
the way that they

00:03:43,519 --> 00:03:47,680
the apis that we need to talk in order

00:03:46,000 --> 00:03:49,680
to bring that to light

00:03:47,680 --> 00:03:50,959
team a and team b collaborate on a

00:03:49,680 --> 00:03:53,120
service without knowing about the

00:03:50,959 --> 00:03:54,640
implementation details of the other

00:03:53,120 --> 00:03:56,319
but of course we won't have thousands of

00:03:54,640 --> 00:03:56,959
applications to run unless we can bring

00:03:56,319 --> 00:03:59,360
them all

00:03:56,959 --> 00:04:00,000
to our new lightweight control plane so

00:03:59,360 --> 00:04:02,480
what if we could

00:04:00,000 --> 00:04:03,040
connect our control plane to an existing

00:04:02,480 --> 00:04:05,120
cluster

00:04:03,040 --> 00:04:06,640
turn cube the api back into cue the

00:04:05,120 --> 00:04:09,120
orchestrator

00:04:06,640 --> 00:04:11,200
i provide location and credentials to

00:04:09,120 --> 00:04:13,439
this crd of a real cluster

00:04:11,200 --> 00:04:14,400
which allows us to go and import the

00:04:13,439 --> 00:04:16,239
apis right

00:04:14,400 --> 00:04:17,519
it's just an api the cube model makes

00:04:16,239 --> 00:04:19,600
this easy and

00:04:17,519 --> 00:04:21,280
you know this is a demo so let's throw a

00:04:19,600 --> 00:04:22,479
second cluster in there so that

00:04:21,280 --> 00:04:24,560
we don't have a new single point of

00:04:22,479 --> 00:04:27,520
failure you can see that we

00:04:24,560 --> 00:04:28,720
grabbed the deployment api object from

00:04:27,520 --> 00:04:30,720
the underlying cluster

00:04:28,720 --> 00:04:32,320
which allows me to now go create one but

00:04:30,720 --> 00:04:33,199
this server doesn't know anything about

00:04:32,320 --> 00:04:36,560
deployments

00:04:33,199 --> 00:04:37,680
it's just an api i've created this api

00:04:36,560 --> 00:04:40,080
and the declarative

00:04:37,680 --> 00:04:41,600
nature of a deployment works for our

00:04:40,080 --> 00:04:43,120
favor we can have an integration a

00:04:41,600 --> 00:04:45,199
really simple one that

00:04:43,120 --> 00:04:46,479
takes that top level deployment just

00:04:45,199 --> 00:04:49,440
creates two and then

00:04:46,479 --> 00:04:50,160
tells each cluster to go and create them

00:04:49,440 --> 00:04:51,680
we've

00:04:50,160 --> 00:04:53,440
made it so that the application author

00:04:51,680 --> 00:04:54,960
doesn't really need to know

00:04:53,440 --> 00:04:57,040
about the details of those underlying

00:04:54,960 --> 00:04:58,560
clusters um and

00:04:57,040 --> 00:04:59,919
for applications that are shared nothing

00:04:58,560 --> 00:05:00,400
this integration would work great you

00:04:59,919 --> 00:05:01,280
can see

00:05:00,400 --> 00:05:04,160
you know i could put two different

00:05:01,280 --> 00:05:05,919
replicas on two different clusters and

00:05:04,160 --> 00:05:07,199
nobody has to know the difference to an

00:05:05,919 --> 00:05:09,360
application author i've said

00:05:07,199 --> 00:05:10,560
here's what i want in the standard way

00:05:09,360 --> 00:05:12,880
that i do today

00:05:10,560 --> 00:05:14,800
but now suddenly my control plane is

00:05:12,880 --> 00:05:16,639
hiding some of the details from me

00:05:14,800 --> 00:05:18,160
and this brings us full circle we've

00:05:16,639 --> 00:05:21,520
gone from cube to api

00:05:18,160 --> 00:05:24,479
now back to a full cube application um

00:05:21,520 --> 00:05:25,759
maybe seven years into kubernetes we've

00:05:24,479 --> 00:05:28,080
finally come to the point where

00:05:25,759 --> 00:05:29,280
we can define our applications without

00:05:28,080 --> 00:05:31,840
needing to know about

00:05:29,280 --> 00:05:33,759
pods nodes and the implementation

00:05:31,840 --> 00:05:36,400
details of clusters

00:05:33,759 --> 00:05:37,759
i think this is a great start to some of

00:05:36,400 --> 00:05:38,560
the ideas where we could go in the

00:05:37,759 --> 00:05:40,080
future

00:05:38,560 --> 00:05:41,600
so everything i showed you today is part

00:05:40,080 --> 00:05:42,880
of a simple and delightfully hacky

00:05:41,600 --> 00:05:44,960
prototype that we're calling

00:05:42,880 --> 00:05:46,400
kcp it's just a way to explore some out

00:05:44,960 --> 00:05:46,960
there concepts that might be part of our

00:05:46,400 --> 00:05:48,320
future

00:05:46,960 --> 00:05:49,840
if your work ideas or interests

00:05:48,320 --> 00:05:51,759
intersect with ours check out our github

00:05:49,840 --> 00:05:54,160
repository at

00:05:51,759 --> 00:05:55,840
kcp the readme covers the real and not

00:05:54,160 --> 00:05:57,919
quite real parts of this demo

00:05:55,840 --> 00:05:59,919
but more importantly details the ideas

00:05:57,919 --> 00:06:01,360
inspirations and possibilities i hope

00:05:59,919 --> 00:06:02,400
can excite the next seven years of

00:06:01,360 --> 00:06:06,639
kubernetes

00:06:02,400 --> 00:06:06,639

YouTube URL: https://www.youtube.com/watch?v=Xd0uzgZqYgk


