Title: Building a Portable Kubernetes Deployment Pipeline with Argo Workflo... Thomas Meadows & Ollie Young
Publication date: 2021-05-09
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Building a Portable Kubernetes Deployment Pipeline with Argo Workflows and Events - Thomas Meadows, Jetstack & Ollie Young, Improbable

In this session, Jetstack and Improbable will uncover the key learnings from building a Kubernetes based platform, driven by Argo workflows and events. Featuring discussion on the platform's strong data aggregation and the ability to deploy on any estate (including air-gapped facilities), this session will investigate the problems and benefits of using Argo and Kubernetes as the key ingredients towards the goal of a holistic approach to portable platforms. The technical content of the presentation will cover: - A general overview of why Argo Workflows and Events were selected - Best practice when building a cloud native platform to work across multi-cloud environments - Rationale for rejecting the typical CI/CD model in favour of a custom solution - Techniques for isolating workflows in multi-tenanted environments - Running Terraform in Argo - Ephemeral environments and managing highly scalable cluster configurations - Platform portability and being infrastructure agnostic
Captions: 
	00:00:01,439 --> 00:00:04,720
so hello kubecon

00:00:03,040 --> 00:00:06,160
uh thank you very much for coming to our

00:00:04,720 --> 00:00:08,320
talk my name is tom

00:00:06,160 --> 00:00:10,880
and i'm a solutions engineer at jet

00:00:08,320 --> 00:00:13,599
stack i'm joined here by ollie so

00:00:10,880 --> 00:00:15,040
hello ollie hello yes i'm olly young

00:00:13,599 --> 00:00:16,080
software engineer improbable in the

00:00:15,040 --> 00:00:20,000
defense unit

00:00:16,080 --> 00:00:21,520
in the eve engineering velocity team

00:00:20,000 --> 00:00:23,439
today we're going to tell you the story

00:00:21,520 --> 00:00:25,680
of how improbable and jet stack

00:00:23,439 --> 00:00:27,760
worked to build deployment and release

00:00:25,680 --> 00:00:29,439
service using kubernetes technologies

00:00:27,760 --> 00:00:33,280
such as argo workflows

00:00:29,439 --> 00:00:35,120
and events this is a multifaceted story

00:00:33,280 --> 00:00:37,280
which includes

00:00:35,120 --> 00:00:38,559
many complexities and design challenges

00:00:37,280 --> 00:00:40,640
that we had to overcome

00:00:38,559 --> 00:00:41,680
in order to be able to achieve the

00:00:40,640 --> 00:00:44,879
ultimate goal

00:00:41,680 --> 00:00:47,200
of providing improbable with a platform

00:00:44,879 --> 00:00:48,559
that could be deployed anywhere under

00:00:47,200 --> 00:00:50,800
any circumstances

00:00:48,559 --> 00:00:51,680
whether that be on the edge on-prem or

00:00:50,800 --> 00:00:53,440
in public cloud

00:00:51,680 --> 00:00:55,520
so without further ado we want to kick

00:00:53,440 --> 00:00:59,280
off by talking to you about the problem

00:00:55,520 --> 00:01:01,840
at hand we needed to start out by

00:00:59,280 --> 00:01:03,280
determining what is the platform and

00:01:01,840 --> 00:01:05,119
what are the ultimate goals

00:01:03,280 --> 00:01:07,040
of what we need for it to be delivered

00:01:05,119 --> 00:01:08,000
so ollie what's the platform that we are

00:01:07,040 --> 00:01:09,760
building for

00:01:08,000 --> 00:01:11,600
um and and what were the sort of design

00:01:09,760 --> 00:01:14,080
challenges we needed to overcome

00:01:11,600 --> 00:01:14,880
to have the platform deployed and

00:01:14,080 --> 00:01:17,280
operational

00:01:14,880 --> 00:01:18,479
so improv we've built a synthetic

00:01:17,280 --> 00:01:20,320
environment platform

00:01:18,479 --> 00:01:22,640
and a synthetic environment is

00:01:20,320 --> 00:01:25,119
essentially just a highly scalable

00:01:22,640 --> 00:01:26,479
simulation or grouping of simulations

00:01:25,119 --> 00:01:29,680
that can be

00:01:26,479 --> 00:01:31,439
used to represent various movements

00:01:29,680 --> 00:01:32,720
across multiple domains so when i say a

00:01:31,439 --> 00:01:34,159
domain i actually mean

00:01:32,720 --> 00:01:35,759
in the defense sense of the word so

00:01:34,159 --> 00:01:38,880
we're talking land sea

00:01:35,759 --> 00:01:41,600
air space cyber and we can simulate

00:01:38,880 --> 00:01:43,600
vehicle movements civilian movements and

00:01:41,600 --> 00:01:45,680
we can package all of that together

00:01:43,600 --> 00:01:46,640
and enable our customers to build a

00:01:45,680 --> 00:01:48,960
virtual world

00:01:46,640 --> 00:01:50,640
containing all of that information so

00:01:48,960 --> 00:01:52,640
that's what our platform does it enables

00:01:50,640 --> 00:01:54,880
you to build a fully capable synthetic

00:01:52,640 --> 00:01:57,439
environment at scale so

00:01:54,880 --> 00:01:59,119
our platform is essentially made up of

00:01:57,439 --> 00:02:00,560
multiple components built by multiple

00:01:59,119 --> 00:02:02,320
people or multiple teams

00:02:00,560 --> 00:02:04,399
when we deploy it we cannot really

00:02:02,320 --> 00:02:06,719
assume that we're going to run on any

00:02:04,399 --> 00:02:08,879
specific flavor of kubernetes

00:02:06,719 --> 00:02:10,720
it could be you know running on a on a

00:02:08,879 --> 00:02:12,480
customer site and in a military context

00:02:10,720 --> 00:02:14,800
that could be a forward operating base

00:02:12,480 --> 00:02:16,400
with zero internet connectivity and so

00:02:14,800 --> 00:02:18,080
these are the sort of target deployment

00:02:16,400 --> 00:02:19,360
environments we need to deploy to

00:02:18,080 --> 00:02:21,599
and that's essentially one of the

00:02:19,360 --> 00:02:23,680
problems we're trying to solve here

00:02:21,599 --> 00:02:25,360
so i guess ollie you mentioned that the

00:02:23,680 --> 00:02:27,680
end goal of the platform was to be able

00:02:25,360 --> 00:02:29,520
to deploy on any kubernetes service

00:02:27,680 --> 00:02:30,800
uh it needs to be completely unbiased in

00:02:29,520 --> 00:02:32,400
that sense but also

00:02:30,800 --> 00:02:34,400
it can't rely on an external internet

00:02:32,400 --> 00:02:36,000
connection these sort of problems

00:02:34,400 --> 00:02:37,360
you can think of the top of your head if

00:02:36,000 --> 00:02:38,400
you've got any experience with building

00:02:37,360 --> 00:02:40,239
platforms like this

00:02:38,400 --> 00:02:41,680
as to what the sort of challenges we

00:02:40,239 --> 00:02:42,239
face were to be but what sort of

00:02:41,680 --> 00:02:44,959
challenges

00:02:42,239 --> 00:02:45,760
does that pose well there's things like

00:02:44,959 --> 00:02:47,440
you know

00:02:45,760 --> 00:02:49,120
not being able to pull containers down

00:02:47,440 --> 00:02:50,879
is is a is a huge thing

00:02:49,120 --> 00:02:53,120
you know we're having to think about how

00:02:50,879 --> 00:02:53,440
we deploy to somewhere where you've not

00:02:53,120 --> 00:02:54,959
got

00:02:53,440 --> 00:02:56,720
you can't just pull source containers

00:02:54,959 --> 00:02:58,080
down so we we need a way to actually

00:02:56,720 --> 00:03:00,959
deploy it as

00:02:58,080 --> 00:03:02,480
some other way whether that's by like us

00:03:00,959 --> 00:03:04,080
put getting the yaml together and

00:03:02,480 --> 00:03:05,760
putting it on a usb stick it goes

00:03:04,080 --> 00:03:06,159
through some some vetting process and

00:03:05,760 --> 00:03:07,599
then

00:03:06,159 --> 00:03:09,200
it's plugged into a customer's site that

00:03:07,599 --> 00:03:10,640
might be one way but it's

00:03:09,200 --> 00:03:12,239
you know all the things you take for

00:03:10,640 --> 00:03:12,959
granted by just having an internet

00:03:12,239 --> 00:03:14,239
connection

00:03:12,959 --> 00:03:17,360
which these days is pretty much

00:03:14,239 --> 00:03:18,720
everything those things are

00:03:17,360 --> 00:03:20,959
something we have to work around because

00:03:18,720 --> 00:03:23,280
they're not always available to us

00:03:20,959 --> 00:03:24,640
yeah absolutely so moving on i can

00:03:23,280 --> 00:03:26,319
imagine that you know

00:03:24,640 --> 00:03:28,640
a platform that allows you to build

00:03:26,319 --> 00:03:30,080
virtual worlds can be very complex

00:03:28,640 --> 00:03:31,519
and i can imagine that there are lots of

00:03:30,080 --> 00:03:32,959
different components moving around that

00:03:31,519 --> 00:03:33,599
being developed by a lot of different

00:03:32,959 --> 00:03:35,599
people

00:03:33,599 --> 00:03:36,799
in a lot of different teams with lots of

00:03:35,599 --> 00:03:38,640
different methods so

00:03:36,799 --> 00:03:39,920
what sort of problems did you face from

00:03:38,640 --> 00:03:41,920
from that perspective

00:03:39,920 --> 00:03:43,440
yeah there's many so yeah we sort of

00:03:41,920 --> 00:03:44,959
offer the platform as a base and i guess

00:03:43,440 --> 00:03:46,239
we'll probably talk get onto that in a

00:03:44,959 --> 00:03:48,480
moment but when we

00:03:46,239 --> 00:03:49,760
want to implement it you know a customer

00:03:48,480 --> 00:03:52,239
has a certain use case

00:03:49,760 --> 00:03:53,439
and we've got an issue there where

00:03:52,239 --> 00:03:55,840
suddenly we need to

00:03:53,439 --> 00:03:57,360
this platform that our core product

00:03:55,840 --> 00:03:59,120
needs to be fully extensible in that we

00:03:57,360 --> 00:03:59,519
need to add things onto it to get it to

00:03:59,120 --> 00:04:01,200
do

00:03:59,519 --> 00:04:02,879
a certain type of simulation or use a

00:04:01,200 --> 00:04:05,360
certain type of technology

00:04:02,879 --> 00:04:06,879
and in you know in order to do that and

00:04:05,360 --> 00:04:08,400
get all that working together

00:04:06,879 --> 00:04:10,080
you may need collaboration from third

00:04:08,400 --> 00:04:11,680
parties or certainly even just other

00:04:10,080 --> 00:04:13,200
teams within our own business

00:04:11,680 --> 00:04:14,080
and getting them all working together

00:04:13,200 --> 00:04:14,799
and then once you've got all these

00:04:14,080 --> 00:04:15,840
components

00:04:14,799 --> 00:04:18,239
sort of talking to each other and

00:04:15,840 --> 00:04:20,799
working together you need to test that

00:04:18,239 --> 00:04:21,680
and so that presents challenges in

00:04:20,799 --> 00:04:23,280
itself as well

00:04:21,680 --> 00:04:25,440
you know you you may have a different

00:04:23,280 --> 00:04:27,520
use case for one customer and then

00:04:25,440 --> 00:04:29,040
another use case for another customer

00:04:27,520 --> 00:04:29,919
you can't use the same approach to

00:04:29,040 --> 00:04:31,199
testing across

00:04:29,919 --> 00:04:33,120
across both those use cases because

00:04:31,199 --> 00:04:35,680
you've got the different components

00:04:33,120 --> 00:04:37,440
so yeah we need a way to easily do

00:04:35,680 --> 00:04:39,120
integration testing of components on a

00:04:37,440 --> 00:04:42,160
per customer basis

00:04:39,120 --> 00:04:44,240
tracking changes and versioning there's

00:04:42,160 --> 00:04:45,199
there wasn't really any of that it was a

00:04:44,240 --> 00:04:46,800
bit of a mishmash

00:04:45,199 --> 00:04:48,080
especially when you've got third parties

00:04:46,800 --> 00:04:49,520
involved as well that's when it really

00:04:48,080 --> 00:04:51,360
gets complicated so

00:04:49,520 --> 00:04:52,800
it would often be a case of just getting

00:04:51,360 --> 00:04:55,199
some automated tests running in

00:04:52,800 --> 00:04:56,560
a container standing up you know a

00:04:55,199 --> 00:04:58,720
temporary cluster or something

00:04:56,560 --> 00:05:00,240
mini cube or something like that even uh

00:04:58,720 --> 00:05:02,240
you know just to just to get

00:05:00,240 --> 00:05:03,919
uh some end-to-end tests to run problem

00:05:02,240 --> 00:05:05,360
was those tests might

00:05:03,919 --> 00:05:07,520
work on one set of components to one

00:05:05,360 --> 00:05:09,440
customer you'd have to

00:05:07,520 --> 00:05:10,639
write a whole other set in a separate

00:05:09,440 --> 00:05:11,440
pipeline and everything for another

00:05:10,639 --> 00:05:12,960
customer

00:05:11,440 --> 00:05:14,080
we really needed an easier way to do

00:05:12,960 --> 00:05:16,000
that because it was starting to get a

00:05:14,080 --> 00:05:17,520
bit messy and a bit uncontrolled and

00:05:16,000 --> 00:05:19,280
really difficult for auditing that sort

00:05:17,520 --> 00:05:21,120
of thing i want to ask you about

00:05:19,280 --> 00:05:22,720
you know the the end deployment to the

00:05:21,120 --> 00:05:25,199
end customer because we've spoken a bit

00:05:22,720 --> 00:05:28,080
about how we need to be able to deploy

00:05:25,199 --> 00:05:29,280
to any any customer infrastructure so um

00:05:28,080 --> 00:05:29,840
if you want to tell us a little bit

00:05:29,280 --> 00:05:31,680
about

00:05:29,840 --> 00:05:32,960
about the you know just to reiterate

00:05:31,680 --> 00:05:33,840
over some of the problems that were

00:05:32,960 --> 00:05:36,000
posed there

00:05:33,840 --> 00:05:37,520
yeah we have to essentially figure out

00:05:36,000 --> 00:05:39,919
how to

00:05:37,520 --> 00:05:41,520
package up our product which is like i

00:05:39,919 --> 00:05:42,320
said a bunch of different components

00:05:41,520 --> 00:05:43,759
which is could

00:05:42,320 --> 00:05:45,919
be concerned in some cases a bunch of

00:05:43,759 --> 00:05:48,560
different micro service or data sources

00:05:45,919 --> 00:05:50,080
package that up and get all of that

00:05:48,560 --> 00:05:51,280
information that deployment yaml and the

00:05:50,080 --> 00:05:52,240
containers and figure out how we're

00:05:51,280 --> 00:05:55,280
going to

00:05:52,240 --> 00:05:57,600
put that essentially anywhere

00:05:55,280 --> 00:05:59,199
so yeah bare metal is obviously another

00:05:57,600 --> 00:06:00,080
another popular one with you know

00:05:59,199 --> 00:06:01,520
because

00:06:00,080 --> 00:06:04,240
military customers are not going to be

00:06:01,520 --> 00:06:06,319
you know running on aws for example

00:06:04,240 --> 00:06:08,319
you can imagine the manual task of

00:06:06,319 --> 00:06:11,360
having to sift through those manifests

00:06:08,319 --> 00:06:13,680
to find the specific images having to

00:06:11,360 --> 00:06:14,400
having to troll through lots of manifest

00:06:13,680 --> 00:06:16,000
to find

00:06:14,400 --> 00:06:17,600
annotations that could be a real

00:06:16,000 --> 00:06:19,039
challenge and i guess the

00:06:17,600 --> 00:06:21,039
the end goal is trying to find a

00:06:19,039 --> 00:06:22,960
situation where you can develop a

00:06:21,039 --> 00:06:25,520
platform that requires as little

00:06:22,960 --> 00:06:26,319
extra combing and refactoring after

00:06:25,520 --> 00:06:28,080
being built

00:06:26,319 --> 00:06:29,440
so it can run on the likes of these air

00:06:28,080 --> 00:06:31,360
gap facilities or

00:06:29,440 --> 00:06:32,479
any facility for that matter uh no

00:06:31,360 --> 00:06:34,400
matter where you're going

00:06:32,479 --> 00:06:36,400
i guess this is where it get got to the

00:06:34,400 --> 00:06:38,479
point of the project where we had to

00:06:36,400 --> 00:06:40,479
come up with a solution i'll start off

00:06:38,479 --> 00:06:43,199
by you know walking you through

00:06:40,479 --> 00:06:44,240
what we call the orchestrator we decided

00:06:43,199 --> 00:06:45,840
we want to have

00:06:44,240 --> 00:06:47,840
a centralized approach of the

00:06:45,840 --> 00:06:48,880
development platform so we call it the

00:06:47,840 --> 00:06:50,800
orchestrator

00:06:48,880 --> 00:06:53,199
and what this is is a single source of

00:06:50,800 --> 00:06:55,759
truth uh for tracking component changes

00:06:53,199 --> 00:06:56,800
on the improbable defense platform this

00:06:55,759 --> 00:07:00,080
orchestrator

00:06:56,800 --> 00:07:02,000
is also our single back-end data store

00:07:00,080 --> 00:07:03,759
so this this will be relied upon to

00:07:02,000 --> 00:07:06,639
store all of the data

00:07:03,759 --> 00:07:07,680
required for tracking those changes and

00:07:06,639 --> 00:07:10,000
all the management

00:07:07,680 --> 00:07:12,000
that we want to be taking place it's

00:07:10,000 --> 00:07:13,919
also responsible for orchestrating

00:07:12,000 --> 00:07:16,000
infrastructure in an ideal world

00:07:13,919 --> 00:07:17,120
we want the improbable developers to be

00:07:16,000 --> 00:07:18,960
able to request

00:07:17,120 --> 00:07:21,280
an environment based off specific

00:07:18,960 --> 00:07:22,960
version and just get to work from there

00:07:21,280 --> 00:07:25,039
they don't want the hassle of deploying

00:07:22,960 --> 00:07:26,560
and configuring before they can test

00:07:25,039 --> 00:07:29,120
their changes

00:07:26,560 --> 00:07:30,720
we also want a structure inside of this

00:07:29,120 --> 00:07:33,520
of this orchestrator system

00:07:30,720 --> 00:07:34,800
to be able to autonomously execute tests

00:07:33,520 --> 00:07:36,479
so in an ideal world

00:07:34,800 --> 00:07:38,319
improbable engineers shouldn't even

00:07:36,479 --> 00:07:39,199
really need to spin up environments to

00:07:38,319 --> 00:07:41,520
test their code

00:07:39,199 --> 00:07:43,599
as they develop in an ideal world they'd

00:07:41,520 --> 00:07:46,000
have a ci cd-like pipeline

00:07:43,599 --> 00:07:46,800
which just shows their changes being

00:07:46,000 --> 00:07:48,960
escalated

00:07:46,800 --> 00:07:50,639
from from an alpha stage all the way to

00:07:48,960 --> 00:07:53,440
general release

00:07:50,639 --> 00:07:54,960
and finally we want an always available

00:07:53,440 --> 00:07:56,639
set of demo environments

00:07:54,960 --> 00:07:58,319
yeah yeah just on those demo

00:07:56,639 --> 00:07:59,120
environments i mean that's even just

00:07:58,319 --> 00:08:00,879
between

00:07:59,120 --> 00:08:02,240
you know developers and business people

00:08:00,879 --> 00:08:05,280
within our company it's

00:08:02,240 --> 00:08:07,039
it's really useful to be able to say

00:08:05,280 --> 00:08:08,720
and look what we've created and we can

00:08:07,039 --> 00:08:11,039
do a demo and that we can quickly

00:08:08,720 --> 00:08:12,400
you know spin up a cluster and just ping

00:08:11,039 --> 00:08:14,400
a link to somebody

00:08:12,400 --> 00:08:15,919
and can show off the work we've done so

00:08:14,400 --> 00:08:16,400
that's a really useful capability for

00:08:15,919 --> 00:08:18,000
both

00:08:16,400 --> 00:08:19,759
developer and business you know

00:08:18,000 --> 00:08:21,039
communication and it could even be used

00:08:19,759 --> 00:08:23,199
for you know product demos and things

00:08:21,039 --> 00:08:26,000
like that which we have done yeah

00:08:23,199 --> 00:08:26,879
absolutely so we spoke about this

00:08:26,000 --> 00:08:29,599
orchestrator

00:08:26,879 --> 00:08:31,199
platform which is the central hub of the

00:08:29,599 --> 00:08:32,479
development cycle for the improbable

00:08:31,199 --> 00:08:34,800
defense platform

00:08:32,479 --> 00:08:36,080
in our proposed solution we wanted an

00:08:34,800 --> 00:08:38,560
automated system

00:08:36,080 --> 00:08:39,680
for generating new versions as changes

00:08:38,560 --> 00:08:41,279
are made in git

00:08:39,680 --> 00:08:42,800
no matter which team it is that makes

00:08:41,279 --> 00:08:44,240
the what makes the changes

00:08:42,800 --> 00:08:46,480
it's automatically picked up by the

00:08:44,240 --> 00:08:47,680
orchestrator cluster and then generated

00:08:46,480 --> 00:08:49,680
with a new version

00:08:47,680 --> 00:08:51,440
that can be consumed by those developers

00:08:49,680 --> 00:08:54,000
that can then be taken onwards

00:08:51,440 --> 00:08:56,080
into the qa journey as those engineers

00:08:54,000 --> 00:08:57,600
start to integrate those changes further

00:08:56,080 --> 00:09:00,399
with the other components on the

00:08:57,600 --> 00:09:02,640
platform the system designed by

00:09:00,399 --> 00:09:04,720
improbable and jet stack also very

00:09:02,640 --> 00:09:08,000
importantly needed to solve the problem

00:09:04,720 --> 00:09:09,600
of projects we want this orchestrator

00:09:08,000 --> 00:09:11,600
system to be able to handle

00:09:09,600 --> 00:09:14,000
data and object separation between each

00:09:11,600 --> 00:09:16,480
project but what we also wanted was

00:09:14,000 --> 00:09:19,519
dedicated versioning for those projects

00:09:16,480 --> 00:09:21,760
as well as automated testing and finally

00:09:19,519 --> 00:09:22,800
dedicated developer environments for

00:09:21,760 --> 00:09:25,040
those projects

00:09:22,800 --> 00:09:26,800
there are external developers that are

00:09:25,040 --> 00:09:28,720
collaborating on these projects

00:09:26,800 --> 00:09:31,040
to make the synthetic environments come

00:09:28,720 --> 00:09:33,120
to life and we need to make sure from

00:09:31,040 --> 00:09:34,080
from the probable defense standpoint

00:09:33,120 --> 00:09:36,800
that access

00:09:34,080 --> 00:09:37,519
is limited to all all the access that

00:09:36,800 --> 00:09:40,959
they need

00:09:37,519 --> 00:09:43,680
and no more yeah absolutely um and

00:09:40,959 --> 00:09:44,720
yeah it i guess like in a sort of how

00:09:43,680 --> 00:09:47,040
you how you

00:09:44,720 --> 00:09:48,720
how you apply that um it can be achieved

00:09:47,040 --> 00:09:49,519
through for our back and various other

00:09:48,720 --> 00:09:51,200
means

00:09:49,519 --> 00:09:52,800
as we'll talk about in a minute the sort

00:09:51,200 --> 00:09:53,519
of name spacing of various jobs and

00:09:52,800 --> 00:09:55,200
things like that

00:09:53,519 --> 00:09:56,959
yeah lends itself nicely to this sort of

00:09:55,200 --> 00:09:57,360
thing that's all good well i think we

00:09:56,959 --> 00:09:59,600
should

00:09:57,360 --> 00:10:00,480
crack on with the technology choices

00:09:59,600 --> 00:10:03,040
hopefully

00:10:00,480 --> 00:10:05,600
there's no open stack or mesos to be

00:10:03,040 --> 00:10:07,360
seen

00:10:05,600 --> 00:10:08,720
not that i've got a problem with with

00:10:07,360 --> 00:10:11,040
openstack or mesos

00:10:08,720 --> 00:10:13,040
oh yeah you you can deploy kubernetes on

00:10:11,040 --> 00:10:15,200
openstack now can't you

00:10:13,040 --> 00:10:16,839
that's not open shift that's nothing i

00:10:15,200 --> 00:10:20,079
found the time to do

00:10:16,839 --> 00:10:21,600
no okay so the ground reveal what were

00:10:20,079 --> 00:10:23,680
our technology choices

00:10:21,600 --> 00:10:25,279
i'm sure you're not all shocked to find

00:10:23,680 --> 00:10:26,320
out that our decision for the

00:10:25,279 --> 00:10:29,279
orchestrator

00:10:26,320 --> 00:10:30,640
cluster was to use kubernetes and google

00:10:29,279 --> 00:10:33,120
kubernetes engine

00:10:30,640 --> 00:10:34,160
as i mentioned it's our nucleus for all

00:10:33,120 --> 00:10:36,240
operations

00:10:34,160 --> 00:10:38,079
it is our main back-end store we

00:10:36,240 --> 00:10:40,000
mentioned that we wanted to keep track

00:10:38,079 --> 00:10:42,560
inside of our orchestrator cluster

00:10:40,000 --> 00:10:43,040
with dedicated versioning we achieved

00:10:42,560 --> 00:10:46,320
that

00:10:43,040 --> 00:10:48,079
by using kubernetes crds i think

00:10:46,320 --> 00:10:49,760
i think this is an appropriate time to

00:10:48,079 --> 00:10:51,920
get some opinions from ollie

00:10:49,760 --> 00:10:53,120
on why we made this decision and why we

00:10:51,920 --> 00:10:55,040
didn't go for an

00:10:53,120 --> 00:10:57,760
option such as creating a dedicated

00:10:55,040 --> 00:11:00,079
database for storing this information

00:10:57,760 --> 00:11:01,519
yeah there's some very easy answer to

00:11:00,079 --> 00:11:03,360
this question i mean

00:11:01,519 --> 00:11:05,040
just the overhead of managing a database

00:11:03,360 --> 00:11:08,399
to store all of this information is

00:11:05,040 --> 00:11:09,680
is not an attractive proposition to us

00:11:08,399 --> 00:11:11,440
you know we we talked about ways of

00:11:09,680 --> 00:11:13,440
storing this versioning data of all the

00:11:11,440 --> 00:11:14,959
all the components and how we manage

00:11:13,440 --> 00:11:15,680
that kubernetes out of the box can do

00:11:14,959 --> 00:11:19,279
this you've got

00:11:15,680 --> 00:11:20,320
crds and you've got fcd so lcd is

00:11:19,279 --> 00:11:22,000
database for free right if you're

00:11:20,320 --> 00:11:22,399
running the kubernetes cluster that's

00:11:22,000 --> 00:11:24,240
there

00:11:22,399 --> 00:11:26,399
all you need to do is to write some crds

00:11:24,240 --> 00:11:27,519
to store whatever data you want and

00:11:26,399 --> 00:11:28,720
we've done it in a way

00:11:27,519 --> 00:11:30,560
you know that we can use for it for a

00:11:28,720 --> 00:11:32,000
versioning of our product

00:11:30,560 --> 00:11:34,000
the next thing that we were able to

00:11:32,000 --> 00:11:37,120
achieve with our orchestrator cluster

00:11:34,000 --> 00:11:37,760
um housed on gke was the ability to vend

00:11:37,120 --> 00:11:39,680
and manage

00:11:37,760 --> 00:11:41,120
gke development environments so the

00:11:39,680 --> 00:11:43,440
development environments

00:11:41,120 --> 00:11:44,800
that the improbable developers will be

00:11:43,440 --> 00:11:48,560
testing their code against

00:11:44,800 --> 00:11:51,600
will be generated in gke using terraform

00:11:48,560 --> 00:11:53,519
we also have namespace separation with

00:11:51,600 --> 00:11:55,839
rbac for our customer projects

00:11:53,519 --> 00:11:57,760
so this was a very powerful tool that we

00:11:55,839 --> 00:12:00,160
were able to leverage using kubernetes

00:11:57,760 --> 00:12:01,920
and gives exactly the sandbox that we

00:12:00,160 --> 00:12:04,800
needed from project to project

00:12:01,920 --> 00:12:06,000
to store confidential secrets config

00:12:04,800 --> 00:12:09,440
maps of data

00:12:06,000 --> 00:12:10,320
but also the generation of google cloud

00:12:09,440 --> 00:12:13,600
objects

00:12:10,320 --> 00:12:17,200
inside of those sandbox namespaces

00:12:13,600 --> 00:12:19,839
for each project inside that

00:12:17,200 --> 00:12:20,399
dedicated namespace separation they are

00:12:19,839 --> 00:12:22,560
able

00:12:20,399 --> 00:12:24,000
to make the relevant developments with

00:12:22,560 --> 00:12:26,560
partners and internal

00:12:24,000 --> 00:12:27,440
and probable engineers to achieve the

00:12:26,560 --> 00:12:29,920
end goal

00:12:27,440 --> 00:12:31,120
of deploying the kubernetes manifest to

00:12:29,920 --> 00:12:33,600
the customer site

00:12:31,120 --> 00:12:34,240
the orchestrator cluster on gke also

00:12:33,600 --> 00:12:36,320
houses

00:12:34,240 --> 00:12:37,760
some other cloud native toolings such as

00:12:36,320 --> 00:12:40,240
prometheus and grafana

00:12:37,760 --> 00:12:41,600
for monitoring and observability valero

00:12:40,240 --> 00:12:43,680
for disaster recovery

00:12:41,600 --> 00:12:45,760
which is particularly important as we're

00:12:43,680 --> 00:12:46,560
using kubernetes as our main back-end

00:12:45,760 --> 00:12:48,560
store

00:12:46,560 --> 00:12:51,040
pamerium which is an identity aware

00:12:48,560 --> 00:12:52,399
proxy which allows us fine grain access

00:12:51,040 --> 00:12:54,959
controls on

00:12:52,399 --> 00:12:56,240
public facing web applications and

00:12:54,959 --> 00:12:58,480
external dns

00:12:56,240 --> 00:12:59,519
for being able to generate the the web

00:12:58,480 --> 00:13:02,639
addresses we need

00:12:59,519 --> 00:13:04,240
to be able to provide these tools to

00:13:02,639 --> 00:13:06,160
anyone we want on top of the

00:13:04,240 --> 00:13:09,120
orchestrator cluster on gke

00:13:06,160 --> 00:13:10,880
we also built a dedicated rest api we

00:13:09,120 --> 00:13:12,560
felt it was important to abstract the

00:13:10,880 --> 00:13:13,440
kubernetes and infrastructure layer and

00:13:12,560 --> 00:13:16,079
be able to

00:13:13,440 --> 00:13:18,079
avoid engineers needing to deploy

00:13:16,079 --> 00:13:19,519
specific versions of the platform

00:13:18,079 --> 00:13:20,959
based off of all of these different

00:13:19,519 --> 00:13:21,519
components that are being changed all

00:13:20,959 --> 00:13:22,880
the time

00:13:21,519 --> 00:13:24,959
we wanted this to be handled by

00:13:22,880 --> 00:13:26,240
kubernetes and that kubernetes layer to

00:13:24,959 --> 00:13:29,040
be abstracted

00:13:26,240 --> 00:13:30,320
we also wanted the automated workflows

00:13:29,040 --> 00:13:32,959
that are executing

00:13:30,320 --> 00:13:34,399
these tasks to be abstracted as well so

00:13:32,959 --> 00:13:35,440
that the orchestrator is something you

00:13:34,399 --> 00:13:38,320
communicate with

00:13:35,440 --> 00:13:40,000
but you do not need to control so i

00:13:38,320 --> 00:13:41,040
guess ollie this was a really important

00:13:40,000 --> 00:13:43,680
design decision

00:13:41,040 --> 00:13:46,480
when we were going about trying to give

00:13:43,680 --> 00:13:49,360
developers a more efficient experience

00:13:46,480 --> 00:13:50,639
well that's exactly right so our

00:13:49,360 --> 00:13:53,279
certainly my team's goal is

00:13:50,639 --> 00:13:54,800
is to build tooling and increase

00:13:53,279 --> 00:13:56,959
developers velocity

00:13:54,800 --> 00:13:58,399
so we want to developers developing fast

00:13:56,959 --> 00:14:01,519
and failing fast and

00:13:58,399 --> 00:14:02,639
fixing fast and succeeding fast so we

00:14:01,519 --> 00:14:03,680
don't want them messing around with

00:14:02,639 --> 00:14:06,079
having to build

00:14:03,680 --> 00:14:06,800
their own sort of yaml for deploying

00:14:06,079 --> 00:14:08,480
services

00:14:06,800 --> 00:14:10,000
and this sort of thing we don't want

00:14:08,480 --> 00:14:11,040
them to you know go into the google

00:14:10,000 --> 00:14:14,320
cloud console and

00:14:11,040 --> 00:14:16,560
do gk you know spin up a gk because we

00:14:14,320 --> 00:14:17,760
or you know we don't want to be writing

00:14:16,560 --> 00:14:18,639
terraform or anything like that

00:14:17,760 --> 00:14:21,199
themselves

00:14:18,639 --> 00:14:21,839
so we just decided to abstract all of

00:14:21,199 --> 00:14:25,279
this away

00:14:21,839 --> 00:14:27,440
and what it means is they just have um

00:14:25,279 --> 00:14:28,399
we have we put a cli in front of this

00:14:27,440 --> 00:14:29,920
rest api

00:14:28,399 --> 00:14:31,360
so they've got one place where they can

00:14:29,920 --> 00:14:32,720
do all the things we talked about so

00:14:31,360 --> 00:14:33,600
they can deploy a development

00:14:32,720 --> 00:14:35,839
environment

00:14:33,600 --> 00:14:37,839
um you can query it and get its

00:14:35,839 --> 00:14:39,199
information and then should you need to

00:14:37,839 --> 00:14:40,880
to log into it you can get that

00:14:39,199 --> 00:14:42,639
information very quickly

00:14:40,880 --> 00:14:44,880
employ pretty much anything you want on

00:14:42,639 --> 00:14:46,480
it but as part of it

00:14:44,880 --> 00:14:48,320
what it will do automatically for them

00:14:46,480 --> 00:14:50,639
is deploy our platform

00:14:48,320 --> 00:14:51,680
and the particular project components

00:14:50,639 --> 00:14:54,160
that they're working on

00:14:51,680 --> 00:14:55,760
and so that's all there in one place and

00:14:54,160 --> 00:14:58,079
they can also use this tooling and this

00:14:55,760 --> 00:15:00,480
api to query test statuses and results

00:14:58,079 --> 00:15:01,839
and version information so they know

00:15:00,480 --> 00:15:03,760
what's in each version

00:15:01,839 --> 00:15:05,120
we wanted like a one-stop shop to do it

00:15:03,760 --> 00:15:06,880
we didn't want people worrying about

00:15:05,120 --> 00:15:08,320
like you know workflows or the

00:15:06,880 --> 00:15:09,839
orchestrator or anything like that we

00:15:08,320 --> 00:15:11,519
just that just wants to be a black box

00:15:09,839 --> 00:15:13,760
to them sitting in the background

00:15:11,519 --> 00:15:15,839
and and we deal with that so developers

00:15:13,760 --> 00:15:18,800
just have this sort of nice

00:15:15,839 --> 00:15:19,680
cli front end if you like it's very easy

00:15:18,800 --> 00:15:21,519
to use

00:15:19,680 --> 00:15:23,839
and i think in terms of like providing

00:15:21,519 --> 00:15:25,440
it through like a really simple cli tool

00:15:23,839 --> 00:15:26,880
it really empowers the developer to be

00:15:25,440 --> 00:15:28,000
able to like stay away from the stuff

00:15:26,880 --> 00:15:29,040
that they don't want to be doing

00:15:28,000 --> 00:15:30,560
maybe they do want to be using

00:15:29,040 --> 00:15:31,360
kubernetes that might be the case

00:15:30,560 --> 00:15:32,720
sometimes and

00:15:31,360 --> 00:15:35,120
in that case they're more than welcome

00:15:32,720 --> 00:15:36,639
to but this gives a mechanism for them

00:15:35,120 --> 00:15:37,279
to be able to do the work that they need

00:15:36,639 --> 00:15:38,880
to do

00:15:37,279 --> 00:15:40,399
rather than spending lots of time doing

00:15:38,880 --> 00:15:41,920
stuff they probably shouldn't

00:15:40,399 --> 00:15:43,680
how's the experience been so far with

00:15:41,920 --> 00:15:44,720
the rest api that's sitting on the

00:15:43,680 --> 00:15:46,480
orchestrator cluster

00:15:44,720 --> 00:15:47,920
mixed with the cli tool that was built

00:15:46,480 --> 00:15:49,920
by the improbable team

00:15:47,920 --> 00:15:51,199
i think so far it's had very good uptake

00:15:49,920 --> 00:15:52,639
from the teams we've had lots of

00:15:51,199 --> 00:15:54,399
positive feedback so far

00:15:52,639 --> 00:15:56,160
one good thing about it is we were able

00:15:54,399 --> 00:15:56,720
to sort of develop fast against it as

00:15:56,160 --> 00:15:58,880
well because

00:15:56,720 --> 00:16:00,240
you know developers are very you know

00:15:58,880 --> 00:16:01,440
we've got a lot of clever people working

00:16:00,240 --> 00:16:02,880
at improvable and

00:16:01,440 --> 00:16:04,800
you know they've got a lot of ideas

00:16:02,880 --> 00:16:07,360
about how things like this should look

00:16:04,800 --> 00:16:08,399
so yeah really good to sort of yeah get

00:16:07,360 --> 00:16:10,399
their feedback

00:16:08,399 --> 00:16:11,680
and yes so far it's been great it's it's

00:16:10,399 --> 00:16:13,279
been a huge improvement over

00:16:11,680 --> 00:16:16,639
sort of manually having to i don't know

00:16:13,279 --> 00:16:18,959
deal with like mini cube or something or

00:16:16,639 --> 00:16:20,320
even deploying the product on some vms

00:16:18,959 --> 00:16:22,560
in somewhere you know

00:16:20,320 --> 00:16:24,079
this this is just unsustainable and and

00:16:22,560 --> 00:16:24,800
no good so yeah we had to give them a

00:16:24,079 --> 00:16:26,399
form of

00:16:24,800 --> 00:16:28,160
just quickly spinning up ephemeral

00:16:26,399 --> 00:16:31,279
environments and so far

00:16:28,160 --> 00:16:33,360
it's working really well for us so

00:16:31,279 --> 00:16:35,199
at this point we haven't really spoken

00:16:33,360 --> 00:16:38,800
about one key ingredient

00:16:35,199 --> 00:16:42,399
how are we automating all of these jobs

00:16:38,800 --> 00:16:44,880
and our tooling that we used was argo

00:16:42,399 --> 00:16:46,480
we used a combination of argo workflows

00:16:44,880 --> 00:16:47,920
and argo events to do

00:16:46,480 --> 00:16:50,079
all of the automation that goes on

00:16:47,920 --> 00:16:51,199
inside of this orchestrator cluster on

00:16:50,079 --> 00:16:52,959
gke

00:16:51,199 --> 00:16:54,240
the reason why we chose argo is because

00:16:52,959 --> 00:16:57,120
it fits right in

00:16:54,240 --> 00:16:58,240
with our design to make this whole

00:16:57,120 --> 00:17:01,199
orchestrator

00:16:58,240 --> 00:17:01,839
platform kubernetes native how is that

00:17:01,199 --> 00:17:04,959
the case

00:17:01,839 --> 00:17:06,799
well its use of kubernetes pods makes it

00:17:04,959 --> 00:17:09,600
truly language agnostic

00:17:06,799 --> 00:17:10,400
again in yaml applied as crds you're

00:17:09,600 --> 00:17:12,640
able to define

00:17:10,400 --> 00:17:13,919
workflow templates inside of those

00:17:12,640 --> 00:17:16,720
workflow templates

00:17:13,919 --> 00:17:18,240
are manifests which explain the steps

00:17:16,720 --> 00:17:20,799
that you want to take place

00:17:18,240 --> 00:17:21,679
all of those steps are applied and

00:17:20,799 --> 00:17:24,160
executed

00:17:21,679 --> 00:17:26,319
in dedicated kubernetes pods we don't

00:17:24,160 --> 00:17:28,400
have to stick to any specific language

00:17:26,319 --> 00:17:29,600
we don't have to pick a docker image

00:17:28,400 --> 00:17:30,240
that will be used throughout the

00:17:29,600 --> 00:17:32,000
workflow

00:17:30,240 --> 00:17:34,000
we can we can slide from one to the

00:17:32,000 --> 00:17:36,960
other and it also has integrations

00:17:34,000 --> 00:17:38,320
such as artifacts and parameters if i

00:17:36,960 --> 00:17:40,320
say do a git clone

00:17:38,320 --> 00:17:41,600
on an alpine image in one step i can

00:17:40,320 --> 00:17:43,280
take that into the next step

00:17:41,600 --> 00:17:45,679
and start performing terraform actions

00:17:43,280 --> 00:17:48,160
in it by passing that repo

00:17:45,679 --> 00:17:48,960
in an artifact which is backed up on a

00:17:48,160 --> 00:17:52,160
data store

00:17:48,960 --> 00:17:55,039
like gcs the final area where i think

00:17:52,160 --> 00:17:56,480
that argo was a truly great choice was

00:17:55,039 --> 00:17:58,799
its integration

00:17:56,480 --> 00:18:00,080
with argo events so through the

00:17:58,799 --> 00:18:02,720
development cycle

00:18:00,080 --> 00:18:04,080
of this platform there are many

00:18:02,720 --> 00:18:05,760
different components that are being

00:18:04,080 --> 00:18:07,280
developed by many different teams

00:18:05,760 --> 00:18:09,120
well luckily what we what they all have

00:18:07,280 --> 00:18:11,840
in common is they're all being developed

00:18:09,120 --> 00:18:12,720
using some git provider in our case it's

00:18:11,840 --> 00:18:14,960
mostly github

00:18:12,720 --> 00:18:16,640
and argo events allows us to have

00:18:14,960 --> 00:18:19,360
dedicated eventing that is

00:18:16,640 --> 00:18:19,679
instantly pluggable into argo workflows

00:18:19,360 --> 00:18:23,120
to

00:18:19,679 --> 00:18:26,480
automate the tasks that are triggered

00:18:23,120 --> 00:18:28,880
by a github web hook it also has other

00:18:26,480 --> 00:18:29,600
really strong integrations most

00:18:28,880 --> 00:18:31,840
importantly

00:18:29,600 --> 00:18:33,120
the ability to trigger off of kubernetes

00:18:31,840 --> 00:18:35,200
resource changes

00:18:33,120 --> 00:18:36,799
all of our versions are declared in

00:18:35,200 --> 00:18:39,120
kubernetes crds

00:18:36,799 --> 00:18:41,280
but also same goes with our environments

00:18:39,120 --> 00:18:43,200
that are vended into gke

00:18:41,280 --> 00:18:44,640
so it means that when we vend an

00:18:43,200 --> 00:18:46,240
environment with terraform

00:18:44,640 --> 00:18:47,679
we can update the status on that

00:18:46,240 --> 00:18:50,160
environment crd

00:18:47,679 --> 00:18:51,600
to ensure that the developer accessing

00:18:50,160 --> 00:18:53,679
that crd on the other end

00:18:51,600 --> 00:18:55,440
abstracted away can see its status it's

00:18:53,679 --> 00:18:57,600
being built up

00:18:55,440 --> 00:18:59,840
yeah we sort of spoke about this earlier

00:18:57,600 --> 00:19:00,559
like i i tend to think argo events in

00:18:59,840 --> 00:19:02,480
argo

00:19:00,559 --> 00:19:03,919
workflows is one in the same thing like

00:19:02,480 --> 00:19:04,720
the orchestra is kind of turned into

00:19:03,919 --> 00:19:07,039
this

00:19:04,720 --> 00:19:09,120
one-stop shop for everything and because

00:19:07,039 --> 00:19:11,440
they work so seamlessly together

00:19:09,120 --> 00:19:13,039
it's not like you're complicating things

00:19:11,440 --> 00:19:14,799
by adding multiple

00:19:13,039 --> 00:19:16,080
tools you know these these two things

00:19:14,799 --> 00:19:17,600
work so well together

00:19:16,080 --> 00:19:19,280
i think that's a very important point

00:19:17,600 --> 00:19:19,919
and i think i think i experienced that

00:19:19,280 --> 00:19:21,679
as well

00:19:19,919 --> 00:19:23,440
and it really shows the strength of of

00:19:21,679 --> 00:19:26,000
what kubernetes can do

00:19:23,440 --> 00:19:26,960
alongside tours like argo events so

00:19:26,000 --> 00:19:29,840
continuing on

00:19:26,960 --> 00:19:30,160
with this theme of cyclical automation

00:19:29,840 --> 00:19:33,200
and

00:19:30,160 --> 00:19:34,400
autonomy a component change is made in

00:19:33,200 --> 00:19:37,520
github

00:19:34,400 --> 00:19:38,400
by an improbable engineer this triggers

00:19:37,520 --> 00:19:40,960
a web hook

00:19:38,400 --> 00:19:41,760
that is sent from github to the event

00:19:40,960 --> 00:19:43,840
source pod

00:19:41,760 --> 00:19:45,919
sitting on the orchestrator cluster once

00:19:43,840 --> 00:19:48,559
the event source is notified

00:19:45,919 --> 00:19:49,600
it uses the event bus to send a signal

00:19:48,559 --> 00:19:52,720
to the sensor

00:19:49,600 --> 00:19:53,520
that has been configured to execute a

00:19:52,720 --> 00:19:55,840
workflow

00:19:53,520 --> 00:19:57,200
based off of that event from there it

00:19:55,840 --> 00:20:00,559
checks the state of each

00:19:57,200 --> 00:20:02,960
component's github repo and if it does

00:20:00,559 --> 00:20:04,559
find a change it will know because when

00:20:02,960 --> 00:20:06,799
we generate a version we give it a

00:20:04,559 --> 00:20:09,520
unique cache based off of the components

00:20:06,799 --> 00:20:10,559
that are configured for the platform it

00:20:09,520 --> 00:20:12,799
then checks out

00:20:10,559 --> 00:20:13,760
the specific commit of each of those

00:20:12,799 --> 00:20:16,240
branches

00:20:13,760 --> 00:20:17,280
on the github repo and then generates a

00:20:16,240 --> 00:20:18,720
unique hash

00:20:17,280 --> 00:20:20,720
that which is then applied to the

00:20:18,720 --> 00:20:22,159
cluster the hash is unique

00:20:20,720 --> 00:20:24,480
and hasn't been applied to the cluster

00:20:22,159 --> 00:20:26,960
at this point and is successfully

00:20:24,480 --> 00:20:28,480
applied to the cluster this can then be

00:20:26,960 --> 00:20:30,080
consumed by the improbable developer

00:20:28,480 --> 00:20:31,360
that made that change in github

00:20:30,080 --> 00:20:33,200
and they can start spinning up

00:20:31,360 --> 00:20:36,000
environments and checking out

00:20:33,200 --> 00:20:38,159
the change and how that was received

00:20:36,000 --> 00:20:40,240
inside of the wider platform

00:20:38,159 --> 00:20:41,280
yeah so that's a developer's story you

00:20:40,240 --> 00:20:43,120
just talked through there

00:20:41,280 --> 00:20:45,600
and yeah it's working for us which is

00:20:43,120 --> 00:20:47,600
which is really really nice

00:20:45,600 --> 00:20:48,720
i guess another very like fascinating

00:20:47,600 --> 00:20:51,600
part of this

00:20:48,720 --> 00:20:52,960
is once the new version is generated

00:20:51,600 --> 00:20:53,520
that triggers a whole load of other

00:20:52,960 --> 00:20:56,080
stuff

00:20:53,520 --> 00:20:57,760
including automated testing so what goes

00:20:56,080 --> 00:21:00,480
on there in terms of automated testing

00:20:57,760 --> 00:21:02,880
once the version is created

00:21:00,480 --> 00:21:04,240
yes so we want to do integrated tests

00:21:02,880 --> 00:21:06,320
for each versions and

00:21:04,240 --> 00:21:08,080
we've introduced the idea of of the

00:21:06,320 --> 00:21:09,039
streams so you know you create a new

00:21:08,080 --> 00:21:11,600
version

00:21:09,039 --> 00:21:12,799
that gets that this is where essentially

00:21:11,600 --> 00:21:14,559
the qa journey for that

00:21:12,799 --> 00:21:16,320
version of the product starts so it'll

00:21:14,559 --> 00:21:18,000
get promoted to the alpha stream

00:21:16,320 --> 00:21:20,000
at that point some tests will run and

00:21:18,000 --> 00:21:21,840
they can be configured per version

00:21:20,000 --> 00:21:23,600
you can add to the version as many sort

00:21:21,840 --> 00:21:25,679
of test repos as you want

00:21:23,600 --> 00:21:27,360
each container in their own test suite

00:21:25,679 --> 00:21:28,880
and then those tests pass

00:21:27,360 --> 00:21:30,400
a slightly longer set of tests which can

00:21:28,880 --> 00:21:32,320
run called which

00:21:30,400 --> 00:21:34,640
tend to be like a nightly testing sort

00:21:32,320 --> 00:21:36,880
of situation so they run each night

00:21:34,640 --> 00:21:37,919
on that particular version if they pass

00:21:36,880 --> 00:21:39,840
then you know

00:21:37,919 --> 00:21:41,520
we can promote further and eventually we

00:21:39,840 --> 00:21:43,120
can get to a release which at the moment

00:21:41,520 --> 00:21:44,720
for us is like a manual process we have

00:21:43,120 --> 00:21:46,320
like a sort of product donor sign off

00:21:44,720 --> 00:21:46,799
and again that can be done through the

00:21:46,320 --> 00:21:48,720
api

00:21:46,799 --> 00:21:50,000
so yeah all of that automated except for

00:21:48,720 --> 00:21:52,320
that last

00:21:50,000 --> 00:21:53,760
release step where we do a product owner

00:21:52,320 --> 00:21:54,480
sign off i think that i think that's

00:21:53,760 --> 00:21:56,480
truly awesome

00:21:54,480 --> 00:21:58,000
because from a developer's perspective

00:21:56,480 --> 00:22:00,960
the fact that they can apply the

00:21:58,000 --> 00:22:01,440
change in git that they made but what

00:22:00,960 --> 00:22:03,679
this

00:22:01,440 --> 00:22:05,280
orchestrator cluster goes and does is it

00:22:03,679 --> 00:22:06,000
takes the change from that specific

00:22:05,280 --> 00:22:07,200
developer

00:22:06,000 --> 00:22:09,120
it doesn't matter if they've gone off

00:22:07,200 --> 00:22:11,360
for a coffee it really

00:22:09,120 --> 00:22:12,960
opens up the doors of what the

00:22:11,360 --> 00:22:14,559
development cycle of a platform like

00:22:12,960 --> 00:22:17,679
this can look like yeah so

00:22:14,559 --> 00:22:19,440
i mean one idea and you know we've

00:22:17,679 --> 00:22:21,120
got developers spinning up clusters left

00:22:19,440 --> 00:22:21,600
right and center to do development work

00:22:21,120 --> 00:22:23,520
on

00:22:21,600 --> 00:22:25,360
we we need to manage cost and and things

00:22:23,520 --> 00:22:27,280
like that the the idea of

00:22:25,360 --> 00:22:28,559
of debate being able to deploy a version

00:22:27,280 --> 00:22:28,880
is that it's going to be the same every

00:22:28,559 --> 00:22:30,720
time

00:22:28,880 --> 00:22:32,000
so these environments don't need to be

00:22:30,720 --> 00:22:33,360
up all the time they can just spin up a

00:22:32,000 --> 00:22:35,120
new one every morning so

00:22:33,360 --> 00:22:36,799
what what we've done isn't you know we

00:22:35,120 --> 00:22:38,400
put like a time to live

00:22:36,799 --> 00:22:40,640
on each environment and that's based on

00:22:38,400 --> 00:22:42,559
an extra field in the crds

00:22:40,640 --> 00:22:44,320
and we've got just another argo workflow

00:22:42,559 --> 00:22:45,520
that's just looking at each of these

00:22:44,320 --> 00:22:46,559
each of these timings for each

00:22:45,520 --> 00:22:48,400
environment and

00:22:46,559 --> 00:22:49,520
figures out how long they've been up and

00:22:48,400 --> 00:22:51,280
if they've been up for a certain amount

00:22:49,520 --> 00:22:53,120
of time it would just destroy them so

00:22:51,280 --> 00:22:55,520
it'll run the terraform and cleanly

00:22:53,120 --> 00:22:56,880
which is very important cleanly uh do it

00:22:55,520 --> 00:22:58,480
do a terraform destroy

00:22:56,880 --> 00:23:00,320
bring everything down and remove all the

00:22:58,480 --> 00:23:02,159
resources in the cloud so

00:23:00,320 --> 00:23:04,000
you know that's an example of of sort of

00:23:02,159 --> 00:23:04,720
the events and triggering that that we

00:23:04,000 --> 00:23:06,400
have in place

00:23:04,720 --> 00:23:08,880
with argo i think that's a really

00:23:06,400 --> 00:23:10,480
exciting part of our implementation

00:23:08,880 --> 00:23:12,240
and i think it even backs on further

00:23:10,480 --> 00:23:13,440
into into our choice for kubernetes as

00:23:12,240 --> 00:23:15,200
our data store

00:23:13,440 --> 00:23:17,039
because that time to live is is uh

00:23:15,200 --> 00:23:18,880
described in a kubernetes annotation

00:23:17,039 --> 00:23:21,120
it's you know a very subtle piece of

00:23:18,880 --> 00:23:23,760
metadata that's attached to the crd

00:23:21,120 --> 00:23:24,960
but what it allows us to do is like it

00:23:23,760 --> 00:23:27,919
is without doubt

00:23:24,960 --> 00:23:29,200
with or authority decide a date and time

00:23:27,919 --> 00:23:31,280
in which this environment

00:23:29,200 --> 00:23:32,720
should be yeah should be decommissioned

00:23:31,280 --> 00:23:34,799
if there's one thing that's

00:23:32,720 --> 00:23:36,720
that that project managers like more

00:23:34,799 --> 00:23:38,320
than a successful project it's being

00:23:36,720 --> 00:23:38,880
able to keep it as a lower cost as

00:23:38,320 --> 00:23:40,720
possible

00:23:38,880 --> 00:23:42,799
i know it's been very well received that

00:23:40,720 --> 00:23:45,120
we're able to keep these costs low

00:23:42,799 --> 00:23:45,840
one other thing as well is persistent

00:23:45,120 --> 00:23:48,080
disks

00:23:45,840 --> 00:23:50,320
of course we spin up our environments

00:23:48,080 --> 00:23:52,240
our gk environments with terraform

00:23:50,320 --> 00:23:53,600
we spin them up and we spin them down

00:23:52,240 --> 00:23:55,679
but gke

00:23:53,600 --> 00:23:57,360
keeps hold of the persistent disks

00:23:55,679 --> 00:23:59,039
inside of the google cloud projects

00:23:57,360 --> 00:24:00,400
but we were able to avoid that by just

00:23:59,039 --> 00:24:02,400
adding a simple step

00:24:00,400 --> 00:24:04,320
in the auger workflow that's not

00:24:02,400 --> 00:24:06,159
necessarily something that we can easily

00:24:04,320 --> 00:24:08,400
integrate inside of that terraform

00:24:06,159 --> 00:24:09,679
destroy step why not just add an extra

00:24:08,400 --> 00:24:11,440
workflow step

00:24:09,679 --> 00:24:13,360
so they were the areas where we thought

00:24:11,440 --> 00:24:16,400
the argo workflows and events

00:24:13,360 --> 00:24:19,200
were a great pairing for our work

00:24:16,400 --> 00:24:22,240
on the delivery service for the

00:24:19,200 --> 00:24:24,080
improbable defense platform

00:24:22,240 --> 00:24:25,840
through this presentation we have taken

00:24:24,080 --> 00:24:28,159
you through the story of how we take

00:24:25,840 --> 00:24:29,760
we took a selection of problems that

00:24:28,159 --> 00:24:30,720
improbable defense were experiencing

00:24:29,760 --> 00:24:31,760
through the development of their

00:24:30,720 --> 00:24:34,720
platform

00:24:31,760 --> 00:24:35,919
and to combat this how we built a secure

00:24:34,720 --> 00:24:38,159
kubernetes native

00:24:35,919 --> 00:24:39,760
delivery service which automates the

00:24:38,159 --> 00:24:41,919
test and release cycle

00:24:39,760 --> 00:24:44,240
giving improbable the flexibility to

00:24:41,919 --> 00:24:47,200
expand further to separate iterations

00:24:44,240 --> 00:24:48,320
while enabling easy collaboration with

00:24:47,200 --> 00:24:50,799
external

00:24:48,320 --> 00:24:51,919
entities i'd like to thank you all very

00:24:50,799 --> 00:24:53,440
much for coming

00:24:51,919 --> 00:24:55,279
uh i hope you're having a really good

00:24:53,440 --> 00:24:56,720
cubecon and

00:24:55,279 --> 00:24:58,240
if you have any questions whatsoever

00:24:56,720 --> 00:25:00,080
we'll be in the q a afterwards so feel

00:24:58,240 --> 00:25:01,600
free to ask any questions there

00:25:00,080 --> 00:25:03,520
but also if you have any questions about

00:25:01,600 --> 00:25:04,960
jet stack if you're interested in the

00:25:03,520 --> 00:25:06,080
sort of work that we've discussed in

00:25:04,960 --> 00:25:08,480
this presentation

00:25:06,080 --> 00:25:09,120
feel free to get in contact with me uh

00:25:08,480 --> 00:25:10,960
in fact

00:25:09,120 --> 00:25:13,039
feel free to get in contact with me

00:25:10,960 --> 00:25:15,760
about anything i'm happy to discuss

00:25:13,039 --> 00:25:16,640
anything uh kubernetes or not kubernetes

00:25:15,760 --> 00:25:18,559
related

00:25:16,640 --> 00:25:20,799
so thank you very much for coming to the

00:25:18,559 --> 00:25:23,440
talk thank you kubecon

00:25:20,799 --> 00:25:24,720
uh and thank you cncf uh for for

00:25:23,440 --> 00:25:27,840
inviting me on to speak

00:25:24,720 --> 00:25:29,200
also thank you for the entire improbable

00:25:27,840 --> 00:25:30,159
defense team that we've worked with

00:25:29,200 --> 00:25:31,840
throughout this project

00:25:30,159 --> 00:25:33,200
you've all been fantastic to work with

00:25:31,840 --> 00:25:36,480
and it's been a joy

00:25:33,200 --> 00:25:38,240
delivering this uh service for you guys

00:25:36,480 --> 00:25:40,320
and well done to the jet stack team on

00:25:38,240 --> 00:25:43,200
my side who have helped me along the way

00:25:40,320 --> 00:25:44,880
with all the uh all the challenges that

00:25:43,200 --> 00:25:47,120
i faced throughout

00:25:44,880 --> 00:25:49,440
so olly yeah thank you very much tom i

00:25:47,120 --> 00:25:50,720
mean yeah um been fantastic to work with

00:25:49,440 --> 00:25:53,360
on this project and uh

00:25:50,720 --> 00:25:54,880
yeah to everyone out there if you are

00:25:53,360 --> 00:25:56,880
again just mirroring what tom says but

00:25:54,880 --> 00:25:58,240
for ourselves if you are interested in

00:25:56,880 --> 00:26:00,080
you know what we're doing with synthetic

00:25:58,240 --> 00:26:01,600
environments uh you know the the

00:26:00,080 --> 00:26:04,640
problems we're trying to solve

00:26:01,600 --> 00:26:06,080
um you know simulating it's uh you know

00:26:04,640 --> 00:26:08,720
thousands or millions of entities at

00:26:06,080 --> 00:26:12,240
scale uh you know kubernetes based

00:26:08,720 --> 00:26:13,760
uh platform and and delivery uh yeah get

00:26:12,240 --> 00:26:16,400
in touch with us as well um

00:26:13,760 --> 00:26:18,240
you know we're we're trying to you know

00:26:16,400 --> 00:26:18,960
solve a lot of uh interesting things and

00:26:18,240 --> 00:26:22,840
we're hiring

00:26:18,960 --> 00:26:25,840
so yeah thank you very much for

00:26:22,840 --> 00:26:25,840
listening

00:26:29,840 --> 00:26:31,919

YouTube URL: https://www.youtube.com/watch?v=JvbwpiFnBuA


