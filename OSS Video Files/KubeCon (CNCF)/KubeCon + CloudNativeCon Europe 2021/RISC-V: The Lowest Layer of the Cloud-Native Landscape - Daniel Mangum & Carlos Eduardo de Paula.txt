Title: RISC-V: The Lowest Layer of the Cloud-Native Landscape - Daniel Mangum & Carlos Eduardo de Paula
Publication date: 2021-05-13
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

RISC-V: The Lowest Layer of the Cloud-Native Landscape - Daniel Mangum, Senior Software Engineer, Upbound & Carlos Eduardo de Paula, Cloud Architect, Red Hat
Captions: 
	00:00:04,920 --> 00:00:08,050
[Music]

00:00:08,160 --> 00:00:13,040
hello folks and welcome to kubecon

00:00:10,080 --> 00:00:14,960
eu 2021 my name is daniel mangum and i'm

00:00:13,040 --> 00:00:16,880
a senior software engineer at upbound

00:00:14,960 --> 00:00:19,199
and i'm joined today by carlos eduardo

00:00:16,880 --> 00:00:20,800
who is a cloud architect at red hat

00:00:19,199 --> 00:00:22,320
we hope you all have had an awesome week

00:00:20,800 --> 00:00:24,240
so far and we're looking forward to

00:00:22,320 --> 00:00:25,519
diving into a topic you likely haven't

00:00:24,240 --> 00:00:27,359
heard a ton about this week

00:00:25,519 --> 00:00:29,279
and may not be familiar with at all

00:00:27,359 --> 00:00:30,720
however both carlos and myself believe

00:00:29,279 --> 00:00:32,320
that this is not only an important

00:00:30,720 --> 00:00:33,440
subject to be knowledgeable of

00:00:32,320 --> 00:00:35,200
but also that is going to be

00:00:33,440 --> 00:00:37,040
particularly important to the cloud

00:00:35,200 --> 00:00:38,800
native ecosystem

00:00:37,040 --> 00:00:40,480
but before we get into it let's take a

00:00:38,800 --> 00:00:42,000
step back and look at the state of cloud

00:00:40,480 --> 00:00:43,840
native today

00:00:42,000 --> 00:00:45,440
this picture has become a bit of a meme

00:00:43,840 --> 00:00:47,920
over the last few years as the number of

00:00:45,440 --> 00:00:49,680
projects in the cncf have exploded

00:00:47,920 --> 00:00:51,760
folks often reference the image as a

00:00:49,680 --> 00:00:54,000
representation of how complicated and

00:00:51,760 --> 00:00:55,600
wide-reaching the space has become

00:00:54,000 --> 00:00:57,760
while those criticisms are certainly

00:00:55,600 --> 00:00:59,600
valid i believe it is also important to

00:00:57,760 --> 00:01:00,719
recognize the tremendous innovation we

00:00:59,600 --> 00:01:02,239
are experiencing

00:01:00,719 --> 00:01:04,559
from infrastructure management to

00:01:02,239 --> 00:01:06,560
service meshes and everywhere in between

00:01:04,559 --> 00:01:07,840
individuals and organizations have more

00:01:06,560 --> 00:01:09,840
optionality than ever

00:01:07,840 --> 00:01:11,439
in designing a cloud-native platform

00:01:09,840 --> 00:01:12,000
that is highly tailored to their

00:01:11,439 --> 00:01:15,040
specific

00:01:12,000 --> 00:01:17,119
use case furthermore with the rise of a

00:01:15,040 --> 00:01:19,040
default to open source mindset

00:01:17,119 --> 00:01:21,360
we have the opportunity to try before we

00:01:19,040 --> 00:01:22,000
buy greatly reducing the pains of vendor

00:01:21,360 --> 00:01:23,680
lock-in

00:01:22,000 --> 00:01:26,000
which has been a trademark attribute of

00:01:23,680 --> 00:01:26,960
the technology industry for decades in

00:01:26,000 --> 00:01:29,920
many ways

00:01:26,960 --> 00:01:31,680
we're in a software renaissance but

00:01:29,920 --> 00:01:33,439
isn't there something missing here

00:01:31,680 --> 00:01:34,799
while we have a robust open source

00:01:33,439 --> 00:01:36,799
software ecosystem

00:01:34,799 --> 00:01:39,200
the platforms we design run almost

00:01:36,799 --> 00:01:40,079
exclusively on proprietary hardware and

00:01:39,200 --> 00:01:41,920
firmware

00:01:40,079 --> 00:01:43,920
and until now this hasn't really been a

00:01:41,920 --> 00:01:45,280
problem the promise of the cloud is that

00:01:43,920 --> 00:01:46,479
we don't have to worry about the

00:01:45,280 --> 00:01:49,119
underlying machinery

00:01:46,479 --> 00:01:49,920
we simply interact with an api and don't

00:01:49,119 --> 00:01:52,000
get me wrong

00:01:49,920 --> 00:01:53,759
this is a powerful model and we will not

00:01:52,000 --> 00:01:54,880
be suggesting today that every company

00:01:53,759 --> 00:01:56,799
drop what they're doing

00:01:54,880 --> 00:01:58,640
and start building out their own foundry

00:01:56,799 --> 00:02:00,560
and developing custom silicon

00:01:58,640 --> 00:02:02,560
until now this proprietary hardware

00:02:00,560 --> 00:02:04,240
model has actually worked quite well

00:02:02,560 --> 00:02:06,640
so what makes today different than the

00:02:04,240 --> 00:02:10,080
last 50 years of computing

00:02:06,640 --> 00:02:12,800
or in other words why should i care

00:02:10,080 --> 00:02:14,239
in 1965 gordon moore made a prediction

00:02:12,800 --> 00:02:16,640
about the growth of the number of

00:02:14,239 --> 00:02:18,480
transistors in an integrated circuit

00:02:16,640 --> 00:02:19,680
his assertion was that the number would

00:02:18,480 --> 00:02:21,920
double every year

00:02:19,680 --> 00:02:22,959
which he revised 10 years later to every

00:02:21,920 --> 00:02:24,800
two years

00:02:22,959 --> 00:02:26,480
the implication of this prediction which

00:02:24,800 --> 00:02:28,480
did in fact come to fruition

00:02:26,480 --> 00:02:30,400
was that computer programmers and system

00:02:28,480 --> 00:02:32,160
architects could rapidly improve

00:02:30,400 --> 00:02:33,840
performance of their applications

00:02:32,160 --> 00:02:36,319
simply by upgrading to the newest

00:02:33,840 --> 00:02:38,160
hardware every few years and with the

00:02:36,319 --> 00:02:39,440
advent of cloud computing in the mid to

00:02:38,160 --> 00:02:41,200
late 2000s

00:02:39,440 --> 00:02:42,720
upgrading that hardware was as simple as

00:02:41,200 --> 00:02:44,160
hitting an api endpoint

00:02:42,720 --> 00:02:46,000
or clicking a button in the cloud

00:02:44,160 --> 00:02:47,920
provider console

00:02:46,000 --> 00:02:50,160
around the time of moore's revised

00:02:47,920 --> 00:02:52,400
prediction robert dinard made a related

00:02:50,160 --> 00:02:55,040
prognostication about transistors

00:02:52,400 --> 00:02:56,640
asserting in his 1974 paper that as the

00:02:55,040 --> 00:02:59,440
size of transistors shrinks

00:02:56,640 --> 00:03:01,440
the power density remains constant when

00:02:59,440 --> 00:03:02,879
you combine these two properties

00:03:01,440 --> 00:03:04,720
that is being able to fit more

00:03:02,879 --> 00:03:06,400
transistors in the chip and each of

00:03:04,720 --> 00:03:07,280
those smaller transistors maintaining

00:03:06,400 --> 00:03:08,800
their power

00:03:07,280 --> 00:03:10,879
the natural conclusion is that the

00:03:08,800 --> 00:03:13,280
overall power per watt of the ic

00:03:10,879 --> 00:03:15,040
increases this fundamental truth has

00:03:13,280 --> 00:03:15,599
driven the computing industry for many

00:03:15,040 --> 00:03:17,680
years

00:03:15,599 --> 00:03:18,720
but both denard scaling and moore's law

00:03:17,680 --> 00:03:20,400
are plateauing

00:03:18,720 --> 00:03:21,760
due to the limitations of the physical

00:03:20,400 --> 00:03:23,599
world

00:03:21,760 --> 00:03:25,280
for this reason we are seeing a movement

00:03:23,599 --> 00:03:26,879
to custom hardware for specific

00:03:25,280 --> 00:03:28,560
computational activities

00:03:26,879 --> 00:03:29,920
frequently referred to as domain

00:03:28,560 --> 00:03:31,599
specific accelerators

00:03:29,920 --> 00:03:33,200
you are likely already familiar with

00:03:31,599 --> 00:03:35,200
some of these hardware categories

00:03:33,200 --> 00:03:37,280
for example the graphical processing

00:03:35,200 --> 00:03:39,680
unit or tensor processing unit

00:03:37,280 --> 00:03:41,519
however both the gpu and tpu are

00:03:39,680 --> 00:03:43,440
relatively general purpose compared to

00:03:41,519 --> 00:03:44,799
some of the more focused domain specific

00:03:43,440 --> 00:03:46,159
accelerators

00:03:44,799 --> 00:03:47,599
technology leaders are developing

00:03:46,159 --> 00:03:49,760
hyper-specialized hardware for

00:03:47,599 --> 00:03:52,319
optimizing tasks such as web search

00:03:49,760 --> 00:03:53,760
image processing and bioinformatics in

00:03:52,319 --> 00:03:55,519
order to maintain the performance

00:03:53,760 --> 00:03:57,519
improvements we have become accustomed

00:03:55,519 --> 00:03:59,519
to as an industry

00:03:57,519 --> 00:04:01,519
this shift comes at a cost though

00:03:59,519 --> 00:04:02,879
software typically has to be modified to

00:04:01,519 --> 00:04:03,599
take advantage of the specialized

00:04:02,879 --> 00:04:05,200
hardware

00:04:03,599 --> 00:04:07,280
meaning the days of simply deploying

00:04:05,200 --> 00:04:07,920
your workloads to a new similarly priced

00:04:07,280 --> 00:04:10,080
machine

00:04:07,920 --> 00:04:11,360
and seeing drastic improvements could be

00:04:10,080 --> 00:04:13,200
coming to an end

00:04:11,360 --> 00:04:16,560
in short hardware is going to become

00:04:13,200 --> 00:04:18,239
more and more heterogeneous

00:04:16,560 --> 00:04:20,079
so now that we have sufficiently buried

00:04:18,239 --> 00:04:21,199
the lead here let's actually talk about

00:04:20,079 --> 00:04:23,280
risk five

00:04:21,199 --> 00:04:24,560
risk five is an open source instruction

00:04:23,280 --> 00:04:26,800
set architecture

00:04:24,560 --> 00:04:28,560
while this may seem unsurprising or even

00:04:26,800 --> 00:04:29,759
expected by folks accustomed to the

00:04:28,560 --> 00:04:32,639
software industry

00:04:29,759 --> 00:04:34,000
and open source isa is a start deviation

00:04:32,639 --> 00:04:35,440
from the traditional model of the

00:04:34,000 --> 00:04:38,240
hardware industry

00:04:35,440 --> 00:04:38,720
you may be thinking aren't x86 and arm

00:04:38,240 --> 00:04:40,479
open

00:04:38,720 --> 00:04:42,080
we have compilers that target them and

00:04:40,479 --> 00:04:42,800
i'm free to write my own assembly for

00:04:42,080 --> 00:04:44,400
them

00:04:42,800 --> 00:04:46,479
that is true but they're not freely

00:04:44,400 --> 00:04:47,360
available meaning you're not able to

00:04:46,479 --> 00:04:50,000
implement your own

00:04:47,360 --> 00:04:51,120
processor that uses the isa now you're

00:04:50,000 --> 00:04:52,400
probably thinking

00:04:51,120 --> 00:04:54,880
i don't want to implement my own

00:04:52,400 --> 00:04:56,880
processor so what's all this for

00:04:54,880 --> 00:04:58,479
you'll notice that we and most folks you

00:04:56,880 --> 00:04:59,440
talk to who are bullish on the future

00:04:58,479 --> 00:05:00,960
risk 5

00:04:59,440 --> 00:05:02,960
are not under the impression that all

00:05:00,960 --> 00:05:04,720
hardware needs to be open source

00:05:02,960 --> 00:05:07,360
in fact many of them are building

00:05:04,720 --> 00:05:09,600
proprietary companies based around it

00:05:07,360 --> 00:05:10,800
the value of risk 5 is that it is an

00:05:09,600 --> 00:05:12,560
open interface

00:05:10,800 --> 00:05:14,960
of which there are many closed source

00:05:12,560 --> 00:05:16,880
and open source implementations

00:05:14,960 --> 00:05:19,840
a useful comparison in the cloud native

00:05:16,880 --> 00:05:21,440
ecosystem is kubernetes itself

00:05:19,840 --> 00:05:23,120
many of the companies sponsoring this

00:05:21,440 --> 00:05:24,000
very event provide kubernetes

00:05:23,120 --> 00:05:25,919
distributions

00:05:24,000 --> 00:05:27,759
that have a unique value proposition to

00:05:25,919 --> 00:05:29,680
customers at this point

00:05:27,759 --> 00:05:32,000
few end users are actually installing

00:05:29,680 --> 00:05:33,600
and managing the open source kubernetes

00:05:32,000 --> 00:05:35,919
implementation

00:05:33,600 --> 00:05:37,759
however the fact that anyone can

00:05:35,919 --> 00:05:39,680
implement the kubernetes api

00:05:37,759 --> 00:05:42,639
open or closed is what allows us to have

00:05:39,680 --> 00:05:44,960
a landscape like we looked at earlier

00:05:42,639 --> 00:05:45,759
as with kubernetes there will be and

00:05:44,960 --> 00:05:48,160
already is

00:05:45,759 --> 00:05:49,440
countless risk 5 implementations all

00:05:48,160 --> 00:05:51,680
adhering to a common

00:05:49,440 --> 00:05:53,600
modular specification that allows

00:05:51,680 --> 00:05:54,160
implementers to cater to specific use

00:05:53,600 --> 00:05:56,560
cases

00:05:54,160 --> 00:05:57,440
that can be targeted by any tooling for

00:05:56,560 --> 00:06:00,000
kubernetes

00:05:57,440 --> 00:06:01,600
this tooling is operators for risk 5

00:06:00,000 --> 00:06:03,120
it's compilers

00:06:01,600 --> 00:06:05,120
on an earlier slide i mentioned that

00:06:03,120 --> 00:06:06,639
there are trade-offs between open source

00:06:05,120 --> 00:06:09,120
and proprietary

00:06:06,639 --> 00:06:10,960
as an industry and as a community we

00:06:09,120 --> 00:06:12,560
must critically evaluate whether open

00:06:10,960 --> 00:06:15,199
sourcing a project creates

00:06:12,560 --> 00:06:17,440
or diminishes value for many years

00:06:15,199 --> 00:06:19,120
proprietary isas have actually created

00:06:17,440 --> 00:06:20,720
quite a lot of value

00:06:19,120 --> 00:06:23,039
they've allowed for a consistent set of

00:06:20,720 --> 00:06:24,800
targets for software to run on

00:06:23,039 --> 00:06:26,479
in some ways the barriers to entry of

00:06:24,800 --> 00:06:28,639
the microprocessor industry

00:06:26,479 --> 00:06:30,479
have been a feature rather than a bug if

00:06:28,639 --> 00:06:32,160
the dynamics of compute performance were

00:06:30,479 --> 00:06:35,360
not fundamentally changing

00:06:32,160 --> 00:06:38,240
we might not need an open source isa

00:06:35,360 --> 00:06:40,160
but the fact of the matter is they are

00:06:38,240 --> 00:06:41,919
and this change necessitates a change in

00:06:40,160 --> 00:06:44,080
how the industry operates

00:06:41,919 --> 00:06:46,000
hardware must become more fragmented to

00:06:44,080 --> 00:06:47,199
continue to satisfy our complex

00:06:46,000 --> 00:06:48,800
computing demands

00:06:47,199 --> 00:06:50,880
but we don't want to sacrifice the

00:06:48,800 --> 00:06:52,080
ability for software to target a common

00:06:50,880 --> 00:06:54,160
interface

00:06:52,080 --> 00:06:55,199
so once again while proprietary does not

00:06:54,160 --> 00:06:57,599
equal bad

00:06:55,199 --> 00:06:59,520
sticking to proprietary isas would be

00:06:57,599 --> 00:07:02,080
diminishing value and innovation

00:06:59,520 --> 00:07:02,800
over the next 50 years of computing

00:07:02,080 --> 00:07:03,919
luckily

00:07:02,800 --> 00:07:05,599
a number of folks have already

00:07:03,919 --> 00:07:07,840
recognized this shift and they have been

00:07:05,599 --> 00:07:09,520
doing the work to make it a reality

00:07:07,840 --> 00:07:11,280
now i'm going to pass it off to carlos

00:07:09,520 --> 00:07:12,560
to share a little bit more about where

00:07:11,280 --> 00:07:14,479
we're at today

00:07:12,560 --> 00:07:16,639
where we're going and what it'll take to

00:07:14,479 --> 00:07:18,319
get there thanks dan

00:07:16,639 --> 00:07:20,240
and how is risk 5 in the panorama of

00:07:18,319 --> 00:07:22,080
cloud applications and orchestration

00:07:20,240 --> 00:07:24,000
we are already in pretty good shape

00:07:22,080 --> 00:07:24,800
kubernetes already runs in the risk five

00:07:24,000 --> 00:07:26,639
architecture

00:07:24,800 --> 00:07:29,280
and we can even deploy some applications

00:07:26,639 --> 00:07:30,000
into it here we can see the sci-5

00:07:29,280 --> 00:07:31,840
unmatched

00:07:30,000 --> 00:07:34,319
the first chris 5 fully featured

00:07:31,840 --> 00:07:37,360
computer in a pc form factor

00:07:34,319 --> 00:07:39,599
it run already runs linux mainline

00:07:37,360 --> 00:07:41,520
the board has a quad core processor and

00:07:39,599 --> 00:07:42,960
16 gigs of ram allowing building and

00:07:41,520 --> 00:07:46,080
developing applications

00:07:42,960 --> 00:07:48,319
for risk 5 much easier in the left

00:07:46,080 --> 00:07:49,840
there is a screenshot in screenshots

00:07:48,319 --> 00:07:50,800
showing some terminals of it running

00:07:49,840 --> 00:07:52,800
kubernetes

00:07:50,800 --> 00:07:54,080
some containers and even open files

00:07:52,800 --> 00:07:56,400
serverless platform

00:07:54,080 --> 00:07:58,080
with a demo function all built natively

00:07:56,400 --> 00:08:00,080
in rs5

00:07:58,080 --> 00:08:01,440
getting to the point was not easy over

00:08:00,080 --> 00:08:02,720
the past few months

00:08:01,440 --> 00:08:04,800
me and the community have been

00:08:02,720 --> 00:08:05,680
submitting many prs to open source

00:08:04,800 --> 00:08:07,599
projects

00:08:05,680 --> 00:08:09,120
bringing them to support the risk 5

00:08:07,599 --> 00:08:11,599
architecture

00:08:09,120 --> 00:08:12,800
one big milestone was last year when we

00:08:11,599 --> 00:08:14,879
had go upstream

00:08:12,800 --> 00:08:16,879
and able to run to run and build

00:08:14,879 --> 00:08:19,120
binaries for this new architecture

00:08:16,879 --> 00:08:22,000
then i started patching more than 20

00:08:19,120 --> 00:08:25,039
projects and saving more than 40 pr's

00:08:22,000 --> 00:08:28,000
where most of them were already upstream

00:08:25,039 --> 00:08:29,280
base projects ranging from docker renzi

00:08:28,000 --> 00:08:31,919
container d

00:08:29,280 --> 00:08:33,680
and kubernetes itself pro medias and

00:08:31,919 --> 00:08:36,399
others including support libraries

00:08:33,680 --> 00:08:38,560
required from them

00:08:36,399 --> 00:08:41,039
then i started building many container

00:08:38,560 --> 00:08:42,880
images to be able to run kubernetes and

00:08:41,039 --> 00:08:46,000
its applications on risk five

00:08:42,880 --> 00:08:49,680
open fast uh traffic ingress controller

00:08:46,000 --> 00:08:52,080
core dns flannel and many more all

00:08:49,680 --> 00:08:54,320
required to support kubernetes and

00:08:52,080 --> 00:08:56,399
running these cloud applications i also

00:08:54,320 --> 00:08:57,920
had to build the base images to run

00:08:56,399 --> 00:09:00,640
these these applications

00:08:57,920 --> 00:09:01,600
like debian based image they still don't

00:09:00,640 --> 00:09:05,040
exist in the

00:09:01,600 --> 00:09:06,880
upstream uh repositories so we have to

00:09:05,040 --> 00:09:09,120
build on a separate tree

00:09:06,880 --> 00:09:11,040
all these changes projects and images

00:09:09,120 --> 00:09:13,760
are tracked in a project that i call

00:09:11,040 --> 00:09:14,959
risk five bring up project that's hosted

00:09:13,760 --> 00:09:17,120
on my github account

00:09:14,959 --> 00:09:18,560
i'll post the link uh at the end of the

00:09:17,120 --> 00:09:21,440
presentation for youtube

00:09:18,560 --> 00:09:22,320
to follow up this news and projects that

00:09:21,440 --> 00:09:24,720
have been

00:09:22,320 --> 00:09:27,120
tracking a lot have been achieved

00:09:24,720 --> 00:09:28,800
achieved in the past few months but

00:09:27,120 --> 00:09:31,839
we still need a lot of help from the

00:09:28,800 --> 00:09:33,519
community and you all can help on this

00:09:31,839 --> 00:09:36,000
we have some points that need to be

00:09:33,519 --> 00:09:38,240
addressed and will allow us to progress

00:09:36,000 --> 00:09:39,440
like having official support from linux

00:09:38,240 --> 00:09:42,480
distributions

00:09:39,440 --> 00:09:42,800
uh most of them already support building

00:09:42,480 --> 00:09:45,680
uh

00:09:42,800 --> 00:09:48,240
their packages for risk five almost at

00:09:45,680 --> 00:09:51,200
ninety percent of their packages already

00:09:48,240 --> 00:09:51,839
runs and builds on risk five but they're

00:09:51,200 --> 00:09:54,880
still not

00:09:51,839 --> 00:09:57,680
in the main distribution uh branches so

00:09:54,880 --> 00:10:00,240
uh we still need to configure it as uh

00:09:57,680 --> 00:10:03,920
for example unstable or experimental

00:10:00,240 --> 00:10:05,200
so uh once these this distributions are

00:10:03,920 --> 00:10:08,160
already upstream and

00:10:05,200 --> 00:10:09,440
releasing uh their their installation

00:10:08,160 --> 00:10:12,640
packages for

00:10:09,440 --> 00:10:15,839
for risk five we can have also uh

00:10:12,640 --> 00:10:18,079
changes to the image generation

00:10:15,839 --> 00:10:18,880
so we can have their main for example

00:10:18,079 --> 00:10:22,000
debian

00:10:18,880 --> 00:10:23,600
centos fedora images we can have risk

00:10:22,000 --> 00:10:27,440
fighting the manifests

00:10:23,600 --> 00:10:29,839
as well and that will allow us to build

00:10:27,440 --> 00:10:30,560
uh the many applications that we need

00:10:29,839 --> 00:10:34,079
based on

00:10:30,560 --> 00:10:34,480
uh official images once all these images

00:10:34,079 --> 00:10:37,360
are

00:10:34,480 --> 00:10:38,399
upstream we can start pushing new pr's

00:10:37,360 --> 00:10:40,640
for the projects

00:10:38,399 --> 00:10:42,800
uh allowing them to be built on their

00:10:40,640 --> 00:10:45,920
automated pipeline cis

00:10:42,800 --> 00:10:46,320
and binaries for risk five so we can

00:10:45,920 --> 00:10:49,600
have

00:10:46,320 --> 00:10:52,240
uh ri5 as a first class citizen

00:10:49,600 --> 00:10:53,920
in the cloud native foundation now i'll

00:10:52,240 --> 00:10:56,959
show a quick demo

00:10:53,920 --> 00:10:59,360
uh of me running kubernetes in the in my

00:10:56,959 --> 00:11:01,120
wrist five pc the sci-fi ever matches

00:10:59,360 --> 00:11:03,760
and deploying a simple hello world

00:11:01,120 --> 00:11:06,320
application it seems trivial but

00:11:03,760 --> 00:11:07,920
for an architecture that got linux

00:11:06,320 --> 00:11:10,399
mainline and support

00:11:07,920 --> 00:11:11,760
less than three years ago uh it's quite

00:11:10,399 --> 00:11:14,079
a progress and

00:11:11,760 --> 00:11:15,120
things are progressing so fast that we

00:11:14,079 --> 00:11:17,120
already have

00:11:15,120 --> 00:11:18,399
other applications running on risk 5

00:11:17,120 --> 00:11:21,440
like node.js

00:11:18,399 --> 00:11:23,360
and many more thank you very much and i

00:11:21,440 --> 00:11:25,200
hope you enjoy

00:11:23,360 --> 00:11:26,720
here in the right we have two windows on

00:11:25,200 --> 00:11:28,959
top my own computer

00:11:26,720 --> 00:11:30,480
the bottom the sci-fi haven't matched it

00:11:28,959 --> 00:11:32,800
let's take a look at our kubernetes

00:11:30,480 --> 00:11:32,800
nodes

00:11:33,600 --> 00:11:39,279
we have one ubuntu risk 5 node let's

00:11:36,399 --> 00:11:39,279
take a look at some

00:11:40,839 --> 00:11:45,279
details

00:11:42,880 --> 00:11:46,959
we have some containers running it's

00:11:45,279 --> 00:11:50,680
running on

00:11:46,959 --> 00:11:52,480
risk5 architecture and running version

00:11:50,680 --> 00:11:55,360
1.20.4

00:11:52,480 --> 00:11:55,360
it's pretty

00:11:55,839 --> 00:11:59,600
now let's take a look at our running

00:11:58,320 --> 00:12:02,959
pods

00:11:59,600 --> 00:12:04,800
yeah we have the system parts running

00:12:02,959 --> 00:12:06,079
and open fast a function is a service

00:12:04,800 --> 00:12:09,120
platform running

00:12:06,079 --> 00:12:11,839
in our onenote cluster as well

00:12:09,120 --> 00:12:11,839
let's take a look

00:12:20,399 --> 00:12:26,560
we have open first communicate

00:12:23,519 --> 00:12:26,560
server our server

00:12:27,279 --> 00:12:31,920
and we see no functions deployed

00:12:32,000 --> 00:12:35,760
let's deploy a fake light function

00:12:36,320 --> 00:12:44,800
the container is created in open files

00:12:40,800 --> 00:12:53,680
and it's already up okay take a look

00:12:44,800 --> 00:12:56,800
and it's already there

00:12:53,680 --> 00:13:00,079
let's test it well

00:12:56,800 --> 00:13:02,880
it runs perfectly we have an invocation

00:13:00,079 --> 00:13:04,639
this is the stacked text that generated

00:13:02,880 --> 00:13:08,639
the

00:13:04,639 --> 00:13:12,079
text let's bring open fast gateway

00:13:08,639 --> 00:13:12,720
website it shows our function and we can

00:13:12,079 --> 00:13:21,680
also

00:13:12,720 --> 00:13:25,519
invoke it from here

00:13:21,680 --> 00:13:27,519
perfect thanks carlos

00:13:25,519 --> 00:13:28,880
we hope everyone has a great rest of

00:13:27,519 --> 00:13:30,240
your week and if you have questions

00:13:28,880 --> 00:13:32,000
about cloud native

00:13:30,240 --> 00:13:34,000
wrist five or the intersection of the

00:13:32,000 --> 00:13:37,680
two feel free to reach out to either one

00:13:34,000 --> 00:13:37,680

YouTube URL: https://www.youtube.com/watch?v=PJXywAi0DR0


