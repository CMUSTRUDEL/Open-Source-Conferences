Title: How Deutsche Telekom Technik Built Das Schiff for Sailing the Cloud Native Seas - Vuk Gojnic
Publication date: 2021-05-13
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

How Deutsche Telekom Technik Built Das Schiff for Sailing the Cloud Native Seas - Vuk Gojnic, Squad Lead, Container & Cloud-native Engine, Deutsche Telekom Technik
Captions: 
	00:00:00,500 --> 00:00:07,780
[Music]

00:00:09,679 --> 00:00:13,040
do you know

00:00:10,559 --> 00:00:16,480
how does it look like to provide a

00:00:13,040 --> 00:00:18,880
managed kubernetes service in a telco

00:00:16,480 --> 00:00:19,680
it means managing hundreds even

00:00:18,880 --> 00:00:22,720
thousands

00:00:19,680 --> 00:00:25,519
of kubernetes clusters across

00:00:22,720 --> 00:00:27,359
hundreds of locations what kind of

00:00:25,519 --> 00:00:31,840
locations

00:00:27,359 --> 00:00:31,840
well this might look familiar

00:00:32,960 --> 00:00:40,399
or even this but it is also

00:00:36,640 --> 00:00:43,600
this as an industry we are not

00:00:40,399 --> 00:00:45,760
quite yet there but the speed with

00:00:43,600 --> 00:00:46,800
which we are approaching to this

00:00:45,760 --> 00:00:50,239
scenario

00:00:46,800 --> 00:00:52,719
is enormous hello

00:00:50,239 --> 00:00:53,440
everybody i am vu going each and since

00:00:52,719 --> 00:00:56,640
two years

00:00:53,440 --> 00:01:00,079
i'm running kubernetes platform team of

00:00:56,640 --> 00:01:01,199
deutsche telekom technique a network

00:01:00,079 --> 00:01:04,239
technology unit

00:01:01,199 --> 00:01:07,760
of deutsche telekom in germany

00:01:04,239 --> 00:01:11,119
my cloud native journey started in

00:01:07,760 --> 00:01:12,960
mid of 2019 when i was asked to

00:01:11,119 --> 00:01:14,799
look into providing a kubernetes

00:01:12,960 --> 00:01:20,000
platform for a

00:01:14,799 --> 00:01:23,280
telco workloads what kind of workloads

00:01:20,000 --> 00:01:24,560
well it is certainly not what you are

00:01:23,280 --> 00:01:26,960
expecting

00:01:24,560 --> 00:01:28,960
in an enterprise unless if you are

00:01:26,960 --> 00:01:32,159
coming from a telco

00:01:28,960 --> 00:01:33,280
we run the service platforms and network

00:01:32,159 --> 00:01:36,640
functions uh

00:01:33,280 --> 00:01:40,159
there many of those

00:01:36,640 --> 00:01:41,119
you are using even right now to

00:01:40,159 --> 00:01:44,880
participate

00:01:41,119 --> 00:01:48,000
in the kubecon uh

00:01:44,880 --> 00:01:49,600
which is the the technology which is

00:01:48,000 --> 00:01:52,079
highly and then very fast

00:01:49,600 --> 00:01:53,200
proliferating in that space can you

00:01:52,079 --> 00:01:56,640
guess it

00:01:53,200 --> 00:01:59,920
i guess you guessed it well it is a 5g

00:01:56,640 --> 00:02:00,799
and this is also what we are building

00:01:59,920 --> 00:02:03,840
and providing

00:02:00,799 --> 00:02:06,000
our platform for because it also

00:02:03,840 --> 00:02:08,399
requires platform infrastructure to run

00:02:06,000 --> 00:02:08,399
somewhere

00:02:10,319 --> 00:02:16,879
we asked ourselves when we began

00:02:13,760 --> 00:02:18,080
how could we provision maintain and

00:02:16,879 --> 00:02:21,200
manage

00:02:18,080 --> 00:02:24,560
kubernetes clusters the kubernetes tax

00:02:21,200 --> 00:02:26,959
at that scale with a small

00:02:24,560 --> 00:02:28,640
relatively small people of not more than

00:02:26,959 --> 00:02:33,120
00:02:28,640 --> 00:02:33,120
sres and

00:02:33,440 --> 00:02:38,879
we looked into what is uh what is common

00:02:37,120 --> 00:02:42,560
in the industry and

00:02:38,879 --> 00:02:45,040
one of the common

00:02:42,560 --> 00:02:46,319
and accepted statements is that

00:02:45,040 --> 00:02:50,319
kubernetes is

00:02:46,319 --> 00:02:54,959
mature for production as it is

00:02:50,319 --> 00:02:58,480
and this if this was the true in 2018

00:02:54,959 --> 00:03:00,480
uh it is even more true in 2020 and it's

00:02:58,480 --> 00:03:02,840
true not only for kubernetes but for

00:03:00,480 --> 00:03:04,560
many other pieces of a cloud native

00:03:02,840 --> 00:03:08,080
technologies

00:03:04,560 --> 00:03:10,480
they are of course

00:03:08,080 --> 00:03:12,879
many advanced solutions and

00:03:10,480 --> 00:03:15,519
distributions on the market

00:03:12,879 --> 00:03:17,280
and each of those is bringing a lot of

00:03:15,519 --> 00:03:21,760
options and benefits

00:03:17,280 --> 00:03:25,519
the question is what do you need

00:03:21,760 --> 00:03:29,120
and we found just enough of what we need

00:03:25,519 --> 00:03:33,200
for our use case in cncf

00:03:29,120 --> 00:03:35,680
we got inspired by those who

00:03:33,200 --> 00:03:37,280
did the same or similar thing before us

00:03:35,680 --> 00:03:40,560
and we decided to

00:03:37,280 --> 00:03:43,920
follow their path

00:03:40,560 --> 00:03:45,760
fail we may say we must expecting long

00:03:43,920 --> 00:03:49,040
journey

00:03:45,760 --> 00:03:52,560
we gave our project symbolic name

00:03:49,040 --> 00:03:56,080
dashif which is a german for the ship

00:03:52,560 --> 00:03:59,840
and our small but growing

00:03:56,080 --> 00:04:03,360
team eagerly earmarked

00:03:59,840 --> 00:04:06,480
the pieces came together in a platform

00:04:03,360 --> 00:04:10,799
in the platform by usage

00:04:06,480 --> 00:04:14,000
of and combination of cluster api

00:04:10,799 --> 00:04:15,840
and flux cd

00:04:14,000 --> 00:04:17,840
this enabled us to enjoy all the

00:04:15,840 --> 00:04:20,959
benefits of

00:04:17,840 --> 00:04:24,400
git tops as pioneered

00:04:20,959 --> 00:04:27,600
by vworks however

00:04:24,400 --> 00:04:30,800
in this case for a managing telco

00:04:27,600 --> 00:04:34,880
and 5g infrastructure at scale

00:04:30,800 --> 00:04:37,759
and all of that even on the bare metal

00:04:34,880 --> 00:04:38,720
managing it's actually not the right

00:04:37,759 --> 00:04:42,400
term

00:04:38,720 --> 00:04:44,320
it is rather self-management a situation

00:04:42,400 --> 00:04:45,680
in which infrastructure take care of

00:04:44,320 --> 00:04:48,479
itself

00:04:45,680 --> 00:04:50,320
for a most of the time without too much

00:04:48,479 --> 00:04:54,720
attendance

00:04:50,320 --> 00:04:57,520
our work actually focused on

00:04:54,720 --> 00:04:58,479
creating a glue for all of this uh in a

00:04:57,520 --> 00:05:01,840
form of

00:04:58,479 --> 00:05:05,199
git layout

00:05:01,840 --> 00:05:07,600
that enabled us to

00:05:05,199 --> 00:05:08,960
cover our multi-site multi

00:05:07,600 --> 00:05:12,800
infrastructure

00:05:08,960 --> 00:05:16,160
and multi cluster scenario

00:05:12,800 --> 00:05:17,280
this is a foundation on top of which we

00:05:16,160 --> 00:05:20,160
added

00:05:17,280 --> 00:05:21,840
all the components which are necessary

00:05:20,160 --> 00:05:26,160
if you claim

00:05:21,840 --> 00:05:26,160
to provide a managed service

00:05:26,800 --> 00:05:33,840
but if you are in a scenario

00:05:30,479 --> 00:05:36,400
on premise and in the use case like ours

00:05:33,840 --> 00:05:38,240
having a kubernetes cluster is only one

00:05:36,400 --> 00:05:41,360
piece of the puzzle

00:05:38,240 --> 00:05:45,360
for the other pieces we had to go

00:05:41,360 --> 00:05:45,360
cross foundational if i may

00:05:48,080 --> 00:05:51,759
you also need the modern data center

00:05:50,560 --> 00:05:53,680
networking stack

00:05:51,759 --> 00:05:55,759
and what would be more natural for

00:05:53,680 --> 00:05:59,360
people and for a team who is

00:05:55,759 --> 00:06:01,120
running kubernetes platform

00:05:59,360 --> 00:06:02,639
but to choose the network stack which is

00:06:01,120 --> 00:06:05,759
based on the containers

00:06:02,639 --> 00:06:07,520
this is what we found in sonic out of

00:06:05,759 --> 00:06:09,759
open compute project

00:06:07,520 --> 00:06:10,880
they have some extremely super

00:06:09,759 --> 00:06:12,880
interesting

00:06:10,880 --> 00:06:14,560
integration and fusion with kubernetes

00:06:12,880 --> 00:06:17,680
on their roadmap

00:06:14,560 --> 00:06:18,720
think of it like having all your

00:06:17,680 --> 00:06:22,160
switches

00:06:18,720 --> 00:06:25,120
in a data center being a kubernetes node

00:06:22,160 --> 00:06:26,240
forming a big kubernetes cluster and the

00:06:25,120 --> 00:06:29,199
software

00:06:26,240 --> 00:06:30,400
for those switches running as a cloud

00:06:29,199 --> 00:06:34,880
native application

00:06:30,400 --> 00:06:37,840
in the same cluster centerpiece of

00:06:34,880 --> 00:06:38,639
our approach are bare metal kubernetes

00:06:37,840 --> 00:06:40,560
clusters

00:06:38,639 --> 00:06:42,400
and to manage bare metal in a

00:06:40,560 --> 00:06:44,960
cloud-native way

00:06:42,400 --> 00:06:46,840
we turn to ironic out of open

00:06:44,960 --> 00:06:49,280
infrastructure

00:06:46,840 --> 00:06:50,800
foundation ironic in combination with

00:06:49,280 --> 00:06:54,400
metal tubes

00:06:50,800 --> 00:06:56,880
is giving a very good way

00:06:54,400 --> 00:06:59,160
to manage bare metal and these are all

00:06:56,880 --> 00:07:02,000
good pieces of software for that

00:06:59,160 --> 00:07:05,280
function um

00:07:02,000 --> 00:07:08,720
with this we have rounded up

00:07:05,280 --> 00:07:09,759
our approach and we ended up with a

00:07:08,720 --> 00:07:13,520
platform in which

00:07:09,759 --> 00:07:16,400
we use only git and kubernetes api

00:07:13,520 --> 00:07:17,120
to manage and provision and manage bare

00:07:16,400 --> 00:07:21,120
metal

00:07:17,120 --> 00:07:24,319
servers and ultimately create

00:07:21,120 --> 00:07:26,960
bare metal kubernetes clusters with them

00:07:24,319 --> 00:07:28,000
and on that platform we are currently on

00:07:26,960 --> 00:07:32,720
boarding quite some

00:07:28,000 --> 00:07:35,919
workloads 5g core among others

00:07:32,720 --> 00:07:38,960
the same setup we can apply

00:07:35,919 --> 00:07:41,039
on bigger core locations

00:07:38,960 --> 00:07:42,840
where you have a couple of hundreds of

00:07:41,039 --> 00:07:46,479
servers

00:07:42,840 --> 00:07:49,599
smaller edge locations but even on the

00:07:46,479 --> 00:07:52,560
very small far edge locations

00:07:49,599 --> 00:07:53,120
there are many benefits due to which we

00:07:52,560 --> 00:07:55,919
prefer

00:07:53,120 --> 00:07:57,599
bare metal kubernetes for a telco and 5g

00:07:55,919 --> 00:08:01,120
use case

00:07:57,599 --> 00:08:03,680
these are among others

00:08:01,120 --> 00:08:05,120
less overhead uncomplicated

00:08:03,680 --> 00:08:09,280
multi-tenancy

00:08:05,120 --> 00:08:11,759
easier use of hardware acceleration and

00:08:09,280 --> 00:08:13,680
direct hardware access in general and

00:08:11,759 --> 00:08:14,720
high flexibility and possibility to

00:08:13,680 --> 00:08:18,080
customize

00:08:14,720 --> 00:08:21,360
the operating system level are we done

00:08:18,080 --> 00:08:25,039
not nearly we are working

00:08:21,360 --> 00:08:28,479
uh with our friends from vworks

00:08:25,039 --> 00:08:31,759
and with the firecracker theme on

00:08:28,479 --> 00:08:35,200
use case for micro vms

00:08:31,759 --> 00:08:38,320
to act as a control plane in our

00:08:35,200 --> 00:08:41,680
resource constrained far edge scenario

00:08:38,320 --> 00:08:45,040
this could however unlock much

00:08:41,680 --> 00:08:47,200
more and vibrant innovation

00:08:45,040 --> 00:08:48,880
for the use cases which are way beyond

00:08:47,200 --> 00:08:50,800
what we are trying to do

00:08:48,880 --> 00:08:52,959
it's very very interesting and very

00:08:50,800 --> 00:08:57,120
exciting

00:08:52,959 --> 00:09:00,399
so this is a story

00:08:57,120 --> 00:09:02,560
about how we build a platform for cloud

00:09:00,399 --> 00:09:06,240
native telco and 5g

00:09:02,560 --> 00:09:09,519
however it is not less important to work

00:09:06,240 --> 00:09:12,959
in the community and to help

00:09:09,519 --> 00:09:16,480
network functions become cloud native

00:09:12,959 --> 00:09:18,080
so that they comfortably run on such a

00:09:16,480 --> 00:09:21,600
platform

00:09:18,080 --> 00:09:24,240
therefore we are actively engaging in a

00:09:21,600 --> 00:09:26,320
cnf working group and we see it as a

00:09:24,240 --> 00:09:29,600
driving force that will enable

00:09:26,320 --> 00:09:32,720
ultimately possibility to

00:09:29,600 --> 00:09:34,240
test the conformance of cloud native

00:09:32,720 --> 00:09:37,200
network functions

00:09:34,240 --> 00:09:38,000
to universally accepted cloud native

00:09:37,200 --> 00:09:41,519
principles

00:09:38,000 --> 00:09:45,200
and best best practices

00:09:41,519 --> 00:09:47,839
the main paradigm of software delivery

00:09:45,200 --> 00:09:49,200
and network function uh delivery in

00:09:47,839 --> 00:09:52,959
telco today is

00:09:49,200 --> 00:09:57,600
so called systems integrated approach

00:09:52,959 --> 00:10:00,080
it is based on testing and validating

00:09:57,600 --> 00:10:02,320
all the components which are version

00:10:00,080 --> 00:10:05,680
pinned

00:10:02,320 --> 00:10:08,320
for the internet working couple of times

00:10:05,680 --> 00:10:09,440
a year as much as this systems

00:10:08,320 --> 00:10:11,600
integrated approach

00:10:09,440 --> 00:10:12,560
worked well for the past it is not fit

00:10:11,600 --> 00:10:15,040
at all

00:10:12,560 --> 00:10:17,279
for a cloud-native scenario and for

00:10:15,040 --> 00:10:20,160
highly dynamic environment

00:10:17,279 --> 00:10:21,360
the cnf vendors need to enable cnf

00:10:20,160 --> 00:10:24,959
operators

00:10:21,360 --> 00:10:27,040
to validate and test platform

00:10:24,959 --> 00:10:28,160
and cnf combination on a continuous

00:10:27,040 --> 00:10:30,880
basis

00:10:28,160 --> 00:10:33,120
ideally daily so that they can assure

00:10:30,880 --> 00:10:36,000
its availability

00:10:33,120 --> 00:10:36,640
and the sla for that cloud native

00:10:36,000 --> 00:10:40,399
network

00:10:36,640 --> 00:10:43,200
functions this is what we are

00:10:40,399 --> 00:10:44,320
looking for to see as one of the

00:10:43,200 --> 00:10:48,000
outcomes of the

00:10:44,320 --> 00:10:50,480
cnf working group finally

00:10:48,000 --> 00:10:52,560
we are committed to give back to the

00:10:50,480 --> 00:10:55,839
community to share our experience

00:10:52,560 --> 00:10:58,720
our know-how and also components that we

00:10:55,839 --> 00:11:00,720
developed on our own

00:10:58,720 --> 00:11:02,399
therefore we are working with with our

00:11:00,720 --> 00:11:06,640
partners in the vworks

00:11:02,399 --> 00:11:09,839
to create a composable uh

00:11:06,640 --> 00:11:13,600
telco 5g cloud native platform

00:11:09,839 --> 00:11:16,640
that others could be able to use and

00:11:13,600 --> 00:11:19,839
hopefully get inspired to contribute

00:11:16,640 --> 00:11:20,399
for more details about that please visit

00:11:19,839 --> 00:11:23,440
our

00:11:20,399 --> 00:11:27,040
github page and feel free

00:11:23,440 --> 00:11:30,000
to contact me as well and finally

00:11:27,040 --> 00:11:31,600
for the end this conference would not be

00:11:30,000 --> 00:11:34,720
a conference

00:11:31,600 --> 00:11:35,839
without me saying we are hiring and

00:11:34,720 --> 00:11:39,040
indeed

00:11:35,839 --> 00:11:42,000
we are hiring for the positions

00:11:39,040 --> 00:11:43,120
based in germany so if you like

00:11:42,000 --> 00:11:45,440
kubernetes

00:11:43,120 --> 00:11:47,279
bare metal networking and if you are

00:11:45,440 --> 00:11:50,560
good and that

00:11:47,279 --> 00:11:53,200
please feel free to contact me

00:11:50,560 --> 00:11:54,000
thank you everybody for listening in and

00:11:53,200 --> 00:11:59,040
i wish you

00:11:54,000 --> 00:11:59,040

YouTube URL: https://www.youtube.com/watch?v=s0UKWiNNFTM


