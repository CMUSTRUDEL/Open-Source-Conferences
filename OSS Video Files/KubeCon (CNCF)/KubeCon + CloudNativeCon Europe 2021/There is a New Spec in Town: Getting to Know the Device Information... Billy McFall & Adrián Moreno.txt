Title: There is a New Spec in Town: Getting to Know the Device Information... Billy McFall & Adrián Moreno
Publication date: 2021-05-09
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

There is a New Spec in Town: Getting to Know the Device Information Spec - Billy McFall & Adrián Moreno, Red Hat

Cloud Native Network Functions (CNFs) will be the cornerstone of the 5G revolution. Unlike traditional workloads, CNFs require access to high speed network interfaces. Unfortunately, Kubernetes traditional networking does not fulfil this requirement out of the box. In order to close these gaps, a new specification has been developed called the Device Information Specification, which expands the existing multi-net specification developed by the Network Plumbing Working Group (NPWG). It not only enriches the information about the network interfaces, but also allows new accelerated technologies to be added and consumed by CNFs using an API-compliant library. This session will give an overview of the Device Information Specification and provide details of how it enables new network accelerating technologies to be integrated into Kubernetes through an end-to-end example.
Captions: 
	00:00:01,839 --> 00:00:07,279
hey billy are you ready for our meeting

00:00:04,720 --> 00:00:09,280
hey adrian i don't see anyone else here

00:00:07,279 --> 00:00:12,400
is it just yesterday

00:00:09,280 --> 00:00:14,480
yes seems everyone else failed

00:00:12,400 --> 00:00:16,400
um if that's the case can we hold off

00:00:14,480 --> 00:00:18,240
for just a couple of minutes i'm trying

00:00:16,400 --> 00:00:21,119
a new deployment and i need a couple

00:00:18,240 --> 00:00:23,439
more minutes to get to a breaking point

00:00:21,119 --> 00:00:24,640
sure no problem um i can help if you

00:00:23,439 --> 00:00:26,080
want

00:00:24,640 --> 00:00:28,800
yeah i mean if you got time that would

00:00:26,080 --> 00:00:30,240
be great um so i've got a customer

00:00:28,800 --> 00:00:31,359
that's got some requirements i'm not

00:00:30,240 --> 00:00:33,280
real familiar with

00:00:31,359 --> 00:00:35,200
they've got a legacy application they

00:00:33,280 --> 00:00:37,040
want to containerize and require some

00:00:35,200 --> 00:00:38,160
additional interfaces to make it work

00:00:37,040 --> 00:00:41,280
properly

00:00:38,160 --> 00:00:42,239
now i know multicni will allow you to

00:00:41,280 --> 00:00:44,320
run multiple

00:00:42,239 --> 00:00:46,719
cnis for a container which will

00:00:44,320 --> 00:00:47,680
basically add multiple interfaces to the

00:00:46,719 --> 00:00:49,120
container

00:00:47,680 --> 00:00:52,000
but the first time i've really had to do

00:00:49,120 --> 00:00:54,160
it with srv vfs

00:00:52,000 --> 00:00:56,239
i was able to bring up the pod but i

00:00:54,160 --> 00:00:58,960
can't tell which of the differential

00:00:56,239 --> 00:01:01,440
interfaces is used for what

00:00:58,960 --> 00:01:02,800
okay uh do you have a diagram or

00:01:01,440 --> 00:01:04,159
something can you show me what you're

00:01:02,800 --> 00:01:07,680
trying to do

00:01:04,159 --> 00:01:09,840
um yeah i think i got one here um

00:01:07,680 --> 00:01:12,400
all right i'm gonna i'm gonna share my

00:01:09,840 --> 00:01:14,799
screen hold on just a second i found it

00:01:12,400 --> 00:01:15,759
all right sharing can you see the

00:01:14,799 --> 00:01:19,280
drawing

00:01:15,759 --> 00:01:20,880
yes okay so

00:01:19,280 --> 00:01:23,200
as you can see from the picture they

00:01:20,880 --> 00:01:24,320
need a high speed interface to receive

00:01:23,200 --> 00:01:27,520
some video stream

00:01:24,320 --> 00:01:30,240
in on one interface the app does

00:01:27,520 --> 00:01:33,280
its transcoding magic and then sends a

00:01:30,240 --> 00:01:35,119
modified stream out a second interface

00:01:33,280 --> 00:01:36,479
these video streams are at high data

00:01:35,119 --> 00:01:39,040
rates and need to be on separate

00:01:36,479 --> 00:01:42,399
interfaces

00:01:39,040 --> 00:01:45,680
okay um i have a 5g

00:01:42,399 --> 00:01:49,280
case that is quite similar um

00:01:45,680 --> 00:01:50,479
at least uh the interfaces uh interface

00:01:49,280 --> 00:01:54,000
requirements

00:01:50,479 --> 00:01:56,399
is similar enough in fact

00:01:54,000 --> 00:01:57,040
this kind of setups is more common than

00:01:56,399 --> 00:01:59,759
you think

00:01:57,040 --> 00:02:01,040
um let's take a look at your cluster do

00:01:59,759 --> 00:02:03,600
you have uh

00:02:01,040 --> 00:02:04,399
a terminal around let's see yeah

00:02:03,600 --> 00:02:07,119
actually

00:02:04,399 --> 00:02:07,520
um i'll share but let me send you some

00:02:07,119 --> 00:02:12,239
here

00:02:07,520 --> 00:02:14,720
here's the login stuff and um

00:02:12,239 --> 00:02:15,360
now you can maybe tmux in here let me

00:02:14,720 --> 00:02:22,800
share it

00:02:15,360 --> 00:02:25,440
there we go yep yep man

00:02:22,800 --> 00:02:27,760
um so here's what i have so far i found

00:02:25,440 --> 00:02:29,680
some srv documentation so i've got

00:02:27,760 --> 00:02:33,040
enough that i was able to

00:02:29,680 --> 00:02:33,920
take my srv capable nic and divide it

00:02:33,040 --> 00:02:36,319
into multiple

00:02:33,920 --> 00:02:38,720
virtual functions so that multiple

00:02:36,319 --> 00:02:40,640
containers can share the same nic

00:02:38,720 --> 00:02:43,840
hang on i got this command and somewhere

00:02:40,640 --> 00:02:43,840
one of my notepads

00:02:44,319 --> 00:02:47,440
all right there you go so now you can

00:02:46,879 --> 00:02:50,560
see

00:02:47,440 --> 00:02:51,040
um i've got these two interfaces with

00:02:50,560 --> 00:02:54,400
four

00:02:51,040 --> 00:02:55,680
vf's each all right so now if i show you

00:02:54,400 --> 00:02:59,040
my

00:02:55,680 --> 00:03:02,159
queues gl

00:02:59,040 --> 00:03:03,440
good pawns all right so there's my test

00:03:02,159 --> 00:03:05,840
pod

00:03:03,440 --> 00:03:05,840
and

00:03:06,800 --> 00:03:12,879
um if we go and look at it

00:03:09,920 --> 00:03:13,920
so you can see here i've got e0 for my

00:03:12,879 --> 00:03:15,920
default network

00:03:13,920 --> 00:03:18,159
and then a couple of net interfaces for

00:03:15,920 --> 00:03:20,720
the additional interfaces

00:03:18,159 --> 00:03:22,400
but i don't know which net net one or

00:03:20,720 --> 00:03:25,680
niche two is used for

00:03:22,400 --> 00:03:28,080
what um so

00:03:25,680 --> 00:03:29,840
i'm logging i'm looking at logs and

00:03:28,080 --> 00:03:32,400
trying to hard code some values into my

00:03:29,840 --> 00:03:35,519
sample container to make this work out

00:03:32,400 --> 00:03:36,959
okay gotcha um i don't think you have to

00:03:35,519 --> 00:03:40,239
hardcode anything

00:03:36,959 --> 00:03:43,920
let me jump in real quick um

00:03:40,239 --> 00:03:47,840
okay and see

00:03:43,920 --> 00:03:47,840
what versions you're running

00:03:49,040 --> 00:03:57,120
so okay i see that you're running multis

00:03:52,959 --> 00:03:57,120
and the device plugin so

00:03:57,280 --> 00:04:02,080
um let me see

00:04:04,159 --> 00:04:07,200
let's start with the device plugin for

00:04:06,000 --> 00:04:09,439
instance

00:04:07,200 --> 00:04:09,439
um

00:04:11,599 --> 00:04:16,400
okay you're running 3.3.1 which is

00:04:14,879 --> 00:04:18,560
fairly recent

00:04:16,400 --> 00:04:19,680
that's good okay i'm gonna i'm gonna

00:04:18,560 --> 00:04:22,880
check the uh

00:04:19,680 --> 00:04:25,199
multis version just in case i wanna make

00:04:22,880 --> 00:04:28,560
sure you have all the changes

00:04:25,199 --> 00:04:32,479
um that we've recently added

00:04:28,560 --> 00:04:35,280
what changes are you looking for um

00:04:32,479 --> 00:04:36,080
okay i'm looking for some changes for

00:04:35,280 --> 00:04:39,440
the device

00:04:36,080 --> 00:04:44,160
info changes the

00:04:39,440 --> 00:04:47,040
network plumbing working group recently

00:04:44,160 --> 00:04:47,840
applied recently approved the new spec

00:04:47,040 --> 00:04:50,720
called the device

00:04:47,840 --> 00:04:52,400
infospec it specifies how additional

00:04:50,720 --> 00:04:55,440
device data can be passed

00:04:52,400 --> 00:04:56,320
into the pot look if everything is

00:04:55,440 --> 00:04:58,080
working

00:04:56,320 --> 00:05:01,199
the information that you're looking for

00:04:58,080 --> 00:05:01,199
should be here

00:05:07,039 --> 00:05:13,600
yes there it is

00:05:10,400 --> 00:05:16,400
you see in the pots annotations

00:05:13,600 --> 00:05:17,840
there is a network status field and

00:05:16,400 --> 00:05:21,120
within that field

00:05:17,840 --> 00:05:24,720
uh there is a json object for each

00:05:21,120 --> 00:05:25,520
network interface okay uh within that

00:05:24,720 --> 00:05:28,720
object

00:05:25,520 --> 00:05:32,160
uh there we have recently added

00:05:28,720 --> 00:05:35,360
the device info part

00:05:32,160 --> 00:05:36,479
and that is the information of your

00:05:35,360 --> 00:05:38,720
hardware device

00:05:36,479 --> 00:05:40,800
that is nicely associated with your

00:05:38,720 --> 00:05:44,000
network interface

00:05:40,800 --> 00:05:46,000
now as how was that association was

00:05:44,000 --> 00:05:48,560
actually made

00:05:46,000 --> 00:05:49,280
it's cubelet the one that allocates the

00:05:48,560 --> 00:05:51,520
device

00:05:49,280 --> 00:05:52,880
depending on the device plugins reported

00:05:51,520 --> 00:05:55,680
pools

00:05:52,880 --> 00:05:56,880
um okay hang on that was a little faster

00:05:55,680 --> 00:05:59,039
a lot of components

00:05:56,880 --> 00:06:00,240
um maybe we can draw a picture or

00:05:59,039 --> 00:06:02,160
something with all the components and

00:06:00,240 --> 00:06:04,639
how they talk to each other

00:06:02,160 --> 00:06:06,319
sure um actually i'm working on some

00:06:04,639 --> 00:06:10,000
slides for kubecon

00:06:06,319 --> 00:06:13,440
so let me paste a link in the chat

00:06:10,000 --> 00:06:16,800
it's open the link i have a deck

00:06:13,440 --> 00:06:20,720
here um let's just

00:06:16,800 --> 00:06:22,319
jump to slide seven okay i'm here i'll

00:06:20,720 --> 00:06:24,160
put it in the shared screen so we can

00:06:22,319 --> 00:06:27,360
see it

00:06:24,160 --> 00:06:30,800
can you see it uh yes

00:06:27,360 --> 00:06:34,080
so um

00:06:30,800 --> 00:06:37,199
there in that diagram shows a typical

00:06:34,080 --> 00:06:40,000
sriov deployment

00:06:37,199 --> 00:06:42,240
so as you already know multis is the one

00:06:40,000 --> 00:06:43,039
that allows you to call different cni

00:06:42,240 --> 00:06:45,280
plugins

00:06:43,039 --> 00:06:48,080
to attach additional networks right

00:06:45,280 --> 00:06:52,240
right right now that part i got yes

00:06:48,080 --> 00:06:55,199
okay well uh when it calls cesaro vcni

00:06:52,240 --> 00:06:57,440
it adds an extra parameter with the pci

00:06:55,199 --> 00:07:01,039
address that it has to configure

00:06:57,440 --> 00:07:03,120
the pci address of the vf okay then

00:07:01,039 --> 00:07:05,919
uh the srvcni just configures the

00:07:03,120 --> 00:07:09,199
networking aspects of the vf

00:07:05,919 --> 00:07:10,479
for example mac address vlan tag uh the

00:07:09,199 --> 00:07:13,599
trusted mode

00:07:10,479 --> 00:07:16,880
and so on okay

00:07:13,599 --> 00:07:20,000
i kind of get that part um i see the

00:07:16,880 --> 00:07:21,680
srv device plug-in in your drawing um

00:07:20,000 --> 00:07:23,840
now what's the purpose of device plug-in

00:07:21,680 --> 00:07:27,280
again yeah

00:07:23,840 --> 00:07:30,080
in the case of sriv we need to

00:07:27,280 --> 00:07:32,080
make sure that we properly manage the

00:07:30,080 --> 00:07:32,960
limited hardware resources that we have

00:07:32,080 --> 00:07:35,039
in the node

00:07:32,960 --> 00:07:37,360
in this case the virtual functions of

00:07:35,039 --> 00:07:40,240
our esri of unique

00:07:37,360 --> 00:07:41,039
also we need to modify the pods runtime

00:07:40,240 --> 00:07:43,520
spec

00:07:41,039 --> 00:07:44,560
to provide access to those hardware

00:07:43,520 --> 00:07:47,440
resources

00:07:44,560 --> 00:07:49,039
okay basically that is what the what the

00:07:47,440 --> 00:07:52,000
device plugin does for us

00:07:49,039 --> 00:07:52,720
um it is a demon set that sits on the

00:07:52,000 --> 00:07:54,720
node

00:07:52,720 --> 00:07:56,000
it discovers the available hardware

00:07:54,720 --> 00:07:58,720
resources

00:07:56,000 --> 00:08:00,000
and arranges them into pools into

00:07:58,720 --> 00:08:02,319
resource pools

00:08:00,000 --> 00:08:04,720
uh defined in a conflict map and makes

00:08:02,319 --> 00:08:07,680
these pools available to cubelet

00:08:04,720 --> 00:08:09,199
okay now um i do have a remember

00:08:07,680 --> 00:08:11,360
creating my config map

00:08:09,199 --> 00:08:12,879
um and i'm gonna switch back to the

00:08:11,360 --> 00:08:15,599
terminal here for a second

00:08:12,879 --> 00:08:15,599
all right so

00:08:16,400 --> 00:08:22,720
so here is my config map that i created

00:08:23,039 --> 00:08:30,080
all right can you see that it looks like

00:08:27,120 --> 00:08:32,400
you set up the conflict map correctly at

00:08:30,080 --> 00:08:32,400
least

00:08:32,880 --> 00:08:40,000
that config map is saying it's defining

00:08:36,399 --> 00:08:43,519
two resource pools one of the resource

00:08:40,000 --> 00:08:46,640
pools will will pick up all the

00:08:43,519 --> 00:08:49,040
vf's from pf0 and the other

00:08:46,640 --> 00:08:50,800
uh resource pool will pick up all the vf

00:08:49,040 --> 00:08:53,600
from pf1

00:08:50,800 --> 00:08:55,120
is that what you wanted yes yes so that

00:08:53,600 --> 00:08:56,000
sounds good i think i got a little lucky

00:08:55,120 --> 00:08:59,440
there on

00:08:56,000 --> 00:09:01,040
what i copied so okay now let's look at

00:08:59,440 --> 00:09:02,399
the network attachment definition did

00:09:01,040 --> 00:09:05,600
you create one of those

00:09:02,399 --> 00:09:08,560
yes yes all right so yeah all right so

00:09:05,600 --> 00:09:13,040
here's the yaml i used to create that

00:09:08,560 --> 00:09:14,800
yeah okay so as you can see

00:09:13,040 --> 00:09:16,880
your network attachment definition

00:09:14,800 --> 00:09:19,440
references the pools

00:09:16,880 --> 00:09:20,000
that you've created in the config map so

00:09:19,440 --> 00:09:23,680
that's

00:09:20,000 --> 00:09:26,720
ctx6 pf01 pf1 okay

00:09:23,680 --> 00:09:29,040
yes i do i do okay so um

00:09:26,720 --> 00:09:30,640
here let me go back to that picture so i

00:09:29,040 --> 00:09:33,920
can look at that again

00:09:30,640 --> 00:09:37,600
all right okay here we go so so um

00:09:33,920 --> 00:09:40,959
having that reference um properly done

00:09:37,600 --> 00:09:43,120
uh how it works is um

00:09:40,959 --> 00:09:45,600
when the network attachment their

00:09:43,120 --> 00:09:49,839
definition references the um

00:09:45,600 --> 00:09:51,680
the correct pool and a pot is allocated

00:09:49,839 --> 00:09:52,880
that uses one of those network

00:09:51,680 --> 00:09:56,000
attachment definitions

00:09:52,880 --> 00:09:58,959
cubelet selects a free device

00:09:56,000 --> 00:10:00,399
from the pool and asks the device plugin

00:09:58,959 --> 00:10:03,760
to provide the

00:10:00,399 --> 00:10:06,480
device information the response contains

00:10:03,760 --> 00:10:08,800
information about linux devices

00:10:06,480 --> 00:10:09,760
that um have to be added to the runtime

00:10:08,800 --> 00:10:13,839
spec

00:10:09,760 --> 00:10:17,360
mount points and environmental variables

00:10:13,839 --> 00:10:20,959
okay so basically that is how the pod

00:10:17,360 --> 00:10:24,320
has then access to

00:10:20,959 --> 00:10:27,440
a specific pci address now

00:10:24,320 --> 00:10:30,800
the problem is uh that that information

00:10:27,440 --> 00:10:34,959
flows directly from cubelet to the pod

00:10:30,800 --> 00:10:36,640
and it gets to the pot in a very limited

00:10:34,959 --> 00:10:39,200
way so you don't have

00:10:36,640 --> 00:10:41,040
like the context of the cni interface

00:10:39,200 --> 00:10:43,760
with it

00:10:41,040 --> 00:10:45,600
okay um and you said there was this new

00:10:43,760 --> 00:10:47,519
spec that was written how does that tie

00:10:45,600 --> 00:10:50,640
in with what we're talking about here

00:10:47,519 --> 00:10:51,519
well the spec changes this into the

00:10:50,640 --> 00:10:54,800
diagram

00:10:51,519 --> 00:10:58,880
in slide 10 10

00:10:54,800 --> 00:11:01,920
hold on all right there's slide 10

00:10:58,880 --> 00:11:05,519
yes there you go so as you see now

00:11:01,920 --> 00:11:07,600
the device plugin now writes a file

00:11:05,519 --> 00:11:10,240
in the notes file system that is

00:11:07,600 --> 00:11:13,360
standard is that the device info file

00:11:10,240 --> 00:11:16,640
exactly the device info file okay it

00:11:13,360 --> 00:11:20,160
writes the file in a predefined path

00:11:16,640 --> 00:11:23,839
with a standardized format and

00:11:20,160 --> 00:11:24,959
uh once the file is written multus will

00:11:23,839 --> 00:11:28,560
then pick it up

00:11:24,959 --> 00:11:29,680
and write it into the network status

00:11:28,560 --> 00:11:33,200
annotation

00:11:29,680 --> 00:11:36,480
under the right interface okay

00:11:33,200 --> 00:11:37,360
so this device file is actually on the

00:11:36,480 --> 00:11:38,959
node so

00:11:37,360 --> 00:11:41,120
you're saying i could troubleshoot some

00:11:38,959 --> 00:11:42,560
of the device related issues just by

00:11:41,120 --> 00:11:43,440
looking at the follow my note is that

00:11:42,560 --> 00:11:46,079
right

00:11:43,440 --> 00:11:46,720
yes that's correct all right hang on let

00:11:46,079 --> 00:11:49,760
me go

00:11:46,720 --> 00:11:50,800
back here and see if i can take a look

00:11:49,760 --> 00:11:52,399
at you know would you remember what the

00:11:50,800 --> 00:11:56,720
name of that file is or where it is

00:11:52,399 --> 00:11:56,720
uh it's in slash bar

00:11:58,320 --> 00:12:05,360
cni you know tap your way okay yeah

00:12:01,680 --> 00:12:08,959
um it device info slash

00:12:05,360 --> 00:12:11,120
dp for device plug-in okay you have

00:12:08,959 --> 00:12:12,240
all the yes oh yeah there's a couple of

00:12:11,120 --> 00:12:15,360
them there all right

00:12:12,240 --> 00:12:15,839
it's a json format so if you just if you

00:12:15,360 --> 00:12:20,160
come

00:12:15,839 --> 00:12:23,440
pipe it to jq if you have jq installed

00:12:20,160 --> 00:12:26,959
um so

00:12:23,440 --> 00:12:30,240
we can see the json okay

00:12:26,959 --> 00:12:31,279
content correct all right that looks a

00:12:30,240 --> 00:12:33,680
lot like the

00:12:31,279 --> 00:12:35,600
device info stuff right there that was

00:12:33,680 --> 00:12:38,959
in the annotations

00:12:35,600 --> 00:12:42,320
uh yes that's exactly right

00:12:38,959 --> 00:12:45,440
so um if you look into the

00:12:42,320 --> 00:12:49,360
um annotations again you should see

00:12:45,440 --> 00:12:53,200
that that json uh

00:12:49,360 --> 00:12:55,600
part is has been added to the

00:12:53,200 --> 00:12:56,480
network status annotation in the right

00:12:55,600 --> 00:12:58,240
interface

00:12:56,480 --> 00:12:59,680
okay yeah let me go back here and see if

00:12:58,240 --> 00:13:03,279
i can figure this out

00:12:59,680 --> 00:13:06,079
um okay yeah so i see that pci address

00:13:03,279 --> 00:13:06,639
in the device info that we talked about

00:13:06,079 --> 00:13:09,279
and then

00:13:06,639 --> 00:13:11,360
there's that srov net zero that we're

00:13:09,279 --> 00:13:15,200
talking about in the name field

00:13:11,360 --> 00:13:16,000
cool correct so um the sro v net zero is

00:13:15,200 --> 00:13:19,440
the name of

00:13:16,000 --> 00:13:22,880
your network attachment and the

00:13:19,440 --> 00:13:25,920
net one is the name of the interface

00:13:22,880 --> 00:13:26,959
um seen inside the pods uh network

00:13:25,920 --> 00:13:28,880
namespace

00:13:26,959 --> 00:13:30,800
all right cool all right i want to stop

00:13:28,880 --> 00:13:34,240
sharing here that's that was good

00:13:30,800 --> 00:13:36,320
that's good all right so

00:13:34,240 --> 00:13:37,920
um so we wait a minute you wrote a new

00:13:36,320 --> 00:13:40,560
spec just so we could figure out which

00:13:37,920 --> 00:13:42,639
interface belongs to which network

00:13:40,560 --> 00:13:44,320
no that was just one of the added

00:13:42,639 --> 00:13:47,440
benefits

00:13:44,320 --> 00:13:49,680
it allows network um a new

00:13:47,440 --> 00:13:52,720
accelerated network devices to be added

00:13:49,680 --> 00:13:55,839
to kubernetes more easily

00:13:52,720 --> 00:13:58,800
so recently i've been

00:13:55,839 --> 00:13:59,120
working on this technology called vdpa

00:13:58,800 --> 00:14:02,639
it

00:13:59,120 --> 00:14:03,920
exposes accelerated virtio compatible

00:14:02,639 --> 00:14:08,240
interfaces

00:14:03,920 --> 00:14:10,800
so it supports exposing a normal net dev

00:14:08,240 --> 00:14:11,839
to be used by standard containers but it

00:14:10,800 --> 00:14:15,519
also supports

00:14:11,839 --> 00:14:18,959
exposing a special charge device called

00:14:15,519 --> 00:14:21,279
v-host or behost ddpa device

00:14:18,959 --> 00:14:23,760
that can be used by dpdk apps for

00:14:21,279 --> 00:14:23,760
example

00:14:24,000 --> 00:14:30,000
to do memory mapping

00:14:27,760 --> 00:14:31,519
basically to mem to map to map the

00:14:30,000 --> 00:14:34,240
memory directly

00:14:31,519 --> 00:14:35,040
uh from the nic to the application okay

00:14:34,240 --> 00:14:37,680
so

00:14:35,040 --> 00:14:38,560
so then they can dma directly into the

00:14:37,680 --> 00:14:42,959
app

00:14:38,560 --> 00:14:46,639
um so this is uh one of the use cases

00:14:42,959 --> 00:14:48,480
and as you can imagine without this spec

00:14:46,639 --> 00:14:51,199
it will be impossible for the pot to

00:14:48,480 --> 00:14:53,440
know all the extra details needed to

00:14:51,199 --> 00:14:57,199
consume these new devices

00:14:53,440 --> 00:15:00,160
okay so um so it sounds like it makes

00:14:57,199 --> 00:15:01,040
bringing up these newer network devices

00:15:00,160 --> 00:15:03,199
easier

00:15:01,040 --> 00:15:04,560
and also but more in a standardized way

00:15:03,199 --> 00:15:06,480
instead of using i don't know maybe

00:15:04,560 --> 00:15:08,079
proprietary environmental variables or

00:15:06,480 --> 00:15:11,360
something like that right

00:15:08,079 --> 00:15:16,160
right so we wanted to um

00:15:11,360 --> 00:15:19,199
have a clear spec to um

00:15:16,160 --> 00:15:22,399
basically make a pot on

00:15:19,199 --> 00:15:26,000
pots and application developers

00:15:22,399 --> 00:15:28,639
lives uh easier

00:15:26,000 --> 00:15:29,440
the spec supports a number of uh

00:15:28,639 --> 00:15:32,720
different network

00:15:29,440 --> 00:15:33,839
devices these are iov devices like in

00:15:32,720 --> 00:15:38,320
your case

00:15:33,839 --> 00:15:41,279
mem if ddpa and some more

00:15:38,320 --> 00:15:42,800
it's easily extendable uh it's just a

00:15:41,279 --> 00:15:46,000
json format

00:15:42,800 --> 00:15:48,160
so it's easily extendable and

00:15:46,000 --> 00:15:50,000
it should make it easy for new

00:15:48,160 --> 00:15:51,680
technologies to be integrated into

00:15:50,000 --> 00:15:54,480
kubernetes

00:15:51,680 --> 00:15:56,399
even if they're not based on the sriv

00:15:54,480 --> 00:15:58,880
device plugin

00:15:56,399 --> 00:15:59,680
yeah but are there any cases where

00:15:58,880 --> 00:16:01,920
devices

00:15:59,680 --> 00:16:02,959
are created by like a cni plug-in

00:16:01,920 --> 00:16:04,560
instead of the

00:16:02,959 --> 00:16:06,480
you know any of the number of device

00:16:04,560 --> 00:16:09,519
plugins

00:16:06,480 --> 00:16:13,279
yes for example the host device

00:16:09,519 --> 00:16:17,680
uh cni and also

00:16:13,279 --> 00:16:21,680
the um user space cni that

00:16:17,680 --> 00:16:24,480
exposes virtual user devices

00:16:21,680 --> 00:16:28,079
the spec also contemplates that use case

00:16:24,480 --> 00:16:30,720
and it supports v-host user devices

00:16:28,079 --> 00:16:33,199
uh in that case how it works is uh it

00:16:30,720 --> 00:16:36,160
works in a slightly different way

00:16:33,199 --> 00:16:39,199
but um so how it works is the cni

00:16:36,160 --> 00:16:43,040
exposes a new capability

00:16:39,199 --> 00:16:46,639
and if multis detects this capability

00:16:43,040 --> 00:16:50,240
it will pass down basically the path

00:16:46,639 --> 00:16:51,600
where the cni has to put the device info

00:16:50,240 --> 00:16:55,199
file that we just

00:16:51,600 --> 00:16:57,120
saw okay so you're saying that the cni

00:16:55,199 --> 00:16:58,880
instead of the device plugin now does

00:16:57,120 --> 00:17:00,639
all the work but it has to deal with

00:16:58,880 --> 00:17:02,560
creating this file and

00:17:00,639 --> 00:17:03,600
making sure it exists and then writing

00:17:02,560 --> 00:17:05,360
the file and take care of all that

00:17:03,600 --> 00:17:09,120
tedious stuff right

00:17:05,360 --> 00:17:11,280
um well yes but

00:17:09,120 --> 00:17:12,640
most of the functionality has already

00:17:11,280 --> 00:17:15,760
been implemented in the

00:17:12,640 --> 00:17:18,959
library it's called the

00:17:15,760 --> 00:17:22,000
network attachment definition client and

00:17:18,959 --> 00:17:25,520
so the cni should

00:17:22,000 --> 00:17:28,400
just import that library uh to

00:17:25,520 --> 00:17:29,840
basically write the file and once that

00:17:28,400 --> 00:17:32,000
file is written

00:17:29,840 --> 00:17:33,200
then multis will take care of the rest

00:17:32,000 --> 00:17:36,400
basically cool

00:17:33,200 --> 00:17:38,080
okay so all now all this information is

00:17:36,400 --> 00:17:39,520
ultimately available from with the pod

00:17:38,080 --> 00:17:42,080
right

00:17:39,520 --> 00:17:43,679
right well good all right so now i just

00:17:42,080 --> 00:17:45,520
have to write a script

00:17:43,679 --> 00:17:47,520
or a small program to parse all this

00:17:45,520 --> 00:17:49,120
data in the container

00:17:47,520 --> 00:17:51,200
i'm not really looking forward to trying

00:17:49,120 --> 00:17:52,480
to parse json in a script but i guess i

00:17:51,200 --> 00:17:54,720
can do that

00:17:52,480 --> 00:17:56,240
well i told you i've already been

00:17:54,720 --> 00:17:58,840
through these um

00:17:56,240 --> 00:18:00,160
let me send you a link you're gonna like

00:17:58,840 --> 00:18:03,840
it

00:18:00,160 --> 00:18:04,240
okay um open that link okay i got it let

00:18:03,840 --> 00:18:07,520
me

00:18:04,240 --> 00:18:10,559
let me share it back over here

00:18:07,520 --> 00:18:14,880
um all right

00:18:10,559 --> 00:18:17,840
sharing all right uh app.net utility

00:18:14,880 --> 00:18:18,480
okay let's see wait this is a go module

00:18:17,840 --> 00:18:20,480
right

00:18:18,480 --> 00:18:21,760
um i think the only issue is that

00:18:20,480 --> 00:18:22,320
everything i'm dealing with is going to

00:18:21,760 --> 00:18:26,960
be in

00:18:22,320 --> 00:18:30,320
c drop down to the api section

00:18:26,960 --> 00:18:33,280
apis okay see there are go

00:18:30,320 --> 00:18:33,840
and c bindings oh yeah there's go ansi i

00:18:33,280 --> 00:18:37,039
like that

00:18:33,840 --> 00:18:40,160
cool all right and um i see

00:18:37,039 --> 00:18:41,760
there are three apis um one to get the

00:18:40,160 --> 00:18:45,360
cpu data

00:18:41,760 --> 00:18:47,679
one for get retrieving huge page data

00:18:45,360 --> 00:18:49,600
and then the third one is to retrieve

00:18:47,679 --> 00:18:51,919
all the interface data

00:18:49,600 --> 00:18:53,520
uh so has this repo been updated to

00:18:51,919 --> 00:18:54,840
support the new device info spec we were

00:18:53,520 --> 00:18:58,160
talking about

00:18:54,840 --> 00:19:00,160
yep it's very useful it hides all the

00:18:58,160 --> 00:19:01,840
complexities of parsing the network

00:19:00,160 --> 00:19:05,440
status annotation

00:19:01,840 --> 00:19:06,080
um environmental variables and system

00:19:05,440 --> 00:19:09,520
data

00:19:06,080 --> 00:19:12,640
and it offers a nice

00:19:09,520 --> 00:19:16,080
high level api all right

00:19:12,640 --> 00:19:20,160
um there's a lot here i see um test pods

00:19:16,080 --> 00:19:22,880
uh dpdk app container images

00:19:20,160 --> 00:19:24,960
um yeah there's a lot here yeah it has

00:19:22,880 --> 00:19:28,640
some sample code on how to use

00:19:24,960 --> 00:19:30,960
um the apis oh

00:19:28,640 --> 00:19:31,760
all right well that'd be useful um all

00:19:30,960 --> 00:19:38,160
right so what's this

00:19:31,760 --> 00:19:40,000
srv vf development

00:19:38,160 --> 00:19:41,280
all right there's a lot of stuff we've

00:19:40,000 --> 00:19:43,360
been talking about here

00:19:41,280 --> 00:19:44,960
i see the network attachment definitions

00:19:43,360 --> 00:19:48,640
and config maps

00:19:44,960 --> 00:19:49,600
um so um so even if i decide not to use

00:19:48,640 --> 00:19:51,280
it it shows

00:19:49,600 --> 00:19:52,880
all the different places in a container

00:19:51,280 --> 00:19:53,840
to collect the data and how to utilize

00:19:52,880 --> 00:19:56,000
it

00:19:53,840 --> 00:19:58,160
this looks useful i'll start playing

00:19:56,000 --> 00:20:00,160
with this um

00:19:58,160 --> 00:20:01,600
do you have a list of all those repos

00:20:00,160 --> 00:20:03,679
that we talked about

00:20:01,600 --> 00:20:04,880
was it network client or network

00:20:03,679 --> 00:20:08,480
something um

00:20:04,880 --> 00:20:09,039
yeah yeah i got a list uh let me show

00:20:08,480 --> 00:20:12,080
you

00:20:09,039 --> 00:20:14,159
man i i need to um invite you to my

00:20:12,080 --> 00:20:14,720
cubecon presentation you're just asking

00:20:14,159 --> 00:20:18,840
the right

00:20:14,720 --> 00:20:21,440
questions so you have my um deck

00:20:18,840 --> 00:20:26,960
yep so i think it's

00:20:21,440 --> 00:20:26,960
on slide 13. if you turn up there

00:20:27,200 --> 00:20:34,320
okay um i see yeah

00:20:30,240 --> 00:20:35,280
multis and um srv network device plug-in

00:20:34,320 --> 00:20:36,720
some of the stuff we've been talking

00:20:35,280 --> 00:20:38,080
about there it is network attachment

00:20:36,720 --> 00:20:39,919
client

00:20:38,080 --> 00:20:41,919
i see most of these projects are under

00:20:39,919 --> 00:20:45,360
the network plumbing working group

00:20:41,919 --> 00:20:47,039
um i thought that

00:20:45,360 --> 00:20:48,960
the network plumbing working group just

00:20:47,039 --> 00:20:50,240
wrote the multi-net spec that multis was

00:20:48,960 --> 00:20:52,880
coded to

00:20:50,240 --> 00:20:54,400
and that was it uh yes that was some

00:20:52,880 --> 00:20:57,679
time ago but

00:20:54,400 --> 00:20:59,600
they have recently approved a new open

00:20:57,679 --> 00:21:03,840
governance model

00:20:59,600 --> 00:21:07,440
they have brought together many projects

00:21:03,840 --> 00:21:10,159
including all of those and now it's a

00:21:07,440 --> 00:21:11,760
very healthy and diverse community

00:21:10,159 --> 00:21:13,520
well this is perfect i'll try to use

00:21:11,760 --> 00:21:14,960
some of this in my work

00:21:13,520 --> 00:21:16,799
but you're going to be out aren't you if

00:21:14,960 --> 00:21:19,679
i can run any some issues

00:21:16,799 --> 00:21:21,440
yeah for two weeks actually you still

00:21:19,679 --> 00:21:24,960
have that cucumber slide

00:21:21,440 --> 00:21:28,840
yeah now go to the next

00:21:24,960 --> 00:21:31,919
uh slide okay and you'll see

00:21:28,840 --> 00:21:32,640
yeah there you go those are the upstream

00:21:31,919 --> 00:21:36,400
meetings

00:21:32,640 --> 00:21:38,880
uh you have links to the meeting docs

00:21:36,400 --> 00:21:40,159
and you have the uh meeting cadence

00:21:38,880 --> 00:21:43,440
there

00:21:40,159 --> 00:21:44,640
um all right i like it but you know

00:21:43,440 --> 00:21:46,159
that's when they're saying i'm still

00:21:44,640 --> 00:21:47,200
like new to all this and learning all

00:21:46,159 --> 00:21:48,400
these technologies

00:21:47,200 --> 00:21:50,480
i think if i went to one of these

00:21:48,400 --> 00:21:53,120
upstream communities i just get lost and

00:21:50,480 --> 00:21:54,000
feel kind of out of place a little bit

00:21:53,120 --> 00:21:56,880
everyone

00:21:54,000 --> 00:21:58,080
there was new to it at some point if you

00:21:56,880 --> 00:22:01,440
have any issue just

00:21:58,080 --> 00:22:05,039
reach out to them they are um a very

00:22:01,440 --> 00:22:08,640
uh very kind and they will

00:22:05,039 --> 00:22:10,799
be happy to help you i'm sure

00:22:08,640 --> 00:22:12,720
oh well good that was real helpful i

00:22:10,799 --> 00:22:14,960
really do appreciate it i'm sorry for

00:22:12,720 --> 00:22:16,159
delaying our original meeting what was

00:22:14,960 --> 00:22:17,280
the original meeting for i've already

00:22:16,159 --> 00:22:20,320
forgotten

00:22:17,280 --> 00:22:22,880
uh it's our virtual beer clock zoom

00:22:20,320 --> 00:22:23,520
oh i'm sorry to delay that for work

00:22:22,880 --> 00:22:27,840
stuff

00:22:23,520 --> 00:22:27,840

YouTube URL: https://www.youtube.com/watch?v=VZ3Ln8d9RUc


