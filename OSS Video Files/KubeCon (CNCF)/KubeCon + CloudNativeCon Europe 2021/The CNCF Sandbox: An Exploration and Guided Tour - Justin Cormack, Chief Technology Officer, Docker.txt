Title: The CNCF Sandbox: An Exploration and Guided Tour - Justin Cormack, Chief Technology Officer, Docker
Publication date: 2021-05-13
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

The CNCF Sandbox: An Exploration and Guided Tour - Justin Cormack, Chief Technology Officer, Docker
Captions: 
	00:00:00,440 --> 00:00:10,960
[Music]

00:00:09,440 --> 00:00:13,440
hello

00:00:10,960 --> 00:00:15,360
i'm justin cormack i'm the cto at docker

00:00:13,440 --> 00:00:17,119
and i'm a member of the cncf technical

00:00:15,360 --> 00:00:18,640
oversight committee

00:00:17,119 --> 00:00:20,800
and one of the things we've really

00:00:18,640 --> 00:00:22,560
changed a lot in the last year in cncf

00:00:20,800 --> 00:00:25,680
is the sandbox

00:00:22,560 --> 00:00:29,359
so the sandbox is now home for

00:00:25,680 --> 00:00:30,880
a huge variety of projects to

00:00:29,359 --> 00:00:32,719
experiment with new things in cloud

00:00:30,880 --> 00:00:34,960
native and innovate and

00:00:32,719 --> 00:00:36,079
uh it's these are the projects you'll

00:00:34,960 --> 00:00:37,600
all be using in a

00:00:36,079 --> 00:00:39,760
in a few years time and some of you are

00:00:37,600 --> 00:00:41,600
using right now and they're great places

00:00:39,760 --> 00:00:44,160
to hack and develop and

00:00:41,600 --> 00:00:46,000
explore new ideas and we're really

00:00:44,160 --> 00:00:49,360
excited that now we have

00:00:46,000 --> 00:00:50,640
uh over over 40 nearly 50 probably by

00:00:49,360 --> 00:00:52,399
the time you hear this

00:00:50,640 --> 00:00:53,760
sandbox project and there's a huge

00:00:52,399 --> 00:00:55,840
diversity of them

00:00:53,760 --> 00:00:57,120
and i'm going to try and run through

00:00:55,840 --> 00:01:01,280
almost all of them

00:00:57,120 --> 00:01:01,280
in 15 minutes so

00:01:02,239 --> 00:01:09,040
let's go then starting with databases

00:01:07,200 --> 00:01:10,720
schema hero is a tool that takes your

00:01:09,040 --> 00:01:13,920
database schema and makes it into a

00:01:10,720 --> 00:01:16,240
kubernetes object and then you can

00:01:13,920 --> 00:01:18,560
apply schema updates and so on along

00:01:16,240 --> 00:01:21,200
with changes in your application code

00:01:18,560 --> 00:01:22,000
just through githubs and through uh you

00:01:21,200 --> 00:01:24,400
know through your

00:01:22,000 --> 00:01:26,159
normal kubernetes operations we'll see

00:01:24,400 --> 00:01:27,280
this pattern of applying things as

00:01:26,159 --> 00:01:29,840
kubernetes objects

00:01:27,280 --> 00:01:31,920
and a lot of these projects schema hero

00:01:29,840 --> 00:01:33,360
supports postgres mysql cockroach

00:01:31,920 --> 00:01:34,159
cassandra and zika lights if you're

00:01:33,360 --> 00:01:37,200
using those

00:01:34,159 --> 00:01:38,880
try it out next we have streaming and

00:01:37,200 --> 00:01:40,640
messaging tools

00:01:38,880 --> 00:01:42,640
streaming data and stream processing is

00:01:40,640 --> 00:01:43,840
a really important part of cloud native

00:01:42,640 --> 00:01:45,840
applications and

00:01:43,840 --> 00:01:47,200
lots of people are using them and um

00:01:45,840 --> 00:01:49,360
getting a lot of value from that kind of

00:01:47,200 --> 00:01:51,759
architecture

00:01:49,360 --> 00:01:52,399
streams is a tool to help you run apache

00:01:51,759 --> 00:01:54,799
kafka

00:01:52,399 --> 00:01:57,520
efficiently on kubernetes so it's a

00:01:54,799 --> 00:01:59,759
kubernetes operator that lets you manage

00:01:57,520 --> 00:02:02,960
the life cycle of kafka deployments and

00:01:59,759 --> 00:02:04,799
scaling and things like that

00:02:02,960 --> 00:02:06,399
prevega is a whole new streaming

00:02:04,799 --> 00:02:08,080
database design

00:02:06,399 --> 00:02:09,920
uh it's in the same kind of family as

00:02:08,080 --> 00:02:13,200
kafka but it's designed to support

00:02:09,920 --> 00:02:15,040
persistent storage auto scaling

00:02:13,200 --> 00:02:17,200
efficiency with a lot of partitions

00:02:15,040 --> 00:02:18,800
while delivering exactly one semantics

00:02:17,200 --> 00:02:21,280
and low latency all running on

00:02:18,800 --> 00:02:23,200
kubernetes

00:02:21,280 --> 00:02:25,280
tremor is also a new event processing

00:02:23,200 --> 00:02:27,840
system is an early stage project

00:02:25,280 --> 00:02:30,000
written in rust one of many rust

00:02:27,840 --> 00:02:32,160
projects we have in cncf now we had a

00:02:30,000 --> 00:02:33,760
rust day earlier this week

00:02:32,160 --> 00:02:36,000
um and it's exciting to see that

00:02:33,760 --> 00:02:38,160
community we're starting to work on

00:02:36,000 --> 00:02:40,080
interesting cloud native projects so

00:02:38,160 --> 00:02:42,720
tremor is designed to replace tools such

00:02:40,080 --> 00:02:46,319
as log stash or telegraph for getting

00:02:42,720 --> 00:02:47,440
json log data out into your system at

00:02:46,319 --> 00:02:49,120
high performance

00:02:47,440 --> 00:02:51,040
and high volume and it supports back

00:02:49,120 --> 00:02:52,560
pressure and rate limiting for a stable

00:02:51,040 --> 00:02:55,680
system which is obviously really

00:02:52,560 --> 00:02:55,680
important in production

00:02:55,760 --> 00:02:59,200
the next landscape section is

00:02:57,599 --> 00:03:02,239
application definition

00:02:59,200 --> 00:03:03,760
and image building backstage is a really

00:03:02,239 --> 00:03:05,519
exciting project we were all really

00:03:03,760 --> 00:03:06,640
excited to see this when it came into

00:03:05,519 --> 00:03:09,440
sandbox

00:03:06,640 --> 00:03:11,040
um it's a spotify project originally and

00:03:09,440 --> 00:03:11,920
it lets you build a whole developer

00:03:11,040 --> 00:03:14,480
portal for

00:03:11,920 --> 00:03:15,200
managing infrastructure with extensible

00:03:14,480 --> 00:03:17,360
ux

00:03:15,200 --> 00:03:19,040
and extensible service catalog and

00:03:17,360 --> 00:03:20,800
plugins that allow your teams to manage

00:03:19,040 --> 00:03:23,120
their own infrastructure from a simple

00:03:20,800 --> 00:03:25,360
ui

00:03:23,120 --> 00:03:26,959
kudo is a toolkit for writing kubernetes

00:03:25,360 --> 00:03:27,599
operators so you've been excited about

00:03:26,959 --> 00:03:29,920
operators

00:03:27,599 --> 00:03:31,599
in the stock so far take a look at it

00:03:29,920 --> 00:03:33,360
it's got a set of existing operators you

00:03:31,599 --> 00:03:35,040
can use and modify

00:03:33,360 --> 00:03:37,440
and operators let you control the whole

00:03:35,040 --> 00:03:39,519
life cycle of stateful applications such

00:03:37,440 --> 00:03:40,159
as managing backups and scaling and all

00:03:39,519 --> 00:03:42,239
the

00:03:40,159 --> 00:03:44,400
complex bits of life cycle that are

00:03:42,239 --> 00:03:46,640
really important

00:03:44,400 --> 00:03:48,640
serverless workflow is a specification

00:03:46,640 --> 00:03:50,879
with java and go sdks for defining

00:03:48,640 --> 00:03:52,400
workflows for serverless applications

00:03:50,879 --> 00:03:54,159
so there's a way to define how data

00:03:52,400 --> 00:03:54,959
flows between different serverless

00:03:54,159 --> 00:03:57,439
functions

00:03:54,959 --> 00:03:58,080
and how the events map and how retry and

00:03:57,439 --> 00:04:01,200
controls

00:03:58,080 --> 00:04:03,439
logic works

00:04:01,200 --> 00:04:05,280
artifact hub is a front end for finding

00:04:03,439 --> 00:04:06,080
artifacts such as helm charts across

00:04:05,280 --> 00:04:08,799
multiple

00:04:06,080 --> 00:04:10,879
uh actual back-end repositories it's not

00:04:08,799 --> 00:04:13,360
limited to helm it's being used by

00:04:10,879 --> 00:04:15,280
open policy agent policies falco rules

00:04:13,360 --> 00:04:17,760
and all sorts of other cloud native

00:04:15,280 --> 00:04:17,760
pieces

00:04:18,320 --> 00:04:21,359
cubevert as a tool for running vm

00:04:20,479 --> 00:04:22,800
workloads

00:04:21,359 --> 00:04:24,479
not just container workloads on

00:04:22,800 --> 00:04:26,240
kubernetes so

00:04:24,479 --> 00:04:27,840
if you haven't containerized everything

00:04:26,240 --> 00:04:29,600
and you want to run one set of

00:04:27,840 --> 00:04:31,199
infrastructure for all your applications

00:04:29,600 --> 00:04:33,759
take a look and run

00:04:31,199 --> 00:04:36,479
run your legacy applications in the same

00:04:33,759 --> 00:04:39,199
infrastructure

00:04:36,479 --> 00:04:40,840
porter is an application packaging tool

00:04:39,199 --> 00:04:44,000
from the cnab

00:04:40,840 --> 00:04:45,120
specification so it bundles up a set of

00:04:44,000 --> 00:04:47,360
components with

00:04:45,120 --> 00:04:48,479
um instructions for how to deploy them

00:04:47,360 --> 00:04:50,400
how to upgrade them

00:04:48,479 --> 00:04:52,400
and so on it's a very generic

00:04:50,400 --> 00:04:54,560
specification and porter

00:04:52,400 --> 00:04:56,000
is a is the kind of tool that works with

00:04:54,560 --> 00:04:58,800
all these um all these scene

00:04:56,000 --> 00:04:58,800
app things

00:04:59,040 --> 00:05:04,080
and telepresence is um a useful tool for

00:05:02,240 --> 00:05:05,199
remote debugging your apps

00:05:04,080 --> 00:05:07,840
while they're actually running in

00:05:05,199 --> 00:05:10,080
kubernetes in production or in staging

00:05:07,840 --> 00:05:11,440
so you can debug on your local

00:05:10,080 --> 00:05:13,759
workstation

00:05:11,440 --> 00:05:15,039
using local tools while your application

00:05:13,759 --> 00:05:17,759
is actually running remotely in

00:05:15,039 --> 00:05:17,759
kubernetes

00:05:19,360 --> 00:05:24,160
now cinc details brigade runs inside

00:05:22,800 --> 00:05:25,680
your kubernetes cluster

00:05:24,160 --> 00:05:27,840
and lets you use simple javascript

00:05:25,680 --> 00:05:28,479
programs to run tasks and pipelines and

00:05:27,840 --> 00:05:30,880
things

00:05:28,479 --> 00:05:33,280
so you could run unit tests or slack

00:05:30,880 --> 00:05:34,880
integrations or database updates

00:05:33,280 --> 00:05:38,400
whatever you want to script all sorts of

00:05:34,880 --> 00:05:40,800
tasks in javascript so it's easy to use

00:05:38,400 --> 00:05:41,840
cap10 manages application lifecycle

00:05:40,800 --> 00:05:43,759
automation

00:05:41,840 --> 00:05:45,600
so if you want to have a github style

00:05:43,759 --> 00:05:48,080
delivery pipeline but you don't want to

00:05:45,600 --> 00:05:50,880
roll out code unless it actually passes

00:05:48,080 --> 00:05:52,960
service level objectives then this is

00:05:50,880 --> 00:05:55,039
what you need so it can roll out

00:05:52,960 --> 00:05:58,960
from say staging to production if the

00:05:55,039 --> 00:06:00,880
code is meeting the quality gates

00:05:58,960 --> 00:06:02,560
this takes us nicely into observability

00:06:00,880 --> 00:06:04,720
and the areas around that

00:06:02,560 --> 00:06:06,160
so open matrix is standardizing the

00:06:04,720 --> 00:06:10,160
prometheus um

00:06:06,160 --> 00:06:12,479
format uh so make it an ietf standard so

00:06:10,160 --> 00:06:13,840
um it's not just the app you know

00:06:12,479 --> 00:06:15,440
they're just not just the format used by

00:06:13,840 --> 00:06:16,800
prometheus but it's also being widely

00:06:15,440 --> 00:06:17,280
used elsewhere because it's a really

00:06:16,800 --> 00:06:21,039
simple

00:06:17,280 --> 00:06:24,080
easy to understand standard

00:06:21,039 --> 00:06:26,400
trickster is an http reverse proxy and

00:06:24,080 --> 00:06:27,840
cache but it's specifically designed

00:06:26,400 --> 00:06:30,319
around accelerating time series

00:06:27,840 --> 00:06:32,160
databases such as prometheus

00:06:30,319 --> 00:06:34,639
so if you're making a dashboard system

00:06:32,160 --> 00:06:36,400
for example it can make it much faster

00:06:34,639 --> 00:06:39,440
by caching frequently used

00:06:36,400 --> 00:06:41,360
data but it can also add special

00:06:39,440 --> 00:06:43,280
optimizations that apply specifically to

00:06:41,360 --> 00:06:45,680
time series data such as

00:06:43,280 --> 00:06:46,880
exactly aligning your time series

00:06:45,680 --> 00:06:48,479
requests on

00:06:46,880 --> 00:06:50,720
say one second boundaries to make them

00:06:48,479 --> 00:06:54,240
faster

00:06:50,720 --> 00:06:56,400
um open telemetry is a telemetry service

00:06:54,240 --> 00:06:58,560
for traces and metrics and logs

00:06:56,400 --> 00:07:00,000
now this project really shows what you

00:06:58,560 --> 00:07:02,319
can do in the sandbox it was actually a

00:07:00,000 --> 00:07:03,599
merger of open tracing and open census

00:07:02,319 --> 00:07:06,160
projects

00:07:03,599 --> 00:07:07,599
um to make a uniform interface for users

00:07:06,160 --> 00:07:10,240
and it's seeing a lot of adoption

00:07:07,599 --> 00:07:11,440
as just applying for incubation now but

00:07:10,240 --> 00:07:13,039
it really shows that you can

00:07:11,440 --> 00:07:14,840
you know projects can really morph and

00:07:13,039 --> 00:07:18,720
change in sandbox and

00:07:14,840 --> 00:07:22,720
and projects can can work together and

00:07:18,720 --> 00:07:22,720
work out how to how to grow

00:07:22,880 --> 00:07:26,400
we also have a couple of chaos

00:07:24,160 --> 00:07:28,319
engineering tools netflix really

00:07:26,400 --> 00:07:29,680
introduced the chaos monkey years ago

00:07:28,319 --> 00:07:31,520
and it's become a valuable part of

00:07:29,680 --> 00:07:33,520
people's tooling for

00:07:31,520 --> 00:07:36,800
breaking things at scale in production

00:07:33,520 --> 00:07:39,199
in controlled ways or uncontrolled ways

00:07:36,800 --> 00:07:41,039
so chaos mesh has an operator that

00:07:39,199 --> 00:07:43,759
injects chaos into kubernetes

00:07:41,039 --> 00:07:45,599
and litmus has a set of crds and a

00:07:43,759 --> 00:07:48,000
toolkit to let you program your own

00:07:45,599 --> 00:07:50,479
chaos and go so if you want to

00:07:48,000 --> 00:07:52,160
make custom custom chaotic things happen

00:07:50,479 --> 00:07:54,960
in your cluster that's an

00:07:52,160 --> 00:07:56,160
interesting way of doing it so far we

00:07:54,960 --> 00:07:57,759
have one kubernetes just

00:07:56,160 --> 00:08:00,639
hold kubernetes distribution in the

00:07:57,759 --> 00:08:02,560
sandbox so k3s is built for iot and edge

00:08:00,639 --> 00:08:04,319
use cases which are becoming

00:08:02,560 --> 00:08:05,759
really popular with kubernetes and

00:08:04,319 --> 00:08:07,840
really growing area

00:08:05,759 --> 00:08:09,599
so it's lighter weight environments

00:08:07,840 --> 00:08:10,800
users can use sequel lighting instead of

00:08:09,599 --> 00:08:12,639
xtd

00:08:10,800 --> 00:08:14,160
and and more things targeted at that

00:08:12,639 --> 00:08:17,759
kind of environment also

00:08:14,160 --> 00:08:19,599
runs well on arm servers

00:08:17,759 --> 00:08:22,000
crossplane is a really cool way to

00:08:19,599 --> 00:08:23,520
expose any service api as a kubernetes

00:08:22,000 --> 00:08:25,120
object and manage it

00:08:23,520 --> 00:08:26,720
so you can manage resources in public

00:08:25,120 --> 00:08:27,520
and private clouds that your application

00:08:26,720 --> 00:08:30,240
needs

00:08:27,520 --> 00:08:32,240
along with your application in your cube

00:08:30,240 --> 00:08:35,360
resources with a uniform apis

00:08:32,240 --> 00:08:37,200
it's really really interesting

00:08:35,360 --> 00:08:39,200
volcano is a batch scheduling system for

00:08:37,200 --> 00:08:40,640
kubernetes it's often used for ml and

00:08:39,200 --> 00:08:42,399
big data applications

00:08:40,640 --> 00:08:43,919
like spark and tensorflow so if you're

00:08:42,399 --> 00:08:45,680
looking for better

00:08:43,919 --> 00:08:48,000
better support for more advanced batch

00:08:45,680 --> 00:08:51,200
workflow take a look

00:08:48,000 --> 00:08:52,800
bfe is a layer 7 application load

00:08:51,200 --> 00:08:54,800
balancer with support for

00:08:52,800 --> 00:08:56,880
things like https obviously and web

00:08:54,800 --> 00:08:59,760
sockets and cls and

00:08:56,880 --> 00:09:01,760
flexible routing policies the service

00:08:59,760 --> 00:09:03,600
mesh interface is a specification for

00:09:01,760 --> 00:09:05,279
service meshes it covers the common

00:09:03,600 --> 00:09:07,040
feature sets like traffic encryption

00:09:05,279 --> 00:09:09,360
telemetry whichever one

00:09:07,040 --> 00:09:10,640
everyone using service meshes is using

00:09:09,360 --> 00:09:11,920
so it allows you to switch to a

00:09:10,640 --> 00:09:14,560
different service mesh that

00:09:11,920 --> 00:09:16,480
me that meets the spec and use common

00:09:14,560 --> 00:09:18,560
tooling

00:09:16,480 --> 00:09:19,519
open service mesh is a simple envoy

00:09:18,560 --> 00:09:20,800
based service mesh

00:09:19,519 --> 00:09:22,640
actually implements service mesh

00:09:20,800 --> 00:09:26,720
interface so it's

00:09:22,640 --> 00:09:29,040
you know covers the covers those basics

00:09:26,720 --> 00:09:31,279
kumar is another envoy based service

00:09:29,040 --> 00:09:32,560
mesh uh designed to bridge kubernetes

00:09:31,279 --> 00:09:35,120
and virtual machines with a single

00:09:32,560 --> 00:09:36,880
control plane

00:09:35,120 --> 00:09:39,040
network service mesh is people who need

00:09:36,880 --> 00:09:41,519
to connect containers to different

00:09:39,040 --> 00:09:45,040
network protocols so if you're using um

00:09:41,519 --> 00:09:45,440
raw ethernet or mpls or l2tp for example

00:09:45,040 --> 00:09:47,360
like

00:09:45,440 --> 00:09:48,480
lots of telco applications are this is

00:09:47,360 --> 00:09:52,160
something that you might want to

00:09:48,480 --> 00:09:53,360
check out cni genie lets you connect to

00:09:52,160 --> 00:09:54,640
different cni

00:09:53,360 --> 00:09:56,959
um so kubernetes networking

00:09:54,640 --> 00:09:58,480
implementations on the same cluster so

00:09:56,959 --> 00:10:00,720
you can give pods connectivity to

00:09:58,480 --> 00:10:02,480
multiple cni plug-ins so if you're

00:10:00,720 --> 00:10:04,880
doing interesting things with networking

00:10:02,480 --> 00:10:05,200
take a look at that and kubo vn let's

00:10:04,880 --> 00:10:06,959
use

00:10:05,200 --> 00:10:08,560
ovn networks with kubernetes so if

00:10:06,959 --> 00:10:10,399
you're integrating into your

00:10:08,560 --> 00:10:11,920
enterprise network where you're using

00:10:10,399 --> 00:10:13,360
encapsulated packets

00:10:11,920 --> 00:10:14,959
then you might want to use that as your

00:10:13,360 --> 00:10:17,519
cni we've got

00:10:14,959 --> 00:10:19,440
three storage projects in the sandbox

00:10:17,519 --> 00:10:21,120
longhorn provides replicated block

00:10:19,440 --> 00:10:24,880
storage and management

00:10:21,120 --> 00:10:27,279
um so that's useful if you um

00:10:24,880 --> 00:10:28,720
you know if you need replicated highly

00:10:27,279 --> 00:10:31,040
available block stores

00:10:28,720 --> 00:10:32,000
open ebs supports local or replicated

00:10:31,040 --> 00:10:33,839
storage volumes

00:10:32,000 --> 00:10:36,480
it uses a fork of one of the longhorn

00:10:33,839 --> 00:10:38,640
providers and some various other options

00:10:36,480 --> 00:10:41,040
chipao fs is not a block store but it's

00:10:38,640 --> 00:10:42,399
actually posix and s3 compatible file

00:10:41,040 --> 00:10:45,279
based storage if you're looking for file

00:10:42,399 --> 00:10:46,640
storage for your applications

00:10:45,279 --> 00:10:48,880
provisioning is another area where

00:10:46,640 --> 00:10:52,399
you've got several interesting projects

00:10:48,880 --> 00:10:53,839
metal cubed see there's cool name cubed

00:10:52,399 --> 00:10:55,360
it's a provisioning tool that runs

00:10:53,839 --> 00:10:56,480
inside kubernetes to provision bare

00:10:55,360 --> 00:10:58,959
metal hosts

00:10:56,480 --> 00:11:00,560
as an operator that takes talks to ipmi

00:10:58,959 --> 00:11:02,560
controllers and provision servers and

00:11:00,560 --> 00:11:04,720
has into your clusters so

00:11:02,560 --> 00:11:05,760
that's interesting and then tinker bell

00:11:04,720 --> 00:11:07,839
it's another bare metal

00:11:05,760 --> 00:11:10,399
provision provisioning project came out

00:11:07,839 --> 00:11:13,279
of um packet now equinix metal

00:11:10,399 --> 00:11:14,000
um divides into you know five components

00:11:13,279 --> 00:11:17,279
for managing

00:11:14,000 --> 00:11:19,440
different parts dhcp os installs and

00:11:17,279 --> 00:11:20,560
power and boot control and things like

00:11:19,440 --> 00:11:23,519
that so a

00:11:20,560 --> 00:11:25,040
very interesting project lots of work

00:11:23,519 --> 00:11:26,959
going on there

00:11:25,040 --> 00:11:28,720
open here there's another kubernetes on

00:11:26,959 --> 00:11:31,279
the edge project so you can see lots of

00:11:28,720 --> 00:11:32,480
edge work going on supporting nodes that

00:11:31,279 --> 00:11:34,880
might go offline

00:11:32,480 --> 00:11:36,800
um edge clusters which need to sync back

00:11:34,880 --> 00:11:39,279
to a cloud control plane

00:11:36,800 --> 00:11:40,880
we've got there's lots of different edge

00:11:39,279 --> 00:11:42,640
work at different stages because a lot

00:11:40,880 --> 00:11:43,839
of people are doing q as at the edge so

00:11:42,640 --> 00:11:45,120
there's lots of projects and since you

00:11:43,839 --> 00:11:46,079
have to look out for if you're doing

00:11:45,120 --> 00:11:48,079
that

00:11:46,079 --> 00:11:49,920
i know for something different cloud

00:11:48,079 --> 00:11:51,760
custodian is actually a tool for policy

00:11:49,920 --> 00:11:52,800
definition enforcement in public clouds

00:11:51,760 --> 00:11:55,120
so if you're using

00:11:52,800 --> 00:11:56,480
um public cloud and you want to check

00:11:55,120 --> 00:11:57,839
you know your certificates are about to

00:11:56,480 --> 00:12:01,600
expire or check

00:11:57,839 --> 00:12:04,160
um policies and um on say machine images

00:12:01,600 --> 00:12:06,320
and storage bucket policy then

00:12:04,160 --> 00:12:07,920
use that which brings us really into the

00:12:06,320 --> 00:12:09,920
whole security and compliance section

00:12:07,920 --> 00:12:10,880
there's actually a lot of projects here

00:12:09,920 --> 00:12:12,000
um

00:12:10,880 --> 00:12:13,920
i think a lot of these projects are

00:12:12,000 --> 00:12:16,000
really exciting it's like great to see

00:12:13,920 --> 00:12:19,279
security projects in cncf

00:12:16,000 --> 00:12:20,720
um because it's um

00:12:19,279 --> 00:12:23,040
one of the areas i'm particularly

00:12:20,720 --> 00:12:24,240
interested in cert manager is an

00:12:23,040 --> 00:12:25,760
incredibly useful project which can

00:12:24,240 --> 00:12:27,600
manage all your kubernetes cluster

00:12:25,760 --> 00:12:29,760
certificates and automatically renew

00:12:27,600 --> 00:12:31,519
them and so on

00:12:29,760 --> 00:12:33,040
entoto is a software supply chain

00:12:31,519 --> 00:12:36,240
security specification

00:12:33,040 --> 00:12:38,320
so it's around about signing what

00:12:36,240 --> 00:12:39,760
processes have taken place with when

00:12:38,320 --> 00:12:43,279
you're building your software so you can

00:12:39,760 --> 00:12:46,720
verify it went through the right steps

00:12:43,279 --> 00:12:48,959
key lime is built on tpm2 software stack

00:12:46,720 --> 00:12:50,399
and is providing remote attestation and

00:12:48,959 --> 00:12:51,760
integrity measurement so you can see

00:12:50,399 --> 00:12:54,079
that what's running on your machine is

00:12:51,760 --> 00:12:57,920
what's supposed to be running

00:12:54,079 --> 00:13:00,399
um parsec is another um hardware

00:12:57,920 --> 00:13:02,079
security project platform abstraction

00:13:00,399 --> 00:13:03,760
for security it's short for

00:13:02,079 --> 00:13:06,560
um it's designed to abstract over

00:13:03,760 --> 00:13:09,440
hardware cryptography to

00:13:06,560 --> 00:13:11,519
cryptography so if applications want to

00:13:09,440 --> 00:13:12,560
talk to hardware crypto modules on the

00:13:11,519 --> 00:13:17,279
machine it can use

00:13:12,560 --> 00:13:19,680
sparsec curifence is a web application

00:13:17,279 --> 00:13:21,519
firewall that can be deployed in envoy

00:13:19,680 --> 00:13:24,079
or standalone to control traffic

00:13:21,519 --> 00:13:26,399
reaching your application

00:13:24,079 --> 00:13:27,360
dex is an open id connect a no auth 2

00:13:26,399 --> 00:13:28,959
provider

00:13:27,360 --> 00:13:30,480
so if you want to authenticate users

00:13:28,959 --> 00:13:32,240
into your cluster that's incredibly

00:13:30,480 --> 00:13:34,320
useful

00:13:32,240 --> 00:13:35,760
caverno is a policy agent and mission

00:13:34,320 --> 00:13:38,079
controller for kubernetes

00:13:35,760 --> 00:13:40,160
um it's really a much simpler than open

00:13:38,079 --> 00:13:42,079
policy agent it's designed for

00:13:40,160 --> 00:13:43,440
very simple use cases if you want to for

00:13:42,079 --> 00:13:45,600
example just say i don't want to run

00:13:43,440 --> 00:13:47,120
privileged containers this might be

00:13:45,600 --> 00:13:48,720
easier for you it doesn't have a whole

00:13:47,120 --> 00:13:50,079
programming language like open policy

00:13:48,720 --> 00:13:53,839
agent but just has simple

00:13:50,079 --> 00:13:55,680
composable policies and athens

00:13:53,839 --> 00:13:57,199
is an experiment and certificate manager

00:13:55,680 --> 00:13:58,959
to give applications dynamic

00:13:57,199 --> 00:14:00,399
certificates and provide service

00:13:58,959 --> 00:14:03,199
identity

00:14:00,399 --> 00:14:04,880
so that's all the projects that were in

00:14:03,199 --> 00:14:05,600
the sandbox landscape when i was doing

00:14:04,880 --> 00:14:07,040
this talk

00:14:05,600 --> 00:14:08,720
there were actually a few more that we

00:14:07,040 --> 00:14:10,480
just let in recently that didn't quite

00:14:08,720 --> 00:14:13,360
get into the landscape

00:14:10,480 --> 00:14:13,839
um sorry distribution you didn't get in

00:14:13,360 --> 00:14:15,440
and

00:14:13,839 --> 00:14:17,199
a couple of others that we let in and a

00:14:15,440 --> 00:14:18,480
couple of others that are going to be

00:14:17,199 --> 00:14:21,120
let in before

00:14:18,480 --> 00:14:22,959
kubecon no doubt but the sandbox is a

00:14:21,120 --> 00:14:24,160
really exciting place for projects and

00:14:22,959 --> 00:14:26,959
it's where projects are

00:14:24,160 --> 00:14:28,079
you know again the next generation of

00:14:26,959 --> 00:14:30,079
projects that you're all going to be

00:14:28,079 --> 00:14:32,160
using and coming from and you can

00:14:30,079 --> 00:14:37,440
start using them now start investigating

00:14:32,160 --> 00:14:37,440

YouTube URL: https://www.youtube.com/watch?v=XmMbzBuCuYw


