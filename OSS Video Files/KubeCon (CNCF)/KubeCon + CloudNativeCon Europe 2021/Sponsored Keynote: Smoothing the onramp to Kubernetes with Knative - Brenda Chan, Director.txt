Title: Sponsored Keynote: Smoothing the onramp to Kubernetes with Knative - Brenda Chan, Director
Publication date: 2021-05-13
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Sponsored Keynote: Smoothing the onramp to Kubernetes with Knative - Brenda Chan, Director of Engineering, VMware Tanzu Developer Experience, VMware
Captions: 
	00:00:02,950 --> 00:00:10,400
[Music]

00:00:08,400 --> 00:00:12,320
hi everyone i'm here today to talk about

00:00:10,400 --> 00:00:14,880
spooning the on-ramp to kubernetes with

00:00:12,320 --> 00:00:14,880
k-native

00:00:15,679 --> 00:00:19,920
so just a quick introduction for

00:00:17,520 --> 00:00:22,640
everyone here my name is brenda chan

00:00:19,920 --> 00:00:24,000
i'm located in toronto canada uh my

00:00:22,640 --> 00:00:25,920
current role at vmware is the

00:00:24,000 --> 00:00:27,920
engineering director for vmware tons of

00:00:25,920 --> 00:00:29,760
developer experience

00:00:27,920 --> 00:00:31,199
however within the k-native community

00:00:29,760 --> 00:00:32,640
i've been on the steering committee

00:00:31,199 --> 00:00:35,520
since the bootstrap phase

00:00:32,640 --> 00:00:37,200
in 2019 during my time on steering we've

00:00:35,520 --> 00:00:39,360
worked towards a completely community

00:00:37,200 --> 00:00:40,399
elected technical oversight committee or

00:00:39,360 --> 00:00:44,160
toc

00:00:40,399 --> 00:00:45,760
in steering committee in october 2020

00:00:44,160 --> 00:00:47,360
we formed the trademark committee and

00:00:45,760 --> 00:00:49,440
one really neat thing we're focusing on

00:00:47,360 --> 00:00:50,480
right now is actually defining k-native

00:00:49,440 --> 00:00:52,239
conformance

00:00:50,480 --> 00:00:56,320
and working towards a set of conformance

00:00:52,239 --> 00:00:56,320
test suites for when we plan to 1.0 this

00:00:56,840 --> 00:01:01,760
year

00:00:59,120 --> 00:01:03,280
so kubernetes is awesome i probably

00:01:01,760 --> 00:01:04,559
don't need to say more than that since

00:01:03,280 --> 00:01:07,040
we are at kubecon

00:01:04,559 --> 00:01:07,040
after all

00:01:07,840 --> 00:01:11,439
but really kubernetes has allowed us to

00:01:10,240 --> 00:01:14,000
normalize our infrastructure

00:01:11,439 --> 00:01:14,000
abstractions

00:01:14,720 --> 00:01:18,560
we have a thriving ecosystem in large

00:01:16,799 --> 00:01:21,439
community thank you for all of those who

00:01:18,560 --> 00:01:21,439
are actually here today

00:01:22,000 --> 00:01:26,720
and honestly kubernetes extensibility

00:01:24,640 --> 00:01:29,280
has proven to be extremely valuable and

00:01:26,720 --> 00:01:29,280
powerful

00:01:30,720 --> 00:01:35,119
the thing is is that kubernetes can

00:01:33,119 --> 00:01:37,920
actually be pretty hard

00:01:35,119 --> 00:01:38,720
in the cncf survey report in 2020 to the

00:01:37,920 --> 00:01:40,320
question

00:01:38,720 --> 00:01:41,840
what are your challenges in using in

00:01:40,320 --> 00:01:43,680
deploying containers

00:01:41,840 --> 00:01:45,439
the main challenge that the respondents

00:01:43,680 --> 00:01:46,640
actually replied with was that it was

00:01:45,439 --> 00:01:48,240
complex

00:01:46,640 --> 00:01:50,000
and i'd really like to spend some time

00:01:48,240 --> 00:01:54,079
today to explore that because it really

00:01:50,000 --> 00:01:56,479
doesn't need to be that hard

00:01:54,079 --> 00:01:58,320
so let's actually try this out let's run

00:01:56,479 --> 00:02:00,079
a stateless web server

00:01:58,320 --> 00:02:02,000
so you have me there on the left the the

00:02:00,079 --> 00:02:04,560
kubernetes engineer with 20 years of

00:02:02,000 --> 00:02:04,560
experience

00:02:05,520 --> 00:02:08,879
so first you'll want to create a

00:02:06,880 --> 00:02:10,479
deployment object you open up them you

00:02:08,879 --> 00:02:12,400
create some yaml

00:02:10,479 --> 00:02:14,640
make sure your indentation looks good

00:02:12,400 --> 00:02:14,640
great

00:02:14,800 --> 00:02:20,000
youtube cut i'll apply the deployment so

00:02:17,360 --> 00:02:20,000
far so good

00:02:20,640 --> 00:02:23,680
all right so now you create a kubernetes

00:02:23,120 --> 00:02:25,680
service

00:02:23,680 --> 00:02:26,959
uh you specify the port ensure you're

00:02:25,680 --> 00:02:30,640
targeting the right app

00:02:26,959 --> 00:02:30,640
and again you could apply that

00:02:32,239 --> 00:02:35,280
so now you need to make sure you can

00:02:33,599 --> 00:02:36,720
route traffic to your service so let's

00:02:35,280 --> 00:02:38,560
create an ingress

00:02:36,720 --> 00:02:40,480
uh ensure you have the right service

00:02:38,560 --> 00:02:42,879
name and port you could all apply that

00:02:40,480 --> 00:02:42,879
awesome

00:02:43,680 --> 00:02:47,040
and you're happy and this is awesome

00:02:45,360 --> 00:02:49,200
because it just works

00:02:47,040 --> 00:02:51,200
but let's do this again you may need to

00:02:49,200 --> 00:02:54,400
update something maybe the image change

00:02:51,200 --> 00:02:54,400
the port changed who knows

00:02:55,360 --> 00:02:58,879
so again you go through the same thing

00:02:57,040 --> 00:03:01,200
you update your deployment animal keep

00:02:58,879 --> 00:03:02,959
it will apply

00:03:01,200 --> 00:03:04,879
you may update the service coupe codon

00:03:02,959 --> 00:03:07,440
apply

00:03:04,879 --> 00:03:10,720
update the ingress keep it'll apply

00:03:07,440 --> 00:03:10,720
you're pretty used to this by now

00:03:10,800 --> 00:03:14,480
and this might be you not the worst but

00:03:12,959 --> 00:03:16,879
gosh the maintenance of the sprawling

00:03:14,480 --> 00:03:19,680
yml files are really annoying

00:03:16,879 --> 00:03:23,599
and then before you know it we're

00:03:19,680 --> 00:03:25,440
updating yaml or cube kettle applying

00:03:23,599 --> 00:03:27,200
and at this point you probably have an

00:03:25,440 --> 00:03:29,120
intimate understanding of kubernetes

00:03:27,200 --> 00:03:30,799
pods

00:03:29,120 --> 00:03:34,000
you know everything about labels and

00:03:30,799 --> 00:03:35,360
horizontal pod auto scaling

00:03:34,000 --> 00:03:36,879
and at this point you might have checked

00:03:35,360 --> 00:03:38,319
in your yaml to share with your team

00:03:36,879 --> 00:03:40,879
you're doing code reviews for all of

00:03:38,319 --> 00:03:42,879
this yaml

00:03:40,879 --> 00:03:44,840
and at this point you really take a step

00:03:42,879 --> 00:03:47,360
back and wonder am i just a yaml

00:03:44,840 --> 00:03:48,959
engineer

00:03:47,360 --> 00:03:51,280
the thing is it really doesn't have to

00:03:48,959 --> 00:03:53,360
be this way

00:03:51,280 --> 00:03:54,400
with k-native serving we've simplified a

00:03:53,360 --> 00:03:56,239
lot of that so

00:03:54,400 --> 00:04:00,799
you as a person writing and deploying

00:03:56,239 --> 00:04:02,480
the app can focus on what matters to you

00:04:00,799 --> 00:04:04,319
with k-native serving you get auto

00:04:02,480 --> 00:04:06,799
scaling deployment ingress

00:04:04,319 --> 00:04:08,879
automatic dns all created and managed

00:04:06,799 --> 00:04:11,280
for you

00:04:08,879 --> 00:04:12,159
you can easily handle traffic splitting

00:04:11,280 --> 00:04:16,080
and after all

00:04:12,159 --> 00:04:16,080
that's what you probably do care about

00:04:16,799 --> 00:04:20,320
with k-native eventing it allows you to

00:04:18,959 --> 00:04:22,240
move towards an event-driven

00:04:20,320 --> 00:04:24,000
architecture and decouple event delivery

00:04:22,240 --> 00:04:26,400
from your application code

00:04:24,000 --> 00:04:27,680
by using k-native event things source

00:04:26,400 --> 00:04:29,280
broker and trigger

00:04:27,680 --> 00:04:31,199
and standardizing your cloud events

00:04:29,280 --> 00:04:33,600
application you simplify that process

00:04:31,199 --> 00:04:33,600
for you

00:04:34,240 --> 00:04:37,360
the point i really want to get across

00:04:35,919 --> 00:04:38,479
here is that it really doesn't have to

00:04:37,360 --> 00:04:40,160
be that hard

00:04:38,479 --> 00:04:42,000
you don't need to have this exploding

00:04:40,160 --> 00:04:43,600
brain feeling modifying yaml

00:04:42,000 --> 00:04:47,199
learning all of these concepts code

00:04:43,600 --> 00:04:47,199
reviewing yaml when it could be this

00:04:47,360 --> 00:04:50,800
focus on what matters to you

00:04:51,120 --> 00:04:54,479
if you'd like to learn more feel free to

00:04:52,720 --> 00:04:56,479
visit the k native site join the slack

00:04:54,479 --> 00:04:58,320
channel or follow the twitter account

00:04:56,479 --> 00:05:00,000
everyone in the community is extremely

00:04:58,320 --> 00:05:00,800
welcoming and everyone is welcome to

00:05:00,000 --> 00:05:02,639
join

00:05:00,800 --> 00:05:04,240
i'm also happy to chat more if you have

00:05:02,639 --> 00:05:06,800
any questions feel free to reach out to

00:05:04,240 --> 00:05:06,800
me on twitter

00:05:07,039 --> 00:05:11,360

YouTube URL: https://www.youtube.com/watch?v=iMMe41x5mGE


