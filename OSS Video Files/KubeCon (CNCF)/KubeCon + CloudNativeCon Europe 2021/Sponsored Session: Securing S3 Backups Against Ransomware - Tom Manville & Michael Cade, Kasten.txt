Title: Sponsored Session: Securing S3 Backups Against Ransomware - Tom Manville & Michael Cade, Kasten
Publication date: 2021-05-09
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Sponsored Session: Securing S3 Backups Against Ransomware - Tom Manville & Michael Cade, Kasten by Veeam

Sharing of Personal Information with Sponsors In order to facilitate networking and business relationships at the event, you may choose to visit a third partyʼs virtual booth or to access sponsored content. You are never required to visit third party booths or to access sponsored content. When visiting a booth (e.g. by clicking on a third partyʼs logo in the Solutions Showcase or exhibitor directory, and any actions within the booth thereafter including viewing resources), when accessing sponsored sessions in the Sponsor Theater, or by participating in sponsored activities, the third party will receive some of your registration data. This data includes your first name, last name, title, company, address, email, standard demographics questions (i.e. job function, industry), and details about the sponsored content or resources you interacted with. If you choose to interact with a virtual booth or access sponsored content, you are explicitly consenting to receipt and use of such data by the third-party recipients, which will be subject to their own privacy policies.

When backing up cloud-native data, there is no better place than object storage. From databases to data protection applications, the cloud-native landscape is littered with projects that backup data to object storage. With all this mission-critical data being stored in object storage it’s no wonder that it’s become a high-value target for cyber criminals. This, in combination with the rising popularity of cryptocurrency, means that ransomware protection is now a requirement for IT departments of any size.

The S3 protocol has become the de-facto standard API for interacting with Object Storage. It is implemented by nearly all object storage providers and consumed by modern cloud native applications. Thankfully it provides all the primitives needed to develop a robust strategy to protect against ransomware attacks.

In this session, we’ll walk through how backups saved in an S3-compatible can be made ransomware resistant. We’ll show which APIs are used and how to configure the buckets. If you’re considering backing up data in object storage and your data is too valuable to lose, then this talk is for you!
Captions: 
	00:00:00,930 --> 00:00:07,339
[Music]

00:00:10,960 --> 00:00:15,360
thank you for joining our session

00:00:12,639 --> 00:00:17,920
on securing s3 backups against

00:00:15,360 --> 00:00:17,920
ransomware

00:00:18,240 --> 00:00:21,920
so as we get into this just a bit of an

00:00:20,080 --> 00:00:24,000
introduction so i'm michael cade i'm a

00:00:21,920 --> 00:00:24,640
senior technologist here at cast and by

00:00:24,000 --> 00:00:27,840
veeam

00:00:24,640 --> 00:00:29,199
and i'm joined by tom hi everyone my

00:00:27,840 --> 00:00:30,560
name is tom manville i'm director of

00:00:29,199 --> 00:00:33,840
engineering here at cast and by veeam

00:00:30,560 --> 00:00:35,440
and i was on the founding team at caston

00:00:33,840 --> 00:00:37,200
awesome tom's going to be giving the

00:00:35,440 --> 00:00:40,320
good news later on

00:00:37,200 --> 00:00:41,600
before that i have to put in some of the

00:00:40,320 --> 00:00:44,879
doom and gloom around

00:00:41,600 --> 00:00:45,280
well just the reality of why do we need

00:00:44,879 --> 00:00:47,840
to

00:00:45,280 --> 00:00:49,600
protect our data against things like

00:00:47,840 --> 00:00:51,920
ransomware so

00:00:49,600 --> 00:00:53,199
i'll get into the the bad bits first and

00:00:51,920 --> 00:00:56,239
then tom can

00:00:53,199 --> 00:00:58,160
tom can bring it home later on so

00:00:56,239 --> 00:00:59,920
the first thing that we want to touch on

00:00:58,160 --> 00:01:02,480
is well what is the need

00:00:59,920 --> 00:01:03,600
for a mutual backups and as much as

00:01:02,480 --> 00:01:05,760
we're talking around

00:01:03,600 --> 00:01:08,000
specifically around kubernetes clusters

00:01:05,760 --> 00:01:11,439
and kubernetes data

00:01:08,000 --> 00:01:14,560
the actual premise here actually

00:01:11,439 --> 00:01:16,240
resides in any any other platform so

00:01:14,560 --> 00:01:18,400
whether it's virtualization whether it's

00:01:16,240 --> 00:01:20,960
cloud-based ios workloads whether it's

00:01:18,400 --> 00:01:24,400
on-premises physical machines

00:01:20,960 --> 00:01:27,280
they all of these player play a

00:01:24,400 --> 00:01:28,400
a reason why we we need and we should be

00:01:27,280 --> 00:01:30,320
considering

00:01:28,400 --> 00:01:33,520
that mutability within our within our

00:01:30,320 --> 00:01:35,360
backup chains or off-site copies as well

00:01:33,520 --> 00:01:37,119
so just to quickly run through what

00:01:35,360 --> 00:01:38,640
these look like

00:01:37,119 --> 00:01:40,320
accidental deletion and i'm going to

00:01:38,640 --> 00:01:43,600
come through and put some of these

00:01:40,320 --> 00:01:45,600
into specific use cases later on like we

00:01:43,600 --> 00:01:47,680
know people make mistakes and

00:01:45,600 --> 00:01:49,439
if we look at if we were going to look

00:01:47,680 --> 00:01:52,000
at um

00:01:49,439 --> 00:01:54,240
the analysts who are constantly speaking

00:01:52,000 --> 00:01:56,079
to to you guys and understanding

00:01:54,240 --> 00:01:58,320
what happens from a failure scenario

00:01:56,079 --> 00:01:59,200
point of view accidental deletion is

00:01:58,320 --> 00:02:01,840
always

00:01:59,200 --> 00:02:03,520
in the top three things that are causing

00:02:01,840 --> 00:02:06,240
for data loss

00:02:03,520 --> 00:02:08,000
then you've got policy gaps in terms of

00:02:06,240 --> 00:02:10,160
well i thought you were backing this up

00:02:08,000 --> 00:02:11,599
i thought we were backing that up and

00:02:10,160 --> 00:02:14,879
there's that confusion gap

00:02:11,599 --> 00:02:16,239
around what is being what is actually

00:02:14,879 --> 00:02:19,120
being protected and what

00:02:16,239 --> 00:02:20,160
actually is being um backed up to a

00:02:19,120 --> 00:02:24,319
different location

00:02:20,160 --> 00:02:26,640
for to prevent those failure scenarios

00:02:24,319 --> 00:02:28,319
or not being able to recover from those

00:02:26,640 --> 00:02:30,560
failure scenarios

00:02:28,319 --> 00:02:32,080
and then probably more and definitely

00:02:30,560 --> 00:02:34,800
over the last 12 months

00:02:32,080 --> 00:02:36,480
is around security so both internal

00:02:34,800 --> 00:02:39,840
security threats

00:02:36,480 --> 00:02:41,519
there's a growing number of insider

00:02:39,840 --> 00:02:43,040
malicious activity

00:02:41,519 --> 00:02:44,720
going on i'm going to touch on this a

00:02:43,040 --> 00:02:48,080
little bit later as well

00:02:44,720 --> 00:02:49,280
as well as that everyday news wire

00:02:48,080 --> 00:02:51,680
coming down around

00:02:49,280 --> 00:02:53,599
external security threats and namely

00:02:51,680 --> 00:02:55,920
around ransomware and that's really the

00:02:53,599 --> 00:02:57,680
point where

00:02:55,920 --> 00:02:59,760
a ransomware attack is going to try and

00:02:57,680 --> 00:03:00,640
get into your system it's going to try

00:02:59,760 --> 00:03:03,760
and

00:03:00,640 --> 00:03:06,879
encrypt encrypt your data at a

00:03:03,760 --> 00:03:09,280
very 101 level

00:03:06,879 --> 00:03:10,959
uh but there's so much more to ransomway

00:03:09,280 --> 00:03:11,680
ransomware is getting so much more

00:03:10,959 --> 00:03:14,400
advanced

00:03:11,680 --> 00:03:16,080
in terms of being able to understand a

00:03:14,400 --> 00:03:18,000
lot more about your environment

00:03:16,080 --> 00:03:19,760
like i said before you've probably got

00:03:18,000 --> 00:03:21,920
different platforms within your

00:03:19,760 --> 00:03:24,400
infrastructure within your environment

00:03:21,920 --> 00:03:26,080
so ransomware could wreak havoc

00:03:24,400 --> 00:03:27,680
understanding what that looks like and

00:03:26,080 --> 00:03:28,879
it's getting even more intelligent that

00:03:27,680 --> 00:03:32,799
way so

00:03:28,879 --> 00:03:33,120
the the whole prevention is one thing

00:03:32,799 --> 00:03:36,000
but

00:03:33,120 --> 00:03:37,440
the fact that ransomware and cyber cyber

00:03:36,000 --> 00:03:41,040
attacks are getting more

00:03:37,440 --> 00:03:44,080
um advanced in how they're attacking

00:03:41,040 --> 00:03:46,000
their their victims just really

00:03:44,080 --> 00:03:47,280
resonates that we need to be thinking

00:03:46,000 --> 00:03:50,560
about how we store that

00:03:47,280 --> 00:03:53,280
backup data in a in that immutable

00:03:50,560 --> 00:03:55,200
fashion so that it cannot be modified

00:03:53,280 --> 00:03:56,879
both from an internal point of view so

00:03:55,200 --> 00:03:58,080
your backup admins they can't even they

00:03:56,879 --> 00:04:00,959
shouldn't be able to

00:03:58,080 --> 00:04:02,720
touch that that backup file but also

00:04:00,959 --> 00:04:03,680
obviously we don't want the external

00:04:02,720 --> 00:04:06,640
threats

00:04:03,680 --> 00:04:07,439
doing that either and then also legal

00:04:06,640 --> 00:04:09,680
and compliance

00:04:07,439 --> 00:04:11,200
especially in certain sectors verticals

00:04:09,680 --> 00:04:13,200
they have the requirement about well

00:04:11,200 --> 00:04:14,640
this cannot be touched this cannot be

00:04:13,200 --> 00:04:16,799
modified and

00:04:14,640 --> 00:04:18,320
whilst the other the other four that

00:04:16,799 --> 00:04:21,199
i've mentioned before

00:04:18,320 --> 00:04:22,079
are really important the legal in

00:04:21,199 --> 00:04:24,560
compliance

00:04:22,079 --> 00:04:25,759
obviously in some some verticals are are

00:04:24,560 --> 00:04:27,520
also

00:04:25,759 --> 00:04:29,680
business threatening as well from that

00:04:27,520 --> 00:04:32,639
point of view

00:04:29,680 --> 00:04:34,000
so just to really hit home and really

00:04:32,639 --> 00:04:37,840
touch in on some of those

00:04:34,000 --> 00:04:40,160
targeted kubernetes use cases here so

00:04:37,840 --> 00:04:42,479
i first mentioned around security or

00:04:40,160 --> 00:04:45,120
external security threats

00:04:42,479 --> 00:04:46,560
and this in particular this hildegard

00:04:45,120 --> 00:04:47,120
happened at the very beginning of this

00:04:46,560 --> 00:04:49,680
year so

00:04:47,120 --> 00:04:50,880
we're talking january 2021 so very new

00:04:49,680 --> 00:04:52,720
very topical

00:04:50,880 --> 00:04:54,560
and it really the premise of this is

00:04:52,720 --> 00:04:56,479
that it's going to target

00:04:54,560 --> 00:04:58,639
cloud and container infrastructure so

00:04:56,479 --> 00:05:01,360
your kubernetes or cloud native

00:04:58,639 --> 00:05:02,320
environment and it wants to inject

00:05:01,360 --> 00:05:05,360
itself in there

00:05:02,320 --> 00:05:06,720
and start mining for cryptocurrency it's

00:05:05,360 --> 00:05:08,800
going to leverage the

00:05:06,720 --> 00:05:10,160
the underlying hardware that you've

00:05:08,800 --> 00:05:12,400
you're paying money for

00:05:10,160 --> 00:05:14,560
especially in the public cloud and it's

00:05:12,400 --> 00:05:18,080
going to leverage that to

00:05:14,560 --> 00:05:21,360
to to gain that cryptocurrency to

00:05:18,080 --> 00:05:23,759
to mine that how it does that is

00:05:21,360 --> 00:05:24,720
is via deploying malicious code that

00:05:23,759 --> 00:05:27,680
targets

00:05:24,720 --> 00:05:30,080
exposed docker demon apis it's been

00:05:27,680 --> 00:05:31,199
active since that very early 2021 that i

00:05:30,080 --> 00:05:34,080
mentioned

00:05:31,199 --> 00:05:35,680
and the potential to exfiltrate

00:05:34,080 --> 00:05:38,080
sensitive data so

00:05:35,680 --> 00:05:39,440
whereas i mentioned around ransomware in

00:05:38,080 --> 00:05:41,440
the beginning

00:05:39,440 --> 00:05:44,240
years and years ago was all about

00:05:41,440 --> 00:05:47,280
encrypting and holding you from ransom

00:05:44,240 --> 00:05:49,600
well and and the ransom was a

00:05:47,280 --> 00:05:52,320
monetary value that you would pay

00:05:49,600 --> 00:05:54,400
probably in some sort of bitcoin

00:05:52,320 --> 00:05:57,039
that's not always the case anymore and

00:05:54,400 --> 00:06:00,240
actually the data is somewhat

00:05:57,039 --> 00:06:02,160
some could be more uh valuable

00:06:00,240 --> 00:06:06,000
if they were able to exfiltrate that out

00:06:02,160 --> 00:06:08,560
of your your environment

00:06:06,000 --> 00:06:10,400
then we touch on and hopefully this is

00:06:08,560 --> 00:06:12,960
the worst it gets from a

00:06:10,400 --> 00:06:14,319
from a ransomware point of view but then

00:06:12,960 --> 00:06:16,400
we move on to

00:06:14,319 --> 00:06:19,039
more of that insider threat which is

00:06:16,400 --> 00:06:22,560
actually maybe a little bit more scary

00:06:19,039 --> 00:06:25,280
in that all of us work for

00:06:22,560 --> 00:06:26,800
companies that are obviously looking or

00:06:25,280 --> 00:06:29,120
have adopted

00:06:26,800 --> 00:06:30,400
cloud native or at least some sort of

00:06:29,120 --> 00:06:32,880
infrastructure platform

00:06:30,400 --> 00:06:35,280
over the years and we probably have some

00:06:32,880 --> 00:06:37,759
responsibility when it comes to that

00:06:35,280 --> 00:06:38,479
and just to touch on the ransomware side

00:06:37,759 --> 00:06:41,199
of that

00:06:38,479 --> 00:06:42,240
is that well ransomware is quite a hard

00:06:41,199 --> 00:06:45,199
process

00:06:42,240 --> 00:06:46,080
in the it's always good being able to

00:06:45,199 --> 00:06:48,800
write

00:06:46,080 --> 00:06:50,479
the ransomware or the the threat but

00:06:48,800 --> 00:06:52,160
then you have to find an entry point

00:06:50,479 --> 00:06:53,199
into the business or into the vertical

00:06:52,160 --> 00:06:56,080
that you're looking to

00:06:53,199 --> 00:06:58,720
to attack you've then got to find some

00:06:56,080 --> 00:07:00,319
way of compromising the user accounts

00:06:58,720 --> 00:07:02,319
finding misconfigurations or

00:07:00,319 --> 00:07:04,160
vulnerabilities to be able to

00:07:02,319 --> 00:07:05,440
gain more of a footprint within that

00:07:04,160 --> 00:07:07,280
environment

00:07:05,440 --> 00:07:09,360
whereas this is where it gets really

00:07:07,280 --> 00:07:11,840
quite scary is

00:07:09,360 --> 00:07:12,639
over the last again over the last 12

00:07:11,840 --> 00:07:15,680
months

00:07:12,639 --> 00:07:18,160
maybe due to the pandemic or not is that

00:07:15,680 --> 00:07:18,960
there's been the ability to buy network

00:07:18,160 --> 00:07:22,000
access

00:07:18,960 --> 00:07:23,120
over the internet and that could be

00:07:22,000 --> 00:07:24,800
anywhere between

00:07:23,120 --> 00:07:26,479
three hundred dollars to ten thousand

00:07:24,800 --> 00:07:28,160
dollars and

00:07:26,479 --> 00:07:29,680
this kind of gives you a pick and mix

00:07:28,160 --> 00:07:31,840
option to be able to

00:07:29,680 --> 00:07:34,080
well i want to target this particular

00:07:31,840 --> 00:07:35,759
vertical and i want this particular

00:07:34,080 --> 00:07:37,680
access because this is where my

00:07:35,759 --> 00:07:39,120
ransomware could really work and

00:07:37,680 --> 00:07:40,720
you might have also heard the term

00:07:39,120 --> 00:07:42,880
ransomware as a service well

00:07:40,720 --> 00:07:45,440
this kind of coins and goes into that

00:07:42,880 --> 00:07:47,840
that same same bucket

00:07:45,440 --> 00:07:48,720
and this is the scary bit a disgruntled

00:07:47,840 --> 00:07:52,000
employee

00:07:48,720 --> 00:07:55,039
uh an employee that is is leaving

00:07:52,000 --> 00:07:59,039
and this is really playing into that

00:07:55,039 --> 00:08:00,960
that internal security threat and that

00:07:59,039 --> 00:08:02,160
we should be thinking about that least

00:08:00,960 --> 00:08:04,479
privileged model

00:08:02,160 --> 00:08:06,479
making sure that the people only who

00:08:04,479 --> 00:08:08,800
absolutely need access has a

00:08:06,479 --> 00:08:10,800
have access leveraging things like

00:08:08,800 --> 00:08:13,599
role-based access control

00:08:10,800 --> 00:08:15,280
leveraging things like policy based um

00:08:13,599 --> 00:08:16,639
access as well

00:08:15,280 --> 00:08:18,560
all key things that we should be

00:08:16,639 --> 00:08:20,160
considering and i think

00:08:18,560 --> 00:08:22,720
from a kubernetes point of view that's

00:08:20,160 --> 00:08:24,319
very much front and front and center of

00:08:22,720 --> 00:08:26,319
mind but

00:08:24,319 --> 00:08:28,080
it still obviously has to be implemented

00:08:26,319 --> 00:08:31,599
it doesn't just happen

00:08:28,080 --> 00:08:33,200
um and then we get back on to that

00:08:31,599 --> 00:08:36,080
accidental deletion now

00:08:33,200 --> 00:08:38,320
people do make mistakes it doesn't

00:08:36,080 --> 00:08:40,719
matter what platform you're on

00:08:38,320 --> 00:08:41,440
human errors are absolutely bound to

00:08:40,719 --> 00:08:44,720
happen

00:08:41,440 --> 00:08:46,880
and you can prevent as much as possible

00:08:44,720 --> 00:08:50,240
around how that doesn't happen

00:08:46,880 --> 00:08:52,880
kubernetes is obviously largely um

00:08:50,240 --> 00:08:53,440
made up of code so it takes away that

00:08:52,880 --> 00:08:56,320
human

00:08:53,440 --> 00:08:57,120
impact or that human error but still

00:08:56,320 --> 00:09:00,720
there is that

00:08:57,120 --> 00:09:04,800
chance that the accidental deletion

00:09:00,720 --> 00:09:06,959
process could could take um take hold

00:09:04,800 --> 00:09:09,279
and then in particular i found this on

00:09:06,959 --> 00:09:11,360
stack overflow so i accidentally deleted

00:09:09,279 --> 00:09:13,279
my kubernetes namespace

00:09:11,360 --> 00:09:14,480
and funnily enough there's not that many

00:09:13,279 --> 00:09:17,120
answers in there

00:09:14,480 --> 00:09:18,480
um because there's not much you can do

00:09:17,120 --> 00:09:21,600
about that if there's no

00:09:18,480 --> 00:09:24,000
no backup or or uh or i'll

00:09:21,600 --> 00:09:24,800
the ability to bring that back and

00:09:24,000 --> 00:09:26,880
something that i've

00:09:24,800 --> 00:09:28,320
i've coined here or many people have

00:09:26,880 --> 00:09:30,560
coined is this code 18

00:09:28,320 --> 00:09:32,640
and again this is this is applicable for

00:09:30,560 --> 00:09:36,240
any platform across any

00:09:32,640 --> 00:09:39,040
any uh environment is the code 18 being

00:09:36,240 --> 00:09:39,519
18 inches from the screen user error

00:09:39,040 --> 00:09:43,440
type

00:09:39,519 --> 00:09:43,440
type um type error

00:09:43,920 --> 00:09:47,519
so just a couple of points before i pass

00:09:46,320 --> 00:09:49,920
it over to tom to

00:09:47,519 --> 00:09:50,880
to bring in the the good news of well

00:09:49,920 --> 00:09:54,399
how the how

00:09:50,880 --> 00:09:58,480
how can it how can immutability help

00:09:54,399 --> 00:10:00,399
in these instances and some of the

00:09:58,480 --> 00:10:01,839
prevent preventative tasks that we can

00:10:00,399 --> 00:10:04,880
put together or help

00:10:01,839 --> 00:10:07,120
with around making sure that our

00:10:04,880 --> 00:10:08,720
operating systems our software is all up

00:10:07,120 --> 00:10:12,079
to date it's using the

00:10:08,720 --> 00:10:12,800
the correct um patches etc that are

00:10:12,079 --> 00:10:14,640
being

00:10:12,800 --> 00:10:16,640
shipped out on a daily basis regardless

00:10:14,640 --> 00:10:19,920
of what platform you're on

00:10:16,640 --> 00:10:22,320
also then routinely audit those

00:10:19,920 --> 00:10:23,040
access lists that you have making sure

00:10:22,320 --> 00:10:24,640
that

00:10:23,040 --> 00:10:27,040
still the people that need to have

00:10:24,640 --> 00:10:28,720
access have access

00:10:27,040 --> 00:10:31,200
and probably a broader because not

00:10:28,720 --> 00:10:31,200
everyone

00:10:31,519 --> 00:10:36,240
i consider the i.t or at least the the

00:10:34,720 --> 00:10:38,560
operators the developers

00:10:36,240 --> 00:10:40,560
have a good understanding of what

00:10:38,560 --> 00:10:41,200
ransomware is what phishing attacks look

00:10:40,560 --> 00:10:45,360
like

00:10:41,200 --> 00:10:47,839
from a wider scale but maybe the hr

00:10:45,360 --> 00:10:49,600
maybe the finance maybe other business

00:10:47,839 --> 00:10:50,000
sectors maybe even sales if you're not

00:10:49,600 --> 00:10:54,240
in a

00:10:50,000 --> 00:10:57,200
in a tech orientated um company

00:10:54,240 --> 00:10:58,560
then maybe we need to educate as well

00:10:57,200 --> 00:11:01,360
and continually

00:10:58,560 --> 00:11:02,959
educate because ransomware has changed

00:11:01,360 --> 00:11:04,800
dramatically over the last

00:11:02,959 --> 00:11:07,200
just over the last three years it's been

00:11:04,800 --> 00:11:10,399
become more mainstream and more

00:11:07,200 --> 00:11:13,680
vicious in how it attacks so just and

00:11:10,399 --> 00:11:16,720
and also much more intelligent in how it

00:11:13,680 --> 00:11:18,800
how it um how it attacks as well and

00:11:16,720 --> 00:11:21,440
then finally

00:11:18,800 --> 00:11:23,040
the backup backup is super important and

00:11:21,440 --> 00:11:24,160
that's really what's going to lead us

00:11:23,040 --> 00:11:27,519
into

00:11:24,160 --> 00:11:29,760
what tom is about to speak about is

00:11:27,519 --> 00:11:31,120
making sure that we've got a copy and

00:11:29,760 --> 00:11:33,680
the final point that i'll

00:11:31,120 --> 00:11:34,959
i'll raise is around mastering the three

00:11:33,680 --> 00:11:37,440
two one rule

00:11:34,959 --> 00:11:39,120
and again this methodology works

00:11:37,440 --> 00:11:41,519
regardless of platform

00:11:39,120 --> 00:11:42,240
and it basically means three copies of

00:11:41,519 --> 00:11:44,480
your data

00:11:42,240 --> 00:11:45,839
on two different media types one of

00:11:44,480 --> 00:11:49,040
those being off-site

00:11:45,839 --> 00:11:51,600
air-gapped and immutable away from

00:11:49,040 --> 00:11:52,800
any malicious activity whether it's

00:11:51,600 --> 00:11:54,959
insider whether it's

00:11:52,800 --> 00:11:57,360
external and with that i'll hand it over

00:11:54,959 --> 00:11:59,920
to tom

00:11:57,360 --> 00:12:01,360
thank you michael given the number of

00:11:59,920 --> 00:12:03,839
entry points for attacks

00:12:01,360 --> 00:12:05,279
the possibility of accidental data loss

00:12:03,839 --> 00:12:07,120
and the complexity around governance

00:12:05,279 --> 00:12:08,959
compliance requirements

00:12:07,120 --> 00:12:11,440
immutable backups are an important part

00:12:08,959 --> 00:12:13,279
of any data protection strategy

00:12:11,440 --> 00:12:14,880
object storage has become a popular

00:12:13,279 --> 00:12:16,399
destination for backups in the cloud

00:12:14,880 --> 00:12:17,920
native ecosystem

00:12:16,399 --> 00:12:19,360
and so we'd like to demonstrate how

00:12:17,920 --> 00:12:22,480
object storage can be used to create

00:12:19,360 --> 00:12:22,480
immutable backups

00:12:23,440 --> 00:12:26,959
the scalability simplicity and the

00:12:25,200 --> 00:12:28,320
robustness of object storage

00:12:26,959 --> 00:12:30,720
has made it the perfect target for

00:12:28,320 --> 00:12:33,360
backups in the cloud-native space

00:12:30,720 --> 00:12:34,800
objects also called blobs are accessed

00:12:33,360 --> 00:12:36,800
via simple

00:12:34,800 --> 00:12:38,800
quests which have been wrapped by a

00:12:36,800 --> 00:12:40,399
number of tools and libraries

00:12:38,800 --> 00:12:42,800
many databases have object storage

00:12:40,399 --> 00:12:45,600
support built in their backups are

00:12:42,800 --> 00:12:47,440
automatically pushed to object stores in

00:12:45,600 --> 00:12:49,120
addition for data protection vendors

00:12:47,440 --> 00:12:51,600
supporting object storage as a backup

00:12:49,120 --> 00:12:53,440
target has become table stakes

00:12:51,600 --> 00:12:55,279
you can also find several open source

00:12:53,440 --> 00:12:56,480
projects that make it easy to back up to

00:12:55,279 --> 00:12:58,160
optic storage

00:12:56,480 --> 00:13:01,680
copy is my personal favorite since my

00:12:58,160 --> 00:13:01,680
team is actively contributing

00:13:02,240 --> 00:13:06,959
many projects treat blobs as immutable

00:13:04,720 --> 00:13:08,959
never updating a blob one certain

00:13:06,959 --> 00:13:10,320
this has become a best practice to help

00:13:08,959 --> 00:13:11,920
deal with

00:13:10,320 --> 00:13:13,760
the consistency provided by object

00:13:11,920 --> 00:13:16,079
stores and their caching layers

00:13:13,760 --> 00:13:17,839
in the simplest scheme one one blob can

00:13:16,079 --> 00:13:19,279
map to a single backup

00:13:17,839 --> 00:13:21,760
however more advanced projects will

00:13:19,279 --> 00:13:23,440
split back up split a backup across

00:13:21,760 --> 00:13:25,040
multiple blobs enabling better

00:13:23,440 --> 00:13:27,519
performance

00:13:25,040 --> 00:13:29,040
treating blocks as immutable is an

00:13:27,519 --> 00:13:30,399
important requirement when implementing

00:13:29,040 --> 00:13:32,160
immutable backups

00:13:30,399 --> 00:13:33,760
however this is not sufficient since

00:13:32,160 --> 00:13:36,480
your code may not be the only one

00:13:33,760 --> 00:13:38,560
attempting to write to the bucket

00:13:36,480 --> 00:13:40,000
the only way to ensure immutability is

00:13:38,560 --> 00:13:41,440
to use the primitives provided by the

00:13:40,000 --> 00:13:43,519
underlying storage

00:13:41,440 --> 00:13:45,839
let's take a look at what the s3 api

00:13:43,519 --> 00:13:47,760
provides

00:13:45,839 --> 00:13:50,240
although not it's not the only api for

00:13:47,760 --> 00:13:51,920
optic storage the s3 api has become the

00:13:50,240 --> 00:13:53,199
most prolific and includes all the

00:13:51,920 --> 00:13:55,360
primitives needed

00:13:53,199 --> 00:13:57,440
for creating immutable backups with a

00:13:55,360 --> 00:13:59,519
feature called optic locking

00:13:57,440 --> 00:14:00,720
in order to use object blocking you need

00:13:59,519 --> 00:14:02,800
to make sure that your bucket is

00:14:00,720 --> 00:14:04,079
configured with object versioning

00:14:02,800 --> 00:14:05,680
based on your requirements you'll need

00:14:04,079 --> 00:14:07,839
to set object locking parameters in your

00:14:05,680 --> 00:14:10,079
api requests

00:14:07,839 --> 00:14:11,760
for the most basic schemes using s3

00:14:10,079 --> 00:14:13,760
object locks will be similar to using

00:14:11,760 --> 00:14:15,360
any f3 bucket for backups

00:14:13,760 --> 00:14:17,360
i'll go through the changes needed in

00:14:15,360 --> 00:14:20,160
the api requests to configure

00:14:17,360 --> 00:14:20,160
immutability

00:14:21,600 --> 00:14:26,320
in order to use object locks your bucket

00:14:24,160 --> 00:14:28,480
must be configured with versioning

00:14:26,320 --> 00:14:30,240
any request that modifies a blob in a

00:14:28,480 --> 00:14:31,760
virgin bucket will create a new version

00:14:30,240 --> 00:14:33,680
of that blob

00:14:31,760 --> 00:14:36,079
the previous versions may still be

00:14:33,680 --> 00:14:37,839
accessed deletes will delete

00:14:36,079 --> 00:14:40,240
will create a delete marker that

00:14:37,839 --> 00:14:42,000
indicates a delete which was issued

00:14:40,240 --> 00:14:43,279
the availability of previous versions of

00:14:42,000 --> 00:14:44,720
an object depend

00:14:43,279 --> 00:14:47,920
on the relation on the retention

00:14:44,720 --> 00:14:47,920
settings for the blob

00:14:48,240 --> 00:14:51,760
the behavior of object locking is

00:14:49,839 --> 00:14:53,760
determined by the retention mode

00:14:51,760 --> 00:14:55,839
there are two retention modes governance

00:14:53,760 --> 00:14:57,680
mode is more permissive

00:14:55,839 --> 00:14:58,880
to bypass the retention setting users

00:14:57,680 --> 00:15:00,399
must have permission

00:14:58,880 --> 00:15:02,560
in addition the user must exclusively

00:15:00,399 --> 00:15:04,399
set a special header

00:15:02,560 --> 00:15:06,079
compliance mode is more restrictive and

00:15:04,399 --> 00:15:07,680
once set a retention period cannot be

00:15:06,079 --> 00:15:10,480
reduced

00:15:07,680 --> 00:15:11,760
in aws s3's case the only way that an

00:15:10,480 --> 00:15:12,959
object may get deleted within a

00:15:11,760 --> 00:15:15,600
retention period

00:15:12,959 --> 00:15:17,920
is by completely deleting the aws

00:15:15,600 --> 00:15:17,920
account

00:15:18,480 --> 00:15:22,160
there are two ways an object can be

00:15:19,920 --> 00:15:23,519
retained the first is by a mechanism

00:15:22,160 --> 00:15:25,760
called the legal hold

00:15:23,519 --> 00:15:27,920
a legal hold may be set or released by

00:15:25,760 --> 00:15:29,040
any user with the put object legal hold

00:15:27,920 --> 00:15:31,519
permission

00:15:29,040 --> 00:15:33,360
an object cannot be modified or deleted

00:15:31,519 --> 00:15:35,360
when a legal hold is set

00:15:33,360 --> 00:15:36,560
the second mechanism is a retention

00:15:35,360 --> 00:15:38,560
period an

00:15:36,560 --> 00:15:40,000
object cannot be deleted or modified

00:15:38,560 --> 00:15:42,320
until after the retention period

00:15:40,000 --> 00:15:44,000
expires a retention period may be

00:15:42,320 --> 00:15:44,800
configured by default at the bucket

00:15:44,000 --> 00:15:46,959
level

00:15:44,800 --> 00:15:48,720
at the blob creation time or may be

00:15:46,959 --> 00:15:53,120
extended via a separate api

00:15:48,720 --> 00:15:53,120
call let's dig into some of the apis

00:15:53,519 --> 00:15:57,040
when creating a blob as part of a backup

00:15:55,440 --> 00:15:58,720
you'll want to ensure that the retention

00:15:57,040 --> 00:16:00,639
period is set long enough

00:15:58,720 --> 00:16:02,320
so that the backup cannot be deleted or

00:16:00,639 --> 00:16:03,519
modified for an amount of time

00:16:02,320 --> 00:16:04,959
determined by your retention

00:16:03,519 --> 00:16:07,040
requirements

00:16:04,959 --> 00:16:09,279
since the bucket requires versioning

00:16:07,040 --> 00:16:10,560
enabled the results will have a version

00:16:09,279 --> 00:16:12,000
id for the blob

00:16:10,560 --> 00:16:13,440
it's important to save the version id

00:16:12,000 --> 00:16:16,399
since you'll need to query for this

00:16:13,440 --> 00:16:16,399
version of the object

00:16:16,560 --> 00:16:20,160
if you don't specify a version id when

00:16:18,240 --> 00:16:22,079
querying a blob the latest version of

00:16:20,160 --> 00:16:23,920
the blob will be returned

00:16:22,079 --> 00:16:26,160
this works well for the simpler backup

00:16:23,920 --> 00:16:28,880
schemes but is not sufficient for

00:16:26,160 --> 00:16:30,480
the immutable backup use cases blobs may

00:16:28,880 --> 00:16:32,480
be overwritten accidentally or by

00:16:30,480 --> 00:16:35,120
attackers and therefore blindly

00:16:32,480 --> 00:16:36,480
using the latest version is unsafe for

00:16:35,120 --> 00:16:38,560
this reason you'll need to track

00:16:36,480 --> 00:16:41,120
all the versions of all the blobs for

00:16:38,560 --> 00:16:41,120
your backup

00:16:41,680 --> 00:16:45,759
in addition to being cost effective

00:16:43,759 --> 00:16:47,120
deleting backups may be required for

00:16:45,759 --> 00:16:49,920
legal reasons

00:16:47,120 --> 00:16:51,040
deleting blobs associated with a backup

00:16:49,920 --> 00:16:53,279
in a version bucket

00:16:51,040 --> 00:16:54,720
requires deleting a specific version of

00:16:53,279 --> 00:16:56,959
the object

00:16:54,720 --> 00:16:58,720
if the blob is currently object blocked

00:16:56,959 --> 00:17:00,880
then the delete will fail

00:16:58,720 --> 00:17:02,079
for immutable backups it's best to

00:17:00,880 --> 00:17:04,559
always specify

00:17:02,079 --> 00:17:05,600
the version when deleting the blobs if

00:17:04,559 --> 00:17:07,520
not specified

00:17:05,600 --> 00:17:08,880
then the latest version will be will be

00:17:07,520 --> 00:17:10,240
set to deletion marker

00:17:08,880 --> 00:17:13,360
but older versions of the blog will

00:17:10,240 --> 00:17:13,360
still continue to exist

00:17:14,959 --> 00:17:18,400
you may not know up front how long you'd

00:17:16,959 --> 00:17:20,079
like to retain a blob

00:17:18,400 --> 00:17:22,640
and a blob's original retention window

00:17:20,079 --> 00:17:24,959
may not cover the lifetime of the backup

00:17:22,640 --> 00:17:27,039
this is especially common occurrence

00:17:24,959 --> 00:17:27,679
with the duplicated products where blob

00:17:27,039 --> 00:17:30,720
may be

00:17:27,679 --> 00:17:32,799
referred to by multiple backups

00:17:30,720 --> 00:17:35,520
to handle these situations you'll need

00:17:32,799 --> 00:17:37,760
to extend the retention period of blogs

00:17:35,520 --> 00:17:41,120
using the put object retention api to

00:17:37,760 --> 00:17:43,120
reset an object's retention settings

00:17:41,120 --> 00:17:44,160
since this will create a new version of

00:17:43,120 --> 00:17:45,600
the object

00:17:44,160 --> 00:17:48,240
you will now need to track the latest

00:17:45,600 --> 00:17:50,880
version id the previous version will

00:17:48,240 --> 00:17:50,880
still exist

00:17:53,520 --> 00:17:56,720
hopefully you'll now understand what

00:17:54,880 --> 00:17:59,200
immutable backups are and why

00:17:56,720 --> 00:18:01,120
you may need them the apis provided by

00:17:59,200 --> 00:18:02,720
s3 make it easy to implement simple

00:18:01,120 --> 00:18:04,799
backup schemes and make it possible to

00:18:02,720 --> 00:18:06,160
build more advanced schemes as well

00:18:04,799 --> 00:18:07,919
whether you're interested in building

00:18:06,160 --> 00:18:10,000
mobile backups yourself

00:18:07,919 --> 00:18:11,679
or would like to take something from off

00:18:10,000 --> 00:18:13,600
the shelf we'd love to hear from you

00:18:11,679 --> 00:18:15,679
and understand how immutable backups can

00:18:13,600 --> 00:18:17,280
fit into your data correction strategy

00:18:15,679 --> 00:18:29,840
and with that we'd love to take your

00:18:17,280 --> 00:18:29,840

YouTube URL: https://www.youtube.com/watch?v=S_A-xHBT13g


