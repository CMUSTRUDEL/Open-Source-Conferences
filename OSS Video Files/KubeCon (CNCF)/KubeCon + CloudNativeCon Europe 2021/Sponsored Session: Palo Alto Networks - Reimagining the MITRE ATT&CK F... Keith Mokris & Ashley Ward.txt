Title: Sponsored Session: Palo Alto Networks - Reimagining the MITRE ATT&CK F... Keith Mokris & Ashley Ward
Publication date: 2021-05-09
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Sponsored Session: Palo Alto Networks - Reimagining the MITRE ATT&CK Framework for Cloud Native Applications - Keith Mokris & Ashley Ward

Sharing of Personal Information with Sponsors In order to facilitate networking and business relationships at the event, you may choose to visit a third partyʼs virtual booth or to access sponsored content. You are never required to visit third party booths or to access sponsored content. When visiting a booth (e.g. by clicking on a third partyʼs logo in the Solutions Showcase or exhibitor directory, and any actions within the booth thereafter including viewing resources), when accessing sponsored sessions in the Sponsor Theater, or by participating in sponsored activities, the third party will receive some of your registration data. This data includes your first name, last name, title, company, address, email, standard demographics questions (i.e. job function, industry), and details about the sponsored content or resources you interacted with. If you choose to interact with a virtual booth or access sponsored content, you are explicitly consenting to receipt and use of such data by the third-party recipients, which will be subject to their own privacy policies.

This is an on-demand session and will be available for the duration of the event.

Today, enterprises use a combination of virtual machines, containers and Kubernetes, and platform as a service (PaaS) offerings to power their cloud native applications. While customers love and trust MITRE ATT&CK® to measure the effectiveness of their security operations and identify areas of improvements, they are now looking to extend this framework to their portfolio of cloud native applications. In this 15-minute demo session, Prisma Cloud will unveil industry's first comprehensive cloud native threat matrix. Watch a Prisma® Cloud expert walk you through the new interactive dashboard that references the ATT&CK Framework™ to 12 distinct categories for audits and events.
Captions: 
	00:00:00,080 --> 00:00:03,280
hello cubecon eu we're really excited to

00:00:02,480 --> 00:00:05,359
be here today

00:00:03,280 --> 00:00:06,319
representing prismacloud and palo alto

00:00:05,359 --> 00:00:08,240
networks

00:00:06,319 --> 00:00:10,400
reimagining the attack framework for

00:00:08,240 --> 00:00:12,320
cloud native applications

00:00:10,400 --> 00:00:14,000
my name is keith mokris i lead product

00:00:12,320 --> 00:00:16,080
marketing for prismacloud

00:00:14,000 --> 00:00:17,199
and i'm really excited to introduce my

00:00:16,080 --> 00:00:20,560
guest presenter

00:00:17,199 --> 00:00:22,320
ashley ward field cto for prismacloud

00:00:20,560 --> 00:00:24,080
for two years at palo alto networks

00:00:22,320 --> 00:00:25,039
ashley ward has worked with customers

00:00:24,080 --> 00:00:27,439
around the globe

00:00:25,039 --> 00:00:29,439
move to the cloud securely and protect

00:00:27,439 --> 00:00:30,880
their hosts containers and serverless

00:00:29,439 --> 00:00:32,719
applications

00:00:30,880 --> 00:00:34,320
before he joined palo alto networks

00:00:32,719 --> 00:00:36,559
through the twistlock acquisition

00:00:34,320 --> 00:00:38,480
he was at twistlock over two years

00:00:36,559 --> 00:00:38,960
working in the field with customers

00:00:38,480 --> 00:00:42,160
across

00:00:38,960 --> 00:00:44,079
emea before that he was at aegon helping

00:00:42,160 --> 00:00:44,559
them securely move to the cloud and

00:00:44,079 --> 00:00:46,800
leverage

00:00:44,559 --> 00:00:47,680
microservices architectures on red hat

00:00:46,800 --> 00:00:49,280
openshift

00:00:47,680 --> 00:00:51,360
and i'm thrilled to have him leading the

00:00:49,280 --> 00:00:53,440
demo portion of today's presentation

00:00:51,360 --> 00:00:56,079
ashley thanks for being here keith

00:00:53,440 --> 00:00:58,239
thanks for having me

00:00:56,079 --> 00:01:00,000
we're really excited to talk about the

00:00:58,239 --> 00:01:01,199
new capabilities that we've released as

00:01:00,000 --> 00:01:03,760
part of prismacloud

00:01:01,199 --> 00:01:05,280
focused on attack for cloud native

00:01:03,760 --> 00:01:07,439
applications

00:01:05,280 --> 00:01:10,159
and as we dive in we really want to

00:01:07,439 --> 00:01:12,320
identify the fact that cloud security

00:01:10,159 --> 00:01:15,040
across diverse tech stacks is really

00:01:12,320 --> 00:01:17,840
challenging for a lot of organizations

00:01:15,040 --> 00:01:19,360
and this is a very simple way to look at

00:01:17,840 --> 00:01:20,720
you know a modern cloud-native

00:01:19,360 --> 00:01:22,560
architecture

00:01:20,720 --> 00:01:23,840
certainly you have the public cloud

00:01:22,560 --> 00:01:26,320
infrastructure

00:01:23,840 --> 00:01:28,320
that prismacloud secures that you can

00:01:26,320 --> 00:01:29,840
use anywhere around the world

00:01:28,320 --> 00:01:31,840
and then in the middle you have all of

00:01:29,840 --> 00:01:32,560
the specific tech stacks or compute

00:01:31,840 --> 00:01:34,240
layers

00:01:32,560 --> 00:01:35,680
that or certainly everyone here at

00:01:34,240 --> 00:01:38,159
kubecon would be you know

00:01:35,680 --> 00:01:40,320
well aware of so you have your virtual

00:01:38,159 --> 00:01:41,200
machines your containers and kubernetes

00:01:40,320 --> 00:01:43,840
stacks

00:01:41,200 --> 00:01:45,520
your pas stacks or serverless functions

00:01:43,840 --> 00:01:46,320
all that you not only need to protect at

00:01:45,520 --> 00:01:48,240
runtime

00:01:46,320 --> 00:01:50,159
but also address vulnerabilities and

00:01:48,240 --> 00:01:51,759
compliance concerns

00:01:50,159 --> 00:01:54,640
and then certainly you have all of the

00:01:51,759 --> 00:01:57,759
public cloud or cloud native services

00:01:54,640 --> 00:01:59,439
that connect to these applications so

00:01:57,759 --> 00:02:02,960
you have the identity components

00:01:59,439 --> 00:02:04,320
automation storage networking components

00:02:02,960 --> 00:02:06,479
and this is really important to make

00:02:04,320 --> 00:02:08,879
sure that they're configured properly

00:02:06,479 --> 00:02:09,840
and secure as all of these things really

00:02:08,879 --> 00:02:13,680
come together

00:02:09,840 --> 00:02:15,440
to form your cloud security posture

00:02:13,680 --> 00:02:17,040
and then when we look at the new feature

00:02:15,440 --> 00:02:18,319
that we're really excited to talk about

00:02:17,040 --> 00:02:20,560
in today's demo

00:02:18,319 --> 00:02:22,400
we're looking at um attack for cloud

00:02:20,560 --> 00:02:23,840
native applications

00:02:22,400 --> 00:02:25,599
and a lot of you know users in the

00:02:23,840 --> 00:02:27,040
audience are certainly aware of mitre

00:02:25,599 --> 00:02:28,720
and their incredible research and

00:02:27,040 --> 00:02:31,599
guidance when it comes to

00:02:28,720 --> 00:02:33,360
endpoint protection and xdr or

00:02:31,599 --> 00:02:35,040
protecting the public cloud and other

00:02:33,360 --> 00:02:37,360
important resources

00:02:35,040 --> 00:02:39,599
and one of the things that we've done is

00:02:37,360 --> 00:02:41,120
focused on bringing attack in this new

00:02:39,599 --> 00:02:44,400
dashboard that we call attack

00:02:41,120 --> 00:02:46,640
explorer focusing on hosts containers

00:02:44,400 --> 00:02:47,519
kubernetes orchestration and serverless

00:02:46,640 --> 00:02:50,720
functions

00:02:47,519 --> 00:02:52,879
to help organizations understand any

00:02:50,720 --> 00:02:54,400
incident or audit information

00:02:52,879 --> 00:02:56,080
so they can you know essentially get

00:02:54,400 --> 00:02:57,200
guidance on how they can remediate these

00:02:56,080 --> 00:02:59,280
issues

00:02:57,200 --> 00:03:00,560
so what ashley's gonna walk through is

00:02:59,280 --> 00:03:02,840
our dashboard to help

00:03:00,560 --> 00:03:04,400
organizations understand audits and

00:03:02,840 --> 00:03:06,480
attacks how we

00:03:04,400 --> 00:03:08,560
leverage and gather all of this data

00:03:06,480 --> 00:03:09,760
across any of your different application

00:03:08,560 --> 00:03:11,440
architectures

00:03:09,760 --> 00:03:13,200
and how we've mapped all of these

00:03:11,440 --> 00:03:14,959
different responses across the 12

00:03:13,200 --> 00:03:16,640
distinct categories that you'll see in

00:03:14,959 --> 00:03:18,319
attack explorer

00:03:16,640 --> 00:03:20,480
and then ultimately one of the very cool

00:03:18,319 --> 00:03:22,560
things that we can do with prismacloud

00:03:20,480 --> 00:03:24,799
is look at audit events and look at

00:03:22,560 --> 00:03:27,120
essentially time of detection

00:03:24,799 --> 00:03:30,000
and gain deeper details whether it's

00:03:27,120 --> 00:03:31,599
audit information or forensic event data

00:03:30,000 --> 00:03:33,920
you know so you can essentially

00:03:31,599 --> 00:03:35,599
understand any compromise or incidents

00:03:33,920 --> 00:03:36,959
that may be impacting your cloud

00:03:35,599 --> 00:03:38,799
infrastructure

00:03:36,959 --> 00:03:40,319
and without further ado this really sets

00:03:38,799 --> 00:03:41,040
the stage to hand the ball over to

00:03:40,319 --> 00:03:42,400
ashley

00:03:41,040 --> 00:03:44,480
to guide you through these incredible

00:03:42,400 --> 00:03:46,959
features

00:03:44,480 --> 00:03:47,519
thanks very much keith um let me get my

00:03:46,959 --> 00:03:51,440
screen

00:03:47,519 --> 00:03:55,040
shared out and uh pick the right

00:03:51,440 --> 00:03:57,920
uh screen share which has all gone

00:03:55,040 --> 00:03:57,920
missing there we go

00:03:58,400 --> 00:04:04,319
so you hopefully my screen's coming

00:04:01,760 --> 00:04:06,400
through okay as keith was pointing out

00:04:04,319 --> 00:04:06,799
we have taken that attack framework and

00:04:06,400 --> 00:04:09,439
we've

00:04:06,799 --> 00:04:10,000
presented it as this attack explorer and

00:04:09,439 --> 00:04:11,439
really

00:04:10,000 --> 00:04:13,040
the whole thing about this is being able

00:04:11,439 --> 00:04:13,599
to visualize i mean that you can

00:04:13,040 --> 00:04:15,280
actually

00:04:13,599 --> 00:04:16,720
action all that information that can be

00:04:15,280 --> 00:04:18,160
coming through so here

00:04:16,720 --> 00:04:19,359
everything's separated out we could have

00:04:18,160 --> 00:04:20,959
been getting all this as audit

00:04:19,359 --> 00:04:23,280
information but let's pick on one

00:04:20,959 --> 00:04:25,040
we've got here obfuscated files so a

00:04:23,280 --> 00:04:26,560
nice simple click there brings up my

00:04:25,040 --> 00:04:28,000
next menu to say right

00:04:26,560 --> 00:04:29,759
what is it we're actually looking at

00:04:28,000 --> 00:04:31,440
here and i've got

00:04:29,759 --> 00:04:33,759
that actual event that happened we've

00:04:31,440 --> 00:04:36,240
got an audit event here a rather nice

00:04:33,759 --> 00:04:37,120
file in my demo environment called slash

00:04:36,240 --> 00:04:39,040
evil

00:04:37,120 --> 00:04:41,360
has appeared here and but what we're

00:04:39,040 --> 00:04:43,840
doing is if you look at that information

00:04:41,360 --> 00:04:44,560
it can be overwhelming and so you can

00:04:43,840 --> 00:04:46,479
get all this

00:04:44,560 --> 00:04:48,400
as logging information but to actually

00:04:46,479 --> 00:04:51,520
have it tied back to say okay

00:04:48,400 --> 00:04:52,000
this particular event is triggered this

00:04:51,520 --> 00:04:54,560
is what's

00:04:52,000 --> 00:04:56,240
shown as the obfuscated files and we've

00:04:54,560 --> 00:04:59,280
got all that container information

00:04:56,240 --> 00:05:01,600
and more that we can pick up on

00:04:59,280 --> 00:05:03,199
but using the exact same window that

00:05:01,600 --> 00:05:03,840
i've got here i can then drill further

00:05:03,199 --> 00:05:05,360
into saying

00:05:03,840 --> 00:05:06,880
i know that a rule was triggered but

00:05:05,360 --> 00:05:09,120
what does that actually mean

00:05:06,880 --> 00:05:10,000
so i can look at the forensic data that

00:05:09,120 --> 00:05:12,240
we have for this

00:05:10,000 --> 00:05:13,039
now this is for a particular running

00:05:12,240 --> 00:05:14,720
container

00:05:13,039 --> 00:05:16,720
we can see the container started we've

00:05:14,720 --> 00:05:18,000
got all that information about it

00:05:16,720 --> 00:05:20,080
and we can see that we've got some

00:05:18,000 --> 00:05:20,400
behavioral learning that takes place and

00:05:20,080 --> 00:05:22,639
i'll

00:05:20,400 --> 00:05:23,680
i'll dive into that in a second but

00:05:22,639 --> 00:05:25,199
we've then also seen

00:05:23,680 --> 00:05:27,600
more activity that's happened we've had

00:05:25,199 --> 00:05:30,160
a an incident has been raised there's a

00:05:27,600 --> 00:05:32,800
suspicious binary here we see the binary

00:05:30,160 --> 00:05:37,039
being created and we can see

00:05:32,800 --> 00:05:38,639
that detail there that appeared again

00:05:37,039 --> 00:05:39,919
now all of that is then you know we

00:05:38,639 --> 00:05:41,280
could have triggered this and sent this

00:05:39,919 --> 00:05:42,160
out to logs we could have automated

00:05:41,280 --> 00:05:44,240
process

00:05:42,160 --> 00:05:45,759
based on this event happening but this

00:05:44,240 --> 00:05:48,000
is us looking to say okay well

00:05:45,759 --> 00:05:49,440
we had this happen we've got the

00:05:48,000 --> 00:05:51,680
forensics for it

00:05:49,440 --> 00:05:53,039
we can see the effect that was generated

00:05:51,680 --> 00:05:55,360
so in this case

00:05:53,039 --> 00:05:56,560
prismacloud was set to only alert on

00:05:55,360 --> 00:05:58,160
this because of course

00:05:56,560 --> 00:05:59,680
it could have been blocking that event

00:05:58,160 --> 00:06:01,520
from happening

00:05:59,680 --> 00:06:03,199
and we can even see the rule that's

00:06:01,520 --> 00:06:05,360
there and again i'll go into that

00:06:03,199 --> 00:06:06,639
in slightly more detail in a second now

00:06:05,360 --> 00:06:08,880
when we talk about that

00:06:06,639 --> 00:06:10,720
run time we're not just saying okay

00:06:08,880 --> 00:06:13,039
let's write a rule that says

00:06:10,720 --> 00:06:13,919
if something called slash evil gets

00:06:13,039 --> 00:06:17,120
created

00:06:13,919 --> 00:06:17,919
then take some activity but instead this

00:06:17,120 --> 00:06:20,479
is all that

00:06:17,919 --> 00:06:21,440
automated learning that takes place so

00:06:20,479 --> 00:06:24,400
examining what

00:06:21,440 --> 00:06:25,360
normal is across and we can see here the

00:06:24,400 --> 00:06:27,039
processes

00:06:25,360 --> 00:06:29,199
what are the things that we've learned

00:06:27,039 --> 00:06:31,600
and in this demo here we can see

00:06:29,199 --> 00:06:32,479
we've learned that it should just run

00:06:31,600 --> 00:06:35,039
tail

00:06:32,479 --> 00:06:36,720
and nothing else and so when something

00:06:35,039 --> 00:06:39,759
deviates from that normal

00:06:36,720 --> 00:06:40,240
from the processes the networking or

00:06:39,759 --> 00:06:42,479
even

00:06:40,240 --> 00:06:43,600
to the file system if we had any file

00:06:42,479 --> 00:06:46,639
system activity

00:06:43,600 --> 00:06:48,400
to say what's normal then we can build

00:06:46,639 --> 00:06:50,400
up that runtime model

00:06:48,400 --> 00:06:52,639
and generate those alerts now this is

00:06:50,400 --> 00:06:54,720
all about making it easy to consume

00:06:52,639 --> 00:06:56,319
going back to what keith said you're

00:06:54,720 --> 00:06:58,080
going to be focusing on

00:06:56,319 --> 00:06:59,759
all your different cloud accounts and

00:06:58,080 --> 00:07:01,199
you're not just focusing on them from a

00:06:59,759 --> 00:07:05,199
security point of view

00:07:01,199 --> 00:07:05,199
you're focusing on them

00:07:07,039 --> 00:07:11,039
what so this is where we come in at the

00:07:09,680 --> 00:07:13,280
raison d'etre

00:07:11,039 --> 00:07:14,560
of what we do which is about saying we

00:07:13,280 --> 00:07:16,639
will secure across

00:07:14,560 --> 00:07:18,400
all those different things that you're

00:07:16,639 --> 00:07:21,039
running so back here

00:07:18,400 --> 00:07:22,000
back to this we didn't need to create a

00:07:21,039 --> 00:07:24,560
rule to say

00:07:22,000 --> 00:07:25,280
suspicious elf header found we didn't

00:07:24,560 --> 00:07:28,240
need to say

00:07:25,280 --> 00:07:28,840
if the file evo gets created we did all

00:07:28,240 --> 00:07:31,360
this

00:07:28,840 --> 00:07:33,520
automatically now we can of course

00:07:31,360 --> 00:07:35,520
override these we can see here

00:07:33,520 --> 00:07:37,520
that from this alert we've got the

00:07:35,520 --> 00:07:40,160
actual rule that was triggered

00:07:37,520 --> 00:07:41,199
and impacted so we could dive into that

00:07:40,160 --> 00:07:43,440
rule to say

00:07:41,199 --> 00:07:45,520
well actually we'll modify the rule

00:07:43,440 --> 00:07:47,840
because in our environment

00:07:45,520 --> 00:07:48,560
although we didn't behaviorally learn

00:07:47,840 --> 00:07:51,360
that slash

00:07:48,560 --> 00:07:52,000
evil gets created we always want that to

00:07:51,360 --> 00:07:54,400
happen

00:07:52,000 --> 00:07:55,440
maybe a very silly example there but you

00:07:54,400 --> 00:07:57,840
can see how we can

00:07:55,440 --> 00:08:00,080
immediately drill in to whitelist

00:07:57,840 --> 00:08:00,720
blacklist we can do that learning we can

00:08:00,080 --> 00:08:03,840
change

00:08:00,720 --> 00:08:06,479
as required and so going back to that

00:08:03,840 --> 00:08:09,039
learning we can even from here just say

00:08:06,479 --> 00:08:10,319
well let's just extend that learning we

00:08:09,039 --> 00:08:13,520
can go to that and say

00:08:10,319 --> 00:08:14,479
we did learn this we didn't fully test

00:08:13,520 --> 00:08:16,240
our application

00:08:14,479 --> 00:08:17,919
and so now let's click into that

00:08:16,240 --> 00:08:20,479
learning and go further

00:08:17,919 --> 00:08:22,800
so coming out of this and back out to

00:08:20,479 --> 00:08:25,199
that explorer and this feature

00:08:22,800 --> 00:08:26,479
we're taking all of that work that we

00:08:25,199 --> 00:08:29,039
already do

00:08:26,479 --> 00:08:31,360
as a as a product so looking at the

00:08:29,039 --> 00:08:32,000
kubernetes audit events that are coming

00:08:31,360 --> 00:08:33,279
in

00:08:32,000 --> 00:08:35,279
looking at the different things that

00:08:33,279 --> 00:08:38,560
might be happening and pulling them

00:08:35,279 --> 00:08:39,599
up into the right categorization as per

00:08:38,560 --> 00:08:42,320
the framework

00:08:39,599 --> 00:08:43,279
here another example just clicking there

00:08:42,320 --> 00:08:46,080
we can see that

00:08:43,279 --> 00:08:48,480
actually we've got cubecuttle or cubectl

00:08:46,080 --> 00:08:50,959
has been downloaded into a container

00:08:48,480 --> 00:08:53,040
we didn't need to write those rules but

00:08:50,959 --> 00:08:53,440
even if we did write a custom rule for

00:08:53,040 --> 00:08:56,000
this

00:08:53,440 --> 00:08:58,959
we have it we have it appearing here so

00:08:56,000 --> 00:09:01,440
it's easy for a security person to see

00:08:58,959 --> 00:09:02,399
it's easy for a devops team to see so

00:09:01,440 --> 00:09:04,880
using that

00:09:02,399 --> 00:09:06,560
role-based access control to then get

00:09:04,880 --> 00:09:09,839
the correct visibility

00:09:06,560 --> 00:09:12,480
we can see why this would be bad i might

00:09:09,839 --> 00:09:14,080
in my devops days maybe have thought

00:09:12,480 --> 00:09:16,800
exactly into a container

00:09:14,080 --> 00:09:17,519
was a good idea but actually of course

00:09:16,800 --> 00:09:20,399
it's not

00:09:17,519 --> 00:09:21,680
so diving into yet another example in

00:09:20,399 --> 00:09:24,720
that explorer i

00:09:21,680 --> 00:09:26,399
very quickly just drilled down into what

00:09:24,720 --> 00:09:29,279
was the actual event

00:09:26,399 --> 00:09:31,200
and with this blob of the event i could

00:09:29,279 --> 00:09:33,680
if i wanted to

00:09:31,200 --> 00:09:35,040
then use our custom resource and custom

00:09:33,680 --> 00:09:37,600
query language to be able to say

00:09:35,040 --> 00:09:38,959
alert generate me a letter on this if

00:09:37,600 --> 00:09:41,920
there's a problem

00:09:38,959 --> 00:09:42,720
and so these are just a glimpse into a

00:09:41,920 --> 00:09:45,600
single

00:09:42,720 --> 00:09:47,279
little feature and as keith said you

00:09:45,600 --> 00:09:49,200
know in that beautiful picture

00:09:47,279 --> 00:09:51,519
you're worrying about your cloud service

00:09:49,200 --> 00:09:53,279
providing account you want to look at

00:09:51,519 --> 00:09:54,800
all those different things you might be

00:09:53,279 --> 00:09:55,680
running and all those different

00:09:54,800 --> 00:09:57,920
environments

00:09:55,680 --> 00:10:00,320
and that's the value add for a team as

00:09:57,920 --> 00:10:03,519
opposed to trying to learn and write

00:10:00,320 --> 00:10:07,519
is this normal behavior for my container

00:10:03,519 --> 00:10:11,120
within the miter framework

00:10:07,519 --> 00:10:13,440
it's all done for you so that

00:10:11,120 --> 00:10:15,279
listen thank you very much everybody for

00:10:13,440 --> 00:10:16,959
listening to me thanks keith

00:10:15,279 --> 00:10:18,720
for uh for what a great little bit of

00:10:16,959 --> 00:10:20,000
slides which i am going to find and

00:10:18,720 --> 00:10:21,920
steal and reuse

00:10:20,000 --> 00:10:23,120
and please everyone do swing by our

00:10:21,920 --> 00:10:25,760
booth for more information

00:10:23,120 --> 00:10:26,160
or visit palo alto networks calm and at

00:10:25,760 --> 00:10:28,240
that

00:10:26,160 --> 00:10:31,040
enjoy the rest of kubecon thank you very

00:10:28,240 --> 00:10:31,040

YouTube URL: https://www.youtube.com/watch?v=gV_j04Gc7eg


