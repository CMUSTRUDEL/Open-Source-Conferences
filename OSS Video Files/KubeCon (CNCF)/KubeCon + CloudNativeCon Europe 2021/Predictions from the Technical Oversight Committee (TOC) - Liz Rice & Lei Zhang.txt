Title: Predictions from the Technical Oversight Committee (TOC) - Liz Rice & Lei Zhang
Publication date: 2021-05-13
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Predictions from the Technical Oversight Committee (TOC) - Liz Rice, Chief Open Source Officer, Isovalent & Chair, Technical Oversight Committee & Lei Zhang, Staff Engineer, Alibaba Cloud & Member, Technical Oversight Committee
Captions: 
	00:00:00,220 --> 00:00:10,240
[Music]

00:00:09,760 --> 00:00:12,719
hi

00:00:10,240 --> 00:00:16,480
my name's liz rice and i'm the chair of

00:00:12,719 --> 00:00:19,520
the cncf's technical oversight committee

00:00:16,480 --> 00:00:21,199
at the last kubecon back in november i

00:00:19,520 --> 00:00:23,199
made some predictions

00:00:21,199 --> 00:00:24,320
and i thought today we could check in on

00:00:23,199 --> 00:00:26,640
those predictions

00:00:24,320 --> 00:00:28,240
and see how the technical landscape is

00:00:26,640 --> 00:00:30,640
evolving

00:00:28,240 --> 00:00:31,439
and i'll be joined by my toc colleague

00:00:30,640 --> 00:00:33,280
harry

00:00:31,439 --> 00:00:34,480
who will give us a deep dive into the

00:00:33,280 --> 00:00:38,559
trends we're seeing

00:00:34,480 --> 00:00:41,280
in cloud native developer experience

00:00:38,559 --> 00:00:42,960
for those of you who are new to the cncf

00:00:41,280 --> 00:00:44,719
let me just briefly explain

00:00:42,960 --> 00:00:46,000
what the technical oversight committee

00:00:44,719 --> 00:00:48,000
is

00:00:46,000 --> 00:00:49,039
we're a group of technical experts

00:00:48,000 --> 00:00:51,199
elected by

00:00:49,039 --> 00:00:53,039
the governing board end users and

00:00:51,199 --> 00:00:54,879
project maintainers

00:00:53,039 --> 00:00:56,239
and we set the technical direction of

00:00:54,879 --> 00:00:58,320
the foundation

00:00:56,239 --> 00:00:59,280
you can find out more about our role and

00:00:58,320 --> 00:01:02,640
our activities

00:00:59,280 --> 00:01:05,519
on the cncf website

00:01:02,640 --> 00:01:07,360
to help us in our mission the toc works

00:01:05,519 --> 00:01:09,520
with groups of experts from

00:01:07,360 --> 00:01:12,479
across the community in different

00:01:09,520 --> 00:01:14,880
domains within cloud native

00:01:12,479 --> 00:01:17,040
these groups have up until now been

00:01:14,880 --> 00:01:20,240
called special interest groups

00:01:17,040 --> 00:01:22,799
or six but there have been groups called

00:01:20,240 --> 00:01:24,240
six within the kubernetes project for a

00:01:22,799 --> 00:01:25,920
long time

00:01:24,240 --> 00:01:27,439
and we've been finding a lot of

00:01:25,920 --> 00:01:30,799
confusion between

00:01:27,439 --> 00:01:33,600
cnc f6 and kubernetes 6.

00:01:30,799 --> 00:01:35,360
so to remove this confusion starting

00:01:33,600 --> 00:01:38,240
from after this cubecon

00:01:35,360 --> 00:01:38,560
the cncf groups are going to be renamed

00:01:38,240 --> 00:01:42,479
to

00:01:38,560 --> 00:01:44,079
technical advisory groups or tags

00:01:42,479 --> 00:01:47,119
let's look at the different domains that

00:01:44,079 --> 00:01:50,240
these tags cover

00:01:47,119 --> 00:01:52,399
runtime is about running workloads

00:01:50,240 --> 00:01:54,560
ensuring the application code gets

00:01:52,399 --> 00:01:56,799
executed in the cloud

00:01:54,560 --> 00:01:58,640
this includes projects like kubernetes

00:01:56,799 --> 00:01:59,840
which handles the orchestration and

00:01:58,640 --> 00:02:02,079
scheduling

00:01:59,840 --> 00:02:03,360
as well as container runtime projects

00:02:02,079 --> 00:02:07,759
like container d

00:02:03,360 --> 00:02:10,399
and cryo cloud native applications

00:02:07,759 --> 00:02:14,319
often need to save and access data and

00:02:10,399 --> 00:02:16,720
that's covered by the storage tag

00:02:14,319 --> 00:02:18,160
security is about keeping workloads and

00:02:16,720 --> 00:02:20,800
data safe

00:02:18,160 --> 00:02:23,599
this tag looks after security specific

00:02:20,800 --> 00:02:26,800
projects like notary and falco

00:02:23,599 --> 00:02:27,840
but it also helps other projects across

00:02:26,800 --> 00:02:29,920
the cncf

00:02:27,840 --> 00:02:32,560
with recommendations for improving

00:02:29,920 --> 00:02:32,560
security

00:02:32,959 --> 00:02:37,440
the network tag covers projects that

00:02:35,360 --> 00:02:38,160
allow workloads and control plane

00:02:37,440 --> 00:02:41,519
entities

00:02:38,160 --> 00:02:43,840
to communicate with each other once you

00:02:41,519 --> 00:02:46,160
have applications running in the cloud

00:02:43,840 --> 00:02:47,760
you need to be able to see their status

00:02:46,160 --> 00:02:50,000
and troubleshoot issues

00:02:47,760 --> 00:02:52,239
and that's covered by the observability

00:02:50,000 --> 00:02:52,239
tag

00:02:52,640 --> 00:02:56,080
app delivery is about bridging the gap

00:02:55,360 --> 00:02:59,040
between

00:02:56,080 --> 00:03:01,040
a developer writing code at a keyboard

00:02:59,040 --> 00:03:01,680
and that code being packaged and

00:03:01,040 --> 00:03:03,760
delivered

00:03:01,680 --> 00:03:05,840
as an application that can be run in the

00:03:03,760 --> 00:03:05,840
cloud

00:03:06,239 --> 00:03:12,239
and then finally contributor strategy

00:03:09,280 --> 00:03:12,959
is a special case in that this tag isn't

00:03:12,239 --> 00:03:15,440
involved

00:03:12,959 --> 00:03:17,200
with the technology of projects but more

00:03:15,440 --> 00:03:20,319
about the way that projects

00:03:17,200 --> 00:03:21,120
run this tag helps projects run

00:03:20,319 --> 00:03:24,640
effectively

00:03:21,120 --> 00:03:24,640
and grow their contributor base

00:03:27,360 --> 00:03:30,879
setting aside contributor strategy we

00:03:29,599 --> 00:03:33,040
can look at how

00:03:30,879 --> 00:03:35,040
projects are distributed across these

00:03:33,040 --> 00:03:37,200
different technology areas covered by

00:03:35,040 --> 00:03:40,080
the tags

00:03:37,200 --> 00:03:40,400
if we look at the more mature projects

00:03:40,080 --> 00:03:43,360
in

00:03:40,400 --> 00:03:44,879
incubating and graduated status we can

00:03:43,360 --> 00:03:48,239
see they're distributed

00:03:44,879 --> 00:03:50,480
fairly evenly across these major areas

00:03:48,239 --> 00:03:52,159
the fact that all these areas have

00:03:50,480 --> 00:03:54,400
mature projects

00:03:52,159 --> 00:03:56,879
corresponds to the fact that there are

00:03:54,400 --> 00:03:59,280
thousands of end user organizations

00:03:56,879 --> 00:04:00,480
running cloud native applications in

00:03:59,280 --> 00:04:05,280
production

00:04:00,480 --> 00:04:06,799
every day but what about the future

00:04:05,280 --> 00:04:08,319
if we look at the distribution of

00:04:06,799 --> 00:04:11,439
sandbox projects

00:04:08,319 --> 00:04:13,200
we can see there is experimentation and

00:04:11,439 --> 00:04:16,320
innovation across the board

00:04:13,200 --> 00:04:21,519
but some areas have more activity

00:04:16,320 --> 00:04:21,519
in the form of more numbers of projects

00:04:21,759 --> 00:04:26,560
at the last coupon i mentioned we made

00:04:24,639 --> 00:04:28,639
those predictions

00:04:26,560 --> 00:04:32,639
about the areas that we think are going

00:04:28,639 --> 00:04:35,120
to be significant in 2021

00:04:32,639 --> 00:04:37,600
six months later let's see how those

00:04:35,120 --> 00:04:40,240
predictions are shaping up

00:04:37,600 --> 00:04:42,240
we talked about chaos engineering

00:04:40,240 --> 00:04:46,320
kubernetes for the edge

00:04:42,240 --> 00:04:49,680
service mesh web assembly and the ebpf

00:04:46,320 --> 00:04:51,759
and developer and operator experience

00:04:49,680 --> 00:04:52,960
now you'll find talks about every single

00:04:51,759 --> 00:04:55,840
one of those areas

00:04:52,960 --> 00:04:57,120
at this week's kubecon and there was a

00:04:55,840 --> 00:05:00,000
co-located event

00:04:57,120 --> 00:05:00,720
on almost all of these topics so they're

00:05:00,000 --> 00:05:02,240
clearly

00:05:00,720 --> 00:05:05,120
technologies and topics you're

00:05:02,240 --> 00:05:06,639
interested to discuss

00:05:05,120 --> 00:05:08,639
but are we really seeing these

00:05:06,639 --> 00:05:11,680
technologies manifesting

00:05:08,639 --> 00:05:14,880
in the form of cloud native projects

00:05:11,680 --> 00:05:17,759
let's take a look at how these

00:05:14,880 --> 00:05:20,400
technology areas map to projects in the

00:05:17,759 --> 00:05:20,400
sandbox

00:05:20,960 --> 00:05:26,880
so we've now got two sandbox projects in

00:05:24,000 --> 00:05:28,240
the realm of chaos engineering testing

00:05:26,880 --> 00:05:31,680
the resiliency of

00:05:28,240 --> 00:05:33,680
a system in the event of failure

00:05:31,680 --> 00:05:35,199
three projects are underway that relate

00:05:33,680 --> 00:05:38,800
to running kubernetes

00:05:35,199 --> 00:05:41,039
at the edge outside the data center

00:05:38,800 --> 00:05:42,880
four sandbox projects relate to service

00:05:41,039 --> 00:05:45,520
mesh

00:05:42,880 --> 00:05:46,479
we have one ebpf based project in the

00:05:45,520 --> 00:05:48,240
sandbox

00:05:46,479 --> 00:05:50,720
but it's worth noting that there are

00:05:48,240 --> 00:05:53,199
incubating and graduated projects

00:05:50,720 --> 00:05:54,160
now innovating with these technologies

00:05:53,199 --> 00:05:57,600
too

00:05:54,160 --> 00:05:59,840
we're also aware of a lot of webassembly

00:05:57,600 --> 00:06:03,280
runtime projects that have been speaking

00:05:59,840 --> 00:06:03,280
with the runtime tag

00:06:03,440 --> 00:06:07,440
but by far the area where we're seeing

00:06:05,600 --> 00:06:09,199
the most experimentation

00:06:07,440 --> 00:06:10,880
at least as measured by the number of

00:06:09,199 --> 00:06:14,160
sandbox projects

00:06:10,880 --> 00:06:16,400
is developer and operator experience

00:06:14,160 --> 00:06:17,520
making it easier for developers and

00:06:16,400 --> 00:06:19,199
operators

00:06:17,520 --> 00:06:22,240
to build and run cloud-native

00:06:19,199 --> 00:06:23,440
applications we've got 11 projects in

00:06:22,240 --> 00:06:26,560
the sandbox

00:06:23,440 --> 00:06:27,440
working in these areas so let me hand

00:06:26,560 --> 00:06:29,680
over to harry

00:06:27,440 --> 00:06:31,520
to explore some of the trends in these

00:06:29,680 --> 00:06:34,319
areas

00:06:31,520 --> 00:06:36,080
hi thank you leeds yes so i will

00:06:34,319 --> 00:06:37,520
continue to talk about the trend of

00:06:36,080 --> 00:06:40,240
clone native

00:06:37,520 --> 00:06:41,360
from application development and

00:06:40,240 --> 00:06:43,680
deployment

00:06:41,360 --> 00:06:44,880
yeah this is right that the new chain of

00:06:43,680 --> 00:06:46,880
clone native is

00:06:44,880 --> 00:06:49,199
trying to make sure that developing

00:06:46,880 --> 00:06:52,000
software be very easy

00:06:49,199 --> 00:06:54,160
authoritative stack and this is actually

00:06:52,000 --> 00:06:56,000
enabled by widely adapted pattern which

00:06:54,160 --> 00:06:58,000
is known as study card pattern

00:06:56,000 --> 00:06:59,520
on kubernetes it's really important

00:06:58,000 --> 00:07:01,919
because sidecar

00:06:59,520 --> 00:07:03,680
is essentially a small container that is

00:07:01,919 --> 00:07:04,560
running alongside of your application

00:07:03,680 --> 00:07:06,960
container

00:07:04,560 --> 00:07:07,919
so in that case it will handle all the

00:07:06,960 --> 00:07:10,400
inbound

00:07:07,919 --> 00:07:11,919
traffic of your application so in that

00:07:10,400 --> 00:07:13,120
case your application does not need to

00:07:11,919 --> 00:07:16,080
really care about

00:07:13,120 --> 00:07:17,680
how to handle this traffic it just focus

00:07:16,080 --> 00:07:20,160
on its bmx logic which

00:07:17,680 --> 00:07:21,039
is the most valuable for developers and

00:07:20,160 --> 00:07:23,360
on the other hand

00:07:21,039 --> 00:07:24,479
infrastructure such as kubernetes and

00:07:23,360 --> 00:07:26,800
platform engineers

00:07:24,479 --> 00:07:27,520
will use sales mesh and similar

00:07:26,800 --> 00:07:29,599
technology

00:07:27,520 --> 00:07:30,800
to handle the traffic part by leverage

00:07:29,599 --> 00:07:33,599
in a proxy system

00:07:30,800 --> 00:07:36,080
enabled by invoice in that case your

00:07:33,599 --> 00:07:36,720
application will be able to focus on its

00:07:36,080 --> 00:07:38,639
own thing

00:07:36,720 --> 00:07:39,919
and let infrastructure handle all the

00:07:38,639 --> 00:07:42,720
traffic management

00:07:39,919 --> 00:07:44,000
security and observability parts and

00:07:42,720 --> 00:07:46,319
what's more important

00:07:44,000 --> 00:07:47,840
with projects like dapper now you

00:07:46,319 --> 00:07:50,400
actually have another power

00:07:47,840 --> 00:07:51,440
to even to consume the cloud resources

00:07:50,400 --> 00:07:53,680
and services

00:07:51,440 --> 00:07:55,120
based on static car so in that case your

00:07:53,680 --> 00:07:57,840
application can just

00:07:55,120 --> 00:08:00,319
talk to localhost to consume a cloud

00:07:57,840 --> 00:08:02,400
resources for example already

00:08:00,319 --> 00:08:03,759
this also enables you to deploy

00:08:02,400 --> 00:08:06,240
applications to anywhere

00:08:03,759 --> 00:08:07,680
regardless where these cloud resources

00:08:06,240 --> 00:08:10,000
whether it's on aws

00:08:07,680 --> 00:08:13,039
or google cloud it doesn't matter it can

00:08:10,000 --> 00:08:16,080
even be a local maintenance radius

00:08:13,039 --> 00:08:17,440
instance because your application only

00:08:16,080 --> 00:08:19,680
talked with the local host

00:08:17,440 --> 00:08:20,720
and laid this study card to handle the

00:08:19,680 --> 00:08:22,639
rest of the

00:08:20,720 --> 00:08:24,319
resource consumption and will add the

00:08:22,639 --> 00:08:25,120
service binding by leveraging the depth

00:08:24,319 --> 00:08:26,960
runtime

00:08:25,120 --> 00:08:28,560
and this is new chain and this is really

00:08:26,960 --> 00:08:30,960
game changer we call that

00:08:28,560 --> 00:08:32,560
it is the local host oriented program

00:08:30,960 --> 00:08:34,159
because application now

00:08:32,560 --> 00:08:36,080
really need to care but really don't

00:08:34,159 --> 00:08:39,039
need to care about the dependencies

00:08:36,080 --> 00:08:40,000
the external resources just the focus on

00:08:39,039 --> 00:08:43,120
your application

00:08:40,000 --> 00:08:44,320
deployment and speaking of the

00:08:43,120 --> 00:08:46,000
application deployment

00:08:44,320 --> 00:08:48,560
it's actually another change that the

00:08:46,000 --> 00:08:50,160
cloud native is trying to make it easier

00:08:48,560 --> 00:08:52,240
because we already saw there are a lot

00:08:50,160 --> 00:08:54,000
of platforms tool that is trying to fix

00:08:52,240 --> 00:08:56,480
this problem because you know deploying

00:08:54,000 --> 00:08:57,920
deploying application is really really

00:08:56,480 --> 00:09:00,320
matters if you want to have

00:08:57,920 --> 00:09:01,360
a consistent way to maintain your

00:09:00,320 --> 00:09:03,600
software

00:09:01,360 --> 00:09:04,560
but if we also notice a trend is that

00:09:03,600 --> 00:09:06,720
these platform

00:09:04,560 --> 00:09:08,560
tools are not trying to create a new

00:09:06,720 --> 00:09:10,800
abstraction on top of kubernetes or

00:09:08,560 --> 00:09:12,480
trying to give you a restricted product

00:09:10,800 --> 00:09:14,080
i don't need to do that because the

00:09:12,480 --> 00:09:17,120
leverage in new technology

00:09:14,080 --> 00:09:19,120
which is so called the xs code

00:09:17,120 --> 00:09:21,279
since in these platforms the

00:09:19,120 --> 00:09:23,839
capabilities of the delivery system

00:09:21,279 --> 00:09:24,480
are defined as code domain specific

00:09:23,839 --> 00:09:27,200
language

00:09:24,480 --> 00:09:29,440
or hemp template so they are categorized

00:09:27,200 --> 00:09:31,200
as renewable component

00:09:29,440 --> 00:09:33,360
this actually enables developers to

00:09:31,200 --> 00:09:34,399
assemble them into application

00:09:33,360 --> 00:09:36,640
deployment

00:09:34,399 --> 00:09:39,040
and then deploy software to these to

00:09:36,640 --> 00:09:41,279
kubernetes or any kind of infrastructure

00:09:39,040 --> 00:09:42,240
and this confidence of deployment is

00:09:41,279 --> 00:09:44,800
then in turn

00:09:42,240 --> 00:09:46,640
maintained by github's workflow or by

00:09:44,800 --> 00:09:48,880
kubernetes controller itself

00:09:46,640 --> 00:09:50,160
this is really game changer because in

00:09:48,880 --> 00:09:52,240
that case

00:09:50,160 --> 00:09:53,680
no application deployment will never

00:09:52,240 --> 00:09:55,760
cause something like

00:09:53,680 --> 00:09:57,040
configuration drift which is normal

00:09:55,760 --> 00:09:58,480
which is normal issue

00:09:57,040 --> 00:10:00,240
in the transition instruction code

00:09:58,480 --> 00:10:01,680
system this will never happen in

00:10:00,240 --> 00:10:04,240
kubernetes

00:10:01,680 --> 00:10:04,880
and this essentially make your platform

00:10:04,240 --> 00:10:06,959
to work

00:10:04,880 --> 00:10:09,680
and grow with your application needs

00:10:06,959 --> 00:10:10,800
growth there will never be restrictions

00:10:09,680 --> 00:10:12,640
in capability there

00:10:10,800 --> 00:10:14,240
will never be restrictions in

00:10:12,640 --> 00:10:17,120
abstractions because everything

00:10:14,240 --> 00:10:18,480
today is programmable we see there are a

00:10:17,120 --> 00:10:19,760
lot of

00:10:18,480 --> 00:10:21,680
existing projects that are trying to

00:10:19,760 --> 00:10:23,279
make this happen for example kubernetes

00:10:21,680 --> 00:10:25,519
from alibaba

00:10:23,279 --> 00:10:27,680
cd kubernetes from aws and there are

00:10:25,519 --> 00:10:29,279
also more and more yet to come

00:10:27,680 --> 00:10:31,519
this is the world and the chain we're

00:10:29,279 --> 00:10:34,800
calling that programmable application

00:10:31,519 --> 00:10:36,640
deployment the speaking of deployment

00:10:34,800 --> 00:10:38,480
the developers are not just they want to

00:10:36,640 --> 00:10:39,120
deploy and that they actually want to

00:10:38,480 --> 00:10:41,120
deploy

00:10:39,120 --> 00:10:42,640
continuously that's why we have

00:10:41,120 --> 00:10:45,040
continuous development

00:10:42,640 --> 00:10:47,200
that's why we have continuous delivery

00:10:45,040 --> 00:10:50,240
in the cicd pipeline

00:10:47,200 --> 00:10:51,440
but in the clinical world cd pipeline is

00:10:50,240 --> 00:10:54,160
also been making

00:10:51,440 --> 00:10:55,839
more easier and more efficient and we

00:10:54,160 --> 00:10:56,320
call this collaborative city which are

00:10:55,839 --> 00:10:58,839
actually

00:10:56,320 --> 00:11:00,079
enabled by a pattern which name is

00:10:58,839 --> 00:11:02,560
githubs

00:11:00,079 --> 00:11:04,000
git ops is actually a natural extension

00:11:02,560 --> 00:11:07,279
of a kubernetes control loop

00:11:04,000 --> 00:11:09,600
because it gives a way to maintain the

00:11:07,279 --> 00:11:11,920
consistency between design status which

00:11:09,600 --> 00:11:15,839
you maintain in the github repo

00:11:11,920 --> 00:11:18,079
and the real world and the real world

00:11:15,839 --> 00:11:19,040
actual status which is running instances

00:11:18,079 --> 00:11:22,000
in your cluster

00:11:19,040 --> 00:11:23,760
and git and engage is a tool that you

00:11:22,000 --> 00:11:26,079
maintain this kind of workflow

00:11:23,760 --> 00:11:27,600
by just doing whatever you are familiar

00:11:26,079 --> 00:11:30,399
with like pull request

00:11:27,600 --> 00:11:31,120
and send out issues i commit the change

00:11:30,399 --> 00:11:33,839
this is

00:11:31,120 --> 00:11:36,079
all what happening by trigger a github's

00:11:33,839 --> 00:11:38,160
deploy workflow

00:11:36,079 --> 00:11:39,440
and githubs actually give you the way to

00:11:38,160 --> 00:11:42,000
have the consistency and

00:11:39,440 --> 00:11:44,880
accuracy in the automation of deployment

00:11:42,000 --> 00:11:46,560
so you can do it repeatedly repeatedly

00:11:44,880 --> 00:11:48,320
and you are viewing the tools which your

00:11:46,560 --> 00:11:50,480
developers are familiar with for

00:11:48,320 --> 00:11:52,160
for example git nothing needs to know

00:11:50,480 --> 00:11:54,079
need to learn

00:11:52,160 --> 00:11:55,279
and this also enables you to build

00:11:54,079 --> 00:11:57,120
highly extensible

00:11:55,279 --> 00:11:59,040
deployment workflow you don't need to

00:11:57,120 --> 00:12:01,040
have something like traditional

00:11:59,040 --> 00:12:03,040
pipelines to do that you can just use

00:12:01,040 --> 00:12:05,920
event driven to do this if you want

00:12:03,040 --> 00:12:07,200
because gate is actually a very common

00:12:05,920 --> 00:12:10,800
widely used

00:12:07,200 --> 00:12:13,839
event source and in this case you have

00:12:10,800 --> 00:12:15,760
much smaller um attack surface because

00:12:13,839 --> 00:12:17,519
your your application cluster for

00:12:15,760 --> 00:12:18,800
example kubernetes develop the poor

00:12:17,519 --> 00:12:20,480
model instead of push

00:12:18,800 --> 00:12:22,880
to make sure that everything will work

00:12:20,480 --> 00:12:24,639
in the in the target cluster

00:12:22,880 --> 00:12:26,959
this is github's this is how the cloud

00:12:24,639 --> 00:12:29,600
native trying to improve your developers

00:12:26,959 --> 00:12:30,800
to deploy and continuous deploy software

00:12:29,600 --> 00:12:33,680
with a consistent

00:12:30,800 --> 00:12:35,920
and with confident approach so you can

00:12:33,680 --> 00:12:37,120
see the chain inclinative is very easy

00:12:35,920 --> 00:12:38,880
to understand now

00:12:37,120 --> 00:12:40,320
in trying to make sure that deploy

00:12:38,880 --> 00:12:42,399
developing software

00:12:40,320 --> 00:12:43,440
deploy software and the continuous

00:12:42,399 --> 00:12:46,560
deploy software

00:12:43,440 --> 00:12:47,360
way easier with high efficiency and

00:12:46,560 --> 00:12:48,480
there are a lot

00:12:47,360 --> 00:12:50,399
there are a lot of projects that are

00:12:48,480 --> 00:12:52,880
trying to make that make this happen

00:12:50,399 --> 00:12:55,360
we see that argo cd from intuned we see

00:12:52,880 --> 00:12:57,600
there is already is flux cd from reworks

00:12:55,360 --> 00:12:59,279
we see there are a project named captain

00:12:57,600 --> 00:12:59,920
from die chains which can give you more

00:12:59,279 --> 00:13:02,959
power

00:12:59,920 --> 00:13:04,839
to do an observability and a use of

00:13:02,959 --> 00:13:06,079
availability matrix to drive your

00:13:04,839 --> 00:13:07,839
workloads

00:13:06,079 --> 00:13:09,279
this is nutrient of declinative we are

00:13:07,839 --> 00:13:11,600
talking about and

00:13:09,279 --> 00:13:14,399
i will then head over to liz to talk

00:13:11,600 --> 00:13:17,680
about the next step of cloud native

00:13:14,399 --> 00:13:19,200
okay thank you liz the common theme here

00:13:17,680 --> 00:13:21,680
is that a lot of

00:13:19,200 --> 00:13:22,800
innovation in cloud native today is

00:13:21,680 --> 00:13:26,240
centered around

00:13:22,800 --> 00:13:26,639
making things easier as harry has just

00:13:26,240 --> 00:13:28,480
shown

00:13:26,639 --> 00:13:30,480
there are trends towards making it

00:13:28,480 --> 00:13:32,160
easier to develop and deploy

00:13:30,480 --> 00:13:34,079
applications

00:13:32,160 --> 00:13:36,320
and across the broader cloud native

00:13:34,079 --> 00:13:37,760
landscape there are initiatives and

00:13:36,320 --> 00:13:40,880
projects underway

00:13:37,760 --> 00:13:41,360
making cloud native easier to secure to

00:13:40,880 --> 00:13:45,519
test

00:13:41,360 --> 00:13:48,639
and to debug let's talk about a few more

00:13:45,519 --> 00:13:50,800
trends that we're seeing

00:13:48,639 --> 00:13:52,240
quite a few of these new projects that

00:13:50,800 --> 00:13:54,320
make things easier

00:13:52,240 --> 00:13:57,040
are being brought to the foundation by

00:13:54,320 --> 00:14:00,839
end user organizations

00:13:57,040 --> 00:14:02,000
companies like spotify lyft or capital

00:14:00,839 --> 00:14:03,839
one

00:14:02,000 --> 00:14:05,040
projects they're bringing address

00:14:03,839 --> 00:14:07,519
problems that

00:14:05,040 --> 00:14:08,480
real users come across in real life

00:14:07,519 --> 00:14:12,480
situations

00:14:08,480 --> 00:14:12,480
as they adopt the cloud native approach

00:14:12,959 --> 00:14:16,079
another trend we're seeing is towards

00:14:14,959 --> 00:14:18,560
projects that make it

00:14:16,079 --> 00:14:20,079
easier to run cloud native applications

00:14:18,560 --> 00:14:23,600
anywhere

00:14:20,079 --> 00:14:25,760
hybrid cloud and multi-cloud are real

00:14:23,600 --> 00:14:27,680
public cloud vendors have embraced this

00:14:25,760 --> 00:14:28,399
and give you options for running

00:14:27,680 --> 00:14:30,959
workloads

00:14:28,399 --> 00:14:31,760
on-prem just as they do in the cloud

00:14:30,959 --> 00:14:34,160
making it an

00:14:31,760 --> 00:14:36,160
easier transition to the cloud or

00:14:34,160 --> 00:14:38,240
between clouds

00:14:36,160 --> 00:14:39,920
and we're also seeing projects that help

00:14:38,240 --> 00:14:42,639
manage your infrastructure

00:14:39,920 --> 00:14:44,160
whether it's bare metal or distributed

00:14:42,639 --> 00:14:45,600
across clouds

00:14:44,160 --> 00:14:47,680
and there are projects helping you

00:14:45,600 --> 00:14:50,240
manage security across these boundaries

00:14:47,680 --> 00:14:52,160
between clouds

00:14:50,240 --> 00:14:54,240
and of course as we've already noted

00:14:52,160 --> 00:14:57,279
kubernetes is running at the edge

00:14:54,240 --> 00:14:59,120
and for many new applications cloud

00:14:57,279 --> 00:15:01,440
native networking functions

00:14:59,120 --> 00:15:02,720
are an area of innovation in the world

00:15:01,440 --> 00:15:04,880
of telecoms

00:15:02,720 --> 00:15:06,120
where they have completely different

00:15:04,880 --> 00:15:09,440
requirements for

00:15:06,120 --> 00:15:12,079
characteristics like latency and jitter

00:15:09,440 --> 00:15:15,360
compared to handling web requests that

00:15:12,079 --> 00:15:15,360
many of us are familiar with

00:15:17,519 --> 00:15:22,000
another area that lends itself very

00:15:20,880 --> 00:15:26,160
naturally to

00:15:22,000 --> 00:15:28,639
running in the cloud is machine learning

00:15:26,160 --> 00:15:29,360
organizations are renting compute in the

00:15:28,639 --> 00:15:32,720
cloud

00:15:29,360 --> 00:15:33,440
to handle massive amounts of data and to

00:15:32,720 --> 00:15:36,399
train

00:15:33,440 --> 00:15:38,800
their machine learning models so it

00:15:36,399 --> 00:15:40,160
makes sense to leverage cloud native

00:15:38,800 --> 00:15:41,360
approaches for these kinds of

00:15:40,160 --> 00:15:44,079
applications

00:15:41,360 --> 00:15:44,880
and we expect to see more projects in

00:15:44,079 --> 00:15:48,079
this area

00:15:44,880 --> 00:15:48,079
coming to the cncf

00:15:48,639 --> 00:15:52,320
another theme that we're seeing is the

00:15:51,120 --> 00:15:56,079
emergence of

00:15:52,320 --> 00:15:59,279
what i'm calling project ecosystems

00:15:56,079 --> 00:16:02,959
i'm sure you're aware that not all cncf

00:15:59,279 --> 00:16:06,240
projects are alike some are massive

00:16:02,959 --> 00:16:08,399
like kubernetes and these

00:16:06,240 --> 00:16:09,920
large projects are starting to become

00:16:08,399 --> 00:16:13,199
the center of their own

00:16:09,920 --> 00:16:15,759
ecosystems of projects for example

00:16:13,199 --> 00:16:16,880
we have several projects in the sandbox

00:16:15,759 --> 00:16:19,600
working on

00:16:16,880 --> 00:16:21,680
custom resources and controllers that

00:16:19,600 --> 00:16:23,519
aren't part of core kubernetes

00:16:21,680 --> 00:16:26,000
but that could be very valuable in a

00:16:23,519 --> 00:16:29,440
variety of use cases

00:16:26,000 --> 00:16:31,759
these ecosystem projects only make sense

00:16:29,440 --> 00:16:33,279
in the presence of the larger central

00:16:31,759 --> 00:16:36,079
project

00:16:33,279 --> 00:16:37,120
and we'd like to find ways to help cncf

00:16:36,079 --> 00:16:39,360
participants

00:16:37,120 --> 00:16:42,880
navigate their way around these project

00:16:39,360 --> 00:16:42,880
ecosystems more easily

00:16:43,920 --> 00:16:48,639
cloud native is in a great place and the

00:16:46,880 --> 00:16:50,959
growth of our end user community

00:16:48,639 --> 00:16:52,399
goes to show that together we're

00:16:50,959 --> 00:16:54,800
building the technology

00:16:52,399 --> 00:16:56,480
that enables applications to run

00:16:54,800 --> 00:16:59,600
successfully in the cloud

00:16:56,480 --> 00:16:59,600
at any scale

00:17:00,000 --> 00:17:04,880
even though many of our projects are

00:17:01,680 --> 00:17:06,559
mature and in large scale production use

00:17:04,880 --> 00:17:10,240
there's still a lot of room for

00:17:06,559 --> 00:17:13,120
innovation in the world cloud native

00:17:10,240 --> 00:17:14,880
the cncf is centered on open source

00:17:13,120 --> 00:17:17,199
community projects

00:17:14,880 --> 00:17:19,360
but we want to see healthy business

00:17:17,199 --> 00:17:21,760
ecosystems around those projects

00:17:19,360 --> 00:17:24,720
with vendors large and small able to

00:17:21,760 --> 00:17:27,520
build successful businesses

00:17:24,720 --> 00:17:28,160
competition is healthy we see it between

00:17:27,520 --> 00:17:30,799
projects

00:17:28,160 --> 00:17:33,440
and between vendors and competition

00:17:30,799 --> 00:17:36,720
encourages innovation

00:17:33,440 --> 00:17:37,120
collaboration is even better we love to

00:17:36,720 --> 00:17:39,600
see

00:17:37,120 --> 00:17:41,120
competitors coming together to tackle a

00:17:39,600 --> 00:17:43,520
common problem

00:17:41,120 --> 00:17:44,840
and enabling that collaboration is why

00:17:43,520 --> 00:17:48,320
the cncf

00:17:44,840 --> 00:17:51,679
exists there's opportunity for all of us

00:17:48,320 --> 00:17:51,679
in the world of cloud native

00:17:51,760 --> 00:17:55,520

YouTube URL: https://www.youtube.com/watch?v=bVijUeXV_is


