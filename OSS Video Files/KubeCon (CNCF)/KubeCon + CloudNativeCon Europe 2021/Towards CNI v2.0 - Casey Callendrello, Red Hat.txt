Title: Towards CNI v2.0 - Casey Callendrello, Red Hat
Publication date: 2021-05-09
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Towards CNI v2.0 - Casey Callendrello, Red Hat

CNI v1.0 is out! In this talk, we'll discuss some directions the CNI project could take as we look to define the next generation of container networking.
We'll look at -- Where CNI is today -- What it does and doesn't do well -- How we might improve it -- How can Kubernetes better use CNI?
Captions: 
	00:00:00,480 --> 00:00:03,919
hello there and welcome to the cni

00:00:02,320 --> 00:00:05,200
maintainer session here for kubecon

00:00:03,919 --> 00:00:06,560
2021.

00:00:05,200 --> 00:00:08,639
whether you're watching this live and

00:00:06,560 --> 00:00:10,400
joining me afterwards for q a or

00:00:08,639 --> 00:00:11,840
joining afterwards on youtube at one and

00:00:10,400 --> 00:00:13,360
a half time speed i'd like to thank you

00:00:11,840 --> 00:00:13,599
for taking some time of your day to join

00:00:13,360 --> 00:00:17,920
me

00:00:13,599 --> 00:00:17,920
so let's get started

00:00:21,359 --> 00:00:25,519
so the maintainers track sessions at

00:00:23,600 --> 00:00:27,039
kubecon are where cncf projects

00:00:25,519 --> 00:00:28,160
can give things up can give updates and

00:00:27,039 --> 00:00:28,960
talk about what's next for those

00:00:28,160 --> 00:00:30,240
projects

00:00:28,960 --> 00:00:32,800
in this session i'll be doing that for

00:00:30,240 --> 00:00:34,960
cni and what we'll be doing here today

00:00:32,800 --> 00:00:36,160
is starting the conversation about what

00:00:34,960 --> 00:00:38,239
cni 2.0

00:00:36,160 --> 00:00:39,680
might look like first a brief

00:00:38,239 --> 00:00:40,719
introduction my name is casey

00:00:39,680 --> 00:00:42,640
calendrello

00:00:40,719 --> 00:00:44,559
i am an engineer at red hat working on

00:00:42,640 --> 00:00:46,239
openshift and upstream kubernetes

00:00:44,559 --> 00:00:47,760
as well as maintaining other upstream

00:00:46,239 --> 00:00:50,079
projects such as cni

00:00:47,760 --> 00:00:51,920
oven kubernetes and go ib tables which

00:00:50,079 --> 00:00:53,680
you may have used

00:00:51,920 --> 00:00:55,600
i've given similar talks to this before

00:00:53,680 --> 00:00:57,440
but this is mostly about cni 1.0 and

00:00:55,600 --> 00:01:00,160
today this is a new talk around what

00:00:57,440 --> 00:01:01,280
we might want to do for cni 2.0 what are

00:01:00,160 --> 00:01:03,440
we going to talk about today

00:01:01,280 --> 00:01:05,360
we'll talk about an update of what the

00:01:03,440 --> 00:01:06,880
project has done so far namely releasing

00:01:05,360 --> 00:01:08,799
cni 1.0

00:01:06,880 --> 00:01:10,400
we'll talk about some pain points and

00:01:08,799 --> 00:01:12,159
considerations that we are thinking

00:01:10,400 --> 00:01:14,080
about as we look into the future

00:01:12,159 --> 00:01:15,439
and we will look at some possible

00:01:14,080 --> 00:01:17,119
directions that the project might be

00:01:15,439 --> 00:01:20,320
taking

00:01:17,119 --> 00:01:21,600
so the first agenda item is cni 1.0

00:01:20,320 --> 00:01:23,759
but this slide is kind of boring i think

00:01:21,600 --> 00:01:24,479
we need some more word art there that's

00:01:23,759 --> 00:01:26,000
better

00:01:24,479 --> 00:01:28,000
by the time you're watching this talk

00:01:26,000 --> 00:01:29,439
cni 1.0 will have been cut

00:01:28,000 --> 00:01:31,200
and this is a pretty cool achievement

00:01:29,439 --> 00:01:32,799
right this is a standard that started

00:01:31,200 --> 00:01:34,320
from the community about five years ago

00:01:32,799 --> 00:01:35,600
and it's finally time for us to declare

00:01:34,320 --> 00:01:39,119
1.0 that we've reached

00:01:35,600 --> 00:01:40,320
a stable specification cni 1.0 is not

00:01:39,119 --> 00:01:42,240
going to contain any particular

00:01:40,320 --> 00:01:44,240
surprises it looks pretty much just like

00:01:42,240 --> 00:01:46,079
the previous versions before it it's

00:01:44,240 --> 00:01:47,600
just a formalization and a rewriting of

00:01:46,079 --> 00:01:49,280
the existing spec that everybody knows

00:01:47,600 --> 00:01:50,960
and loves

00:01:49,280 --> 00:01:52,880
honestly it's been almost five years now

00:01:50,960 --> 00:01:54,000
so it's appropriate for a project that

00:01:52,880 --> 00:01:57,119
is as mature as cni

00:01:54,000 --> 00:01:58,880
to declare stable release um as an aside

00:01:57,119 --> 00:02:00,799
i'd like to thank the cncf for donating

00:01:58,880 --> 00:02:02,079
time and resources to help us set up a

00:02:00,799 --> 00:02:03,280
website which we didn't have the

00:02:02,079 --> 00:02:04,799
resources to do

00:02:03,280 --> 00:02:06,719
so now you can find everything you need

00:02:04,799 --> 00:02:07,319
to know about cni at our shiny new

00:02:06,719 --> 00:02:10,319
website

00:02:07,319 --> 00:02:10,319
cni.dev

00:02:10,560 --> 00:02:15,040
just to get everybody on the same page

00:02:13,040 --> 00:02:16,319
here's a quick overview of how cni

00:02:15,040 --> 00:02:18,080
currently fits into the overall

00:02:16,319 --> 00:02:20,480
kubernetes and containerization

00:02:18,080 --> 00:02:22,959
ecosystem

00:02:20,480 --> 00:02:24,080
cni is responsible for configuring a

00:02:22,959 --> 00:02:27,040
network interface

00:02:24,080 --> 00:02:27,840
more precisely an attachment inside a

00:02:27,040 --> 00:02:29,440
container

00:02:27,840 --> 00:02:31,200
that is to say it mediates the

00:02:29,440 --> 00:02:33,120
interaction between a network plug-in

00:02:31,200 --> 00:02:35,519
and a container runtime

00:02:33,120 --> 00:02:36,400
cni the protocol is an execution

00:02:35,519 --> 00:02:38,800
protocol

00:02:36,400 --> 00:02:39,760
and cni is additionally a configuration

00:02:38,800 --> 00:02:41,360
format

00:02:39,760 --> 00:02:43,599
there is a reference implementation for

00:02:41,360 --> 00:02:46,400
consuming the configuration and

00:02:43,599 --> 00:02:47,519
executing the protocol known as libcni

00:02:46,400 --> 00:02:50,000
that is used by

00:02:47,519 --> 00:02:50,800
many plugins and many container runtimes

00:02:50,000 --> 00:02:54,480
lib cni

00:02:50,800 --> 00:02:56,480
is maintained by the cni project itself

00:02:54,480 --> 00:02:57,519
the project cni also supplies some

00:02:56,480 --> 00:02:59,200
commonly used

00:02:57,519 --> 00:03:00,879
network plugins for really common use

00:02:59,200 --> 00:03:01,840
cases such as a generic bridge

00:03:00,879 --> 00:03:04,159
implementation

00:03:01,840 --> 00:03:05,680
but by no means are the cni plugins

00:03:04,159 --> 00:03:07,760
released by the cni project an

00:03:05,680 --> 00:03:10,480
exhaustive list or the exclusive set of

00:03:07,760 --> 00:03:12,400
cni plugins that people tend to use

00:03:10,480 --> 00:03:14,640
so if you look here in this diagram on

00:03:12,400 --> 00:03:16,159
the screen cni is everything in this

00:03:14,640 --> 00:03:18,640
orange box that is to say

00:03:16,159 --> 00:03:21,040
it is the configuration it is the

00:03:18,640 --> 00:03:23,280
protocol by which a runtime on the right

00:03:21,040 --> 00:03:24,239
talks to a plugin on the left and lib

00:03:23,280 --> 00:03:25,760
cni

00:03:24,239 --> 00:03:28,959
is the reference implementation is in

00:03:25,760 --> 00:03:28,959
between this interaction

00:03:30,000 --> 00:03:34,000
let's talk briefly about the abstract or

00:03:31,840 --> 00:03:36,959
logical components of the cni

00:03:34,000 --> 00:03:37,680
model on the left we have a container

00:03:36,959 --> 00:03:40,720
which is

00:03:37,680 --> 00:03:42,640
managed outside of cni cni is only

00:03:40,720 --> 00:03:44,799
one aspect of bringing container up and

00:03:42,640 --> 00:03:46,640
cni makes no commentary on how a

00:03:44,799 --> 00:03:48,159
container itself is managed

00:03:46,640 --> 00:03:50,640
that is supposed to be handled by a

00:03:48,159 --> 00:03:52,959
container runtime engine

00:03:50,640 --> 00:03:53,680
then there is a network which in the cni

00:03:52,959 --> 00:03:55,360
world is

00:03:53,680 --> 00:03:57,120
represented by a single cni

00:03:55,360 --> 00:03:59,519
configuration file

00:03:57,120 --> 00:04:00,239
and then you have an attachment of a

00:03:59,519 --> 00:04:02,720
container

00:04:00,239 --> 00:04:04,480
to a network and this is cni's picture

00:04:02,720 --> 00:04:06,720
of the world

00:04:04,480 --> 00:04:09,040
to be a little bit more accurate the cni

00:04:06,720 --> 00:04:10,480
model allows for multiple attachments in

00:04:09,040 --> 00:04:12,159
a single container it allows for

00:04:10,480 --> 00:04:13,519
multiple networks and it even allows for

00:04:12,159 --> 00:04:14,080
multiple attachments of the same

00:04:13,519 --> 00:04:16,720
container

00:04:14,080 --> 00:04:18,560
to the same network and as an aside the

00:04:16,720 --> 00:04:19,519
fact that kubernetes only understands a

00:04:18,560 --> 00:04:22,240
single attachment

00:04:19,519 --> 00:04:23,680
is a limitation or a decision within

00:04:22,240 --> 00:04:26,400
kubernetes itself

00:04:23,680 --> 00:04:27,199
other cni runtimes such as for example

00:04:26,400 --> 00:04:29,440
podman

00:04:27,199 --> 00:04:30,560
natively support multiple interfaces and

00:04:29,440 --> 00:04:33,840
the cni

00:04:30,560 --> 00:04:33,840
works with them in this regard

00:04:34,160 --> 00:04:41,040
the execution protocol has only three

00:04:37,520 --> 00:04:43,759
methods it is a simple sort of rpc world

00:04:41,040 --> 00:04:44,639
it has three methods add dell and check

00:04:43,759 --> 00:04:47,360
that's it

00:04:44,639 --> 00:04:49,040
add concerns with creating an attachment

00:04:47,360 --> 00:04:49,840
says please attach this container to

00:04:49,040 --> 00:04:52,400
this network

00:04:49,840 --> 00:04:53,680
and delete would be the inverse of that

00:04:52,400 --> 00:04:55,759
check

00:04:53,680 --> 00:04:56,800
is to report if a particular attachment

00:04:55,759 --> 00:04:58,880
is still functional

00:04:56,800 --> 00:05:00,800
that is to say asking a plug-in to

00:04:58,880 --> 00:05:04,000
please validate that everything is still

00:05:00,800 --> 00:05:05,600
configured appropriately we go into much

00:05:04,000 --> 00:05:07,440
deeper dive into the specifics about

00:05:05,600 --> 00:05:08,880
this in kubecon 2020

00:05:07,440 --> 00:05:10,639
so if you want if you're interested

00:05:08,880 --> 00:05:12,880
about that you can watch that talk

00:05:10,639 --> 00:05:14,320
cni 1.0 really doesn't change anything

00:05:12,880 --> 00:05:15,600
from that talk so that talk is still

00:05:14,320 --> 00:05:17,280
accurate

00:05:15,600 --> 00:05:19,039
an important distinction about cni

00:05:17,280 --> 00:05:19,680
though is that plugins are executable

00:05:19,039 --> 00:05:22,400
binaries

00:05:19,680 --> 00:05:24,639
when we say rpc many people think grpc

00:05:22,400 --> 00:05:26,800
or json rpc or rest

00:05:24,639 --> 00:05:28,639
no we that's not the way cine works

00:05:26,800 --> 00:05:30,960
plugins are executable binaries and each

00:05:28,639 --> 00:05:31,440
rpc call is a new execution of that

00:05:30,960 --> 00:05:32,320
binary

00:05:31,440 --> 00:05:34,400
it's a little bit different than what

00:05:32,320 --> 00:05:36,840
you may be used to but that's it that's

00:05:34,400 --> 00:05:38,800
the whole protocol it's not particularly

00:05:36,840 --> 00:05:41,199
complicated

00:05:38,800 --> 00:05:42,479
so now that we understand the basics of

00:05:41,199 --> 00:05:45,360
the cni protocol

00:05:42,479 --> 00:05:46,520
let's look at some problems and thing

00:05:45,360 --> 00:05:49,360
we'll just call them

00:05:46,520 --> 00:05:51,360
sub-optimalities that users of cni

00:05:49,360 --> 00:05:52,720
and developers of cni plugins experience

00:05:51,360 --> 00:05:55,759
with real-world

00:05:52,720 --> 00:05:58,400
uses in the network

00:05:55,759 --> 00:05:59,280
the first sort of wart or well we'll

00:05:58,400 --> 00:06:02,960
call it a wart

00:05:59,280 --> 00:06:03,759
is executing executing binaries the bad

00:06:02,960 --> 00:06:05,280
thing about this

00:06:03,759 --> 00:06:06,800
well there's a couple things first of

00:06:05,280 --> 00:06:07,840
all it's a security risk and what do we

00:06:06,800 --> 00:06:10,800
mean by this

00:06:07,840 --> 00:06:12,240
well we are deploying binaries executed

00:06:10,800 --> 00:06:14,720
as root in the host

00:06:12,240 --> 00:06:16,800
context which is obviously an extremely

00:06:14,720 --> 00:06:19,360
privileged position to find oneself in

00:06:16,800 --> 00:06:20,800
so that's a bit of a security risk it's

00:06:19,360 --> 00:06:22,000
also annoying in containerized

00:06:20,800 --> 00:06:23,600
developments for example

00:06:22,000 --> 00:06:25,120
you were installing a binary that's

00:06:23,600 --> 00:06:25,919
executed in the host but it's built in a

00:06:25,120 --> 00:06:27,600
container

00:06:25,919 --> 00:06:29,039
it's a good thing that go and rust make

00:06:27,600 --> 00:06:30,240
it very easy to build statically linked

00:06:29,039 --> 00:06:32,000
binaries otherwise this

00:06:30,240 --> 00:06:33,360
might be a quite difficult problem to

00:06:32,000 --> 00:06:36,319
solve

00:06:33,360 --> 00:06:37,440
the fact that it is a single rpc exec

00:06:36,319 --> 00:06:39,759
style

00:06:37,440 --> 00:06:41,039
protocol completely precludes the notion

00:06:39,759 --> 00:06:43,759
of any sort of events or

00:06:41,039 --> 00:06:45,280
push style apis where a plug-in could

00:06:43,759 --> 00:06:47,280
conceivably push state back

00:06:45,280 --> 00:06:49,199
up into the runtime it's not possible

00:06:47,280 --> 00:06:50,800
with today's cni

00:06:49,199 --> 00:06:52,400
and one sort of funny little thing is

00:06:50,800 --> 00:06:55,280
that many plugins today

00:06:52,400 --> 00:06:56,800
are in fact thin shims to demons so we

00:06:55,280 --> 00:06:57,520
find ourselves in the somewhat comical

00:06:56,800 --> 00:06:59,919
situation

00:06:57,520 --> 00:07:00,800
of a demonized container run time such

00:06:59,919 --> 00:07:03,680
as the cubelet

00:07:00,800 --> 00:07:04,479
or container d talking to a demonized

00:07:03,680 --> 00:07:06,960
container

00:07:04,479 --> 00:07:08,160
network plug-in such as uh oven

00:07:06,960 --> 00:07:10,240
kubernetes

00:07:08,160 --> 00:07:11,840
by executing executing a very small

00:07:10,240 --> 00:07:12,560
binary which then talks back to that

00:07:11,840 --> 00:07:13,840
demon so

00:07:12,560 --> 00:07:16,240
it's a bit strange that we have to put

00:07:13,840 --> 00:07:18,960
this sort of adapter in

00:07:16,240 --> 00:07:20,240
but that said we chose binary execution

00:07:18,960 --> 00:07:22,720
as part of the protocol for

00:07:20,240 --> 00:07:23,680
a couple very real reasons the first is

00:07:22,720 --> 00:07:26,000
that it solves

00:07:23,680 --> 00:07:26,720
a real problem with go and name spaces

00:07:26,000 --> 00:07:28,080
right so

00:07:26,720 --> 00:07:29,680
i don't know if you don't know about

00:07:28,080 --> 00:07:30,160
this then consider yourself fortunate

00:07:29,680 --> 00:07:31,840
but

00:07:30,160 --> 00:07:33,759
go and network name spaces don't

00:07:31,840 --> 00:07:35,680
necessarily get along so well

00:07:33,759 --> 00:07:37,280
and executing binaries is one way to

00:07:35,680 --> 00:07:38,160
mitigate the damage that can be done by

00:07:37,280 --> 00:07:39,919
that

00:07:38,160 --> 00:07:41,599
it's also extremely useful for demonless

00:07:39,919 --> 00:07:42,319
run times not all runtimes have a

00:07:41,599 --> 00:07:44,080
running demon

00:07:42,319 --> 00:07:45,759
for example pod podman or rocket from

00:07:44,080 --> 00:07:48,080
which cni came out of

00:07:45,759 --> 00:07:48,960
additionally executing binaries ensures

00:07:48,080 --> 00:07:51,440
that plugins don't

00:07:48,960 --> 00:07:52,960
cheat and not checkpoints date to disk

00:07:51,440 --> 00:07:54,080
right if you need to execute a plugin

00:07:52,960 --> 00:07:55,840
every single time

00:07:54,080 --> 00:07:57,599
it forces you to make sure that you are

00:07:55,840 --> 00:07:59,280
managing your state in a correct and

00:07:57,599 --> 00:08:03,520
checkpointed manner

00:07:59,280 --> 00:08:05,599
what's the first wart with cni 1.0

00:08:03,520 --> 00:08:07,280
second wart is one that some people have

00:08:05,599 --> 00:08:07,759
probably discovered themselves as well

00:08:07,280 --> 00:08:10,879
which is

00:08:07,759 --> 00:08:12,960
network status how do you tell

00:08:10,879 --> 00:08:15,039
kubernetes that a node is configured and

00:08:12,960 --> 00:08:16,639
ready for pods to be scheduled to it

00:08:15,039 --> 00:08:18,240
the answer is you write a configuration

00:08:16,639 --> 00:08:20,000
file to disk

00:08:18,240 --> 00:08:22,319
you write your own cni configuration

00:08:20,000 --> 00:08:23,599
file which is a bit strange because it's

00:08:22,319 --> 00:08:25,440
the same configuration file you're

00:08:23,599 --> 00:08:26,560
supposed to use to configure yourself

00:08:25,440 --> 00:08:29,840
right so this is a

00:08:26,560 --> 00:08:32,080
strange catch-22 and cni

00:08:29,840 --> 00:08:33,360
needs a better way for network status to

00:08:32,080 --> 00:08:35,120
be reported right now we only have

00:08:33,360 --> 00:08:36,000
attachment status network status doesn't

00:08:35,120 --> 00:08:38,000
exist

00:08:36,000 --> 00:08:40,959
in the cni model right now so that's

00:08:38,000 --> 00:08:43,760
word number two

00:08:40,959 --> 00:08:45,200
port number three concerns itself with

00:08:43,760 --> 00:08:47,360
configuration management

00:08:45,200 --> 00:08:48,560
right so writing files to disk is a bit

00:08:47,360 --> 00:08:50,800
troublesome

00:08:48,560 --> 00:08:52,320
it's inconvenient in containerized

00:08:50,800 --> 00:08:52,959
deployments because you need to bind

00:08:52,320 --> 00:08:54,640
mount

00:08:52,959 --> 00:08:56,000
something to disk which is also an

00:08:54,640 --> 00:08:58,399
interesting privileged

00:08:56,000 --> 00:08:59,839
concern it's not easily discoverable as

00:08:58,399 --> 00:09:00,720
well it means that anybody who wants to

00:08:59,839 --> 00:09:02,560
know anything about

00:09:00,720 --> 00:09:03,839
network configuration needs to have the

00:09:02,560 --> 00:09:05,279
same directory bind mounted in

00:09:03,839 --> 00:09:06,720
containerized deployments that's pretty

00:09:05,279 --> 00:09:10,080
awkward right

00:09:06,720 --> 00:09:11,600
it is also a bit too dynamic if you have

00:09:10,080 --> 00:09:12,959
the same network configuration and you

00:09:11,600 --> 00:09:15,120
like the same network configuration

00:09:12,959 --> 00:09:16,000
across all of your nodes in some cluster

00:09:15,120 --> 00:09:17,920
or fleet

00:09:16,000 --> 00:09:19,519
why do you have to deploy a daemon set

00:09:17,920 --> 00:09:21,360
to copy a file to disk

00:09:19,519 --> 00:09:22,959
that's that's kind of silly that you

00:09:21,360 --> 00:09:24,480
need to write a file to disk that's

00:09:22,959 --> 00:09:26,320
identical across your cluster and you

00:09:24,480 --> 00:09:28,399
can't use any of the existing

00:09:26,320 --> 00:09:30,720
methods that you may have for doing this

00:09:28,399 --> 00:09:31,279
simultaneously configuration files are

00:09:30,720 --> 00:09:33,440
also

00:09:31,279 --> 00:09:34,560
not dynamic enough just for some use

00:09:33,440 --> 00:09:36,399
cases

00:09:34,560 --> 00:09:38,240
if you have this configuration file that

00:09:36,399 --> 00:09:39,279
is otherwise entirely constant except

00:09:38,240 --> 00:09:41,760
for say

00:09:39,279 --> 00:09:43,279
ipools allocated to a node or network

00:09:41,760 --> 00:09:44,800
why do you have to

00:09:43,279 --> 00:09:47,200
template in like doing string

00:09:44,800 --> 00:09:49,120
manipulation templating in some ip pools

00:09:47,200 --> 00:09:50,800
like your configuration as far as you

00:09:49,120 --> 00:09:52,800
are concerned is entirely constant

00:09:50,800 --> 00:09:54,320
except for addressing pools right so

00:09:52,800 --> 00:09:56,160
these files are not really supporting

00:09:54,320 --> 00:09:57,839
use case super well since you need to do

00:09:56,160 --> 00:09:59,920
some sort of templating or

00:09:57,839 --> 00:10:02,000
meta cni configuration management that's

00:09:59,920 --> 00:10:03,920
a bit awkward

00:10:02,000 --> 00:10:05,360
that said what's the good thing about

00:10:03,920 --> 00:10:06,720
files the good thing about files is that

00:10:05,360 --> 00:10:09,120
they're simple

00:10:06,720 --> 00:10:10,480
tooling them is very easy obviously easy

00:10:09,120 --> 00:10:13,120
to script and

00:10:10,480 --> 00:10:14,800
let's just say it's not been a problem

00:10:13,120 --> 00:10:16,320
right now right everybody can figure out

00:10:14,800 --> 00:10:17,600
how to write a file to disk and then you

00:10:16,320 --> 00:10:19,519
move on with your life and you go and

00:10:17,600 --> 00:10:21,600
solve much bigger problems

00:10:19,519 --> 00:10:24,720
but in any case that's work number three

00:10:21,600 --> 00:10:27,200
configuration management

00:10:24,720 --> 00:10:29,040
the fourth wart i'd like to mention is a

00:10:27,200 --> 00:10:31,279
bit more abstract

00:10:29,040 --> 00:10:33,760
it's also a bit more unclear it's it's

00:10:31,279 --> 00:10:36,800
around devices and hardware

00:10:33,760 --> 00:10:38,640
the cni protocol is designed with simple

00:10:36,800 --> 00:10:40,480
views and bridges in mind these sort of

00:10:38,640 --> 00:10:42,320
virtual interfaces that are completely

00:10:40,480 --> 00:10:43,839
limitless and have no

00:10:42,320 --> 00:10:45,920
underlying basis that would either need

00:10:43,839 --> 00:10:47,760
to be accounted for or scheduled or

00:10:45,920 --> 00:10:49,279
managed in any way like hardware

00:10:47,760 --> 00:10:52,320
and the particle absolutely reflects

00:10:49,279 --> 00:10:54,959
this notion of utter limitlessness

00:10:52,320 --> 00:10:56,480
multis and danm and some sort of meta

00:10:54,959 --> 00:10:59,120
cni runtimes contain an

00:10:56,480 --> 00:11:00,720
absolutely absurd amount of code to make

00:10:59,120 --> 00:11:02,240
working with hardware and device plugins

00:11:00,720 --> 00:11:04,320
even possible and

00:11:02,240 --> 00:11:05,600
that's not necessarily to say that it's

00:11:04,320 --> 00:11:07,920
easy or

00:11:05,600 --> 00:11:09,519
conceal or or easy an easy model for

00:11:07,920 --> 00:11:11,040
people to understand right

00:11:09,519 --> 00:11:13,440
you can actually watch a talk in this

00:11:11,040 --> 00:11:14,880
cubecon eu 2021 by my colleagues billy

00:11:13,440 --> 00:11:16,160
mcfall and adrian moreno

00:11:14,880 --> 00:11:17,839
they're talking about their effort on

00:11:16,160 --> 00:11:19,680
something called the device information

00:11:17,839 --> 00:11:21,920
spec which is an attempt to bring

00:11:19,680 --> 00:11:23,680
some order to the madness around

00:11:21,920 --> 00:11:24,720
hardware initialization networking and

00:11:23,680 --> 00:11:27,120
kubernetes

00:11:24,720 --> 00:11:28,000
but the takeaway from this is two things

00:11:27,120 --> 00:11:30,079
first of all hardware

00:11:28,000 --> 00:11:31,760
is complicated really really really

00:11:30,079 --> 00:11:32,720
complicated and we don't necessarily

00:11:31,760 --> 00:11:35,040
want to specify

00:11:32,720 --> 00:11:36,640
every last little bit of that but the

00:11:35,040 --> 00:11:38,480
other takeaway from this is that cni is

00:11:36,640 --> 00:11:40,560
doing them absolutely no favors right

00:11:38,480 --> 00:11:42,240
the specification

00:11:40,560 --> 00:11:43,600
doesn't support the use case at all and

00:11:42,240 --> 00:11:45,440
if there's something we can do to make

00:11:43,600 --> 00:11:45,839
this simpler we should consider adding

00:11:45,440 --> 00:11:49,279
that

00:11:45,839 --> 00:11:52,320
to the specification that's the fourth

00:11:49,279 --> 00:11:52,320
wart we'll call it

00:11:52,639 --> 00:11:56,480
the last work i'd like to talk about is

00:11:54,399 --> 00:11:59,440
around life cycle specifically

00:11:56,480 --> 00:12:01,200
setup and tear down cni makes it

00:11:59,440 --> 00:12:03,120
difficult for a single plug-in on a

00:12:01,200 --> 00:12:04,959
single network so the same plug-in

00:12:03,120 --> 00:12:06,240
to share a given resource between

00:12:04,959 --> 00:12:07,440
multiple attachments or multiple

00:12:06,240 --> 00:12:08,880
containers

00:12:07,440 --> 00:12:10,480
what do i mean by shared resources it

00:12:08,880 --> 00:12:12,079
doesn't need to be that abstract a

00:12:10,480 --> 00:12:13,440
shared resource can be as simple as a

00:12:12,079 --> 00:12:15,200
bridge the same bridge that every

00:12:13,440 --> 00:12:16,399
container is attached to

00:12:15,200 --> 00:12:18,320
and it's difficult to share these

00:12:16,399 --> 00:12:19,600
resources for a couple of reasons

00:12:18,320 --> 00:12:21,200
the first is that there's not

00:12:19,600 --> 00:12:22,399
necessarily good information about

00:12:21,200 --> 00:12:24,000
addressing

00:12:22,399 --> 00:12:25,519
it's hard to aggregate things start to

00:12:24,000 --> 00:12:27,120
know when you can aggregate things based

00:12:25,519 --> 00:12:30,000
on ip addresses

00:12:27,120 --> 00:12:31,680
there's also no timing guarantees cni

00:12:30,000 --> 00:12:33,519
explicitly makes no guarantees other

00:12:31,680 --> 00:12:35,600
than you will get a delete after an

00:12:33,519 --> 00:12:37,360
ad so you need to do locking between

00:12:35,600 --> 00:12:38,480
multiple instances of your plugin if you

00:12:37,360 --> 00:12:40,079
want to share something between

00:12:38,480 --> 00:12:42,320
containers

00:12:40,079 --> 00:12:44,720
it's also difficult to safely if

00:12:42,320 --> 00:12:47,200
difficult if not impossible to safely

00:12:44,720 --> 00:12:47,760
tear down shared resources such as a

00:12:47,200 --> 00:12:49,200
bridge

00:12:47,760 --> 00:12:50,880
when the last container leaves it and

00:12:49,200 --> 00:12:51,680
you may not necessarily even want to do

00:12:50,880 --> 00:12:54,240
this right

00:12:51,680 --> 00:12:55,200
so most cni plug-ins the effect of this

00:12:54,240 --> 00:12:57,200
is that they leave their shared

00:12:55,200 --> 00:12:58,800
resources around forever

00:12:57,200 --> 00:13:00,079
even if the network is done even if

00:12:58,800 --> 00:13:01,200
you're not going to be using this bridge

00:13:00,079 --> 00:13:03,360
anymore

00:13:01,200 --> 00:13:04,880
because generally speaking not tearing

00:13:03,360 --> 00:13:06,320
down the bridge is better than

00:13:04,880 --> 00:13:08,079
potentially tearing down a bridge and

00:13:06,320 --> 00:13:11,600
interrupting an in-flight operation

00:13:08,079 --> 00:13:13,680
or affecting something else so it's

00:13:11,600 --> 00:13:15,760
not really like there is no notion of

00:13:13,680 --> 00:13:16,560
tear down in cni other than tearing down

00:13:15,760 --> 00:13:18,560
an attachment

00:13:16,560 --> 00:13:20,800
and that sometimes makes things a bit

00:13:18,560 --> 00:13:24,560
awkward for

00:13:20,800 --> 00:13:24,560
users and developers of cni

00:13:25,519 --> 00:13:30,320
okay so that was some of the problems or

00:13:28,399 --> 00:13:31,200
let's just say sub-optimalities with

00:13:30,320 --> 00:13:33,279
scene with cni

00:13:31,200 --> 00:13:34,320
as it's been adopted and used in the

00:13:33,279 --> 00:13:35,839
real world

00:13:34,320 --> 00:13:37,680
i want to briefly talk about some of the

00:13:35,839 --> 00:13:39,120
considerations we need to keep in mind

00:13:37,680 --> 00:13:40,639
and with that we can then move forward

00:13:39,120 --> 00:13:41,040
to think about what we want to do next

00:13:40,639 --> 00:13:45,760
right

00:13:41,040 --> 00:13:45,760
so a quick dive into some considerations

00:13:46,000 --> 00:13:49,760
so the most important consideration that

00:13:47,920 --> 00:13:51,519
we need to keep in mind is that cni is

00:13:49,760 --> 00:13:52,959
not kubernetes right we need to support

00:13:51,519 --> 00:13:55,279
multiple runtimes we need to support

00:13:52,959 --> 00:13:57,440
multiple deployment paradigms

00:13:55,279 --> 00:13:59,120
not all consumers of cni want to create

00:13:57,440 --> 00:14:00,959
a kubernetes style sort of single

00:13:59,120 --> 00:14:02,639
logical network logical network across

00:14:00,959 --> 00:14:03,199
multiple nodes right for podman that

00:14:02,639 --> 00:14:05,760
doesn't

00:14:03,199 --> 00:14:07,920
even necessarily make sense um and

00:14:05,760 --> 00:14:08,880
there's lots of cni runtimes and we need

00:14:07,920 --> 00:14:11,279
to

00:14:08,880 --> 00:14:12,720
design a specification that doesn't

00:14:11,279 --> 00:14:14,320
necessarily preclude them from doing

00:14:12,720 --> 00:14:15,040
what they need to do right cni is vendor

00:14:14,320 --> 00:14:18,399
neutral

00:14:15,040 --> 00:14:20,480
and that's a good thing a

00:14:18,399 --> 00:14:22,399
second consideration is sort of similar

00:14:20,480 --> 00:14:23,279
to the first which is that some runtimes

00:14:22,399 --> 00:14:24,880
are demonless

00:14:23,279 --> 00:14:26,880
so we should whatever we do we should

00:14:24,880 --> 00:14:27,279
not make their jobs or administrators

00:14:26,880 --> 00:14:29,680
that

00:14:27,279 --> 00:14:31,040
choose demonless runtimes any harder if

00:14:29,680 --> 00:14:33,199
an administrator choose it

00:14:31,040 --> 00:14:34,320
chooses a demonless runtime they expect

00:14:33,199 --> 00:14:36,000
that they have a network

00:14:34,320 --> 00:14:37,600
infrastructure and network plugins that

00:14:36,000 --> 00:14:39,440
are probably they would probably like

00:14:37,600 --> 00:14:42,720
those to be demonless as well right

00:14:39,440 --> 00:14:44,800
and if we require end users to manage

00:14:42,720 --> 00:14:46,240
running demons just to bring up a simple

00:14:44,800 --> 00:14:48,639
bridge and port forwarding like

00:14:46,240 --> 00:14:49,680
we've made a real user's life a lot more

00:14:48,639 --> 00:14:51,680
complicated for

00:14:49,680 --> 00:14:52,959
no real benefit to them need to keep

00:14:51,680 --> 00:14:54,880
this in mind as we're designing things

00:14:52,959 --> 00:14:57,600
forward

00:14:54,880 --> 00:15:00,160
and lastly it's always useful to be wary

00:14:57,600 --> 00:15:01,040
extremely wary of the so-called second

00:15:00,160 --> 00:15:03,600
system effect

00:15:01,040 --> 00:15:05,600
right this is the unfortunate tendency

00:15:03,600 --> 00:15:07,519
of version two of a particular system to

00:15:05,600 --> 00:15:08,240
try and solve all problems perfectly and

00:15:07,519 --> 00:15:10,160
thereby

00:15:08,240 --> 00:15:12,480
solve no problems well and wind up

00:15:10,160 --> 00:15:13,920
bloated and unusable right this is not a

00:15:12,480 --> 00:15:15,279
new problem in software engineering it's

00:15:13,920 --> 00:15:17,040
probably the first problem in software

00:15:15,279 --> 00:15:18,560
engineering and it was even discussed by

00:15:17,040 --> 00:15:20,320
fred brooks in 1975

00:15:18,560 --> 00:15:22,320
and we really need to keep this in mind

00:15:20,320 --> 00:15:24,800
as as we look forward right

00:15:22,320 --> 00:15:26,320
by the way uh a brief aside i think i

00:15:24,800 --> 00:15:27,519
think that kubernetes deserves a lot of

00:15:26,320 --> 00:15:29,120
praise for avoiding

00:15:27,519 --> 00:15:30,639
some of the temptations that cause the

00:15:29,120 --> 00:15:32,880
second system effect right

00:15:30,639 --> 00:15:35,279
i encourage all of you to watch the talk

00:15:32,880 --> 00:15:36,959
in this coupon cubecon 21 2021

00:15:35,279 --> 00:15:39,440
to talk about reimagining the ingress

00:15:36,959 --> 00:15:40,000
api and that team deserves a lot of

00:15:39,440 --> 00:15:42,320
praise for

00:15:40,000 --> 00:15:43,680
avoiding the same temptations around the

00:15:42,320 --> 00:15:45,440
second system effector they've worked

00:15:43,680 --> 00:15:48,000
very hard to design something that

00:15:45,440 --> 00:15:51,440
is not bloated and is also not over

00:15:48,000 --> 00:15:51,440
engineered or overspecified

00:15:52,079 --> 00:15:56,800
so the with all that in mind like how

00:15:54,160 --> 00:15:57,519
can cni 2.0 whatever form it winds up

00:15:56,800 --> 00:15:59,839
taking

00:15:57,519 --> 00:16:01,120
be a worthy and successful successor to

00:15:59,839 --> 00:16:03,040
cni at 1.0

00:16:01,120 --> 00:16:04,880
right and the answer in some sense is

00:16:03,040 --> 00:16:07,040
very simple we need to solve real

00:16:04,880 --> 00:16:08,480
problems for real people without making

00:16:07,040 --> 00:16:10,560
life appreciably harder for

00:16:08,480 --> 00:16:11,680
anybody that means we need to keep

00:16:10,560 --> 00:16:14,639
things simple

00:16:11,680 --> 00:16:16,880
composable understandable any of the

00:16:14,639 --> 00:16:18,079
keep true to what's enabled cnn 1.0

00:16:16,880 --> 00:16:19,920
success right

00:16:18,079 --> 00:16:22,079
and another thing that's also critical

00:16:19,920 --> 00:16:23,839
is we don't want to over

00:16:22,079 --> 00:16:25,199
specify every interaction right if we

00:16:23,839 --> 00:16:27,519
write a protocol that's

00:16:25,199 --> 00:16:28,320
really rigid and overspecified then you

00:16:27,519 --> 00:16:30,800
don't leave room

00:16:28,320 --> 00:16:32,480
for unanticipated uses and you just make

00:16:30,800 --> 00:16:32,959
a protocol that's difficult for anybody

00:16:32,480 --> 00:16:36,399
to use

00:16:32,959 --> 00:16:38,720
even in slightly divergent manner

00:16:36,399 --> 00:16:40,160
so with all that in mind and about 10

00:16:38,720 --> 00:16:42,399
minutes left in my talk

00:16:40,160 --> 00:16:44,320
i'd like to move and think about what

00:16:42,399 --> 00:16:51,519
cni 2.0 might look like

00:16:44,320 --> 00:16:53,519
excuse me

00:16:51,519 --> 00:16:55,920
so the first thing i'd like to think

00:16:53,519 --> 00:16:57,360
about for cni 2.0 are some potential

00:16:55,920 --> 00:16:59,440
life cycle improvements

00:16:57,360 --> 00:17:01,519
so i've shown here the logical diagram

00:16:59,440 --> 00:17:02,320
before and the three cni methods how

00:17:01,519 --> 00:17:04,000
they fit in

00:17:02,320 --> 00:17:05,439
you can add delete and check an

00:17:04,000 --> 00:17:08,480
attachment that's all

00:17:05,439 --> 00:17:09,280
that you can do so like let's imagine

00:17:08,480 --> 00:17:11,360
what if you could

00:17:09,280 --> 00:17:14,000
do the same verbs for all all of the

00:17:11,360 --> 00:17:15,439
three logical components within cni

00:17:14,000 --> 00:17:16,799
what might that look like but if you

00:17:15,439 --> 00:17:18,319
could manage networks the same way you

00:17:16,799 --> 00:17:21,120
manage attachments

00:17:18,319 --> 00:17:22,319
well just for discussion's sake i think

00:17:21,120 --> 00:17:24,559
we can probably come up with better

00:17:22,319 --> 00:17:26,240
verbs so let's do that right here

00:17:24,559 --> 00:17:28,240
and you can see here we have a similar

00:17:26,240 --> 00:17:30,320
life cycle for networks and containers

00:17:28,240 --> 00:17:31,679
as we have attachments just rename

00:17:30,320 --> 00:17:32,000
rename things a little bit so it makes a

00:17:31,679 --> 00:17:34,160
bit more

00:17:32,000 --> 00:17:35,840
sense and let's think about like what

00:17:34,160 --> 00:17:38,080
would a network and container's life

00:17:35,840 --> 00:17:41,840
cycle look like within the context of

00:17:38,080 --> 00:17:43,440
cni as we have it so

00:17:41,840 --> 00:17:45,200
you can imagine a network having some

00:17:43,440 --> 00:17:46,480
sort of ad which we in this case we're

00:17:45,200 --> 00:17:48,480
calling init

00:17:46,480 --> 00:17:50,000
you could imagine network plugins

00:17:48,480 --> 00:17:51,360
creating shared resources such as

00:17:50,000 --> 00:17:53,440
bridges and firewall rules when the

00:17:51,360 --> 00:17:55,600
network itself is created

00:17:53,440 --> 00:17:56,960
likewise what happens what does it mean

00:17:55,600 --> 00:17:58,880
to check a network well

00:17:56,960 --> 00:18:00,000
you could say checking a network is

00:17:58,880 --> 00:18:02,240
checking to see if this network

00:18:00,000 --> 00:18:03,120
is configured and is ready to accept ads

00:18:02,240 --> 00:18:04,559
and so that's

00:18:03,120 --> 00:18:05,760
a real problem that we know we have

00:18:04,559 --> 00:18:07,120
right now is there's no way to check a

00:18:05,760 --> 00:18:10,240
network status

00:18:07,120 --> 00:18:11,120
and additionally destroy or delete for a

00:18:10,240 --> 00:18:12,799
network

00:18:11,120 --> 00:18:14,240
would be a way to say this network is no

00:18:12,799 --> 00:18:16,320
longer needed please tear down any

00:18:14,240 --> 00:18:17,520
attachments and please delete any shared

00:18:16,320 --> 00:18:19,360
resources right

00:18:17,520 --> 00:18:21,440
so that solves a couple of the things

00:18:19,360 --> 00:18:24,320
we've discussed i think that this is a

00:18:21,440 --> 00:18:26,559
pretty clear pretty clear gain for any

00:18:24,320 --> 00:18:28,480
sort of future directions in cni

00:18:26,559 --> 00:18:31,520
that's network lifecycle somewhat akin

00:18:28,480 --> 00:18:33,120
to attachment lifecycle

00:18:31,520 --> 00:18:35,039
so what about container lifecycle

00:18:33,120 --> 00:18:36,559
knowing that cni itself does not

00:18:35,039 --> 00:18:38,000
actually involve in the creation or

00:18:36,559 --> 00:18:39,360
deletion of containers or network

00:18:38,000 --> 00:18:41,280
namespaces or any sort of other

00:18:39,360 --> 00:18:43,919
isolation domains

00:18:41,280 --> 00:18:45,600
so what would it mean to add a container

00:18:43,919 --> 00:18:48,559
well one thing that comes to mind

00:18:45,600 --> 00:18:50,960
is some sort of ad being akin to a

00:18:48,559 --> 00:18:52,880
finalize which is to say

00:18:50,960 --> 00:18:54,799
saying this container is fully attached

00:18:52,880 --> 00:18:56,400
and passing a

00:18:54,799 --> 00:18:58,480
container plug-in as opposed to a

00:18:56,400 --> 00:19:00,640
attachment plug-in is saying

00:18:58,480 --> 00:19:01,520
hey please this container is fully

00:19:00,640 --> 00:19:02,880
attached

00:19:01,520 --> 00:19:04,640
here are all the interfaces that are

00:19:02,880 --> 00:19:06,720
configured in it please make some sort

00:19:04,640 --> 00:19:08,880
of additional

00:19:06,720 --> 00:19:10,000
super level or higher level aspect of a

00:19:08,880 --> 00:19:11,360
container please orchestrate or

00:19:10,000 --> 00:19:13,600
configure that

00:19:11,360 --> 00:19:14,960
after all attachments are done the use

00:19:13,600 --> 00:19:17,120
case for this might be something like

00:19:14,960 --> 00:19:20,160
tweaking routing tables or adjusting

00:19:17,120 --> 00:19:21,600
ctls or an interesting one is adjusting

00:19:20,160 --> 00:19:24,080
some internal firewalling

00:19:21,600 --> 00:19:25,039
right now you can have an istio network

00:19:24,080 --> 00:19:27,039
plugin which

00:19:25,039 --> 00:19:28,160
fits into cni and hooksen but is a bit

00:19:27,039 --> 00:19:29,600
of a cheat because

00:19:28,160 --> 00:19:31,840
it doesn't actually create any

00:19:29,600 --> 00:19:32,880
interfaces this is a perfect

00:19:31,840 --> 00:19:34,960
this would be perfect for that

00:19:32,880 --> 00:19:36,720
particular use case which is to say

00:19:34,960 --> 00:19:38,000
i don't want to touch any interfaces i

00:19:36,720 --> 00:19:39,840
don't even particularly care how many

00:19:38,000 --> 00:19:41,760
interfaces there are i just need a

00:19:39,840 --> 00:19:43,120
container's networking state to look

00:19:41,760 --> 00:19:45,039
something like this after everything

00:19:43,120 --> 00:19:48,240
else is configured so that would be an

00:19:45,039 --> 00:19:50,480
interesting thing to add to cni 2.0

00:19:48,240 --> 00:19:52,000
and then check and delete would sort of

00:19:50,480 --> 00:19:53,440
match this check would see

00:19:52,000 --> 00:19:55,039
please verify that your changes are

00:19:53,440 --> 00:19:56,480
correctly applied and delete would undo

00:19:55,039 --> 00:19:58,400
it would be something along the lines of

00:19:56,480 --> 00:20:01,440
undo what you did

00:19:58,400 --> 00:20:02,080
so that's the first exploration this is

00:20:01,440 --> 00:20:03,600
the

00:20:02,080 --> 00:20:05,679
looking in the direction of life cycle

00:20:03,600 --> 00:20:06,320
enhancements what else might we want to

00:20:05,679 --> 00:20:09,520
consider

00:20:06,320 --> 00:20:13,200
for cni enhancements

00:20:09,520 --> 00:20:13,520
well a little bit more uh specific would

00:20:13,200 --> 00:20:15,919
be

00:20:13,520 --> 00:20:18,480
demonization right should we offer and

00:20:15,919 --> 00:20:20,320
switch to grpc for cni 2.0 and the

00:20:18,480 --> 00:20:21,840
answer for that is almost certain

00:20:20,320 --> 00:20:23,440
there's significant demand for this

00:20:21,840 --> 00:20:25,120
especially if you look at all of the

00:20:23,440 --> 00:20:28,799
work that is done to

00:20:25,120 --> 00:20:30,640
un to re-demonify the exact cni binaries

00:20:28,799 --> 00:20:32,080
in other words should we offer grpc

00:20:30,640 --> 00:20:33,600
absolutely right grpc

00:20:32,080 --> 00:20:35,360
is the standard choice it is the

00:20:33,600 --> 00:20:36,720
expected solution for

00:20:35,360 --> 00:20:38,640
this particular corner of software

00:20:36,720 --> 00:20:41,039
engineering and there's really no

00:20:38,640 --> 00:20:41,679
compelling reason for cni in the future

00:20:41,039 --> 00:20:45,039
to

00:20:41,679 --> 00:20:47,120
avoid grpc however can we require

00:20:45,039 --> 00:20:48,640
that all plugins and all administrators

00:20:47,120 --> 00:20:49,840
run as demons and the answer is

00:20:48,640 --> 00:20:51,840
definitely not right

00:20:49,840 --> 00:20:53,679
the administrative overhead for simple

00:20:51,840 --> 00:20:54,799
plugins is way too great it'll be asking

00:20:53,679 --> 00:20:56,400
way too much

00:20:54,799 --> 00:20:58,400
for administrators in that particular

00:20:56,400 --> 00:21:00,000
context

00:20:58,400 --> 00:21:01,520
so the first solution we've come up with

00:21:00,000 --> 00:21:04,559
as maintainers is to

00:21:01,520 --> 00:21:06,080
think about offering cni 2.0 uh as both

00:21:04,559 --> 00:21:07,840
right as both demonized and

00:21:06,080 --> 00:21:09,360
non-demonized plugins

00:21:07,840 --> 00:21:11,679
in other words we should support

00:21:09,360 --> 00:21:14,640
interactive rpc over a socket file

00:21:11,679 --> 00:21:16,320
as well as well as direct execution a la

00:21:14,640 --> 00:21:17,520
cni 1.0

00:21:16,320 --> 00:21:19,760
you could we could define some

00:21:17,520 --> 00:21:21,679
relatively simple fallback rules and it

00:21:19,760 --> 00:21:23,440
should be pretty seamless additionally

00:21:21,679 --> 00:21:26,960
we can implement most of this

00:21:23,440 --> 00:21:28,960
in libcni so that plug-in authors and

00:21:26,960 --> 00:21:30,240
people who are administrators really

00:21:28,960 --> 00:21:32,320
don't necessarily need to see the

00:21:30,240 --> 00:21:35,360
complexity and they can pick and choose

00:21:32,320 --> 00:21:36,080
which ever works better for them i think

00:21:35,360 --> 00:21:38,320
that's a pretty

00:21:36,080 --> 00:21:39,520
clear new direction that we're going to

00:21:38,320 --> 00:21:41,679
want to take

00:21:39,520 --> 00:21:43,360
cni 2.0 and we need to offer

00:21:41,679 --> 00:21:46,400
demonization and we need

00:21:43,360 --> 00:21:49,600
to not make it the only choice

00:21:46,400 --> 00:21:51,360
so that's it for ideas that we've had

00:21:49,600 --> 00:21:52,880
right now that we'd like to talk about

00:21:51,360 --> 00:21:55,760
for and

00:21:52,880 --> 00:21:57,520
present about for cni 2.0 but i want to

00:21:55,760 --> 00:21:58,080
touch on another area for which there's

00:21:57,520 --> 00:22:00,400
room for

00:21:58,080 --> 00:22:01,280
serious potential improvement and that

00:22:00,400 --> 00:22:04,000
is the

00:22:01,280 --> 00:22:06,000
interaction between cni and kubernetes

00:22:04,000 --> 00:22:08,159
we're here at kubecon

00:22:06,000 --> 00:22:12,320
and kubernetes is obviously an extremely

00:22:08,159 --> 00:22:14,720
important consumer of cni

00:22:12,320 --> 00:22:16,960
so to take a step back right cni

00:22:14,720 --> 00:22:19,360
configuration is a file written on disk

00:22:16,960 --> 00:22:20,799
by some unknown processor and everybody

00:22:19,360 --> 00:22:22,159
does it differently all they need to do

00:22:20,799 --> 00:22:23,520
is write a file to disk and this has

00:22:22,159 --> 00:22:25,520
resulted in thousands of

00:22:23,520 --> 00:22:26,799
that's an exaggeration this resulted in

00:22:25,520 --> 00:22:29,280
many different solutions

00:22:26,799 --> 00:22:29,919
and everybody does it differently and

00:22:29,280 --> 00:22:31,760
this isn't

00:22:29,919 --> 00:22:33,280
necessarily really the kubernetes way

00:22:31,760 --> 00:22:34,240
right the kubernetes way is to have

00:22:33,280 --> 00:22:38,640
discoverable

00:22:34,240 --> 00:22:38,640
authoritative validated declarative

00:22:38,840 --> 00:22:42,080
configuration that is managed by some

00:22:41,120 --> 00:22:45,440
sort of central

00:22:42,080 --> 00:22:46,320
service which is to say this sure seems

00:22:45,440 --> 00:22:48,559
like a lot

00:22:46,320 --> 00:22:50,320
sure seems a lot like every other api

00:22:48,559 --> 00:22:53,919
object right what is kubernetes

00:22:50,320 --> 00:22:54,320
but a really excellent crud over at cd

00:22:53,919 --> 00:22:55,760
oh

00:22:54,320 --> 00:22:57,360
i'm sort of cheating i'm sort of uh

00:22:55,760 --> 00:22:59,280
joking when i say that but

00:22:57,360 --> 00:23:00,720
network configuration like doesn't have

00:22:59,280 --> 00:23:02,240
a compelling reason why it should be

00:23:00,720 --> 00:23:06,080
different from any other types of

00:23:02,240 --> 00:23:09,440
configuration within kubernetes

00:23:06,080 --> 00:23:10,880
so the configuration it's not

00:23:09,440 --> 00:23:13,840
immediately obvious

00:23:10,880 --> 00:23:15,039
how this entirely fits together however

00:23:13,840 --> 00:23:17,440
so

00:23:15,039 --> 00:23:19,039
the container runtime engine in the

00:23:17,440 --> 00:23:21,200
kubernetes cluster which is to say

00:23:19,039 --> 00:23:22,080
container d or cryo or anything like

00:23:21,200 --> 00:23:24,159
that

00:23:22,080 --> 00:23:26,159
that talks to the cubelet via something

00:23:24,159 --> 00:23:27,200
called the cri the container runtime

00:23:26,159 --> 00:23:29,919
interface right

00:23:27,200 --> 00:23:31,360
and it is by design and really important

00:23:29,919 --> 00:23:34,480
that the cri

00:23:31,360 --> 00:23:36,240
is not only for kubernetes it is

00:23:34,480 --> 00:23:37,840
abstract it is a standard and an

00:23:36,240 --> 00:23:40,400
abstraction boundary

00:23:37,840 --> 00:23:42,559
and the container d and cryo and all of

00:23:40,400 --> 00:23:44,799
the cri the cri runtimes

00:23:42,559 --> 00:23:47,360
they don't talk to the api server they

00:23:44,799 --> 00:23:49,120
don't talk kubernetes they talk cri and

00:23:47,360 --> 00:23:50,799
that's a very very good thing for vendor

00:23:49,120 --> 00:23:52,320
neutrality and making it so that things

00:23:50,799 --> 00:23:54,720
are pluggable

00:23:52,320 --> 00:23:57,200
so if we wanted to add logic to retrieve

00:23:54,720 --> 00:23:58,000
network configuration from an api server

00:23:57,200 --> 00:23:59,760
that would

00:23:58,000 --> 00:24:01,679
pretty fundamentally violate the

00:23:59,760 --> 00:24:03,840
boundary the cri

00:24:01,679 --> 00:24:06,640
kubernetes boundary we don't think that

00:24:03,840 --> 00:24:08,960
that's a particularly good idea

00:24:06,640 --> 00:24:10,480
so our first sort of straw man proposal

00:24:08,960 --> 00:24:12,799
as cni maintainers

00:24:10,480 --> 00:24:15,360
is that network configuration management

00:24:12,799 --> 00:24:17,360
should be first class within the cri

00:24:15,360 --> 00:24:18,799
itself right there's no need for this to

00:24:17,360 --> 00:24:20,000
be cni specific

00:24:18,799 --> 00:24:21,919
sort of in the same way that you can

00:24:20,000 --> 00:24:23,760
have gcp and vsphere volumes

00:24:21,919 --> 00:24:25,520
uh it would be really cool if you could

00:24:23,760 --> 00:24:28,880
have cni

00:24:25,520 --> 00:24:29,360
or non-cni network configuration managed

00:24:28,880 --> 00:24:32,080
and

00:24:29,360 --> 00:24:32,799
configured and life cycle managed by the

00:24:32,080 --> 00:24:35,840
cubelet

00:24:32,799 --> 00:24:37,520
over the cri right so cri asks that

00:24:35,840 --> 00:24:40,240
runtimes create it

00:24:37,520 --> 00:24:41,039
reconciles network configuration and

00:24:40,240 --> 00:24:43,120
enables that

00:24:41,039 --> 00:24:44,960
enables networks to exist for a

00:24:43,120 --> 00:24:49,200
particular runtime for a particular

00:24:44,960 --> 00:24:49,200
sandbox in kubernetes

00:24:49,360 --> 00:24:53,520
putting the network configuration in cri

00:24:51,200 --> 00:24:54,400
has a couple advantages right it means

00:24:53,520 --> 00:24:56,320
that you can have

00:24:54,400 --> 00:24:57,520
simple cluster-wide network deployment

00:24:56,320 --> 00:24:58,960
and

00:24:57,520 --> 00:25:00,960
really importantly it ends this sort of

00:24:58,960 --> 00:25:03,039
bizarre kubernetes status catch

00:25:00,960 --> 00:25:04,960
22 where your configuration file means

00:25:03,039 --> 00:25:08,159
that you're already configured

00:25:04,960 --> 00:25:11,200
it's always been a bit strange right the

00:25:08,159 --> 00:25:12,960
problem is that it complicates per node

00:25:11,200 --> 00:25:13,360
configuration or more specifically it

00:25:12,960 --> 00:25:15,120
comp

00:25:13,360 --> 00:25:16,799
it complicates cases where network

00:25:15,120 --> 00:25:17,679
configuration is not uniform across a

00:25:16,799 --> 00:25:19,520
cluster

00:25:17,679 --> 00:25:21,120
so that would require some careful

00:25:19,520 --> 00:25:22,400
thought but kubernetes solves these

00:25:21,120 --> 00:25:24,799
problems pretty well they have

00:25:22,400 --> 00:25:26,000
the notion of label selectors and a node

00:25:24,799 --> 00:25:27,919
selector would be a pretty

00:25:26,000 --> 00:25:30,320
interesting thing to add to that object

00:25:27,919 --> 00:25:32,640
right and also by making

00:25:30,320 --> 00:25:34,799
network configuration a first class

00:25:32,640 --> 00:25:35,919
concept within the cri

00:25:34,799 --> 00:25:37,440
it opens the door for future

00:25:35,919 --> 00:25:38,400
improvements like multiple interface

00:25:37,440 --> 00:25:41,520
support and

00:25:38,400 --> 00:25:42,960
even potentially dynamic attachment okay

00:25:41,520 --> 00:25:44,880
i'm getting a little bit out of time

00:25:42,960 --> 00:25:47,039
so i just want to wrap this up just a

00:25:44,880 --> 00:25:48,960
few parting words as uh the presentation

00:25:47,039 --> 00:25:51,679
comes to a close

00:25:48,960 --> 00:25:54,080
this is obviously very early days in the

00:25:51,679 --> 00:25:56,159
saga that will be cni 2.0 and this is

00:25:54,080 --> 00:25:57,919
nothing if not a community effort right

00:25:56,159 --> 00:25:59,440
the cni maintainers we want to hear from

00:25:57,919 --> 00:26:00,320
you and want to make sure that this is a

00:25:59,440 --> 00:26:03,600
worthy

00:26:00,320 --> 00:26:05,440
exercise for all of us in the community

00:26:03,600 --> 00:26:07,679
and we really welcome your involvement

00:26:05,440 --> 00:26:09,520
right cni is not a project that is

00:26:07,679 --> 00:26:10,400
supported by any one company it really

00:26:09,520 --> 00:26:12,240
is

00:26:10,400 --> 00:26:14,400
intended to be some form of

00:26:12,240 --> 00:26:15,039
encapsulation of community consensus so

00:26:14,400 --> 00:26:16,799
i

00:26:15,039 --> 00:26:18,159
please encourage all of you have you if

00:26:16,799 --> 00:26:21,360
you have opinions about this

00:26:18,159 --> 00:26:23,279
please meet us on the cni the cncf slack

00:26:21,360 --> 00:26:24,640
and the cni and cnidev rooms

00:26:23,279 --> 00:26:26,720
and if you'd like to start talking about

00:26:24,640 --> 00:26:28,400
this we have a label on our github we're

00:26:26,720 --> 00:26:31,840
starting to open up issues

00:26:28,400 --> 00:26:34,799
to discuss and look at ways forward

00:26:31,840 --> 00:26:35,919
so thank you very much this needs more

00:26:34,799 --> 00:26:37,440
word art

00:26:35,919 --> 00:26:39,279
i'd like to thank you very much for

00:26:37,440 --> 00:26:41,279
watching thanks for taking the time

00:26:39,279 --> 00:26:42,880
uh thanks for watching me at 1.5 time

00:26:41,279 --> 00:26:43,200
speed i hope i didn't speak too quickly

00:26:42,880 --> 00:26:46,360
and

00:26:43,200 --> 00:26:49,360
i believe it is now time for live q a

00:26:46,360 --> 00:26:49,360

YouTube URL: https://www.youtube.com/watch?v=h9QYbaJzBe0


