Title: COSI: The Common Operating System Interface - Steven Borrelli & Andrew Rynhard
Publication date: 2021-05-09
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

COSI: The Common Operating System Interface - Steven Borrelli, Mastercard & Andrew Rynhard, Talos-Systems

This talk introduces COSI, the Common Operating System Interface, which defines an API for the configuration of container operating systems. While there has been innovation in the development of minimal Linux distributions for running Kubernetes, the distributions diverge from each other in terms of management and API endpoints. Similar to other projects such as the Container Network Interface (CNI) , COSI has a focus on the configuration of the underlying operating system, providing Protocol Buffer definitions and a gRPC API reference implementation for configuration settings such as DNS, network, and kernel settings By utilizing a flexible plugin system, multiple backend implementations can provide a consistent API to consumers. In this talk we’ll review the configuration and APIs of popular container operating systems and Kubelet-node interactions. We will then review the COSI API, the plugin architecture, and demo node management using backend plugins written in Go and Rust.
Captions: 
	00:00:01,280 --> 00:00:04,960
hello everyone and welcome to our

00:00:02,720 --> 00:00:06,160
session on cozy here at kuchan eu

00:00:04,960 --> 00:00:08,240
we hope you're enjoying the conference

00:00:06,160 --> 00:00:10,240
so far i'm stephen pirelli and i'm

00:00:08,240 --> 00:00:11,840
andrew reinhart

00:00:10,240 --> 00:00:14,000
we're very excited to show cozy to a

00:00:11,840 --> 00:00:16,480
larger audience for the first time

00:00:14,000 --> 00:00:18,320
cozy is the result of developing talos

00:00:16,480 --> 00:00:20,480
for the last five years

00:00:18,320 --> 00:00:22,480
and distilling the lessons we've learned

00:00:20,480 --> 00:00:25,359
into a specification we would like to

00:00:22,480 --> 00:00:25,359
share with the world

00:00:26,160 --> 00:00:30,400
let's start at the very beginning and

00:00:28,480 --> 00:00:32,800
define what cozy is

00:00:30,400 --> 00:00:34,640
cozy it's an acronym for the common

00:00:32,800 --> 00:00:36,800
operating system interface

00:00:34,640 --> 00:00:38,079
and what it concerns itself with is the

00:00:36,800 --> 00:00:40,800
configuration

00:00:38,079 --> 00:00:41,520
of the nodes that run in a kubernetes

00:00:40,800 --> 00:00:43,600
cluster

00:00:41,520 --> 00:00:45,200
so whenever you provision a new cluster

00:00:43,600 --> 00:00:46,719
first you provision the nodes whether

00:00:45,200 --> 00:00:47,760
they're bare metal or vm and then on the

00:00:46,719 --> 00:00:49,360
next thing is you actually have to

00:00:47,760 --> 00:00:50,079
configure those nodes for things like

00:00:49,360 --> 00:00:52,719
networking

00:00:50,079 --> 00:00:54,719
disk any processes that you want to run

00:00:52,719 --> 00:00:57,920
installing the kubernetes software

00:00:54,719 --> 00:00:59,199
that's what cozy concerns itself with it

00:00:57,920 --> 00:01:03,680
also gave us

00:00:59,199 --> 00:01:05,920
a chance to reimagine operating systems

00:01:03,680 --> 00:01:07,280
and for this is what we do in operating

00:01:05,920 --> 00:01:09,760
systems

00:01:07,280 --> 00:01:10,799
in a kubernetes world another thing

00:01:09,760 --> 00:01:13,040
about cozy that's

00:01:10,799 --> 00:01:15,280
actually been really fun is it given us

00:01:13,040 --> 00:01:16,159
the chance to rethink exactly what it

00:01:15,280 --> 00:01:17,920
means to be an

00:01:16,159 --> 00:01:21,200
operating system in the age of

00:01:17,920 --> 00:01:24,799
containers and distributed schedulers

00:01:21,200 --> 00:01:26,479
finally let's talk about the why cozy

00:01:24,799 --> 00:01:28,000
one of the reasons is that kubernetes

00:01:26,479 --> 00:01:29,680
and its ecosystem

00:01:28,000 --> 00:01:31,119
from cluster api to things like the

00:01:29,680 --> 00:01:33,040
storage and networking interfaces

00:01:31,119 --> 00:01:35,040
they're deeply intertwined with the

00:01:33,040 --> 00:01:38,400
underlying linux operating system

00:01:35,040 --> 00:01:40,960
in many ways and what we find

00:01:38,400 --> 00:01:41,920
is that kubernetes and linux they don't

00:01:40,960 --> 00:01:42,960
only differ

00:01:41,920 --> 00:01:45,040
in the way they're implemented

00:01:42,960 --> 00:01:46,479
technologically but there's also a

00:01:45,040 --> 00:01:47,920
difference in philosophy

00:01:46,479 --> 00:01:49,119
in the way the systems are composed and

00:01:47,920 --> 00:01:49,600
we're going to talk about this a little

00:01:49,119 --> 00:01:51,759
bit

00:01:49,600 --> 00:01:53,360
the philosophy of unix and what we see

00:01:51,759 --> 00:01:54,880
is that this causes problems at the

00:01:53,360 --> 00:01:58,560
boundary where kubernetes

00:01:54,880 --> 00:01:58,560
and linux interact with one another

00:01:58,960 --> 00:02:02,399
so now that we've talked about the

00:02:00,560 --> 00:02:03,920
motivation for this project

00:02:02,399 --> 00:02:07,040
let's talk about some of the things that

00:02:03,920 --> 00:02:08,720
we'd like to have as desired features

00:02:07,040 --> 00:02:10,560
the first thing one of our highest

00:02:08,720 --> 00:02:12,879
priorities is having an operating system

00:02:10,560 --> 00:02:15,599
that is completely api driven

00:02:12,879 --> 00:02:16,400
and what this means in practice is that

00:02:15,599 --> 00:02:18,080
we want

00:02:16,400 --> 00:02:19,840
an operating system that doesn't need to

00:02:18,080 --> 00:02:22,080
have a shell installed and

00:02:19,840 --> 00:02:23,520
we would not like to have people sshing

00:02:22,080 --> 00:02:24,959
into this box to configure things

00:02:23,520 --> 00:02:27,840
everything on the operating system

00:02:24,959 --> 00:02:29,840
should be configurable via an api

00:02:27,840 --> 00:02:31,920
another thing that we're really looking

00:02:29,840 --> 00:02:33,680
to implement in this operating system is

00:02:31,920 --> 00:02:35,840
having configuration settings

00:02:33,680 --> 00:02:37,599
have a standardized model to them

00:02:35,840 --> 00:02:39,040
currently in the unix world we have lots

00:02:37,599 --> 00:02:39,440
of different file formats for every

00:02:39,040 --> 00:02:41,360
single

00:02:39,440 --> 00:02:42,959
different application and this causes a

00:02:41,360 --> 00:02:44,560
lot of issues in terms of integrating

00:02:42,959 --> 00:02:46,239
with other tools so one of our goals is

00:02:44,560 --> 00:02:47,840
to be similar to kubernetes

00:02:46,239 --> 00:02:48,959
and have a standardized model for any

00:02:47,840 --> 00:02:49,280
kind of settings that we want to put

00:02:48,959 --> 00:02:51,360
into

00:02:49,280 --> 00:02:53,120
whether it's a disk or dns settings or

00:02:51,360 --> 00:02:55,120
anything like that

00:02:53,120 --> 00:02:57,519
another thing that was very inspiring to

00:02:55,120 --> 00:02:58,879
us was the pattern of kubernetes

00:02:57,519 --> 00:03:00,319
controllers and custom resource

00:02:58,879 --> 00:03:01,040
definitions now custom resource

00:03:00,319 --> 00:03:03,280
definitions

00:03:01,040 --> 00:03:05,280
allow you to extend the platform with a

00:03:03,280 --> 00:03:08,319
flexible schema so you can make

00:03:05,280 --> 00:03:09,200
your own objects look like kubernetes on

00:03:08,319 --> 00:03:11,280
the back end

00:03:09,200 --> 00:03:12,720
the way it's decoupled and you could run

00:03:11,280 --> 00:03:14,319
controllers that actually get to the

00:03:12,720 --> 00:03:15,920
desired state and you can write these in

00:03:14,319 --> 00:03:17,680
any language you want and they just

00:03:15,920 --> 00:03:19,200
continually run and reconcile so this

00:03:17,680 --> 00:03:21,519
was something that inspired us

00:03:19,200 --> 00:03:23,360
this kind of running model and then

00:03:21,519 --> 00:03:25,519
finally we wanted these

00:03:23,360 --> 00:03:27,680
systems to be able to easily propagate

00:03:25,519 --> 00:03:28,560
events to other applications running on

00:03:27,680 --> 00:03:30,959
the system

00:03:28,560 --> 00:03:32,560
now there are a lot of eventing systems

00:03:30,959 --> 00:03:33,760
on linux but we've seen in the past that

00:03:32,560 --> 00:03:35,360
they're not heavily used because

00:03:33,760 --> 00:03:36,720
sometimes the interfaces are difficult

00:03:35,360 --> 00:03:38,400
to use

00:03:36,720 --> 00:03:39,680
so we're looking for something that say

00:03:38,400 --> 00:03:40,319
if someone pushes a power button

00:03:39,680 --> 00:03:41,920
somewhere

00:03:40,319 --> 00:03:44,640
we could actually tell kubernetes if

00:03:41,920 --> 00:03:46,239
someone's done that

00:03:44,640 --> 00:03:48,400
so let's get to the agenda for the rest

00:03:46,239 --> 00:03:49,200
of the talk first we're going to venture

00:03:48,400 --> 00:03:51,360
into the past

00:03:49,200 --> 00:03:52,319
and talk about a little bit of unix

00:03:51,360 --> 00:03:53,920
history and

00:03:52,319 --> 00:03:55,760
we hope this will help you understand

00:03:53,920 --> 00:03:57,200
where unix comes from then we're going

00:03:55,760 --> 00:03:57,599
to venture into the present and talk

00:03:57,200 --> 00:03:59,760
about

00:03:57,599 --> 00:04:01,599
modern container operating systems and

00:03:59,760 --> 00:04:02,560
then we'll be having a deeper dive into

00:04:01,599 --> 00:04:04,879
cozy

00:04:02,560 --> 00:04:06,400
after that andrew's going to show you a

00:04:04,879 --> 00:04:07,680
cozy demo of some of the cool things

00:04:06,400 --> 00:04:09,040
that we've implemented so far in the

00:04:07,680 --> 00:04:12,720
reference implementation

00:04:09,040 --> 00:04:14,239
and then we'll have a q a so first let's

00:04:12,720 --> 00:04:17,680
go back in the past

00:04:14,239 --> 00:04:17,680
and learn about the history of unix

00:04:19,199 --> 00:04:23,280
so let's start by talking about the

00:04:21,440 --> 00:04:25,040
history of the unix system

00:04:23,280 --> 00:04:27,440
and to assist us in our history lesson

00:04:25,040 --> 00:04:29,280
today we'll be sourcing a video from

00:04:27,440 --> 00:04:30,800
1982 by bell labs

00:04:29,280 --> 00:04:32,720
it's called the unix system making

00:04:30,800 --> 00:04:34,639
computers more productive and i do

00:04:32,720 --> 00:04:35,919
appreciate the fancy graphics

00:04:34,639 --> 00:04:37,600
so the first thing you need to know is

00:04:35,919 --> 00:04:39,199
that if you're running kubernetes today

00:04:37,600 --> 00:04:40,639
the odds are overwhelming that you are

00:04:39,199 --> 00:04:41,600
running at an operating system called

00:04:40,639 --> 00:04:44,560
linux

00:04:41,600 --> 00:04:46,400
which is a descendant in a very complex

00:04:44,560 --> 00:04:48,800
family tree that goes all the way back

00:04:46,400 --> 00:04:52,080
to this earlier system called unix

00:04:48,800 --> 00:04:54,000
and unix itself is very opinionated

00:04:52,080 --> 00:04:56,000
it's a very simple operating system

00:04:54,000 --> 00:04:58,000
because it descended from another system

00:04:56,000 --> 00:05:00,479
that was being developed in the late 60s

00:04:58,000 --> 00:05:01,520
it was called multix and multix due to

00:05:00,479 --> 00:05:03,600
its complexity

00:05:01,520 --> 00:05:04,639
was having a very slow development

00:05:03,600 --> 00:05:06,639
rollout

00:05:04,639 --> 00:05:08,720
so the folks who were developing unix at

00:05:06,639 --> 00:05:10,720
bell labs wanted simplicity

00:05:08,720 --> 00:05:12,800
as a core function of the operating

00:05:10,720 --> 00:05:14,400
system another thing that was very

00:05:12,800 --> 00:05:16,080
important for the early inventors of

00:05:14,400 --> 00:05:17,919
unix like ken thompson and dennis

00:05:16,080 --> 00:05:19,360
ritchie is that they were programmers

00:05:17,919 --> 00:05:21,120
and they wanted an environment that they

00:05:19,360 --> 00:05:21,919
could enjoy working in in a communal

00:05:21,120 --> 00:05:25,039
environment

00:05:21,919 --> 00:05:26,960
so from the very beginning this concept

00:05:25,039 --> 00:05:28,880
of a common work area that you can log

00:05:26,960 --> 00:05:30,080
in and program interactively was very

00:05:28,880 --> 00:05:31,919
important to them

00:05:30,080 --> 00:05:33,440
and these kind of ideas simplicity and

00:05:31,919 --> 00:05:36,240
communal work

00:05:33,440 --> 00:05:38,639
influence unix to this day another real

00:05:36,240 --> 00:05:40,479
key core concept of unix is this idea

00:05:38,639 --> 00:05:41,120
that it's a multi-user time sharing

00:05:40,479 --> 00:05:43,919
system

00:05:41,120 --> 00:05:45,919
what this meant was unix was designed so

00:05:43,919 --> 00:05:47,440
that many people could log into the same

00:05:45,919 --> 00:05:49,360
time and perform work

00:05:47,440 --> 00:05:51,520
and the way folks logged into a unix

00:05:49,360 --> 00:05:53,199
system was via a serial connection

00:05:51,520 --> 00:05:54,639
they would set up a terminal hook it up

00:05:53,199 --> 00:05:55,120
to the system and as soon as they did

00:05:54,639 --> 00:05:56,800
that

00:05:55,120 --> 00:05:58,240
they would get a program called a shell

00:05:56,800 --> 00:06:00,560
that they could issue

00:05:58,240 --> 00:06:02,639
interactive commands to so there's two

00:06:00,560 --> 00:06:03,600
concepts here that we see in unix that

00:06:02,639 --> 00:06:06,319
we may not want

00:06:03,600 --> 00:06:07,520
in the kubernetes world the first one is

00:06:06,319 --> 00:06:10,240
we do not want

00:06:07,520 --> 00:06:11,360
users directly logging into our systems

00:06:10,240 --> 00:06:13,360
and we don't want them

00:06:11,360 --> 00:06:14,639
sharing resources the ideal kubernetes

00:06:13,360 --> 00:06:16,960
workload is something that's highly

00:06:14,639 --> 00:06:20,080
isolated from every other workload

00:06:16,960 --> 00:06:21,840
another issue is that these shells still

00:06:20,080 --> 00:06:23,120
exist today in the form of programs like

00:06:21,840 --> 00:06:25,199
secure shell we still

00:06:23,120 --> 00:06:28,960
predominantly manage unix systems by

00:06:25,199 --> 00:06:28,960
issuing commands and reading the output

00:06:30,319 --> 00:06:34,479
another key concept of unix is that

00:06:32,800 --> 00:06:36,000
files are really unstructured in the

00:06:34,479 --> 00:06:38,160
system and the canonical way to work in

00:06:36,000 --> 00:06:39,919
unix is to take this unstructured text

00:06:38,160 --> 00:06:41,280
and pass it through a series of filters

00:06:39,919 --> 00:06:42,240
and all these small single purpose

00:06:41,280 --> 00:06:44,880
utilities

00:06:42,240 --> 00:06:46,479
to get the result that you want and

00:06:44,880 --> 00:06:48,479
while this allows an enormous amount of

00:06:46,479 --> 00:06:50,479
flexibility it also had a legacy that

00:06:48,479 --> 00:06:52,319
unix ended up with not having a lot of

00:06:50,479 --> 00:06:53,120
standards in terms of configuration

00:06:52,319 --> 00:06:54,479
files

00:06:53,120 --> 00:06:57,039
and this made building tooling around

00:06:54,479 --> 00:06:58,720
unix very complex

00:06:57,039 --> 00:07:01,120
the last thing i want you to know about

00:06:58,720 --> 00:07:03,199
unix is fragmentation

00:07:01,120 --> 00:07:04,639
when a t developed unix since they were

00:07:03,199 --> 00:07:06,080
a monopoly they were forced by the

00:07:04,639 --> 00:07:06,800
government to license units to other

00:07:06,080 --> 00:07:09,039
companies

00:07:06,800 --> 00:07:10,240
and academic institutions and because of

00:07:09,039 --> 00:07:12,880
this we ended up having

00:07:10,240 --> 00:07:14,319
many slightly incompatible unix variants

00:07:12,880 --> 00:07:15,360
and this was the condition for the first

00:07:14,319 --> 00:07:18,000
couple decades

00:07:15,360 --> 00:07:19,599
of the life of unix until in 1991 an

00:07:18,000 --> 00:07:21,360
open source operating system came out

00:07:19,599 --> 00:07:22,720
called linux that was mostly unix

00:07:21,360 --> 00:07:25,120
compatible

00:07:22,720 --> 00:07:25,919
unix linux over the next couple decades

00:07:25,120 --> 00:07:27,680
ended up

00:07:25,919 --> 00:07:29,120
eliminating the market share of almost

00:07:27,680 --> 00:07:30,000
every commercial unix and becoming

00:07:29,120 --> 00:07:32,720
dominant

00:07:30,000 --> 00:07:34,319
of course linux itself saw multiple

00:07:32,720 --> 00:07:35,840
distributions emerge each

00:07:34,319 --> 00:07:38,160
which was slightly incompatible with the

00:07:35,840 --> 00:07:38,160
others

00:07:39,039 --> 00:07:43,199
in 2013 the linux community was

00:07:41,680 --> 00:07:46,319
transformed by the emergence

00:07:43,199 --> 00:07:48,319
of docker docker is built upon c groups

00:07:46,319 --> 00:07:50,000
and name spaces in the linux kernel

00:07:48,319 --> 00:07:51,360
and it made it easier for developers to

00:07:50,000 --> 00:07:53,759
package share and deploy

00:07:51,360 --> 00:07:54,639
applications using docker means you

00:07:53,759 --> 00:07:56,319
don't have to have a system

00:07:54,639 --> 00:07:57,360
administrator install your application

00:07:56,319 --> 00:07:59,120
on the server itself

00:07:57,360 --> 00:08:00,879
they could just run your container with

00:07:59,120 --> 00:08:03,120
the growing popularity of containers

00:08:00,879 --> 00:08:05,039
came the emergence of cluster schedulers

00:08:03,120 --> 00:08:06,720
including our favorite one which allowed

00:08:05,039 --> 00:08:08,479
organizations to run containerized

00:08:06,720 --> 00:08:10,400
workloads across a pool of servers

00:08:08,479 --> 00:08:12,240
this combination of containers and

00:08:10,400 --> 00:08:13,680
schedulers caused many developers to

00:08:12,240 --> 00:08:15,599
start rethinking the role of the

00:08:13,680 --> 00:08:17,520
traditional operating system

00:08:15,599 --> 00:08:19,599
and this led to the emergence of the

00:08:17,520 --> 00:08:21,280
container operating system

00:08:19,599 --> 00:08:23,199
now container operating systems are

00:08:21,280 --> 00:08:25,440
focused on stripping out functionality

00:08:23,199 --> 00:08:27,520
from full-featured linux distributions

00:08:25,440 --> 00:08:29,199
set the only remaining software

00:08:27,520 --> 00:08:30,560
installed is what's required to run a

00:08:29,199 --> 00:08:31,599
containerized workload and the

00:08:30,560 --> 00:08:33,760
schedulers

00:08:31,599 --> 00:08:35,599
this was a significant advance but

00:08:33,760 --> 00:08:38,959
container operating systems are starting

00:08:35,599 --> 00:08:38,959
to present their own challenges

00:08:39,200 --> 00:08:42,800
so let's talk about modern container

00:08:40,880 --> 00:08:44,880
operating systems

00:08:42,800 --> 00:08:46,399
as part of the research into cozy we

00:08:44,880 --> 00:08:47,760
surveyed the documentation

00:08:46,399 --> 00:08:49,440
and code for a number of popular

00:08:47,760 --> 00:08:50,480
container operating systems including

00:08:49,440 --> 00:08:53,360
flat car

00:08:50,480 --> 00:08:54,000
bottle rocket k3os and talos we were

00:08:53,360 --> 00:08:55,519
really impressed

00:08:54,000 --> 00:08:57,040
with all the operating systems but there

00:08:55,519 --> 00:08:59,839
are several things that we noticed which

00:08:57,040 --> 00:09:02,160
ended up influencing the design of cozy

00:08:59,839 --> 00:09:03,680
first the systems have very little in

00:09:02,160 --> 00:09:05,519
common in configuration

00:09:03,680 --> 00:09:07,600
from the initial node user data that you

00:09:05,519 --> 00:09:08,160
send on boot to how os settings are

00:09:07,600 --> 00:09:10,720
defined

00:09:08,160 --> 00:09:12,720
and validated another thing we noticed

00:09:10,720 --> 00:09:15,120
is that there is no common api

00:09:12,720 --> 00:09:18,320
some container operating systems use ssh

00:09:15,120 --> 00:09:19,920
others have http or grbc apis

00:09:18,320 --> 00:09:21,680
other ones are designed not even to be

00:09:19,920 --> 00:09:22,959
managed via an api you just boot them

00:09:21,680 --> 00:09:26,320
and if you need to make changes you just

00:09:22,959 --> 00:09:26,320
boot them with different user data

00:09:26,399 --> 00:09:30,480
another difference between all these api

00:09:28,640 --> 00:09:31,680
all these container operating systems is

00:09:30,480 --> 00:09:34,000
core technologies

00:09:31,680 --> 00:09:36,160
of the four surveyed operating systems

00:09:34,000 --> 00:09:37,600
there are three different init systems

00:09:36,160 --> 00:09:39,680
now two of these container operating

00:09:37,600 --> 00:09:43,040
systems use system d but the way they

00:09:39,680 --> 00:09:44,560
manage it is completely different

00:09:43,040 --> 00:09:47,200
finally even though these operating

00:09:44,560 --> 00:09:48,480
systems share many of the same goals

00:09:47,200 --> 00:09:50,399
we found that there wasn't a lot of

00:09:48,480 --> 00:09:51,920
shared technology in the underlying

00:09:50,399 --> 00:09:54,320
implementations of these operating

00:09:51,920 --> 00:09:54,320
systems

00:09:54,560 --> 00:09:58,640
so we're seeing the same fragmentation

00:09:56,720 --> 00:10:00,320
we're running the risk of repeating unix

00:09:58,640 --> 00:10:02,079
history and having multiple incompatible

00:10:00,320 --> 00:10:03,519
operating systems

00:10:02,079 --> 00:10:05,760
but here's the thing what we've seen

00:10:03,519 --> 00:10:07,360
with kubernetes is that we could define

00:10:05,760 --> 00:10:10,480
common standards that still

00:10:07,360 --> 00:10:10,480
allow innovation

00:10:11,200 --> 00:10:15,040
all right so let's talk about cozy first

00:10:14,079 --> 00:10:17,279
things first

00:10:15,040 --> 00:10:19,760
this is a disclaimer we're recording

00:10:17,279 --> 00:10:21,600
this talk about a month before kubecon

00:10:19,760 --> 00:10:23,279
and cozy is an active development so

00:10:21,600 --> 00:10:24,720
what you see at the time of this talk

00:10:23,279 --> 00:10:27,440
may be very different than what we're

00:10:24,720 --> 00:10:27,440
presenting here

00:10:28,240 --> 00:10:31,440
the first thing we want you to know

00:10:29,519 --> 00:10:33,200
about cozy is that it includes a set of

00:10:31,440 --> 00:10:34,800
modeled configurations

00:10:33,200 --> 00:10:36,399
and what this means is that basically

00:10:34,800 --> 00:10:37,920
everything that could be configured on a

00:10:36,399 --> 00:10:40,560
container operating system

00:10:37,920 --> 00:10:42,640
has a model defined the examples we're

00:10:40,560 --> 00:10:44,240
showing here are in yaml because he

00:10:42,640 --> 00:10:46,000
doesn't care it could be in tamil or

00:10:44,240 --> 00:10:48,399
json as long as it can be serialized

00:10:46,000 --> 00:10:49,760
into the cozy poto buff message you can

00:10:48,399 --> 00:10:51,440
use it

00:10:49,760 --> 00:10:52,959
the next thing that cozy defines is the

00:10:51,440 --> 00:10:54,480
common rpc definitions

00:10:52,959 --> 00:10:56,000
if you're used to kubernetes these are

00:10:54,480 --> 00:10:59,120
things like get set list

00:10:56,000 --> 00:11:01,440
and watch and others cozy

00:10:59,120 --> 00:11:03,519
also defines plug-in standards and these

00:11:01,440 --> 00:11:06,720
are inspired by kubernetes projects such

00:11:03,519 --> 00:11:09,200
as the cni and the csi

00:11:06,720 --> 00:11:10,480
finally as part of the cozy project

00:11:09,200 --> 00:11:11,839
there's a reference implementation

00:11:10,480 --> 00:11:13,279
that's written in rust

00:11:11,839 --> 00:11:15,200
and this is being inspired by an

00:11:13,279 --> 00:11:17,519
internal rewrite of the talos os

00:11:15,200 --> 00:11:17,519
engine

00:11:19,600 --> 00:11:25,040
models in cozy are protobuf messages

00:11:22,720 --> 00:11:25,839
and these protobuf messages map very

00:11:25,040 --> 00:11:29,839
closely

00:11:25,839 --> 00:11:29,839
to linux and other unix settings

00:11:34,079 --> 00:11:37,920
the next step in cozy is defining a

00:11:35,920 --> 00:11:40,160
series of rpcs and these are inspired

00:11:37,920 --> 00:11:40,800
and very similar to kubernetes rpcs you

00:11:40,160 --> 00:11:42,959
can

00:11:40,800 --> 00:11:45,600
manipulate resources by listing them

00:11:42,959 --> 00:11:47,519
getting them creating them watching them

00:11:45,600 --> 00:11:49,040
and cozy tends to be a declarative

00:11:47,519 --> 00:11:50,880
system in terms of that you set the

00:11:49,040 --> 00:11:52,480
desired state for a resource and then

00:11:50,880 --> 00:11:56,000
the cozy plugins will work to get the

00:11:52,480 --> 00:11:57,920
system into that state

00:11:56,000 --> 00:11:59,360
for communication cozy uses

00:11:57,920 --> 00:12:01,279
bi-directional grpc

00:11:59,360 --> 00:12:03,120
now as part of the research into cozy we

00:12:01,279 --> 00:12:04,880
have investigated other internal ipc

00:12:03,120 --> 00:12:07,279
systems for linux but for simplicity of

00:12:04,880 --> 00:12:08,720
implementation we are starting with grpc

00:12:07,279 --> 00:12:12,079
another important thing to understand

00:12:08,720 --> 00:12:14,000
about cozy is that plugins are designed

00:12:12,079 --> 00:12:15,839
or meant to be as close to the

00:12:14,000 --> 00:12:17,839
underlying operating system as possible

00:12:15,839 --> 00:12:18,639
cozy is not a configuration management

00:12:17,839 --> 00:12:21,200
system

00:12:18,639 --> 00:12:22,639
we don't want to wrap other commands and

00:12:21,200 --> 00:12:23,360
execute shell commands and parse the

00:12:22,639 --> 00:12:25,040
output

00:12:23,360 --> 00:12:26,560
the expectation is that a cozy plugin

00:12:25,040 --> 00:12:28,399
will be as low level as possible

00:12:26,560 --> 00:12:31,360
either talking to the kernel or

00:12:28,399 --> 00:12:31,360
low-level apis

00:12:33,680 --> 00:12:38,480
finally the things that mutate the work

00:12:35,440 --> 00:12:40,639
and do change the system are plugins

00:12:38,480 --> 00:12:42,959
and plugins are very similar they're

00:12:40,639 --> 00:12:44,079
inspired by unix binaries and kubernetes

00:12:42,959 --> 00:12:46,480
controllers

00:12:44,079 --> 00:12:48,160
every plugin is a separate executable

00:12:46,480 --> 00:12:50,079
like unix utility but it runs

00:12:48,160 --> 00:12:52,639
continuously like a controller

00:12:50,079 --> 00:12:54,399
now within a plug-in you can manage

00:12:52,639 --> 00:12:55,360
multiple resources so when you bring up

00:12:54,399 --> 00:12:57,360
a plug-in

00:12:55,360 --> 00:12:59,200
it registers with the engines what types

00:12:57,360 --> 00:13:00,480
of resources it's responsible for

00:12:59,200 --> 00:13:02,079
managing

00:13:00,480 --> 00:13:03,600
and a plug-in internally could be like a

00:13:02,079 --> 00:13:05,600
controller manager it can manage

00:13:03,600 --> 00:13:06,000
multiple other controllers inside that

00:13:05,600 --> 00:13:09,200
manage

00:13:06,000 --> 00:13:09,200
different parts of resources

00:13:10,639 --> 00:13:14,560
the cozy engine could be responsible for

00:13:12,800 --> 00:13:16,240
the life cycle of plug-ins so what you

00:13:14,560 --> 00:13:16,639
can have is that when cozy starts up it

00:13:16,240 --> 00:13:18,079
can

00:13:16,639 --> 00:13:20,480
start all the plug-ins and if a plug-in

00:13:18,079 --> 00:13:22,959
dies the cosy engine can restart it

00:13:20,480 --> 00:13:24,480
another thing to know about plugins is

00:13:22,959 --> 00:13:24,959
instead of standard output and standard

00:13:24,480 --> 00:13:26,480
input

00:13:24,959 --> 00:13:30,160
they take inputs and outputs over the

00:13:26,480 --> 00:13:30,160
grpc channel and act on those

00:13:31,440 --> 00:13:34,720
a special class of plugins generate

00:13:34,160 --> 00:13:36,560
events

00:13:34,720 --> 00:13:38,560
and these are called generators and the

00:13:36,560 --> 00:13:40,480
way generators are implemented in cozy

00:13:38,560 --> 00:13:42,079
is they use linux kernel ebpf

00:13:40,480 --> 00:13:43,920
infrastructure so a generator will

00:13:42,079 --> 00:13:46,560
deploy a probe into the kernel

00:13:43,920 --> 00:13:47,279
and this ebpf probe will generate kernel

00:13:46,560 --> 00:13:48,959
events

00:13:47,279 --> 00:13:50,880
the generator is then responsible for

00:13:48,959 --> 00:13:52,880
taking these kernel events and

00:13:50,880 --> 00:13:54,320
converting these to cosy events

00:13:52,880 --> 00:13:57,519
and then these cozy events can be used

00:13:54,320 --> 00:13:57,519
by other parts of the system

00:13:59,199 --> 00:14:03,440
the next is the engine and the run time

00:14:02,079 --> 00:14:06,000
and for this i'm going to hand it over

00:14:03,440 --> 00:14:06,000
to android

00:14:06,320 --> 00:14:13,199
the core of cozy is two parts the

00:14:09,519 --> 00:14:14,240
engine and the runtime the engine's

00:14:13,199 --> 00:14:17,680
responsibilities

00:14:14,240 --> 00:14:18,160
are process management and run time and

00:14:17,680 --> 00:14:22,160
plug-in

00:14:18,160 --> 00:14:26,160
orchestration it can run as pid 1

00:14:22,160 --> 00:14:28,079
or as a container in existing systems

00:14:26,160 --> 00:14:29,279
the idea is that we can write a bridge

00:14:28,079 --> 00:14:32,880
between system d

00:14:29,279 --> 00:14:35,600
and cozy we also aim to simplify

00:14:32,880 --> 00:14:37,120
what pid 1 should be and have plans to

00:14:35,600 --> 00:14:40,800
write an init system

00:14:37,120 --> 00:14:43,680
into the engine the runtime

00:14:40,800 --> 00:14:44,240
is responsible for state management and

00:14:43,680 --> 00:14:46,560
routing

00:14:44,240 --> 00:14:48,639
resource events to the appropriate

00:14:46,560 --> 00:14:51,440
plugins

00:14:48,639 --> 00:14:53,600
it implements basic crud operations you

00:14:51,440 --> 00:14:56,120
would expect from an api

00:14:53,600 --> 00:14:57,279
with the addition of orchestrating

00:14:56,120 --> 00:15:01,760
reconciliation

00:14:57,279 --> 00:15:04,160
of requests across all plugins

00:15:01,760 --> 00:15:04,959
before i jump into the demo i want to

00:15:04,160 --> 00:15:08,480
introduce

00:15:04,959 --> 00:15:11,040
some of the core concepts of cozy

00:15:08,480 --> 00:15:13,120
one of the things we want to stress is

00:15:11,040 --> 00:15:16,079
that cozy is not meant to

00:15:13,120 --> 00:15:16,800
replace the eunuch's philosophy but

00:15:16,079 --> 00:15:20,160
rather

00:15:16,800 --> 00:15:22,880
to evolve it we have here

00:15:20,160 --> 00:15:25,040
the characteristics of unix on the left

00:15:22,880 --> 00:15:28,880
and what we aim to evolve them to

00:15:25,040 --> 00:15:29,759
on the right with the advent of vms and

00:15:28,880 --> 00:15:32,079
containers

00:15:29,759 --> 00:15:34,399
we have moved from shared to isolated

00:15:32,079 --> 00:15:35,839
workloads

00:15:34,399 --> 00:15:38,880
this is an assumption that the

00:15:35,839 --> 00:15:41,680
originators of unix didn't have in mind

00:15:38,880 --> 00:15:43,759
but we should as we work out the details

00:15:41,680 --> 00:15:47,120
of cozy

00:15:43,759 --> 00:15:49,600
plugins become the new unix utility

00:15:47,120 --> 00:15:51,040
but written with the concept of a

00:15:49,600 --> 00:15:55,680
controller in mind

00:15:51,040 --> 00:15:57,120
not human interaction

00:15:55,680 --> 00:15:59,120
one of the lessons we have learned from

00:15:57,120 --> 00:16:02,639
kubernetes is the power

00:15:59,120 --> 00:16:05,199
of the controller pattern in cozy

00:16:02,639 --> 00:16:06,800
we swap human interactions with

00:16:05,199 --> 00:16:09,519
controllers

00:16:06,800 --> 00:16:10,720
and if we aim to remove direct human

00:16:09,519 --> 00:16:15,120
interaction

00:16:10,720 --> 00:16:17,600
we need an api instead of a shell

00:16:15,120 --> 00:16:18,720
one of the pillars of unix is the idea

00:16:17,600 --> 00:16:22,560
that text streams

00:16:18,720 --> 00:16:25,120
are the universal interface

00:16:22,560 --> 00:16:27,360
one feature that this pillar is missing

00:16:25,120 --> 00:16:30,079
is structure

00:16:27,360 --> 00:16:30,959
with cosy we amend the third pillar of

00:16:30,079 --> 00:16:34,639
unix

00:16:30,959 --> 00:16:37,759
summarized by peter salas as

00:16:34,639 --> 00:16:39,759
write programs to handle structured

00:16:37,759 --> 00:16:43,120
text streams because that is the

00:16:39,759 --> 00:16:43,120
universal interface

00:16:43,440 --> 00:16:48,560
let's now take a look at a simple demo

00:16:45,519 --> 00:16:50,560
to illustrate these concepts

00:16:48,560 --> 00:16:52,880
we will see a model representing a mount

00:16:50,560 --> 00:16:56,000
point use grpc

00:16:52,880 --> 00:16:56,639
to create and delete a mount point and

00:16:56,000 --> 00:17:00,079
then see

00:16:56,639 --> 00:17:00,079
an example of a generator

00:17:03,279 --> 00:17:07,520
from the engine's output we can see that

00:17:05,280 --> 00:17:11,039
it has started the runtime

00:17:07,520 --> 00:17:12,240
generators and plug-ins the standard out

00:17:11,039 --> 00:17:14,559
of each process

00:17:12,240 --> 00:17:16,480
is piped to the standard out of the

00:17:14,559 --> 00:17:18,959
engine

00:17:16,480 --> 00:17:22,880
here is an example of structured input

00:17:18,959 --> 00:17:22,880
representing a desired mount point

00:17:25,360 --> 00:17:29,840
you can imagine this as a replacement

00:17:27,600 --> 00:17:32,000
for an entry in f-stab

00:17:29,840 --> 00:17:33,120
and a list of these then representing

00:17:32,000 --> 00:17:38,240
etsy f-stab

00:17:33,120 --> 00:17:38,240
itself let's go ahead and create this

00:17:41,600 --> 00:17:45,200
you can see in the engine standard out

00:17:43,919 --> 00:17:48,240
that the mount plugin

00:17:45,200 --> 00:17:50,240
has acknowledged the request

00:17:48,240 --> 00:17:52,160
at this point the mount plugins

00:17:50,240 --> 00:17:54,480
controller is responsible

00:17:52,160 --> 00:17:55,919
for reconciling the request and

00:17:54,480 --> 00:17:59,520
outputting a resource

00:17:55,919 --> 00:18:02,960
that represents the mount point status

00:17:59,520 --> 00:18:05,039
you can imagine that in another plugin

00:18:02,960 --> 00:18:06,880
i may have a controller that depends on

00:18:05,039 --> 00:18:09,360
this mount point

00:18:06,880 --> 00:18:10,720
this controller can set up a watch

00:18:09,360 --> 00:18:12,840
asking to be notified

00:18:10,720 --> 00:18:15,280
when the mount status resource is

00:18:12,840 --> 00:18:15,919
created it can then go about doing

00:18:15,280 --> 00:18:19,280
whatever

00:18:15,919 --> 00:18:28,000
it needs let's go ahead and delete the

00:18:19,280 --> 00:18:30,000
mount point

00:18:28,000 --> 00:18:31,039
now i want to move on to the concept of

00:18:30,000 --> 00:18:34,640
a generator

00:18:31,039 --> 00:18:37,120
which i think is extremely powerful

00:18:34,640 --> 00:18:39,600
and before i show an example i want to

00:18:37,120 --> 00:18:41,440
set the stage a bit

00:18:39,600 --> 00:18:43,360
one of the things we have done in talos

00:18:41,440 --> 00:18:43,679
is that we have strived to never depend

00:18:43,360 --> 00:18:46,240
on

00:18:43,679 --> 00:18:46,960
any of the pseudo-file systems in linux

00:18:46,240 --> 00:18:50,000
and to never

00:18:46,960 --> 00:18:53,440
shell out to a utility

00:18:50,000 --> 00:18:57,039
if we can query the kernel via an ioctl

00:18:53,440 --> 00:19:01,760
or the netlink api we favor that over

00:18:57,039 --> 00:19:04,400
say parsing a file under slash proc

00:19:01,760 --> 00:19:06,559
the problem with this is that sometimes

00:19:04,400 --> 00:19:08,559
that just is not an option

00:19:06,559 --> 00:19:10,960
and we have to fall back to parsing

00:19:08,559 --> 00:19:13,760
unstructured text

00:19:10,960 --> 00:19:14,160
furthermore getting updates comes in the

00:19:13,760 --> 00:19:17,600
form

00:19:14,160 --> 00:19:21,760
of polling this isn't what we want

00:19:17,600 --> 00:19:24,480
in cozy so what if we could actually tap

00:19:21,760 --> 00:19:26,080
into when the kernel updates its own

00:19:24,480 --> 00:19:29,360
state

00:19:26,080 --> 00:19:38,799
this is the perfect use case for ebpf

00:19:29,360 --> 00:19:40,720
let's see what that looks like

00:19:38,799 --> 00:19:42,240
you can see that the disk generator

00:19:40,720 --> 00:19:46,080
picks up a kernel event

00:19:42,240 --> 00:19:46,080
when i plug in a usb stick

00:19:46,480 --> 00:19:53,840
and now an sd card

00:19:55,039 --> 00:19:58,559
this becomes a powerful way to reflect

00:19:57,520 --> 00:20:03,120
the kernel state

00:19:58,559 --> 00:20:06,799
in real time and with events

00:20:03,120 --> 00:20:09,280
solving the problems that i mentioned

00:20:06,799 --> 00:20:11,280
and to drive the point home here is an

00:20:09,280 --> 00:20:16,320
example of an acpi event

00:20:11,280 --> 00:20:16,320
when i unplug and plug in my ac power

00:20:18,840 --> 00:20:22,480
supply

00:20:20,559 --> 00:20:23,760
where this could be useful is in being

00:20:22,480 --> 00:20:27,200
able to subscribe

00:20:23,760 --> 00:20:29,360
to an acpi power off event

00:20:27,200 --> 00:20:30,240
and performing a graceful leadership

00:20:29,360 --> 00:20:33,280
election of

00:20:30,240 --> 00:20:36,400
etcd first

00:20:33,280 --> 00:20:38,080
even becoming aware of acpi events on

00:20:36,400 --> 00:20:40,960
other control plane nodes

00:20:38,080 --> 00:20:42,240
and refusing to shut down if it means

00:20:40,960 --> 00:20:44,799
etcd quorum

00:20:42,240 --> 00:20:44,799
is lost

00:20:45,360 --> 00:20:48,960
that is all the time i have for a demo

00:20:47,280 --> 00:20:49,679
and i hope by now you can see the

00:20:48,960 --> 00:20:53,039
potential

00:20:49,679 --> 00:20:53,039
we have in cozy

00:20:53,120 --> 00:20:57,360
cozy is completely open source and

00:20:54,880 --> 00:20:59,600
released under the apache license

00:20:57,360 --> 00:21:04,559
the specification and code can be found

00:20:59,600 --> 00:21:04,559
at github.com cozyspec

00:21:06,480 --> 00:21:11,679
today we're also announcing cozy.dev a

00:21:09,200 --> 00:21:13,280
website for all things cozy related we'd

00:21:11,679 --> 00:21:17,120
love for you to join us

00:21:13,280 --> 00:21:17,120

YouTube URL: https://www.youtube.com/watch?v=i6MQb8QsUdU


