Title: Sponsored Session: An Open-source HCI Platform Built on Kubernetes - Sheng Yang, Rancher
Publication date: 2021-05-09
Playlist: KubeCon + CloudNativeCon Europe 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Sponsored Session: An Open-source HCI Platform Built on Kubernetes - Sheng Yang, Rancher

Sharing of Personal Information with Sponsors In order to facilitate networking and business relationships at the event, you may choose to visit a third partyʼs virtual booth or to access sponsored content. You are never required to visit third party booths or to access sponsored content. When visiting a booth (e.g. by clicking on a third partyʼs logo in the Solutions Showcase or exhibitor directory, and any actions within the booth thereafter including viewing resources), when accessing sponsored sessions in the Sponsor Theater, or by participating in sponsored activities, the third party will receive some of your registration data. This data includes your first name, last name, title, company, address, email, standard demographics questions (i.e. job function, industry), and details about the sponsored content or resources you interacted with. If you choose to interact with a virtual booth or access sponsored content, you are explicitly consenting to receipt and use of such data by the third-party recipients, which will be subject to their own privacy policies.

In the past few years, there have been many attempts to bring VM management into container platforms. But in the end, none of these solutions have come close to the popularity of industry-standard virtualization products like vSphere and Nutanix.

We believe the reason is, despite Kubernetes becoming an industry standard, knowledge of it is not widespread among VM administrators. They are familiar with concepts like ISO images, disk volumes, NICs, and VLANS – not concepts like pods and PVCs.

Project Harvester is an open-source alternative to traditional proprietary hyperconverged (HCI) infrastructure software, built on top of Kubernetes. Harvester is designed to be easy to understand, install and operate, even without the knowledge of Kubernetes.

In this session, Sheng will talk about the motivation of building Harvester, explain the architecture, and show a demo of the latest release.
Captions: 
	00:00:00,160 --> 00:00:04,880
hi welcome to this session i'm shenyang

00:00:03,520 --> 00:00:07,680
from rancho labs

00:00:04,880 --> 00:00:10,000
now a part of sousa today in this

00:00:07,680 --> 00:00:12,080
session we'll talk about a new project

00:00:10,000 --> 00:00:14,559
we have started recently it's a

00:00:12,080 --> 00:00:16,240
hyper-converged infrastructure software

00:00:14,559 --> 00:00:18,400
but also it's a little bit more than

00:00:16,240 --> 00:00:20,720
that

00:00:18,400 --> 00:00:22,320
a few years back the concept of

00:00:20,720 --> 00:00:23,600
hyper-converged infrastructure was

00:00:22,320 --> 00:00:25,840
proposed

00:00:23,600 --> 00:00:27,439
by combining the server and the storage

00:00:25,840 --> 00:00:28,320
into a distributed infrastructure

00:00:27,439 --> 00:00:31,039
platform

00:00:28,320 --> 00:00:32,239
the h2ci software reduce the burden of

00:00:31,039 --> 00:00:33,760
it means

00:00:32,239 --> 00:00:36,399
to manage the server and storage

00:00:33,760 --> 00:00:37,200
separately even with the commodity

00:00:36,399 --> 00:00:39,680
hardware

00:00:37,200 --> 00:00:41,520
the software layer is intelligent enough

00:00:39,680 --> 00:00:41,840
to figure out where to put the data to

00:00:41,520 --> 00:00:44,399
keep

00:00:41,840 --> 00:00:47,200
everything highly available no special

00:00:44,399 --> 00:00:49,920
storage or server will be needed

00:00:47,200 --> 00:00:50,800
it sounds like a pad with a cattle by

00:00:49,920 --> 00:00:53,199
switching to

00:00:50,800 --> 00:00:54,719
hci you no longer need to treat your

00:00:53,199 --> 00:00:56,719
storage as a patch and

00:00:54,719 --> 00:00:58,399
not worry about if you are operating the

00:00:56,719 --> 00:01:00,879
right or not

00:00:58,399 --> 00:01:01,840
and also just in case you know patch

00:01:00,879 --> 00:01:04,159
with cattle

00:01:01,840 --> 00:01:05,199
is also where the name of the rancher

00:01:04,159 --> 00:01:09,360
come from

00:01:05,199 --> 00:01:09,360
i mean the ranch part of course

00:01:11,119 --> 00:01:15,040
so in the data center hci software is

00:01:13,840 --> 00:01:17,520
driving

00:01:15,040 --> 00:01:18,479
but from sofia operator's perspective

00:01:17,520 --> 00:01:21,520
there's still

00:01:18,479 --> 00:01:24,080
more left to be designed you cannot run

00:01:21,520 --> 00:01:26,400
your application directly and on the hci

00:01:24,080 --> 00:01:27,280
since the software is more likely to be

00:01:26,400 --> 00:01:30,640
designed

00:01:27,280 --> 00:01:32,799
on top of the vms it's because the

00:01:30,640 --> 00:01:34,960
software hasn't been programmed to know

00:01:32,799 --> 00:01:37,040
how to spin up vms or connect to the

00:01:34,960 --> 00:01:38,400
storage provided by different hci

00:01:37,040 --> 00:01:40,560
solutions

00:01:38,400 --> 00:01:43,360
and that is because of each these sgi

00:01:40,560 --> 00:01:46,880
solutions speak a different api language

00:01:43,360 --> 00:01:49,600
which is a part of their proprietary api

00:01:46,880 --> 00:01:52,159
the result is ipa means still need to

00:01:49,600 --> 00:01:54,479
operate our software differently

00:01:52,159 --> 00:01:56,479
based on what hci or virtualization

00:01:54,479 --> 00:01:58,240
solution they have chosen

00:01:56,479 --> 00:02:00,320
terraform and other technology are

00:01:58,240 --> 00:02:02,880
created to help but still

00:02:00,320 --> 00:02:04,640
the idea means need to learn a lot about

00:02:02,880 --> 00:02:06,640
how to upgrade softwares and then

00:02:04,640 --> 00:02:09,759
writing a lot of customized script

00:02:06,640 --> 00:02:13,920
to maintain it properly that is not

00:02:09,759 --> 00:02:15,920
easy work fast forward to now

00:02:13,920 --> 00:02:17,040
we see kubernetes taking the word by

00:02:15,920 --> 00:02:19,280
storm

00:02:17,040 --> 00:02:20,160
we no longer need to treat applications

00:02:19,280 --> 00:02:22,239
paths

00:02:20,160 --> 00:02:23,200
things container and kubernetes become

00:02:22,239 --> 00:02:26,400
the de facto

00:02:23,200 --> 00:02:28,480
application api as long as the

00:02:26,400 --> 00:02:30,959
application works on kubernetes

00:02:28,480 --> 00:02:32,720
they can be treated as cattle and no one

00:02:30,959 --> 00:02:33,840
needs to worry about what hardware is

00:02:32,720 --> 00:02:36,400
running on top of

00:02:33,840 --> 00:02:38,480
or what storage is using or how to spin

00:02:36,400 --> 00:02:40,720
up multiple vm to run it

00:02:38,480 --> 00:02:42,720
since all of this has been taken care of

00:02:40,720 --> 00:02:46,560
by the kubernetes

00:02:42,720 --> 00:02:49,120
we want to introduce the concept hci 2.0

00:02:46,560 --> 00:02:51,040
by 2.0 we mean we're not only going to

00:02:49,120 --> 00:02:53,200
integrate servers and storage

00:02:51,040 --> 00:02:54,319
but also going to integrate applications

00:02:53,200 --> 00:02:57,040
on top of it

00:02:54,319 --> 00:02:59,200
through the kubernetes api we will

00:02:57,040 --> 00:03:02,840
replace the proprietary api

00:02:59,200 --> 00:03:04,959
with the open industry standard

00:03:02,840 --> 00:03:06,800
kubernetes

00:03:04,959 --> 00:03:08,319
so let me introduce the project

00:03:06,800 --> 00:03:10,800
harvester

00:03:08,319 --> 00:03:12,560
harvester is open source hyper-converged

00:03:10,800 --> 00:03:15,280
infrastructure software

00:03:12,560 --> 00:03:17,360
built on top of kubernetes besides

00:03:15,280 --> 00:03:19,680
kubernetes is also built on top

00:03:17,360 --> 00:03:21,040
of multiple cloud-native technologies

00:03:19,680 --> 00:03:24,959
including coopervert

00:03:21,040 --> 00:03:26,239
longhorn kvm modus it's been designed to

00:03:24,959 --> 00:03:28,400
work on barometer

00:03:26,239 --> 00:03:30,400
providing users with a single unified

00:03:28,400 --> 00:03:34,000
api to deploy the vm

00:03:30,400 --> 00:03:36,080
and applications just as with

00:03:34,000 --> 00:03:37,920
traditional sdi software you don't need

00:03:36,080 --> 00:03:41,440
to worry about virtualization or

00:03:37,920 --> 00:03:43,200
storage just use the iso image or pxc to

00:03:41,440 --> 00:03:44,080
install harvester on your bare metal

00:03:43,200 --> 00:03:46,080
nodes

00:03:44,080 --> 00:03:48,879
then you have a cluster which can spin

00:03:46,080 --> 00:03:51,120
up vms token kubernetes apis

00:03:48,879 --> 00:03:54,000
or even speed up kubernetes cluster on

00:03:51,120 --> 00:03:54,000
top of vms

00:03:54,720 --> 00:03:59,040
now as long as your applications are

00:03:57,200 --> 00:04:01,599
speaking kubernetes api

00:03:59,040 --> 00:04:02,480
they can be deployed everywhere either

00:04:01,599 --> 00:04:06,400
is cloud

00:04:02,480 --> 00:04:09,280
the data center or on edge harvester

00:04:06,400 --> 00:04:09,760
makes kubernetes ubiquitous bridge the

00:04:09,280 --> 00:04:12,480
gap

00:04:09,760 --> 00:04:14,000
between the traditional sdi software and

00:04:12,480 --> 00:04:16,799
the modern cloud native

00:04:14,000 --> 00:04:16,799
ecosystem

00:04:18,160 --> 00:04:22,400
and today we are announcing the first

00:04:20,239 --> 00:04:25,280
beta release of harvester

00:04:22,400 --> 00:04:27,440
it's harvested 0.2 and currently it

00:04:25,280 --> 00:04:30,160
supports the following features

00:04:27,440 --> 00:04:31,520
you can installing using iso your pc or

00:04:30,160 --> 00:04:34,400
pxe

00:04:31,520 --> 00:04:35,520
and it supports vm lifecycle management

00:04:34,400 --> 00:04:38,160
and they provide

00:04:35,520 --> 00:04:40,479
a distributed block storage we also

00:04:38,160 --> 00:04:42,880
provide the flexible network options

00:04:40,479 --> 00:04:44,720
including multiple nuke support and vlan

00:04:42,880 --> 00:04:46,720
networking

00:04:44,720 --> 00:04:48,400
there is also vm image management

00:04:46,720 --> 00:04:51,440
support and vm live

00:04:48,400 --> 00:04:53,520
vm live migration and finally is

00:04:51,440 --> 00:04:54,800
you are also able to spin up manage

00:04:53,520 --> 00:04:58,800
kubernetes clusters

00:04:54,800 --> 00:04:58,800
with the help of front launcher

00:05:00,320 --> 00:05:04,560
so here is the what architecture looks

00:05:02,479 --> 00:05:08,080
like in harvest today

00:05:04,560 --> 00:05:10,560
howister will install k3os on the nodes

00:05:08,080 --> 00:05:11,840
well the os might be changed in the in

00:05:10,560 --> 00:05:14,960
the future

00:05:11,840 --> 00:05:17,600
and that will keep you posted k3os has

00:05:14,960 --> 00:05:19,039
bundled with k3s so we can use it to

00:05:17,600 --> 00:05:22,160
create kubernetes cluster

00:05:19,039 --> 00:05:24,000
environmental nodes then the longhorn

00:05:22,160 --> 00:05:26,000
and convert will be installed once the

00:05:24,000 --> 00:05:28,000
kubernetes cluster is up

00:05:26,000 --> 00:05:29,440
now the user can start running vms or

00:05:28,000 --> 00:05:32,479
spin-off kubernetes cluster

00:05:29,440 --> 00:05:34,160
on top of those vms as you can see

00:05:32,479 --> 00:05:36,639
there are multiple networks available to

00:05:34,160 --> 00:05:38,080
the vms the management network is

00:05:36,639 --> 00:05:40,880
implemented by the kubernetes

00:05:38,080 --> 00:05:43,199
overlay networking other vlan networking

00:05:40,880 --> 00:05:44,479
are implemented by the harvester vlan ci

00:05:43,199 --> 00:05:46,479
plugin

00:05:44,479 --> 00:05:48,720
vm can choose to attach to multiple

00:05:46,479 --> 00:05:51,199
networks and that is thanks to the

00:05:48,720 --> 00:05:51,199
motors

00:05:51,759 --> 00:05:58,800
well enough talking let's now let me

00:05:54,960 --> 00:05:58,800
show a quick demo of harvester

00:06:03,120 --> 00:06:08,720
all right let's dive into some demo

00:06:06,400 --> 00:06:09,840
so once you install the harvester you

00:06:08,720 --> 00:06:13,280
should able to see

00:06:09,840 --> 00:06:14,960
the ip address you can use to login to

00:06:13,280 --> 00:06:18,479
how is the ui

00:06:14,960 --> 00:06:22,360
which is going to looking at like 172

00:06:18,479 --> 00:06:25,199
16 19.41 and column

00:06:22,360 --> 00:06:28,240
343 so put that

00:06:25,199 --> 00:06:28,720
in your web browser as you're able to

00:06:28,240 --> 00:06:31,759
get

00:06:28,720 --> 00:06:34,400
to the harvester ui so

00:06:31,759 --> 00:06:36,639
here um in fact for the first time if

00:06:34,400 --> 00:06:37,039
you log into harvester it will ask you

00:06:36,639 --> 00:06:39,680
to

00:06:37,039 --> 00:06:40,240
reset a new password here we already

00:06:39,680 --> 00:06:43,280
done that

00:06:40,240 --> 00:06:43,280
so let me login

00:06:47,280 --> 00:06:51,840
all right so now you are looking at have

00:06:50,240 --> 00:06:55,039
the dashboard

00:06:51,840 --> 00:06:58,160
so uh this is the harvester02

00:06:55,039 --> 00:07:00,960
rc1 and which is

00:06:58,160 --> 00:07:02,000
not a stable release yet so when the

00:07:00,960 --> 00:07:03,919
time this video

00:07:02,000 --> 00:07:06,080
was published you might see a newer

00:07:03,919 --> 00:07:08,880
version then uh what we

00:07:06,080 --> 00:07:10,160
what i have right now so we have total

00:07:08,880 --> 00:07:14,000
of three notes

00:07:10,160 --> 00:07:16,479
and two images and we can also see the

00:07:14,000 --> 00:07:19,120
cpu and the memory and the storage

00:07:16,479 --> 00:07:20,160
metrics down here as well and you can

00:07:19,120 --> 00:07:23,520
also see like

00:07:20,160 --> 00:07:26,720
recent events which is happening

00:07:23,520 --> 00:07:30,240
to this cluster a few seconds

00:07:26,720 --> 00:07:31,280
a few minutes ago let's go to the next

00:07:30,240 --> 00:07:33,599
page

00:07:31,280 --> 00:07:34,880
so on host you can see the detail of

00:07:33,599 --> 00:07:38,080
those three nodes

00:07:34,880 --> 00:07:39,440
and you can see um each of them has what

00:07:38,080 --> 00:07:41,520
operating system they add

00:07:39,440 --> 00:07:44,639
was the ip and all the other

00:07:41,520 --> 00:07:45,280
configuration stuff so on the virtual

00:07:44,639 --> 00:07:47,120
machine

00:07:45,280 --> 00:07:49,360
you can create virtual machine and the

00:07:47,120 --> 00:07:52,319
volumes will be the

00:07:49,360 --> 00:07:54,400
storage used by the virtual machines on

00:07:52,319 --> 00:07:57,440
the image page you should able to

00:07:54,400 --> 00:07:58,960
import new in virtual machine images for

00:07:57,440 --> 00:08:02,240
your

00:07:58,960 --> 00:08:02,639
for your use and here i already have

00:08:02,240 --> 00:08:05,759
like

00:08:02,639 --> 00:08:08,319
two images imported one is ubuntu

00:08:05,759 --> 00:08:10,840
another one is open sourcer

00:08:08,319 --> 00:08:12,960
so let's go create some virtual machines

00:08:10,840 --> 00:08:16,080
first

00:08:12,960 --> 00:08:19,680
create and i'm going to call this

00:08:16,080 --> 00:08:23,520
lib001 i'm going to give the full cpu

00:08:19,680 --> 00:08:26,240
the 14 giga memory i'm going to select

00:08:23,520 --> 00:08:27,199
leap image and the ssh key i don't have

00:08:26,240 --> 00:08:30,639
any right now

00:08:27,199 --> 00:08:32,719
so let's skip that on the walling page

00:08:30,639 --> 00:08:35,360
you can see that we are going to create

00:08:32,719 --> 00:08:38,320
a 10 gb disk automatically

00:08:35,360 --> 00:08:41,519
for the open source setup for this vm

00:08:38,320 --> 00:08:43,839
but you can also add more volumes

00:08:41,519 --> 00:08:46,000
on the network you can see there is

00:08:43,839 --> 00:08:48,000
already a default network set it up

00:08:46,000 --> 00:08:49,440
which is in fact kubernetes overlay

00:08:48,000 --> 00:08:52,399
networking if you know

00:08:49,440 --> 00:08:54,560
a bit more about kubernetes you can also

00:08:52,399 --> 00:08:56,240
add another network which is going to be

00:08:54,560 --> 00:08:57,839
one of the vlan networking you have

00:08:56,240 --> 00:09:00,320
configured

00:08:57,839 --> 00:09:02,399
so we are looking we will take a look at

00:09:00,320 --> 00:09:05,279
wetland network configuration later

00:09:02,399 --> 00:09:07,600
so let's just add this for vlan 91 for

00:09:05,279 --> 00:09:07,600
now

00:09:07,680 --> 00:09:11,440
in the advanced options you have the

00:09:10,800 --> 00:09:15,040
choices

00:09:11,440 --> 00:09:16,320
to re overwrite the host name and select

00:09:15,040 --> 00:09:19,600
machine type

00:09:16,320 --> 00:09:23,120
and also the dude cloud configuration

00:09:19,600 --> 00:09:26,399
using the metadata network data section

00:09:23,120 --> 00:09:29,440
so because the image we have specified

00:09:26,399 --> 00:09:30,800
is a cloud image so we need to reset the

00:09:29,440 --> 00:09:34,240
password so we can log

00:09:30,800 --> 00:09:36,480
in also since we have configured two

00:09:34,240 --> 00:09:38,000
network interface we can configure them

00:09:36,480 --> 00:09:40,720
to be

00:09:38,000 --> 00:09:41,839
dhcp so they were going to automatically

00:09:40,720 --> 00:09:45,519
acquire

00:09:41,839 --> 00:09:48,720
ip address from dhcp server after rep

00:09:45,519 --> 00:09:52,880
after after starting up so that's all we

00:09:48,720 --> 00:09:55,920
need let's click create now you can see

00:09:52,880 --> 00:09:58,800
the vm is in creation and

00:09:55,920 --> 00:09:58,800
we can take a look

00:10:00,720 --> 00:10:04,000
all the basic information is now showing

00:10:03,200 --> 00:10:07,680
up

00:10:04,000 --> 00:10:09,760
and uh including volumes network

00:10:07,680 --> 00:10:10,959
whether at this keys cloud config we

00:10:09,760 --> 00:10:13,120
have before

00:10:10,959 --> 00:10:14,160
and you can see that in fact in the

00:10:13,120 --> 00:10:18,240
event you can see

00:10:14,160 --> 00:10:21,680
those are coming from the kubernetes

00:10:18,240 --> 00:10:23,519
network kinetic events so

00:10:21,680 --> 00:10:27,760
in fact we are going to do more about

00:10:23,519 --> 00:10:27,760
this part later to make it more

00:10:28,079 --> 00:10:35,600
easy for the non-kubernetes orchestrator

00:10:31,839 --> 00:10:35,600
at the mean of the mean to work with

00:10:36,880 --> 00:10:40,079
all right let's go back to the previous

00:10:39,279 --> 00:10:42,399
page

00:10:40,079 --> 00:10:45,440
and we now we can see that the leaves

00:10:42,399 --> 00:10:48,959
are one vm is already running

00:10:45,440 --> 00:10:53,440
click console you should able to access

00:10:48,959 --> 00:10:53,440
the vnc console provided by the setup

00:10:55,600 --> 00:11:01,839
i need you

00:11:02,240 --> 00:11:07,279
well it turns out i need to i don't have

00:11:04,320 --> 00:11:07,279
enough space here

00:11:13,519 --> 00:11:17,040
yeah now it's good

00:11:21,279 --> 00:11:28,880
all right so since everything is working

00:11:25,040 --> 00:11:32,399
let's login

00:11:28,880 --> 00:11:34,800
opensuse is the username for the

00:11:32,399 --> 00:11:36,560
open source and leap and also the

00:11:34,800 --> 00:11:38,399
password will be the password we have

00:11:36,560 --> 00:11:41,279
set before

00:11:38,399 --> 00:11:43,040
so now you can also see there are two

00:11:41,279 --> 00:11:45,120
nicks is zero and it's one

00:11:43,040 --> 00:11:46,880
and the name of link depends on what

00:11:45,120 --> 00:11:48,880
operating system you are using but both

00:11:46,880 --> 00:11:51,519
of them already get the address

00:11:48,880 --> 00:11:52,880
and you can also notice that each one is

00:11:51,519 --> 00:11:57,440
getting addressed from

00:11:52,880 --> 00:12:01,279
172 16 91 which is

00:11:57,440 --> 00:12:05,120
in fact our vlan 91 in that range

00:12:01,279 --> 00:12:11,839
we can also write some

00:12:05,120 --> 00:12:11,839
simple tasks here

00:12:11,920 --> 00:12:18,399
all right so let's create this file demo

00:12:15,200 --> 00:12:21,839
and let's sync it so we can uh test our

00:12:18,399 --> 00:12:25,839
demo backup restore feature later

00:12:21,839 --> 00:12:28,880
so that's all for this vm let's close it

00:12:25,839 --> 00:12:32,079
so we can create

00:12:28,880 --> 00:12:38,000
a backup for this vm

00:12:32,079 --> 00:12:41,120
and let's name it first

00:12:38,000 --> 00:12:41,680
okay so in fact backup is not created

00:12:41,120 --> 00:12:43,920
yet

00:12:41,680 --> 00:12:45,360
this is just saying that the backup has

00:12:43,920 --> 00:12:48,560
been like initiated

00:12:45,360 --> 00:12:51,440
and we are going to iron out those

00:12:48,560 --> 00:12:52,000
small details more polish them before

00:12:51,440 --> 00:12:55,200
the final

00:12:52,000 --> 00:12:57,519
release and here we have a

00:12:55,200 --> 00:12:58,560
backup in progress and it should be done

00:12:57,519 --> 00:13:01,279
pretty soon

00:12:58,560 --> 00:13:02,959
and this backup mechanism is using the

00:13:01,279 --> 00:13:06,000
longhorn backup mechanism

00:13:02,959 --> 00:13:09,360
and to ship your vms backup to

00:13:06,000 --> 00:13:12,720
the remote s3 or nfs server and

00:13:09,360 --> 00:13:13,839
to do that you need to configure the

00:13:12,720 --> 00:13:17,600
backup target

00:13:13,839 --> 00:13:19,200
in the setting uh area let's get

00:13:17,600 --> 00:13:22,399
take a look at the backup and they

00:13:19,200 --> 00:13:24,320
should be finished anytime

00:13:22,399 --> 00:13:26,160
and before that we can go through the

00:13:24,320 --> 00:13:29,920
other features we have

00:13:26,160 --> 00:13:31,680
of the first one in advanced menu is the

00:13:29,920 --> 00:13:35,120
vm template

00:13:31,680 --> 00:13:38,560
for users you can create

00:13:35,120 --> 00:13:41,440
a specific template for certain type of

00:13:38,560 --> 00:13:44,000
images for example here we have listed

00:13:41,440 --> 00:13:46,639
if you want to have iso image which

00:13:44,000 --> 00:13:47,760
means you are going to install iso to

00:13:46,639 --> 00:13:49,920
the

00:13:47,760 --> 00:13:50,959
to the root disk you'd better choose the

00:13:49,920 --> 00:13:52,079
iso based

00:13:50,959 --> 00:13:54,079
image because they're going to

00:13:52,079 --> 00:13:57,839
automatically load your image as

00:13:54,079 --> 00:13:59,760
iso rather than load it on the root disk

00:13:57,839 --> 00:14:01,440
and the raw image base is the default

00:13:59,760 --> 00:14:04,079
one we are using

00:14:01,440 --> 00:14:04,800
and the windows iso image based is going

00:14:04,079 --> 00:14:08,160
to both

00:14:04,800 --> 00:14:09,360
load the iso and also a certain windows

00:14:08,160 --> 00:14:12,480
virtual

00:14:09,360 --> 00:14:14,959
driver container driver vm

00:14:12,480 --> 00:14:17,120
volume in order for the windows to

00:14:14,959 --> 00:14:20,399
achieve

00:14:17,120 --> 00:14:23,760
to make the virtual i o driver function

00:14:20,399 --> 00:14:25,279
so yeah now the backup is here but we'll

00:14:23,760 --> 00:14:27,440
come back to that later

00:14:25,279 --> 00:14:29,760
on the network section you can see that

00:14:27,440 --> 00:14:31,680
we have already created two network here

00:14:29,760 --> 00:14:33,360
and with different vlan id

00:14:31,680 --> 00:14:35,279
and to create that in fact it's very

00:14:33,360 --> 00:14:37,680
easy and you can

00:14:35,279 --> 00:14:38,480
i know that we have configured a few

00:14:37,680 --> 00:14:42,000
vlans

00:14:38,480 --> 00:14:43,360
in our switch so i can put vlan 33 there

00:14:42,000 --> 00:14:45,519
as well

00:14:43,360 --> 00:14:46,480
and this programming we are going to

00:14:45,519 --> 00:14:48,480
populate it on

00:14:46,480 --> 00:14:50,240
all the nodes and create the

00:14:48,480 --> 00:14:53,839
corresponding vlan

00:14:50,240 --> 00:14:56,959
for the network essential keys

00:14:53,839 --> 00:14:59,040
i don't have anything here and only user

00:14:56,959 --> 00:15:00,000
our beta allows now is going to be the

00:14:59,040 --> 00:15:02,000
admin user

00:15:00,000 --> 00:15:05,199
we are in we were going to support

00:15:02,000 --> 00:15:07,760
multi-tenants in the later releases

00:15:05,199 --> 00:15:09,040
all right so let's go back to the backup

00:15:07,760 --> 00:15:12,399
now we see that

00:15:09,040 --> 00:15:14,720
lib 01 backup is already ready so we can

00:15:12,399 --> 00:15:16,240
try to see oh does this really record

00:15:14,720 --> 00:15:19,040
our data

00:15:16,240 --> 00:15:19,040
let's try it

00:15:22,399 --> 00:15:25,440
yeah i'm going to create a new virtual

00:15:24,639 --> 00:15:28,639
machine

00:15:25,440 --> 00:15:31,839
name was leave zero one restore

00:15:28,639 --> 00:15:33,360
and let's see how that goes and which in

00:15:31,839 --> 00:15:34,160
the virtual machine and you can see the

00:15:33,360 --> 00:15:38,720
restore

00:15:34,160 --> 00:15:38,720
is happening and it will take some time

00:15:38,839 --> 00:15:43,040
so

00:15:40,000 --> 00:15:43,040
let's wait a bit

00:15:44,000 --> 00:15:47,519
now we see the lib 01 restore is already

00:15:46,959 --> 00:15:50,880
running

00:15:47,519 --> 00:15:50,880
let's access the console

00:15:51,199 --> 00:15:55,839
yeah it's putting up

00:16:00,959 --> 00:16:05,920
in fact one point of this restore is all

00:16:03,920 --> 00:16:08,560
the information on the configuration

00:16:05,920 --> 00:16:11,920
from original vm will be carried over to

00:16:08,560 --> 00:16:14,800
this restored vm as well

00:16:11,920 --> 00:16:16,720
so you can see that when this vm was

00:16:14,800 --> 00:16:18,959
going up it's going to get created

00:16:16,720 --> 00:16:21,600
we're going to have like two nix as we

00:16:18,959 --> 00:16:23,680
configure it configured before

00:16:21,600 --> 00:16:27,120
and also both of them will be configured

00:16:23,680 --> 00:16:27,120
with the http address

00:16:34,480 --> 00:16:37,839
so let's try logging

00:16:38,240 --> 00:16:41,839
by the way password will be the same too

00:16:40,160 --> 00:16:44,560
because the same cloud config

00:16:41,839 --> 00:16:44,560
we have stored

00:16:44,959 --> 00:16:49,600
okay so both e0 and a61 has get an ip

00:16:48,880 --> 00:16:53,600
address

00:16:49,600 --> 00:16:55,839
and if you take a look and this demo

00:16:53,600 --> 00:16:58,000
content has been written as well so this

00:16:55,839 --> 00:17:01,199
is indeed a restore

00:16:58,000 --> 00:17:03,360
from our previous uh vm

00:17:01,199 --> 00:17:05,600
so that's that's good that makes audi

00:17:03,360 --> 00:17:06,079
works all right so let's move on to the

00:17:05,600 --> 00:17:08,480
next

00:17:06,079 --> 00:17:08,480
demo

00:17:11,199 --> 00:17:18,319
all right so another thing you can do

00:17:14,640 --> 00:17:20,559
with harvester is in fact

00:17:18,319 --> 00:17:22,240
using harvester to create kubernetes

00:17:20,559 --> 00:17:24,799
cluster directly

00:17:22,240 --> 00:17:25,520
so that part of experience is still in

00:17:24,799 --> 00:17:28,640
polishing

00:17:25,520 --> 00:17:31,679
but we can show you some early result

00:17:28,640 --> 00:17:35,360
we have now so in the settings

00:17:31,679 --> 00:17:37,919
you need to enable

00:17:35,360 --> 00:17:37,919
wrencher

00:17:38,880 --> 00:17:44,240
and then you can see on the right top

00:17:41,600 --> 00:17:47,280
right you have a wrencher icon here

00:17:44,240 --> 00:17:50,400
and click that we are going to

00:17:47,280 --> 00:17:53,360
lead you to our building wrencher so

00:17:50,400 --> 00:17:55,440
in this uh this wrench version in for

00:17:53,360 --> 00:17:57,840
for this run change duration we have

00:17:55,440 --> 00:17:59,039
also bundled with the harvest note

00:17:57,840 --> 00:18:02,480
driver as well

00:17:59,039 --> 00:18:06,160
so you can just go to the add cluster

00:18:02,480 --> 00:18:08,640
and then click harvester and you

00:18:06,160 --> 00:18:10,320
can just create cluster from here so

00:18:08,640 --> 00:18:13,760
let's call it zero

00:18:10,320 --> 00:18:17,200
guest cluster and just set

00:18:13,760 --> 00:18:20,480
the name here as one

00:18:17,200 --> 00:18:23,280
so three note template

00:18:20,480 --> 00:18:24,559
already being chosen and this is created

00:18:23,280 --> 00:18:27,679
before

00:18:24,559 --> 00:18:28,480
sdd control playing and everything looks

00:18:27,679 --> 00:18:32,240
good

00:18:28,480 --> 00:18:32,240
and let's try to create it

00:18:34,640 --> 00:18:40,480
all right so now rancher is talking to

00:18:37,280 --> 00:18:42,160
the harvester to create this cluster

00:18:40,480 --> 00:18:43,520
and if you take a look back on the

00:18:42,160 --> 00:18:46,640
virtual machines

00:18:43,520 --> 00:18:50,240
momentarily you should able to see three

00:18:46,640 --> 00:18:51,600
nodes has been created and trying to

00:18:50,240 --> 00:18:55,360
start and

00:18:51,600 --> 00:18:58,160
search for the vms for the new

00:18:55,360 --> 00:18:59,919
rancher uh managed manchester spin-off

00:18:58,160 --> 00:19:02,720
kubernetes cluster

00:18:59,919 --> 00:19:05,600
so this is going to take a while i will

00:19:02,720 --> 00:19:05,600
skip forward

00:19:06,000 --> 00:19:09,600
now the class is ready and you can take

00:19:09,039 --> 00:19:11,919
a look at

00:19:09,600 --> 00:19:13,360
the note page and the listing three

00:19:11,919 --> 00:19:16,320
notes which does the same

00:19:13,360 --> 00:19:16,720
as we see from the harvester side and

00:19:16,320 --> 00:19:19,840
now

00:19:16,720 --> 00:19:22,480
you can just work on this cluster and

00:19:19,840 --> 00:19:23,200
adding deploy applications adding

00:19:22,480 --> 00:19:25,280
workloads

00:19:23,200 --> 00:19:28,400
do enter whatever you want with this

00:19:25,280 --> 00:19:28,400
kubernetes cluster

00:19:29,520 --> 00:19:40,000
alright so that concludes our demo

00:19:38,000 --> 00:19:42,640
right so this is the roadmap of

00:19:40,000 --> 00:19:45,679
harvester we're planning to have harvest

00:19:42,640 --> 00:19:48,559
0.3 released in the q3 this year

00:19:45,679 --> 00:19:50,320
and the ga released later this year

00:19:48,559 --> 00:19:52,480
there are still tons of work we need to

00:19:50,320 --> 00:19:54,320
do between now and ga as you can see

00:19:52,480 --> 00:19:56,640
from the list here

00:19:54,320 --> 00:19:58,640
but i encourage you to download harvest

00:19:56,640 --> 00:20:02,000
the beta release and give it a try

00:19:58,640 --> 00:20:02,000
we love to have your feedback

00:20:02,640 --> 00:20:06,400
if you have any questions regarding

00:20:04,320 --> 00:20:07,280
harvester feel free to reach out to the

00:20:06,400 --> 00:20:09,360
team

00:20:07,280 --> 00:20:11,840
you can find the latest iso in the

00:20:09,360 --> 00:20:15,600
github harvester slash harvester

00:20:11,840 --> 00:20:18,240
or our website at harvest ci dot io

00:20:15,600 --> 00:20:19,280
also feel free to join the rancho user

00:20:18,240 --> 00:20:21,520
slack channel

00:20:19,280 --> 00:20:23,520
harvester and we are looking forward to

00:20:21,520 --> 00:20:26,880
your feedback as always

00:20:23,520 --> 00:20:26,880

YouTube URL: https://www.youtube.com/watch?v=ThYN6b0-2mc


