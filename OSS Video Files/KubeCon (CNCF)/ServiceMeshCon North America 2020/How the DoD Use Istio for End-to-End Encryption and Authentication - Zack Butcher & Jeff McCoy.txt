Title: How the DoD Use Istio for End-to-End Encryption and Authentication - Zack Butcher & Jeff McCoy
Publication date: 2020-11-25
Playlist: ServiceMeshCon North America 2020
Description: 
	How the DoD Use Istio for End-to-End Encryption and Authentication - Zack Butcher, Tetrate & Jeff McCoy, Platform One

Security remains one of the primary drivers behind service mesh adoption today. We’ll describe why and how Platform One is using a service mesh - Istio - to provide both encryption in transit as well as end-user authentication via SSO for applications across the Department of Defense. We’ll dig into the practical challenges involved in deploying the Istio ecosystem’s authservice, which implements Envoy’s external auth API to provide SSO, and the design considerations that went into making the system incredibly simple for application teams running on Platform One to consume. Finally, we’ll briefly introduce an upcoming NIST IR covering the usage of a service mesh to provide authentication and authorization for applications.
Captions: 
	00:00:00,000 --> 00:00:03,439
hey y'all uh welcome and thanks for

00:00:01,520 --> 00:00:05,200
having us uh we're gonna talk today

00:00:03,439 --> 00:00:06,560
uh a little bit about how the dod is

00:00:05,200 --> 00:00:08,639
using istio

00:00:06,560 --> 00:00:10,880
uh to provide both india and encryption

00:00:08,639 --> 00:00:13,360
as well as uh authentication

00:00:10,880 --> 00:00:15,759
uh so i am zac butcher i'm one of the

00:00:13,360 --> 00:00:17,119
founding engineers at teftrate

00:00:15,759 --> 00:00:19,680
i'm also a long-time member of the seo

00:00:17,119 --> 00:00:23,279
community and one of the istio steering

00:00:19,680 --> 00:00:23,279
community members as well

00:00:25,039 --> 00:00:28,800
awesome and i'm jeff mccoy i'm the cto

00:00:27,359 --> 00:00:30,320
for platform one

00:00:28,800 --> 00:00:31,519
a dod organization we'll talk about a

00:00:30,320 --> 00:00:32,399
little more in depth in the next few

00:00:31,519 --> 00:00:34,399
slides

00:00:32,399 --> 00:00:37,840
but we're trying to help modernize

00:00:34,399 --> 00:00:37,840
software and department of defense

00:00:38,719 --> 00:00:41,360
great so today we're going to talk about

00:00:40,079 --> 00:00:43,520
a couple different things so one we'll

00:00:41,360 --> 00:00:45,520
do just a little bit of context setting

00:00:43,520 --> 00:00:46,640
tell everybody kind of what platform one

00:00:45,520 --> 00:00:48,719
is what the

00:00:46,640 --> 00:00:50,480
problems are solving and how they're

00:00:48,719 --> 00:00:52,079
going about solving those problems

00:00:50,480 --> 00:00:54,239
uh some of their use cases around

00:00:52,079 --> 00:00:56,640
service mesh specifically

00:00:54,239 --> 00:00:59,120
uh some of the pain that we've gone

00:00:56,640 --> 00:01:01,359
through kind of on that service journey

00:00:59,120 --> 00:01:02,480
uh a little bit of practical oh and as

00:01:01,359 --> 00:01:03,680
part of the use cases we'll actually

00:01:02,480 --> 00:01:05,920
show you a little bit i think

00:01:03,680 --> 00:01:06,799
uh some uh we'll actually have a little

00:01:05,920 --> 00:01:09,360
demo there

00:01:06,799 --> 00:01:09,840
um we'll talk about some of the pain

00:01:09,360 --> 00:01:12,320
that

00:01:09,840 --> 00:01:13,840
uh that uh jeff and kind of his favorite

00:01:12,320 --> 00:01:16,560
work has experienced

00:01:13,840 --> 00:01:18,320
uh as as they've kind of started on this

00:01:16,560 --> 00:01:20,560
mess journey

00:01:18,320 --> 00:01:21,759
uh out of that pain we'll talk about uh

00:01:20,560 --> 00:01:23,360
a couple of some advice

00:01:21,759 --> 00:01:25,360
for uh for kind of going down this path

00:01:23,360 --> 00:01:26,640
yourself i finally will mention just

00:01:25,360 --> 00:01:27,360
very briefly a little bit upcoming

00:01:26,640 --> 00:01:30,479
literature

00:01:27,360 --> 00:01:31,920
uh as well uh so jeff take it

00:01:30,479 --> 00:01:33,920
take it away tell us about the platform

00:01:31,920 --> 00:01:37,439
one please

00:01:33,920 --> 00:01:37,439
yes the platform one is um

00:01:37,680 --> 00:01:41,119
i guess in a nutshell where we're trying

00:01:39,520 --> 00:01:43,920
to do is to

00:01:41,119 --> 00:01:45,520
is to find a repeatable pattern um

00:01:43,920 --> 00:01:47,759
that's somewhat open source

00:01:45,520 --> 00:01:49,520
that's collaborative in nature among the

00:01:47,759 --> 00:01:50,399
various duty organizations so that we

00:01:49,520 --> 00:01:52,079
can

00:01:50,399 --> 00:01:53,280
kind of move the ball forward and how we

00:01:52,079 --> 00:01:54,079
think about committees how we think

00:01:53,280 --> 00:01:56,079
about

00:01:54,079 --> 00:01:57,280
it's the cyrus stack and all the tools

00:01:56,079 --> 00:01:58,719
that you get with kubernetes

00:01:57,280 --> 00:02:00,479
service mesh is one of those components

00:01:58,719 --> 00:02:02,240
it is not the only component so it's

00:02:00,479 --> 00:02:05,360
mesh it's not a magic eight ball for us

00:02:02,240 --> 00:02:06,960
it is one piece of a layered stack of

00:02:05,360 --> 00:02:08,800
security that we offer

00:02:06,960 --> 00:02:10,000
and that we try to optimize and one of

00:02:08,800 --> 00:02:11,039
the goals of platform one is to

00:02:10,000 --> 00:02:13,599
hopefully

00:02:11,039 --> 00:02:15,280
over the next year or two is to really

00:02:13,599 --> 00:02:17,200
push all this back to open source

00:02:15,280 --> 00:02:18,560
and both the things that we're building

00:02:17,200 --> 00:02:19,360
as in writing code greenfield

00:02:18,560 --> 00:02:20,879
applications

00:02:19,360 --> 00:02:22,720
and also just the integrations we're

00:02:20,879 --> 00:02:24,879
building um we do this

00:02:22,720 --> 00:02:25,760
uh you see a few tools listed there like

00:02:24,879 --> 00:02:27,520
repo one

00:02:25,760 --> 00:02:29,599
which is essentially our version of

00:02:27,520 --> 00:02:31,599
github if you will it's our open source

00:02:29,599 --> 00:02:33,360
site on the dod where we host all of the

00:02:31,599 --> 00:02:35,360
stuff these urls are changing the next

00:02:33,360 --> 00:02:36,800
few weeks to dso dot mil but for now

00:02:35,360 --> 00:02:39,120
they're d sub that io

00:02:36,800 --> 00:02:41,360
um and this is where we put a lot of our

00:02:39,120 --> 00:02:42,640
um you know open source code where we're

00:02:41,360 --> 00:02:43,280
actually working to mirror this back to

00:02:42,640 --> 00:02:45,360
github

00:02:43,280 --> 00:02:47,200
uh source of truth will still be our git

00:02:45,360 --> 00:02:49,360
lab but it'll allow others to at least

00:02:47,200 --> 00:02:51,040
have a wider audience to see it um and

00:02:49,360 --> 00:02:52,239
then with that we also have the iron

00:02:51,040 --> 00:02:55,519
bank which is

00:02:52,239 --> 00:02:58,959
a way for the dod to to vet

00:02:55,519 --> 00:03:02,319
validate a credit stamp sign and publish

00:02:58,959 --> 00:03:03,840
images in a way that we trust using

00:03:02,319 --> 00:03:05,519
modern tools for scanning whether that

00:03:03,840 --> 00:03:07,440
be twist lock or anchor or

00:03:05,519 --> 00:03:09,840
um you know openscap if that's your

00:03:07,440 --> 00:03:11,120
fancy if you care about the sticks and

00:03:09,840 --> 00:03:13,120
all those other tools we kind of layer

00:03:11,120 --> 00:03:14,640
on top of that just to validate the

00:03:13,120 --> 00:03:15,680
the state of the images to make sure

00:03:14,640 --> 00:03:17,760
that they're actually following a

00:03:15,680 --> 00:03:18,159
trusted baseline and a trusted supply

00:03:17,760 --> 00:03:20,239
chain

00:03:18,159 --> 00:03:21,680
so we have a binary agent of trust that

00:03:20,239 --> 00:03:25,280
matters we use the ubi

00:03:21,680 --> 00:03:27,440
or scratch or distrolus images

00:03:25,280 --> 00:03:28,720
as our bases and then we we stack on top

00:03:27,440 --> 00:03:31,120
of those layers and sign those and

00:03:28,720 --> 00:03:32,400
publish those out for people to consume

00:03:31,120 --> 00:03:33,920
and from that we produce something

00:03:32,400 --> 00:03:34,720
called big bang which is just a way for

00:03:33,920 --> 00:03:37,760
us to

00:03:34,720 --> 00:03:40,080
um automate the deployments of

00:03:37,760 --> 00:03:41,280
things like in dsop here we list out

00:03:40,080 --> 00:03:43,040
here that has things like

00:03:41,280 --> 00:03:45,760
our chat solution which right now it's

00:03:43,040 --> 00:03:47,840
mattermost we use jira confluence

00:03:45,760 --> 00:03:49,360
gitlab with a lot of the stuff from the

00:03:47,840 --> 00:03:52,959
galaxy ecosystem

00:03:49,360 --> 00:03:55,040
405 sonar cube um oauth sap

00:03:52,959 --> 00:03:57,120
a ton of other scanning tools we add to

00:03:55,040 --> 00:03:58,319
the mix just like we mentioned earlier

00:03:57,120 --> 00:04:00,400
anchor and a few others and

00:03:58,319 --> 00:04:01,920
we are continuing evolving that pipeline

00:04:00,400 --> 00:04:03,840
and the whole point of this is

00:04:01,920 --> 00:04:05,760
for the devsecops platform is is to

00:04:03,840 --> 00:04:08,720
create a repeatable process

00:04:05,760 --> 00:04:10,560
for building code um for weapon systems

00:04:08,720 --> 00:04:12,560
both at the unclassified level and at

00:04:10,560 --> 00:04:14,000
the secret top secret level so that

00:04:12,560 --> 00:04:16,000
the engineers have the same experience

00:04:14,000 --> 00:04:17,600
whether they're sitting literally in a

00:04:16,000 --> 00:04:18,160
coffee shop or if they're sitting inside

00:04:17,600 --> 00:04:20,959
of

00:04:18,160 --> 00:04:22,000
you know a compartmented secure facility

00:04:20,959 --> 00:04:24,720
with no windows

00:04:22,000 --> 00:04:27,120
and and no cell phones so so we want to

00:04:24,720 --> 00:04:28,479
give a similar experience to engineers

00:04:27,120 --> 00:04:30,639
across the board whether they're in that

00:04:28,479 --> 00:04:32,479
most restrictive working on nuclear

00:04:30,639 --> 00:04:34,800
weapon systems or if they're

00:04:32,479 --> 00:04:36,639
building web apps to show dashboards for

00:04:34,800 --> 00:04:38,639
for bosses in the military or

00:04:36,639 --> 00:04:39,919
or the department and so so really

00:04:38,639 --> 00:04:43,600
platform

00:04:39,919 --> 00:04:45,840
in a hole is is a way for the dod to

00:04:43,600 --> 00:04:46,800
to modernize and optimize how we

00:04:45,840 --> 00:04:48,960
automate

00:04:46,800 --> 00:04:50,240
devsecops using kubernetes and and the

00:04:48,960 --> 00:04:53,040
various cyber tools

00:04:50,240 --> 00:04:53,759
um that we'll go over in this briefing

00:04:53,040 --> 00:04:55,919
yeah perfect

00:04:53,759 --> 00:04:57,680
and so yeah some of the some of the spec

00:04:55,919 --> 00:05:00,800
specific technology pixel y'all uh

00:04:57,680 --> 00:05:03,600
chosen to build the platform

00:05:00,800 --> 00:05:04,080
yeah so i i think um a couple years ago

00:05:03,600 --> 00:05:05,199
when we

00:05:04,080 --> 00:05:07,199
first started talking about doing this

00:05:05,199 --> 00:05:08,720
in the dod someone already gone down

00:05:07,199 --> 00:05:10,000
this rabbit hole with uh you know

00:05:08,720 --> 00:05:12,560
rancher had a really great

00:05:10,000 --> 00:05:13,840
kind of um gateway drug into this world

00:05:12,560 --> 00:05:14,639
for a lot of people who didn't know

00:05:13,840 --> 00:05:16,320
varieties

00:05:14,639 --> 00:05:18,080
um so people who knew automation but

00:05:16,320 --> 00:05:18,800
didn't know communities in the dod went

00:05:18,080 --> 00:05:21,280
down that

00:05:18,800 --> 00:05:21,840
that hole we chose um on my team to

00:05:21,280 --> 00:05:24,880
start with

00:05:21,840 --> 00:05:26,960
upstream i'm using cube am um and we hit

00:05:24,880 --> 00:05:29,199
we landed in jwix after a few weeks of

00:05:26,960 --> 00:05:32,160
learning um and that was with istio and

00:05:29,199 --> 00:05:32,880
al jaywix is a top secret environment um

00:05:32,160 --> 00:05:35,759
that that

00:05:32,880 --> 00:05:36,639
was out here in colorado and um so we we

00:05:35,759 --> 00:05:38,160
had to learn a bunch

00:05:36,639 --> 00:05:39,520
through that we did some other we made

00:05:38,160 --> 00:05:40,720
some of the news we deployed this to

00:05:39,520 --> 00:05:42,800
f-16s

00:05:40,720 --> 00:05:45,120
last fall with the team out of hill air

00:05:42,800 --> 00:05:47,280
force base um using sdo and the same

00:05:45,120 --> 00:05:49,360
kind of basic stack um and and what it

00:05:47,280 --> 00:05:51,280
proved for us was

00:05:49,360 --> 00:05:53,360
and and this need to be proven this is

00:05:51,280 --> 00:05:55,280
new this is not news to anyone in this

00:05:53,360 --> 00:05:57,840
conference but it proves to the dod

00:05:55,280 --> 00:05:59,520
stakeholders that you can take the same

00:05:57,840 --> 00:06:02,080
product the same technology and deploy

00:05:59,520 --> 00:06:03,919
it in a web app and a skiff

00:06:02,080 --> 00:06:06,080
on a jet we're preparing to launch

00:06:03,919 --> 00:06:08,080
satellite with the same technologies um

00:06:06,080 --> 00:06:09,680
we've the youtube was famously did that

00:06:08,080 --> 00:06:11,199
recently and and so

00:06:09,680 --> 00:06:13,520
the dod's starting to latch into this

00:06:11,199 --> 00:06:15,120
concept of what i would call

00:06:13,520 --> 00:06:17,199
um it's more than infrastructure

00:06:15,120 --> 00:06:19,680
agnostic it's really more about

00:06:17,199 --> 00:06:21,120
platform independence and and so with

00:06:19,680 --> 00:06:23,520
platform one we actually don't

00:06:21,120 --> 00:06:25,199
say valve shot use extreme commodities

00:06:23,520 --> 00:06:25,840
or you should use rancher or you should

00:06:25,199 --> 00:06:29,759
use

00:06:25,840 --> 00:06:32,000
convoy or you know tkg or ocp or

00:06:29,759 --> 00:06:33,120
you pick your poison right we say just

00:06:32,000 --> 00:06:35,120
give us a

00:06:33,120 --> 00:06:37,199
n minus two compliant cluster so you

00:06:35,120 --> 00:06:37,840
know accumulation is 117 118 something

00:06:37,199 --> 00:06:40,000
like that

00:06:37,840 --> 00:06:41,919
cluster and then we will deploy our

00:06:40,000 --> 00:06:43,199
stack on top of that for you

00:06:41,919 --> 00:06:44,880
what's really cool about that though is

00:06:43,199 --> 00:06:46,800
we have very different inconsistent

00:06:44,880 --> 00:06:47,360
environments so we try to segment those

00:06:46,800 --> 00:06:48,960
layers

00:06:47,360 --> 00:06:50,400
so we can move between classified and

00:06:48,960 --> 00:06:52,960
then classified easily

00:06:50,400 --> 00:06:54,080
and istio is a very solid choice for

00:06:52,960 --> 00:06:55,440
this there because we have a service

00:06:54,080 --> 00:06:56,080
mesh we need to decide pattern we love

00:06:55,440 --> 00:06:57,680
envoy

00:06:56,080 --> 00:06:59,680
um istio has some growing pains we'll

00:06:57,680 --> 00:07:01,120
talk about but it made a lot of sense

00:06:59,680 --> 00:07:02,560
even in the early days after we got

00:07:01,120 --> 00:07:04,240
through the initial hurdles of

00:07:02,560 --> 00:07:05,599
holy craps there's a lot of yammel to

00:07:04,240 --> 00:07:06,960
learn a lot of manifest and a lot of

00:07:05,599 --> 00:07:09,120
things going on here

00:07:06,960 --> 00:07:10,080
um we've we've worked through most of

00:07:09,120 --> 00:07:11,919
those kinks we think

00:07:10,080 --> 00:07:14,800
now so we're getting to a repeatable

00:07:11,919 --> 00:07:17,039
process finally with this geo

00:07:14,800 --> 00:07:18,479
yeah yeah and so today a lot of what

00:07:17,039 --> 00:07:20,560
we're going to spend time talking about

00:07:18,479 --> 00:07:21,599
are uh kind of what we just bolded there

00:07:20,560 --> 00:07:23,840
right so

00:07:21,599 --> 00:07:25,039
uh the kind of basic uh encryption and

00:07:23,840 --> 00:07:27,360
transit which

00:07:25,039 --> 00:07:28,639
uh probably if you're watching smash con

00:07:27,360 --> 00:07:30,080
or watch it previously you've heard a

00:07:28,639 --> 00:07:31,599
lot about uh

00:07:30,080 --> 00:07:33,440
we'll talk about it a little bit and

00:07:31,599 --> 00:07:35,280
then we'll talk kind of about that that

00:07:33,440 --> 00:07:37,360
uh framework for for securing

00:07:35,280 --> 00:07:40,240
applications and how we're

00:07:37,360 --> 00:07:40,240
starting to build that

00:07:40,560 --> 00:07:45,840
um yeah so i mean the the first use case

00:07:44,000 --> 00:07:47,759
and and i think uh you know from my

00:07:45,840 --> 00:07:48,400
perspective uh this is one of the

00:07:47,759 --> 00:07:51,039
primary

00:07:48,400 --> 00:07:52,000
reasons that that i see mesh adoption

00:07:51,039 --> 00:07:55,440
right and

00:07:52,000 --> 00:07:57,520
uh is the encryption and transit right

00:07:55,440 --> 00:07:58,960
for a variety of regulatory reasons for

00:07:57,520 --> 00:07:59,759
a variety of security reasons this is

00:07:58,960 --> 00:08:01,520
kind of

00:07:59,759 --> 00:08:03,199
uh what i almost call the the standard

00:08:01,520 --> 00:08:06,879
mesh use case right

00:08:03,199 --> 00:08:08,400
um you all had kind of some interesting

00:08:06,879 --> 00:08:10,080
requirements though or some kind of

00:08:08,400 --> 00:08:11,520
interesting snags versus

00:08:10,080 --> 00:08:13,280
a lot of folks are doing this in the

00:08:11,520 --> 00:08:14,639
form of a lot of legacy a lot of

00:08:13,280 --> 00:08:16,160
off-the-shelf and a lot of

00:08:14,639 --> 00:08:18,319
uh open source software that y'all were

00:08:16,160 --> 00:08:20,560
kind of pulling in to use right

00:08:18,319 --> 00:08:21,840
uh so i i know we hit some pain points

00:08:20,560 --> 00:08:25,280
there that i think we'll talk about

00:08:21,840 --> 00:08:27,919
in depth later um but that was

00:08:25,280 --> 00:08:28,400
uh still not not super easy to to kind

00:08:27,919 --> 00:08:31,599
of get

00:08:28,400 --> 00:08:33,200
encryption everywhere correct yeah and

00:08:31,599 --> 00:08:34,159
it's it's a constant battle like like

00:08:33,200 --> 00:08:34,959
you said we'll talk about some more

00:08:34,159 --> 00:08:37,279
specifics but

00:08:34,959 --> 00:08:38,880
the bottom line was the the automation

00:08:37,279 --> 00:08:40,000
of encryption was super important to us

00:08:38,880 --> 00:08:41,440
um we have some

00:08:40,000 --> 00:08:42,959
hard requirements especially in the

00:08:41,440 --> 00:08:44,560
classified systems i mean if you think

00:08:42,959 --> 00:08:45,120
about the consequences if we mess this

00:08:44,560 --> 00:08:47,279
up

00:08:45,120 --> 00:08:48,560
uh the systems using this are not going

00:08:47,279 --> 00:08:51,279
to affect your gmail

00:08:48,560 --> 00:08:52,800
it's going to affect national treaties

00:08:51,279 --> 00:08:54,160
so we have to be really careful that we

00:08:52,800 --> 00:08:56,399
get this right um

00:08:54,160 --> 00:08:58,000
so so things like fips validation is

00:08:56,399 --> 00:08:59,200
becoming more more important to us

00:08:58,000 --> 00:09:00,959
which is something we're working through

00:08:59,200 --> 00:09:02,080
with the different kubernetes layers

00:09:00,959 --> 00:09:03,680
right now we're going to be bringing

00:09:02,080 --> 00:09:05,519
that to other layers too

00:09:03,680 --> 00:09:07,040
including the tls rotation process so

00:09:05,519 --> 00:09:08,480
there's there's all these layers here

00:09:07,040 --> 00:09:10,000
that we care about but certainly it's

00:09:08,480 --> 00:09:11,200
it's not been like easy button

00:09:10,000 --> 00:09:12,959
everywhere it's every

00:09:11,200 --> 00:09:14,399
neutral we bring into the ecosystem is a

00:09:12,959 --> 00:09:16,560
new challenge for us uh

00:09:14,399 --> 00:09:19,040
to to figure out how to make that happy

00:09:16,560 --> 00:09:22,480
in istio land when it's complex

00:09:19,040 --> 00:09:24,560
yep yep on the flip side though uh

00:09:22,480 --> 00:09:25,680
the key rotation that that issue brings

00:09:24,560 --> 00:09:27,040
i think is

00:09:25,680 --> 00:09:28,959
has really kind of opened up a lot of

00:09:27,040 --> 00:09:30,480
doors right uh because this

00:09:28,959 --> 00:09:31,600
i think that kind of the the kind of

00:09:30,480 --> 00:09:32,800
encryption and trains that they all are

00:09:31,600 --> 00:09:34,240
getting today

00:09:32,800 --> 00:09:36,720
would not have been achievable with your

00:09:34,240 --> 00:09:39,360
legacy pki uh do you think that

00:09:36,720 --> 00:09:40,959
totally yeah yeah no i fully agree i

00:09:39,360 --> 00:09:42,160
think it's it's really um that that's

00:09:40,959 --> 00:09:42,720
one of the biggest selling points is

00:09:42,160 --> 00:09:45,040
just

00:09:42,720 --> 00:09:46,160
um handling of cert rotation handling of

00:09:45,040 --> 00:09:48,320
issuance handling of

00:09:46,160 --> 00:09:49,920
verification all these things that um in

00:09:48,320 --> 00:09:51,279
pk island we take for granted and unders

00:09:49,920 --> 00:09:52,560
the dod is one of the biggest pki

00:09:51,279 --> 00:09:54,880
consumers on the planet

00:09:52,560 --> 00:09:57,200
um with you know the common access card

00:09:54,880 --> 00:09:59,839
um it it's how the entire

00:09:57,200 --> 00:10:01,279
um forces in the in the u.s government

00:09:59,839 --> 00:10:02,720
essentially does their business and

00:10:01,279 --> 00:10:04,079
authenticates the system so

00:10:02,720 --> 00:10:06,320
we're talking about millions and

00:10:04,079 --> 00:10:08,480
millions of active tokens and

00:10:06,320 --> 00:10:09,519
and so it's it's a massive system so we

00:10:08,480 --> 00:10:11,360
we understand

00:10:09,519 --> 00:10:12,640
the importance but but with that comes a

00:10:11,360 --> 00:10:14,480
lot of complexity so the more we can

00:10:12,640 --> 00:10:18,560
make that more like cattle

00:10:14,480 --> 00:10:22,399
um the better off we are yeah

00:10:18,560 --> 00:10:23,839
yep exactly um so that was just kind of

00:10:22,399 --> 00:10:25,120
briefly and again we didn't spend a ton

00:10:23,839 --> 00:10:26,560
of time there on encryption in transit

00:10:25,120 --> 00:10:27,200
because quite frankly i think it's it's

00:10:26,560 --> 00:10:28,959
not super

00:10:27,200 --> 00:10:30,959
super interesting for for a lot of the

00:10:28,959 --> 00:10:33,680
folks here at the server smash con

00:10:30,959 --> 00:10:35,200
um you know i will say i think one of

00:10:33,680 --> 00:10:37,279
the big things that y'all are starting

00:10:35,200 --> 00:10:39,519
to do and that we would recommend here

00:10:37,279 --> 00:10:41,440
i just revisit i definitely try to root

00:10:39,519 --> 00:10:42,720
your mesh pki and your existing pk

00:10:41,440 --> 00:10:44,800
that's going to make your your whole

00:10:42,720 --> 00:10:46,959
life easier with respect to managing

00:10:44,800 --> 00:10:47,920
your the best certificates and things

00:10:46,959 --> 00:10:50,000
like that

00:10:47,920 --> 00:10:50,959
so there's just one one learning i'll

00:10:50,000 --> 00:10:52,880
leave there

00:10:50,959 --> 00:10:55,200
uh but if we transition over i want to

00:10:52,880 --> 00:10:57,920
talk about then kind of the second

00:10:55,200 --> 00:10:59,440
major use case that you all embarked on

00:10:57,920 --> 00:11:00,000
after encryption and transit right and

00:10:59,440 --> 00:11:01,920
that was

00:11:00,000 --> 00:11:04,000
kind of giving what you know i'll call

00:11:01,920 --> 00:11:07,200
it sso for free not for free for y'all

00:11:04,000 --> 00:11:10,959
uh but effectively how can uh

00:11:07,200 --> 00:11:11,760
you make it cheap for teams to onboard

00:11:10,959 --> 00:11:13,600
and start to

00:11:11,760 --> 00:11:16,480
secure their applications using the

00:11:13,600 --> 00:11:16,480
surface mesh right

00:11:16,800 --> 00:11:19,839
yeah i think that there's there's this

00:11:18,160 --> 00:11:22,079
really and

00:11:19,839 --> 00:11:23,200
and as like you know you know we've

00:11:22,079 --> 00:11:24,000
talked about quite a bit over the past

00:11:23,200 --> 00:11:25,680
year but

00:11:24,000 --> 00:11:27,519
um one of my first complaints when i

00:11:25,680 --> 00:11:28,160
first met i met you guys you and varon

00:11:27,519 --> 00:11:31,680
was

00:11:28,160 --> 00:11:34,160
hey i just want automation and how i do

00:11:31,680 --> 00:11:35,360
sso and right now it's not great with

00:11:34,160 --> 00:11:37,839
this deal

00:11:35,360 --> 00:11:39,360
because it just it really wasn't um like

00:11:37,839 --> 00:11:40,160
you could you could do often and

00:11:39,360 --> 00:11:42,240
honestly

00:11:40,160 --> 00:11:44,320
um right against jbks that kind of stuff

00:11:42,240 --> 00:11:44,880
but there was no management of the user

00:11:44,320 --> 00:11:46,720
session or

00:11:44,880 --> 00:11:48,000
it was just you either had a token or

00:11:46,720 --> 00:11:50,240
you didn't and if you didn't you got a

00:11:48,000 --> 00:11:52,000
big fat 403 and that just wasn't great

00:11:50,240 --> 00:11:54,480
um so so getting to the point where we

00:11:52,000 --> 00:11:56,320
are now sso for free literally is we

00:11:54,480 --> 00:11:58,800
want app developers come in

00:11:56,320 --> 00:11:59,760
and build their software and not worry

00:11:58,800 --> 00:12:02,000
about

00:11:59,760 --> 00:12:03,120
the details they just need to be secure

00:12:02,000 --> 00:12:04,720
and we're doing this

00:12:03,120 --> 00:12:06,320
not just the unclassified but the

00:12:04,720 --> 00:12:06,800
classified workloads as well work this

00:12:06,320 --> 00:12:09,600
way

00:12:06,800 --> 00:12:11,040
um and it's just a way to network break

00:12:09,600 --> 00:12:12,639
using the service mesh

00:12:11,040 --> 00:12:15,200
you know using on voice filters that

00:12:12,639 --> 00:12:17,120
connection so we can stop traffic flow

00:12:15,200 --> 00:12:18,560
and this is super interesting too for

00:12:17,120 --> 00:12:20,480
for tools that we don't write and we

00:12:18,560 --> 00:12:23,600
don't control that don't have

00:12:20,480 --> 00:12:26,800
oidc or saml or other typical

00:12:23,600 --> 00:12:28,320
standard sso integrations we can still

00:12:26,800 --> 00:12:30,240
protect those as well and we've done

00:12:28,320 --> 00:12:31,839
some stuff with key cloak to enable our

00:12:30,240 --> 00:12:32,720
back against those in the same realm so

00:12:31,839 --> 00:12:35,920
that we can kind of find

00:12:32,720 --> 00:12:37,519
grain control off z who has access to

00:12:35,920 --> 00:12:39,440
workloads even at the workload itself is

00:12:37,519 --> 00:12:41,120
ignorant of the r back it's being

00:12:39,440 --> 00:12:43,279
enforced upon it

00:12:41,120 --> 00:12:44,800
yeah yeah which is super cool i actually

00:12:43,279 --> 00:12:45,920
don't know if i if i realized that y'all

00:12:44,800 --> 00:12:47,760
are doing ozzy

00:12:45,920 --> 00:12:49,040
uh for for some third party apps with

00:12:47,760 --> 00:12:50,160
this as well i knew obviously they are

00:12:49,040 --> 00:12:54,320
going off in

00:12:50,160 --> 00:12:56,399
um and so uh the the big way then that

00:12:54,320 --> 00:12:58,160
that this is achieved is using uh some

00:12:56,399 --> 00:13:00,160
some tooling out of the iso ecosystem

00:12:58,160 --> 00:13:03,440
the the auth service in particular

00:13:00,160 --> 00:13:06,800
uh and so it acts as a shim

00:13:03,440 --> 00:13:09,120
between envoys and oidc

00:13:06,800 --> 00:13:10,000
uh using envoy's external authorization

00:13:09,120 --> 00:13:13,040
api so

00:13:10,000 --> 00:13:14,480
uh if again i'm sure that other people

00:13:13,040 --> 00:13:16,399
will give talks about that today

00:13:14,480 --> 00:13:17,680
but envoy provides exactly like jeff

00:13:16,399 --> 00:13:20,480
said uh a

00:13:17,680 --> 00:13:22,000
set of filters that that call this

00:13:20,480 --> 00:13:23,920
external auth api

00:13:22,000 --> 00:13:26,000
uh the sectional authorization service

00:13:23,920 --> 00:13:27,760
that effectively provide a network stop

00:13:26,000 --> 00:13:29,360
right so they they give us a handle to

00:13:27,760 --> 00:13:31,839
be able to insert in arbitrary

00:13:29,360 --> 00:13:32,800
authorization uh authentication or

00:13:31,839 --> 00:13:35,360
authorization

00:13:32,800 --> 00:13:36,560
logic right uh and so we'll we'll look

00:13:35,360 --> 00:13:39,279
at some of the config

00:13:36,560 --> 00:13:40,560
uh but in a minute but service you'll

00:13:39,279 --> 00:13:42,800
basically have deployed

00:13:40,560 --> 00:13:44,240
uh you mint it out as part of the

00:13:42,800 --> 00:13:46,639
standard stack

00:13:44,240 --> 00:13:48,079
that is uh the platform one deployment

00:13:46,639 --> 00:13:51,040
uh pointed at

00:13:48,079 --> 00:13:52,880
your existing identity providers uh and

00:13:51,040 --> 00:13:55,839
then yeah like we said earlier

00:13:52,880 --> 00:13:56,160
label uh label the pod and it goes uh i

00:13:55,839 --> 00:13:58,240
know

00:13:56,160 --> 00:14:00,480
there were some enhancements that that's

00:13:58,240 --> 00:14:03,600
uh we i i say we i didn't actually

00:14:00,480 --> 00:14:05,920
uh make them uh but you're also made uh

00:14:03,600 --> 00:14:07,360
to auth service uh as well to actually

00:14:05,920 --> 00:14:10,480
make it fully usable right

00:14:07,360 --> 00:14:11,519
uh for your use case correct yeah there

00:14:10,480 --> 00:14:13,440
are some

00:14:11,519 --> 00:14:15,120
you know in the ecosystem you see this

00:14:13,440 --> 00:14:16,800
in all open source projects there's

00:14:15,120 --> 00:14:18,720
people wanting the same problems right

00:14:16,800 --> 00:14:20,000
and the same scenarios and somebody

00:14:18,720 --> 00:14:21,279
challenges they have the same issue and

00:14:20,000 --> 00:14:23,120
then somebody comes in and does a pull

00:14:21,279 --> 00:14:24,160
request and so on and so forth and we

00:14:23,120 --> 00:14:25,760
provided some code

00:14:24,160 --> 00:14:27,279
there wasn't much to change really

00:14:25,760 --> 00:14:29,120
frankly it was very very small

00:14:27,279 --> 00:14:31,360
um and others have already put as well

00:14:29,120 --> 00:14:32,720
um so sir redis back end was one of the

00:14:31,360 --> 00:14:33,440
ones that was in works that some minor

00:14:32,720 --> 00:14:34,880
tweaks we

00:14:33,440 --> 00:14:36,720
we had there there was also some issues

00:14:34,880 --> 00:14:39,440
with just the way that the

00:14:36,720 --> 00:14:41,519
protobufs work um that was breaking down

00:14:39,440 --> 00:14:42,720
um instead of envoy going back to off

00:14:41,519 --> 00:14:43,519
service and actually crashing off

00:14:42,720 --> 00:14:46,079
service so

00:14:43,519 --> 00:14:47,760
very very minor things um you know very

00:14:46,079 --> 00:14:48,480
minor code change i should say the very

00:14:47,760 --> 00:14:51,040
breaking

00:14:48,480 --> 00:14:52,240
breaking problems for us and just the

00:14:51,040 --> 00:14:52,880
transition which we'll talk about later

00:14:52,240 --> 00:14:55,279
on of

00:14:52,880 --> 00:14:56,639
envoy as the api changed and envoy and

00:14:55,279 --> 00:14:57,440
how we had to change the on wood filters

00:14:56,639 --> 00:15:00,560
was pretty

00:14:57,440 --> 00:15:02,079
pretty painful for mr1617 yeah yeah and

00:15:00,560 --> 00:15:02,959
we'll definitely dig into that in a

00:15:02,079 --> 00:15:04,959
second here

00:15:02,959 --> 00:15:06,639
uh but actually you can see here on the

00:15:04,959 --> 00:15:09,279
right side the outcome of that

00:15:06,639 --> 00:15:11,519
which is a new and updated envoy filter

00:15:09,279 --> 00:15:12,639
config for istio 1.7

00:15:11,519 --> 00:15:14,320
and this is one of the things that's a

00:15:12,639 --> 00:15:16,079
little bit painful and in the migration

00:15:14,320 --> 00:15:18,399
but we'll get into it a little bit

00:15:16,079 --> 00:15:19,600
um but effectively you know like like we

00:15:18,399 --> 00:15:21,920
said before

00:15:19,600 --> 00:15:23,519
we have this this mesh wide envelope

00:15:21,920 --> 00:15:24,720
filter notice it's in that seo system

00:15:23,519 --> 00:15:26,240
name space so it's going to be the

00:15:24,720 --> 00:15:28,160
default uh if

00:15:26,240 --> 00:15:29,440
unless somebody has an envoy filter you

00:15:28,160 --> 00:15:29,680
know more specific than this one this

00:15:29,440 --> 00:15:32,399
one

00:15:29,680 --> 00:15:34,000
implies uh and and teams deploy again

00:15:32,399 --> 00:15:36,959
with with that label in this case

00:15:34,000 --> 00:15:38,240
we uh the labels protect key cloak uh

00:15:36,959 --> 00:15:40,000
and what we'll do is exactly what the

00:15:38,240 --> 00:15:43,040
envoy filter says we'll go in there

00:15:40,000 --> 00:15:45,279
and we'll insert the external oxy for

00:15:43,040 --> 00:15:47,279
all envoys that are doing http requests

00:15:45,279 --> 00:15:50,240
you can see we're inserting before

00:15:47,279 --> 00:15:50,639
the uh the envoy router which means you

00:15:50,240 --> 00:15:53,279
know

00:15:50,639 --> 00:15:54,160
we handle it before http request flow uh

00:15:53,279 --> 00:15:57,360
and it does the full

00:15:54,160 --> 00:16:00,320
oidc flow right to redirect uh force and

00:15:57,360 --> 00:16:03,839
authentication and then come back

00:16:00,320 --> 00:16:04,720
and i think we'll even uh show you yeah

00:16:03,839 --> 00:16:07,360
and and so

00:16:04,720 --> 00:16:08,639
uh like we said uh all service is

00:16:07,360 --> 00:16:10,160
deployed in the mesh one of the things i

00:16:08,639 --> 00:16:12,160
want to talk about too

00:16:10,160 --> 00:16:14,079
uh that's that's an important idea is

00:16:12,160 --> 00:16:16,240
the idea of using the mesh to provide

00:16:14,079 --> 00:16:17,519
uh operational assurances and we'll talk

00:16:16,240 --> 00:16:18,880
about this kind of at the end very

00:16:17,519 --> 00:16:20,800
briefly as well

00:16:18,880 --> 00:16:22,639
uh but you know the mesh is providing

00:16:20,800 --> 00:16:23,920
security between the the auth service

00:16:22,639 --> 00:16:27,440
deployed in the mesh and

00:16:23,920 --> 00:16:27,839
workloads in the mesh right so it's not

00:16:27,440 --> 00:16:28,800
just

00:16:27,839 --> 00:16:30,959
you know just like the messages

00:16:28,800 --> 00:16:32,800
providing security between random

00:16:30,959 --> 00:16:36,079
arbitrary services

00:16:32,800 --> 00:16:38,079
uh effectively the same security that

00:16:36,079 --> 00:16:41,120
the mesh offers any arbitrary workload

00:16:38,079 --> 00:16:42,480
we can use to secure our often and off z

00:16:41,120 --> 00:16:45,759
services

00:16:42,480 --> 00:16:47,199
and gain additional security benefits uh

00:16:45,759 --> 00:16:49,279
those operational assurances that the

00:16:47,199 --> 00:16:51,120
mesh provides for

00:16:49,279 --> 00:16:52,399
our authorization and authentication

00:16:51,120 --> 00:16:54,160
services themselves

00:16:52,399 --> 00:16:55,440
right and so this gives us a powerful

00:16:54,160 --> 00:16:56,959
set of tools it's really nice when we

00:16:55,440 --> 00:16:59,120
get to a system that can kind of model

00:16:56,959 --> 00:17:01,839
itself that can represent itself right

00:16:59,120 --> 00:17:03,120
um and and with the service mesh we can

00:17:01,839 --> 00:17:04,799
start to do that and so that's a really

00:17:03,120 --> 00:17:06,079
really important idea that i want to

00:17:04,799 --> 00:17:08,799
call out

00:17:06,079 --> 00:17:09,760
um and with that i think we we have we

00:17:08,799 --> 00:17:13,120
can actually show you

00:17:09,760 --> 00:17:13,120
uh how the system actually works

00:17:13,600 --> 00:17:17,120
yeah let's see if this transition screen

00:17:15,679 --> 00:17:18,240
sharing stuff actually works without

00:17:17,120 --> 00:17:21,360
blowing things up

00:17:18,240 --> 00:17:24,559
yeah it'll be always fun the wonders of

00:17:21,360 --> 00:17:26,319
of conferencing hey did it work yeah i

00:17:24,559 --> 00:17:29,679
think it did

00:17:26,319 --> 00:17:33,039
exciting so so inside of platform one

00:17:29,679 --> 00:17:34,559
we have this um this sort of concept of

00:17:33,039 --> 00:17:36,080
stamping we're trying to do right now

00:17:34,559 --> 00:17:38,000
called hello world which is just like

00:17:36,080 --> 00:17:38,960
examples distilled examples of how to

00:17:38,000 --> 00:17:41,760
use

00:17:38,960 --> 00:17:43,200
parts of our big bang product um and

00:17:41,760 --> 00:17:45,280
this is the first one we did

00:17:43,200 --> 00:17:46,480
that i spent a lot of time on myself

00:17:45,280 --> 00:17:48,160
directly just because i wanted to get it

00:17:46,480 --> 00:17:51,520
right because i've been stuck in the

00:17:48,160 --> 00:17:52,880
istio ozzy land for a little bit um but

00:17:51,520 --> 00:17:55,039
but basically we have this simple little

00:17:52,880 --> 00:17:59,360
script it uses cert manager

00:17:55,039 --> 00:18:01,200
it uses k3d the seo cli

00:17:59,360 --> 00:18:02,559
and i'm sorry it makes certain manager

00:18:01,200 --> 00:18:04,960
to generate basically a

00:18:02,559 --> 00:18:05,679
a a simple little hello world concept

00:18:04,960 --> 00:18:08,160
for you

00:18:05,679 --> 00:18:09,200
um so i will go ahead and kick that off

00:18:08,160 --> 00:18:10,640
um

00:18:09,200 --> 00:18:12,320
this is actually already running but i'm

00:18:10,640 --> 00:18:14,000
gonna kill it if i run in the same

00:18:12,320 --> 00:18:15,760
script it'll destroy the cluster and

00:18:14,000 --> 00:18:17,280
recreate it and if you haven't used k3d

00:18:15,760 --> 00:18:20,000
it's um

00:18:17,280 --> 00:18:21,919
it's similar to kind but um we have

00:18:20,000 --> 00:18:24,400
quite a few rancher people on our team

00:18:21,919 --> 00:18:25,120
and and they have convinced me to love k

00:18:24,400 --> 00:18:27,039
3d

00:18:25,120 --> 00:18:28,559
um because it's just really dang fast as

00:18:27,039 --> 00:18:30,240
you can see um it still works really

00:18:28,559 --> 00:18:31,760
well but kind is also perfectly valid

00:18:30,240 --> 00:18:32,880
here we just happen to use k3d a lot of

00:18:31,760 --> 00:18:34,799
platform one

00:18:32,880 --> 00:18:36,240
no hating at all against kind because we

00:18:34,799 --> 00:18:37,679
also love it um

00:18:36,240 --> 00:18:39,440
a little head against you that's a

00:18:37,679 --> 00:18:42,880
different story yeah

00:18:39,440 --> 00:18:44,880
so so i yes

00:18:42,880 --> 00:18:46,400
but delete create cluster all basic

00:18:44,880 --> 00:18:48,160
stuff you guys all know this stuff

00:18:46,400 --> 00:18:49,440
um and then istio is going to do its

00:18:48,160 --> 00:18:51,520
thing as a reminder

00:18:49,440 --> 00:18:54,080
nothing fancy here we're just creating a

00:18:51,520 --> 00:18:56,160
basic cluster with some ad443

00:18:54,080 --> 00:18:57,440
load balancers and installing some certs

00:18:56,160 --> 00:18:59,200
that we generated that

00:18:57,440 --> 00:19:00,640
my browser will not trust because we use

00:18:59,200 --> 00:19:03,280
a make sure to install them

00:19:00,640 --> 00:19:04,400
um and and go from there um and deploy

00:19:03,280 --> 00:19:06,720
them out so

00:19:04,400 --> 00:19:07,600
um with this setup here and it should be

00:19:06,720 --> 00:19:08,880
just about done now

00:19:07,600 --> 00:19:11,039
what we try to do is kind of distill

00:19:08,880 --> 00:19:12,400
down like what's what so hello world we

00:19:11,039 --> 00:19:14,480
wanted to show you how simple it was and

00:19:12,400 --> 00:19:16,160
really this is all it is so pod info if

00:19:14,480 --> 00:19:17,679
you don't know is a super great tool

00:19:16,160 --> 00:19:19,280
uh open source tool that just shows a

00:19:17,679 --> 00:19:21,280
bunch of great stuff about

00:19:19,280 --> 00:19:22,720
a pod running inside your cluster so you

00:19:21,280 --> 00:19:23,280
can use headers or environment variables

00:19:22,720 --> 00:19:24,720
and

00:19:23,280 --> 00:19:26,320
do some tests against it there's a whole

00:19:24,720 --> 00:19:27,760
swagger api you can check out but

00:19:26,320 --> 00:19:30,080
we wanted to show if you took some

00:19:27,760 --> 00:19:32,000
random workload in this case pod info

00:19:30,080 --> 00:19:34,240
and then protected it what would it take

00:19:32,000 --> 00:19:34,559
um and we used customize to do patching

00:19:34,240 --> 00:19:36,320
so

00:19:34,559 --> 00:19:38,000
if you're not familiar you know it's

00:19:36,320 --> 00:19:40,400
pretty basic point remote resource

00:19:38,000 --> 00:19:42,320
and add this patch street merge here

00:19:40,400 --> 00:19:43,200
which is going to now do the enforcement

00:19:42,320 --> 00:19:45,360
for us

00:19:43,200 --> 00:19:47,120
um and then the config for us service

00:19:45,360 --> 00:19:48,480
which is frankly a little verbose right

00:19:47,120 --> 00:19:49,919
now we don't super love

00:19:48,480 --> 00:19:52,320
this still there's still some work to be

00:19:49,919 --> 00:19:54,000
done here um you know we do find out

00:19:52,320 --> 00:19:56,080
we're tracing right now so

00:19:54,000 --> 00:19:57,440
super high highly verbose right now just

00:19:56,080 --> 00:19:59,440
against localhost and

00:19:57,440 --> 00:20:01,039
um yes this is a client id that's

00:19:59,440 --> 00:20:02,400
publicly available but it's only a valid

00:20:01,039 --> 00:20:04,320
against localhost

00:20:02,400 --> 00:20:06,159
hence the this is not a real secret bro

00:20:04,320 --> 00:20:08,480
so don't freak out

00:20:06,159 --> 00:20:09,600
we pass in both the bear authorization

00:20:08,480 --> 00:20:10,240
which is what you need if you're doing

00:20:09,600 --> 00:20:12,559
often

00:20:10,240 --> 00:20:13,520
awesome z type stuff um with the service

00:20:12,559 --> 00:20:16,720
mesh beyond

00:20:13,520 --> 00:20:17,840
the xoxy service um we don't anymore

00:20:16,720 --> 00:20:19,520
we've actually removed all that we've

00:20:17,840 --> 00:20:21,679
got to remove all that code we used to

00:20:19,520 --> 00:20:23,039
actually create those filters app

00:20:21,679 --> 00:20:24,559
developers still do that they want to

00:20:23,039 --> 00:20:26,240
but they don't need to anymore so if you

00:20:24,559 --> 00:20:28,240
wanted to do further filtering

00:20:26,240 --> 00:20:30,240
um some sort of aussie thing against the

00:20:28,240 --> 00:20:32,000
claim on the jot you could do that but

00:20:30,240 --> 00:20:33,440
we just we don't require that

00:20:32,000 --> 00:20:35,520
for our engineers literally they just

00:20:33,440 --> 00:20:37,919
say go read the header jbt

00:20:35,520 --> 00:20:39,360
and there's your token parse it out um

00:20:37,919 --> 00:20:40,320
we've given an example of what that

00:20:39,360 --> 00:20:43,120
looks like from our

00:20:40,320 --> 00:20:44,720
sso some basic information um what it

00:20:43,120 --> 00:20:46,080
would look like to them

00:20:44,720 --> 00:20:48,000
because they can see the format and they

00:20:46,080 --> 00:20:51,600
go from there right so this

00:20:48,000 --> 00:20:54,240
is booted now um and we can see these

00:20:51,600 --> 00:20:55,679
labels exist here for protect key cloak

00:20:54,240 --> 00:20:58,640
as expected

00:20:55,679 --> 00:21:00,480
so i'm gonna go over here um to google

00:20:58,640 --> 00:21:01,440
and i'm currently logged into a session

00:21:00,480 --> 00:21:03,200
or hopefully i still

00:21:01,440 --> 00:21:04,480
am so i'm going to go ahead and go to

00:21:03,200 --> 00:21:06,799
localhost

00:21:04,480 --> 00:21:08,320
with this network traffic logging so you

00:21:06,799 --> 00:21:09,360
can see this

00:21:08,320 --> 00:21:10,880
all right so you can see what happened

00:21:09,360 --> 00:21:12,720
here i don't want to show you my tokens

00:21:10,880 --> 00:21:14,159
but but basically we were at localhost

00:21:12,720 --> 00:21:17,280
it redirected to our

00:21:14,159 --> 00:21:19,440
our production sso we do that on purpose

00:21:17,280 --> 00:21:20,799
we want the engineers to see it live

00:21:19,440 --> 00:21:22,159
with their real credentials they

00:21:20,799 --> 00:21:23,200
actually see their headers and see their

00:21:22,159 --> 00:21:24,960
claims

00:21:23,200 --> 00:21:26,640
and because i'm already an authenticated

00:21:24,960 --> 00:21:27,919
session another basically key click as a

00:21:26,640 --> 00:21:28,880
running session right now it's active

00:21:27,919 --> 00:21:30,720
still

00:21:28,880 --> 00:21:32,000
we redirected and now we're back here

00:21:30,720 --> 00:21:36,080
now to show you

00:21:32,000 --> 00:21:38,320
another example here

00:21:36,080 --> 00:21:39,600
we're not going to we went back and

00:21:38,320 --> 00:21:40,400
forth and how to show us that exposing

00:21:39,600 --> 00:21:42,320
too much about

00:21:40,400 --> 00:21:43,440
credentials or you know how we do this

00:21:42,320 --> 00:21:45,039
stuff so

00:21:43,440 --> 00:21:46,799
we're just going to let it redirect to a

00:21:45,039 --> 00:21:48,159
login basically

00:21:46,799 --> 00:21:50,640
as you can see here redirected to that

00:21:48,159 --> 00:21:52,640
login screen as expected and now you're

00:21:50,640 --> 00:21:55,760
at our little baby auto login screen

00:21:52,640 --> 00:21:56,559
um and just gee whiz facts when we do

00:21:55,760 --> 00:21:57,600
key cloak

00:21:56,559 --> 00:21:58,960
there's a whole bunch of extra stuff

00:21:57,600 --> 00:21:59,840
we're doing here we've built a whole

00:21:58,960 --> 00:22:01,520
custom

00:21:59,840 --> 00:22:04,000
framework around this so that we can do

00:22:01,520 --> 00:22:05,600
the r back and off c stuff

00:22:04,000 --> 00:22:07,280
at key club before it even touches the

00:22:05,600 --> 00:22:10,159
workloads before it even touches

00:22:07,280 --> 00:22:11,679
the oidc consumer so so we actually do

00:22:10,159 --> 00:22:13,760
some

00:22:11,679 --> 00:22:15,280
interesting checks even beyond this we

00:22:13,760 --> 00:22:16,240
actually have appgate for authentication

00:22:15,280 --> 00:22:18,000
so we do a bunch of

00:22:16,240 --> 00:22:19,679
layers above just this but at the very

00:22:18,000 --> 00:22:21,919
basic level here you are

00:22:19,679 --> 00:22:23,600
at an oidc provider trying to get

00:22:21,919 --> 00:22:25,039
authenticated trying to follow the odc

00:22:23,600 --> 00:22:26,480
oauth2 flow

00:22:25,039 --> 00:22:28,159
we're stopping you here obviously

00:22:26,480 --> 00:22:29,760
because we don't want to show any more

00:22:28,159 --> 00:22:31,039
about how we do the dod side it's you

00:22:29,760 --> 00:22:32,080
can go look it up it's very basic it's

00:22:31,039 --> 00:22:35,760
all the same off flows

00:22:32,080 --> 00:22:37,360
we also do do pki here but because my

00:22:35,760 --> 00:22:39,600
smart card is removed it's not prompting

00:22:37,360 --> 00:22:40,400
but this would flow to pod info and then

00:22:39,600 --> 00:22:42,320
you would see it

00:22:40,400 --> 00:22:44,320
and that's kind of the the workflow

00:22:42,320 --> 00:22:45,440
through there

00:22:44,320 --> 00:22:48,159
i'm going to switch back over to you

00:22:45,440 --> 00:22:50,000
know that yeah thanks

00:22:48,159 --> 00:22:52,159
awesome and so that is and there

00:22:50,000 --> 00:22:55,360
obviously uh pod info is

00:22:52,159 --> 00:22:58,240
a wonderful example of a third-party uh

00:22:55,360 --> 00:22:59,520
application uh as well that we are that

00:22:58,240 --> 00:23:00,720
we're able to uh

00:22:59,520 --> 00:23:03,840
to provide authentication and

00:23:00,720 --> 00:23:06,400
authorization over right

00:23:03,840 --> 00:23:07,600
uh and so with that then we wanna pivot

00:23:06,400 --> 00:23:08,960
a little bit which is

00:23:07,600 --> 00:23:11,039
you know and so that is i just want to

00:23:08,960 --> 00:23:13,600
call out incredibly cool right the fact

00:23:11,039 --> 00:23:15,919
that we can have sso against production

00:23:13,600 --> 00:23:16,960
uh identity servers for any single

00:23:15,919 --> 00:23:20,480
application

00:23:16,960 --> 00:23:22,400
adding a label that is uh is awesome and

00:23:20,480 --> 00:23:23,840
a huge time saving as well for a lot of

00:23:22,400 --> 00:23:25,360
your developers because historically if

00:23:23,840 --> 00:23:26,400
if they had wanted to do this

00:23:25,360 --> 00:23:27,919
they basically would have had to

00:23:26,400 --> 00:23:29,039
maintain this entire infrastructure

00:23:27,919 --> 00:23:31,679
themselves correct

00:23:29,039 --> 00:23:32,960
uh not the identity servers but the the

00:23:31,679 --> 00:23:34,080
they would have had to handle calling to

00:23:32,960 --> 00:23:36,480
you see

00:23:34,080 --> 00:23:38,000
the whole flow right and i would say

00:23:36,480 --> 00:23:39,520
just one other thing on that so we've

00:23:38,000 --> 00:23:40,799
gone we've iterated on just a whole

00:23:39,520 --> 00:23:42,720
bunch we've gone through

00:23:40,799 --> 00:23:45,120
dozens of iterations on this concept at

00:23:42,720 --> 00:23:48,159
platform one um with many different

00:23:45,120 --> 00:23:49,840
systems and some of the most significant

00:23:48,159 --> 00:23:51,360
systems in the dod and some very basic

00:23:49,840 --> 00:23:54,000
things and everything in between and

00:23:51,360 --> 00:23:55,440
um what initially we you know we had

00:23:54,000 --> 00:23:57,440
apps going and

00:23:55,440 --> 00:23:59,600
building their own sso and building

00:23:57,440 --> 00:24:01,440
their own so literally creating a key

00:23:59,600 --> 00:24:03,120
cloak or using some other third-party

00:24:01,440 --> 00:24:04,320
sso the air force has something that

00:24:03,120 --> 00:24:06,400
they provide you

00:24:04,320 --> 00:24:07,760
as well using those and consuming those

00:24:06,400 --> 00:24:09,039
and then writing like these

00:24:07,760 --> 00:24:10,559
authentication brokers

00:24:09,039 --> 00:24:12,720
um to go to their applications very

00:24:10,559 --> 00:24:14,720
complex very uh risky

00:24:12,720 --> 00:24:16,240
um and then we had others who would okay

00:24:14,720 --> 00:24:18,480
fine we'll use this sso

00:24:16,240 --> 00:24:19,840
oidc or cmo excuse me and then you know

00:24:18,480 --> 00:24:21,440
we'll we'll consume it some way through

00:24:19,840 --> 00:24:23,120
the application and manage state there

00:24:21,440 --> 00:24:24,880
um so all these different variances then

00:24:23,120 --> 00:24:26,799
we finally got to the point where with

00:24:24,880 --> 00:24:28,799
off service and before that a few other

00:24:26,799 --> 00:24:30,159
similar tools we used um

00:24:28,799 --> 00:24:31,520
these envelope filters that were really

00:24:30,159 --> 00:24:32,400
complex the envoy filters were getting

00:24:31,520 --> 00:24:34,880
really messy

00:24:32,400 --> 00:24:36,480
very big a whole bunch of stuff going on

00:24:34,880 --> 00:24:38,080
it took a dang degree to read through

00:24:36,480 --> 00:24:39,360
those that was complicated but then it

00:24:38,080 --> 00:24:40,320
was worse than that because you also had

00:24:39,360 --> 00:24:42,480
to deploy

00:24:40,320 --> 00:24:44,880
as a side car off service attached to

00:24:42,480 --> 00:24:47,120
the workload so you're not just

00:24:44,880 --> 00:24:48,960
deploying this you know envoy filter

00:24:47,120 --> 00:24:49,600
configuration that's often an aussie

00:24:48,960 --> 00:24:52,640
filters

00:24:49,600 --> 00:24:54,799
in istio you're then also deploying this

00:24:52,640 --> 00:24:55,679
this other sidecar thing oh by the way

00:24:54,799 --> 00:24:57,760
if you have

00:24:55,679 --> 00:24:59,200
you know more than one replica running

00:24:57,760 --> 00:25:00,400
which is like what pretty much anyone

00:24:59,200 --> 00:25:02,320
does in these systems

00:25:00,400 --> 00:25:04,320
you now have multiple side cards right

00:25:02,320 --> 00:25:05,440
for each of those different workloads so

00:25:04,320 --> 00:25:07,360
there's different replicas

00:25:05,440 --> 00:25:08,640
and now your state isn't synchronized so

00:25:07,360 --> 00:25:09,919
you have to do things like a back end

00:25:08,640 --> 00:25:11,600
redis to manage state

00:25:09,919 --> 00:25:13,039
so now you have this really complex

00:25:11,600 --> 00:25:14,080
thing it was so complex that we actually

00:25:13,039 --> 00:25:16,320
used cookie cutter

00:25:14,080 --> 00:25:17,840
to try to automate the deployment of all

00:25:16,320 --> 00:25:19,760
those manifests because there was a lot

00:25:17,840 --> 00:25:22,000
of manifest a lot of state to manage

00:25:19,760 --> 00:25:22,880
for engineers who don't even barely know

00:25:22,000 --> 00:25:24,400
kubernetes

00:25:22,880 --> 00:25:26,640
we're not expected to manage all this

00:25:24,400 --> 00:25:28,400
complexity so we've we've now broken it

00:25:26,640 --> 00:25:30,400
back down to literally

00:25:28,400 --> 00:25:33,120
add a label to whatever workload you

00:25:30,400 --> 00:25:36,159
want that will now be protected

00:25:33,120 --> 00:25:38,240
yep which is yeah just awesome

00:25:36,159 --> 00:25:39,279
um however there was a lot of pain to

00:25:38,240 --> 00:25:41,200
get there

00:25:39,279 --> 00:25:42,559
uh and you know we've kind of alluded to

00:25:41,200 --> 00:25:44,080
it throughout right but

00:25:42,559 --> 00:25:46,799
i think it's worthwhile for us to kind

00:25:44,080 --> 00:25:48,400
of call out uh and call attention to

00:25:46,799 --> 00:25:50,640
i i what i think are some pretty

00:25:48,400 --> 00:25:52,400
important areas uh that need to be

00:25:50,640 --> 00:25:54,400
improved right and i think

00:25:52,400 --> 00:25:56,000
uh you know jeff maybe can can scream

00:25:54,400 --> 00:25:57,760
this one but uh maybe

00:25:56,000 --> 00:26:00,320
the single biggest area that is still

00:25:57,760 --> 00:26:01,600
rough today is is upgrades uh upgrades

00:26:00,320 --> 00:26:03,520
are still really painful

00:26:01,600 --> 00:26:05,360
uh i think they're a lot better than

00:26:03,520 --> 00:26:08,000
they have been historically

00:26:05,360 --> 00:26:09,120
uh you know i think uh and maybe jeff i

00:26:08,000 --> 00:26:10,880
don't know if you want to confirm like

00:26:09,120 --> 00:26:11,840
kind of some of the earlier days versus

00:26:10,880 --> 00:26:15,120
now

00:26:11,840 --> 00:26:18,159
um you know today

00:26:15,120 --> 00:26:20,240
yeah exactly uh you know so today

00:26:18,159 --> 00:26:22,000
for example there is an api now that's

00:26:20,240 --> 00:26:24,240
phenomenal you know having an api for

00:26:22,000 --> 00:26:26,480
upgrade is such a

00:26:24,240 --> 00:26:28,320
big improvement over before

00:26:26,480 --> 00:26:29,840
unfortunately the discoverability of

00:26:28,320 --> 00:26:33,120
that api is really bad

00:26:29,840 --> 00:26:33,760
um and that has caused us quite a bit of

00:26:33,120 --> 00:26:36,159
pain right

00:26:33,760 --> 00:26:38,320
in particular for example there's a

00:26:36,159 --> 00:26:40,400
whole lot of values that used to exist

00:26:38,320 --> 00:26:42,880
in the istio helm charts that you would

00:26:40,400 --> 00:26:45,440
then set in the value sansa

00:26:42,880 --> 00:26:46,720
of the istio operator api and it was

00:26:45,440 --> 00:26:49,200
basically the escape patch

00:26:46,720 --> 00:26:50,720
right and so for that reason it was not

00:26:49,200 --> 00:26:52,000
very well documented what even the

00:26:50,720 --> 00:26:55,039
values that you can set

00:26:52,000 --> 00:26:57,039
are so then to kind of compound that

00:26:55,039 --> 00:26:59,760
a lot of those values over time have

00:26:57,039 --> 00:27:02,400
been updated and upgraded into first

00:26:59,760 --> 00:27:03,919
class fields on the operator api itself

00:27:02,400 --> 00:27:05,520
which is phenomenal that's great right

00:27:03,919 --> 00:27:08,080
that's exactly what we want to see

00:27:05,520 --> 00:27:09,440
the problem is there tends to be kind of

00:27:08,080 --> 00:27:10,240
lackluster documentation when that

00:27:09,440 --> 00:27:11,600
happens

00:27:10,240 --> 00:27:14,320
right and so there's not a very good

00:27:11,600 --> 00:27:17,840
guide for how you might keep your

00:27:14,320 --> 00:27:18,399
operator api your operator cr up to date

00:27:17,840 --> 00:27:19,919
over

00:27:18,399 --> 00:27:22,080
different versions of istio so i think

00:27:19,919 --> 00:27:23,440
that's one of the kind of big areas that

00:27:22,080 --> 00:27:24,480
could use quite a bit of improvement

00:27:23,440 --> 00:27:27,039
today

00:27:24,480 --> 00:27:27,679
um yeah jeff i don't know if you want to

00:27:27,039 --> 00:27:29,440
uh

00:27:27,679 --> 00:27:31,360
add color yeah it's just weaving and

00:27:29,440 --> 00:27:33,360
matching generally speaking

00:27:31,360 --> 00:27:35,520
yeah from a consumer's perspective um

00:27:33,360 --> 00:27:36,640
you know we platform one we're we're

00:27:35,520 --> 00:27:38,880
definitely

00:27:36,640 --> 00:27:40,399
probably third graders in istio land

00:27:38,880 --> 00:27:41,760
still i mean that's why we brought in

00:27:40,399 --> 00:27:43,840
tetrad to help us

00:27:41,760 --> 00:27:45,840
you know when we get stuck and i'll

00:27:43,840 --> 00:27:46,799
mention onboard filters i had zach read

00:27:45,840 --> 00:27:48,159
line by line

00:27:46,799 --> 00:27:50,159
with me the envelope filters to explain

00:27:48,159 --> 00:27:51,840
to me what's happening and and why

00:27:50,159 --> 00:27:53,440
but there's been just lots of gotchas

00:27:51,840 --> 00:27:55,279
throughout the um

00:27:53,440 --> 00:27:57,679
the past year year and i guess almost

00:27:55,279 --> 00:27:58,240
two years now of doing istio stuff and

00:27:57,679 --> 00:27:59,279
um

00:27:58,240 --> 00:28:01,279
you know just from a consumer

00:27:59,279 --> 00:28:01,679
perspective it's it's so much better we

00:28:01,279 --> 00:28:04,320
were

00:28:01,679 --> 00:28:05,360
so excited about 1.5 we jumped on 1.5

00:28:04,320 --> 00:28:09,200
immediately

00:28:05,360 --> 00:28:11,440
yeah and that had consequences

00:28:09,200 --> 00:28:13,440
in 1.6 land we basically had to skip 1.6

00:28:11,440 --> 00:28:15,039
because we had perpetual issues

00:28:13,440 --> 00:28:16,799
but we're finally migrating our

00:28:15,039 --> 00:28:18,799
workforce for one five to one seven and

00:28:16,799 --> 00:28:19,919
um getting better you know every day but

00:28:18,799 --> 00:28:23,440
it definitely is

00:28:19,919 --> 00:28:26,720
it's been a very very frustrating me

00:28:23,440 --> 00:28:29,120
screaming at sto ride in our team

00:28:26,720 --> 00:28:30,960
saying why are we doing this a lot but

00:28:29,120 --> 00:28:32,559
we're starting to finally see the

00:28:30,960 --> 00:28:33,840
fruition of that work and the stability

00:28:32,559 --> 00:28:36,240
and the apis and

00:28:33,840 --> 00:28:37,520
and it's come a long way nice awesome

00:28:36,240 --> 00:28:40,559
i'm glad to hear

00:28:37,520 --> 00:28:41,520
um and then you know kind of to carry on

00:28:40,559 --> 00:28:44,559
in that same vein

00:28:41,520 --> 00:28:45,760
right um there oh yeah i just complained

00:28:44,559 --> 00:28:47,200
about the operator docs there

00:28:45,760 --> 00:28:49,039
the other docs in general need some

00:28:47,200 --> 00:28:50,960
improvements i think uh we talked about

00:28:49,039 --> 00:28:52,799
that envoy filter specifically so we'll

00:28:50,960 --> 00:28:56,799
we'll revisit that one now

00:28:52,799 --> 00:28:57,279
um the syntax on the envoy filter

00:28:56,799 --> 00:28:59,679
changed

00:28:57,279 --> 00:29:01,120
uh going from seo one six to one seven

00:28:59,679 --> 00:29:03,120
now there was actually

00:29:01,120 --> 00:29:05,520
nice documentation going over that

00:29:03,120 --> 00:29:07,679
change yep uh if you went and read the

00:29:05,520 --> 00:29:08,720
the detailed upgrade notes for for seo

00:29:07,679 --> 00:29:11,919
one seven

00:29:08,720 --> 00:29:13,279
uh unfortunately the the underlying

00:29:11,919 --> 00:29:15,760
documentation under that

00:29:13,279 --> 00:29:17,520
we go so hey envoy filter yeah we know

00:29:15,760 --> 00:29:19,440
hey the syntax changed that's great

00:29:17,520 --> 00:29:21,039
uh unfortunately you know that syntax

00:29:19,440 --> 00:29:22,559
change included adding some things like

00:29:21,039 --> 00:29:24,559
this at type field

00:29:22,559 --> 00:29:27,360
uh and so one of the great mysteries is

00:29:24,559 --> 00:29:29,120
what do i put in the app type field

00:29:27,360 --> 00:29:31,039
right and so there are there's still

00:29:29,120 --> 00:29:32,640
some some holes in the documentation

00:29:31,039 --> 00:29:33,840
today you know this is another example

00:29:32,640 --> 00:29:34,480
where i think seo is getting a lot

00:29:33,840 --> 00:29:35,919
better

00:29:34,480 --> 00:29:38,000
right the fact that we had those

00:29:35,919 --> 00:29:40,240
detailed notes in the 1.7

00:29:38,000 --> 00:29:42,320
upgrade that talked about the the change

00:29:40,240 --> 00:29:44,159
of the shape of the omb filter api

00:29:42,320 --> 00:29:46,080
that's great right we haven't had that

00:29:44,159 --> 00:29:47,600
that level of detail before

00:29:46,080 --> 00:29:49,279
unfortunately there's still a little bit

00:29:47,600 --> 00:29:52,320
of gap that we need to cover

00:29:49,279 --> 00:29:56,000
i think in terms of really making them

00:29:52,320 --> 00:29:57,360
very usable and easy to use

00:29:56,000 --> 00:29:58,799
yeah i think one of the things we ran

00:29:57,360 --> 00:29:59,760
into is just kind of weird that i still

00:29:58,799 --> 00:30:01,919
don't fully understand

00:29:59,760 --> 00:30:03,600
even looking back at it was we had to

00:30:01,919 --> 00:30:07,200
actually change the onboard filter

00:30:03,600 --> 00:30:08,080
grpc or the that we were you know yeah

00:30:07,200 --> 00:30:10,159
we're using

00:30:08,080 --> 00:30:13,120
or the stances we're using because it

00:30:10,159 --> 00:30:14,960
like the the environment was not working

00:30:13,120 --> 00:30:16,320
at all but the google one worked and

00:30:14,960 --> 00:30:18,159
it's completely different syntax like

00:30:16,320 --> 00:30:21,679
it's totally different syntax

00:30:18,159 --> 00:30:23,760
um yeah and so this is the base but

00:30:21,679 --> 00:30:25,279
yup yup yup and so this is another kind

00:30:23,760 --> 00:30:27,120
of key problem and envelope filter this

00:30:25,279 --> 00:30:27,919
is maybe a problem unique zomboid filter

00:30:27,120 --> 00:30:30,559
because it's

00:30:27,919 --> 00:30:31,279
that break class between envoy and istio

00:30:30,559 --> 00:30:33,360
uh but we

00:30:31,279 --> 00:30:34,480
had kind of the double whammy of not

00:30:33,360 --> 00:30:36,240
just head

00:30:34,480 --> 00:30:38,240
uh issue one point you know we're going

00:30:36,240 --> 00:30:38,880
for 1.5 to 1.7 change the envelope

00:30:38,240 --> 00:30:41,520
filter

00:30:38,880 --> 00:30:42,399
but in fact uh the actual underlying

00:30:41,520 --> 00:30:45,919
envoy

00:30:42,399 --> 00:30:48,080
configuration itself uh also changed

00:30:45,919 --> 00:30:49,919
right and so and so we had this double

00:30:48,080 --> 00:30:50,559
change that we had to figure out uh like

00:30:49,919 --> 00:30:52,240
jeff said

00:30:50,559 --> 00:30:54,880
there's a change in how the grpc

00:30:52,240 --> 00:30:56,640
configuration works inside of envoy too

00:30:54,880 --> 00:30:58,880
uh and so that kind of double whammy

00:30:56,640 --> 00:31:00,880
again really just goes to that kind of

00:30:58,880 --> 00:31:02,840
that lack of some of that second layer

00:31:00,880 --> 00:31:05,120
documentation right

00:31:02,840 --> 00:31:06,720
uh which you know an onboard filter case

00:31:05,120 --> 00:31:10,159
might be a little hard to provide but

00:31:06,720 --> 00:31:10,159
it's really needed for that usability

00:31:10,559 --> 00:31:14,080
um yo jeff i'm sure you have a lot a lot

00:31:12,880 --> 00:31:17,200
of stuff to say here

00:31:14,080 --> 00:31:17,519
right but uh maybe the the short summary

00:31:17,200 --> 00:31:19,120
is

00:31:17,519 --> 00:31:22,080
it's so pretty challenging to roll out a

00:31:19,120 --> 00:31:22,080
suit to a large team yeah

00:31:22,159 --> 00:31:26,960
yeah i mean all the love for istio team

00:31:25,760 --> 00:31:29,120
it's it's it's

00:31:26,960 --> 00:31:31,279
definitely better but there's uh there's

00:31:29,120 --> 00:31:34,720
there's challenges um especially when

00:31:31,279 --> 00:31:36,480
in the dod's case we just lack um

00:31:34,720 --> 00:31:38,000
we lack kubernetes expertise in the

00:31:36,480 --> 00:31:41,120
department overall

00:31:38,000 --> 00:31:43,480
so it's it's contracted in right and

00:31:41,120 --> 00:31:44,799
and the contracting quality is is

00:31:43,480 --> 00:31:48,559
extraordinarily

00:31:44,799 --> 00:31:52,000
varied so i i have

00:31:48,559 --> 00:31:54,799
met few with any and anyone's team

00:31:52,000 --> 00:31:56,559
in any service in the military that i

00:31:54,799 --> 00:31:57,760
walked when i said wow they really get

00:31:56,559 --> 00:32:00,799
service mesh

00:31:57,760 --> 00:32:02,799
it's just i haven't found it uh

00:32:00,799 --> 00:32:04,080
at all and so it's hard and then

00:32:02,799 --> 00:32:05,679
specifically istio

00:32:04,080 --> 00:32:07,120
um we've come a long way in trying to

00:32:05,679 --> 00:32:08,399
simplify that stuff but there's always

00:32:07,120 --> 00:32:11,120
these crazy

00:32:08,399 --> 00:32:12,399
weird gotchas whether it's the gateways

00:32:11,120 --> 00:32:14,399
over service definitions you mentioned

00:32:12,399 --> 00:32:16,399
here or several centuries or some egress

00:32:14,399 --> 00:32:18,720
gateway ism we run into and

00:32:16,399 --> 00:32:19,919
there's always something new some new

00:32:18,720 --> 00:32:22,720
pain we find

00:32:19,919 --> 00:32:24,480
um but we're also perpetually evolving

00:32:22,720 --> 00:32:26,880
the complexity of our stack too we're

00:32:24,480 --> 00:32:27,919
we're deploying both all these dsop

00:32:26,880 --> 00:32:29,440
things which is you know your

00:32:27,919 --> 00:32:30,720
collaboration tools deliver tools

00:32:29,440 --> 00:32:32,480
developer environments

00:32:30,720 --> 00:32:34,799
um but then we're also deploying all

00:32:32,480 --> 00:32:37,440
these very custom specialized workloads

00:32:34,799 --> 00:32:38,880
um some of them for embedded systems uh

00:32:37,440 --> 00:32:40,720
and the weapon systems and so it's

00:32:38,880 --> 00:32:42,080
completely different ecosystem and

00:32:40,720 --> 00:32:44,000
um soon will be real-time operating

00:32:42,080 --> 00:32:45,840
system workloads as well for

00:32:44,000 --> 00:32:47,039
you know for aircraft so there's all

00:32:45,840 --> 00:32:49,600
these really

00:32:47,039 --> 00:32:51,440
complex things happening under the hood

00:32:49,600 --> 00:32:53,760
that having something like istio

00:32:51,440 --> 00:32:55,440
is both wonderfully powerful for the

00:32:53,760 --> 00:32:56,080
security and the flexibility you get

00:32:55,440 --> 00:32:57,600
from it

00:32:56,080 --> 00:33:00,000
but incredibly frustrating when you're

00:32:57,600 --> 00:33:02,880
trying to do deep debugging and so

00:33:00,000 --> 00:33:04,240
like istio ctl analyzes is one of my new

00:33:02,880 --> 00:33:07,120
best friends

00:33:04,240 --> 00:33:08,080
for istioism when i don't understand

00:33:07,120 --> 00:33:09,440
something it definitely

00:33:08,080 --> 00:33:11,519
does a pretty decent job of helping me

00:33:09,440 --> 00:33:12,640
understand what's happening um so that

00:33:11,519 --> 00:33:13,919
i think is one of the most valuable

00:33:12,640 --> 00:33:14,880
things the ecosystems introduced

00:33:13,919 --> 00:33:17,519
recently is

00:33:14,880 --> 00:33:18,080
the cli and actually making it truly

00:33:17,519 --> 00:33:21,120
useful

00:33:18,080 --> 00:33:23,600
for us to help troubleshoot yeah

00:33:21,120 --> 00:33:25,440
yeah i'll just echo that and say that i

00:33:23,600 --> 00:33:27,279
think the issue control

00:33:25,440 --> 00:33:29,360
work uh across a bunch of the different

00:33:27,279 --> 00:33:30,159
commands uh there and a lot of that's

00:33:29,360 --> 00:33:33,120
come out of the

00:33:30,159 --> 00:33:34,559
the uh seo user experience working group

00:33:33,120 --> 00:33:36,080
uh y'all are doing a great job

00:33:34,559 --> 00:33:37,679
right i think that that if i were gonna

00:33:36,080 --> 00:33:38,080
call out kind of one of the one of the

00:33:37,679 --> 00:33:40,480
best

00:33:38,080 --> 00:33:42,320
areas in my opinion of the project today

00:33:40,480 --> 00:33:43,039
uh i think i think y'all are doing great

00:33:42,320 --> 00:33:45,120
stuff

00:33:43,039 --> 00:33:47,039
uh and and really a lot of the tooling

00:33:45,120 --> 00:33:49,279
has come come a really really long way

00:33:47,039 --> 00:33:50,720
there's still a lot more to go uh right

00:33:49,279 --> 00:33:53,519
even catching little errors i

00:33:50,720 --> 00:33:53,919
i have up an example here right uh jeff

00:33:53,519 --> 00:33:55,760
and

00:33:53,919 --> 00:33:58,080
the team had changed some gateway ports

00:33:55,760 --> 00:34:00,240
right and another group that had

00:33:58,080 --> 00:34:02,399
a virtual service that matched on port

00:34:00,240 --> 00:34:04,559
number uh you know that seems

00:34:02,399 --> 00:34:06,480
you know innocent enough until you're

00:34:04,559 --> 00:34:07,120
trying to figure out why traffic doesn't

00:34:06,480 --> 00:34:08,960
flow for

00:34:07,120 --> 00:34:10,159
for one group across you know 20

00:34:08,960 --> 00:34:12,240
different animals

00:34:10,159 --> 00:34:14,480
and you just don't see that oh this this

00:34:12,240 --> 00:34:17,520
443 needs to be an eight four four three

00:34:14,480 --> 00:34:19,520
right uh and you know in little bonus

00:34:17,520 --> 00:34:20,399
points it's using agar to pull it in so

00:34:19,520 --> 00:34:22,000
they're not even like

00:34:20,399 --> 00:34:23,760
all in one spot unless you go look at

00:34:22,000 --> 00:34:25,839
the cluster itself to see it all because

00:34:23,760 --> 00:34:28,399
you won't see it all in one spot

00:34:25,839 --> 00:34:30,000
exactly exactly and so that's some areas

00:34:28,399 --> 00:34:31,440
where i think things like uh you know

00:34:30,000 --> 00:34:33,760
iso control analyze

00:34:31,440 --> 00:34:36,079
uh still has room to grow right there's

00:34:33,760 --> 00:34:36,879
already pretty promising work there to

00:34:36,079 --> 00:34:39,359
begin

00:34:36,879 --> 00:34:41,200
uh and it's already super helpful i

00:34:39,359 --> 00:34:43,200
think as we get more mature

00:34:41,200 --> 00:34:44,960
we can we can start to stamp out a lot

00:34:43,200 --> 00:34:46,960
more of those kind of small

00:34:44,960 --> 00:34:48,000
you know gotcha misconfigs right which

00:34:46,960 --> 00:34:49,839
at least in my experience

00:34:48,000 --> 00:34:53,040
are the vast majority of kind of the the

00:34:49,839 --> 00:34:54,639
angst of istio configuring

00:34:53,040 --> 00:34:56,879
oh yeah for sure it's always just little

00:34:54,639 --> 00:34:59,760
things yep

00:34:56,879 --> 00:35:01,119
uh and then you know finally and we'll

00:34:59,760 --> 00:35:02,560
go pretty fast here because we're we're

00:35:01,119 --> 00:35:04,800
nearly out of time

00:35:02,560 --> 00:35:06,160
uh you know jeff i i don't know what you

00:35:04,800 --> 00:35:06,880
want to say about some of the oss and

00:35:06,160 --> 00:35:08,960
prepackaged

00:35:06,880 --> 00:35:10,640
work uh you know it can be challenging

00:35:08,960 --> 00:35:12,320
for some of these applications

00:35:10,640 --> 00:35:13,920
uh to get iso to run there i think that

00:35:12,320 --> 00:35:15,200
there's opportunity for the seo

00:35:13,920 --> 00:35:17,040
community to work

00:35:15,200 --> 00:35:19,359
with some of these other open source

00:35:17,040 --> 00:35:22,160
communities to kind of provide

00:35:19,359 --> 00:35:22,800
packaged setups uh of hey here is istio

00:35:22,160 --> 00:35:26,960
with

00:35:22,800 --> 00:35:28,640
gitlab or you know whatever it is

00:35:26,960 --> 00:35:30,640
yeah i think for most of the third-party

00:35:28,640 --> 00:35:34,079
tools where we're at right now is

00:35:30,640 --> 00:35:35,599
um our basic idea is north-south traffic

00:35:34,079 --> 00:35:37,680
we're going to protect

00:35:35,599 --> 00:35:38,800
we're going to do the tls uh btls

00:35:37,680 --> 00:35:40,400
enforcement and all those

00:35:38,800 --> 00:35:42,800
the good things we're we've been talking

00:35:40,400 --> 00:35:44,960
about um for third party applications

00:35:42,800 --> 00:35:46,960
that's just how it's going to work um

00:35:44,960 --> 00:35:49,760
for simple third-party applications

00:35:46,960 --> 00:35:50,320
you know east-west we can totally do um

00:35:49,760 --> 00:35:52,720
mtls

00:35:50,320 --> 00:35:53,839
you know within that namespace is

00:35:52,720 --> 00:35:56,880
totally reasonable but

00:35:53,839 --> 00:35:58,560
something like git lab which is it is no

00:35:56,880 --> 00:35:59,040
slide on gitlab it's an incredible tool

00:35:58,560 --> 00:36:02,240
it's just

00:35:59,040 --> 00:36:04,240
massive if you've seen we deployed

00:36:02,240 --> 00:36:06,000
a lot of different gitlab instances

00:36:04,240 --> 00:36:07,839
right now across multiple levels

00:36:06,000 --> 00:36:09,680
of classification and different

00:36:07,839 --> 00:36:10,320
environments and it's it's just a very

00:36:09,680 --> 00:36:13,520
large

00:36:10,320 --> 00:36:15,119
um home chart essentially

00:36:13,520 --> 00:36:16,800
um and and so there's just a bunch of

00:36:15,119 --> 00:36:19,839
stuff going on there so trying to get

00:36:16,800 --> 00:36:20,480
mts enforcement across the the mesh you

00:36:19,839 --> 00:36:21,760
know

00:36:20,480 --> 00:36:23,520
injecting sidecars for all those

00:36:21,760 --> 00:36:25,599
different workloads it just doesn't work

00:36:23,520 --> 00:36:26,720
there's so many i mean we could play

00:36:25,599 --> 00:36:28,400
whack-a-mole all day trying to get those

00:36:26,720 --> 00:36:30,320
to work but it just it just doesn't

00:36:28,400 --> 00:36:32,160
um then we have weird ones like gypsy

00:36:30,320 --> 00:36:32,720
which is a vtc option and i actually met

00:36:32,160 --> 00:36:35,920
with

00:36:32,720 --> 00:36:36,720
um the creator of gypsy and a by a super

00:36:35,920 --> 00:36:38,079
helpful

00:36:36,720 --> 00:36:39,680
very informative about the architecture

00:36:38,079 --> 00:36:40,160
and how they do it at scale for millions

00:36:39,680 --> 00:36:41,599
of

00:36:40,160 --> 00:36:43,520
users it's all vm based and

00:36:41,599 --> 00:36:44,160
orchestration but it's it's not readies

00:36:43,520 --> 00:36:46,160
and

00:36:44,160 --> 00:36:48,000
their their statement to me was um it

00:36:46,160 --> 00:36:49,599
just won't run on kubernetes

00:36:48,000 --> 00:36:51,119
um i understand why they said that now

00:36:49,599 --> 00:36:52,720
because it was literally a nightmare

00:36:51,119 --> 00:36:55,040
um and it's still not fully done we were

00:36:52,720 --> 00:36:56,240
actually waiting on sto16 for a change

00:36:55,040 --> 00:36:59,599
that allowed us to do

00:36:56,240 --> 00:37:01,440
um association by um i think it was

00:36:59,599 --> 00:37:03,760
request uri for our um

00:37:01,440 --> 00:37:04,800
sticky sessions but um and once this was

00:37:03,760 --> 00:37:05,520
broken for us we ended up doing one

00:37:04,800 --> 00:37:06,720
seven but

00:37:05,520 --> 00:37:08,720
yeah just we actually ended up

00:37:06,720 --> 00:37:10,960
leveraging some seo stuff with jitsi

00:37:08,720 --> 00:37:12,400
for north south and east west but then

00:37:10,960 --> 00:37:13,520
only parsley because gypsy under the

00:37:12,400 --> 00:37:15,680
hood using webrtc

00:37:13,520 --> 00:37:17,200
and a lot of udp traffic and though on

00:37:15,680 --> 00:37:18,720
voice supports that the seo support is

00:37:17,200 --> 00:37:20,240
really not there so

00:37:18,720 --> 00:37:21,839
this really complicated like

00:37:20,240 --> 00:37:22,800
orchestration of network load balancers

00:37:21,839 --> 00:37:24,000
and ws

00:37:22,800 --> 00:37:26,400
and then pass that through on host

00:37:24,000 --> 00:37:27,920
supports the big mess so

00:37:26,400 --> 00:37:29,839
definitely a mixed bag right now in the

00:37:27,920 --> 00:37:32,880
open source ecosystem

00:37:29,839 --> 00:37:34,720
yeah uh but maybe a little bit greener

00:37:32,880 --> 00:37:36,720
uh pastors in the in the open source

00:37:34,720 --> 00:37:38,640
ecosystem uh auth services

00:37:36,720 --> 00:37:40,400
has been pretty great uh y'all y'all

00:37:38,640 --> 00:37:41,040
have been able to to achieve quite a bit

00:37:40,400 --> 00:37:43,200
with it

00:37:41,040 --> 00:37:44,480
uh although still still some pain there

00:37:43,200 --> 00:37:47,440
right

00:37:44,480 --> 00:37:48,880
yeah yeah i mean and when we're when we

00:37:47,440 --> 00:37:50,480
found that instead of on that technology

00:37:48,880 --> 00:37:52,720
we knew it wasn't as supported

00:37:50,480 --> 00:37:54,560
and we watched carefully the um the

00:37:52,720 --> 00:37:55,599
folks who did the work to build it

00:37:54,560 --> 00:37:57,760
i believe they were out of pivotal

00:37:55,599 --> 00:37:59,839
originally um and now vmware

00:37:57,760 --> 00:38:01,200
um and i actually intend to reach out to

00:37:59,839 --> 00:38:02,880
some folks over on that side

00:38:01,200 --> 00:38:04,480
and that we work with regularly to to

00:38:02,880 --> 00:38:05,440
kind of find a way to to get more

00:38:04,480 --> 00:38:07,440
involved there because

00:38:05,440 --> 00:38:08,800
um i know that those three or four core

00:38:07,440 --> 00:38:09,680
opportunities are not really focused on

00:38:08,800 --> 00:38:11,200
that right now

00:38:09,680 --> 00:38:12,320
um so it is a little slower sometimes

00:38:11,200 --> 00:38:12,960
you know it's just typical open source

00:38:12,320 --> 00:38:16,079
pain

00:38:12,960 --> 00:38:17,599
um so we're platform one is offering

00:38:16,079 --> 00:38:19,119
to help now so we're gonna try to

00:38:17,599 --> 00:38:21,280
formalize it a little more just to

00:38:19,119 --> 00:38:22,480
find out you know how we can lend our

00:38:21,280 --> 00:38:24,000
hand to keep it

00:38:22,480 --> 00:38:25,200
uh running and maybe down the road we'll

00:38:24,000 --> 00:38:26,800
see it more integrated with this geo

00:38:25,200 --> 00:38:30,160
itself would be wonderful

00:38:26,800 --> 00:38:33,040
yeah no i agree i would love to see that

00:38:30,160 --> 00:38:34,720
uh awesome and so with just uh you know

00:38:33,040 --> 00:38:35,440
some we'll go very quick here because i

00:38:34,720 --> 00:38:37,359
know we are we're

00:38:35,440 --> 00:38:38,800
running short on time if you're looking

00:38:37,359 --> 00:38:40,560
to do this yourself i think

00:38:38,800 --> 00:38:41,920
you know maybe the two biggest things

00:38:40,560 --> 00:38:44,640
that that we would say

00:38:41,920 --> 00:38:46,240
are uh standardize as much as possible

00:38:44,640 --> 00:38:46,720
right i think especially as we're

00:38:46,240 --> 00:38:50,240
getting

00:38:46,720 --> 00:38:51,359
the the 1.5 to 1.7 upgrade uh kind of

00:38:50,240 --> 00:38:53,599
wrapped up

00:38:51,359 --> 00:38:55,760
um you know having snowflakes having

00:38:53,599 --> 00:38:57,200
different uh special things really cuts

00:38:55,760 --> 00:38:59,440
down on the speed at which

00:38:57,200 --> 00:39:00,240
uh the entire organization can move when

00:38:59,440 --> 00:39:02,960
when you're

00:39:00,240 --> 00:39:06,160
and work as big as as a platform one and

00:39:02,960 --> 00:39:07,920
some other dfd customers right

00:39:06,160 --> 00:39:09,839
uh yeah absolutely i think that the

00:39:07,920 --> 00:39:12,000
snowflake comment is huge for us like

00:39:09,839 --> 00:39:14,000
we can't afford to have pets and we need

00:39:12,000 --> 00:39:15,839
cattle because our stuff has to be able

00:39:14,000 --> 00:39:19,440
to redeploy fast to come up and down

00:39:15,839 --> 00:39:21,839
over and over yep yep uh and then

00:39:19,440 --> 00:39:24,320
you know by the same token we we want to

00:39:21,839 --> 00:39:26,480
think very carefully about

00:39:24,320 --> 00:39:28,079
what exactly is being exposed to

00:39:26,480 --> 00:39:29,520
developers and what the cognitive load

00:39:28,079 --> 00:39:30,640
there is right i think jeff did a

00:39:29,520 --> 00:39:33,440
wonderful

00:39:30,640 --> 00:39:34,960
uh you know summary quick summary of you

00:39:33,440 --> 00:39:35,520
know kind of the iterations that they

00:39:34,960 --> 00:39:37,920
went through

00:39:35,520 --> 00:39:39,200
in getting to the the they label your

00:39:37,920 --> 00:39:41,839
pod for sso

00:39:39,200 --> 00:39:42,240
uh that that they delivered today right

00:39:41,839 --> 00:39:44,480
uh

00:39:42,240 --> 00:39:46,480
and and a lot of that iteration was

00:39:44,480 --> 00:39:48,079
really kind of getting at finally

00:39:46,480 --> 00:39:50,320
hey what is the cognitive load that we

00:39:48,079 --> 00:39:51,599
really need to inflict on our developers

00:39:50,320 --> 00:39:52,960
for them to get the benefit

00:39:51,599 --> 00:39:54,960
and how do we minimize that which is

00:39:52,960 --> 00:39:56,640
really just good api design right

00:39:54,960 --> 00:39:58,000
and the more you you can spend some time

00:39:56,640 --> 00:40:00,960
to think through

00:39:58,000 --> 00:40:02,320
uh what that needs to be ahead of kind

00:40:00,960 --> 00:40:04,319
of mass on boarding i think the

00:40:02,320 --> 00:40:07,280
the easier time you'll have with your

00:40:04,319 --> 00:40:08,319
overall mess mesh adoption

00:40:07,280 --> 00:40:11,040
yeah i just have one other thing that

00:40:08,319 --> 00:40:13,040
real quick the um beyond just like

00:40:11,040 --> 00:40:14,720
developers capacity to understand and to

00:40:13,040 --> 00:40:16,800
to even worry about something cognitive

00:40:14,720 --> 00:40:17,920
as you mentioned there's also the point

00:40:16,800 --> 00:40:20,160
of security and

00:40:17,920 --> 00:40:21,280
and focusing your efforts so now we

00:40:20,160 --> 00:40:22,720
don't have 50 different ways of

00:40:21,280 --> 00:40:25,280
implementing

00:40:22,720 --> 00:40:26,640
ssl authentication we have focused ways

00:40:25,280 --> 00:40:28,240
we're doing it and we're consulting this

00:40:26,640 --> 00:40:29,760
down more and more we still have

00:40:28,240 --> 00:40:31,119
deprecated and grandfathered ways we're

00:40:29,760 --> 00:40:32,880
doing it right today that we're moving

00:40:31,119 --> 00:40:34,880
over to this way over time but

00:40:32,880 --> 00:40:36,480
um but the point being that we can focus

00:40:34,880 --> 00:40:37,359
our red team efforts now and our

00:40:36,480 --> 00:40:38,640
assessors

00:40:37,359 --> 00:40:40,319
and from a dod perspective

00:40:38,640 --> 00:40:40,640
accreditation's super important you know

00:40:40,319 --> 00:40:41,920
on

00:40:40,640 --> 00:40:43,680
other industries this is important as

00:40:41,920 --> 00:40:44,960
well for us it's uh there's a lot of

00:40:43,680 --> 00:40:45,680
paperwork a lot of bureaucracy behind

00:40:44,960 --> 00:40:47,359
this but

00:40:45,680 --> 00:40:49,920
we have to have certain texts and and

00:40:47,359 --> 00:40:51,680
things we have to do um that now

00:40:49,920 --> 00:40:53,040
those questions that used to be every

00:40:51,680 --> 00:40:54,560
app team answering

00:40:53,040 --> 00:40:56,960
you know that five six seven questions

00:40:54,560 --> 00:40:59,200
about authentication and aussie opt-in

00:40:56,960 --> 00:41:00,480
are back et cetera we can now answer

00:40:59,200 --> 00:41:01,680
them for the platform level and app

00:41:00,480 --> 00:41:03,280
developers can skip those things and

00:41:01,680 --> 00:41:05,200
focus on their core business versus

00:41:03,280 --> 00:41:06,720
context junk that that they could

00:41:05,200 --> 00:41:08,800
potentially mess up anyway and

00:41:06,720 --> 00:41:10,880
jeopardize their security footprint

00:41:08,800 --> 00:41:11,839
yep and this really goes to the heart of

00:41:10,880 --> 00:41:13,359
what i believe is

00:41:11,839 --> 00:41:15,680
is one of the most powerful benefits of

00:41:13,359 --> 00:41:17,680
the mesh which is it allows these small

00:41:15,680 --> 00:41:19,359
central teams to to create these big

00:41:17,680 --> 00:41:21,440
wins for the entire organization

00:41:19,359 --> 00:41:22,880
right uh the fact that you know who

00:41:21,440 --> 00:41:23,760
knows how much how many man hours you

00:41:22,880 --> 00:41:25,680
save just

00:41:23,760 --> 00:41:26,880
in you know how many engineering hours

00:41:25,680 --> 00:41:29,440
just in the

00:41:26,880 --> 00:41:33,119
the security audit right that that every

00:41:29,440 --> 00:41:36,560
individual program has to go to deploy

00:41:33,119 --> 00:41:37,040
um and so you know in that vein uh we

00:41:36,560 --> 00:41:38,880
actually

00:41:37,040 --> 00:41:41,359
we really do believe that the service

00:41:38,880 --> 00:41:42,960
mesh is the the one of the best ways to

00:41:41,359 --> 00:41:45,040
to start to enforce and obviously source

00:41:42,960 --> 00:41:46,560
just part of the stack uh but we believe

00:41:45,040 --> 00:41:47,040
that these methods really are the best

00:41:46,560 --> 00:41:48,560
way to

00:41:47,040 --> 00:41:50,160
to start to ensure security across an

00:41:48,560 --> 00:41:52,880
organization uh

00:41:50,160 --> 00:41:54,000
and so uh you know one of the in you

00:41:52,880 --> 00:41:55,359
know one of the benefits working with

00:41:54,000 --> 00:41:57,760
the government is we can work with

00:41:55,359 --> 00:41:58,400
with organizations like nist uh to help

00:41:57,760 --> 00:42:00,000
publish

00:41:58,400 --> 00:42:02,079
around these standards right and so

00:42:00,000 --> 00:42:04,560
previously uh there had been

00:42:02,079 --> 00:42:06,400
this sp 800 204a which laid out some

00:42:04,560 --> 00:42:08,480
basic security guidelines

00:42:06,400 --> 00:42:10,079
uh and uh you know kind of the thing

00:42:08,480 --> 00:42:13,040
i'll close one is we actually have some

00:42:10,079 --> 00:42:14,800
uh another upcoming uh sp that will have

00:42:13,040 --> 00:42:18,079
a call for comment on

00:42:14,800 --> 00:42:19,839
hopefully starting uh in in december uh

00:42:18,079 --> 00:42:21,440
that is really about this this idea of

00:42:19,839 --> 00:42:23,040
the service mesh is an operational

00:42:21,440 --> 00:42:25,359
assurance framework right

00:42:23,040 --> 00:42:27,440
a way you know it will will provi

00:42:25,359 --> 00:42:29,680
provide some guidance on

00:42:27,440 --> 00:42:31,040
how you can safely deploy a service mesh

00:42:29,680 --> 00:42:32,400
in a way that gives you these

00:42:31,040 --> 00:42:34,400
operational assurances

00:42:32,400 --> 00:42:35,680
and we'll talk about and we'll talk

00:42:34,400 --> 00:42:37,440
about what those operational insurances

00:42:35,680 --> 00:42:38,800
are in detail uh and then we'll talk

00:42:37,440 --> 00:42:39,359
about how you can then use those to

00:42:38,800 --> 00:42:41,920
deploy

00:42:39,359 --> 00:42:43,680
other systems like authentie and make

00:42:41,920 --> 00:42:45,520
the overall system more secure

00:42:43,680 --> 00:42:46,800
leveraging the service mesh right uh is

00:42:45,520 --> 00:42:47,280
that really kind of getting into the

00:42:46,800 --> 00:42:49,119
meta

00:42:47,280 --> 00:42:52,000
how we use the service masterpoint you

00:42:49,119 --> 00:42:54,240
know even things that the mesh uses

00:42:52,000 --> 00:42:55,200
uh and so we're we're pretty excited

00:42:54,240 --> 00:42:56,880
about that because like we said you know

00:42:55,200 --> 00:42:59,520
we really do think that the the mesh is

00:42:56,880 --> 00:43:00,560
is key for first security uh moving

00:42:59,520 --> 00:43:03,040
forward

00:43:00,560 --> 00:43:04,400
um and with that uh i think hopefully on

00:43:03,040 --> 00:43:07,680
the day we'll we'll take some questions

00:43:04,400 --> 00:43:07,680
jeff anything you want to close with

00:43:07,760 --> 00:43:13,040
nope we're excited yeah awesome

00:43:11,119 --> 00:43:14,800
yeah thank y'all uh and yeah good luck

00:43:13,040 --> 00:43:15,760
for for folks who are looking forward to

00:43:14,800 --> 00:43:19,839
doing kind of similar

00:43:15,760 --> 00:43:19,839

YouTube URL: https://www.youtube.com/watch?v=ihhsEvLDktA


