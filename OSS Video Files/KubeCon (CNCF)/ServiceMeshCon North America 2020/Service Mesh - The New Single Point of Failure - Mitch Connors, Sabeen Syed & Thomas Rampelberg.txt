Title: Service Mesh - The New Single Point of Failure - Mitch Connors, Sabeen Syed & Thomas Rampelberg
Publication date: 2020-11-25
Playlist: ServiceMeshCon North America 2020
Description: 
	Service Mesh - The New Single Point of Failure - Mitch Connors, Google, Sabeen Syed, HashiCorp & Thomas Rampelberg, Buoyant

Interested in knowing why your favorite service mesh was implemented that way? Architecture decisions have real user impact. When building a service mesh, it is possible to fall into a trap of choosing implementation that is easier to build but makes it difficult to operate in the real world. While service meshes enable new levels of resiliency for usersâ€™ applications, they suffer from a chicken and egg problem: How do you build a resilient and scalable service mesh without having a service mesh to rely on?
Maintainers of Istio, Linkerd2 and Consul will walk through tradeoffs the projects have made during implementation and the impact on users. Topics will include:

    - Why it is important to verify environments before installation.
    - How to build a service mesh which can be safely upgraded.
    - What regular security updates mean for upgrades.
    - How to give users the same stability for config changes as they require for code changes
    - What to do when the mesh breaks.
    - Why the division of responsibility is important.
Captions: 
	00:00:00,480 --> 00:00:04,400
good morning servicemeshcon welcome to

00:00:02,800 --> 00:00:05,440
servicemesh the new single point of

00:00:04,400 --> 00:00:07,040
failure

00:00:05,440 --> 00:00:08,480
in this talk we're going to be

00:00:07,040 --> 00:00:10,320
discussing some of the

00:00:08,480 --> 00:00:13,040
trade-offs that service meshes have made

00:00:10,320 --> 00:00:15,599
on implementation and how that impacts

00:00:13,040 --> 00:00:16,480
you as users i'm here representing

00:00:15,599 --> 00:00:18,240
linker d

00:00:16,480 --> 00:00:19,840
mitch will be representing istio and

00:00:18,240 --> 00:00:21,760
sabine will be chatting with us about

00:00:19,840 --> 00:00:23,680
consul

00:00:21,760 --> 00:00:25,199
sabine why don't you uh tell us a little

00:00:23,680 --> 00:00:27,840
bit about yourself

00:00:25,199 --> 00:00:28,640
hi i'm sabine sayeth i'm joining you

00:00:27,840 --> 00:00:31,920
here today

00:00:28,640 --> 00:00:34,640
from my class i work at

00:00:31,920 --> 00:00:36,640
hashicorp as an engineering manager on

00:00:34,640 --> 00:00:39,520
the console service mesh

00:00:36,640 --> 00:00:40,079
i have worked at hashicorp since the

00:00:39,520 --> 00:00:43,200
beginning

00:00:40,079 --> 00:00:44,879
of this year before that i have been

00:00:43,200 --> 00:00:48,800
working in the infrastructure

00:00:44,879 --> 00:00:52,000
industry for about five or six years

00:00:48,800 --> 00:00:53,920
um yeah and i'm super happy to join you

00:00:52,000 --> 00:00:55,600
all today and have this conversation

00:00:53,920 --> 00:00:58,879
with thomas and mitch

00:00:55,600 --> 00:00:59,920
thanks that's fantastic mitch

00:00:58,879 --> 00:01:02,399
can you tell us a little bit about

00:00:59,920 --> 00:01:04,559
yourself hi my name is mitch connors and

00:01:02,399 --> 00:01:06,880
i'm a software engineer with google

00:01:04,559 --> 00:01:08,080
uh i work in seattle washington and in

00:01:06,880 --> 00:01:10,000
the last two years

00:01:08,080 --> 00:01:12,960
i've been working on the istio project

00:01:10,000 --> 00:01:15,119
in particular i work in user experience

00:01:12,960 --> 00:01:16,720
where i make it my goal to really deeply

00:01:15,119 --> 00:01:18,400
understand the way that our users

00:01:16,720 --> 00:01:20,000
interact with istio

00:01:18,400 --> 00:01:21,840
to understand what its strengths are as

00:01:20,000 --> 00:01:23,360
well as its weaknesses and then to take

00:01:21,840 --> 00:01:24,640
those learnings and turn them into

00:01:23,360 --> 00:01:26,400
meaningful features

00:01:24,640 --> 00:01:27,920
that users like you can take advantage

00:01:26,400 --> 00:01:29,600
of in istio

00:01:27,920 --> 00:01:31,200
cubecon is one of my favorite ways to

00:01:29,600 --> 00:01:32,720
meet and interact with users

00:01:31,200 --> 00:01:34,320
to hear about the creative ways that

00:01:32,720 --> 00:01:36,240
you're using our software ways that

00:01:34,320 --> 00:01:37,840
maybe we would have never anticipated

00:01:36,240 --> 00:01:39,600
as well as to understand how we can

00:01:37,840 --> 00:01:41,119
better serve you in the future so i look

00:01:39,600 --> 00:01:42,640
forward to chatting with all of you

00:01:41,119 --> 00:01:44,640
to hearing your questions at the end of

00:01:42,640 --> 00:01:45,439
the session and interacting with you in

00:01:44,640 --> 00:01:47,680
the lobbies

00:01:45,439 --> 00:01:47,680
thanks

00:01:50,240 --> 00:01:53,360
and hello everyone my name is thomas

00:01:52,159 --> 00:01:56,399
rampelberg i'm

00:01:53,360 --> 00:01:59,600
a software engineer here at buoyant

00:01:56,399 --> 00:02:02,640
the creators of linker d

00:01:59,600 --> 00:02:04,320
linker d is a super fast

00:02:02,640 --> 00:02:05,840
super lightweight service mesh that's

00:02:04,320 --> 00:02:08,560
really focused on

00:02:05,840 --> 00:02:09,920
user experience here's a little bit of a

00:02:08,560 --> 00:02:10,640
agenda for what we're going to be

00:02:09,920 --> 00:02:13,680
covering

00:02:10,640 --> 00:02:14,959
today i'd like to call it turtles all

00:02:13,680 --> 00:02:16,160
the way down

00:02:14,959 --> 00:02:17,920
first off we're going to be talking a

00:02:16,160 --> 00:02:19,840
little bit about complexity or the power

00:02:17,920 --> 00:02:21,360
of saying no

00:02:19,840 --> 00:02:23,840
what it takes to go and build your

00:02:21,360 --> 00:02:26,319
service mesh out in a

00:02:23,840 --> 00:02:27,040
way that walks the fine line between

00:02:26,319 --> 00:02:29,520
features

00:02:27,040 --> 00:02:31,519
and something that isn't particularly

00:02:29,520 --> 00:02:33,360
usable for folks

00:02:31,519 --> 00:02:35,200
then we will be chatting a little bit

00:02:33,360 --> 00:02:36,400
about how to operate your service mesh

00:02:35,200 --> 00:02:40,239
and what that takes and

00:02:36,400 --> 00:02:40,720
finally my perhaps most passionate

00:02:40,239 --> 00:02:43,440
subject

00:02:40,720 --> 00:02:44,400
what to do when the service mesh breaks

00:02:43,440 --> 00:02:46,879
or

00:02:44,400 --> 00:02:48,480
how to figure out how to debug and

00:02:46,879 --> 00:02:52,560
manage your service mesh

00:02:48,480 --> 00:02:54,720
in production all right

00:02:52,560 --> 00:02:56,640
complexity i've never heard of you

00:02:54,720 --> 00:02:58,080
complexity is a big part of service

00:02:56,640 --> 00:02:59,120
meshes obviously it's something we want

00:02:58,080 --> 00:03:00,400
to fight against

00:02:59,120 --> 00:03:02,400
since we're talking about a new single

00:03:00,400 --> 00:03:04,000
point of failure a complex

00:03:02,400 --> 00:03:05,519
single point of failure is 10 times

00:03:04,000 --> 00:03:07,599
worse than a

00:03:05,519 --> 00:03:09,360
normal single point of failure though

00:03:07,599 --> 00:03:11,920
obviously we'd prefer not to have a

00:03:09,360 --> 00:03:14,159
single point of failure to begin with

00:03:11,920 --> 00:03:14,959
to get me to get us started on this one

00:03:14,159 --> 00:03:17,360
mitch i know this

00:03:14,959 --> 00:03:18,560
one is a subject you're particularly

00:03:17,360 --> 00:03:20,319
passionate about

00:03:18,560 --> 00:03:22,560
uh tell us a little bit about how

00:03:20,319 --> 00:03:24,159
istio's been managing the complexity

00:03:22,560 --> 00:03:26,480
is there anything you've done recently

00:03:24,159 --> 00:03:29,280
that you feel has made a really big

00:03:26,480 --> 00:03:30,959
big win there yeah you know as i think

00:03:29,280 --> 00:03:32,000
about service mesh in general what it

00:03:30,959 --> 00:03:33,519
does really well

00:03:32,000 --> 00:03:35,760
across the board i think is it takes

00:03:33,519 --> 00:03:37,200
complexity out of your application layer

00:03:35,760 --> 00:03:38,959
which is great your developers don't

00:03:37,200 --> 00:03:41,280
need to think about all sorts of complex

00:03:38,959 --> 00:03:43,519
network topologies and problems

00:03:41,280 --> 00:03:44,400
uh the downside though is that we tend

00:03:43,519 --> 00:03:46,640
to sort of

00:03:44,400 --> 00:03:49,360
have the consolidation of all of that

00:03:46,640 --> 00:03:51,920
complexity into one layer that can look

00:03:49,360 --> 00:03:52,640
very difficult to manage and fragile at

00:03:51,920 --> 00:03:54,000
times

00:03:52,640 --> 00:03:55,760
and so one thing that we learned in

00:03:54,000 --> 00:03:57,920
istio is that even though we're

00:03:55,760 --> 00:03:59,439
developing a product for microservices

00:03:57,920 --> 00:04:02,000
and we've all got a pretty good

00:03:59,439 --> 00:04:04,560
background in running microservices

00:04:02,000 --> 00:04:06,560
it was just too much complexity to have

00:04:04,560 --> 00:04:08,879
your microservices management platform

00:04:06,560 --> 00:04:11,280
run microservices itself

00:04:08,879 --> 00:04:12,319
asking our users to run microservices on

00:04:11,280 --> 00:04:13,599
our behalf

00:04:12,319 --> 00:04:15,280
where we're not actually the ones

00:04:13,599 --> 00:04:16,799
operating these things we're not even

00:04:15,280 --> 00:04:18,400
necessarily talking to the people who

00:04:16,799 --> 00:04:20,720
are operating these things

00:04:18,400 --> 00:04:23,120
was just too much complexity and so a

00:04:20,720 --> 00:04:24,960
year ago we moved to a monolithic model

00:04:23,120 --> 00:04:26,880
for our service mesh and we've seen

00:04:24,960 --> 00:04:28,800
substantially reduced friction

00:04:26,880 --> 00:04:30,800
uh in terms of upgrade and maintenance

00:04:28,800 --> 00:04:31,680
for our users as a result of that it's

00:04:30,800 --> 00:04:33,759
been a sort of

00:04:31,680 --> 00:04:34,800
counter-intuitive maybe eyebrow-raising

00:04:33,759 --> 00:04:36,479
move for some

00:04:34,800 --> 00:04:39,040
but i think it's been great for our

00:04:36,479 --> 00:04:40,160
users the other area that we're always

00:04:39,040 --> 00:04:43,040
fighting complexity

00:04:40,160 --> 00:04:44,560
is project sprawl uh and that is we're

00:04:43,040 --> 00:04:46,320
always hearing from

00:04:44,560 --> 00:04:48,160
various users well we'd love to see a

00:04:46,320 --> 00:04:50,479
full-fledged canary feature

00:04:48,160 --> 00:04:51,759
or we'd love like a full platform for

00:04:50,479 --> 00:04:53,520
running software

00:04:51,759 --> 00:04:56,320
and services where we can see all of the

00:04:53,520 --> 00:04:58,160
knobs in one place and a user interface

00:04:56,320 --> 00:05:00,479
we made the very intentional decision

00:04:58,160 --> 00:05:02,080
not to be a platform

00:05:00,479 --> 00:05:05,039
and it's an interesting decision because

00:05:02,080 --> 00:05:06,720
it means that istio is not all you need

00:05:05,039 --> 00:05:08,080
to run your services we are not a

00:05:06,720 --> 00:05:10,080
one-stop shop

00:05:08,080 --> 00:05:12,000
the intentional decision there is that

00:05:10,080 --> 00:05:13,520
we want to be part of an ecosystem

00:05:12,000 --> 00:05:15,520
we know that we are not going to be the

00:05:13,520 --> 00:05:17,759
best at everything so we're going to

00:05:15,520 --> 00:05:19,360
strive to be the best at a very core set

00:05:17,759 --> 00:05:21,759
of service mesh features

00:05:19,360 --> 00:05:23,280
and then allow various other

00:05:21,759 --> 00:05:23,759
technologies to come in and fill the

00:05:23,280 --> 00:05:25,360
gaps

00:05:23,759 --> 00:05:26,639
such as canarying there's a number of

00:05:25,360 --> 00:05:27,120
technologies out there today that are

00:05:26,639 --> 00:05:29,120
doing

00:05:27,120 --> 00:05:30,240
a great job with it built on top of

00:05:29,120 --> 00:05:31,280
service mesh so

00:05:30,240 --> 00:05:33,759
that's kind of how i think about

00:05:31,280 --> 00:05:37,039
complexity and how we manage it in istio

00:05:33,759 --> 00:05:38,320
i really love the microservices point

00:05:37,039 --> 00:05:40,160
i have a long argument that

00:05:38,320 --> 00:05:41,919
microservices don't actually solve a

00:05:40,160 --> 00:05:42,800
technology problem they solve a people

00:05:41,919 --> 00:05:44,800
problem

00:05:42,800 --> 00:05:46,560
and if you've got uh microservices

00:05:44,800 --> 00:05:49,280
solving a people problem where teams get

00:05:46,560 --> 00:05:51,440
to own their own destiny

00:05:49,280 --> 00:05:53,199
the service mesh owned by a single

00:05:51,440 --> 00:05:55,360
vendor aka

00:05:53,199 --> 00:05:56,319
the istio team doesn't really make very

00:05:55,360 --> 00:05:58,800
much sense as

00:05:56,319 --> 00:06:00,400
a microservice solution um and it's just

00:05:58,800 --> 00:06:03,600
it's fascinating to see

00:06:00,400 --> 00:06:06,000
how that all fits together uh yeah

00:06:03,600 --> 00:06:06,800
that that's super cool to go and uh

00:06:06,000 --> 00:06:10,479
think about there

00:06:06,800 --> 00:06:14,000
the um i love your point too about the

00:06:10,479 --> 00:06:15,680
uh not being a platform um it's too bad

00:06:14,000 --> 00:06:17,600
that kubernetes doesn't come with a

00:06:15,680 --> 00:06:20,240
service mesh out of the box and a canary

00:06:17,600 --> 00:06:22,160
deployment but i think that uh

00:06:20,240 --> 00:06:23,680
especially once we start talking cloud

00:06:22,160 --> 00:06:24,560
native there's so many folks that have

00:06:23,680 --> 00:06:27,199
so many different

00:06:24,560 --> 00:06:29,520
interesting unique uk use cases that the

00:06:27,199 --> 00:06:31,360
only way to have a great solution

00:06:29,520 --> 00:06:33,280
is to make it so that the community can

00:06:31,360 --> 00:06:34,880
build badass stuff like

00:06:33,280 --> 00:06:36,639
something on the linker d side in

00:06:34,880 --> 00:06:36,960
particular we don't do ingress and we

00:06:36,639 --> 00:06:38,960
don't

00:06:36,960 --> 00:06:41,120
do ingress because there's a bunch of

00:06:38,960 --> 00:06:42,000
amazing ingress controllers out there i

00:06:41,120 --> 00:06:43,840
did uh

00:06:42,000 --> 00:06:45,039
my kubecon talk is going to be with the

00:06:43,840 --> 00:06:46,960
ambassador folks

00:06:45,039 --> 00:06:48,080
which is a fantastic solution for us

00:06:46,960 --> 00:06:49,199
because they're they're going to do it

00:06:48,080 --> 00:06:52,400
better than we

00:06:49,199 --> 00:06:54,240
ever will you know how that works um

00:06:52,400 --> 00:06:55,759
sabine uh tell me a little bit about

00:06:54,240 --> 00:06:57,199
console and how uh

00:06:55,759 --> 00:06:58,800
you've been managing the complexity

00:06:57,199 --> 00:07:01,280
there yeah

00:06:58,800 --> 00:07:02,000
so um one of the things kind of

00:07:01,280 --> 00:07:04,000
piggybacking

00:07:02,000 --> 00:07:05,039
off of both what you thomas and mitch

00:07:04,000 --> 00:07:07,599
had said

00:07:05,039 --> 00:07:09,280
um so one of the pieces that we decided

00:07:07,599 --> 00:07:10,560
to say no to or that we didn't want to

00:07:09,280 --> 00:07:13,599
build

00:07:10,560 --> 00:07:16,880
was an apm solution so

00:07:13,599 --> 00:07:20,400
we did not want to store metrics in

00:07:16,880 --> 00:07:23,280
console but we also we still

00:07:20,400 --> 00:07:24,800
wanted our users uh to be able to

00:07:23,280 --> 00:07:27,840
visually see

00:07:24,800 --> 00:07:29,280
their user workflows and metrics in the

00:07:27,840 --> 00:07:32,639
console ui

00:07:29,280 --> 00:07:33,440
so um what we have built is a scalable

00:07:32,639 --> 00:07:36,560
javascript

00:07:33,440 --> 00:07:38,319
plugin and this javascript plugin allows

00:07:36,560 --> 00:07:41,759
users to query data

00:07:38,319 --> 00:07:44,400
um in the apms that they use and apms

00:07:41,759 --> 00:07:45,199
just fyi for those folks who may not

00:07:44,400 --> 00:07:47,599
know is

00:07:45,199 --> 00:07:48,240
an application performance management

00:07:47,599 --> 00:07:50,560
tool

00:07:48,240 --> 00:07:53,120
uh and these are as an example there's

00:07:50,560 --> 00:07:56,479
prometheus and datadog

00:07:53,120 --> 00:08:00,319
so right now we have a plug-in

00:07:56,479 --> 00:08:02,879
for prometheus so our users can use that

00:08:00,319 --> 00:08:04,240
um query that get data from there and

00:08:02,879 --> 00:08:07,440
then we have

00:08:04,240 --> 00:08:10,240
um in our console ui

00:08:07,440 --> 00:08:11,520
we have a topology view that basically

00:08:10,240 --> 00:08:13,599
shows the data model

00:08:11,520 --> 00:08:16,080
and then it supplements it with metrics

00:08:13,599 --> 00:08:16,879
data coming from that apn so things like

00:08:16,080 --> 00:08:20,240
your

00:08:16,879 --> 00:08:24,080
requests per second latency error rates

00:08:20,240 --> 00:08:24,960
so so the dashboard for console can

00:08:24,080 --> 00:08:28,160
actually pull

00:08:24,960 --> 00:08:29,039
metrics out of datadog correct that's

00:08:28,160 --> 00:08:31,919
super cool

00:08:29,039 --> 00:08:32,479
that's super cool yeah so right now we

00:08:31,919 --> 00:08:35,599
have

00:08:32,479 --> 00:08:38,839
um our first plugin is for prometheus

00:08:35,599 --> 00:08:40,240
and so we can add on other plugins for

00:08:38,839 --> 00:08:43,120
others

00:08:40,240 --> 00:08:44,320
yeah we uh in linker d we looked at

00:08:43,120 --> 00:08:45,680
prometheus and said

00:08:44,320 --> 00:08:47,040
everyone in the world is integrating

00:08:45,680 --> 00:08:48,880
with prometheus so we're just gonna

00:08:47,040 --> 00:08:49,839
stick stuff in prometheus and hope for

00:08:48,880 --> 00:08:51,839
the best

00:08:49,839 --> 00:08:54,160
uh mitch this is actually an interesting

00:08:51,839 --> 00:08:55,920
conversation given istio's history

00:08:54,160 --> 00:08:58,480
tell us a little bit about where uh

00:08:55,920 --> 00:08:59,760
istio's relationship with the prometheus

00:08:58,480 --> 00:09:01,760
and where that's gone

00:08:59,760 --> 00:09:02,880
so i'm curious where where you'd like me

00:09:01,760 --> 00:09:04,480
to go with that one are you thinking

00:09:02,880 --> 00:09:05,680
about mixer and what we've done with

00:09:04,480 --> 00:09:06,959
that over time

00:09:05,680 --> 00:09:08,480
are you thinking about our default

00:09:06,959 --> 00:09:10,399
installs with prometheus and how we've

00:09:08,480 --> 00:09:11,600
removed that from the project

00:09:10,399 --> 00:09:13,200
i didn't know that you'd remove

00:09:11,600 --> 00:09:14,080
prometheus from the project that's a new

00:09:13,200 --> 00:09:15,760
one for me

00:09:14,080 --> 00:09:18,080
yeah we have and it's because we love

00:09:15,760 --> 00:09:21,440
prometheus so it's a little bit of a

00:09:18,080 --> 00:09:23,839
surprising twist we found that users

00:09:21,440 --> 00:09:25,519
already have prometheus installs

00:09:23,839 --> 00:09:26,880
and they don't want to fiddle with

00:09:25,519 --> 00:09:28,399
federation levers

00:09:26,880 --> 00:09:30,000
in trying to get our prometheus

00:09:28,399 --> 00:09:31,519
installed to work well with theirs and

00:09:30,000 --> 00:09:33,440
they really don't want

00:09:31,519 --> 00:09:35,920
our prometheus install to overwrite

00:09:33,440 --> 00:09:37,680
theirs um so we found that it was best

00:09:35,920 --> 00:09:39,519
just not to install it and give them

00:09:37,680 --> 00:09:40,880
clean instructions on how to plug

00:09:39,519 --> 00:09:43,920
their service mesh into their

00:09:40,880 --> 00:09:46,640
pre-existing prometheus install

00:09:43,920 --> 00:09:48,160
we uh we are about to release a stable

00:09:46,640 --> 00:09:50,160
version of linker d that

00:09:48,160 --> 00:09:51,680
comes with our bring your own prometheus

00:09:50,160 --> 00:09:54,080
uh solution

00:09:51,680 --> 00:09:54,880
for a lot of those same reasons um no i

00:09:54,080 --> 00:09:57,720
was actually

00:09:54,880 --> 00:10:00,320
thinking more about the mixer or the

00:09:57,720 --> 00:10:01,680
demixerification that has happened uh

00:10:00,320 --> 00:10:04,240
recently especially since we were

00:10:01,680 --> 00:10:05,680
talking about um

00:10:04,240 --> 00:10:07,920
complexity i thought that that was an

00:10:05,680 --> 00:10:10,079
interesting piece there but

00:10:07,920 --> 00:10:11,680
generally speaking especially as cloud

00:10:10,079 --> 00:10:13,920
native projects i think

00:10:11,680 --> 00:10:15,440
we've all realized that metrics are

00:10:13,920 --> 00:10:16,959
better served by the community to go

00:10:15,440 --> 00:10:18,000
back to the theme we're kind of going

00:10:16,959 --> 00:10:21,040
along there

00:10:18,000 --> 00:10:23,040
yeah mixer was an interesting

00:10:21,040 --> 00:10:23,760
architectural change because originally

00:10:23,040 --> 00:10:25,200
mixer one

00:10:23,760 --> 00:10:27,600
was one of the key motivations for

00:10:25,200 --> 00:10:30,000
running istio's microservices

00:10:27,600 --> 00:10:32,560
mixer was the only layer that logically

00:10:30,000 --> 00:10:32,880
could block the data plane so it had to

00:10:32,560 --> 00:10:35,760
run

00:10:32,880 --> 00:10:37,600
extremely light extremely fast and it

00:10:35,760 --> 00:10:39,200
was because of policy decisions we also

00:10:37,600 --> 00:10:40,480
put telemetry there because of the close

00:10:39,200 --> 00:10:41,279
coupling with the data plane but that

00:10:40,480 --> 00:10:43,120
was more

00:10:41,279 --> 00:10:46,160
incidental policy decisions are really

00:10:43,120 --> 00:10:48,480
the hard part that mixer was handling

00:10:46,160 --> 00:10:50,640
fortunately over the last year the

00:10:48,480 --> 00:10:51,279
developments in webassembly have made it

00:10:50,640 --> 00:10:53,360
so that

00:10:51,279 --> 00:10:55,200
those decisions can actually be written

00:10:53,360 --> 00:10:56,959
in arbitrary code that executes

00:10:55,200 --> 00:10:59,519
inside of the data plane so with zero

00:10:56,959 --> 00:11:01,279
latency in terms of network cost

00:10:59,519 --> 00:11:02,720
and that's what enabled us to get rid of

00:11:01,279 --> 00:11:04,079
mixer and ultimately move towards

00:11:02,720 --> 00:11:06,800
monolithic uh

00:11:04,079 --> 00:11:09,839
micro uh not monolithic microservices

00:11:06,800 --> 00:11:11,440
monolithic service mesh there we go

00:11:09,839 --> 00:11:13,279
and it's super interesting because it's

00:11:11,440 --> 00:11:14,480
a monolithic service mesh but with the

00:11:13,279 --> 00:11:16,079
wasm plug-ins in

00:11:14,480 --> 00:11:19,200
envoy it's almost like you've got it

00:11:16,079 --> 00:11:21,120
like the ultimate distributed system

00:11:19,200 --> 00:11:23,279
yeah i don't think anyone has fully

00:11:21,120 --> 00:11:24,399
realized the capabilities including the

00:11:23,279 --> 00:11:27,600
istio project

00:11:24,399 --> 00:11:29,680
uh the capabilities of having arbitrary

00:11:27,600 --> 00:11:32,079
javascript script code that just runs

00:11:29,680 --> 00:11:33,519
ubiquitously in the in your proxy

00:11:32,079 --> 00:11:34,640
i am really excited to see the

00:11:33,519 --> 00:11:36,720
developments that come out of that over

00:11:34,640 --> 00:11:38,480
the next two years especially now that

00:11:36,720 --> 00:11:40,640
webassembly has been merged back into

00:11:38,480 --> 00:11:43,680
the envoy upstream

00:11:40,640 --> 00:11:46,800
i have done horrible

00:11:43,680 --> 00:11:48,640
embarrassing things with uh ebpf that

00:11:46,800 --> 00:11:50,639
are basically the same

00:11:48,640 --> 00:11:52,399
once you give someone the ability to do

00:11:50,639 --> 00:11:54,399
anything the world

00:11:52,399 --> 00:11:56,639
their world is their oyster the hacks i

00:11:54,399 --> 00:11:58,639
have done it's it's unfortunate

00:11:56,639 --> 00:12:00,880
it will be a wonderful terrible world i

00:11:58,639 --> 00:12:00,880
think

00:12:00,959 --> 00:12:03,519
uh sabine i think you mentioned you had

00:12:02,399 --> 00:12:05,360
something else that you wanted to bring

00:12:03,519 --> 00:12:08,880
up around complexity too

00:12:05,360 --> 00:12:11,440
yeah so there's one other thing that um

00:12:08,880 --> 00:12:13,040
that we decided not to go forward with

00:12:11,440 --> 00:12:16,399
um and this was around

00:12:13,040 --> 00:12:17,279
um supporting multiple console

00:12:16,399 --> 00:12:22,160
installations

00:12:17,279 --> 00:12:22,160
on one kubernetes cluster ah yes

00:12:22,240 --> 00:12:26,240
so some users they uh you know they

00:12:25,120 --> 00:12:29,120
might want to have

00:12:26,240 --> 00:12:29,440
two environments on their k-8s cluster

00:12:29,120 --> 00:12:31,279
so

00:12:29,440 --> 00:12:33,040
you know a dev environment and a

00:12:31,279 --> 00:12:34,639
production environment possibly on the

00:12:33,040 --> 00:12:37,040
same kh cluster

00:12:34,639 --> 00:12:38,000
and so that can result in a number of

00:12:37,040 --> 00:12:40,800
issues like security

00:12:38,000 --> 00:12:43,120
issues performance issues so just like

00:12:40,800 --> 00:12:45,360
around the security issues

00:12:43,120 --> 00:12:46,639
if you have two environments on your k-8

00:12:45,360 --> 00:12:49,360
cluster and you have two

00:12:46,639 --> 00:12:52,240
console installations as well if there's

00:12:49,360 --> 00:12:54,800
a console client that you want to

00:12:52,240 --> 00:12:55,440
register with for example your dev

00:12:54,800 --> 00:12:58,560
environment

00:12:55,440 --> 00:13:00,240
but you do it by accident to production

00:12:58,560 --> 00:13:02,000
that can cause huge you know very

00:13:00,240 --> 00:13:05,279
obvious security issue there

00:13:02,000 --> 00:13:06,800
um and then along the same thing um

00:13:05,279 --> 00:13:09,040
that can also cause performance issues

00:13:06,800 --> 00:13:10,320
where if your dev environment or your

00:13:09,040 --> 00:13:12,160
staging environment

00:13:10,320 --> 00:13:13,440
uh there's a ton of tests running and

00:13:12,160 --> 00:13:14,480
all of a sudden it's using a whole bunch

00:13:13,440 --> 00:13:16,399
of resources

00:13:14,480 --> 00:13:17,680
so then that can have an effect on your

00:13:16,399 --> 00:13:19,600
production environment

00:13:17,680 --> 00:13:21,040
so we basically wanted to make sure that

00:13:19,600 --> 00:13:23,519
users don't

00:13:21,040 --> 00:13:25,839
run into these issues and so therefore

00:13:23,519 --> 00:13:28,800
we decided to limit to

00:13:25,839 --> 00:13:30,639
uh one console data center one console

00:13:28,800 --> 00:13:34,320
installation on one

00:13:30,639 --> 00:13:37,360
kubernetes cluster yeah we uh

00:13:34,320 --> 00:13:39,680
we started out supporting multiple uh

00:13:37,360 --> 00:13:40,560
lingerie installs on clusters with this

00:13:39,680 --> 00:13:44,079
idea that

00:13:40,560 --> 00:13:45,440
uh less the like dev prod instance so

00:13:44,079 --> 00:13:47,040
that's a really good use case but more

00:13:45,440 --> 00:13:48,399
of the multi-tenancy which i think i'm

00:13:47,040 --> 00:13:49,040
going to ask mitch in a second about

00:13:48,399 --> 00:13:51,440
because

00:13:49,040 --> 00:13:53,760
i'm super excited to hear there uh but

00:13:51,440 --> 00:13:56,160
we ran in directly into the buzz saw of

00:13:53,760 --> 00:13:56,720
crds because you can't have crd's

00:13:56,160 --> 00:13:59,199
version

00:13:56,720 --> 00:14:00,880
in any reasonable fashion having two

00:13:59,199 --> 00:14:02,639
installs especially of linker d when

00:14:00,880 --> 00:14:03,680
you've got a couple crds starts to

00:14:02,639 --> 00:14:05,519
become

00:14:03,680 --> 00:14:07,440
totally untenable because how do you do

00:14:05,519 --> 00:14:10,160
the upgrades how do you keep from

00:14:07,440 --> 00:14:11,040
stepping on other people's feeds feet

00:14:10,160 --> 00:14:12,480
and so

00:14:11,040 --> 00:14:14,320
at least on our side of things we've

00:14:12,480 --> 00:14:17,040
really been pushing the

00:14:14,320 --> 00:14:18,399
multi-cluster as a way to do isolation

00:14:17,040 --> 00:14:20,800
and multi-tenancy

00:14:18,399 --> 00:14:21,920
instead and i will point out that i

00:14:20,800 --> 00:14:24,959
personally would never

00:14:21,920 --> 00:14:27,440
operate a dev and prod

00:14:24,959 --> 00:14:28,320
kubernetes cluster as one that that's

00:14:27,440 --> 00:14:31,279
crazy

00:14:28,320 --> 00:14:33,360
um so mitch i'm super excited tell us a

00:14:31,279 --> 00:14:35,120
little bit about istio and uh multiple

00:14:33,360 --> 00:14:36,800
installs on a cluster

00:14:35,120 --> 00:14:38,240
yeah so multiple installs on a cluster

00:14:36,800 --> 00:14:40,240
has been something we've been working

00:14:38,240 --> 00:14:40,639
towards for the last like 15 months or

00:14:40,240 --> 00:14:43,279
so

00:14:40,639 --> 00:14:45,360
it's been kind of early access since one

00:14:43,279 --> 00:14:47,600
five one six time frame

00:14:45,360 --> 00:14:49,680
but i think it's safe to say that in one

00:14:47,600 --> 00:14:51,519
eight the standard way of upgrading

00:14:49,680 --> 00:14:53,199
istio actually involves running multiple

00:14:51,519 --> 00:14:55,920
installs concurrently

00:14:53,199 --> 00:14:57,920
interesting because we've consolidated

00:14:55,920 --> 00:14:58,959
that single point of failure into one

00:14:57,920 --> 00:15:01,440
resource

00:14:58,959 --> 00:15:02,959
the kubernetes deployment model of

00:15:01,440 --> 00:15:04,720
updating a deployment and kind of

00:15:02,959 --> 00:15:07,279
crossing your fingers that health checks

00:15:04,720 --> 00:15:09,040
fail if something goes wrong

00:15:07,279 --> 00:15:11,519
just wasn't enough security and safety

00:15:09,040 --> 00:15:13,199
for our users in particular

00:15:11,519 --> 00:15:15,040
when you upgrade a control plane in a

00:15:13,199 --> 00:15:15,760
service mesh often times the health

00:15:15,040 --> 00:15:17,199
failure

00:15:15,760 --> 00:15:19,920
doesn't happen within the control plane

00:15:17,199 --> 00:15:22,079
itself it happens within the proxies

00:15:19,920 --> 00:15:24,320
and kubernetes doesn't provide the kind

00:15:22,079 --> 00:15:26,399
of levers and granularity that we needed

00:15:24,320 --> 00:15:29,040
to really detect failure early

00:15:26,399 --> 00:15:29,920
in moving to a control plane so with

00:15:29,040 --> 00:15:31,839
revisions

00:15:29,920 --> 00:15:33,120
what we recommend users do like if

00:15:31,839 --> 00:15:36,720
you're moving from say one

00:15:33,120 --> 00:15:38,480
seven to one eight uh is you install

00:15:36,720 --> 00:15:40,399
a separate one eight control plane that

00:15:38,480 --> 00:15:41,279
initially does nothing but serve ingress

00:15:40,399 --> 00:15:42,959
traffic

00:15:41,279 --> 00:15:44,639
it's using all the same route of trust

00:15:42,959 --> 00:15:45,920
all the same mtls and everything else as

00:15:44,639 --> 00:15:47,600
the other control plane

00:15:45,920 --> 00:15:49,120
it's just got almost no proxies

00:15:47,600 --> 00:15:51,360
connected to it and then

00:15:49,120 --> 00:15:53,519
as you're comfortable you go through and

00:15:51,360 --> 00:15:54,320
cut your proxies over one name space at

00:15:53,519 --> 00:15:56,079
a time

00:15:54,320 --> 00:15:57,839
until you're finally able to shut down

00:15:56,079 --> 00:15:59,600
that old revision of istio

00:15:57,839 --> 00:16:01,040
so i don't know that we envision a lot

00:15:59,600 --> 00:16:03,120
of use cases where people are

00:16:01,040 --> 00:16:05,040
permanently running multiple vision

00:16:03,120 --> 00:16:05,680
revisions uh in one cluster although

00:16:05,040 --> 00:16:07,279
that is

00:16:05,680 --> 00:16:09,199
it's possible we're just not certain

00:16:07,279 --> 00:16:11,040
it's useful um

00:16:09,199 --> 00:16:12,480
but as far as upgrades go it's been a

00:16:11,040 --> 00:16:13,759
very beneficial tool

00:16:12,480 --> 00:16:15,680
and i think has increased the

00:16:13,759 --> 00:16:17,199
predictability of the upgrade process a

00:16:15,680 --> 00:16:19,600
good deal

00:16:17,199 --> 00:16:20,639
yeah the uh it's super interesting to

00:16:19,600 --> 00:16:23,600
talk about upgrades

00:16:20,639 --> 00:16:25,360
in general are like are hard uh i've in

00:16:23,600 --> 00:16:26,880
the kubernetes ecosystem in particular

00:16:25,360 --> 00:16:28,320
i'm really excited about all of the

00:16:26,880 --> 00:16:30,240
folks who are working on

00:16:28,320 --> 00:16:31,839
uh workflow related projects because

00:16:30,240 --> 00:16:32,560
especially upgrading service mesh to

00:16:31,839 --> 00:16:34,320
your point

00:16:32,560 --> 00:16:36,240
you really need gates right it's not

00:16:34,320 --> 00:16:38,720
just upgrading the control plane

00:16:36,240 --> 00:16:40,560
it's also making sure that the proxies

00:16:38,720 --> 00:16:42,480
are at the right version and then

00:16:40,560 --> 00:16:43,920
you know okay i can upgrade the control

00:16:42,480 --> 00:16:45,279
plane this far

00:16:43,920 --> 00:16:46,800
but now i need to wait make sure that

00:16:45,279 --> 00:16:48,320
the data plane gets rolled before i go

00:16:46,800 --> 00:16:51,040
do the next steps

00:16:48,320 --> 00:16:51,920
and that's and that's a tough it's a

00:16:51,040 --> 00:16:53,519
hard problem

00:16:51,920 --> 00:16:56,959
distributed systems i hear are

00:16:53,519 --> 00:16:56,959
challenging for some reason

00:16:58,720 --> 00:17:02,160
yeah you know you almost wish that you

00:17:00,399 --> 00:17:05,520
had a service mesh to run your service

00:17:02,160 --> 00:17:08,720
mesh on

00:17:05,520 --> 00:17:10,160
all the way down all right it's super

00:17:08,720 --> 00:17:12,000
awesome to hear about how

00:17:10,160 --> 00:17:13,439
we've all been managing complexity in

00:17:12,000 --> 00:17:15,520
our own service meshes

00:17:13,439 --> 00:17:18,480
uh but let's talk a little bit about a

00:17:15,520 --> 00:17:21,120
subject that's near and dear to my heart

00:17:18,480 --> 00:17:22,959
actually operating the mesh did you say

00:17:21,120 --> 00:17:25,679
someone needs to keep the mesh up

00:17:22,959 --> 00:17:27,600
how do you go and tackle actually

00:17:25,679 --> 00:17:28,480
managing this thing in a cloud native

00:17:27,600 --> 00:17:31,919
world where there's

00:17:28,480 --> 00:17:33,120
all kinds of operators and users sabine

00:17:31,919 --> 00:17:36,400
tell us a little bit about

00:17:33,120 --> 00:17:38,799
the console side of things yeah so

00:17:36,400 --> 00:17:39,760
on the console side well specifically

00:17:38,799 --> 00:17:42,240
around

00:17:39,760 --> 00:17:43,360
getting started or getting the mesh up

00:17:42,240 --> 00:17:46,320
and running

00:17:43,360 --> 00:17:46,960
there's a few things that we do to make

00:17:46,320 --> 00:17:50,000
that

00:17:46,960 --> 00:17:52,960
easier um so the first

00:17:50,000 --> 00:17:54,400
is around automating the acl setup so

00:17:52,960 --> 00:17:57,679
acls are basically

00:17:54,400 --> 00:18:00,080
access control limits um since console

00:17:57,679 --> 00:18:01,440
exists outside of kubernetes it has its

00:18:00,080 --> 00:18:04,960
own authorization

00:18:01,440 --> 00:18:07,520
solution um and

00:18:04,960 --> 00:18:08,480
we basic so basically acls are to

00:18:07,520 --> 00:18:10,960
console

00:18:08,480 --> 00:18:13,120
what uh kubernetes is to our back

00:18:10,960 --> 00:18:17,120
russian actually said that the other way

00:18:13,120 --> 00:18:20,240
so um so yeah so basically um

00:18:17,120 --> 00:18:24,240
yeah acls are to to console as uh

00:18:20,240 --> 00:18:26,799
kubernetes uh is to our back and um

00:18:24,240 --> 00:18:27,760
instead of we had a choice here of um we

00:18:26,799 --> 00:18:30,880
could have let our

00:18:27,760 --> 00:18:32,400
users uh create their own acls and have

00:18:30,880 --> 00:18:33,919
to do that manually

00:18:32,400 --> 00:18:35,600
uh but we wanted to make that piece

00:18:33,919 --> 00:18:38,799
easier for our users and we

00:18:35,600 --> 00:18:40,400
basically have uh set up a bridge uh

00:18:38,799 --> 00:18:43,919
from the k8's r back

00:18:40,400 --> 00:18:47,760
to our console acls and this is all done

00:18:43,919 --> 00:18:49,120
automatically uh so that our users can

00:18:47,760 --> 00:18:51,919
they don't have to manually set up

00:18:49,120 --> 00:18:55,280
anything um for the acls piece

00:18:51,919 --> 00:18:57,120
and it's all done uh just automatically

00:18:55,280 --> 00:18:58,559
so the that's really cool this is

00:18:57,120 --> 00:18:59,039
something i had i didn't know anything

00:18:58,559 --> 00:19:01,600
about

00:18:59,039 --> 00:19:04,640
so the um you actually have an rbac

00:19:01,600 --> 00:19:08,000
bridge so kubernetes native rbac

00:19:04,640 --> 00:19:10,799
calls get translated into console acls

00:19:08,000 --> 00:19:11,200
correct yep oh that's cool uh i i went

00:19:10,799 --> 00:19:14,480
deep

00:19:11,200 --> 00:19:17,760
on the uh gke uh rbac plug-in

00:19:14,480 --> 00:19:18,640
once and was i'm not gonna say horrified

00:19:17,760 --> 00:19:22,000
i'm going to say

00:19:18,640 --> 00:19:24,080
uh impressed by the uh effort that the

00:19:22,000 --> 00:19:24,640
engineers went to i can only imagine how

00:19:24,080 --> 00:19:26,640
much

00:19:24,640 --> 00:19:27,679
that took but since we're talking a lot

00:19:26,640 --> 00:19:30,160
about complexity

00:19:27,679 --> 00:19:31,919
it's so important to have a single store

00:19:30,160 --> 00:19:33,120
especially for something as important as

00:19:31,919 --> 00:19:34,000
our back that's really cool that you

00:19:33,120 --> 00:19:37,600
went to the

00:19:34,000 --> 00:19:39,520
effort for that cool all right i'm going

00:19:37,600 --> 00:19:43,039
to i'm going to do a little bit about

00:19:39,520 --> 00:19:44,720
linker d here um probably one of my

00:19:43,039 --> 00:19:48,400
favorite things about linker d

00:19:44,720 --> 00:19:48,799
is our check command and the reason for

00:19:48,400 --> 00:19:52,720
that

00:19:48,799 --> 00:19:54,960
is that kubernetes clusters even though

00:19:52,720 --> 00:19:56,720
we're talking cloud native and uh cattle

00:19:54,960 --> 00:19:59,280
instead of pets i'm i'm gonna say

00:19:56,720 --> 00:20:01,120
kubernetes clusters are snowflakes

00:19:59,280 --> 00:20:02,880
especially once you start talking across

00:20:01,120 --> 00:20:04,480
organizations uh

00:20:02,880 --> 00:20:07,360
for example we just got done talking

00:20:04,480 --> 00:20:09,679
about the console r back to acl mapping

00:20:07,360 --> 00:20:11,280
who knows how that maps on a cluster

00:20:09,679 --> 00:20:11,760
where somebody's got installs or not and

00:20:11,280 --> 00:20:15,360
so

00:20:11,760 --> 00:20:17,760
um we spend a lot of time if i see

00:20:15,360 --> 00:20:20,240
two users reporting a difficulty setting

00:20:17,760 --> 00:20:23,120
up link or d we go create a check for it

00:20:20,240 --> 00:20:24,799
and so we will go actually do validation

00:20:23,120 --> 00:20:26,720
before you install your cluster to say

00:20:24,799 --> 00:20:28,240
that you've got the right rbac

00:20:26,720 --> 00:20:29,520
to be able to go and create it and then

00:20:28,240 --> 00:20:30,240
we'll do it after you install the

00:20:29,520 --> 00:20:34,240
cluster

00:20:30,240 --> 00:20:36,640
and none of the checks at the moment are

00:20:34,240 --> 00:20:38,559
i'm going to call them integration tests

00:20:36,640 --> 00:20:40,400
eg they just go make sure that the

00:20:38,559 --> 00:20:42,080
readiness is passed liveness is passed

00:20:40,400 --> 00:20:44,559
something like that

00:20:42,080 --> 00:20:46,000
though we did have a summer code student

00:20:44,559 --> 00:20:47,919
work on some

00:20:46,000 --> 00:20:49,280
conformance tests that i'm very very

00:20:47,919 --> 00:20:51,039
excited about to actually

00:20:49,280 --> 00:20:52,559
like test real workloads on link rd once

00:20:51,039 --> 00:20:55,919
you've got the install done

00:20:52,559 --> 00:20:59,120
um but uh i did this

00:20:55,919 --> 00:21:01,039
purely out of laziness because

00:20:59,120 --> 00:21:03,200
i wanted to be able to give docs links

00:21:01,039 --> 00:21:04,799
to folks for how to fix their problems

00:21:03,200 --> 00:21:06,159
once they run into them and having it

00:21:04,799 --> 00:21:08,960
all automated into the

00:21:06,159 --> 00:21:11,200
install flow has been just amazing from

00:21:08,960 --> 00:21:12,960
our perspective

00:21:11,200 --> 00:21:15,520
mitch do you want to talk anything about

00:21:12,960 --> 00:21:16,159
the istio install flow and kind of some

00:21:15,520 --> 00:21:20,400
of the

00:21:16,159 --> 00:21:21,440
cool stuff you've done there yeah um

00:21:20,400 --> 00:21:23,360
you know something that's interesting

00:21:21,440 --> 00:21:24,720
about install we're in a kubernetes

00:21:23,360 --> 00:21:26,000
world and so everything needs to be

00:21:24,720 --> 00:21:29,039
declarative

00:21:26,000 --> 00:21:32,000
uh but what we're learning right is that

00:21:29,039 --> 00:21:32,400
upgrades are not a declarative operation

00:21:32,000 --> 00:21:36,080
no

00:21:32,400 --> 00:21:38,640
um i don't ever want to declare

00:21:36,080 --> 00:21:40,080
the entire state of my mesh in the next

00:21:38,640 --> 00:21:41,120
minor version instead i want to do a

00:21:40,080 --> 00:21:43,679
mutation right

00:21:41,120 --> 00:21:45,679
i want to say i'm on istio1.x i want to

00:21:43,679 --> 00:21:47,200
be on istio one.x plus one

00:21:45,679 --> 00:21:49,120
and that's the only change i want to

00:21:47,200 --> 00:21:50,640
make don't touch all the other knobs and

00:21:49,120 --> 00:21:54,080
bells and whistles

00:21:50,640 --> 00:21:55,679
um and so we we've kind of had to

00:21:54,080 --> 00:21:58,960
take our time and learn some hard

00:21:55,679 --> 00:22:01,440
lessons in terms of when we ought to be

00:21:58,960 --> 00:22:03,039
following declarative semantics and when

00:22:01,440 --> 00:22:05,120
it's better to do a more mutational

00:22:03,039 --> 00:22:06,559
semantic

00:22:05,120 --> 00:22:07,919
one thing that we've done over the last

00:22:06,559 --> 00:22:09,760
year to sort of assist with that it

00:22:07,919 --> 00:22:11,679
doesn't directly address the problem

00:22:09,760 --> 00:22:13,520
but we've introduced analyzers which it

00:22:11,679 --> 00:22:15,760
sounds like are a little bit like checks

00:22:13,520 --> 00:22:17,679
it's a suite of things it's not

00:22:15,760 --> 00:22:18,720
exclusively focused on upgrade or

00:22:17,679 --> 00:22:20,799
install time

00:22:18,720 --> 00:22:23,039
it actually can run during runtime we

00:22:20,799 --> 00:22:24,720
bake them both into the control plane as

00:22:23,039 --> 00:22:26,640
well as into the cli

00:22:24,720 --> 00:22:28,400
you can run analyze and it'll list some

00:22:26,640 --> 00:22:30,640
probable problems or maybe

00:22:28,400 --> 00:22:31,919
definite problems that you have related

00:22:30,640 --> 00:22:34,559
to your configuration

00:22:31,919 --> 00:22:36,080
for me my favorite one i always fat

00:22:34,559 --> 00:22:37,760
finger the gateway name

00:22:36,080 --> 00:22:40,480
when i'm mapping a virtual service to a

00:22:37,760 --> 00:22:42,000
gateway i mean just every time and the

00:22:40,480 --> 00:22:44,480
analyzer catches it

00:22:42,000 --> 00:22:46,159
really well and i'm excited to say that

00:22:44,480 --> 00:22:48,400
now there's even a way that you can

00:22:46,159 --> 00:22:49,919
have the control plane begin writing

00:22:48,400 --> 00:22:52,159
those analysis messages

00:22:49,919 --> 00:22:53,919
out into the status field of the objects

00:22:52,159 --> 00:22:55,840
so if you run a cube cuddle get on an

00:22:53,919 --> 00:22:57,039
object that has a problem with analysis

00:22:55,840 --> 00:22:59,039
you should see it right there in your

00:22:57,039 --> 00:23:01,120
ammo that's cool

00:22:59,039 --> 00:23:02,880
not enough folks use kubernetes events

00:23:01,120 --> 00:23:05,200
uh one of my favorite

00:23:02,880 --> 00:23:06,000
uh projects since we talked about canary

00:23:05,200 --> 00:23:09,120
earlier was

00:23:06,000 --> 00:23:11,840
is a flagger and staphon goes and puts

00:23:09,120 --> 00:23:14,080
events in for all of the canary progress

00:23:11,840 --> 00:23:17,120
and you see it on the actual resources

00:23:14,080 --> 00:23:18,159
it's so use useful analyzers are super

00:23:17,120 --> 00:23:19,919
cool

00:23:18,159 --> 00:23:21,840
we've actually had a bunch of users just

00:23:19,919 --> 00:23:24,799
take our check command and stick that

00:23:21,840 --> 00:23:26,799
into their uh alerting workflow which

00:23:24,799 --> 00:23:28,640
drives me crazy because we built check

00:23:26,799 --> 00:23:30,799
as a like user interface

00:23:28,640 --> 00:23:32,320
but man it's cool that folks are doing

00:23:30,799 --> 00:23:34,720
it that way uh

00:23:32,320 --> 00:23:36,640
that's that's really cool here we go so

00:23:34,720 --> 00:23:37,679
uh sabine uh we had been chatting a

00:23:36,640 --> 00:23:39,360
little bit beforehand

00:23:37,679 --> 00:23:41,039
and uh one of the things you said

00:23:39,360 --> 00:23:42,880
mentioned was the

00:23:41,039 --> 00:23:45,120
approach that console had around

00:23:42,880 --> 00:23:45,760
federation it's an interesting feature

00:23:45,120 --> 00:23:48,720
set that

00:23:45,760 --> 00:23:50,080
uh at least we don't have in the linker

00:23:48,720 --> 00:23:53,120
d world i'm super interested

00:23:50,080 --> 00:23:56,240
to hear more about that yeah

00:23:53,120 --> 00:23:58,559
for sure um so

00:23:56,240 --> 00:23:59,440
so yeah so one of the things that

00:23:58,559 --> 00:24:02,720
console does

00:23:59,440 --> 00:24:05,840
or what we have done is to try and ease

00:24:02,720 --> 00:24:07,360
the process of federating two data

00:24:05,840 --> 00:24:10,880
centers or however many

00:24:07,360 --> 00:24:12,880
data centers you have um so just for the

00:24:10,880 --> 00:24:14,640
folks who don't know federation is just

00:24:12,880 --> 00:24:16,400
data centers being able to communicate

00:24:14,640 --> 00:24:19,120
with each other

00:24:16,400 --> 00:24:19,440
and and this is setting that process up

00:24:19,120 --> 00:24:22,960
or

00:24:19,440 --> 00:24:24,960
setting up um federated users is hard

00:24:22,960 --> 00:24:26,000
uh there's a lot of config data that's

00:24:24,960 --> 00:24:29,200
required

00:24:26,000 --> 00:24:30,799
um and so we have uh

00:24:29,200 --> 00:24:32,720
tried and we have simplified this

00:24:30,799 --> 00:24:33,840
process by giving our operators the

00:24:32,720 --> 00:24:36,559
ability

00:24:33,840 --> 00:24:37,279
to get a single secret uh from their

00:24:36,559 --> 00:24:40,080
primary

00:24:37,279 --> 00:24:42,400
uh data center and then they can take

00:24:40,080 --> 00:24:44,880
that secret and do a cube cuddle apply

00:24:42,400 --> 00:24:46,720
in their secondary data center and then

00:24:44,880 --> 00:24:49,919
helm install and they're good to go

00:24:46,720 --> 00:24:50,240
and those uh data centers are federated

00:24:49,919 --> 00:24:52,080
and

00:24:50,240 --> 00:24:53,440
uh up and running and communicating with

00:24:52,080 --> 00:24:56,799
each other

00:24:53,440 --> 00:24:57,679
oh that's cool like uh i'm going to poke

00:24:56,799 --> 00:24:59,600
fun at istio

00:24:57,679 --> 00:25:01,760
i tried to do an early version of the

00:24:59,600 --> 00:25:03,840
istio multi-cluster and

00:25:01,760 --> 00:25:05,679
uh i'm not no i'm just going to say i

00:25:03,840 --> 00:25:07,600
failed man i could not get that sucker

00:25:05,679 --> 00:25:10,799
set up

00:25:07,600 --> 00:25:12,720
you didn't fail we failed uh

00:25:10,799 --> 00:25:14,000
i want to say like this is a pivot that

00:25:12,720 --> 00:25:16,799
we have to make as a project

00:25:14,000 --> 00:25:18,240
we take responsibility for outcomes we

00:25:16,799 --> 00:25:19,919
don't just deliver really cool

00:25:18,240 --> 00:25:21,840
technology that this one time we got

00:25:19,919 --> 00:25:25,200
running inside of a cluster somewhere

00:25:21,840 --> 00:25:26,559
if our users can't do it it's not done

00:25:25,200 --> 00:25:28,720
and that's something we've been focusing

00:25:26,559 --> 00:25:30,320
on actually with in relation to

00:25:28,720 --> 00:25:31,279
multi-cluster in particular with the one

00:25:30,320 --> 00:25:33,840
eight release

00:25:31,279 --> 00:25:35,760
we are finally and it's not out the door

00:25:33,840 --> 00:25:37,200
yet so i'm not

00:25:35,760 --> 00:25:38,880
this could always change but we're like

00:25:37,200 --> 00:25:40,880
a week short of the finish line

00:25:38,880 --> 00:25:42,000
and we are finally calling multi-cluster

00:25:40,880 --> 00:25:43,679
beta meaning

00:25:42,000 --> 00:25:45,440
we finally have the degree of support

00:25:43,679 --> 00:25:46,880
that where we can say

00:25:45,440 --> 00:25:48,400
this is going to stick around and this

00:25:46,880 --> 00:25:49,679
is the shape that it's going to be in

00:25:48,400 --> 00:25:51,279
for some time

00:25:49,679 --> 00:25:53,120
we have a bit of a feature maturity

00:25:51,279 --> 00:25:54,880
problem in that we have a bunch of

00:25:53,120 --> 00:25:56,720
developers who love shipping new

00:25:54,880 --> 00:25:57,760
features and they're so cool and shiny

00:25:56,720 --> 00:25:59,520
and they're alpha

00:25:57,760 --> 00:26:01,600
and we don't have a lot of developers

00:25:59,520 --> 00:26:04,000
historically who have focused on doing

00:26:01,600 --> 00:26:05,679
the very hard productionization work

00:26:04,000 --> 00:26:07,679
of promoting that feature through to

00:26:05,679 --> 00:26:09,200
beta and then to generally available

00:26:07,679 --> 00:26:11,120
so i think that's going to be a new

00:26:09,200 --> 00:26:12,559
focus and theme of the istio project

00:26:11,120 --> 00:26:15,120
over the coming year

00:26:12,559 --> 00:26:16,400
oh that's like the it's seriously the

00:26:15,120 --> 00:26:18,559
unsung heroes too

00:26:16,400 --> 00:26:20,080
the person who ships this feature first

00:26:18,559 --> 00:26:23,679
is always the one who gets the

00:26:20,080 --> 00:26:24,000
like uh kudos and then that that poor

00:26:23,679 --> 00:26:27,440
person

00:26:24,000 --> 00:26:28,880
who goes and spends years polishing off

00:26:27,440 --> 00:26:31,679
and making it more stable just

00:26:28,880 --> 00:26:33,760
uh we in linker d we actually have a

00:26:31,679 --> 00:26:36,000
program that we call linkery heroes

00:26:33,760 --> 00:26:37,600
where that's kind of the opportunity i

00:26:36,000 --> 00:26:40,799
love it because i get to call out

00:26:37,600 --> 00:26:42,960
we've got one developer who is like ci

00:26:40,799 --> 00:26:44,000
machine and he keeps ci running and

00:26:42,960 --> 00:26:45,360
again like

00:26:44,000 --> 00:26:47,360
it's not something you see in the change

00:26:45,360 --> 00:26:49,520
log but it's the only way that we ship

00:26:47,360 --> 00:26:51,520
software it's that's really cool

00:26:49,520 --> 00:26:54,080
to go back to sabine's point about

00:26:51,520 --> 00:26:56,880
federation and the multi-cluster stuff

00:26:54,080 --> 00:26:58,400
it's tough like in linker d for

00:26:56,880 --> 00:27:00,320
multi-cluster we have you pull

00:26:58,400 --> 00:27:02,799
a secret from one cluster and push it on

00:27:00,320 --> 00:27:06,799
to another and that's cool

00:27:02,799 --> 00:27:08,640
except that it requires kubectl context

00:27:06,799 --> 00:27:11,200
games and this that and the other thing

00:27:08,640 --> 00:27:13,520
and like i wrote the

00:27:11,200 --> 00:27:16,000
tutorial for a multi-cluster and it's

00:27:13,520 --> 00:27:17,279
basically crazy bash for loop scripts

00:27:16,000 --> 00:27:19,200
and there was nothing i could do about

00:27:17,279 --> 00:27:21,440
it it was that or

00:27:19,200 --> 00:27:22,880
20 paragraphs to explain how it all fit

00:27:21,440 --> 00:27:24,399
together i'm

00:27:22,880 --> 00:27:26,080
super excited about all the work that

00:27:24,399 --> 00:27:29,600
sigmulti cluster has been doing to kind

00:27:26,080 --> 00:27:31,360
of make our lives a little bit better

00:27:29,600 --> 00:27:33,440
i think that's another example of a case

00:27:31,360 --> 00:27:34,720
where it's hard to optimize for both the

00:27:33,440 --> 00:27:36,320
demo use case

00:27:34,720 --> 00:27:38,000
as well as the production like

00:27:36,320 --> 00:27:39,279
enterprise grade software use case

00:27:38,000 --> 00:27:40,960
because in an enterprise

00:27:39,279 --> 00:27:42,320
they have secret management systems that

00:27:40,960 --> 00:27:44,960
are already in place

00:27:42,320 --> 00:27:47,360
they already have probably a managed

00:27:44,960 --> 00:27:49,279
certificate somewhere in some

00:27:47,360 --> 00:27:50,399
system whether they're doing it you know

00:27:49,279 --> 00:27:51,600
there's a hundred different ways to

00:27:50,399 --> 00:27:54,000
accomplish that

00:27:51,600 --> 00:27:56,080
uh but they the last thing they want is

00:27:54,000 --> 00:27:57,440
my bash script generating a self-signed

00:27:56,080 --> 00:27:58,240
cert and then pushing it to production

00:27:57,440 --> 00:28:00,559
for them

00:27:58,240 --> 00:28:01,679
but in a demo use case that's absolutely

00:28:00,559 --> 00:28:03,360
what you should do

00:28:01,679 --> 00:28:05,600
it's the right thing if you want to show

00:28:03,360 --> 00:28:06,799
off a shiny multi-cluster demo in 15

00:28:05,600 --> 00:28:08,720
minutes or less

00:28:06,799 --> 00:28:10,799
uh the way that you get it done is by

00:28:08,720 --> 00:28:12,720
not productionizing your service mesh

00:28:10,799 --> 00:28:15,200
it's a difficult problem

00:28:12,720 --> 00:28:16,000
the uh we've definitely run into this uh

00:28:15,200 --> 00:28:18,640
in linker d

00:28:16,000 --> 00:28:20,320
we ship with a jager install out of the

00:28:18,640 --> 00:28:23,440
box

00:28:20,320 --> 00:28:25,760
jaeger installs are

00:28:23,440 --> 00:28:26,799
insanely complex to productionize not

00:28:25,760 --> 00:28:29,200
because jaeger's

00:28:26,799 --> 00:28:31,279
a complex product inherently but you've

00:28:29,200 --> 00:28:35,039
got storage as part of it and so

00:28:31,279 --> 00:28:37,679
our helm chart is uh forcibly

00:28:35,039 --> 00:28:39,360
minimalized to the point where it feels

00:28:37,679 --> 00:28:41,279
awkward if you try and put it into

00:28:39,360 --> 00:28:43,039
production because you're you should go

00:28:41,279 --> 00:28:44,080
and use the jaeger operator if you want

00:28:43,039 --> 00:28:47,120
to get that into production

00:28:44,080 --> 00:28:48,399
for sure um mitch is there anything you

00:28:47,120 --> 00:28:52,240
else you want to kind of say

00:28:48,399 --> 00:28:54,799
around uh the kind of cluster operation

00:28:52,240 --> 00:28:54,799
side of things

00:28:54,960 --> 00:28:58,320
no i think we've covered everything

00:28:56,880 --> 00:28:59,840
before we get into this next section i

00:28:58,320 --> 00:29:00,960
want to uh tell a little bit of an

00:28:59,840 --> 00:29:03,679
anecdote which may

00:29:00,960 --> 00:29:06,320
uh stick my age as being an old person

00:29:03,679 --> 00:29:08,880
but i'm going to say it anyways

00:29:06,320 --> 00:29:10,000
back in the day whenever something goes

00:29:08,880 --> 00:29:12,320
wrong

00:29:10,000 --> 00:29:13,440
really there's only one reason it went

00:29:12,320 --> 00:29:15,679
wrong it's dns

00:29:13,440 --> 00:29:17,440
it's always dns's fault 100 of the time

00:29:15,679 --> 00:29:19,840
it's always dns's fault

00:29:17,440 --> 00:29:20,960
and uh one of the really interesting

00:29:19,840 --> 00:29:21,840
things that we've seen at least on the

00:29:20,960 --> 00:29:23,919
linker d side

00:29:21,840 --> 00:29:26,480
is that now that you've introduced a

00:29:23,919 --> 00:29:28,880
data plane with a service mesh

00:29:26,480 --> 00:29:30,320
it's not actually dns's fault okay it is

00:29:28,880 --> 00:29:32,480
50 of the time

00:29:30,320 --> 00:29:34,880
but the service mesh gets blamed 100 of

00:29:32,480 --> 00:29:38,320
the time and so

00:29:34,880 --> 00:29:39,200
at least for us we've really needed to

00:29:38,320 --> 00:29:41,120
design for

00:29:39,200 --> 00:29:43,039
failure and think about what that means

00:29:41,120 --> 00:29:44,559
not just for the control plane and

00:29:43,039 --> 00:29:45,919
operating the service mesh but what it

00:29:44,559 --> 00:29:47,760
means for the

00:29:45,919 --> 00:29:49,039
developers the user of the service mesh

00:29:47,760 --> 00:29:50,480
as well

00:29:49,039 --> 00:29:52,720
mitch i'm sure that you've got some

00:29:50,480 --> 00:29:55,039
interesting insight from the istio side

00:29:52,720 --> 00:29:56,080
to share along those lines uh tell us a

00:29:55,039 --> 00:29:57,679
little bit

00:29:56,080 --> 00:29:59,840
yeah that that makes me think of kind of

00:29:57,679 --> 00:30:01,440
two stories within the project

00:29:59,840 --> 00:30:03,120
you know historically i've only been on

00:30:01,440 --> 00:30:04,240
the istio project for two years now and

00:30:03,120 --> 00:30:06,559
before that

00:30:04,240 --> 00:30:09,120
i owned the api on a large

00:30:06,559 --> 00:30:12,240
enterprise-grade network appliance

00:30:09,120 --> 00:30:13,760
uh and we became the catch-all for

00:30:12,240 --> 00:30:14,640
everything that went wrong with that

00:30:13,760 --> 00:30:16,559
network appli

00:30:14,640 --> 00:30:18,480
appliance it's like well it went wrong

00:30:16,559 --> 00:30:20,159
after i told the api to do it

00:30:18,480 --> 00:30:23,360
and therefore it's definitely the api's

00:30:20,159 --> 00:30:24,720
fault uh and it took a while to really

00:30:23,360 --> 00:30:26,640
embrace that role

00:30:24,720 --> 00:30:29,200
but i think what we learned is that that

00:30:26,640 --> 00:30:31,120
can be done really really well

00:30:29,200 --> 00:30:33,919
and what it does is it forces you to

00:30:31,120 --> 00:30:35,520
show to demonstrate conclusively

00:30:33,919 --> 00:30:37,679
that your layer is doing they're

00:30:35,520 --> 00:30:39,919
behaving exactly as expected

00:30:37,679 --> 00:30:42,000
uh and it raises the bar of quality to

00:30:39,919 --> 00:30:44,320
such a high degree that eventually

00:30:42,000 --> 00:30:45,600
your users stop making that assumption

00:30:44,320 --> 00:30:47,360
and so i think it's just a matter of

00:30:45,600 --> 00:30:49,039
maturity in service mesh it's something

00:30:47,360 --> 00:30:50,480
that we're pursuing in istio i don't

00:30:49,039 --> 00:30:53,520
think that we're there yet

00:30:50,480 --> 00:30:55,360
one of the ways that we're doing that

00:30:53,520 --> 00:30:57,120
is historically you know service meshes

00:30:55,360 --> 00:30:59,760
are distributed systems

00:30:57,120 --> 00:31:01,600
but we sort of pretend they aren't like

00:30:59,760 --> 00:31:03,600
oh i changed the config

00:31:01,600 --> 00:31:05,519
therefore my entire service mesh now has

00:31:03,600 --> 00:31:07,440
change config well no

00:31:05,519 --> 00:31:08,880
you change the config in istio's case

00:31:07,440 --> 00:31:10,480
that means it's in kubernetes and then

00:31:08,880 --> 00:31:11,120
it has to propagate into the control

00:31:10,480 --> 00:31:12,720
plane

00:31:11,120 --> 00:31:14,480
then the control blade axle propagated

00:31:12,720 --> 00:31:15,279
out to every data plane which might be

00:31:14,480 --> 00:31:16,840
in this cluster

00:31:15,279 --> 00:31:19,760
might be in another cluster a different

00:31:16,840 --> 00:31:21,519
region so we're raising the visibility

00:31:19,760 --> 00:31:23,760
of propagation of changes

00:31:21,519 --> 00:31:26,240
throughout the service mesh so that our

00:31:23,760 --> 00:31:27,120
users can very easily and very visibly

00:31:26,240 --> 00:31:29,200
tell

00:31:27,120 --> 00:31:31,120
yes this component is behaving as

00:31:29,200 --> 00:31:32,159
expected i can move on and start

00:31:31,120 --> 00:31:34,000
troubleshooting other

00:31:32,159 --> 00:31:35,600
sections of the application we don't

00:31:34,000 --> 00:31:37,120
want them spending a lot of brain cycles

00:31:35,600 --> 00:31:39,440
on that

00:31:37,120 --> 00:31:40,880
yeah we've uh we have a little bit of a

00:31:39,440 --> 00:31:42,159
command that will do that that'll

00:31:40,880 --> 00:31:43,120
actually reach out to the linker d

00:31:42,159 --> 00:31:45,200
proxies and

00:31:43,120 --> 00:31:46,640
dump their service discovery state for

00:31:45,200 --> 00:31:49,039
exactly that reason

00:31:46,640 --> 00:31:50,720
and you're giving me flashbacks to my uh

00:31:49,039 --> 00:31:52,480
istio multi-cluster

00:31:50,720 --> 00:31:54,080
experiment where i had to go figure out

00:31:52,480 --> 00:31:56,080
the how to dump

00:31:54,080 --> 00:31:57,919
service discovery information from envoy

00:31:56,080 --> 00:31:59,120
for sure um

00:31:57,919 --> 00:32:00,880
it's super interesting that you went

00:31:59,120 --> 00:32:02,240
that direction because that like

00:32:00,880 --> 00:32:05,360
defensive

00:32:02,240 --> 00:32:07,440
this is healthy is a big reason why

00:32:05,360 --> 00:32:08,799
we put check in as a command it's that

00:32:07,440 --> 00:32:11,279
defensive like

00:32:08,799 --> 00:32:12,799
these are all working things if you have

00:32:11,279 --> 00:32:15,919
something not working it might

00:32:12,799 --> 00:32:17,519
actually be a bug in us

00:32:15,919 --> 00:32:19,519
because let's just be honest we have

00:32:17,519 --> 00:32:20,720
bugs or it's something that you need to

00:32:19,519 --> 00:32:23,600
go look at in your own

00:32:20,720 --> 00:32:26,480
setup um sabine tell us a little bit

00:32:23,600 --> 00:32:29,840
about how console kind of goes about the

00:32:26,480 --> 00:32:29,840
debugging side of things

00:32:30,080 --> 00:32:36,240
yeah so um in that

00:32:33,279 --> 00:32:36,799
from that aspect what we try and do is

00:32:36,240 --> 00:32:39,679
that

00:32:36,799 --> 00:32:40,640
um you know when something is failing um

00:32:39,679 --> 00:32:44,000
we

00:32:40,640 --> 00:32:47,600
went the route of having it be

00:32:44,000 --> 00:32:50,640
seen in our um console ui so

00:32:47,600 --> 00:32:53,679
um automatically added checks

00:32:50,640 --> 00:32:54,240
uh to each of our components and so when

00:32:53,679 --> 00:32:56,960
something

00:32:54,240 --> 00:32:57,679
fails you'll see it as red in the ui uh

00:32:56,960 --> 00:33:00,240
and so

00:32:57,679 --> 00:33:01,120
that i feel like that really helps our

00:33:00,240 --> 00:33:03,919
users

00:33:01,120 --> 00:33:05,039
just uh automatically know okay this

00:33:03,919 --> 00:33:06,720
piece is failing

00:33:05,039 --> 00:33:08,720
all right i see it uh it's spelling

00:33:06,720 --> 00:33:12,080
there's something that i need to do

00:33:08,720 --> 00:33:12,960
so have you hooked up uh like proactive

00:33:12,080 --> 00:33:15,519
alerts from that

00:33:12,960 --> 00:33:16,559
uh this is a thing that i've wanted as a

00:33:15,519 --> 00:33:18,240
feature for

00:33:16,559 --> 00:33:19,840
linker d forever and we just haven't had

00:33:18,240 --> 00:33:20,720
the bandwidth and the cycles to put it

00:33:19,840 --> 00:33:22,080
in yet but is it

00:33:20,720 --> 00:33:23,679
is it not just health checks but you'll

00:33:22,080 --> 00:33:25,760
actually can get like an email then as

00:33:23,679 --> 00:33:29,120
well

00:33:25,760 --> 00:33:31,440
right now there's not an email uh uh

00:33:29,120 --> 00:33:33,760
feature but uh i believe it is something

00:33:31,440 --> 00:33:36,720
that will probably come

00:33:33,760 --> 00:33:37,840
in our next questions i'm sure like i

00:33:36,720 --> 00:33:39,360
said it's definitely something that i've

00:33:37,840 --> 00:33:42,159
wanted to do for a long time now

00:33:39,360 --> 00:33:42,720
uh the the debugging the mesh is is

00:33:42,159 --> 00:33:44,320
perhaps

00:33:42,720 --> 00:33:46,960
one of the subjects i'm most passionate

00:33:44,320 --> 00:33:50,480
about uh in linker d we've kind of

00:33:46,960 --> 00:33:52,240
had to uh throw the uh

00:33:50,480 --> 00:33:53,679
kitchen sink at it for lack of a better

00:33:52,240 --> 00:33:54,480
term and kind of attack it from a

00:33:53,679 --> 00:33:56,480
multi-level

00:33:54,480 --> 00:33:59,120
multi-level solution and that we've got

00:33:56,480 --> 00:33:59,840
a one command called tap that actually

00:33:59,120 --> 00:34:02,159
lets you do

00:33:59,840 --> 00:34:03,760
for lack of a better term uh wireshark

00:34:02,159 --> 00:34:05,279
on your entire

00:34:03,760 --> 00:34:07,279
cluster so you can go and tap and see

00:34:05,279 --> 00:34:08,639
the live requests and

00:34:07,279 --> 00:34:10,399
that's pretty helpful but it's only

00:34:08,639 --> 00:34:13,040
really helpful to show when

00:34:10,399 --> 00:34:14,800
someone's app is misbehaving if the mesh

00:34:13,040 --> 00:34:16,480
is actually misbehaving you run into

00:34:14,800 --> 00:34:21,359
quite a bit of issues and so

00:34:16,480 --> 00:34:24,720
um the next level down there is the uh

00:34:21,359 --> 00:34:26,800
we've got a debug sidecar and the

00:34:24,720 --> 00:34:28,000
ephemeral container features in

00:34:26,800 --> 00:34:29,760
kubernetes but

00:34:28,000 --> 00:34:31,760
i think they landed in 116 and they

00:34:29,760 --> 00:34:34,079
might be beta and 119 but

00:34:31,760 --> 00:34:34,960
no one quote me on that uh allows you to

00:34:34,079 --> 00:34:36,480
go and add in

00:34:34,960 --> 00:34:38,159
a side card that comes with all the

00:34:36,480 --> 00:34:40,000
tools to debug it so we have

00:34:38,159 --> 00:34:41,359
uh t-shark and we've got all of that

00:34:40,000 --> 00:34:43,520
like user

00:34:41,359 --> 00:34:45,040
uh lan tooling that you can go use to

00:34:43,520 --> 00:34:48,720
figure out the details then

00:34:45,040 --> 00:34:50,639
um and it's just containers i think yeah

00:34:48,720 --> 00:34:52,960
and it's like uh it's the onion right

00:34:50,639 --> 00:34:54,720
like as soon as you start to get into

00:34:52,960 --> 00:34:55,919
the debugging side of things you start

00:34:54,720 --> 00:34:57,760
out at that like

00:34:55,919 --> 00:34:59,119
high level we know something's wrong

00:34:57,760 --> 00:35:00,480
there's an alert and then you kind of

00:34:59,119 --> 00:35:02,720
have to pull the like

00:35:00,480 --> 00:35:04,400
layers of the onion back until you get

00:35:02,720 --> 00:35:08,160
down to the core problem like

00:35:04,400 --> 00:35:09,280
uh i i remember running into an issue on

00:35:08,160 --> 00:35:11,119
gke

00:35:09,280 --> 00:35:12,880
where they had shipped with a kernel

00:35:11,119 --> 00:35:16,560
that deadlocked when you used the

00:35:12,880 --> 00:35:19,280
esso original desk socket option

00:35:16,560 --> 00:35:20,079
and i'm picking on gke it was just a you

00:35:19,280 --> 00:35:22,079
know

00:35:20,079 --> 00:35:23,839
a problem anybody could run into but man

00:35:22,079 --> 00:35:24,960
talk about peeling the layers back when

00:35:23,839 --> 00:35:27,520
your node

00:35:24,960 --> 00:35:28,880
deadlocks because you go and install

00:35:27,520 --> 00:35:32,240
linker d it was a

00:35:28,880 --> 00:35:34,160
unique experience i tell you what um

00:35:32,240 --> 00:35:35,760
mitch do you have anything around like

00:35:34,160 --> 00:35:38,480
kind of peeling the layers back

00:35:35,760 --> 00:35:39,119
on the istio side of things and digging

00:35:38,480 --> 00:35:42,720
in deeper

00:35:39,119 --> 00:35:44,880
on the debugging well i'll give a guilty

00:35:42,720 --> 00:35:46,079
confession and that is that i am a huge

00:35:44,880 --> 00:35:48,960
fan of tap

00:35:46,079 --> 00:35:50,640
uh oh awesome that was that was a really

00:35:48,960 --> 00:35:52,079
cool tool to see i love the way that you

00:35:50,640 --> 00:35:54,720
guys have pulled that off

00:35:52,079 --> 00:35:56,480
um i think one of the things that we

00:35:54,720 --> 00:35:57,920
like to see in istio we talked about a

00:35:56,480 --> 00:35:59,520
little bit what we don't develop and

00:35:57,920 --> 00:36:00,880
what we intentionally don't

00:35:59,520 --> 00:36:03,200
we've seen a great development in the

00:36:00,880 --> 00:36:05,119
ecosystem of a couple of different tools

00:36:03,200 --> 00:36:07,680
for debugging your application

00:36:05,119 --> 00:36:09,280
using a service mesh now that the the

00:36:07,680 --> 00:36:10,800
network is completely managed that

00:36:09,280 --> 00:36:12,079
actually gives you some really cool

00:36:10,800 --> 00:36:13,680
super powers

00:36:12,079 --> 00:36:15,280
if you can assume the network is working

00:36:13,680 --> 00:36:15,760
properly if you can go through that you

00:36:15,280 --> 00:36:17,920
know

00:36:15,760 --> 00:36:19,520
distribution status checks and analyzer

00:36:17,920 --> 00:36:21,760
checks and everything else to say

00:36:19,520 --> 00:36:22,960
my service mesh is working well now you

00:36:21,760 --> 00:36:23,599
can actually do get into your

00:36:22,960 --> 00:36:25,520
application

00:36:23,599 --> 00:36:26,800
in really interesting ways the the one

00:36:25,520 --> 00:36:27,680
that i've played with the most has been

00:36:26,800 --> 00:36:31,119
squash

00:36:27,680 --> 00:36:32,800
from the team at solo and

00:36:31,119 --> 00:36:34,800
other than ephemeral containers which

00:36:32,800 --> 00:36:37,040
push your debug tools onto the

00:36:34,800 --> 00:36:39,599
kubernetes node

00:36:37,040 --> 00:36:40,160
this allows you to run a microservice

00:36:39,599 --> 00:36:42,640
locally

00:36:40,160 --> 00:36:44,000
on your desktop and have it connected

00:36:42,640 --> 00:36:46,240
using istio

00:36:44,000 --> 00:36:47,760
into your your service mesh so it's

00:36:46,240 --> 00:36:49,119
participating in the mesh as though it

00:36:47,760 --> 00:36:50,480
were running in kubernetes

00:36:49,119 --> 00:36:52,480
but you can actually still have it

00:36:50,480 --> 00:36:54,800
plugged into your ide stepping through

00:36:52,480 --> 00:36:56,960
line by line with local debugging

00:36:54,800 --> 00:36:59,040
which is just it's a superpower that

00:36:56,960 --> 00:37:01,599
i've wanted for years

00:36:59,040 --> 00:37:03,200
uh it's like it's the thing the ugly

00:37:01,599 --> 00:37:04,880
little secret that no one talks about

00:37:03,200 --> 00:37:06,960
when you start doing this cloud native

00:37:04,880 --> 00:37:09,760
thing is that if you're on a cluster

00:37:06,960 --> 00:37:12,079
how do you do remote development and

00:37:09,760 --> 00:37:15,040
okay the java folks have had it forever

00:37:12,079 --> 00:37:15,440
uh those of us back in the stone ages of

00:37:15,040 --> 00:37:18,560
uh

00:37:15,440 --> 00:37:20,000
go and uh languages like that are

00:37:18,560 --> 00:37:22,079
quickly coming up to speed but it's

00:37:20,000 --> 00:37:25,920
definitely that like i

00:37:22,079 --> 00:37:28,079
uh i have a superpower it's called print

00:37:25,920 --> 00:37:29,760
and that's how i do all my debugging and

00:37:28,079 --> 00:37:31,520
i know that i should come into the world

00:37:29,760 --> 00:37:33,440
of ides and real debuggers but i've

00:37:31,520 --> 00:37:35,040
never been able to get there

00:37:33,440 --> 00:37:37,200
well you should check out squash i think

00:37:35,040 --> 00:37:39,040
it actually uh it can run on top of

00:37:37,200 --> 00:37:40,400
link or d as well i think i'd have to

00:37:39,040 --> 00:37:41,839
look through the docs

00:37:40,400 --> 00:37:43,680
i'll i'll definitely have to go check it

00:37:41,839 --> 00:37:45,599
out that's a that's a new one for me

00:37:43,680 --> 00:37:47,359
uh when you mentioned it the tool that

00:37:45,599 --> 00:37:49,920
came to my mind at first was uh

00:37:47,359 --> 00:37:51,200
k-sniff which is a coupe ctl plug-in

00:37:49,920 --> 00:37:52,880
that will go and set up

00:37:51,200 --> 00:37:54,320
tcp dumps for you which is really cool

00:37:52,880 --> 00:37:56,880
as well

00:37:54,320 --> 00:37:57,359
um sabine do you have anything else in

00:37:56,880 --> 00:38:00,720
the

00:37:57,359 --> 00:38:02,800
console land to share with us about uh

00:38:00,720 --> 00:38:04,480
keeping the mesh up and debugging what's

00:38:02,800 --> 00:38:08,800
going wrong

00:38:04,480 --> 00:38:10,839
yeah so um this is more on

00:38:08,800 --> 00:38:12,320
if there's kind of a more of a

00:38:10,839 --> 00:38:15,520
catastrophic

00:38:12,320 --> 00:38:18,720
uh failure or like a larger yeah

00:38:15,520 --> 00:38:22,000
of course not so

00:38:18,720 --> 00:38:23,920
on that side um just if there's

00:38:22,000 --> 00:38:25,599
so you know console is an interconnected

00:38:23,920 --> 00:38:28,400
system uh something can

00:38:25,599 --> 00:38:29,920
always break uh and that can cause

00:38:28,400 --> 00:38:31,200
different components to

00:38:29,920 --> 00:38:34,079
not be able to communicate with one

00:38:31,200 --> 00:38:35,359
another and so at that juncture we kind

00:38:34,079 --> 00:38:39,440
of had we have a choice

00:38:35,359 --> 00:38:40,160
of um if that if that goes down do we

00:38:39,440 --> 00:38:42,960
want everything

00:38:40,160 --> 00:38:44,320
stop working uh and so we definitely did

00:38:42,960 --> 00:38:47,760
not want that to happen

00:38:44,320 --> 00:38:48,720
and so we fail static and so basically

00:38:47,760 --> 00:38:52,160
that means that

00:38:48,720 --> 00:38:54,400
um at the time of failure

00:38:52,160 --> 00:38:56,320
communication will still occur but the

00:38:54,400 --> 00:38:58,640
configuration that

00:38:56,320 --> 00:39:00,320
that was set at the time of failure that

00:38:58,640 --> 00:39:02,079
will continue to stay

00:39:00,320 --> 00:39:04,079
but everything all traffic will continue

00:39:02,079 --> 00:39:06,000
to be routed um

00:39:04,079 --> 00:39:07,839
and so this basically allows like the

00:39:06,000 --> 00:39:08,720
operator to figure out okay what's going

00:39:07,839 --> 00:39:10,480
wrong

00:39:08,720 --> 00:39:12,079
but still everything is still up and

00:39:10,480 --> 00:39:14,079
running um you know

00:39:12,079 --> 00:39:15,200
in the sense that traffic is still being

00:39:14,079 --> 00:39:18,720
um you know

00:39:15,200 --> 00:39:22,000
uh communicated but um uh but

00:39:18,720 --> 00:39:23,440
but it hasn't all failed and uh you know

00:39:22,000 --> 00:39:25,760
they can still figure out what's wrong

00:39:23,440 --> 00:39:27,839
and it gives them that time

00:39:25,760 --> 00:39:29,839
that's such an important part of

00:39:27,839 --> 00:39:32,320
designing for failure especially

00:39:29,839 --> 00:39:33,520
with a data plane you're in the way of

00:39:32,320 --> 00:39:35,839
all of the traffic

00:39:33,520 --> 00:39:37,839
and if your control plane you know

00:39:35,839 --> 00:39:41,920
starts to make bad decisions

00:39:37,839 --> 00:39:42,800
you've got to go and do something uh

00:39:41,920 --> 00:39:44,400
it's a really

00:39:42,800 --> 00:39:46,880
especially interesting in my opinion

00:39:44,400 --> 00:39:47,200
once you start uh figuring policy into

00:39:46,880 --> 00:39:50,880
it

00:39:47,200 --> 00:39:52,560
uh with linkardi um we kind of fail open

00:39:50,880 --> 00:39:54,000
basically to make sure that the requests

00:39:52,560 --> 00:39:55,920
go no matter what

00:39:54,000 --> 00:39:57,440
but uh you know again once you've got

00:39:55,920 --> 00:40:00,000
that policy in there

00:39:57,440 --> 00:40:01,839
how do you know what connections are

00:40:00,000 --> 00:40:05,760
valid and not and how do you start

00:40:01,839 --> 00:40:07,520
uh putting all those pieces together um

00:40:05,760 --> 00:40:09,040
i i guess we've mostly talked about

00:40:07,520 --> 00:40:10,720
debugging so far uh

00:40:09,040 --> 00:40:12,640
since thank you sabine for getting us on

00:40:10,720 --> 00:40:14,640
to that like designing for failure

00:40:12,640 --> 00:40:15,920
uh mitch do you have any like cool

00:40:14,640 --> 00:40:19,040
stories to tell us about

00:40:15,920 --> 00:40:19,839
the like trade-offs or interesting

00:40:19,040 --> 00:40:22,640
pieces that

00:40:19,839 --> 00:40:23,760
istio's put in to like protect itself

00:40:22,640 --> 00:40:26,880
from

00:40:23,760 --> 00:40:26,880
more global failures

00:40:27,680 --> 00:40:31,440
well i will say that we have had to

00:40:29,280 --> 00:40:33,119
rethink what it what an outage is and

00:40:31,440 --> 00:40:35,280
what a failure is

00:40:33,119 --> 00:40:38,000
because we we share the same failure

00:40:35,280 --> 00:40:39,839
model that sabine just talked about

00:40:38,000 --> 00:40:41,440
which is fairly common a split between

00:40:39,839 --> 00:40:43,119
data plan and control planes

00:40:41,440 --> 00:40:44,640
your data plane should survive when your

00:40:43,119 --> 00:40:47,440
control plane is dead

00:40:44,640 --> 00:40:49,359
and so initially that was considered to

00:40:47,440 --> 00:40:51,119
be a non-outage your control plane is

00:40:49,359 --> 00:40:52,000
down but your application traffic is

00:40:51,119 --> 00:40:54,319
still flowing so

00:40:52,000 --> 00:40:55,280
everything should be healthy but when

00:40:54,319 --> 00:40:57,119
you're really talking about a

00:40:55,280 --> 00:40:58,720
microservices world where new endpoints

00:40:57,119 --> 00:41:00,160
are being added to services all the time

00:40:58,720 --> 00:41:02,560
where endpoints are being marked

00:41:00,160 --> 00:41:04,000
as unhealthy relatively frequently and

00:41:02,560 --> 00:41:05,359
sometimes that's done by the control

00:41:04,000 --> 00:41:06,560
plane while other times it's happening

00:41:05,359 --> 00:41:08,560
in the data plane

00:41:06,560 --> 00:41:09,760
it's sort of like the good news is

00:41:08,560 --> 00:41:12,160
you've been driving a car

00:41:09,760 --> 00:41:13,760
at 200 miles an hour and you didn't hit

00:41:12,160 --> 00:41:16,960
a brick wall it's still going

00:41:13,760 --> 00:41:17,920
but there's no steering wheel um and so

00:41:16,960 --> 00:41:20,240
it's sort of a

00:41:17,920 --> 00:41:21,520
it's still a very important problem for

00:41:20,240 --> 00:41:23,680
us to look at and so we've had to

00:41:21,520 --> 00:41:25,599
re-evaluate how we qualify

00:41:23,680 --> 00:41:27,119
an outage and how we interact with users

00:41:25,599 --> 00:41:28,720
and customers and say okay

00:41:27,119 --> 00:41:30,160
your traffic is still flowing but we

00:41:28,720 --> 00:41:32,560
still this is still a very serious

00:41:30,160 --> 00:41:32,560
incident

00:41:33,040 --> 00:41:36,319
oh man that that's a that's a really

00:41:34,640 --> 00:41:40,079
good way it's that like

00:41:36,319 --> 00:41:42,400
yes mr customer i understand

00:41:40,079 --> 00:41:43,200
you're kind of down but not really down

00:41:42,400 --> 00:41:45,680
is this an

00:41:43,200 --> 00:41:47,920
a serious outage or a semi-serious like

00:41:45,680 --> 00:41:50,160
it's one of those where

00:41:47,920 --> 00:41:51,839
yes or no is a much easier question

00:41:50,160 --> 00:41:52,960
especially if you've got the checklist

00:41:51,839 --> 00:41:56,400
together

00:41:52,960 --> 00:41:58,480
so yeah super cool to think about

00:41:56,400 --> 00:41:59,760
for console service mesh we would love

00:41:58,480 --> 00:42:01,599
to continue

00:41:59,760 --> 00:42:03,440
the discussion if you all have any

00:42:01,599 --> 00:42:06,640
questions feel free to

00:42:03,440 --> 00:42:10,800
ask us on our discuss forum

00:42:06,640 --> 00:42:14,160
or check out our docs at console.io

00:42:10,800 --> 00:42:16,160
docs or we would love if you all were

00:42:14,160 --> 00:42:18,319
interested in contributing

00:42:16,160 --> 00:42:19,839
to our repos we have the console repo we

00:42:18,319 --> 00:42:22,960
have our console

00:42:19,839 --> 00:42:24,400
on kubernetes repo and our console helm

00:42:22,960 --> 00:42:26,960
repo

00:42:24,400 --> 00:42:28,880
thank you very much one of the things

00:42:26,960 --> 00:42:30,319
that we hear from users very frequently

00:42:28,880 --> 00:42:32,240
who are interested in getting involved

00:42:30,319 --> 00:42:34,319
in their in the istio community

00:42:32,240 --> 00:42:35,760
is they don't feel like they have the

00:42:34,319 --> 00:42:36,800
technical chops that are going to be

00:42:35,760 --> 00:42:38,800
necessary

00:42:36,800 --> 00:42:40,560
for all of the details and complexity in

00:42:38,800 --> 00:42:42,160
developing an istio feature

00:42:40,560 --> 00:42:44,000
well in the usability group one of the

00:42:42,160 --> 00:42:46,079
key things that we're looking for is

00:42:44,000 --> 00:42:47,040
insight into user habits and user

00:42:46,079 --> 00:42:48,960
experience

00:42:47,040 --> 00:42:51,040
to understand what the process of

00:42:48,960 --> 00:42:52,000
upgrading istio is like for a user or

00:42:51,040 --> 00:42:54,000
troubleshooting

00:42:52,000 --> 00:42:56,319
sd was like for a user so the good news

00:42:54,000 --> 00:42:56,880
is lack of technical chops for the

00:42:56,319 --> 00:42:58,800
deepest

00:42:56,880 --> 00:43:00,560
darkest corners of istio is actually a

00:42:58,800 --> 00:43:01,280
prerequisite to contributing in this

00:43:00,560 --> 00:43:02,560
area

00:43:01,280 --> 00:43:04,640
if you're interested in getting involved

00:43:02,560 --> 00:43:06,000
in the community i highly recommend

00:43:04,640 --> 00:43:07,440
starting with the user experience

00:43:06,000 --> 00:43:08,000
working group where we would love to

00:43:07,440 --> 00:43:10,079
hear

00:43:08,000 --> 00:43:11,599
what you're using istio for and what

00:43:10,079 --> 00:43:13,040
your day-to-day life and interacting

00:43:11,599 --> 00:43:14,800
with istio is like

00:43:13,040 --> 00:43:16,480
you can find the links on the slide to

00:43:14,800 --> 00:43:17,119
join us that we also have a community

00:43:16,480 --> 00:43:18,400
meeting

00:43:17,119 --> 00:43:20,560
where we're interested in hearing all

00:43:18,400 --> 00:43:23,440
sorts of different use cases for istio

00:43:20,560 --> 00:43:23,440
hope to see you there soon

00:43:23,760 --> 00:43:27,680
oh that's really great this has been a

00:43:25,440 --> 00:43:30,480
fantastic conversation thank you

00:43:27,680 --> 00:43:31,680
mitch and sabine i really enjoyed it uh

00:43:30,480 --> 00:43:33,280
finally to

00:43:31,680 --> 00:43:34,960
call out linker d in our community we'd

00:43:33,280 --> 00:43:37,200
really love everyone who's

00:43:34,960 --> 00:43:39,119
interested to come join our community

00:43:37,200 --> 00:43:39,760
get started and check things out i've

00:43:39,119 --> 00:43:42,800
got

00:43:39,760 --> 00:43:43,599
github slack and twitter links up there

00:43:42,800 --> 00:43:46,720
and we'd love

00:43:43,599 --> 00:43:48,079
for you to join us however you can this

00:43:46,720 --> 00:43:50,240
is a great community thank you

00:43:48,079 --> 00:43:53,200
servicemeshcon and have a great rest of

00:43:50,240 --> 00:43:53,200

YouTube URL: https://www.youtube.com/watch?v=5rpc7skeslI


