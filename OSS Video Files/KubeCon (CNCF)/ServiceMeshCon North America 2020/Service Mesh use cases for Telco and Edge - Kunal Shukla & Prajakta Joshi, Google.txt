Title: Service Mesh use cases for Telco and Edge - Kunal Shukla & Prajakta Joshi, Google
Publication date: 2020-11-25
Playlist: ServiceMeshCon North America 2020
Description: 
	Service Mesh use cases for Telco and Edge - Kunal Shukla & Prajakta Joshi, Google

Service Mesh is a key paradigm for Telco, 5G and Edge. In this session, the speakers deep dive into how Service Mesh delivers technical and business value for use cases like: - Service Mesh for modern service ops for Telco - Service Mesh for managing heterogeneous environments with container and openstack/VM services - Service Mesh for 5G Core service based architecture - Telco Security - Consistent service management across multi-cloud and Edge - Extending the experience of Cloud to the Edge The speakers also describe some of the new capabilities that are needed in service mesh for these use cases and the road ahead.
Captions: 
	00:00:00,000 --> 00:00:03,679
good afternoon all and welcome to the

00:00:01,839 --> 00:00:05,680
exciting session on service mesh use

00:00:03,679 --> 00:00:08,000
cases for telco nh

00:00:05,680 --> 00:00:09,519
i'm kunal shaklaw key account executive

00:00:08,000 --> 00:00:11,440
in telco media and entertainment

00:00:09,519 --> 00:00:12,960
vertical at google

00:00:11,440 --> 00:00:14,960
today i'm going to talk to you about

00:00:12,960 --> 00:00:17,600
some of the key industry trends

00:00:14,960 --> 00:00:21,279
drivers opportunities and challenges

00:00:17,600 --> 00:00:23,039
within the telco and edge industry

00:00:21,279 --> 00:00:24,720
let's start with a closer look at key

00:00:23,039 --> 00:00:26,320
industry trends that are driving the

00:00:24,720 --> 00:00:29,359
edge and telco model

00:00:26,320 --> 00:00:31,679
i have summarized them in three areas

00:00:29,359 --> 00:00:32,559
our lives are changing the way we work

00:00:31,679 --> 00:00:34,960
the way we live

00:00:32,559 --> 00:00:36,559
the way we play we live in a world of

00:00:34,960 --> 00:00:38,399
connected everything

00:00:36,559 --> 00:00:40,239
ericsson predicts 25 billion connected

00:00:38,399 --> 00:00:42,320
devices by 2025

00:00:40,239 --> 00:00:44,000
and these devices will generate huge

00:00:42,320 --> 00:00:46,239
amounts of data

00:00:44,000 --> 00:00:47,840
gartner predicts 75 of the data

00:00:46,239 --> 00:00:50,320
generated will be processed near the

00:00:47,840 --> 00:00:52,960
source of where it is generated

00:00:50,320 --> 00:00:54,239
this has led to a strong focus around

00:00:52,960 --> 00:00:56,399
edge initiatives

00:00:54,239 --> 00:00:58,399
and edge as a business service platform

00:00:56,399 --> 00:01:01,840
to deliver new business outcomes

00:00:58,399 --> 00:01:04,159
and solutions for enterprises next

00:01:01,840 --> 00:01:05,439
is telco transformation the telco

00:01:04,159 --> 00:01:07,040
industry has gone through

00:01:05,439 --> 00:01:09,200
tremendous transformation in the last

00:01:07,040 --> 00:01:10,720
five years to build the foundation

00:01:09,200 --> 00:01:13,040
of next generation networks for

00:01:10,720 --> 00:01:15,280
consumers and enterprises

00:01:13,040 --> 00:01:16,080
telcos for the longest time have relied

00:01:15,280 --> 00:01:18,080
on network

00:01:16,080 --> 00:01:20,080
equipment providers to deliver an

00:01:18,080 --> 00:01:21,439
integrated proprietary stack solution

00:01:20,080 --> 00:01:24,080
driving vendor lock-in and high

00:01:21,439 --> 00:01:24,479
operating cost in the last three to five

00:01:24,080 --> 00:01:26,000
years

00:01:24,479 --> 00:01:27,840
telcos have embraced technology

00:01:26,000 --> 00:01:30,479
disruptions through cloud

00:01:27,840 --> 00:01:32,000
sdn network function virtualization and

00:01:30,479 --> 00:01:34,000
ci cd processors

00:01:32,000 --> 00:01:35,439
leading to an open architecture

00:01:34,000 --> 00:01:38,240
optimized cost structure

00:01:35,439 --> 00:01:40,000
and reduced time to market although they

00:01:38,240 --> 00:01:41,520
are not past the gold line yet

00:01:40,000 --> 00:01:42,880
they have run into multiple challenges

00:01:41,520 --> 00:01:44,799
within the ecosystem which they are

00:01:42,880 --> 00:01:48,960
trying to resolve

00:01:44,799 --> 00:01:52,479
third is 5g 5g is not just another ge

00:01:48,960 --> 00:01:54,399
historically 2g 3g 4g has focused on

00:01:52,479 --> 00:01:56,240
wireless technologies spectrum

00:01:54,399 --> 00:01:58,320
utilization and getting bandwidth to

00:01:56,240 --> 00:02:00,320
consumers like you and me

00:01:58,320 --> 00:02:01,920
5g bring forwards a paradigm shift and

00:02:00,320 --> 00:02:02,960
promises to deliver service based

00:02:01,920 --> 00:02:05,920
architecture

00:02:02,960 --> 00:02:06,719
focused on end user experience and

00:02:05,920 --> 00:02:08,879
services

00:02:06,719 --> 00:02:10,000
through concepts such as network slicing

00:02:08,879 --> 00:02:12,319
better control

00:02:10,000 --> 00:02:13,599
management overall these are the

00:02:12,319 --> 00:02:14,160
building blocks transforming the

00:02:13,599 --> 00:02:16,080
industry

00:02:14,160 --> 00:02:19,200
and enabling enterprises to drive new

00:02:16,080 --> 00:02:21,040
monetization opportunities

00:02:19,200 --> 00:02:22,800
let's look at what are the drivers for

00:02:21,040 --> 00:02:24,400
edge and 5g

00:02:22,800 --> 00:02:26,560
i have summarized them in four main

00:02:24,400 --> 00:02:28,080
areas number one

00:02:26,560 --> 00:02:30,480
is the need for latency sensitive

00:02:28,080 --> 00:02:32,879
solution the ability to

00:02:30,480 --> 00:02:33,840
take actions based on data generated by

00:02:32,879 --> 00:02:37,200
connected devices

00:02:33,840 --> 00:02:39,920
in milliseconds rather than seconds

00:02:37,200 --> 00:02:42,000
next is around privacy and security

00:02:39,920 --> 00:02:43,360
keeping the enterprise data generated

00:02:42,000 --> 00:02:45,680
within the enterprise

00:02:43,360 --> 00:02:46,400
environment based on policies and not

00:02:45,680 --> 00:02:50,239
sharing it

00:02:46,400 --> 00:02:50,720
across clouds or across networks number

00:02:50,239 --> 00:02:53,120
three

00:02:50,720 --> 00:02:55,519
is right sizing the bandwidth network

00:02:53,120 --> 00:02:57,200
costs are in general a big concern

00:02:55,519 --> 00:02:58,560
for enterprises and they are looking at

00:02:57,200 --> 00:03:00,239
effective ways

00:02:58,560 --> 00:03:02,720
of managing the network cost and

00:03:00,239 --> 00:03:05,280
prioritizing the right traffic

00:03:02,720 --> 00:03:05,760
overall it is about driving new business

00:03:05,280 --> 00:03:08,080
outcomes

00:03:05,760 --> 00:03:09,840
and values whether it is in terms of

00:03:08,080 --> 00:03:12,080
consumer experiences

00:03:09,840 --> 00:03:15,120
new products for monetization or

00:03:12,080 --> 00:03:15,120
operational efficiencies

00:03:15,360 --> 00:03:20,159
so let's talk about where is the edge

00:03:18,319 --> 00:03:23,200
let's look at this picture from

00:03:20,159 --> 00:03:25,920
right to left side today

00:03:23,200 --> 00:03:26,879
uh typically the data is generated on

00:03:25,920 --> 00:03:29,040
the devices but

00:03:26,879 --> 00:03:31,200
it's stored in the data center or public

00:03:29,040 --> 00:03:33,680
cloud which are tens

00:03:31,200 --> 00:03:35,200
of regions of public cloud or data

00:03:33,680 --> 00:03:36,560
centers

00:03:35,200 --> 00:03:38,400
with the drivers discussed in the

00:03:36,560 --> 00:03:40,480
earlier slide the industry is seeing a

00:03:38,400 --> 00:03:43,599
left shift in moving cloud environments

00:03:40,480 --> 00:03:45,840
towards the edges at google

00:03:43,599 --> 00:03:48,239
we already are extending our good gcp

00:03:45,840 --> 00:03:50,000
google cloud into our pops

00:03:48,239 --> 00:03:51,760
but are extending our partnership with

00:03:50,000 --> 00:03:52,799
telco to bring our cloud environments to

00:03:51,760 --> 00:03:56,000
the telco edges

00:03:52,799 --> 00:03:57,760
which are in thousands in addition

00:03:56,000 --> 00:03:59,360
we are extending extending this cloud

00:03:57,760 --> 00:04:02,400
environment to the customer

00:03:59,360 --> 00:04:05,840
edges which are either branch offices

00:04:02,400 --> 00:04:08,239
warehouse retail stores campuses

00:04:05,840 --> 00:04:09,920
in which you will drive the real low

00:04:08,239 --> 00:04:10,640
latency next generation business

00:04:09,920 --> 00:04:12,840
outcomes

00:04:10,640 --> 00:04:14,080
on premise within the enterprise

00:04:12,840 --> 00:04:15,840
environment

00:04:14,080 --> 00:04:17,919
the main goal is to run the right

00:04:15,840 --> 00:04:20,880
workload at the right cloud location

00:04:17,919 --> 00:04:22,160
to drive the right business outcomes we

00:04:20,880 --> 00:04:24,639
see a role

00:04:22,160 --> 00:04:25,919
of all distributed cloud locations

00:04:24,639 --> 00:04:28,320
whether it be at the edge

00:04:25,919 --> 00:04:29,440
or the regions the main goal is to

00:04:28,320 --> 00:04:31,919
provide enterprises

00:04:29,440 --> 00:04:32,880
a business services platform for

00:04:31,919 --> 00:04:35,120
enterprises

00:04:32,880 --> 00:04:37,919
and developers to build consumer and

00:04:35,120 --> 00:04:37,919
business solutions

00:04:38,160 --> 00:04:44,160
so let's look at let's take a look at

00:04:40,000 --> 00:04:45,759
how enterprises can use edge and 5g

00:04:44,160 --> 00:04:47,680
5g and edge together provides a

00:04:45,759 --> 00:04:49,840
horizontal platform that enables

00:04:47,680 --> 00:04:51,919
vertical industries to build

00:04:49,840 --> 00:04:54,000
monetize and transform their business

00:04:51,919 --> 00:04:56,800
and consumer outcomes

00:04:54,000 --> 00:04:59,199
strong focus has been put with the

00:04:56,800 --> 00:05:00,400
industry such as retail manufacturing

00:04:59,199 --> 00:05:03,039
healthcare

00:05:00,400 --> 00:05:04,880
to take this base platform and bring in

00:05:03,039 --> 00:05:06,320
new technologies to drive new services

00:05:04,880 --> 00:05:08,560
and solutions

00:05:06,320 --> 00:05:10,000
for example retail is looking at edge

00:05:08,560 --> 00:05:12,960
and 5g to drive consumer

00:05:10,000 --> 00:05:14,800
experiences such as queue management

00:05:12,960 --> 00:05:17,520
heat maps for product placement

00:05:14,800 --> 00:05:19,120
dress your look using arm vr and no

00:05:17,520 --> 00:05:21,120
contact checkouts

00:05:19,120 --> 00:05:24,240
in addition they are looking at self

00:05:21,120 --> 00:05:26,400
cleaning and self storing robots

00:05:24,240 --> 00:05:27,759
for manufacturing manufacturing is

00:05:26,400 --> 00:05:30,080
looking at driving operational

00:05:27,759 --> 00:05:32,960
efficiencies in connected factory

00:05:30,080 --> 00:05:34,720
by reducing the faults found using ai

00:05:32,960 --> 00:05:37,039
and ml based solutions

00:05:34,720 --> 00:05:38,479
security surveillance asset management

00:05:37,039 --> 00:05:40,240
tracking

00:05:38,479 --> 00:05:42,160
healthcare also has seen a similar

00:05:40,240 --> 00:05:43,199
interest and promise around pharmacies

00:05:42,160 --> 00:05:45,600
of the future

00:05:43,199 --> 00:05:47,280
and transforming the healthcare industry

00:05:45,600 --> 00:05:49,520
especially during today's

00:05:47,280 --> 00:05:53,600
environment of remote patients and

00:05:49,520 --> 00:05:56,639
remote doctors

00:05:53,600 --> 00:05:58,960
so let's walk through an example of

00:05:56,639 --> 00:05:59,680
customer edge on what we are trying to

00:05:58,960 --> 00:06:02,960
do from an

00:05:59,680 --> 00:06:05,280
end to end service using 5g and edge

00:06:02,960 --> 00:06:07,199
in this case we have extender our cloud

00:06:05,280 --> 00:06:10,400
environment to customers edge

00:06:07,199 --> 00:06:13,120
that is warehouse of the enterprise

00:06:10,400 --> 00:06:14,639
telcos are providing 5g connectivity

00:06:13,120 --> 00:06:15,360
that is dedicated to the enterprise

00:06:14,639 --> 00:06:16,720
customers

00:06:15,360 --> 00:06:18,880
to which all the devices in the

00:06:16,720 --> 00:06:21,120
enterprise locations are connected

00:06:18,880 --> 00:06:22,479
in this example all traffic coming from

00:06:21,120 --> 00:06:24,800
video cameras

00:06:22,479 --> 00:06:25,919
in the warehouse location would be kept

00:06:24,800 --> 00:06:29,520
on the enterprise

00:06:25,919 --> 00:06:31,600
location based on enterprise policies

00:06:29,520 --> 00:06:32,800
once the camera feed is kept local on

00:06:31,600 --> 00:06:34,880
the enterprises

00:06:32,800 --> 00:06:36,240
we are providing google's edge

00:06:34,880 --> 00:06:38,160
application stack

00:06:36,240 --> 00:06:39,840
which is a kubernetes based managed

00:06:38,160 --> 00:06:40,560
platform to deliver infrastructure as a

00:06:39,840 --> 00:06:42,319
service

00:06:40,560 --> 00:06:44,800
platform as a service or software as a

00:06:42,319 --> 00:06:46,639
service environment to enterprises

00:06:44,800 --> 00:06:48,960
in the specific case the application is

00:06:46,639 --> 00:06:50,880
video intelligence application

00:06:48,960 --> 00:06:52,720
that is processing the video cameras

00:06:50,880 --> 00:06:55,120
rtsp feed to deliver

00:06:52,720 --> 00:06:56,400
tangible business outcomes such as

00:06:55,120 --> 00:06:58,240
counting people

00:06:56,400 --> 00:07:00,400
within the warehouse during covert times

00:06:58,240 --> 00:07:04,240
providing surveillance security

00:07:00,400 --> 00:07:06,000
and asset management the ai and ml model

00:07:04,240 --> 00:07:07,759
for the video intelligence are trained

00:07:06,000 --> 00:07:09,840
in google cloud

00:07:07,759 --> 00:07:11,199
but the execution and the actions are

00:07:09,840 --> 00:07:13,440
taken at the edge

00:07:11,199 --> 00:07:16,160
within the enterprise application and

00:07:13,440 --> 00:07:17,759
within the edge application stack

00:07:16,160 --> 00:07:19,599
the same model can be extended to

00:07:17,759 --> 00:07:22,000
multiple other use cases

00:07:19,599 --> 00:07:23,840
whether it be manufacturing healthcare

00:07:22,000 --> 00:07:25,680
venues stadiums

00:07:23,840 --> 00:07:27,280
but the idea would be to host multiple

00:07:25,680 --> 00:07:29,599
applications to deliver

00:07:27,280 --> 00:07:32,479
new business outcomes and experiences

00:07:29,599 --> 00:07:32,479
for enterprises

00:07:32,560 --> 00:07:37,599
now let's take a look at 5g and network

00:07:35,759 --> 00:07:39,440
everywhere you go these days you're

00:07:37,599 --> 00:07:40,400
going to hear about 5g even my kids are

00:07:39,440 --> 00:07:44,080
talking about

00:07:40,400 --> 00:07:45,599
new 5g iphone so let's uncover how 5g is

00:07:44,080 --> 00:07:46,720
transforming the telco architecture

00:07:45,599 --> 00:07:49,199
under the hood

00:07:46,720 --> 00:07:50,800
i classify that in four main areas to

00:07:49,199 --> 00:07:53,759
understand this better

00:07:50,800 --> 00:07:55,759
number one is multi-vendor cloud native

00:07:53,759 --> 00:07:57,680
network function applications

00:07:55,759 --> 00:07:59,440
so if you look at the bottom slide

00:07:57,680 --> 00:08:01,680
bottom side of your slide where you see

00:07:59,440 --> 00:08:03,680
ru's du's and ceus

00:08:01,680 --> 00:08:04,800
5g telcos are embracing cloud native

00:08:03,680 --> 00:08:06,879
architecture

00:08:04,800 --> 00:08:08,000
i will not go into the alphabet soup of

00:08:06,879 --> 00:08:09,840
network functions

00:08:08,000 --> 00:08:11,440
but they are essentially cloud native

00:08:09,840 --> 00:08:15,120
applications that

00:08:11,440 --> 00:08:17,520
makes your call happens on a daily basis

00:08:15,120 --> 00:08:19,360
you being able to browse the high speed

00:08:17,520 --> 00:08:20,960
data on your phone or home

00:08:19,360 --> 00:08:23,199
these are the applications which make it

00:08:20,960 --> 00:08:25,520
happen so number one

00:08:23,199 --> 00:08:26,879
is a multi-vendor cloud native network

00:08:25,520 --> 00:08:30,000
function

00:08:26,879 --> 00:08:31,599
environment number two is service based

00:08:30,000 --> 00:08:33,919
architecture

00:08:31,599 --> 00:08:35,200
5g networks leverage service based

00:08:33,919 --> 00:08:37,120
architecture

00:08:35,200 --> 00:08:39,519
with the applications built using

00:08:37,120 --> 00:08:40,880
microservice methodology

00:08:39,519 --> 00:08:43,200
with the micro services based

00:08:40,880 --> 00:08:45,279
architecture in 5g it will ultimately

00:08:43,200 --> 00:08:48,080
evolve into a complete service mesh

00:08:45,279 --> 00:08:48,880
with service discovery load balancing

00:08:48,080 --> 00:08:50,959
encryption

00:08:48,880 --> 00:08:54,320
authentication and employing sidecar for

00:08:50,959 --> 00:08:56,160
inter-service communication

00:08:54,320 --> 00:08:58,240
taking the cloud native and micro

00:08:56,160 --> 00:09:00,560
services based application

00:08:58,240 --> 00:09:02,000
this enables the telco to start

00:09:00,560 --> 00:09:04,959
distributing

00:09:02,000 --> 00:09:05,760
in in a cloud environment where if you

00:09:04,959 --> 00:09:09,360
look at

00:09:05,760 --> 00:09:11,360
the the radio edges the 5g radio site

00:09:09,360 --> 00:09:13,519
that becomes a cloud environment on

00:09:11,360 --> 00:09:15,920
which radio functions rise

00:09:13,519 --> 00:09:17,440
you can have 5g edge where you can have

00:09:15,920 --> 00:09:19,120
your data plane application and other

00:09:17,440 --> 00:09:21,120
applications residing

00:09:19,120 --> 00:09:22,720
you have j5g core where you will have

00:09:21,120 --> 00:09:24,560
rest of the control plane applications

00:09:22,720 --> 00:09:25,920
and data management application

00:09:24,560 --> 00:09:28,000
and you will have the public cloud where

00:09:25,920 --> 00:09:31,120
you are bringing in new differentiated

00:09:28,000 --> 00:09:32,800
applications on the 5g network

00:09:31,120 --> 00:09:36,000
essentially this will enable a

00:09:32,800 --> 00:09:38,080
distributed cloud deployment model

00:09:36,000 --> 00:09:39,040
the last thing is dynamic network

00:09:38,080 --> 00:09:40,959
slicing

00:09:39,040 --> 00:09:43,680
5g introduces a concept of network

00:09:40,959 --> 00:09:45,680
slicing by which telcos can provide you

00:09:43,680 --> 00:09:48,399
a dedicated network slice

00:09:45,680 --> 00:09:50,000
based on different traffic types you

00:09:48,399 --> 00:09:50,959
could be an enterprise asking for a

00:09:50,000 --> 00:09:53,200
network slice

00:09:50,959 --> 00:09:55,440
you could be a manufacturing entity you

00:09:53,200 --> 00:09:58,720
could be connected cars or you could be

00:09:55,440 --> 00:10:01,839
an iot uh service provider

00:09:58,720 --> 00:10:04,320
each of these solutions can be provided

00:10:01,839 --> 00:10:06,240
a network slides based on the network on

00:10:04,320 --> 00:10:08,959
based on the traffic type

00:10:06,240 --> 00:10:10,160
overall 5g telco network is more than

00:10:08,959 --> 00:10:13,519
just speed

00:10:10,160 --> 00:10:14,800
it's about how you enable consumers and

00:10:13,519 --> 00:10:16,640
enterprise experience

00:10:14,800 --> 00:10:18,560
enable machine to machine communication

00:10:16,640 --> 00:10:20,560
at scale deliver

00:10:18,560 --> 00:10:22,399
ultra reliable low latency use cases

00:10:20,560 --> 00:10:25,519
such as autonomous vehicles

00:10:22,399 --> 00:10:28,640
drones ar vr which will truly transform

00:10:25,519 --> 00:10:28,640
the consumer and businesses

00:10:28,800 --> 00:10:32,640
while the promise of edge and 5g with

00:10:31,440 --> 00:10:34,399
telcos is appealing

00:10:32,640 --> 00:10:36,240
there are multiple challenges that need

00:10:34,399 --> 00:10:38,320
to be addressed in order to truly

00:10:36,240 --> 00:10:41,760
realize this at scale

00:10:38,320 --> 00:10:43,680
let's talk about that the first one is

00:10:41,760 --> 00:10:45,040
as i spoke it's distributed cloud

00:10:43,680 --> 00:10:47,519
management

00:10:45,040 --> 00:10:50,000
moving from tens of data centers to tens

00:10:47,519 --> 00:10:52,240
of thousands of cloud environments

00:10:50,000 --> 00:10:53,360
how do you drive the distributed cloud

00:10:52,240 --> 00:10:56,959
environment

00:10:53,360 --> 00:10:59,440
and manage it at scale the second

00:10:56,959 --> 00:11:00,399
is the focus of enterprise and consumer

00:10:59,440 --> 00:11:02,240
services

00:11:00,399 --> 00:11:03,440
the resources needs to be scaled

00:11:02,240 --> 00:11:05,040
dynamically without

00:11:03,440 --> 00:11:06,320
any business impact so that's where

00:11:05,040 --> 00:11:08,160
dynamic service scalability and

00:11:06,320 --> 00:11:10,160
performance comes in

00:11:08,160 --> 00:11:12,560
the third area is around service

00:11:10,160 --> 00:11:13,519
definition and orchestration across vm

00:11:12,560 --> 00:11:16,399
and containers

00:11:13,519 --> 00:11:18,160
in a distributed cloud environment

00:11:16,399 --> 00:11:20,640
applications will be running on vms and

00:11:18,160 --> 00:11:22,480
containers how do you manage them both

00:11:20,640 --> 00:11:25,519
and using that how do you provide

00:11:22,480 --> 00:11:27,680
end-to-end slas and availability

00:11:25,519 --> 00:11:29,120
across the business critical systems

00:11:27,680 --> 00:11:30,880
residing in these distributed cloud

00:11:29,120 --> 00:11:33,120
environments

00:11:30,880 --> 00:11:35,760
the next one is with network slicing

00:11:33,120 --> 00:11:38,880
ability to imperatively

00:11:35,760 --> 00:11:40,240
deploy manage measure and this network

00:11:38,880 --> 00:11:43,279
slices at service level

00:11:40,240 --> 00:11:44,320
becomes extremely important and the last

00:11:43,279 --> 00:11:46,399
part

00:11:44,320 --> 00:11:47,440
is around harmonization of service

00:11:46,399 --> 00:11:49,839
control

00:11:47,440 --> 00:11:51,680
service mesh across multi-vendor

00:11:49,839 --> 00:11:53,920
application and network functions

00:11:51,680 --> 00:11:56,720
so how do you provide that multi-vendor

00:11:53,920 --> 00:11:58,720
service control

00:11:56,720 --> 00:12:00,639
when i look at these challenges service

00:11:58,720 --> 00:12:03,440
mesh is a critical paradigm

00:12:00,639 --> 00:12:04,880
which can solve many of these challenges

00:12:03,440 --> 00:12:06,880
i would like to invite my colleague

00:12:04,880 --> 00:12:08,079
projecta to do a deep dive into the

00:12:06,880 --> 00:12:10,480
service mesh

00:12:08,079 --> 00:12:12,000
for telco and edge use cases and how we

00:12:10,480 --> 00:12:14,560
address these challenges

00:12:12,000 --> 00:12:14,560
projector

00:12:19,040 --> 00:12:23,040
thank you kunal hello everyone i'm

00:12:20,720 --> 00:12:24,720
prajaptha i'm the product lead for cloud

00:12:23,040 --> 00:12:25,360
networking telco and edge in google

00:12:24,720 --> 00:12:27,839
cloud

00:12:25,360 --> 00:12:29,839
as canal described service mesh is a key

00:12:27,839 --> 00:12:32,639
paradigm for solving many challenges for

00:12:29,839 --> 00:12:35,279
cloud telco and edge use cases

00:12:32,639 --> 00:12:37,040
as discussed as an industry we have

00:12:35,279 --> 00:12:38,560
three big opportunities to tap into for

00:12:37,040 --> 00:12:40,079
telco and edge

00:12:38,560 --> 00:12:42,399
first is working with telcos to

00:12:40,079 --> 00:12:44,160
transform their it network and services

00:12:42,399 --> 00:12:45,440
this is going to be fueled by leveraging

00:12:44,160 --> 00:12:48,079
the best of technologies

00:12:45,440 --> 00:12:48,959
experience and talent that telcos public

00:12:48,079 --> 00:12:51,200
cloud providers

00:12:48,959 --> 00:12:53,120
isps and others have with all of us

00:12:51,200 --> 00:12:55,040
becoming better in the process

00:12:53,120 --> 00:12:56,880
the second major opportunity is around

00:12:55,040 --> 00:12:58,480
delivering value to enterprises with

00:12:56,880 --> 00:13:00,880
edge computing solutions

00:12:58,480 --> 00:13:02,480
and 5g as a business services platform

00:13:00,880 --> 00:13:04,959
this will create new revenue streams for

00:13:02,480 --> 00:13:06,800
the broader ecosystem

00:13:04,959 --> 00:13:09,200
the third one is as much an opportunity

00:13:06,800 --> 00:13:10,160
as a necessity to enable the first two

00:13:09,200 --> 00:13:11,920
opportunities

00:13:10,160 --> 00:13:13,600
it's about breaking down the silos that

00:13:11,920 --> 00:13:15,279
have existed between the network and

00:13:13,600 --> 00:13:17,440
services platforms

00:13:15,279 --> 00:13:18,480
paradigms service orchestration

00:13:17,440 --> 00:13:20,639
automation

00:13:18,480 --> 00:13:21,680
and more use by telcos and public cloud

00:13:20,639 --> 00:13:23,920
providers

00:13:21,680 --> 00:13:26,160
it's also about jointly jointly building

00:13:23,920 --> 00:13:27,839
pieces that don't exist yet

00:13:26,160 --> 00:13:29,279
that's how we can unlock seamless

00:13:27,839 --> 00:13:33,040
delivery of services

00:13:29,279 --> 00:13:35,839
across a global distributed agent cloud

00:13:33,040 --> 00:13:36,560
now to do this we need open scalable

00:13:35,839 --> 00:13:38,880
resilient

00:13:36,560 --> 00:13:42,639
network and services platforms that can

00:13:38,880 --> 00:13:44,160
work across telco cloud and edge

00:13:42,639 --> 00:13:46,160
most of you would have already guessed

00:13:44,160 --> 00:13:48,160
the three cloud native technologies that

00:13:46,160 --> 00:13:52,480
are important for this platform

00:13:48,160 --> 00:13:54,160
containers service mesh and serverless

00:13:52,480 --> 00:13:56,000
now here's how i generally explain

00:13:54,160 --> 00:13:57,120
service mesh to networking and telco

00:13:56,000 --> 00:13:59,360
folks

00:13:57,120 --> 00:14:01,760
think a few years back you had all of

00:13:59,360 --> 00:14:03,120
these complex network appliances

00:14:01,760 --> 00:14:04,800
and then came software defined

00:14:03,120 --> 00:14:06,639
networking or sdn

00:14:04,800 --> 00:14:08,160
and it disaggregated these closed

00:14:06,639 --> 00:14:10,720
complex appliances

00:14:08,160 --> 00:14:12,079
into a control plane and a data plane

00:14:10,720 --> 00:14:13,519
the data planes were simple and

00:14:12,079 --> 00:14:15,120
forwarded traffic

00:14:13,519 --> 00:14:17,360
these data planes were controlled by

00:14:15,120 --> 00:14:20,000
sophisticated often logically

00:14:17,360 --> 00:14:21,600
centralized control plane

00:14:20,000 --> 00:14:23,440
think of service mesh as software

00:14:21,600 --> 00:14:25,279
defined networking for services

00:14:23,440 --> 00:14:27,440
you take a complex application you

00:14:25,279 --> 00:14:30,000
remove all networking code from it

00:14:27,440 --> 00:14:32,720
so you extract this out and in one model

00:14:30,000 --> 00:14:35,120
you move it to a sidecar service proxy

00:14:32,720 --> 00:14:37,040
now you need a way to configure control

00:14:35,120 --> 00:14:37,920
and apply policy to the proxies in the

00:14:37,040 --> 00:14:39,360
data plane

00:14:37,920 --> 00:14:41,519
and that's why you have a service mesh

00:14:39,360 --> 00:14:43,199
control plane

00:14:41,519 --> 00:14:45,120
one of the biggest benefits of service

00:14:43,199 --> 00:14:46,320
mesh is that it decouples development

00:14:45,120 --> 00:14:48,639
from operations

00:14:46,320 --> 00:14:50,160
which means developers no longer need to

00:14:48,639 --> 00:14:51,360
write and maintain policies and

00:14:50,160 --> 00:14:53,839
networking code

00:14:51,360 --> 00:14:55,600
inside their applications service mesh

00:14:53,839 --> 00:14:58,480
does not make any assumptions

00:14:55,600 --> 00:15:01,040
about where your service is or whether

00:14:58,480 --> 00:15:02,399
it is instantiated on vms or containers

00:15:01,040 --> 00:15:04,160
or bare metal

00:15:02,399 --> 00:15:05,920
that's why it provides a framework that

00:15:04,160 --> 00:15:07,600
can be used consistently across

00:15:05,920 --> 00:15:09,600
multi-cloud deployments

00:15:07,600 --> 00:15:10,639
across heterogeneous vm and container

00:15:09,600 --> 00:15:13,839
environments

00:15:10,639 --> 00:15:13,839
and for telco and edge

00:15:14,079 --> 00:15:18,000
what are the benefits of service mesh so

00:15:15,920 --> 00:15:20,560
first of all is to simplify networking

00:15:18,000 --> 00:15:22,880
architecture and deploy advanced traffic

00:15:20,560 --> 00:15:25,199
management capabilities easily

00:15:22,880 --> 00:15:27,199
the second is to enhance security and

00:15:25,199 --> 00:15:29,759
encrypt all data in transit

00:15:27,199 --> 00:15:31,199
by automatically using mtls on all calls

00:15:29,759 --> 00:15:33,440
within the mesh

00:15:31,199 --> 00:15:35,680
use policy to allow only explicitly

00:15:33,440 --> 00:15:37,600
permitted calls

00:15:35,680 --> 00:15:39,920
third is to ensure more uptime safer

00:15:37,600 --> 00:15:41,600
rollouts and lower time to resolution

00:15:39,920 --> 00:15:43,440
with logs telemetry

00:15:41,600 --> 00:15:45,680
and traces gathered for every service in

00:15:43,440 --> 00:15:47,440
the mesh

00:15:45,680 --> 00:15:49,440
let's take a closer look at the service

00:15:47,440 --> 00:15:51,279
mesh basically a mesh

00:15:49,440 --> 00:15:53,279
abstracts the notion of a distributed

00:15:51,279 --> 00:15:55,519
system network from the application

00:15:53,279 --> 00:15:57,279
because the individual services are not

00:15:55,519 --> 00:15:58,959
aware of the network at large

00:15:57,279 --> 00:16:00,720
they only know about their local proxy

00:15:58,959 --> 00:16:02,399
in this model

00:16:00,720 --> 00:16:04,160
and each proxy is configured and

00:16:02,399 --> 00:16:05,920
administered separately

00:16:04,160 --> 00:16:07,440
service mesh control plane takes these

00:16:05,920 --> 00:16:09,680
onboard data planes

00:16:07,440 --> 00:16:11,440
or these whichever the service proxy is

00:16:09,680 --> 00:16:12,320
and configures them into something

00:16:11,440 --> 00:16:14,480
larger

00:16:12,320 --> 00:16:15,360
by providing unified configuration and

00:16:14,480 --> 00:16:17,199
management

00:16:15,360 --> 00:16:18,399
and then depending on the implementation

00:16:17,199 --> 00:16:21,759
added intelligence

00:16:18,399 --> 00:16:22,000
to these service proxies the big benefit

00:16:21,759 --> 00:16:23,680
is

00:16:22,000 --> 00:16:25,040
that a service mesh lets you reason

00:16:23,680 --> 00:16:26,880
about policies

00:16:25,040 --> 00:16:29,600
at the level of services instead of

00:16:26,880 --> 00:16:29,600
infrastructure

00:16:29,759 --> 00:16:32,959
one of the most popular ways to

00:16:31,199 --> 00:16:34,560
implement a service mesh

00:16:32,959 --> 00:16:36,000
is using what i just referred to which

00:16:34,560 --> 00:16:38,560
is the open source envoy

00:16:36,000 --> 00:16:39,360
proxy deployed next to the application

00:16:38,560 --> 00:16:41,199
logic

00:16:39,360 --> 00:16:43,920
and then the data plane of the envoy is

00:16:41,199 --> 00:16:45,759
managed by a service mesh control plane

00:16:43,920 --> 00:16:48,240
the service mesh control and data plane

00:16:45,759 --> 00:16:49,360
speak the open xds protocol this is also

00:16:48,240 --> 00:16:51,680
evolving

00:16:49,360 --> 00:16:53,519
and envoy makes the data plane highly

00:16:51,680 --> 00:16:54,639
programmable and extensible and it's one

00:16:53,519 --> 00:16:57,839
of the most popular

00:16:54,639 --> 00:17:00,240
proxies on the market there are many

00:16:57,839 --> 00:17:02,240
implementations of service mesh today

00:17:00,240 --> 00:17:04,400
some of these are also aiming to solve

00:17:02,240 --> 00:17:06,240
new problems with mesh constructs

00:17:04,400 --> 00:17:07,600
or to bring mesh constructs to solve

00:17:06,240 --> 00:17:09,520
layer two three issues

00:17:07,600 --> 00:17:10,959
or provide a platform for building new

00:17:09,520 --> 00:17:13,280
service control planes

00:17:10,959 --> 00:17:15,199
or to provide an abstraction layer that

00:17:13,280 --> 00:17:17,839
can help you plug in one or more meshes

00:17:15,199 --> 00:17:19,839
under this layer

00:17:17,839 --> 00:17:21,120
personal favorite is high tower service

00:17:19,839 --> 00:17:23,199
mesh

00:17:21,120 --> 00:17:24,400
you should check this twitter link out

00:17:23,199 --> 00:17:25,919
jokes aside

00:17:24,400 --> 00:17:27,760
i'm going to use google's traffic

00:17:25,919 --> 00:17:29,440
director in my examples today

00:17:27,760 --> 00:17:31,280
but you're welcome to use your favorite

00:17:29,440 --> 00:17:34,880
mesh as long as it supports the

00:17:31,280 --> 00:17:37,200
capabilities i'm about to describe

00:17:34,880 --> 00:17:39,120
let's take the example kunal described

00:17:37,200 --> 00:17:40,400
we want to build a smart retail solution

00:17:39,120 --> 00:17:42,559
for a retail store

00:17:40,400 --> 00:17:43,840
but the solution is going to be hosted

00:17:42,559 --> 00:17:46,480
across the retail store

00:17:43,840 --> 00:17:48,240
telco network edge and cloud what are

00:17:46,480 --> 00:17:50,400
the capabilities of service mesh we can

00:17:48,240 --> 00:17:53,440
leverage here

00:17:50,400 --> 00:17:55,440
first of all according to gartner very

00:17:53,440 --> 00:17:55,760
small percentage so about five percent

00:17:55,440 --> 00:17:57,280
of

00:17:55,760 --> 00:17:59,760
enterprise apps worldwide are

00:17:57,280 --> 00:18:01,840
containerized similarly telcos have

00:17:59,760 --> 00:18:03,600
significant vm based apps

00:18:01,840 --> 00:18:05,360
which means a service mesh

00:18:03,600 --> 00:18:08,880
implementation should have first-class

00:18:05,360 --> 00:18:10,960
support for both vms and containers

00:18:08,880 --> 00:18:13,280
the next set of capabilities to leverage

00:18:10,960 --> 00:18:15,039
are the traffic control capabilities

00:18:13,280 --> 00:18:16,960
uh let's say you want to roll out a new

00:18:15,039 --> 00:18:19,600
version without worrying about

00:18:16,960 --> 00:18:21,039
ops challenges like for example canaries

00:18:19,600 --> 00:18:23,679
or a b testing

00:18:21,039 --> 00:18:25,840
service migration and so on so forth you

00:18:23,679 --> 00:18:28,960
can easily configure routing rules

00:18:25,840 --> 00:18:30,799
to split the traffic based on weight to

00:18:28,960 --> 00:18:34,080
make any of these

00:18:30,799 --> 00:18:34,400
different capabilities happen you can

00:18:34,080 --> 00:18:37,200
also

00:18:34,400 --> 00:18:38,160
steer traffic to services based on http

00:18:37,200 --> 00:18:39,760
headers

00:18:38,160 --> 00:18:42,080
when there is a match you can configure

00:18:39,760 --> 00:18:46,400
a variety of actions traffic splitting

00:18:42,080 --> 00:18:47,919
redirects url rewrites and much more

00:18:46,400 --> 00:18:49,600
fault injection helps you test the

00:18:47,919 --> 00:18:51,280
resiliency of services to different

00:18:49,600 --> 00:18:54,080
forms of failures like delays

00:18:51,280 --> 00:18:56,160
aborted requests etc by simulating

00:18:54,080 --> 00:18:57,039
various service failure scenarios like

00:18:56,160 --> 00:18:59,760
high latency

00:18:57,039 --> 00:19:01,679
partial availability overloads and so on

00:18:59,760 --> 00:19:03,280
as a part of fault injection

00:19:01,679 --> 00:19:05,360
when the client sends request to

00:19:03,280 --> 00:19:07,039
back-end service delays can be

00:19:05,360 --> 00:19:09,039
introduced by the service mesh control

00:19:07,039 --> 00:19:11,200
plane in this case traffic director

00:19:09,039 --> 00:19:12,720
on a percentage of requests before

00:19:11,200 --> 00:19:13,679
sending those requests to the backend

00:19:12,720 --> 00:19:15,440
service

00:19:13,679 --> 00:19:17,120
similarly requests from clients to a

00:19:15,440 --> 00:19:18,160
backend service can be aborted by

00:19:17,120 --> 00:19:21,200
traffic director

00:19:18,160 --> 00:19:23,039
for a percentage of requests

00:19:21,200 --> 00:19:25,360
one feature i personally love is traffic

00:19:23,039 --> 00:19:27,520
mirroring this feature allows a shadow

00:19:25,360 --> 00:19:29,120
application to receive real traffic

00:19:27,520 --> 00:19:31,440
which is processed by the main version

00:19:29,120 --> 00:19:33,120
of the app it's fire and forget

00:19:31,440 --> 00:19:34,960
which means responses received by the

00:19:33,120 --> 00:19:37,120
shadow service are discarded

00:19:34,960 --> 00:19:39,360
a fire and forget traffic mirroring can

00:19:37,120 --> 00:19:40,559
be a powerful test to test binaries with

00:19:39,360 --> 00:19:42,720
production traffic

00:19:40,559 --> 00:19:43,840
and it can also help you debug errors

00:19:42,720 --> 00:19:47,440
happening in production

00:19:43,840 --> 00:19:49,760
using the shadow service if service a

00:19:47,440 --> 00:19:51,440
cannot reach service b for for example x

00:19:49,760 --> 00:19:53,520
consecutive tries

00:19:51,440 --> 00:19:56,480
trip the circuit breaker and enforce a

00:19:53,520 --> 00:19:58,559
timeout on all calls to service b

00:19:56,480 --> 00:19:59,840
it is as simple as this to turn on

00:19:58,559 --> 00:20:01,760
circuit breaking

00:19:59,840 --> 00:20:04,080
and outlier detection in the world of

00:20:01,760 --> 00:20:05,200
service mesh and this is basically one

00:20:04,080 --> 00:20:07,440
of the areas that

00:20:05,200 --> 00:20:09,360
people don't try out as much one of the

00:20:07,440 --> 00:20:12,480
most powerful areas of service mesh

00:20:09,360 --> 00:20:14,320
especially with the envoy proxy

00:20:12,480 --> 00:20:15,600
one of the key considerations in telco

00:20:14,320 --> 00:20:17,440
and edge use cases

00:20:15,600 --> 00:20:20,000
is the ability to provide end-to-end

00:20:17,440 --> 00:20:21,840
visibility and slash

00:20:20,000 --> 00:20:23,520
in a service mesh every service is

00:20:21,840 --> 00:20:25,919
inherently observable

00:20:23,520 --> 00:20:28,480
and it emits signals you can easily set

00:20:25,919 --> 00:20:29,840
up metrics emission collection tracing

00:20:28,480 --> 00:20:31,440
and then build out closed loop

00:20:29,840 --> 00:20:33,440
automation to act on the gathered

00:20:31,440 --> 00:20:35,280
insights

00:20:33,440 --> 00:20:37,440
antho service mesh for example from

00:20:35,280 --> 00:20:40,080
google has comprehensive sli

00:20:37,440 --> 00:20:42,000
slo sla management capabilities many

00:20:40,080 --> 00:20:45,440
other service mesh implementations

00:20:42,000 --> 00:20:48,960
provide related capabilities as well

00:20:45,440 --> 00:20:51,600
service in mesh aims to make granular

00:20:48,960 --> 00:20:53,760
and service level policy driven security

00:20:51,600 --> 00:20:55,280
and enforcement easy to deploy

00:20:53,760 --> 00:20:58,080
the service mesh traffic can be

00:20:55,280 --> 00:20:59,760
automatically encrypted using mtls

00:20:58,080 --> 00:21:01,679
configuration configurable

00:20:59,760 --> 00:21:02,640
authentication policies and secure

00:21:01,679 --> 00:21:04,720
naming information

00:21:02,640 --> 00:21:07,280
ensure authorization you can have

00:21:04,720 --> 00:21:09,440
fine-grained role-based access control

00:21:07,280 --> 00:21:10,480
at the application layer for micro

00:21:09,440 --> 00:21:12,240
segmentation

00:21:10,480 --> 00:21:14,000
and then you can combine service mesh

00:21:12,240 --> 00:21:16,640
security and observability

00:21:14,000 --> 00:21:18,159
to perform security auditing as well as

00:21:16,640 --> 00:21:20,559
for detecting and investigating

00:21:18,159 --> 00:21:22,320
anomalies

00:21:20,559 --> 00:21:24,000
service mesh enables you to specify

00:21:22,320 --> 00:21:25,679
traffic management security and

00:21:24,000 --> 00:21:27,200
observability policies

00:21:25,679 --> 00:21:30,159
at the service level in a compute

00:21:27,200 --> 00:21:32,400
agnostic manner for telco and edge

00:21:30,159 --> 00:21:35,200
one key requirement is to manage a mixed

00:21:32,400 --> 00:21:37,120
environment of vmn container services

00:21:35,200 --> 00:21:38,240
the other use case is to migrate vm

00:21:37,120 --> 00:21:40,159
based services

00:21:38,240 --> 00:21:41,679
to container services using cap grow

00:21:40,159 --> 00:21:44,720
drain strategy

00:21:41,679 --> 00:21:46,000
in the past telcos had mpls networks and

00:21:44,720 --> 00:21:48,720
they wanted to migrate to

00:21:46,000 --> 00:21:50,640
optical they started doing this using a

00:21:48,720 --> 00:21:52,799
strategy called cap grow dream the first

00:21:50,640 --> 00:21:53,760
time i heard this term it was from atnj

00:21:52,799 --> 00:21:56,320
and onf

00:21:53,760 --> 00:21:57,200
so you cap your mpls networks you grow

00:21:56,320 --> 00:22:00,240
optical

00:21:57,200 --> 00:22:02,240
and you drain existing mpls to optical

00:22:00,240 --> 00:22:04,080
the same applies to transition from vm

00:22:02,240 --> 00:22:06,080
to container services

00:22:04,080 --> 00:22:07,919
continue to support existing deployments

00:22:06,080 --> 00:22:09,760
with vm orchestration

00:22:07,919 --> 00:22:11,679
introduce a container platform like

00:22:09,760 --> 00:22:13,360
google cloud's answers for all new

00:22:11,679 --> 00:22:15,600
containerized deployments

00:22:13,360 --> 00:22:18,080
and then slowly drain vm-based services

00:22:15,600 --> 00:22:19,840
to container services

00:22:18,080 --> 00:22:21,919
in the interim period when telcos have

00:22:19,840 --> 00:22:22,880
both vm-based services and containerized

00:22:21,919 --> 00:22:25,120
services

00:22:22,880 --> 00:22:26,880
these can co-access seamlessly and

00:22:25,120 --> 00:22:28,799
interact with each other at the service

00:22:26,880 --> 00:22:31,600
mesh layer since the service mesh is

00:22:28,799 --> 00:22:33,520
compute agnostic

00:22:31,600 --> 00:22:35,360
telco and edge environments will often

00:22:33,520 --> 00:22:37,360
have legacy appliances

00:22:35,360 --> 00:22:39,039
or clients alongside cloud native

00:22:37,360 --> 00:22:41,440
services and clients

00:22:39,039 --> 00:22:43,760
imagine you have a legacy client where

00:22:41,440 --> 00:22:45,919
you cannot insert an unwipe proxy

00:22:43,760 --> 00:22:47,280
now since load balancing in a mesh is

00:22:45,919 --> 00:22:49,520
client-side

00:22:47,280 --> 00:22:50,480
then how do you split the traffic from

00:22:49,520 --> 00:22:52,480
legacy client

00:22:50,480 --> 00:22:54,640
to say v1 and v2 of the prediction

00:22:52,480 --> 00:22:56,559
service as you did before

00:22:54,640 --> 00:22:58,000
you can do this by inserting a managed

00:22:56,559 --> 00:23:00,720
middle proxy based on

00:22:58,000 --> 00:23:01,280
envoy you can think of this as an envoy

00:23:00,720 --> 00:23:03,919
based

00:23:01,280 --> 00:23:04,880
layer 7 internal load balancer and then

00:23:03,919 --> 00:23:07,679
you can specify

00:23:04,880 --> 00:23:09,280
traffic splitting or any policy on the

00:23:07,679 --> 00:23:10,960
l7 ilb

00:23:09,280 --> 00:23:13,760
which you cannot perform on the legacy

00:23:10,960 --> 00:23:15,760
client an example of this implementation

00:23:13,760 --> 00:23:16,799
is google cloud's traffic director and

00:23:15,760 --> 00:23:20,559
envoy based

00:23:16,799 --> 00:23:22,400
layer 7 internal load balancer

00:23:20,559 --> 00:23:24,240
one of the key requirements we started

00:23:22,400 --> 00:23:25,280
seeing with a subset of telco and edge

00:23:24,240 --> 00:23:27,440
use cases

00:23:25,280 --> 00:23:29,840
is high performance where the penalty of

00:23:27,440 --> 00:23:31,600
a sidecar proxy was not acceptable

00:23:29,840 --> 00:23:33,600
this was one of the reasons we built out

00:23:31,600 --> 00:23:36,400
a new flavor of services in the mesh

00:23:33,600 --> 00:23:38,799
the proxy list service traffic detective

00:23:36,400 --> 00:23:40,480
support for proxy-less grpc services is

00:23:38,799 --> 00:23:42,480
based on a simple idea

00:23:40,480 --> 00:23:44,559
if traffic director can configure site

00:23:42,480 --> 00:23:47,440
car proxies to do load balancing

00:23:44,559 --> 00:23:49,440
on behalf of a grpc client why not just

00:23:47,440 --> 00:23:50,720
have it configure the grpc client

00:23:49,440 --> 00:23:53,919
directly

00:23:50,720 --> 00:23:57,279
to make jr proxy list jrpc possible we

00:23:53,919 --> 00:23:59,760
continued to adhere to the open xds api

00:23:57,279 --> 00:24:00,400
and we added this xds api support to the

00:23:59,760 --> 00:24:03,679
most

00:24:00,400 --> 00:24:05,679
recent version of grpc the xts api is

00:24:03,679 --> 00:24:07,600
the same open source apis you use for

00:24:05,679 --> 00:24:08,880
envoy proxy which means you get a level

00:24:07,600 --> 00:24:11,440
of consistency

00:24:08,880 --> 00:24:14,880
for telco and edge we see three main use

00:24:11,440 --> 00:24:17,120
cases for the proxy list grpc approach

00:24:14,880 --> 00:24:19,360
simplified grpc adoption high

00:24:17,120 --> 00:24:20,640
performance services in a service mesh

00:24:19,360 --> 00:24:22,400
and bringing service mesh to

00:24:20,640 --> 00:24:25,039
environments where you cannot add a

00:24:22,400 --> 00:24:27,440
sidecar proxy

00:24:25,039 --> 00:24:28,240
in this example the service is deployed

00:24:27,440 --> 00:24:31,279
at the telco

00:24:28,240 --> 00:24:32,799
edge approximate grpc services actually

00:24:31,279 --> 00:24:33,440
there's one more interesting innovation

00:24:32,799 --> 00:24:35,840
to keep an

00:24:33,440 --> 00:24:37,120
eye on which is bringing programmability

00:24:35,840 --> 00:24:40,000
to the client and

00:24:37,120 --> 00:24:40,640
endpoint through envoy mobile and grpc

00:24:40,000 --> 00:24:43,279
web

00:24:40,640 --> 00:24:45,039
this will help create a true end to end

00:24:43,279 --> 00:24:47,120
stretching from the client to the edge

00:24:45,039 --> 00:24:50,400
to the cloud and and we continue to go

00:24:47,120 --> 00:24:52,480
and do more stuff in this area

00:24:50,400 --> 00:24:53,520
one more key use case of service mesh is

00:24:52,480 --> 00:24:56,080
cross cluster

00:24:53,520 --> 00:24:58,240
cross region and cross edge failover for

00:24:56,080 --> 00:24:59,840
tel point edge use cases

00:24:58,240 --> 00:25:01,600
now typically if you did this on your

00:24:59,840 --> 00:25:02,880
own this involves a lot of toil and

00:25:01,600 --> 00:25:04,640
setting this up

00:25:02,880 --> 00:25:07,120
to solve for this use case we built

00:25:04,640 --> 00:25:09,279
cross cluster cross region overflow

00:25:07,120 --> 00:25:10,640
and failover capabilities inherently

00:25:09,279 --> 00:25:13,279
into our service mesh

00:25:10,640 --> 00:25:14,000
through a service mesh control plane

00:25:13,279 --> 00:25:16,720
which is traffic

00:25:14,000 --> 00:25:18,799
director with these capabilities you can

00:25:16,720 --> 00:25:21,360
easily deploy a service with vm or

00:25:18,799 --> 00:25:23,440
container instances in multiple regions

00:25:21,360 --> 00:25:24,559
and also with endpoints in non-gcp

00:25:23,440 --> 00:25:26,400
locations

00:25:24,559 --> 00:25:29,039
now under normal conditions in the

00:25:26,400 --> 00:25:30,480
picture that you see traffic from iowa

00:25:29,039 --> 00:25:31,200
will flow through instances of the

00:25:30,480 --> 00:25:33,600
service

00:25:31,200 --> 00:25:35,600
in u.s central and from tokyo through

00:25:33,600 --> 00:25:37,440
those in asia southeast for every

00:25:35,600 --> 00:25:39,200
service which is your front end

00:25:37,440 --> 00:25:41,279
and then your cart and then your payment

00:25:39,200 --> 00:25:43,360
service

00:25:41,279 --> 00:25:44,720
now the front end service instances in

00:25:43,360 --> 00:25:47,440
the closest region

00:25:44,720 --> 00:25:49,120
to the end user have no capacity traffic

00:25:47,440 --> 00:25:50,400
will automatically shift over to the

00:25:49,120 --> 00:25:51,919
other region

00:25:50,400 --> 00:25:53,679
if for some reason if any of the

00:25:51,919 --> 00:25:54,960
services say like the payment micro

00:25:53,679 --> 00:25:56,880
service goes down

00:25:54,960 --> 00:25:58,480
then traffic automatically shifts to the

00:25:56,880 --> 00:26:01,120
other reason region to avoid

00:25:58,480 --> 00:26:02,480
outage this capability will be key to

00:26:01,120 --> 00:26:03,919
managing capacity

00:26:02,480 --> 00:26:06,240
at the edge because it's not as much

00:26:03,919 --> 00:26:07,760
capacity as say you have in the cloud

00:26:06,240 --> 00:26:10,400
and you have to be able to do these

00:26:07,760 --> 00:26:12,000
types of failovers as well as overflows

00:26:10,400 --> 00:26:13,679
and this is also very critical to

00:26:12,000 --> 00:26:16,880
guaranteeing the slas

00:26:13,679 --> 00:26:18,799
in the world of telco and edge

00:26:16,880 --> 00:26:20,400
now moving on from edge use cases to the

00:26:18,799 --> 00:26:22,720
core telco network

00:26:20,400 --> 00:26:24,799
the goal here is to help deliver capex

00:26:22,720 --> 00:26:27,520
and opex efficient network

00:26:24,799 --> 00:26:29,520
and make it ready for 5g by bringing in

00:26:27,520 --> 00:26:31,360
cloud native technologies including

00:26:29,520 --> 00:26:33,760
service mesh

00:26:31,360 --> 00:26:34,400
service mesh is a key paradigm for 5g

00:26:33,760 --> 00:26:37,279
core

00:26:34,400 --> 00:26:38,000
service based architecture service based

00:26:37,279 --> 00:26:40,400
architecture

00:26:38,000 --> 00:26:42,480
provides a modular framework from which

00:26:40,400 --> 00:26:43,919
common applications can be deployed

00:26:42,480 --> 00:26:45,840
using components from one or more

00:26:43,919 --> 00:26:48,080
providers so let's

00:26:45,840 --> 00:26:50,240
take it back to english speak one of the

00:26:48,080 --> 00:26:53,520
key components for deploying 5g is the

00:26:50,240 --> 00:26:54,720
5g packet core this is comprised of a 5g

00:26:53,520 --> 00:26:56,480
core control plane

00:26:54,720 --> 00:26:58,880
and data plate so what you see on the

00:26:56,480 --> 00:27:01,039
top is the control plane

00:26:58,880 --> 00:27:03,120
the 5g control plane itself is a set of

00:27:01,039 --> 00:27:05,520
network functions like amf and

00:27:03,120 --> 00:27:07,520
smf that communicate with each other

00:27:05,520 --> 00:27:09,200
through well-defined interfaces

00:27:07,520 --> 00:27:11,200
while we don't have enough time to get

00:27:09,200 --> 00:27:13,440
into the details of each service

00:27:11,200 --> 00:27:15,919
at a high level this control plane will

00:27:13,440 --> 00:27:18,399
with all of the alphabet super services

00:27:15,919 --> 00:27:20,240
can be deployed as a service mesh think

00:27:18,399 --> 00:27:22,240
of the network functions as services

00:27:20,240 --> 00:27:24,880
and the service based interface between

00:27:22,240 --> 00:27:27,600
them as service to service communication

00:27:24,880 --> 00:27:30,159
you can also deploy these as grpc proxy

00:27:27,600 --> 00:27:31,440
list services which we described earlier

00:27:30,159 --> 00:27:33,440
and this is to deliver the high

00:27:31,440 --> 00:27:35,440
performance or you can also deploy them

00:27:33,440 --> 00:27:37,279
with envoy side cars depending on your

00:27:35,440 --> 00:27:38,960
performance requirements

00:27:37,279 --> 00:27:40,799
you can then control these services with

00:27:38,960 --> 00:27:42,320
a service mesh control plane

00:27:40,799 --> 00:27:44,960
bringing all of the service mesh

00:27:42,320 --> 00:27:47,440
benefits of scaling traffic control

00:27:44,960 --> 00:27:48,000
security observability and more to the

00:27:47,440 --> 00:27:51,200
5g

00:27:48,000 --> 00:27:53,440
course service based architecture

00:27:51,200 --> 00:27:56,559
another key benefit for telco use cases

00:27:53,440 --> 00:27:58,240
is that envoy at its core is extensible

00:27:56,559 --> 00:28:00,640
you can basically write your very own

00:27:58,240 --> 00:28:03,360
extensions the envoy architecture

00:28:00,640 --> 00:28:05,039
makes its fairly easily extensible we

00:28:03,360 --> 00:28:05,440
have a variety of different extension

00:28:05,039 --> 00:28:08,080
types

00:28:05,440 --> 00:28:09,120
these include access loggers access

00:28:08,080 --> 00:28:11,600
block filters

00:28:09,120 --> 00:28:12,880
clusters listener filters network

00:28:11,600 --> 00:28:16,320
filters

00:28:12,880 --> 00:28:18,320
http filters grpc credential providers

00:28:16,320 --> 00:28:19,679
um health checkers there's also more

00:28:18,320 --> 00:28:21,840
recently uh

00:28:19,679 --> 00:28:23,760
all of the work around wasm and so on so

00:28:21,840 --> 00:28:25,840
forth so as an example

00:28:23,760 --> 00:28:26,960
one of our partners which is tetrad has

00:28:25,840 --> 00:28:29,520
an offering called get

00:28:26,960 --> 00:28:32,000
envoy which has a build pipeline

00:28:29,520 --> 00:28:34,000
accessible to do extensions building

00:28:32,000 --> 00:28:36,000
so what this pipeline does is it allows

00:28:34,000 --> 00:28:37,760
you to cherry pick the extension

00:28:36,000 --> 00:28:39,440
that really matters to you while you go

00:28:37,760 --> 00:28:42,480
build out the envoy build

00:28:39,440 --> 00:28:44,880
so this extensibility of envoy is really

00:28:42,480 --> 00:28:48,080
going to drive its adoption in telco

00:28:44,880 --> 00:28:48,080
and edge use cases

00:28:48,240 --> 00:28:52,000
now in addition to everything we

00:28:49,760 --> 00:28:52,399
discussed what are some of the service

00:28:52,000 --> 00:28:54,880
mesh

00:28:52,399 --> 00:28:57,440
innovations we can partner on to solve

00:28:54,880 --> 00:28:59,120
as an industry

00:28:57,440 --> 00:29:01,039
if you take a broader view of where we

00:28:59,120 --> 00:29:01,840
are as an industry we're just getting

00:29:01,039 --> 00:29:03,279
started

00:29:01,840 --> 00:29:05,919
and we have many things to solve

00:29:03,279 --> 00:29:06,960
together especially in the area of telco

00:29:05,919 --> 00:29:08,640
and edge

00:29:06,960 --> 00:29:10,880
while we are making great headway on

00:29:08,640 --> 00:29:12,559
creating consistent cloud native network

00:29:10,880 --> 00:29:14,559
and services platforms

00:29:12,559 --> 00:29:15,679
and evolving them for enterprise telco

00:29:14,559 --> 00:29:17,600
and edge

00:29:15,679 --> 00:29:18,720
we need to do much more to abstract our

00:29:17,600 --> 00:29:21,440
complexity

00:29:18,720 --> 00:29:22,320
and manage heterogeneity better for

00:29:21,440 --> 00:29:23,840
telco

00:29:22,320 --> 00:29:26,159
we need to get to the point where

00:29:23,840 --> 00:29:28,240
network services and slices

00:29:26,159 --> 00:29:29,840
automatically scale and optimize are

00:29:28,240 --> 00:29:33,360
proactively secure

00:29:29,840 --> 00:29:35,520
and effortless to administer and use

00:29:33,360 --> 00:29:37,679
take the effortless edge problem now

00:29:35,520 --> 00:29:39,600
basically the edge is distributed

00:29:37,679 --> 00:29:42,000
to harness the power of this distributed

00:29:39,600 --> 00:29:42,720
edge i as a telco or as a public cloud

00:29:42,000 --> 00:29:44,880
provider

00:29:42,720 --> 00:29:45,840
or even as an enterprise i should be

00:29:44,880 --> 00:29:48,960
able to leverage

00:29:45,840 --> 00:29:50,640
any of these edges in addition to my own

00:29:48,960 --> 00:29:52,720
based on my business and technical

00:29:50,640 --> 00:29:53,520
requirements and when i say any of these

00:29:52,720 --> 00:29:54,880
edges

00:29:53,520 --> 00:29:56,559
i'm generally referring to either

00:29:54,880 --> 00:29:58,880
putting something on

00:29:56,559 --> 00:30:00,159
an enterprise premises or in a factory

00:29:58,880 --> 00:30:02,159
or in a stadium

00:30:00,159 --> 00:30:04,320
or in a telco network edge or even

00:30:02,159 --> 00:30:06,399
google's edge which is our pops or in

00:30:04,320 --> 00:30:08,000
google cloud or

00:30:06,399 --> 00:30:10,720
which is why like it's a whole

00:30:08,000 --> 00:30:12,240
distributed global distributed edge and

00:30:10,720 --> 00:30:14,080
it's a continuum we should be able to

00:30:12,240 --> 00:30:15,840
use any of it

00:30:14,080 --> 00:30:17,760
i should also be able to move my service

00:30:15,840 --> 00:30:19,600
from an edge it is deployed at

00:30:17,760 --> 00:30:22,080
to another edge say to bring it closer

00:30:19,600 --> 00:30:23,919
to the end user or to lower cost i

00:30:22,080 --> 00:30:25,600
should also be able to deploy a service

00:30:23,919 --> 00:30:27,679
that spans multiple edges

00:30:25,600 --> 00:30:29,520
so take the case of machine learning

00:30:27,679 --> 00:30:31,120
where for my services i may do small

00:30:29,520 --> 00:30:32,080
amounts of processing on the user's

00:30:31,120 --> 00:30:34,640
device

00:30:32,080 --> 00:30:36,000
which then connects up to a telco edge

00:30:34,640 --> 00:30:38,799
for scrubbing which then

00:30:36,000 --> 00:30:40,080
connects up to google cloud to do

00:30:38,799 --> 00:30:43,120
machine learning

00:30:40,080 --> 00:30:44,720
at the google's edge i should also be

00:30:43,120 --> 00:30:47,120
able to change services which are

00:30:44,720 --> 00:30:49,200
deployed across a variety of edges

00:30:47,120 --> 00:30:50,960
so i can leverage best of breed services

00:30:49,200 --> 00:30:52,640
from a variety of providers

00:30:50,960 --> 00:30:54,240
for my end customers or to create a

00:30:52,640 --> 00:30:54,880
slice across the continuum and we'll

00:30:54,240 --> 00:30:57,200
talk a bit

00:30:54,880 --> 00:30:58,240
more about slicing and i should be able

00:30:57,200 --> 00:31:01,039
to do all of this

00:30:58,240 --> 00:31:02,480
as easily as possible without having to

00:31:01,039 --> 00:31:04,080
know where the edges are

00:31:02,480 --> 00:31:06,640
and without needing deep technical

00:31:04,080 --> 00:31:08,159
knowledge so we have bits and pieces

00:31:06,640 --> 00:31:09,519
that can actually help deliver a

00:31:08,159 --> 00:31:11,360
solution for this but

00:31:09,519 --> 00:31:13,519
we haven't really put together a

00:31:11,360 --> 00:31:15,760
full-blown solution as an industry

00:31:13,519 --> 00:31:17,440
which solves all of this problem so to

00:31:15,760 --> 00:31:18,720
make this happen for example i'll

00:31:17,440 --> 00:31:21,200
describe one

00:31:18,720 --> 00:31:23,600
example of what's needed we need a layer

00:31:21,200 --> 00:31:25,840
above the service mesh that allows users

00:31:23,600 --> 00:31:27,519
to specify desired outcomes for the

00:31:25,840 --> 00:31:30,000
end-to-end application

00:31:27,519 --> 00:31:32,159
um or service chains if you want to go a

00:31:30,000 --> 00:31:34,080
little bit lower in abstraction or

00:31:32,159 --> 00:31:36,880
workflows if your company is workflow

00:31:34,080 --> 00:31:39,200
oriented as well as placement policy so

00:31:36,880 --> 00:31:41,919
for example optimize for latency

00:31:39,200 --> 00:31:43,679
or optimize for cost and then this layer

00:31:41,919 --> 00:31:46,000
also orchestrates and connects the

00:31:43,679 --> 00:31:48,799
services and underlying infrastructure

00:31:46,000 --> 00:31:50,960
using service mesh and other open apis

00:31:48,799 --> 00:31:52,480
so we have a lot of work to do here

00:31:50,960 --> 00:31:56,159
but it's one of the most interesting

00:31:52,480 --> 00:31:58,000
areas to partner as an industry on

00:31:56,159 --> 00:32:00,080
another interesting problem to partner

00:31:58,000 --> 00:32:02,559
on is effortless network

00:32:00,080 --> 00:32:04,159
slicing at scale for telcos so you will

00:32:02,559 --> 00:32:05,200
hear a lot of talk around network

00:32:04,159 --> 00:32:07,760
slicing

00:32:05,200 --> 00:32:10,000
very simply from the end user all the

00:32:07,760 --> 00:32:12,399
way to the end of the application

00:32:10,000 --> 00:32:13,519
you want to create a slice at every

00:32:12,399 --> 00:32:14,480
layer whether it's the physical

00:32:13,519 --> 00:32:16,480
infrastructure

00:32:14,480 --> 00:32:18,000
all the way to the service layer where

00:32:16,480 --> 00:32:18,960
you're guaranteeing a certain set of

00:32:18,000 --> 00:32:21,039
parameters

00:32:18,960 --> 00:32:22,880
to that slice if you will that was

00:32:21,039 --> 00:32:24,320
created for that end user and that

00:32:22,880 --> 00:32:26,960
entire flow

00:32:24,320 --> 00:32:28,880
so network slicing is actually happening

00:32:26,960 --> 00:32:30,240
in experimental setups and at small

00:32:28,880 --> 00:32:32,240
limited scale

00:32:30,240 --> 00:32:33,519
but if you really want to monetize this

00:32:32,240 --> 00:32:35,120
infrastructure whether say let's say

00:32:33,519 --> 00:32:36,960
you're a telco or

00:32:35,120 --> 00:32:38,399
um you're somebody who's monetizing

00:32:36,960 --> 00:32:40,480
network slicing

00:32:38,399 --> 00:32:42,000
we are missing a few abstraction layers

00:32:40,480 --> 00:32:43,840
and i'll just describe one such

00:32:42,000 --> 00:32:46,159
capability there more

00:32:43,840 --> 00:32:47,120
it is the ability to treat everything as

00:32:46,159 --> 00:32:49,120
a service

00:32:47,120 --> 00:32:51,360
the absence of this is what is making

00:32:49,120 --> 00:32:54,320
network slicing more complicated

00:32:51,360 --> 00:32:56,000
uh than it needs to be so you can think

00:32:54,320 --> 00:32:58,399
of this almost as an evolution

00:32:56,000 --> 00:33:00,080
of the service mesh concept so it is

00:32:58,399 --> 00:33:02,399
possible today to treat

00:33:00,080 --> 00:33:04,080
for example entities in a service mesh

00:33:02,399 --> 00:33:06,159
easily as services

00:33:04,080 --> 00:33:07,120
but what about third-party opaque

00:33:06,159 --> 00:33:09,120
services or

00:33:07,120 --> 00:33:10,640
legacy services that sit outside the

00:33:09,120 --> 00:33:12,559
mesh

00:33:10,640 --> 00:33:15,279
so we need to extend the notion of a

00:33:12,559 --> 00:33:16,960
mesh to be more inclusive

00:33:15,279 --> 00:33:19,200
and in fact we've started to work on

00:33:16,960 --> 00:33:21,200
extending the service abstraction

00:33:19,200 --> 00:33:23,200
across all of these and adding

00:33:21,200 --> 00:33:25,200
capabilities with work via close working

00:33:23,200 --> 00:33:28,159
closely with telcos isvs

00:33:25,200 --> 00:33:29,840
partners other folks in the industry and

00:33:28,159 --> 00:33:32,720
we look forward to collaborating with

00:33:29,840 --> 00:33:34,640
all of you as well

00:33:32,720 --> 00:33:37,519
so service mesh is a key paradigm for

00:33:34,640 --> 00:33:39,279
solving many challenges for telco nh

00:33:37,519 --> 00:33:41,440
we discussed a few of the use cases

00:33:39,279 --> 00:33:44,080
today including traffic control

00:33:41,440 --> 00:33:46,159
pervasive security and observability a

00:33:44,080 --> 00:33:48,960
cross region failover and overflow

00:33:46,159 --> 00:33:50,480
multi-cluster multi-region multi-cloud

00:33:48,960 --> 00:33:52,559
and multi-year services

00:33:50,480 --> 00:33:54,320
we also discussed the cap crow drain for

00:33:52,559 --> 00:33:56,159
vm container migration

00:33:54,320 --> 00:33:59,200
and then we also took a quick look at

00:33:56,159 --> 00:34:02,480
the 5g core service based architecture

00:33:59,200 --> 00:34:04,159
obviously these are very very deep

00:34:02,480 --> 00:34:05,840
topics and we could essentially do a

00:34:04,159 --> 00:34:07,760
talk on each one of them

00:34:05,840 --> 00:34:10,399
and there are many many other use cases

00:34:07,760 --> 00:34:12,240
as well but the key thing i think is

00:34:10,399 --> 00:34:13,679
we need to remember that service mesh

00:34:12,240 --> 00:34:16,240
itself is

00:34:13,679 --> 00:34:18,480
and will need to continue to evolve as a

00:34:16,240 --> 00:34:20,960
paradigm to support telco edge and other

00:34:18,480 --> 00:34:22,800
new use cases and so in that we look

00:34:20,960 --> 00:34:24,879
forward to collaborating with all of you

00:34:22,800 --> 00:34:28,280
on service mesh evolution

00:34:24,879 --> 00:34:31,280
and innovation as well thank you

00:34:28,280 --> 00:34:31,280

YouTube URL: https://www.youtube.com/watch?v=N1VpEISePBo


