Title: Istio Service Mesh Simplified Beyond a Single Cluster - Lin Sun, IBM & Sven Mawson, Google
Publication date: 2020-12-03
Playlist: ServiceMeshCon North America 2020
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Istio Service Mesh Simplified Beyond a Single Cluster - Lin Sun, IBM & Sven Mawson, Google 

We have made numerous improvements to the Istio project over the past year to simplify the experience for users and operators in a single cluster. This year we have been focusing on improving the experience beyond a single cluster, simplifying multicluster deployment by merging the replicated control plane and shared control plane patterns. Within this unified multicluster pattern, users can choose a control plane and network topology based on their business needs and requirements. We have also been simplifying Istio's usage beyond containers, making it easier for users to securely onboard VMs into the service mesh. In this talk, we will be demoing the new and improved experience for using Istio with multiple clusters and expanding the mesh to VMs.
Captions: 
	00:00:00,000 --> 00:00:03,199
hi folks today we're going to talk about

00:00:02,639 --> 00:00:06,720
skill

00:00:03,199 --> 00:00:09,840
service mesh simplified beyond a single

00:00:06,720 --> 00:00:11,120
cluster my name is linsa i'm a senior

00:00:09,840 --> 00:00:14,639
technical staff member

00:00:11,120 --> 00:00:18,640
at ibm i'm also a contributor to the

00:00:14,639 --> 00:00:18,640
istio project uh savann

00:00:19,279 --> 00:00:23,920
you are introducing hi i'm awesome i'm a

00:00:24,080 --> 00:00:29,519
yes sorry a little lag there uh i'm

00:00:27,279 --> 00:00:31,039
sven mawson i'm a principal engineer at

00:00:29,519 --> 00:00:33,520
google working on

00:00:31,039 --> 00:00:36,480
istio and related service mesh

00:00:33,520 --> 00:00:36,480
technologies at google

00:00:39,760 --> 00:00:43,360
so we're going to talk about istio

00:00:42,320 --> 00:00:46,079
simplified

00:00:43,360 --> 00:00:46,480
on single cluster a lot of work we have

00:00:46,079 --> 00:00:48,640
done

00:00:46,480 --> 00:00:49,840
in this area and then we're going to

00:00:48,640 --> 00:00:53,760
dive into

00:00:49,840 --> 00:00:55,840
the background multi-cluster and then

00:00:53,760 --> 00:00:57,520
we're going to show you some of the work

00:00:55,840 --> 00:00:58,320
we're working on together in the

00:00:57,520 --> 00:01:00,719
community

00:00:58,320 --> 00:01:01,840
uh how we simplify multi-cluster

00:01:00,719 --> 00:01:04,720
experience

00:01:01,840 --> 00:01:06,479
for a user and we're going to give you a

00:01:04,720 --> 00:01:08,479
really interesting demo

00:01:06,479 --> 00:01:10,560
and then we're going to pass on to talk

00:01:08,479 --> 00:01:13,600
about what if you're running

00:01:10,560 --> 00:01:16,159
on vms running your service some vms

00:01:13,600 --> 00:01:19,040
how will simplify your experience in

00:01:16,159 --> 00:01:19,040
that scenario

00:01:20,400 --> 00:01:26,799
so i don't know if you guys uh talk uh

00:01:23,520 --> 00:01:29,439
listen to our talk from louis

00:01:26,799 --> 00:01:30,479
and the steve about it's still

00:01:29,439 --> 00:01:34,159
simplified

00:01:30,479 --> 00:01:37,280
on servicemeshcon europe early this year

00:01:34,159 --> 00:01:37,680
so essentially uh to summarize uh that

00:01:37,280 --> 00:01:40,960
app

00:01:37,680 --> 00:01:44,479
uh just give you guys a background um

00:01:40,960 --> 00:01:45,200
we have done a lot of work in the istio

00:01:44,479 --> 00:01:48,560
community

00:01:45,200 --> 00:01:51,759
to simplify istio itself

00:01:48,560 --> 00:01:53,360
um so first the mixer goes away well the

00:01:51,759 --> 00:01:56,479
mixer functionality

00:01:53,360 --> 00:01:59,920
folded into the cycle proxy

00:01:56,479 --> 00:02:00,560
we have the injection system again the

00:01:59,920 --> 00:02:03,280
config

00:02:00,560 --> 00:02:04,240
config system goes away and that

00:02:03,280 --> 00:02:07,920
function folded

00:02:04,240 --> 00:02:09,280
into pilot we have the cyca injector is

00:02:07,920 --> 00:02:12,720
also folded into

00:02:09,280 --> 00:02:15,840
pilot and the last we also have the node

00:02:12,720 --> 00:02:18,959
agent folded into our pilot

00:02:15,840 --> 00:02:21,360
agent so that you don't need a set of

00:02:18,959 --> 00:02:24,400
parts security policies

00:02:21,360 --> 00:02:27,440
we also have a citadel function folded

00:02:24,400 --> 00:02:31,519
into pilot so pilot is becoming

00:02:27,440 --> 00:02:34,560
hcld where the d stands for daemon

00:02:31,519 --> 00:02:38,160
and it really helps our

00:02:34,560 --> 00:02:40,319
operators who runs istio control plane

00:02:38,160 --> 00:02:43,440
because they only have to

00:02:40,319 --> 00:02:46,080
worry about one single components um

00:02:43,440 --> 00:02:50,720
so great simplification work done by the

00:02:46,080 --> 00:02:53,840
community for the single cluster

00:02:50,720 --> 00:02:57,680
um some of you might have already set up

00:02:53,840 --> 00:03:00,879
a multi-cluster with istio mesh

00:02:57,680 --> 00:03:03,599
and i if you do i guarantee you

00:03:00,879 --> 00:03:05,680
you're probably very confused on why are

00:03:03,599 --> 00:03:08,000
we having two models

00:03:05,680 --> 00:03:09,599
we have this model called replicate

00:03:08,000 --> 00:03:12,400
control plane which is

00:03:09,599 --> 00:03:13,040
uh what's on the left side uh a lot of

00:03:12,400 --> 00:03:15,120
users are

00:03:13,040 --> 00:03:16,319
actually very interested in their model

00:03:15,120 --> 00:03:19,360
because they have

00:03:16,319 --> 00:03:22,080
this model provides high availability

00:03:19,360 --> 00:03:23,920
on the control plane so you could have a

00:03:22,080 --> 00:03:27,200
istio control plane running

00:03:23,920 --> 00:03:28,560
in cluster one and cluster two and you

00:03:27,200 --> 00:03:31,680
could selectively

00:03:28,560 --> 00:03:34,640
expose what other services services

00:03:31,680 --> 00:03:35,280
you want to expose to the other cluster

00:03:34,640 --> 00:03:38,080
instead of

00:03:35,280 --> 00:03:40,000
everything together we also have another

00:03:38,080 --> 00:03:40,480
interesting model on the right side

00:03:40,000 --> 00:03:43,920
called

00:03:40,480 --> 00:03:46,319
shell control plane model which means

00:03:43,920 --> 00:03:47,120
two of the cluster are actually using

00:03:46,319 --> 00:03:50,480
one

00:03:47,120 --> 00:03:53,360
istio control plane and in this case

00:03:50,480 --> 00:03:54,319
all the services are shared among the

00:03:53,360 --> 00:03:56,640
clusters

00:03:54,319 --> 00:03:59,200
so there's a lot of confusing to your

00:03:56,640 --> 00:04:01,920
user uh you know which one should i use

00:03:59,200 --> 00:04:02,640
why we have to you know why some

00:04:01,920 --> 00:04:05,920
requires

00:04:02,640 --> 00:04:09,120
uh core dns setup the other one doesn't

00:04:05,920 --> 00:04:11,599
require why the other one doesn't allow

00:04:09,120 --> 00:04:14,480
users to selectively choose what they

00:04:11,599 --> 00:04:17,759
are exposing to the other cluster

00:04:14,480 --> 00:04:18,239
so a lot of confusing in this the good

00:04:17,759 --> 00:04:21,280
news

00:04:18,239 --> 00:04:24,320
is we are taking a lot of effort

00:04:21,280 --> 00:04:26,160
in the community to unify the istio

00:04:24,320 --> 00:04:29,520
multi-cluster model

00:04:26,160 --> 00:04:32,479
so with this new model um if you have

00:04:29,520 --> 00:04:33,440
two cluster like what's the diagram

00:04:32,479 --> 00:04:36,400
shows

00:04:33,440 --> 00:04:37,680
um you would be thinking about um based

00:04:36,400 --> 00:04:39,600
on your requirement

00:04:37,680 --> 00:04:41,280
whether you are going to need to run

00:04:39,600 --> 00:04:44,560
sdod

00:04:41,280 --> 00:04:47,759
on just one cluster or whether you run

00:04:44,560 --> 00:04:49,040
sdod also for high availability of your

00:04:47,759 --> 00:04:51,840
control plane

00:04:49,040 --> 00:04:52,240
um on the second cluster so it's up to

00:04:51,840 --> 00:04:56,000
you

00:04:52,240 --> 00:04:58,400
as a choice um you can also choose

00:04:56,000 --> 00:04:59,120
to run uh whether you're on ingress

00:04:58,400 --> 00:05:02,000
gateway

00:04:59,120 --> 00:05:03,440
um both cluster or just running it on

00:05:02,000 --> 00:05:06,639
your primary cluster

00:05:03,440 --> 00:05:07,600
so that's also a choice uh to you based

00:05:06,639 --> 00:05:10,160
on

00:05:07,600 --> 00:05:11,840
your control plane model and also based

00:05:10,160 --> 00:05:14,720
on your network model

00:05:11,840 --> 00:05:15,520
topologies and then finally you can also

00:05:14,720 --> 00:05:17,840
choose

00:05:15,520 --> 00:05:19,280
for the services on your data plane you

00:05:17,840 --> 00:05:22,160
can choose

00:05:19,280 --> 00:05:23,600
what services are you exposing to the

00:05:22,160 --> 00:05:26,880
other clusters

00:05:23,600 --> 00:05:29,520
and you can also uh based on your needs

00:05:26,880 --> 00:05:33,199
to create the mirror for the services

00:05:29,520 --> 00:05:38,240
as needed seven

00:05:33,199 --> 00:05:41,759
can you take over this

00:05:38,240 --> 00:05:43,280
um so lynn talked about some of these

00:05:41,759 --> 00:05:44,880
choices already but

00:05:43,280 --> 00:05:46,400
basically we're trying to have a unified

00:05:44,880 --> 00:05:48,880
model here where

00:05:46,400 --> 00:05:49,520
you as the user you know are are in

00:05:48,880 --> 00:05:52,560
charge of

00:05:49,520 --> 00:05:54,000
of what control planes you run so

00:05:52,560 --> 00:05:56,000
for each cluster do you want to run a

00:05:54,000 --> 00:05:58,720
control plane in it for availability

00:05:56,000 --> 00:05:59,039
and redundancy or do you want to use you

00:05:58,720 --> 00:06:00,800
know

00:05:59,039 --> 00:06:03,280
fewer control planes so you have less to

00:06:00,800 --> 00:06:05,520
manage and use remote control planes

00:06:03,280 --> 00:06:06,880
um the network choices usually aren't

00:06:05,520 --> 00:06:09,360
really up to you it depends on your

00:06:06,880 --> 00:06:11,120
network topology but istio works with

00:06:09,360 --> 00:06:13,120
kind of whatever network topology you

00:06:11,120 --> 00:06:14,400
have um whether everything is on one

00:06:13,120 --> 00:06:16,000
network and is reachable

00:06:14,400 --> 00:06:18,400
all the pods can reach each other or if

00:06:16,000 --> 00:06:20,639
you need to go through some gateways

00:06:18,400 --> 00:06:22,560
um and as lynn mentioned you can also

00:06:20,639 --> 00:06:24,160
choose which services become visible to

00:06:22,560 --> 00:06:26,639
other clusters

00:06:24,160 --> 00:06:28,400
um and then there's also the sort of

00:06:26,639 --> 00:06:29,360
notions of identity and trust within the

00:06:28,400 --> 00:06:32,880
mesh

00:06:29,360 --> 00:06:34,639
where the um different

00:06:32,880 --> 00:06:36,960
cas in the mesh with their different

00:06:34,639 --> 00:06:40,080
routes um all come together and

00:06:36,960 --> 00:06:42,319
trust each other and so within the mesh

00:06:40,080 --> 00:06:44,319
you can talk um from one pod to another

00:06:42,319 --> 00:06:46,479
and and everything works

00:06:44,319 --> 00:06:48,000
um you can also set up federated trust

00:06:46,479 --> 00:06:51,360
between meshes so you can have multiple

00:06:48,000 --> 00:06:53,120
meshes that talk to each other we also

00:06:51,360 --> 00:06:54,639
talk in our multi-cluster model a lot

00:06:53,120 --> 00:06:56,400
about tenancy models and

00:06:54,639 --> 00:06:57,680
istio really supports two different

00:06:56,400 --> 00:06:59,919
models here

00:06:57,680 --> 00:07:01,599
one is kind of a namespace tenancy model

00:06:59,919 --> 00:07:03,919
where you don't worry as much about

00:07:01,599 --> 00:07:05,039
clusters and it's really just the

00:07:03,919 --> 00:07:07,599
namespace name

00:07:05,039 --> 00:07:10,000
determines sort of the team name and

00:07:07,599 --> 00:07:11,919
that's kind of the the built-in model

00:07:10,000 --> 00:07:13,440
where names are treated the same if

00:07:11,919 --> 00:07:15,680
they're in the same name space

00:07:13,440 --> 00:07:17,680
but you can also use clusters as your

00:07:15,680 --> 00:07:19,440
tenancy model where maybe one team owns

00:07:17,680 --> 00:07:21,039
a particular cluster

00:07:19,440 --> 00:07:22,560
we recommend even if you do that that

00:07:21,039 --> 00:07:24,319
you do actually still split out

00:07:22,560 --> 00:07:25,840
namespaces and make sure namespaces are

00:07:24,319 --> 00:07:29,039
unique

00:07:25,840 --> 00:07:30,960
um so just a little bit more detail on

00:07:29,039 --> 00:07:32,720
kind of the the first two things the

00:07:30,960 --> 00:07:35,199
control planes and the networks

00:07:32,720 --> 00:07:35,919
um so control planes it's really your

00:07:35,199 --> 00:07:37,599
choice right

00:07:35,919 --> 00:07:39,120
where do you want to install a control

00:07:37,599 --> 00:07:41,280
plane um

00:07:39,120 --> 00:07:42,800
you can install you know a control plane

00:07:41,280 --> 00:07:44,479
in each cluster and those are sort of

00:07:42,800 --> 00:07:46,160
known as primary clusters

00:07:44,479 --> 00:07:47,759
you can also choose not to install a

00:07:46,160 --> 00:07:49,680
control plane and just

00:07:47,759 --> 00:07:51,759
have a cluster that is a remote to some

00:07:49,680 --> 00:07:53,840
other um control plane

00:07:51,759 --> 00:07:55,680
and you just set that up as part of

00:07:53,840 --> 00:07:57,520
installing histo as part of our guides

00:07:55,680 --> 00:08:00,720
you choose this cluster as a remote and

00:07:57,520 --> 00:08:03,520
it's remote to this particular primary

00:08:00,720 --> 00:08:04,960
so it's really your choice you recommend

00:08:03,520 --> 00:08:06,960
that you have

00:08:04,960 --> 00:08:08,800
enough primary clusters that you have

00:08:06,960 --> 00:08:13,120
the availability that you need

00:08:08,800 --> 00:08:14,560
so usually at least one per region

00:08:13,120 --> 00:08:16,400
there's another model that actually

00:08:14,560 --> 00:08:18,400
recently has

00:08:16,400 --> 00:08:20,319
been coming out of the studio community

00:08:18,400 --> 00:08:21,360
which is this notion of external control

00:08:20,319 --> 00:08:24,160
planes

00:08:21,360 --> 00:08:25,199
and so when you have that remote cluster

00:08:24,160 --> 00:08:27,520
it's remote to some

00:08:25,199 --> 00:08:28,720
control plane that control plane doesn't

00:08:27,520 --> 00:08:30,639
actually need to run

00:08:28,720 --> 00:08:32,399
in one of your clusters it can run

00:08:30,639 --> 00:08:34,000
outside it can be a vendor provided

00:08:32,399 --> 00:08:37,599
control plane it can be one

00:08:34,000 --> 00:08:39,360
that a platform team is running for

00:08:37,599 --> 00:08:40,800
teams within your organization however

00:08:39,360 --> 00:08:43,599
you want to set it up

00:08:40,800 --> 00:08:45,120
but this lets you separate the

00:08:43,599 --> 00:08:46,560
management of the mesh from the

00:08:45,120 --> 00:08:48,160
management of the control plane

00:08:46,560 --> 00:08:49,839
and basically all your clusters become

00:08:48,160 --> 00:08:53,360
remote clusters to

00:08:49,839 --> 00:08:55,920
these external control planes

00:08:53,360 --> 00:08:57,680
um the network side as i mentioned istio

00:08:55,920 --> 00:08:58,560
supports kind of whatever network setup

00:08:57,680 --> 00:09:01,120
you have

00:08:58,560 --> 00:09:02,959
um and the way we do this is when you're

00:09:01,120 --> 00:09:04,959
within the same network

00:09:02,959 --> 00:09:06,160
um where pods can just talk to each

00:09:04,959 --> 00:09:08,080
other they'll just talk to each other

00:09:06,160 --> 00:09:09,680
and they'll call directly

00:09:08,080 --> 00:09:11,200
and again you can run you know multiple

00:09:09,680 --> 00:09:12,959
control planes you can run a primary

00:09:11,200 --> 00:09:14,880
remote however you want to set it up

00:09:12,959 --> 00:09:16,080
but we also support multiple networks

00:09:14,880 --> 00:09:18,399
where you want to run

00:09:16,080 --> 00:09:19,839
istio on a different network in a

00:09:18,399 --> 00:09:21,519
cluster on a different network

00:09:19,839 --> 00:09:22,800
but you want those all to be one mesh

00:09:21,519 --> 00:09:23,680
and the way we do this is we use

00:09:22,800 --> 00:09:25,200
gateways

00:09:23,680 --> 00:09:26,959
so you have gateways that can talk to

00:09:25,200 --> 00:09:28,399
each other and we tunnel the traffic

00:09:26,959 --> 00:09:30,720
through those gateways

00:09:28,399 --> 00:09:32,720
so to the applications they don't need

00:09:30,720 --> 00:09:34,160
to worry or care

00:09:32,720 --> 00:09:35,440
where they're running if they're in a

00:09:34,160 --> 00:09:36,720
different network than some service

00:09:35,440 --> 00:09:38,720
they're calling

00:09:36,720 --> 00:09:41,519
they just call the service and istio

00:09:38,720 --> 00:09:41,519
makes it all work

00:09:41,920 --> 00:09:45,120
um so lynn is actually going to talk

00:09:43,680 --> 00:09:48,000
through

00:09:45,120 --> 00:09:50,880
the sort of four base scenarios that we

00:09:48,000 --> 00:09:54,399
have documented on the istio

00:09:50,880 --> 00:09:57,200
website so go ahead lin

00:09:54,399 --> 00:09:58,000
okay great thank you savanne so let's

00:09:57,200 --> 00:10:01,120
talk about

00:09:58,000 --> 00:10:02,000
different topology models we have so in

00:10:01,120 --> 00:10:05,040
this one

00:10:02,000 --> 00:10:08,240
is multi-primary

00:10:05,040 --> 00:10:11,279
same network so the first step you do

00:10:08,240 --> 00:10:14,720
is install istio onto

00:10:11,279 --> 00:10:17,519
each of your cluster and notice here

00:10:14,720 --> 00:10:18,880
on the second cluster you want to make

00:10:17,519 --> 00:10:21,920
sure you have the right

00:10:18,880 --> 00:10:24,000
cluster name and network uh

00:10:21,920 --> 00:10:25,040
it's the same and the main thing is the

00:10:24,000 --> 00:10:27,279
cluster name

00:10:25,040 --> 00:10:29,120
and then the second thing is uh create

00:10:27,279 --> 00:10:33,120
the remote secret

00:10:29,120 --> 00:10:36,240
so that uh it can do endpoint discovery

00:10:33,120 --> 00:10:38,399
for the remote cluster

00:10:36,240 --> 00:10:40,079
and the way you do it is using create

00:10:38,399 --> 00:10:42,880
remote secret command

00:10:40,079 --> 00:10:44,000
um so that was it at the the same

00:10:42,880 --> 00:10:47,279
network was

00:10:44,000 --> 00:10:48,720
really simple if you do have a multiple

00:10:47,279 --> 00:10:51,279
network and you do want

00:10:48,720 --> 00:10:53,440
a multiple primary for high availability

00:10:51,279 --> 00:10:56,000
of your control plane in this case

00:10:53,440 --> 00:10:56,959
similarly as the previous you do is

00:10:56,000 --> 00:11:00,000
still

00:10:56,959 --> 00:11:03,519
install istio when you do remote

00:11:00,000 --> 00:11:05,360
uh service create remote secret you want

00:11:03,519 --> 00:11:08,320
to do it on both of the

00:11:05,360 --> 00:11:09,040
clusters uh so make sure the endpoints

00:11:08,320 --> 00:11:12,800
can watch

00:11:09,040 --> 00:11:14,800
the other clusters api server and then

00:11:12,800 --> 00:11:17,040
you want to make sure you are setting up

00:11:14,800 --> 00:11:20,399
the east and west gateway

00:11:17,040 --> 00:11:22,160
uh to help you bridge on the network so

00:11:20,399 --> 00:11:23,120
that the traffic can download through

00:11:22,160 --> 00:11:26,959
the gateway

00:11:23,120 --> 00:11:29,839
and reach the other cluster um

00:11:26,959 --> 00:11:31,519
the last step is you want to also expose

00:11:29,839 --> 00:11:34,399
your user services

00:11:31,519 --> 00:11:34,800
uh to make sure you know service a can

00:11:34,399 --> 00:11:38,079
be

00:11:34,800 --> 00:11:41,680
uh can reach out to talk to service b

00:11:38,079 --> 00:11:42,560
so um we we provide samples to allow you

00:11:41,680 --> 00:11:44,959
to

00:11:42,560 --> 00:11:45,839
by default i think it exposes all the

00:11:44,959 --> 00:11:48,720
services out

00:11:45,839 --> 00:11:50,639
on the gateway but you could potentially

00:11:48,720 --> 00:11:52,800
tune that to based on your business

00:11:50,639 --> 00:11:56,480
needs

00:11:52,800 --> 00:11:59,839
uh the third mod model we have is uh

00:11:56,480 --> 00:12:02,800
you run primary and remote uh to

00:11:59,839 --> 00:12:05,839
the same with the same network in this

00:12:02,800 --> 00:12:06,240
case uh similar as the previous one you

00:12:05,839 --> 00:12:10,160
would

00:12:06,240 --> 00:12:11,839
install istio on the primary cluster uh

00:12:10,160 --> 00:12:14,639
notice here we just install

00:12:11,839 --> 00:12:16,800
is still on only one of the clustered

00:12:14,639 --> 00:12:19,360
which we call primary cluster

00:12:16,800 --> 00:12:21,360
and the second cluster which is using

00:12:19,360 --> 00:12:23,920
the control plane from the first

00:12:21,360 --> 00:12:24,880
cluster and then you would also the

00:12:23,920 --> 00:12:28,000
second step is

00:12:24,880 --> 00:12:30,720
set up the cluster two secret

00:12:28,000 --> 00:12:31,839
on the primary cluster one so that you

00:12:30,720 --> 00:12:35,040
can make sure

00:12:31,839 --> 00:12:39,040
the seodcam discovery uh

00:12:35,040 --> 00:12:41,120
endpoints are for uh endpoints on the

00:12:39,040 --> 00:12:43,760
cluster two

00:12:41,120 --> 00:12:44,800
the third step is to set up the easter

00:12:43,760 --> 00:12:48,000
west gateway

00:12:44,800 --> 00:12:48,480
to help traffic communication in this

00:12:48,000 --> 00:12:51,279
case

00:12:48,480 --> 00:12:52,000
uh you can see it also helps our service

00:12:51,279 --> 00:12:54,800
be

00:12:52,000 --> 00:12:55,279
to reach our back to is your control

00:12:54,800 --> 00:12:58,959
plane

00:12:55,279 --> 00:13:01,920
on the primary cluster um

00:12:58,959 --> 00:13:03,440
the fourth step is it exposes issue d on

00:13:01,920 --> 00:13:05,760
the gateway sorry i said a little bit

00:13:03,440 --> 00:13:06,399
earlier yeah that was for the purpose of

00:13:05,760 --> 00:13:09,440
service b

00:13:06,399 --> 00:13:10,959
to reach out to sdod because it's in the

00:13:09,440 --> 00:13:13,519
same network in this case

00:13:10,959 --> 00:13:16,000
our service a and service b are actually

00:13:13,519 --> 00:13:18,839
communicate to each other directly

00:13:16,000 --> 00:13:20,079
without the needing to hop through the

00:13:18,839 --> 00:13:22,880
gateway

00:13:20,079 --> 00:13:23,360
um the last but not the least model we

00:13:22,880 --> 00:13:26,720
have

00:13:23,360 --> 00:13:30,320
is primary remote uh mlt

00:13:26,720 --> 00:13:33,839
networks in this case uh you install

00:13:30,320 --> 00:13:35,120
sdod only on the primary cluster same as

00:13:33,839 --> 00:13:37,839
the previous one

00:13:35,120 --> 00:13:38,480
and same as previous one you create this

00:13:37,839 --> 00:13:41,760
uh

00:13:38,480 --> 00:13:43,519
the cluster 2 secret on cluster 1 for

00:13:41,760 --> 00:13:45,920
endpoint discoveries

00:13:43,519 --> 00:13:48,079
and then you set up the istio and west

00:13:45,920 --> 00:13:51,120
gateway uh same as the

00:13:48,079 --> 00:13:51,519
the previous one the fourth one step

00:13:51,120 --> 00:13:54,320
four

00:13:51,519 --> 00:13:54,800
it exposed is your d on the gateway it's

00:13:54,320 --> 00:13:57,519
also

00:13:54,800 --> 00:13:58,560
same but you do have to do one

00:13:57,519 --> 00:14:01,680
additional step

00:13:58,560 --> 00:14:03,680
on step five to expose your user

00:14:01,680 --> 00:14:06,560
services this is because

00:14:03,680 --> 00:14:08,560
your user service a and service bui is

00:14:06,560 --> 00:14:10,959
not going to be able to talk to each

00:14:08,560 --> 00:14:11,920
other directly because you have multiple

00:14:10,959 --> 00:14:14,560
networks

00:14:11,920 --> 00:14:16,959
so it has to go through the gateway so

00:14:14,560 --> 00:14:20,160
you want to make sure your services

00:14:16,959 --> 00:14:22,720
are exposed on the gateway for

00:14:20,160 --> 00:14:26,160
the other for services from the other

00:14:22,720 --> 00:14:26,160
cluster to consume

00:14:26,480 --> 00:14:30,480
so what's really nice about these models

00:14:29,279 --> 00:14:33,120
as you can see

00:14:30,480 --> 00:14:33,760
is they are like building blocks right

00:14:33,120 --> 00:14:36,800
you can

00:14:33,760 --> 00:14:39,440
based on your requirements

00:14:36,800 --> 00:14:40,639
and your needs and you choose the

00:14:39,440 --> 00:14:44,000
building blocks

00:14:40,639 --> 00:14:47,279
that's needed to to fix your

00:14:44,000 --> 00:14:49,920
requirements so with that we are going

00:14:47,279 --> 00:14:52,959
to be very excited to talk to you guys

00:14:49,920 --> 00:14:53,680
about our demo gosh i've never set up

00:14:52,959 --> 00:14:56,959
something

00:14:53,680 --> 00:14:59,839
um across different clouds so we

00:14:56,959 --> 00:15:03,120
actually have uh four clusters

00:14:59,839 --> 00:15:07,199
on the left side we have two clusters uh

00:15:03,120 --> 00:15:08,720
cluster y um with uh and cluster 2i on

00:15:07,199 --> 00:15:12,639
ibm cloud

00:15:08,720 --> 00:15:16,240
in this uh setup um on the left side

00:15:12,639 --> 00:15:19,120
i believe they are primary

00:15:16,240 --> 00:15:21,120
multiple multiple primary and they are

00:15:19,120 --> 00:15:23,680
also multiple

00:15:21,120 --> 00:15:25,680
networks because we don't have flat

00:15:23,680 --> 00:15:28,079
networks on our cloud

00:15:25,680 --> 00:15:29,759
so this is one of the model we talked

00:15:28,079 --> 00:15:33,199
about um

00:15:29,759 --> 00:15:36,320
on the right side um savann has set up

00:15:33,199 --> 00:15:36,800
two clusters on google cloud and in this

00:15:36,320 --> 00:15:39,680
case

00:15:36,800 --> 00:15:40,639
i noticed we only have sdod running on

00:15:39,680 --> 00:15:43,600
cluster one

00:15:40,639 --> 00:15:44,399
and there's no seod on cluster two so

00:15:43,600 --> 00:15:47,680
this is a

00:15:44,399 --> 00:15:49,279
primary remote and i believe uh this is

00:15:47,680 --> 00:15:52,079
the same network uh

00:15:49,279 --> 00:15:54,720
in his environment so you can see where

00:15:52,079 --> 00:15:56,959
experimental different topologies

00:15:54,720 --> 00:15:58,639
across different clouds and we're

00:15:56,959 --> 00:16:01,920
setting up the same

00:15:58,639 --> 00:16:03,279
um the single mesh among these four

00:16:01,920 --> 00:16:06,240
clusters

00:16:03,279 --> 00:16:08,000
from our application point of view the

00:16:06,240 --> 00:16:11,040
purpose is to show you guys

00:16:08,000 --> 00:16:11,519
the multi-cluster topology so we decided

00:16:11,040 --> 00:16:14,720
to use

00:16:11,519 --> 00:16:15,279
really simple book info examples as you

00:16:14,720 --> 00:16:17,839
can see

00:16:15,279 --> 00:16:18,320
we have product page and review version

00:16:17,839 --> 00:16:21,600
one

00:16:18,320 --> 00:16:23,759
running on cluster one i and then we

00:16:21,600 --> 00:16:26,880
have

00:16:23,759 --> 00:16:29,040
review version 2 running on 2i

00:16:26,880 --> 00:16:30,560
and review version 3 have high

00:16:29,040 --> 00:16:34,399
availability running

00:16:30,560 --> 00:16:37,680
on google cloud with cluster 1 and 2.

00:16:34,399 --> 00:16:39,519
with that um i'm going to go ahead share

00:16:37,680 --> 00:16:50,240
my screen

00:16:39,519 --> 00:16:53,199
and uh and show you guys the demo

00:16:50,240 --> 00:16:53,759
so we would like to show you um our demo

00:16:53,199 --> 00:16:57,920
now

00:16:53,759 --> 00:16:59,360
uh so istio.io go to multi-cluster

00:16:57,920 --> 00:17:02,399
installation

00:16:59,360 --> 00:17:02,399
to set up

00:17:02,839 --> 00:17:06,880
multi-clusters um the first thing we are

00:17:05,919 --> 00:17:10,000
looking at

00:17:06,880 --> 00:17:13,120
is um config trust um

00:17:10,000 --> 00:17:17,199
so we want to make sure all the clusters

00:17:13,120 --> 00:17:19,360
are using the same root ca

00:17:17,199 --> 00:17:21,120
and each of the cluster would plug in

00:17:19,360 --> 00:17:24,559
the intermediate ca

00:17:21,120 --> 00:17:27,600
which this common uh root of trust

00:17:24,559 --> 00:17:30,160
on my environment i already have um

00:17:27,600 --> 00:17:32,080
all the certificates and keys created

00:17:30,160 --> 00:17:35,360
for each of the cluster

00:17:32,080 --> 00:17:38,799
now i'm just creating the ca

00:17:35,360 --> 00:17:42,559
search in istio system namespace

00:17:38,799 --> 00:17:42,559
for two of the clusters

00:17:43,600 --> 00:17:47,120
so the way it still works is if you plug

00:17:46,480 --> 00:17:49,360
in

00:17:47,120 --> 00:17:52,000
your own key and search you need to make

00:17:49,360 --> 00:17:55,679
sure it's named the ca search

00:17:52,000 --> 00:17:59,360
so that essentially tells issue not to

00:17:55,679 --> 00:18:04,640
generate self-signed key and certificate

00:17:59,360 --> 00:18:04,640
now i'm installing uh istio um

00:18:05,520 --> 00:18:11,039
issue on this cluster now and this is my

00:18:08,799 --> 00:18:14,240
configuration yamo you can see i'm

00:18:11,039 --> 00:18:15,039
installing a primary cluster in this

00:18:14,240 --> 00:18:18,160
environment

00:18:15,039 --> 00:18:21,280
with my network and my cluster name

00:18:18,160 --> 00:18:23,679
and on to the next cluster to ui

00:18:21,280 --> 00:18:25,440
seminar plan except i'm having a

00:18:23,679 --> 00:18:28,640
different cluster name

00:18:25,440 --> 00:18:29,600
and a different network name so let's go

00:18:28,640 --> 00:18:33,520
ahead and

00:18:29,600 --> 00:18:33,520
install that as well

00:18:39,760 --> 00:18:43,280
so this basically installs uh the

00:18:42,559 --> 00:18:46,080
default

00:18:43,280 --> 00:18:46,640
profile of the istio which you can see

00:18:46,080 --> 00:18:49,120
it's

00:18:46,640 --> 00:18:50,480
it's essentially just the ingress

00:18:49,120 --> 00:18:53,039
gateway

00:18:50,480 --> 00:18:53,919
that comes with the default and also the

00:18:53,039 --> 00:18:56,240
icod

00:18:53,919 --> 00:18:58,240
control plane we talked about earlier

00:18:56,240 --> 00:18:59,280
we're down to one single control plane

00:18:58,240 --> 00:19:01,919
components uh

00:18:59,280 --> 00:19:01,919
istio d

00:19:02,799 --> 00:19:07,520
so now we're looking at what next should

00:19:05,600 --> 00:19:10,640
we be setting up

00:19:07,520 --> 00:19:13,320
in this environment so

00:19:10,640 --> 00:19:14,880
the model we're installing is a

00:19:13,320 --> 00:19:17,120
multi-primary

00:19:14,880 --> 00:19:18,160
different networks so we're going to

00:19:17,120 --> 00:19:20,240
need to set up

00:19:18,160 --> 00:19:21,760
endpoint discovery we're going to need

00:19:20,240 --> 00:19:25,840
to set up east

00:19:21,760 --> 00:19:25,840
and west gateway

00:19:30,960 --> 00:19:34,640
so we will set up our finish on cluster

00:19:33,919 --> 00:19:36,960
00:19:34,640 --> 00:19:36,960
now

00:19:37,760 --> 00:19:42,320
let's check how the installation did

00:19:42,640 --> 00:19:49,840
as you can see um all the components

00:19:45,360 --> 00:19:49,840
reaches running within a minute

00:19:51,440 --> 00:19:54,880
now we're going to set up east and west

00:19:54,160 --> 00:19:59,280
gateway

00:19:54,880 --> 00:20:01,919
onto each of the two clusters ibm cloud

00:19:59,280 --> 00:20:02,480
um the key thing on this configuration

00:20:01,919 --> 00:20:05,039
of the

00:20:02,480 --> 00:20:06,159
gateway yama for east and west gateway

00:20:05,039 --> 00:20:08,640
is

00:20:06,159 --> 00:20:10,640
the cluster name and the network name

00:20:08,640 --> 00:20:11,440
and also the port number what are the

00:20:10,640 --> 00:20:16,720
number of

00:20:11,440 --> 00:20:16,720
reports you are exposing on the gateway

00:20:16,960 --> 00:20:23,440
so now we're going to uh install the

00:20:20,000 --> 00:20:26,080
easter easter and west gateway onto the

00:20:23,440 --> 00:20:26,080
clusters

00:20:27,600 --> 00:20:34,000
so easter cuddle install command it used

00:20:30,960 --> 00:20:37,120
to be called the israel cuddle

00:20:34,000 --> 00:20:39,840
manifest generates and then you apply

00:20:37,120 --> 00:20:40,960
cube applies so now we actually have a

00:20:39,840 --> 00:20:43,520
single command

00:20:40,960 --> 00:20:44,159
that takes is your operator yamaha and

00:20:43,520 --> 00:20:47,039
then you can

00:20:44,159 --> 00:20:49,840
apply things uh so i i really like that

00:20:47,039 --> 00:20:49,840
simplification

00:20:51,039 --> 00:20:56,960
now we're going to do the same thing on

00:20:53,760 --> 00:20:56,960
the cluster 2

00:20:58,559 --> 00:21:03,840
to install the east and west gateway

00:21:05,600 --> 00:21:11,679
okay we got on this install let's look

00:21:08,320 --> 00:21:11,679
at the next step

00:21:13,760 --> 00:21:19,600
you would run create remote secrets and

00:21:16,799 --> 00:21:22,640
generate the secrets the yama file

00:21:19,600 --> 00:21:23,039
so that um your cluster 2 can consume

00:21:22,640 --> 00:21:26,559
that

00:21:23,039 --> 00:21:30,240
i'm also passing that yama file to

00:21:26,559 --> 00:21:32,559
savann so he could use

00:21:30,240 --> 00:21:35,520
endpoint discovery on my cluster from

00:21:32,559 --> 00:21:35,520
google cloud

00:21:35,760 --> 00:21:40,080
so now we got remote secret generated

00:21:38,400 --> 00:21:42,480
for both of our

00:21:40,080 --> 00:21:43,360
both of my two cluster now we're

00:21:42,480 --> 00:21:46,000
applying

00:21:43,360 --> 00:21:46,559
uh on the second cluster we're applying

00:21:46,000 --> 00:21:49,760
the first

00:21:46,559 --> 00:21:51,039
cluster secret which enables uh the

00:21:49,760 --> 00:21:54,320
second clusters

00:21:51,039 --> 00:21:56,400
to look up uh to query the api

00:21:54,320 --> 00:21:58,880
server on the first cluster to do

00:21:56,400 --> 00:22:03,360
endpoint discovery

00:21:58,880 --> 00:22:06,240
uh upon the uh upon the secrets are

00:22:03,360 --> 00:22:09,120
applied you would see the remote is your

00:22:06,240 --> 00:22:12,720
remote secret with the cluster name

00:22:09,120 --> 00:22:15,280
um as part of your secret in the israel

00:22:12,720 --> 00:22:15,280
system

00:22:15,679 --> 00:22:19,600
so as you can see on both of my cluster

00:22:18,159 --> 00:22:23,280
i have consistent

00:22:19,600 --> 00:22:25,760
um consistent secrets

00:22:23,280 --> 00:22:26,559
the next thing we're looking at is to

00:22:25,760 --> 00:22:30,880
expose

00:22:26,559 --> 00:22:31,840
services so that the other cluster can

00:22:30,880 --> 00:22:34,720
consume it

00:22:31,840 --> 00:22:36,000
so we're going to expose the services on

00:22:34,720 --> 00:22:40,960
the cross

00:22:36,000 --> 00:22:44,159
network gateway uh savann over to you

00:22:40,960 --> 00:22:44,799
great um so i'm just gonna show what we

00:22:44,159 --> 00:22:46,799
set up

00:22:44,799 --> 00:22:48,559
in a very similar way over on gcp so i

00:22:46,799 --> 00:22:51,280
have two clusters

00:22:48,559 --> 00:22:52,640
um they're each running well actually

00:22:51,280 --> 00:22:54,080
one of them is running primary ones

00:22:52,640 --> 00:22:55,120
remote so first let's look at the

00:22:54,080 --> 00:22:58,080
primary one

00:22:55,120 --> 00:22:59,760
so the primary cluster has that same

00:22:58,080 --> 00:23:01,120
thing that lin just set up on ibm cloud

00:22:59,760 --> 00:23:03,760
it has an east west gateway

00:23:01,120 --> 00:23:05,039
an ingress gateway and this dod and then

00:23:03,760 --> 00:23:07,200
on cluster 2

00:23:05,039 --> 00:23:08,960
we just have the ingress gateway in s2d

00:23:07,200 --> 00:23:10,000
we don't have an east west case gateway

00:23:08,960 --> 00:23:12,000
because we're not

00:23:10,000 --> 00:23:13,520
running the full control plane there is

00:23:12,000 --> 00:23:14,240
duty in that cluster is actually just

00:23:13,520 --> 00:23:18,000
the ca

00:23:14,240 --> 00:23:19,840
it's not running the the xds server

00:23:18,000 --> 00:23:20,960
so it's a little bit confusing but it's

00:23:19,840 --> 00:23:22,000
actually not running the whole control

00:23:20,960 --> 00:23:23,919
plane and we're actually working

00:23:22,000 --> 00:23:26,080
on removing that out and so you can see

00:23:23,919 --> 00:23:28,720
the same thing on the service level

00:23:26,080 --> 00:23:30,159
there's this is2d dash remote service

00:23:28,720 --> 00:23:32,880
that is actually what

00:23:30,159 --> 00:23:33,919
the remote cluster is using to talk to

00:23:32,880 --> 00:23:37,039
um

00:23:33,919 --> 00:23:37,919
the server and the installation is very

00:23:37,039 --> 00:23:39,679
similar to what

00:23:37,919 --> 00:23:41,520
lynn showed as well we just have these

00:23:39,679 --> 00:23:44,640
issue operator files that have

00:23:41,520 --> 00:23:46,320
cluster one and cluster two um on

00:23:44,640 --> 00:23:48,159
cluster two the difference is this is

00:23:46,320 --> 00:23:49,679
actually set up as a remote cluster the

00:23:48,159 --> 00:23:51,039
profile's remote and it has a remote

00:23:49,679 --> 00:23:53,600
pilot address

00:23:51,039 --> 00:23:57,120
um that is the address of the east-west

00:23:53,600 --> 00:24:00,240
gateway running in the primary cluster

00:23:57,120 --> 00:24:02,080
and so basically that's it we have uh

00:24:00,240 --> 00:24:04,640
two clusters on gcp all set up and ready

00:24:02,080 --> 00:24:07,120
to go so back to you lynn

00:24:04,640 --> 00:24:08,320
okay great and now steven give me his

00:24:07,120 --> 00:24:11,600
secrets so i

00:24:08,320 --> 00:24:12,640
apply his secrets on both of my clusters

00:24:11,600 --> 00:24:15,679
so i can do

00:24:12,640 --> 00:24:18,159
endpoint discoveries now you can see all

00:24:15,679 --> 00:24:20,960
the secrets are applied so i have

00:24:18,159 --> 00:24:22,480
on each of my cluster i have three of

00:24:20,960 --> 00:24:26,400
the remote clusters

00:24:22,480 --> 00:24:29,600
um so now we're going to look

00:24:26,400 --> 00:24:32,320
at deploy book info we talked about

00:24:29,600 --> 00:24:32,720
in the diagram we're deploying book info

00:24:32,320 --> 00:24:36,080
with

00:24:32,720 --> 00:24:40,799
version 2 version 1 of the review

00:24:36,080 --> 00:24:40,799
on the first cluster in ibm cloud

00:24:42,240 --> 00:24:48,240
so we're going to need to expose

00:24:45,360 --> 00:24:50,000
the booking for product page on the

00:24:48,240 --> 00:24:53,120
gateway so we can reach

00:24:50,000 --> 00:24:56,880
out to a booking for product

00:24:53,120 --> 00:24:59,840
page so let's check it out

00:24:56,880 --> 00:25:02,400
so the gateway configuration it's very

00:24:59,840 --> 00:25:03,039
simple basically we're exposing booking

00:25:02,400 --> 00:25:06,480
for

00:25:03,039 --> 00:25:10,559
http 80 on these different uri

00:25:06,480 --> 00:25:12,880
passes slash product page is our landing

00:25:10,559 --> 00:25:16,320
page

00:25:12,880 --> 00:25:16,799
so i have the gateway information early

00:25:16,320 --> 00:25:20,159
on

00:25:16,799 --> 00:25:22,720
so one two three is the ip address of my

00:25:20,159 --> 00:25:22,720
gateway

00:25:23,919 --> 00:25:30,559
so as you can see as a visit book info

00:25:27,679 --> 00:25:31,120
i should only see review version 1 which

00:25:30,559 --> 00:25:35,440
is no

00:25:31,120 --> 00:25:38,960
star so now we're going to deploy

00:25:35,440 --> 00:25:43,279
review version 2 onto

00:25:38,960 --> 00:25:46,000
cluster 2i in ibm cloud

00:25:43,279 --> 00:25:47,039
this is just a review version 2

00:25:46,000 --> 00:25:50,400
deployments

00:25:47,039 --> 00:25:50,400
and service looks like

00:25:51,279 --> 00:25:56,799
now if i ever hit the refresh button you

00:25:54,320 --> 00:25:58,720
can see you know now it's wrong rob in

00:25:56,799 --> 00:26:01,600
between two of my clusters

00:25:58,720 --> 00:26:03,039
so certainly my product page um first

00:26:01,600 --> 00:26:06,159
cluster reaches out

00:26:03,039 --> 00:26:06,159
over to use event

00:26:07,440 --> 00:26:11,120
and so what lane was just showing we

00:26:09,520 --> 00:26:14,240
have the

00:26:11,120 --> 00:26:17,120
product page working with um

00:26:14,240 --> 00:26:18,880
just v1 and v2 and now we're actually

00:26:17,120 --> 00:26:20,880
going to go install v3

00:26:18,880 --> 00:26:22,840
over in google cloud and this one has

00:26:20,880 --> 00:26:24,320
red stars instead it's a it's a big

00:26:22,840 --> 00:26:26,480
upgrade um

00:26:24,320 --> 00:26:27,840
and so really similar to what lynn just

00:26:26,480 --> 00:26:29,760
showed we have

00:26:27,840 --> 00:26:31,760
reviews deployment the review service

00:26:29,760 --> 00:26:33,760
and actually the rating service

00:26:31,760 --> 00:26:36,080
because reviews actually calls back to

00:26:33,760 --> 00:26:40,400
ratings which is running back

00:26:36,080 --> 00:26:43,919
in um ibm cloud in cluster one so

00:26:40,400 --> 00:26:46,960
the path is actually coming into ingress

00:26:43,919 --> 00:26:49,039
on the ibm cloud side going to reviews

00:26:46,960 --> 00:26:50,799
over in google and then going back to

00:26:49,039 --> 00:26:52,400
ibm for ratings and then back

00:26:50,799 --> 00:26:55,120
out so it's actually bouncing back and

00:26:52,400 --> 00:26:57,200
forth between clouds but as the app

00:26:55,120 --> 00:26:59,520
owner i don't actually care about any of

00:26:57,200 --> 00:27:00,559
that i just deploy and now i have red

00:26:59,520 --> 00:27:03,120
stars

00:27:00,559 --> 00:27:04,880
um so this is actually a multi-cloud

00:27:03,120 --> 00:27:06,799
application

00:27:04,880 --> 00:27:08,960
that is running between the two so it's

00:27:06,799 --> 00:27:11,039
pretty exciting

00:27:08,960 --> 00:27:13,440
um and as you see at round robins

00:27:11,039 --> 00:27:15,840
between round robins between the various

00:27:13,440 --> 00:27:15,840
options

00:27:19,039 --> 00:27:26,559
i think that's it for our demo yeah

00:27:23,039 --> 00:27:29,440
i'm going to stop sharing and submit uh

00:27:26,559 --> 00:27:32,000
over to you to finish up the rest of the

00:27:29,440 --> 00:27:32,000
slides

00:27:32,240 --> 00:27:36,720
yeah let me talk a little bit about um

00:27:34,960 --> 00:27:39,360
vms now so

00:27:36,720 --> 00:27:40,640
um so what we showed is how you can have

00:27:39,360 --> 00:27:42,320
you know a bunch of different kubernetes

00:27:40,640 --> 00:27:45,279
clusters all connected but

00:27:42,320 --> 00:27:47,120
uh we know our users have a lot of

00:27:45,279 --> 00:27:48,880
services on vms and they want all those

00:27:47,120 --> 00:27:50,799
same benefits and so

00:27:48,880 --> 00:27:52,640
what istio has this model that we've

00:27:50,799 --> 00:27:55,360
called vm expansion

00:27:52,640 --> 00:27:57,279
or mesh expansion um and it's really

00:27:55,360 --> 00:27:59,919
it's letting you attach

00:27:57,279 --> 00:28:01,600
vms kind of the same way that you attach

00:27:59,919 --> 00:28:03,840
clusters and that's actually

00:28:01,600 --> 00:28:05,120
how we kind of have a unified model here

00:28:03,840 --> 00:28:06,720
so i can run

00:28:05,120 --> 00:28:08,320
what we call a workload group which is

00:28:06,720 --> 00:28:10,159
really just a group of vms

00:28:08,320 --> 00:28:12,000
um similar to kind of like a deployment

00:28:10,159 --> 00:28:12,320
but it's you know loosely defined as

00:28:12,000 --> 00:28:14,799
just

00:28:12,320 --> 00:28:16,240
any vms that you want to have as a group

00:28:14,799 --> 00:28:18,880
and they can use

00:28:16,240 --> 00:28:20,320
that same east west gateway they can use

00:28:18,880 --> 00:28:23,520
this 2d as if they were

00:28:20,320 --> 00:28:25,679
a remote cluster um and they you know

00:28:23,520 --> 00:28:28,480
get registered in the api server

00:28:25,679 --> 00:28:29,600
and then you can use those vms as

00:28:28,480 --> 00:28:32,159
back-ends for yours

00:28:29,600 --> 00:28:33,279
for your services and actually have them

00:28:32,159 --> 00:28:35,520
call into your other

00:28:33,279 --> 00:28:36,559
services in the mesh so it all works as

00:28:35,520 --> 00:28:39,600
one giant

00:28:36,559 --> 00:28:42,399
big match um so

00:28:39,600 --> 00:28:44,320
let's look at some of the improvements

00:28:42,399 --> 00:28:45,919
that we've made recently to this

00:28:44,320 --> 00:28:47,360
because we've actually had this for a

00:28:45,919 --> 00:28:48,640
while but it hasn't been the easiest to

00:28:47,360 --> 00:28:51,919
use

00:28:48,640 --> 00:28:55,120
the big improvements coming in ist 1.8

00:28:51,919 --> 00:28:56,799
are around improving how you

00:28:55,120 --> 00:28:58,799
register those vms and how you create

00:28:56,799 --> 00:28:59,279
them so we're actually introducing two

00:28:58,799 --> 00:29:00,960
new

00:28:59,279 --> 00:29:02,559
uh commands i actually realized i left

00:29:00,960 --> 00:29:04,240
out the x for experimental on these

00:29:02,559 --> 00:29:05,840
these are experimental commands

00:29:04,240 --> 00:29:07,840
but you can create a workload group

00:29:05,840 --> 00:29:08,640
really easily it generates the ammo for

00:29:07,840 --> 00:29:10,960
you

00:29:08,640 --> 00:29:12,720
and then based on that workload group

00:29:10,960 --> 00:29:14,000
you can just ask to configure an

00:29:12,720 --> 00:29:15,520
individual vm

00:29:14,000 --> 00:29:17,440
and it'll actually spit out all the

00:29:15,520 --> 00:29:18,640
configuration files that we need to set

00:29:17,440 --> 00:29:20,240
that up

00:29:18,640 --> 00:29:22,159
um so you can just copy those over and

00:29:20,240 --> 00:29:24,640
run istio on the vm and it'll

00:29:22,159 --> 00:29:26,159
be set up correctly um some of the other

00:29:24,640 --> 00:29:29,919
improvements we have

00:29:26,159 --> 00:29:32,480
are we have dns proxing which um

00:29:29,919 --> 00:29:34,640
before this you had to go and manually

00:29:32,480 --> 00:29:35,840
change your dns configuration for your

00:29:34,640 --> 00:29:39,120
bm

00:29:35,840 --> 00:29:42,480
either changing it to point at one of

00:29:39,120 --> 00:29:45,120
the kubernetes clusters dnsers

00:29:42,480 --> 00:29:45,760
or setting up your own local proxy that

00:29:45,120 --> 00:29:47,840
forwards

00:29:45,760 --> 00:29:49,760
things for the mesh to the cube one and

00:29:47,840 --> 00:29:51,279
otherwise keeps them in whatever you

00:29:49,760 --> 00:29:54,159
have for your vms

00:29:51,279 --> 00:29:56,080
basically all that is simplified um as

00:29:54,159 --> 00:29:57,360
part of running istio we actually run a

00:29:56,080 --> 00:29:58,799
dns proxy

00:29:57,360 --> 00:30:00,480
that will automatically resolve mesh

00:29:58,799 --> 00:30:02,480
names to ips and otherwise

00:30:00,480 --> 00:30:04,159
um forward to existing dns

00:30:02,480 --> 00:30:06,240
infrastructure so that greatly

00:30:04,159 --> 00:30:08,080
simplifies setup

00:30:06,240 --> 00:30:09,600
we also have changed how identity

00:30:08,080 --> 00:30:11,200
bootstrapping happens

00:30:09,600 --> 00:30:13,279
in previous versions there was a very

00:30:11,200 --> 00:30:16,399
complicated setup with

00:30:13,279 --> 00:30:18,399
certificates and i believe the

00:30:16,399 --> 00:30:19,520
the 1.7 one you could only really have

00:30:18,399 --> 00:30:21,440
one vm

00:30:19,520 --> 00:30:22,880
attached to a cluster uh didn't really

00:30:21,440 --> 00:30:24,559
expand very well

00:30:22,880 --> 00:30:26,559
this actually uses the existing

00:30:24,559 --> 00:30:28,000
kubernetes token infrastructure to

00:30:26,559 --> 00:30:30,080
bootstrap them so

00:30:28,000 --> 00:30:31,279
as part of that workload entry configure

00:30:30,080 --> 00:30:32,240
this will actually automatically be

00:30:31,279 --> 00:30:34,559
generated for you

00:30:32,240 --> 00:30:35,679
we generate the token you copy that to

00:30:34,559 --> 00:30:37,600
the vm

00:30:35,679 --> 00:30:39,760
and then that bootstraps certificate

00:30:37,600 --> 00:30:42,159
which from then on uses just the normal

00:30:39,760 --> 00:30:44,000
istio certificate infrastructure um

00:30:42,159 --> 00:30:45,279
we've also added auto registration so

00:30:44,000 --> 00:30:47,840
you don't have to

00:30:45,279 --> 00:30:49,520
um worry about manually registering each

00:30:47,840 --> 00:30:51,440
vm as it comes up which doesn't work

00:30:49,520 --> 00:30:52,799
well if you have auto scaling

00:30:51,440 --> 00:30:54,799
and we also have health checking coming

00:30:52,799 --> 00:30:57,760
in too so these all make

00:30:54,799 --> 00:30:58,320
vms kind of as easy to use hopefully as

00:30:57,760 --> 00:31:01,039
pods

00:30:58,320 --> 00:31:02,880
um once they're all in place and let me

00:31:01,039 --> 00:31:06,000
give kind of a brief example

00:31:02,880 --> 00:31:08,080
of how this works so um

00:31:06,000 --> 00:31:10,399
just like in multi-cluster you set up

00:31:08,080 --> 00:31:12,480
your primary cluster

00:31:10,399 --> 00:31:14,080
once you have that in place you can

00:31:12,480 --> 00:31:16,159
register a workload group

00:31:14,080 --> 00:31:17,679
and so again we can use these new

00:31:16,159 --> 00:31:18,640
experimental commands here at least i

00:31:17,679 --> 00:31:21,600
included the x

00:31:18,640 --> 00:31:23,519
i should have um so this says i want to

00:31:21,600 --> 00:31:25,039
create a new thing called hello vms in

00:31:23,519 --> 00:31:26,159
the sample namespace here are some

00:31:25,039 --> 00:31:28,640
labels

00:31:26,159 --> 00:31:30,480
and then that generates a yaml file and

00:31:28,640 --> 00:31:32,000
then i can just apply that to stick that

00:31:30,480 --> 00:31:34,080
in the api server

00:31:32,000 --> 00:31:36,960
and the reason i do that is when i want

00:31:34,080 --> 00:31:39,440
to generate config for the vm itself

00:31:36,960 --> 00:31:41,279
i can actually reuse that existing one

00:31:39,440 --> 00:31:42,799
um actually you can call by name here

00:31:41,279 --> 00:31:44,080
i'm actually using the file but

00:31:42,799 --> 00:31:46,640
if it's in the api server you can

00:31:44,080 --> 00:31:48,240
actually just refer to it by name um

00:31:46,640 --> 00:31:49,840
you call workload entry configure with

00:31:48,240 --> 00:31:51,919
that name and namespace

00:31:49,840 --> 00:31:54,000
and it generates into the configure all

00:31:51,919 --> 00:31:55,360
the artifacts that you need to run the

00:31:54,000 --> 00:31:57,200
vm

00:31:55,360 --> 00:31:59,440
um and basically that's it you copy

00:31:57,200 --> 00:32:03,200
those to the vm and you

00:31:59,440 --> 00:32:05,440
run istio and the vms will then

00:32:03,200 --> 00:32:06,880
connect through that east-west gateway

00:32:05,440 --> 00:32:09,120
to s2d

00:32:06,880 --> 00:32:11,120
they'll be practicing dns for you and

00:32:09,120 --> 00:32:14,240
all the requests between

00:32:11,120 --> 00:32:15,840
the entire mesh can now go to those vm

00:32:14,240 --> 00:32:16,559
end points and vm end points can call

00:32:15,840 --> 00:32:19,760
into the mesh

00:32:16,559 --> 00:32:20,720
so all the networking is just set up and

00:32:19,760 --> 00:32:24,240
working

00:32:20,720 --> 00:32:26,320
that's basically it um

00:32:24,240 --> 00:32:28,000
so we've walked through a lot of

00:32:26,320 --> 00:32:31,200
different parts of istio

00:32:28,000 --> 00:32:32,720
in this and here are kind of the the key

00:32:31,200 --> 00:32:34,720
takeaways

00:32:32,720 --> 00:32:36,000
so we've been working really hard to

00:32:34,720 --> 00:32:37,760
make it easy to

00:32:36,000 --> 00:32:39,200
build a mesh out of multiple clusters it

00:32:37,760 --> 00:32:39,919
was kind of doable before it was

00:32:39,200 --> 00:32:42,880
definitely not

00:32:39,919 --> 00:32:43,679
easy now it's actually pretty simple it

00:32:42,880 --> 00:32:46,480
was

00:32:43,679 --> 00:32:48,320
uh even amazing to me and and maybe the

00:32:46,480 --> 00:32:50,640
lin 2 that we were able to get

00:32:48,320 --> 00:32:52,320
a multi-cloud mesh multi-cloud

00:32:50,640 --> 00:32:54,240
multi-cluster mesh

00:32:52,320 --> 00:32:56,480
with remotes and multiple primaries and

00:32:54,240 --> 00:32:58,799
all these regions and different networks

00:32:56,480 --> 00:33:00,240
um some things on flat network some in

00:32:58,799 --> 00:33:03,120
in isolated mode

00:33:00,240 --> 00:33:03,840
and they're all connected and to add an

00:33:03,120 --> 00:33:07,600
end point

00:33:03,840 --> 00:33:09,200
to a service was just a single yaml file

00:33:07,600 --> 00:33:11,840
on one of the clusters

00:33:09,200 --> 00:33:12,799
and instantly you know product page was

00:33:11,840 --> 00:33:14,720
able to route to that

00:33:12,799 --> 00:33:16,080
right istio took care of all the routing

00:33:14,720 --> 00:33:17,120
and management of that

00:33:16,080 --> 00:33:18,960
you know you don't have to go set

00:33:17,120 --> 00:33:19,600
anything up you don't have to set up all

00:33:18,960 --> 00:33:21,519
these kind of

00:33:19,600 --> 00:33:23,600
crazy rules and things that just it has

00:33:21,519 --> 00:33:24,000
it for you and you know it's all secure

00:33:23,600 --> 00:33:25,919
and with

00:33:24,000 --> 00:33:27,200
mtls and authorization policies and all

00:33:25,919 --> 00:33:29,039
that good stuff

00:33:27,200 --> 00:33:30,240
um as part of this you can you know

00:33:29,039 --> 00:33:31,840
choose where you want to install those

00:33:30,240 --> 00:33:34,240
control planes obviously

00:33:31,840 --> 00:33:35,039
um it works across multiple networks and

00:33:34,240 --> 00:33:36,799
then

00:33:35,039 --> 00:33:38,480
the other takeaway is that this is you

00:33:36,799 --> 00:33:39,919
know works great for kubernetes but

00:33:38,480 --> 00:33:41,679
we're also making it really simple and

00:33:39,919 --> 00:33:45,519
easy for vms as well

00:33:41,679 --> 00:33:47,600
so those will also be able to join um so

00:33:45,519 --> 00:33:49,679
thank you very much um lynn do you have

00:33:47,600 --> 00:33:50,640
any other closing remarks if not i think

00:33:49,679 --> 00:33:52,559
we're uh

00:33:50,640 --> 00:33:55,440
we're done with their talk so we

00:33:52,559 --> 00:33:58,480
appreciate it and thanks for listening

00:33:55,440 --> 00:34:01,519
yeah same as you i'm super pleased

00:33:58,480 --> 00:34:04,080
to actually set up the demo with you

00:34:01,519 --> 00:34:05,600
and everything runs just smoothly

00:34:04,080 --> 00:34:10,800
without hitting

00:34:05,600 --> 00:34:10,800
any major issues it's amazing

00:34:12,000 --> 00:34:15,119
well thank you all hopefully to see you

00:34:14,560 --> 00:34:21,839
guys

00:34:15,119 --> 00:34:21,839
at the conference

00:34:25,679 --> 00:34:28,639
hey i think we're

00:34:33,040 --> 00:34:49,839
really live for some of the um

00:35:00,960 --> 00:35:06,320
so the first question

00:35:14,839 --> 00:35:17,839
um

00:35:35,920 --> 00:35:42,960
try that can you hear me lynn bye tom

00:35:39,760 --> 00:35:45,599
okay so um the observability

00:35:42,960 --> 00:35:46,160
work we haven't okay great uh yes

00:35:45,599 --> 00:35:47,680
technical

00:35:46,160 --> 00:35:49,599
technical issues with live not cute

00:35:47,680 --> 00:35:52,079
right here um

00:35:49,599 --> 00:35:53,760
observability isn't uh totally

00:35:52,079 --> 00:35:54,480
multi-cluster aware yet we're actually

00:35:53,760 --> 00:35:58,880
working on that

00:35:54,480 --> 00:36:00,480
um i think hopefully in the 1.9 release

00:35:58,880 --> 00:36:02,800
of this video we'll be able to have

00:36:00,480 --> 00:36:04,720
some better stuff there it's possible to

00:36:02,800 --> 00:36:05,280
set up but but it's not easy sort of to

00:36:04,720 --> 00:36:06,720
the

00:36:05,280 --> 00:36:08,560
we want to make things easy not just

00:36:06,720 --> 00:36:10,560
possible um

00:36:08,560 --> 00:36:11,680
theme here it's it's not yet that easy

00:36:10,560 --> 00:36:13,280
right we don't have built-in

00:36:11,680 --> 00:36:14,560
multi-cluster dashboards

00:36:13,280 --> 00:36:16,400
um you kind of have to set that up

00:36:14,560 --> 00:36:19,839
yourself you can actually have

00:36:16,400 --> 00:36:21,920
like a single grafana that um is

00:36:19,839 --> 00:36:22,960
pulling from prometheus in multiple

00:36:21,920 --> 00:36:24,640
clusters or you could have a single

00:36:22,960 --> 00:36:26,720
prometheus pulling from all cluster

00:36:24,640 --> 00:36:28,640
sources there's a bunch of ways to do it

00:36:26,720 --> 00:36:29,839
um you don't yet have that all set up

00:36:28,640 --> 00:36:32,160
and i think that's something we want to

00:36:29,839 --> 00:36:32,160
work on

00:36:35,040 --> 00:36:39,280
so i can i can maybe look at the next

00:36:38,160 --> 00:36:41,440
question

00:36:39,280 --> 00:36:43,680
uh so there was a question about um

00:36:41,440 --> 00:36:45,920
about federation support

00:36:43,680 --> 00:36:47,599
and inter accounts and intro accounts

00:36:45,920 --> 00:36:51,440
i'm not actually quite sure what

00:36:47,599 --> 00:36:53,280
that is meant to mean um federation

00:36:51,440 --> 00:36:54,800
is something we want to continue also

00:36:53,280 --> 00:36:57,040
making easier um

00:36:54,800 --> 00:36:58,480
that's that's also not quite as easy as

00:36:57,040 --> 00:37:00,640
we'd like it yet

00:36:58,480 --> 00:37:02,160
but we'll get there if you want to

00:37:00,640 --> 00:37:03,280
follow up on exactly what you mean about

00:37:02,160 --> 00:37:04,880
inter accounts versus

00:37:03,280 --> 00:37:06,640
intro accounts we can we can follow up

00:37:04,880 --> 00:37:08,000
on the question there

00:37:06,640 --> 00:37:23,680
um then do you want to answer the one

00:37:08,000 --> 00:37:37,839
about one buddy

00:37:23,680 --> 00:37:37,839
thank you

00:37:46,880 --> 00:37:50,000
yeah the the hope had been that this 198

00:37:49,359 --> 00:37:53,599
would actually be

00:37:50,000 --> 00:37:54,560
out before this this talk um but we had

00:37:53,599 --> 00:37:56,240
some

00:37:54,560 --> 00:38:05,839
last minute fixes that had to get it so

00:37:56,240 --> 00:38:05,839
it's not quite

00:38:52,880 --> 00:38:56,560
yeah in our demo

00:38:57,280 --> 00:39:01,200
yeah in our demo the east west gateway

00:38:59,119 --> 00:39:02,240
gateways were exposed publicly on the

00:39:01,200 --> 00:39:06,160
internet

00:39:02,240 --> 00:39:08,560
and they did rely on mutual tls

00:39:06,160 --> 00:39:09,839
um to authenticate and encrypt the

00:39:08,560 --> 00:39:12,000
connections

00:39:09,839 --> 00:39:14,480
there are other choices if you want to

00:39:12,000 --> 00:39:15,680
set up you know private bbc

00:39:14,480 --> 00:39:17,920
or something like that you can do that

00:39:15,680 --> 00:39:17,920
too

00:39:19,599 --> 00:39:29,839
then our in our demo they were

00:39:30,560 --> 00:39:35,119
i think there were a couple questions

00:39:32,640 --> 00:39:43,839
noticing the problem

00:39:35,119 --> 00:39:43,839
again sorry about that

00:39:44,320 --> 00:39:47,280
i think that oh there's a question

00:39:45,760 --> 00:39:48,160
another question about the network setup

00:39:47,280 --> 00:39:57,839
in this case

00:39:48,160 --> 00:39:57,839
so um on the

00:40:13,680 --> 00:40:17,839
the internet um publicly but you know

00:40:16,880 --> 00:40:21,760
protected with

00:40:17,839 --> 00:40:23,920
um security and then

00:40:21,760 --> 00:40:39,839
lynn can talk about what's the ibm side

00:40:23,920 --> 00:40:39,839
of that

00:40:45,520 --> 00:40:54,480
uh the uh the network set up on the

00:40:48,800 --> 00:40:54,480
ibm side how is the network set up over

00:41:04,839 --> 00:41:07,839
there

00:41:35,280 --> 00:41:39,440
okay should we talk about the failover

00:41:37,839 --> 00:41:41,680
case

00:41:39,440 --> 00:41:41,680
um

00:41:45,359 --> 00:41:50,079
so uh the basically there's there's this

00:41:48,720 --> 00:41:52,480
feature called locality

00:41:50,079 --> 00:41:53,760
where loop balancing in istio that

00:41:52,480 --> 00:41:56,880
solves this case for you so

00:41:53,760 --> 00:41:59,520
the question is about how do i do um

00:41:56,880 --> 00:42:01,440
failover so if i have the same service

00:41:59,520 --> 00:42:03,040
in two different clusters

00:42:01,440 --> 00:42:05,200
um they're mirrored how do i make sure

00:42:03,040 --> 00:42:07,359
it stays local when it's stale but

00:42:05,200 --> 00:42:08,640
there but then fails over to the other

00:42:07,359 --> 00:42:12,319
cluster if needed

00:42:08,640 --> 00:42:14,640
um and that's what locality where

00:42:12,319 --> 00:42:16,000
load balancing is actually for so you

00:42:14,640 --> 00:42:18,880
can keep it

00:42:16,000 --> 00:42:19,920
in the local cluster um and only send it

00:42:18,880 --> 00:42:23,200
over the other cluster

00:42:19,920 --> 00:42:30,720
if it does rather than just blindly

00:42:23,200 --> 00:42:32,079
you know round-robining between them

00:42:30,720 --> 00:42:35,440
so you can you can look at the issue

00:42:32,079 --> 00:42:35,440
documentation for details on

00:42:38,240 --> 00:42:45,839
sorry we're having some lag between

00:42:40,720 --> 00:42:45,839
between our video streams

00:43:11,760 --> 00:43:27,839
then you want to take the next question

00:43:13,680 --> 00:43:27,839
about upgrades

00:44:27,520 --> 00:44:37,839
i think we're we're just about out of

00:44:29,280 --> 00:44:37,839
time there

00:44:46,720 --> 00:44:51,839
and we'll we'll try to answer the rest

00:44:48,400 --> 00:44:51,839

YouTube URL: https://www.youtube.com/watch?v=Ol5tNcaQZas


