Title: Keynote: Opening Remarks - James Ward, Developer Advocate, Google
Publication date: 2020-08-01
Playlist: gRPC Conf 2020
Description: 
	Keynote: Opening Remarks - James Ward, Developer Advocate, Google
Captions: 
	00:00:00,080 --> 00:00:05,440
hi i'm james ward from google recently

00:00:03,040 --> 00:00:07,759
we announced grpc kotlin which is a way

00:00:05,440 --> 00:00:11,519
to generate idiomatic kotlin

00:00:07,759 --> 00:00:13,840
around the protobuf and grpc support for

00:00:11,519 --> 00:00:15,120
java and so this gives you support for

00:00:13,840 --> 00:00:16,880
cover teens and

00:00:15,120 --> 00:00:18,560
and kotlin flows and other great

00:00:16,880 --> 00:00:19,920
features in kotlin so i want to give you

00:00:18,560 --> 00:00:21,840
a quick demo so you can see it

00:00:19,920 --> 00:00:23,199
let's check it out let's take a look at

00:00:21,840 --> 00:00:26,880
an example that uses

00:00:23,199 --> 00:00:29,279
grpc and kotlin you can find this

00:00:26,880 --> 00:00:31,840
on github under the google cloud

00:00:29,279 --> 00:00:34,320
platform kotlin samples and then run

00:00:31,840 --> 00:00:35,680
and then grpc hello world streaming

00:00:34,320 --> 00:00:37,680
there's a few different examples in here

00:00:35,680 --> 00:00:40,480
we're going to look at the streaming one

00:00:37,680 --> 00:00:41,280
and if you want to deploy this up on

00:00:40,480 --> 00:00:42,960
cloud run

00:00:41,280 --> 00:00:44,960
you can just click this run on google

00:00:42,960 --> 00:00:48,239
cloud button and

00:00:44,960 --> 00:00:51,360
that will deploy it and we'll let

00:00:48,239 --> 00:00:52,399
cloud shell start up and then go take a

00:00:51,360 --> 00:00:55,039
look at the

00:00:52,399 --> 00:00:55,440
source code so in the source code for

00:00:55,039 --> 00:00:57,840
this

00:00:55,440 --> 00:00:59,840
sample let's first take a look at the

00:00:57,840 --> 00:01:02,480
protofile this is the

00:00:59,840 --> 00:01:04,159
protocol buffer definition that defines

00:01:02,480 --> 00:01:06,560
a service called greeter

00:01:04,159 --> 00:01:08,640
an rpc on that service called

00:01:06,560 --> 00:01:11,119
sayhellostream

00:01:08,640 --> 00:01:12,080
it takes a hello request and it returns

00:01:11,119 --> 00:01:14,880
a stream

00:01:12,080 --> 00:01:16,960
of hello reply and then you can see our

00:01:14,880 --> 00:01:20,479
hello request and hello reply

00:01:16,960 --> 00:01:22,960
message objects down below so

00:01:20,479 --> 00:01:23,920
the grpc kotlin project will then

00:01:22,960 --> 00:01:26,960
generate

00:01:23,920 --> 00:01:27,280
the classes to interact with the service

00:01:26,960 --> 00:01:29,759
for

00:01:27,280 --> 00:01:32,960
kotlin and let's go take a look at how

00:01:29,759 --> 00:01:35,600
we actually use those generated stubs

00:01:32,960 --> 00:01:37,200
here we have the hello world server and

00:01:35,600 --> 00:01:40,079
we'll start up the server

00:01:37,200 --> 00:01:40,960
and the the all that this server does is

00:01:40,079 --> 00:01:44,799
implement

00:01:40,960 --> 00:01:47,360
what happens on that say hello stream

00:01:44,799 --> 00:01:48,960
so you can see it takes a hello request

00:01:47,360 --> 00:01:52,079
and it returns a flow

00:01:48,960 --> 00:01:55,040
of hello reply because our grpc

00:01:52,079 --> 00:01:55,840
returned that stream of hello reply flow

00:01:55,040 --> 00:01:59,840
in kotlin

00:01:55,840 --> 00:02:02,719
is a way to do um to do a stream

00:01:59,840 --> 00:02:04,640
uh with non-blocking uh back pressure

00:02:02,719 --> 00:02:08,080
and all that kind of good stuff

00:02:04,640 --> 00:02:11,120
so we're going to emit a hello reply and

00:02:08,080 --> 00:02:13,360
what we're going to do in that reply is

00:02:11,120 --> 00:02:15,760
create a new hello reply from the

00:02:13,360 --> 00:02:17,200
builder and set the message to hello

00:02:15,760 --> 00:02:19,360
and then whatever name came in the

00:02:17,200 --> 00:02:21,280
request so we're just going to

00:02:19,360 --> 00:02:23,120
emit that every second so that's our

00:02:21,280 --> 00:02:26,319
server implementation

00:02:23,120 --> 00:02:27,840
nothing very fancy there then let's go

00:02:26,319 --> 00:02:31,040
take a look at the client

00:02:27,840 --> 00:02:32,480
that uses connects to that server so in

00:02:31,040 --> 00:02:35,920
this case we're going to use the

00:02:32,480 --> 00:02:36,560
generated stubs for this grpc service

00:02:35,920 --> 00:02:39,200
and

00:02:36,560 --> 00:02:39,760
we're going to to have a function in

00:02:39,200 --> 00:02:41,440
here

00:02:39,760 --> 00:02:43,680
called greet which is going to take a

00:02:41,440 --> 00:02:46,080
name and then it's going to

00:02:43,680 --> 00:02:47,040
do this run blocking where it's going to

00:02:46,080 --> 00:02:50,720
assemble

00:02:47,040 --> 00:02:52,319
a hello request and set the name to

00:02:50,720 --> 00:02:54,400
whatever was passed in

00:02:52,319 --> 00:02:56,080
and then it's going to call the stub say

00:02:54,400 --> 00:02:58,800
hello stream

00:02:56,080 --> 00:02:59,760
give it that request and this returns a

00:02:58,800 --> 00:03:02,800
flow

00:02:59,760 --> 00:03:04,000
so that's the the kotlin flow and then

00:03:02,800 --> 00:03:06,720
we're going to do a dot collect

00:03:04,000 --> 00:03:07,360
on here with a function that takes the

00:03:06,720 --> 00:03:09,440
response

00:03:07,360 --> 00:03:12,080
and in this case we're just going to

00:03:09,440 --> 00:03:14,560
print out the message that was passed in

00:03:12,080 --> 00:03:15,440
now down here we can see our main method

00:03:14,560 --> 00:03:17,920
where we start

00:03:15,440 --> 00:03:19,680
up the client and you'll see that when

00:03:17,920 --> 00:03:21,280
we start up the client we're going to

00:03:19,680 --> 00:03:23,760
if there is an argument we're going to

00:03:21,280 --> 00:03:24,640
use it an argument to the program if not

00:03:23,760 --> 00:03:27,280
we're going to just

00:03:24,640 --> 00:03:29,040
pass in world so you'll see that what

00:03:27,280 --> 00:03:30,640
actually then gets passed in

00:03:29,040 --> 00:03:32,879
we set the name to the name that was

00:03:30,640 --> 00:03:34,720
there and if we look back at our server

00:03:32,879 --> 00:03:36,799
it sets the message that it's going to

00:03:34,720 --> 00:03:39,680
emit every second to hello comma

00:03:36,799 --> 00:03:40,560
and then the name that was passed in so

00:03:39,680 --> 00:03:42,159
let's go

00:03:40,560 --> 00:03:43,200
back over into cloud shell and i'm

00:03:42,159 --> 00:03:44,400
actually just going to cancel out of

00:03:43,200 --> 00:03:45,599
this where i'm not going to go through

00:03:44,400 --> 00:03:46,799
the deployment

00:03:45,599 --> 00:03:49,120
because we don't need to it's already

00:03:46,799 --> 00:03:51,280
deployed and now i'm going to run the

00:03:49,120 --> 00:03:52,080
client against my server that's up and

00:03:51,280 --> 00:03:54,560
running

00:03:52,080 --> 00:03:56,159
on cloud run so what i'm doing is i'm

00:03:54,560 --> 00:03:56,959
taking the docker container that was

00:03:56,159 --> 00:03:58,400
created

00:03:56,959 --> 00:04:00,000
if we had followed through with that

00:03:58,400 --> 00:04:01,519
process and let it run to create

00:04:00,000 --> 00:04:03,280
the docker container from that source

00:04:01,519 --> 00:04:06,400
code but i've already done that

00:04:03,280 --> 00:04:08,959
and then it's going to run the

00:04:06,400 --> 00:04:10,000
hello world client kt application and

00:04:08,959 --> 00:04:12,000
then it's going to pass an

00:04:10,000 --> 00:04:14,239
argument to the application which is the

00:04:12,000 --> 00:04:15,760
server to connect to and if you'll

00:04:14,239 --> 00:04:17,759
remember we take that argument

00:04:15,760 --> 00:04:19,440
and we output it after hello every

00:04:17,759 --> 00:04:21,280
second so let's now

00:04:19,440 --> 00:04:23,120
run that docker container it's going to

00:04:21,280 --> 00:04:24,000
go grab that from the google container

00:04:23,120 --> 00:04:26,800
registry

00:04:24,000 --> 00:04:28,400
and download that to cloud shell to my

00:04:26,800 --> 00:04:30,639
local docker daemon there

00:04:28,400 --> 00:04:31,759
and so that'll take a second to pull

00:04:30,639 --> 00:04:34,000
that down

00:04:31,759 --> 00:04:34,800
and once that's pulled down it'll start

00:04:34,000 --> 00:04:36,720
up the

00:04:34,800 --> 00:04:38,160
docker container run the hello world

00:04:36,720 --> 00:04:40,880
client and

00:04:38,160 --> 00:04:42,160
then connect to our service running on

00:04:40,880 --> 00:04:45,199
cloud run

00:04:42,160 --> 00:04:46,639
and remember cloud run is serverless so

00:04:45,199 --> 00:04:48,160
it scales down when there aren't any

00:04:46,639 --> 00:04:49,199
requests and then automatically scales

00:04:48,160 --> 00:04:51,199
back up

00:04:49,199 --> 00:04:53,199
as needed and you'll see that it's

00:04:51,199 --> 00:04:55,280
started up that grpc server

00:04:53,199 --> 00:04:57,440
and now it's outputting every second

00:04:55,280 --> 00:04:58,560
hello with that argument that was passed

00:04:57,440 --> 00:05:01,280
in

00:04:58,560 --> 00:05:02,000
so there we go that's our kotlin grpc

00:05:01,280 --> 00:05:04,960
application

00:05:02,000 --> 00:05:06,600
running on cloud run and doing a

00:05:04,960 --> 00:05:09,600
streaming

00:05:06,600 --> 00:05:09,600

YouTube URL: https://www.youtube.com/watch?v=lSs7rQkL0D0


