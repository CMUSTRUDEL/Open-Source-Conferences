Title: Protop: A Package Manager for gRPC and Protocol Buffers - Jeffery Shivers, Toast, Inc
Publication date: 2020-08-01
Playlist: gRPC Conf 2020
Description: 
	Protop: A Package Manager for gRPC and Protocol Buffers - Jeffery Shivers, Toast, Inc 

This presentation will cover a new open source tool called protop (pronounced “proto p”) which enables developers to easily publish and share protocol buffers across code bases. Protop was created as a lightweight solution for projects that need access to the same protobufs, such as common libraries that span multiple services, or even external gRPC APIs. The tool can be plugged into most pipelines or projects with a minimal footprint, and aims to encourage projects to keep protobuf schemas small, portable, and ultimately separate from their implementations. We’ll see how protop works through a few real examples and examine how it might help accomplish good development practices in the world of gRPC, especially in collaborative and open-source contexts.
Captions: 
	00:00:00,080 --> 00:00:03,919
hi my name is jeffrey shivers and this

00:00:02,080 --> 00:00:05,279
presentation is going to be about a new

00:00:03,919 --> 00:00:07,680
tool called proto-p

00:00:05,279 --> 00:00:09,200
which is a package manager for grpc and

00:00:07,680 --> 00:00:10,880
protobufs

00:00:09,200 --> 00:00:13,200
so a little background on myself first

00:00:10,880 --> 00:00:14,480
i'm a software developer based in boston

00:00:13,200 --> 00:00:16,320
and i've spent the last few years

00:00:14,480 --> 00:00:19,520
working at a company called toast

00:00:16,320 --> 00:00:21,119
building technology for restaurants and

00:00:19,520 --> 00:00:22,960
in the evenings i study in the

00:00:21,119 --> 00:00:24,480
engineering management program at tulsa

00:00:22,960 --> 00:00:26,320
university

00:00:24,480 --> 00:00:28,480
before i was even interested in software

00:00:26,320 --> 00:00:30,320
i was composing music

00:00:28,480 --> 00:00:32,239
studying and traveling around the world

00:00:30,320 --> 00:00:34,719
doing artist residencies and

00:00:32,239 --> 00:00:35,840
weird performances like this and then i

00:00:34,719 --> 00:00:38,879
happen to have my first

00:00:35,840 --> 00:00:40,399
experience in software through a program

00:00:38,879 --> 00:00:41,840
called google summer of code

00:00:40,399 --> 00:00:43,680
if you're not familiar with it it's

00:00:41,840 --> 00:00:45,200
basically a program where google

00:00:43,680 --> 00:00:47,360
sponsors students

00:00:45,200 --> 00:00:48,320
to spend their summer working for open

00:00:47,360 --> 00:00:50,480
source projects

00:00:48,320 --> 00:00:52,160
in my case i had the opportunity to work

00:00:50,480 --> 00:00:54,079
for the gnu project

00:00:52,160 --> 00:00:55,440
on a music notation software called lily

00:00:54,079 --> 00:00:57,360
pond so

00:00:55,440 --> 00:00:59,280
i'm excited to be able to present the

00:00:57,360 --> 00:01:02,079
next big open source project that i've

00:00:59,280 --> 00:01:04,159
been working on for a little while now

00:01:02,079 --> 00:01:06,479
so this presentation's for you if you

00:01:04,159 --> 00:01:08,640
use protobus or grpc in any way

00:01:06,479 --> 00:01:09,680
whether you're expert in the tools or if

00:01:08,640 --> 00:01:12,400
you're a novice

00:01:09,680 --> 00:01:13,840
in the technology if you collaborate

00:01:12,400 --> 00:01:16,320
whether it's on a team across

00:01:13,840 --> 00:01:17,200
teams or just across services in your

00:01:16,320 --> 00:01:19,680
stack

00:01:17,200 --> 00:01:21,759
using this technology and if you're at

00:01:19,680 --> 00:01:24,840
all intimidated by them

00:01:21,759 --> 00:01:26,000
so this isn't necessarily for a seasoned

00:01:24,840 --> 00:01:28,159
developer

00:01:26,000 --> 00:01:30,560
in this framework so if you're brand new

00:01:28,159 --> 00:01:32,400
then this might solve some of the

00:01:30,560 --> 00:01:34,640
technical overhead when you're just

00:01:32,400 --> 00:01:36,079
getting set up for the first time

00:01:34,640 --> 00:01:38,079
so i don't usually like to work on

00:01:36,079 --> 00:01:38,799
projects that add complexity to other

00:01:38,079 --> 00:01:41,600
things

00:01:38,799 --> 00:01:42,159
i found that sometimes new tools like

00:01:41,600 --> 00:01:44,720
this

00:01:42,159 --> 00:01:46,079
can be intimidating sometimes so it will

00:01:44,720 --> 00:01:48,880
add to our

00:01:46,079 --> 00:01:50,240
uh add to our tool set just to solve

00:01:48,880 --> 00:01:51,600
some issues so

00:01:50,240 --> 00:01:53,200
one of the things that i'm trying to do

00:01:51,600 --> 00:01:54,000
here is make sure that i'm at least

00:01:53,200 --> 00:01:56,560
making

00:01:54,000 --> 00:01:57,040
some of this stuff easier to do and not

00:01:56,560 --> 00:02:00,240
adding

00:01:57,040 --> 00:02:01,439
more complexity to the process so the

00:02:00,240 --> 00:02:02,560
presentation is going to go a little bit

00:02:01,439 --> 00:02:04,159
like this

00:02:02,560 --> 00:02:06,159
we'll talk about existing development

00:02:04,159 --> 00:02:08,160
patterns with protobufs

00:02:06,159 --> 00:02:09,679
and what that kind of looks like and

00:02:08,160 --> 00:02:10,560
then i'll give an introduction to the

00:02:09,679 --> 00:02:12,560
tool itself

00:02:10,560 --> 00:02:13,920
and then a quick demo of a distributed

00:02:12,560 --> 00:02:15,040
grpc app

00:02:13,920 --> 00:02:16,959
and then we'll end with some key

00:02:15,040 --> 00:02:18,640
takeaways so

00:02:16,959 --> 00:02:20,720
how do we typically develop projects

00:02:18,640 --> 00:02:23,599
using produbs

00:02:20,720 --> 00:02:24,640
and that's including even non-grpc

00:02:23,599 --> 00:02:26,480
projects so

00:02:24,640 --> 00:02:28,480
there's a lot of use cases for protobufs

00:02:26,480 --> 00:02:29,840
outside of grpc

00:02:28,480 --> 00:02:32,640
and and how does that kind of look like

00:02:29,840 --> 00:02:34,879
in our stack the easiest

00:02:32,640 --> 00:02:36,000
context for developing protobufs is if

00:02:34,879 --> 00:02:37,760
you're working with the monolith

00:02:36,000 --> 00:02:39,040
because just like any other shared

00:02:37,760 --> 00:02:40,480
dependency

00:02:39,040 --> 00:02:42,480
everything has access to it if it's in

00:02:40,480 --> 00:02:45,519
the same code base so

00:02:42,480 --> 00:02:46,239
well there's obvious obviously

00:02:45,519 --> 00:02:47,680
trade-offs

00:02:46,239 --> 00:02:50,000
if you're developing monoliths and you

00:02:47,680 --> 00:02:51,599
want to trend away from doing

00:02:50,000 --> 00:02:52,959
this uh it happens to be really

00:02:51,599 --> 00:02:53,840
convenient in the case of protobufs

00:02:52,959 --> 00:02:56,400
because there's no

00:02:53,840 --> 00:02:57,680
copying pasting no figuring out how to

00:02:56,400 --> 00:02:59,360
distribute them

00:02:57,680 --> 00:03:00,879
across your system if they're just

00:02:59,360 --> 00:03:03,360
always there

00:03:00,879 --> 00:03:05,040
most of us are probably working in

00:03:03,360 --> 00:03:08,400
distributed systems though

00:03:05,040 --> 00:03:08,800
so our services are broken up into a few

00:03:08,400 --> 00:03:12,319
or

00:03:08,800 --> 00:03:14,400
many uh different uh parts of the system

00:03:12,319 --> 00:03:15,760
and somehow we need to get the protos if

00:03:14,400 --> 00:03:18,959
we're using protobus

00:03:15,760 --> 00:03:19,360
from one service to the next so the next

00:03:18,959 --> 00:03:20,879
step

00:03:19,360 --> 00:03:22,879
usually what happens is that we put our

00:03:20,879 --> 00:03:25,040
protos into

00:03:22,879 --> 00:03:26,159
the code base still uh of the the

00:03:25,040 --> 00:03:29,040
service that's

00:03:26,159 --> 00:03:30,319
going to be uh implementing them and

00:03:29,040 --> 00:03:31,040
then that's probably generating some

00:03:30,319 --> 00:03:33,280
artifacts

00:03:31,040 --> 00:03:34,319
and sending them into some internal

00:03:33,280 --> 00:03:37,519
registry

00:03:34,319 --> 00:03:38,799
like npm or or maven and and in whatever

00:03:37,519 --> 00:03:40,400
implementation of that whether it's like

00:03:38,799 --> 00:03:41,599
artifact or nexus and then

00:03:40,400 --> 00:03:42,959
that's how we're getting them into the

00:03:41,599 --> 00:03:44,080
other services we're passing them

00:03:42,959 --> 00:03:48,400
through

00:03:44,080 --> 00:03:50,799
via the generated code

00:03:48,400 --> 00:03:51,920
a slightly better version of that is

00:03:50,799 --> 00:03:53,599
proto repos

00:03:51,920 --> 00:03:56,159
where basically you just break the

00:03:53,599 --> 00:03:59,280
protos out of your repository but still

00:03:56,159 --> 00:04:01,840
in most cases today what i see is that

00:03:59,280 --> 00:04:03,360
services are your teams are still

00:04:01,840 --> 00:04:06,480
creating pipelines where

00:04:03,360 --> 00:04:08,080
the protos are just immediately

00:04:06,480 --> 00:04:10,560
being generated into whatever

00:04:08,080 --> 00:04:12,480
implementations or stubs might be needed

00:04:10,560 --> 00:04:14,400
and then those libraries are pushed and

00:04:12,480 --> 00:04:17,199
out into the other services

00:04:14,400 --> 00:04:19,040
so this doesn't quite distribute the

00:04:17,199 --> 00:04:21,359
produce as much as it distributes the

00:04:19,040 --> 00:04:23,040
code that's generated by them

00:04:21,359 --> 00:04:26,000
uh what i would like to see is kind of a

00:04:23,040 --> 00:04:28,960
twist on that instead of distributing

00:04:26,000 --> 00:04:30,560
the code and immediately uh generating

00:04:28,960 --> 00:04:31,440
uh everything that we might need from

00:04:30,560 --> 00:04:33,759
protos

00:04:31,440 --> 00:04:35,199
and maybe even generating some waste if

00:04:33,759 --> 00:04:38,320
we don't always need

00:04:35,199 --> 00:04:40,000
uh everything in every language would be

00:04:38,320 --> 00:04:40,720
to just simply distribute the protos

00:04:40,000 --> 00:04:42,080
themselves

00:04:40,720 --> 00:04:44,080
and so it kind of looks like the last

00:04:42,080 --> 00:04:46,240
pattern but instead

00:04:44,080 --> 00:04:47,680
imagining that we just simply have a way

00:04:46,240 --> 00:04:49,759
of retrieving the protos

00:04:47,680 --> 00:04:51,280
themselves into all of the code bases

00:04:49,759 --> 00:04:52,800
that might need them

00:04:51,280 --> 00:04:54,880
and then placing responsibility of

00:04:52,800 --> 00:04:58,240
generating the code onto

00:04:54,880 --> 00:04:59,440
those implementations

00:04:58,240 --> 00:05:00,880
so this leads me to the guiding

00:04:59,440 --> 00:05:01,680
principles of the tool that i'm talking

00:05:00,880 --> 00:05:04,720
about today

00:05:01,680 --> 00:05:06,880
proto-p so the first point is that

00:05:04,720 --> 00:05:07,759
i i think that produce should at least

00:05:06,880 --> 00:05:10,479
be able to be

00:05:07,759 --> 00:05:12,800
small composable things we already do

00:05:10,479 --> 00:05:16,400
some composition when we have a single

00:05:12,800 --> 00:05:18,800
proto repo and we use imports we also

00:05:16,400 --> 00:05:20,160
import other stuff from like the google

00:05:18,800 --> 00:05:22,400
common photos

00:05:20,160 --> 00:05:24,000
pretty frequently so it would be nice to

00:05:22,400 --> 00:05:26,560
be able to easily do the same

00:05:24,000 --> 00:05:27,680
thing within our own system so if our

00:05:26,560 --> 00:05:30,800
company has

00:05:27,680 --> 00:05:33,120
some common proto libraries to be able

00:05:30,800 --> 00:05:36,320
to develop them separately from

00:05:33,120 --> 00:05:38,639
some specific api and be able to pull

00:05:36,320 --> 00:05:39,840
them in and compose them that way

00:05:38,639 --> 00:05:41,600
and the next thing is that i really

00:05:39,840 --> 00:05:43,440
think that proto should focus on one

00:05:41,600 --> 00:05:45,759
thing and that's defining the api

00:05:43,440 --> 00:05:47,039
or defining the blueprints underneath an

00:05:45,759 --> 00:05:50,080
api

00:05:47,039 --> 00:05:50,720
and that we should strive to keep these

00:05:50,080 --> 00:05:52,720
separate

00:05:50,720 --> 00:05:54,639
separate from their implementation if

00:05:52,720 --> 00:05:56,160
possible and that includes generating

00:05:54,639 --> 00:05:58,080
the code because that really is the

00:05:56,160 --> 00:06:00,880
thing that becomes the implementation

00:05:58,080 --> 00:06:02,720
as soon as it's uh dropped into a real

00:06:00,880 --> 00:06:04,560
service

00:06:02,720 --> 00:06:06,960
and then finally to reiterate the last

00:06:04,560 --> 00:06:08,160
point again coming back to the idea that

00:06:06,960 --> 00:06:10,720
tools should really make things

00:06:08,160 --> 00:06:11,840
easier not harder to do so instead of

00:06:10,720 --> 00:06:14,880
introducing another

00:06:11,840 --> 00:06:16,720
new pipeline a whole framework for

00:06:14,880 --> 00:06:18,560
throwing around protos and doing a

00:06:16,720 --> 00:06:19,680
billion different kinds of validations

00:06:18,560 --> 00:06:21,919
i wanted to build something that was

00:06:19,680 --> 00:06:22,880
just extremely simple and just focus on

00:06:21,919 --> 00:06:26,639
the one thing

00:06:22,880 --> 00:06:29,759
which is just distributing produce

00:06:26,639 --> 00:06:31,120
so what is proto-p exactly then uh at

00:06:29,759 --> 00:06:32,000
its core it's basically a package

00:06:31,120 --> 00:06:34,639
manager for

00:06:32,000 --> 00:06:37,520
for protobufs it follows the typical

00:06:34,639 --> 00:06:40,240
pattern of any package manager out there

00:06:37,520 --> 00:06:41,840
so if you can think of maven and npm are

00:06:40,240 --> 00:06:44,639
pretty direct analogs to

00:06:41,840 --> 00:06:45,919
this tool but it's literally a command

00:06:44,639 --> 00:06:46,479
line tool so you install it to your

00:06:45,919 --> 00:06:49,360
machine

00:06:46,479 --> 00:06:50,400
and you use it with nearly synonymous

00:06:49,360 --> 00:06:53,759
commands

00:06:50,400 --> 00:06:55,360
such as init and publish and sync in

00:06:53,759 --> 00:06:58,560
order to

00:06:55,360 --> 00:07:00,720
move protos around between projects

00:06:58,560 --> 00:07:02,880
and then at the highest level it's also

00:07:00,720 --> 00:07:05,039
kind of a pattern for protobuf and grpc

00:07:02,880 --> 00:07:06,880
development so i keep talking about

00:07:05,039 --> 00:07:08,160
distributing protos and not their

00:07:06,880 --> 00:07:10,560
implementations

00:07:08,160 --> 00:07:12,160
so while this doesn't enforce anything

00:07:10,560 --> 00:07:15,360
it doesn't make you do that

00:07:12,160 --> 00:07:16,800
it does enable you and i highly suggest

00:07:15,360 --> 00:07:18,720
those guiding principles to just

00:07:16,800 --> 00:07:20,479
distribute their protos and then

00:07:18,720 --> 00:07:22,880
let the services worry about what

00:07:20,479 --> 00:07:24,400
happens after that

00:07:22,880 --> 00:07:26,479
so this is kind of what a workflow might

00:07:24,400 --> 00:07:28,240
look like then if you're using this tool

00:07:26,479 --> 00:07:30,319
the first thing you would do is start a

00:07:28,240 --> 00:07:32,240
project by creating a manifest

00:07:30,319 --> 00:07:35,360
so you would just say protop init or you

00:07:32,240 --> 00:07:38,319
can manually create a protop.json file

00:07:35,360 --> 00:07:40,080
and this is just json format with some

00:07:38,319 --> 00:07:42,400
properties that give it

00:07:40,080 --> 00:07:44,479
give us a way to identify the project

00:07:42,400 --> 00:07:46,879
and then if it has any dependencies on

00:07:44,479 --> 00:07:47,759
other proto projects then you give it a

00:07:46,879 --> 00:07:50,879
dependency map

00:07:47,759 --> 00:07:53,120
and you point to them that way if you're

00:07:50,879 --> 00:07:54,639
developing protos locally using proto-p

00:07:53,120 --> 00:07:57,680
you can just use proto-link

00:07:54,639 --> 00:08:00,319
and this is an analog to publishing to

00:07:57,680 --> 00:08:03,840
your local maven repo in your machine

00:08:00,319 --> 00:08:05,360
or npm link is where the inspiration for

00:08:03,840 --> 00:08:07,039
the name actually came

00:08:05,360 --> 00:08:08,800
and it really just does that it creates

00:08:07,039 --> 00:08:11,199
a symbolic link in your file system

00:08:08,800 --> 00:08:12,240
and really nothing more in order to get

00:08:11,199 --> 00:08:15,039
the protos

00:08:12,240 --> 00:08:17,280
across your projects but you can also

00:08:15,039 --> 00:08:19,039
use protop publish which right now is a

00:08:17,280 --> 00:08:20,720
technically experimental feature so it's

00:08:19,039 --> 00:08:21,039
not on the master branch if you install

00:08:20,720 --> 00:08:22,319
this

00:08:21,039 --> 00:08:24,400
from homebrew you're not going to get

00:08:22,319 --> 00:08:25,680
this but it's something we're working on

00:08:24,400 --> 00:08:26,960
developing right now

00:08:25,680 --> 00:08:29,680
the alternative to that is to just

00:08:26,960 --> 00:08:31,759
simply publish the project to a get repo

00:08:29,680 --> 00:08:33,440
this is the easiest way and probably

00:08:31,759 --> 00:08:35,680
what we're already doing if you have

00:08:33,440 --> 00:08:37,279
your individual proto repos so all you

00:08:35,680 --> 00:08:38,560
need to do is just drop in a manifest

00:08:37,279 --> 00:08:41,680
and then technically it's

00:08:38,560 --> 00:08:44,000
a published proto package

00:08:41,680 --> 00:08:44,880
and the last thing you do in order to

00:08:44,000 --> 00:08:47,600
get your protos

00:08:44,880 --> 00:08:48,560
into the next project that needs them is

00:08:47,600 --> 00:08:51,200
you run protop

00:08:48,560 --> 00:08:52,800
sync and this basically resolves them in

00:08:51,200 --> 00:08:53,519
a certain order so if you say that you

00:08:52,800 --> 00:08:55,440
want to

00:08:53,519 --> 00:08:57,120
use the linked projects on your file

00:08:55,440 --> 00:08:58,399
system then you add a flag for that

00:08:57,120 --> 00:09:00,720
then you can see that it looks something

00:08:58,399 --> 00:09:03,200
like this here this little notation

00:09:00,720 --> 00:09:04,640
with this arrow is basically saying that

00:09:03,200 --> 00:09:07,519
this is a symbolic link

00:09:04,640 --> 00:09:08,000
to a project that i'm developing and

00:09:07,519 --> 00:09:10,240
it'll also

00:09:08,000 --> 00:09:11,680
resolve external dependencies whether

00:09:10,240 --> 00:09:16,480
it's in github

00:09:11,680 --> 00:09:18,560
or in a proto registry when that exists

00:09:16,480 --> 00:09:20,959
so next i'm just going to start a quick

00:09:18,560 --> 00:09:24,080
demo here so this is a distributed

00:09:20,959 --> 00:09:26,399
grpc application and what

00:09:24,080 --> 00:09:27,839
that really means is we have two

00:09:26,399 --> 00:09:28,480
services that are going to use some

00:09:27,839 --> 00:09:30,240
protos

00:09:28,480 --> 00:09:32,800
that are being developed in a third

00:09:30,240 --> 00:09:36,480
repository

00:09:32,800 --> 00:09:38,959
so i have a little api here

00:09:36,480 --> 00:09:40,480
and this is for a ping pong service and

00:09:38,959 --> 00:09:43,279
all it does is it um

00:09:40,480 --> 00:09:44,959
creates a binary stream here so we have

00:09:43,279 --> 00:09:46,800
an rpc call

00:09:44,959 --> 00:09:48,560
called ping pong and it's going to take

00:09:46,800 --> 00:09:50,160
a stream of these ping messages and

00:09:48,560 --> 00:09:52,480
return a stream of

00:09:50,160 --> 00:09:54,640
messages and so this is what i want to

00:09:52,480 --> 00:09:56,320
use between my services here

00:09:54,640 --> 00:09:58,640
so in order to actually get the protos

00:09:56,320 --> 00:10:00,560
into those projects i need to

00:09:58,640 --> 00:10:02,399
give this project a manifest and then

00:10:00,560 --> 00:10:02,800
link it because i haven't published it

00:10:02,399 --> 00:10:05,920
yet

00:10:02,800 --> 00:10:06,800
and so i'm just developing these so in

00:10:05,920 --> 00:10:08,560
order to

00:10:06,800 --> 00:10:10,240
get started with that i'll say protop

00:10:08,560 --> 00:10:12,000
init and this is going to ask me a few

00:10:10,240 --> 00:10:14,320
questions what the organization name is

00:10:12,000 --> 00:10:15,680
so i'll say that i'm with proto-p and

00:10:14,320 --> 00:10:16,640
for project name i'm just going to say

00:10:15,680 --> 00:10:19,440
the project is

00:10:16,640 --> 00:10:21,040
called ping pong and then the revision

00:10:19,440 --> 00:10:21,839
is arbitrary i don't really care right

00:10:21,040 --> 00:10:23,440
now

00:10:21,839 --> 00:10:25,040
and then that created this manifest for

00:10:23,440 --> 00:10:27,120
me right here so

00:10:25,040 --> 00:10:28,160
this is all i need in order to run the

00:10:27,120 --> 00:10:29,600
proto-p link

00:10:28,160 --> 00:10:32,320
command successfully so i'm going to do

00:10:29,600 --> 00:10:34,079
that now

00:10:32,320 --> 00:10:36,320
and there we go so this project now

00:10:34,079 --> 00:10:37,920
should be accessible to

00:10:36,320 --> 00:10:40,160
my services that want to implement the

00:10:37,920 --> 00:10:42,480
protos so now i'm going to go into

00:10:40,160 --> 00:10:44,240
the java service that i've started here

00:10:42,480 --> 00:10:46,000
this is just a basic java app that

00:10:44,240 --> 00:10:47,680
creates a jropc server

00:10:46,000 --> 00:10:49,519
and it doesn't have any services yet but

00:10:47,680 --> 00:10:51,279
that's what i'm going to do next

00:10:49,519 --> 00:10:52,560
in order to do that in order to create

00:10:51,279 --> 00:10:53,839
my implementation i

00:10:52,560 --> 00:10:55,680
need to get those protos into this

00:10:53,839 --> 00:10:57,760
project

00:10:55,680 --> 00:10:59,839
so i've set up my i'm using gradle for

00:10:57,760 --> 00:11:01,440
this and i set up the build script using

00:10:59,839 --> 00:11:02,720
the protop gradle plugin

00:11:01,440 --> 00:11:04,800
which basically just makes it a little

00:11:02,720 --> 00:11:07,680
bit easier to work with the

00:11:04,800 --> 00:11:10,000
protobuf plugin and i've passed in a

00:11:07,680 --> 00:11:12,720
flag that says that i want to use

00:11:10,000 --> 00:11:15,040
links on my machine so i want to check

00:11:12,720 --> 00:11:17,600
if there's any projects

00:11:15,040 --> 00:11:20,240
for the dependencies before checking the

00:11:17,600 --> 00:11:21,839
external registries

00:11:20,240 --> 00:11:23,120
and then just going through what i need

00:11:21,839 --> 00:11:23,600
to do with the setup here it's pretty

00:11:23,120 --> 00:11:26,399
minimal

00:11:23,600 --> 00:11:26,880
i also need to just add my proto sources

00:11:26,399 --> 00:11:28,800
from

00:11:26,880 --> 00:11:31,200
the protop directory so that the

00:11:28,800 --> 00:11:32,720
protobuf generator can find them

00:11:31,200 --> 00:11:35,519
and then i want to make sure that the

00:11:32,720 --> 00:11:37,600
protobuf generator only does that

00:11:35,519 --> 00:11:39,760
after proto psync has been run so that

00:11:37,600 --> 00:11:43,600
we're not generating anything before

00:11:39,760 --> 00:11:45,440
everything is pulled into the project

00:11:43,600 --> 00:11:48,160
so i'm going to manually create a

00:11:45,440 --> 00:11:50,320
manifest here

00:11:48,160 --> 00:11:51,600
and i don't need all the id stuff like

00:11:50,320 --> 00:11:53,839
the name in the organization

00:11:51,600 --> 00:11:55,279
i really just need a dependency map

00:11:53,839 --> 00:11:56,000
because that's all i'm doing with this

00:11:55,279 --> 00:11:58,079
i'm not publishing

00:11:56,000 --> 00:12:00,079
this anywhere so the project that i'm

00:11:58,079 --> 00:12:03,440
going to depend on is the organization

00:12:00,079 --> 00:12:06,560
slash project name which looks like that

00:12:03,440 --> 00:12:08,240
and i do need to give it a valid version

00:12:06,560 --> 00:12:10,320
even though i'm not pulling it from any

00:12:08,240 --> 00:12:12,079
external registry yet but it would look

00:12:10,320 --> 00:12:15,040
something like this so this project was

00:12:12,079 --> 00:12:16,399
published on github if the api protos

00:12:15,040 --> 00:12:18,399
were published there

00:12:16,399 --> 00:12:20,079
i could give it a prefix like gh to say

00:12:18,399 --> 00:12:23,040
that they're on github

00:12:20,079 --> 00:12:23,519
and then i can give it the registry path

00:12:23,040 --> 00:12:27,279
so

00:12:23,519 --> 00:12:28,079
in this case the proto-p org is proto-p

00:12:27,279 --> 00:12:31,120
dash

00:12:28,079 --> 00:12:34,560
io and then the project let's say is

00:12:31,120 --> 00:12:35,839
ping pong protos like that but we're

00:12:34,560 --> 00:12:36,639
it's not even gonna really have to check

00:12:35,839 --> 00:12:39,920
there because

00:12:36,639 --> 00:12:43,440
again we have the project linked locally

00:12:39,920 --> 00:12:45,920
so let's go ahead and try to run proto-p

00:12:43,440 --> 00:12:46,720
sync here and we'll do that using gradle

00:12:45,920 --> 00:12:50,880
build since it's

00:12:46,720 --> 00:12:50,880
built into that so i'm just gonna

00:12:51,120 --> 00:12:54,160
you can see proto psync is running and

00:12:52,800 --> 00:12:55,839
it looks like it succeeded

00:12:54,160 --> 00:12:57,760
so now i should see a new folder in my

00:12:55,839 --> 00:13:01,519
file tree here called

00:12:57,760 --> 00:13:03,519
proto-p and if i follow the tree down

00:13:01,519 --> 00:13:04,639
i can see that my api has been pulled

00:13:03,519 --> 00:13:06,320
into this project

00:13:04,639 --> 00:13:08,160
and again it didn't copy them this is

00:13:06,320 --> 00:13:09,279
just a link to my other project so as i

00:13:08,160 --> 00:13:11,440
make changes

00:13:09,279 --> 00:13:12,959
i'll actively see changes here as well

00:13:11,440 --> 00:13:15,200
and i'll be able to

00:13:12,959 --> 00:13:16,720
leverage them in my service so i'm going

00:13:15,200 --> 00:13:18,160
to go and implement the ping pong

00:13:16,720 --> 00:13:20,560
service now

00:13:18,160 --> 00:13:22,000
i'm going to collapse this and i'm going

00:13:20,560 --> 00:13:27,120
to create a new class

00:13:22,000 --> 00:13:27,120
called ping pong service

00:13:27,600 --> 00:13:31,519
okay and i'm going to have this extend

00:13:29,600 --> 00:13:33,839
the ping pong service

00:13:31,519 --> 00:13:36,560
implementation base and there's just

00:13:33,839 --> 00:13:38,880
that one rpc that i want to override

00:13:36,560 --> 00:13:40,079
and it's this guy right here ping pong

00:13:38,880 --> 00:13:42,320
which is going to take

00:13:40,079 --> 00:13:43,199
a response uh observer and it's going to

00:13:42,320 --> 00:13:44,880
pass back this

00:13:43,199 --> 00:13:46,240
stream observer so i want to override

00:13:44,880 --> 00:13:48,399
this default

00:13:46,240 --> 00:13:51,120
stuff here and i'm going to create a new

00:13:48,399 --> 00:13:51,120
stream observer

00:13:51,279 --> 00:13:54,959
and so every time i receive a ping

00:13:53,920 --> 00:13:58,560
message from

00:13:54,959 --> 00:14:01,440
the client what i want to do is respond

00:13:58,560 --> 00:14:03,839
i want to send back a pawn in the return

00:14:01,440 --> 00:14:03,839
observer

00:14:04,399 --> 00:14:07,519
so i'm just going to say responsive

00:14:05,760 --> 00:14:10,079
server dot on next

00:14:07,519 --> 00:14:12,560
and i'm going to create a pong using the

00:14:10,079 --> 00:14:14,800
nice java builder here

00:14:12,560 --> 00:14:16,399
and let's do some maintenance so we'll

00:14:14,800 --> 00:14:18,560
take care of that later

00:14:16,399 --> 00:14:20,639
and then when the client tells me that

00:14:18,560 --> 00:14:24,160
it's completed i'm also gonna

00:14:20,639 --> 00:14:24,160
close our connection here

00:14:24,399 --> 00:14:28,160
okay and i'm gonna do one last thing

00:14:26,399 --> 00:14:30,240
here just for the sake of

00:14:28,160 --> 00:14:31,519
having it i want to count how many pings

00:14:30,240 --> 00:14:33,839
i get so i can see that

00:14:31,519 --> 00:14:34,959
everything's really working as expected

00:14:33,839 --> 00:14:37,680
so i'm going to do out of

00:14:34,959 --> 00:14:38,639
a little log and i'm just going to use

00:14:37,680 --> 00:14:42,720
this here

00:14:38,639 --> 00:14:44,240
and let's say received ping

00:14:42,720 --> 00:14:45,760
and uh what i want to do is just

00:14:44,240 --> 00:14:49,839
increment every time

00:14:45,760 --> 00:14:52,880
this happens so i'm going to create a

00:14:49,839 --> 00:14:54,320
variable called count and let's make

00:14:52,880 --> 00:14:57,920
that here let's create a

00:14:54,320 --> 00:14:59,440
topic integer call it count and every

00:14:57,920 --> 00:15:01,920
time we get a call here let's

00:14:59,440 --> 00:15:03,199
increment and get okay so this should

00:15:01,920 --> 00:15:07,040
log out received

00:15:03,199 --> 00:15:09,600
number one two three uh as we go

00:15:07,040 --> 00:15:11,040
okay that's just about it last thing i

00:15:09,600 --> 00:15:11,760
need to do is just actually add that

00:15:11,040 --> 00:15:15,120
service

00:15:11,760 --> 00:15:16,240
to my server builder here so let's

00:15:15,120 --> 00:15:19,120
create a new

00:15:16,240 --> 00:15:20,639
ping pong service and we should be good

00:15:19,120 --> 00:15:23,440
to go so now i can just run

00:15:20,639 --> 00:15:24,160
gradle run and i should see this project

00:15:23,440 --> 00:15:27,839
running on

00:15:24,160 --> 00:15:30,160
port 8080

00:15:27,839 --> 00:15:30,959
if it all works out and there we go okay

00:15:30,160 --> 00:15:34,000
so

00:15:30,959 --> 00:15:35,360
uh it seems so so far so good

00:15:34,000 --> 00:15:37,519
the next thing i want to do is actually

00:15:35,360 --> 00:15:39,040
connect uh my other service to this

00:15:37,519 --> 00:15:40,160
using the same

00:15:39,040 --> 00:15:42,079
kind of pattern i'm going to add a

00:15:40,160 --> 00:15:43,839
manifest to this project

00:15:42,079 --> 00:15:46,240
and then we'll build the code from there

00:15:43,839 --> 00:15:50,160
so what i have set up so far is a simple

00:15:46,240 --> 00:15:50,880
node cli and it really it just gives me

00:15:50,160 --> 00:15:53,759
a little

00:15:50,880 --> 00:15:56,240
prompt here and what i want to happen is

00:15:53,759 --> 00:15:58,000
when i type this message in ping

00:15:56,240 --> 00:16:00,000
i want to get back a response from the

00:15:58,000 --> 00:16:02,320
service i want it to send

00:16:00,000 --> 00:16:03,600
a ping message using that rpc and then

00:16:02,320 --> 00:16:05,519
whenever it gets back

00:16:03,600 --> 00:16:07,040
pong as a message i want to do a log

00:16:05,519 --> 00:16:08,639
here and then open up another pump so i

00:16:07,040 --> 00:16:11,040
can keep doing that

00:16:08,639 --> 00:16:12,639
so it's not happening yet actually

00:16:11,040 --> 00:16:15,040
didn't mean it's not this guy so let's

00:16:12,639 --> 00:16:16,480
keep him up and running i wanted to stop

00:16:15,040 --> 00:16:19,759
this one

00:16:16,480 --> 00:16:21,120
and let's open our node project so

00:16:19,759 --> 00:16:22,800
first i need to pull the protos into

00:16:21,120 --> 00:16:24,320
this so i'm going to create a proto-p

00:16:22,800 --> 00:16:26,399
manifest and then i'm going to run

00:16:24,320 --> 00:16:28,000
the yarn install script since this is a

00:16:26,399 --> 00:16:30,000
yarn project

00:16:28,000 --> 00:16:31,440
in node and it's going to run this for

00:16:30,000 --> 00:16:33,279
me after it's installed the rest of

00:16:31,440 --> 00:16:35,759
these dependencies so it'll run proto-p

00:16:33,279 --> 00:16:38,240
sync and then this l flag means that

00:16:35,759 --> 00:16:40,079
it's also going to use the links

00:16:38,240 --> 00:16:42,560
so i'm going to create a new file call

00:16:40,079 --> 00:16:43,839
it protop.json

00:16:42,560 --> 00:16:45,839
and in the interest of time let's just

00:16:43,839 --> 00:16:47,360
go ahead and copy this since

00:16:45,839 --> 00:16:50,240
it's using the same dependencies from

00:16:47,360 --> 00:16:54,639
the service

00:16:50,240 --> 00:16:55,759
okay so now i should be able to run yarn

00:16:54,639 --> 00:16:57,040
and you see it's running the command

00:16:55,759 --> 00:16:58,160
right there and it looks like it worked

00:16:57,040 --> 00:17:00,800
okay

00:16:58,160 --> 00:17:03,199
so let's check the same directory here

00:17:00,800 --> 00:17:05,199
and let's see if our api looks good

00:17:03,199 --> 00:17:06,240
yep so this is again you can see this

00:17:05,199 --> 00:17:10,079
little arrow here

00:17:06,240 --> 00:17:12,319
in uh visual studio code this just also

00:17:10,079 --> 00:17:15,760
just means it's a symbolic link so

00:17:12,319 --> 00:17:17,600
it seems like this is working all right

00:17:15,760 --> 00:17:19,439
so what i want to do is load those

00:17:17,600 --> 00:17:21,919
protos into the script now

00:17:19,439 --> 00:17:24,319
so i need a few apis to do that so

00:17:21,919 --> 00:17:28,559
there's a grpc library

00:17:24,319 --> 00:17:30,720
for node and that is a grpc js

00:17:28,559 --> 00:17:34,480
and then i also need the proto loader to

00:17:30,720 --> 00:17:34,480
actually load them initially

00:17:34,799 --> 00:17:38,640
and that's this guy right here and i'm

00:17:37,280 --> 00:17:43,600
going to create a little

00:17:38,640 --> 00:17:43,600
constant for the path to the protos

00:17:44,080 --> 00:17:50,720
i'm just going to point to the uh

00:17:47,280 --> 00:17:52,559
this api.proto right here

00:17:50,720 --> 00:17:54,160
and i can just say dot proto and i'm

00:17:52,559 --> 00:17:57,039
just following this

00:17:54,160 --> 00:17:58,240
all of this uh tree down here so path

00:17:57,039 --> 00:18:02,080
proto p

00:17:58,240 --> 00:18:04,240
ping pong and then our file is api.proto

00:18:02,080 --> 00:18:07,360
okay so i should be able to load these

00:18:04,240 --> 00:18:08,960
now let's say protoloader.load

00:18:07,360 --> 00:18:11,840
and we're going to use the async api

00:18:08,960 --> 00:18:12,960
which is leveraging the promise api node

00:18:11,840 --> 00:18:14,799
and that just means that

00:18:12,960 --> 00:18:16,640
when i give it a protopath here it's

00:18:14,799 --> 00:18:18,720
going to return a promise

00:18:16,640 --> 00:18:20,080
and the api looks kind of like this and

00:18:18,720 --> 00:18:21,679
this just means that once that happens

00:18:20,080 --> 00:18:24,080
it'll run this callback

00:18:21,679 --> 00:18:25,200
and it gives me a function where i can

00:18:24,080 --> 00:18:27,520
pass in an argument

00:18:25,200 --> 00:18:29,120
and let's say that that's the definition

00:18:27,520 --> 00:18:31,360
and i can do stuff with it

00:18:29,120 --> 00:18:32,960
and what i want to do is use the grpc

00:18:31,360 --> 00:18:35,360
library now to actually

00:18:32,960 --> 00:18:36,720
get a meaningful object that i can

00:18:35,360 --> 00:18:38,160
create a service with

00:18:36,720 --> 00:18:40,880
so i'm going to pass the definition in

00:18:38,160 --> 00:18:42,400
here and i'm going to call this proto so

00:18:40,880 --> 00:18:45,760
that when that happens

00:18:42,400 --> 00:18:47,440
i can start using this

00:18:45,760 --> 00:18:48,720
before i do anything else so let's pull

00:18:47,440 --> 00:18:50,400
the rest of this code in here and make

00:18:48,720 --> 00:18:53,280
sure that nothing happens until we've

00:18:50,400 --> 00:18:53,280
loaded our protos

00:18:54,320 --> 00:18:58,400
and i'm going to create an instance of a

00:18:55,919 --> 00:19:00,080
client now so we'll call it client

00:18:58,400 --> 00:19:02,240
and all i need to do is just follow the

00:19:00,080 --> 00:19:04,960
tree down i know that the api

00:19:02,240 --> 00:19:05,840
is under protop dot ping pong so i can

00:19:04,960 --> 00:19:07,840
just

00:19:05,840 --> 00:19:09,760
follow that from the top of the g here

00:19:07,840 --> 00:19:13,679
and just say proto p

00:19:09,760 --> 00:19:15,600
ping-pong and in the javascript

00:19:13,679 --> 00:19:18,640
implementation of grpc the

00:19:15,600 --> 00:19:20,799
naming convention is just uh it's not

00:19:18,640 --> 00:19:22,799
like client or stub or anything it just

00:19:20,799 --> 00:19:24,720
is called service like that so you're

00:19:22,799 --> 00:19:27,440
creating a client stub of the service

00:19:24,720 --> 00:19:28,720
i'm using that name like that and then

00:19:27,440 --> 00:19:30,400
the first argument that it needs is

00:19:28,720 --> 00:19:31,840
where the service is running so that was

00:19:30,400 --> 00:19:33,840
on port 8080

00:19:31,840 --> 00:19:35,760
and then it needs credentials but in

00:19:33,840 --> 00:19:36,320
this case we're not authenticating so

00:19:35,760 --> 00:19:39,919
let's just

00:19:36,320 --> 00:19:43,679
pass in insecure credentials like that

00:19:39,919 --> 00:19:46,880
okay and so now i should

00:19:43,679 --> 00:19:48,880
be able to create a open up a stream

00:19:46,880 --> 00:19:49,919
with a server so let's do that let's say

00:19:48,880 --> 00:19:51,200
that

00:19:49,919 --> 00:19:52,520
let's call it ping pong because that's

00:19:51,200 --> 00:19:54,240
what it is and let's just say

00:19:52,520 --> 00:19:56,640
client.ping

00:19:54,240 --> 00:19:58,240
pong like this so i should be able to

00:19:56,640 --> 00:19:59,520
use this to start sending messages to

00:19:58,240 --> 00:20:01,200
the server now

00:19:59,520 --> 00:20:02,799
so what was happening was every time i

00:20:01,200 --> 00:20:04,320
put this phrase into the console it was

00:20:02,799 --> 00:20:05,520
just opening up a new prompt but i

00:20:04,320 --> 00:20:09,280
actually don't want to do that

00:20:05,520 --> 00:20:12,320
i want to send a message

00:20:09,280 --> 00:20:14,640
and the api in javascript is like this

00:20:12,320 --> 00:20:16,240
it's just ping pong dot right

00:20:14,640 --> 00:20:18,159
and we're going to pass an empty message

00:20:16,240 --> 00:20:20,799
because there's nothing inside of

00:20:18,159 --> 00:20:22,240
those ping messages but i'm just going

00:20:20,799 --> 00:20:24,480
to put a little note here so that we

00:20:22,240 --> 00:20:28,240
know what's happening

00:20:24,480 --> 00:20:30,559
okay and i also want to listen for

00:20:28,240 --> 00:20:32,880
prong messages from the server so the

00:20:30,559 --> 00:20:35,440
api for that is just an event listener

00:20:32,880 --> 00:20:36,559
say on data and i don't need to do

00:20:35,440 --> 00:20:38,640
anything with that because that's just

00:20:36,559 --> 00:20:41,039
an empty object but i do want to log

00:20:38,640 --> 00:20:43,679
something to the console when it happens

00:20:41,039 --> 00:20:44,880
so i have a nifty little message sorry

00:20:43,679 --> 00:20:46,559
function here that's going to do that

00:20:44,880 --> 00:20:51,520
for me

00:20:46,559 --> 00:20:54,159
and we're gonna use that to

00:20:51,520 --> 00:20:55,039
just log out pong and we're gonna have a

00:20:54,159 --> 00:20:58,080
little cartoon

00:20:55,039 --> 00:20:59,679
cal say that for us uh and then i want

00:20:58,080 --> 00:21:00,000
to open up another pump so that i can

00:20:59,679 --> 00:21:02,960
keep

00:21:00,000 --> 00:21:04,400
sending messages to the server and also

00:21:02,960 --> 00:21:05,919
whenever i close

00:21:04,400 --> 00:21:07,600
whenever i try to exit the application i

00:21:05,919 --> 00:21:10,240
want to do a little bit of maintenance

00:21:07,600 --> 00:21:12,559
so i'm going to tell the server that

00:21:10,240 --> 00:21:14,880
we're done talking to it

00:21:12,559 --> 00:21:16,799
and when the server is done talking with

00:21:14,880 --> 00:21:19,039
us i also want to

00:21:16,799 --> 00:21:19,919
go ahead and just close out the prompt

00:21:19,039 --> 00:21:22,960
so let's say

00:21:19,919 --> 00:21:22,960
on end

00:21:24,480 --> 00:21:29,520
and we're going to close the prompt and

00:21:27,600 --> 00:21:32,640
we'll go ahead and

00:21:29,520 --> 00:21:34,640
exit okay

00:21:32,640 --> 00:21:36,559
so this uh ideally what's going to

00:21:34,640 --> 00:21:39,039
happen now is when i type in ping we're

00:21:36,559 --> 00:21:40,799
going to send a message to the service

00:21:39,039 --> 00:21:42,720
and when we get data back we're going to

00:21:40,799 --> 00:21:46,559
log it out open up a new prompt

00:21:42,720 --> 00:21:49,760
and uh let's let's see if it works now

00:21:46,559 --> 00:21:51,039
so if i open up my prompt here um let's

00:21:49,760 --> 00:21:53,679
see it didn't like

00:21:51,039 --> 00:21:54,880
it didn't like my path here so i must

00:21:53,679 --> 00:21:57,280
have done something wrong it looks like

00:21:54,880 --> 00:22:00,720
a little typo so let's fix that

00:21:57,280 --> 00:22:00,720
and let's try this one more time

00:22:01,039 --> 00:22:04,400
okay it still didn't like uh something

00:22:03,440 --> 00:22:06,960
ah

00:22:04,400 --> 00:22:08,320
another little uh thing here i need to

00:22:06,960 --> 00:22:09,840
pass this guy

00:22:08,320 --> 00:22:12,400
the new keyword so we're creating an

00:22:09,840 --> 00:22:13,440
instance of the class let's give it one

00:22:12,400 --> 00:22:14,480
more shot

00:22:13,440 --> 00:22:16,640
there we go all right so we have a

00:22:14,480 --> 00:22:18,320
prompt here so fingers crossed

00:22:16,640 --> 00:22:20,240
when i type enter i want to see a

00:22:18,320 --> 00:22:21,280
message in the service saying that it

00:22:20,240 --> 00:22:23,919
got

00:22:21,280 --> 00:22:25,280
another king from my client and i want

00:22:23,919 --> 00:22:27,440
to see a little cartoon

00:22:25,280 --> 00:22:29,280
cow saying that they got a response from

00:22:27,440 --> 00:22:31,440
the server so here goes nothing

00:22:29,280 --> 00:22:32,400
there we go so the surface is uh

00:22:31,440 --> 00:22:34,240
counting the

00:22:32,400 --> 00:22:35,600
messages it's getting from the client

00:22:34,240 --> 00:22:37,840
and we have our little cartoon

00:22:35,600 --> 00:22:39,200
cow talking back to us let's try it one

00:22:37,840 --> 00:22:40,400
more time just to see if

00:22:39,200 --> 00:22:42,480
it's incrementing and everything's

00:22:40,400 --> 00:22:43,520
happening as expected and there we go

00:22:42,480 --> 00:22:46,559
our cal is happy

00:22:43,520 --> 00:22:47,039
and our service is uh bumping up the

00:22:46,559 --> 00:22:50,000
number

00:22:47,039 --> 00:22:50,799
as we go so there's uh our example of a

00:22:50,000 --> 00:22:54,240
distributed

00:22:50,799 --> 00:22:57,600
grpc app using proto-p

00:22:54,240 --> 00:23:00,000
to share the proto packages across

00:22:57,600 --> 00:23:00,000
projects

00:23:02,480 --> 00:23:06,480
so following up with this what doesn't

00:23:04,799 --> 00:23:08,799
proto-p do though

00:23:06,480 --> 00:23:10,640
it doesn't again enforce any patterns

00:23:08,799 --> 00:23:13,200
for developing protobufs

00:23:10,640 --> 00:23:14,640
um but it again it does kind of suggest

00:23:13,200 --> 00:23:17,360
that you can do stuff

00:23:14,640 --> 00:23:18,559
in this way um with and really minimize

00:23:17,360 --> 00:23:20,400
your workflow

00:23:18,559 --> 00:23:22,400
doesn't fix everything or remove all the

00:23:20,400 --> 00:23:23,440
complexity you still have to decide how

00:23:22,400 --> 00:23:26,480
to organize and

00:23:23,440 --> 00:23:27,520
architect your stack and once you get

00:23:26,480 --> 00:23:30,240
there hopefully

00:23:27,520 --> 00:23:32,080
leveraging tools like this to keep it as

00:23:30,240 --> 00:23:35,120
simple as you can

00:23:32,080 --> 00:23:37,679
until you just have to add add

00:23:35,120 --> 00:23:39,120
things like pipelines and and all that

00:23:37,679 --> 00:23:40,960
and then it also doesn't deal with code

00:23:39,120 --> 00:23:42,720
generation so that's kind of the biggest

00:23:40,960 --> 00:23:44,480
thing for this is it just passes the

00:23:42,720 --> 00:23:46,720
protos around and it doesn't

00:23:44,480 --> 00:23:48,400
become uh it doesn't add any

00:23:46,720 --> 00:23:50,159
complication to the actual

00:23:48,400 --> 00:23:52,960
code generation part of protos it

00:23:50,159 --> 00:23:54,720
doesn't really get involved

00:23:52,960 --> 00:23:56,240
at once that happens that's kind of the

00:23:54,720 --> 00:23:59,679
point of departure

00:23:56,240 --> 00:24:01,120
for this tool but what does it do

00:23:59,679 --> 00:24:03,039
it suggests simpler patterns for

00:24:01,120 --> 00:24:05,600
developing protobufs

00:24:03,039 --> 00:24:06,240
as we've seen and it makes it simpler

00:24:05,600 --> 00:24:08,640
and just

00:24:06,240 --> 00:24:10,720
easier to develop and collaborate on

00:24:08,640 --> 00:24:12,400
projects that use protobufs

00:24:10,720 --> 00:24:14,559
and this doesn't matter what size your

00:24:12,400 --> 00:24:15,679
team is or what kind of resources you

00:24:14,559 --> 00:24:17,200
have

00:24:15,679 --> 00:24:18,720
as you just saw it was pretty easy to

00:24:17,200 --> 00:24:21,120
get up and running

00:24:18,720 --> 00:24:22,640
locally and still have a clean

00:24:21,120 --> 00:24:23,440
architecture where i have my three

00:24:22,640 --> 00:24:25,840
independent

00:24:23,440 --> 00:24:28,400
repositories and i didn't have to do any

00:24:25,840 --> 00:24:30,159
copying or pasting or create a monolith

00:24:28,400 --> 00:24:32,159
and then finally it just focuses on that

00:24:30,159 --> 00:24:32,799
one thing just being a decent package

00:24:32,159 --> 00:24:37,480
manager

00:24:32,799 --> 00:24:40,480
and and that's the intention there thank

00:24:37,480 --> 00:24:40,480

YouTube URL: https://www.youtube.com/watch?v=q1KWl-vPi6w


