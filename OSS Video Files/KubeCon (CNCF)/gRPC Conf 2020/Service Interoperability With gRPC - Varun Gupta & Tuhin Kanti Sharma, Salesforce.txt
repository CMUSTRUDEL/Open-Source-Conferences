Title: Service Interoperability With gRPC - Varun Gupta & Tuhin Kanti Sharma, Salesforce
Publication date: 2020-08-01
Playlist: gRPC Conf 2020
Description: 
	Service Interoperability With gRPC - Varun Gupta & Tuhin Kanti Sharma, Salesforce 

This session will talk about the need for standardization for service to service communication at Salesforce and a solution that is implemented using gRPC across polyglot systems. We will share the implementation of our framework for Last Known Good [Artifact] service using gRPC. We will discuss how we used Java Spring Boot to implement a gRPC call framework and integrated it with a standard authentication protocol used at Salesforce. We will also share our future plans of moving to reactive streams for our gRPC service in Java.
Captions: 
	00:00:00,080 --> 00:00:05,040
good afternoon i'm varun gupta vp of

00:00:03,040 --> 00:00:07,359
engineering at salesforce and with me

00:00:05,040 --> 00:00:09,360
i have tahin khanti sharma a lead

00:00:07,359 --> 00:00:12,240
engineer in our team

00:00:09,360 --> 00:00:13,840
today we'll be sharing with you how we

00:00:12,240 --> 00:00:15,839
use grpc

00:00:13,840 --> 00:00:16,880
and a set of salesforce open source

00:00:15,839 --> 00:00:20,080
libraries

00:00:16,880 --> 00:00:21,520
to implement interoperability with a set

00:00:20,080 --> 00:00:26,000
of polyglot clients

00:00:21,520 --> 00:00:26,000
for one of the services on our platform

00:00:26,960 --> 00:00:30,560
there are two types of business apps

00:00:28,840 --> 00:00:32,800
users

00:00:30,560 --> 00:00:35,280
ones who have used salesforce and ones

00:00:32,800 --> 00:00:38,399
who will use salesforce

00:00:35,280 --> 00:00:40,800
so please remember any purchase decision

00:00:38,399 --> 00:00:41,440
should solely be based on currently

00:00:40,800 --> 00:00:45,440
available

00:00:41,440 --> 00:00:48,000
products and services

00:00:45,440 --> 00:00:48,719
thank you all for joining us today and

00:00:48,000 --> 00:00:51,280
giving us an

00:00:48,719 --> 00:00:52,239
opportunity to share our implementation

00:00:51,280 --> 00:00:54,480
with you

00:00:52,239 --> 00:00:57,280
and a big thanks to the organizers of

00:00:54,480 --> 00:00:59,199
the grpc conference for enabling us

00:00:57,280 --> 00:01:00,480
in these special times to bring a

00:00:59,199 --> 00:01:03,840
representation to you

00:01:00,480 --> 00:01:03,840
in this virtualized forum

00:01:05,040 --> 00:01:09,200
before we jump into the cool stuff a bit

00:01:07,760 --> 00:01:11,040
about myself

00:01:09,200 --> 00:01:12,960
i've been very lucky to be with

00:01:11,040 --> 00:01:15,119
salesforce for 10 plus years

00:01:12,960 --> 00:01:16,080
and have had opportunities to learn from

00:01:15,119 --> 00:01:18,400
the best

00:01:16,080 --> 00:01:19,439
i've always considered myself to be a

00:01:18,400 --> 00:01:21,280
learner

00:01:19,439 --> 00:01:22,479
whether it is engineering or other

00:01:21,280 --> 00:01:24,159
things in life

00:01:22,479 --> 00:01:26,400
there is something you can learn every

00:01:24,159 --> 00:01:28,720
day my current learning journey

00:01:26,400 --> 00:01:30,640
outside of work has been piano and music

00:01:28,720 --> 00:01:33,040
theory and i've been surprised on how

00:01:30,640 --> 00:01:36,320
closely it relates to engineering

00:01:33,040 --> 00:01:38,560
i love moderately risky sports

00:01:36,320 --> 00:01:39,680
i've been a licensed private pilot for

00:01:38,560 --> 00:01:41,759
10 plus years

00:01:39,680 --> 00:01:43,119
and i don't even remember the first time

00:01:41,759 --> 00:01:46,320
i took a motorcycle out

00:01:43,119 --> 00:01:47,200
what i do remember is that it was well

00:01:46,320 --> 00:01:50,560
before i

00:01:47,200 --> 00:01:53,040
drove a car i also got into sailing some

00:01:50,560 --> 00:01:55,840
years ago but had to hit a pause on that

00:01:53,040 --> 00:01:57,600
after my son was born he's five now so

00:01:55,840 --> 00:02:00,240
i'm just waiting for him to

00:01:57,600 --> 00:02:02,240
get to the age so that he can crew and i

00:02:00,240 --> 00:02:05,360
can then relax while he does the hard

00:02:02,240 --> 00:02:05,360
work when we go sailing

00:02:05,600 --> 00:02:10,160
now that you know a bit about me let me

00:02:07,920 --> 00:02:13,200
share something about salesforce

00:02:10,160 --> 00:02:14,560
at salesforce we are driven by a set of

00:02:13,200 --> 00:02:17,360
values

00:02:14,560 --> 00:02:18,160
trust customer success innovation and

00:02:17,360 --> 00:02:22,080
equality

00:02:18,160 --> 00:02:24,160
are our four core values and the value

00:02:22,080 --> 00:02:26,720
i want to focus on today is that of

00:02:24,160 --> 00:02:26,720
innovation

00:02:27,520 --> 00:02:33,120
salesforce has been repeatedly

00:02:29,280 --> 00:02:35,360
recognized as a leader in innovation

00:02:33,120 --> 00:02:36,160
and my team and i have had the

00:02:35,360 --> 00:02:38,800
opportunity

00:02:36,160 --> 00:02:40,319
to innovate infrastructure to allow rest

00:02:38,800 --> 00:02:42,400
of salesforce to deliver

00:02:40,319 --> 00:02:44,239
their innovations faster to our

00:02:42,400 --> 00:02:47,200
customers

00:02:44,239 --> 00:02:49,599
we provide a simple and repeatable

00:02:47,200 --> 00:02:51,920
platform that delivers environments to

00:02:49,599 --> 00:02:53,920
salesforce engineers for development

00:02:51,920 --> 00:02:57,519
test and production

00:02:53,920 --> 00:03:00,239
the platform is extensible scalable

00:02:57,519 --> 00:03:02,000
and evolves to meet the needs of current

00:03:00,239 --> 00:03:05,840
and future instantiations

00:03:02,000 --> 00:03:05,840
across multiple substrates

00:03:06,000 --> 00:03:12,319
salesforce services are interconnected

00:03:09,200 --> 00:03:12,879
so as to allow our users to have a 360

00:03:12,319 --> 00:03:16,159
view

00:03:12,879 --> 00:03:18,879
of their customers developers

00:03:16,159 --> 00:03:20,560
building these services need a way to

00:03:18,879 --> 00:03:23,200
set up their environments

00:03:20,560 --> 00:03:23,599
with a combination of these services to

00:03:23,200 --> 00:03:26,799
build

00:03:23,599 --> 00:03:27,360
and test their integrations and that is

00:03:26,799 --> 00:03:31,120
when

00:03:27,360 --> 00:03:33,200
they use our environments platform

00:03:31,120 --> 00:03:35,120
they use the platform to set up a

00:03:33,200 --> 00:03:37,280
combination of these services

00:03:35,120 --> 00:03:39,280
while building and validating their

00:03:37,280 --> 00:03:40,640
integrations in various representative

00:03:39,280 --> 00:03:43,360
environments

00:03:40,640 --> 00:03:44,480
the environment platform allows users to

00:03:43,360 --> 00:03:46,640
request

00:03:44,480 --> 00:03:48,720
a set of services with customized

00:03:46,640 --> 00:03:50,159
versions to be set up for validating

00:03:48,720 --> 00:03:52,720
integrations

00:03:50,159 --> 00:03:53,439
and one of the most critical aspect of

00:03:52,720 --> 00:03:56,000
setting up

00:03:53,439 --> 00:03:58,560
the environment is ensuring that the

00:03:56,000 --> 00:04:01,680
version of the service deployed

00:03:58,560 --> 00:04:03,599
will be functional and compatible with

00:04:01,680 --> 00:04:05,200
versions of other services being

00:04:03,599 --> 00:04:08,480
deployed

00:04:05,200 --> 00:04:09,120
and we achieve this through the last

00:04:08,480 --> 00:04:12,159
known good

00:04:09,120 --> 00:04:12,159
artifact service

00:04:12,239 --> 00:04:16,160
the last known good artifact service

00:04:14,239 --> 00:04:19,680
validates service versions

00:04:16,160 --> 00:04:20,720
to identify which version of an artifact

00:04:19,680 --> 00:04:23,120
can be used

00:04:20,720 --> 00:04:25,120
so to set up the service successfully in

00:04:23,120 --> 00:04:28,000
a representative environment

00:04:25,120 --> 00:04:28,880
it uses an array of deployment clusters

00:04:28,000 --> 00:04:31,919
to simulate

00:04:28,880 --> 00:04:33,680
a set of configurations and validate

00:04:31,919 --> 00:04:37,520
which internal versions of various

00:04:33,680 --> 00:04:40,800
services can work coherently together

00:04:37,520 --> 00:04:43,919
and that information is then consumed

00:04:40,800 --> 00:04:48,160
by multiple polyglot clients in use for

00:04:43,919 --> 00:04:49,919
environment setup these clients

00:04:48,160 --> 00:04:52,639
implemented in various different

00:04:49,919 --> 00:04:55,280
programming languages could exist across

00:04:52,639 --> 00:04:56,880
several different substrates and need to

00:04:55,280 --> 00:04:59,759
interact with the last known good

00:04:56,880 --> 00:05:01,960
artifact service in a seamless manner

00:04:59,759 --> 00:05:03,600
and to achieve that high degree of

00:05:01,960 --> 00:05:06,320
interoperability

00:05:03,600 --> 00:05:10,560
we adopted grpc as our framework of

00:05:06,320 --> 00:05:13,680
choice for this implementation

00:05:10,560 --> 00:05:14,400
do you remember the last time you went

00:05:13,680 --> 00:05:16,160
to a team

00:05:14,400 --> 00:05:18,400
for adopting a new version of your

00:05:16,160 --> 00:05:21,520
service

00:05:18,400 --> 00:05:24,080
and likely they could only commit to

00:05:21,520 --> 00:05:25,919
next release if you were lucky or maybe

00:05:24,080 --> 00:05:27,199
you bribed them with resources to cover

00:05:25,919 --> 00:05:30,240
their on-call support

00:05:27,199 --> 00:05:32,320
for a month it probably wasn't a

00:05:30,240 --> 00:05:34,320
surprise if the answer was

00:05:32,320 --> 00:05:36,240
that they will be able to consume it

00:05:34,320 --> 00:05:39,680
sometime next year

00:05:36,240 --> 00:05:42,080
well using grpc we were able to develop

00:05:39,680 --> 00:05:44,400
idiomatic client and service stubs that

00:05:42,080 --> 00:05:46,880
allowed us to enhance our service

00:05:44,400 --> 00:05:49,759
dynamically without having to ask our

00:05:46,880 --> 00:05:53,360
clients to update their implementation

00:05:49,759 --> 00:05:54,560
with native mtls integration it provided

00:05:53,360 --> 00:05:56,479
us capability

00:05:54,560 --> 00:05:59,039
to build a secure and authenticated

00:05:56,479 --> 00:06:00,720
communication setup

00:05:59,039 --> 00:06:03,199
and we were able to achieve a high

00:06:00,720 --> 00:06:04,880
degree of consistency and reliability

00:06:03,199 --> 00:06:07,360
through features like speculative

00:06:04,880 --> 00:06:07,680
retries as well as achieve low latency

00:06:07,360 --> 00:06:11,840
for

00:06:07,680 --> 00:06:14,240
requests and responses and of course

00:06:11,840 --> 00:06:14,960
the power of open source allowed us to

00:06:14,240 --> 00:06:17,360
tap into

00:06:14,960 --> 00:06:18,720
collective community enhancements at a

00:06:17,360 --> 00:06:20,960
much faster pace

00:06:18,720 --> 00:06:23,759
than what we have achieved so what we

00:06:20,960 --> 00:06:26,720
could have achieved ourselves

00:06:23,759 --> 00:06:28,639
let me now invite tahin to walk you

00:06:26,720 --> 00:06:32,479
through the architecture of the service

00:06:28,639 --> 00:06:32,479
and some of the implementation details

00:06:33,600 --> 00:06:39,759
thanks varun um so

00:06:37,520 --> 00:06:41,600
i'll introduce myself uh i've been at

00:06:39,759 --> 00:06:43,520
salesforce for more than seven years

00:06:41,600 --> 00:06:45,039
and have experienced its rapid pace of

00:06:43,520 --> 00:06:46,639
innovation

00:06:45,039 --> 00:06:49,280
in addition to all the great stuff we

00:06:46,639 --> 00:06:51,680
built i've been fortunate to find time

00:06:49,280 --> 00:06:54,160
to do my favorite activities

00:06:51,680 --> 00:06:56,560
i'm a passionate skier in the winters

00:06:54,160 --> 00:06:58,960
try to go there almost every weekend

00:06:56,560 --> 00:07:00,639
uh love to bike in the summers and try

00:06:58,960 --> 00:07:04,000
to be try to hike whenever

00:07:00,639 --> 00:07:07,360
else i get time i also love sports and

00:07:04,000 --> 00:07:09,840
i love to play soccer i

00:07:07,360 --> 00:07:11,680
really find great satisfaction in one of

00:07:09,840 --> 00:07:14,560
our sales forces course values and the

00:07:11,680 --> 00:07:16,880
which is of giving back to the community

00:07:14,560 --> 00:07:19,039
it has provided me immense opportunities

00:07:16,880 --> 00:07:22,720
to volunteer in my community

00:07:19,039 --> 00:07:24,560
and outside uh this was about me

00:07:22,720 --> 00:07:26,960
uh let's learn a little bit about our

00:07:24,560 --> 00:07:26,960
service

00:07:27,520 --> 00:07:30,639
let's dive deep into the service

00:07:28,960 --> 00:07:33,520
architecture

00:07:30,639 --> 00:07:34,000
and we'll walk from left to right you

00:07:33,520 --> 00:07:36,400
would

00:07:34,000 --> 00:07:37,120
you would notice that our service

00:07:36,400 --> 00:07:39,440
depends

00:07:37,120 --> 00:07:41,759
on a set of a deployment cluster to find

00:07:39,440 --> 00:07:44,080
the last known good artifact service

00:07:41,759 --> 00:07:45,199
it has a set of consumers on the same

00:07:44,080 --> 00:07:48,319
substrate

00:07:45,199 --> 00:07:49,199
which are in python it has a set of

00:07:48,319 --> 00:07:50,720
consumers

00:07:49,199 --> 00:07:52,240
in a different substrate which is in

00:07:50,720 --> 00:07:54,800
java

00:07:52,240 --> 00:07:55,840
so you see that there are clients in

00:07:54,800 --> 00:07:57,840
different languages

00:07:55,840 --> 00:08:00,160
in python and java and they're also in

00:07:57,840 --> 00:08:03,039
different substrates

00:08:00,160 --> 00:08:04,240
we see that these polygraph clients uh

00:08:03,039 --> 00:08:05,919
would work really well

00:08:04,240 --> 00:08:07,520
if we had a consistent way of

00:08:05,919 --> 00:08:08,560
communicating with them and there's

00:08:07,520 --> 00:08:10,560
where grpc

00:08:08,560 --> 00:08:13,360
and protobuf helps us in creating a

00:08:10,560 --> 00:08:17,039
language neutral solution

00:08:13,360 --> 00:08:17,039
let's look at the protobuf message

00:08:18,720 --> 00:08:22,800
so we so the product of message consists

00:08:21,120 --> 00:08:24,879
of two parts

00:08:22,800 --> 00:08:26,479
one part is the message the other part

00:08:24,879 --> 00:08:28,720
is the service definition

00:08:26,479 --> 00:08:30,800
uh while walking through this uh message

00:08:28,720 --> 00:08:31,840
and and the subsequent implementations i

00:08:30,800 --> 00:08:32,399
we're going to walk through the life

00:08:31,840 --> 00:08:35,120
cycle of

00:08:32,399 --> 00:08:37,120
the last known good service you would

00:08:35,120 --> 00:08:37,599
notice this message is strongly typed it

00:08:37,120 --> 00:08:40,880
has

00:08:37,599 --> 00:08:43,680
like string formatted

00:08:40,880 --> 00:08:44,159
fields and it is language agnostic this

00:08:43,680 --> 00:08:47,839
is not

00:08:44,159 --> 00:08:49,839
a specific language and it enables

00:08:47,839 --> 00:08:51,600
us to generate clients in any supported

00:08:49,839 --> 00:08:53,440
language

00:08:51,600 --> 00:08:56,080
now you now i want to talk about the

00:08:53,440 --> 00:08:58,780
forwards and backwards compatibility

00:08:56,080 --> 00:09:00,160
uh so if you would see uh

00:08:58,780 --> 00:09:03,519
[Music]

00:09:00,160 --> 00:09:08,480
that if we introduce a new field and

00:09:03,519 --> 00:09:10,560
uh click please

00:09:08,480 --> 00:09:11,519
you will see that there is we just

00:09:10,560 --> 00:09:13,680
introduced new field

00:09:11,519 --> 00:09:14,720
uh release and this does not break

00:09:13,680 --> 00:09:17,680
clients

00:09:14,720 --> 00:09:19,040
the clients which were using the earlier

00:09:17,680 --> 00:09:20,080
version of the service continue to

00:09:19,040 --> 00:09:22,959
ignore this field

00:09:20,080 --> 00:09:23,519
and now we can have the new clients

00:09:22,959 --> 00:09:26,480
which can

00:09:23,519 --> 00:09:27,920
now start consuming this new field this

00:09:26,480 --> 00:09:29,519
enables us to have

00:09:27,920 --> 00:09:31,760
to ship versions without breaking

00:09:29,519 --> 00:09:34,480
clients existing client

00:09:31,760 --> 00:09:36,640
and this helps us in in having a

00:09:34,480 --> 00:09:38,160
consistent experience for our customers

00:09:36,640 --> 00:09:40,880
since we now looked at the protocol

00:09:38,160 --> 00:09:43,519
format let's look at the service

00:09:40,880 --> 00:09:43,519
definition

00:09:44,080 --> 00:09:48,000
you would notice in the service

00:09:45,360 --> 00:09:51,360
definition that it's again

00:09:48,000 --> 00:09:52,880
language agnostic it is talking about uh

00:09:51,360 --> 00:09:54,880
and strongly type it's just talking

00:09:52,880 --> 00:09:58,720
about the service methods it has

00:09:54,880 --> 00:09:59,760
return types in stream and grpc enables

00:09:58,720 --> 00:10:02,720
us to have a very

00:09:59,760 --> 00:10:04,320
simple martial link protocol it helps us

00:10:02,720 --> 00:10:05,839
enable streaming which gives us better

00:10:04,320 --> 00:10:07,760
availability

00:10:05,839 --> 00:10:09,200
and works with well with mtls

00:10:07,760 --> 00:10:10,959
authentication so we get authentication

00:10:09,200 --> 00:10:13,200
and encryption

00:10:10,959 --> 00:10:14,800
the the protocol part of this service is

00:10:13,200 --> 00:10:16,720
complete as we talked about the message

00:10:14,800 --> 00:10:18,079
and now we talked about the service

00:10:16,720 --> 00:10:21,279
now let's look at a sample

00:10:18,079 --> 00:10:21,279
implementation in java

00:10:22,560 --> 00:10:25,519
and here is where we would like to

00:10:23,760 --> 00:10:26,800
introduce a couple of salesforce open

00:10:25,519 --> 00:10:29,120
source libraries

00:10:26,800 --> 00:10:32,880
which is which helps us to write a

00:10:29,120 --> 00:10:35,279
springboard integrations in grpc

00:10:32,880 --> 00:10:36,720
let's look at one of them and that's the

00:10:35,279 --> 00:10:38,240
grpc spring

00:10:36,720 --> 00:10:39,760
people who are familiar with spring boot

00:10:38,240 --> 00:10:42,079
know that a service definition is

00:10:39,760 --> 00:10:45,440
annotated with at the service

00:10:42,079 --> 00:10:47,600
annotation which marks this being this

00:10:45,440 --> 00:10:49,040
service definition as a service to the

00:10:47,600 --> 00:10:51,040
spring framework

00:10:49,040 --> 00:10:53,519
similarly with the grpc spring library

00:10:51,040 --> 00:10:56,000
we can now annotate with at

00:10:53,519 --> 00:10:58,640
grpc service and it provides the same

00:10:56,000 --> 00:11:00,480
semantics as a spring service

00:10:58,640 --> 00:11:02,399
the rest of the service definition

00:11:00,480 --> 00:11:05,519
emulates uh

00:11:02,399 --> 00:11:06,320
archetype spring service and we can

00:11:05,519 --> 00:11:08,399
continue to

00:11:06,320 --> 00:11:09,839
develop on the very familiar way we

00:11:08,399 --> 00:11:11,760
we're used to

00:11:09,839 --> 00:11:13,279
now that we have defined the service

00:11:11,760 --> 00:11:15,839
let's look at how we can stream a

00:11:13,279 --> 00:11:15,839
response

00:11:16,800 --> 00:11:19,920
we will be talking about the unitary

00:11:19,200 --> 00:11:21,760
streaming here

00:11:19,920 --> 00:11:24,320
uh there is bi-directional streaming too

00:11:21,760 --> 00:11:26,399
we used unary streaming

00:11:24,320 --> 00:11:29,040
in this code fragment find enable

00:11:26,399 --> 00:11:30,480
configurations will stream its response

00:11:29,040 --> 00:11:32,240
as you will notice that there is a

00:11:30,480 --> 00:11:33,680
return type but instead we use the

00:11:32,240 --> 00:11:35,519
stream there isn't a return type

00:11:33,680 --> 00:11:37,040
uh i beg your pardon and instead we use

00:11:35,519 --> 00:11:38,800
the stream observer as one of the method

00:11:37,040 --> 00:11:41,600
parameters

00:11:38,800 --> 00:11:43,600
this response observer on next starts

00:11:41,600 --> 00:11:46,640
streaming the response and on completed

00:11:43,600 --> 00:11:48,079
you're notified that the rpc is complete

00:11:46,640 --> 00:11:49,600
streaming enables the service to stream

00:11:48,079 --> 00:11:50,560
response elements as they become

00:11:49,600 --> 00:11:52,800
available

00:11:50,560 --> 00:11:53,839
and is a much more efficient way than

00:11:52,800 --> 00:11:56,399
the traditional

00:11:53,839 --> 00:11:58,720
request weight response which could

00:11:56,399 --> 00:12:00,079
cause us several timeouts

00:11:58,720 --> 00:12:02,320
bi-directional streaming further

00:12:00,079 --> 00:12:04,480
enhances this by having

00:12:02,320 --> 00:12:06,560
even the client stream request elements

00:12:04,480 --> 00:12:08,839
and and the server stream response

00:12:06,560 --> 00:12:10,240
element so it becomes a bi-directional

00:12:08,839 --> 00:12:12,560
communication

00:12:10,240 --> 00:12:14,160
streaming helps improve availability but

00:12:12,560 --> 00:12:18,560
we can still do better

00:12:14,160 --> 00:12:18,560
and that can be done using reactive grpc

00:12:19,440 --> 00:12:22,959
and here's where we would like to talk

00:12:21,200 --> 00:12:25,440
about another

00:12:22,959 --> 00:12:28,399
offspring sales forces springboard open

00:12:25,440 --> 00:12:30,560
source uh libraries the reactive grpc

00:12:28,399 --> 00:12:33,440
uh reactive rpc further improves our

00:12:30,560 --> 00:12:35,440
availability by providing flow control

00:12:33,440 --> 00:12:37,440
in addition to streaming the float

00:12:35,440 --> 00:12:37,760
control enables the clients and servers

00:12:37,440 --> 00:12:40,639
to

00:12:37,760 --> 00:12:42,320
implement back pressure and i'll talk a

00:12:40,639 --> 00:12:43,920
bit about that

00:12:42,320 --> 00:12:45,680
if there are very fast clients they do

00:12:43,920 --> 00:12:47,279
not overwhelm the server and if there's

00:12:45,680 --> 00:12:48,160
a very fast server it doesn't overwhelm

00:12:47,279 --> 00:12:50,560
slow clients

00:12:48,160 --> 00:12:52,560
so flow control is an additional benefit

00:12:50,560 --> 00:12:55,680
over availability which

00:12:52,560 --> 00:12:58,160
enables fastens the fast servers in

00:12:55,680 --> 00:12:59,440
fast slow or any amount of speed lines

00:12:58,160 --> 00:13:00,560
and servers to communicate with each

00:12:59,440 --> 00:13:03,040
other

00:13:00,560 --> 00:13:04,240
we demonstrate that flux is a return

00:13:03,040 --> 00:13:07,120
type here

00:13:04,240 --> 00:13:08,720
and flux again isn't like a country

00:13:07,120 --> 00:13:09,360
return type it's very similar to stream

00:13:08,720 --> 00:13:10,880
observers

00:13:09,360 --> 00:13:12,720
it lets it's a publisher that can

00:13:10,880 --> 00:13:16,399
receive zero to n elements

00:13:12,720 --> 00:13:17,760
clients can subscribe to this flask flux

00:13:16,399 --> 00:13:20,160
and receive message elements as they

00:13:17,760 --> 00:13:22,079
become available

00:13:20,160 --> 00:13:23,600
now we've looked at the protobuf message

00:13:22,079 --> 00:13:26,399
we've looked at the service definition

00:13:23,600 --> 00:13:29,680
part of it and the java implementations

00:13:26,399 --> 00:13:29,680
let's look at the client stubs

00:13:31,600 --> 00:13:35,440
client strips can be auto generated from

00:13:33,920 --> 00:13:36,720
from the prototype of message the entire

00:13:35,440 --> 00:13:38,560
message you could use uh

00:13:36,720 --> 00:13:40,399
uh to generate the client stubs which

00:13:38,560 --> 00:13:42,160
can then be used by a service for

00:13:40,399 --> 00:13:44,320
uh with but the clients to communicate

00:13:42,160 --> 00:13:46,800
with the service let's look into how we

00:13:44,320 --> 00:13:48,480
generate that

00:13:46,800 --> 00:13:50,240
in the in the examples here we're

00:13:48,480 --> 00:13:51,040
generating the client stubs in java

00:13:50,240 --> 00:13:54,399
using the

00:13:51,040 --> 00:13:56,399
plugin and in python uh doing the same

00:13:54,399 --> 00:13:57,600
this plugin accepts the dot proto file

00:13:56,399 --> 00:13:59,040
as input

00:13:57,600 --> 00:14:00,639
once we have generated these stuffs our

00:13:59,040 --> 00:14:02,320
clients can then start consuming it to

00:14:00,639 --> 00:14:05,279
talk to our service

00:14:02,320 --> 00:14:06,720
let's look at the two types of uh stubs

00:14:05,279 --> 00:14:09,760
that are available to the clients

00:14:06,720 --> 00:14:11,680
uh that we also use in an implementation

00:14:09,760 --> 00:14:13,920
so there are two kinds of communication

00:14:11,680 --> 00:14:17,839
paradigms synchronous and asynchronous

00:14:13,920 --> 00:14:20,160
and the auto generated stubs come in

00:14:17,839 --> 00:14:20,959
in those flavors they are generated in

00:14:20,160 --> 00:14:23,360
three types

00:14:20,959 --> 00:14:24,639
but semantically there are two kinds one

00:14:23,360 --> 00:14:26,240
is for synchronous and there are two

00:14:24,639 --> 00:14:28,720
kinds which are in asynchronous i'm

00:14:26,240 --> 00:14:30,480
going to talk about one two of them the

00:14:28,720 --> 00:14:31,199
blocking stuff which is the synchronous

00:14:30,480 --> 00:14:33,440
one

00:14:31,199 --> 00:14:35,279
and the is and the asynchronous stuff

00:14:33,440 --> 00:14:37,360
which is the new stub in the second

00:14:35,279 --> 00:14:39,360
second of code fragment in the

00:14:37,360 --> 00:14:41,920
presentation

00:14:39,360 --> 00:14:42,639
the blocking stub preserves the same

00:14:41,920 --> 00:14:44,720
semantics

00:14:42,639 --> 00:14:46,399
it lets you have the request weight

00:14:44,720 --> 00:14:47,279
response for format so if there are

00:14:46,399 --> 00:14:48,639
clients which

00:14:47,279 --> 00:14:50,639
cannot function with streaming they can

00:14:48,639 --> 00:14:51,360
continue to use that the non-blocking

00:14:50,639 --> 00:14:53,199
async stop

00:14:51,360 --> 00:14:55,040
uses the great streaming features of the

00:14:53,199 --> 00:14:56,639
protocol and can let you have better

00:14:55,040 --> 00:14:58,160
availability

00:14:56,639 --> 00:14:59,760
we have now looked at the server and

00:14:58,160 --> 00:15:01,440
client implementations

00:14:59,760 --> 00:15:03,839
now let's look at how we secure this

00:15:01,440 --> 00:15:03,839
service

00:15:04,320 --> 00:15:08,880
and here's where the dynamic

00:15:05,600 --> 00:15:11,760
authentication service comes in handy

00:15:08,880 --> 00:15:12,399
and let's talk about this this service

00:15:11,760 --> 00:15:14,399
provides

00:15:12,399 --> 00:15:16,399
us short-lived certificates and

00:15:14,399 --> 00:15:18,240
automated provisioning

00:15:16,399 --> 00:15:19,440
the certificates are also rotated uh

00:15:18,240 --> 00:15:22,000
frequently

00:15:19,440 --> 00:15:24,079
grpc's native support for mtls enables

00:15:22,000 --> 00:15:26,240
us to integrate easily with this service

00:15:24,079 --> 00:15:28,000
for both authentication and encryption

00:15:26,240 --> 00:15:29,600
on the wire

00:15:28,000 --> 00:15:31,199
now let's summarize this entire life

00:15:29,600 --> 00:15:33,920
cycle of the

00:15:31,199 --> 00:15:34,720
service we talked about so we talked

00:15:33,920 --> 00:15:36,480
about

00:15:34,720 --> 00:15:37,759
uh the message format the protocol of

00:15:36,480 --> 00:15:40,880
message format which was language

00:15:37,759 --> 00:15:42,240
agnostic which enabled us to do uh

00:15:40,880 --> 00:15:44,800
code like language agnostic

00:15:42,240 --> 00:15:46,880
implementations for uh java and python

00:15:44,800 --> 00:15:47,839
we talked about the salesforce open

00:15:46,880 --> 00:15:50,000
source spring boot

00:15:47,839 --> 00:15:51,759
libraries which helped us do the grpc

00:15:50,000 --> 00:15:52,720
service as well as a reactive grpc

00:15:51,759 --> 00:15:55,040
service

00:15:52,720 --> 00:15:56,800
we further looked at examples of how we

00:15:55,040 --> 00:15:58,320
could generate client stubs which could

00:15:56,800 --> 00:15:59,600
be used by clients to communicate to a

00:15:58,320 --> 00:16:01,199
service

00:15:59,600 --> 00:16:02,800
uh and we generated them in two

00:16:01,199 --> 00:16:04,959
languages java and python

00:16:02,800 --> 00:16:06,560
and then we finally demonstrated how to

00:16:04,959 --> 00:16:08,399
secure this service how to secure this

00:16:06,560 --> 00:16:11,600
end-to-end communication

00:16:08,399 --> 00:16:14,560
with mtls this is

00:16:11,600 --> 00:16:16,639
the lifecycle of my offer service i

00:16:14,560 --> 00:16:18,160
would now like to invite warren back

00:16:16,639 --> 00:16:22,480
to talk about our learnings through this

00:16:18,160 --> 00:16:25,600
journey in adopting grpc

00:16:22,480 --> 00:16:28,639
thank you to him so how do we

00:16:25,600 --> 00:16:31,199
do we do in our adoption journey

00:16:28,639 --> 00:16:32,240
well we had a smooth transition to adopt

00:16:31,199 --> 00:16:34,959
grpc

00:16:32,240 --> 00:16:36,880
we added service definitions for grpc

00:16:34,959 --> 00:16:38,639
and our clients were able to consume the

00:16:36,880 --> 00:16:40,959
generated stubs

00:16:38,639 --> 00:16:43,279
we were also able to serve clients

00:16:40,959 --> 00:16:45,440
across multiple substrates with the same

00:16:43,279 --> 00:16:48,079
instance of the service

00:16:45,440 --> 00:16:50,160
and we were able to achieve a high

00:16:48,079 --> 00:16:51,440
degree of service reliability through

00:16:50,160 --> 00:16:53,360
reduced timeouts

00:16:51,440 --> 00:16:55,519
and seamless transitions to newer

00:16:53,360 --> 00:16:58,000
versions of our schema without breaking

00:16:55,519 --> 00:17:01,519
any existing clients

00:16:58,000 --> 00:17:04,559
however it was a new implementation

00:17:01,519 --> 00:17:06,799
so adoption did not come for free there

00:17:04,559 --> 00:17:08,559
was effort involved for our clients to

00:17:06,799 --> 00:17:10,880
switch to this implementation

00:17:08,559 --> 00:17:11,839
and we had to run two different

00:17:10,880 --> 00:17:14,480
implementations

00:17:11,839 --> 00:17:16,880
in parallel for a certain amount of time

00:17:14,480 --> 00:17:18,480
until everybody adopted it

00:17:16,880 --> 00:17:20,959
but of course there was that one

00:17:18,480 --> 00:17:23,039
consumer who still complained after

00:17:20,959 --> 00:17:25,439
numerous reminders in a very long lead

00:17:23,039 --> 00:17:27,360
time and when we decom the old service

00:17:25,439 --> 00:17:27,919
so we had to work with them one-on-one

00:17:27,360 --> 00:17:29,760
to

00:17:27,919 --> 00:17:31,280
finally migrate them to the new service

00:17:29,760 --> 00:17:33,919
as well

00:17:31,280 --> 00:17:35,600
as the trailblazer of this technology

00:17:33,919 --> 00:17:37,440
and these libraries

00:17:35,600 --> 00:17:38,880
we did not have many reference

00:17:37,440 --> 00:17:41,679
implementation

00:17:38,880 --> 00:17:43,520
so we had to learn from our mistakes and

00:17:41,679 --> 00:17:47,039
go through a learning curve

00:17:43,520 --> 00:17:49,039
to get it right we now hope that our

00:17:47,039 --> 00:17:50,880
sharing of some of these concepts

00:17:49,039 --> 00:17:53,200
and a basic introduction to these

00:17:50,880 --> 00:17:55,200
libraries will encourage you

00:17:53,200 --> 00:17:56,400
to try them and build your own

00:17:55,200 --> 00:17:58,240
implementations

00:17:56,400 --> 00:18:01,679
then you might be able to share for

00:17:58,240 --> 00:18:04,080
other users to benefit from

00:18:01,679 --> 00:18:09,840
thank you again and we'll now open it up

00:18:04,080 --> 00:18:09,840

YouTube URL: https://www.youtube.com/watch?v=MLS7TFHrn_c


