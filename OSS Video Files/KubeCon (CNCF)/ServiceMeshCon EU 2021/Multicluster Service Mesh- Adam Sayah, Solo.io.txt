Title: Multicluster Service Mesh- Adam Sayah, Solo.io
Publication date: 2021-05-05
Playlist: ServiceMeshCon EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Multicluster Service Mesh- Adam Sayah, Solo.io

The digital transformation is pushing companies to adopt a cloud-native architecture, the microservice architecture is becoming a standard, resulting in a greater management complexity that a service mesh helps to alleviate, but how to solve the complexity when an organization has hundreds of clusters, or if multiple personas are involved.
- introduction to service mesh
- service mesh multi-cluster complexity
- introduction to management plane
Captions: 
	00:00:00,160 --> 00:00:03,520
hello thank you for joining me today in

00:00:02,560 --> 00:00:05,440
this session

00:00:03,520 --> 00:00:08,160
we're going to talk about multi-cluster

00:00:05,440 --> 00:00:08,160
service mesh

00:00:10,320 --> 00:00:14,240
my name is adam i'm a field engineer at

00:00:13,120 --> 00:00:16,400
solo cio

00:00:14,240 --> 00:00:17,760
a company specialized in service mesh

00:00:16,400 --> 00:00:19,119
and api gateways

00:00:17,760 --> 00:00:21,600
feel free to reach me out if you guys

00:00:19,119 --> 00:00:24,160
have any question or just to have a

00:00:21,600 --> 00:00:24,160
conversation

00:00:25,119 --> 00:00:28,960
so the agenda today we're going to talk

00:00:26,720 --> 00:00:31,119
about first

00:00:28,960 --> 00:00:33,680
talk about the service mesh the origins

00:00:31,119 --> 00:00:35,840
of it uh just as an introduction to it

00:00:33,680 --> 00:00:37,440
then we're gonna talk about uh take an

00:00:35,840 --> 00:00:39,120
example of a service mesh in this case

00:00:37,440 --> 00:00:40,399
we're gonna talk about this joe

00:00:39,120 --> 00:00:42,480
and then we're gonna talk about a

00:00:40,399 --> 00:00:44,719
multi-cluster deployment and what's the

00:00:42,480 --> 00:00:47,360
concerns we have with it

00:00:44,719 --> 00:00:49,680
and then we're going to talk about how

00:00:47,360 --> 00:00:52,640
to solve the complexity that comes

00:00:49,680 --> 00:00:56,559
with multi-cluster service mesh and at

00:00:52,640 --> 00:00:56,559
the end we are going to end with demo

00:00:57,520 --> 00:01:02,960
so first just as a reminder

00:01:00,719 --> 00:01:05,600
let's talk about the origins of a

00:01:02,960 --> 00:01:05,600
service mesh

00:01:05,760 --> 00:01:11,200
so to talk about the service mesh we use

00:01:09,200 --> 00:01:13,040
first to talk about the microservice

00:01:11,200 --> 00:01:16,640
architecture

00:01:13,040 --> 00:01:18,640
the microservice editor came to solve

00:01:16,640 --> 00:01:20,880
a lot of problems that we used to have

00:01:18,640 --> 00:01:24,840
with the monitor

00:01:20,880 --> 00:01:26,000
the monolith architecture so the

00:01:24,840 --> 00:01:28,479
monolith

00:01:26,000 --> 00:01:29,520
in the mod architecture we used to have

00:01:28,479 --> 00:01:33,200
a big component

00:01:29,520 --> 00:01:35,680
with all the logic in it so

00:01:33,200 --> 00:01:36,320
to for example to change only a part of

00:01:35,680 --> 00:01:38,880
the

00:01:36,320 --> 00:01:40,159
logic we used to wait for a long release

00:01:38,880 --> 00:01:42,479
cycles

00:01:40,159 --> 00:01:45,119
it used to be hard to maintain hard to

00:01:42,479 --> 00:01:48,399
scale because you can't scale on the

00:01:45,119 --> 00:01:49,840
a part of the system it comes with a lot

00:01:48,399 --> 00:01:53,040
of drawbacks

00:01:49,840 --> 00:01:55,520
now to solve these issues we moved to a

00:01:53,040 --> 00:01:58,240
microservice architecture

00:01:55,520 --> 00:01:58,960
where we split all these components into

00:01:58,240 --> 00:02:02,560
different

00:01:58,960 --> 00:02:04,240
services microservices and they all

00:02:02,560 --> 00:02:06,240
communicate through the network

00:02:04,240 --> 00:02:07,360
and every single microservice would deal

00:02:06,240 --> 00:02:10,879
with only

00:02:07,360 --> 00:02:15,040
a part of the logic so we would have

00:02:10,879 --> 00:02:17,920
only so yeah so you have only

00:02:15,040 --> 00:02:19,599
one service dealing with for example

00:02:17,920 --> 00:02:23,360
let's say a banking account

00:02:19,599 --> 00:02:25,040
you have like a user microservice you

00:02:23,360 --> 00:02:28,080
have an account microservice

00:02:25,040 --> 00:02:30,640
and other other services like that so

00:02:28,080 --> 00:02:32,800
in this scenario you can scale only a

00:02:30,640 --> 00:02:36,080
part of the logic so you can scale

00:02:32,800 --> 00:02:37,280
only one component is needed the most

00:02:36,080 --> 00:02:40,000
for example

00:02:37,280 --> 00:02:41,200
or you can also change only a part of

00:02:40,000 --> 00:02:44,480
the logic

00:02:41,200 --> 00:02:47,599
for example if you want to change

00:02:44,480 --> 00:02:49,360
the microservice user to a new mac

00:02:47,599 --> 00:02:51,280
service that deals

00:02:49,360 --> 00:02:52,560
like a new version of it you will have

00:02:51,280 --> 00:02:55,760
to only change

00:02:52,560 --> 00:02:57,920
that microservice so you guys see that

00:02:55,760 --> 00:03:01,280
the microservice architecture

00:02:57,920 --> 00:03:04,239
brings a lot of flexibility to

00:03:01,280 --> 00:03:06,239
this to what's actually compared to what

00:03:04,239 --> 00:03:09,440
we used to have with the melody

00:03:06,239 --> 00:03:11,440
now the microservice architecture has

00:03:09,440 --> 00:03:14,400
also some drawbacks

00:03:11,440 --> 00:03:15,760
the problem is now we have multiple

00:03:14,400 --> 00:03:18,159
services

00:03:15,760 --> 00:03:18,959
so to solve a problem where we need to

00:03:18,159 --> 00:03:21,760
identify

00:03:18,959 --> 00:03:22,319
if a request for example request failing

00:03:21,760 --> 00:03:25,040
between

00:03:22,319 --> 00:03:25,599
a shaming of some services how to locate

00:03:25,040 --> 00:03:28,879
what

00:03:25,599 --> 00:03:31,840
service failed the request and also

00:03:28,879 --> 00:03:32,400
what if we have network issues what

00:03:31,840 --> 00:03:35,519
about

00:03:32,400 --> 00:03:37,280
telemetry what about unified logging and

00:03:35,519 --> 00:03:41,200
all the things like that

00:03:37,280 --> 00:03:43,680
so to solve this issue

00:03:41,200 --> 00:03:45,599
a lot of companies start first to create

00:03:43,680 --> 00:03:46,080
libraries to add with their services so

00:03:45,599 --> 00:03:49,360
every

00:03:46,080 --> 00:03:50,879
microservice used to have a library

00:03:49,360 --> 00:03:52,400
that deals with this cross-cutting

00:03:50,879 --> 00:03:54,480
concerns

00:03:52,400 --> 00:03:56,640
where it deals with the retry network

00:03:54,480 --> 00:03:58,480
retry tracing and

00:03:56,640 --> 00:04:00,319
and things like that but it gets all so

00:03:58,480 --> 00:04:02,239
complicated to maintain

00:04:00,319 --> 00:04:03,360
imagine if you have a polyglot

00:04:02,239 --> 00:04:07,120
environment

00:04:03,360 --> 00:04:10,159
so imagine you have multiple

00:04:07,120 --> 00:04:12,560
services in different languages you need

00:04:10,159 --> 00:04:15,120
to maintain different libraries

00:04:12,560 --> 00:04:16,000
and it's not easy usually to unify them

00:04:15,120 --> 00:04:20,000
and and

00:04:16,000 --> 00:04:22,720
things like that so to solve all this

00:04:20,000 --> 00:04:23,199
that's the raise of basically a service

00:04:22,720 --> 00:04:26,000
mesh

00:04:23,199 --> 00:04:27,840
that's where the service mesh is used

00:04:26,000 --> 00:04:30,560
for so you have

00:04:27,840 --> 00:04:31,120
different services and your components

00:04:30,560 --> 00:04:33,600
will have

00:04:31,120 --> 00:04:35,280
a side car so a component attached to it

00:04:33,600 --> 00:04:36,080
and that sidecar will deal with all

00:04:35,280 --> 00:04:38,960
these

00:04:36,080 --> 00:04:40,160
cross-cutting concerns for example uh

00:04:38,960 --> 00:04:44,400
network

00:04:40,160 --> 00:04:46,160
retries and uh enforcing some sort of

00:04:44,400 --> 00:04:47,919
policy securing traffic between

00:04:46,160 --> 00:04:50,880
components uh

00:04:47,919 --> 00:04:52,479
telemetry and all these cross-cutting

00:04:50,880 --> 00:04:55,680
concerns that we talked about

00:04:52,479 --> 00:04:59,280
that we need to have to have

00:04:55,680 --> 00:05:01,440
more resilient environments

00:04:59,280 --> 00:05:03,280
so in this example here we see that we

00:05:01,440 --> 00:05:04,800
have for example three services

00:05:03,280 --> 00:05:07,199
service one service two and seven three

00:05:04,800 --> 00:05:08,960
talking to each other we have a side car

00:05:07,199 --> 00:05:11,520
with every single service

00:05:08,960 --> 00:05:12,560
and that deals with the service service

00:05:11,520 --> 00:05:14,880
communication

00:05:12,560 --> 00:05:16,960
the microsoft the the the side cars will

00:05:14,880 --> 00:05:20,479
deal with for example enforcing

00:05:16,960 --> 00:05:21,840
the the telemetry the mtls between the

00:05:20,479 --> 00:05:23,280
component

00:05:21,840 --> 00:05:25,680
[Music]

00:05:23,280 --> 00:05:26,320
having a unified logging and all these

00:05:25,680 --> 00:05:29,120
things

00:05:26,320 --> 00:05:29,759
and you have your service actually

00:05:29,120 --> 00:05:32,800
dealing with

00:05:29,759 --> 00:05:35,120
only the logic of the service so the

00:05:32,800 --> 00:05:37,039
service won't have to deal with all

00:05:35,120 --> 00:05:38,400
the cross-cutting concern and doesn't

00:05:37,039 --> 00:05:40,960
have to worry about

00:05:38,400 --> 00:05:42,479
network failures and all these things

00:05:40,960 --> 00:05:44,720
all that is dealt with

00:05:42,479 --> 00:05:45,840
we handle it with the sidecar the

00:05:44,720 --> 00:05:49,280
developers will

00:05:45,840 --> 00:05:51,440
only focus on developing the services

00:05:49,280 --> 00:05:54,720
and only the core components and logic

00:05:51,440 --> 00:05:58,319
of the of the microservice

00:05:54,720 --> 00:06:00,720
now in a lot of service measures we use

00:05:58,319 --> 00:06:02,639
envoy as a sidecar and this is why we're

00:06:00,720 --> 00:06:05,120
taking the example fanfare here

00:06:02,639 --> 00:06:06,000
envoy is a lightweight gateway it's http

00:06:05,120 --> 00:06:09,440
00:06:06,000 --> 00:06:11,759
uh you can deploy it next to your

00:06:09,440 --> 00:06:12,479
service to do it to deal with for

00:06:11,759 --> 00:06:15,919
example

00:06:12,479 --> 00:06:18,639
we talked about service service mtls

00:06:15,919 --> 00:06:19,360
enforcing policies like that enforcing

00:06:18,639 --> 00:06:22,400
like

00:06:19,360 --> 00:06:22,880
having a way to get telemetry tracing

00:06:22,400 --> 00:06:25,199
between

00:06:22,880 --> 00:06:27,039
components all the things that we needed

00:06:25,199 --> 00:06:27,440
in the microservice architecture to make

00:06:27,039 --> 00:06:31,039
it

00:06:27,440 --> 00:06:33,199
more resilient now

00:06:31,039 --> 00:06:34,080
for your data planes or from service

00:06:33,199 --> 00:06:35,680
service you

00:06:34,080 --> 00:06:37,199
need actually a control plane that

00:06:35,680 --> 00:06:39,199
controls this configuration

00:06:37,199 --> 00:06:40,800
push it to your side cars to enforce

00:06:39,199 --> 00:06:42,639
this policy and manage

00:06:40,800 --> 00:06:43,840
and basically configure the traffic from

00:06:42,639 --> 00:06:45,360
service to service

00:06:43,840 --> 00:06:47,520
and here in this example we're going to

00:06:45,360 --> 00:06:51,599
take an example of a service mesh

00:06:47,520 --> 00:06:54,800
istio where we have a control plane

00:06:51,599 --> 00:06:58,240
that control your

00:06:54,800 --> 00:07:00,240
data plane and push policies

00:06:58,240 --> 00:07:02,400
on your side cars here we see them in

00:07:00,240 --> 00:07:05,280
red we have

00:07:02,400 --> 00:07:06,720
envoy right so we have like your service

00:07:05,280 --> 00:07:08,800
account

00:07:06,720 --> 00:07:11,120
the account microservice that wants to

00:07:08,800 --> 00:07:12,960
talk to the user microservice

00:07:11,120 --> 00:07:14,479
in this case it's going to go through

00:07:12,960 --> 00:07:16,880
the sidecar

00:07:14,479 --> 00:07:18,000
the sidecar will have some configuration

00:07:16,880 --> 00:07:19,840
they've been pushed

00:07:18,000 --> 00:07:21,440
through the control plane the control

00:07:19,840 --> 00:07:23,759
control plane also configure

00:07:21,440 --> 00:07:25,199
the service discovery and other things

00:07:23,759 --> 00:07:27,599
uh so we'd have

00:07:25,199 --> 00:07:28,400
a way to know where to call the other

00:07:27,599 --> 00:07:30,960
service

00:07:28,400 --> 00:07:31,919
and how to call it right in this case we

00:07:30,960 --> 00:07:34,319
have mtls

00:07:31,919 --> 00:07:34,960
we can have some policy enforcement that

00:07:34,319 --> 00:07:38,639
we need

00:07:34,960 --> 00:07:41,759
you know to give access to the service

00:07:38,639 --> 00:07:43,680
user from the service account so

00:07:41,759 --> 00:07:45,120
that's the role of a control plane and

00:07:43,680 --> 00:07:48,479
this is an example

00:07:45,120 --> 00:07:50,479
of like how istio dales

00:07:48,479 --> 00:07:52,160
is actually implementing the basically

00:07:50,479 --> 00:07:55,759
the service mesh right

00:07:52,160 --> 00:07:58,560
now to configure

00:07:55,759 --> 00:07:59,599
your control plane to configure istio in

00:07:58,560 --> 00:08:01,840
this example

00:07:59,599 --> 00:08:02,720
you will need multiple configuration

00:08:01,840 --> 00:08:06,000
you'll need

00:08:02,720 --> 00:08:08,160
multiple components uh multiple

00:08:06,000 --> 00:08:09,599
configuration here we have a virtual

00:08:08,160 --> 00:08:10,479
service for example that is used for

00:08:09,599 --> 00:08:12,560
routing traffic

00:08:10,479 --> 00:08:13,840
you'll have this destination rules you

00:08:12,560 --> 00:08:15,759
can have a service entry

00:08:13,840 --> 00:08:17,039
every that's an example for istio but

00:08:15,759 --> 00:08:19,440
every single service match

00:08:17,039 --> 00:08:20,160
will need some sort of configuration for

00:08:19,440 --> 00:08:23,039
routing

00:08:20,160 --> 00:08:23,039
between components

00:08:24,720 --> 00:08:30,560
and we will talk about as controlling

00:08:27,840 --> 00:08:31,599
access control in in istio because it's

00:08:30,560 --> 00:08:34,000
needed later

00:08:31,599 --> 00:08:35,279
i'm going to talk about it more in this

00:08:34,000 --> 00:08:38,839
example here

00:08:35,279 --> 00:08:42,320
in istio we use spf framework

00:08:38,839 --> 00:08:43,760
where spiff spiffy is a framework that

00:08:42,320 --> 00:08:46,959
allows you to

00:08:43,760 --> 00:08:49,360
have like enforce some policies like

00:08:46,959 --> 00:08:51,040
on trusting communication between

00:08:49,360 --> 00:08:53,440
communication between workloads

00:08:51,040 --> 00:08:54,080
uh in here so for example you'll have a

00:08:53,440 --> 00:08:58,240
space

00:08:54,080 --> 00:09:00,399
spf id uh in istio you'll have spfee

00:08:58,240 --> 00:09:02,240
the trust domain then you have namespace

00:09:00,399 --> 00:09:04,080
then the service account

00:09:02,240 --> 00:09:05,839
and that's if you go back to go back to

00:09:04,080 --> 00:09:08,959
the example of isio

00:09:05,839 --> 00:09:10,560
let's say if we have um account

00:09:08,959 --> 00:09:12,480
the service account that wants to talk

00:09:10,560 --> 00:09:15,680
to the service

00:09:12,480 --> 00:09:18,000
user you'll have first the mtls

00:09:15,680 --> 00:09:20,480
uh that enforce you know security

00:09:18,000 --> 00:09:24,320
between the two but after verifying mtls

00:09:20,480 --> 00:09:27,519
you also verify that the account

00:09:24,320 --> 00:09:30,160
microservice has access

00:09:27,519 --> 00:09:30,880
to the user microservice and that's

00:09:30,160 --> 00:09:34,800
through

00:09:30,880 --> 00:09:36,880
saying the creating like a policy

00:09:34,800 --> 00:09:38,800
a security policy in istio that

00:09:36,880 --> 00:09:42,640
configures this authorization

00:09:38,800 --> 00:09:44,720
allowing the traffic after establishing

00:09:42,640 --> 00:09:45,760
mtls allowing the traffic from the

00:09:44,720 --> 00:09:48,240
control

00:09:45,760 --> 00:09:49,360
from the account the service microsoft's

00:09:48,240 --> 00:09:53,839
account in this example

00:09:49,360 --> 00:09:53,839
to talk to the service user

00:09:55,440 --> 00:10:00,160
now after just talking giving an example

00:09:58,800 --> 00:10:02,480
of an introduction to

00:10:00,160 --> 00:10:03,360
how is to operate and what's a control

00:10:02,480 --> 00:10:06,079
plane

00:10:03,360 --> 00:10:08,560
now we're going to talk about

00:10:06,079 --> 00:10:11,680
multi-cluster service mesh

00:10:08,560 --> 00:10:14,959
how to install a service mesh or how to

00:10:11,680 --> 00:10:16,959
manage multiple service meshes

00:10:14,959 --> 00:10:18,000
you know we talked we give an example of

00:10:16,959 --> 00:10:19,920
a service mesh on

00:10:18,000 --> 00:10:21,920
only one cluster where you have like

00:10:19,920 --> 00:10:24,480
your control plane eco

00:10:21,920 --> 00:10:25,839
configuring the data plane and side cars

00:10:24,480 --> 00:10:28,320
between the components

00:10:25,839 --> 00:10:29,519
it's pretty simple to to look at it into

00:10:28,320 --> 00:10:32,240
only one for example

00:10:29,519 --> 00:10:33,839
one cluster when we talk about a

00:10:32,240 --> 00:10:37,680
multi-cluster installation

00:10:33,839 --> 00:10:40,640
that comes with a bigger difficulty here

00:10:37,680 --> 00:10:42,079
to allow traffic between services and

00:10:40,640 --> 00:10:44,240
service meshes

00:10:42,079 --> 00:10:47,600
you'll need more configuration it comes

00:10:44,240 --> 00:10:51,519
like to another level of complexity

00:10:47,600 --> 00:10:53,360
now how we do that in istio

00:10:51,519 --> 00:10:54,720
there's different ways of deploying of

00:10:53,360 --> 00:10:57,839
handling this

00:10:54,720 --> 00:11:01,360
multi-cluster deployment in this case

00:10:57,839 --> 00:11:02,079
here we have a way where we can have a

00:11:01,360 --> 00:11:04,399
control plane

00:11:02,079 --> 00:11:05,279
only one cluster but we need to give

00:11:04,399 --> 00:11:07,839
access to

00:11:05,279 --> 00:11:08,959
the api server so the control plane

00:11:07,839 --> 00:11:10,480
needs to know

00:11:08,959 --> 00:11:12,320
need to have access to the api server on

00:11:10,480 --> 00:11:13,760
different cluster to get the data about

00:11:12,320 --> 00:11:16,240
the services running within

00:11:13,760 --> 00:11:17,920
the cluster and other things so imagine

00:11:16,240 --> 00:11:19,839
also we have also in a mode where

00:11:17,920 --> 00:11:21,360
you have the con multiple control planes

00:11:19,839 --> 00:11:23,839
every single cluster has

00:11:21,360 --> 00:11:24,399
its own control plane but also we always

00:11:23,839 --> 00:11:26,240
need

00:11:24,399 --> 00:11:27,760
to have access to the api server on

00:11:26,240 --> 00:11:29,200
different clusters imagine the

00:11:27,760 --> 00:11:32,399
complexity when you have

00:11:29,200 --> 00:11:34,320
100 cluster and you have 100 mesh right

00:11:32,399 --> 00:11:35,920
how can you it's going to just it's

00:11:34,320 --> 00:11:38,480
going to be n2 so

00:11:35,920 --> 00:11:39,040
every single microservice need to know

00:11:38,480 --> 00:11:41,920
about

00:11:39,040 --> 00:11:43,360
every single sorry every single cluster

00:11:41,920 --> 00:11:46,399
will need to know about

00:11:43,360 --> 00:11:47,440
every single other cluster to be able to

00:11:46,399 --> 00:11:51,760
establish

00:11:47,440 --> 00:11:57,360
you know this multi-mesh configuration

00:11:51,760 --> 00:11:59,760
now you guys see that when we have

00:11:57,360 --> 00:12:00,480
multiple cluster instead of coming with

00:11:59,760 --> 00:12:03,040
different

00:12:00,480 --> 00:12:03,920
problems like if we take an example of

00:12:03,040 --> 00:12:05,839
histo

00:12:03,920 --> 00:12:07,200
and let's say we want to configure

00:12:05,839 --> 00:12:09,440
something like that

00:12:07,200 --> 00:12:10,720
right where we have two clusters cluster

00:12:09,440 --> 00:12:13,600
one and cluster two

00:12:10,720 --> 00:12:15,680
they both have different components in

00:12:13,600 --> 00:12:18,880
this case i'm using the example of

00:12:15,680 --> 00:12:22,160
the istio book info example

00:12:18,880 --> 00:12:23,200
we have four microservices so you have a

00:12:22,160 --> 00:12:24,720
product page

00:12:23,200 --> 00:12:26,480
and the product page you need to talk to

00:12:24,720 --> 00:12:29,200
a detail

00:12:26,480 --> 00:12:30,800
microservice and review microservice and

00:12:29,200 --> 00:12:32,800
the review market service will talk to a

00:12:30,800 --> 00:12:36,320
rating microservice

00:12:32,800 --> 00:12:38,560
now you guys see that

00:12:36,320 --> 00:12:40,320
we have this on let's say we have this

00:12:38,560 --> 00:12:43,760
on two different clusters

00:12:40,320 --> 00:12:47,120
right and you want to have a way

00:12:43,760 --> 00:12:47,920
to basically say um let's say you have a

00:12:47,120 --> 00:12:50,240
new

00:12:47,920 --> 00:12:51,839
version of the review microservice and

00:12:50,240 --> 00:12:55,839
you just want to try something else

00:12:51,839 --> 00:12:59,360
you want to try to route the traffic

00:12:55,839 --> 00:13:02,240
some traffic from the cluster one to the

00:12:59,360 --> 00:13:03,600
version three of the reviews of the

00:13:02,240 --> 00:13:06,720
other

00:13:03,600 --> 00:13:08,880
um on the in the other cluster right

00:13:06,720 --> 00:13:10,079
that's a common use case specifically

00:13:08,880 --> 00:13:11,680
like especially if you want to do like

00:13:10,079 --> 00:13:15,040
some blue green deployments

00:13:11,680 --> 00:13:18,480
um and things like that right now

00:13:15,040 --> 00:13:21,680
if you want to do that using istio

00:13:18,480 --> 00:13:23,519
as an example of a service mesh you will

00:13:21,680 --> 00:13:27,519
have to create

00:13:23,519 --> 00:13:28,959
a lot of configuration so here

00:13:27,519 --> 00:13:31,760
only in the cluster one you'll have to

00:13:28,959 --> 00:13:36,639
create a virtual service that points to

00:13:31,760 --> 00:13:36,639
basically the review microservice

00:13:36,880 --> 00:13:40,480
then you'd have to create a destination

00:13:38,480 --> 00:13:42,240
rule a service entry

00:13:40,480 --> 00:13:44,079
that's only on customer one then on

00:13:42,240 --> 00:13:45,279
cluster two you also need to create

00:13:44,079 --> 00:13:46,959
other configuration

00:13:45,279 --> 00:13:49,199
like when the traffic is routed to

00:13:46,959 --> 00:13:52,880
cluster two you need to transform it to

00:13:49,199 --> 00:13:54,880
a local um local call to your

00:13:52,880 --> 00:13:56,639
review microservice you also need to

00:13:54,880 --> 00:13:58,959
define your destination rule

00:13:56,639 --> 00:14:00,160
and that's basically gonna call the pod

00:13:58,959 --> 00:14:03,360
version three

00:14:00,160 --> 00:14:03,680
you're gonna call to your review v3 on

00:14:03,360 --> 00:14:05,680
the

00:14:03,680 --> 00:14:08,240
cluster too but you guys see that this

00:14:05,680 --> 00:14:11,279
is a pretty standard scenario

00:14:08,240 --> 00:14:13,440
but it gets pretty complex pretty fast

00:14:11,279 --> 00:14:14,399
to create something like that imagine

00:14:13,440 --> 00:14:16,399
you have

00:14:14,399 --> 00:14:17,839
hundreds of clusters how to manage all

00:14:16,399 --> 00:14:20,320
this configuration right

00:14:17,839 --> 00:14:21,600
you also need to authorize the access we

00:14:20,320 --> 00:14:22,240
were talking about spf as an

00:14:21,600 --> 00:14:24,959
introduction

00:14:22,240 --> 00:14:26,399
here where we use it basically in this

00:14:24,959 --> 00:14:28,720
we're saying

00:14:26,399 --> 00:14:31,120
that we're allowing you know you guys

00:14:28,720 --> 00:14:34,160
can you notice here the spf id

00:14:31,120 --> 00:14:37,519
uh that basically is used to allow

00:14:34,160 --> 00:14:39,040
the traffic from the service the cluster

00:14:37,519 --> 00:14:43,040
one to the cluster two

00:14:39,040 --> 00:14:43,040
uh to the to the service review now

00:14:43,199 --> 00:14:46,959
you guys see that this is a pretty

00:14:45,120 --> 00:14:50,000
simple use case

00:14:46,959 --> 00:14:52,800
and it comes with a lot of configuration

00:14:50,000 --> 00:14:54,000
and we see that when we have multiple

00:14:52,800 --> 00:14:57,680
clusters

00:14:54,000 --> 00:14:59,600
it comes with a lot of concerns a lot of

00:14:57,680 --> 00:15:00,800
a lot of issues that you can have like

00:14:59,600 --> 00:15:04,079
while scaling

00:15:00,800 --> 00:15:05,120
so one of the issues can be you need to

00:15:04,079 --> 00:15:08,160
have a way

00:15:05,120 --> 00:15:10,560
to see the configuration over

00:15:08,160 --> 00:15:12,240
all your microservices all your service

00:15:10,560 --> 00:15:13,920
measures you want to know

00:15:12,240 --> 00:15:16,560
every single what's the status of every

00:15:13,920 --> 00:15:18,560
single service mesh you need to have a

00:15:16,560 --> 00:15:21,040
kind of a service discovery over every

00:15:18,560 --> 00:15:22,720
single over all your service meshes

00:15:21,040 --> 00:15:24,720
you need to have a way to unify the

00:15:22,720 --> 00:15:28,000
identity you need to have a way to for

00:15:24,720 --> 00:15:30,320
example say if you have mcls between

00:15:28,000 --> 00:15:31,360
one cluster and you have mtls in the

00:15:30,320 --> 00:15:33,519
other cluster

00:15:31,360 --> 00:15:35,839
you need to have a way also to unify the

00:15:33,519 --> 00:15:39,199
identity to have for example the same

00:15:35,839 --> 00:15:42,800
rule ca so you can have

00:15:39,199 --> 00:15:46,240
uh some sort of mtls between cluster one

00:15:42,800 --> 00:15:49,759
to a service in cluster two right

00:15:46,240 --> 00:15:52,639
if every every if every single cluster

00:15:49,759 --> 00:15:52,959
has its own identity that won't work to

00:15:52,639 --> 00:15:55,440
have

00:15:52,959 --> 00:15:57,199
a multi-cluster communication right you

00:15:55,440 --> 00:15:59,360
can also have

00:15:57,199 --> 00:16:01,279
you need a way to have a configuration

00:15:59,360 --> 00:16:02,079
pretty a pretty easy configuration

00:16:01,279 --> 00:16:06,000
deployed

00:16:02,079 --> 00:16:08,800
to only um like some management

00:16:06,000 --> 00:16:10,639
cluster and that configuration needs to

00:16:08,800 --> 00:16:12,959
be deployed to every single cluster

00:16:10,639 --> 00:16:14,320
right you want to like we we took an

00:16:12,959 --> 00:16:17,519
example of

00:16:14,320 --> 00:16:20,560
and pretty standard way of doing like

00:16:17,519 --> 00:16:22,000
uh some kind of canary routing here

00:16:20,560 --> 00:16:24,800
between two clusters and you guys see

00:16:22,000 --> 00:16:26,800
that the complexity was

00:16:24,800 --> 00:16:29,440
yet pretty complex pretty fast so you

00:16:26,800 --> 00:16:32,560
need to have a way to simplify this

00:16:29,440 --> 00:16:34,079
you also need another way of enforcing

00:16:32,560 --> 00:16:37,199
high-level policies

00:16:34,079 --> 00:16:38,480
like if you have different personas

00:16:37,199 --> 00:16:40,560
operating your

00:16:38,480 --> 00:16:43,199
service meshes you want to just have a

00:16:40,560 --> 00:16:47,120
way to create a policy that says

00:16:43,199 --> 00:16:50,000
hey this team or this user

00:16:47,120 --> 00:16:51,120
is allowed basically to route traffic

00:16:50,000 --> 00:16:54,320
from his

00:16:51,120 --> 00:16:56,880
service mesh to only

00:16:54,320 --> 00:16:58,639
this service mesh or only these services

00:16:56,880 --> 00:17:00,560
regardless of the implementation of

00:16:58,639 --> 00:17:01,680
how we do it behind the scene for

00:17:00,560 --> 00:17:04,640
example in the control or

00:17:01,680 --> 00:17:05,360
like in istio the apis are pretty low

00:17:04,640 --> 00:17:07,120
level

00:17:05,360 --> 00:17:09,919
so you know for doing the routing you

00:17:07,120 --> 00:17:12,640
need all virtual services and you need

00:17:09,919 --> 00:17:14,640
service entries and distinction rules so

00:17:12,640 --> 00:17:16,959
regardless of all this

00:17:14,640 --> 00:17:18,000
what is more important just saying that

00:17:16,959 --> 00:17:21,120
this persona can

00:17:18,000 --> 00:17:21,839
do like routing or can enforce this

00:17:21,120 --> 00:17:24,720
policy

00:17:21,839 --> 00:17:26,400
or they can't change the settings you

00:17:24,720 --> 00:17:29,360
don't want to have to go

00:17:26,400 --> 00:17:30,480
to a lower level configuration and also

00:17:29,360 --> 00:17:34,400
you need to have a way

00:17:30,480 --> 00:17:38,880
to like you know isolating your fault

00:17:34,400 --> 00:17:42,000
so for solving these issues

00:17:38,880 --> 00:17:45,200
you need a management plan

00:17:42,000 --> 00:17:48,880
you need something like a component

00:17:45,200 --> 00:17:52,240
that knows about all the service meshes

00:17:48,880 --> 00:17:54,720
knows about all the clusters knows about

00:17:52,240 --> 00:17:55,919
all the control planes and be able to

00:17:54,720 --> 00:17:59,440
manage them all

00:17:55,919 --> 00:18:01,520
right so in this use case

00:17:59,440 --> 00:18:02,559
i'm taking as an example glue mesh which

00:18:01,520 --> 00:18:06,400
is

00:18:02,559 --> 00:18:07,039
more familiar with which is a management

00:18:06,400 --> 00:18:09,600
plane

00:18:07,039 --> 00:18:10,640
that operates on multiple clusters for

00:18:09,600 --> 00:18:12,840
example here in this

00:18:10,640 --> 00:18:14,080
use case you'll have your management

00:18:12,840 --> 00:18:16,720
plane

00:18:14,080 --> 00:18:18,240
where you register different clusters

00:18:16,720 --> 00:18:19,840
all these clusters

00:18:18,240 --> 00:18:22,400
you're going to have like a global view

00:18:19,840 --> 00:18:25,520
of all over all the services you have

00:18:22,400 --> 00:18:27,200
and you can define a policy like an

00:18:25,520 --> 00:18:28,880
easy way to route traffic between

00:18:27,200 --> 00:18:29,760
services and that's what i'm going to

00:18:28,880 --> 00:18:32,960
show you

00:18:29,760 --> 00:18:37,760
now in this example so

00:18:32,960 --> 00:18:40,320
let's say i have

00:18:37,760 --> 00:18:42,640
so i have my management plan where i

00:18:40,320 --> 00:18:45,360
have two cluster registered so we have

00:18:42,640 --> 00:18:46,000
two control planes right in this case

00:18:45,360 --> 00:18:48,320
contest

00:18:46,000 --> 00:18:50,080
cluster one and cluster two they both

00:18:48,320 --> 00:18:53,760
have issue installed

00:18:50,080 --> 00:18:57,760
and if i can look at the cluster one

00:18:53,760 --> 00:19:00,880
you can see that the workloads

00:18:57,760 --> 00:19:02,080
here we have review version 1 and review

00:19:00,880 --> 00:19:05,679
version 2

00:19:02,080 --> 00:19:11,200
right now if i go back

00:19:05,679 --> 00:19:14,640
to the other cluster

00:19:11,200 --> 00:19:17,039
we can see that in this cluster

00:19:14,640 --> 00:19:17,919
we have version 1 version 2 and version

00:19:17,039 --> 00:19:20,080
3.

00:19:17,919 --> 00:19:23,520
so if you want to go back to the

00:19:20,080 --> 00:19:26,240
architecture i was going to show you

00:19:23,520 --> 00:19:26,240
so this one

00:19:26,880 --> 00:19:32,720
you see that the other cluster has only

00:19:30,640 --> 00:19:34,320
it has the three versions and the first

00:19:32,720 --> 00:19:36,960
cluster has only two versions

00:19:34,320 --> 00:19:39,039
and we want to do some sort of canary

00:19:36,960 --> 00:19:41,120
deployment to basically route only

00:19:39,039 --> 00:19:42,160
part of the traffic to this cluster

00:19:41,120 --> 00:19:44,000
right

00:19:42,160 --> 00:19:45,280
now the only difference between all

00:19:44,000 --> 00:19:48,240
these services

00:19:45,280 --> 00:19:50,160
in in the review the different versions

00:19:48,240 --> 00:19:54,080
is that the version one has

00:19:50,160 --> 00:19:57,679
no like when we look at this ui here

00:19:54,080 --> 00:20:00,960
um so version one has

00:19:57,679 --> 00:20:01,679
no color version two has like a black

00:20:00,960 --> 00:20:04,000
stars

00:20:01,679 --> 00:20:05,679
and version three has red stars so if

00:20:04,000 --> 00:20:07,039
you see here if we

00:20:05,679 --> 00:20:08,880
the first configuration we have

00:20:07,039 --> 00:20:10,400
obviously we're talking only to the

00:20:08,880 --> 00:20:11,600
cluster one that has version one and

00:20:10,400 --> 00:20:14,880
version two

00:20:11,600 --> 00:20:18,320
you guys see that we can't

00:20:14,880 --> 00:20:19,440
uh basically we are just showing the two

00:20:18,320 --> 00:20:22,880
colors which is

00:20:19,440 --> 00:20:25,520
the no colors and the black color

00:20:22,880 --> 00:20:27,440
now meaning that we are routing only to

00:20:25,520 --> 00:20:30,960
version one and version two

00:20:27,440 --> 00:20:35,840
now let's create an easy configuration

00:20:30,960 --> 00:20:38,159
to route to the service

00:20:35,840 --> 00:20:39,679
to the version 3 of the service review

00:20:38,159 --> 00:20:42,320
and the cluster 2.

00:20:39,679 --> 00:20:43,840
for that i just need to create one

00:20:42,320 --> 00:20:47,039
configuration

00:20:43,840 --> 00:20:49,679
on my management plane saying that what

00:20:47,039 --> 00:20:54,640
i need is like when i try to call

00:20:49,679 --> 00:20:57,760
the review service in my cluster one

00:20:54,640 --> 00:20:58,320
behind like when calling the service the

00:20:57,760 --> 00:21:00,720
routing

00:20:58,320 --> 00:21:01,760
they need to operate is that i'm gonna

00:21:00,720 --> 00:21:05,360
route

00:21:01,760 --> 00:21:08,480
75 of the traffic to the version three

00:21:05,360 --> 00:21:12,559
in the cluster two and i want to route

00:21:08,480 --> 00:21:14,400
15 uh to the version one same cluster

00:21:12,559 --> 00:21:16,400
and ten percent of the to the version

00:21:14,400 --> 00:21:16,960
two on the same cluster you guys see

00:21:16,400 --> 00:21:20,640
that

00:21:16,960 --> 00:21:24,880
only one policy here to manage

00:21:20,640 --> 00:21:26,960
routing over like to multiple clusters

00:21:24,880 --> 00:21:28,159
because we have a management plan right

00:21:26,960 --> 00:21:33,039
now

00:21:28,159 --> 00:21:33,039
i go back to like my terminal

00:21:34,480 --> 00:21:42,080
right then let's say

00:21:38,080 --> 00:21:45,039
i apply this apply the configuration

00:21:42,080 --> 00:21:46,720
create it go back to my service that was

00:21:45,039 --> 00:21:49,039
routing only to basically the

00:21:46,720 --> 00:21:50,480
the two versions on the same clusters if

00:21:49,039 --> 00:21:52,000
i refresh couple times

00:21:50,480 --> 00:21:53,600
you guys see that now we have the red

00:21:52,000 --> 00:21:55,280
stars and this

00:21:53,600 --> 00:21:56,960
red stars are coming from a different

00:21:55,280 --> 00:21:59,200
clusters so the traffic is

00:21:56,960 --> 00:22:00,720
going to cluster one and then route it

00:21:59,200 --> 00:22:02,880
to the cluster two

00:22:00,720 --> 00:22:04,000
to version three of the review service

00:22:02,880 --> 00:22:07,120
which is the red stars

00:22:04,000 --> 00:22:10,320
and you guys see that in comparison with

00:22:07,120 --> 00:22:13,520
what we needed to create to operate this

00:22:10,320 --> 00:22:16,559
without a man without a management plane

00:22:13,520 --> 00:22:19,280
we if we had to do that directly using

00:22:16,559 --> 00:22:20,720
ecu service mesh as an example you will

00:22:19,280 --> 00:22:22,320
have to create

00:22:20,720 --> 00:22:24,240
all this configuration on the cluster

00:22:22,320 --> 00:22:26,320
one and all this clash

00:22:24,240 --> 00:22:28,640
configuration of cluster two just to do

00:22:26,320 --> 00:22:31,840
something simple as

00:22:28,640 --> 00:22:34,480
one routing from one cluster to another

00:22:31,840 --> 00:22:35,600
that we operated we did that only with

00:22:34,480 --> 00:22:38,640
one configuration

00:22:35,600 --> 00:22:42,080
in our measurement plane so you see that

00:22:38,640 --> 00:22:43,919
a management plan solves a lot of issues

00:22:42,080 --> 00:22:47,200
that comes with the complexity

00:22:43,919 --> 00:22:49,679
of a multi-cluster service mesh right

00:22:47,200 --> 00:22:51,280
here i'm taking again an example of

00:22:49,679 --> 00:22:52,960
using blue mesh

00:22:51,280 --> 00:22:54,559
but as a management plane and you see

00:22:52,960 --> 00:22:57,200
that using

00:22:54,559 --> 00:22:59,840
a management plan you can create one

00:22:57,200 --> 00:23:02,080
configuration in one cluster

00:22:59,840 --> 00:23:03,120
get replicated to all the clusters

00:23:02,080 --> 00:23:04,960
registered

00:23:03,120 --> 00:23:07,120
have a global view over all your

00:23:04,960 --> 00:23:10,240
clusters be able to create

00:23:07,120 --> 00:23:13,120
easy routing policies like

00:23:10,240 --> 00:23:14,159
routing between clusters failover

00:23:13,120 --> 00:23:16,559
between clusters

00:23:14,159 --> 00:23:17,440
you can also enforce some high level

00:23:16,559 --> 00:23:21,520
policies

00:23:17,440 --> 00:23:24,240
let's say i can allow a user to create

00:23:21,520 --> 00:23:25,200
traffic policies or restrict a user to

00:23:24,240 --> 00:23:29,520
only

00:23:25,200 --> 00:23:32,559
do like to manage only one a part of the

00:23:29,520 --> 00:23:35,919
of only some subset of

00:23:32,559 --> 00:23:40,240
some clusters you need this high level

00:23:35,919 --> 00:23:42,080
view that comes with a management plane

00:23:40,240 --> 00:23:44,480
so you guys see again that the

00:23:42,080 --> 00:23:45,760
management plane is really important

00:23:44,480 --> 00:23:47,520
when scaling and when having

00:23:45,760 --> 00:23:49,760
multi-cluster

00:23:47,520 --> 00:23:50,559
service mesh with that thank you for

00:23:49,760 --> 00:23:53,200
listening to me

00:23:50,559 --> 00:23:54,640
uh i'm i'll be happy to have the

00:23:53,200 --> 00:23:56,799
conversation going

00:23:54,640 --> 00:23:58,000
on uh the social media obviously you can

00:23:56,799 --> 00:23:59,919
guys reach me out

00:23:58,000 --> 00:24:02,080
i have you know i'll be happy to have

00:23:59,919 --> 00:24:05,440
any any conversation

00:24:02,080 --> 00:24:05,440

YouTube URL: https://www.youtube.com/watch?v=U9RuSYhzrvs


