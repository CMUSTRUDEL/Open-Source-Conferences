Title: Istio Beyond Kubernetes - Zack Butcher, Tetrate, Sven Mawson, Google & Pratima Nambiar, Salesforce
Publication date: 2021-05-11
Playlist: ServiceMeshCon EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Istio Beyond Kubernetes - Zack Butcher, Tetrate, Sven Mawson, Google & Pratima Nambiar, Salesforce

Istio can be used to build a service mesh spanning heterogeneous infrastructure. This presentation will describe three use cases that use Istio to power a mesh spanning a variety of infrastructures. We will start by covering two similar examples of Istio spanning kubernetes and VM infra (EKS-EC2 as well as EKS-on-prem), followed by the Salesforce Service Mesh that supports services running on bare metal, VMs and Kubernetes. We'll cover what those deployments achieve, and spend a lot of time describing how they work and the tradeoffs made to enable them.
Captions: 
	00:00:00,080 --> 00:00:03,679
all right hey thanks everybody for for

00:00:01,599 --> 00:00:04,319
joining us today we're excited to get to

00:00:03,679 --> 00:00:06,720
talk

00:00:04,319 --> 00:00:08,000
uh about some of the uses of istio

00:00:06,720 --> 00:00:09,519
beyond kubernetes

00:00:08,000 --> 00:00:11,519
you know kind of since the the project

00:00:09,519 --> 00:00:13,200
came out uh it has

00:00:11,519 --> 00:00:15,759
has kind of always been tied to

00:00:13,200 --> 00:00:17,600
kubernetes at least in people's minds

00:00:15,759 --> 00:00:18,880
and uh but that's not actually the case

00:00:17,600 --> 00:00:20,560
in production right uh

00:00:18,880 --> 00:00:23,119
and what's more most of our production

00:00:20,560 --> 00:00:23,600
footprints uh are not only kubernetes

00:00:23,119 --> 00:00:26,960
right

00:00:23,600 --> 00:00:29,519
and so there's a real need for uh

00:00:26,960 --> 00:00:31,119
for taking the surface mesh beyond uh

00:00:29,519 --> 00:00:33,680
just kubernetes itself

00:00:31,119 --> 00:00:35,600
and today i'm really excited we have a

00:00:33,680 --> 00:00:36,399
phenomenal crew here to kind of talk

00:00:35,600 --> 00:00:38,000
through

00:00:36,399 --> 00:00:39,680
some of how we do that and how we've

00:00:38,000 --> 00:00:42,480
seen that hands-on uh so

00:00:39,680 --> 00:00:44,640
hey to start with i'm zach i was uh one

00:00:42,480 --> 00:00:46,320
of the founding engineers at tetrate

00:00:44,640 --> 00:00:49,520
and i was one of the earliest uh

00:00:46,320 --> 00:00:52,079
engineers on istio at google

00:00:49,520 --> 00:00:53,760
um i'm prati manambiar i lead the teams

00:00:52,079 --> 00:00:57,199
that build and operate

00:00:53,760 --> 00:00:59,600
the mesh platform at salesforce

00:00:57,199 --> 00:01:00,960
and i'm sven i'm uh one of the founders

00:00:59,600 --> 00:01:02,960
of istio and

00:01:00,960 --> 00:01:04,640
i've been uh pushing for us to support

00:01:02,960 --> 00:01:06,799
things beyond kubernetes since day one

00:01:04,640 --> 00:01:09,840
so i'm really excited about this

00:01:06,799 --> 00:01:11,439
yep uh awesome and and so today uh i'm

00:01:09,840 --> 00:01:11,760
gonna start off and i'm gonna talk about

00:01:11,439 --> 00:01:14,159
uh

00:01:11,760 --> 00:01:16,080
some patterns that that we've seen uh

00:01:14,159 --> 00:01:16,400
for taking issue beyond kubernetes uh

00:01:16,080 --> 00:01:17,920
for

00:01:16,400 --> 00:01:19,680
these actually come out of kind of two

00:01:17,920 --> 00:01:20,479
customers that i've worked with very

00:01:19,680 --> 00:01:22,560
closely

00:01:20,479 --> 00:01:24,159
uh to help achieve these the plans in

00:01:22,560 --> 00:01:26,000
production and then after that we'll

00:01:24,159 --> 00:01:28,560
dive into kind of two more

00:01:26,000 --> 00:01:29,360
excellent uh case studies uh from both

00:01:28,560 --> 00:01:31,759
salesforce and

00:01:29,360 --> 00:01:33,200
and google uh that really are applying a

00:01:31,759 --> 00:01:36,000
very similar set of patterns

00:01:33,200 --> 00:01:37,520
uh here so without further ado let's uh

00:01:36,000 --> 00:01:40,240
let's go ahead and dive in

00:01:37,520 --> 00:01:41,520
uh in in the first kind of pattern that

00:01:40,240 --> 00:01:44,720
that we'll talk about or

00:01:41,520 --> 00:01:47,600
the first use case is this idea of

00:01:44,720 --> 00:01:49,200
split kubernetes and vms right uh and

00:01:47,600 --> 00:01:50,159
and maybe this is all in one cloud

00:01:49,200 --> 00:01:52,720
provider

00:01:50,159 --> 00:01:54,000
uh you know so you're doing like easy

00:01:52,720 --> 00:01:57,200
eks and ec2

00:01:54,000 --> 00:01:59,520
or or gke and gce um

00:01:57,200 --> 00:02:01,200
or possibly your on-prem right and this

00:01:59,520 --> 00:02:02,399
is your vsphere footprint plus

00:02:01,200 --> 00:02:05,040
you know like openshift that you're

00:02:02,399 --> 00:02:06,799
running uh uh locally right

00:02:05,040 --> 00:02:08,160
but the particular customer that i

00:02:06,799 --> 00:02:12,000
worked with through through

00:02:08,160 --> 00:02:12,959
this uh scenario of bridging eks and ec2

00:02:12,000 --> 00:02:14,239
environments

00:02:12,959 --> 00:02:16,239
kind of took this migrate then

00:02:14,239 --> 00:02:17,599
modernized strategy of hey let's get

00:02:16,239 --> 00:02:18,640
everything into cloud so we can shut

00:02:17,599 --> 00:02:19,599
down the data center

00:02:18,640 --> 00:02:21,360
and then we're going to work

00:02:19,599 --> 00:02:23,280
incrementally within our applications to

00:02:21,360 --> 00:02:25,920
modernize them piece by piece

00:02:23,280 --> 00:02:27,360
right and as they were looking at this

00:02:25,920 --> 00:02:29,520
problem set for them

00:02:27,360 --> 00:02:31,200
there were these four primary use cases

00:02:29,520 --> 00:02:32,480
that rose to the top right so number one

00:02:31,200 --> 00:02:34,160
was encryption and transit

00:02:32,480 --> 00:02:36,160
uh they're a financial services company

00:02:34,160 --> 00:02:39,680
they're heavily regulated

00:02:36,160 --> 00:02:42,879
because of of things like pci dss

00:02:39,680 --> 00:02:44,640
all data must be encrypted in transit um

00:02:42,879 --> 00:02:46,000
that was kind of the first key thing

00:02:44,640 --> 00:02:47,760
that they wanted

00:02:46,000 --> 00:02:50,000
as a corollary to that they additionally

00:02:47,760 --> 00:02:53,120
wanted consistent access policy based

00:02:50,000 --> 00:02:55,040
on those runtime identities those two

00:02:53,120 --> 00:02:56,800
kind of go hand in hand really

00:02:55,040 --> 00:02:58,159
beyond that they needed fine grain load

00:02:56,800 --> 00:02:58,640
bouncing and i'll talk about that a

00:02:58,159 --> 00:03:00,480
little bit

00:02:58,640 --> 00:03:01,840
and then one of the other big use cases

00:03:00,480 --> 00:03:04,400
and this is one that i see

00:03:01,840 --> 00:03:06,720
all the time uh in in this idea of kind

00:03:04,400 --> 00:03:09,920
of bridging heterogeneous environments

00:03:06,720 --> 00:03:13,599
is controlling how traffic flows

00:03:09,920 --> 00:03:15,200
to for example the legacy uh uh monolith

00:03:13,599 --> 00:03:17,599
and the newer microservices that are

00:03:15,200 --> 00:03:19,360
being decomposed out of that monolith

00:03:17,599 --> 00:03:20,560
uh and so if we look here at this at

00:03:19,360 --> 00:03:22,879
this picture to start with you know

00:03:20,560 --> 00:03:24,799
maybe we have eks and ec2

00:03:22,879 --> 00:03:26,640
uh the import one of the important kind

00:03:24,799 --> 00:03:28,159
of underpinnings here is that we have a

00:03:26,640 --> 00:03:30,879
common certificate authority

00:03:28,159 --> 00:03:32,480
uh and and this will be a pretty common

00:03:30,879 --> 00:03:33,040
uh i think trend across all three of

00:03:32,480 --> 00:03:35,280
ours

00:03:33,040 --> 00:03:37,040
uh we need that common ca to facilitate

00:03:35,280 --> 00:03:38,720
communication right

00:03:37,040 --> 00:03:40,480
um and so that'll live somewhere kind of

00:03:38,720 --> 00:03:41,760
outside the mesh in general i would

00:03:40,480 --> 00:03:43,760
recommend strongly that you

00:03:41,760 --> 00:03:45,519
root your meshes root of trust in your

00:03:43,760 --> 00:03:46,959
existing pki

00:03:45,519 --> 00:03:48,799
and we're going to have an istio

00:03:46,959 --> 00:03:50,720
deployed and it is going to be and it's

00:03:48,799 --> 00:03:51,840
going to manage kind of all the envoys

00:03:50,720 --> 00:03:53,680
nearby

00:03:51,840 --> 00:03:55,120
uh in this case you know maybe this is a

00:03:53,680 --> 00:03:57,200
single az

00:03:55,120 --> 00:03:58,159
for example and so we can those ec2

00:03:57,200 --> 00:04:00,480
instances

00:03:58,159 --> 00:04:01,200
are close enough to that istio uh that

00:04:00,480 --> 00:04:02,480
they're going to

00:04:01,200 --> 00:04:04,480
have roughly a shared bait we want to

00:04:02,480 --> 00:04:06,239
align our failure domains here right

00:04:04,480 --> 00:04:08,000
uh nsu is going to program everything

00:04:06,239 --> 00:04:11,439
like normal

00:04:08,000 --> 00:04:12,720
um with the exception of some service

00:04:11,439 --> 00:04:13,200
discovery information we'll dig into a

00:04:12,720 --> 00:04:15,280
little bit

00:04:13,200 --> 00:04:17,120
here and so now what i want to kind of

00:04:15,280 --> 00:04:19,840
start to pick through here

00:04:17,120 --> 00:04:21,680
is how a deployment like this starts to

00:04:19,840 --> 00:04:23,040
facilitate traffic flow

00:04:21,680 --> 00:04:25,520
and achieve kind of some of these four

00:04:23,040 --> 00:04:27,919
needs so first and foremost we should

00:04:25,520 --> 00:04:29,759
talk about you know the the easiest case

00:04:27,919 --> 00:04:32,000
which is how do we get traffic

00:04:29,759 --> 00:04:34,320
from existing applications into the new

00:04:32,000 --> 00:04:36,880
system into kubernetes for instance

00:04:34,320 --> 00:04:37,520
and that's a bog standard uh gray's

00:04:36,880 --> 00:04:40,400
ingress

00:04:37,520 --> 00:04:40,960
use case uh and and you know you'll go

00:04:40,400 --> 00:04:43,520
in through

00:04:40,960 --> 00:04:45,199
through a gateway uh in that gateway can

00:04:43,520 --> 00:04:48,720
have you know an assigned static ip

00:04:45,199 --> 00:04:48,720
address a dns name whatever it needs

00:04:48,800 --> 00:04:52,880
but much more interesting is then how we

00:04:50,479 --> 00:04:55,840
start to facilitate communication into

00:04:52,880 --> 00:04:56,639
the the non-kubernetes environments and

00:04:55,840 --> 00:04:58,960
so the first

00:04:56,639 --> 00:05:00,479
and easiest that i'll call out is this

00:04:58,960 --> 00:05:00,880
ability to just go in through a front

00:05:00,479 --> 00:05:03,199
door

00:05:00,880 --> 00:05:03,919
envoy uh and this is super easy to

00:05:03,199 --> 00:05:05,600
facilitate

00:05:03,919 --> 00:05:08,479
that envoy can have you know a static

00:05:05,600 --> 00:05:10,000
dns name a static ip address for example

00:05:08,479 --> 00:05:12,160
uh so you don't necessarily need to

00:05:10,000 --> 00:05:14,400
execute service discovery on it

00:05:12,160 --> 00:05:16,080
but you do get some of the nice kind of

00:05:14,400 --> 00:05:19,199
control that envoy gives

00:05:16,080 --> 00:05:21,039
as traffic flows into these vms

00:05:19,199 --> 00:05:22,639
and in particular one of the big things

00:05:21,039 --> 00:05:24,560
that this lets us do

00:05:22,639 --> 00:05:26,080
is split traffic as we're for example

00:05:24,560 --> 00:05:28,000
decomposing that application

00:05:26,080 --> 00:05:29,360
that's that's on a vm and as we split

00:05:28,000 --> 00:05:30,960
that traffic you know that can go to

00:05:29,360 --> 00:05:31,840
different places that can go maybe to a

00:05:30,960 --> 00:05:33,120
different cluster

00:05:31,840 --> 00:05:34,880
maybe that can go all the way to a

00:05:33,120 --> 00:05:36,160
different site or a different region and

00:05:34,880 --> 00:05:37,360
this is one of the things i

00:05:36,160 --> 00:05:39,199
that we'll kind of talk about as we

00:05:37,360 --> 00:05:41,120
circle back at the end but

00:05:39,199 --> 00:05:42,400
isio gives us this this set of tools for

00:05:41,120 --> 00:05:44,960
solving problems

00:05:42,400 --> 00:05:46,720
uh and we can reuse them uh to solve

00:05:44,960 --> 00:05:49,520
many similar problems so

00:05:46,720 --> 00:05:51,120
controlling traffic split across for

00:05:49,520 --> 00:05:52,720
example a vm deployment and kubernetes

00:05:51,120 --> 00:05:54,160
deployment looks very similar to

00:05:52,720 --> 00:05:56,800
controlling traffic across

00:05:54,160 --> 00:05:59,840
uh for example sites as failing over for

00:05:56,800 --> 00:05:59,840
for disaster recovery

00:06:00,000 --> 00:06:03,440
uh and so this is this is one way hey

00:06:02,160 --> 00:06:05,120
you know we can go in through these

00:06:03,440 --> 00:06:07,199
front envoys

00:06:05,120 --> 00:06:08,240
uh but there's other ways that we can

00:06:07,199 --> 00:06:10,960
start to wire this up

00:06:08,240 --> 00:06:12,479
and how you ultimately choose to use the

00:06:10,960 --> 00:06:13,840
tools that seo provides is going to

00:06:12,479 --> 00:06:15,600
depend on your site

00:06:13,840 --> 00:06:17,440
and so for this particular customer that

00:06:15,600 --> 00:06:18,080
i worked with they actually had an

00:06:17,440 --> 00:06:20,240
existing

00:06:18,080 --> 00:06:22,080
legacy service discovery system uh it

00:06:20,240 --> 00:06:23,520
was based on on zookeeper

00:06:22,080 --> 00:06:25,280
i think actually we'll hear about

00:06:23,520 --> 00:06:26,240
salesforce and then they have a very

00:06:25,280 --> 00:06:27,919
similar system

00:06:26,240 --> 00:06:29,520
uh it was in vogue at the time that both

00:06:27,919 --> 00:06:31,759
of those companies were built

00:06:29,520 --> 00:06:33,440
and uh their applications automatic on

00:06:31,759 --> 00:06:35,280
vms automatically registered with that

00:06:33,440 --> 00:06:37,600
service discovery system

00:06:35,280 --> 00:06:39,199
uh for them it was important that we

00:06:37,600 --> 00:06:40,000
didn't have these extra network hops

00:06:39,199 --> 00:06:41,919
because the

00:06:40,000 --> 00:06:43,840
the overall latency of the of the

00:06:41,919 --> 00:06:45,759
transaction was pretty important

00:06:43,840 --> 00:06:47,520
and so they wanted to facilitate direct

00:06:45,759 --> 00:06:49,919
vm communication and we were able to do

00:06:47,520 --> 00:06:52,000
that in a pretty straightforward way

00:06:49,919 --> 00:06:54,240
uh by taking their existing kind of

00:06:52,000 --> 00:06:56,720
zookeeper service discovery records

00:06:54,240 --> 00:06:58,479
and translating those into services into

00:06:56,720 --> 00:06:59,919
service entries for istio in a in a

00:06:58,479 --> 00:07:01,520
pretty natural way

00:06:59,919 --> 00:07:03,199
um and i'll point out you know we had to

00:07:01,520 --> 00:07:05,280
do this kind of bespoke in their sites

00:07:03,199 --> 00:07:05,919
because they had a homegrown service

00:07:05,280 --> 00:07:07,759
discovery

00:07:05,919 --> 00:07:09,199
system as you're starting to use like

00:07:07,759 --> 00:07:10,560
different cloud providers uh

00:07:09,199 --> 00:07:12,319
that are that are starting to provide

00:07:10,560 --> 00:07:13,919
different service discovery mechanisms

00:07:12,319 --> 00:07:15,520
uh chances are pretty decent that there

00:07:13,919 --> 00:07:18,560
are already some integrations around

00:07:15,520 --> 00:07:19,280
right so for example uh ec2 uh populates

00:07:18,560 --> 00:07:22,080
a cloud map

00:07:19,280 --> 00:07:22,960
registry uh for service discovery and

00:07:22,080 --> 00:07:25,120
and seo

00:07:22,960 --> 00:07:26,319
uh there are plugins for example to push

00:07:25,120 --> 00:07:27,680
that data into seo

00:07:26,319 --> 00:07:30,000
so this isn't necessarily something you

00:07:27,680 --> 00:07:32,319
have to build yourself but this is

00:07:30,000 --> 00:07:33,759
a totally valid way to set things up and

00:07:32,319 --> 00:07:35,440
and one that we see a lot

00:07:33,759 --> 00:07:37,520
uh we have folks running in production

00:07:35,440 --> 00:07:39,039
doing you know direct pod to vm

00:07:37,520 --> 00:07:42,319
connectivity uh in this

00:07:39,039 --> 00:07:45,680
in this way and then of course for

00:07:42,319 --> 00:07:47,120
for vms that we might actually enroll

00:07:45,680 --> 00:07:48,879
into the mesh and when i say enroll into

00:07:47,120 --> 00:07:49,280
the rest what i mean is deploy a sidecar

00:07:48,879 --> 00:07:50,479
there

00:07:49,280 --> 00:07:51,280
and that's another important idea i want

00:07:50,479 --> 00:07:52,960
people to understand you don't

00:07:51,280 --> 00:07:54,879
necessarily have to have a sidecar

00:07:52,960 --> 00:07:56,639
deployed there it'll change your

00:07:54,879 --> 00:07:58,240
security model

00:07:56,639 --> 00:07:59,840
but you can get some benefits from just

00:07:58,240 --> 00:08:03,840
having kind of this this

00:07:59,840 --> 00:08:06,319
uh doorway issio ingress gateway as well

00:08:03,840 --> 00:08:06,879
um but when we do have an envoy on that

00:08:06,319 --> 00:08:09,440
vm

00:08:06,879 --> 00:08:10,800
we can use some of istio's new auto

00:08:09,440 --> 00:08:12,240
registration capabilities

00:08:10,800 --> 00:08:15,360
i think some of them will talk about

00:08:12,240 --> 00:08:18,479
that later uh to know exactly where that

00:08:15,360 --> 00:08:19,759
that vm is where it lives uh in istio

00:08:18,479 --> 00:08:21,360
and enable that direct communication

00:08:19,759 --> 00:08:23,360
without having to do the kind of life

00:08:21,360 --> 00:08:26,720
cycle events off to the side

00:08:23,360 --> 00:08:28,720
and so you know looking at these we can

00:08:26,720 --> 00:08:30,639
there's you know some easy ways that we

00:08:28,720 --> 00:08:32,320
can facilitate traffic flow

00:08:30,639 --> 00:08:34,479
we might pick different ones based on

00:08:32,320 --> 00:08:36,320
our requirements uh and they give us

00:08:34,479 --> 00:08:39,039
these other capabilities for example

00:08:36,320 --> 00:08:40,399
uh fine grain load balancing in this

00:08:39,039 --> 00:08:42,479
particular customer site

00:08:40,399 --> 00:08:44,240
mind grain load bouncing let them drop

00:08:42,479 --> 00:08:47,040
their kafka footprints by

00:08:44,240 --> 00:08:47,920
to one sixth of its original size uh

00:08:47,040 --> 00:08:49,600
because they weren't

00:08:47,920 --> 00:08:51,120
doing this at connection level so

00:08:49,600 --> 00:08:52,240
there's some big benefits there that you

00:08:51,120 --> 00:08:54,080
can get

00:08:52,240 --> 00:08:56,080
putting into the envoys for the for the

00:08:54,080 --> 00:08:58,640
the bouncing and then facilitating some

00:08:56,080 --> 00:09:00,160
of this connectivity

00:08:58,640 --> 00:09:03,440
and now i kind of want to take a step

00:09:00,160 --> 00:09:04,959
back uh to one higher level which is

00:09:03,440 --> 00:09:06,640
what if we need to start to do similar

00:09:04,959 --> 00:09:09,519
things across sites

00:09:06,640 --> 00:09:11,600
right uh and and the particular customer

00:09:09,519 --> 00:09:13,760
that i have in mind here uh square

00:09:11,600 --> 00:09:15,600
has to do this they have legacy data

00:09:13,760 --> 00:09:17,440
centers uh where they run

00:09:15,600 --> 00:09:19,360
uh applications and they run those in a

00:09:17,440 --> 00:09:23,200
mix of vms

00:09:19,360 --> 00:09:26,480
and uh and kubernetes as well

00:09:23,200 --> 00:09:28,880
uh and they have a cloud footprint too

00:09:26,480 --> 00:09:30,000
um and their first two requirements were

00:09:28,880 --> 00:09:31,600
identically the same i need to

00:09:30,000 --> 00:09:32,560
encryption and transit i need consistent

00:09:31,600 --> 00:09:34,000
access policy

00:09:32,560 --> 00:09:36,560
again their financial services company

00:09:34,000 --> 00:09:39,600
it's it's incredibly important

00:09:36,560 --> 00:09:41,279
uh but then they and and they had that

00:09:39,600 --> 00:09:41,680
same kubernetes to vm within a single

00:09:41,279 --> 00:09:43,600
site

00:09:41,680 --> 00:09:45,200
right that right side picture is is

00:09:43,600 --> 00:09:48,080
identical to before

00:09:45,200 --> 00:09:49,440
um however they had the additional

00:09:48,080 --> 00:09:51,600
requirement that they needed to be able

00:09:49,440 --> 00:09:54,160
to fail across sites

00:09:51,600 --> 00:09:55,279
uh for example for for disaster recovery

00:09:54,160 --> 00:09:57,120
as well as

00:09:55,279 --> 00:09:58,720
uh the need to to burst into cloud for

00:09:57,120 --> 00:10:01,200
additional compute capacity

00:09:58,720 --> 00:10:02,959
uh for for them they have very uh you

00:10:01,200 --> 00:10:04,000
know time of day driven traffic patterns

00:10:02,959 --> 00:10:07,360
for example

00:10:04,000 --> 00:10:09,279
uh and the need to and so you know for

00:10:07,360 --> 00:10:10,959
for uh certain events like market open

00:10:09,279 --> 00:10:12,800
market close those kinds of things

00:10:10,959 --> 00:10:14,240
uh there's a lot more traffic and so the

00:10:12,800 --> 00:10:16,880
ability to burst

00:10:14,240 --> 00:10:17,760
uh into and not run over provisioned all

00:10:16,880 --> 00:10:21,360
the time is

00:10:17,760 --> 00:10:23,200
is absolutely massive and if we look

00:10:21,360 --> 00:10:25,040
you know i'll take kind of that that

00:10:23,200 --> 00:10:26,959
first example we have you know we have

00:10:25,040 --> 00:10:28,640
or i'll take one of the examples i dove

00:10:26,959 --> 00:10:30,720
into before where

00:10:28,640 --> 00:10:32,480
we have traffic coming in and we want to

00:10:30,720 --> 00:10:35,839
control how that flows

00:10:32,480 --> 00:10:38,880
across for example a vm and a

00:10:35,839 --> 00:10:40,880
kubernetes cluster by the same token we

00:10:38,880 --> 00:10:42,240
can control how we flow across sites and

00:10:40,880 --> 00:10:45,360
if we squint

00:10:42,240 --> 00:10:46,240
uh and look you know these two patterns

00:10:45,360 --> 00:10:49,279
are

00:10:46,240 --> 00:10:50,240
the same they're they're they're doing

00:10:49,279 --> 00:10:51,920
the same things

00:10:50,240 --> 00:10:54,480
they're achieving very similar goals as

00:10:51,920 --> 00:10:56,880
well um

00:10:54,480 --> 00:10:58,720
and so i want to kind of highlight that

00:10:56,880 --> 00:11:00,240
istio gives us a set of tools around how

00:10:58,720 --> 00:11:01,519
we can load balance uh

00:11:00,240 --> 00:11:03,279
and when i say the same let me let me

00:11:01,519 --> 00:11:04,720
dig into that for a minute as an

00:11:03,279 --> 00:11:07,920
application running on

00:11:04,720 --> 00:11:09,760
this this in the mesh i get to

00:11:07,920 --> 00:11:10,160
communicate with my dependencies using a

00:11:09,760 --> 00:11:11,519
name

00:11:10,160 --> 00:11:13,360
and really not dealing with anything

00:11:11,519 --> 00:11:16,079
else and the message is going to deliver

00:11:13,360 --> 00:11:17,920
that and so when i say this is the same

00:11:16,079 --> 00:11:19,360
how the application perceives or

00:11:17,920 --> 00:11:20,560
connects with other applications is

00:11:19,360 --> 00:11:23,600
identical

00:11:20,560 --> 00:11:24,720
uh throughout and so you know and and

00:11:23,600 --> 00:11:25,519
we're doing similar functionality at

00:11:24,720 --> 00:11:29,680
some more places

00:11:25,519 --> 00:11:31,519
even this is an important idea because

00:11:29,680 --> 00:11:32,880
again istio gives us this set of tools

00:11:31,519 --> 00:11:34,079
that we use for solving the problems and

00:11:32,880 --> 00:11:35,440
so it's important that we internalize

00:11:34,079 --> 00:11:36,800
kind of what those fundamental tools are

00:11:35,440 --> 00:11:37,279
because we can use them and so in this

00:11:36,800 --> 00:11:38,959
case

00:11:37,279 --> 00:11:40,800
having that ingress gateway that can

00:11:38,959 --> 00:11:41,519
they can load balance across multiple

00:11:40,800 --> 00:11:45,040
clusters

00:11:41,519 --> 00:11:47,760
is a incredibly powerful tool

00:11:45,040 --> 00:11:49,040
um but there is one other large uh

00:11:47,760 --> 00:11:50,800
problem that i kind of skipped over

00:11:49,040 --> 00:11:52,480
earlier that is introduced

00:11:50,800 --> 00:11:54,839
now that we have multiple sdods here

00:11:52,480 --> 00:11:56,880
which is uh we need to start to

00:11:54,839 --> 00:11:57,440
coordinate our configuration in the

00:11:56,880 --> 00:11:59,920
system

00:11:57,440 --> 00:12:01,600
uh and synchronize that um and that's a

00:11:59,920 --> 00:12:03,040
that's a problem that isio itself does

00:12:01,600 --> 00:12:04,399
not solve natively today

00:12:03,040 --> 00:12:06,560
there are some different deployment

00:12:04,399 --> 00:12:08,000
topologies you can use with less sdods

00:12:06,560 --> 00:12:10,880
here for example

00:12:08,000 --> 00:12:12,560
uh and and things like that uh but

00:12:10,880 --> 00:12:14,160
regardless of of which deployment

00:12:12,560 --> 00:12:15,760
topology you pick you are going to have

00:12:14,160 --> 00:12:16,480
to solve how you start to synchronize

00:12:15,760 --> 00:12:18,399
configuration

00:12:16,480 --> 00:12:20,320
across different clusters uh and there's

00:12:18,399 --> 00:12:22,320
a whole bunch of different options there

00:12:20,320 --> 00:12:24,000
uh i think sven will talk about some at

00:12:22,320 --> 00:12:25,279
length in uh or

00:12:24,000 --> 00:12:27,440
in a little bit more depth in his

00:12:25,279 --> 00:12:29,360
section uh but the general rule is you

00:12:27,440 --> 00:12:31,440
know use a cd class uh

00:12:29,360 --> 00:12:34,320
your existing cd system to start to

00:12:31,440 --> 00:12:34,320
facilitate that

00:12:34,399 --> 00:12:38,000
um and with that you know and and so

00:12:37,200 --> 00:12:40,720
these are kind of

00:12:38,000 --> 00:12:42,720
two concrete customer patterns that that

00:12:40,720 --> 00:12:45,040
i have personally seen firsthand

00:12:42,720 --> 00:12:46,480
uh to to start to facilitate

00:12:45,040 --> 00:12:47,600
communication across these different

00:12:46,480 --> 00:12:49,760
environments

00:12:47,600 --> 00:12:51,440
um and with that i think we will now

00:12:49,760 --> 00:12:54,079
kind of dig into

00:12:51,440 --> 00:12:55,519
uh some other examples that they use

00:12:54,079 --> 00:12:57,279
that are that are very very similar i

00:12:55,519 --> 00:13:00,160
think

00:12:57,279 --> 00:13:01,839
thank you zach um if you can move on to

00:13:00,160 --> 00:13:04,959
the next slide

00:13:01,839 --> 00:13:08,000
yeah salesforce and service mesh spans

00:13:04,959 --> 00:13:08,560
multiple well service spans services

00:13:08,000 --> 00:13:11,760
that run

00:13:08,560 --> 00:13:13,839
on divers infrastructure for example in

00:13:11,760 --> 00:13:14,720
our first party data centers we support

00:13:13,839 --> 00:13:16,639
services

00:13:14,720 --> 00:13:19,839
that run on bare metal communicating

00:13:16,639 --> 00:13:22,320
with services running on kubernetes

00:13:19,839 --> 00:13:23,680
our monolith runs on bare metal in first

00:13:22,320 --> 00:13:25,839
party

00:13:23,680 --> 00:13:26,880
in our public cloud deployments we have

00:13:25,839 --> 00:13:29,680
services running

00:13:26,880 --> 00:13:30,480
on vms and communities talking to each

00:13:29,680 --> 00:13:33,760
other

00:13:30,480 --> 00:13:35,279
via mesh about four years ago when we

00:13:33,760 --> 00:13:37,120
built our mash platform

00:13:35,279 --> 00:13:39,120
using envoy and our in-house control

00:13:37,120 --> 00:13:40,000
plane uh we had to support these

00:13:39,120 --> 00:13:42,000
services

00:13:40,000 --> 00:13:44,399
running on these diverse infrastructure

00:13:42,000 --> 00:13:47,199
and therefore when we wanted to adopt

00:13:44,399 --> 00:13:49,360
a open source uh product as our control

00:13:47,199 --> 00:13:52,320
plane a couple of years ago

00:13:49,360 --> 00:13:55,040
the minimum viable solution had to

00:13:52,320 --> 00:13:57,519
support bare metal vms and kubernetes

00:13:55,040 --> 00:13:59,040
so we chose istio since it is a feature

00:13:57,519 --> 00:14:02,320
rich control plane and that

00:13:59,040 --> 00:14:04,079
it meets our um growing requirements and

00:14:02,320 --> 00:14:05,120
it is solving the problems that we are

00:14:04,079 --> 00:14:07,040
trying to solve

00:14:05,120 --> 00:14:08,800
and therefore is a good fit for

00:14:07,040 --> 00:14:10,560
salesforce

00:14:08,800 --> 00:14:11,839
let's take a closer look at what our

00:14:10,560 --> 00:14:14,560
mesh platform

00:14:11,839 --> 00:14:15,680
with istio as our control plane looks

00:14:14,560 --> 00:14:18,880
like

00:14:15,680 --> 00:14:20,320
we run sgod on kubernetes which is the

00:14:18,880 --> 00:14:23,440
control plane

00:14:20,320 --> 00:14:25,519
and community services inject sidecar

00:14:23,440 --> 00:14:28,160
and communicate with the control plane

00:14:25,519 --> 00:14:30,000
for config updates and policy updates we

00:14:28,160 --> 00:14:32,480
have a config webhook

00:14:30,000 --> 00:14:33,680
that generates some sdconfig for our

00:14:32,480 --> 00:14:37,279
services

00:14:33,680 --> 00:14:40,000
um and salesforce requires us to use an

00:14:37,279 --> 00:14:42,320
internal ca for short-lived certificates

00:14:40,000 --> 00:14:44,800
so we configure both our control plane

00:14:42,320 --> 00:14:46,560
and our sidecar to use these

00:14:44,800 --> 00:14:47,680
certificates um generated by our

00:14:46,560 --> 00:14:51,279
internal ca for

00:14:47,680 --> 00:14:54,959
mtls um we run our sidecar

00:14:51,279 --> 00:14:56,639
next to um our monolith on bare metal

00:14:54,959 --> 00:14:58,720
and it communicates with the control

00:14:56,639 --> 00:15:02,720
plane via al4

00:14:58,720 --> 00:15:04,880
load balancer the monolith announces to

00:15:02,720 --> 00:15:07,920
zookeeper so zookeeper is our service

00:15:04,880 --> 00:15:09,680
registry for non-communities workloads

00:15:07,920 --> 00:15:11,600
and then we have a synchronization

00:15:09,680 --> 00:15:13,680
service that synchronizes these

00:15:11,600 --> 00:15:16,240
announcements in zookeeper

00:15:13,680 --> 00:15:17,680
and updates service entry objects in

00:15:16,240 --> 00:15:20,320
kubernetes

00:15:17,680 --> 00:15:22,079
the service entry object is similar to a

00:15:20,320 --> 00:15:24,720
kubernetes service object

00:15:22,079 --> 00:15:27,199
and it is used to represent a service

00:15:24,720 --> 00:15:29,600
that can participate in the mesh

00:15:27,199 --> 00:15:30,240
let's take a closer look at how to

00:15:29,600 --> 00:15:32,320
onboard

00:15:30,240 --> 00:15:35,680
a service that's running on bare metal

00:15:32,320 --> 00:15:38,480
onto istio based mesh

00:15:35,680 --> 00:15:40,240
we manage the life cycle of the istio

00:15:38,480 --> 00:15:42,240
proxy sidecar

00:15:40,240 --> 00:15:43,440
by the monolith so the monolith does

00:15:42,240 --> 00:15:45,759
that for us

00:15:43,440 --> 00:15:47,759
um the istio proxy is as i've mentioned

00:15:45,759 --> 00:15:49,680
before configured to use certificates

00:15:47,759 --> 00:15:50,720
that are delivered by that same internal

00:15:49,680 --> 00:15:54,480
ca

00:15:50,720 --> 00:15:57,360
and the service routes traffic

00:15:54,480 --> 00:15:58,000
to a special ip to participate in the

00:15:57,360 --> 00:16:00,560
mesh

00:15:58,000 --> 00:16:02,560
and we have a dns a wildcard dns that

00:16:00,560 --> 00:16:05,120
resolves to the special ip

00:16:02,560 --> 00:16:06,240
and it is used to reference all mesh

00:16:05,120 --> 00:16:10,160
services

00:16:06,240 --> 00:16:13,519
um in in the mesh um we also configure

00:16:10,160 --> 00:16:14,720
a sidecar resource it is a custom crd

00:16:13,519 --> 00:16:17,839
that's available

00:16:14,720 --> 00:16:18,560
that's provided to us by istio and we

00:16:17,839 --> 00:16:21,199
configure

00:16:18,560 --> 00:16:22,320
ingress and egress listeners at that

00:16:21,199 --> 00:16:25,040
special ip

00:16:22,320 --> 00:16:26,959
via that sidecar resource and then as i

00:16:25,040 --> 00:16:30,639
mentioned before the monolith announces

00:16:26,959 --> 00:16:33,519
to zookeeper and that gets synchronized

00:16:30,639 --> 00:16:34,880
to kubernetes as service entry objects

00:16:33,519 --> 00:16:36,880
and that is how

00:16:34,880 --> 00:16:37,920
our bare metal service is able to

00:16:36,880 --> 00:16:40,399
participate

00:16:37,920 --> 00:16:42,079
in the mesh as if it were running on

00:16:40,399 --> 00:16:44,880
kubernetes

00:16:42,079 --> 00:16:46,480
um the next slide yeah we are in the

00:16:44,880 --> 00:16:49,040
process of rolling out

00:16:46,480 --> 00:16:50,560
a new feature that was introduced in

00:16:49,040 --> 00:16:52,639
istio 1.8

00:16:50,560 --> 00:16:54,160
and this is the auto registration

00:16:52,639 --> 00:16:56,399
feature

00:16:54,160 --> 00:16:58,079
adopting this feature will allow us to

00:16:56,399 --> 00:17:00,399
get rid of that zookeeper

00:16:58,079 --> 00:17:02,800
that we use for service registry for

00:17:00,399 --> 00:17:05,199
non-kubernetes workloads

00:17:02,800 --> 00:17:08,240
the auto registration feature of istio

00:17:05,199 --> 00:17:10,559
supports a set of crds to represent

00:17:08,240 --> 00:17:12,640
non-kubernetes workloads to enable them

00:17:10,559 --> 00:17:16,799
to participate in the mesh

00:17:12,640 --> 00:17:19,679
for example there is a workload group

00:17:16,799 --> 00:17:21,199
crd that enables you to specify the

00:17:19,679 --> 00:17:22,160
properties of a workload for

00:17:21,199 --> 00:17:25,360
bootstrapping it

00:17:22,160 --> 00:17:28,079
and as a template for workload entries

00:17:25,360 --> 00:17:29,760
it's kind of similar to how you um you

00:17:28,079 --> 00:17:30,799
can use a deployment object in

00:17:29,760 --> 00:17:33,280
kubernetes

00:17:30,799 --> 00:17:35,840
to define the properties of workloads

00:17:33,280 --> 00:17:39,919
via a pod spec

00:17:35,840 --> 00:17:40,880
a workload entry crd represents a single

00:17:39,919 --> 00:17:44,320
workload

00:17:40,880 --> 00:17:46,400
similar to a pod in kubernetes and and

00:17:44,320 --> 00:17:48,080
as i mentioned before the service entry

00:17:46,400 --> 00:17:48,799
is similar to a kubernetes service

00:17:48,080 --> 00:17:51,280
object

00:17:48,799 --> 00:17:52,160
for non-kubernetes workloads so in our

00:17:51,280 --> 00:17:55,039
deployments we

00:17:52,160 --> 00:17:56,480
create the workload group um with the

00:17:55,039 --> 00:18:00,880
workload entry template

00:17:56,480 --> 00:18:04,000
um we pre-create it and the

00:18:00,880 --> 00:18:06,480
istio proxy that runs next to our

00:18:04,000 --> 00:18:07,440
monolith on bare metal or a service on

00:18:06,480 --> 00:18:10,480
vm

00:18:07,440 --> 00:18:12,960
um connects to the control plane and the

00:18:10,480 --> 00:18:13,840
control plane auto registers and creates

00:18:12,960 --> 00:18:16,960
that workload

00:18:13,840 --> 00:18:20,400
entry object that we talked about

00:18:16,960 --> 00:18:21,520
um similar to how a pod is created in

00:18:20,400 --> 00:18:24,240
kubernetes

00:18:21,520 --> 00:18:26,640
um and then you can choose to create

00:18:24,240 --> 00:18:29,520
pre-create the service entry object

00:18:26,640 --> 00:18:29,919
but we create that service entry object

00:18:29,520 --> 00:18:32,559
via

00:18:29,919 --> 00:18:34,080
a config web hook which listens for

00:18:32,559 --> 00:18:35,600
those workload entries so we don't have

00:18:34,080 --> 00:18:38,720
to pre-create it

00:18:35,600 --> 00:18:40,880
um and that is kind of how we um

00:18:38,720 --> 00:18:43,280
hope to adapt we're in the process of

00:18:40,880 --> 00:18:45,840
adopting the auto registration feature

00:18:43,280 --> 00:18:46,559
so that we can get rid of that zookeeper

00:18:45,840 --> 00:18:49,280
that we run

00:18:46,559 --> 00:18:50,799
today everything i said so far also

00:18:49,280 --> 00:18:53,440
holds good for vms

00:18:50,799 --> 00:18:54,480
and vm for vm based services we deploy

00:18:53,440 --> 00:18:58,400
the proxy

00:18:54,480 --> 00:19:01,919
using rpm istio 1.8

00:18:58,400 --> 00:19:04,720
also supports a dns proxy feature

00:19:01,919 --> 00:19:07,440
at the sidecar so adopting that feature

00:19:04,720 --> 00:19:09,760
will allow us to remove that special ip

00:19:07,440 --> 00:19:13,520
and dns that i talked about earlier

00:19:09,760 --> 00:19:16,400
to represent to refer to mesh services

00:19:13,520 --> 00:19:17,200
the sidecar can be used to resolve dns

00:19:16,400 --> 00:19:19,840
entries of

00:19:17,200 --> 00:19:22,400
any mesh service for example a

00:19:19,840 --> 00:19:24,880
non-kubernetes workload can refer to a

00:19:22,400 --> 00:19:26,559
kubernetes workload with the kubernetes

00:19:24,880 --> 00:19:28,960
dns name

00:19:26,559 --> 00:19:30,000
we use this feature today to resolve

00:19:28,960 --> 00:19:32,799
services

00:19:30,000 --> 00:19:34,080
running on different kubernetes clusters

00:19:32,799 --> 00:19:36,640
as part of our

00:19:34,080 --> 00:19:38,559
multi-cluster mesh support and we will

00:19:36,640 --> 00:19:40,720
be using that for non-kubernetes

00:19:38,559 --> 00:19:44,000
workloads as well

00:19:40,720 --> 00:19:46,720
i hope that gives you a feel for how sdo

00:19:44,000 --> 00:19:48,640
is being used to support services

00:19:46,720 --> 00:19:51,440
running on diverse infrastructure

00:19:48,640 --> 00:19:53,919
at salesforce i will now hand it off to

00:19:51,440 --> 00:19:56,880
suen to talk about how google uses istio

00:19:53,919 --> 00:19:58,640
beyond kubernetes

00:19:56,880 --> 00:20:00,240
all right thank you uh pratima and

00:19:58,640 --> 00:20:00,640
thanks zach for the the introduction

00:20:00,240 --> 00:20:03,200
there

00:20:00,640 --> 00:20:04,880
um so i'm gonna just really briefly

00:20:03,200 --> 00:20:05,520
touch on actually a lot of the same kind

00:20:04,880 --> 00:20:06,960
of stuff

00:20:05,520 --> 00:20:09,120
you'll see a lot of similar patterns

00:20:06,960 --> 00:20:12,240
here um just like

00:20:09,120 --> 00:20:14,799
just like salesforce google is running

00:20:12,240 --> 00:20:16,080
uh services in on-prem data centers as

00:20:14,799 --> 00:20:18,960
well as in cloud

00:20:16,080 --> 00:20:20,000
um the the group i'm going to talk about

00:20:18,960 --> 00:20:22,480
here really is

00:20:20,000 --> 00:20:23,600
google's internal corporate um

00:20:22,480 --> 00:20:25,919
engineering team that

00:20:23,600 --> 00:20:27,280
builds and runs a lot of our internal

00:20:25,919 --> 00:20:29,120
services um

00:20:27,280 --> 00:20:31,200
i think one of the the fun ones that

00:20:29,120 --> 00:20:33,600
actually they were starting with here is

00:20:31,200 --> 00:20:35,760
a system that provides menus of the

00:20:33,600 --> 00:20:38,880
cafes it's not been very useful the

00:20:35,760 --> 00:20:40,000
past year but that was a great app way

00:20:38,880 --> 00:20:43,520
before all this

00:20:40,000 --> 00:20:45,120
pandemic stuff happened um so we run

00:20:43,520 --> 00:20:47,360
applications uh these corporate

00:20:45,120 --> 00:20:49,600
applications both on cloud and on-prem

00:20:47,360 --> 00:20:51,120
um and in both cases we're using the

00:20:49,600 --> 00:20:52,960
service mesh for

00:20:51,120 --> 00:20:54,559
kind of all the stuff that everyone uses

00:20:52,960 --> 00:20:56,080
service mesh for right so the micro

00:20:54,559 --> 00:20:57,520
segmentation of the application layer so

00:20:56,080 --> 00:21:00,000
you don't need to do

00:20:57,520 --> 00:21:01,200
network firewalls um operations

00:21:00,000 --> 00:21:03,280
management

00:21:01,200 --> 00:21:04,559
uh the encryption requirements you know

00:21:03,280 --> 00:21:06,480
that zach was talking about for

00:21:04,559 --> 00:21:06,720
financials uh google has the same sort

00:21:06,480 --> 00:21:09,039
of

00:21:06,720 --> 00:21:09,760
encryption requirements on everything um

00:21:09,039 --> 00:21:11,760
and on just

00:21:09,760 --> 00:21:13,760
making releases easier to roll out and

00:21:11,760 --> 00:21:16,559
safe right using the canary support

00:21:13,760 --> 00:21:18,000
so those are kind of the main use cases

00:21:16,559 --> 00:21:20,080
um so

00:21:18,000 --> 00:21:21,760
within those let's look at uh the the

00:21:20,080 --> 00:21:24,159
applications running on

00:21:21,760 --> 00:21:25,760
google cloud platform um so this is a

00:21:24,159 --> 00:21:27,760
mix actually of

00:21:25,760 --> 00:21:30,400
internally written applications and also

00:21:27,760 --> 00:21:32,559
uh vendor applications provided by um

00:21:30,400 --> 00:21:34,720
vendors that google works with and the

00:21:32,559 --> 00:21:36,400
interesting thing there is that

00:21:34,720 --> 00:21:37,520
the because the way steel works you can

00:21:36,400 --> 00:21:39,280
actually just take those vendor

00:21:37,520 --> 00:21:39,760
applications and run stu on them without

00:21:39,280 --> 00:21:41,039
having

00:21:39,760 --> 00:21:42,240
you know having to have the source or

00:21:41,039 --> 00:21:43,200
anything and that's actually a huge

00:21:42,240 --> 00:21:44,880
benefit

00:21:43,200 --> 00:21:46,880
um so you can you can get all these

00:21:44,880 --> 00:21:50,159
controls without having the source

00:21:46,880 --> 00:21:50,960
um and again this is a mix of of vms and

00:21:50,159 --> 00:21:53,039
containers

00:21:50,960 --> 00:21:54,320
and serverless um we kind of use

00:21:53,039 --> 00:21:55,919
everything and we want them all to be

00:21:54,320 --> 00:21:58,159
able to talk to each other

00:21:55,919 --> 00:22:00,000
and to talk to the services running

00:21:58,159 --> 00:22:01,200
either on-prem or actually in our

00:22:00,000 --> 00:22:02,799
production environment

00:22:01,200 --> 00:22:04,480
now so we sort of need everything to be

00:22:02,799 --> 00:22:06,080
able to talk to everything and and istio

00:22:04,480 --> 00:22:09,360
is a big help there

00:22:06,080 --> 00:22:11,440
so for our our on-prem environment um

00:22:09,360 --> 00:22:13,200
we have basically the same stuff

00:22:11,440 --> 00:22:15,679
actually so we have

00:22:13,200 --> 00:22:16,400
you know this mix of vendor applications

00:22:15,679 --> 00:22:19,120
and custom

00:22:16,400 --> 00:22:20,640
built internal applications um here

00:22:19,120 --> 00:22:23,760
actually it's mostly bms

00:22:20,640 --> 00:22:25,440
for on-prem there's not yet a lot of

00:22:23,760 --> 00:22:27,039
container usage we are starting to

00:22:25,440 --> 00:22:29,120
experiment with

00:22:27,039 --> 00:22:31,200
google's anthos product to provide

00:22:29,120 --> 00:22:32,799
on-prem kubernetes and then get

00:22:31,200 --> 00:22:35,280
containers there but right now it's

00:22:32,799 --> 00:22:37,280
pretty much just vms

00:22:35,280 --> 00:22:38,559
and uh for these on-prem data centers we

00:22:37,280 --> 00:22:40,159
actually connect

00:22:38,559 --> 00:22:41,679
both to google cloud and to the

00:22:40,159 --> 00:22:43,200
production services kind of through the

00:22:41,679 --> 00:22:43,520
front doors of those services so there's

00:22:43,200 --> 00:22:45,360
no

00:22:43,520 --> 00:22:46,720
there's no backdoors here everything

00:22:45,360 --> 00:22:50,480
goes in as if it was

00:22:46,720 --> 00:22:51,919
you know anyone else right um so let's

00:22:50,480 --> 00:22:54,000
uh let's take a look at what this

00:22:51,919 --> 00:22:54,720
actually looks like again this is kind

00:22:54,000 --> 00:22:57,039
of at a

00:22:54,720 --> 00:22:58,000
at a high level here um so zach was

00:22:57,039 --> 00:23:00,640
talking about the

00:22:58,000 --> 00:23:02,720
the configuration distribution problem

00:23:00,640 --> 00:23:05,200
um so we actually already have a whole

00:23:02,720 --> 00:23:07,120
system in place for this that is set up

00:23:05,200 --> 00:23:08,240
to distribute sort of a lot of that

00:23:07,120 --> 00:23:10,720
lower level networking

00:23:08,240 --> 00:23:12,960
um configuration things like the the um

00:23:10,720 --> 00:23:14,720
network apples and and firewalls

00:23:12,960 --> 00:23:16,240
and other policies on projects and

00:23:14,720 --> 00:23:18,559
things like that um

00:23:16,240 --> 00:23:20,320
we're just reusing that system and you

00:23:18,559 --> 00:23:23,360
know adding a plug-in to support

00:23:20,320 --> 00:23:25,679
sending out the um the istio

00:23:23,360 --> 00:23:26,880
policies so that is how we distribute

00:23:25,679 --> 00:23:29,440
all of our policies to

00:23:26,880 --> 00:23:30,960
um to all the api servers and that

00:23:29,440 --> 00:23:34,240
actually provides

00:23:30,960 --> 00:23:36,640
a sort of paper trail if you will

00:23:34,240 --> 00:23:38,000
from source control all the way to the

00:23:36,640 --> 00:23:40,480
end state

00:23:38,000 --> 00:23:42,240
so no user is directly modifying

00:23:40,480 --> 00:23:43,600
anything in an api server

00:23:42,240 --> 00:23:45,360
right they're submitting things to our

00:23:43,600 --> 00:23:47,039
internal repository

00:23:45,360 --> 00:23:49,760
those changes are then vetted and then

00:23:47,039 --> 00:23:50,080
rolled out carefully to the entire fleet

00:23:49,760 --> 00:23:52,559
and

00:23:50,080 --> 00:23:53,840
it makes it a lot safer and you know you

00:23:52,559 --> 00:23:55,200
have your audit trail and all that kind

00:23:53,840 --> 00:23:58,480
of stuff

00:23:55,200 --> 00:24:01,520
um we we're actually running istudi here

00:23:58,480 --> 00:24:02,080
as a separate external service using the

00:24:01,520 --> 00:24:04,880
support

00:24:02,080 --> 00:24:05,919
um that was added for external sdod

00:24:04,880 --> 00:24:08,000
forget if that was in

00:24:05,919 --> 00:24:09,360
one seven or one eight but um it's

00:24:08,000 --> 00:24:10,400
available now and actually we're taking

00:24:09,360 --> 00:24:13,039
advantage of it

00:24:10,400 --> 00:24:14,240
um this lets you run an sdod that is not

00:24:13,039 --> 00:24:16,559
actually in any cluster

00:24:14,240 --> 00:24:18,320
you can run it uh you know however you

00:24:16,559 --> 00:24:19,840
want you can run on vm you can run it in

00:24:18,320 --> 00:24:21,679
a separate cluster that you manage

00:24:19,840 --> 00:24:23,919
um you can run it in serverless ways

00:24:21,679 --> 00:24:27,200
right there's lots of opportunity

00:24:23,919 --> 00:24:28,720
um to manage it without having you know

00:24:27,200 --> 00:24:30,320
the people that are running

00:24:28,720 --> 00:24:31,760
applications having to worry about this

00:24:30,320 --> 00:24:34,320
duty and

00:24:31,760 --> 00:24:35,120
care about it and feed it um so we run

00:24:34,320 --> 00:24:36,640
that and

00:24:35,120 --> 00:24:38,159
that is hooked up to read from the

00:24:36,640 --> 00:24:42,080
various api servers

00:24:38,159 --> 00:24:43,919
um in the in the mesh uh we are using

00:24:42,080 --> 00:24:46,799
auto registration that pratima

00:24:43,919 --> 00:24:48,240
talked about um so the vms they're

00:24:46,799 --> 00:24:51,279
running side cars

00:24:48,240 --> 00:24:53,200
um those headquarters auto register we

00:24:51,279 --> 00:24:54,480
automatically create the workload groups

00:24:53,200 --> 00:24:57,520
um for those

00:24:54,480 --> 00:24:59,760
based on the the configuration stored

00:24:57,520 --> 00:25:01,360
in the policy manager and so you know

00:24:59,760 --> 00:25:03,200
the whole system just kind of works and

00:25:01,360 --> 00:25:07,039
everything can talk to each other

00:25:03,200 --> 00:25:08,480
um the vm vm envoys and the pod envoys

00:25:07,039 --> 00:25:09,440
all just connect and manage onboard they

00:25:08,480 --> 00:25:11,679
get their configuration

00:25:09,440 --> 00:25:13,360
and you know everything just works so

00:25:11,679 --> 00:25:15,679
it's great

00:25:13,360 --> 00:25:16,799
um so that's that's a quick rundown of

00:25:15,679 --> 00:25:20,080
of how uh

00:25:16,799 --> 00:25:22,559
google is using istio internally

00:25:20,080 --> 00:25:23,919
cool awesome thank you all uh so just to

00:25:22,559 --> 00:25:25,919
kind of to come back and

00:25:23,919 --> 00:25:26,960
and summarize right if if we look

00:25:25,919 --> 00:25:28,080
through and

00:25:26,960 --> 00:25:30,080
look at like some of the high-level

00:25:28,080 --> 00:25:31,440
topologies here that we kind of talk

00:25:30,080 --> 00:25:32,480
through across these four use cases and

00:25:31,440 --> 00:25:34,080
we squint

00:25:32,480 --> 00:25:35,760
you know fundamentally we're really

00:25:34,080 --> 00:25:37,440
solving the same set of problems here

00:25:35,760 --> 00:25:38,960
right this this cross-cluster across

00:25:37,440 --> 00:25:41,039
site connectivity

00:25:38,960 --> 00:25:42,080
and isio gives us this really powerful

00:25:41,039 --> 00:25:43,679
set of tools we saw

00:25:42,080 --> 00:25:44,880
across these disparate organizations we

00:25:43,679 --> 00:25:46,880
weren't actually working particularly

00:25:44,880 --> 00:25:48,720
closely together any of the three of us

00:25:46,880 --> 00:25:49,919
around the development of these separate

00:25:48,720 --> 00:25:52,559
systems right

00:25:49,919 --> 00:25:53,919
uh but all of us converged at

00:25:52,559 --> 00:25:56,720
architectures that are that are

00:25:53,919 --> 00:25:58,000
you know very similar right and and even

00:25:56,720 --> 00:25:59,520
some of the lower level trade-offs for

00:25:58,000 --> 00:26:02,000
example that printable went over

00:25:59,520 --> 00:26:03,919
uh and and how you know on voice connect

00:26:02,000 --> 00:26:05,200
and those things are exactly things that

00:26:03,919 --> 00:26:07,039
that we've seen firsthand

00:26:05,200 --> 00:26:08,960
and i've seen firsthand you know sven i

00:26:07,039 --> 00:26:11,200
think you've seen similar things as well

00:26:08,960 --> 00:26:12,880
and you know and and that for you know

00:26:11,200 --> 00:26:14,159
so as a group of folks that are also

00:26:12,880 --> 00:26:14,720
helping build these tools that's

00:26:14,159 --> 00:26:16,080
incredible

00:26:14,720 --> 00:26:17,919
that's awesome and exciting because it

00:26:16,080 --> 00:26:19,279
says hey our tools are actually solving

00:26:17,919 --> 00:26:22,320
some problems

00:26:19,279 --> 00:26:24,640
um and and you know

00:26:22,320 --> 00:26:26,159
their issue today gives us this powerful

00:26:24,640 --> 00:26:26,960
vocabulary gives us these powerful set

00:26:26,159 --> 00:26:30,400
of tools for

00:26:26,960 --> 00:26:31,520
for solving these these problems um

00:26:30,400 --> 00:26:32,799
you know there's maybe just a little bit

00:26:31,520 --> 00:26:33,440
of roughness around wiring it up at the

00:26:32,799 --> 00:26:34,400
edges and there

00:26:33,440 --> 00:26:36,799
and there's trade-offs that you're going

00:26:34,400 --> 00:26:38,080
to want to make in the context of your

00:26:36,799 --> 00:26:40,159
particular deployment

00:26:38,080 --> 00:26:41,760
and the security posture that you need

00:26:40,159 --> 00:26:43,520
to maintain and all of those things

00:26:41,760 --> 00:26:46,640
there's no one-size-fits-all

00:26:43,520 --> 00:26:47,919
uh but the the primitives are there uh

00:26:46,640 --> 00:26:49,279
and they're powerful they're robust and

00:26:47,919 --> 00:26:53,679
they're in their tested to be able to go

00:26:49,279 --> 00:26:55,679
do this yourself

00:26:53,679 --> 00:26:57,360
and with that uh thanks everybody for

00:26:55,679 --> 00:26:59,360
coming any any closing comments

00:26:57,360 --> 00:27:00,559
uh friend of mine that y'all want to

00:26:59,360 --> 00:27:03,840
make

00:27:00,559 --> 00:27:06,240
i i'll echo what you said zach that the

00:27:03,840 --> 00:27:07,840
like seeing other people use this stuff

00:27:06,240 --> 00:27:09,919
just you know makes me so

00:27:07,840 --> 00:27:11,840
so incredibly happy and proud right of

00:27:09,919 --> 00:27:15,039
just uh and especially

00:27:11,840 --> 00:27:16,400
like you know i i worked i worked a lot

00:27:15,039 --> 00:27:18,000
on figuring out uh

00:27:16,400 --> 00:27:19,679
workload group and workload entry and

00:27:18,000 --> 00:27:21,200
auto registration and like making that

00:27:19,679 --> 00:27:22,799
all work and it's so it's so exciting to

00:27:21,200 --> 00:27:24,080
see someone say yeah you know we're

00:27:22,799 --> 00:27:25,520
starting to adopt it and it's going to

00:27:24,080 --> 00:27:27,039
solve problems for us right

00:27:25,520 --> 00:27:28,559
because that's what we're here for we're

00:27:27,039 --> 00:27:32,640
here to help solve problems so

00:27:28,559 --> 00:27:34,240
super exciting um i think you guys

00:27:32,640 --> 00:27:36,799
summarized it well i i

00:27:34,240 --> 00:27:39,039
and um we do feel like we've made the

00:27:36,799 --> 00:27:40,880
right choice as we adopted um

00:27:39,039 --> 00:27:42,080
istio as our control plane uh for

00:27:40,880 --> 00:27:46,399
salesforce

00:27:42,080 --> 00:27:48,240
um yeah uh that's all i have to say

00:27:46,399 --> 00:27:49,440
all right awesome thank you all we look

00:27:48,240 --> 00:27:53,760
forward to questions

00:27:49,440 --> 00:27:53,760

YouTube URL: https://www.youtube.com/watch?v=toftdZcF0OM


