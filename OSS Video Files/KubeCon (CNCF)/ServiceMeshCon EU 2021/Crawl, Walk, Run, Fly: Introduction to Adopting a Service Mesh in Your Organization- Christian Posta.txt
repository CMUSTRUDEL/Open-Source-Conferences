Title: Crawl, Walk, Run, Fly: Introduction to Adopting a Service Mesh in Your Organization- Christian Posta
Publication date: 2021-05-05
Playlist: ServiceMeshCon EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Crawl, Walk, Run, Fly: Introduction to Adopting a Service Mesh in Your Organization - Christian Posta, Solo.io

Deciding whether or not to use a service mesh and understanding the value/complexity tradeoff is step one when exploring service-mesh technology. Christian Posta has been helping organizations adopt this technology as a practitioner and architect for the last three (or more) years and shares practical guidance for how to adopt a service mesh for your organization. We explore top use cases like security posture, network debugging, regulatory and compliance, imperfect cloud-apps, and overall modernization efforts with microservices architectures. This is meant to be an intro-level talk with the audience better understand whether and how to adopt a service mesh.
Captions: 
	00:00:00,160 --> 00:00:04,279
thanks for attending my session at

00:00:02,720 --> 00:00:07,839
servicemeshcon eu

00:00:04,279 --> 00:00:08,480
2021 in this talk we're going to take a

00:00:07,839 --> 00:00:11,519
look at

00:00:08,480 --> 00:00:12,639
adopting a service mesh in an enterprise

00:00:11,519 --> 00:00:14,400
organization

00:00:12,639 --> 00:00:17,440
and some of the challenges and things to

00:00:14,400 --> 00:00:20,480
look out for this is intended to be

00:00:17,440 --> 00:00:23,840
a 101 201 level talk this

00:00:20,480 --> 00:00:26,480
is not a deep dive or anything

00:00:23,840 --> 00:00:27,760
advanced for those you know you can take

00:00:26,480 --> 00:00:29,359
a look at some of the other talks i've

00:00:27,760 --> 00:00:31,599
done in the past or

00:00:29,359 --> 00:00:33,120
blogs or books that i've written and

00:00:31,599 --> 00:00:34,640
webinars that i've done

00:00:33,120 --> 00:00:37,600
so my name is christian posta i'm a

00:00:34,640 --> 00:00:39,520
field cto here at solo.io

00:00:37,600 --> 00:00:42,239
we work with organizations around the

00:00:39,520 --> 00:00:45,039
world large ones small ones

00:00:42,239 --> 00:00:46,719
adopting istio based technology and

00:00:45,039 --> 00:00:47,680
deploying that into production at high

00:00:46,719 --> 00:00:49,440
scale

00:00:47,680 --> 00:00:51,840
to build out their application

00:00:49,440 --> 00:00:54,239
networking architecture

00:00:51,840 --> 00:00:55,600
i've written books on this and and have

00:00:54,239 --> 00:00:57,120
been discussing this and been involved

00:00:55,600 --> 00:01:00,000
in the seo community

00:00:57,120 --> 00:01:00,640
since uh the very beginning and although

00:01:00,000 --> 00:01:03,199
this talk

00:01:00,640 --> 00:01:04,879
won't be an istio talk per se it will

00:01:03,199 --> 00:01:08,560
pop up since that's what we

00:01:04,879 --> 00:01:11,680
we do here at uh at solo

00:01:08,560 --> 00:01:13,200
our typical challenges are around or

00:01:11,680 --> 00:01:14,320
customer challenges

00:01:13,200 --> 00:01:17,040
that we work with are around

00:01:14,320 --> 00:01:19,520
modernization and going to

00:01:17,040 --> 00:01:20,159
a application architecture that better

00:01:19,520 --> 00:01:23,040
supports

00:01:20,159 --> 00:01:24,479
moving faster and delivering features

00:01:23,040 --> 00:01:27,280
delivering things

00:01:24,479 --> 00:01:27,759
more quickly using public cloud private

00:01:27,280 --> 00:01:30,799
cloud

00:01:27,759 --> 00:01:31,360
to do that service mesh is a piece of

00:01:30,799 --> 00:01:34,079
that

00:01:31,360 --> 00:01:36,159
puzzle service mesh solves the problems

00:01:34,079 --> 00:01:37,360
of how applications communicate with

00:01:36,159 --> 00:01:40,320
each other

00:01:37,360 --> 00:01:40,880
and in a typical organization we see not

00:01:40,320 --> 00:01:43,920
just

00:01:40,880 --> 00:01:45,520
the modernization efforts around either

00:01:43,920 --> 00:01:48,560
building new services

00:01:45,520 --> 00:01:52,880
using new tools new architectures

00:01:48,560 --> 00:01:54,799
or bringing along older or more legacy

00:01:52,880 --> 00:01:56,159
systems monolithic and trying to split

00:01:54,799 --> 00:01:57,600
and rewrite them

00:01:56,159 --> 00:01:59,920
and integrating with the rest of the

00:01:57,600 --> 00:02:01,200
organization all right so how do we

00:01:59,920 --> 00:02:04,000
connect services

00:02:01,200 --> 00:02:05,200
in a heterogeneous environment like this

00:02:04,000 --> 00:02:08,160
and solve the problems

00:02:05,200 --> 00:02:09,840
of service discovery load balancing

00:02:08,160 --> 00:02:10,879
timeouts retry circuit breaking the

00:02:09,840 --> 00:02:13,920
resilience

00:02:10,879 --> 00:02:15,599
aspects of application networking things

00:02:13,920 --> 00:02:18,800
like security

00:02:15,599 --> 00:02:19,840
things like observability and do this in

00:02:18,800 --> 00:02:23,760
a way that is cloud

00:02:19,840 --> 00:02:28,000
friendly and what i mean by that is api

00:02:23,760 --> 00:02:30,080
apis to programmatically control this

00:02:28,000 --> 00:02:32,480
at runtime knowing that the underlying

00:02:30,080 --> 00:02:36,319
infrastructure is dynamic

00:02:32,480 --> 00:02:39,200
and is ephemeral right so service mesh

00:02:36,319 --> 00:02:40,720
plays a role in helping to facilitate

00:02:39,200 --> 00:02:44,160
solving this type of

00:02:40,720 --> 00:02:47,519
problem the the problem

00:02:44,160 --> 00:02:50,560
that we're going to look at is deploying

00:02:47,519 --> 00:02:53,040
microservices into dynamic

00:02:50,560 --> 00:02:54,800
infrastructure and getting those things

00:02:53,040 --> 00:02:58,720
to communicate with each other that

00:02:54,800 --> 00:03:00,480
itself is a complex problem

00:02:58,720 --> 00:03:02,720
using a service mesh to solve that

00:03:00,480 --> 00:03:04,080
simplifies some areas of that but it's

00:03:02,720 --> 00:03:06,560
not a holistic

00:03:04,080 --> 00:03:08,159
jump in and adopt everything type

00:03:06,560 --> 00:03:10,000
proposition

00:03:08,159 --> 00:03:11,680
so the way we work with our

00:03:10,000 --> 00:03:14,319
organizations

00:03:11,680 --> 00:03:15,920
is to slowly adopt that first of all

00:03:14,319 --> 00:03:17,280
determine whether or not you need

00:03:15,920 --> 00:03:20,400
this type of technology but then to

00:03:17,280 --> 00:03:23,760
slowly adopt that using a crawl walk run

00:03:20,400 --> 00:03:25,680
type methodology but getting this

00:03:23,760 --> 00:03:27,200
sort of infrastructure into into place

00:03:25,680 --> 00:03:31,120
can really enable

00:03:27,200 --> 00:03:34,319
an organization to achieve its technical

00:03:31,120 --> 00:03:35,360
goals which then leads to better

00:03:34,319 --> 00:03:37,360
business outcomes

00:03:35,360 --> 00:03:38,560
and so that's where the fly part starts

00:03:37,360 --> 00:03:39,760
to come in

00:03:38,560 --> 00:03:42,720
so the first thing you need to ask

00:03:39,760 --> 00:03:45,599
yourself is do you need a service mesh

00:03:42,720 --> 00:03:47,040
well only you can answer that really are

00:03:45,599 --> 00:03:48,239
you building a micro services style

00:03:47,040 --> 00:03:49,840
architecture

00:03:48,239 --> 00:03:51,360
are you using multiple frameworks in

00:03:49,840 --> 00:03:53,840
multiple languages

00:03:51,360 --> 00:03:56,159
microservices themselves that's a

00:03:53,840 --> 00:03:58,319
complicated field

00:03:56,159 --> 00:04:00,879
so you might hear that service mesh is

00:03:58,319 --> 00:04:02,959
complicated kubernetes is complicated

00:04:00,879 --> 00:04:05,120
well we're dealing with a foundationally

00:04:02,959 --> 00:04:06,959
complicated topic

00:04:05,120 --> 00:04:09,120
now if you're going to containers and

00:04:06,959 --> 00:04:11,920
you're leveraging some of this dynamic

00:04:09,120 --> 00:04:12,720
infrastructure that you know may

00:04:11,920 --> 00:04:15,840
necessitate

00:04:12,720 --> 00:04:19,519
a solution like service mesh

00:04:15,840 --> 00:04:21,359
if you're doing things like rpc type

00:04:19,519 --> 00:04:24,000
interactions with your between your

00:04:21,359 --> 00:04:26,720
services using different frameworks

00:04:24,000 --> 00:04:27,520
uh you know making updates to how these

00:04:26,720 --> 00:04:31,199
policies

00:04:27,520 --> 00:04:33,199
are are enforced or written you may need

00:04:31,199 --> 00:04:35,520
to look at some sort of automation that

00:04:33,199 --> 00:04:37,040
can do this service mesh can help

00:04:35,520 --> 00:04:39,040
and then of course if you're getting out

00:04:37,040 --> 00:04:41,040
to a large set of services

00:04:39,040 --> 00:04:42,320
individual teams owning their own

00:04:41,040 --> 00:04:45,360
services

00:04:42,320 --> 00:04:48,160
and you need a platform uh approach

00:04:45,360 --> 00:04:50,000
to solving these problems consistently

00:04:48,160 --> 00:04:51,199
so you might you may look at using a

00:04:50,000 --> 00:04:54,320
service mesh

00:04:51,199 --> 00:04:56,880
for that things to keep out keep an eye

00:04:54,320 --> 00:05:00,479
out for if you're not there yet

00:04:56,880 --> 00:05:02,639
is you know the the number of services

00:05:00,479 --> 00:05:04,240
that you're trying to support especially

00:05:02,639 --> 00:05:07,039
if they're heterogeneous

00:05:04,240 --> 00:05:07,919
different languages different frameworks

00:05:07,039 --> 00:05:11,680
um

00:05:07,919 --> 00:05:13,280
you know being able to consistently

00:05:11,680 --> 00:05:15,120
understand what's happening on the

00:05:13,280 --> 00:05:18,960
network by

00:05:15,120 --> 00:05:22,080
capturing golden signals uh

00:05:18,960 --> 00:05:23,280
requests failing how long they're taking

00:05:22,080 --> 00:05:25,680
uh whether circuit breaking breaking's

00:05:23,280 --> 00:05:27,039
open opening up or how many retries are

00:05:25,680 --> 00:05:29,759
happening between services

00:05:27,039 --> 00:05:30,880
and trying to detect what's happening uh

00:05:29,759 --> 00:05:32,560
on the network

00:05:30,880 --> 00:05:34,400
in a consistent way not leaving it up to

00:05:32,560 --> 00:05:35,919
each application developer to

00:05:34,400 --> 00:05:39,280
well maybe they exposed the right

00:05:35,919 --> 00:05:41,360
telemetry signals maybe they didn't

00:05:39,280 --> 00:05:42,479
and then at the end of the day just like

00:05:41,360 --> 00:05:45,120
any other

00:05:42,479 --> 00:05:45,600
technology you want to pick a handful of

00:05:45,120 --> 00:05:48,800
high

00:05:45,600 --> 00:05:49,199
value use cases and start to go down the

00:05:48,800 --> 00:05:52,240
path

00:05:49,199 --> 00:05:53,600
and iterate all right we like things

00:05:52,240 --> 00:05:55,759
like kubernetes things like

00:05:53,600 --> 00:05:57,520
istio they provide a lot a lot of

00:05:55,759 --> 00:05:59,600
functionality and they touch a lot of

00:05:57,520 --> 00:06:02,240
different parts of the organization

00:05:59,600 --> 00:06:03,120
but you know the focus of start small

00:06:02,240 --> 00:06:05,520
and iterate

00:06:03,120 --> 00:06:07,360
pick a particular use case some of these

00:06:05,520 --> 00:06:07,759
are the the typical use cases that

00:06:07,360 --> 00:06:10,639
people

00:06:07,759 --> 00:06:11,600
start with they want security they have

00:06:10,639 --> 00:06:14,319
compliance

00:06:11,600 --> 00:06:15,600
issues they uh data in flight needs to

00:06:14,319 --> 00:06:17,199
be encrypted

00:06:15,600 --> 00:06:19,520
uh services communicating with each

00:06:17,199 --> 00:06:20,160
other need to know and validate that

00:06:19,520 --> 00:06:22,240
they are

00:06:20,160 --> 00:06:23,759
indeed the services they they believe

00:06:22,240 --> 00:06:25,360
they are

00:06:23,759 --> 00:06:27,360
they need to build things to be a little

00:06:25,360 --> 00:06:28,960
bit more resilient with timeouts and

00:06:27,360 --> 00:06:30,800
retries and circuit breaking and so on

00:06:28,960 --> 00:06:34,479
do that in a consistent fashion

00:06:30,800 --> 00:06:36,319
these are some of the top use cases

00:06:34,479 --> 00:06:39,919
so let's take a look at what this

00:06:36,319 --> 00:06:42,880
journey entails

00:06:39,919 --> 00:06:44,160
let's start with i don't want to say

00:06:42,880 --> 00:06:46,240
obvious but

00:06:44,160 --> 00:06:47,759
you know it becomes very clear as soon

00:06:46,240 --> 00:06:50,400
as you start digging into

00:06:47,759 --> 00:06:52,639
these types of solutions there will be a

00:06:50,400 --> 00:06:54,720
learning curve

00:06:52,639 --> 00:06:55,759
there will be a learning curve in terms

00:06:54,720 --> 00:06:58,240
of how

00:06:55,759 --> 00:06:59,440
your particular organization adopts this

00:06:58,240 --> 00:07:01,360
technology

00:06:59,440 --> 00:07:03,039
just like maybe you did and went through

00:07:01,360 --> 00:07:05,280
with kubernetes

00:07:03,039 --> 00:07:07,360
all right so these types of tools where

00:07:05,280 --> 00:07:10,400
you're blending infrastructure

00:07:07,360 --> 00:07:11,680
and developer concerns require different

00:07:10,400 --> 00:07:12,240
parts of the organization to come

00:07:11,680 --> 00:07:16,000
together

00:07:12,240 --> 00:07:20,479
and um and figure it out together

00:07:16,000 --> 00:07:23,840
ideally you will have a foundational

00:07:20,479 --> 00:07:26,639
platform in place you will

00:07:23,840 --> 00:07:27,840
have automation in place things like

00:07:26,639 --> 00:07:30,080
your ci cd

00:07:27,840 --> 00:07:31,120
or any of the custom automation that you

00:07:30,080 --> 00:07:34,479
needed to build

00:07:31,120 --> 00:07:35,680
to get your platform to work you would

00:07:34,479 --> 00:07:37,919
ideally have

00:07:35,680 --> 00:07:40,080
a telemetry collection system or some

00:07:37,919 --> 00:07:42,800
some some place where you're

00:07:40,080 --> 00:07:44,639
storing time series based metrics and

00:07:42,800 --> 00:07:46,080
able to do dashboarding and and that

00:07:44,639 --> 00:07:48,400
kind of stuff

00:07:46,080 --> 00:07:50,240
once you start to kick the tires on a

00:07:48,400 --> 00:07:51,199
particular service mesh or you choose

00:07:50,240 --> 00:07:53,759
one

00:07:51,199 --> 00:07:54,639
then you will want to understand the

00:07:53,759 --> 00:07:57,039
underlying

00:07:54,639 --> 00:07:58,800
data plane technology the proxies that

00:07:57,039 --> 00:08:02,000
are actually on the request path

00:07:58,800 --> 00:08:03,440
it's a very important step in adopting a

00:08:02,000 --> 00:08:06,479
service mesh

00:08:03,440 --> 00:08:08,800
to some when they start exploring the

00:08:06,479 --> 00:08:09,919
the mesh the data plane may seem like a

00:08:08,800 --> 00:08:12,639
black box

00:08:09,919 --> 00:08:13,680
in some cases for example istio or with

00:08:12,639 --> 00:08:15,280
envoy

00:08:13,680 --> 00:08:17,280
or the i guess onboard based service

00:08:15,280 --> 00:08:17,840
messages there's there's a lot to glean

00:08:17,280 --> 00:08:20,400
from

00:08:17,840 --> 00:08:22,879
envoy envoy is a is a white box there's

00:08:20,400 --> 00:08:24,479
a lot of stuff that gets exposed

00:08:22,879 --> 00:08:26,000
and uh and you can leverage to

00:08:24,479 --> 00:08:30,000
understand what exactly is happening

00:08:26,000 --> 00:08:33,519
on the network you know when we

00:08:30,000 --> 00:08:34,560
work with our customers and users in the

00:08:33,519 --> 00:08:36,479
community

00:08:34,560 --> 00:08:38,000
we typically tend to see either people

00:08:36,479 --> 00:08:38,880
do this on their own or we recommend it

00:08:38,000 --> 00:08:41,279
anyway

00:08:38,880 --> 00:08:42,719
starting with the edge first so you want

00:08:41,279 --> 00:08:44,000
to build a service mesh where services

00:08:42,719 --> 00:08:46,480
are communicating with each other

00:08:44,000 --> 00:08:49,839
they're using these data plane proxies

00:08:46,480 --> 00:08:53,040
start with ingress start with one proxy

00:08:49,839 --> 00:08:54,560
not 500 and un use that as an

00:08:53,040 --> 00:08:56,000
opportunity first of all it's a well

00:08:54,560 --> 00:08:57,839
understood pattern

00:08:56,000 --> 00:08:59,839
use that as an opportunity if you put it

00:08:57,839 --> 00:09:02,080
at the ingress or sort of an api

00:08:59,839 --> 00:09:03,279
gateway layer use that as an opportunity

00:09:02,080 --> 00:09:05,920
to understand

00:09:03,279 --> 00:09:07,760
the data plane thoroughly how to debug

00:09:05,920 --> 00:09:10,720
it how to troubleshoot it and so on

00:09:07,760 --> 00:09:12,959
how to integrate that particular piece

00:09:10,720 --> 00:09:14,800
and the control plane pieces with your

00:09:12,959 --> 00:09:17,839
automation with your

00:09:14,800 --> 00:09:20,880
observability systems and that should be

00:09:17,839 --> 00:09:24,160
kind of the way you tiptoe into adopting

00:09:20,880 --> 00:09:27,200
a service mesh so starting at the edge

00:09:24,160 --> 00:09:29,680
again familiar uh ingress pattern

00:09:27,200 --> 00:09:31,200
you don't if for example using istio you

00:09:29,680 --> 00:09:34,320
don't need to use

00:09:31,200 --> 00:09:34,880
the sidecar proxies just to get the the

00:09:34,320 --> 00:09:37,360
traffic

00:09:34,880 --> 00:09:38,959
ingress routing at the edge you can just

00:09:37,360 --> 00:09:42,000
start using edge and route out to

00:09:38,959 --> 00:09:42,320
any services now as you start to refine

00:09:42,000 --> 00:09:45,920
this

00:09:42,320 --> 00:09:48,399
maybe you want to expand this out to

00:09:45,920 --> 00:09:49,680
different clusters or different

00:09:48,399 --> 00:09:50,880
infrastructure footprints that you may

00:09:49,680 --> 00:09:54,320
have you may find

00:09:50,880 --> 00:09:57,760
that this uh this

00:09:54,320 --> 00:10:00,880
proxy or ingress gateway pattern

00:09:57,760 --> 00:10:03,360
starts to build up a layer or two

00:10:00,880 --> 00:10:05,040
and uh you may isolate different

00:10:03,360 --> 00:10:05,920
boundaries either different applications

00:10:05,040 --> 00:10:07,519
or different

00:10:05,920 --> 00:10:09,200
clusters or different organizational

00:10:07,519 --> 00:10:12,320
units following this

00:10:09,200 --> 00:10:12,880
the same ingress pattern and you start

00:10:12,320 --> 00:10:16,959
to see

00:10:12,880 --> 00:10:19,760
a mesh of edge gateways start to form

00:10:16,959 --> 00:10:21,760
and you know from here now you can start

00:10:19,760 --> 00:10:25,680
to push to continue to push those

00:10:21,760 --> 00:10:27,120
proxies down into your infrastructure um

00:10:25,680 --> 00:10:29,360
and start to get the benefits of the

00:10:27,120 --> 00:10:31,040
service to service communication

00:10:29,360 --> 00:10:32,560
so let me pause here for a second and

00:10:31,040 --> 00:10:34,720
let's just come over

00:10:32,560 --> 00:10:37,040
uh take a look at a quick demo hopefully

00:10:34,720 --> 00:10:38,480
everything is set up the way i expect

00:10:37,040 --> 00:10:41,040
so what we're going to do here is we are

00:10:38,480 --> 00:10:41,040
going to

00:10:41,120 --> 00:10:46,079
maybe take a look at an existing set of

00:10:44,640 --> 00:10:48,880
services that we may have

00:10:46,079 --> 00:10:50,640
we have a kubernetes cluster a handful

00:10:48,880 --> 00:10:54,240
of services that are deployed

00:10:50,640 --> 00:10:56,160
in this case the web api calls the

00:10:54,240 --> 00:10:57,600
recommendation service which then calls

00:10:56,160 --> 00:10:59,200
the purchase history

00:10:57,600 --> 00:11:00,959
service so you can see these pods

00:10:59,200 --> 00:11:04,399
running here in our kubernetes cluster

00:11:00,959 --> 00:11:07,200
don't have any service mesh installed

00:11:04,399 --> 00:11:09,040
we're going to install a service mesh

00:11:07,200 --> 00:11:11,760
istio in this case

00:11:09,040 --> 00:11:12,079
and we'll give it a second to go through

00:11:11,760 --> 00:11:14,800
the

00:11:12,079 --> 00:11:15,279
installation process and bootstrapping

00:11:14,800 --> 00:11:18,800
of

00:11:15,279 --> 00:11:22,720
the uh of the of the control plane

00:11:18,800 --> 00:11:22,720
let's see if we can do a cube ctl

00:11:23,200 --> 00:11:29,839
get on instead system and see

00:11:26,399 --> 00:11:29,839
whether it's coming up

00:11:30,000 --> 00:11:33,440
should be coming up let's also take a

00:11:32,640 --> 00:11:36,959
look at

00:11:33,440 --> 00:11:40,320
uh for this demo we need to

00:11:36,959 --> 00:11:41,440
we need our cloud provider to cooperate

00:11:40,320 --> 00:11:43,040
with us and

00:11:41,440 --> 00:11:44,560
trying to give us an external ip so we

00:11:43,040 --> 00:11:47,600
can actually make calls so

00:11:44,560 --> 00:11:49,519
what we have installed

00:11:47,600 --> 00:11:51,360
if we come over here and look at the top

00:11:49,519 --> 00:11:55,279
pane we've installed

00:11:51,360 --> 00:11:58,399
the control plane for our service mesh

00:11:55,279 --> 00:12:01,600
and then we've also installed

00:11:58,399 --> 00:12:02,800
the ingress gateway and so this is an

00:12:01,600 --> 00:12:05,360
example of starting

00:12:02,800 --> 00:12:07,200
small right we have our ingress gateway

00:12:05,360 --> 00:12:08,800
we have our control plane

00:12:07,200 --> 00:12:10,720
and that's all we really need to get

00:12:08,800 --> 00:12:14,240
started we finally do have

00:12:10,720 --> 00:12:16,560
our external ip so let's

00:12:14,240 --> 00:12:17,920
let's carry on so the first thing we're

00:12:16,560 --> 00:12:21,680
going to do is we're going to expose

00:12:17,920 --> 00:12:25,040
one of our services the web api service

00:12:21,680 --> 00:12:27,760
onto the ingress gateway so clients from

00:12:25,040 --> 00:12:29,600
outside the cluster can call in

00:12:27,760 --> 00:12:30,800
so let's apply these resources how you

00:12:29,600 --> 00:12:33,519
do it in

00:12:30,800 --> 00:12:33,519
in istio

00:12:33,920 --> 00:12:38,480
we'll give that a second and then when

00:12:37,200 --> 00:12:41,120
we make a call

00:12:38,480 --> 00:12:41,920
using curl in this case we should be

00:12:41,120 --> 00:12:44,399
able to

00:12:41,920 --> 00:12:46,480
get routed to our service and we see

00:12:44,399 --> 00:12:49,760
that that we do in this case

00:12:46,480 --> 00:12:51,839
web api calls recommendation

00:12:49,760 --> 00:12:52,800
there's some sample services here which

00:12:51,839 --> 00:12:55,760
calls purchase

00:12:52,800 --> 00:12:56,959
history all right so that's that's all

00:12:55,760 --> 00:12:59,839
good

00:12:56,959 --> 00:13:01,839
we can also do things istio for example

00:12:59,839 --> 00:13:03,040
envoy has out of the box things like jot

00:13:01,839 --> 00:13:05,200
validation

00:13:03,040 --> 00:13:06,480
um some other you know tls termination

00:13:05,200 --> 00:13:09,120
those types of things

00:13:06,480 --> 00:13:10,000
and we can apply that to our our edge

00:13:09,120 --> 00:13:12,160
gateway and still

00:13:10,000 --> 00:13:13,200
get start to start to get value from it

00:13:12,160 --> 00:13:15,200
if you're if you're trying to go a

00:13:13,200 --> 00:13:19,680
full-blown api gateway where you need

00:13:15,200 --> 00:13:21,680
transformation you may need a complex uh

00:13:19,680 --> 00:13:22,720
usage policies based around rate

00:13:21,680 --> 00:13:26,160
limiting

00:13:22,720 --> 00:13:26,560
you need things like uh oidc and ldap

00:13:26,160 --> 00:13:29,440
and

00:13:26,560 --> 00:13:30,240
you know more more advanced security

00:13:29,440 --> 00:13:32,399
features

00:13:30,240 --> 00:13:33,440
look at something like a glue edge which

00:13:32,399 --> 00:13:36,480
is also based on

00:13:33,440 --> 00:13:39,200
envoy and delivers more api gateway

00:13:36,480 --> 00:13:39,200
functionality

00:13:39,600 --> 00:13:43,360
so all right so that's that's the uh

00:13:42,399 --> 00:13:45,279
crawl

00:13:43,360 --> 00:13:47,600
part of our our journey we're just

00:13:45,279 --> 00:13:49,839
stepping our are putting our toes into

00:13:47,600 --> 00:13:52,000
the service mesh world

00:13:49,839 --> 00:13:53,760
now once we've got a little bit past

00:13:52,000 --> 00:13:57,360
that we get to

00:13:53,760 --> 00:13:58,240
the the walk part where you want to

00:13:57,360 --> 00:14:00,880
start

00:13:58,240 --> 00:14:02,000
giving out or allowing different teams

00:14:00,880 --> 00:14:04,160
to use the functionality

00:14:02,000 --> 00:14:05,600
of the surface mesh like i said

00:14:04,160 --> 00:14:07,279
client-side load balancing service

00:14:05,600 --> 00:14:10,800
discovery timeouts retries

00:14:07,279 --> 00:14:13,440
circuit breaking automated security

00:14:10,800 --> 00:14:15,120
policy enforcement and so on so you need

00:14:13,440 --> 00:14:18,800
to start identify what

00:14:15,120 --> 00:14:20,880
what teams and what roles make up

00:14:18,800 --> 00:14:22,240
the the different groups that we'll be

00:14:20,880 --> 00:14:23,519
using and consuming

00:14:22,240 --> 00:14:25,279
technology like this and how are we

00:14:23,519 --> 00:14:28,079
going to expose it to them

00:14:25,279 --> 00:14:28,720
are we going to give them the istio apis

00:14:28,079 --> 00:14:31,839
directly

00:14:28,720 --> 00:14:33,040
or your respective service mesh apis

00:14:31,839 --> 00:14:35,519
directly

00:14:33,040 --> 00:14:36,399
in general those are kind of complicated

00:14:35,519 --> 00:14:39,040
um

00:14:36,399 --> 00:14:39,680
are we going to build a an api your own

00:14:39,040 --> 00:14:42,320
or

00:14:39,680 --> 00:14:42,880
tie in with your own existing automation

00:14:42,320 --> 00:14:44,800
right so

00:14:42,880 --> 00:14:46,880
there's a handful of things to explore

00:14:44,800 --> 00:14:50,240
there when you roll out

00:14:46,880 --> 00:14:51,279
the sidecar proxies to your applications

00:14:50,240 --> 00:14:53,839
you're hoping to do this in a

00:14:51,279 --> 00:14:56,320
transparent way you should test that

00:14:53,839 --> 00:14:56,880
because we've run into so many different

00:14:56,320 --> 00:14:58,880
uh

00:14:56,880 --> 00:15:00,240
use cases where this is not the case

00:14:58,880 --> 00:15:03,279
application

00:15:00,240 --> 00:15:04,399
uh you know comes up first starts to try

00:15:03,279 --> 00:15:05,040
to make a connection to the outside

00:15:04,399 --> 00:15:06,639
world

00:15:05,040 --> 00:15:08,399
the sidecar process is not ready yet

00:15:06,639 --> 00:15:09,839
starts to fail an application can't

00:15:08,399 --> 00:15:11,040
handle the failure it wasn't built for

00:15:09,839 --> 00:15:13,279
that so

00:15:11,040 --> 00:15:15,040
pod recycles same thing happens right

00:15:13,279 --> 00:15:18,000
you get this uh

00:15:15,040 --> 00:15:19,360
it's crash looping or the opposite all

00:15:18,000 --> 00:15:22,959
right the service

00:15:19,360 --> 00:15:25,519
is being spun down for some reason and

00:15:22,959 --> 00:15:26,959
the proxy comes down first but it was

00:15:25,519 --> 00:15:28,720
there's still live connections going the

00:15:26,959 --> 00:15:30,959
applications can't handle that

00:15:28,720 --> 00:15:32,720
so explore exactly what transparent

00:15:30,959 --> 00:15:33,040
means to you and your application these

00:15:32,720 --> 00:15:34,959
are

00:15:33,040 --> 00:15:36,800
typically when we're migrating or

00:15:34,959 --> 00:15:37,519
modernizing these are typically

00:15:36,800 --> 00:15:39,839
imperfect

00:15:37,519 --> 00:15:41,759
cloud applications and you know figuring

00:15:39,839 --> 00:15:44,720
out how the service mesh will

00:15:41,759 --> 00:15:47,120
behave with those applications is uh is

00:15:44,720 --> 00:15:49,600
part of the walking part of this

00:15:47,120 --> 00:15:51,600
journey like i said iteratively take

00:15:49,600 --> 00:15:54,720
advantage of the features

00:15:51,600 --> 00:15:56,800
start to roll out the service proxies

00:15:54,720 --> 00:15:57,759
enabling things like telemetry

00:15:56,800 --> 00:16:01,120
collection so

00:15:57,759 --> 00:16:04,000
your prometheus your data dog scrape the

00:16:01,120 --> 00:16:05,360
the telemetry from these proxies and uh

00:16:04,000 --> 00:16:08,560
and start to build

00:16:05,360 --> 00:16:10,959
security policies and all the while

00:16:08,560 --> 00:16:11,600
build up your skills around debugging

00:16:10,959 --> 00:16:13,279
the

00:16:11,600 --> 00:16:15,120
the configuration issues that you might

00:16:13,279 --> 00:16:16,720
run into or

00:16:15,120 --> 00:16:19,120
you have the proxies in place and things

00:16:16,720 --> 00:16:20,720
start to go wrong things are slow

00:16:19,120 --> 00:16:22,240
things are failing you know how do you

00:16:20,720 --> 00:16:24,959
actually debug the network

00:16:22,240 --> 00:16:26,160
in that case uh and then of course any

00:16:24,959 --> 00:16:28,240
day two

00:16:26,160 --> 00:16:29,759
operation of a service mesh includes

00:16:28,240 --> 00:16:32,320
being able to upgrade

00:16:29,759 --> 00:16:33,519
that service mesh with zero downtime all

00:16:32,320 --> 00:16:38,800
right so let's take a

00:16:33,519 --> 00:16:38,800
very quick look at how we might roll out

00:16:40,639 --> 00:16:43,680
a service mesh into our existing

00:16:43,120 --> 00:16:46,240
services

00:16:43,680 --> 00:16:47,199
right so we have our existing services

00:16:46,240 --> 00:16:49,759
we don't have

00:16:47,199 --> 00:16:52,320
any any service mesh deployed no sidecar

00:16:49,759 --> 00:16:55,199
proxies deployed here

00:16:52,320 --> 00:16:56,639
and what we're going to do is if we call

00:16:55,199 --> 00:16:59,519
from the sleep service

00:16:56,639 --> 00:17:00,399
to the web api service we see that it

00:16:59,519 --> 00:17:03,040
works the

00:17:00,399 --> 00:17:03,839
communication works here so now what we

00:17:03,040 --> 00:17:07,120
might do

00:17:03,839 --> 00:17:08,160
if we have automatic injection available

00:17:07,120 --> 00:17:12,079
for our

00:17:08,160 --> 00:17:16,319
our service mesh we may start to slowly

00:17:12,079 --> 00:17:19,360
and iteratively notice this common theme

00:17:16,319 --> 00:17:21,360
bring workloads into the mesh

00:17:19,360 --> 00:17:23,280
and so in this case anytime we make a

00:17:21,360 --> 00:17:25,919
change to our application

00:17:23,280 --> 00:17:27,199
we want to treat it uh very carefully we

00:17:25,919 --> 00:17:29,440
want to treat it as

00:17:27,199 --> 00:17:30,640
a canary or do a slow rollout in this

00:17:29,440 --> 00:17:31,760
case we're making a change to our

00:17:30,640 --> 00:17:33,600
application

00:17:31,760 --> 00:17:35,200
because we're injecting the sidecar

00:17:33,600 --> 00:17:36,400
maybe we haven't made any changes to the

00:17:35,200 --> 00:17:39,280
source code

00:17:36,400 --> 00:17:41,360
but we've injected the sidecar so now we

00:17:39,280 --> 00:17:44,320
have in this case two replicas

00:17:41,360 --> 00:17:45,039
of of the web api service but only one

00:17:44,320 --> 00:17:47,919
of them has

00:17:45,039 --> 00:17:49,679
the sign card so in this case we would

00:17:47,919 --> 00:17:50,720
do some tests do some smoke tests make

00:17:49,679 --> 00:17:53,679
sure that everything

00:17:50,720 --> 00:17:54,559
continues to function and look fine and

00:17:53,679 --> 00:17:57,280
it sure does

00:17:54,559 --> 00:17:58,160
so then we'll continue rolling out the

00:17:57,280 --> 00:18:00,320
the

00:17:58,160 --> 00:18:02,320
various services that we have in this

00:18:00,320 --> 00:18:06,799
case we'll speed it up

00:18:02,320 --> 00:18:09,760
um we'll speed it up so that all

00:18:06,799 --> 00:18:10,880
of the services end up slowly you know

00:18:09,760 --> 00:18:11,679
we're fast forwarding what would

00:18:10,880 --> 00:18:14,400
otherwise be

00:18:11,679 --> 00:18:15,919
a slow canary rollout of every service

00:18:14,400 --> 00:18:19,520
where we slowly introduce

00:18:15,919 --> 00:18:22,880
the service proxy

00:18:19,520 --> 00:18:25,200
right and we follow the same

00:18:22,880 --> 00:18:26,880
model for doing things like enabling

00:18:25,200 --> 00:18:28,160
mutual tls there's another thing that we

00:18:26,880 --> 00:18:29,039
run into with some of these

00:18:28,160 --> 00:18:31,120
organizations

00:18:29,039 --> 00:18:32,320
where they have services uh

00:18:31,120 --> 00:18:33,360
communicating with each other and they

00:18:32,320 --> 00:18:36,000
want to enable

00:18:33,360 --> 00:18:37,039
mutual tls and for the services in the

00:18:36,000 --> 00:18:38,480
mesh

00:18:37,039 --> 00:18:40,840
we can do that with things like a

00:18:38,480 --> 00:18:44,160
permissive mutual tls policy

00:18:40,840 --> 00:18:45,679
where if both sides are

00:18:44,160 --> 00:18:47,200
are able to do mutual tail loss then

00:18:45,679 --> 00:18:49,760
we'll do mutual tls

00:18:47,200 --> 00:18:50,640
otherwise if there is our legacy

00:18:49,760 --> 00:18:52,160
services

00:18:50,640 --> 00:18:54,480
that are plain text then we'll still

00:18:52,160 --> 00:18:56,960
continue to accept plaintext

00:18:54,480 --> 00:18:58,640
but then there are things you can do to

00:18:56,960 --> 00:19:00,720
slowly roll that

00:18:58,640 --> 00:19:02,559
the plain text services out and phase

00:19:00,720 --> 00:19:04,080
them out and you can do things like

00:19:02,559 --> 00:19:06,000
monitoring and checking are there any

00:19:04,080 --> 00:19:07,840
services communicating over plain text

00:19:06,000 --> 00:19:09,679
and then at some point say all right no

00:19:07,840 --> 00:19:12,320
more plain text everything's going to be

00:19:09,679 --> 00:19:13,440
mutual tls everything will be encrypted

00:19:12,320 --> 00:19:17,360
in the system but that's

00:19:13,440 --> 00:19:20,960
again a slow phase rollout

00:19:17,360 --> 00:19:21,919
let's come back here so that's the walk

00:19:20,960 --> 00:19:24,480
right so we

00:19:21,919 --> 00:19:25,600
we've laid some of the foundational

00:19:24,480 --> 00:19:28,080
pieces

00:19:25,600 --> 00:19:28,880
we've started to roll out the proxies

00:19:28,080 --> 00:19:30,400
now

00:19:28,880 --> 00:19:31,679
we want to we want to start moving we

00:19:30,400 --> 00:19:32,480
want to get this out into the

00:19:31,679 --> 00:19:34,880
organization

00:19:32,480 --> 00:19:36,240
it provides a lot of value to the

00:19:34,880 --> 00:19:38,400
organization

00:19:36,240 --> 00:19:40,320
but we can't leave behind some of our

00:19:38,400 --> 00:19:42,400
existing policies

00:19:40,320 --> 00:19:43,679
we can't leave behind some of our

00:19:42,400 --> 00:19:47,280
existing infrastructure

00:19:43,679 --> 00:19:50,080
like vms and we can't forget that

00:19:47,280 --> 00:19:52,080
out of the box a service proxy might not

00:19:50,080 --> 00:19:54,960
do exactly everything that a particular

00:19:52,080 --> 00:19:55,520
organization needs and then there's

00:19:54,960 --> 00:19:59,600
other things

00:19:55,520 --> 00:20:02,559
right with that we have our regulatory

00:19:59,600 --> 00:20:02,799
reasons to build out multiple clusters

00:20:02,559 --> 00:20:05,679
or

00:20:02,799 --> 00:20:07,280
isolate certain groups from others and

00:20:05,679 --> 00:20:08,240
uh you know doing this in a secure

00:20:07,280 --> 00:20:09,840
fashion

00:20:08,240 --> 00:20:11,440
are all parts of you know now we're

00:20:09,840 --> 00:20:13,280
expanding now we're growing now we're

00:20:11,440 --> 00:20:16,640
bringing the rest of the organization

00:20:13,280 --> 00:20:19,679
into um into this platform

00:20:16,640 --> 00:20:21,360
and doing things like uh deploying

00:20:19,679 --> 00:20:23,120
sidecar proxies into vms

00:20:21,360 --> 00:20:25,919
treating those as first-class citizens

00:20:23,120 --> 00:20:29,120
in the rest of the mesh

00:20:25,919 --> 00:20:30,880
when traffic leads leaves a mesh forcing

00:20:29,120 --> 00:20:32,159
it through a particular egress point

00:20:30,880 --> 00:20:35,039
where you can apply

00:20:32,159 --> 00:20:36,640
policies and uh security extensions and

00:20:35,039 --> 00:20:39,440
and these other things

00:20:36,640 --> 00:20:40,480
and then as i mentioned extensibility in

00:20:39,440 --> 00:20:44,480
the proxy is

00:20:40,480 --> 00:20:45,840
key and uh for envoy based service

00:20:44,480 --> 00:20:47,440
measures like istio you can do

00:20:45,840 --> 00:20:49,039
something uh you can write

00:20:47,440 --> 00:20:50,400
customizations to the proxy using

00:20:49,039 --> 00:20:51,840
webassembly

00:20:50,400 --> 00:20:55,039
that's we're going to take a quick look

00:20:51,840 --> 00:20:55,039
at here so if we come

00:20:55,760 --> 00:20:58,320
if we do

00:21:00,960 --> 00:21:05,280
what we're going to do here is we're

00:21:02,080 --> 00:21:08,400
going to augment or enhance

00:21:05,280 --> 00:21:09,520
the data planes in a particular request

00:21:08,400 --> 00:21:12,400
flow

00:21:09,520 --> 00:21:14,320
with webassembly we've written a

00:21:12,400 --> 00:21:16,799
webassembly module

00:21:14,320 --> 00:21:17,919
that basically it enhances the headers

00:21:16,799 --> 00:21:20,720
in a response

00:21:17,919 --> 00:21:22,960
to a particular service so if i call a

00:21:20,720 --> 00:21:23,840
service in our cluster from sleep to

00:21:22,960 --> 00:21:27,280
let's say the review

00:21:23,840 --> 00:21:29,440
service review service gives us some

00:21:27,280 --> 00:21:30,320
json response we can see the response

00:21:29,440 --> 00:21:31,760
headers

00:21:30,320 --> 00:21:34,159
look like this what we want to do let's

00:21:31,760 --> 00:21:37,520
say some team expects

00:21:34,159 --> 00:21:38,080
a hello world header that needs to be

00:21:37,520 --> 00:21:39,360
returned

00:21:38,080 --> 00:21:41,280
in the response let's take a look at

00:21:39,360 --> 00:21:42,080
what that would be or how we would do

00:21:41,280 --> 00:21:44,400
that so

00:21:42,080 --> 00:21:45,520
with webassembly we can do that by

00:21:44,400 --> 00:21:47,679
packaging up by

00:21:45,520 --> 00:21:49,440
so we can write the extension in

00:21:47,679 --> 00:21:51,600
whatever language we want

00:21:49,440 --> 00:21:52,480
package that up into a webassembly

00:21:51,600 --> 00:21:56,080
module

00:21:52,480 --> 00:21:58,400
deploy that into some oci registry

00:21:56,080 --> 00:21:59,679
and share it with everyone and then you

00:21:58,400 --> 00:22:00,320
need a way of pulling it down and

00:21:59,679 --> 00:22:03,039
installing it

00:22:00,320 --> 00:22:03,760
into your service mesh here's one

00:22:03,039 --> 00:22:07,120
example

00:22:03,760 --> 00:22:09,919
where we've already tagged a existing

00:22:07,120 --> 00:22:12,240
webassembly extension and now what we're

00:22:09,919 --> 00:22:15,039
going to do is we're going to

00:22:12,240 --> 00:22:16,159
install it into a particular workload in

00:22:15,039 --> 00:22:19,520
this case

00:22:16,159 --> 00:22:20,720
it's we're going to select the cluster

00:22:19,520 --> 00:22:22,880
and the workload

00:22:20,720 --> 00:22:24,559
where the the data plane might be

00:22:22,880 --> 00:22:27,840
running and we're going to install

00:22:24,559 --> 00:22:28,559
our um webassembly module into that so

00:22:27,840 --> 00:22:30,080
let's

00:22:28,559 --> 00:22:31,600
cross our fingers and hopefully i set

00:22:30,080 --> 00:22:34,080
this part of the demo correctly

00:22:31,600 --> 00:22:36,480
now i don't remember all right so we did

00:22:34,080 --> 00:22:38,240
that now let's check the status of this

00:22:36,480 --> 00:22:40,559
descriptor

00:22:38,240 --> 00:22:41,919
uh all right i think it looks okay if we

00:22:40,559 --> 00:22:43,360
look at the status we can see that it

00:22:41,919 --> 00:22:46,320
has been deployed

00:22:43,360 --> 00:22:47,679
so now if we try to call that same

00:22:46,320 --> 00:22:50,799
service again

00:22:47,679 --> 00:22:54,080
and show the headers we should see

00:22:50,799 --> 00:22:56,559
that indeed the um

00:22:54,080 --> 00:22:58,159
the response has been enriched with this

00:22:56,559 --> 00:23:00,480
new capability and

00:22:58,159 --> 00:23:01,600
so using webassembly to modify the

00:23:00,480 --> 00:23:03,840
request path or

00:23:01,600 --> 00:23:04,720
modify the message the messages in the

00:23:03,840 --> 00:23:06,480
request

00:23:04,720 --> 00:23:08,880
or do things like implement backwards

00:23:06,480 --> 00:23:10,960
compatible security protocols and so on

00:23:08,880 --> 00:23:12,480
that your organization might have is

00:23:10,960 --> 00:23:14,720
extremely powerful

00:23:12,480 --> 00:23:16,080
and allows you to continue to scale out

00:23:14,720 --> 00:23:17,919
and and roll the mesh

00:23:16,080 --> 00:23:19,919
out to various parts of your

00:23:17,919 --> 00:23:24,080
organization

00:23:19,919 --> 00:23:26,640
the last part now we're running

00:23:24,080 --> 00:23:27,919
but the last part is now you have this

00:23:26,640 --> 00:23:29,600
mesh

00:23:27,919 --> 00:23:32,240
now it's you know you're bringing in the

00:23:29,600 --> 00:23:32,880
vms you've got your security policies in

00:23:32,240 --> 00:23:34,799
place

00:23:32,880 --> 00:23:36,640
traffic is you know leaving the mesh

00:23:34,799 --> 00:23:37,760
through egress gateway's correct

00:23:36,640 --> 00:23:39,600
everything looks good

00:23:37,760 --> 00:23:41,039
now what can you what can you do what

00:23:39,600 --> 00:23:43,679
does that give you

00:23:41,039 --> 00:23:44,159
that gives you a tremendous amount of uh

00:23:43,679 --> 00:23:46,720
power

00:23:44,159 --> 00:23:48,799
in your application network so how

00:23:46,720 --> 00:23:51,039
services communicate with each other

00:23:48,799 --> 00:23:52,000
is not tied now to some centralized api

00:23:51,039 --> 00:23:53,440
management system everything is

00:23:52,000 --> 00:23:56,000
decentralized

00:23:53,440 --> 00:23:56,960
it's not tied to big expensive hardware

00:23:56,000 --> 00:24:00,000
load balancers

00:23:56,960 --> 00:24:01,520
and difficult to change dns and and tied

00:24:00,000 --> 00:24:03,200
to ip addresses and so on

00:24:01,520 --> 00:24:05,600
when services communicate with each

00:24:03,200 --> 00:24:06,720
other they can communicate with a global

00:24:05,600 --> 00:24:09,679
name

00:24:06,720 --> 00:24:10,960
and across clusters of across vms across

00:24:09,679 --> 00:24:12,400
clouds

00:24:10,960 --> 00:24:14,000
the mesh is smart enough to say all

00:24:12,400 --> 00:24:15,279
right when service a is talking to

00:24:14,000 --> 00:24:18,480
surface b

00:24:15,279 --> 00:24:20,080
prefer surface b locally or you know

00:24:18,480 --> 00:24:21,919
service be a little overloaded so fail

00:24:20,080 --> 00:24:24,240
over to the next available

00:24:21,919 --> 00:24:25,440
uh zone or fail over to a different

00:24:24,240 --> 00:24:26,960
region

00:24:25,440 --> 00:24:28,640
without the client having to know

00:24:26,960 --> 00:24:31,360
anything about this

00:24:28,640 --> 00:24:33,600
all right so now with con with federated

00:24:31,360 --> 00:24:36,320
with by treating this estate

00:24:33,600 --> 00:24:37,679
of uh of different service meshes as a

00:24:36,320 --> 00:24:39,919
federated unit

00:24:37,679 --> 00:24:41,760
you can get extremely powerful

00:24:39,919 --> 00:24:43,919
networking and routing

00:24:41,760 --> 00:24:45,760
and then start to build things on top of

00:24:43,919 --> 00:24:46,320
that and of course you want to expose

00:24:45,760 --> 00:24:48,320
this and

00:24:46,320 --> 00:24:49,919
allow all of your teams to leverage this

00:24:48,320 --> 00:24:51,360
capability

00:24:49,919 --> 00:24:52,960
and so doing that in a way that's

00:24:51,360 --> 00:24:55,120
isolated and secure for

00:24:52,960 --> 00:24:56,000
various tenants in your in your

00:24:55,120 --> 00:24:59,440
organization

00:24:56,000 --> 00:25:00,720
is extremely powerful so the use case

00:24:59,440 --> 00:25:02,960
that i'm describing is you make

00:25:00,720 --> 00:25:04,400
multiple clusters multiple different

00:25:02,960 --> 00:25:07,679
types of infrastructure

00:25:04,400 --> 00:25:09,679
but your services they're simple you

00:25:07,679 --> 00:25:10,799
focus on the business application or the

00:25:09,679 --> 00:25:12,159
business budget

00:25:10,799 --> 00:25:14,799
what happens when you make a call on the

00:25:12,159 --> 00:25:16,720
network service discovery is happening

00:25:14,799 --> 00:25:18,480
client-side load balancing is happening

00:25:16,720 --> 00:25:19,600
global service discovery failover is

00:25:18,480 --> 00:25:21,840
happening

00:25:19,600 --> 00:25:24,159
and you also get the timeouts retry

00:25:21,840 --> 00:25:27,200
circuit breaking all the stuff that

00:25:24,159 --> 00:25:28,720
that you know augments and enhances an

00:25:27,200 --> 00:25:31,520
application

00:25:28,720 --> 00:25:33,760
and and makes it a better behaving

00:25:31,520 --> 00:25:35,360
citizen on the network

00:25:33,760 --> 00:25:37,600
and so this is extremely powerful so

00:25:35,360 --> 00:25:37,919
this is what we work with our customers

00:25:37,600 --> 00:25:40,000
at

00:25:37,919 --> 00:25:41,440
uh here's an example of what a

00:25:40,000 --> 00:25:42,080
deployment might look like to enable

00:25:41,440 --> 00:25:44,880
that

00:25:42,080 --> 00:25:45,600
or you have multiple clusters maybe vms

00:25:44,880 --> 00:25:47,360
and

00:25:45,600 --> 00:25:49,200
and you're getting consistent

00:25:47,360 --> 00:25:50,240
configuration consistent security

00:25:49,200 --> 00:25:52,159
policies

00:25:50,240 --> 00:25:53,600
consistent service discovery and global

00:25:52,159 --> 00:25:56,799
load balancing

00:25:53,600 --> 00:25:58,320
provided by by this this federation and

00:25:56,799 --> 00:26:00,559
so this journey

00:25:58,320 --> 00:26:02,000
that i just described is exactly what we

00:26:00,559 --> 00:26:04,559
work with our

00:26:02,000 --> 00:26:06,799
customers our open source users here at

00:26:04,559 --> 00:26:09,760
solo.i o

00:26:06,799 --> 00:26:11,360
and and so what i've just described

00:26:09,760 --> 00:26:14,960
comes from experience

00:26:11,360 --> 00:26:15,200
some pain as well and uh you know this

00:26:14,960 --> 00:26:18,080
is

00:26:15,200 --> 00:26:20,000
uh this is stuff that people are

00:26:18,080 --> 00:26:22,559
starting to

00:26:20,000 --> 00:26:23,360
learn themselves and we're seeing more

00:26:22,559 --> 00:26:26,799
and more

00:26:23,360 --> 00:26:29,919
successful deployments of service mesh

00:26:26,799 --> 00:26:30,559
at very large scales uh hundreds if not

00:26:29,919 --> 00:26:34,000
thousands

00:26:30,559 --> 00:26:36,000
of clusters and control planes

00:26:34,000 --> 00:26:37,039
so that's all i have thanks for joining

00:26:36,000 --> 00:26:40,240
my session

00:26:37,039 --> 00:26:42,320
come chat with us um go to the

00:26:40,240 --> 00:26:43,600
solo slack is a great place a lot of

00:26:42,320 --> 00:26:47,039
resources about

00:26:43,600 --> 00:26:48,559
envoy and istio and some of the open

00:26:47,039 --> 00:26:49,760
source projects that we're building

00:26:48,559 --> 00:26:52,799
and the tooling that we're building on

00:26:49,760 --> 00:26:55,919
top of these things to simplify

00:26:52,799 --> 00:26:57,760
the usage and the operation

00:26:55,919 --> 00:26:59,039
of this type of technology and help you

00:26:57,760 --> 00:27:00,880
be successful

00:26:59,039 --> 00:27:02,960
so i appreciate again you're watching my

00:27:00,880 --> 00:27:05,600
talk there's a lot of other

00:27:02,960 --> 00:27:09,039
good talks so go ahead and see them and

00:27:05,600 --> 00:27:09,039

YouTube URL: https://www.youtube.com/watch?v=9cuSXAX5sUM


