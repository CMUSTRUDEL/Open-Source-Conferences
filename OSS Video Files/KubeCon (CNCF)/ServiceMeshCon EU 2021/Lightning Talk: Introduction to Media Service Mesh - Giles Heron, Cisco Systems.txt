Title: Lightning Talk: Introduction to Media Service Mesh - Giles Heron, Cisco Systems
Publication date: 2021-05-05
Playlist: ServiceMeshCon EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Introduction to Media Service Mesh - Giles Heron, Cisco Systems

Media Service Mesh is a new concept for enabling real-time applications in Kubernetes. Most real-time applications (such as multi-player FPS games, multi-party video-conferencing, and CCTV streaming) use UDP rather than TCP and hence are incompatible with current web-proxy based service meshes. In addition they often use out of band TCP control channel to negotiate UDP port numbers, and this is incompatible with the kube-proxy ClusterIP NAT. There is, however, a desire from the developers of these platforms to move away from monolithic applications towards the micro-services architecture, and to be able to leverage a service mesh infrastructure providing load balancing, encryption and observability. Media Service Mesh enables this.
Captions: 
	00:00:00,080 --> 00:00:03,840
well good afternoon and welcome to the

00:00:01,839 --> 00:00:05,759
first lightning talk of the day

00:00:03,840 --> 00:00:07,279
my name is giles heron i'm a principal

00:00:05,759 --> 00:00:08,320
engineer at cisco systems

00:00:07,279 --> 00:00:11,679
and today i'll be giving you an

00:00:08,320 --> 00:00:13,759
introduction to media service mesh

00:00:11,679 --> 00:00:15,200
so before i describe media service mesh

00:00:13,759 --> 00:00:17,119
i think it's worth discussing why we

00:00:15,200 --> 00:00:18,080
might need such a thing

00:00:17,119 --> 00:00:20,320
and i'm going to start with an

00:00:18,080 --> 00:00:22,320
application taxonomy

00:00:20,320 --> 00:00:23,760
so a friend of mine who did an mba

00:00:22,320 --> 00:00:25,760
assures me that any problem can be

00:00:23,760 --> 00:00:28,400
reduced to a 2x2 matrix

00:00:25,760 --> 00:00:30,080
so here we have a 2x2 matrix describing

00:00:28,400 --> 00:00:31,920
networks applications

00:00:30,080 --> 00:00:33,280
so in one access you have whether an app

00:00:31,920 --> 00:00:35,520
is non real time

00:00:33,280 --> 00:00:37,520
or real time and the other access you

00:00:35,520 --> 00:00:40,079
have whether it is interactive so

00:00:37,520 --> 00:00:41,840
typically request response semantics or

00:00:40,079 --> 00:00:43,600
streaming so typically publish describe

00:00:41,840 --> 00:00:45,360
semantics

00:00:43,600 --> 00:00:46,879
so i think it's fair to say that service

00:00:45,360 --> 00:00:47,920
meshes today really focus on web

00:00:46,879 --> 00:00:49,360
applications

00:00:47,920 --> 00:00:51,680
and those apps are in this top left

00:00:49,360 --> 00:00:52,960
corner here now you could use a service

00:00:51,680 --> 00:00:54,160
mesh to interconnect the node to a

00:00:52,960 --> 00:00:55,600
message bus

00:00:54,160 --> 00:00:57,199
but you'd probably just be transporting

00:00:55,600 --> 00:00:58,960
that traffic as tcp so you'd be

00:00:57,199 --> 00:01:01,120
transporting the message bus

00:00:58,960 --> 00:01:02,800
rather than being the message bus the

00:01:01,120 --> 00:01:04,879
way you might struggle with service mesh

00:01:02,800 --> 00:01:06,479
today is on the right hand side

00:01:04,879 --> 00:01:08,240
so real time applications and that's

00:01:06,479 --> 00:01:08,960
going to be our focus for media service

00:01:08,240 --> 00:01:10,720
mesh

00:01:08,960 --> 00:01:12,080
those apps could be interactive such as

00:01:10,720 --> 00:01:13,840
online games

00:01:12,080 --> 00:01:16,400
or they could be streaming apps such as

00:01:13,840 --> 00:01:18,479
closed circuit tv

00:01:16,400 --> 00:01:20,240
now i called this a fuzzy application

00:01:18,479 --> 00:01:21,920
tax on me why did i say fuzzy well i

00:01:20,240 --> 00:01:22,720
would contend that these dividing lines

00:01:21,920 --> 00:01:24,799
between

00:01:22,720 --> 00:01:26,080
non-real time in real time and between

00:01:24,799 --> 00:01:27,439
interactive and streaming are actually

00:01:26,080 --> 00:01:29,439
quite fuzzy

00:01:27,439 --> 00:01:30,479
so in terms of real time i might be

00:01:29,439 --> 00:01:32,560
watching football

00:01:30,479 --> 00:01:34,479
on a streaming platform it's live

00:01:32,560 --> 00:01:36,880
football but it's not quite real time

00:01:34,479 --> 00:01:38,320
because it's using http streaming and so

00:01:36,880 --> 00:01:38,960
if for example a friend of mine is

00:01:38,320 --> 00:01:41,280
watching on

00:01:38,960 --> 00:01:43,119
cable and my team scores a girl he might

00:01:41,280 --> 00:01:44,399
text me to say wow great girl

00:01:43,119 --> 00:01:46,079
and i'm going to be annoyed because i

00:01:44,399 --> 00:01:47,280
haven't seen the goal yet though maybe

00:01:46,079 --> 00:01:48,479
not as annoyed as i would be if the

00:01:47,280 --> 00:01:50,640
other team scored

00:01:48,479 --> 00:01:52,000
however even that supposedly real-time

00:01:50,640 --> 00:01:54,640
feed he's watching

00:01:52,000 --> 00:01:56,240
isn't quite real time so those of you

00:01:54,640 --> 00:01:57,520
who like me are old enough to remember

00:01:56,240 --> 00:01:59,119
analog tv

00:01:57,520 --> 00:02:00,719
will remember when the news would come

00:01:59,119 --> 00:02:02,640
on and just before the news you might

00:02:00,719 --> 00:02:04,560
see a clock counting up the seconds as

00:02:02,640 --> 00:02:06,560
it came up towards the hour

00:02:04,560 --> 00:02:08,000
we don't have that anymore because the

00:02:06,560 --> 00:02:10,479
time taken to decrypt these

00:02:08,000 --> 00:02:12,319
mpeg digital streams is slightly

00:02:10,479 --> 00:02:13,520
non-deterministic so they they gave that

00:02:12,319 --> 00:02:15,680
up

00:02:13,520 --> 00:02:17,599
however if you're working in the tv

00:02:15,680 --> 00:02:18,400
studio that's producing that football

00:02:17,599 --> 00:02:20,160
stream

00:02:18,400 --> 00:02:22,480
you're going to want it to be real time

00:02:20,160 --> 00:02:23,920
so you might have a live camera feed

00:02:22,480 --> 00:02:25,280
coming in from the stadium

00:02:23,920 --> 00:02:27,360
you'd be adding on at the top of the

00:02:25,280 --> 00:02:28,160
screen something to say you know here's

00:02:27,360 --> 00:02:29,520
the score

00:02:28,160 --> 00:02:31,519
at the bottom you might have a strip

00:02:29,520 --> 00:02:32,800
that's showing news flashes or showing

00:02:31,519 --> 00:02:34,640
schools from other games

00:02:32,800 --> 00:02:36,000
all that's going to be put together live

00:02:34,640 --> 00:02:38,080
in real time before

00:02:36,000 --> 00:02:39,360
it's sent out and those streams are

00:02:38,080 --> 00:02:41,680
typically uncompressed

00:02:39,360 --> 00:02:43,200
multi-gigabit streams so this is very

00:02:41,680 --> 00:02:45,680
different from the web applications you

00:02:43,200 --> 00:02:47,120
have today

00:02:45,680 --> 00:02:49,120
in the other dimension of course it's

00:02:47,120 --> 00:02:51,519
also fuzzy so

00:02:49,120 --> 00:02:52,560
what would you call a multi-party video

00:02:51,519 --> 00:02:54,640
conference

00:02:52,560 --> 00:02:55,680
would you say it's interactive or would

00:02:54,640 --> 00:02:57,280
you say it's just a set of

00:02:55,680 --> 00:02:58,800
unidirectional streams

00:02:57,280 --> 00:03:01,120
i suspect truth lies somewhere in the

00:02:58,800 --> 00:03:01,120
middle

00:03:01,920 --> 00:03:05,280
so there are three goals that i would

00:03:03,280 --> 00:03:06,640
identify for media service mesh

00:03:05,280 --> 00:03:08,319
the first is simply to extend the

00:03:06,640 --> 00:03:08,959
benefits of service mesh to real-time

00:03:08,319 --> 00:03:10,560
apps

00:03:08,959 --> 00:03:12,400
so those benefits are going to be things

00:03:10,560 --> 00:03:13,680
like you know very flexible load

00:03:12,400 --> 00:03:16,159
balancing

00:03:13,680 --> 00:03:19,200
support for canary deployments the

00:03:16,159 --> 00:03:20,879
ability to export metrics and statistics

00:03:19,200 --> 00:03:22,640
the ability to do authentication and

00:03:20,879 --> 00:03:24,080
encryption from pods apart

00:03:22,640 --> 00:03:26,239
now all of those things are things we'd

00:03:24,080 --> 00:03:29,840
like to hand off to the service mesh

00:03:26,239 --> 00:03:29,840
rather than handling our application

00:03:30,239 --> 00:03:33,599
we also want support for interactive and

00:03:32,159 --> 00:03:34,720
streaming applications

00:03:33,599 --> 00:03:37,200
and those have slightly different

00:03:34,720 --> 00:03:38,720
challenges so interactive applications

00:03:37,200 --> 00:03:40,799
such as games

00:03:38,720 --> 00:03:43,040
you very often see developers rolling

00:03:40,799 --> 00:03:44,640
their own protocols on top of udp

00:03:43,040 --> 00:03:46,480
the challenge there is that udp itself

00:03:44,640 --> 00:03:47,840
is connectionless it's just datagrams

00:03:46,480 --> 00:03:48,959
there's no connection there's no

00:03:47,840 --> 00:03:50,879
sequence numbers

00:03:48,959 --> 00:03:53,920
so it's very hard to track connections

00:03:50,879 --> 00:03:56,080
to detect packet loss etc

00:03:53,920 --> 00:03:57,040
what you do see however is some de facto

00:03:56,080 --> 00:04:00,319
standards

00:03:57,040 --> 00:04:02,720
for games so as an example i got this

00:04:00,319 --> 00:04:05,599
from the improbable. website so

00:04:02,720 --> 00:04:07,519
in their spatial os protocol stack they

00:04:05,599 --> 00:04:09,280
have two different udp-based options

00:04:07,519 --> 00:04:11,360
there's kcp and racknet

00:04:09,280 --> 00:04:12,640
they also in fact support tcp and they

00:04:11,360 --> 00:04:14,080
have graphs on their website

00:04:12,640 --> 00:04:16,400
showing how much better the performance

00:04:14,080 --> 00:04:18,400
these udp options is than tcp

00:04:16,400 --> 00:04:19,680
but then in fact kcp is slightly better

00:04:18,400 --> 00:04:21,759
than ratnet

00:04:19,680 --> 00:04:23,440
now kcp is a newer protocol in fact when

00:04:21,759 --> 00:04:24,960
you look at it it feels like a really

00:04:23,440 --> 00:04:26,479
good match for service mesh and that you

00:04:24,960 --> 00:04:29,120
have these three layers of

00:04:26,479 --> 00:04:30,240
reliable transport erasure coding and

00:04:29,120 --> 00:04:31,440
encryption

00:04:30,240 --> 00:04:33,280
these are all things you'd really want

00:04:31,440 --> 00:04:34,479
to hand off to your service mesh

00:04:33,280 --> 00:04:36,960
rather than handling them in your

00:04:34,479 --> 00:04:38,479
application

00:04:36,960 --> 00:04:40,560
on the streaming side most people use

00:04:38,479 --> 00:04:42,240
rtp so at least there's a standard there

00:04:40,560 --> 00:04:44,240
for layer above udp

00:04:42,240 --> 00:04:46,560
so here we have the webrtc protocol

00:04:44,240 --> 00:04:48,560
stack and you can see rtp when in fact

00:04:46,560 --> 00:04:50,720
srtp so secure rtp

00:04:48,560 --> 00:04:52,639
is a key part of that on the left hand

00:04:50,720 --> 00:04:53,759
side you see all of the standard web

00:04:52,639 --> 00:04:55,600
stuff so

00:04:53,759 --> 00:04:57,360
these three layers very much mapping to

00:04:55,600 --> 00:04:59,840
the three layers of routing and istio so

00:04:57,360 --> 00:05:01,680
tcp tls and http

00:04:59,840 --> 00:05:03,600
but this whole right hand side is things

00:05:01,680 --> 00:05:04,400
that can't be done today with a service

00:05:03,600 --> 00:05:06,320
mesh

00:05:04,400 --> 00:05:09,759
running on top of udp and so

00:05:06,320 --> 00:05:13,120
particularly rtp based traffic

00:05:09,759 --> 00:05:14,960
now rtp in fact generally is run in

00:05:13,120 --> 00:05:17,840
conjunction with another protocol called

00:05:14,960 --> 00:05:18,960
rtcp that provides metadata feedback for

00:05:17,840 --> 00:05:22,000
rtp

00:05:18,960 --> 00:05:23,759
rtp will run on an even port number rtcp

00:05:22,000 --> 00:05:26,960
will run on the next highest port number

00:05:23,759 --> 00:05:28,880
so it might be port 8000 and port 8001

00:05:26,960 --> 00:05:30,400
however those ports are very often

00:05:28,880 --> 00:05:32,240
dynamic and so what we'll see is that

00:05:30,400 --> 00:05:33,280
rtp will run in conjunction with another

00:05:32,240 --> 00:05:36,240
protocol

00:05:33,280 --> 00:05:37,840
that might be sip or it might be rtsp

00:05:36,240 --> 00:05:39,039
that protocol will typically run over

00:05:37,840 --> 00:05:41,280
tcp

00:05:39,039 --> 00:05:42,960
it will hand out those udp port numbers

00:05:41,280 --> 00:05:45,680
used for rtp

00:05:42,960 --> 00:05:48,479
and it will also use uris or urls which

00:05:45,680 --> 00:05:51,360
again if we have a layer 7 proxy

00:05:48,479 --> 00:05:52,639
we can now start to have routing rules

00:05:51,360 --> 00:05:54,720
for that traffic

00:05:52,639 --> 00:05:56,319
so we can be rooting it in a more

00:05:54,720 --> 00:05:57,520
fine-grained manner while at the same

00:05:56,319 --> 00:06:00,080
time

00:05:57,520 --> 00:06:00,720
watching those allocations of rtp rtcp

00:06:00,080 --> 00:06:02,319
ports

00:06:00,720 --> 00:06:04,560
and then wiring those into our data

00:06:02,319 --> 00:06:06,240
plane proxies in the sit world people

00:06:04,560 --> 00:06:07,840
talk about pinholes a lot so having

00:06:06,240 --> 00:06:08,479
these individual forwarding rules for

00:06:07,840 --> 00:06:10,479
the rtp

00:06:08,479 --> 00:06:12,319
traffic to get it through a firewall or

00:06:10,479 --> 00:06:13,840
whatever

00:06:12,319 --> 00:06:15,440
now the other thing on the streaming

00:06:13,840 --> 00:06:16,479
side is very often i mentioned earlier

00:06:15,440 --> 00:06:18,080
that we have

00:06:16,479 --> 00:06:20,160
published subscribe semantics so very

00:06:18,080 --> 00:06:22,319
often what you'll see is one stream

00:06:20,160 --> 00:06:23,520
and then multiple clients consuming that

00:06:22,319 --> 00:06:25,440
stream

00:06:23,520 --> 00:06:26,960
and so again what we'd really like is

00:06:25,440 --> 00:06:27,759
for our media service mesh to handle

00:06:26,960 --> 00:06:30,479
that fan out

00:06:27,759 --> 00:06:31,280
so that the video server for example so

00:06:30,479 --> 00:06:34,160
taking

00:06:31,280 --> 00:06:35,600
an rtsp camera as an example it can send

00:06:34,160 --> 00:06:37,440
one video feed

00:06:35,600 --> 00:06:40,160
then the proxy can explode that out to

00:06:37,440 --> 00:06:42,720
multiple clients

00:06:40,160 --> 00:06:44,720
finally we want support three classes of

00:06:42,720 --> 00:06:46,639
applications so we want to support

00:06:44,720 --> 00:06:48,880
applications that run in one cluster

00:06:46,639 --> 00:06:50,479
apps that run across multiple clusters

00:06:48,880 --> 00:06:52,240
but of course we also want to support

00:06:50,479 --> 00:06:53,120
internet apps that run from outside the

00:06:52,240 --> 00:06:54,880
cluster

00:06:53,120 --> 00:06:56,319
so your client might be somebody at home

00:06:54,880 --> 00:06:58,400
whether they're playing a game or

00:06:56,319 --> 00:07:00,080
whether they're on a video conference

00:06:58,400 --> 00:07:02,639
and you want to tie them into a resource

00:07:00,080 --> 00:07:04,080
that runs in the cluster

00:07:02,639 --> 00:07:05,919
i wanted to give a works example of

00:07:04,080 --> 00:07:08,000
media service meshing operation

00:07:05,919 --> 00:07:09,840
the example here is a cctv camera using

00:07:08,000 --> 00:07:11,440
rtsp proxies

00:07:09,840 --> 00:07:12,800
i don't have time to show a demo of that

00:07:11,440 --> 00:07:14,000
today but there'll be a link to that on

00:07:12,800 --> 00:07:15,680
the next slide

00:07:14,000 --> 00:07:17,680
so the first thing that a client does

00:07:15,680 --> 00:07:19,120
when it talks to an rtsp server

00:07:17,680 --> 00:07:20,880
is it asks the server what options it

00:07:19,120 --> 00:07:22,639
supports and we'll satisfy that locally

00:07:20,880 --> 00:07:24,639
from the proxy in this case

00:07:22,639 --> 00:07:25,759
more importantly the next message asks

00:07:24,639 --> 00:07:28,400
the service to describe

00:07:25,759 --> 00:07:30,080
the piece of media now in this case the

00:07:28,400 --> 00:07:32,800
proxy doesn't even know where that media

00:07:30,080 --> 00:07:34,160
is far less what it comprises so it will

00:07:32,800 --> 00:07:35,120
first have to find it where it is and it

00:07:34,160 --> 00:07:37,199
will use

00:07:35,120 --> 00:07:38,160
the kubernetes control plane and dns to

00:07:37,199 --> 00:07:40,000
do that

00:07:38,160 --> 00:07:42,560
and now it will know that it can send

00:07:40,000 --> 00:07:44,479
towards this endpoint address here

00:07:42,560 --> 00:07:45,840
and so we'll go to the remote proxy

00:07:44,479 --> 00:07:47,680
through to the camera

00:07:45,840 --> 00:07:49,280
and that will flow back and now the

00:07:47,680 --> 00:07:51,199
describe message will have all the

00:07:49,280 --> 00:07:52,879
streams within that media

00:07:51,199 --> 00:07:54,160
and so now the client will send a setup

00:07:52,879 --> 00:07:55,759
for each of those streams with a

00:07:54,160 --> 00:07:57,280
separate stream id

00:07:55,759 --> 00:07:58,800
and what you can see is it's put its own

00:07:57,280 --> 00:08:00,720
ports on there this is because it's

00:07:58,800 --> 00:08:02,400
running over rtp in this case

00:08:00,720 --> 00:08:05,039
so there'll be a port for rtp and a port

00:08:02,400 --> 00:08:07,360
for rtcp if it were to run over tcp

00:08:05,039 --> 00:08:10,560
there'd be no need for port numbers

00:08:07,360 --> 00:08:12,000
this example is all rtp based but tcp

00:08:10,560 --> 00:08:14,720
can in fact be useful when we have

00:08:12,000 --> 00:08:16,400
clients connecting him from home etc

00:08:14,720 --> 00:08:19,120
that all works on the same proxy and a

00:08:16,400 --> 00:08:21,680
proxy can mix and match between the two

00:08:19,120 --> 00:08:22,879
but in this case with rtp what we then

00:08:21,680 --> 00:08:25,680
see is the

00:08:22,879 --> 00:08:27,360
camera's response and now it has its own

00:08:25,680 --> 00:08:28,479
port numbers as well as the client port

00:08:27,360 --> 00:08:29,599
numbers

00:08:28,479 --> 00:08:31,680
one thing you need to remember here

00:08:29,599 --> 00:08:33,279
though is that in kubernetes there's a

00:08:31,680 --> 00:08:35,200
lot of address translation going on so

00:08:33,279 --> 00:08:36,800
those port numbers have been changed

00:08:35,200 --> 00:08:38,719
now the nice thing here is that we can

00:08:36,800 --> 00:08:41,360
modify what we send

00:08:38,719 --> 00:08:42,880
and we can also program mappings as

00:08:41,360 --> 00:08:45,839
those pinholes in the rtp

00:08:42,880 --> 00:08:46,800
proxy now that rtp proxy could be as in

00:08:45,839 --> 00:08:48,959
my demo

00:08:46,800 --> 00:08:50,080
the same piece of code as the rtsp proxy

00:08:48,959 --> 00:08:51,839
or it could be separate

00:08:50,080 --> 00:08:53,839
as shown here and that that's not really

00:08:51,839 --> 00:08:55,600
important but the key thing is that

00:08:53,839 --> 00:08:57,519
those pin holes are set up

00:08:55,600 --> 00:08:59,200
so finally the client can issue a play

00:08:57,519 --> 00:09:00,640
command that play command will flow

00:08:59,200 --> 00:09:02,080
through to the camera

00:09:00,640 --> 00:09:04,880
and then the camera will start sending

00:09:02,080 --> 00:09:04,880
the media stream

00:09:05,440 --> 00:09:10,080
now when another client connects in fact

00:09:08,720 --> 00:09:11,839
we don't need to connect all the way to

00:09:10,080 --> 00:09:13,600
the campus live stream that the camera's

00:09:11,839 --> 00:09:15,360
already streaming through the proxy

00:09:13,600 --> 00:09:17,839
so now we'll just communicate with the

00:09:15,360 --> 00:09:19,440
proxies we'll set up the pin holes

00:09:17,839 --> 00:09:23,839
and finally the media will get played

00:09:19,440 --> 00:09:23,839
out from the proxies

00:09:24,480 --> 00:09:27,920
i wanted to finish with a call to action

00:09:26,320 --> 00:09:29,519
so my email address is there and please

00:09:27,920 --> 00:09:30,399
do send me feedback whether good bad or

00:09:29,519 --> 00:09:32,080
indifferent

00:09:30,399 --> 00:09:34,080
there's also a link to a blog post i'll

00:09:32,080 --> 00:09:36,160
put a link there through to the

00:09:34,080 --> 00:09:37,120
recording of the demo so you can see

00:09:36,160 --> 00:09:39,120
that

00:09:37,120 --> 00:09:40,560
but really and ultimately my goal for

00:09:39,120 --> 00:09:42,160
all this is for it to become an open

00:09:40,560 --> 00:09:44,240
source project and to have a community

00:09:42,160 --> 00:09:45,920
around it so do please contact me

00:09:44,240 --> 00:09:47,600
and please let's all start building

00:09:45,920 --> 00:09:49,200
media service mesh

00:09:47,600 --> 00:09:51,839
so thank you for your time and do enjoy

00:09:49,200 --> 00:09:51,839

YouTube URL: https://www.youtube.com/watch?v=D7YQtNCaVXI


