Title: Lightning Talk: Use SkyWalking Satellite to Process Tracing, Logging and Metrics in Serv... Ming Wen
Publication date: 2021-05-05
Playlist: ServiceMeshCon EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Use SkyWalking Satellite to Process Tracing, Logging and Metrics in Service Mesh - Ming Wen, api7.ai

Observability has always been a thorny issue in service mesh. Users of the service mesh need multi-dimensional data such as logs, metrics, and tracing to analyze the problems they encounter. In traditional solutions, users need to deploy skywalking, Prometheus, and Elasticsearch to handle these issues respectively. In this topic sharing, Ming Wen will introduce the latest version of Skywalking 8.4 and the sub-project of skywalking satellite. Using these two open source projects will help users use a complete and unified solution to process all observable data under service mesh.
Captions: 
	00:00:00,799 --> 00:00:06,480
hello everyone i'm pleased to be here

00:00:03,760 --> 00:00:07,120
to have the opportunity to sharing and

00:00:06,480 --> 00:00:10,240
the

00:00:07,120 --> 00:00:13,519
serious smash conference europe

00:00:10,240 --> 00:00:16,720
this topic i'm sharing today is use

00:00:13,519 --> 00:00:21,199
skywalking satellite to process tracing

00:00:16,720 --> 00:00:24,640
logging and metrics in search mesh

00:00:21,199 --> 00:00:29,359
let me introduce myself first my name is

00:00:24,640 --> 00:00:32,399
minwoon i'm the co-founder of api 7.ai

00:00:29,359 --> 00:00:34,079
which is an open source software startup

00:00:32,399 --> 00:00:38,800
company in china

00:00:34,079 --> 00:00:41,200
and i'm also the pmc chair of apache ps6

00:00:38,800 --> 00:00:43,520
eps six is the apache software

00:00:41,200 --> 00:00:46,719
foundation's top-level project

00:00:43,520 --> 00:00:49,920
and api 6 is a dynamic

00:00:46,719 --> 00:00:53,280
real-time high performance api gateway

00:00:49,920 --> 00:00:56,160
eps-6 provides traffic management

00:00:53,280 --> 00:00:56,960
features such as the load balancing

00:00:56,160 --> 00:01:00,000
dynamic

00:00:56,960 --> 00:01:00,000
breaking up stream

00:01:00,079 --> 00:01:07,280
other observability and more features

00:01:04,320 --> 00:01:08,159
you can use apply gps 6 to handle

00:01:07,280 --> 00:01:11,360
traditional

00:01:08,159 --> 00:01:14,479
north source traffic as well as the

00:01:11,360 --> 00:01:17,280
east-west traffic between the services

00:01:14,479 --> 00:01:19,680
it can also be used as kubernetes in

00:01:17,280 --> 00:01:22,479
glass controller

00:01:19,680 --> 00:01:23,920
i'm also the committer of apache

00:01:22,479 --> 00:01:26,159
skywalking

00:01:23,920 --> 00:01:30,560
you can reach me through the following

00:01:26,159 --> 00:01:30,560
twitter email and the github channels

00:01:31,280 --> 00:01:35,280
first let's take a look at the summer

00:01:34,320 --> 00:01:38,240
problems

00:01:35,280 --> 00:01:38,799
faced by the service mesh the service

00:01:38,240 --> 00:01:41,439
mesh

00:01:38,799 --> 00:01:42,479
is absolutely a good solution but at the

00:01:41,439 --> 00:01:46,000
same time

00:01:42,479 --> 00:01:48,720
the smash will also bring some problems

00:01:46,000 --> 00:01:50,479
we may have hundreds of thousands of

00:01:48,720 --> 00:01:53,600
services

00:01:50,479 --> 00:01:55,200
and there is a set car next to each

00:01:53,600 --> 00:01:56,960
service

00:01:55,200 --> 00:01:59,680
the calling relationship between

00:01:56,960 --> 00:02:03,119
services is more complicated

00:01:59,680 --> 00:02:04,000
so do know how their services call each

00:02:03,119 --> 00:02:06,880
other

00:02:04,000 --> 00:02:07,680
and how can we see each service have

00:02:06,880 --> 00:02:12,319
problems

00:02:07,680 --> 00:02:15,360
with course this is the first question

00:02:12,319 --> 00:02:16,160
and the second problem is that we hope

00:02:15,360 --> 00:02:19,040
to

00:02:16,160 --> 00:02:20,480
analyze and process this kind of

00:02:19,040 --> 00:02:23,680
observability data

00:02:20,480 --> 00:02:26,400
in the service mesh in the traditional

00:02:23,680 --> 00:02:27,040
solution we need to send the metrics

00:02:26,400 --> 00:02:30,800
data

00:02:27,040 --> 00:02:33,920
to promiscuous and send the tracing data

00:02:30,800 --> 00:02:34,400
to zip king our apache scan working and

00:02:33,920 --> 00:02:37,040
then

00:02:34,400 --> 00:02:38,800
we send the login data to electric

00:02:37,040 --> 00:02:41,680
search

00:02:38,800 --> 00:02:43,040
there will have a lot of differences in

00:02:41,680 --> 00:02:45,519
our system

00:02:43,040 --> 00:02:46,400
in terms of observability we need to

00:02:45,519 --> 00:02:50,319
relay on

00:02:46,400 --> 00:02:54,080
at least three open source components

00:02:50,319 --> 00:02:56,720
claim issues skywalker and the erk

00:02:54,080 --> 00:02:58,239
this is more difficult for system to

00:02:56,720 --> 00:03:01,840
maintain so many

00:02:58,239 --> 00:03:05,360
open source projects for the enterprise

00:03:01,840 --> 00:03:08,319
the cost will be higher so is there

00:03:05,360 --> 00:03:08,640
any way we can make it easy to maintain

00:03:08,319 --> 00:03:12,879
and

00:03:08,640 --> 00:03:12,879
reduce our use cost

00:03:14,480 --> 00:03:17,680
before this introduction let's take a

00:03:16,959 --> 00:03:21,040
look at

00:03:17,680 --> 00:03:21,840
what apache slovakia is apache

00:03:21,040 --> 00:03:26,239
skywalking

00:03:21,840 --> 00:03:28,720
is an apm tools for distributed systems

00:03:26,239 --> 00:03:30,239
api means application performance

00:03:28,720 --> 00:03:33,760
monitor

00:03:30,239 --> 00:03:34,640
slogan is special designed for the micro

00:03:33,760 --> 00:03:37,280
services

00:03:34,640 --> 00:03:40,080
cloud native and the container-based

00:03:37,280 --> 00:03:40,080
architectures

00:03:40,159 --> 00:03:45,519
the 8.4 version of skywalking supports

00:03:43,599 --> 00:03:48,720
three types of data

00:03:45,519 --> 00:03:52,400
including logging metrics and

00:03:48,720 --> 00:03:55,680
tracing so we can process the data

00:03:52,400 --> 00:03:58,640
uniformly through our participating

00:03:55,680 --> 00:03:59,599
let's look at another question how can

00:03:58,640 --> 00:04:05,280
we better

00:03:59,599 --> 00:04:05,280
collect their data on the service side

00:04:06,319 --> 00:04:09,920
then we need to introduce a sub-project

00:04:08,879 --> 00:04:13,519
of skywalker

00:04:09,920 --> 00:04:14,560
the skywalking satellite skull satellite

00:04:13,519 --> 00:04:17,759
is a high weight

00:04:14,560 --> 00:04:18,959
collector it's also cell car that could

00:04:17,759 --> 00:04:22,160
be deployed

00:04:18,959 --> 00:04:26,000
close to the target system to collect

00:04:22,160 --> 00:04:28,720
metrics freezing and logging and it also

00:04:26,000 --> 00:04:29,440
provides more features such as the local

00:04:28,720 --> 00:04:33,199
cache

00:04:29,440 --> 00:04:34,560
format transform saving the following is

00:04:33,199 --> 00:04:37,759
a picture of

00:04:34,560 --> 00:04:41,120
satellite we can see that we can collect

00:04:37,759 --> 00:04:43,600
the log data through satellite the log

00:04:41,120 --> 00:04:46,880
data may come from the

00:04:43,600 --> 00:04:49,919
apps log or you may have

00:04:46,880 --> 00:04:53,199
e-ball invoice ars plug-in

00:04:49,919 --> 00:04:55,280
or linux log yes it can be all kinds of

00:04:53,199 --> 00:04:58,080
logs

00:04:55,280 --> 00:04:59,120
about tracing skywalker has a lot of

00:04:58,080 --> 00:05:02,320
agent

00:04:59,120 --> 00:05:04,080
such as a golan agent lula agent or the

00:05:02,320 --> 00:05:06,960
java agent

00:05:04,080 --> 00:05:08,160
this agent can also send their data to a

00:05:06,960 --> 00:05:11,280
satellite

00:05:08,160 --> 00:05:13,440
the third part is the plume uses data

00:05:11,280 --> 00:05:14,800
we know that columbus uses data is

00:05:13,440 --> 00:05:18,479
provided by

00:05:14,800 --> 00:05:22,800
polling which is request you to expose

00:05:18,479 --> 00:05:26,160
a port to the outside which is not safe

00:05:22,800 --> 00:05:28,639
we can limit the polling behave to the

00:05:26,160 --> 00:05:29,680
local machines through the satellite and

00:05:28,639 --> 00:05:32,160
then satellite

00:05:29,680 --> 00:05:36,000
pushes the perimeter's data to the

00:05:32,160 --> 00:05:39,840
remote sky working inside of poly

00:05:36,000 --> 00:05:43,120
now satellite can use the kafka protocol

00:05:39,840 --> 00:05:45,759
to send data to kafka and

00:05:43,120 --> 00:05:46,880
then we like skywalking act as a

00:05:45,759 --> 00:05:50,840
consumer

00:05:46,880 --> 00:05:53,680
to process the data center from the

00:05:50,840 --> 00:05:57,600
satellite

00:05:53,680 --> 00:06:00,240
okay then we let's take a look and

00:05:57,600 --> 00:06:01,039
why we need uh this project where we

00:06:00,240 --> 00:06:04,960
need this

00:06:01,039 --> 00:06:06,000
uh slogan satellite forms above

00:06:04,960 --> 00:06:09,840
architecture we can

00:06:06,000 --> 00:06:13,120
see that we only use one component

00:06:09,840 --> 00:06:16,960
of the epp site satellite satellite

00:06:13,120 --> 00:06:20,639
is a one-stop epm data collector

00:06:16,960 --> 00:06:24,080
it covering the tracing logging and

00:06:20,639 --> 00:06:26,800
matrix as we mentioned earlier

00:06:24,080 --> 00:06:27,520
it can convert the promiscuous fetch

00:06:26,800 --> 00:06:30,560
model

00:06:27,520 --> 00:06:34,240
to a safer push mode

00:06:30,560 --> 00:06:35,520
because it is local so we can do mould

00:06:34,240 --> 00:06:38,720
data filter

00:06:35,520 --> 00:06:40,560
and cache before we send the data to the

00:06:38,720 --> 00:06:44,560
skeleton

00:06:40,560 --> 00:06:48,400
another advantage of satellite is that

00:06:44,560 --> 00:06:51,199
we learn the service restart

00:06:48,400 --> 00:06:52,400
or the service crash we will not lose

00:06:51,199 --> 00:06:55,520
data because

00:06:52,400 --> 00:06:58,160
all of the data has been saved in the

00:06:55,520 --> 00:06:58,160
satellite

00:06:59,520 --> 00:07:03,039
then let's take a look at another

00:07:02,000 --> 00:07:07,199
example

00:07:03,039 --> 00:07:09,440
of use satellite with the apache api six

00:07:07,199 --> 00:07:10,720
the previous architecture is more

00:07:09,440 --> 00:07:15,120
suitable for

00:07:10,720 --> 00:07:18,560
the deploy the service and the skeleton

00:07:15,120 --> 00:07:22,240
in the same vpc because you send

00:07:18,560 --> 00:07:25,360
all of the data to kafka but

00:07:22,240 --> 00:07:28,479
how to send data from hybrid

00:07:25,360 --> 00:07:29,440
cloud architecture you may use both

00:07:28,479 --> 00:07:33,199
satellite

00:07:29,440 --> 00:07:36,479
and empire gpr6 api 6

00:07:33,199 --> 00:07:38,319
is a infrastructure part of the

00:07:36,479 --> 00:07:41,599
processing critical traffic

00:07:38,319 --> 00:07:44,639
in grass and the epi 6 has

00:07:41,599 --> 00:07:48,240
the scaling plug-in so it can

00:07:44,639 --> 00:07:51,360
replace kafka to receive such as

00:07:48,240 --> 00:07:54,160
uh observability data in other words api

00:07:51,360 --> 00:07:57,680
six and scale working at deployment

00:07:54,160 --> 00:07:58,160
in the public cloud well the service may

00:07:57,680 --> 00:08:01,199
be

00:07:58,160 --> 00:08:03,680
on promise so

00:08:01,199 --> 00:08:06,720
we are sending your data you cannot use

00:08:03,680 --> 00:08:10,560
the kafka protocol but use the gipc

00:08:06,720 --> 00:08:11,759
and mtrs in this way you can send the

00:08:10,560 --> 00:08:14,879
separate

00:08:11,759 --> 00:08:15,840
to apply gpr6 on the public cloud and

00:08:14,879 --> 00:08:19,440
the zoom

00:08:15,840 --> 00:08:21,840
the api 6 is sent to the skelo king

00:08:19,440 --> 00:08:26,000
through the skeleton plugin or vpn 6

00:08:21,840 --> 00:08:28,319
for precision

00:08:26,000 --> 00:08:30,240
satire is a very young open source

00:08:28,319 --> 00:08:33,360
project so it still have

00:08:30,240 --> 00:08:34,719
a lot of to-do features for example we

00:08:33,360 --> 00:08:37,519
want to support

00:08:34,719 --> 00:08:38,560
demon site so that we can save more

00:08:37,519 --> 00:08:41,200
resources

00:08:38,560 --> 00:08:41,919
especially for the deployment model of

00:08:41,200 --> 00:08:44,880
the service

00:08:41,919 --> 00:08:46,080
mesh saving resources is also a critical

00:08:44,880 --> 00:08:48,800
factor

00:08:46,080 --> 00:08:49,519
also we will support more protocols such

00:08:48,800 --> 00:08:52,959
as

00:08:49,519 --> 00:08:54,560
open telemetry envoy ais ais means the

00:08:52,959 --> 00:08:58,160
exact log service

00:08:54,560 --> 00:09:01,680
and apache ps6 crs because the satellite

00:08:58,160 --> 00:09:05,440
is a project deployed on the edge

00:09:01,680 --> 00:09:09,200
side so we can do more works on the edge

00:09:05,440 --> 00:09:09,519
for example we can pre-process the data

00:09:09,200 --> 00:09:12,560
and

00:09:09,519 --> 00:09:15,519
we can compromise the data in this way

00:09:12,560 --> 00:09:16,640
when we send data to the backend

00:09:15,519 --> 00:09:19,839
scouting service

00:09:16,640 --> 00:09:23,440
our data has been filtered so

00:09:19,839 --> 00:09:27,360
that will make it easy and process

00:09:23,440 --> 00:09:29,519
and stop yes

00:09:27,360 --> 00:09:32,080
this is just a brief introduction above

00:09:29,519 --> 00:09:34,480
so if you want to know

00:09:32,080 --> 00:09:35,200
more about the sky walking celebrating

00:09:34,480 --> 00:09:38,000
satellite

00:09:35,200 --> 00:09:40,080
and the java jbl6 project you can learn

00:09:38,000 --> 00:09:43,600
more from the github

00:09:40,080 --> 00:09:43,600

YouTube URL: https://www.youtube.com/watch?v=ovK2PfR4k24


