Title: Keynote: Multi-Cloud and Multi-Cluster with CNCF’s Kuma on Kubernetes and VMs - Marco Palladino
Publication date: 2021-05-05
Playlist: ServiceMeshCon EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Keynote: Multi-Cloud and Multi-Cluster with CNCF’s Kuma on Kubernetes and VMs - Marco Palladino, Co-Founder + CTO, Kong Inc.

Organizations are well on their way to adopting microservice architectures, and as a result applications have grown to become decoupled and distributed - with connections spanning across geographies, clouds, and even workload platforms. Establishing service mesh as a “Day-0” solution for every team and application allows these organizations to deliver, livecycle, and troubleshoot applications faster and at global scale.

In this talk, Marco Palladino, Kuma maintainer and Kong CTO, will introduce you to Kuma, an open-source service mesh built on top of Envoy and a CNCF project focused on delivering simplicity and scalability to every application.

We’ll cover:

    Kuma’s unique feature set designed for enterprise architects. 
    Give you a first look at Kuma’s unique multi zone deployment, including hybrid Kubernetes and VMs.
    Walk you through a short demo to see Kuma in action across multiple clusters and clouds.
Captions: 
	00:00:00,320 --> 00:00:05,440
welcome to servicemeshcon today we're

00:00:03,439 --> 00:00:08,880
going to be seeing how to run kuma

00:00:05,440 --> 00:00:11,759
in a multi-cloud and multi-cluster way

00:00:08,880 --> 00:00:13,519
my name is marco palladino i am the cto

00:00:11,759 --> 00:00:16,240
and co-founder of kong

00:00:13,519 --> 00:00:17,199
but before we look into kuma let's ask

00:00:16,240 --> 00:00:19,840
ourselves

00:00:17,199 --> 00:00:22,080
why service mesh became such a popular

00:00:19,840 --> 00:00:25,680
pattern

00:00:22,080 --> 00:00:28,240
we have learned many years ago that our

00:00:25,680 --> 00:00:30,400
monolithic applications once they grow

00:00:28,240 --> 00:00:31,679
they become very hard to scale very hard

00:00:30,400 --> 00:00:34,880
to deploy

00:00:31,679 --> 00:00:37,680
in a reliable manner they're hard to use

00:00:34,880 --> 00:00:38,480
hard to deploy hard to contribute to

00:00:37,680 --> 00:00:39,840
therefore

00:00:38,480 --> 00:00:42,000
we're going to be decoupling our

00:00:39,840 --> 00:00:44,000
monolithic applications into separate

00:00:42,000 --> 00:00:46,559
services microservices

00:00:44,000 --> 00:00:48,399
now when we do that we get speed we get

00:00:46,559 --> 00:00:50,640
velocity we get agility

00:00:48,399 --> 00:00:51,680
we get a lower time to market because we

00:00:50,640 --> 00:00:53,360
can reuse

00:00:51,680 --> 00:00:55,120
some of these components when we create

00:00:53,360 --> 00:00:56,800
new applications

00:00:55,120 --> 00:00:59,199
but on the other end we're also

00:00:56,800 --> 00:01:02,079
introducing more and more connectivity

00:00:59,199 --> 00:01:04,400
at the backbone of our modern systems

00:01:02,079 --> 00:01:06,720
when connectivity is down

00:01:04,400 --> 00:01:08,240
our applications are done connectivity

00:01:06,720 --> 00:01:10,080
really glues together

00:01:08,240 --> 00:01:11,600
all the services that we're creating and

00:01:10,080 --> 00:01:14,640
the more services we create

00:01:11,600 --> 00:01:16,960
the more connectivity we generate

00:01:14,640 --> 00:01:19,280
our application teams should not be in

00:01:16,960 --> 00:01:20,320
charge of managing that connectivity by

00:01:19,280 --> 00:01:21,840
themselves

00:01:20,320 --> 00:01:24,320
when they do it they do it in a

00:01:21,840 --> 00:01:26,880
fragmented way and it's not their job

00:01:24,320 --> 00:01:28,880
they should be instead getting that

00:01:26,880 --> 00:01:29,200
connectivity from the infrastructure

00:01:28,880 --> 00:01:31,200
that

00:01:29,200 --> 00:01:32,479
we the enterprise architect are

00:01:31,200 --> 00:01:34,720
provisioning them

00:01:32,479 --> 00:01:36,479
across kubernetes and virtual machines

00:01:34,720 --> 00:01:37,680
across multiple clouds and multiple

00:01:36,479 --> 00:01:39,759
clusters

00:01:37,680 --> 00:01:41,520
there is different connectivity types

00:01:39,759 --> 00:01:42,880
that our application teams are going to

00:01:41,520 --> 00:01:44,880
be asking us

00:01:42,880 --> 00:01:46,479
they want connectivity at the edge when

00:01:44,880 --> 00:01:47,439
some of their applications must be

00:01:46,479 --> 00:01:49,439
consumed

00:01:47,439 --> 00:01:51,759
from outside of the organization by an

00:01:49,439 --> 00:01:54,079
ecosystem of partners and developers

00:01:51,759 --> 00:01:55,119
or mobile applications there is going to

00:01:54,079 --> 00:01:58,079
be connectivity

00:01:55,119 --> 00:02:00,000
across our applications when different

00:01:58,079 --> 00:02:03,040
teams are exposing apis

00:02:00,000 --> 00:02:04,399
that another team can consume and then

00:02:03,040 --> 00:02:07,439
there is going to be more and more

00:02:04,399 --> 00:02:09,239
connectivity inside of our applications

00:02:07,439 --> 00:02:10,640
whenever our applications become

00:02:09,239 --> 00:02:12,800
microservice-oriented

00:02:10,640 --> 00:02:14,239
all of the services that make up the

00:02:12,800 --> 00:02:16,720
final applications

00:02:14,239 --> 00:02:18,319
all of those services communicate with

00:02:16,720 --> 00:02:19,280
connections and those connections have

00:02:18,319 --> 00:02:22,400
to be secure

00:02:19,280 --> 00:02:25,040
reliable and observable

00:02:22,400 --> 00:02:26,080
and this is why at kong we originally

00:02:25,040 --> 00:02:28,000
created kuma

00:02:26,080 --> 00:02:29,200
in order to simplify how this

00:02:28,000 --> 00:02:31,680
connectivity can be

00:02:29,200 --> 00:02:32,319
offered by the enterprise architecture

00:02:31,680 --> 00:02:35,280
team

00:02:32,319 --> 00:02:37,360
to the application teams no matter if

00:02:35,280 --> 00:02:38,959
they run on kubernetes or virtual

00:02:37,360 --> 00:02:41,280
machines no matter if

00:02:38,959 --> 00:02:42,000
they run in a standalone or distributed

00:02:41,280 --> 00:02:44,080
way

00:02:42,000 --> 00:02:46,720
we didn't stop there we also donated

00:02:44,080 --> 00:02:48,640
kuma to the cncf foundation therefore

00:02:46,720 --> 00:02:51,120
hume is now available with the same

00:02:48,640 --> 00:02:54,400
neutrality in open governance as

00:02:51,120 --> 00:02:56,400
any other cncf project in the foundation

00:02:54,400 --> 00:02:57,680
like envoy proxy for example which by

00:02:56,400 --> 00:03:00,879
the way kuma

00:02:57,680 --> 00:03:03,360
uses and today it is a sandbox project

00:03:00,879 --> 00:03:05,200
over the next few months we're going to

00:03:03,360 --> 00:03:08,480
be obviously climbing

00:03:05,200 --> 00:03:08,959
the cncf ladder into incubating and one

00:03:08,480 --> 00:03:11,599
day

00:03:08,959 --> 00:03:13,360
graduated because of the very unique set

00:03:11,599 --> 00:03:14,319
of features that kuma provides and it's

00:03:13,360 --> 00:03:16,480
ease of use

00:03:14,319 --> 00:03:17,440
yet it's very powerful today is

00:03:16,480 --> 00:03:20,720
being used by

00:03:17,440 --> 00:03:23,040
over 900 organizations in very important

00:03:20,720 --> 00:03:25,440
and mission critical use cases

00:03:23,040 --> 00:03:27,680
qma from a very high level standpoint it

00:03:25,440 --> 00:03:30,720
is a control plane for service mesh

00:03:27,680 --> 00:03:32,239
it supports envoy under the hood but we

00:03:30,720 --> 00:03:36,080
don't require any envoy

00:03:32,239 --> 00:03:37,200
expertise to use cuba is universal

00:03:36,080 --> 00:03:39,519
it's a first class

00:03:37,200 --> 00:03:40,239
citizen for both kubernetes and vms but

00:03:39,519 --> 00:03:42,640
really for

00:03:40,239 --> 00:03:44,640
any other containerized environment as a

00:03:42,640 --> 00:03:46,799
matter of fact you could be running kuma

00:03:44,640 --> 00:03:48,400
entirely on vms with no kubernetes

00:03:46,799 --> 00:03:50,959
dependency whatsoever

00:03:48,400 --> 00:03:51,840
we have created this universal support

00:03:50,959 --> 00:03:54,560
because we have a

00:03:51,840 --> 00:03:56,159
very clear understanding that we as

00:03:54,560 --> 00:03:58,799
enterprise architects

00:03:56,159 --> 00:03:59,439
we must support the teams that are very

00:03:58,799 --> 00:04:01,360
far

00:03:59,439 --> 00:04:03,439
you know advanced in their kubernetes

00:04:01,360 --> 00:04:03,840
journey and the ones that are behind

00:04:03,439 --> 00:04:05,920
that

00:04:03,840 --> 00:04:07,760
curve and so we want to support a

00:04:05,920 --> 00:04:09,760
service mesh that can run across the

00:04:07,760 --> 00:04:10,640
board on both vms and kubernetes as a

00:04:09,760 --> 00:04:12,159
matter of fact

00:04:10,640 --> 00:04:13,439
we want that to be hybrid as well

00:04:12,159 --> 00:04:14,720
sometimes and we're going to be seeing

00:04:13,439 --> 00:04:16,639
this in the demo

00:04:14,720 --> 00:04:18,160
uh we can run in a multi-zone or single

00:04:16,639 --> 00:04:20,079
zone capacity we can run in a

00:04:18,160 --> 00:04:23,440
multi-cloud multi-cluster

00:04:20,079 --> 00:04:26,400
capacity and we can easily scale

00:04:23,440 --> 00:04:28,160
upgrade and operate this service mesh

00:04:26,400 --> 00:04:30,560
simplicity is a feature

00:04:28,160 --> 00:04:33,919
it's not a nice to have and we built

00:04:30,560 --> 00:04:36,400
kuma with that in mind

00:04:33,919 --> 00:04:38,160
kuma comes with a lot out of the box

00:04:36,400 --> 00:04:40,960
there is a gui out of the box there is

00:04:38,160 --> 00:04:42,160
an http api out of the box on kubernetes

00:04:40,960 --> 00:04:44,320
there are native kubernetes

00:04:42,160 --> 00:04:45,280
resources on vms there is declarative

00:04:44,320 --> 00:04:48,240
config

00:04:45,280 --> 00:04:49,520
uh there is an http api and a cli that

00:04:48,240 --> 00:04:52,639
allows us to effectively

00:04:49,520 --> 00:04:54,880
integrate huma with our ci cd workflows

00:04:52,639 --> 00:04:57,360
kuma also comes with much more than that

00:04:54,880 --> 00:04:59,440
it comes with observability charts and

00:04:57,360 --> 00:05:01,520
very easy to use integrations with

00:04:59,440 --> 00:05:03,120
gateways and existing api management

00:05:01,520 --> 00:05:04,800
solutions it supports

00:05:03,120 --> 00:05:06,560
any containerized environment not just

00:05:04,800 --> 00:05:09,440
kubernetes not just vms

00:05:06,560 --> 00:05:10,880
but also environments like aws fargate

00:05:09,440 --> 00:05:13,680
or ecs

00:05:10,880 --> 00:05:14,479
and uh enabling features like zero trust

00:05:13,680 --> 00:05:16,240
security

00:05:14,479 --> 00:05:18,320
like fault injection like traffic

00:05:16,240 --> 00:05:20,560
routing it is one click away

00:05:18,320 --> 00:05:22,479
we have native policies that allow us to

00:05:20,560 --> 00:05:24,000
do that

00:05:22,479 --> 00:05:26,479
qma can be deployed in a multi-zone

00:05:24,000 --> 00:05:28,720
capacity a zone can be a cloud a cluster

00:05:26,479 --> 00:05:29,919
can be vms can be containers and we can

00:05:28,720 --> 00:05:31,840
create one deployment

00:05:29,919 --> 00:05:33,520
of human that spans across all the

00:05:31,840 --> 00:05:35,440
environments that we want to support

00:05:33,520 --> 00:05:37,199
including private data centers

00:05:35,440 --> 00:05:38,880
and then on top of that one deployment

00:05:37,199 --> 00:05:40,000
of qma we can create as many virtual

00:05:38,880 --> 00:05:42,400
meshes as we want

00:05:40,000 --> 00:05:43,280
to compartmentalize how our teams and

00:05:42,400 --> 00:05:45,840
applications

00:05:43,280 --> 00:05:47,280
are setting up their mesh policies we

00:05:45,840 --> 00:05:47,840
obviously want to give a degree of

00:05:47,280 --> 00:05:50,400
freedom

00:05:47,840 --> 00:05:52,880
to the application teams to change the

00:05:50,400 --> 00:05:54,560
behavior of their applications without

00:05:52,880 --> 00:05:56,560
us the architects always being the

00:05:54,560 --> 00:05:58,000
bottleneck of every request

00:05:56,560 --> 00:05:59,759
yet we want the underlying

00:05:58,000 --> 00:06:01,520
infrastructure to be provisioned for

00:05:59,759 --> 00:06:02,319
them so they don't have to worry about

00:06:01,520 --> 00:06:04,479
it

00:06:02,319 --> 00:06:06,319
we have automatic policy storage and

00:06:04,479 --> 00:06:07,919
propagation with the concept of global

00:06:06,319 --> 00:06:08,800
control plane which is the primary

00:06:07,919 --> 00:06:10,720
control plane

00:06:08,800 --> 00:06:12,319
and remote control plane which is the

00:06:10,720 --> 00:06:14,560
secondary control plane

00:06:12,319 --> 00:06:15,759
all the policies we create can we can be

00:06:14,560 --> 00:06:17,199
created from the global

00:06:15,759 --> 00:06:19,440
and the global control plane will

00:06:17,199 --> 00:06:20,240
automatically reconcile and propagate

00:06:19,440 --> 00:06:21,759
these policies

00:06:20,240 --> 00:06:23,520
across all the zones that we want to

00:06:21,759 --> 00:06:25,919
support not only

00:06:23,520 --> 00:06:26,960
we can also enable connectivity from one

00:06:25,919 --> 00:06:30,240
zone to another

00:06:26,960 --> 00:06:31,759
in a very uh automated way therefore if

00:06:30,240 --> 00:06:33,520
there is a service wanting to consume

00:06:31,759 --> 00:06:35,600
another service

00:06:33,520 --> 00:06:36,880
none of these services have to know what

00:06:35,600 --> 00:06:38,400
zone they're running and how they're

00:06:36,880 --> 00:06:39,919
being built as a matter of fact we can

00:06:38,400 --> 00:06:41,919
also mix and match hybrid

00:06:39,919 --> 00:06:43,280
and kubernetes environments it can be

00:06:41,919 --> 00:06:46,160
very very

00:06:43,280 --> 00:06:48,560
complex the way we deploy it yet it is

00:06:46,160 --> 00:06:51,120
very easy to use and simple when we

00:06:48,560 --> 00:06:51,120
manage it

00:06:51,199 --> 00:06:55,199
so in the demo i want to show you how we

00:06:53,039 --> 00:06:58,080
can run kuma in a multi-cloud and

00:06:55,199 --> 00:07:00,560
multi-cluster capacity on gcp and aws

00:06:58,080 --> 00:07:01,360
on three different kubernetes clusters

00:07:00,560 --> 00:07:02,880
on gcp

00:07:01,360 --> 00:07:05,520
and we're going to show this is a demo

00:07:02,880 --> 00:07:07,440
about containers and vms hybrid mixed

00:07:05,520 --> 00:07:10,479
together within the same mesh

00:07:07,440 --> 00:07:10,880
so let me pull up my environment i do

00:07:10,479 --> 00:07:14,160
have

00:07:10,880 --> 00:07:16,160
my aws ec2 zone with the remote control

00:07:14,160 --> 00:07:16,880
plane and my demo application running in

00:07:16,160 --> 00:07:18,800
vms

00:07:16,880 --> 00:07:20,479
and i do have my kubernetes clusters the

00:07:18,800 --> 00:07:22,880
global and the east and the west

00:07:20,479 --> 00:07:23,599
uh that also have the demo application

00:07:22,880 --> 00:07:25,599
running

00:07:23,599 --> 00:07:27,680
every time i increment a counter in

00:07:25,599 --> 00:07:29,599
redis from the demo app

00:07:27,680 --> 00:07:31,520
depending on what radius instance we're

00:07:29,599 --> 00:07:32,319
incrementing depending on which zone

00:07:31,520 --> 00:07:33,440
we're hitting

00:07:32,319 --> 00:07:35,520
we're going to be seeing different

00:07:33,440 --> 00:07:37,440
clusters now if i connected to the

00:07:35,520 --> 00:07:39,120
global control plane i can also expose

00:07:37,440 --> 00:07:40,880
the glue of kuma to understand what's

00:07:39,120 --> 00:07:44,479
the status of the current mesh

00:07:40,880 --> 00:07:46,479
and fetch all the um

00:07:44,479 --> 00:07:48,800
and you know all the status of my zones

00:07:46,479 --> 00:07:51,120
and my workloads so i'm port forwarding

00:07:48,800 --> 00:07:52,879
the control plane uh in the cuba system

00:07:51,120 --> 00:07:55,199
namespace and once i do that

00:07:52,879 --> 00:07:56,879
we can go ahead and explore so first and

00:07:55,199 --> 00:07:59,120
foremost there is an api

00:07:56,879 --> 00:08:00,800
an api that we can use to automate

00:07:59,120 --> 00:08:02,720
everything that the gui can do

00:08:00,800 --> 00:08:04,720
but if we go on slash gui we can also

00:08:02,720 --> 00:08:06,400
see it and we can see that this is

00:08:04,720 --> 00:08:09,599
running on three different zones

00:08:06,400 --> 00:08:11,280
uh awsc two gkes the gke west and we do

00:08:09,599 --> 00:08:13,360
have a few services running inside of

00:08:11,280 --> 00:08:14,240
our systems as well as all the data

00:08:13,360 --> 00:08:17,360
plane proxies

00:08:14,240 --> 00:08:18,879
that are being connected to our service

00:08:17,360 --> 00:08:19,599
mesh which is running in a distributed

00:08:18,879 --> 00:08:22,800
way

00:08:19,599 --> 00:08:25,680
so right now i can load my

00:08:22,800 --> 00:08:28,400
oops i can load my demo application and

00:08:25,680 --> 00:08:31,520
that's probably the wrong address

00:08:28,400 --> 00:08:33,039
this is the right one there we go i can

00:08:31,520 --> 00:08:35,839
load my demo application

00:08:33,039 --> 00:08:37,839
and increment my radius counters now

00:08:35,839 --> 00:08:38,479
because mutual tls is being disabled

00:08:37,839 --> 00:08:43,440
right now

00:08:38,479 --> 00:08:43,440
in these uh current um

00:08:43,919 --> 00:08:48,800
setup we need to enable neutral kls in

00:08:47,040 --> 00:08:50,640
order to allow for that cross zone

00:08:48,800 --> 00:08:52,320
connectivity so right now the default

00:08:50,640 --> 00:08:55,360
mesh has mutual is disabled

00:08:52,320 --> 00:08:57,600
so let's go ahead and implement mutual

00:08:55,360 --> 00:08:59,519
tls and enable it in one click

00:08:57,600 --> 00:09:01,279
uh qmo will automatically generate the

00:08:59,519 --> 00:09:02,560
certificated authority for us although

00:09:01,279 --> 00:09:04,399
we can provide our own

00:09:02,560 --> 00:09:05,680
and automatically it will rotate the

00:09:04,399 --> 00:09:07,120
certificates for us

00:09:05,680 --> 00:09:08,640
so that the entire certificate

00:09:07,120 --> 00:09:09,680
management has been taken care of no

00:09:08,640 --> 00:09:12,720
matter if you have

00:09:09,680 --> 00:09:15,200
one service or 10 000 services so let's

00:09:12,720 --> 00:09:18,320
go ahead and create

00:09:15,200 --> 00:09:19,440
the um and create this zerotrust

00:09:18,320 --> 00:09:22,240
security

00:09:19,440 --> 00:09:23,200
policy uh in the global control plane as

00:09:22,240 --> 00:09:25,839
soon as i create it

00:09:23,200 --> 00:09:27,760
uh the global will propagate this to my

00:09:25,839 --> 00:09:29,200
uh other clusters the certificates will

00:09:27,760 --> 00:09:31,200
be generated and as soon as they're

00:09:29,200 --> 00:09:33,680
being generated we're going to be seeing

00:09:31,200 --> 00:09:35,760
cross zone connectivity from vms to

00:09:33,680 --> 00:09:37,120
containers across multiple clouds

00:09:35,760 --> 00:09:39,839
multiple regions

00:09:37,120 --> 00:09:42,480
multiple environments hybrid this is how

00:09:39,839 --> 00:09:44,640
easy it is to enable zero trust security

00:09:42,480 --> 00:09:46,640
with service mesh of course there is

00:09:44,640 --> 00:09:48,320
much more to it that i want to show you

00:09:46,640 --> 00:09:50,240
but there is not enough time so if you

00:09:48,320 --> 00:09:52,080
want to get in touch with kuma so first

00:09:50,240 --> 00:09:54,800
and foremost you can install kuma

00:09:52,080 --> 00:09:56,320
by going on cumulo as well as you can

00:09:54,800 --> 00:09:58,480
get in touch with our community and

00:09:56,320 --> 00:10:00,560
please do not miss the talk today

00:09:58,480 --> 00:10:02,320
about a federal use case and how we can

00:10:00,560 --> 00:10:06,399
support 10k transactions

00:10:02,320 --> 00:10:07,440
per second with cuma by given by a user

00:10:06,399 --> 00:10:09,040
of hume itself

00:10:07,440 --> 00:10:11,920
so thank you so much and enjoy the rest

00:10:09,040 --> 00:10:11,920

YouTube URL: https://www.youtube.com/watch?v=BaInxyc_MbY


