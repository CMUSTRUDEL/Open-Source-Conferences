Title: Virtual Machines as First Class Citizens in Service Mesh - Denis Jannot, Solo.io
Publication date: 2021-05-05
Playlist: ServiceMeshCon EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Virtual Machines as First Class Citizens in Service Mesh - Denis Jannot, Solo.io

The adoption of containerization is accelerating and running modern applications on Kubernetes became the standard. But what about the legacy applications that can't be deployed on Kubernetes ? Service Mesh seems to be the bridge that everyone wanted to unify these 2 worlds. You can now (somewhat) easily add Virtual Machines (and even Bare Metal servers) into your Mesh. In this talk, I'm going to show how to do that on Istio and speak about the different challenges someone needs to keep in mind: - how to automate the process (from the creation of Service Accounts on Kubernetes to the deployment of the prerequisites in the VMs). - how to add VMs in the Mesh in a multi cluster deployment. - how to allow canary deployments between Pods and VMs I'll also do a demo where I'll show how to automate the testing using Kind and Docker containers (yes, testing the VM integration without a VM !
Captions: 
	00:00:00,080 --> 00:00:04,880
hi everyone i hope you enjoyed the

00:00:03,040 --> 00:00:06,799
service meshcon so far

00:00:04,880 --> 00:00:08,639
in this talk we are going to speak about

00:00:06,799 --> 00:00:10,160
how virtual machines are becoming

00:00:08,639 --> 00:00:13,599
first-class citizens

00:00:10,160 --> 00:00:14,240
in service mesh i am donijano director

00:00:13,599 --> 00:00:18,560
of

00:00:14,240 --> 00:00:21,119
feed engineering emea at solo.io

00:00:18,560 --> 00:00:23,199
so at the beginning everything started

00:00:21,119 --> 00:00:26,800
with these modernity

00:00:23,199 --> 00:00:29,119
applications and we've seen

00:00:26,800 --> 00:00:30,400
the evolution to microservices and

00:00:29,119 --> 00:00:32,719
obviously

00:00:30,400 --> 00:00:34,160
kubernetes became the most popular

00:00:32,719 --> 00:00:38,000
platform to run these

00:00:34,160 --> 00:00:40,320
micro services but we ended up with

00:00:38,000 --> 00:00:41,040
two separate worlds right on one side

00:00:40,320 --> 00:00:44,320
you have

00:00:41,040 --> 00:00:46,640
some legacy applications running on bar

00:00:44,320 --> 00:00:49,520
metal servers or

00:00:46,640 --> 00:00:51,600
on virtualization platform like vmware

00:00:49,520 --> 00:00:54,879
and on the other side

00:00:51,600 --> 00:00:55,440
the new modern cloud native applications

00:00:54,879 --> 00:00:59,359
running

00:00:55,440 --> 00:01:01,520
on kubernetes and then after that what

00:00:59,359 --> 00:01:05,360
we've seen is the service mesh

00:01:01,520 --> 00:01:08,560
um started to become really popular

00:01:05,360 --> 00:01:11,360
with this idea that you can have

00:01:08,560 --> 00:01:12,479
on one side the control plane where you

00:01:11,360 --> 00:01:14,880
define

00:01:12,479 --> 00:01:16,240
all your policies and on the other side

00:01:14,880 --> 00:01:19,280
the data plane where

00:01:16,240 --> 00:01:21,040
um all these policies are enforced

00:01:19,280 --> 00:01:22,799
and when we speak about this policy we

00:01:21,040 --> 00:01:25,840
speak about things like

00:01:22,799 --> 00:01:28,640
um being able to encrypt

00:01:25,840 --> 00:01:30,479
communication between microservices

00:01:28,640 --> 00:01:31,520
being able to get some telemetry

00:01:30,479 --> 00:01:34,079
information

00:01:31,520 --> 00:01:36,240
and all these things being becoming

00:01:34,079 --> 00:01:39,600
possible because

00:01:36,240 --> 00:01:41,200
of this sidecar proxy that is running on

00:01:39,600 --> 00:01:43,200
each pod

00:01:41,200 --> 00:01:44,880
in most of the cases on most of the

00:01:43,200 --> 00:01:48,320
service mesh out there

00:01:44,880 --> 00:01:51,439
and that they are based on envoy

00:01:48,320 --> 00:01:52,560
and basically you don't need to do

00:01:51,439 --> 00:01:56,320
anything

00:01:52,560 --> 00:01:58,560
at the application level but instead um

00:01:56,320 --> 00:02:00,320
you use the service mesh to provide all

00:01:58,560 --> 00:02:02,960
these capabilities like uh

00:02:00,320 --> 00:02:04,240
encryption telemetry else check and and

00:02:02,960 --> 00:02:07,280
so on

00:02:04,240 --> 00:02:10,479
um and what's very interesting is that

00:02:07,280 --> 00:02:13,520
it's um it's about to unify

00:02:10,479 --> 00:02:14,800
um these two worlds uh what i mean by

00:02:13,520 --> 00:02:18,000
that is that you have

00:02:14,800 --> 00:02:19,920
uh the virtualization um

00:02:18,000 --> 00:02:22,560
you know the legacy application running

00:02:19,920 --> 00:02:24,959
on on vmware or bar metal

00:02:22,560 --> 00:02:26,640
that can now be part of the mesh and

00:02:24,959 --> 00:02:29,440
that's very interesting

00:02:26,640 --> 00:02:31,120
because it means that i can now have

00:02:29,440 --> 00:02:33,760
like communication between

00:02:31,120 --> 00:02:35,200
the legacy application and the modern

00:02:33,760 --> 00:02:38,239
applications

00:02:35,200 --> 00:02:41,120
being encrypted i can you know do like

00:02:38,239 --> 00:02:42,000
some kind of uh canary deployment for

00:02:41,120 --> 00:02:45,120
example

00:02:42,000 --> 00:02:45,680
um we we will see that just here you can

00:02:45,120 --> 00:02:48,319
have

00:02:45,680 --> 00:02:49,519
like the same application running on the

00:02:48,319 --> 00:02:52,640
legacy environment

00:02:49,519 --> 00:02:55,599
and on uh kubernetes

00:02:52,640 --> 00:02:56,000
and you want to seamlessly migrate from

00:02:55,599 --> 00:02:59,120
like

00:02:56,000 --> 00:03:00,959
you know from from vmware to uh

00:02:59,120 --> 00:03:02,400
kubernetes this application that becomes

00:03:00,959 --> 00:03:04,239
possible because

00:03:02,400 --> 00:03:06,239
that's one of the nice thing you can do

00:03:04,239 --> 00:03:08,319
with service mesh you can

00:03:06,239 --> 00:03:10,400
do some kind of you know canary

00:03:08,319 --> 00:03:12,640
deployment some kind of traffic shift

00:03:10,400 --> 00:03:13,519
say okay at the beginning i start by

00:03:12,640 --> 00:03:15,519
having

00:03:13,519 --> 00:03:16,720
all my requests for this application are

00:03:15,519 --> 00:03:19,599
sent to

00:03:16,720 --> 00:03:21,200
this legacy environment but slowly i

00:03:19,599 --> 00:03:24,560
start to send like

00:03:21,200 --> 00:03:26,799
25 25 percent of the request um

00:03:24,560 --> 00:03:28,000
to uh the same application running on

00:03:26,799 --> 00:03:30,319
kubernetes and i

00:03:28,000 --> 00:03:31,200
can check that everything works well and

00:03:30,319 --> 00:03:34,239
and then when

00:03:31,200 --> 00:03:36,239
um i see that everything is fine i can

00:03:34,239 --> 00:03:39,599
migrate completely the application so i

00:03:36,239 --> 00:03:43,680
can now do this migration from

00:03:39,599 --> 00:03:44,720
legacy environment to kubernetes or to

00:03:43,680 --> 00:03:49,040
containers

00:03:44,720 --> 00:03:51,200
without any downtime i can also

00:03:49,040 --> 00:03:53,120
get some extra benefits for my legacy

00:03:51,200 --> 00:03:54,560
application even if i want to keep them

00:03:53,120 --> 00:03:57,599
running

00:03:54,560 --> 00:04:00,560
in their current platform

00:03:57,599 --> 00:04:02,159
i can still you know get the encryption

00:04:00,560 --> 00:04:04,159
like i said before but i can also get

00:04:02,159 --> 00:04:06,879
some telemetry information and

00:04:04,159 --> 00:04:07,840
and other benefits that uh i generally

00:04:06,879 --> 00:04:09,920
get with uh

00:04:07,840 --> 00:04:10,879
with the service mesh there are

00:04:09,920 --> 00:04:14,239
different uh

00:04:10,879 --> 00:04:17,440
service mesh technology uh available

00:04:14,239 --> 00:04:18,400
but here we'll focus on histo if you

00:04:17,440 --> 00:04:21,600
look at the

00:04:18,400 --> 00:04:25,120
cncf survey that has been done

00:04:21,600 --> 00:04:26,639
last year we can see that estio is

00:04:25,120 --> 00:04:29,199
definitely

00:04:26,639 --> 00:04:29,840
the most popular service mesh out there

00:04:29,199 --> 00:04:31,680
and uh

00:04:29,840 --> 00:04:33,360
i would say that uh it will be

00:04:31,680 --> 00:04:36,880
interesting to see the the results

00:04:33,360 --> 00:04:40,479
in uh 2021 and i'm pretty sure it's

00:04:36,880 --> 00:04:42,800
um even you know bigger now

00:04:40,479 --> 00:04:44,880
so we are really going to focus on on

00:04:42,800 --> 00:04:47,520
istio in this talk and also

00:04:44,880 --> 00:04:49,120
so one of the reason is because uh it's

00:04:47,520 --> 00:04:50,560
definitely the most popular one but also

00:04:49,120 --> 00:04:54,320
the other reason is that

00:04:50,560 --> 00:04:58,720
it now has a really good support for

00:04:54,320 --> 00:04:58,720
um vms and environmental servers

00:04:59,199 --> 00:05:02,560
so let's jump directly in the demo and

00:05:01,440 --> 00:05:05,600
uh and

00:05:02,560 --> 00:05:08,960
show you uh how all these things are

00:05:05,600 --> 00:05:10,080
are you know done and uh especially what

00:05:08,960 --> 00:05:12,720
we will do in the demo

00:05:10,080 --> 00:05:13,840
is that i will use this uh environment

00:05:12,720 --> 00:05:15,919
where

00:05:13,840 --> 00:05:17,600
you see i'm running multiple cubans

00:05:15,919 --> 00:05:20,800
clusters using uh

00:05:17,600 --> 00:05:23,120
kind and on

00:05:20,800 --> 00:05:25,520
this different cubes cluster i have

00:05:23,120 --> 00:05:27,120
deployed like istio and two of them

00:05:25,520 --> 00:05:28,880
and i've deployed blue machine in the

00:05:27,120 --> 00:05:29,919
third one i'll speak about chromage very

00:05:28,880 --> 00:05:34,000
quickly

00:05:29,919 --> 00:05:36,720
later on and uh what's interesting here

00:05:34,000 --> 00:05:40,479
that i will show you that you can test

00:05:36,720 --> 00:05:41,520
this vm integration using a docker

00:05:40,479 --> 00:05:44,240
container as well

00:05:41,520 --> 00:05:46,560
and it makes your life a lot easier um

00:05:44,240 --> 00:05:48,720
if you want to

00:05:46,560 --> 00:05:50,160
put in place like automated tested and

00:05:48,720 --> 00:05:52,160
so and so on like

00:05:50,160 --> 00:05:53,840
it's it's very convenient to be able to

00:05:52,160 --> 00:05:57,039
simulate this vm

00:05:53,840 --> 00:06:00,319
um as a as a container so

00:05:57,039 --> 00:06:03,600
i'll i'll uh i'll show you how we uh

00:06:00,319 --> 00:06:06,240
we start from uh from a

00:06:03,600 --> 00:06:07,680
docker container and we we put in place

00:06:06,240 --> 00:06:10,800
all the pre-quizzes to

00:06:07,680 --> 00:06:11,680
to join the mesh and uh i won't go

00:06:10,800 --> 00:06:14,319
through

00:06:11,680 --> 00:06:15,199
all the details because uh obviously you

00:06:14,319 --> 00:06:17,360
can

00:06:15,199 --> 00:06:19,199
you know you can find them in the list

00:06:17,360 --> 00:06:20,639
your documentation

00:06:19,199 --> 00:06:23,280
if you go to virtual machine

00:06:20,639 --> 00:06:26,160
installation uh you'll see

00:06:23,280 --> 00:06:26,800
a lot of the things that we will do in

00:06:26,160 --> 00:06:29,840
the demo

00:06:26,800 --> 00:06:30,800
are described there the difference is

00:06:29,840 --> 00:06:33,360
that um

00:06:30,800 --> 00:06:34,080
instead of running this command in the

00:06:33,360 --> 00:06:36,080
vm i

00:06:34,080 --> 00:06:37,280
will run them in a container and and i

00:06:36,080 --> 00:06:39,759
will have to to

00:06:37,280 --> 00:06:41,919
adjust a few things just to to make it

00:06:39,759 --> 00:06:45,199
uh to make it work but uh

00:06:41,919 --> 00:06:48,479
but the the baseline for the demo

00:06:45,199 --> 00:06:51,360
um is uh is here

00:06:48,479 --> 00:06:53,120
so um let's jump in the demo environment

00:06:51,360 --> 00:06:56,000
so i have like four windows here

00:06:53,120 --> 00:06:57,360
you can see one where i will prepare

00:06:56,000 --> 00:07:00,960
everything for the

00:06:57,360 --> 00:07:02,080
for the vm and then um what we will do

00:07:00,960 --> 00:07:04,960
is that uh

00:07:02,080 --> 00:07:05,520
we will start with a an environment

00:07:04,960 --> 00:07:07,520
where

00:07:05,520 --> 00:07:09,039
um as i said you know we have two cubans

00:07:07,520 --> 00:07:12,639
clusters here

00:07:09,039 --> 00:07:15,599
and uh i've deployed uh the

00:07:12,639 --> 00:07:16,080
booking for application on both clusters

00:07:15,599 --> 00:07:19,120
and

00:07:16,080 --> 00:07:20,479
we are going to start with this

00:07:19,120 --> 00:07:23,120
situation where

00:07:20,479 --> 00:07:23,759
when i send a request on cluster one and

00:07:23,120 --> 00:07:26,800
i try

00:07:23,759 --> 00:07:29,919
to um to go to the

00:07:26,800 --> 00:07:30,400
the product page then um you know the

00:07:29,919 --> 00:07:34,479
product

00:07:30,400 --> 00:07:36,800
page uh is uh going to

00:07:34,479 --> 00:07:39,039
send requests to the different services

00:07:36,800 --> 00:07:40,160
and we will play with this detailed

00:07:39,039 --> 00:07:42,639
service right so

00:07:40,160 --> 00:07:43,360
we will have like uh at the beginning we

00:07:42,639 --> 00:07:47,599
will

00:07:43,360 --> 00:07:50,319
try to have like uh the the product page

00:07:47,599 --> 00:07:51,440
uh running uh the details sorry running

00:07:50,319 --> 00:07:53,919
in the vm

00:07:51,440 --> 00:07:54,879
and that's why where we will start we

00:07:53,919 --> 00:07:56,639
will

00:07:54,879 --> 00:07:58,240
deploy all the prequels so that the vm

00:07:56,639 --> 00:08:01,520
becomes part of the mesh

00:07:58,240 --> 00:08:03,599
and we have like the product page going

00:08:01,520 --> 00:08:06,800
to the detail service running here

00:08:03,599 --> 00:08:09,919
and then later we will um

00:08:06,800 --> 00:08:13,199
show how we can migrate seamlessly like

00:08:09,919 --> 00:08:15,759
to kubernetes so migration migrating

00:08:13,199 --> 00:08:18,160
this app from the vm to kubernetes

00:08:15,759 --> 00:08:19,759
uh slowly you know like uh taking a

00:08:18,160 --> 00:08:22,160
canary approach

00:08:19,759 --> 00:08:23,599
and then at the end i even show you like

00:08:22,160 --> 00:08:26,160
how you can have like

00:08:23,599 --> 00:08:28,000
uh requests going some requests going to

00:08:26,160 --> 00:08:30,080
the vm some requests going

00:08:28,000 --> 00:08:32,399
to the pod locally and some even other

00:08:30,080 --> 00:08:34,959
requests going another cluster and

00:08:32,399 --> 00:08:36,800
that is you know made uh very easy with

00:08:34,959 --> 00:08:40,320
uh with blue mesh

00:08:36,800 --> 00:08:43,919
so let's uh let's jump into the demo

00:08:40,320 --> 00:08:46,640
now and uh as you can see here

00:08:43,919 --> 00:08:48,399
uh i have like uh my book booking for

00:08:46,640 --> 00:08:50,959
application running

00:08:48,399 --> 00:08:52,640
but uh the details which is this part of

00:08:50,959 --> 00:08:55,760
of the demo

00:08:52,640 --> 00:08:56,480
of the of the page here uh we will make

00:08:55,760 --> 00:09:00,800
it run

00:08:56,480 --> 00:09:04,000
in uh in a vm so to do that

00:09:00,800 --> 00:09:07,600
uh i'll just jump here

00:09:04,000 --> 00:09:10,560
and you see i will call my vm vm1 i will

00:09:07,600 --> 00:09:12,560
use the namespace virtual machines i

00:09:10,560 --> 00:09:15,360
will create a service icon for this vm

00:09:12,560 --> 00:09:16,560
and and i specify which network i am on

00:09:15,360 --> 00:09:20,720
which is the network

00:09:16,560 --> 00:09:24,000
uh of the

00:09:20,720 --> 00:09:25,279
the vm like network one is the network

00:09:24,000 --> 00:09:28,480
corresponding to my

00:09:25,279 --> 00:09:30,240
first cluster and the vm network uh is

00:09:28,480 --> 00:09:32,640
uh the network of my vm

00:09:30,240 --> 00:09:33,360
that means that i will use gateways to

00:09:32,640 --> 00:09:36,560
communicate

00:09:33,360 --> 00:09:40,880
with uh with the clusters

00:09:36,560 --> 00:09:44,560
so i just like to copy and paste here

00:09:40,880 --> 00:09:46,240
then uh i'll create a working directory

00:09:44,560 --> 00:09:48,000
where i will create all the files that

00:09:46,240 --> 00:09:50,000
needs to be transferred to the vm which

00:09:48,000 --> 00:09:54,240
in my case would be like a docker

00:09:50,000 --> 00:09:55,839
container i will create a namespace for

00:09:54,240 --> 00:09:58,959
this vm and service account

00:09:55,839 --> 00:10:02,000
so the service account that

00:09:58,959 --> 00:10:05,920
will be used to generate a certificate

00:10:02,000 --> 00:10:09,360
for this vm is also

00:10:05,920 --> 00:10:13,040
residing on kubernetes and

00:10:09,360 --> 00:10:14,880
then you have this notion of like a

00:10:13,040 --> 00:10:17,040
workload group that you can use if you

00:10:14,880 --> 00:10:18,880
want to dynamically register vms but

00:10:17,040 --> 00:10:19,760
here we are just going to create this

00:10:18,880 --> 00:10:22,480
dml

00:10:19,760 --> 00:10:24,720
and we will use this yaml as an input

00:10:22,480 --> 00:10:28,399
for the istioctl command line

00:10:24,720 --> 00:10:32,079
that will prepare all the files that

00:10:28,399 --> 00:10:34,640
that we need for configuring the vm so

00:10:32,079 --> 00:10:37,120
i'm just going to run this command here

00:10:34,640 --> 00:10:38,240
and it's here what's interesting is that

00:10:37,120 --> 00:10:40,240
we can take a look at

00:10:38,240 --> 00:10:41,760
what has been generated for us and you

00:10:40,240 --> 00:10:45,200
see um

00:10:41,760 --> 00:10:46,880
we have like a short living token so

00:10:45,200 --> 00:10:50,959
that's kind of

00:10:46,880 --> 00:10:54,079
a way for the vm to identify itself

00:10:50,959 --> 00:10:57,200
uh that to prove it to prove that

00:10:54,079 --> 00:10:59,279
uh it has access to this service account

00:10:57,200 --> 00:11:01,839
and it will be used to be able to get

00:10:59,279 --> 00:11:05,200
the certificate from

00:11:01,839 --> 00:11:05,680
the studio control plane and then later

00:11:05,200 --> 00:11:08,480
on

00:11:05,680 --> 00:11:09,360
the certificate will be rotated and

00:11:08,480 --> 00:11:11,360
every time

00:11:09,360 --> 00:11:14,079
the vm will identify itself with this

00:11:11,360 --> 00:11:16,079
certificate not with the token anymore

00:11:14,079 --> 00:11:17,839
we have also some you know information

00:11:16,079 --> 00:11:20,480
you can uh

00:11:17,839 --> 00:11:21,120
take a look at uh what what you have

00:11:20,480 --> 00:11:24,160
here but

00:11:21,120 --> 00:11:25,120
uh i won't go and cover everything as i

00:11:24,160 --> 00:11:27,760
said it's

00:11:25,120 --> 00:11:29,760
mostly documented but you can see

00:11:27,760 --> 00:11:31,600
information about the networks and

00:11:29,760 --> 00:11:33,440
you know the name of the vm and trust

00:11:31,600 --> 00:11:37,200
domain and so on

00:11:33,440 --> 00:11:38,160
um so then now i'm going to start docker

00:11:37,200 --> 00:11:41,120
container

00:11:38,160 --> 00:11:43,120
that will be we will consider as my vm

00:11:41,120 --> 00:11:44,640
and you see here what i do is that i use

00:11:43,120 --> 00:11:48,480
the image

00:11:44,640 --> 00:11:50,560
the docker image of the details

00:11:48,480 --> 00:11:51,680
service so that will be the baseline it

00:11:50,560 --> 00:11:53,279
will be easier for me to run the

00:11:51,680 --> 00:11:56,320
detailed service because

00:11:53,279 --> 00:11:59,920
that's already what this image

00:11:56,320 --> 00:12:03,440
provides so i'm going to just

00:11:59,920 --> 00:12:06,079
run this uh image

00:12:03,440 --> 00:12:07,680
and again you can consider it as a vm

00:12:06,079 --> 00:12:08,800
it's not part of the kubernetes cluster

00:12:07,680 --> 00:12:12,959
it's running

00:12:08,800 --> 00:12:15,920
as a docker container

00:12:12,959 --> 00:12:17,040
like kine is doing so if i do docker ps

00:12:15,920 --> 00:12:20,560
you can see

00:12:17,040 --> 00:12:26,639
i have kind my three kind clusters

00:12:20,560 --> 00:12:26,639
and uh i have my vm here

00:12:27,200 --> 00:12:33,760
so now i have my vm as a container

00:12:31,200 --> 00:12:35,440
i'm going to just deploy some

00:12:33,760 --> 00:12:40,079
pre-quizzes that

00:12:35,440 --> 00:12:44,320
are needed for deploying

00:12:40,079 --> 00:12:46,500
hto um this your agent

00:12:44,320 --> 00:12:48,240
and i'm going also to

00:12:46,500 --> 00:12:51,120
[Music]

00:12:48,240 --> 00:12:53,279
prepare the os file that i will need so

00:12:51,120 --> 00:12:57,040
that the vm knows how to contact the

00:12:53,279 --> 00:13:00,240
control plane so that's the ip of my

00:12:57,040 --> 00:13:03,600
gateway to reach stod

00:13:00,240 --> 00:13:06,079
then here i'm going to just

00:13:03,600 --> 00:13:07,279
you see like transfer the different

00:13:06,079 --> 00:13:09,920
files that i got

00:13:07,279 --> 00:13:10,480
when i run this command line here so

00:13:09,920 --> 00:13:13,600
just

00:13:10,480 --> 00:13:17,519
you see just doing like docker

00:13:13,600 --> 00:13:20,720
exec to copy some of the files when i

00:13:17,519 --> 00:13:23,120
created you see when i i started my

00:13:20,720 --> 00:13:24,959
my container i just mapped this

00:13:23,120 --> 00:13:29,120
directory here so i can just like

00:13:24,959 --> 00:13:34,160
copy internally then i'm going to deploy

00:13:29,120 --> 00:13:37,279
the hto sidecar proxy

00:13:34,160 --> 00:13:37,600
here so it will be running directly in

00:13:37,279 --> 00:13:40,800
my

00:13:37,600 --> 00:13:43,839
in my container and again

00:13:40,800 --> 00:13:45,040
copying a few other files that i had

00:13:43,839 --> 00:13:47,680
before

00:13:45,040 --> 00:13:49,040
uh copying the host file that contains

00:13:47,680 --> 00:13:52,240
this entry

00:13:49,040 --> 00:13:55,360
and changing some permissions on

00:13:52,240 --> 00:13:58,160
directories and

00:13:55,360 --> 00:14:00,000
at that point in time there is one one

00:13:58,160 --> 00:14:03,279
special tweak so

00:14:00,000 --> 00:14:05,040
the way it works in in a recent version

00:14:03,279 --> 00:14:08,560
of istio is that you have

00:14:05,040 --> 00:14:10,880
um a dns proxy running uh

00:14:08,560 --> 00:14:13,680
within these two agents and there is a

00:14:10,880 --> 00:14:15,600
iptables rule that redirect all the dns

00:14:13,680 --> 00:14:19,440
requests

00:14:15,600 --> 00:14:22,000
to this proxy so that uh

00:14:19,440 --> 00:14:22,560
it knows about the ip of the different

00:14:22,000 --> 00:14:24,480
uh

00:14:22,560 --> 00:14:26,480
you know pods or in in our case will be

00:14:24,480 --> 00:14:30,079
like the gateway and so on

00:14:26,480 --> 00:14:33,360
but by default the dns

00:14:30,079 --> 00:14:34,800
server is this one which is kind of a

00:14:33,360 --> 00:14:39,040
local

00:14:34,800 --> 00:14:41,199
ip as well and that that prevents this

00:14:39,040 --> 00:14:42,399
ip table to work properly so i'm just

00:14:41,199 --> 00:14:45,760
going to

00:14:42,399 --> 00:14:47,519
change the reserve.conf of this

00:14:45,760 --> 00:14:49,120
container so that it's just used like

00:14:47,519 --> 00:14:51,519
the google dns

00:14:49,120 --> 00:14:52,959
and the ip tables rules will will work

00:14:51,519 --> 00:14:57,040
properly

00:14:52,959 --> 00:15:00,480
um finally i'm going to start

00:14:57,040 --> 00:15:03,120
istio agent in this uh

00:15:00,480 --> 00:15:04,480
in this container so now i have like uh

00:15:03,120 --> 00:15:07,600
my container that

00:15:04,480 --> 00:15:10,399
uh you can consider as the vm and uh

00:15:07,600 --> 00:15:11,120
if everything works well and i i look at

00:15:10,399 --> 00:15:15,519
the

00:15:11,120 --> 00:15:18,639
clusters entries here i should see

00:15:15,519 --> 00:15:19,920
information for how to reach my services

00:15:18,639 --> 00:15:21,360
running in the cluster like

00:15:19,920 --> 00:15:24,720
for example if i want to reach the

00:15:21,360 --> 00:15:27,040
product page and you see here

00:15:24,720 --> 00:15:29,360
i see the if i want to use the product

00:15:27,040 --> 00:15:32,000
page this is the ip

00:15:29,360 --> 00:15:33,360
and this is the port and as you can see

00:15:32,000 --> 00:15:36,480
this is the same

00:15:33,360 --> 00:15:38,560
as you can see here because i use the

00:15:36,480 --> 00:15:41,279
history ingress gateway because my vm is

00:15:38,560 --> 00:15:44,320
in a different network

00:15:41,279 --> 00:15:47,120
we can also check that we can access

00:15:44,320 --> 00:15:48,720
the product page from the details which

00:15:47,120 --> 00:15:52,560
is not really what

00:15:48,720 --> 00:15:55,199
we we want to do right download

00:15:52,560 --> 00:15:56,880
the details but here is just to show you

00:15:55,199 --> 00:16:00,720
that the communication

00:15:56,880 --> 00:16:04,160
from uh the the

00:16:00,720 --> 00:16:07,360
the vm to uh the

00:16:04,160 --> 00:16:07,759
the services running in kubernetes is

00:16:07,360 --> 00:16:10,160
fine

00:16:07,759 --> 00:16:11,680
and you see i have a 200 okay and

00:16:10,160 --> 00:16:13,279
everything is secure by the way i didn't

00:16:11,680 --> 00:16:14,959
sell it but everything is secured with

00:16:13,279 --> 00:16:18,000
mcls if i

00:16:14,959 --> 00:16:21,440
would go to cluster or one

00:16:18,000 --> 00:16:24,240
um and the istio system

00:16:21,440 --> 00:16:26,639
namespace i would you could see that

00:16:24,240 --> 00:16:29,920
there is a peer authentication

00:16:26,639 --> 00:16:32,959
that has been created here

00:16:29,920 --> 00:16:35,440
which uh enforced uh strict mtls so

00:16:32,959 --> 00:16:37,600
here we will show that we can get like

00:16:35,440 --> 00:16:40,320
street mtls and encryption

00:16:37,600 --> 00:16:42,480
between the vm and the pod when it's the

00:16:40,320 --> 00:16:44,639
vm that initiate the connection

00:16:42,480 --> 00:16:45,680
and we we are able to reach the services

00:16:44,639 --> 00:16:48,639
that are running

00:16:45,680 --> 00:16:50,079
in kubernetes now we are going to start

00:16:48,639 --> 00:16:53,759
the details

00:16:50,079 --> 00:16:57,199
service in this vm

00:16:53,759 --> 00:17:01,040
and we are going to create

00:16:57,199 --> 00:17:04,160
a service and a workload entry

00:17:01,040 --> 00:17:07,360
so that the pods that are running

00:17:04,160 --> 00:17:08,160
on kubernetes they know how to reach the

00:17:07,360 --> 00:17:10,319
detailed

00:17:08,160 --> 00:17:11,760
service that is now running in my vm and

00:17:10,319 --> 00:17:13,919
you see here

00:17:11,760 --> 00:17:15,919
the most important part is here you see

00:17:13,919 --> 00:17:19,280
the vmip

00:17:15,919 --> 00:17:23,360
which is basically the ip of

00:17:19,280 --> 00:17:26,959
my docker container

00:17:23,360 --> 00:17:30,080
and i can show you that here

00:17:26,959 --> 00:17:32,480
so we need so it needs to know you know

00:17:30,080 --> 00:17:33,600
that this is running here so i'm going

00:17:32,480 --> 00:17:36,320
to

00:17:33,600 --> 00:17:38,480
just create the service and the service

00:17:36,320 --> 00:17:41,600
entry

00:17:38,480 --> 00:17:44,080
and finally uh what i want and this is

00:17:41,600 --> 00:17:46,000
where we start to use blue mesh

00:17:44,080 --> 00:17:47,120
we are going to use like a traffic

00:17:46,000 --> 00:17:49,440
policy

00:17:47,120 --> 00:17:51,039
uh it makes our life easier because i

00:17:49,440 --> 00:17:52,799
could do that directly with this to

00:17:51,039 --> 00:17:55,440
create a virtual service

00:17:52,799 --> 00:17:55,840
and you know destination rules and so on

00:17:55,440 --> 00:17:59,120
but

00:17:55,840 --> 00:18:00,000
uh blue mesh makes that uh easier for me

00:17:59,120 --> 00:18:02,160
to do so so

00:18:00,000 --> 00:18:03,840
i create what we call traffic policy

00:18:02,160 --> 00:18:06,720
where i say whenever request

00:18:03,840 --> 00:18:08,160
coming from the default namespace and

00:18:06,720 --> 00:18:12,559
going to

00:18:08,160 --> 00:18:15,120
um the cluster

00:18:12,559 --> 00:18:15,600
going to the detailed service on cluster

00:18:15,120 --> 00:18:17,200
one

00:18:15,600 --> 00:18:19,679
what i want is that i want to send this

00:18:17,200 --> 00:18:22,640
request to the vm instead

00:18:19,679 --> 00:18:24,080
so the product page will send the the

00:18:22,640 --> 00:18:26,960
request

00:18:24,080 --> 00:18:29,039
to the detailed service on the vm

00:18:26,960 --> 00:18:31,840
because the product page is relating on

00:18:29,039 --> 00:18:34,559
on this link space so i'm just going to

00:18:31,840 --> 00:18:37,600
create this policy here

00:18:34,559 --> 00:18:40,000
and what i want to do as well is that i

00:18:37,600 --> 00:18:40,000
want to

00:18:40,280 --> 00:18:48,960
see uh if i do like a tail minus f

00:18:45,039 --> 00:18:48,960
i want to take a look at the

00:18:49,280 --> 00:18:52,640
access logs here

00:18:53,760 --> 00:18:58,640
so i can see the access logs in

00:18:59,360 --> 00:19:03,440
the different places so here is the the

00:19:01,360 --> 00:19:05,600
details spot on cluster one the details

00:19:03,440 --> 00:19:06,880
on cluster two and the detail is problem

00:19:05,600 --> 00:19:09,440
uh the detail is vm

00:19:06,880 --> 00:19:10,400
so because of the rule i created here i

00:19:09,440 --> 00:19:12,160
should expect

00:19:10,400 --> 00:19:14,240
now the access locks to change here

00:19:12,160 --> 00:19:16,400
right on this place

00:19:14,240 --> 00:19:17,600
so i'm going to just first of all try

00:19:16,400 --> 00:19:22,240
and see

00:19:17,600 --> 00:19:22,240
if everything works well here

00:19:23,440 --> 00:19:30,160
i can still see my details and

00:19:26,880 --> 00:19:33,120
uh you should see here so that's good

00:19:30,160 --> 00:19:36,799
it's going to the vm that's easy i can

00:19:33,120 --> 00:19:39,679
also even go to kelly and i can see

00:19:36,799 --> 00:19:41,280
that uh it's going uh you'll see the

00:19:39,679 --> 00:19:42,880
rating and you see the vm right so you

00:19:41,280 --> 00:19:46,400
see the product page

00:19:42,880 --> 00:19:49,120
is sending traffic to my vm and i can

00:19:46,400 --> 00:19:51,840
also even go to bluemesh and see

00:19:49,120 --> 00:19:53,520
that i have my current policy which says

00:19:51,840 --> 00:19:55,760
when i have workloads here

00:19:53,520 --> 00:19:57,440
in the detail in the default namespace

00:19:55,760 --> 00:20:00,320
that send request to the

00:19:57,440 --> 00:20:01,039
detailed service then everything goes to

00:20:00,320 --> 00:20:03,679
the vm

00:20:01,039 --> 00:20:04,400
so that's the the current state now

00:20:03,679 --> 00:20:08,159
let's say

00:20:04,400 --> 00:20:08,880
i want to start to send some traffic to

00:20:08,159 --> 00:20:11,760
the details

00:20:08,880 --> 00:20:13,039
running on cluster one so that i can

00:20:11,760 --> 00:20:16,640
start to

00:20:13,039 --> 00:20:18,559
seamlessly migrate from my legacy

00:20:16,640 --> 00:20:20,159
environment to my container

00:20:18,559 --> 00:20:21,840
so then i would do something like that

00:20:20,159 --> 00:20:24,720
you see i say i

00:20:21,840 --> 00:20:26,559
i update my traffic policy and the the

00:20:24,720 --> 00:20:29,360
difference here that you see

00:20:26,559 --> 00:20:29,840
i i only send 75 percent of the request

00:20:29,360 --> 00:20:32,640
to

00:20:29,840 --> 00:20:34,559
to the vm because i start to send 25

00:20:32,640 --> 00:20:38,080
percent to

00:20:34,559 --> 00:20:40,159
the service running on the cluster

00:20:38,080 --> 00:20:42,559
so i'm going to update that and here

00:20:40,159 --> 00:20:44,400
again now i should see

00:20:42,559 --> 00:20:46,960
some of the requests going here and some

00:20:44,400 --> 00:20:51,520
of the requests going there right

00:20:46,960 --> 00:20:54,640
so i can go back here you can refresh

00:20:51,520 --> 00:20:58,159
and uh you should see here

00:20:54,640 --> 00:21:01,520
very quickly um some access logs

00:20:58,159 --> 00:21:03,840
uh showing me that you see here and here

00:21:01,520 --> 00:21:06,240
the requests are going now they are

00:21:03,840 --> 00:21:09,280
spread across these two clusters

00:21:06,240 --> 00:21:11,760
and uh in kelly i can also

00:21:09,280 --> 00:21:13,440
see that you see it sends some of the

00:21:11,760 --> 00:21:16,000
requests on the same cluster and the

00:21:13,440 --> 00:21:17,360
details and some of the requests in in

00:21:16,000 --> 00:21:19,600
the vm right

00:21:17,360 --> 00:21:21,760
and and again if i go to blue mesh i see

00:21:19,600 --> 00:21:24,000
that as well right 75 percent

00:21:21,760 --> 00:21:25,039
are configured to go to the vm and 25

00:21:24,000 --> 00:21:28,480
percent

00:21:25,039 --> 00:21:32,159
and go to the details on

00:21:28,480 --> 00:21:34,159
cluster one and now what's uh quite nice

00:21:32,159 --> 00:21:36,720
is that i can also

00:21:34,159 --> 00:21:37,600
you know even like refresh all the stuff

00:21:36,720 --> 00:21:40,080
here

00:21:37,600 --> 00:21:41,760
and i can create a nice policy first of

00:21:40,080 --> 00:21:44,799
all like i can say

00:21:41,760 --> 00:21:45,840
uh i want now to go and switch

00:21:44,799 --> 00:21:49,200
completely to

00:21:45,840 --> 00:21:50,320
uh kubernetes so that now all the

00:21:49,200 --> 00:21:53,919
requests

00:21:50,320 --> 00:21:55,520
will go only here in the clusters they

00:21:53,919 --> 00:21:56,960
are not going in the legacy environment

00:21:55,520 --> 00:22:00,159
any any

00:21:56,960 --> 00:22:03,919
anymore and again i can just like

00:22:00,159 --> 00:22:07,360
refresh that here and

00:22:03,919 --> 00:22:10,559
i should be able to see my access logs

00:22:07,360 --> 00:22:11,039
uh moving just there so just proving

00:22:10,559 --> 00:22:13,360
that

00:22:11,039 --> 00:22:15,120
uh yeah everything goes on the on the

00:22:13,360 --> 00:22:16,400
right place like i was expecting the

00:22:15,120 --> 00:22:19,760
migration is done

00:22:16,400 --> 00:22:22,320
now from my legacy environment to

00:22:19,760 --> 00:22:24,400
kubernetes i can see that here as well

00:22:22,320 --> 00:22:25,760
all the requests go now to the details

00:22:24,400 --> 00:22:26,799
here they are not going to the vm

00:22:25,760 --> 00:22:29,840
anymore

00:22:26,799 --> 00:22:33,200
and i can um show you like a

00:22:29,840 --> 00:22:33,760
a small bonus that uh and that's also

00:22:33,200 --> 00:22:35,520
another

00:22:33,760 --> 00:22:38,080
very nice things you get with blue mesh

00:22:35,520 --> 00:22:41,200
is that it makes your life a lot easier

00:22:38,080 --> 00:22:43,039
when you want to do like uh you know

00:22:41,200 --> 00:22:44,480
cross cluster communication i could have

00:22:43,039 --> 00:22:47,200
done like uh

00:22:44,480 --> 00:22:49,280
um an example where i would configure a

00:22:47,200 --> 00:22:50,799
failover if i cannot switch locally i go

00:22:49,280 --> 00:22:53,679
to the other cluster

00:22:50,799 --> 00:22:54,640
um but here just to make it simpler what

00:22:53,679 --> 00:22:58,159
i did is that i

00:22:54,640 --> 00:23:00,799
create a traffic policy where

00:22:58,159 --> 00:23:02,480
i would say fifty percent go to the vm

00:23:00,799 --> 00:23:05,440
and twenty five percent go

00:23:02,480 --> 00:23:07,679
to uh cluster one and twenty five

00:23:05,440 --> 00:23:08,960
percent go to cluster two so now i

00:23:07,679 --> 00:23:11,919
spread my request

00:23:08,960 --> 00:23:12,880
not only between my vms and my pods on

00:23:11,919 --> 00:23:15,760
cluster 1

00:23:12,880 --> 00:23:17,679
but i can spread my requests between my

00:23:15,760 --> 00:23:19,600
vm my port and booster one my portal

00:23:17,679 --> 00:23:22,559
cluster 2 and everything

00:23:19,600 --> 00:23:25,120
as you can see very easily by you know

00:23:22,559 --> 00:23:26,080
just creating like a traffic policy like

00:23:25,120 --> 00:23:30,000
that

00:23:26,080 --> 00:23:34,080
so i just go there i apply this

00:23:30,000 --> 00:23:37,440
and now i can refresh

00:23:34,080 --> 00:23:41,279
my app like click many times here um

00:23:37,440 --> 00:23:43,600
again i can see the spread is down here

00:23:41,279 --> 00:23:44,400
and you can see the logs moving

00:23:43,600 --> 00:23:47,520
everywhere

00:23:44,400 --> 00:23:50,640
and you can see you know uh

00:23:47,520 --> 00:23:53,679
caddy will also show you like

00:23:50,640 --> 00:23:57,440
a nice uh picture where um

00:23:53,679 --> 00:23:59,360
you you will see um all the requests

00:23:57,440 --> 00:24:02,320
going you know across

00:23:59,360 --> 00:24:04,480
all these different uh environments and

00:24:02,320 --> 00:24:07,279
and even like uh

00:24:04,480 --> 00:24:08,880
depending on how long we wait for the

00:24:07,279 --> 00:24:12,960
for the matrix but

00:24:08,880 --> 00:24:16,000
we will also see uh even like uh

00:24:12,960 --> 00:24:17,360
the the matrix showing that uh this is

00:24:16,000 --> 00:24:19,679
going through

00:24:17,360 --> 00:24:21,600
you know all the clusters and normally

00:24:19,679 --> 00:24:25,200
you should have like a

00:24:21,600 --> 00:24:26,799
cluster two uh box uh displayed

00:24:25,200 --> 00:24:30,240
somewhere here

00:24:26,799 --> 00:24:30,240
um it's just that

00:24:30,880 --> 00:24:36,960
it's not showing right now so let me

00:24:33,600 --> 00:24:36,960
refresh a little bit more

00:24:37,520 --> 00:24:40,720
and we we should see like the details

00:24:39,360 --> 00:24:44,000
here the the

00:24:40,720 --> 00:24:45,279
details running in the vm but uh also

00:24:44,000 --> 00:24:49,840
the

00:24:45,279 --> 00:24:51,360
the details uh from the uh

00:24:49,840 --> 00:24:53,440
from the other cluster like you see here

00:24:51,360 --> 00:24:54,400
it just like took a bit of time to

00:24:53,440 --> 00:24:56,400
refresh

00:24:54,400 --> 00:24:58,400
but you see now i also see like the

00:24:56,400 --> 00:25:01,440
request going to

00:24:58,400 --> 00:25:03,039
the other cluster and that's possible

00:25:01,440 --> 00:25:03,840
because we consolidate all the matrix

00:25:03,039 --> 00:25:06,880
with blue mesh

00:25:03,840 --> 00:25:09,200
uh as well and we can present them

00:25:06,880 --> 00:25:10,960
today you consume them the way you want

00:25:09,200 --> 00:25:12,080
like in kelly but tomorrow it will be

00:25:10,960 --> 00:25:14,799
even like

00:25:12,080 --> 00:25:15,919
integrated in the in the in the blue

00:25:14,799 --> 00:25:18,159
mesh ui

00:25:15,919 --> 00:25:20,000
so as i said you know i i use blue mesh

00:25:18,159 --> 00:25:22,480
in uh in the

00:25:20,000 --> 00:25:24,159
in the demo to make my life easier for

00:25:22,480 --> 00:25:25,520
managing the traffic but you can also

00:25:24,159 --> 00:25:27,279
use it like

00:25:25,520 --> 00:25:28,880
for discovery so i discover all the

00:25:27,279 --> 00:25:30,159
workflows on all the clusters

00:25:28,880 --> 00:25:31,760
instead of having each cluster

00:25:30,159 --> 00:25:32,960
discovering the workloads on all the

00:25:31,760 --> 00:25:34,720
other clusters

00:25:32,960 --> 00:25:36,000
this discovery is done by blue mesh it's

00:25:34,720 --> 00:25:38,960
more secure

00:25:36,000 --> 00:25:40,720
and it just like make the other clusters

00:25:38,960 --> 00:25:43,679
aware of that

00:25:40,720 --> 00:25:44,799
you have the failover i spoke about

00:25:43,679 --> 00:25:47,919
before

00:25:44,799 --> 00:25:50,240
you have the ability to have like um

00:25:47,919 --> 00:25:51,360
consolidation of the matrix like i said

00:25:50,240 --> 00:25:52,720
but also

00:25:51,360 --> 00:25:56,559
being able to do that with the access

00:25:52,720 --> 00:25:58,400
logs and being able to um

00:25:56,559 --> 00:25:59,919
have like a global airbag where you can

00:25:58,400 --> 00:26:02,320
define who can do what

00:25:59,919 --> 00:26:03,919
across all these different clusters uh

00:26:02,320 --> 00:26:05,760
we have like a

00:26:03,919 --> 00:26:07,679
very nice support of web assembly there

00:26:05,760 --> 00:26:09,679
as well so if you are interested you

00:26:07,679 --> 00:26:11,440
know you can go on our website and

00:26:09,679 --> 00:26:14,080
or on our slack channel and you can you

00:26:11,440 --> 00:26:16,400
can ping us so thank you very much for

00:26:14,080 --> 00:26:17,120
attending this session i i hope it was

00:26:16,400 --> 00:26:19,760
uh

00:26:17,120 --> 00:26:20,480
useful and and i think we we now have

00:26:19,760 --> 00:26:24,720
some

00:26:20,480 --> 00:26:24,720

YouTube URL: https://www.youtube.com/watch?v=m8-LqJSeAQo


