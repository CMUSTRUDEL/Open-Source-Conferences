Title: Virtual Machines and Service Mesh in the Enterprise: 5 Things You Need to Know - Petr McAllister
Publication date: 2021-05-05
Playlist: ServiceMeshCon EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Virtual Machines and Service Mesh in the Enterprise: 5 Things You Need to Know - Petr McAllister, Tetrate

With VM onboarding moving to beta in Istio 1.9, integrating non-Kubernetes workloads into the mesh is undoubtedly within reach for leading-edge service mesh practitioners. But, the full story is not so simple for enterprises looking to bring their traditional apps into the service mesh fold. What if your VMs and K8s clusters are in different clouds? What if there's a load balancer between them? If your cloud provider only provides a fully-qualified domain name for K8s API endpoints, how do you preserve the certificates?  In this talk, we'll cover the top five issues we see enterprises face as they move their non-K8s workloads into the mesh and how they're being solved at the top service mesh shops we work with.
Captions: 
	00:00:00,080 --> 00:00:03,120
welcome everyone welcome to today's

00:00:02,480 --> 00:00:04,960
sessions

00:00:03,120 --> 00:00:06,240
a session about virtual machines and

00:00:04,960 --> 00:00:09,519
service mesh

00:00:06,240 --> 00:00:11,759
um service mesh in enterprise

00:00:09,519 --> 00:00:12,559
uh feed will provide you much more than

00:00:11,759 --> 00:00:15,519
five things

00:00:12,559 --> 00:00:16,960
uh you need to know but we hope you can

00:00:15,519 --> 00:00:18,640
pick up five things that are important

00:00:16,960 --> 00:00:21,840
for your environment

00:00:18,640 --> 00:00:24,560
and your implementation of service mesh

00:00:21,840 --> 00:00:25,760
and your application and take them and

00:00:24,560 --> 00:00:29,439
implement

00:00:25,760 --> 00:00:30,240
on in your architecture my name is peter

00:00:29,439 --> 00:00:33,440
mcallister

00:00:30,240 --> 00:00:34,640
i work for cpr8 if you don't know

00:00:33,440 --> 00:00:37,920
iterate is a

00:00:34,640 --> 00:00:41,280
leader in a service mesh space we

00:00:37,920 --> 00:00:42,960
provide a platform to run your service

00:00:41,280 --> 00:00:47,120
mesh and multi-cluster

00:00:42,960 --> 00:00:50,559
uh enterprise environment

00:00:47,120 --> 00:00:54,399
in this session we will cover first how

00:00:50,559 --> 00:00:58,079
our vm are joining service mesh

00:00:54,399 --> 00:01:00,160
what concepts we use what architectures

00:00:58,079 --> 00:01:01,840
we see in our

00:01:00,160 --> 00:01:03,359
enterprise environments and how we

00:01:01,840 --> 00:01:04,960
arrest them and

00:01:03,359 --> 00:01:07,360
at the end we also want to go through

00:01:04,960 --> 00:01:10,640
the demo to see

00:01:07,360 --> 00:01:14,159
how vm is onboarded

00:01:10,640 --> 00:01:16,000
and how application vm works after it's

00:01:14,159 --> 00:01:18,240
on board

00:01:16,000 --> 00:01:19,040
so let's spend a little bit of time just

00:01:18,240 --> 00:01:21,520
discussing

00:01:19,040 --> 00:01:24,080
our basic concepts before actual

00:01:21,520 --> 00:01:24,080
experience

00:01:25,360 --> 00:01:28,400
so everyone starts with the question why

00:01:27,920 --> 00:01:31,759
why

00:01:28,400 --> 00:01:34,560
would we add vm to

00:01:31,759 --> 00:01:35,840
a service measure and hopefully if

00:01:34,560 --> 00:01:38,400
you're in this session you already

00:01:35,840 --> 00:01:40,880
understand benefits of service mesh

00:01:38,400 --> 00:01:41,600
i will touch on them a little bit later

00:01:40,880 --> 00:01:44,479
um but

00:01:41,600 --> 00:01:45,680
in general mostly people who is asking

00:01:44,479 --> 00:01:48,720
this question they already

00:01:45,680 --> 00:01:51,600
know why they need service measure

00:01:48,720 --> 00:01:52,640
so why you need vm in the service mesh

00:01:51,600 --> 00:01:56,719
it's the next question

00:01:52,640 --> 00:01:58,479
and answer to it is mostly because

00:01:56,719 --> 00:02:00,000
you may have some traditional

00:01:58,479 --> 00:02:02,799
application

00:02:00,000 --> 00:02:02,799
in monolithic

00:02:03,439 --> 00:02:10,080
form factor and you want to put it

00:02:07,840 --> 00:02:11,680
microservices but it's work that cannot

00:02:10,080 --> 00:02:15,280
be done in one day

00:02:11,680 --> 00:02:16,160
it requires multiple uh months or maybe

00:02:15,280 --> 00:02:19,400
even years

00:02:16,160 --> 00:02:22,480
to migrate whole applications so and

00:02:19,400 --> 00:02:24,959
microservices idea is to

00:02:22,480 --> 00:02:26,800
start small and extend so you start with

00:02:24,959 --> 00:02:27,440
future research running and kubernetes

00:02:26,800 --> 00:02:29,200
ports

00:02:27,440 --> 00:02:31,840
and the rest of your applications served

00:02:29,200 --> 00:02:32,560
by vm or you may have some services that

00:02:31,840 --> 00:02:35,200
run

00:02:32,560 --> 00:02:36,080
in kubernetes space and the same time in

00:02:35,200 --> 00:02:38,959
vms so

00:02:36,080 --> 00:02:40,959
for load balancing and failover and

00:02:38,959 --> 00:02:42,879
other reasons you may have

00:02:40,959 --> 00:02:45,680
two different form factors running the

00:02:42,879 --> 00:02:45,680
same application

00:02:46,720 --> 00:02:50,720
for service mesh advantage of course you

00:02:50,000 --> 00:02:53,440
can just

00:02:50,720 --> 00:02:54,640
run these two instances independently

00:02:53,440 --> 00:02:57,840
and use

00:02:54,640 --> 00:03:00,720
load balancers but

00:02:57,840 --> 00:03:01,040
question comes what if i want to benefit

00:03:00,720 --> 00:03:04,400
for

00:03:01,040 --> 00:03:06,000
from service mesh concepts and first of

00:03:04,400 --> 00:03:07,599
all of course security

00:03:06,000 --> 00:03:11,360
so encryption of the traffic you don't

00:03:07,599 --> 00:03:13,760
need any extra vpn solutions to

00:03:11,360 --> 00:03:14,720
tunnel your traffic between ports and

00:03:13,760 --> 00:03:17,200
vms

00:03:14,720 --> 00:03:18,640
you also can identify requests if

00:03:17,200 --> 00:03:21,840
they're coming from a

00:03:18,640 --> 00:03:25,200
valid source and respond to them only if

00:03:21,840 --> 00:03:29,120
they validated you can also

00:03:25,200 --> 00:03:30,000
get different rules around your traffic

00:03:29,120 --> 00:03:34,000
patterns

00:03:30,000 --> 00:03:37,200
that is important and finally

00:03:34,000 --> 00:03:40,239
for your troubleshooting and

00:03:37,200 --> 00:03:43,200
analyze an analysis of your performance

00:03:40,239 --> 00:03:43,920
you also need to have one single picture

00:03:43,200 --> 00:03:46,480
of

00:03:43,920 --> 00:03:47,080
our application doesn't matter if it

00:03:46,480 --> 00:03:51,120
runs in

00:03:47,080 --> 00:03:55,519
microservices or vm up

00:03:51,120 --> 00:03:56,239
form factor how we look at it in terms

00:03:55,519 --> 00:04:00,000
of

00:03:56,239 --> 00:04:03,599
technologies so we trying to look at vm

00:04:00,000 --> 00:04:07,120
as it's another port meaning you have

00:04:03,599 --> 00:04:10,560
a vm that runs application and it runs

00:04:07,120 --> 00:04:12,400
proxy and traffic

00:04:10,560 --> 00:04:14,319
all traffic comes to proxy and

00:04:12,400 --> 00:04:17,600
application and proxy

00:04:14,319 --> 00:04:18,320
are only communicate using glue back

00:04:17,600 --> 00:04:21,519
address

00:04:18,320 --> 00:04:24,800
so application in theory shouldn't be

00:04:21,519 --> 00:04:27,280
exposed to the external world

00:04:24,800 --> 00:04:28,560
it's a security requirement and there's

00:04:27,280 --> 00:04:30,880
a newspaper

00:04:28,560 --> 00:04:31,600
actually written by one of my different

00:04:30,880 --> 00:04:34,720
colleagues

00:04:31,600 --> 00:04:38,160
and together with other

00:04:34,720 --> 00:04:39,360
members of a community that covers these

00:04:38,160 --> 00:04:42,400
concepts of

00:04:39,360 --> 00:04:45,600
securing application behind proxy

00:04:42,400 --> 00:04:47,520
and if you think of port you never reach

00:04:45,600 --> 00:04:49,440
application directly you always go

00:04:47,520 --> 00:04:51,840
through proxy if

00:04:49,440 --> 00:04:54,160
our application is onboarded to service

00:04:51,840 --> 00:04:54,160
measure

00:04:55,199 --> 00:04:59,360
at the same time even if we treat it as

00:04:57,520 --> 00:05:00,400
a port we can't completely treat it as a

00:04:59,360 --> 00:05:03,600
pod because

00:05:00,400 --> 00:05:05,840
technically on next level

00:05:03,600 --> 00:05:07,360
uh you cannot run vm inside of

00:05:05,840 --> 00:05:10,479
kubernetes you run it on

00:05:07,360 --> 00:05:11,360
a separate piece of infrastructure so in

00:05:10,479 --> 00:05:13,840
play comes

00:05:11,360 --> 00:05:14,479
all things you wouldn't worry about in

00:05:13,840 --> 00:05:16,960
one

00:05:14,479 --> 00:05:20,320
kubernetes cluster such things as a

00:05:16,960 --> 00:05:23,919
network and firewalling and routing

00:05:20,320 --> 00:05:27,680
additional to it you think about the

00:05:23,919 --> 00:05:27,680
application um

00:05:28,960 --> 00:05:35,039
running in the same name space

00:05:32,160 --> 00:05:36,960
so you cannot say oh my vm is completely

00:05:35,039 --> 00:05:39,039
independent i can

00:05:36,960 --> 00:05:40,240
have it to be a member of multiple

00:05:39,039 --> 00:05:42,479
namespaces

00:05:40,240 --> 00:05:43,600
namespaces it's very interesting concept

00:05:42,479 --> 00:05:47,520
in kubernetes and

00:05:43,600 --> 00:05:50,560
it limits uh and specifies rules

00:05:47,520 --> 00:05:52,880
around your workload if you

00:05:50,560 --> 00:05:55,520
get in conflict between these workload

00:05:52,880 --> 00:05:57,919
specifications from different namespaces

00:05:55,520 --> 00:05:58,639
it causes bigger problems that you want

00:05:57,919 --> 00:06:02,800
to avoid

00:05:58,639 --> 00:06:05,600
at all possible cost

00:06:02,800 --> 00:06:06,080
additionally in terms of detecting where

00:06:05,600 --> 00:06:08,080
application

00:06:06,080 --> 00:06:09,520
traffic is going or what application

00:06:08,080 --> 00:06:11,280
traffic belongs to

00:06:09,520 --> 00:06:15,120
it also needs to have namespace

00:06:11,280 --> 00:06:15,120
attribute or namespace label

00:06:16,479 --> 00:06:22,479
moving along

00:06:20,160 --> 00:06:23,440
so what we think in real life it's a

00:06:22,479 --> 00:06:25,440
multiple

00:06:23,440 --> 00:06:27,440
uh different combinations and

00:06:25,440 --> 00:06:29,680
architecture so

00:06:27,440 --> 00:06:30,560
okay your vm we discussed already around

00:06:29,680 --> 00:06:34,000
some different

00:06:30,560 --> 00:06:37,600
um in in different

00:06:34,000 --> 00:06:39,840
um what form right so it's not part of

00:06:37,600 --> 00:06:43,360
your kubernetes cluster

00:06:39,840 --> 00:06:45,919
but what effects behind firewall

00:06:43,360 --> 00:06:47,120
what if it's behind the load balancer

00:06:45,919 --> 00:06:50,000
and you're addressing

00:06:47,120 --> 00:06:52,400
vm using ip address but what if it's

00:06:50,000 --> 00:06:56,000
behind

00:06:52,400 --> 00:06:56,800
aws and an aws load balancer they don't

00:06:56,000 --> 00:07:00,160
provide you

00:06:56,800 --> 00:07:02,080
end point ap they just publish fqdm

00:07:00,160 --> 00:07:04,960
so now you have a qdm different than

00:07:02,080 --> 00:07:07,280
fqdn of your application running on vm

00:07:04,960 --> 00:07:09,360
and question is how you're going to

00:07:07,280 --> 00:07:12,160
authenticate it because

00:07:09,360 --> 00:07:12,479
certificate of vm doesn't match uh fqdn

00:07:12,160 --> 00:07:16,080
of

00:07:12,479 --> 00:07:19,360
aws so what if you want to run

00:07:16,080 --> 00:07:23,199
multiple applications on vm

00:07:19,360 --> 00:07:23,199
how proxy will uh

00:07:23,680 --> 00:07:27,919
find out traffic belongs to application

00:07:27,039 --> 00:07:30,479
number one or

00:07:27,919 --> 00:07:31,599
number two how we collect metrics around

00:07:30,479 --> 00:07:34,160
this data

00:07:31,599 --> 00:07:35,680
how we provide security around these

00:07:34,160 --> 00:07:37,599
applications that we want to keep

00:07:35,680 --> 00:07:39,840
separately

00:07:37,599 --> 00:07:42,479
so all these different scenarios and

00:07:39,840 --> 00:07:45,280
they come in very very different shapes

00:07:42,479 --> 00:07:47,440
there's no single answer how would you

00:07:45,280 --> 00:07:49,360
add vm to your service mesh it depends

00:07:47,440 --> 00:07:52,319
how your service meshes build

00:07:49,360 --> 00:07:54,160
how your vms are hosted what is the

00:07:52,319 --> 00:07:56,479
connection between them

00:07:54,160 --> 00:07:58,240
but whatever scenario will look back to

00:07:56,479 --> 00:08:00,400
my previous comment

00:07:58,240 --> 00:08:02,319
vm has to belong to name space and

00:08:00,400 --> 00:08:06,000
computer matrix it cannot be

00:08:02,319 --> 00:08:06,000
shared between different name spaces

00:08:07,599 --> 00:08:11,039
so question comes okay what i need to do

00:08:10,400 --> 00:08:14,240
uh

00:08:11,039 --> 00:08:15,759
to onboard vm so you have to create

00:08:14,240 --> 00:08:18,560
three objects

00:08:15,759 --> 00:08:21,039
object number one is for quote entry and

00:08:18,560 --> 00:08:24,240
if you're not familiar workload entry

00:08:21,039 --> 00:08:27,680
provides you description of

00:08:24,240 --> 00:08:29,120
vm so ip address of vm label of vm and

00:08:27,680 --> 00:08:30,960
all other stuff

00:08:29,120 --> 00:08:32,560
workload entry is object that we

00:08:30,960 --> 00:08:35,360
actually use

00:08:32,560 --> 00:08:37,440
to bootstrap vm so data from this object

00:08:35,360 --> 00:08:39,120
together with certificates together with

00:08:37,440 --> 00:08:41,519
a bigger mesh config

00:08:39,120 --> 00:08:42,399
gets transferred to vm vm gets

00:08:41,519 --> 00:08:46,880
bootstrapped

00:08:42,399 --> 00:08:50,640
and that connects back uh to eq

00:08:46,880 --> 00:08:53,680
id and gets authorized there

00:08:50,640 --> 00:08:54,640
so then certificate exchange happens and

00:08:53,680 --> 00:08:58,000
vm becomes

00:08:54,640 --> 00:09:00,320
part of your service mission

00:08:58,000 --> 00:09:01,279
you need two more objects here one is

00:09:00,320 --> 00:09:03,680
sidecar

00:09:01,279 --> 00:09:05,279
so one in the middle and sidecar

00:09:03,680 --> 00:09:08,560
basically

00:09:05,279 --> 00:09:11,360
defines uh

00:09:08,560 --> 00:09:12,320
your application and your sidecar

00:09:11,360 --> 00:09:14,959
communicate

00:09:12,320 --> 00:09:15,920
right so what ports are they listening

00:09:14,959 --> 00:09:19,040
to reports

00:09:15,920 --> 00:09:21,760
they sending traffic to how they talk to

00:09:19,040 --> 00:09:26,480
each other on what black addresses

00:09:21,760 --> 00:09:29,839
what namespaces can call with

00:09:26,480 --> 00:09:32,000
instance visual code both namespaces

00:09:29,839 --> 00:09:34,399
visual code can reach out

00:09:32,000 --> 00:09:36,720
so all these different things are

00:09:34,399 --> 00:09:38,640
specified in sitecar

00:09:36,720 --> 00:09:40,560
and last thing you need to create you

00:09:38,640 --> 00:09:41,120
need to create service entry and service

00:09:40,560 --> 00:09:43,920
entry

00:09:41,120 --> 00:09:44,880
uh tells kubernetes ports where they can

00:09:43,920 --> 00:09:48,160
find

00:09:44,880 --> 00:09:51,200
your vm or

00:09:48,160 --> 00:09:54,000
workload endpoint so it

00:09:51,200 --> 00:09:57,440
basically has pointer it has a service

00:09:54,000 --> 00:09:59,920
name and it has point back to your code

00:09:57,440 --> 00:10:01,040
site car and service entry can be

00:09:59,920 --> 00:10:04,880
replaced

00:10:01,040 --> 00:10:06,480
uh modify changed at any moment

00:10:04,880 --> 00:10:08,800
and all these changes immediately

00:10:06,480 --> 00:10:11,839
applied or almost instantly applied

00:10:08,800 --> 00:10:13,839
to your kubernetes infrastructure this

00:10:11,839 --> 00:10:15,440
workload entry a little bit different as

00:10:13,839 --> 00:10:18,560
i mentioned in the beginning

00:10:15,440 --> 00:10:20,959
all data it's part of a data set that

00:10:18,560 --> 00:10:23,760
getting transferred to vm for bootstrap

00:10:20,959 --> 00:10:25,600
so if you change your workload entry

00:10:23,760 --> 00:10:27,920
the most common case you're adding

00:10:25,600 --> 00:10:31,760
additional labels or

00:10:27,920 --> 00:10:35,200
you're changing ip address of your vm

00:10:31,760 --> 00:10:37,519
you need to take this file and put it on

00:10:35,200 --> 00:10:40,399
vm and reboot strap it

00:10:37,519 --> 00:10:41,760
so workload entry changes are really

00:10:40,399 --> 00:10:45,200
costly comparing to

00:10:41,760 --> 00:10:46,959
other two so last thing before gemma i

00:10:45,200 --> 00:10:51,040
want to cover i want to cover

00:10:46,959 --> 00:10:52,160
uh how vm and port communicate to each

00:10:51,040 --> 00:10:55,360
other

00:10:52,160 --> 00:10:56,880
and we totally rely here on mesh network

00:10:55,360 --> 00:10:59,440
configuration

00:10:56,880 --> 00:11:02,160
machine work configuration uh specifies

00:10:59,440 --> 00:11:05,120
networks for your ports and your vms

00:11:02,160 --> 00:11:08,560
and you can have gateway attached to

00:11:05,120 --> 00:11:11,040
these ports and vms or you may have no

00:11:08,560 --> 00:11:13,279
gateway attached to it and you can see

00:11:11,040 --> 00:11:16,640
basically all four combinations here so

00:11:13,279 --> 00:11:19,040
if there is no uh

00:11:16,640 --> 00:11:20,000
gateway attached to vm or kubernetes

00:11:19,040 --> 00:11:23,360
port network

00:11:20,000 --> 00:11:25,519
communication going direct so your uh

00:11:23,360 --> 00:11:28,079
workload calls is your proxy is your

00:11:25,519 --> 00:11:31,920
proxy calls uh destination actual

00:11:28,079 --> 00:11:36,560
easter proxy and

00:11:31,920 --> 00:11:40,000
reaches destination workload if you have

00:11:36,560 --> 00:11:44,880
gateway defined for vm

00:11:40,000 --> 00:11:44,880
what happens here kubernetes um

00:11:45,200 --> 00:11:51,760
kubernetes for code reach out to

00:11:48,800 --> 00:11:52,959
a gateway and then gateway childs to vm

00:11:51,760 --> 00:11:57,440
and opposite side

00:11:52,959 --> 00:12:00,000
if um gateway is defined for

00:11:57,440 --> 00:12:01,440
uh kubernetes cluster vm reaches out

00:12:00,000 --> 00:12:04,320
gateway and then

00:12:01,440 --> 00:12:05,839
uh gateway roads traffic to destination

00:12:04,320 --> 00:12:08,480
kubernetes ports

00:12:05,839 --> 00:12:09,440
and of course if we have gateway defined

00:12:08,480 --> 00:12:13,120
on both ends

00:12:09,440 --> 00:12:15,600
we're going to throw two gateways

00:12:13,120 --> 00:12:17,040
it's important to understand just for

00:12:15,600 --> 00:12:19,680
your traffic pattern

00:12:17,040 --> 00:12:20,959
traffic troubleshooting i know in some

00:12:19,680 --> 00:12:22,880
use cases

00:12:20,959 --> 00:12:24,959
are we really really looking at

00:12:22,880 --> 00:12:28,240
decreasing decreasing latency so

00:12:24,959 --> 00:12:31,279
having extra hopes differently

00:12:28,240 --> 00:12:33,680
may be concerned for our performance

00:12:31,279 --> 00:12:35,680
so i just wanted to mention it so you uh

00:12:33,680 --> 00:12:37,519
have better idea you understand how it

00:12:35,680 --> 00:12:40,800
works in a

00:12:37,519 --> 00:12:43,519
bigger picture so let's move to the demo

00:12:40,800 --> 00:12:46,079
so first uh just quick coverage what we

00:12:43,519 --> 00:12:48,959
will do in edm and how it's set up

00:12:46,079 --> 00:12:50,959
so if you worked with easter before you

00:12:48,959 --> 00:12:54,240
know one of the applications that

00:12:50,959 --> 00:12:54,639
heavily used is booking form so booking

00:12:54,240 --> 00:12:57,760
for

00:12:54,639 --> 00:13:00,560
application is already set up

00:12:57,760 --> 00:13:01,519
and i already have vms that runs ratings

00:13:00,560 --> 00:13:05,440
and details

00:13:01,519 --> 00:13:07,839
on the same vm we will look at the end

00:13:05,440 --> 00:13:08,639
how it works for the pre-established vm

00:13:07,839 --> 00:13:10,480
but

00:13:08,639 --> 00:13:12,320
most important thing we want to show you

00:13:10,480 --> 00:13:14,320
how to import uvm

00:13:12,320 --> 00:13:15,519
so we already pre-created service entry

00:13:14,320 --> 00:13:18,079
inside car

00:13:15,519 --> 00:13:19,519
in kubernetes so we will not really uh

00:13:18,079 --> 00:13:23,440
change or touch them

00:13:19,519 --> 00:13:25,839
so what we will do here we will create a

00:13:23,440 --> 00:13:27,519
workload entry for new vms that also

00:13:25,839 --> 00:13:30,720
already pre-provisioned

00:13:27,519 --> 00:13:33,279
meaning it's instance created on gcp

00:13:30,720 --> 00:13:34,560
uh in my case it can be a ws it can be

00:13:33,279 --> 00:13:38,880
anything

00:13:34,560 --> 00:13:41,040
and i have five addresses of usb am

00:13:38,880 --> 00:13:42,560
and also inside of the docker is

00:13:41,040 --> 00:13:45,920
installed

00:13:42,560 --> 00:13:48,880
we can today we can run hto proxy on vm

00:13:45,920 --> 00:13:49,760
as a docker container and that's binary

00:13:48,880 --> 00:13:52,959
for

00:13:49,760 --> 00:13:56,480
this specific gema we use container but

00:13:52,959 --> 00:13:57,199
really it's up to your decision as a

00:13:56,480 --> 00:14:01,120
customer

00:13:57,199 --> 00:14:03,519
what you prefer container or binary

00:14:01,120 --> 00:14:04,160
uh during demo we will create workload

00:14:03,519 --> 00:14:06,959
entry

00:14:04,160 --> 00:14:08,000
as i mentioned we use tctl titrate

00:14:06,959 --> 00:14:11,839
service bridge

00:14:08,000 --> 00:14:14,639
utility to bootstrap vm uh we will use

00:14:11,839 --> 00:14:16,079
ssh direct connection to bootstrap it

00:14:14,639 --> 00:14:18,720
but you have also option

00:14:16,079 --> 00:14:19,600
to do offloading so export your

00:14:18,720 --> 00:14:22,959
configuration

00:14:19,600 --> 00:14:26,160
and import it on your vm transfer to

00:14:22,959 --> 00:14:26,160
your vm and upload there

00:14:26,639 --> 00:14:31,440
we will show how proxy is installed and

00:14:29,920 --> 00:14:33,360
configured and run

00:14:31,440 --> 00:14:35,440
we will confirm that rating application

00:14:33,360 --> 00:14:36,880
response ratings application response to

00:14:35,440 --> 00:14:40,720
your request

00:14:36,880 --> 00:14:45,279
and also confirm connection

00:14:40,720 --> 00:14:48,959
back from vm to product page

00:14:45,279 --> 00:14:49,839
or show vmware in a tsb iterator with

00:14:48,959 --> 00:14:54,240
bridge

00:14:49,839 --> 00:14:56,639
ui interface and have a quick

00:14:54,240 --> 00:14:58,160
click on existing vm that runs already

00:14:56,639 --> 00:15:02,160
two different services

00:14:58,160 --> 00:15:05,360
ratings and details and

00:15:02,160 --> 00:15:06,160
let's start demo so here you have you

00:15:05,360 --> 00:15:10,000
see

00:15:06,160 --> 00:15:13,360
a usb usb

00:15:10,000 --> 00:15:15,279
interface so right now we

00:15:13,360 --> 00:15:16,560
have uh booking for application with all

00:15:15,279 --> 00:15:18,240
services running

00:15:16,560 --> 00:15:20,399
here is ratings that runs as a

00:15:18,240 --> 00:15:23,040
kubernetes i service

00:15:20,399 --> 00:15:24,320
and it's v1 so what we're going to do

00:15:23,040 --> 00:15:26,639
we're going to add

00:15:24,320 --> 00:15:27,600
another service that it's going to be v2

00:15:26,639 --> 00:15:29,440
but first

00:15:27,600 --> 00:15:32,399
let's look what we have for it in this

00:15:29,440 --> 00:15:34,560
cluster so we have four called entry

00:15:32,399 --> 00:15:38,160
and we have two side cars one is the

00:15:34,560 --> 00:15:41,519
full sidecar and one created for vms

00:15:38,160 --> 00:15:44,240
so also i pre-created for code entry

00:15:41,519 --> 00:15:44,720
uh you can see multiple labels here and

00:15:44,240 --> 00:15:47,279
also

00:15:44,720 --> 00:15:48,320
ip address that we're confirming on our

00:15:47,279 --> 00:15:51,360
right window

00:15:48,320 --> 00:15:52,399
ip address of vm external address and

00:15:51,360 --> 00:15:55,279
also internal

00:15:52,399 --> 00:15:56,079
so we need to internal address so vm

00:15:55,279 --> 00:15:58,160
uses it

00:15:56,079 --> 00:15:59,839
because it's not aware of its uh

00:15:58,160 --> 00:16:03,680
internet address

00:15:59,839 --> 00:16:06,399
and also we specify a external address

00:16:03,680 --> 00:16:09,600
twice because we're going to use it for

00:16:06,399 --> 00:16:10,240
uh bootstrapping2 and now you're running

00:16:09,600 --> 00:16:14,240
command

00:16:10,240 --> 00:16:16,160
to uh sorry let's apply this for code

00:16:14,240 --> 00:16:19,519
entry

00:16:16,160 --> 00:16:19,519
so it's successfully applied

00:16:19,839 --> 00:16:26,079
next thing we will do is

00:16:23,279 --> 00:16:28,000
to confirm it it's applied yeah seven

00:16:26,079 --> 00:16:30,160
seconds since it's created and as i

00:16:28,000 --> 00:16:31,759
record as i said we have already it's

00:16:30,160 --> 00:16:33,519
four vms that are already running and

00:16:31,759 --> 00:16:35,279
running details and writing similar

00:16:33,519 --> 00:16:37,920
that's called details list two services

00:16:35,279 --> 00:16:37,920
running on it

00:16:38,560 --> 00:16:44,000
so connecting to vm

00:16:41,759 --> 00:16:45,199
you can see that if we run docker

00:16:44,000 --> 00:16:48,639
command

00:16:45,199 --> 00:16:52,639
there is no containers currently running

00:16:48,639 --> 00:16:56,560
switch back to kubernetes cluster

00:16:52,639 --> 00:16:58,959
and basically

00:16:56,560 --> 00:16:58,959
around

00:17:00,240 --> 00:17:07,199
command to bootstrap vm so it takes

00:17:03,600 --> 00:17:10,480
over quote entry and it

00:17:07,199 --> 00:17:11,120
transfers all files to vm and it starts

00:17:10,480 --> 00:17:12,799
for option

00:17:11,120 --> 00:17:14,720
and you can see now we have proxy

00:17:12,799 --> 00:17:19,839
running here

00:17:14,720 --> 00:17:19,839
for five seconds

00:17:22,640 --> 00:17:26,000
and that's successful you can see analog

00:17:24,640 --> 00:17:28,880
files it's successful

00:17:26,000 --> 00:17:31,600
successfully connected back to

00:17:28,880 --> 00:17:36,000
kubernetes cluster and running already

00:17:31,600 --> 00:17:36,000
in a ready mod let's start ratings

00:17:37,039 --> 00:17:44,080
rating started okay

00:17:41,280 --> 00:17:46,080
so we have now proxy in ratings

00:17:44,080 --> 00:17:48,160
containers running on vm

00:17:46,080 --> 00:17:49,280
and if you look there's a number of

00:17:48,160 --> 00:17:52,640
requests coming from

00:17:49,280 --> 00:17:54,640
my traffic generator

00:17:52,640 --> 00:17:55,760
uh let's confirm that that's not

00:17:54,640 --> 00:17:58,160
pre-recorded

00:17:55,760 --> 00:17:58,880
okay so there's new requests coming from

00:17:58,160 --> 00:18:02,160
a

00:17:58,880 --> 00:18:04,240
traffic generator we get 200 successful

00:18:02,160 --> 00:18:06,720
response

00:18:04,240 --> 00:18:09,679
if you look at looks for ratings we also

00:18:06,720 --> 00:18:09,679
can see ratings

00:18:09,760 --> 00:18:13,120
container receives multiple multiple

00:18:12,080 --> 00:18:16,559
requests and

00:18:13,120 --> 00:18:19,760
responses to them so because right now

00:18:16,559 --> 00:18:22,400
tos is not enabled i should be able to

00:18:19,760 --> 00:18:23,520
query proxy directly from my machine

00:18:22,400 --> 00:18:27,919
instead of

00:18:23,520 --> 00:18:31,520
kubernetes port yeah and you can see i'm

00:18:27,919 --> 00:18:31,520
getting successful response here

00:18:33,520 --> 00:18:35,840
okay

00:18:40,799 --> 00:18:44,640
so now let's try to call back so what we

00:18:43,600 --> 00:18:47,840
will do we will

00:18:44,640 --> 00:18:49,919
just scroll from our vm

00:18:47,840 --> 00:18:52,480
back to product page and product pages

00:18:49,919 --> 00:18:55,120
like comments container

00:18:52,480 --> 00:18:56,320
uh circumvention support and we got

00:18:55,120 --> 00:18:59,039
successful

00:18:56,320 --> 00:18:59,039
response here

00:19:02,960 --> 00:19:10,000
so last thing we want to show is

00:19:06,240 --> 00:19:13,440
a different vm that already runs

00:19:10,000 --> 00:19:15,840
two services details and reviews i

00:19:13,440 --> 00:19:15,840
believe

00:19:17,360 --> 00:19:22,320
so it's called ratings but i think it's

00:19:20,960 --> 00:19:25,840
detailed something which we will see in

00:19:22,320 --> 00:19:25,840
a second

00:19:28,480 --> 00:19:36,080
so we're connected to this vm and

00:19:32,000 --> 00:19:38,000
let's see yeah so i have oh it's another

00:19:36,080 --> 00:19:40,000
version of ratings actually i'm running

00:19:38,000 --> 00:19:42,400
here so i have visual proxy

00:19:40,000 --> 00:19:44,080
in two application containers listening

00:19:42,400 --> 00:19:46,880
on different ports

00:19:44,080 --> 00:19:47,360
and now when i look here i can see i

00:19:46,880 --> 00:19:50,400
have

00:19:47,360 --> 00:19:50,960
rpm added to my map and i have version

00:19:50,400 --> 00:19:54,080
two

00:19:50,960 --> 00:19:57,520
version 2 is vm that i added and it's

00:19:54,080 --> 00:19:57,520
successfully shown in this

00:19:58,400 --> 00:20:02,080
diagram so we can see the traffic is

00:20:01,360 --> 00:20:04,559
going there

00:20:02,080 --> 00:20:07,520
and getting responses and we can get all

00:20:04,559 --> 00:20:09,679
additional metrics

00:20:07,520 --> 00:20:12,559
that's all i wanted to share today thank

00:20:09,679 --> 00:20:12,559
you very much for

00:20:13,039 --> 00:20:16,640
your attention so i would like to

00:20:15,540 --> 00:20:20,880
[Music]

00:20:16,640 --> 00:20:24,080
thank um service mesh project for

00:20:20,880 --> 00:20:27,679
uh platform creating platform for us

00:20:24,080 --> 00:20:31,760
to make difference in this uh

00:20:27,679 --> 00:20:34,080
space service meshcon definitely

00:20:31,760 --> 00:20:35,200
for accepting this proposal and letting

00:20:34,080 --> 00:20:37,679
us

00:20:35,200 --> 00:20:39,200
to meet you you for your attention and

00:20:37,679 --> 00:20:41,679
hopefully you will be

00:20:39,200 --> 00:20:43,280
both to bring something back home and

00:20:41,679 --> 00:20:46,320
discuss

00:20:43,280 --> 00:20:47,039
and of course our customers to trade

00:20:46,320 --> 00:20:49,039
customers

00:20:47,039 --> 00:20:50,799
for the great feedback that allowed us

00:20:49,039 --> 00:20:54,400
to make this product

00:20:50,799 --> 00:20:56,960
uh this functionality better understand

00:20:54,400 --> 00:20:59,039
different use cases different scenarios

00:20:56,960 --> 00:21:02,720
a life scenario that

00:20:59,039 --> 00:21:05,840
hopefully a lot of you can apply

00:21:02,720 --> 00:21:09,679
um gitaray team

00:21:05,840 --> 00:21:12,720
for tremendous efforts on getting

00:21:09,679 --> 00:21:14,880
all of it implemented and available for

00:21:12,720 --> 00:21:17,919
our customers

00:21:14,880 --> 00:21:22,480
and finally i just want to

00:21:17,919 --> 00:21:27,280
uh say uh thank you to

00:21:22,480 --> 00:21:27,280
whole big tutorial team for focus and

00:21:28,840 --> 00:21:32,080
consideration

00:21:30,000 --> 00:21:34,799
hopefully you've got five things that

00:21:32,080 --> 00:21:34,799
you need to

00:21:34,960 --> 00:21:38,799
find out in your environment before

00:21:36,720 --> 00:21:40,400
implementing vms and we will be more

00:21:38,799 --> 00:21:42,640
than happy to talk to you

00:21:40,400 --> 00:21:43,760
of different use cases you have as

00:21:42,640 --> 00:21:47,039
enterprise

00:21:43,760 --> 00:21:51,520
maybe something that we didn't cover

00:21:47,039 --> 00:21:54,480
so far and multiple customers

00:21:51,520 --> 00:21:57,600
or you personally would benefit from

00:21:54,480 --> 00:21:57,600

YouTube URL: https://www.youtube.com/watch?v=L9UjNpK2-b0


