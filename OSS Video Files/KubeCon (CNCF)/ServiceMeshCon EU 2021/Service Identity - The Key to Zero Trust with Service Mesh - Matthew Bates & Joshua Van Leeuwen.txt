Title: Service Identity - The Key to Zero Trust with Service Mesh - Matthew Bates & Joshua Van Leeuwen
Publication date: 2021-05-05
Playlist: ServiceMeshCon EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Service Identity - The Key to Zero Trust with Service Mesh - Matthew Bates & Joshua Van Leeuwen, Jetstack

Service mesh provides first class support for service identity, foundational to identity-based, Zero Trust security that is now of growing interest and importance in the enterprise. In this talk, Matt and Josh will explain the concepts of service identity, such as SPIFFE, and illustrate through example how the various mesh technologies are architected, as well as how they implement the principles of service identity to provide seamless mTLS between workloads. The talk will help Platform and Security teams as they think about identity for workloads, how it's used within the mesh and beyond, and importantly, how this may can interoperate with enterprise PKI infrastructure.
Captions: 
	00:00:01,439 --> 00:00:04,560
hi everybody uh thanks for joining our

00:00:03,600 --> 00:00:06,879
talk today

00:00:04,560 --> 00:00:08,400
uh this year it's of course it's virtual

00:00:06,879 --> 00:00:10,880
so we don't get to see

00:00:08,400 --> 00:00:12,480
all of you in person but we're hoping uh

00:00:10,880 --> 00:00:14,799
this time next year there will be

00:00:12,480 --> 00:00:15,759
an eu cube con uh when it's safe to

00:00:14,799 --> 00:00:18,000
travel and

00:00:15,759 --> 00:00:19,279
look forward to seeing everyone then

00:00:18,000 --> 00:00:22,560
today we're going to

00:00:19,279 --> 00:00:23,439
be talking about service identity uh and

00:00:22,560 --> 00:00:25,599
how

00:00:23,439 --> 00:00:27,680
pretty much it's it's fundamental to

00:00:25,599 --> 00:00:31,920
achieving zero trust in a cloud

00:00:27,680 --> 00:00:34,000
native uh environment i'm matt i'm from

00:00:31,920 --> 00:00:35,120
uh jet stack just like josh uh he's

00:00:34,000 --> 00:00:37,680
joining me today

00:00:35,120 --> 00:00:39,200
um we're a company focused on cloud

00:00:37,680 --> 00:00:41,680
native and we've been working

00:00:39,200 --> 00:00:42,960
in the kubernetes ecosystem since the

00:00:41,680 --> 00:00:46,480
very early days

00:00:42,960 --> 00:00:49,120
back to about 2014 2015 uh when cube was

00:00:46,480 --> 00:00:49,600
first open sourced not really that long

00:00:49,120 --> 00:00:52,000
ago

00:00:49,600 --> 00:00:53,840
it's amazing how far we've come in that

00:00:52,000 --> 00:00:55,920
time we've worked with

00:00:53,840 --> 00:00:58,160
many companies who have adopted cloud

00:00:55,920 --> 00:00:59,280
native uh from you know some from

00:00:58,160 --> 00:01:02,239
startups to

00:00:59,280 --> 00:01:03,359
some of the largest enterprises and

00:01:02,239 --> 00:01:05,439
along the way

00:01:03,359 --> 00:01:06,560
we've contributed to open source

00:01:05,439 --> 00:01:09,200
upstream

00:01:06,560 --> 00:01:10,720
and we've uh also open-sourced a number

00:01:09,200 --> 00:01:11,520
of projects and we're probably best

00:01:10,720 --> 00:01:13,840
known

00:01:11,520 --> 00:01:15,600
for the the cert manager project which

00:01:13,840 --> 00:01:18,880
we originally created and

00:01:15,600 --> 00:01:20,560
now work on with lots of contributors um

00:01:18,880 --> 00:01:22,640
in the community it's and of course it's

00:01:20,560 --> 00:01:25,040
now a cncf project

00:01:22,640 --> 00:01:25,040
as well

00:01:25,680 --> 00:01:29,439
josh i'm joined today by josh you want

00:01:27,840 --> 00:01:31,680
to introduce yourself to

00:01:29,439 --> 00:01:32,880
yeah hi everyone uh yeah i'm josh um i'm

00:01:31,680 --> 00:01:36,240
a software engineer

00:01:32,880 --> 00:01:37,920
um at jet stack um uh do a few things at

00:01:36,240 --> 00:01:41,280
jet stack but yeah primarily

00:01:37,920 --> 00:01:44,560
uh part of the set manager team

00:01:41,280 --> 00:01:44,560
great thanks josh

00:01:45,200 --> 00:01:49,280
so today uh we're going to be as i said

00:01:47,920 --> 00:01:52,159
uh looking at

00:01:49,280 --> 00:01:53,360
xero trust of course zero trust is it's

00:01:52,159 --> 00:01:54,799
quite a buzzword

00:01:53,360 --> 00:01:56,640
but we're going to look at it

00:01:54,799 --> 00:01:59,040
specifically um in

00:01:56,640 --> 00:02:00,399
the context of cloud native and what it

00:01:59,040 --> 00:02:03,200
means for

00:02:00,399 --> 00:02:04,000
kubernetes and also what it means in a

00:02:03,200 --> 00:02:06,240
service mesh

00:02:04,000 --> 00:02:07,280
how you can use how you can achieve xero

00:02:06,240 --> 00:02:10,319
trust

00:02:07,280 --> 00:02:11,200
using the identity management uh the

00:02:10,319 --> 00:02:13,840
service mesh

00:02:11,200 --> 00:02:15,760
provides um we're gonna be also looking

00:02:13,840 --> 00:02:17,599
at how you can plug in set manager we're

00:02:15,760 --> 00:02:19,360
behind the project and we've been

00:02:17,599 --> 00:02:21,760
working uh she'll say wait yeah josh has

00:02:19,360 --> 00:02:25,440
been working on some of the integrations

00:02:21,760 --> 00:02:26,560
that tap into managing certificates and

00:02:25,440 --> 00:02:28,239
providing those to

00:02:26,560 --> 00:02:31,360
to the mesh and we've got a number of

00:02:28,239 --> 00:02:34,160
demos as well so let's get going

00:02:31,360 --> 00:02:36,959
so briefly to start we're going to

00:02:34,160 --> 00:02:40,000
introduce the concepts of xero trust

00:02:36,959 --> 00:02:42,000
in the context of cloud native so in

00:02:40,000 --> 00:02:44,640
traditional network security

00:02:42,000 --> 00:02:45,760
it's all very much about having you know

00:02:44,640 --> 00:02:48,720
layers

00:02:45,760 --> 00:02:49,440
of security um yeah a defense in depth

00:02:48,720 --> 00:02:51,680
if you like

00:02:49,440 --> 00:02:53,040
in order to protect really the most

00:02:51,680 --> 00:02:56,160
sensitive

00:02:53,040 --> 00:02:56,720
services and the model is really based

00:02:56,160 --> 00:02:59,680
around

00:02:56,720 --> 00:03:00,959
protecting protecting networks from

00:02:59,680 --> 00:03:03,680
external

00:03:00,959 --> 00:03:05,840
attackers and yeah often this gets

00:03:03,680 --> 00:03:09,120
described as the castle remote

00:03:05,840 --> 00:03:11,840
approach in which everything inside um

00:03:09,120 --> 00:03:12,720
is trusted you know everything once you

00:03:11,840 --> 00:03:15,360
once you're in

00:03:12,720 --> 00:03:17,599
the castle effectively you're trusted um

00:03:15,360 --> 00:03:19,920
but this really overlooks

00:03:17,599 --> 00:03:21,920
really the threat of insider attack and

00:03:19,920 --> 00:03:25,200
you know there have been a number of

00:03:21,920 --> 00:03:27,760
high-profile cases where where breaches

00:03:25,200 --> 00:03:27,760
have occurred

00:03:30,840 --> 00:03:36,080
internally

00:03:32,959 --> 00:03:36,879
so now let's move to the world of cloud

00:03:36,080 --> 00:03:38,319
how do

00:03:36,879 --> 00:03:41,280
how does this traditional network

00:03:38,319 --> 00:03:44,799
security model uh does it does it work

00:03:41,280 --> 00:03:46,400
um when in world of cloud multi and

00:03:44,799 --> 00:03:48,560
hybrid cloud

00:03:46,400 --> 00:03:50,000
it's actually it's really challenging um

00:03:48,560 --> 00:03:51,200
no longer

00:03:50,000 --> 00:03:53,040
it's no longer clear where the

00:03:51,200 --> 00:03:55,519
perimeters lie um

00:03:53,040 --> 00:03:57,439
and it really it's very difficult to

00:03:55,519 --> 00:03:59,439
find a consistent means

00:03:57,439 --> 00:04:01,200
of really drawing up those those

00:03:59,439 --> 00:04:03,280
perimeters

00:04:01,200 --> 00:04:05,840
it's let's say that the traditional

00:04:03,280 --> 00:04:07,200
model of securing application networking

00:04:05,840 --> 00:04:09,040
is really very much based on

00:04:07,200 --> 00:04:11,599
infrastructure that

00:04:09,040 --> 00:04:12,959
that changes very infrequently it's

00:04:11,599 --> 00:04:16,000
static

00:04:12,959 --> 00:04:19,919
we rely on fixed ip addresses um ports

00:04:16,000 --> 00:04:22,960
uh access control lists firewalls and

00:04:19,919 --> 00:04:24,639
in a world of cloud native uh this this

00:04:22,960 --> 00:04:26,639
becomes highly challenging

00:04:24,639 --> 00:04:28,479
and why because you know we've got

00:04:26,639 --> 00:04:30,479
clusters in different clouds on

00:04:28,479 --> 00:04:33,759
different networks and

00:04:30,479 --> 00:04:36,240
virtual networks even and the workloads

00:04:33,759 --> 00:04:37,280
um that run in those clouds and clusters

00:04:36,240 --> 00:04:40,479
are really highlight

00:04:37,280 --> 00:04:42,880
highly dynamic and ephemeral and some

00:04:40,479 --> 00:04:44,080
are very short-lived some much more

00:04:42,880 --> 00:04:45,600
longer-lived

00:04:44,080 --> 00:04:48,320
and it's not just kubernetes right you

00:04:45,600 --> 00:04:52,080
know we've got um functions here

00:04:48,320 --> 00:04:54,400
serverless standard virtual machines

00:04:52,080 --> 00:04:55,440
and of course infrastructure on-premise

00:04:54,400 --> 00:04:57,280
that we

00:04:55,440 --> 00:04:59,680
also need to integrate so it's clear

00:04:57,280 --> 00:05:00,479
that the sort of perimeter-based

00:04:59,680 --> 00:05:02,479
approach

00:05:00,479 --> 00:05:03,680
um really just doesn't fit and it

00:05:02,479 --> 00:05:07,440
doesn't scale

00:05:03,680 --> 00:05:10,720
and it's incompatible with uh really how

00:05:07,440 --> 00:05:14,479
we're building and and deploying

00:05:10,720 --> 00:05:16,720
software uh today so instead

00:05:14,479 --> 00:05:18,080
what we're going to move to where we

00:05:16,720 --> 00:05:19,600
where where of course the industry is

00:05:18,080 --> 00:05:21,199
moving to is a model

00:05:19,600 --> 00:05:22,800
where effectively the network is

00:05:21,199 --> 00:05:25,520
completely untrusted

00:05:22,800 --> 00:05:27,120
and there is no implicit trust uh you

00:05:25,520 --> 00:05:30,160
know you cannot trust

00:05:27,120 --> 00:05:31,759
another service um yeah that doesn't

00:05:30,160 --> 00:05:32,960
mean giving up on the defenses of course

00:05:31,759 --> 00:05:35,600
at the perimeter

00:05:32,960 --> 00:05:37,440
right but now we're assuming that the

00:05:35,600 --> 00:05:38,880
attackers could well

00:05:37,440 --> 00:05:41,199
be in our network they are in our

00:05:38,880 --> 00:05:42,880
networks and that means making sure that

00:05:41,199 --> 00:05:45,759
all communications

00:05:42,880 --> 00:05:47,039
the service to service calls are secure

00:05:45,759 --> 00:05:49,759
i mean

00:05:47,039 --> 00:05:50,560
encrypted on the wire but also that the

00:05:49,759 --> 00:05:54,400
services

00:05:50,560 --> 00:05:56,880
are able to authenticate to each other

00:05:54,400 --> 00:05:59,360
and that's each and every service each

00:05:56,880 --> 00:06:02,639
and every time

00:05:59,360 --> 00:06:04,560
so how do we do this well it means each

00:06:02,639 --> 00:06:07,560
of this has to be able to identify

00:06:04,560 --> 00:06:09,120
itself and we're talking here you know a

00:06:07,560 --> 00:06:12,880
cryptographically

00:06:09,120 --> 00:06:14,160
verifiable unique identity and that it

00:06:12,880 --> 00:06:16,800
can attest

00:06:14,160 --> 00:06:17,280
and with identity we can authenticate

00:06:16,800 --> 00:06:20,080
between

00:06:17,280 --> 00:06:21,440
services you know once we've got that we

00:06:20,080 --> 00:06:23,360
can also begin to make

00:06:21,440 --> 00:06:24,479
authorization requests you know we

00:06:23,360 --> 00:06:27,600
understand

00:06:24,479 --> 00:06:28,880
the service who it is um and we can make

00:06:27,600 --> 00:06:32,400
a decision about

00:06:28,880 --> 00:06:32,800
uh what uh that service um is requesting

00:06:32,400 --> 00:06:36,000
you know

00:06:32,800 --> 00:06:39,120
um for instance can this type of request

00:06:36,000 --> 00:06:40,880
be made by this service um

00:06:39,120 --> 00:06:42,479
yeah accessing a some particular

00:06:40,880 --> 00:06:45,039
resource for instance and we've also

00:06:42,479 --> 00:06:47,360
then got the ability to audit this

00:06:45,039 --> 00:06:48,319
um providing things like flat detection

00:06:47,360 --> 00:06:50,560
so on and

00:06:48,319 --> 00:06:52,639
and so on and so forth but pretty much

00:06:50,560 --> 00:06:56,479
though the foundation in all of this

00:06:52,639 --> 00:07:00,560
is identity machine identity as it's

00:06:56,479 --> 00:07:00,560
now being referred to by the analysts

00:07:01,599 --> 00:07:08,800
so rather than relying on developers

00:07:05,280 --> 00:07:12,560
uh actually obtaining uh identity

00:07:08,800 --> 00:07:16,240
you know certificates um themselves and

00:07:12,560 --> 00:07:17,840
applying um layers of uh

00:07:16,240 --> 00:07:19,440
implementation for things like

00:07:17,840 --> 00:07:22,800
observability

00:07:19,440 --> 00:07:25,759
um that identity uh also

00:07:22,800 --> 00:07:26,639
reliability features um service meshes

00:07:25,759 --> 00:07:29,919
provide that

00:07:26,639 --> 00:07:31,759
in really built into the platform and

00:07:29,919 --> 00:07:35,599
this is a capability

00:07:31,759 --> 00:07:38,479
that is programmable so it's dynamic

00:07:35,599 --> 00:07:39,759
uh and is controlled with control plane

00:07:38,479 --> 00:07:42,720
configuration

00:07:39,759 --> 00:07:44,240
and the data plane itself um are proxies

00:07:42,720 --> 00:07:46,240
so now rather than the

00:07:44,240 --> 00:07:48,080
services i've got an example here a

00:07:46,240 --> 00:07:49,199
service a service be communicating

00:07:48,080 --> 00:07:52,400
directly

00:07:49,199 --> 00:07:54,240
um the services communicate via

00:07:52,400 --> 00:07:56,639
these proxies and these proxies are

00:07:54,240 --> 00:07:59,919
securely connected

00:07:56,639 --> 00:08:02,560
using mtls and

00:07:59,919 --> 00:08:04,080
you know credentials which are obtained

00:08:02,560 --> 00:08:05,680
and renewed

00:08:04,080 --> 00:08:06,720
um and have that identity encoded in

00:08:05,680 --> 00:08:08,000
them and we're going to talk a bit more

00:08:06,720 --> 00:08:11,199
about how

00:08:08,000 --> 00:08:12,479
the identities um are obtained and what

00:08:11,199 --> 00:08:14,479
they are

00:08:12,479 --> 00:08:15,840
but this is uh the service measures are

00:08:14,479 --> 00:08:18,319
incredibly

00:08:15,840 --> 00:08:19,840
uh incredibly convenient they they take

00:08:18,319 --> 00:08:21,039
away a lot of what a developer would

00:08:19,840 --> 00:08:22,800
typically do

00:08:21,039 --> 00:08:24,639
and they do yeah and we know we're

00:08:22,800 --> 00:08:26,720
developing developing things like this

00:08:24,639 --> 00:08:27,280
it's quite easy and to get security

00:08:26,720 --> 00:08:29,919
wrong

00:08:27,280 --> 00:08:31,599
and so service mesh is really convenient

00:08:29,919 --> 00:08:34,479
because they take away

00:08:31,599 --> 00:08:36,560
a lot of this um difficult complex

00:08:34,479 --> 00:08:39,839
implementation and put it into

00:08:36,560 --> 00:08:40,640
if you like the network layer and enable

00:08:39,839 --> 00:08:42,159
it to be

00:08:40,640 --> 00:08:44,240
programmable and so we're going to look

00:08:42,159 --> 00:08:46,640
today at how specifically

00:08:44,240 --> 00:08:47,760
the service measures can help us uh

00:08:46,640 --> 00:08:50,320
manage

00:08:47,760 --> 00:08:52,720
that identity and then importantly use

00:08:50,320 --> 00:08:56,080
that identity to do the likes of

00:08:52,720 --> 00:08:58,399
authorization policy based authorized

00:08:56,080 --> 00:08:58,399
asian

00:09:00,560 --> 00:09:05,279
so i mentioned empty less or meat shorty

00:09:04,000 --> 00:09:08,080
less and that

00:09:05,279 --> 00:09:08,800
that is how the proxies communicate in a

00:09:08,080 --> 00:09:11,200
mesh

00:09:08,800 --> 00:09:12,720
uh between you know between the services

00:09:11,200 --> 00:09:14,320
um that are in the mesh

00:09:12,720 --> 00:09:16,160
uh josh you're gonna talk to us about

00:09:14,320 --> 00:09:18,800
what mtls is and

00:09:16,160 --> 00:09:18,800
how it works

00:09:19,440 --> 00:09:22,800
great so i'm gonna talk about mutual tls

00:09:22,320 --> 00:09:25,600
and

00:09:22,800 --> 00:09:26,160
how service mesh uses mutual tls to

00:09:25,600 --> 00:09:29,600
create a

00:09:26,160 --> 00:09:33,120
network of xero trust so

00:09:29,600 --> 00:09:35,920
as was mentioned earlier so all

00:09:33,120 --> 00:09:36,720
workloads running in the mesh old

00:09:35,920 --> 00:09:39,920
kubernetes

00:09:36,720 --> 00:09:40,720
um have a side car container uh running

00:09:39,920 --> 00:09:43,040
next to them

00:09:40,720 --> 00:09:44,000
um and that's our sidecar container is a

00:09:43,040 --> 00:09:45,920
proxy

00:09:44,000 --> 00:09:47,040
um and the responsibility of the proxy

00:09:45,920 --> 00:09:49,760
here is to intercept

00:09:47,040 --> 00:09:50,800
all ingress and egress traffic from the

00:09:49,760 --> 00:09:53,760
service which is

00:09:50,800 --> 00:09:55,680
backing that proxy so what this means in

00:09:53,760 --> 00:09:57,680
terms of connections is say

00:09:55,680 --> 00:10:00,080
service a wants to talk to service b or

00:09:57,680 --> 00:10:02,240
service a will open up that connection

00:10:00,080 --> 00:10:03,279
that will get intercepted by the proxy

00:10:02,240 --> 00:10:05,839
that proxy will then

00:10:03,279 --> 00:10:07,360
uh connect to service b's proxy and uh

00:10:05,839 --> 00:10:11,279
then assuming that connection

00:10:07,360 --> 00:10:11,600
uh uh um is uh okay uh that traffic will

00:10:11,279 --> 00:10:15,440
then

00:10:11,600 --> 00:10:17,600
um get forwarded on to to service b

00:10:15,440 --> 00:10:18,560
now it's worth noting here that um the

00:10:17,600 --> 00:10:20,800
the way these

00:10:18,560 --> 00:10:22,880
uh kind of proxies are uh injected like

00:10:20,800 --> 00:10:24,079
this is means that there's no code

00:10:22,880 --> 00:10:26,480
changes needed for

00:10:24,079 --> 00:10:27,600
um any service um and as far as either

00:10:26,480 --> 00:10:29,760
side of this is concerned

00:10:27,600 --> 00:10:31,519
uh they're connecting to each other uh

00:10:29,760 --> 00:10:34,399
normally over http

00:10:31,519 --> 00:10:34,399
um etc

00:10:35,040 --> 00:10:38,320
um so if you talk about uh or if we

00:10:37,040 --> 00:10:41,519
think about um what

00:10:38,320 --> 00:10:42,320
uh network flow uh would look like um so

00:10:41,519 --> 00:10:45,920
when these

00:10:42,320 --> 00:10:47,920
um services uh uh boot up they request

00:10:45,920 --> 00:10:48,480
these crypto bundles from the control

00:10:47,920 --> 00:10:50,959
plane

00:10:48,480 --> 00:10:51,600
um of the of the mesh they're uh running

00:10:50,959 --> 00:10:53,600
in so

00:10:51,600 --> 00:10:54,959
inside these crypto bundles and can

00:10:53,600 --> 00:10:58,320
contain the um

00:10:54,959 --> 00:11:01,120
root of trust um of the mesh

00:10:58,320 --> 00:11:03,120
along with a sign certificate uh which

00:11:01,120 --> 00:11:05,440
will contain their machine identity

00:11:03,120 --> 00:11:06,240
uh inside um so the the kind of service

00:11:05,440 --> 00:11:08,480
identity

00:11:06,240 --> 00:11:09,600
um as well as the private key which will

00:11:08,480 --> 00:11:12,000
be used um

00:11:09,600 --> 00:11:13,440
uh uh with which is the kind of

00:11:12,000 --> 00:11:14,240
corresponding pair with the science

00:11:13,440 --> 00:11:16,399
certificate

00:11:14,240 --> 00:11:17,920
um and these these will be stored inside

00:11:16,399 --> 00:11:19,440
the proxy

00:11:17,920 --> 00:11:22,720
these will be used to kind of open

00:11:19,440 --> 00:11:22,720
connections up to the other proxy

00:11:23,440 --> 00:11:26,800
so um if we say that client a uh wants

00:11:26,320 --> 00:11:28,880
to

00:11:26,800 --> 00:11:30,480
cyber say wants to connect to service b

00:11:28,880 --> 00:11:33,120
will happen is the proxy will connect to

00:11:30,480 --> 00:11:34,399
uh the other proxy uh the server will uh

00:11:33,120 --> 00:11:37,680
just like a normal tls

00:11:34,399 --> 00:11:39,360
uh present uh its signed certificate

00:11:37,680 --> 00:11:41,200
the client will then uh verify the

00:11:39,360 --> 00:11:42,160
contents of that certificate so it's

00:11:41,200 --> 00:11:44,160
going to verify

00:11:42,160 --> 00:11:46,320
um that it's been signed by the root of

00:11:44,160 --> 00:11:47,200
trust that it's expecting and also that

00:11:46,320 --> 00:11:50,240
the identity

00:11:47,200 --> 00:11:51,839
uh matches that which it which is um uh

00:11:50,240 --> 00:11:53,839
expecting and also make networking

00:11:51,839 --> 00:11:55,600
decisions here um and it can also make

00:11:53,839 --> 00:11:58,880
you know authorization to decisions here

00:11:55,600 --> 00:12:00,959
uh based on the identity it receives

00:11:58,880 --> 00:12:02,320
so it's also going to challenge uh the

00:12:00,959 --> 00:12:03,440
kind of contents of that certificate so

00:12:02,320 --> 00:12:05,600
it's going to make sure that the

00:12:03,440 --> 00:12:07,519
server speed proxy also owns that

00:12:05,600 --> 00:12:10,240
certificate it's presenting so it also

00:12:07,519 --> 00:12:12,480
holds the private key

00:12:10,240 --> 00:12:13,680
and if it's happy it's also going to

00:12:12,480 --> 00:12:16,880
send the server

00:12:13,680 --> 00:12:19,200
the its own client certificate

00:12:16,880 --> 00:12:19,920
and that process is is going to repeat

00:12:19,200 --> 00:12:21,680
so

00:12:19,920 --> 00:12:23,279
what you get here is uh you know in the

00:12:21,680 --> 00:12:24,959
normal case of

00:12:23,279 --> 00:12:26,720
the case of normal tls the client is

00:12:24,959 --> 00:12:28,800
going to verify that the server

00:12:26,720 --> 00:12:30,880
certificate matches what it's expecting

00:12:28,800 --> 00:12:32,480
also this server is going to

00:12:30,880 --> 00:12:33,920
verify that the client certificate is

00:12:32,480 --> 00:12:36,079
also what it's

00:12:33,920 --> 00:12:37,839
expecting so this is where the kind of

00:12:36,079 --> 00:12:40,560
mutual

00:12:37,839 --> 00:12:40,560
trust comes in

00:12:41,440 --> 00:12:45,120
so if you take a bird's-eye view of how

00:12:43,920 --> 00:12:47,760
this looks like

00:12:45,120 --> 00:12:49,120
um you see that the control plane

00:12:47,760 --> 00:12:50,720
component which i was mentioning earlier

00:12:49,120 --> 00:12:52,639
is responsible for delivering

00:12:50,720 --> 00:12:54,079
these bundles to the workloads on boot

00:12:52,639 --> 00:12:55,760
and on renewal so

00:12:54,079 --> 00:12:57,600
if we take istio's case which we have

00:12:55,760 --> 00:12:58,639
here uh it's the cisterdale component

00:12:57,600 --> 00:13:01,680
which is responsible

00:12:58,639 --> 00:13:03,519
um facilitating um sending uh these

00:13:01,680 --> 00:13:04,639
crypto bundles so it's the citadel it's

00:13:03,519 --> 00:13:07,279
going to be signing these

00:13:04,639 --> 00:13:08,639
uh these certificates which contain the

00:13:07,279 --> 00:13:11,440
identity of each service

00:13:08,639 --> 00:13:12,880
um the kind of identity of each service

00:13:11,440 --> 00:13:14,800
you know in the kubernetes world

00:13:12,880 --> 00:13:16,399
um is typically done by the service

00:13:14,800 --> 00:13:18,160
account um so on boot

00:13:16,399 --> 00:13:19,760
um the kind of service a for example

00:13:18,160 --> 00:13:21,200
will send a request using the service a

00:13:19,760 --> 00:13:22,399
service account at cisadell

00:13:21,200 --> 00:13:23,920
it's going to you know verify that

00:13:22,399 --> 00:13:24,399
service account is signed by the api

00:13:23,920 --> 00:13:25,920
server

00:13:24,399 --> 00:13:27,519
and then it's going to assign a a

00:13:25,920 --> 00:13:31,120
certificate to send back

00:13:27,519 --> 00:13:34,160
uh to the server state proxy the way the

00:13:31,120 --> 00:13:34,959
identity is encoded in the x5 x509

00:13:34,160 --> 00:13:37,600
certificate

00:13:34,959 --> 00:13:38,399
um is either done you know by dns uh

00:13:37,600 --> 00:13:40,480
let's say or

00:13:38,399 --> 00:13:42,639
in the istio's case through spiffy

00:13:40,480 --> 00:13:45,760
through through uri

00:13:42,639 --> 00:13:47,760
especially um is a framework um for

00:13:45,760 --> 00:13:48,800
uh uh for effectively encoding

00:13:47,760 --> 00:13:51,360
identities um

00:13:48,800 --> 00:13:52,880
into kind of identity documents um so in

00:13:51,360 --> 00:13:55,120
the case of x509

00:13:52,880 --> 00:13:56,240
um this is actually just a string in the

00:13:55,120 --> 00:13:59,120
in the uri

00:13:56,240 --> 00:14:00,160
um sans uh part of the certificate um

00:13:59,120 --> 00:14:01,760
and it's encoded

00:14:00,160 --> 00:14:03,199
um like you see here so you have the

00:14:01,760 --> 00:14:05,040
trust domain so in this case it's

00:14:03,199 --> 00:14:07,760
cluster local but that could be you know

00:14:05,040 --> 00:14:10,560
europe west one europe west two mesh two

00:14:07,760 --> 00:14:12,240
uh what have you um and then followed by

00:14:10,560 --> 00:14:14,639
you know whatever makes sense uh in the

00:14:12,240 --> 00:14:16,399
context um of the kind of trust domain

00:14:14,639 --> 00:14:17,920
that is that it's operating in so

00:14:16,399 --> 00:14:19,680
again in the kubernetes world this is

00:14:17,920 --> 00:14:21,040
the service account so it'll be followed

00:14:19,680 --> 00:14:22,560
by the you know the namespace that

00:14:21,040 --> 00:14:23,600
service account belongs to and then the

00:14:22,560 --> 00:14:25,920
name of the service account

00:14:23,600 --> 00:14:25,920
itself

00:14:29,279 --> 00:14:34,480
we're now going to look at how

00:14:32,480 --> 00:14:35,519
service identity works with a number of

00:14:34,480 --> 00:14:38,399
different service

00:14:35,519 --> 00:14:39,279
mesh implementations and we've got three

00:14:38,399 --> 00:14:40,720
and we're going to

00:14:39,279 --> 00:14:43,120
look at them briefly and we're going to

00:14:40,720 --> 00:14:46,240
show you a bit of a demo so just

00:14:43,120 --> 00:14:47,199
to to start with um we're going to look

00:14:46,240 --> 00:14:50,240
at istio

00:14:47,199 --> 00:14:52,880
so this is the architecture of istio um

00:14:50,240 --> 00:14:54,320
specifically focusing in on sort of the

00:14:52,880 --> 00:14:58,320
components that

00:14:54,320 --> 00:15:01,120
are used um here for security controls

00:14:58,320 --> 00:15:02,000
and to to point out here eco in its

00:15:01,120 --> 00:15:04,079
control plane

00:15:02,000 --> 00:15:05,120
has something uh called a component

00:15:04,079 --> 00:15:07,680
called the citadel

00:15:05,120 --> 00:15:09,360
uh it's now part of stod and that is

00:15:07,680 --> 00:15:12,639
effectively responsible

00:15:09,360 --> 00:15:15,120
uh for uh providing the uh

00:15:12,639 --> 00:15:16,000
the x509 the tls certificates to the

00:15:15,120 --> 00:15:19,279
proxies the

00:15:16,000 --> 00:15:22,000
in this case the envoy based um proxies

00:15:19,279 --> 00:15:24,000
and now out of the box it's self-signed

00:15:22,000 --> 00:15:26,480
and so it has a self-signed ca

00:15:24,000 --> 00:15:27,360
um and you know actually uh you know you

00:15:26,480 --> 00:15:30,079
can really just

00:15:27,360 --> 00:15:30,560
um sold it up and use it as is um but if

00:15:30,079 --> 00:15:32,399
you're

00:15:30,560 --> 00:15:33,759
wishing to integrate this into an

00:15:32,399 --> 00:15:35,360
existing pki

00:15:33,759 --> 00:15:37,040
and then there is a means to be able to

00:15:35,360 --> 00:15:40,560
plug your own uh

00:15:37,040 --> 00:15:43,279
ca um into istio and uh

00:15:40,560 --> 00:15:45,839
josh is going to demonstrate with a demo

00:15:43,279 --> 00:15:48,560
uh how to do this

00:15:45,839 --> 00:15:48,560
overdue josh

00:15:50,800 --> 00:15:55,920
thanks matt um so what i have here

00:15:54,000 --> 00:15:57,279
um i have two certificates already

00:15:55,920 --> 00:16:00,480
installed inside the cluster

00:15:57,279 --> 00:16:03,120
um so i have a root ca

00:16:00,480 --> 00:16:04,320
which is the root of my pki um this

00:16:03,120 --> 00:16:06,320
typically would live

00:16:04,320 --> 00:16:07,440
offline uh from the cluster but i have

00:16:06,320 --> 00:16:10,240
it installed here

00:16:07,440 --> 00:16:11,519
um and i've also minted an intermediate

00:16:10,240 --> 00:16:12,959
difficult authority

00:16:11,519 --> 00:16:15,279
which is going to be used as the root of

00:16:12,959 --> 00:16:16,800
trust for my istio mesh that i'm about

00:16:15,279 --> 00:16:18,880
to install

00:16:16,800 --> 00:16:19,839
so the first step for using this

00:16:18,880 --> 00:16:23,199
intermediate

00:16:19,839 --> 00:16:24,720
kind of custom um with the with istio

00:16:23,199 --> 00:16:26,639
that i need to extract uh you know the

00:16:24,720 --> 00:16:29,759
private key ca

00:16:26,639 --> 00:16:32,160
and uh certificate um into a

00:16:29,759 --> 00:16:33,600
format which um it still accepts um so

00:16:32,160 --> 00:16:35,920
what i'm all i'm doing here is

00:16:33,600 --> 00:16:36,959
extracting that and putting into various

00:16:35,920 --> 00:16:40,240
files

00:16:36,959 --> 00:16:43,120
i'm then going to create a secret based

00:16:40,240 --> 00:16:44,560
uh from those files um and put them in

00:16:43,120 --> 00:16:46,800
yeah put them into a secret

00:16:44,560 --> 00:16:47,920
um so when i install istio here since

00:16:46,800 --> 00:16:51,120
that secret is already

00:16:47,920 --> 00:16:51,839
available sdod is going to read those

00:16:51,120 --> 00:16:53,120
files

00:16:51,839 --> 00:16:55,600
from disk because it's mounted from the

00:16:53,120 --> 00:16:58,240
secret and then it's going to use

00:16:55,600 --> 00:16:59,839
those um you know keys and certificate

00:16:58,240 --> 00:17:02,959
and ca et cetera

00:16:59,839 --> 00:17:05,760
as the kind of signing um

00:17:02,959 --> 00:17:06,160
kind of ca um so what's going to happen

00:17:05,760 --> 00:17:09,039
then

00:17:06,160 --> 00:17:10,640
is all uh workloads uh in the mesh when

00:17:09,039 --> 00:17:11,760
they request their crypto bundles from

00:17:10,640 --> 00:17:14,240
the control plane

00:17:11,760 --> 00:17:16,319
um they're going to be signed from that

00:17:14,240 --> 00:17:19,839
uh intermediate

00:17:16,319 --> 00:17:19,839
that we've minted here

00:17:24,319 --> 00:17:30,840
so now we have the istio

00:17:28,000 --> 00:17:32,160
service mesh installed with our custom

00:17:30,840 --> 00:17:34,240
intermediate va

00:17:32,160 --> 00:17:36,400
and i just want to verify that the

00:17:34,240 --> 00:17:38,960
identities that are issued by the

00:17:36,400 --> 00:17:40,080
um stereo control plane aren't designed

00:17:38,960 --> 00:17:42,880
by that intermediate

00:17:40,080 --> 00:17:43,520
um so all i'm doing here is i'm

00:17:42,880 --> 00:17:47,039
deploying

00:17:43,520 --> 00:17:50,320
a couple of dummy applications um

00:17:47,039 --> 00:17:53,360
http bin and sleep and all i'm doing is

00:17:50,320 --> 00:17:56,000
um opening up a ssl connection from the

00:17:53,360 --> 00:17:56,960
you know sleep uh proxy um over to the

00:17:56,000 --> 00:17:58,400
hdb bin

00:17:56,960 --> 00:18:00,080
i'm extracting the certificate that the

00:17:58,400 --> 00:18:02,400
http bin proxy

00:18:00,080 --> 00:18:03,280
responded with and if we just look at

00:18:02,400 --> 00:18:05,520
the contents there

00:18:03,280 --> 00:18:07,679
you can see uh there at the bottom that

00:18:05,520 --> 00:18:10,640
it was indeed issued by the istioca

00:18:07,679 --> 00:18:12,320
intermediate uh certificate authority um

00:18:10,640 --> 00:18:15,840
and indeed if we look at the

00:18:12,320 --> 00:18:17,440
sand name uh the uri um is the spiffy

00:18:15,840 --> 00:18:19,679
identity that we're expecting so

00:18:17,440 --> 00:18:20,559
it's similar to um what we were looking

00:18:19,679 --> 00:18:22,320
at earlier

00:18:20,559 --> 00:18:23,919
um the trust domain is cluster.local and

00:18:22,320 --> 00:18:26,840
the service account is in the default

00:18:23,919 --> 00:18:29,840
namespace and the service kind of http

00:18:26,840 --> 00:18:29,840
bin

00:18:30,000 --> 00:18:33,520
thanks josh that was great to see we're

00:18:32,480 --> 00:18:35,520
now going to

00:18:33,520 --> 00:18:37,440
move on to linkedin linkedin of course

00:18:35,520 --> 00:18:41,120
is a service mesh that's

00:18:37,440 --> 00:18:42,640
in the cncf um very similar architecture

00:18:41,120 --> 00:18:45,360
here or certainly uh

00:18:42,640 --> 00:18:46,640
has a control plane has a data plane um

00:18:45,360 --> 00:18:50,320
somewhat different of course

00:18:46,640 --> 00:18:51,440
in the the proxy uh is not envoy um it's

00:18:50,320 --> 00:18:54,160
a rust based

00:18:51,440 --> 00:18:55,840
envoy the linkedin proxy uh but it also

00:18:54,160 --> 00:18:56,799
has a component in its control plane

00:18:55,840 --> 00:19:00,080
much like seo

00:18:56,799 --> 00:19:02,080
that's responsible for identity and

00:19:00,080 --> 00:19:03,360
providing the identity to all of those

00:19:02,080 --> 00:19:05,679
proxies in the data plane

00:19:03,360 --> 00:19:06,720
and so as just as before we're gonna

00:19:05,679 --> 00:19:10,240
we're gonna see a demo

00:19:06,720 --> 00:19:11,600
of how to plug in um like an

00:19:10,240 --> 00:19:15,039
intermediate

00:19:11,600 --> 00:19:15,600
uh into uh linkedin and see it set up

00:19:15,039 --> 00:19:17,039
and

00:19:15,600 --> 00:19:19,360
see a workload or a set of workloads

00:19:17,039 --> 00:19:19,360
running

00:19:19,440 --> 00:19:23,520
all right so next i'm gonna be

00:19:20,960 --> 00:19:24,480
installing uh the link d mesh uh with a

00:19:23,520 --> 00:19:27,919
custom

00:19:24,480 --> 00:19:30,000
uh root uh ca so again i i have

00:19:27,919 --> 00:19:31,120
uh the root of my pki um living inside

00:19:30,000 --> 00:19:31,760
the cluster again this would normally

00:19:31,120 --> 00:19:34,080
live

00:19:31,760 --> 00:19:35,440
offline somewhere i've also minted an

00:19:34,080 --> 00:19:36,880
intermediate ca

00:19:35,440 --> 00:19:38,080
from that route which i'm going to be

00:19:36,880 --> 00:19:39,840
using as the root of trust for my

00:19:38,080 --> 00:19:42,000
linkedin mesh

00:19:39,840 --> 00:19:43,840
so what i'm doing here is grabbing the

00:19:42,000 --> 00:19:47,440
ca of that intermediate

00:19:43,840 --> 00:19:51,280
and then uh installing linkid now

00:19:47,440 --> 00:19:53,280
using that ca so it's noting here that

00:19:51,280 --> 00:19:56,559
um i don't need to create a

00:19:53,280 --> 00:19:59,520
custom secret um since the link d

00:19:56,559 --> 00:20:00,080
um mesh um is expecting the same kind of

00:19:59,520 --> 00:20:02,400
format

00:20:00,080 --> 00:20:03,600
um as my cert manager certificate um

00:20:02,400 --> 00:20:07,840
that contains the

00:20:03,600 --> 00:20:07,840
intermediate ca

00:20:13,360 --> 00:20:17,360
all right so once again um just what we

00:20:15,840 --> 00:20:18,559
did with this j i want to verify that

00:20:17,360 --> 00:20:20,080
the identities

00:20:18,559 --> 00:20:21,760
that are provided to the services

00:20:20,080 --> 00:20:24,159
running in my linkedin mesh um

00:20:21,760 --> 00:20:25,440
those were expecting and and signed by

00:20:24,159 --> 00:20:27,520
uh the uh ca

00:20:25,440 --> 00:20:29,280
intermediate uh that we minted earlier

00:20:27,520 --> 00:20:32,320
so again i'm deploying

00:20:29,280 --> 00:20:34,480
uh the uh kind of uh dummy services

00:20:32,320 --> 00:20:36,320
um and this time i'm going to do the

00:20:34,480 --> 00:20:39,120
trick and the other way around so

00:20:36,320 --> 00:20:40,960
from the htm uh proxy i'm going to open

00:20:39,120 --> 00:20:42,720
the dls connection onto the sleep pod

00:20:40,960 --> 00:20:44,320
and if we grab out this uh the

00:20:42,720 --> 00:20:46,400
certificate which was returned

00:20:44,320 --> 00:20:48,320
i can see here that the certificate was

00:20:46,400 --> 00:20:49,679
indeed um signed by the

00:20:48,320 --> 00:20:51,360
intermediate that we're expecting there

00:20:49,679 --> 00:20:54,720
from the issuer and the

00:20:51,360 --> 00:20:56,880
certificate itself can contain the dns

00:20:54,720 --> 00:20:58,480
in the form um that we're expecting of

00:20:56,880 --> 00:21:00,640
the kind of pod identity

00:20:58,480 --> 00:21:01,600
that we're connected to so in this case

00:21:00,640 --> 00:21:03,600
it's dns

00:21:01,600 --> 00:21:05,360
and indeed it's the uh sleep service

00:21:03,600 --> 00:21:08,960
account uh which was determined

00:21:05,360 --> 00:21:08,960
um as the identity

00:21:09,360 --> 00:21:12,880
thanks josh uh so finally we're now

00:21:11,919 --> 00:21:15,280
gonna

00:21:12,880 --> 00:21:16,000
look at um open service mesh this is

00:21:15,280 --> 00:21:18,159
another

00:21:16,000 --> 00:21:20,880
service mesh that is in the cncf it's in

00:21:18,159 --> 00:21:24,400
the sandbox um just like cert manager

00:21:20,880 --> 00:21:27,679
and uh this is a project from microsoft

00:21:24,400 --> 00:21:30,720
also uses envoy as its as its

00:21:27,679 --> 00:21:33,520
data plane in its data plane and

00:21:30,720 --> 00:21:34,080
it actually has um a component built

00:21:33,520 --> 00:21:36,400
into it

00:21:34,080 --> 00:21:37,919
so from the get-go it had support for

00:21:36,400 --> 00:21:40,240
certificate management

00:21:37,919 --> 00:21:41,679
and that we were responsible for kind of

00:21:40,240 --> 00:21:42,799
generating those dev kits and also

00:21:41,679 --> 00:21:46,400
distributing

00:21:42,799 --> 00:21:48,720
uh it across the across the mesh and

00:21:46,400 --> 00:21:49,440
we actually worked quite early on with

00:21:48,720 --> 00:21:52,159
the project

00:21:49,440 --> 00:21:53,679
to integrate it directly with cert

00:21:52,159 --> 00:21:55,679
manager so you can

00:21:53,679 --> 00:21:57,440
you can use i believe actually called

00:21:55,679 --> 00:21:58,720
volts it's got support for he's got his

00:21:57,440 --> 00:22:01,360
own inbuilt

00:21:58,720 --> 00:22:02,240
component as well uh i think key vault

00:22:01,360 --> 00:22:04,080
has your key vault

00:22:02,240 --> 00:22:06,480
and and cert manager and so josh you're

00:22:04,080 --> 00:22:12,159
going to demonstrate

00:22:06,480 --> 00:22:14,240
how it works with cert manager

00:22:12,159 --> 00:22:15,679
all right so finally um we're going to

00:22:14,240 --> 00:22:19,120
install open service mesh

00:22:15,679 --> 00:22:20,320
so like the others i have a root ca

00:22:19,120 --> 00:22:23,360
installed in the cluster and an

00:22:20,320 --> 00:22:25,520
intermediate minted from that route

00:22:23,360 --> 00:22:27,039
like the others i'm going to extract the

00:22:25,520 --> 00:22:28,480
ca certificate which i'm going to supply

00:22:27,039 --> 00:22:31,039
to open service mesh

00:22:28,480 --> 00:22:32,000
via a certificate and what's the

00:22:31,039 --> 00:22:34,240
interesting thing with

00:22:32,000 --> 00:22:36,159
open service mesh is that integrates as

00:22:34,240 --> 00:22:38,559
mentioned directly with cert manager

00:22:36,159 --> 00:22:39,760
so i actually have an issuer installed

00:22:38,559 --> 00:22:42,000
in the cluster

00:22:39,760 --> 00:22:42,880
which is backed by that intermediate ca

00:22:42,000 --> 00:22:45,919
and what this means

00:22:42,880 --> 00:22:47,520
is that the control plane um well not

00:22:45,919 --> 00:22:48,880
only the control plane of open service

00:22:47,520 --> 00:22:49,919
mesh but also the workloads running in

00:22:48,880 --> 00:22:52,080
the open service mesh

00:22:49,919 --> 00:22:53,520
or request the certificates via stiffer

00:22:52,080 --> 00:22:55,520
request resources

00:22:53,520 --> 00:22:56,880
which are certain manager resources um

00:22:55,520 --> 00:22:58,480
and so the issuer

00:22:56,880 --> 00:23:00,480
that they reference will go ahead and

00:22:58,480 --> 00:23:01,600
sign those resources and what's the nice

00:23:00,480 --> 00:23:03,840
thing about this is that

00:23:01,600 --> 00:23:05,919
um the cert manager issuer which is

00:23:03,840 --> 00:23:07,280
which is referenced by open service mesh

00:23:05,919 --> 00:23:09,120
it's private key doesn't need to live on

00:23:07,280 --> 00:23:10,799
the in the cluster whatsoever

00:23:09,120 --> 00:23:12,320
it can it can live somewhere else uh

00:23:10,799 --> 00:23:15,520
just as long as it can sign

00:23:12,320 --> 00:23:18,720
those certificate request resources

00:23:15,520 --> 00:23:20,320
so lastly um once again i want to verify

00:23:18,720 --> 00:23:22,640
uh that the services that i deployed to

00:23:20,320 --> 00:23:26,000
my overso open service mesh cluster

00:23:22,640 --> 00:23:26,480
um their identities are indeed signed by

00:23:26,000 --> 00:23:29,120
the

00:23:26,480 --> 00:23:29,840
intermediate ca that we minted earlier

00:23:29,120 --> 00:23:31,679
and

00:23:29,840 --> 00:23:33,440
as well the identities are matching uh

00:23:31,679 --> 00:23:35,440
what we're expecting them to be

00:23:33,440 --> 00:23:36,799
so again i've deployed these dummy

00:23:35,440 --> 00:23:38,720
services

00:23:36,799 --> 00:23:39,840
and i'm going to be using the open

00:23:38,720 --> 00:23:42,159
service mesh

00:23:39,840 --> 00:23:43,200
cli to dump out the proxy configuration

00:23:42,159 --> 00:23:46,559
of our

00:23:43,200 --> 00:23:47,760
sleep pod here and we check the

00:23:46,559 --> 00:23:49,760
uh if we grab out the kind of

00:23:47,760 --> 00:23:50,000
certificate which was dumped out we can

00:23:49,760 --> 00:23:52,880
see

00:23:50,000 --> 00:23:53,440
again that the certificate was um signed

00:23:52,880 --> 00:23:55,760
uh

00:23:53,440 --> 00:23:56,720
issued by the uh intermediate that we

00:23:55,760 --> 00:23:58,880
mentioned earlier

00:23:56,720 --> 00:23:59,760
and the identity which is contained

00:23:58,880 --> 00:24:02,960
within that

00:23:59,760 --> 00:24:04,960
uh sleep um certificate is the

00:24:02,960 --> 00:24:06,960
uh identity of the sleep service account

00:24:04,960 --> 00:24:08,880
so in the open service mesh case um is

00:24:06,960 --> 00:24:09,360
represented in dns and you can see here

00:24:08,880 --> 00:24:11,039
that it's

00:24:09,360 --> 00:24:12,400
the sleep service account and the

00:24:11,039 --> 00:24:18,000
default name space

00:24:12,400 --> 00:24:20,320
in the cluster local trust domain

00:24:18,000 --> 00:24:22,400
thanks josh that was great to see the

00:24:20,320 --> 00:24:25,520
meshes um actually in action

00:24:22,400 --> 00:24:28,400
and how it's possible to plug in

00:24:25,520 --> 00:24:29,279
an intermediate ca for the trust domains

00:24:28,400 --> 00:24:31,120
and have

00:24:29,279 --> 00:24:32,480
the mesh issue and those signed

00:24:31,120 --> 00:24:33,360
certificates distribute those to the

00:24:32,480 --> 00:24:36,240
proxies

00:24:33,360 --> 00:24:36,559
and to use uh for the purposes of you

00:24:36,240 --> 00:24:38,880
know

00:24:36,559 --> 00:24:40,320
the service identities are for the uh

00:24:38,880 --> 00:24:42,480
you know for the applications

00:24:40,320 --> 00:24:44,240
it's really really neat uh we should

00:24:42,480 --> 00:24:45,679
probably uh are thinking about this we

00:24:44,240 --> 00:24:48,000
should probably open source

00:24:45,679 --> 00:24:49,120
uh those demos josh yeah let's try and

00:24:48,000 --> 00:24:52,000
let's try and make that happen

00:24:49,120 --> 00:24:52,640
in time for the event yeah of course

00:24:52,000 --> 00:24:54,480
it's worth

00:24:52,640 --> 00:24:55,760
pointing out that uh there are other

00:24:54,480 --> 00:24:57,919
meshes so many many

00:24:55,760 --> 00:24:59,600
uh meshes out there and we had limited

00:24:57,919 --> 00:25:02,960
time today so what we've

00:24:59,600 --> 00:25:04,799
shown of three uh and

00:25:02,960 --> 00:25:06,320
um those you know for the most part they

00:25:04,799 --> 00:25:08,960
you know of course support

00:25:06,320 --> 00:25:11,039
uh spiffy identity and the spiffy

00:25:08,960 --> 00:25:14,320
identity that josh uh spoke about

00:25:11,039 --> 00:25:16,480
but there are there are others um and

00:25:14,320 --> 00:25:17,840
you know there are a number of them here

00:25:16,480 --> 00:25:20,320
that many of you will be

00:25:17,840 --> 00:25:21,600
uh possibly familiar with already and uh

00:25:20,320 --> 00:25:22,559
just worth pointing out there are also

00:25:21,600 --> 00:25:25,600
some sort of mesh

00:25:22,559 --> 00:25:27,200
like implementations out there and um

00:25:25,600 --> 00:25:28,720
specifically here we've got one called

00:25:27,200 --> 00:25:31,279
you know dapr

00:25:28,720 --> 00:25:32,799
uh distributed application runtime uh

00:25:31,279 --> 00:25:34,880
from microsoft

00:25:32,799 --> 00:25:36,320
and you know that's interesting because

00:25:34,880 --> 00:25:37,279
it's you know you won't even process

00:25:36,320 --> 00:25:39,600
runtime

00:25:37,279 --> 00:25:41,440
and it provides much of the

00:25:39,600 --> 00:25:43,520
functionality of a mesh

00:25:41,440 --> 00:25:45,039
and more it's um really interesting

00:25:43,520 --> 00:25:48,159
worth worth checking

00:25:45,039 --> 00:25:50,559
out so we're nearly

00:25:48,159 --> 00:25:52,000
uh at the end of our time now uh in fact

00:25:50,559 --> 00:25:54,000
with

00:25:52,000 --> 00:25:57,360
possibly likely to go over but just to

00:25:54,000 --> 00:26:00,559
summarize service identity really is

00:25:57,360 --> 00:26:00,880
key to zero trust um with service mesh

00:26:00,559 --> 00:26:02,159
and

00:26:00,880 --> 00:26:03,919
you know it really all starts

00:26:02,159 --> 00:26:06,240
effectively with identity and

00:26:03,919 --> 00:26:07,520
getting that right and it provides the

00:26:06,240 --> 00:26:09,919
foundations

00:26:07,520 --> 00:26:10,960
for being able to do uh yeah everything

00:26:09,919 --> 00:26:14,159
else really

00:26:10,960 --> 00:26:15,840
with uh mesh you know

00:26:14,159 --> 00:26:18,159
the mesh provides the means to be able

00:26:15,840 --> 00:26:20,720
to automate those short-lived

00:26:18,159 --> 00:26:21,840
uh certificates uh more often than not

00:26:20,720 --> 00:26:24,880
with spiffy

00:26:21,840 --> 00:26:26,720
and distribute those the proxies uh in

00:26:24,880 --> 00:26:27,360
order for that mutual tls that josh

00:26:26,720 --> 00:26:30,080
spoke about

00:26:27,360 --> 00:26:31,600
to be established between services and

00:26:30,080 --> 00:26:32,400
in most cases this is this is

00:26:31,600 --> 00:26:33,840
transparent

00:26:32,400 --> 00:26:35,360
to the application developer you know

00:26:33,840 --> 00:26:36,240
it's completely built into the platform

00:26:35,360 --> 00:26:37,360
it's not something they need to do

00:26:36,240 --> 00:26:39,600
themselves

00:26:37,360 --> 00:26:41,200
you know a number of the meshes provide

00:26:39,600 --> 00:26:43,600
the ability to

00:26:41,200 --> 00:26:45,360
uh to be extended so you can actually

00:26:43,600 --> 00:26:47,760
start sort of plugging in

00:26:45,360 --> 00:26:49,279
um intermediates as we demonstrated

00:26:47,760 --> 00:26:51,919
meaning that you can actually integrate

00:26:49,279 --> 00:26:53,840
this into an existing enterprise uh

00:26:51,919 --> 00:26:55,279
chain of trust and there's certainly

00:26:53,840 --> 00:26:57,360
more to do

00:26:55,279 --> 00:26:59,279
in this space and you know we're

00:26:57,360 --> 00:27:01,120
involved in some of that with

00:26:59,279 --> 00:27:02,640
the various projects but it's certainly

00:27:01,120 --> 00:27:05,360
great to see where

00:27:02,640 --> 00:27:07,840
we are we already are and what's uh

00:27:05,360 --> 00:27:07,840
possible

00:27:08,240 --> 00:27:11,279
so we look forward to the live q a uh

00:27:10,240 --> 00:27:14,559
thanks everyone

00:27:11,279 --> 00:27:17,919
uh for joining us uh today stay safe

00:27:14,559 --> 00:27:21,440
um hope to see you all sing

00:27:17,919 --> 00:27:23,919
uh at in person eu cubecon and

00:27:21,440 --> 00:27:24,559
um yeah i look forward to seeing you in

00:27:23,919 --> 00:27:27,279
the not too

00:27:24,559 --> 00:27:31,120
distant future thanks everyone all the

00:27:27,279 --> 00:27:31,120

YouTube URL: https://www.youtube.com/watch?v=KvFQ9nSYe2Q


