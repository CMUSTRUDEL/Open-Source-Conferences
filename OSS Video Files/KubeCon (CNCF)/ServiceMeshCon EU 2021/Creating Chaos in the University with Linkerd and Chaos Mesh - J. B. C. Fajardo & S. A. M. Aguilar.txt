Title: Creating Chaos in the University with Linkerd and Chaos Mesh - J. B. C. Fajardo & S. A. M. Aguilar
Publication date: 2021-05-05
Playlist: ServiceMeshCon EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Creating Chaos in the University with Linkerd and Chaos Mesh - Jossie Bismarck Castrillo Fajardo & Sergio Arnaldo Méndez Aguilar, Universidad San Carlos de Guatemala

This talk presents a guide to create chaos engineering experiments using the technical approach and advantages of service meshes. It also shows how you use and interpret collected data from Linkerd during a chaos experiment and how Linkerd can complement Chaos Mesh for other types of chaos experiments. The talk is based on Jossie Castrillo thesis guided by professor Sergio Méndez both from San Carlos University of Guatemala. This talk also shows the challenges that a student has to develop and research about cloud native technologies in order to find valid use cases for Chaos Engineering that can be applied on real life situations. At the end, Jossie shows a short chaos experiment using Linkerd to generate faulty traffic and Chaos Mesh for additional chaos experiments, at the same time Sergio explains how to interpret the collected metrics and data from that experiment.
Captions: 
	00:00:00,160 --> 00:00:04,080
okay hello hello and welcome to the

00:00:02,960 --> 00:00:08,000
service mesh con

00:00:04,080 --> 00:00:10,400
europe 2021 and we're going to talk

00:00:08,000 --> 00:00:13,920
about creating chaos in the university

00:00:10,400 --> 00:00:16,320
using linker d and cal smash

00:00:13,920 --> 00:00:17,119
a little bit about me my name is jessie

00:00:16,320 --> 00:00:19,760
castria

00:00:17,119 --> 00:00:20,320
i'm a science and systems engineering

00:00:19,760 --> 00:00:23,359
student

00:00:20,320 --> 00:00:26,480
at san carlos university

00:00:23,359 --> 00:00:28,480
currently i'm working in idt as a

00:00:26,480 --> 00:00:32,320
technical sport

00:00:28,480 --> 00:00:35,440
and checking some network

00:00:32,320 --> 00:00:37,520
stuff in latin america i'm a freelance

00:00:35,440 --> 00:00:40,719
developer and a cloud native

00:00:37,520 --> 00:00:40,719
enthusiast enthusiast

00:00:42,079 --> 00:00:45,200
well a little bit about me i am sergio

00:00:44,239 --> 00:00:47,440
mendes i am

00:00:45,200 --> 00:00:50,160
a professor of operating systems at the

00:00:47,440 --> 00:00:52,160
university of san carlos of guatemala

00:00:50,160 --> 00:00:54,480
i really like to play with clown native

00:00:52,160 --> 00:00:55,520
technologies and special from cncf

00:00:54,480 --> 00:00:58,559
projects

00:00:55,520 --> 00:00:58,960
and i do a little bit of devops at jello

00:00:58,559 --> 00:01:00,960
and

00:00:58,960 --> 00:01:03,760
i am also the organizer of cloud native

00:01:00,960 --> 00:01:06,960
guatemala cncf community group

00:01:03,760 --> 00:01:09,760
and i am a linker the hero of february

00:01:06,960 --> 00:01:09,760
of this year

00:01:11,200 --> 00:01:19,040
chaos in the university how

00:01:16,080 --> 00:01:21,439
well let's get started with some cartoon

00:01:19,040 --> 00:01:22,000
this cartoon reflects how the chaos in

00:01:21,439 --> 00:01:25,280
general

00:01:22,000 --> 00:01:27,920
could appear in our system um

00:01:25,280 --> 00:01:28,320
how we create these things how how we

00:01:27,920 --> 00:01:31,920
create

00:01:28,320 --> 00:01:31,920
chaos with this kind of tools

00:01:32,960 --> 00:01:39,840
okay this presentation is based on

00:01:37,200 --> 00:01:41,360
my thesis project that i'm working with

00:01:39,840 --> 00:01:46,320
sergio

00:01:41,360 --> 00:01:48,720
and well here are some challenges

00:01:46,320 --> 00:01:50,399
first learn about cloud native

00:01:48,720 --> 00:01:54,159
technologies

00:01:50,399 --> 00:01:56,479
from scratch a little literally

00:01:54,159 --> 00:01:58,000
find quality source of information about

00:01:56,479 --> 00:01:59,680
cows engineering

00:01:58,000 --> 00:02:01,119
understand and implement health

00:01:59,680 --> 00:02:04,560
experiments

00:02:01,119 --> 00:02:09,840
share this knowledge in my country that

00:02:04,560 --> 00:02:09,840
well this is currently a big challenge

00:02:12,319 --> 00:02:17,680
the service measures what is a service

00:02:14,480 --> 00:02:20,879
mesh so a service mesh is like a kind of

00:02:17,680 --> 00:02:24,800
let's say future door ability to

00:02:20,879 --> 00:02:25,280
create a stable network in your services

00:02:24,800 --> 00:02:28,879
um

00:02:25,280 --> 00:02:31,519
the service mesh just a proxy instance

00:02:28,879 --> 00:02:33,360
in your deployments like a sidecar kind

00:02:31,519 --> 00:02:36,480
of deployment using containers

00:02:33,360 --> 00:02:37,040
in order to evaluate evaluate the

00:02:36,480 --> 00:02:40,160
traffic

00:02:37,040 --> 00:02:42,640
and decide what things has to do and

00:02:40,160 --> 00:02:43,920
that kind of things so give your

00:02:42,640 --> 00:02:46,879
networking

00:02:43,920 --> 00:02:49,280
more reliable more stable secure and

00:02:46,879 --> 00:02:49,280
everything

00:02:49,360 --> 00:02:54,080
the benefits are like well you can check

00:02:52,319 --> 00:02:54,720
the state of your services in the

00:02:54,080 --> 00:02:56,800
network

00:02:54,720 --> 00:02:57,920
it's really scalable and implement

00:02:56,800 --> 00:03:00,480
services that are

00:02:57,920 --> 00:03:01,200
stable in general you can split the

00:03:00,480 --> 00:03:04,000
traffic

00:03:01,200 --> 00:03:04,720
implement some security a tls layered

00:03:04,000 --> 00:03:08,000
and

00:03:04,720 --> 00:03:10,560
that kind of things um using this cycle

00:03:08,000 --> 00:03:12,000
proxy to detect the traffic and you

00:03:10,560 --> 00:03:15,040
don't have to modify

00:03:12,000 --> 00:03:16,319
a lot of times your application so no

00:03:15,040 --> 00:03:19,440
modifications

00:03:16,319 --> 00:03:22,239
to has the power of

00:03:19,440 --> 00:03:22,239
service meshes

00:03:22,480 --> 00:03:26,720
okay now what is chaos engineering in an

00:03:25,599 --> 00:03:29,360
easy way

00:03:26,720 --> 00:03:30,640
is making experiments on a system to

00:03:29,360 --> 00:03:32,480
improve his capacity

00:03:30,640 --> 00:03:33,680
to support extreme conditions in

00:03:32,480 --> 00:03:35,920
production

00:03:33,680 --> 00:03:37,120
the objective of chaos engineering is to

00:03:35,920 --> 00:03:40,480
cause failure

00:03:37,120 --> 00:03:43,360
on purpose of course to identify where

00:03:40,480 --> 00:03:44,000
and under what condition our system can

00:03:43,360 --> 00:03:47,760
fail

00:03:44,000 --> 00:03:51,120
and improve our system of course

00:03:47,760 --> 00:03:54,879
well chaos engineering is based

00:03:51,120 --> 00:03:56,480
on five principles first build a

00:03:54,879 --> 00:03:59,920
hypothesis around

00:03:56,480 --> 00:04:01,360
and steady state behavior barrier real

00:03:59,920 --> 00:04:04,400
world bands

00:04:01,360 --> 00:04:07,040
run experiments in production automate

00:04:04,400 --> 00:04:11,519
these experiments to run continuously

00:04:07,040 --> 00:04:11,519
and minimize the less radius

00:04:11,680 --> 00:04:17,199
some benefits of gas engineering well

00:04:14,879 --> 00:04:18,400
identify vulnerabilities and potential

00:04:17,199 --> 00:04:22,000
failures

00:04:18,400 --> 00:04:24,800
improver systems and have a proactive

00:04:22,000 --> 00:04:24,800
system design

00:04:25,120 --> 00:04:28,560
here are some examples of where we can

00:04:28,080 --> 00:04:32,000
apply

00:04:28,560 --> 00:04:35,280
some case meaning test first

00:04:32,000 --> 00:04:36,400
in the application i mean at a software

00:04:35,280 --> 00:04:39,120
level

00:04:36,400 --> 00:04:39,840
in networking by slowing trapping

00:04:39,120 --> 00:04:44,160
through traffic

00:04:39,840 --> 00:04:47,600
losing packages dns failures

00:04:44,160 --> 00:04:51,360
bots killing them

00:04:47,600 --> 00:04:55,840
producing some fillers in the bots

00:04:51,360 --> 00:04:56,320
the cpu run memory and operating systems

00:04:55,840 --> 00:04:59,600
as

00:04:56,320 --> 00:05:03,120
some examples of course

00:04:59,600 --> 00:05:04,800
okay yeah for casino experiments we

00:05:03,120 --> 00:05:07,919
define

00:05:04,800 --> 00:05:11,680
a group of steps that we can follow

00:05:07,919 --> 00:05:14,800
to create a this experiment first

00:05:11,680 --> 00:05:16,880
we have to define the framework we need

00:05:14,800 --> 00:05:18,960
have an architecture with the containers

00:05:16,880 --> 00:05:21,520
and orchestration

00:05:18,960 --> 00:05:22,240
this architecture has to be observable

00:05:21,520 --> 00:05:25,600
manageable

00:05:22,240 --> 00:05:29,280
safe and extensible

00:05:25,600 --> 00:05:32,639
yes define this architecture of course

00:05:29,280 --> 00:05:36,080
define a healthy state be sure of what

00:05:32,639 --> 00:05:37,840
what kind of experiment we want to try

00:05:36,080 --> 00:05:39,520
we can try a lot of experiments of

00:05:37,840 --> 00:05:43,360
course uh

00:05:39,520 --> 00:05:46,720
define a hypothesis a hypothesis of what

00:05:43,360 --> 00:05:47,360
thing could happen identify the critical

00:05:46,720 --> 00:05:51,039
points

00:05:47,360 --> 00:05:54,320
of the experiments to implement owners

00:05:51,039 --> 00:05:57,120
understand this pretty points verify

00:05:54,320 --> 00:05:58,319
what could go wrong do i know what will

00:05:57,120 --> 00:06:01,520
happen if it fails

00:05:58,319 --> 00:06:04,840
or if it doesn't uh set a smile

00:06:01,520 --> 00:06:06,720
last radius for the beginning define our

00:06:04,840 --> 00:06:10,240
kpis

00:06:06,720 --> 00:06:14,160
english scales that is my favorite part

00:06:10,240 --> 00:06:17,919
verify the results and then we have

00:06:14,160 --> 00:06:20,960
a decision to make to improve our system

00:06:17,919 --> 00:06:23,520
if we find some vulnerability or

00:06:20,960 --> 00:06:26,720
increase chaos and

00:06:23,520 --> 00:06:26,720
keep doing experiments

00:06:28,080 --> 00:06:31,919
well right now the technology are we are

00:06:31,199 --> 00:06:34,720
going to use

00:06:31,919 --> 00:06:35,520
lingard in some parts just for the

00:06:34,720 --> 00:06:37,280
faulty traffic

00:06:35,520 --> 00:06:40,160
and linker this is a service mesh for

00:06:37,280 --> 00:06:41,360
kubernetes it's really easier to install

00:06:40,160 --> 00:06:44,240
and implement

00:06:41,360 --> 00:06:45,520
in the way to get some more surfability

00:06:44,240 --> 00:06:48,319
implement security

00:06:45,520 --> 00:06:48,800
debugging your services in the network

00:06:48,319 --> 00:06:52,000
um

00:06:48,800 --> 00:06:54,400
you can split the traffic and get some

00:06:52,000 --> 00:06:55,919
golden metrics to evaluate some graphics

00:06:54,400 --> 00:06:57,759
about this traffic

00:06:55,919 --> 00:06:59,599
and maybe you can use this traffic

00:06:57,759 --> 00:07:01,120
splitting feature for

00:06:59,599 --> 00:07:04,960
progressive delivery and they are

00:07:01,120 --> 00:07:04,960
another features of linker g

00:07:05,280 --> 00:07:09,120
and the other tool we're going to use is

00:07:07,919 --> 00:07:11,680
chaos mesh

00:07:09,120 --> 00:07:12,639
well kelsmesh is a chelsea engineering

00:07:11,680 --> 00:07:15,280
platform

00:07:12,639 --> 00:07:16,000
that orchestrates scales and kubernetes

00:07:15,280 --> 00:07:19,280
environments

00:07:16,000 --> 00:07:22,479
by fault injection methods we can

00:07:19,280 --> 00:07:26,639
provoke faults in parts network

00:07:22,479 --> 00:07:31,120
file systems kernel and a lot more

00:07:26,639 --> 00:07:33,680
experiments well why chaos mesh

00:07:31,120 --> 00:07:35,120
this tool works better on service mesh

00:07:33,680 --> 00:07:38,240
architecture

00:07:35,120 --> 00:07:39,120
applied on microservices creating a mesh

00:07:38,240 --> 00:07:41,599
oriented

00:07:39,120 --> 00:07:41,599
failure

00:07:42,880 --> 00:07:48,240
let's go to the demonstration part

00:07:46,160 --> 00:07:50,080
well talking about how this

00:07:48,240 --> 00:07:51,919
demonstration is built um

00:07:50,080 --> 00:07:53,759
we have the architecture a little bit

00:07:51,919 --> 00:07:54,800
about the things that we are doing on

00:07:53,759 --> 00:07:56,879
this

00:07:54,800 --> 00:07:58,960
we have a kubernetes cluster installed

00:07:56,879 --> 00:08:02,639
installing gpa

00:07:58,960 --> 00:08:03,120
you can we have two nodes with two cpus

00:08:02,639 --> 00:08:06,319
of

00:08:03,120 --> 00:08:08,400
with four gigabytes of ram we have

00:08:06,319 --> 00:08:11,120
two main applications a client that

00:08:08,400 --> 00:08:12,400
sends traffic to apache deployment on

00:08:11,120 --> 00:08:15,199
kubernetes

00:08:12,400 --> 00:08:16,240
we are using cx inside this client

00:08:15,199 --> 00:08:18,639
deployment

00:08:16,240 --> 00:08:19,759
that sends traffic to apache and we are

00:08:18,639 --> 00:08:23,280
using the feature

00:08:19,759 --> 00:08:25,440
of traffic splitting of linkerd

00:08:23,280 --> 00:08:27,919
in this way linkerd is going to send the

00:08:25,440 --> 00:08:31,280
traffic to apache the 50

00:08:27,919 --> 00:08:34,000
and the other 50 to the

00:08:31,280 --> 00:08:34,479
error injector deployment that returns

00:08:34,000 --> 00:08:36,719
uh

00:08:34,479 --> 00:08:38,320
faulty traffic and you're splitting this

00:08:36,719 --> 00:08:42,000
traffic 50 and 50

00:08:38,320 --> 00:08:43,279
50 good 50 baht um that's the first part

00:08:42,000 --> 00:08:46,880
using a linkard

00:08:43,279 --> 00:08:47,519
uh for this kind of of pretty basic

00:08:46,880 --> 00:08:50,880
chaos

00:08:47,519 --> 00:08:52,560
experiment using service meshes um

00:08:50,880 --> 00:08:55,120
just for faulty traffic and see what

00:08:52,560 --> 00:08:58,160
happens in the other side we are going

00:08:55,120 --> 00:09:01,920
to use chaos mesh

00:08:58,160 --> 00:09:02,320
trying to kill pots failure pots in some

00:09:01,920 --> 00:09:04,800
way

00:09:02,320 --> 00:09:07,200
and see what happens using the same

00:09:04,800 --> 00:09:09,279
experiment

00:09:07,200 --> 00:09:12,480
putting all the things together down we

00:09:09,279 --> 00:09:14,720
are going to do a walkthrough

00:09:12,480 --> 00:09:16,240
over the different dashboards of

00:09:14,720 --> 00:09:18,800
linkardi and killsmesh

00:09:16,240 --> 00:09:20,800
and explain a little bit the code of

00:09:18,800 --> 00:09:23,839
these experiments using link or the

00:09:20,800 --> 00:09:23,839
ikea's mesh in general

00:09:24,720 --> 00:09:31,279
okay let's check the experiments

00:09:28,959 --> 00:09:33,760
because of the time i already have

00:09:31,279 --> 00:09:33,760
everything

00:09:34,160 --> 00:09:37,600
okay with the architecture running for

00:09:36,720 --> 00:09:40,720
example

00:09:37,600 --> 00:09:43,839
here is the apache service

00:09:40,720 --> 00:09:47,360
deployment file we defined

00:09:43,839 --> 00:09:50,240
for replicas for the purchaser

00:09:47,360 --> 00:09:51,920
server the replicas for the client that

00:09:50,240 --> 00:09:53,839
is going to be

00:09:51,920 --> 00:09:56,240
constantly sending requests to the

00:09:53,839 --> 00:09:56,240
server

00:09:56,880 --> 00:10:02,800
the um the error injector

00:10:00,720 --> 00:10:03,760
and then we have two additional files

00:10:02,800 --> 00:10:06,399
first

00:10:03,760 --> 00:10:07,680
the faulty traffic file for linkerd in

00:10:06,399 --> 00:10:10,800
which we define the

00:10:07,680 --> 00:10:13,839
traffic split and

00:10:10,800 --> 00:10:15,600
that is going to send 50 50 50 to the

00:10:13,839 --> 00:10:17,279
purchase server and 50 to the error

00:10:15,600 --> 00:10:19,600
injector

00:10:17,279 --> 00:10:20,640
and for the second experiment we are

00:10:19,600 --> 00:10:24,160
going to

00:10:20,640 --> 00:10:27,600
define two experiments with chaos mesh

00:10:24,160 --> 00:10:31,440
the first one that is going to

00:10:27,600 --> 00:10:33,360
kill parts every 12 seconds in this case

00:10:31,440 --> 00:10:35,920
the apache server

00:10:33,360 --> 00:10:38,320
pods and the second experiment is just

00:10:35,920 --> 00:10:41,760
going to

00:10:38,320 --> 00:10:42,240
cause some failure in the paths but this

00:10:41,760 --> 00:10:45,279
one

00:10:42,240 --> 00:10:48,640
every six seconds

00:10:45,279 --> 00:10:51,200
okay now i already have the

00:10:48,640 --> 00:10:52,880
two dashboards running the one with

00:10:51,200 --> 00:10:57,440
linker d

00:10:52,880 --> 00:11:00,720
we're going to get inside the namespace

00:10:57,440 --> 00:11:02,720
and the chaos mesh dashboard

00:11:00,720 --> 00:11:05,440
as you can see there is no experiment

00:11:02,720 --> 00:11:10,160
running right now

00:11:05,440 --> 00:11:13,680
um let's wait uh for the linker detail

00:11:10,160 --> 00:11:16,160
to load as you can see here are the four

00:11:13,680 --> 00:11:21,200
parts for the apache server

00:11:16,160 --> 00:11:21,200
and the bots for the client

00:11:21,920 --> 00:11:25,920
yeah in this part now well we have the

00:11:24,240 --> 00:11:28,800
linker the dashboard

00:11:25,920 --> 00:11:30,399
uh it's showing how the apache and the

00:11:28,800 --> 00:11:32,320
client are

00:11:30,399 --> 00:11:34,480
in these connections and in traffic and

00:11:32,320 --> 00:11:38,399
that things um

00:11:34,480 --> 00:11:40,800
well if we apply the the traffic split

00:11:38,399 --> 00:11:42,880
we are going to see how the traffic is

00:11:40,800 --> 00:11:45,760
failuring and that kind of things

00:11:42,880 --> 00:11:46,399
and the relation between the faulty

00:11:45,760 --> 00:11:49,839
traffic

00:11:46,399 --> 00:11:50,959
the success rate and that kind of things

00:11:49,839 --> 00:11:53,839
in this dashboard

00:11:50,959 --> 00:11:55,600
so maybe uh we can move to that part to

00:11:53,839 --> 00:11:58,800
the traffic splitting

00:11:55,600 --> 00:12:04,480
faulty injection of the traffic

00:11:58,800 --> 00:12:10,399
okay first we're going to inject the air

00:12:04,480 --> 00:12:12,639
the faulty traffic let's

00:12:10,399 --> 00:12:12,639
see

00:12:21,200 --> 00:12:25,839
okay i'm going to get the photo traffic

00:12:23,200 --> 00:12:25,839
file

00:12:39,200 --> 00:12:43,600
as you can see and here is the error

00:12:42,639 --> 00:12:46,639
injector

00:12:43,600 --> 00:12:46,639
let's start running

00:12:48,800 --> 00:12:52,079
yeah this part is going to show this

00:12:51,519 --> 00:12:54,000
kind of

00:12:52,079 --> 00:12:57,200
failure in the service in the error

00:12:54,000 --> 00:13:00,399
injector maybe we can go to the split

00:12:57,200 --> 00:13:03,440
part the traffic split

00:13:00,399 --> 00:13:03,440
in the first one

00:13:04,320 --> 00:13:07,519
yeah in this part is going to show how

00:13:06,720 --> 00:13:11,440
the traffic

00:13:07,519 --> 00:13:14,800
is moving um it's going to show that

00:13:11,440 --> 00:13:15,440
the success rate is going to be like 50

00:13:14,800 --> 00:13:19,360
percent

00:13:15,440 --> 00:13:24,639
but right now is splitted on 50 and 50

00:13:19,360 --> 00:13:24,639
percent in general we can see

00:13:24,720 --> 00:13:29,760
the the requests that are crossing this

00:13:28,240 --> 00:13:34,720
kind of service in the

00:13:29,760 --> 00:13:38,399
downside of this page

00:13:34,720 --> 00:13:40,399
um i guess basically the

00:13:38,399 --> 00:13:41,680
this part of the traffic split maybe we

00:13:40,399 --> 00:13:45,680
can come back

00:13:41,680 --> 00:13:48,079
to the main to the main

00:13:45,680 --> 00:13:50,320
dashboard okay so let's go to the client

00:13:48,079 --> 00:13:53,040
part

00:13:50,320 --> 00:13:54,720
in the client part is going to show this

00:13:53,040 --> 00:13:57,519
relation between these

00:13:54,720 --> 00:13:58,320
deployments uh how the client is sending

00:13:57,519 --> 00:14:01,360
traffic

00:13:58,320 --> 00:14:02,399
to the error injector on the apache

00:14:01,360 --> 00:14:05,040
basically

00:14:02,399 --> 00:14:06,399
the client sends the traffic to the

00:14:05,040 --> 00:14:08,720
apache service

00:14:06,399 --> 00:14:09,519
on the kubernetes and it's going to the

00:14:08,720 --> 00:14:11,360
traffic

00:14:09,519 --> 00:14:14,079
to the other service that connects to

00:14:11,360 --> 00:14:17,600
the deployment to the error injector

00:14:14,079 --> 00:14:20,639
um maybe we can go to the

00:14:17,600 --> 00:14:24,720
grafana dashboard inside the client

00:14:20,639 --> 00:14:24,720
no sorry inside the apache

00:14:26,720 --> 00:14:30,160
yeah linker d provides you with some

00:14:29,120 --> 00:14:33,920
dashboard that

00:14:30,160 --> 00:14:37,120
shows the requests per second of of your

00:14:33,920 --> 00:14:40,399
of your current service that is running

00:14:37,120 --> 00:14:42,000
right now is only be affected by the

00:14:40,399 --> 00:14:45,360
faulty traffic of

00:14:42,000 --> 00:14:48,160
of linkerd using this faulty

00:14:45,360 --> 00:14:48,639
traffic feature using traffic splitting

00:14:48,160 --> 00:14:52,639
and

00:14:48,639 --> 00:14:55,120
that's the general uh metrics that

00:14:52,639 --> 00:14:55,839
is showing this dashboard the success

00:14:55,120 --> 00:14:57,519
rate the

00:14:55,839 --> 00:14:59,680
records rate and the latest thing that

00:14:57,519 --> 00:15:01,040
are basically the golden metrics for

00:14:59,680 --> 00:15:03,440
this kind

00:15:01,040 --> 00:15:04,399
of dashboards and information that link

00:15:03,440 --> 00:15:07,600
are these shows so

00:15:04,399 --> 00:15:11,199
that's the way um that we use

00:15:07,600 --> 00:15:14,639
service mesh to generate faulty traffic

00:15:11,199 --> 00:15:19,040
so let's move to the part to the

00:15:14,639 --> 00:15:23,440
chaos engineering test using chaos mesh

00:15:19,040 --> 00:15:23,440
okay first we're going to stop this

00:15:24,839 --> 00:15:29,120
experiment

00:15:26,800 --> 00:15:31,360
and we're going we're going to run the

00:15:29,120 --> 00:15:35,040
galaxy mesh experiment

00:15:31,360 --> 00:15:41,839
i'm going to run the podcail file

00:15:35,040 --> 00:15:41,839
start injecting this experiment

00:15:42,240 --> 00:15:45,759
okay as you can see

00:15:45,839 --> 00:15:49,920
it starts loading

00:15:50,079 --> 00:15:58,639
let's see some okay as you can see here

00:15:54,079 --> 00:16:00,800
a one pod was very killed and the system

00:15:58,639 --> 00:16:03,040
turned it on again we're going to see

00:16:00,800 --> 00:16:03,040
some

00:16:04,240 --> 00:16:11,199
some live metrics

00:16:08,639 --> 00:16:11,199
the pots

00:16:12,160 --> 00:16:16,639
okay as you can see here the experiment

00:16:15,839 --> 00:16:20,639
killed two

00:16:16,639 --> 00:16:24,320
parts it's generating

00:16:20,639 --> 00:16:26,959
another ones to fail

00:16:24,320 --> 00:16:27,759
and it's going to keep this way

00:16:26,959 --> 00:16:31,040
constantly

00:16:27,759 --> 00:16:31,759
cooling and making them fail we're going

00:16:31,040 --> 00:16:37,839
to check

00:16:31,759 --> 00:16:37,839
the chaos mesh dashboard

00:16:38,480 --> 00:16:44,399
we're going to refresh it okay

00:16:42,240 --> 00:16:45,759
as you can see now there are two

00:16:44,399 --> 00:16:50,079
experiments running

00:16:45,759 --> 00:16:53,839
the bot queue and the pod failure

00:16:50,079 --> 00:16:55,920
in the experiments area you can see when

00:16:53,839 --> 00:16:57,120
every six seconds the full failure

00:16:55,920 --> 00:17:00,639
experiment

00:16:57,120 --> 00:17:04,079
it's provoking some

00:17:00,639 --> 00:17:08,959
some failure and

00:17:04,079 --> 00:17:11,600
let's let's refresh they drop on a

00:17:08,959 --> 00:17:11,600
dashboard

00:17:12,240 --> 00:17:19,360
okay as you can see all the metrics

00:17:16,240 --> 00:17:22,799
are are getting crazy the

00:17:19,360 --> 00:17:25,839
rick is right the latency it's

00:17:22,799 --> 00:17:30,840
going upside upside down

00:17:25,839 --> 00:17:32,000
with every failure and of course we also

00:17:30,840 --> 00:17:36,160
can

00:17:32,000 --> 00:17:40,799
have some checking with link rd

00:17:36,160 --> 00:17:45,120
as you can see every time an experiment

00:17:40,799 --> 00:17:48,880
starts running the apache server

00:17:45,120 --> 00:17:52,400
starts loading and the experiment

00:17:48,880 --> 00:17:56,559
keeps going and going and killing

00:17:52,400 --> 00:18:01,280
and turning on again all the butts

00:17:56,559 --> 00:18:05,520
at least for this short experiment

00:18:01,280 --> 00:18:05,520
now let's continue with the

00:18:05,679 --> 00:18:08,400
presentation

00:18:10,960 --> 00:18:17,280
okay some lessons that we'll learn with

00:18:14,720 --> 00:18:20,640
all of this process first how to

00:18:17,280 --> 00:18:23,360
implement step-by-step calc experiments

00:18:20,640 --> 00:18:25,120
implement cal experiments to improve our

00:18:23,360 --> 00:18:28,559
system

00:18:25,120 --> 00:18:31,760
is not as difficult as it sounds

00:18:28,559 --> 00:18:35,039
and understand how a student thesis

00:18:31,760 --> 00:18:35,840
can help up and source projects and the

00:18:35,039 --> 00:18:40,720
industry

00:18:35,840 --> 00:18:40,720
to grow up and solve some real life

00:18:40,840 --> 00:18:45,280
problems

00:18:42,000 --> 00:18:47,520
here are like a kind of references or

00:18:45,280 --> 00:18:48,640
websites that you can check to join the

00:18:47,520 --> 00:18:51,840
linkers community

00:18:48,640 --> 00:18:53,840
chaos mesh or visiting their slacks

00:18:51,840 --> 00:18:56,160
on cncf channel and their own

00:18:53,840 --> 00:18:58,640
communities and

00:18:56,160 --> 00:19:01,280
general website of contents about girls

00:18:58,640 --> 00:19:01,280
in january

00:19:01,600 --> 00:19:06,400
and of course because of the time we

00:19:03,840 --> 00:19:08,799
didn't have a lot of time to explain

00:19:06,400 --> 00:19:09,760
every detail of the experiment but we're

00:19:08,799 --> 00:19:12,559
going to leave

00:19:09,760 --> 00:19:13,120
every detail in the repository every

00:19:12,559 --> 00:19:16,240
step

00:19:13,120 --> 00:19:19,760
and command you will use to

00:19:16,240 --> 00:19:19,760
replicate these experiments

00:19:20,480 --> 00:19:27,760
also the link of the slides

00:19:24,000 --> 00:19:31,520
and you can follow us in my case with my

00:19:27,760 --> 00:19:33,760
link tree and me with my personal

00:19:31,520 --> 00:19:37,039
website

00:19:33,760 --> 00:19:39,840
and well that's all thank you very much

00:19:37,039 --> 00:19:39,840

YouTube URL: https://www.youtube.com/watch?v=vGVtnP8gOl8


