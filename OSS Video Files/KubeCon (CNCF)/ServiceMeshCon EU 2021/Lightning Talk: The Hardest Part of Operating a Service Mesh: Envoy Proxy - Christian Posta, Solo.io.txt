Title: Lightning Talk: The Hardest Part of Operating a Service Mesh: Envoy Proxy - Christian Posta, Solo.io
Publication date: 2021-05-05
Playlist: ServiceMeshCon EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: The Hardest Part of Operating a Service Mesh: Envoy Proxy - Christian Posta, Solo.io

Operating a service mesh in production has some pragmatic complexities with some contributed by Envoy’s underlying powerful feature set. Requests flow over the data plane proxies which means this is an important piece of technology to understand how to operationalize, debug, tune, and observe. In this talk, we share our experience at Solo.io supporting customers on Envoy-based technology both at the edge and in a mesh and share lessons learned such as: * understand which telemetry signals to watch for config sync issues, CPU, and memory pressure * enabling access logging and enhancing it with dynamic metadata * debugging connectivity issues with Envoy logs, metrics * tuning for cloud environments with keep-alive settings Attendees will leave with a better confidence of running Envoy-based service meshes such as Istio, Consul, Kuma, and OpenServiceMesh in production.
Captions: 
	00:00:00,160 --> 00:00:04,640
hello and thanks for coming to my talk

00:00:02,800 --> 00:00:07,279
at servicemishcon eu

00:00:04,640 --> 00:00:08,880
2021 i'm going to be talking about

00:00:07,279 --> 00:00:11,280
service mesh

00:00:08,880 --> 00:00:12,160
and this is a topic that i've been very

00:00:11,280 --> 00:00:16,240
interested in

00:00:12,160 --> 00:00:17,920
for a long time now um i got involved in

00:00:16,240 --> 00:00:20,480
the ongoing seo communities

00:00:17,920 --> 00:00:21,840
back before you see i was even ga and

00:00:20,480 --> 00:00:25,359
i've been working with

00:00:21,840 --> 00:00:27,760
customers and and users of istio

00:00:25,359 --> 00:00:28,960
and other service meshes actually across

00:00:27,760 --> 00:00:30,720
the world at large and small

00:00:28,960 --> 00:00:31,920
organizations helping them operate and

00:00:30,720 --> 00:00:35,680
productionize

00:00:31,920 --> 00:00:37,200
their service mesh and and continue to

00:00:35,680 --> 00:00:38,879
modernize their application

00:00:37,200 --> 00:00:41,840
infrastructure and

00:00:38,879 --> 00:00:42,559
envoy proxy is the center of this talk

00:00:41,840 --> 00:00:44,640
today

00:00:42,559 --> 00:00:46,480
because a lot of service meshes use

00:00:44,640 --> 00:00:47,520
envoy under the covers and for good

00:00:46,480 --> 00:00:50,399
reason

00:00:47,520 --> 00:00:51,199
envoy is an open source project it's nc

00:00:50,399 --> 00:00:54,559
plus

00:00:51,199 --> 00:00:58,160
very fast very feature rich

00:00:54,559 --> 00:01:00,960
and was built with a dynamic api

00:00:58,160 --> 00:01:02,719
to drive its configuration so no flat

00:01:00,960 --> 00:01:03,760
files and hot reloading and all this

00:01:02,719 --> 00:01:06,000
stuff

00:01:03,760 --> 00:01:08,000
but on voip proxy or any service proxy

00:01:06,000 --> 00:01:10,080
under the covers in a service mesh kit

00:01:08,000 --> 00:01:13,920
is on the request path and can be

00:01:10,080 --> 00:01:14,720
kind of complicated envoy can be run as

00:01:13,920 --> 00:01:16,560
a sidecar

00:01:14,720 --> 00:01:19,040
as i've mentioned in a service mesh

00:01:16,560 --> 00:01:21,280
pattern where the proxy lives

00:01:19,040 --> 00:01:23,600
with the application instance in

00:01:21,280 --> 00:01:25,840
kubernetes this would be with a pod

00:01:23,600 --> 00:01:27,119
in a vmworld this would be envoy living

00:01:25,840 --> 00:01:30,079
on a vm

00:01:27,119 --> 00:01:30,960
envoy can also live at the edge of a

00:01:30,079 --> 00:01:34,000
boundary

00:01:30,960 --> 00:01:36,720
and do reverse proxying type type

00:01:34,000 --> 00:01:38,000
load balancing and routing and so forth

00:01:36,720 --> 00:01:40,640
and

00:01:38,000 --> 00:01:42,240
envoy when it's in the request path

00:01:40,640 --> 00:01:43,920
especially for developers who are not

00:01:42,240 --> 00:01:46,960
familiar with

00:01:43,920 --> 00:01:49,520
envoy might see it as

00:01:46,960 --> 00:01:51,920
a black box and this is not specific to

00:01:49,520 --> 00:01:54,399
envoy this is any any service mesh

00:01:51,920 --> 00:01:56,159
data plane proxy so what happens when

00:01:54,399 --> 00:01:57,280
things start to slow down or don't

00:01:56,159 --> 00:02:00,320
behave the way

00:01:57,280 --> 00:02:01,759
you're expecting if there are issues how

00:02:00,320 --> 00:02:03,920
do you actually troubleshoot it

00:02:01,759 --> 00:02:05,439
and that is one of the most important

00:02:03,920 --> 00:02:06,079
and sometimes the hardest part of

00:02:05,439 --> 00:02:09,119
operating

00:02:06,079 --> 00:02:10,560
a service mesh which is understanding

00:02:09,119 --> 00:02:11,760
the data plane

00:02:10,560 --> 00:02:14,000
so in this talk we're going to take a

00:02:11,760 --> 00:02:15,280
look at a few tips and tricks that we

00:02:14,000 --> 00:02:17,920
have learned and i've

00:02:15,280 --> 00:02:20,000
learned over the years helping folks

00:02:17,920 --> 00:02:23,760
operationalize envoy-based

00:02:20,000 --> 00:02:25,599
technologies like service mesh

00:02:23,760 --> 00:02:28,000
so the first thing you should know is

00:02:25,599 --> 00:02:30,080
that envoy is not a black box envoy is a

00:02:28,000 --> 00:02:30,879
white box you can see into it and you

00:02:30,080 --> 00:02:33,200
can

00:02:30,879 --> 00:02:34,800
uh glean a lot of information about

00:02:33,200 --> 00:02:37,519
what's happening

00:02:34,800 --> 00:02:39,040
inside the proxy on the request path

00:02:37,519 --> 00:02:40,319
over time

00:02:39,040 --> 00:02:42,959
so first of all there's an admin

00:02:40,319 --> 00:02:43,760
interface an http admin interface that

00:02:42,959 --> 00:02:46,160
you can

00:02:43,760 --> 00:02:46,959
uh query for things like certificate

00:02:46,160 --> 00:02:49,280
information

00:02:46,959 --> 00:02:50,160
things like what what upstream clusters

00:02:49,280 --> 00:02:51,920
that are

00:02:50,160 --> 00:02:53,519
routable and what endpoints make up

00:02:51,920 --> 00:02:55,599
those clusters

00:02:53,519 --> 00:02:57,120
things like changing the log levels

00:02:55,599 --> 00:02:59,360
which will become very important

00:02:57,120 --> 00:03:00,480
as you're trying to debug things as the

00:02:59,360 --> 00:03:04,720
requests are going through

00:03:00,480 --> 00:03:07,360
envoy and really important

00:03:04,720 --> 00:03:09,280
features like being able to tap the

00:03:07,360 --> 00:03:11,840
request and response chains

00:03:09,280 --> 00:03:12,640
as well as being able to do profiling

00:03:11,840 --> 00:03:15,280
and

00:03:12,640 --> 00:03:16,720
memory dumps so there's a lot of really

00:03:15,280 --> 00:03:18,080
important functionality

00:03:16,720 --> 00:03:19,760
if you're going to operate envoy if

00:03:18,080 --> 00:03:20,959
you're going to run a service mesh you

00:03:19,760 --> 00:03:23,440
should be familiar

00:03:20,959 --> 00:03:24,640
with getting to this admin interface

00:03:23,440 --> 00:03:27,040
when you need it

00:03:24,640 --> 00:03:28,000
and understanding how to query it and

00:03:27,040 --> 00:03:31,280
how to get information

00:03:28,000 --> 00:03:34,000
out of it the next thing

00:03:31,280 --> 00:03:35,360
you should know about uh operating envoy

00:03:34,000 --> 00:03:38,400
is

00:03:35,360 --> 00:03:39,440
in the search part of the admin

00:03:38,400 --> 00:03:42,400
interface

00:03:39,440 --> 00:03:43,200
or in the stats part of the admin

00:03:42,400 --> 00:03:45,680
interface

00:03:43,200 --> 00:03:46,400
there are indicators that will give you

00:03:45,680 --> 00:03:49,280
a heads up

00:03:46,400 --> 00:03:50,959
when things might start to go wrong so

00:03:49,280 --> 00:03:51,920
one of those things that we've found the

00:03:50,959 --> 00:03:55,439
hard way

00:03:51,920 --> 00:03:59,120
is keeping an eye on when certificates

00:03:55,439 --> 00:04:01,439
are about to expire now

00:03:59,120 --> 00:04:02,400
tools like a service mesh site like

00:04:01,439 --> 00:04:04,959
istio

00:04:02,400 --> 00:04:05,599
might have a way for uh for doing

00:04:04,959 --> 00:04:08,319
automated

00:04:05,599 --> 00:04:10,319
rotation of certificates but sometimes

00:04:08,319 --> 00:04:13,599
that doesn't happen properly

00:04:10,319 --> 00:04:15,760
and checking these certain stats whether

00:04:13,599 --> 00:04:18,079
you have automation in place or not

00:04:15,760 --> 00:04:19,280
to determine you know if you're getting

00:04:18,079 --> 00:04:21,359
closer and closer to

00:04:19,280 --> 00:04:22,639
assert expiring and it not being rotated

00:04:21,359 --> 00:04:26,160
when you expect it

00:04:22,639 --> 00:04:30,000
extremely important another

00:04:26,160 --> 00:04:33,680
is what happens when the envoy proxy

00:04:30,000 --> 00:04:36,880
starts to come under severe load

00:04:33,680 --> 00:04:39,040
what is the behavior that you expect we

00:04:36,880 --> 00:04:42,320
don't want the envoy proxy users

00:04:39,040 --> 00:04:44,720
to just lock up and behave

00:04:42,320 --> 00:04:46,560
you know uh in a state that we can't

00:04:44,720 --> 00:04:49,680
understand is unpredictable

00:04:46,560 --> 00:04:50,639
so we can set things like the the

00:04:49,680 --> 00:04:54,160
overload

00:04:50,639 --> 00:04:55,360
uh manager in envoy and and observe it

00:04:54,160 --> 00:04:56,880
and watch it how are

00:04:55,360 --> 00:04:58,800
what is the pressure what is the memory

00:04:56,880 --> 00:05:01,600
or cpu pressure that envoys

00:04:58,800 --> 00:05:02,320
uh at right now and what should it do

00:05:01,600 --> 00:05:05,600
when it gets to

00:05:02,320 --> 00:05:07,440
certain thresholds should it stop

00:05:05,600 --> 00:05:09,520
doing keep alive on certain connections

00:05:07,440 --> 00:05:10,240
if you uh reach a certain threshold

00:05:09,520 --> 00:05:13,039
should it

00:05:10,240 --> 00:05:13,520
stop accepting requests should it start

00:05:13,039 --> 00:05:16,639
shedding

00:05:13,520 --> 00:05:18,800
requests and so envoy has this

00:05:16,639 --> 00:05:21,199
this feature called overload manager

00:05:18,800 --> 00:05:24,080
that allows you to

00:05:21,199 --> 00:05:25,520
ahead of time specify what happens when

00:05:24,080 --> 00:05:26,720
the proxy starts to become

00:05:25,520 --> 00:05:28,639
under pressure so you can start to

00:05:26,720 --> 00:05:30,400
reason about understand what's

00:05:28,639 --> 00:05:32,080
uh what's happening here's a here's a

00:05:30,400 --> 00:05:33,039
snippet or example of what it might look

00:05:32,080 --> 00:05:34,960
like that

00:05:33,039 --> 00:05:37,280
you know you specify we're going to

00:05:34,960 --> 00:05:40,560
monitor the the heap space

00:05:37,280 --> 00:05:42,479
and if it gets to 95 or crosses that

00:05:40,560 --> 00:05:44,320
high water mark then we're going to

00:05:42,479 --> 00:05:45,840
disable keep alive

00:05:44,320 --> 00:05:47,280
and so what that means if if there are

00:05:45,840 --> 00:05:48,400
connections along the connections open

00:05:47,280 --> 00:05:50,160
there's not really much happening on

00:05:48,400 --> 00:05:51,840
them but we have keep alive

00:05:50,160 --> 00:05:53,840
there so that it keeps those connections

00:05:51,840 --> 00:05:55,919
open we're gonna we're gonna stop to

00:05:53,840 --> 00:05:59,759
keep alive and those connections should

00:05:55,919 --> 00:06:02,080
eventually get cleaned up if we hit 99

00:05:59,759 --> 00:06:03,280
or across that high water mark then we

00:06:02,080 --> 00:06:06,000
will stop accepting

00:06:03,280 --> 00:06:07,840
new requests and so on right so you can

00:06:06,000 --> 00:06:10,240
check the documents but

00:06:07,840 --> 00:06:11,919
there's a really powerful feature and

00:06:10,240 --> 00:06:14,960
when running onboard

00:06:11,919 --> 00:06:17,759
another one is being able to

00:06:14,960 --> 00:06:18,240
log out to standard dollar to a logging

00:06:17,759 --> 00:06:20,240
file

00:06:18,240 --> 00:06:21,759
when requests are coming into the system

00:06:20,240 --> 00:06:24,880
and log metadata

00:06:21,759 --> 00:06:27,759
about each of the requests things like

00:06:24,880 --> 00:06:28,720
certificates things like x forwarded for

00:06:27,759 --> 00:06:33,360
headers

00:06:28,720 --> 00:06:35,440
uh things like request and response

00:06:33,360 --> 00:06:36,639
details of the of the message and

00:06:35,440 --> 00:06:40,560
headers and so on

00:06:36,639 --> 00:06:41,759
all extremely extremely useful for um

00:06:40,560 --> 00:06:43,680
debugging and troubleshooting when

00:06:41,759 --> 00:06:44,319
things start to go wrong in an envoy

00:06:43,680 --> 00:06:47,840
based

00:06:44,319 --> 00:06:49,039
environment another incredibly important

00:06:47,840 --> 00:06:50,800
piece to this puzzle

00:06:49,039 --> 00:06:52,400
is not just the access logs which we

00:06:50,800 --> 00:06:54,160
talked about so request comes in we can

00:06:52,400 --> 00:06:57,440
log metadata about that

00:06:54,160 --> 00:06:58,000
but it's also the proxy itself enabling

00:06:57,440 --> 00:07:01,680
so the

00:06:58,000 --> 00:07:03,919
so envoy has extremely uh detailed

00:07:01,680 --> 00:07:05,520
logging levels or or rather different

00:07:03,919 --> 00:07:06,160
modules inside of envoy that you can

00:07:05,520 --> 00:07:08,319
enable

00:07:06,160 --> 00:07:09,440
logging levels for and some of the

00:07:08,319 --> 00:07:12,240
common ones around

00:07:09,440 --> 00:07:14,080
connection connection handling what the

00:07:12,240 --> 00:07:16,160
filter chains are doing

00:07:14,080 --> 00:07:18,240
how routing happens how our back

00:07:16,160 --> 00:07:20,720
policies are applied and so forth

00:07:18,240 --> 00:07:22,240
those can all be enabled at very fine

00:07:20,720 --> 00:07:24,800
grain levels

00:07:22,240 --> 00:07:26,160
and things are not connecting for tls

00:07:24,800 --> 00:07:27,199
issues for some reason go check the

00:07:26,160 --> 00:07:29,680
envoy logs

00:07:27,199 --> 00:07:30,720
that will give you a very good hint if

00:07:29,680 --> 00:07:34,479
not exactly why

00:07:30,720 --> 00:07:36,720
things are not working and then

00:07:34,479 --> 00:07:37,520
one of the last slides is you know

00:07:36,720 --> 00:07:40,319
tuning for

00:07:37,520 --> 00:07:41,360
cloud deployments especially in a public

00:07:40,319 --> 00:07:44,080
cloud one one of the

00:07:41,360 --> 00:07:46,319
most common one that we've been running

00:07:44,080 --> 00:07:48,879
into and have been bit by for the last

00:07:46,319 --> 00:07:50,240
several years really is uh is how the

00:07:48,879 --> 00:07:52,479
load balancers behave

00:07:50,240 --> 00:07:55,280
in a public cloud so if you end up

00:07:52,479 --> 00:07:56,879
running envoy proxy on a vm

00:07:55,280 --> 00:07:58,319
and you end up running a data or a

00:07:56,879 --> 00:08:00,000
control plane somewhere else

00:07:58,319 --> 00:08:01,520
you know connecting those things to an

00:08:00,000 --> 00:08:03,840
amazon load balancer

00:08:01,520 --> 00:08:05,280
you could see very unpredictable results

00:08:03,840 --> 00:08:08,400
so being able to tune

00:08:05,280 --> 00:08:11,199
things like keep alive and

00:08:08,400 --> 00:08:12,639
session and stream uh keep alive these

00:08:11,199 --> 00:08:15,520
things are are very

00:08:12,639 --> 00:08:17,280
important um here's a little snippet for

00:08:15,520 --> 00:08:19,199
how you might do that for

00:08:17,280 --> 00:08:21,599
an upstream cluster so maybe you're

00:08:19,199 --> 00:08:23,520
connecting to the control plane

00:08:21,599 --> 00:08:24,960
for configuration updates or you're

00:08:23,520 --> 00:08:27,360
connecting to

00:08:24,960 --> 00:08:28,639
the next service part of the control

00:08:27,360 --> 00:08:30,319
plane

00:08:28,639 --> 00:08:31,840
to determine authentication or

00:08:30,319 --> 00:08:34,719
authorization policies

00:08:31,840 --> 00:08:35,680
when a request comes in configuring

00:08:34,719 --> 00:08:39,120
these things is

00:08:35,680 --> 00:08:40,880
extremely extremely important and

00:08:39,120 --> 00:08:42,560
you know like i said these are all these

00:08:40,880 --> 00:08:43,519
are all tips and tricks that hopefully

00:08:42,560 --> 00:08:45,760
help you

00:08:43,519 --> 00:08:47,040
we've learned them the hardware hard way

00:08:45,760 --> 00:08:49,600
uh we have the

00:08:47,040 --> 00:08:50,560
the scars to show that um and if you're

00:08:49,600 --> 00:08:52,959
interested in running

00:08:50,560 --> 00:08:55,600
envoy based technology either at the

00:08:52,959 --> 00:08:56,240
edge as in an api gateway or a service

00:08:55,600 --> 00:08:59,519
mesh like

00:08:56,240 --> 00:09:01,519
istio and uh you're looking for a way to

00:08:59,519 --> 00:09:03,600
make that successful and simplify

00:09:01,519 --> 00:09:06,240
doing that please reach out to us at

00:09:03,600 --> 00:09:08,320
solo.il that's exactly what we work on

00:09:06,240 --> 00:09:10,240
that's what we specialize in it's where

00:09:08,320 --> 00:09:12,399
our core competencies

00:09:10,240 --> 00:09:13,600
and we'd be happy to to help so with

00:09:12,399 --> 00:09:15,880
that thank you and

00:09:13,600 --> 00:09:18,880
uh go enjoy the rest of the talks in

00:09:15,880 --> 00:09:18,880

YouTube URL: https://www.youtube.com/watch?v=NCoDbeA3LSQ


