Title: Service Mesh Extensibility Explained - Lin Sun, Solo.io
Publication date: 2021-05-05
Playlist: ServiceMeshCon EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Service Mesh Extensibility Explained - Lin Sun, Solo.io

You love service mesh but may have found out you need to extend your service mesh, whether you want to enhance the sidecar proxy or the gateways or the mesh control plane or plugin in your certificate authority or external authorization system. Weâ€™ll explore various user cases and extension points a service mesh could provide to users, using Istio service mesh as an example. This is meant to be an intermediate-level talk for audiences who understand the basics of service mesh and would like to further leverage service mesh to the next level.
Captions: 
	00:00:00,080 --> 00:00:03,919
have you ever wondered how to expand

00:00:02,720 --> 00:00:07,040
your service mesh

00:00:03,919 --> 00:00:09,719
for your specific business needs

00:00:07,040 --> 00:00:11,040
perhaps you need to add external

00:00:09,719 --> 00:00:14,320
authorization

00:00:11,040 --> 00:00:17,119
or advanced rate limiting or maybe

00:00:14,320 --> 00:00:18,720
you want to add customer logic in your

00:00:17,119 --> 00:00:22,640
data paths to perform

00:00:18,720 --> 00:00:24,880
dynamic routing or policy enforcement

00:00:22,640 --> 00:00:26,960
i would like to talk about service mesh

00:00:24,880 --> 00:00:31,760
extensibility patterns

00:00:26,960 --> 00:00:34,960
to help you with service mesh

00:00:31,760 --> 00:00:39,680
hi my name is linsa i am

00:00:34,960 --> 00:00:42,160
the director of open source with solo.io

00:00:39,680 --> 00:00:43,680
i have been a long time contributor to

00:00:42,160 --> 00:00:45,920
the istio project

00:00:43,680 --> 00:00:46,800
i'm a maintainer and currently also

00:00:45,920 --> 00:00:48,800
serve

00:00:46,800 --> 00:00:59,760
the technical oversight committee of

00:00:48,800 --> 00:01:02,079
this year

00:00:59,760 --> 00:01:02,960
so before we get to service there's

00:01:02,079 --> 00:01:05,040
service mesh

00:01:02,960 --> 00:01:06,720
extensibility let's talk about what is

00:01:05,040 --> 00:01:09,920
the service match

00:01:06,720 --> 00:01:12,799
as part of the journey to cloud native

00:01:09,920 --> 00:01:14,880
organizations face many challenges with

00:01:12,799 --> 00:01:17,600
managed microservices

00:01:14,880 --> 00:01:20,320
such as connecting securing and

00:01:17,600 --> 00:01:23,600
observing these microservices

00:01:20,320 --> 00:01:27,680
why because microservices

00:01:23,600 --> 00:01:30,159
comes with a lot of challenges with

00:01:27,680 --> 00:01:31,360
one monolithic to many many many

00:01:30,159 --> 00:01:34,159
services

00:01:31,360 --> 00:01:34,720
these services needs to connect to each

00:01:34,159 --> 00:01:37,280
other

00:01:34,720 --> 00:01:38,720
you need to understand what if the

00:01:37,280 --> 00:01:41,200
network has stayed there

00:01:38,720 --> 00:01:42,799
how do you do retry and timeout can you

00:01:41,200 --> 00:01:45,360
defend your arrows

00:01:42,799 --> 00:01:47,920
and how do you observe what really goes

00:01:45,360 --> 00:01:51,200
on within these microservices

00:01:47,920 --> 00:01:52,720
so that you can tell which team may have

00:01:51,200 --> 00:01:55,600
a problem

00:01:52,720 --> 00:01:58,320
and also how do you actually secure the

00:01:55,600 --> 00:02:00,320
communication on mommy's micro services

00:01:58,320 --> 00:02:02,159
so that your security team would

00:02:00,320 --> 00:02:06,880
actually be happy

00:02:02,159 --> 00:02:10,080
with the microservice framework you have

00:02:06,880 --> 00:02:11,520
so service mesh in the nutshell is

00:02:10,080 --> 00:02:14,720
really to help you

00:02:11,520 --> 00:02:16,480
with this problems so that you don't

00:02:14,720 --> 00:02:19,360
have to handle

00:02:16,480 --> 00:02:21,520
how do you connect to other services how

00:02:19,360 --> 00:02:24,319
do you secure other services

00:02:21,520 --> 00:02:24,879
how do you send the telometry data how

00:02:24,319 --> 00:02:27,360
do you

00:02:24,879 --> 00:02:29,840
observe your services in your

00:02:27,360 --> 00:02:32,879
application container

00:02:29,840 --> 00:02:33,680
and the service line should provide the

00:02:32,879 --> 00:02:36,800
proxy

00:02:33,680 --> 00:02:39,280
for you that you can run alongside

00:02:36,800 --> 00:02:40,800
with your application container and also

00:02:39,280 --> 00:02:44,400
most importantly

00:02:40,800 --> 00:02:47,599
the servicemen provide uh api

00:02:44,400 --> 00:02:50,720
to allow you to declare intention

00:02:47,599 --> 00:02:53,599
on how you want to configure these proxy

00:02:50,720 --> 00:02:56,239
and then the service mesh would

00:02:53,599 --> 00:02:57,280
automatically configure these proxy for

00:02:56,239 --> 00:03:00,319
you

00:02:57,280 --> 00:03:01,440
so that the proxy would follow your

00:03:00,319 --> 00:03:04,400
intention

00:03:01,440 --> 00:03:06,080
but in the language that the proxy can

00:03:04,400 --> 00:03:09,440
understand

00:03:06,080 --> 00:03:12,959
in istio the api

00:03:09,440 --> 00:03:16,080
you interact as a user is the issue api

00:03:12,959 --> 00:03:19,040
which is a much higher level abstraction

00:03:16,080 --> 00:03:19,840
on top of the onward configuration and

00:03:19,040 --> 00:03:22,800
the issue of

00:03:19,840 --> 00:03:26,000
all plan would essentially turn that

00:03:22,800 --> 00:03:29,280
customer resource you provided

00:03:26,000 --> 00:03:32,319
following is your api contract

00:03:29,280 --> 00:03:35,440
into the proxy configuration

00:03:32,319 --> 00:03:39,120
of envoy which easily

00:03:35,440 --> 00:03:42,480
create tens and thousands of

00:03:39,120 --> 00:03:46,159
code of only configuration with

00:03:42,480 --> 00:03:48,640
just a few micro services so there's

00:03:46,159 --> 00:03:50,640
strong reason you don't want to do that

00:03:48,640 --> 00:03:52,879
configuration yourself

00:03:50,640 --> 00:03:53,920
you rather leverage your service mesh

00:03:52,879 --> 00:03:57,120
control plan

00:03:53,920 --> 00:03:59,840
to program the cycle for you

00:03:57,120 --> 00:04:00,959
so today we're going to talk about what

00:03:59,840 --> 00:04:04,159
if

00:04:00,959 --> 00:04:04,879
the default control plane and data plane

00:04:04,159 --> 00:04:07,200
doesn't fit

00:04:04,879 --> 00:04:08,720
your business needs and you want to

00:04:07,200 --> 00:04:11,640
extend that

00:04:08,720 --> 00:04:12,840
so let's talk about the data plane

00:04:11,640 --> 00:04:16,000
extensibility

00:04:12,840 --> 00:04:19,519
first so at the bottom

00:04:16,000 --> 00:04:22,400
of the layer we have two application

00:04:19,519 --> 00:04:23,840
and these applications are as part of

00:04:22,400 --> 00:04:27,040
our data plane

00:04:23,840 --> 00:04:30,880
as you can see one app one

00:04:27,040 --> 00:04:34,479
needs to talk to app2 essentially

00:04:30,880 --> 00:04:36,160
the proxy is the main in the middle to

00:04:34,479 --> 00:04:39,360
mediate the traffic right

00:04:36,160 --> 00:04:41,440
each application container has its own

00:04:39,360 --> 00:04:44,479
proxy as a sidecar

00:04:41,440 --> 00:04:48,160
running within the same pod namespace

00:04:44,479 --> 00:04:50,400
using kubernetes as an example um

00:04:48,160 --> 00:04:51,360
so you might be wondering how does that

00:04:50,400 --> 00:04:54,479
happen right

00:04:51,360 --> 00:04:58,160
so how does traffic always

00:04:54,479 --> 00:05:02,080
goes in and out of the proxy

00:04:58,160 --> 00:05:05,360
so within istio we have something called

00:05:02,080 --> 00:05:05,360
emit container

00:05:05,520 --> 00:05:14,320
that set up the ip table rules

00:05:09,600 --> 00:05:17,280
for the part so that it probably can fit

00:05:14,320 --> 00:05:18,639
how the traffic are intercepted and

00:05:17,280 --> 00:05:22,120
redirected

00:05:18,639 --> 00:05:24,240
on that pod in fact the first

00:05:22,120 --> 00:05:26,560
customization point we're going to talk

00:05:24,240 --> 00:05:30,240
about is the unique container

00:05:26,560 --> 00:05:33,919
in the is2 project itself we support

00:05:30,240 --> 00:05:37,919
um using any container to config

00:05:33,919 --> 00:05:40,400
vip tables as the default configuration

00:05:37,919 --> 00:05:41,280
but some of the organization may find

00:05:40,400 --> 00:05:44,479
out

00:05:41,280 --> 00:05:47,840
it's really against their

00:05:44,479 --> 00:05:48,880
security rules to have like net admin

00:05:47,840 --> 00:05:52,160
privileges

00:05:48,880 --> 00:05:53,680
to deploy applications into the mac

00:05:52,160 --> 00:05:55,919
because the any container needs to

00:05:53,680 --> 00:05:58,800
configure networking ip table

00:05:55,919 --> 00:05:59,680
so it needs the net admin privilege so

00:05:58,800 --> 00:06:03,280
in those case

00:05:59,680 --> 00:06:06,479
we provide on something called seo cni

00:06:03,280 --> 00:06:09,840
plugin so the organization could use

00:06:06,479 --> 00:06:13,360
issue cmi plugin to config

00:06:09,840 --> 00:06:16,479
the ip tables it runs as a daemon set

00:06:13,360 --> 00:06:19,199
on your kubernetes worker notes and

00:06:16,479 --> 00:06:21,120
it would allow the the demons that you

00:06:19,199 --> 00:06:23,840
can say

00:06:21,120 --> 00:06:26,160
the pods as they are added to the mesh

00:06:23,840 --> 00:06:28,400
it can fix the acting table rules

00:06:26,160 --> 00:06:29,199
what the ending container in those case

00:06:28,400 --> 00:06:32,319
does

00:06:29,199 --> 00:06:35,199
instead of programmably configured

00:06:32,319 --> 00:06:35,680
it's simply just validates the ip table

00:06:35,199 --> 00:06:38,199
rules

00:06:35,680 --> 00:06:39,840
are good and then finishes the

00:06:38,199 --> 00:06:42,319
initialization work

00:06:39,840 --> 00:06:43,440
so that the proxy and the application

00:06:42,319 --> 00:06:46,840
container

00:06:43,440 --> 00:06:49,599
can take effect the second

00:06:46,840 --> 00:06:54,720
um extension points

00:06:49,599 --> 00:06:54,720
is really the proxy image

00:06:55,120 --> 00:07:01,599
so the proxy image

00:06:58,319 --> 00:07:05,199
with in istio you can plug in your own

00:07:01,599 --> 00:07:09,280
image so that's one way to extend

00:07:05,199 --> 00:07:12,800
the second way to extend is you

00:07:09,280 --> 00:07:16,240
change the proxy config which

00:07:12,800 --> 00:07:18,479
we provide a config map that dictates

00:07:16,240 --> 00:07:19,440
how you want the default configuration

00:07:18,479 --> 00:07:21,759
template to be

00:07:19,440 --> 00:07:22,639
and you could certainly customize that

00:07:21,759 --> 00:07:26,160
too

00:07:22,639 --> 00:07:29,520
you may want to customize a pilot agent

00:07:26,160 --> 00:07:31,840
or you may want to add some libraries

00:07:29,520 --> 00:07:34,240
onto the proxy image or you may want to

00:07:31,840 --> 00:07:36,880
trim down the proxy image

00:07:34,240 --> 00:07:39,199
to provide your own image to do that

00:07:36,880 --> 00:07:40,960
before you convince the upstream

00:07:39,199 --> 00:07:42,720
or maybe upstream doesn't have an

00:07:40,960 --> 00:07:45,840
interest because it's on

00:07:42,720 --> 00:07:48,720
your own private scenario

00:07:45,840 --> 00:07:49,759
the third customization we're going to

00:07:48,720 --> 00:07:53,599
talk about

00:07:49,759 --> 00:07:53,599
is envoy future

00:07:56,000 --> 00:08:00,319
so angry future it essentially allows

00:07:59,520 --> 00:08:04,560
you

00:08:00,319 --> 00:08:08,319
to customize the proxy configuration

00:08:04,560 --> 00:08:10,720
at envoy level to the language that

00:08:08,319 --> 00:08:14,319
envoy can understand it's a very

00:08:10,720 --> 00:08:15,680
detailed api that you have to understand

00:08:14,319 --> 00:08:18,160
exactly

00:08:15,680 --> 00:08:18,800
you know what onward configuration looks

00:08:18,160 --> 00:08:22,160
like

00:08:18,800 --> 00:08:22,800
and how you want to patch it so for

00:08:22,160 --> 00:08:24,879
example

00:08:22,800 --> 00:08:26,319
some of the common scenario we see over

00:08:24,879 --> 00:08:30,639
customer do

00:08:26,319 --> 00:08:33,919
is uh maybe enable access log

00:08:30,639 --> 00:08:38,320
for the products move this a little bit

00:08:33,919 --> 00:08:41,519
so the first one we commonly see is

00:08:38,320 --> 00:08:45,919
using rather to be able to

00:08:41,519 --> 00:08:45,919
provide customizations

00:08:48,640 --> 00:08:52,399
so the reason wasm is really interesting

00:08:51,519 --> 00:08:55,920
here

00:08:52,399 --> 00:08:56,560
is because it's running in the native

00:08:55,920 --> 00:09:00,000
speed

00:08:56,560 --> 00:09:04,240
and it's very easy to test you can

00:09:00,000 --> 00:09:07,360
use um a standalone isolated vm

00:09:04,240 --> 00:09:10,320
to test your proxy

00:09:07,360 --> 00:09:10,959
and your proxy extension it can do

00:09:10,320 --> 00:09:14,800
dynamic

00:09:10,959 --> 00:09:17,959
updates without hour restart

00:09:14,800 --> 00:09:21,760
it really eliminates the need to

00:09:17,959 --> 00:09:24,880
recompile and maintain your own build

00:09:21,760 --> 00:09:28,320
of alloy because you could use ryzen to

00:09:24,880 --> 00:09:32,880
simply build your extension on top of it

00:09:28,320 --> 00:09:36,480
and what i like most about wasm

00:09:32,880 --> 00:09:38,880
is really be able to store the

00:09:36,480 --> 00:09:40,080
weather moving plugins in whatever

00:09:38,880 --> 00:09:42,560
assembly hub

00:09:40,080 --> 00:09:43,680
and be able to consume other people's

00:09:42,560 --> 00:09:46,959
plugins

00:09:43,680 --> 00:09:50,480
so think about hub how many of you use

00:09:46,959 --> 00:09:53,200
docker hub i'm sure it's a lot

00:09:50,480 --> 00:09:53,760
right be able to reuse other people's

00:09:53,200 --> 00:09:57,519
work

00:09:53,760 --> 00:10:01,920
it's fantastic so wasm

00:09:57,519 --> 00:10:04,880
really enables you to be able to easily

00:10:01,920 --> 00:10:05,440
catalog and share their work and reuse

00:10:04,880 --> 00:10:09,120
work

00:10:05,440 --> 00:10:13,360
from other people so these are the four

00:10:09,120 --> 00:10:16,399
extensions the fifth extension points um

00:10:13,360 --> 00:10:20,240
is in this diagram one thing

00:10:16,399 --> 00:10:23,279
we haven't discussed is

00:10:20,240 --> 00:10:24,320
the ingress gateway right or egress

00:10:23,279 --> 00:10:28,160
gateway

00:10:24,320 --> 00:10:31,519
so typically um

00:10:28,160 --> 00:10:33,279
you would have a ingress gateway that

00:10:31,519 --> 00:10:38,240
mediated traffic

00:10:33,279 --> 00:10:38,240
coming into the mesh and the

00:10:38,640 --> 00:10:42,640
the ingress gateway you can also

00:10:41,519 --> 00:10:46,160
customize

00:10:42,640 --> 00:10:48,720
that using any of these customers

00:10:46,160 --> 00:10:50,000
logically mentioned so you could have

00:10:48,720 --> 00:10:51,839
any container

00:10:50,000 --> 00:10:54,000
even though most of these you don't need

00:10:51,839 --> 00:10:57,120
a unique containable ingress gateway

00:10:54,000 --> 00:10:58,079
you could customize the proxy image you

00:10:57,120 --> 00:11:01,839
could also

00:10:58,079 --> 00:11:06,160
customize um you could also

00:11:01,839 --> 00:11:06,800
customize the uh gateway using ongoing

00:11:06,160 --> 00:11:09,360
filter

00:11:06,800 --> 00:11:10,480
you could also use a web assembly module

00:11:09,360 --> 00:11:14,160
to customize

00:11:10,480 --> 00:11:18,079
um the gateway so the gateway is

00:11:14,160 --> 00:11:18,640
really um different from the cycle proxy

00:11:18,079 --> 00:11:21,680
because

00:11:18,640 --> 00:11:23,680
it doesn't do automatically injection

00:11:21,680 --> 00:11:25,040
on demand so you have that proxy

00:11:23,680 --> 00:11:28,560
configuration

00:11:25,040 --> 00:11:31,120
already up front and then you can just

00:11:28,560 --> 00:11:32,480
go to the kubernetes yaml file to

00:11:31,120 --> 00:11:35,120
customize

00:11:32,480 --> 00:11:36,160
the gateway configuration so let's call

00:11:35,120 --> 00:11:39,360
that

00:11:36,160 --> 00:11:42,240
the fix by reusing

00:11:39,360 --> 00:11:43,680
some of these same techniques but those

00:11:42,240 --> 00:11:46,079
but apply on the gateway

00:11:43,680 --> 00:11:47,519
so we talked about the data playing

00:11:46,079 --> 00:11:49,120
extension points

00:11:47,519 --> 00:11:51,920
let's talk about the control plane

00:11:49,120 --> 00:11:55,120
extension ports

00:11:51,920 --> 00:11:58,079
um typically on the control plane side

00:11:55,120 --> 00:11:59,440
this one common extension points is

00:11:58,079 --> 00:12:03,040
build the abstraction

00:11:59,440 --> 00:12:06,720
over the service measure api for example

00:12:03,040 --> 00:12:10,560
it's your car salesforce was mentioning

00:12:06,720 --> 00:12:13,839
they build the abstraction using helm

00:12:10,560 --> 00:12:16,639
so that is one way to build

00:12:13,839 --> 00:12:16,639
abstraction

00:12:17,920 --> 00:12:24,560
ebay also mentioned they have their own

00:12:21,440 --> 00:12:26,160
abstraction using their own customer

00:12:24,560 --> 00:12:29,519
resource

00:12:26,160 --> 00:12:33,120
and solo we also build uh abstraction

00:12:29,519 --> 00:12:38,959
this are our glue api

00:12:33,120 --> 00:12:42,160
and that api is

00:12:38,959 --> 00:12:42,720
it's a role-based api so that you can

00:12:42,160 --> 00:12:46,560
focus

00:12:42,720 --> 00:12:50,639
on rows um so that's one type of

00:12:46,560 --> 00:12:53,680
extension on the control plane side

00:12:50,639 --> 00:12:55,040
the other type of extension is in the

00:12:53,680 --> 00:12:58,079
control plane

00:12:55,040 --> 00:12:58,639
you can say i don't want my control

00:12:58,079 --> 00:13:03,040
plane

00:12:58,639 --> 00:13:07,200
to serve as a ca instead

00:13:03,040 --> 00:13:10,959
i want to plug my own ca

00:13:07,200 --> 00:13:14,000
so you could um certainly do that

00:13:10,959 --> 00:13:17,200
with your own ca so that

00:13:14,000 --> 00:13:20,079
your own ca would sign

00:13:17,200 --> 00:13:22,240
and or some all the keys and

00:13:20,079 --> 00:13:25,440
certificates for all the workloads

00:13:22,240 --> 00:13:29,519
in the mesh so

00:13:25,440 --> 00:13:29,519
these are the two common um

00:13:29,600 --> 00:13:33,200
control plane extension points let's go

00:13:32,399 --> 00:13:36,560
ahead and see

00:13:33,200 --> 00:13:37,279
a demo um um so this is my kubernetes

00:13:36,560 --> 00:13:40,639
environment

00:13:37,279 --> 00:13:42,000
running my on my laptop cluster one as

00:13:40,639 --> 00:13:45,680
you can see

00:13:42,000 --> 00:13:49,199
so i have a kind cluster

00:13:45,680 --> 00:13:51,680
and in my cluster i have a bunch of

00:13:49,199 --> 00:13:52,240
stuff installed i have issue installed

00:13:51,680 --> 00:13:55,839
first of

00:13:52,240 --> 00:13:58,880
all um i have

00:13:55,839 --> 00:14:00,560
the book info in start

00:13:58,880 --> 00:14:02,079
the only thing with looking for is i

00:14:00,560 --> 00:14:04,480
didn't install version

00:14:02,079 --> 00:14:05,360
three so i have review version one or

00:14:04,480 --> 00:14:08,240
two

00:14:05,360 --> 00:14:09,360
i also have a simple example called

00:14:08,240 --> 00:14:12,560
istio

00:14:09,360 --> 00:14:16,160
in action uh in the insta

00:14:12,560 --> 00:14:19,199
in action namespace uh it's the web api

00:14:16,160 --> 00:14:21,120
example uh and the recommendation and

00:14:19,199 --> 00:14:24,639
the history and also the sleeve

00:14:21,120 --> 00:14:26,160
so a lot of the interesting stuff you

00:14:24,639 --> 00:14:28,800
can see you know these

00:14:26,160 --> 00:14:30,240
um apps are already in the mesh with the

00:14:28,800 --> 00:14:33,600
two slash two

00:14:30,240 --> 00:14:35,839
that means uh it has icon next to it

00:14:33,600 --> 00:14:37,519
so what i'm going to do is i'm going to

00:14:35,839 --> 00:14:40,000
walk you through

00:14:37,519 --> 00:14:41,440
each of the configuration we talked

00:14:40,000 --> 00:14:44,720
about right

00:14:41,440 --> 00:14:45,519
so let's change the web api for example

00:14:44,720 --> 00:14:48,880
let's check out

00:14:45,519 --> 00:14:49,360
its configuration so we talked about the

00:14:48,880 --> 00:14:52,560
first

00:14:49,360 --> 00:14:55,360
configuration extension point is

00:14:52,560 --> 00:14:57,279
the elite container right so this is the

00:14:55,360 --> 00:15:01,120
unique container

00:14:57,279 --> 00:15:04,000
used by the

00:15:01,120 --> 00:15:04,560
by istio as you can see it can fix a

00:15:04,000 --> 00:15:08,240
bunch of

00:15:04,560 --> 00:15:11,440
ip table rules and it captures

00:15:08,240 --> 00:15:12,560
the incoming traffic and outgoing

00:15:11,440 --> 00:15:16,160
traffic

00:15:12,560 --> 00:15:21,279
and all that configuration is done

00:15:16,160 --> 00:15:21,279
then the proxy takes place

00:15:21,839 --> 00:15:26,240
in the the application container so one

00:15:24,000 --> 00:15:26,880
thing interesting on the proxy is you

00:15:26,240 --> 00:15:28,600
can see

00:15:26,880 --> 00:15:30,320
you know the image is highly

00:15:28,600 --> 00:15:32,560
customizable

00:15:30,320 --> 00:15:34,560
um the bunch a bunch of other

00:15:32,560 --> 00:15:37,199
configuration are also

00:15:34,560 --> 00:15:38,639
customizable and what's interesting in

00:15:37,199 --> 00:15:42,000
this scenario is

00:15:38,639 --> 00:15:45,040
we actually enable configuration

00:15:42,000 --> 00:15:48,079
uh called hold application until

00:15:45,040 --> 00:15:51,759
true so essentially this says

00:15:48,079 --> 00:15:55,279
you know you don't start the application

00:15:51,759 --> 00:15:57,360
and here the proxy is ready and this is

00:15:55,279 --> 00:15:58,639
important because some of the

00:15:57,360 --> 00:16:01,120
application

00:15:58,639 --> 00:16:02,639
is right here some of the application

00:16:01,120 --> 00:16:06,160
really requires

00:16:02,639 --> 00:16:07,839
um maybe get out of the network or maybe

00:16:06,160 --> 00:16:10,079
just for security purpose they don't

00:16:07,839 --> 00:16:11,839
want the application do any job before

00:16:10,079 --> 00:16:14,880
the proxy reaches running

00:16:11,839 --> 00:16:17,920
okay so we talked about one and two

00:16:14,880 --> 00:16:22,079
let's talk about this uh the third one

00:16:17,920 --> 00:16:23,120
which is using onward filter right what

00:16:22,079 --> 00:16:26,480
we're going to do

00:16:23,120 --> 00:16:29,839
is apply an onboard filter called

00:16:26,480 --> 00:16:33,040
um web api

00:16:29,839 --> 00:16:33,920
logging audit so i'll show you what that

00:16:33,040 --> 00:16:37,519
looks like

00:16:33,920 --> 00:16:40,959
um so essentially what this does is

00:16:37,519 --> 00:16:43,680
it says hey i'm modifying this

00:16:40,959 --> 00:16:44,480
because i want to apply it to the

00:16:43,680 --> 00:16:47,839
sidecar

00:16:44,480 --> 00:16:50,279
of the web api and i want to change

00:16:47,839 --> 00:16:51,759
my login format to add these

00:16:50,279 --> 00:16:54,079
configurations

00:16:51,759 --> 00:16:56,240
an interesting configuration i would say

00:16:54,079 --> 00:17:00,720
here is like the search

00:16:56,240 --> 00:17:04,400
um and also like the

00:17:00,720 --> 00:17:08,160
the x forward four the response so

00:17:04,400 --> 00:17:11,520
that's not print out by default

00:17:08,160 --> 00:17:14,559
so let's apply this and generate some

00:17:11,520 --> 00:17:14,559
traffic to it

00:17:16,720 --> 00:17:20,319
so we're going to do is uh we're going

00:17:20,000 --> 00:17:23,360
to

00:17:20,319 --> 00:17:27,360
generate some traffic from

00:17:23,360 --> 00:17:29,919
the issue in action um

00:17:27,360 --> 00:17:30,880
from the sleep pod in the sleep

00:17:29,919 --> 00:17:34,080
container

00:17:30,880 --> 00:17:36,320
so if you look at the sleep

00:17:34,080 --> 00:17:38,160
sleep part in the sleep name space you

00:17:36,320 --> 00:17:41,360
can see it's one slash one

00:17:38,160 --> 00:17:44,960
so in this case if you look at the logs

00:17:41,360 --> 00:17:47,840
it would not have anything

00:17:44,960 --> 00:17:47,840
interesting

00:17:48,160 --> 00:17:52,240
so you can see because the search is

00:17:51,919 --> 00:17:54,960
like

00:17:52,240 --> 00:17:55,600
blank because we're not doing any search

00:17:54,960 --> 00:17:59,679
because

00:17:55,600 --> 00:18:02,240
the sleep part doesn't have sidecut

00:17:59,679 --> 00:18:02,799
so that's trying to generate the traffic

00:18:02,240 --> 00:18:06,320
from

00:18:02,799 --> 00:18:08,720
the sleep container within the issue in

00:18:06,320 --> 00:18:11,440
action and you can see this time we

00:18:08,720 --> 00:18:14,160
actually have two slash two in there

00:18:11,440 --> 00:18:16,720
so let's try to look at the locks and

00:18:14,160 --> 00:18:18,880
you can see in this time the locks print

00:18:16,720 --> 00:18:19,440
out like interesting data right the

00:18:18,880 --> 00:18:23,039
search

00:18:19,440 --> 00:18:25,840
information we ask to print the uri

00:18:23,039 --> 00:18:28,160
it's all printed out for you so this you

00:18:25,840 --> 00:18:31,200
can use this technique to

00:18:28,160 --> 00:18:34,320
check you know if the traffic is

00:18:31,200 --> 00:18:38,080
indeed mutual tis and

00:18:34,320 --> 00:18:40,880
what other certs and the uri are using

00:18:38,080 --> 00:18:43,840
through the two microservice

00:18:40,880 --> 00:18:43,840
communication

00:18:43,919 --> 00:18:47,039
the fourth approach we're going to show

00:18:46,480 --> 00:18:50,160
is

00:18:47,039 --> 00:18:53,520
using web assembly let me bring

00:18:50,160 --> 00:18:57,679
my thing over

00:18:53,520 --> 00:19:00,720
so i have a filter here called my filter

00:18:57,679 --> 00:19:03,679
and in this filter um

00:19:00,720 --> 00:19:04,400
there is a you written your assembly

00:19:03,679 --> 00:19:07,919
language

00:19:04,400 --> 00:19:11,840
and in this filter the only thing i

00:19:07,919 --> 00:19:13,440
changed is um on the response header

00:19:11,840 --> 00:19:17,200
side i want to add

00:19:13,440 --> 00:19:21,200
hello world through this filter

00:19:17,200 --> 00:19:25,280
web assembly filter and

00:19:21,200 --> 00:19:27,919
let's build that so build um

00:19:25,280 --> 00:19:29,520
the filter and also push the filter to

00:19:27,919 --> 00:19:32,080
my registry

00:19:29,520 --> 00:19:33,679
um in web assembly hub so you can see

00:19:32,080 --> 00:19:36,960
i'm running the wires and

00:19:33,679 --> 00:19:40,640
build commands and then

00:19:36,960 --> 00:19:42,240
i'm trying to build it and then i'm also

00:19:40,640 --> 00:19:45,200
trying to

00:19:42,240 --> 00:19:45,600
uh push it to the hub and you can see it

00:19:45,200 --> 00:19:48,160
push

00:19:45,600 --> 00:19:48,640
through the hub successfully and then

00:19:48,160 --> 00:19:53,600
let's

00:19:48,640 --> 00:19:53,600
quickly validate that in the heart

00:19:54,720 --> 00:20:02,320
so this is over what assembly

00:19:58,080 --> 00:20:07,840
had it's quickly validated

00:20:02,320 --> 00:20:07,840
in a hat logging

00:20:12,559 --> 00:20:18,000
okay so you can see um my filter which

00:20:15,520 --> 00:20:21,360
is the was a module i just added

00:20:18,000 --> 00:20:22,559
30 seconds ago okay so we have our

00:20:21,360 --> 00:20:25,039
advisor module

00:20:22,559 --> 00:20:26,480
in the web assembly hub let's go ahead

00:20:25,039 --> 00:20:29,840
and use it on

00:20:26,480 --> 00:20:29,840
the review version one

00:20:32,480 --> 00:20:35,840
through our workload selectors i can

00:20:35,039 --> 00:20:40,080
specify

00:20:35,840 --> 00:20:40,080
this is only for review version one

00:20:40,159 --> 00:20:45,200
let's take a look at the on way filter

00:20:42,320 --> 00:20:45,200
generated

00:20:45,360 --> 00:20:50,720
as you can see review version one rasm

00:20:48,240 --> 00:20:51,760
so the corresponding onboard filter is

00:20:50,720 --> 00:20:54,960
generated

00:20:51,760 --> 00:20:58,720
for me automatically

00:20:54,960 --> 00:21:01,840
let's check how the future works

00:20:58,720 --> 00:21:02,880
so what i'm going to do now is from

00:21:01,840 --> 00:21:06,880
product page

00:21:02,880 --> 00:21:09,440
to call the reviews and notice we have

00:21:06,880 --> 00:21:10,720
version 1 and version 2 of review on the

00:21:09,440 --> 00:21:12,240
local cluster

00:21:10,720 --> 00:21:14,240
so you're going to see

00:21:12,240 --> 00:21:16,080
[Music]

00:21:14,240 --> 00:21:18,159
sometimes i hate the hello world

00:21:16,080 --> 00:21:20,799
sometimes not so

00:21:18,159 --> 00:21:22,720
now you can see what we have done is we

00:21:20,799 --> 00:21:26,240
build a wasm

00:21:22,720 --> 00:21:28,880
plugin and we push the plugin to the hub

00:21:26,240 --> 00:21:30,320
and then through the wasm deployment

00:21:28,880 --> 00:21:33,840
configuration

00:21:30,320 --> 00:21:36,880
we brought that into our cluster

00:21:33,840 --> 00:21:39,360
and then have it applied to the review

00:21:36,880 --> 00:21:42,320
version one service

00:21:39,360 --> 00:21:43,120
so what i'm going to do is as you can

00:21:42,320 --> 00:21:46,320
see

00:21:43,120 --> 00:21:49,440
this is my cluster

00:21:46,320 --> 00:21:52,880
two on the right side and at the bottom

00:21:49,440 --> 00:21:56,240
is my management cluster

00:21:52,880 --> 00:21:59,760
so cluster two is pretty much same as

00:21:56,240 --> 00:22:04,159
cluster one the main difference is

00:21:59,760 --> 00:22:04,159
um it doesn't show

00:22:04,640 --> 00:22:09,360
it doesn't have uh reviews for version

00:22:08,000 --> 00:22:11,840
one and version two

00:22:09,360 --> 00:22:13,360
just to simple show traffic routing i

00:22:11,840 --> 00:22:17,679
ship theme

00:22:13,360 --> 00:22:20,000
and if you look at the bottom cluster

00:22:17,679 --> 00:22:21,280
which is the management cluster that i

00:22:20,000 --> 00:22:27,200
installed

00:22:21,280 --> 00:22:29,360
it has um

00:22:27,200 --> 00:22:30,720
it has the management layer so

00:22:29,360 --> 00:22:34,240
essentially um

00:22:30,720 --> 00:22:37,360
that i can deploy my abstracted api

00:22:34,240 --> 00:22:38,400
which is the robust glue api we talked

00:22:37,360 --> 00:22:40,559
about

00:22:38,400 --> 00:22:43,840
so what i'm going to do is i'm going to

00:22:40,559 --> 00:22:46,240
exit out of the management layer now

00:22:43,840 --> 00:22:48,720
what i want to do is i want to apply the

00:22:46,240 --> 00:22:50,400
virtual destination crd which is the

00:22:48,720 --> 00:22:53,440
abstraction crd

00:22:50,400 --> 00:22:56,720
uh we built on top of the

00:22:53,440 --> 00:22:59,600
seo resources and you can see this says

00:22:56,720 --> 00:23:00,320
i'm creating a reviews.global to

00:22:59,600 --> 00:23:02,880
represent

00:23:00,320 --> 00:23:03,600
all the review services across different

00:23:02,880 --> 00:23:05,840
clusters

00:23:03,600 --> 00:23:07,200
and the other thing i just created is

00:23:05,840 --> 00:23:10,000
traffic policy

00:23:07,200 --> 00:23:10,640
so traffic policy allow me to say you

00:23:10,000 --> 00:23:13,919
know

00:23:10,640 --> 00:23:17,760
shift to the fare over

00:23:13,919 --> 00:23:19,760
um and if local fails

00:23:17,760 --> 00:23:22,159
go ahead shift the traffic to the

00:23:19,760 --> 00:23:25,679
virtual destination

00:23:22,159 --> 00:23:28,960
that we just defined which is go to

00:23:25,679 --> 00:23:32,000
global okay so now i'm going to go to

00:23:28,960 --> 00:23:32,000
the cluster ones

00:23:32,640 --> 00:23:39,200
to see okay now i'm visiting

00:23:37,120 --> 00:23:40,480
the booking for um the customized

00:23:39,200 --> 00:23:43,679
ingress gateway

00:23:40,480 --> 00:23:47,200
as you can see right now you know it's

00:23:43,679 --> 00:23:50,799
run rubbing between the clusters

00:23:47,200 --> 00:23:54,480
um because you know i have both

00:23:50,799 --> 00:23:54,480
one two three in place

00:23:55,279 --> 00:23:59,279
but now if i go here and shut down my

00:23:58,480 --> 00:24:03,279
reviews

00:23:59,279 --> 00:24:07,200
uh one and two in the first cluster

00:24:03,279 --> 00:24:09,840
let's see if uh if istio can handle that

00:24:07,200 --> 00:24:13,200
automatically

00:24:09,840 --> 00:24:17,760
so um let's go here and

00:24:13,200 --> 00:24:19,679
now guess what i'm expecting to only see

00:24:17,760 --> 00:24:20,400
version three because version one and

00:24:19,679 --> 00:24:23,760
version two

00:24:20,400 --> 00:24:26,320
are done in the in the

00:24:23,760 --> 00:24:28,240
first cluster okay let's check out the

00:24:26,320 --> 00:24:29,760
configuration for this

00:24:28,240 --> 00:24:33,120
because you might be wondering what's

00:24:29,760 --> 00:24:36,159
the magic right like two resources

00:24:33,120 --> 00:24:38,720
uh traffic policy and also

00:24:36,159 --> 00:24:40,080
the virtual destination and now you have

00:24:38,720 --> 00:24:42,960
a complicated

00:24:40,080 --> 00:24:45,200
an interesting thing or scenario already

00:24:42,960 --> 00:24:48,000
played

00:24:45,200 --> 00:24:48,960
so what we're going to do is looking at

00:24:48,000 --> 00:24:51,200
the ui

00:24:48,960 --> 00:24:52,159
um to help you understand what's really

00:24:51,200 --> 00:24:55,360
going on

00:24:52,159 --> 00:24:58,880
one thing i like the ui is because

00:24:55,360 --> 00:25:01,679
it allows you to to look at the debug

00:24:58,880 --> 00:25:02,400
configuration of the istio so if you go

00:25:01,679 --> 00:25:05,679
here

00:25:02,400 --> 00:25:08,640
you can actually see this is cluster 1

00:25:05,679 --> 00:25:11,360
and cluster 2 you can see actually how

00:25:08,640 --> 00:25:13,840
many virtual servers and service entry

00:25:11,360 --> 00:25:15,919
that's actually behind this thing

00:25:13,840 --> 00:25:17,440
including our envoy filter so we talk

00:25:15,919 --> 00:25:19,600
about onward filter

00:25:17,440 --> 00:25:22,400
like in this case we actually have an

00:25:19,600 --> 00:25:25,520
only filter that applies to the gateway

00:25:22,400 --> 00:25:26,960
to handle the intra gateway of our

00:25:25,520 --> 00:25:30,080
multi-cluster

00:25:26,960 --> 00:25:31,279
and to handle the smi port one five four

00:25:30,080 --> 00:25:34,240
four three to say

00:25:31,279 --> 00:25:35,919
you know for the traffic that costs for

00:25:34,240 --> 00:25:38,960
class one that global

00:25:35,919 --> 00:25:41,120
change to cluster.local so that

00:25:38,960 --> 00:25:43,120
the traffic can be forwarded from the

00:25:41,120 --> 00:25:46,320
gateway to the local service

00:25:43,120 --> 00:25:49,360
so this really shows you um

00:25:46,320 --> 00:25:51,039
the power of building abstraction and

00:25:49,360 --> 00:25:53,760
your user doesn't have to create

00:25:51,039 --> 00:25:56,240
a lot of virtual service service entry

00:25:53,760 --> 00:25:59,520
and destination rule

00:25:56,240 --> 00:26:01,279
let's wrap it up as you can see service

00:25:59,520 --> 00:26:04,320
mesh extensibility are

00:26:01,279 --> 00:26:06,240
super powerful we went through different

00:26:04,320 --> 00:26:09,360
ways to extend

00:26:06,240 --> 00:26:10,080
the data plan which can be applied to

00:26:09,360 --> 00:26:12,960
the cycle

00:26:10,080 --> 00:26:13,919
proxy and also be applied to the

00:26:12,960 --> 00:26:16,720
gateways

00:26:13,919 --> 00:26:17,360
we also went to building abstraction

00:26:16,720 --> 00:26:20,720
layer

00:26:17,360 --> 00:26:24,000
on top of the service mesh api and also

00:26:20,720 --> 00:26:28,720
plugging your own ca for

00:26:24,000 --> 00:26:31,679
your service mesh we would like to

00:26:28,720 --> 00:26:32,799
have you share us your extensibility

00:26:31,679 --> 00:26:34,880
stories

00:26:32,799 --> 00:26:36,240
and see if any of these extension

00:26:34,880 --> 00:26:40,080
patterns would

00:26:36,240 --> 00:26:41,200
fit your requirements thank you very

00:26:40,080 --> 00:26:43,520
much

00:26:41,200 --> 00:26:46,960
i would love to hear any questions you

00:26:43,520 --> 00:26:46,960

YouTube URL: https://www.youtube.com/watch?v=Om6-LF9ykdQ


