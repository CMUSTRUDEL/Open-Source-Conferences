Title: Develop once, deploy anywhere: flexible infrastructure extends to the edge - Frank Zdarsky, Red Hat
Publication date: 2021-05-05
Playlist: Kubernetes on Edge Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Develop once, deploy anywhere: flexible infrastructure extends to the edge - Frank Zdarsky, Red Hat

Edge computing use cases can be highly diverse: Workloads ranging from cloud-native web services to AI to real-time control to legacy virtual appliances. Hardware footprints ranging from micro data centers to embedded compute units. Environmental challenges on networking, security, energy, … How do you go about solving this? When is Kubernetes the right choice and when not? What is important in a Kubernetes distribution for the edge and what is not? How to ensure your dev+ops complexity doesn’t explode? In this session, hear how to address many of these challenges and provide the flexibility to scale with the tools you’re already using.
Captions: 
	00:00:00,160 --> 00:00:04,319
hi everyone and welcome to this kubecon

00:00:02,480 --> 00:00:07,520
on edge virtual session about

00:00:04,319 --> 00:00:09,200
develop ones deploy anywhere

00:00:07,520 --> 00:00:11,679
flexible infrastructure extends to the

00:00:09,200 --> 00:00:13,040
edge my name is frank starsky

00:00:11,679 --> 00:00:14,719
and i'm a senior principal software

00:00:13,040 --> 00:00:18,560
engineer at red hat's

00:00:14,719 --> 00:00:21,680
office of the cto for almost

00:00:18,560 --> 00:00:23,279
two decades now there's been this trend

00:00:21,680 --> 00:00:26,240
for businesses to centralize

00:00:23,279 --> 00:00:27,920
its services in large data centers on

00:00:26,240 --> 00:00:30,720
public cloud

00:00:27,920 --> 00:00:31,519
and that made sense respectively it

00:00:30,720 --> 00:00:34,399
still makes

00:00:31,519 --> 00:00:35,280
sense in many cases because this way

00:00:34,399 --> 00:00:37,120
they can leverage

00:00:35,280 --> 00:00:38,559
economies of scale outsource

00:00:37,120 --> 00:00:41,040
infrastructure operations

00:00:38,559 --> 00:00:41,760
and capital expenditures to somebody

00:00:41,040 --> 00:00:45,039
else

00:00:41,760 --> 00:00:46,480
and somewhere else however most

00:00:45,039 --> 00:00:49,600
businesses are still

00:00:46,480 --> 00:00:52,000
brick and mortar their production has

00:00:49,600 --> 00:00:53,280
a physical location their customer

00:00:52,000 --> 00:00:57,039
contacts

00:00:53,280 --> 00:00:58,640
happen at a physical location

00:00:57,039 --> 00:01:00,559
edge computing is gaining momentum

00:00:58,640 --> 00:01:03,359
exactly because businesses are

00:01:00,559 --> 00:01:04,239
increasingly discovering the value they

00:01:03,359 --> 00:01:06,720
can generate

00:01:04,239 --> 00:01:07,280
by bringing services again closer to

00:01:06,720 --> 00:01:09,600
where

00:01:07,280 --> 00:01:12,479
they are needed where their operations

00:01:09,600 --> 00:01:14,640
are or where the data is

00:01:12,479 --> 00:01:17,360
edge computing and cloud computing are

00:01:14,640 --> 00:01:19,840
somewhat counter trends

00:01:17,360 --> 00:01:21,119
but they are not an either or decision

00:01:19,840 --> 00:01:23,200
in many cases

00:01:21,119 --> 00:01:25,280
services will be distributed between

00:01:23,200 --> 00:01:26,240
cloud and one or more tiers of edge

00:01:25,280 --> 00:01:27,520
computing

00:01:26,240 --> 00:01:30,000
with hundreds or thousands of

00:01:27,520 --> 00:01:32,159
deployments for example

00:01:30,000 --> 00:01:34,000
many businesses start with collecting

00:01:32,159 --> 00:01:36,240
data and pre-processing it

00:01:34,000 --> 00:01:38,079
at the edge while aggregating and

00:01:36,240 --> 00:01:41,280
storing the data for later analysis

00:01:38,079 --> 00:01:41,840
in the cloud over time though businesses

00:01:41,280 --> 00:01:43,680
then

00:01:41,840 --> 00:01:45,600
discover they can generate even more

00:01:43,680 --> 00:01:47,680
value to their operations

00:01:45,600 --> 00:01:48,960
and their customers if they not only

00:01:47,680 --> 00:01:51,520
collect more data

00:01:48,960 --> 00:01:52,240
but also analyze it and take decisions

00:01:51,520 --> 00:01:55,439
and actions

00:01:52,240 --> 00:01:56,960
locally at the edge advances in

00:01:55,439 --> 00:02:00,079
artificial intelligence

00:01:56,960 --> 00:02:02,960
in robotics in imaging visualization

00:02:00,079 --> 00:02:03,520
in real time process control they will

00:02:02,960 --> 00:02:06,560
further

00:02:03,520 --> 00:02:10,160
increase the momentum back towards

00:02:06,560 --> 00:02:11,680
the edge the challenge in adopting edge

00:02:10,160 --> 00:02:14,720
computing is then

00:02:11,680 --> 00:02:16,800
that use cases are extremely diverse and

00:02:14,720 --> 00:02:19,200
so is the edge computing infrastructure

00:02:16,800 --> 00:02:20,840
in support of these use cases let me

00:02:19,200 --> 00:02:22,080
give you a couple of examples from our

00:02:20,840 --> 00:02:25,280
customers

00:02:22,080 --> 00:02:27,520
folks coming from iot tend to focus on

00:02:25,280 --> 00:02:29,040
devices like sensors and actuators that

00:02:27,520 --> 00:02:31,680
are microcontroller based

00:02:29,040 --> 00:02:32,480
they only have a few tens of kilobytes

00:02:31,680 --> 00:02:35,599
of memory

00:02:32,480 --> 00:02:36,080
without memory management these devices

00:02:35,599 --> 00:02:39,280
run

00:02:36,080 --> 00:02:40,239
free rtos arduino but not linux and most

00:02:39,280 --> 00:02:44,400
definitely not

00:02:40,239 --> 00:02:47,360
kubernetes others looking in automotive

00:02:44,400 --> 00:02:49,440
robotics smartest place etc often

00:02:47,360 --> 00:02:53,200
interested in single board computers

00:02:49,440 --> 00:02:55,760
that have lower end intel or arm cpus

00:02:53,200 --> 00:02:56,800
a bit of ram but all kinds of networking

00:02:55,760 --> 00:03:00,879
and i o

00:02:56,800 --> 00:03:02,879
already on board talking to people from

00:03:00,879 --> 00:03:05,120
telco about 5g

00:03:02,879 --> 00:03:06,319
or from manufacturing about process

00:03:05,120 --> 00:03:08,080
control

00:03:06,319 --> 00:03:09,680
they tend to require powerful servers

00:03:08,080 --> 00:03:12,640
with lots of cores in ram

00:03:09,680 --> 00:03:14,720
that are extensible with all kinds of

00:03:12,640 --> 00:03:18,400
specialized hardware accelerators

00:03:14,720 --> 00:03:21,200
and are remotely manageable

00:03:18,400 --> 00:03:22,800
now if your business use case requires

00:03:21,200 --> 00:03:24,799
some services at the edge

00:03:22,800 --> 00:03:27,120
and others in the cloud will be

00:03:24,799 --> 00:03:30,840
wondering what kind of infrastructure

00:03:27,120 --> 00:03:33,120
to support this with to keep

00:03:30,840 --> 00:03:35,040
end-to-end service development and

00:03:33,120 --> 00:03:38,159
infrastructure operations as simple

00:03:35,040 --> 00:03:40,879
and consistent as possible and

00:03:38,159 --> 00:03:41,840
to be able to evolve your architecture

00:03:40,879 --> 00:03:44,959
by adding

00:03:41,840 --> 00:03:47,760
or moving services later

00:03:44,959 --> 00:03:49,920
and a typical response i hear is why not

00:03:47,760 --> 00:03:52,080
simply run kubernetes everywhere

00:03:49,920 --> 00:03:53,280
so let me briefly discuss when

00:03:52,080 --> 00:03:54,879
kubernetes is

00:03:53,280 --> 00:03:56,480
the right choice for the edge and when

00:03:54,879 --> 00:04:00,640
it isn't

00:03:56,480 --> 00:04:02,799
there are two fairly obvious cases

00:04:00,640 --> 00:04:03,680
if the services you'll be running and

00:04:02,799 --> 00:04:06,959
the load on them

00:04:03,680 --> 00:04:08,879
is known in advance and stable over time

00:04:06,959 --> 00:04:10,480
so you can right size your hardware to

00:04:08,879 --> 00:04:13,120
the use cases

00:04:10,480 --> 00:04:14,799
if you don't need high availability if

00:04:13,120 --> 00:04:16,400
you're embedding a computer unit and

00:04:14,799 --> 00:04:17,840
therefore can only ever fit a single

00:04:16,400 --> 00:04:21,280
unit anyway

00:04:17,840 --> 00:04:23,759
then realize you do not need a container

00:04:21,280 --> 00:04:25,360
orchestration layer and no matter how

00:04:23,759 --> 00:04:27,600
lightweight this layer is

00:04:25,360 --> 00:04:30,080
you're better off using something like

00:04:27,600 --> 00:04:30,639
podman as an extremely low overhead way

00:04:30,080 --> 00:04:34,479
of

00:04:30,639 --> 00:04:37,840
running parts of containers updating

00:04:34,479 --> 00:04:40,160
restarting them etc on the other hand

00:04:37,840 --> 00:04:41,680
if you do not know your service profile

00:04:40,160 --> 00:04:44,720
or load in advance

00:04:41,680 --> 00:04:47,440
or it may change over time

00:04:44,720 --> 00:04:48,960
or if you need multiple compute units to

00:04:47,440 --> 00:04:51,440
provide higher capacity

00:04:48,960 --> 00:04:53,199
or higher availability you'll eventually

00:04:51,440 --> 00:04:55,520
need clustering and orchestration

00:04:53,199 --> 00:04:56,320
and then kubernetes of course is really

00:04:55,520 --> 00:04:59,040
your best

00:04:56,320 --> 00:04:59,040
your best choice

00:04:59,600 --> 00:05:03,520
i often get the question though you know

00:05:01,840 --> 00:05:06,000
is there a case where

00:05:03,520 --> 00:05:07,120
anyone would run a clustering solution

00:05:06,000 --> 00:05:08,720
like kubernetes

00:05:07,120 --> 00:05:10,560
on a single node is that something

00:05:08,720 --> 00:05:12,639
between these extremes

00:05:10,560 --> 00:05:14,160
and the answer is that it's a good idea

00:05:12,639 --> 00:05:17,360
to decouple the design

00:05:14,160 --> 00:05:18,320
time decisions of platform to develop

00:05:17,360 --> 00:05:20,400
against

00:05:18,320 --> 00:05:22,240
and how to operate it from the

00:05:20,400 --> 00:05:24,400
deployment time decision

00:05:22,240 --> 00:05:26,479
of how much capacity and availability a

00:05:24,400 --> 00:05:28,720
given deployment needs

00:05:26,479 --> 00:05:30,000
not all edge service areas have the same

00:05:28,720 --> 00:05:31,759
load on services

00:05:30,000 --> 00:05:33,600
and not every service area is important

00:05:31,759 --> 00:05:35,520
enough to have redundancy

00:05:33,600 --> 00:05:37,280
therefore you may deploy one node for

00:05:35,520 --> 00:05:39,840
some areas and three and

00:05:37,280 --> 00:05:40,880
more nodes for others and then it

00:05:39,840 --> 00:05:43,600
doesn't make sense

00:05:40,880 --> 00:05:44,560
to develop against different targets or

00:05:43,600 --> 00:05:48,240
use a different

00:05:44,560 --> 00:05:51,520
management approach you'll notice

00:05:48,240 --> 00:05:53,919
that it's mainly operational criteria

00:05:51,520 --> 00:05:55,280
that decide whether kubernetes is right

00:05:53,919 --> 00:05:57,680
or not

00:05:55,280 --> 00:05:59,199
the currently and protected workloads

00:05:57,680 --> 00:06:00,880
the load on the system

00:05:59,199 --> 00:06:04,319
the need for high availability the

00:06:00,880 --> 00:06:07,680
security the performance to cost ratio

00:06:04,319 --> 00:06:09,840
consequently when choosing a kubernetes

00:06:07,680 --> 00:06:12,160
distribution for your edge use case

00:06:09,840 --> 00:06:13,520
your primary decision criteria should be

00:06:12,160 --> 00:06:16,319
whether

00:06:13,520 --> 00:06:17,120
the distribution adapts to your evolving

00:06:16,319 --> 00:06:19,680
use cases

00:06:17,120 --> 00:06:22,319
maybe running some web services and

00:06:19,680 --> 00:06:24,880
virtual appliances today

00:06:22,319 --> 00:06:26,160
and hardware accelerated video analytics

00:06:24,880 --> 00:06:28,479
tomorrow

00:06:26,160 --> 00:06:29,600
whether it scales to your capacity

00:06:28,479 --> 00:06:31,919
demand both

00:06:29,600 --> 00:06:32,639
in terms of number of nodes but also

00:06:31,919 --> 00:06:35,039
from

00:06:32,639 --> 00:06:36,800
low resource single board computers to

00:06:35,039 --> 00:06:38,400
high-end servers

00:06:36,800 --> 00:06:40,479
where that comes pre-integrated with the

00:06:38,400 --> 00:06:42,720
linux that's designed

00:06:40,479 --> 00:06:44,720
for edge computing for example by being

00:06:42,720 --> 00:06:46,960
able to update and auto roll back

00:06:44,720 --> 00:06:49,120
transactionally makes bars use of

00:06:46,960 --> 00:06:52,080
networking etc

00:06:49,120 --> 00:06:53,919
whether the way you develop services or

00:06:52,080 --> 00:06:56,479
manage deployments scalably

00:06:53,919 --> 00:06:57,440
is consistent across all the footprints

00:06:56,479 --> 00:07:00,840
from cloud

00:06:57,440 --> 00:07:03,360
to the device edge interestingly though

00:07:00,840 --> 00:07:04,240
developers starting with edge computing

00:07:03,360 --> 00:07:07,599
pocs

00:07:04,240 --> 00:07:09,440
often initially focus on criteria like

00:07:07,599 --> 00:07:11,120
whether cuban distribution runs on their

00:07:09,440 --> 00:07:14,960
favorite linux distribution

00:07:11,120 --> 00:07:17,280
or it uses let's say 800 megabyte

00:07:14,960 --> 00:07:19,039
memory instead of one gigabyte memory

00:07:17,280 --> 00:07:22,000
like other distributions

00:07:19,039 --> 00:07:22,800
considering the cost of ram these days

00:07:22,000 --> 00:07:26,240
and

00:07:22,800 --> 00:07:29,360
the much higher transitioning effort

00:07:26,240 --> 00:07:30,960
from pocs into prioritization

00:07:29,360 --> 00:07:32,800
this really shouldn't be high in your

00:07:30,960 --> 00:07:33,840
priority list but look into these other

00:07:32,800 --> 00:07:37,919
criteria

00:07:33,840 --> 00:07:39,199
first in that context let me just

00:07:37,919 --> 00:07:42,160
briefly highlight

00:07:39,199 --> 00:07:44,319
a couple of open source projects that we

00:07:42,160 --> 00:07:47,120
at red hat believe are super relevant

00:07:44,319 --> 00:07:49,599
for edge computing and are therefore and

00:07:47,120 --> 00:07:51,520
we are therefore investing into them

00:07:49,599 --> 00:07:52,720
on an operating system level we are

00:07:51,520 --> 00:07:56,080
investing into

00:07:52,720 --> 00:07:58,960
rpm os3 and green boot

00:07:56,080 --> 00:08:00,240
and they together allow safe

00:07:58,960 --> 00:08:02,240
transactional

00:08:00,240 --> 00:08:04,240
operating system updates and auto

00:08:02,240 --> 00:08:04,879
rollbacks because the last thing you

00:08:04,240 --> 00:08:08,319
want to do

00:08:04,879 --> 00:08:11,840
is to brick a field deployed

00:08:08,319 --> 00:08:14,560
device that you cannot service later on

00:08:11,840 --> 00:08:16,560
secure device on board

00:08:14,560 --> 00:08:17,759
to take securely take ownership of

00:08:16,560 --> 00:08:20,879
devices

00:08:17,759 --> 00:08:23,520
and to have an optimized supply chain

00:08:20,879 --> 00:08:25,199
from your hardware vendor to your

00:08:23,520 --> 00:08:28,240
deployment sites

00:08:25,199 --> 00:08:30,720
lime for remote attestation that devices

00:08:28,240 --> 00:08:33,440
haven't been tampered with

00:08:30,720 --> 00:08:34,880
on a kubernetes level it's about the

00:08:33,440 --> 00:08:36,959
ability to

00:08:34,880 --> 00:08:38,880
download operators from an application

00:08:36,959 --> 00:08:40,959
store that extend

00:08:38,880 --> 00:08:43,440
your cluster's ability to manage

00:08:40,959 --> 00:08:44,480
non-kubernetes resources or non-native

00:08:43,440 --> 00:08:46,160
resources

00:08:44,480 --> 00:08:47,760
as if they were kubernetes native

00:08:46,160 --> 00:08:50,160
resources for example

00:08:47,760 --> 00:08:51,200
virtual appliances using the cubework

00:08:50,160 --> 00:08:55,360
project

00:08:51,200 --> 00:08:57,680
or by metal servers using metal cubed

00:08:55,360 --> 00:08:59,600
and that's very powerful because

00:08:57,680 --> 00:09:02,320
modeling resources

00:08:59,600 --> 00:09:02,880
as kubernetes resources allows you to

00:09:02,320 --> 00:09:05,600
manage

00:09:02,880 --> 00:09:07,120
everything in your edge computing stack

00:09:05,600 --> 00:09:09,680
using a single set

00:09:07,120 --> 00:09:10,800
of skills and tools and that vastly

00:09:09,680 --> 00:09:13,839
simplifies

00:09:10,800 --> 00:09:14,480
operations on an operation management

00:09:13,839 --> 00:09:16,320
level

00:09:14,480 --> 00:09:18,320
we are investing into tactile and algo

00:09:16,320 --> 00:09:20,000
cd to manage whole edge

00:09:18,320 --> 00:09:21,680
computing deployments from the

00:09:20,000 --> 00:09:22,560
infrastructure to the clusters to the

00:09:21,680 --> 00:09:26,000
services

00:09:22,560 --> 00:09:27,920
using github's principles also using

00:09:26,000 --> 00:09:29,200
open cluster management for

00:09:27,920 --> 00:09:31,600
observability

00:09:29,200 --> 00:09:33,360
auditing and to apply policies and

00:09:31,600 --> 00:09:36,480
enforce policies

00:09:33,360 --> 00:09:39,040
to clusters

00:09:36,480 --> 00:09:40,880
so far of course we've only talked about

00:09:39,040 --> 00:09:43,519
edge computing infrastructure

00:09:40,880 --> 00:09:44,720
and of course it's the services on top

00:09:43,519 --> 00:09:47,600
of this infrastructure

00:09:44,720 --> 00:09:48,959
that solve your use cases unfortunately

00:09:47,600 --> 00:09:50,959
discussing those would be

00:09:48,959 --> 00:09:52,240
a completely separate talk so let me

00:09:50,959 --> 00:09:54,480
just name drop

00:09:52,240 --> 00:09:55,279
a few on this slide that we're actually

00:09:54,480 --> 00:09:58,480
using

00:09:55,279 --> 00:10:02,240
with customers to solve industry 4.0

00:09:58,480 --> 00:10:02,240
predictive maintenance use cases

00:10:03,040 --> 00:10:07,200
thank you very much for attending and

00:10:05,440 --> 00:10:12,320
please contact red hat or myself

00:10:07,200 --> 00:10:12,320

YouTube URL: https://www.youtube.com/watch?v=2KOZnUrGlEA


