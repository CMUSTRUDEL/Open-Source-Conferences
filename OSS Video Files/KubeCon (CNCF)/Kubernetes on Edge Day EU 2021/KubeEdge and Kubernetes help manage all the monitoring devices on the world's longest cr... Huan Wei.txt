Title: KubeEdge and Kubernetes help manage all the monitoring devices on the world's longest cr... Huan Wei
Publication date: 2021-05-05
Playlist: Kubernetes on Edge Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

KubeEdge and Kubernetes help manage all the monitoring devices on the world's longest cross-sea bridge - Huan Wei, HarmonyCloud

With a total length of 55 km, the HongKong-Zhuhai-Macao Bridge is the longest cross-sea bridge in the world. In order to watch and maintain the safety of the bridge, a large number of sensors are deployed on the bridge, such as temperature sensor, humidity sensor, PM 2.5 sensor, vibration sensor, noise sensor, etc. Then each sensor continuously collects data, processes data locally, and reports the abnormal information to the cloud center for alarm through real-time inference of AI model. In this presentation, Huan will share his experience on: 1) An investigation on common cloud native edge computing frameworks, and the reason why he chose KubeEdge. 2) Introducing how to mapper every kind of devices on the bridge as CRD in Kubernetes. 3) Practice on how to manage applications deployed on edge nodes. 4) Lessons learned and further planning.
Captions: 
	00:00:00,240 --> 00:00:05,759
okay let's start um today

00:00:03,120 --> 00:00:06,720
my topic is uh cooper edge and

00:00:05,759 --> 00:00:09,200
kubernetes

00:00:06,720 --> 00:00:11,040
help manage all the monitoring devices

00:00:09,200 --> 00:00:16,080
on the world's longest

00:00:11,040 --> 00:00:19,119
rc bridge

00:00:16,080 --> 00:00:20,400
okay uh first let me introduce myself uh

00:00:19,119 --> 00:00:23,039
my name is

00:00:20,400 --> 00:00:24,480
i'm from a chinese company called

00:00:23,039 --> 00:00:27,680
harmony cloud

00:00:24,480 --> 00:00:29,920
i'm the chief of dutch and i'm

00:00:27,680 --> 00:00:32,640
responsible for

00:00:29,920 --> 00:00:34,160
for ed computing i contribute to

00:00:32,640 --> 00:00:37,680
projects like

00:00:34,160 --> 00:00:39,840
ks and kobach and this is my email

00:00:37,680 --> 00:00:41,840
if you have any questions about

00:00:39,840 --> 00:00:44,079
computing or you have any

00:00:41,840 --> 00:00:45,760
scenarios about any computing that you

00:00:44,079 --> 00:00:48,640
want to discuss with me

00:00:45,760 --> 00:00:48,640
please write to me

00:00:49,360 --> 00:00:54,320
okay today the uh the content of my

00:00:53,440 --> 00:00:57,920
speech

00:00:54,320 --> 00:01:01,039
includes the following following expats

00:00:57,920 --> 00:01:02,800
the first i will um give a brief

00:01:01,039 --> 00:01:05,600
introduction about the crash

00:01:02,800 --> 00:01:06,479
including my uh investigation of the

00:01:05,600 --> 00:01:08,640
current

00:01:06,479 --> 00:01:09,840
mainstream cloud native and computing

00:01:08,640 --> 00:01:12,400
frameworks and

00:01:09,840 --> 00:01:13,119
why we choose kubernetes and then i will

00:01:12,400 --> 00:01:16,240
focus

00:01:13,119 --> 00:01:19,280
on how we apply the

00:01:16,240 --> 00:01:22,240
the kuber edge to the uh

00:01:19,280 --> 00:01:24,560
hong kong draw high micro bridge project

00:01:22,240 --> 00:01:25,759
including how to define the devices on

00:01:24,560 --> 00:01:28,720
the bridge

00:01:25,759 --> 00:01:29,520
how to associate each device with the

00:01:28,720 --> 00:01:32,640
cid

00:01:29,520 --> 00:01:35,840
in ks and how to manage and

00:01:32,640 --> 00:01:39,920
operate the applications deployed on

00:01:35,840 --> 00:01:42,479
edge nodes and finally i will briefly

00:01:39,920 --> 00:01:45,360
share some of our best practices on

00:01:42,479 --> 00:01:45,360
health computing

00:01:45,600 --> 00:01:53,840
uh okay this is a uh overview of kubat

00:01:50,320 --> 00:01:56,079
kuberas is the first cncf incubating

00:01:53,840 --> 00:02:00,399
edge computing project

00:01:56,079 --> 00:02:04,159
it starts from november and 2018

00:02:00,399 --> 00:02:07,600
and now it has more than 900 force and

00:02:04,159 --> 00:02:10,879
almost 400 stars um

00:02:07,600 --> 00:02:14,480
and and also some key points from the

00:02:10,879 --> 00:02:16,800
perspective of the architecture

00:02:14,480 --> 00:02:17,920
first it's very compatible with the

00:02:16,800 --> 00:02:21,200
equip api

00:02:17,920 --> 00:02:22,160
and it's very stable and because it has

00:02:21,200 --> 00:02:25,680
a

00:02:22,160 --> 00:02:28,720
very reliable message push from

00:02:25,680 --> 00:02:29,760
cloud to edge and it and it can be very

00:02:28,720 --> 00:02:33,280
lightweight

00:02:29,760 --> 00:02:37,200
uh we can we can tailor the the

00:02:33,280 --> 00:02:40,879
led and also is is tailored from

00:02:37,200 --> 00:02:44,560
uh converted and it can support

00:02:40,879 --> 00:02:47,760
um some very wide area no success

00:02:44,560 --> 00:02:48,560
and uh sports very large skill devices

00:02:47,760 --> 00:02:51,760
access

00:02:48,560 --> 00:02:57,200
and and finally it has the

00:02:51,760 --> 00:02:57,200
uh the edge autonomy

00:02:57,920 --> 00:03:04,159
and uh also i investigated

00:03:01,120 --> 00:03:07,680
some cognitive open source on

00:03:04,159 --> 00:03:12,319
edge computer frameworks like k3s

00:03:07,680 --> 00:03:12,319
on yachts and super edge and

00:03:12,480 --> 00:03:19,280
of this these frameworks

00:03:15,519 --> 00:03:22,560
are uh become popular

00:03:19,280 --> 00:03:25,599
yeah in in china in china

00:03:22,560 --> 00:03:29,200
but um while we choose

00:03:25,599 --> 00:03:32,879
uh cooperage and from my point of view

00:03:29,200 --> 00:03:35,920
and i think we have the some reasons

00:03:32,879 --> 00:03:38,799
first from my point of view k3s

00:03:35,920 --> 00:03:40,400
is a solution to manage engine nodes at

00:03:38,799 --> 00:03:44,159
local

00:03:40,400 --> 00:03:47,200
and the k3s does not provide a solution

00:03:44,159 --> 00:03:50,239
like what earlier node access and

00:03:47,200 --> 00:03:52,720
uh both open arch and super edge

00:03:50,239 --> 00:03:53,920
do not provide the lightweight solution

00:03:52,720 --> 00:03:57,680
for node access

00:03:53,920 --> 00:04:01,840
and device management and uh

00:03:57,680 --> 00:04:01,840
both open yacht and super edge

00:04:01,920 --> 00:04:05,519
may have the stability risk in the case

00:04:04,640 --> 00:04:09,040
of cloud edge

00:04:05,519 --> 00:04:09,519
network fluctuations we know we all know

00:04:09,040 --> 00:04:13,120
that

00:04:09,519 --> 00:04:17,040
um it's caused by the lead risk

00:04:13,120 --> 00:04:17,040
problem of informer

00:04:18,160 --> 00:04:24,720
okay so uh so what's this fast about

00:04:22,000 --> 00:04:25,919
the long the world's longest privacy

00:04:24,720 --> 00:04:31,040
bridge

00:04:25,919 --> 00:04:32,800
with total length of the 55 kilometers

00:04:31,040 --> 00:04:34,960
so hong kong through high micro bridge

00:04:32,800 --> 00:04:36,240
is the longest across the bridge in the

00:04:34,960 --> 00:04:40,240
world

00:04:36,240 --> 00:04:42,240
and in order to monitor the safety of

00:04:40,240 --> 00:04:46,240
the bridge at times

00:04:42,240 --> 00:04:49,680
said a lot of number of sensors

00:04:46,240 --> 00:04:53,759
are deployed on the bridge and

00:04:49,680 --> 00:04:56,320
each sensor will generates regenerates

00:04:53,759 --> 00:04:58,080
large amounts of data all the data need

00:04:56,320 --> 00:05:00,880
to be created and processed

00:04:58,080 --> 00:05:02,080
in real time and any abnormal

00:05:00,880 --> 00:05:04,720
information

00:05:02,080 --> 00:05:06,880
from on the bridge need to be alert

00:05:04,720 --> 00:05:10,000
immediately

00:05:06,880 --> 00:05:12,960
but there is some some problems in

00:05:10,000 --> 00:05:14,160
context it says large amounts of

00:05:12,960 --> 00:05:16,560
monetary equipments

00:05:14,160 --> 00:05:16,560
and uh

00:05:17,440 --> 00:05:25,440
say large very large number

00:05:21,440 --> 00:05:28,240
amount of data and has very low

00:05:25,440 --> 00:05:28,880
value density that means and there are

00:05:28,240 --> 00:05:32,000
lots of

00:05:28,880 --> 00:05:35,199
invalid and duplicated data

00:05:32,000 --> 00:05:37,759
that we don't have and uh

00:05:35,199 --> 00:05:40,000
the bridge is very long it has a long

00:05:37,759 --> 00:05:41,039
instance under the very difficult

00:05:40,000 --> 00:05:45,280
construct

00:05:41,039 --> 00:05:48,639
construction and also if we want to

00:05:45,280 --> 00:05:51,520
position the the

00:05:48,639 --> 00:05:53,360
problem of the pitch we will need

00:05:51,520 --> 00:05:56,080
obviously we will need to see 5g

00:05:53,360 --> 00:05:56,080
transmission

00:05:56,720 --> 00:06:03,759
and so uh here's our solution we use the

00:06:00,400 --> 00:06:03,759
5g communication

00:06:04,080 --> 00:06:08,479
plus beta position and plus edge

00:06:07,360 --> 00:06:12,080
computing

00:06:08,479 --> 00:06:15,199
and and and we use kubernetes

00:06:12,080 --> 00:06:17,360
and in so in this way uh

00:06:15,199 --> 00:06:19,199
that all the data created from the

00:06:17,360 --> 00:06:22,319
sensor you protest

00:06:19,199 --> 00:06:24,400
will process locally at edge and any

00:06:22,319 --> 00:06:27,039
abnormal information

00:06:24,400 --> 00:06:28,720
uh could be found through real-time ar

00:06:27,039 --> 00:06:31,199
influence

00:06:28,720 --> 00:06:31,840
and this ai information program also

00:06:31,199 --> 00:06:35,600
runs

00:06:31,840 --> 00:06:38,960
at edge and all the app applications

00:06:35,600 --> 00:06:42,960
are managed at the cloud and

00:06:38,960 --> 00:06:46,240
the arc key can all be it can

00:06:42,960 --> 00:06:49,039
be distributed by clouds and

00:06:46,240 --> 00:06:49,840
supports the dynamic operation and the

00:06:49,039 --> 00:06:52,479
maintenance

00:06:49,840 --> 00:06:52,479
at the edge

00:06:53,440 --> 00:06:59,759
as you can see we will

00:06:56,560 --> 00:07:03,039
have many add box deployed

00:06:59,759 --> 00:07:03,759
alongside the bridge these edge bars it

00:07:03,039 --> 00:07:07,280
also

00:07:03,759 --> 00:07:08,319
uh means edge node in the group edge

00:07:07,280 --> 00:07:12,240
framework

00:07:08,319 --> 00:07:16,000
and also we use we have the 5g

00:07:12,240 --> 00:07:18,160
antenna and many sensors like here is

00:07:16,000 --> 00:07:21,919
the sensor

00:07:18,160 --> 00:07:25,680
is a shutter sensor

00:07:21,919 --> 00:07:28,479
and here you can see uh how the

00:07:25,680 --> 00:07:29,360
audi capacity is on the bridge on the on

00:07:28,479 --> 00:07:32,880
the left

00:07:29,360 --> 00:07:36,800
it's the edge box it is composed by

00:07:32,880 --> 00:07:40,560
a cardboard and the base plates

00:07:36,800 --> 00:07:43,919
and on the right uh here you can see

00:07:40,560 --> 00:07:46,720
the many many other fences like

00:07:43,919 --> 00:07:47,440
the snow sensor microphone and the

00:07:46,720 --> 00:07:51,520
environment

00:07:47,440 --> 00:07:55,919
aware integrated structure and also the

00:07:51,520 --> 00:07:59,280
imu totally we can

00:07:55,919 --> 00:08:02,080
you can measure for 14 types of sense

00:07:59,280 --> 00:08:02,080
sensor data

00:08:04,560 --> 00:08:11,520
and here is a picture of the

00:08:08,639 --> 00:08:12,639
structure this structure can crash light

00:08:11,520 --> 00:08:16,080
intensity

00:08:12,639 --> 00:08:19,440
carbon pressure noise temperature

00:08:16,080 --> 00:08:22,879
humidity yeah and also

00:08:19,440 --> 00:08:25,680
um but how to manage this structure

00:08:22,879 --> 00:08:26,720
as a medicine structure so in in

00:08:25,680 --> 00:08:32,000
equipment

00:08:26,720 --> 00:08:32,000
in the in the cooper edge um we can

00:08:32,320 --> 00:08:39,919
we can define this device

00:08:35,440 --> 00:08:41,120
uh we can define the this kind of

00:08:39,919 --> 00:08:44,800
shutter device

00:08:41,120 --> 00:08:50,320
uh called device model and we can define

00:08:44,800 --> 00:08:50,320
each device instance use this model

00:08:51,440 --> 00:08:58,080
here's here is the the

00:08:54,800 --> 00:08:59,360
yaml file of the device model here we

00:08:58,080 --> 00:09:02,399
can see we can

00:08:59,360 --> 00:09:06,320
define many properties

00:09:02,399 --> 00:09:09,839
regarding this this device model

00:09:06,320 --> 00:09:13,200
you can have the property name and the

00:09:09,839 --> 00:09:16,399
property description property type and

00:09:13,200 --> 00:09:18,480
the method of property collection yeah

00:09:16,399 --> 00:09:21,600
currently here you can see

00:09:18,480 --> 00:09:24,080
read-only mode and also

00:09:21,600 --> 00:09:25,600
here you can see they are different and

00:09:24,080 --> 00:09:29,120
we can

00:09:25,600 --> 00:09:31,680
define many different dress model

00:09:29,120 --> 00:09:31,680
properties

00:09:32,480 --> 00:09:39,040
and also we can have an yaml file to

00:09:36,000 --> 00:09:42,080
define the the device

00:09:39,040 --> 00:09:45,360
here we we define the

00:09:42,080 --> 00:09:46,320
the shutter difference instance and here

00:09:45,360 --> 00:09:49,120
we can

00:09:46,320 --> 00:09:51,440
in the specification we can define the

00:09:49,120 --> 00:09:55,600
reference device model name

00:09:51,440 --> 00:09:58,720
and the uh protocol and the

00:09:55,600 --> 00:10:02,160
uh we used yes here's the mode box

00:09:58,720 --> 00:10:05,279
and also the slave id

00:10:02,160 --> 00:10:09,120
and also um the

00:10:05,279 --> 00:10:12,399
uh like the serial port boundary

00:10:09,120 --> 00:10:15,760
data bits priority bits

00:10:12,399 --> 00:10:18,670
these are these properties are all uh

00:10:15,760 --> 00:10:20,640
special they are specific easy

00:10:18,670 --> 00:10:24,640
[Music]

00:10:20,640 --> 00:10:29,440
see structure yeah here also we can see

00:10:24,640 --> 00:10:32,399
there's a segment regarding the data

00:10:29,440 --> 00:10:34,720
the data means it set the data field for

00:10:32,399 --> 00:10:38,079
the third part data push

00:10:34,720 --> 00:10:42,000
this means the data created from

00:10:38,079 --> 00:10:45,519
this shutter can be

00:10:42,000 --> 00:10:49,360
pushed to the cloud but it

00:10:45,519 --> 00:10:52,240
also can be pushed to some third-party

00:10:49,360 --> 00:10:52,240
data storage

00:10:52,880 --> 00:10:58,320
uh just like uh like nifa db

00:10:56,160 --> 00:10:59,519
and here also we can also see you can

00:10:58,320 --> 00:11:02,959
see the

00:10:59,519 --> 00:11:05,200
status this segment is used to define

00:11:02,959 --> 00:11:08,880
the data reported to the cloud

00:11:05,200 --> 00:11:11,760
that is and also means the drastically

00:11:08,880 --> 00:11:11,760
addressed screen

00:11:12,320 --> 00:11:19,360
here we the many types of

00:11:16,000 --> 00:11:20,959
the trains like uh yeah there you can

00:11:19,360 --> 00:11:24,640
see

00:11:20,959 --> 00:11:28,640
the last yeah the carbon the pressure

00:11:24,640 --> 00:11:32,160
and the humidity

00:11:28,640 --> 00:11:35,360
and um and we can also

00:11:32,160 --> 00:11:39,360
um deploy and manage uh

00:11:35,360 --> 00:11:43,600
the different applications to the edge

00:11:39,360 --> 00:11:48,480
from the clouds and currently

00:11:43,600 --> 00:11:48,480
yeah basically speaking um

00:11:48,560 --> 00:11:55,120
and the targets

00:11:52,000 --> 00:11:57,920
that the tabs deployed to the edge

00:11:55,120 --> 00:11:59,839
can be can be

00:11:57,920 --> 00:12:03,040
[Music]

00:11:59,839 --> 00:12:03,680
summarized as three types when use the

00:12:03,040 --> 00:12:06,079
business

00:12:03,680 --> 00:12:07,040
applications like engineers pump cache

00:12:06,079 --> 00:12:11,200
etc

00:12:07,040 --> 00:12:14,399
and we and all the device member

00:12:11,200 --> 00:12:17,839
program that we that we we

00:12:14,399 --> 00:12:21,600
write to class to the clutch data and

00:12:17,839 --> 00:12:24,480
push your data to a cloud see all um

00:12:21,600 --> 00:12:25,279
they are deployed as container handlers

00:12:24,480 --> 00:12:30,000
and this

00:12:25,279 --> 00:12:33,760
consists containers are also divided

00:12:30,000 --> 00:12:37,600
are also deployed to the to the edge

00:12:33,760 --> 00:12:41,440
and also there's a type

00:12:37,600 --> 00:12:45,440
with another problem like the ai

00:12:41,440 --> 00:12:48,079
influence programs said in order to

00:12:45,440 --> 00:12:50,399
do the inference work immediately at

00:12:48,079 --> 00:12:50,399
edge

00:12:51,200 --> 00:12:58,560
and this is um a picture of the

00:12:55,440 --> 00:13:02,480
whole uh whole

00:12:58,560 --> 00:13:06,720
whole architecture from the clouds

00:13:02,480 --> 00:13:09,440
to the edge and to the sensors yeah

00:13:06,720 --> 00:13:10,320
we can see the clutch clutch we have the

00:13:09,440 --> 00:13:13,600
kubernetes

00:13:10,320 --> 00:13:16,399
and the uh the

00:13:13,600 --> 00:13:19,120
claw core the claw cord is the the

00:13:16,399 --> 00:13:22,399
keyboard cover buttons of course edge

00:13:19,120 --> 00:13:25,440
and at the edge you have the

00:13:22,399 --> 00:13:28,320
uh the edge called edge called as

00:13:25,440 --> 00:13:29,200
coil is the key component the key

00:13:28,320 --> 00:13:33,440
component

00:13:29,200 --> 00:13:36,639
of cobalt at edge and also

00:13:33,440 --> 00:13:40,399
here we can see how mqtt will occur

00:13:36,639 --> 00:13:44,000
and here we also we have many components

00:13:40,399 --> 00:13:47,199
in other should do the uh data collect

00:13:44,000 --> 00:13:48,320
data collection data processing and the

00:13:47,199 --> 00:13:52,720
data

00:13:48,320 --> 00:13:57,040
uh conversation

00:13:52,720 --> 00:14:00,320
and here the cloud is responsible for

00:13:57,040 --> 00:14:02,000
connecting to the bridge

00:14:00,320 --> 00:14:03,920
health the bridge health monitoring

00:14:02,000 --> 00:14:06,959
system and managing the

00:14:03,920 --> 00:14:10,880
edge nodes and add applications and

00:14:06,959 --> 00:14:13,920
the edge knowledge is responsible for

00:14:10,880 --> 00:14:13,920
uh for

00:14:15,680 --> 00:14:18,720
for uh

00:14:18,880 --> 00:14:22,079
for connect various sensors of the

00:14:21,519 --> 00:14:25,120
bridge

00:14:22,079 --> 00:14:28,000
and uh push the other data

00:14:25,120 --> 00:14:28,320
to the cloud and here you can see we

00:14:28,000 --> 00:14:31,839
have

00:14:28,320 --> 00:14:31,839
already connected many

00:14:32,000 --> 00:14:36,160
many sensors at the edge

00:14:37,279 --> 00:14:45,839
and also finally we also

00:14:41,360 --> 00:14:45,839
i have also have some best practices

00:14:47,920 --> 00:14:51,760
first about the data collection

00:14:50,240 --> 00:14:53,440
frequency

00:14:51,760 --> 00:14:54,959
the data question frequency of the

00:14:53,440 --> 00:14:58,000
mapper

00:14:54,959 --> 00:15:01,360
actually before will directly affects

00:14:58,000 --> 00:15:05,360
the cpu and the memory resources

00:15:01,360 --> 00:15:07,920
and occupied by the mapper

00:15:05,360 --> 00:15:08,800
and and generally speaking the system

00:15:07,920 --> 00:15:12,160
resource

00:15:08,800 --> 00:15:15,120
consumption is proportional to

00:15:12,160 --> 00:15:15,920
the collection frequency of the mapper

00:15:15,120 --> 00:15:19,040
and when the

00:15:15,920 --> 00:15:22,320
edge resources are limited

00:15:19,040 --> 00:15:25,519
and the correction frequency should be

00:15:22,320 --> 00:15:26,959
strictly controlled and

00:15:25,519 --> 00:15:28,720
uh generally speaking there are two

00:15:26,959 --> 00:15:32,320
types to push later

00:15:28,720 --> 00:15:35,759
uh that correct uh from mapper

00:15:32,320 --> 00:15:39,759
first uh you push to cloud call

00:15:35,759 --> 00:15:43,600
uh as we all know the sql writes

00:15:39,759 --> 00:15:46,560
installed in the edge of the

00:15:43,600 --> 00:15:49,360
edge you only store the latest piece of

00:15:46,560 --> 00:15:52,720
data from the current device

00:15:49,360 --> 00:15:52,720
and the edge cloud

00:15:52,959 --> 00:15:57,040
does not provide storage for a large

00:15:56,560 --> 00:16:00,800
amount

00:15:57,040 --> 00:16:04,639
of data creation and the

00:16:00,800 --> 00:16:06,079
uh second second we can push the data to

00:16:04,639 --> 00:16:09,920
the database

00:16:06,079 --> 00:16:13,519
and that means and after the

00:16:09,920 --> 00:16:16,880
mapper class data it does not

00:16:13,519 --> 00:16:20,000
uh push it to mqtt at local

00:16:16,880 --> 00:16:23,279
uh but uh can be directly pushed

00:16:20,000 --> 00:16:24,800
later to the third party developers like

00:16:23,279 --> 00:16:28,480
input db

00:16:24,800 --> 00:16:31,360
and also i have some

00:16:28,480 --> 00:16:32,880
best searches um regarding the data

00:16:31,360 --> 00:16:35,040
reporting frequency

00:16:32,880 --> 00:16:36,079
and generally speaking the data

00:16:35,040 --> 00:16:39,120
reporting frequency

00:16:36,079 --> 00:16:43,040
of mapper is also uh proportional to

00:16:39,120 --> 00:16:46,880
the h-cord resource usage

00:16:43,040 --> 00:16:49,600
and so if either source is limited

00:16:46,880 --> 00:16:51,440
the data reporting frequency should also

00:16:49,600 --> 00:16:56,399
be controlled

00:16:51,440 --> 00:16:59,920
and about the catch

00:16:56,399 --> 00:17:03,279
um that means when the cloud and edge

00:16:59,920 --> 00:17:06,880
node is in a weak network

00:17:03,279 --> 00:17:09,600
all intermediately disconnected

00:17:06,880 --> 00:17:11,679
we hope the business data at any node

00:17:09,600 --> 00:17:15,439
will not be lost

00:17:11,679 --> 00:17:17,120
but the storage space of the edge node

00:17:15,439 --> 00:17:20,240
is also limited

00:17:17,120 --> 00:17:23,120
and we hope that the edge catch

00:17:20,240 --> 00:17:24,240
could be designed as lightweight

00:17:23,120 --> 00:17:27,679
solution

00:17:24,240 --> 00:17:31,120
that means once network is good

00:17:27,679 --> 00:17:33,840
the ads can directly push data to the

00:17:31,120 --> 00:17:33,840
cloud

00:17:34,240 --> 00:17:38,640
when the network between cloud and edge

00:17:36,640 --> 00:17:42,559
is disconnected

00:17:38,640 --> 00:17:45,280
and then the edge nodes will catch later

00:17:42,559 --> 00:17:46,400
and when the network is restart again

00:17:45,280 --> 00:17:49,520
the data will be

00:17:46,400 --> 00:17:53,120
synced to the cloud using uh

00:17:49,520 --> 00:17:53,120
like a scheduled task

00:17:53,280 --> 00:17:59,360
and about the ar model warm up at

00:17:56,320 --> 00:18:03,039
edge that means um and this

00:17:59,360 --> 00:18:03,919
uh i think is very useful you just can't

00:18:03,039 --> 00:18:07,440
use like

00:18:03,919 --> 00:18:11,039
uh with the edge ai we need to update

00:18:07,440 --> 00:18:14,160
and add an

00:18:11,039 --> 00:18:17,760
ar model in seconds

00:18:14,160 --> 00:18:20,559
but sometimes the image size of their

00:18:17,760 --> 00:18:24,000
model may be very large

00:18:20,559 --> 00:18:27,600
and the network of edge

00:18:24,000 --> 00:18:31,200
nodes may be very poor in this case

00:18:27,600 --> 00:18:34,160
if we don't adopt um

00:18:31,200 --> 00:18:35,039
any image warm-up function then the ai

00:18:34,160 --> 00:18:39,120
influencer work

00:18:35,039 --> 00:18:42,240
view likely to be interrupted

00:18:39,120 --> 00:18:43,039
during the image updates uh this is what

00:18:42,240 --> 00:18:46,160
we don't

00:18:43,039 --> 00:18:50,000
want to want wanted to happen

00:18:46,160 --> 00:18:53,039
i think and also uh we need

00:18:50,000 --> 00:18:56,240
some massive anti-node access

00:18:53,039 --> 00:18:59,840
for example if we have more than 100

00:18:56,240 --> 00:19:04,320
thousands nodes need to connect

00:18:59,840 --> 00:19:07,440
in this value of the massive node

00:19:04,320 --> 00:19:11,440
in excess we all know

00:19:07,440 --> 00:19:12,640
we can guess that egcd api server and

00:19:11,440 --> 00:19:15,120
the cloud call

00:19:12,640 --> 00:19:16,559
are unlikely to become the performance

00:19:15,120 --> 00:19:20,799
bottleneck

00:19:16,559 --> 00:19:24,160
generally speaking there are two ways to

00:19:20,799 --> 00:19:27,600
resolve the police problem first

00:19:24,160 --> 00:19:31,919
by simplifying the node status object

00:19:27,600 --> 00:19:35,200
report status object the traffic

00:19:31,919 --> 00:19:39,039
in patch on the car call caused by the

00:19:35,200 --> 00:19:42,080
large scale edge called

00:19:39,039 --> 00:19:43,360
reporting information can be reduced and

00:19:42,080 --> 00:19:47,039
the second

00:19:43,360 --> 00:19:47,360
use the dynamic i use some an operation

00:19:47,039 --> 00:19:50,400
like

00:19:47,360 --> 00:19:53,679
the dynamic effect of organization

00:19:50,400 --> 00:19:54,640
we can avoid the same simultaneous

00:19:53,679 --> 00:19:57,280
excess

00:19:54,640 --> 00:19:59,280
of a large number of action nodes yes

00:19:57,280 --> 00:20:02,480
this is also very useful

00:19:59,280 --> 00:20:06,000
and finally uh in the case of

00:20:02,480 --> 00:20:09,120
my of the massive node excess

00:20:06,000 --> 00:20:13,360
we also should adopt

00:20:09,120 --> 00:20:16,400
some scheme like as long as the edge

00:20:13,360 --> 00:20:17,600
node is powered on and the connects to

00:20:16,400 --> 00:20:21,120
the internet

00:20:17,600 --> 00:20:21,919
then the cloud site should automatically

00:20:21,120 --> 00:20:25,679
discover

00:20:21,919 --> 00:20:29,760
the edge node and automatically install

00:20:25,679 --> 00:20:34,640
any edge components yeah

00:20:29,760 --> 00:20:37,120
i think uh this is all my my

00:20:34,640 --> 00:20:38,400
lesson learned and the best best

00:20:37,120 --> 00:20:43,440
practices

00:20:38,400 --> 00:20:43,440
yeah from the for the coverage

00:20:43,840 --> 00:20:47,600

YouTube URL: https://www.youtube.com/watch?v=iXFvT-NtElk


