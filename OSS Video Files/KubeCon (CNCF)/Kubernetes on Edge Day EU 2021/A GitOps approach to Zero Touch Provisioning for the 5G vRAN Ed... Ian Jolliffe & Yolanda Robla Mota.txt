Title: A GitOps approach to Zero Touch Provisioning for the 5G vRAN Ed... Ian Jolliffe & Yolanda Robla Mota
Publication date: 2021-05-05
Playlist: Kubernetes on Edge Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

A GitOps approach to Zero Touch Provisioning for the 5G vRAN Edge - Ian Jolliffe & Yolanda Robla Mota, Red Hat

Traditional approaches for deploying software at the Edge don’t scale. For example, consider the effort to deploy thousands of nodes at the Edge of the network for 5G vRAN DU’s at the base of cell towers, we need a new approach. Zero Touch Provisioning (ZTP) and declarative frameworks can be leveraged to drive down OPEX and deploy software in parallel to multiple sites, with no human intervention. The declarative framework leverages many open source projects including Ansible, Kustomize, OpenShift, and Open Cluster Management. This is a diverse environment, using declarative frameworks, we can define the infrastructure as code and manage it via GitOps methodologies. These approaches are required so that the operator can bring a diverse ecosystem together to address their business problems at scale.
Captions: 
	00:00:00,160 --> 00:00:04,400
good morning good afternoon welcome to

00:00:02,159 --> 00:00:06,879
cube on the edge

00:00:04,400 --> 00:00:08,480
my name is ian joloff and i'm here with

00:00:06,879 --> 00:00:10,559
my colleague yolanda

00:00:08,480 --> 00:00:11,679
and we're really excited to be talking

00:00:10,559 --> 00:00:13,759
to you today about a

00:00:11,679 --> 00:00:17,920
a git ops approach to zero touch

00:00:13,759 --> 00:00:19,600
provisioning for the 5g vran edge

00:00:17,920 --> 00:00:21,600
well let's maybe start off with

00:00:19,600 --> 00:00:23,519
introducing each other maybe

00:00:21,600 --> 00:00:25,359
you go first yolanda and then i'll all

00:00:23,519 --> 00:00:28,560
do the same

00:00:25,359 --> 00:00:30,720
hello i'm yolanda robla i'm from spain

00:00:28,560 --> 00:00:31,920
i've been working in red hat since five

00:00:30,720 --> 00:00:34,239
years

00:00:31,920 --> 00:00:35,040
and i've always been dedicated to open

00:00:34,239 --> 00:00:37,920
source

00:00:35,040 --> 00:00:38,960
and clouds in the latest times i've been

00:00:37,920 --> 00:00:42,079
working in

00:00:38,960 --> 00:00:44,239
kubernetes and openshift like especially

00:00:42,079 --> 00:00:46,960
setting in telcos

00:00:44,239 --> 00:00:48,239
and well i'm working in like using

00:00:46,960 --> 00:00:51,680
openshift

00:00:48,239 --> 00:00:53,760
for 5g and run deployments

00:00:51,680 --> 00:00:55,039
thanks yolanda and again my name is ian

00:00:53,760 --> 00:00:57,440
joloff i

00:00:55,039 --> 00:00:58,719
recently joined red hat i'm located in

00:00:57,440 --> 00:01:00,800
ottawa canada

00:00:58,719 --> 00:01:02,000
i've been working in open source

00:01:00,800 --> 00:01:04,879
projects for

00:01:02,000 --> 00:01:05,519
the last 10 years and most of my career

00:01:04,879 --> 00:01:08,240
in

00:01:05,519 --> 00:01:10,080
in telecom i really interested in

00:01:08,240 --> 00:01:12,640
virtualization

00:01:10,080 --> 00:01:14,479
openstack kubernetes and other open

00:01:12,640 --> 00:01:18,080
source projects

00:01:14,479 --> 00:01:19,360
so let's dive in so today what we'll

00:01:18,080 --> 00:01:21,439
discuss is

00:01:19,360 --> 00:01:22,720
some of the 5g rant topologies and

00:01:21,439 --> 00:01:25,280
challenges

00:01:22,720 --> 00:01:26,320
really trying to take those concepts and

00:01:25,280 --> 00:01:29,520
apply them to

00:01:26,320 --> 00:01:31,119
infrastructure's code at the edge go

00:01:29,520 --> 00:01:32,479
through some declarative frameworks and

00:01:31,119 --> 00:01:34,640
workflows

00:01:32,479 --> 00:01:37,040
for these deployments and then wrap with

00:01:34,640 --> 00:01:37,040
a demo

00:01:37,280 --> 00:01:41,280
so one of the technologies that we're

00:01:38,799 --> 00:01:43,920
leveraging is openshift

00:01:41,280 --> 00:01:44,799
it's really a distribution of kubernetes

00:01:43,920 --> 00:01:47,600
that comes with

00:01:44,799 --> 00:01:48,720
things like a registry and many other

00:01:47,600 --> 00:01:52,560
very important

00:01:48,720 --> 00:01:52,560
components like networking overlays

00:01:53,040 --> 00:01:56,479
so let's look at start by looking at

00:01:54,720 --> 00:01:56,880
some of the challenging topologies at

00:01:56,479 --> 00:02:00,000
the

00:01:56,880 --> 00:02:01,200
at the edge of the network um let's

00:02:00,000 --> 00:02:05,119
start at the bottom and

00:02:01,200 --> 00:02:06,719
and work our way up so uh

00:02:05,119 --> 00:02:08,720
starting with a three node cluster where

00:02:06,719 --> 00:02:09,599
we have supervisor functions and worker

00:02:08,720 --> 00:02:12,080
functions on

00:02:09,599 --> 00:02:12,720
a set of three nodes this would probably

00:02:12,080 --> 00:02:15,840
be

00:02:12,720 --> 00:02:19,200
located in a regional data center

00:02:15,840 --> 00:02:21,599
potentially running cu workloads

00:02:19,200 --> 00:02:23,440
up next we've got where the supervisor

00:02:21,599 --> 00:02:26,239
nodes are located in the

00:02:23,440 --> 00:02:27,520
in the regional data center again but

00:02:26,239 --> 00:02:29,680
then leveraging

00:02:27,520 --> 00:02:31,680
remote worker nodes at the edge of the

00:02:29,680 --> 00:02:33,200
network and this is the configuration

00:02:31,680 --> 00:02:36,560
that we're leveraging

00:02:33,200 --> 00:02:40,080
in our demo and the third third

00:02:36,560 --> 00:02:42,640
topology is really uh where supervisor

00:02:40,080 --> 00:02:43,680
and worker nodes are both at the edge of

00:02:42,640 --> 00:02:46,640
the network

00:02:43,680 --> 00:02:47,840
uh and this is a really our single node

00:02:46,640 --> 00:02:49,519
edge server

00:02:47,840 --> 00:02:51,760
configuration this really helps with low

00:02:49,519 --> 00:02:54,959
bandwidth or completely

00:02:51,760 --> 00:02:55,760
remote sites and that's some work that's

00:02:54,959 --> 00:02:59,920
going on

00:02:55,760 --> 00:03:02,159
right now the key technology

00:02:59,920 --> 00:03:04,319
that we're leveraging is open cluster

00:03:02,159 --> 00:03:06,239
manager and

00:03:04,319 --> 00:03:07,840
it really allows you to manage many

00:03:06,239 --> 00:03:09,680
clusters

00:03:07,840 --> 00:03:10,959
as if you were operating in the in the

00:03:09,680 --> 00:03:13,280
core of the network

00:03:10,959 --> 00:03:14,560
helps with life cycle management policy

00:03:13,280 --> 00:03:17,519
governance

00:03:14,560 --> 00:03:18,640
and advanced life cycle management

00:03:17,519 --> 00:03:23,599
concepts

00:03:18,640 --> 00:03:23,599
like deployment and updates and upgrades

00:03:23,920 --> 00:03:28,159
so some of the key considerations at the

00:03:26,799 --> 00:03:33,040
edge of the network

00:03:28,159 --> 00:03:36,159
are really about latency from the

00:03:33,040 --> 00:03:38,799
du to the radio unit

00:03:36,159 --> 00:03:39,680
extremely tight tolerances are required

00:03:38,799 --> 00:03:42,799
for latency

00:03:39,680 --> 00:03:44,319
in this modality and so you really need

00:03:42,799 --> 00:03:45,760
to make sure you're getting the maximum

00:03:44,319 --> 00:03:46,799
performance out of the servers that are

00:03:45,760 --> 00:03:48,879
located

00:03:46,799 --> 00:03:51,200
at the edge of the network things like

00:03:48,879 --> 00:03:54,159
real-time kernel

00:03:51,200 --> 00:03:54,959
multis and srov are key components that

00:03:54,159 --> 00:03:57,280
we need

00:03:54,959 --> 00:03:58,239
to think of and deploy at these edge

00:03:57,280 --> 00:04:00,959
sites

00:03:58,239 --> 00:04:02,799
so we're really providing a common and

00:04:00,959 --> 00:04:04,400
automated infrastructure that allows you

00:04:02,799 --> 00:04:06,080
to manage all these nodes as if they

00:04:04,400 --> 00:04:08,959
were in the data center

00:04:06,080 --> 00:04:10,000
we've also looked at how to deploy um

00:04:08,959 --> 00:04:12,480
with small

00:04:10,000 --> 00:04:14,480
iso so it's easy to bring up and deploy

00:04:12,480 --> 00:04:16,639
your servers at the edge of the network

00:04:14,480 --> 00:04:18,799
so it's really all about making sure

00:04:16,639 --> 00:04:21,359
that these servers that are

00:04:18,799 --> 00:04:23,040
in very disparate geographies can be

00:04:21,359 --> 00:04:24,639
configured and managed as if they were

00:04:23,040 --> 00:04:28,320
part of a

00:04:24,639 --> 00:04:29,840
normal kubernetes cluster

00:04:28,320 --> 00:04:31,840
so let's shift the focus of the

00:04:29,840 --> 00:04:34,240
conversation today to

00:04:31,840 --> 00:04:37,440
get ops and you know this is the

00:04:34,240 --> 00:04:39,759
deployment topology that

00:04:37,440 --> 00:04:41,040
we'll be following and i thought we'd

00:04:39,759 --> 00:04:43,120
start with a

00:04:41,040 --> 00:04:44,240
an industry definition for get ops i

00:04:43,120 --> 00:04:47,199
won't read at all but

00:04:44,240 --> 00:04:47,600
uh the keywords that really resonated

00:04:47,199 --> 00:04:49,040
were

00:04:47,600 --> 00:04:51,759
for me are really it's a set of

00:04:49,040 --> 00:04:53,520
practices um traditionally focused more

00:04:51,759 --> 00:04:55,199
on application deployment but we're

00:04:53,520 --> 00:04:57,199
using git ops in the context of

00:04:55,199 --> 00:04:59,120
infrastructure deployment the other

00:04:57,199 --> 00:05:00,720
major concept and

00:04:59,120 --> 00:05:03,199
and word for me that jumped out was

00:05:00,720 --> 00:05:06,479
really declarative so we'll be using

00:05:03,199 --> 00:05:08,400
uh yaml in a set of well-known

00:05:06,479 --> 00:05:10,240
defined patterns to provide a

00:05:08,400 --> 00:05:11,280
declarative framework for all the

00:05:10,240 --> 00:05:13,039
infrastructure

00:05:11,280 --> 00:05:15,039
that we need to deploy and it'll all be

00:05:13,039 --> 00:05:18,320
stored in git and be able to

00:05:15,039 --> 00:05:20,880
uh be leveraged by the

00:05:18,320 --> 00:05:25,199
open cluster manager technologies that

00:05:20,880 --> 00:05:27,280
that we've been talking about earlier

00:05:25,199 --> 00:05:30,000
so how do you break this you know very

00:05:27,280 --> 00:05:34,160
complex rand topology down

00:05:30,000 --> 00:05:37,280
into into a git ups and have it all

00:05:34,160 --> 00:05:39,039
defined as code well it really starts at

00:05:37,280 --> 00:05:41,120
a high level from a site plan

00:05:39,039 --> 00:05:43,440
that a telcom operator would have for

00:05:41,120 --> 00:05:44,880
their mobile network

00:05:43,440 --> 00:05:46,800
we're going to break that down into a

00:05:44,880 --> 00:05:48,560
set of manifests that can be

00:05:46,800 --> 00:05:49,840
stored in git and then we're going to

00:05:48,560 --> 00:05:53,520
deploy with zero touch

00:05:49,840 --> 00:05:56,080
using the open cluster management

00:05:53,520 --> 00:05:56,080
technology

00:05:56,400 --> 00:05:59,759
so it's really important to understand

00:05:58,720 --> 00:06:02,000
some of the players

00:05:59,759 --> 00:06:02,800
in this workflow and you know some of

00:06:02,000 --> 00:06:06,560
the

00:06:02,800 --> 00:06:09,840
key personas that we identified were

00:06:06,560 --> 00:06:12,319
in the telecom operator side the uh

00:06:09,840 --> 00:06:13,360
planning organization who's responsible

00:06:12,319 --> 00:06:15,440
for

00:06:13,360 --> 00:06:17,919
network design vendor selection and

00:06:15,440 --> 00:06:20,240
capital planning

00:06:17,919 --> 00:06:22,080
and then on to the installation and

00:06:20,240 --> 00:06:24,240
deployment teams

00:06:22,080 --> 00:06:27,120
where they're building out the sites

00:06:24,240 --> 00:06:29,039
hiring contractors for the installations

00:06:27,120 --> 00:06:30,400
making sure power and physical plant

00:06:29,039 --> 00:06:32,720
infrastructure is available

00:06:30,400 --> 00:06:33,680
to these new and interesting servers

00:06:32,720 --> 00:06:35,680
that are now

00:06:33,680 --> 00:06:36,800
living further at the edge than they

00:06:35,680 --> 00:06:39,039
ever have

00:06:36,800 --> 00:06:40,800
then last lastly it's really the

00:06:39,039 --> 00:06:42,160
maintenance and operations team

00:06:40,800 --> 00:06:44,240
that's really responsible for the

00:06:42,160 --> 00:06:45,120
day-to-day operations updates and

00:06:44,240 --> 00:06:48,639
upgrades and

00:06:45,120 --> 00:06:50,240
and the deployments so really uh

00:06:48,639 --> 00:06:52,960
those are the three personas on the

00:06:50,240 --> 00:06:56,160
telecom side so let's look at the

00:06:52,960 --> 00:06:57,759
overall ecosystem that is enabling uh

00:06:56,160 --> 00:07:02,080
this new paradigm for

00:06:57,759 --> 00:07:04,400
uh for getting compute to the edge

00:07:02,080 --> 00:07:05,680
we have the system integrator really

00:07:04,400 --> 00:07:07,599
pulls together

00:07:05,680 --> 00:07:09,039
a set of partners and and the overall

00:07:07,599 --> 00:07:12,479
ecosystem

00:07:09,039 --> 00:07:14,560
integrates orchestration and

00:07:12,479 --> 00:07:15,520
brings together the lower layers of the

00:07:14,560 --> 00:07:17,840
stack

00:07:15,520 --> 00:07:18,720
together with the application layers and

00:07:17,840 --> 00:07:20,560
they can help

00:07:18,720 --> 00:07:23,199
the operator consume the site plan and

00:07:20,560 --> 00:07:25,520
represent the infrastructure as code

00:07:23,199 --> 00:07:27,919
the infrastructure provider persona is

00:07:25,520 --> 00:07:30,560
really the uh

00:07:27,919 --> 00:07:32,160
people providing the platform technology

00:07:30,560 --> 00:07:35,360
such as openshift and

00:07:32,160 --> 00:07:37,680
ocm open cluster manager and

00:07:35,360 --> 00:07:39,440
and also deploying the high performance

00:07:37,680 --> 00:07:40,160
profiles to make sure that the workloads

00:07:39,440 --> 00:07:44,639
can operate

00:07:40,160 --> 00:07:46,800
uh these strict vran workloads

00:07:44,639 --> 00:07:49,039
and then lastly we have the application

00:07:46,800 --> 00:07:53,360
provider that's really providing a 5g

00:07:49,039 --> 00:07:55,599
ran application or a 5g core application

00:07:53,360 --> 00:07:56,560
so very diverse ecosystem is now coming

00:07:55,599 --> 00:07:59,919
to play

00:07:56,560 --> 00:08:03,360
to enable these new 5g

00:07:59,919 --> 00:08:03,360
ran applications at the edge

00:08:04,000 --> 00:08:10,479
so that i'll hand it over to yolanda

00:08:07,360 --> 00:08:13,520
okay so i will explain how the workflow

00:08:10,479 --> 00:08:16,960
for the digital approach is working

00:08:13,520 --> 00:08:18,160
our source of truth is just a set of git

00:08:16,960 --> 00:08:20,080
repos

00:08:18,160 --> 00:08:21,199
where we are containing what we call a

00:08:20,080 --> 00:08:24,000
site planning

00:08:21,199 --> 00:08:25,759
and a site planning is just a definition

00:08:24,000 --> 00:08:27,520
a set of ml files

00:08:25,759 --> 00:08:29,599
that are containing all the different

00:08:27,520 --> 00:08:30,879
settings for the clusters that we want

00:08:29,599 --> 00:08:32,880
to deploy

00:08:30,879 --> 00:08:34,880
so we will include things related to the

00:08:32,880 --> 00:08:39,200
cluster like the cluster name

00:08:34,880 --> 00:08:41,680
domain like ip ranges and we also have

00:08:39,200 --> 00:08:43,440
like definitions for the hardware like

00:08:41,680 --> 00:08:46,800
for the for the environmental host

00:08:43,440 --> 00:08:50,000
we can just provide details from the bmc

00:08:46,800 --> 00:08:52,160
static network definitions as well

00:08:50,000 --> 00:08:54,080
so we have this data with the site plan

00:08:52,160 --> 00:08:56,720
and then we are combining that with

00:08:54,080 --> 00:08:58,560
uh other para other manifolds that are

00:08:56,720 --> 00:09:00,880
defining that the coordinates

00:08:58,560 --> 00:09:02,959
manifest operators that we want to

00:09:00,880 --> 00:09:05,120
deploy in all the clusters

00:09:02,959 --> 00:09:06,000
uh like we give the clusters a set of

00:09:05,120 --> 00:09:07,440
rows we

00:09:06,000 --> 00:09:10,240
could tell which monitors manifesto we

00:09:07,440 --> 00:09:11,680
want to use everything uh with that is

00:09:10,240 --> 00:09:14,320
combined with customize

00:09:11,680 --> 00:09:15,279
and we are producing using like the

00:09:14,320 --> 00:09:18,320
final

00:09:15,279 --> 00:09:19,440
output like it will be a yama definition

00:09:18,320 --> 00:09:21,200
of all the

00:09:19,440 --> 00:09:22,480
the settings and all the things that

00:09:21,200 --> 00:09:25,680
needs to be applied on the

00:09:22,480 --> 00:09:28,399
clusters when we have this yama

00:09:25,680 --> 00:09:30,399
we are just applying passing that to ocm

00:09:28,399 --> 00:09:33,120
to advanced cluster management

00:09:30,399 --> 00:09:35,360
this is consuming it and as soon as the

00:09:33,120 --> 00:09:36,480
clusters are joining and rolling into

00:09:35,360 --> 00:09:38,240
acm

00:09:36,480 --> 00:09:39,680
it will be just reapplying all the

00:09:38,240 --> 00:09:41,040
different operators the different

00:09:39,680 --> 00:09:45,040
configurations

00:09:41,040 --> 00:09:47,440
that we have just told in our site plan

00:09:45,040 --> 00:09:49,200
so we begin with clusters finally

00:09:47,440 --> 00:09:52,240
configured and deployed

00:09:49,200 --> 00:09:52,240
with our settings

00:09:54,240 --> 00:09:57,600
okay so i'm going to explain a bit the

00:09:56,399 --> 00:10:00,399
operators and

00:09:57,600 --> 00:10:01,120
all the layers that we are doing for our

00:10:00,399 --> 00:10:03,600
cluster

00:10:01,120 --> 00:10:05,440
provisioning and definition so we start

00:10:03,600 --> 00:10:07,920
with the base components

00:10:05,440 --> 00:10:08,560
we assume that we are starting with uh

00:10:07,920 --> 00:10:10,320
servers that

00:10:08,560 --> 00:10:12,720
don't have any operating system in

00:10:10,320 --> 00:10:15,760
standard that just are bare from the

00:10:12,720 --> 00:10:18,640
factory so we start by provisioning them

00:10:15,760 --> 00:10:19,760
with operating system that this core os

00:10:18,640 --> 00:10:21,519
on top of that

00:10:19,760 --> 00:10:22,959
we're installing the openshift container

00:10:21,519 --> 00:10:25,519
platform so

00:10:22,959 --> 00:10:27,519
when that is completed the the nodes the

00:10:25,519 --> 00:10:29,040
worker node will join into an existing

00:10:27,519 --> 00:10:31,760
cluster

00:10:29,040 --> 00:10:32,399
once it happens we'll start applying the

00:10:31,760 --> 00:10:35,279
5g

00:10:32,399 --> 00:10:36,800
run profile that is composed by a set of

00:10:35,279 --> 00:10:39,200
operators

00:10:36,800 --> 00:10:41,760
so we start with machine configs that

00:10:39,200 --> 00:10:44,079
are just for enabling like

00:10:41,760 --> 00:10:45,600
system definitions or low level settings

00:10:44,079 --> 00:10:48,640
at system level

00:10:45,600 --> 00:10:51,760
like we enable ntp http

00:10:48,640 --> 00:10:54,000
things like that second as the

00:10:51,760 --> 00:10:55,279
5g it's very important to have good

00:10:54,000 --> 00:10:57,760
performance

00:10:55,279 --> 00:11:00,240
we're using the performance addon

00:10:57,760 --> 00:11:02,480
operator that is taking care of that

00:11:00,240 --> 00:11:03,920
so it will install real-time kernel on

00:11:02,480 --> 00:11:06,720
the nodes that need it

00:11:03,920 --> 00:11:08,000
it will just define the number of cpus

00:11:06,720 --> 00:11:10,160
the cost we reserve

00:11:08,000 --> 00:11:13,200
the number of huge pages as well

00:11:10,160 --> 00:11:15,440
depending on our workloads

00:11:13,200 --> 00:11:17,680
after that we also need to just interact

00:11:15,440 --> 00:11:20,399
with low-level network

00:11:17,680 --> 00:11:20,720
functions so we want to consume directly

00:11:20,399 --> 00:11:23,839
the

00:11:20,720 --> 00:11:26,560
the network features from the cart

00:11:23,839 --> 00:11:27,279
so we are using the salary operator this

00:11:26,560 --> 00:11:29,360
will allows

00:11:27,279 --> 00:11:30,800
us to just use the physical function and

00:11:29,360 --> 00:11:34,160
the mutual futures for

00:11:30,800 --> 00:11:37,279
every nic and also on the views

00:11:34,160 --> 00:11:39,519
where we need like very very good time

00:11:37,279 --> 00:11:41,680
synchronizations we are using ptp that

00:11:39,519 --> 00:11:43,680
is precision time protocol

00:11:41,680 --> 00:11:46,640
so open cluster management will be

00:11:43,680 --> 00:11:46,640
installing that as well

00:11:48,640 --> 00:11:52,480
okay uh so finally i'm going to explain

00:11:50,560 --> 00:11:53,600
a bit how the deployment process looks

00:11:52,480 --> 00:11:56,639
like

00:11:53,600 --> 00:11:58,959
so we start as we were telling with

00:11:56,639 --> 00:11:59,760
everything in git like we have the site

00:11:58,959 --> 00:12:02,480
planning it

00:11:59,760 --> 00:12:04,320
in what we call the regional data center

00:12:02,480 --> 00:12:04,959
we have a cluster with open cluster

00:12:04,320 --> 00:12:07,600
management

00:12:04,959 --> 00:12:09,120
installed there and then we can apply

00:12:07,600 --> 00:12:11,519
our gtp

00:12:09,120 --> 00:12:12,800
and it will be used to deploy different

00:12:11,519 --> 00:12:15,920
types of clusters

00:12:12,800 --> 00:12:16,880
so we can just deploy like clusters with

00:12:15,920 --> 00:12:20,480
a control plane

00:12:16,880 --> 00:12:21,920
and remote worker nodes so that will be

00:12:20,480 --> 00:12:24,000
one use case

00:12:21,920 --> 00:12:26,320
another google use case will be single

00:12:24,000 --> 00:12:28,320
node where we can just uh use it for the

00:12:26,320 --> 00:12:31,440
use or it's just a server

00:12:28,320 --> 00:12:32,800
with masters and workers at the same the

00:12:31,440 --> 00:12:35,760
same host

00:12:32,800 --> 00:12:37,440
and also we can have a ceo pool that we

00:12:35,760 --> 00:12:40,399
are using three masters

00:12:37,440 --> 00:12:41,120
that have also the the roles of workers

00:12:40,399 --> 00:12:43,279
so

00:12:41,120 --> 00:12:44,240
this sctp is able to just deploy

00:12:43,279 --> 00:12:46,000
clusters with

00:12:44,240 --> 00:12:49,040
these different topologies depending on

00:12:46,000 --> 00:12:49,040
our site definition

00:12:54,480 --> 00:12:58,240
that's great yolanda thanks very much

00:12:56,079 --> 00:12:59,680
for uh walking us through that i really

00:12:58,240 --> 00:13:02,800
like how we can start with

00:12:59,680 --> 00:13:04,639
uh the infrastructure site plan apply

00:13:02,800 --> 00:13:07,440
the customize overlays

00:13:04,639 --> 00:13:09,600
uh then wrap those uh that overall

00:13:07,440 --> 00:13:11,600
picture in policies that can be

00:13:09,600 --> 00:13:13,360
then leveraged by the open cluster

00:13:11,600 --> 00:13:15,680
manager so let's uh

00:13:13,360 --> 00:13:21,839
let's dive in and see uh see the demo

00:13:15,680 --> 00:13:21,839
that we have here

00:13:22,320 --> 00:13:27,120
hello so let's start with the demo as i

00:13:25,040 --> 00:13:29,600
was explaining before everything was

00:13:27,120 --> 00:13:31,200
starts with a site plan a site plan is

00:13:29,600 --> 00:13:33,760
just a set of yammer files

00:13:31,200 --> 00:13:35,360
that are restored into a game and that

00:13:33,760 --> 00:13:36,399
contains the information needed for

00:13:35,360 --> 00:13:38,560
deploying of

00:13:36,399 --> 00:13:40,320
massive number of clusters so you can

00:13:38,560 --> 00:13:41,040
see here what i'm talking about for each

00:13:40,320 --> 00:13:43,199
clusters

00:13:41,040 --> 00:13:45,760
and we have their settings the name of

00:13:43,199 --> 00:13:47,760
the cluster the domain the version

00:13:45,760 --> 00:13:50,000
some network settings as well like the

00:13:47,760 --> 00:13:52,079
english and the api bit

00:13:50,000 --> 00:13:54,880
uh well then we can define the control

00:13:52,079 --> 00:13:57,440
plane entries for the control plane here

00:13:54,880 --> 00:13:57,920
where we explain the number of masters

00:13:57,440 --> 00:14:00,399
the

00:13:57,920 --> 00:14:01,279
mac addresses of the masters as well and

00:14:00,399 --> 00:14:03,839
then we define

00:14:01,279 --> 00:14:05,680
the workers as well workers are the

00:14:03,839 --> 00:14:06,079
remote worker not that they're going to

00:14:05,680 --> 00:14:08,320
join

00:14:06,079 --> 00:14:10,160
after the control plane is deployed so

00:14:08,320 --> 00:14:11,199
for each worker we define the bmc

00:14:10,160 --> 00:14:13,839
details like the

00:14:11,199 --> 00:14:15,680
the address user and password so with

00:14:13,839 --> 00:14:17,360
that everything is translated to just

00:14:15,680 --> 00:14:19,040
someone civil inventories

00:14:17,360 --> 00:14:21,199
and from there we start the deployment

00:14:19,040 --> 00:14:24,320
of the cluster

00:14:21,199 --> 00:14:26,320
okay so next thing i want to show how to

00:14:24,320 --> 00:14:29,680
configure static networking

00:14:26,320 --> 00:14:32,160
for the workers what you need to provide

00:14:29,680 --> 00:14:33,040
is just a file a yaml file that will

00:14:32,160 --> 00:14:35,519
contain

00:14:33,040 --> 00:14:36,399
all the network configuration in nms

00:14:35,519 --> 00:14:39,120
state format

00:14:36,399 --> 00:14:41,040
for all your worker nodes okay so you

00:14:39,120 --> 00:14:44,160
can see here that we have a list

00:14:41,040 --> 00:14:46,880
of interfaces each interfaces

00:14:44,160 --> 00:14:48,399
is belonging to a worker node as it's

00:14:46,880 --> 00:14:50,639
consuming any state you

00:14:48,399 --> 00:14:52,079
are free to define the kind of network

00:14:50,639 --> 00:14:55,040
that you want like bilan

00:14:52,079 --> 00:14:55,680
bonding so next thing is creating a

00:14:55,040 --> 00:14:58,959
cluster

00:14:55,680 --> 00:15:01,199
you can see that simply we're just

00:14:58,959 --> 00:15:03,440
going to run a next stack in the

00:15:01,199 --> 00:15:06,079
playbook

00:15:03,440 --> 00:15:07,120
it will just create a cluster in using

00:15:06,079 --> 00:15:10,560
the openshift

00:15:07,120 --> 00:15:13,760
assisted service okay you can see here

00:15:10,560 --> 00:15:15,199
this is the assisted installer web user

00:15:13,760 --> 00:15:16,720
interface

00:15:15,199 --> 00:15:18,880
and you can see that we have just

00:15:16,720 --> 00:15:20,720
created a new cluster

00:15:18,880 --> 00:15:23,519
with the settings that i pass it on my

00:15:20,720 --> 00:15:25,199
mentory it is using for seven

00:15:23,519 --> 00:15:27,440
you can see it matching the cluster name

00:15:25,199 --> 00:15:30,480
the cluster domain

00:15:27,440 --> 00:15:32,720
okay so the step finally just finish it

00:15:30,480 --> 00:15:35,199
and you can see that you could have

00:15:32,720 --> 00:15:37,360
three nodes just enroll it into a system

00:15:35,199 --> 00:15:40,639
installer

00:15:37,360 --> 00:15:42,480
and with once we have just three nodes

00:15:40,639 --> 00:15:43,839
we can start with installation of the

00:15:42,480 --> 00:15:47,839
openshift cluster

00:15:43,839 --> 00:15:51,120
it will just set up some settings

00:15:47,839 --> 00:15:53,440
and just the order of the blue in the

00:15:51,120 --> 00:15:55,839
cluster and it will just wait

00:15:53,440 --> 00:15:57,120
after some time the cluster has been

00:15:55,839 --> 00:15:59,519
installed

00:15:57,120 --> 00:16:00,959
you can see here that you have the three

00:15:59,519 --> 00:16:02,959
masters

00:16:00,959 --> 00:16:04,800
showing us installed with all the

00:16:02,959 --> 00:16:09,519
details

00:16:04,800 --> 00:16:11,920
and now it's time to just worker nodes

00:16:09,519 --> 00:16:13,680
i'm starting to show you how the server

00:16:11,920 --> 00:16:15,440
is reacting

00:16:13,680 --> 00:16:17,120
it's okay so you can see that it has

00:16:15,440 --> 00:16:20,000
been powered on

00:16:17,120 --> 00:16:23,759
and we are telling them instructions to

00:16:20,000 --> 00:16:26,720
boot from virtual media

00:16:23,759 --> 00:16:28,000
it starts to use to mount the image that

00:16:26,720 --> 00:16:30,079
it has downloaded

00:16:28,000 --> 00:16:32,800
and it will just complete the

00:16:30,079 --> 00:16:35,040
provisioning step now

00:16:32,800 --> 00:16:37,680
okay you can see that the nodes start to

00:16:35,040 --> 00:16:40,079
report up to assisted installer

00:16:37,680 --> 00:16:41,839
we will have two worker nodes that will

00:16:40,079 --> 00:16:44,399
be joining

00:16:41,839 --> 00:16:46,240
as you have seen the nodes are already

00:16:44,399 --> 00:16:48,560
enrolled in the system installer so next

00:16:46,240 --> 00:16:52,320
thing is to deploy the cluster

00:16:48,560 --> 00:16:54,480
to you have seen

00:16:52,320 --> 00:16:56,639
that the workers are starting the

00:16:54,480 --> 00:16:58,639
installation

00:16:56,639 --> 00:16:59,839
okay so you have seen that the finally

00:16:58,639 --> 00:17:02,399
the worker nodes

00:16:59,839 --> 00:17:05,039
aren't rolled into the cluster so we

00:17:02,399 --> 00:17:05,360
have a working uh kubernetes cluster

00:17:05,039 --> 00:17:07,679
with

00:17:05,360 --> 00:17:08,959
a master control plane and to remote

00:17:07,679 --> 00:17:10,400
worker nodes

00:17:08,959 --> 00:17:12,400
so we have this ripple that is called

00:17:10,400 --> 00:17:14,559
gtp acm manifest

00:17:12,400 --> 00:17:16,160
and it contains all the objects that are

00:17:14,559 --> 00:17:19,280
going to be applied into advanced

00:17:16,160 --> 00:17:22,160
cluster management everything is here

00:17:19,280 --> 00:17:23,600
is working in a github way and

00:17:22,160 --> 00:17:26,959
everything is controlled by just

00:17:23,600 --> 00:17:30,559
coordinates manifest and crds

00:17:26,959 --> 00:17:32,080
here is how our basic layer is composed

00:17:30,559 --> 00:17:35,039
so we have common

00:17:32,080 --> 00:17:36,400
common is just the base base manifest

00:17:35,039 --> 00:17:37,679
that are going to be applied to all

00:17:36,400 --> 00:17:40,080
clusters

00:17:37,679 --> 00:17:41,280
then we have profile that we are going

00:17:40,080 --> 00:17:43,200
to use it

00:17:41,280 --> 00:17:44,960
to configure clusters depending on the

00:17:43,200 --> 00:17:47,280
function they have like we can have an

00:17:44,960 --> 00:17:49,120
additional layer that is hardware type

00:17:47,280 --> 00:17:50,480
that we can configure clusters depending

00:17:49,120 --> 00:17:52,400
on the type of hardware

00:17:50,480 --> 00:17:55,679
and finally we have the size that is a

00:17:52,400 --> 00:17:58,400
specific configuration at site level

00:17:55,679 --> 00:17:59,679
everything in acm is working via

00:17:58,400 --> 00:18:02,799
subscriptions

00:17:59,679 --> 00:18:05,039
a subscription is just an object

00:18:02,799 --> 00:18:06,799
that is telling icn that it needs to

00:18:05,039 --> 00:18:10,000
listen to a specific

00:18:06,799 --> 00:18:11,679
repository or to a specific folder okay

00:18:10,000 --> 00:18:15,840
so here for example you can see that we

00:18:11,679 --> 00:18:15,840
have the subscriptions for common base

00:18:16,880 --> 00:18:20,480
everything is composed mostly of

00:18:18,480 --> 00:18:23,360
namespace channels subscriptions

00:18:20,480 --> 00:18:23,360
and applications

00:18:23,520 --> 00:18:29,039
and you can see that the subscriptions

00:18:26,160 --> 00:18:31,039
are just pointing to another ripple

00:18:29,039 --> 00:18:32,400
our ram manifest that is actually having

00:18:31,039 --> 00:18:35,280
the source of truth of all the

00:18:32,400 --> 00:18:35,280
configurations

00:18:36,000 --> 00:18:40,160
and we have the same you can see that we

00:18:38,160 --> 00:18:42,320
are matching the structure that we had

00:18:40,160 --> 00:18:44,960
in acm subscriptions with https and

00:18:42,320 --> 00:18:44,960
managers

00:18:47,440 --> 00:18:50,960
okay you can see here that everything is

00:18:49,840 --> 00:18:54,240
based on a policy

00:18:50,960 --> 00:18:55,039
a policy is just an object definition of

00:18:54,240 --> 00:18:57,440
htm

00:18:55,039 --> 00:18:59,039
that is informing how it needs to copy

00:18:57,440 --> 00:19:01,200
which object that does it needs to

00:18:59,039 --> 00:19:03,039
create into the cluster

00:19:01,200 --> 00:19:04,480
and it is just simply creating the

00:19:03,039 --> 00:19:06,720
operator okay

00:19:04,480 --> 00:19:08,640
yeah i'm telling i want to create this

00:19:06,720 --> 00:19:10,400
object in all clusters

00:19:08,640 --> 00:19:14,240
and i'm just going to create an object

00:19:10,400 --> 00:19:16,240
that installs srw operator

00:19:14,240 --> 00:19:18,160
after a policy there is also what it

00:19:16,240 --> 00:19:19,440
calls placement buildings and placement

00:19:18,160 --> 00:19:21,679
rules

00:19:19,440 --> 00:19:23,600
so the placement rule allows you to

00:19:21,679 --> 00:19:25,200
define to where do you want to apply

00:19:23,600 --> 00:19:26,799
this policy

00:19:25,200 --> 00:19:29,360
so in our case we are applying the

00:19:26,799 --> 00:19:30,960
policy in all types of clusters

00:19:29,360 --> 00:19:33,120
in this case for example we are just

00:19:30,960 --> 00:19:33,520
applying all the configurations to all

00:19:33,120 --> 00:19:35,760
the

00:19:33,520 --> 00:19:37,200
clusters that are small and let us do

00:19:35,760 --> 00:19:39,120
and then we can have

00:19:37,200 --> 00:19:40,559
the side policies as well that are

00:19:39,120 --> 00:19:42,000
specific things that needs to be

00:19:40,559 --> 00:19:44,640
configured

00:19:42,000 --> 00:19:46,799
at side level like for example vlans

00:19:44,640 --> 00:19:48,880
name of nics

00:19:46,799 --> 00:19:50,559
so things that needs to be configured at

00:19:48,880 --> 00:19:52,880
state level for example are the

00:19:50,559 --> 00:19:55,039
linux selectors like you need to exactly

00:19:52,880 --> 00:19:57,760
match the name of the interface here

00:19:55,039 --> 00:19:58,960
so it needs to be at cell level and

00:19:57,760 --> 00:20:02,720
everything in acm

00:19:58,960 --> 00:20:06,559
is just configured into this in this way

00:20:02,720 --> 00:20:09,360
this is just a default acm installation

00:20:06,559 --> 00:20:10,799
and on this installation i have applied

00:20:09,360 --> 00:20:13,280
all the manifests that

00:20:10,799 --> 00:20:13,840
you have shown in the gtp acm manifest

00:20:13,280 --> 00:20:15,520
repo

00:20:13,840 --> 00:20:17,919
you remember that i have been showing

00:20:15,520 --> 00:20:20,000
that we have different layers

00:20:17,919 --> 00:20:22,000
and we have created subscriptions based

00:20:20,000 --> 00:20:23,280
on that so you can see here the run

00:20:22,000 --> 00:20:26,799
subscription

00:20:23,280 --> 00:20:28,960
hardware type the profile and the sites

00:20:26,799 --> 00:20:30,080
when a subscription is applied it's

00:20:28,960 --> 00:20:32,240
actually creating

00:20:30,080 --> 00:20:33,120
all the objects that we are pointing to

00:20:32,240 --> 00:20:35,760
into the chat and

00:20:33,120 --> 00:20:36,240
to the the folder of the git repo so you

00:20:35,760 --> 00:20:38,960
can

00:20:36,240 --> 00:20:40,640
see here the final outcome of that we

00:20:38,960 --> 00:20:43,120
have the common run subscription

00:20:40,640 --> 00:20:44,720
that is the the main object that we

00:20:43,120 --> 00:20:46,799
created into acm

00:20:44,720 --> 00:20:48,000
this was pointing to the gdp rank

00:20:46,799 --> 00:20:50,320
manifest matching

00:20:48,000 --> 00:20:52,480
folder that contains some policies

00:20:50,320 --> 00:20:55,760
placement buildings and placement rules

00:20:52,480 --> 00:20:57,280
so you can see here how acn is just

00:20:55,760 --> 00:21:00,159
applying all the different objects

00:20:57,280 --> 00:21:02,080
what i'm showing now is how a cluster is

00:21:00,159 --> 00:21:05,280
enrolled into htm

00:21:02,080 --> 00:21:07,600
this is pressing you can also see that

00:21:05,280 --> 00:21:09,120
the cluster has some labels that is

00:21:07,600 --> 00:21:11,840
profile duo

00:21:09,120 --> 00:21:13,840
it means that it will apply all the

00:21:11,840 --> 00:21:16,080
workloads that are matching

00:21:13,840 --> 00:21:17,840
with the view profile and this has been

00:21:16,080 --> 00:21:20,000
the finance for the placement rules that

00:21:17,840 --> 00:21:22,320
i created

00:21:20,000 --> 00:21:24,799
okay and you can see that everything is

00:21:22,320 --> 00:21:27,120
installed properly

00:21:24,799 --> 00:21:28,080
if this acm is monitoring the status of

00:21:27,120 --> 00:21:30,640
the cluster

00:21:28,080 --> 00:21:32,159
it shows the version name of the cluster

00:21:30,640 --> 00:21:34,480
the profile the number of

00:21:32,159 --> 00:21:35,840
nodes you can see that it doesn't have

00:21:34,480 --> 00:21:38,000
any application

00:21:35,840 --> 00:21:39,440
and this is anything you can see that

00:21:38,000 --> 00:21:43,280
there are policies

00:21:39,440 --> 00:21:43,280
that have not yet been applied

00:21:43,440 --> 00:21:49,679
when a cluster joins acm

00:21:46,640 --> 00:21:50,240
it the icm automatically recognizes that

00:21:49,679 --> 00:21:52,240
and

00:21:50,240 --> 00:21:54,320
tries to start reconciling all the

00:21:52,240 --> 00:21:56,080
changes that are needed to configure the

00:21:54,320 --> 00:21:58,159
cluster automatically

00:21:56,080 --> 00:22:00,240
this is you remember that this is

00:21:58,159 --> 00:22:02,000
managed via policies

00:22:00,240 --> 00:22:03,840
so we have several policies that are

00:22:02,000 --> 00:22:06,720
defining the kind of objects

00:22:03,840 --> 00:22:07,919
uh manifest that needs to be applied on

00:22:06,720 --> 00:22:11,200
the cluster

00:22:07,919 --> 00:22:11,600
and then acm is matching those policies

00:22:11,200 --> 00:22:14,240
with

00:22:11,600 --> 00:22:15,520
the rules that we define it and decides

00:22:14,240 --> 00:22:18,320
where to apply

00:22:15,520 --> 00:22:21,280
this is prone to change and we are just

00:22:18,320 --> 00:22:22,559
working on a final version

00:22:21,280 --> 00:22:24,320
everything where everything will be

00:22:22,559 --> 00:22:26,240
integrated so no need to run

00:22:24,320 --> 00:22:27,840
money manual answer playbooks everything

00:22:26,240 --> 00:22:29,039
will just be defined on the git repo

00:22:27,840 --> 00:22:32,720
including the

00:22:29,039 --> 00:22:34,400
cluster definition worker hardware

00:22:32,720 --> 00:22:36,080
the hardware settings for all the the

00:22:34,400 --> 00:22:38,240
clusters and

00:22:36,080 --> 00:22:40,320
the procedure will be just automatically

00:22:38,240 --> 00:22:42,080
writing all the information from git

00:22:40,320 --> 00:22:44,240
and applying the procedure that you have

00:22:42,080 --> 00:22:44,720
seen here with assistant installer and

00:22:44,240 --> 00:22:55,840
scn

00:22:44,720 --> 00:22:55,840
to configure all the needed clusters

00:22:56,000 --> 00:22:59,679
thanks yolanda that was a great demo um

00:22:58,640 --> 00:23:04,159
really enjoyed that

00:22:59,679 --> 00:23:06,880
great job really had a great time uh

00:23:04,159 --> 00:23:09,600
doing this with you and let's open it up

00:23:06,880 --> 00:23:13,039
to questions thanks very much everybody

00:23:09,600 --> 00:23:13,039

YouTube URL: https://www.youtube.com/watch?v=oCkPR0vgi64


