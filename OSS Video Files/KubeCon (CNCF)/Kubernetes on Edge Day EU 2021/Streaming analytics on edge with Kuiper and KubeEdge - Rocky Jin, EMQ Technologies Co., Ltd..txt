Title: Streaming analytics on edge with Kuiper and KubeEdge - Rocky Jin, EMQ Technologies Co., Ltd.
Publication date: 2021-05-05
Playlist: Kubernetes on Edge Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Streaming analytics on edge with Kuiper and KubeEdge - Rocky Jin, EMQ Technologies Co., Ltd.

EMQ X Kuiper is an open source edge lightweight IoT data analytics/streaming software, and it can be run at all kinds of resource constrained edge devices. KubeEdge is an open source system for extending native containerized application orchestration capabilities to hosts at Edge. The session introduces how to use KubeEdge's application orchestration capabilities and data streaming analytics provided by Kuiper. The session covers Kuiper data ETL, order, group, aggregation, SQL functions, and binary data processing. Also introducing extension for audio and video AI analytic, and the time windows required for IoT analytics. Finally introduce KubeEdge cloud-edge collaboration channel, how user can manage analysis logics at cloud side and accommodate to agile business requirements.
Captions: 
	00:00:00,080 --> 00:00:06,720
hello everybody i'm so happy to be here

00:00:03,760 --> 00:00:07,440
in the coordinates edge today share with

00:00:06,720 --> 00:00:12,400
you about

00:00:07,440 --> 00:00:12,400
my thoughts for the energy computing

00:00:13,679 --> 00:00:17,199
so my today's topic is streaming

00:00:16,400 --> 00:00:22,240
analytics

00:00:17,199 --> 00:00:22,240
on edge with quip and google edge

00:00:24,400 --> 00:00:28,080
before starting the session i will

00:00:26,560 --> 00:00:31,119
introduce a little bit about

00:00:28,080 --> 00:00:34,320
myself so my name is rocky

00:00:31,119 --> 00:00:37,520
jin and i'm the initiator of

00:00:34,320 --> 00:00:40,719
emqx creeper project

00:00:37,520 --> 00:00:44,399
and also i'm the cooperage

00:00:40,719 --> 00:00:48,800
iiiot worker group member

00:00:44,399 --> 00:00:50,399
and also the lfh ex-foundry projector

00:00:48,800 --> 00:00:53,280
committer

00:00:50,399 --> 00:00:56,000
and also the application and the china

00:00:53,280 --> 00:00:56,000
working group

00:00:56,840 --> 00:01:02,480
member

00:00:58,879 --> 00:01:06,320
i'm also the former ibm china

00:01:02,480 --> 00:01:07,200
software development lab as technology

00:01:06,320 --> 00:01:13,840
and the product

00:01:07,200 --> 00:01:13,840
leader and architect

00:01:15,759 --> 00:01:21,520
now let's look into what's the streaming

00:01:19,600 --> 00:01:24,400
analytics

00:01:21,520 --> 00:01:27,600
so streaming analytics is our software

00:01:24,400 --> 00:01:31,759
or framework for stateful computation

00:01:27,600 --> 00:01:36,240
of unbounded data streams so user can

00:01:31,759 --> 00:01:40,240
manage monitor and analyze real-time of

00:01:36,240 --> 00:01:42,640
live streaming data so the typical such

00:01:40,240 --> 00:01:47,200
kind of software

00:01:42,640 --> 00:01:49,759
is apache link or apache spark

00:01:47,200 --> 00:01:50,320
but both of the software are typically

00:01:49,759 --> 00:01:53,759
running at

00:01:50,320 --> 00:01:54,399
the cloud data center that is not a fit

00:01:53,759 --> 00:01:58,240
for

00:01:54,399 --> 00:01:58,240
the edge computing

00:01:59,280 --> 00:02:03,119
why apache flink and spark are not a

00:02:01,759 --> 00:02:07,680
field for the

00:02:03,119 --> 00:02:10,640
edge streaming analytics it has a

00:02:07,680 --> 00:02:11,680
it has following three reasons the first

00:02:10,640 --> 00:02:15,599
is that

00:02:11,680 --> 00:02:20,319
the latency so it will take some time

00:02:15,599 --> 00:02:23,440
to send the data from the edge to cloud

00:02:20,319 --> 00:02:26,640
and the secondary is the data security

00:02:23,440 --> 00:02:27,760
so it is not fearful or for all of the

00:02:26,640 --> 00:02:31,680
data

00:02:27,760 --> 00:02:34,879
sent into the cloud for security reasons

00:02:31,680 --> 00:02:38,400
and the last is the banner wise costs

00:02:34,879 --> 00:02:41,360
so for some user scenarios

00:02:38,400 --> 00:02:42,160
the data collected frequency would be

00:02:41,360 --> 00:02:46,239
very

00:02:42,160 --> 00:02:46,640
very high so it worked it will cause a

00:02:46,239 --> 00:02:50,080
lot

00:02:46,640 --> 00:02:55,040
of banner wise if you want to send

00:02:50,080 --> 00:02:58,480
all of the data from the edge to cloud

00:02:55,040 --> 00:03:02,000
for example in the internet of a vehicle

00:02:58,480 --> 00:03:05,440
or i iot scenario it will

00:03:02,000 --> 00:03:06,800
take a lot of bandwidth if collected the

00:03:05,440 --> 00:03:10,480
data

00:03:06,800 --> 00:03:10,480
from the edge to cloud

00:03:11,680 --> 00:03:16,640
so there are three changes for edge

00:03:14,720 --> 00:03:19,680
streaming analytics

00:03:16,640 --> 00:03:21,599
the first is that lightweight and high

00:03:19,680 --> 00:03:25,920
efficiency

00:03:21,599 --> 00:03:29,200
so for most of scenarios

00:03:25,920 --> 00:03:32,000
the device or computer

00:03:29,200 --> 00:03:33,200
or the server deployed as edge is not

00:03:32,000 --> 00:03:36,959
very good

00:03:33,200 --> 00:03:41,519
so it has restricted resources

00:03:36,959 --> 00:03:45,120
the cpu and the memory is not very good

00:03:41,519 --> 00:03:49,680
but we will have such kind of software

00:03:45,120 --> 00:03:53,200
running at the resources restricted

00:03:49,680 --> 00:03:55,200
devices and the next is higher and the

00:03:53,200 --> 00:03:58,879
flexible

00:03:55,200 --> 00:04:02,239
so the id change is more frequency

00:03:58,879 --> 00:04:05,280
than before we needed to have our

00:04:02,239 --> 00:04:08,640
application or software to

00:04:05,280 --> 00:04:10,959
support the igor environment

00:04:08,640 --> 00:04:13,439
and the nasa is deployment and

00:04:10,959 --> 00:04:16,880
management

00:04:13,439 --> 00:04:20,239
so the device are deployed

00:04:16,880 --> 00:04:23,840
with distribute they are not centralized

00:04:20,239 --> 00:04:24,560
as in the cloud and also it possibly

00:04:23,840 --> 00:04:28,160
with

00:04:24,560 --> 00:04:32,320
very weak network as success

00:04:28,160 --> 00:04:36,880
so the software needed to be deployed

00:04:32,320 --> 00:04:40,840
to the azure devices

00:04:36,880 --> 00:04:43,840
it will take a lot of effort through

00:04:40,840 --> 00:04:43,840
this

00:04:45,600 --> 00:04:52,400
to resolve the issues

00:04:48,800 --> 00:04:54,960
so we propose the creeper project

00:04:52,400 --> 00:04:56,160
the quiver project is an open source

00:04:54,960 --> 00:04:59,520
software

00:04:56,160 --> 00:05:02,960
for iot edge analytics

00:04:59,520 --> 00:05:05,520
the project is initiated by emq

00:05:02,960 --> 00:05:06,960
so i can introduce a little bit about

00:05:05,520 --> 00:05:09,680
the emq

00:05:06,960 --> 00:05:12,560
the inquir is an open source iot

00:05:09,680 --> 00:05:16,639
infrastructure software provide

00:05:12,560 --> 00:05:20,240
and now it has a mqtt message broke

00:05:16,639 --> 00:05:25,759
which is the most popular open source

00:05:20,240 --> 00:05:28,000
software project in the github

00:05:25,759 --> 00:05:30,080
below i list some of the creeper

00:05:28,000 --> 00:05:32,270
milestones

00:05:30,080 --> 00:05:33,600
so in october 2019

00:05:32,270 --> 00:05:36,720
[Music]

00:05:33,600 --> 00:05:39,759
the creeper project was open source

00:05:36,720 --> 00:05:42,560
and register the first version and in

00:05:39,759 --> 00:05:46,080
the 2020

00:05:42,560 --> 00:05:48,880
we have three major milestones

00:05:46,080 --> 00:05:50,639
the first is that we integrated with

00:05:48,880 --> 00:05:53,199
azure x foundry

00:05:50,639 --> 00:05:54,400
and secondly we integrated with google

00:05:53,199 --> 00:05:58,720
edge

00:05:54,400 --> 00:06:01,039
and also in october last year

00:05:58,720 --> 00:06:02,479
the first stable major version was

00:06:01,039 --> 00:06:05,360
released

00:06:02,479 --> 00:06:06,400
and in the latest version was released

00:06:05,360 --> 00:06:10,000
at

00:06:06,400 --> 00:06:12,720
february this year

00:06:10,000 --> 00:06:14,080
the creeper project supported the binary

00:06:12,720 --> 00:06:18,319
data processing

00:06:14,080 --> 00:06:18,319
and the machine learning or ai function

00:06:18,840 --> 00:06:21,840
support

00:06:22,240 --> 00:06:27,440
here is the overview information of the

00:06:25,199 --> 00:06:32,840
creep

00:06:27,440 --> 00:06:35,120
so i just mentioned in the previous

00:06:32,840 --> 00:06:37,520
slides

00:06:35,120 --> 00:06:38,319
so the projector or the software

00:06:37,520 --> 00:06:43,120
deployed at

00:06:38,319 --> 00:06:43,120
the edge must be lightweight

00:06:44,080 --> 00:06:48,240
the quiver project is a binary

00:06:47,039 --> 00:06:51,919
installable and

00:06:48,240 --> 00:06:51,919
also provide the docker images

00:06:52,080 --> 00:06:55,360
currently it has only about eight

00:06:54,639 --> 00:06:58,560
megabytes

00:06:55,360 --> 00:07:00,800
installed package and the 10 megabytes

00:06:58,560 --> 00:07:04,160
initial memory overhead

00:07:00,800 --> 00:07:05,039
so it is quite lightweight and also it

00:07:04,160 --> 00:07:09,199
has both

00:07:05,039 --> 00:07:13,280
different kinds of cpu architect

00:07:09,199 --> 00:07:15,440
for example the amd and arm and ppc

00:07:13,280 --> 00:07:18,720
and also it supports different kind of

00:07:15,440 --> 00:07:18,720
linux systems

00:07:19,120 --> 00:07:25,599
and open wrt mac os and also provide the

00:07:22,800 --> 00:07:28,080
docker images

00:07:25,599 --> 00:07:29,360
below i listed some of the performance

00:07:28,080 --> 00:07:32,560
data

00:07:29,360 --> 00:07:36,800
that are running at raspberry pi

00:07:32,560 --> 00:07:40,000
3 b plus with the

00:07:36,800 --> 00:07:43,120
transaction per second is about

00:07:40,000 --> 00:07:47,199
twelve thousand and

00:07:43,120 --> 00:07:50,479
the cpu consumption is about

00:07:47,199 --> 00:07:55,599
70 and

00:07:50,479 --> 00:07:58,720
the memory usage is about 20 megabytes

00:07:55,599 --> 00:08:02,400
of course the benchmark data

00:07:58,720 --> 00:08:06,800
is up to the different kind of

00:08:02,400 --> 00:08:10,720
user scenarios so for detailed

00:08:06,800 --> 00:08:14,479
test scenarios you can refer to the url

00:08:10,720 --> 00:08:14,479
in the slides

00:08:15,360 --> 00:08:22,240
so by using the you can

00:08:19,199 --> 00:08:25,199
achieve the goal of the data etl

00:08:22,240 --> 00:08:26,080
i mean data extraction data

00:08:25,199 --> 00:08:29,360
transformation

00:08:26,080 --> 00:08:31,280
and the data loading at the edge

00:08:29,360 --> 00:08:32,560
so if you look at the right side of the

00:08:31,280 --> 00:08:36,719
picture

00:08:32,560 --> 00:08:36,719
we provide the source

00:08:37,120 --> 00:08:42,959
and at the right side is syncs

00:08:40,399 --> 00:08:44,080
in the middle of the architecture

00:08:42,959 --> 00:08:47,680
diagram is

00:08:44,080 --> 00:08:50,560
creeper run time so

00:08:47,680 --> 00:08:51,519
for the data extraction user can specify

00:08:50,560 --> 00:08:54,640
different kind of

00:08:51,519 --> 00:08:55,360
data source it could be the mqtt data

00:08:54,640 --> 00:08:58,959
source

00:08:55,360 --> 00:09:03,200
or mq data source or even the

00:08:58,959 --> 00:09:08,000
http data source or database data source

00:09:03,200 --> 00:09:12,320
with the data transformation so we

00:09:08,000 --> 00:09:15,600
provide the sql-like language user can

00:09:12,320 --> 00:09:20,160
achieve analytics and

00:09:15,600 --> 00:09:23,440
transformation with sql

00:09:20,160 --> 00:09:23,920
and the data loading so user can save

00:09:23,440 --> 00:09:26,240
the

00:09:23,920 --> 00:09:27,839
result data to different kind of the

00:09:26,240 --> 00:09:31,920
target system

00:09:27,839 --> 00:09:35,279
for example the mqtt the file the http

00:09:31,920 --> 00:09:37,839
and also possible is a all kinds of the

00:09:35,279 --> 00:09:37,839
database

00:09:39,920 --> 00:09:43,519
so here are three steps to use the clip

00:09:42,720 --> 00:09:47,839
the first

00:09:43,519 --> 00:09:51,040
is to create a stream so our stream

00:09:47,839 --> 00:09:55,040
is similar to our data source that

00:09:51,040 --> 00:09:58,080
defined where the data comes from

00:09:55,040 --> 00:10:01,360
in the right here's an example so the

00:09:58,080 --> 00:10:04,959
data source is from the topic of

00:10:01,360 --> 00:10:05,519
an mqtt broke with the data center

00:10:04,959 --> 00:10:09,040
format

00:10:05,519 --> 00:10:12,800
is a json type and the next step

00:10:09,040 --> 00:10:13,920
is to specify a rule so rules better

00:10:12,800 --> 00:10:17,600
find

00:10:13,920 --> 00:10:21,839
how to process the data and also

00:10:17,600 --> 00:10:25,040
where to send out the analysis result

00:10:21,839 --> 00:10:26,720
so here we have a sql property which is

00:10:25,040 --> 00:10:29,680
specified the

00:10:26,720 --> 00:10:30,640
sql logic and actually means that

00:10:29,680 --> 00:10:34,560
whereas

00:10:30,640 --> 00:10:37,440
the data or the results without data

00:10:34,560 --> 00:10:39,120
sender to so the first is that a log

00:10:37,440 --> 00:10:42,160
which means that

00:10:39,120 --> 00:10:44,880
the data will be printed to the log file

00:10:42,160 --> 00:10:46,160
and the second is mqtt so which means

00:10:44,880 --> 00:10:51,040
that as a

00:10:46,160 --> 00:10:55,200
result will be sent to the broke.emqs.io

00:10:51,040 --> 00:10:58,320
with the topical device slash without

00:10:55,200 --> 00:11:01,920
and the last step to

00:10:58,320 --> 00:11:04,959
submit and then run the rule so user can

00:11:01,920 --> 00:11:06,320
issue a command against as a creeper

00:11:04,959 --> 00:11:09,440
address

00:11:06,320 --> 00:11:12,560
server with the rules specified

00:11:09,440 --> 00:11:15,920
in the previous step

00:11:12,560 --> 00:11:18,640
so that is all of the three steps to

00:11:15,920 --> 00:11:18,640
use a creep

00:11:20,240 --> 00:11:28,640
here i will introduce a little more

00:11:24,240 --> 00:11:31,760
detail for the sql analytics

00:11:28,640 --> 00:11:35,200
so first of all we provided the

00:11:31,760 --> 00:11:38,640
building functions which includes a

00:11:35,200 --> 00:11:41,839
mathematical string

00:11:38,640 --> 00:11:42,560
aggregation conversion encoding analytic

00:11:41,839 --> 00:11:46,240
coding

00:11:42,560 --> 00:11:49,279
hashing json processing and others

00:11:46,240 --> 00:11:52,959
totally near about 80

00:11:49,279 --> 00:11:54,480
functions and also creeper provides a

00:11:52,959 --> 00:11:57,839
field

00:11:54,480 --> 00:12:01,920
so user can filter the data by

00:11:57,839 --> 00:12:05,120
well or case rank sql class

00:12:01,920 --> 00:12:08,240
also it provides the join

00:12:05,120 --> 00:12:11,600
so user can use different kinds of join

00:12:08,240 --> 00:12:13,200
the left join right join full join and

00:12:11,600 --> 00:12:15,279
across join

00:12:13,200 --> 00:12:17,680
so one string can be joined to another

00:12:15,279 --> 00:12:19,279
string the string is a dynamic of

00:12:17,680 --> 00:12:22,560
flowing data

00:12:19,279 --> 00:12:26,000
and also user can join to another tables

00:12:22,560 --> 00:12:29,600
the tables is static data

00:12:26,000 --> 00:12:32,639
so it is normally used for

00:12:29,600 --> 00:12:33,600
associating additional information so

00:12:32,639 --> 00:12:37,360
for example

00:12:33,600 --> 00:12:40,320
if the report data has an id

00:12:37,360 --> 00:12:41,120
but the target system or things needed

00:12:40,320 --> 00:12:45,040
to

00:12:41,120 --> 00:12:48,959
get the name so

00:12:45,040 --> 00:12:52,160
it can be joined to the tables

00:12:48,959 --> 00:12:55,680
to get the related name and

00:12:52,160 --> 00:12:59,360
next is a window so it provides

00:12:55,680 --> 00:13:00,959
the tumbling hopping sliding session and

00:12:59,360 --> 00:13:04,160
account

00:13:00,959 --> 00:13:09,279
so the window is often used in the

00:13:04,160 --> 00:13:09,279
iot testers iot user scenarios

00:13:10,480 --> 00:13:16,079
user can use a window to calculate

00:13:12,959 --> 00:13:16,079
different kind of

00:13:16,320 --> 00:13:24,639
analytical results which is specified of

00:13:20,160 --> 00:13:24,639
a period of time

00:13:25,200 --> 00:13:29,440
and the last uh provided by the sql is a

00:13:28,639 --> 00:13:32,720
group buy

00:13:29,440 --> 00:13:34,880
and order by so user can group

00:13:32,720 --> 00:13:35,920
by different kind of conditions and

00:13:34,880 --> 00:13:39,040
other by

00:13:35,920 --> 00:13:39,040
specified fields

00:13:42,240 --> 00:13:49,440
here introduce about advanced analytics

00:13:46,320 --> 00:13:51,120
provided by the quip so creeper country

00:13:49,440 --> 00:13:54,560
also supported by that

00:13:51,120 --> 00:13:57,120
the binary data type spot

00:13:54,560 --> 00:13:59,040
the first is a binary image processing

00:13:57,120 --> 00:14:02,959
so user can resize

00:13:59,040 --> 00:14:06,480
or reduce the resolution of the

00:14:02,959 --> 00:14:10,240
image before sending to the card so

00:14:06,480 --> 00:14:12,480
in the right side is an example

00:14:10,240 --> 00:14:14,399
and also it provides the two hash

00:14:12,480 --> 00:14:18,160
functions

00:14:14,399 --> 00:14:22,000
for processing the longitude and the

00:14:18,160 --> 00:14:25,600
latitude so user can call the

00:14:22,000 --> 00:14:28,639
geohesit encode geohedge decode

00:14:25,600 --> 00:14:32,240
geohash neighbor and the geocache

00:14:28,639 --> 00:14:32,240
bonding box and so on

00:14:33,440 --> 00:14:38,000
the last one is that the user also can

00:14:35,519 --> 00:14:39,839
use machine learning or ai streaming

00:14:38,000 --> 00:14:42,959
processing

00:14:39,839 --> 00:14:46,240
so there are two approach

00:14:42,959 --> 00:14:49,040
to achieve the goal the first is that it

00:14:46,240 --> 00:14:51,040
encapsulates the machine or machine

00:14:49,040 --> 00:14:52,399
learning or ai function which creeper

00:14:51,040 --> 00:14:55,600
plug-in

00:14:52,399 --> 00:14:56,800
by this approach user can get better

00:14:55,600 --> 00:14:59,120
performance

00:14:56,800 --> 00:15:01,279
but with higher development and the

00:14:59,120 --> 00:15:04,399
maintenance effort

00:15:01,279 --> 00:15:07,600
and the next approach is to use

00:15:04,399 --> 00:15:11,440
machine learning ai services

00:15:07,600 --> 00:15:14,880
by rpc or rest api so

00:15:11,440 --> 00:15:18,399
in some awful user scenarios

00:15:14,880 --> 00:15:21,920
the machine learning or ai

00:15:18,399 --> 00:15:25,120
is exposed with a rest api

00:15:21,920 --> 00:15:29,680
or rpc service so the creepers

00:15:25,120 --> 00:15:33,839
can support invoke these interfaces

00:15:29,680 --> 00:15:37,360
with function call with this approach

00:15:33,839 --> 00:15:40,959
lower development and deployment

00:15:37,360 --> 00:15:44,399
effort but sacrifice some performance

00:15:40,959 --> 00:15:48,000
so at the right side here's an example

00:15:44,399 --> 00:15:51,519
the input is the image data byte array

00:15:48,000 --> 00:15:52,880
and we want to label the image so user

00:15:51,519 --> 00:15:56,160
can just

00:15:52,880 --> 00:15:57,440
rather the sequel such as select label

00:15:56,160 --> 00:16:01,279
image

00:15:57,440 --> 00:16:04,320
function from the stream

00:16:01,279 --> 00:16:09,839
so the output would be the

00:16:04,320 --> 00:16:09,839
image content of the image

00:16:11,199 --> 00:16:16,160
next is extension and plug-in so creeper

00:16:14,399 --> 00:16:19,199
provides

00:16:16,160 --> 00:16:22,880
three extension points source

00:16:19,199 --> 00:16:26,079
sync and function

00:16:22,880 --> 00:16:30,240
after extension users then can

00:16:26,079 --> 00:16:33,920
use it in the creeper

00:16:30,240 --> 00:16:37,759
framework so here are three steps to

00:16:33,920 --> 00:16:41,199
achieve the goal or developer appliance

00:16:37,759 --> 00:16:44,639
the first is development and debug

00:16:41,199 --> 00:16:47,920
in your local environment and then

00:16:44,639 --> 00:16:52,399
compile to the excel file with the c

00:16:47,920 --> 00:16:56,240
environment as running in the production

00:16:52,399 --> 00:16:56,240
and then deploy the plugins

00:16:56,639 --> 00:17:04,480
so in the live site i listed a

00:17:00,880 --> 00:17:08,079
source extension example

00:17:04,480 --> 00:17:09,199
so user will have two implemented three

00:17:08,079 --> 00:17:12,799
functions

00:17:09,199 --> 00:17:17,280
or interfaces that required for the

00:17:12,799 --> 00:17:20,319
source plugin the configuration

00:17:17,280 --> 00:17:24,000
the open close and the last

00:17:20,319 --> 00:17:27,120
is the initial nice instance

00:17:24,000 --> 00:17:30,960
for your plugin

00:17:27,120 --> 00:17:34,080
so this is a native plugin environment

00:17:30,960 --> 00:17:36,720
development so advantages

00:17:34,080 --> 00:17:37,840
is that it can achieve the better

00:17:36,720 --> 00:17:40,720
performance

00:17:37,840 --> 00:17:42,160
because the parking is loaded with

00:17:40,720 --> 00:17:45,039
native

00:17:42,160 --> 00:17:47,039
because the disadvantage is that it has

00:17:45,039 --> 00:17:50,480
very strict

00:17:47,039 --> 00:17:53,760
it has very strict limitations

00:17:50,480 --> 00:17:56,720
uh which you come from the gold language

00:17:53,760 --> 00:17:59,440
the creeper plugin is based on the gold

00:17:56,720 --> 00:18:02,480
land plug-in

00:17:59,440 --> 00:18:03,760
so user will have to has the same

00:18:02,480 --> 00:18:08,320
conversion

00:18:03,760 --> 00:18:11,440
between the crypt and your plugin

00:18:08,320 --> 00:18:14,640
and also the library dependency must be

00:18:11,440 --> 00:18:17,760
the same and also should have the

00:18:14,640 --> 00:18:21,440
same goal path for the

00:18:17,760 --> 00:18:24,880
creeper and your plug-in it is harder to

00:18:21,440 --> 00:18:24,880
maintain in the development

00:18:26,640 --> 00:18:33,760
so user

00:18:30,000 --> 00:18:35,440
also will use creeper in another two

00:18:33,760 --> 00:18:38,720
scenarios

00:18:35,440 --> 00:18:43,440
uh here is one example the first is

00:18:38,720 --> 00:18:46,720
lu engine rose engine so edge x foundry

00:18:43,440 --> 00:18:47,440
in the right side the creeper projector

00:18:46,720 --> 00:18:50,559
was

00:18:47,440 --> 00:18:53,200
uh the referenced row engine

00:18:50,559 --> 00:18:54,720
implementation in the address foundry

00:18:53,200 --> 00:18:58,919
project

00:18:54,720 --> 00:19:04,240
so from the april

00:18:58,919 --> 00:19:04,240
2020 it has been

00:19:04,400 --> 00:19:11,600
included in the address foundry project

00:19:07,679 --> 00:19:15,039
so if you try to use the address foundry

00:19:11,600 --> 00:19:18,160
the creeper is also

00:19:15,039 --> 00:19:21,280
included in the

00:19:18,160 --> 00:19:25,840
project and then the next is the data

00:19:21,280 --> 00:19:25,840
format and the protocol conversion

00:19:26,640 --> 00:19:31,360
so for some of the reasons a user wanted

00:19:29,679 --> 00:19:34,559
to

00:19:31,360 --> 00:19:37,200
accept the data from source and then

00:19:34,559 --> 00:19:38,000
after processing sends the data to

00:19:37,200 --> 00:19:42,400
another

00:19:38,000 --> 00:19:45,360
system but the two systems has different

00:19:42,400 --> 00:19:46,559
protocols or data type so user can use

00:19:45,360 --> 00:19:49,560
the creep

00:19:46,559 --> 00:19:50,720
to do some transformation

00:19:49,560 --> 00:19:53,280
[Music]

00:19:50,720 --> 00:19:55,200
and the conversion so one of the

00:19:53,280 --> 00:19:58,480
examples is that

00:19:55,200 --> 00:20:02,559
user user sap netweaver rc

00:19:58,480 --> 00:20:05,679
sdk to extract the data from the

00:20:02,559 --> 00:20:06,799
sap system and then send it to another

00:20:05,679 --> 00:20:12,080
system

00:20:06,799 --> 00:20:12,080
after processed by the creeper rules

00:20:15,600 --> 00:20:19,360
now in this page i will introduce a

00:20:18,720 --> 00:20:23,039
little bit

00:20:19,360 --> 00:20:26,559
more about creep coupe edge and equipped

00:20:23,039 --> 00:20:28,880
integration so the kube edge

00:20:26,559 --> 00:20:30,559
is an open source project extending

00:20:28,880 --> 00:20:33,360
native containerized

00:20:30,559 --> 00:20:34,000
application orchestration capabilities

00:20:33,360 --> 00:20:37,280
to host

00:20:34,000 --> 00:20:40,480
at edge with quip and

00:20:37,280 --> 00:20:42,080
kube edge integration it enhances the

00:20:40,480 --> 00:20:46,960
edge analytics

00:20:42,080 --> 00:20:46,960
capabilities so

00:20:47,760 --> 00:20:54,559
the benefits for the two open source

00:20:50,880 --> 00:20:56,240
project integration is that it addressed

00:20:54,559 --> 00:20:59,440
the iot

00:20:56,240 --> 00:21:03,280
edge computing challenges so with

00:20:59,440 --> 00:21:06,400
creeper capabilities provided for

00:21:03,280 --> 00:21:07,520
edge analytics it is it provides lower

00:21:06,400 --> 00:21:10,640
latency

00:21:07,520 --> 00:21:12,080
and the bandwidth causes saving because

00:21:10,640 --> 00:21:15,600
all of the data are

00:21:12,080 --> 00:21:16,640
can be processed as an edge and also

00:21:15,600 --> 00:21:20,000
therefore

00:21:16,640 --> 00:21:23,039
it is easy for user to implement or

00:21:20,000 --> 00:21:26,880
refreshes the business logic because

00:21:23,039 --> 00:21:31,440
user can just change the creeper rule

00:21:26,880 --> 00:21:31,440
at the cloud site

00:21:31,600 --> 00:21:34,960
and the last benefit comes from the

00:21:33,919 --> 00:21:38,080
coverage

00:21:34,960 --> 00:21:40,640
user can manage and deploy the creep

00:21:38,080 --> 00:21:41,520
applications or ar aggregation from the

00:21:40,640 --> 00:21:45,600
cloud

00:21:41,520 --> 00:21:48,880
and also manage the rule from the card

00:21:45,600 --> 00:21:52,159
so it address

00:21:48,880 --> 00:21:54,720
the three challenges

00:21:52,159 --> 00:21:54,720
from the

00:21:55,679 --> 00:22:00,320
for for the iot edge computing

00:22:01,760 --> 00:22:07,919
here is a customer case that leverages a

00:22:05,120 --> 00:22:12,480
group edge and a creep

00:22:07,919 --> 00:22:14,080
so creeper accepts the data collecting

00:22:12,480 --> 00:22:17,440
from the device

00:22:14,080 --> 00:22:18,400
connected to the kubernetes and after

00:22:17,440 --> 00:22:21,679
processing

00:22:18,400 --> 00:22:23,039
one rule will save the data to the infra

00:22:21,679 --> 00:22:26,000
db

00:22:23,039 --> 00:22:26,880
which is a time series db deployed as an

00:22:26,000 --> 00:22:30,559
edge

00:22:26,880 --> 00:22:33,919
and another rule was deployed for

00:22:30,559 --> 00:22:38,080
synchronized data or sending the data

00:22:33,919 --> 00:22:42,080
from the edge to the remote mqtt broke

00:22:38,080 --> 00:22:42,080
which is deployed as the cloud side

00:22:46,720 --> 00:22:52,559
the next step for the quick project so

00:22:50,159 --> 00:22:53,440
we will contribute the creep to the lf

00:22:52,559 --> 00:22:56,640
edge

00:22:53,440 --> 00:22:56,640
now is under the

00:22:56,799 --> 00:23:03,679
submission process and also we will

00:23:00,480 --> 00:23:05,760
collaborate with more of open source

00:23:03,679 --> 00:23:09,840
projects

00:23:05,760 --> 00:23:09,840
from now on

00:23:11,840 --> 00:23:15,520
the last example we will introduce more

00:23:14,320 --> 00:23:18,960
features

00:23:15,520 --> 00:23:19,520
in this year for example the third party

00:23:18,960 --> 00:23:22,720
language

00:23:19,520 --> 00:23:23,360
plugin development support as i

00:23:22,720 --> 00:23:26,480
mentioned

00:23:23,360 --> 00:23:29,600
in the previous page

00:23:26,480 --> 00:23:31,600
so the native approach of

00:23:29,600 --> 00:23:34,400
plugin development is not very

00:23:31,600 --> 00:23:36,240
convenient so we will support

00:23:34,400 --> 00:23:38,799
the third party language plugin

00:23:36,240 --> 00:23:44,720
development which will be more

00:23:38,799 --> 00:23:47,520
user-friendly to the plugin development

00:23:44,720 --> 00:23:48,880
and also we will persistent we will add

00:23:47,520 --> 00:23:51,840
a persistent support

00:23:48,880 --> 00:23:54,080
with third-party frameworks such as

00:23:51,840 --> 00:23:57,200
rallies

00:23:54,080 --> 00:24:02,240
and for more detailed information

00:23:57,200 --> 00:24:05,440
please refer to 2021 roadmap

00:24:02,240 --> 00:24:09,840
you can click as a link

00:24:05,440 --> 00:24:09,840
for to get more detailed information

00:24:12,240 --> 00:24:20,400
okay that's all for today's session

00:24:16,080 --> 00:24:23,919
if you have any let's discuss

00:24:20,400 --> 00:24:23,919

YouTube URL: https://www.youtube.com/watch?v=xuSU1F9aS9c


