Title: Kubernetes Robotics Edge Cluster System - Tomoya Fujita, Sony Corporation & Feng Gao, Sony China Ltd
Publication date: 2021-05-05
Playlist: Kubernetes on Edge Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Kubernetes Robotics Edge Cluster System - Tomoya Fujita, Sony Corporation & Feng Gao, Sony China Limited

Sony R&D Center has been though robotics history and products for years. As robotics platform and Robotics Operating System (ROS) getting matured, there is a requirement to handle the distributed system integration. Using Kubernetes on edge cluster system, there are a lot of advantages such as application lifecycle, deployment and recovery. Also using CNI and ROS Data Distributed System, it can construct distributed system on edge cluster, so that multiple robots can connect directedly and work collaboratively for the specific task. We will share how we can use Kubernetes on edge including deployment robotics application and possible problems based on our experience. Furthermore, we will share our approach to support edge dependent platform with device-plugin to attach hardware resources and even virtual devices which access to the host system such as 3rd party application.
Captions: 
	00:00:00,080 --> 00:00:06,240
hi welcome to cuban this age day

00:00:03,040 --> 00:00:09,360
i am thomas fujita with sony cooperation

00:00:06,240 --> 00:00:12,000
and we have a co-speaker from sony china

00:00:09,360 --> 00:00:12,960
he is also software engineer named

00:00:12,000 --> 00:00:15,120
fengal

00:00:12,960 --> 00:00:16,160
first of all we really appreciate for

00:00:15,120 --> 00:00:18,480
this opportunity

00:00:16,160 --> 00:00:19,439
and a community effort thanks for having

00:00:18,480 --> 00:00:21,359
us

00:00:19,439 --> 00:00:22,800
and today we're going to talk about

00:00:21,359 --> 00:00:25,840
kubernetes roblex

00:00:22,800 --> 00:00:27,279
edge class system i will be sharing the

00:00:25,840 --> 00:00:31,840
most of the overviews

00:00:27,279 --> 00:00:31,840
and the rest will be taken care by fan

00:00:34,960 --> 00:00:38,800
here is the today's agenda for this

00:00:37,280 --> 00:00:41,600
presentation

00:00:38,800 --> 00:00:43,280
starting with the introduction we will

00:00:41,600 --> 00:00:46,000
go through the background

00:00:43,280 --> 00:00:48,800
the problems and the requirements

00:00:46,000 --> 00:00:50,960
especially for hilt use cases

00:00:48,800 --> 00:00:53,520
and we will talk about what we want to

00:00:50,960 --> 00:00:55,680
achieve with using kubernetes

00:00:53,520 --> 00:00:57,199
as in architecture with distributed

00:00:55,680 --> 00:01:00,079
system

00:00:57,199 --> 00:01:02,239
then we can even go deeper about roblox

00:01:00,079 --> 00:01:03,520
examples with kubernetes to support

00:01:02,239 --> 00:01:06,559
distributed system

00:01:03,520 --> 00:01:06,559
on edge platform

00:01:10,000 --> 00:01:15,759
so i am my name is tom fusda

00:01:13,119 --> 00:01:16,960
with sony randy center at sony

00:01:15,759 --> 00:01:20,640
corporation

00:01:16,960 --> 00:01:22,320
i am software architect and developer

00:01:20,640 --> 00:01:24,799
we're most likely working on system

00:01:22,320 --> 00:01:28,159
services middleware

00:01:24,799 --> 00:01:31,200
like loss equipment is

00:01:28,159 --> 00:01:34,720
in open source aspect and i am also

00:01:31,200 --> 00:01:38,240
a member of uh robot operating system

00:01:34,720 --> 00:01:40,799
technical stealing committee i'm a

00:01:38,240 --> 00:01:42,399
phone with sony china responsible for

00:01:40,799 --> 00:01:46,880
software such as

00:01:42,399 --> 00:01:46,880
kubernetes and the multimedia framework

00:01:47,119 --> 00:01:50,240
okay so please feel free to reach out to

00:01:49,920 --> 00:01:53,439
us

00:01:50,240 --> 00:01:55,600
anytime besides we are going to be

00:01:53,439 --> 00:01:56,640
we will be available on the slack

00:01:55,600 --> 00:02:01,759
channel

00:01:56,640 --> 00:02:01,759
or g iot dash edge

00:02:04,640 --> 00:02:08,720
so let me do quick introduction about

00:02:06,399 --> 00:02:11,680
sony's purpose the sony's purpose

00:02:08,720 --> 00:02:13,680
is to fill the world with emotion

00:02:11,680 --> 00:02:14,800
through the power of creativity and

00:02:13,680 --> 00:02:17,280
technology

00:02:14,800 --> 00:02:18,720
our foundation is based on technology to

00:02:17,280 --> 00:02:22,239
create the new values

00:02:18,720 --> 00:02:24,959
within diverse and many businesses

00:02:22,239 --> 00:02:26,400
such as data center data content

00:02:24,959 --> 00:02:29,520
hardware sensors

00:02:26,400 --> 00:02:30,720
consumer devices medical and financial

00:02:29,520 --> 00:02:37,760
services

00:02:30,720 --> 00:02:40,000
okay let's get started

00:02:37,760 --> 00:02:40,959
at first i'd like to come up with some

00:02:40,000 --> 00:02:43,760
backgrounds

00:02:40,959 --> 00:02:45,440
in a couple of slides as we know it's

00:02:43,760 --> 00:02:46,959
been happening that each device is

00:02:45,440 --> 00:02:49,519
getting matured with

00:02:46,959 --> 00:02:51,599
computation connectivity and hardware

00:02:49,519 --> 00:02:54,480
accelerations and so on

00:02:51,599 --> 00:02:55,280
at the same time each system gets

00:02:54,480 --> 00:02:57,120
complicated

00:02:55,280 --> 00:02:59,360
to support the distributed system and

00:02:57,120 --> 00:03:02,400
connected system

00:02:59,360 --> 00:03:05,440
besides concerning about perception

00:03:02,400 --> 00:03:07,519
recognition with dynamic sensing

00:03:05,440 --> 00:03:09,519
data on the edge the application should

00:03:07,519 --> 00:03:11,040
be dynamically adjusted against the

00:03:09,519 --> 00:03:13,440
environment

00:03:11,040 --> 00:03:14,640
that is said the system should be like

00:03:13,440 --> 00:03:19,840
circular faction

00:03:14,640 --> 00:03:19,840
system to adjust the dynamic environment

00:03:24,000 --> 00:03:28,400
so what comes to roblox and robot use

00:03:26,879 --> 00:03:31,200
cases as background

00:03:28,400 --> 00:03:31,760
the robots are expected to work and help

00:03:31,200 --> 00:03:34,799
with

00:03:31,760 --> 00:03:35,920
highly tasks even with multiple robots

00:03:34,799 --> 00:03:37,840
working together

00:03:35,920 --> 00:03:39,760
this is easy to see if we can think

00:03:37,840 --> 00:03:42,640
about factory

00:03:39,760 --> 00:03:44,000
logistics rescue and entertainment use

00:03:42,640 --> 00:03:46,319
cases

00:03:44,000 --> 00:03:47,760
and if that is single robot that we are

00:03:46,319 --> 00:03:49,760
dealing with

00:03:47,760 --> 00:03:50,799
there should be no problem to do

00:03:49,760 --> 00:03:54,560
operation

00:03:50,799 --> 00:03:57,519
but what if it comes to like 10

00:03:54,560 --> 00:03:58,159
100 or thousands of robots we have to

00:03:57,519 --> 00:04:00,720
control

00:03:58,159 --> 00:04:02,159
and maintain we surely need to consider

00:04:00,720 --> 00:04:05,519
that cases

00:04:02,159 --> 00:04:08,000
to do our development and maintenance

00:04:05,519 --> 00:04:09,920
easy without any operation as well as

00:04:08,000 --> 00:04:13,040
possible

00:04:09,920 --> 00:04:14,879
especially during development the

00:04:13,040 --> 00:04:15,360
application developer does not want to

00:04:14,879 --> 00:04:17,840
do

00:04:15,360 --> 00:04:19,359
any operation to check the application

00:04:17,840 --> 00:04:23,280
it has to be easy quick

00:04:19,359 --> 00:04:26,639
and efficient to go importantly

00:04:23,280 --> 00:04:28,800
on its devices the problem becomes

00:04:26,639 --> 00:04:30,479
complicated and there is a lot of

00:04:28,800 --> 00:04:32,160
dependencies compared to the cloud

00:04:30,479 --> 00:04:34,479
infrastructure

00:04:32,160 --> 00:04:35,840
think about the application portability

00:04:34,479 --> 00:04:37,919
modularity

00:04:35,840 --> 00:04:43,840
there should be some abstraction layer

00:04:37,919 --> 00:04:43,840
to conceal the hardware devices

00:04:44,639 --> 00:04:47,840
from next two slides let me introduce

00:04:47,040 --> 00:04:50,080
quickly about

00:04:47,840 --> 00:04:51,600
robot operating system which is called

00:04:50,080 --> 00:04:54,000
ross

00:04:51,600 --> 00:04:54,639
as aspect from kubernetes we can just

00:04:54,000 --> 00:04:57,440
say

00:04:54,639 --> 00:04:58,639
ross is one of the runtime framework and

00:04:57,440 --> 00:05:01,600
sdk

00:04:58,639 --> 00:05:03,039
the robot operating system is a set of

00:05:01,600 --> 00:05:06,000
software libraries

00:05:03,039 --> 00:05:07,360
and tools that help you build your robot

00:05:06,000 --> 00:05:10,639
application

00:05:07,360 --> 00:05:13,039
from drivers to state-of-the-art algos

00:05:10,639 --> 00:05:15,280
and with the powerful developer tools

00:05:13,039 --> 00:05:17,840
ros has what you need

00:05:15,280 --> 00:05:20,240
for your next roblex project and it's

00:05:17,840 --> 00:05:23,919
all open source

00:05:20,240 --> 00:05:25,759
what ros provides is not only for sdk

00:05:23,919 --> 00:05:28,240
but also simulation tools

00:05:25,759 --> 00:05:28,880
which are really important and useful

00:05:28,240 --> 00:05:32,000
for robot

00:05:28,880 --> 00:05:32,000
application development

00:05:34,960 --> 00:05:39,039
the gazebo is the simulation tool

00:05:37,520 --> 00:05:42,400
constructed on physics

00:05:39,039 --> 00:05:44,960
sensors and interfaces including dui

00:05:42,400 --> 00:05:46,080
you can switch real world and simulation

00:05:44,960 --> 00:05:48,160
world easily

00:05:46,080 --> 00:05:50,400
and application is agnostic from this

00:05:48,160 --> 00:05:52,479
world that is said

00:05:50,400 --> 00:05:54,000
you can just go develop the application

00:05:52,479 --> 00:05:57,120
without any hardware

00:05:54,000 --> 00:05:59,440
but simulation at the very first place

00:05:57,120 --> 00:06:01,120
using ros and gazebo you can have

00:05:59,440 --> 00:06:03,120
everything you need to develop your

00:06:01,120 --> 00:06:05,759
robotics application

00:06:03,120 --> 00:06:08,160
this ros overview is needed for

00:06:05,759 --> 00:06:11,199
explanation and you can find a way

00:06:08,160 --> 00:06:12,720
more information about ross on the

00:06:11,199 --> 00:06:15,759
internet

00:06:12,720 --> 00:06:17,039
so now we stop here about talking about

00:06:15,759 --> 00:06:18,560
ross and let's be

00:06:17,039 --> 00:06:21,840
back on the main topic which is

00:06:18,560 --> 00:06:21,840
kubernetes disrelated

00:06:24,800 --> 00:06:28,720
okay so let's move on the topics now to

00:06:27,440 --> 00:06:32,639
start with the problems

00:06:28,720 --> 00:06:34,560
what is the pain as you can see here

00:06:32,639 --> 00:06:36,639
is the current destruction that we have

00:06:34,560 --> 00:06:38,800
the application needs to be integrated

00:06:36,639 --> 00:06:39,600
into the specific system every single

00:06:38,800 --> 00:06:42,080
time

00:06:39,600 --> 00:06:43,840
even if the application functionality is

00:06:42,080 --> 00:06:45,919
almost the same there will be some

00:06:43,840 --> 00:06:48,000
operation cost for integration

00:06:45,919 --> 00:06:49,840
this is because platform and system is

00:06:48,000 --> 00:06:52,400
different from one to another

00:06:49,840 --> 00:06:54,560
in the edge and it takes time for

00:06:52,400 --> 00:06:56,880
application to system developers

00:06:54,560 --> 00:06:58,000
what's the huge pain here is that is

00:06:56,880 --> 00:07:00,080
real

00:06:58,000 --> 00:07:01,199
that is just the operation cost but not

00:07:00,080 --> 00:07:04,240
exactly

00:07:01,199 --> 00:07:06,639
the development we do not doing that

00:07:04,240 --> 00:07:09,520
we do not like doing that anymore we

00:07:06,639 --> 00:07:09,520
think nobody does

00:07:10,800 --> 00:07:17,360
so we are proposing this cloud and edge

00:07:14,960 --> 00:07:18,080
common architecture it is simple and

00:07:17,360 --> 00:07:21,199
common

00:07:18,080 --> 00:07:23,120
it also can support distributed system

00:07:21,199 --> 00:07:24,240
and the application should be platform

00:07:23,120 --> 00:07:26,880
agnostic

00:07:24,240 --> 00:07:28,319
in other words against the pain from the

00:07:26,880 --> 00:07:30,880
previous slide

00:07:28,319 --> 00:07:32,319
once we get application developed we can

00:07:30,880 --> 00:07:35,360
run that application

00:07:32,319 --> 00:07:38,000
wherever we like could be cloud

00:07:35,360 --> 00:07:39,280
could be edge could be you don't need to

00:07:38,000 --> 00:07:42,479
even care

00:07:39,280 --> 00:07:46,319
besides you can see blue highlighted

00:07:42,479 --> 00:07:49,039
directions in the image on the right top

00:07:46,319 --> 00:07:49,759
in the edge network devices are

00:07:49,039 --> 00:07:52,240
connected

00:07:49,759 --> 00:07:56,000
connect connecting each other directly

00:07:52,240 --> 00:07:56,000
as distributed system to keep the

00:07:56,840 --> 00:07:59,840
performers

00:08:00,000 --> 00:08:04,800
continue to the previous slides the

00:08:02,560 --> 00:08:07,120
application engineers aspect it is just

00:08:04,800 --> 00:08:08,879
appears to be a single entry point to

00:08:07,120 --> 00:08:11,280
manage the application

00:08:08,879 --> 00:08:12,720
we do not need to operate for each

00:08:11,280 --> 00:08:15,199
devices anymore

00:08:12,720 --> 00:08:16,000
but just accessing the dashboard front

00:08:15,199 --> 00:08:18,720
end will be

00:08:16,000 --> 00:08:19,440
all sometimes we want to deploy

00:08:18,720 --> 00:08:22,400
application

00:08:19,440 --> 00:08:24,160
only on specific debug host sometimes

00:08:22,400 --> 00:08:27,199
all of the nodes

00:08:24,160 --> 00:08:29,599
introducing the boundary between system

00:08:27,199 --> 00:08:30,319
and the application application just

00:08:29,599 --> 00:08:32,560
requests

00:08:30,319 --> 00:08:34,479
what kind of capability or hardware

00:08:32,560 --> 00:08:36,159
devices are connected to run the

00:08:34,479 --> 00:08:38,000
application

00:08:36,159 --> 00:08:40,000
so that the rest will be taken care by

00:08:38,000 --> 00:08:42,000
framework and the application can be

00:08:40,000 --> 00:08:45,040
agnostic from the platform

00:08:42,000 --> 00:08:47,600
or dependencies this is exactly

00:08:45,040 --> 00:08:54,959
one of the x system in the edge world

00:08:47,600 --> 00:08:57,760
that is something we want to achieve

00:08:54,959 --> 00:08:58,320
so we have been considering kubernetes

00:08:57,760 --> 00:09:00,000
against

00:08:58,320 --> 00:09:01,519
this situation and the problems

00:09:00,000 --> 00:09:04,160
described before

00:09:01,519 --> 00:09:05,519
and the answer for now we could do that

00:09:04,160 --> 00:09:08,640
with kubernetes

00:09:05,519 --> 00:09:10,560
with kubernetes we can have most of our

00:09:08,640 --> 00:09:14,320
requirement as described

00:09:10,560 --> 00:09:17,680
as before such as development and

00:09:14,320 --> 00:09:19,680
application maintenance roll up and down

00:09:17,680 --> 00:09:22,240
the application without any downtime we

00:09:19,680 --> 00:09:24,640
can also keep the application running

00:09:22,240 --> 00:09:25,760
administration and device capability

00:09:24,640 --> 00:09:28,560
management

00:09:25,760 --> 00:09:30,080
and scalability up to ten thousand nodes

00:09:28,560 --> 00:09:31,760
in the cluster

00:09:30,080 --> 00:09:33,680
those are everything that could bend

00:09:31,760 --> 00:09:37,839
this main line provides and

00:09:33,680 --> 00:09:37,839
allows us to do that as it is

00:09:41,839 --> 00:09:45,200
so after all taking advantage of

00:09:44,320 --> 00:09:46,800
kubernetes

00:09:45,200 --> 00:09:48,880
we can actually support this

00:09:46,800 --> 00:09:49,680
architecture we can have the flexible

00:09:48,880 --> 00:09:52,240
cloud

00:09:49,680 --> 00:09:52,959
and edge cluster system for application

00:09:52,240 --> 00:09:56,000
development and

00:09:52,959 --> 00:09:57,120
management and providing security

00:09:56,000 --> 00:09:59,600
enclaves

00:09:57,120 --> 00:10:01,120
and capabilities dynamically attached to

00:09:59,600 --> 00:10:04,320
the runtime pod

00:10:01,120 --> 00:10:06,320
when application starts running this is

00:10:04,320 --> 00:10:10,880
what exactly we want to support

00:10:06,320 --> 00:10:13,839
as cloud and as common architecture

00:10:10,880 --> 00:10:15,839
from the next slides fan will be taking

00:10:13,839 --> 00:10:16,880
over the presentation to explain more

00:10:15,839 --> 00:10:19,839
details about

00:10:16,880 --> 00:10:20,240
its specific use cases and what we have

00:10:19,839 --> 00:10:23,279
done

00:10:20,240 --> 00:10:23,279
with kubernetes

00:10:26,880 --> 00:10:31,600
thanks i will be taking over from here

00:10:29,839 --> 00:10:34,240
we have we shared enough about

00:10:31,600 --> 00:10:36,480
overviews and the requirements so let's

00:10:34,240 --> 00:10:38,720
talk about more details here

00:10:36,480 --> 00:10:40,399
we are going to talk about the four main

00:10:38,720 --> 00:10:43,600
subjects

00:10:40,399 --> 00:10:45,519
dynamic cluster reconfiguration for hiot

00:10:43,600 --> 00:10:47,279
devices

00:10:45,519 --> 00:10:48,800
the system and the application will

00:10:47,279 --> 00:10:50,880
rules dynamic

00:10:48,800 --> 00:10:51,920
security includes attachment with

00:10:50,880 --> 00:10:54,000
resource

00:10:51,920 --> 00:10:55,120
and the hardware about structuring with

00:10:54,000 --> 00:10:58,839
the kubernetes

00:10:55,120 --> 00:11:01,839
device plugin interface and the

00:10:58,839 --> 00:11:01,839
implementation

00:11:03,600 --> 00:11:07,120
here is the describer i distributed the

00:11:06,480 --> 00:11:09,920
system

00:11:07,120 --> 00:11:10,880
on edge environment as in a typical use

00:11:09,920 --> 00:11:14,160
case

00:11:10,880 --> 00:11:16,640
expecting multiple robots are connected

00:11:14,160 --> 00:11:17,440
in the sim lab and working together for

00:11:16,640 --> 00:11:20,640
user

00:11:17,440 --> 00:11:24,560
application is built on top of ros which

00:11:20,640 --> 00:11:26,399
is publisher subscriber architectures

00:11:24,560 --> 00:11:28,399
as application layer to support the

00:11:26,399 --> 00:11:31,600
distributed system

00:11:28,399 --> 00:11:34,800
there are phase detection ad detection

00:11:31,600 --> 00:11:35,839
container runs inside ports on the

00:11:34,800 --> 00:11:38,240
worker nodes

00:11:35,839 --> 00:11:40,640
and the selector container can select

00:11:38,240 --> 00:11:43,519
the images to notify the visualizer

00:11:40,640 --> 00:11:44,399
to display what image should be printing

00:11:43,519 --> 00:11:47,600
the mid

00:11:44,399 --> 00:11:48,720
monitor on primary node this is one of

00:11:47,600 --> 00:11:51,920
the example but

00:11:48,720 --> 00:11:56,040
we can do this with kubernetes since

00:11:51,920 --> 00:11:58,959
this is a distributed system it feels

00:11:56,040 --> 00:12:02,000
independently and it appears to be a

00:11:58,959 --> 00:12:04,959
single system as user experience

00:12:02,000 --> 00:12:05,519
the point what we want to mention here

00:12:04,959 --> 00:12:09,360
on this

00:12:05,519 --> 00:12:11,600
slide is we need to use willnet cni

00:12:09,360 --> 00:12:13,120
this will be needed if the application

00:12:11,600 --> 00:12:16,000
layer use multicast

00:12:13,120 --> 00:12:16,880
since the gloss supports distributed

00:12:16,000 --> 00:12:19,440
system

00:12:16,880 --> 00:12:21,600
it does endpoint the discovery at the

00:12:19,440 --> 00:12:24,639
runtime with multicast

00:12:21,600 --> 00:12:27,279
we have tried a few other cni's

00:12:24,639 --> 00:12:30,000
but we'll work us out of the box when we

00:12:27,279 --> 00:12:30,000
use source

00:12:32,079 --> 00:12:37,440
thinking about consumer devices it

00:12:35,360 --> 00:12:40,160
distributed system within lines

00:12:37,440 --> 00:12:40,880
and even with third-party application

00:12:40,160 --> 00:12:44,160
they are shown

00:12:40,880 --> 00:12:47,279
or must be securities certificate or key

00:12:44,160 --> 00:12:49,519
to control author resisting and access

00:12:47,279 --> 00:12:52,800
permission for each endpoint

00:12:49,519 --> 00:12:53,920
security turns to be considered after

00:12:52,800 --> 00:12:57,120
development but

00:12:53,920 --> 00:13:00,480
once it comes to production phase

00:12:57,120 --> 00:13:03,360
that something we cannot just ignore

00:13:00,480 --> 00:13:04,639
here it describes how to manage security

00:13:03,360 --> 00:13:07,200
includes

00:13:04,639 --> 00:13:08,560
as administrator and the user and the

00:13:07,200 --> 00:13:11,839
whole security

00:13:08,560 --> 00:13:13,440
includes are attached to appropriate

00:13:11,839 --> 00:13:16,160
ports dynamically

00:13:13,440 --> 00:13:18,399
this is just something we can do with

00:13:16,160 --> 00:13:22,240
kubernetes custom resource

00:13:18,399 --> 00:13:25,360
named configure map and the secrets

00:13:22,240 --> 00:13:26,320
first administrator rejects the security

00:13:25,360 --> 00:13:29,519
and clues

00:13:26,320 --> 00:13:32,480
for each endpoint and give them

00:13:29,519 --> 00:13:33,279
appropriate access permission where api

00:13:32,480 --> 00:13:35,440
server

00:13:33,279 --> 00:13:37,920
so that we can control the access

00:13:35,440 --> 00:13:40,480
permission in the first place

00:13:37,920 --> 00:13:41,440
for example third-party application

00:13:40,480 --> 00:13:44,560
developer can

00:13:41,440 --> 00:13:47,760
only see a couple of security includes

00:13:44,560 --> 00:13:48,000
for third party application and when we

00:13:47,760 --> 00:13:50,959
need

00:13:48,000 --> 00:13:52,160
to run the application we can just see

00:13:50,959 --> 00:13:54,480
what we need

00:13:52,160 --> 00:13:55,680
to use for this port as security

00:13:54,480 --> 00:13:57,680
enclosed

00:13:55,680 --> 00:13:58,880
the rest will be taken care by

00:13:57,680 --> 00:14:01,360
kubernetes

00:13:58,880 --> 00:14:02,160
it will check the permission if the user

00:14:01,360 --> 00:14:05,360
is allowed

00:14:02,160 --> 00:14:08,639
to use that security enclave

00:14:05,360 --> 00:14:11,360
and zoom loads and attach the required

00:14:08,639 --> 00:14:12,079
security include dynamically on the

00:14:11,360 --> 00:14:15,519
endpoint

00:14:12,079 --> 00:14:17,600
port as volatile storage on the physical

00:14:15,519 --> 00:14:20,720
machine

00:14:17,600 --> 00:14:23,680
application ports can be agnostic

00:14:20,720 --> 00:14:24,079
from this binding by kubernetes but it

00:14:23,680 --> 00:14:26,959
just

00:14:24,079 --> 00:14:28,480
uses security includes to participate

00:14:26,959 --> 00:14:31,600
distribute the system

00:14:28,480 --> 00:14:34,560
and access the data objects once

00:14:31,600 --> 00:14:36,079
ports are shut down security and clues

00:14:34,560 --> 00:14:39,040
will be gone too

00:14:36,079 --> 00:14:39,600
so far we confirmed that everything

00:14:39,040 --> 00:14:42,839
works

00:14:39,600 --> 00:14:45,839
okay with those security features like

00:14:42,839 --> 00:14:45,839
this

00:14:47,920 --> 00:14:52,320
in edge devices one of the most

00:14:50,320 --> 00:14:55,680
complication is platform

00:14:52,320 --> 00:14:57,440
dependency there are so many devices we

00:14:55,680 --> 00:15:00,480
cannot even count all

00:14:57,440 --> 00:15:01,440
but this should be also abstracted to

00:15:00,480 --> 00:15:04,959
application

00:15:01,440 --> 00:15:08,160
perspective kubernetes has interface

00:15:04,959 --> 00:15:12,000
named device plugin which is

00:15:08,160 --> 00:15:15,199
expected to use for gpu originally

00:15:12,000 --> 00:15:17,440
as described here us plug-in

00:15:15,199 --> 00:15:19,760
implementation can be one of the

00:15:17,440 --> 00:15:22,720
kubernetes custom resource

00:15:19,760 --> 00:15:24,839
and the interface are really simplified

00:15:22,720 --> 00:15:26,399
so that it should be easy to support the

00:15:24,839 --> 00:15:30,639
implementation

00:15:26,399 --> 00:15:33,839
device plugin iterates with kubernetes

00:15:30,639 --> 00:15:36,240
to list a locate and

00:15:33,839 --> 00:15:37,279
banned the device for application ports

00:15:36,240 --> 00:15:39,600
dynamically

00:15:37,279 --> 00:15:40,639
this really seemed to be kind of a

00:15:39,600 --> 00:15:43,519
strategy

00:15:40,639 --> 00:15:45,680
that we want to have in edge use cases

00:15:43,519 --> 00:15:49,440
so we did try to use

00:15:45,680 --> 00:15:49,440
that against our requirements

00:15:53,440 --> 00:15:58,720
in ig iot devices there would be more

00:15:56,560 --> 00:16:01,839
complicated devices such as

00:15:58,720 --> 00:16:05,360
fpga special hardware acceleration

00:16:01,839 --> 00:16:06,639
dsp and so on also we would want to add

00:16:05,360 --> 00:16:09,519
a virtual device

00:16:06,639 --> 00:16:10,639
provided as api exercise to the host

00:16:09,519 --> 00:16:13,759
system

00:16:10,639 --> 00:16:16,880
instead of finding physical devices

00:16:13,759 --> 00:16:17,680
directly to application port providing

00:16:16,880 --> 00:16:20,000
api

00:16:17,680 --> 00:16:21,199
from host system to application

00:16:20,000 --> 00:16:24,000
container

00:16:21,199 --> 00:16:25,759
that gives us more flexibility and

00:16:24,000 --> 00:16:29,040
security to control

00:16:25,759 --> 00:16:30,639
access from container host system we

00:16:29,040 --> 00:16:33,279
already have the

00:16:30,639 --> 00:16:33,680
implementation something described on

00:16:33,279 --> 00:16:37,279
this

00:16:33,680 --> 00:16:40,399
slide application can request the device

00:16:37,279 --> 00:16:42,480
api if it has read access when

00:16:40,399 --> 00:16:46,000
application container starts

00:16:42,480 --> 00:16:48,240
internally or device plugin iterates

00:16:46,000 --> 00:16:50,160
with the host system manager and check

00:16:48,240 --> 00:16:53,360
the permission and provide

00:16:50,160 --> 00:16:56,320
the api is requested

00:16:53,360 --> 00:16:56,320
by application

00:16:58,639 --> 00:17:03,680
and the device apis are attached to

00:17:01,279 --> 00:17:07,120
application container dynamically

00:17:03,680 --> 00:17:10,000
this entire process of device plugin is

00:17:07,120 --> 00:17:11,199
perfectly concealed by application

00:17:10,000 --> 00:17:14,400
aspect

00:17:11,199 --> 00:17:17,039
so for application it is agnostic

00:17:14,400 --> 00:17:20,720
from this process and just goes with

00:17:17,039 --> 00:17:20,720
device or apis

00:17:22,079 --> 00:17:25,839
so do we have everything we need for

00:17:24,559 --> 00:17:29,360
device plugin

00:17:25,839 --> 00:17:32,480
the answer is no there is a open issue

00:17:29,360 --> 00:17:36,160
for device plugin which originally comes

00:17:32,480 --> 00:17:39,520
from our use case as we mentioned before

00:17:36,160 --> 00:17:43,039
ig devices are way more complicated

00:17:39,520 --> 00:17:46,720
some devices are not simple to manage

00:17:43,039 --> 00:17:49,760
with open close button repair more

00:17:46,720 --> 00:17:50,960
and some specific operation will release

00:17:49,760 --> 00:17:53,520
the

00:17:50,960 --> 00:17:56,080
resource us plugin currently does not

00:17:53,520 --> 00:17:59,280
have such kind of callback interface

00:17:56,080 --> 00:18:01,679
to release the device resource so

00:17:59,280 --> 00:18:04,160
we have been working on with the

00:18:01,679 --> 00:18:05,600
community to support this requirement in

00:18:04,160 --> 00:18:08,480
the mainland

00:18:05,600 --> 00:18:09,360
uh if you are interested in this please

00:18:08,480 --> 00:18:12,799
take a look at

00:18:09,360 --> 00:18:15,840
the kep and leave some feedback

00:18:12,799 --> 00:18:15,840
on the comments

00:18:17,760 --> 00:18:21,679
finally we are gonna talk about the

00:18:20,480 --> 00:18:24,880
dynamic

00:18:21,679 --> 00:18:25,440
cluster reconfiguration as you can

00:18:24,880 --> 00:18:27,760
imagine

00:18:25,440 --> 00:18:30,240
ig environment there are some situations

00:18:27,760 --> 00:18:33,440
different from cloud infrastructure

00:18:30,240 --> 00:18:37,120
at the first robot moves weak moves

00:18:33,440 --> 00:18:38,160
that means accidentally robust moves out

00:18:37,120 --> 00:18:40,640
of the network

00:18:38,160 --> 00:18:42,240
and the url where this network is used

00:18:40,640 --> 00:18:45,440
in id devices

00:18:42,240 --> 00:18:48,799
which we can see unstable network

00:18:45,440 --> 00:18:49,440
in addition ig devices can be easily

00:18:48,799 --> 00:18:52,880
shut down

00:18:49,440 --> 00:18:55,840
or powered off including this operation

00:18:52,880 --> 00:18:56,799
and works with battery breaks down

00:18:55,840 --> 00:18:59,600
easily

00:18:56,799 --> 00:19:00,559
and the cost should be well considered

00:18:59,600 --> 00:19:03,039
going with this

00:19:00,559 --> 00:19:03,679
situation and environment to use cluster

00:19:03,039 --> 00:19:06,400
system

00:19:03,679 --> 00:19:07,600
edge it has to be robust and

00:19:06,400 --> 00:19:10,559
reconfigurable

00:19:07,600 --> 00:19:12,480
without manual operation some methods

00:19:10,559 --> 00:19:13,760
are provided such as the high

00:19:12,480 --> 00:19:15,760
availability

00:19:13,760 --> 00:19:17,760
by the way say it should be more

00:19:15,760 --> 00:19:22,080
dynamically reconfigured

00:19:17,760 --> 00:19:22,080
only at us

00:19:23,600 --> 00:19:30,160
we expected this requirement for cluster

00:19:27,679 --> 00:19:33,039
reconfiguration in edge device

00:19:30,160 --> 00:19:33,919
as you can see the picture on the left

00:19:33,039 --> 00:19:37,039
there

00:19:33,919 --> 00:19:41,280
are some candidates for primary service

00:19:37,039 --> 00:19:43,919
technically all devices can be primary

00:19:41,280 --> 00:19:44,880
energy will do leader election within

00:19:43,919 --> 00:19:48,320
candidates

00:19:44,880 --> 00:19:51,679
and once primary is online that service

00:19:48,320 --> 00:19:54,799
is notified to all the worker nodes

00:19:51,679 --> 00:19:58,000
even candid nodes become work nodes

00:19:54,799 --> 00:19:59,840
as well if the workload comes online

00:19:58,000 --> 00:20:02,320
cluster network

00:19:59,840 --> 00:20:03,440
it will detect the service is available

00:20:02,320 --> 00:20:06,880
dynamically and

00:20:03,440 --> 00:20:10,640
participate in the cluster system

00:20:06,880 --> 00:20:15,039
west west also name space should

00:20:10,640 --> 00:20:16,799
be applied thinking about that use case

00:20:15,039 --> 00:20:18,880
multiple cluster network in the

00:20:16,799 --> 00:20:22,080
streamline for factory

00:20:18,880 --> 00:20:25,120
and the logistics this

00:20:22,080 --> 00:20:26,000
is needed to support so far we have been

00:20:25,120 --> 00:20:28,880
developing

00:20:26,000 --> 00:20:29,679
this framework based on kubernetes api

00:20:28,880 --> 00:20:35,840
to see if

00:20:29,679 --> 00:20:35,840
what's more missing for all use cases

00:20:38,799 --> 00:20:46,720
there are just the ideas but we expect

00:20:43,520 --> 00:20:49,440
that this is also needed to support as a

00:20:46,720 --> 00:20:52,799
total solution for h-cluster system

00:20:49,440 --> 00:20:56,960
in the future application redeployment

00:20:52,799 --> 00:21:00,240
is required unmore dynamic sensing date

00:20:56,960 --> 00:21:03,440
such as location perception

00:21:00,240 --> 00:21:06,559
and recognition date for example if

00:21:03,440 --> 00:21:09,840
the location changes for physical world

00:21:06,559 --> 00:21:12,880
application will be redeployed to adjust

00:21:09,840 --> 00:21:13,200
to that location robots in hospitals

00:21:12,880 --> 00:21:16,480
should

00:21:13,200 --> 00:21:18,320
be aware of medical context robots in

00:21:16,480 --> 00:21:22,159
the store should be aware

00:21:18,320 --> 00:21:25,200
of food drink context

00:21:22,159 --> 00:21:28,320
under support distributed system we

00:21:25,200 --> 00:21:29,840
will need a kind of set architecture to

00:21:28,320 --> 00:21:33,360
detect the failure

00:21:29,840 --> 00:21:35,520
failure in entire system without that

00:21:33,360 --> 00:21:38,720
it will be so hard to maintain the

00:21:35,520 --> 00:21:41,600
entire cluster system in ig devices

00:21:38,720 --> 00:21:42,400
at this point we think we can learn and

00:21:41,600 --> 00:21:45,440
study

00:21:42,400 --> 00:21:49,280
more from cloud experience

00:21:45,440 --> 00:21:52,080
and probably supporting microcontrollers

00:21:49,280 --> 00:21:53,200
with cube edge more lightweight agent

00:21:52,080 --> 00:21:56,159
compared

00:21:53,200 --> 00:21:57,600
to cubelet supporting this requirement

00:21:56,159 --> 00:21:59,919
we believe that

00:21:57,600 --> 00:22:02,400
we can actually support kubernetes

00:21:59,919 --> 00:22:06,159
clustering edge system

00:22:02,400 --> 00:22:09,280
uh that is all of our presentation

00:22:06,159 --> 00:22:09,760
appreciate for watching all this and if

00:22:09,280 --> 00:22:12,080
you are

00:22:09,760 --> 00:22:13,960
interested please feel free to make

00:22:12,080 --> 00:22:16,960
contact with us

00:22:13,960 --> 00:22:16,960

YouTube URL: https://www.youtube.com/watch?v=rqyLd_AhXak


