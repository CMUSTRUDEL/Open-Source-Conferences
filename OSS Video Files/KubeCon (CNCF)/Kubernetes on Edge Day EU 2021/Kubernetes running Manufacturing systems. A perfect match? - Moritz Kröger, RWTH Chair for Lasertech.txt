Title: Kubernetes running Manufacturing systems. A perfect match? - Moritz Kröger, RWTH Chair for Lasertech
Publication date: 2021-05-05
Playlist: Kubernetes on Edge Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Kubernetes running Manufacturing systems. A perfect match? - Moritz Kröger, RWTH Chair for Lasertechnology

The demand of modern manufacturing machines for better quality inspection and condition monitoring has lead to an increase of sensors and cameras in these systems. Especially in the area of Laser-based manufacturing where a typical machine can produce up to multiple Gigabytes of data per second single manufacturing computers are simply not powerful enough to handle this kind of workload. A research team of the RWTH Chair for Laser technology is currently building a distributed Kubernetes based control system for Laser manufacturing machines. This system not only aggregates the generated data and controls the machine in a distributed environment, but also allows the dynamic injection of data analytics at the edge. This talk gives an overview of the current state of the systems as well as the pros and cons of working with Kubernetes to control manufacturing machines.
Captions: 
	00:00:00,160 --> 00:00:04,000
all right hello kubecon uh welcome to my

00:00:03,520 --> 00:00:06,560
session

00:00:04,000 --> 00:00:07,520
kubernetes running manufacturing systems

00:00:06,560 --> 00:00:11,840
a perfect

00:00:07,520 --> 00:00:14,080
match about me uh i'm maurice krieger

00:00:11,840 --> 00:00:15,519
i'm a scientist for the chair for laser

00:00:14,080 --> 00:00:18,880
technology in

00:00:15,519 --> 00:00:21,359
germany i'm focusing in my research work

00:00:18,880 --> 00:00:22,880
especially on microstructuring and metal

00:00:21,359 --> 00:00:27,199
3d printing

00:00:22,880 --> 00:00:28,960
and my personal research topic

00:00:27,199 --> 00:00:31,199
normally data infrastructure for

00:00:28,960 --> 00:00:32,079
manufacturing cloud-based manufacturing

00:00:31,199 --> 00:00:34,239
systems

00:00:32,079 --> 00:00:35,600
and integration of data science into

00:00:34,239 --> 00:00:37,920
laser manufacturing

00:00:35,600 --> 00:00:39,760
so especially regarding the it

00:00:37,920 --> 00:00:42,320
infrastructure behind current

00:00:39,760 --> 00:00:45,039
manufacturing systems and beyond

00:00:42,320 --> 00:00:47,280
and normally if i'm not doing some

00:00:45,039 --> 00:00:50,160
cloud-based laser manufacturing

00:00:47,280 --> 00:00:51,440
stuff i'm going kite-surfing somewhere

00:00:50,160 --> 00:00:54,719
in the netherlands or

00:00:51,440 --> 00:00:57,280
as you can see here on sicily um

00:00:54,719 --> 00:00:58,000
but if you know any other good spots in

00:00:57,280 --> 00:01:01,359
europe please

00:00:58,000 --> 00:01:03,520
let me know today i brought

00:01:01,359 --> 00:01:04,799
the following agenda first of all i'm

00:01:03,520 --> 00:01:06,320
gonna talk a little bit about the

00:01:04,799 --> 00:01:09,200
internet of production the

00:01:06,320 --> 00:01:09,680
project i've been working for for the

00:01:09,200 --> 00:01:13,119
last

00:01:09,680 --> 00:01:16,159
two years also

00:01:13,119 --> 00:01:17,840
why do we need kubernetes for laser

00:01:16,159 --> 00:01:20,159
manufacturing systems

00:01:17,840 --> 00:01:22,240
uh also i'm going to talk a little bit

00:01:20,159 --> 00:01:24,159
about our current lab setup

00:01:22,240 --> 00:01:27,200
and last but not least i'm going to talk

00:01:24,159 --> 00:01:29,280
about the experience we made with this

00:01:27,200 --> 00:01:31,119
lab set up so to go to the bad end of

00:01:29,280 --> 00:01:33,759
that

00:01:31,119 --> 00:01:35,200
so the internet of production what is it

00:01:33,759 --> 00:01:37,920
um

00:01:35,200 --> 00:01:38,479
the the the internet of production is

00:01:37,920 --> 00:01:40,799
one of

00:01:38,479 --> 00:01:42,720
germany's largest research projects in

00:01:40,799 --> 00:01:45,360
the area of manufacturing and

00:01:42,720 --> 00:01:47,360
digitalization we have a funding of

00:01:45,360 --> 00:01:49,920
around about 50 million

00:01:47,360 --> 00:01:50,799
and 200 involved scientists and

00:01:49,920 --> 00:01:54,640
therefore are

00:01:50,799 --> 00:01:56,640
one of the largest projects in germany

00:01:54,640 --> 00:02:00,799
in the area of manufacturing and

00:01:56,640 --> 00:02:03,280
maybe even in the world the idea of the

00:02:00,799 --> 00:02:04,320
of the internet of production is the

00:02:03,280 --> 00:02:07,439
idea of

00:02:04,320 --> 00:02:09,360
the creation of digital shadows so the

00:02:07,439 --> 00:02:12,720
main

00:02:09,360 --> 00:02:14,560
vision here is that you have uh the

00:02:12,720 --> 00:02:15,840
virtual world and the physical world

00:02:14,560 --> 00:02:17,680
down here so

00:02:15,840 --> 00:02:19,280
you have for example the development

00:02:17,680 --> 00:02:21,440
phase of a product

00:02:19,280 --> 00:02:23,599
where you draw something or where you

00:02:21,440 --> 00:02:26,000
plan how to produce something or you

00:02:23,599 --> 00:02:28,480
plan for example a factory

00:02:26,000 --> 00:02:30,480
and normally use tools for that and

00:02:28,480 --> 00:02:32,720
these tools produce data

00:02:30,480 --> 00:02:34,879
and then the the product you want to

00:02:32,720 --> 00:02:35,360
produce goes into production and of

00:02:34,879 --> 00:02:37,760
course

00:02:35,360 --> 00:02:38,959
you have machines that also produce data

00:02:37,760 --> 00:02:41,840
and

00:02:38,959 --> 00:02:42,480
later these products are getting used

00:02:41,840 --> 00:02:45,920
and

00:02:42,480 --> 00:02:47,760
the usage also produces data and

00:02:45,920 --> 00:02:49,120
the idea of the internet of production

00:02:47,760 --> 00:02:51,680
is that we bundle

00:02:49,120 --> 00:02:54,000
all of this data together into digital

00:02:51,680 --> 00:02:57,760
shadows so that we can later use them

00:02:54,000 --> 00:03:01,440
that for example a drawing

00:02:57,760 --> 00:03:04,959
engineer in development phase has access

00:03:01,440 --> 00:03:08,000
to some kind of algorithm that analyzes

00:03:04,959 --> 00:03:08,879
the usage data of previous products for

00:03:08,000 --> 00:03:11,280
example

00:03:08,879 --> 00:03:12,640
or that's an operator operating in a

00:03:11,280 --> 00:03:14,800
laser machine

00:03:12,640 --> 00:03:15,840
has access to algorithms that's

00:03:14,800 --> 00:03:18,720
analyzing

00:03:15,840 --> 00:03:21,360
the state of its current laser machine

00:03:18,720 --> 00:03:21,360
at the moment

00:03:21,599 --> 00:03:26,720
the internet of production focuses on

00:03:24,000 --> 00:03:29,440
the following infrastructure map

00:03:26,720 --> 00:03:30,319
it looks a little bit scary but let me

00:03:29,440 --> 00:03:33,760
explain

00:03:30,319 --> 00:03:35,599
really quick we have our data

00:03:33,760 --> 00:03:37,840
infrastructure down here so basically

00:03:35,599 --> 00:03:39,280
all of our product data cut data

00:03:37,840 --> 00:03:42,640
simulation data

00:03:39,280 --> 00:03:45,680
machine data customer feedback data

00:03:42,640 --> 00:03:47,760
and this gets aggregated by some kind of

00:03:45,680 --> 00:03:50,319
middleware plus system

00:03:47,760 --> 00:03:51,760
um that still is working progress of

00:03:50,319 --> 00:03:56,080
course

00:03:51,760 --> 00:03:57,200
and that binds or combines all of these

00:03:56,080 --> 00:04:00,080
different data streams

00:03:57,200 --> 00:04:01,760
into smart data so here we can run

00:04:00,080 --> 00:04:03,040
different algorithms and different

00:04:01,760 --> 00:04:04,959
analytic models

00:04:03,040 --> 00:04:06,159
to actually make sense of what we are

00:04:04,959 --> 00:04:09,439
gathering at

00:04:06,159 --> 00:04:13,040
the the raw data level basically and

00:04:09,439 --> 00:04:16,479
all of that these algorithms can then be

00:04:13,040 --> 00:04:18,959
fed into the smart expert systems

00:04:16,479 --> 00:04:20,560
which can help different people in

00:04:18,959 --> 00:04:23,520
different design phases

00:04:20,560 --> 00:04:25,280
of or in different phases of a product

00:04:23,520 --> 00:04:27,440
life cycle

00:04:25,280 --> 00:04:29,919
for example during the development cycle

00:04:27,440 --> 00:04:32,080
the the production cycle or the user

00:04:29,919 --> 00:04:35,280
cipher

00:04:32,080 --> 00:04:36,880
of course we are not doing that alone we

00:04:35,280 --> 00:04:39,280
typically have partners in these

00:04:36,880 --> 00:04:42,400
projects and this is a short

00:04:39,280 --> 00:04:45,440
overview of our partners not

00:04:42,400 --> 00:04:48,160
only consisting of i would say

00:04:45,440 --> 00:04:48,960
typically manufacturers like bmw or

00:04:48,160 --> 00:04:53,120
airbus

00:04:48,960 --> 00:04:54,840
but also digitalizers like siemens and

00:04:53,120 --> 00:04:57,520
bosch and also

00:04:54,840 --> 00:05:00,800
aws for example for cloud

00:04:57,520 --> 00:05:02,479
as a cloud provider well i'm not here to

00:05:00,800 --> 00:05:05,039
talk about the international

00:05:02,479 --> 00:05:06,320
production i'm here to talk about why do

00:05:05,039 --> 00:05:08,840
we need kubernetes

00:05:06,320 --> 00:05:12,880
for laser manufacturing systems or

00:05:08,840 --> 00:05:12,880
manufacturing systems in general

00:05:14,720 --> 00:05:20,000
so first of all what is

00:05:18,000 --> 00:05:21,280
our laser manufacturing system i'm

00:05:20,000 --> 00:05:24,080
typically working with

00:05:21,280 --> 00:05:24,720
ultra short pulse manufacturing systems

00:05:24,080 --> 00:05:27,360
these

00:05:24,720 --> 00:05:28,960
look typically in an abstracted way a

00:05:27,360 --> 00:05:30,240
little bit like that you have some kind

00:05:28,960 --> 00:05:32,960
of laser source

00:05:30,240 --> 00:05:33,840
that shoots from the side in a scanner

00:05:32,960 --> 00:05:36,880
system

00:05:33,840 --> 00:05:38,800
and this scanner systems basically

00:05:36,880 --> 00:05:41,360
consists of two little mirrors

00:05:38,800 --> 00:05:42,639
that can be moved by a for example an

00:05:41,360 --> 00:05:46,639
fpga system

00:05:42,639 --> 00:05:49,600
to um then locate or to place

00:05:46,639 --> 00:05:50,479
the laser light exactly on some kind of

00:05:49,600 --> 00:05:53,520
substrate or

00:05:50,479 --> 00:05:54,080
on a metal plate and then where the

00:05:53,520 --> 00:05:58,000
laser

00:05:54,080 --> 00:06:00,240
hits the the metal gets vaporized

00:05:58,000 --> 00:06:01,120
normally you do this with really really

00:06:00,240 --> 00:06:03,600
short pulses

00:06:01,120 --> 00:06:04,639
so you just vaporize a little bit each

00:06:03,600 --> 00:06:06,960
time and

00:06:04,639 --> 00:06:07,840
the idea here is to to vaporize it so

00:06:06,960 --> 00:06:10,960
fast that

00:06:07,840 --> 00:06:11,280
the whole plate doesn't get hot and with

00:06:10,960 --> 00:06:13,759
the

00:06:11,280 --> 00:06:14,319
mirrors you can basically move the laser

00:06:13,759 --> 00:06:18,479
beam

00:06:14,319 --> 00:06:20,720
really fast in a predicted path

00:06:18,479 --> 00:06:22,560
and by that you can create really fancy

00:06:20,720 --> 00:06:24,160
structures

00:06:22,560 --> 00:06:26,000
as you can see here on the right side

00:06:24,160 --> 00:06:27,919
for example you can see

00:06:26,000 --> 00:06:30,319
for example filtration holes that you

00:06:27,919 --> 00:06:34,240
can shoot into

00:06:30,319 --> 00:06:37,520
into a metal surface or also a

00:06:34,240 --> 00:06:38,479
leather surface that got shot on a metal

00:06:37,520 --> 00:06:41,120
surface

00:06:38,479 --> 00:06:42,960
and as you can imagine um because the

00:06:41,120 --> 00:06:45,600
beam is moving so fast

00:06:42,960 --> 00:06:46,240
a lot of stuff can go wrong so we

00:06:45,600 --> 00:06:49,039
typically

00:06:46,240 --> 00:06:50,000
include sensor systems into that process

00:06:49,039 --> 00:06:54,000
for example

00:06:50,000 --> 00:06:57,440
video observation systems to observe

00:06:54,000 --> 00:06:59,840
the the process status um

00:06:57,440 --> 00:07:01,599
one quick example would be the

00:06:59,840 --> 00:07:03,599
filtration system here on the right you

00:07:01,599 --> 00:07:04,240
want to make sure that every hole you

00:07:03,599 --> 00:07:07,520
shoot

00:07:04,240 --> 00:07:11,039
is actually a hole and not maybe

00:07:07,520 --> 00:07:13,199
still closed for example and you can

00:07:11,039 --> 00:07:14,080
pretty easily write an algorithm which

00:07:13,199 --> 00:07:17,120
analyzes

00:07:14,080 --> 00:07:18,639
video data which actually detects if the

00:07:17,120 --> 00:07:21,599
whole is not true

00:07:18,639 --> 00:07:22,479
um and by that of course you can you can

00:07:21,599 --> 00:07:25,919
gain

00:07:22,479 --> 00:07:28,080
uh access or you can gain um

00:07:25,919 --> 00:07:30,240
more knowledge about the the process

00:07:28,080 --> 00:07:32,319
itself and you know how well it was done

00:07:30,240 --> 00:07:33,360
and so on and you can make quality

00:07:32,319 --> 00:07:36,479
predictions

00:07:33,360 --> 00:07:39,840
uh during the

00:07:36,479 --> 00:07:42,720
during the process the problem

00:07:39,840 --> 00:07:44,400
we ran into when you want to basically

00:07:42,720 --> 00:07:47,199
connect so many sensors

00:07:44,400 --> 00:07:47,520
onto the systems like that is that we

00:07:47,199 --> 00:07:50,960
have

00:07:47,520 --> 00:07:53,759
way too much data the laser beam

00:07:50,960 --> 00:07:54,879
of the scanner system typically moves

00:07:53,759 --> 00:07:58,000
around about

00:07:54,879 --> 00:07:58,479
three to four meters per second so you

00:07:58,000 --> 00:08:01,039
need

00:07:58,479 --> 00:08:02,879
really high frequent data acquisition

00:08:01,039 --> 00:08:06,160
systems to actually keep

00:08:02,879 --> 00:08:06,879
track with that um a typical camera

00:08:06,160 --> 00:08:11,680
system

00:08:06,879 --> 00:08:13,120
is around about 1 000 pictures per

00:08:11,680 --> 00:08:15,440
second

00:08:13,120 --> 00:08:16,800
up to 15 000 pictures per second and

00:08:15,440 --> 00:08:20,319
that's just

00:08:16,800 --> 00:08:22,960
way way way too much uh for

00:08:20,319 --> 00:08:24,319
what is it's barely enough that one

00:08:22,960 --> 00:08:25,840
system can handle that

00:08:24,319 --> 00:08:27,919
so what you end up with is with the

00:08:25,840 --> 00:08:31,440
following setup is

00:08:27,919 --> 00:08:34,399
this is from our lab um that you have

00:08:31,440 --> 00:08:35,120
multiple laptops multiple machines

00:08:34,399 --> 00:08:38,159
connected

00:08:35,120 --> 00:08:40,080
to one laser system here so you can see

00:08:38,159 --> 00:08:42,080
here one of these laser systems

00:08:40,080 --> 00:08:44,159
and the laser beam getting guided in

00:08:42,080 --> 00:08:46,240
here through this fiber

00:08:44,159 --> 00:08:48,480
then you have a camera system here you

00:08:46,240 --> 00:08:50,399
have another camera system up here

00:08:48,480 --> 00:08:52,160
you have a microphone here and then you

00:08:50,399 --> 00:08:54,560
have all these different computers

00:08:52,160 --> 00:08:58,399
connected to these different sensors and

00:08:54,560 --> 00:09:00,720
to the scanner system into the laser

00:08:58,399 --> 00:09:03,920
which are responsible for aggregating

00:09:00,720 --> 00:09:08,000
the data and controlling the system

00:09:03,920 --> 00:09:10,959
and normally the problem we run into of

00:09:08,000 --> 00:09:12,080
course is how do you handle that kind of

00:09:10,959 --> 00:09:15,200
workflow

00:09:12,080 --> 00:09:18,320
uh what we started with was

00:09:15,200 --> 00:09:20,160
a workflow where we ran around

00:09:18,320 --> 00:09:22,080
in the lab and were shouting at each

00:09:20,160 --> 00:09:22,880
other something like okay i just turned

00:09:22,080 --> 00:09:24,800
on the camera

00:09:22,880 --> 00:09:26,240
and then the next one said oh yeah i

00:09:24,800 --> 00:09:28,160
turned on the microphone

00:09:26,240 --> 00:09:30,160
and then we were like okay now i can

00:09:28,160 --> 00:09:34,000
actually shoot on

00:09:30,160 --> 00:09:34,000
my my substrate with a laser beam

00:09:34,080 --> 00:09:37,680
that's basically the scientific work we

00:09:37,120 --> 00:09:40,959
did

00:09:37,680 --> 00:09:42,880
um which of course was pretty error

00:09:40,959 --> 00:09:43,279
prone because a lot of stuff can go

00:09:42,880 --> 00:09:46,720
wrong

00:09:43,279 --> 00:09:48,959
somebody can like i don't know

00:09:46,720 --> 00:09:50,560
accidentally not start the camera system

00:09:48,959 --> 00:09:53,200
or accidentally

00:09:50,560 --> 00:09:55,360
name it differently and so on so it was

00:09:53,200 --> 00:09:59,680
really hard to to handle that

00:09:55,360 --> 00:10:02,720
data and to to set up

00:09:59,680 --> 00:10:04,399
a reliable experiment with that

00:10:02,720 --> 00:10:06,240
so the idea was now okay we need some

00:10:04,399 --> 00:10:07,680
kind of system which bundles all of that

00:10:06,240 --> 00:10:10,720
together and

00:10:07,680 --> 00:10:13,040
we had some ideas and then we

00:10:10,720 --> 00:10:14,079
thought okay let's try microservices

00:10:13,040 --> 00:10:15,680
because

00:10:14,079 --> 00:10:18,160
first of all they are distributed

00:10:15,680 --> 00:10:21,600
anyways and second of all we can

00:10:18,160 --> 00:10:23,279
go completely on a network system on or

00:10:21,600 --> 00:10:26,480
we can rely on a network

00:10:23,279 --> 00:10:28,480
and make it really really play

00:10:26,480 --> 00:10:33,120
basically

00:10:28,480 --> 00:10:33,760
so um the the most critical problems we

00:10:33,120 --> 00:10:37,440
wanted to

00:10:33,760 --> 00:10:38,640
focus on were in the first hand how can

00:10:37,440 --> 00:10:41,120
we actually integrate

00:10:38,640 --> 00:10:42,240
into industrial communication protocols

00:10:41,120 --> 00:10:44,959
like modbus or

00:10:42,240 --> 00:10:46,480
vcua into a microservice based

00:10:44,959 --> 00:10:49,519
architecture

00:10:46,480 --> 00:10:51,680
also how can i actually store

00:10:49,519 --> 00:10:52,959
all my sensor data automatically because

00:10:51,680 --> 00:10:57,040
that was one of

00:10:52,959 --> 00:11:00,160
our biggest pain points

00:10:57,040 --> 00:11:02,320
it was just eating so much time that we

00:11:00,160 --> 00:11:05,120
had to handle the data manually

00:11:02,320 --> 00:11:06,079
and last but not least we wanted to make

00:11:05,120 --> 00:11:09,120
the whole thing as

00:11:06,079 --> 00:11:11,760
extensible um so the idea here is

00:11:09,120 --> 00:11:12,640
how can i add more actuators or sensors

00:11:11,760 --> 00:11:15,200
later on

00:11:12,640 --> 00:11:17,440
without influencing the system so too

00:11:15,200 --> 00:11:17,440
much

00:11:17,519 --> 00:11:23,920
um yeah so that's pretty much the

00:11:20,880 --> 00:11:26,560
the motivation of harvard system

00:11:23,920 --> 00:11:27,360
uh that's where we come from now a

00:11:26,560 --> 00:11:28,880
little bit about

00:11:27,360 --> 00:11:31,360
the architecture and the current labs

00:11:28,880 --> 00:11:34,160
about we have at the moment

00:11:31,360 --> 00:11:36,240
um we started with a really really

00:11:34,160 --> 00:11:37,360
general architecture so we said okay

00:11:36,240 --> 00:11:39,440
cool we have now

00:11:37,360 --> 00:11:41,680
all these different services we want

00:11:39,440 --> 00:11:43,440
these different services we want one

00:11:41,680 --> 00:11:44,880
service that controls the scanner we

00:11:43,440 --> 00:11:47,680
want one that does

00:11:44,880 --> 00:11:48,320
the sensor and we want for example also

00:11:47,680 --> 00:11:51,600
something

00:11:48,320 --> 00:11:54,720
that analyzes our sensor data

00:11:51,600 --> 00:11:56,240
um as i said for example the example

00:11:54,720 --> 00:12:00,079
with a

00:11:56,240 --> 00:12:01,920
shooting a hole in a metal plate

00:12:00,079 --> 00:12:03,839
and we want to make sure that this hole

00:12:01,920 --> 00:12:06,560
is actually shot through

00:12:03,839 --> 00:12:07,279
so we need some kind of analytics

00:12:06,560 --> 00:12:09,600
service which

00:12:07,279 --> 00:12:11,120
takes a picture takes a looks on the

00:12:09,600 --> 00:12:13,440
picture and then tells

00:12:11,120 --> 00:12:14,720
us okay where are the holes in the

00:12:13,440 --> 00:12:18,160
picture and do we

00:12:14,720 --> 00:12:20,880
maybe we run or need to rerun

00:12:18,160 --> 00:12:22,839
the process or the laser beam on that

00:12:20,880 --> 00:12:25,440
specific

00:12:22,839 --> 00:12:28,160
point um

00:12:25,440 --> 00:12:28,959
so the idea here was okay we we kind of

00:12:28,160 --> 00:12:31,600
like

00:12:28,959 --> 00:12:33,279
put the analytics service in its own

00:12:31,600 --> 00:12:35,680
bubble in its own container

00:12:33,279 --> 00:12:37,200
and by there therefore we can basically

00:12:35,680 --> 00:12:39,040
move it out of the system and then we

00:12:37,200 --> 00:12:39,519
have some kind of job controller in the

00:12:39,040 --> 00:12:42,160
middle

00:12:39,519 --> 00:12:43,760
right here which connects all of these

00:12:42,160 --> 00:12:46,000
different parts

00:12:43,760 --> 00:12:47,360
and has the complete execution logic

00:12:46,000 --> 00:12:49,680
bundle inside of it

00:12:47,360 --> 00:12:51,600
and of course when you need some kind of

00:12:49,680 --> 00:12:53,200
job controller you need a job spawner

00:12:51,600 --> 00:12:56,320
and some kind of user interface to

00:12:53,200 --> 00:12:58,560
actually handle all of that

00:12:56,320 --> 00:13:00,399
if you now map that to our laser system

00:12:58,560 --> 00:13:02,000
again

00:13:00,399 --> 00:13:04,240
to answer the question of how do we

00:13:02,000 --> 00:13:07,399
integrate different protocols

00:13:04,240 --> 00:13:10,480
is we came up with our three first

00:13:07,399 --> 00:13:13,120
container-based images um

00:13:10,480 --> 00:13:14,639
with a movement service a camera service

00:13:13,120 --> 00:13:17,440
and a scanner service

00:13:14,639 --> 00:13:18,240
and all these different services can

00:13:17,440 --> 00:13:21,360
talk to

00:13:18,240 --> 00:13:22,880
different can talk different apis so the

00:13:21,360 --> 00:13:23,760
movement service for example can talk

00:13:22,880 --> 00:13:25,360
modbus

00:13:23,760 --> 00:13:28,160
but doesn't really matter anymore

00:13:25,360 --> 00:13:30,880
because we are using grpc to control

00:13:28,160 --> 00:13:33,760
the movement so we have a standardized

00:13:30,880 --> 00:13:36,160
way of talking to hardware

00:13:33,760 --> 00:13:37,440
which then gets translated into another

00:13:36,160 --> 00:13:38,959
protocol

00:13:37,440 --> 00:13:41,600
we also have for example the camera

00:13:38,959 --> 00:13:45,760
service which talks some kind of usb

00:13:41,600 --> 00:13:47,600
api shenanigans and then we have a

00:13:45,760 --> 00:13:50,160
scanner service which we can also

00:13:47,600 --> 00:13:53,279
control via jrpc

00:13:50,160 --> 00:13:54,079
which connects to our fpga system and

00:13:53,279 --> 00:13:56,800
then tells

00:13:54,079 --> 00:13:58,560
basically the the mirrors and the laser

00:13:56,800 --> 00:14:02,000
beam

00:13:58,560 --> 00:14:04,560
what to do and uh this works

00:14:02,000 --> 00:14:05,519
really good because uh we have now our

00:14:04,560 --> 00:14:08,560
scanner services

00:14:05,519 --> 00:14:09,839
we designed them stateless so when they

00:14:08,560 --> 00:14:12,000
come up

00:14:09,839 --> 00:14:13,279
we know that they are already configured

00:14:12,000 --> 00:14:16,800
they are already honed

00:14:13,279 --> 00:14:17,519
they are already um well basically ready

00:14:16,800 --> 00:14:19,279
to go

00:14:17,519 --> 00:14:20,800
and the user of that system doesn't need

00:14:19,279 --> 00:14:24,560
to worry about it anymore

00:14:20,800 --> 00:14:25,279
it just sends a signal like move from a

00:14:24,560 --> 00:14:27,920
point a

00:14:25,279 --> 00:14:28,959
to point b to the movement system and

00:14:27,920 --> 00:14:32,800
the movement system

00:14:28,959 --> 00:14:33,680
does that um same for for the laser

00:14:32,800 --> 00:14:36,079
system you just

00:14:33,680 --> 00:14:36,800
send the laser system basically a

00:14:36,079 --> 00:14:39,279
drawing

00:14:36,800 --> 00:14:40,000
for example you want to to to shoot a

00:14:39,279 --> 00:14:41,600
square

00:14:40,000 --> 00:14:43,680
and you just give it basically the

00:14:41,600 --> 00:14:45,839
vector a list of that square

00:14:43,680 --> 00:14:48,079
and the laser service or the scanner

00:14:45,839 --> 00:14:52,240
service will make sure that this square

00:14:48,079 --> 00:14:54,320
will just be shot onto the surface

00:14:52,240 --> 00:14:56,399
and the job controller is then just

00:14:54,320 --> 00:14:57,040
basically shifting around all of the

00:14:56,399 --> 00:14:58,720
different

00:14:57,040 --> 00:15:01,519
information between all of these

00:14:58,720 --> 00:15:01,519
different services

00:15:01,680 --> 00:15:05,279
um so that was basically part one how do

00:15:04,639 --> 00:15:07,440
we

00:15:05,279 --> 00:15:08,800
can oh how can we can we manage

00:15:07,440 --> 00:15:10,959
different

00:15:08,800 --> 00:15:12,320
hardware protocols well basically we

00:15:10,959 --> 00:15:14,560
introduce a

00:15:12,320 --> 00:15:16,880
new layer of abstraction by using for

00:15:14,560 --> 00:15:19,040
example grpc

00:15:16,880 --> 00:15:21,279
of course rest could work as well but we

00:15:19,040 --> 00:15:23,600
wanted a protocol which is

00:15:21,279 --> 00:15:24,639
binary because of the high throughput we

00:15:23,600 --> 00:15:28,480
had

00:15:24,639 --> 00:15:31,600
so we decided on grpc for example

00:15:28,480 --> 00:15:32,800
um the next question we had is how can

00:15:31,600 --> 00:15:35,680
we actually store

00:15:32,800 --> 00:15:36,480
our data automatically for that we need

00:15:35,680 --> 00:15:38,720
to take a look

00:15:36,480 --> 00:15:40,720
a little bit deeper into the the

00:15:38,720 --> 00:15:42,639
services that we created

00:15:40,720 --> 00:15:45,680
uh so we're gonna focus for example on

00:15:42,639 --> 00:15:49,040
one of these hardware controllers now

00:15:45,680 --> 00:15:51,680
and um we came up with the following

00:15:49,040 --> 00:15:52,839
uh structure so the idea was okay we

00:15:51,680 --> 00:15:56,160
have our

00:15:52,839 --> 00:15:59,680
our hardware adapter basically

00:15:56,160 --> 00:16:02,720
which controls our hardware so

00:15:59,680 --> 00:16:03,120
we have some kind of scanner system from

00:16:02,720 --> 00:16:06,800
one

00:16:03,120 --> 00:16:09,920
vendor and we make a grpc

00:16:06,800 --> 00:16:11,279
interface right in front of that so that

00:16:09,920 --> 00:16:14,320
we can control this

00:16:11,279 --> 00:16:15,920
system directly via a network call

00:16:14,320 --> 00:16:18,000
and we put the whole thing in a docker

00:16:15,920 --> 00:16:20,079
container and we then

00:16:18,000 --> 00:16:21,279
introduce the so-called service

00:16:20,079 --> 00:16:24,959
controller

00:16:21,279 --> 00:16:28,240
which basically proxies

00:16:24,959 --> 00:16:31,360
the the incoming client call

00:16:28,240 --> 00:16:34,160
to the hardware adapter so

00:16:31,360 --> 00:16:36,079
what happens is a user connects to our

00:16:34,160 --> 00:16:40,079
scanner service and says hey scanner

00:16:36,079 --> 00:16:42,160
please shoot one point

00:16:40,079 --> 00:16:43,199
and this the service controller takes

00:16:42,160 --> 00:16:45,279
this request

00:16:43,199 --> 00:16:46,560
sends it down to the hardware controller

00:16:45,279 --> 00:16:48,800
the hardware controller

00:16:46,560 --> 00:16:50,160
shoots one point and then goes to the

00:16:48,800 --> 00:16:52,800
service controller and says hey

00:16:50,160 --> 00:16:54,639
okay i just did that and the service

00:16:52,800 --> 00:16:58,160
controller will then

00:16:54,639 --> 00:17:01,440
save the call and the answer

00:16:58,160 --> 00:17:04,720
of the hardware into a database

00:17:01,440 --> 00:17:06,720
and make it basically lock itself

00:17:04,720 --> 00:17:08,079
so it's basically a really simple

00:17:06,720 --> 00:17:11,679
locking mechanism

00:17:08,079 --> 00:17:14,959
um of course this is pretty boring for

00:17:11,679 --> 00:17:15,360
for for actuators but for sensors it

00:17:14,959 --> 00:17:17,039
gets

00:17:15,360 --> 00:17:18,799
very very interesting because you can

00:17:17,039 --> 00:17:20,079
say something like hey camera please

00:17:18,799 --> 00:17:22,640
take a picture

00:17:20,079 --> 00:17:24,559
then the picture gets taken and then you

00:17:22,640 --> 00:17:28,559
save it into your database

00:17:24,559 --> 00:17:31,440
and um you just hand over the

00:17:28,559 --> 00:17:33,840
url back to the to the client and say

00:17:31,440 --> 00:17:36,160
hey i just took that picture for you

00:17:33,840 --> 00:17:38,000
if you want to take a look on it just

00:17:36,160 --> 00:17:40,720
get it whenever you want and whenever

00:17:38,000 --> 00:17:40,720
you want to get it

00:17:40,880 --> 00:17:44,320
so the nice part about that is that

00:17:43,280 --> 00:17:47,600
everything you do

00:17:44,320 --> 00:17:49,679
is getting locked and saved and since we

00:17:47,600 --> 00:17:52,000
put everything in containers so we have

00:17:49,679 --> 00:17:54,080
one container for our service db we have

00:17:52,000 --> 00:17:55,840
one container for our service controller

00:17:54,080 --> 00:17:57,280
we have one container for our hardware

00:17:55,840 --> 00:18:00,880
adapter we can

00:17:57,280 --> 00:18:04,720
put or use config maps to configure that

00:18:00,880 --> 00:18:07,679
and we have some kind of automatic

00:18:04,720 --> 00:18:08,640
configuration management which can of

00:18:07,679 --> 00:18:11,840
course

00:18:08,640 --> 00:18:12,720
which kubernetes luckily already

00:18:11,840 --> 00:18:15,200
provides

00:18:12,720 --> 00:18:16,640
so we don't need to worry about how to

00:18:15,200 --> 00:18:19,600
handle configuration

00:18:16,640 --> 00:18:19,600
in the system anymore

00:18:20,480 --> 00:18:26,240
so well what we ended up with

00:18:23,520 --> 00:18:26,960
in the end was basically a kubernetes

00:18:26,240 --> 00:18:30,000
cluster

00:18:26,960 --> 00:18:34,000
which spans not only from

00:18:30,000 --> 00:18:37,039
um into a data center on a shop floor

00:18:34,000 --> 00:18:40,240
but also spans onto the edge directly

00:18:37,039 --> 00:18:40,240
next to the machine so

00:18:40,320 --> 00:18:43,520
what we can see here is that our edge is

00:18:42,720 --> 00:18:47,039
basically

00:18:43,520 --> 00:18:50,880
the the computer or the the

00:18:47,039 --> 00:18:53,200
server sitting or directly controlling

00:18:50,880 --> 00:18:55,280
the laser beam on directly controlling

00:18:53,200 --> 00:18:58,880
for example the camera system

00:18:55,280 --> 00:19:01,760
um of course since we are

00:18:58,880 --> 00:19:02,720
in a manufacturing environment we can go

00:19:01,760 --> 00:19:05,840
pretty

00:19:02,720 --> 00:19:07,919
we we can buy pretty uh

00:19:05,840 --> 00:19:08,960
large systems here so these are normally

00:19:07,919 --> 00:19:11,760
not i don't know

00:19:08,960 --> 00:19:13,600
jetsons or raspberry pies but we buy

00:19:11,760 --> 00:19:16,960
real server-grade stuff

00:19:13,600 --> 00:19:20,960
because uh we have enough

00:19:16,960 --> 00:19:22,320
um internet connection and we can also

00:19:20,960 --> 00:19:24,400
provide enough energy

00:19:22,320 --> 00:19:25,600
because our laser system already needs

00:19:24,400 --> 00:19:28,640
energy so we can just

00:19:25,600 --> 00:19:31,679
leverage that um but we can also

00:19:28,640 --> 00:19:33,840
uh use or connect it directly via

00:19:31,679 --> 00:19:35,360
kubernetes with our data center

00:19:33,840 --> 00:19:37,760
uh where we have multiple servers

00:19:35,360 --> 00:19:38,160
running and the nice part now is that

00:19:37,760 --> 00:19:41,200
the

00:19:38,160 --> 00:19:44,000
the picture i just showed you

00:19:41,200 --> 00:19:44,480
this we can because of kubernetes we can

00:19:44,000 --> 00:19:46,720
shift

00:19:44,480 --> 00:19:48,160
all of these containers around so we can

00:19:46,720 --> 00:19:50,480
say okay cool

00:19:48,160 --> 00:19:52,240
i have a camera system which produces 15

00:19:50,480 --> 00:19:54,559
000 pictures per second i

00:19:52,240 --> 00:19:56,080
probably need the database pretty close

00:19:54,559 --> 00:19:58,799
to the to the

00:19:56,080 --> 00:19:59,120
manufacturing system in order to to even

00:19:58,799 --> 00:20:02,400
be

00:19:59,120 --> 00:20:04,559
able to save that into a database while

00:20:02,400 --> 00:20:06,000
with other services you can like decide

00:20:04,559 --> 00:20:08,320
okay maybe it's not that

00:20:06,000 --> 00:20:09,520
important maybe i don't want the hassle

00:20:08,320 --> 00:20:11,600
of actually

00:20:09,520 --> 00:20:13,600
having that kind of database right next

00:20:11,600 --> 00:20:14,720
to that i can put it into the cloud for

00:20:13,600 --> 00:20:17,120
example

00:20:14,720 --> 00:20:18,159
and that is really nice about kubernetes

00:20:17,120 --> 00:20:20,960
it gives us

00:20:18,159 --> 00:20:22,559
the flexibility of shifting all of that

00:20:20,960 --> 00:20:23,520
around and see what actually is

00:20:22,559 --> 00:20:28,000
happening and

00:20:23,520 --> 00:20:31,679
design your system that you that you can

00:20:28,000 --> 00:20:34,000
can very flexible um

00:20:31,679 --> 00:20:34,799
change depending on the data stream

00:20:34,000 --> 00:20:37,760
you're using

00:20:34,799 --> 00:20:38,720
so you can plug in a new camera system

00:20:37,760 --> 00:20:40,640
which produces

00:20:38,720 --> 00:20:42,480
a lot more data and then you say oh cool

00:20:40,640 --> 00:20:42,960
i just need a database right next to it

00:20:42,480 --> 00:20:46,559
damn

00:20:42,960 --> 00:20:49,520
there so that's really really

00:20:46,559 --> 00:20:50,720
nice and later when your process for

00:20:49,520 --> 00:20:53,120
example is not running

00:20:50,720 --> 00:20:55,039
you can then decide okay maybe i migrate

00:20:53,120 --> 00:20:57,280
now my database

00:20:55,039 --> 00:20:58,159
from that edge node for example into the

00:20:57,280 --> 00:21:00,240
data center

00:20:58,159 --> 00:21:03,840
but then it's not time critical anymore

00:21:00,240 --> 00:21:03,840
indicate it can take longer

00:21:04,320 --> 00:21:08,960
okay coming uh to the good the bat and

00:21:06,559 --> 00:21:12,000
the ugly um

00:21:08,960 --> 00:21:14,080
well uh the good is uh we have a ci

00:21:12,000 --> 00:21:16,159
for our manufacturing system that's

00:21:14,080 --> 00:21:18,080
really really nice because we went

00:21:16,159 --> 00:21:19,760
full container on that so we can now

00:21:18,080 --> 00:21:22,960
just build deploy

00:21:19,760 --> 00:21:25,120
and uh push all of our stuff directly

00:21:22,960 --> 00:21:28,640
onto the manufacturing system

00:21:25,120 --> 00:21:31,360
uh we have uh automatic sensor data

00:21:28,640 --> 00:21:35,200
acquisition with high support

00:21:31,360 --> 00:21:36,880
which is also really really nice to have

00:21:35,200 --> 00:21:39,600
because before that we had to handle

00:21:36,880 --> 00:21:41,200
that by hand basically

00:21:39,600 --> 00:21:42,960
because of kubernetes we have a single

00:21:41,200 --> 00:21:43,440
point of truth for configuration because

00:21:42,960 --> 00:21:46,080
we use

00:21:43,440 --> 00:21:46,799
conflict maps for everything and that is

00:21:46,080 --> 00:21:49,200
really nice

00:21:46,799 --> 00:21:51,360
especially from a scientific point of

00:21:49,200 --> 00:21:52,480
view because we know what's going on we

00:21:51,360 --> 00:21:55,600
can roll back

00:21:52,480 --> 00:21:56,240
if somebody changes some kind of i don't

00:21:55,600 --> 00:21:59,600
know

00:21:56,240 --> 00:22:00,880
frame rate or the the the i don't know

00:21:59,600 --> 00:22:05,039
acceleration of the

00:22:00,880 --> 00:22:08,320
of the movement uh service we see that

00:22:05,039 --> 00:22:10,960
and we can use git to versionize it uh

00:22:08,320 --> 00:22:12,080
by the use of grpc we actually prevented

00:22:10,960 --> 00:22:15,919
a vendor login

00:22:12,080 --> 00:22:19,760
so the system i just showed you

00:22:15,919 --> 00:22:20,799
works on i think right now three or four

00:22:19,760 --> 00:22:24,000
different

00:22:20,799 --> 00:22:26,720
movement manufacturers and also on

00:22:24,000 --> 00:22:28,960
two different scanner laser

00:22:26,720 --> 00:22:31,919
manufacturers

00:22:28,960 --> 00:22:33,440
and it's also scalable to probably a few

00:22:31,919 --> 00:22:35,679
thousand of nodes so you could

00:22:33,440 --> 00:22:37,200
run your complete shop floor with that

00:22:35,679 --> 00:22:40,720
and you also get

00:22:37,200 --> 00:22:44,320
remote control uh which wasn't

00:22:40,720 --> 00:22:48,159
a thing till now at our institute

00:22:44,320 --> 00:22:50,240
um which brings me directly to that

00:22:48,159 --> 00:22:52,080
well you get remote control so of course

00:22:50,240 --> 00:22:53,120
since we are now completely network

00:22:52,080 --> 00:22:57,679
based

00:22:53,120 --> 00:23:00,240
we open up for hackers and so on so but

00:22:57,679 --> 00:23:00,799
yeah kubernetes is i think a very nice

00:23:00,240 --> 00:23:04,400
system

00:23:00,799 --> 00:23:04,799
to to to handle that uh it gives you a

00:23:04,400 --> 00:23:06,720
lot

00:23:04,799 --> 00:23:08,320
more overview of what is actually going

00:23:06,720 --> 00:23:11,280
on but still

00:23:08,320 --> 00:23:12,080
like we are running a laser system in

00:23:11,280 --> 00:23:15,360
the network

00:23:12,080 --> 00:23:16,480
so yeah we have a little bit of risk

00:23:15,360 --> 00:23:19,280
here

00:23:16,480 --> 00:23:19,600
and this is especially a problem when

00:23:19,280 --> 00:23:21,440
you

00:23:19,600 --> 00:23:23,600
when you take in consideration user

00:23:21,440 --> 00:23:28,080
management and and

00:23:23,600 --> 00:23:31,760
safety stuff if anybody knows

00:23:28,080 --> 00:23:34,559
of some kind of way of authorizing

00:23:31,760 --> 00:23:35,520
or some kind of way of proximity based

00:23:34,559 --> 00:23:38,159
authorization

00:23:35,520 --> 00:23:40,720
please give me a call i'm really really

00:23:38,159 --> 00:23:43,039
interested in that

00:23:40,720 --> 00:23:44,559
and of course one of the larger problems

00:23:43,039 --> 00:23:46,799
we have is

00:23:44,559 --> 00:23:48,000
that we have now a distributed state

00:23:46,799 --> 00:23:50,720
management which makes

00:23:48,000 --> 00:23:51,039
stuff a lot more complicated normally we

00:23:50,720 --> 00:23:53,520
had

00:23:51,039 --> 00:23:56,159
one machine one machine or one machine

00:23:53,520 --> 00:23:59,919
connected to multiple

00:23:56,159 --> 00:24:01,120
things that's way way way easier to

00:23:59,919 --> 00:24:05,200
handle than

00:24:01,120 --> 00:24:08,799
multiple machines in a network which is

00:24:05,200 --> 00:24:11,279
running unreliable okay the ugly

00:24:08,799 --> 00:24:12,400
um well you run into a lot of

00:24:11,279 --> 00:24:15,039
concurrency problems through

00:24:12,400 --> 00:24:18,559
microservices

00:24:15,039 --> 00:24:21,679
that you don't have to handle before

00:24:18,559 --> 00:24:24,720
when you're not using microservices also

00:24:21,679 --> 00:24:26,640
industrial protocols are pain in the

00:24:24,720 --> 00:24:29,279
butt

00:24:26,640 --> 00:24:30,880
it's just crazy how complicated

00:24:29,279 --> 00:24:34,120
industrial protocols is

00:24:30,880 --> 00:24:36,960
also most of our hardware is still

00:24:34,120 --> 00:24:39,600
windows-based we are currently picking a

00:24:36,960 --> 00:24:43,679
lot of linux stuff

00:24:39,600 --> 00:24:45,919
but a lot of that is still windows-based

00:24:43,679 --> 00:24:47,120
i see the whole industry is a little bit

00:24:45,919 --> 00:24:50,320
shifting but

00:24:47,120 --> 00:24:50,799
it's still a lot of windows which isn't

00:24:50,320 --> 00:24:54,159
that

00:24:50,799 --> 00:24:55,600
good for humanities and we have finally

00:24:54,159 --> 00:24:58,080
automatic testing

00:24:55,600 --> 00:25:00,960
so we can test our machines

00:24:58,080 --> 00:25:03,279
automatically pretty easily

00:25:00,960 --> 00:25:05,520
summary yeah um microservices for

00:25:03,279 --> 00:25:08,720
manufacturing are really really cool um

00:25:05,520 --> 00:25:10,799
it makes a lot of fun programming your

00:25:08,720 --> 00:25:12,159
manufacturing machines with that kind of

00:25:10,799 --> 00:25:14,559
architecture

00:25:12,159 --> 00:25:16,320
it's very very scalable and the

00:25:14,559 --> 00:25:18,559
manufacturer the management of your

00:25:16,320 --> 00:25:19,760
manufacturing machine parts become quite

00:25:18,559 --> 00:25:23,200
easily

00:25:19,760 --> 00:25:25,679
and it makes also gives you the

00:25:23,200 --> 00:25:29,600
possibilities that developers can hook

00:25:25,679 --> 00:25:31,919
into that system

00:25:29,600 --> 00:25:32,960
yeah that would be all from my side

00:25:31,919 --> 00:25:35,279
thanks for listening

00:25:32,960 --> 00:25:36,000
if you have more questions please send

00:25:35,279 --> 00:25:38,320
me an email

00:25:36,000 --> 00:25:39,039
or ask them directly in the question and

00:25:38,320 --> 00:25:41,520
answers

00:25:39,039 --> 00:25:42,080
directly after that also i would really

00:25:41,520 --> 00:25:45,679
really

00:25:42,080 --> 00:25:49,440
like the dfg um for sponsoring

00:25:45,679 --> 00:25:51,760
the scientific research uh

00:25:49,440 --> 00:25:53,520
via the internet of production uh

00:25:51,760 --> 00:25:54,400
without that i wouldn't probably be here

00:25:53,520 --> 00:25:57,440
today so

00:25:54,400 --> 00:26:01,679
thank you very much for that and

00:25:57,440 --> 00:26:01,679

YouTube URL: https://www.youtube.com/watch?v=WmG691gy59Q


