Title: Centralized, distributed or both? - Architectures for Kube... Gergely Csatari, Nokia & Ildikó Váncsa
Publication date: 2021-05-05
Playlist: Kubernetes on Edge Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Centralized, distributed or both? - Architectures for Kubernetes on the edge - Gergely Csatari, Nokia & Ildikó Váncsa, Open Infrastructure Foundation

Edge cloud environments are distributed systems that can be implemented in various ways depending on the use case. As edge computing has a broad spectrum, it opens up different architecture choices when Kubernetes is used in the solution. So which parts of Kubernetes should be deployed where? Do you always deploy all components on every site? Does that result in a too large footprint or not? How does it look like with the different cloud platforms that provide infrastructure? In this presentation we will highlight the challenges of different architecture options as well as the problems they solve. You will also learn how Kubernetes fits into the different use cases and architecture options they call for. We will also explore the relevant projects and activities in Kubernetes, such as KubeEdge, K3s, Metal3 and their findings in relation to architecture choices for edge deployments.
Captions: 
	00:00:00,560 --> 00:00:05,520
hi everyone and welcome to our session

00:00:03,679 --> 00:00:06,799
where we will talk about edge

00:00:05,520 --> 00:00:08,800
architectures

00:00:06,799 --> 00:00:10,480
my name is ildi kovancha i work as

00:00:08,800 --> 00:00:12,400
senior manager of community and

00:00:10,480 --> 00:00:13,440
ecosystem at the open infrastructure

00:00:12,400 --> 00:00:15,759
foundation

00:00:13,440 --> 00:00:18,080
and among other things i'm a big open

00:00:15,759 --> 00:00:21,359
source and edge computing enthusiast

00:00:18,080 --> 00:00:24,000
and i have a co-presenter today

00:00:21,359 --> 00:00:25,840
hi my name is greg chattari i'm working

00:00:24,000 --> 00:00:26,400
at the seminole open source specialist

00:00:25,840 --> 00:00:29,279
at

00:00:26,400 --> 00:00:30,240
nokia in the central open source program

00:00:29,279 --> 00:00:33,360
office

00:00:30,240 --> 00:00:35,360
and i'm also participating uh

00:00:33,360 --> 00:00:37,040
in several open source and edge

00:00:35,360 --> 00:00:40,719
activities

00:00:37,040 --> 00:00:40,719
mostly together the field eco

00:00:41,680 --> 00:00:49,360
hungarians rule the world yes

00:00:45,920 --> 00:00:50,320
and now let's jump into uh the middle of

00:00:49,360 --> 00:00:53,360
all this

00:00:50,320 --> 00:00:56,079
um so computing

00:00:53,360 --> 00:00:58,960
and there are a lot of debates out there

00:00:56,079 --> 00:01:02,079
about what edge computing and edge

00:00:58,960 --> 00:01:03,120
are so we will not join and deepen the

00:01:02,079 --> 00:01:06,159
debate here

00:01:03,120 --> 00:01:06,560
um i only wanted to just emphasize on

00:01:06,159 --> 00:01:09,439
that

00:01:06,560 --> 00:01:10,720
edge computing is part of an evolution

00:01:09,439 --> 00:01:13,760
path

00:01:10,720 --> 00:01:16,320
as we are kind of moving on from uh

00:01:13,760 --> 00:01:17,040
from cloud computing only and edge

00:01:16,320 --> 00:01:19,680
computing

00:01:17,040 --> 00:01:21,119
is making it possible to um to get the

00:01:19,680 --> 00:01:23,439
computing power

00:01:21,119 --> 00:01:25,680
out of the large data centers towards

00:01:23,439 --> 00:01:29,040
the edge and towards the end users

00:01:25,680 --> 00:01:31,600
let them be humans or machines and when

00:01:29,040 --> 00:01:33,680
it comes to edge computing

00:01:31,600 --> 00:01:35,360
a lot of people and organizations are

00:01:33,680 --> 00:01:37,439
focusing on the edge

00:01:35,360 --> 00:01:39,119
part of it because that is new it is

00:01:37,439 --> 00:01:40,240
exciting it has a lot of new

00:01:39,119 --> 00:01:42,880
opportunities

00:01:40,240 --> 00:01:43,840
and it also has a lot of new challenges

00:01:42,880 --> 00:01:47,200
to solve

00:01:43,840 --> 00:01:50,320
with a really small footprint

00:01:47,200 --> 00:01:52,399
um also with location and and

00:01:50,320 --> 00:01:53,040
circumstances that you all have to be

00:01:52,399 --> 00:01:56,880
aware of

00:01:53,040 --> 00:01:59,280
and plan for but edge is also

00:01:56,880 --> 00:02:01,040
always on the edge of something on the

00:01:59,280 --> 00:02:01,759
edge of the network on the edge of your

00:02:01,040 --> 00:02:05,360
system

00:02:01,759 --> 00:02:07,920
so it is always part of a larger

00:02:05,360 --> 00:02:09,840
ecosystem and architecture and that is

00:02:07,920 --> 00:02:12,160
what the opening for edge computing

00:02:09,840 --> 00:02:13,599
is focusing on the opening for edge

00:02:12,160 --> 00:02:15,040
computing group is a

00:02:13,599 --> 00:02:16,720
top-level working group that is

00:02:15,040 --> 00:02:17,680
supported by the open infrastructure

00:02:16,720 --> 00:02:21,360
foundation

00:02:17,680 --> 00:02:24,720
and we have a broad industry outreach

00:02:21,360 --> 00:02:27,200
and a focus on infrastructure

00:02:24,720 --> 00:02:28,319
software and what we are looking into

00:02:27,200 --> 00:02:30,720
really is

00:02:28,319 --> 00:02:31,599
the massively distributed systems that

00:02:30,720 --> 00:02:34,080
are behind

00:02:31,599 --> 00:02:36,160
edge computing use cases so really how

00:02:34,080 --> 00:02:38,879
it looks like from core to the edge

00:02:36,160 --> 00:02:40,560
edge to core or edge to edge in some

00:02:38,879 --> 00:02:44,080
cases

00:02:40,560 --> 00:02:45,200
the group is focusing on collecting use

00:02:44,080 --> 00:02:47,440
cases

00:02:45,200 --> 00:02:49,280
in the edge computing area to understand

00:02:47,440 --> 00:02:50,400
the requirements and challenges that

00:02:49,280 --> 00:02:54,000
they have

00:02:50,400 --> 00:02:55,200
and we are using these learnings to

00:02:54,000 --> 00:02:58,239
build

00:02:55,200 --> 00:02:59,519
reference architecture models to also

00:02:58,239 --> 00:03:02,319
help

00:02:59,519 --> 00:03:03,040
anyone out there who is trying to put

00:03:02,319 --> 00:03:04,959
together

00:03:03,040 --> 00:03:07,920
a solution for an edge computing use

00:03:04,959 --> 00:03:09,840
case regardless of industry segments

00:03:07,920 --> 00:03:12,159
or what kind of organization you're

00:03:09,840 --> 00:03:14,720
working for um

00:03:12,159 --> 00:03:16,640
so these architecture models are really

00:03:14,720 --> 00:03:19,599
there to to help the industry

00:03:16,640 --> 00:03:20,560
and also to identify gaps and and see

00:03:19,599 --> 00:03:22,239
what we should

00:03:20,560 --> 00:03:24,879
all working on in the open source

00:03:22,239 --> 00:03:28,319
ecosystem to fill those

00:03:24,879 --> 00:03:30,640
you can check out the group on the wiki

00:03:28,319 --> 00:03:32,959
the link is on the slide and also we

00:03:30,640 --> 00:03:35,120
publish two white papers so you can see

00:03:32,959 --> 00:03:36,720
all the exciting use cases that we've

00:03:35,120 --> 00:03:39,440
been working with

00:03:36,720 --> 00:03:39,840
that covers telecommunication retail and

00:03:39,440 --> 00:03:42,879
we

00:03:39,840 --> 00:03:45,920
even have a use case on how to

00:03:42,879 --> 00:03:47,519
modernize and automate shrimp farms so

00:03:45,920 --> 00:03:49,599
you can also find the

00:03:47,519 --> 00:03:50,799
links to the white papers on the side as

00:03:49,599 --> 00:03:53,200
well

00:03:50,799 --> 00:03:55,840
go and read them they are not very long

00:03:53,200 --> 00:03:59,439
but they are even more exciting

00:03:55,840 --> 00:04:03,439
and we can move to the next slide

00:03:59,439 --> 00:04:05,280
to take a deeper look at

00:04:03,439 --> 00:04:06,879
what we are talking about when we are

00:04:05,280 --> 00:04:11,840
talking about uh

00:04:06,879 --> 00:04:15,200
architecture models so um our learning

00:04:11,840 --> 00:04:16,560
is that there is no one-size-fits-all

00:04:15,200 --> 00:04:19,120
solution out there

00:04:16,560 --> 00:04:21,040
there is no one particular tool or one

00:04:19,120 --> 00:04:22,160
particular configuration that will work

00:04:21,040 --> 00:04:24,479
for everyone

00:04:22,160 --> 00:04:25,360
um i would think that is not coming as a

00:04:24,479 --> 00:04:28,560
surprise to you

00:04:25,360 --> 00:04:30,960
either so what to do

00:04:28,560 --> 00:04:33,360
uh when we are facing challenges like

00:04:30,960 --> 00:04:36,160
that that we have to prepare for

00:04:33,360 --> 00:04:37,520
um really multiple options a lot of

00:04:36,160 --> 00:04:40,560
requirements that are

00:04:37,520 --> 00:04:41,199
similar but still different so um the

00:04:40,560 --> 00:04:44,160
approach

00:04:41,199 --> 00:04:44,880
that the edge computing group has been

00:04:44,160 --> 00:04:48,160
taking

00:04:44,880 --> 00:04:49,040
is that we are looking into some crucial

00:04:48,160 --> 00:04:51,840
requirements

00:04:49,040 --> 00:04:52,400
that most of these use cases are sharing

00:04:51,840 --> 00:04:57,120
and

00:04:52,400 --> 00:04:59,759
our focus so far um was on connectivity

00:04:57,120 --> 00:05:01,680
so what happens when you're losing

00:04:59,759 --> 00:05:02,320
connection between the central data

00:05:01,680 --> 00:05:05,840
center

00:05:02,320 --> 00:05:08,000
and an edge site so it really depends on

00:05:05,840 --> 00:05:10,800
your use case

00:05:08,000 --> 00:05:11,360
in how you would like to approach that

00:05:10,800 --> 00:05:14,639
and

00:05:11,360 --> 00:05:17,840
in our learning there are really two

00:05:14,639 --> 00:05:18,320
big groups that we can put the use cases

00:05:17,840 --> 00:05:21,440
into

00:05:18,320 --> 00:05:23,600
which is how much autonomy you want your

00:05:21,440 --> 00:05:26,560
edge side to have

00:05:23,600 --> 00:05:27,919
and in that sense we came up with two

00:05:26,560 --> 00:05:29,759
models so far

00:05:27,919 --> 00:05:31,360
the centralized and the distributed

00:05:29,759 --> 00:05:33,840
control plane model

00:05:31,360 --> 00:05:36,080
and the two big difference between the

00:05:33,840 --> 00:05:38,479
two is that with the centralized control

00:05:36,080 --> 00:05:40,080
plane option which is the top diagram on

00:05:38,479 --> 00:05:42,160
the slide

00:05:40,080 --> 00:05:44,160
the the control functions and services

00:05:42,160 --> 00:05:44,960
are all running in the central data

00:05:44,160 --> 00:05:47,600
center

00:05:44,960 --> 00:05:48,880
and the the edge sites are running the

00:05:47,600 --> 00:05:52,160
compute

00:05:48,880 --> 00:05:54,800
workload only and in this case

00:05:52,160 --> 00:05:56,800
uh most often if you lose connection

00:05:54,800 --> 00:05:58,720
your workload is still running on the x

00:05:56,800 --> 00:06:00,000
side but you will not be able to launch

00:05:58,720 --> 00:06:03,280
a new workload

00:06:00,000 --> 00:06:04,880
and you will also not be able to do many

00:06:03,280 --> 00:06:06,639
other operations either

00:06:04,880 --> 00:06:08,240
and in some use cases this this is

00:06:06,639 --> 00:06:11,600
totally acceptable

00:06:08,240 --> 00:06:13,120
and uh your you may want to rather focus

00:06:11,600 --> 00:06:16,160
on increasing the

00:06:13,120 --> 00:06:18,720
the workload's footprint on your ad site

00:06:16,160 --> 00:06:19,680
but when you need full autonomy on the

00:06:18,720 --> 00:06:22,639
edge

00:06:19,680 --> 00:06:24,080
then you need to look into which control

00:06:22,639 --> 00:06:26,400
functions move to

00:06:24,080 --> 00:06:28,960
the edge as well which will reduce the

00:06:26,400 --> 00:06:32,000
footprint that the the workloads can use

00:06:28,960 --> 00:06:33,039
but you will have all the options

00:06:32,000 --> 00:06:35,360
available for you

00:06:33,039 --> 00:06:37,919
even in case of the connection loss so

00:06:35,360 --> 00:06:38,639
that is what we have been focusing on so

00:06:37,919 --> 00:06:41,680
far

00:06:38,639 --> 00:06:44,800
and when it comes to solutions um

00:06:41,680 --> 00:06:46,080
we started to build these architectures

00:06:44,800 --> 00:06:48,479
with

00:06:46,080 --> 00:06:49,199
openstack also with kubernetes

00:06:48,479 --> 00:06:52,639
components

00:06:49,199 --> 00:06:55,440
and see uh how it looks like when you're

00:06:52,639 --> 00:06:56,240
putting this into action and we also

00:06:55,440 --> 00:06:58,880
collected

00:06:56,240 --> 00:07:00,479
uh a couple of projects uh for you that

00:06:58,880 --> 00:07:04,319
gergei will describe

00:07:00,479 --> 00:07:06,240
um that are matching one or the other uh

00:07:04,319 --> 00:07:07,120
architecture models to give you some

00:07:06,240 --> 00:07:10,400
examples

00:07:07,120 --> 00:07:12,800
so i'm giving the word to gergei

00:07:10,400 --> 00:07:14,080
thank you so as yotico mentioned we we

00:07:12,800 --> 00:07:16,319
collected some

00:07:14,080 --> 00:07:18,000
some projects related to kubernetes

00:07:16,319 --> 00:07:21,520
which are implementing

00:07:18,000 --> 00:07:23,280
either um the sentence control plane or

00:07:21,520 --> 00:07:27,039
the distributed control plane in

00:07:23,280 --> 00:07:29,120
architecture and we also uh selected

00:07:27,039 --> 00:07:30,400
some projects to show you uh in this

00:07:29,120 --> 00:07:33,440
presentation

00:07:30,400 --> 00:07:35,599
which um provides support for

00:07:33,440 --> 00:07:38,400
for edge use cases in a in a different

00:07:35,599 --> 00:07:43,120
way so for decentralized control plane

00:07:38,400 --> 00:07:45,199
um implementation where we have all the

00:07:43,120 --> 00:07:46,639
control functions in a central location

00:07:45,199 --> 00:07:50,800
the two most

00:07:46,639 --> 00:07:51,919
notable um uh projects are kts which is

00:07:50,800 --> 00:07:54,639
a

00:07:51,919 --> 00:07:56,000
um a very small i say twenty

00:07:54,639 --> 00:07:58,080
distribution

00:07:56,000 --> 00:07:59,360
package to a single binary what you can

00:07:58,080 --> 00:08:02,240
run on on

00:07:59,360 --> 00:08:03,280
all of your locations and uh and it

00:08:02,240 --> 00:08:06,879
contains

00:08:03,280 --> 00:08:09,280
uh a full question distribution with

00:08:06,879 --> 00:08:10,240
basic features for for networking

00:08:09,280 --> 00:08:12,879
storage

00:08:10,240 --> 00:08:14,240
uh load balancer and uh and lingus

00:08:12,879 --> 00:08:17,520
controllers

00:08:14,240 --> 00:08:19,360
and also it has a component so called

00:08:17,520 --> 00:08:19,680
tunnel proxy which makes it possible

00:08:19,360 --> 00:08:21,759
that

00:08:19,680 --> 00:08:23,280
that the the communication between the

00:08:21,759 --> 00:08:26,800
central location and the actual

00:08:23,280 --> 00:08:29,840
nature location what is needed

00:08:26,800 --> 00:08:33,599
for the cumulative control plane is uh

00:08:29,840 --> 00:08:35,919
it's possible to to do over

00:08:33,599 --> 00:08:35,919
um

00:08:39,120 --> 00:08:46,640
so in this way uh kcs is a complete

00:08:42,159 --> 00:08:50,480
solution for uh for providing uh

00:08:46,640 --> 00:08:53,519
edge uh infrastructures

00:08:50,480 --> 00:08:56,399
and it

00:08:53,519 --> 00:08:57,200
is very famous about its like slimness

00:08:56,399 --> 00:09:00,320
so it's very

00:08:57,200 --> 00:09:01,440
very uh slims down uh kubernetes

00:09:00,320 --> 00:09:04,720
distribution

00:09:01,440 --> 00:09:06,320
the other um project which implements

00:09:04,720 --> 00:09:09,600
the centralized control plane is

00:09:06,320 --> 00:09:13,440
is cubed this

00:09:09,600 --> 00:09:15,760
is a bit more um complete solution than

00:09:13,440 --> 00:09:18,240
than kcvs because it has also

00:09:15,760 --> 00:09:20,320
some features specifically for iot

00:09:18,240 --> 00:09:22,800
workloads so on top of the

00:09:20,320 --> 00:09:23,440
the the infrastructure services which

00:09:22,800 --> 00:09:26,480
are running

00:09:23,440 --> 00:09:29,040
uh similarly to p3s um

00:09:26,480 --> 00:09:29,519
uh all the control teams workloads in a

00:09:29,040 --> 00:09:32,640
in a

00:09:29,519 --> 00:09:36,480
in a simple location um

00:09:32,640 --> 00:09:39,040
and and uh running the

00:09:36,480 --> 00:09:40,080
uh the control team for for running the

00:09:39,040 --> 00:09:43,279
reverse loading

00:09:40,080 --> 00:09:45,120
in the edge locations uh so on top of

00:09:43,279 --> 00:09:48,800
these control plane functions

00:09:45,120 --> 00:09:53,200
uh cubed provides also features for

00:09:48,800 --> 00:09:57,360
for iot like a message broker

00:09:53,200 --> 00:10:00,880
and and advent bus and also some

00:09:57,360 --> 00:10:04,000
device management features and here

00:10:00,880 --> 00:10:06,880
also we have this capability that the

00:10:04,000 --> 00:10:08,000
the control plane uh is able to

00:10:06,880 --> 00:10:11,600
communicate

00:10:08,000 --> 00:10:15,200
uh over the one uh

00:10:11,600 --> 00:10:18,320
via this um uh edge and cloud have

00:10:15,200 --> 00:10:19,760
components of the of the architecture so

00:10:18,320 --> 00:10:21,839
these are

00:10:19,760 --> 00:10:23,600
complete implementations they all they

00:10:21,839 --> 00:10:26,720
have all the

00:10:23,600 --> 00:10:29,760
bits and pieces which are needed for

00:10:26,720 --> 00:10:33,360
for tubercs to run

00:10:29,760 --> 00:10:37,279
workloads and they are providing

00:10:33,360 --> 00:10:41,519
a single installer where you can

00:10:37,279 --> 00:10:44,640
download and install the

00:10:41,519 --> 00:10:47,200
the solution so

00:10:44,640 --> 00:10:49,279
these are implementing both of them the

00:10:47,200 --> 00:10:52,800
centralized control plane

00:10:49,279 --> 00:10:54,480
architecture and uh

00:10:52,800 --> 00:10:57,279
for implementing the distributed control

00:10:54,480 --> 00:10:59,200
plane where as learned from indico

00:10:57,279 --> 00:11:00,640
we are running the the cumulative

00:10:59,200 --> 00:11:03,519
control plane

00:11:00,640 --> 00:11:04,160
in uh in all the locations and we have

00:11:03,519 --> 00:11:07,440
some kind of

00:11:04,160 --> 00:11:10,560
federation uh on top of that

00:11:07,440 --> 00:11:12,720
um a bit different approaches

00:11:10,560 --> 00:11:15,200
is needed and this is implemented for

00:11:12,720 --> 00:11:19,040
example in starting x

00:11:15,200 --> 00:11:20,720
which is a an edge infrastructure

00:11:19,040 --> 00:11:24,240
solution

00:11:20,720 --> 00:11:24,720
providing both kubernetes and openstack

00:11:24,240 --> 00:11:28,880
as

00:11:24,720 --> 00:11:32,079
an option to run different uh

00:11:28,880 --> 00:11:33,360
uh workloads so travelingx is a very

00:11:32,079 --> 00:11:35,680
good um

00:11:33,360 --> 00:11:37,200
uh fusion between kubernetes and

00:11:35,680 --> 00:11:40,160
openstack for

00:11:37,200 --> 00:11:40,720
for edge cloud infrastructures and this

00:11:40,160 --> 00:11:43,839
is a

00:11:40,720 --> 00:11:47,600
again a little integrated text so it has

00:11:43,839 --> 00:11:50,399
all the extensions and all the all the

00:11:47,600 --> 00:11:52,720
needed components to run workloads on on

00:11:50,399 --> 00:11:52,720
these

00:11:54,000 --> 00:12:01,519
solutions and it has a has a central

00:11:57,600 --> 00:12:05,120
um management

00:12:01,519 --> 00:12:11,040
function which controls the

00:12:05,120 --> 00:12:14,560
the data and image synchronization of

00:12:11,040 --> 00:12:18,000
of the different edge

00:12:14,560 --> 00:12:20,320
side so it has this complete

00:12:18,000 --> 00:12:21,120
control plane implementation for for the

00:12:20,320 --> 00:12:24,160
different

00:12:21,120 --> 00:12:26,560
sites and there is one sensor function

00:12:24,160 --> 00:12:28,000
which which is managing all of these and

00:12:26,560 --> 00:12:30,160
it can handle

00:12:28,000 --> 00:12:31,519
for example the the cloud infrastructure

00:12:30,160 --> 00:12:38,320
software update

00:12:31,519 --> 00:12:42,160
of the components and so on and so on

00:12:38,320 --> 00:12:43,519
uh the other project was selected is not

00:12:42,160 --> 00:12:45,680
a complete solution so

00:12:43,519 --> 00:12:46,639
in this sense it's different from from

00:12:45,680 --> 00:12:49,760
the others but

00:12:46,639 --> 00:12:50,959
uh what i described in uh in the

00:12:49,760 --> 00:12:54,560
previous minutes

00:12:50,959 --> 00:12:58,079
so it's uh it's cube fed it's part of uh

00:12:54,560 --> 00:13:00,399
of kubernetes uh it's uh it's um

00:12:58,079 --> 00:13:02,240
it's an implementation to federate the

00:13:00,399 --> 00:13:04,560
kubernetes api so

00:13:02,240 --> 00:13:06,079
basically what it does is it's running

00:13:04,560 --> 00:13:09,680
the federation agent in

00:13:06,079 --> 00:13:12,959
in in one cuvette's cluster and

00:13:09,680 --> 00:13:16,560
and um from there

00:13:12,959 --> 00:13:19,040
it is capable to schedule workloads to

00:13:16,560 --> 00:13:23,120
different current test clusters

00:13:19,040 --> 00:13:27,760
also so it's basically a scalable api

00:13:23,120 --> 00:13:31,440
uh for quebec it is

00:13:27,760 --> 00:13:34,000
a necessary component for building

00:13:31,440 --> 00:13:35,839
edge cloud infrastructures purely based

00:13:34,000 --> 00:13:37,120
on two benefits with a distributed

00:13:35,839 --> 00:13:40,160
control plane

00:13:37,120 --> 00:13:42,160
if a single entry point uh

00:13:40,160 --> 00:13:43,680
to the infrastructure is required so

00:13:42,160 --> 00:13:48,240
this uh this

00:13:43,680 --> 00:13:51,199
project provides uh provides that um

00:13:48,240 --> 00:13:51,519
but to have a complete solution there

00:13:51,199 --> 00:13:54,639
are

00:13:51,519 --> 00:13:57,920
lots of other components uh

00:13:54,639 --> 00:14:01,920
needed um because they are not part of

00:13:57,920 --> 00:14:02,720
cube fed so it's not not a complete

00:14:01,920 --> 00:14:06,720
stack

00:14:02,720 --> 00:14:08,000
basically and um

00:14:06,720 --> 00:14:10,079
there are two other projects that i

00:14:08,000 --> 00:14:12,720
wanted to highlight and and

00:14:10,079 --> 00:14:14,160
uh we wanted to show this because these

00:14:12,720 --> 00:14:18,000
are somehow

00:14:14,160 --> 00:14:19,600
not like uh vertical solutions of edge

00:14:18,000 --> 00:14:23,120
cloud infrastructures but somehow

00:14:19,600 --> 00:14:26,480
like horizontal uh uh

00:14:23,120 --> 00:14:28,240
projects which provide features to build

00:14:26,480 --> 00:14:30,399
edge cloud infrastructure so one of

00:14:28,240 --> 00:14:33,199
these is its method tube so meta cube is

00:14:30,399 --> 00:14:36,399
a bad master host provisioning

00:14:33,199 --> 00:14:40,320
service for for kubernetes

00:14:36,399 --> 00:14:44,240
and it has this capability to

00:14:40,320 --> 00:14:48,079
to provision um

00:14:44,240 --> 00:14:52,720
node over layer 3 with the help of

00:14:48,079 --> 00:14:52,720
of redfish which means that that even

00:14:52,880 --> 00:14:59,920
worker nodes running in remote locations

00:14:56,480 --> 00:15:00,399
can be provisioned and can be attached

00:14:59,920 --> 00:15:03,680
to

00:15:00,399 --> 00:15:03,680
to a cluster or can be

00:15:04,079 --> 00:15:07,360
installed as a separate uh kubernetes

00:15:06,399 --> 00:15:10,000
cluster with the

00:15:07,360 --> 00:15:11,839
with the help of of of meta actually

00:15:10,000 --> 00:15:12,800
better to be implemented management

00:15:11,839 --> 00:15:15,760
layer of

00:15:12,800 --> 00:15:17,360
of this so again metacube is like a

00:15:15,760 --> 00:15:21,600
necessary part of

00:15:17,360 --> 00:15:21,600
the netcloud infrastructure

00:15:21,680 --> 00:15:28,079
solution but this is the very important

00:15:25,519 --> 00:15:29,920
part because the most manageability of

00:15:28,079 --> 00:15:31,839
of the hardware is key in case of

00:15:29,920 --> 00:15:35,040
edgecloud infrastructure because as we

00:15:31,839 --> 00:15:37,440
as we learned from usdco in the

00:15:35,040 --> 00:15:39,360
in the introduction side uh h-cad

00:15:37,440 --> 00:15:42,560
infrastructures are about

00:15:39,360 --> 00:15:46,000
massively distributed

00:15:42,560 --> 00:15:49,920
cloud infrastructures and and uh

00:15:46,000 --> 00:15:52,480
to be able to manage these in a in a

00:15:49,920 --> 00:15:53,519
scalable way we need automation on all

00:15:52,480 --> 00:15:57,040
layers of

00:15:53,519 --> 00:15:58,560
of the second and hardware management is

00:15:57,040 --> 00:16:02,160
an important

00:15:58,560 --> 00:16:05,120
part of this the other project

00:16:02,160 --> 00:16:06,240
is related to networking and it's called

00:16:05,120 --> 00:16:09,279
submariner

00:16:06,240 --> 00:16:11,759
and what it does it make uh

00:16:09,279 --> 00:16:14,480
makes it possible that that ports

00:16:11,759 --> 00:16:18,720
running in different kubernetes clusters

00:16:14,480 --> 00:16:21,199
uh can communicate with each other

00:16:18,720 --> 00:16:22,000
and it's uh built in a way that that it

00:16:21,199 --> 00:16:24,399
opens vpn

00:16:22,000 --> 00:16:25,600
tunnels uh between these q a test

00:16:24,399 --> 00:16:28,720
clusters

00:16:25,600 --> 00:16:31,440
and and channels the traffic

00:16:28,720 --> 00:16:33,920
via these these vp antennas also it

00:16:31,440 --> 00:16:33,920
provides

00:16:35,680 --> 00:16:41,839
service discovery feature across these

00:16:38,079 --> 00:16:46,880
these clusters so this is a very good

00:16:41,839 --> 00:16:50,000
baseline to implement a distributed

00:16:46,880 --> 00:16:53,360
edge application which

00:16:50,000 --> 00:16:53,759
is able to communicate from like edge to

00:16:53,360 --> 00:16:57,519
edge

00:16:53,759 --> 00:16:58,720
in a in a mesh kind of phase so for this

00:16:57,519 --> 00:17:02,320
submariner is a great

00:16:58,720 --> 00:17:02,880
uh networking uh solution so these are

00:17:02,320 --> 00:17:04,640
the

00:17:02,880 --> 00:17:07,280
the example projects what you wanted to

00:17:04,640 --> 00:17:11,199
highlight we know that it's not possible

00:17:07,280 --> 00:17:11,600
to list everything um we just selected

00:17:11,199 --> 00:17:14,559
the

00:17:11,600 --> 00:17:15,600
let's see most notable examples uh which

00:17:14,559 --> 00:17:18,880
are implementing

00:17:15,600 --> 00:17:20,959
the the architectures what we identified

00:17:18,880 --> 00:17:22,799
as the most prominent ones

00:17:20,959 --> 00:17:24,640
from all the architectures but also we

00:17:22,799 --> 00:17:28,480
are now working on

00:17:24,640 --> 00:17:29,200
on uh defining hybrid architectures when

00:17:28,480 --> 00:17:32,160
kubernetes

00:17:29,200 --> 00:17:33,600
and openstack components are part of the

00:17:32,160 --> 00:17:36,720
edge cloud infrastructure

00:17:33,600 --> 00:17:39,760
in different places and in in different

00:17:36,720 --> 00:17:42,559
roles but let's hear more about the

00:17:39,760 --> 00:17:43,039
future plans of the group in the next

00:17:42,559 --> 00:17:46,559
slide

00:17:43,039 --> 00:17:48,960
from mundico

00:17:46,559 --> 00:17:49,840
uh so we have a call for action for you

00:17:48,960 --> 00:17:53,039
because as

00:17:49,840 --> 00:17:54,400
uh gergei was mentioning in the interest

00:17:53,039 --> 00:17:56,640
of time we only

00:17:54,400 --> 00:17:58,720
had the possibility to bring only a

00:17:56,640 --> 00:18:01,919
handful of examples to you

00:17:58,720 --> 00:18:02,320
uh but i think it already showed very

00:18:01,919 --> 00:18:04,640
well

00:18:02,320 --> 00:18:05,760
that there are a lot of components and

00:18:04,640 --> 00:18:07,840
building blocks and

00:18:05,760 --> 00:18:10,080
options out there that you can choose

00:18:07,840 --> 00:18:10,559
from to build your edge solution and

00:18:10,080 --> 00:18:13,520
edge

00:18:10,559 --> 00:18:14,400
infrastructure with um but we would like

00:18:13,520 --> 00:18:16,799
to um

00:18:14,400 --> 00:18:18,640
understand it better how the the

00:18:16,799 --> 00:18:20,400
landscape is shaping how the edge

00:18:18,640 --> 00:18:23,200
solutions are shaping

00:18:20,400 --> 00:18:24,880
and how the edge requirements are

00:18:23,200 --> 00:18:28,080
evolving over time

00:18:24,880 --> 00:18:29,520
so um we are inviting you to come and

00:18:28,080 --> 00:18:32,640
collaborate with us

00:18:29,520 --> 00:18:35,360
and give us any feedback um

00:18:32,640 --> 00:18:37,760
for instance about the the two edge

00:18:35,360 --> 00:18:39,360
architecture models that we have so far

00:18:37,760 --> 00:18:41,280
the centralized and the distributed

00:18:39,360 --> 00:18:43,280
control plane model

00:18:41,280 --> 00:18:45,679
is it something that your use case or

00:18:43,280 --> 00:18:49,440
your solution already fits into

00:18:45,679 --> 00:18:51,840
or do you have a third architecture

00:18:49,440 --> 00:18:53,600
that doesn't really fit into either of

00:18:51,840 --> 00:18:55,760
these buckets

00:18:53,600 --> 00:18:57,280
we would like to learn about all that

00:18:55,760 --> 00:18:58,799
and also if

00:18:57,280 --> 00:19:01,360
you have a project that you're working

00:18:58,799 --> 00:19:04,960
on that we did not talk about here but

00:19:01,360 --> 00:19:05,600
would fit into this work please comment

00:19:04,960 --> 00:19:08,080
and share

00:19:05,600 --> 00:19:10,160
the details with us or if you have a use

00:19:08,080 --> 00:19:14,320
case that you're trying to identify

00:19:10,160 --> 00:19:16,880
your architecture for and need some help

00:19:14,320 --> 00:19:18,080
guidance or you would like to talk with

00:19:16,880 --> 00:19:20,240
someone about that

00:19:18,080 --> 00:19:21,600
we would really be interested in

00:19:20,240 --> 00:19:22,960
learning about your use case and

00:19:21,600 --> 00:19:26,480
requirements too

00:19:22,960 --> 00:19:28,000
um so the the slide um contains all the

00:19:26,480 --> 00:19:29,200
information about the the weekly

00:19:28,000 --> 00:19:31,600
meetings that we have

00:19:29,200 --> 00:19:33,280
also the uh the maining list and irc

00:19:31,600 --> 00:19:34,160
channel where you can get in touch with

00:19:33,280 --> 00:19:38,480
the group

00:19:34,160 --> 00:19:39,440
um so come join us and uh work let's all

00:19:38,480 --> 00:19:43,200
work together

00:19:39,440 --> 00:19:44,880
on finding solutions for the various

00:19:43,200 --> 00:19:47,919
edge computing use cases that are

00:19:44,880 --> 00:19:49,440
out there and with that i believe that

00:19:47,919 --> 00:19:52,720
we arrived to the

00:19:49,440 --> 00:19:54,880
q a part so we are hanging out here

00:19:52,720 --> 00:19:56,799
at the event so um come and ask

00:19:54,880 --> 00:20:00,160
questions now or start a discussion

00:19:56,799 --> 00:20:00,880
or find us during kubecon or reach out

00:20:00,160 --> 00:20:03,840
to us

00:20:00,880 --> 00:20:06,000
on the email addresses that you saw at

00:20:03,840 --> 00:20:09,200
the beginning of the presentation

00:20:06,000 --> 00:20:11,840
or well find us anywhere we are

00:20:09,200 --> 00:20:12,799
all over the place um participating in

00:20:11,840 --> 00:20:15,919
open source groups

00:20:12,799 --> 00:20:20,640
uh up on social media so um you should

00:20:15,919 --> 00:20:25,360
be able to find a connection to us

00:20:20,640 --> 00:20:25,360

YouTube URL: https://www.youtube.com/watch?v=KEf16onHKpM


