Title: Akri: Using non-Kubernetes devices in Kubernetes - Edrick Wong, Microsoft
Publication date: 2021-05-05
Playlist: Kubernetes on Edge Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Akri: Using non-Kubernetes devices in Kubernetes - Edrick Wong, Microsoft

As Kubernetes move towards edge computing, a common question is: “Can you run Kubernetes on it?” The natural inclination is to say yes, but after looking at some scenarios, there are many devices that can’t run Kubernetes directly but would benefit from being part of a cluster. For example, sensors and brownfield devices might not have the compute or support for Kubernetes but can ideally be exposed to workloads in the cluster. The goal of this talk is to explain how Akri can be used to empower various edge scenarios. Akri is an open-source project that simplifies the process of discovering, monitoring, and using IoT devices from a Kubernetes cluster, without adding anything to the devices. At its core, Akri aims to address the challenges that come with the diverse set of devices at the edge, each with unique communication protocols and intermittent availability.
Captions: 
	00:00:01,680 --> 00:00:04,640
thank you for joining me today at

00:00:02,960 --> 00:00:06,560
kubernetes on the edge day

00:00:04,640 --> 00:00:08,559
i'm edric and i'm a pm at microsoft

00:00:06,560 --> 00:00:10,000
today i'll be talking about ocry an open

00:00:08,559 --> 00:00:11,599
source project that my team and i have

00:00:10,000 --> 00:00:13,120
been working on over the past year

00:00:11,599 --> 00:00:15,280
and tackles the issue of using

00:00:13,120 --> 00:00:16,320
non-kubernetes devices in kubernetes to

00:00:15,280 --> 00:00:17,600
get things started

00:00:16,320 --> 00:00:19,039
have you ever looked at a device and

00:00:17,600 --> 00:00:20,720
said gee i wonder if you can run

00:00:19,039 --> 00:00:21,760
kubernetes on it then it can help me run

00:00:20,720 --> 00:00:23,519
some of my workloads

00:00:21,760 --> 00:00:25,279
speaking for myself i ask myself this

00:00:23,519 --> 00:00:26,480
question at least twice a day but as

00:00:25,279 --> 00:00:26,880
some of my colleagues have pointed out

00:00:26,480 --> 00:00:28,000
to me

00:00:26,880 --> 00:00:29,359
just because you think you can put

00:00:28,000 --> 00:00:30,480
kubernetes on it doesn't mean it's a

00:00:29,359 --> 00:00:31,599
good idea however

00:00:30,480 --> 00:00:32,800
there was something there in that

00:00:31,599 --> 00:00:34,160
question that put the sparkle in my

00:00:32,800 --> 00:00:35,760
team's eyes and we went down the rabbit

00:00:34,160 --> 00:00:37,360
hole of looking at computing on the edge

00:00:35,760 --> 00:00:38,320
and the various devices and form factors

00:00:37,360 --> 00:00:39,760
that exist

00:00:38,320 --> 00:00:40,879
this led to the inception of project

00:00:39,760 --> 00:00:42,800
aquarii and i'll walk through our

00:00:40,879 --> 00:00:44,079
journey and thinking around this space

00:00:42,800 --> 00:00:45,440
as a bit of background we started off

00:00:44,079 --> 00:00:46,719
with the things that we know about my

00:00:45,440 --> 00:00:48,399
team has been working on edge computing

00:00:46,719 --> 00:00:49,760
in iot for a while now and the one thing

00:00:48,399 --> 00:00:50,879
that we can all agree on is that edge

00:00:49,760 --> 00:00:51,920
computing is difficult

00:00:50,879 --> 00:00:53,520
unlike the cloud where there are

00:00:51,920 --> 00:00:55,360
amorphous resources that can be easily

00:00:53,520 --> 00:00:56,160
spun up torn down allocated de-allocated

00:00:55,360 --> 00:00:57,600
reallocated

00:00:56,160 --> 00:00:59,359
with an uptime measured in as many

00:00:57,600 --> 00:01:01,120
decimal places as i want zeros in my

00:00:59,359 --> 00:01:02,559
salary the edge is different

00:01:01,120 --> 00:01:04,400
as the cloud is modern day then edge

00:01:02,559 --> 00:01:05,920
computing is the wild west the edge is a

00:01:04,400 --> 00:01:07,200
mixture of heterogeneous devices that

00:01:05,920 --> 00:01:08,400
have different compute capabilities

00:01:07,200 --> 00:01:10,000
connectivity profiles

00:01:08,400 --> 00:01:11,680
and might or might not have peripherals

00:01:10,000 --> 00:01:13,280
and sensors attached to them they might

00:01:11,680 --> 00:01:14,560
have special compute accelerators on

00:01:13,280 --> 00:01:15,600
them or they might be devices from

00:01:14,560 --> 00:01:17,520
computing's past

00:01:15,600 --> 00:01:19,280
so the question becomes what should and

00:01:17,520 --> 00:01:20,799
shouldn't run kubernetes to tackle this

00:01:19,280 --> 00:01:22,560
question we came up with two guiding

00:01:20,799 --> 00:01:23,600
principles on which devices should run

00:01:22,560 --> 00:01:25,360
kubernetes

00:01:23,600 --> 00:01:26,799
first we think the devices that should

00:01:25,360 --> 00:01:28,320
run kubernetes are the ones that are

00:01:26,799 --> 00:01:28,960
used for general purpose computing for

00:01:28,320 --> 00:01:30,799
example

00:01:28,960 --> 00:01:32,159
an unused on-prem server would be great

00:01:30,799 --> 00:01:33,520
device for a kubernetes

00:01:32,159 --> 00:01:35,040
but something like an ip camera that's

00:01:33,520 --> 00:01:36,400
running a small arm chip maybe not so

00:01:35,040 --> 00:01:37,040
much our second belief is that the

00:01:36,400 --> 00:01:38,159
devices

00:01:37,040 --> 00:01:39,439
should also be able to support

00:01:38,159 --> 00:01:40,880
kubernetes this one's a little bit more

00:01:39,439 --> 00:01:42,479
nuanced but the key here is that you can

00:01:40,880 --> 00:01:44,079
see support as two different things

00:01:42,479 --> 00:01:46,159
the first is physical limitations of the

00:01:44,079 --> 00:01:47,280
devices on-prem servers you can probably

00:01:46,159 --> 00:01:49,680
run kubernetes on it

00:01:47,280 --> 00:01:51,200
industrial pcs why not when we get

00:01:49,680 --> 00:01:52,799
closer and closer to smaller devices

00:01:51,200 --> 00:01:53,520
then something kind of like murphy's law

00:01:52,799 --> 00:01:54,960
kicks in

00:01:53,520 --> 00:01:57,040
where even if you get kubernetes on the

00:01:54,960 --> 00:01:58,719
device itself there's really so little

00:01:57,040 --> 00:01:59,600
resources left that it basically becomes

00:01:58,719 --> 00:02:00,960
kind of useless

00:01:59,600 --> 00:02:02,640
the second thing is legacy or

00:02:00,960 --> 00:02:04,000
requirement constraints you might have a

00:02:02,640 --> 00:02:05,280
device that has a lot of compute on it

00:02:04,000 --> 00:02:07,040
but it's practically and technically

00:02:05,280 --> 00:02:08,640
impossible to install kubernetes on

00:02:07,040 --> 00:02:10,160
because it's legacy hardware and there's

00:02:08,640 --> 00:02:10,959
some sort of technical restrictions that

00:02:10,160 --> 00:02:12,640
really

00:02:10,959 --> 00:02:14,480
not let you do it so this covers all the

00:02:12,640 --> 00:02:15,840
devices that can run kubernetes but our

00:02:14,480 --> 00:02:17,520
focus here are on the small or

00:02:15,840 --> 00:02:18,480
brownfield devices that don't meet these

00:02:17,520 --> 00:02:19,840
requirements

00:02:18,480 --> 00:02:21,760
we think that there's immense value in

00:02:19,840 --> 00:02:23,520
accessing exposing these non-kubernetes

00:02:21,760 --> 00:02:24,560
devices to a kubernetes cluster

00:02:23,520 --> 00:02:25,920
and this is where i would like to

00:02:24,560 --> 00:02:27,599
introduce you to awk archery is a

00:02:25,920 --> 00:02:29,599
kubernetes native project that exposes

00:02:27,599 --> 00:02:30,319
your edge devices as native resources to

00:02:29,599 --> 00:02:32,080
a cluster

00:02:30,319 --> 00:02:33,840
without having to install kubernetes on

00:02:32,080 --> 00:02:35,440
it all you have to do is provide a

00:02:33,840 --> 00:02:37,040
configuration that states what devices

00:02:35,440 --> 00:02:38,160
you want to find and what communication

00:02:37,040 --> 00:02:39,760
pattern it supports

00:02:38,160 --> 00:02:41,280
and arche will handle the discovering of

00:02:39,760 --> 00:02:43,120
all these devices and expose them as

00:02:41,280 --> 00:02:44,720
kubernetes resources to your cluster

00:02:43,120 --> 00:02:46,160
communication patterns here can be any

00:02:44,720 --> 00:02:46,879
way that the device can communicate with

00:02:46,160 --> 00:02:48,400
the cluster

00:02:46,879 --> 00:02:50,879
but the most common example of this are

00:02:48,400 --> 00:02:53,040
protocols such as onvif or opc ua

00:02:50,879 --> 00:02:54,640
but it can also be other things like

00:02:53,040 --> 00:02:56,080
udab for usb discovery or your own

00:02:54,640 --> 00:02:57,680
proprietary goodness

00:02:56,080 --> 00:02:59,200
all the communication logic just needs

00:02:57,680 --> 00:03:00,480
to be wrapped up in a pod and aqua will

00:02:59,200 --> 00:03:01,840
handle the rest for you if you have a

00:03:00,480 --> 00:03:03,519
specific workload that you want to run

00:03:01,840 --> 00:03:04,239
with a specific device or a class of

00:03:03,519 --> 00:03:05,599
devices

00:03:04,239 --> 00:03:07,200
you can also specify this in the

00:03:05,599 --> 00:03:08,560
configuration and it will automatically

00:03:07,200 --> 00:03:10,159
get deployed when the device comes

00:03:08,560 --> 00:03:11,440
online so i'll give an example of where

00:03:10,159 --> 00:03:12,959
awkward might be useful

00:03:11,440 --> 00:03:14,879
an example of this might be a smart

00:03:12,959 --> 00:03:16,400
store scenario you being a modern day

00:03:14,879 --> 00:03:17,920
store owner design a store with weight

00:03:16,400 --> 00:03:18,720
sensors that can track inventory of all

00:03:17,920 --> 00:03:20,319
the items

00:03:18,720 --> 00:03:21,840
you have a pot that can figure out how

00:03:20,319 --> 00:03:22,800
much inventory you have based on weight

00:03:21,840 --> 00:03:24,640
if you were trying to set this up

00:03:22,800 --> 00:03:26,400
manually you would have to independently

00:03:24,640 --> 00:03:27,599
and individually configure all of these

00:03:26,400 --> 00:03:29,360
sensors yourself

00:03:27,599 --> 00:03:30,959
with awk all you need to do is specify

00:03:29,360 --> 00:03:32,799
the protocol that the sensor runs and

00:03:30,959 --> 00:03:34,239
the magic inventory pod that you have

00:03:32,799 --> 00:03:36,400
and all your sensors will be discovered

00:03:34,239 --> 00:03:37,840
on online automatically in general if we

00:03:36,400 --> 00:03:39,840
go back to the principles if you have

00:03:37,840 --> 00:03:41,120
any device that you don't want or can't

00:03:39,840 --> 00:03:42,560
run kubernetes on

00:03:41,120 --> 00:03:44,239
but want to include in your overall

00:03:42,560 --> 00:03:45,040
solution then awkwary is the project for

00:03:44,239 --> 00:03:46,400
you

00:03:45,040 --> 00:03:48,319
so this unfortunately brings us to the

00:03:46,400 --> 00:03:50,720
end of our lightning talk but no frets

00:03:48,319 --> 00:03:52,000
you can find out more at aka dot msl and

00:03:50,720 --> 00:03:54,000
swing by the awkward channel on the

00:03:52,000 --> 00:03:55,439
kubernetes slack and come chat with us

00:03:54,000 --> 00:03:57,040
we also have an awkward deep dive later

00:03:55,439 --> 00:03:57,599
on today so be sure to check that out

00:03:57,040 --> 00:03:58,799
too

00:03:57,599 --> 00:04:00,080
thank you for joining me today and i

00:03:58,799 --> 00:04:03,040
hope you have a great kubernetes on the

00:04:00,080 --> 00:04:03,040

YouTube URL: https://www.youtube.com/watch?v=Wb8IYOEaoj4


