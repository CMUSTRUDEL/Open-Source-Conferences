Title: Intro + Deep Dive - Provider IBM Cloud - Sahdev Zala, Richard Theis, & Brad Topol, IBM
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Intro + Deep Dive - Provider IBM Cloud - Sahdev Zala, Richard Theis, & Brad Topol, IBM 

In this session, the project leads will provide an overview of the IBM Cloud Provider subproject, its open source activities, and learning resources. It will be followed by a discussion on the recent developments as well as future work in the IBM Cloud Provider and Kubernetes Cluster API Provider IBM Cloud. This session will be of value to a broad audience including active contributors, new contributors, and those with an interest in the IBM Cloud Provider features and capabilities or the Kubernetes Cloud Provider in general. 

https://sched.co/ekHP
Captions: 
	00:00:01,199 --> 00:00:05,839
hello everyone uh welcome to

00:00:03,600 --> 00:00:07,680
this talk intro plus deep dive uh

00:00:05,839 --> 00:00:10,320
provider ibm cloud

00:00:07,680 --> 00:00:11,200
my name is sadio zala i am one of the

00:00:10,320 --> 00:00:14,960
lead for the

00:00:11,200 --> 00:00:17,279
project and with me

00:00:14,960 --> 00:00:18,640
i have uh richard thiess and brad topple

00:00:17,279 --> 00:00:20,080
would you like to introduce yourself

00:00:18,640 --> 00:00:22,320
please

00:00:20,080 --> 00:00:24,240
yeah definitely i'm richard tyso working

00:00:22,320 --> 00:00:26,800
on ibm cloud provider for

00:00:24,240 --> 00:00:27,599
kubernetes and openshift i also co-lead

00:00:26,800 --> 00:00:30,160
with uh

00:00:27,599 --> 00:00:32,800
sade on the cloud provider project for

00:00:30,160 --> 00:00:32,800
ibm cloud

00:00:33,040 --> 00:00:37,520
hi everyone i'm brad topple i'm ibm's

00:00:35,920 --> 00:00:40,000
distinguished engineer for open

00:00:37,520 --> 00:00:42,320
technologies and developer advocacy

00:00:40,000 --> 00:00:44,160
i lead a large team that contributes

00:00:42,320 --> 00:00:46,399
upstream to kubernetes

00:00:44,160 --> 00:00:47,600
and i'm a kubernetes contributor a cube

00:00:46,399 --> 00:00:50,719
doc maintainer

00:00:47,600 --> 00:00:53,760
and chair of the kubernetes sig doc

00:00:50,719 --> 00:00:56,640
localization sub group

00:00:53,760 --> 00:00:57,520
well thank you richard and brad all

00:00:56,640 --> 00:01:00,480
right so

00:00:57,520 --> 00:01:01,440
uh in today's talk uh we will provide an

00:01:00,480 --> 00:01:04,720
overview of

00:01:01,440 --> 00:01:05,519
sig club provider uh there will be a

00:01:04,720 --> 00:01:08,240
separate

00:01:05,519 --> 00:01:09,520
talk for c cloud for itself so you know

00:01:08,240 --> 00:01:11,360
i would highly recommend

00:01:09,520 --> 00:01:12,960
you to attend that to know more about

00:01:11,360 --> 00:01:13,760
the cloud forwarder seek but in this

00:01:12,960 --> 00:01:16,400
talk

00:01:13,760 --> 00:01:18,479
i will just brief about it uh being the

00:01:16,400 --> 00:01:21,600
provider ibm cloud is a sub project

00:01:18,479 --> 00:01:24,000
off the signal provider we'll talk

00:01:21,600 --> 00:01:26,720
about the structure and activities of

00:01:24,000 --> 00:01:29,759
the provider ibm cloud project

00:01:26,720 --> 00:01:32,240
and that will be followed by deep dive

00:01:29,759 --> 00:01:35,520
to ibm cloud provider and cluster api

00:01:32,240 --> 00:01:35,520
provider ibm cloud

00:01:36,159 --> 00:01:42,000
all right so uh just to brief about uh

00:01:40,079 --> 00:01:44,079
cloud providers special interest group

00:01:42,000 --> 00:01:46,880
uh it is one of the

00:01:44,079 --> 00:01:48,159
uh you know 30 plus special interest

00:01:46,880 --> 00:01:50,880
group in kubernetes

00:01:48,159 --> 00:01:52,079
it owns kubernetes cloud provider

00:01:50,880 --> 00:01:54,079
interface

00:01:52,079 --> 00:01:56,240
uh this interface is responsible for

00:01:54,079 --> 00:01:57,920
running all the cloud provider specific

00:01:56,240 --> 00:02:00,479
control groups

00:01:57,920 --> 00:02:02,079
now you can find uh more about the you

00:02:00,479 --> 00:02:05,840
know code at the

00:02:02,079 --> 00:02:08,720
url that i have provided here um

00:02:05,840 --> 00:02:10,640
the seek it ensures that the cubans

00:02:08,720 --> 00:02:12,239
ecosystem is evolving in a way that is

00:02:10,640 --> 00:02:14,160
neutral to all club providers

00:02:12,239 --> 00:02:15,680
so you know there's no favor given to

00:02:14,160 --> 00:02:18,720
one cloud provider

00:02:15,680 --> 00:02:20,480
over other uh and uh

00:02:18,720 --> 00:02:23,120
you know everybody's everybody can

00:02:20,480 --> 00:02:25,280
participate in the ongoing discussions

00:02:23,120 --> 00:02:28,160
and you know the implementation of a

00:02:25,280 --> 00:02:30,720
specific cloud provider

00:02:28,160 --> 00:02:31,920
the seek also ensures a consistent and

00:02:30,720 --> 00:02:34,000
high quality user

00:02:31,920 --> 00:02:35,440
experience across different cloud

00:02:34,000 --> 00:02:38,080
providers

00:02:35,440 --> 00:02:38,959
and it owns all the sub projects uh they

00:02:38,080 --> 00:02:42,080
were formerly

00:02:38,959 --> 00:02:43,680
known as you know uh sig uh

00:02:42,080 --> 00:02:45,599
themselves you know for different cloud

00:02:43,680 --> 00:02:48,800
providers like aws

00:02:45,599 --> 00:02:51,840
or sig for azure

00:02:48,800 --> 00:02:56,080
gcp or see ibm cloud

00:02:51,840 --> 00:02:58,400
seek openstack uh sig vmware and so on

00:02:56,080 --> 00:02:59,599
uh the provider ibm cloud it's a sub

00:02:58,400 --> 00:03:02,720
project of

00:02:59,599 --> 00:03:04,560
this sig cloud provider uh

00:03:02,720 --> 00:03:06,480
as i mentioned there will be a separate

00:03:04,560 --> 00:03:08,560
talk on seek cloudwater itself

00:03:06,480 --> 00:03:10,239
uh so i would highly recommend you

00:03:08,560 --> 00:03:12,400
attend that to know more about

00:03:10,239 --> 00:03:13,280
uh the cloud for receive and you can

00:03:12,400 --> 00:03:16,400
also

00:03:13,280 --> 00:03:18,080
see and refer documentation in the url

00:03:16,400 --> 00:03:19,599
that i have mentioned at the at the

00:03:18,080 --> 00:03:22,239
bottom of the slide

00:03:19,599 --> 00:03:25,519
uh rest of this talk will focus on the

00:03:22,239 --> 00:03:25,519
provider ibm cloud

00:03:25,599 --> 00:03:31,120
already so uh uh this is a project of

00:03:28,640 --> 00:03:32,480
you know cloud provider see uh it's uh

00:03:31,120 --> 00:03:34,159
it's around building

00:03:32,480 --> 00:03:35,760
deploying you know maintaining

00:03:34,159 --> 00:03:38,879
supporting and using

00:03:35,760 --> 00:03:42,400
companies and ibm cloud obviously

00:03:38,879 --> 00:03:45,599
you know it will uh will provide you

00:03:42,400 --> 00:03:47,200
a platform to interact uh with the team

00:03:45,599 --> 00:03:49,360
uh you know the ibm team

00:03:47,200 --> 00:03:52,400
uh and and others that you know the

00:03:49,360 --> 00:03:55,519
build and operates ibm cloud

00:03:52,400 --> 00:03:57,920
um and and you know we openly discuss

00:03:55,519 --> 00:04:00,080
uh you know things like you know kind of

00:03:57,920 --> 00:04:03,120
contributions enrollment uh

00:04:00,080 --> 00:04:04,959
that uh you know we will be doing in the

00:04:03,120 --> 00:04:06,400
communities committee from the ibm cloud

00:04:04,959 --> 00:04:09,439
perspective

00:04:06,400 --> 00:04:10,080
and uh you know as part of this uh sub

00:04:09,439 --> 00:04:12,799
project

00:04:10,080 --> 00:04:13,519
as an active uh member or just following

00:04:12,799 --> 00:04:16,320
it you know

00:04:13,519 --> 00:04:18,079
you get uh to follow the evaluation of

00:04:16,320 --> 00:04:21,199
the ibm cloud platforms

00:04:18,079 --> 00:04:22,079
uh with respect to kubernetes and you

00:04:21,199 --> 00:04:25,199
know related

00:04:22,079 --> 00:04:27,919
cncf projects

00:04:25,199 --> 00:04:28,560
all right so uh the structure of the

00:04:27,919 --> 00:04:31,040
project

00:04:28,560 --> 00:04:31,840
uh you know when you talk about it we

00:04:31,040 --> 00:04:35,360
have three

00:04:31,840 --> 00:04:37,360
uh colleagues khalid ahmed uh he's from

00:04:35,360 --> 00:04:39,360
ibm multicloud manager side

00:04:37,360 --> 00:04:42,000
uh we have richard thiess who is one of

00:04:39,360 --> 00:04:46,080
the speaker here today

00:04:42,000 --> 00:04:48,800
he represents ibm cloud cuban service

00:04:46,080 --> 00:04:50,240
and red hat openshift community service

00:04:48,800 --> 00:04:52,800
and then myself

00:04:50,240 --> 00:04:54,840
i am representing more from open source

00:04:52,800 --> 00:04:57,280
software side

00:04:54,840 --> 00:04:59,360
um you can

00:04:57,280 --> 00:05:00,880
um find some of the link here that will

00:04:59,360 --> 00:05:02,639
be useful uh

00:05:00,880 --> 00:05:04,880
you know like mailing lists so i would

00:05:02,639 --> 00:05:06,720
highly recommend to

00:05:04,880 --> 00:05:08,479
be part of the mailing list to get

00:05:06,720 --> 00:05:12,240
updates on the project

00:05:08,479 --> 00:05:15,120
uh we have a slack channel uh

00:05:12,240 --> 00:05:15,520
which the provided ibm cloud slack uh

00:05:15,120 --> 00:05:18,880
you know

00:05:15,520 --> 00:05:21,039
highly recommend uh to be uh

00:05:18,880 --> 00:05:23,039
you know to to to be there to see what's

00:05:21,039 --> 00:05:25,680
going on you know we provide the updates

00:05:23,039 --> 00:05:28,479
and other things there regularly

00:05:25,680 --> 00:05:29,440
and you can find more about the project

00:05:28,479 --> 00:05:31,680
documentation

00:05:29,440 --> 00:05:34,320
on the on the link i have provided here

00:05:31,680 --> 00:05:34,320
for the github

00:05:34,639 --> 00:05:41,120
all right activities we meet

00:05:37,680 --> 00:05:44,639
every month so it's last wednesday

00:05:41,120 --> 00:05:47,919
at uh 2 p.m eastern time

00:05:44,639 --> 00:05:50,960
we have a you know 30 to 45 minutes

00:05:47,919 --> 00:05:52,080
or sometime an hour meeting depending on

00:05:50,960 --> 00:05:54,320
the agenda

00:05:52,080 --> 00:05:55,840
now all the recordings for the meeting

00:05:54,320 --> 00:05:58,080
are also available

00:05:55,840 --> 00:05:59,680
uh you know so if you have missed the

00:05:58,080 --> 00:06:02,160
past meetings if you cannot attend

00:05:59,680 --> 00:06:06,160
future meetings you can refer to the

00:06:02,160 --> 00:06:08,960
videos and and take a look there

00:06:06,160 --> 00:06:10,720
we regularly participate in the sig club

00:06:08,960 --> 00:06:12,319
for directional activities you know

00:06:10,720 --> 00:06:15,680
their bi-weekly meetings and

00:06:12,319 --> 00:06:19,360
other things uh the project

00:06:15,680 --> 00:06:21,360
uh owns a sub-project called cluster api

00:06:19,360 --> 00:06:24,479
provider ibm cloud

00:06:21,360 --> 00:06:27,039
which is uh an extension of

00:06:24,479 --> 00:06:28,960
uh the cluster api project of kubernetes

00:06:27,039 --> 00:06:31,680
right so the cluster api project is

00:06:28,960 --> 00:06:34,720
itself a sub project of kubernetes

00:06:31,680 --> 00:06:36,639
and it provides uh you know optional

00:06:34,720 --> 00:06:38,240
uh additive functionalities on top of

00:06:36,639 --> 00:06:41,840
core communities to manage

00:06:38,240 --> 00:06:46,319
the life cycle of cumin's cluster

00:06:41,840 --> 00:06:47,840
now brad will be giving

00:06:46,319 --> 00:06:49,360
more details there later in this

00:06:47,840 --> 00:06:52,720
presentation and then

00:06:49,360 --> 00:06:54,960
um you know uh we are uh

00:06:52,720 --> 00:06:56,479
staying on top of uh support for out of

00:06:54,960 --> 00:06:58,319
free ibm cloud provider

00:06:56,479 --> 00:07:00,000
in c cloud provider you know that

00:06:58,319 --> 00:07:02,800
discussion has been going on for

00:07:00,000 --> 00:07:04,400
for some long time uh in the meetings

00:07:02,800 --> 00:07:07,120
through the mailing list

00:07:04,400 --> 00:07:08,000
uh through the different talks that uh

00:07:07,120 --> 00:07:11,039
some of the

00:07:08,000 --> 00:07:14,240
uh providers specific code which

00:07:11,039 --> 00:07:16,880
were part of the cuban core

00:07:14,240 --> 00:07:18,880
they they are taken uh you know outside

00:07:16,880 --> 00:07:21,840
and that's called out of tree

00:07:18,880 --> 00:07:22,240
uh so richard will provide uh deep dive

00:07:21,840 --> 00:07:24,240
uh

00:07:22,240 --> 00:07:26,160
on to the ibm cloud provider and he will

00:07:24,240 --> 00:07:28,160
also cover uh the out of tree topic

00:07:26,160 --> 00:07:31,199
there

00:07:28,160 --> 00:07:32,479
uh with that uh richard i would hand it

00:07:31,199 --> 00:07:35,840
over to you

00:07:32,479 --> 00:07:38,400
all right thank you so yeah i will be

00:07:35,840 --> 00:07:39,520
taking you through um iks rocks and our

00:07:38,400 --> 00:07:42,319
cloud provider

00:07:39,520 --> 00:07:44,479
and we'll start here on iks which is ibm

00:07:42,319 --> 00:07:46,400
cloud kubernetes service which is ibm's

00:07:44,479 --> 00:07:48,560
managed kubernetes service so you can

00:07:46,400 --> 00:07:50,479
create cube clusters and ibm cloud

00:07:48,560 --> 00:07:51,599
um and there's a lot of other managed

00:07:50,479 --> 00:07:53,759
services out there

00:07:51,599 --> 00:07:56,000
and so in in a similar fashion to those

00:07:53,759 --> 00:07:58,639
we are a certified kubernetes

00:07:56,000 --> 00:08:00,000
provider through the cncf certification

00:07:58,639 --> 00:08:01,280
program for kubernetes

00:08:00,000 --> 00:08:02,720
so if you'd like more information on

00:08:01,280 --> 00:08:04,240
that service you can check out the link

00:08:02,720 --> 00:08:06,560
on the docs there we try to

00:08:04,240 --> 00:08:08,160
keep updated on you know what's going on

00:08:06,560 --> 00:08:10,080
in iks and

00:08:08,160 --> 00:08:11,520
post things on the slack channels to

00:08:10,080 --> 00:08:13,919
keep you

00:08:11,520 --> 00:08:15,120
updated on those activities in our

00:08:13,919 --> 00:08:16,560
meetings as well

00:08:15,120 --> 00:08:19,039
so with that could you go to the next

00:08:16,560 --> 00:08:22,319
slide please yeah sure

00:08:19,039 --> 00:08:23,680
thank you so this year um we've already

00:08:22,319 --> 00:08:26,800
provided three releases

00:08:23,680 --> 00:08:28,240
of iks based upon their associated cube

00:08:26,800 --> 00:08:29,120
releases that were out and when we were

00:08:28,240 --> 00:08:31,680
talking

00:08:29,120 --> 00:08:32,880
last year at this time um we were

00:08:31,680 --> 00:08:34,800
touting 116

00:08:32,880 --> 00:08:36,719
just came out right and now you can see

00:08:34,800 --> 00:08:39,599
in this chart here

00:08:36,719 --> 00:08:41,680
we support 117 18 and 19 which is the

00:08:39,599 --> 00:08:44,399
three latest releases from this year

00:08:41,680 --> 00:08:45,519
um and 116 is already deprecated so you

00:08:44,399 --> 00:08:47,440
can see it which

00:08:45,519 --> 00:08:49,600
uh the speed at which uh kubernetes

00:08:47,440 --> 00:08:51,600
moves it's pretty significant

00:08:49,600 --> 00:08:53,200
um and our 115 release is now

00:08:51,600 --> 00:08:54,399
unsupported it just went unsupported a

00:08:53,200 --> 00:08:56,640
month ago

00:08:54,399 --> 00:08:57,920
so one of the things that takeaway for a

00:08:56,640 --> 00:08:59,680
lot of folks when they get on board in

00:08:57,920 --> 00:09:01,279
kubernetes is that it moves fast

00:08:59,680 --> 00:09:03,200
and that you have to have a plan for

00:09:01,279 --> 00:09:05,040
change right away so you can keep

00:09:03,200 --> 00:09:06,720
current um so there's been a lot of

00:09:05,040 --> 00:09:07,440
discussions in the cube community about

00:09:06,720 --> 00:09:10,480
this

00:09:07,440 --> 00:09:12,880
and certainly impacts users directly

00:09:10,480 --> 00:09:15,279
that are working with kube and those

00:09:12,880 --> 00:09:17,440
obviously through managed services which

00:09:15,279 --> 00:09:19,200
provide kubernetes as a service or a

00:09:17,440 --> 00:09:21,839
product right

00:09:19,200 --> 00:09:23,680
they're built on the the service

00:09:21,839 --> 00:09:25,040
iterations and the service cadence from

00:09:23,680 --> 00:09:27,120
kubernetes

00:09:25,040 --> 00:09:28,959
so you know a lot of folks are trying to

00:09:27,120 --> 00:09:30,800
stay current um there was a discussion

00:09:28,959 --> 00:09:32,240
on the long-term support for kubernetes

00:09:30,800 --> 00:09:34,480
what that might look like

00:09:32,240 --> 00:09:36,000
um a few things changed this year with

00:09:34,480 --> 00:09:39,120
covid and other things happen

00:09:36,000 --> 00:09:42,240
the delay of 119 uh release was

00:09:39,120 --> 00:09:44,800
noted and 116 was extended for

00:09:42,240 --> 00:09:46,560
a little bit more having support ideally

00:09:44,800 --> 00:09:48,720
trying to allow people to

00:09:46,560 --> 00:09:50,240
maybe only have to upgrade once a year

00:09:48,720 --> 00:09:52,399
their clusters um

00:09:50,240 --> 00:09:53,920
so then the current discussion that um

00:09:52,399 --> 00:09:54,640
is going on in the community and feel

00:09:53,920 --> 00:09:56,720
free to

00:09:54,640 --> 00:09:58,399
um contribute to that is whether or not

00:09:56,720 --> 00:09:59,120
cougs should have three releases a year

00:09:58,399 --> 00:10:02,160
or four

00:09:59,120 --> 00:10:03,839
um and right now what i've seen is a

00:10:02,160 --> 00:10:04,800
little bit more weighted towards three

00:10:03,839 --> 00:10:07,440
people prefer

00:10:04,800 --> 00:10:09,200
but certainly uh keep keep uh your

00:10:07,440 --> 00:10:11,440
feedback coming to the community so they

00:10:09,200 --> 00:10:14,240
can make good decisions on these things

00:10:11,440 --> 00:10:15,920
um and as far as patch releases

00:10:14,240 --> 00:10:18,240
kubernetes did a great job this year

00:10:15,920 --> 00:10:19,760
getting a very good cadence on

00:10:18,240 --> 00:10:20,720
delivering patches for the support

00:10:19,760 --> 00:10:23,600
releases

00:10:20,720 --> 00:10:24,240
they generally do it monthly about

00:10:23,600 --> 00:10:26,079
mid-month

00:10:24,240 --> 00:10:28,160
they patch all the releases at the same

00:10:26,079 --> 00:10:29,760
time which has been really helpful

00:10:28,160 --> 00:10:31,519
especially for managed services

00:10:29,760 --> 00:10:33,120
and i'm sure for products as well to be

00:10:31,519 --> 00:10:34,880
able to deliver those patches quickly

00:10:33,120 --> 00:10:35,440
and in a timely manner very consistent

00:10:34,880 --> 00:10:38,240
manner

00:10:35,440 --> 00:10:40,640
and we've been doing that as well so

00:10:38,240 --> 00:10:43,760
next slide please

00:10:40,640 --> 00:10:45,519
um so red hat open shift on ibm cloud or

00:10:43,760 --> 00:10:47,200
the red hat openshift kubernetes service

00:10:45,519 --> 00:10:49,680
is another managed service

00:10:47,200 --> 00:10:50,800
again openshift's built on kubernetes so

00:10:49,680 --> 00:10:52,959
this is a

00:10:50,800 --> 00:10:54,399
also a kubernetes certified offering

00:10:52,959 --> 00:10:56,880
through the cncf

00:10:54,399 --> 00:10:58,800
um and and red hat builds on that

00:10:56,880 --> 00:11:00,320
kubernetes base capability to give you

00:10:58,800 --> 00:11:02,959
some additional functions with

00:11:00,320 --> 00:11:04,480
brad we'll talk about a little bit later

00:11:02,959 --> 00:11:07,680
and if you want more information i

00:11:04,480 --> 00:11:10,720
included a link there for for open shift

00:11:07,680 --> 00:11:13,120
and next slide please

00:11:10,720 --> 00:11:14,880
for the release standpoints we've

00:11:13,120 --> 00:11:15,360
delivered three releases of rocks this

00:11:14,880 --> 00:11:18,640
year

00:11:15,360 --> 00:11:20,640
so very similar cadence um to iks um you

00:11:18,640 --> 00:11:22,240
can see each version of

00:11:20,640 --> 00:11:24,480
openshift is based on a version of

00:11:22,240 --> 00:11:27,040
kubernetes so the latest one for five

00:11:24,480 --> 00:11:30,720
that we've delivered is based on cube118

00:11:27,040 --> 00:11:32,399
and we fully expect a 4 6 soon from

00:11:30,720 --> 00:11:34,000
red hat and open shift that will be

00:11:32,399 --> 00:11:36,000
based on cube 1

00:11:34,000 --> 00:11:37,200
19 and then certainly we'll be following

00:11:36,000 --> 00:11:38,399
that up and delivering that through the

00:11:37,200 --> 00:11:41,200
managed service

00:11:38,399 --> 00:11:43,120
as well so you can see the impact of the

00:11:41,200 --> 00:11:45,040
velocity of kubernetes

00:11:43,120 --> 00:11:46,640
carries over into the velocity of

00:11:45,040 --> 00:11:48,640
openshift they're also moving very

00:11:46,640 --> 00:11:50,880
quickly

00:11:48,640 --> 00:11:52,000
now on the chart here we we show four

00:11:50,880 --> 00:11:53,920
three four and five

00:11:52,000 --> 00:11:57,279
um there also is a long term support

00:11:53,920 --> 00:11:59,360
from openshift and red hat on 311

00:11:57,279 --> 00:12:00,880
that's based on cube111 so that has a

00:11:59,360 --> 00:12:03,600
bit of extended life

00:12:00,880 --> 00:12:05,040
we fully expect for a version of four i

00:12:03,600 --> 00:12:06,800
believe 4.6 will be

00:12:05,040 --> 00:12:08,320
more of an extended life version from

00:12:06,800 --> 00:12:10,800
open shift

00:12:08,320 --> 00:12:12,800
to give you that that additional support

00:12:10,800 --> 00:12:16,079
but bear in mind that obviously

00:12:12,800 --> 00:12:17,839
kube has not supported um 111 for quite

00:12:16,079 --> 00:12:20,959
some time

00:12:17,839 --> 00:12:20,959
all right next slide please

00:12:21,120 --> 00:12:25,040
just yeah one back if you thank you no

00:12:24,079 --> 00:12:28,240
problem

00:12:25,040 --> 00:12:28,800
all right so um we have uh iks we have

00:12:28,240 --> 00:12:31,120
rocks

00:12:28,800 --> 00:12:32,240
they're both built on cube and and one

00:12:31,120 --> 00:12:34,240
thing that's uh

00:12:32,240 --> 00:12:36,079
very uh noticeable when you look at

00:12:34,240 --> 00:12:38,399
kubernetes it's very pluggable

00:12:36,079 --> 00:12:39,279
a lot a lot of interfaces whether it's

00:12:38,399 --> 00:12:42,160
through

00:12:39,279 --> 00:12:43,680
like the api levels crds and such the

00:12:42,160 --> 00:12:46,399
cloud provider is no different

00:12:43,680 --> 00:12:48,079
and and there's various unique

00:12:46,399 --> 00:12:50,000
functionalities in each cloud

00:12:48,079 --> 00:12:51,519
and that we need to provide through

00:12:50,000 --> 00:12:53,279
kubernetes

00:12:51,519 --> 00:12:55,279
controlled interface and that interface

00:12:53,279 --> 00:12:56,320
is the the cloud controller manager or

00:12:55,279 --> 00:12:58,880
the ccm

00:12:56,320 --> 00:13:00,480
through the cloud provider so that's the

00:12:58,880 --> 00:13:03,040
architecture that

00:13:00,480 --> 00:13:04,480
kubernetes has today to support various

00:13:03,040 --> 00:13:07,519
clouds

00:13:04,480 --> 00:13:11,279
and we leverage this architecture

00:13:07,519 --> 00:13:13,120
both of our managed services so on the

00:13:11,279 --> 00:13:14,880
control plane side is where you find the

00:13:13,120 --> 00:13:16,399
api server scheduler

00:13:14,880 --> 00:13:18,480
the kube controller manager and it's

00:13:16,399 --> 00:13:19,360
also where you find in our managed

00:13:18,480 --> 00:13:21,600
services the

00:13:19,360 --> 00:13:22,720
cloud controller manager which is the

00:13:21,600 --> 00:13:24,720
key aspect of

00:13:22,720 --> 00:13:26,639
taking advantage of the cloud-specific

00:13:24,720 --> 00:13:28,240
features that you need to

00:13:26,639 --> 00:13:30,959
deliver some of those key aspects of

00:13:28,240 --> 00:13:33,279
kubernetes that you come to expect

00:13:30,959 --> 00:13:34,959
now on the worker node sides uh where

00:13:33,279 --> 00:13:36,800
you have the kubelet and kuproxy you

00:13:34,959 --> 00:13:40,240
know they're obviously running on

00:13:36,800 --> 00:13:42,480
nodes within the cloud um and those

00:13:40,240 --> 00:13:44,320
don't no longer have direct connections

00:13:42,480 --> 00:13:46,320
to the uh

00:13:44,320 --> 00:13:48,160
the cloud if you will that was under the

00:13:46,320 --> 00:13:49,680
old architecture they used to do that

00:13:48,160 --> 00:13:52,000
direct connections and they're trying to

00:13:49,680 --> 00:13:53,120
free that up so that the control loops

00:13:52,000 --> 00:13:55,199
are contained

00:13:53,120 --> 00:13:56,639
and it's much cleaner interface going

00:13:55,199 --> 00:13:59,839
forward so that

00:13:56,639 --> 00:14:01,600
the code that used to live in kubernetes

00:13:59,839 --> 00:14:04,800
can more easily be extracted

00:14:01,600 --> 00:14:06,480
dependencies can be broken that were

00:14:04,800 --> 00:14:08,000
specific to cloud providers that we

00:14:06,480 --> 00:14:10,079
could get these

00:14:08,000 --> 00:14:12,800
rolled out into their own repositories

00:14:10,079 --> 00:14:15,680
to to make it easier for everybody

00:14:12,800 --> 00:14:16,800
to both consume kubernetes but also to

00:14:15,680 --> 00:14:19,839
build

00:14:16,800 --> 00:14:23,120
cloud specific features for kubernetes

00:14:19,839 --> 00:14:26,480
so with that next slide please

00:14:23,120 --> 00:14:30,079
so this the cloud provider interface has

00:14:26,480 --> 00:14:32,720
several key interf interface

00:14:30,079 --> 00:14:34,480
functions that it provides the the

00:14:32,720 --> 00:14:37,199
biggest one for most folks

00:14:34,480 --> 00:14:38,800
is the load balancer so that is the

00:14:37,199 --> 00:14:41,120
interface where you're going to deliver

00:14:38,800 --> 00:14:43,040
load balancer service to kubernetes

00:14:41,120 --> 00:14:45,199
so kubernetes is going to call the cloud

00:14:43,040 --> 00:14:48,000
provider to you know create delete

00:14:45,199 --> 00:14:49,519
and update load balancers for the ibm

00:14:48,000 --> 00:14:50,800
cloud provider depending on

00:14:49,519 --> 00:14:53,440
whether you're running on classic

00:14:50,800 --> 00:14:56,000
infrastructure or vpc

00:14:53,440 --> 00:14:57,360
our next gen infrastructure you have a

00:14:56,000 --> 00:14:58,240
little bit different load balancers that

00:14:57,360 --> 00:15:00,320
are available

00:14:58,240 --> 00:15:02,320
um so in the classic you have a network

00:15:00,320 --> 00:15:05,680
load balancer based on

00:15:02,320 --> 00:15:07,680
uh ipps or ip tables it runs in cluster

00:15:05,680 --> 00:15:10,160
and then when you go to the vpc

00:15:07,680 --> 00:15:11,040
infrastructure you've got a layer 7 load

00:15:10,160 --> 00:15:12,720
balancer

00:15:11,040 --> 00:15:15,839
and then you also have a network load

00:15:12,720 --> 00:15:18,560
balancer which is new in our 119 release

00:15:15,839 --> 00:15:20,560
that we just delivered there's also the

00:15:18,560 --> 00:15:22,399
instances which is another huge one

00:15:20,560 --> 00:15:24,079
huge component to the cloud provider

00:15:22,399 --> 00:15:27,279
which is managing the nodes

00:15:24,079 --> 00:15:30,079
in particular um you want to know

00:15:27,279 --> 00:15:31,600
say where the zone region uh instance

00:15:30,079 --> 00:15:33,519
type of the node so that can be

00:15:31,600 --> 00:15:36,000
data fed back to kubernetes for

00:15:33,519 --> 00:15:38,720
important aspects of scheduling

00:15:36,000 --> 00:15:40,639
um and and so on so those are those are

00:15:38,720 --> 00:15:41,120
important pieces now being the managed

00:15:40,639 --> 00:15:42,800
service

00:15:41,120 --> 00:15:44,560
a lot of the bootstrapping happens it's

00:15:42,800 --> 00:15:45,680
part of the managed service and we take

00:15:44,560 --> 00:15:47,199
advantage of that through the cloud

00:15:45,680 --> 00:15:50,160
provider to deliver that

00:15:47,199 --> 00:15:50,959
data to kubernetes um the community has

00:15:50,160 --> 00:15:53,839
moved

00:15:50,959 --> 00:15:56,320
with this new architecture they saw the

00:15:53,839 --> 00:15:57,440
need for a new instances v2 interface as

00:15:56,320 --> 00:16:00,320
part of the cloud provider

00:15:57,440 --> 00:16:00,800
that was new in 119 as an alpha it's

00:16:00,320 --> 00:16:03,199
going to

00:16:00,800 --> 00:16:04,560
progress i i'm hoping to uh a beta and

00:16:03,199 --> 00:16:06,079
we're looking at taking advantage of

00:16:04,560 --> 00:16:08,000
that it's a little bit more streamlined

00:16:06,079 --> 00:16:11,040
interface to align with the new

00:16:08,000 --> 00:16:13,120
design of the cloud providers

00:16:11,040 --> 00:16:15,279
and then we do uh do some implementation

00:16:13,120 --> 00:16:16,399
for zones which is uh needed for load

00:16:15,279 --> 00:16:18,639
balancer and

00:16:16,399 --> 00:16:19,759
scheduling we don't do anything for

00:16:18,639 --> 00:16:22,000
clusters and routes

00:16:19,759 --> 00:16:22,880
we rely on the cni or the container

00:16:22,000 --> 00:16:24,880
network interface

00:16:22,880 --> 00:16:27,680
in our particular case for the managed

00:16:24,880 --> 00:16:30,480
service uh iks we use calico

00:16:27,680 --> 00:16:32,639
and likewise for rocks so we rely on

00:16:30,480 --> 00:16:36,399
that for doing routing

00:16:32,639 --> 00:16:38,560
all right next slide

00:16:36,399 --> 00:16:40,160
and so a little bit about the future so

00:16:38,560 --> 00:16:42,000
um as always

00:16:40,160 --> 00:16:43,680
um i don't have it on here but we

00:16:42,000 --> 00:16:46,720
continually take uh

00:16:43,680 --> 00:16:48,480
the data that we collect through uh

00:16:46,720 --> 00:16:50,160
running kubernetes both within the

00:16:48,480 --> 00:16:52,959
managed service based kubernetes

00:16:50,160 --> 00:16:54,079
and then within openshift and our

00:16:52,959 --> 00:16:57,519
managed service of

00:16:54,079 --> 00:17:00,320
through red hat there delivering

00:16:57,519 --> 00:17:02,320
what we know and um back to the

00:17:00,320 --> 00:17:04,880
kubernetes community what we learned

00:17:02,320 --> 00:17:06,720
running kubernetes at scale problem

00:17:04,880 --> 00:17:09,439
security things

00:17:06,720 --> 00:17:10,799
enhancements feedback we always try to

00:17:09,439 --> 00:17:12,959
deliver that back

00:17:10,799 --> 00:17:14,959
um also being part of the cloud provider

00:17:12,959 --> 00:17:15,839
we're looking to expand our role here

00:17:14,959 --> 00:17:17,679
especially

00:17:15,839 --> 00:17:19,280
if we can open source our ibm cloud

00:17:17,679 --> 00:17:21,600
provider things are

00:17:19,280 --> 00:17:23,839
aligning a little bit better as the kube

00:17:21,600 --> 00:17:26,240
community works to extract and migrate

00:17:23,839 --> 00:17:28,079
all those entry providers auditory

00:17:26,240 --> 00:17:29,280
making it a lot more easier to work on

00:17:28,079 --> 00:17:31,440
dependency management

00:17:29,280 --> 00:17:33,039
builds release processes they're all

00:17:31,440 --> 00:17:34,960
coming together to make it

00:17:33,039 --> 00:17:36,799
get us to a point where this is going to

00:17:34,960 --> 00:17:39,440
be much easier for

00:17:36,799 --> 00:17:40,400
for all cloud providers to to deliver in

00:17:39,440 --> 00:17:41,679
the future

00:17:40,400 --> 00:17:43,280
so with that we'll be looking at

00:17:41,679 --> 00:17:44,720
improving our docs our building test

00:17:43,280 --> 00:17:47,039
release processes

00:17:44,720 --> 00:17:49,520
um aligning our goal dependency

00:17:47,039 --> 00:17:51,039
management with what kubernetes does

00:17:49,520 --> 00:17:52,880
so these are all the activities that

00:17:51,039 --> 00:17:56,320
we're working on right now

00:17:52,880 --> 00:17:57,039
and in the future and that is it i'll

00:17:56,320 --> 00:18:00,080
turn it over

00:17:57,039 --> 00:18:03,200
to brad thank you richard

00:18:00,080 --> 00:18:05,600
yep so the ibm cloud provider project

00:18:03,200 --> 00:18:08,559
has as a sub project

00:18:05,600 --> 00:18:10,000
the cluster api provider ibm cloud

00:18:08,559 --> 00:18:12,720
subproject

00:18:10,000 --> 00:18:14,640
and um if you're not familiar with the

00:18:12,720 --> 00:18:16,640
cluster api provider

00:18:14,640 --> 00:18:18,799
projects in kubernetes basically they

00:18:16,640 --> 00:18:21,200
provide a a declarative

00:18:18,799 --> 00:18:21,840
model or approach and tooling to

00:18:21,200 --> 00:18:24,880
simplify

00:18:21,840 --> 00:18:28,640
the provisioning upgrading and operating

00:18:24,880 --> 00:18:31,520
of of clusters and so we have

00:18:28,640 --> 00:18:34,880
our active project in this space the uh

00:18:31,520 --> 00:18:36,960
cluster api provider ibm cloud

00:18:34,880 --> 00:18:39,280
and just just to see some of the basics

00:18:36,960 --> 00:18:41,440
here there's always a target cluster

00:18:39,280 --> 00:18:42,480
that's the cluster we intend to create

00:18:41,440 --> 00:18:44,640
and manage

00:18:42,480 --> 00:18:46,240
there's the bootstrap cluster that is

00:18:44,640 --> 00:18:48,240
typically a smaller cluster

00:18:46,240 --> 00:18:50,400
that's used to help get things started

00:18:48,240 --> 00:18:52,559
and helps helps to manage that target

00:18:50,400 --> 00:18:54,880
cluster

00:18:52,559 --> 00:18:56,000
there is a cluster control command so

00:18:54,880 --> 00:18:59,440
there's a command

00:18:56,000 --> 00:19:01,440
line interface that is makes life easy

00:18:59,440 --> 00:19:03,200
and makes it easy to run the the types

00:19:01,440 --> 00:19:04,480
of commands for for managing the

00:19:03,200 --> 00:19:06,720
clusters

00:19:04,480 --> 00:19:07,919
and you know ibm is one of many vendors

00:19:06,720 --> 00:19:10,960
that that has

00:19:07,919 --> 00:19:12,720
embraced uh you know this approach

00:19:10,960 --> 00:19:14,480
so you can see the architecture here on

00:19:12,720 --> 00:19:16,640
the right if you're interested

00:19:14,480 --> 00:19:17,679
again we have an active project in this

00:19:16,640 --> 00:19:20,160
space and

00:19:17,679 --> 00:19:22,240
uh feel free to go check it out and see

00:19:20,160 --> 00:19:23,760
what the team is working on

00:19:22,240 --> 00:19:25,360
lately i saw they're working on some

00:19:23,760 --> 00:19:27,760
upgrades so

00:19:25,360 --> 00:19:29,360
feel free to check that out uh next

00:19:27,760 --> 00:19:33,120
chart please sign up

00:19:29,360 --> 00:19:33,919
sure so one question that we always get

00:19:33,120 --> 00:19:36,720
in this session

00:19:33,919 --> 00:19:38,320
the one question that always comes up is

00:19:36,720 --> 00:19:39,840
what's the difference between kubernetes

00:19:38,320 --> 00:19:42,240
and open shift

00:19:39,840 --> 00:19:43,120
and um so we're going to go ahead and

00:19:42,240 --> 00:19:44,320
address it now

00:19:43,120 --> 00:19:47,520
because i'm sure it'll come up in the

00:19:44,320 --> 00:19:48,640
questions but openshift is a kubernetes

00:19:47,520 --> 00:19:51,760
distribution

00:19:48,640 --> 00:19:54,320
from red hat that includes extra tooling

00:19:51,760 --> 00:19:55,919
to simplify cloud native development and

00:19:54,320 --> 00:19:59,600
also provides automation

00:19:55,919 --> 00:20:02,880
automated operation support so

00:19:59,600 --> 00:20:06,159
when you start doing development for

00:20:02,880 --> 00:20:06,960
cloud native applications if you're just

00:20:06,159 --> 00:20:07,840
getting started

00:20:06,960 --> 00:20:10,240
you're going to start running in

00:20:07,840 --> 00:20:13,840
production it requires a lot of skills

00:20:10,240 --> 00:20:16,400
right so you need to be able to

00:20:13,840 --> 00:20:17,919
create container images and you

00:20:16,400 --> 00:20:20,240
typically need to know how to

00:20:17,919 --> 00:20:22,640
find a base image and then take your

00:20:20,240 --> 00:20:24,559
code and merge it into the base image

00:20:22,640 --> 00:20:27,120
and create the new image and push it to

00:20:24,559 --> 00:20:29,760
a registry

00:20:27,120 --> 00:20:31,039
and if you work with kube every day well

00:20:29,760 --> 00:20:32,559
maybe you're an expert at that and

00:20:31,039 --> 00:20:34,720
that's not so difficult

00:20:32,559 --> 00:20:37,200
but if you're a large organization and

00:20:34,720 --> 00:20:40,240
you say have lots of java programmers

00:20:37,200 --> 00:20:41,679
lots of python developers these are

00:20:40,240 --> 00:20:42,640
folks who want to get the benefit of

00:20:41,679 --> 00:20:44,320
cloud native

00:20:42,640 --> 00:20:46,480
but maybe don't have all those cloud

00:20:44,320 --> 00:20:49,360
native skills so one of the things that

00:20:46,480 --> 00:20:51,679
openshift provides is image creation and

00:20:49,360 --> 00:20:53,760
deployment tooling that makes it real

00:20:51,679 --> 00:20:55,840
easy for a developer to just push a

00:20:53,760 --> 00:20:58,960
change to a git repository

00:20:55,840 --> 00:21:01,600
this is called source to image and and

00:20:58,960 --> 00:21:02,640
through openshift it's able to recognize

00:21:01,600 --> 00:21:05,280
that

00:21:02,640 --> 00:21:07,440
find the right base image merge your new

00:21:05,280 --> 00:21:10,960
code changes into the base image and

00:21:07,440 --> 00:21:12,880
push it to a registry and so taking care

00:21:10,960 --> 00:21:14,320
of all those details is reducing the

00:21:12,880 --> 00:21:17,360
amount of friction

00:21:14,320 --> 00:21:19,520
for a developer who doesn't work

00:21:17,360 --> 00:21:21,440
in cloud native every day and is an

00:21:19,520 --> 00:21:23,280
expert at docker configs and

00:21:21,440 --> 00:21:25,360
and what have you to be able to get up

00:21:23,280 --> 00:21:27,440
and running and and run

00:21:25,360 --> 00:21:29,360
uh their application in a cloud-native

00:21:27,440 --> 00:21:32,080
fashion in a kubernetes

00:21:29,360 --> 00:21:33,919
environment so openshift will also give

00:21:32,080 --> 00:21:35,440
you image and configuration change

00:21:33,919 --> 00:21:37,120
detection

00:21:35,440 --> 00:21:38,559
the other thing that openshift does

00:21:37,120 --> 00:21:41,520
that's nice is it provides

00:21:38,559 --> 00:21:43,760
security guardrails so when you run in

00:21:41,520 --> 00:21:45,760
production compared to running in just

00:21:43,760 --> 00:21:47,440
your development environment you need to

00:21:45,760 --> 00:21:49,679
worry about security

00:21:47,440 --> 00:21:50,640
and in kubernetes there's a lot of knobs

00:21:49,679 --> 00:21:53,360
that you need to turn

00:21:50,640 --> 00:21:54,400
to get the the role based access control

00:21:53,360 --> 00:21:55,520
correct

00:21:54,400 --> 00:21:57,840
one of the things that openshift

00:21:55,520 --> 00:21:59,600
provides are security contacts or

00:21:57,840 --> 00:22:01,919
security profiles

00:21:59,600 --> 00:22:04,000
that make it much easier for a developer

00:22:01,919 --> 00:22:06,000
to get the right security that they need

00:22:04,000 --> 00:22:08,480
for production out of the box

00:22:06,000 --> 00:22:09,280
and not have to do a lot of of knob

00:22:08,480 --> 00:22:11,520
turning

00:22:09,280 --> 00:22:12,880
for a lot of individual values that that

00:22:11,520 --> 00:22:16,320
they're either guessing are

00:22:12,880 --> 00:22:19,360
properly configured or not

00:22:16,320 --> 00:22:21,360
similarly uh openshift in

00:22:19,360 --> 00:22:23,600
in its default form is going to prevent

00:22:21,360 --> 00:22:24,640
privileged containers by refer running

00:22:23,600 --> 00:22:26,159
by default

00:22:24,640 --> 00:22:27,919
and again why that's important is a

00:22:26,159 --> 00:22:30,640
privileged container is something that

00:22:27,919 --> 00:22:32,960
would have root access and if somehow

00:22:30,640 --> 00:22:34,159
there's a security breach those types of

00:22:32,960 --> 00:22:35,919
containers can cause

00:22:34,159 --> 00:22:38,240
way more harm than non-privileged

00:22:35,919 --> 00:22:40,960
containers so openshift is going to

00:22:38,240 --> 00:22:43,360
protect you in that way and also

00:22:40,960 --> 00:22:45,200
also try and deter you from running with

00:22:43,360 --> 00:22:47,840
the default name space again that can

00:22:45,200 --> 00:22:50,000
cause some security issues as well

00:22:47,840 --> 00:22:50,880
so a lot of tools to help you get up and

00:22:50,000 --> 00:22:53,760
running

00:22:50,880 --> 00:22:54,320
and provide production level security

00:22:53,760 --> 00:22:56,720
and

00:22:54,320 --> 00:22:59,440
reduce the level of expertise that your

00:22:56,720 --> 00:23:01,360
developers and operator operators need

00:22:59,440 --> 00:23:03,440
and also what openshift provides is

00:23:01,360 --> 00:23:05,440
automated cluster size management

00:23:03,440 --> 00:23:07,679
it'll automatically provision new worker

00:23:05,440 --> 00:23:10,080
nodes to increase the cluster size

00:23:07,679 --> 00:23:12,080
and it has great day two automated

00:23:10,080 --> 00:23:14,240
automated operation support

00:23:12,080 --> 00:23:16,080
so automated installation automated

00:23:14,240 --> 00:23:18,880
updates and cluster

00:23:16,080 --> 00:23:19,280
version management so a lot of features

00:23:18,880 --> 00:23:22,320
that

00:23:19,280 --> 00:23:25,280
that become very very valuable when

00:23:22,320 --> 00:23:26,960
you're ready to run in production so

00:23:25,280 --> 00:23:28,000
obviously ibm has just standard

00:23:26,960 --> 00:23:30,880
kubernetes and

00:23:28,000 --> 00:23:32,559
openshift as richard covered but those

00:23:30,880 --> 00:23:36,480
are the differences

00:23:32,559 --> 00:23:38,159
next chart and

00:23:36,480 --> 00:23:40,240
so that pretty much concludes our

00:23:38,159 --> 00:23:43,440
presentation and we'd like to thank you

00:23:40,240 --> 00:23:43,440

YouTube URL: https://www.youtube.com/watch?v=Xsx5Vg-ovFM


