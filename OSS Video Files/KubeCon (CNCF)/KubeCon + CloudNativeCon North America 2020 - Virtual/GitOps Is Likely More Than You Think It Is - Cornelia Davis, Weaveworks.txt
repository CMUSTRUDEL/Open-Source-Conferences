Title: GitOps Is Likely More Than You Think It Is - Cornelia Davis, Weaveworks
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

GitOps Is Likely More Than You Think It Is - Cornelia Davis, Weaveworks 

While the term “GitOps” has achieved almost mainstream use, confusion remains around what it is and the benefits it can bring. True, it involves continuous delivery (CD), but the way delivery is achieved as well as how CD interacts with workload operations, that is where GitOps gets really interesting. True, part of GitOps is leveraging Git abstractions like branches, pull requests and approval flows to manage the operational process, but GitOps is far more than the last step of CI. Instead it is about leveraging the most fundamental element of Kubernetes, reconciliation, both for CD and to link CD with the reconcilers that are automating workload operations. In this session Cornelia will cover the four key principles of GitOps, and she’ll demo those concepts with specific tools including Flux. She’ll also talk about use cases including cluster-api (CAPI). 

https://sched.co/ekBA
Captions: 
	00:00:00,719 --> 00:00:03,760
good morning good afternoon or good

00:00:02,320 --> 00:00:04,720
evening wherever you happen to be

00:00:03,760 --> 00:00:07,120
joining me from

00:00:04,720 --> 00:00:09,280
i'm so delighted you're here we are

00:00:07,120 --> 00:00:12,160
going to spend the next 35 minutes or so

00:00:09,280 --> 00:00:13,200
talking about get ops i'm betting that

00:00:12,160 --> 00:00:17,199
most of you have

00:00:13,200 --> 00:00:19,840
some idea of what git ops is

00:00:17,199 --> 00:00:21,840
but i'm betting that there's more to it

00:00:19,840 --> 00:00:23,359
than you might be thinking about

00:00:21,840 --> 00:00:25,680
and that's what i want to show you in

00:00:23,359 --> 00:00:27,599
the next half hour or so

00:00:25,680 --> 00:00:29,679
by way of a brief introduction my name

00:00:27,599 --> 00:00:31,119
is cornelia davis i'm the cto at

00:00:29,679 --> 00:00:33,040
weaveworks

00:00:31,119 --> 00:00:34,960
i've been in this industry for a long

00:00:33,040 --> 00:00:36,640
time about 30 years

00:00:34,960 --> 00:00:39,040
my background is in development i've

00:00:36,640 --> 00:00:40,480
always been a developer

00:00:39,040 --> 00:00:42,960
there's a little hint there that says

00:00:40,480 --> 00:00:44,320
wasn't ops but uh i can definitely

00:00:42,960 --> 00:00:46,879
consider myself a

00:00:44,320 --> 00:00:48,879
an ops person now as well been working

00:00:46,879 --> 00:00:50,480
in web architecture so gosh for well

00:00:48,879 --> 00:00:52,160
over 15 years

00:00:50,480 --> 00:00:54,160
cloud native for nearly a decade

00:00:52,160 --> 00:00:54,960
although i'll definitely concede to you

00:00:54,160 --> 00:00:58,160
that

00:00:54,960 --> 00:00:59,680
um we we didn't always call it cloud

00:00:58,160 --> 00:01:01,359
native we certainly didn't call it cloud

00:00:59,680 --> 00:01:03,920
native a decade ago

00:01:01,359 --> 00:01:06,080
um a lot of that experience comes from a

00:01:03,920 --> 00:01:08,080
long time working with cloud foundry

00:01:06,080 --> 00:01:09,119
which was a cloud-native application

00:01:08,080 --> 00:01:10,799
platform

00:01:09,119 --> 00:01:12,560
um that's been out there for quite some

00:01:10,799 --> 00:01:14,000
time i've been doing kubernetes for

00:01:12,560 --> 00:01:15,759
nearly four years which

00:01:14,000 --> 00:01:18,080
doesn't make me a veteran but it doesn't

00:01:15,759 --> 00:01:19,759
make me a total noob either

00:01:18,080 --> 00:01:21,680
um the other thing that i mentioned is

00:01:19,759 --> 00:01:23,920
that i'm the author of a book called

00:01:21,680 --> 00:01:25,520
cloud native patterns which is targeted

00:01:23,920 --> 00:01:26,640
at the application developer and

00:01:25,520 --> 00:01:29,280
architect

00:01:26,640 --> 00:01:30,880
and goes over all of the patterns that

00:01:29,280 --> 00:01:34,159
are required to make its

00:01:30,880 --> 00:01:36,560
software work really well in the cloud

00:01:34,159 --> 00:01:38,320
being software that works well in a

00:01:36,560 --> 00:01:40,479
highly distributed

00:01:38,320 --> 00:01:43,119
highly distributed environment that is

00:01:40,479 --> 00:01:46,240
experiencing constant change

00:01:43,119 --> 00:01:49,280
now that notion of cloud native is

00:01:46,240 --> 00:01:50,399
very relevant to the get ops area rather

00:01:49,280 --> 00:01:52,720
than focusing on

00:01:50,399 --> 00:01:54,240
the development of software the software

00:01:52,720 --> 00:01:56,479
patterns themselves

00:01:54,240 --> 00:01:58,479
what i want to do with git ops is talk

00:01:56,479 --> 00:02:02,799
about cloud native from an

00:01:58,479 --> 00:02:05,200
operational perspective so come along

00:02:02,799 --> 00:02:07,200
so i'm not going to spend a lot of time

00:02:05,200 --> 00:02:09,679
going into the details of the benefits

00:02:07,200 --> 00:02:11,599
that come from get offs

00:02:09,679 --> 00:02:13,040
we will talk about a few of those things

00:02:11,599 --> 00:02:15,040
as we go along

00:02:13,040 --> 00:02:16,080
but there are get ups we're not doing

00:02:15,040 --> 00:02:18,160
get ops for get out

00:02:16,080 --> 00:02:19,680
say there are certain benefits that we

00:02:18,160 --> 00:02:22,000
want to realize

00:02:19,680 --> 00:02:23,800
and those benefits really center around

00:02:22,000 --> 00:02:27,040
things like security

00:02:23,800 --> 00:02:31,440
repeatability recovery from

00:02:27,040 --> 00:02:34,560
failure productivity gains

00:02:31,440 --> 00:02:37,280
so that we can do things over and over

00:02:34,560 --> 00:02:38,640
reducing toil all of those types of

00:02:37,280 --> 00:02:41,040
things

00:02:38,640 --> 00:02:42,400
and the way that we do get offs is going

00:02:41,040 --> 00:02:45,519
to have a direct

00:02:42,400 --> 00:02:46,959
impact on the benefits that we get to

00:02:45,519 --> 00:02:50,000
enjoy

00:02:46,959 --> 00:02:52,319
now get ops is if you will a set of

00:02:50,000 --> 00:02:53,920
practices and patterns and then of

00:02:52,319 --> 00:02:56,319
course tools that help you

00:02:53,920 --> 00:02:58,159
implement those practices and patterns

00:02:56,319 --> 00:02:59,120
that really give you that devops

00:02:58,159 --> 00:03:00,800
environment

00:02:59,120 --> 00:03:03,040
that has come to dominate the way that

00:03:00,800 --> 00:03:04,879
we think about delivering digital assets

00:03:03,040 --> 00:03:06,959
these days

00:03:04,879 --> 00:03:09,599
so given that we want to achieve certain

00:03:06,959 --> 00:03:12,560
benefits the question then is

00:03:09,599 --> 00:03:14,640
how do you get ops what is get ops and

00:03:12,560 --> 00:03:18,400
how do we do it

00:03:14,640 --> 00:03:19,920
now i'm betting that most of you have if

00:03:18,400 --> 00:03:21,440
an impression of git ops that goes

00:03:19,920 --> 00:03:24,080
something like this

00:03:21,440 --> 00:03:25,920
we're going to store code and

00:03:24,080 --> 00:03:28,640
increasingly configuration

00:03:25,920 --> 00:03:31,920
in something like it after all git is

00:03:28,640 --> 00:03:33,920
the first part of the name get offs

00:03:31,920 --> 00:03:36,239
doing things in git is going to cause

00:03:33,920 --> 00:03:37,760
some automation to happen

00:03:36,239 --> 00:03:40,640
and that automation is going to

00:03:37,760 --> 00:03:43,440
configure some type of a runtime

00:03:40,640 --> 00:03:44,959
environment now git ops of course is

00:03:43,440 --> 00:03:47,120
applicable to

00:03:44,959 --> 00:03:49,120
both applications that are running in

00:03:47,120 --> 00:03:51,519
that runtime environment but you'll see

00:03:49,120 --> 00:03:53,599
as we go along that it's also

00:03:51,519 --> 00:03:55,519
very applicable to the configuration of

00:03:53,599 --> 00:03:58,000
that runtime environment and the

00:03:55,519 --> 00:04:00,319
standing up and maintain maintenance of

00:03:58,000 --> 00:04:03,280
that runtime environment as well

00:04:00,319 --> 00:04:05,120
oh and of course the whole one of the

00:04:03,280 --> 00:04:07,439
whole points of git ops is that the

00:04:05,120 --> 00:04:10,319
primary user interface

00:04:07,439 --> 00:04:12,080
for this get ops process is all the way

00:04:10,319 --> 00:04:12,799
back on the left hand side of this

00:04:12,080 --> 00:04:15,920
diagram

00:04:12,799 --> 00:04:17,680
on the get side so the ux is actually

00:04:15,920 --> 00:04:19,680
using git

00:04:17,680 --> 00:04:20,799
now that doesn't preclude other user

00:04:19,680 --> 00:04:23,600
experiences

00:04:20,799 --> 00:04:24,160
but git is it is one of the central ways

00:04:23,600 --> 00:04:26,080
that

00:04:24,160 --> 00:04:28,400
significant ways that we can interact

00:04:26,080 --> 00:04:29,040
with this get ops environment so rather

00:04:28,400 --> 00:04:30,880
than

00:04:29,040 --> 00:04:33,040
humans touching the right hand side of

00:04:30,880 --> 00:04:34,400
the slide we're touching the left hand

00:04:33,040 --> 00:04:36,720
side

00:04:34,400 --> 00:04:38,000
so this is if you will the 10 000 foot

00:04:36,720 --> 00:04:41,919
view of git ops

00:04:38,000 --> 00:04:44,400
and is this indeed what git ups is and

00:04:41,919 --> 00:04:47,600
the answer is yes

00:04:44,400 --> 00:04:51,199
but details

00:04:47,600 --> 00:04:52,639
do matter and how we actually put those

00:04:51,199 --> 00:04:55,280
pieces together

00:04:52,639 --> 00:04:56,639
and most notably how we do the

00:04:55,280 --> 00:04:59,360
automation

00:04:56,639 --> 00:05:00,880
that is in the center of that diagram

00:04:59,360 --> 00:05:03,600
that is going to have a direct

00:05:00,880 --> 00:05:07,120
impact on the level of benefits that we

00:05:03,600 --> 00:05:10,240
enjoy coming from our get ops practices

00:05:07,120 --> 00:05:12,240
now i have a confession to make i have

00:05:10,240 --> 00:05:13,280
been known to call myself a propeller

00:05:12,240 --> 00:05:16,400
head before

00:05:13,280 --> 00:05:17,199
and i am i am a technologist and what

00:05:16,400 --> 00:05:20,160
we're going to do

00:05:17,199 --> 00:05:22,080
in the next 30 minutes or so is i'm not

00:05:20,160 --> 00:05:23,039
going to present to you the principles

00:05:22,080 --> 00:05:26,800
of get ops

00:05:23,039 --> 00:05:28,320
we're gonna derive them so yes i'm a

00:05:26,800 --> 00:05:30,720
mathematician at heart

00:05:28,320 --> 00:05:32,560
and in mathematics we do derivations but

00:05:30,720 --> 00:05:34,800
if you're not a mathematician

00:05:32,560 --> 00:05:36,000
please stick with me because i think

00:05:34,800 --> 00:05:39,280
you'll enjoy this

00:05:36,000 --> 00:05:41,120
even if we don't you know do proofs at

00:05:39,280 --> 00:05:43,280
that level

00:05:41,120 --> 00:05:44,160
so i'm going to kick things off by going

00:05:43,280 --> 00:05:46,639
back to a

00:05:44,160 --> 00:05:48,720
version of this diagram that we just saw

00:05:46,639 --> 00:05:49,919
a moment ago it's perhaps a little bit

00:05:48,720 --> 00:05:52,320
more detailed

00:05:49,919 --> 00:05:54,080
but it does launch us on our journey of

00:05:52,320 --> 00:05:56,319
this derivation

00:05:54,080 --> 00:05:57,919
so this is a pattern that i'm sure most

00:05:56,319 --> 00:06:00,080
of you are familiar with we've got the

00:05:57,919 --> 00:06:01,759
developer and the devops engineer they

00:06:00,080 --> 00:06:03,600
might be the one same person they might

00:06:01,759 --> 00:06:05,440
be two different individuals

00:06:03,600 --> 00:06:08,240
and they're checking their code their

00:06:05,440 --> 00:06:10,880
source code into a repository

00:06:08,240 --> 00:06:11,520
they've well established ci practices

00:06:10,880 --> 00:06:13,440
that are

00:06:11,520 --> 00:06:15,120
these days because we're operating in a

00:06:13,440 --> 00:06:18,400
containerized environment

00:06:15,120 --> 00:06:20,319
generating those container images

00:06:18,400 --> 00:06:23,199
increasingly we're also storing the

00:06:20,319 --> 00:06:25,440
application configuration in git

00:06:23,199 --> 00:06:26,880
and then as we alluded to in the

00:06:25,440 --> 00:06:29,280
previous slide

00:06:26,880 --> 00:06:31,759
we're going to use some automation to

00:06:29,280 --> 00:06:34,160
draw those pieces together

00:06:31,759 --> 00:06:35,759
and get them running in some type of a

00:06:34,160 --> 00:06:38,080
runtime environment

00:06:35,759 --> 00:06:39,360
and this is kubecon so of course we're

00:06:38,080 --> 00:06:40,560
going to talk about that runtime

00:06:39,360 --> 00:06:44,720
environment being

00:06:40,560 --> 00:06:47,039
kubernetes now if we take a look at this

00:06:44,720 --> 00:06:49,199
and we think about that

00:06:47,039 --> 00:06:51,199
that automation how do we achieve that

00:06:49,199 --> 00:06:53,039
automation that i'm alluding to that's

00:06:51,199 --> 00:06:54,800
right in the middle there

00:06:53,039 --> 00:06:56,800
well we've already got some automation

00:06:54,800 --> 00:06:58,720
in this picture right well understood

00:06:56,800 --> 00:06:59,120
and well-established automation and that

00:06:58,720 --> 00:07:02,319
is

00:06:59,120 --> 00:07:04,080
the ci system so in fact that might be

00:07:02,319 --> 00:07:07,759
the first place that we might look

00:07:04,080 --> 00:07:10,800
is to say ah well can i just add

00:07:07,759 --> 00:07:12,639
to that ci process i mean after all

00:07:10,800 --> 00:07:15,039
continuous integration

00:07:12,639 --> 00:07:16,880
is extremely well understood we've been

00:07:15,039 --> 00:07:17,199
innovating in that space and maturing

00:07:16,880 --> 00:07:18,960
that

00:07:17,199 --> 00:07:20,720
and we have a deep understanding that

00:07:18,960 --> 00:07:22,639
it's been more than a decade

00:07:20,720 --> 00:07:23,840
probably closer to two decades where

00:07:22,639 --> 00:07:26,000
we've been putting some type of

00:07:23,840 --> 00:07:26,800
continuous integration processes in

00:07:26,000 --> 00:07:29,440
place

00:07:26,800 --> 00:07:30,880
and we've achieved all sorts of benefits

00:07:29,440 --> 00:07:34,080
from higher quality

00:07:30,880 --> 00:07:36,560
and shorter time and repeatability and

00:07:34,080 --> 00:07:38,560
the reduction of toil and developer

00:07:36,560 --> 00:07:41,520
productivity and all of that

00:07:38,560 --> 00:07:42,400
so it would be natural for us to think

00:07:41,520 --> 00:07:44,879
all right

00:07:42,400 --> 00:07:45,919
well let's go ahead and just insert

00:07:44,879 --> 00:07:49,120
deployment

00:07:45,919 --> 00:07:50,720
as a part of that automation but i'm

00:07:49,120 --> 00:07:53,360
going to argue to you

00:07:50,720 --> 00:07:54,000
that continuous integration is not the

00:07:53,360 --> 00:07:56,400
same

00:07:54,000 --> 00:07:57,280
as delete continuous delivery and

00:07:56,400 --> 00:07:59,599
deployment

00:07:57,280 --> 00:08:00,319
that there are reasons to separate those

00:07:59,599 --> 00:08:03,199
out

00:08:00,319 --> 00:08:04,879
and those reasons include things like if

00:08:03,199 --> 00:08:05,599
you are running in a regulated

00:08:04,879 --> 00:08:07,440
environment

00:08:05,599 --> 00:08:09,440
you know that you are dealing with

00:08:07,440 --> 00:08:12,000
separation concerns

00:08:09,440 --> 00:08:14,240
developers release code they are the

00:08:12,000 --> 00:08:16,639
ones that write the code and release it

00:08:14,240 --> 00:08:17,759
but then operate operators do the

00:08:16,639 --> 00:08:19,520
deployment

00:08:17,759 --> 00:08:21,039
they've got the keys to the production

00:08:19,520 --> 00:08:23,759
environment they've got

00:08:21,039 --> 00:08:24,560
a set of rigorous processes that they're

00:08:23,759 --> 00:08:26,879
trained

00:08:24,560 --> 00:08:28,000
that are intentionally not given to the

00:08:26,879 --> 00:08:30,080
developers

00:08:28,000 --> 00:08:32,640
again because the separation of concerns

00:08:30,080 --> 00:08:35,519
ensures certain levels of security that

00:08:32,640 --> 00:08:38,080
are difficult to achieve in other ways

00:08:35,519 --> 00:08:39,519
another thing is that you're very likely

00:08:38,080 --> 00:08:40,000
to take that artifact that you're

00:08:39,519 --> 00:08:42,159
creating

00:08:40,000 --> 00:08:43,760
in your continuous integration process

00:08:42,159 --> 00:08:45,360
and you're going to deploy it to many

00:08:43,760 --> 00:08:47,360
different environments

00:08:45,360 --> 00:08:49,120
so there's already kind of an inherent

00:08:47,360 --> 00:08:50,640
need for the decoupling

00:08:49,120 --> 00:08:53,040
so that we can go to those different

00:08:50,640 --> 00:08:54,320
environments and another reason for

00:08:53,040 --> 00:08:57,120
having decoupling

00:08:54,320 --> 00:08:57,519
is to be able to recreate a deployment

00:08:57,120 --> 00:08:59,760
that

00:08:57,519 --> 00:09:01,920
shouldn't and that because we've had

00:08:59,760 --> 00:09:04,320
some type of a failure for example

00:09:01,920 --> 00:09:06,080
and that shouldn't require a new build

00:09:04,320 --> 00:09:09,040
to be created

00:09:06,080 --> 00:09:10,560
so those are some of the reasons why we

00:09:09,040 --> 00:09:12,880
want to decouple these things

00:09:10,560 --> 00:09:14,880
so rather than having this picture what

00:09:12,880 --> 00:09:15,839
we want to do is we want to draw that

00:09:14,880 --> 00:09:18,880
deployment

00:09:15,839 --> 00:09:20,480
back out of continuous integration so

00:09:18,880 --> 00:09:22,800
one of the things i'm very fond of

00:09:20,480 --> 00:09:25,839
saying is that there's no cicd

00:09:22,800 --> 00:09:26,720
it's not one word there's ci and there's

00:09:25,839 --> 00:09:29,200
cd

00:09:26,720 --> 00:09:30,320
but there's absolute benefit in

00:09:29,200 --> 00:09:32,720
separating those

00:09:30,320 --> 00:09:35,040
and that's what we see in this picture

00:09:32,720 --> 00:09:37,040
so we no longer have it in the ci

00:09:35,040 --> 00:09:40,080
process

00:09:37,040 --> 00:09:41,440
now that cd process is great and

00:09:40,080 --> 00:09:43,200
one of the benefits that i didn't

00:09:41,440 --> 00:09:46,560
mention on the previous slide

00:09:43,200 --> 00:09:48,320
is that if you are including deployment

00:09:46,560 --> 00:09:50,160
as a part of your ci process

00:09:48,320 --> 00:09:52,320
that generally means that your ci

00:09:50,160 --> 00:09:54,399
process is being given the keys

00:09:52,320 --> 00:09:55,519
to that environment that deployment

00:09:54,399 --> 00:09:57,040
environment so

00:09:55,519 --> 00:09:59,360
you've got the keys or you've got the

00:09:57,040 --> 00:10:01,839
credentials those types of things

00:09:59,360 --> 00:10:03,440
which represents a security boundary

00:10:01,839 --> 00:10:05,040
even if you're not worried about the

00:10:03,440 --> 00:10:07,920
developers

00:10:05,040 --> 00:10:09,040
just having that system the ci system

00:10:07,920 --> 00:10:11,839
now is an attack

00:10:09,040 --> 00:10:13,600
surface and that is not at all uncommon

00:10:11,839 --> 00:10:15,839
for us to hear those stories

00:10:13,600 --> 00:10:17,440
where a breach happened because somebody

00:10:15,839 --> 00:10:18,320
was able to make it into the ci

00:10:17,440 --> 00:10:20,240
environment

00:10:18,320 --> 00:10:22,160
and through that get into the the

00:10:20,240 --> 00:10:25,120
runtime environment

00:10:22,160 --> 00:10:25,440
but beyond that if so now we say okay

00:10:25,120 --> 00:10:27,600
well

00:10:25,440 --> 00:10:28,959
the credentials aren't in the ci system

00:10:27,600 --> 00:10:30,959
and we can constrain those

00:10:28,959 --> 00:10:32,560
to being in the cd system we can say

00:10:30,959 --> 00:10:34,480
that the operators are the ones that are

00:10:32,560 --> 00:10:37,200
running the cd system

00:10:34,480 --> 00:10:40,320
so we've got the separation of concerns

00:10:37,200 --> 00:10:42,880
what happens if we now have this

00:10:40,320 --> 00:10:44,399
i'm doing that deployment to a bunch of

00:10:42,880 --> 00:10:47,920
different environments dev

00:10:44,399 --> 00:10:49,440
staging and prod now i'm back to needing

00:10:47,920 --> 00:10:52,480
the keys

00:10:49,440 --> 00:10:55,120
to dev staging and prod

00:10:52,480 --> 00:10:55,760
all from this kind of centralized hub

00:10:55,120 --> 00:10:59,040
and spoke

00:10:55,760 --> 00:11:01,680
cd system so i'm back to struggling with

00:10:59,040 --> 00:11:04,399
this security concern

00:11:01,680 --> 00:11:05,760
you can also imagine that there might be

00:11:04,399 --> 00:11:06,160
deployments where we're not talking

00:11:05,760 --> 00:11:08,959
about

00:11:06,160 --> 00:11:10,079
three targets we might be talking about

00:11:08,959 --> 00:11:13,120
hundreds

00:11:10,079 --> 00:11:15,120
of factory floors so we're starting to

00:11:13,120 --> 00:11:18,240
talk about edge deployments

00:11:15,120 --> 00:11:18,880
or you might have thousands of coffee

00:11:18,240 --> 00:11:22,399
shops

00:11:18,880 --> 00:11:24,800
or sandwich shops um or

00:11:22,399 --> 00:11:25,519
you might have tens of thousands of cell

00:11:24,800 --> 00:11:27,920
towers

00:11:25,519 --> 00:11:28,640
yes we're starting to see kubernetes

00:11:27,920 --> 00:11:32,000
running

00:11:28,640 --> 00:11:34,240
in cell towers so now in addition to

00:11:32,000 --> 00:11:36,800
those security challenges i've also got

00:11:34,240 --> 00:11:39,519
challenges of network connectivity

00:11:36,800 --> 00:11:41,600
i've got challenges of scale how many

00:11:39,519 --> 00:11:43,120
environments can the centralized system

00:11:41,600 --> 00:11:46,560
deal with the centralized

00:11:43,120 --> 00:11:48,240
cd system now there's an easy answer

00:11:46,560 --> 00:11:51,120
there's an easy solution to this and

00:11:48,240 --> 00:11:53,120
that is to just spin things around

00:11:51,120 --> 00:11:55,360
what we do then is we move the cd

00:11:53,120 --> 00:11:57,360
process from being a centralized thing

00:11:55,360 --> 00:11:59,440
to being out in the run time

00:11:57,360 --> 00:12:01,920
environments themselves

00:11:59,440 --> 00:12:04,160
and so rather than pushing configuration

00:12:01,920 --> 00:12:06,160
out to those runtime environments

00:12:04,160 --> 00:12:07,519
what we're going to do is pull the

00:12:06,160 --> 00:12:10,639
configuration

00:12:07,519 --> 00:12:12,000
into those runtime environments from the

00:12:10,639 --> 00:12:13,760
repositories

00:12:12,000 --> 00:12:16,399
now we'll see some patterns in just a

00:12:13,760 --> 00:12:18,079
little bit on how we can manage that at

00:12:16,399 --> 00:12:21,120
scale

00:12:18,079 --> 00:12:22,399
before we go to those patterns i have to

00:12:21,120 --> 00:12:25,519
ask the question

00:12:22,399 --> 00:12:26,160
well if we're pulling then how do we

00:12:25,519 --> 00:12:30,000
know

00:12:26,160 --> 00:12:31,839
when we need to pull the answer is that

00:12:30,000 --> 00:12:34,560
we don't have to

00:12:31,839 --> 00:12:35,600
we certainly can use events we could

00:12:34,560 --> 00:12:38,639
have something like

00:12:35,600 --> 00:12:41,680
a get push event trigger

00:12:38,639 --> 00:12:43,519
that type of reconciliation but

00:12:41,680 --> 00:12:45,040
then what happens if the network's down

00:12:43,519 --> 00:12:47,839
when that trigger happens

00:12:45,040 --> 00:12:49,200
you've got to deal with that well the

00:12:47,839 --> 00:12:52,240
good news is

00:12:49,200 --> 00:12:52,560
that we already have a pattern that we

00:12:52,240 --> 00:12:55,279
know

00:12:52,560 --> 00:12:56,880
works in this particular scenario we

00:12:55,279 --> 00:13:00,680
don't have to know

00:12:56,880 --> 00:13:04,800
when to reconcile because we have

00:13:00,680 --> 00:13:07,680
reconciliation loops that run forever

00:13:04,800 --> 00:13:08,720
and this is the core pattern that

00:13:07,680 --> 00:13:11,240
kubernetes

00:13:08,720 --> 00:13:13,920
really brought mainstream now this

00:13:11,240 --> 00:13:16,399
reconciliation pattern i have to say

00:13:13,920 --> 00:13:18,240
existed before kubernetes it existed in

00:13:16,399 --> 00:13:21,360
cloud foundry for example

00:13:18,240 --> 00:13:24,560
where we applied it to the orchestration

00:13:21,360 --> 00:13:26,160
we applied it to the um running of

00:13:24,560 --> 00:13:28,800
container images now

00:13:26,160 --> 00:13:30,480
those container images predate

00:13:28,800 --> 00:13:33,519
originally predated docker

00:13:30,480 --> 00:13:37,200
so they were it was well before oci

00:13:33,519 --> 00:13:40,480
and um we built our own reconciliation

00:13:37,200 --> 00:13:42,240
engine um in in cloud foundry

00:13:40,480 --> 00:13:44,480
now cloud foundry applied it to this

00:13:42,240 --> 00:13:46,959
very specific use case

00:13:44,480 --> 00:13:49,040
no question that kubernetes applied it

00:13:46,959 --> 00:13:52,720
more broadly kubernetes

00:13:49,040 --> 00:13:54,320
created this reconciliation platform

00:13:52,720 --> 00:13:56,240
if you will and we're going to see that

00:13:54,320 --> 00:13:57,839
play prominently through the rest of the

00:13:56,240 --> 00:14:00,480
presentation

00:13:57,839 --> 00:14:00,959
so we've got this notion of well we can

00:14:00,480 --> 00:14:03,040
just

00:14:00,959 --> 00:14:05,040
inside of these kubernetes clusters run

00:14:03,040 --> 00:14:07,680
these reconciliation loops

00:14:05,040 --> 00:14:08,320
that are going to constantly be drawing

00:14:07,680 --> 00:14:09,760
in

00:14:08,320 --> 00:14:12,480
the configuration from those

00:14:09,760 --> 00:14:14,320
repositories so we have the desired

00:14:12,480 --> 00:14:18,000
state in the repository

00:14:14,320 --> 00:14:18,800
the is watching the actual state of the

00:14:18,000 --> 00:14:20,880
system

00:14:18,800 --> 00:14:23,839
and it's doing what it needs to do to

00:14:20,880 --> 00:14:25,680
bring those two things together

00:14:23,839 --> 00:14:27,399
so that pattern that basic

00:14:25,680 --> 00:14:29,600
reconciliation pattern is

00:14:27,399 --> 00:14:32,720
extraordinarily powerful

00:14:29,600 --> 00:14:36,079
and it enables a whole bunch of

00:14:32,720 --> 00:14:36,880
other interesting patterns patterns that

00:14:36,079 --> 00:14:39,440
i like to call

00:14:36,880 --> 00:14:41,279
git ops patterns are cloud native

00:14:39,440 --> 00:14:44,480
operational patterns

00:14:41,279 --> 00:14:47,360
so let's talk through some of those now

00:14:44,480 --> 00:14:47,920
the first one well actually this is not

00:14:47,360 --> 00:14:50,560
the first

00:14:47,920 --> 00:14:52,480
pattern this is more like the you know

00:14:50,560 --> 00:14:53,360
maybe third pattern given that we talked

00:14:52,480 --> 00:14:55,519
about pull

00:14:53,360 --> 00:14:58,000
and we talked about reconciliation those

00:14:55,519 --> 00:15:01,120
are certainly two important patterns

00:14:58,000 --> 00:15:03,199
but let's talk about this next pattern

00:15:01,120 --> 00:15:05,519
the pattern that i taught called drift

00:15:03,199 --> 00:15:08,079
detection and remediation

00:15:05,519 --> 00:15:09,760
so we've done this great get ops process

00:15:08,079 --> 00:15:11,199
where we have

00:15:09,760 --> 00:15:13,120
declare put our declarative

00:15:11,199 --> 00:15:15,120
configuration in git we have a

00:15:13,120 --> 00:15:17,440
reconciler that is constantly

00:15:15,120 --> 00:15:20,160
drawing things the latest things in from

00:15:17,440 --> 00:15:23,120
git into the runtime environment

00:15:20,160 --> 00:15:24,880
and somebody comes along and does a

00:15:23,120 --> 00:15:27,199
coupe cuddle apply

00:15:24,880 --> 00:15:30,000
this is the modern day equivalent of

00:15:27,199 --> 00:15:32,800
sshing into a box

00:15:30,000 --> 00:15:34,720
um one of the benefits of course of

00:15:32,800 --> 00:15:38,480
storing configuration in git

00:15:34,720 --> 00:15:41,040
is that kit has a version history and so

00:15:38,480 --> 00:15:42,959
if we were to have some type of a

00:15:41,040 --> 00:15:45,279
catastrophic event and we needed to

00:15:42,959 --> 00:15:47,680
recreate our environment

00:15:45,279 --> 00:15:49,360
well so long as there hasn't been any

00:15:47,680 --> 00:15:52,399
drift from what we have

00:15:49,360 --> 00:15:53,600
in the declared configuration we're

00:15:52,399 --> 00:15:55,600
golden

00:15:53,600 --> 00:15:57,040
but again here somebody has done the

00:15:55,600 --> 00:16:00,560
modern day equivalent of

00:15:57,040 --> 00:16:01,600
sshing and we have drifted from that

00:16:00,560 --> 00:16:04,720
desired state

00:16:01,600 --> 00:16:05,759
as recorded in the system so what what

00:16:04,720 --> 00:16:09,199
do we do

00:16:05,759 --> 00:16:10,079
well that reconciler is constantly

00:16:09,199 --> 00:16:12,160
running

00:16:10,079 --> 00:16:14,160
and now what's happened is that the

00:16:12,160 --> 00:16:15,519
actual state has diverged from the

00:16:14,160 --> 00:16:18,399
desired state

00:16:15,519 --> 00:16:20,000
and the reconciliation loop can do some

00:16:18,399 --> 00:16:21,680
type of remediation

00:16:20,000 --> 00:16:23,040
now what is the remediation that you

00:16:21,680 --> 00:16:24,880
want well

00:16:23,040 --> 00:16:27,519
it can actually go back and say you know

00:16:24,880 --> 00:16:29,759
what i'm going to undo that change

00:16:27,519 --> 00:16:32,560
i'm going to go back to the state that

00:16:29,759 --> 00:16:34,959
was represented in the git repository

00:16:32,560 --> 00:16:35,839
or you might decide that you in fact

00:16:34,959 --> 00:16:37,680
want to just

00:16:35,839 --> 00:16:41,199
alert on that and you want to let

00:16:37,680 --> 00:16:43,279
somebody know that something's changed

00:16:41,199 --> 00:16:44,639
that is your prerogative and that's what

00:16:43,279 --> 00:16:46,800
you are going to tool

00:16:44,639 --> 00:16:48,399
into what i like to start calling a get

00:16:46,800 --> 00:16:50,320
ops pipeline

00:16:48,399 --> 00:16:52,720
stringing together these types of

00:16:50,320 --> 00:16:55,120
behaviors into the patterns that you

00:16:52,720 --> 00:16:57,759
need for your organization

00:16:55,120 --> 00:16:59,600
all right so that's one pattern let's

00:16:57,759 --> 00:17:02,160
talk about another one that i like to

00:16:59,600 --> 00:17:03,759
call image update automation

00:17:02,160 --> 00:17:05,280
now i've made a little bit of space in

00:17:03,759 --> 00:17:07,839
this slide in the middle

00:17:05,280 --> 00:17:08,480
to show you that what we have is just a

00:17:07,839 --> 00:17:10,799
basic

00:17:08,480 --> 00:17:12,400
application deployment we've got some

00:17:10,799 --> 00:17:15,439
yaml it's stored in the

00:17:12,400 --> 00:17:16,160
application configuration repository we

00:17:15,439 --> 00:17:17,760
have

00:17:16,160 --> 00:17:19,760
an image that's stored in an image

00:17:17,760 --> 00:17:22,160
registry and of course the yaml

00:17:19,760 --> 00:17:22,799
points to that particular image my image

00:17:22,160 --> 00:17:25,839
version

00:17:22,799 --> 00:17:28,240
1.0 0.0.1

00:17:25,839 --> 00:17:30,160
now that ci process somebody checks in

00:17:28,240 --> 00:17:33,039
new source code the ci process

00:17:30,160 --> 00:17:33,840
creates a new version of that container

00:17:33,039 --> 00:17:37,120
image

00:17:33,840 --> 00:17:39,280
and now what do we do of course i

00:17:37,120 --> 00:17:40,240
as an operator could go in and i can

00:17:39,280 --> 00:17:42,960
update that

00:17:40,240 --> 00:17:44,400
um that yaml configuration and i can

00:17:42,960 --> 00:17:46,960
check the new version of that yaml

00:17:44,400 --> 00:17:49,120
configuration into the git repository

00:17:46,960 --> 00:17:50,640
and through the magic of that reconciler

00:17:49,120 --> 00:17:52,400
that i talked about in the in the

00:17:50,640 --> 00:17:54,720
previous examples

00:17:52,400 --> 00:17:57,440
um that will get deployed out into the

00:17:54,720 --> 00:17:59,919
runtime environment

00:17:57,440 --> 00:18:00,559
but do i need to do that as a human by

00:17:59,919 --> 00:18:03,679
hand

00:18:00,559 --> 00:18:06,160
the answer is no how about

00:18:03,679 --> 00:18:09,039
we throw a reconciler in there that is

00:18:06,160 --> 00:18:12,240
constantly watching that container image

00:18:09,039 --> 00:18:13,600
uh a registry and it does the update in

00:18:12,240 --> 00:18:15,679
the yaml itself

00:18:13,600 --> 00:18:17,360
does the update in a copy of the ammo

00:18:15,679 --> 00:18:20,480
that's running within that

00:18:17,360 --> 00:18:23,520
reconciler environment then

00:18:20,480 --> 00:18:24,960
i can invoke another reconciler that is

00:18:23,520 --> 00:18:28,000
going to have the effect of

00:18:24,960 --> 00:18:30,160
pushing that into the git repository

00:18:28,000 --> 00:18:31,280
now it could do the commit in the push

00:18:30,160 --> 00:18:34,559
immediately

00:18:31,280 --> 00:18:37,039
or you could decide in your get get

00:18:34,559 --> 00:18:37,679
um get ops pipeline that what you want

00:18:37,039 --> 00:18:40,640
to do

00:18:37,679 --> 00:18:42,799
is actually generate a pull request that

00:18:40,640 --> 00:18:44,559
pull request goes into the repository

00:18:42,799 --> 00:18:46,320
somebody approves it or maybe it's

00:18:44,559 --> 00:18:49,120
automatically approved

00:18:46,320 --> 00:18:51,520
and then what happens well this is the

00:18:49,120 --> 00:18:53,919
pattern that we already know and love

00:18:51,520 --> 00:18:55,679
is we have the reconciler that's running

00:18:53,919 --> 00:18:57,520
inside the runtime environment that

00:18:55,679 --> 00:19:00,559
pulls the latest version in

00:18:57,520 --> 00:19:03,760
and has the effect of deploying

00:19:00,559 --> 00:19:04,640
the updated version of that image so

00:19:03,760 --> 00:19:07,679
that's another

00:19:04,640 --> 00:19:09,520
pattern now you might notice

00:19:07,679 --> 00:19:11,120
in tint that there's a number of

00:19:09,520 --> 00:19:12,960
reconcilers here

00:19:11,120 --> 00:19:14,880
you're gonna see where we're where we're

00:19:12,960 --> 00:19:16,799
going with those reconcilers

00:19:14,880 --> 00:19:19,440
and how we stitch all those two things

00:19:16,799 --> 00:19:22,480
together in just a little bit

00:19:19,440 --> 00:19:25,280
but let's talk about another because uh

00:19:22,480 --> 00:19:26,320
another pattern and that is environment

00:19:25,280 --> 00:19:28,880
customizations

00:19:26,320 --> 00:19:31,280
remember we talked about this earlier so

00:19:28,880 --> 00:19:33,600
we talked about the fact that i have

00:19:31,280 --> 00:19:35,919
dev staging and prod and they're all

00:19:33,600 --> 00:19:37,840
going to be deploying this application

00:19:35,919 --> 00:19:39,840
and while a lot of the application

00:19:37,840 --> 00:19:40,960
deployment configuration is going to be

00:19:39,840 --> 00:19:42,960
exactly the same

00:19:40,960 --> 00:19:44,320
there's going to be some differences

00:19:42,960 --> 00:19:46,880
across those

00:19:44,320 --> 00:19:49,679
so how do we deal with that again let me

00:19:46,880 --> 00:19:52,320
make a little space in this diagram

00:19:49,679 --> 00:19:53,840
and i'm going to talk very briefly about

00:19:52,320 --> 00:19:56,559
customize

00:19:53,840 --> 00:19:57,039
with the k customize allows us to do

00:19:56,559 --> 00:19:59,120
this

00:19:57,039 --> 00:20:01,039
that allows us to store in the

00:19:59,120 --> 00:20:04,559
application configuration

00:20:01,039 --> 00:20:07,760
first of all some description of some

00:20:04,559 --> 00:20:10,799
some uh configuration that has a base

00:20:07,760 --> 00:20:11,520
so it has some commonality so this

00:20:10,799 --> 00:20:13,280
deployment

00:20:11,520 --> 00:20:15,120
my deployment is going to go into dev

00:20:13,280 --> 00:20:17,360
staging and prod

00:20:15,120 --> 00:20:18,960
but then it also allows me to apply

00:20:17,360 --> 00:20:21,360
overlays on top of that

00:20:18,960 --> 00:20:23,039
essentially overrides on some of the

00:20:21,360 --> 00:20:24,159
basic things that are in that base

00:20:23,039 --> 00:20:27,760
pattern

00:20:24,159 --> 00:20:30,720
now those overrides can be handled

00:20:27,760 --> 00:20:32,480
by reconcilers so we can actually apply

00:20:30,720 --> 00:20:35,039
these customizations

00:20:32,480 --> 00:20:36,480
as a part of our get ops pipeline and

00:20:35,039 --> 00:20:38,880
those

00:20:36,480 --> 00:20:40,640
um reconcilers those customized

00:20:38,880 --> 00:20:42,640
reconcilers can operate

00:20:40,640 --> 00:20:44,880
independently in each of these different

00:20:42,640 --> 00:20:46,960
runtime environments

00:20:44,880 --> 00:20:48,080
so doing environment customizations is

00:20:46,960 --> 00:20:51,520
an also an important

00:20:48,080 --> 00:20:54,320
pattern all right so

00:20:51,520 --> 00:20:56,320
we had started here and those patterns

00:20:54,320 --> 00:20:59,440
that i just described to you

00:20:56,320 --> 00:21:02,080
really are addressing this

00:20:59,440 --> 00:21:02,640
they're saying all right there's a whole

00:21:02,080 --> 00:21:04,480
bunch of

00:21:02,640 --> 00:21:06,080
processes there's a whole bunch of

00:21:04,480 --> 00:21:08,720
detail that's required

00:21:06,080 --> 00:21:10,720
in this process of taking these

00:21:08,720 --> 00:21:13,760
application configurations

00:21:10,720 --> 00:21:15,120
and these image images in the from the

00:21:13,760 --> 00:21:18,159
image registries

00:21:15,120 --> 00:21:20,960
and composing them together

00:21:18,159 --> 00:21:22,400
into the actual declarative state that's

00:21:20,960 --> 00:21:23,360
going to be running in my runtime

00:21:22,400 --> 00:21:25,280
environment

00:21:23,360 --> 00:21:27,039
and i like to call those set of

00:21:25,280 --> 00:21:29,120
controllers that we've just been talking

00:21:27,039 --> 00:21:32,640
about the set of reconcilers

00:21:29,120 --> 00:21:33,200
delivery controllers and hang on a

00:21:32,640 --> 00:21:36,320
second

00:21:33,200 --> 00:21:38,799
i said this is about deployment

00:21:36,320 --> 00:21:41,120
and i don't know that delivery of

00:21:38,799 --> 00:21:44,159
configuration manifests

00:21:41,120 --> 00:21:47,440
really encompasses all of deployment

00:21:44,159 --> 00:21:50,640
so have we achieved deployment

00:21:47,440 --> 00:21:53,840
well we're getting there but we're not

00:21:50,640 --> 00:21:56,880
quite there yet so let's look at

00:21:53,840 --> 00:22:00,400
one more pattern

00:21:56,880 --> 00:22:02,640
now if we remember we were here recall

00:22:00,400 --> 00:22:03,600
that in image update automation we had

00:22:02,640 --> 00:22:05,440
this pattern

00:22:03,600 --> 00:22:07,440
remember we had reconcilers that were

00:22:05,440 --> 00:22:10,080
watching the registries

00:22:07,440 --> 00:22:10,960
and updating the the references in the

00:22:10,080 --> 00:22:13,120
yaml

00:22:10,960 --> 00:22:14,720
then we had reconcilers that were

00:22:13,120 --> 00:22:17,120
interfacing with git

00:22:14,720 --> 00:22:18,480
to do things like pull requests or maybe

00:22:17,120 --> 00:22:20,799
automatically committing

00:22:18,480 --> 00:22:22,320
things into the git repository and then

00:22:20,799 --> 00:22:24,799
of course we had the reconcilers that

00:22:22,320 --> 00:22:27,760
were drawing those configurations

00:22:24,799 --> 00:22:29,280
doing the composition like using using

00:22:27,760 --> 00:22:30,320
customize like i showed in the last

00:22:29,280 --> 00:22:32,880
example

00:22:30,320 --> 00:22:34,000
and then drawing those into the runtime

00:22:32,880 --> 00:22:35,520
environment

00:22:34,000 --> 00:22:37,600
now this is a little bit too

00:22:35,520 --> 00:22:39,200
coarse-grained we need to get a little

00:22:37,600 --> 00:22:41,919
bit more detailed here

00:22:39,200 --> 00:22:43,679
and that is to say that technically what

00:22:41,919 --> 00:22:44,559
we were doing was we weren't getting all

00:22:43,679 --> 00:22:47,120
the way to the

00:22:44,559 --> 00:22:48,480
running of those applications what we

00:22:47,120 --> 00:22:50,320
were effectively doing

00:22:48,480 --> 00:22:51,679
with those reconcilers is getting to the

00:22:50,320 --> 00:22:53,039
point where we had drawn that

00:22:51,679 --> 00:22:56,880
configuration

00:22:53,039 --> 00:22:59,919
into kubernetes into fcd

00:22:56,880 --> 00:23:01,840
so now we've landed that in fcd

00:22:59,919 --> 00:23:03,440
the next step of course to get all the

00:23:01,840 --> 00:23:06,880
way to runtime

00:23:03,440 --> 00:23:08,640
is that we have those that we have

00:23:06,880 --> 00:23:11,919
running pods in the end

00:23:08,640 --> 00:23:14,880
now how did we get those running pods

00:23:11,919 --> 00:23:15,520
well you might say that's kubernetes and

00:23:14,880 --> 00:23:18,960
of course it

00:23:15,520 --> 00:23:20,159
is but how does kubernetes do it it does

00:23:18,960 --> 00:23:23,280
it

00:23:20,159 --> 00:23:25,360
with reconcilers right it has a

00:23:23,280 --> 00:23:27,679
reconciler for the deployment

00:23:25,360 --> 00:23:29,280
it has a reconciler for replica sets it

00:23:27,679 --> 00:23:32,480
has a deployment

00:23:29,280 --> 00:23:36,000
a reconciler for

00:23:32,480 --> 00:23:39,039
daemon sets and so on so

00:23:36,000 --> 00:23:42,400
it is kubernetes that has these what i

00:23:39,039 --> 00:23:43,919
call runtime controllers that complete

00:23:42,400 --> 00:23:46,320
the picture

00:23:43,919 --> 00:23:48,080
now the real magic happens when we start

00:23:46,320 --> 00:23:50,799
to draw together

00:23:48,080 --> 00:23:52,320
all of these different reconcilers all

00:23:50,799 --> 00:23:56,799
of these different controllers

00:23:52,320 --> 00:23:59,039
across this entire spectrum now

00:23:56,799 --> 00:24:00,720
all right so kubernetes has these

00:23:59,039 --> 00:24:03,279
runtime controllers

00:24:00,720 --> 00:24:05,279
but as i suggested earlier kubernetes

00:24:03,279 --> 00:24:06,240
isn't just about runtime controllers for

00:24:05,279 --> 00:24:08,080
pods

00:24:06,240 --> 00:24:10,000
it's actually a platform for

00:24:08,080 --> 00:24:14,559
reconciliation loops

00:24:10,000 --> 00:24:18,000
so what if you want different deployment

00:24:14,559 --> 00:24:21,679
behavior for example what can you do

00:24:18,000 --> 00:24:24,720
with that well what if you want

00:24:21,679 --> 00:24:27,279
canary style rolling upgrades

00:24:24,720 --> 00:24:27,919
what if you want blue green what if you

00:24:27,279 --> 00:24:29,679
want a b

00:24:27,919 --> 00:24:32,159
testing where you're actually going to

00:24:29,679 --> 00:24:33,120
run both two versions of something in

00:24:32,159 --> 00:24:35,520
parallel

00:24:33,120 --> 00:24:37,120
and actually use the metrics coming out

00:24:35,520 --> 00:24:40,640
of those to make decisions

00:24:37,120 --> 00:24:41,520
on you know who gets what and and where

00:24:40,640 --> 00:24:45,120
the traffic

00:24:41,520 --> 00:24:48,559
goes so different deployment scenarios

00:24:45,120 --> 00:24:52,880
how does that work well

00:24:48,559 --> 00:24:55,919
what you can do is you guessed it

00:24:52,880 --> 00:24:59,520
you can have a reconciler kubernetes

00:24:55,919 --> 00:25:02,720
ex is allows you to extend the api

00:24:59,520 --> 00:25:05,120
so you can create a reconciler that for

00:25:02,720 --> 00:25:06,080
example recognizes when a deployment is

00:25:05,120 --> 00:25:08,960
happening

00:25:06,080 --> 00:25:10,640
and provides some additional logic on

00:25:08,960 --> 00:25:12,960
top of that

00:25:10,640 --> 00:25:14,000
now as it happens one of the projects

00:25:12,960 --> 00:25:15,919
that we have worked on

00:25:14,000 --> 00:25:17,120
here at weaveworks is a project called

00:25:15,919 --> 00:25:20,080
flagger

00:25:17,120 --> 00:25:21,440
it is totally open source and it does

00:25:20,080 --> 00:25:24,640
exactly that

00:25:21,440 --> 00:25:25,760
it allows you to define a deployment

00:25:24,640 --> 00:25:28,720
strategy

00:25:25,760 --> 00:25:30,480
progressive delivery as james governor

00:25:28,720 --> 00:25:32,799
had coined that term

00:25:30,480 --> 00:25:34,240
and it allows you to select one of these

00:25:32,799 --> 00:25:38,159
release strategies

00:25:34,240 --> 00:25:41,279
canaries a b testing blue green

00:25:38,159 --> 00:25:44,559
and then it interfaces with ingress

00:25:41,279 --> 00:25:48,000
either kind of plain vanilla ingress

00:25:44,559 --> 00:25:50,240
like an engine x or a service mesh

00:25:48,000 --> 00:25:52,320
and it interfaces with the ingress or

00:25:50,240 --> 00:25:53,120
the service mesh to do the traffic

00:25:52,320 --> 00:25:56,400
routing

00:25:53,120 --> 00:25:59,440
to provide exactly those types of

00:25:56,400 --> 00:26:01,760
release strategies that you're going for

00:25:59,440 --> 00:26:03,840
and how is that implemented of course it

00:26:01,760 --> 00:26:06,159
is implemented as a set of controllers

00:26:03,840 --> 00:26:08,480
that run in the kubernetes

00:26:06,159 --> 00:26:10,640
um this project is open source you can

00:26:08,480 --> 00:26:12,960
find it there at the url and i won't go

00:26:10,640 --> 00:26:13,919
more into the details but what you can

00:26:12,960 --> 00:26:16,559
see there and

00:26:13,919 --> 00:26:17,279
really the point that i'm getting to is

00:26:16,559 --> 00:26:19,200
that

00:26:17,279 --> 00:26:20,720
not only are we going to leverage the

00:26:19,200 --> 00:26:22,080
runtime controllers that are in

00:26:20,720 --> 00:26:24,640
kubernetes we can

00:26:22,080 --> 00:26:25,360
also extend things with the runtime

00:26:24,640 --> 00:26:28,159
controllers

00:26:25,360 --> 00:26:28,159
ourselves

00:26:30,159 --> 00:26:35,760
okay that's a lot

00:26:33,279 --> 00:26:37,440
if we go back to this picture that i

00:26:35,760 --> 00:26:40,880
just showed you a moment ago

00:26:37,440 --> 00:26:44,000
there's reconcilers all over this

00:26:40,880 --> 00:26:45,600
how can i possibly manage that

00:26:44,000 --> 00:26:48,240
well the first thing that i want to show

00:26:45,600 --> 00:26:51,440
you is that in fact

00:26:48,240 --> 00:26:53,840
this is a version of the very first

00:26:51,440 --> 00:26:56,240
very simple diagram that i started with

00:26:53,840 --> 00:26:59,200
at the beginning of the presentation

00:26:56,240 --> 00:27:00,000
let me show that to you again we've got

00:26:59,200 --> 00:27:02,480
something

00:27:00,000 --> 00:27:04,799
we've restoring some declarative

00:27:02,480 --> 00:27:06,320
configuration and git

00:27:04,799 --> 00:27:08,080
then we have a set of delivery

00:27:06,320 --> 00:27:11,520
controllers

00:27:08,080 --> 00:27:14,000
that facilitate the delivery

00:27:11,520 --> 00:27:14,640
with whatever the pipeline is i want

00:27:14,000 --> 00:27:17,360
into

00:27:14,640 --> 00:27:18,159
xcd then i have a set of runtime

00:27:17,360 --> 00:27:20,320
controllers

00:27:18,159 --> 00:27:22,559
that actually achieve getting that

00:27:20,320 --> 00:27:25,760
running in production

00:27:22,559 --> 00:27:28,080
remember that is we store

00:27:25,760 --> 00:27:29,120
code and configuration we've got

00:27:28,080 --> 00:27:32,640
automation

00:27:29,120 --> 00:27:35,440
and we've got a runtime environment oh

00:27:32,640 --> 00:27:36,960
and of course the user interface for

00:27:35,440 --> 00:27:39,440
this entire system

00:27:36,960 --> 00:27:41,039
is all the way on the left hand side

00:27:39,440 --> 00:27:43,520
with git

00:27:41,039 --> 00:27:45,600
so it is if you will that very simple

00:27:43,520 --> 00:27:47,600
picture that i showed at the beginning

00:27:45,600 --> 00:27:49,919
but hopefully you're getting the idea

00:27:47,600 --> 00:27:52,159
now that the way that we do that

00:27:49,919 --> 00:27:55,760
automation in the middle

00:27:52,159 --> 00:27:59,120
has to be cloud native cloud native

00:27:55,760 --> 00:28:02,559
operations is what git ops is all about

00:27:59,120 --> 00:28:05,360
let me kind of put a bow on this now

00:28:02,559 --> 00:28:07,840
i like to think of get ops as this those

00:28:05,360 --> 00:28:09,760
set of delivery controllers

00:28:07,840 --> 00:28:11,760
and the delivery controllers i haven't

00:28:09,760 --> 00:28:12,960
been referring to them by name but some

00:28:11,760 --> 00:28:14,880
of the ones that

00:28:12,960 --> 00:28:16,399
that i referred to earlier in our

00:28:14,880 --> 00:28:18,320
derivation where things like

00:28:16,399 --> 00:28:20,399
that we call the source controller or

00:28:18,320 --> 00:28:23,120
the customize controller or the image

00:28:20,399 --> 00:28:24,480
up automation image update automation

00:28:23,120 --> 00:28:26,960
controller

00:28:24,480 --> 00:28:29,120
on the runtime side we have the ones

00:28:26,960 --> 00:28:31,279
that are baked into kubernetes like

00:28:29,120 --> 00:28:32,799
the replica set controller or the daemon

00:28:31,279 --> 00:28:35,679
set controller or

00:28:32,799 --> 00:28:36,720
flagger is an extended controller and

00:28:35,679 --> 00:28:40,159
yes

00:28:36,720 --> 00:28:43,360
cluster api controllers those

00:28:40,159 --> 00:28:46,000
cluster api and get ops match made in

00:28:43,360 --> 00:28:48,720
heaven they work beautifully together

00:28:46,000 --> 00:28:50,960
so you take those controllers and then

00:28:48,720 --> 00:28:53,679
you stitch them together

00:28:50,960 --> 00:28:55,039
into the pipelines that are relevant for

00:28:53,679 --> 00:28:58,240
your organization

00:28:55,039 --> 00:29:01,279
and for your needs and that's

00:28:58,240 --> 00:29:04,320
what draws together get offs

00:29:01,279 --> 00:29:07,200
so to go back to this picture we've now

00:29:04,320 --> 00:29:08,960
completed this entire cycle we've got

00:29:07,200 --> 00:29:11,120
continuous integration on the far

00:29:08,960 --> 00:29:13,200
left we talked about the delivery

00:29:11,120 --> 00:29:14,320
controllers we added on the runtime

00:29:13,200 --> 00:29:16,799
controllers

00:29:14,320 --> 00:29:18,880
and you draw all of that together and

00:29:16,799 --> 00:29:22,000
you get get offs

00:29:18,880 --> 00:29:24,960
so get offs is not

00:29:22,000 --> 00:29:25,520
just about delivery it is in fact get

00:29:24,960 --> 00:29:27,679
offs

00:29:25,520 --> 00:29:28,640
is the combination of continuous

00:29:27,679 --> 00:29:30,720
delivery

00:29:28,640 --> 00:29:31,679
delivery controllers and continuous

00:29:30,720 --> 00:29:33,919
operations

00:29:31,679 --> 00:29:35,120
runtime controllers and when you put

00:29:33,919 --> 00:29:38,480
those things together

00:29:35,120 --> 00:29:40,880
that's where a lot of magic happens

00:29:38,480 --> 00:29:41,919
now i had promised you that we were

00:29:40,880 --> 00:29:44,000
going to

00:29:41,919 --> 00:29:46,080
derive principles we were going to go

00:29:44,000 --> 00:29:48,799
back to first principles

00:29:46,080 --> 00:29:50,399
so often times when i've spoken about

00:29:48,799 --> 00:29:52,480
get-offs in the past

00:29:50,399 --> 00:29:53,760
i've started by presenting these

00:29:52,480 --> 00:29:57,279
principles

00:29:53,760 --> 00:29:59,039
but today the whole idea was to

00:29:57,279 --> 00:30:00,480
kind of maybe challenge your assumptions

00:29:59,039 --> 00:30:03,279
on what git ops is

00:30:00,480 --> 00:30:04,240
and to derive those principles from

00:30:03,279 --> 00:30:06,399
scratch

00:30:04,240 --> 00:30:08,480
but let me now summarize and review

00:30:06,399 --> 00:30:11,440
those principles

00:30:08,480 --> 00:30:13,200
that we've just gone over i'm going to

00:30:11,440 --> 00:30:15,840
start with the bookends

00:30:13,200 --> 00:30:18,080
on the left hand side we have

00:30:15,840 --> 00:30:21,120
declarative configuration

00:30:18,080 --> 00:30:23,679
that's yaml for example

00:30:21,120 --> 00:30:25,279
on the right hand side we have the

00:30:23,679 --> 00:30:28,320
software agents

00:30:25,279 --> 00:30:31,919
so the deployment controllers

00:30:28,320 --> 00:30:35,039
for example deployment replica set these

00:30:31,919 --> 00:30:37,840
are two foundational principles that

00:30:35,039 --> 00:30:39,600
kubernetes brought to the party

00:30:37,840 --> 00:30:41,039
without those two foundational

00:30:39,600 --> 00:30:44,240
principles we wouldn't have

00:30:41,039 --> 00:30:46,640
gitoffs as we have it today

00:30:44,240 --> 00:30:48,080
that really seated the ability to get

00:30:46,640 --> 00:30:50,559
this started

00:30:48,080 --> 00:30:51,440
so we have those two bookends and what

00:30:50,559 --> 00:30:54,720
we've done with

00:30:51,440 --> 00:30:58,000
get offs is we've added two more

00:30:54,720 --> 00:30:59,840
elements on in the middle we've said

00:30:58,000 --> 00:31:01,120
well if i've got that declarative

00:30:59,840 --> 00:31:04,640
configuration

00:31:01,120 --> 00:31:06,080
and i now add storing that declarative

00:31:04,640 --> 00:31:10,640
configuration

00:31:06,080 --> 00:31:14,720
in a version version controlled

00:31:10,640 --> 00:31:18,399
immutable store that has semantics

00:31:14,720 --> 00:31:19,120
like git then i achieve those benefits

00:31:18,399 --> 00:31:22,399
of things like

00:31:19,120 --> 00:31:25,200
roll forward rather than roll back i can

00:31:22,399 --> 00:31:27,200
always get back to an earlier

00:31:25,200 --> 00:31:29,440
configuration that i know worked

00:31:27,200 --> 00:31:32,000
or if i have a disaster i can recover

00:31:29,440 --> 00:31:35,360
from that disaster very quickly

00:31:32,000 --> 00:31:38,080
so that is another magical element now

00:31:35,360 --> 00:31:40,480
yes i also alluded and mentioned several

00:31:38,080 --> 00:31:43,039
times that it is the user interface

00:31:40,480 --> 00:31:44,320
it doesn't have to be the user interface

00:31:43,039 --> 00:31:47,039
and there are some very

00:31:44,320 --> 00:31:47,840
interesting other user experiences that

00:31:47,039 --> 00:31:50,399
don't involve

00:31:47,840 --> 00:31:53,519
necessarily going in and creating a pull

00:31:50,399 --> 00:31:55,760
request by hand

00:31:53,519 --> 00:31:56,559
but some of those abstractions those git

00:31:55,760 --> 00:31:59,200
semantics

00:31:56,559 --> 00:32:00,000
are important and very very heavily

00:31:59,200 --> 00:32:02,320
leveraged so

00:32:00,000 --> 00:32:05,120
i like to say that git plays the role of

00:32:02,320 --> 00:32:07,120
both a potential user experience as well

00:32:05,120 --> 00:32:08,960
as a distributed data store

00:32:07,120 --> 00:32:10,559
that is immutable and has a version

00:32:08,960 --> 00:32:13,519
history and then

00:32:10,559 --> 00:32:14,480
finally the third thing the third column

00:32:13,519 --> 00:32:17,360
over there

00:32:14,480 --> 00:32:18,640
is that we have this set of delivery

00:32:17,360 --> 00:32:21,600
controllers

00:32:18,640 --> 00:32:24,159
that automatically apply but that allow

00:32:21,600 --> 00:32:27,360
me to build the pipelines that i need

00:32:24,159 --> 00:32:30,559
to apply those patterns in

00:32:27,360 --> 00:32:32,880
the entire get ops practice and that's

00:32:30,559 --> 00:32:36,799
what we've done is we've just derived

00:32:32,880 --> 00:32:39,519
those four key get ops principles

00:32:36,799 --> 00:32:40,240
now i won't go over this in detail but

00:32:39,519 --> 00:32:42,320
you've

00:32:40,240 --> 00:32:43,440
heard me talk about these get-ups

00:32:42,320 --> 00:32:45,360
patterns

00:32:43,440 --> 00:32:48,399
or as i also like to call them

00:32:45,360 --> 00:32:52,080
cloud-native operational patterns

00:32:48,399 --> 00:32:54,559
um over the years as we got better and

00:32:52,080 --> 00:32:56,000
better at microservice architectures we

00:32:54,559 --> 00:32:58,080
learned a whole suite

00:32:56,000 --> 00:32:59,840
of patterns that were those cloud native

00:32:58,080 --> 00:33:00,880
patterns and in fact that's what i cover

00:32:59,840 --> 00:33:04,640
in my book

00:33:00,880 --> 00:33:06,960
things like retries and circuit breakers

00:33:04,640 --> 00:33:06,960
and

00:33:08,480 --> 00:33:11,519
service discovery and those types of

00:33:10,640 --> 00:33:14,399
things

00:33:11,519 --> 00:33:16,640
what we're doing now with cloud native

00:33:14,399 --> 00:33:17,279
operations and with git ops is that we

00:33:16,640 --> 00:33:20,880
are

00:33:17,279 --> 00:33:23,760
deriving these sets of patterns that

00:33:20,880 --> 00:33:25,200
are going to become ubiquitous in the in

00:33:23,760 --> 00:33:27,679
the coming years

00:33:25,200 --> 00:33:28,880
and good gonna be applied for for great

00:33:27,679 --> 00:33:30,960
gain

00:33:28,880 --> 00:33:32,240
so with that i thank you for your

00:33:30,960 --> 00:33:33,760
attention and

00:33:32,240 --> 00:33:35,919
i hope you enjoy the rest of the

00:33:33,760 --> 00:33:39,840
conference thank you so much

00:33:35,919 --> 00:33:39,840

YouTube URL: https://www.youtube.com/watch?v=Bm3ili9RUTo


