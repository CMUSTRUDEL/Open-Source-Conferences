Title: Tutorial: Say Goodbye to YAML Engineering with the CDK for K8s - Nathan Taber & Elad Ben-Israel
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.  

Tutorial: Say Goodbye to YAML Engineering with the CDK for Kubernetes - Nathan Taber & Elad Ben-Israel, Amazon

Applications running on Kubernetes are composed of dozens of resources maintained through an intricate collection of carefully maintained YAML files. As applications evolve and teams grow, these files become hard to manage and reuse — copying & pasting from previous projects is not the solution! The CDK for Kubernetes (cdk8s) is a new open-source software development framework for defining Kubernetes applications and resources using familiar programming languages. In this tutorial, the creators of cdk8s show you how to define your first cdk8s application, design a reusable construct and package it as a library, and generally say goodbye (and thank you very much) to writing in YAML. Bring your laptops set up with your favorite development environment in one of the supported languages (TypeScript, JavaScript, Python, Java, or .NET).

https://sched.co/ekFN
Captions: 
	00:00:01,120 --> 00:00:05,359
hey everyone my name is nathan tabor and

00:00:03,600 --> 00:00:07,839
i'm a principal product manager

00:00:05,359 --> 00:00:10,000
here at amazon web services i'm really

00:00:07,839 --> 00:00:12,000
excited to be talking about

00:00:10,000 --> 00:00:13,840
saying goodbye to yaml engineering with

00:00:12,000 --> 00:00:15,920
the cdk for kubernetes

00:00:13,840 --> 00:00:17,760
i'm going to be joined today by my

00:00:15,920 --> 00:00:20,160
friends and colleagues alladven israel

00:00:17,760 --> 00:00:22,160
who's a principal engineer here at aws

00:00:20,160 --> 00:00:25,279
and also ellie polonski who's a software

00:00:22,160 --> 00:00:28,000
development engineer here at aws and

00:00:25,279 --> 00:00:29,359
all of us work on kubernetes and the cdk

00:00:28,000 --> 00:00:30,400
project and we're really excited to

00:00:29,359 --> 00:00:32,079
share with you

00:00:30,400 --> 00:00:33,920
um what we've been working on and and

00:00:32,079 --> 00:00:35,920
some of the things that um

00:00:33,920 --> 00:00:38,079
you know you can do using the cdk and

00:00:35,920 --> 00:00:39,360
the cdk for kubernetes

00:00:38,079 --> 00:00:41,200
all right so let's go ahead and get

00:00:39,360 --> 00:00:42,640
started here so we have a few things

00:00:41,200 --> 00:00:46,160
we're going to go over today

00:00:42,640 --> 00:00:48,320
this is a hands-on interactive

00:00:46,160 --> 00:00:49,440
demonstration session so i'm going to

00:00:48,320 --> 00:00:51,440
spend a few minutes

00:00:49,440 --> 00:00:52,879
um right now talking about you know

00:00:51,440 --> 00:00:56,079
what's the deal with yaml

00:00:52,879 --> 00:00:58,239
um how can we do more with the yaml that

00:00:56,079 --> 00:00:59,199
we have how can we use yaml as part of

00:00:58,239 --> 00:01:02,399
the system

00:00:59,199 --> 00:01:04,080
um talk about cdks and and how cdks help

00:01:02,399 --> 00:01:05,119
solve some of the common problems that

00:01:04,080 --> 00:01:06,720
we see

00:01:05,119 --> 00:01:08,960
people in the kubernetes community

00:01:06,720 --> 00:01:10,799
having around yaml especially as they

00:01:08,960 --> 00:01:12,240
define and build really complex

00:01:10,799 --> 00:01:15,119
applications across

00:01:12,240 --> 00:01:16,000
organizations and then we have a really

00:01:15,119 --> 00:01:18,240
awesome

00:01:16,000 --> 00:01:19,360
deep dive hands-on demo that ellie and a

00:01:18,240 --> 00:01:21,520
lot are going to give

00:01:19,360 --> 00:01:23,840
they're going to go all the way through

00:01:21,520 --> 00:01:26,159
how to deploy an app end-to-end with a

00:01:23,840 --> 00:01:27,840
cdk for kubernetes on a kubernetes

00:01:26,159 --> 00:01:29,600
cluster and then finally we're going to

00:01:27,840 --> 00:01:30,960
have a really quick wrap up so

00:01:29,600 --> 00:01:32,640
i'm really excited that you've joined us

00:01:30,960 --> 00:01:35,759
for this session at kubecon

00:01:32,640 --> 00:01:37,520
uh here we are live from home and um

00:01:35,759 --> 00:01:40,000
let's go ahead and get started

00:01:37,520 --> 00:01:41,680
so let's talk about yemo yamo is

00:01:40,000 --> 00:01:44,399
freaking awesome i mean yemol is

00:01:41,680 --> 00:01:45,040
is the the bleeding uh the beating heart

00:01:44,399 --> 00:01:46,960
right

00:01:45,040 --> 00:01:49,200
of uh kubernetes cluster it's how we

00:01:46,960 --> 00:01:51,119
configure all the stuff that we run

00:01:49,200 --> 00:01:53,040
using kubernetes and yaml is great

00:01:51,119 --> 00:01:53,600
because it's really easy for humans to

00:01:53,040 --> 00:01:56,240
read

00:01:53,600 --> 00:01:56,880
it's something that anybody can open up

00:01:56,240 --> 00:01:58,960
a

00:01:56,880 --> 00:02:00,719
configuration spec they can look at it

00:01:58,960 --> 00:02:01,040
they can understand exactly what's going

00:02:00,719 --> 00:02:04,240
on

00:02:01,040 --> 00:02:04,799
exactly what we intend for the system to

00:02:04,240 --> 00:02:07,439
do

00:02:04,799 --> 00:02:08,959
it's universal it's also declarative

00:02:07,439 --> 00:02:09,920
which is great in a system like

00:02:08,959 --> 00:02:11,599
kubernetes

00:02:09,920 --> 00:02:13,120
because you declare exactly what you

00:02:11,599 --> 00:02:14,800
want and then you expect

00:02:13,120 --> 00:02:17,040
the api server and all the other

00:02:14,800 --> 00:02:19,280
resources to take care of

00:02:17,040 --> 00:02:21,280
instantiating that declared state and

00:02:19,280 --> 00:02:24,400
maintaining that declared state so yaml

00:02:21,280 --> 00:02:25,599
is is a great um language for how you

00:02:24,400 --> 00:02:27,840
want to declare

00:02:25,599 --> 00:02:29,520
things on your cluster and it's also

00:02:27,840 --> 00:02:32,400
really good because it's static

00:02:29,520 --> 00:02:34,800
and things that are static are easy to

00:02:32,400 --> 00:02:36,080
work with they can be versioned

00:02:34,800 --> 00:02:38,480
you know they can be shared and

00:02:36,080 --> 00:02:40,720
distributed and understood

00:02:38,480 --> 00:02:41,840
at a single point in time so that's

00:02:40,720 --> 00:02:46,000
really good

00:02:41,840 --> 00:02:48,560
so yaml is a really excellent

00:02:46,000 --> 00:02:50,000
uh building block for our applications

00:02:48,560 --> 00:02:51,920
and it's not too hard to use

00:02:50,000 --> 00:02:54,560
when you have a few things if you have

00:02:51,920 --> 00:02:56,800
um you know a handful of deployments or

00:02:54,560 --> 00:02:58,879
a handful of services in your cluster

00:02:56,800 --> 00:03:01,280
yaml is really great you can probably

00:02:58,879 --> 00:03:02,720
just write out a yaml spec

00:03:01,280 --> 00:03:04,879
really easily and start running some

00:03:02,720 --> 00:03:07,519
basic applications on kubernetes

00:03:04,879 --> 00:03:08,159
but as you grow and especially as you

00:03:07,519 --> 00:03:10,959
start to

00:03:08,159 --> 00:03:12,319
adopt systems defined in yaml across

00:03:10,959 --> 00:03:15,519
your organization

00:03:12,319 --> 00:03:17,360
you end up with this yaml engineering

00:03:15,519 --> 00:03:19,200
there's a lot of boilerplate that you

00:03:17,360 --> 00:03:19,680
start having to add and that opens up

00:03:19,200 --> 00:03:22,400
room

00:03:19,680 --> 00:03:24,319
for errors sharing becomes kind of

00:03:22,400 --> 00:03:26,159
manual and hacky right like

00:03:24,319 --> 00:03:27,360
projects often start with these off the

00:03:26,159 --> 00:03:29,200
shelf examples

00:03:27,360 --> 00:03:31,440
then they start quarking copying and

00:03:29,200 --> 00:03:32,879
pasting configurations from vendors from

00:03:31,440 --> 00:03:34,640
other companies from community

00:03:32,879 --> 00:03:36,560
maintained repositories

00:03:34,640 --> 00:03:37,760
and maintaining these files over time

00:03:36,560 --> 00:03:39,440
takes a lot of work

00:03:37,760 --> 00:03:41,920
and there's a lot of different tools

00:03:39,440 --> 00:03:43,840
that we've seen created by the community

00:03:41,920 --> 00:03:46,400
some like helm are really good at

00:03:43,840 --> 00:03:48,799
packaging yaml and making it easy to

00:03:46,400 --> 00:03:50,799
bundle yaml together but they don't

00:03:48,799 --> 00:03:53,200
actually necessarily solve some of the

00:03:50,799 --> 00:03:54,000
underlying problems about customizations

00:03:53,200 --> 00:03:55,360
and

00:03:54,000 --> 00:03:57,040
all the different tooling that you have

00:03:55,360 --> 00:03:59,040
to use how do you update

00:03:57,040 --> 00:04:00,080
across lots of different things

00:03:59,040 --> 00:04:03,120
especially

00:04:00,080 --> 00:04:04,400
when if you're a human right like if

00:04:03,120 --> 00:04:06,480
you're a developer

00:04:04,400 --> 00:04:07,760
and you've never actually touched

00:04:06,480 --> 00:04:10,959
kubernetes yaml

00:04:07,760 --> 00:04:13,120
it's this whole other world to actually

00:04:10,959 --> 00:04:15,360
begin to start to run your application

00:04:13,120 --> 00:04:17,120
on kubernetes and we find that

00:04:15,360 --> 00:04:18,400
that can be a bit of a learning curve

00:04:17,120 --> 00:04:20,479
for people

00:04:18,400 --> 00:04:22,720
and most developers are are used to

00:04:20,479 --> 00:04:23,280
working with general purpose languages

00:04:22,720 --> 00:04:25,120
right

00:04:23,280 --> 00:04:27,199
so general purpose languages are are

00:04:25,120 --> 00:04:28,080
what we actually build our applications

00:04:27,199 --> 00:04:31,360
in

00:04:28,080 --> 00:04:33,360
they tend to be specialized they can be

00:04:31,360 --> 00:04:36,400
functional or imperative

00:04:33,360 --> 00:04:38,800
they are dynamic and there's a whole

00:04:36,400 --> 00:04:39,600
ecosystem of tooling and workflows

00:04:38,800 --> 00:04:42,000
around how

00:04:39,600 --> 00:04:44,639
how do we define applications using

00:04:42,000 --> 00:04:47,120
these general purposes languages

00:04:44,639 --> 00:04:48,479
so what the cloud development kit for

00:04:47,120 --> 00:04:50,400
kubernetes does

00:04:48,479 --> 00:04:52,000
is it's an open source framework that

00:04:50,400 --> 00:04:52,960
lets you define kubernetes

00:04:52,000 --> 00:04:55,199
infrastructure

00:04:52,960 --> 00:04:57,040
using these general purpose popular

00:04:55,199 --> 00:05:00,720
programming languages

00:04:57,040 --> 00:05:01,440
so the cd case is really awesome it lets

00:05:00,720 --> 00:05:04,880
you go

00:05:01,440 --> 00:05:06,880
from code to config defining kubernetes

00:05:04,880 --> 00:05:10,000
applications and architectures

00:05:06,880 --> 00:05:12,240
using you know popular

00:05:10,000 --> 00:05:14,240
and familiar programming languages and

00:05:12,240 --> 00:05:15,520
it gets rid of a lot of the pain of

00:05:14,240 --> 00:05:17,360
making sure that you get all the

00:05:15,520 --> 00:05:19,039
boilerplate right so you can generate

00:05:17,360 --> 00:05:19,840
that well formatted yaml for your

00:05:19,039 --> 00:05:23,280
applications

00:05:19,840 --> 00:05:24,880
every single time um because it actually

00:05:23,280 --> 00:05:25,600
you're defining your applications in

00:05:24,880 --> 00:05:27,759
code

00:05:25,600 --> 00:05:29,600
you can use code libraries and you can

00:05:27,759 --> 00:05:32,800
actually define

00:05:29,600 --> 00:05:35,680
the format for how you want a particular

00:05:32,800 --> 00:05:37,039
application within a cluster to work as

00:05:35,680 --> 00:05:39,440
a code library

00:05:37,039 --> 00:05:41,199
and then you can share that and you can

00:05:39,440 --> 00:05:43,440
update it easily without any

00:05:41,199 --> 00:05:45,120
heavy lifting so you can go and you can

00:05:43,440 --> 00:05:47,039
update you know how do i define a web

00:05:45,120 --> 00:05:49,280
service at my organization

00:05:47,039 --> 00:05:50,960
and let's say tomorrow you come out with

00:05:49,280 --> 00:05:53,919
okay every web service now

00:05:50,960 --> 00:05:54,720
needs to use endpoint slices right and

00:05:53,919 --> 00:05:57,440
you can actually

00:05:54,720 --> 00:05:58,400
implement that as part of the library

00:05:57,440 --> 00:06:02,240
that defines

00:05:58,400 --> 00:06:04,400
how users at your company use

00:06:02,240 --> 00:06:06,400
you know kubernetes web services and you

00:06:04,400 --> 00:06:08,639
can import that all those developers can

00:06:06,400 --> 00:06:11,120
import that into their cdks libraries

00:06:08,639 --> 00:06:12,400
and then they can easily begin using

00:06:11,120 --> 00:06:14,240
those new features

00:06:12,400 --> 00:06:15,919
within the api without necessarily

00:06:14,240 --> 00:06:18,319
having to understand

00:06:15,919 --> 00:06:20,479
um how to implement them all perfectly

00:06:18,319 --> 00:06:22,479
in the yaml and having to really deeply

00:06:20,479 --> 00:06:23,520
understand the kubernetes api to get

00:06:22,479 --> 00:06:25,600
started

00:06:23,520 --> 00:06:27,280
i think the most important part of this

00:06:25,600 --> 00:06:27,600
project and what's really exciting for

00:06:27,280 --> 00:06:31,280
us

00:06:27,600 --> 00:06:34,720
at aws is that cdks lets you run

00:06:31,280 --> 00:06:37,520
everywhere so is is not a

00:06:34,720 --> 00:06:39,199
system that's designed just for aws um

00:06:37,520 --> 00:06:40,960
it runs locally on your machine

00:06:39,199 --> 00:06:42,800
and it generates kubernetes standard

00:06:40,960 --> 00:06:44,960
yaml that you can deploy to any

00:06:42,800 --> 00:06:46,639
kubernetes cluster running anywhere

00:06:44,960 --> 00:06:49,840
and this lets you standardize across

00:06:46,639 --> 00:06:53,759
on-premises and any cloud

00:06:49,840 --> 00:06:55,039
so um today we support uh four languages

00:06:53,759 --> 00:06:58,400
with cdks

00:06:55,039 --> 00:07:00,639
typescript javascript python and java

00:06:58,400 --> 00:07:02,400
and we're looking at supporting go and

00:07:00,639 --> 00:07:05,599
dotnet and many more

00:07:02,400 --> 00:07:08,400
in the future and like i was saying

00:07:05,599 --> 00:07:10,319
um cd kate's is is lets you share these

00:07:08,400 --> 00:07:12,800
best practices as libraries

00:07:10,319 --> 00:07:14,880
it makes them easy to maintain and and

00:07:12,800 --> 00:07:17,120
it's easier to share than templates so

00:07:14,880 --> 00:07:18,479
you can use cdks to standardize how you

00:07:17,120 --> 00:07:20,479
define kubernetes

00:07:18,479 --> 00:07:22,319
across your organization and across any

00:07:20,479 --> 00:07:24,000
environment

00:07:22,319 --> 00:07:25,919
and then what's really cool is that at

00:07:24,000 --> 00:07:29,599
the end of the day what you're using

00:07:25,919 --> 00:07:32,560
is just standard kubernetes yaml so

00:07:29,599 --> 00:07:34,080
that means that today if your developers

00:07:32,560 --> 00:07:36,319
or if you are writing

00:07:34,080 --> 00:07:37,360
your application in a general purpose

00:07:36,319 --> 00:07:38,880
programming language

00:07:37,360 --> 00:07:41,759
and then you're deploying that through a

00:07:38,880 --> 00:07:44,400
cd pipeline out to your cluster

00:07:41,759 --> 00:07:46,800
with the cdk for kubernetes you can now

00:07:44,400 --> 00:07:48,160
also write your application definition

00:07:46,800 --> 00:07:50,800
and your specification

00:07:48,160 --> 00:07:52,639
for how you want that application to run

00:07:50,800 --> 00:07:55,520
in the same language

00:07:52,639 --> 00:07:58,240
and then you can deploy that out through

00:07:55,520 --> 00:07:59,440
a git ops through a cd pipeline onto

00:07:58,240 --> 00:08:01,440
your cluster so

00:07:59,440 --> 00:08:03,520
you can go from having two very

00:08:01,440 --> 00:08:05,120
different flows from writing your code

00:08:03,520 --> 00:08:08,240
and getting it into production

00:08:05,120 --> 00:08:09,120
and actually unify that and use the same

00:08:08,240 --> 00:08:11,199
set of tools

00:08:09,120 --> 00:08:13,039
all the way through the process from

00:08:11,199 --> 00:08:14,160
writing your application defining how it

00:08:13,039 --> 00:08:15,599
should run and then

00:08:14,160 --> 00:08:18,080
using continuous deployment and

00:08:15,599 --> 00:08:20,560
continuous integration to get that out

00:08:18,080 --> 00:08:21,280
onto your cluster so let's take a quick

00:08:20,560 --> 00:08:24,879
look at

00:08:21,280 --> 00:08:27,120
how this actually works so in the cdks

00:08:24,879 --> 00:08:29,599
you have a cdks application

00:08:27,120 --> 00:08:31,120
this represents the overall application

00:08:29,599 --> 00:08:32,080
that that you're going to be running on

00:08:31,120 --> 00:08:33,839
your cluster

00:08:32,080 --> 00:08:36,719
and then you have a series of charts and

00:08:33,839 --> 00:08:38,880
charts are different logical modules

00:08:36,719 --> 00:08:40,959
within your application for different

00:08:38,880 --> 00:08:42,959
functions and within a chart

00:08:40,959 --> 00:08:44,000
you can have one or more constructs and

00:08:42,959 --> 00:08:47,680
a construct

00:08:44,000 --> 00:08:50,399
defines um one or more resources

00:08:47,680 --> 00:08:52,880
kubernetes resources that you want to

00:08:50,399 --> 00:08:55,120
instantiate and define together so

00:08:52,880 --> 00:08:56,000
for example i may have a deployment and

00:08:55,120 --> 00:08:58,480
a pod

00:08:56,000 --> 00:08:59,600
that i'm going to define together as one

00:08:58,480 --> 00:09:01,200
construct

00:08:59,600 --> 00:09:03,519
and then you take that and you

00:09:01,200 --> 00:09:04,240
synthesize that into a yaml or a helm

00:09:03,519 --> 00:09:05,920
chart

00:09:04,240 --> 00:09:08,000
your cubecode will apply that to your

00:09:05,920 --> 00:09:10,000
cluster or use a getup cd

00:09:08,000 --> 00:09:11,760
tool to get that onto your cluster and

00:09:10,000 --> 00:09:13,519
when that yaml goes onto your cluster

00:09:11,760 --> 00:09:15,600
then we instantiate

00:09:13,519 --> 00:09:16,800
the kubernetes resources this is just

00:09:15,600 --> 00:09:18,560
like normal

00:09:16,800 --> 00:09:21,519
just like you would do if you had

00:09:18,560 --> 00:09:24,720
written that yaml file yourself

00:09:21,519 --> 00:09:27,600
and so let's look at the big picture so

00:09:24,720 --> 00:09:28,480
the cdks application is effectively your

00:09:27,600 --> 00:09:30,160
source code

00:09:28,480 --> 00:09:32,480
this is the source for how you want to

00:09:30,160 --> 00:09:36,080
define your kubernetes application

00:09:32,480 --> 00:09:38,480
the cdk cli which is our our cli tool

00:09:36,080 --> 00:09:40,160
acts as the compiler and the cli

00:09:38,480 --> 00:09:43,279
executes that source

00:09:40,160 --> 00:09:45,120
and synthesizes yaml or helm chart that

00:09:43,279 --> 00:09:47,040
is your assembly language right

00:09:45,120 --> 00:09:48,560
and then we deploy that onto the

00:09:47,040 --> 00:09:49,760
kubernetes cluster which is your

00:09:48,560 --> 00:09:52,160
processor and actually

00:09:49,760 --> 00:09:54,480
instantiates those kubernetes resources

00:09:52,160 --> 00:09:57,120
to run your application

00:09:54,480 --> 00:09:58,560
and so there are three main components

00:09:57,120 --> 00:10:00,800
to the cdks

00:09:58,560 --> 00:10:02,079
there's the core framework which is all

00:10:00,800 --> 00:10:04,079
the different constructs in the

00:10:02,079 --> 00:10:06,720
construct library

00:10:04,079 --> 00:10:08,160
that that makes that up we also have

00:10:06,720 --> 00:10:10,880
cdks plus

00:10:08,160 --> 00:10:11,839
and cd kate's plus is a high level

00:10:10,880 --> 00:10:14,079
library

00:10:11,839 --> 00:10:15,600
that defines common constructs in an

00:10:14,079 --> 00:10:18,160
opinionated fashion so

00:10:15,600 --> 00:10:20,320
cdkatesplus makes it really easy to get

00:10:18,160 --> 00:10:22,160
started with cdkates

00:10:20,320 --> 00:10:23,360
by kind of giving you the core building

00:10:22,160 --> 00:10:25,680
blocks that you need

00:10:23,360 --> 00:10:26,720
to start building and running kubernetes

00:10:25,680 --> 00:10:30,720
applications

00:10:26,720 --> 00:10:34,000
and then we have the cdk cli and the cli

00:10:30,720 --> 00:10:35,760
allows you to um define which version of

00:10:34,000 --> 00:10:37,200
the kubernetes api

00:10:35,760 --> 00:10:39,200
that you want to be using as part of

00:10:37,200 --> 00:10:40,320
your cdks app

00:10:39,200 --> 00:10:42,640
and there's some really nifty

00:10:40,320 --> 00:10:44,000
functionality in the cdk cli that we're

00:10:42,640 --> 00:10:46,240
going to be talking about that

00:10:44,000 --> 00:10:47,279
allows you to select which kubernetes

00:10:46,240 --> 00:10:49,279
version you're using

00:10:47,279 --> 00:10:50,320
and then ensures that all the yaml that

00:10:49,279 --> 00:10:52,560
you synthesize

00:10:50,320 --> 00:10:54,160
uses the correct format for that version

00:10:52,560 --> 00:10:56,560
of the kubernetes api

00:10:54,160 --> 00:10:58,160
it also lets you import custom resource

00:10:56,560 --> 00:11:01,600
definitions and use those

00:10:58,160 --> 00:11:02,720
as part of your cdks app and so these

00:11:01,600 --> 00:11:05,200
three components

00:11:02,720 --> 00:11:06,800
work together to allow a really nice

00:11:05,200 --> 00:11:09,600
system that lets you go from general

00:11:06,800 --> 00:11:12,000
purpose language to kubernetes yemo

00:11:09,600 --> 00:11:12,959
all right so that's a very brief

00:11:12,000 --> 00:11:16,000
introduction

00:11:12,959 --> 00:11:18,160
to the cdks let's go ahead and uh

00:11:16,000 --> 00:11:19,680
jump over we're going to fly halfway

00:11:18,160 --> 00:11:22,320
around the world to

00:11:19,680 --> 00:11:23,200
elab and ellie joining us from tel aviv

00:11:22,320 --> 00:11:26,560
and they're going to give you

00:11:23,200 --> 00:11:27,279
a deep dive into building and running an

00:11:26,560 --> 00:11:30,720
application

00:11:27,279 --> 00:11:33,519
using the cdks all right go ahead

00:11:30,720 --> 00:11:34,959
ellie take it away thanks nate so let's

00:11:33,519 --> 00:11:36,800
get going and uh

00:11:34,959 --> 00:11:39,440
write some code i guess that's why we're

00:11:36,800 --> 00:11:41,920
here and we've got plenty of time

00:11:39,440 --> 00:11:42,720
so my name is elad i'm a principal

00:11:41,920 --> 00:11:45,519
engineer at

00:11:42,720 --> 00:11:47,120
aws i've been working on the cdk project

00:11:45,519 --> 00:11:49,839
for the past three years

00:11:47,120 --> 00:11:50,800
and since this is a recorded session i i

00:11:49,839 --> 00:11:52,480
realized i figured

00:11:50,800 --> 00:11:54,480
it's going to be very boring if i'm just

00:11:52,480 --> 00:11:57,200
going to speak to myself for an hour

00:11:54,480 --> 00:11:57,839
both for me and for you and so i asked

00:11:57,200 --> 00:12:00,880
my colleague

00:11:57,839 --> 00:12:02,800
ellie who's working with me on the cdk

00:12:00,880 --> 00:12:03,519
for kubernetes project to join me and

00:12:02,800 --> 00:12:07,040
we're gonna

00:12:03,519 --> 00:12:08,240
do this together let me invite him and

00:12:07,040 --> 00:12:10,240
he's gonna

00:12:08,240 --> 00:12:13,120
tell you a little bit about himself and

00:12:10,240 --> 00:12:13,120
we can get started

00:12:13,680 --> 00:12:20,079
hi ali hi lad hi everyone

00:12:16,720 --> 00:12:21,200
uh glad to be here so yeah my name is

00:12:20,079 --> 00:12:23,920
ellie

00:12:21,200 --> 00:12:26,000
i work with a lot on the city gates and

00:12:23,920 --> 00:12:29,519
the aws cdk for uh

00:12:26,000 --> 00:12:29,839
for almost a year now um excited to see

00:12:29,519 --> 00:12:32,639
this

00:12:29,839 --> 00:12:34,399
uh to see to do this uh session we've

00:12:32,639 --> 00:12:35,360
got a lot to cover so so let's get

00:12:34,399 --> 00:12:37,519
started

00:12:35,360 --> 00:12:38,560
yeah we actually planned you know we sat

00:12:37,519 --> 00:12:40,399
down and planned and

00:12:38,560 --> 00:12:43,200
there's so much stuff to talk about and

00:12:40,399 --> 00:12:44,720
so many rat holes to go and so i i asked

00:12:43,200 --> 00:12:45,279
ellie to keep me honest and make sure

00:12:44,720 --> 00:12:46,959
that i

00:12:45,279 --> 00:12:48,320
pull me out of those rat holes as much

00:12:46,959 --> 00:12:51,120
as possible so we can

00:12:48,320 --> 00:12:51,680
actually get something achieved what

00:12:51,120 --> 00:12:54,160
what

00:12:51,680 --> 00:12:54,800
what we said we're going to do is first

00:12:54,160 --> 00:12:56,639
kind of

00:12:54,800 --> 00:12:58,320
walk through the basics to make sure

00:12:56,639 --> 00:12:59,519
that everybody's on the same page i know

00:12:58,320 --> 00:13:01,920
that some of you are

00:12:59,519 --> 00:13:04,160
probably used cdk for kubernetes some of

00:13:01,920 --> 00:13:05,440
you have never heard of it and so yeah

00:13:04,160 --> 00:13:07,680
you know following nate's uh

00:13:05,440 --> 00:13:09,360
introduction i hope you have a sense of

00:13:07,680 --> 00:13:10,079
what it is but i actually want to show

00:13:09,360 --> 00:13:11,920
you

00:13:10,079 --> 00:13:14,560
you know hands-on how how it feels to

00:13:11,920 --> 00:13:17,040
use it uh and then we're gonna just

00:13:14,560 --> 00:13:18,079
try to build a project together and you

00:13:17,040 --> 00:13:20,480
know

00:13:18,079 --> 00:13:21,519
have some cathars cathartic experience i

00:13:20,480 --> 00:13:24,560
think like that

00:13:21,519 --> 00:13:26,800
that's always good yeah definitely all

00:13:24,560 --> 00:13:28,880
right cool so i guess uh the first thing

00:13:26,800 --> 00:13:30,399
we need to do or talk about is i i

00:13:28,880 --> 00:13:32,959
assume you have some kind of

00:13:30,399 --> 00:13:34,720
local setup or some kind of kubernetes

00:13:32,959 --> 00:13:36,160
cluster you have so we can play around

00:13:34,720 --> 00:13:39,680
with right yes

00:13:36,160 --> 00:13:40,880
yes yes yes i'm going to assume you have

00:13:39,680 --> 00:13:43,360
kind because

00:13:40,880 --> 00:13:44,240
it's great and i use it too yeah yeah i

00:13:43,360 --> 00:13:48,800
mean for local

00:13:44,240 --> 00:13:52,240
for local development we love kind i

00:13:48,800 --> 00:13:54,160
awesome project really really stable

00:13:52,240 --> 00:13:56,399
i think one of the things that we get

00:13:54,160 --> 00:13:59,600
asked a lot is whether cdks is

00:13:56,399 --> 00:14:02,639
just for aws and the answer is no

00:13:59,600 --> 00:14:04,560
cdk for kubernetes is for kubernetes and

00:14:02,639 --> 00:14:05,360
so you can run on any kubernetes cluster

00:14:04,560 --> 00:14:08,399
whether it's

00:14:05,360 --> 00:14:11,199
ram on the cloud uh as

00:14:08,399 --> 00:14:12,800
nate said it basically just synthesizes

00:14:11,199 --> 00:14:14,480
yaml manifests

00:14:12,800 --> 00:14:16,480
uh it's if you think about it's kind of

00:14:14,480 --> 00:14:18,639
like a compiler you write code

00:14:16,480 --> 00:14:20,720
and you execute and you get a manifest

00:14:18,639 --> 00:14:21,680
output yeah and then it's your choice

00:14:20,720 --> 00:14:23,440
what to do with it

00:14:21,680 --> 00:14:24,720
you can deploy it anywhere yeah and

00:14:23,440 --> 00:14:25,440
we'll see we'll see all of that in a

00:14:24,720 --> 00:14:27,120
second

00:14:25,440 --> 00:14:29,120
uh the second thing that i prepared in

00:14:27,120 --> 00:14:31,040
advance is uh

00:14:29,120 --> 00:14:32,560
just an empty kind of like an empty

00:14:31,040 --> 00:14:35,120
typescript project

00:14:32,560 --> 00:14:35,600
uh we're gonna use typescript as nate

00:14:35,120 --> 00:14:37,680
said

00:14:35,600 --> 00:14:40,399
the cdk supports multiple programming

00:14:37,680 --> 00:14:44,480
languages typescript javascript.net

00:14:40,399 --> 00:14:46,399
java go is coming up hopefully in

00:14:44,480 --> 00:14:48,240
that month so that's going to be a very

00:14:46,399 --> 00:14:49,040
exciting i think very exciting for the

00:14:48,240 --> 00:14:52,480
kubernetes

00:14:49,040 --> 00:14:54,240
community right yeah yeah definitely

00:14:52,480 --> 00:14:55,600
okay uh but this is basically just a

00:14:54,240 --> 00:14:58,560
regular typescript app

00:14:55,600 --> 00:15:00,000
and what you see here is a boilerplate

00:14:58,560 --> 00:15:00,959
not boilerplate but basically kind of

00:15:00,000 --> 00:15:04,000
like a starter

00:15:00,959 --> 00:15:07,199
application that was created by uh

00:15:04,000 --> 00:15:10,320
cdks init cdks is

00:15:07,199 --> 00:15:11,519
shipped with a cli called unsurprisingly

00:15:10,320 --> 00:15:13,360
cdks

00:15:11,519 --> 00:15:15,279
and it has a bunch of commands and one

00:15:13,360 --> 00:15:17,120
of them is in it it allows you to just

00:15:15,279 --> 00:15:18,399
initialize new projects in in one of the

00:15:17,120 --> 00:15:20,240
supported languages

00:15:18,399 --> 00:15:21,920
there's nothing fancy about these

00:15:20,240 --> 00:15:24,320
projects or just regular

00:15:21,920 --> 00:15:26,000
you know regular projects in this case

00:15:24,320 --> 00:15:27,199
you know you can see that it uh takes

00:15:26,000 --> 00:15:29,279
the dependencies

00:15:27,199 --> 00:15:31,199
it comes with a with a few presets that

00:15:29,279 --> 00:15:33,040
will help you get started with cdks yeah

00:15:31,199 --> 00:15:34,639
quickly but you can start with with from

00:15:33,040 --> 00:15:36,240
an empty textured project it's not

00:15:34,639 --> 00:15:38,160
really uh

00:15:36,240 --> 00:15:40,720
okay and then the structure that you get

00:15:38,160 --> 00:15:43,600
here is kind of like

00:15:40,720 --> 00:15:45,279
what we call the construct tree uh and

00:15:43,600 --> 00:15:45,920
we'll talk more about constructs i guess

00:15:45,279 --> 00:15:50,399
later but

00:15:45,920 --> 00:15:50,800
um the mental model is a tree okay so

00:15:50,399 --> 00:15:52,480
think

00:15:50,800 --> 00:15:55,360
think there's a root and the root of the

00:15:52,480 --> 00:15:59,199
tree is the app and then within the app

00:15:55,360 --> 00:16:01,440
you've got charts any number of charts

00:15:59,199 --> 00:16:03,680
and the reason is that every chart

00:16:01,440 --> 00:16:05,199
synthesizes into its own manifest so you

00:16:03,680 --> 00:16:05,839
can decide what you want to do with this

00:16:05,199 --> 00:16:07,600
you can

00:16:05,839 --> 00:16:09,600
just use a single chart and put all your

00:16:07,600 --> 00:16:12,000
resources in one manifest you can

00:16:09,600 --> 00:16:12,800
split them up you can create instant

00:16:12,000 --> 00:16:14,560
different

00:16:12,800 --> 00:16:16,320
versions of them for development or

00:16:14,560 --> 00:16:18,959
production or whatever right but

00:16:16,320 --> 00:16:20,560
you control it and the way the tree is

00:16:18,959 --> 00:16:23,120
structured is by basically passing in

00:16:20,560 --> 00:16:25,920
the parent as the first parameter

00:16:23,120 --> 00:16:27,920
of of the construct and so in this case

00:16:25,920 --> 00:16:29,920
i create a chart that i pass in the app

00:16:27,920 --> 00:16:31,279
and you'll see this repeat and repeat

00:16:29,920 --> 00:16:33,120
itself every uh

00:16:31,279 --> 00:16:35,040
throughout the you know throughout the

00:16:33,120 --> 00:16:37,600
programming model

00:16:35,040 --> 00:16:38,160
right so i see it says define resources

00:16:37,600 --> 00:16:41,839
here

00:16:38,160 --> 00:16:41,839
so let's define resources

00:16:42,639 --> 00:16:47,839
which resource um so

00:16:46,000 --> 00:16:50,480
i know that like i want to talk about uh

00:16:47,839 --> 00:16:52,959
the the the kind of a very important

00:16:50,480 --> 00:16:54,639
aspect of cdks and you know

00:16:52,959 --> 00:16:56,560
software engineering in general which is

00:16:54,639 --> 00:16:57,199
this notion of of layering and i want us

00:16:56,560 --> 00:16:59,680
to show

00:16:57,199 --> 00:17:00,959
to see all the different types of

00:16:59,680 --> 00:17:04,079
layering that syndicates

00:17:00,959 --> 00:17:07,039
uh cdks offers and let's start by

00:17:04,079 --> 00:17:07,679
by using like the most basic layer uh to

00:17:07,039 --> 00:17:09,600
define

00:17:07,679 --> 00:17:11,600
objects and let's just start with like a

00:17:09,600 --> 00:17:14,000
simple config map right that's something

00:17:11,600 --> 00:17:15,600
that's super super simple to configure

00:17:14,000 --> 00:17:18,000
so let's let's see how you do that with

00:17:15,600 --> 00:17:18,959
like the most uh fundamental unit in

00:17:18,000 --> 00:17:22,319
city case

00:17:18,959 --> 00:17:24,720
okay and so if you think about it

00:17:22,319 --> 00:17:25,439
again if you look at what the cdks is

00:17:24,720 --> 00:17:27,280
supposed to

00:17:25,439 --> 00:17:28,799
generate or to synthesize it's supposed

00:17:27,280 --> 00:17:31,360
to generate manifest

00:17:28,799 --> 00:17:32,320
and so the manifests are structured as a

00:17:31,360 --> 00:17:35,360
collection of

00:17:32,320 --> 00:17:38,559
api objects and so

00:17:35,360 --> 00:17:41,440
to that end uh cdks is also bundled with

00:17:38,559 --> 00:17:43,520
a class called api object it's also a

00:17:41,440 --> 00:17:46,080
construct so it needs to bind

00:17:43,520 --> 00:17:46,880
to the tree the first parameter is the

00:17:46,080 --> 00:17:48,559
scope and

00:17:46,880 --> 00:17:50,320
as a rule of thumb i'm always going to

00:17:48,559 --> 00:17:52,640
pass in this because i want

00:17:50,320 --> 00:17:54,799
to add this construct to the scope in

00:17:52,640 --> 00:17:56,320
which i'm actually defining it so i know

00:17:54,799 --> 00:17:57,200
exactly what's going on within this

00:17:56,320 --> 00:17:59,280
scope you want to keep

00:17:57,200 --> 00:18:01,600
keep the locality of your resources i

00:17:59,280 --> 00:18:02,080
want yeah i want this to be local to my

00:18:01,600 --> 00:18:03,360
chart

00:18:02,080 --> 00:18:06,000
in that sense and we'll see what that

00:18:03,360 --> 00:18:08,960
means maybe later

00:18:06,000 --> 00:18:09,679
and then i get a name for my api object

00:18:08,960 --> 00:18:13,120
i can call it

00:18:09,679 --> 00:18:16,640
uh config map let's say

00:18:13,120 --> 00:18:19,760
and if i look if i ask the ide

00:18:16,640 --> 00:18:21,039
um to help me that i see that i need api

00:18:19,760 --> 00:18:22,960
version and i need kind

00:18:21,039 --> 00:18:24,720
because both of those are required for

00:18:22,960 --> 00:18:27,760
all api objects

00:18:24,720 --> 00:18:28,480
yeah you know wherever they are so i'm

00:18:27,760 --> 00:18:32,640
going to

00:18:28,480 --> 00:18:34,160
pass in this so cdks already enforces

00:18:32,640 --> 00:18:36,080
these kind of

00:18:34,160 --> 00:18:38,400
requirements right you can't configure

00:18:36,080 --> 00:18:38,799
any api object without an api version or

00:18:38,400 --> 00:18:42,160
kind

00:18:38,799 --> 00:18:45,039
nice right but then as you can see

00:18:42,160 --> 00:18:46,320
i don't get any other help here because

00:18:45,039 --> 00:18:48,960
api objects are

00:18:46,320 --> 00:18:50,799
typeless right like uh you know the

00:18:48,960 --> 00:18:53,280
library doesn't know that an api this

00:18:50,799 --> 00:18:56,400
api object is a is a config map

00:18:53,280 --> 00:18:57,919
yeah and sometimes you have like a spec

00:18:56,400 --> 00:18:59,679
but sometimes you don't for example

00:18:57,919 --> 00:19:01,520
configmap doesn't have a spec property

00:18:59,679 --> 00:19:04,080
right it just has the data

00:19:01,520 --> 00:19:04,559
right so i can literally just put

00:19:04,080 --> 00:19:07,679
whatever

00:19:04,559 --> 00:19:07,679
whatever i want here right like

00:19:07,919 --> 00:19:12,559
data and i can put here zoo bar

00:19:10,960 --> 00:19:14,720
and it'll take it it'll just take

00:19:12,559 --> 00:19:16,880
whatever i put here whether it's part of

00:19:14,720 --> 00:19:19,520
the schema or not part of the schema

00:19:16,880 --> 00:19:20,240
and and then what what do i do with this

00:19:19,520 --> 00:19:22,720
how do i

00:19:20,240 --> 00:19:23,360
move on what's the next step okay i got

00:19:22,720 --> 00:19:25,679
my code

00:19:23,360 --> 00:19:27,679
written so let's see how do how does the

00:19:25,679 --> 00:19:29,520
manifest actually get created right this

00:19:27,679 --> 00:19:30,799
is supposed to be translated to yammo

00:19:29,520 --> 00:19:32,640
eventually

00:19:30,799 --> 00:19:34,400
right and so the way it works is

00:19:32,640 --> 00:19:36,400
basically i just run my application

00:19:34,400 --> 00:19:37,600
right this application you see the last

00:19:36,400 --> 00:19:40,320
line in my application

00:19:37,600 --> 00:19:42,160
synth and you'll see this also come you

00:19:40,320 --> 00:19:45,039
know repeating in other cdks like

00:19:42,160 --> 00:19:46,640
the kubernetes cd also the terraform cdk

00:19:45,039 --> 00:19:49,600
or the aws cdk

00:19:46,640 --> 00:19:51,679
and so if i run this application uh just

00:19:49,600 --> 00:19:53,200
make a regular node process right yeah

00:19:51,679 --> 00:19:54,480
just as a regular in this case it's a

00:19:53,200 --> 00:19:56,480
typescript node but

00:19:54,480 --> 00:19:57,919
yeah yeah just as a regular note process

00:19:56,480 --> 00:20:01,120
there's no magic right

00:19:57,919 --> 00:20:01,840
like no no magic tricks you'll see that

00:20:01,120 --> 00:20:05,360
uh

00:20:01,840 --> 00:20:07,520
it created a disk directory and

00:20:05,360 --> 00:20:10,559
i've got my manifest here with my config

00:20:07,520 --> 00:20:13,440
map yeah well two two things are bad

00:20:10,559 --> 00:20:14,159
or not bad or weird here first it's it's

00:20:13,440 --> 00:20:17,039
invalid

00:20:14,159 --> 00:20:18,480
right this this zubar thing is is not

00:20:17,039 --> 00:20:19,280
really and when we try to deploy it it's

00:20:18,480 --> 00:20:21,360
gonna fail

00:20:19,280 --> 00:20:23,600
and the other thing is that we see that

00:20:21,360 --> 00:20:26,480
that it created a name for us

00:20:23,600 --> 00:20:27,679
for the config map yeah and and you

00:20:26,480 --> 00:20:29,280
didn't specify

00:20:27,679 --> 00:20:31,039
i didn't specify it and it wasn't

00:20:29,280 --> 00:20:33,120
required which is actually

00:20:31,039 --> 00:20:34,080
weird because in kubernetes names are

00:20:33,120 --> 00:20:37,039
required for

00:20:34,080 --> 00:20:38,640
for resources and and but this is

00:20:37,039 --> 00:20:41,600
actually a unique thing about

00:20:38,640 --> 00:20:43,440
cdk for kubernetes and a very key

00:20:41,600 --> 00:20:45,039
ingredient of cdk

00:20:43,440 --> 00:20:46,559
i didn't have to specify a name because

00:20:45,039 --> 00:20:49,440
cdk can

00:20:46,559 --> 00:20:51,440
allocate a name for this object based on

00:20:49,440 --> 00:20:52,880
where it is in the construct tree

00:20:51,440 --> 00:20:54,320
and so if you look at this name you

00:20:52,880 --> 00:20:56,080
actually you can actually identify the

00:20:54,320 --> 00:20:57,760
path right like you say hello that's the

00:20:56,080 --> 00:20:59,679
name of my application

00:20:57,760 --> 00:21:01,280
hello kubecon sorry hello keeper in the

00:20:59,679 --> 00:21:04,000
name of my staff

00:21:01,280 --> 00:21:04,400
my chart and config map is the name of

00:21:04,000 --> 00:21:06,799
my

00:21:04,400 --> 00:21:07,919
construct and then we we append this

00:21:06,799 --> 00:21:09,760
hash

00:21:07,919 --> 00:21:12,240
to ensure that the the whole thing is

00:21:09,760 --> 00:21:15,600
unique across the entire application

00:21:12,240 --> 00:21:17,600
yeah and this is where these construct

00:21:15,600 --> 00:21:19,440
programming model comes into play the

00:21:17,600 --> 00:21:20,559
the reason we need the scope and name

00:21:19,440 --> 00:21:22,080
for every construct

00:21:20,559 --> 00:21:24,720
is exactly in order to be able to

00:21:22,080 --> 00:21:27,600
allocate these stable

00:21:24,720 --> 00:21:30,159
um names for resources that are

00:21:27,600 --> 00:21:32,480
generated by the

00:21:30,159 --> 00:21:34,640
that are generated during execution and

00:21:32,480 --> 00:21:36,480
an important thing is that these names

00:21:34,640 --> 00:21:38,799
like from my experience usually when you

00:21:36,480 --> 00:21:40,960
want to wire components together

00:21:38,799 --> 00:21:43,039
you need access to the name so what i

00:21:40,960 --> 00:21:43,520
found myself a lot of the times doing is

00:21:43,039 --> 00:21:46,480
you know

00:21:43,520 --> 00:21:48,080
obviously inputting a specific name and

00:21:46,480 --> 00:21:51,840
then kind of repeating itself

00:21:48,080 --> 00:21:53,840
repeating myself around the the the ammo

00:21:51,840 --> 00:21:55,039
so i do need some kind of programmatic

00:21:53,840 --> 00:21:56,880
access to this name

00:21:55,039 --> 00:21:58,080
if it is generated for me so that i can

00:21:56,880 --> 00:22:01,840
pass it on to

00:21:58,080 --> 00:22:04,559
other objects exactly and and so

00:22:01,840 --> 00:22:05,520
like any object in object oriented

00:22:04,559 --> 00:22:08,159
programming

00:22:05,520 --> 00:22:10,799
uh constructs also have an api that you

00:22:08,159 --> 00:22:13,760
can access after the object is created

00:22:10,799 --> 00:22:15,440
and api objects have a pretty minimal

00:22:13,760 --> 00:22:17,280
api right like you could access some of

00:22:15,440 --> 00:22:19,280
those properties we actually plan to

00:22:17,280 --> 00:22:21,600
expand that a little bit

00:22:19,280 --> 00:22:22,320
in our roadmap but the the interesting

00:22:21,600 --> 00:22:23,840
one is name

00:22:22,320 --> 00:22:26,240
and you can see here this is the name

00:22:23,840 --> 00:22:28,720
specif either specified explicitly

00:22:26,240 --> 00:22:29,760
via metadata name you can you can still

00:22:28,720 --> 00:22:32,159
specify names of

00:22:29,760 --> 00:22:33,280
uh explicitly if you wanted yeah but if

00:22:32,159 --> 00:22:35,200
you didn't then you can

00:22:33,280 --> 00:22:36,720
actually just use this as a token as a

00:22:35,200 --> 00:22:39,120
representation of the of the

00:22:36,720 --> 00:22:41,440
actual name i'll just give you uh you

00:22:39,120 --> 00:22:44,400
know just to show you an example of

00:22:41,440 --> 00:22:45,360
what this can do let's create a another

00:22:44,400 --> 00:22:48,159
config map

00:22:45,360 --> 00:22:48,640
that references the previous one okay so

00:22:48,159 --> 00:22:52,840
let's

00:22:48,640 --> 00:22:55,760
call it uh ref of

00:22:52,840 --> 00:22:57,120
one yeah this is this is great because

00:22:55,760 --> 00:22:59,520
this is like it seems so

00:22:57,120 --> 00:23:01,360
simple but you can't really do it inside

00:22:59,520 --> 00:23:04,080
a manifest right there's no

00:23:01,360 --> 00:23:06,000
inherent referencing mechanism so you

00:23:04,080 --> 00:23:08,960
you're kind of forced to either template

00:23:06,000 --> 00:23:11,120
it or just repeat it exactly and and

00:23:08,960 --> 00:23:12,880
it's a very important principle in

00:23:11,120 --> 00:23:16,240
healthy software engineering don't

00:23:12,880 --> 00:23:16,720
don't repeat yourself and one at one end

00:23:16,240 --> 00:23:19,600
and the other

00:23:16,720 --> 00:23:21,200
part is like there's strong binding now

00:23:19,600 --> 00:23:22,880
between those two things

00:23:21,200 --> 00:23:24,400
that doesn't exist here right like here

00:23:22,880 --> 00:23:26,000
it's actually very loose

00:23:24,400 --> 00:23:27,840
uh you see that you know you see this

00:23:26,000 --> 00:23:28,640
name actually repeating you see this

00:23:27,840 --> 00:23:31,679
name actually

00:23:28,640 --> 00:23:34,640
uh over here uh and again the beauty of

00:23:31,679 --> 00:23:36,799
this is that if this resource goes away

00:23:34,640 --> 00:23:37,679
then my compiler will yell at me it will

00:23:36,799 --> 00:23:39,520
say hey

00:23:37,679 --> 00:23:40,960
jobs doesn't exist what are you

00:23:39,520 --> 00:23:44,159
referencing here

00:23:40,960 --> 00:23:46,799
so we we we we convert these this

00:23:44,159 --> 00:23:48,559
loose coupling that's very prevalent in

00:23:46,799 --> 00:23:50,880
configuration files and benefit

00:23:48,559 --> 00:23:51,919
and kubernetes manifest we'll see that

00:23:50,880 --> 00:23:55,520
quite a lot in

00:23:51,919 --> 00:23:57,200
cdks with strong binding strong coupling

00:23:55,520 --> 00:23:59,200
between things that represent

00:23:57,200 --> 00:24:01,200
logical connections and the compilers

00:23:59,200 --> 00:24:03,039
can help us enforce those connections

00:24:01,200 --> 00:24:04,799
which is very powerful

00:24:03,039 --> 00:24:06,880
all right cool so this is this is great

00:24:04,799 --> 00:24:09,039
um but i know i know like

00:24:06,880 --> 00:24:10,559
we've i mentioned that we have multiple

00:24:09,039 --> 00:24:13,120
layers so i want to talk about the next

00:24:10,559 --> 00:24:16,640
layer of api that cdks can offer

00:24:13,120 --> 00:24:19,520
and this is the an api that that goes

00:24:16,640 --> 00:24:22,080
beyond you know just the requirement of

00:24:19,520 --> 00:24:24,640
api version and kind and it actually

00:24:22,080 --> 00:24:25,360
lets you interact with the fully strong

00:24:24,640 --> 00:24:28,799
type

00:24:25,360 --> 00:24:31,120
api for all of the kubernetes

00:24:28,799 --> 00:24:32,159
core objects right so instead of

00:24:31,120 --> 00:24:33,760
creating an api

00:24:32,159 --> 00:24:35,440
object you can actually create a

00:24:33,760 --> 00:24:37,760
specific

00:24:35,440 --> 00:24:38,480
resource so let's let's see how he did

00:24:37,760 --> 00:24:42,000
that

00:24:38,480 --> 00:24:45,120
yeah so the beauty of the kubernetes

00:24:42,000 --> 00:24:47,679
ecosystem is that apis are

00:24:45,120 --> 00:24:48,880
well typed they're all schematized

00:24:47,679 --> 00:24:51,360
kubernetes itself

00:24:48,880 --> 00:24:53,440
publishes an api an open api

00:24:51,360 --> 00:24:53,919
specification for all of the kubernetes

00:24:53,440 --> 00:24:56,480
api

00:24:53,919 --> 00:24:58,799
objects uh custom research definitions

00:24:56,480 --> 00:25:00,559
are schematized through json schemas

00:24:58,799 --> 00:25:01,840
and so what we could do is we could

00:25:00,559 --> 00:25:04,480
basically

00:25:01,840 --> 00:25:06,400
read those schemas and automatically

00:25:04,480 --> 00:25:08,480
generate classes

00:25:06,400 --> 00:25:09,760
that represents each api object and

00:25:08,480 --> 00:25:12,000
based on these schemas

00:25:09,760 --> 00:25:14,400
they offer rich and object-oriented they

00:25:12,000 --> 00:25:14,960
offer you know strongly typed apis for

00:25:14,400 --> 00:25:16,720
the

00:25:14,960 --> 00:25:18,720
for accessing these classes yeah

00:25:16,720 --> 00:25:20,480
definitely like i can see myself

00:25:18,720 --> 00:25:22,159
going to these schemas and kind of and

00:25:20,480 --> 00:25:24,080
just manually writing

00:25:22,159 --> 00:25:26,240
the code that that's need that needed

00:25:24,080 --> 00:25:29,120
but we have a tool that does that

00:25:26,240 --> 00:25:30,880
right that generates uh the the code

00:25:29,120 --> 00:25:32,720
based on this specification

00:25:30,880 --> 00:25:34,320
yeah and so this tool is called cdk's

00:25:32,720 --> 00:25:37,039
import um

00:25:34,320 --> 00:25:38,159
and it it basically accepts a

00:25:37,039 --> 00:25:40,559
specification

00:25:38,159 --> 00:25:41,200
something to import and it supports

00:25:40,559 --> 00:25:43,679
either

00:25:41,200 --> 00:25:44,480
importing the kubernetes api from the

00:25:43,679 --> 00:25:48,080
open api

00:25:44,480 --> 00:25:51,039
specification or kubernetes crds

00:25:48,080 --> 00:25:53,120
and as you all know crds are the

00:25:51,039 --> 00:25:53,600
standard way to extend kubernetes and so

00:25:53,120 --> 00:25:56,400
any

00:25:53,600 --> 00:25:57,919
any crd that you that exists in the

00:25:56,400 --> 00:26:00,000
kubernetes ecosystem

00:25:57,919 --> 00:26:01,600
can be automatically imported into a

00:26:00,000 --> 00:26:03,760
cdks application

00:26:01,600 --> 00:26:04,799
and used through strongly typed apis

00:26:03,760 --> 00:26:06,720
which is

00:26:04,799 --> 00:26:08,480
very powerful like we've seen people do

00:26:06,720 --> 00:26:10,080
really beautiful things with this and

00:26:08,480 --> 00:26:11,760
you get a very nice development

00:26:10,080 --> 00:26:12,640
developer experience for you know

00:26:11,760 --> 00:26:14,799
working with

00:26:12,640 --> 00:26:16,320
all of the kubernetes ecosystem not just

00:26:14,799 --> 00:26:17,360
the kubernetes apis

00:26:16,320 --> 00:26:20,159
in this case let's start with the

00:26:17,360 --> 00:26:22,000
kubernetes api the core api just to give

00:26:20,159 --> 00:26:24,880
you a sense of what that looks like

00:26:22,000 --> 00:26:26,960
and so i'm just going to do k8s and

00:26:24,880 --> 00:26:29,360
that's going to be importing the k

00:26:26,960 --> 00:26:31,039
kubernetes apis with the default version

00:26:29,360 --> 00:26:33,760
uh you can specify any version

00:26:31,039 --> 00:26:36,159
and it'll it'll just use that version

00:26:33,760 --> 00:26:38,159
and so what import is doing

00:26:36,159 --> 00:26:39,919
it creates a directory called imports

00:26:38,159 --> 00:26:40,559
it's becoming part of your project now

00:26:39,919 --> 00:26:42,640
it's just

00:26:40,559 --> 00:26:44,559
that it emitted this typescript file in

00:26:42,640 --> 00:26:46,480
it and if you're using java it'll be

00:26:44,559 --> 00:26:48,400
java classes or python or whatever

00:26:46,480 --> 00:26:51,600
language you're using

00:26:48,400 --> 00:26:54,080
that's very cool and wait wait until you

00:26:51,600 --> 00:26:57,440
see how we use it

00:26:54,080 --> 00:26:58,880
um and so we're gonna do import this

00:26:57,440 --> 00:27:02,720
into my my application

00:26:58,880 --> 00:27:05,919
i'm gonna delete this and

00:27:02,720 --> 00:27:06,960
now i get classes for all kubernetes

00:27:05,919 --> 00:27:08,559
kind so basically

00:27:06,960 --> 00:27:10,080
there's a one-to-one mapping between

00:27:08,559 --> 00:27:13,360
kubernetes kinds and

00:27:10,080 --> 00:27:15,039
uh constructs now and let's let's

00:27:13,360 --> 00:27:17,039
should we do config map again or

00:27:15,039 --> 00:27:18,559
something else no no let's let's do

00:27:17,039 --> 00:27:21,120
something more interesting let's do

00:27:18,559 --> 00:27:21,760
let's try to create a deployment and see

00:27:21,120 --> 00:27:24,159
see how that

00:27:21,760 --> 00:27:25,279
feels so again see you see the construct

00:27:24,159 --> 00:27:28,320
signature which is

00:27:25,279 --> 00:27:31,840
you know binding into the tree uh

00:27:28,320 --> 00:27:33,679
let's call it depth one and

00:27:31,840 --> 00:27:35,919
let's see what it means to define a

00:27:33,679 --> 00:27:39,039
deployment so again i see

00:27:35,919 --> 00:27:40,960
uh missing selector and template which

00:27:39,039 --> 00:27:44,480
is the required two required fields

00:27:40,960 --> 00:27:46,880
but now if i actually ask my id to help

00:27:44,480 --> 00:27:47,760
you see that it's not just saying hey i

00:27:46,880 --> 00:27:50,559
want you know

00:27:47,760 --> 00:27:51,840
a spec it says exactly what is this of

00:27:50,559 --> 00:27:55,120
that spec

00:27:51,840 --> 00:27:57,120
and so i can start you know using the id

00:27:55,120 --> 00:28:00,840
to help me with this thing

00:27:57,120 --> 00:28:04,080
uh okay so this needs containers

00:28:00,840 --> 00:28:06,000
okay again this is courtesy of the

00:28:04,080 --> 00:28:09,360
of the specification itself right the

00:28:06,000 --> 00:28:12,320
json schema that kubernetes publishes

00:28:09,360 --> 00:28:13,440
um yeah and uh any anything and we we

00:28:12,320 --> 00:28:17,360
actually also have seen

00:28:13,440 --> 00:28:19,520
a few things that there that are untyped

00:28:17,360 --> 00:28:21,279
and obviously those things will not have

00:28:19,520 --> 00:28:22,559
strong text but if it if it has a strong

00:28:21,279 --> 00:28:25,360
type in the specification

00:28:22,559 --> 00:28:26,159
in the open api specification that okay

00:28:25,360 --> 00:28:31,039
it still needs

00:28:26,159 --> 00:28:33,120
it still needs a selector

00:28:31,039 --> 00:28:34,399
uh yeah this is this is this thing i

00:28:33,120 --> 00:28:37,279
like i remember

00:28:34,399 --> 00:28:39,440
you know doing kubernetes um manually

00:28:37,279 --> 00:28:42,720
with the ammo and actually

00:28:39,440 --> 00:28:44,000
it's always kind of bothered me a little

00:28:42,720 --> 00:28:46,240
bit why do i have to

00:28:44,000 --> 00:28:47,520
to keep repeating this uh this

00:28:46,240 --> 00:28:49,440
definition it feels

00:28:47,520 --> 00:28:51,760
it feels like it should be implicit you

00:28:49,440 --> 00:28:53,279
mean the labels and the match labels

00:28:51,760 --> 00:28:55,120
yeah because what you're essentially

00:28:53,279 --> 00:28:58,240
doing here is you're you're

00:28:55,120 --> 00:28:59,600
attaching labels to pods of this

00:28:58,240 --> 00:29:01,440
deployment and you're saying to the

00:28:59,600 --> 00:29:03,919
deployment hey please select

00:29:01,440 --> 00:29:04,559
these pods and that feels like the

00:29:03,919 --> 00:29:07,120
normal

00:29:04,559 --> 00:29:08,799
thing you would expect you're you're

00:29:07,120 --> 00:29:10,720
creating those pods for me of course

00:29:08,799 --> 00:29:13,440
yeah i want you to select these

00:29:10,720 --> 00:29:14,960
yeah obviously you could do some magic

00:29:13,440 --> 00:29:17,679
tricks with this

00:29:14,960 --> 00:29:18,080
loose coupling yeah there are use cases

00:29:17,679 --> 00:29:21,200
for it

00:29:18,080 --> 00:29:24,399
our use cases like you know um

00:29:21,200 --> 00:29:26,720
gradual deployments and weighted

00:29:24,399 --> 00:29:28,080
uh whatever right like there's there's a

00:29:26,720 --> 00:29:28,960
lot of interesting stuff that you could

00:29:28,080 --> 00:29:30,960
do with this

00:29:28,960 --> 00:29:32,960
but i think you know the the common use

00:29:30,960 --> 00:29:34,880
case is yeah i just want

00:29:32,960 --> 00:29:36,480
the i just want to deploy these

00:29:34,880 --> 00:29:38,240
containers that's kind of like

00:29:36,480 --> 00:29:39,679
basically just wanted to play containers

00:29:38,240 --> 00:29:41,039
yeah right right

00:29:39,679 --> 00:29:43,600
but this is you know this is how the

00:29:41,039 --> 00:29:44,240
kubernetes api looks like and the l1 and

00:29:43,600 --> 00:29:47,279
the layer

00:29:44,240 --> 00:29:50,240
one layer um classes

00:29:47,279 --> 00:29:51,840
constructs we're completely we

00:29:50,240 --> 00:29:52,960
completely don't know about that right

00:29:51,840 --> 00:29:54,559
like as a

00:29:52,960 --> 00:29:56,799
because all of this is generated from

00:29:54,559 --> 00:29:58,559
the schema and so we can just represent

00:29:56,799 --> 00:30:01,039
the schema through strong typing

00:29:58,559 --> 00:30:01,760
which again is extremely valuable right

00:30:01,039 --> 00:30:05,279
like

00:30:01,760 --> 00:30:07,440
uh there are many ide extensions and

00:30:05,279 --> 00:30:09,760
tools and schema validations and

00:30:07,440 --> 00:30:11,520
linters that people use to make sure

00:30:09,760 --> 00:30:13,360
that their benefits are uh

00:30:11,520 --> 00:30:14,960
correct but we actually have all this

00:30:13,360 --> 00:30:17,200
all these capabilities in

00:30:14,960 --> 00:30:18,720
you know strongly typed languages and so

00:30:17,200 --> 00:30:22,000
it's very easy for us to

00:30:18,720 --> 00:30:24,159
just lift this experience into those um

00:30:22,000 --> 00:30:25,360
into the into these ids okay so let's

00:30:24,159 --> 00:30:26,960
depend uh

00:30:25,360 --> 00:30:28,640
stuff you know what a lot i'm gonna play

00:30:26,960 --> 00:30:31,120
the time card here okay

00:30:28,640 --> 00:30:32,559
uh we need to we need to speed things up

00:30:31,120 --> 00:30:34,080
a little bit so let's let's just uh

00:30:32,559 --> 00:30:35,679
instead of deploying let's just see

00:30:34,080 --> 00:30:37,520
like let's take it to the next level and

00:30:35,679 --> 00:30:40,720
deploy the the next

00:30:37,520 --> 00:30:43,520
kind of of api so the the last uh

00:30:40,720 --> 00:30:44,559
layering in in this whole experience is

00:30:43,520 --> 00:30:48,960
something we call

00:30:44,559 --> 00:30:50,960
cdks plus and cdksplus is basically

00:30:48,960 --> 00:30:52,320
a library that we vent as part of the

00:30:50,960 --> 00:30:55,200
cdk's tool chain

00:30:52,320 --> 00:30:56,240
and it provides these uh higher level

00:30:55,200 --> 00:30:58,000
apis

00:30:56,240 --> 00:30:59,600
for the same objects for the same

00:30:58,000 --> 00:31:01,519
kubernetes objects so

00:30:59,600 --> 00:31:03,200
if you take a look at this at this api

00:31:01,519 --> 00:31:04,240
we can see that yeah there's there's

00:31:03,200 --> 00:31:07,760
there's a bunch of

00:31:04,240 --> 00:31:10,240
of uh resources they're the same as the

00:31:07,760 --> 00:31:11,840
prior level ones but they offer slightly

00:31:10,240 --> 00:31:13,600
different api so let's see how we can

00:31:11,840 --> 00:31:16,399
rewrite this deployment

00:31:13,600 --> 00:31:18,880
using these apis okay so i've got

00:31:16,399 --> 00:31:22,000
deployment here

00:31:18,880 --> 00:31:24,880
and now i actually i can use

00:31:22,000 --> 00:31:26,080
you s so again i'll just uh recap for a

00:31:24,880 --> 00:31:27,519
second and then we can

00:31:26,080 --> 00:31:29,840
i'll show you exactly how to implement

00:31:27,519 --> 00:31:32,799
this using the what we call l2's

00:31:29,840 --> 00:31:34,720
level two apis and and those level two

00:31:32,799 --> 00:31:38,080
apis as you saw earlier

00:31:34,720 --> 00:31:40,240
the kubernetes uh the cdks plus

00:31:38,080 --> 00:31:42,159
semantics is the same semantics as the

00:31:40,240 --> 00:31:45,039
core kubernetes resources we're not

00:31:42,159 --> 00:31:46,240
inventing a new world in a sense we're

00:31:45,039 --> 00:31:48,399
just offering

00:31:46,240 --> 00:31:50,640
a higher level set of apis not a higher

00:31:48,399 --> 00:31:52,080
level set of abstractions

00:31:50,640 --> 00:31:53,679
if that makes sense right like the i'm

00:31:52,080 --> 00:31:56,880
distinguishing between

00:31:53,679 --> 00:31:59,440
uh elevating the api abstraction versus

00:31:56,880 --> 00:32:00,000
elevating the mental model right and

00:31:59,440 --> 00:32:02,480
we'll actually

00:32:00,000 --> 00:32:03,279
see what that means in the in in the

00:32:02,480 --> 00:32:05,360
future but

00:32:03,279 --> 00:32:06,799
for for this in this case i'm just i

00:32:05,360 --> 00:32:09,360
still have deployment i still need to

00:32:06,799 --> 00:32:12,559
understand the concept of deployment

00:32:09,360 --> 00:32:14,559
and i can actually specify

00:32:12,559 --> 00:32:16,320
my deployment specifications here i

00:32:14,559 --> 00:32:17,360
don't need i there's no concept of a

00:32:16,320 --> 00:32:19,360
spec and a

00:32:17,360 --> 00:32:20,399
like spec is actually you know some kind

00:32:19,360 --> 00:32:22,799
of a

00:32:20,399 --> 00:32:24,799
mechanical detail of how kubernetes

00:32:22,799 --> 00:32:26,559
manifests are structured but it doesn't

00:32:24,799 --> 00:32:28,559
you don't need that in at that layer so

00:32:26,559 --> 00:32:29,360
i can just specify containers for

00:32:28,559 --> 00:32:31,279
example

00:32:29,360 --> 00:32:32,880
yeah from a user perspective that's

00:32:31,279 --> 00:32:34,240
that's all i want to do like i want to i

00:32:32,880 --> 00:32:35,120
want to tell the deployment which

00:32:34,240 --> 00:32:37,600
container

00:32:35,120 --> 00:32:39,120
to run right and then the other thing

00:32:37,600 --> 00:32:42,799
that i have here

00:32:39,120 --> 00:32:45,200
is actual mutation methods

00:32:42,799 --> 00:32:46,240
because in the cdk the way we we kind of

00:32:45,200 --> 00:32:48,640
think about it

00:32:46,240 --> 00:32:50,480
is that you can mutate the tree as much

00:32:48,640 --> 00:32:52,080
as you want until you synthesize and

00:32:50,480 --> 00:32:52,960
when you synthesize everything becomes

00:32:52,080 --> 00:32:55,440
immutable

00:32:52,960 --> 00:32:57,679
and then goes into the immutable world

00:32:55,440 --> 00:33:00,240
of desired state-based deployment

00:32:57,679 --> 00:33:02,159
but as long as you're inside the cdk

00:33:00,240 --> 00:33:02,960
application and in the execution of the

00:33:02,159 --> 00:33:04,880
application

00:33:02,960 --> 00:33:06,159
you can reach out to objects and change

00:33:04,880 --> 00:33:08,080
them and and so

00:33:06,159 --> 00:33:09,919
it gives you a very very powerful

00:33:08,080 --> 00:33:10,320
programming model and you can do things

00:33:09,919 --> 00:33:12,799
like

00:33:10,320 --> 00:33:13,679
you know passing over the deployment to

00:33:12,799 --> 00:33:15,760
some

00:33:13,679 --> 00:33:16,880
some library that will add a sidecar

00:33:15,760 --> 00:33:19,360
container right

00:33:16,880 --> 00:33:21,440
and that's very powerful yeah and so in

00:33:19,360 --> 00:33:23,519
that case i can just call add container

00:33:21,440 --> 00:33:27,279
and then i can create a container object

00:33:23,519 --> 00:33:30,480
sorry container object

00:33:27,279 --> 00:33:33,519
and specify

00:33:30,480 --> 00:33:36,399
image which is required

00:33:33,519 --> 00:33:37,360
yeah just and i'm just going to use the

00:33:36,399 --> 00:33:39,200
same command

00:33:37,360 --> 00:33:41,360
and i don't even have to specify the

00:33:39,200 --> 00:33:43,360
name although it's required over there

00:33:41,360 --> 00:33:45,039
because yeah there's some default that's

00:33:43,360 --> 00:33:46,799
pretty sane right like call it main

00:33:45,039 --> 00:33:50,240
because that's the main

00:33:46,799 --> 00:33:52,320
main container oh what happened here

00:33:50,240 --> 00:33:53,919
okay so now i've got two deployments and

00:33:52,320 --> 00:33:54,960
that's it right like do i need like the

00:33:53,919 --> 00:33:57,039
labels and so

00:33:54,960 --> 00:33:58,240
no because well it didn't it didn't

00:33:57,039 --> 00:34:00,000
require

00:33:58,240 --> 00:34:02,159
previously when we used the the the

00:34:00,000 --> 00:34:03,279
lower level apis right we had to specify

00:34:02,159 --> 00:34:05,440
a selector and we

00:34:03,279 --> 00:34:07,200
and we specify a selector then we have

00:34:05,440 --> 00:34:08,720
to specify labels but here

00:34:07,200 --> 00:34:10,159
it doesn't say that we need to so let's

00:34:08,720 --> 00:34:10,639
assume we don't let's assume that

00:34:10,159 --> 00:34:15,599
something

00:34:10,639 --> 00:34:15,599
happens and so we're executing again

00:34:18,240 --> 00:34:22,639
yeah now let's uh let's see what what

00:34:20,320 --> 00:34:25,839
our manifest actually looks like

00:34:22,639 --> 00:34:28,000
okay so this is my plus and you see that

00:34:25,839 --> 00:34:30,720
it actually allocated a label for me

00:34:28,000 --> 00:34:31,520
which is pretty nifty i didn't have to

00:34:30,720 --> 00:34:34,560
do it right

00:34:31,520 --> 00:34:37,679
just it has the ability to allocate

00:34:34,560 --> 00:34:39,520
stable uh unique names which is coming

00:34:37,679 --> 00:34:40,240
from the constructors the capability the

00:34:39,520 --> 00:34:43,520
constructor

00:34:40,240 --> 00:34:45,679
offers and and so i could basically just

00:34:43,520 --> 00:34:46,079
describe my intent right like my intent

00:34:45,679 --> 00:34:48,000
is

00:34:46,079 --> 00:34:49,839
i want the deployment i want to deploy a

00:34:48,000 --> 00:34:53,280
single container that's it done

00:34:49,839 --> 00:34:55,280
right yeah okay so uh yeah

00:34:53,280 --> 00:34:56,879
awesome cool um should we deploy this i

00:34:55,280 --> 00:35:00,000
don't know you seem like you're uh

00:34:56,879 --> 00:35:00,880
in a hurry what's the timing like yeah

00:35:00,000 --> 00:35:02,800
let's uh

00:35:00,880 --> 00:35:04,880
let's uh let's let's deploy this and

00:35:02,800 --> 00:35:05,920
start and and in the meantime let's also

00:35:04,880 --> 00:35:08,079
add uh

00:35:05,920 --> 00:35:09,760
add the prune prune labels to our chart

00:35:08,079 --> 00:35:11,599
which you can talk a little bit about

00:35:09,760 --> 00:35:13,200
so for for those of you are not familiar

00:35:11,599 --> 00:35:15,680
with pro labels

00:35:13,200 --> 00:35:18,320
um when you deploy manifests to

00:35:15,680 --> 00:35:18,320
kubernetes

00:35:19,920 --> 00:35:23,359
cube cuddle doesn't know which resources

00:35:21,599 --> 00:35:25,119
you want to remove right because those

00:35:23,359 --> 00:35:26,960
manifests only contain the desired state

00:35:25,119 --> 00:35:28,000
and the desire to say contains only the

00:35:26,960 --> 00:35:31,119
stuff that you want

00:35:28,000 --> 00:35:32,160
to exist and so prune labels are a way

00:35:31,119 --> 00:35:34,640
to basically tell

00:35:32,160 --> 00:35:35,680
cube cuddle hey this is what i want to

00:35:34,640 --> 00:35:37,839
to deploy

00:35:35,680 --> 00:35:39,040
and everything else that's labeled with

00:35:37,839 --> 00:35:41,359
some label

00:35:39,040 --> 00:35:42,960
that's not in that list should be erased

00:35:41,359 --> 00:35:44,079
because it was basically here from a

00:35:42,960 --> 00:35:46,560
previous iteration

00:35:44,079 --> 00:35:47,280
in the sense yeah it's how desire to

00:35:46,560 --> 00:35:49,599
take the point

00:35:47,280 --> 00:35:51,760
yeah it fits more nicely into this

00:35:49,599 --> 00:35:53,680
desired state workflow where you

00:35:51,760 --> 00:35:55,040
remove something from your manifest

00:35:53,680 --> 00:35:56,839
you're essentially saying

00:35:55,040 --> 00:35:58,079
i want to actually delete this from the

00:35:56,839 --> 00:36:00,400
cluster

00:35:58,079 --> 00:36:02,160
okay let's see i i gotta see the logs

00:36:00,400 --> 00:36:05,359
right

00:36:02,160 --> 00:36:05,359
okay logs

00:36:06,320 --> 00:36:12,560
no logs oh because i did bash yeah so

00:36:12,160 --> 00:36:15,599
now

00:36:12,560 --> 00:36:16,640
i'm changing right and redeploying so

00:36:15,599 --> 00:36:19,119
this is kind of like my

00:36:16,640 --> 00:36:19,760
inner inner loop cycle basically change

00:36:19,119 --> 00:36:24,079
my code

00:36:19,760 --> 00:36:27,839
synthesize it deploy yeah then hopefully

00:36:24,079 --> 00:36:27,839
now i've got some stuff that's

00:36:29,200 --> 00:36:33,760
yay all right cool labeled right let's

00:36:32,320 --> 00:36:34,560
add let's add the pruning let's get rid

00:36:33,760 --> 00:36:38,400
of this uh

00:36:34,560 --> 00:36:39,280
deployment uh oh yeah let's let's add

00:36:38,400 --> 00:36:41,599
the

00:36:39,280 --> 00:36:42,720
yeah and then okay so the way pro labels

00:36:41,599 --> 00:36:43,920
work is basically i'm just going to

00:36:42,720 --> 00:36:45,760
enter this apply

00:36:43,920 --> 00:36:47,440
i'm going to say prune and then again

00:36:45,760 --> 00:36:50,079
and i have to specify a label that

00:36:47,440 --> 00:36:51,839
that's that's you know splat you know

00:36:50,079 --> 00:36:53,680
basically consistent across all the

00:36:51,839 --> 00:36:55,359
resources so i need to actually

00:36:53,680 --> 00:36:57,680
label all my resources with the same

00:36:55,359 --> 00:37:00,880
label so i so this print can work

00:36:57,680 --> 00:37:04,480
i can i'll just call it prune and

00:37:00,880 --> 00:37:04,480
we'll just make up some name

00:37:05,040 --> 00:37:09,200
my booboo prune label and but now i

00:37:08,160 --> 00:37:11,839
actually need to label

00:37:09,200 --> 00:37:13,520
those things yeah the nice thing again

00:37:11,839 --> 00:37:16,640
because this is a programming

00:37:13,520 --> 00:37:17,920
uh language and we can do things like uh

00:37:16,640 --> 00:37:21,440
traversatory and

00:37:17,920 --> 00:37:24,320
mutate it during runtime during synth

00:37:21,440 --> 00:37:24,800
synthesis then cdks offers this ability

00:37:24,320 --> 00:37:27,200
to

00:37:24,800 --> 00:37:28,240
specify labels at this at the at the

00:37:27,200 --> 00:37:29,839
chart level

00:37:28,240 --> 00:37:32,079
i can also specify a namespace at the

00:37:29,839 --> 00:37:33,440
chart level

00:37:32,079 --> 00:37:35,280
and it's going to and it's going to

00:37:33,440 --> 00:37:38,000
apply the labels to all

00:37:35,280 --> 00:37:38,640
resources inside that chart to all api

00:37:38,000 --> 00:37:40,800
resources

00:37:38,640 --> 00:37:42,640
inside that chart and inside all of the

00:37:40,800 --> 00:37:44,720
custom yeah all of the child

00:37:42,640 --> 00:37:46,560
constructs within that chart so it's a

00:37:44,720 --> 00:37:49,839
very like

00:37:46,560 --> 00:37:50,160
i i i i wouldn't imagine how to do it

00:37:49,839 --> 00:37:52,160
like

00:37:50,160 --> 00:37:53,920
otherwise if i have you know coffee

00:37:52,160 --> 00:37:54,560
thousand resources now and i need to

00:37:53,920 --> 00:37:56,960
apply

00:37:54,560 --> 00:37:58,320
prune labels how do i do that yeah i

00:37:56,960 --> 00:38:00,800
don't know

00:37:58,320 --> 00:38:02,839
it's it's not fun that's for sure so now

00:38:00,800 --> 00:38:05,839
all i have to do is basically say prune

00:38:02,839 --> 00:38:05,839
booboo

00:38:06,480 --> 00:38:11,119
and before before i run this let me

00:38:09,359 --> 00:38:13,359
let's let's put that

00:38:11,119 --> 00:38:14,160
i gotta just synthesize first to see how

00:38:13,359 --> 00:38:15,920
it looks

00:38:14,160 --> 00:38:17,520
i'm sorry i still i don't trust this

00:38:15,920 --> 00:38:20,640
thing

00:38:17,520 --> 00:38:22,160
as much and it's yet um

00:38:20,640 --> 00:38:24,240
but you can see here that i have this

00:38:22,160 --> 00:38:26,480
print label here and i've got this print

00:38:24,240 --> 00:38:28,560
label here which which is great

00:38:26,480 --> 00:38:31,200
and so now i do okay so i'm just going

00:38:28,560 --> 00:38:33,280
to do this like do it like this

00:38:31,200 --> 00:38:35,520
and so it's going to basically configure

00:38:33,280 --> 00:38:39,440
all my resources to include my label

00:38:35,520 --> 00:38:39,440
and i can even do this

00:38:39,760 --> 00:38:43,920
yeah so it basically applied all all

00:38:42,079 --> 00:38:44,800
like the prune label to all my resources

00:38:43,920 --> 00:38:46,320
and now

00:38:44,800 --> 00:38:48,000
now we can actually get rid of the

00:38:46,320 --> 00:38:50,240
deployment here yeah let's

00:38:48,000 --> 00:38:51,359
get rid of this one because it's too

00:38:50,240 --> 00:38:54,640
long

00:38:51,359 --> 00:38:56,720
and let's run this again

00:38:54,640 --> 00:39:01,599
and it should it should prune one of the

00:38:56,720 --> 00:39:03,440
deployments of course

00:39:01,599 --> 00:39:06,800
yeah i think you can also add this

00:39:03,440 --> 00:39:08,400
command to your to your yarn

00:39:06,800 --> 00:39:10,960
yeah cool okay i'm just going to add

00:39:08,400 --> 00:39:10,960
this command

00:39:11,119 --> 00:39:17,440
here right as a script yep

00:39:14,640 --> 00:39:17,440
call it deploy

00:39:18,800 --> 00:39:24,960
and then i can do yarn deploy

00:39:22,720 --> 00:39:26,240
cool so that's our that's our iteration

00:39:24,960 --> 00:39:27,680
basically

00:39:26,240 --> 00:39:30,079
all right cool another thing that i'm

00:39:27,680 --> 00:39:32,640
going to do to make my life even easier

00:39:30,079 --> 00:39:34,160
i'm going to do this i can just do

00:39:32,640 --> 00:39:36,240
perfect

00:39:34,160 --> 00:39:38,000
all right so now we have we have that we

00:39:36,240 --> 00:39:38,480
have our workflow we have kind of all

00:39:38,000 --> 00:39:40,640
the

00:39:38,480 --> 00:39:42,160
the layering figured out and now we're

00:39:40,640 --> 00:39:44,000
going to start building our our

00:39:42,160 --> 00:39:45,839
application and and this time we're

00:39:44,000 --> 00:39:49,440
actually going to create

00:39:45,839 --> 00:39:50,400
an abstraction not just like a an api

00:39:49,440 --> 00:39:52,160
abstraction but actually

00:39:50,400 --> 00:39:53,520
a different mental model right we want

00:39:52,160 --> 00:39:56,160
to now we want to

00:39:53,520 --> 00:39:57,680
create something for our users and our

00:39:56,160 --> 00:39:58,800
users our developers who don't

00:39:57,680 --> 00:40:00,560
necessarily

00:39:58,800 --> 00:40:02,480
know what deployments are or what

00:40:00,560 --> 00:40:04,560
services are they just want to write

00:40:02,480 --> 00:40:06,480
their code and we want to provide some

00:40:04,560 --> 00:40:06,960
kind of platform for them to do it so i

00:40:06,480 --> 00:40:09,520
think like

00:40:06,960 --> 00:40:10,079
one of the most you know simplest yet

00:40:09,520 --> 00:40:12,560
powerful

00:40:10,079 --> 00:40:14,000
kind of use cases to to actually deploy

00:40:12,560 --> 00:40:16,240
live applications

00:40:14,000 --> 00:40:17,760
is something like uh like a gateway like

00:40:16,240 --> 00:40:21,440
an api gateway

00:40:17,760 --> 00:40:24,560
where you can specify you know like http

00:40:21,440 --> 00:40:27,440
routes http paths uh that are backed

00:40:24,560 --> 00:40:28,400
by docker applications uh that the user

00:40:27,440 --> 00:40:30,240
writes

00:40:28,400 --> 00:40:31,440
so let's let's let's try to let's try to

00:40:30,240 --> 00:40:34,400
implement like the simple

00:40:31,440 --> 00:40:36,000
a simple counter counter uh application

00:40:34,400 --> 00:40:37,839
right where you have slash counter

00:40:36,000 --> 00:40:39,760
to to return the current value of the

00:40:37,839 --> 00:40:41,839
counter and you can also do

00:40:39,760 --> 00:40:43,359
post on the counter to increment the

00:40:41,839 --> 00:40:45,839
counter okay

00:40:43,359 --> 00:40:46,960
i'm not full i'm not sure i fully

00:40:45,839 --> 00:40:49,040
understand but i guess

00:40:46,960 --> 00:40:50,960
let's start with the api and maybe that

00:40:49,040 --> 00:40:53,520
will help me understand exactly what you

00:40:50,960 --> 00:40:55,119
what you want so i cleaned this up a

00:40:53,520 --> 00:40:56,960
little bit uh while you were

00:40:55,119 --> 00:40:58,880
describing maybe that's why i didn't

00:40:56,960 --> 00:41:00,480
understand

00:40:58,880 --> 00:41:02,640
all right cool so let's start like for

00:41:00,480 --> 00:41:03,200
me the api i want to provide my users

00:41:02,640 --> 00:41:06,960
right

00:41:03,200 --> 00:41:10,400
yeah is i want my users to write

00:41:06,960 --> 00:41:10,960
to to instantiate some kind of api data

00:41:10,400 --> 00:41:12,800
api

00:41:10,960 --> 00:41:14,640
router let's call it router right let's

00:41:12,800 --> 00:41:18,160
call it an api router

00:41:14,640 --> 00:41:21,440
okay or just just router maybe

00:41:18,160 --> 00:41:25,839
router router just router and then

00:41:21,440 --> 00:41:25,839
construct so it has to look like this

00:41:26,720 --> 00:41:31,040
and then what install like install

00:41:28,800 --> 00:41:33,520
applications on the router

00:41:31,040 --> 00:41:34,720
basically yeah basically map or route

00:41:33,520 --> 00:41:37,520
different paths

00:41:34,720 --> 00:41:38,640
different http paths to to to different

00:41:37,520 --> 00:41:41,760
handlers

00:41:38,640 --> 00:41:43,280
so uh we're gonna do powder slash

00:41:41,760 --> 00:41:44,000
counter right yeah let's do slash

00:41:43,280 --> 00:41:47,520
counter

00:41:44,000 --> 00:41:48,960
and this has to somehow map or you know

00:41:47,520 --> 00:41:50,319
be implemented by

00:41:48,960 --> 00:41:52,000
some docker application i don't know

00:41:50,319 --> 00:41:54,000
what is it but it's it's docker

00:41:52,000 --> 00:41:55,839
okay right so i want to point to a

00:41:54,000 --> 00:41:58,480
directory with a docker file

00:41:55,839 --> 00:41:59,040
that i can build and just have it run my

00:41:58,480 --> 00:42:03,040
uh

00:41:59,040 --> 00:42:06,880
okay so i love i love i i can do this

00:42:03,040 --> 00:42:09,839
let's call it round counter app

00:42:06,880 --> 00:42:11,440
and i'll show you that i've written

00:42:09,839 --> 00:42:15,839
these node.js demos

00:42:11,440 --> 00:42:17,680
like many times node alpine so you said

00:42:15,839 --> 00:42:18,400
counter let me see so something like

00:42:17,680 --> 00:42:22,240
this

00:42:18,400 --> 00:42:26,720
and then add dot to app and then

00:42:22,240 --> 00:42:30,800
run user bin and

00:42:26,720 --> 00:42:31,520
node every time every time i see you

00:42:30,800 --> 00:42:34,240
write this

00:42:31,520 --> 00:42:34,240
i'm amazed

00:42:35,280 --> 00:42:38,400
and then the javascript is going to be

00:42:36,800 --> 00:42:45,839
javascript they're going to do

00:42:38,400 --> 00:42:45,839
a simple http server

00:42:49,200 --> 00:42:56,160
yeah and we have a counter

00:42:52,400 --> 00:43:00,000
here starts with zero i guess

00:42:56,160 --> 00:43:02,070
server listen on 8080

00:43:00,000 --> 00:43:03,200
and then if it's uh

00:43:02,070 --> 00:43:06,400
[Music]

00:43:03,200 --> 00:43:09,520
sorry if if it's a

00:43:06,400 --> 00:43:11,440
get method i guess we can just like

00:43:09,520 --> 00:43:16,240
no just to increment you know like just

00:43:11,440 --> 00:43:20,160
uh print the counter response right

00:43:16,240 --> 00:43:23,200
counter equals counter plus plus counter

00:43:20,160 --> 00:43:25,599
yeah sure right yeah

00:43:23,200 --> 00:43:27,040
just like good enough yeah good enough

00:43:25,599 --> 00:43:29,599
definitely

00:43:27,040 --> 00:43:33,119
and i know you always forget to handle

00:43:29,599 --> 00:43:33,119
sick terms when you write docker

00:43:38,839 --> 00:43:43,280
applications

00:43:40,160 --> 00:43:45,520
handled should we call it

00:43:43,280 --> 00:43:47,760
or do you think it's gonna work should

00:43:45,520 --> 00:43:49,359
we test it locally before

00:43:47,760 --> 00:43:52,319
yeah let's let's just uh build it

00:43:49,359 --> 00:43:52,319
quickly right

00:43:52,839 --> 00:43:55,839
counter

00:43:56,720 --> 00:43:59,040
cool

00:44:07,440 --> 00:44:11,839
yay all right signal handling

00:44:12,319 --> 00:44:19,119
no no no oh maybe it's

00:44:15,359 --> 00:44:22,400
again second yes and i'm gonna also add

00:44:19,119 --> 00:44:24,000
a little log here

00:44:22,400 --> 00:44:25,839
then i'll know that this thing is

00:44:24,000 --> 00:44:29,680
actually working

00:44:25,839 --> 00:44:32,000
and then docker kill all right

00:44:29,680 --> 00:44:32,000
yes

00:44:34,800 --> 00:44:38,160
yeah this this second handling is not

00:44:37,359 --> 00:44:41,520
okay

00:44:38,160 --> 00:44:42,960
great okay all right so now i need to i

00:44:41,520 --> 00:44:44,960
want to basically point to this

00:44:42,960 --> 00:44:47,040
directory right so counter

00:44:44,960 --> 00:44:48,880
like that would be the ideal api right

00:44:47,040 --> 00:44:50,880
because i don't

00:44:48,880 --> 00:44:52,240
that that would be the ideal yeah let's

00:44:50,880 --> 00:44:55,839
try to make this work

00:44:52,240 --> 00:44:59,400
okay so i guess api driven design right

00:44:55,839 --> 00:45:02,400
um i'm going to create

00:44:59,400 --> 00:45:02,400
router.ts

00:45:03,680 --> 00:45:06,880
and as we said it's construct so

00:45:05,359 --> 00:45:08,400
construct creating constructs is

00:45:06,880 --> 00:45:11,839
actually extremely

00:45:08,400 --> 00:45:12,880
easy uh you just create something that

00:45:11,839 --> 00:45:15,200
extends

00:45:12,880 --> 00:45:16,079
the construct base class and then it has

00:45:15,200 --> 00:45:17,920
to accept

00:45:16,079 --> 00:45:20,480
it and that's it this is a construct so

00:45:17,920 --> 00:45:23,599
you see from from that perspective

00:45:20,480 --> 00:45:25,040
we can now import it into my app now i

00:45:23,599 --> 00:45:27,520
need to include and

00:45:25,040 --> 00:45:28,560
do you know that typescript has uh you

00:45:27,520 --> 00:45:30,319
could do this

00:45:28,560 --> 00:45:32,560
are you familiar with this is this a

00:45:30,319 --> 00:45:35,599
clear method and i just

00:45:32,560 --> 00:45:40,240
jump over here and

00:45:35,599 --> 00:45:42,560
it declares a method that supposedly

00:45:40,240 --> 00:45:44,839
this is the path right yeah this should

00:45:42,560 --> 00:45:46,079
be the path and this should be the

00:45:44,839 --> 00:45:49,280
directory here

00:45:46,079 --> 00:45:52,640
yeah okay very cool

00:45:49,280 --> 00:45:54,400
okay so so this is like from the user's

00:45:52,640 --> 00:45:56,160
perspective but under this is that

00:45:54,400 --> 00:45:57,520
nothing that's it that should be that

00:45:56,160 --> 00:45:59,440
should be the the

00:45:57,520 --> 00:46:00,800
implementation or you know the the

00:45:59,440 --> 00:46:01,680
invocation as far as the user is

00:46:00,800 --> 00:46:04,240
concerned

00:46:01,680 --> 00:46:06,560
so for the implementation i know we'll

00:46:04,240 --> 00:46:08,480
probably need to use an ingress

00:46:06,560 --> 00:46:10,240
because ingress has this capability of

00:46:08,480 --> 00:46:12,000
routing specific http

00:46:10,240 --> 00:46:14,160
paths to different services right to

00:46:12,000 --> 00:46:16,400
different kubernetes services

00:46:14,160 --> 00:46:17,920
so let's let's start with you know

00:46:16,400 --> 00:46:22,400
importing or you know

00:46:17,920 --> 00:46:24,480
using the ingress construct of cdks plus

00:46:22,400 --> 00:46:26,560
and see what kind of api it has to offer

00:46:24,480 --> 00:46:27,599
us okay so basically every router would

00:46:26,560 --> 00:46:29,359
have an ingress

00:46:27,599 --> 00:46:31,119
resource i also uh yeah i have an

00:46:29,359 --> 00:46:32,480
english controller installed in my kind

00:46:31,119 --> 00:46:35,680
like nginx

00:46:32,480 --> 00:46:36,800
yeah standard stuff so basically i can

00:46:35,680 --> 00:46:38,960
use an ingress and it

00:46:36,800 --> 00:46:42,400
supposedly should work let's see the api

00:46:38,960 --> 00:46:44,319
behind behind the ingress

00:46:42,400 --> 00:46:45,680
yeah so we're gonna use the the add rule

00:46:44,319 --> 00:46:46,000
uh there's a bunch of other stuff here

00:46:45,680 --> 00:46:48,560
but

00:46:46,000 --> 00:46:51,040
but the add rule api is basically saying

00:46:48,560 --> 00:46:54,079
give me a path an http uri

00:46:51,040 --> 00:46:56,160
right uh and and the

00:46:54,079 --> 00:46:57,599
and the handler of that path is

00:46:56,160 --> 00:47:00,160
something that's called an ingress

00:46:57,599 --> 00:47:01,920
back end essentially a back end is just

00:47:00,160 --> 00:47:05,280
a kubernetes service

00:47:01,920 --> 00:47:07,520
um but i need to call this from here so

00:47:05,280 --> 00:47:09,200
from this so i need to basically store

00:47:07,520 --> 00:47:12,319
this somewhere

00:47:09,200 --> 00:47:16,079
as a local variable

00:47:12,319 --> 00:47:16,400
as a local member yeah and this is nice

00:47:16,079 --> 00:47:18,720
like

00:47:16,400 --> 00:47:20,559
this is the post instantiation apis you

00:47:18,720 --> 00:47:21,200
can imagine passing this router to

00:47:20,559 --> 00:47:23,760
different

00:47:21,200 --> 00:47:25,680
components of your code and each of them

00:47:23,760 --> 00:47:27,680
installing its own kind of path

00:47:25,680 --> 00:47:29,040
oh cool so it's like the like the add

00:47:27,680 --> 00:47:31,599
container stuff that we

00:47:29,040 --> 00:47:32,640
sort of yeah this is now the path is

00:47:31,599 --> 00:47:35,920
here

00:47:32,640 --> 00:47:38,559
and the backend so this is

00:47:35,920 --> 00:47:39,040
yeah let's get this okay so a few of a

00:47:38,559 --> 00:47:41,680
few of

00:47:39,040 --> 00:47:43,040
the a few of like our uh patterns is to

00:47:41,680 --> 00:47:44,640
do

00:47:43,040 --> 00:47:46,079
like the the from methods right from

00:47:44,640 --> 00:47:48,160
methods is when you

00:47:46,079 --> 00:47:49,359
when when uh when a resource is

00:47:48,160 --> 00:47:50,640
configured

00:47:49,359 --> 00:47:52,480
with something that's called the union

00:47:50,640 --> 00:47:54,880
type where you can pass in

00:47:52,480 --> 00:47:56,079
a few properties but you can only use

00:47:54,880 --> 00:47:56,960
one of them right they're mutually

00:47:56,079 --> 00:47:58,880
exclusive

00:47:56,960 --> 00:48:00,960
so every time you see this kind of this

00:47:58,880 --> 00:48:01,920
pattern you'll see in the cdks you'll

00:48:00,960 --> 00:48:05,119
see the from

00:48:01,920 --> 00:48:06,480
pattern so an ingress back end we can

00:48:05,119 --> 00:48:08,559
create it from a service

00:48:06,480 --> 00:48:11,040
so let's try let's do it it's like a

00:48:08,559 --> 00:48:12,800
static method that returns

00:48:11,040 --> 00:48:14,319
an instance it's basically a factory a

00:48:12,800 --> 00:48:16,559
factory method yeah

00:48:14,319 --> 00:48:17,599
yeah okay so here i basically need a

00:48:16,559 --> 00:48:19,280
service to

00:48:17,599 --> 00:48:20,720
to get there obviously we obviously need

00:48:19,280 --> 00:48:23,599
a service

00:48:20,720 --> 00:48:24,240
now i need to create a service but the

00:48:23,599 --> 00:48:27,599
services

00:48:24,240 --> 00:48:30,640
uh is frontier deployment

00:48:27,599 --> 00:48:32,079
right exactly deployment first right

00:48:30,640 --> 00:48:33,200
exactly the service serves the

00:48:32,079 --> 00:48:34,079
deployment right you don't create a

00:48:33,200 --> 00:48:38,079
service just like

00:48:34,079 --> 00:48:41,200
that you you know deployments already

00:48:38,079 --> 00:48:41,200
let's create a deployment

00:48:41,760 --> 00:48:49,359
and then deployment.ad container

00:48:46,319 --> 00:48:53,040
new container

00:48:49,359 --> 00:48:53,040
oh wait but i need to i

00:48:53,119 --> 00:48:57,599
so what do we do here so we actually

00:48:54,800 --> 00:49:00,319
need to build right we need to build

00:48:57,599 --> 00:49:01,280
the directory and we need to extract the

00:49:00,319 --> 00:49:03,760
specific

00:49:01,280 --> 00:49:04,400
digest you know of the of that specific

00:49:03,760 --> 00:49:07,440
build

00:49:04,400 --> 00:49:09,760
and use this as our image url right

00:49:07,440 --> 00:49:12,000
so yeah i actually published this i

00:49:09,760 --> 00:49:15,200
actually published this library uh

00:49:12,000 --> 00:49:16,000
a few days ago that does exactly this as

00:49:15,200 --> 00:49:19,680
luck would have it

00:49:16,000 --> 00:49:21,200
right uh let me show you it's pretty

00:49:19,680 --> 00:49:23,280
it's pretty nifty

00:49:21,200 --> 00:49:26,319
it's called so i publish it to npm it

00:49:23,280 --> 00:49:27,920
actually uses also uses jsi so

00:49:26,319 --> 00:49:30,559
we can publish it to like all the

00:49:27,920 --> 00:49:31,760
package managers like maven and pie pie

00:49:30,559 --> 00:49:35,440
and

00:49:31,760 --> 00:49:39,440
it's called cdk's image

00:49:35,440 --> 00:49:39,440
and i'll show you what it how it works

00:49:40,480 --> 00:49:44,000
it's an image construct which takes care

00:49:42,400 --> 00:49:46,640
of building and pushing docker images

00:49:44,000 --> 00:49:47,280
that can be used in cdk's application

00:49:46,640 --> 00:49:50,000
and so

00:49:47,280 --> 00:49:52,079
basically the way it works you specify a

00:49:50,000 --> 00:49:54,079
directory a local directory

00:49:52,079 --> 00:49:55,200
uh you can also specify a registry into

00:49:54,079 --> 00:49:58,720
which you want to push

00:49:55,200 --> 00:49:59,680
the image we have like a local registry

00:49:58,720 --> 00:50:02,800
on exactly

00:49:59,680 --> 00:50:04,720
my setup of course and then

00:50:02,800 --> 00:50:06,079
uh you can you can create a deployment

00:50:04,720 --> 00:50:09,040
and specify that image you

00:50:06,079 --> 00:50:10,400
the images uri through dot uri so it

00:50:09,040 --> 00:50:12,640
basically gives you

00:50:10,400 --> 00:50:13,839
your the the exact uri of that image

00:50:12,640 --> 00:50:15,280
that it's built so it's

00:50:13,839 --> 00:50:17,280
the nice thing about this is that you

00:50:15,280 --> 00:50:19,839
don't have to separate

00:50:17,280 --> 00:50:20,800
the image building and publish at

00:50:19,839 --> 00:50:23,839
pushing

00:50:20,800 --> 00:50:26,000
uh flows with

00:50:23,839 --> 00:50:26,880
your synthesis flows and it's very

00:50:26,000 --> 00:50:28,960
common in

00:50:26,880 --> 00:50:30,240
in the kubernetes world that image

00:50:28,960 --> 00:50:32,400
building and pushing is done

00:50:30,240 --> 00:50:33,920
together with you know building your

00:50:32,400 --> 00:50:35,920
application because this is basically

00:50:33,920 --> 00:50:38,880
the build stage of your

00:50:35,920 --> 00:50:40,079
city indicates it's a build tool right

00:50:38,880 --> 00:50:44,319
so it makes sense

00:50:40,079 --> 00:50:46,559
for the build tool to actually do this

00:50:44,319 --> 00:50:48,480
exactly but you could do anything you

00:50:46,559 --> 00:50:49,280
want right we can plug in any string you

00:50:48,480 --> 00:50:51,760
want you could

00:50:49,280 --> 00:50:52,400
use ci systems to publish your images

00:50:51,760 --> 00:50:54,319
and

00:50:52,400 --> 00:50:56,079
wire this information into your cdk

00:50:54,319 --> 00:50:57,359
application then pass that information

00:50:56,079 --> 00:50:59,760
into your container

00:50:57,359 --> 00:51:00,400
uh but this is it's pretty rudimentary

00:50:59,760 --> 00:51:02,160
we can

00:51:00,400 --> 00:51:03,520
obviously evolve it and make it more

00:51:02,160 --> 00:51:05,680
sophisticated but

00:51:03,520 --> 00:51:07,440
it will it it's definitely going to

00:51:05,680 --> 00:51:12,240
serve the purposes of this

00:51:07,440 --> 00:51:14,400
demo so libraries

00:51:12,240 --> 00:51:16,640
is just by installing them right like

00:51:14,400 --> 00:51:19,280
any other library that you'd install

00:51:16,640 --> 00:51:20,559
uh yarn add in the in the typescript

00:51:19,280 --> 00:51:23,680
javascript world

00:51:20,559 --> 00:51:27,280
or npm install uh and

00:51:23,680 --> 00:51:28,400
so cdk's image a lot i'm gonna ask you

00:51:27,280 --> 00:51:32,559
to go a little bit

00:51:28,400 --> 00:51:33,359
faster now okay so i need the image okay

00:51:32,559 --> 00:51:37,280
let's do this

00:51:33,359 --> 00:51:40,720
image equals new image

00:51:37,280 --> 00:51:43,839
see it brought it over from cdks

00:51:40,720 --> 00:51:45,119
and then i'm going to do this and there

00:51:43,839 --> 00:51:48,839
would be image gear

00:51:45,119 --> 00:51:51,839
and registry would be this localhost

00:51:48,839 --> 00:51:54,800
5000 and here i'm going to just

00:51:51,839 --> 00:51:56,000
put image url and now how do i get the

00:51:54,800 --> 00:51:58,559
service from the

00:51:56,000 --> 00:51:59,680
like do i need to create a service now

00:51:58,559 --> 00:52:00,880
yeah so

00:51:59,680 --> 00:52:02,400
we have to create a service right

00:52:00,880 --> 00:52:03,599
because an ingress backend is a service

00:52:02,400 --> 00:52:06,000
but actually if you look at the

00:52:03,599 --> 00:52:07,200
deployment and the api on the deployment

00:52:06,000 --> 00:52:08,800
construct

00:52:07,200 --> 00:52:11,280
you'll notice something that is very

00:52:08,800 --> 00:52:12,480
familiar to kubernetes users and that's

00:52:11,280 --> 00:52:15,599
the exposed method and

00:52:12,480 --> 00:52:16,240
it's essentially mimicking the behavior

00:52:15,599 --> 00:52:18,160
of

00:52:16,240 --> 00:52:19,920
cube cuddle exposed right where you can

00:52:18,160 --> 00:52:22,480
pass in a deployment

00:52:19,920 --> 00:52:24,000
and the expose will actually wire and

00:52:22,480 --> 00:52:26,160
create a service

00:52:24,000 --> 00:52:28,079
that selects that deployment and routes

00:52:26,160 --> 00:52:30,000
to it okay and

00:52:28,079 --> 00:52:33,359
you can actually get the service by just

00:52:30,000 --> 00:52:36,000
storing the return value of this

00:52:33,359 --> 00:52:37,440
i think i need to specify the out the

00:52:36,000 --> 00:52:40,640
container port here right

00:52:37,440 --> 00:52:41,040
yeah and then the i do i need to somehow

00:52:40,640 --> 00:52:43,119
map

00:52:41,040 --> 00:52:44,960
the out the external port and the

00:52:43,119 --> 00:52:47,200
internal port or is it all

00:52:44,960 --> 00:52:48,880
done for me we'll see it in the manifest

00:52:47,200 --> 00:52:51,200
it's it's done for you of course

00:52:48,880 --> 00:52:53,440
um we're talking about it but uh but

00:52:51,200 --> 00:52:55,200
yeah this is so you can just choose any

00:52:53,440 --> 00:52:56,559
any exposed port you want this is like

00:52:55,200 --> 00:52:59,440
an external port

00:52:56,559 --> 00:53:00,160
that you want uh your users to to to

00:52:59,440 --> 00:53:03,119
access

00:53:00,160 --> 00:53:04,480
your service basically the service or

00:53:03,119 --> 00:53:05,920
the service exposure

00:53:04,480 --> 00:53:07,040
yeah if you want to access the service

00:53:05,920 --> 00:53:07,520
then this is the port you're going to

00:53:07,040 --> 00:53:09,200
use

00:53:07,520 --> 00:53:11,280
we're going to be using ingress right so

00:53:09,200 --> 00:53:14,880
we have another layer of indirection

00:53:11,280 --> 00:53:16,880
but yeah okay so this is compiling now

00:53:14,880 --> 00:53:19,119
i get a service i can pass it over to

00:53:16,880 --> 00:53:21,280
the back end and then edit here's

00:53:19,119 --> 00:53:24,240
here's a tenant here's a tenant of the

00:53:21,280 --> 00:53:28,800
cdk if it's compiling it should work

00:53:24,240 --> 00:53:30,960
okay let's let's see should i do

00:53:28,800 --> 00:53:30,960
d

00:53:32,160 --> 00:53:35,200
so now it should actually build our our

00:53:34,400 --> 00:53:38,240
image oh

00:53:35,200 --> 00:53:41,920
cool building and pushing

00:53:38,240 --> 00:53:43,760
very nice and this is failing because

00:53:41,920 --> 00:53:47,680
[Music]

00:53:43,760 --> 00:53:49,280
creating oh now nginx denied and request

00:53:47,680 --> 00:53:53,200
host and pass

00:53:49,280 --> 00:53:57,839
counter request post

00:53:53,200 --> 00:53:57,839
do we have something

00:54:00,240 --> 00:54:03,680
it's already defined in ingress oh maybe

00:54:02,800 --> 00:54:06,240
it's from a dif

00:54:03,680 --> 00:54:08,839
different uh let me let me see if i we

00:54:06,240 --> 00:54:11,280
don't we have a

00:54:08,839 --> 00:54:14,000
um some previous

00:54:11,280 --> 00:54:14,000
thing yeah

00:54:16,319 --> 00:54:25,839
oh we didn't uh okay

00:54:26,000 --> 00:54:30,079
okay try again just some uh leftovers

00:54:29,680 --> 00:54:33,760
from

00:54:30,079 --> 00:54:35,599
our previous test surprisingly same name

00:54:33,760 --> 00:54:37,599
of the

00:54:35,599 --> 00:54:38,799
but that's the thing right it's stable

00:54:37,599 --> 00:54:39,520
names so it's always going to be the

00:54:38,799 --> 00:54:43,520
same

00:54:39,520 --> 00:54:46,880
okay so this looks like it worked uh

00:54:43,520 --> 00:54:50,799
i've got my router

00:54:46,880 --> 00:54:50,799
deployed here okay

00:54:51,359 --> 00:54:56,640
should i just curl yeah let's just curl

00:54:54,720 --> 00:55:00,079
it

00:54:56,640 --> 00:55:02,559
yay okay cool this is pretty cool

00:55:00,079 --> 00:55:03,839
this is this is the experience we want

00:55:02,559 --> 00:55:06,880
um

00:55:03,839 --> 00:55:08,480
so now recap just a quick recap okay i

00:55:06,880 --> 00:55:12,960
want to emphasize a few things

00:55:08,480 --> 00:55:15,839
let me put this here

00:55:12,960 --> 00:55:17,520
so i think like the the the interesting

00:55:15,839 --> 00:55:20,079
discussion here is about the mental

00:55:17,520 --> 00:55:23,200
model what what you described earlier

00:55:20,079 --> 00:55:24,799
as far as the user users of this router

00:55:23,200 --> 00:55:26,000
are concerned they don't know about

00:55:24,799 --> 00:55:27,839
ingress they don't know about

00:55:26,000 --> 00:55:30,160
deployments they don't know about

00:55:27,839 --> 00:55:31,760
this image thing all they know is that

00:55:30,160 --> 00:55:34,799
they've put their code under

00:55:31,760 --> 00:55:38,160
counter app and they've basically

00:55:34,799 --> 00:55:40,880
mounted in or installed it onto this

00:55:38,160 --> 00:55:42,480
route and that's it yeah that's it and

00:55:40,880 --> 00:55:44,640
that's and that's like this is

00:55:42,480 --> 00:55:46,160
the the next level of abstraction right

00:55:44,640 --> 00:55:49,920
now you can publish this

00:55:46,160 --> 00:55:52,079
as a as an npm library or anything

00:55:49,920 --> 00:55:53,040
and users can use it without having to

00:55:52,079 --> 00:55:55,760
know

00:55:53,040 --> 00:55:57,359
you know what what ingresses are or

00:55:55,760 --> 00:55:59,440
services or deployments so it's a

00:55:57,359 --> 00:56:01,680
completely different kind of

00:55:59,440 --> 00:56:03,280
mental model yeah it's a different

00:56:01,680 --> 00:56:04,640
universe it's not the kubernetes

00:56:03,280 --> 00:56:07,599
universe it's not the

00:56:04,640 --> 00:56:10,400
universe and it's a universe that's more

00:56:07,599 --> 00:56:10,960
familiar with our regular runtime code

00:56:10,400 --> 00:56:12,640
right

00:56:10,960 --> 00:56:15,200
applicative code this is how you would

00:56:12,640 --> 00:56:17,040
create like an express application or or

00:56:15,200 --> 00:56:20,079
a django application it's yeah

00:56:17,040 --> 00:56:22,960
right pretty common mental model

00:56:20,079 --> 00:56:24,319
okay um but this is this is still a bit

00:56:22,960 --> 00:56:27,440
of a toy i feel like

00:56:24,319 --> 00:56:29,040
uh i mean let's get one more than one

00:56:27,440 --> 00:56:32,000
replica of something

00:56:29,040 --> 00:56:33,520
and then you know stuff like that so

00:56:32,000 --> 00:56:35,520
let's let's uh let's do some

00:56:33,520 --> 00:56:37,040
productization for this uh for this

00:56:35,520 --> 00:56:38,319
little router so the first thing we want

00:56:37,040 --> 00:56:40,240
to do is

00:56:38,319 --> 00:56:41,359
actually add like a readiness probe

00:56:40,240 --> 00:56:45,040
right right most most

00:56:41,359 --> 00:56:45,599
uh pods need a way to to make sure that

00:56:45,040 --> 00:56:47,520
they're

00:56:45,599 --> 00:56:49,599
up and running before kubernetes can

00:56:47,520 --> 00:56:51,599
send traffic to them right

00:56:49,599 --> 00:56:52,799
you know what my my users don't really

00:56:51,599 --> 00:56:54,079
care about that because they're just

00:56:52,799 --> 00:56:55,280
like serving http

00:56:54,079 --> 00:56:57,200
traffic and so as far as they're

00:56:55,280 --> 00:56:59,359
concerned you know exactly you can hit

00:56:57,200 --> 00:57:01,760
that end point it should work right like

00:56:59,359 --> 00:57:03,520
it's it's probably fine we can think

00:57:01,760 --> 00:57:05,040
about like maybe exposing something

00:57:03,520 --> 00:57:06,400
later on but definitely like for the

00:57:05,040 --> 00:57:10,720
common thing

00:57:06,400 --> 00:57:10,720
simplest thing can just http get uh

00:57:10,880 --> 00:57:14,559
let's see what what api the container

00:57:12,880 --> 00:57:15,920
has i think the the readiness

00:57:14,559 --> 00:57:17,760
probe should be on the container right

00:57:15,920 --> 00:57:19,040
really nice okay so the term is when

00:57:17,760 --> 00:57:21,280
ready container is ready

00:57:19,040 --> 00:57:22,720
and it accepts a probe class which is i

00:57:21,280 --> 00:57:26,880
think another union like

00:57:22,720 --> 00:57:26,880
thing yeah probe

00:57:28,160 --> 00:57:31,680
here right so you can either do http or

00:57:30,880 --> 00:57:35,520
a command

00:57:31,680 --> 00:57:38,000
so that way and that's it

00:57:35,520 --> 00:57:39,839
and it knows the port because i just

00:57:38,000 --> 00:57:40,799
said it right so there's no reason

00:57:39,839 --> 00:57:43,200
that's pretty exactly

00:57:40,799 --> 00:57:44,880
just just a line above that used to be

00:57:43,200 --> 00:57:47,599
specified now if i deploy this

00:57:44,880 --> 00:57:48,880
i should get readiness probes and you

00:57:47,599 --> 00:57:52,079
see that the user didn't

00:57:48,880 --> 00:57:54,799
change anything so think you know think

00:57:52,079 --> 00:57:55,760
this library slide router library added

00:57:54,799 --> 00:57:58,240
readiness pro

00:57:55,760 --> 00:57:59,119
readiness probes released a new version

00:57:58,240 --> 00:58:00,400
the users just

00:57:59,119 --> 00:58:02,480
picked that up and now they have

00:58:00,400 --> 00:58:03,839
readiness probes across my entire

00:58:02,480 --> 00:58:06,880
company right like i

00:58:03,839 --> 00:58:08,160
nobody had to do anything pretty neat i

00:58:06,880 --> 00:58:11,280
want to see the readiness part

00:58:08,160 --> 00:58:13,040
if you don't mind part of my deployment

00:58:11,280 --> 00:58:16,880
right

00:58:13,040 --> 00:58:19,760
oh it should be part of the pod

00:58:16,880 --> 00:58:23,839
yeah also oh i see the other one

00:58:19,760 --> 00:58:23,839
terminating that's pretty cool

00:58:25,440 --> 00:58:28,000
odd

00:58:28,480 --> 00:58:36,319
okay readiness http gets slash

00:58:32,000 --> 00:58:38,319
oh that's pretty okay cool

00:58:36,319 --> 00:58:40,400
what else all right so what else we need

00:58:38,319 --> 00:58:42,880
to replicas let's do

00:58:40,400 --> 00:58:44,079
multiple replicas yeah so if we if we're

00:58:42,880 --> 00:58:45,200
going to do replicas

00:58:44,079 --> 00:58:46,960
we're going to have to change our

00:58:45,200 --> 00:58:48,079
implementation a bit because we're doing

00:58:46,960 --> 00:58:51,119
you know this native

00:58:48,079 --> 00:58:53,440
naive kind of in-memory counter

00:58:51,119 --> 00:58:54,480
so what let's let's let's implement a

00:58:53,440 --> 00:58:57,280
persistent counter

00:58:54,480 --> 00:58:57,839
like with redis for example yeah

00:58:57,280 --> 00:58:59,599
actually

00:58:57,839 --> 00:59:01,359
i think we already have that problem

00:58:59,599 --> 00:59:03,920
because we just

00:59:01,359 --> 00:59:05,520
you know killed our previous counter

00:59:03,920 --> 00:59:08,079
right yeah

00:59:05,520 --> 00:59:09,839
reset yeah so for obviously we can do a

00:59:08,079 --> 00:59:12,640
counter without like persisting

00:59:09,839 --> 00:59:13,760
so you want to add a redis uh let's i

00:59:12,640 --> 00:59:15,680
want to first like

00:59:13,760 --> 00:59:17,680
you know deploy multiple let's say we

00:59:15,680 --> 00:59:18,160
just deploy three replicas of every time

00:59:17,680 --> 00:59:20,799
let's

00:59:18,160 --> 00:59:22,480
keep it simple right um so i'm just

00:59:20,799 --> 00:59:25,839
gonna go to my router

00:59:22,480 --> 00:59:29,280
and replicas are here right part of the

00:59:25,839 --> 00:59:29,280
okay yeah okay

00:59:29,760 --> 00:59:33,839
and if i deployed this

00:59:34,799 --> 00:59:40,400
you know what i'm going to just add one

00:59:36,720 --> 00:59:40,400
tiny tiny thing here

00:59:42,960 --> 00:59:47,839
now we're getting real

00:59:48,960 --> 00:59:52,079
yeah it's just so we can you know

00:59:50,240 --> 00:59:53,920
differentiate between and see

00:59:52,079 --> 00:59:55,200
and see the the traffic routing to

00:59:53,920 --> 00:59:59,520
different parts yeah yeah

00:59:55,200 --> 01:00:02,559
i mean we got to do this

00:59:59,520 --> 01:00:03,119
okay but i can already see the two a few

01:00:02,559 --> 01:00:05,119
instances

01:00:03,119 --> 01:00:08,160
right the counters are jumping around

01:00:05,119 --> 01:00:10,240
which is pretty cute

01:00:08,160 --> 01:00:12,000
and at some point i'm gonna need to see

01:00:10,240 --> 01:00:14,240
the

01:00:12,000 --> 01:00:17,040
the hostname as those things are okay

01:00:14,240 --> 01:00:21,200
we'll just let that uh run

01:00:17,040 --> 01:00:23,599
all right redis yeah

01:00:21,200 --> 01:00:24,319
i always install through helm everything

01:00:23,599 --> 01:00:27,280
oh you know

01:00:24,319 --> 01:00:28,000
those things definitely let's uh let's

01:00:27,280 --> 01:00:29,599
let's try and install

01:00:28,000 --> 01:00:32,400
it from hell and we actually have

01:00:29,599 --> 01:00:33,599
support for helm in cdks where you can

01:00:32,400 --> 01:00:35,680
uh there's there's something called a

01:00:33,599 --> 01:00:38,640
helm construct of course

01:00:35,680 --> 01:00:40,559
uh and you can you can specify which

01:00:38,640 --> 01:00:42,319
chart you want to install and the helm

01:00:40,559 --> 01:00:44,960
construct will actually

01:00:42,319 --> 01:00:47,599
call helm underneath right for you the

01:00:44,960 --> 01:00:49,359
same way that cdk's image calls docker

01:00:47,599 --> 01:00:51,839
so all these build tools are kind of

01:00:49,359 --> 01:00:53,599
encapsulated or abstracted away

01:00:51,839 --> 01:00:55,680
using these constructs it's not it's not

01:00:53,599 --> 01:00:59,040
going to actually install the chart

01:00:55,680 --> 01:01:01,359
it's going to use helm template which is

01:00:59,040 --> 01:01:02,240
yeah sorry to feature that allows you to

01:01:01,359 --> 01:01:04,480
basically

01:01:02,240 --> 01:01:06,160
synthesize the template from a chart you

01:01:04,480 --> 01:01:07,920
know given a set of values and things

01:01:06,160 --> 01:01:10,720
like that right

01:01:07,920 --> 01:01:11,520
yeah okay so what is the required field

01:01:10,720 --> 01:01:14,799
here is

01:01:11,520 --> 01:01:18,720
chart um

01:01:14,799 --> 01:01:21,520
vietname redis right

01:01:18,720 --> 01:01:22,160
yep that's the one and what else do we

01:01:21,520 --> 01:01:24,400
have here

01:01:22,160 --> 01:01:26,160
i see home executable helm flags gives

01:01:24,400 --> 01:01:28,400
me some ability to control

01:01:26,160 --> 01:01:29,760
the execution and then the release name

01:01:28,400 --> 01:01:31,839
is optional

01:01:29,760 --> 01:01:34,079
which yeah it probably says that it's

01:01:31,839 --> 01:01:34,799
going to allocate it based on where the

01:01:34,079 --> 01:01:36,559
construct

01:01:34,799 --> 01:01:38,480
is which is pretty cool i know that i

01:01:36,559 --> 01:01:39,359
know that helm charts like the the redis

01:01:38,480 --> 01:01:41,920
helm chart

01:01:39,359 --> 01:01:42,559
actually generates conve like it

01:01:41,920 --> 01:01:44,319
generates

01:01:42,559 --> 01:01:45,839
values based on release names right

01:01:44,319 --> 01:01:47,520
that's the convention for example

01:01:45,839 --> 01:01:49,599
derived from the release name

01:01:47,520 --> 01:01:51,520
exactly for example we'll see it later

01:01:49,599 --> 01:01:52,640
like the redis password is going to

01:01:51,520 --> 01:01:55,359
actually be

01:01:52,640 --> 01:01:56,240
extracted from secret that has a name

01:01:55,359 --> 01:01:58,480
with a convention

01:01:56,240 --> 01:02:00,400
yeah so we'll see that um and you can

01:01:58,480 --> 01:02:00,960
access that release name if you store

01:02:00,400 --> 01:02:03,200
the helm

01:02:00,960 --> 01:02:06,160
in a in a construct in a constant and

01:02:03,200 --> 01:02:09,760
use it oh cool so if i do

01:02:06,160 --> 01:02:12,160
redis red is releasing same same as

01:02:09,760 --> 01:02:13,760
with the name so i guess releases are

01:02:12,160 --> 01:02:15,760
kind of like the scope

01:02:13,760 --> 01:02:16,799
right like the construct scope for the

01:02:15,760 --> 01:02:18,799
helm chart it

01:02:16,799 --> 01:02:20,880
gives the ability to basically install

01:02:18,799 --> 01:02:22,480
two radius in the same cluster with

01:02:20,880 --> 01:02:24,079
different release names so the resources

01:02:22,480 --> 01:02:26,640
are not conflicting but it's basically

01:02:24,079 --> 01:02:27,920
one level of nesting there's no tree

01:02:26,640 --> 01:02:31,200
it's just a single

01:02:27,920 --> 01:02:34,000
kind of name spacing for the chart

01:02:31,200 --> 01:02:36,240
okay do i need any values i see that i

01:02:34,000 --> 01:02:38,720
have yeah

01:02:36,240 --> 01:02:39,920
let's just uh input some values for our

01:02:38,720 --> 01:02:42,160
demo sake uh

01:02:39,920 --> 01:02:44,079
to disable the the redis clustering

01:02:42,160 --> 01:02:46,400
we're just gonna do a single node

01:02:44,079 --> 01:02:47,680
uh simple what's this what's the

01:02:46,400 --> 01:02:49,839
configuration

01:02:47,680 --> 01:02:51,119
yeah so unfortunately this part isn't

01:02:49,839 --> 01:02:52,640
isn't typed um

01:02:51,119 --> 01:02:55,920
but so we need to take a look at the

01:02:52,640 --> 01:02:59,039
conference but i can tell you that

01:02:55,920 --> 01:03:02,240
it's basically you do cluster uh

01:02:59,039 --> 01:03:05,839
and then enabled false

01:03:02,240 --> 01:03:06,720
that's that's it okay and you know i can

01:03:05,839 --> 01:03:08,720
actually like

01:03:06,720 --> 01:03:10,559
derive this value from some

01:03:08,720 --> 01:03:11,599
configuration of my chart so i can add

01:03:10,559 --> 01:03:13,839
like something like

01:03:11,599 --> 01:03:15,039
this is you know a dev environment and

01:03:13,839 --> 01:03:17,680
in the dev environment i'm

01:03:15,039 --> 01:03:18,400
to disable the cluster and production i

01:03:17,680 --> 01:03:20,640
can

01:03:18,400 --> 01:03:22,000
i can actually write the the logic that

01:03:20,640 --> 01:03:23,440
uh decides what what is the

01:03:22,000 --> 01:03:26,000
configuration of my

01:03:23,440 --> 01:03:27,440
registration yes but we're not going to

01:03:26,000 --> 01:03:28,640
do that now

01:03:27,440 --> 01:03:31,119
because we don't have enough time and

01:03:28,640 --> 01:03:33,920
i'm going to rack over there okay okay

01:03:31,119 --> 01:03:35,760
i need to okay so now i've got my so

01:03:33,920 --> 01:03:37,440
this is it that's all i need to deploy

01:03:35,760 --> 01:03:40,480
redis classroom

01:03:37,440 --> 01:03:40,799
so that should be it basically yes show

01:03:40,480 --> 01:03:44,240
me

01:03:40,799 --> 01:03:45,520
show me

01:03:44,240 --> 01:03:47,520
now obviously we're going to need to

01:03:45,520 --> 01:03:50,559
change our code right the the

01:03:47,520 --> 01:03:52,319
the the this http server that is going

01:03:50,559 --> 01:03:54,960
to have to connect to redis

01:03:52,319 --> 01:03:56,319
right it's going to have to connect with

01:03:54,960 --> 01:03:58,240
the password so we're going to

01:03:56,319 --> 01:04:00,480
i know that you've been you know hacking

01:03:58,240 --> 01:04:01,839
on this earlier can you send me the

01:04:00,480 --> 01:04:04,960
the code i don't want to spend too much

01:04:01,839 --> 01:04:04,960
time like writing that code

01:04:05,119 --> 01:04:12,079
yeah okay so it does seem like

01:04:09,200 --> 01:04:14,319
something happened here let me look at

01:04:12,079 --> 01:04:16,960
this

01:04:14,319 --> 01:04:19,599
pretty cool this is already running

01:04:16,960 --> 01:04:19,599
that's nice

01:04:20,799 --> 01:04:26,400
ready to accept connections ellie

01:04:23,920 --> 01:04:27,440
that was that was magical i wonder what

01:04:26,400 --> 01:04:31,200
i mean

01:04:27,440 --> 01:04:33,599
yeah this is this is uh cdk's

01:04:31,200 --> 01:04:35,200
and helm right we have to give uh we

01:04:33,599 --> 01:04:38,319
have to give uh

01:04:35,200 --> 01:04:39,599
salute to helm for creating but this is

01:04:38,319 --> 01:04:42,079
pretty nice because

01:04:39,599 --> 01:04:43,760
i think it encapsulates the fact that

01:04:42,079 --> 01:04:47,280
i'm using helm

01:04:43,760 --> 01:04:47,760
behind this construct and so i i guess i

01:04:47,280 --> 01:04:50,400
can

01:04:47,760 --> 01:04:54,319
actually wrap this into a construct like

01:04:50,400 --> 01:04:56,640
redis construct and then

01:04:54,319 --> 01:04:58,720
and then you can actually provide for

01:04:56,640 --> 01:05:01,440
your users right you can provide

01:04:58,720 --> 01:05:02,000
additional typing that isn't available

01:05:01,440 --> 01:05:03,520
at

01:05:02,000 --> 01:05:06,400
the lower level right so for example

01:05:03,520 --> 01:05:06,400
these values

01:05:07,440 --> 01:05:10,160
do this again

01:05:17,680 --> 01:05:21,760
and since you're already doing that then

01:05:20,000 --> 01:05:23,839
we should also

01:05:21,760 --> 01:05:25,359
expose some properties for this

01:05:23,839 --> 01:05:26,319
construct because we know that we're

01:05:25,359 --> 01:05:28,240
going to need

01:05:26,319 --> 01:05:30,079
the password for redis in order to

01:05:28,240 --> 01:05:32,240
connect right so it would be nice if we

01:05:30,079 --> 01:05:35,760
have like a property or a method

01:05:32,240 --> 01:05:37,680
on this class that exposes

01:05:35,760 --> 01:05:39,200
and the same thing for for the host name

01:05:37,680 --> 01:05:41,839
the password is going to be stored in

01:05:39,200 --> 01:05:42,799
let me i think i let me see a secret

01:05:41,839 --> 01:05:45,680
right

01:05:42,799 --> 01:05:46,079
yeah so i'm going to tell you because

01:05:45,680 --> 01:05:47,839
i've

01:05:46,079 --> 01:05:49,119
i've been dealing with this chart for a

01:05:47,839 --> 01:05:52,160
while now some

01:05:49,119 --> 01:05:53,440
so the yeah here so it's basically the

01:05:52,160 --> 01:05:56,799
name

01:05:53,440 --> 01:06:00,319
the release name and redis password

01:05:56,799 --> 01:06:04,720
yeah so you do you're gonna do

01:06:00,319 --> 01:06:06,559
yeah read only password okay and

01:06:04,720 --> 01:06:08,240
its type is going to be a secret value

01:06:06,559 --> 01:06:08,720
we have like this notion of a secret

01:06:08,240 --> 01:06:11,760
value

01:06:08,720 --> 01:06:13,200
in tdks which is essentially a

01:06:11,760 --> 01:06:15,440
combination of a secret

01:06:13,200 --> 01:06:16,880
and a specific key inside that secret to

01:06:15,440 --> 01:06:19,280
extract the value let's see

01:06:16,880 --> 01:06:20,079
so it's basically kind of like a pair

01:06:19,280 --> 01:06:23,839
yeah

01:06:20,079 --> 01:06:26,000
and then i guess password equals

01:06:23,839 --> 01:06:28,240
so you create a secret you can reference

01:06:26,000 --> 01:06:32,480
an existing secret by using secret

01:06:28,240 --> 01:06:35,440
dot from and again this from

01:06:32,480 --> 01:06:38,400
the secret name is release name that's

01:06:35,440 --> 01:06:38,400
gonna be the release name

01:06:40,559 --> 01:06:43,680
and then the key is what we saw here

01:06:42,559 --> 01:06:46,880
right like the

01:06:43,680 --> 01:06:49,280
this is like uh you know the

01:06:46,880 --> 01:06:50,799
home chart creating for us so that's

01:06:49,280 --> 01:06:53,039
basically convention

01:06:50,799 --> 01:06:54,880
that the home chart has and we can

01:06:53,039 --> 01:06:55,839
codify this convention into the

01:06:54,880 --> 01:06:57,359
construct

01:06:55,839 --> 01:06:59,039
and then from the user's perspective

01:06:57,359 --> 01:07:01,200
they just say dot password and they get

01:06:59,039 --> 01:07:03,119
a secret value and they they can use it

01:07:01,200 --> 01:07:05,039
opaquely they don't underst okay that's

01:07:03,119 --> 01:07:06,960
pretty pretty strong

01:07:05,039 --> 01:07:09,119
all right so we have five votes i guess

01:07:06,960 --> 01:07:10,960
right we have five minutes allowed we

01:07:09,119 --> 01:07:14,400
need to

01:07:10,960 --> 01:07:18,000
mess it up

01:07:14,400 --> 01:07:18,000
this is the host right the host name

01:07:19,440 --> 01:07:24,400
and how how do you yeah so the host name

01:07:22,079 --> 01:07:26,480
is actually again it's the release name

01:07:24,400 --> 01:07:28,960
and it's suffixed with the master yeah

01:07:26,480 --> 01:07:32,319
okay cool okay

01:07:28,960 --> 01:07:34,880
so now i'm gonna

01:07:32,319 --> 01:07:34,880
do this

01:07:36,079 --> 01:07:39,440
oh sorry

01:07:40,079 --> 01:07:47,520
sorry okay i'm back there it is

01:07:43,839 --> 01:07:49,520
yeah and i know all right so

01:07:47,520 --> 01:07:51,280
okay give me uh did you send me okay i

01:07:49,520 --> 01:07:55,039
got it i got your code let me

01:07:51,280 --> 01:07:57,599
i'm just gonna paste that into our app

01:07:55,039 --> 01:07:59,200
to save some time and we'll go let's go

01:07:57,599 --> 01:08:01,520
through this for just a second okay so i

01:07:59,200 --> 01:08:03,440
don't understand what's going on here

01:08:01,520 --> 01:08:06,160
installs redis oh i need i need to

01:08:03,440 --> 01:08:11,200
install in a dependency right

01:08:06,160 --> 01:08:14,000
i'm going to add a package.json file

01:08:11,200 --> 01:08:14,000
with redis

01:08:14,480 --> 01:08:18,400
okay cool and don't forget to do this

01:08:17,440 --> 01:08:22,480
right

01:08:18,400 --> 01:08:25,279
work here app and then run

01:08:22,480 --> 01:08:26,159
this this uh this this application

01:08:25,279 --> 01:08:29,600
combines

01:08:26,159 --> 01:08:34,000
pretty much every tool that i love

01:08:29,600 --> 01:08:36,000
red is i agree about reddit um

01:08:34,000 --> 01:08:37,040
anyway so it creates a client and it

01:08:36,000 --> 01:08:38,719
reads the

01:08:37,040 --> 01:08:40,880
host and the password from environment

01:08:38,719 --> 01:08:43,040
variables so we need to actually somehow

01:08:40,880 --> 01:08:44,080
delegate put those okay we'll i'll

01:08:43,040 --> 01:08:47,120
remember this

01:08:44,080 --> 01:08:48,640
and then it creates an http server oh

01:08:47,120 --> 01:08:51,359
and it has this nice

01:08:48,640 --> 01:08:53,120
get you can just get the calendar or you

01:08:51,359 --> 01:08:57,040
can post and then it'll

01:08:53,120 --> 01:08:58,480
increment nice okay that's that's looks

01:08:57,040 --> 01:09:01,679
pretty straightforward

01:08:58,480 --> 01:09:04,080
and it's still 80 80. okay so all we

01:09:01,679 --> 01:09:06,159
all we need is to basically pass this

01:09:04,080 --> 01:09:10,319
value to

01:09:06,159 --> 01:09:12,480
to the to the container and if i go into

01:09:10,319 --> 01:09:14,000
the router it's here somewhere right

01:09:12,480 --> 01:09:17,120
environment

01:09:14,000 --> 01:09:19,040
yeah so these values not here right

01:09:17,120 --> 01:09:20,960
because that's not the

01:09:19,040 --> 01:09:22,719
it should be input that's and that's

01:09:20,960 --> 01:09:25,120
actually okay right the user

01:09:22,719 --> 01:09:26,719
it's it's okay for the user to pass

01:09:25,120 --> 01:09:28,239
these environment variables because it's

01:09:26,719 --> 01:09:30,719
the user's choice

01:09:28,239 --> 01:09:32,799
to now incorporate radius right and so

01:09:30,719 --> 01:09:34,880
it makes sense right so it's basically

01:09:32,799 --> 01:09:36,480
part of that mental model

01:09:34,880 --> 01:09:38,400
the user comes from says okay i want to

01:09:36,480 --> 01:09:40,640
run this container this image

01:09:38,400 --> 01:09:41,600
and pass in these environment variables

01:09:40,640 --> 01:09:43,279
to the image

01:09:41,600 --> 01:09:45,520
okay so it's going to be install options

01:09:43,279 --> 01:09:48,799
i guess

01:09:45,520 --> 01:09:50,560
and here is a weird type surf syntax for

01:09:48,799 --> 01:09:52,640
a map

01:09:50,560 --> 01:09:54,080
i can use rate of record right so it's

01:09:52,640 --> 01:09:57,120
basically a string

01:09:54,080 --> 01:09:58,880
remember that it's an n value right um

01:09:57,120 --> 01:10:02,560
because i saw that this one's not

01:09:58,880 --> 01:10:03,920
yeah just basically because i can also

01:10:02,560 --> 01:10:06,239
pass a secret

01:10:03,920 --> 01:10:07,920
right like and then this one there are

01:10:06,239 --> 01:10:09,360
multiple ways of like

01:10:07,920 --> 01:10:11,199
creating environment variables in

01:10:09,360 --> 01:10:11,600
kubernetes and we're gonna actually use

01:10:11,199 --> 01:10:14,640
uh

01:10:11,600 --> 01:10:15,199
two of them uh we'll see okay so just

01:10:14,640 --> 01:10:18,239
gonna

01:10:15,199 --> 01:10:22,320
propagate this over here yeah and here

01:10:18,239 --> 01:10:25,679
i'm going to do this

01:10:22,320 --> 01:10:28,080
and so we have first one host

01:10:25,679 --> 01:10:28,880
which is just a literal value right it's

01:10:28,080 --> 01:10:32,800
just

01:10:28,880 --> 01:10:35,920
end value from value

01:10:32,800 --> 01:10:38,239
it's just a string and then red is

01:10:35,920 --> 01:10:41,520
password

01:10:38,239 --> 01:10:45,600
i saw that we have from from secret

01:10:41,520 --> 01:10:48,800
value secret value cool

01:10:45,600 --> 01:10:52,800
wow this looks pretty clean this is

01:10:48,800 --> 01:10:52,800
basically it really

01:10:52,960 --> 01:10:56,719
you're telling me this is gonna actually

01:10:54,400 --> 01:10:58,960
work well

01:10:56,719 --> 01:10:58,960
i'm

01:11:00,000 --> 01:11:03,040
no i'm definitely telling you that but

01:11:01,600 --> 01:11:06,000
don't hold it against me

01:11:03,040 --> 01:11:06,400
um yeah so that's that that was that was

01:11:06,000 --> 01:11:09,920
it

01:11:06,400 --> 01:11:11,040
um and i guess we can start wrapping up

01:11:09,920 --> 01:11:14,800
actually let's let's

01:11:11,040 --> 01:11:18,239
give it a few seconds to deploy and see

01:11:14,800 --> 01:11:21,760
um so i guess what we saw here is

01:11:18,239 --> 01:11:24,880
we we we saw

01:11:21,760 --> 01:11:25,199
basically i i would say three aspects of

01:11:24,880 --> 01:11:27,280
what

01:11:25,199 --> 01:11:29,040
why cdk for kubernetes is interesting

01:11:27,280 --> 01:11:29,520
and why in general cpk is interesting

01:11:29,040 --> 01:11:30,719
yeah

01:11:29,520 --> 01:11:32,560
the first thing is just using

01:11:30,719 --> 01:11:34,880
programming languages now general

01:11:32,560 --> 01:11:38,840
purpose programming language

01:11:34,880 --> 01:11:41,520
languages object oriented tools classes

01:11:38,840 --> 01:11:44,239
inheritance uh methods property

01:11:41,520 --> 01:11:44,960
things like that very powerful tools

01:11:44,239 --> 01:11:47,840
very

01:11:44,960 --> 01:11:48,800
familiar to most programmers uh and so

01:11:47,840 --> 01:11:50,960
to that end i feel

01:11:48,800 --> 01:11:52,239
i feel at home i feel like i'm you know

01:11:50,960 --> 01:11:54,560
i have all those tools i

01:11:52,239 --> 01:11:55,679
i know what to do with them the second

01:11:54,560 --> 01:11:58,640
thing is

01:11:55,679 --> 01:11:59,679
the ability to uh create higher level

01:11:58,640 --> 01:12:01,520
abstractions and

01:11:59,679 --> 01:12:03,440
obviously that stems from the first

01:12:01,520 --> 01:12:05,520
point but

01:12:03,440 --> 01:12:07,600
the interesting part is this composition

01:12:05,520 --> 01:12:09,840
model these constructs

01:12:07,600 --> 01:12:10,960
because the the power of constructs is

01:12:09,840 --> 01:12:14,080
the ability to

01:12:10,960 --> 01:12:16,800
create this consistent and deterministic

01:12:14,080 --> 01:12:18,640
naming across executions so when i

01:12:16,800 --> 01:12:20,800
change something i know that

01:12:18,640 --> 01:12:22,080
this thing that was some you know in my

01:12:20,800 --> 01:12:24,239
previous execution was

01:12:22,080 --> 01:12:26,560
x now it's going to be y and that's and

01:12:24,239 --> 01:12:28,159
i'm able to have those things together

01:12:26,560 --> 01:12:31,199
and it's basically and it's very hard to

01:12:28,159 --> 01:12:34,640
implement this desired state

01:12:31,199 --> 01:12:37,679
mechanism without this without this

01:12:34,640 --> 01:12:39,360
stable uh stable uh navy

01:12:37,679 --> 01:12:41,120
and i think the third thing was was this

01:12:39,360 --> 01:12:43,120
ability to basically

01:12:41,120 --> 01:12:44,800
leverage the ecosystem of the existing

01:12:43,120 --> 01:12:47,920
ecosystem of kubernetes

01:12:44,800 --> 01:12:49,520
uh we talked about crds and being able

01:12:47,920 --> 01:12:53,040
to import them and use them as

01:12:49,520 --> 01:12:56,719
you know l1 uh we saw

01:12:53,040 --> 01:12:57,120
the helm um support which is kind of

01:12:56,719 --> 01:12:59,600
like

01:12:57,120 --> 01:13:01,040
magical i guess and we've wrapped it

01:12:59,600 --> 01:13:02,159
into a construct we create an

01:13:01,040 --> 01:13:04,239
abstraction that

01:13:02,159 --> 01:13:06,320
hides even hides the fact that i'm using

01:13:04,239 --> 01:13:08,159
helm and nobody actually needs to go and

01:13:06,320 --> 01:13:10,159
you know yeah yeah actually you can just

01:13:08,159 --> 01:13:11,600
show for a second like how the manifest

01:13:10,159 --> 01:13:13,600
actually looks like now

01:13:11,600 --> 01:13:15,360
okay let's uh that's i'm actually

01:13:13,600 --> 01:13:17,920
curious

01:13:15,360 --> 01:13:19,840
like it's it's enormous right but but we

01:13:17,920 --> 01:13:20,800
don't we don't care we stopped caring

01:13:19,840 --> 01:13:24,080
about the manifest

01:13:20,800 --> 01:13:26,239
like 20 minutes ago because we

01:13:24,080 --> 01:13:27,280
initially i didn't trust it but now it

01:13:26,239 --> 01:13:29,280
feels like i

01:13:27,280 --> 01:13:30,640
i don't really care because i feel like

01:13:29,280 --> 01:13:32,800
it's actually doing what i'm

01:13:30,640 --> 01:13:34,560
telling it to do so it's pretty pretty

01:13:32,800 --> 01:13:35,679
cool oh and the other thing that we saw

01:13:34,560 --> 01:13:38,719
is we used this uh

01:13:35,679 --> 01:13:41,920
image library which is this just random

01:13:38,719 --> 01:13:45,199
library by some dude in tel aviv

01:13:41,920 --> 01:13:46,560
uh that helped us with all this uh

01:13:45,199 --> 01:13:48,800
with with you know building and

01:13:46,560 --> 01:13:49,920
publishing the image as part of the cdk

01:13:48,800 --> 01:13:51,760
experience

01:13:49,920 --> 01:13:53,679
uh which is also pretty cool like the

01:13:51,760 --> 01:13:54,239
ability to publish these constructs and

01:13:53,679 --> 01:13:56,560
use them

01:13:54,239 --> 01:13:58,320
as class you know as class libraries i

01:13:56,560 --> 01:13:59,920
can actually publish a whole application

01:13:58,320 --> 01:14:02,000
a whole application is a class library

01:13:59,920 --> 01:14:02,960
it's pretty yeah we can actually publish

01:14:02,000 --> 01:14:04,880
this counter right

01:14:02,960 --> 01:14:07,840
this is we just created a persistent

01:14:04,880 --> 01:14:11,360
counter uh that runs on kubernetes

01:14:07,840 --> 01:14:14,320
right right okay this is just

01:14:11,360 --> 01:14:14,880
zero now oh am i doing just get yeah i'm

01:14:14,320 --> 01:14:18,000
just that's

01:14:14,880 --> 01:14:18,000
that's expected yeah

01:14:18,960 --> 01:14:23,920
hey look and different host names yeah

01:14:24,960 --> 01:14:32,640
cathartic moment right is now

01:14:28,080 --> 01:14:35,920
yeah definitely i feel i feel cathartic

01:14:32,640 --> 01:14:37,120
cool um ellie thanks so much

01:14:35,920 --> 01:14:39,360
is there anything else that you wanted

01:14:37,120 --> 01:14:40,480
to oh i just want to give

01:14:39,360 --> 01:14:42,159
yeah we just want to thank you for

01:14:40,480 --> 01:14:44,000
inviting me and i just want to mention

01:14:42,159 --> 01:14:45,600
that we are currently you know we're

01:14:44,000 --> 01:14:46,560
putting a lot of effort into it and we

01:14:45,600 --> 01:14:49,280
really want

01:14:46,560 --> 01:14:50,640
the engagement of the community uh

01:14:49,280 --> 01:14:52,880
there's a slack channel

01:14:50,640 --> 01:14:55,040
we'll uh you can maybe show that while i

01:14:52,880 --> 01:14:56,320
talk uh there's a slack channel you can

01:14:55,040 --> 01:14:59,520
join uh

01:14:56,320 --> 01:15:00,000
there are monthly community meetings

01:14:59,520 --> 01:15:02,000
that

01:15:00,000 --> 01:15:04,159
you can attend and actually brainstorm

01:15:02,000 --> 01:15:05,920
with us on features and unbox and

01:15:04,159 --> 01:15:08,080
whatever you want

01:15:05,920 --> 01:15:09,280
and we're really really excited to build

01:15:08,080 --> 01:15:12,080
this together right

01:15:09,280 --> 01:15:13,600
this is uh we we want as many as many

01:15:12,080 --> 01:15:16,640
use cases as possible

01:15:13,600 --> 01:15:20,400
and um really making these apis so

01:15:16,640 --> 01:15:23,679
so fun pleasant yeah pleasant delightful

01:15:20,400 --> 01:15:24,719
yeah i think so yeah the homepage for cd

01:15:23,679 --> 01:15:27,679
case is this one

01:15:24,719 --> 01:15:28,000
obviously github is is another home page

01:15:27,679 --> 01:15:30,880
that

01:15:28,000 --> 01:15:32,320
we're happy for you to start from uh and

01:15:30,880 --> 01:15:34,400
you can find resources

01:15:32,320 --> 01:15:35,440
at the bottom of this there's a bunch of

01:15:34,400 --> 01:15:38,719
resources

01:15:35,440 --> 01:15:40,960
about uh there's a mailing list

01:15:38,719 --> 01:15:43,440
uh we've got a weekly i'm sorry a

01:15:40,960 --> 01:15:46,640
monthly community meeting that you're

01:15:43,440 --> 01:15:48,960
here you're more than welcome to join uh

01:15:46,640 --> 01:15:50,320
we have a slack channel that's part of

01:15:48,960 --> 01:15:52,080
the cdk dev

01:15:50,320 --> 01:15:53,920
initiative it's actually a community

01:15:52,080 --> 01:15:56,400
initiative by

01:15:53,920 --> 01:15:58,239
that combines all of the cdks you know

01:15:56,400 --> 01:15:58,960
the bigger cdks there are actually other

01:15:58,239 --> 01:16:01,360
cdks

01:15:58,960 --> 01:16:03,679
uh starting to pop up but the terraform

01:16:01,360 --> 01:16:06,159
aws and kubernetes cdks

01:16:03,679 --> 01:16:07,920
um and there's a slack uh team stock

01:16:06,159 --> 01:16:10,159
workspace that you can join and there's

01:16:07,920 --> 01:16:10,880
a cdks channel within that workspace

01:16:10,159 --> 01:16:12,640
that we

01:16:10,880 --> 01:16:15,280
that we monitor and we're happy to like

01:16:12,640 --> 01:16:18,320
uh talk to you talk to you

01:16:15,280 --> 01:16:20,320
um and i guess that's it

01:16:18,320 --> 01:16:22,400
yeah we have like 10 minutes i guess

01:16:20,320 --> 01:16:24,239
after the stuff for for questions and

01:16:22,400 --> 01:16:25,760
a little a little bit more but yeah feel

01:16:24,239 --> 01:16:29,199
free to join us and

01:16:25,760 --> 01:16:31,280
and ask questions cool thanks so much

01:16:29,199 --> 01:16:33,280
for joining me it's uh it's been

01:16:31,280 --> 01:16:34,880
way more fun to do it with you than

01:16:33,280 --> 01:16:36,719
doing it alone

01:16:34,880 --> 01:16:38,560
hopefully next year we'll get to see the

01:16:36,719 --> 01:16:39,040
people we're we're presenting to right

01:16:38,560 --> 01:16:42,880
not just

01:16:39,040 --> 01:16:44,800
uh in the camera maybe yes hopefully

01:16:42,880 --> 01:16:46,840
cool all right thanks a lot see you

01:16:44,800 --> 01:16:49,360
later

01:16:46,840 --> 01:16:51,120
bye awesome

01:16:49,360 --> 01:16:52,640
thank you a lot thank you ellie that was

01:16:51,120 --> 01:16:55,120
an awesome demo

01:16:52,640 --> 01:16:56,159
thank you so much for joining us for

01:16:55,120 --> 01:16:58,560
this presentation

01:16:56,159 --> 01:16:59,679
we hope you're as excited about cdks as

01:16:58,560 --> 01:17:01,760
we are

01:16:59,679 --> 01:17:03,679
we encourage you to visit us on the web

01:17:01,760 --> 01:17:05,040
to join us on slack and

01:17:03,679 --> 01:17:06,960
chat us with your questions or the

01:17:05,040 --> 01:17:08,880
things that you're building and also

01:17:06,960 --> 01:17:11,199
uh join us on github we really are

01:17:08,880 --> 01:17:13,120
excited and we welcome contributions

01:17:11,199 --> 01:17:15,520
um we have a lot of big things planned

01:17:13,120 --> 01:17:17,920
for the cdks including uh moving to

01:17:15,520 --> 01:17:19,600
beta in the near future here and we're

01:17:17,920 --> 01:17:20,880
excited to see what you build and we

01:17:19,600 --> 01:17:26,719
hope that you join us

01:17:20,880 --> 01:17:26,719

YouTube URL: https://www.youtube.com/watch?v=uPabHf5jMcs


