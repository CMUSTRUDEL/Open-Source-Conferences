Title: Extending Service Mesh to the Edge - Stephen Wong, OPNFV Clover
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Extending Service Mesh to the Edge - Stephen Wong, OPNFV Clover 

The advent of edge computing has led to the trend of splitting applications into edge and cloud components, which makes service mesh a great fit to enable unified application network policies for inter-container communications, regardless of where individual microservice is deployed. However, service mesh projects such as Istio are mostly designed for large scale deployment, and some features, such as per pod sidecar, may be ill-suited for inherently more resource constrained edge. And optimizing the use of WAN connection is mostly missing. The talk centers on Clovisor, a project aimed to extend service mesh to the edge. By utilizing eBPF, SDWAN, and Envoy, Clovisor performs functions such as translating service mesh app network policies to edge/cloud network policies, redirecting traffic to proxy on edge, classifying and mapping application flows to WAN connectivity tunnels. 

https://sched.co/ekF2
Captions: 
	00:00:01,839 --> 00:00:06,640
hello welcome

00:00:04,480 --> 00:00:09,600
to extending service match to the edged

00:00:06,640 --> 00:00:09,600
let's get started

00:00:09,679 --> 00:00:13,200
the agenda is actually very simple for

00:00:11,440 --> 00:00:15,200
this talk uh we just

00:00:13,200 --> 00:00:16,800
want to talk about the motivation behind

00:00:15,200 --> 00:00:17,920
trying to extend service match to run on

00:00:16,800 --> 00:00:19,520
the edge

00:00:17,920 --> 00:00:21,920
some of the key challenges that you

00:00:19,520 --> 00:00:24,240
would face uh a demo

00:00:21,920 --> 00:00:25,840
that would provide a solutions of all

00:00:24,240 --> 00:00:26,960
our solutions for one of the challenges

00:00:25,840 --> 00:00:29,920
that we think

00:00:26,960 --> 00:00:31,119
exists and then we'll wrap it up by

00:00:29,920 --> 00:00:35,280
talking about some future

00:00:31,119 --> 00:00:35,280
plans that we have on the project

00:00:36,480 --> 00:00:40,800
typically when we anyone talk about edge

00:00:39,520 --> 00:00:43,040
the first thing they ask is what do you

00:00:40,800 --> 00:00:45,360
mean by edge and

00:00:43,040 --> 00:00:46,879
to address that it makes sense to take a

00:00:45,360 --> 00:00:47,520
little time to talk about where we came

00:00:46,879 --> 00:00:49,760
from

00:00:47,520 --> 00:00:50,879
we came from a project called opnrv

00:00:49,760 --> 00:00:52,719
clover

00:00:50,879 --> 00:00:54,399
and opnrv is an umbrella project it

00:00:52,719 --> 00:00:55,600
stands for open

00:00:54,399 --> 00:00:57,520
platform for network function

00:00:55,600 --> 00:00:59,840
virtualizations

00:00:57,520 --> 00:01:00,559
uh and every uh never functionalization

00:00:59,840 --> 00:01:03,600
is basically

00:01:00,559 --> 00:01:08,080
the telcos way of attempts to

00:01:03,600 --> 00:01:10,080
cloudify their network services and

00:01:08,080 --> 00:01:11,680
opnov itself is an integration testing

00:01:10,080 --> 00:01:14,240
project where you

00:01:11,680 --> 00:01:15,840
take open source projects integrate and

00:01:14,240 --> 00:01:17,040
them together write some test cases

00:01:15,840 --> 00:01:18,960
and try to make sure that they can

00:01:17,040 --> 00:01:20,560
actually address particular typical

00:01:18,960 --> 00:01:22,240
energy use cases

00:01:20,560 --> 00:01:23,759
particularly for clover we are

00:01:22,240 --> 00:01:25,439
interested to integrate

00:01:23,759 --> 00:01:27,119
cloud native related technologies or

00:01:25,439 --> 00:01:28,400
open source projects

00:01:27,119 --> 00:01:30,560
and then trying to see what kind of

00:01:28,400 --> 00:01:33,520
energy use cases we can address

00:01:30,560 --> 00:01:35,280
uh and then in this case uh what we get

00:01:33,520 --> 00:01:37,200
feedback from users and then for

00:01:35,280 --> 00:01:38,880
after investigation is there's a very

00:01:37,200 --> 00:01:40,720
strong inclination from the users

00:01:38,880 --> 00:01:42,640
that they want to use kubernetes on all

00:01:40,720 --> 00:01:46,240
the cognitive technologies on

00:01:42,640 --> 00:01:47,680
mobile edge namely what we call mec

00:01:46,240 --> 00:01:49,280
which used to stand for mobile apps

00:01:47,680 --> 00:01:51,280
computing now it's multi-access edge

00:01:49,280 --> 00:01:52,880
computing

00:01:51,280 --> 00:01:54,320
if you think about telcos they actually

00:01:52,880 --> 00:01:57,840
have tremendous

00:01:54,320 --> 00:01:59,680
uh edge site presence um

00:01:57,840 --> 00:02:01,759
they're radio networks you know when

00:01:59,680 --> 00:02:04,880
you're cell phone connected to um

00:02:01,759 --> 00:02:06,560
to att or someone um there's a close

00:02:04,880 --> 00:02:09,119
proximity base stations that actually

00:02:06,560 --> 00:02:12,080
determines your radio connectivity

00:02:09,119 --> 00:02:13,280
so they have those sites that are in

00:02:12,080 --> 00:02:16,400
small buildings

00:02:13,280 --> 00:02:16,800
so and then with compute powers so they

00:02:16,400 --> 00:02:18,480
have

00:02:16,800 --> 00:02:20,000
actually if you will of micro data

00:02:18,480 --> 00:02:22,080
centers and that presence has been

00:02:20,000 --> 00:02:24,239
around for a very long time

00:02:22,080 --> 00:02:26,080
and then particularly for 5g upgrades

00:02:24,239 --> 00:02:27,599
because the bandwidth is so much bigger

00:02:26,080 --> 00:02:28,959
and then what kind of applications an

00:02:27,599 --> 00:02:29,920
implication of the applications that

00:02:28,959 --> 00:02:33,840
would come in

00:02:29,920 --> 00:02:35,440
uh they are the mec effort is there for

00:02:33,840 --> 00:02:38,080
taking advantage of that access compute

00:02:35,440 --> 00:02:40,879
power and then allowing third-party

00:02:38,080 --> 00:02:41,840
application owners uh players to be able

00:02:40,879 --> 00:02:44,480
to

00:02:41,840 --> 00:02:46,640
utilize those compute powers by running

00:02:44,480 --> 00:02:50,239
their applications

00:02:46,640 --> 00:02:52,560
so we are not talking about sensors

00:02:50,239 --> 00:02:53,680
or devices when we talk about edge and

00:02:52,560 --> 00:02:55,280
therefore you don't see us doing

00:02:53,680 --> 00:02:57,360
something like virtual kill blitz

00:02:55,280 --> 00:02:58,560
we're talking about some level compute

00:02:57,360 --> 00:03:00,560
power somewhere typically

00:02:58,560 --> 00:03:01,599
from single single digit number of

00:03:00,560 --> 00:03:05,040
servers to

00:03:01,599 --> 00:03:08,319
maybe a few racks of x

00:03:05,040 --> 00:03:12,239
x86 or arm based servers

00:03:08,319 --> 00:03:13,840
sitting on the net do note that we

00:03:12,239 --> 00:03:15,360
are this particular technology that we

00:03:13,840 --> 00:03:17,680
talked about today

00:03:15,360 --> 00:03:18,800
it doesn't necessarily just address the

00:03:17,680 --> 00:03:20,640
msu use case

00:03:18,800 --> 00:03:22,080
but it does address the use case where

00:03:20,640 --> 00:03:24,560
if you have

00:03:22,080 --> 00:03:26,480
servers on the edge and you want to run

00:03:24,560 --> 00:03:27,920
applications on the servers

00:03:26,480 --> 00:03:30,959
the benefits of actually running the

00:03:27,920 --> 00:03:32,799
service match all the way to the edge

00:03:30,959 --> 00:03:34,159
and then going back to that use case uh

00:03:32,799 --> 00:03:35,760
what makes sense for us in terms of

00:03:34,159 --> 00:03:38,560
deployments for kubernetes

00:03:35,760 --> 00:03:39,440
is that we want to run cluster and auto

00:03:38,560 --> 00:03:40,400
control plane for that cluster

00:03:39,440 --> 00:03:43,280
independently

00:03:40,400 --> 00:03:44,159
on the ash sites um obviously our

00:03:43,280 --> 00:03:45,920
benefits is

00:03:44,159 --> 00:03:47,519
the benefits are actually pretty obvious

00:03:45,920 --> 00:03:49,040
right um your

00:03:47,519 --> 00:03:50,799
if you want to restart a pod you want to

00:03:49,040 --> 00:03:51,760
reschedule the parts all the decisions

00:03:50,799 --> 00:03:53,120
are made locally

00:03:51,760 --> 00:03:55,040
so you don't have to go back to the

00:03:53,120 --> 00:03:56,959
cloud just to just to restart and

00:03:55,040 --> 00:04:00,159
reschedule a part

00:03:56,959 --> 00:04:02,560
um and and that's not

00:04:00,159 --> 00:04:04,480
anything majorly controversial right now

00:04:02,560 --> 00:04:05,920
i think for the last two three years

00:04:04,480 --> 00:04:08,080
there's been a number of projects that

00:04:05,920 --> 00:04:11,760
are trying to address the uh

00:04:08,080 --> 00:04:14,959
the use case of um lightweight

00:04:11,760 --> 00:04:18,400
kubernetes uh engines so

00:04:14,959 --> 00:04:20,320
what we see here is um something like a

00:04:18,400 --> 00:04:24,000
k3s from rancher or

00:04:20,320 --> 00:04:25,360
micro k8s from ubuntu are all

00:04:24,000 --> 00:04:27,600
example projects where they're actually

00:04:25,360 --> 00:04:30,240
trying to address a lightweight

00:04:27,600 --> 00:04:33,440
kubernetes cluster use case

00:04:30,240 --> 00:04:35,680
um and another one is if you have

00:04:33,440 --> 00:04:37,280
this kind of deployment um what kind of

00:04:35,680 --> 00:04:40,320
application are we looking at

00:04:37,280 --> 00:04:41,919
so going back to something like a mvc

00:04:40,320 --> 00:04:43,440
or any kind of edge data center micro

00:04:41,919 --> 00:04:46,240
data centers you are

00:04:43,440 --> 00:04:48,080
trying to run a single applications that

00:04:46,240 --> 00:04:48,960
have components that spans across both

00:04:48,080 --> 00:04:51,360
edge and

00:04:48,960 --> 00:04:52,560
cloud so so that's that's what we get

00:04:51,360 --> 00:04:53,120
actually the feedback from some of the

00:04:52,560 --> 00:04:56,160
users

00:04:53,120 --> 00:04:59,360
from the open v community also um

00:04:56,160 --> 00:05:01,520
a lvl when when the control things

00:04:59,360 --> 00:05:02,880
would be the control analytics and all

00:05:01,520 --> 00:05:03,520
that all that may be running on the

00:05:02,880 --> 00:05:05,919
cloud

00:05:03,520 --> 00:05:07,840
but then the the processing of frames

00:05:05,919 --> 00:05:10,320
and and videos will be running on

00:05:07,840 --> 00:05:11,680
edge whereas our machine learning where

00:05:10,320 --> 00:05:12,240
the inference engine would actually be

00:05:11,680 --> 00:05:14,479
running

00:05:12,240 --> 00:05:16,240
on edge and then all the learning

00:05:14,479 --> 00:05:18,160
capabilities are running on cloud

00:05:16,240 --> 00:05:19,759
or iot gateway where some sort of filter

00:05:18,160 --> 00:05:21,199
is running on edge and then the core

00:05:19,759 --> 00:05:23,600
analytics engines will be running on

00:05:21,199 --> 00:05:24,160
cloud so these kind of applications

00:05:23,600 --> 00:05:25,759
where

00:05:24,160 --> 00:05:27,520
they're basically single applications

00:05:25,759 --> 00:05:28,960
that spans across both have micro

00:05:27,520 --> 00:05:30,479
services running components that are

00:05:28,960 --> 00:05:31,919
running on cloud and components that are

00:05:30,479 --> 00:05:33,600
running on edge

00:05:31,919 --> 00:05:36,240
so we'll make an argument and that's

00:05:33,600 --> 00:05:38,800
actually the jits of this

00:05:36,240 --> 00:05:39,759
this presentation is that it makes a lot

00:05:38,800 --> 00:05:42,400
of sense

00:05:39,759 --> 00:05:42,880
to run a single mesh across the cloud

00:05:42,400 --> 00:05:45,840
and edge

00:05:42,880 --> 00:05:47,759
sites for this kind of applications uh

00:05:45,840 --> 00:05:49,199
the obvious one is that

00:05:47,759 --> 00:05:51,039
you know once you do that you have a

00:05:49,199 --> 00:05:54,160
consistent network policy

00:05:51,039 --> 00:05:54,639
and telemetry formatting models across a

00:05:54,160 --> 00:05:57,680
single

00:05:54,639 --> 00:06:00,720
applications across different sites uh

00:05:57,680 --> 00:06:02,639
your cloud or edge um so you can write

00:06:00,720 --> 00:06:04,160
basically the same framework you can you

00:06:02,639 --> 00:06:04,880
can treat it as basically just an

00:06:04,160 --> 00:06:06,960
extension

00:06:04,880 --> 00:06:08,319
on your applications just like how you

00:06:06,960 --> 00:06:09,919
would write it for any of the single

00:06:08,319 --> 00:06:12,319
master applications that you have that

00:06:09,919 --> 00:06:15,759
runs in the single data center

00:06:12,319 --> 00:06:17,440
and also istio

00:06:15,759 --> 00:06:19,680
the major use case for sdo really is

00:06:17,440 --> 00:06:22,639
cicd pipelines

00:06:19,680 --> 00:06:24,080
releases or red black testing a b

00:06:22,639 --> 00:06:27,120
testing type stuff

00:06:24,080 --> 00:06:28,080
for those things um for istio's

00:06:27,120 --> 00:06:31,759
particular single match

00:06:28,080 --> 00:06:33,600
is actually running very well spinnaker

00:06:31,759 --> 00:06:35,520
for example is already integrated with

00:06:33,600 --> 00:06:37,919
stl for over a year now

00:06:35,520 --> 00:06:39,680
so and then we do think that for this

00:06:37,919 --> 00:06:43,199
kind of features the ability to do

00:06:39,680 --> 00:06:46,240
kind of releases the ci cd pipelines is

00:06:43,199 --> 00:06:48,160
critical for edge deployments

00:06:46,240 --> 00:06:50,240
because physical access is very

00:06:48,160 --> 00:06:52,000
expensive for edge sites

00:06:50,240 --> 00:06:53,360
so you you want to automate the process

00:06:52,000 --> 00:06:55,599
of deployments uh

00:06:53,360 --> 00:06:56,560
or only reciting parts or things like

00:06:55,599 --> 00:06:59,360
that uh

00:06:56,560 --> 00:07:00,160
all basically fully automated to avoid

00:06:59,360 --> 00:07:02,479
having actually

00:07:00,160 --> 00:07:04,880
you know technicians accessing edge

00:07:02,479 --> 00:07:08,160
sites all the time

00:07:04,880 --> 00:07:11,440
so with all these benefits uh that is

00:07:08,160 --> 00:07:13,919
you know sort of obvious really um why

00:07:11,440 --> 00:07:14,720
have no one done it before or why

00:07:13,919 --> 00:07:16,400
haven't actually

00:07:14,720 --> 00:07:18,160
so actually we thought about doing that

00:07:16,400 --> 00:07:21,599
as early as uh

00:07:18,160 --> 00:07:24,400
i would say mid second half 2018

00:07:21,599 --> 00:07:25,120
when clover was in uh was in major

00:07:24,400 --> 00:07:27,919
development

00:07:25,120 --> 00:07:29,440
uh time uh at that time actually we had

00:07:27,919 --> 00:07:31,039
a we encountered we investigated we

00:07:29,440 --> 00:07:32,400
encountered a major blocker

00:07:31,039 --> 00:07:34,479
and that was actually that's the

00:07:32,400 --> 00:07:38,479
component called mixer

00:07:34,479 --> 00:07:40,080
mixer is a istio control plane component

00:07:38,479 --> 00:07:42,000
which it's actually an engineering model

00:07:40,080 --> 00:07:45,120
it's a very good idea

00:07:42,000 --> 00:07:47,120
as a theory uh what it does is um

00:07:45,120 --> 00:07:49,360
because as you probably know envoy which

00:07:47,120 --> 00:07:50,000
is the proxy engine or the data plane if

00:07:49,360 --> 00:07:54,720
you will

00:07:50,000 --> 00:07:57,199
on on istio runs on every single part

00:07:54,720 --> 00:07:58,800
um so it's what we call sidecar so every

00:07:57,199 --> 00:08:00,400
part that gets spawned there'll be a

00:07:58,800 --> 00:08:01,919
and voice a workload part that gets

00:08:00,400 --> 00:08:04,879
spawned there'll be a

00:08:01,919 --> 00:08:05,599
steel proxy which is an avoid running um

00:08:04,879 --> 00:08:08,160
mixer

00:08:05,599 --> 00:08:09,840
the idea would be oh you have potential

00:08:08,160 --> 00:08:11,440
thousands of these running

00:08:09,840 --> 00:08:13,120
if we have complicated policies or

00:08:11,440 --> 00:08:16,160
complicated policy

00:08:13,120 --> 00:08:17,840
uh complicated telemetry policies or if

00:08:16,160 --> 00:08:19,759
you have a bunch of infra back ends that

00:08:17,840 --> 00:08:23,440
does its own thing that is to record

00:08:19,759 --> 00:08:25,599
the sessions you you should centralize

00:08:23,440 --> 00:08:27,039
that capabilities into instead of

00:08:25,599 --> 00:08:28,240
spreading with a thousand so it doesn't

00:08:27,039 --> 00:08:31,680
really scale

00:08:28,240 --> 00:08:33,279
a great idea uh but then because

00:08:31,680 --> 00:08:35,039
mixer is the name indicator because you

00:08:33,279 --> 00:08:35,839
want to implement part of your network

00:08:35,039 --> 00:08:38,880
policies

00:08:35,839 --> 00:08:40,959
on the daily traffic uh in mixer

00:08:38,880 --> 00:08:42,479
mexico is basically not a control plane

00:08:40,959 --> 00:08:44,399
component it's actually a mix

00:08:42,479 --> 00:08:47,519
i guess that's what the name means a mix

00:08:44,399 --> 00:08:50,160
between data plane and a control plane

00:08:47,519 --> 00:08:50,640
that and how android works is every

00:08:50,160 --> 00:08:52,000
single

00:08:50,640 --> 00:08:54,320
first request that comes in for a

00:08:52,000 --> 00:08:55,120
session they would first get funded into

00:08:54,320 --> 00:08:57,040
mixer

00:08:55,120 --> 00:08:58,399
and then they'll process it and then and

00:08:57,040 --> 00:08:59,360
then we'll see whether or not it's a ona

00:08:58,399 --> 00:09:02,720
to actually go

00:08:59,360 --> 00:09:04,000
before android can proceed uh just by

00:09:02,720 --> 00:09:05,120
hearing that you would you would be you

00:09:04,000 --> 00:09:06,240
would know that it's actually pretty

00:09:05,120 --> 00:09:08,240
terrible

00:09:06,240 --> 00:09:10,240
to run that on the edge you can rig you

00:09:08,240 --> 00:09:13,360
can actually run mixer on the edge okay

00:09:10,240 --> 00:09:13,839
in multi-cluster um deployment you they

00:09:13,360 --> 00:09:15,760
do

00:09:13,839 --> 00:09:17,519
uh iso does actually assume that you run

00:09:15,760 --> 00:09:20,480
maxwell also on

00:09:17,519 --> 00:09:22,000
the on the the other clusters but then

00:09:20,480 --> 00:09:23,360
particularly for edge it doesn't make

00:09:22,000 --> 00:09:24,800
sense because your infra back ends

00:09:23,360 --> 00:09:26,560
probably doesn't exist

00:09:24,800 --> 00:09:28,000
on the edge they're mostly pretty heavy

00:09:26,560 --> 00:09:31,680
stuff i would say

00:09:28,000 --> 00:09:33,200
um so if that's the case then your mixer

00:09:31,680 --> 00:09:34,880
may be actually running on cloud

00:09:33,200 --> 00:09:37,200
and if all your requests has to go to

00:09:34,880 --> 00:09:38,959
the cloud just to get mixers to say yes

00:09:37,200 --> 00:09:40,959
uh that's that's the kind of delay is

00:09:38,959 --> 00:09:44,240
actually completely unacceptable

00:09:40,959 --> 00:09:45,959
but thankfully for us um

00:09:44,240 --> 00:09:47,519
during i think when you know it's still

00:09:45,959 --> 00:09:49,519
1.41.5

00:09:47,519 --> 00:09:51,120
uh the comm the istio community decided

00:09:49,519 --> 00:09:54,720
to deprecate

00:09:51,120 --> 00:09:56,320
mixer so it um and then instead actually

00:09:54,720 --> 00:09:58,080
taking advantage of the rich set of

00:09:56,320 --> 00:10:00,640
filter capabilities on android

00:09:58,080 --> 00:10:01,760
that allows you to then imp implement

00:10:00,640 --> 00:10:02,640
those complicated policies and

00:10:01,760 --> 00:10:05,360
technologies

00:10:02,640 --> 00:10:06,959
uh pro or your custom protocols directly

00:10:05,360 --> 00:10:08,160
on android

00:10:06,959 --> 00:10:10,160
uh instead of actually having this

00:10:08,160 --> 00:10:10,959
centralized command uh components to do

00:10:10,160 --> 00:10:13,600
so

00:10:10,959 --> 00:10:15,040
and that in a way actually unblocks us

00:10:13,600 --> 00:10:18,320
from uh from moving

00:10:15,040 --> 00:10:19,440
forward so now that we start to resume

00:10:18,320 --> 00:10:20,959
looking at

00:10:19,440 --> 00:10:23,120
running steel extending still to the

00:10:20,959 --> 00:10:24,959
edge again um

00:10:23,120 --> 00:10:26,560
one of the great things that you can do

00:10:24,959 --> 00:10:27,600
and a good opportunity to innovate

00:10:26,560 --> 00:10:30,399
really

00:10:27,600 --> 00:10:31,040
when you run this steel to the edge is

00:10:30,399 --> 00:10:34,160
extending

00:10:31,040 --> 00:10:35,519
the istio capabilities the route rules

00:10:34,160 --> 00:10:38,320
the policies

00:10:35,519 --> 00:10:39,920
into influencing your choices of which

00:10:38,320 --> 00:10:41,040
when connectivity links that you're

00:10:39,920 --> 00:10:43,600
going to use

00:10:41,040 --> 00:10:44,480
so in here when i when i say when why

00:10:43,600 --> 00:10:46,640
area networks

00:10:44,480 --> 00:10:48,079
i don't just mean why area networks with

00:10:46,640 --> 00:10:50,560
the typical definitions

00:10:48,079 --> 00:10:51,839
uh and you know because going between

00:10:50,560 --> 00:10:53,200
edge to cloud

00:10:51,839 --> 00:10:54,320
usually you can go through for

00:10:53,200 --> 00:10:55,680
networking terms you can go through

00:10:54,320 --> 00:10:57,519
access network you go through

00:10:55,680 --> 00:10:58,800
like metro and then you you and then you

00:10:57,519 --> 00:10:59,600
go through like the real wind which is

00:10:58,800 --> 00:11:02,640
either long-haul

00:10:59,600 --> 00:11:05,040
or the transcontinental links um and

00:11:02,640 --> 00:11:08,640
here when i use wen and it means like

00:11:05,040 --> 00:11:11,360
the combination of all those um and then

00:11:08,640 --> 00:11:12,560
when you are running when links you can

00:11:11,360 --> 00:11:14,800
it's very typical now that you have

00:11:12,560 --> 00:11:15,200
multiple wind links uh going from edge

00:11:14,800 --> 00:11:18,399
sites

00:11:15,200 --> 00:11:21,440
to cloud or actually in the era of uh

00:11:18,399 --> 00:11:23,200
sd-wan software defined when uh the

00:11:21,440 --> 00:11:25,519
software defined when capabilities would

00:11:23,200 --> 00:11:26,880
then be creating a lot of channels

00:11:25,519 --> 00:11:29,360
even if you only have one or two

00:11:26,880 --> 00:11:31,360
physical when links

00:11:29,360 --> 00:11:33,440
for different reasons like low latency

00:11:31,360 --> 00:11:35,839
or high bandwidth or you know

00:11:33,440 --> 00:11:36,640
or best effort and stuff like that so so

00:11:35,839 --> 00:11:38,480
those are

00:11:36,640 --> 00:11:40,320
being defined and then and then what we

00:11:38,480 --> 00:11:41,519
really want to see and then what we see

00:11:40,320 --> 00:11:44,800
the opportunity on

00:11:41,519 --> 00:11:45,920
is to map the istio policies and

00:11:44,800 --> 00:11:48,480
railroads

00:11:45,920 --> 00:11:51,680
into different wind links depends on

00:11:48,480 --> 00:11:54,320
what their characteristic is

00:11:51,680 --> 00:11:55,200
and actually in fact this is this is

00:11:54,320 --> 00:11:56,639
going to be

00:11:55,200 --> 00:11:58,480
a very simple demo that we're going to

00:11:56,639 --> 00:12:00,959
run on you know this

00:11:58,480 --> 00:12:02,800
technology that we use uh before we

00:12:00,959 --> 00:12:05,120
actually go into the demo descriptions

00:12:02,800 --> 00:12:06,959
uh the demo and this solution actually

00:12:05,120 --> 00:12:09,680
that we would propose

00:12:06,959 --> 00:12:11,200
actually utilizes heavily on this

00:12:09,680 --> 00:12:13,920
technology that we developed

00:12:11,200 --> 00:12:14,560
that's the cochlear visor horizon used

00:12:13,920 --> 00:12:17,040
to be part of

00:12:14,560 --> 00:12:18,000
it was developed as part of opnrv clover

00:12:17,040 --> 00:12:19,760
but it has since

00:12:18,000 --> 00:12:21,760
spun out and it's an independent project

00:12:19,760 --> 00:12:23,839
now what it does is

00:12:21,760 --> 00:12:25,680
it talks to kubernetes or steel

00:12:23,839 --> 00:12:28,959
controllers

00:12:25,680 --> 00:12:31,360
and then it the big thing is it actually

00:12:28,959 --> 00:12:33,600
connects with the linux kernel through

00:12:31,360 --> 00:12:36,959
bpf technology iovisor is a

00:12:33,600 --> 00:12:40,079
open source technology under linux

00:12:36,959 --> 00:12:42,639
that actually would compile and load

00:12:40,079 --> 00:12:43,360
what we call bpf code into a kernel uh

00:12:42,639 --> 00:12:45,200
bpf

00:12:43,360 --> 00:12:46,560
i hope you know what bpf is but if you

00:12:45,200 --> 00:12:47,200
don't i probably don't have time to

00:12:46,560 --> 00:12:49,839
explain

00:12:47,200 --> 00:12:50,720
what vpf is but then in one liner would

00:12:49,839 --> 00:12:53,040
be

00:12:50,720 --> 00:12:54,079
is a kernel technologies that allows you

00:12:53,040 --> 00:12:57,200
to

00:12:54,079 --> 00:13:00,560
insert your code safely

00:12:57,200 --> 00:13:03,839
into different event points in a kernel

00:13:00,560 --> 00:13:06,639
so for us for example would be the

00:13:03,839 --> 00:13:07,920
ingress of a network device and the

00:13:06,639 --> 00:13:10,399
egress of a network device

00:13:07,920 --> 00:13:11,839
we can insert our own code in there and

00:13:10,399 --> 00:13:13,519
it's it's kernel safe

00:13:11,839 --> 00:13:15,920
uh the compiler ensures that it won't

00:13:13,519 --> 00:13:17,440
crash the kernel

00:13:15,920 --> 00:13:19,120
and then this so this is called visor it

00:13:17,440 --> 00:13:20,800
runs in a demon set so it runs on every

00:13:19,120 --> 00:13:25,200
single node

00:13:20,800 --> 00:13:26,800
uh and this so let's talk about a demo

00:13:25,200 --> 00:13:29,040
the description of that one the demo the

00:13:26,800 --> 00:13:30,720
setup is

00:13:29,040 --> 00:13:34,000
pretty simple it's set up actually i run

00:13:30,720 --> 00:13:36,240
two vms on my macbook

00:13:34,000 --> 00:13:37,360
through virtualbox so i'm creating two

00:13:36,240 --> 00:13:39,440
internal links

00:13:37,360 --> 00:13:41,040
between those two vms each vm basically

00:13:39,440 --> 00:13:42,959
represents a cluster

00:13:41,040 --> 00:13:44,560
so i run a full kubernetes clusters on

00:13:42,959 --> 00:13:47,920
each

00:13:44,560 --> 00:13:48,560
vm untinged it so the master runs here

00:13:47,920 --> 00:13:50,880
and

00:13:48,560 --> 00:13:52,880
all the minions running signature all

00:13:50,880 --> 00:13:56,959
the parts we schedule on just this one

00:13:52,880 --> 00:14:00,000
uh node and then

00:13:56,959 --> 00:14:02,320
i also utilize the sdo multi-cluster

00:14:00,000 --> 00:14:03,600
capabilities by deployment so there's

00:14:02,320 --> 00:14:04,320
three different deployment scenarios

00:14:03,600 --> 00:14:05,920
though

00:14:04,320 --> 00:14:07,440
uh the one we pick is replicator control

00:14:05,920 --> 00:14:10,720
plane separate networks

00:14:07,440 --> 00:14:13,279
um this is because well uh

00:14:10,720 --> 00:14:14,560
uh the the other two are share control

00:14:13,279 --> 00:14:17,600
plane separate networks and

00:14:14,560 --> 00:14:19,360
share control plane same network um

00:14:17,600 --> 00:14:20,720
the last one actually doesn't really

00:14:19,360 --> 00:14:22,800
make a lot of sense for

00:14:20,720 --> 00:14:23,839
for practical purposes uh it's probably

00:14:22,800 --> 00:14:25,680
more for testing

00:14:23,839 --> 00:14:27,440
so we didn't use it i think the second

00:14:25,680 --> 00:14:30,000
one which is the share control plane

00:14:27,440 --> 00:14:30,639
and separate networks that actually

00:14:30,000 --> 00:14:33,519
reflects

00:14:30,639 --> 00:14:34,480
much better on the cloud and edge

00:14:33,519 --> 00:14:35,760
relationships

00:14:34,480 --> 00:14:37,279
but then we still do the replicated

00:14:35,760 --> 00:14:38,160
control plane because it's the easiest

00:14:37,279 --> 00:14:41,199
to set up

00:14:38,160 --> 00:14:44,880
so that's basically the only reason

00:14:41,199 --> 00:14:46,639
what this does is and for a setup as

00:14:44,880 --> 00:14:48,639
i mentioned earlier there are two

00:14:46,639 --> 00:14:50,639
interfaces that are running

00:14:48,639 --> 00:14:52,160
between the two clusters so they similar

00:14:50,639 --> 00:14:52,720
to one link so this is winding a and

00:14:52,160 --> 00:14:56,839
running b

00:14:52,720 --> 00:14:59,760
basically between the two and

00:14:56,839 --> 00:15:02,959
that's uh so the idea is

00:14:59,760 --> 00:15:06,560
um this is one istio cluster istio

00:15:02,959 --> 00:15:10,000
instance running on a iso

00:15:06,560 --> 00:15:11,920
instance running on a single cluster

00:15:10,000 --> 00:15:13,760
and then there's another one and then

00:15:11,920 --> 00:15:14,560
when sleep wants to access any of this

00:15:13,760 --> 00:15:16,240
actually we've been

00:15:14,560 --> 00:15:18,079
it would go through a still ingress

00:15:16,240 --> 00:15:21,199
gateway

00:15:18,079 --> 00:15:24,240
and then the point is um through

00:15:21,199 --> 00:15:26,000
our solutions uh based on the route

00:15:24,240 --> 00:15:29,199
rules that you use to go to either

00:15:26,000 --> 00:15:31,279
v1 or v2 it would then select either one

00:15:29,199 --> 00:15:35,040
of the wind links to map into that

00:15:31,279 --> 00:15:40,480
route rules so let's get right to

00:15:35,040 --> 00:15:43,680
the demo

00:15:40,480 --> 00:15:45,759
hi so this is the demo uh screen

00:15:43,680 --> 00:15:47,759
what you see here is there are three

00:15:45,759 --> 00:15:51,600
windows logged into the edge

00:15:47,759 --> 00:15:54,160
node and this is the cloud side

00:15:51,600 --> 00:15:55,120
this is going back to that slide deck

00:15:54,160 --> 00:15:57,040
this is basically

00:15:55,120 --> 00:15:58,240
having actually been that would actually

00:15:57,040 --> 00:16:00,720
maps minions

00:15:58,240 --> 00:16:03,440
to version two i've actually been and

00:16:00,720 --> 00:16:06,480
everything else to be one

00:16:03,440 --> 00:16:06,480
as you can see

00:16:07,360 --> 00:16:12,880
there are two interfaces

00:16:10,480 --> 00:16:14,240
two uh when interfaces that we simulate

00:16:12,880 --> 00:16:18,399
the simulator when interfaces

00:16:14,240 --> 00:16:22,000
one is 1.3 and 2.3 and then

00:16:18,399 --> 00:16:24,720
if you look into the istio

00:16:22,000 --> 00:16:25,360
gateway ingress gateway ip address which

00:16:24,720 --> 00:16:27,600
is

00:16:25,360 --> 00:16:28,800
when we are setting it up we set up such

00:16:27,600 --> 00:16:37,839
that

00:16:28,800 --> 00:16:37,839
the the c part here

00:16:42,720 --> 00:16:50,320
sleep part here has a dns rules

00:16:46,000 --> 00:16:52,800
that would forward the ip address of

00:16:50,320 --> 00:16:54,240
this guy when they're going to actually

00:16:52,800 --> 00:16:57,360
been

00:16:54,240 --> 00:16:59,199
and then also the envoy will intercept

00:16:57,360 --> 00:17:02,240
the packets and forward it over

00:16:59,199 --> 00:17:02,240
with a new port number

00:17:02,880 --> 00:17:05,839
if you look at it now

00:17:06,160 --> 00:17:09,839
uh we set up a route that goes to the

00:17:09,360 --> 00:17:13,039
ingress

00:17:09,839 --> 00:17:15,760
gateway so i'm going to select that the

00:17:13,039 --> 00:17:20,319
interface to to to forward it out

00:17:15,760 --> 00:17:20,319
and if you look into

00:17:21,600 --> 00:17:24,640
packet throw between the two the good

00:17:23,280 --> 00:17:26,640
thing about using this is uh

00:17:24,640 --> 00:17:28,240
there's hardly any packets or actually

00:17:26,640 --> 00:17:28,640
there really isn't any packets going

00:17:28,240 --> 00:17:31,280
through

00:17:28,640 --> 00:17:33,760
the two internal interfaces until you

00:17:31,280 --> 00:17:35,440
actually start forwarding stuff

00:17:33,760 --> 00:17:37,120
so as you can see from that route rules

00:17:35,440 --> 00:17:39,280
here um

00:17:37,120 --> 00:17:40,880
we are looking at user minions and

00:17:39,280 --> 00:17:41,679
actually the second user that name is

00:17:40,880 --> 00:17:46,480
boss

00:17:41,679 --> 00:17:49,520
so here this is a boss the boss user

00:17:46,480 --> 00:17:51,760
curl dash u boss so if it goes there

00:17:49,520 --> 00:17:52,799
it goes through interface the first one

00:17:51,760 --> 00:17:56,559
interface

00:17:52,799 --> 00:17:56,559
and then if you use user minions

00:17:57,520 --> 00:18:01,840
it still goes through this interface so

00:17:59,280 --> 00:18:06,320
nothing gone through this

00:18:01,840 --> 00:18:10,240
so let's get started

00:18:06,320 --> 00:18:10,240
what we do here now is

00:18:12,840 --> 00:18:18,080
creating

00:18:15,360 --> 00:18:18,080
creating a

00:18:20,799 --> 00:18:28,240
proviso to ask them to use the when

00:18:24,320 --> 00:18:31,039
policies the mapping so if you

00:18:28,240 --> 00:18:32,960
look at this it's basically asking them

00:18:31,039 --> 00:18:34,080
that anything that matches port 3000 and

00:18:32,960 --> 00:18:37,039
minions

00:18:34,080 --> 00:18:38,799
uh would then be rewrite into this and

00:18:37,039 --> 00:18:41,840
then for and redirect it over to

00:18:38,799 --> 00:18:45,679
this particular link so

00:18:41,840 --> 00:18:45,679
again if you do boss

00:18:48,160 --> 00:18:53,919
if you do boss it doesn't change

00:18:50,400 --> 00:18:53,919
anything it's still going through this

00:18:55,120 --> 00:19:01,360
if you um if you do

00:18:58,160 --> 00:19:01,360
minions instead

00:19:01,520 --> 00:19:04,640
you can see that it's now going through

00:19:03,200 --> 00:19:10,080
s9 so

00:19:04,640 --> 00:19:13,280
once again if you do boss

00:19:10,080 --> 00:19:15,760
just going through this if you do

00:19:13,280 --> 00:19:15,760
minions

00:19:18,160 --> 00:19:26,480
it's going through the sky take some

00:19:22,840 --> 00:19:30,240
time yep it's going through this guy

00:19:26,480 --> 00:19:32,160
so that's a very simple demo

00:19:30,240 --> 00:19:33,520
to see with the railroads so what

00:19:32,160 --> 00:19:35,919
actually really is happening under the

00:19:33,520 --> 00:19:35,919
hood then

00:19:36,559 --> 00:19:41,440
so what's happening under the hood so

00:19:39,200 --> 00:19:44,160
basically

00:19:41,440 --> 00:19:45,200
the first thing you do is the clove

00:19:44,160 --> 00:19:47,440
visor

00:19:45,200 --> 00:19:50,080
you're loading a wand mapping into a

00:19:47,440 --> 00:19:50,080
clove visor

00:19:50,640 --> 00:19:56,799
this when mapping would then

00:19:53,760 --> 00:19:58,080
tells them as we saw earlier uh what

00:19:56,799 --> 00:20:01,120
route rules

00:19:58,080 --> 00:20:04,880
are mapped to which when interface

00:20:01,120 --> 00:20:07,120
uh we learned the railroads from mr d

00:20:04,880 --> 00:20:08,880
so in this case um we do have to reapply

00:20:07,120 --> 00:20:12,000
that route rules over to the to

00:20:08,880 --> 00:20:13,440
to to the edge also because it's still

00:20:12,000 --> 00:20:14,880
the even though it's replicated control

00:20:13,440 --> 00:20:15,679
plane actually doesn't really sync the

00:20:14,880 --> 00:20:18,559
route rules

00:20:15,679 --> 00:20:20,480
across different clusters uh but anyway

00:20:18,559 --> 00:20:21,600
so we learn that we learn how we

00:20:20,480 --> 00:20:24,880
implement this

00:20:21,600 --> 00:20:27,600
uh and then in sleep

00:20:24,880 --> 00:20:28,880
on the ash site the the pod sleep that

00:20:27,600 --> 00:20:32,559
has an envoy

00:20:28,880 --> 00:20:35,200
which we load a luau the luau filter

00:20:32,559 --> 00:20:36,320
so what does allow fuel to do what it

00:20:35,200 --> 00:20:38,720
does is uh

00:20:36,320 --> 00:20:39,760
it's for everything that matches in hdb

00:20:38,720 --> 00:20:41,679
rules

00:20:39,760 --> 00:20:43,280
or any actually he thinks that matches

00:20:41,679 --> 00:20:45,200
port 8000 in this case because we use

00:20:43,280 --> 00:20:47,600
cyca inbound it hasn't actually

00:20:45,200 --> 00:20:48,880
changed to port numbers yet uh it

00:20:47,600 --> 00:20:49,679
extracts the actually header

00:20:48,880 --> 00:20:52,159
informations

00:20:49,679 --> 00:20:53,520
and send it over to to cloud visor so

00:20:52,159 --> 00:20:55,679
cloud visor would

00:20:53,520 --> 00:20:56,799
for for example we basically mesh with

00:20:55,679 --> 00:20:58,720
the rules that say it's uh

00:20:56,799 --> 00:21:00,799
actually user equals to minions then do

00:20:58,720 --> 00:21:02,960
something

00:21:00,799 --> 00:21:04,080
then clovervisor takes that from mr

00:21:02,960 --> 00:21:05,600
understanding what it is and then

00:21:04,080 --> 00:21:06,720
knowing that this maps to a particular

00:21:05,600 --> 00:21:10,960
new wan links

00:21:06,720 --> 00:21:14,559
takes the session info and program bpf

00:21:10,960 --> 00:21:19,200
um to then start routing things

00:21:14,559 --> 00:21:19,200
for this particular sessions to s9

00:21:19,440 --> 00:21:26,320
once that redirect rules is in place um

00:21:24,080 --> 00:21:27,360
anything that sleeps sends that matches

00:21:26,320 --> 00:21:29,919
minions

00:21:27,360 --> 00:21:31,440
would then be routed into s9 anything

00:21:29,919 --> 00:21:33,280
that sends just anything other than

00:21:31,440 --> 00:21:35,840
minions like boss in in

00:21:33,280 --> 00:21:37,679
our demos it would still go through s8

00:21:35,840 --> 00:21:39,760
go through a different when link

00:21:37,679 --> 00:21:44,559
so this is actually the cluster of

00:21:39,760 --> 00:21:47,280
what's going on inside

00:21:44,559 --> 00:21:48,480
so basically what happens is uh on on

00:21:47,280 --> 00:21:51,679
the full measures

00:21:48,480 --> 00:21:51,679
once we have a

00:21:52,400 --> 00:21:58,320
rules settings for cloud visors another

00:21:54,799 --> 00:22:01,360
one is to be able to read from this dld

00:21:58,320 --> 00:22:03,840
we have a luau filter on uh

00:22:01,360 --> 00:22:04,960
lower filter on on android so there will

00:22:03,840 --> 00:22:06,880
actually forward us actually be

00:22:04,960 --> 00:22:09,520
informations on new sessions

00:22:06,880 --> 00:22:10,880
uh provider implements that railroad

00:22:09,520 --> 00:22:12,559
classifications

00:22:10,880 --> 00:22:14,799
maps into recession informations and

00:22:12,559 --> 00:22:16,159
program bpf and then subsequently all

00:22:14,799 --> 00:22:19,360
the packets would then be forwarded

00:22:16,159 --> 00:22:19,360
into a different rand link

00:22:19,600 --> 00:22:24,000
for future enhancement so this is cool

00:22:21,760 --> 00:22:26,320
hopefully you think this is good

00:22:24,000 --> 00:22:27,760
for future enhancements uh what we some

00:22:26,320 --> 00:22:31,120
of the things we're looking at is

00:22:27,760 --> 00:22:34,400
um let's say you actually have

00:22:31,120 --> 00:22:36,880
a very resource constrained etch node

00:22:34,400 --> 00:22:37,679
where because envoy is being deployed

00:22:36,880 --> 00:22:40,559
per

00:22:37,679 --> 00:22:41,520
as a container per pod per workload pod

00:22:40,559 --> 00:22:42,799
it can

00:22:41,520 --> 00:22:44,559
you may not have locations that actually

00:22:42,799 --> 00:22:46,320
require that particular edge maybe it

00:22:44,559 --> 00:22:49,039
actually isn't needed

00:22:46,320 --> 00:22:50,159
particularly talking to users there

00:22:49,039 --> 00:22:51,600
really is a difference between whether

00:22:50,159 --> 00:22:53,600
or not your application is cpu bound

00:22:51,600 --> 00:22:56,240
versus i o bound

00:22:53,600 --> 00:22:57,360
your a lot of times your applications in

00:22:56,240 --> 00:23:00,000
edge may not be

00:22:57,360 --> 00:23:02,480
very chatty it may not be as chatty it

00:23:00,000 --> 00:23:04,000
would it would actually be

00:23:02,480 --> 00:23:05,600
probably wasting resources to actually

00:23:04,000 --> 00:23:07,280
create that extra containers

00:23:05,600 --> 00:23:08,799
so one thing you may want to do is to

00:23:07,280 --> 00:23:14,559
create envoy

00:23:08,799 --> 00:23:14,559
that runs on that basically runs on

00:23:15,360 --> 00:23:19,679
sorry that basically runs on

00:23:20,320 --> 00:23:24,559
as a single entity where multiple parts

00:23:23,280 --> 00:23:25,600
would be able to go through the same

00:23:24,559 --> 00:23:28,080
envoy

00:23:25,600 --> 00:23:29,039
so the clovisa portion is kind of more

00:23:28,080 --> 00:23:30,720
simplistic

00:23:29,039 --> 00:23:32,080
so when you when you deploy envoy the

00:23:30,720 --> 00:23:32,480
first thing you do is a knit container

00:23:32,080 --> 00:23:36,799
is that

00:23:32,480 --> 00:23:39,200
basically set it into uh the to set

00:23:36,799 --> 00:23:40,799
uh the ipa table rules so that you can

00:23:39,200 --> 00:23:43,120
you route all the path traffic or

00:23:40,799 --> 00:23:45,200
incoming outgoing traffic onto android

00:23:43,120 --> 00:23:46,559
so cloud visor can actually do this by

00:23:45,200 --> 00:23:49,760
using something called sock map

00:23:46,559 --> 00:23:51,360
which acknowledgement to uh to project

00:23:49,760 --> 00:23:53,360
silium folks they actually

00:23:51,360 --> 00:23:54,880
created this stock map capabilities if

00:23:53,360 --> 00:23:55,520
you know tc splicing it's basically the

00:23:54,880 --> 00:23:57,919
same thing

00:23:55,520 --> 00:23:59,039
except it's programmable tcp splicing

00:23:57,919 --> 00:24:00,400
that allows you to

00:23:59,039 --> 00:24:02,880
switch packets from one socket to

00:24:00,400 --> 00:24:04,880
another socket so we can we can

00:24:02,880 --> 00:24:06,400
utilize sockback capabilities and

00:24:04,880 --> 00:24:09,520
basically create

00:24:06,400 --> 00:24:11,279
android as a non-cycle entity but then

00:24:09,520 --> 00:24:13,120
at least one per name space per node

00:24:11,279 --> 00:24:15,279
why one per name service per node

00:24:13,120 --> 00:24:17,120
because of security reasons

00:24:15,279 --> 00:24:18,400
any things that before going into envoy

00:24:17,120 --> 00:24:20,320
are clear text

00:24:18,400 --> 00:24:21,679
so you would you would at least trust

00:24:20,320 --> 00:24:22,880
everything in your name space to

00:24:21,679 --> 00:24:24,720
actually do the right thing

00:24:22,880 --> 00:24:26,880
and that being the case then you would

00:24:24,720 --> 00:24:27,360
send it out onto a per name say per no

00:24:26,880 --> 00:24:30,799
because

00:24:27,360 --> 00:24:32,480
if you go out on to the node you do not

00:24:30,799 --> 00:24:34,080
it is you don't you do not want

00:24:32,480 --> 00:24:35,440
unencrypted things go out to go out on

00:24:34,080 --> 00:24:38,240
the physical interface

00:24:35,440 --> 00:24:39,279
so so this is actually something that we

00:24:38,240 --> 00:24:41,039
are exploring

00:24:39,279 --> 00:24:42,480
uh some of the hard thing is the to make

00:24:41,039 --> 00:24:46,080
istio works with a

00:24:42,480 --> 00:24:48,240
non-psychar envoy another thing that

00:24:46,080 --> 00:24:49,919
very quickly because it's almost time uh

00:24:48,240 --> 00:24:52,320
is um

00:24:49,919 --> 00:24:53,919
how to actually ship logs so right now

00:24:52,320 --> 00:24:55,520
this is not really part of the istio

00:24:53,919 --> 00:24:57,679
control plane it's not a cld

00:24:55,520 --> 00:24:59,600
the the log collectors the trace

00:24:57,679 --> 00:25:01,840
collectors and the metrics collectors

00:24:59,600 --> 00:25:03,840
are all separate entities that you have

00:25:01,840 --> 00:25:05,120
to deploy yourself

00:25:03,840 --> 00:25:08,320
it really doesn't make sense to deploy

00:25:05,120 --> 00:25:10,960
that in edge so we would like to

00:25:08,320 --> 00:25:12,640
figure out solutions that you can but

00:25:10,960 --> 00:25:13,360
you still want the telemetry information

00:25:12,640 --> 00:25:15,279
to login for

00:25:13,360 --> 00:25:16,880
information the metrics informations the

00:25:15,279 --> 00:25:17,760
trace information particularly are very

00:25:16,880 --> 00:25:19,600
useful

00:25:17,760 --> 00:25:21,919
so one of the things to think about is

00:25:19,600 --> 00:25:25,039
you know can we store them

00:25:21,919 --> 00:25:25,600
in batch and sentinel or instead of you

00:25:25,039 --> 00:25:27,120
know do we

00:25:25,600 --> 00:25:28,960
do we want them to keep on sending it

00:25:27,120 --> 00:25:29,440
when you know i utilize when but i keep

00:25:28,960 --> 00:25:32,640
on

00:25:29,440 --> 00:25:35,039
tracers are pretty taxing because

00:25:32,640 --> 00:25:36,559
i think diesel configuration is open

00:25:35,039 --> 00:25:40,159
traces send out two traces

00:25:36,559 --> 00:25:42,080
two spans uh all the time so

00:25:40,159 --> 00:25:43,679
out of the pod so this is pretty

00:25:42,080 --> 00:25:45,840
frequent operations

00:25:43,679 --> 00:25:47,279
if you have a complicated applications

00:25:45,840 --> 00:25:48,400
so this is one thing to really think

00:25:47,279 --> 00:25:50,320
about moving forward

00:25:48,400 --> 00:25:51,919
on how to address this on an edge cloud

00:25:50,320 --> 00:25:55,039
deployment

00:25:51,919 --> 00:25:56,559
so in summary uh there as we said

00:25:55,039 --> 00:25:58,640
there's a lot of benefits of running

00:25:56,559 --> 00:26:00,720
service mesh across cloud edge

00:25:58,640 --> 00:26:01,679
uh we demonstrated when associations

00:26:00,720 --> 00:26:03,600
it's actually uh

00:26:01,679 --> 00:26:05,679
we believe it's a very good features

00:26:03,600 --> 00:26:07,919
particularly with sd-wan

00:26:05,679 --> 00:26:09,520
um this will definitely be very powerful

00:26:07,919 --> 00:26:11,440
moving forward

00:26:09,520 --> 00:26:12,880
and then for the future we would if you

00:26:11,440 --> 00:26:15,200
have any resource constraints or

00:26:12,880 --> 00:26:16,799
concerns on site cars

00:26:15,200 --> 00:26:18,880
and or the control traffic in general

00:26:16,799 --> 00:26:20,159
there are two major areas to investigate

00:26:18,880 --> 00:26:22,000
and address

00:26:20,159 --> 00:26:23,600
we do want to conclude by saying that we

00:26:22,000 --> 00:26:25,840
believe that edge computing

00:26:23,600 --> 00:26:27,760
is as much if not more of a networking

00:26:25,840 --> 00:26:30,400
problem as it is a computing problem

00:26:27,760 --> 00:26:32,240
so that being the case um i think you

00:26:30,400 --> 00:26:34,400
know application needs to be aware

00:26:32,240 --> 00:26:36,320
that they're running on edge instead of

00:26:34,400 --> 00:26:37,760
on on cloud

00:26:36,320 --> 00:26:39,600
and then and then the infrastructure

00:26:37,760 --> 00:26:40,720
needs to be invested heavily on

00:26:39,600 --> 00:26:43,760
how to solve that problem on a

00:26:40,720 --> 00:26:43,760
networking perspective

00:26:44,000 --> 00:26:48,320
um so if you want to contact me if

00:26:46,960 --> 00:26:49,200
you're interested in the project uh

00:26:48,320 --> 00:26:51,840
please contact me

00:26:49,200 --> 00:26:53,000
this is cloudvisorproject.gmail and the

00:26:51,840 --> 00:26:55,039
code is actually in github

00:26:53,000 --> 00:26:58,880
cloudvisiblevisor

00:26:55,039 --> 00:27:00,400
um thank you for attending because i

00:26:58,880 --> 00:27:01,520
know this is uh by the time you guys

00:27:00,400 --> 00:27:04,320
look at this session it will be

00:27:01,520 --> 00:27:04,640
one of the last ones many events so it's

00:27:04,320 --> 00:27:07,360
uh

00:27:04,640 --> 00:27:08,559
i i thank you very much for staying and

00:27:07,360 --> 00:27:14,080
attending

00:27:08,559 --> 00:27:14,080

YouTube URL: https://www.youtube.com/watch?v=OHDKH6z22Dw


