Title: Tutorial: DevOps Tooling for Java Developers in a Cloud Native World - Melissa McKay, Stephen Chin
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Tutorial: DevOps Tooling for Java Developers in a Cloud Native World - Melissa McKay, Stephen Chin, & Baruch Sadogursky, JFrog; & Ixchel Ruiz, Karakun AG 

With the rise of DevOps, low-cost Cloud Computing, and emerging Container technologies, the landscape for how you approach development has dramatically changed. This tutorial is focused on helping Java developers to adapt to this new landscape and take advantage of microservices, serverless, and cloud-native technologies with the latest DevOps techniques to simplify their build and create hyperproductive teams. The entire DevOps toolchain will be covered including source control, build declaration, CI/CD, package management, containerization, and security. Learn from the combined experience of the presenters who are experts in the Java and DevOps domains on the best tools, technologies, and methodologies to build your next cloud-native application or refactor your monolith. 

https://sched.co/ekFf
Captions: 
	00:00:00,320 --> 00:00:04,000
okay so welcome everybody to devops

00:00:03,280 --> 00:00:06,080
tools for

00:00:04,000 --> 00:00:07,919
job developers we're very excited to be

00:00:06,080 --> 00:00:09,679
able to talk be able to talk to all the

00:00:07,919 --> 00:00:11,840
folks at kubecon about how you can

00:00:09,679 --> 00:00:13,360
uplevel your development skills by

00:00:11,840 --> 00:00:15,599
adding in a bunch of

00:00:13,360 --> 00:00:17,279
cloud native kubernetes and deployment

00:00:15,599 --> 00:00:19,920
skill sets

00:00:17,279 --> 00:00:21,680
to kind of extend what you're doing with

00:00:19,920 --> 00:00:23,519
continuously deploying to production

00:00:21,680 --> 00:00:26,480
environments

00:00:23,519 --> 00:00:28,160
my name is steven chin i run the

00:00:26,480 --> 00:00:30,640
developer relations group

00:00:28,160 --> 00:00:32,640
at jfrog have been a long time java

00:00:30,640 --> 00:00:34,559
developer and was doing

00:00:32,640 --> 00:00:35,920
devops before we even had a cool name

00:00:34,559 --> 00:00:37,280
for the for the word

00:00:35,920 --> 00:00:39,040
basically we were just figuring out how

00:00:37,280 --> 00:00:42,960
to do better automation to

00:00:39,040 --> 00:00:46,160
to production um excel do you want to

00:00:42,960 --> 00:00:48,800
go next yes thank you thank you steve

00:00:46,160 --> 00:00:50,719
my name is ixel reese i'm from mexico

00:00:48,800 --> 00:00:51,680
live in switzerland i'm a software

00:00:50,719 --> 00:00:55,440
developer

00:00:51,680 --> 00:00:58,000
official title it's principal consultant

00:00:55,440 --> 00:00:58,800
i'm a java developer most of the time

00:00:58,000 --> 00:01:02,000
but i

00:00:58,800 --> 00:01:03,760
also do full stack because you have to

00:01:02,000 --> 00:01:06,960
be flexible in this world

00:01:03,760 --> 00:01:09,119
elisa i'm melissa mckay

00:01:06,960 --> 00:01:10,159
and i come from a developer background

00:01:09,119 --> 00:01:13,520
as well

00:01:10,159 --> 00:01:14,479
about 20 years now um just recently i

00:01:13,520 --> 00:01:17,280
decided to

00:01:14,479 --> 00:01:18,400
become a developer advocate for jfrog

00:01:17,280 --> 00:01:20,080
and i'm hoping that

00:01:18,400 --> 00:01:22,240
all of my development experience i'll be

00:01:20,080 --> 00:01:25,119
able to use that to share with you

00:01:22,240 --> 00:01:26,880
at talks virtually here and hopefully

00:01:25,119 --> 00:01:29,200
someday in the future

00:01:26,880 --> 00:01:30,880
uh physically maybe we'll cross paths at

00:01:29,200 --> 00:01:34,159
a conference

00:01:30,880 --> 00:01:35,920
i'm pretty excited to be here today so

00:01:34,159 --> 00:01:39,119
yeah so we're looking we're all looking

00:01:35,920 --> 00:01:41,920
forward to to in-person cube come back

00:01:39,119 --> 00:01:43,600
my name is baruch sadogursky i am the

00:01:41,920 --> 00:01:46,399
chief sticker officer of jfrog

00:01:43,600 --> 00:01:47,840
speaking about in person conferences i

00:01:46,399 --> 00:01:49,520
would love to be there with you

00:01:47,840 --> 00:01:51,360
and give you some awesome stickers of

00:01:49,520 --> 00:01:54,640
jfrog also

00:01:51,360 --> 00:01:57,680
head of developer advocacy and uh

00:01:54,640 --> 00:02:01,520
being developer myself for in more than

00:01:57,680 --> 00:02:04,320
almost 20 years now i i really

00:02:01,520 --> 00:02:05,840
love speaking to developers about devops

00:02:04,320 --> 00:02:09,200
i mean that's exactly what we're

00:02:05,840 --> 00:02:12,560
going to do to do now uh working

00:02:09,200 --> 00:02:13,520
with a company jfrog that does tools for

00:02:12,560 --> 00:02:16,000
developers

00:02:13,520 --> 00:02:16,720
can give you the perspective of both

00:02:16,000 --> 00:02:19,920
worlds

00:02:16,720 --> 00:02:23,120
and um we'll do our best to share this

00:02:19,920 --> 00:02:24,879
joint perspective with you today welcome

00:02:23,120 --> 00:02:27,040
all right before we get started here we

00:02:24,879 --> 00:02:29,360
have a short demo that we want to

00:02:27,040 --> 00:02:30,160
get started are we uh we're starting

00:02:29,360 --> 00:02:32,080
with the developer

00:02:30,160 --> 00:02:33,680
actually doing a download first yeah i

00:02:32,080 --> 00:02:34,400
know it's incredible a little bit

00:02:33,680 --> 00:02:37,360
different

00:02:34,400 --> 00:02:38,480
um anyway i'm gonna go ahead and uh

00:02:37,360 --> 00:02:40,239
click a button here

00:02:38,480 --> 00:02:42,560
so that you can see something start

00:02:40,239 --> 00:02:43,680
working uh okay so we're not talking

00:02:42,560 --> 00:02:46,000
about the demo we're just

00:02:43,680 --> 00:02:47,519
firing up the demo we're just firing up

00:02:46,000 --> 00:02:49,200
the demo and then we'll talk about the

00:02:47,519 --> 00:02:51,840
demo later on in the talk

00:02:49,200 --> 00:02:51,840
all right

00:02:52,480 --> 00:02:56,000
here we go let's build something trigger

00:02:54,160 --> 00:02:58,000
it to start running what you see in

00:02:56,000 --> 00:03:02,239
front of you is just a simple

00:02:58,000 --> 00:03:04,800
pipeline cool it looks like we have a 50

00:03:02,239 --> 00:03:05,599
chance of this demo working yeah and

00:03:04,800 --> 00:03:07,840
it's actually

00:03:05,599 --> 00:03:09,760
and look it's actually it's it's always

00:03:07,840 --> 00:03:10,319
fifty percent it is the work or doesn't

00:03:09,760 --> 00:03:12,480
work

00:03:10,319 --> 00:03:12,480
but

00:03:13,360 --> 00:03:17,360
but it improves it improves all the last

00:03:15,280 --> 00:03:20,159
runs are successful so i'm optimistic

00:03:17,360 --> 00:03:20,159
it's going to be great

00:03:22,159 --> 00:03:26,159
oh then you know what let's let's drop a

00:03:24,959 --> 00:03:29,840
bomb here

00:03:26,159 --> 00:03:32,799
let's let's ask the big questions

00:03:29,840 --> 00:03:33,040
why should developers care about devops

00:03:32,799 --> 00:03:35,440
and

00:03:33,040 --> 00:03:36,319
as i mentioned i i come from developers

00:03:35,440 --> 00:03:38,560
perspective

00:03:36,319 --> 00:03:41,200
and i remember what developers care

00:03:38,560 --> 00:03:44,560
about and they care about code right

00:03:41,200 --> 00:03:47,680
as a developer our definition of done

00:03:44,560 --> 00:03:49,760
is we wrote some code we

00:03:47,680 --> 00:03:50,959
tested it quality is very important

00:03:49,760 --> 00:03:55,040
right and then

00:03:50,959 --> 00:03:58,080
we kind of shown it to all the

00:03:55,040 --> 00:03:58,959
shareholders we we we showed what we

00:03:58,080 --> 00:04:01,680
wrote

00:03:58,959 --> 00:04:02,400
to a product manager or to a project

00:04:01,680 --> 00:04:06,319
manager

00:04:02,400 --> 00:04:08,480
obviously to qa to our team lead

00:04:06,319 --> 00:04:10,080
who checked for and they they checked

00:04:08,480 --> 00:04:11,920
for for all the stuff right

00:04:10,080 --> 00:04:14,560
if the features are there non-functional

00:04:11,920 --> 00:04:17,919
requirements at the court style

00:04:14,560 --> 00:04:19,600
and the the court review the qa people

00:04:17,919 --> 00:04:23,680
checked for quality

00:04:19,600 --> 00:04:26,800
and and once all of those stakeholders

00:04:23,680 --> 00:04:30,960
approve and say it's good this

00:04:26,800 --> 00:04:34,479
is where we are done our work is done

00:04:30,960 --> 00:04:37,840
it's friday let's go drink

00:04:34,479 --> 00:04:38,560
now the ops people they are going to

00:04:37,840 --> 00:04:40,720
deploy it

00:04:38,560 --> 00:04:42,000
if our code is good it will be deployed

00:04:40,720 --> 00:04:44,639
just fine it will

00:04:42,000 --> 00:04:45,520
work just fine and we wish them the best

00:04:44,639 --> 00:04:48,800
of luck

00:04:45,520 --> 00:04:51,360
but it's really not our job to do

00:04:48,800 --> 00:04:52,639
all the devops stuff kubernetes

00:04:51,360 --> 00:04:56,160
infrastructures code

00:04:52,639 --> 00:04:57,040
servers networks this is not our

00:04:56,160 --> 00:04:59,759
headache

00:04:57,040 --> 00:05:02,160
why should we as developers care about

00:04:59,759 --> 00:05:02,160
devops

00:05:02,560 --> 00:05:07,759
this is exactly the perspective i've had

00:05:05,440 --> 00:05:10,720
as a developer for most of my career

00:05:07,759 --> 00:05:13,280
we were pretty siloed when it came to

00:05:10,720 --> 00:05:15,600
the actual deployment piece

00:05:13,280 --> 00:05:17,280
i was never on call for a deployment or

00:05:15,600 --> 00:05:20,320
anything like that

00:05:17,280 --> 00:05:22,479
it's very different atmosphere today my

00:05:20,320 --> 00:05:25,520
most recent

00:05:22,479 --> 00:05:28,560
time in my career i was on a devops team

00:05:25,520 --> 00:05:31,919
that really opened my eyes um

00:05:28,560 --> 00:05:32,479
i did not realize the pains that ops

00:05:31,919 --> 00:05:35,039
takes

00:05:32,479 --> 00:05:36,000
to deploy the applications and once i

00:05:35,039 --> 00:05:38,000
started learning

00:05:36,000 --> 00:05:40,800
several you know things some of that

00:05:38,000 --> 00:05:42,720
process i realized there were actually

00:05:40,800 --> 00:05:44,880
big decisions i would have made

00:05:42,720 --> 00:05:46,479
differently about the writing and the

00:05:44,880 --> 00:05:48,320
organization of the app

00:05:46,479 --> 00:05:49,600
had i known all of this pain that they

00:05:48,320 --> 00:05:52,560
were going through

00:05:49,600 --> 00:05:53,440
so um i think this is a good move in the

00:05:52,560 --> 00:05:56,240
industry

00:05:53,440 --> 00:05:57,840
um having these silos where you just you

00:05:56,240 --> 00:05:59,759
know throw code over the wall and then

00:05:57,840 --> 00:06:02,000
just let ops handle it i think

00:05:59,759 --> 00:06:04,400
it's just not the best way to do things

00:06:02,000 --> 00:06:04,400
anymore

00:06:05,199 --> 00:06:08,800
well i understand how it helps the ops

00:06:08,400 --> 00:06:10,960
people

00:06:08,800 --> 00:06:12,000
their life is much easier when we are

00:06:10,960 --> 00:06:15,199
there with them

00:06:12,000 --> 00:06:16,720
but how it helps helps us so let me let

00:06:15,199 --> 00:06:20,400
me pitch in from a

00:06:16,720 --> 00:06:22,400
developer perspective um

00:06:20,400 --> 00:06:26,400
so i i think if you if you look at this

00:06:22,400 --> 00:06:28,479
from from a very selfish perspective

00:06:26,400 --> 00:06:31,919
um what we all care about is is how much

00:06:28,479 --> 00:06:33,440
we get paid as developers right

00:06:31,919 --> 00:06:35,600
and if you look at the stack overflow

00:06:33,440 --> 00:06:37,919
survey which was recently done

00:06:35,600 --> 00:06:39,520
um you know full stack engineers and

00:06:37,919 --> 00:06:40,319
back-end engineers and everyone gets

00:06:39,520 --> 00:06:42,960
paid you know

00:06:40,319 --> 00:06:44,800
quite well so i think even amid the

00:06:42,960 --> 00:06:47,840
current pandemic we're very lucky to

00:06:44,800 --> 00:06:50,319
have technology jobs

00:06:47,840 --> 00:06:52,479
devops engineers and site reliability

00:06:50,319 --> 00:06:54,000
engineers are actually even higher paid

00:06:52,479 --> 00:06:56,639
than development positions

00:06:54,000 --> 00:06:59,199
and i think this this reflects the the

00:06:56,639 --> 00:07:02,319
number of languages and technologies the

00:06:59,199 --> 00:07:03,759
um adding in additional cloud native

00:07:02,319 --> 00:07:06,319
deploying to cloud environments or

00:07:03,759 --> 00:07:07,759
hybrid environments and

00:07:06,319 --> 00:07:10,639
learning all these skills and getting

00:07:07,759 --> 00:07:12,560
really good at it actually is a way of

00:07:10,639 --> 00:07:13,759
improving your career and and getting

00:07:12,560 --> 00:07:16,080
paid more which

00:07:13,759 --> 00:07:18,160
you know that's not too bad not too bad

00:07:16,080 --> 00:07:19,759
at all

00:07:18,160 --> 00:07:22,880
jill what is your take on it why

00:07:19,759 --> 00:07:25,919
developers should care about devops

00:07:22,880 --> 00:07:29,280
well i agree with all of you actually

00:07:25,919 --> 00:07:30,160
uh first and the most interesting reason

00:07:29,280 --> 00:07:33,599
for me is

00:07:30,160 --> 00:07:37,199
as steve mentioned this set of

00:07:33,599 --> 00:07:38,319
practices that were devops and agile are

00:07:37,199 --> 00:07:41,440
here to stay

00:07:38,319 --> 00:07:43,599
so outside there if you're looking for a

00:07:41,440 --> 00:07:44,639
new job a better pay job these are the

00:07:43,599 --> 00:07:47,120
skills that you

00:07:44,639 --> 00:07:47,919
have or the concept that you have to

00:07:47,120 --> 00:07:50,879
know

00:07:47,919 --> 00:07:51,440
and use the second reason is because

00:07:50,879 --> 00:07:54,000
there are

00:07:51,440 --> 00:07:55,199
good practices in there there are good

00:07:54,000 --> 00:07:58,319
practices that will

00:07:55,199 --> 00:08:01,840
make your life easier

00:07:58,319 --> 00:08:06,080
and when this whole concept of

00:08:01,840 --> 00:08:08,639
devops started um probably

00:08:06,080 --> 00:08:10,479
uh the best book that describes the

00:08:08,639 --> 00:08:13,520
ideas behind it

00:08:10,479 --> 00:08:16,000
is the phoenix project

00:08:13,520 --> 00:08:17,120
if you have started with this topic in a

00:08:16,000 --> 00:08:20,560
more serious

00:08:17,120 --> 00:08:23,280
way you probably have been recommended

00:08:20,560 --> 00:08:25,039
this book i do recommend this book

00:08:23,280 --> 00:08:26,319
first of all it's a novel so it's

00:08:25,039 --> 00:08:28,240
entertaining

00:08:26,319 --> 00:08:30,720
second of all it's going to give you a

00:08:28,240 --> 00:08:33,279
perspective from management

00:08:30,720 --> 00:08:34,719
when this book was written it was the

00:08:33,279 --> 00:08:37,760
earliest 2000s

00:08:34,719 --> 00:08:41,039
and at this specific point in time

00:08:37,760 --> 00:08:43,519
all companies realize that they are

00:08:41,039 --> 00:08:44,480
they were or they are technology

00:08:43,519 --> 00:08:48,000
companies

00:08:44,480 --> 00:08:49,680
regardless of the product or services

00:08:48,000 --> 00:08:52,880
they provide

00:08:49,680 --> 00:08:53,600
so and steve mentioned another important

00:08:52,880 --> 00:08:56,160
thing

00:08:53,600 --> 00:08:57,920
right now with this the with kobe the

00:08:56,160 --> 00:09:01,600
pandemia

00:08:57,920 --> 00:09:05,040
it is important that we react fast

00:09:01,600 --> 00:09:06,720
we adapt fast we deliver fast so this

00:09:05,040 --> 00:09:09,519
idea of going

00:09:06,720 --> 00:09:10,399
really really fast and also providing

00:09:09,519 --> 00:09:14,000
quality

00:09:10,399 --> 00:09:16,320
making the the user happy or

00:09:14,000 --> 00:09:17,519
providing new functionality it's really

00:09:16,320 --> 00:09:20,640
important

00:09:17,519 --> 00:09:22,959
so in this book they describe exactly

00:09:20,640 --> 00:09:25,760
what melissa said

00:09:22,959 --> 00:09:27,040
the miscommunication of the impedance

00:09:25,760 --> 00:09:29,279
between different

00:09:27,040 --> 00:09:30,640
silos inside the company that were

00:09:29,279 --> 00:09:33,680
preventing

00:09:30,640 --> 00:09:35,920
this particular company from delivering

00:09:33,680 --> 00:09:37,519
the software or whatever they needed to

00:09:35,920 --> 00:09:40,959
deliver

00:09:37,519 --> 00:09:41,760
in time exceeding costs and sometimes

00:09:40,959 --> 00:09:44,240
not meeting

00:09:41,760 --> 00:09:44,959
the expectations so this is a really

00:09:44,240 --> 00:09:47,839
good book

00:09:44,959 --> 00:09:48,880
because for us developers it provides us

00:09:47,839 --> 00:09:53,360
with a glimpse

00:09:48,880 --> 00:09:57,040
of what were the management concerns

00:09:53,360 --> 00:09:57,279
and when you start learning the language

00:09:57,040 --> 00:10:00,480
of

00:09:57,279 --> 00:10:04,079
management you can also talk

00:10:00,480 --> 00:10:06,240
back and probably you as a developer i'm

00:10:04,079 --> 00:10:09,760
going to have my list of metrics

00:10:06,240 --> 00:10:12,240
c we reduce our whatever for 20

00:10:09,760 --> 00:10:14,560
and then i go with management or

00:10:12,240 --> 00:10:18,000
stakeholders and they are like

00:10:14,560 --> 00:10:20,240
but what does that mean well

00:10:18,000 --> 00:10:21,839
now you have the language of management

00:10:20,240 --> 00:10:23,120
you know the concerns and you can

00:10:21,839 --> 00:10:26,160
translate

00:10:23,120 --> 00:10:29,040
whatever you are improving into their

00:10:26,160 --> 00:10:31,200
language there's another book and it's

00:10:29,040 --> 00:10:33,920
the companion i'd like to call it

00:10:31,200 --> 00:10:35,519
the companion of the phoenix project is

00:10:33,920 --> 00:10:38,720
the unicorn project

00:10:35,519 --> 00:10:42,079
this is the same story again a novel

00:10:38,720 --> 00:10:44,240
but the main character is a female

00:10:42,079 --> 00:10:47,120
developer

00:10:44,240 --> 00:10:49,120
and it's going to describe um the

00:10:47,120 --> 00:10:51,519
working environment and also

00:10:49,120 --> 00:10:53,120
the things that can go wrong in a

00:10:51,519 --> 00:10:56,399
software development team

00:10:53,120 --> 00:10:57,839
so it's also interesting uh because it

00:10:56,399 --> 00:11:00,720
provides you

00:10:57,839 --> 00:11:02,240
a nice depiction or sometimes a not so

00:11:00,720 --> 00:11:06,640
nice depiction

00:11:02,240 --> 00:11:09,760
but you also see that the principles

00:11:06,640 --> 00:11:11,920
or the concepts or the practices that

00:11:09,760 --> 00:11:15,040
devops is proposing

00:11:11,920 --> 00:11:18,240
will help you in your day-to-day life

00:11:15,040 --> 00:11:18,959
so you're going to be a less annoyed and

00:11:18,240 --> 00:11:22,240
hopefully

00:11:18,959 --> 00:11:22,800
a happy developer and that's that's a

00:11:22,240 --> 00:11:24,720
great

00:11:22,800 --> 00:11:25,839
review of those two books and i would

00:11:24,720 --> 00:11:28,720
like to suggest

00:11:25,839 --> 00:11:30,000
if you wish an alternative relationship

00:11:28,720 --> 00:11:33,360
between them

00:11:30,000 --> 00:11:37,200
and um it's interesting both in terms

00:11:33,360 --> 00:11:39,839
of timing the unicorn project

00:11:37,200 --> 00:11:40,480
released 10 years after the phoenix

00:11:39,839 --> 00:11:42,640
project

00:11:40,480 --> 00:11:45,279
and it's interesting to see how the

00:11:42,640 --> 00:11:48,399
views on devops progressed

00:11:45,279 --> 00:11:49,680
during this time um if we look at the

00:11:48,399 --> 00:11:52,959
phoenix project

00:11:49,680 --> 00:11:56,160
we see how the story of devops

00:11:52,959 --> 00:11:59,440
is actually a story of ops people

00:11:56,160 --> 00:12:02,399
of i.t people winning with devops

00:11:59,440 --> 00:12:03,360
you can see how the main protagonist of

00:12:02,399 --> 00:12:06,480
the story

00:12:03,360 --> 00:12:08,800
bill palmer he is a vp of i.t

00:12:06,480 --> 00:12:09,600
ops and that's like a completely ops

00:12:08,800 --> 00:12:12,800
concept

00:12:09,600 --> 00:12:15,760
and his devops um

00:12:12,800 --> 00:12:17,120
kind of invention is the solution to the

00:12:15,760 --> 00:12:19,360
exact problem we spoke

00:12:17,120 --> 00:12:21,040
earlier of how the developers are done

00:12:19,360 --> 00:12:23,040
and they are out of the building

00:12:21,040 --> 00:12:25,200
and now go ahead and deal with it and

00:12:23,040 --> 00:12:28,800
good luck and this is kind

00:12:25,200 --> 00:12:31,839
of view of how devops came to be

00:12:28,800 --> 00:12:35,040
solving the problem of it

00:12:31,839 --> 00:12:37,120
ops people now 10 years later

00:12:35,040 --> 00:12:38,639
we see a completely different picture

00:12:37,120 --> 00:12:41,680
the unicorn project

00:12:38,639 --> 00:12:42,240
as being an alternative timeline if you

00:12:41,680 --> 00:12:45,040
wish

00:12:42,240 --> 00:12:45,760
the same company the same problem now

00:12:45,040 --> 00:12:48,079
solved

00:12:45,760 --> 00:12:50,079
from a completely different perspective

00:12:48,079 --> 00:12:53,279
maxine the lead developer as

00:12:50,079 --> 00:12:56,800
um as you mentioned israel is is

00:12:53,279 --> 00:13:01,600
um she solves her problems

00:12:56,800 --> 00:13:05,120
of a very bureaucratic rigid

00:13:01,600 --> 00:13:05,680
and and slow organization for her needs

00:13:05,120 --> 00:13:09,120
her

00:13:05,680 --> 00:13:12,240
developer needs again by adopting

00:13:09,120 --> 00:13:14,320
devops so it's um it's the same

00:13:12,240 --> 00:13:16,560
win is the same companies the same

00:13:14,320 --> 00:13:17,440
problems it's the same solution in the

00:13:16,560 --> 00:13:19,920
end of the day

00:13:17,440 --> 00:13:20,880
but it came to be from a developer

00:13:19,920 --> 00:13:23,600
perspective

00:13:20,880 --> 00:13:25,360
and i think this is the ultimate answer

00:13:23,600 --> 00:13:27,680
to the question that i

00:13:25,360 --> 00:13:29,680
asked in the previous slide why the

00:13:27,680 --> 00:13:32,560
developers care about devops

00:13:29,680 --> 00:13:33,440
yes they didn't have to care in the

00:13:32,560 --> 00:13:35,680
beginning

00:13:33,440 --> 00:13:37,279
it was ops people solving their own

00:13:35,680 --> 00:13:40,560
problems but this is

00:13:37,279 --> 00:13:42,000
not true anymore nowadays the problems

00:13:40,560 --> 00:13:44,800
of developers

00:13:42,000 --> 00:13:45,760
the autonomy the mastery the purpose of

00:13:44,800 --> 00:13:48,399
developers

00:13:45,760 --> 00:13:49,440
are also can be solved and can be

00:13:48,399 --> 00:13:53,839
elevated

00:13:49,440 --> 00:13:55,920
through devops yes we have to keep in

00:13:53,839 --> 00:13:59,120
mind what is the big picture

00:13:55,920 --> 00:14:02,240
in the software development cycle and

00:13:59,120 --> 00:14:04,399
of course we are one part we are

00:14:02,240 --> 00:14:06,800
i will argue the most important part but

00:14:04,399 --> 00:14:09,920
that's me uh but we're a part of

00:14:06,800 --> 00:14:10,560
of this whole process and even if we

00:14:09,920 --> 00:14:13,199
speak

00:14:10,560 --> 00:14:15,040
different languages we express our

00:14:13,199 --> 00:14:18,720
concerns in different ways

00:14:15,040 --> 00:14:19,600
we still have like main things we have

00:14:18,720 --> 00:14:21,839
to follow

00:14:19,600 --> 00:14:23,839
and this is something that devops

00:14:21,839 --> 00:14:27,040
practices and actual practices

00:14:23,839 --> 00:14:29,360
are very focused on for example speed

00:14:27,040 --> 00:14:30,480
quality security having enough

00:14:29,360 --> 00:14:33,839
information

00:14:30,480 --> 00:14:36,959
feedback early feedback early failure

00:14:33,839 --> 00:14:38,399
whatever you need to go at the speed

00:14:36,959 --> 00:14:41,680
that you need to go

00:14:38,399 --> 00:14:45,040
if it's fast super fast

00:14:41,680 --> 00:14:48,480
it it all it all depends

00:14:45,040 --> 00:14:50,480
and also uh what do you use

00:14:48,480 --> 00:14:52,639
what metrics what are the benchmarks

00:14:50,480 --> 00:14:54,160
what are your requirements what are your

00:14:52,639 --> 00:14:57,360
service level

00:14:54,160 --> 00:14:58,000
requirements those are the informations

00:14:57,360 --> 00:15:00,720
that you

00:14:58,000 --> 00:15:02,079
need to pay attention when you are in

00:15:00,720 --> 00:15:05,120
any part of the

00:15:02,079 --> 00:15:08,079
software development cycle or process

00:15:05,120 --> 00:15:08,880
so these are still the commonalities

00:15:08,079 --> 00:15:12,240
between

00:15:08,880 --> 00:15:12,800
devops well between developers within

00:15:12,240 --> 00:15:17,040
ops

00:15:12,800 --> 00:15:18,880
between management so it's important

00:15:17,040 --> 00:15:22,320
and it's very useful at the end of the

00:15:18,880 --> 00:15:22,320
day absolutely

00:15:22,480 --> 00:15:26,000
and now let's talk about the development

00:15:25,040 --> 00:15:29,279
cycle

00:15:26,000 --> 00:15:32,560
and the development cycle changed um

00:15:29,279 --> 00:15:34,399
in the last years you remember how it

00:15:32,560 --> 00:15:36,399
always being a three-step diagram

00:15:34,399 --> 00:15:37,199
because everything in it is three-step

00:15:36,399 --> 00:15:40,240
diagram

00:15:37,199 --> 00:15:43,600
but those three tabs were different

00:15:40,240 --> 00:15:46,880
the three steps that we kind of were

00:15:43,600 --> 00:15:50,240
were used to is a

00:15:46,880 --> 00:15:50,959
write code build code and then deploy

00:15:50,240 --> 00:15:54,560
code

00:15:50,959 --> 00:15:57,040
that was the three steps and today

00:15:54,560 --> 00:15:58,800
we still have three steps but they are

00:15:57,040 --> 00:15:59,759
different steps and this is what you see

00:15:58,800 --> 00:16:03,600
in the screen

00:15:59,759 --> 00:16:06,880
the sourcing part of finding

00:16:03,600 --> 00:16:08,000
the the building blocks that you are

00:16:06,880 --> 00:16:11,839
going to integrate

00:16:08,000 --> 00:16:15,040
in your application is not a new concept

00:16:11,839 --> 00:16:18,880
but it matured to be a very

00:16:15,040 --> 00:16:19,839
important part of our development life

00:16:18,880 --> 00:16:23,199
cycle

00:16:19,839 --> 00:16:26,560
and why is that because nowadays

00:16:23,199 --> 00:16:29,600
80 to 90 percent of our application

00:16:26,560 --> 00:16:31,920
is a taking someone else's code

00:16:29,600 --> 00:16:32,959
uh is that the open source frameworks

00:16:31,920 --> 00:16:35,600
the open source

00:16:32,959 --> 00:16:36,160
libraries that we use and most of our

00:16:35,600 --> 00:16:38,000
code

00:16:36,160 --> 00:16:39,279
is just glue around it it's just in the

00:16:38,000 --> 00:16:42,399
integration code

00:16:39,279 --> 00:16:45,920
between those different libraries so

00:16:42,399 --> 00:16:46,800
the process of sourcing and by sourcing

00:16:45,920 --> 00:16:50,240
i mean

00:16:46,800 --> 00:16:52,880
finding validating bringing physically

00:16:50,240 --> 00:16:53,440
the code to where we can use it and then

00:16:52,880 --> 00:16:55,680
caching

00:16:53,440 --> 00:16:56,480
it so it will stay forever and won't

00:16:55,680 --> 00:17:00,560
disappear

00:16:56,480 --> 00:17:03,600
under our figures this is something that

00:17:00,560 --> 00:17:04,319
is critical because 80 to 90 of our

00:17:03,600 --> 00:17:07,839
application

00:17:04,319 --> 00:17:08,799
will be this code so sourcing is a very

00:17:07,839 --> 00:17:11,360
big deal

00:17:08,799 --> 00:17:12,319
how do we find the libraries that we

00:17:11,360 --> 00:17:15,360
want to use

00:17:12,319 --> 00:17:18,559
how do we know that those libraries

00:17:15,360 --> 00:17:19,360
are good good in terms of they do what

00:17:18,559 --> 00:17:22,480
we need

00:17:19,360 --> 00:17:23,360
good in terms of their easy to use user

00:17:22,480 --> 00:17:26,319
experience

00:17:23,360 --> 00:17:27,839
good in terms of they don't have bugs

00:17:26,319 --> 00:17:30,960
they don't have security

00:17:27,839 --> 00:17:34,320
um venerabilities and good in terms

00:17:30,960 --> 00:17:35,120
we can actually go ahead and use it how

00:17:34,320 --> 00:17:38,240
can we

00:17:35,120 --> 00:17:40,720
validate all those things so

00:17:38,240 --> 00:17:42,160
how do we know if the user experience is

00:17:40,720 --> 00:17:45,760
good we need to ask

00:17:42,160 --> 00:17:48,880
our peers and here is where the problem

00:17:45,760 --> 00:17:49,440
of you know we never considered it this

00:17:48,880 --> 00:17:52,000
way

00:17:49,440 --> 00:17:53,200
come and kind of bites us if you look at

00:17:52,000 --> 00:17:56,400
maven central

00:17:53,200 --> 00:17:59,360
as being the primary source for your

00:17:56,400 --> 00:18:00,880
dependencies in the java world you have

00:17:59,360 --> 00:18:03,120
no metadata

00:18:00,880 --> 00:18:04,640
that can help you make this decision

00:18:03,120 --> 00:18:07,360
it's a file server

00:18:04,640 --> 00:18:07,840
that you can grab the artifacts and use

00:18:07,360 --> 00:18:09,840
them

00:18:07,840 --> 00:18:11,280
you don't know anything about them you

00:18:09,840 --> 00:18:12,960
might write some you might

00:18:11,280 --> 00:18:14,480
read some blogs you might see some

00:18:12,960 --> 00:18:15,600
conference talks and then you might

00:18:14,480 --> 00:18:18,799
decide well

00:18:15,600 --> 00:18:21,520
i heard that i don't know j unit

00:18:18,799 --> 00:18:23,600
is is good let's use junit and then you

00:18:21,520 --> 00:18:27,600
go to maven central and fight genuine

00:18:23,600 --> 00:18:29,120
but the aspect of ratings of popularity

00:18:27,600 --> 00:18:31,760
of user experience

00:18:29,120 --> 00:18:32,480
is just not there we need to do our own

00:18:31,760 --> 00:18:36,240
research

00:18:32,480 --> 00:18:39,280
and this research can be long

00:18:36,240 --> 00:18:41,600
can be a time consuming and

00:18:39,280 --> 00:18:42,400
even can be wrong right not everything

00:18:41,600 --> 00:18:44,799
that has

00:18:42,400 --> 00:18:46,240
hype around it is necessarily good for

00:18:44,799 --> 00:18:49,120
you so what i'm saying

00:18:46,240 --> 00:18:50,240
is you need to invest your time you need

00:18:49,120 --> 00:18:52,720
to do your research

00:18:50,240 --> 00:18:53,840
you need to be able to smartly pick what

00:18:52,720 --> 00:18:55,760
your

00:18:53,840 --> 00:18:57,600
application is going to build on and

00:18:55,760 --> 00:18:59,280
this is where we talk about

00:18:57,600 --> 00:19:02,480
what's good for you in terms of

00:18:59,280 --> 00:19:05,919
usability and maybe even quality etc

00:19:02,480 --> 00:19:08,240
now the second problem is

00:19:05,919 --> 00:19:09,200
how do you validate that they don't have

00:19:08,240 --> 00:19:11,679
security

00:19:09,200 --> 00:19:13,039
abilities and this is where tools like

00:19:11,679 --> 00:19:16,160
jeffree x-ray

00:19:13,039 --> 00:19:17,039
and aqua and sneak and white source and

00:19:16,160 --> 00:19:20,240
black duck

00:19:17,039 --> 00:19:22,480
and there are tons of other tools

00:19:20,240 --> 00:19:23,520
that can help you validate those

00:19:22,480 --> 00:19:26,080
dependencies

00:19:23,520 --> 00:19:26,960
some of them are more rigid they won't

00:19:26,080 --> 00:19:30,160
let you

00:19:26,960 --> 00:19:32,960
get this dependency to even uh

00:19:30,160 --> 00:19:34,320
to your build system or to your artifact

00:19:32,960 --> 00:19:37,600
if they have they have

00:19:34,320 --> 00:19:40,000
um if they think uh

00:19:37,600 --> 00:19:41,120
this library have a venue ability some

00:19:40,000 --> 00:19:43,200
is more relaxed

00:19:41,120 --> 00:19:44,240
they will let you play with it and then

00:19:43,200 --> 00:19:46,080
fail in

00:19:44,240 --> 00:19:47,600
in the build time but in the end of the

00:19:46,080 --> 00:19:51,360
day automating

00:19:47,600 --> 00:19:54,640
this security concern is very important

00:19:51,360 --> 00:19:58,400
another concern is license compliance

00:19:54,640 --> 00:20:01,440
is this library even allowed to be used

00:19:58,400 --> 00:20:04,159
in your organization maybe it has a

00:20:01,440 --> 00:20:06,400
viral open source license and it means

00:20:04,159 --> 00:20:09,440
that if you are going to use it then

00:20:06,400 --> 00:20:10,240
legally you have to open source all your

00:20:09,440 --> 00:20:12,400
development

00:20:10,240 --> 00:20:14,000
sometimes it's acceptable but most of

00:20:12,400 --> 00:20:16,080
the time it's not because

00:20:14,000 --> 00:20:17,679
you probably work chances are you work

00:20:16,080 --> 00:20:19,280
in for-profit organization

00:20:17,679 --> 00:20:21,520
that wants to make money from the

00:20:19,280 --> 00:20:23,280
software and it means that it has to be

00:20:21,520 --> 00:20:24,880
not free and not open source right

00:20:23,280 --> 00:20:27,840
that's like the

00:20:24,880 --> 00:20:29,600
default use case if you wish so all

00:20:27,840 --> 00:20:32,080
those questions they're there

00:20:29,600 --> 00:20:34,080
in the sourcing and doing your research

00:20:32,080 --> 00:20:35,360
for what you cannot automate and

00:20:34,080 --> 00:20:38,400
automating what you can

00:20:35,360 --> 00:20:40,480
is critical now the second step is

00:20:38,400 --> 00:20:41,760
the most if you wish to reveal one this

00:20:40,480 --> 00:20:45,039
is what we do for years

00:20:41,760 --> 00:20:48,000
we write code we build we test

00:20:45,039 --> 00:20:50,000
we validate our code this is all we know

00:20:48,000 --> 00:20:53,120
how to do we use our build tools

00:20:50,000 --> 00:20:54,799
maven gradle bazel whatever you use

00:20:53,120 --> 00:20:57,200
and then you just compile the chord you

00:20:54,799 --> 00:20:59,679
get gyros you

00:20:57,200 --> 00:21:01,039
start promoting them through quality

00:20:59,679 --> 00:21:02,640
gates in our pipelines we're going to

00:21:01,039 --> 00:21:05,760
talk about that in a second

00:21:02,640 --> 00:21:06,960
um and and then you're done right you

00:21:05,760 --> 00:21:10,320
have your artifacts

00:21:06,960 --> 00:21:13,840
ready to be distributed or ready to get

00:21:10,320 --> 00:21:17,120
to your users and then when the third

00:21:13,840 --> 00:21:19,520
kind of uh the third part of your

00:21:17,120 --> 00:21:20,720
um three steps diagram kicking and

00:21:19,520 --> 00:21:23,760
that's the distribute

00:21:20,720 --> 00:21:26,000
what does it mean well distributing is

00:21:23,760 --> 00:21:26,960
bringing it to the runtime what is the

00:21:26,000 --> 00:21:30,080
runtime

00:21:26,960 --> 00:21:30,799
everything right so back in the day of

00:21:30,080 --> 00:21:33,360
like pure

00:21:30,799 --> 00:21:34,640
java development in distribution it was

00:21:33,360 --> 00:21:36,559
you build a war file

00:21:34,640 --> 00:21:37,919
and you put it in your tomcat or your

00:21:36,559 --> 00:21:40,240
other ceremony container

00:21:37,919 --> 00:21:42,480
or you build your application archive

00:21:40,240 --> 00:21:45,520
and then you put it in uh

00:21:42,480 --> 00:21:46,240
what was it a web uh websphere got for

00:21:45,520 --> 00:21:48,559
bid or

00:21:46,240 --> 00:21:49,760
or web logic or or or whatever it is

00:21:48,559 --> 00:21:52,480
right and

00:21:49,760 --> 00:21:54,400
but those those days well those

00:21:52,480 --> 00:21:56,400
scenarios are still out there

00:21:54,400 --> 00:21:58,000
but there are other scenarios that

00:21:56,400 --> 00:22:00,000
there's r that are reason

00:21:58,000 --> 00:22:01,760
obviously here at kubecon we are going

00:22:00,000 --> 00:22:02,400
to talk about and we are going to show

00:22:01,760 --> 00:22:05,120
you

00:22:02,400 --> 00:22:05,840
how you distribute to your kubernetes

00:22:05,120 --> 00:22:08,159
cluster

00:22:05,840 --> 00:22:10,400
and this is kind of the cloud native use

00:22:08,159 --> 00:22:13,440
case but there are others as well

00:22:10,400 --> 00:22:17,039
how about edge computing how about

00:22:13,440 --> 00:22:20,159
iot how about for computing

00:22:17,039 --> 00:22:20,799
or even other people's computers you

00:22:20,159 --> 00:22:24,240
have now

00:22:20,799 --> 00:22:26,640
a distributable application a minecraft

00:22:24,240 --> 00:22:30,080
that people download and play

00:22:26,640 --> 00:22:33,280
this distribution scenario is also as

00:22:30,080 --> 00:22:35,280
as distribution scenarios as as others

00:22:33,280 --> 00:22:36,640
so you need to think about that and then

00:22:35,280 --> 00:22:38,960
you need to pick tools

00:22:36,640 --> 00:22:40,240
that are right for distributing for what

00:22:38,960 --> 00:22:42,960
you want to distribute

00:22:40,240 --> 00:22:44,799
in our case again it will be just

00:22:42,960 --> 00:22:47,280
distributing to your

00:22:44,799 --> 00:22:49,440
um to your kubernetes cluster and we are

00:22:47,280 --> 00:22:51,440
going to talk about that

00:22:49,440 --> 00:22:53,280
yes i i just wanted to mention baroque

00:22:51,440 --> 00:22:55,200
you are totally a writer that's

00:22:53,280 --> 00:22:57,200
one of the things that are very

00:22:55,200 --> 00:22:58,240
effective of devops and the practices

00:22:57,200 --> 00:23:02,159
and agile

00:22:58,240 --> 00:23:05,360
that now our code bases have exploded

00:23:02,159 --> 00:23:07,120
our deliveries are also

00:23:05,360 --> 00:23:08,960
exploded because we have a more

00:23:07,120 --> 00:23:11,440
fragmented market

00:23:08,960 --> 00:23:12,080
uh it's very typical for me to go to a

00:23:11,440 --> 00:23:15,360
client

00:23:12,080 --> 00:23:18,080
and suddenly they ask you to deliver

00:23:15,360 --> 00:23:19,039
uh in different flavors the software

00:23:18,080 --> 00:23:20,640
that you are

00:23:19,039 --> 00:23:22,080
preparing and with different

00:23:20,640 --> 00:23:26,159
requirements so

00:23:22,080 --> 00:23:28,320
now you have literally a combination

00:23:26,159 --> 00:23:30,000
matrix of things that you have to

00:23:28,320 --> 00:23:33,679
prepare configure

00:23:30,000 --> 00:23:37,200
test and promote in different ways

00:23:33,679 --> 00:23:37,520
so it's this practices are really going

00:23:37,200 --> 00:23:40,799
to

00:23:37,520 --> 00:23:42,000
help us do a better job so it's

00:23:40,799 --> 00:23:44,880
important

00:23:42,000 --> 00:23:46,080
of course okay and i'm going to i'm

00:23:44,880 --> 00:23:48,960
going to dig in a little bit more

00:23:46,080 --> 00:23:50,400
on one of these practices which is um

00:23:48,960 --> 00:23:52,480
how you

00:23:50,400 --> 00:23:54,400
manage your code that you're doing for

00:23:52,480 --> 00:23:56,880
developing and i

00:23:54,400 --> 00:23:58,000
kind of looking at the the history of

00:23:56,880 --> 00:23:59,440
software development

00:23:58,000 --> 00:24:01,120
there have been a bunch of different

00:23:59,440 --> 00:24:01,600
approaches to this problem and just just

00:24:01,120 --> 00:24:03,440
a quick

00:24:01,600 --> 00:24:04,880
call from you know of course our

00:24:03,440 --> 00:24:05,520
audience we'd love to hear from you as

00:24:04,880 --> 00:24:08,000
well as the

00:24:05,520 --> 00:24:12,080
the other speakers here so what what was

00:24:08,000 --> 00:24:12,080
your first version control system

00:24:14,960 --> 00:24:19,200
how about you exhale you wanna go first

00:24:17,679 --> 00:24:23,520
i'm very lucky i've

00:24:19,200 --> 00:24:25,520
started with mercurial so yay

00:24:23,520 --> 00:24:26,720
okay that's that's yeah so that's a very

00:24:25,520 --> 00:24:29,520
modern

00:24:26,720 --> 00:24:30,240
vertical trial system buruk uh yeah no

00:24:29,520 --> 00:24:32,720
i'm

00:24:30,240 --> 00:24:33,919
obviously older maybe not as old as you

00:24:32,720 --> 00:24:37,279
but pretty old

00:24:33,919 --> 00:24:40,240
um i started with cvs and clearcase

00:24:37,279 --> 00:24:40,559
or should i mention in the terms of your

00:24:40,240 --> 00:24:43,440
uh

00:24:40,559 --> 00:24:44,880
progression here from apes to people

00:24:43,440 --> 00:24:47,919
from clearcase

00:24:44,880 --> 00:24:48,960
first clear case and then cvs yeah

00:24:47,919 --> 00:24:53,120
clearcase would be the

00:24:48,960 --> 00:24:55,919
the appear melissa how about you

00:24:53,120 --> 00:24:57,360
mercurial and then svn primarily is what

00:24:55,919 --> 00:25:00,960
i started with

00:24:57,360 --> 00:25:04,080
okay so so um mercurial and

00:25:00,960 --> 00:25:05,200
um and git which i think what a lot of

00:25:04,080 --> 00:25:07,039
people are using today are actually

00:25:05,200 --> 00:25:08,640
considered the most modern version

00:25:07,039 --> 00:25:11,520
control systems but

00:25:08,640 --> 00:25:13,360
if you go back in history um what we

00:25:11,520 --> 00:25:16,559
started with were systems like

00:25:13,360 --> 00:25:18,240
sccs rcs um

00:25:16,559 --> 00:25:20,000
clear case falls in this category two

00:25:18,240 --> 00:25:23,039
commercial systems tend to lag

00:25:20,000 --> 00:25:25,679
behind um open source solutions

00:25:23,039 --> 00:25:28,720
and they were they were locking version

00:25:25,679 --> 00:25:30,640
control systems where you you'd actually

00:25:28,720 --> 00:25:32,320
lock the files you'd say this i'm

00:25:30,640 --> 00:25:33,679
working on this file nobody else can

00:25:32,320 --> 00:25:35,360
touch it

00:25:33,679 --> 00:25:37,039
you would lock the file and then you'd

00:25:35,360 --> 00:25:38,640
make your changes and then you release

00:25:37,039 --> 00:25:40,159
the file when you're done making changes

00:25:38,640 --> 00:25:43,840
and of course this is this is perfect

00:25:40,159 --> 00:25:43,840
because you don't have any conflicts

00:25:44,640 --> 00:25:48,480
now now cvs and subversion of course

00:25:46,799 --> 00:25:49,840
this doesn't work for large teams if you

00:25:48,480 --> 00:25:51,840
had a refactoring and you changed

00:25:49,840 --> 00:25:53,760
something across the entire code base

00:25:51,840 --> 00:25:54,960
like a package or something that is in

00:25:53,760 --> 00:25:57,279
every file

00:25:54,960 --> 00:25:59,120
you would you would lock the entire code

00:25:57,279 --> 00:26:01,279
base and nobody else will get any work

00:25:59,120 --> 00:26:03,120
done so cvs and subversion fix this with

00:26:01,279 --> 00:26:04,640
optimistic locking

00:26:03,120 --> 00:26:07,039
which essentially means that you let

00:26:04,640 --> 00:26:08,640
everybody change the files whenever you

00:26:07,039 --> 00:26:10,640
want to

00:26:08,640 --> 00:26:12,320
and if it turns out that two people

00:26:10,640 --> 00:26:14,720
change the same file you go back and you

00:26:12,320 --> 00:26:15,919
resolve a merge conflict you you you try

00:26:14,720 --> 00:26:17,520
to merge and and

00:26:15,919 --> 00:26:20,000
hopefully you can automatically resolve

00:26:17,520 --> 00:26:21,520
the changes um sometimes you can't

00:26:20,000 --> 00:26:22,400
automatically resolve changes and you

00:26:21,520 --> 00:26:25,039
have to to

00:26:22,400 --> 00:26:26,559
manually resolve a merge conflict and

00:26:25,039 --> 00:26:28,559
this takes us to the the third

00:26:26,559 --> 00:26:30,480
generation of version control systems so

00:26:28,559 --> 00:26:32,960
cvs and subversion you were always

00:26:30,480 --> 00:26:35,440
thinking with a server

00:26:32,960 --> 00:26:37,600
and getting mercurial introduced a

00:26:35,440 --> 00:26:39,600
distributed concept where now

00:26:37,600 --> 00:26:41,520
you're syncing with the local repository

00:26:39,600 --> 00:26:43,200
you have your own version of the entire

00:26:41,520 --> 00:26:46,400
repository

00:26:43,200 --> 00:26:49,279
locally um actually so

00:26:46,400 --> 00:26:51,039
kind of kind of ironically this is this

00:26:49,279 --> 00:26:53,600
this takes us back to the early version

00:26:51,039 --> 00:26:55,360
control system so so rcs and cvs were

00:26:53,600 --> 00:26:56,000
actually initially designed just to be

00:26:55,360 --> 00:26:59,039
used on

00:26:56,000 --> 00:27:01,760
mainframes and so they also technically

00:26:59,039 --> 00:27:02,159
considered the repository to be local

00:27:01,760 --> 00:27:03,840
but

00:27:02,159 --> 00:27:05,679
what they were missing and and what of

00:27:03,840 --> 00:27:07,360
course server-faced version control

00:27:05,679 --> 00:27:10,240
systems are missing is they they're

00:27:07,360 --> 00:27:12,400
missing the capability to sync your

00:27:10,240 --> 00:27:13,919
repository with other repositories so

00:27:12,400 --> 00:27:15,919
distributed version control systems let

00:27:13,919 --> 00:27:17,760
you take your repository and do pull and

00:27:15,919 --> 00:27:19,200
push requests against other repos either

00:27:17,760 --> 00:27:22,720
pure repos

00:27:19,200 --> 00:27:24,799
or essential repo and give you a lot

00:27:22,720 --> 00:27:27,440
more control and flexibility

00:27:24,799 --> 00:27:29,200
and scalability on your version control

00:27:27,440 --> 00:27:30,720
system

00:27:29,200 --> 00:27:32,320
and if we look at the current trends in

00:27:30,720 --> 00:27:34,320
this

00:27:32,320 --> 00:27:35,760
of course git has taken over the

00:27:34,320 --> 00:27:36,880
industry and it's become the de facto

00:27:35,760 --> 00:27:39,360
standard

00:27:36,880 --> 00:27:40,640
um it's very fast it's very efficient it

00:27:39,360 --> 00:27:42,399
does a great job of merging and

00:27:40,640 --> 00:27:44,880
resolving conflicts

00:27:42,399 --> 00:27:46,000
and it's basically pushed other systems

00:27:44,880 --> 00:27:49,200
like um

00:27:46,000 --> 00:27:52,159
you know cvs uh mercurial and

00:27:49,200 --> 00:27:54,240
even subversion to to be of very low

00:27:52,159 --> 00:27:56,320
usage now in in the industry some folks

00:27:54,240 --> 00:27:59,120
are still using subversion

00:27:56,320 --> 00:28:01,520
um for commercial purposes but i think

00:27:59,120 --> 00:28:03,200
most of us have moved on and moved to

00:28:01,520 --> 00:28:05,360
to get and accepted that distributed

00:28:03,200 --> 00:28:07,600
version control systems are the

00:28:05,360 --> 00:28:09,279
the path forward and when you when you

00:28:07,600 --> 00:28:11,120
look at how distributed version control

00:28:09,279 --> 00:28:13,039
systems work

00:28:11,120 --> 00:28:14,559
you have your own working copy of the

00:28:13,039 --> 00:28:15,440
code which you're committing and

00:28:14,559 --> 00:28:18,159
updating

00:28:15,440 --> 00:28:20,640
to a local repository so all that exists

00:28:18,159 --> 00:28:23,279
on your your machine

00:28:20,640 --> 00:28:24,640
and then when you're ready to um to push

00:28:23,279 --> 00:28:26,480
your code

00:28:24,640 --> 00:28:27,840
then you push this to the remote

00:28:26,480 --> 00:28:29,679
repository

00:28:27,840 --> 00:28:31,279
so you'll actually sync your code with

00:28:29,679 --> 00:28:32,720
essential repository and other people

00:28:31,279 --> 00:28:34,159
will pull and push from that central

00:28:32,720 --> 00:28:36,720
repository

00:28:34,159 --> 00:28:37,279
and a lot of modern workflows like

00:28:36,720 --> 00:28:38,880
github

00:28:37,279 --> 00:28:40,799
further introduce the concept of pull

00:28:38,880 --> 00:28:43,360
requests where you ask

00:28:40,799 --> 00:28:45,919
people to accept your change and then

00:28:43,360 --> 00:28:47,279
they'll pull from your repository

00:28:45,919 --> 00:28:49,600
to integrate the changes which you've

00:28:47,279 --> 00:28:51,360
made which actually makes it safer for

00:28:49,600 --> 00:28:53,360
for merging and code control because you

00:28:51,360 --> 00:28:55,679
don't have random people

00:28:53,360 --> 00:28:57,600
um pushing changes which break the build

00:28:55,679 --> 00:29:00,080
and then we we all get

00:28:57,600 --> 00:29:01,919
well this is favorite analogy a a um a

00:29:00,080 --> 00:29:05,039
donut day

00:29:01,919 --> 00:29:06,480
when the build breaks or um

00:29:05,039 --> 00:29:07,600
there's various other ways of shaming

00:29:06,480 --> 00:29:09,440
people as well but i think i think

00:29:07,600 --> 00:29:12,960
rewards are better than shaming

00:29:09,440 --> 00:29:14,480
so donuts are a nice reward

00:29:12,960 --> 00:29:16,320
so distributed version control systems

00:29:14,480 --> 00:29:17,679
make this much easier workflow wise to

00:29:16,320 --> 00:29:20,399
avoid having

00:29:17,679 --> 00:29:22,480
your entire build impacted by this and i

00:29:20,399 --> 00:29:24,880
i think the de facto standard for

00:29:22,480 --> 00:29:26,640
distributed version control systems has

00:29:24,880 --> 00:29:30,240
become

00:29:26,640 --> 00:29:33,279
systems like like git and specifically

00:29:30,240 --> 00:29:35,679
cloud systems like github so in the

00:29:33,279 --> 00:29:39,200
stack overflow survey

00:29:35,679 --> 00:29:42,399
github was the highest used tool

00:29:39,200 --> 00:29:44,080
by developers across the board um he

00:29:42,399 --> 00:29:46,559
flipped the next slide melissa

00:29:44,080 --> 00:29:48,720
the um of course you know we are using

00:29:46,559 --> 00:29:51,200
slack and jiren other tools but

00:29:48,720 --> 00:29:53,039
github is used by over 80 of the

00:29:51,200 --> 00:29:54,799
developers

00:29:53,039 --> 00:29:56,480
and then there's a bunch of other tools

00:29:54,799 --> 00:29:56,880
going down the list which other folks

00:29:56,480 --> 00:29:59,679
use

00:29:56,880 --> 00:30:00,080
but um i think that when you're looking

00:29:59,679 --> 00:30:02,799
at

00:30:00,080 --> 00:30:04,559
how you can manage your source control

00:30:02,799 --> 00:30:07,840
work with large teams and

00:30:04,559 --> 00:30:10,159
efficiently create the source code

00:30:07,840 --> 00:30:13,200
pipeline to deploy to production

00:30:10,159 --> 00:30:15,440
it it makes sense to start with a solid

00:30:13,200 --> 00:30:18,080
foundation with a distributed version

00:30:15,440 --> 00:30:20,840
control system that um

00:30:18,080 --> 00:30:23,840
kind of underlies your entire um devops

00:30:20,840 --> 00:30:23,840
pipeline

00:30:25,200 --> 00:30:31,520
so now after we spoke about sources

00:30:28,480 --> 00:30:34,720
let's see how we move past sources

00:30:31,520 --> 00:30:36,799
and as a i mentioned previously

00:30:34,720 --> 00:30:37,840
this part we know really well right we

00:30:36,799 --> 00:30:40,159
take sources

00:30:37,840 --> 00:30:40,960
from our version control and then we

00:30:40,159 --> 00:30:44,000
build them

00:30:40,960 --> 00:30:46,080
and we convert them to binaries now what

00:30:44,000 --> 00:30:47,440
are those binaries well depending on the

00:30:46,080 --> 00:30:48,880
on your stack depending on the

00:30:47,440 --> 00:30:52,640
programming language that you use

00:30:48,880 --> 00:30:55,120
with java we obviously compile our

00:30:52,640 --> 00:30:56,720
java sources to the class files and then

00:30:55,120 --> 00:30:59,440
pack them into those

00:30:56,720 --> 00:31:00,720
jar archives and then alternatively or

00:30:59,440 --> 00:31:04,399
on top of that the wire file

00:31:00,720 --> 00:31:08,159
the war files were the ar arr

00:31:04,399 --> 00:31:11,519
archives whatever in different different

00:31:08,159 --> 00:31:14,720
other languages it might be compiled two

00:31:11,519 --> 00:31:15,120
different uh files or not compiled at

00:31:14,720 --> 00:31:17,840
all

00:31:15,120 --> 00:31:19,440
but in the end of the day we will pack

00:31:17,840 --> 00:31:23,200
whatever those files

00:31:19,440 --> 00:31:26,000
into some kind of archive it will be an

00:31:23,200 --> 00:31:26,960
archive or of our javascript files or

00:31:26,000 --> 00:31:30,640
archive or

00:31:26,960 --> 00:31:33,760
pythons or python um

00:31:30,640 --> 00:31:36,799
files but in the end of the day the ci

00:31:33,760 --> 00:31:40,000
server takes sources and

00:31:36,799 --> 00:31:40,799
omits binaries and once it emits

00:31:40,000 --> 00:31:44,159
binaries

00:31:40,799 --> 00:31:47,600
those binaries go to a binary uh

00:31:44,159 --> 00:31:50,640
to artifact repository and

00:31:47,600 --> 00:31:52,720
obviously majority of us here

00:31:50,640 --> 00:31:54,559
work for jeffrog so we would recommend

00:31:52,720 --> 00:31:56,320
jfrogartifact repository that you

00:31:54,559 --> 00:31:59,039
probably heard about artifactory

00:31:56,320 --> 00:32:01,440
but there are others that are definitely

00:31:59,039 --> 00:32:03,200
worth your you you checking them out

00:32:01,440 --> 00:32:04,480
and for the matter of our story it

00:32:03,200 --> 00:32:06,720
doesn't really matter

00:32:04,480 --> 00:32:08,399
what matters is that you have your

00:32:06,720 --> 00:32:11,679
artifact repository

00:32:08,399 --> 00:32:13,600
which is the where your pipeline

00:32:11,679 --> 00:32:15,519
actually happens and this is where the

00:32:13,600 --> 00:32:17,679
pipeline kicks in

00:32:15,519 --> 00:32:19,360
what the pipeline actually means that

00:32:17,679 --> 00:32:21,039
you take the artifacts that you have

00:32:19,360 --> 00:32:24,960
your artifact repository

00:32:21,039 --> 00:32:28,640
you deploy them to the right environment

00:32:24,960 --> 00:32:30,000
for a certain maturity level for example

00:32:28,640 --> 00:32:33,279
in step number one

00:32:30,000 --> 00:32:35,919
you will deploy your integration

00:32:33,279 --> 00:32:36,720
level artifact to your integration

00:32:35,919 --> 00:32:38,159
cluster

00:32:36,720 --> 00:32:40,159
and you will pack them obviously in

00:32:38,159 --> 00:32:42,399
docker container also in ci server

00:32:40,159 --> 00:32:43,440
and this is you you will you will deploy

00:32:42,399 --> 00:32:45,360
the container

00:32:43,440 --> 00:32:47,279
to your integration kubernetes

00:32:45,360 --> 00:32:48,880
environment this is where you do your

00:32:47,279 --> 00:32:51,760
integration testing

00:32:48,880 --> 00:32:52,399
and if the quality requirements are hit

00:32:51,760 --> 00:32:55,600
if you are

00:32:52,399 --> 00:32:56,640
satisfied with the quality of your

00:32:55,600 --> 00:33:00,080
artifacts

00:32:56,640 --> 00:33:03,440
you promote them through quality gates

00:33:00,080 --> 00:33:05,919
to another level to another

00:33:03,440 --> 00:33:07,840
staging area and what does it mean

00:33:05,919 --> 00:33:10,000
promote through quality gates

00:33:07,840 --> 00:33:11,120
in this more simplistic way you will

00:33:10,000 --> 00:33:14,320
just move them

00:33:11,120 --> 00:33:16,720
from one repository in your artifact um

00:33:14,320 --> 00:33:17,679
repository manager to the next

00:33:16,720 --> 00:33:20,640
repository

00:33:17,679 --> 00:33:22,399
you'll have repository for integration

00:33:20,640 --> 00:33:23,200
for system testing for staging for

00:33:22,399 --> 00:33:26,320
production

00:33:23,200 --> 00:33:29,200
and your movement through quality gates

00:33:26,320 --> 00:33:29,679
will be promotion of those artifacts

00:33:29,200 --> 00:33:32,720
from

00:33:29,679 --> 00:33:33,679
one repository to another in next

00:33:32,720 --> 00:33:35,760
repository

00:33:33,679 --> 00:33:37,679
now we promote it from integration

00:33:35,760 --> 00:33:41,760
repository to system testing

00:33:37,679 --> 00:33:44,320
we again deploy those artifacts

00:33:41,760 --> 00:33:45,679
to a system testing cluster kubernetes

00:33:44,320 --> 00:33:48,159
cluster in our example

00:33:45,679 --> 00:33:48,960
in system testing kubernetes cluster we

00:33:48,159 --> 00:33:52,000
start doing

00:33:48,960 --> 00:33:53,120
our tests again other tests now it will

00:33:52,000 --> 00:33:56,799
be system testing

00:33:53,120 --> 00:33:58,880
but also can be security performance um

00:33:56,799 --> 00:34:01,760
any anything that you care about in

00:33:58,880 --> 00:34:04,240
terms of what you can automatically test

00:34:01,760 --> 00:34:04,799
and again if the if the tests are

00:34:04,240 --> 00:34:07,600
failing

00:34:04,799 --> 00:34:09,520
well you just discard those artifacts

00:34:07,600 --> 00:34:11,919
but if the tests are successful

00:34:09,520 --> 00:34:13,280
and the quality requirements are met you

00:34:11,919 --> 00:34:16,000
are going to promote it

00:34:13,280 --> 00:34:16,560
further to staging and in the end of the

00:34:16,000 --> 00:34:19,599
day

00:34:16,560 --> 00:34:22,639
to production so our pipeline is

00:34:19,599 --> 00:34:23,919
you build the artifacts you build jar

00:34:22,639 --> 00:34:27,200
files from java

00:34:23,919 --> 00:34:30,639
and then you build docker docker image

00:34:27,200 --> 00:34:32,720
from those java archives and then

00:34:30,639 --> 00:34:33,679
once you have this image once you have

00:34:32,720 --> 00:34:35,919
the artifact

00:34:33,679 --> 00:34:37,119
you go ahead and you promote promote

00:34:35,919 --> 00:34:40,560
promote promote

00:34:37,119 --> 00:34:40,560
through the pipeline

00:34:43,520 --> 00:34:47,919
so just to reiterate some of the points

00:34:45,760 --> 00:34:49,359
that baruch has made about sources i

00:34:47,919 --> 00:34:51,520
want to drill down into

00:34:49,359 --> 00:34:53,440
what actually happens at the very

00:34:51,520 --> 00:34:54,560
beginning which is the building of

00:34:53,440 --> 00:34:58,240
everything

00:34:54,560 --> 00:34:59,760
um they're not there may not be many

00:34:58,240 --> 00:35:00,560
times in your career that you're

00:34:59,760 --> 00:35:03,359
involved in

00:35:00,560 --> 00:35:05,040
a greenfield project where you can start

00:35:03,359 --> 00:35:06,720
from scratch and you know where

00:35:05,040 --> 00:35:08,400
everything is coming from and you know

00:35:06,720 --> 00:35:10,000
how everything is built and how

00:35:08,400 --> 00:35:12,400
everything is put together

00:35:10,000 --> 00:35:14,079
in fact most of the time of my career

00:35:12,400 --> 00:35:17,440
personally has been

00:35:14,079 --> 00:35:19,440
on already established software teams um

00:35:17,440 --> 00:35:21,280
and my responsibilities were you know

00:35:19,440 --> 00:35:22,960
were around maintenance of an existing

00:35:21,280 --> 00:35:25,359
product or service out there

00:35:22,960 --> 00:35:27,359
there was an existing code base um i may

00:35:25,359 --> 00:35:28,800
be responsible for fixing bugs that kind

00:35:27,359 --> 00:35:32,000
of stuff

00:35:28,800 --> 00:35:34,560
um given that it's so super

00:35:32,000 --> 00:35:35,920
important when you're in that situation

00:35:34,560 --> 00:35:38,640
you've just joined a team

00:35:35,920 --> 00:35:39,440
part of your ramping up process know

00:35:38,640 --> 00:35:41,359
your build

00:35:39,440 --> 00:35:42,560
get to know your build get to know the

00:35:41,359 --> 00:35:44,400
ins and outs of it

00:35:42,560 --> 00:35:46,320
you'll be able to work better and more

00:35:44,400 --> 00:35:47,359
efficiently if you know where everything

00:35:46,320 --> 00:35:49,680
is coming from and

00:35:47,359 --> 00:35:51,680
how everything fits together one

00:35:49,680 --> 00:35:53,760
specific story i have for that

00:35:51,680 --> 00:35:54,800
early on in my career i joined a

00:35:53,760 --> 00:35:56,720
software team and

00:35:54,800 --> 00:35:58,640
it happened to be a project that was

00:35:56,720 --> 00:36:00,320
pretty large there were multiple java

00:35:58,640 --> 00:36:03,839
modules all over the place

00:36:00,320 --> 00:36:07,920
um at the time i was using eclipse

00:36:03,839 --> 00:36:09,200
and in my in my ide and i had everything

00:36:07,920 --> 00:36:11,040
you know pulled in

00:36:09,200 --> 00:36:13,440
and i was really excited to work on this

00:36:11,040 --> 00:36:16,720
i i was pointed to a particular module

00:36:13,440 --> 00:36:20,240
a particular bug that i i needed to fix

00:36:16,720 --> 00:36:21,280
so um i got the code up and every time i

00:36:20,240 --> 00:36:24,720
made a change

00:36:21,280 --> 00:36:28,560
i would turn around and run maven clean

00:36:24,720 --> 00:36:30,640
well after a while of doing that um

00:36:28,560 --> 00:36:32,560
very inefficient way to work because i

00:36:30,640 --> 00:36:33,839
didn't understand what was going on

00:36:32,560 --> 00:36:35,760
behind the scenes

00:36:33,839 --> 00:36:37,440
um at some point one of my colleagues

00:36:35,760 --> 00:36:38,320
came over and was kind of watching over

00:36:37,440 --> 00:36:41,359
my shoulder

00:36:38,320 --> 00:36:43,280
to answer some questions and um noticed

00:36:41,359 --> 00:36:45,440
that this is what i was doing and

00:36:43,280 --> 00:36:47,680
figured out immediately it was because i

00:36:45,440 --> 00:36:49,359
i had not taken that first step to

00:36:47,680 --> 00:36:50,320
really understand how this project was

00:36:49,359 --> 00:36:52,400
put together

00:36:50,320 --> 00:36:54,079
i didn't understand how my sources were

00:36:52,400 --> 00:36:56,480
coming in how they were being

00:36:54,079 --> 00:36:58,400
cashed how every time i did a maven

00:36:56,480 --> 00:36:59,119
clean i was actually blowing away my

00:36:58,400 --> 00:37:00,800
cash

00:36:59,119 --> 00:37:02,560
and just spending a lot of time

00:37:00,800 --> 00:37:04,240
repeating work that didn't need to be

00:37:02,560 --> 00:37:06,560
done

00:37:04,240 --> 00:37:08,800
come to find out you know once i learned

00:37:06,560 --> 00:37:11,280
how everything was put together

00:37:08,800 --> 00:37:13,359
i could focus on the module that i was

00:37:11,280 --> 00:37:15,359
working on and only you know build

00:37:13,359 --> 00:37:18,240
that module over and over again as i saw

00:37:15,359 --> 00:37:18,640
fit and i could save about 20 minutes of

00:37:18,240 --> 00:37:21,119
time

00:37:18,640 --> 00:37:22,079
every time i would build so this is

00:37:21,119 --> 00:37:25,119
something important

00:37:22,079 --> 00:37:26,160
to know and understand um even if you're

00:37:25,119 --> 00:37:27,920
an ops person

00:37:26,160 --> 00:37:29,920
that you they need to know this too

00:37:27,920 --> 00:37:32,240
because building your pipelines

00:37:29,920 --> 00:37:33,520
out you need to understand how long your

00:37:32,240 --> 00:37:36,560
builds are going to take

00:37:33,520 --> 00:37:38,640
if you repeat building pieces every time

00:37:36,560 --> 00:37:40,240
over and over through your software

00:37:38,640 --> 00:37:41,839
cycle through the pipeline it's going to

00:37:40,240 --> 00:37:43,680
take forever so

00:37:41,839 --> 00:37:45,680
there's a lot of efficiency improvements

00:37:43,680 --> 00:37:50,480
that can be made there

00:37:45,680 --> 00:37:53,839
the other part of this is um

00:37:50,480 --> 00:37:55,520
where are your sources coming from so

00:37:53,839 --> 00:37:57,839
now that we're in this new world where

00:37:55,520 --> 00:37:59,599
containers are really popular

00:37:57,839 --> 00:38:01,200
this is the thing to do you you build a

00:37:59,599 --> 00:38:03,599
docker file you put in

00:38:01,200 --> 00:38:04,320
you pull in a base image you write some

00:38:03,599 --> 00:38:06,320
stuff

00:38:04,320 --> 00:38:08,560
you you know put everything together and

00:38:06,320 --> 00:38:10,720
now you have this image that you can

00:38:08,560 --> 00:38:11,680
send out there and provide as a service

00:38:10,720 --> 00:38:14,640
for everyone

00:38:11,680 --> 00:38:16,320
well there are some specific things to

00:38:14,640 --> 00:38:18,960
look for

00:38:16,320 --> 00:38:19,599
these base images are actually coming

00:38:18,960 --> 00:38:22,400
likely

00:38:19,599 --> 00:38:23,599
from default docker hub unless you are

00:38:22,400 --> 00:38:26,400
specifying

00:38:23,599 --> 00:38:28,160
a particular registry that you have

00:38:26,400 --> 00:38:30,800
which i would recommend

00:38:28,160 --> 00:38:31,200
getting a private registry because you

00:38:30,800 --> 00:38:34,320
don't

00:38:31,200 --> 00:38:35,520
know how often these uh images are going

00:38:34,320 --> 00:38:38,320
to go away

00:38:35,520 --> 00:38:38,560
um your base images may disappear i was

00:38:38,320 --> 00:38:41,599
on

00:38:38,560 --> 00:38:43,680
a project once where um

00:38:41,599 --> 00:38:46,400
we were we were all relatively new to

00:38:43,680 --> 00:38:48,240
docker it was pretty new for us so just

00:38:46,400 --> 00:38:49,040
getting you know getting it built and up

00:38:48,240 --> 00:38:51,200
and running was

00:38:49,040 --> 00:38:52,880
was awesome we started at the very

00:38:51,200 --> 00:38:56,640
beginning uh definitely

00:38:52,880 --> 00:38:58,480
the the documentation on docker

00:38:56,640 --> 00:39:00,079
so uh having something to start with was

00:38:58,480 --> 00:39:02,880
great however as time

00:39:00,079 --> 00:39:03,920
went on i came to realize when our build

00:39:02,880 --> 00:39:06,240
started breaking

00:39:03,920 --> 00:39:08,240
that our base image was coming from a

00:39:06,240 --> 00:39:10,720
repository that was managed by

00:39:08,240 --> 00:39:12,240
a contractor who was no longer employed

00:39:10,720 --> 00:39:14,240
by the company

00:39:12,240 --> 00:39:16,240
well eventually that quit working

00:39:14,240 --> 00:39:18,320
eventually that base image disappeared

00:39:16,240 --> 00:39:20,320
they were no longer responsible for it

00:39:18,320 --> 00:39:22,400
probably had assumed that we had already

00:39:20,320 --> 00:39:24,560
moved it into a safe place

00:39:22,400 --> 00:39:25,440
that we managed obviously that didn't

00:39:24,560 --> 00:39:26,960
happen so

00:39:25,440 --> 00:39:29,040
there was some communication that had to

00:39:26,960 --> 00:39:31,359
be done to retrieve that base image so

00:39:29,040 --> 00:39:34,640
that our builds would stop breaking

00:39:31,359 --> 00:39:38,000
that's one thing to look at another is

00:39:34,640 --> 00:39:40,880
you don't know necessarily anymore um

00:39:38,000 --> 00:39:42,800
where the if you haven't paid attention

00:39:40,880 --> 00:39:43,280
to what's going on inside your doctor

00:39:42,800 --> 00:39:44,960
file

00:39:43,280 --> 00:39:47,200
you could be pulling in external

00:39:44,960 --> 00:39:50,400
resources that you didn't realize

00:39:47,200 --> 00:39:52,640
one example of this was

00:39:50,400 --> 00:39:55,440
i found a place where we were actually

00:39:52,640 --> 00:39:57,680
pulling in an external script

00:39:55,440 --> 00:40:00,160
and then that script was being launched

00:39:57,680 --> 00:40:02,720
during the build

00:40:00,160 --> 00:40:03,680
not recommended to do that at the very

00:40:02,720 --> 00:40:06,000
least

00:40:03,680 --> 00:40:06,960
we needed to retrieve that script from

00:40:06,000 --> 00:40:09,760
wherever it was

00:40:06,960 --> 00:40:12,000
from and also store that in a local

00:40:09,760 --> 00:40:13,520
repository so that we had access to it

00:40:12,000 --> 00:40:16,480
always and it wasn't

00:40:13,520 --> 00:40:16,960
constantly being pulled you know over

00:40:16,480 --> 00:40:19,520
the

00:40:16,960 --> 00:40:20,160
um over the internet to pull that thing

00:40:19,520 --> 00:40:22,400
down

00:40:20,160 --> 00:40:24,000
the other was um knowing what that

00:40:22,400 --> 00:40:25,359
script was actually doing

00:40:24,000 --> 00:40:27,440
and there may be security

00:40:25,359 --> 00:40:29,040
vulnerabilities being added that we

00:40:27,440 --> 00:40:31,040
weren't aware of

00:40:29,040 --> 00:40:32,800
there could be licensing issues if there

00:40:31,040 --> 00:40:34,240
happens to be

00:40:32,800 --> 00:40:36,000
third-party applications or

00:40:34,240 --> 00:40:37,359
installations happening

00:40:36,000 --> 00:40:39,839
during your builds that involve

00:40:37,359 --> 00:40:42,640
installing products that do not have a

00:40:39,839 --> 00:40:46,000
license that is good for your company

00:40:42,640 --> 00:40:46,400
so yes so make sure you understand your

00:40:46,000 --> 00:40:48,560
build

00:40:46,400 --> 00:40:49,599
that is the whole point of this slide

00:40:48,560 --> 00:40:52,960
here

00:40:49,599 --> 00:40:54,720
also note the bananas i

00:40:52,960 --> 00:40:56,880
refuse to use shipping containers to

00:40:54,720 --> 00:40:59,040
represent containers anymore in any

00:40:56,880 --> 00:41:01,839
talks or any slides and i challenge

00:40:59,040 --> 00:41:03,280
anyone in the future to uh start moving

00:41:01,839 --> 00:41:04,960
away from shipping containers so

00:41:03,280 --> 00:41:06,640
there can be there give me two options

00:41:04,960 --> 00:41:07,440
here first of all we can start a

00:41:06,640 --> 00:41:10,240
movement

00:41:07,440 --> 00:41:11,839
of using bananas for everything

00:41:10,240 --> 00:41:15,119
container related

00:41:11,839 --> 00:41:17,200
or we can open a competition for whoever

00:41:15,119 --> 00:41:20,079
comes with the next

00:41:17,200 --> 00:41:21,440
best thing after shipping containers for

00:41:20,079 --> 00:41:25,200
talking about containers

00:41:21,440 --> 00:41:27,520
i i root for bananas i like it

00:41:25,200 --> 00:41:29,359
well i i like to work a lot with

00:41:27,520 --> 00:41:32,800
containers because uh

00:41:29,359 --> 00:41:34,960
when we first started in our projects

00:41:32,800 --> 00:41:37,359
i think the first time we use it it was

00:41:34,960 --> 00:41:39,359
for developing purposes for example we

00:41:37,359 --> 00:41:41,280
in the product that i was working on we

00:41:39,359 --> 00:41:43,839
need to support several databases

00:41:41,280 --> 00:41:44,800
and instead of installing in my local

00:41:43,839 --> 00:41:48,160
machine

00:41:44,800 --> 00:41:51,920
uh postgres and mysql and then

00:41:48,160 --> 00:41:55,119
later on polluting my my system folder

00:41:51,920 --> 00:41:57,680
now we had the opportunity to create

00:41:55,119 --> 00:41:58,319
the image or download the image in if we

00:41:57,680 --> 00:42:02,160
needed

00:41:58,319 --> 00:42:04,560
to create uh the specific

00:42:02,160 --> 00:42:06,400
postgres version with our own

00:42:04,560 --> 00:42:08,560
configuration file even better

00:42:06,400 --> 00:42:11,119
so that's why i support totally

00:42:08,560 --> 00:42:14,839
melissa's idea of having your own

00:42:11,119 --> 00:42:17,040
uh at the at the company level your own

00:42:14,839 --> 00:42:18,960
repository because you can do the

00:42:17,040 --> 00:42:20,480
things like this later on when you're

00:42:18,960 --> 00:42:23,200
using them for integration

00:42:20,480 --> 00:42:24,560
tests you may want to customize it

00:42:23,200 --> 00:42:27,760
because integration tests

00:42:24,560 --> 00:42:30,640
usually takes a long time so they're

00:42:27,760 --> 00:42:32,400
they're expensive in bootstrapping the

00:42:30,640 --> 00:42:32,720
depending on how many services you have

00:42:32,400 --> 00:42:36,160
to

00:42:32,720 --> 00:42:39,760
to test remember integration test

00:42:36,160 --> 00:42:41,359
is testing two components you don't have

00:42:39,760 --> 00:42:44,640
to test your entire

00:42:41,359 --> 00:42:48,000
application you can of course do it do

00:42:44,640 --> 00:42:49,440
end-to-end tests but integration tests

00:42:48,000 --> 00:42:51,520
you can have as many different

00:42:49,440 --> 00:42:54,079
configurations between components

00:42:51,520 --> 00:42:54,960
and sometimes because of this you want

00:42:54,079 --> 00:42:58,000
to create as

00:42:54,960 --> 00:43:01,760
different customized versions to make

00:42:58,000 --> 00:43:01,760
this easier faster

00:43:01,920 --> 00:43:08,319
when i started with containers and and

00:43:05,280 --> 00:43:10,839
i heard package ones deployed

00:43:08,319 --> 00:43:13,280
anywhere and under different

00:43:10,839 --> 00:43:16,880
circumstances i remember

00:43:13,280 --> 00:43:19,200
oh this is so like the java promise

00:43:16,880 --> 00:43:20,480
right once from everywhere so it was

00:43:19,200 --> 00:43:24,160
sold

00:43:20,480 --> 00:43:26,480
what was not to like yeah but

00:43:24,160 --> 00:43:27,839
i think that the promise of java right

00:43:26,480 --> 00:43:31,119
once right

00:43:27,839 --> 00:43:33,119
right once run anywhere actually didn't

00:43:31,119 --> 00:43:34,240
didn't fulfill and it didn't fulfill

00:43:33,119 --> 00:43:37,520
because

00:43:34,240 --> 00:43:40,640
dependencies because our

00:43:37,520 --> 00:43:44,079
application cannot really be

00:43:40,640 --> 00:43:47,839
isolated from everything around it

00:43:44,079 --> 00:43:51,119
and this is why even in java

00:43:47,839 --> 00:43:53,680
works on my machine a joke is is

00:43:51,119 --> 00:43:54,319
actually a reality right i even with

00:43:53,680 --> 00:43:56,480
java

00:43:54,319 --> 00:43:58,160
it might very well be that something

00:43:56,480 --> 00:44:01,200
that runs on my machine

00:43:58,160 --> 00:44:02,560
actually breaks in uh in any other

00:44:01,200 --> 00:44:03,440
environment obviously including

00:44:02,560 --> 00:44:07,040
production

00:44:03,440 --> 00:44:10,880
and and i think containers are really

00:44:07,040 --> 00:44:13,920
the next step of minimizing

00:44:10,880 --> 00:44:16,720
the impact of external

00:44:13,920 --> 00:44:17,599
um of external dependencies it's almost

00:44:16,720 --> 00:44:20,560
like

00:44:17,599 --> 00:44:22,160
someone said works on my machine and

00:44:20,560 --> 00:44:24,400
then we said you know what

00:44:22,160 --> 00:44:25,359
fine we will just ship your machine to

00:44:24,400 --> 00:44:28,240
production

00:44:25,359 --> 00:44:29,040
and that's exactly what um and that's

00:44:28,240 --> 00:44:31,680
exactly what

00:44:29,040 --> 00:44:32,319
what when containers are we take even

00:44:31,680 --> 00:44:35,440
more

00:44:32,319 --> 00:44:38,800
of those um the

00:44:35,440 --> 00:44:41,839
those dependencies pack them even

00:44:38,800 --> 00:44:42,480
more with our application and this is

00:44:41,839 --> 00:44:45,200
how

00:44:42,480 --> 00:44:47,119
we ship so think about package ones

00:44:45,200 --> 00:44:50,800
deploy anywhere when obviously

00:44:47,119 --> 00:44:53,280
run once run anywhere is a part of it

00:44:50,800 --> 00:44:54,400
the other thing that attracted me it was

00:44:53,280 --> 00:44:58,000
a change of

00:44:54,400 --> 00:45:01,040
how we thought uh marti powder and

00:44:58,000 --> 00:45:02,000
has this snowflake server versus phoenix

00:45:01,040 --> 00:45:04,400
server

00:45:02,000 --> 00:45:05,680
and it's the same metaphor as the cattle

00:45:04,400 --> 00:45:08,960
versus patch

00:45:05,680 --> 00:45:13,359
because in the past we had the servers

00:45:08,960 --> 00:45:16,720
that nobody knew how they came to be

00:45:13,359 --> 00:45:18,240
nobody knew how they were working nobody

00:45:16,720 --> 00:45:21,119
wanted to touch them

00:45:18,240 --> 00:45:21,839
because you cannot reproduce it so they

00:45:21,119 --> 00:45:25,440
were

00:45:21,839 --> 00:45:28,480
like like so dear even if they

00:45:25,440 --> 00:45:29,440
were not working correctly nobody

00:45:28,480 --> 00:45:33,040
attempted

00:45:29,440 --> 00:45:35,680
to change it so now we have to

00:45:33,040 --> 00:45:36,480
think in a different way everything can

00:45:35,680 --> 00:45:40,079
die

00:45:36,480 --> 00:45:41,599
at any point even we want to kill them

00:45:40,079 --> 00:45:45,280
at some point

00:45:41,599 --> 00:45:48,640
so you have to start changing

00:45:45,280 --> 00:45:51,440
how you prepare things how you package

00:45:48,640 --> 00:45:52,160
things how you make them run as they

00:45:51,440 --> 00:45:56,480
should

00:45:52,160 --> 00:46:00,720
how do reproducibility starts like

00:45:56,480 --> 00:46:04,319
being an ad thing a really big thing

00:46:00,720 --> 00:46:06,480
so yeah containers thumbs up

00:46:04,319 --> 00:46:08,079
all right so in this new world of

00:46:06,480 --> 00:46:10,160
containers and everything

00:46:08,079 --> 00:46:12,720
um in the context of delivering your

00:46:10,160 --> 00:46:14,800
application choosing your tools can be

00:46:12,720 --> 00:46:15,760
pretty overwhelming and there's a lot of

00:46:14,800 --> 00:46:17,200
stuff out there

00:46:15,760 --> 00:46:19,440
that you have to learn now as a

00:46:17,200 --> 00:46:22,640
developer in order to make this

00:46:19,440 --> 00:46:25,200
process efficient and

00:46:22,640 --> 00:46:26,160
get your stuff out into production so

00:46:25,200 --> 00:46:28,640
something

00:46:26,160 --> 00:46:29,760
that i really recommend is make sure

00:46:28,640 --> 00:46:32,960
that you understand

00:46:29,760 --> 00:46:34,560
as a developer and as your team that you

00:46:32,960 --> 00:46:35,119
understand what you need and what your

00:46:34,560 --> 00:46:38,160
goals

00:46:35,119 --> 00:46:38,560
actually are not just service oriented

00:46:38,160 --> 00:46:40,560
but

00:46:38,560 --> 00:46:42,079
business goals as well this means

00:46:40,560 --> 00:46:46,240
involving representatives

00:46:42,079 --> 00:46:48,800
from other parts of your company to um

00:46:46,240 --> 00:46:49,599
come in and and help to determine what

00:46:48,800 --> 00:46:51,599
is

00:46:49,599 --> 00:46:52,800
most important for you um the first

00:46:51,599 --> 00:46:55,680
thing you need is

00:46:52,800 --> 00:46:57,520
the list the list of priorities your you

00:46:55,680 --> 00:46:59,280
know is it fast is it efficient

00:46:57,520 --> 00:47:01,280
is it reliable should it be you know

00:46:59,280 --> 00:47:02,720
more economical these are all just

00:47:01,280 --> 00:47:05,760
examples of

00:47:02,720 --> 00:47:06,960
of goals that you have but make sure

00:47:05,760 --> 00:47:09,200
that you prioritize

00:47:06,960 --> 00:47:10,400
these so that across the company you're

00:47:09,200 --> 00:47:12,640
all on the same page

00:47:10,400 --> 00:47:13,599
working toward the same thing the same

00:47:12,640 --> 00:47:15,359
goal

00:47:13,599 --> 00:47:17,040
you won't have pockets of the company

00:47:15,359 --> 00:47:18,720
wondering why on earth

00:47:17,040 --> 00:47:20,480
are developers doing this when they

00:47:18,720 --> 00:47:22,480
should be doing that

00:47:20,480 --> 00:47:24,720
these are important things to make sure

00:47:22,480 --> 00:47:27,200
that you know up front

00:47:24,720 --> 00:47:27,920
this picture is of my car this is my

00:47:27,200 --> 00:47:31,200
actual car

00:47:27,920 --> 00:47:32,880
sitting in my garage right now this is

00:47:31,200 --> 00:47:34,960
really is a good example of what i'm

00:47:32,880 --> 00:47:35,839
talking about especially for legacy

00:47:34,960 --> 00:47:39,040
systems

00:47:35,839 --> 00:47:42,480
this is a legacy car it's about 18 years

00:47:39,040 --> 00:47:43,520
old and i live in colorado the tires on

00:47:42,480 --> 00:47:46,079
this car right now

00:47:43,520 --> 00:47:48,319
are likely more expensive than i could

00:47:46,079 --> 00:47:52,400
get selling this car

00:47:48,319 --> 00:47:54,640
so when i got into a little accident um

00:47:52,400 --> 00:47:56,559
goodness more than a year ago now i got

00:47:54,640 --> 00:47:59,200
a little dent on the side of the car

00:47:56,559 --> 00:48:01,040
and it was definitely not worth it to me

00:47:59,200 --> 00:48:01,599
to take it to a body shop and get that

00:48:01,040 --> 00:48:04,720
fixed

00:48:01,599 --> 00:48:07,440
instead i went to amazon got a

00:48:04,720 --> 00:48:08,559
band-aid magnet and put it over the dent

00:48:07,440 --> 00:48:10,400
in my car

00:48:08,559 --> 00:48:12,240
so sometimes this might be the right

00:48:10,400 --> 00:48:13,599
thing to do for some of your legacy

00:48:12,240 --> 00:48:16,000
applications

00:48:13,599 --> 00:48:18,839
just because that particular thing is

00:48:16,000 --> 00:48:20,880
not a priority for your business at the

00:48:18,839 --> 00:48:22,880
moment

00:48:20,880 --> 00:48:25,119
so this was something i introduced to me

00:48:22,880 --> 00:48:28,160
recently and it was a value stream

00:48:25,119 --> 00:48:30,000
that your it value stream as in the

00:48:28,160 --> 00:48:32,640
context is applying it to

00:48:30,000 --> 00:48:34,240
your entire pipeline your software

00:48:32,640 --> 00:48:36,720
development pipeline

00:48:34,240 --> 00:48:38,400
and this is interesting to me because so

00:48:36,720 --> 00:48:40,720
much of these things

00:48:38,400 --> 00:48:42,480
we these metrics and these values we

00:48:40,720 --> 00:48:44,079
place on the final product

00:48:42,480 --> 00:48:46,240
the final product that's running in

00:48:44,079 --> 00:48:46,880
production but what you also need to

00:48:46,240 --> 00:48:50,720
consider

00:48:46,880 --> 00:48:53,200
is every step that you took to get there

00:48:50,720 --> 00:48:54,960
it would be it's really valuable to also

00:48:53,200 --> 00:48:57,760
come together as a team

00:48:54,960 --> 00:48:59,520
not just developers but with

00:48:57,760 --> 00:49:00,480
representatives from other departments

00:48:59,520 --> 00:49:03,200
as well

00:49:00,480 --> 00:49:03,760
come as a team and decide you know which

00:49:03,200 --> 00:49:06,160
part

00:49:03,760 --> 00:49:07,040
which steps are we taking that's your

00:49:06,160 --> 00:49:09,280
your first thing

00:49:07,040 --> 00:49:11,119
whiteboard what you're actually doing to

00:49:09,280 --> 00:49:12,880
get your software into production

00:49:11,119 --> 00:49:15,040
and it doesn't have to be perfect and it

00:49:12,880 --> 00:49:16,079
likely won't be but you need to have

00:49:15,040 --> 00:49:17,680
that documentation

00:49:16,079 --> 00:49:19,280
of the actual steps that are taking

00:49:17,680 --> 00:49:20,400
place you don't want to get in a

00:49:19,280 --> 00:49:22,720
situation where

00:49:20,400 --> 00:49:23,520
only one person knows step three of the

00:49:22,720 --> 00:49:25,040
process

00:49:23,520 --> 00:49:27,040
they're sick on the day of you know

00:49:25,040 --> 00:49:29,119
deploying a fix to production

00:49:27,040 --> 00:49:31,119
nobody knows what to do you want to make

00:49:29,119 --> 00:49:33,520
sure to have that documentation

00:49:31,119 --> 00:49:35,119
and i don't care if it's a manual step

00:49:33,520 --> 00:49:37,040
write it down

00:49:35,119 --> 00:49:39,280
once you have this documentation in

00:49:37,040 --> 00:49:39,599
front of you then you can start going

00:49:39,280 --> 00:49:42,880
through

00:49:39,599 --> 00:49:44,079
each one and find out which which steps

00:49:42,880 --> 00:49:47,040
are the most costly

00:49:44,079 --> 00:49:48,640
for you right now as a team which steps

00:49:47,040 --> 00:49:52,559
seem to be causing the most

00:49:48,640 --> 00:49:53,920
problems for you which steps can you

00:49:52,559 --> 00:49:57,599
improve

00:49:53,920 --> 00:49:59,280
one one idea is

00:49:57,599 --> 00:50:01,599
this was also something introduced to me

00:49:59,280 --> 00:50:02,079
recently it was the whole idea of one

00:50:01,599 --> 00:50:05,040
percent

00:50:02,079 --> 00:50:07,200
improvement pick one thing pick one

00:50:05,040 --> 00:50:10,880
thing in your development cycle

00:50:07,200 --> 00:50:15,359
and improve that one thing this um

00:50:10,880 --> 00:50:17,760
this is a good transition um this was

00:50:15,359 --> 00:50:18,400
really brings back some memories for me

00:50:17,760 --> 00:50:21,680
how do you

00:50:18,400 --> 00:50:23,520
deploy um for me

00:50:21,680 --> 00:50:24,960
my first devops team and my first

00:50:23,520 --> 00:50:27,599
experience realizing

00:50:24,960 --> 00:50:28,800
what ops goes through and actually

00:50:27,599 --> 00:50:31,839
deploying

00:50:28,800 --> 00:50:34,960
an application this was

00:50:31,839 --> 00:50:37,760
amazing for me ops

00:50:34,960 --> 00:50:40,160
i was it was a smaller team ops and dev

00:50:37,760 --> 00:50:42,079
was thrown together we had very limited

00:50:40,160 --> 00:50:43,839
training at the time other than just

00:50:42,079 --> 00:50:45,440
learning the word devops

00:50:43,839 --> 00:50:48,000
and learning that's what we're gonna do

00:50:45,440 --> 00:50:50,160
now and um

00:50:48,000 --> 00:50:51,839
we started the developers on the team

00:50:50,160 --> 00:50:54,800
started learning the process

00:50:51,839 --> 00:50:56,960
of us and found a lot of complexities in

00:50:54,800 --> 00:50:58,160
the deployment that we had no idea what

00:50:56,960 --> 00:51:01,359
was going on

00:50:58,160 --> 00:51:03,359
um one example is um

00:51:01,359 --> 00:51:05,200
just opening the right ports making sure

00:51:03,359 --> 00:51:06,319
the right right ports are open

00:51:05,200 --> 00:51:07,920
especially you know now that you're

00:51:06,319 --> 00:51:10,079
using containers make sure that you're

00:51:07,920 --> 00:51:12,240
exposing the right things

00:51:10,079 --> 00:51:14,000
it was a big deal if you got that wrong

00:51:12,240 --> 00:51:15,280
there was an entire other team that

00:51:14,000 --> 00:51:17,839
dealt with infrastructure

00:51:15,280 --> 00:51:19,359
and if if you needed to be able to get

00:51:17,839 --> 00:51:20,160
traffic through a particular load

00:51:19,359 --> 00:51:22,640
balancer

00:51:20,160 --> 00:51:23,920
you needed to know that in advance so

00:51:22,640 --> 00:51:25,599
you know deploying

00:51:23,920 --> 00:51:27,280
a piece of software where we have

00:51:25,599 --> 00:51:28,160
fiddled with that that that was

00:51:27,280 --> 00:51:30,960
unacceptable

00:51:28,160 --> 00:51:32,319
um and unfortunately in the particular

00:51:30,960 --> 00:51:35,680
case it might take a week

00:51:32,319 --> 00:51:37,440
to get that change in place and ready so

00:51:35,680 --> 00:51:39,520
again the importance of communication

00:51:37,440 --> 00:51:41,920
between teams and understanding the

00:51:39,520 --> 00:51:44,079
pains that other teams are going through

00:51:41,920 --> 00:51:47,040
is super important for a developer you

00:51:44,079 --> 00:51:49,839
can't be flippant about that

00:51:47,040 --> 00:51:50,319
um this particular project i was working

00:51:49,839 --> 00:51:53,119
on

00:51:50,319 --> 00:51:54,400
there were a lot of little shell scripts

00:51:53,119 --> 00:51:57,440
running around

00:51:54,400 --> 00:52:00,400
on people's machines in various places

00:51:57,440 --> 00:52:01,839
various folders on a shared drive and

00:52:00,400 --> 00:52:03,680
these little scripts

00:52:01,839 --> 00:52:06,240
were what were used and they were

00:52:03,680 --> 00:52:08,480
patched together to actually deploy

00:52:06,240 --> 00:52:10,559
this service to various locations

00:52:08,480 --> 00:52:12,480
whether it be a staging environment or a

00:52:10,559 --> 00:52:15,440
production environment

00:52:12,480 --> 00:52:16,640
and every time a deploy was done on this

00:52:15,440 --> 00:52:18,880
particular service

00:52:16,640 --> 00:52:21,040
now this was back you know you always

00:52:18,880 --> 00:52:22,079
hear deploy fast deploy often this was

00:52:21,040 --> 00:52:24,240
not a service that

00:52:22,079 --> 00:52:25,440
followed those rules a deployment was a

00:52:24,240 --> 00:52:28,720
big deal

00:52:25,440 --> 00:52:30,319
we did not deploy very often and um

00:52:28,720 --> 00:52:31,839
it's a good thing because every one of

00:52:30,319 --> 00:52:32,640
those little scripts you had to find

00:52:31,839 --> 00:52:34,960
them

00:52:32,640 --> 00:52:36,160
and fix the little hard-coded details

00:52:34,960 --> 00:52:38,559
that may have changed

00:52:36,160 --> 00:52:39,440
between each deployment oh and you got

00:52:38,559 --> 00:52:42,079
to make sure

00:52:39,440 --> 00:52:43,280
that you make the script you know that

00:52:42,079 --> 00:52:46,880
it is working for

00:52:43,280 --> 00:52:48,720
staging and um for production

00:52:46,880 --> 00:52:50,319
make sure that you know all the urls are

00:52:48,720 --> 00:52:54,000
correct and blah blah blah

00:52:50,319 --> 00:52:57,599
we had a situation where um accidentally

00:52:54,000 --> 00:53:01,200
a url for a test am q server

00:52:57,599 --> 00:53:04,960
was put into a production environment

00:53:01,200 --> 00:53:06,400
so if you can imagine this was something

00:53:04,960 --> 00:53:08,000
that we experimented with

00:53:06,400 --> 00:53:11,520
we didn't know it at the time but we

00:53:08,000 --> 00:53:14,400
were creating our infrastructure as code

00:53:11,520 --> 00:53:16,000
we started putting our deployment

00:53:14,400 --> 00:53:17,760
scripts all of those little scripts we

00:53:16,000 --> 00:53:19,280
got them together we put them into

00:53:17,760 --> 00:53:21,359
source control

00:53:19,280 --> 00:53:23,200
and we started versioning them for each

00:53:21,359 --> 00:53:26,319
and every deployment

00:53:23,200 --> 00:53:28,400
so i i don't advise going in and

00:53:26,319 --> 00:53:29,760
you know making hard-coded changes every

00:53:28,400 --> 00:53:32,559
time however

00:53:29,760 --> 00:53:34,800
that's what we started with and it was a

00:53:32,559 --> 00:53:36,960
lot better for us to be able to

00:53:34,800 --> 00:53:38,000
do that quickly get all of that stuff in

00:53:36,960 --> 00:53:41,760
source control

00:53:38,000 --> 00:53:43,040
version it and then um be able to apply

00:53:41,760 --> 00:53:45,520
um

00:53:43,040 --> 00:53:46,880
variables based on whether it was a a

00:53:45,520 --> 00:53:49,520
production environment

00:53:46,880 --> 00:53:50,079
or a staging environment that kind of

00:53:49,520 --> 00:53:51,839
thing

00:53:50,079 --> 00:53:53,119
and then we were able we were able to

00:53:51,839 --> 00:53:55,200
deploy much

00:53:53,119 --> 00:53:56,160
faster and we avoided those silly

00:53:55,200 --> 00:53:58,000
mistakes of

00:53:56,160 --> 00:53:59,440
putting in the wrong url in the wrong

00:53:58,000 --> 00:54:01,760
place

00:53:59,440 --> 00:54:02,480
the other advantage of doing that is

00:54:01,760 --> 00:54:06,400
that now

00:54:02,480 --> 00:54:08,880
you have the option and capability of

00:54:06,400 --> 00:54:11,119
of um going back to a previous version

00:54:08,880 --> 00:54:13,280
if you need to for whatever reason

00:54:11,119 --> 00:54:14,640
it's going to happen nothing is ever

00:54:13,280 --> 00:54:16,319
perfect in life

00:54:14,640 --> 00:54:19,200
at some point you're going to need to

00:54:16,319 --> 00:54:21,599
roll back a release

00:54:19,200 --> 00:54:23,040
as we get better and better at this

00:54:21,599 --> 00:54:26,079
rollbacks may not be

00:54:23,040 --> 00:54:26,880
as common as roll forwards but for a

00:54:26,079 --> 00:54:28,640
while i think

00:54:26,880 --> 00:54:31,119
you know you still need to have that

00:54:28,640 --> 00:54:33,040
safety measure in place

00:54:31,119 --> 00:54:34,240
until you get a lot of these practices

00:54:33,040 --> 00:54:37,440
you know really down

00:54:34,240 --> 00:54:40,640
on your team right

00:54:37,440 --> 00:54:42,000
yes i totally agree with you melissa you

00:54:40,640 --> 00:54:44,720
have to externalize

00:54:42,000 --> 00:54:46,079
as much as the knowledge as possible uh

00:54:44,720 --> 00:54:49,359
reduce the magic

00:54:46,079 --> 00:54:50,720
happening because life happens and

00:54:49,359 --> 00:54:53,280
sometimes the

00:54:50,720 --> 00:54:54,559
person that knows the magic it's on

00:54:53,280 --> 00:54:56,880
vacations

00:54:54,559 --> 00:54:59,040
and then it scales that you have a

00:54:56,880 --> 00:55:01,760
bottleneck a dependency that it's not

00:54:59,040 --> 00:55:04,480
right or not needed

00:55:01,760 --> 00:55:05,599
checklists make sure that you have your

00:55:04,480 --> 00:55:07,839
checks list

00:55:05,599 --> 00:55:09,200
all over the place and people know where

00:55:07,839 --> 00:55:13,040
to find them

00:55:09,200 --> 00:55:13,920
another point i've been in situations

00:55:13,040 --> 00:55:16,079
where we didn't

00:55:13,920 --> 00:55:18,559
have the appropriate environments to

00:55:16,079 --> 00:55:20,240
work with to begin with

00:55:18,559 --> 00:55:21,839
you might be able to build it on your

00:55:20,240 --> 00:55:25,520
local machine

00:55:21,839 --> 00:55:27,440
you might have external resources to use

00:55:25,520 --> 00:55:29,280
to deploy something if you needed to

00:55:27,440 --> 00:55:32,079
just for testing

00:55:29,280 --> 00:55:34,319
maybe there was a staging environment

00:55:32,079 --> 00:55:38,079
certainly there was production

00:55:34,319 --> 00:55:40,160
but um don't skimp on your environments

00:55:38,079 --> 00:55:42,079
this is probably the worst thing you can

00:55:40,160 --> 00:55:44,960
do for your development team

00:55:42,079 --> 00:55:46,400
um i mean you know we need a place

00:55:44,960 --> 00:55:48,640
developers need a place to

00:55:46,400 --> 00:55:49,920
test things try things out experiment

00:55:48,640 --> 00:55:52,480
with things

00:55:49,920 --> 00:55:53,119
there also needs to be available for the

00:55:52,480 --> 00:55:55,359
benefit

00:55:53,119 --> 00:55:56,240
of everyone involved you need a staging

00:55:55,359 --> 00:55:58,480
environment

00:55:56,240 --> 00:55:59,599
you must have a staging environment

00:55:58,480 --> 00:56:01,920
generally this is an

00:55:59,599 --> 00:56:04,960
environment that matches production in

00:56:01,920 --> 00:56:06,960
every way possible

00:56:04,960 --> 00:56:09,040
but it it's the first environment that

00:56:06,960 --> 00:56:12,000
you would deploy a new version

00:56:09,040 --> 00:56:13,839
to when you're in ready in your cycle to

00:56:12,000 --> 00:56:16,880
deploy a new version

00:56:13,839 --> 00:56:19,119
um very important to have i

00:56:16,880 --> 00:56:21,440
if you want to test on production good

00:56:19,119 --> 00:56:23,760
luck to you

00:56:21,440 --> 00:56:25,200
you you're likely going to have some

00:56:23,760 --> 00:56:28,480
pretty miserable user

00:56:25,200 --> 00:56:31,839
experience um doing that and a lot of

00:56:28,480 --> 00:56:35,119
you know downtime if you can imagine um

00:56:31,839 --> 00:56:37,440
also a test environment being able to

00:56:35,119 --> 00:56:39,680
use your automation that you've built to

00:56:37,440 --> 00:56:41,280
deploy to various environments deployed

00:56:39,680 --> 00:56:43,040
to a testing environment

00:56:41,280 --> 00:56:44,880
um michelle mentioned before that you

00:56:43,040 --> 00:56:48,559
know integration testing can be

00:56:44,880 --> 00:56:49,359
pretty expensive i was in a situation

00:56:48,559 --> 00:56:52,480
where

00:56:49,359 --> 00:56:55,920
in order to an expensive in time

00:56:52,480 --> 00:56:57,359
specifically is what i was thinking um

00:56:55,920 --> 00:56:59,920
something that we would do we would add

00:56:57,359 --> 00:57:01,599
to our unit tests you know the

00:56:59,920 --> 00:57:03,280
like interaction with the database for

00:57:01,599 --> 00:57:05,680
example we would just use an in-memory

00:57:03,280 --> 00:57:07,680
database you know because it was faster

00:57:05,680 --> 00:57:09,520
but the problem is is the in-memory

00:57:07,680 --> 00:57:12,319
database is not the same

00:57:09,520 --> 00:57:14,720
it did not have the exact same syntax as

00:57:12,319 --> 00:57:16,880
what was used in production

00:57:14,720 --> 00:57:17,839
so it's pretty ridiculous to have all of

00:57:16,880 --> 00:57:20,000
these tests

00:57:17,839 --> 00:57:22,319
and they all pass and they all run and

00:57:20,000 --> 00:57:24,880
then put your service into production

00:57:22,319 --> 00:57:27,359
and everything breaks because of a silly

00:57:24,880 --> 00:57:30,559
you know sql mismatch

00:57:27,359 --> 00:57:33,599
or syntax difference um

00:57:30,559 --> 00:57:35,599
so use test containers

00:57:33,599 --> 00:57:36,799
containers are everywhere containers are

00:57:35,599 --> 00:57:38,640
good for you

00:57:36,799 --> 00:57:40,880
you can use them for your integration

00:57:38,640 --> 00:57:44,160
testing and test containers

00:57:40,880 --> 00:57:47,440
has a lot of available options for you

00:57:44,160 --> 00:57:50,640
you can you know grab your version of

00:57:47,440 --> 00:57:51,520
database that you're using and be able

00:57:50,640 --> 00:57:53,119
to deploy that

00:57:51,520 --> 00:57:55,440
in an integration environment and be

00:57:53,119 --> 00:57:58,960
able to use that you will catch

00:57:55,440 --> 00:58:01,359
things like any api

00:57:58,960 --> 00:58:03,280
problems you'll catch any you know

00:58:01,359 --> 00:58:04,960
syntax problems any differences

00:58:03,280 --> 00:58:06,880
make sure that your integration

00:58:04,960 --> 00:58:08,559
environment actually matches

00:58:06,880 --> 00:58:11,839
your production environment and just

00:58:08,559 --> 00:58:11,839
avoid that mess

00:58:12,079 --> 00:58:18,319
so michelle mix test containers

00:58:15,440 --> 00:58:19,839
and she has a lot to say about them and

00:58:18,319 --> 00:58:22,640
why we like them

00:58:19,839 --> 00:58:24,319
so i'm going to hand it over to her well

00:58:22,640 --> 00:58:25,599
full disclosure i really like

00:58:24,319 --> 00:58:29,040
integration tests

00:58:25,599 --> 00:58:31,040
um one thing that martin fowler said

00:58:29,040 --> 00:58:33,119
once is that integration test is you

00:58:31,040 --> 00:58:34,880
don't have to test the whole system

00:58:33,119 --> 00:58:38,640
sometimes an integration test

00:58:34,880 --> 00:58:39,440
is testing the the communication or the

00:58:38,640 --> 00:58:42,480
coupling of

00:58:39,440 --> 00:58:43,520
two modules so you can break down your

00:58:42,480 --> 00:58:47,119
integration test

00:58:43,520 --> 00:58:48,799
as you seem fit and if you increase the

00:58:47,119 --> 00:58:51,440
richness of this and this

00:58:48,799 --> 00:58:54,480
different configurations of your test is

00:58:51,440 --> 00:58:58,079
going to be even better for you

00:58:54,480 --> 00:59:00,319
i love this project because

00:58:58,079 --> 00:59:02,400
i said i started with containers really

00:59:00,319 --> 00:59:04,880
early on so

00:59:02,400 --> 00:59:06,400
we were using containers for developer

00:59:04,880 --> 00:59:07,520
for developing like for example the

00:59:06,400 --> 00:59:10,160
databases

00:59:07,520 --> 00:59:11,920
uh i needed to have postgres and mysql

00:59:10,160 --> 00:59:12,799
because the product should run with both

00:59:11,920 --> 00:59:16,400
of

00:59:12,799 --> 00:59:18,960
those databases and so you have your

00:59:16,400 --> 00:59:20,720
containers like that and you're happy

00:59:18,960 --> 00:59:23,200
and etc etc

00:59:20,720 --> 00:59:25,440
when you start doing integration tests

00:59:23,200 --> 00:59:28,799
you have to bootstrap all these

00:59:25,440 --> 00:59:30,799
resources and run them turns out that at

00:59:28,799 --> 00:59:34,400
the time where i started doing that

00:59:30,799 --> 00:59:37,760
um i'm a gradle most of the time

00:59:34,400 --> 00:59:38,640
girl maybe i also work with with maven

00:59:37,760 --> 00:59:41,839
but at that time

00:59:38,640 --> 00:59:42,960
we have different plugins for gradle and

00:59:41,839 --> 00:59:45,280
they were fantastic

00:59:42,960 --> 00:59:46,400
they allow you to bootstrap and

00:59:45,280 --> 00:59:49,760
automatize

00:59:46,400 --> 00:59:51,520
everything but

00:59:49,760 --> 00:59:54,319
the functionality that they provide were

00:59:51,520 --> 00:59:57,520
very limited for example you cannot have

00:59:54,319 --> 01:00:00,799
randomized boards yay so

00:59:57,520 --> 01:00:02,799
not running the test integration test

01:00:00,799 --> 01:00:05,680
concurrently which is a bad

01:00:02,799 --> 01:00:07,040
thing so at that time it was there were

01:00:05,680 --> 01:00:10,400
so many limitations

01:00:07,040 --> 01:00:13,040
when i discovered test containers and i

01:00:10,400 --> 01:00:14,079
saw what they allowed you and how

01:00:13,040 --> 01:00:15,839
powerful

01:00:14,079 --> 01:00:17,799
and flexible they are because they

01:00:15,839 --> 01:00:21,680
already have like

01:00:17,799 --> 01:00:22,319
pre-created templates for databases even

01:00:21,680 --> 01:00:26,079
with their

01:00:22,319 --> 01:00:30,000
own uh weight um

01:00:26,079 --> 01:00:33,040
strategies very targeted to the specific

01:00:30,000 --> 01:00:34,799
type of container database or different

01:00:33,040 --> 01:00:38,079
other tools

01:00:34,799 --> 01:00:41,280
they do have one kind of operation

01:00:38,079 --> 01:00:41,280
it's called ryuk

01:00:41,520 --> 01:00:48,559
that make sure that your containers

01:00:45,280 --> 01:00:50,319
are well behaved this means that once

01:00:48,559 --> 01:00:51,280
they are running well they start off

01:00:50,319 --> 01:00:54,160
they run

01:00:51,280 --> 01:00:54,880
and then they are killed even if your

01:00:54,160 --> 01:00:57,920
tests

01:00:54,880 --> 01:01:02,160
are failing because in that

01:00:57,920 --> 01:01:04,160
years back i would usually get the call

01:01:02,160 --> 01:01:07,520
from the itis

01:01:04,160 --> 01:01:10,400
excel you crush the machine

01:01:07,520 --> 01:01:13,040
because you have like one thousand

01:01:10,400 --> 01:01:14,480
zombie joker containers and i was like

01:01:13,040 --> 01:01:16,640
what

01:01:14,480 --> 01:01:17,599
and it was because sometimes the test

01:01:16,640 --> 01:01:21,119
failed and i

01:01:17,599 --> 01:01:23,839
i we didn't dispose of the

01:01:21,119 --> 01:01:25,040
resources correctly there were some

01:01:23,839 --> 01:01:26,880
workarounds like

01:01:25,040 --> 01:01:28,079
before running the test you kill

01:01:26,880 --> 01:01:31,760
everything in the machine

01:01:28,079 --> 01:01:35,200
but it's not okay so

01:01:31,760 --> 01:01:38,720
if you need to work with integration

01:01:35,200 --> 01:01:40,880
tests you if the simple ones or the

01:01:38,720 --> 01:01:42,559
very very complex ones i totally

01:01:40,880 --> 01:01:43,440
recommend you to have a look into this

01:01:42,559 --> 01:01:46,720
project

01:01:43,440 --> 01:01:50,079
it's going to worth your while

01:01:46,720 --> 01:01:50,400
and it's easy to set up and it's as i

01:01:50,079 --> 01:01:53,760
said

01:01:50,400 --> 01:01:57,599
it's flexible there are already some uh

01:01:53,760 --> 01:02:00,240
predefined um types of content

01:01:57,599 --> 01:02:02,160
of containers or test containers and you

01:02:00,240 --> 01:02:06,720
have the generic one

01:02:02,160 --> 01:02:10,240
so totally recommended right

01:02:06,720 --> 01:02:12,480
so we're at a kubecon conference and i

01:02:10,240 --> 01:02:14,799
assume there are a lot of developers

01:02:12,480 --> 01:02:16,400
in this particular audience since we're

01:02:14,799 --> 01:02:18,400
speaking specifically to

01:02:16,400 --> 01:02:20,880
job developers although this would apply

01:02:18,400 --> 01:02:23,839
to any developer really

01:02:20,880 --> 01:02:25,280
what about kubernetes in my personal

01:02:23,839 --> 01:02:28,000
experience as a developer

01:02:25,280 --> 01:02:29,520
on a development team before i was on a

01:02:28,000 --> 01:02:32,400
devops team

01:02:29,520 --> 01:02:33,280
i had little exposure to the deployment

01:02:32,400 --> 01:02:35,440
itself

01:02:33,280 --> 01:02:36,720
my life was all about just you know i

01:02:35,440 --> 01:02:39,440
was in my ide

01:02:36,720 --> 01:02:40,240
i fixed things checked things in i was

01:02:39,440 --> 01:02:42,720
done

01:02:40,240 --> 01:02:44,240
went home for the night and slept well

01:02:42,720 --> 01:02:46,319
um

01:02:44,240 --> 01:02:49,280
now that i'm on a devops team no i'm

01:02:46,319 --> 01:02:52,160
just kidding um

01:02:49,280 --> 01:02:52,720
now it's definitely more of a concern

01:02:52,160 --> 01:02:54,480
for me

01:02:52,720 --> 01:02:56,240
like what exactly is going on in

01:02:54,480 --> 01:02:59,599
deployment world

01:02:56,240 --> 01:03:01,920
and along with the automation um

01:02:59,599 --> 01:03:02,960
now that you have all these containers

01:03:01,920 --> 01:03:06,000
and everything

01:03:02,960 --> 01:03:07,599
the bigger your project is the

01:03:06,000 --> 01:03:09,359
more likely it's going to become

01:03:07,599 --> 01:03:12,799
difficult to

01:03:09,359 --> 01:03:17,200
manage all of that um kubernetes is

01:03:12,799 --> 01:03:20,240
an awesome orchestration tool

01:03:17,200 --> 01:03:21,520
if you may not get into the nitty gritty

01:03:20,240 --> 01:03:24,160
of cluster maintenance

01:03:21,520 --> 01:03:25,920
as a developer in fact you know it's

01:03:24,160 --> 01:03:27,440
possible you may have an infrastructure

01:03:25,920 --> 01:03:29,760
team that deals with you know

01:03:27,440 --> 01:03:31,520
upgrading clusters that kind of stuff

01:03:29,760 --> 01:03:32,799
but it's important to understand how it

01:03:31,520 --> 01:03:36,079
works

01:03:32,799 --> 01:03:39,599
um there are also managed solutions

01:03:36,079 --> 01:03:42,799
so once you understand how it works

01:03:39,599 --> 01:03:45,280
you might consider knowing knowing the

01:03:42,799 --> 01:03:46,559
big lift of managing kubernetes clusters

01:03:45,280 --> 01:03:48,319
you might want to consider

01:03:46,559 --> 01:03:50,559
the managed solutions available out

01:03:48,319 --> 01:03:54,720
there um all of the big cloud providers

01:03:50,559 --> 01:03:57,839
of them um azure google um

01:03:54,720 --> 01:03:59,440
their aws they're they're out there and

01:03:57,839 --> 01:04:02,640
are pretty they're making them easier

01:03:59,440 --> 01:04:05,280
and easier to use day by day

01:04:02,640 --> 01:04:06,720
um if you are curious and you want to

01:04:05,280 --> 01:04:09,280
know more which you should

01:04:06,720 --> 01:04:10,720
as a developer there are a ton of good

01:04:09,280 --> 01:04:12,319
resources out there now

01:04:10,720 --> 01:04:13,839
lots of articles blogs being written

01:04:12,319 --> 01:04:16,480
about kubernetes

01:04:13,839 --> 01:04:18,640
this one is my absolute favorite it was

01:04:16,480 --> 01:04:20,720
it's provided by azure

01:04:18,640 --> 01:04:22,079
called 50 days from zero to hero with

01:04:20,720 --> 01:04:24,880
kubernetes

01:04:22,079 --> 01:04:26,000
um each of these it sounds overwhelming

01:04:24,880 --> 01:04:28,799
it takes 50 days

01:04:26,000 --> 01:04:29,440
to learn kubernetes right but each of

01:04:28,799 --> 01:04:32,319
these

01:04:29,440 --> 01:04:32,880
little points you know there are a um a

01:04:32,319 --> 01:04:35,359
single

01:04:32,880 --> 01:04:36,559
a blog or a little video it's not going

01:04:35,359 --> 01:04:39,119
to take you all day

01:04:36,559 --> 01:04:40,400
you know or all week for for each of

01:04:39,119 --> 01:04:43,440
these

01:04:40,400 --> 01:04:48,640
steps here day one

01:04:43,440 --> 01:04:48,640
is my absolute favorite in this

01:04:48,720 --> 01:04:51,839
process here

01:04:52,079 --> 01:04:56,960
it's i actually picked up a hard copy of

01:04:55,119 --> 01:05:00,400
these children's books

01:04:56,960 --> 01:05:03,520
um it's all about fippy which is a

01:05:00,400 --> 01:05:04,880
php app uh learning how to live you know

01:05:03,520 --> 01:05:07,039
in kubernetes land

01:05:04,880 --> 01:05:09,599
and it's basically a child's you know

01:05:07,039 --> 01:05:11,520
written as a child's book to teach you

01:05:09,599 --> 01:05:14,559
the basics of kubernetes

01:05:11,520 --> 01:05:15,920
and um there's cute metaphors in there

01:05:14,559 --> 01:05:18,640
some of them might be a little forced

01:05:15,920 --> 01:05:18,640
but that's okay

01:05:19,119 --> 01:05:22,799
there's always a page that is more

01:05:21,039 --> 01:05:25,280
technical that describes you know

01:05:22,799 --> 01:05:26,000
exactly what they're talking about if

01:05:25,280 --> 01:05:28,480
there is

01:05:26,000 --> 01:05:29,119
any question on how to pronounce coop

01:05:28,480 --> 01:05:32,240
cuddle

01:05:29,119 --> 01:05:33,440
here it is definitively on page 12 of

01:05:32,240 --> 01:05:36,240
this children's book

01:05:33,440 --> 01:05:38,240
this is how you pronounce coop cuddle

01:05:36,240 --> 01:05:40,640
[Music]

01:05:38,240 --> 01:05:42,240
another way to learn kelsey hightower

01:05:40,640 --> 01:05:45,359
has a really good

01:05:42,240 --> 01:05:46,240
github repository called kubernetes the

01:05:45,359 --> 01:05:48,720
hard way

01:05:46,240 --> 01:05:50,480
this really gets down into the details

01:05:48,720 --> 01:05:52,559
of kubernetes and

01:05:50,480 --> 01:05:53,520
forces you to start at the beginning so

01:05:52,559 --> 01:05:55,599
that you learn

01:05:53,520 --> 01:05:57,200
how actually everything is put together

01:05:55,599 --> 01:05:59,440
and how everything works

01:05:57,200 --> 01:06:00,720
highly recommended directly from the

01:05:59,440 --> 01:06:03,039
readme here

01:06:00,720 --> 01:06:04,079
kubernetes the hard way is optimized for

01:06:03,039 --> 01:06:06,720
learning which means

01:06:04,079 --> 01:06:08,720
taking the long route to ensure you

01:06:06,720 --> 01:06:09,359
understand each task required to

01:06:08,720 --> 01:06:13,599
bootstrap

01:06:09,359 --> 01:06:17,119
a kubernetes cluster so

01:06:13,599 --> 01:06:17,119
definitely go here to learn

01:06:17,200 --> 01:06:21,760
once you've learned um these are some of

01:06:20,319 --> 01:06:23,599
the things that you're going to need to

01:06:21,760 --> 01:06:26,079
consider when you're building your app

01:06:23,599 --> 01:06:27,440
or when you're modifying an ex existing

01:06:26,079 --> 01:06:29,680
app to behave

01:06:27,440 --> 01:06:30,880
the best in this new environment in this

01:06:29,680 --> 01:06:33,440
container and

01:06:30,880 --> 01:06:34,559
cluster environment so this comes

01:06:33,440 --> 01:06:37,119
directly from

01:06:34,559 --> 01:06:38,720
a white paper available at jfrog i have

01:06:37,119 --> 01:06:40,640
the link here

01:06:38,720 --> 01:06:42,559
these are some of the tasks that you

01:06:40,640 --> 01:06:44,960
need to consider some of the questions

01:06:42,559 --> 01:06:47,760
to ask

01:06:44,960 --> 01:06:50,079
for example how many times have you

01:06:47,760 --> 01:06:50,880
witnessed a server falling over because

01:06:50,079 --> 01:06:53,020
the log

01:06:50,880 --> 01:06:54,640
directory filled up

01:06:53,020 --> 01:06:56,799
[Music]

01:06:54,640 --> 01:06:58,079
it's happened to me yeah it happened to

01:06:56,799 --> 01:07:00,799
everybody

01:06:58,079 --> 01:07:02,240
it's um and it's just a symptom of you

01:07:00,799 --> 01:07:03,920
know you want to get something out there

01:07:02,240 --> 01:07:05,760
you want to get something working and we

01:07:03,920 --> 01:07:10,000
have this tendency to focus

01:07:05,760 --> 01:07:12,160
on best case scenarios and happy paths

01:07:10,000 --> 01:07:14,240
so these looking through these questions

01:07:12,160 --> 01:07:14,640
as a team kind of gives you a little bit

01:07:14,240 --> 01:07:17,119
of an

01:07:14,640 --> 01:07:18,240
idea of what can potentially happen in a

01:07:17,119 --> 01:07:19,920
production environment

01:07:18,240 --> 01:07:22,960
things that you should be concerned

01:07:19,920 --> 01:07:25,760
about and things to optimize on

01:07:22,960 --> 01:07:26,400
i like this one data persistency you

01:07:25,760 --> 01:07:29,280
know don't

01:07:26,400 --> 01:07:29,599
don't persist everything persist what

01:07:29,280 --> 01:07:31,920
you

01:07:29,599 --> 01:07:34,400
need i'm you kind of defeat the purpose

01:07:31,920 --> 01:07:35,839
of having a container

01:07:34,400 --> 01:07:37,359
you know make sure you're persisting

01:07:35,839 --> 01:07:39,440
what you need of course because your

01:07:37,359 --> 01:07:41,599
container can die and go away

01:07:39,440 --> 01:07:43,599
but make sure that you you aren't

01:07:41,599 --> 01:07:45,680
overkill here

01:07:43,599 --> 01:07:47,039
um termination signals this is one i

01:07:45,680 --> 01:07:48,799
personally um

01:07:47,039 --> 01:07:50,640
had a problem with it was something i

01:07:48,799 --> 01:07:52,960
added to one of our services

01:07:50,640 --> 01:07:54,240
because there really was no graceful way

01:07:52,960 --> 01:07:56,400
to shut it down

01:07:54,240 --> 01:07:57,760
there was no end point it was just you

01:07:56,400 --> 01:07:59,280
know kill it and be done

01:07:57,760 --> 01:08:01,599
well if you killed it while it was

01:07:59,280 --> 01:08:03,440
actively being used in production

01:08:01,599 --> 01:08:05,680
the only thing for your user to do is

01:08:03,440 --> 01:08:08,000
just you know try their process again

01:08:05,680 --> 01:08:10,240
unfortunately this particular server

01:08:08,000 --> 01:08:13,280
yeah and it comes from the

01:08:10,240 --> 01:08:14,079
from the pet from the pet concept right

01:08:13,280 --> 01:08:15,839
that you

01:08:14,079 --> 01:08:17,679
you shouldn't kill your application

01:08:15,839 --> 01:08:19,839
instead you try to fix it

01:08:17,679 --> 01:08:20,719
and try to keep it alive as long as

01:08:19,839 --> 01:08:23,199
possible

01:08:20,719 --> 01:08:24,319
one of the big changes are exactly that

01:08:23,199 --> 01:08:26,000
that you now

01:08:24,319 --> 01:08:27,839
need to be ready to kill your

01:08:26,000 --> 01:08:29,839
application and it should go

01:08:27,839 --> 01:08:32,640
down very fast and this is why you need

01:08:29,839 --> 01:08:36,319
the kill the kill monitoring

01:08:32,640 --> 01:08:38,400
exactly and gracefully our services

01:08:36,319 --> 01:08:39,520
some of the processes were very lengthy

01:08:38,400 --> 01:08:41,520
amounts of time so

01:08:39,520 --> 01:08:43,199
having you know forcing a customer to

01:08:41,520 --> 01:08:46,319
redo their stuff

01:08:43,199 --> 01:08:47,839
was pretty painful and there are many

01:08:46,319 --> 01:08:50,880
reasons why you'd want to

01:08:47,839 --> 01:08:52,400
kill you know you may want to you need

01:08:50,880 --> 01:08:53,920
to work on an upgrade or you need

01:08:52,400 --> 01:08:56,560
maintenance of some kind

01:08:53,920 --> 01:08:57,440
um consider you know how you've deployed

01:08:56,560 --> 01:09:00,239
your cluster

01:08:57,440 --> 01:09:02,239
you know if it's possible to only kill

01:09:00,239 --> 01:09:03,040
you know part of your cluster only some

01:09:02,239 --> 01:09:05,520
pods

01:09:03,040 --> 01:09:06,480
update those and then reroute traffic

01:09:05,520 --> 01:09:08,640
this is something that

01:09:06,480 --> 01:09:09,600
is better for you to do than just to

01:09:08,640 --> 01:09:12,640
kill everything

01:09:09,600 --> 01:09:14,560
and be dead in the water um the idea

01:09:12,640 --> 01:09:16,560
you know keep stuff alive like what

01:09:14,560 --> 01:09:19,440
brooke said

01:09:16,560 --> 01:09:20,719
yeah this is an interesting idea that i

01:09:19,440 --> 01:09:23,759
love food containers

01:09:20,719 --> 01:09:27,199
instead of fearing that

01:09:23,759 --> 01:09:27,839
you start like thinking it's going to

01:09:27,199 --> 01:09:30,880
happen

01:09:27,839 --> 01:09:32,719
sometimes i even going to cause it so i

01:09:30,880 --> 01:09:36,000
need to think about what are the

01:09:32,719 --> 01:09:39,359
implications and the consequence of that

01:09:36,000 --> 01:09:41,359
so start thinking like that exactly

01:09:39,359 --> 01:09:43,040
and it is a different way of thinking

01:09:41,359 --> 01:09:44,560
it's exciting when you get something up

01:09:43,040 --> 01:09:45,199
and running and you just want to push it

01:09:44,560 --> 01:09:46,560
out there

01:09:45,199 --> 01:09:49,120
but you really need to think of these

01:09:46,560 --> 01:09:51,679
scenarios you know when it doesn't work

01:09:49,120 --> 01:09:53,359
and we're trained to do this in our you

01:09:51,679 --> 01:09:55,600
know our code when you get down

01:09:53,359 --> 01:09:56,400
to the the details you know we're trying

01:09:55,600 --> 01:09:58,159
to look at a

01:09:56,400 --> 01:10:00,480
a function for example and make sure

01:09:58,159 --> 01:10:02,719
that it behaves the right way and we

01:10:00,480 --> 01:10:04,960
consider all the failure scenarios

01:10:02,719 --> 01:10:06,480
but bigger picture failure scenarios

01:10:04,960 --> 01:10:07,600
sometimes get sometimes those get

01:10:06,480 --> 01:10:10,320
overlooked

01:10:07,600 --> 01:10:12,159
so um definitely keep these questions

01:10:10,320 --> 01:10:14,159
and these tasks in mind when you're

01:10:12,159 --> 01:10:15,280
prepping your app or improving your

01:10:14,159 --> 01:10:19,679
existing app

01:10:15,280 --> 01:10:19,679
for the kubernetes and container world

01:10:19,720 --> 01:10:24,560
[Music]

01:10:21,120 --> 01:10:28,000
all right so let's go and see

01:10:24,560 --> 01:10:30,480
what our little pipeline is doing

01:10:28,000 --> 01:10:31,199
oh and we have so much stuff to discover

01:10:30,480 --> 01:10:34,239
to discuss

01:10:31,199 --> 01:10:37,440
now over our pipeline and

01:10:34,239 --> 01:10:39,360
uh yeah that's let's see oh it actually

01:10:37,440 --> 01:10:42,640
worked look at that

01:10:39,360 --> 01:10:44,239
look at that um i really demo gods are

01:10:42,640 --> 01:10:47,520
with us

01:10:44,239 --> 01:10:49,840
what's that yeah yeah that

01:10:47,520 --> 01:10:52,159
never happened i mean live demo and it

01:10:49,840 --> 01:10:52,159
worked

01:10:52,480 --> 01:10:56,000
i really like the visual this provides

01:10:54,400 --> 01:10:58,719
with the actual pipeline

01:10:56,000 --> 01:11:00,960
um when you know the just the term

01:10:58,719 --> 01:11:01,840
software pipeline can uh sometimes seem

01:11:00,960 --> 01:11:04,719
like magic

01:11:01,840 --> 01:11:06,000
it isn't it is not magic it is just the

01:11:04,719 --> 01:11:08,960
steps that you take

01:11:06,000 --> 01:11:09,679
to um progress your software down the

01:11:08,960 --> 01:11:12,239
line

01:11:09,679 --> 01:11:14,320
so in this particular pipeline this is a

01:11:12,239 --> 01:11:17,360
development pipeline

01:11:14,320 --> 01:11:20,800
we have a front-end application

01:11:17,360 --> 01:11:23,760
this particular one is npm we're using

01:11:20,800 --> 01:11:24,400
npm packages to build our front end our

01:11:23,760 --> 01:11:27,440
back end

01:11:24,400 --> 01:11:27,920
is built in java um in the middle of

01:11:27,440 --> 01:11:31,040
this

01:11:27,920 --> 01:11:34,560
pipeline we actually build a container

01:11:31,040 --> 01:11:37,120
with these two resources

01:11:34,560 --> 01:11:40,640
then we we publish the container we put

01:11:37,120 --> 01:11:43,440
it in an appropriate repository and then

01:11:40,640 --> 01:11:45,040
we we can run some tests on it here you

01:11:43,440 --> 01:11:46,320
know run it through integration test

01:11:45,040 --> 01:11:49,600
that kind of thing

01:11:46,320 --> 01:11:51,920
when everything passes you promote

01:11:49,600 --> 01:11:53,440
your artifact promote your container

01:11:51,920 --> 01:11:56,880
image to the next

01:11:53,440 --> 01:12:00,719
step in your cycle which in this one

01:11:56,880 --> 01:12:00,719
is a staging repository

01:12:00,800 --> 01:12:04,640
a lot of these tools operate in the same

01:12:02,880 --> 01:12:07,280
way this particular one

01:12:04,640 --> 01:12:08,640
integrates with various tools this

01:12:07,280 --> 01:12:12,159
particular pipeline

01:12:08,640 --> 01:12:13,360
gets triggered with a commit to a github

01:12:12,159 --> 01:12:15,920
repository

01:12:13,360 --> 01:12:17,360
if either of there's actually three

01:12:15,920 --> 01:12:20,239
repositories here

01:12:17,360 --> 01:12:23,120
one is for the actual pipeline script

01:12:20,239 --> 01:12:24,960
which describes this whole process

01:12:23,120 --> 01:12:26,880
the other one is the of course the

01:12:24,960 --> 01:12:29,040
front-end repository and the third is

01:12:26,880 --> 01:12:31,520
the back-end java repository

01:12:29,040 --> 01:12:33,760
any changes to those repositories will

01:12:31,520 --> 01:12:37,120
trigger this pipeline to run at the

01:12:33,760 --> 01:12:39,520
appropriate place so this makes it

01:12:37,120 --> 01:12:40,880
really easy for multiple teams to work

01:12:39,520 --> 01:12:43,280
together without

01:12:40,880 --> 01:12:44,880
stopping on each other too much you know

01:12:43,280 --> 01:12:47,360
getting their latest changes

01:12:44,880 --> 01:12:48,320
that kind of thing a really valuable

01:12:47,360 --> 01:12:52,800
thing to have

01:12:48,320 --> 01:12:56,080
um i have a i have a question elisa so

01:12:52,800 --> 01:12:58,000
what i see here is that um

01:12:56,080 --> 01:12:59,280
what we triggered in the beginning was

01:12:58,000 --> 01:13:02,239
the front-end

01:12:59,280 --> 01:13:03,520
the front-end uh build and that was like

01:13:02,239 --> 01:13:06,800
an august to

01:13:03,520 --> 01:13:07,679
committing a change into one of the npm

01:13:06,800 --> 01:13:09,920
files

01:13:07,679 --> 01:13:10,880
now and that that generated like run

01:13:09,920 --> 01:13:12,960
number 11.

01:13:10,880 --> 01:13:14,719
when when we look at the back end when

01:13:12,960 --> 01:13:17,760
we look at the maven build

01:13:14,719 --> 01:13:21,840
it is run number seven does it

01:13:17,760 --> 01:13:23,199
mean that the now the run number 11 the

01:13:21,840 --> 01:13:26,239
build number 11 will

01:13:23,199 --> 01:13:29,679
reuse the outcomes of

01:13:26,239 --> 01:13:31,920
the build number seven in the back end

01:13:29,679 --> 01:13:33,440
yes and that's great because we don't

01:13:31,920 --> 01:13:36,239
need to rebuild

01:13:33,440 --> 01:13:38,960
the maven project every time something

01:13:36,239 --> 01:13:42,320
changed in our front end

01:13:38,960 --> 01:13:44,960
yes this will save so much time on

01:13:42,320 --> 01:13:46,719
on your builds a lot of time is spent

01:13:44,960 --> 01:13:48,800
rebuilding something over and over

01:13:46,719 --> 01:13:50,719
and also this is something i've seen too

01:13:48,800 --> 01:13:53,760
that baruch you've already touched on

01:13:50,719 --> 01:13:57,520
um the whole promotion uh steps and

01:13:53,760 --> 01:14:00,719
going through your your quality gates

01:13:57,520 --> 01:14:01,520
i've seen ci systems and pipelines like

01:14:00,719 --> 01:14:03,520
this where

01:14:01,520 --> 01:14:05,199
the whole container is built at every

01:14:03,520 --> 01:14:07,360
step

01:14:05,199 --> 01:14:10,480
that's you know or when you're ready to

01:14:07,360 --> 01:14:13,520
deploy it's built again

01:14:10,480 --> 01:14:15,679
once you do that you've lost

01:14:13,520 --> 01:14:16,640
you don't have a guarantee that that's

01:14:15,679 --> 01:14:18,719
the same

01:14:16,640 --> 01:14:20,239
container or going to have the same

01:14:18,719 --> 01:14:22,800
behavior as what you

01:14:20,239 --> 01:14:23,840
tested you kind of you lost all your

01:14:22,800 --> 01:14:27,040
effort there

01:14:23,840 --> 01:14:27,679
by rebuilding something so this whole

01:14:27,040 --> 01:14:30,800
process

01:14:27,679 --> 01:14:31,360
of promoting or um you know moving the

01:14:30,800 --> 01:14:33,199
same

01:14:31,360 --> 01:14:34,880
make sure your artifact is built at the

01:14:33,199 --> 01:14:37,600
beginning of your pipeline and then

01:14:34,880 --> 01:14:38,960
as you promote to staging and production

01:14:37,600 --> 01:14:42,239
you're using the same

01:14:38,960 --> 01:14:44,880
artifact the same build

01:14:42,239 --> 01:14:46,080
absolutely i i think let's let's look at

01:14:44,880 --> 01:14:49,280
some sources now

01:14:46,080 --> 01:14:50,800
let's look for example maybe let's uh

01:14:49,280 --> 01:14:52,400
let's see the docker file

01:14:50,800 --> 01:14:54,480
or maybe we can start with the pipeline

01:14:52,400 --> 01:14:58,719
yeah okay

01:14:54,480 --> 01:15:01,679
we can look at the the docker file um

01:14:58,719 --> 01:15:02,640
here uh a lot of these tools are are

01:15:01,679 --> 01:15:05,679
using this

01:15:02,640 --> 01:15:07,280
wonderful language called yaml get used

01:15:05,679 --> 01:15:09,760
to it because it's not going away

01:15:07,280 --> 01:15:11,760
you find it everywhere in ops tooling

01:15:09,760 --> 01:15:14,880
all over the place

01:15:11,760 --> 01:15:17,440
this pipeline product also uses yaml

01:15:14,880 --> 01:15:19,040
and it just uses it to describe each and

01:15:17,440 --> 01:15:21,600
every step that we take

01:15:19,040 --> 01:15:22,560
as long as well as the resources where

01:15:21,600 --> 01:15:25,280
we

01:15:22,560 --> 01:15:27,600
get our source from our github repos all

01:15:25,280 --> 01:15:27,600
of that

01:15:28,560 --> 01:15:32,880
so uh this describes each step um the

01:15:31,520 --> 01:15:35,280
packaging

01:15:32,880 --> 01:15:36,719
there's also some you know you can add

01:15:35,280 --> 01:15:38,560
conditionals i don't have a lot of

01:15:36,719 --> 01:15:39,760
conditionals in here but you can add

01:15:38,560 --> 01:15:42,560
conditionals

01:15:39,760 --> 01:15:44,000
something to consider what happens if at

01:15:42,560 --> 01:15:47,280
a certain step the build

01:15:44,000 --> 01:15:50,159
fails what do you want to do

01:15:47,280 --> 01:15:51,760
really important to look at that failure

01:15:50,159 --> 01:15:52,080
scenario because otherwise you're going

01:15:51,760 --> 01:15:55,040
to

01:15:52,080 --> 01:15:56,719
end up with a lot of you know headaches

01:15:55,040 --> 01:15:58,640
fixing builds quickly because everyone's

01:15:56,719 --> 01:16:01,440
stalled

01:15:58,640 --> 01:16:03,440
so make sure that you have the you know

01:16:01,440 --> 01:16:05,920
good messaging

01:16:03,440 --> 01:16:07,920
alerts that kind of thing when a build

01:16:05,920 --> 01:16:12,239
fails

01:16:07,920 --> 01:16:13,920
yep um this particular product has a lot

01:16:12,239 --> 01:16:17,440
of built-in

01:16:13,920 --> 01:16:19,360
mechanisms um and and you know like

01:16:17,440 --> 01:16:20,719
jenkins there's a lot of plug-ins you

01:16:19,360 --> 01:16:22,400
can use

01:16:20,719 --> 01:16:24,239
it's kind of nice if you have stuff

01:16:22,400 --> 01:16:25,199
built in it makes it a little easier to

01:16:24,239 --> 01:16:27,679
read

01:16:25,199 --> 01:16:28,480
but you can always re you know go back

01:16:27,679 --> 01:16:30,080
to just

01:16:28,480 --> 01:16:31,679
shell scripting if you need to do

01:16:30,080 --> 01:16:36,320
something special

01:16:31,679 --> 01:16:38,640
um all of that is available to you

01:16:36,320 --> 01:16:39,840
yeah but again let me just reiterate

01:16:38,640 --> 01:16:42,239
that this is just

01:16:39,840 --> 01:16:42,960
our example and we're here just to show

01:16:42,239 --> 01:16:46,080
you the

01:16:42,960 --> 01:16:48,239
the concept of the of the pipeline and

01:16:46,080 --> 01:16:51,679
not necessarily this particular tool

01:16:48,239 --> 01:16:54,000
uh if you take jenkins if you take a

01:16:51,679 --> 01:16:55,199
travis if you take drawn io if you take

01:16:54,000 --> 01:16:57,760
circle ci

01:16:55,199 --> 01:17:00,080
it will be the same principles maybe the

01:16:57,760 --> 01:17:01,600
syntax of the ammo file or if it's

01:17:00,080 --> 01:17:02,560
jenkins it's probably be like their

01:17:01,600 --> 01:17:04,880
groovy dsl

01:17:02,560 --> 01:17:06,480
will be a little bit different but but

01:17:04,880 --> 01:17:08,320
the ideas the principles of the

01:17:06,480 --> 01:17:09,760
pipelines are are exactly the same

01:17:08,320 --> 01:17:11,360
across the board

01:17:09,760 --> 01:17:13,440
all right and you were interested in

01:17:11,360 --> 01:17:15,520
looking at a docker file yeah because i

01:17:13,440 --> 01:17:16,000
think this is where kind of everything

01:17:15,520 --> 01:17:18,480
happens

01:17:16,000 --> 01:17:20,080
right this is where we see how we build

01:17:18,480 --> 01:17:21,760
all those parts together

01:17:20,080 --> 01:17:23,360
how we bring the maven build that

01:17:21,760 --> 01:17:24,400
obviously all the java developers are

01:17:23,360 --> 01:17:26,880
familiar with

01:17:24,400 --> 01:17:27,679
and the npm build which doesn't matter

01:17:26,880 --> 01:17:29,760
how it works

01:17:27,679 --> 01:17:31,199
it's all javascript magic but in the end

01:17:29,760 --> 01:17:33,280
of the day in

01:17:31,199 --> 01:17:34,400
in the docker file this is where we

01:17:33,280 --> 01:17:38,400
bring everything

01:17:34,400 --> 01:17:40,719
everything together great right

01:17:38,400 --> 01:17:42,640
so here's the docker file what this file

01:17:40,719 --> 01:17:45,440
does is it builds an image using the

01:17:42,640 --> 01:17:46,560
sources from our repositories that we

01:17:45,440 --> 01:17:49,760
have we have some

01:17:46,560 --> 01:17:51,679
private repositories set up we grab

01:17:49,760 --> 01:17:53,840
you know our our back end and our front

01:17:51,679 --> 01:17:56,800
end and then we put them together

01:17:53,840 --> 01:17:58,000
into our image now there is a lot that

01:17:56,800 --> 01:18:00,400
can be improved

01:17:58,000 --> 01:18:02,239
here in this particular docker file as

01:18:00,400 --> 01:18:05,360
you can see there's there's quite a few

01:18:02,239 --> 01:18:08,400
hard-coded values some things

01:18:05,360 --> 01:18:10,000
can should be passed in like

01:18:08,400 --> 01:18:11,840
for example you might not want to hard

01:18:10,000 --> 01:18:13,440
code your your registry

01:18:11,840 --> 01:18:15,199
that you're getting your artifacts from

01:18:13,440 --> 01:18:15,920
here this is something that you might

01:18:15,199 --> 01:18:18,800
want to pass

01:18:15,920 --> 01:18:20,320
in um because it's likely different per

01:18:18,800 --> 01:18:23,120
environment

01:18:20,320 --> 01:18:23,679
or per stage you know whatever stage

01:18:23,120 --> 01:18:25,679
you're

01:18:23,679 --> 01:18:27,760
you're building your image in yeah

01:18:25,679 --> 01:18:30,719
another another idea that can

01:18:27,760 --> 01:18:32,400
you can implement very easily and then

01:18:30,719 --> 01:18:34,480
have more flexibility

01:18:32,400 --> 01:18:36,159
is the versions of the dependencies that

01:18:34,480 --> 01:18:39,440
you use we use here

01:18:36,159 --> 01:18:41,199
1.0 and 3.0 as kind of a

01:18:39,440 --> 01:18:42,560
snapshot if you like right we are going

01:18:41,199 --> 01:18:45,280
to re

01:18:42,560 --> 01:18:46,880
re override them every time and this is

01:18:45,280 --> 01:18:47,360
obviously a very big practice when you

01:18:46,880 --> 01:18:49,199
go

01:18:47,360 --> 01:18:50,400
and build your production pipeline it's

01:18:49,199 --> 01:18:52,560
fine for demo

01:18:50,400 --> 01:18:54,480
but that's not how you actually should

01:18:52,560 --> 01:18:57,760
do stuff in real life

01:18:54,480 --> 01:19:00,159
instead you can use and this is a very

01:18:57,760 --> 01:19:01,760
um kind of popular practice and it's

01:19:00,159 --> 01:19:04,640
good you can use

01:19:01,760 --> 01:19:05,040
the build number of as your version and

01:19:04,640 --> 01:19:08,080
then

01:19:05,040 --> 01:19:10,560
your your ci server knows

01:19:08,080 --> 01:19:11,520
the build number of the particular run

01:19:10,560 --> 01:19:13,840
can pass it

01:19:11,520 --> 01:19:15,679
as arguments to the docker image and

01:19:13,840 --> 01:19:17,360
that will be interesting to see how we

01:19:15,679 --> 01:19:19,600
pass arguments to the docker image and

01:19:17,360 --> 01:19:22,320
you see those arg

01:19:19,600 --> 01:19:22,719
arg instructions in line number two and

01:19:22,320 --> 01:19:24,719
three

01:19:22,719 --> 01:19:26,640
you can add another arc which will be

01:19:24,719 --> 01:19:29,600
your build number and then you can

01:19:26,640 --> 01:19:30,560
refer to your backend and frontend

01:19:29,600 --> 01:19:33,440
components

01:19:30,560 --> 01:19:34,960
by those version numbers instead of

01:19:33,440 --> 01:19:37,199
hard-coded versions

01:19:34,960 --> 01:19:38,800
and that will obviously work every time

01:19:37,199 --> 01:19:40,800
because the build numbers change

01:19:38,800 --> 01:19:42,719
together with that and this will provide

01:19:40,800 --> 01:19:46,320
you with the consistency

01:19:42,719 --> 01:19:48,840
that you do pull the right um

01:19:46,320 --> 01:19:51,840
the right dependencies for your docker

01:19:48,840 --> 01:19:51,840
build

01:19:53,120 --> 01:19:57,760
that makes sense um i'm sure you have

01:19:56,560 --> 01:19:59,840
strong opinions on this

01:19:57,760 --> 01:20:02,239
a lot of docker files out there do not

01:19:59,840 --> 01:20:05,600
specify versions

01:20:02,239 --> 01:20:07,120
you can have base images it just has the

01:20:05,600 --> 01:20:09,120
name of the base image

01:20:07,120 --> 01:20:10,880
other artifacts pulled in and there is

01:20:09,120 --> 01:20:14,000
no version specified

01:20:10,880 --> 01:20:14,880
and that means that you're pulling the

01:20:14,000 --> 01:20:18,400
latest

01:20:14,880 --> 01:20:23,360
whatever latest means sometimes you

01:20:18,400 --> 01:20:26,239
might even see the tag specified latest

01:20:23,360 --> 01:20:27,920
latest is a pointer that is assigned to

01:20:26,239 --> 01:20:30,159
a particular version

01:20:27,920 --> 01:20:31,679
doesn't always mean that it's actually

01:20:30,159 --> 01:20:34,080
the latest

01:20:31,679 --> 01:20:35,679
so uh be careful when you are

01:20:34,080 --> 01:20:38,880
referencing artifacts

01:20:35,679 --> 01:20:40,320
make sure that you are using you know

01:20:38,880 --> 01:20:42,400
that you have your head wrapped around

01:20:40,320 --> 01:20:42,800
your versions and what you actually want

01:20:42,400 --> 01:20:44,639
to pull

01:20:42,800 --> 01:20:46,719
in what you want to build but you know

01:20:44,639 --> 01:20:49,920
what funny thing is it's not enough

01:20:46,719 --> 01:20:52,320
look at line four the from we specify

01:20:49,920 --> 01:20:53,280
version we say we want to take it from

01:20:52,320 --> 01:20:56,560
open jdk

01:20:53,280 --> 01:20:57,840
11. and it looks like we nailed the

01:20:56,560 --> 01:21:01,040
version down

01:20:57,840 --> 01:21:01,679
but we actually didn't because docker

01:21:01,040 --> 01:21:04,800
tags

01:21:01,679 --> 01:21:08,560
are mutable and the maintainer of

01:21:04,800 --> 01:21:11,840
this tag can decide in or in any time

01:21:08,560 --> 01:21:14,800
to change the content of what

01:21:11,840 --> 01:21:15,199
11 jdk actually means they obviously

01:21:14,800 --> 01:21:16,960
have

01:21:15,199 --> 01:21:18,960
your best interest in mind it will

01:21:16,960 --> 01:21:22,000
probably be security

01:21:18,960 --> 01:21:25,679
patches and they won't probably build

01:21:22,000 --> 01:21:27,920
break anything but sometimes it might

01:21:25,679 --> 01:21:28,960
to avoid that what you need to do is

01:21:27,920 --> 01:21:30,800
actually not use

01:21:28,960 --> 01:21:32,400
what you have in line number four but

01:21:30,800 --> 01:21:35,760
instead use what you have in

01:21:32,400 --> 01:21:36,239
line number five and this is bring the

01:21:35,760 --> 01:21:39,440
base

01:21:36,239 --> 01:21:41,360
image from your own registry

01:21:39,440 --> 01:21:44,000
and when you bring it from your own

01:21:41,360 --> 01:21:47,120
registry this is how you guarantee

01:21:44,000 --> 01:21:50,480
that it will always consistently resolve

01:21:47,120 --> 01:21:54,080
the save the same build build image

01:21:50,480 --> 01:21:56,159
every time you build so this is actually

01:21:54,080 --> 01:21:58,080
even when you specify the version

01:21:56,159 --> 01:22:00,719
you need to make sure that you are the

01:21:58,080 --> 01:22:01,280
one controlling the artifact with this

01:22:00,719 --> 01:22:03,440
version

01:22:01,280 --> 01:22:04,800
and not someone else who can actually

01:22:03,440 --> 01:22:08,159
override the version

01:22:04,800 --> 01:22:11,760
whether from good intentions or or bad

01:22:08,159 --> 01:22:14,800
yes okay i mean always

01:22:11,760 --> 01:22:18,159
aim for reproducible everything

01:22:14,800 --> 01:22:19,840
field construction deployment so be

01:22:18,159 --> 01:22:23,440
explicit

01:22:19,840 --> 01:22:26,159
and yes be careful of where you store

01:22:23,440 --> 01:22:30,000
how you store and take the right

01:22:26,159 --> 01:22:30,000
decision for your use case

01:22:30,880 --> 01:22:35,679
one other comment i have about this

01:22:32,719 --> 01:22:37,280
particular pipeline

01:22:35,679 --> 01:22:41,440
it's very good to show you know an

01:22:37,280 --> 01:22:43,040
example of possibilities what you can do

01:22:41,440 --> 01:22:45,440
but one thing i would do differently

01:22:43,040 --> 01:22:49,040
probably is definitely

01:22:45,440 --> 01:22:51,040
use create images separately

01:22:49,040 --> 01:22:52,239
for the front end and the back end

01:22:51,040 --> 01:22:54,320
because in this way

01:22:52,239 --> 01:22:56,000
you can really take advantage of your

01:22:54,320 --> 01:22:58,400
scaling capabilities

01:22:56,000 --> 01:22:59,760
you may want to scale your back-end

01:22:58,400 --> 01:23:02,639
server differently

01:22:59,760 --> 01:23:04,639
than your front-end application there's

01:23:02,639 --> 01:23:07,040
some advantages to doing that

01:23:04,639 --> 01:23:08,159
so based on load or you know other

01:23:07,040 --> 01:23:10,239
performance metrics

01:23:08,159 --> 01:23:12,400
you may notice some improvements by

01:23:10,239 --> 01:23:14,800
scaling those differently

01:23:12,400 --> 01:23:15,440
so one reason to definitely separate

01:23:14,800 --> 01:23:21,679
them out

01:23:15,440 --> 01:23:25,920
into their own services for example

01:23:21,679 --> 01:23:29,440
um lastly this is just a single pipeline

01:23:25,920 --> 01:23:32,080
um there in my mind i don't

01:23:29,440 --> 01:23:33,600
maybe an ideal situation is that's you

01:23:32,080 --> 01:23:34,080
know you only have one pipeline and

01:23:33,600 --> 01:23:35,840
that's that's

01:23:34,080 --> 01:23:37,360
what you use from beginning to end you

01:23:35,840 --> 01:23:40,000
know and it's magic

01:23:37,360 --> 01:23:42,000
developer commits code and it goes flows

01:23:40,000 --> 01:23:43,360
all the way through to production

01:23:42,000 --> 01:23:45,040
likely though you're going to have

01:23:43,360 --> 01:23:47,120
multiple pipelines

01:23:45,040 --> 01:23:48,400
each team may have their own development

01:23:47,120 --> 01:23:51,600
pipelines

01:23:48,400 --> 01:23:53,760
you are also going to have multiple

01:23:51,600 --> 01:23:55,280
deployment pipelines you may have a

01:23:53,760 --> 01:23:56,960
pipeline that is specific

01:23:55,280 --> 01:23:58,480
for deploying to your staging

01:23:56,960 --> 01:24:00,719
environment for example

01:23:58,480 --> 01:24:02,000
pipeline that deploys to your production

01:24:00,719 --> 01:24:04,719
environment and those

01:24:02,000 --> 01:24:05,840
might be manually triggered you know if

01:24:04,719 --> 01:24:07,920
you don't

01:24:05,840 --> 01:24:10,239
if you aren't comfortable or don't have

01:24:07,920 --> 01:24:12,320
enough um

01:24:10,239 --> 01:24:13,360
enough of a security blanket set up to

01:24:12,320 --> 01:24:15,760
protect you

01:24:13,360 --> 01:24:16,880
from mistakes you may want to schedule

01:24:15,760 --> 01:24:18,960
your deployments

01:24:16,880 --> 01:24:21,360
in which case you would have a separate

01:24:18,960 --> 01:24:24,159
uh deployment pipeline

01:24:21,360 --> 01:24:26,080
absolutely well this has been really

01:24:24,159 --> 01:24:27,920
informative we've learned a lot

01:24:26,080 --> 01:24:29,360
i love that the four of us have such

01:24:27,920 --> 01:24:31,760
diverse backgrounds and

01:24:29,360 --> 01:24:33,440
like we all have some good ideas and

01:24:31,760 --> 01:24:36,000
thoughts about how all of this

01:24:33,440 --> 01:24:38,000
should be pulled together um this has

01:24:36,000 --> 01:24:39,760
been an amazing experience i hope

01:24:38,000 --> 01:24:41,360
that everyone in the audience has gotten

01:24:39,760 --> 01:24:42,880
something out of this that you can take

01:24:41,360 --> 01:24:47,440
back to your teams

01:24:42,880 --> 01:24:50,400
um let us know if you have any questions

01:24:47,440 --> 01:24:52,239
yeah it looks like we have some time for

01:24:50,400 --> 01:24:54,639
questions and that will be

01:24:52,239 --> 01:24:56,400
that will be a great opportunity to talk

01:24:54,639 --> 01:24:56,960
about everything that we mentioned and

01:24:56,400 --> 01:25:00,000
more

01:24:56,960 --> 01:25:03,120
so please hit us up we're all here and

01:25:00,000 --> 01:25:04,000
ready to answer with that thank you very

01:25:03,120 --> 01:25:10,480
much

01:25:04,000 --> 01:25:10,480

YouTube URL: https://www.youtube.com/watch?v=6ftx-H8Rkls


