Title: The Past, Present, and Future of Kubernetes on Raspberry Pi - Alex Ellis, OpenFaaS Ltd
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

The Past, Present, and Future of Kubernetes on Raspberry Pi - Alex Ellis, OpenFaaS Ltd 

By now, you’ve surely heard that Kubernetes can be run on a 35 USD credit-card sized computer, but do you know how we got there, where we are today and what’s coming next? Alex has been building clusters with Docker and Raspberry Pis since 2015 and has published dozens of articles, tutorials, and even software tools to support the ecosystem. He recently published “5 years of RPi Docker Clusters” on raspberrypi.org and this talk takes you through the journey. Find out what Apple Silicon and AWS Graviton have in common with this tiny System-on-a-Chip computer - and why they are so important to its future. Learn how you can add support for all of the above devices to your own open source projects. So is an RPi cluster just for gathering dust, getting retweets, and upvotes on Hacker News, or can it also serve a real purpose? Come to this talk and find out, along with live demos. 

https://sched.co/ekAF
Captions: 
	00:00:01,520 --> 00:00:07,200
hello and welcome to my talk

00:00:04,319 --> 00:00:08,480
on kubernetes on raspberry pi we're

00:00:07,200 --> 00:00:11,759
going to look at

00:00:08,480 --> 00:00:13,759
the past the present and the future and

00:00:11,759 --> 00:00:15,280
i'm going to make this quite personal as

00:00:13,759 --> 00:00:16,560
we go through my journey

00:00:15,280 --> 00:00:18,400
but also hope there's going to be lots

00:00:16,560 --> 00:00:21,840
that you can apply here

00:00:18,400 --> 00:00:24,000
for your own raspberry pi cluster

00:00:21,840 --> 00:00:25,599
now we start at the beginning you know

00:00:24,000 --> 00:00:28,720
why would you even do this

00:00:25,599 --> 00:00:31,279
that is the question many people ask

00:00:28,720 --> 00:00:32,719
where are we today how do we get there

00:00:31,279 --> 00:00:35,760
what are the technologies what are the

00:00:32,719 --> 00:00:35,760
changes that have come in

00:00:35,840 --> 00:00:39,600
i'm going to give you a bit of materials

00:00:37,520 --> 00:00:40,239
because everyone always seems to ask for

00:00:39,600 --> 00:00:41,520
that

00:00:40,239 --> 00:00:42,879
but i'm actually going to give you more

00:00:41,520 --> 00:00:43,680
than one i'm going to give you four or

00:00:42,879 --> 00:00:45,200
five

00:00:43,680 --> 00:00:47,680
and you can pick the one that fits your

00:00:45,200 --> 00:00:49,520
budget we're also going to look at what

00:00:47,680 --> 00:00:51,520
is the future of arm

00:00:49,520 --> 00:00:53,440
um and then go on and i'm going to give

00:00:51,520 --> 00:00:54,239
you a demo that we've worked really hard

00:00:53,440 --> 00:00:58,480
on

00:00:54,239 --> 00:01:00,000
um with some cool tools as well

00:00:58,480 --> 00:01:01,760
then we'll have a cheat sheet the cheat

00:01:00,000 --> 00:01:02,800
sheet will give you common questions and

00:01:01,760 --> 00:01:04,799
answers like

00:01:02,800 --> 00:01:05,920
how do you do storage how do you get a

00:01:04,799 --> 00:01:09,360
public ip address

00:01:05,920 --> 00:01:10,799
and so forth now this is the one

00:01:09,360 --> 00:01:11,119
question that you will always get if you

00:01:10,799 --> 00:01:13,119
pass

00:01:11,119 --> 00:01:15,280
post something on hacker news or twitter

00:01:13,119 --> 00:01:18,080
what is a real world use case

00:01:15,280 --> 00:01:19,600
well new mexico there's a consortium of

00:01:18,080 --> 00:01:22,720
three universities

00:01:19,600 --> 00:01:24,479
and they built out this bitscope 750

00:01:22,720 --> 00:01:28,159
node cluster

00:01:24,479 --> 00:01:32,000
well perhaps they may not have access

00:01:28,159 --> 00:01:33,759
to the full expensive cluster

00:01:32,000 --> 00:01:35,520
um and supercomputer maybe they're

00:01:33,759 --> 00:01:37,920
having to time share it

00:01:35,520 --> 00:01:39,680
by having this pretty cost-effective

00:01:37,920 --> 00:01:41,040
unit at their disposal they can test

00:01:39,680 --> 00:01:44,000
their algorithms

00:01:41,040 --> 00:01:45,200
have very fast cycles before they can

00:01:44,000 --> 00:01:48,399
schedule time with

00:01:45,200 --> 00:01:51,840
bigger much more expensive computers

00:01:48,399 --> 00:01:52,479
so hpc is an interesting one now at the

00:01:51,840 --> 00:01:54,399
edge

00:01:52,479 --> 00:01:55,680
we see content delivery networks

00:01:54,399 --> 00:01:58,000
cloudflare

00:01:55,680 --> 00:02:00,000
wrote two years ago how they've been

00:01:58,000 --> 00:02:03,439
adopting arm 64

00:02:00,000 --> 00:02:06,079
for a lot of their workloads now

00:02:03,439 --> 00:02:08,080
have you ever got a fine or a ticket

00:02:06,079 --> 00:02:09,599
from parking in the wrong place well

00:02:08,080 --> 00:02:11,760
machine learning models running at the

00:02:09,599 --> 00:02:14,800
edge are doing things like reading

00:02:11,760 --> 00:02:18,000
plates of cars and then sending you

00:02:14,800 --> 00:02:19,599
a letter and a fine a few weeks later

00:02:18,000 --> 00:02:21,200
we've also got things like points of

00:02:19,599 --> 00:02:23,920
sale

00:02:21,200 --> 00:02:24,480
there's a use case from chick-fil-a

00:02:23,920 --> 00:02:26,239
where they

00:02:24,480 --> 00:02:28,400
run five intel nooks in their

00:02:26,239 --> 00:02:29,360
restaurants and they run kubernetes on

00:02:28,400 --> 00:02:31,599
it

00:02:29,360 --> 00:02:34,000
you could equally well do that on a rack

00:02:31,599 --> 00:02:35,760
of raspberry pies

00:02:34,000 --> 00:02:37,440
now we'll also have a look at some

00:02:35,760 --> 00:02:38,319
managed cloud services that are using

00:02:37,440 --> 00:02:40,160
arm

00:02:38,319 --> 00:02:42,720
and i think you know one of the things

00:02:40,160 --> 00:02:45,519
is we need to get ready for when

00:02:42,720 --> 00:02:46,480
arm as a laptop device becomes

00:02:45,519 --> 00:02:48,239
mainstream

00:02:46,480 --> 00:02:50,400
and we've got this all day or multi-day

00:02:48,239 --> 00:02:51,040
battery we're going to need binaries at

00:02:50,400 --> 00:02:52,640
work

00:02:51,040 --> 00:02:54,879
rashbury pi is a good way of getting on

00:02:52,640 --> 00:02:56,959
that ramp

00:02:54,879 --> 00:02:59,040
but for you i think you know the real

00:02:56,959 --> 00:03:01,200
reason needs to be because you want to

00:02:59,040 --> 00:03:02,640
and we can justify it however we want

00:03:01,200 --> 00:03:04,080
but at the end of the day this needs to

00:03:02,640 --> 00:03:05,440
be because you want to

00:03:04,080 --> 00:03:07,760
you need to be motivated because there

00:03:05,440 --> 00:03:09,440
are some challenges but

00:03:07,760 --> 00:03:11,360
um it is great to practice on real

00:03:09,440 --> 00:03:13,200
hardware i just love being able to pull

00:03:11,360 --> 00:03:15,599
an ethernet cable

00:03:13,200 --> 00:03:16,400
and be able to deploy to a real server

00:03:15,599 --> 00:03:19,680
running my house

00:03:16,400 --> 00:03:20,239
24 7 not worrying about the bill unlike

00:03:19,680 --> 00:03:22,879
if i leave

00:03:20,239 --> 00:03:24,159
stuff running on my amazon account now

00:03:22,879 --> 00:03:26,799
whether that's a website

00:03:24,159 --> 00:03:29,840
or a github bot it's up to you there's a

00:03:26,799 --> 00:03:32,959
ton of stuff you can run here

00:03:29,840 --> 00:03:36,400
my demo rig today is running k3s

00:03:32,959 --> 00:03:38,480
it's a bitscope cluster blade and

00:03:36,400 --> 00:03:39,440
unlike most raspberry pi's it's actually

00:03:38,480 --> 00:03:42,480
net booted

00:03:39,440 --> 00:03:43,519
over the network and it's running off an

00:03:42,480 --> 00:03:47,680
m

00:03:43,519 --> 00:03:48,080
v m e express storage inside an intel

00:03:47,680 --> 00:03:49,840
nok

00:03:48,080 --> 00:03:52,400
so all of those file systems are

00:03:49,840 --> 00:03:55,360
actually um pretty redundant and

00:03:52,400 --> 00:03:55,840
they're running very fast as well as

00:03:55,360 --> 00:03:57,439
that

00:03:55,840 --> 00:04:00,080
we've got some redundancy in the control

00:03:57,439 --> 00:04:03,439
plane and running three masternodes

00:04:00,080 --> 00:04:05,599
and etc d or seti d there as well

00:04:03,439 --> 00:04:07,519
and it's got a public ip address and

00:04:05,599 --> 00:04:09,120
that's how later on github actions will

00:04:07,519 --> 00:04:10,000
be able to deploy a new version of my

00:04:09,120 --> 00:04:14,000
code

00:04:10,000 --> 00:04:16,479
um straight into my house

00:04:14,000 --> 00:04:17,199
i didn't start there actually my first

00:04:16,479 --> 00:04:20,320
foray

00:04:17,199 --> 00:04:21,359
was running a blog at home and it was a

00:04:20,320 --> 00:04:24,160
ghost blog

00:04:21,359 --> 00:04:25,280
and that was in 2013 i was writing about

00:04:24,160 --> 00:04:26,880
docker and

00:04:25,280 --> 00:04:29,280
node.js and learning about all these

00:04:26,880 --> 00:04:32,160
kinds of open source tools

00:04:29,280 --> 00:04:33,919
but node.js took about three seconds to

00:04:32,160 --> 00:04:37,280
run hello world back then

00:04:33,919 --> 00:04:37,840
it was slow on on and i had to build sql

00:04:37,280 --> 00:04:39,759
lite

00:04:37,840 --> 00:04:41,360
and it took over 12 hours to get the

00:04:39,759 --> 00:04:43,759
binary and some of the times it would

00:04:41,360 --> 00:04:46,160
crash halfway through

00:04:43,759 --> 00:04:48,320
there were some problems though my isp

00:04:46,160 --> 00:04:50,400
wasn't that great back in the day

00:04:48,320 --> 00:04:51,840
and my website might have been in docker

00:04:50,400 --> 00:04:53,759
weekly

00:04:51,840 --> 00:04:55,360
and then people are messaging me saying

00:04:53,759 --> 00:04:58,479
why is your block down

00:04:55,360 --> 00:05:00,639
that wasn't a good experience

00:04:58,479 --> 00:05:02,800
performance again i had to introduce an

00:05:00,639 --> 00:05:05,919
nginx cache

00:05:02,800 --> 00:05:07,680
on the device just to get a few more

00:05:05,919 --> 00:05:10,400
requests per second out of the node.js

00:05:07,680 --> 00:05:11,600
application and then finally ingress

00:05:10,400 --> 00:05:14,160
you know you can port forward your

00:05:11,600 --> 00:05:16,479
router but you've now exposed your

00:05:14,160 --> 00:05:17,360
home address or your location to the

00:05:16,479 --> 00:05:20,160
world

00:05:17,360 --> 00:05:24,160
not a smart move and i've got a solution

00:05:20,160 --> 00:05:27,440
for you for that as well

00:05:24,160 --> 00:05:30,400
not long afterwards um well

00:05:27,440 --> 00:05:33,039
in 2016 i'd been messing about with

00:05:30,400 --> 00:05:35,199
docker and containers and clusters

00:05:33,039 --> 00:05:37,120
and built this seven node raspberry pi 2

00:05:35,199 --> 00:05:39,759
cluster just with little metal

00:05:37,120 --> 00:05:40,800
standoffs between each of them and i

00:05:39,759 --> 00:05:43,520
wrote about this in

00:05:40,800 --> 00:05:45,039
linux magazine it was published it was

00:05:43,520 --> 00:05:46,320
available on the high street

00:05:45,039 --> 00:05:49,039
and it turned out that people really

00:05:46,320 --> 00:05:52,320
love this they love the idea

00:05:49,039 --> 00:05:52,960
of running their own cluster now back

00:05:52,320 --> 00:05:56,080
then

00:05:52,960 --> 00:05:56,080
we had docker swarm

00:05:56,160 --> 00:05:59,440
but things have changed since

00:05:59,680 --> 00:06:04,880
we had to build docker and swarm itself

00:06:02,960 --> 00:06:06,000
and sometimes we didn't have to build go

00:06:04,880 --> 00:06:07,199
from source

00:06:06,000 --> 00:06:09,360
and this is something that could take

00:06:07,199 --> 00:06:10,400
hours and if you had the wrong kernel

00:06:09,360 --> 00:06:13,120
option

00:06:10,400 --> 00:06:14,080
you had to go back to the start again so

00:06:13,120 --> 00:06:16,240
when docker

00:06:14,080 --> 00:06:17,440
released their official binaries and

00:06:16,240 --> 00:06:20,080
packages in

00:06:17,440 --> 00:06:21,120
in august 2016 i was over the moon and

00:06:20,080 --> 00:06:22,479
so was

00:06:21,120 --> 00:06:24,960
the raspberry pi foundation when they

00:06:22,479 --> 00:06:27,840
wrote this post

00:06:24,960 --> 00:06:28,400
now we wouldn't be where we are without

00:06:27,840 --> 00:06:31,919
the work

00:06:28,400 --> 00:06:32,639
of lucas caldstrom a teenage boy from

00:06:31,919 --> 00:06:36,319
finland

00:06:32,639 --> 00:06:38,080
who at school had this idea he really

00:06:36,319 --> 00:06:39,759
wanted to run

00:06:38,080 --> 00:06:42,720
kubernetes components on his raspberry

00:06:39,759 --> 00:06:45,520
pi similar time as i was running swarm

00:06:42,720 --> 00:06:47,039
on my cluster and he did a lot of work

00:06:45,520 --> 00:06:48,800
and eventually he found that

00:06:47,039 --> 00:06:51,039
kubernetes was so big it wouldn't even

00:06:48,800 --> 00:06:54,000
compile and go anymore

00:06:51,039 --> 00:06:54,639
he worked upstream of the go team to get

00:06:54,000 --> 00:06:57,120
that

00:06:54,639 --> 00:06:58,479
fixed so we do have a debt of gratitude

00:06:57,120 --> 00:07:00,000
to him

00:06:58,479 --> 00:07:02,160
and he's still involved in the in the

00:07:00,000 --> 00:07:03,599
project quite heavily

00:07:02,160 --> 00:07:05,840
and one of the things that i did then

00:07:03,599 --> 00:07:08,800
was to go and write up

00:07:05,840 --> 00:07:10,639
a tutorial kubernetes on raspbian

00:07:08,800 --> 00:07:12,560
because i wasn't comfortable getting a

00:07:10,639 --> 00:07:14,080
third-party operating system

00:07:12,560 --> 00:07:16,800
i wasn't comfortable having to build a

00:07:14,080 --> 00:07:19,039
kernel i wanted to get

00:07:16,800 --> 00:07:20,800
the upstream supported raspberry pi

00:07:19,039 --> 00:07:22,960
operating system

00:07:20,800 --> 00:07:24,639
and lay down kubernetes and that's where

00:07:22,960 --> 00:07:27,039
this came about

00:07:24,639 --> 00:07:29,520
it became so popular that there's been

00:07:27,039 --> 00:07:31,120
dozens and dozens of blog posts where

00:07:29,520 --> 00:07:33,440
people have done it themselves using

00:07:31,120 --> 00:07:35,039
that work and even got to present with

00:07:33,440 --> 00:07:39,520
scott hanselman

00:07:35,039 --> 00:07:39,520
at a conference and it was a lot of fun

00:07:39,840 --> 00:07:42,880
but eventually cube adm which is what we

00:07:42,080 --> 00:07:46,080
were using there

00:07:42,880 --> 00:07:48,080
started to feel sluggish it started to

00:07:46,080 --> 00:07:49,759
fail because the timeouts were

00:07:48,080 --> 00:07:53,360
designed for cloud computers that were

00:07:49,759 --> 00:07:53,360
much more powerful

00:07:53,440 --> 00:07:57,440
and we had this time where i couldn't

00:07:56,639 --> 00:08:00,240
really run

00:07:57,440 --> 00:08:02,160
kubernetes on my raspberry pi anymore um

00:08:00,240 --> 00:08:03,759
the raspberry pi 2 was completely ruled

00:08:02,160 --> 00:08:07,520
out due to a bug

00:08:03,759 --> 00:08:09,280
and then darren shepard released k3s

00:08:07,520 --> 00:08:10,800
originally it was a something like an 8

00:08:09,280 --> 00:08:14,080
million line patch

00:08:10,800 --> 00:08:16,960
to make it small today

00:08:14,080 --> 00:08:18,479
it is a much less of a patch in fact you

00:08:16,960 --> 00:08:20,000
can install it with curl

00:08:18,479 --> 00:08:22,479
or with ketchup and you'll have

00:08:20,000 --> 00:08:25,199
kubernetes in less than 30 seconds

00:08:22,479 --> 00:08:25,680
even on a raspberry pi now you couldn't

00:08:25,199 --> 00:08:28,240
have got

00:08:25,680 --> 00:08:29,520
anywhere near as fast with cube admin

00:08:28,240 --> 00:08:31,680
before

00:08:29,520 --> 00:08:33,599
the resources that it takes are just 500

00:08:31,680 --> 00:08:35,839
megs not your two gigs

00:08:33,599 --> 00:08:36,719
per server um and then if you're adding

00:08:35,839 --> 00:08:38,640
a worker

00:08:36,719 --> 00:08:41,039
and we're looking at 50 megs of ram it

00:08:38,640 --> 00:08:44,080
is so low

00:08:41,039 --> 00:08:46,240
but it's also useful for public cloud um

00:08:44,080 --> 00:08:48,320
and you can run this on amazon you can

00:08:46,240 --> 00:08:50,959
add the cloud controller

00:08:48,320 --> 00:08:52,560
you can get storage volumes load

00:08:50,959 --> 00:08:55,200
balancers you can add all that back in

00:08:52,560 --> 00:08:56,959
if you want

00:08:55,200 --> 00:08:59,040
and then the high availability story

00:08:56,959 --> 00:09:03,680
here is you can actually use

00:08:59,040 --> 00:09:06,000
sql or rds so set up postgres

00:09:03,680 --> 00:09:08,000
and then that takes over the role of

00:09:06,000 --> 00:09:10,320
keeping the cluster state

00:09:08,000 --> 00:09:12,320
and you can actually scale these to

00:09:10,320 --> 00:09:16,800
hundreds of thousands of clusters all

00:09:12,320 --> 00:09:16,800
of one database pretty interesting

00:09:17,200 --> 00:09:21,519
now 3 is less than 8 and that's where

00:09:20,160 --> 00:09:23,440
the name comes from

00:09:21,519 --> 00:09:24,560
it's idea of shrinking down and this is

00:09:23,440 --> 00:09:26,959
something that

00:09:24,560 --> 00:09:28,800
really has resonated well with people i

00:09:26,959 --> 00:09:30,720
was at darren shepard's talk

00:09:28,800 --> 00:09:32,240
and people had their you know their

00:09:30,720 --> 00:09:32,959
backs against the wall it was standing

00:09:32,240 --> 00:09:34,880
room only

00:09:32,959 --> 00:09:36,240
there was so many people interested in

00:09:34,880 --> 00:09:39,519
this

00:09:36,240 --> 00:09:40,800
but it is still full kubernetes and it

00:09:39,519 --> 00:09:42,320
is ga

00:09:40,800 --> 00:09:44,959
so you don't have to worry that it's

00:09:42,320 --> 00:09:46,480
only for your raspberry pi

00:09:44,959 --> 00:09:48,800
now part of the reason that it is

00:09:46,480 --> 00:09:50,480
actually so quick is because

00:09:48,800 --> 00:09:52,399
what darren's done is he said right

00:09:50,480 --> 00:09:53,760
instead of picking a network driver it's

00:09:52,399 --> 00:09:57,200
always flannel

00:09:53,760 --> 00:10:00,560
instead of having accepted a seti

00:09:57,200 --> 00:10:02,880
running we're going to use sql lite much

00:10:00,560 --> 00:10:04,079
smaller instead of installing docker and

00:10:02,880 --> 00:10:05,680
getting the right runtime we're just

00:10:04,079 --> 00:10:07,680
going to use container d and skip locker

00:10:05,680 --> 00:10:10,320
completely

00:10:07,680 --> 00:10:11,760
and that kind of you could think well

00:10:10,320 --> 00:10:12,800
kubernetes is about configuring

00:10:11,760 --> 00:10:15,200
everything possible

00:10:12,800 --> 00:10:16,079
and isn't that great you can bring some

00:10:15,200 --> 00:10:18,160
of those things back

00:10:16,079 --> 00:10:19,360
in but actually having somebody said

00:10:18,160 --> 00:10:21,760
it's okay

00:10:19,360 --> 00:10:23,760
to have these settings means you can

00:10:21,760 --> 00:10:26,320
move really fast

00:10:23,760 --> 00:10:27,200
on a bonus point you get volume

00:10:26,320 --> 00:10:29,839
provisioning

00:10:27,200 --> 00:10:30,240
you get an ingress controller metrics

00:10:29,839 --> 00:10:32,399
and

00:10:30,240 --> 00:10:33,839
darren's even added a way of installing

00:10:32,399 --> 00:10:36,000
helm charts so

00:10:33,839 --> 00:10:39,120
it's pretty pretty good package and he's

00:10:36,000 --> 00:10:40,800
updating all the time

00:10:39,120 --> 00:10:42,160
now if you think of this journey and the

00:10:40,800 --> 00:10:43,200
sort of the last few slides have

00:10:42,160 --> 00:10:46,079
explained

00:10:43,200 --> 00:10:47,200
the time that we had go binaries was

00:10:46,079 --> 00:10:50,800
probably about

00:10:47,200 --> 00:10:54,079
the raspberry pi 2 timeline docker

00:10:50,800 --> 00:10:56,800
then got support for arm and alexandros

00:10:54,079 --> 00:10:57,360
at resin did a lot of work for that as

00:10:56,800 --> 00:11:00,399
did

00:10:57,360 --> 00:11:01,839
stefan andita hyprio

00:11:00,399 --> 00:11:03,519
around the time classic swarm was

00:11:01,839 --> 00:11:04,800
popular i spent a lot of time porting

00:11:03,519 --> 00:11:06,720
the binaries

00:11:04,800 --> 00:11:09,120
i went to dockercon and gave a talk

00:11:06,720 --> 00:11:12,320
where i had sensors interacting with

00:11:09,120 --> 00:11:14,480
the cluster and detecting motion

00:11:12,320 --> 00:11:17,279
then we got those docker packages in

00:11:14,480 --> 00:11:19,360
2016 which were great

00:11:17,279 --> 00:11:21,360
moving on from there solomon had the

00:11:19,360 --> 00:11:24,720
grand vision of docker swarm

00:11:21,360 --> 00:11:26,959
the new version um and then

00:11:24,720 --> 00:11:29,600
lucas comes into the picture and then

00:11:26,959 --> 00:11:31,360
kubernetes on raspbian

00:11:29,600 --> 00:11:33,440
we have a big gap there maybe a couple

00:11:31,360 --> 00:11:36,160
of years and then k3s

00:11:33,440 --> 00:11:37,040
arrives and it just completely changes

00:11:36,160 --> 00:11:40,320
the conversation

00:11:37,040 --> 00:11:43,040
about kubernetes on arm

00:11:40,320 --> 00:11:45,040
we get the 64-bit raspbian os that's

00:11:43,040 --> 00:11:48,399
still in beta as i speak

00:11:45,040 --> 00:11:50,480
but ubuntu 20 is available as well

00:11:48,399 --> 00:11:52,399
okay so by default we're running a

00:11:50,480 --> 00:11:54,800
32-bit operating system

00:11:52,399 --> 00:11:56,079
for compatibility backwards but this

00:11:54,800 --> 00:11:59,440
64-bit is where

00:11:56,079 --> 00:12:00,720
where the future is now when it comes to

00:11:59,440 --> 00:12:02,240
building your own

00:12:00,720 --> 00:12:04,079
i want to think about what you know what

00:12:02,240 --> 00:12:04,560
is your budget what are you willing to

00:12:04,079 --> 00:12:08,079
spend

00:12:04,560 --> 00:12:08,079
and what do you want to do with it

00:12:08,959 --> 00:12:13,519
if you're looking to use spare parts it

00:12:11,839 --> 00:12:15,760
could cost you nothing

00:12:13,519 --> 00:12:18,160
you might already have this stuff um

00:12:15,760 --> 00:12:21,680
this was the way i entered into it

00:12:18,160 --> 00:12:22,399
copper standoffs raspberry pi 3 some sd

00:12:21,680 --> 00:12:25,440
cards

00:12:22,399 --> 00:12:28,560
and you can use a multi charger for

00:12:25,440 --> 00:12:30,320
powering these if you get a 60 watt

00:12:28,560 --> 00:12:31,600
if you want to net boot though you're

00:12:30,320 --> 00:12:34,560
going to need the b

00:12:31,600 --> 00:12:35,120
3 plus i have the older b i've got 25 of

00:12:34,560 --> 00:12:36,839
them

00:12:35,120 --> 00:12:39,600
and i can't net boot them and it's

00:12:36,839 --> 00:12:41,519
annoying

00:12:39,600 --> 00:12:42,639
if you're building on a budget this is

00:12:41,519 --> 00:12:45,440
where most of you are

00:12:42,639 --> 00:12:46,000
expect you want to start here you only

00:12:45,440 --> 00:12:48,240
need one

00:12:46,000 --> 00:12:50,560
raspberry pi to run k3s you don't need

00:12:48,240 --> 00:12:50,560
10.

00:12:50,880 --> 00:12:56,320
and maybe pick a number like four and

00:12:53,360 --> 00:12:57,920
you can either buy the two gig model

00:12:56,320 --> 00:13:00,320
i'm using that for my demo i'm using

00:12:57,920 --> 00:13:01,200
four of them or you can go up to eight

00:13:00,320 --> 00:13:03,920
gigs

00:13:01,200 --> 00:13:05,200
i mean um k3s doesn't need a lot of

00:13:03,920 --> 00:13:06,720
resources you just need to think about

00:13:05,200 --> 00:13:08,800
what you want to run

00:13:06,720 --> 00:13:10,079
but you will need official power

00:13:08,800 --> 00:13:13,040
supplies one

00:13:10,079 --> 00:13:13,760
each you can't use a multi-charger i've

00:13:13,040 --> 00:13:15,279
been there

00:13:13,760 --> 00:13:17,519
i've done that it doesn't have enough

00:13:15,279 --> 00:13:20,320
power it will brown out

00:13:17,519 --> 00:13:20,800
and you must add fans okay a case like

00:13:20,320 --> 00:13:24,079
this

00:13:20,800 --> 00:13:25,440
will give you that as an upgrade though

00:13:24,079 --> 00:13:28,399
you can net boot from

00:13:25,440 --> 00:13:30,639
an ssd in a pc and then this will be so

00:13:28,399 --> 00:13:33,360
fast

00:13:30,639 --> 00:13:35,279
now turing pi you may have heard of this

00:13:33,360 --> 00:13:35,920
they sent me one to play with it's over

00:13:35,279 --> 00:13:38,480
here

00:13:35,920 --> 00:13:39,519
it's pretty expensive but what i like

00:13:38,480 --> 00:13:42,079
about it is there's

00:13:39,519 --> 00:13:43,680
one cable for power and one cable for

00:13:42,079 --> 00:13:46,240
ethernet and that's that

00:13:43,680 --> 00:13:48,000
you then program compute modules and

00:13:46,240 --> 00:13:51,360
they're like mini raspberry pies but

00:13:48,000 --> 00:13:51,600
without any ports plug them in boot it

00:13:51,360 --> 00:13:55,040
up

00:13:51,600 --> 00:13:56,000
and you're done now the cm4 is arriving

00:13:55,040 --> 00:13:58,560
soon

00:13:56,000 --> 00:14:00,079
um in fact it's already been released

00:13:58,560 --> 00:14:01,920
and there'll be a chewing pie too

00:14:00,079 --> 00:14:03,839
that will take these and it's going to

00:14:01,920 --> 00:14:06,720
be a beast it's going to have

00:14:03,839 --> 00:14:10,079
ssds in it it will be ridiculously

00:14:06,720 --> 00:14:12,560
expensive but also very fast

00:14:10,079 --> 00:14:13,680
but best in class and this is what i

00:14:12,560 --> 00:14:16,079
have

00:14:13,680 --> 00:14:18,399
is to go and get an edge rack something

00:14:16,079 --> 00:14:21,040
that you can mount in your garage

00:14:18,399 --> 00:14:22,320
you can put a upc on it you can boot it

00:14:21,040 --> 00:14:24,800
off the network

00:14:22,320 --> 00:14:28,160
ups rather you can power it with a

00:14:24,800 --> 00:14:29,600
proper 12 to 24 volt power

00:14:28,160 --> 00:14:31,360
you could even go and install this in a

00:14:29,600 --> 00:14:33,680
shop somewhere or an

00:14:31,360 --> 00:14:34,639
off-site and this could run your

00:14:33,680 --> 00:14:36,880
workloads

00:14:34,639 --> 00:14:38,399
manage it remotely and this is where

00:14:36,880 --> 00:14:41,040
industrial raspberry pi thing is really

00:14:38,399 --> 00:14:43,760
going to take off

00:14:41,040 --> 00:14:45,279
so over those last five years of

00:14:43,760 --> 00:14:49,120
building these clusters and

00:14:45,279 --> 00:14:52,480
tinkering and writing blog posts

00:14:49,120 --> 00:14:55,120
i noticed a certain number of problems

00:14:52,480 --> 00:14:57,600
and it was always the same sort of thing

00:14:55,120 --> 00:14:59,120
how do i deploy code it's so confusing

00:14:57,600 --> 00:15:01,279
to write yaml

00:14:59,120 --> 00:15:03,279
i need a network connection i don't know

00:15:01,279 --> 00:15:04,800
what software is available for arm and i

00:15:03,279 --> 00:15:06,560
spend half my time installing things

00:15:04,800 --> 00:15:08,880
that don't work

00:15:06,560 --> 00:15:10,800
well you can go and read this blog post

00:15:08,880 --> 00:15:11,199
and it shows you all of those things i

00:15:10,800 --> 00:15:12,560
create

00:15:11,199 --> 00:15:14,800
some stuff that maybe will get you

00:15:12,560 --> 00:15:17,279
inspired

00:15:14,800 --> 00:15:19,600
but to sum up these are four of the

00:15:17,279 --> 00:15:22,959
projects that came out of that journey

00:15:19,600 --> 00:15:24,639
the first is open fast and open faz is

00:15:22,959 --> 00:15:27,680
something that you can deploy and

00:15:24,639 --> 00:15:28,560
it does work on on it will then allow

00:15:27,680 --> 00:15:31,120
you to

00:15:28,560 --> 00:15:33,839
deploy functions and apis so if you have

00:15:31,120 --> 00:15:36,160
a website hook receiver or blog

00:15:33,839 --> 00:15:37,759
um if you want to write a microservice

00:15:36,160 --> 00:15:40,880
in java python

00:15:37,759 --> 00:15:42,560
go you name it it can get you there very

00:15:40,880 --> 00:15:45,759
quickly

00:15:42,560 --> 00:15:47,360
k3s can be installed with curl but also

00:15:45,759 --> 00:15:48,959
could mean sort of catch up and so if

00:15:47,360 --> 00:15:51,920
you like to dock a swarm

00:15:48,959 --> 00:15:54,079
where it's in it on one node and then

00:15:51,920 --> 00:15:55,680
join on another one with a token

00:15:54,079 --> 00:15:58,320
ketchup brings that back i'm going to

00:15:55,680 --> 00:16:00,720
show you the syntax

00:15:58,320 --> 00:16:01,920
inlets allows you to get a public ip

00:16:00,720 --> 00:16:03,600
address for load balance so that's

00:16:01,920 --> 00:16:06,160
something that you just can't get

00:16:03,600 --> 00:16:07,600
normally in a cloud whenever you deploy

00:16:06,160 --> 00:16:08,560
a service it normally has a load

00:16:07,600 --> 00:16:10,639
balancer

00:16:08,560 --> 00:16:12,079
the cloud will provision a hardware

00:16:10,639 --> 00:16:14,399
software load balancer

00:16:12,079 --> 00:16:15,759
hook up an ip address for you so if your

00:16:14,399 --> 00:16:19,279
traffic

00:16:15,759 --> 00:16:21,279
you can't do that at home you can now

00:16:19,279 --> 00:16:24,000
if you install inlets and there's an

00:16:21,279 --> 00:16:27,920
operator that works with kubernetes

00:16:24,000 --> 00:16:29,920
and then the last thing is arcade um

00:16:27,920 --> 00:16:31,920
it will tell you if a chart is

00:16:29,920 --> 00:16:32,959
compatible or not and we have about 30

00:16:31,920 --> 00:16:34,639
there

00:16:32,959 --> 00:16:36,880
there are things like istio which is

00:16:34,639 --> 00:16:39,199
currently not available for raspberry pi

00:16:36,880 --> 00:16:40,800
but maybe in the future and things like

00:16:39,199 --> 00:16:43,360
open files

00:16:40,800 --> 00:16:46,560
things like mineo which are and that you

00:16:43,360 --> 00:16:46,560
can just go and install

00:16:46,880 --> 00:16:50,560
now i want to show you a demo putting

00:16:49,120 --> 00:16:52,320
all of this together

00:16:50,560 --> 00:16:54,399
and this is for i'm not going to say

00:16:52,320 --> 00:16:56,560
it's a blog it's more like a cms

00:16:54,399 --> 00:16:58,079
because there's probably not much point

00:16:56,560 --> 00:17:00,320
running a blog on a raspberry pi

00:16:58,079 --> 00:17:02,480
it may be a bit overpowered for that you

00:17:00,320 --> 00:17:04,160
can use a cdn

00:17:02,480 --> 00:17:05,919
but what if you want to get a better

00:17:04,160 --> 00:17:08,559
experience or what if you want to

00:17:05,919 --> 00:17:10,959
run a blog of blogs what if you want to

00:17:08,559 --> 00:17:14,000
run a sas for a thousand customers

00:17:10,959 --> 00:17:16,319
maybe you could think about it like this

00:17:14,000 --> 00:17:18,240
we have an admin panel it's called ad

00:17:16,319 --> 00:17:20,000
post and that's a function

00:17:18,240 --> 00:17:21,600
we write a bit of mark down and tell it

00:17:20,000 --> 00:17:23,919
what the name is

00:17:21,600 --> 00:17:25,360
we then do a git commit and hands are

00:17:23,919 --> 00:17:28,799
off at that point

00:17:25,360 --> 00:17:32,960
next a github action in your git repo

00:17:28,799 --> 00:17:36,240
will run hugo take the mark down

00:17:32,960 --> 00:17:39,600
output html put it in a docker file

00:17:36,240 --> 00:17:42,080
and then deploy it to your cluster

00:17:39,600 --> 00:17:43,120
as the blog function and we can have all

00:17:42,080 --> 00:17:46,000
of that

00:17:43,120 --> 00:17:46,640
in a loop where we don't have to get

00:17:46,000 --> 00:17:49,200
involved

00:17:46,640 --> 00:17:50,000
all you do is you write your code in a

00:17:49,200 --> 00:17:52,160
web page

00:17:50,000 --> 00:17:53,760
hit commit it's password protected and

00:17:52,160 --> 00:17:57,039
then you get it published on your blog

00:17:53,760 --> 00:17:57,840
static content well that's what we're

00:17:57,039 --> 00:18:00,720
going to do

00:17:57,840 --> 00:18:02,000
so the first thing is i took my

00:18:00,720 --> 00:18:05,200
raspberry pi's

00:18:02,000 --> 00:18:06,640
and i ran ketchup install i put the ip

00:18:05,200 --> 00:18:08,640
address and the user

00:18:06,640 --> 00:18:10,960
i then went to the next one and i did

00:18:08,640 --> 00:18:12,799
join and i gave it the server's ip

00:18:10,960 --> 00:18:15,919
address

00:18:12,799 --> 00:18:18,559
and then i had a cluster and it just

00:18:15,919 --> 00:18:20,080
took a few minutes

00:18:18,559 --> 00:18:22,720
the next thing i did is i used the

00:18:20,080 --> 00:18:23,280
arcade tool and whilst you can go off to

00:18:22,720 --> 00:18:25,600
brew

00:18:23,280 --> 00:18:26,880
apt-get or troll the internet to get

00:18:25,600 --> 00:18:28,640
cubecuttle

00:18:26,880 --> 00:18:30,960
um this is a really easy way of getting

00:18:28,640 --> 00:18:34,320
it so i ran cube cuttle get

00:18:30,960 --> 00:18:36,559
arcade get sorry rk get cube cuddle

00:18:34,320 --> 00:18:38,240
get ketchup get fast cli and run these

00:18:36,559 --> 00:18:41,120
commands

00:18:38,240 --> 00:18:41,760
i then installed open fast and with each

00:18:41,120 --> 00:18:44,320
of these

00:18:41,760 --> 00:18:45,840
apps or charts you can pass parameters

00:18:44,320 --> 00:18:48,480
and then i installed

00:18:45,840 --> 00:18:49,360
um an ingress controller and cert

00:18:48,480 --> 00:18:51,679
manager

00:18:49,360 --> 00:18:52,720
right because i want some way of getting

00:18:51,679 --> 00:18:54,640
tls on there

00:18:52,720 --> 00:18:57,840
because i want this to be secure and

00:18:54,640 --> 00:18:57,840
mapping that to my domain

00:18:58,000 --> 00:19:01,679
now open fast is quite simple to get

00:19:00,880 --> 00:19:04,240
started with

00:19:01,679 --> 00:19:05,280
but it's also really powerful if you

00:19:04,240 --> 00:19:08,480
want to

00:19:05,280 --> 00:19:11,520
you can just run faster line new

00:19:08,480 --> 00:19:14,960
and put python3 c-sharp

00:19:11,520 --> 00:19:16,960
go php pick a language the name of your

00:19:14,960 --> 00:19:19,760
function is a stripe payment

00:19:16,960 --> 00:19:22,160
and then when you run faster you lie up

00:19:19,760 --> 00:19:24,000
it will deploy to your instance

00:19:22,160 --> 00:19:25,520
by building an image pushing in a

00:19:24,000 --> 00:19:26,880
registry and then pulling it into the

00:19:25,520 --> 00:19:29,679
cluster

00:19:26,880 --> 00:19:30,480
and so you can kind of see on this

00:19:29,679 --> 00:19:33,840
picture

00:19:30,480 --> 00:19:36,960
the ways to interact by cli ui

00:19:33,840 --> 00:19:38,799
and the rest api we also have metrics

00:19:36,960 --> 00:19:39,360
built into this so prometheus will tell

00:19:38,799 --> 00:19:42,320
you

00:19:39,360 --> 00:19:43,440
if you have any 500s if the api is

00:19:42,320 --> 00:19:46,640
getting called a lot like

00:19:43,440 --> 00:19:47,600
a popular blog then it will get scaled

00:19:46,640 --> 00:19:50,400
up for you

00:19:47,600 --> 00:19:52,000
and also if you have something i don't

00:19:50,400 --> 00:19:54,799
know let's say the publish of the blog

00:19:52,000 --> 00:19:56,799
took three seconds we can run that

00:19:54,799 --> 00:19:59,919
asynchronously in the background

00:19:56,799 --> 00:20:02,880
using nats okay and this is something

00:19:59,919 --> 00:20:04,799
you can install the total amount of ram

00:20:02,880 --> 00:20:07,440
is less than 300 megs and

00:20:04,799 --> 00:20:09,520
most of that is prometheus and

00:20:07,440 --> 00:20:12,400
prometheus is a time series database to

00:20:09,520 --> 00:20:12,400
collect your metrics

00:20:12,559 --> 00:20:17,200
this is how things look then for our

00:20:14,480 --> 00:20:17,200
demo today

00:20:18,000 --> 00:20:21,440
at the bottom left we've got the two

00:20:19,919 --> 00:20:24,000
functions in the boxes

00:20:21,440 --> 00:20:25,039
in the circles they're attached to our

00:20:24,000 --> 00:20:26,640
gateway

00:20:25,039 --> 00:20:28,880
a gateway is accessed through an ingress

00:20:26,640 --> 00:20:29,840
controller and has a certificate from

00:20:28,880 --> 00:20:32,159
let's encrypt

00:20:29,840 --> 00:20:33,440
pretty standard but that's normally

00:20:32,159 --> 00:20:35,520
where things end

00:20:33,440 --> 00:20:36,559
because we don't have any way of getting

00:20:35,520 --> 00:20:38,480
internet in

00:20:36,559 --> 00:20:40,799
maybe you open a port on your firewall

00:20:38,480 --> 00:20:43,600
if your isp allows you

00:20:40,799 --> 00:20:44,799
but in my example installed this inlet

00:20:43,600 --> 00:20:47,520
operator

00:20:44,799 --> 00:20:48,080
it created a tunnel the tunnel was

00:20:47,520 --> 00:20:51,440
created

00:20:48,080 --> 00:20:54,080
on an ec2 vm and then

00:20:51,440 --> 00:20:55,200
when my github action talks to that vm's

00:20:54,080 --> 00:20:57,840
ip address

00:20:55,200 --> 00:20:58,880
or my user comes and tries to get to the

00:20:57,840 --> 00:21:01,919
blog

00:20:58,880 --> 00:21:04,960
it gets tunneled back into my network

00:21:01,919 --> 00:21:09,039
hopefully that makes sense

00:21:04,960 --> 00:21:12,240
so let's go and try this demo out

00:21:09,039 --> 00:21:16,159
so first of all this is the blog

00:21:12,240 --> 00:21:18,720
and you can see that this is um

00:21:16,159 --> 00:21:18,720
running on

00:21:24,799 --> 00:21:28,840
this is running on the public internet

00:21:27,600 --> 00:21:33,600
it's got a tls

00:21:28,840 --> 00:21:36,400
certificate and it's showing as valid

00:21:33,600 --> 00:21:37,600
if i go into my cluster and i get my

00:21:36,400 --> 00:21:40,960
services

00:21:37,600 --> 00:21:44,480
in the cube system namespace

00:21:40,960 --> 00:21:46,080
we'll see that the external ip address

00:21:44,480 --> 00:21:48,080
is showing here too

00:21:46,080 --> 00:21:50,320
and then i have an ingress record for

00:21:48,080 --> 00:21:50,320
this

00:21:52,640 --> 00:21:57,039
and we can see it there cubecon

00:21:54,960 --> 00:22:01,039
ketchup.dev

00:21:57,039 --> 00:22:02,559
okay the last post is this one from the

00:22:01,039 --> 00:22:03,280
community meeting and i just took the

00:22:02,559 --> 00:22:06,320
notes if you

00:22:03,280 --> 00:22:07,120
attended it and here is my function

00:22:06,320 --> 00:22:10,159
where i can

00:22:07,120 --> 00:22:10,960
basically come in and write a post now

00:22:10,159 --> 00:22:13,760
what i thought

00:22:10,960 --> 00:22:17,200
is we could just um take a bit of the

00:22:13,760 --> 00:22:17,200
ketchup readme file

00:22:18,240 --> 00:22:21,440
and enter it here

00:22:24,320 --> 00:22:27,840
and we're just going to give this a

00:22:25,520 --> 00:22:27,840
title

00:22:29,039 --> 00:22:32,799
and you can see that i've entered some

00:22:30,400 --> 00:22:34,480
markdown i mean this is not a product

00:22:32,799 --> 00:22:37,120
it's just an example

00:22:34,480 --> 00:22:40,080
and um what i want to do is show you

00:22:37,120 --> 00:22:42,000
that now when i hit commit

00:22:40,080 --> 00:22:43,360
something's happening in the background

00:22:42,000 --> 00:22:47,440
my raspberry pi

00:22:43,360 --> 00:22:47,440
is doing a push to the github repo

00:22:47,919 --> 00:22:51,919
and we'll be able to see a new commit

00:22:52,080 --> 00:22:56,720
just here 12 seconds ago we can go into

00:22:55,919 --> 00:22:59,120
it

00:22:56,720 --> 00:23:01,280
and we can see what it's put in place

00:22:59,120 --> 00:23:04,640
and it's generated a header for us

00:23:01,280 --> 00:23:04,640
also generated a file name

00:23:05,120 --> 00:23:11,679
but a github action has started to run

00:23:08,640 --> 00:23:12,880
and this github action is going to clone

00:23:11,679 --> 00:23:15,120
the repo

00:23:12,880 --> 00:23:16,240
it's then going to use the openvas hugo

00:23:15,120 --> 00:23:21,440
template

00:23:16,240 --> 00:23:24,080
to build that html

00:23:21,440 --> 00:23:25,679
in fact at this point in time the image

00:23:24,080 --> 00:23:26,799
is almost ready to be pushed to the

00:23:25,679 --> 00:23:28,480
docker hub

00:23:26,799 --> 00:23:31,840
we're now logging into the open fast

00:23:28,480 --> 00:23:35,280
gateway over the inlets tunnel

00:23:31,840 --> 00:23:36,799
this is going to be pushed remotely

00:23:35,280 --> 00:23:40,400
and then we'll see the new version of

00:23:36,799 --> 00:23:40,400
the blog up here with that post

00:23:45,440 --> 00:23:49,200
right let's try it out so we need to go

00:23:48,880 --> 00:23:52,240
to

00:23:49,200 --> 00:23:52,240
the blog function

00:23:52,640 --> 00:23:57,600
and there we are it's that i need

00:23:55,760 --> 00:24:00,320
that probably was less than a minute in

00:23:57,600 --> 00:24:02,880
total there's several things we can

00:24:00,320 --> 00:24:05,279
optimize along the way we could make a

00:24:02,880 --> 00:24:09,279
better markdown editor

00:24:05,279 --> 00:24:09,279
you know the sky is the limit there

00:24:09,360 --> 00:24:13,039
if we have a look at the events

00:24:14,159 --> 00:24:19,919
in the open fn namespace we'll see that

00:24:17,760 --> 00:24:21,600
the probe liveness probe stopped working

00:24:19,919 --> 00:24:22,480
on the old container the new one was

00:24:21,600 --> 00:24:24,960
pulled in

00:24:22,480 --> 00:24:27,200
we can actually see the git sha here

00:24:24,960 --> 00:24:29,440
that was used for the image and the tag

00:24:27,200 --> 00:24:30,400
and that's a multi-arch image built on

00:24:29,440 --> 00:24:33,279
the cloud

00:24:30,400 --> 00:24:34,400
deployed on our cluster i also want to

00:24:33,279 --> 00:24:38,880
show you

00:24:34,400 --> 00:24:41,520
um that we can get we can get the top

00:24:38,880 --> 00:24:43,039
pods across the cluster and see what

00:24:41,520 --> 00:24:46,080
resources they're using

00:24:43,039 --> 00:24:47,360
so we've got cpu usage prometheus is

00:24:46,080 --> 00:24:48,799
actually one of the busier things that

00:24:47,360 --> 00:24:51,840
we've got here

00:24:48,799 --> 00:24:53,039
the blog is basically almost idle and

00:24:51,840 --> 00:24:55,440
then we can look at the memory

00:24:53,039 --> 00:24:57,760
consumption

00:24:55,440 --> 00:24:59,200
and there's a bunch of things that come

00:24:57,760 --> 00:25:00,320
with k3s that are running in the

00:24:59,200 --> 00:25:02,159
background but

00:25:00,320 --> 00:25:03,679
overall we're not really using a lot of

00:25:02,159 --> 00:25:06,640
resources

00:25:03,679 --> 00:25:08,400
we can also run top node and we're

00:25:06,640 --> 00:25:10,320
getting this data because

00:25:08,400 --> 00:25:11,840
k3s comes with the metric server built

00:25:10,320 --> 00:25:13,200
in

00:25:11,840 --> 00:25:15,840
and then the other one that might be

00:25:13,200 --> 00:25:19,840
interesting is um

00:25:15,840 --> 00:25:22,240
is to get the notes and here we see

00:25:19,840 --> 00:25:23,200
that three are running a saturday um as

00:25:22,240 --> 00:25:25,840
masters

00:25:23,200 --> 00:25:26,320
and one is an agent if one of these was

00:25:25,840 --> 00:25:28,720
to

00:25:26,320 --> 00:25:31,840
disappear we'd be able to tolerate that

00:25:28,720 --> 00:25:31,840
failure and carry on

00:25:36,159 --> 00:25:39,600
so that's a taste of what you can do

00:25:38,400 --> 00:25:42,960
with your own cluster

00:25:39,600 --> 00:25:45,039
but now when we look towards the future

00:25:42,960 --> 00:25:46,480
i think managed cloud has got a lot to

00:25:45,039 --> 00:25:50,400
do with this

00:25:46,480 --> 00:25:52,480
journey amazon produced aws produced a

00:25:50,400 --> 00:25:54,799
graviton chip several years ago

00:25:52,480 --> 00:25:56,559
they've now introduced a new chip called

00:25:54,799 --> 00:25:58,400
graviton 2

00:25:56,559 --> 00:26:01,200
which is on compatible you see a little

00:25:58,400 --> 00:26:01,200
picture of it there

00:26:01,600 --> 00:26:05,600
and then not only can you get the whole

00:26:03,360 --> 00:26:07,679
machine as bare metal but you can get

00:26:05,600 --> 00:26:11,520
individual slices of it

00:26:07,679 --> 00:26:15,520
as instances with as little as one core

00:26:11,520 --> 00:26:17,520
or or two gigs of ram

00:26:15,520 --> 00:26:20,480
you can then go and use this with their

00:26:17,520 --> 00:26:22,960
managed services like rds and elasticash

00:26:20,480 --> 00:26:24,559
and save money in fact there's a user

00:26:22,960 --> 00:26:25,919
here this tweet was i think was from

00:26:24,559 --> 00:26:28,400
yesterday

00:26:25,919 --> 00:26:29,120
and valentino you can show you a graph

00:26:28,400 --> 00:26:31,760
here

00:26:29,120 --> 00:26:32,640
of how much um that is actually costing

00:26:31,760 --> 00:26:35,919
him per hit

00:26:32,640 --> 00:26:38,640
inside his company

00:26:35,919 --> 00:26:39,120
now if you need real control and you

00:26:38,640 --> 00:26:42,320
want

00:26:39,120 --> 00:26:44,960
very big servers packet

00:26:42,320 --> 00:26:46,080
also known as equinix metal have great

00:26:44,960 --> 00:26:48,400
options here

00:26:46,080 --> 00:26:51,039
um and their data center link is you

00:26:48,400 --> 00:26:54,080
know in in the regions of

00:26:51,039 --> 00:26:55,120
tens of gigabytes it's really um really

00:26:54,080 --> 00:26:56,880
fast

00:26:55,120 --> 00:26:58,720
you're only going to pay between half a

00:26:56,880 --> 00:27:00,400
dollar and a dollar per hour for these

00:26:58,720 --> 00:27:01,120
so it might work out expensive in the

00:27:00,400 --> 00:27:03,760
long run but

00:27:01,120 --> 00:27:05,760
to try it out it's pretty cheap and

00:27:03,760 --> 00:27:07,279
they've done a lot for the ecosystem

00:27:05,760 --> 00:27:09,360
so they've worked with vendors like

00:27:07,279 --> 00:27:10,799
ampere and they're going to be bringing

00:27:09,360 --> 00:27:14,960
this new ultra max

00:27:10,799 --> 00:27:15,679
128 cores imagine this h-top in the

00:27:14,960 --> 00:27:17,600
background

00:27:15,679 --> 00:27:18,960
where you can't see what processes

00:27:17,600 --> 00:27:20,480
you're running in your terminal because

00:27:18,960 --> 00:27:23,760
you've got too many calls

00:27:20,480 --> 00:27:23,760
and it's a good problem to have

00:27:24,320 --> 00:27:27,840
and it wouldn't be right to do a talk on

00:27:26,720 --> 00:27:30,480
arm without

00:27:27,840 --> 00:27:32,159
talking about apple we've all heard of

00:27:30,480 --> 00:27:33,520
apple silicon we might even have had

00:27:32,159 --> 00:27:35,360
some product announcements by the time

00:27:33,520 --> 00:27:38,480
you hear this talk

00:27:35,360 --> 00:27:40,559
apple silicon is not an arm chip

00:27:38,480 --> 00:27:42,000
at least that's what they're saying it

00:27:40,559 --> 00:27:44,799
is arm 64

00:27:42,000 --> 00:27:46,000
compatible it's the same instruction set

00:27:44,799 --> 00:27:48,880
in the same way that an

00:27:46,000 --> 00:27:50,720
intel and amd chip are largely

00:27:48,880 --> 00:27:52,799
compatible

00:27:50,720 --> 00:27:54,880
now this has potential to give us

00:27:52,799 --> 00:27:58,559
multi-day battery in a laptop

00:27:54,880 --> 00:28:00,000
imagine that um and why this is apple

00:27:58,559 --> 00:28:00,720
silicon and not on arm chip is because

00:28:00,000 --> 00:28:03,039
they've had

00:28:00,720 --> 00:28:04,320
so much more i mean they have a machine

00:28:03,039 --> 00:28:06,159
learning acceleration

00:28:04,320 --> 00:28:08,080
they've got great power management

00:28:06,159 --> 00:28:09,200
they've got secure enclaves to store

00:28:08,080 --> 00:28:11,840
secrets and

00:28:09,200 --> 00:28:14,480
and state and a bunch of other stuff so

00:28:11,840 --> 00:28:16,799
keep an eye on this

00:28:14,480 --> 00:28:17,840
now you may have seen this error usually

00:28:16,799 --> 00:28:19,679
it's because

00:28:17,840 --> 00:28:21,200
you've got a binary built for a pc

00:28:19,679 --> 00:28:23,840
running on your raspberry pi

00:28:21,200 --> 00:28:24,799
or vice versa each of these raspberry

00:28:23,840 --> 00:28:26,559
pi's

00:28:24,799 --> 00:28:29,360
unfortunately runs a different version

00:28:26,559 --> 00:28:32,240
of arm and they're not all compatible

00:28:29,360 --> 00:28:32,880
or they are in some ways and the latest

00:28:32,240 --> 00:28:36,480
is

00:28:32,880 --> 00:28:38,320
the four it's 64-bit arm

00:28:36,480 --> 00:28:41,120
and if you're building go it's

00:28:38,320 --> 00:28:42,640
unfortunately very easy to cross compile

00:28:41,120 --> 00:28:45,919
so in the old days you might have just

00:28:42,640 --> 00:28:48,320
built that binary on an arm64 machine

00:28:45,919 --> 00:28:49,840
for your arm users but you can actually

00:28:48,320 --> 00:28:52,799
build it on your pc

00:28:49,840 --> 00:28:54,320
or on a mac or whatever you want and

00:28:52,799 --> 00:28:55,679
cross compile and this is how you put

00:28:54,320 --> 00:28:59,760
the arguments

00:28:55,679 --> 00:29:01,840
now the tricky thing is that nobody

00:28:59,760 --> 00:29:03,360
not everyone will call it arm64 some

00:29:01,840 --> 00:29:06,480
people will call it that

00:29:03,360 --> 00:29:08,159
some will call it arch 64. some people

00:29:06,480 --> 00:29:10,720
call this arm v7

00:29:08,159 --> 00:29:12,480
some people call it arm hf and whilst

00:29:10,720 --> 00:29:14,960
there are similarities

00:29:12,480 --> 00:29:16,240
and there are nuances it would be great

00:29:14,960 --> 00:29:18,480
if we could standardize

00:29:16,240 --> 00:29:20,960
and we just haven't got there yet so

00:29:18,480 --> 00:29:20,960
beware

00:29:21,200 --> 00:29:24,640
docker however has done a huge amount of

00:29:23,440 --> 00:29:26,960
work in this space

00:29:24,640 --> 00:29:28,559
and their new buildex tool means that

00:29:26,960 --> 00:29:30,559
you can take an existing docker file

00:29:28,559 --> 00:29:32,640
it's a multi-stage build here

00:29:30,559 --> 00:29:34,240
specify the build platform and a target

00:29:32,640 --> 00:29:35,279
platform and they can be different if

00:29:34,240 --> 00:29:37,279
you want

00:29:35,279 --> 00:29:39,200
and then through some trickery and some

00:29:37,279 --> 00:29:41,679
emulation

00:29:39,200 --> 00:29:42,720
up top there i've built for a pc

00:29:41,679 --> 00:29:46,240
raspberry pi

00:29:42,720 --> 00:29:49,919
32-bit os and a 64-bit os

00:29:46,240 --> 00:29:53,120
and there's not much more you have to do

00:29:49,919 --> 00:29:53,760
so quick cheat sheet cube admins to

00:29:53,120 --> 00:29:56,320
hungry

00:29:53,760 --> 00:29:58,000
it's timing out you want more resources

00:29:56,320 --> 00:30:00,799
use k3s

00:29:58,000 --> 00:30:01,679
your sd cards are unreliable look at the

00:30:00,799 --> 00:30:05,840
turing pi

00:30:01,679 --> 00:30:07,600
maybe use it emmc or netboot

00:30:05,840 --> 00:30:08,960
i have a workshop for that come and

00:30:07,600 --> 00:30:10,960
speak to me

00:30:08,960 --> 00:30:12,240
i can give you access to it and that's

00:30:10,960 --> 00:30:15,360
what i've used

00:30:12,240 --> 00:30:16,159
for my cluster um you don't have a load

00:30:15,360 --> 00:30:18,159
balancer

00:30:16,159 --> 00:30:19,279
okay well if you need a public iep

00:30:18,159 --> 00:30:22,080
address use

00:30:19,279 --> 00:30:22,720
inlets operator it's a steep learning

00:30:22,080 --> 00:30:24,880
curve

00:30:22,720 --> 00:30:25,760
i know i get it i've been through it as

00:30:24,880 --> 00:30:28,159
well

00:30:25,760 --> 00:30:29,039
ketchup could help you use install and

00:30:28,159 --> 00:30:30,880
join command

00:30:29,039 --> 00:30:32,880
that's all you need it's then back to

00:30:30,880 --> 00:30:36,000
normal kubernetes

00:30:32,880 --> 00:30:38,320
and discovering apps use arcade

00:30:36,000 --> 00:30:39,520
app install it will tell you if it's

00:30:38,320 --> 00:30:41,039
going to work or not

00:30:39,520 --> 00:30:43,679
um if there's an app you want to see

00:30:41,039 --> 00:30:45,279
there just suggest it on github

00:30:43,679 --> 00:30:46,880
illegal instruction well maybe you need

00:30:45,279 --> 00:30:50,480
to build a new

00:30:46,880 --> 00:30:51,919
binary maybe build it for with build x

00:30:50,480 --> 00:30:53,840
maybe download it manually from the

00:30:51,919 --> 00:30:57,520
releases page

00:30:53,840 --> 00:30:57,520
and there is a story for storage

00:30:57,760 --> 00:31:02,080
lots of people want this you can use an

00:30:59,840 --> 00:31:03,760
nfs provisioner that uses your network

00:31:02,080 --> 00:31:06,159
file system in linux

00:31:03,760 --> 00:31:07,840
you can use local path provisioner that

00:31:06,159 --> 00:31:10,880
uses the storage on the node

00:31:07,840 --> 00:31:13,440
from k3s and soon

00:31:10,880 --> 00:31:14,880
the cncf rancher project that rancher

00:31:13,440 --> 00:31:16,880
donated longhorn

00:31:14,880 --> 00:31:18,720
should have arm64 support is on their

00:31:16,880 --> 00:31:22,159
roadmap and that gives you

00:31:18,720 --> 00:31:25,519
persistent volumes in software

00:31:22,159 --> 00:31:28,399
now just to wrap up raspberry pi and arm

00:31:25,519 --> 00:31:28,720
are widely used for real work i hope

00:31:28,399 --> 00:31:31,760
that

00:31:28,720 --> 00:31:33,360
i've got that point across to you you

00:31:31,760 --> 00:31:35,279
can build your own private cloud

00:31:33,360 --> 00:31:36,799
and you do not have to worry about

00:31:35,279 --> 00:31:38,000
leaving it on like you do with your

00:31:36,799 --> 00:31:39,519
amazon account

00:31:38,000 --> 00:31:41,679
it is not going to cost you anywhere

00:31:39,519 --> 00:31:44,080
near what it would cost to run an eks

00:31:41,679 --> 00:31:45,600
cluster

00:31:44,080 --> 00:31:47,279
but you are going to have to become an

00:31:45,600 --> 00:31:49,039
advocate if you want to spend some time

00:31:47,279 --> 00:31:51,120
here you're going to find yourself

00:31:49,039 --> 00:31:53,919
um discovering gaps that other people

00:31:51,120 --> 00:31:56,960
didn't know about raising github issues

00:31:53,919 --> 00:31:58,640
pull requests porting software over

00:31:56,960 --> 00:32:00,720
even going and working with package

00:31:58,640 --> 00:32:03,279
maintainers and helm charts

00:32:00,720 --> 00:32:05,279
so it's not for everyone but you can

00:32:03,279 --> 00:32:06,799
have a lot of fun while you're at it

00:32:05,279 --> 00:32:09,840
and there's a great community around

00:32:06,799 --> 00:32:13,279
this and a ton of interest

00:32:09,840 --> 00:32:15,919
so look out for apple silicon

00:32:13,279 --> 00:32:18,399
look out for mainstream arm laptops and

00:32:15,919 --> 00:32:20,159
i don't mean one or two but

00:32:18,399 --> 00:32:21,760
everybody is using them i think this is

00:32:20,159 --> 00:32:24,960
a trend we're going to see

00:32:21,760 --> 00:32:25,360
and the cm4 with that super fast pci

00:32:24,960 --> 00:32:28,320
slot

00:32:25,360 --> 00:32:29,200
we can just stick a ssd straight into

00:32:28,320 --> 00:32:31,840
there

00:32:29,200 --> 00:32:34,399
that is going to be ridiculously fast

00:32:31,840 --> 00:32:36,080
keep an eye out for all of these trends

00:32:34,399 --> 00:32:39,919
and if there's any way that i can be of

00:32:36,080 --> 00:32:39,919
help feel free to get in touch

00:32:41,279 --> 00:32:47,519
most importantly focus on

00:32:44,320 --> 00:32:49,360
having fun remember that um

00:32:47,519 --> 00:32:51,360
you do always have the cloud you always

00:32:49,360 --> 00:32:53,279
do have intel machines to fall back on

00:32:51,360 --> 00:32:56,080
if you're running into trouble

00:32:53,279 --> 00:32:58,000
um and i do really hope that you have

00:32:56,080 --> 00:33:01,279
fun with this

00:32:58,000 --> 00:33:02,799
so thank you for listening you can get

00:33:01,279 --> 00:33:05,279
hold of me on twitter

00:33:02,799 --> 00:33:08,240
down below or you can send me an email

00:33:05,279 --> 00:33:12,080
i'll be glad to hear from you

00:33:08,240 --> 00:33:13,919
k3s is available here my twitter account

00:33:12,080 --> 00:33:15,919
and if you want to join the open fast

00:33:13,919 --> 00:33:17,840
community and talk about those tools

00:33:15,919 --> 00:33:20,240
or contribute to them um you're more

00:33:17,840 --> 00:33:22,640
than welcome to welcome to as well

00:33:20,240 --> 00:33:25,039
we may have run out of time for q a

00:33:22,640 --> 00:33:27,440
however i'll make myself available

00:33:25,039 --> 00:33:28,640
whether that's on slack or twitter we'll

00:33:27,440 --> 00:33:30,960
know

00:33:28,640 --> 00:33:31,840
closer to the time where that is all

00:33:30,960 --> 00:33:36,799
right

00:33:31,840 --> 00:33:36,799

YouTube URL: https://www.youtube.com/watch?v=jfUpF40--60


