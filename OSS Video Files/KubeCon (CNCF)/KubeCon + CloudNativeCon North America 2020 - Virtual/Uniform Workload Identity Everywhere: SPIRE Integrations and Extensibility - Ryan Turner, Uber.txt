Title: Uniform Workload Identity Everywhere: SPIRE Integrations and Extensibility - Ryan Turner, Uber
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Uniform Workload Identity Everywhere: SPIRE Integrations and Extensibility - Ryan Turner, Uber 

Distributing strong identity securely throughout a production environment often requires integrations with a number of platforms. Learn how SPIRE can be adapted to support production workload identity in heterogeneous infrastructure across a variety of software systems. This talk will cover some examples of different kinds of systems where SPIRE can provide identity and what deep integrations exist in SPIRE today. We’ll also dive into the plugin-based architecture used throughout SPIRE that provides open extensibility points to support the needs of your organization’s bespoke infrastructure and tooling. 

https://sched.co/f3j7
Captions: 
	00:00:02,560 --> 00:00:05,120
hello everyone

00:00:03,520 --> 00:00:06,480
my name is ryan turner and i'm a

00:00:05,120 --> 00:00:08,800
software engineer at uber and a

00:00:06,480 --> 00:00:10,559
contributor to this fire project

00:00:08,800 --> 00:00:12,400
and i'm excited to talk to you today

00:00:10,559 --> 00:00:15,200
about some of the extensions

00:00:12,400 --> 00:00:17,520
and integrations available with spire

00:00:15,200 --> 00:00:19,600
and how you can leverage those to

00:00:17,520 --> 00:00:23,600
distribute workload identity in a

00:00:19,600 --> 00:00:23,600
uniform way across your environments

00:00:24,560 --> 00:00:28,080
so first i kind of want to just touch on

00:00:26,160 --> 00:00:28,800
some common integration challenges that

00:00:28,080 --> 00:00:31,519
i think

00:00:28,800 --> 00:00:33,360
many of you probably relate to so you

00:00:31,519 --> 00:00:35,120
may be using multiple environments

00:00:33,360 --> 00:00:36,960
and those may be private or public

00:00:35,120 --> 00:00:40,160
clouds they may be on-prem

00:00:36,960 --> 00:00:42,239
infrastructure you could be running in a

00:00:40,160 --> 00:00:44,719
variety of environments you may have

00:00:42,239 --> 00:00:46,719
your own in-house tooling that is

00:00:44,719 --> 00:00:48,320
proprietary and not open source

00:00:46,719 --> 00:00:50,640
you may have some open source tooling

00:00:48,320 --> 00:00:53,039
you may be using cloud native tooling

00:00:50,640 --> 00:00:54,239
so all these different systems are in

00:00:53,039 --> 00:00:56,800
play

00:00:54,239 --> 00:00:58,320
you may have a mix of legacy and cloud

00:00:56,800 --> 00:01:00,800
native applications

00:00:58,320 --> 00:01:02,559
so things that are designed to run

00:01:00,800 --> 00:01:05,680
natively in one public cloud

00:01:02,559 --> 00:01:06,880
or potentially that run a kubernetes

00:01:05,680 --> 00:01:09,520
cluster

00:01:06,880 --> 00:01:12,720
or you may have legacy workloads which

00:01:09,520 --> 00:01:14,560
don't use these newer technologies yet

00:01:12,720 --> 00:01:16,799
and so how do you actually provide

00:01:14,560 --> 00:01:19,600
identity to all of these kinds

00:01:16,799 --> 00:01:20,479
of environments and applications and how

00:01:19,600 --> 00:01:23,840
do you enforce

00:01:20,479 --> 00:01:27,200
uniform authentication across all your

00:01:23,840 --> 00:01:30,560
remote procedure calls which would be

00:01:27,200 --> 00:01:33,360
happening in your microservice ecosystem

00:01:30,560 --> 00:01:34,400
so i am excited to tell you that spiffy

00:01:33,360 --> 00:01:37,360
inspire can

00:01:34,400 --> 00:01:38,640
provide consistent strong identity and

00:01:37,360 --> 00:01:40,640
help you solve

00:01:38,640 --> 00:01:43,040
your identity needs in all these use

00:01:40,640 --> 00:01:43,040
cases

00:01:44,320 --> 00:01:47,840
so what are we going to talk about today

00:01:46,479 --> 00:01:49,759
first i'd like to just give

00:01:47,840 --> 00:01:51,600
a brief overview of what spiffy and

00:01:49,759 --> 00:01:53,200
spire are for those who are not

00:01:51,600 --> 00:01:55,040
too familiar and just kind of talk about

00:01:53,200 --> 00:01:57,119
some of the terminology that we'll be

00:01:55,040 --> 00:01:58,320
using throughout the talk

00:01:57,119 --> 00:02:00,560
then i'm going to go into some of the

00:01:58,320 --> 00:02:02,799
integrations that's fire provides

00:02:00,560 --> 00:02:05,600
and some of the external systems that

00:02:02,799 --> 00:02:07,520
spire can integrate with

00:02:05,600 --> 00:02:09,920
then i'm going to talk about different

00:02:07,520 --> 00:02:11,680
ways that spire can be extended

00:02:09,920 --> 00:02:13,520
and the kind of functionality that you

00:02:11,680 --> 00:02:16,239
can customize

00:02:13,520 --> 00:02:17,040
in your deployment of spire then i'm

00:02:16,239 --> 00:02:19,920
going to talk about

00:02:17,040 --> 00:02:20,720
downstream integrations so how spire can

00:02:19,920 --> 00:02:22,080
be used

00:02:20,720 --> 00:02:24,480
once it's up and running in your

00:02:22,080 --> 00:02:25,360
environment how you can actually enforce

00:02:24,480 --> 00:02:28,000
authentication

00:02:25,360 --> 00:02:29,599
across your ecosystem with spire issued

00:02:28,000 --> 00:02:31,200
identities

00:02:29,599 --> 00:02:33,519
and then i'm going to open up to q a at

00:02:31,200 --> 00:02:33,519
the end

00:02:33,599 --> 00:02:36,959
so let's go ahead and get started so

00:02:36,239 --> 00:02:39,920
first of all

00:02:36,959 --> 00:02:41,599
what is spiffy spiffy is the secure

00:02:39,920 --> 00:02:42,480
production identity framework for

00:02:41,599 --> 00:02:45,040
everyone

00:02:42,480 --> 00:02:45,519
so it's a cool acronym what it really is

00:02:45,040 --> 00:02:48,560
though

00:02:45,519 --> 00:02:50,720
is that it defines three key things

00:02:48,560 --> 00:02:52,480
one is an identifier format which is

00:02:50,720 --> 00:02:55,840
called a spiffy id

00:02:52,480 --> 00:02:58,239
and this is a uri-based format which

00:02:55,840 --> 00:02:59,360
has a scheme component that just is

00:02:58,239 --> 00:03:01,200
called spiffy

00:02:59,360 --> 00:03:03,760
and then you have this trust domain

00:03:01,200 --> 00:03:07,360
concept which is a logical way to

00:03:03,760 --> 00:03:10,319
organize identities in an organization

00:03:07,360 --> 00:03:11,040
and then some path which has no semantic

00:03:10,319 --> 00:03:12,720
value but

00:03:11,040 --> 00:03:14,560
something that you can define for your

00:03:12,720 --> 00:03:17,440
own use cases

00:03:14,560 --> 00:03:20,400
to distinguish different workloads from

00:03:17,440 --> 00:03:21,760
other workloads in your system

00:03:20,400 --> 00:03:23,680
then the second part of the

00:03:21,760 --> 00:03:26,560
specification it defines

00:03:23,680 --> 00:03:28,720
an identity document standard so how

00:03:26,560 --> 00:03:31,120
does this identity get represented

00:03:28,720 --> 00:03:31,920
uh and this is what we refer to as an

00:03:31,120 --> 00:03:34,000
svid

00:03:31,920 --> 00:03:35,519
so that stands for spiffy verifiable

00:03:34,000 --> 00:03:37,840
identity document

00:03:35,519 --> 00:03:39,920
and that comes in two different forms

00:03:37,840 --> 00:03:43,519
one is an x509 certificate

00:03:39,920 --> 00:03:45,760
and another is a json web token

00:03:43,519 --> 00:03:46,640
and then the third part of the spiffy

00:03:45,760 --> 00:03:50,239
specification

00:03:46,640 --> 00:03:50,959
is this workload api which talks about

00:03:50,239 --> 00:03:54,159
how to

00:03:50,959 --> 00:03:56,640
retrieve and issue s-vids throughout an

00:03:54,159 --> 00:03:56,640
environment

00:03:57,760 --> 00:04:03,920
so next what is spire so spire

00:04:00,799 --> 00:04:06,000
is the spiffy runtime environment and

00:04:03,920 --> 00:04:08,239
it's an open source implementation of

00:04:06,000 --> 00:04:11,599
the spiffy specification

00:04:08,239 --> 00:04:13,200
so it implements those identity

00:04:11,599 --> 00:04:16,160
primitives that are defined

00:04:13,200 --> 00:04:16,639
in the spec it is essentially a control

00:04:16,160 --> 00:04:19,040
plane

00:04:16,639 --> 00:04:19,840
uh what we like to call an identity

00:04:19,040 --> 00:04:22,560
plane

00:04:19,840 --> 00:04:24,960
for a managing distribution and rotation

00:04:22,560 --> 00:04:26,479
of identities throughout an environment

00:04:24,960 --> 00:04:28,160
and it's designed as a scalable

00:04:26,479 --> 00:04:31,280
distributed system which

00:04:28,160 --> 00:04:32,080
is intended to meet the needs of large

00:04:31,280 --> 00:04:33,759
environments

00:04:32,080 --> 00:04:37,199
and with many applications and

00:04:33,759 --> 00:04:37,199
microservices running concurrently

00:04:38,880 --> 00:04:43,040
so just quickly want to talk about what

00:04:40,720 --> 00:04:44,960
is the architecture of spire

00:04:43,040 --> 00:04:47,919
at a high level there are two components

00:04:44,960 --> 00:04:50,400
inspire there's a server and an agent

00:04:47,919 --> 00:04:52,400
the server is responsible for managing

00:04:50,400 --> 00:04:55,600
identity registrations

00:04:52,400 --> 00:04:59,600
and issuing identities through

00:04:55,600 --> 00:05:01,520
the form of an s-vid an x-509 or a gwt

00:04:59,600 --> 00:05:02,800
so it's essentially a certificate

00:05:01,520 --> 00:05:05,919
authority

00:05:02,800 --> 00:05:07,840
which provisions these identities and

00:05:05,919 --> 00:05:09,199
two different agents that run throughout

00:05:07,840 --> 00:05:11,120
an environment

00:05:09,199 --> 00:05:12,639
so this agent component is the second

00:05:11,120 --> 00:05:16,240
component of spire

00:05:12,639 --> 00:05:17,759
which talks to the server and requests

00:05:16,240 --> 00:05:21,039
different identities

00:05:17,759 --> 00:05:24,160
that it can manage on the host and so

00:05:21,039 --> 00:05:26,400
how does the user's workloads come into

00:05:24,160 --> 00:05:27,360
the picture here so the workloads will

00:05:26,400 --> 00:05:29,440
connect to

00:05:27,360 --> 00:05:31,280
the workload api which was defined in

00:05:29,440 --> 00:05:33,680
the 50 specification

00:05:31,280 --> 00:05:35,120
and inspire it's exposed as a unix

00:05:33,680 --> 00:05:38,320
domain socket today

00:05:35,120 --> 00:05:40,160
on the host and so that the

00:05:38,320 --> 00:05:41,759
unix domain socket is publicly available

00:05:40,160 --> 00:05:44,800
to anything on the host it

00:05:41,759 --> 00:05:47,199
and the workload connects to it

00:05:44,800 --> 00:05:48,320
and the agent tries to identify what

00:05:47,199 --> 00:05:49,680
that workload is

00:05:48,320 --> 00:05:51,440
and match it against a set of

00:05:49,680 --> 00:05:54,080
registrations that is authorized

00:05:51,440 --> 00:05:55,280
to issue identities for if any of those

00:05:54,080 --> 00:05:59,360
identities

00:05:55,280 --> 00:06:01,120
uh match the workload that is trying to

00:05:59,360 --> 00:06:03,280
receive an identity then

00:06:01,120 --> 00:06:07,840
those identities are distributed to the

00:06:03,280 --> 00:06:07,840
workload over the workload api

00:06:08,960 --> 00:06:12,960
so i just want to show like a big

00:06:10,319 --> 00:06:15,120
picture here there's a lot going on

00:06:12,960 --> 00:06:16,479
it's the details are not super important

00:06:15,120 --> 00:06:19,360
here but i just want to kind of

00:06:16,479 --> 00:06:20,080
hammer home that spire can really be

00:06:19,360 --> 00:06:21,759
versatile

00:06:20,080 --> 00:06:24,080
and work in a variety of environments

00:06:21,759 --> 00:06:25,520
here so i'm just showing like one

00:06:24,080 --> 00:06:27,759
example maybe you have

00:06:25,520 --> 00:06:29,120
deployments in different private and

00:06:27,759 --> 00:06:31,199
public clouds

00:06:29,120 --> 00:06:32,720
so here i have pictured an aws

00:06:31,199 --> 00:06:33,600
deployment where you have kubernetes

00:06:32,720 --> 00:06:34,880
cluster

00:06:33,600 --> 00:06:36,720
with some nodes running different

00:06:34,880 --> 00:06:38,400
workloads and

00:06:36,720 --> 00:06:39,759
those workloads are docker based

00:06:38,400 --> 00:06:42,160
workloads

00:06:39,759 --> 00:06:43,680
and so in that environment spire can

00:06:42,160 --> 00:06:45,280
function it has

00:06:43,680 --> 00:06:47,120
a spire server deployed in the

00:06:45,280 --> 00:06:48,720
kubernetes cluster

00:06:47,120 --> 00:06:50,240
and then there are agents which are

00:06:48,720 --> 00:06:50,880
deployed on all the nodes in that

00:06:50,240 --> 00:06:52,479
cluster

00:06:50,880 --> 00:06:54,479
and the workloads connect to those

00:06:52,479 --> 00:06:56,800
agents on those nodes

00:06:54,479 --> 00:06:58,880
uh maybe you also have a deployment in

00:06:56,800 --> 00:07:01,680
microsoft azure for example

00:06:58,880 --> 00:07:03,360
and in azure you're just using it as

00:07:01,680 --> 00:07:04,160
more of an infrastructure as a service

00:07:03,360 --> 00:07:05,759
platform

00:07:04,160 --> 00:07:07,599
so you're not really doing things in

00:07:05,759 --> 00:07:09,280
necessarily a cloud-native way

00:07:07,599 --> 00:07:10,880
but you have workloads running there in

00:07:09,280 --> 00:07:13,440
virtual machines

00:07:10,880 --> 00:07:14,639
so spire also supports this kind of use

00:07:13,440 --> 00:07:17,520
case

00:07:14,639 --> 00:07:19,599
and so and here imagine you have some

00:07:17,520 --> 00:07:23,120
virtual machine running spire server

00:07:19,599 --> 00:07:25,440
which is um you know addressable and

00:07:23,120 --> 00:07:26,960
routable from other virtual machines in

00:07:25,440 --> 00:07:28,800
that environment

00:07:26,960 --> 00:07:31,360
and then the agents on different virtual

00:07:28,800 --> 00:07:33,280
machines can connect to the server and

00:07:31,360 --> 00:07:35,280
receive the identities for the workloads

00:07:33,280 --> 00:07:36,720
that run and the vms

00:07:35,280 --> 00:07:38,479
and they could be a variety of different

00:07:36,720 --> 00:07:40,560
kinds of workloads some docker

00:07:38,479 --> 00:07:42,319
maybe or maybe they're just native unix

00:07:40,560 --> 00:07:45,120
processes

00:07:42,319 --> 00:07:45,680
and then similar story here for on-prem

00:07:45,120 --> 00:07:48,240
uh

00:07:45,680 --> 00:07:48,960
you may just have bare metal hosts

00:07:48,240 --> 00:07:52,160
running in

00:07:48,960 --> 00:07:54,000
a data center and so how do you manage

00:07:52,160 --> 00:07:55,520
spire there well spire can also work

00:07:54,000 --> 00:07:58,560
there you can have

00:07:55,520 --> 00:08:00,560
different hosts running spire server

00:07:58,560 --> 00:08:02,160
and then you can have agents running on

00:08:00,560 --> 00:08:02,960
the hosts in your infrastructure and

00:08:02,160 --> 00:08:05,599
again you can

00:08:02,960 --> 00:08:08,639
support a variety of these workloads so

00:08:05,599 --> 00:08:08,639
it's very adaptable

00:08:09,599 --> 00:08:14,000
so i want to talk about what are the

00:08:12,160 --> 00:08:16,560
different types of integrations

00:08:14,000 --> 00:08:17,759
available with spire so really we can

00:08:16,560 --> 00:08:20,879
categorize these

00:08:17,759 --> 00:08:22,879
into two different buckets uh one is

00:08:20,879 --> 00:08:25,680
integrations that enable the operations

00:08:22,879 --> 00:08:27,680
of spire so this is controlling some of

00:08:25,680 --> 00:08:28,560
the key functionality and behavior of

00:08:27,680 --> 00:08:30,479
spire

00:08:28,560 --> 00:08:31,919
and some of the security properties as

00:08:30,479 --> 00:08:33,680
well to meet

00:08:31,919 --> 00:08:37,039
the compliance requirements that you may

00:08:33,680 --> 00:08:39,360
have or your own internal requirements

00:08:37,039 --> 00:08:41,440
um and then so really that's all about

00:08:39,360 --> 00:08:43,440
getting spire up and running that's just

00:08:41,440 --> 00:08:44,800
how do i manage spire and make it work

00:08:43,440 --> 00:08:47,120
in my infrastructure

00:08:44,800 --> 00:08:48,880
in the secure way that you know i'm

00:08:47,120 --> 00:08:51,120
comfortable with

00:08:48,880 --> 00:08:52,240
the second part here is how do you

00:08:51,120 --> 00:08:54,800
actually consume

00:08:52,240 --> 00:08:55,920
spire issued identities in a way that's

00:08:54,800 --> 00:08:59,360
seamless

00:08:55,920 --> 00:09:01,200
so uh ideally not every workload needs

00:08:59,360 --> 00:09:03,040
to implement their own integration with

00:09:01,200 --> 00:09:04,000
spire just to get their identity and get

00:09:03,040 --> 00:09:05,680
bootstrapped

00:09:04,000 --> 00:09:07,360
maybe that works in a small environment

00:09:05,680 --> 00:09:09,760
where you just have you know very few

00:09:07,360 --> 00:09:12,320
number of services or applications

00:09:09,760 --> 00:09:13,760
and you can make those code changes and

00:09:12,320 --> 00:09:16,800
all the services to get

00:09:13,760 --> 00:09:18,160
identity but as you scale further up and

00:09:16,800 --> 00:09:18,880
you have more and more services in your

00:09:18,160 --> 00:09:20,959
environment

00:09:18,880 --> 00:09:23,279
that becomes very difficult to manage

00:09:20,959 --> 00:09:26,399
and so how do we actually propagate

00:09:23,279 --> 00:09:27,680
these s vids across remote procedure

00:09:26,399 --> 00:09:30,320
called boundaries

00:09:27,680 --> 00:09:31,519
and provide secure authentication across

00:09:30,320 --> 00:09:35,680
our service

00:09:31,519 --> 00:09:37,440
requests and then how do you use svids

00:09:35,680 --> 00:09:40,480
outside of your own ecosystem

00:09:37,440 --> 00:09:41,680
for requests to external services

00:09:40,480 --> 00:09:45,600
so i'm going to talk a little bit about

00:09:41,680 --> 00:09:45,600
how you might be able to do that as well

00:09:46,720 --> 00:09:50,560
so first operations integrations what

00:09:48,959 --> 00:09:53,279
are some things that we might

00:09:50,560 --> 00:09:53,839
want to control with respect to house

00:09:53,279 --> 00:09:57,279
fire

00:09:53,839 --> 00:09:59,519
functions so one is that

00:09:57,279 --> 00:10:01,519
you may have in your organization

00:09:59,519 --> 00:10:04,800
already some public key infrastructure

00:10:01,519 --> 00:10:08,160
likely you do and that might be a public

00:10:04,800 --> 00:10:11,200
web pki uh chained to some well-known

00:10:08,160 --> 00:10:12,560
trusted ca on the internet uh or it

00:10:11,200 --> 00:10:15,600
might be a private pki

00:10:12,560 --> 00:10:16,160
um so you may have your own root ca in

00:10:15,600 --> 00:10:18,880
your

00:10:16,160 --> 00:10:20,240
infrastructure or your organization and

00:10:18,880 --> 00:10:21,040
you have processes around how it's

00:10:20,240 --> 00:10:22,800
managed

00:10:21,040 --> 00:10:24,079
and maybe you want to manage all of your

00:10:22,800 --> 00:10:26,720
workload identities

00:10:24,079 --> 00:10:28,000
in your environment such that they're

00:10:26,720 --> 00:10:32,000
all chained to

00:10:28,000 --> 00:10:35,200
this pki so this is a very common

00:10:32,000 --> 00:10:37,120
integration point with spire

00:10:35,200 --> 00:10:38,320
another integration point we have to

00:10:37,120 --> 00:10:40,959
consider here is

00:10:38,320 --> 00:10:42,720
we have this distributed system

00:10:40,959 --> 00:10:44,839
architecture where there are agents

00:10:42,720 --> 00:10:46,880
running across different hosts

00:10:44,839 --> 00:10:48,240
vms virtual nodes throughout

00:10:46,880 --> 00:10:51,040
infrastructure

00:10:48,240 --> 00:10:51,839
so how do we securely identify those

00:10:51,040 --> 00:10:53,680
agents

00:10:51,839 --> 00:10:55,519
and the nodes that they're running on so

00:10:53,680 --> 00:10:57,360
that we can trust those agents

00:10:55,519 --> 00:10:59,760
with the identities that spire server

00:10:57,360 --> 00:11:01,839
will distribute

00:10:59,760 --> 00:11:03,440
so this is all about kind of linking

00:11:01,839 --> 00:11:05,920
your host identity system

00:11:03,440 --> 00:11:08,320
to spire and establishing that bridge of

00:11:05,920 --> 00:11:08,320
trust

00:11:08,560 --> 00:11:14,640
next another key integration

00:11:11,600 --> 00:11:16,079
here is how you manage your identity

00:11:14,640 --> 00:11:19,200
registrations

00:11:16,079 --> 00:11:21,200
so this is something that we call host

00:11:19,200 --> 00:11:23,519
categorization

00:11:21,200 --> 00:11:24,560
so this enables creating identity

00:11:23,519 --> 00:11:27,519
registrations

00:11:24,560 --> 00:11:29,120
that we call node alias registrations

00:11:27,519 --> 00:11:31,200
and essentially what these node alias

00:11:29,120 --> 00:11:34,399
registrations are for are to give you

00:11:31,200 --> 00:11:35,200
logical groupings of registrations per

00:11:34,399 --> 00:11:38,160
host or

00:11:35,200 --> 00:11:40,000
maybe for a group of hosts so that

00:11:38,160 --> 00:11:41,440
identities are not globally available

00:11:40,000 --> 00:11:43,120
throughout your entire infrastructure

00:11:41,440 --> 00:11:44,079
you may scope those identities to

00:11:43,120 --> 00:11:47,680
certain

00:11:44,079 --> 00:11:47,680
nodes running in your environment

00:11:48,320 --> 00:11:52,480
so this is about providing the host of

00:11:50,560 --> 00:11:52,959
some additional metadata to be able to

00:11:52,480 --> 00:11:54,800
create

00:11:52,959 --> 00:11:58,399
these kind of node alias registrations

00:11:54,800 --> 00:11:58,399
for grouping registrations

00:11:58,639 --> 00:12:01,920
another key functionality we might want

00:12:00,160 --> 00:12:03,040
to control is key management so how

00:12:01,920 --> 00:12:05,760
spire

00:12:03,040 --> 00:12:06,720
maintains its own private keys its ca

00:12:05,760 --> 00:12:08,800
private key

00:12:06,720 --> 00:12:11,839
how it does signing operations and those

00:12:08,800 --> 00:12:11,839
kinds of things

00:12:14,160 --> 00:12:21,440
another important integration point here

00:12:17,600 --> 00:12:23,920
is how workloads are securely identified

00:12:21,440 --> 00:12:25,440
in the system so how does the agent

00:12:23,920 --> 00:12:27,839
actually determine

00:12:25,440 --> 00:12:29,440
that a given workload is uh something

00:12:27,839 --> 00:12:32,320
that is trusted and has

00:12:29,440 --> 00:12:33,519
a registered identity in the platform um

00:12:32,320 --> 00:12:36,800
so we call this

00:12:33,519 --> 00:12:38,480
workload attestation inspire

00:12:36,800 --> 00:12:40,800
and so this is all about clearing

00:12:38,480 --> 00:12:44,240
runtime attributes of a workload

00:12:40,800 --> 00:12:47,839
to identify it against a set of

00:12:44,240 --> 00:12:49,519
registrations already inspired

00:12:47,839 --> 00:12:51,600
and then lastly there are some event

00:12:49,519 --> 00:12:54,160
hooks so you may have

00:12:51,600 --> 00:12:56,480
some downstream processes or downstream

00:12:54,160 --> 00:13:00,639
storage that you may want to

00:12:56,480 --> 00:13:03,920
link different key events inspire to

00:13:00,639 --> 00:13:04,959
some workflows or you know storage and

00:13:03,920 --> 00:13:06,399
so this is kind of

00:13:04,959 --> 00:13:08,880
providing you these hooks so that you

00:13:06,399 --> 00:13:09,279
can plug into the event life cycle of

00:13:08,880 --> 00:13:12,399
different

00:13:09,279 --> 00:13:12,399
things that happen inspire

00:13:13,760 --> 00:13:17,200
so how does this all work um so spire

00:13:16,240 --> 00:13:21,040
has this plug-in

00:13:17,200 --> 00:13:22,480
framework which it uses um

00:13:21,040 --> 00:13:24,240
throughout all these different

00:13:22,480 --> 00:13:26,720
operations and

00:13:24,240 --> 00:13:27,760
these plugins are defined with

00:13:26,720 --> 00:13:31,040
interfaces

00:13:27,760 --> 00:13:34,160
in protocol buffer language and

00:13:31,040 --> 00:13:34,720
these plugins kind of are grouped into

00:13:34,160 --> 00:13:37,279
two different

00:13:34,720 --> 00:13:39,519
categories there's like built-in plugins

00:13:37,279 --> 00:13:40,800
and those are plugins that are natively

00:13:39,519 --> 00:13:43,760
available inspire

00:13:40,800 --> 00:13:45,040
so if you go deploy aspire with uh you

00:13:43,760 --> 00:13:47,040
know today from

00:13:45,040 --> 00:13:49,440
the latest release you'll get a set of

00:13:47,040 --> 00:13:51,440
different plugins that you can configure

00:13:49,440 --> 00:13:53,279
and so you just need to specify in your

00:13:51,440 --> 00:13:55,199
configuration file for

00:13:53,279 --> 00:13:58,000
the server and the agent what plugins

00:13:55,199 --> 00:13:59,360
you want to use in your environment

00:13:58,000 --> 00:14:01,519
and then there are these external

00:13:59,360 --> 00:14:02,240
plugins which are things that you can

00:14:01,519 --> 00:14:03,920
develop

00:14:02,240 --> 00:14:05,920
or things that you can source from the

00:14:03,920 --> 00:14:06,560
open source community if other people

00:14:05,920 --> 00:14:08,480
have

00:14:06,560 --> 00:14:09,839
already developed a plug-in for a

00:14:08,480 --> 00:14:11,440
specific operation that you are

00:14:09,839 --> 00:14:14,320
interested in you can

00:14:11,440 --> 00:14:16,399
leverage that uh using this external

00:14:14,320 --> 00:14:18,240
plug-in and loading mechanism

00:14:16,399 --> 00:14:20,399
and the way that this plug-in framework

00:14:18,240 --> 00:14:21,760
works is it links like the core business

00:14:20,399 --> 00:14:24,720
logic of spire

00:14:21,760 --> 00:14:25,920
to these plugins over a grpc interface

00:14:24,720 --> 00:14:30,560
so that's what enables

00:14:25,920 --> 00:14:33,920
both the in-memory and external plug-ins

00:14:30,560 --> 00:14:36,240
and these plugins are all designed

00:14:33,920 --> 00:14:38,079
on top of this framework called apache

00:14:36,240 --> 00:14:41,760
corp goblet plugin

00:14:38,079 --> 00:14:45,040
and that's a pretty commonly used plugin

00:14:41,760 --> 00:14:48,240
system available in go and is used

00:14:45,040 --> 00:14:50,160
widely in hashicorp and by other uh

00:14:48,240 --> 00:14:52,240
projects in the open source community

00:14:50,160 --> 00:14:54,160
so i have a link to the reference for

00:14:52,240 --> 00:14:55,040
that project later on in the slides if

00:14:54,160 --> 00:14:59,120
you're interested

00:14:55,040 --> 00:15:00,800
in looking into that more

00:14:59,120 --> 00:15:02,480
so i want to kind of just touch on what

00:15:00,800 --> 00:15:03,839
are the different plug-in types for each

00:15:02,480 --> 00:15:06,399
of these components we talked about

00:15:03,839 --> 00:15:08,639
inspire the server and the agent

00:15:06,399 --> 00:15:10,160
so this is just kind of uh intended to

00:15:08,639 --> 00:15:10,480
be an illustration i'm going to dive

00:15:10,160 --> 00:15:12,079
into

00:15:10,480 --> 00:15:14,160
all these different plug-in types more

00:15:12,079 --> 00:15:17,519
detail here coming up

00:15:14,160 --> 00:15:19,680
um this diagram is slightly outdated in

00:15:17,519 --> 00:15:21,120
that the plug-in on the left there the

00:15:19,680 --> 00:15:22,720
data store plug-in doesn't exist anymore

00:15:21,120 --> 00:15:24,639
so you can kind of ignore that part

00:15:22,720 --> 00:15:26,720
uh and there should also be a notifier

00:15:24,639 --> 00:15:28,800
plug-in in here as well but

00:15:26,720 --> 00:15:30,240
overall these are the plugins that are

00:15:28,800 --> 00:15:32,320
available today in the server

00:15:30,240 --> 00:15:33,519
there's the key manager and upstream

00:15:32,320 --> 00:15:34,720
authority

00:15:33,519 --> 00:15:37,680
which is kind of how you link to your

00:15:34,720 --> 00:15:39,279
pki and i'll talk about that later

00:15:37,680 --> 00:15:41,040
and then these node plugins called

00:15:39,279 --> 00:15:43,600
nodatester node resolver

00:15:41,040 --> 00:15:44,480
which are used to authenticate nodes in

00:15:43,600 --> 00:15:46,560
your

00:15:44,480 --> 00:15:49,680
environment and also label them with

00:15:46,560 --> 00:15:49,680
different key metadata

00:15:50,880 --> 00:15:54,320
and then the agent has its own set of

00:15:52,720 --> 00:15:55,920
plugins available as well

00:15:54,320 --> 00:15:58,399
and these are the three that are

00:15:55,920 --> 00:16:00,720
supported today the noda tester

00:15:58,399 --> 00:16:01,680
which pairs with server node tester

00:16:00,720 --> 00:16:04,079
plug-in

00:16:01,680 --> 00:16:05,759
the workload tester plugin which

00:16:04,079 --> 00:16:07,360
identifies workloads that connect to the

00:16:05,759 --> 00:16:09,040
workload api in the host

00:16:07,360 --> 00:16:10,720
and then the key manager which also

00:16:09,040 --> 00:16:12,720
manages the private keys and signing

00:16:10,720 --> 00:16:15,279
operations

00:16:12,720 --> 00:16:15,279
in agent

00:16:16,160 --> 00:16:19,600
so upstream authority is the first

00:16:18,160 --> 00:16:22,800
plugin i'll talk about here and this

00:16:19,600 --> 00:16:25,120
applies to aspire server

00:16:22,800 --> 00:16:26,079
so this is how you control the

00:16:25,120 --> 00:16:29,120
integration with

00:16:26,079 --> 00:16:30,560
spires certificate authority to the

00:16:29,120 --> 00:16:32,320
chain of trust that you may already have

00:16:30,560 --> 00:16:36,079
in your organization

00:16:32,320 --> 00:16:39,360
and so this authority establishes an

00:16:36,079 --> 00:16:40,639
interface uh this plugin establishes an

00:16:39,360 --> 00:16:43,199
interface that allows

00:16:40,639 --> 00:16:44,240
fire to chain to upstream certificate

00:16:43,199 --> 00:16:48,560
authorities

00:16:44,240 --> 00:16:52,160
it also allows spire to publish gwt

00:16:48,560 --> 00:16:54,000
signing keys that it has generated or

00:16:52,160 --> 00:16:56,399
um you know and publish those to some

00:16:54,000 --> 00:16:58,639
third-party store

00:16:56,399 --> 00:17:00,560
um it also can handle the certificate

00:16:58,639 --> 00:17:04,000
signing requests for this buyer ca

00:17:00,560 --> 00:17:05,439
so if you want to avoid or off

00:17:04,000 --> 00:17:07,360
uh avoid that signing operation

00:17:05,439 --> 00:17:10,160
happening in the

00:17:07,360 --> 00:17:11,280
spire server process itself um or you

00:17:10,160 --> 00:17:13,120
want to offload that to some other

00:17:11,280 --> 00:17:14,559
system you can do that

00:17:13,120 --> 00:17:16,880
these are the available built-in plugins

00:17:14,559 --> 00:17:17,679
today there is a way to provide an

00:17:16,880 --> 00:17:20,559
upstream

00:17:17,679 --> 00:17:21,760
trust bundle and private key on disk

00:17:20,559 --> 00:17:23,120
that's kind of like the simplest way to

00:17:21,760 --> 00:17:25,520
get going

00:17:23,120 --> 00:17:27,600
you can also use some third-party secret

00:17:25,520 --> 00:17:29,919
stores for this as well

00:17:27,600 --> 00:17:32,559
and the services that we support

00:17:29,919 --> 00:17:35,600
natively today are aws pca

00:17:32,559 --> 00:17:36,799
and aw secret manager we also support

00:17:35,600 --> 00:17:39,840
hashicorp vault

00:17:36,799 --> 00:17:41,440
natively and spire

00:17:39,840 --> 00:17:43,280
is also an additional plugin that's

00:17:41,440 --> 00:17:44,799
supported so you can have this nested

00:17:43,280 --> 00:17:47,039
spire deployment where

00:17:44,799 --> 00:17:48,720
you have kind of a central fire that

00:17:47,039 --> 00:17:51,039
manages

00:17:48,720 --> 00:17:52,240
children's fire deployments and all

00:17:51,039 --> 00:17:53,280
those children inspired appointments

00:17:52,240 --> 00:17:56,320
chain up to

00:17:53,280 --> 00:17:58,640
some root inspired appointment so

00:17:56,320 --> 00:18:01,840
if you want to handle everything with

00:17:58,640 --> 00:18:01,840
inspire you can do that as well

00:18:04,080 --> 00:18:07,760
the next type of plugin here is the node

00:18:05,679 --> 00:18:09,360
tester and this applies to the server

00:18:07,760 --> 00:18:12,480
and the agent

00:18:09,360 --> 00:18:13,200
and the this is something that

00:18:12,480 --> 00:18:15,600
implements

00:18:13,200 --> 00:18:16,559
kind of a challenge response protocol so

00:18:15,600 --> 00:18:18,799
you can define

00:18:16,559 --> 00:18:20,640
how the agent provides a map station

00:18:18,799 --> 00:18:21,039
material to the server to prove that

00:18:20,640 --> 00:18:24,400
it's

00:18:21,039 --> 00:18:25,840
a trusted node in the system and that

00:18:24,400 --> 00:18:28,080
could be a physical node

00:18:25,840 --> 00:18:29,600
like an actual bare metal host or it

00:18:28,080 --> 00:18:32,400
could be a virtual node

00:18:29,600 --> 00:18:33,280
like a kubernetes node or a virtual

00:18:32,400 --> 00:18:35,840
machine

00:18:33,280 --> 00:18:37,919
running in your on-prem or public cloud

00:18:35,840 --> 00:18:40,000
wherever

00:18:37,919 --> 00:18:42,000
so this defines the bridge of trust

00:18:40,000 --> 00:18:44,320
between your host identity system and

00:18:42,000 --> 00:18:45,120
spire so this is how you authenticate

00:18:44,320 --> 00:18:48,080
nodes in

00:18:45,120 --> 00:18:49,440
your system and so that these are the

00:18:48,080 --> 00:18:50,640
different plugins which are supported

00:18:49,440 --> 00:18:53,919
right now

00:18:50,640 --> 00:18:56,080
we have native plugins for aws azure and

00:18:53,919 --> 00:18:58,720
gcp virtual machines

00:18:56,080 --> 00:19:00,320
and these generally all work by querying

00:18:58,720 --> 00:19:02,799
a local metadata endpoint

00:19:00,320 --> 00:19:05,360
in the virtual machine and using a

00:19:02,799 --> 00:19:08,400
trustline first use security model to

00:19:05,360 --> 00:19:10,720
provide that identity metadata to

00:19:08,400 --> 00:19:12,080
aspire server and spire server can

00:19:10,720 --> 00:19:13,520
authenticate that and i'll show you an

00:19:12,080 --> 00:19:17,280
example

00:19:13,520 --> 00:19:18,799
flow of that after this slide

00:19:17,280 --> 00:19:20,960
some of the other plugins that are

00:19:18,799 --> 00:19:22,640
supported today are join token

00:19:20,960 --> 00:19:24,320
this is essentially a one-time

00:19:22,640 --> 00:19:27,360
pre-shared key

00:19:24,320 --> 00:19:27,919
that you can generate and you provide

00:19:27,360 --> 00:19:30,240
that

00:19:27,919 --> 00:19:31,919
key to the agent and then the server

00:19:30,240 --> 00:19:33,200
knows about it because it was the one

00:19:31,919 --> 00:19:35,520
that generated the key

00:19:33,200 --> 00:19:36,320
and so that's just a simple way to

00:19:35,520 --> 00:19:39,039
authenticate

00:19:36,320 --> 00:19:39,919
a node there's also native integration

00:19:39,039 --> 00:19:41,840
with kubernetes

00:19:39,919 --> 00:19:43,600
um there's a couple different ways this

00:19:41,840 --> 00:19:44,960
can work one is through a projected

00:19:43,600 --> 00:19:46,320
service account token which is kind of

00:19:44,960 --> 00:19:47,919
the recommended way

00:19:46,320 --> 00:19:50,559
there's also kind of a more legacy

00:19:47,919 --> 00:19:51,679
plug-in for service count tokens such as

00:19:50,559 --> 00:19:55,360
the older wave

00:19:51,679 --> 00:19:58,799
providing a node identity

00:19:55,360 --> 00:19:59,120
in kubernetes and then we also have ssh

00:19:58,799 --> 00:20:02,799
and

00:19:59,120 --> 00:20:05,600
x509 proof of possession

00:20:02,799 --> 00:20:06,400
plug-ins as well so if you are running

00:20:05,600 --> 00:20:09,360
on bare metal

00:20:06,400 --> 00:20:11,120
and you have some other host identity

00:20:09,360 --> 00:20:14,480
system like an ssh

00:20:11,120 --> 00:20:16,400
certificate authority and or maybe some

00:20:14,480 --> 00:20:19,840
out of band x 509

00:20:16,400 --> 00:20:23,120
host identity then you can use those as

00:20:19,840 --> 00:20:25,039
out-of-station material as well

00:20:23,120 --> 00:20:27,679
so this is just an example of how the

00:20:25,039 --> 00:20:30,159
noda tester works for aws

00:20:27,679 --> 00:20:31,520
so when the agent comes online its node

00:20:30,159 --> 00:20:34,080
tester plug-in

00:20:31,520 --> 00:20:35,360
is configured here to be aws and that

00:20:34,080 --> 00:20:38,799
aws plugin

00:20:35,360 --> 00:20:41,840
reaches out to the aws instance

00:20:38,799 --> 00:20:42,559
identity service on the host and that

00:20:41,840 --> 00:20:45,760
provides

00:20:42,559 --> 00:20:46,400
some identity to the agent which is

00:20:45,760 --> 00:20:50,480
signed by

00:20:46,400 --> 00:20:53,600
the es using its um its private keys

00:20:50,480 --> 00:20:54,720
and so server can will receive that

00:20:53,600 --> 00:20:57,840
identity from

00:20:54,720 --> 00:21:00,880
the agent and it'll validate that it was

00:20:57,840 --> 00:21:02,159
a valid identity provided by aws and if

00:21:00,880 --> 00:21:05,200
it's able to validate this

00:21:02,159 --> 00:21:06,720
successfully it will return an x509svid

00:21:05,200 --> 00:21:08,159
to the agent which represents the

00:21:06,720 --> 00:21:09,840
identity of the agent

00:21:08,159 --> 00:21:12,080
and then the agent is then authorized to

00:21:09,840 --> 00:21:14,840
manage identities and distribute

00:21:12,080 --> 00:21:16,960
identities to other workloads on that

00:21:14,840 --> 00:21:19,200
host

00:21:16,960 --> 00:21:20,400
so node resolver is the next plug-in

00:21:19,200 --> 00:21:22,559
here and this kind of

00:21:20,400 --> 00:21:23,679
it comes from the attestation flow which

00:21:22,559 --> 00:21:27,440
i just showed you

00:21:23,679 --> 00:21:29,280
so once that attestation completes

00:21:27,440 --> 00:21:30,880
uh in the server you can configure these

00:21:29,280 --> 00:21:33,039
node resolver plugins which

00:21:30,880 --> 00:21:35,200
append additional metadata about those

00:21:33,039 --> 00:21:37,600
nodes inspire

00:21:35,200 --> 00:21:39,440
and so why would you want to do this so

00:21:37,600 --> 00:21:42,960
the reason why this becomes useful

00:21:39,440 --> 00:21:46,240
is because it allows you to define

00:21:42,960 --> 00:21:48,960
registrations inspire that act as

00:21:46,240 --> 00:21:49,520
node aliases which serve as kind of a

00:21:48,960 --> 00:21:52,159
parent

00:21:49,520 --> 00:21:53,280
of different workloads that you want to

00:21:52,159 --> 00:21:56,320
group together on

00:21:53,280 --> 00:21:57,520
a specific subset of hosts so you can

00:21:56,320 --> 00:21:59,440
control these

00:21:57,520 --> 00:22:02,000
aliases kind of at the node level and

00:21:59,440 --> 00:22:04,640
say like host a is able to

00:22:02,000 --> 00:22:06,400
serve identities for uh workloads one

00:22:04,640 --> 00:22:07,760
two and three and host b is able to

00:22:06,400 --> 00:22:11,039
serve identities for four

00:22:07,760 --> 00:22:12,640
workloads four five and six etc so this

00:22:11,039 --> 00:22:15,919
gives you some controls

00:22:12,640 --> 00:22:19,200
to actually manage where identities are

00:22:15,919 --> 00:22:19,200
distributed throughout the system

00:22:20,080 --> 00:22:23,840
so here's kind of like an example of how

00:22:21,919 --> 00:22:26,640
you might do that so let

00:22:23,840 --> 00:22:26,960
if you look at the top registration here

00:22:26,640 --> 00:22:29,600
this

00:22:26,960 --> 00:22:30,559
is a node alias registration and you see

00:22:29,600 --> 00:22:33,600
that spiffy id

00:22:30,559 --> 00:22:36,080
is for my domain slash host

00:22:33,600 --> 00:22:36,799
a so this is we're calling this host a

00:22:36,080 --> 00:22:41,039
in her

00:22:36,799 --> 00:22:43,600
infrastructure and the selectors here

00:22:41,039 --> 00:22:45,679
are appended by the node resolver which

00:22:43,600 --> 00:22:47,280
um i've let's say i've created some

00:22:45,679 --> 00:22:49,760
node resolver in this example it's

00:22:47,280 --> 00:22:51,520
called my fancy node resolver

00:22:49,760 --> 00:22:53,600
and so it depends this selector which

00:22:51,520 --> 00:22:54,080
says hey i know something about this

00:22:53,600 --> 00:22:55,840
host

00:22:54,080 --> 00:22:57,760
it's called host a so i'm going to give

00:22:55,840 --> 00:23:01,120
it this selector

00:22:57,760 --> 00:23:03,120
so what this means is when an

00:23:01,120 --> 00:23:05,600
agent comes to retrieve its identity

00:23:03,120 --> 00:23:07,600
registrations from spire server

00:23:05,600 --> 00:23:09,600
it's first going to be matched against

00:23:07,600 --> 00:23:12,559
this node alias registration

00:23:09,600 --> 00:23:14,000
and then any registrations which are

00:23:12,559 --> 00:23:15,520
specifying this regis

00:23:14,000 --> 00:23:18,000
this node alias registration as its

00:23:15,520 --> 00:23:19,120
parent will also be sent back to that

00:23:18,000 --> 00:23:21,120
agent

00:23:19,120 --> 00:23:23,120
and so we can define these workloads

00:23:21,120 --> 00:23:26,000
with parent ids of

00:23:23,120 --> 00:23:27,200
spiffy my domain host a for workloads a

00:23:26,000 --> 00:23:29,760
and b

00:23:27,200 --> 00:23:30,720
and then that allows us to scope only

00:23:29,760 --> 00:23:36,640
the amb

00:23:30,720 --> 00:23:38,480
workload identities to this host a

00:23:36,640 --> 00:23:40,880
so next is the workload of tester and

00:23:38,480 --> 00:23:44,000
this is an agent side plug-in

00:23:40,880 --> 00:23:44,880
and so it's responsibility is to reach

00:23:44,000 --> 00:23:47,360
out to some

00:23:44,880 --> 00:23:48,080
trusted authority and interrogate it for

00:23:47,360 --> 00:23:50,080
some

00:23:48,080 --> 00:23:51,360
process selector metadata that we can

00:23:50,080 --> 00:23:54,320
use to

00:23:51,360 --> 00:23:55,840
match against registrations in spire

00:23:54,320 --> 00:23:57,760
server

00:23:55,840 --> 00:23:59,520
so some what are some example

00:23:57,760 --> 00:24:01,919
authorities that we trust

00:23:59,520 --> 00:24:04,000
inspire uh might be an operating system

00:24:01,919 --> 00:24:05,520
kernel like the linux kernel

00:24:04,000 --> 00:24:07,039
it might be some sort of orchestration

00:24:05,520 --> 00:24:09,200
platform and

00:24:07,039 --> 00:24:10,799
so here are the examples of the plugins

00:24:09,200 --> 00:24:13,520
that we support today

00:24:10,799 --> 00:24:15,600
we support docker and kubernetes and

00:24:13,520 --> 00:24:17,200
unix-based workloads

00:24:15,600 --> 00:24:20,240
so workloads that are just native

00:24:17,200 --> 00:24:20,240
processes on a host

00:24:21,840 --> 00:24:25,120
and so this is how the workload of

00:24:23,200 --> 00:24:26,640
tester flow works at a high level just

00:24:25,120 --> 00:24:29,039
to give you an idea

00:24:26,640 --> 00:24:30,159
so at the top here this green box is

00:24:29,039 --> 00:24:32,080
your workload

00:24:30,159 --> 00:24:34,880
and it connects to the workload api

00:24:32,080 --> 00:24:38,159
running on the unix domain sockets

00:24:34,880 --> 00:24:41,200
by inspire agent on that host that work

00:24:38,159 --> 00:24:41,919
really api basically has uh one api

00:24:41,200 --> 00:24:44,320
which says

00:24:41,919 --> 00:24:45,440
give me an identity and so that's what

00:24:44,320 --> 00:24:48,240
the workload calls

00:24:45,440 --> 00:24:48,960
and it says i'd like an svid to identify

00:24:48,240 --> 00:24:53,679
myself

00:24:48,960 --> 00:24:56,240
to other actors within my system

00:24:53,679 --> 00:24:57,600
inspireagent then uses this workload

00:24:56,240 --> 00:24:58,799
tester system

00:24:57,600 --> 00:25:00,640
and looks for all the configured

00:24:58,799 --> 00:25:03,200
workload tester plugins

00:25:00,640 --> 00:25:04,799
that it has and it interrogates each of

00:25:03,200 --> 00:25:08,240
those external systems

00:25:04,799 --> 00:25:14,159
to try to discover attributes about this

00:25:08,240 --> 00:25:16,799
process that's running this

00:25:14,159 --> 00:25:17,840
kubernetes workload testers uh

00:25:16,799 --> 00:25:21,520
configured on this

00:25:17,840 --> 00:25:23,520
particular agent and so both of these

00:25:21,520 --> 00:25:24,960
are interrogated and we find some

00:25:23,520 --> 00:25:27,200
selectors from each of them

00:25:24,960 --> 00:25:28,960
through the linux kernel uh and through

00:25:27,200 --> 00:25:31,039
the kublet api

00:25:28,960 --> 00:25:33,360
and so those give us some additional

00:25:31,039 --> 00:25:34,799
metadata and based on that metadata we

00:25:33,360 --> 00:25:36,799
translate that into something called a

00:25:34,799 --> 00:25:38,559
selector which is

00:25:36,799 --> 00:25:41,240
uh part of an identity registration

00:25:38,559 --> 00:25:43,600
inspire and so if the

00:25:41,240 --> 00:25:44,960
registrations and if there's any

00:25:43,600 --> 00:25:46,559
registrations inspire

00:25:44,960 --> 00:25:48,000
which match the set of selectors

00:25:46,559 --> 00:25:51,600
returned from

00:25:48,000 --> 00:25:53,840
these third-party systems then we can

00:25:51,600 --> 00:25:54,840
issue an identity for this workload

00:25:53,840 --> 00:25:57,840
based on that

00:25:54,840 --> 00:25:57,840
registration

00:25:59,200 --> 00:26:03,440
next is a key manager plugin here and

00:26:01,279 --> 00:26:04,799
this applies to the server and the agent

00:26:03,440 --> 00:26:06,720
components

00:26:04,799 --> 00:26:08,159
so this is responsible for managing the

00:26:06,720 --> 00:26:10,880
private key operations

00:26:08,159 --> 00:26:12,240
and storage of private keys throughout

00:26:10,880 --> 00:26:15,120
spire

00:26:12,240 --> 00:26:16,480
um and so some of the key things that we

00:26:15,120 --> 00:26:17,840
want to

00:26:16,480 --> 00:26:20,559
manage here are the private key

00:26:17,840 --> 00:26:23,200
generation so how it gets generated

00:26:20,559 --> 00:26:23,679
what kind of a key it is and then also

00:26:23,200 --> 00:26:25,760
um

00:26:23,679 --> 00:26:27,440
doing things like computing digital

00:26:25,760 --> 00:26:30,960
signatures on

00:26:27,440 --> 00:26:32,240
uh different identity documents that

00:26:30,960 --> 00:26:35,279
we make is something we may want to

00:26:32,240 --> 00:26:38,480
offload to a third party system

00:26:35,279 --> 00:26:40,080
uh and so or the built-in plug-ins today

00:26:38,480 --> 00:26:42,880
for the key manager are the disk

00:26:40,080 --> 00:26:43,919
and memory plug-ins so you can store the

00:26:42,880 --> 00:26:46,720
keys on disk

00:26:43,919 --> 00:26:47,360
which allows you to retrieve them on the

00:26:46,720 --> 00:26:50,720
host

00:26:47,360 --> 00:26:52,799
after the server or the agent

00:26:50,720 --> 00:26:54,000
um you know goes down and comes back up

00:26:52,799 --> 00:26:57,200
it can retrieve

00:26:54,000 --> 00:26:58,480
its identity back from disk memory is

00:26:57,200 --> 00:27:00,000
another option so if you want to just

00:26:58,480 --> 00:27:03,039
keep the keys in memory

00:27:00,000 --> 00:27:03,039
that's also possible

00:27:04,960 --> 00:27:08,320
and then the last plugin here we'll talk

00:27:06,559 --> 00:27:11,360
about is the notifier plugin

00:27:08,320 --> 00:27:12,720
and this is a server side plugin today

00:27:11,360 --> 00:27:15,200
what this does is it publishes

00:27:12,720 --> 00:27:18,399
notifications of different

00:27:15,200 --> 00:27:20,640
key operations in spire and

00:27:18,399 --> 00:27:21,520
it currently is only used to publish

00:27:20,640 --> 00:27:25,120
trust bundle

00:27:21,520 --> 00:27:27,200
events so when a bundle is changed um

00:27:25,120 --> 00:27:28,880
you can publish that new bundle out to

00:27:27,200 --> 00:27:30,480
some third-party storage

00:27:28,880 --> 00:27:32,000
uh so the plugins that you're supporting

00:27:30,480 --> 00:27:34,000
here today are

00:27:32,000 --> 00:27:35,440
google cloud storage or in kubernetes

00:27:34,000 --> 00:27:37,200
bundle um

00:27:35,440 --> 00:27:41,039
where you can write out this bundle

00:27:37,200 --> 00:27:41,039
submit to some external storage

00:27:42,320 --> 00:27:46,240
uh so how would you actually implement

00:27:44,000 --> 00:27:47,600
aspire plug-in so say maybe like you

00:27:46,240 --> 00:27:50,080
have some use case

00:27:47,600 --> 00:27:51,919
that is not solved by these built-in

00:27:50,080 --> 00:27:52,640
plug-ins and you need to extend spire

00:27:51,919 --> 00:27:56,159
for

00:27:52,640 --> 00:27:56,559
that case um so what you would need to

00:27:56,159 --> 00:27:59,440
do

00:27:56,559 --> 00:28:00,880
is in the github repository for spire

00:27:59,440 --> 00:28:01,600
there are these plug-in interfaces

00:28:00,880 --> 00:28:04,720
defined

00:28:01,600 --> 00:28:06,000
at this proto spire location and then

00:28:04,720 --> 00:28:08,799
under that there's an agent in the

00:28:06,000 --> 00:28:11,600
server directory uh and then different

00:28:08,799 --> 00:28:12,720
plug-in types underneath that um and

00:28:11,600 --> 00:28:14,480
then so

00:28:12,720 --> 00:28:16,559
for whatever plug-in that you need to

00:28:14,480 --> 00:28:18,720
implement you would

00:28:16,559 --> 00:28:20,159
find that interface for the component

00:28:18,720 --> 00:28:23,520
that you're trying to extend

00:28:20,159 --> 00:28:26,399
and you would implement that interface

00:28:23,520 --> 00:28:29,120
and then you would add a config stanza

00:28:26,399 --> 00:28:31,919
in whatever component that you're

00:28:29,120 --> 00:28:33,279
implementing the plugin for and so this

00:28:31,919 --> 00:28:35,039
is kind of one example like

00:28:33,279 --> 00:28:36,720
let's say you have a custom noda tester

00:28:35,039 --> 00:28:39,200
plug-in and

00:28:36,720 --> 00:28:41,039
you have called this my node tester this

00:28:39,200 --> 00:28:44,799
is kind of how the config might look

00:28:41,039 --> 00:28:45,120
in whatever um and but i guess in this

00:28:44,799 --> 00:28:46,880
case

00:28:45,120 --> 00:28:48,159
no tester applies to both server and

00:28:46,880 --> 00:28:51,279
agent so here

00:28:48,159 --> 00:28:53,520
the node tester is specified by

00:28:51,279 --> 00:28:55,600
its name which is called node tester my

00:28:53,520 --> 00:28:57,440
node is ester

00:28:55,600 --> 00:28:59,200
and then there are three key things to

00:28:57,440 --> 00:29:01,279
point out here one is

00:28:59,200 --> 00:29:03,600
you have a plug-in command which is a

00:29:01,279 --> 00:29:06,240
path to the binary on the host

00:29:03,600 --> 00:29:08,320
that the spire server inspire agent

00:29:06,240 --> 00:29:09,840
processes can launch

00:29:08,320 --> 00:29:11,440
and then you can optionally provide a

00:29:09,840 --> 00:29:14,960
sha-256 checks from

00:29:11,440 --> 00:29:16,720
of that binary so that you can

00:29:14,960 --> 00:29:18,559
know that that binary is something that

00:29:16,720 --> 00:29:19,760
you expected and not something that's

00:29:18,559 --> 00:29:23,600
been modified

00:29:19,760 --> 00:29:24,880
on the host and then whatever data is

00:29:23,600 --> 00:29:27,120
required for that plug-in you can

00:29:24,880 --> 00:29:29,840
provide in this plugin data

00:29:27,120 --> 00:29:30,320
section which is customizable for

00:29:29,840 --> 00:29:33,840
whatever

00:29:30,320 --> 00:29:33,840
plugin that you are implementing

00:29:34,640 --> 00:29:38,720
okay so i want to quickly touch on also

00:29:37,039 --> 00:29:40,000
some downstream integrations so this is

00:29:38,720 --> 00:29:42,320
kind of the second

00:29:40,000 --> 00:29:44,159
category of integrations that we're

00:29:42,320 --> 00:29:45,760
talking about here

00:29:44,159 --> 00:29:47,440
so once you have fire up and running how

00:29:45,760 --> 00:29:50,720
do you actually use these identities

00:29:47,440 --> 00:29:53,440
effectively so a very

00:29:50,720 --> 00:29:54,559
common paradigm now is this idea of the

00:29:53,440 --> 00:29:56,399
service mesh

00:29:54,559 --> 00:29:58,320
where you have these proxies which

00:29:56,399 --> 00:29:59,840
manage the network

00:29:58,320 --> 00:30:02,640
connectivity and routing between

00:29:59,840 --> 00:30:04,720
different services in your environment

00:30:02,640 --> 00:30:06,399
and you you know center you know the

00:30:04,720 --> 00:30:08,159
logging and you know centralized

00:30:06,399 --> 00:30:09,120
operations of authentication and things

00:30:08,159 --> 00:30:10,799
like that

00:30:09,120 --> 00:30:12,559
so spire actually has a native

00:30:10,799 --> 00:30:14,559
integration with envoy

00:30:12,559 --> 00:30:17,279
uh it implements the envoy secret

00:30:14,559 --> 00:30:19,520
discovery service it's called sds

00:30:17,279 --> 00:30:21,440
and so that's implemented by this

00:30:19,520 --> 00:30:23,120
fireworkload api today

00:30:21,440 --> 00:30:26,159
and so what this means is you can

00:30:23,120 --> 00:30:28,159
transparently enable mutual tls

00:30:26,159 --> 00:30:29,760
and using envoy through envoy

00:30:28,159 --> 00:30:31,600
configuration

00:30:29,760 --> 00:30:32,880
so when you have this deployment up and

00:30:31,600 --> 00:30:34,399
running all you have to do is add this

00:30:32,880 --> 00:30:35,440
additional configuration which is

00:30:34,399 --> 00:30:38,159
documented

00:30:35,440 --> 00:30:39,840
and spot aspire documentation and you

00:30:38,159 --> 00:30:42,559
can get mutual tls setup

00:30:39,840 --> 00:30:42,559
in your environment

00:30:42,960 --> 00:30:47,279
another example here is how do you use

00:30:45,760 --> 00:30:49,360
an svid outside of your

00:30:47,279 --> 00:30:50,640
own infrastructure so if you have

00:30:49,360 --> 00:30:52,799
external services which are

00:30:50,640 --> 00:30:54,240
part of your environment which is

00:30:52,799 --> 00:30:56,080
probably pretty likely

00:30:54,240 --> 00:30:58,480
if that supports open id connect

00:30:56,080 --> 00:31:00,399
federation you can

00:30:58,480 --> 00:31:02,240
set up federation with inspire it

00:31:00,399 --> 00:31:04,240
supports federation

00:31:02,240 --> 00:31:05,600
and so there's an example that has been

00:31:04,240 --> 00:31:08,080
put together it's

00:31:05,600 --> 00:31:08,799
pretty cool that actually shows how you

00:31:08,080 --> 00:31:11,519
can

00:31:08,799 --> 00:31:12,159
authenticate to aws management apis

00:31:11,519 --> 00:31:15,120
using

00:31:12,159 --> 00:31:18,080
svids uh so in this case it's using a

00:31:15,120 --> 00:31:21,200
jwts fed

00:31:18,080 --> 00:31:23,440
and there's more links later on for all

00:31:21,200 --> 00:31:25,440
this

00:31:23,440 --> 00:31:26,559
so what are some future extensions we're

00:31:25,440 --> 00:31:30,320
considering there's

00:31:26,559 --> 00:31:33,039
a proposal going out currently called

00:31:30,320 --> 00:31:33,840
in age list mode where you're able to

00:31:33,039 --> 00:31:36,080
request

00:31:33,840 --> 00:31:37,039
uh spire issued identity directly from

00:31:36,080 --> 00:31:40,080
the server

00:31:37,039 --> 00:31:41,200
uh as opposed to from the agent um so

00:31:40,080 --> 00:31:43,279
this kind of enables things like the

00:31:41,200 --> 00:31:44,720
serverless use case where you don't have

00:31:43,279 --> 00:31:46,880
like a dedicated node

00:31:44,720 --> 00:31:48,240
where the process is running it's

00:31:46,880 --> 00:31:49,919
something that you know comes up and

00:31:48,240 --> 00:31:51,840
it's transparent to you you don't have

00:31:49,919 --> 00:31:55,120
control of that node

00:31:51,840 --> 00:31:57,279
entirely and then we also have

00:31:55,120 --> 00:31:58,720
uh started exploring some integrations

00:31:57,279 --> 00:32:01,760
with apache data projects

00:31:58,720 --> 00:32:04,320
so in that hadoop kind of ecosystem

00:32:01,760 --> 00:32:04,880
there's kerberos based identity so how

00:32:04,320 --> 00:32:07,120
do we

00:32:04,880 --> 00:32:09,360
translate the kerberos based identity

00:32:07,120 --> 00:32:12,840
into spiffy identities

00:32:09,360 --> 00:32:15,840
and make that coexist in this

00:32:12,840 --> 00:32:18,880
environment

00:32:15,840 --> 00:32:21,279
so to conclude here we

00:32:18,880 --> 00:32:22,240
showed how spire can be extended for

00:32:21,279 --> 00:32:23,760
different use cases

00:32:22,240 --> 00:32:25,760
and bring identity to complex

00:32:23,760 --> 00:32:27,760
environments that may have a variety of

00:32:25,760 --> 00:32:29,360
proprietary or open source or cloud

00:32:27,760 --> 00:32:31,360
native tooling

00:32:29,360 --> 00:32:33,919
and we showed how this plug-in model

00:32:31,360 --> 00:32:36,080
inspire enables you to develop your own

00:32:33,919 --> 00:32:36,640
internal proprietary extensions or open

00:32:36,080 --> 00:32:39,039
source

00:32:36,640 --> 00:32:43,120
extensions that other people can consume

00:32:39,039 --> 00:32:45,279
as well

00:32:43,120 --> 00:32:46,720
and so here are the the links to reach

00:32:45,279 --> 00:32:48,240
out to the community we'd love to hear

00:32:46,720 --> 00:32:51,360
from you if you have input

00:32:48,240 --> 00:32:52,559
on any potential future plugins or you

00:32:51,360 --> 00:32:54,880
know if you have questions about some of

00:32:52,559 --> 00:32:56,880
the existing plugins or what's available

00:32:54,880 --> 00:32:57,919
uh we're very happy to engage with you

00:32:56,880 --> 00:33:00,399
further

00:32:57,919 --> 00:33:02,640
we have a website here and these are our

00:33:00,399 --> 00:33:04,399
github links we also have a slack

00:33:02,640 --> 00:33:06,080
and a twitter if you're interested in

00:33:04,399 --> 00:33:10,480
subscribing to some of the news around

00:33:06,080 --> 00:33:12,480
the spiffy inspired projects

00:33:10,480 --> 00:33:13,760
so thank you very much for attending

00:33:12,480 --> 00:33:19,519
this talk and

00:33:13,760 --> 00:33:19,519

YouTube URL: https://www.youtube.com/watch?v=JKFlwerb4HQ


