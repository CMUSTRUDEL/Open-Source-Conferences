Title: Virtual Application Networks for Cloud Native Applications - Ted Ross, Red Hat
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Virtual Application Networks for Cloud Native Applications - Ted Ross, Red Hat 

The Internet is built for client-server architectures. Cloud-native software needs better abstractions for service interconnect. Learn about Virtual Application Networks (VANs) and how they advance the capabilities of cloud-native applications. Identify and access services deployed in remote clusters, balance workload across clusters, and multicast across clusters. Create multi-cluster networks where private and edge networks are involved, IP subnetworks overlap, and topology is redundant. In this session, we will introduce the Skupper project as a VAN implementation. We will then demonstrate how a VAN can be stood up by a non-privileged developer and how it solves many vexing multi-cluster communications problems. The demonstration will involve a multi-cluster network, in a redundant but not full-mesh topology, running an HTTP-based application in both public and private data centers. 

https://sched.co/ekCc
Captions: 
	00:00:02,240 --> 00:00:04,880
hello

00:00:03,120 --> 00:00:06,560
my name is ted ross i'm a senior

00:00:04,880 --> 00:00:10,240
principal software engineer with

00:00:06,560 --> 00:00:12,480
red hat out of westford massachusetts

00:00:10,240 --> 00:00:14,320
i've spent most of my career working in

00:00:12,480 --> 00:00:16,320
embedded data networking systems and in

00:00:14,320 --> 00:00:20,000
network security and more

00:00:16,320 --> 00:00:22,880
recently i've spent a lot of my time

00:00:20,000 --> 00:00:26,880
working on the more abstract uh notions

00:00:22,880 --> 00:00:26,880
of communication like messaging and such

00:00:26,960 --> 00:00:30,000
today what i'm going to talk to you

00:00:28,840 --> 00:00:33,040
about

00:00:30,000 --> 00:00:33,920
is some challenges with cloud native

00:00:33,040 --> 00:00:35,920
interconnect

00:00:33,920 --> 00:00:38,239
i'm going to introduce the notion of a

00:00:35,920 --> 00:00:40,480
virtual application network

00:00:38,239 --> 00:00:42,879
and i'm going to do a demonstration of

00:00:40,480 --> 00:00:46,320
the scupper project

00:00:42,879 --> 00:00:48,800
so some terms before we uh get into the

00:00:46,320 --> 00:00:50,320
meat of everything here um that i'm

00:00:48,800 --> 00:00:50,960
going to be using to make sure that you

00:00:50,320 --> 00:00:53,199
understand

00:00:50,960 --> 00:00:54,160
first of all is a virtual application

00:00:53,199 --> 00:00:57,520
network

00:00:54,160 --> 00:01:00,640
sometimes i will refer to this as a van

00:00:57,520 --> 00:01:02,719
so this is really about multi-site

00:01:00,640 --> 00:01:04,640
hybrid edge cloud interconnect it's

00:01:02,719 --> 00:01:05,600
about connecting processes and services

00:01:04,640 --> 00:01:07,280
together

00:01:05,600 --> 00:01:08,880
no matter where they are even if they

00:01:07,280 --> 00:01:11,280
are on multiple

00:01:08,880 --> 00:01:13,200
sites or multiple clusters it is a

00:01:11,280 --> 00:01:17,439
higher abstraction for process

00:01:13,200 --> 00:01:20,720
interconnect than for example tcpip

00:01:17,439 --> 00:01:22,400
scupper is an open source project and it

00:01:20,720 --> 00:01:24,320
is an implementation of a virtual

00:01:22,400 --> 00:01:28,000
application network and this is what my

00:01:24,320 --> 00:01:29,439
team at red hat is working on presently

00:01:28,000 --> 00:01:31,759
so let's talk a little bit about

00:01:29,439 --> 00:01:32,400
internet um and just how it's structured

00:01:31,759 --> 00:01:35,600
so the

00:01:32,400 --> 00:01:37,759
the internet um is divided into two

00:01:35,600 --> 00:01:39,439
pieces there's the public internet which

00:01:37,759 --> 00:01:41,840
is a public um

00:01:39,439 --> 00:01:43,600
in addressing space everything in this

00:01:41,840 --> 00:01:44,640
space can be addressed from anywhere on

00:01:43,600 --> 00:01:47,200
the globe

00:01:44,640 --> 00:01:48,159
on the internet uh there are private

00:01:47,200 --> 00:01:50,799
edge networks

00:01:48,159 --> 00:01:52,159
as well and of this there are literally

00:01:50,799 --> 00:01:54,640
hundreds of millions

00:01:52,159 --> 00:01:56,240
of overlapping private edge networks

00:01:54,640 --> 00:01:58,320
they use the same addresses

00:01:56,240 --> 00:01:59,600
address space overlapping and this is

00:01:58,320 --> 00:02:03,680
the reason why

00:01:59,600 --> 00:02:05,920
the internet scales as hugely as it does

00:02:03,680 --> 00:02:07,280
and the typical pattern of communication

00:02:05,920 --> 00:02:09,360
then that you see

00:02:07,280 --> 00:02:10,399
is this vertical communication where the

00:02:09,360 --> 00:02:13,760
clients

00:02:10,399 --> 00:02:15,680
in private edge networks uh use the

00:02:13,760 --> 00:02:16,959
server servers that are in the public

00:02:15,680 --> 00:02:18,720
internet and that's that's a

00:02:16,959 --> 00:02:20,239
generalization but that's this is the

00:02:18,720 --> 00:02:23,680
the way that the internet

00:02:20,239 --> 00:02:25,680
is basically structured so what this

00:02:23,680 --> 00:02:26,560
means is that any communication that

00:02:25,680 --> 00:02:29,599
occurs

00:02:26,560 --> 00:02:29,599
between um

00:02:30,400 --> 00:02:35,360
endpoints in the edges with each other

00:02:33,680 --> 00:02:36,800
is actually an illusion because that

00:02:35,360 --> 00:02:37,599
traffic is actually going to a server

00:02:36,800 --> 00:02:38,879
then back

00:02:37,599 --> 00:02:40,959
back down again that's the way that

00:02:38,879 --> 00:02:42,480
those applications are actually written

00:02:40,959 --> 00:02:44,160
so that's why i'm going to claim that

00:02:42,480 --> 00:02:46,000
the internet and

00:02:44,160 --> 00:02:48,239
client server architecture kind of go

00:02:46,000 --> 00:02:50,640
hand in hand they both grew up together

00:02:48,239 --> 00:02:51,280
and the internet is uh very well suited

00:02:50,640 --> 00:02:55,680
for client

00:02:51,280 --> 00:02:58,400
server architecture i will further claim

00:02:55,680 --> 00:02:59,840
that cloud native architecture is not

00:02:58,400 --> 00:03:01,760
client server architecture

00:02:59,840 --> 00:03:04,480
cloud native wants to do things much

00:03:01,760 --> 00:03:07,120
more flexibly we want to be able to talk

00:03:04,480 --> 00:03:08,080
horizontally east west north south in

00:03:07,120 --> 00:03:10,879
every

00:03:08,080 --> 00:03:11,440
every such direction that might exist

00:03:10,879 --> 00:03:12,959
and

00:03:11,440 --> 00:03:14,640
we don't want to be constrained

00:03:12,959 --> 00:03:18,000
necessarily by where

00:03:14,640 --> 00:03:20,720
things are located so let me then also

00:03:18,000 --> 00:03:22,319
talk a little bit about addressing as

00:03:20,720 --> 00:03:25,040
background

00:03:22,319 --> 00:03:26,159
and as i'm sure you're all familiar with

00:03:25,040 --> 00:03:28,319
tcpip

00:03:26,159 --> 00:03:30,000
and internet use a host address plus a

00:03:28,319 --> 00:03:31,840
port now we don't

00:03:30,000 --> 00:03:34,080
generally talk about numeric host

00:03:31,840 --> 00:03:35,840
addresses we actually use names

00:03:34,080 --> 00:03:37,280
and but those names are then locally

00:03:35,840 --> 00:03:39,840
mapped

00:03:37,280 --> 00:03:41,599
to addresses using a name lookup service

00:03:39,840 --> 00:03:45,360
like domain name service

00:03:41,599 --> 00:03:47,120
so the name maps by dns

00:03:45,360 --> 00:03:49,519
to a host address the host address

00:03:47,120 --> 00:03:52,480
addresses a host the port then says

00:03:49,519 --> 00:03:54,799
which process on that host am i wishing

00:03:52,480 --> 00:03:57,840
to communicate with

00:03:54,799 --> 00:03:58,959
now by contrast a van uses a service

00:03:57,840 --> 00:04:01,519
address

00:03:58,959 --> 00:04:02,959
same name but in this case the names are

00:04:01,519 --> 00:04:04,799
actually the address

00:04:02,959 --> 00:04:06,560
that are being used for routing across

00:04:04,799 --> 00:04:08,720
the network

00:04:06,560 --> 00:04:09,599
the names reference a process rather

00:04:08,720 --> 00:04:11,360
than a host

00:04:09,599 --> 00:04:13,120
so we're routing to processes rather

00:04:11,360 --> 00:04:16,639
than hosts

00:04:13,120 --> 00:04:18,959
and the van is

00:04:16,639 --> 00:04:19,759
natively multi-access rather than

00:04:18,959 --> 00:04:21,600
unicast

00:04:19,759 --> 00:04:23,040
and what this means is that it is

00:04:21,600 --> 00:04:25,040
expected that

00:04:23,040 --> 00:04:26,400
multiple services will be deployed with

00:04:25,040 --> 00:04:28,400
the same address

00:04:26,400 --> 00:04:30,320
and this is actually what we want as

00:04:28,400 --> 00:04:33,360
cloud native developers we

00:04:30,320 --> 00:04:36,080
almost never want to create a single

00:04:33,360 --> 00:04:37,759
uh singleton instance of a service we

00:04:36,080 --> 00:04:39,360
almost always want to have multiple

00:04:37,759 --> 00:04:41,280
instances of a service and we do this

00:04:39,360 --> 00:04:43,199
because we want to have

00:04:41,280 --> 00:04:44,320
high availability in case one of them

00:04:43,199 --> 00:04:47,199
fails we want to

00:04:44,320 --> 00:04:47,680
be able to handle high high amounts of

00:04:47,199 --> 00:04:49,360
load

00:04:47,680 --> 00:04:51,280
so that we can spread the load across

00:04:49,360 --> 00:04:53,199
different instances of the service

00:04:51,280 --> 00:04:54,880
or we might be interested in locality

00:04:53,199 --> 00:04:56,880
where we want you know a service

00:04:54,880 --> 00:04:59,520
in asia pacific to have a client in asia

00:04:56,880 --> 00:05:01,680
pacific and another service in uh east

00:04:59,520 --> 00:05:03,199
you know western europe to handle uh

00:05:01,680 --> 00:05:04,400
services that come from western europe

00:05:03,199 --> 00:05:08,840
and that makes for a better

00:05:04,400 --> 00:05:12,479
experience for uh for everybody involved

00:05:08,840 --> 00:05:13,919
so multi-access comes in two flavors as

00:05:12,479 --> 00:05:15,840
the anycast which is

00:05:13,919 --> 00:05:18,560
about load balancing as i've just been

00:05:15,840 --> 00:05:20,560
talking about and there's multicast for

00:05:18,560 --> 00:05:21,759
distribution so say for example the

00:05:20,560 --> 00:05:23,759
event distribution

00:05:21,759 --> 00:05:24,880
if i wish to create an event but have

00:05:23,759 --> 00:05:27,360
that received by

00:05:24,880 --> 00:05:29,680
multiple consumers across my network

00:05:27,360 --> 00:05:32,960
then i would use a multicast flavor

00:05:29,680 --> 00:05:33,600
of multi-access now i should mention

00:05:32,960 --> 00:05:36,880
that you know

00:05:33,600 --> 00:05:40,080
vans as i said before are really about

00:05:36,880 --> 00:05:41,360
multi-cluster multi-site interconnect so

00:05:40,080 --> 00:05:43,280
this

00:05:41,360 --> 00:05:45,919
routing whether it be any cash load

00:05:43,280 --> 00:05:47,919
balancing or multicast distribution

00:05:45,919 --> 00:05:49,600
is network wide it's not constrained to

00:05:47,919 --> 00:05:50,160
a lan it's not constrained to a data

00:05:49,600 --> 00:05:52,160
center

00:05:50,160 --> 00:05:53,759
it's not constrained in any way by the

00:05:52,160 --> 00:05:55,199
underlying network so if i want to

00:05:53,759 --> 00:05:57,199
multicast across the globe

00:05:55,199 --> 00:05:58,880
that's how my application is set up then

00:05:57,199 --> 00:06:00,880
i'm going to do be able to do that

00:05:58,880 --> 00:06:04,080
and if i want to load balance across the

00:06:00,880 --> 00:06:07,039
globe i can do that as well

00:06:04,080 --> 00:06:09,280
so a virtual application network as an

00:06:07,039 --> 00:06:09,840
abstraction is a layer that we can

00:06:09,280 --> 00:06:12,479
insert

00:06:09,840 --> 00:06:14,000
in between our application processes and

00:06:12,479 --> 00:06:17,039
the well-known tcpip

00:06:14,000 --> 00:06:18,560
network so it utilizes the strengths of

00:06:17,039 --> 00:06:20,240
the internet

00:06:18,560 --> 00:06:22,240
and doesn't ask the internet to do

00:06:20,240 --> 00:06:23,840
anything that it wasn't intended to do

00:06:22,240 --> 00:06:25,600
so it uses that you know that really

00:06:23,840 --> 00:06:27,759
strong connect connectivity and

00:06:25,600 --> 00:06:29,840
communication capability but doesn't

00:06:27,759 --> 00:06:32,319
try to get it to do things like uh you

00:06:29,840 --> 00:06:34,080
know global multicast

00:06:32,319 --> 00:06:35,919
the applications do not need to be

00:06:34,080 --> 00:06:38,400
modified so if the application is

00:06:35,919 --> 00:06:39,520
written as an http rest application like

00:06:38,400 --> 00:06:42,160
i'm going to show you in my

00:06:39,520 --> 00:06:44,319
in my demonstration or if it's grpc or

00:06:42,160 --> 00:06:46,960
if it uses some messaging mechanism

00:06:44,319 --> 00:06:49,759
or even if it's like using just a home

00:06:46,960 --> 00:06:52,800
brewed tcp or udp protocol or or a

00:06:49,759 --> 00:06:53,440
standard one like jdbc uh it can run

00:06:52,800 --> 00:06:57,840
across

00:06:53,440 --> 00:06:59,919
the van um unmodified and the van is

00:06:57,840 --> 00:07:01,039
a natural fit into container platforms

00:06:59,919 --> 00:07:03,280
like kubernetes

00:07:01,039 --> 00:07:04,479
docker or other things like eclipse io

00:07:03,280 --> 00:07:06,240
fog

00:07:04,479 --> 00:07:07,840
because of the way that they are very

00:07:06,240 --> 00:07:10,080
they very flexibly handle local

00:07:07,840 --> 00:07:12,319
networking

00:07:10,080 --> 00:07:14,080
so one of the important aspects of a

00:07:12,319 --> 00:07:17,680
virtual application network

00:07:14,080 --> 00:07:20,400
is the independence the orthogonality

00:07:17,680 --> 00:07:21,440
so the shape of the application and the

00:07:20,400 --> 00:07:23,280
shape of the network

00:07:21,440 --> 00:07:25,039
are not related and they are independent

00:07:23,280 --> 00:07:28,319
from each other

00:07:25,039 --> 00:07:30,160
so as devops we want to allocate our

00:07:28,319 --> 00:07:32,000
services to site for our business

00:07:30,160 --> 00:07:34,639
reasons we don't want to do it because

00:07:32,000 --> 00:07:36,400
the network is constrained or demands

00:07:34,639 --> 00:07:38,479
that we do in a certain way

00:07:36,400 --> 00:07:40,080
so for example if we want to do test and

00:07:38,479 --> 00:07:41,599
development of a subsystem right or

00:07:40,080 --> 00:07:42,000
maybe our entire system we want to use a

00:07:41,599 --> 00:07:44,560
full

00:07:42,000 --> 00:07:46,560
small footprint for that if we're

00:07:44,560 --> 00:07:48,319
deployed we want to add regions because

00:07:46,560 --> 00:07:50,879
we've started advertising

00:07:48,319 --> 00:07:53,919
in apac and we want to put up a front

00:07:50,879 --> 00:07:56,319
end in singapore or we can do that

00:07:53,919 --> 00:07:58,000
if we want to deploy our services on

00:07:56,319 --> 00:08:00,960
different public availability

00:07:58,000 --> 00:08:02,479
zones to protect ourselves from

00:08:00,960 --> 00:08:03,840
disappearing off the face of the earth

00:08:02,479 --> 00:08:06,720
if one of them fails

00:08:03,840 --> 00:08:10,000
for high availability if we want to be

00:08:06,720 --> 00:08:12,879
able to scale our compute capacity

00:08:10,000 --> 00:08:15,039
with the changes in demand and the the

00:08:12,879 --> 00:08:16,560
offered load the demand

00:08:15,039 --> 00:08:18,160
we want to do that so that we can be

00:08:16,560 --> 00:08:19,680
efficient with the cost we don't want to

00:08:18,160 --> 00:08:22,160
over allocate services

00:08:19,680 --> 00:08:24,800
but we want to have services on hand

00:08:22,160 --> 00:08:26,960
when we need them

00:08:24,800 --> 00:08:28,479
we want our sensitive data to be located

00:08:26,960 --> 00:08:30,000
in our private data centers we don't

00:08:28,479 --> 00:08:32,240
want to put them in public clouds

00:08:30,000 --> 00:08:33,120
in fact it may be required by law for us

00:08:32,240 --> 00:08:36,320
to do this

00:08:33,120 --> 00:08:36,800
so even though these data services may

00:08:36,320 --> 00:08:38,479
be

00:08:36,800 --> 00:08:40,320
needed by things outside we don't want

00:08:38,479 --> 00:08:42,560
to locate them there

00:08:40,320 --> 00:08:44,399
and then in terms of development maybe

00:08:42,560 --> 00:08:45,040
we want to connect our laptop to a van

00:08:44,399 --> 00:08:47,200
so we can

00:08:45,040 --> 00:08:48,480
do development and debugging in context

00:08:47,200 --> 00:08:50,720
without having to actually use a

00:08:48,480 --> 00:08:53,360
container platform for that

00:08:50,720 --> 00:08:56,560
that process which is makes the

00:08:53,360 --> 00:08:59,760
development process much easier

00:08:56,560 --> 00:09:01,360
so here is like a notional aspect of

00:08:59,760 --> 00:09:02,800
event what it might look like where i've

00:09:01,360 --> 00:09:05,680
got a number of

00:09:02,800 --> 00:09:07,920
public sites and i've got arrays of edge

00:09:05,680 --> 00:09:08,640
locations maybe their storefronts maybe

00:09:07,920 --> 00:09:10,240
their

00:09:08,640 --> 00:09:11,839
factories maybe their warehouses

00:09:10,240 --> 00:09:14,399
whatever you know whatever it might be

00:09:11,839 --> 00:09:15,600
that is driving my application and i've

00:09:14,399 --> 00:09:17,440
got a headquarters

00:09:15,600 --> 00:09:19,600
and they're all interconnected in a way

00:09:17,440 --> 00:09:22,240
that i just designate

00:09:19,600 --> 00:09:24,160
so a couple notes about this topology so

00:09:22,240 --> 00:09:25,600
the inner site connections

00:09:24,160 --> 00:09:27,440
these arrows that i'm showing you they

00:09:25,600 --> 00:09:29,440
all use mutual tls with a dedicated

00:09:27,440 --> 00:09:31,920
certificate authorities this is very

00:09:29,440 --> 00:09:34,080
locked down from a security standpoint

00:09:31,920 --> 00:09:34,800
so no sockets or ports are open to the

00:09:34,080 --> 00:09:36,800
public

00:09:34,800 --> 00:09:38,160
that don't use this mtls so that you

00:09:36,800 --> 00:09:39,200
know those connections are going across

00:09:38,160 --> 00:09:42,000
the internet but they

00:09:39,200 --> 00:09:43,519
are protected so the only time that this

00:09:42,000 --> 00:09:45,519
application would actually open

00:09:43,519 --> 00:09:47,200
a port to public is if they actually

00:09:45,519 --> 00:09:49,360
wish to do so to provide

00:09:47,200 --> 00:09:51,200
an ingress or a portal or a website for

00:09:49,360 --> 00:09:54,480
example

00:09:51,200 --> 00:09:56,399
no vpns no ipsec no sdn

00:09:54,480 --> 00:09:58,080
nothing but vanilla networking is used

00:09:56,399 --> 00:10:00,160
here

00:09:58,080 --> 00:10:02,000
and furthermore it's developer

00:10:00,160 --> 00:10:04,000
accessible so as a developer i don't

00:10:02,000 --> 00:10:05,760
need admin privileges i don't need

00:10:04,000 --> 00:10:07,440
cluster admin privileges i don't need

00:10:05,760 --> 00:10:09,279
anything elevated i don't need to make

00:10:07,440 --> 00:10:11,200
any phone calls to set this up

00:10:09,279 --> 00:10:12,959
all i need is access to name spaces in

00:10:11,200 --> 00:10:16,800
these locations

00:10:12,959 --> 00:10:18,800
and i can hook them together using a van

00:10:16,800 --> 00:10:20,240
the redundant paths are recommended

00:10:18,800 --> 00:10:21,839
because they provide resilience to

00:10:20,240 --> 00:10:24,800
failure i don't need a full mesh

00:10:21,839 --> 00:10:26,160
but i do want to have redundancy in case

00:10:24,800 --> 00:10:27,440
in case

00:10:26,160 --> 00:10:30,880
there are failures somewhere in the

00:10:27,440 --> 00:10:32,640
network or if data centers go down

00:10:30,880 --> 00:10:34,000
so what am i going to show you in the

00:10:32,640 --> 00:10:36,640
demonstration

00:10:34,000 --> 00:10:37,519
so i'm going to show you a network of

00:10:36,640 --> 00:10:41,040
four

00:10:37,519 --> 00:10:43,120
kubernetes clusters i've got a mini cube

00:10:41,040 --> 00:10:47,040
running on my laptop

00:10:43,120 --> 00:10:49,600
i've got oc4 openshift version 4 running

00:10:47,040 --> 00:10:51,519
in aws this is actually in europe

00:10:49,600 --> 00:10:53,440
i've got azure kubernetes services

00:10:51,519 --> 00:10:55,760
running in u.s east and this is

00:10:53,440 --> 00:10:57,040
straight vanilla kubernetes 11711

00:10:55,760 --> 00:10:59,120
deployment

00:10:57,040 --> 00:11:01,120
and i've also got a remote system in a

00:10:59,120 --> 00:11:03,600
remote data data center that's running

00:11:01,120 --> 00:11:06,079
an old version of openshift 311

00:11:03,600 --> 00:11:06,720
so and i'm going to hook them up in a

00:11:06,079 --> 00:11:08,399
network

00:11:06,720 --> 00:11:10,000
so what i'm going to show you when i do

00:11:08,399 --> 00:11:11,920
this demonstration is

00:11:10,000 --> 00:11:14,880
a k-native service that i'm going to

00:11:11,920 --> 00:11:16,800
deploy on the laptop and aws

00:11:14,880 --> 00:11:18,720
now i'm going to designate the laptop as

00:11:16,800 --> 00:11:19,600
being primary this is the one i want to

00:11:18,720 --> 00:11:22,880
use

00:11:19,600 --> 00:11:25,440
by default but aws

00:11:22,880 --> 00:11:27,920
there is a secondary a backup and it can

00:11:25,440 --> 00:11:32,000
also be used to handle load in case

00:11:27,920 --> 00:11:35,040
the laptop service becomes backed up

00:11:32,000 --> 00:11:36,720
so it can load balance and pick up load

00:11:35,040 --> 00:11:38,959
this is sometimes referred to as cloud

00:11:36,720 --> 00:11:41,200
bursting

00:11:38,959 --> 00:11:42,720
so i'm going to show edge to edge in

00:11:41,200 --> 00:11:43,680
direct connectivity because i'm going to

00:11:42,720 --> 00:11:45,600
put my

00:11:43,680 --> 00:11:47,680
load generating client over here on

00:11:45,600 --> 00:11:49,120
remote and it's going to be able to use

00:11:47,680 --> 00:11:50,880
these services

00:11:49,120 --> 00:11:52,480
one of which on the laptop is not

00:11:50,880 --> 00:11:53,839
directly accessible it's going to be a

00:11:52,480 --> 00:11:56,959
two-hop

00:11:53,839 --> 00:11:58,320
proposition to get there and the other

00:11:56,959 --> 00:12:00,639
thing i'm going to show as i mentioned

00:11:58,320 --> 00:12:02,240
before is multi-multi-cluster load

00:12:00,639 --> 00:12:03,440
balancing because i'm going to show that

00:12:02,240 --> 00:12:05,639
service

00:12:03,440 --> 00:12:06,880
being offered on the two places

00:12:05,639 --> 00:12:09,839
simultaneously

00:12:06,880 --> 00:12:11,040
so let's get started so what i'm showing

00:12:09,839 --> 00:12:14,160
you is this sort of

00:12:11,040 --> 00:12:16,399
my demonstration view on the upper left

00:12:14,160 --> 00:12:18,560
shows the topology and then i've got a

00:12:16,399 --> 00:12:21,519
command line

00:12:18,560 --> 00:12:23,360
terminal color coded for each location

00:12:21,519 --> 00:12:25,680
so you can see what's going on there

00:12:23,360 --> 00:12:27,120
so the very first thing i do here is i

00:12:25,680 --> 00:12:29,519
first of all i have to get the scupper

00:12:27,120 --> 00:12:31,279
executable from the scupper project

00:12:29,519 --> 00:12:34,560
but what i will then do is just issue

00:12:31,279 --> 00:12:34,560
this simple command

00:12:36,839 --> 00:12:39,839
which

00:12:44,720 --> 00:12:48,800
and this one is a ws so i'm just going

00:12:47,760 --> 00:12:52,000
to discovering it

00:12:48,800 --> 00:12:55,040
site name aws and i'll do the same thing

00:12:52,000 --> 00:12:58,959
here called azure

00:12:55,040 --> 00:13:01,519
the same thing here called remote

00:12:58,959 --> 00:13:02,560
i'll do the same thing here i'll call it

00:13:01,519 --> 00:13:04,160
laptop

00:13:02,560 --> 00:13:06,160
but one of the things i'm doing on

00:13:04,160 --> 00:13:07,680
laptop is i'm enabling a console because

00:13:06,160 --> 00:13:08,160
i want to show you the scupper console

00:13:07,680 --> 00:13:11,519
while i'm

00:13:08,160 --> 00:13:13,279
at it so i'm turning off the

00:13:11,519 --> 00:13:16,079
console auth for the purposes of this

00:13:13,279 --> 00:13:18,720
demonstration because

00:13:16,079 --> 00:13:19,760
i trust my audience not to be attempting

00:13:18,720 --> 00:13:21,680
to hack it while i'm doing the

00:13:19,760 --> 00:13:24,240
demonstration

00:13:21,680 --> 00:13:24,800
so this this now has uh enabled scupper

00:13:24,240 --> 00:13:27,760
it's

00:13:24,800 --> 00:13:29,680
injected the router into my namespace a

00:13:27,760 --> 00:13:31,519
scupper router that can be used

00:13:29,680 --> 00:13:33,279
to set up this network so the first

00:13:31,519 --> 00:13:34,480
thing i need to do for my two public

00:13:33,279 --> 00:13:38,000
sites

00:13:34,480 --> 00:13:39,519
is create a which called a

00:13:38,000 --> 00:13:42,160
connection token so i'll create a

00:13:39,519 --> 00:13:46,240
connection token for aws

00:13:42,160 --> 00:13:48,079
and i'll create one for azure

00:13:46,240 --> 00:13:50,639
and what this means is this this is all

00:13:48,079 --> 00:13:53,680
the information needed to make a secure

00:13:50,639 --> 00:13:56,720
mtls connection to this location

00:13:53,680 --> 00:13:58,800
so i've made i've set up aws and azure

00:13:56,720 --> 00:14:02,320
to be connected to

00:13:58,800 --> 00:14:04,240
i'm going to secure copy those tokens

00:14:02,320 --> 00:14:07,040
over to my remote site because this is

00:14:04,240 --> 00:14:08,720
actually a remote connection

00:14:07,040 --> 00:14:10,639
so i've transported those tokens

00:14:08,720 --> 00:14:12,000
securely over to my remote site so i can

00:14:10,639 --> 00:14:15,040
make a connection

00:14:12,000 --> 00:14:16,000
and then i will establish my first

00:14:15,040 --> 00:14:20,160
connection between

00:14:16,000 --> 00:14:20,160
azure and aws so

00:14:20,480 --> 00:14:27,920
i will scupper connect my aws

00:14:25,360 --> 00:14:29,680
and configure it to make this connection

00:14:27,920 --> 00:14:31,920
and the next thing i will do

00:14:29,680 --> 00:14:32,720
is i will configure both of my edge

00:14:31,920 --> 00:14:34,320
systems

00:14:32,720 --> 00:14:36,720
my laptop and my remote to make

00:14:34,320 --> 00:14:39,440
redundant system connections in

00:14:36,720 --> 00:14:40,800
to each of the public locations so uh

00:14:39,440 --> 00:14:42,839
let's see if i can get this to work

00:14:40,800 --> 00:14:46,560
right

00:14:42,839 --> 00:14:50,480
um so let's connect for aws

00:14:46,560 --> 00:14:52,320
and azure and then i will do the same in

00:14:50,480 --> 00:14:55,120
my remote

00:14:52,320 --> 00:14:55,120
aws

00:14:55,920 --> 00:14:59,839
azure oops

00:15:03,680 --> 00:15:12,320
and they are configured to connect

00:15:06,720 --> 00:15:14,800
and off it runs

00:15:12,320 --> 00:15:16,560
all right so while things are

00:15:14,800 --> 00:15:17,920
stabilizing here let me talk a little

00:15:16,560 --> 00:15:19,760
bit about this picture

00:15:17,920 --> 00:15:21,519
you'll see that there are arrowheads

00:15:19,760 --> 00:15:23,519
depicted in these connections

00:15:21,519 --> 00:15:25,120
and these arrowheads are significant

00:15:23,519 --> 00:15:27,440
only in that they depict

00:15:25,120 --> 00:15:29,120
the direction of the connection

00:15:27,440 --> 00:15:32,720
establishment

00:15:29,120 --> 00:15:34,399
so aws and azure are public locations

00:15:32,720 --> 00:15:36,240
they have public addresses they are in

00:15:34,399 --> 00:15:38,000
the public side of the internet

00:15:36,240 --> 00:15:40,160
laptop and remote are in private

00:15:38,000 --> 00:15:41,680
networks so there's no way to make a

00:15:40,160 --> 00:15:42,959
connection to them they don't have

00:15:41,680 --> 00:15:44,720
public addresses

00:15:42,959 --> 00:15:46,480
and i'm not setting up anything fancy

00:15:44,720 --> 00:15:49,839
here like a vpn

00:15:46,480 --> 00:15:51,600
so so what happens now is once those

00:15:49,839 --> 00:15:53,839
connections are established

00:15:51,600 --> 00:15:55,519
the arrowheads are no longer significant

00:15:53,839 --> 00:15:57,360
because the connections are long-lived

00:15:55,519 --> 00:15:58,720
they're established they're secure and

00:15:57,360 --> 00:16:01,440
once they're in place

00:15:58,720 --> 00:16:03,519
they operate bi-directionally so this is

00:16:01,440 --> 00:16:04,560
my network now that is established

00:16:03,519 --> 00:16:08,160
between

00:16:04,560 --> 00:16:09,440
the four different uh locations so

00:16:08,160 --> 00:16:10,880
while i've been talking i'll give it a

00:16:09,440 --> 00:16:12,639
chance to stabilize let's see what

00:16:10,880 --> 00:16:15,519
happens here

00:16:12,639 --> 00:16:16,639
i will ask my laptop to say scupper

00:16:15,519 --> 00:16:19,759
status what's

00:16:16,639 --> 00:16:21,519
the status here and it's going to tell

00:16:19,759 --> 00:16:23,199
me that it is connected to three other

00:16:21,519 --> 00:16:24,959
sites

00:16:23,199 --> 00:16:26,240
one indirectly that's kind of what we

00:16:24,959 --> 00:16:27,199
expect isn't it because it's connected

00:16:26,240 --> 00:16:28,639
to three sites

00:16:27,199 --> 00:16:33,199
but one of them doesn't have a direct

00:16:28,639 --> 00:16:33,199
connection to it now if i were to ask

00:16:33,279 --> 00:16:39,120
azure the same question scupper status

00:16:37,040 --> 00:16:40,160
and it should get back to me hopefully

00:16:39,120 --> 00:16:42,480
with uh

00:16:40,160 --> 00:16:43,519
something similar yes it's connected to

00:16:42,480 --> 00:16:45,120
three other sites

00:16:43,519 --> 00:16:47,040
and none of them indirectly so this is

00:16:45,120 --> 00:16:49,440
correct azure has a direct connection to

00:16:47,040 --> 00:16:55,600
all the other sites

00:16:49,440 --> 00:16:55,600
okay so let let's get the services

00:16:56,079 --> 00:17:01,120
on my mini cube on my laptop

00:17:02,160 --> 00:17:05,199
and i've got one called scupper

00:17:03,759 --> 00:17:08,400
controller i'm going to grab

00:17:05,199 --> 00:17:10,400
his um external ip address

00:17:08,400 --> 00:17:12,319
i'm going to go to a web browser i'm

00:17:10,400 --> 00:17:15,199
going to web to this

00:17:12,319 --> 00:17:17,520
port 8080 as it's exposed this is the

00:17:15,199 --> 00:17:20,240
scupper console

00:17:17,520 --> 00:17:21,919
and it's connecting up and if i go to

00:17:20,240 --> 00:17:23,439
the sites tab

00:17:21,919 --> 00:17:25,600
this is going to tell me what's actually

00:17:23,439 --> 00:17:27,679
happening in my network

00:17:25,600 --> 00:17:29,039
and it looks kind of familiar so this is

00:17:27,679 --> 00:17:32,400
a good sign

00:17:29,039 --> 00:17:33,840
that what we've set up manually is

00:17:32,400 --> 00:17:35,280
actually what we got so we

00:17:33,840 --> 00:17:37,200
here we have a network you saw the whole

00:17:35,280 --> 00:17:38,160
thing set up and it's all established

00:17:37,200 --> 00:17:41,360
and ready to go

00:17:38,160 --> 00:17:43,200
so it's time to go on to the next step

00:17:41,360 --> 00:17:45,120
and before i do i'm just going to do a

00:17:43,200 --> 00:17:49,520
little oc get

00:17:45,120 --> 00:17:51,760
services here on my remote for reference

00:17:49,520 --> 00:17:53,600
and i'm now going to and you'll see that

00:17:51,760 --> 00:17:55,600
there is the load gens

00:17:53,600 --> 00:17:56,880
the client load generating client i

00:17:55,600 --> 00:17:58,480
talked about and there's a couple

00:17:56,880 --> 00:18:01,760
services associated with

00:17:58,480 --> 00:18:04,240
the scupper deployment itself so i'm now

00:18:01,760 --> 00:18:04,240
going to

00:18:04,799 --> 00:18:10,480
do a uh k apply

00:18:08,000 --> 00:18:11,280
dash path service so i'm going to apply

00:18:10,480 --> 00:18:14,880
this

00:18:11,280 --> 00:18:19,679
k native service deploy it here on my

00:18:14,880 --> 00:18:19,679
laptop and i'm going to apply

00:18:20,640 --> 00:18:24,559
a yaml for scupper which is just going

00:18:22,400 --> 00:18:26,799
to annotate that service

00:18:24,559 --> 00:18:28,880
so it can be exposed via cover i'm going

00:18:26,799 --> 00:18:33,200
to do the same thing on aws

00:18:28,880 --> 00:18:37,679
so here i will say oc apply

00:18:33,200 --> 00:18:40,080
service you'll notice that the aws

00:18:37,679 --> 00:18:41,039
being remote and in europe runs quite a

00:18:40,080 --> 00:18:46,080
bit slower

00:18:41,039 --> 00:18:46,080
and oc apply dash f

00:18:46,160 --> 00:18:48,799
scupper

00:18:49,200 --> 00:18:54,080
yellow so catch up as it catches up so

00:18:52,960 --> 00:18:56,960
while that's going

00:18:54,080 --> 00:18:59,039
let me now go back to remote and look at

00:18:56,960 --> 00:19:02,000
the service list again

00:18:59,039 --> 00:19:02,000
so in this case

00:19:02,640 --> 00:19:05,760
okay here's the new list so i've got the

00:19:04,320 --> 00:19:08,320
same ones i had before

00:19:05,760 --> 00:19:10,000
but there's a new one called greeting so

00:19:08,320 --> 00:19:11,840
greeting is a service for

00:19:10,000 --> 00:19:13,760
which there is no pod backing it or

00:19:11,840 --> 00:19:16,240
deployment backing it locally

00:19:13,760 --> 00:19:18,880
but this is actually what has been done

00:19:16,240 --> 00:19:20,000
by scuffer so sk i i put these k native

00:19:18,880 --> 00:19:23,360
servers

00:19:20,000 --> 00:19:25,760
up on aws and laptop and then

00:19:23,360 --> 00:19:27,520
i scupperized them and now i have

00:19:25,760 --> 00:19:29,039
services in all four locations that can

00:19:27,520 --> 00:19:30,960
be used to access them so

00:19:29,039 --> 00:19:32,320
think of this as a proxy service that

00:19:30,960 --> 00:19:35,760
can get to that load that

00:19:32,320 --> 00:19:41,120
remote place so if i were to

00:19:35,760 --> 00:19:41,120
come over and look at oc pods

00:19:43,280 --> 00:19:47,520
so i've got the greeting pod running um

00:19:46,000 --> 00:19:49,440
this comes up initially

00:19:47,520 --> 00:19:50,960
but when it's not used k native will

00:19:49,440 --> 00:19:54,480
scale it to zero

00:19:50,960 --> 00:19:54,799
okay get pods same here and you'll see

00:19:54,480 --> 00:19:56,160
that

00:19:54,799 --> 00:19:57,919
since i did this one earlier this one

00:19:56,160 --> 00:19:59,679
has already scaled down

00:19:57,919 --> 00:20:01,840
so there is there's no pod running here

00:19:59,679 --> 00:20:05,039
even though this is the primary

00:20:01,840 --> 00:20:05,039
so what i'm going to do now

00:20:05,200 --> 00:20:11,440
is i'm going to access my load gen

00:20:09,280 --> 00:20:13,600
service and i'm going to set a load of

00:20:11,440 --> 00:20:17,360
one so it's just a little curl command

00:20:13,600 --> 00:20:19,440
that sets the load and when i do that

00:20:17,360 --> 00:20:21,760
when i say load of one that means

00:20:19,440 --> 00:20:24,000
concurrency that means one

00:20:21,760 --> 00:20:25,679
request in flight at a time so sends a

00:20:24,000 --> 00:20:26,559
request response comes back it sends

00:20:25,679 --> 00:20:29,280
another one

00:20:26,559 --> 00:20:31,280
and so it's like a synchronous process

00:20:29,280 --> 00:20:32,960
running and doing repeated requests

00:20:31,280 --> 00:20:35,200
and if i look at the pods now in my

00:20:32,960 --> 00:20:36,080
primary i see i've got a pod running for

00:20:35,200 --> 00:20:40,320
greeting

00:20:36,080 --> 00:20:42,480
the zml8 so

00:20:40,320 --> 00:20:45,200
let's see i've got that running now i

00:20:42,480 --> 00:20:47,679
can look at the status

00:20:45,200 --> 00:20:49,840
from my load generated client and i'll

00:20:47,679 --> 00:20:52,720
see that of the last hundred items

00:20:49,840 --> 00:20:54,080
one hundred percent were served by zm

00:20:52,720 --> 00:20:56,320
ll-8

00:20:54,080 --> 00:20:57,760
so that means that even though my client

00:20:56,320 --> 00:20:59,600
here is here on remote

00:20:57,760 --> 00:21:01,360
it's accessing the service deployed on

00:20:59,600 --> 00:21:03,760
laptop

00:21:01,360 --> 00:21:04,960
and if i come back and get the pods here

00:21:03,760 --> 00:21:08,799
on aws i

00:21:04,960 --> 00:21:11,840
presumably that one will be gone um

00:21:08,799 --> 00:21:12,159
and it is so because it's not needed i

00:21:11,840 --> 00:21:15,520
set

00:21:12,159 --> 00:21:18,080
i set a cost of five a threshold of five

00:21:15,520 --> 00:21:19,840
so before it would fail over to aws so

00:21:18,080 --> 00:21:21,360
let's go have a look at the

00:21:19,840 --> 00:21:23,919
console again let me look at the

00:21:21,360 --> 00:21:27,440
deployments and you'll see

00:21:23,919 --> 00:21:30,000
that i've got

00:21:27,440 --> 00:21:31,360
a deployment and laptop that's serving a

00:21:30,000 --> 00:21:36,400
client

00:21:31,360 --> 00:21:36,400
in remote that's all good

00:21:36,720 --> 00:21:42,400
let's increase the load let's take it up

00:21:40,080 --> 00:21:45,520
to 10 concurrent

00:21:42,400 --> 00:21:46,799
clients making requests at the same time

00:21:45,520 --> 00:21:48,720
and when i do that i'm going to come

00:21:46,799 --> 00:21:51,600
over the threshold so i expect

00:21:48,720 --> 00:21:52,159
that in aws i'm going to see a pod spin

00:21:51,600 --> 00:21:55,200
up

00:21:52,159 --> 00:21:56,799
and there it is so i will now go back to

00:21:55,200 --> 00:21:59,919
my status view

00:21:56,799 --> 00:22:00,919
and i'm going to see that i am balancing

00:21:59,919 --> 00:22:04,960
my load between

00:22:00,919 --> 00:22:08,960
zml8 which is on

00:22:04,960 --> 00:22:11,360
my laptop and the new one which is h5fph

00:22:08,960 --> 00:22:12,799
and that is what's running here so i

00:22:11,360 --> 00:22:13,200
will see if there's a balance between

00:22:12,799 --> 00:22:16,559
these

00:22:13,200 --> 00:22:20,159
so of the last 100 requests 52

00:22:16,559 --> 00:22:23,679
were handled locally on my laptop and 48

00:22:20,159 --> 00:22:26,720
were handled out on aws

00:22:23,679 --> 00:22:29,039
so the balancing is not round robin

00:22:26,720 --> 00:22:30,080
it's based on the actual completion rate

00:22:29,039 --> 00:22:32,960
of the services so

00:22:30,080 --> 00:22:33,679
it balances dynamically to the services

00:22:32,960 --> 00:22:36,720
that are running

00:22:33,679 --> 00:22:39,360
fastest and now if i go back to my

00:22:36,720 --> 00:22:40,080
console again look at my deployments i

00:22:39,360 --> 00:22:42,960
will see

00:22:40,080 --> 00:22:44,480
that um they're being balanced between

00:22:42,960 --> 00:22:48,080
aws

00:22:44,480 --> 00:22:51,200
and laptop

00:22:48,080 --> 00:22:52,559
so the same this the client doesn't see

00:22:51,200 --> 00:22:54,000
a difference it doesn't know just it's

00:22:52,559 --> 00:22:55,600
just getting better service

00:22:54,000 --> 00:22:57,200
because it's being serviced by multiple

00:22:55,600 --> 00:22:59,840
instances

00:22:57,200 --> 00:23:03,039
so if i were to come come back here and

00:22:59,840 --> 00:23:06,400
reset my load back down to one

00:23:03,039 --> 00:23:06,799
i will see when i look at my status that

00:23:06,400 --> 00:23:09,840
i'm

00:23:06,799 --> 00:23:12,960
now coming off that route that aws

00:23:09,840 --> 00:23:13,919
and all my requests are now being

00:23:12,960 --> 00:23:15,919
handled

00:23:13,919 --> 00:23:17,600
again by the laptop which is my

00:23:15,919 --> 00:23:20,880
designated primary

00:23:17,600 --> 00:23:20,880
so this is now running

00:23:20,960 --> 00:23:24,880
at the lower load i no longer need the

00:23:23,120 --> 00:23:26,799
resources of the public cloud it's just

00:23:24,880 --> 00:23:29,600
using my resources here on

00:23:26,799 --> 00:23:31,760
on mini cube now i will look at the pods

00:23:29,600 --> 00:23:33,679
again in aws it'll still be here

00:23:31,760 --> 00:23:36,640
but in a minute it won't because k

00:23:33,679 --> 00:23:38,720
native will spin this back down to zero

00:23:36,640 --> 00:23:39,919
and if i look here again you'll see that

00:23:38,720 --> 00:23:43,600
the numbers

00:23:39,919 --> 00:23:45,279
are increasing on my laptop um

00:23:43,600 --> 00:23:47,760
but they're not increasing on aws

00:23:45,279 --> 00:23:51,840
because aws is no longer handling

00:23:47,760 --> 00:23:51,840
load because it is not needed

00:23:51,919 --> 00:23:56,240
and i'll take one more look over here to

00:23:54,480 --> 00:23:58,159
see if uh

00:23:56,240 --> 00:23:59,919
it's still running but it'll take a

00:23:58,159 --> 00:24:01,600
minute to go down

00:23:59,919 --> 00:24:03,039
and be terminated so what i'll mention

00:24:01,600 --> 00:24:06,240
right now

00:24:03,039 --> 00:24:07,520
is that if you go to scupper.io and uh

00:24:06,240 --> 00:24:09,600
look in the um

00:24:07,520 --> 00:24:11,520
the github repository associated with it

00:24:09,600 --> 00:24:14,400
there are examples in there

00:24:11,520 --> 00:24:15,840
and there is an example in there that is

00:24:14,400 --> 00:24:17,600
uh

00:24:15,840 --> 00:24:20,080
basically the demo i'm showing you here

00:24:17,600 --> 00:24:23,039
for kubecon na2020

00:24:20,080 --> 00:24:24,960
so it has all the ammo all the source

00:24:23,039 --> 00:24:27,760
code for everything that's being run

00:24:24,960 --> 00:24:29,679
in terms of my client and server and the

00:24:27,760 --> 00:24:32,080
instructions for doing all of

00:24:29,679 --> 00:24:33,120
this so if you wish to replicate this

00:24:32,080 --> 00:24:35,200
experiment

00:24:33,120 --> 00:24:36,240
and demonstration yourself everything

00:24:35,200 --> 00:24:38,880
you need is

00:24:36,240 --> 00:24:41,039
there and you can have a look at that so

00:24:38,880 --> 00:24:43,600
now that i've been talking long enough

00:24:41,039 --> 00:24:43,600
we will see

00:24:44,320 --> 00:24:50,400
on aws that k native has

00:24:48,559 --> 00:24:52,159
scaled me to zero and i'm no longer

00:24:50,400 --> 00:24:54,480
using those resources that are no longer

00:24:52,159 --> 00:24:57,840
needed

00:24:54,480 --> 00:24:58,799
okay with that i am going to end my

00:24:57,840 --> 00:25:00,400
presentation

00:24:58,799 --> 00:25:02,080
i'll provide you with some contact

00:25:00,400 --> 00:25:04,480
information

00:25:02,080 --> 00:25:05,440
here some information about the project

00:25:04,480 --> 00:25:09,279
and i will now

00:25:05,440 --> 00:25:12,840
open the open it up for

00:25:09,279 --> 00:25:15,840
questions and discussion thank you very

00:25:12,840 --> 00:25:15,840

YouTube URL: https://www.youtube.com/watch?v=YcE02jHHVCM


