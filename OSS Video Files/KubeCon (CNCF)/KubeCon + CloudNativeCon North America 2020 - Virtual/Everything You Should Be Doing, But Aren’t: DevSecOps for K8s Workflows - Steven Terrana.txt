Title: Everything You Should Be Doing, But Aren’t: DevSecOps for K8s Workflows - Steven Terrana
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Everything You Should Be Doing, But Aren’t: DevSecOps for K8s Workflows - Steven Terrana, Booz Allen Hamilton & Dan (POP) Papandrea, Sysdig 

Steven and Pop will describe a defense-in-depth approach to secure production workloads running on Kubernetes. We’ll show a live demonstration of using CNCF projects like Helm, OPA, Falco, and Argo to secure Kubernetes clusters. With a secure cluster, they will then show you how to leverage DevSecOps principles to incorporate security into every step of the software development lifecycle and how to scale your CI/CD pipelines using the open source Jenkins Template Engine. This talk is the result of lessons learned supporting multiple horizontals of end users, including FinTech and modern Federal software delivery. Specifically, attendees will walk away with actionable plans for how to implement: - Application Security - Configuration Management Policies - Runtime Threat Detection - Governance as Code - Post-mortem Forensics 

https://sched.co/ekFo
Captions: 
	00:00:19,600 --> 00:00:23,279
welcome to our kubecon talk

00:00:21,920 --> 00:00:25,039
everything you should be doing but

00:00:23,279 --> 00:00:27,920
aren't devsec ops for

00:00:25,039 --> 00:00:28,720
kubernetes quirkflows my name is dan

00:00:27,920 --> 00:00:30,800
papandrea

00:00:28,720 --> 00:00:33,120
i'm the field cto with systig as well as

00:00:30,800 --> 00:00:34,800
the host of the podcast

00:00:33,120 --> 00:00:36,719
hey everyone my name is steven turana

00:00:34,800 --> 00:00:38,640
i'm a chief engineer at booz allen

00:00:36,719 --> 00:00:40,000
hamilton

00:00:38,640 --> 00:00:41,200
so we're going to walk through some fun

00:00:40,000 --> 00:00:42,719
with you all and again this is

00:00:41,200 --> 00:00:43,120
everything you should be doing but

00:00:42,719 --> 00:00:46,079
aren't

00:00:43,120 --> 00:00:47,200
so take it away mr toronto there's

00:00:46,079 --> 00:00:49,600
there's a lot to do

00:00:47,200 --> 00:00:50,800
when it comes to securing your

00:00:49,600 --> 00:00:53,840
application development

00:00:50,800 --> 00:00:56,239
and actually implementing devsecops

00:00:53,840 --> 00:00:56,960
so this is our our entire talk in a

00:00:56,239 --> 00:00:59,120
slide

00:00:56,960 --> 00:01:00,239
right so the first thing is what is

00:00:59,120 --> 00:01:02,079
devsecops

00:01:00,239 --> 00:01:03,840
i've had the pleasure to to talk to

00:01:02,079 --> 00:01:06,000
hundreds of people about that question

00:01:03,840 --> 00:01:08,240
and it turns out no one actually agrees

00:01:06,000 --> 00:01:10,080
uh so here's a slide that tries to level

00:01:08,240 --> 00:01:12,960
set what exactly we mean

00:01:10,080 --> 00:01:14,880
when we when we say devsecops the

00:01:12,960 --> 00:01:17,280
shortest definition i can come up with

00:01:14,880 --> 00:01:19,200
is integrating security into every step

00:01:17,280 --> 00:01:21,119
of the software development lifecycle

00:01:19,200 --> 00:01:22,640
what does that actually mean right so

00:01:21,119 --> 00:01:23,200
you've got application dependency

00:01:22,640 --> 00:01:25,200
scanning

00:01:23,200 --> 00:01:27,520
static code analysis container image

00:01:25,200 --> 00:01:30,000
scanning continuous compliance

00:01:27,520 --> 00:01:31,920
dynamic application security testing

00:01:30,000 --> 00:01:33,439
accessibility assurance

00:01:31,920 --> 00:01:35,439
all of those things work together to

00:01:33,439 --> 00:01:36,799
build a trusted software supply chain

00:01:35,439 --> 00:01:39,360
i'm going to dive into more detail about

00:01:36,799 --> 00:01:41,840
what each of those things actually means

00:01:39,360 --> 00:01:42,960
the end of that is is a container image

00:01:41,840 --> 00:01:45,360
we're at kubecon

00:01:42,960 --> 00:01:46,640
that gets deployed onto a cluster then

00:01:45,360 --> 00:01:48,799
there's still more to do

00:01:46,640 --> 00:01:49,920
right you the all the security in the

00:01:48,799 --> 00:01:51,280
world is not going to help you

00:01:49,920 --> 00:01:53,280
if you're running your containers as the

00:01:51,280 --> 00:01:55,280
root user and privileged

00:01:53,280 --> 00:01:56,880
um and new cves come out every day so

00:01:55,280 --> 00:01:58,719
you need to do continuous

00:01:56,880 --> 00:02:01,200
runtime security and we're going to walk

00:01:58,719 --> 00:02:02,960
through how to actually accomplish that

00:02:01,200 --> 00:02:04,799
and one thing that you know to note here

00:02:02,960 --> 00:02:06,240
uh stephen is and for everybody out

00:02:04,799 --> 00:02:07,520
there if you're watching

00:02:06,240 --> 00:02:09,440
you don't get these things out of the

00:02:07,520 --> 00:02:12,160
box these are not something inherently

00:02:09,440 --> 00:02:13,680
you know possible with you know out of

00:02:12,160 --> 00:02:15,599
the box with kubernetes

00:02:13,680 --> 00:02:17,040
so big big thing out there for the 101

00:02:15,599 --> 00:02:19,280
out there who haven't deployed a

00:02:17,040 --> 00:02:22,080
kubernetes cluster

00:02:19,280 --> 00:02:23,440
yeah and that's a perfect segue into our

00:02:22,080 --> 00:02:26,560
next slide here

00:02:23,440 --> 00:02:27,520
which is i don't think we planned that

00:02:26,560 --> 00:02:30,319
stephen

00:02:27,520 --> 00:02:31,360
no we just have so much synergy that it

00:02:30,319 --> 00:02:34,080
pains me

00:02:31,360 --> 00:02:34,720
um so how to build a pipeline if you're

00:02:34,080 --> 00:02:36,480
like me

00:02:34,720 --> 00:02:38,560
you you learn through stack overflow in

00:02:36,480 --> 00:02:39,200
google and what you're going to learn on

00:02:38,560 --> 00:02:42,720
google

00:02:39,200 --> 00:02:44,239
is open your ide write like five lines

00:02:42,720 --> 00:02:46,800
of code from a tutorial

00:02:44,239 --> 00:02:48,800
that gets you to step two here which are

00:02:46,800 --> 00:02:50,319
automate how to run some unit tests in a

00:02:48,800 --> 00:02:53,440
pull request

00:02:50,319 --> 00:02:55,680
but what does reality look like right so

00:02:53,440 --> 00:02:56,720
when you're in an organization you need

00:02:55,680 --> 00:02:58,319
to implement

00:02:56,720 --> 00:03:00,000
these defense in-depth security and

00:02:58,319 --> 00:03:02,800
quality scans for

00:03:00,000 --> 00:03:04,560
every single team who are all running

00:03:02,800 --> 00:03:07,519
different types of applications

00:03:04,560 --> 00:03:07,840
across an entire organization so this is

00:03:07,519 --> 00:03:11,040
my

00:03:07,840 --> 00:03:13,840
my favorite meme i'll keep it pg-13 for

00:03:11,040 --> 00:03:15,760
for kubecon but look up the owl meme and

00:03:13,840 --> 00:03:18,480
you'll see some inspiration for this

00:03:15,760 --> 00:03:18,959
and the point here is that there's a

00:03:18,480 --> 00:03:21,519
huge

00:03:18,959 --> 00:03:23,040
gap between tutorials in the industry

00:03:21,519 --> 00:03:23,680
for how to get started with pipelines

00:03:23,040 --> 00:03:26,560
and

00:03:23,680 --> 00:03:27,920
the reality of what it takes to automate

00:03:26,560 --> 00:03:29,840
a devsecops

00:03:27,920 --> 00:03:31,840
software development lifecycle for more

00:03:29,840 --> 00:03:35,599
than a single team

00:03:31,840 --> 00:03:37,840
and why is that so hard right so

00:03:35,599 --> 00:03:38,879
the biggest challenge in my experience

00:03:37,840 --> 00:03:40,560
especially

00:03:38,879 --> 00:03:42,400
like most of us using kubernetes have

00:03:40,560 --> 00:03:45,519
also adopted microservices

00:03:42,400 --> 00:03:46,640
as a way to decouple our applications

00:03:45,519 --> 00:03:49,360
and allow

00:03:46,640 --> 00:03:50,640
autonomous teams to work in parallel the

00:03:49,360 --> 00:03:52,400
downside is that each of those

00:03:50,640 --> 00:03:54,319
microservices needs a pipeline

00:03:52,400 --> 00:03:56,319
right and every ci cd tool in the

00:03:54,319 --> 00:03:56,959
industry is focused on building a

00:03:56,319 --> 00:04:00,080
pipeline

00:03:56,959 --> 00:04:02,080
for a single application um and

00:04:00,080 --> 00:04:03,680
what we realized was that different

00:04:02,080 --> 00:04:04,239
types of applications use different

00:04:03,680 --> 00:04:07,760
tools

00:04:04,239 --> 00:04:11,040
but process really changes so usually

00:04:07,760 --> 00:04:13,040
you'll write your 700 line jenkins file

00:04:11,040 --> 00:04:15,120
that does all the different types of

00:04:13,040 --> 00:04:16,959
quality testing from unit testing to

00:04:15,120 --> 00:04:18,000
integration testing browser-based test

00:04:16,959 --> 00:04:19,440
automation

00:04:18,000 --> 00:04:21,199
pull a word out of the dictionary and

00:04:19,440 --> 00:04:22,560
put testing on the end of it

00:04:21,199 --> 00:04:24,880
then you throw in all your security

00:04:22,560 --> 00:04:26,560
scanning and you're like awesome i built

00:04:24,880 --> 00:04:28,320
a pipeline for one team

00:04:26,560 --> 00:04:30,479
it kind of sucks that there's you know

00:04:28,320 --> 00:04:31,440
75 other microservices that you need to

00:04:30,479 --> 00:04:33,040
do this for

00:04:31,440 --> 00:04:35,199
so what do you do you copy and paste

00:04:33,040 --> 00:04:38,080
your jenkins file across every single

00:04:35,199 --> 00:04:39,199
uh source code repository you tweak it

00:04:38,080 --> 00:04:41,120
right if you're running

00:04:39,199 --> 00:04:43,440
if it's a front-end app you're probably

00:04:41,120 --> 00:04:44,479
using npm or yarn or gulp to run your

00:04:43,440 --> 00:04:46,639
unit tests

00:04:44,479 --> 00:04:48,560
it's a java app you've got maven and

00:04:46,639 --> 00:04:50,479
gradle to go run your tests

00:04:48,560 --> 00:04:51,759
if it's a python application you've got

00:04:50,479 --> 00:04:53,919
pi test

00:04:51,759 --> 00:04:55,440
so even though when you drew your your

00:04:53,919 --> 00:04:56,320
awesome devsecops pipeline on the

00:04:55,440 --> 00:04:57,919
whiteboard

00:04:56,320 --> 00:05:00,240
you drew some circles that said things

00:04:57,919 --> 00:05:01,360
like unit test application dependency

00:05:00,240 --> 00:05:03,120
scan

00:05:01,360 --> 00:05:05,520
build a container image and deploy it

00:05:03,120 --> 00:05:07,520
out to an application environment

00:05:05,520 --> 00:05:09,440
it took you like three seconds to draw

00:05:07,520 --> 00:05:10,720
700 lines to write for one app

00:05:09,440 --> 00:05:12,160
and then you copied and pasted it a

00:05:10,720 --> 00:05:13,039
hundred times for each microservice and

00:05:12,160 --> 00:05:14,800
tweaked it

00:05:13,039 --> 00:05:17,199
uh depending on the types of tools that

00:05:14,800 --> 00:05:18,960
are being used right so the reason that

00:05:17,199 --> 00:05:20,320
this is awful besides the fact that

00:05:18,960 --> 00:05:21,360
we're copying and pasting things over

00:05:20,320 --> 00:05:23,280
and over again

00:05:21,360 --> 00:05:25,039
is time you need to go on board each

00:05:23,280 --> 00:05:27,199
individual application

00:05:25,039 --> 00:05:28,560
complexity you're you're tweaking the

00:05:27,199 --> 00:05:29,440
same thing you've copied and pasted over

00:05:28,560 --> 00:05:31,919
and over again

00:05:29,440 --> 00:05:33,440
to make it work for a specific app from

00:05:31,919 --> 00:05:35,120
a standardization process

00:05:33,440 --> 00:05:38,960
especially if you're in a highly

00:05:35,120 --> 00:05:42,080
regulated environment like fintech or

00:05:38,960 --> 00:05:43,840
or federal application development

00:05:42,080 --> 00:05:45,440
you've got a lot of auditability and

00:05:43,840 --> 00:05:46,880
compliance requirements

00:05:45,440 --> 00:05:48,320
how do you actually know that all of

00:05:46,880 --> 00:05:50,160
those teams are following the same

00:05:48,320 --> 00:05:51,919
software delivery process

00:05:50,160 --> 00:05:53,680
a little less academic way to say that

00:05:51,919 --> 00:05:55,120
is like i said you all have to go do

00:05:53,680 --> 00:05:56,800
container image scanning how do i

00:05:55,120 --> 00:05:58,880
actually know that you're doing that

00:05:56,800 --> 00:06:00,800
um and then sustainment no one gets the

00:05:58,880 --> 00:06:01,440
pipeline right on the first try i know i

00:06:00,800 --> 00:06:03,840
don't

00:06:01,440 --> 00:06:04,479
um so over time as you want to make

00:06:03,840 --> 00:06:06,080
updates

00:06:04,479 --> 00:06:08,479
to what this automated workflow looks

00:06:06,080 --> 00:06:10,960
like you've got to go make those changes

00:06:08,479 --> 00:06:12,479
across every single pipeline definition

00:06:10,960 --> 00:06:14,080
across every single branch of every

00:06:12,479 --> 00:06:15,759
single source code repository

00:06:14,080 --> 00:06:17,039
and it goes back to our title stephen it

00:06:15,759 --> 00:06:18,160
goes back to everything you should be

00:06:17,039 --> 00:06:20,000
doing but i think it's everything you

00:06:18,160 --> 00:06:22,160
should be doing but it's too damn hard

00:06:20,000 --> 00:06:23,919
right for you to be able to do all these

00:06:22,160 --> 00:06:25,680
things right whereas you know

00:06:23,919 --> 00:06:27,280
that's kind of the i guess the problem

00:06:25,680 --> 00:06:29,120
statement here

00:06:27,280 --> 00:06:31,919
it is and let's let's talk about a

00:06:29,120 --> 00:06:33,280
better way right so

00:06:31,919 --> 00:06:34,639
despite the fact that all these

00:06:33,280 --> 00:06:36,000
different teams are using different

00:06:34,639 --> 00:06:37,440
tools

00:06:36,000 --> 00:06:39,120
what we drew on the whiteboard didn't

00:06:37,440 --> 00:06:39,680
didn't care what type of application it

00:06:39,120 --> 00:06:41,520
was

00:06:39,680 --> 00:06:43,600
we were able to say in tool agnostic

00:06:41,520 --> 00:06:45,440
terms what does what's the business

00:06:43,600 --> 00:06:47,280
process to get code from a developer's

00:06:45,440 --> 00:06:48,560
laptop to production

00:06:47,280 --> 00:06:50,800
as quickly as possible without

00:06:48,560 --> 00:06:53,280
sacrificing code quality or security

00:06:50,800 --> 00:06:54,960
uh so we've spent the last couple of

00:06:53,280 --> 00:06:56,400
years working on an open source project

00:06:54,960 --> 00:06:58,000
called the jenkins templeton engine

00:06:56,400 --> 00:07:00,000
which is a plug-in for jenkins that

00:06:58,000 --> 00:07:01,840
we're going to demo in a second here

00:07:00,000 --> 00:07:03,199
and what it allows you to do is take

00:07:01,840 --> 00:07:04,800
that pipeline definition

00:07:03,199 --> 00:07:07,440
out of each individual source code

00:07:04,800 --> 00:07:09,759
repository define it in one place

00:07:07,440 --> 00:07:11,520
in tool agnostic terms and then plug and

00:07:09,759 --> 00:07:12,479
play with which specific tool are we

00:07:11,520 --> 00:07:14,800
going to use

00:07:12,479 --> 00:07:15,680
to implement the steps of that agnostic

00:07:14,800 --> 00:07:18,000
process

00:07:15,680 --> 00:07:19,840
so here's a pretty fancy gif that i made

00:07:18,000 --> 00:07:21,840
that sort of shows the process we've got

00:07:19,840 --> 00:07:23,840
test build scan deploy

00:07:21,840 --> 00:07:25,440
and that exact same scaffold could be

00:07:23,840 --> 00:07:27,440
used across every team

00:07:25,440 --> 00:07:29,120
but swap what tool is being used to

00:07:27,440 --> 00:07:32,319
implement those steps

00:07:29,120 --> 00:07:34,960
so if we take this over to to some code

00:07:32,319 --> 00:07:36,080
um and let's kind of give the grounding

00:07:34,960 --> 00:07:38,720
here stephen we

00:07:36,080 --> 00:07:40,479
we deployed a uh you know in gke we

00:07:38,720 --> 00:07:42,240
deployed a cluster you and i we put some

00:07:40,479 --> 00:07:45,599
more tools on them it pretty much it's

00:07:42,240 --> 00:07:48,400
just out of the box gke cluster right

00:07:45,599 --> 00:07:49,120
that's exactly right so here we've got

00:07:48,400 --> 00:07:51,039
jenkins

00:07:49,120 --> 00:07:52,400
uh using the upstream jenkins helm chart

00:07:51,039 --> 00:07:54,960
nothing fancy here

00:07:52,400 --> 00:07:55,440
um we installed the jenkins sampling

00:07:54,960 --> 00:07:58,800
engine

00:07:55,440 --> 00:08:02,080
we configured it to point to a template

00:07:58,800 --> 00:08:04,560
so let's actually kick off a build here

00:08:02,080 --> 00:08:05,440
refresh the page and all this is running

00:08:04,560 --> 00:08:08,240
um

00:08:05,440 --> 00:08:08,800
let's go take a look at what a pipeline

00:08:08,240 --> 00:08:10,879
template

00:08:08,800 --> 00:08:12,960
looks like in the janket sampling engine

00:08:10,879 --> 00:08:14,560
and how this actually gets implemented

00:08:12,960 --> 00:08:17,280
so i'll zoom in a bit this is probably

00:08:14,560 --> 00:08:17,280
pretty small right now

00:08:20,000 --> 00:08:24,400
there we go so if you're like me you've

00:08:22,879 --> 00:08:27,039
written a lot of jenkins files

00:08:24,400 --> 00:08:29,120
in your time uh and they usually balloon

00:08:27,039 --> 00:08:30,560
out into 700 line files where you're

00:08:29,120 --> 00:08:32,719
trying to represent

00:08:30,560 --> 00:08:34,240
the business logic of your pipeline

00:08:32,719 --> 00:08:35,760
right so when we when we draw pipelines

00:08:34,240 --> 00:08:37,839
on the whiteboard they're linear you say

00:08:35,760 --> 00:08:40,640
build test scan deploy

00:08:37,839 --> 00:08:41,440
in reality they are not linear they map

00:08:40,640 --> 00:08:43,599
to

00:08:41,440 --> 00:08:45,120
the branching strategy or the way

00:08:43,599 --> 00:08:45,680
developers are collaborating on a code

00:08:45,120 --> 00:08:48,800
base

00:08:45,680 --> 00:08:50,560
right so if you want to change what

00:08:48,800 --> 00:08:51,839
types of tests happen on a pull request

00:08:50,560 --> 00:08:53,440
to a development branch

00:08:51,839 --> 00:08:55,279
or you want to change which application

00:08:53,440 --> 00:08:56,959
environment you're deploying to

00:08:55,279 --> 00:08:58,320
when you merge a pull request all of

00:08:56,959 --> 00:09:00,880
that logic typically

00:08:58,320 --> 00:09:01,760
ends up in the same place where you're

00:09:00,880 --> 00:09:03,920
defining

00:09:01,760 --> 00:09:05,920
exactly how you're going to perform the

00:09:03,920 --> 00:09:09,839
different types of tests we talked about

00:09:05,920 --> 00:09:11,360
so that turns into a 700 line file

00:09:09,839 --> 00:09:13,360
the jenkins sampling engine sort of

00:09:11,360 --> 00:09:13,839
turns out on its head the key value here

00:09:13,360 --> 00:09:16,080
is that

00:09:13,839 --> 00:09:17,600
we've been able to separate the business

00:09:16,080 --> 00:09:18,720
logic of your pipeline so what should

00:09:17,600 --> 00:09:20,640
happen and when

00:09:18,720 --> 00:09:22,720
from the technical implementation of

00:09:20,640 --> 00:09:25,120
exactly what tool do i care about

00:09:22,720 --> 00:09:26,959
or is going to implement these steps for

00:09:25,120 --> 00:09:28,880
a particular microservice

00:09:26,959 --> 00:09:30,640
right so if we sort of walk through this

00:09:28,880 --> 00:09:33,120
7 17 line

00:09:30,640 --> 00:09:34,399
pipeline template in parallel we're

00:09:33,120 --> 00:09:36,240
going to run unit testing

00:09:34,399 --> 00:09:37,519
and static code analysis then we're

00:09:36,240 --> 00:09:38,640
going to run application dependency

00:09:37,519 --> 00:09:40,240
scanning

00:09:38,640 --> 00:09:42,399
then we're going to do a build and scan

00:09:40,240 --> 00:09:44,240
a container image we're going to deploy

00:09:42,399 --> 00:09:45,680
it to a production environment

00:09:44,240 --> 00:09:47,760
and then in parallel we're going to do

00:09:45,680 --> 00:09:49,040
penetration testing and accessibility

00:09:47,760 --> 00:09:50,560
compliance scanning

00:09:49,040 --> 00:09:52,160
so one of the most important things to

00:09:50,560 --> 00:09:54,080
realize about this template

00:09:52,160 --> 00:09:55,279
is those step names unit tests and

00:09:54,080 --> 00:09:57,920
static code analysis

00:09:55,279 --> 00:10:00,000
are generic on purpose it doesn't matter

00:09:57,920 --> 00:10:01,920
if unit test comes from a maven library

00:10:00,000 --> 00:10:03,040
or comes from a gradle library or an npm

00:10:01,920 --> 00:10:05,200
library

00:10:03,040 --> 00:10:07,120
application dependency scan can come

00:10:05,200 --> 00:10:09,040
from os dependency checker it can come

00:10:07,120 --> 00:10:11,920
from nexus firewall

00:10:09,040 --> 00:10:13,600
build can come from docker or image or

00:10:11,920 --> 00:10:15,120
any of the 17

00:10:13,600 --> 00:10:17,440
tools out there to build a container

00:10:15,120 --> 00:10:18,079
image these days scanning container

00:10:17,440 --> 00:10:20,079
image

00:10:18,079 --> 00:10:22,560
can come from twist lock or systig or

00:10:20,079 --> 00:10:25,200
anchor or claire

00:10:22,560 --> 00:10:27,440
so the point is that this single tool

00:10:25,200 --> 00:10:27,920
agnostic pipeline template can be reused

00:10:27,440 --> 00:10:30,079
for

00:10:27,920 --> 00:10:32,720
every single microservice or even every

00:10:30,079 --> 00:10:34,320
single application in your organization

00:10:32,720 --> 00:10:36,079
but still be flexible enough to choose

00:10:34,320 --> 00:10:39,120
the right tools for the job

00:10:36,079 --> 00:10:39,839
based upon what type of application you

00:10:39,120 --> 00:10:42,000
are

00:10:39,839 --> 00:10:43,600
so alongside these pipeline templates

00:10:42,000 --> 00:10:46,480
you can define hierarchical

00:10:43,600 --> 00:10:48,320
pipeline configuration files so here's

00:10:46,480 --> 00:10:49,519
what a pipeline configuration file looks

00:10:48,320 --> 00:10:51,600
like

00:10:49,519 --> 00:10:53,360
here's where we're going to define you

00:10:51,600 --> 00:10:54,800
know what tools are being used in that

00:10:53,360 --> 00:10:57,440
template for a given

00:10:54,800 --> 00:10:59,920
application so at the top we've got

00:10:57,440 --> 00:11:01,200
allow scm jenkins file equals false

00:10:59,920 --> 00:11:01,920
that's where i as a pipeline

00:11:01,200 --> 00:11:03,519
administrator

00:11:01,920 --> 00:11:05,680
can say you're not allowed to bring your

00:11:03,519 --> 00:11:07,040
own pipeline we have strict rules around

00:11:05,680 --> 00:11:09,600
what this workflow should be

00:11:07,040 --> 00:11:12,160
and you're going to inherit it the

00:11:09,600 --> 00:11:13,760
libraries block is where you specify

00:11:12,160 --> 00:11:16,640
modular pipeline libraries that

00:11:13,760 --> 00:11:20,240
implement those steps in the template

00:11:16,640 --> 00:11:22,640
so for example pi test here on line 14

00:11:20,240 --> 00:11:23,839
is what's going to contribute the unit

00:11:22,640 --> 00:11:26,320
test step

00:11:23,839 --> 00:11:27,680
that could be maven it could be gradle

00:11:26,320 --> 00:11:28,000
the whole point is that you're able to

00:11:27,680 --> 00:11:29,519
plug

00:11:28,000 --> 00:11:31,040
and play with these different library

00:11:29,519 --> 00:11:33,040
implementations

00:11:31,040 --> 00:11:34,959
these libraries can take configuration

00:11:33,040 --> 00:11:37,279
options right so

00:11:34,959 --> 00:11:38,000
as a devops engineer there's no reason

00:11:37,279 --> 00:11:39,839
that

00:11:38,000 --> 00:11:41,200
every single devops engineer that needs

00:11:39,839 --> 00:11:43,600
to write a pipeline should have to

00:11:41,200 --> 00:11:45,360
google sonarq plus jenkins and find the

00:11:43,600 --> 00:11:48,880
15 lines of code it takes

00:11:45,360 --> 00:11:51,120
to implement static code analysis from a

00:11:48,880 --> 00:11:52,959
jenkins pipeline right so by

00:11:51,120 --> 00:11:55,040
modularizing our pipelines

00:11:52,959 --> 00:11:56,959
into these pipeline libraries and

00:11:55,040 --> 00:11:58,639
externalizing configuration through

00:11:56,959 --> 00:12:00,639
these library parameters

00:11:58,639 --> 00:12:02,079
we can now configure our pipelines

00:12:00,639 --> 00:12:04,639
instead of building them from scratch

00:12:02,079 --> 00:12:08,160
for each new application

00:12:04,639 --> 00:12:10,320
so if we head back to jenkins

00:12:08,160 --> 00:12:11,600
we'll see if our our pipeline is done

00:12:10,320 --> 00:12:13,519
yet

00:12:11,600 --> 00:12:14,800
so it's still running but we've got some

00:12:13,519 --> 00:12:15,839
examples that are done so let's talk

00:12:14,800 --> 00:12:17,680
about each of these steps

00:12:15,839 --> 00:12:19,279
really quickly and why they're important

00:12:17,680 --> 00:12:20,959
um unit testing

00:12:19,279 --> 00:12:22,320
at this point i hope that one's pretty

00:12:20,959 --> 00:12:24,800
clear we need to make sure that our code

00:12:22,320 --> 00:12:27,600
actually works at the unit level

00:12:24,800 --> 00:12:29,600
from a security standpoint application

00:12:27,600 --> 00:12:32,720
dependency scanning

00:12:29,600 --> 00:12:34,720
we need to make sure that the

00:12:32,720 --> 00:12:36,079
materials we're bringing into our

00:12:34,720 --> 00:12:38,480
application

00:12:36,079 --> 00:12:40,000
all those third-party dependencies don't

00:12:38,480 --> 00:12:42,399
have known vulnerabilities

00:12:40,000 --> 00:12:43,920
right so uh there was a there have been

00:12:42,399 --> 00:12:46,160
some pretty significant

00:12:43,920 --> 00:12:47,920
data breaches in the last couple years i

00:12:46,160 --> 00:12:50,079
won't name anyone by name

00:12:47,920 --> 00:12:52,000
um but a lot of times if you go look at

00:12:50,079 --> 00:12:54,160
what exactly caused this

00:12:52,000 --> 00:12:55,839
it would be a insecure application

00:12:54,160 --> 00:12:57,279
dependency

00:12:55,839 --> 00:12:58,880
and there was no application dependency

00:12:57,279 --> 00:13:01,760
scanning being done

00:12:58,880 --> 00:13:03,040
right so the next step there is static

00:13:01,760 --> 00:13:05,680
code analysis

00:13:03,040 --> 00:13:06,079
so application dependency scanning if we

00:13:05,680 --> 00:13:07,920
go back

00:13:06,079 --> 00:13:09,600
and look at the slides that we had to

00:13:07,920 --> 00:13:11,360
talk about the big picture

00:13:09,600 --> 00:13:12,880
tasks that we're doing static code

00:13:11,360 --> 00:13:14,959
analysis is cool

00:13:12,880 --> 00:13:16,720
my raw materials my dependencies are

00:13:14,959 --> 00:13:18,720
secure let's make sure my code

00:13:16,720 --> 00:13:20,800
itself is secure and sonarcube is a

00:13:18,720 --> 00:13:22,480
great tool to be able to do that

00:13:20,800 --> 00:13:24,560
with containerization comes a new

00:13:22,480 --> 00:13:26,000
artifact in the container image

00:13:24,560 --> 00:13:28,079
so there are a lot of tools out there

00:13:26,000 --> 00:13:29,680
today that can scan those container

00:13:28,079 --> 00:13:32,240
images to make sure they aren't bringing

00:13:29,680 --> 00:13:33,920
vulnerabilities into the ecosystem

00:13:32,240 --> 00:13:35,680
pulling an image from docker hub is the

00:13:33,920 --> 00:13:36,320
same thing as going to finding a sketchy

00:13:35,680 --> 00:13:37,760
van

00:13:36,320 --> 00:13:38,800
in like a walmart parking lot and

00:13:37,760 --> 00:13:39,600
putting that in your production

00:13:38,800 --> 00:13:40,800
environment

00:13:39,600 --> 00:13:42,480
so you need to make sure that those

00:13:40,800 --> 00:13:43,600
environments are secure and that they're

00:13:42,480 --> 00:13:45,600
as small as possible

00:13:43,600 --> 00:13:46,880
and only have what you need to run your

00:13:45,600 --> 00:13:48,959
application

00:13:46,880 --> 00:13:50,480
continuous compliance right so

00:13:48,959 --> 00:13:51,199
everything up until now has been the app

00:13:50,480 --> 00:13:52,720
layer

00:13:51,199 --> 00:13:54,399
but we're running this app on

00:13:52,720 --> 00:13:55,360
infrastructure we need to make sure that

00:13:54,399 --> 00:13:58,399
those

00:13:55,360 --> 00:14:00,959
underlying servers are compliant

00:13:58,399 --> 00:14:01,519
and there's a ton of you know profiles

00:14:00,959 --> 00:14:03,600
out there

00:14:01,519 --> 00:14:05,199
that that have best practices baked into

00:14:03,600 --> 00:14:06,399
them for how to configure your

00:14:05,199 --> 00:14:08,000
infrastructure

00:14:06,399 --> 00:14:09,600
a lot of the tools that do container

00:14:08,000 --> 00:14:11,440
image scanning can also do

00:14:09,600 --> 00:14:13,680
continuous compliance to make sure those

00:14:11,440 --> 00:14:15,760
hosts are secured

00:14:13,680 --> 00:14:17,120
dynamic application security testing

00:14:15,760 --> 00:14:17,839
it's a really long way to say pen

00:14:17,120 --> 00:14:19,279
testing

00:14:17,839 --> 00:14:21,120
right so that's actually attacking a

00:14:19,279 --> 00:14:23,920
deployed application and seeing if it's

00:14:21,120 --> 00:14:26,000
susceptible to common exploitations

00:14:23,920 --> 00:14:27,279
and then accessibility assurance so we

00:14:26,000 --> 00:14:28,480
need to make sure that the applications

00:14:27,279 --> 00:14:29,920
we're building are accessible to

00:14:28,480 --> 00:14:32,000
everybody

00:14:29,920 --> 00:14:34,160
obvious examples of that are we included

00:14:32,000 --> 00:14:35,279
in an image but never included in alt

00:14:34,160 --> 00:14:36,480
text

00:14:35,279 --> 00:14:38,639
so there's no tool out there that can

00:14:36,480 --> 00:14:39,760
tell you with 100 certainty that your

00:14:38,639 --> 00:14:41,120
site is accessible

00:14:39,760 --> 00:14:43,120
but it can definitely tell you if it's

00:14:41,120 --> 00:14:45,519
not so what this does is give developers

00:14:43,120 --> 00:14:48,079
fast feedback to be able to fix

00:14:45,519 --> 00:14:49,839
the obvious issues with accessibility so

00:14:48,079 --> 00:14:51,120
that manual testing can focus on the

00:14:49,839 --> 00:14:54,320
more complex areas

00:14:51,120 --> 00:14:54,880
of accessibility and compliance so if we

00:14:54,320 --> 00:14:57,199
go

00:14:54,880 --> 00:14:58,240
back to jenkins each of the steps of the

00:14:57,199 --> 00:15:01,440
pipeline that

00:14:58,240 --> 00:15:04,399
were generating results um

00:15:01,440 --> 00:15:06,320
were archiving those artifacts right so

00:15:04,399 --> 00:15:07,920
we'll get reports from owasp and we'll

00:15:06,320 --> 00:15:10,959
get reports from

00:15:07,920 --> 00:15:12,560
google lighthouse and owasp zap which

00:15:10,959 --> 00:15:14,240
are doing pen testing and accessibility

00:15:12,560 --> 00:15:16,079
compliance testing

00:15:14,240 --> 00:15:17,760
and this gives us an audit trail right

00:15:16,079 --> 00:15:21,519
so every time we make a change

00:15:17,760 --> 00:15:23,680
we can then go see if uh what the

00:15:21,519 --> 00:15:25,360
sorry what the resulting scans were for

00:15:23,680 --> 00:15:26,720
that so if i've got organizational

00:15:25,360 --> 00:15:27,600
thresholds around code quality or

00:15:26,720 --> 00:15:30,160
security

00:15:27,600 --> 00:15:31,199
i now have the artifacts that prove my

00:15:30,160 --> 00:15:32,800
change has met

00:15:31,199 --> 00:15:34,160
those requirements so that i can get

00:15:32,800 --> 00:15:36,240
approval to deploy to production as

00:15:34,160 --> 00:15:39,120
quickly as possible

00:15:36,240 --> 00:15:40,959
so at the end of the day new cves come

00:15:39,120 --> 00:15:42,560
out every day even if you did

00:15:40,959 --> 00:15:45,040
all of these great kinds of security

00:15:42,560 --> 00:15:46,000
testing you still need to make sure that

00:15:45,040 --> 00:15:47,839
you're monitoring

00:15:46,000 --> 00:15:49,120
your production environment and there's

00:15:47,839 --> 00:15:49,920
some really great tools that can help

00:15:49,120 --> 00:15:51,759
with that and i

00:15:49,920 --> 00:15:53,360
pop is going to to walk through how we

00:15:51,759 --> 00:15:54,720
can make sure our clusters are secure at

00:15:53,360 --> 00:15:56,560
runtime

00:15:54,720 --> 00:15:58,160
and so you know the term i would say is

00:15:56,560 --> 00:15:59,680
more runtime security than monitoring

00:15:58,160 --> 00:16:01,360
obviously we have the modern capability

00:15:59,680 --> 00:16:03,199
with with systig but if we're talking

00:16:01,360 --> 00:16:05,600
you know full runtime capability

00:16:03,199 --> 00:16:06,639
the idea that we would do here is steve

00:16:05,600 --> 00:16:08,320
if you could stop the share

00:16:06,639 --> 00:16:09,839
so steven mentioned runtime security

00:16:08,320 --> 00:16:10,720
being important and that's where falco

00:16:09,839 --> 00:16:12,880
comes into play

00:16:10,720 --> 00:16:13,839
and so falco is an incubated cncf

00:16:12,880 --> 00:16:16,959
project hey

00:16:13,839 --> 00:16:19,199
we're at kubecon right it's a cncf uh uh

00:16:16,959 --> 00:16:20,880
you know event right and so the way that

00:16:19,199 --> 00:16:23,279
falco works

00:16:20,880 --> 00:16:25,199
is there's your app right which sits on

00:16:23,279 --> 00:16:27,120
kubernetes in this case we have a g

00:16:25,199 --> 00:16:28,959
jk cluster and then you have your

00:16:27,120 --> 00:16:30,160
runtime and so what's happening is we

00:16:28,959 --> 00:16:32,320
have this ebpf

00:16:30,160 --> 00:16:33,680
function or linux driver that's tapping

00:16:32,320 --> 00:16:35,600
into like capsis p

00:16:33,680 --> 00:16:36,880
trace to be able to then evaluate at a

00:16:35,600 --> 00:16:38,399
runtime assertion

00:16:36,880 --> 00:16:39,920
you have a set of security rules and

00:16:38,399 --> 00:16:42,000
these can be said as yaml

00:16:39,920 --> 00:16:43,920
we give you a bunch of them out of the

00:16:42,000 --> 00:16:45,519
box if you'd like to contribute more

00:16:43,920 --> 00:16:45,759
security rules they're pretty easy it's

00:16:45,519 --> 00:16:47,920
a

00:16:45,759 --> 00:16:49,440
you know easy syntax for you to do so

00:16:47,920 --> 00:16:50,000
and then you can then take this and send

00:16:49,440 --> 00:16:51,199
these alerts

00:16:50,000 --> 00:16:53,360
out now right now we're probably going

00:16:51,199 --> 00:16:54,959
to do it to standard out but you can do

00:16:53,360 --> 00:16:57,759
it out the grpc

00:16:54,959 --> 00:16:58,639
client go client rust prometheus another

00:16:57,759 --> 00:17:00,720
project that we've

00:16:58,639 --> 00:17:02,079
integrated i'll show an example of is a

00:17:00,720 --> 00:17:03,759
falco sidekick

00:17:02,079 --> 00:17:05,199
shout out to the team for that and so

00:17:03,759 --> 00:17:06,959
you have all of these pieces that you

00:17:05,199 --> 00:17:09,679
can kind of tie these things together

00:17:06,959 --> 00:17:11,199
again get your runtime assertation um

00:17:09,679 --> 00:17:13,120
you can also tap into cube audit

00:17:11,199 --> 00:17:14,720
so like anybody like being able to like

00:17:13,120 --> 00:17:16,240
you know creating a namespace or those

00:17:14,720 --> 00:17:17,600
things could be satisfactory rules that

00:17:16,240 --> 00:17:20,000
you get output to

00:17:17,600 --> 00:17:21,679
and then you can you know uh use this

00:17:20,000 --> 00:17:22,240
kind of notification system if you need

00:17:21,679 --> 00:17:23,520
to

00:17:22,240 --> 00:17:25,039
all right i'm gonna be honest right when

00:17:23,520 --> 00:17:26,160
i heard about falco i was like that's

00:17:25,039 --> 00:17:28,480
awesome but

00:17:26,160 --> 00:17:29,919
i don't know what capsis p trace is but

00:17:28,480 --> 00:17:32,000
the way falco has

00:17:29,919 --> 00:17:33,679
created these abstractions with yaml

00:17:32,000 --> 00:17:36,240
files to create rules

00:17:33,679 --> 00:17:38,640
makes it accessible to anybody like even

00:17:36,240 --> 00:17:40,559
i can write these ammo rules for falco

00:17:38,640 --> 00:17:41,679
and securityhub makes it even better so

00:17:40,559 --> 00:17:42,400
i don't have to write these rules from

00:17:41,679 --> 00:17:44,640
scratch

00:17:42,400 --> 00:17:46,400
i can go to you know community source

00:17:44,640 --> 00:17:48,559
rules to get best practices right out of

00:17:46,400 --> 00:17:50,559
the box

00:17:48,559 --> 00:17:52,080
stephen it's like we've done this before

00:17:50,559 --> 00:17:55,840
it's amazing

00:17:52,080 --> 00:17:55,840
what's your name again uh

00:17:55,919 --> 00:17:58,880
all right so i'm gonna share my screen

00:17:57,120 --> 00:18:00,320
again just let me clear my terminals

00:17:58,880 --> 00:18:01,360
yellow

00:18:00,320 --> 00:18:03,360
all right let's go ahead and do some

00:18:01,360 --> 00:18:04,080
attacking here all right so here's what

00:18:03,360 --> 00:18:07,360
i'm doing i'm

00:18:04,080 --> 00:18:08,640
i've i've tailed my the the same server

00:18:07,360 --> 00:18:11,039
that is sitting where i've

00:18:08,640 --> 00:18:12,799
attached this um this xiaomi file that

00:18:11,039 --> 00:18:14,240
or this html file that i'm going to copy

00:18:12,799 --> 00:18:16,799
into the directory right so let's go

00:18:14,240 --> 00:18:16,799
ahead and do that

00:18:17,360 --> 00:18:21,679
and we're seeing there's an attachment

00:18:19,600 --> 00:18:24,240
to it

00:18:21,679 --> 00:18:25,200
alrighty now i've copied this in here

00:18:24,240 --> 00:18:27,520
and you see there's an

00:18:25,200 --> 00:18:28,720
executive pod there now again it's one

00:18:27,520 --> 00:18:29,760
of the static rules i'm going to do a

00:18:28,720 --> 00:18:33,200
refresh

00:18:29,760 --> 00:18:37,520
and guess what oh i just wtf bombed mr

00:18:33,200 --> 00:18:39,360
tarana's precious pod took him out

00:18:37,520 --> 00:18:40,799
so with that being said we just got

00:18:39,360 --> 00:18:42,960
attacked and

00:18:40,799 --> 00:18:44,799
we also might have got we used the power

00:18:42,960 --> 00:18:46,240
of slack to be able to er the power of

00:18:44,799 --> 00:18:47,280
the sidekick to be able to send that

00:18:46,240 --> 00:18:48,720
output out to here

00:18:47,280 --> 00:18:49,919
and i'm saying oh my god stephen we got

00:18:48,720 --> 00:18:50,559
hacked now we got to figure out what

00:18:49,919 --> 00:18:53,039
happened

00:18:50,559 --> 00:18:54,880
so again we've used the falco tool to do

00:18:53,039 --> 00:18:58,080
that runtime detection

00:18:54,880 --> 00:18:58,799
and then we have the um the capability

00:18:58,080 --> 00:19:00,160
to send those

00:18:58,799 --> 00:19:01,919
those rule the you know the rule

00:19:00,160 --> 00:19:02,320
ascension that the rule sets that are

00:19:01,919 --> 00:19:03,760
there

00:19:02,320 --> 00:19:05,760
then we have the ability to send the

00:19:03,760 --> 00:19:07,200
standard out or out the grpc

00:19:05,760 --> 00:19:10,160
or out to the the other things that i

00:19:07,200 --> 00:19:11,360
showed as part of the the slide there so

00:19:10,160 --> 00:19:13,039
that's pretty much

00:19:11,360 --> 00:19:14,400
again in a nutshell all the things you

00:19:13,039 --> 00:19:15,919
all the goodness that you can do for a

00:19:14,400 --> 00:19:17,520
runtime security perspective

00:19:15,919 --> 00:19:19,440
let me pass it over to my friend mr

00:19:17,520 --> 00:19:21,679
steven thanks bob

00:19:19,440 --> 00:19:23,600
my i'm still recovering from my feelings

00:19:21,679 --> 00:19:26,320
being hurt uh but we've got

00:19:23,600 --> 00:19:28,480
one more quick demo wtf bomb stephen how

00:19:26,320 --> 00:19:30,240
are you going to recover from that

00:19:28,480 --> 00:19:32,080
all right so you guys are really getting

00:19:30,240 --> 00:19:33,600
your bang for your buck this session i

00:19:32,080 --> 00:19:36,000
got one more demo for you

00:19:33,600 --> 00:19:38,080
so we talked about application security

00:19:36,000 --> 00:19:38,880
and building a tool agnostic devsecops

00:19:38,080 --> 00:19:40,799
pipeline

00:19:38,880 --> 00:19:42,080
that you can share across teams we

00:19:40,799 --> 00:19:43,520
talked about you know it's

00:19:42,080 --> 00:19:45,760
that's still not good enough you need to

00:19:43,520 --> 00:19:47,919
do runtime security with falco

00:19:45,760 --> 00:19:49,200
and even that is not good enough right

00:19:47,919 --> 00:19:50,559
all the best security in the world is

00:19:49,200 --> 00:19:51,679
not going to help you

00:19:50,559 --> 00:19:53,440
if you still have insecure

00:19:51,679 --> 00:19:54,880
configurations so the last thing we

00:19:53,440 --> 00:19:56,720
wanted to show you today was

00:19:54,880 --> 00:19:59,039
uh using open policy agent and

00:19:56,720 --> 00:20:01,120
gatekeeper to be able to bring some

00:19:59,039 --> 00:20:02,960
governance to your kubernetes manifest

00:20:01,120 --> 00:20:05,360
to be able to control

00:20:02,960 --> 00:20:06,080
exactly what types of things can be

00:20:05,360 --> 00:20:08,320
created

00:20:06,080 --> 00:20:09,600
right so kubernetes are back can only go

00:20:08,320 --> 00:20:11,280
so far i can say

00:20:09,600 --> 00:20:13,200
this user is allowed to create a

00:20:11,280 --> 00:20:15,440
deployment um or allowed to create a

00:20:13,200 --> 00:20:17,440
namespace but i can't get so granular

00:20:15,440 --> 00:20:18,640
through your regular old kubernetes are

00:20:17,440 --> 00:20:20,880
back to say

00:20:18,640 --> 00:20:22,559
this user can create a name space but it

00:20:20,880 --> 00:20:25,280
must have these labels

00:20:22,559 --> 00:20:27,120
right so to get super granular uh open

00:20:25,280 --> 00:20:30,480
policy agent allows you to define

00:20:27,120 --> 00:20:33,280
policies as code that

00:20:30,480 --> 00:20:35,039
get down to the specific field level of

00:20:33,280 --> 00:20:36,799
a kubernetes manifest

00:20:35,039 --> 00:20:38,559
so if we take a look at some examples

00:20:36,799 --> 00:20:39,919
here with gatekeeper you create what are

00:20:38,559 --> 00:20:42,960
called constraint templates

00:20:39,919 --> 00:20:44,400
and constraints so if i take a look at

00:20:42,960 --> 00:20:46,559
this

00:20:44,400 --> 00:20:49,679
this constraint template that we've got

00:20:46,559 --> 00:20:51,760
here i'm able to create generic

00:20:49,679 --> 00:20:54,159
regal policies called constraint

00:20:51,760 --> 00:20:56,080
templates that define a new

00:20:54,159 --> 00:20:58,559
custom resource definition in this case

00:20:56,080 --> 00:21:00,640
it's called kate's required labels

00:20:58,559 --> 00:21:02,880
and down there at the bottom in the in

00:21:00,640 --> 00:21:05,919
the keys and values for the rego

00:21:02,880 --> 00:21:09,520
we have a policy that says

00:21:05,919 --> 00:21:10,960
uh every single object that conforms to

00:21:09,520 --> 00:21:13,440
this constraint template

00:21:10,960 --> 00:21:14,799
must have a corresponding label but

00:21:13,440 --> 00:21:15,520
through the constraint template it's

00:21:14,799 --> 00:21:16,559
generic

00:21:15,520 --> 00:21:18,559
right so we're going to be able to

00:21:16,559 --> 00:21:20,240
create multiple constraints from this

00:21:18,559 --> 00:21:21,679
single constraint template to lock down

00:21:20,240 --> 00:21:23,760
our cluster even further

00:21:21,679 --> 00:21:25,280
so one particular example of that is if

00:21:23,760 --> 00:21:27,760
we wanted to say that

00:21:25,280 --> 00:21:29,280
every single namespace must have a

00:21:27,760 --> 00:21:32,320
gatekeeper label on it

00:21:29,280 --> 00:21:33,679
i can create a specific constraint from

00:21:32,320 --> 00:21:35,520
that constraint template

00:21:33,679 --> 00:21:37,840
and you'll notice that the kind of

00:21:35,520 --> 00:21:39,600
object being created corresponds to the

00:21:37,840 --> 00:21:42,320
the dynamically created

00:21:39,600 --> 00:21:43,440
crd from the constraint template and

00:21:42,320 --> 00:21:46,159
we're going to say here that

00:21:43,440 --> 00:21:47,039
every single namespace under the match

00:21:46,159 --> 00:21:49,360
kinds

00:21:47,039 --> 00:21:51,200
kinds where it says namespace every

00:21:49,360 --> 00:21:53,679
namespace must have a label

00:21:51,200 --> 00:21:55,200
gatekeeper so right now i have a

00:21:53,679 --> 00:21:58,799
namespace file

00:21:55,200 --> 00:22:00,720
um no labels on it right so this

00:21:58,799 --> 00:22:02,480
would not be allowed through opa and

00:22:00,720 --> 00:22:06,320
through gatekeeper so if i say

00:22:02,480 --> 00:22:08,159
uh cube apply hyphen f

00:22:06,320 --> 00:22:10,640
uh namespace i'm gonna get an error

00:22:08,159 --> 00:22:12,640
message that tells me

00:22:10,640 --> 00:22:14,640
this request has been denied you must

00:22:12,640 --> 00:22:16,720
provide the labels for gatekeeper

00:22:14,640 --> 00:22:18,400
all right so i can go edit this

00:22:16,720 --> 00:22:21,200
namespace file

00:22:18,400 --> 00:22:22,159
make it conformant to the policy that we

00:22:21,200 --> 00:22:24,799
just created

00:22:22,159 --> 00:22:26,080
so i can create labels i can make sure

00:22:24,799 --> 00:22:29,120
that i have the gatekeeper

00:22:26,080 --> 00:22:30,880
label that is required i can get out of

00:22:29,120 --> 00:22:32,640
here and i can try again

00:22:30,880 --> 00:22:34,400
and now that the namespace is conformant

00:22:32,640 --> 00:22:36,799
to organizational policies

00:22:34,400 --> 00:22:40,000
i was able to successfully go and create

00:22:36,799 --> 00:22:42,559
that namespace um

00:22:40,000 --> 00:22:44,000
so when does this come into play common

00:22:42,559 --> 00:22:46,480
use cases for

00:22:44,000 --> 00:22:47,280
opa would be things like every

00:22:46,480 --> 00:22:49,600
deployment

00:22:47,280 --> 00:22:51,280
must have resource requests and limits i

00:22:49,600 --> 00:22:52,720
get a lot of calls of hey my cluster's

00:22:51,280 --> 00:22:54,240
broken come help me fix it

00:22:52,720 --> 00:22:56,159
and most of the time it's because people

00:22:54,240 --> 00:22:58,400
never put resource requests or

00:22:56,159 --> 00:22:59,760
constraints on their containers so the

00:22:58,400 --> 00:23:00,960
scheduler blows up

00:22:59,760 --> 00:23:03,919
you'll have things like privileged

00:23:00,960 --> 00:23:05,200
containers and pod security policies

00:23:03,919 --> 00:23:06,960
right so there's all these best

00:23:05,200 --> 00:23:08,799
practices that we've

00:23:06,960 --> 00:23:10,640
learned along the way as we've bricked

00:23:08,799 --> 00:23:12,000
our clusters that we want to be able to

00:23:10,640 --> 00:23:14,960
put guard rails

00:23:12,000 --> 00:23:16,960
on future clusters to help people deploy

00:23:14,960 --> 00:23:18,960
resources that are going to be reliable

00:23:16,960 --> 00:23:21,679
an open policy agent gives us a way to

00:23:18,960 --> 00:23:22,000
codify those best practices and security

00:23:21,679 --> 00:23:23,760
uh

00:23:22,000 --> 00:23:25,200
policies and then enforce them

00:23:23,760 --> 00:23:26,640
throughout the cluster at a super

00:23:25,200 --> 00:23:29,280
granular level

00:23:26,640 --> 00:23:30,080
um so in this talk today we learned

00:23:29,280 --> 00:23:31,360
about

00:23:30,080 --> 00:23:32,799
all the different kinds of security

00:23:31,360 --> 00:23:33,600
testing steven hold on i want to show

00:23:32,799 --> 00:23:34,559
one more thing

00:23:33,600 --> 00:23:36,400
i'm going to interrupt you i'm going to

00:23:34,559 --> 00:23:37,600
hack your talk is that okay can i show

00:23:36,400 --> 00:23:40,000
one more thing

00:23:37,600 --> 00:23:41,200
go for it i want to show you this so

00:23:40,000 --> 00:23:42,320
notice when stephen

00:23:41,200 --> 00:23:44,159
i'm going to show you this notice when

00:23:42,320 --> 00:23:44,799
stephen did his his creation of this

00:23:44,159 --> 00:23:47,039
testing

00:23:44,799 --> 00:23:48,400
namespaces another beautiful thing

00:23:47,039 --> 00:23:50,159
remember i told you about the kubernetes

00:23:48,400 --> 00:23:51,600
audit we were able to basically

00:23:50,159 --> 00:23:52,960
look at this and see that you're not

00:23:51,600 --> 00:23:54,320
allowed to be listeners to be able to be

00:23:52,960 --> 00:23:56,480
creating name spaces

00:23:54,320 --> 00:23:57,919
so this is an example where we're using

00:23:56,480 --> 00:24:00,080
opa and falco

00:23:57,919 --> 00:24:01,840
together to be able to understand what's

00:24:00,080 --> 00:24:05,200
going in our environment

00:24:01,840 --> 00:24:06,880
and we're able to um use you know

00:24:05,200 --> 00:24:08,240
use the power of opa for instance to be

00:24:06,880 --> 00:24:08,960
able to have the rule sets they were

00:24:08,240 --> 00:24:10,480
able to do

00:24:08,960 --> 00:24:11,679
you know for the for the creation

00:24:10,480 --> 00:24:12,799
creation of that that name switch you

00:24:11,679 --> 00:24:15,679
were able to create so i mean

00:24:12,799 --> 00:24:16,320
pretty cool stuff uh so we we covered a

00:24:15,679 --> 00:24:18,640
lot today

00:24:16,320 --> 00:24:19,360
in a half hour everything that we talked

00:24:18,640 --> 00:24:21,520
about was

00:24:19,360 --> 00:24:22,799
how to integrate security into every

00:24:21,520 --> 00:24:23,440
step of your software development life

00:24:22,799 --> 00:24:25,440
cycle

00:24:23,440 --> 00:24:26,799
and build a devsecops pipeline through

00:24:25,440 --> 00:24:27,440
things like application dependency

00:24:26,799 --> 00:24:29,600
scanning

00:24:27,440 --> 00:24:31,360
static code analysis container image

00:24:29,600 --> 00:24:32,000
scanning continuous compliance

00:24:31,360 --> 00:24:34,400
penetration

00:24:32,000 --> 00:24:35,200
testing accessibility compliance testing

00:24:34,400 --> 00:24:37,760
uh

00:24:35,200 --> 00:24:38,400
then we we talked about configuration

00:24:37,760 --> 00:24:40,559
governance

00:24:38,400 --> 00:24:41,600
right so being able to have really

00:24:40,559 --> 00:24:43,919
granular

00:24:41,600 --> 00:24:45,360
control over the types of kubernetes

00:24:43,919 --> 00:24:46,480
objects that are being created

00:24:45,360 --> 00:24:48,720
and then we talked about runtime

00:24:46,480 --> 00:24:52,000
security so pop you want to

00:24:48,720 --> 00:24:53,840
debrief here on on runtime absolutely

00:24:52,000 --> 00:24:55,520
and again using the power falco was the

00:24:53,840 --> 00:24:57,120
daemons that we deployed to this gte

00:24:55,520 --> 00:24:58,400
cluster there was rule sets already out

00:24:57,120 --> 00:24:59,360
of the box we you know when we

00:24:58,400 --> 00:25:02,720
terminaled into this

00:24:59,360 --> 00:25:04,320
into the container um when we had the

00:25:02,720 --> 00:25:05,760
you know the example of opa where we

00:25:04,320 --> 00:25:07,200
were able to like look at that and see

00:25:05,760 --> 00:25:08,960
that steven went in there through using

00:25:07,200 --> 00:25:09,279
cube audit rules that we had attached to

00:25:08,960 --> 00:25:10,799
it

00:25:09,279 --> 00:25:13,279
and then sending that output either to

00:25:10,799 --> 00:25:15,760
stand it out on your screen or to grpc

00:25:13,279 --> 00:25:17,120
or to sla slack or any of the things

00:25:15,760 --> 00:25:20,000
using the falco sidekick

00:25:17,120 --> 00:25:21,200
uh project so all of that again we've

00:25:20,000 --> 00:25:23,039
done that through the power of open

00:25:21,200 --> 00:25:25,600
source

00:25:23,039 --> 00:25:27,039
and you know we want to be transparent

00:25:25,600 --> 00:25:28,000
there's a ton of content here and it can

00:25:27,039 --> 00:25:29,760
seem overwhelming

00:25:28,000 --> 00:25:32,159
but like pop just said all this is open

00:25:29,760 --> 00:25:33,440
source the community is super welcoming

00:25:32,159 --> 00:25:35,520
and we would love to be able to talk to

00:25:33,440 --> 00:25:43,360
you all in in the kubernetes slack

00:25:35,520 --> 00:25:45,440
thanks everyone thank you everyone

00:25:43,360 --> 00:25:45,440

YouTube URL: https://www.youtube.com/watch?v=WIH79cKUCVA


