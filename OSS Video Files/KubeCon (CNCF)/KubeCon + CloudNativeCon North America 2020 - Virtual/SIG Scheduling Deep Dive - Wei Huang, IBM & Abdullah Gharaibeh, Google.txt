Title: SIG Scheduling Deep Dive - Wei Huang, IBM & Abdullah Gharaibeh, Google
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

SIG Scheduling Deep Dive - Wei Huang, IBM & Abdullah Gharaibeh, Google 

Kube-Scheduler is the component of Kubernetes that assigns pods to nodes based on the configured scheduling requirements. These requirements can be high availability, resource efficiency and other policies and heuristics. This talk will provide an overview of the new and upcoming features in the scheduler, including the scheduler framework, and the new component config API that enables scheduling profiles. In addition, we'll present updates on other sig-scheduling projects like the descheduler, scheduler-plugins. 

https://sched.co/ekHV
Captions: 
	00:00:01,360 --> 00:00:06,080
hi everyone uh welcome to the

00:00:03,280 --> 00:00:06,799
north america virtual cube car today i'm

00:00:06,080 --> 00:00:09,599
going to

00:00:06,799 --> 00:00:10,800
give you a deep dive on the sixth

00:00:09,599 --> 00:00:13,679
scheduling

00:00:10,800 --> 00:00:15,519
and uh a little bit on myself my name is

00:00:13,679 --> 00:00:18,640
weinhuang i work at

00:00:15,519 --> 00:00:20,000
ibm i'm also the co-chair of the sikh

00:00:18,640 --> 00:00:23,760
scheduling

00:00:20,000 --> 00:00:24,880
so today's content is separated into

00:00:23,760 --> 00:00:28,080
three parts

00:00:24,880 --> 00:00:31,439
and at each part we want the content

00:00:28,080 --> 00:00:34,559
is delivered to the exact audience

00:00:31,439 --> 00:00:36,000
so we separate them on to different

00:00:34,559 --> 00:00:39,440
personas

00:00:36,000 --> 00:00:41,920
from the uh kubernetes beginner

00:00:39,440 --> 00:00:42,879
to some scheduling expert so what we

00:00:41,920 --> 00:00:46,399
want to that

00:00:42,879 --> 00:00:50,559
the content to be delivered so that the

00:00:46,399 --> 00:00:53,199
specific audience can absorb easily

00:00:50,559 --> 00:00:54,399
okay the first kind of audience we are

00:00:53,199 --> 00:00:57,440
targeting

00:00:54,399 --> 00:01:00,160
those regular users who just write

00:00:57,440 --> 00:01:01,680
and deploy their applications onto the

00:01:00,160 --> 00:01:04,799
kubernetes platform

00:01:01,680 --> 00:01:08,640
so for them they just want to know some

00:01:04,799 --> 00:01:11,920
scheduled basics so that they can use

00:01:08,640 --> 00:01:13,600
the scheduler feature features

00:01:11,920 --> 00:01:16,080
efficiently and correctly

00:01:13,600 --> 00:01:17,280
and also they will maybe want to do some

00:01:16,080 --> 00:01:19,920
basic troubleshooting

00:01:17,280 --> 00:01:22,080
to identify whether the issue is belongs

00:01:19,920 --> 00:01:24,560
to scheduler or other components

00:01:22,080 --> 00:01:26,880
and for sure they don't want to go too

00:01:24,560 --> 00:01:29,680
deep into their scheduled internals

00:01:26,880 --> 00:01:30,720
so fourth um further thing is to answer

00:01:29,680 --> 00:01:33,840
them what keyboard

00:01:30,720 --> 00:01:37,520
stack schedule does so in one sentence

00:01:33,840 --> 00:01:38,079
keep scheduler just find all the pending

00:01:37,520 --> 00:01:42,320
paths

00:01:38,079 --> 00:01:45,920
and assign the part to the most

00:01:42,320 --> 00:01:49,920
best the fit node so that's it

00:01:45,920 --> 00:01:52,640
and in term of uh api perspective

00:01:49,920 --> 00:01:53,600
so depending means the node that doesn't

00:01:52,640 --> 00:01:56,560
have

00:01:53,600 --> 00:01:58,399
spec download name field set it's empty

00:01:56,560 --> 00:02:01,920
so you can see from the picture

00:01:58,399 --> 00:02:04,960
and then scheduler will

00:02:01,920 --> 00:02:05,520
go through some internal logic and we'll

00:02:04,960 --> 00:02:08,080
find

00:02:05,520 --> 00:02:08,800
it's the best node for the incoming part

00:02:08,080 --> 00:02:11,599
and i

00:02:08,800 --> 00:02:12,400
assign the path to the node in this case

00:02:11,599 --> 00:02:15,680
then

00:02:12,400 --> 00:02:16,400
spectrum name was sent to uh canned

00:02:15,680 --> 00:02:20,000
worker 2.

00:02:16,400 --> 00:02:23,200
so this is basically schedule it does

00:02:20,000 --> 00:02:24,959
and with that being said there are some

00:02:23,200 --> 00:02:28,319
things i need to mention that

00:02:24,959 --> 00:02:31,280
which cuba schedule doesn't do which uh

00:02:28,319 --> 00:02:31,680
often missed understood by the users

00:02:31,280 --> 00:02:33,920
like

00:02:31,680 --> 00:02:36,640
quarter enforcement this is the thing

00:02:33,920 --> 00:02:39,040
that the admission plugins does

00:02:36,640 --> 00:02:40,160
at the pod creation time instead of

00:02:39,040 --> 00:02:43,680
scheduling time

00:02:40,160 --> 00:02:44,879
and also spinning up and sculling down

00:02:43,680 --> 00:02:48,239
the replicas of

00:02:44,879 --> 00:02:49,840
deployment is the job of consumer

00:02:48,239 --> 00:02:53,200
manager

00:02:49,840 --> 00:02:57,519
because they are responsible for manage

00:02:53,200 --> 00:03:01,599
the number of replicas meets the desired

00:02:57,519 --> 00:03:05,599
number and also it's the cubelet

00:03:01,599 --> 00:03:08,480
responsible for effect the running path

00:03:05,599 --> 00:03:08,959
maybe because the working node has

00:03:08,480 --> 00:03:12,080
running

00:03:08,959 --> 00:03:15,599
out of memory running out of desk etc

00:03:12,080 --> 00:03:18,640
etc so i list a few of the

00:03:15,599 --> 00:03:20,720
common misunderstanding that people

00:03:18,640 --> 00:03:22,400
would think that this thing belongs to

00:03:20,720 --> 00:03:24,319
schedule but it doesn't

00:03:22,400 --> 00:03:26,799
so understanding this will help you

00:03:24,319 --> 00:03:29,680
better identify the issues

00:03:26,799 --> 00:03:30,799
whether it belongs to a schedule or not

00:03:29,680 --> 00:03:32,879
and the next

00:03:30,799 --> 00:03:34,080
we will give a very high level

00:03:32,879 --> 00:03:37,519
introduction about

00:03:34,080 --> 00:03:40,560
the scheduling flow the most the basics

00:03:37,519 --> 00:03:43,680
so once the scheduler gets a part

00:03:40,560 --> 00:03:45,440
it goes through internal scheduling

00:03:43,680 --> 00:03:46,319
cycle the sketch screen cycle will

00:03:45,440 --> 00:03:48,640
schedule

00:03:46,319 --> 00:03:51,280
the part one by one and one scanning

00:03:48,640 --> 00:03:53,439
cycle can be divided into several phases

00:03:51,280 --> 00:03:56,080
the first one is called filtering so

00:03:53,439 --> 00:03:59,760
filtering tries to

00:03:56,080 --> 00:04:02,319
answer the paths hard constraints

00:03:59,760 --> 00:04:03,280
it's like answer your question like as a

00:04:02,319 --> 00:04:06,560
user

00:04:03,280 --> 00:04:07,519
i need my path to be scheduled to a node

00:04:06,560 --> 00:04:10,879
which has

00:04:07,519 --> 00:04:13,040
two gigabyte two gigabyte memory or

00:04:10,879 --> 00:04:14,319
i need my part to be scheduled to

00:04:13,040 --> 00:04:16,400
another witch

00:04:14,319 --> 00:04:17,440
so that to code the existence with some

00:04:16,400 --> 00:04:20,239
kind of path

00:04:17,440 --> 00:04:21,199
so this kind of requirements i call them

00:04:20,239 --> 00:04:24,800
hardcore

00:04:21,199 --> 00:04:28,080
they must be satisfied and all the hard

00:04:24,800 --> 00:04:31,280
constraints are ended not all

00:04:28,080 --> 00:04:34,400
and in terms of the hub constraints

00:04:31,280 --> 00:04:37,040
they are usually i think 99

00:04:34,400 --> 00:04:37,759
of the cases are from the prospect which

00:04:37,040 --> 00:04:40,400
i

00:04:37,759 --> 00:04:41,280
specified directly by the user for

00:04:40,400 --> 00:04:44,639
example

00:04:41,280 --> 00:04:48,800
the request

00:04:44,639 --> 00:04:52,400
and the path affinity so notice there

00:04:48,800 --> 00:04:53,759
here the primitive starts with required

00:04:52,400 --> 00:04:57,759
so if you

00:04:53,759 --> 00:04:58,880
read out some term starts with required

00:04:57,759 --> 00:05:01,039
is usually

00:04:58,880 --> 00:05:02,960
the hard requirement because it's

00:05:01,039 --> 00:05:06,400
required

00:05:02,960 --> 00:05:07,440
and some other primitive use other terms

00:05:06,400 --> 00:05:12,320
like

00:05:07,440 --> 00:05:15,360
the project spread feature use a

00:05:12,320 --> 00:05:16,800
constant string to and identify this is

00:05:15,360 --> 00:05:19,840
a hard constraint

00:05:16,800 --> 00:05:21,120
that if the constraints cannot be

00:05:19,840 --> 00:05:23,360
satisfied

00:05:21,120 --> 00:05:26,880
then do not schedule this part so you

00:05:23,360 --> 00:05:30,479
can usually tell from the

00:05:26,880 --> 00:05:33,039
literal meanings to tell whether it's a

00:05:30,479 --> 00:05:35,440
hard constraint yeah or a soft

00:05:33,039 --> 00:05:38,479
constraint of a later mention

00:05:35,440 --> 00:05:41,600
this is important because

00:05:38,479 --> 00:05:43,919
only heart constraint only on

00:05:41,600 --> 00:05:44,960
unsatisfying hard constraint will make

00:05:43,919 --> 00:05:48,160
your part

00:05:44,960 --> 00:05:51,680
into pending status

00:05:48,160 --> 00:05:54,560
and next phase so suppose you have 100

00:05:51,680 --> 00:05:55,280
nails and only 10 nails has passed the

00:05:54,560 --> 00:05:57,360
filter

00:05:55,280 --> 00:05:58,400
phase then we go to the next phase

00:05:57,360 --> 00:06:01,759
called scoring

00:05:58,400 --> 00:06:05,199
so scoring in contrast of the filtering

00:06:01,759 --> 00:06:06,400
best efforts so that try to answer some

00:06:05,199 --> 00:06:09,600
questions like

00:06:06,400 --> 00:06:10,240
i prefer my pile to be scheduled to know

00:06:09,600 --> 00:06:13,759
which has

00:06:10,240 --> 00:06:15,759
ssd but if that note doesn't have it

00:06:13,759 --> 00:06:18,080
doesn't matter i just want

00:06:15,759 --> 00:06:19,120
scheduler to try its best to do this

00:06:18,080 --> 00:06:22,400
kind of thing

00:06:19,120 --> 00:06:24,960
so based on this software constraint

00:06:22,400 --> 00:06:26,000
each filtered node filter means that

00:06:24,960 --> 00:06:29,199
node has passed

00:06:26,000 --> 00:06:31,680
the filter filtering constraint

00:06:29,199 --> 00:06:34,639
those filter nails will get scored and

00:06:31,680 --> 00:06:37,919
we aggregate those score

00:06:34,639 --> 00:06:41,120
and finally pick up the higher the score

00:06:37,919 --> 00:06:41,680
and assign the path to the node which

00:06:41,120 --> 00:06:44,160
has the

00:06:41,680 --> 00:06:44,720
highest score so i want to highlight

00:06:44,160 --> 00:06:48,240
that

00:06:44,720 --> 00:06:49,520
in terms of soft constraint it doesn't

00:06:48,240 --> 00:06:52,960
block

00:06:49,520 --> 00:06:54,800
scheduling your path it's just describe

00:06:52,960 --> 00:06:57,120
a relation of

00:06:54,800 --> 00:06:59,520
preference i prefer my path to be

00:06:57,120 --> 00:07:02,240
scheduled onto some some note

00:06:59,520 --> 00:07:03,520
and maybe there are some soft

00:07:02,240 --> 00:07:07,759
constraints conflict

00:07:03,520 --> 00:07:10,960
with each other so it happens so that

00:07:07,759 --> 00:07:13,440
and the software constraints has

00:07:10,960 --> 00:07:14,720
have two sources the first one is from

00:07:13,440 --> 00:07:16,400
the prospect

00:07:14,720 --> 00:07:19,199
you can identify some stuff the

00:07:16,400 --> 00:07:23,120
constraint in the prospect like

00:07:19,199 --> 00:07:26,160
for the node affinity and the primitive

00:07:23,120 --> 00:07:28,479
starts with preferred blah blah blah

00:07:26,160 --> 00:07:32,000
blah so this is the

00:07:28,479 --> 00:07:35,440
soft constraint and usually it comes

00:07:32,000 --> 00:07:38,880
with additional parameter like weight

00:07:35,440 --> 00:07:42,319
so that can give the user a customized

00:07:38,880 --> 00:07:44,240
weight so that i favor this constraint

00:07:42,319 --> 00:07:45,599
more than other constraints of the

00:07:44,240 --> 00:07:48,639
construct

00:07:45,599 --> 00:07:50,840
and also some features are using other

00:07:48,639 --> 00:07:52,000
primitive which are usually

00:07:50,840 --> 00:07:55,759
self-descriptive

00:07:52,000 --> 00:07:58,160
like when the pile cannot be satisfied

00:07:55,759 --> 00:07:58,960
i will still schedule scheduled anyway

00:07:58,160 --> 00:08:02,240
so this is

00:07:58,960 --> 00:08:03,840
soft construct and there is a another

00:08:02,240 --> 00:08:05,680
kind of

00:08:03,840 --> 00:08:07,280
software constraint which are not

00:08:05,680 --> 00:08:09,919
specified by the user

00:08:07,280 --> 00:08:11,440
instead usually specified by the cluster

00:08:09,919 --> 00:08:14,720
admin

00:08:11,440 --> 00:08:15,840
upon the scheduled startup so they are

00:08:14,720 --> 00:08:18,960
called i call them

00:08:15,840 --> 00:08:22,319
implicit schedule config so there are

00:08:18,960 --> 00:08:25,840
sort of scheduling

00:08:22,319 --> 00:08:27,120
policies like the default policy tries

00:08:25,840 --> 00:08:29,759
to

00:08:27,120 --> 00:08:31,199
use the node which has the least

00:08:29,759 --> 00:08:34,640
allocated resource

00:08:31,199 --> 00:08:35,839
as possible so that it will try to make

00:08:34,640 --> 00:08:39,039
the cluster

00:08:35,839 --> 00:08:41,680
the utilization balance rather than

00:08:39,039 --> 00:08:42,320
beam pack or the pause to one single

00:08:41,680 --> 00:08:46,640
note

00:08:42,320 --> 00:08:46,640
so this is for softer constraint

00:08:46,720 --> 00:08:50,080
and you may think about think of a

00:08:49,360 --> 00:08:53,519
question that

00:08:50,080 --> 00:08:54,080
what if no node can satisfy all the

00:08:53,519 --> 00:08:56,320
cause

00:08:54,080 --> 00:08:57,600
hard constraint in the filtering phase

00:08:56,320 --> 00:09:00,560
what should we do

00:08:57,600 --> 00:09:01,440
so we have a special phase called

00:09:00,560 --> 00:09:04,399
preemption

00:09:01,440 --> 00:09:06,720
so preemption is only triggered when

00:09:04,399 --> 00:09:10,560
there's no node can satisfy the

00:09:06,720 --> 00:09:13,519
hard constraint and it will

00:09:10,560 --> 00:09:14,640
see whether there are low priority

00:09:13,519 --> 00:09:18,320
candidates which

00:09:14,640 --> 00:09:20,720
can be sacrificed can be preempted

00:09:18,320 --> 00:09:22,240
to make room for the high priority part

00:09:20,720 --> 00:09:25,279
if this is possible

00:09:22,240 --> 00:09:27,200
a schedule will go preempt the low

00:09:25,279 --> 00:09:29,040
priority path to make room

00:09:27,200 --> 00:09:30,959
so that the high priority part is

00:09:29,040 --> 00:09:34,000
schedulable

00:09:30,959 --> 00:09:37,120
so in terms of api

00:09:34,000 --> 00:09:39,680
you have to define the priority class

00:09:37,120 --> 00:09:42,800
and specify their value the higher the

00:09:39,680 --> 00:09:45,200
value the more important the priority is

00:09:42,800 --> 00:09:46,240
and in terms of the prospect you'll

00:09:45,200 --> 00:09:49,360
define the spec

00:09:46,240 --> 00:09:52,560
dot priority class name and correspond

00:09:49,360 --> 00:09:53,519
to their priority priority test which

00:09:52,560 --> 00:09:56,720
the scheduler will

00:09:53,519 --> 00:09:59,200
own in the long term all right

00:09:56,720 --> 00:10:00,480
uh this is pretty much i think in day

00:09:59,200 --> 00:10:04,240
one a regular

00:10:00,480 --> 00:10:07,760
scheduling user needs to know

00:10:04,240 --> 00:10:11,120
about the basics of the schedule and

00:10:07,760 --> 00:10:14,000
you just need to learn that scheduling

00:10:11,120 --> 00:10:16,000
has basically three phases filter

00:10:14,000 --> 00:10:19,600
scoring and preemption

00:10:16,000 --> 00:10:23,040
and if you see a party's

00:10:19,600 --> 00:10:26,160
pending status first ensure that

00:10:23,040 --> 00:10:28,560
the path spectrum name is not set

00:10:26,160 --> 00:10:30,640
so that is in the scope of scheduling

00:10:28,560 --> 00:10:34,000
which are trying to schedule

00:10:30,640 --> 00:10:36,399
the pattern to the note and also

00:10:34,000 --> 00:10:37,120
use cube control describe that part to

00:10:36,399 --> 00:10:39,360
check

00:10:37,120 --> 00:10:40,480
which constraint how the constraint is

00:10:39,360 --> 00:10:43,519
not satisfied

00:10:40,480 --> 00:10:43,920
okay so in the impending status you

00:10:43,519 --> 00:10:46,560
check

00:10:43,920 --> 00:10:48,320
those kind of go through those simply

00:10:46,560 --> 00:10:51,920
job shooting steps

00:10:48,320 --> 00:10:55,519
but if a path can be scheduled

00:10:51,920 --> 00:10:57,120
but it's not the desired node that it is

00:10:55,519 --> 00:10:59,760
scheduled onto

00:10:57,120 --> 00:11:01,040
there is usually something wrong in the

00:10:59,760 --> 00:11:04,480
scoring

00:11:01,040 --> 00:11:08,320
plugin scoring phase maybe

00:11:04,480 --> 00:11:10,399
some default scoring policies

00:11:08,320 --> 00:11:12,079
that given by the cluster and mean

00:11:10,399 --> 00:11:14,320
doesn't fit your class

00:11:12,079 --> 00:11:15,920
you need to check with them or you do

00:11:14,320 --> 00:11:19,200
some debug to see

00:11:15,920 --> 00:11:22,320
why one score policy

00:11:19,200 --> 00:11:24,000
is way higher than the other so this is

00:11:22,320 --> 00:11:26,880
basically for

00:11:24,000 --> 00:11:26,880
regular users

00:11:27,040 --> 00:11:33,600
all right uh for day two you

00:11:30,720 --> 00:11:34,800
we are targeting the audience as customy

00:11:33,600 --> 00:11:37,200
or devops

00:11:34,800 --> 00:11:38,959
so the goal here is a little different

00:11:37,200 --> 00:11:41,600
so you are not

00:11:38,959 --> 00:11:42,720
only satisfied of trading schedule as a

00:11:41,600 --> 00:11:45,839
black box

00:11:42,720 --> 00:11:49,120
instead you want to

00:11:45,839 --> 00:11:52,000
know more about schedule internet and

00:11:49,120 --> 00:11:53,680
to get to know some configuration back

00:11:52,000 --> 00:11:56,959
best practices

00:11:53,680 --> 00:12:01,120
and also understand how

00:11:56,959 --> 00:12:04,000
the scheduling behavior correlated

00:12:01,120 --> 00:12:05,279
to internal we call the scheduling

00:12:04,000 --> 00:12:06,720
plugins

00:12:05,279 --> 00:12:08,880
so that you can make the most of

00:12:06,720 --> 00:12:11,360
schedule and expose them to

00:12:08,880 --> 00:12:11,920
the end users and of course you don't

00:12:11,360 --> 00:12:14,160
want to

00:12:11,920 --> 00:12:16,560
write additional code no matter it's a

00:12:14,160 --> 00:12:21,200
scheduler extender or plugin

00:12:16,560 --> 00:12:26,000
you just make customize the scheduler

00:12:21,200 --> 00:12:28,560
with the official scheduled image

00:12:26,000 --> 00:12:29,839
so the first thing you can look into is

00:12:28,560 --> 00:12:33,040
configuration

00:12:29,839 --> 00:12:34,560
so configuration as time goes changes a

00:12:33,040 --> 00:12:37,440
lot in the recent

00:12:34,560 --> 00:12:39,519
kubernetes releases and the first thing

00:12:37,440 --> 00:12:43,120
i want to mention is that

00:12:39,519 --> 00:12:45,060
don't use command line arguments anymore

00:12:43,120 --> 00:12:46,240
because we have a better design

00:12:45,060 --> 00:12:48,639
[Music]

00:12:46,240 --> 00:12:50,800
and organized object called cube

00:12:48,639 --> 00:12:52,480
scheduler configurations

00:12:50,800 --> 00:12:54,240
so that you can pass on all the

00:12:52,480 --> 00:12:57,440
individual command line arguments

00:12:54,240 --> 00:13:00,639
through that config object through

00:12:57,440 --> 00:13:05,120
the dash dash config

00:13:00,639 --> 00:13:07,680
parameter but if you are still at

00:13:05,120 --> 00:13:08,320
like humanity's 1 7 you have to still

00:13:07,680 --> 00:13:11,760
adapt to

00:13:08,320 --> 00:13:14,720
the to the old style

00:13:11,760 --> 00:13:16,720
kind of cube schedule configuration and

00:13:14,720 --> 00:13:18,800
the second thing is

00:13:16,720 --> 00:13:20,320
even inside the cube scheduler

00:13:18,800 --> 00:13:21,760
configuration there are different

00:13:20,320 --> 00:13:25,200
versions

00:13:21,760 --> 00:13:29,519
vary from v1 alpha 1 to v1 beta

00:13:25,200 --> 00:13:33,120
1 and the difference this is that

00:13:29,519 --> 00:13:36,880
before we won alpha 2

00:13:33,120 --> 00:13:37,920
we are still using the old execution

00:13:36,880 --> 00:13:40,000
path

00:13:37,920 --> 00:13:41,680
all terms like prior decays

00:13:40,000 --> 00:13:44,800
corresponding to filtering

00:13:41,680 --> 00:13:47,360
and priority corresponding to scoring

00:13:44,800 --> 00:13:48,000
and they are a little bit different in

00:13:47,360 --> 00:13:51,199
terms of their

00:13:48,000 --> 00:13:52,480
naming and the execution path so if you

00:13:51,199 --> 00:13:55,600
are

00:13:52,480 --> 00:13:58,399
still using the old config you may

00:13:55,600 --> 00:13:59,360
be using some thing called the policy

00:13:58,399 --> 00:14:01,600
file

00:13:59,360 --> 00:14:03,120
so the policy file is something like

00:14:01,600 --> 00:14:06,240
this you define

00:14:03,120 --> 00:14:09,279
a schedule config

00:14:06,240 --> 00:14:12,560
with one f1 version and

00:14:09,279 --> 00:14:15,680
specify one policy as the

00:14:12,560 --> 00:14:18,240
policy file and inside

00:14:15,680 --> 00:14:19,920
the policy file if you want to customize

00:14:18,240 --> 00:14:22,959
some

00:14:19,920 --> 00:14:25,920
behavior you have to list

00:14:22,959 --> 00:14:28,399
all the predicates or the priorities

00:14:25,920 --> 00:14:31,199
even if you just want to change one

00:14:28,399 --> 00:14:31,760
so that is not good you search user

00:14:31,199 --> 00:14:34,880
experience

00:14:31,760 --> 00:14:36,000
right and also here you can see that you

00:14:34,880 --> 00:14:39,199
have to provide

00:14:36,000 --> 00:14:39,760
two files one is the cube schedule

00:14:39,199 --> 00:14:41,920
config

00:14:39,760 --> 00:14:43,360
one is the policy file itself it's also

00:14:41,920 --> 00:14:46,560
not user friendly

00:14:43,360 --> 00:14:49,040
so as time goes

00:14:46,560 --> 00:14:51,040
we want to duplicate this kind of

00:14:49,040 --> 00:14:54,399
policy-based config

00:14:51,040 --> 00:14:58,320
and instead we are transitioning

00:14:54,399 --> 00:15:02,320
to the plugin-based config

00:14:58,320 --> 00:15:06,079
so plugin is simply a functional

00:15:02,320 --> 00:15:09,040
unit that is written to

00:15:06,079 --> 00:15:10,720
satisfy one specific constraint either

00:15:09,040 --> 00:15:13,839
from the user's input or

00:15:10,720 --> 00:15:13,839
from some

00:15:14,079 --> 00:15:20,480
implicit general policy

00:15:17,360 --> 00:15:24,079
so right now if you are using

00:15:20,480 --> 00:15:24,800
v1 alpha 2 or v1 beta 1 you can use the

00:15:24,079 --> 00:15:27,920
latest

00:15:24,800 --> 00:15:29,759
cube schedule configurations under the

00:15:27,920 --> 00:15:32,720
profiles

00:15:29,759 --> 00:15:33,279
subfield there is a plugin field so

00:15:32,720 --> 00:15:36,639
there

00:15:33,279 --> 00:15:40,000
you can spotify you can disable

00:15:36,639 --> 00:15:43,360
or enable or disable all the plugins

00:15:40,000 --> 00:15:45,839
there by writing the minimum yaml

00:15:43,360 --> 00:15:46,800
snippet as possible so it's very user

00:15:45,839 --> 00:15:50,240
friendly

00:15:46,800 --> 00:15:51,120
and the more importantly so right now

00:15:50,240 --> 00:15:55,199
you can see that we

00:15:51,120 --> 00:15:59,279
we have a new profiles

00:15:55,199 --> 00:15:59,680
field that means so right now starting

00:15:59,279 --> 00:16:03,279
with

00:15:59,680 --> 00:16:04,880
118 your scheduler is not a single

00:16:03,279 --> 00:16:07,839
flavor schedule

00:16:04,880 --> 00:16:08,720
you can build a multiple multi-flavored

00:16:07,839 --> 00:16:12,800
scheduler

00:16:08,720 --> 00:16:15,839
i will give example so using the weaver

00:16:12,800 --> 00:16:19,839
beta wine configurations here i

00:16:15,839 --> 00:16:22,000
define four profiles

00:16:19,839 --> 00:16:23,920
and default scheduler image first the

00:16:22,000 --> 00:16:27,199
beam pack skip score

00:16:23,920 --> 00:16:27,519
and they can map to different behaviors

00:16:27,199 --> 00:16:29,920
in

00:16:27,519 --> 00:16:31,120
runtime their different scheduling

00:16:29,920 --> 00:16:34,160
profiles

00:16:31,120 --> 00:16:36,959
like the skip score is something that

00:16:34,160 --> 00:16:38,000
i totally just disabled the scoring

00:16:36,959 --> 00:16:41,440
phase

00:16:38,000 --> 00:16:43,600
because i don't care about which node is

00:16:41,440 --> 00:16:45,120
highest the highest score i just want

00:16:43,600 --> 00:16:48,480
the part to be scheduled

00:16:45,120 --> 00:16:51,600
as fast as possible and the beam pack

00:16:48,480 --> 00:16:54,240
on the other hand try to favor

00:16:51,600 --> 00:16:55,680
the node which has the most allocated

00:16:54,240 --> 00:16:58,399
resource as possible

00:16:55,680 --> 00:16:58,959
so it's quite fit the the requirements

00:16:58,399 --> 00:17:01,519
of

00:16:58,959 --> 00:17:03,600
auto scale because auto scada wants to

00:17:01,519 --> 00:17:05,839
save the cost of running machines

00:17:03,600 --> 00:17:07,600
they want to pack all the workloads and

00:17:05,839 --> 00:17:11,839
minimum machines as possible

00:17:07,600 --> 00:17:14,640
etc and in runtime in your workload

00:17:11,839 --> 00:17:15,199
you just specify the spec dot scheduler

00:17:14,640 --> 00:17:18,559
name

00:17:15,199 --> 00:17:23,199
and correspond to the profile

00:17:18,559 --> 00:17:23,199
so in the example that we have four

00:17:24,000 --> 00:17:30,640
workload demos and with different

00:17:27,280 --> 00:17:33,919
scheduler name and in runtime schedule

00:17:30,640 --> 00:17:36,799
nails which specific flavor you want

00:17:33,919 --> 00:17:39,440
your workload to be scheduled

00:17:36,799 --> 00:17:40,640
so that's the i think the very key

00:17:39,440 --> 00:17:44,400
change in recent

00:17:40,640 --> 00:17:48,160
kubernetes releases

00:17:44,400 --> 00:17:49,360
so back to this picture so as a custard

00:17:48,160 --> 00:17:52,640
admin

00:17:49,360 --> 00:17:56,240
you should know exactly

00:17:52,640 --> 00:18:00,160
what each plugin is doing

00:17:56,240 --> 00:18:00,960
not only by understanding the logic and

00:18:00,160 --> 00:18:03,760
also

00:18:00,960 --> 00:18:04,799
knows their internal stuff like their

00:18:03,760 --> 00:18:07,039
arguments

00:18:04,799 --> 00:18:08,559
and how to conflict them and how that

00:18:07,039 --> 00:18:11,840
arguments

00:18:08,559 --> 00:18:15,120
reflect in terms of behavior and

00:18:11,840 --> 00:18:18,320
here we have a page to list

00:18:15,120 --> 00:18:21,520
all the default plugins and

00:18:18,320 --> 00:18:24,559
which extension point they belongs to

00:18:21,520 --> 00:18:28,480
for example 10 toleration

00:18:24,559 --> 00:18:30,640
it implements several extension points

00:18:28,480 --> 00:18:32,000
in field phase prescribed phase and

00:18:30,640 --> 00:18:35,200
score phase

00:18:32,000 --> 00:18:38,240
so as a custom admin if you want enable

00:18:35,200 --> 00:18:42,480
or disable do some customization i do

00:18:38,240 --> 00:18:45,679
recommend to check out this

00:18:42,480 --> 00:18:49,200
the official website

00:18:45,679 --> 00:18:52,240
and also there are some plugins

00:18:49,200 --> 00:18:54,000
was compiled into the schedule image but

00:18:52,240 --> 00:18:57,520
not enabled by default

00:18:54,000 --> 00:19:00,400
so you can choose to enable them

00:18:57,520 --> 00:19:02,559
but again you should to understand the

00:19:00,400 --> 00:19:05,120
real semantics of them

00:19:02,559 --> 00:19:05,919
and some of them uh have conflict with

00:19:05,120 --> 00:19:08,240
default ones

00:19:05,919 --> 00:19:10,160
you if you want to enable some of them

00:19:08,240 --> 00:19:13,280
maybe you want to disable some of these

00:19:10,160 --> 00:19:16,720
default plugins so that is the basic

00:19:13,280 --> 00:19:20,799
uh the custom main

00:19:16,720 --> 00:19:23,280
need to understand in addition to that

00:19:20,799 --> 00:19:24,960
there are some other global settings in

00:19:23,280 --> 00:19:28,080
the cube schedule config

00:19:24,960 --> 00:19:30,320
like percentage of nodes to score which

00:19:28,080 --> 00:19:34,400
are very useful if you're running on

00:19:30,320 --> 00:19:34,960
1000 or 5000 now properly you don't need

00:19:34,400 --> 00:19:37,440
to

00:19:34,960 --> 00:19:38,880
score all the filter nails you just need

00:19:37,440 --> 00:19:41,600
to score maybe

00:19:38,880 --> 00:19:42,320
10 or 20 percent of the nails because

00:19:41,600 --> 00:19:46,000
scoring

00:19:42,320 --> 00:19:49,679
is more to favor one node

00:19:46,000 --> 00:19:51,280
to to the other so some of the workloads

00:19:49,679 --> 00:19:53,679
just care about whether

00:19:51,280 --> 00:19:55,840
this hot constraint is has been

00:19:53,679 --> 00:19:56,880
satisfied and don't quite care about the

00:19:55,840 --> 00:20:00,080
soft constraints

00:19:56,880 --> 00:20:03,360
so that's a very useful features and

00:20:00,080 --> 00:20:05,840
as a crust i mean you may want to catch

00:20:03,360 --> 00:20:09,840
up with the latest uh

00:20:05,840 --> 00:20:10,480
progress in the upstreams i listed a few

00:20:09,840 --> 00:20:14,640
of them

00:20:10,480 --> 00:20:17,919
here and the eventual goal is that

00:20:14,640 --> 00:20:20,799
you i suppose

00:20:17,919 --> 00:20:21,679
just it's like you are running a burger

00:20:20,799 --> 00:20:24,480
shop

00:20:21,679 --> 00:20:26,400
like right in the before you just

00:20:24,480 --> 00:20:29,760
provide a one flavor

00:20:26,400 --> 00:20:33,520
burger which has meat

00:20:29,760 --> 00:20:37,200
onion and tomatoes

00:20:33,520 --> 00:20:40,480
that's it you use it just can take it

00:20:37,200 --> 00:20:44,000
or leave it right now you can have

00:20:40,480 --> 00:20:47,120
you have multiple ingredients right

00:20:44,000 --> 00:20:50,320
you can compose them and into different

00:20:47,120 --> 00:20:54,320
flavors like it's a veggie one

00:20:50,320 --> 00:20:55,840
it's uh with beef it's with chicken and

00:20:54,320 --> 00:20:58,880
with beef you can also

00:20:55,840 --> 00:21:02,559
divide it into with green

00:20:58,880 --> 00:21:04,320
green onion or with wrong onion or with

00:21:02,559 --> 00:21:07,039
uh tomatoes without the middle east

00:21:04,320 --> 00:21:09,280
address edges so you can

00:21:07,039 --> 00:21:10,400
the image is still the same image but

00:21:09,280 --> 00:21:13,200
you can provide

00:21:10,400 --> 00:21:14,480
more flavors so that to adapt to your

00:21:13,200 --> 00:21:17,360
user's workload

00:21:14,480 --> 00:21:17,840
so this is basically the i think the

00:21:17,360 --> 00:21:20,880
trust

00:21:17,840 --> 00:21:23,919
admin wants to learn

00:21:20,880 --> 00:21:26,720
okay let's go to day three days three

00:21:23,919 --> 00:21:28,640
we are talking to the audience which uh

00:21:26,720 --> 00:21:31,679
usually skating expert

00:21:28,640 --> 00:21:34,240
or innovators it's like

00:21:31,679 --> 00:21:36,080
you're still running a burger shop but

00:21:34,240 --> 00:21:39,280
you are not satisfied with

00:21:36,080 --> 00:21:43,440
existing ingredients you want to

00:21:39,280 --> 00:21:46,400
make some innovative ingredients

00:21:43,440 --> 00:21:47,200
our site for example then provide more

00:21:46,400 --> 00:21:50,799
flavors

00:21:47,200 --> 00:21:54,480
than the default schedule image provides

00:21:50,799 --> 00:21:57,600
so in this case they

00:21:54,480 --> 00:21:58,720
don't care about writing some sort sort

00:21:57,600 --> 00:22:02,000
of code

00:21:58,720 --> 00:22:04,480
and the ultimate goal is to fit

00:22:02,000 --> 00:22:05,520
diverse workflows such as batching

00:22:04,480 --> 00:22:07,760
workloads which

00:22:05,520 --> 00:22:09,679
that the current scheduler is not

00:22:07,760 --> 00:22:12,960
supporting well

00:22:09,679 --> 00:22:14,960
but they are they're not they don't want

00:22:12,960 --> 00:22:17,200
to start from scratch to write a

00:22:14,960 --> 00:22:21,039
secondary schedule because running

00:22:17,200 --> 00:22:24,840
a multiple scheduler will invictably

00:22:21,039 --> 00:22:26,400
cause some conflicts on the path

00:22:24,840 --> 00:22:29,360
scheduling

00:22:26,400 --> 00:22:31,039
so for this kind of users still go back

00:22:29,360 --> 00:22:34,159
to this picture

00:22:31,039 --> 00:22:37,600
you should not be satisfied with

00:22:34,159 --> 00:22:41,200
only knowing that filtering has some

00:22:37,600 --> 00:22:42,080
plugin xyz and the scoring has plugging

00:22:41,200 --> 00:22:44,720
xyz

00:22:42,080 --> 00:22:45,360
you need to understand for example why

00:22:44,720 --> 00:22:49,360
we need

00:22:45,360 --> 00:22:52,559
pre-filter and how to use pre-filter

00:22:49,360 --> 00:22:56,240
right pre-filter for example is a phase

00:22:52,559 --> 00:23:00,640
that especially for the requirement that

00:22:56,240 --> 00:23:04,320
you need to consider cross node

00:23:00,640 --> 00:23:06,559
cross node status so that you need to do

00:23:04,320 --> 00:23:10,640
some pre-calculations

00:23:06,559 --> 00:23:14,000
and put that result into sort of a cache

00:23:10,640 --> 00:23:16,480
and that result can be used later in

00:23:14,000 --> 00:23:18,640
filter phase that's for pre-filter and

00:23:16,480 --> 00:23:23,039
also you need to understand

00:23:18,640 --> 00:23:26,960
what pre permit is and what reserve it

00:23:23,039 --> 00:23:29,600
right reserve is the face that you can

00:23:26,960 --> 00:23:30,080
before you part guest schedule you can

00:23:29,600 --> 00:23:33,440
make a

00:23:30,080 --> 00:23:35,760
optimized uh assumption

00:23:33,440 --> 00:23:38,559
that this part has been scheduled so

00:23:35,760 --> 00:23:41,360
that you assume this part of resource

00:23:38,559 --> 00:23:42,320
in the scheduling cache and the permit

00:23:41,360 --> 00:23:45,919
is a

00:23:42,320 --> 00:23:50,240
very useful extension point that

00:23:45,919 --> 00:23:53,200
you can wait

00:23:50,240 --> 00:23:53,760
until a certain criteria like a group of

00:23:53,200 --> 00:23:56,640
paths

00:23:53,760 --> 00:23:56,960
come inside all of them are satisfied

00:23:56,640 --> 00:24:00,159
and

00:23:56,960 --> 00:24:00,880
you approve all this sort of pause in

00:24:00,159 --> 00:24:02,960
badge

00:24:00,880 --> 00:24:04,960
so this permit is a useful extension

00:24:02,960 --> 00:24:07,600
point in the

00:24:04,960 --> 00:24:09,679
bachelor clause and also poster filter

00:24:07,600 --> 00:24:10,159
is a new extension point we introduced

00:24:09,679 --> 00:24:14,480
in

00:24:10,159 --> 00:24:15,679
wine 19 it replaced the old hard coded

00:24:14,480 --> 00:24:18,799
preemption logic

00:24:15,679 --> 00:24:21,360
so that it's the preemption

00:24:18,799 --> 00:24:22,320
logic is more extensible like in the

00:24:21,360 --> 00:24:24,799
before we just

00:24:22,320 --> 00:24:26,559
in the default preemption we just

00:24:24,799 --> 00:24:29,200
consider the strategy to

00:24:26,559 --> 00:24:30,000
preempt the node sorry preempting the

00:24:29,200 --> 00:24:32,640
path

00:24:30,000 --> 00:24:33,760
on a single node but sometimes it's not

00:24:32,640 --> 00:24:35,840
not the case

00:24:33,760 --> 00:24:37,679
and you want to extend this behavior

00:24:35,840 --> 00:24:40,159
like you want to preempt

00:24:37,679 --> 00:24:41,919
one group of paths and that kind of one

00:24:40,159 --> 00:24:45,600
group path may be scheduled

00:24:41,919 --> 00:24:48,640
onto different nails etc and also

00:24:45,600 --> 00:24:50,799
you need to follow up with the

00:24:48,640 --> 00:24:52,400
latest change in the scheduling

00:24:50,799 --> 00:24:56,000
framework

00:24:52,400 --> 00:24:58,000
and just read through the

00:24:56,000 --> 00:25:00,000
release note if you have any questions

00:24:58,000 --> 00:25:00,720
go to the flag go to a million less that

00:25:00,000 --> 00:25:04,000
to

00:25:00,720 --> 00:25:05,440
raise your concern and uh also we we are

00:25:04,000 --> 00:25:09,919
going to

00:25:05,440 --> 00:25:13,520
uh ga the scheduling framework in 120

00:25:09,919 --> 00:25:16,880
we have started to build this framework

00:25:13,520 --> 00:25:19,919
since 115 but now we

00:25:16,880 --> 00:25:23,760
are able to say that it's stable enough

00:25:19,919 --> 00:25:23,760
it can be go to the next stage

00:25:25,039 --> 00:25:31,360
uh all right it's still the same topic

00:25:28,880 --> 00:25:32,799
that if you want to implement what

00:25:31,360 --> 00:25:35,200
specific features you

00:25:32,799 --> 00:25:36,799
should know which specific extension

00:25:35,200 --> 00:25:39,919
point you want to extend

00:25:36,799 --> 00:25:43,120
and write the corresponding logic there

00:25:39,919 --> 00:25:45,760
for example if you want to uh

00:25:43,120 --> 00:25:47,919
get scheduling requirement you may need

00:25:45,760 --> 00:25:51,200
to implement this kind of

00:25:47,919 --> 00:25:54,880
external point and if you want to do

00:25:51,200 --> 00:25:57,360
some scoring plugins

00:25:54,880 --> 00:25:58,080
you need to implement the preschool and

00:25:57,360 --> 00:26:01,840
score

00:25:58,080 --> 00:26:05,200
extension point so that

00:26:01,840 --> 00:26:06,080
so with the default scheduler on the

00:26:05,200 --> 00:26:08,400
base

00:26:06,080 --> 00:26:09,760
you build something on top of that and

00:26:08,400 --> 00:26:12,559
finally you get

00:26:09,760 --> 00:26:13,600
you compare them together and then you

00:26:12,559 --> 00:26:16,640
get a

00:26:13,600 --> 00:26:20,080
unified scheduler binary it's a new

00:26:16,640 --> 00:26:23,919
new binary which has 100 percent of the

00:26:20,080 --> 00:26:24,320
vanina schedule functionality as well as

00:26:23,919 --> 00:26:26,720
the

00:26:24,320 --> 00:26:28,799
additional functionality you built into

00:26:26,720 --> 00:26:28,799
it

00:26:30,880 --> 00:26:37,200
and because uh building

00:26:33,919 --> 00:26:39,679
a schedule plugin has

00:26:37,200 --> 00:26:40,559
i won't say it has a high bar but it has

00:26:39,679 --> 00:26:44,080
a bar

00:26:40,559 --> 00:26:46,799
so we initiated a

00:26:44,080 --> 00:26:47,679
sub project called schedule plugins

00:26:46,799 --> 00:26:51,200
which

00:26:47,679 --> 00:26:52,080
uh writing some examples there and some

00:26:51,200 --> 00:26:55,360
guidance there

00:26:52,080 --> 00:26:58,080
for you to start with so right now

00:26:55,360 --> 00:26:59,200
we already have some caps on gas

00:26:58,080 --> 00:27:02,559
scheduling

00:26:59,200 --> 00:27:04,080
um capacity scheduling um

00:27:02,559 --> 00:27:07,919
because i say scheduling is about

00:27:04,080 --> 00:27:11,919
elastic quarter and also some

00:27:07,919 --> 00:27:14,960
ongoing care like which favors

00:27:11,919 --> 00:27:17,919
to use some real-time

00:27:14,960 --> 00:27:19,200
metrics of the cluster to do scheduling

00:27:17,919 --> 00:27:22,880
decisions

00:27:19,200 --> 00:27:22,880
etc and also we

00:27:23,039 --> 00:27:29,360
do some ca optimizations to do

00:27:27,039 --> 00:27:30,080
automatic view then which so that you

00:27:29,360 --> 00:27:32,840
can

00:27:30,080 --> 00:27:35,840
just download the image from

00:27:32,840 --> 00:27:35,840
kubernetes.gcr

00:27:36,559 --> 00:27:40,559
all right and this this is pretty much

00:27:39,520 --> 00:27:44,799
for the day three

00:27:40,559 --> 00:27:47,120
so that still the analogy that

00:27:44,799 --> 00:27:48,480
you are running a burger shop so right

00:27:47,120 --> 00:27:51,679
now you

00:27:48,480 --> 00:27:52,480
can use the default ingredients from the

00:27:51,679 --> 00:27:54,080
upstream

00:27:52,480 --> 00:27:56,240
and also you can buy some other

00:27:54,080 --> 00:27:59,440
ingredients from

00:27:56,240 --> 00:28:00,159
the local market right you can buy some

00:27:59,440 --> 00:28:02,399
special

00:28:00,159 --> 00:28:03,600
cheese you can buy some special

00:28:02,399 --> 00:28:07,039
ingredients

00:28:03,600 --> 00:28:09,039
hazelnut or what who knows and

00:28:07,039 --> 00:28:11,360
combine them together to provide

00:28:09,039 --> 00:28:15,279
additional flavors

00:28:11,360 --> 00:28:18,640
to for your user to use and

00:28:15,279 --> 00:28:20,799
feel the last contact us and

00:28:18,640 --> 00:28:22,000
you can find all the information here we

00:28:20,799 --> 00:28:25,279
have weekly meetings

00:28:22,000 --> 00:28:28,840
raise your topic there and

00:28:25,279 --> 00:28:31,440
help us build this community

00:28:28,840 --> 00:28:34,240
better alright thank you i think

00:28:31,440 --> 00:28:38,000
this is pretty much for today's session

00:28:34,240 --> 00:28:38,000

YouTube URL: https://www.youtube.com/watch?v=Wr1TMbdc4O0


