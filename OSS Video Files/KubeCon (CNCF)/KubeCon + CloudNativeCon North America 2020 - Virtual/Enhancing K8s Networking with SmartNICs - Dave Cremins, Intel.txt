Title: Enhancing K8s Networking with SmartNICs - Dave Cremins, Intel
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Enhancing K8s Networking with SmartNICs - Dave Cremins, Intel 

As more workloads like IoT, big data and machine learning move towards the edge, it becomes critical that networks continue to advance. Low latency, performance and higher throughput become prerequisites to ensure that the edge is a viable location for heavy duty applications. There is a growing trend of building new K8s clusters on bare-metal infrastructure, eliminating the need to deploy hypervisors for hardware abstraction. Better performance at scale can be attributed to K8s enhancements in resource management and accelerated networking. SmartNICs bring further opportunities for packet processing. By offloading more operations to the NIC, we free up resources on the host enabling us to further accelerate the processing capabilities of the entire platform. With these offloads, edge computing can reach its full potential and become a desired choice for high-performance workloads. 

https://sched.co/ekCf
Captions: 
	00:00:02,080 --> 00:00:06,960
hi welcome to kubecon cloud nativecon

00:00:04,799 --> 00:00:08,960
north america 2020 virtual

00:00:06,960 --> 00:00:10,000
my name is dave kremens i'm a cloud

00:00:08,960 --> 00:00:12,240
server architect

00:00:10,000 --> 00:00:13,679
uh working in the network platform group

00:00:12,240 --> 00:00:15,599
in intel

00:00:13,679 --> 00:00:17,199
and today i'm going to talk about how we

00:00:15,599 --> 00:00:17,760
can enhance the kubernetes networking

00:00:17,199 --> 00:00:20,640
model

00:00:17,760 --> 00:00:20,640
with smartnix

00:00:21,279 --> 00:00:24,880
so for today's agenda i'm going to talk

00:00:24,400 --> 00:00:28,800
about

00:00:24,880 --> 00:00:30,320
the edge bare metal deployments or

00:00:28,800 --> 00:00:32,719
bare metal as a deployment target for

00:00:30,320 --> 00:00:35,200
the age and kubernetes

00:00:32,719 --> 00:00:36,640
then we'll cover um kubernetes

00:00:35,200 --> 00:00:39,280
networking model

00:00:36,640 --> 00:00:41,280
the the simple requirements inherent in

00:00:39,280 --> 00:00:42,800
the in kubernetes itself

00:00:41,280 --> 00:00:44,239
from a networking perspective and some

00:00:42,800 --> 00:00:45,840
of the trends that we've seen over the

00:00:44,239 --> 00:00:48,879
last number of years

00:00:45,840 --> 00:00:50,879
especially as as new industries on board

00:00:48,879 --> 00:00:53,280
to the kubernetes platform

00:00:50,879 --> 00:00:54,960
we'll then discuss smartnics and the

00:00:53,280 --> 00:00:56,160
types of categorizations we can apply to

00:00:54,960 --> 00:00:58,000
smartnix

00:00:56,160 --> 00:01:00,640
and then disaggregation which i think is

00:00:58,000 --> 00:01:02,559
a key aspect of of how we can enhance

00:01:00,640 --> 00:01:04,000
the kubernetes networking model and

00:01:02,559 --> 00:01:08,080
maybe some more

00:01:04,000 --> 00:01:08,080
discussions around offload techniques

00:01:08,799 --> 00:01:15,360
so i want to start by discussing the age

00:01:12,400 --> 00:01:16,479
um just just for a moment so the

00:01:15,360 --> 00:01:19,920
depiction here

00:01:16,479 --> 00:01:21,840
um you know i we keep hearing things

00:01:19,920 --> 00:01:23,600
around what what actually is the edge

00:01:21,840 --> 00:01:25,040
and the age is simply geographic

00:01:23,600 --> 00:01:28,159
distribution

00:01:25,040 --> 00:01:31,200
computing done at or near the source

00:01:28,159 --> 00:01:32,960
of data so as you can see here we have

00:01:31,200 --> 00:01:34,560
different aspects of the edge

00:01:32,960 --> 00:01:37,840
we have the on-premise age with the

00:01:34,560 --> 00:01:39,840
access edge uh we've near age we forage

00:01:37,840 --> 00:01:41,360
you know and it's all in terms of you

00:01:39,840 --> 00:01:42,880
know the point of presence where exactly

00:01:41,360 --> 00:01:43,920
does it allow you from a geographic

00:01:42,880 --> 00:01:46,720
perspective

00:01:43,920 --> 00:01:47,759
you know and what kind of computing can

00:01:46,720 --> 00:01:52,240
we do

00:01:47,759 --> 00:01:56,560
um at that location

00:01:52,240 --> 00:01:58,799
um so we also tend to look at you know

00:01:56,560 --> 00:02:00,079
edge computing and there's close tie-ins

00:01:58,799 --> 00:02:03,119
and alignment with the

00:02:00,079 --> 00:02:06,159
5g world so like the move to 5g

00:02:03,119 --> 00:02:08,640
is driving changes to edge computing

00:02:06,159 --> 00:02:09,679
and it is driving adoption of 5g

00:02:08,640 --> 00:02:12,080
solutions

00:02:09,679 --> 00:02:13,360
these 5g solutions come with the promise

00:02:12,080 --> 00:02:16,319
of lower latency

00:02:13,360 --> 00:02:18,000
higher capacity and increased bandwidth

00:02:16,319 --> 00:02:19,040
and when we start looking at the type of

00:02:18,000 --> 00:02:20,800
deployment models

00:02:19,040 --> 00:02:22,080
available from an edge perspective we

00:02:20,800 --> 00:02:24,959
see things like

00:02:22,080 --> 00:02:26,640
you know public models we see private

00:02:24,959 --> 00:02:27,840
on-prem type models and then we see a

00:02:26,640 --> 00:02:29,760
hybrid

00:02:27,840 --> 00:02:31,280
which is kind of like a combination of

00:02:29,760 --> 00:02:33,280
all of them

00:02:31,280 --> 00:02:35,120
and there are four main markets that are

00:02:33,280 --> 00:02:39,360
targeting edge computing today

00:02:35,120 --> 00:02:43,599
and they are the iot market

00:02:39,360 --> 00:02:43,599
enterprise telco and cloud

00:02:44,640 --> 00:02:52,160
so why would we look at a bare metal

00:02:49,040 --> 00:02:54,319
deployment for for the edge

00:02:52,160 --> 00:02:56,319
so like we have numerous legacy

00:02:54,319 --> 00:02:57,440
applications that still require to run

00:02:56,319 --> 00:03:00,480
on virtualized

00:02:57,440 --> 00:03:03,760
platforms um you know so

00:03:00,480 --> 00:03:04,560
there are um inherently from that

00:03:03,760 --> 00:03:06,239
perspective

00:03:04,560 --> 00:03:07,840
there are numerous deployment models for

00:03:06,239 --> 00:03:09,840
the edge we've bare metal

00:03:07,840 --> 00:03:11,760
we've fertilized we've power virtualized

00:03:09,840 --> 00:03:14,560
etc

00:03:11,760 --> 00:03:16,239
but edge deployments will need small

00:03:14,560 --> 00:03:18,239
footprints

00:03:16,239 --> 00:03:19,680
and even as we we see the likes of you

00:03:18,239 --> 00:03:21,680
know the cloud capabilities and

00:03:19,680 --> 00:03:23,519
processing moving towards the edge

00:03:21,680 --> 00:03:25,760
we see things like the telco industry

00:03:23,519 --> 00:03:27,280
adapting cloud native patterns and

00:03:25,760 --> 00:03:29,280
applying it to the edge

00:03:27,280 --> 00:03:31,760
that the footprint becomes uh very

00:03:29,280 --> 00:03:32,480
critical um in the previous slide we

00:03:31,760 --> 00:03:34,000
showed

00:03:32,480 --> 00:03:35,920
a depiction of the geographic

00:03:34,000 --> 00:03:38,640
distribution of of um

00:03:35,920 --> 00:03:39,280
age deployments which essentially means

00:03:38,640 --> 00:03:42,879
that you know

00:03:39,280 --> 00:03:45,360
we we need to be very aware of of our

00:03:42,879 --> 00:03:47,040
our surrounding environment for when an

00:03:45,360 --> 00:03:50,239
edge deployment

00:03:47,040 --> 00:03:52,080
is is is modeled there you know so

00:03:50,239 --> 00:03:53,280
like we don't have the space of a modern

00:03:52,080 --> 00:03:55,519
data center

00:03:53,280 --> 00:03:57,439
uh we have little tolerance for extra

00:03:55,519 --> 00:03:59,200
server capacity like for instance

00:03:57,439 --> 00:04:00,720
virtualization so we need to try and

00:03:59,200 --> 00:04:03,599
avoid that tax if

00:04:00,720 --> 00:04:04,159
if possible and um the lead time for new

00:04:03,599 --> 00:04:07,599
hardware

00:04:04,159 --> 00:04:09,040
at an edge location is very slow so we

00:04:07,599 --> 00:04:12,239
need to ensure that we we

00:04:09,040 --> 00:04:13,680
prime our deployment

00:04:12,239 --> 00:04:16,079
correctly so we get it right the first

00:04:13,680 --> 00:04:19,120
time and

00:04:16,079 --> 00:04:21,120
i think bare metal is is ideal for the

00:04:19,120 --> 00:04:23,120
likes of network functions

00:04:21,120 --> 00:04:24,800
that really require that deterministic

00:04:23,120 --> 00:04:26,960
and predictable performance

00:04:24,800 --> 00:04:28,800
you know and why why is that why is bare

00:04:26,960 --> 00:04:31,280
metal a good choice for for network

00:04:28,800 --> 00:04:32,479
for network functions as we transition

00:04:31,280 --> 00:04:35,199
from the

00:04:32,479 --> 00:04:38,560
the the vnf world to the cnf world or we

00:04:35,199 --> 00:04:40,639
move you know legacy vnf's and orcs

00:04:38,560 --> 00:04:42,080
in something like kubernetes well we

00:04:40,639 --> 00:04:43,600
have full access to the hardware which

00:04:42,080 --> 00:04:45,440
which is fantastic

00:04:43,600 --> 00:04:47,280
um by by virtue of the fact that we have

00:04:45,440 --> 00:04:48,720
full access we automatically have a

00:04:47,280 --> 00:04:49,840
reduction in the amount of resources

00:04:48,720 --> 00:04:52,479
that we need

00:04:49,840 --> 00:04:53,759
so we we look at this scale-up model

00:04:52,479 --> 00:04:57,040
where we can scale up the the

00:04:53,759 --> 00:05:00,080
capabilities of our bare metal platform

00:04:57,040 --> 00:05:02,639
versus a scale out model

00:05:00,080 --> 00:05:03,919
and and i think this aligns nicely with

00:05:02,639 --> 00:05:07,039
the smaller footprint so

00:05:03,919 --> 00:05:08,639
we we scale up as opposed to out we also

00:05:07,039 --> 00:05:11,360
have options to leverage accelerators

00:05:08,639 --> 00:05:14,400
like fpgas or qt or gpus

00:05:11,360 --> 00:05:16,880
for more types of performance gains

00:05:14,400 --> 00:05:18,080
and for more acceleration options and

00:05:16,880 --> 00:05:20,720
with bare metal

00:05:18,080 --> 00:05:23,199
i i'm a firm believer that we were

00:05:20,720 --> 00:05:25,039
capable of generating higher throughput

00:05:23,199 --> 00:05:27,039
lower latency and superior performance

00:05:25,039 --> 00:05:28,160
and this pretty much aligns with the 5g

00:05:27,039 --> 00:05:29,280
promise

00:05:28,160 --> 00:05:31,440
and even the edge deployment

00:05:29,280 --> 00:05:32,400
requirements themselves but another key

00:05:31,440 --> 00:05:36,840
aspect to

00:05:32,400 --> 00:05:40,160
why bare metal is um very

00:05:36,840 --> 00:05:42,160
um applicable to the edge

00:05:40,160 --> 00:05:43,600
is it's it's more aligned with uh

00:05:42,160 --> 00:05:45,840
dynamic aspects

00:05:43,600 --> 00:05:47,520
you know we we don't have you know taxes

00:05:45,840 --> 00:05:48,720
like the virtualization aspect

00:05:47,520 --> 00:05:50,960
we don't have you know static

00:05:48,720 --> 00:05:53,919
figurations that need to be in place

00:05:50,960 --> 00:05:54,880
um when it comes to the bare metal we

00:05:53,919 --> 00:05:57,520
can

00:05:54,880 --> 00:05:58,560
provision our our system configure our

00:05:57,520 --> 00:06:01,520
host options

00:05:58,560 --> 00:06:03,199
have our os running and then we have a

00:06:01,520 --> 00:06:05,440
number of runtimes in place then

00:06:03,199 --> 00:06:06,720
that provide abstractions around the the

00:06:05,440 --> 00:06:08,400
governing software that's going to run

00:06:06,720 --> 00:06:09,919
on that particular platform and these

00:06:08,400 --> 00:06:13,120
components can be swapped

00:06:09,919 --> 00:06:15,280
easily and this facilitates you know

00:06:13,120 --> 00:06:16,639
infrastructural changes with little side

00:06:15,280 --> 00:06:20,639
effects to applications

00:06:16,639 --> 00:06:23,759
so i do believe that the age is um

00:06:20,639 --> 00:06:25,840
the edges uh is our bare metal sorry is

00:06:23,759 --> 00:06:27,759
prime for for edge deployments

00:06:25,840 --> 00:06:29,759
so my key takeaway is that the bare

00:06:27,759 --> 00:06:30,960
metal edge is better designed to address

00:06:29,759 --> 00:06:32,319
the needs of telco

00:06:30,960 --> 00:06:34,319
and can deliver on the speed and

00:06:32,319 --> 00:06:35,120
performance required by 5g solutions

00:06:34,319 --> 00:06:38,800
today

00:06:35,120 --> 00:06:40,720
and in the future so

00:06:38,800 --> 00:06:42,080
we have edge we have bare metal so how

00:06:40,720 --> 00:06:43,039
does kubernetes fit into the picture

00:06:42,080 --> 00:06:45,120
here

00:06:43,039 --> 00:06:46,880
let's maybe examine some some trends out

00:06:45,120 --> 00:06:47,520
there today so forecasters are

00:06:46,880 --> 00:06:50,400
predicting

00:06:47,520 --> 00:06:50,720
huge increases in edge computing and

00:06:50,400 --> 00:06:52,479
this

00:06:50,720 --> 00:06:54,720
essentially is down to the fact that

00:06:52,479 --> 00:06:55,440
there are a sheer quantity of edge

00:06:54,720 --> 00:06:57,440
instances

00:06:55,440 --> 00:06:59,199
compared to centralized cloud servers

00:06:57,440 --> 00:07:00,080
and these edge workloads will continue

00:06:59,199 --> 00:07:01,360
to rise

00:07:00,080 --> 00:07:03,199
they'll grow more complex and they'll

00:07:01,360 --> 00:07:06,880
become more demanding

00:07:03,199 --> 00:07:10,240
so when this when we get into this

00:07:06,880 --> 00:07:11,759
uh particular um arena

00:07:10,240 --> 00:07:14,000
you know infrastructure and platform

00:07:11,759 --> 00:07:16,960
resources need careful management

00:07:14,000 --> 00:07:18,720
you know so we need to be mindful of of

00:07:16,960 --> 00:07:20,240
you know how we manage these aspects to

00:07:18,720 --> 00:07:22,720
ensure that we can meet

00:07:20,240 --> 00:07:24,160
the requirements of edge workloads and

00:07:22,720 --> 00:07:26,160
kubernetes is going to play a

00:07:24,160 --> 00:07:27,360
very critical role in this particular

00:07:26,160 --> 00:07:29,360
space

00:07:27,360 --> 00:07:30,639
because inherited kubernetes is the

00:07:29,360 --> 00:07:32,560
ability to abstract

00:07:30,639 --> 00:07:34,000
the infrastructure capabilities while

00:07:32,560 --> 00:07:36,400
still providing a robust

00:07:34,000 --> 00:07:37,120
and scalable platform like this

00:07:36,400 --> 00:07:39,759
essentially is

00:07:37,120 --> 00:07:41,759
is perfect for the likes of dh because

00:07:39,759 --> 00:07:43,759
kubernetes doesn't really

00:07:41,759 --> 00:07:46,080
know our care about whether it's going

00:07:43,759 --> 00:07:47,520
to target you know a cloud deployment or

00:07:46,080 --> 00:07:48,400
an on-prem deployment or an edge

00:07:47,520 --> 00:07:50,639
deployment

00:07:48,400 --> 00:07:51,599
you know it's it's it's one of its key

00:07:50,639 --> 00:07:52,560
strengths is

00:07:51,599 --> 00:07:54,879
the abstraction around the

00:07:52,560 --> 00:07:58,560
infrastructural aspects you know so so

00:07:54,879 --> 00:08:02,000
with this in place

00:07:58,560 --> 00:08:04,720
how do we how do we ensure that

00:08:02,000 --> 00:08:06,000
we can leverage the edge platform to to

00:08:04,720 --> 00:08:07,919
do

00:08:06,000 --> 00:08:09,440
um what it what it's meant to do

00:08:07,919 --> 00:08:10,800
essentially you know

00:08:09,440 --> 00:08:12,960
or in terms of how do we get the best

00:08:10,800 --> 00:08:15,120
out of an edge deployment

00:08:12,960 --> 00:08:16,720
so what we need to do is we need to

00:08:15,120 --> 00:08:18,560
start thinking differently

00:08:16,720 --> 00:08:21,120
you know we need to be aware of the

00:08:18,560 --> 00:08:22,639
boundaries and separate out concerns

00:08:21,120 --> 00:08:25,440
and to achieve that we can look at

00:08:22,639 --> 00:08:27,599
things like disaggregation distribution

00:08:25,440 --> 00:08:29,120
we need to look at how we we manage our

00:08:27,599 --> 00:08:31,919
resources on our platforms

00:08:29,120 --> 00:08:32,719
so we get the best out of our platform

00:08:31,919 --> 00:08:34,000
and

00:08:32,719 --> 00:08:35,760
we need to ensure that we have

00:08:34,000 --> 00:08:36,080
instrumentation built in from the ground

00:08:35,760 --> 00:08:38,159
up

00:08:36,080 --> 00:08:39,440
so that we do have observability

00:08:38,159 --> 00:08:42,560
capabilities in place

00:08:39,440 --> 00:08:45,920
that allow us to collect process

00:08:42,560 --> 00:08:49,200
learn and even optimize so kubernetes

00:08:45,920 --> 00:08:52,320
is is going to be um a big a big player

00:08:49,200 --> 00:08:55,120
in the in the age arena

00:08:52,320 --> 00:08:56,480
and and one area uh in particular that i

00:08:55,120 --> 00:08:57,120
would like to focus on from an edge

00:08:56,480 --> 00:08:59,519
perspective

00:08:57,120 --> 00:09:00,399
is the the kubernetes networking model

00:08:59,519 --> 00:09:02,160
um so

00:09:00,399 --> 00:09:03,760
the networking model today in kubernetes

00:09:02,160 --> 00:09:06,000
has some simple requirements

00:09:03,760 --> 00:09:07,440
all pods and nodes can communicate with

00:09:06,000 --> 00:09:09,279
all pods without nat

00:09:07,440 --> 00:09:11,600
and the ip that a pod sees itself as is

00:09:09,279 --> 00:09:14,320
the same ip that others see it as

00:09:11,600 --> 00:09:15,760
you know so this is very primitive to to

00:09:14,320 --> 00:09:17,519
kubernetes networking

00:09:15,760 --> 00:09:18,959
but that hasn't stopped advanced

00:09:17,519 --> 00:09:20,560
networking models

00:09:18,959 --> 00:09:22,160
with complex properties being deployed

00:09:20,560 --> 00:09:24,720
in kubernetes all the time

00:09:22,160 --> 00:09:26,399
and what do i mean by complex properties

00:09:24,720 --> 00:09:27,360
i mean things like you know tunnels and

00:09:26,399 --> 00:09:30,800
overlays

00:09:27,360 --> 00:09:31,600
you know uh advanced sidecar meshes

00:09:30,800 --> 00:09:34,320
which

00:09:31,600 --> 00:09:35,040
are sorry with advanced service meshes

00:09:34,320 --> 00:09:38,240
with um

00:09:35,040 --> 00:09:39,600
solid car deployments um i ipsec and

00:09:38,240 --> 00:09:41,680
zero trust

00:09:39,600 --> 00:09:43,519
and we have data plane technologies then

00:09:41,680 --> 00:09:46,080
from the

00:09:43,519 --> 00:09:46,800
the low latency high performance domain

00:09:46,080 --> 00:09:51,200
so things like

00:09:46,800 --> 00:09:53,920
dpdk and sriv etc and then

00:09:51,200 --> 00:09:55,200
pertinent to telco then are multiple

00:09:53,920 --> 00:09:58,160
network interfaces

00:09:55,200 --> 00:10:00,000
required on a pod and remember that

00:09:58,160 --> 00:10:01,200
kubernetes only supports a single

00:10:00,000 --> 00:10:02,160
interface from a control plane

00:10:01,200 --> 00:10:05,360
perspective

00:10:02,160 --> 00:10:08,640
and any other interfaces um

00:10:05,360 --> 00:10:10,160
available via the pod are not visible to

00:10:08,640 --> 00:10:12,000
the kubernetes control plane

00:10:10,160 --> 00:10:14,000
you know so my point here is that

00:10:12,000 --> 00:10:16,880
kubernetes networking has advanced

00:10:14,000 --> 00:10:18,880
as the years have rolled on um and as

00:10:16,880 --> 00:10:21,120
new um

00:10:18,880 --> 00:10:23,040
let's say workload types have onboarded

00:10:21,120 --> 00:10:24,399
to the kubernetes platform

00:10:23,040 --> 00:10:26,880
you know so like these type of

00:10:24,399 --> 00:10:29,120
properties require platform resources to

00:10:26,880 --> 00:10:32,000
deliver under respective claims

00:10:29,120 --> 00:10:33,839
so let's take an example of um oven for

00:10:32,000 --> 00:10:37,440
kubernetes

00:10:33,839 --> 00:10:41,120
so if we see here uh what's the the

00:10:37,440 --> 00:10:42,399
the idea here is that um i want to try

00:10:41,120 --> 00:10:46,320
and highlight that

00:10:42,399 --> 00:10:49,120
there there are complexities involved in

00:10:46,320 --> 00:10:50,880
provisioning a kubernetes network to

00:10:49,120 --> 00:10:54,640
ensure that we have connectivity

00:10:50,880 --> 00:10:54,640
that we can traffic can be

00:10:54,880 --> 00:10:59,440
directed to egress or we can accept

00:10:57,760 --> 00:11:01,120
traffic on ingress and things like that

00:10:59,440 --> 00:11:03,120
we have you know network policies in

00:11:01,120 --> 00:11:06,240
place so and we with a whole

00:11:03,120 --> 00:11:08,000
plethora of operations and behavior

00:11:06,240 --> 00:11:09,680
that are defined from a networking

00:11:08,000 --> 00:11:11,760
perspective you know so

00:11:09,680 --> 00:11:14,320
like even in here just provision a

00:11:11,760 --> 00:11:16,079
simple pod with oven

00:11:14,320 --> 00:11:18,320
and to ensure that we have the the right

00:11:16,079 --> 00:11:20,320
integration with ovs

00:11:18,320 --> 00:11:23,680
we have three streams of work we've got

00:11:20,320 --> 00:11:28,560
the the kubernetes pod creation flow

00:11:23,680 --> 00:11:30,320
which is essentially the one to four

00:11:28,560 --> 00:11:32,079
or at least the the roman numeral

00:11:30,320 --> 00:11:34,240
version uh we have

00:11:32,079 --> 00:11:35,600
the the network settings generation flow

00:11:34,240 --> 00:11:37,279
and then we have the network settings

00:11:35,600 --> 00:11:39,200
application flow

00:11:37,279 --> 00:11:40,880
so like a lot and you will see that

00:11:39,200 --> 00:11:42,160
there are a number of different

00:11:40,880 --> 00:11:44,240
contenders

00:11:42,160 --> 00:11:46,320
in the networking space for kubernetes

00:11:44,240 --> 00:11:47,839
you know we've got other sdn controllers

00:11:46,320 --> 00:11:50,560
that you know will have

00:11:47,839 --> 00:11:51,680
um equally as complex properties and

00:11:50,560 --> 00:11:54,079
configurations that

00:11:51,680 --> 00:11:54,839
they need to deploy and manage and and

00:11:54,079 --> 00:11:58,720
you know

00:11:54,839 --> 00:12:00,720
they these are are absolutely critical

00:11:58,720 --> 00:12:01,920
for different types of applications to

00:12:00,720 --> 00:12:03,600
function correctly

00:12:01,920 --> 00:12:05,760
you know so kubernetes is not all that

00:12:03,600 --> 00:12:07,120
prescriptive in terms of

00:12:05,760 --> 00:12:09,360
what it mandates from a networking

00:12:07,120 --> 00:12:11,279
perspective but we still need the extra

00:12:09,360 --> 00:12:13,200
complexity and characteristics of the

00:12:11,279 --> 00:12:14,800
sdn controllers that are employed today

00:12:13,200 --> 00:12:16,320
to ensure that we can meet the demands

00:12:14,800 --> 00:12:18,959
of the workloads that are now running on

00:12:16,320 --> 00:12:18,959
kubernetes

00:12:19,279 --> 00:12:24,000
and and the another key point here is

00:12:22,000 --> 00:12:27,120
that change is is inevitable networking

00:12:24,000 --> 00:12:28,560
architectures are continuing to evolve

00:12:27,120 --> 00:12:31,440
and when they evolve they become even

00:12:28,560 --> 00:12:34,480
more complex this is already happening

00:12:31,440 --> 00:12:35,920
and it's the edge will be targeted with

00:12:34,480 --> 00:12:39,120
these type of

00:12:35,920 --> 00:12:40,240
complex networking deployments you know

00:12:39,120 --> 00:12:41,279
we've got things like network

00:12:40,240 --> 00:12:43,279
observability

00:12:41,279 --> 00:12:44,720
we've got things like um artificial

00:12:43,279 --> 00:12:46,399
intelligence and machine learning

00:12:44,720 --> 00:12:48,480
we've got service assurance in terms of

00:12:46,399 --> 00:12:49,760
the the whole closed loop model

00:12:48,480 --> 00:12:52,639
you know and these these kind of

00:12:49,760 --> 00:12:55,680
constructs require extra processing

00:12:52,639 --> 00:12:59,040
the delay they'll need um

00:12:55,680 --> 00:12:59,760
much more time on on the cpu and access

00:12:59,040 --> 00:13:01,040
to memory

00:12:59,760 --> 00:13:03,760
and there'll be a lot more going over

00:13:01,040 --> 00:13:05,600
the bosses as

00:13:03,760 --> 00:13:07,519
compared to the likes of you know very

00:13:05,600 --> 00:13:10,480
simple networking requirements

00:13:07,519 --> 00:13:11,360
so we need to be careful um when this

00:13:10,480 --> 00:13:13,360
happens because

00:13:11,360 --> 00:13:15,440
the networking models are evolving the

00:13:13,360 --> 00:13:17,839
computations are also getting bigger

00:13:15,440 --> 00:13:18,720
but we what we see here is that we see

00:13:17,839 --> 00:13:21,600
um an

00:13:18,720 --> 00:13:22,480
explosion in bandwidth capabilities we

00:13:21,600 --> 00:13:24,480
see you know an

00:13:22,480 --> 00:13:25,839
increase in the amount of traffic that

00:13:24,480 --> 00:13:28,320
needs to be processed

00:13:25,839 --> 00:13:30,320
and this is kind of disproportionate to

00:13:28,320 --> 00:13:31,680
the the amount of resources available on

00:13:30,320 --> 00:13:34,480
our platform

00:13:31,680 --> 00:13:35,040
you know so while the the pipeline gets

00:13:34,480 --> 00:13:37,519
bigger

00:13:35,040 --> 00:13:38,320
while our fabrics increase our bandwidth

00:13:37,519 --> 00:13:40,639
increases

00:13:38,320 --> 00:13:43,199
uh the amount of traffic increases our

00:13:40,639 --> 00:13:46,240
platforms are are kind of struggling now

00:13:43,199 --> 00:13:48,720
to keep up to ensure that we can still

00:13:46,240 --> 00:13:51,120
provide that deterministic performance

00:13:48,720 --> 00:13:52,320
and uh abide by the the slas that have

00:13:51,120 --> 00:13:56,160
been agreed to

00:13:52,320 --> 00:13:57,120
now so why would we utilize our platform

00:13:56,160 --> 00:13:59,040
resources for

00:13:57,120 --> 00:14:01,600
let's what we'll call infrastructural

00:13:59,040 --> 00:14:03,920
boilerplate if we don't have to

00:14:01,600 --> 00:14:05,120
so we do have options in terms of

00:14:03,920 --> 00:14:06,959
disaggregation

00:14:05,120 --> 00:14:08,480
where we can leverage the likes of

00:14:06,959 --> 00:14:10,720
hardware offloads

00:14:08,480 --> 00:14:12,320
and and this i think is something that

00:14:10,720 --> 00:14:16,240
the kubernetes networking model

00:14:12,320 --> 00:14:19,760
can can easily benefit from

00:14:16,240 --> 00:14:20,160
so from a networking perspective you

00:14:19,760 --> 00:14:24,000
know

00:14:20,160 --> 00:14:26,560
we have uh smartnics are being discussed

00:14:24,000 --> 00:14:27,680
um and they're they're being targeted to

00:14:26,560 --> 00:14:30,240
things like

00:14:27,680 --> 00:14:31,680
the the edge they've been targeted to

00:14:30,240 --> 00:14:33,199
things like the cloud they're being

00:14:31,680 --> 00:14:36,320
targeted for things like

00:14:33,199 --> 00:14:36,959
um let's say on-prem and hybrid models

00:14:36,320 --> 00:14:39,199
and

00:14:36,959 --> 00:14:40,000
really what do we actually mean by by a

00:14:39,199 --> 00:14:42,240
smartnic

00:14:40,000 --> 00:14:43,120
you know and and how does smartnic

00:14:42,240 --> 00:14:46,959
afford us

00:14:43,120 --> 00:14:49,519
the opportunities to accelerate um

00:14:46,959 --> 00:14:51,199
the the networking aspects or even not

00:14:49,519 --> 00:14:53,120
just the networking assets but

00:14:51,199 --> 00:14:54,240
multiple aspects of the the entire

00:14:53,120 --> 00:14:56,160
workflow

00:14:54,240 --> 00:14:57,440
so you know if you look for a definition

00:14:56,160 --> 00:14:59,680
of smartnic

00:14:57,440 --> 00:15:01,120
you know it's hard to settle on any one

00:14:59,680 --> 00:15:04,639
particular definition

00:15:01,120 --> 00:15:07,040
so i i've put in um a number of

00:15:04,639 --> 00:15:08,480
definitions that you you should you will

00:15:07,040 --> 00:15:09,920
probably come across

00:15:08,480 --> 00:15:11,680
if you start researching the likes of

00:15:09,920 --> 00:15:12,399
what smartnics are i've come across

00:15:11,680 --> 00:15:15,040
things like

00:15:12,399 --> 00:15:17,120
network attached acceleration platforms

00:15:15,040 --> 00:15:20,639
a new processing environment

00:15:17,120 --> 00:15:22,959
um a target for a network pipeline

00:15:20,639 --> 00:15:25,120
a programmable data plane a location to

00:15:22,959 --> 00:15:26,399
run infrastructure management components

00:15:25,120 --> 00:15:28,480
let's move some of the control plane

00:15:26,399 --> 00:15:32,240
aspects to to a smartnic

00:15:28,480 --> 00:15:33,600
and another categorization or not

00:15:32,240 --> 00:15:37,600
categorization but let's say

00:15:33,600 --> 00:15:38,560
another type of target for the smartnic

00:15:37,600 --> 00:15:42,079
then is

00:15:38,560 --> 00:15:44,480
a guarantee for the network integrity so

00:15:42,079 --> 00:15:45,920
move the the root of trust directly to

00:15:44,480 --> 00:15:48,880
smartnic hardware

00:15:45,920 --> 00:15:49,600
so let's let's provision our networking

00:15:48,880 --> 00:15:52,639
model

00:15:49,600 --> 00:15:53,600
let's provision um you know all of our

00:15:52,639 --> 00:15:56,399
policies

00:15:53,600 --> 00:15:58,320
and enforce them at the smart neck layer

00:15:56,399 --> 00:16:01,680
and free up our platforms

00:15:58,320 --> 00:16:03,600
for for processing so we take the the

00:16:01,680 --> 00:16:04,880
the trust in the security model and we

00:16:03,600 --> 00:16:07,680
move it down a layer

00:16:04,880 --> 00:16:08,240
into the actual smart mix so this allows

00:16:07,680 --> 00:16:11,839
you know

00:16:08,240 --> 00:16:14,560
clouded mains assisted means to program

00:16:11,839 --> 00:16:15,839
the the networking model so that tenants

00:16:14,560 --> 00:16:18,240
can can operate

00:16:15,839 --> 00:16:20,240
uh without breaching uh security

00:16:18,240 --> 00:16:22,000
boundaries

00:16:20,240 --> 00:16:23,279
but also when we look at smartnix you

00:16:22,000 --> 00:16:26,160
know we see

00:16:23,279 --> 00:16:28,639
um different variations in terms of the

00:16:26,160 --> 00:16:30,639
categorization of smartnics we see

00:16:28,639 --> 00:16:31,920
system on chips and then we see discrete

00:16:30,639 --> 00:16:35,120
versions

00:16:31,920 --> 00:16:37,759
um you know so like this particular

00:16:35,120 --> 00:16:38,880
diagram here is the what we're trying to

00:16:37,759 --> 00:16:41,279
say really is

00:16:38,880 --> 00:16:42,639
the degree of smartness may vary right

00:16:41,279 --> 00:16:44,240
so we need to look at things like

00:16:42,639 --> 00:16:45,920
configurability we need to look at you

00:16:44,240 --> 00:16:47,680
know offload capabilities

00:16:45,920 --> 00:16:49,440
we need to look at flexibility and

00:16:47,680 --> 00:16:52,959
efficiency also

00:16:49,440 --> 00:16:55,279
and flexibility and efficiency

00:16:52,959 --> 00:16:56,079
um you need a delicate balance between

00:16:55,279 --> 00:16:58,800
both of them

00:16:56,079 --> 00:17:00,800
both are required so if we look at like

00:16:58,800 --> 00:17:02,320
the system on chip model

00:17:00,800 --> 00:17:04,480
we have like the likes of maybe

00:17:02,320 --> 00:17:05,919
programmable cores if we're using an

00:17:04,480 --> 00:17:07,839
asic

00:17:05,919 --> 00:17:11,520
we've got you know fpga system on chip

00:17:07,839 --> 00:17:13,520
which allows us to do configurable logic

00:17:11,520 --> 00:17:14,799
if we move across and we look at some of

00:17:13,520 --> 00:17:18,000
the discrete models

00:17:14,799 --> 00:17:20,160
we have asics that are more limited in

00:17:18,000 --> 00:17:22,640
terms of their flexibility

00:17:20,160 --> 00:17:23,439
you know it's hard to change them and

00:17:22,640 --> 00:17:26,640
then we have

00:17:23,439 --> 00:17:30,160
you know combinations like asic and fpga

00:17:26,640 --> 00:17:32,400
which provides the efficiency and the

00:17:30,160 --> 00:17:35,039
configurability or flexibility

00:17:32,400 --> 00:17:37,600
required and then we maybe have like a

00:17:35,039 --> 00:17:40,080
full-blown fpga

00:17:37,600 --> 00:17:41,440
but you know to do this like both of

00:17:40,080 --> 00:17:43,280
these are required in terms of

00:17:41,440 --> 00:17:46,640
flexibility and efficiency

00:17:43,280 --> 00:17:48,320
um so and with this we can look at

00:17:46,640 --> 00:17:51,280
things like you know performance

00:17:48,320 --> 00:17:52,720
uh security and and offloads and these

00:17:51,280 --> 00:17:55,200
are the type of things that

00:17:52,720 --> 00:17:56,559
you know we can move to a smart nick uh

00:17:55,200 --> 00:17:58,640
to uh to allow

00:17:56,559 --> 00:18:00,559
kubernetes to target what it needs to

00:17:58,640 --> 00:18:01,520
target in terms of ensuring that

00:18:00,559 --> 00:18:03,840
workloads

00:18:01,520 --> 00:18:05,120
are running and in their pods or in

00:18:03,840 --> 00:18:08,160
their containers in their pods

00:18:05,120 --> 00:18:09,679
on their platforms and this type of you

00:18:08,160 --> 00:18:12,320
know

00:18:09,679 --> 00:18:14,000
employment of smartnix really is

00:18:12,320 --> 00:18:16,880
conforming to what we call like

00:18:14,000 --> 00:18:18,960
a hybrid computing model where we have

00:18:16,880 --> 00:18:21,840
uh cores available on our platform

00:18:18,960 --> 00:18:23,360
with you know memory and storage and we

00:18:21,840 --> 00:18:27,679
also have

00:18:23,360 --> 00:18:30,240
cores and accelerators

00:18:27,679 --> 00:18:30,960
via the the smartnix and these are like

00:18:30,240 --> 00:18:33,679
you know the

00:18:30,960 --> 00:18:35,440
domain specific architectures and the

00:18:33,679 --> 00:18:36,720
domain in our case for this particular

00:18:35,440 --> 00:18:39,200
talk is is around

00:18:36,720 --> 00:18:40,320
the the networking processing um

00:18:39,200 --> 00:18:42,160
capabilities

00:18:40,320 --> 00:18:44,480
required for you know especially the

00:18:42,160 --> 00:18:47,679
telco domains

00:18:44,480 --> 00:18:50,320
so smartnics are um essentially

00:18:47,679 --> 00:18:51,600
they prefer to to keep it abstract for

00:18:50,320 --> 00:18:54,960
this particular talk let's

00:18:51,600 --> 00:18:58,640
i'm going to let's say

00:18:54,960 --> 00:19:01,840
define smartnix as um a platform

00:18:58,640 --> 00:19:03,200
that has uh processing capabilities and

00:19:01,840 --> 00:19:06,080
offload offload acceleration

00:19:03,200 --> 00:19:06,080
capabilities also

00:19:06,480 --> 00:19:11,600
so we spoke about um the boundaries

00:19:09,679 --> 00:19:13,679
you know in terms of what our platforms

00:19:11,600 --> 00:19:15,840
at the edge should do

00:19:13,679 --> 00:19:17,760
and you know we spoke about how we could

00:19:15,840 --> 00:19:21,120
uh provide some disaggregation

00:19:17,760 --> 00:19:23,360
at the edge so the

00:19:21,120 --> 00:19:25,440
you know the edge you know based on the

00:19:23,360 --> 00:19:26,080
the first uh diagram in the in the first

00:19:25,440 --> 00:19:27,280
slide

00:19:26,080 --> 00:19:29,840
it doesn't have an abundance of

00:19:27,280 --> 00:19:31,679
resources it's not like a data center

00:19:29,840 --> 00:19:32,960
right as we said it doesn't it's

00:19:31,679 --> 00:19:35,039
constrained

00:19:32,960 --> 00:19:37,120
um and but but that doesn't stop us

00:19:35,039 --> 00:19:38,559
wanting to bin pack as much workload as

00:19:37,120 --> 00:19:41,120
possible at the edge

00:19:38,559 --> 00:19:41,840
you know so to deliver on what edge

00:19:41,120 --> 00:19:43,840
computing

00:19:41,840 --> 00:19:45,679
claims to be able to deliver you know so

00:19:43,840 --> 00:19:47,520
we want to provide predictable models

00:19:45,679 --> 00:19:49,679
for deterministic performance

00:19:47,520 --> 00:19:51,200
but how you know how are we going to

00:19:49,679 --> 00:19:53,600
achieve this how do we

00:19:51,200 --> 00:19:55,760
disaggregate concerns from our main

00:19:53,600 --> 00:19:58,480
platforms and move it towards

00:19:55,760 --> 00:19:59,840
um or let's say sorry alleviate the

00:19:58,480 --> 00:20:01,840
pressure on the platforms

00:19:59,840 --> 00:20:04,480
and move it elsewhere well we want to

00:20:01,840 --> 00:20:06,960
leverage a sidecar platform but

00:20:04,480 --> 00:20:07,840
apply that to the infrastructure as was

00:20:06,960 --> 00:20:10,880
done for

00:20:07,840 --> 00:20:12,799
let's say the layer 4 to layer 7 type

00:20:10,880 --> 00:20:13,919
applications with the service mesh

00:20:12,799 --> 00:20:16,240
architecture

00:20:13,919 --> 00:20:18,400
by deploying you know side cards that

00:20:16,240 --> 00:20:20,880
you know take care of the data plane

00:20:18,400 --> 00:20:22,480
within the pods we also want to leverage

00:20:20,880 --> 00:20:24,159
the same concept and apply it to the

00:20:22,480 --> 00:20:26,720
infrastructure

00:20:24,159 --> 00:20:27,679
if we do that what does that yield for

00:20:26,720 --> 00:20:29,520
us

00:20:27,679 --> 00:20:31,200
it means network flows can be programmed

00:20:29,520 --> 00:20:33,440
and offloaded so we have

00:20:31,200 --> 00:20:34,559
things like ovs traffic control we have

00:20:33,440 --> 00:20:36,720
rt flow for

00:20:34,559 --> 00:20:38,240
things like dpdk we can offload these

00:20:36,720 --> 00:20:40,240
directly onto our

00:20:38,240 --> 00:20:41,840
let's say our smart link in this case

00:20:40,240 --> 00:20:43,360
traffic can be forwarded between the

00:20:41,840 --> 00:20:45,600
the physical functions the virtual

00:20:43,360 --> 00:20:48,400
functions without going through software

00:20:45,600 --> 00:20:49,360
so we we have acceleration almost

00:20:48,400 --> 00:20:52,159
immediately

00:20:49,360 --> 00:20:53,120
um so we have no software in play it's

00:20:52,159 --> 00:20:55,919
purely a

00:20:53,120 --> 00:20:57,679
a hardware concern we have in-line

00:20:55,919 --> 00:20:58,960
processing that can stay in the nick

00:20:57,679 --> 00:21:01,039
and then look aside and directly

00:20:58,960 --> 00:21:01,679
transmit to the target so no data

00:21:01,039 --> 00:21:04,559
movement

00:21:01,679 --> 00:21:06,080
back or forward uh within with the host

00:21:04,559 --> 00:21:08,000
so we've eliminated that and we've

00:21:06,080 --> 00:21:09,039
created that boundary that i've been uh

00:21:08,000 --> 00:21:12,000
speaking about

00:21:09,039 --> 00:21:14,080
so it's still in the nic so our platform

00:21:12,000 --> 00:21:16,159
and our utilization of our cores

00:21:14,080 --> 00:21:19,280
is very very low with this type of

00:21:16,159 --> 00:21:20,960
offload or this type of capability

00:21:19,280 --> 00:21:22,640
we can also look at programming our

00:21:20,960 --> 00:21:23,919
security policies and having them

00:21:22,640 --> 00:21:25,679
managed by the smart nic

00:21:23,919 --> 00:21:27,360
so we can have our access control lists

00:21:25,679 --> 00:21:28,640
managed there we can have our network

00:21:27,360 --> 00:21:31,039
policies managed there

00:21:28,640 --> 00:21:32,480
we can do eppf offloads so we can do

00:21:31,039 --> 00:21:35,679
filtering load balancing

00:21:32,480 --> 00:21:39,440
monitoring etc all of the the

00:21:35,679 --> 00:21:42,799
things that come with the the ebpf

00:21:39,440 --> 00:21:44,000
work or at least ebpf technology and we

00:21:42,799 --> 00:21:47,200
can also then leverage

00:21:44,000 --> 00:21:48,000
the smart lake to deploy observability

00:21:47,200 --> 00:21:50,640
pipelines

00:21:48,000 --> 00:21:51,919
so observability by today's standards is

00:21:50,640 --> 00:21:54,240
very important

00:21:51,919 --> 00:21:55,120
we want to ensure that we so we're

00:21:54,240 --> 00:21:57,600
already in

00:21:55,120 --> 00:21:58,880
what i would call a reactive model where

00:21:57,600 --> 00:22:01,360
we have

00:21:58,880 --> 00:22:02,720
um the standard process of where we

00:22:01,360 --> 00:22:04,799
collect the information

00:22:02,720 --> 00:22:06,000
and we generate some insights and then

00:22:04,799 --> 00:22:08,080
we try and leverage that

00:22:06,000 --> 00:22:10,000
you know so it could be the case that we

00:22:08,080 --> 00:22:10,880
we um we detect that a particular

00:22:10,000 --> 00:22:14,159
network slice

00:22:10,880 --> 00:22:16,640
in 5g scenario isn't

00:22:14,159 --> 00:22:18,640
or is going to run into trouble in terms

00:22:16,640 --> 00:22:21,919
of delivering on its

00:22:18,640 --> 00:22:24,000
its sla so we can use observability

00:22:21,919 --> 00:22:26,559
pipelines to ensure that we

00:22:24,000 --> 00:22:27,039
you know start to provision out a new

00:22:26,559 --> 00:22:29,600
slice

00:22:27,039 --> 00:22:30,799
or that we increase the the capabilities

00:22:29,600 --> 00:22:32,799
or bandwidth available in that

00:22:30,799 --> 00:22:34,640
particular aspect

00:22:32,799 --> 00:22:36,799
but that's that's reactive you know so

00:22:34,640 --> 00:22:38,400
we're still we collect information and

00:22:36,799 --> 00:22:40,320
then we make a decision or we make an

00:22:38,400 --> 00:22:42,000
action based on what we've collected

00:22:40,320 --> 00:22:43,840
but what happens when we want to start

00:22:42,000 --> 00:22:47,440
moving towards

00:22:43,840 --> 00:22:50,000
proactive models where we have

00:22:47,440 --> 00:22:51,520
smart intelligent systems deployed

00:22:50,000 --> 00:22:54,400
sitting on our smartnics

00:22:51,520 --> 00:22:55,600
that are able to over provision as

00:22:54,400 --> 00:22:58,880
needed

00:22:55,600 --> 00:23:01,760
or we can move pods between

00:22:58,880 --> 00:23:03,120
different locations so all of this again

00:23:01,760 --> 00:23:05,600
is something that

00:23:03,120 --> 00:23:06,240
you know i believe would be come to the

00:23:05,600 --> 00:23:09,760
forefront

00:23:06,240 --> 00:23:12,559
once we we have fully embraced um

00:23:09,760 --> 00:23:14,880
you know edge computing and the the 5g

00:23:12,559 --> 00:23:16,559
solutions that will accompany that

00:23:14,880 --> 00:23:18,320
but the very important point here in

00:23:16,559 --> 00:23:21,679
terms of desegregating

00:23:18,320 --> 00:23:23,679
concerns and processes from the age

00:23:21,679 --> 00:23:26,480
perspective is that

00:23:23,679 --> 00:23:27,280
this shift is not new right we want to

00:23:26,480 --> 00:23:29,840
facilitate

00:23:27,280 --> 00:23:30,559
advancements in networking in kubernetes

00:23:29,840 --> 00:23:32,559
networking

00:23:30,559 --> 00:23:34,880
but without the cost of the extra cpu

00:23:32,559 --> 00:23:38,159
cycles this is a perfect fit for

00:23:34,880 --> 00:23:39,600
for edge scenarios it follows the exact

00:23:38,159 --> 00:23:40,320
same patterns that have been applied

00:23:39,600 --> 00:23:42,000
across

00:23:40,320 --> 00:23:44,640
data centers and clouds for the last

00:23:42,000 --> 00:23:44,640
number of years

00:23:45,520 --> 00:23:48,720
so smartnics provide programmable

00:23:47,760 --> 00:23:50,400
solutions

00:23:48,720 --> 00:23:52,000
we can enhance our overall networking

00:23:50,400 --> 00:23:53,520
model while kubernetes continues to

00:23:52,000 --> 00:23:55,360
orchestrate business value

00:23:53,520 --> 00:23:58,000
and that's the key message here that is

00:23:55,360 --> 00:24:01,440
very applicable for for edge computing

00:23:58,000 --> 00:24:03,679
so now that we you know have um

00:24:01,440 --> 00:24:04,720
opportunities to enhance the networking

00:24:03,679 --> 00:24:07,679
model via

00:24:04,720 --> 00:24:08,400
a smart nic offload and with smart nick

00:24:07,679 --> 00:24:10,320
deployments

00:24:08,400 --> 00:24:12,400
for numerous targets like the adhd

00:24:10,320 --> 00:24:14,799
farage um the cloud

00:24:12,400 --> 00:24:16,840
enterprise etc what other offloads can

00:24:14,799 --> 00:24:19,360
we leverage how how can we also

00:24:16,840 --> 00:24:20,320
disaggregate other aspects maybe even of

00:24:19,360 --> 00:24:22,880
the control plane

00:24:20,320 --> 00:24:24,960
we can use things like you know

00:24:22,880 --> 00:24:26,640
dedicated fpga devices

00:24:24,960 --> 00:24:28,080
quick assist technology for things like

00:24:26,640 --> 00:24:31,279
encryption and compression

00:24:28,080 --> 00:24:35,039
and gpu for for more offloads for

00:24:31,279 --> 00:24:37,919
for graphical for intense processing

00:24:35,039 --> 00:24:39,520
um with graphics or or or even more

00:24:37,919 --> 00:24:41,120
mathematical computations

00:24:39,520 --> 00:24:42,720
like for instance machine learning

00:24:41,120 --> 00:24:44,640
things like that so

00:24:42,720 --> 00:24:46,240
my point here is that data planes can be

00:24:44,640 --> 00:24:47,200
offloaded but so too can control plane

00:24:46,240 --> 00:24:49,360
concerns like

00:24:47,200 --> 00:24:50,320
encryption compression in the case of a

00:24:49,360 --> 00:24:52,880
qet device

00:24:50,320 --> 00:24:53,760
which can offload uh that and save more

00:24:52,880 --> 00:24:57,600
cycles

00:24:53,760 --> 00:25:01,120
so this um embracing of acceleration

00:24:57,600 --> 00:25:04,480
i think is is um of acceleration

00:25:01,120 --> 00:25:07,679
and potential offloads is is paramount

00:25:04,480 --> 00:25:11,120
for um the for edge computing to succeed

00:25:07,679 --> 00:25:14,880
and kuberetti's is um

00:25:11,120 --> 00:25:16,320
um very equipped to handle these type of

00:25:14,880 --> 00:25:18,240
scenarios

00:25:16,320 --> 00:25:19,440
it just what we need to bring to the

00:25:18,240 --> 00:25:21,520
table is

00:25:19,440 --> 00:25:24,240
these particular offload capabilities

00:25:21,520 --> 00:25:26,559
and ensure that we have successful

00:25:24,240 --> 00:25:28,559
orchestration in place which i think is

00:25:26,559 --> 00:25:29,279
is very very possible as smartnics are

00:25:28,559 --> 00:25:30,960
already are

00:25:29,279 --> 00:25:32,559
already deployed today there have been

00:25:30,960 --> 00:25:33,520
numerous talks over the last number of

00:25:32,559 --> 00:25:36,559
kubecons

00:25:33,520 --> 00:25:37,039
around um smartnix and offloading things

00:25:36,559 --> 00:25:39,760
like

00:25:37,039 --> 00:25:41,840
ovs and the cash pad and so on like that

00:25:39,760 --> 00:25:43,120
but this this talk really is about

00:25:41,840 --> 00:25:44,880
enhancing kubernetes

00:25:43,120 --> 00:25:46,880
as as is going to be deployed at the

00:25:44,880 --> 00:25:49,919
edge and how smartnix can

00:25:46,880 --> 00:25:52,799
can provide new opportunities for us as

00:25:49,919 --> 00:25:54,159
can other offload technologies and other

00:25:52,799 --> 00:25:55,440
hardware offloads

00:25:54,159 --> 00:26:00,320
so thank you very much i hope you

00:25:55,440 --> 00:26:00,320

YouTube URL: https://www.youtube.com/watch?v=mJ3nM4lKTO4


