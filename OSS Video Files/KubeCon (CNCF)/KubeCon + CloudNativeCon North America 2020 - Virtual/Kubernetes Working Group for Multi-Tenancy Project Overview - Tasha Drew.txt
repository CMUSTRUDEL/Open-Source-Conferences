Title: Kubernetes Working Group for Multi-Tenancy Project Overview - Tasha Drew
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Kubernetes Working Group for Multi-Tenancy Project Overview - Tasha Drew, VMware, Adrian Ludwin, Google, Fei Guo, Alibaba & Jim Bugwadia, Nirmata 

In this session, the leaders of the Kubernetes Working Group for Multi-Tenancy will quickly go over how you can join the multi-tenancy group, and also do a quick overview of each of the projects we are incubating: the Virtual Cluster Project, the Multi-Tenancy Benchmarks Project, and the Hierarchical Namespace Controller Project. You can visit all of our projects here too: https://github.com/kubernetes-sigs/multi-tenancy/ Got more questions? Join our mailing list via google groups https://groups.google.com/forum/#!forum/kubernetes-wg-multitenancy or talk to us in the #wg-multitenancy channel of the Kubernetes Slack. 

https://sched.co/ekHM
Captions: 
	00:00:01,760 --> 00:00:05,920
hello and welcome to the kubernetes

00:00:04,240 --> 00:00:07,680
working group for multi-tenancy

00:00:05,920 --> 00:00:09,840
today we're going to be doing a project

00:00:07,680 --> 00:00:12,000
overview in which we will cover

00:00:09,840 --> 00:00:13,440
how you can get involved with our

00:00:12,000 --> 00:00:14,080
working group which is part of the

00:00:13,440 --> 00:00:17,279
upstream

00:00:14,080 --> 00:00:17,920
kubernetes community and we will also be

00:00:17,279 --> 00:00:19,920
going over

00:00:17,920 --> 00:00:21,920
some of the three main projects that the

00:00:19,920 --> 00:00:24,160
working group has been working on

00:00:21,920 --> 00:00:25,199
information about how you can use them

00:00:24,160 --> 00:00:26,960
how you can get involved and

00:00:25,199 --> 00:00:29,840
contributing to them

00:00:26,960 --> 00:00:30,160
just to quickly kick off for the working

00:00:29,840 --> 00:00:33,280
group

00:00:30,160 --> 00:00:35,760
the chairs are me i'm tasha drew i

00:00:33,280 --> 00:00:36,640
am the director of product incubation at

00:00:35,760 --> 00:00:38,879
vmware

00:00:36,640 --> 00:00:40,879
i also work on project i used to work on

00:00:38,879 --> 00:00:42,399
project pacific i was responsible for

00:00:40,879 --> 00:00:44,000
launching the tonsi kubernetes grid

00:00:42,399 --> 00:00:46,239
service for vsphere

00:00:44,000 --> 00:00:48,079
my co-chair is sanji vrampal he's a

00:00:46,239 --> 00:00:50,239
principal engineer at cisco

00:00:48,079 --> 00:00:51,199
and then we have the project leads uh on

00:00:50,239 --> 00:00:53,039
this

00:00:51,199 --> 00:00:54,960
um on this presentation today we have

00:00:53,039 --> 00:00:56,719
adrian ludwin from google

00:00:54,960 --> 00:00:58,800
who works on the hierarchical namespace

00:00:56,719 --> 00:01:01,680
controller we have fake woh

00:00:58,800 --> 00:01:04,000
from the virtual clusters uh and tenant

00:01:01,680 --> 00:01:06,240
controller project he's at alibaba

00:01:04,000 --> 00:01:08,080
and then we have jin baguadia who works

00:01:06,240 --> 00:01:10,080
on the multi-tenancy benchmarks and he

00:01:08,080 --> 00:01:12,720
is the founder and ceo at nermata

00:01:10,080 --> 00:01:13,600
um and each of those uh project leads

00:01:12,720 --> 00:01:15,759
will be giving

00:01:13,600 --> 00:01:17,280
a more detailed introduction about

00:01:15,759 --> 00:01:20,400
themselves and the projects

00:01:17,280 --> 00:01:20,400
later in this presentation

00:01:20,720 --> 00:01:24,240
so you may be wondering how you can get

00:01:22,640 --> 00:01:24,880
involved in the multi-tenancy working

00:01:24,240 --> 00:01:27,439
group

00:01:24,880 --> 00:01:28,880
um so for new contributors or people who

00:01:27,439 --> 00:01:30,240
are interested in getting started with

00:01:28,880 --> 00:01:31,759
open source

00:01:30,240 --> 00:01:33,680
what i would my number one

00:01:31,759 --> 00:01:36,320
recommendation is join our google group

00:01:33,680 --> 00:01:38,159
so that's the second link on this slide

00:01:36,320 --> 00:01:39,119
you can go to groups.google.com and just

00:01:38,159 --> 00:01:41,840
search for us for

00:01:39,119 --> 00:01:44,079
working group multi-tenancy kubernetes

00:01:41,840 --> 00:01:45,759
when you join the google group

00:01:44,079 --> 00:01:48,159
that will give you access to our

00:01:45,759 --> 00:01:50,079
documents our meeting agendas

00:01:48,159 --> 00:01:51,600
you'll see links to go and watch our

00:01:50,079 --> 00:01:53,600
meetings that we've posted to

00:01:51,600 --> 00:01:55,600
youtube we'll post a link to this

00:01:53,600 --> 00:01:56,799
presentation um in that same youtube

00:01:55,600 --> 00:02:00,079
channel as well

00:01:56,799 --> 00:02:00,880
um but you will also get a calendar

00:02:00,079 --> 00:02:03,920
invitation

00:02:00,880 --> 00:02:05,280
to all of our meetings and so a lot of

00:02:03,920 --> 00:02:06,399
times people get really confused about

00:02:05,280 --> 00:02:08,239
how to join our meetings we have

00:02:06,399 --> 00:02:10,160
bi-weekly meetings where we go over

00:02:08,239 --> 00:02:11,760
project status you can come and present

00:02:10,160 --> 00:02:14,160
anything you're working on

00:02:11,760 --> 00:02:15,520
by adding it to the agenda or suggesting

00:02:14,160 --> 00:02:17,200
on them on the mailing list that you'd

00:02:15,520 --> 00:02:19,200
like to talk about something

00:02:17,200 --> 00:02:20,480
but that calendar invitation to that

00:02:19,200 --> 00:02:22,239
meeting and the zoom link

00:02:20,480 --> 00:02:23,599
will all come to you if you just join

00:02:22,239 --> 00:02:24,800
our google group so

00:02:23,599 --> 00:02:26,720
if you're not going to do anything else

00:02:24,800 --> 00:02:28,879
but you want to join that

00:02:26,720 --> 00:02:30,480
definitely join the google group it may

00:02:28,879 --> 00:02:31,920
take a few days for that calendar

00:02:30,480 --> 00:02:33,599
invitation to show up

00:02:31,920 --> 00:02:35,440
there's some latency in the system

00:02:33,599 --> 00:02:37,920
adrian's working on it

00:02:35,440 --> 00:02:38,560
google will solve it any day now uh but

00:02:37,920 --> 00:02:40,560
yeah just

00:02:38,560 --> 00:02:41,760
be patient uh i promise you if you join

00:02:40,560 --> 00:02:42,959
the google group you will get that

00:02:41,760 --> 00:02:44,720
invitation

00:02:42,959 --> 00:02:46,160
we're also in the kubernetes slack in

00:02:44,720 --> 00:02:48,840
our multi-tenancy

00:02:46,160 --> 00:02:51,599
uh channel you can join that by going to

00:02:48,840 --> 00:02:53,360
slack.k8s

00:02:51,599 --> 00:02:54,959
and yeah we also have a github repo

00:02:53,360 --> 00:02:56,879
where all of this code is available

00:02:54,959 --> 00:02:58,400
you see that link at the bottom of this

00:02:56,879 --> 00:03:01,200
slide uh so just

00:02:58,400 --> 00:03:02,800
kubernetes dash slit sigs slash

00:03:01,200 --> 00:03:05,680
multi-tenancy

00:03:02,800 --> 00:03:06,720
so yep that's that's how you can find us

00:03:05,680 --> 00:03:09,280
that's you can talk

00:03:06,720 --> 00:03:11,440
with us more we are part of the open

00:03:09,280 --> 00:03:14,319
source community super happy to have

00:03:11,440 --> 00:03:16,400
more people involved more interest and

00:03:14,319 --> 00:03:19,360
new ideas and new projects as well so

00:03:16,400 --> 00:03:23,200
uh yeah join us and now over to uh

00:03:19,360 --> 00:03:25,680
adrian to do a deep dive into hnc

00:03:23,200 --> 00:03:27,680
thanks tasha uh so i'm adrienne i work

00:03:25,680 --> 00:03:28,560
at google waterloo up here in sunny and

00:03:27,680 --> 00:03:31,200
warm canada

00:03:28,560 --> 00:03:32,480
come visit next year and i'll be talking

00:03:31,200 --> 00:03:33,920
a little bit about the hierarchical

00:03:32,480 --> 00:03:34,560
namespace controller which is our

00:03:33,920 --> 00:03:36,640
project

00:03:34,560 --> 00:03:38,319
to add a concept of hierarchy to the

00:03:36,640 --> 00:03:39,280
kubernetes namespaces that you know and

00:03:38,319 --> 00:03:41,680
love

00:03:39,280 --> 00:03:42,400
uh so why would you want to do this well

00:03:41,680 --> 00:03:45,040
the reason

00:03:42,400 --> 00:03:46,239
is that namespaces are the foundations

00:03:45,040 --> 00:03:49,040
for all policies

00:03:46,239 --> 00:03:51,840
in kubernetes so rbac network policies

00:03:49,040 --> 00:03:53,920
quota limit ranges uh and also

00:03:51,840 --> 00:03:55,519
most of the crds that you create will

00:03:53,920 --> 00:03:56,959
have name space scope as well

00:03:55,519 --> 00:03:58,640
unless they're unless they're a

00:03:56,959 --> 00:04:01,599
cluster-wide operator so

00:03:58,640 --> 00:04:02,640
everything really centers around name

00:04:01,599 --> 00:04:05,680
spaces and

00:04:02,640 --> 00:04:07,360
yeah sometimes you can subdivide things

00:04:05,680 --> 00:04:08,720
at a subname space like within a

00:04:07,360 --> 00:04:11,519
namespace i should say

00:04:08,720 --> 00:04:13,439
uh but by and large most of these um

00:04:11,519 --> 00:04:14,000
features either work the best or only

00:04:13,439 --> 00:04:15,680
work

00:04:14,000 --> 00:04:17,840
at the name space level and you can see

00:04:15,680 --> 00:04:18,320
my talk from qcon eu from earlier this

00:04:17,840 --> 00:04:20,799
summer

00:04:18,320 --> 00:04:22,240
that goes into this in more detail so

00:04:20,799 --> 00:04:24,400
namespaces are great but sometimes you

00:04:22,240 --> 00:04:26,639
want policies across namespaces such as

00:04:24,400 --> 00:04:29,120
to represent a tenant who has access to

00:04:26,639 --> 00:04:31,440
multiple namespaces uh in your cluster

00:04:29,120 --> 00:04:33,120
so adding hierarchy namespaces is a

00:04:31,440 --> 00:04:35,199
great way to

00:04:33,120 --> 00:04:36,240
enforce this idea of ownership and

00:04:35,199 --> 00:04:37,840
express tenancy

00:04:36,240 --> 00:04:39,520
and also allows you to create

00:04:37,840 --> 00:04:40,479
self-service what we call sub-name

00:04:39,520 --> 00:04:42,080
spaces

00:04:40,479 --> 00:04:43,520
which give you permission to create a

00:04:42,080 --> 00:04:44,720
namespace even if you don't have cluster

00:04:43,520 --> 00:04:46,160
level privileges

00:04:44,720 --> 00:04:47,840
all while adding as little as possible

00:04:46,160 --> 00:04:50,000
to core kubernetes so

00:04:47,840 --> 00:04:51,120
agency it's a great solution if lots of

00:04:50,000 --> 00:04:53,360
teams want to share

00:04:51,120 --> 00:04:55,360
a single cluster uh and if you combine

00:04:53,360 --> 00:04:57,840
with a git ops solution to uh to

00:04:55,360 --> 00:04:58,800
spread policies across multiple clusters

00:04:57,840 --> 00:04:59,600
that's when it works well in a

00:04:58,800 --> 00:05:02,000
multi-cluster

00:04:59,600 --> 00:05:03,440
environment as well so how does this

00:05:02,000 --> 00:05:05,520
work well what it does is it

00:05:03,440 --> 00:05:07,360
creates a little agency gives you this

00:05:05,520 --> 00:05:08,000
little custom resource that you can use

00:05:07,360 --> 00:05:10,560
to

00:05:08,000 --> 00:05:12,560
take existing spaces and arrange them

00:05:10,560 --> 00:05:14,080
into parent-child relationships

00:05:12,560 --> 00:05:16,000
uh and we call these full name spaces

00:05:14,080 --> 00:05:16,880
because you can uh you can modify the

00:05:16,000 --> 00:05:18,240
hierarchy

00:05:16,880 --> 00:05:19,600
or as i mentioned you can create these

00:05:18,240 --> 00:05:20,560
self-service what we call sub-name

00:05:19,600 --> 00:05:22,479
spaces

00:05:20,560 --> 00:05:23,840
uh where if you just have permission to

00:05:22,479 --> 00:05:24,160
create a sub-name namespace underneath

00:05:23,840 --> 00:05:26,400
this

00:05:24,160 --> 00:05:27,759
particular existing namespace and then

00:05:26,400 --> 00:05:28,800
that one's locked in place you can't

00:05:27,759 --> 00:05:30,400
move it around

00:05:28,800 --> 00:05:31,919
and so that's really good for those sort

00:05:30,400 --> 00:05:34,560
of self-serve uh

00:05:31,919 --> 00:05:36,080
contexts and then once you have that you

00:05:34,560 --> 00:05:37,919
can create policies in the ancestor

00:05:36,080 --> 00:05:39,360
namespaces and they will just get copied

00:05:37,919 --> 00:05:40,000
into the descendants you can pick which

00:05:39,360 --> 00:05:43,199
ones

00:05:40,000 --> 00:05:44,560
get copied in a cluster-wide config

00:05:43,199 --> 00:05:47,120
things like our back limit ranges

00:05:44,560 --> 00:05:49,440
network policies uh an agency also puts

00:05:47,120 --> 00:05:51,280
some guaranteed labels onto

00:05:49,440 --> 00:05:53,360
the namespaces that mirrors the

00:05:51,280 --> 00:05:54,560
hierarchy and you can use those as label

00:05:53,360 --> 00:05:55,759
selectors and things like network

00:05:54,560 --> 00:05:58,560
policies to get that kind of

00:05:55,759 --> 00:06:00,560
hierarchical enforcement

00:05:58,560 --> 00:06:03,520
uh as i mentioned i gave a talk that

00:06:00,560 --> 00:06:05,520
went into hnc in depth at qcon eu

00:06:03,520 --> 00:06:07,520
it's on youtube it's fantastic if i may

00:06:05,520 --> 00:06:09,440
say so myself so please go look at it

00:06:07,520 --> 00:06:10,720
um but we are not sitting still and

00:06:09,440 --> 00:06:11,919
we've been working pretty hard ever

00:06:10,720 --> 00:06:14,319
since then so

00:06:11,919 --> 00:06:15,360
the big changes since that uh talk have

00:06:14,319 --> 00:06:17,520
been well

00:06:15,360 --> 00:06:19,680
the agency has been increasing

00:06:17,520 --> 00:06:21,280
instability as we get more users more

00:06:19,680 --> 00:06:22,639
people evaluating it trying to break it

00:06:21,280 --> 00:06:24,319
and poke it in weird ways

00:06:22,639 --> 00:06:25,759
which is great uh we're finding some

00:06:24,319 --> 00:06:27,280
corner cases and and

00:06:25,759 --> 00:06:28,960
getting rid of some of the watches that

00:06:27,280 --> 00:06:31,280
made it harder to use

00:06:28,960 --> 00:06:33,039
uh we are adding exceptions and

00:06:31,280 --> 00:06:35,440
selectors what this means is that

00:06:33,039 --> 00:06:36,400
remember how i just said you put a um an

00:06:35,440 --> 00:06:38,240
object in an

00:06:36,400 --> 00:06:39,759
ancestor namespace it gets copied to all

00:06:38,240 --> 00:06:41,360
the descendants well sometimes you don't

00:06:39,759 --> 00:06:43,199
want it to go to all the descendants

00:06:41,360 --> 00:06:44,720
because strict hierarchies are too

00:06:43,199 --> 00:06:47,039
restrictive so

00:06:44,720 --> 00:06:48,400
with exceptions you can basically put a

00:06:47,039 --> 00:06:50,400
label selector

00:06:48,400 --> 00:06:51,680
on objects and that will stop it from

00:06:50,400 --> 00:06:52,479
being propagated everywhere in the

00:06:51,680 --> 00:06:54,000
hierarchy

00:06:52,479 --> 00:06:56,080
uh or even into nowhere at all if you

00:06:54,000 --> 00:06:57,599
don't want it for some reason

00:06:56,080 --> 00:07:00,000
uh the last thing that we're adding is

00:06:57,599 --> 00:07:00,560
an improved api so we did an api review

00:07:00,000 --> 00:07:03,199
after

00:07:00,560 --> 00:07:05,039
the um the api had grown in a sort of ad

00:07:03,199 --> 00:07:07,840
hoc way for about a year

00:07:05,039 --> 00:07:09,039
um it survived pretty well but there

00:07:07,840 --> 00:07:10,800
were a couple of

00:07:09,039 --> 00:07:13,199
nice changes that we made uh things to

00:07:10,800 --> 00:07:14,960
make it more kubernetes compliant

00:07:13,199 --> 00:07:17,120
um and so we're introducing this in the

00:07:14,960 --> 00:07:18,400
next version which is 0.6

00:07:17,120 --> 00:07:19,919
not going to be we don't think there

00:07:18,400 --> 00:07:20,639
will be many changes before we go to a

00:07:19,919 --> 00:07:22,560
beta

00:07:20,639 --> 00:07:23,680
and if you already have agency installed

00:07:22,560 --> 00:07:26,720
we're going to upgrade all of your

00:07:23,680 --> 00:07:28,400
objects for you automatically

00:07:26,720 --> 00:07:30,080
so if you want to get this you do not

00:07:28,400 --> 00:07:31,680
need to get a new version of kubernetes

00:07:30,080 --> 00:07:33,840
it's just an add-on so it's pretty easy

00:07:31,680 --> 00:07:35,680
you can add it to any kubernetes

00:07:33,840 --> 00:07:37,599
15 cluster i think at some points and

00:07:35,680 --> 00:07:40,720
we'll be switching that to 116.

00:07:37,599 --> 00:07:42,240
uh for if you want to on open source you

00:07:40,720 --> 00:07:44,319
can go to that

00:07:42,240 --> 00:07:46,560
multi-tenancy reboot that tasha

00:07:44,319 --> 00:07:48,800
mentioned and just click through to hnc

00:07:46,560 --> 00:07:50,080
uh or go to the releases page and grab

00:07:48,800 --> 00:07:52,400
her for more releases

00:07:50,080 --> 00:07:53,759
uh if you happen to be using gke or

00:07:52,400 --> 00:07:55,919
anthos then uh

00:07:53,759 --> 00:07:57,120
then you can get it as a product called

00:07:55,919 --> 00:07:59,360
hierarchy controller

00:07:57,120 --> 00:08:01,199
in config sync or enthouse config

00:07:59,360 --> 00:08:04,000
management

00:08:01,199 --> 00:08:04,720
and it comes with a really nice plugin

00:08:04,000 --> 00:08:06,720
that you can

00:08:04,720 --> 00:08:07,759
install using crew which is cool and

00:08:06,720 --> 00:08:10,800
it's available for

00:08:07,759 --> 00:08:12,639
linux and mac os if you want to learn

00:08:10,800 --> 00:08:15,440
more about this as i mentioned i have

00:08:12,639 --> 00:08:16,319
uh the video from cubecon u uh just

00:08:15,440 --> 00:08:19,360
after that

00:08:16,319 --> 00:08:21,520
i wrote a blog post on kubernetes.io

00:08:19,360 --> 00:08:23,039
uh so please go check that out and uh

00:08:21,520 --> 00:08:25,280
read through and learn more about the

00:08:23,039 --> 00:08:26,800
the thinking behind hnc and the concepts

00:08:25,280 --> 00:08:28,639
around it

00:08:26,800 --> 00:08:30,319
and if you would like to contribute we

00:08:28,639 --> 00:08:32,320
are looking for contributors who want to

00:08:30,319 --> 00:08:33,680
work on features that we like the idea

00:08:32,320 --> 00:08:34,479
of but we haven't quite been able to get

00:08:33,680 --> 00:08:36,719
to yet

00:08:34,479 --> 00:08:38,159
things like uh setting us per sub-tree

00:08:36,719 --> 00:08:40,719
configuration if you only want

00:08:38,159 --> 00:08:42,320
secrets to be uh propagated in one

00:08:40,719 --> 00:08:44,240
sub-tree but not another

00:08:42,320 --> 00:08:45,920
uh creating sub-name spaces with default

00:08:44,240 --> 00:08:47,360
policies that are not inherited

00:08:45,920 --> 00:08:49,360
hierarchical resource code lots of

00:08:47,360 --> 00:08:51,279
people talk about that one and just

00:08:49,360 --> 00:08:52,399
generally improving productionization

00:08:51,279 --> 00:08:54,000
support i was actually working on

00:08:52,399 --> 00:08:56,720
prometheus today

00:08:54,000 --> 00:08:58,399
but more eyes are always welcome plus

00:08:56,720 --> 00:09:00,959
more to help with testing

00:08:58,399 --> 00:09:02,800
more help with documentation any patches

00:09:00,959 --> 00:09:04,240
that you want to provide

00:09:02,800 --> 00:09:06,880
we are always looking for people who

00:09:04,240 --> 00:09:08,640
want to help out with that kind of stuff

00:09:06,880 --> 00:09:10,720
and so uh please stick around and i hope

00:09:08,640 --> 00:09:13,440
to hear your questions afterwards

00:09:10,720 --> 00:09:14,640
uh and with that i will pass it over to

00:09:13,440 --> 00:09:23,839
faye to talk about

00:09:14,640 --> 00:09:23,839
virtual clusters

00:09:24,959 --> 00:09:28,320
just quick check can you guys see the

00:09:26,320 --> 00:09:31,600
screen

00:09:28,320 --> 00:09:34,240
okay uh so hello everyone

00:09:31,600 --> 00:09:35,360
my name is faye i come from ali ababa

00:09:34,240 --> 00:09:37,440
i'm in the past

00:09:35,360 --> 00:09:38,480
one and a half year i was working

00:09:37,440 --> 00:09:40,399
closely with the

00:09:38,480 --> 00:09:43,360
multi-tenancy working group or project

00:09:40,399 --> 00:09:43,360
called virtual cluster

00:09:45,920 --> 00:09:49,200
as anger mentioned in previous

00:09:48,000 --> 00:09:51,680
plantation the

00:09:49,200 --> 00:09:52,320
in kubernetes namespace is the primary

00:09:51,680 --> 00:09:55,360
uh

00:09:52,320 --> 00:09:58,560
api abstraction to support multi-tenancy

00:09:55,360 --> 00:10:01,120
um but by sharing uh uh

00:09:58,560 --> 00:10:02,800
for for many tenants users who share one

00:10:01,120 --> 00:10:03,920
ips server themselves bring some part

00:10:02,800 --> 00:10:07,040
problems

00:10:03,920 --> 00:10:09,360
that cannot easily be

00:10:07,040 --> 00:10:10,640
uh handled by namespace for example they

00:10:09,360 --> 00:10:11,120
may have performance interference

00:10:10,640 --> 00:10:13,680
between

00:10:11,120 --> 00:10:15,760
among each other and uh once when you

00:10:13,680 --> 00:10:16,560
when we really use namespace to organize

00:10:15,760 --> 00:10:19,680
all the dependent

00:10:16,560 --> 00:10:21,360
of resources and only give tenant users

00:10:19,680 --> 00:10:23,760
to access to the namespace

00:10:21,360 --> 00:10:25,360
it is hard for them to create a cluster

00:10:23,760 --> 00:10:28,720
of resources such as

00:10:25,360 --> 00:10:31,680
crd or web hook center which

00:10:28,720 --> 00:10:34,880
gives some trouble for management for

00:10:31,680 --> 00:10:38,320
the for their management stack

00:10:34,880 --> 00:10:41,279
i see we do see some cases that uh

00:10:38,320 --> 00:10:41,839
the namespace based isolation is good

00:10:41,279 --> 00:10:44,079
enough

00:10:41,839 --> 00:10:45,519
but we do see some other cases people

00:10:44,079 --> 00:10:48,160
may want very strict

00:10:45,519 --> 00:10:49,920
or complete isolation and they won't

00:10:48,160 --> 00:10:50,880
have a solution which is compatible with

00:10:49,920 --> 00:10:54,959
the existing

00:10:50,880 --> 00:10:58,320
cognitive api so so the

00:10:54,959 --> 00:11:00,800
so compare people may do this by just

00:10:58,320 --> 00:11:01,519
creating individual you know cluster

00:11:00,800 --> 00:11:03,440
tenant

00:11:01,519 --> 00:11:04,800
but in that solution there is a problem

00:11:03,440 --> 00:11:07,040
that

00:11:04,800 --> 00:11:08,720
if each people has individual node

00:11:07,040 --> 00:11:11,040
cluster by managing their

00:11:08,720 --> 00:11:13,120
individual nodes it is harder to do the

00:11:11,040 --> 00:11:16,079
global optimization for the node

00:11:13,120 --> 00:11:16,720
uh no degradation so ideally we'd like

00:11:16,079 --> 00:11:19,519
to have

00:11:16,720 --> 00:11:20,240
a kind of complete control isolation

00:11:19,519 --> 00:11:23,040
solution

00:11:20,240 --> 00:11:25,120
well we can share in the node resource

00:11:23,040 --> 00:11:27,680
among all the tenants

00:11:25,120 --> 00:11:28,480
as i said before we reach the solution

00:11:27,680 --> 00:11:30,160
um has

00:11:28,480 --> 00:11:31,519
almost zero integration efforts for the

00:11:30,160 --> 00:11:33,600
existing system which means

00:11:31,519 --> 00:11:34,959
uh we would like to have a solution that

00:11:33,600 --> 00:11:36,800
uh which

00:11:34,959 --> 00:11:39,440
which is fully compatible with the

00:11:36,800 --> 00:11:42,480
existing kubernetes apis

00:11:39,440 --> 00:11:43,440
um in this project so we introduced a

00:11:42,480 --> 00:11:46,000
new uh kind of

00:11:43,440 --> 00:11:47,440
architect for the virtual cluster uh in

00:11:46,000 --> 00:11:50,399
short the idea is that

00:11:47,440 --> 00:11:51,040
we will the media have a tenant operator

00:11:50,399 --> 00:11:54,560
which

00:11:51,040 --> 00:11:56,560
we assign on a dedicated control plan

00:11:54,560 --> 00:11:59,920
for each individual tenant

00:11:56,560 --> 00:12:01,040
and the the the tenant which we call the

00:11:59,920 --> 00:12:02,480
tenant master

00:12:01,040 --> 00:12:04,639
the teller must the goal of the tenant

00:12:02,480 --> 00:12:06,320
master is to do to maintain

00:12:04,639 --> 00:12:07,760
all the objects that are created by the

00:12:06,320 --> 00:12:10,160
10 users

00:12:07,760 --> 00:12:11,839
and there is a single controller which

00:12:10,160 --> 00:12:13,120
synchronizes all the you know tenant

00:12:11,839 --> 00:12:16,079
created objects

00:12:13,120 --> 00:12:18,320
from the tenant master to a super master

00:12:16,079 --> 00:12:20,720
uh which is the kubernetes cluster which

00:12:18,320 --> 00:12:24,000
manages the actual node resource

00:12:20,720 --> 00:12:24,480
um so in order for the you know

00:12:24,000 --> 00:12:27,920
different

00:12:24,480 --> 00:12:30,560
tenant to call the global complete api

00:12:27,920 --> 00:12:31,120
uh to access or monitor the pod or do

00:12:30,560 --> 00:12:34,240
the

00:12:31,120 --> 00:12:37,440
logging or excc api code to the

00:12:34,240 --> 00:12:40,000
queue the tenant pass we introduce a

00:12:37,440 --> 00:12:42,160
component covered agent which proxy all

00:12:40,000 --> 00:12:45,279
the you know cannon's request

00:12:42,160 --> 00:12:47,360
to the uh copyrighted apis

00:12:45,279 --> 00:12:48,720
from a high-level perspective you look

00:12:47,360 --> 00:12:52,000
at this architecture

00:12:48,720 --> 00:12:55,200
ideally the tenant master is the object

00:12:52,000 --> 00:12:57,680
state maintainer and the supermaster is

00:12:55,200 --> 00:13:00,160
can be abstracted as a resource provider

00:12:57,680 --> 00:13:03,360
owing it only provided a part resource

00:13:00,160 --> 00:13:06,720
to each tenant users

00:13:03,360 --> 00:13:09,120
with this solution it is clear that in

00:13:06,720 --> 00:13:10,560
with this solution uh each tenant user

00:13:09,120 --> 00:13:13,279
has you know complete

00:13:10,560 --> 00:13:13,600
view isolation it won't be aware of all

00:13:13,279 --> 00:13:15,200
the

00:13:13,600 --> 00:13:17,440
objects that are created by other

00:13:15,200 --> 00:13:20,000
tenants since they don't have direct

00:13:17,440 --> 00:13:22,000
access to the supermass at add-on

00:13:20,000 --> 00:13:23,200
with this solution we also limited the

00:13:22,000 --> 00:13:25,839
velocity radius

00:13:23,200 --> 00:13:26,880
if any tenants hit any security

00:13:25,839 --> 00:13:29,600
vulnerability

00:13:26,880 --> 00:13:30,800
only that tenants get affected and the

00:13:29,600 --> 00:13:33,519
other tenants

00:13:30,800 --> 00:13:34,079
won't be get affected also with this

00:13:33,519 --> 00:13:37,120
approach

00:13:34,079 --> 00:13:38,639
since you know each tenant uh user has a

00:13:37,120 --> 00:13:41,760
dedicated control plan

00:13:38,639 --> 00:13:44,560
it will it have executed all the

00:13:41,760 --> 00:13:46,399
uh resources that presented in the

00:13:44,560 --> 00:13:50,320
tenant master including all the

00:13:46,399 --> 00:13:53,199
crd scope resource rv control etcetera

00:13:50,320 --> 00:13:53,519
um since you know supermaster only you

00:13:53,199 --> 00:13:56,240
know

00:13:53,519 --> 00:13:56,880
treat only works as a part of resource

00:13:56,240 --> 00:14:00,240
provider

00:13:56,880 --> 00:14:03,279
it doesn't involves in the you know

00:14:00,240 --> 00:14:05,680
control plan management step um

00:14:03,279 --> 00:14:06,399
so this is what we do in the virtual

00:14:05,680 --> 00:14:10,079
cluster

00:14:06,399 --> 00:14:11,199
uh the the what what what the virtual

00:14:10,079 --> 00:14:14,240
class really

00:14:11,199 --> 00:14:15,360
does uh from the high-level architecture

00:14:14,240 --> 00:14:18,720
perspective

00:14:15,360 --> 00:14:22,240
um next i'll give a brief status

00:14:18,720 --> 00:14:25,760
about how this project goes um

00:14:22,240 --> 00:14:27,360
at this moment the the the among all the

00:14:25,760 --> 00:14:29,920
three major components

00:14:27,360 --> 00:14:30,560
uh canada operator sync operator and a v

00:14:29,920 --> 00:14:32,560
agent

00:14:30,560 --> 00:14:33,680
the single controller and the va agent

00:14:32,560 --> 00:14:37,040
are

00:14:33,680 --> 00:14:39,680
pretty much as of now they are

00:14:37,040 --> 00:14:41,680
kind of production ready we are actually

00:14:39,680 --> 00:14:42,800
working on switching the tenant operator

00:14:41,680 --> 00:14:45,519
to a new

00:14:42,800 --> 00:14:46,560
class the api based design and the

00:14:45,519 --> 00:14:49,199
implementation

00:14:46,560 --> 00:14:51,199
the idea is we we are trying to have a

00:14:49,199 --> 00:14:54,959
more provide a more formal way

00:14:51,199 --> 00:14:56,560
to do the tenant tenant master

00:14:54,959 --> 00:14:58,880
provisioning management

00:14:56,560 --> 00:14:59,600
by leveraging the all existing cluster

00:14:58,880 --> 00:15:02,399
api

00:14:59,600 --> 00:15:03,040
offering that class api c groups has

00:15:02,399 --> 00:15:05,360
been

00:15:03,040 --> 00:15:06,480
uh has been done in the past two and a

00:15:05,360 --> 00:15:09,839
half years they have

00:15:06,480 --> 00:15:12,079
very good tooling um around it and

00:15:09,839 --> 00:15:13,839
they have that we want to follow their

00:15:12,079 --> 00:15:15,199
you know specification about how to

00:15:13,839 --> 00:15:18,240
define a tenant

00:15:15,199 --> 00:15:21,600
master component um

00:15:18,240 --> 00:15:23,199
this project uh was starting as a

00:15:21,600 --> 00:15:24,639
working multitasking working group

00:15:23,199 --> 00:15:27,920
incubator project

00:15:24,639 --> 00:15:31,199
and now we we already get a secret uh c

00:15:27,920 --> 00:15:32,000
class api uh the support and we are

00:15:31,199 --> 00:15:33,680
moving

00:15:32,000 --> 00:15:36,240
uh we are we are working on moving the

00:15:33,680 --> 00:15:38,800
intel code to a new repo called

00:15:36,240 --> 00:15:39,440
class api provider nested so the all the

00:15:38,800 --> 00:15:41,120
future

00:15:39,440 --> 00:15:42,560
development and the enhancement we have

00:15:41,120 --> 00:15:46,240
been doing that repo

00:15:42,560 --> 00:15:49,120
and this is a open source project and

00:15:46,240 --> 00:15:49,759
this is a community effort we are very

00:15:49,120 --> 00:15:51,759
welcome

00:15:49,759 --> 00:15:54,240
anybody who are interested in this

00:15:51,759 --> 00:15:57,360
project to join the project um

00:15:54,240 --> 00:16:00,639
by by by by failing the issue by

00:15:57,360 --> 00:16:03,279
giving easy virtual class a try so i

00:16:00,639 --> 00:16:04,240
am happy to help people to use it and

00:16:03,279 --> 00:16:07,519
making this project

00:16:04,240 --> 00:16:11,759
better so next i'm going to hand over to

00:16:07,519 --> 00:16:14,399
my team for the next translation

00:16:11,759 --> 00:16:14,399
thank you frey

00:16:14,880 --> 00:16:19,759
yes hi everyone i'm jim beguardia and i

00:16:17,920 --> 00:16:21,440
lead the multi-tenancy benchmarking

00:16:19,759 --> 00:16:24,399
effort within this group

00:16:21,440 --> 00:16:26,000
and so both adrian and faye showed us

00:16:24,399 --> 00:16:28,720
you know different ways of

00:16:26,000 --> 00:16:30,480
implementing multi-tenancy and as

00:16:28,720 --> 00:16:32,240
everyone probably knows there's several

00:16:30,480 --> 00:16:33,920
several constructs and kubernetes that

00:16:32,240 --> 00:16:35,920
you can use for security

00:16:33,920 --> 00:16:36,959
for multi-tenancy for segmentation

00:16:35,920 --> 00:16:39,199
isolation

00:16:36,959 --> 00:16:40,000
but one of the common challenges that we

00:16:39,199 --> 00:16:42,800
heard from

00:16:40,000 --> 00:16:43,360
folks in the community uh from customers

00:16:42,800 --> 00:16:45,199
is

00:16:43,360 --> 00:16:47,920
how do i know that my cluster is

00:16:45,199 --> 00:16:49,920
properly configured for multi-tenancy

00:16:47,920 --> 00:16:51,360
are there ways to measure this test this

00:16:49,920 --> 00:16:54,240
and report this right

00:16:51,360 --> 00:16:56,560
so the benchmarking effort our our focus

00:16:54,240 --> 00:16:58,000
is to create a set of guidelines for

00:16:56,560 --> 00:17:00,560
first off of course configuring

00:16:58,000 --> 00:17:03,279
multi-tenancy and then to also create

00:17:00,560 --> 00:17:04,160
tools to easily be able to validate and

00:17:03,279 --> 00:17:06,160
test

00:17:04,160 --> 00:17:08,079
whether multi-tenancy is properly

00:17:06,160 --> 00:17:09,679
implemented

00:17:08,079 --> 00:17:11,600
so in terms of what are some of the

00:17:09,679 --> 00:17:12,160
definitions we have come up with and

00:17:11,600 --> 00:17:14,160
these are

00:17:12,160 --> 00:17:15,199
of course things that are evolving in

00:17:14,160 --> 00:17:17,199
the community

00:17:15,199 --> 00:17:19,600
but right now we have two profile levels

00:17:17,199 --> 00:17:22,720
defined where the first profile level

00:17:19,600 --> 00:17:24,799
the idea is that given any namespace

00:17:22,720 --> 00:17:25,760
independently of how this namespace was

00:17:24,799 --> 00:17:27,919
configured

00:17:25,760 --> 00:17:29,919
how do you make sure that that namespace

00:17:27,919 --> 00:17:30,960
has the right constructs as all of the

00:17:29,919 --> 00:17:32,960
right

00:17:30,960 --> 00:17:34,000
again the isolation the segmentation

00:17:32,960 --> 00:17:36,720
required

00:17:34,000 --> 00:17:39,120
for you know multi-tenancy of different

00:17:36,720 --> 00:17:41,120
teams using that same cluster

00:17:39,120 --> 00:17:42,320
and then with the profile level two the

00:17:41,120 --> 00:17:44,880
idea is

00:17:42,320 --> 00:17:46,559
to extend the first profile level and

00:17:44,880 --> 00:17:50,000
also add self-service

00:17:46,559 --> 00:17:51,200
for that so not only do we allow in that

00:17:50,000 --> 00:17:53,679
profile level

00:17:51,200 --> 00:17:55,840
uh teams to be able to you know to

00:17:53,679 --> 00:17:57,760
isolate and segment their workloads

00:17:55,840 --> 00:17:59,600
but also to be able to then do

00:17:57,760 --> 00:18:01,360
self-service operations

00:17:59,600 --> 00:18:03,360
like maybe defining custom network

00:18:01,360 --> 00:18:05,440
policies for their application

00:18:03,360 --> 00:18:06,960
custom roles things like that that would

00:18:05,440 --> 00:18:09,200
be required

00:18:06,960 --> 00:18:10,880
across you know different multi-tenancy

00:18:09,200 --> 00:18:12,559
constructs

00:18:10,880 --> 00:18:14,960
also in terms of the categories of the

00:18:12,559 --> 00:18:16,559
benchmarks and tests we identified seven

00:18:14,960 --> 00:18:18,000
different categories so everything from

00:18:16,559 --> 00:18:19,039
isolating the control plane from

00:18:18,000 --> 00:18:21,520
workloads

00:18:19,039 --> 00:18:22,320
isolating you know tenant workloads from

00:18:21,520 --> 00:18:25,200
each other

00:18:22,320 --> 00:18:27,120
network isolation storage isolation

00:18:25,200 --> 00:18:28,480
making sure host resources are not

00:18:27,120 --> 00:18:30,640
accessed from pods

00:18:28,480 --> 00:18:31,840
so these are following like pod security

00:18:30,640 --> 00:18:33,600
best practices

00:18:31,840 --> 00:18:34,880
ensuring fairness through configuring

00:18:33,600 --> 00:18:36,799
resource quotas

00:18:34,880 --> 00:18:38,960
and then finally self-service which is

00:18:36,799 --> 00:18:42,080
profile level two

00:18:38,960 --> 00:18:44,000
as as i was discussing earlier and then

00:18:42,080 --> 00:18:44,720
in terms of in terms of the tests what

00:18:44,000 --> 00:18:46,960
we saw

00:18:44,720 --> 00:18:48,320
is just checking configuration is not

00:18:46,960 --> 00:18:50,400
always enough

00:18:48,320 --> 00:18:52,080
because there's an increasingly in a

00:18:50,400 --> 00:18:53,600
number of different ways

00:18:52,080 --> 00:18:55,280
just take for example network

00:18:53,600 --> 00:18:56,640
segmentation there's a number of

00:18:55,280 --> 00:18:59,679
different ways you could configure a

00:18:56,640 --> 00:19:01,280
network segmentation or implement it

00:18:59,679 --> 00:19:03,919
so instead of just checking for

00:19:01,280 --> 00:19:06,320
configuration what we also do is run

00:19:03,919 --> 00:19:08,320
some behavioral tests in terms of

00:19:06,320 --> 00:19:10,559
how multi-tenancy is configured within

00:19:08,320 --> 00:19:12,559
the cluster so today

00:19:10,559 --> 00:19:14,320
you know the tests are mostly focused on

00:19:12,559 --> 00:19:16,240
namespace-based isolation

00:19:14,320 --> 00:19:18,240
but as the virtual cluster project

00:19:16,240 --> 00:19:19,520
evolves we'll also be looking at adding

00:19:18,240 --> 00:19:22,960
behavioral tests

00:19:19,520 --> 00:19:24,720
uh to be able to check on that so

00:19:22,960 --> 00:19:26,559
with that you know and the you know i

00:19:24,720 --> 00:19:28,960
also mentioned that part of the effort

00:19:26,559 --> 00:19:31,440
of this track was to also come up with a

00:19:28,960 --> 00:19:33,600
validation tool so we have a coupe

00:19:31,440 --> 00:19:36,080
cuddle plug-in which you can run on any

00:19:33,600 --> 00:19:37,760
cluster or it just requires a namespace

00:19:36,080 --> 00:19:38,480
and a role and i'll give a quick demo of

00:19:37,760 --> 00:19:40,480
this

00:19:38,480 --> 00:19:42,960
and what it will do is it will allow us

00:19:40,480 --> 00:19:45,600
to check and it will run about

00:19:42,960 --> 00:19:47,840
15 or so different tests to ensure that

00:19:45,600 --> 00:19:50,080
multi-tenancy is properly configured

00:19:47,840 --> 00:19:51,039
and this list of tests again all of this

00:19:50,080 --> 00:19:53,520
is on our repo

00:19:51,039 --> 00:19:55,120
so feel free to browse through look at

00:19:53,520 --> 00:19:56,320
the details provide feedback and

00:19:55,120 --> 00:19:58,000
comments there

00:19:56,320 --> 00:20:00,480
but let me just show what this looks

00:19:58,000 --> 00:20:01,120
like in action and then we'll come back

00:20:00,480 --> 00:20:04,000
and you know

00:20:01,120 --> 00:20:04,559
talk a little bit about the roadmap etc

00:20:04,000 --> 00:20:07,280
so

00:20:04,559 --> 00:20:07,760
here i have already a cluster configured

00:20:07,280 --> 00:20:10,240
and

00:20:07,760 --> 00:20:11,200
what i'm going to do just in sake of

00:20:10,240 --> 00:20:13,520
time is i'm going to

00:20:11,200 --> 00:20:16,720
show what this looks like when running

00:20:13,520 --> 00:20:19,039
so here i'm using a particular user role

00:20:16,720 --> 00:20:20,000
this is a tenant admin alley and the

00:20:19,039 --> 00:20:23,679
name space here is

00:20:20,000 --> 00:20:26,159
test so there's um it's going to go the

00:20:23,679 --> 00:20:28,159
mtp plugin is going to run through a

00:20:26,159 --> 00:20:30,400
number of tests and as you can see

00:20:28,159 --> 00:20:32,159
uh what happened initially was it's you

00:20:30,400 --> 00:20:34,320
know a few of the test paths

00:20:32,159 --> 00:20:35,919
because i have you know quota configured

00:20:34,320 --> 00:20:37,600
i have some limits configured

00:20:35,919 --> 00:20:39,919
but a lot of the tests are failing at

00:20:37,600 --> 00:20:41,919
the moment right so what i can do and

00:20:39,919 --> 00:20:44,640
all of this by the way is documented

00:20:41,919 --> 00:20:45,200
on our you know web web page so if you

00:20:44,640 --> 00:20:48,320
browse

00:20:45,200 --> 00:20:51,840
into the project and um

00:20:48,320 --> 00:20:53,440
if you look at you know the mtb web page

00:20:51,840 --> 00:20:55,120
you will see instructions for going

00:20:53,440 --> 00:20:57,039
through this exact same demo

00:20:55,120 --> 00:20:58,799
but i'm going to apply you know some

00:20:57,039 --> 00:21:02,080
policies now to for

00:20:58,799 --> 00:21:04,480
segmentation isolation within my cluster

00:21:02,080 --> 00:21:06,559
i'm using kiverno policies there's also

00:21:04,480 --> 00:21:07,760
you know oppa gatekeeper policies so you

00:21:06,559 --> 00:21:09,919
can choose

00:21:07,760 --> 00:21:11,520
which policies you apply and as you can

00:21:09,919 --> 00:21:13,440
see what these are doing is they're

00:21:11,520 --> 00:21:15,520
providing host isolation

00:21:13,440 --> 00:21:16,799
uh there's different policies for also

00:21:15,520 --> 00:21:18,640
you know disallowing

00:21:16,799 --> 00:21:19,840
things like adding capabilities to your

00:21:18,640 --> 00:21:22,000
pod etc

00:21:19,840 --> 00:21:23,840
so with that let's run these tests again

00:21:22,000 --> 00:21:24,720
and what you know we would expect to

00:21:23,840 --> 00:21:27,200
happen

00:21:24,720 --> 00:21:28,559
is we would get much better results this

00:21:27,200 --> 00:21:30,799
time around

00:21:28,559 --> 00:21:32,960
as we're running the tool and since we

00:21:30,799 --> 00:21:34,799
have the policy engine in place

00:21:32,960 --> 00:21:37,200
which is you know guaranteeing some

00:21:34,799 --> 00:21:40,799
isolation segmentation

00:21:37,200 --> 00:21:43,200
so this time and you know as expected we

00:21:40,799 --> 00:21:45,440
went through all of these 15 tests we're

00:21:43,200 --> 00:21:46,159
seeing a pass so this gives a very easy

00:21:45,440 --> 00:21:48,159
way

00:21:46,159 --> 00:21:51,760
for us to now validate that the

00:21:48,159 --> 00:21:53,440
namespace is properly configured

00:21:51,760 --> 00:21:55,039
so a few other things that we're working

00:21:53,440 --> 00:21:57,200
on and this is where again

00:21:55,039 --> 00:21:58,799
we're looking you know for folks to join

00:21:57,200 --> 00:22:00,960
in and help and

00:21:58,799 --> 00:22:02,880
uh extend some of this or even just

00:22:00,960 --> 00:22:04,880
contribute by giving feedback

00:22:02,880 --> 00:22:06,559
is we want to add more behavioral tests

00:22:04,880 --> 00:22:08,159
for storage and networking

00:22:06,559 --> 00:22:10,080
uh there are you know some pending

00:22:08,159 --> 00:22:12,000
requests for also converting this tool

00:22:10,080 --> 00:22:14,559
to run inside of the cluster

00:22:12,000 --> 00:22:15,120
and produce periodic reports using some

00:22:14,559 --> 00:22:17,840
you know

00:22:15,120 --> 00:22:18,480
a custom resource for reporting and then

00:22:17,840 --> 00:22:19,919
also

00:22:18,480 --> 00:22:22,559
you know there's interest from other

00:22:19,919 --> 00:22:24,799
working groups uh to be able to reuse

00:22:22,559 --> 00:22:26,880
these the benchmarking tool

00:22:24,799 --> 00:22:28,880
for auditing and benchmarking across

00:22:26,880 --> 00:22:29,840
different other types of security

00:22:28,880 --> 00:22:32,159
standards like the

00:22:29,840 --> 00:22:33,760
pod security levels uh things of that

00:22:32,159 --> 00:22:35,840
nature

00:22:33,760 --> 00:22:38,159
so that's a quick you know overview of

00:22:35,840 --> 00:22:40,880
the multi-tenancy benchmarking project

00:22:38,159 --> 00:22:41,840
and i think upfront tasha gave some

00:22:40,880 --> 00:22:44,000
links i'm just

00:22:41,840 --> 00:22:45,360
showing the repo links and other things

00:22:44,000 --> 00:22:47,840
um again

00:22:45,360 --> 00:22:49,520
but we're here and we're open to take

00:22:47,840 --> 00:22:53,120
your questions and chat

00:22:49,520 --> 00:22:57,760
um so feel free to jump in and

00:22:53,120 --> 00:22:57,760

YouTube URL: https://www.youtube.com/watch?v=4c3pv4wpcng


